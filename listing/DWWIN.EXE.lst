setalc   +
retn 4A5Bh  +
***
dec ebx  +
fisttp  qword ptr [eax] +
inc ebp  +
movs   +
retn   +
***
retn 0C400h  +
***
xor al [ecx+0] +
add [ecx-39FFFE64h] dl +
pushf   +
add [eax] eax +
cld   +
pushf   +
add [eax] eax +
aas   +
popf   +
add [eax] eax +
popf   +
add [eax] eax +
xchg eax edx +
popf   +
add [eax] eax +
retf 19Dh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1003CD1  +
test eax eax +
jnz loc_1003CD6  +
mov ecx [esi] +
test ecx ecx +
jz loc_1003CCE  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1003CC2  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101D864 +
push offset dword_101D854  +
push dword_101D860  +
mov dword_101D854 eax +
push offset dword_101D844  +
push offset dword_101D848  +
push offset dword_101D840  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_101D850 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1003D5E  +
cmp eax esi +
jnz loc_1003D51  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1003D61  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1003D38  +
xor esi esi +
inc esi  +
mov eax dword_101DBAC +
cmp eax esi +
jnz loc_1003D74  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1003DAF  +
mov eax dword_101DBAC +
test eax eax +
jnz loc_1003DA9  +
mov dword_101DBAC esi +
push offset dword_1001358  +
push offset dword_100134C  +
call sub_1003CB5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003DAF  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1003E79  +
mov dword_101D85C esi +
mov eax dword_101DBAC +
cmp eax esi +
jnz loc_1003DD3  +
push offset dword_1001348  +
push offset dword_1001340  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101DBAC 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1003DE0  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_101DBB4 ebx +
jz loc_1003E01  +
push offset dword_101DBB4  +
call sub_1004049  +
pop ecx  +
test eax eax +
jz loc_1003E01  +
push ebx  +
push 2  +
push ebx  +
call dword_101DBB4  +
push dword_101D844  +
push dword_101D848  +
push dword_101D840  +
call sub_10048DC  +
add esp 0Ch +
mov dword_101D858 eax +
cmp dword_101D84C ebx +
jnz loc_1003E5F  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_101D858 eax +
xor ebx ebx +
cmp dword_101D84C ebx +
jnz loc_1003E5F  +
push eax  +
call ds:_exit  +
cmp dword_101D85C ebx +
jnz loc_1003E6D  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_101D858 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1003E96  +
xor eax eax +
jmp loc_1003EE3  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1003E92  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1003ED0  +
cmp ecx 20Bh +
jnz loc_1003E92  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1003E92  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1003EDE  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1003E92  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_101D84C eax +
call sub_10041DA  +
push eax  +
call ds:__set_app_type  +
or dword_101DBA4 0FFFFFFFFh +
or dword_101DBA8 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_101D86C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_101D868 +
mov [eax] ecx +
call sub_100C84E  +
cmp dword_101D008 0 +
jnz loc_1003F3C  +
push offset sub_100C84E  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100415C  +
xor eax eax +
retn   +
***
call sub_1004219  +
jmp sub_1003D16  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1003F95  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1003F95  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1003F8F  +
cmp eax 19930521h +
jz loc_1003F8F  +
cmp eax 19930522h +
jz loc_1003F8F  +
cmp eax 1994000h +
jnz loc_1003F95  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_1003F58  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1003FD6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1003FD2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100403D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1004035  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100403F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1004025  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1003FC0  +
pop ecx  +
test eax eax +
jz loc_10040A6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1004000  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10040A6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10040AF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10042AF  +
push offset dword_101D00C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10041CD  +
cmp ecx 0FFFFFFFFh +
jz loc_10041CD  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10041C6  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10041C6  +
cmp edx 10000000h +
jnb loc_10041C6  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10041C6  +
jmp loc_10041C1  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100420F  +
push eax  +
call sub_1004174  +
test eax eax +
jz loc_100420F  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1004204  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100420F  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101D00C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100424B  +
test eax ebx +
jz loc_100424B  +
not eax  +
mov dword_101D010 eax +
jmp loc_10042A6  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:__imp_GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1004292  +
test dword_101D00C ebx +
jnz loc_1004297  +
mov esi 0BB40E64Fh +
mov dword_101D00C esi +
not esi  +
mov dword_101D010 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
cmp ecx dword_101D00C +
jnz loc_10042BA  +
retn 0  +
jmp loc_10042CF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_101D970 eax +
mov dword_101D96C ecx +
mov dword_101D968 edx +
mov dword_101D964 ebx +
mov dword_101D960 esi +
mov dword_101D95C edi +
mov word_101D988 ss +
mov word_101D97C cs +
mov word_101D958 ds +
mov word_101D954 es +
mov word_101D950 fs +
mov word_101D94C gs +
pushf   +
pop dword_101D980  +
mov eax [ebp+0] +
mov dword_101D974 eax +
mov eax [ebp+4] +
mov dword_101D978 eax +
lea eax [ebp+8] +
mov dword_101D984 eax +
mov eax [ebp-320h] +
mov dword_101D8C0 10001h +
mov eax dword_101D978 +
mov dword_101D87C eax +
mov dword_101D870 0C0000409h +
mov dword_101D874 1 +
mov eax dword_101D00C +
mov [ebp-328h] eax +
mov eax dword_101D010 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:__imp_GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101292A  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] ecx +
xor ecx ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] 80004005h +
cmp esi ecx +
jz loc_100458F  +
cmp [ebp+arg_4] ecx +
jz loc_100458F  +
movzx eax word ptr [esi] +
push edi  +
push 2  +
pop edi  +
cmp ax 22h +
jnz loc_1004453  +
add esi edi +
movzx eax word ptr [esi] +
cmp ax cx +
jz loc_100451C  +
cmp ax 22h +
jz loc_100446B  +
add esi edi +
movzx eax word ptr [esi] +
cmp ax cx +
jnz loc_1004441  +
jmp loc_100446B  +
cmp ax cx +
jz loc_100446B  +
movzx eax ax +
cmp ax 20h +
jbe loc_100446B  +
add esi edi +
movzx eax word ptr [esi] +
cmp ax cx +
jnz loc_100445B  +
movzx eax word ptr [esi] +
cmp ax cx +
jz loc_100451C  +
cmp ax 20h +
ja loc_1004487  +
add esi edi +
movzx eax word ptr [esi] +
cmp ax cx +
jnz loc_1004477  +
movzx eax word ptr [esi] +
cmp ax cx +
jz loc_100451C  +
push ebx  +
xor ebx ebx +
inc ebx  +
jmp loc_10044FC  +
cmp ax 2Dh +
jz loc_10044AF  +
cmp ax 2Fh +
jz loc_10044AF  +
add esi edi +
movzx eax word ptr [esi] +
cmp ax cx +
jnz loc_1004499  +
cmp [esi] cx +
jz loc_1004501  +
add esi edi +
movzx eax word ptr [esi] +
cmp eax 44h +
jz loc_1004525  +
cmp eax 53h +
jz loc_10044DE  +
cmp eax 58h +
jz loc_10044D7  +
cmp eax 64h +
jz loc_1004525  +
cmp eax 73h +
jz loc_10044DE  +
cmp eax 78h +
jnz loc_10044F9  +
add esi edi +
mov [ebp+var_10] ebx +
jmp loc_10044F9  +
add esi edi +
cmp word ptr [esi] 20h +
jbe loc_10044DE  +
push esi  +
call ds:_wtoi64  +
pop ecx  +
mov ecx [ebp+var_4] +
mov [ecx+0Ch] eax +
mov [ebp+var_C] ebx +
xor ecx ecx +
movzx eax word ptr [esi] +
cmp ax cx +
jnz loc_1004499  +
cmp [ebp+var_C] ecx +
jz loc_100451B  +
cmp [ebp+var_10] ecx +
jz loc_100451B  +
mov eax [ebp+var_4] +
cmp [eax+0Ch] ecx +
jz loc_100451B  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebp+var_8] ecx +
pop ebx  +
mov eax [ebp+var_8] +
pop edi  +
jmp loc_10045B8  +
add esi edi +
cmp word ptr [esi] 20h +
jbe loc_1004525  +
mov ecx [ebp+var_4] +
push esi  +
call sub_1012CBE  +
xor esi esi +
cmp eax esi +
mov [ebp+var_8] eax +
jge loc_1004562  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004562  +
test [eax+1Ch] bl +
jz loc_1004562  +
push offset loc_100138C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ecx [ebp+var_4] +
push offset dword_100139C  +
call sub_101332A  +
cmp [ebp+var_C] esi +
jnz loc_100451B  +
cmp [ebp+var_10] esi +
jnz loc_100451B  +
mov ecx [ebp+var_4] +
call sub_1012B64  +
test eax eax +
jz loc_100451B  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
mov [ebp+var_8] esi +
jmp loc_100451B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10045B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10045B3  +
push offset loc_100138C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop esi  +
leave   +
retn 8  +
***
cmp dword ptr [ecx+10h] 1 +
jnz loc_10045CD  +
jmp sub_1012949  +
xor eax eax +
retn   +
***
cmp dword ptr [ecx+10h] 2 +
jnz loc_10045DF  +
mov eax [ecx+0Ch] +
retn   +
xor eax eax +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+198h] +
mov dword ptr [ebp-4] 0Dh +
call sub_101293C  +
lea ecx [esi+18Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_101293C  +
lea ecx [esi+180h] +
mov byte ptr [ebp-4] 0Bh +
call sub_101293C  +
lea ecx [esi+174h] +
mov byte ptr [ebp-4] 0Ah +
call sub_101293C  +
mov edi offset sub_101293C +
push edi  +
push 0Ch  +
push 0Ch  +
lea eax [esi+0E4h] +
push eax  +
mov byte ptr [ebp-4] 9 +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
push edi  +
push 0Ah  +
push 0Ch  +
lea eax [esi+6Ch] +
push eax  +
mov byte ptr [ebp-4] 8 +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 7 +
call sub_101293C  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 6 +
call sub_101293C  +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 5 +
call sub_101293C  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 4 +
call sub_101293C  +
lea ecx [esi+30h] +
mov byte ptr [ebp-4] 3 +
call sub_101293C  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 2 +
call sub_101293C  +
lea ecx [esi+18h] +
mov byte ptr [ebp-4] 1 +
call sub_101293C  +
lea ecx [esi+0Ch] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101293C  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1C4h] +
mov dword ptr [ebp-4] 1 +
call sub_101293C  +
lea ecx [esi+1B8h] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_10045E7  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_GS  +
mov edi [ebp+0Ch] +
mov eax [ebp+8] +
mov ebx ecx +
test edi edi +
jnz loc_1004774  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100476A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100476A  +
push offset loc_100138C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_10048CF  +
and dword ptr [edi] 0 +
lea esi [ebx+10h] +
and dword ptr [esi] 0 +
push esi  +
push eax  +
call sub_10043F7  +
mov [ebp-2C4h] eax +
test eax eax +
jge loc_10047BA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10048C9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10048C9  +
push dword ptr [ebp-2C4h]  +
push offset loc_100138C  +
push 0Dh  +
jmp loc_10048BE  +
mov ecx [esi] +
xor esi esi +
inc esi  +
cmp ecx esi +
jnz loc_100482E  +
lea ecx [ebp-498h] +
call sub_1008650  +
and dword ptr [ebp-4] 0 +
push edi  +
mov ecx ebx +
call sub_10045C2  +
push eax  +
lea ecx [ebp-498h] +
call sub_10089CF  +
mov [ebp-2C4h] eax +
test eax eax +
jge loc_100481A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100481A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100481A  +
push dword ptr [ebp-2C4h]  +
push offset loc_100138C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-498h] +
call sub_10046E3  +
jmp loc_10048C9  +
cmp ecx 2 +
jnz loc_100489A  +
lea ecx [ebp-2C0h] +
call sub_1006CE3  +
push edi  +
mov ecx ebx +
mov [ebp-4] esi +
call sub_10045D5  +
push eax  +
lea ecx [ebp-2C0h] +
call sub_1007567  +
mov [ebp-2C4h] eax +
test eax eax +
jge loc_1004889  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004889  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004889  +
push dword ptr [ebp-2C4h]  +
push offset loc_100138C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2C0h] +
call sub_10061DC  +
jmp loc_10048C9  +
mov dword ptr [ebp-2C4h] 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10048C9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10048C9  +
push ecx  +
push offset loc_100138C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov eax [ebp-2C4h] +
call sub_1012614  +
retn 8  +
***
call __EH_prolog3  +
lea ecx [ebp-24h] +
call sub_10043DC  +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
mov [ebp-4] esi +
mov [ebp-10h] esi +
call ds:HeapSetInformation  +
call ds:GetCommandLineW  +
mov edi eax +
cmp edi esi +
jnz loc_1004935  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004951  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004951  +
push offset loc_100138C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1004951  +
call sub_1013E22  +
push offset aWaitonstart  +
call sub_1013D85  +
lea eax [ebp-10h] +
push eax  +
push edi  +
lea ecx [ebp-24h] +
call sub_100472B  +
mov esi [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_101293C  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100499E  +
cmp word ptr [edx] 0 +
jnz loc_1004983  +
push 0Eh  +
jmp loc_10049A0  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1004989  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10049A1  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10049B2  +
cmp word ptr [edx] 0 +
jnz loc_10049B7  +
mov edx offset aNull +
jmp loc_10049B7  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1004A0B  +
cmp word ptr [edx] 0 +
jnz loc_10049F0  +
push 0Eh  +
jmp loc_1004A0D  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10049F6  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1004A0E  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1004A1F  +
cmp word ptr [edx] 0 +
jnz loc_1004A24  +
mov edx offset aNull +
jmp loc_1004A24  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1004A6B  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004A5F  +
sub eax edx +
inc eax  +
jmp loc_1004A6E  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1004A79  +
mov ecx offset aNull_1 +
push 0  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1004ABB  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004AAF  +
sub eax edx +
inc eax  +
jmp loc_1004ABE  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1004AC9  +
mov ecx offset aNull_1 +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push edi  +
mov edi ecx +
mov eax [edi+1B4h] +
test eax eax +
jnz loc_1004B28  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004B40  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004B40  +
push offset dword_10013B8  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop edi  +
retn   +
push esi  +
push dword ptr [eax+18h]  +
mov esi ds:SetEvent +
call esi  +
mov eax [edi+1B4h] +
push dword ptr [eax+20h]  +
call esi  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+1B4h] +
test eax eax +
jnz loc_1004B81  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004B7A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004B7A  +
push offset dword_10013B8  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1004BD9  +
mov edx [ebp+arg_0] +
mov [eax+9A84h] edx +
mov eax [ecx+1C0h] +
sub eax 0 +
jz loc_1004BD7  +
dec eax  +
jz loc_1004BCE  +
dec eax  +
jz loc_1004BC6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004BBF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004BBF  +
push offset dword_10013B8  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80004005h +
jmp loc_1004BD9  +
mov eax [ecx+1BCh] +
jmp loc_1004BD4  +
mov eax [ecx+1B8h] +
mov [eax+2Ch] edx +
xor eax eax +
pop ebp  +
retn 4  +
***
xor edx edx +
cmp [ecx+1B4h] edx +
jnz loc_1004C16  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004C10  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004C10  +
push offset dword_10013B8  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
retn   +
mov eax [ecx+1C0h] +
sub eax edx +
push esi  +
jz loc_1004CA7  +
dec eax  +
jz loc_1004C7B  +
dec eax  +
jz loc_1004C56  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004C4F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004C4F  +
push offset dword_10013B8  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80004005h +
pop esi  +
retn   +
lea eax [ecx+1BCh] +
cmp [eax] edx +
jnz loc_1004C85  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004CCF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004CCF  +
push offset dword_10013B8  +
push 28h  +
jmp loc_1004CC4  +
lea eax [ecx+1B8h] +
cmp [eax] edx +
jz loc_1004CAB  +
mov edx [eax] +
mov esi [ecx+1B4h] +
mov edx [edx+40h] +
mov [esi+9C94h] edx +
mov eax [eax] +
mov ecx [ecx+1B4h] +
mov eax [eax+44h] +
mov [ecx+9C98h] eax +
xor eax eax +
pop esi  +
retn   +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004CCF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004CCF  +
push offset dword_10013B8  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 0E0000000h +
pop esi  +
retn   +
***
cmp dword ptr [ecx+1B4h] 0 +
jnz loc_1004D0B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004D08  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004D08  +
push offset dword_10013B8  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
retn   +
mov ecx [ecx+1B4h] +
mov eax [ecx+9A84h] +
and eax [ecx+48h] +
retn   +
***
cmp dword ptr [ecx+1B4h] 0 +
jnz loc_1004D50  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004D4D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004D4D  +
push offset dword_10013B8  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
retn   +
mov ecx [ecx+1B4h] +
mov eax [ecx+9A84h] +
and eax [ecx+4Ch] +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004CDB  +
test eax eax +
jnz loc_1004D80  +
mov ecx esi +
call sub_1004D20  +
test eax eax +
jnz loc_1004D80  +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
mov eax [ebx+1B4h] +
mov [ebp+var_4] 80004005h +
test eax eax +
jnz loc_1004DD4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004DCA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004DCA  +
push offset dword_10013B8  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 0E0000000h +
jmp loc_1005049  +
cmp dword ptr [eax+1Ch] 0 +
jnz loc_1004DF5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1004DCA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004DCA  +
push offset dword_10013B8  +
push 30h  +
jmp loc_1004DBF  +
mov ecx [eax+20h] +
mov [ebp+Handles] ecx +
mov ecx [eax+1Ch] +
push esi  +
mov [ebp+var_C] ecx +
mov eax [eax+28h] +
push edi  +
mov [ebp+var_8] eax +
mov edi offset Reserved +
mov esi offset dword_10013B8 +
mov ecx Reserved +
cmp ecx edi +
jz loc_1004E31  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1004E31  +
push esi  +
push 31h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10043B6  +
push 1D4C0h  +
push 0  +
lea eax [ebp+Handles] +
push eax  +
push 3  +
push offset aNotificationHa  +
call sub_1016995  +
cmp eax 102h +
jz loc_1005025  +
cmp eax 0FFFFFFFFh +
jz loc_1005025  +
mov ecx eax +
sub ecx 0 +
jz loc_1004E92  +
dec ecx  +
jz loc_1004FC0  +
dec ecx  +
jz loc_1004F96  +
mov ecx Reserved +
cmp ecx edi +
jz loc_1004E31  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1004E19  +
push eax  +
push esi  +
push 3Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_1004E13  +
mov eax Reserved +
cmp eax edi +
jz loc_1004EAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004EAF  +
push esi  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax [ebx+1B4h] +
push 2710h  +
push dword ptr [eax+24h]  +
push offset aMutexWhileInNo  +
call sub_10167A4  +
cmp eax 102h +
jz loc_1004FE3  +
cmp eax 80h +
jz loc_1004FF7  +
mov ecx ebx +
call sub_1004BE2  +
mov eax Reserved +
cmp eax edi +
jz loc_1004F18  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004F18  +
mov ecx [ebx+1B4h] +
push dword ptr [ecx+9C98h]  +
push dword ptr [ecx+9C94h]  +
push esi  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100C7C8  +
mov eax Reserved +
mov ecx [ebx+1B4h] +
cmp dword ptr [ecx+9C94h] 0 +
jz loc_1004F54  +
cmp dword ptr [ecx+9C98h] 0 +
jz loc_1004F54  +
cmp eax edi +
jz loc_1004F54  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004F54  +
push dword ptr [ecx+9C98h]  +
push dword ptr [ecx+9C94h]  +
push esi  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100C7C8  +
mov eax [ebx+1B4h] +
push dword ptr [eax+24h]  +
call ds:ReleaseMutex  +
test eax eax +
jnz loc_1004E13  +
mov ecx Reserved +
cmp ecx edi +
jz loc_1004E31  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1004E19  +
push esi  +
push 38h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10043B6  +
jmp loc_1004E13  +
mov eax Reserved +
cmp eax edi +
jz loc_1005044  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005044  +
push esi  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1005044  +
mov eax Reserved +
cmp eax edi +
jz loc_1004FDD  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004FDD  +
push esi  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
and [ebp+var_4] 0 +
jmp loc_1005044  +
mov eax Reserved +
cmp eax edi +
jz loc_1005044  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005044  +
push esi  +
push 34h  +
jmp loc_1004FB0  +
mov eax Reserved +
cmp eax edi +
jz loc_1005014  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005014  +
push esi  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax [ebx+1B4h] +
push dword ptr [eax+24h]  +
call ds:ReleaseMutex  +
jmp loc_1005044  +
mov ecx Reserved +
cmp ecx edi +
jz loc_1005044  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1005044  +
push eax  +
push esi  +
push 32h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor ebx ebx +
mov [ebp+hObject] ebx +
lea edi [ebp-0Ch] +
stos   +
stos   +
push 40h  +
stos   +
lea eax [ebp+StartupInfo.lpReserved] +
push ebx  +
push eax  +
mov esi ecx +
call memset  +
mov eax [esi+1B4h] +
add esp 0Ch +
mov [ebp+StartupInfo.cb] 44h +
cmp eax ebx +
jnz loc_10050B9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10050AF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10050AF  +
push offset dword_10013B8  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 0E0000000h +
jmp loc_10051AC  +
push dword ptr [eax+28h]  +
call sub_101622E  +
test eax eax +
jnz loc_10050F3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10050E9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10050E9  +
push offset dword_10013B8  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80004005h +
jmp loc_10051AC  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
mov eax [esi+1B4h] +
push ebx  +
push ebx  +
push 4000000h  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpCommandLine]  +
mov edi 258h +
add eax edi +
push eax  +
call ds:__imp_CreateProcessW  +
test eax eax +
jnz loc_100516D  +
mov eax Reserved +
mov ebx ds:__imp_GetLastError +
cmp eax offset Reserved +
jz loc_100515B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100515B  +
call ebx  +
push eax  +
mov eax [esi+1B4h] +
add eax edi +
push eax  +
mov eax Reserved +
push offset dword_10013B8  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
call ebx  +
test eax eax +
jle loc_10051AC  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10051AC  +
push dword ptr [ebp-0Ch]  +
mov ebx ds:__imp_CloseHandle +
call ebx  +
push [ebp+hObject]  +
call ebx  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10051AA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10051AA  +
mov ecx [esi+1B4h] +
add ecx edi +
push ecx  +
push offset dword_10013B8  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2A4h] 0 +
jz loc_10051EC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005231  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005231  +
push offset dword_10013B8  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop esi  +
retn   +
cmp dword ptr [esi+1B4h] 0 +
jnz loc_1005210  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005231  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005231  +
push offset dword_10013B8  +
push 41h  +
jmp loc_10051DF  +
push edi  +
call sub_1004D20  +
xor edi edi +
inc edi  +
test eax eax +
jz loc_100522A  +
mov ecx esi +
mov [esi+1C4h] edi +
call sub_1004AF3  +
mov [esi+2A4h] edi +
pop edi  +
pop esi  +
retn   +
***
mov eax [ecx+1B4h] +
xor ecx ecx +
cmp eax ecx +
jnz loc_100526E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005268  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005268  +
push offset dword_10013B8  +
push 52h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 0E0000000h +
retn   +
cmp [eax+24h] ecx +
jz loc_1005285  +
cmp [eax+18h] ecx +
jz loc_1005285  +
cmp [eax+20h] ecx +
jz loc_1005285  +
cmp [eax+28h] ecx +
jz loc_1005285  +
xor eax eax +
retn   +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10052A9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10052A9  +
push offset dword_10013B8  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov eax [esi+1B4h] +
test eax eax +
jz loc_10053B6  +
push ebx  +
push edi  +
mov edi ds:WaitForSingleObject +
push 2710h  +
push dword ptr [eax+24h]  +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_1005321  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100530C  +
test byte ptr [eax+1Ch] 2 +
jz loc_100530C  +
push ebx  +
push offset dword_10013B8  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov ecx esi +
call sub_1004AF3  +
cmp ebx 80h +
jnz loc_10053B1  +
jmp loc_1005358  +
mov eax [esi+1B4h] +
xor ebx ebx +
inc ebx  +
push ebx  +
push dword ptr [eax+18h]  +
call edi  +
test eax eax +
jnz loc_1005369  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005358  +
test byte ptr [eax+1Ch] 2 +
jz loc_1005358  +
push offset dword_10013B8  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax [esi+1B4h] +
push dword ptr [eax+24h]  +
call ds:ReleaseMutex  +
jmp loc_10053B1  +
mov eax [esi+1B4h] +
push dword ptr [eax+20h]  +
call ds:SetEvent  +
test eax eax +
jnz loc_100539F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100539F  +
test [eax+1Ch] bl +
jz loc_100539F  +
push offset dword_10013B8  +
push 56h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax [esi+1B4h] +
push dword ptr [eax+24h]  +
call ds:ReleaseMutex  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea eax [esi+1D0h] +
push eax  +
mov eax [esi+1B4h] +
push 1  +
push dword ptr [eax+8]  +
call sub_1019240  +
test eax eax +
jl loc_10053F9  +
cmp [ebp+var_4] 0 +
jnz loc_10053F9  +
mov ecx esi +
call sub_10052B4  +
jmp loc_10053FB  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+1B4h] +
lea ecx [eax+8672h] +
mov [ebp+var_2C] ecx +
lea ecx [eax+8870h] +
mov [ebp+var_28] ecx +
lea ecx [eax+8A6Eh] +
mov [ebp+var_24] ecx +
lea ecx [eax+8C6Ch] +
mov [ebp+var_20] ecx +
lea ecx [eax+8E6Ah] +
mov [ebp+var_1C] ecx +
lea ecx [eax+9068h] +
mov [ebp+var_18] ecx +
lea ecx [eax+9266h] +
mov [ebp+var_14] ecx +
lea ecx [eax+9464h] +
mov [ebp+var_10] ecx +
lea ecx [eax+9662h] +
mov [ebp+var_C] ecx +
lea ecx [eax+9860h] +
push edi  +
add eax 21ACh +
mov [ebp+var_8] ecx +
push eax  +
mov ecx esi +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 3D1Ch +
push eax  +
lea ecx [esi+0Ch] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 564h +
push eax  +
lea ecx [esi+18h] +
call sub_10134D9  +
mov eax [esi+1B4h] +
add eax 59Ch +
push eax  +
lea ecx [esi+24h] +
call sub_10134D9  +
mov eax [esi+1B4h] +
add eax 9ACh +
push eax  +
lea ecx [esi+30h] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 11ACh +
push eax  +
lea ecx [esi+3Ch] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 19ACh +
push eax  +
lea ecx [esi+48h] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
lea ecx [eax+2494h] +
xor ebx ebx +
cmp [ecx] bx +
jz loc_100550B  +
push ecx  +
jmp loc_1005511  +
add eax 258h +
push eax  +
lea ecx [esi+0FCh] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 269Ch +
push eax  +
lea ecx [esi+108h] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 28A4h +
push eax  +
lea ecx [esi+114h] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 32CCh +
push eax  +
lea ecx [esi+120h] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 333Ch +
push eax  +
lea ecx [esi+138h] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 341Ch +
push eax  +
lea ecx [esi+12Ch] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
add eax 50h +
cmp [eax] bx +
jz loc_10055B2  +
cmp dword ptr [esi+1CCh] 1 +
jnz loc_10055B2  +
push eax  +
lea ecx [esi+198h] +
call sub_1012CBE  +
mov eax [esi+1B4h] +
lea ecx [esi+60h] +
cmp [eax+8470h] ebx +
jz loc_100569C  +
add eax 8474h +
push eax  +
mov dword ptr [esi+1CCh] 1 +
call sub_1012CBE  +
mov edi eax +
cmp edi ebx +
jge loc_100560E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100566B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100566B  +
mov ecx [esi+1B4h] +
push edi  +
add ecx 8474h +
push ecx  +
push offset dword_10013B8  +
push 57h  +
jmp loc_10056CE  +
mov [ebp+var_4] ebx +
lea ebx [esi+6Ch] +
mov eax [ebp+var_4] +
mov eax [ebp+eax*4+var_2C] +
test eax eax +
jz loc_100563F  +
cmp word ptr [eax] 0 +
jz loc_100563F  +
push eax  +
mov ecx ebx +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jl loc_1005672  +
inc [ebp+var_4]  +
add ebx 0Ch +
cmp [ebp+var_4] 0Ah +
jb loc_1005614  +
mov eax [esi+1B4h] +
mov ecx [eax+2Ch] +
mov [esi+1A4h] ecx +
mov ecx [eax+30h] +
mov [esi+1A8h] ecx +
mov ecx [eax+38h] +
mov [esi+1D4h] ecx +
mov eax [eax+40h] +
mov [esi+1B0h] eax +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100566B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100566B  +
push edi  +
push [ebp+var_4]  +
push offset dword_10013B8  +
push 58h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100C7C8  +
jmp loc_100566B  +
mov [esi+1CCh] ebx +
mov ebx offset aAppcrash +
push ebx  +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jge loc_100563F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100566B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100566B  +
push edi  +
push ebx  +
push offset dword_10013B8  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
jmp loc_100566B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_1005748  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1005748  +
and dword ptr [esi] 0 +
push eax  +
push esi  +
mov dword ptr [eax] 1 +
call sub_1008CB6  +
test eax eax +
jl loc_100574D  +
test byte ptr [edi+1D4h] 4 +
jnz loc_1005735  +
mov eax [edi+1B4h] +
mov ecx [eax+44h] +
test cl 4 +
jz loc_100572D  +
cmp dword ptr [eax+1Ch] 0 +
jz loc_100572D  +
or dword ptr [esi] 3 +
jmp loc_1005735  +
test cl 2 +
jz loc_1005735  +
or dword ptr [esi] 2 +
mov eax [edi+1B4h] +
test byte ptr [eax+44h] 10h +
jz loc_1005744  +
or dword ptr [esi] 8 +
xor eax eax +
jmp loc_100574D  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_23C] eax +
xor ebx ebx +
xor eax eax +
lea edi [ebp+var_234] +
push 224h  +
mov [ebp+var_238] ebx +
stos   +
lea eax [ebp+var_228] +
push ebx  +
push eax  +
mov esi ecx +
mov [ebp+var_22C] ebx +
call memset  +
mov eax [esi+1B4h] +
mov ecx [eax+14h] +
add esp 0Ch +
mov [ebp+var_238] ecx +
mov [ebp+var_234] 1 +
push dword ptr [eax+0Ch]  +
push ebx  +
push 1FFFFFh  +
call ds:OpenThread  +
mov [ebp+hObject] eax +
cmp eax ebx +
jnz loc_1005806  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005806  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005806  +
mov ecx [esi+1B4h] +
push dword ptr [ecx+0Ch]  +
push offset dword_10013B8  +
push 5Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov edi 228h +
push edi  +
lea eax [ebp+var_22C] +
push ebx  +
push eax  +
call memset  +
mov edx [esi+1B4h] +
add esp 0Ch +
cmp [edx+9A60h] ebx +
jz loc_10058A0  +
mov eax edx +
mov ecx edi +
mov [ebp+var_22C] ecx +
mov esi [eax+9A64h] +
mov [ebp+var_224] esi +
mov esi [eax+9A74h] +
mov [ebp+var_214] esi +
mov esi [eax+9A6Ch] +
mov [ebp+var_21C] esi +
mov esi [eax+9A68h] +
mov [ebp+var_220] esi +
mov esi [eax+9A80h] +
mov [ebp+var_208] esi +
mov esi [eax+9A78h] +
mov [ebp+var_210] esi +
mov esi [eax+9A70h] +
mov [ebp+var_218] esi +
mov eax [eax+9A7Ch] +
mov [ebp+var_20C] eax +
mov [ebp+var_228] 0FFFFFEFFh +
jmp loc_10058A6  +
mov ecx [ebp+var_22C] +
lea esi [edx+7A4h] +
cmp [esi] bx +
jz loc_10058DE  +
or [ebp+var_228] 100h +
mov [ebp+var_22C] edi +
mov ecx 80h +
lea edi [ebp+var_204] +
movs   +
mov ecx [ebp+var_22C] +
xor eax eax +
mov [ebp+var_6] ax +
mov [ebp+var_8] ax +
neg ecx  +
sbb ecx ecx +
push ebx  +
lea eax [ebp+var_22C] +
and ecx eax +
mov eax [ebp+var_238] +
push ecx  +
neg eax  +
sbb eax eax +
lea ecx [ebp+var_238] +
and eax ecx +
push eax  +
push 2  +
push [ebp+hObject]  +
push dword ptr [edx+28h]  +
push [ebp+var_23C]  +
call WerReportAddDump  +
mov esi eax +
cmp esi ebx +
jge loc_1005942  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005944  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005944  +
push esi  +
push offset dword_10013B8  +
push 5Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1005944  +
xor esi esi +
cmp [ebp+hObject] ebx +
jz loc_1005958  +
push [ebp+hObject]  +
call ds:__imp_CloseHandle  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_0] esi +
jz loc_10059D7  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_10059D7  +
cmp [ebp+arg_8] esi +
jz loc_10059D7  +
push ebx  +
jbe loc_10059A9  +
push dword ptr [edi+esi*8+4]  +
push dword ptr [edi+esi*8]  +
push esi  +
push [ebp+arg_0]  +
call WerReportSetParameter  +
mov ebx eax +
test ebx ebx +
jl loc_10059B0  +
inc esi  +
cmp esi [ebp+arg_8] +
jb loc_100598D  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
jmp loc_10059DC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10059AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10059AB  +
push ebx  +
push offset dword_10013B8  +
push 5Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10059AB  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov [ebp-2F8h] eax +
mov eax [ebp+0Ch] +
xor ebx ebx +
push 4Ch  +
mov [ebp-2FCh] eax +
lea eax [ebp-3D0h] +
mov esi ecx +
push ebx  +
push eax  +
mov [ebp-2F0h] esi +
mov [ebp-3D4h] ebx +
call memset  +
push 2C8h  +
lea eax [ebp-2D8h] +
push ebx  +
push eax  +
mov [ebp-2DCh] ebx +
call memset  +
push 58h  +
lea eax [ebp-42Ch] +
push ebx  +
push eax  +
mov [ebp-430h] ebx +
call memset  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp-320h] +
push 54h  +
mov [ebp-324h] ebx +
stos   +
lea eax [ebp-484h] +
push ebx  +
push eax  +
mov [ebp-488h] ebx +
call memset  +
push 54h  +
lea eax [ebp-4DCh] +
push ebx  +
push eax  +
mov [ebp-4E0h] ebx +
call memset  +
add esp 3Ch +
mov edi offset sub_101293C +
push edi  +
push offset sub_101292A  +
push 8  +
push 0Ch  +
lea eax [ebp-540h] +
push eax  +
mov [ebp-300h] ebx +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
push offset aDwshim  +
mov [ebp-4] ebx +
mov [ebp-2ECh] ebx +
mov [ebp-2E8h] ebx +
call sub_1013D85  +
lea eax [ebp-2E8h] +
push eax  +
call WerpCreateIntegratorReportId  +
mov dword ptr [ebp-344h] 1B59h +
mov dword ptr [ebp-340h] 1B5Ah +
mov dword ptr [ebp-33Ch] 1B5Bh +
mov dword ptr [ebp-338h] 1B5Ch +
mov dword ptr [ebp-334h] 1B5Dh +
mov dword ptr [ebp-330h] 1B5Eh +
mov dword ptr [ebp-32Ch] 1B5Fh +
mov dword ptr [ebp-328h] 1B60h +
cmp [ebp-2F8h] ebx +
jz loc_1006066  +
cmp [ebp-2FCh] ebx +
jz loc_1006066  +
mov eax [esi+1B4h] +
push dword ptr [eax+0Ch]  +
push ebx  +
push 1FFFFFh  +
call ds:OpenThread  +
mov [ebp-2F4h] eax +
cmp eax ebx +
jnz loc_1005B91  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005B91  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005B91  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_10013B8  +
push 5Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov eax [esi+1B4h] +
lea ecx [ebp-2DCh] +
push ecx  +
lea ecx [ebp-3D4h] +
push ecx  +
push dword ptr [eax+14h]  +
push dword ptr [eax+28h]  +
call sub_1013C78  +
cmp eax ebx +
jge loc_1005BED  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1005BDB  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1005BDB  +
push eax  +
push offset dword_10013B8  +
push 5Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
push 50h  +
lea eax [ebp-3D4h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov eax [ebp-3C8h] +
cmp eax ebx +
jnz loc_1005C00  +
mov eax [esi+1B4h] +
mov eax [eax+10h] +
push eax  +
push dword ptr [ebp-3D4h]  +
mov eax [esi+1B4h] +
push dword ptr [ebp-2F4h]  +
lea edi [esi+1D8h] +
push ebx  +
push dword ptr [eax+28h]  +
mov ecx edi +
call sub_1017B6C  +
cmp eax ebx +
mov [ebp-2E0h] eax +
jge loc_1005C65  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006002  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006002  +
push dword ptr [ebp-2E0h]  +
push offset dword_10013B8  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1006002  +
push dword ptr [ebp-2E8h]  +
mov ecx edi +
call sub_1018327  +
lea eax [ebp-540h] +
mov [ebp-2E0h] ebx +
mov [ebp-2E4h] eax +
mov eax [ebp-2E0h] +
mov ecx [ebp-2E4h] +
push 1000000h  +
push dword ptr [ebp+eax*4-344h]  +
call sub_101321D  +
mov ecx [ebp-2E4h] +
call sub_1012949  +
mov ecx [ebp-2E0h] +
inc dword ptr [ebp-2E0h]  +
add dword ptr [ebp-2E4h] 0Ch +
cmp dword ptr [ebp-2E0h] 8 +
mov [ebp+ecx*8-384h] eax +
jb loc_1005C84  +
mov ecx edi +
call sub_10170B2  +
mov ecx edi +
mov [ebp-380h] eax +
call sub_10170CC  +
mov ecx edi +
mov [ebp-378h] eax +
call sub_10170E9  +
mov ecx edi +
mov [ebp-370h] eax +
call sub_10170BF  +
mov ecx edi +
mov [ebp-368h] eax +
call sub_10170D9  +
mov ecx edi +
mov [ebp-360h] eax +
call sub_10170F6  +
mov ecx edi +
mov [ebp-358h] eax +
call sub_1017116  +
mov ecx edi +
mov [ebp-350h] eax +
call sub_1017106  +
mov [ebp-348h] eax +
lea eax [ebp-384h] +
mov [ebp-304h] eax +
mov dword ptr [ebp-2E4h] 8 +
xor eax eax +
mov ecx [ebp+eax-384h] +
mov edx [ebp+eax-380h] +
mov [ebp+eax-42Ch] ecx +
mov [ebp+eax-428h] edx +
mov [ebp+eax-484h] ecx +
mov [ebp+eax-480h] edx +
add eax 8 +
cmp eax 40h +
jb loc_1005D4F  +
lea ecx [esi+60h] +
mov esi offset aAppcrash +
push esi  +
call sub_1012CBE  +
cmp eax ebx +
mov [ebp-2E0h] eax +
jge loc_1005DBF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006002  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006002  +
push offset dword_10013B8  +
push 61h  +
jmp loc_1005FF7  +
mov eax [ebp-2F0h] +
add eax 2A8h +
push eax  +
push esi  +
call sub_1009BCE  +
test eax eax +
jl loc_1005EEE  +
mov ecx edi +
call sub_1017098  +
mov ecx edi +
mov [ebp-324h] eax +
call sub_10170A5  +
mov edi [ebp-2F4h] +
push edi  +
mov [ebp-320h] eax +
call ds:__imp_GetThreadId  +
mov [ebp-31Ch] eax +
lea eax [ebp-3D4h] +
mov [ebp-318h] eax +
lea eax [ebp-2DCh] +
mov [ebp-314h] eax +
mov eax [ebp-2F0h] +
mov ecx [eax+1B4h] +
mov ecx [ecx+28h] +
mov [ebp-310h] ecx +
push 1000000h  +
lea ecx [ebp-324h] +
mov [ebp-3D8h] ecx +
push ebx  +
lea ecx [ebp-430h] +
mov [ebp-30Ch] edi +
push ecx  +
lea edi [eax+2A8h] +
push dword ptr [edi]  +
mov [ebp-430h] esi +
mov dword ptr [ebp-3DCh] 8 +
call sub_1009890  +
cmp eax ebx +
jl loc_1005EC1  +
lea eax [ebp-300h] +
push eax  +
lea eax [ebp-4E0h] +
push eax  +
lea eax [ebp-488h] +
push eax  +
push dword ptr [edi]  +
mov [ebp-488h] esi +
mov dword ptr [ebp-434h] 8 +
call sub_100994D  +
cmp eax ebx +
jge loc_1005EEE  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1005EE8  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1005EE8  +
push eax  +
push offset dword_10013B8  +
push 62h  +
jmp loc_1005EDD  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1005EE8  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1005EE8  +
push eax  +
push offset dword_10013B8  +
push 63h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
push edi  +
call sub_1009B10  +
mov esi [ebp-2F0h] +
cmp [ebp-300h] ebx +
jz loc_1005F4E  +
push dword ptr [ebp-4E0h]  +
lea ecx [esi+60h] +
call sub_1012CBE  +
cmp eax ebx +
mov [ebp-2E0h] eax +
jge loc_1005F3A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006002  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006002  +
push offset dword_10013B8  +
push 64h  +
jmp loc_1005FF7  +
mov eax [ebp-48Ch] +
lea edi [ebp-4DCh] +
mov [ebp-2E4h] eax +
jmp loc_1005F54  +
mov edi [ebp-304h] +
lea eax [ebp-2ECh] +
push eax  +
push dword ptr [ebp-2F8h]  +
lea ecx [esi+60h] +
push 2  +
call sub_1012949  +
push eax  +
call WerReportCreate  +
cmp eax ebx +
mov [ebp-2E0h] eax +
jl loc_1005FDE  +
cmp [ebp-2ECh] ebx +
jz loc_1005FDE  +
push dword ptr [ebp-2E8h]  +
push dword ptr [ebp-2ECh]  +
call WerpSetIntegratorReportId  +
push dword ptr [ebp-2E4h]  +
mov ecx esi +
push edi  +
push dword ptr [ebp-2ECh]  +
call sub_1005970  +
cmp eax ebx +
mov [ebp-2E0h] eax +
jge loc_1005FD6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006002  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006002  +
push dword ptr [ebp-2E0h]  +
push offset dword_10013B8  +
push 66h  +
jmp loc_1005C55  +
mov [ebp-2E0h] ebx +
jmp loc_1006002  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006002  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006002  +
push offset dword_10013B8  +
push 65h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
cmp [ebp-2F4h] ebx +
jz loc_1006016  +
push dword ptr [ebp-2F4h]  +
call ds:__imp_CloseHandle  +
cmp [ebp-2E0h] ebx +
jl loc_100602C  +
mov eax [ebp-2FCh] +
mov ecx [ebp-2ECh] +
mov [eax] ecx +
cmp [ebp-2E8h] ebx +
jz loc_1006045  +
push dword ptr [ebp-2E8h]  +
call WerpFreeString  +
mov [ebp-2E8h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
push offset sub_101293C  +
push 8  +
push 0Ch  +
lea eax [ebp-540h] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
mov eax [ebp-2E0h] +
jmp loc_10060A4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100608A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100608A  +
push offset dword_10013B8  +
push 5Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 8  +
push 0Ch  +
lea eax [ebp-540h] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
mov eax 80070057h +
call sub_1012614  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jnz loc_10060EC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10060E5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10060E5  +
push offset dword_10013B8  +
push 67h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1006122  +
push edi  +
push 1  +
lea eax [esi+2ACh] +
push eax  +
call ds:InterlockedCompareExchange  +
test eax eax +
jnz loc_1006120  +
add esi 1D8h +
mov ecx esi +
call sub_10170A5  +
push eax  +
mov ecx esi +
call sub_1017098  +
push eax  +
push [ebp+arg_0]  +
call WerpAddAppCompatData  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+0B4h] +
mov dword ptr [ebp-4] 9 +
call sub_101293C  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 8 +
call sub_101293C  +
lea ecx [esi+90h] +
mov byte ptr [ebp-4] 7 +
call sub_101293C  +
lea ecx [esi+84h] +
mov byte ptr [ebp-4] 6 +
call sub_101293C  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 5 +
call sub_101293C  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 4 +
call sub_101293C  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 3 +
call sub_101293C  +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 2 +
call sub_101293C  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 1 +
call sub_101293C  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+8] +
call sub_101293C  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
inc edi  +
lea eax [esi+1D0h] +
xor ebx ebx +
mov [ebp-4] edi +
cmp [eax] ebx +
jz loc_1006210  +
push ebx  +
push eax  +
mov eax [esi+1B4h] +
push ebx  +
push dword ptr [eax+8]  +
call sub_1019240  +
mov eax [esi+1C0h] +
cmp eax edi +
jnz loc_1006244  +
lea edi [esi+1B8h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100622F  +
push eax  +
call ds:UnmapViewOfFile  +
mov [edi] ebx +
lea edi [esi+1B4h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100626A  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1006268  +
cmp eax 2 +
jnz loc_1006251  +
lea edi [esi+1BCh] +
jmp loc_1006220  +
cmp eax ebx +
jnz loc_100626A  +
lea edi [esi+1B4h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100626A  +
push eax  +
call ds:UnmapViewOfFile  +
mov [edi] ebx +
lea eax [esi+2A8h] +
cmp [eax] ebx +
jz loc_100627A  +
push eax  +
call sub_1009B10  +
lea ecx [esi+1D8h] +
mov [ebp-4] bl +
call sub_100612D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_10045E7  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_10062B6  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_10062BD  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax Reserved +
mov esi offset Reserved +
mov ebx offset dword_10013B8 +
cmp eax esi +
jz loc_10062FD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10062FD  +
push ebx  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax Reserved +
cmp dword ptr [edi+1B4h] 0 +
jnz loc_1006325  +
cmp eax esi +
jz loc_100631E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100631E  +
push ebx  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 0E0000000h +
jmp loc_10063A4  +
test dword ptr [edi+1A4h] 1000h +
jz loc_1006335  +
xor eax eax +
jmp loc_10063A4  +
mov eax [edi+1B4h] +
push dword ptr [eax+9A84h]  +
push dword ptr [eax+28h]  +
call ds:TerminateProcess  +
test eax eax +
jnz loc_1006383  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_1006383  +
mov eax Reserved +
cmp eax esi +
jz loc_10063A1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10063A1  +
push [ebp+var_4]  +
push ebx  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10063A1  +
cmp [ebp+arg_0] 0 +
jz loc_100639D  +
mov eax [edi+1B4h] +
push 0FA0h  +
push dword ptr [eax+28h]  +
call ds:WaitForSingleObject  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10063C6  +
cmp ecx 7FFFFFFFh +
jbe loc_10063CB  +
mov eax 80070057h +
test eax eax +
jl loc_100640F  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1006402  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10063FD  +
mov cl [edx+eax] +
test cl cl +
jz loc_10063FD  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_10063E9  +
pop edi  +
test esi esi +
jnz loc_1006408  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100642E  +
cmp ecx 7FFFFFFFh +
jbe loc_1006433  +
mov eax 80070057h +
test eax eax +
jl loc_100647E  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100646E  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1006469  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1006469  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1006451  +
pop edi  +
test esi esi +
jnz loc_1006475  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1B4h] 0 +
jnz loc_10064C3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006554  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006554  +
push offset dword_10013B8  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop esi  +
retn   +
cmp dword ptr [esi+2A0h] 0 +
jz loc_10064E7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006554  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006554  +
push offset dword_10013B8  +
push 43h  +
jmp loc_10064B6  +
push edi  +
call sub_10052B4  +
xor edi edi +
inc edi  +
test eax eax +
jnz loc_1006505  +
mov ecx esi +
mov [esi+1C4h] edi +
call sub_1004D65  +
test eax eax +
jnz loc_100654D  +
mov ecx esi +
call sub_1004D65  +
test eax eax +
jnz loc_1006518  +
mov [esi+1C4h] edi +
jmp loc_100654D  +
mov ecx esi +
call sub_1004D20  +
test eax eax +
jz loc_100652E  +
mov ecx esi +
call sub_1004CDB  +
test eax eax +
jz loc_100654D  +
mov ecx esi +
mov [esi+1C4h] edi +
call sub_1004AF3  +
mov ecx esi +
call sub_1004CDB  +
test eax eax +
jz loc_100654D  +
mov ecx esi +
call sub_1004D8A  +
mov [esi+2A0h] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi 9C9Ch +
push esi  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_10065A6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006850  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006850  +
push offset dword_10013B8  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1006850  +
push edi  +
push esi  +
push 0  +
push ebx  +
call memset  +
mov [ebx] esi +
mov esi [ebp+arg_0] +
mov dword ptr [ebx+4] 20000h +
mov eax [esi+4] +
mov [ebx+8] eax +
mov eax [esi+8] +
mov [ebx+0Ch] eax +
mov eax [esi+0Ch] +
mov [ebx+10h] eax +
mov eax [esi+10h] +
mov [ebx+14h] eax +
mov eax [esi+14h] +
mov [ebx+18h] eax +
mov eax [esi+18h] +
mov [ebx+1Ch] eax +
mov eax [esi+1Ch] +
mov [ebx+20h] eax +
mov eax [esi+20h] +
mov [ebx+24h] eax +
mov eax [esi+24h] +
add esp 0Ch +
mov [ebx+28h] eax +
lea eax [ebx+38h] +
push eax  +
lea eax [ebx+30h] +
push eax  +
lea edi [ebx+2Ch] +
push edi  +
push dword ptr [esi+28h]  +
call sub_1009645  +
mov eax [esi+1144h] +
mov [ebx+40h] eax +
mov eax [esi+34h] +
mov [ebx+44h] eax +
mov eax [esi+38h] +
mov [ebx+48h] eax +
mov eax [esi+3Ch] +
and dword ptr [ebx+8470h] 0 +
test byte ptr [edi] 1 +
mov [ebx+4Ch] eax +
mov eax [esi+40h] +
mov [ebx+9C94h] eax +
mov eax [esi+44h] +
mov [ebx+9C98h] eax +
jz loc_10066DD  +
lea edi [esi+1418h] +
push edi  +
push 400h  +
lea eax [ebx+9ACh] +
push eax  +
call sub_1006418  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1006686  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1006686  +
push eax  +
push edi  +
push offset dword_10013B8  +
push 45h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10049DA  +
lea eax [esi+1C18h] +
push eax  +
mov [ebp+var_4] eax +
push 38h  +
lea eax [ebx+564h] +
push eax  +
call sub_10063B0  +
mov edi eax +
test edi edi +
jge loc_1006728  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006842  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006842  +
push edi  +
push [ebp+var_4]  +
push offset dword_10013B8  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004A9D  +
jmp loc_1006842  +
lea eax [esi+1418h] +
push eax  +
mov [ebp+var_4] eax +
push 400h  +
lea eax [ebx+11ACh] +
push eax  +
call sub_1006418  +
mov edi eax +
test edi edi +
jge loc_1006686  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006842  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006842  +
push edi  +
push [ebp+var_4]  +
push offset dword_10013B8  +
push 46h  +
jmp loc_1006809  +
add esi 1210h +
lea edi [ebx+7A4h] +
mov ecx 82h +
movs   +
mov esi [ebp+arg_0] +
lea eax [esi+0B8h] +
push eax  +
mov [ebp+arg_0] eax +
push 104h  +
lea eax [ebx+258h] +
push eax  +
call sub_1006418  +
mov edi eax +
test edi edi +
jge loc_1006789  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006842  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006842  +
push edi  +
push [ebp+arg_0]  +
push offset dword_10013B8  +
push 48h  +
jmp loc_1006809  +
lea eax [esi+48h] +
push eax  +
mov [ebp+arg_0] eax +
push 38h  +
lea eax [ebx+21ACh] +
push eax  +
call sub_1006418  +
mov edi eax +
test edi edi +
jge loc_10067CB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006842  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006842  +
push edi  +
push [ebp+arg_0]  +
push offset dword_10013B8  +
push 49h  +
jmp loc_1006809  +
lea eax [esi+2C0h] +
push eax  +
mov [ebp+arg_0] eax +
push 104h  +
lea eax [ebx+3D1Ch] +
push eax  +
call sub_1006418  +
mov edi eax +
test edi edi +
jge loc_1006816  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006842  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006842  +
push edi  +
push [ebp+arg_0]  +
push offset dword_10013B8  +
push 4Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
jmp loc_1006842  +
lea eax [esi+0D58h] +
push eax  +
push 38h  +
lea eax [ebx+32CCh] +
push eax  +
call sub_1006418  +
add esi 0DC8h +
push esi  +
push 38h  +
lea eax [ebx+333Ch] +
push eax  +
call sub_1006418  +
xor edi edi +
test edi edi +
pop edi  +
jge loc_1006850  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor ebx ebx +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi 9C9Ch +
push esi  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_10068A8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006B42  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006B42  +
push offset dword_10013B8  +
push 4Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1006B42  +
push edi  +
push esi  +
push 0  +
push ebx  +
call memset  +
mov [ebx] esi +
mov esi [ebp+arg_0] +
mov dword ptr [ebx+4] 20000h +
mov eax [esi+4] +
mov [ebx+8] eax +
mov eax [esi+8] +
mov [ebx+0Ch] eax +
mov eax [esi+0Ch] +
mov [ebx+10h] eax +
mov eax [esi+10h] +
mov [ebx+14h] eax +
mov eax [esi+14h] +
mov [ebx+18h] eax +
mov eax [esi+18h] +
mov [ebx+1Ch] eax +
mov eax [esi+1Ch] +
mov [ebx+20h] eax +
mov eax [esi+20h] +
mov [ebx+24h] eax +
mov eax [esi+24h] +
add esp 0Ch +
mov [ebx+28h] eax +
lea eax [ebx+38h] +
push eax  +
lea eax [ebx+30h] +
push eax  +
lea edi [ebx+2Ch] +
push edi  +
push dword ptr [esi+28h]  +
call sub_1009645  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov [ebx+40h] eax +
mov eax [esi+34h] +
mov [ebx+44h] eax +
mov eax [esi+38h] +
mov [ebx+48h] eax +
mov eax [esi+3Ch] +
and dword ptr [ebx+8470h] 0 +
test byte ptr [edi] 1 +
mov [ebx+4Ch] eax +
mov eax [esi+40h] +
lea edi [esi+9A0h] +
mov [ebx+9C94h] eax +
mov eax [esi+44h] +
push edi  +
mov [ebx+9C98h] eax +
push 400h  +
jz loc_10069DC  +
lea eax [ebx+9ACh] +
push eax  +
call sub_1006418  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100698B  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100698B  +
push eax  +
push edi  +
push offset dword_10013B8  +
push 4Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10049DA  +
lea edi [esi+11A0h] +
push edi  +
push 38h  +
lea eax [ebx+564h] +
push eax  +
call sub_10063B0  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_1006A19  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006B32  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006B32  +
push [ebp+var_4]  +
push edi  +
push offset dword_10013B8  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004A9D  +
jmp loc_1006B32  +
lea eax [ebx+11ACh] +
push eax  +
call sub_1006418  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_100698B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006B32  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006B32  +
push [ebp+var_4]  +
push edi  +
push offset dword_10013B8  +
push 4Dh  +
jmp loc_1006B21  +
push 104h  +
add esi 798h +
lea edi [ebx+7A4h] +
mov ecx 82h +
movs   +
mov esi [ebp+arg_0] +
mov edi ds:MultiByteToWideChar +
lea ecx [ebx+258h] +
push ecx  +
push 0FFFFFFFFh  +
lea eax [esi+0B8h] +
push eax  +
push 0  +
push 0  +
mov [ebp+arg_0] eax +
call edi  +
test eax eax +
jnz loc_1006A9A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006A7E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006A7E  +
push [ebp+arg_0]  +
push offset dword_10013B8  +
push 4Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004A4D  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1006A92  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_1006B32  +
push 38h  +
lea ecx [ebx+21ACh] +
push ecx  +
push 0FFFFFFFFh  +
lea eax [esi+48h] +
push eax  +
push 0  +
push 0  +
mov byte ptr [esi+7Fh] 0 +
mov [ebp+arg_0] eax +
call edi  +
test eax eax +
jnz loc_1006AE3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006B32  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006B32  +
push [ebp+arg_0]  +
push offset dword_10013B8  +
push 50h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004A4D  +
jmp loc_1006B32  +
add esi 1BCh +
push esi  +
push 104h  +
lea eax [ebx+3D1Ch] +
push eax  +
call sub_1006418  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_1006B2E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006B32  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006B32  +
movzx ecx word ptr [ebp+var_4] +
push ecx  +
push esi  +
push offset dword_10013B8  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
jmp loc_1006B32  +
and [ebp+var_4] 0 +
cmp [ebp+var_4] 0 +
pop edi  +
jge loc_1006B42  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor ebx ebx +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
xor edi edi +
xor edx edx +
inc edi  +
sub eax edx +
mov [ebp+var_4] edx +
mov [ebp+var_8] edi +
jz loc_1006BB8  +
sub eax 4 +
jz loc_1006C7E  +
dec eax  +
jz loc_1006C07  +
dec eax  +
jz loc_1006BB3  +
sub eax 3 +
jnz loc_1006BC9  +
cmp dword ptr [ecx+0Ch] 3 +
jnz loc_1006BC9  +
mov ecx esi +
call sub_10051B8  +
mov ecx [esi+1B4h] +
xor eax eax +
cmp [ecx+28h] eax +
jz loc_1006BC9  +
cmp [esi+1CCh] eax +
jnz loc_1006BC9  +
push eax  +
mov ecx esi +
call sub_10062C6  +
jmp loc_1006BC9  +
cmp [ecx+0Ch] edx +
jnz loc_1006BC9  +
cmp [esi+1CCh] edx +
jnz loc_1006BC9  +
push dword ptr [ecx]  +
mov ecx esi +
call sub_10060B1  +
cmp dword ptr [esi+2A8h] 0 +
jz loc_1006BFE  +
cmp [ebp+var_8] 0 +
jz loc_1006BFE  +
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
not eax  +
lea ecx [ebp+var_4] +
and eax ecx +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+60h] +
call sub_1012949  +
push eax  +
push dword ptr [esi+2A8h]  +
call sub_1009A46  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006C2B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006C2B  +
push offset dword_10013B8  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax [esi+1B4h] +
and [ebp+var_8] 0 +
test byte ptr [eax+9A84h] 4 +
jnz loc_1006C47  +
push 2  +
mov ecx esi +
call sub_1004B47  +
mov ecx esi +
call sub_1006487  +
mov ecx esi +
call sub_10051B8  +
push edi  +
mov ecx esi +
call sub_10062C6  +
mov eax [esi+1B4h] +
mov eax [eax+38h] +
and al 2 +
movzx eax al +
neg eax  +
sbb eax eax +
and eax offset aWatson1 +
push eax  +
mov ecx esi +
call sub_1005051  +
jmp loc_1006CBD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006CA2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006CA2  +
push offset dword_10013B8  +
push 68h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
and [ebp+var_8] 0 +
push 4  +
mov ecx esi +
call sub_1004B47  +
mov ecx esi +
call sub_1006487  +
mov ecx esi +
call sub_10051B8  +
mov [ebp+var_4] edi +
jmp loc_1006BC9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1006B4F  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100904C  +
xor edi edi +
lea ecx [esi+1D8h] +
mov [ebp-4] edi +
call sub_1016ADC  +
push 3  +
pop eax  +
mov [esi+1C0h] eax +
mov [esi+1CCh] eax +
mov [esi+1D0h] edi +
mov [esi+1B4h] edi +
mov [esi+1B8h] edi +
mov [esi+1BCh] edi +
mov [esi+1C4h] edi +
mov [esi+1C8h] edi +
mov [esi+2A4h] edi +
mov [esi+2A0h] edi +
mov [esi+2A8h] edi +
mov [esi+2ACh] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+hObject] edi +
jnz loc_1006D9F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006D95  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006D95  +
push offset dword_10013B8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1006ED9  +
push edi  +
push edi  +
push edi  +
push 6  +
push [ebp+hObject]  +
call ds:MapViewOfFile  +
cmp eax edi +
jnz loc_1006DDF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006DD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006DD5  +
push offset dword_10013B8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_1006ECE  +
mov ecx [eax] +
push ebx  +
xor ebx ebx +
inc ebx  +
cmp ecx 11D8h +
jz loc_1006E1F  +
cmp ecx 1C50h +
jz loc_1006E05  +
cmp ecx 9C9Ch +
jnz loc_1006E39  +
mov [esi+1C0h] edi +
jmp loc_1006E33  +
push eax  +
mov ecx esi +
mov [esi+1BCh] eax +
call sub_100655B  +
mov dword ptr [esi+1C0h] 2 +
jmp loc_1006E33  +
push eax  +
mov ecx esi +
mov [esi+1B8h] eax +
call sub_100685D  +
mov [esi+1C0h] ebx +
mov [esi+1B4h] eax +
mov eax [esi+1B4h] +
cmp eax edi +
jnz loc_1006E6D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006E66  +
test [eax+1Ch] bl +
jz loc_1006E66  +
push offset dword_10013B8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_1006ECD  +
test byte ptr [eax+38h] 10h +
jnz loc_1006E91  +
push edi  +
call sub_10169FC  +
test eax eax +
jz loc_1006E91  +
mov eax [esi+1B4h] +
or dword ptr [eax+44h] 10h +
mov eax [esi+1B4h] +
or dword ptr [eax+4Ch] 10h +
push ebx  +
mov ecx esi +
call sub_1004B47  +
mov ecx esi +
call sub_1005238  +
mov esi eax +
cmp esi edi +
jge loc_1006ECB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006ECD  +
test [eax+1Ch] bl +
jz loc_1006ECD  +
push offset dword_10013B8  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1006ECD  +
xor esi esi +
pop ebx  +
push [ebp+hObject]  +
call ds:__imp_CloseHandle  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_GS  +
mov esi ecx +
lea ecx [ebp-2F0h] +
call sub_101292A  +
xor edi edi +
mov [ebp-4] edi +
mov [ebp-2E0h] edi +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006F2F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006F2F  +
push offset dword_10013B8  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
cmp dword ptr [ebp+8] 3 +
jnz loc_1006FEC  +
mov eax [esi+1B4h] +
push dword ptr [eax+0Ch]  +
push edi  +
push 40h  +
call ds:OpenThread  +
mov [ebp-2E0h] eax +
lea eax [ebp-2F0h] +
push eax  +
call sub_10169FC  +
test eax eax +
jz loc_1006FDA  +
lea ecx [ebp-2F0h] +
call sub_1012B64  +
test eax eax +
jz loc_1006FDA  +
mov eax [esi+1B4h] +
xor ebx ebx +
mov [ebp-2E4h] edi +
cmp [eax+14h] edi +
jz loc_1006FB2  +
lea ecx [ebp-2DCh] +
push ecx  +
lea ecx [ebp-340h] +
push ecx  +
push dword ptr [eax+14h]  +
push dword ptr [eax+28h]  +
call sub_1013C78  +
cmp eax edi +
jl loc_1006FB2  +
lea eax [ebp-2DCh] +
lea ebx [ebp-340h] +
mov [ebp-2E4h] eax +
push edi  +
lea ecx [ebp-2F0h] +
call sub_1012949  +
push eax  +
push dword ptr [ebp-2E4h]  +
mov eax [esi+1B4h] +
push ebx  +
push dword ptr [ebp-2E0h]  +
push dword ptr [eax+28h]  +
call sub_1018DB6  +
push 10h  +
mov ecx esi +
call sub_1004B47  +
mov ecx esi +
call sub_1004AF3  +
jmp loc_100700D  +
mov ecx esi +
call sub_1004D65  +
mov ecx esi +
test eax eax +
jnz loc_1007001  +
push edi  +
call sub_10062C6  +
jmp loc_1007021  +
call sub_1006487  +
mov ecx esi +
call sub_10051B8  +
cmp [ebp-2E0h] edi +
jz loc_1007021  +
push dword ptr [ebp-2E0h]  +
call ds:__imp_CloseHandle  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2F0h] +
call sub_101293C  +
call sub_1012614  +
retn 4  +
***
call __EH_prolog3_GS  +
mov esi [ebp+8] +
xor ebx ebx +
push 890h  +
lea eax [ebp-8A0h] +
mov edi ecx +
push ebx  +
push eax  +
mov [ebp-8ACh] edi +
mov [ebp-8B4h] esi +
mov [ebp-8B0h] ebx +
mov dword ptr [ebp-8BCh] 1 +
mov [ebp-8A4h] ebx +
call memset  +
add esp 0Ch +
lea ecx [ebp-8CCh] +
call sub_101292A  +
mov [ebp-4] ebx +
mov [ebp-8A8h] ebx +
mov [ebp-8C0h] ebx +
mov [ebp-8B8h] ebx +
cmp esi ebx +
jnz loc_10070F0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10070D2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10070D2  +
push offset dword_10013B8  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 80070057h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-8CCh] +
call sub_101293C  +
mov eax ebx +
call sub_1012614  +
retn 4  +
cmp [edi+1B4h] ebx +
jnz loc_1007123  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100711C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100711C  +
push offset dword_10013B8  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 0E0000000h +
jmp loc_10070D7  +
mov ecx edi +
mov dword ptr [esi] 4 +
call sub_1005403  +
mov ebx eax +
test ebx ebx +
jge loc_1007168  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10074AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10074AB  +
push ebx  +
push offset dword_10013B8  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10074AB  +
call sub_1013F25  +
mov [ebp-8C0h] eax +
test eax eax +
jz loc_1007186  +
mov eax [edi+1B4h] +
push dword ptr [eax+28h]  +
call ds:NtSuspendProcess  +
lea eax [ebp-8BCh] +
push eax  +
lea eax [ebp-8B0h] +
push eax  +
mov ecx edi +
call sub_10056E0  +
lea ecx [edi+198h] +
call sub_1012B64  +
test eax eax +
jz loc_10071B1  +
mov ecx edi +
call sub_100915C  +
or dword ptr [ebp-8B0h] 10h +
push 1B62h  +
lea ecx [ebp-8CCh] +
call sub_101372D  +
mov edi offset dword_10013B8 +
mov esi offset Reserved +
test eax eax +
jge loc_10071F5  +
mov ecx Reserved +
cmp ecx esi +
jz loc_10071F5  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10071F5  +
push eax  +
push edi  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
mov ebx [ebp-8ACh] +
mov eax [ebx+1B4h] +
mov dword ptr [ebp-8A4h] 894h +
mov eax [eax+28h] +
mov ecx ebx +
mov [ebp-8A0h] eax +
call sub_1012B64  +
test eax eax +
jz loc_1007238  +
mov ecx ebx +
call sub_1012949  +
push eax  +
push 80h  +
lea eax [ebp-71Ch] +
push eax  +
call sub_1006418  +
lea ecx [ebx+180h] +
call sub_1012B64  +
test eax eax +
jz loc_1007264  +
lea ecx [ebx+180h] +
call sub_1012949  +
push eax  +
push 104h  +
lea eax [ebp-61Ch] +
push eax  +
call sub_1006418  +
lea ecx [ebp-8CCh] +
call sub_1012B64  +
test eax eax +
jz loc_1007290  +
lea ecx [ebp-8CCh] +
call sub_1012949  +
push eax  +
push 80h  +
lea eax [ebp-81Ch] +
push eax  +
call sub_1006418  +
mov ecx [ebx+1CCh] +
cmp ecx 1 +
jnz loc_1007315  +
lea eax [ebp-8A8h] +
push eax  +
lea eax [ebp-8A4h] +
push eax  +
push ecx  +
lea ecx [ebx+60h] +
call sub_1012949  +
push eax  +
call WerReportCreate  +
mov ebx eax +
test ebx ebx +
jge loc_10072DE  +
mov eax Reserved +
cmp eax esi +
jz loc_10074AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10074AB  +
push ebx  +
push edi  +
push 1Bh  +
jmp loc_1007158  +
push dword ptr [ebp-8A8h]  +
mov ecx [ebp-8ACh] +
call sub_1008DE5  +
mov ebx eax +
test ebx ebx +
jge loc_1007358  +
mov eax Reserved +
cmp eax esi +
jz loc_10074AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10074AB  +
push ebx  +
push edi  +
push 1Ch  +
jmp loc_1007158  +
test ecx ecx +
jnz loc_1007488  +
lea eax [ebp-8A8h] +
push eax  +
lea eax [ebp-8A4h] +
push eax  +
mov ecx ebx +
call sub_10059E7  +
mov ebx eax +
test ebx ebx +
jge loc_1007358  +
mov eax Reserved +
cmp eax esi +
jz loc_10074AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10074AB  +
push ebx  +
push edi  +
push 1Dh  +
jmp loc_1007158  +
lea eax [ebp-8B8h] +
push eax  +
push dword ptr [ebp-8A8h]  +
call WerpGetReportFlags  +
test eax eax +
jge loc_100738F  +
mov ecx Reserved +
cmp ecx esi +
jz loc_100739B  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100739B  +
push eax  +
push edi  +
push 1Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_100739B  +
mov eax [ebp-8B8h] +
or [ebp-8B0h] eax +
mov ebx [ebp-8ACh] +
push dword ptr [ebp-8A8h]  +
mov ecx ebx +
call sub_1008D48  +
push dword ptr [ebp-8A8h]  +
mov ecx ebx +
call sub_10091FB  +
push dword ptr [ebp-8A8h]  +
mov ecx ebx +
call sub_10093DA  +
push dword ptr [ebp-8A8h]  +
mov ecx ebx +
call sub_1005758  +
push ebx  +
push offset loc_1006CCA  +
push dword ptr [ebp-8A8h]  +
call WerpSetCallBack  +
mov ebx eax +
test ebx ebx +
jge loc_100740C  +
mov eax Reserved +
cmp eax esi +
jz loc_10074AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10074AB  +
push ebx  +
push edi  +
push 20h  +
jmp loc_1007158  +
push dword ptr [ebp-8B4h]  +
push dword ptr [ebp-8B0h]  +
push dword ptr [ebp-8BCh]  +
push dword ptr [ebp-8A8h]  +
call WerReportSubmit  +
mov ebx eax +
mov eax [ebp-8ACh] +
test ebx ebx +
jge loc_1007457  +
mov dword ptr [eax+1C8h] 1 +
mov eax Reserved +
cmp eax esi +
jz loc_10074AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10074AB  +
push ebx  +
push edi  +
push 21h  +
jmp loc_1007158  +
and dword ptr [eax+1C8h] 0 +
mov eax Reserved +
cmp eax esi +
jz loc_1007484  +
test byte ptr [eax+1Ch] 4 +
jz loc_1007484  +
mov ecx [ebp-8B4h] +
push dword ptr [ecx]  +
push ebx  +
push edi  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100C7C8  +
xor ebx ebx +
jmp loc_10074AB  +
mov eax Reserved +
cmp eax esi +
jz loc_10074A6  +
test byte ptr [eax+1Ch] 1 +
jz loc_10074A6  +
push ecx  +
push edi  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov ebx 0E0000000h +
mov eax [ebp-8B4h] +
mov esi [ebp-8ACh] +
push dword ptr [eax]  +
mov ecx esi +
call sub_1006EE4  +
xor edi edi +
cmp [ebp-8A8h] edi +
jz loc_10074DB  +
push dword ptr [ebp-8A8h]  +
call WerReportCloseHandle  +
mov [ebp-8A8h] edi +
cmp [ebp-8C0h] edi +
jz loc_10070D7  +
mov eax [esi+1B4h] +
push dword ptr [eax+28h]  +
call ds:NtResumeProcess  +
jmp loc_10070D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] 4 +
call sub_100703D  +
mov esi eax +
test esi esi +
jge loc_1007543  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007545  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007545  +
push offset dword_10013B8  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1007545  +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1007500  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push edi  +
mov edi ecx +
mov [ebp+var_8] edi +
mov [ebp+hObject] ebx +
mov [ebp+ThreadId] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1007718  +
cmp [ebp+arg_4] ebx +
jz loc_1007718  +
push esi  +
push [ebp+arg_0]  +
call sub_1006D61  +
mov esi eax +
cmp esi ebx +
jge loc_10075D0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10076FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10076FA  +
push offset dword_10013B8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10076FA  +
mov ecx edi +
call sub_10053BE  +
test eax eax +
jnz loc_1007609  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10075FF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10075FF  +
push offset dword_10013B8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_10076FA  +
lea eax [ebp+ThreadId] +
push eax  +
push ebx  +
push edi  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov [ebp+hObject] eax +
cmp eax ebx +
jnz loc_1007662  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007647  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007647  +
push offset dword_10013B8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100765B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10076FA  +
xor ebx ebx +
inc ebx  +
mov edi offset Reserved +
mov esi offset dword_10013B8 +
test ebx ebx +
jz loc_100769E  +
mov ecx [ebp+var_8] +
cmp dword ptr [ecx+1C4h] 0 +
jnz loc_100769E  +
call sub_10052B4  +
mov ebx eax +
test ebx ebx +
jnz loc_10076BB  +
mov eax Reserved +
cmp eax edi +
jz loc_10076BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10076BB  +
push esi  +
push 0Eh  +
jmp loc_10076B0  +
mov eax Reserved +
cmp eax edi +
jz loc_10076BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10076BB  +
push esi  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
push 1A0Ah  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_10076F3  +
cmp eax 102h +
jz loc_100766F  +
mov ecx Reserved +
cmp ecx edi +
jz loc_10076F3  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10076F3  +
push eax  +
push esi  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
mov edi [ebp+var_8] +
xor esi esi +
xor ebx ebx +
mov eax [edi+1C8h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp [ebp+hObject] ebx +
jz loc_1007713  +
push [ebp+hObject]  +
call ds:__imp_CloseHandle  +
mov eax esi +
pop esi  +
jmp loc_1007741  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100773C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100773C  +
push offset dword_10013B8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
call __EH_prolog3  +
mov [ebp-14h] ecx +
xor esi esi +
lea ecx [ebp-2Ch] +
mov [ebp-10h] esi +
call sub_101292A  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call sub_101292A  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+0Ch] esi +
jz loc_100790F  +
cmp [ebp+8] esi +
jz loc_100790F  +
cmp [ebp+10h] esi +
jz loc_100790F  +
push 3Fh  +
push dword ptr [ebp+8]  +
call ds:__imp_wcschr  +
mov edi eax +
pop ecx  +
pop ecx  +
cmp edi esi +
jnz loc_10077D4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10077CA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10077CA  +
push esi  +
push offset dword_1001488  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
mov esi 80004005h +
jmp loc_10078F3  +
inc edi  +
inc edi  +
jz loc_10078F3  +
mov ebx ds:__imp__wcsicmp +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push edi  +
call sub_10096C1  +
mov esi eax +
test esi esi +
jl loc_10078B4  +
mov edi [ebp-10h] +
xor esi esi +
cmp [ebp+10h] esi +
jbe loc_1007825  +
lea ecx [ebp-2Ch] +
call sub_1012949  +
push eax  +
mov eax [ebp+0Ch] +
push dword ptr [eax+esi*8]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007825  +
inc esi  +
cmp esi [ebp+10h] +
jb loc_1007808  +
lea ecx [ebp-2Ch] +
call sub_1012949  +
push eax  +
push offset aEventtype  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100787F  +
mov ecx [ebp-14h] +
lea eax [ebp-20h] +
push eax  +
add ecx 60h +
call sub_1013561  +
mov esi eax +
test esi esi +
jge loc_10078A8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10078F3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078F3  +
push esi  +
push offset dword_1001488  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10078F3  +
cmp esi [ebp+10h] +
jnb loc_10078A8  +
test esi esi +
jbe loc_10078A8  +
lea eax [esi-1] +
cmp eax 0Ah +
jnb loc_10078A8  +
lea ecx [esi+8] +
imul ecx ecx +
add ecx [ebp-14h] +
lea eax [ebp-20h] +
push eax  +
call sub_1013561  +
mov esi eax +
test esi esi +
jl loc_10078CF  +
test edi edi +
jnz loc_10077E2  +
xor esi esi +
jmp loc_10078F3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10078F3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078F3  +
push offset dword_1001488  +
push 1Eh  +
jmp loc_10078E8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10078F3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078F3  +
push offset dword_1001488  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_101293C  +
mov eax esi +
jmp loc_1007950  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007933  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007933  +
push offset dword_1001488  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_101293C  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
and [ebp+var_48] 0 +
cmp [ebp+arg_0] 0 +
push edi  +
mov eax offset a00000000 +
mov edi ecx +
mov edx offset aUnknown +
mov ecx offset a0_0_0_0 +
mov [ebp+var_4C] offset dword_100156C +
mov [ebp+var_44] offset aSzappname +
mov [ebp+var_40] edx +
mov [ebp+var_3C] offset aSzappver +
mov [ebp+var_38] ecx +
mov [ebp+var_34] offset aSzappstamp +
mov [ebp+var_30] eax +
mov [ebp+var_2C] offset aSzmodname +
mov [ebp+var_28] edx +
mov [ebp+var_24] offset aSzmodver +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] offset aSzmodstamp +
mov [ebp+var_18] eax +
mov [ebp+var_14] offset aExceptioncode +
mov [ebp+var_10] offset aBbbbbbb4 +
mov [ebp+var_C] offset aOffset +
mov [ebp+var_8] eax +
jnz loc_1007A0A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007A00  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007A00  +
push offset dword_1001488  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1007AD5  +
push ebx  +
xor ebx ebx +
lea eax [edi+6Ch] +
push esi  +
inc ebx  +
mov [ebp+var_4] eax +
mov esi [ebp+ebx*8+var_48] +
mov ecx [ebp+var_4] +
push esi  +
call sub_1012CBE  +
test eax eax +
jge loc_1007A4E  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1007A4E  +
test byte ptr [ecx+1Ch] 2 +
jz loc_1007A4E  +
push eax  +
push esi  +
push offset dword_1001488  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10049DA  +
add [ebp+var_4] 0Ch +
inc ebx  +
cmp ebx 9 +
jb loc_1007A15  +
push 9  +
lea eax [ebp+var_4C] +
push eax  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100774C  +
mov ebx eax +
test ebx ebx +
jge loc_1007A94  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007AD1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007AD1  +
push offset dword_1001488  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1007AD1  +
mov esi offset aAppcrash +
push esi  +
lea ecx [edi+60h] +
call sub_1012CBE  +
mov ebx eax +
test ebx ebx +
jge loc_1007ACF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007AD1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007AD1  +
push esi  +
push offset dword_1001488  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
jmp loc_1007AD1  +
xor ebx ebx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push esi  +
xor esi esi +
mov [ebp+var_58] offset aEventtype +
mov [ebp+var_54] esi +
mov [ebp+var_50] offset aP1 +
mov [ebp+var_4C] esi +
mov [ebp+var_48] offset aP2 +
mov [ebp+var_44] esi +
mov [ebp+var_40] offset aP3 +
mov [ebp+var_3C] esi +
mov [ebp+var_38] offset aP4 +
mov [ebp+var_34] esi +
mov [ebp+var_30] offset aP5 +
mov [ebp+var_2C] esi +
mov [ebp+var_28] offset aP6 +
mov [ebp+var_24] esi +
mov [ebp+var_20] offset aP7 +
mov [ebp+var_1C] esi +
mov [ebp+var_18] offset aP8 +
mov [ebp+var_14] esi +
mov [ebp+var_10] offset aP9 +
mov [ebp+var_C] esi +
mov [ebp+var_8] offset aP10 +
mov [ebp+var_4] esi +
cmp [ebp+arg_0] esi +
jnz loc_1007B88  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007B81  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007B81  +
push offset dword_1001488  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1007BC9  +
push edi  +
push 0Bh  +
lea eax [ebp+var_58] +
push eax  +
push [ebp+arg_0]  +
call sub_100774C  +
mov edi eax +
cmp edi esi +
jge loc_1007BC4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007BC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007BC6  +
push edi  +
push offset dword_1001488  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1007BC6  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+1ACh] 2 +
jz loc_1007C12  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007C08  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007C08  +
push offset dword_1001488  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 0E0000004h +
jmp loc_1007CB3  +
push esi  +
lea esi [edi+1B8h] +
mov ecx esi +
call sub_1012B64  +
test eax eax +
jz loc_1007C5B  +
mov ecx esi +
call sub_1012949  +
push eax  +
push offset aWatson_stage1  +
push [ebp+arg_0]  +
call WerpAddTextToReport  +
mov esi eax +
test esi esi +
jge loc_1007C5B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007CB0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007CB0  +
push esi  +
push offset dword_1001488  +
push 28h  +
jmp loc_1007CA1  +
lea esi [edi+1C4h] +
mov ecx esi +
call sub_1012B64  +
test eax eax +
jz loc_1007CAE  +
mov ecx esi +
call sub_1012949  +
push eax  +
push offset aWatson_stage2  +
push [ebp+arg_0]  +
call WerpAddTextToReport  +
mov esi eax +
test esi esi +
jge loc_1007CAE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007CB0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007CB0  +
push esi  +
push offset dword_1001488  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1007CB0  +
xor esi esi +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-20h] +
call sub_10184CA  +
xor ebx ebx +
xor edi edi +
inc ebx  +
lea eax [esi+1B4h] +
mov [ebp-4] edi +
mov dword ptr [eax] 20000h +
test byte ptr dword_101DB90 bl +
jnz loc_1008352  +
or dword_101DB90 ebx +
lea edx [esi+1B0h] +
mov dword_101D030 edx +
mov ecx offset loc_1018656 +
lea edx [esi+18Ch] +
mov dword_101D058 edx +
mov dword_101D024 ecx +
mov dword_101D038 ecx +
lea edx [esi+1B8h] +
mov dword_101D06C edx +
mov dword_101D09C ecx +
mov dword_101D0B0 ecx +
lea edx [esi+1C4h] +
lea ecx [esi+0Ch] +
mov dword_101D080 edx +
mov dword_101D0BC ecx +
lea edx [esi+1A4h] +
lea ecx [esi+18h] +
mov dword_101D01C eax +
push 4  +
pop eax  +
mov dword_101D094 edx +
mov dword_101D0D0 ecx +
lea edx [esi+1A8h] +
lea ecx [esi+24h] +
mov dword_101D020 eax +
mov dword_101D034 eax +
mov eax offset loc_10186AF +
mov dword_101D0A8 edx +
mov dword_101D0E4 ecx +
lea ecx [esi+30h] +
lea edx [esi+3Ch] +
mov dword_101D028 ebx +
mov dword_101D02C offset aUiLcid +
mov dword_101D03C ebx +
mov dword_101D040 offset aGeneral_appnam +
mov dword_101D044 esi +
mov dword_101D048 edi +
mov dword_101D04C eax +
mov dword_101D050 ebx +
mov dword_101D054 offset aQueued_eventde +
mov dword_101D05C edi +
mov dword_101D060 eax +
mov dword_101D064 ebx +
mov dword_101D068 offset aStage1url +
mov dword_101D070 edi +
mov dword_101D074 eax +
mov dword_101D078 7 +
mov dword_101D07C offset aStage2url +
mov dword_101D084 edi +
mov dword_101D088 eax +
mov dword_101D08C 7 +
mov dword_101D090 offset aReportingflags +
mov dword_101D098 4 +
mov dword_101D0A0 ebx +
mov dword_101D0A4 offset aUiflags +
mov dword_101D0AC 4 +
mov dword_101D0B4 ebx +
mov dword_101D0B8 offset aDetails_pre_bo +
mov dword_101D0C0 edi +
mov dword_101D0C4 eax +
mov dword_101D0C8 ebx +
mov dword_101D0CC offset aBrand +
mov dword_101D0D4 edi +
mov dword_101D0D8 eax +
mov dword_101D0DC 7 +
mov dword_101D0E0 offset aCustomquerystr +
mov dword_101D0E8 edi +
mov dword_101D0EC eax +
mov dword_101D0F0 ebx +
mov dword_101D0F4 offset aFilestodelete +
mov dword_101D0F8 ecx +
mov dword_101D0FC edi +
mov dword_101D100 eax +
mov dword_101D104 ebx +
mov dword_101D108 offset aFilestokeep +
mov dword_101D10C edx +
mov dword_101D110 edi +
mov dword_101D114 eax +
mov dword_101D118 ebx +
mov dword_101D11C offset aUserdocs +
lea edx [esi+48h] +
mov dword_101D120 edx +
lea edx [esi+54h] +
mov dword_101D134 edx +
lea edx [esi+60h] +
mov dword_101D148 edx +
lea edx [esi+198h] +
mov dword_101D15C edx +
lea edx [esi+6Ch] +
mov dword_101D170 edx +
lea edx [esi+78h] +
mov dword_101D184 edx +
lea edx [esi+84h] +
mov dword_101D198 edx +
lea edx [esi+90h] +
mov dword_101D1AC edx +
lea edx [esi+9Ch] +
mov dword_101D1C0 edx +
lea edx [esi+0A8h] +
mov dword_101D1D4 edx +
lea edx [esi+0B4h] +
mov dword_101D1E8 edx +
lea edx [esi+0C0h] +
mov dword_101D1FC edx +
lea edx [esi+0CCh] +
mov dword_101D210 edx +
lea edx [esi+0D8h] +
mov dword_101D124 edi +
mov dword_101D128 eax +
mov dword_101D12C ebx +
mov dword_101D130 offset aHeap +
mov dword_101D138 edi +
mov dword_101D13C eax +
mov dword_101D140 5 +
mov dword_101D144 offset aEventtype_0 +
mov dword_101D14C edi +
mov dword_101D150 eax +
mov dword_101D154 ebx +
mov dword_101D158 offset aEventlogsource +
mov dword_101D160 edi +
mov dword_101D164 eax +
mov dword_101D168 ebx +
mov dword_101D16C offset aP1_0 +
mov dword_101D174 edi +
mov dword_101D178 eax +
mov dword_101D17C ebx +
mov dword_101D180 offset aP2_0 +
mov dword_101D188 edi +
mov dword_101D18C eax +
mov dword_101D190 ebx +
mov dword_101D194 offset aP3_0 +
mov dword_101D19C edi +
mov dword_101D1A0 eax +
mov dword_101D1A4 ebx +
mov dword_101D1A8 offset aP4_0 +
mov dword_101D1B0 edi +
mov dword_101D1B4 eax +
mov dword_101D1B8 ebx +
mov dword_101D1BC offset aP5_0 +
mov dword_101D1C4 edi +
mov dword_101D1C8 eax +
mov dword_101D1CC ebx +
mov dword_101D1D0 offset aP6_0 +
mov dword_101D1D8 edi +
mov dword_101D1DC eax +
mov dword_101D1E0 ebx +
mov dword_101D1E4 offset aP7_0 +
mov dword_101D1EC edi +
mov dword_101D1F0 eax +
mov dword_101D1F4 ebx +
mov dword_101D1F8 offset aP8_0 +
mov dword_101D200 edi +
mov dword_101D204 eax +
mov dword_101D208 ebx +
mov dword_101D20C offset aP9_0 +
mov dword_101D214 edi +
mov dword_101D218 eax +
mov dword_101D21C ebx +
mov dword_101D220 offset aP10_0 +
mov dword_101D224 edx +
mov dword_101D228 edi +
lea edx [esi+0FCh] +
mov dword_101D238 edx +
lea edx [esi+114h] +
mov dword_101D24C edx +
lea edx [esi+174h] +
mov dword_101D260 edx +
lea edx [esi+120h] +
mov dword_101D274 edx +
lea edx [esi+138h] +
mov dword_101D288 edx +
lea edx [esi+12Ch] +
mov dword_101D29C edx +
lea edx [esi+0FCh] +
mov dword_101D2C4 edx +
lea edx [esi+174h] +
mov dword_101D2EC edx +
lea edx [esi+114h] +
mov dword_101D300 edx +
lea edx [esi+0Ch] +
push 6  +
mov dword_101D2B0 ecx +
pop ecx  +
mov dword_101D314 edx +
lea edx [esi+1D0h] +
mov dword_101D22C eax +
mov dword_101D230 ebx +
mov dword_101D234 offset aMain_iconfile +
mov dword_101D23C edi +
mov dword_101D240 eax +
mov dword_101D244 ebx +
mov dword_101D248 offset aMain_intro_reg +
mov dword_101D250 edi +
mov dword_101D254 eax +
mov dword_101D258 ebx +
mov dword_101D25C offset aMain_intro_bol +
mov dword_101D264 edi +
mov dword_101D268 eax +
mov dword_101D26C ebx +
mov dword_101D270 offset aMain_reportbtn +
mov dword_101D278 edi +
mov dword_101D27C eax +
mov dword_101D280 ebx +
mov dword_101D284 offset aMain_noreportb +
mov dword_101D28C edi +
mov dword_101D290 eax +
mov dword_101D294 ebx +
mov dword_101D298 offset aMain_queuebtn +
mov dword_101D2A0 edi +
mov dword_101D2A4 eax +
mov dword_101D2A8 ebx +
mov dword_101D2AC offset aDatafiles +
mov dword_101D2B4 edi +
mov dword_101D2B8 eax +
mov dword_101D2BC ecx +
mov dword_101D2C0 offset aIconfile +
mov dword_101D2C8 edi +
mov dword_101D2CC eax +
mov dword_101D2D0 4 +
mov dword_101D2D4 offset aTitlename +
mov dword_101D2D8 esi +
mov dword_101D2DC edi +
mov dword_101D2E0 eax +
mov dword_101D2E4 ecx +
mov dword_101D2E8 offset aHeadertext +
mov dword_101D2F0 edi +
mov dword_101D2F4 eax +
mov dword_101D2F8 ecx +
mov dword_101D2FC offset aErrortext +
mov dword_101D304 edi +
mov dword_101D308 eax +
mov dword_101D30C ecx +
mov dword_101D310 offset aErrordetail +
mov dword_101D318 edi +
mov dword_101D31C eax +
mov dword_101D320 ecx +
mov dword_101D324 offset aFlags +
mov dword_101D328 edx +
mov dword_101D32C 4 +
mov dword_101D330 offset loc_1018656 +
mov dword_101D334 ecx +
mov dword_101D338 offset aReportbutton +
lea edx [esi+120h] +
mov dword_101D33C edx +
lea edx [esi+138h] +
mov dword_101D340 edi +
mov dword_101D344 eax +
mov dword_101D348 ecx +
mov dword_101D34C offset aNoreportbutton +
mov dword_101D350 edx +
mov dword_101D354 edi +
mov dword_101D358 eax +
mov dword_101D35C ecx +
push edi  +
push dword ptr [ebp+8]  +
lea ecx [ebp-20h] +
call sub_10184EB  +
cmp eax edi +
mov [ebp-10h] eax +
jge loc_100839B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100844D  +
test [eax+1Ch] bl +
jz loc_100844D  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push offset dword_1001488  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
jmp loc_100844D  +
mov eax [ebp-14h] +
push 2Ah  +
push offset off_101D018  +
shr eax 1 +
push eax  +
push dword ptr [ebp-18h]  +
call sub_1018732  +
mov eax [esi+1D0h] +
cmp eax edi +
jz loc_10083CF  +
push edi  +
lea ecx [esi+1A8h] +
push ecx  +
lea ecx [esi+1A4h] +
push ecx  +
push eax  +
call sub_1009645  +
mov ecx [esi+1B4h] +
cmp ecx 20000h +
jz loc_100840A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008401  +
test [eax+1Ch] bl +
jz loc_1008401  +
push ecx  +
push offset dword_1001488  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov dword ptr [ebp-10h] 80004005h +
jmp loc_100844D  +
lea ecx [esi+60h] +
call sub_1012B76  +
test eax eax +
jz loc_100844A  +
lea ecx [esi+1C4h] +
call sub_1012B76  +
test eax eax +
jz loc_100844A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008401  +
test [eax+1Ch] bl +
jz loc_1008401  +
push offset dword_1001488  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1008401  +
mov [ebp-10h] edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_10184E1  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov ebx ecx +
lea ecx [ebp-1Ch] +
call sub_101292A  +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
test edi edi +
jnz loc_10084C9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10084AE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10084AE  +
push offset dword_1001488  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_101293C  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
cmp word ptr [edi] 2Fh +
lea ecx [ebp-1Ch] +
jnz loc_100850A  +
push edi  +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jge loc_1008578  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10084B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10084B3  +
push esi  +
push edi  +
push offset dword_1001488  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
jmp loc_10084B3  +
push offset dword_100137C  +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jge loc_1008544  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10084B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10084B3  +
push esi  +
push offset dword_1001488  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10084B3  +
push edi  +
lea ecx [ebp-1Ch] +
call sub_1012E45  +
mov esi eax +
test esi esi +
jge loc_1008578  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10084B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10084B3  +
push esi  +
push edi  +
push offset dword_1001488  +
push 1Ah  +
jmp loc_10084FD  +
xor edi edi +
mov dword ptr [ebx+1ACh] 3 +
mov [ebp-10h] edi +
lea esi off_101D360[edi] +
push dword ptr [esi]  +
call ds:lstrlenW  +
push eax  +
push dword ptr [esi]  +
lea ecx [ebp-1Ch] +
call sub_1012949  +
push eax  +
call ds:__imp__wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10085BB  +
inc dword ptr [ebp-10h]  +
add edi 0Ch +
cmp edi 30h +
jb loc_1008587  +
jmp loc_10085CD  +
mov eax [ebp-10h] +
imul eax eax +
mov eax dword_101D368[eax] +
mov [ebx+1ACh] eax +
mov eax [ebx+1ACh] +
cmp eax 1 +
jnz loc_10085E4  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_1007ADF  +
jmp loc_1008606  +
test eax eax +
jnz loc_10085F4  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_100795D  +
jmp loc_1008606  +
cmp eax 2 +
jnz loc_100860A  +
push offset aLegacy  +
lea ecx [ebx+60h] +
call sub_1012CBE  +
mov esi eax +
jmp loc_100860F  +
mov esi 80004005h +
test esi esi +
jge loc_1008644  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10084B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10084B3  +
push offset dword_1001488  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10084B3  +
xor esi esi +
jmp loc_10084B3  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100904C  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1B8h] +
call sub_101292A  +
lea ecx [esi+1C4h] +
mov byte ptr [ebp-4] 1 +
call sub_101292A  +
and dword ptr [esi+1D0h] 0 +
and dword ptr [esi+1B4h] 0 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_GS  +
mov edi [ebp+8] +
mov esi ecx +
xor ebx ebx +
lea ecx [ebp-8BCh] +
mov [ebp-8C0h] edi +
mov [ebp-8A8h] ebx +
call sub_101292A  +
push 890h  +
lea eax [ebp-8A0h] +
push ebx  +
push eax  +
mov [ebp-4] ebx +
mov [ebp-8A4h] ebx +
call memset  +
add esp 0Ch +
mov [ebp-8ACh] ebx +
mov dword ptr [ebp-8B0h] 1 +
cmp edi ebx +
jnz loc_1008740  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008722  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008722  +
push offset dword_1001488  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80070057h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-8BCh] +
call sub_101293C  +
mov eax edi +
call sub_1012614  +
retn 4  +
lea ecx [esi+198h] +
mov dword ptr [edi] 4 +
call sub_1012B64  +
test eax eax +
jz loc_100875C  +
mov ecx esi +
call sub_100915C  +
lea edi [esi+174h] +
mov ecx edi +
call sub_1012B64  +
test eax eax +
jz loc_1008799  +
push edi  +
lea ecx [ebp-8BCh] +
call sub_1013561  +
push offset a__0  +
lea ecx [ebp-8BCh] +
call sub_101332A  +
push offset a_  +
lea ecx [ebp-8BCh] +
call sub_1012E45  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1012B64  +
test eax eax +
jz loc_10087B3  +
push edi  +
lea ecx [ebp-8BCh] +
call sub_10136C6  +
mov ecx esi +
mov dword ptr [ebp-8A4h] 894h +
call sub_1012B64  +
mov edi 80h +
test eax eax +
jz loc_10087E2  +
mov ecx esi +
call sub_1012949  +
push eax  +
push edi  +
lea eax [ebp-71Ch] +
push eax  +
call sub_1006418  +
lea ebx [esi+18Ch] +
mov ecx ebx +
call sub_1012B64  +
test eax eax +
jz loc_1008808  +
mov ecx ebx +
call sub_1012949  +
push eax  +
push edi  +
lea eax [ebp-81Ch] +
push eax  +
call sub_1006418  +
lea ecx [ebp-8BCh] +
call sub_1012B64  +
test eax eax +
jz loc_1008834  +
lea ecx [ebp-8BCh] +
call sub_1012949  +
push eax  +
push 200h  +
lea eax [ebp-414h] +
push eax  +
call sub_1006418  +
xor ebx ebx +
cmp [esi+1ACh] ebx +
jz loc_100884E  +
test dword ptr [esi+1A4h] 800h +
jnz loc_100884E  +
xor eax eax +
jmp loc_1008851  +
xor eax eax +
inc eax  +
lea ecx [ebp-8A8h] +
push ecx  +
lea ecx [ebp-8A4h] +
push ecx  +
push eax  +
lea ecx [esi+60h] +
call sub_1012949  +
push eax  +
call WerReportCreate  +
mov edi eax +
cmp edi ebx +
jge loc_10088A6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10089A8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10089A8  +
push edi  +
push offset dword_1001488  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10089A8  +
cmp dword ptr [esi+1ACh] 2 +
push dword ptr [ebp-8A8h]  +
mov ecx esi +
jz loc_10088E6  +
call sub_1008DE5  +
mov edi eax +
cmp edi ebx +
jge loc_1008915  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10089A8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10089A8  +
push edi  +
push offset dword_1001488  +
push 14h  +
jmp loc_1008896  +
call sub_1007BD3  +
mov edi eax +
cmp edi ebx +
jge loc_1008915  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10089A8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10089A8  +
push edi  +
push offset dword_1001488  +
push 15h  +
jmp loc_1008896  +
push dword ptr [ebp-8A8h]  +
mov ecx esi +
call sub_1008D48  +
push dword ptr [ebp-8A8h]  +
mov ecx esi +
call sub_10091FB  +
lea eax [ebp-8B0h] +
push eax  +
lea eax [ebp-8ACh] +
push eax  +
mov ecx esi +
call sub_1008CB6  +
test byte ptr [esi+1A8h] 20h +
jz loc_1008954  +
or dword ptr [ebp-8ACh] 8 +
push dword ptr [ebp-8A8h]  +
mov ecx esi +
call sub_10093DA  +
push dword ptr [ebp-8C0h]  +
push dword ptr [ebp-8ACh]  +
push dword ptr [ebp-8B0h]  +
push dword ptr [ebp-8A8h]  +
call WerReportSubmit  +
mov edi eax +
cmp edi ebx +
jge loc_10089A8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10089A8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10089A8  +
push offset dword_1001488  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
cmp [ebp-8A8h] ebx +
jz loc_1008727  +
push dword ptr [ebp-8A8h]  +
call WerReportCloseHandle  +
mov [ebp-8A8h] ebx +
jmp loc_1008727  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+lpFileName] 0 +
push edi  +
mov edi ecx +
jz loc_1008B3D  +
cmp [ebp+arg_4] 0 +
jz loc_1008B3D  +
push ebx  +
push esi  +
push [ebp+lpFileName]  +
mov [ebp+var_4] 4 +
call sub_1007CBD  +
xor ebx ebx +
mov esi eax +
inc ebx  +
test esi esi +
jge loc_1008A39  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0E  +
test [eax+1Ch] bl +
jz loc_1008B0E  +
push [ebp+lpFileName]  +
push offset dword_1001488  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
jmp loc_1008B0E  +
lea esi [edi+60h] +
mov ecx esi +
call sub_1012B76  +
test eax eax +
jz loc_1008A83  +
lea ecx [edi+1C4h] +
call sub_1012B76  +
test eax eax +
jz loc_1008A83  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008A79  +
test [eax+1Ch] bl +
jz loc_1008A79  +
push offset dword_1001488  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_1008B0E  +
mov ecx esi +
call sub_1012B64  +
test eax eax +
jz loc_1008ACB  +
mov [edi+1ACh] ebx +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_100869F  +
mov esi eax +
test esi esi +
jge loc_1008B0C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0E  +
test [eax+1Ch] bl +
jz loc_1008B0E  +
push esi  +
push offset dword_1001488  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1008B0E  +
lea esi [edi+1C4h] +
mov ecx esi +
call sub_1012B64  +
test eax eax +
jz loc_1008A94  +
mov ecx esi +
call sub_1012949  +
push eax  +
mov ecx edi +
call sub_1008469  +
mov esi eax +
test esi esi +
jge loc_1008A94  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0E  +
test [eax+1Ch] bl +
jz loc_1008B0E  +
push esi  +
push offset dword_1001488  +
push 0Dh  +
jmp loc_1008ABE  +
xor esi esi +
test [edi+1A4h] bl +
jz loc_1008B1F  +
push [ebp+lpFileName]  +
call ds:DeleteFileW  +
mov eax [ebp+arg_4] +
xor ecx ecx +
test esi esi +
setl cl  +
cmp [ebp+var_4] 3 +
mov [eax] ecx +
jnz loc_1008B37  +
mov dword ptr [eax] 10h +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_1008B66  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B61  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008B61  +
push offset dword_1001488  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1008BA1  +
cmp word ptr [edx] 0 +
jnz loc_1008B86  +
push 0Eh  +
jmp loc_1008BA3  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008B8C  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1008BA4  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1008BB5  +
cmp word ptr [edx] 0 +
jnz loc_1008BBA  +
mov edx offset aNull +
jmp loc_1008BBA  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_18] +
push ecx  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_1008C23  +
cmp word ptr [edx] 0 +
jnz loc_1008C07  +
mov [ebp+arg_14] 0Eh +
jmp loc_1008C2A  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008C0C  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_1008C2A  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_1008C40  +
cmp word ptr [edx] 0 +
jnz loc_1008C42  +
mov edx offset aNull +
jmp loc_1008C42  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_1008C6C  +
cmp word ptr [edi] 0 +
jnz loc_1008C53  +
push 0Eh  +
jmp loc_1008C6E  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008C58  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1008C6F  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_1008C84  +
cmp word ptr [edi] 0 +
jnz loc_1008C80  +
mov eax offset aNull +
jmp loc_1008C86  +
mov eax edi +
jmp loc_1008C86  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_18] +
push esi  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_1008D37  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1008D37  +
and dword ptr [esi] 0 +
xor edx edx +
inc edx  +
lea eax [edi+1A8h] +
mov [ebx] edx +
mov ecx [eax] +
test cl 3 +
jz loc_1008D11  +
or dword ptr [esi] 80000000h +
mov eax [eax] +
mov ecx eax +
and ecx 3 +
cmp cl 3 +
jz loc_1008D0B  +
test al dl +
jz loc_1008D11  +
test byte ptr [edi+1A4h] 8 +
jnz loc_1008D11  +
call WerpIsTransportAvailable  +
test eax eax +
jz loc_1008D11  +
mov dword ptr [ebx] 2 +
lea eax [edi+1A4h] +
test byte ptr [eax] 0Ch +
jz loc_1008D22  +
or dword ptr [esi] 804h +
test byte ptr [eax] 10h +
jz loc_1008D33  +
mov eax [esi] +
and eax 0FFFFFFFBh +
or eax 80h +
mov [esi] eax +
xor eax eax +
jmp loc_1008D3C  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov edi ecx +
lea ecx [ebp-18h] +
call sub_101292A  +
xor ebx ebx +
mov [ebp-4] ebx +
lea esi [edi+0E4h] +
mov ecx esi +
call sub_1012B64  +
test eax eax +
jz loc_1008DC1  +
push esi  +
lea ecx [ebp-18h] +
call sub_1013561  +
test eax eax +
jl loc_1008DC1  +
cmp ebx 3 +
jz loc_1008D8B  +
cmp ebx 4 +
jnz loc_1008DAF  +
mov ecx edi +
call sub_1012B64  +
test eax eax +
jz loc_1008DAF  +
push 0  +
push 0  +
mov ecx edi +
call sub_1012949  +
push eax  +
push offset aGeneral_appn_0  +
lea ecx [ebp-18h] +
call sub_1013748  +
lea ecx [ebp-18h] +
call sub_1012949  +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
call WerReportSetUIOption  +
inc ebx  +
add esi 0Ch +
cmp ebx 0Ch +
jb loc_1008D69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
lea esi [ecx+6Ch] +
push edi  +
mov ecx esi +
mov ebx 80004005h +
call sub_1012949  +
test eax eax +
jz loc_1008E3B  +
mov ecx esi +
call sub_1012949  +
xor edi edi +
cmp [eax] di +
jz loc_1008E3B  +
mov ecx esi +
call sub_1012B64  +
test eax eax +
jz loc_1008E2E  +
mov ecx esi +
call sub_1012949  +
push eax  +
push 0  +
push edi  +
push [ebp+arg_0]  +
call WerReportSetParameter  +
mov ebx eax +
inc edi  +
add esi 0Ch +
cmp edi 0Ah +
jb loc_1008E0E  +
mov eax ebx +
jmp loc_1008E64  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008E5F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008E5F  +
push offset dword_1001A98  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 0E0000000h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1008EA1  +
push 2Eh  +
push [ebp+arg_0]  +
call ds:__imp_wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008EA1  +
push offset a_cvr  +
push eax  +
call ds:__imp__wcsicmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
jmp loc_1008EA3  +
xor eax eax +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-14h] ecx +
lea ecx [ebp-20h] +
call sub_101292A  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov eax [ebp+14h] +
mov [ebp-10h] eax +
test esi esi +
jz loc_100900A  +
cmp dword ptr [ebp+8] 0 +
jz loc_100900A  +
mov edi ds:__imp_wcschr +
jmp loc_1008F81  +
mov eax ebx +
sub eax esi +
sar eax 1 +
push eax  +
push esi  +
lea ecx [ebp-20h] +
call sub_1013579  +
mov [ebp+0Ch] eax +
test eax eax +
jl loc_1008FE3  +
mov esi [ebp+14h] +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call sub_1012949  +
mov ecx [ebp-14h] +
push eax  +
call sub_1008E70  +
test eax eax +
jz loc_1008F2B  +
mov eax esi +
or eax 2 +
mov [ebp-10h] eax +
push dword ptr [ebp-10h]  +
lea ecx [ebp-20h] +
push dword ptr [ebp+10h]  +
call sub_1012949  +
push eax  +
push dword ptr [ebp+8]  +
call WerReportAddFile  +
test eax eax +
jge loc_1008F7E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008F7E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008F7E  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-20h] +
push dword ptr [ebp+10h]  +
call sub_1012949  +
push eax  +
mov eax Reserved +
push offset dword_1001A98  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008B70  +
lea esi [ebx+2] +
push 7Ch  +
push esi  +
call edi  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_1008EED  +
test esi esi +
jz loc_1008FCE  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+8]  +
call WerReportAddFile  +
test eax eax +
jge loc_1008FCE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008FCE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008FCE  +
push esi  +
push offset dword_1001A98  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
and dword ptr [ebp+0Ch] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_101293C  +
mov eax [ebp+0Ch] +
jmp loc_100903F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008FD2  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008FD2  +
push esi  +
push offset dword_1001A98  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
jmp loc_1008FD2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100902E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100902E  +
push offset dword_1001A98  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_101293C  +
mov eax 80070057h +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101292A  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
call sub_101292A  +
lea ecx [esi+18h] +
mov byte ptr [ebp-4] 1 +
call sub_101292A  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 2 +
call sub_101292A  +
lea ecx [esi+30h] +
mov byte ptr [ebp-4] 3 +
call sub_101292A  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 4 +
call sub_101292A  +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 5 +
call sub_101292A  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 6 +
call sub_101292A  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 7 +
call sub_101292A  +
mov ebx offset sub_101293C +
push ebx  +
mov edi offset sub_101292A +
push edi  +
push 0Ah  +
push 0Ch  +
lea eax [esi+6Ch] +
push eax  +
mov byte ptr [ebp-4] 8 +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
push ebx  +
push edi  +
push 0Ch  +
push 0Ch  +
lea eax [esi+0E4h] +
push eax  +
mov byte ptr [ebp-4] 9 +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
lea ecx [esi+174h] +
mov byte ptr [ebp-4] 0Ah +
call sub_101292A  +
lea ecx [esi+180h] +
mov byte ptr [ebp-4] 0Bh +
call sub_101292A  +
lea ecx [esi+18Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_101292A  +
lea ecx [esi+198h] +
mov byte ptr [ebp-4] 0Dh +
call sub_101292A  +
xor eax eax +
mov [esi+1B0h] eax +
mov [esi+1A4h] eax +
mov [esi+1A8h] eax +
mov dword ptr [esi+1ACh] 3 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
and [ebp+var_30] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_2C] +
stos   +
lea edi [esi+198h] +
mov ecx edi +
mov ebx 80004005h +
mov [ebp+var_4] 1 +
call sub_1012B64  +
test eax eax +
jz loc_10091EF  +
lea ecx [esi+60h] +
call sub_1012949  +
xor ebx ebx +
inc ebx  +
mov [ebp+var_30] eax +
add esi 6Ch +
mov ecx esi +
call sub_1012B64  +
test eax eax +
jz loc_10091C7  +
mov ecx esi +
call sub_1012949  +
inc [ebp+var_4]  +
mov [ebp+ebx*4+var_30] eax +
inc ebx  +
add esi 0Ch +
cmp ebx 0Bh +
jb loc_10091A5  +
push 2710h  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push [ebp+var_4]  +
lea eax [ebp+var_30] +
push eax  +
mov ecx edi +
call sub_1012949  +
push eax  +
push 4  +
push esi  +
push 0C0001388h  +
call sub_1015100  +
mov ebx eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+30h] +
mov ecx edi +
xor ebx ebx +
call sub_1012B64  +
test eax eax +
jz loc_100926F  +
mov eax [esi+1A4h] +
test eax 400h +
jz loc_1009225  +
push 2  +
pop ebx  +
test al 1 +
jz loc_100922C  +
or ebx 1 +
push ebx  +
push 5  +
mov ecx edi +
call sub_1012949  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1008EAC  +
test eax eax +
jge loc_100926F  +
mov ecx Reserved +
mov ebx offset Reserved +
cmp ecx ebx +
jz loc_1009274  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1009274  +
push eax  +
push offset dword_1001A98  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_1009274  +
mov ebx offset Reserved +
lea edi [esi+3Ch] +
mov ecx edi +
call sub_1012B64  +
test eax eax +
jz loc_10092CA  +
mov eax [esi+1A4h] +
shr eax 9 +
and eax 2 +
push eax  +
push 5  +
mov ecx edi +
call sub_1012949  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1008EAC  +
test eax eax +
jge loc_10092CA  +
mov ecx Reserved +
cmp ecx ebx +
jz loc_10092CA  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10092CA  +
push eax  +
push offset dword_1001A98  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
lea edi [esi+48h] +
mov ecx edi +
call sub_1012B64  +
test eax eax +
jz loc_1009315  +
push 0  +
push 4  +
mov ecx edi +
call sub_1012949  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1008EAC  +
test eax eax +
jge loc_1009315  +
mov ecx Reserved +
cmp ecx ebx +
jz loc_1009315  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1009315  +
push eax  +
push offset dword_1001A98  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
lea edi [esi+54h] +
mov ecx edi +
call sub_1012B64  +
test eax eax +
jz loc_100936B  +
mov eax [esi+1A4h] +
and eax 1 +
push eax  +
push 3  +
mov ecx edi +
call sub_1012949  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1008EAC  +
mov esi eax +
test esi esi +
jge loc_100936B  +
mov eax Reserved +
cmp eax ebx +
jz loc_100936D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100936D  +
push esi  +
push offset dword_1001A98  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100936D  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1009391  +
cmp ecx 7FFFFFFFh +
jbe loc_1009396  +
mov eax 80070057h +
test eax eax +
jl loc_10093D3  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10093C3  +
cmp eax esi +
ja loc_10093C3  +
jnz loc_10093CE  +
jmp loc_10093C8  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
call __EH_prolog3_GS  +
mov esi [ebp+8] +
mov ebx ecx +
lea ecx [ebp-40h] +
mov [ebp-24h] esi +
call sub_101292A  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-34h] +
call sub_101292A  +
mov eax [ebx+1B0h] +
and dword ptr [ebp-28h] 0 +
mov byte ptr [ebp-4] 1 +
mov edi offset dword_1001A98 +
test eax eax +
jz loc_1009481  +
push eax  +
push offset aU  +
lea eax [ebp-20h] +
push 8  +
push eax  +
call sub_100937B  +
add esp 10h +
test eax eax +
jl loc_100945E  +
lea eax [ebp-20h] +
push eax  +
push offset aLcid  +
push esi  +
call WerpAddSecondaryParameter  +
test eax eax +
jge loc_1009481  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1009481  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1009481  +
push eax  +
push edi  +
push 0Eh  +
jmp loc_1009476  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1009481  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1009481  +
push eax  +
push edi  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
lea esi [ebx+18h] +
mov ecx esi +
call sub_1012949  +
test eax eax +
jz loc_10094D8  +
mov ecx esi +
call sub_1012949  +
cmp word ptr [eax] 0 +
jz loc_10094D8  +
mov ecx esi +
call sub_1012949  +
push eax  +
push offset aBrand_0  +
push dword ptr [ebp-24h]  +
call WerpAddSecondaryParameter  +
test eax eax +
jge loc_10094D8  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_10094D8  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10094D8  +
push eax  +
push edi  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
mov eax [ebx+1A4h] +
and eax 60h +
cmp eax 20h +
jnz loc_1009516  +
push offset a1  +
push offset aNo2nd  +
push dword ptr [ebp-24h]  +
call WerpAddSecondaryParameter  +
test eax eax +
jge loc_1009553  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1009553  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1009553  +
push eax  +
push edi  +
push 11h  +
jmp loc_1009548  +
test eax eax +
jz loc_1009553  +
push offset a2  +
push offset aNo2nd  +
push dword ptr [ebp-24h]  +
call WerpAddSecondaryParameter  +
test eax eax +
jge loc_1009553  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1009553  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1009553  +
push eax  +
push edi  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
lea esi [ebx+24h] +
mov ecx esi +
call sub_1012949  +
test eax eax +
jz loc_10095FA  +
mov ecx esi +
call sub_1012949  +
cmp word ptr [eax] 0 +
jz loc_10095FA  +
mov ecx esi +
call sub_1012949  +
jmp loc_10095F6  +
lea ecx [ebp-34h] +
push ecx  +
lea ecx [ebp-40h] +
push ecx  +
lea ecx [ebp-28h] +
push ecx  +
push eax  +
call sub_10096C1  +
mov esi eax +
test esi esi +
jl loc_100961E  +
lea ecx [ebp-34h] +
call sub_1012949  +
push eax  +
lea ecx [ebp-40h] +
call sub_1012949  +
push eax  +
push dword ptr [ebp-24h]  +
call WerpAddSecondaryParameter  +
test eax eax +
jge loc_10095F3  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_10095F3  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10095F3  +
push eax  +
lea ecx [ebp-34h] +
call sub_1012949  +
push eax  +
lea ecx [ebp-40h] +
call sub_1012949  +
push eax  +
mov eax Reserved +
push edi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008BE9  +
mov eax [ebp-28h] +
test eax eax +
jnz loc_100957F  +
xor esi esi +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call sub_101293C  +
mov eax esi +
call sub_1012614  +
retn 4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10095FC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10095FC  +
push edi  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10095FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_100968F  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100968F  +
mov edx [ebp+arg_0] +
test edx 800h +
jz loc_1009666  +
or dword ptr [eax] 20h +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1009678  +
test edx 1000h +
jz loc_1009678  +
or dword ptr [eax] 2 +
test edx 40000h +
jz loc_1009683  +
or dword ptr [ecx] 60h +
test dl 40h +
jz loc_100968B  +
or dword ptr [ecx] 1 +
xor eax eax +
jmp loc_10096B8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10096B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10096B3  +
push offset dword_1001B0C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
xor ecx ecx +
cmp ebx ecx +
jz loc_10097FE  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_10097FE  +
cmp [ebp+arg_8] ecx +
jz loc_10097FE  +
cmp [ebp+arg_C] ecx +
jz loc_10097FE  +
push esi  +
push edi  +
mov edi ds:__imp_wcschr +
push 3Dh  +
push ebx  +
mov [eax] ecx +
call edi  +
pop ecx  +
mov esi eax +
pop ecx  +
mov ecx [ebp+arg_8] +
test esi esi +
jz loc_10097C9  +
sub eax ebx +
sar eax 1 +
push eax  +
push ebx  +
call sub_1013579  +
mov ebx eax +
test ebx ebx +
jge loc_1009741  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100978C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100978C  +
push [ebp+arg_0]  +
push offset dword_1001B0C  +
push 0Ch  +
jmp loc_10097F1  +
add esi 2 +
push 26h  +
push esi  +
call edi  +
pop ecx  +
mov edi eax +
pop ecx  +
mov ecx [ebp+arg_C] +
test edi edi +
jz loc_1009795  +
sub eax esi +
sar eax 1 +
push eax  +
push esi  +
call sub_1013579  +
mov ebx eax +
test ebx ebx +
jge loc_1009782  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100978C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100978C  +
push ebx  +
push esi  +
push offset dword_1001B0C  +
push 0Dh  +
jmp loc_10097BC  +
mov eax [ebp+arg_4] +
add edi 2 +
mov [eax] edi +
xor ebx ebx +
pop edi  +
mov eax ebx +
pop esi  +
jmp loc_1009827  +
push esi  +
call sub_1012CBE  +
mov ebx eax +
test ebx ebx +
jge loc_100978A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100978C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100978C  +
push ebx  +
push esi  +
push offset dword_1001B0C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
jmp loc_100978C  +
push ebx  +
call sub_1012CBE  +
mov ebx eax +
test ebx ebx +
jge loc_100978A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100978C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100978C  +
push [ebp+arg_0]  +
push offset dword_1001B0C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
jmp loc_100978C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009822  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009822  +
push offset dword_1001B0C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 8007000Eh +
jnz loc_100985A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009887  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009887  +
push offset dword_1001B1C  +
push 0Ah  +
jmp loc_100987C  +
cmp [ebp+arg_0] 80000110h +
jnz loc_1009887  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009887  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009887  +
push offset dword_1001B1C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov ebx [ebp+arg_0] +
xor edi edi +
cmp ebx edi +
jz loc_1009917  +
cmp [ebp+arg_4] edi +
jz loc_1009917  +
mov [ebp+ms_exc.disabled] edi +
mov [ebp+var_1C] edi +
cmp edi [ebx] +
jnb loc_10098E5  +
lea esi [ebx+edi*4+4] +
mov ecx [esi] +
mov eax [ecx] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax]  +
test eax eax +
jge loc_10098E2  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov ecx [esi] +
test ecx ecx +
jz loc_10098DF  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+14h]  +
and dword ptr [esi] 0 +
inc edi  +
jmp loc_10098AD  +
xor eax eax +
jmp loc_100990B  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
or eax 10000000h +
mov [ebp+var_24] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1009940  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100993B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100993B  +
push offset dword_1001B1C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
xor edi edi +
cmp [ebp+arg_4] edi +
jz loc_1009A10  +
cmp [ebp+arg_8] edi +
jz loc_1009A10  +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_1009A10  +
mov [esi] edi +
push 58h  +
push edi  +
push [ebp+arg_8]  +
call memset  +
add esp 0Ch +
mov eax [ebp+arg_0] +
cmp eax edi +
jnz loc_10099B2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009A34  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009A34  +
push offset dword_1001B1C  +
push 12h  +
jmp loc_1009A29  +
mov [ebp+ms_exc.disabled] edi +
xor ebx ebx +
mov [ebp+var_1C] ebx +
cmp ebx [eax] +
jnb loc_10099DE  +
lea ecx [eax+ebx*4+4] +
cmp [ecx] edi +
jz loc_10099DB  +
mov ecx [ecx] +
mov eax [ecx] +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax+4]  +
cmp [esi] edi +
jnz loc_10099DE  +
mov eax [ebp+arg_0] +
inc ebx  +
jmp loc_10099B7  +
xor eax eax +
jmp loc_1009A04  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
or eax 10000000h +
mov [ebp+var_24] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1009A39  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009A34  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009A34  +
push offset dword_1001B1C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov edi [ebp+arg_0] +
cmp edi ebx +
jz loc_1009ADA  +
cmp [ebp+arg_4] ebx +
jz loc_1009ADA  +
cmp [ebp+arg_8] ebx +
jz loc_1009ADA  +
mov [ebp+ms_exc.disabled] ebx +
xor esi esi +
mov [ebp+var_20] esi +
cmp esi [edi] +
jnb loc_1009A90  +
cmp [edi+esi*4+4] ebx +
jz loc_1009A8D  +
mov ecx [edi+esi*4+4] +
mov eax [ecx] +
lea edx [ebp+var_1C] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax+8]  +
inc esi  +
jmp loc_1009A6D  +
xor eax eax +
mov [ebp+var_28] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1009ACC  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-24h] eax +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
or eax 10000000h +
mov [ebp-28h] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
mov ecx [ebp+arg_C] +
cmp ecx ebx +
jz loc_1009B03  +
mov edx [ebp+var_1C] +
mov [ecx] edx +
jmp loc_1009B03  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009AFE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009AFE  +
push offset dword_1001B1C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
mov eax [ebp+arg_0] +
xor ebx ebx +
cmp eax ebx +
jz loc_1009B98  +
mov edi [eax] +
cmp edi ebx +
jz loc_1009B98  +
mov [ebp+ms_exc.disabled] ebx +
mov [ebp+var_1C] ebx +
cmp ebx [edi] +
jnb loc_1009B57  +
lea esi [edi+ebx*4+4] +
mov ecx [esi] +
test ecx ecx +
jz loc_1009B54  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov ecx [esi] +
test ecx ecx +
jz loc_1009B51  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+14h]  +
and dword ptr [esi] 0 +
inc ebx  +
jmp loc_1009B2E  +
and dword ptr [edi] 0 +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor eax eax +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_1009B8C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
or eax 10000000h +
mov [ebp+var_24] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1009BC1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009BBC  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009BBC  +
push offset dword_1001B1C  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1009C08  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009BFE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009BFE  +
push offset dword_1001B1C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1009F57  +
cmp [ebp+arg_0] 0 +
jnz loc_1009C29  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009BFE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009BFE  +
push offset dword_1001B1C  +
push 0Dh  +
jmp loc_1009BF3  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
push 24h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov esi eax +
push 8  +
pop ebx  +
test esi esi +
jz loc_1009C4E  +
and dword ptr [esi] 0 +
mov ecx ebx +
xor eax eax +
lea edi [esi+4] +
stos   +
jmp loc_1009C50  +
xor esi esi +
test esi esi +
jnz loc_1009C82  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009C78  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009C78  +
push offset dword_1001B1C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 8007000Eh +
jmp loc_1009F54  +
push offset aAppcrash  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009E16  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009CA6  +
mov edi 80000110h +
jmp loc_1009CD3  +
push 0E8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009CBE  +
mov ecx eax +
call sub_1011B77  +
jmp loc_1009CC0  +
xor eax eax +
test eax eax +
jnz loc_1009CCB  +
mov edi 8007000Eh +
jmp loc_1009CD3  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009CE6  +
mov edi 80000110h +
jmp loc_1009D13  +
push 698h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009CFE  +
mov ecx eax +
call sub_101099E  +
jmp loc_1009D00  +
xor eax eax +
test eax eax +
jnz loc_1009D0B  +
mov edi 8007000Eh +
jmp loc_1009D13  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009D26  +
mov edi 80000110h +
jmp loc_1009D53  +
push 2E0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009D3E  +
mov ecx eax +
call sub_100F847  +
jmp loc_1009D40  +
xor eax eax +
test eax eax +
jnz loc_1009D4B  +
mov edi 8007000Eh +
jmp loc_1009D53  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009D66  +
mov edi 80000110h +
jmp loc_1009D93  +
push 66Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009D7E  +
mov ecx eax +
call sub_100E041  +
jmp loc_1009D80  +
xor eax eax +
test eax eax +
jnz loc_1009D8B  +
mov edi 8007000Eh +
jmp loc_1009D93  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009DA6  +
mov edi 80000110h +
jmp loc_1009DD3  +
push 468h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009DBE  +
mov ecx eax +
call sub_100D0A9  +
jmp loc_1009DC0  +
xor eax eax +
test eax eax +
jnz loc_1009DCB  +
mov edi 8007000Eh +
jmp loc_1009DD3  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009DE6  +
mov edi 80000110h +
jmp loc_1009E10  +
push 4  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009DFB  +
mov ecx eax +
call sub_100C6B2  +
jmp loc_1009DFD  +
xor eax eax +
test eax eax +
jnz loc_1009E08  +
mov edi 8007000Eh +
jmp loc_1009E10  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
push offset aBluescreen  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009E66  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009E36  +
mov edi 80000110h +
jmp loc_1009E60  +
push 28h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009E4B  +
mov ecx eax +
call sub_100C625  +
jmp loc_1009E4D  +
xor eax eax +
test eax eax +
jnz loc_1009E58  +
mov edi 8007000Eh +
jmp loc_1009E60  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
push offset aApphangb1  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009E90  +
push offset aApphangxprocb1  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009F10  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009E9D  +
mov edi 80000110h +
jmp loc_1009ECA  +
push 2E0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009EB5  +
mov ecx eax +
call sub_100F847  +
jmp loc_1009EB7  +
xor eax eax +
test eax eax +
jnz loc_1009EC2  +
mov edi 8007000Eh +
jmp loc_1009ECA  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009EDD  +
mov edi 80000110h +
jmp loc_1009F0A  +
push 468h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009EF5  +
mov ecx eax +
call sub_100D0A9  +
jmp loc_1009EF7  +
xor eax eax +
test eax eax +
jnz loc_1009F02  +
mov edi 8007000Eh +
jmp loc_1009F0A  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
xor edi edi +
cmp [esi] ebx +
jb loc_1009F1D  +
mov edi 80000110h +
jmp loc_1009F47  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009F32  +
mov ecx eax +
call sub_100A7F6  +
jmp loc_1009F34  +
xor eax eax +
test eax eax +
jnz loc_1009F3F  +
mov edi 8007000Eh +
jmp loc_1009F47  +
mov ecx [esi] +
mov [esi+ecx*4+4] eax +
inc dword ptr [esi]  +
push edi  +
call sub_1009831  +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ecx] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
and dword ptr [ecx+18h] 0 +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_1009FA3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009F9C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009F9C  +
push offset dword_1001FD0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1009FAB  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_14] +
call sub_101292A  +
lea ecx [ebp+var_20] +
call sub_101292A  +
lea ecx [ebp+var_2C] +
call sub_101292A  +
lea ecx [ebp+var_38] +
call sub_101292A  +
and [ebp+var_4C] 0 +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
xor eax eax +
lea edi [ebp+var_48] +
stos   +
stos   +
stos   +
stos   +
call sub_1013EB8  +
test eax eax +
jz loc_100A026  +
lea ecx [ebp+var_38] +
call sub_101293C  +
lea ecx [ebp+var_2C] +
call sub_101293C  +
lea ecx [ebp+var_20] +
call sub_101293C  +
lea ecx [ebp+var_14] +
call sub_101293C  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
call sub_1014DFD  +
test eax eax +
jnz loc_100A055  +
xor esi esi +
lea ecx [ebp+var_38] +
call sub_101293C  +
lea ecx [ebp+var_2C] +
call sub_101293C  +
lea ecx [ebp+var_20] +
call sub_101293C  +
lea ecx [ebp+var_14] +
call sub_101293C  +
mov eax esi +
jmp loc_100A020  +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_14] +
push 1D52h  +
call sub_101321D  +
test eax eax +
jge loc_100A09D  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100A1F6  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100A1F6  +
push eax  +
push offset dword_1001FD0  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_100A1F6  +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_20] +
push 1D53h  +
call sub_101321D  +
test eax eax +
jge loc_100A0D7  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100A1F6  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100A1F6  +
push eax  +
push offset dword_1001FD0  +
push 1Ah  +
jmp loc_100A08D  +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_2C] +
push 1D54h  +
call sub_101321D  +
test eax eax +
jge loc_100A114  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100A1F6  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100A1F6  +
push eax  +
push offset dword_1001FD0  +
push 1Bh  +
jmp loc_100A08D  +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_38] +
push 1D55h  +
call sub_101321D  +
test eax eax +
jge loc_100A151  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100A1F6  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100A1F6  +
push eax  +
push offset dword_1001FD0  +
push 1Ch  +
jmp loc_100A08D  +
lea ecx [ebp+var_14] +
call sub_1012949  +
lea ecx [ebp+var_20] +
mov [ebp+var_4C] eax +
call sub_1012949  +
lea ecx [ebp+var_2C] +
mov [ebp+var_48] eax +
call sub_1012949  +
lea ecx [ebp+var_38] +
mov [ebp+var_44] eax +
call sub_1012949  +
mov [ebp+var_40] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
push dword ptr [esi+14h]  +
push [ebp+arg_0]  +
call WerpPromtUser  +
mov esi eax +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call WerpGetReportFlags  +
test eax eax +
jl loc_100A1B3  +
mov eax [ebp+var_8] +
or eax 48000000h +
push eax  +
push [ebp+arg_0]  +
call WerpSetReportFlags  +
test esi esi +
jge loc_100A1E2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A1DC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A1DC  +
push esi  +
push offset dword_1001FD0  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
and [ebp+var_4] 0 +
jmp loc_100A1F6  +
push offset aLastpromptedti  +
push offset aSoftwareMicr_1  +
push 80000001h  +
call sub_1011D0E  +
mov esi [ebp+var_4] +
jmp loc_100A031  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
lea ecx [ebp+var_44] +
mov [ebp+hKey] ebx +
call sub_1018914  +
lea ecx [ebp+var_14] +
call sub_101292A  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push offset SubKey  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_100A274  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A26A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A26A  +
push offset dword_1001FD0  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_100A3FA  +
push edi  +
lea edi [esi+4] +
push ebx  +
mov ecx edi +
call sub_1012949  +
push eax  +
xor ebx ebx +
push offset dword_100156C  +
inc ebx  +
push ebx  +
lea ecx [ebp+var_44] +
call sub_1018859  +
mov esi eax +
test esi esi +
jge loc_100A2BE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A3F9  +
test [eax+1Ch] bl +
jz loc_100A3F9  +
push esi  +
push offset dword_1001FD0  +
push 22h  +
jmp loc_100A383  +
push 0  +
push [ebp+hKey]  +
lea ecx [ebp+var_44] +
call sub_10189DE  +
test eax eax +
jl loc_100A39A  +
lea ecx [ebp+var_44] +
call sub_10189A2  +
test eax eax +
jz loc_100A39A  +
push offset Data  +
lea ecx [ebp+var_14] +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jge loc_100A319  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A3F9  +
test [eax+1Ch] bl +
jz loc_100A3F9  +
push esi  +
push offset dword_1001FD0  +
push 23h  +
jmp loc_100A383  +
push offset asc_1002094  +
lea ecx [ebp+var_14] +
call sub_101364A  +
mov esi eax +
test esi esi +
jge loc_100A34F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A3F9  +
test [eax+1Ch] bl +
jz loc_100A3F9  +
push esi  +
push offset dword_1001FD0  +
push 24h  +
jmp loc_100A383  +
lea ecx [ebp+var_44] +
call sub_10189A2  +
push eax  +
lea ecx [ebp+var_14] +
call sub_1012E45  +
mov esi eax +
test esi esi +
jge loc_100A390  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A3F9  +
test [eax+1Ch] bl +
jz loc_100A3F9  +
push esi  +
push offset dword_1001FD0  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100A3F9  +
lea ecx [ebp+var_14] +
call sub_1012949  +
jmp loc_100A39F  +
mov eax offset Data +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
test si si +
jnz loc_100A3A4  +
sub ecx edx +
sar ecx 1 +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
push ebx  +
xor esi esi +
push esi  +
mov ecx edi +
call sub_1012949  +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100A3F9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A3F4  +
test [eax+1Ch] bl +
jz loc_100A3F4  +
push offset dword_1001FD0  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
pop edi  +
cmp [ebp+hKey] 0 +
jz loc_100A40D  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
and [ebp+hKey] 0 +
lea ecx [ebp+var_14] +
call sub_101293C  +
lea ecx [ebp+var_44] +
call sub_1018955  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jz loc_100A504  +
cmp [ebp+arg_4] ebx +
jz loc_100A504  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_100A504  +
push esi  +
push edi  +
push 1  +
push 1  +
push [ebp+arg_4]  +
mov edi offset aSoftwareMicros +
push ebx  +
push offset aApppath  +
push edi  +
mov esi 80000001h +
push esi  +
mov [eax] ebx +
call sub_10157BE  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jge loc_100A494  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A4FD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A4FD  +
push [ebp+arg_4]  +
push offset dword_1001FD0  +
push 2Fh  +
jmp loc_100A4CA  +
push 1  +
push ebx  +
push [ebp+arg_0]  +
push ebx  +
push offset ValueName  +
push edi  +
push esi  +
call sub_10157BE  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jge loc_100A4D7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A4FD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A4FD  +
push [ebp+arg_4]  +
push offset dword_1001FD0  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100A4FD  +
push 1  +
push ebx  +
push ebx  +
push offset aProcid  +
push edi  +
push esi  +
call sub_101571B  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
jmp loc_100A52D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A528  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A528  +
push offset dword_1001FD0  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
lea ecx [ebp+var_30] +
call sub_1018914  +
push 0  +
push offset aLogpath  +
push offset aSoftwareMicros  +
push 1  +
lea ecx [ebp+var_30] +
call sub_1018859  +
mov esi eax +
test esi esi +
jge loc_100A596  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A625  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A625  +
push esi  +
push offset dword_1001FD0  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100A625  +
push 0  +
push 80000001h  +
lea ecx [ebp+var_30] +
call sub_10189DE  +
mov esi eax +
test esi esi +
jge loc_100A5C7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A625  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A625  +
push esi  +
push offset dword_1001FD0  +
push 32h  +
jmp loc_100A586  +
lea ecx [ebp+var_30] +
call sub_10189A2  +
push eax  +
call sub_1013A36  +
test eax eax +
jnz loc_100A612  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A60B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A60B  +
lea ecx [ebp+var_30] +
call sub_10189A2  +
push eax  +
mov eax Reserved +
push offset dword_1001FD0  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
mov esi 80070002h +
jmp loc_100A625  +
lea ecx [ebp+var_30] +
call sub_10189A2  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_1012CBE  +
mov esi eax +
lea ecx [ebp+var_30] +
call sub_1018955  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
lea ecx [ebp+var_C] +
call sub_101292A  +
cmp [ebp+arg_0] 0 +
jnz loc_100A68A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A676  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A676  +
push offset dword_1001FD0  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
lea ecx [ebp+var_C] +
call sub_101293C  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
lea eax [ebp+var_C] +
push eax  +
mov ecx esi +
call sub_100A537  +
mov esi eax +
test esi esi +
jge loc_100A6C1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A67B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A67B  +
push offset dword_1001FD0  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100A67B  +
push 1  +
push 5  +
lea ecx [ebp+var_C] +
call sub_1012949  +
push eax  +
push [ebp+arg_0]  +
call WerReportAddFile  +
mov esi eax +
test esi esi +
jge loc_100A6F7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A67B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A67B  +
push offset dword_1001FD0  +
push 36h  +
jmp loc_100A6B4  +
xor esi esi +
jmp loc_100A67B  +
***
call ds:RegDeleteKeyW  +
test eax eax +
jz loc_100A743  +
cmp eax 2 +
jz loc_100A743  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A73D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A73D  +
push offset dword_1001FD0  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80004005h +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100A781  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A77A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A77A  +
push offset dword_1001FD0  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100A7C6  +
push 0  +
push [ebp+arg_0]  +
push 0  +
call ds:SHCreateDirectoryExW  +
test eax eax +
jz loc_100A7C4  +
cmp eax 0B7h +
jz loc_100A7C4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A7BD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A7BD  +
push offset dword_1001FD0  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80004005h +
jmp loc_100A7C6  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001FE0 +
jz loc_100A7EA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002214 +
call sub_101292A  +
lea ecx [esi+24h] +
call sub_101292A  +
xor eax eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi eax +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
cmp eax esi +
jz loc_100A99A  +
cmp [ebp+arg_8] esi +
jz loc_100A99A  +
mov ebx [ebp+arg_4] +
cmp ebx esi +
jnz loc_100A86D  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_100A85D  +
sub eax edx +
sar eax 1 +
mov ebx eax +
mov eax [ebp+arg_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_100A873  +
sub eax edx +
sar eax 1 +
mov [ebp+arg_4] eax +
cmp ebx esi +
jz loc_100A99A  +
cmp eax esi +
jz loc_100A99A  +
lea ebx [ebx+ebx+2] +
cmp ebx 0FFFFFFFFh +
jb loc_100A8A7  +
push offset dword_1002240  +
jmp loc_100A99F  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push esi  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi [ebp+arg_C] +
mov [esi] eax +
test eax eax +
jnz loc_100A8F9  +
push offset dword_100223C  +
call DbgPrint  +
mov eax [esi] +
pop ecx  +
mov edi 8007000Eh +
test eax eax +
jz loc_100A8F2  +
push eax  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
and dword ptr [esi] 0 +
mov eax edi +
jmp loc_100A9AA  +
push ebx  +
push 0  +
push eax  +
call memset  +
mov esi [esi] +
mov eax edi +
add esp 0Ch +
cmp word ptr [eax] 0 +
jz loc_100A98E  +
jmp loc_100A920  +
cmp [ebp+var_8] 0 +
jz loc_100A91E  +
mov [ebp+var_4] 1 +
inc edi  +
inc edi  +
cmp word ptr [edi] 20h +
jz loc_100A911  +
xor eax eax +
cmp [ebp+var_4] eax +
jz loc_100A93D  +
cmp [edi] ax +
jz loc_100A93D  +
push 20h  +
pop ecx  +
mov [esi] cx +
inc esi  +
inc esi  +
mov [ebp+var_4] eax +
mov ebx [ebp+arg_4] +
push ebx  +
push [ebp+arg_8]  +
push edi  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100A972  +
lea eax [edi+ebx*2] +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_100A962  +
cmp cx 20h +
jnz loc_100A972  +
cmp edi [ebp+arg_0] +
jz loc_100A970  +
jbe loc_100A972  +
cmp word ptr [edi-2] 0 +
jnz loc_100A972  +
mov edi eax +
movzx eax word ptr [edi] +
test ax ax +
jz loc_100A98E  +
mov [esi] ax +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
mov [ebp+var_8] 1 +
jnz loc_100A920  +
xor eax eax +
mov [esi] ax +
xor edi edi +
jmp loc_100A8F2  +
push offset dword_100222C  +
call DbgPrint  +
pop ecx  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100A9CA  +
mov eax 80070057h +
jmp loc_100A9E5  +
push dword ptr [esi]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
and dword ptr [esi] 0 +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+18h] 0 +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_1002214 +
call sub_101293C  +
lea ecx [esi+4] +
call sub_101293C  +
mov dword ptr [esi] offset off_1001FE0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp-0Ch] +
call sub_101292A  +
mov edi [ebp+8] +
test edi edi +
jnz loc_100AA71  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AA5B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AA5B  +
push offset dword_1001FD0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 80070057h +
lea ecx [ebp-0Ch] +
call sub_101293C  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov ebx offset aAppcrash +
push ebx  +
push dword ptr [edi]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AACB  +
push offset aApphangb1  +
push dword ptr [edi]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AACB  +
push offset aApphangxprocb1  +
push dword ptr [edi]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AACB  +
mov ebx 80004001h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AA60  +
test byte ptr [eax+1Ch] 4 +
jz loc_100AA60  +
push offset dword_1001FD0  +
push 0Bh  +
jmp loc_100AC21  +
cmp dword ptr [edi+58h] 0 +
jnz loc_100AAFC  +
mov ebx 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AA60  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AA60  +
push offset dword_1001FD0  +
push 0Ch  +
jmp loc_100AC21  +
mov eax [ebp+10h] +
mov [esi+18h] eax +
push ebx  +
push dword ptr [edi]  +
call _wcsicmp  +
mov edi [edi+58h] +
pop ecx  +
test eax eax +
mov eax [edi] +
pop ecx  +
jnz loc_100AB1A  +
mov ecx [edi+14h] +
jmp loc_100AB1D  +
mov ecx [edi+4] +
mov [esi+10h] ecx +
test eax eax +
jz loc_100ABFB  +
test ecx ecx +
jz loc_100ABFB  +
lea edi [esi+4] +
push eax  +
mov ecx edi +
call sub_1012CBE  +
mov ebx eax +
test ebx ebx +
jge loc_100AB73  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AA60  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AA60  +
push ebx  +
push offset dword_1001FD0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100AA60  +
***
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
lea eax [esi+24h] +
push eax  +
mov ecx esi +
call sub_100A428  +
test eax eax +
jl loc_100ABF4  +
push dword ptr [esi+10h]  +
xor ebx ebx +
inc ebx  +
mov [esi+1Ch] ebx +
call ds:__imp_GetProcessId  +
mov [ebp+8] eax +
test eax eax +
jnz loc_100ABCD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100ABC3  +
test [eax+1Ch] bl +
jz loc_100ABC3  +
push offset dword_1001FD0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 80004005h +
jmp loc_100AA60  +
***
lea ecx [ebp-0Ch] +
call sub_1012949  +
push eax  +
mov ecx edi +
call sub_1012949  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100ABF4  +
mov eax [ebp+8] +
cmp eax [ebp+10h] +
jnz loc_100ABF4  +
mov [esi+20h] ebx +
xor ebx ebx +
jmp loc_100AA60  +
***
mov ebx 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AA60  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AA60  +
push offset dword_1001FD0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100AA60  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor ebx ebx +
lea ecx [ebp+var_48] +
mov [ebp+var_C] edi +
mov [ebp+hKey] ebx +
call sub_1018914  +
lea ecx [ebp+var_18] +
mov [ebp+lpData] ebx +
call sub_101292A  +
lea eax [ebp+hKey] +
push eax  +
push 0F003Fh  +
push ebx  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi ebx +
jz loc_100ACB8  +
cmp esi 2 +
jz loc_100AE16  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100ACAB  +
test byte ptr [eax+1Ch] 1 +
jz loc_100ACAB  +
push offset dword_1001FD0  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
push esi  +
call sub_100629E  +
mov esi eax +
jmp loc_100AE18  +
add edi 4 +
push ebx  +
mov ecx edi +
call sub_1012949  +
push eax  +
xor ebx ebx +
push offset dword_100156C  +
inc ebx  +
push ebx  +
lea ecx [ebp+var_48] +
call sub_1018859  +
mov esi eax +
test esi esi +
jge loc_100AD0C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AE18  +
test [eax+1Ch] bl +
jz loc_100AE18  +
push esi  +
push offset dword_1001FD0  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100AE18  +
push 0  +
push [ebp+hKey]  +
lea ecx [ebp+var_48] +
call sub_10189DE  +
mov esi eax +
test esi esi +
jge loc_100AD42  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AE18  +
test [eax+1Ch] bl +
jz loc_100AE18  +
push esi  +
push offset dword_1001FD0  +
push 3Ah  +
jmp loc_100ACFC  +
lea ecx [ebp+var_48] +
call sub_10189A2  +
test eax eax +
jz loc_100AE16  +
lea eax [ebp+lpData] +
push eax  +
push offset Data  +
push 0  +
lea ecx [ebp+var_48] +
call sub_10189A2  +
mov ecx [ebp+var_C] +
push eax  +
call sub_100A82B  +
mov esi eax +
test esi esi +
jge loc_100AD9A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AE18  +
test [eax+1Ch] bl +
jz loc_100AE18  +
push esi  +
push offset dword_1001FD0  +
push 3Bh  +
jmp loc_100ACFC  +
mov esi [ebp+lpData] +
test esi esi +
jz loc_100AE05  +
cmp word ptr [esi] 0 +
jz loc_100AE05  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100ADAC  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push ebx  +
push 0  +
mov ecx edi +
call sub_1012949  +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100AE16  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100ADFE  +
test [ecx+1Ch] bl +
jz loc_100ADFE  +
push eax  +
push offset dword_1001FD0  +
push 3Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
mov esi 80004005h +
jmp loc_100AE1C  +
mov ecx edi +
call sub_1012949  +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
xor esi esi +
test esi esi +
jge loc_100AE37  +
cmp [ebp+hKey] 0 +
jz loc_100AE4A  +
mov ecx [ebp+var_C] +
add ecx 4 +
call sub_1012949  +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp [ebp+hKey] 0 +
jz loc_100AE4A  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
and [ebp+hKey] 0 +
cmp [ebp+lpData] 0 +
jz loc_100AE5C  +
mov ecx [ebp+var_C] +
lea eax [ebp+lpData] +
push eax  +
call sub_100A9B6  +
lea ecx [ebp+var_18] +
call sub_101293C  +
lea ecx [ebp+var_48] +
call sub_1018955  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_100AC36  +
mov edi offset dword_1001FD0 +
mov esi offset Reserved +
test eax eax +
jge loc_100AEAF  +
mov eax Reserved +
cmp eax esi +
jz loc_100AEAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100AEAF  +
push edi  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ecx ebx +
call sub_100A700  +
mov ebx eax +
test ebx ebx +
jge loc_100AEDD  +
mov eax Reserved +
cmp eax esi +
jz loc_100AED9  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AED9  +
push edi  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax ebx +
jmp loc_100AEDF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A9EF  +
test byte ptr [ebp+8] 1 +
jz loc_100AF02  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_100B0FC  +
cmp [ebp+arg_0] edi +
jz loc_100B0FC  +
push esi  +
mov esi 208h +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov dword ptr [ebp+var_4] eax +
cmp eax edi +
jnz loc_100AF70  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AF64  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AF64  +
push offset dword_1001FD0  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov [ebp+arg_4] 8007000Eh +
jmp loc_100B0F6  +
push eax  +
push edi  +
push edi  +
push 1Ch  +
push edi  +
call ds:SHGetFolderPathW  +
cmp eax edi +
mov [ebp+arg_4] eax +
jge loc_100AFA9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B0ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B0ED  +
push offset dword_1001FD0  +
push 41h  +
jmp loc_100B0DC  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebx] eax +
cmp eax edi +
jnz loc_100AFDC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B0A0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B0A0  +
push offset dword_1001FD0  +
push 42h  +
jmp loc_100B095  +
cmp [ebp+arg_8] edi +
jz loc_100B012  +
push [ebp+arg_8]  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetTickCount  +
push eax  +
mov edi offset aMicrosoftWindo +
push edi  +
push dword ptr [ebp+var_4]  +
mov esi 104h +
push offset aSSUU_etl_D  +
push esi  +
push dword ptr [ebx]  +
call sub_100937B  +
add esp 20h +
jmp loc_100B03E  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetTickCount  +
push eax  +
mov edi offset aMicrosoftWindo +
push edi  +
push dword ptr [ebp+var_4]  +
mov esi 104h +
push offset aSSUU_etl  +
push esi  +
push dword ptr [ebx]  +
call sub_100937B  +
add esp 1Ch +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100B068  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B0ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B0ED  +
push offset dword_1001FD0  +
push 43h  +
jmp loc_100B0DC  +
push 208h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jnz loc_100B0A9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B0A0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B0A0  +
push offset dword_1001FD0  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov [ebp+arg_4] 8007000Eh +
jmp loc_100B0ED  +
push edi  +
push dword ptr [ebp+var_4]  +
push offset aSS  +
push esi  +
push eax  +
call sub_100937B  +
add esp 14h +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100B0E9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B0ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B0ED  +
push offset dword_1001FD0  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100B0ED  +
and [ebp+arg_4] 0 +
push dword ptr [ebp+var_4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_100B125  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B120  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B120  +
push offset dword_1001FD0  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push 208h  +
mov esi ecx +
xor ebx ebx +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_100B178  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B16E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B16E  +
push offset dword_1001FD0  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 8007000Eh +
jmp loc_100B2A0  +
push dword ptr [esi+10h]  +
call ds:__imp_GetProcessId  +
test eax eax +
jnz loc_100B1AB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B285  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B285  +
push offset dword_1001FD0  +
push 49h  +
jmp loc_100B27A  +
push eax  +
push offset aFdr_flush_mess  +
push offset aSD  +
push 104h  +
push edi  +
call sub_100937B  +
mov esi eax +
add esp 14h +
test esi esi +
jge loc_100B1FB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B28E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B28E  +
push offset dword_1001FD0  +
push 4Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100B28E  +
push edi  +
push 0  +
push 100002h  +
call ds:OpenEventW  +
mov ebx eax +
test ebx ebx +
jnz loc_100B22A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B285  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B285  +
push offset dword_1001FD0  +
push 4Bh  +
jmp loc_100B27A  +
push ebx  +
call ds:SetEvent  +
test eax eax +
jnz loc_100B250  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B285  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B285  +
push offset dword_1001FD0  +
push 4Ch  +
jmp loc_100B27A  +
push 1388h  +
push ebx  +
call ds:WaitForSingleObject  +
cmp eax 0FFFFFFFFh +
jnz loc_100B28C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B285  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B285  +
push offset dword_1001FD0  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_100B28E  +
xor esi esi +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
test ebx ebx +
jz loc_100B2A0  +
push ebx  +
call ds:__imp_CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
push edi  +
mov edi ecx +
mov [ebp+var_10] edi +
mov [ebp+hKey] ebx +
mov [ebp+dwDisposition] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
cmp [ebp+lpData] ebx +
jnz loc_100B2FB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B2F1  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B2F1  +
push offset dword_1001FD0  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100B4EC  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 2  +
push 1  +
push ebx  +
push ebx  +
push offset aSoftwareMicros  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_100B34C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B342  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B342  +
push offset dword_1001FD0  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80004005h +
jmp loc_100B4DC  +
mov eax [ebp+lpData] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100B352  +
push esi  +
mov esi ds:RegSetValueExW +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push 1  +
push ebx  +
push offset ValueName  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_100B39B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B3E7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B3E7  +
push offset dword_1001FD0  +
push 29h  +
jmp loc_100B3DC  +
add edi 4 +
mov ecx edi +
call sub_1012951  +
lea eax [eax+eax+2] +
push eax  +
mov ecx edi +
call sub_1012949  +
push eax  +
push 1  +
push ebx  +
push offset aApppath  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_100B3F1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B3E7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B3E7  +
push offset dword_1001FD0  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80004005h +
jmp loc_100B4DB  +
mov ecx [ebp+var_10] +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call sub_100AF0E  +
mov edi eax +
cmp edi ebx +
jge loc_100B42E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B4BF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B4BF  +
push offset dword_1001FD0  +
push 2Bh  +
jmp loc_100B4B0  +
mov eax [ebp+var_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100B434  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push [ebp+var_8]  +
push 1  +
push ebx  +
push offset aLogpath  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_100B486  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B47F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B47F  +
push offset dword_1001FD0  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80004005h +
jmp loc_100B4BF  +
push [ebp+var_C]  +
mov ecx [ebp+var_10] +
call sub_100A74B  +
mov edi eax +
cmp edi ebx +
jge loc_100B4BD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B4BF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B4BF  +
push offset dword_1001FD0  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100B4BF  +
xor edi edi +
cmp [ebp+var_C] ebx +
jz loc_100B4CD  +
push [ebp+var_C]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+var_8] ebx +
jz loc_100B4DB  +
push [ebp+var_8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
cmp [ebp+hKey] ebx +
jz loc_100B4EA  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 2  +
push offset aLastpromptedti  +
push offset aSoftwareMicr_1  +
push 80000001h  +
mov edi ecx +
call sub_1011C79  +
mov esi eax +
test esi esi +
jge loc_100B548  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B5C1  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B5C1  +
push offset dword_1001FD0  +
push 1Eh  +
jmp loc_100B5AD  +
cmp [ebp+var_4] 0 +
jz loc_100B5BE  +
push [ebp+arg_4]  +
mov ecx edi +
call sub_1009FB4  +
test eax eax +
jz loc_100B5BE  +
push [ebp+lpData]  +
mov ecx edi +
call sub_100B2AB  +
mov esi eax +
test esi esi +
jge loc_100B587  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B5C1  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B5C1  +
push offset dword_1001FD0  +
push 1Fh  +
jmp loc_100B5AD  +
mov ecx edi +
call sub_100A203  +
mov esi eax +
test esi esi +
jge loc_100B5BA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B5C1  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B5C1  +
push offset dword_1001FD0  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100B5C1  +
xor esi esi +
jmp loc_100B5C1  +
xor esi esi +
inc esi  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp-10h] +
mov [ebp-4] ebx +
call sub_101292A  +
mov edi [ebp+10h] +
xor ecx ecx +
cmp edi ecx +
jnz loc_100B627  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B613  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B613  +
push offset dword_1001FD0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
lea ecx [ebp-10h] +
call sub_101293C  +
mov eax esi +
jmp loc_100B892  +
mov esi [ebp+0Ch] +
mov [edi] ecx +
cmp esi ecx +
jnz loc_100B637  +
mov esi 80004001h +
jmp loc_100B618  +
***
mov eax [esi+4] +
cmp eax 0Ch +
jz loc_100B648  +
cmp eax 6 +
jnz loc_100B6D5  +
cmp [ebx+20h] ecx +
jz loc_100B6D5  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [esi]  +
mov [ebp+0Ch] ecx +
call WerpGetReportFlags  +
mov edi eax +
test edi edi +
jge loc_100B697  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B879  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B879  +
push edi  +
push offset dword_1001FD0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100B879  +
or dword ptr [ebp+0Ch] 800h +
push dword ptr [ebp+0Ch]  +
push dword ptr [esi]  +
call WerpSetReportFlags  +
mov edi eax +
test edi edi +
jge loc_100B6D2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B879  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B879  +
push edi  +
push offset dword_1001FD0  +
push 13h  +
jmp loc_100B687  +
***
mov edi [ebp+10h] +
cmp dword ptr [esi+4] 9 +
jnz loc_100B6FF  +
cmp dword ptr [esi+0Ch] 2 +
jnz loc_100B6FF  +
push dword ptr [esi+10h]  +
call ds:IsWindow  +
test eax eax +
jz loc_100B6FF  +
mov eax [esi+10h] +
mov [ebx+14h] eax +
mov dword ptr [edi] 1 +
jmp loc_100B877  +
cmp dword ptr [esi+4] 1 +
jnz loc_100B885  +
cmp dword ptr [esi] 0 +
jz loc_100B885  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_100B885  +
cmp dword ptr [esi+10h] 0 +
jz loc_100B885  +
push offset Data  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B885  +
push dword ptr [esi+10h]  +
lea ecx [ebp-10h] +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jge loc_100B77E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B879  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B879  +
push offset dword_1001FD0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100B879  +
cmp dword ptr [ebx+1Ch] 0 +
jnz loc_100B7C3  +
push dword ptr [esi]  +
lea ecx [ebp-10h] +
call sub_1012949  +
push eax  +
mov ecx ebx +
call sub_100B4F7  +
mov edi eax +
test edi edi +
jge loc_100B86E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B879  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B879  +
push offset dword_1001FD0  +
push 15h  +
jmp loc_100B76E  +
***
cmp dword ptr [ebx+20h] 0 +
jz loc_100B86E  +
lea ecx [ebp-10h] +
call sub_1012949  +
push eax  +
lea ecx [ebx+24h] +
call sub_1012949  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B86E  +
mov ecx ebx +
call sub_100B130  +
mov ebx offset Reserved +
test eax eax +
jge loc_100B816  +
mov eax Reserved +
cmp eax ebx +
jz loc_100B845  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B845  +
push offset dword_1001FD0  +
push 16h  +
jmp loc_100B83A  +
push dword ptr [esi]  +
mov ecx [ebp-4] +
call sub_100A639  +
test eax eax +
jge loc_100B845  +
mov eax Reserved +
cmp eax ebx +
jz loc_100B845  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B845  +
push offset dword_1001FD0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ecx [ebp-4] +
call sub_100AE78  +
mov edi eax +
test edi edi +
jge loc_100B86E  +
mov eax Reserved +
cmp eax ebx +
jz loc_100B879  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B879  +
push offset dword_1001FD0  +
push 18h  +
jmp loc_100B76E  +
***
mov eax [ebp+10h] +
mov dword ptr [eax] 1 +
xor edi edi +
lea ecx [ebp-10h] +
call sub_101293C  +
mov eax edi +
jmp loc_100B892  +
lea ecx [ebp-10h] +
call sub_101293C  +
mov eax 80004001h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
test eax eax +
jnz loc_100B8D6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B8CF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B8CF  +
push offset dword_1002300  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
jmp loc_100B93D  +
mov eax [eax] +
mov edx offset aBluescreen +
mov si [eax] +
cmp si [edx] +
jnz loc_100B903  +
test si si +
jz loc_100B8FF  +
mov si [eax+2] +
cmp si [edx+2] +
jnz loc_100B903  +
add eax 4 +
add edx 4 +
test si si +
jnz loc_100B8DD  +
xor eax eax +
jmp loc_100B908  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100B937  +
mov esi 80004001h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B93D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B93D  +
push offset dword_1002300  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100B93D  +
and dword ptr [ecx+24h] 0 +
xor esi esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_124] 0 +
push 118h  +
lea eax [ebp+VersionInformation.dwMajorVersion] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_100B9EB  +
cmp [ebp+var_6] 1 +
jnz loc_100B9EB  +
lea eax [ebp+var_124] +
push eax  +
push 5  +
push offset aLastpromptedti  +
push offset aSoftwareMicr_2  +
push 80000002h  +
call sub_1011C79  +
test eax eax +
jge loc_100B9EB  +
and [ebp+var_124] 0 +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100B9EB  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100B9EB  +
push eax  +
push offset dword_1002300  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_124] +
xor ecx ebp +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
and [ebp+var_6C] 0 +
push 64h  +
lea eax [ebp+var_68] +
push 0  +
push eax  +
call memset  +
and [ebp+var_4] 0 +
add esp 0Ch +
lea eax [ebp+var_4] +
push eax  +
push 68h  +
lea eax [ebp+var_6C] +
push eax  +
push 33h  +
call ds:NtQuerySystemInformation  +
test eax eax +
jl loc_100BA42  +
cmp [ebp+var_4] 0 +
jnz loc_100BA42  +
xor eax eax +
leave   +
retn   +
xor eax eax +
inc eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_10] +
call sub_101292A  +
lea ecx [ebp+var_1C] +
call sub_101292A  +
lea ecx [ebp+var_28] +
call sub_101292A  +
lea ecx [ebp+var_34] +
call sub_101292A  +
xor eax eax +
xor esi esi +
mov [ebp+var_48] esi +
lea edi [ebp+var_44] +
stos   +
stos   +
stos   +
mov [ebp+var_4] esi +
stos   +
call sub_1013EB8  +
test eax eax +
jz loc_100BABC  +
lea ecx [ebp+var_34] +
call sub_101293C  +
lea ecx [ebp+var_28] +
call sub_101293C  +
lea ecx [ebp+var_1C] +
call sub_101293C  +
lea ecx [ebp+var_10] +
call sub_101293C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
call sub_1014DFD  +
test eax eax +
jnz loc_100BAE9  +
lea ecx [ebp+var_34] +
call sub_101293C  +
lea ecx [ebp+var_28] +
call sub_101293C  +
lea ecx [ebp+var_1C] +
call sub_101293C  +
lea ecx [ebp+var_10] +
call sub_101293C  +
mov eax esi +
jmp loc_100BAB5  +
mov esi 1000000h +
push esi  +
push 1D5Dh  +
lea ecx [ebp+var_10] +
call sub_101321D  +
test eax eax +
jge loc_100BB34  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100BC63  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BC63  +
push eax  +
push offset dword_1002300  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_100BC63  +
push esi  +
push 1D5Eh  +
lea ecx [ebp+var_1C] +
call sub_101321D  +
test eax eax +
jge loc_100BB6C  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100BC63  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BC63  +
push eax  +
push offset dword_1002300  +
push 17h  +
jmp loc_100BB24  +
push esi  +
push 1D5Fh  +
lea ecx [ebp+var_28] +
call sub_101321D  +
test eax eax +
jge loc_100BBA4  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100BC63  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BC63  +
push eax  +
push offset dword_1002300  +
push 18h  +
jmp loc_100BB24  +
push esi  +
push 1D60h  +
lea ecx [ebp+var_34] +
call sub_101321D  +
test eax eax +
jge loc_100BBDF  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100BC63  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BC63  +
push eax  +
push offset dword_1002300  +
push 19h  +
jmp loc_100BB24  +
lea ecx [ebp+var_10] +
call sub_1012949  +
lea ecx [ebp+var_1C] +
mov [ebp+var_48] eax +
call sub_1012949  +
lea ecx [ebp+var_28] +
mov [ebp+var_44] eax +
call sub_1012949  +
lea ecx [ebp+var_34] +
mov [ebp+var_40] eax +
call sub_1012949  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push dword ptr [ebx+4]  +
push [ebp+arg_0]  +
call WerpPromtUser  +
test eax eax +
jge loc_100BC4F  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100BC49  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BC49  +
push eax  +
push offset dword_1002300  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
and [ebp+var_4] 0 +
jmp loc_100BC63  +
push offset aLastpromptedti  +
push offset aSoftwareMicr_2  +
push 80000002h  +
call sub_1011D0E  +
mov esi [ebp+var_4] +
jmp loc_100BAC5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_100BCA7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BCA0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BCA0  +
push offset dword_1002300  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100BCAF  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push esi  +
mov esi [ecx+0Ch] +
push edi  +
xor edx edx +
xor edi edi +
test esi esi +
jz loc_100BCE9  +
push ebx  +
mov ebx [ecx+14h] +
cmp ebx [ebp+arg_0] +
ja loc_100BCDC  +
mov edx [ecx+10h] +
mov eax esi +
mov edi ebx +
pop ebx  +
jmp loc_100BCE9  +
test eax eax +
jz loc_100BCEE  +
mov edx eax +
mov eax [eax+0Ch] +
inc edi  +
cmp edi [ebp+arg_0] +
jb loc_100BCDF  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_100BCF7  +
mov [esi] edx +
test eax eax +
jz loc_100BD04  +
mov [ecx+0Ch] eax +
mov [ecx+10h] edx +
mov [ecx+14h] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and [ebp+var_24] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 7  +
pop ecx  +
push offset aBucket  +
xor eax eax +
mov ebx 80004005h +
lea edi [ebp+var_20] +
push esi  +
mov [ebp+var_4] ebx +
stos   +
call sub_101288A  +
mov edi eax +
test edi edi +
jnz loc_100BD71  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BE33  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BE33  +
push ebx  +
push offset dword_1002300  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_100BE28  +
mov eax esi +
add edi 0Eh +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100BD79  +
sub eax ecx +
sar eax 1 +
lea eax [esi+eax*2] +
cmp edi eax +
jb loc_100BDBF  +
mov [ebp+var_4] ebx +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BE33  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BE33  +
push offset dword_1002300  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100BE33  +
mov eax Reserved +
mov esi offset Reserved +
mov ebx offset dword_1002300 +
cmp eax esi +
jz loc_100BDE7  +
test byte ptr [eax+1Ch] 4 +
jz loc_100BDE7  +
push edi  +
push ebx  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
push edi  +
lea eax [ebp+var_1C] +
push eax  +
mov [ebp+var_24] 1 +
call ds:RtlInitUnicodeString  +
push 20h  +
lea eax [ebp+var_24] +
push eax  +
push 5Ch  +
call ds:NtSetSystemInformation  +
test eax eax +
jge loc_100BE2F  +
mov [ebp+var_4] eax +
mov ecx Reserved +
cmp ecx esi +
jz loc_100BE33  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BE33  +
push eax  +
push ebx  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_100BE33  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_100BE56  +
mov eax 80070057h +
jmp loc_100BE6F  +
push 0  +
push [ebp+arg_0]  +
call sub_100BCB8  +
test eax eax +
jnz loc_100BE6B  +
mov eax 8002000Bh +
jmp loc_100BE6F  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 10h  +
mov edi ecx +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_100BE99  +
mov ecx esi +
call sub_101292A  +
jmp loc_100BE9B  +
xor esi esi +
test esi esi +
jnz loc_100BEA6  +
mov eax 8007000Eh +
jmp loc_100BEE6  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1013884  +
mov eax [ebp+arg_0] +
and dword ptr [esi+0Ch] 0 +
test eax eax +
jnz loc_100BEC4  +
mov ecx [edi] +
mov [esi+0Ch] ecx +
mov [edi] esi +
jmp loc_100BECD  +
mov ecx [eax+0Ch] +
mov [esi+0Ch] ecx +
mov [eax+0Ch] esi +
cmp eax [edi+4] +
jnz loc_100BED5  +
mov [edi+4] esi +
and dword ptr [edi+0Ch] 0 +
and dword ptr [edi+10h] 0 +
or dword ptr [edi+14h] 0FFFFFFFFh +
inc dword ptr [edi+8]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101293C  +
test [ebp+arg_0] 1 +
jz loc_100BF0B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
and [ebp+var_30] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
push 7  +
pop ecx  +
push [ebp+arg_0]  +
xor eax eax +
lea edi [ebp+var_2C] +
stos   +
mov ecx [ebp+var_C] +
mov byte ptr [ebp+var_1] 0 +
call sub_100BA4C  +
test eax eax +
jnz loc_100BF74  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BF6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_100BF6A  +
push offset dword_1002300  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 80004005h +
jmp loc_100C0EA  +
lea eax [ebp+var_1] +
push eax  +
push 0  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 14h  +
call ds:RtlAdjustPrivilege  +
mov esi 0C0000000h +
mov edi eax +
and eax esi +
cmp eax esi +
jnz loc_100BFC4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BFB7  +
test [eax+1Ch] bl +
jz loc_100BFB7  +
push edi  +
push offset dword_1002300  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
or edi 10000000h +
mov ebx edi +
jmp loc_100C100  +
mov edi ds:NtSetSystemInformation +
push 20h  +
lea eax [ebp+var_30] +
push eax  +
push 5Ch  +
mov [ebp+var_30] ebx +
call edi  +
mov ebx eax +
and eax esi +
cmp eax esi +
jnz loc_100BFFB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C035  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C035  +
push ebx  +
push offset dword_1002300  +
push 1Dh  +
jmp loc_100C02A  +
mov eax [ebp+var_C] +
push 4  +
add eax 20h +
push eax  +
push 33h  +
call edi  +
mov ebx eax +
and eax esi +
cmp eax esi +
jnz loc_100C040  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C035  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C035  +
push ebx  +
push offset dword_1002300  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
or ebx 10000000h +
jmp loc_100C0EA  +
mov ebx [ebp+var_C] +
and [ebp+var_8] 0 +
cmp dword ptr [ebx+10h] 0 +
jbe loc_100C0E1  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_8]  +
lea ecx [ebx+8] +
call sub_100BE42  +
test eax eax +
jl loc_100C0D2  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100C0D2  +
call sub_1012B64  +
test eax eax +
jz loc_100C0D2  +
mov ecx [ebp+arg_0] +
call sub_1012949  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call ds:RtlInitUnicodeString  +
push 8  +
lea eax [ebp+var_10] +
push eax  +
push 28h  +
call edi  +
mov ecx eax +
and ecx esi +
cmp ecx esi +
jnz loc_100C0D2  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100C0D2  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C0D2  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_1012949  +
push eax  +
mov eax Reserved +
push offset dword_1002300  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebx+10h] +
jb loc_100C051  +
mov dword ptr [ebx+24h] 1 +
xor ebx ebx +
cmp byte ptr [ebp+var_1] 0 +
jz loc_100C100  +
lea eax [ebp+var_1] +
push eax  +
push 0  +
push 0  +
push 14h  +
call ds:RtlAdjustPrivilege  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call sub_100BE79  +
mov [ebp+var_1C] eax +
jmp loc_100C14C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0E06D7363h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 80004005h +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
cmp ecx [esi] +
jnz loc_100C177  +
mov eax [ecx+0Ch] +
mov [esi] eax +
mov eax [ebp+arg_4] +
cmp ecx [esi+4] +
jnz loc_100C182  +
mov [esi+4] eax +
test eax eax +
jz loc_100C18C  +
mov edx [ecx+0Ch] +
mov [eax+0Ch] edx +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
or dword ptr [esi+14h] 0FFFFFFFFh +
test ecx ecx +
jz loc_100C1A3  +
push 1  +
call sub_100BEF1  +
dec dword ptr [esi+8]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov [ebp+var_4] ecx +
push esi  +
lea ecx [ebp+var_10] +
call sub_101292A  +
lea ecx [ebp+var_1C] +
call sub_101292A  +
cmp [ebp+arg_0] 0 +
jnz loc_100C214  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C1F8  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C1F8  +
push offset dword_1002300  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
lea ecx [ebp+var_1C] +
call sub_101293C  +
lea ecx [ebp+var_10] +
call sub_101293C  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_1012CBE  +
test eax eax +
jl loc_100C2B4  +
push offset asc_10023B4  +
lea ecx [ebp+var_10] +
call sub_1012E45  +
test eax eax +
jl loc_100C2B4  +
push 0  +
push 7Ch  +
lea ecx [ebp+var_10] +
call sub_10128B7  +
test eax eax +
jl loc_100C2B4  +
lea ecx [ebp+var_10] +
call sub_1012949  +
mov esi eax +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C255  +
sub eax edx +
sar eax 1 +
push edi  +
mov edi eax +
jz loc_100C2B1  +
mov eax [ebp+var_4] +
add eax 8 +
mov [ebp+arg_0] eax +
push esi  +
lea ecx [ebp+var_1C] +
call sub_1012CBE  +
push 0  +
lea ecx [ebp+var_1C] +
call sub_101332A  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_1C] +
push eax  +
call sub_100C10E  +
lea esi [esi+edi*2+2] +
cmp word ptr [esi] 0 +
jz loc_100C2B1  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C29F  +
sub eax edx +
sar eax 1 +
mov edi eax +
jnz loc_100C271  +
xor eax eax +
pop edi  +
mov esi eax +
jmp loc_100C1FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_C] +
call sub_101292A  +
lea ecx [ebp+var_18] +
call sub_101292A  +
lea eax [ebp+var_18] +
xor ecx ecx +
mov [ebp+var_3C] eax +
xor eax eax +
mov [ebp+var_40] offset aVerifydrivers +
mov [ebp+var_38] ecx +
mov [ebp+var_34] offset loc_10186AF +
lea edi [ebp+var_30] +
stos   +
lea esi [ebx+20h] +
lea edi [ebp+var_1C] +
mov [ebp+var_2C] offset aVerifyflags +
mov [ebp+var_28] esi +
mov [ebp+var_24] 4 +
mov [ebp+var_20] offset loc_1018656 +
mov [esi] ecx +
stos   +
cmp [ebp+arg_0] ecx +
jnz loc_100C364  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C346  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C346  +
push offset dword_1002300  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80070057h +
lea ecx [ebp+var_18] +
call sub_101293C  +
lea ecx [ebp+var_C] +
call sub_101293C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push [ebp+arg_0]  +
lea ecx [ebp+var_C] +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jge loc_100C39C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C34B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C34B  +
push edi  +
push offset dword_1002300  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100C34B  +
push 0  +
push 0  +
push offset asc_10023BC  +
push offset asc_10023B8  +
lea ecx [ebp+var_C] +
call sub_1013748  +
push 2  +
lea eax [ebp+var_40] +
push eax  +
lea ecx [ebp+var_C] +
call sub_1012951  +
push eax  +
lea ecx [ebp+var_C] +
call sub_1012949  +
push eax  +
call sub_1018732  +
lea ecx [ebp+var_18] +
call sub_1012B76  +
test eax eax +
jnz loc_100C42C  +
mov eax [esi] +
test eax eax +
jz loc_100C42C  +
and eax 0BFBh +
lea ecx [ebp+var_18] +
mov [esi] eax +
call sub_1012949  +
push eax  +
mov ecx ebx +
call sub_100C1B2  +
mov edi eax +
test edi edi +
jge loc_100C425  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C34B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C34B  +
push edi  +
push offset dword_1002300  +
push 15h  +
jmp loc_100C38F  +
xor edi edi +
jmp loc_100C34B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C460  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C460  +
push dword ptr [esi]  +
lea ecx [ebp+var_18] +
call sub_1012949  +
push eax  +
mov eax Reserved +
push offset dword_1002300  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10049DA  +
mov edi 80004005h +
jmp loc_100C34B  +
***
mov eax [ecx] +
test eax eax +
jz loc_100C47E  +
push 0  +
push eax  +
call sub_100C163  +
retn   +
mov eax 8002000Bh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_100C5F0  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_100C5F0  +
mov edi [ebp+10h] +
test edi edi +
jz loc_100C5F0  +
and dword ptr [edi] 0 +
mov eax [esi+4] +
cmp eax 3 +
jnz loc_100C508  +
cmp dword ptr [ebx+24h] 1 +
jnz loc_100C508  +
push dword ptr [esi+0Ch]  +
call sub_100BD0F  +
mov edi eax +
test edi edi +
jge loc_100C5EC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C5EC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C5EC  +
push edi  +
push offset dword_1002300  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100C5EC  +
cmp eax 9 +
jnz loc_100C533  +
cmp dword ptr [esi+0Ch] 2 +
jnz loc_100C533  +
push dword ptr [esi+10h]  +
call ds:IsWindow  +
test eax eax +
jz loc_100C533  +
mov eax [esi+10h] +
mov [ebx+4] eax +
mov dword ptr [edi] 1 +
xor edi edi +
jmp loc_100C5EC  +
cmp dword ptr [esi+4] 1 +
jnz loc_100C5E7  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_100C5E7  +
cmp dword ptr [esi+10h] 0 +
jz loc_100C5E7  +
push offset aDriververifier  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100C5E7  +
mov ecx ebx +
mov dword ptr [edi] 1 +
call sub_100BA02  +
test eax eax +
jnz loc_100C5E7  +
mov ecx ebx +
call sub_100B949  +
test eax eax +
jz loc_100C5E7  +
push dword ptr [esi+10h]  +
mov ecx ebx +
call sub_100C2C0  +
mov edi eax +
test edi edi +
jge loc_100C5AE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C5EC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C5EC  +
push offset dword_1002300  +
push 0Fh  +
jmp loc_100C5DA  +
push dword ptr [esi]  +
mov ecx ebx +
call sub_100BF17  +
mov edi eax +
test edi edi +
jge loc_100C52C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C5EC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C5EC  +
push offset dword_1002300  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100C5EC  +
mov edi 80004001h +
mov eax edi +
jmp loc_100C619  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C614  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C614  +
push offset dword_1002300  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1002420 +
or dword ptr [eax+1Ch] 0FFFFFFFFh +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+4] ecx +
mov [eax+20h] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1002420 +
lea edi [esi+8] +
mov ecx edi +
call sub_100C46F  +
test eax eax +
jge loc_100C65D  +
pop edi  +
mov dword ptr [esi] offset off_1001FE0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C64E  +
test byte ptr [ebp+8] 1 +
jz loc_100C690  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
mov dword ptr [eax] offset off_1002438 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+8] +
mov [ebp-8] esi +
mov [ebp-4] esi +
cmp edi esi +
jz loc_100C7B8  +
mov eax [edi] +
cmp eax esi +
jz loc_100C7B8  +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100C712  +
cmp dx si +
jz loc_100C70E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100C712  +
add eax 4 +
add ecx 4 +
cmp dx si +
jnz loc_100C6EC  +
xor eax eax +
jmp loc_100C717  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jnz loc_100C7B8  +
mov eax [edi+58h] +
cmp eax esi +
jz loc_100C7B8  +
mov ecx [eax+0Ch] +
cmp ecx esi +
jz loc_100C7B8  +
cmp [eax+4] esi +
jz loc_100C7B8  +
mov ecx [ecx] +
mov [ebp+8] ecx +
cmp ecx 0C0000374h +
jz loc_100C74F  +
cmp ecx 0C0000005h +
jnz loc_100C7B8  +
lea eax [ebp-8] +
push eax  +
push esi  +
push esi  +
push offset dword_1001F5C  +
call ds:EventRegister  +
cmp eax esi +
jnz loc_100C792  +
lea eax [ebp+8] +
mov [ebp-18h] eax +
lea eax [ebp-18h] +
push eax  +
push 1  +
push offset dword_1001F80  +
push dword ptr [ebp-4]  +
mov [ebp-14h] esi +
push dword ptr [ebp-8]  +
mov dword ptr [ebp-10h] 4 +
mov [ebp-0Ch] esi +
call ds:EventWrite  +
cmp eax esi +
jz loc_100C7A0  +
jle loc_100C79E  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax [ebp-8] +
or eax [ebp-4] +
jz loc_100C7B4  +
push dword ptr [ebp-4]  +
push dword ptr [ebp-8]  +
call ds:EventUnregister  +
mov eax esi +
jmp loc_100C7BD  +
mov eax 80004001h +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+20Ch] +
call sub_101292A  +
mov eax esi +
pop esi  +
retn   +
***
add ecx 20Ch +
jmp sub_101293C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
imul eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
add esi eax +
jmp loc_100C83F  +
sub esi [ebp+arg_4] +
mov ecx esi +
call [ebp+arg_C]  +
dec [ebp+arg_8]  +
jns loc_100C837  +
pop esi  +
pop ebp  +
retn 10h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp [ebp+8] ecx +
jz loc_100C874  +
cmp [ebp+0Ch] ecx +
jz loc_100C874  +
mov eax [ebp+10h] +
cmp eax ecx +
jz loc_100C874  +
mov [eax] ecx +
xor eax eax +
jmp loc_100C89D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C898  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C898  +
push offset dword_1002450  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_14] +
call sub_101292A  +
push [ebp+hObject]  +
xor edi edi +
lea eax [ebp+var_14] +
push offset aDApprecorderen  +
push eax  +
mov [ebp+var_4] edi +
mov [ebp+var_8] 4 +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
call sub_10136DE  +
mov ebx eax +
add esp 0Ch +
cmp ebx edi +
jge loc_100C90E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C96E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C96E  +
push ebx  +
push offset dword_1002450  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100C96E  +
lea ecx [ebp+var_14] +
call sub_1012949  +
push eax  +
push edi  +
push 100000h  +
call ds:OpenEventW  +
mov [ebp+hObject] eax +
cmp eax edi +
jz loc_100C931  +
mov dword ptr [esi+18h] 1 +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push 18h  +
push offset aApprecorderena  +
push offset aSoftwareMicr_3  +
push 80000001h  +
call ds:RegGetValueW  +
test eax eax +
jnz loc_100C95E  +
cmp [ebp+var_4] edi +
setnz al  +
mov [esi+1Ch] eax +
xor ebx ebx +
cmp [ebp+hObject] edi +
jz loc_100C96E  +
push [ebp+hObject]  +
call ds:__imp_CloseHandle  +
lea ecx [ebp+var_14] +
call sub_101293C  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_10] +
call sub_101292A  +
lea ecx [ebp+var_1C] +
call sub_101292A  +
lea ecx [ebp+var_28] +
call sub_101292A  +
lea ecx [ebp+var_34] +
call sub_101292A  +
and [ebp+var_48] 0 +
and [ebp+var_4] 0 +
xor eax eax +
lea edi [ebp+var_44] +
stos   +
stos   +
stos   +
stos   +
call sub_1013EB8  +
test eax eax +
jz loc_100C9F2  +
lea ecx [ebp+var_34] +
call sub_101293C  +
lea ecx [ebp+var_28] +
call sub_101293C  +
lea ecx [ebp+var_1C] +
call sub_101293C  +
lea ecx [ebp+var_10] +
call sub_101293C  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
call sub_1014DFD  +
test eax eax +
jnz loc_100CA21  +
xor esi esi +
lea ecx [ebp+var_34] +
call sub_101293C  +
lea ecx [ebp+var_28] +
call sub_101293C  +
lea ecx [ebp+var_1C] +
call sub_101293C  +
lea ecx [ebp+var_10] +
call sub_101293C  +
mov eax esi +
jmp loc_100C9EC  +
push dword ptr [esi+14h]  +
lea ecx [ebp+var_10] +
push 1D65h  +
call sub_101321D  +
test eax eax +
jge loc_100CA69  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100CBA1  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100CBA1  +
push eax  +
push offset dword_1002450  +
push 2Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_100CBA1  +
push dword ptr [esi+14h]  +
lea ecx [ebp+var_1C] +
push 1D66h  +
call sub_101321D  +
test eax eax +
jge loc_100CAA3  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100CBA1  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100CBA1  +
push eax  +
push offset dword_1002450  +
push 2Dh  +
jmp loc_100CA59  +
push dword ptr [esi+14h]  +
lea ecx [ebp+var_28] +
push 1D67h  +
call sub_101321D  +
test eax eax +
jge loc_100CAE0  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100CBA1  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100CBA1  +
push eax  +
push offset dword_1002450  +
push 2Eh  +
jmp loc_100CA59  +
push dword ptr [esi+14h]  +
lea ecx [ebp+var_34] +
push 1D68h  +
call sub_101321D  +
test eax eax +
jge loc_100CB1D  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100CBA1  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100CBA1  +
push eax  +
push offset dword_1002450  +
push 2Fh  +
jmp loc_100CA59  +
lea ecx [ebp+var_10] +
call sub_1012949  +
lea ecx [ebp+var_1C] +
mov [ebp+var_48] eax +
call sub_1012949  +
lea ecx [ebp+var_28] +
mov [ebp+var_44] eax +
call sub_1012949  +
lea ecx [ebp+var_34] +
mov [ebp+var_40] eax +
call sub_1012949  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push dword ptr [esi+24h]  +
push [ebp+arg_0]  +
call WerpPromtUser  +
test eax eax +
jge loc_100CB8D  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100CB87  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100CB87  +
push eax  +
push offset dword_1002450  +
push 30h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
and [ebp+var_4] 0 +
jmp loc_100CBA1  +
push offset aLastpromptedti  +
push offset aSoftwareMicr_1  +
push 80000001h  +
call sub_1011D0E  +
mov esi [ebp+var_4] +
jmp loc_100C9FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor eax eax +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_224] +
mov [ebp+hKey] eax +
mov [ebp+dwDisposition] eax +
mov [ebp+var_214] eax +
call sub_101292A  +
xor eax eax +
mov esi offset aApprecorder +
push esi  +
lea ecx [ebp+var_224] +
mov word ptr [ebp+var_20C] ax +
call sub_1012CBE  +
mov edi eax +
xor eax eax +
cmp edi eax +
jge loc_100CC30  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD96  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CD96  +
push edi  +
push offset dword_1002450  +
push 31h  +
jmp loc_100CD8B  +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+hKey] +
push ecx  +
push eax  +
push 3  +
push eax  +
push eax  +
push eax  +
push offset SubKey  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_100CD5B  +
xor edi edi +
cmp [ebp+hKey] edi +
jz loc_100CD5B  +
cmp [ebp+dwDisposition] 2 +
jnz loc_100CCF1  +
lea eax [ebp+var_214] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
push 2  +
lea ecx [ebx+4] +
mov [ebp+var_214] 104h +
call sub_1012949  +
push eax  +
push edi  +
push [ebp+hKey]  +
call ds:RegGetValueW  +
test eax eax +
jnz loc_100CCF1  +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_224] +
push offset aSS_0  +
push eax  +
call sub_10136DE  +
mov edi eax +
add esp 10h +
test edi edi +
jge loc_100CCF1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD96  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CD96  +
push edi  +
push offset dword_1002450  +
push 33h  +
jmp loc_100CD8B  +
lea ecx [ebp+var_224] +
call sub_1012951  +
add eax eax +
push eax  +
lea ecx [ebp+var_224] +
call sub_1012949  +
push eax  +
push 1  +
xor edi edi +
push edi  +
lea ecx [ebx+4] +
call sub_1012949  +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100CD96  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_100CD3D  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD96  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CD96  +
push edi  +
push offset dword_1002450  +
push 34h  +
jmp loc_100CD8B  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100CD6F  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD96  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CD96  +
push edi  +
push offset dword_1002450  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
cmp [ebp+hKey] 0 +
jz loc_100CDB2  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
and [ebp+hKey] 0 +
lea ecx [ebp+var_224] +
call sub_101293C  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ecx +
push ebx  +
xor ecx ecx +
push esi  +
mov word ptr [ebp+Data] cx +
lea ecx [ebp+var_214] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
xor ebx ebx +
add eax 4 +
push ebx  +
push 2  +
mov ecx eax +
mov [ebp+hKey] ebx +
mov [ebp+var_214] 104h +
mov [ebp+var_218] eax +
call sub_1012949  +
push eax  +
push offset SubKey  +
push 80000001h  +
call ds:RegGetValueW  +
test eax eax +
jnz loc_100D045  +
cmp [ebp+var_214] 2 +
jb loc_100D045  +
lea esi [ebp+Data] +
lea ecx [esi+2] +
mov ax [esi] +
inc esi  +
inc esi  +
cmp ax bx +
jnz loc_100CE57  +
sub esi ecx +
sar esi 1 +
cmp esi 0Bh +
jb loc_100CF15  +
push edi  +
lea edi [ebp+var_1F6] +
push 0Bh  +
lea eax [edi-16h] +
push offset aApprecorder  +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100CEB2  +
test ebx ebx +
jz loc_100CE9F  +
movzx eax word ptr [edi-18h] +
push eax  +
call isspace  +
pop ecx  +
test eax eax +
jz loc_100CEB2  +
movzx eax word ptr [edi] +
push eax  +
call isspace  +
pop ecx  +
test eax eax +
jnz loc_100CEBE  +
cmp [edi] ax +
jz loc_100CEBE  +
inc ebx  +
inc edi  +
lea eax [esi-0Bh] +
inc edi  +
cmp ebx eax +
jbe loc_100CE75  +
jmp loc_100CF14  +
test ebx ebx +
jnz loc_100CEC6  +
xor ecx ecx +
jmp loc_100CEC9  +
lea ecx [ebx-1] +
lea eax [ebx+0Bh] +
cmp eax esi +
jb loc_100CEDC  +
xor eax eax +
mov word ptr [ebp+ecx*2+Data] ax +
jmp loc_100CF14  +
sub esi ebx +
test ecx ecx +
jz loc_100CEF8  +
lea edx [esi+esi-14h] +
lea eax [ebp+eax*2+Data] +
push edx  +
push eax  +
lea eax [ebp+ecx*2+Data] +
jmp loc_100CF0B  +
lea ecx [esi+esi-16h] +
lea eax [ebp+eax*2-20Ah] +
push ecx  +
push eax  +
lea eax [ebp+Data] +
push eax  +
call memmove  +
add esp 0Ch +
pop edi  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
xor ebx ebx +
push ebx  +
mov esi offset SubKey +
push esi  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100D013  +
cmp [ebp+hKey] ebx +
jz loc_100D013  +
cmp word ptr [ebp+Data] bx +
jnz loc_100CFA4  +
mov ecx [ebp+var_218] +
call sub_1012949  +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100CF7B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D080  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D080  +
push esi  +
push offset dword_1002450  +
push 37h  +
jmp loc_100D075  +
lea eax [ebp+Data] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100CFAD  +
sub eax edx +
sar eax 1 +
add eax eax +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 1  +
push ebx  +
push esi  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100D00F  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100CFED  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D080  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D080  +
push esi  +
push offset dword_1002450  +
push 38h  +
jmp loc_100D075  +
xor esi esi +
jmp loc_100D080  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100D027  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D080  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D080  +
push esi  +
push offset dword_1002450  +
push 36h  +
jmp loc_100D075  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100D059  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D080  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D080  +
push esi  +
push offset dword_1002450  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
cmp [ebp+hKey] ebx +
jz loc_100D094  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002568 +
call sub_101292A  +
lea edi [esi+28h] +
mov ebx edi +
mov [ebp+var_4] 1 +
mov ecx ebx +
call sub_100C7FA  +
add ebx 220h +
dec [ebp+var_4]  +
jns loc_100D0CE  +
xor eax eax +
push 440h  +
push eax  +
push edi  +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+10h] eax +
mov [esi+24h] eax +
mov [esi+20h] eax +
call memset  +
add esp 0Ch +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push offset loc_100C813  +
mov esi ecx +
push 2  +
push 220h  +
lea eax [esi+28h] +
push eax  +
mov dword ptr [esi] offset off_1002568 +
call sub_100C823  +
lea ecx [esi+4] +
call sub_101293C  +
mov dword ptr [esi] offset off_1001FE0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
push ebx  +
mov ebx ecx +
test eax eax +
jnz loc_100D182  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D178  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D178  +
push offset dword_1002450  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100D406  +
push esi  +
mov esi [eax] +
push edi  +
push 4  +
mov [ebp-4] esi +
mov ecx offset aAppcrash +
mov eax esi +
pop edi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100D1B7  +
test dx dx +
jz loc_100D1B3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100D1B7  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100D193  +
xor eax eax +
jmp loc_100D1BC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100D257  +
mov ecx offset aApphangb1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100D1EF  +
test dx dx +
jz loc_100D1EB  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100D1EF  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100D1CB  +
xor eax eax +
jmp loc_100D1F4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100D257  +
mov ecx offset aApphangxprocb1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100D223  +
test dx dx +
jz loc_100D21F  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100D223  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100D1FF  +
xor eax eax +
jmp loc_100D228  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100D257  +
mov esi 80004001h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D402  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D402  +
push offset dword_1002450  +
push 0Bh  +
jmp loc_100D3F7  +
mov eax [ebp+8] +
mov esi [eax+58h] +
test esi esi +
jnz loc_100D28C  +
mov esi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D402  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D402  +
push offset dword_1002450  +
push 0Ch  +
jmp loc_100D3F7  +
mov eax [ebp-4] +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100D2B8  +
test dx dx +
jz loc_100D2B4  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100D2B8  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100D294  +
xor eax eax +
jmp loc_100D2BD  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100D34C  +
cmp [esi] eax +
jz loc_100D321  +
mov eax [esi+14h] +
test eax eax +
jz loc_100D321  +
push eax  +
call ds:__imp_GetProcessId  +
mov [ebx+10h] eax +
push dword ptr [esi]  +
lea edi [ebx+4] +
mov ecx edi +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jl loc_100D2FB  +
mov ecx edi +
call sub_1012B76  +
test eax eax +
jz loc_100D383  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D402  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D402  +
push offset dword_1002450  +
push 0Eh  +
jmp loc_100D3F7  +
mov esi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D402  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D402  +
push offset dword_1002450  +
push 0Dh  +
jmp loc_100D3F7  +
cmp dword ptr [esi] 0 +
jz loc_100D3D9  +
mov eax [esi+4] +
test eax eax +
jz loc_100D3D9  +
push eax  +
call ds:__imp_GetProcessId  +
mov [ebx+10h] eax +
push dword ptr [esi]  +
lea edi [ebx+4] +
mov ecx edi +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jl loc_100D3BE  +
mov ecx edi +
call sub_1012B76  +
test eax eax +
jnz loc_100D3BE  +
push dword ptr [ebx+10h]  +
mov ecx ebx +
call sub_100C8A6  +
mov esi eax +
test esi esi +
jge loc_100D3BA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D402  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D402  +
push esi  +
push offset dword_1002450  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100D402  +
xor esi esi +
jmp loc_100D402  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D402  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D402  +
push offset dword_1002450  +
push 10h  +
jmp loc_100D3F7  +
mov esi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D402  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D402  +
push offset dword_1002450  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
call sub_100CDD3  +
mov esi eax +
test esi esi +
jge loc_100D43A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D48D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D48D  +
push esi  +
push offset dword_1002450  +
push 19h  +
jmp loc_100D47E  +
push offset aSoftwareMicr_3  +
push 80000001h  +
call ds:RegDeleteKeyW  +
test eax eax +
jz loc_100D48B  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100D462  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D48D  +
test byte ptr [eax+1Ch] 4 +
jz loc_100D48D  +
push esi  +
push offset dword_1002450  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100D48D  +
xor esi esi +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor eax eax +
mov esi ecx +
xor ecx ecx +
inc eax  +
mov [ebp+var_8] ecx +
mov [ebp+hKey] ecx +
mov [ebp+dwDisposition] ecx +
mov dword ptr [ebp+Data] eax +
cmp [ebp+arg_0] ecx +
jnz loc_100D4E5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D4DB  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D4DB  +
push offset dword_1002450  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100D711  +
cmp [esi+18h] eax +
jz loc_100D70F  +
cmp [esi+1Ch] eax +
jz loc_100D70F  +
push ebx  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push 2  +
push offset aLastpromptedti  +
push offset aSoftwareMicr_1  +
mov edi 80000001h +
push edi  +
call sub_1011C79  +
mov ebx eax +
test ebx ebx +
jge loc_100D540  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D6FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D6FA  +
push offset dword_1002450  +
push 1Ch  +
jmp loc_100D6EB  +
cmp [ebp+var_8] 0 +
jz loc_100D6F8  +
push [ebp+arg_0]  +
lea eax [esi+28h] +
push 2  +
push offset off_101D5D8  +
push 2  +
push eax  +
mov [ebp+var_C] eax +
call sub_1011FC6  +
mov ebx eax +
test ebx ebx +
jge loc_100D58F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D6FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D6FA  +
push ebx  +
push offset dword_1002450  +
push 1Dh  +
jmp loc_100D674  +
and [ebp+arg_0] 0 +
lea ebx [esi+240h] +
lea eax [ebx-214h] +
push offset aApprecorderver  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D5BF  +
mov eax [ebx] +
test eax eax +
jz loc_100D5BF  +
cmp eax 1 +
ja loc_100D6F8  +
inc [ebp+arg_0]  +
add ebx 220h +
cmp [ebp+arg_0] 2 +
jb loc_100D599  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100C984  +
test eax eax +
jnz loc_100D608  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D600  +
test byte ptr [eax+1Ch] 4 +
jz loc_100D600  +
push offset dword_1002450  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor ebx ebx +
inc ebx  +
jmp loc_100D6FA  +
mov ecx esi +
call sub_100CBAE  +
mov ebx eax +
test ebx ebx +
jge loc_100D639  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D6FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D6FA  +
push ebx  +
push offset dword_1002450  +
push 1Fh  +
jmp loc_100D674  +
mov esi offset aSoftwareMicr_3 +
push esi  +
push edi  +
push 2  +
push [ebp+var_C]  +
call sub_1011D7E  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jge loc_100D681  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D6FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D6FA  +
push ebx  +
push offset dword_1002450  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100D6FA  +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+hKey] +
push ecx  +
push eax  +
push 2  +
push eax  +
push eax  +
push eax  +
push esi  +
push edi  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_100D6B6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D6FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D6FA  +
push offset dword_1002450  +
push 21h  +
jmp loc_100D6EB  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push offset aApprecorderena  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100D6F8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D6FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D6FA  +
push offset dword_1002450  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100D6FA  +
xor ebx ebx +
cmp [ebp+hKey] 0 +
jz loc_100D709  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
mov eax ebx +
pop ebx  +
jmp loc_100D711  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 40h  +
lea eax [ebp+StartupInfo.lpReserved] +
push ebx  +
push eax  +
mov [ebp+StartupInfo.cb] ebx +
call memset  +
mov [ebp+hProcess] ebx +
xor eax eax +
lea edi [ebp-30h] +
stos   +
stos   +
add esp 0Ch +
lea ecx [ebp+var_24] +
stos   +
call sub_101292A  +
lea ecx [ebp+var_C] +
call sub_101292A  +
lea ecx [ebp+var_18] +
call sub_101292A  +
push ebx  +
push ebx  +
lea ecx [ebp+var_C] +
call sub_1013455  +
mov esi eax +
cmp esi ebx +
jge loc_100D794  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D9C3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D9C3  +
push esi  +
push offset dword_1002450  +
push 24h  +
jmp loc_100D84E  +
push offset aPsr_exe  +
lea ecx [ebp+var_C] +
call sub_1012E45  +
mov esi eax +
cmp esi ebx +
jge loc_100D7CE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D9C3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D9C3  +
push esi  +
push offset dword_1002450  +
push 25h  +
jmp loc_100D84E  +
lea ecx [ebp+var_C] +
call sub_1012949  +
push eax  +
lea eax [ebp+var_24] +
push offset aSStop  +
push eax  +
call sub_10136DE  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jge loc_100D812  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D9C3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D9C3  +
push esi  +
push offset dword_1002450  +
push 26h  +
jmp loc_100D84E  +
push [ebp+hObject]  +
lea eax [ebp+var_18] +
push offset aDApprecorderen  +
push eax  +
call sub_10136DE  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jge loc_100D85E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D9C3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D9C3  +
push esi  +
push offset dword_1002450  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100D9C3  +
lea ecx [ebp+var_18] +
call sub_1012949  +
push eax  +
push ebx  +
push 100000h  +
call ds:OpenEventW  +
mov [ebp+hObject] eax +
cmp eax ebx +
jnz loc_100D8C2  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100D88E  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D9B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D9B5  +
push esi  +
push offset dword_1002450  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100D9B5  +
lea eax [ebp+hProcess] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp+var_24] +
mov [ebp+StartupInfo.cb] 44h +
call sub_10128A5  +
push eax  +
lea ecx [ebp+var_C] +
call sub_1012949  +
push eax  +
call ds:__imp_CreateProcessW  +
test eax eax +
jnz loc_100D92D  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100D907  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D9B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D9B5  +
push esi  +
push offset dword_1002450  +
push 29h  +
jmp loc_100D8B2  +
mov esi ds:WaitForSingleObject +
mov ebx 4E20h +
push ebx  +
push [ebp+hObject]  +
call esi  +
mov edi 102h +
cmp eax edi +
jnz loc_100D96B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D96B  +
test byte ptr [eax+1Ch] 2 +
jz loc_100D96B  +
push offset dword_1002450  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
cmp [ebp+hProcess] 0 +
jz loc_100D9B1  +
push ebx  +
push [ebp+hProcess]  +
call esi  +
cmp eax edi +
jnz loc_100D9B1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D99F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D99F  +
push offset dword_1002450  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
push 0  +
push [ebp+hProcess]  +
call ds:TerminateProcess  +
mov esi 80004005h +
jmp loc_100D9B3  +
xor esi esi +
xor ebx ebx +
cmp [ebp+hObject] ebx +
jz loc_100D9C3  +
push [ebp+hObject]  +
call ds:__imp_CloseHandle  +
cmp [ebp+hProcess] ebx +
jz loc_100D9D4  +
push [ebp+hProcess]  +
call ds:__imp_CloseHandle  +
mov [ebp+hProcess] ebx +
cmp [ebp-30h] ebx +
jz loc_100D9E5  +
push dword ptr [ebp-30h]  +
call ds:__imp_CloseHandle  +
mov [ebp-30h] ebx +
lea ecx [ebp+var_18] +
call sub_101293C  +
lea ecx [ebp+var_C] +
call sub_101293C  +
lea ecx [ebp+var_24] +
call sub_101293C  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100D10F  +
test byte ptr [ebp+8] 1 +
jz loc_100DA25  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp+8] ecx +
jz loc_100DC3B  +
mov esi [ebp+0Ch] +
cmp esi ecx +
jz loc_100DC3B  +
mov ebx [ebp+10h] +
cmp ebx ecx +
jz loc_100DC3B  +
mov [ebx] ecx +
mov eax [esi+4] +
cmp eax 0Ch +
jz loc_100DA73  +
cmp eax 6 +
jnz loc_100DB40  +
cmp [edi+18h] ecx +
jz loc_100DB40  +
mov [ebp+8] ecx +
cmp [edi+20h] ecx +
jnz loc_100DAC5  +
push dword ptr [edi+10h]  +
mov ecx edi +
call sub_100D71B  +
test eax eax +
jge loc_100DABE  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100DAC5  +
test byte ptr [ecx+1Ch] 2 +
jz loc_100DAC5  +
push eax  +
push dword ptr [edi+10h]  +
push offset dword_1002450  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100C7C8  +
jmp loc_100DAC5  +
mov dword ptr [edi+20h] 1 +
lea eax [ebp+8] +
push eax  +
push dword ptr [esi]  +
call WerpGetReportFlags  +
mov ebx eax +
test ebx ebx +
jge loc_100DAFD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC30  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DC30  +
push ebx  +
push offset dword_1002450  +
push 14h  +
jmp loc_100DC18  +
or dword ptr [ebp+8] 800h +
push dword ptr [ebp+8]  +
push dword ptr [esi]  +
call WerpSetReportFlags  +
mov ebx eax +
test ebx ebx +
jge loc_100DB3B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC30  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DC30  +
push ebx  +
push offset dword_1002450  +
push 15h  +
jmp loc_100DC18  +
mov ebx [ebp+10h] +
xor ecx ecx +
cmp dword ptr [esi+4] 9 +
jnz loc_100DB66  +
cmp dword ptr [esi+0Ch] 2 +
jnz loc_100DB66  +
push dword ptr [esi+10h]  +
call ds:IsWindow  +
test eax eax +
jz loc_100DB64  +
mov eax [esi+10h] +
mov [edi+24h] eax +
jmp loc_100DC28  +
xor ecx ecx +
cmp dword ptr [esi+4] 1 +
jnz loc_100DC34  +
mov eax [esi+0Ch] +
cmp eax ecx +
jz loc_100DC34  +
cmp [esi+10h] ecx +
jz loc_100DC34  +
push offset aApplicationrec  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100DC34  +
cmp [edi+18h] eax +
jz loc_100DBC7  +
mov ecx edi +
call sub_100D410  +
mov ebx eax +
test ebx ebx +
jge loc_100DC25  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC30  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DC30  +
push ebx  +
push offset dword_1002450  +
push 16h  +
jmp loc_100DC18  +
lea eax [ebp-4] +
push eax  +
push dword ptr [esi]  +
call WerpGetReportFlags  +
test eax eax +
jl loc_100DBE6  +
mov eax [ebp-4] +
or eax 48000000h +
push eax  +
push dword ptr [esi]  +
call WerpSetReportFlags  +
cmp dword ptr [edi+1Ch] 0 +
jnz loc_100DC28  +
push dword ptr [esi]  +
mov ecx edi +
push dword ptr [esi+10h]  +
call sub_100D496  +
mov ebx eax +
test ebx ebx +
jge loc_100DC25  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC30  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DC30  +
push ebx  +
push offset dword_1002450  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100DC30  +
mov ebx [ebp+10h] +
mov dword ptr [ebx] 1 +
xor ebx ebx +
mov eax ebx +
jmp loc_100DC64  +
mov eax 80004001h +
jmp loc_100DC64  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC5F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DC5F  +
push offset dword_1002450  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101292A  +
lea ecx [esi+0Ch] +
call sub_101292A  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_101293C  +
mov ecx esi +
pop esi  +
jmp sub_101293C  +
***
mov edi edi +
push esi  +
lea esi [ecx+124h] +
mov eax [esi] +
test eax eax +
jz loc_100DCEA  +
push eax  +
call ds:FreeLibrary  +
and dword ptr [esi] 0 +
xor eax eax +
pop esi  +
retn   +
***
cmp dword ptr [ecx+668h] 1 +
jnz loc_100DD03  +
lea eax [ecx+454h] +
retn   +
***
xor eax eax +
retn   +
***
xor eax eax +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 42Ch +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+0Ch] +
mov esi ecx +
xor ecx ecx +
mov [ebp-428h] edi +
mov [ebp-42Ch] ebx +
mov [ebp-420h] eax +
mov [ebp-424h] eax +
mov [ebp-20Ch] cx +
mov [ebp-414h] cx +
cmp [ebp+8] eax +
jz loc_100DFA8  +
cmp edi eax +
jz loc_100DFA8  +
cmp ebx eax +
jz loc_100DFA8  +
push 58h  +
push eax  +
push edi  +
call memset  +
mov eax [ebp+8] +
add esp 0Ch +
and dword ptr [ebx] 0 +
mov eax [eax] +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100DDB7  +
test dx dx +
jz loc_100DDB3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100DDB7  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100DD91  +
xor eax eax +
jmp loc_100DDBC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100DDCA  +
mov edi 80004001h +
jmp loc_100DF45  +
mov eax [ebp+8] +
mov ecx [eax+54h] +
cmp ecx 8 +
jz loc_100DE04  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DDFA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DDFA  +
push ecx  +
push offset dword_10025CC  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov edi 80004005h +
jmp loc_100DF45  +
and dword ptr [ebp-418h] 0 +
cmp dword ptr [esi+114h] 0 +
jbe loc_100DED7  +
lea eax [esi+10h] +
mov [ebp-41Ch] eax +
mov ebx 104h +
lea eax [ebp-424h] +
push eax  +
lea eax [ebp-414h] +
push eax  +
lea eax [ebp-420h] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
push dword ptr [ebp-418h]  +
lea eax [esi+128h] +
push eax  +
push dword ptr [esi+120h]  +
mov [ebp-420h] ebx +
mov [ebp-424h] ebx +
call dword ptr [esi+118h]  +
mov edi eax +
test edi edi +
jl loc_100DF4C  +
mov ecx [ebp-41Ch] +
lea eax [ebp-20Ch] +
push eax  +
add ecx 0FFFFFFF4h +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jl loc_100DF67  +
mov ecx [ebp-41Ch] +
lea eax [ebp-414h] +
push eax  +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jl loc_100DF82  +
inc dword ptr [ebp-418h]  +
mov eax [ebp-418h] +
add dword ptr [ebp-41Ch] 18h +
cmp eax [esi+114h] +
jb loc_100DE26  +
mov ebx [ebp-42Ch] +
mov edi [ebp-428h] +
lea ecx [esi+0F4h] +
call sub_1012949  +
and dword ptr [ebp-418h] 0 +
mov [edi] eax +
cmp dword ptr [esi+114h] 0 +
jbe loc_100DF34  +
add edi 8 +
lea ebx [esi+10h] +
lea ecx [ebx-0Ch] +
call sub_1012949  +
mov ecx ebx +
mov [edi-4] eax +
call sub_1012949  +
inc dword ptr [ebp-418h]  +
mov [edi] eax +
mov eax [ebp-418h] +
add ebx 18h +
add edi 8 +
cmp eax [esi+114h] +
jb loc_100DEFA  +
mov ebx [ebp-42Ch] +
mov edi [ebp-428h] +
mov eax [esi+114h] +
mov [edi+54h] eax +
mov dword ptr [ebx] 1 +
xor edi edi +
mov eax edi +
jmp loc_100DFD1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DF45  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DF45  +
push offset dword_10025CC  +
push 14h  +
jmp loc_100DF9B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DF45  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DF45  +
push offset dword_10025CC  +
push 15h  +
jmp loc_100DF9B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DF45  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DF45  +
push offset dword_10025CC  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100DF45  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DFCC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DFCC  +
push offset dword_10025CC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jnz loc_100E01B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E017  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E017  +
push offset dword_10025CC  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
jmp loc_100E038  +
push eax  +
push eax  +
push eax  +
push 10h  +
push [ebp+arg_0]  +
push offset aSoftwareMicr_7  +
push 80000002h  +
call ds:RegGetValueW  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 9  +
mov dword ptr [esi] offset off_1002684 +
lea edi [esi+4] +
pop ebx  +
mov ecx edi +
call sub_100DC9C  +
add edi 18h +
dec ebx  +
jns loc_100E054  +
lea ecx [esi+0F4h] +
call sub_101292A  +
lea ecx [esi+108h] +
call sub_101292A  +
xor edi edi +
push 32Ch  +
lea eax [esi+128h] +
push edi  +
push eax  +
mov [esi+104h] edi +
mov [esi+100h] edi +
mov [esi+124h] edi +
mov [esi+114h] edi +
mov [esi+118h] edi +
mov [esi+120h] edi +
call memset  +
push 218h  +
lea eax [esi+454h] +
push edi  +
push eax  +
call memset  +
add esp 18h +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002684 +
call sub_100DCD1  +
lea ecx [esi+108h] +
call sub_101293C  +
lea ecx [esi+0F4h] +
call sub_101293C  +
push offset loc_100DCB7  +
push 0Ah  +
push 18h  +
lea eax [esi+4] +
push eax  +
call sub_100C823  +
mov dword ptr [esi] offset off_1001FE0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_10] +
and [ebp+var_218] 0 +
and [ebp+var_21C] 0 +
mov eax [ebp+lpLibFileName] +
mov [ebp+var_210] ecx +
mov ecx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
mov [ebp+var_220] ecx +
mov ecx [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_14] +
mov [ebp+var_214] ecx +
mov [ebp+var_224] edx +
test ebx ebx +
jz loc_100E382  +
test edi edi +
jz loc_100E382  +
test ecx ecx +
jz loc_100E382  +
test eax eax +
jz loc_100E382  +
push esi  +
xor ecx ecx +
push eax  +
mov word ptr [ebp+var_20C] cx +
call ds:LoadLibraryW  +
mov [edi] eax +
test eax eax +
jnz loc_100E1DA  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100E1AE  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_210] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E357  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E357  +
push offset dword_10025CC  +
push 20h  +
jmp loc_100E2FE  +
mov esi ds:__imp_GetProcAddress +
push offset ProcName  +
push eax  +
call esi  +
test eax eax +
jnz loc_100E21F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E210  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E210  +
push offset dword_10025CC  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov [ebp+var_210] 80004005h +
jmp loc_100E360  +
push ebx  +
mov ebx [ebp+var_210] +
lea ecx [ebp+var_21C] +
push ecx  +
lea ecx [ebp+var_20C] +
push ecx  +
lea ecx [ebp+var_218] +
push ecx  +
lea ecx [ebx+128h] +
push ecx  +
push [ebp+var_220]  +
mov [ebp+var_21C] 104h +
call eax  +
mov [ebp+var_210] eax +
test eax eax +
jge loc_100E281  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E357  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E357  +
push offset dword_10025CC  +
push 22h  +
jmp loc_100E2FE  +
cmp [ebp+var_218] 0 +
jz loc_100E34D  +
push offset aOutofprocess_0  +
push dword ptr [edi]  +
call esi  +
mov ecx [ebp+var_214] +
mov [ecx] eax +
test eax eax +
jnz loc_100E2C9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E210  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E210  +
push offset dword_10025CC  +
push 23h  +
jmp loc_100E205  +
lea eax [ebp+var_20C] +
push eax  +
lea ecx [ebx+0F4h] +
call sub_1012CBE  +
mov [ebp+var_210] eax +
test eax eax +
jge loc_100E30B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E357  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E357  +
push offset dword_10025CC  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100E357  +
push offset aOutofprocess_1  +
push dword ptr [edi]  +
call esi  +
mov ecx [ebp+var_224] +
mov [ecx] eax +
test eax eax +
jnz loc_100E344  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E344  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E344  +
push offset dword_10025CC  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
and [ebp+var_210] 0 +
jmp loc_100E379  +
mov [ebp+var_210] 80004001h +
cmp [ebp+var_210] 0 +
jge loc_100E379  +
mov eax [edi] +
test eax eax +
jz loc_100E370  +
push eax  +
call ds:FreeLibrary  +
and dword ptr [edi] 0 +
mov eax [ebp+var_214] +
and dword ptr [eax] 0 +
mov eax [ebp+var_210] +
pop esi  +
jmp loc_100E3AB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E3A6  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E3A6  +
push offset dword_10025CC  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E0CF  +
test [ebp+arg_0] 1 +
jz loc_100E3DA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4_GS  +
xor esi esi +
cmp [ebp-230h] esi +
jz locret_100E6A9  +
mov eax large fs:18h +
push dword ptr [ebp-230h]  +
push esi  +
mov eax [eax+30h] +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov [ebp-230h] esi +
retn   +
***
mov esp [ebp-18h] +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E745  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E745  +
push offset dword_10025CC  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100E777  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E777  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E777  +
push offset dword_10025CC  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax esi +
call __SEH_epilog4_GS  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
xor eax eax +
mov ebx ecx +
mov [ebp-218h] edi +
mov [ebp-214h] edi +
mov dword ptr [ebp-21Ch] 104h +
mov [ebp-20Ch] ax +
cmp esi edi +
jnz loc_100E7FB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E7EC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E7EC  +
push offset dword_10025CC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov dword ptr [ebp-210h] 80070057h +
jmp loc_100EAE7  +
mov eax [esi] +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100E828  +
cmp dx di +
jz loc_100E824  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100E828  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_100E802  +
xor eax eax +
jmp loc_100E82D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100E861  +
mov dword ptr [ebp-210h] 80004001h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EAE7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EAE7  +
push offset dword_10025CC  +
push 0Bh  +
jmp loc_100EADC  +
mov esi [esi+58h] +
mov [ebp-210h] esi +
cmp esi edi +
jnz loc_100E89E  +
mov dword ptr [ebp-210h] 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EAE7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EAE7  +
push offset dword_10025CC  +
push 0Ch  +
jmp loc_100EADC  +
cmp [esi+18h] edi +
jz loc_100EAB9  +
mov eax [esi+14h] +
cmp eax edi +
jz loc_100EAB9  +
mov ecx [esi+0Ch] +
mov edx [ecx] +
cmp edx 0C0000409h +
jz loc_100EAAD  +
cmp edx 0C0000005h +
jnz loc_100E8D5  +
cmp dword ptr [ecx+14h] 8 +
jz loc_100EAAD  +
mov [ebx+100h] eax +
mov eax [esi+18h] +
mov [ebx+104h] eax +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_100E8F7  +
push eax  +
lea ecx [ebx+108h] +
call sub_1012CBE  +
mov eax [ebp-210h] +
mov dword ptr [ebx+128h] 32Ch +
mov esi [esi+0Ch] +
push 14h  +
pop ecx  +
lea edi [ebx+134h] +
movs   +
mov esi [eax+10h] +
mov eax [ebx+100h] +
lea edi [ebx+184h] +
mov ecx 0B3h +
movs   +
mov [ebx+12Ch] eax +
mov eax [ebx+104h] +
lea ecx [ebx+108h] +
mov [ebx+130h] eax +
call sub_1012949  +
lea edi [ebx+120h] +
push edi  +
lea ecx [ebx+124h] +
push ecx  +
lea esi [ebx+11Ch] +
push esi  +
lea ecx [ebx+118h] +
mov [ebx+450h] eax +
push ecx  +
lea eax [ebx+114h] +
push eax  +
mov ecx ebx +
call sub_100E3E6  +
mov [ebp-210h] eax +
test eax eax +
jge loc_100E9A8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EAE7  +
test byte ptr [eax+1Ch] 4 +
jz loc_100EAE7  +
push offset dword_10025CC  +
push 0Eh  +
jmp loc_100EADC  +
cmp dword ptr [ebx+114h] 0Ah +
jbe loc_100E9E4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E9D5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E9D5  +
push offset dword_10025CC  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov dword ptr [ebp-210h] 80004005h +
jmp loc_100EAE7  +
mov esi [esi] +
xor eax eax +
inc eax  +
mov [ebx+458h] eax +
mov dword ptr [ebx+454h] 7 +
mov [ebx+668h] eax +
test esi esi +
jz loc_100EAA4  +
lea eax [ebp-214h] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebx+128h] +
push eax  +
push dword ptr [edi]  +
call esi  +
test eax eax +
jge loc_100EA58  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EAE7  +
test byte ptr [eax+1Ch] 2 +
jz loc_100EAE7  +
push offset dword_10025CC  +
push 10h  +
jmp loc_100EADC  +
cmp dword ptr [ebp-218h] 0 +
jz loc_100EAA4  +
lea eax [ebp-20Ch] +
push eax  +
push 104h  +
lea eax [ebx+45Ch] +
push eax  +
call sub_1006418  +
test eax eax +
jge loc_100EA98  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EAE7  +
test byte ptr [eax+1Ch] 2 +
jz loc_100EAE7  +
push offset dword_10025CC  +
push 11h  +
jmp loc_100EADC  +
mov eax [ebp-214h] +
mov [ebx+664h] eax +
and dword ptr [ebp-210h] 0 +
jmp loc_100EAE7  +
mov dword ptr [ebp-210h] 80004001h +
jmp loc_100EAE7  +
mov dword ptr [ebp-210h] 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EAE7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EAE7  +
push offset dword_10025CC  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ecx [ebp-4] +
mov eax [ebp-210h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
push esi  +
mov [ebp-4] ecx +
test eax eax +
jnz loc_100EB42  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EB38  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EB38  +
push offset dword_1002720  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
jmp loc_100EDD1  +
mov esi [eax] +
push ebx  +
push edi  +
mov ebx offset aAppcrash +
push 4  +
mov ecx ebx +
mov eax esi +
pop edi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100EB76  +
test dx dx +
jz loc_100EB72  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100EB76  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100EB52  +
xor eax eax +
jmp loc_100EB7B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100EC16  +
mov ecx offset aApphangb1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100EBAE  +
test dx dx +
jz loc_100EBAA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100EBAE  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100EB8A  +
xor eax eax +
jmp loc_100EBB3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100EC16  +
mov ecx offset aApphangxprocb1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100EBE2  +
test dx dx +
jz loc_100EBDE  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100EBE2  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_100EBBE  +
xor eax eax +
jmp loc_100EBE7  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100EC16  +
mov esi 80004001h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EDCF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EDCF  +
push offset dword_1002720  +
push 0Bh  +
jmp loc_100EDC4  +
mov eax [ebp+8] +
mov eax [eax+58h] +
test eax eax +
jnz loc_100EC4B  +
mov esi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EDCF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EDCF  +
push offset dword_1002720  +
push 0Ch  +
jmp loc_100EDC4  +
mov edx ebx +
mov ecx esi +
mov si [ecx] +
cmp si [edx] +
jnz loc_100EC73  +
test si si +
jz loc_100EC6F  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_100EC73  +
add ecx edi +
add edx edi +
test si si +
jnz loc_100EC4F  +
xor ecx ecx +
jmp loc_100EC78  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
xor edx edx +
cmp ecx edx +
jnz loc_100ED0B  +
cmp [eax] edx +
jz loc_100ECE0  +
cmp [eax+14h] edx +
jz loc_100ECE0  +
mov esi [eax+0Ch] +
cmp esi edx +
jnz loc_100ECC0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100ECB6  +
test byte ptr [eax+1Ch] 1 +
jz loc_100ECB6  +
push offset dword_1002720  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
jmp loc_100EDCF  +
mov ebx [ebp-4] +
push 14h  +
pop ecx  +
lea edi [ebx+114h] +
movs   +
mov ecx [eax+14h] +
mov [ebx+10Ch] ecx +
push dword ptr [eax]  +
call sub_1016739  +
jmp loc_100ED31  +
mov esi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EDCF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EDCF  +
push offset dword_1002720  +
push 0Dh  +
jmp loc_100EDC4  +
cmp [eax] edx +
jz loc_100EDA6  +
mov ecx [eax+4] +
cmp ecx edx +
jz loc_100EDA6  +
mov edx [ebp-4] +
mov [edx+10Ch] ecx +
push dword ptr [eax]  +
call sub_1016739  +
mov ebx [ebp-4] +
test eax eax +
jnz loc_100ED60  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100ED59  +
test byte ptr [eax+1Ch] 1 +
jz loc_100ED59  +
push offset dword_1002720  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_100EDCF  +
push eax  +
lea ecx [ebx+0FCh] +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jge loc_100ED99  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EDCF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EDCF  +
push esi  +
push offset dword_1002720  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100EDCF  +
mov eax [ebp+10h] +
mov [ebx+0F8h] eax +
xor esi esi +
jmp loc_100EDCF  +
mov esi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EDCF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EDCF  +
push offset dword_1002720  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A10h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor eax eax +
mov esi 800h +
push esi  +
push eax  +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+var_A10] +
push eax  +
mov edi ecx +
call memset  +
add esp 0Ch +
lea eax [ebp+var_210] +
push eax  +
push esi  +
lea eax [ebp+var_A10] +
push eax  +
push dword ptr [edi+10Ch]  +
call K32EnumProcessModules  +
test eax eax +
jz loc_100EEA9  +
cmp [ebp+var_210] esi +
ja loc_100EEA9  +
xor esi esi +
test [ebp+var_210] 0FFFFFFFCh +
jbe loc_100EECD  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+esi*4+var_A10]  +
push dword ptr [edi+10Ch]  +
call K32GetModuleFileNameExW  +
test eax eax +
jz loc_100EE90  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1016739  +
test eax eax +
jz loc_100EE90  +
push offset aVerifier_dll  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100EEA0  +
mov eax [ebp+var_210] +
inc esi  +
shr eax 2 +
cmp esi eax +
jb loc_100EE4D  +
jmp loc_100EECD  +
mov eax [ebp+esi*4+var_A10] +
jmp loc_100EECF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EECD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EECD  +
push offset dword_1002720  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jnz loc_100EF21  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EF17  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EF17  +
push offset dword_1002720  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100F014  +
and dword ptr [eax] 0 +
push ebx  +
call sub_100EDDD  +
mov ebx eax +
test ebx ebx +
jnz loc_100EF37  +
xor esi esi +
jmp loc_100F011  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_100EF64  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EF98  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EF98  +
push offset dword_1002720  +
push 14h  +
jmp loc_100EF8D  +
push offset aVerifiergetinf  +
push eax  +
call ds:__imp_GetProcAddress  +
test eax eax +
jnz loc_100EF9F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EF98  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EF98  +
push offset dword_1002720  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_100F002  +
push edi  +
lea edi [esi+4] +
push edi  +
lea ecx [ebp-1] +
push ecx  +
lea ecx [esi+114h] +
push ecx  +
push ebx  +
push dword ptr [esi+10Ch]  +
call eax  +
mov esi eax +
test esi esi +
jge loc_100EFEB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100EFE3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EFE3  +
push esi  +
push offset dword_1002720  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
or esi 10000000h +
jmp loc_100F001  +
cmp [ebp+var_1] 0 +
jz loc_100EFFF  +
cmp dword ptr [edi] 0 +
jz loc_100EFFF  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
xor esi esi +
pop edi  +
cmp [ebp+hLibModule] 0 +
jz loc_100F011  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax esi +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and [ebp+Buffer.dwLength] 0 +
push ebx  +
push edi  +
mov ebx ecx +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+Buffer.dwMemoryLoad] +
stos   +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100F06D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F063  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F063  +
push offset dword_1002720  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100F149  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GlobalMemoryStatus  +
and [ebp+var_4] 0 +
and [ebp+arg_0] 0 +
mov dword ptr [edi] 1 +
lea esi [ebx+384h] +
lea eax [esi-214h] +
push offset aVersion  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100F0B1  +
mov eax [esi] +
test eax eax +
jz loc_100F0B1  +
cmp eax [ebx+108h] +
ja loc_100F126  +
lea eax [esi-214h] +
push offset aMinramamount  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100F0D5  +
mov eax [ebp+Buffer.dwTotalPhys] +
shr eax 14h +
add eax 20h +
cmp eax [esi] +
jb loc_100F126  +
lea eax [esi-214h] +
push offset aAutoverifierco  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100F0F0  +
cmp [esi] eax +
jz loc_100F126  +
cmp dword ptr [esi-218h] 4 +
jnz loc_100F10A  +
mov eax [ebp+arg_0] +
mov eax dword_101D614[eax] +
test eax eax +
jz loc_100F10A  +
cmp [esi] eax +
ja loc_100F12B  +
add [ebp+arg_0] 18h +
inc [ebp+var_4]  +
add esi 220h +
cmp [ebp+arg_0] 1F8h +
jb loc_100F08C  +
jmp loc_100F146  +
and dword ptr [edi] 0 +
jmp loc_100F146  +
mov eax [ebp+var_4] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
mov ecx dword_101D614[ecx] +
mov [eax+ebx+384h] ecx +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
lea ecx [ebp+var_14] +
call sub_101292A  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100F1A6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F191  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F191  +
push offset dword_1002720  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80070057h +
lea ecx [ebp+var_14] +
call sub_101293C  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
push offset aAutoverifier  +
push offset aSoftwareMicr_1  +
lea eax [ebp+var_14] +
push offset aSS  +
push eax  +
call sub_10136DE  +
mov edi eax +
add esp 10h +
test edi edi +
jge loc_100F1EE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F196  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F196  +
push edi  +
push offset dword_1002720  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100F196  +
and dword ptr [esi] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 10h  +
push offset aAutoverifieren  +
lea ecx [ebp+var_14] +
mov [ebp+var_4] 4 +
call sub_1012949  +
push eax  +
push 80000001h  +
call ds:RegGetValueW  +
test eax eax +
jz loc_100F25C  +
cmp eax 2 +
jz loc_100F254  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F24A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F24A  +
push offset dword_1002720  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80004005h +
jmp loc_100F196  +
mov dword ptr [esi] 1 +
jmp loc_100F267  +
xor eax eax +
cmp [ebp+var_8] 1 +
setnz al  +
mov [esi] eax +
xor edi edi +
jmp loc_100F196  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:RegCreateKeyExW +
push edi  +
lea eax [ebp+dwDisposition] +
push eax  +
xor edi edi +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push 4  +
push edi  +
push edi  +
push edi  +
push offset aSoftwareMicr_1  +
push 80000001h  +
mov [ebp+phkResult] edi +
mov [ebp+hKey] edi +
call esi  +
test eax eax +
jz loc_100F2CD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F344  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F344  +
push offset dword_1002720  +
push 2Eh  +
jmp loc_100F339  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push edi  +
push 2  +
push 1  +
push edi  +
push edi  +
push offset aAutoverifier  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_100F305  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F344  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F344  +
push offset dword_1002720  +
push 2Fh  +
jmp loc_100F339  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push edi  +
push offset aAutoverifieren  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100F34B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F344  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F344  +
push offset dword_1002720  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 80004005h +
jmp loc_100F34D  +
xor ebx ebx +
mov esi ds:RegCloseKey +
cmp [ebp+phkResult] edi +
jz loc_100F360  +
push [ebp+phkResult]  +
call esi  +
mov [ebp+phkResult] edi +
cmp [ebp+hKey] edi +
jz loc_100F36A  +
push [ebp+hKey]  +
call esi  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_10] +
call sub_101292A  +
lea ecx [ebp+var_1C] +
call sub_101292A  +
lea ecx [ebp+var_28] +
call sub_101292A  +
lea ecx [ebp+var_34] +
call sub_101292A  +
and [ebp+var_48] 0 +
and [ebp+var_4] 0 +
xor eax eax +
lea edi [ebp+var_44] +
stos   +
stos   +
stos   +
stos   +
call sub_1013EB8  +
test eax eax +
jz loc_100F3E6  +
lea ecx [ebp+var_34] +
call sub_101293C  +
lea ecx [ebp+var_28] +
call sub_101293C  +
lea ecx [ebp+var_1C] +
call sub_101293C  +
lea ecx [ebp+var_10] +
call sub_101293C  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
call sub_1014DFD  +
test eax eax +
jnz loc_100F415  +
xor esi esi +
lea ecx [ebp+var_34] +
call sub_101293C  +
lea ecx [ebp+var_28] +
call sub_101293C  +
lea ecx [ebp+var_1C] +
call sub_101293C  +
lea ecx [ebp+var_10] +
call sub_101293C  +
mov eax esi +
jmp loc_100F3E0  +
push dword ptr [esi+0F8h]  +
lea ecx [ebp+var_10] +
push 1D57h  +
call sub_101321D  +
test eax eax +
jge loc_100F460  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F5A4  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100F5A4  +
push eax  +
push offset dword_1002720  +
push 31h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_100F5A4  +
push dword ptr [esi+0F8h]  +
lea ecx [ebp+var_1C] +
push 1D58h  +
call sub_101321D  +
test eax eax +
jge loc_100F49D  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F5A4  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100F5A4  +
push eax  +
push offset dword_1002720  +
push 32h  +
jmp loc_100F450  +
push dword ptr [esi+0F8h]  +
lea ecx [ebp+var_28] +
push 1D5Ah  +
call sub_101321D  +
test eax eax +
jge loc_100F4DD  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F5A4  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100F5A4  +
push eax  +
push offset dword_1002720  +
push 33h  +
jmp loc_100F450  +
push dword ptr [esi+0F8h]  +
lea ecx [ebp+var_34] +
push 1D5Bh  +
call sub_101321D  +
test eax eax +
jge loc_100F51D  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F5A4  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100F5A4  +
push eax  +
push offset dword_1002720  +
push 34h  +
jmp loc_100F450  +
lea ecx [ebp+var_10] +
call sub_1012949  +
lea ecx [ebp+var_1C] +
mov [ebp+var_48] eax +
call sub_1012949  +
lea ecx [ebp+var_28] +
mov [ebp+var_44] eax +
call sub_1012949  +
lea ecx [ebp+var_34] +
mov [ebp+var_40] eax +
call sub_1012949  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push dword ptr [esi+110h]  +
push [ebp+arg_0]  +
call WerpPromtUser  +
test eax eax +
jge loc_100F590  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F58A  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100F58A  +
push eax  +
push offset dword_1002720  +
push 35h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
and [ebp+var_4] 0 +
jmp loc_100F5A4  +
push offset aLastpromptedti  +
push offset aSoftwareMicr_1  +
push 80000001h  +
call sub_1011D0E  +
mov esi [ebp+var_4] +
jmp loc_100F3F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8C4h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor eax eax +
mov esi 446h +
push esi  +
push eax  +
mov word ptr [ebp+var_44C] ax +
lea eax [ebp+var_44C+2] +
push eax  +
call memset  +
xor eax eax +
push esi  +
push eax  +
mov word ptr [ebp+var_894] ax +
lea eax [ebp+var_894+2] +
push eax  +
call memset  +
add esp 18h +
lea ecx [ebp+var_8C4] +
call sub_1018914  +
push 0  +
push offset aErrorport  +
push offset aSoftwareMicr_6  +
push 1  +
lea ecx [ebp+var_8C4] +
call sub_1018859  +
mov esi eax +
test esi esi +
jge loc_100F659  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F73F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F73F  +
push esi  +
push offset dword_1002720  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100F73F  +
push 0  +
push 80000002h  +
lea ecx [ebp+var_8C4] +
call sub_10189DE  +
mov esi eax +
test esi esi +
jge loc_100F695  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F73F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F73F  +
push esi  +
push offset dword_1002720  +
push 37h  +
jmp loc_100F649  +
mov eax 430h +
mov word ptr [ebp+var_44C] ax +
add eax 18h +
mov word ptr [ebp+var_44C+2] ax +
mov eax [ebp+arg_0] +
mov [ebp+var_42C] eax +
push 2710h  +
lea eax [ebp+var_894] +
push eax  +
lea eax [ebp+var_44C] +
push eax  +
lea ecx [ebp+var_8C4] +
mov [ebp+var_434] 80000000h +
call sub_10189A2  +
push eax  +
call sub_1015588  +
test eax eax +
jl loc_100F716  +
mov ecx [ebp+var_874] +
or ecx 10000000h +
jge loc_100F73D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F73D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F73D  +
push ecx  +
push offset dword_1002720  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_100F738  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F73D  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100F73D  +
push eax  +
push offset dword_1002720  +
push 39h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
xor esi esi +
lea ecx [ebp+var_8C4] +
call sub_1018955  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10042AF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_C] +
call sub_101292A  +
push 0  +
mov ecx esi +
call sub_100F5B1  +
push 0  +
mov ecx esi +
call sub_100F273  +
mov ebx offset dword_1002720 +
mov edi offset Reserved +
test eax eax +
jge loc_100F7B2  +
mov eax Reserved +
cmp eax edi +
jz loc_100F7B2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F7B2  +
push ebx  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
lea ecx [esi+0FCh] +
call sub_1012949  +
push eax  +
lea eax [ebp+var_C] +
push offset aSoftwareMicr_4  +
push eax  +
call sub_10136DE  +
mov esi eax +
add esp 0Ch +
test esi esi +
jge loc_100F7F5  +
mov eax Reserved +
cmp eax edi +
jz loc_100F833  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F833  +
push esi  +
push ebx  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100F833  +
lea ecx [ebp+var_C] +
call sub_1012949  +
push eax  +
push 80000001h  +
call ds:RegDeleteKeyW  +
test eax eax +
jz loc_100F831  +
mov eax Reserved +
cmp eax edi +
jz loc_100F82A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F82A  +
push ebx  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_100F833  +
xor esi esi +
lea ecx [ebp+var_C] +
call sub_101293C  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 9  +
mov dword ptr [esi] offset off_10028E4 +
lea edi [esi+8] +
pop ebx  +
mov ecx edi +
call sub_100DC9C  +
add edi 18h +
dec ebx  +
jns loc_100F85E  +
lea ecx [esi+0FCh] +
call sub_101292A  +
lea ebx [esi+16Ch] +
mov edi ebx +
mov [ebp+var_4] 14h +
mov ecx edi +
call sub_100C7FA  +
add edi 220h +
dec [ebp+var_4]  +
jns loc_100F885  +
xor edi edi +
push 2CA0h  +
push edi  +
push ebx  +
mov [esi+4] edi +
mov [esi+0F8h] edi +
mov dword ptr [esi+108h] 1 +
mov [esi+110h] edi +
mov [esi+164h] edi +
call memset  +
push 50h  +
lea eax [esi+114h] +
push edi  +
push eax  +
call memset  +
add esp 18h +
mov [esi+168h] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push offset loc_100C813  +
mov esi ecx +
push 15h  +
push 220h  +
lea eax [esi+16Ch] +
push eax  +
mov dword ptr [esi] offset off_10028E4 +
call sub_100C823  +
lea ecx [esi+0FCh] +
call sub_101293C  +
push offset loc_100DCB7  +
push 0Ah  +
push 18h  +
lea eax [esi+8] +
push eax  +
call sub_100C823  +
mov dword ptr [esi] offset off_1001FE0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
lea ecx [ebp+var_C] +
call sub_101292A  +
lea ecx [esi+0FCh] +
call sub_1012949  +
push eax  +
lea eax [ebp+var_C] +
push offset aSoftwareMicr_4  +
push eax  +
call sub_10136DE  +
mov esi eax +
add esp 0Ch +
test esi esi +
jge loc_100F992  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F9DD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F9DD  +
push esi  +
push offset dword_1002720  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100F9DD  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
push 4  +
push offset aOriginalbucket  +
lea ecx [ebp+var_C] +
call sub_1012949  +
push eax  +
push 80000001h  +
call ds:RegSetKeyValueW  +
test eax eax +
jz loc_100F9DB  +
push eax  +
call sub_100629E  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F9DD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F9DD  +
push esi  +
push offset dword_1002720  +
push 22h  +
jmp loc_100F985  +
xor esi esi +
lea ecx [ebp+var_C] +
call sub_101293C  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
mov esi ecx +
lea ecx [ebp+var_14] +
call sub_101292A  +
lea ecx [esi+0FCh] +
call sub_1012949  +
push eax  +
lea eax [ebp+var_14] +
push offset aSoftwareMicr_4  +
push eax  +
call sub_10136DE  +
add esp 0Ch +
test eax eax +
jge loc_100FA51  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100FAB2  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100FAB2  +
push eax  +
push offset dword_1002720  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_100FAAD  +
push 4  +
pop esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 10h  +
push offset aOriginalbucket  +
lea ecx [ebp+var_14] +
mov [ebp+var_4] esi +
call sub_1012949  +
push eax  +
push 80000001h  +
call ds:RegGetValueW  +
test eax eax +
jnz loc_100FA85  +
cmp [ebp+var_4] esi +
jz loc_100FAB2  +
mov esi Reserved +
cmp esi offset Reserved +
jz loc_100FAB2  +
test byte ptr [esi+1Ch] 1 +
jz loc_100FAB2  +
push eax  +
call sub_100629E  +
push eax  +
push offset dword_1002720  +
push 24h  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_100DC70  +
mov esi [ebp+var_8] +
lea ecx [ebp+var_14] +
call sub_101293C  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hKey] 0 +
push ebx  +
push esi  +
mov esi [ebp+dwDisposition] +
mov ebx ecx +
test esi esi +
jnz loc_100FB0A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FB00  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FB00  +
push offset dword_1002720  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100FC14  +
push edi  +
push esi  +
call sub_100F01E  +
mov edi eax +
xor eax eax +
cmp edi eax +
jge loc_100FB3F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FC02  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FC02  +
push offset dword_1002720  +
push 26h  +
jmp loc_100FBF3  +
cmp [esi] eax +
jz loc_100FC00  +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+hKey] +
push ecx  +
push eax  +
push 5  +
push eax  +
push eax  +
push eax  +
push offset aSoftwareMicr_1  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_100FB94  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FB8D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FB8D  +
push offset dword_1002720  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80004005h +
jmp loc_100FC02  +
push esi  +
push 2  +
push offset aLastpromptedti  +
push 0  +
push [ebp+hKey]  +
call sub_1011C79  +
mov edi eax +
test edi edi +
jge loc_100FBC7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FC02  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FC02  +
push offset dword_1002720  +
push 28h  +
jmp loc_100FBF3  +
cmp dword ptr [esi] 0 +
jz loc_100FC00  +
push esi  +
mov ecx ebx +
call sub_100F154  +
mov edi eax +
test edi edi +
jge loc_100FC00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FC02  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FC02  +
push offset dword_1002720  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_100FC02  +
xor edi edi +
cmp [ebp+hKey] 0 +
jz loc_100FC11  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [ebp+hKey] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+var_C] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_100FC69  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FC5F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FC5F  +
push offset dword_1002720  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_100FE51  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
call sub_100FAC7  +
mov edi eax +
cmp edi ebx +
jge loc_100FC9F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FE2F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FE2F  +
push offset dword_1002720  +
push 3Bh  +
jmp loc_100FE24  +
cmp [ebp+var_C] ebx +
jnz loc_100FCCD  +
xor edi edi +
inc edi  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FE2F  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FE2F  +
push offset dword_1002720  +
push 3Ch  +
jmp loc_100FE24  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100F378  +
test eax eax +
jnz loc_100FD07  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FCFF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FCFF  +
push offset dword_1002720  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor edi edi +
inc edi  +
jmp loc_100FE2F  +
xor ebx ebx +
inc ebx  +
push ebx  +
mov ecx esi +
call sub_100F273  +
mov edi eax +
xor eax eax +
cmp edi eax +
jge loc_100FD3F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FE2F  +
test [eax+1Ch] bl +
jz loc_100FE2F  +
push offset dword_1002720  +
push 3Eh  +
jmp loc_100FE24  +
mov edi ds:RegCreateKeyExW +
push eax  +
lea ecx [ebp+hKey] +
push ecx  +
push eax  +
push 0F003Fh  +
push eax  +
push eax  +
push eax  +
push offset aSoftwareMicr_8  +
push 80000001h  +
call edi  +
test eax eax +
jnz loc_100FE07  +
cmp [ebp+hKey] eax +
jz loc_100FE07  +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+phkResult] +
push ecx  +
push eax  +
push 2  +
push ebx  +
push eax  +
push eax  +
lea ecx [esi+0FCh] +
call sub_1012949  +
push eax  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_100FDE8  +
cmp [ebp+phkResult] eax +
jz loc_100FDE8  +
push eax  +
push [ebp+phkResult]  +
lea eax [esi+16Ch] +
push 15h  +
push eax  +
call sub_1011D7E  +
mov edi eax +
test edi edi +
jge loc_100FDD6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FE2F  +
test [eax+1Ch] bl +
jz loc_100FE2F  +
push edi  +
push offset dword_1002720  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_100FE2F  +
push ebx  +
mov ecx esi +
call sub_100F5B1  +
mov [esi+164h] ebx +
xor edi edi +
jmp loc_100FE2F  +
mov edi 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FE2F  +
test [eax+1Ch] bl +
jz loc_100FE2F  +
push offset dword_1002720  +
push 40h  +
jmp loc_100FE24  +
mov edi 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FE2F  +
test [eax+1Ch] bl +
jz loc_100FE2F  +
push offset dword_1002720  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi ds:RegCloseKey +
xor ebx ebx +
cmp [ebp+phkResult] ebx +
jz loc_100FE44  +
push [ebp+phkResult]  +
call esi  +
mov [ebp+phkResult] ebx +
cmp [ebp+hKey] ebx +
jz loc_100FE4E  +
push [ebp+hKey]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F8E8  +
test byte ptr [ebp+8] 1 +
jz loc_100FE76  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jz loc_101009D  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101009D  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_101009D  +
push 58h  +
push 0  +
push dword ptr [ebp+0Ch]  +
call memset  +
add esp 0Ch +
and dword ptr [ebx] 0 +
mov eax [edi] +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100FEED  +
test dx dx +
jz loc_100FEE9  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100FEED  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100FEC7  +
xor eax eax +
jmp loc_100FEF2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100FF7D  +
mov ecx [edi+54h] +
cmp ecx 8 +
jz loc_100FF31  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FF27  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FF27  +
push ecx  +
push offset dword_1002720  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov ebx 80004005h +
jmp loc_1010099  +
and dword ptr [ebp+8] 0 +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_100EEE2  +
mov ebx eax +
test ebx ebx +
jge loc_100FF77  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010099  +
test byte ptr [eax+1Ch] 4 +
jz loc_1010099  +
push offset dword_1002720  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1010099  +
cmp dword ptr [ebp+8] 0 +
jnz loc_100FF87  +
mov ebx 80004001h +
jmp loc_1010099  +
mov ecx esi +
call sub_100F9F1  +
lea ebx [esi+14h] +
mov [ebp-8] eax +
mov [ebp+8] ebx +
add edi 8 +
mov dword ptr [ebp-4] 8 +
mov ecx [ebp+8] +
push dword ptr [edi-4]  +
add ecx 0FFFFFFF4h +
call sub_1012CBE  +
push dword ptr [edi]  +
mov ecx [ebp+8] +
call sub_1012CBE  +
add dword ptr [ebp+8] 18h +
add edi 8 +
dec dword ptr [ebp-4]  +
jnz loc_100FFA1  +
push dword ptr [esi+0F8h]  +
lea ecx [esi+0C8h] +
push 1D50h  +
call sub_101321D  +
push dword ptr [esi+4]  +
lea eax [esi+0D4h] +
push offset asc_10029D4  +
push eax  +
call sub_10136DE  +
add esp 0Ch +
push dword ptr [esi+0F8h]  +
lea ecx [esi+0E0h] +
push 1D61h  +
call sub_101321D  +
push dword ptr [ebp-8]  +
lea eax [esi+0ECh] +
push offset aU  +
push eax  +
call sub_10136DE  +
mov edi [ebp+0Ch] +
add esp 0Ch +
mov dword ptr [edi] offset aAutoverifierv2 +
add edi 8 +
mov dword ptr [ebp+8] 0Ah +
lea ecx [ebx-0Ch] +
call sub_1012949  +
mov ecx ebx +
mov [edi-4] eax +
call sub_1012949  +
mov [edi] eax +
add ebx 18h +
add edi 8 +
dec dword ptr [ebp+8]  +
jnz loc_1010032  +
mov eax [ebp+0Ch] +
mov dword ptr [eax+54h] 0Ah +
mov eax [ebp+10h] +
xor ebx ebx +
inc ebx  +
mov [eax] ebx +
mov ecx esi +
mov [esi+168h] ebx +
call sub_100F760  +
test eax eax +
jge loc_1010097  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010097  +
test [eax+1Ch] bl +
jz loc_1010097  +
push offset dword_1002720  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor ebx ebx +
mov eax ebx +
jmp loc_10100C6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10100C1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10100C1  +
push offset dword_1002720  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp-0Ch] +
call sub_101292A  +
xor ecx ecx +
cmp [ebp+8] ecx +
jz loc_10102EB  +
mov esi [ebp+0Ch] +
cmp esi ecx +
jz loc_10102EB  +
mov edi [ebp+10h] +
cmp edi ecx +
jz loc_10102EB  +
mov [edi] ecx +
mov eax [esi+4] +
cmp eax 0Ch +
jz loc_101011B  +
cmp eax 6 +
jnz loc_10101AB  +
cmp [ebx+168h] ecx +
jz loc_10101AB  +
lea eax [ebp+8] +
push eax  +
push dword ptr [esi]  +
mov [ebp+8] ecx +
call WerpGetReportFlags  +
mov edi eax +
test edi edi +
jge loc_101016D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10102D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10102D0  +
push edi  +
push offset dword_1002720  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10102D0  +
or dword ptr [ebp+8] 800h +
push dword ptr [ebp+8]  +
push dword ptr [esi]  +
call WerpSetReportFlags  +
mov edi eax +
test edi edi +
jge loc_10101A8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10102D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10102D0  +
push edi  +
push offset dword_1002720  +
push 1Dh  +
jmp loc_101015D  +
***
mov edi [ebp+10h] +
cmp dword ptr [esi+4] 9 +
jnz loc_10101D8  +
cmp dword ptr [esi+0Ch] 2 +
jnz loc_10101D8  +
push dword ptr [esi+10h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10101D8  +
mov eax [esi+10h] +
mov [ebx+110h] eax +
mov dword ptr [edi] 1 +
jmp loc_10102CE  +
mov eax [esi+4] +
cmp eax 3 +
jnz loc_1010224  +
cmp dword ptr [ebx+164h] 1 +
jnz loc_1010224  +
push dword ptr [esi+10h]  +
mov ecx ebx +
call sub_100F935  +
mov edi eax +
test edi edi +
jge loc_10102D0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10102D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10102D0  +
push edi  +
push offset dword_1002720  +
push 1Eh  +
jmp loc_101015D  +
***
cmp eax 1 +
jnz loc_10102DC  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_10102DC  +
cmp dword ptr [esi+10h] 0 +
jz loc_10102DC  +
push offset aAutoverifier  +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10102DC  +
push dword ptr [esi+10h]  +
lea eax [ebx+16Ch] +
push 15h  +
push offset off_101D608  +
push 15h  +
push eax  +
call sub_1011FC6  +
mov edi eax +
test edi edi +
jge loc_101029B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10102D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10102D0  +
push offset dword_1002720  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10102D0  +
push dword ptr [esi]  +
mov ecx ebx +
call sub_100FC1F  +
mov edi eax +
test edi edi +
jge loc_10102C5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10102D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10102D0  +
push offset dword_1002720  +
push 20h  +
jmp loc_101028E  +
***
mov eax [ebp+10h] +
mov dword ptr [eax] 1 +
xor edi edi +
lea ecx [ebp-0Ch] +
call sub_101293C  +
mov eax edi +
jmp loc_101031C  +
lea ecx [ebp-0Ch] +
call sub_101293C  +
mov eax 80004001h +
jmp loc_101031C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101030F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101030F  +
push offset dword_1002720  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
lea ecx [ebp-0Ch] +
call sub_101293C  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
lea ecx [ebp+var_24] +
call sub_101292A  +
lea ecx [ebp+var_18] +
call sub_101292A  +
lea ecx [ebp+var_C] +
call sub_101292A  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_10104B3  +
cmp [ebp+arg_4] 0 +
jz loc_10104B3  +
push esi  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_4]  +
call sub_10165C0  +
mov esi eax +
test esi esi +
jge loc_10103A2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010496  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010496  +
push offset dword_10029DC  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1010496  +
push [ebp+arg_8]  +
lea eax [ebp+var_C] +
push offset a08x  +
push eax  +
call sub_10136DE  +
mov esi eax +
add esp 0Ch +
test esi esi +
jge loc_10103DF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010496  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010496  +
push offset dword_10029DC  +
push 0Fh  +
jmp loc_1010392  +
push [ebp+arg_C]  +
lea eax [ebp+var_18] +
push offset asc_1002A14  +
push eax  +
call sub_10136DE  +
mov esi eax +
add esp 0Ch +
test esi esi +
jge loc_101041F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010496  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010496  +
push offset dword_10029DC  +
push 10h  +
jmp loc_1010392  +
lea ecx [ebp+var_24] +
mov [ebp+var_34] ebx +
call sub_1012949  +
lea ecx [ebp+var_C] +
mov [ebp+var_30] eax +
call sub_1012949  +
lea ecx [ebp+var_18] +
mov [ebp+var_2C] eax +
call sub_1012949  +
push 2710h  +
push 0  +
push 0  +
push 0  +
push 4  +
mov [ebp+var_28] eax +
lea eax [ebp+var_34] +
push eax  +
push offset aApplicationErr  +
push 1  +
push 64h  +
push 0C00003EDh  +
call sub_1015100  +
mov esi eax +
test esi esi +
jge loc_1010494  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010496  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010496  +
push esi  +
push offset dword_10029DC  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1010496  +
xor esi esi +
lea ecx [ebp+var_C] +
call sub_101293C  +
lea ecx [ebp+var_18] +
call sub_101293C  +
lea ecx [ebp+var_24] +
call sub_101293C  +
mov eax esi +
pop esi  +
jmp loc_10104D0  +
lea ecx [ebp+var_C] +
call sub_101293C  +
lea ecx [ebp+var_18] +
call sub_101293C  +
lea ecx [ebp+var_24] +
call sub_101293C  +
mov eax 80070057h +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jz loc_10106C3  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_10106C3  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_10106C3  +
push 58h  +
push 0  +
push edi  +
call memset  +
mov eax [ebp+8] +
add esp 0Ch +
and dword ptr [ebx] 0 +
mov eax [eax] +
mov [ebp+0Ch] eax +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1010547  +
test dx dx +
jz loc_1010543  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1010547  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1010521  +
xor eax eax +
jmp loc_101054C  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1010579  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10105A9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10105A9  +
push dword ptr [ebp+0Ch]  +
push offset dword_10029DC  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
jmp loc_10105A9  +
mov eax [ebp+8] +
mov ecx [eax+54h] +
cmp ecx 8 +
jz loc_10105B3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10105A9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10105A9  +
push ecx  +
push offset dword_10029DC  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov eax 80004005h +
jmp loc_10106EC  +
cmp dword ptr [esi+4] 0C0000006h +
jz loc_10105C4  +
and dword ptr [ebx] 0 +
jmp loc_10106BF  +
push dword ptr [esi+14h]  +
lea ecx [esi+63Ch] +
push 1D4Eh  +
call sub_101321D  +
push dword ptr [esi+8]  +
mov ebx offset a08x_0 +
lea eax [esi+648h] +
push ebx  +
push eax  +
call sub_10136DE  +
add esp 0Ch +
push dword ptr [esi+14h]  +
lea ecx [esi+654h] +
push 1D4Fh  +
call sub_101321D  +
push dword ptr [esi+10h]  +
lea eax [esi+660h] +
push ebx  +
push eax  +
call sub_10136DE  +
add esp 0Ch +
lea ecx [esi+63Ch] +
call sub_1012949  +
lea ecx [esi+648h] +
mov [edi+4] eax +
call sub_1012949  +
lea ecx [esi+654h] +
mov [edi+8] eax +
call sub_1012949  +
lea ecx [esi+660h] +
mov [edi+0Ch] eax +
call sub_1012949  +
mov [edi+10h] eax +
cmp dword ptr [esi+1Ch] 0 +
jz loc_10106A9  +
push dword ptr [esi+14h]  +
lea ebx [esi+66Ch] +
push 1D5Ch  +
mov ecx ebx +
call sub_101321D  +
lea eax [esi+24h] +
push eax  +
call sub_1016739  +
push eax  +
add esi 678h +
push offset aS  +
push esi  +
call sub_10136DE  +
add esp 0Ch +
mov ecx ebx +
call sub_1012949  +
mov ecx esi +
mov [edi+14h] eax +
call sub_1012949  +
mov [edi+18h] eax +
mov dword ptr [edi] offset aInpagecofire +
mov dword ptr [edi+54h] 3 +
jmp loc_10106B6  +
mov dword ptr [edi] offset aInpageerror +
mov dword ptr [edi+54h] 2 +
mov eax [ebp+10h] +
mov dword ptr [eax] 1 +
xor eax eax +
jmp loc_10106EC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10106E7  +
test byte ptr [eax+1Ch] 1 +
jz loc_10106E7  +
push offset dword_10029DC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44Ch +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [ebp+var_44C] +
mov [ebp+var_440] esi +
call sub_101292A  +
lea ecx [ebp+var_43C] +
call sub_101292A  +
xor ebx ebx +
push 424h  +
lea eax [ebp+me.th32ModuleID] +
push ebx  +
push eax  +
mov [ebp+me.dwSize] ebx +
call memset  +
add esp 0Ch +
lea ecx [ebp+var_44C] +
mov [ebp+var_430] ebx +
call sub_10133E7  +
lea eax [ebp+var_44C] +
push eax  +
lea ecx [ebp+var_43C] +
call sub_1013561  +
cmp eax ebx +
jge loc_10107A5  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1010941  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1010941  +
push eax  +
push offset dword_10029DC  +
push 21h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_1010941  +
push offset aSvchost_exe  +
lea ecx [ebp+var_43C] +
call sub_1012E45  +
cmp eax ebx +
jge loc_10107DF  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1010941  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1010941  +
push eax  +
push offset dword_10029DC  +
push 22h  +
jmp loc_1010795  +
lea ecx [ebp+var_43C] +
call sub_1012949  +
push eax  +
lea eax [esi+434h] +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1010941  +
call sub_1013923  +
test eax eax +
jz loc_1010941  +
push edi  +
push dword ptr [esi+18h]  +
call ds:__imp_GetProcessId  +
push eax  +
push 8  +
call CreateToolhelp32Snapshot  +
mov edi eax +
cmp edi ebx +
jnz loc_1010863  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101091D  +
test byte ptr [eax+1Ch] 1 +
jz loc_101091D  +
call ds:__imp_GetLastError  +
push eax  +
push offset dword_10029DC  +
push 23h  +
mov eax Reserved +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_101091D  +
lea eax [ebp+me] +
push eax  +
mov esi 428h +
push edi  +
mov [ebp+me.dwSize] esi +
call Module32FirstW  +
test eax eax +
jnz loc_10108A9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101091D  +
test byte ptr [eax+1Ch] 1 +
jz loc_101091D  +
call ds:__imp_GetLastError  +
push eax  +
push offset dword_10029DC  +
push 24h  +
jmp loc_101084E  +
lea eax [ebp+var_44C] +
push eax  +
lea ecx [ebp+var_43C] +
call sub_1013561  +
push offset aWdi_dll  +
lea ecx [ebp+var_43C] +
call sub_101364A  +
lea ecx [ebp+var_43C] +
call sub_1012949  +
push eax  +
lea eax [ebp+me.szExePath] +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1010913  +
push esi  +
lea eax [ebp+me] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+me] +
push eax  +
push edi  +
mov [ebp+me.dwSize] esi +
call Module32NextW  +
test eax eax +
jnz loc_10108CB  +
jmp loc_101091D  +
mov [ebp+var_430] 1 +
cmp edi ebx +
jz loc_1010928  +
push edi  +
call ds:__imp_CloseHandle  +
pop edi  +
cmp [ebp+var_430] ebx +
jz loc_1010941  +
mov eax [ebp+var_440] +
mov dword ptr [eax+690h] 5 +
lea ecx [ebp+var_43C] +
call sub_101293C  +
lea ecx [ebp+var_44C] +
call sub_101293C  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_430] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1010984  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_1010989  +
mov ecx offset aNull_2 +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 2  +
mov dword ptr [esi] offset off_1002A90 +
lea edi [esi+63Ch] +
pop ebx  +
mov ecx edi +
call sub_100DC9C  +
add edi 18h +
dec ebx  +
jns loc_10109B4  +
xor eax eax +
xor ecx ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+688h] eax +
mov [esi+68Ch] eax +
mov [esi+690h] eax +
pop edi  +
mov [esi+434h] cx +
mov [esi+24h] cx +
mov [esi+22Ch] cx +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push offset loc_100DCB7  +
mov esi ecx +
push 3  +
push 18h  +
lea eax [esi+63Ch] +
push eax  +
mov dword ptr [esi] offset off_1002A90 +
call sub_100C823  +
mov dword ptr [esi] offset off_1001FE0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
lea edx [ecx+24h] +
push esi  +
mov eax edx +
push edi  +
lea ebx [eax+2] +
xor esi esi +
mov di [eax] +
inc eax  +
inc eax  +
cmp di si +
jnz loc_1010A48  +
sub eax ebx +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+var_40] edx +
lea edx [ecx+434h] +
mov [ebp+var_38] eax +
mov eax edx +
mov [ebp+var_3C] esi +
mov [ebp+var_34] esi +
lea edi [eax+2] +
mov bx [eax] +
inc eax  +
inc eax  +
cmp bx si +
jnz loc_1010A71  +
sub eax edi +
sar eax 1 +
lea eax [eax+eax+2] +
push 4  +
mov [ebp+var_30] edx +
mov [ebp+var_28] eax +
lea eax [ecx+4] +
lea edx [ecx+8] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_10] edx +
lea edx [ebp+var_40] +
push edx  +
push eax  +
push offset dword_1001F70  +
push dword ptr [ecx+68Ch]  +
mov [ebp+var_2C] esi +
push dword ptr [ecx+688h]  +
mov [ebp+var_24] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] eax +
mov [ebp+var_14] esi +
mov [ebp+var_C] esi +
mov [ebp+var_8] eax +
mov [ebp+var_4] esi +
call ds:EventWrite  +
mov edi eax +
cmp edi esi +
jz loc_1010AF7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010AF7  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010AF7  +
push edi  +
push offset dword_10029DC  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi ecx +
lea ebx [esi+24h] +
cmp word ptr [ebx] 0 +
jz loc_1010B88  +
and [ebp+var_28] 0 +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
push 5Ch  +
lea edi [ebp+var_24] +
push ebx  +
stos   +
call wcsrchr  +
pop ecx  +
pop ecx  +
pop edi  +
test eax eax +
jz loc_1010B39  +
lea ebx [eax+2] +
test ebx ebx +
jnz loc_1010B42  +
mov ebx offset aNotAvailable +
push ebx  +
lea eax [ebp+var_28] +
push eax  +
call sub_1010970  +
mov eax [esi+8] +
mov ecx [esi+4] +
mov [ebp+var_1C] eax +
xor eax eax +
inc eax  +
mov [ebp+var_20] eax +
mov [ebp+var_18] eax +
mov [ebp+var_10] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_14] ecx +
mov ecx [esi+690h] +
push 5  +
mov [ebp+var_C] ecx +
mov ecx [ebp+arg_0] +
push 0D7Eh  +
push 0  +
mov [ebp+var_4] ecx +
call WinSqmAddToStream  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1010BAE  +
cmp edx 7FFFFFFFh +
jbe loc_1010BB0  +
mov eax ecx +
test eax eax +
jl loc_1010BD9  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1010BC9  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_1010BD9  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_101295A  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010A06  +
test byte ptr [ebp+8] 1 +
jz loc_1010BFC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+hObject] +
stos   +
stos   +
stos   +
push 44h  +
stos   +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
mov ebx ecx +
call memset  +
add esp 0Ch +
mov esi 104h +
push esi  +
lea eax [ebp+CommandLine] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jnz loc_1010C94  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1010C6C  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010DE0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010DE0  +
push offset dword_10029DC  +
push 15h  +
jmp loc_1010D5B  +
cmp eax esi +
jb loc_1010CC3  +
mov edi 8007007Ah +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010DE0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010DE0  +
push offset dword_10029DC  +
push 16h  +
jmp loc_1010D5B  +
lea eax [ebp+CommandLine] +
push eax  +
push offset aSSystem32Cofir  +
lea eax [ebp+ApplicationName] +
push esi  +
push eax  +
call sub_100937B  +
mov edi eax +
add esp 10h +
test edi edi +
jge loc_1010D08  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010DE0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010DE0  +
push offset dword_10029DC  +
push 17h  +
jmp loc_1010D5B  +
lea eax [ebx+434h] +
push eax  +
add ebx 22Ch +
push ebx  +
lea eax [ebp+ApplicationName] +
push eax  +
push offset aSSS  +
lea eax [ebp+CommandLine] +
push esi  +
push eax  +
call sub_100937B  +
mov edi eax +
xor esi esi +
add esp 18h +
cmp edi esi +
jge loc_1010D68  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010DE0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010DE0  +
push offset dword_10029DC  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1010DE0  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push esi  +
push esi  +
push 8000000h  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+CommandLine] +
push eax  +
lea eax [ebp+ApplicationName] +
push eax  +
mov [ebp+StartupInfo.cb] 44h +
call ds:__imp_CreateProcessW  +
test eax eax +
jnz loc_1010DDE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1010DC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010DC6  +
push offset dword_10029DC  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
call ds:__imp_GetLastError  +
cmp eax esi +
jle loc_1010DDA  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_1010DE0  +
xor edi edi +
cmp [ebp+hObject] 0 +
mov esi ds:__imp_CloseHandle +
jz loc_1010DF7  +
push [ebp+hObject]  +
call esi  +
cmp dword ptr [ebp-420h] 0 +
jz loc_1010E08  +
push dword ptr [ebp-420h]  +
call esi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1010E2E  +
call sub_1010C08  +
mov eax [esi+688h] +
mov ecx [esi+68Ch] +
mov edx eax +
or edx ecx +
jz loc_1010E56  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi+688h] 0 +
and dword ptr [esi+68Ch] 0 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 42Ch +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
push 206h  +
mov [ebp+Buffer] ax +
xor esi esi +
lea eax [ebp-41Ah] +
push esi  +
push eax  +
mov [ebp+var_428] edi +
call memset  +
add esp 0Ch +
mov [ebp+var_420] esi +
cmp ebx esi +
jz loc_1011010  +
cmp edi esi +
jz loc_1011010  +
cmp [ebp+arg_8] esi +
jz loc_1011010  +
mov esi offset aDeviceLanmanre +
push esi  +
xor eax eax +
push ebx  +
mov [edi] ax +
call sub_1011C00  +
cmp eax ebx +
jnz loc_1010F0C  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010EDC  +
sub eax edx +
sar eax 1 +
lea eax [ebx+eax*2] +
push eax  +
push offset aS_0  +
push [ebp+arg_8]  +
push edi  +
call sub_100937B  +
add esp 10h +
test eax eax +
jl loc_1011015  +
jmp loc_101100C  +
lea eax [ebp+Buffer] +
push eax  +
push 103h  +
call ds:GetLogicalDriveStringsW  +
test eax eax +
jz loc_101100C  +
mov esi offset asc_1002B20 +
lea edi [ebp+DeviceName] +
movs   +
movs   +
lea edi [ebp+Buffer] +
mov eax ebx +
mov [ebp+var_424] edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010F42  +
sub eax edx +
sar eax 1 +
mov [ebp+var_42C] eax +
xor eax eax +
mov [ebp+TargetPath] ax +
mov ax [edi] +
mov word ptr [ebp+DeviceName] ax +
push 103h  +
lea eax [ebp+TargetPath] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
call ds:QueryDosDeviceW  +
test eax eax +
jz loc_1010FE3  +
lea eax [ebp+TargetPath] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010F89  +
sub eax edx +
sar eax 1 +
mov edi eax +
cmp edi [ebp+var_42C] +
jnb loc_1010FE3  +
lea eax [ebp+TargetPath] +
push eax  +
push ebx  +
call sub_1011C00  +
mov esi eax +
sub esi ebx +
neg esi  +
sbb esi esi +
inc esi  +
mov [ebp+var_420] esi +
jz loc_1010FE9  +
lea eax [ebx+edi*2] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
push offset aSS_1  +
push [ebp+arg_8]  +
push [ebp+var_428]  +
call sub_100937B  +
add esp 14h +
test eax eax +
jl loc_1011015  +
jmp loc_1010FE9  +
mov esi [ebp+var_420] +
mov edi [ebp+var_424] +
mov ax [edi] +
inc edi  +
inc edi  +
test ax ax +
jnz loc_1010FEF  +
mov [ebp+var_424] edi +
test esi esi +
jnz loc_101100C  +
cmp [edi] si +
jnz loc_1010F5F  +
xor eax eax +
jmp loc_1011015  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test ebx ebx +
jz loc_101112B  +
cmp [ebp+arg_8] 0 +
jz loc_101112B  +
xor eax eax +
push offset aPsapi_dll  +
mov word ptr [ebp+var_414] ax +
mov [ebx] ax +
call sub_1013F92  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_10110B1  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011109  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011109  +
push offset dword_10029DC  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1011109  +
push offset aGetmappedfilen  +
push eax  +
call ds:__imp_GetProcAddress  +
test eax eax +
jnz loc_10110D9  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10110D5  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1011109  +
push 410h  +
lea ecx [ebp+var_414] +
push ecx  +
push edi  +
push dword ptr [esi+18h]  +
call eax  +
test eax eax +
jz loc_10110C1  +
push [ebp+arg_8]  +
lea eax [ebp+var_414] +
push ebx  +
push eax  +
mov ecx esi +
call sub_1010E5F  +
mov esi eax +
test esi esi +
jl loc_101110D  +
xor esi esi +
test esi esi +
jge loc_1011112  +
xor eax eax +
mov [ebx] ax +
cmp [ebp+hLibModule] 0 +
jz loc_1011127  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax esi +
jmp loc_1011130  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
xor edi edi +
xor ebx ebx +
test eax eax +
jnz loc_1011190  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101118C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101118C  +
push offset dword_10029DC  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
jmp loc_10111F5  +
push esi  +
movzx esi word ptr [eax] +
xor ecx ecx +
xor edx edx +
cmp si 5Ch +
setnz dl  +
mov [ebp+RootPathName] cx +
mov ecx eax +
dec edx  +
and edx 3 +
inc edx  +
test si si +
pop esi  +
jz loc_10111C5  +
cmp edi edx +
jge loc_10111C7  +
cmp word ptr [ecx] 5Ch +
jnz loc_10111BE  +
inc edi  +
inc ecx  +
inc ecx  +
cmp [ecx] bx +
jnz loc_10111B3  +
cmp edi edx +
jnz loc_10111F3  +
sub ecx eax +
sar ecx 1 +
push ecx  +
push eax  +
push 104h  +
lea eax [ebp+RootPathName] +
push eax  +
call sub_1010B93  +
test eax eax +
jl loc_10111F3  +
lea eax [ebp+RootPathName] +
push eax  +
call ds:GetDriveTypeW  +
mov ebx eax +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 42Ch +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+hFindFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov edi 208h +
push edi  +
push eax  +
mov [ebp+hLibModule] eax +
mov [ebp+var_424] eax +
lea eax [ebp+var_20C] +
mov ebx ecx +
mov esi 104h +
push eax  +
mov [ebp+var_428] ebx +
mov [ebp+var_420] esi +
call memset  +
add esp 0Ch +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_1011453  +
cmp eax esi +
jnb loc_1011453  +
movzx eax [ebp+Buffer] +
push eax  +
add ebx 24h +
call tolower  +
movzx ecx word ptr [ebx] +
push ecx  +
mov [ebp+hLibModule] eax +
call tolower  +
pop ecx  +
pop ecx  +
mov ecx [ebp+hLibModule] +
cmp ecx eax +
jnz loc_10114AA  +
push offset aSfc_os_dll  +
call sub_1013F92  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_10112E7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011477  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011477  +
push offset dword_10029DC  +
push 1Dh  +
jmp loc_101146C  +
push offset aSfcisfileprote  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [ebp+var_42C] eax +
test eax eax +
jnz loc_1011323  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011477  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011477  +
push offset dword_10029DC  +
push 1Eh  +
jmp loc_101146C  +
mov ebx [ebp+var_428] +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_420] +
push eax  +
push 0  +
lea eax [ebx+24h] +
push eax  +
call ds:FindFirstFileNameW  +
mov [ebp+hFindFile] eax +
test eax eax +
jz loc_1011477  +
cmp eax 0FFFFFFFFh +
jz loc_1011477  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1013A36  +
test eax eax +
jz loc_10113E7  +
lea eax [ebp+var_20C] +
push eax  +
push 0  +
call [ebp+var_42C]  +
test eax eax +
jz loc_101140B  +
mov ecx ebx +
call sub_10106F8  +
test eax eax +
jnz loc_101140B  +
mov ax [ebx+24h] +
push 3Ah  +
mov [ebx+22Ch] ax +
pop eax  +
mov [ebx+22Eh] ax +
lea eax [ebp+var_20C] +
push eax  +
push 102h  +
add ebx 230h +
push ebx  +
call sub_1006418  +
test eax eax +
jge loc_1011447  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011477  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011477  +
push offset dword_10029DC  +
push 20h  +
jmp loc_101146C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101140B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101140B  +
push offset dword_10029DC  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
push edi  +
lea eax [ebp+var_20C] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_420] +
push eax  +
push [ebp+hFindFile]  +
mov [ebp+var_420] esi +
call ds:FindNextFileNameW  +
test eax eax +
jnz loc_101135A  +
jmp loc_1011477  +
mov [ebp+var_424] 1 +
jmp loc_1011477  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10114AA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10114AA  +
push offset dword_10029DC  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
cmp [ebp+hLibModule] 0 +
jz loc_101148C  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
cmp [ebp+hFindFile] 0 +
jz loc_10114AA  +
cmp [ebp+hFindFile] 0FFFFFFFFh +
jz loc_10114AA  +
push [ebp+hFindFile]  +
call ds:FindClose  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_424] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
mov dword ptr [ebp-4] 80004005h +
mov dword ptr [ebp-8] 1 +
mov [esi+14h] eax +
test edi edi +
jnz loc_1011518  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101150E  +
test byte ptr [eax+1Ch] 1 +
jz loc_101150E  +
push offset dword_10029DC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1011797  +
mov eax [edi] +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1011545  +
test dx dx +
jz loc_1011541  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1011545  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101151F  +
xor eax eax +
jmp loc_101154A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
push ebx  +
test eax eax +
jnz loc_10116C9  +
mov ebx [edi+58h] +
test ebx ebx +
jnz loc_101157D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011757  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011757  +
push offset dword_10029DC  +
push 0Bh  +
jmp loc_10115AB  +
mov eax [ebx+14h] +
mov [esi+18h] eax +
mov edi [ebx+0Ch] +
test edi edi +
jnz loc_10115BB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011757  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011757  +
push offset dword_10029DC  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1011757  +
lea eax [esi+688h] +
push eax  +
push 0  +
push 0  +
push offset dword_1001F5C  +
call ds:EventRegister  +
test eax eax +
jz loc_1011621  +
jg loc_10115DC  +
mov [ebp-4] eax +
jmp loc_10115ED  +
mov ecx eax +
and ecx 0FFFFh +
or ecx 80070000h +
mov [ebp-4] ecx +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1011751  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1011751  +
push eax  +
push offset dword_10029DC  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_1011751  +
mov eax [edi] +
mov ecx 0C0000006h +
mov [esi+4] eax +
cmp eax ecx +
jz loc_1011652  +
cmp eax 0C0000096h +
jz loc_1011652  +
cmp eax 0C000001Dh +
jz loc_1011652  +
cmp eax 0C000007Bh +
jz loc_1011652  +
cmp eax 0C000001Eh +
jz loc_1011652  +
cmp eax 0C000012Fh +
jnz loc_10116C9  +
mov eax [edi+1Ch] +
mov [esi+8] eax +
cmp [esi+4] ecx +
jnz loc_1011679  +
cmp eax 0C000009Ch +
jz loc_1011679  +
cmp eax 0C0000185h +
jz loc_1011679  +
and dword ptr [ebp-8] 0 +
mov dword ptr [esi+690h] 6 +
mov eax [edi+18h] +
push 104h  +
lea edi [esi+24h] +
push edi  +
push eax  +
mov ecx esi +
call sub_101102B  +
mov [ebp-4] eax +
test eax eax +
jl loc_10116A1  +
push edi  +
mov ecx esi +
call sub_1011146  +
mov [esi+10h] eax +
jmp loc_10116A5  +
and dword ptr [esi+10h] 0 +
push dword ptr [esi+10h]  +
mov ecx esi +
push dword ptr [esi+8]  +
push dword ptr [ebx]  +
push edi  +
call sub_1010328  +
cmp dword ptr [esi+10h] 4 +
jnz loc_10116D5  +
push dword ptr [ebx]  +
mov ecx esi +
call sub_1011146  +
cmp eax 4 +
jz loc_10116D5  +
mov dword ptr [ebp-4] 80004001h +
jmp loc_1011757  +
mov eax [esi+10h] +
cmp eax 3 +
jz loc_10116F2  +
xor ecx ecx +
cmp eax 4 +
setnz cl  +
add ecx 3 +
and dword ptr [ebp-8] 0 +
mov [esi+690h] ecx +
push dword ptr [ebx]  +
lea eax [esi+434h] +
push 104h  +
push eax  +
call sub_1006418  +
cmp dword ptr [ebp-8] 0 +
jz loc_1011714  +
mov ecx esi +
call sub_101120A  +
jmp loc_1011716  +
xor eax eax +
mov [esi+1Ch] eax +
test eax eax +
jz loc_1011729  +
mov dword ptr [esi+690h] 2 +
jmp loc_1011751  +
cmp dword ptr [ebp-8] 0 +
jz loc_1011751  +
mov ecx esi +
mov dword ptr [esi+690h] 7 +
call sub_1010A33  +
test eax eax +
jle loc_101174E  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-4] eax +
cmp dword ptr [ebp-4] 0 +
jge loc_1011789  +
mov eax [esi+688h] +
mov ecx [esi+68Ch] +
mov edx eax +
or edx ecx +
jz loc_101177F  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi+688h] 0 +
and dword ptr [esi+68Ch] 0 +
mov dword ptr [esi+690h] 1 +
push dword ptr [ebp-4]  +
mov ecx esi +
call sub_1010B03  +
mov eax [ebp-4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0FE8h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push 0FE0h  +
lea eax [ebp+var_FE4] +
push edi  +
push eax  +
mov [ebp+Buffer] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
call sub_10155AC  +
cmp eax edi +
jge loc_1011818  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1011831  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1011831  +
push eax  +
push offset dword_1002BB8  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_1011831  +
mov eax [esi+0Ch] +
mov eax [eax+0Ch] +
cmp eax [ebp+var_FE0] +
jb loc_1011831  +
cmp eax [ebp+var_FE4] +
ja loc_1011831  +
xor edi edi +
inc edi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10042AF  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi ecx +
mov ebx 80004005h +
test esi esi +
jnz loc_101188C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011882  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011882  +
push offset dword_1002BB8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_101197D  +
mov eax [esi] +
mov ecx offset aAppcrash +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10118B9  +
test dx dx +
jz loc_10118B5  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10118B9  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1011893  +
xor eax eax +
jmp loc_10118BE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101196E  +
mov eax [ebp+10h] +
mov [edi+0E4h] eax +
mov ecx [esi+58h] +
test ecx ecx +
jnz loc_10118F9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101197B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101197B  +
push offset dword_1002BB8  +
push 0Ch  +
jmp loc_1011919  +
mov esi [ecx+0Ch] +
test esi esi +
jnz loc_1011926  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101197B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101197B  +
push offset dword_1002BB8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_101197B  +
mov eax [esi] +
mov [edi+4] eax +
cmp eax 0C0000409h +
jz loc_1011975  +
cmp eax 0C0000417h +
jz loc_1011975  +
cmp eax 0C000000Dh +
jz loc_1011975  +
cmp eax 0C0000005h +
jnz loc_1011954  +
push 8  +
pop eax  +
cmp [esi+14h] eax +
jnz loc_1011954  +
mov [edi+8] eax +
jmp loc_1011979  +
push ecx  +
mov ecx edi +
call sub_10117A2  +
test eax eax +
jz loc_101196E  +
mov eax [esi] +
mov [edi+4] eax +
mov dword ptr [edi+8] 0BADC0DE1h +
jmp loc_1011979  +
mov ebx 80004001h +
jmp loc_101197B  +
and dword ptr [edi+8] 0 +
xor ebx ebx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jz loc_1011B42  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1011B42  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_1011B42  +
push 58h  +
push 0  +
push dword ptr [ebp+0Ch]  +
call memset  +
add esp 0Ch +
and dword ptr [ebx] 0 +
mov ebx [edi] +
mov ecx offset aAppcrash +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10119F6  +
test dx dx +
jz loc_10119F2  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10119F6  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10119D0  +
xor eax eax +
jmp loc_10119FB  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1011A26  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011A53  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011A53  +
push ebx  +
push offset dword_1002BB8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
jmp loc_1011A53  +
mov ecx [edi+54h] +
cmp ecx 8 +
jz loc_1011A5D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011A53  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011A53  +
push ecx  +
push offset dword_1002BB8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov eax 80004005h +
jmp loc_1011B6B  +
lea eax [esi+18h] +
mov [ebp-8] eax +
mov [ebp+8] eax +
lea ebx [edi+8] +
mov dword ptr [ebp-4] 6 +
mov ecx [ebp+8] +
push dword ptr [ebx-4]  +
add ecx 0FFFFFFF4h +
call sub_1012CBE  +
push dword ptr [ebx]  +
mov ecx [ebp+8] +
call sub_1012CBE  +
add dword ptr [ebp+8] 18h +
add ebx 8 +
dec dword ptr [ebp-4]  +
jnz loc_1011A70  +
push dword ptr [edi+34h]  +
lea ecx [esi+0B4h] +
call sub_1012CBE  +
push dword ptr [edi+38h]  +
lea ecx [esi+0C0h] +
call sub_1012CBE  +
push dword ptr [edi+3Ch]  +
lea ecx [esi+9Ch] +
call sub_1012CBE  +
push dword ptr [edi+40h]  +
lea ecx [esi+0A8h] +
call sub_1012CBE  +
push dword ptr [esi+0E4h]  +
lea ecx [esi+0CCh] +
push 1D4Dh  +
call sub_101321D  +
push dword ptr [esi+8]  +
add esi 0D8h +
push offset a08x_0  +
push esi  +
call sub_10136DE  +
mov edi [ebp+0Ch] +
mov ebx [ebp-8] +
add esp 0Ch +
mov dword ptr [edi] offset aBex +
lea esi [edi+8] +
mov dword ptr [ebp+0Ch] 9 +
lea ecx [ebx-0Ch] +
call sub_1012949  +
mov ecx ebx +
mov [esi-4] eax +
call sub_1012949  +
mov [esi] eax +
add ebx 18h +
add esi 8 +
dec dword ptr [ebp+0Ch]  +
jnz loc_1011B0F  +
mov eax [ebp+10h] +
mov dword ptr [edi+54h] 9 +
mov dword ptr [eax] 1 +
xor eax eax +
jmp loc_1011B6B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011B66  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011B66  +
push offset dword_1002BB8  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 8  +
mov dword ptr [esi] offset off_1002BD0 +
lea edi [esi+0Ch] +
pop ebx  +
mov ecx edi +
call sub_100DC9C  +
add edi 18h +
dec ebx  +
jns loc_1011B8A  +
xor eax eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0E4h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push offset loc_100DCB7  +
mov esi ecx +
push 9  +
push 18h  +
lea eax [esi+0Ch] +
push eax  +
mov dword ptr [esi] offset off_1002BD0 +
call sub_100C823  +
mov dword ptr [esi] offset off_1001FE0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011BB0  +
test byte ptr [ebp+8] 1 +
jz loc_1011BF4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+arg_0] eax +
jz loc_1011C66  +
sub eax [ebp+arg_4] +
mov edi eax +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 0 +
mov esi [ebp+arg_4] +
jz loc_1011C51  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1011C6F  +
push eax  +
call towlower  +
movzx ebx ax +
movzx eax word ptr [edi+esi] +
push eax  +
call towlower  +
movzx eax ax +
sub eax ebx +
pop ecx  +
pop ecx  +
jnz loc_1011C51  +
inc esi  +
inc esi  +
cmp [edi+esi] ax +
jnz loc_1011C25  +
cmp word ptr [esi] 0 +
jz loc_1011C6F  +
add [ebp+arg_0] 2 +
mov eax [ebp+arg_0] +
inc edi  +
inc edi  +
cmp word ptr [eax] 0 +
jnz loc_1011C19  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_0] +
jmp loc_1011C68  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
cmp [ebp+lpSubKey] edi +
jnz loc_1011C94  +
cmp [ebp+hKey] edi +
jz loc_1011CDA  +
cmp [ebp+arg_8] edi +
jz loc_1011CDA  +
mov esi [ebp+arg_10] +
cmp esi edi +
jz loc_1011CDA  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
mov [esi] edi +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call sub_101491D  +
test eax eax +
jl loc_1011CD6  +
cmp [ebp+var_4] edi +
jz loc_1011CD0  +
mov eax [ebp+var_8] +
push 18h  +
xor edx edx +
pop ecx  +
div  ecx +
cmp eax [ebp+arg_C] +
jbe loc_1011CD6  +
mov dword ptr [esi] 1 +
xor eax eax +
jmp loc_1011D03  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011CFE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011CFE  +
push offset dword_1002BE8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101471E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1011D3C  +
mov eax [ebp+arg_0] +
jb loc_1011D33  +
cmp eax 0FFFFFFFFh +
ja loc_1011D3C  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1011D47  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1011D6A  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1011D75  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+phkResult] edi +
mov [ebp+var_C] edi +
mov [ebp+cbData] edi +
cmp esi edi +
jz loc_1011F92  +
mov eax [ebp+hKey] +
cmp eax edi +
jz loc_1011F92  +
push ebx  +
cmp [ebp+lpSubKey] edi +
jz loc_1011E13  +
push edi  +
lea ecx [ebp+phkResult] +
push ecx  +
push edi  +
push 2  +
push edi  +
push edi  +
push edi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1011DD6  +
cmp [ebp+phkResult] edi +
jz loc_1011DD6  +
mov [ebp+var_C] 1 +
jmp loc_1011E19  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_1011DEA  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011F04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011F04  +
push ebx  +
push offset dword_1002BE8  +
push 15h  +
jmp loc_1011F57  +
mov [ebp+phkResult] eax +
mov [ebp+var_C] edi +
mov [ebp+lpSubKey] edi +
cmp [ebp+arg_4] edi +
jbe loc_1011F02  +
mov edi ds:RegSetValueExW +
add esi 20Ch +
lea eax [esi+0Ch] +
cmp dword ptr [eax+4] 0 +
jz loc_1011EED  +
mov ecx [esi-20Ch] +
dec ecx  +
jz loc_1011E91  +
sub ecx 3 +
jnz loc_1011EED  +
push 4  +
push eax  +
push 4  +
push ecx  +
lea eax [esi-208h] +
push eax  +
push [ebp+phkResult]  +
call edi  +
test eax eax +
jz loc_1011EED  +
mov ebx 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011F04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011F04  +
push offset dword_1002BE8  +
push 16h  +
jmp loc_1011F82  +
mov ecx esi +
call sub_1012951  +
test eax eax +
jz loc_1011EED  +
lea eax [ebp+cbData] +
push eax  +
push 1  +
mov ecx esi +
call sub_1012951  +
push eax  +
call sub_1011D50  +
mov ebx eax +
test ebx ebx +
jl loc_1011F21  +
mov eax [ebp+cbData] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+cbData] +
push ecx  +
push edx  +
push eax  +
call sub_1011D1E  +
mov ebx eax +
test ebx ebx +
jl loc_1011F3D  +
push [ebp+cbData]  +
mov ecx esi +
call sub_1012949  +
push eax  +
push 1  +
push 0  +
lea eax [esi-208h] +
push eax  +
push [ebp+phkResult]  +
call edi  +
test eax eax +
jnz loc_1011F64  +
inc [ebp+lpSubKey]  +
mov eax [ebp+lpSubKey] +
add esi 220h +
cmp eax [ebp+arg_4] +
jb loc_1011E31  +
xor ebx ebx +
cmp [ebp+phkResult] 0 +
jz loc_1011F19  +
cmp [ebp+var_C] 1 +
jnz loc_1011F19  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax ebx +
pop ebx  +
jmp loc_1011FBB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011F04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011F04  +
push ebx  +
push offset dword_1002BE8  +
push 17h  +
jmp loc_1011F57  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011F04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011F04  +
push ebx  +
push offset dword_1002BE8  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1011F04  +
mov ebx 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011F04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011F04  +
push offset dword_1002BE8  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1011F04  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1011FB6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011FB6  +
push offset dword_1002BE8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea ecx [ebp+var_14] +
call sub_101292A  +
cmp [ebp+arg_10] 0 +
jz loc_1012346  +
mov ebx [ebp+arg_4] +
cmp ebx [ebp+arg_C] +
jnz loc_1012346  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1012346  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1012346  +
xor ecx ecx +
push 14h  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1012051  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012047  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012047  +
push offset dword_1002BE8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 8007000Eh +
jmp loc_101231B  +
and [ebp+arg_C] 0 +
test ebx ebx +
jbe loc_10120D7  +
add esi 4 +
add edi 4 +
mov eax [esi] +
mov [edi-4] eax +
mov eax [esi+4] +
mov [edi+218h] eax +
mov eax [esi-4] +
test eax eax +
jz loc_1012144  +
push eax  +
push 104h  +
push edi  +
call sub_1006418  +
mov ebx eax +
test ebx ebx +
jl loc_1012172  +
mov eax [esi] +
dec eax  +
jz loc_10120A3  +
sub eax 3 +
jnz loc_10120C0  +
mov eax [esi+0Ch] +
mov [edi+214h] eax +
jmp loc_10120C0  +
mov eax [esi+10h] +
test eax eax +
jz loc_10120C0  +
push eax  +
lea ecx [edi+208h] +
call sub_1012CBE  +
mov ebx eax +
test ebx ebx +
jl loc_10121A4  +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
add esi 18h +
add edi 220h +
cmp eax [ebp+arg_4] +
jb loc_101205F  +
mov edi [ebp+arg_0] +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_10121F7  +
mov esi [ebp+var_8] +
mov eax [ebp+arg_8] +
add esi 8 +
mov [ebp+arg_C] eax +
add edi 4 +
mov eax [ebp+arg_C] +
push dword ptr [eax]  +
push offset aS_1  +
push 104h  +
push edi  +
call sub_100937B  +
mov ebx eax +
add esp 10h +
test ebx ebx +
jl loc_1012231  +
mov [esi-8] edi +
mov eax [edi-4] +
dec eax  +
jz loc_10121C8  +
sub eax 3 +
jnz loc_10121DB  +
lea eax [edi+214h] +
mov dword ptr [esi] 4 +
mov dword ptr [esi+4] offset loc_1018656 +
jmp loc_10121D8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012168  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012168  +
push offset dword_1002BE8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 8000FFFFh +
jmp loc_1012312  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012312  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012312  +
push ebx  +
push offset dword_1002BE8  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1012312  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012312  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012312  +
push ebx  +
push offset dword_1002BE8  +
push 0Fh  +
jmp loc_1012194  +
and dword ptr [esi] 0 +
lea eax [edi+208h] +
mov dword ptr [esi+4] offset loc_10186AF +
mov [esi-4] eax +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add [ebp+arg_C] 18h +
add edi 220h +
add esi 14h +
cmp eax [ebp+arg_4] +
jb loc_10120F4  +
push [ebp+arg_10]  +
lea ecx [ebp+var_14] +
call sub_1012CBE  +
mov ebx eax +
xor esi esi +
cmp ebx esi +
jge loc_1012258  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012312  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012312  +
push ebx  +
push offset dword_1002BE8  +
push 11h  +
jmp loc_1012194  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012312  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012312  +
push ebx  +
push offset dword_1002BE8  +
push 10h  +
jmp loc_1012194  +
push esi  +
push esi  +
push offset asc_10023BC  +
push offset asc_10023B8  +
lea ecx [ebp+var_14] +
call sub_1013748  +
mov ebx eax +
cmp ebx esi +
jge loc_1012299  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012312  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012312  +
push ebx  +
push offset dword_1002BE8  +
push 12h  +
jmp loc_1012194  +
push [ebp+arg_4]  +
lea ecx [ebp+var_14] +
push [ebp+var_8]  +
call sub_1012951  +
push eax  +
lea ecx [ebp+var_14] +
call sub_1012949  +
push eax  +
call sub_1018732  +
mov [ebp+arg_10] esi +
cmp [ebp+arg_4] esi +
jbe loc_1012310  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_8] +
add esi 218h +
add edi 0Ch +
push dword ptr [edi-0Ch]  +
lea eax [esi-214h] +
push 104h  +
push eax  +
call sub_1006418  +
mov ebx eax +
test ebx ebx +
jl loc_1012327  +
cmp dword ptr [esi-218h] 4 +
jnz loc_10122FC  +
mov eax [edi] +
test eax eax +
jz loc_10122FC  +
cmp [esi] eax +
jbe loc_10122FC  +
mov [esi] eax +
inc [ebp+arg_10]  +
mov eax [ebp+arg_10] +
add edi 18h +
add esi 220h +
cmp eax [ebp+arg_4] +
jb loc_10122CD  +
xor ebx ebx +
push [ebp+var_8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
lea ecx [ebp+var_14] +
call sub_101293C  +
mov eax ebx +
jmp loc_1012377  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012312  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012312  +
push ebx  +
push offset dword_1002BE8  +
push 13h  +
jmp loc_1012194  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101236A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101236A  +
push offset dword_1002BE8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
lea ecx [ebp+var_14] +
call sub_101293C  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_1012487  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_1012447  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_101247E  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1012437  +
retn   +
***
jmp ds:__CxxFrameHandler3  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101D00C +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101D00C +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101D00C +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101D00C +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_10042AF  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_10042AF  +
jmp __EH_epilog3  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1012437  +
retn   +
***
jmp ds:_purecall  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10042AF  +
jmp __SEH_epilog4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_1012858  +
cmp [ebp+arg_4] esi +
jz loc_1012858  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_10127FF  +
sub eax edx +
sar eax 1 +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1012816  +
sub eax ecx +
sar eax 1 +
mov ebx eax +
cmp [ebp+var_4] ebx +
jb loc_101287C  +
push ebx  +
push [ebp+arg_4]  +
push edi  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1012850  +
cmp [ebp+arg_8] 0 +
jnz loc_101287C  +
mov eax [ebp+var_4] +
inc esi  +
inc edi  +
sub eax ebx +
inc edi  +
cmp esi eax +
jbe loc_101282B  +
jmp loc_101287C  +
mov eax [ebp+arg_0] +
lea eax [eax+esi*2] +
jmp loc_101287E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101287C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101287C  +
push offset dword_1002C10  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10127E3  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
xor edx edx +
mov [ecx] edx +
mov [ecx+4] edx +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov ecx [ecx+8] +
test eax eax +
jz loc_10128E3  +
test ecx ecx +
jbe loc_10128E3  +
movzx edx word ptr [eax] +
test dx dx +
jz loc_10128E3  +
cmp dx [ebp+arg_0] +
jnz loc_10128DE  +
mov dx [ebp+arg_4] +
mov [eax] dx +
inc eax  +
inc eax  +
dec ecx  +
jnz loc_10128C9  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1012914  +
cmp [ebp+arg_0] edi +
jz loc_101290F  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
jmp loc_1012914  +
xor ecx ecx +
mov [eax] cx +
mov [esi+8] edi +
cmp [ebp+arg_0] edi +
jz loc_101291F  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_101298F  +
cmp [ebp+arg_4] eax +
jz loc_101298B  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_101298B  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_101296E  +
test esi esi +
jnz loc_1012997  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10129A5  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
xor ebx ebx +
mov [ebp-14h] ebx +
cmp [ebp+8] ebx +
jz loc_1012B2E  +
mov edi [ebp+0Ch] +
cmp edi ebx +
jz loc_1012B2E  +
mov eax [ebp+8] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_10129DC  +
push ebx  +
sub eax esi +
mov esi eax +
push ebx  +
lea eax [esi+1] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-18h] esi +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
cmp eax ebx +
jnz loc_1012A3E  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012B2A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012B2A  +
push offset dword_1002C10  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1012B2A  +
lea ecx [ebp-14h] +
push ecx  +
push 1  +
push eax  +
call sub_1011D50  +
test eax eax +
jge loc_1012A76  +
mov esi 80070216h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012B2A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012B2A  +
push offset dword_1002C10  +
push 0Ch  +
jmp loc_1012A2E  +
mov eax [ebp-14h] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
mov [edi] ebx +
mov [ebp-4] ebx +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [edi] eax +
jmp loc_1012AA5  +
mov eax offset loc_1012A9D +
retn   +
mov edi [ebp+0Ch] +
mov esi [ebp-18h] +
xor ebx ebx +
mov eax [edi] +
cmp eax ebx +
jnz loc_1012AD6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012ACF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012ACF  +
push offset dword_1002C10  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 8007000Eh +
jmp loc_1012B2A  +
push dword ptr [ebp-14h]  +
inc esi  +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_1012B28  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012B0F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012B0F  +
push offset dword_1002C10  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov esi eax +
cmp esi ebx +
jl loc_1012B2A  +
mov esi 80004005h +
jmp loc_1012B2A  +
xor esi esi +
mov eax esi +
jmp loc_1012B57  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012B52  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012B52  +
push offset dword_1002C10  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
call __EH_epilog3  +
retn 8  +
***
xor eax eax +
cmp [ecx] eax +
jz locret_1012B70  +
cmp [ecx+8] eax +
jbe locret_1012B70  +
inc eax  +
retn   +
***
xor eax eax +
cmp [ecx] eax +
jz loc_1012B81  +
cmp [ecx+8] eax +
jnz locret_1012B84  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_1012BC5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012BBE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012BBE  +
push offset dword_1002C10  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1012BDE  +
push 1  +
call sub_10128EE  +
push edi  +
mov [esi] edi +
call ds:lstrlenW  +
mov [esi+8] eax +
inc eax  +
mov [esi+4] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1012C02  +
cmp edx ebx +
jbe loc_1012C07  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_1012C3E  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_1012C2B  +
cmp [eax] cx +
jz loc_1012C27  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1012C1D  +
cmp esi ecx +
jnz loc_1012C34  +
mov [ebp+arg_4] 80070057h +
jmp loc_1012C38  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_1012C40  +
xor ecx ecx +
test eax eax +
jl loc_1012C54  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_101295A  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1012C75  +
cmp ecx 7FFFFFFFh +
jbe loc_1012C7A  +
mov eax 80070057h +
test eax eax +
jl loc_1012CB5  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1012CA5  +
cmp eax esi +
ja loc_1012CA5  +
jnz loc_1012CB0  +
jmp loc_1012CAA  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-18h] esi +
mov eax [ebp+8] +
xor edi edi +
mov [ebp-14h] edi +
cmp eax edi +
jnz loc_1012CE7  +
push 1  +
call sub_10128EE  +
jmp loc_1012E36  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1012CEA  +
sub eax edx +
sar eax 1 +
mov ebx eax +
mov [ebp-1Ch] ebx +
cmp ebx 10000h +
jbe loc_1012D34  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012D2A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012D2A  +
push ebx  +
push offset dword_1002C10  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov eax 80070057h +
jmp loc_1012E38  +
lea eax [ebp-14h] +
push eax  +
push 1  +
push ebx  +
call sub_1011D50  +
test eax eax +
jge loc_1012D7A  +
mov edi 80070216h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012E36  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012E36  +
push offset dword_1002C10  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1012E36  +
mov edi [ebp-14h] +
cmp edi [esi+4] +
ja loc_1012D87  +
cmp dword ptr [esi] 0 +
jnz loc_1012DF7  +
push 1  +
mov ecx esi +
call sub_10128EE  +
and dword ptr [ebp-4] 0 +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
jmp loc_1012DBE  +
mov eax offset loc_1012DB5 +
retn   +
mov esi [ebp-18h] +
mov ebx [ebp-1Ch] +
mov edi [ebp-14h] +
mov eax [esi] +
test eax eax +
jnz loc_1012DEF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012DE8  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012DE8  +
push offset dword_1002C10  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 8007000Eh +
jmp loc_1012E36  +
xor ecx ecx +
mov [eax] cx +
mov [esi+4] edi +
push dword ptr [ebp+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_1006418  +
mov edi eax +
test edi edi +
jge loc_1012E31  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012E36  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012E36  +
push edi  +
push offset dword_1002C10  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1012E36  +
mov [esi+8] ebx +
xor edi edi +
mov eax edi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor edi edi +
mov [ebp-14h] edi +
cmp [ebp+8] edi +
jnz loc_1012E67  +
xor eax eax +
jmp loc_1013026  +
mov eax [ebp+8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1012E6D  +
sub eax edx +
sar eax 1 +
mov ebx eax +
jz loc_1013024  +
mov eax [esi+8] +
mov ecx [esi+4] +
lea edx [eax+ebx] +
cmp edx ecx +
jnb loc_1012EE0  +
mov edx [esi] +
test edx edx +
jz loc_1012EE0  +
push dword ptr [ebp+8]  +
push ecx  +
push edx  +
call sub_1012BE9  +
mov edi eax +
test edi edi +
jge loc_1012ED8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013024  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013024  +
push edi  +
push offset dword_1002C10  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1013024  +
add [esi+8] ebx +
jmp loc_1013010  +
and [ebp-18h] edi +
lea ecx [ebp-18h] +
push ecx  +
inc eax  +
push eax  +
push ebx  +
call sub_1011D50  +
test eax eax +
jge loc_1012F29  +
mov edi 80070216h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013024  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013024  +
push offset dword_1002C10  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1013024  +
mov ebx [ebp-18h] +
and dword ptr [ebp-4] 0 +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
jmp loc_1012F58  +
mov eax offset loc_1012F52 +
retn   +
mov esi [ebp-1Ch] +
mov ebx [ebp-18h] +
mov ecx [ebp-14h] +
test ecx ecx +
jnz loc_1012F8D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012F83  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012F83  +
push offset dword_1002C10  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 8007000Eh +
jmp loc_1013024  +
xor eax eax +
mov [ecx] ax +
mov eax [esi] +
test eax eax +
jz loc_1012FCD  +
push eax  +
push ebx  +
push ecx  +
call sub_1006418  +
mov edi eax +
test edi edi +
jge loc_1012FCD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013012  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013012  +
push edi  +
push offset dword_1002C10  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1013012  +
push dword ptr [ebp+8]  +
push ebx  +
push dword ptr [ebp-14h]  +
call sub_1012BE9  +
mov edi eax +
test edi edi +
jge loc_1012FFB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013012  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013012  +
push edi  +
push offset dword_1002C10  +
push 1Bh  +
jmp loc_1012FC0  +
push 1  +
mov ecx esi +
call sub_10128EE  +
mov eax [ebp-14h] +
mov [esi+4] ebx +
dec ebx  +
mov [esi] eax +
mov [esi+8] ebx +
xor edi edi +
mov eax [ebp-14h] +
test eax eax +
jz loc_1013024  +
cmp [esi] eax +
jz loc_1013024  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
cmp [ebp+0Ch] edi +
jnz loc_101307A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013070  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013070  +
push offset dword_1002C10  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1013212  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call _vscwprintf  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi 0FFFFFFFFh +
jnz loc_10130BC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10130B2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10130B2  +
push offset dword_1002C10  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_1013210  +
cmp esi 10000h +
jbe loc_10130F2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10130E8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10130E8  +
push offset dword_1002C10  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80070057h +
jmp loc_1013210  +
mov ebx [ebp+8] +
mov ecx [ebx+4] +
inc esi  +
mov [ebp-1Ch] esi +
cmp ecx esi +
jb loc_101310C  +
mov eax [ebx] +
cmp eax edi +
jz loc_101310C  +
mov edi eax +
mov esi ecx +
jmp loc_101317C  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov [ebp-4] edi +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov edi eax +
jmp loc_1013141  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1013138 +
retn   +
mov ebx [ebp+8] +
mov edi [ebp-18h] +
mov esi [ebp-1Ch] +
test edi edi +
jnz loc_1013175  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101316B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101316B  +
push edi  +
push esi  +
push offset dword_1002C10  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10127B7  +
mov esi 8007000Eh +
jmp loc_1013210  +
mov dword ptr [ebp-14h] 1 +
push dword ptr [ebp+10h]  +
xor eax eax +
push dword ptr [ebp+0Ch]  +
mov [edi] ax +
push esi  +
push edi  +
call sub_1012C5F  +
mov esi eax +
test esi esi +
jge loc_10131BB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013203  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013203  +
push esi  +
push offset dword_1002C10  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1013203  +
cmp dword ptr [ebp-14h] 0 +
jz loc_10131EB  +
push edi  +
mov ecx ebx +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jge loc_1013201  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013203  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013203  +
push esi  +
push offset dword_1002C10  +
push 22h  +
jmp loc_10131AE  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10131F0  +
sub eax edx +
sar eax 1 +
mov [ebx+8] eax +
xor esi esi +
cmp dword ptr [ebp-14h] 0 +
jz loc_1013210  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 200h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1013265  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101325B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101325B  +
push offset dword_1002C10  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 8007000Eh +
jmp loc_10132E8  +
push 100h  +
push edi  +
push [ebp+uID]  +
xor eax eax +
push [ebp+hInstance]  +
mov [edi] ax +
call ds:LoadStringW  +
test eax eax +
jz loc_10132AE  +
push edi  +
mov ecx esi +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jge loc_10132AA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10132E1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10132E1  +
push esi  +
push offset dword_1002C10  +
push 24h  +
jmp loc_10132D6  +
xor esi esi +
jmp loc_10132E1  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10132E1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10132E1  +
push esi  +
push offset dword_1002C10  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp [ecx+8] eax +
jbe loc_101331F  +
mov edx [ecx] +
push esi  +
xor esi esi +
cmp [ebp+arg_4] 0 +
mov [edx+eax*2] si +
mov [ecx+8] eax +
pop esi  +
jz loc_101331F  +
push offset a___  +
call sub_1012E45  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
test esi esi +
jz loc_10133DA  +
push ebx  +
mov ebx [edi] +
jmp loc_1013367  +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jnz loc_1013365  +
cmp [ebp+arg_0] eax +
jz loc_101337D  +
movzx eax word ptr [ebx] +
push eax  +
push [ebp+arg_0]  +
call wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101337D  +
inc ebx  +
inc ebx  +
movzx eax word ptr [ebx] +
test ax ax +
jnz loc_1013343  +
push offset dword_100156C  +
mov ecx edi +
call sub_1012CBE  +
jmp loc_10133D9  +
mov eax [edi] +
lea esi [eax+esi*2-2] +
jmp loc_10133AC  +
movzx eax word ptr [esi] +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jnz loc_10133AA  +
cmp [ebp+arg_0] eax +
jz loc_10133B0  +
movzx eax word ptr [esi] +
push eax  +
push [ebp+arg_0]  +
call wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10133B0  +
dec esi  +
dec esi  +
cmp esi ebx +
ja loc_1013385  +
xor eax eax +
mov [esi+2] ax +
mov eax [edi] +
sub esi ebx +
inc esi  +
inc esi  +
sar esi 1 +
mov [edi+8] esi +
cmp ebx eax +
jbe loc_10133D9  +
cmp [edi+4] esi +
jbe loc_10133D9  +
lea ecx [esi+esi+2] +
push ecx  +
push ebx  +
push eax  +
call memmove  +
add esp 0Ch +
pop ebx  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 40h  +
lea eax [ebp+Buffer] +
push eax  +
mov esi ecx +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_1013437  +
cmp eax 40h +
ja loc_1013437  +
lea eax [ebp+Buffer] +
push eax  +
mov ecx esi +
call sub_1012CBE  +
test eax eax +
jl loc_1013443  +
push offset SubBlock  +
mov ecx esi +
call sub_1012E45  +
jmp loc_1013443  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] 0 +
push esi  +
push 40h  +
lea eax [ebp+Buffer] +
mov esi ecx +
push eax  +
jz loc_1013484  +
call ds:GetSystemWow64DirectoryW  +
jmp loc_101348A  +
call ds:GetSystemDirectoryW  +
test eax eax +
jz loc_10134B9  +
cmp eax 40h +
ja loc_10134B9  +
lea eax [ebp+Buffer] +
push eax  +
mov ecx esi +
call sub_1012CBE  +
test eax eax +
jl loc_10134C5  +
cmp [ebp+arg_4] 0 +
jnz loc_10134C5  +
push offset SubBlock  +
mov ecx esi +
call sub_1012E45  +
jmp loc_10134C5  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10042AF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx ecx +
test eax eax +
jz loc_101354D  +
cmp byte ptr [eax] 0 +
jz loc_101354D  +
push esi  +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_10129B1  +
mov edi [ebp+var_4] +
mov esi eax +
test esi esi +
jl loc_1013517  +
test edi edi +
jz loc_1013517  +
push edi  +
mov ecx ebx +
call sub_1012CBE  +
mov esi eax +
jmp loc_101353C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101353C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101353C  +
push esi  +
push offset dword_1002C10  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
test edi edi +
jz loc_1013547  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
jmp loc_1013557  +
push offset dword_100156C  +
call sub_1012CBE  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call sub_1012CBE  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov [ebp-1Ch] ecx +
lea eax [ebp-14h] +
push eax  +
push 1  +
push dword ptr [ebp+0Ch]  +
xor esi esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
call sub_1011D50  +
test eax eax +
jge loc_10135D1  +
mov esi 80070216h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101363B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101363B  +
push offset dword_1002C10  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_101363B  +
mov eax [ebp-14h] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
mov [ebp-4] esi +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov edi eax +
jmp loc_1013601  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10135FE +
retn   +
mov edi [ebp-18h] +
test edi edi +
jnz loc_101360C  +
mov esi 8007000Eh +
jmp loc_101363B  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push edi  +
call sub_1010B93  +
mov esi eax +
test esi esi +
jge loc_1013629  +
cmp esi 8007007Ah +
jnz loc_1013634  +
mov ecx [ebp-1Ch] +
push edi  +
call sub_1012CBE  +
mov esi eax +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_0] 0 +
push ebx  +
mov ebx ecx +
jnz loc_1013661  +
xor eax eax +
jmp loc_10136BC  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10129B1  +
mov edi [ebp+var_4] +
mov esi eax +
test esi esi +
jl loc_1013688  +
test edi edi +
jz loc_1013688  +
push edi  +
mov ecx ebx +
call sub_1012E45  +
mov esi eax +
jmp loc_10136AD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10136AD  +
test byte ptr [eax+1Ch] 1 +
jz loc_10136AD  +
push esi  +
push offset dword_1002C10  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
test edi edi +
jz loc_10136B8  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call sub_1012E45  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_1013714  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101370D  +
test byte ptr [eax+1Ch] 1 +
jz loc_101370D  +
push offset dword_1002C10  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop ebp  +
retn   +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013033  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1000000h  +
push [ebp+uID]  +
call sub_101321D  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-18h] ecx +
mov edi [ecx] +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-20h] ebx +
mov eax [ebp+8] +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1013770  +
push dword ptr [ebp+8]  +
sub eax ecx +
sar eax 1 +
push edi  +
mov [ebp-14h] eax +
call sub_101288A  +
mov esi eax +
cmp esi ebx +
jz loc_1013808  +
movzx ebx word ptr [esi] +
xor eax eax +
push edi  +
lea ecx [ebp-24h] +
mov [esi] ax +
call sub_1012E45  +
mov edi eax +
mov [esi] bx +
test edi edi +
jl loc_1013832  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-24h] +
call sub_1012E45  +
mov edi eax +
test edi edi +
jl loc_1013858  +
mov eax [ebp-14h] +
inc dword ptr [ebp-10h]  +
cmp dword ptr [ebp+14h] 0 +
lea edi [esi+eax*2] +
jnz loc_10137E1  +
push dword ptr [ebp+8]  +
push edi  +
call sub_101288A  +
mov esi eax +
test esi esi +
jnz loc_1013790  +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1013808  +
push edi  +
lea ecx [ebp-24h] +
call sub_1012E45  +
mov edi eax +
test edi edi +
jl loc_101380E  +
mov ecx [ebp-18h] +
lea eax [ebp-24h] +
push eax  +
call sub_1013561  +
mov edi eax +
test edi edi +
jl loc_101380E  +
xor edi edi +
test edi edi +
jge loc_1013812  +
or dword ptr [ebp-10h] 0FFFFFFFFh +
mov eax [ebp+10h] +
test eax eax +
jz loc_101381E  +
mov ecx [ebp-10h] +
mov [eax] ecx +
push 1  +
lea ecx [ebp-24h] +
call sub_10128EE  +
mov eax edi +
call __EH_epilog3  +
retn 10h  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101380A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101380A  +
push offset dword_1002C10  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_101380A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101380A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101380A  +
push edi  +
push offset dword_1002C10  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_101380A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1013561  +
test eax eax +
jge loc_10138AD  +
push offset dword_101AA88  +
lea eax [ebp+arg_0] +
push eax  +
mov [ebp+arg_0] 8007000Eh +
call _CxxThrowException  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
mov [ebp+var_14] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_1013989  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10139BF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10139BF  +
push offset dword_1002C38  +
push 2Fh  +
jmp loc_10139B4  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_10139BF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10139BF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10139BF  +
push offset dword_1002C38  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
cmp [ebp+pSid] ebx +
pop ebx  +
jz loc_10139CE  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_14] +
xor ecx ebp +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1013A03  +
mov eax [esi] +
test eax eax +
jz loc_1013A03  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi] 0 +
pop ecx  +
xor eax eax +
jmp loc_1013A2C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013A27  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013A27  +
push offset dword_1002C38  +
push 58h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
lea ecx [ebp-18h] +
call sub_101292A  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1016864  +
test eax eax +
jge loc_1013A8C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013B06  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013B06  +
push offset dword_1002C38  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1013B06  +
lea ecx [ebp-18h] +
call sub_1012949  +
push eax  +
call ds:GetFileAttributesW  +
test al 10h +
jnz loc_1013ADC  +
cmp eax 0FFFFFFFFh +
jz loc_1013ADC  +
push 0  +
push 0  +
push 3  +
push 0  +
push 3  +
push 1  +
lea ecx [ebp-18h] +
call sub_1012949  +
push eax  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_1013B06  +
push eax  +
call ds:__imp_CloseHandle  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
xor eax eax +
inc eax  +
jmp loc_1013B14  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1013B06  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1013B06  +
push eax  +
push dword ptr [ebp+8]  +
push offset dword_1002C38  +
push 5Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10049DA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hProcess] 0 +
jz loc_1013B74  +
cmp [ebp+lpBaseAddress] 0 +
jz loc_1013B74  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_1013B74  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 8  +
push [ebp+NumberOfBytesRead]  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call ds:__imp_ReadProcessMemory  +
test eax eax +
jnz loc_1013B67  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1013B9D  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1013B9D  +
cmp [ebp+NumberOfBytesRead] 8 +
sbb eax eax +
and eax 8007001Eh +
jmp loc_1013B9D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013B98  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013B98  +
push offset dword_1002C38  +
push 5Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hProcess] 0 +
jz loc_1013BF9  +
cmp [ebp+lpBaseAddress] 0 +
jz loc_1013BF9  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_1013BF9  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 50h  +
push [ebp+NumberOfBytesRead]  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call ds:__imp_ReadProcessMemory  +
test eax eax +
jnz loc_1013BEC  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1013C22  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1013C22  +
cmp [ebp+NumberOfBytesRead] 50h +
sbb eax eax +
and eax 8007001Eh +
jmp loc_1013C22  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013C1D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013C1D  +
push offset dword_1002C38  +
push 5Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov esi 2CCh +
push esi  +
push [ebp+NumberOfBytesRead]  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call ds:__imp_ReadProcessMemory  +
test eax eax +
jnz loc_1013C64  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1013C6E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1013C6E  +
cmp [ebp+NumberOfBytesRead] esi +
sbb eax eax +
and eax 8007001Eh +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push edi  +
xor ebx ebx +
xor eax eax +
lea edi [ebp+lpBaseAddress] +
mov [ebp+var_8] ebx +
stos   +
mov edi [ebp+hProcess] +
cmp edi ebx +
jz loc_1013D51  +
cmp [ebp+arg_4] ebx +
jz loc_1013D51  +
cmp [ebp+arg_8] ebx +
jz loc_1013D51  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_1013B21  +
mov esi eax +
cmp esi ebx +
jl loc_1013D27  +
cmp [ebp+var_8] ebx +
jz loc_1013D27  +
push [ebp+arg_8]  +
push [ebp+var_8]  +
push edi  +
call sub_1013BA6  +
mov esi eax +
cmp esi ebx +
jge loc_1013CF0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013D4C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013D4C  +
push esi  +
push offset dword_1002C38  +
push 61h  +
jmp loc_1013D41  +
cmp [ebp+NumberOfBytesRead] ebx +
jz loc_1013D23  +
push [ebp+NumberOfBytesRead]  +
push [ebp+lpBaseAddress]  +
push edi  +
call sub_1013C2B  +
mov esi eax +
cmp esi ebx +
jge loc_1013D23  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013D4C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013D4C  +
push esi  +
push offset dword_1002C38  +
push 62h  +
jmp loc_1013D41  +
xor esi esi +
jmp loc_1013D4C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013D4C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013D4C  +
push esi  +
push offset dword_1002C38  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov eax esi +
pop esi  +
jmp loc_1013D7A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013D75  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013D75  +
push offset dword_1002C38  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
call __EH_prolog3  +
lea ecx [ebp-3Ch] +
call sub_1018914  +
xor edi edi +
mov [ebp-4] edi +
mov esi offset aSoftwareMicr_5 +
jmp loc_1013DF7  +
push 100h  +
push 80000002h  +
lea ecx [ebp-3Ch] +
call sub_10189DE  +
test eax eax +
jl loc_1013E09  +
lea ecx [ebp-3Ch] +
call sub_10189B4  +
cmp eax edi +
jbe loc_1013E09  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013DEC  +
test byte ptr [eax+1Ch] 4 +
jz loc_1013DEC  +
push esi  +
push offset dword_1002C38  +
push 68h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
push 0BB8h  +
call ds:Sleep  +
push edi  +
push dword ptr [ebp+8]  +
lea ecx [ebp-3Ch] +
push esi  +
push edi  +
call sub_1018859  +
test eax eax +
jge loc_1013DA5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_1018955  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
lea ecx [ebp-3Ch] +
call sub_1018914  +
xor eax eax +
push eax  +
push offset aDebugbreak  +
mov esi offset aSoftwareMicr_5 +
push esi  +
push eax  +
lea ecx [ebp-3Ch] +
mov [ebp-4] eax +
call sub_1018859  +
test eax eax +
jl loc_1013EA1  +
push 100h  +
push 80000002h  +
lea ecx [ebp-3Ch] +
call sub_10189DE  +
test eax eax +
jl loc_1013EA1  +
lea ecx [ebp-3Ch] +
call sub_10189B4  +
test eax eax +
jbe loc_1013EA1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1013E9B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1013E9B  +
push esi  +
push offset dword_1002C38  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
call ds:DebugBreak  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_1018955  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
lea ecx [ebp-3Ch] +
call sub_1018914  +
xor esi esi +
push esi  +
push offset aNohardconsent  +
push offset aSoftwareMicr_5  +
push esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] esi +
call sub_1018859  +
test eax eax +
jl loc_1013F0C  +
push 100h  +
push 80000002h  +
lea ecx [ebp-3Ch] +
call sub_10189DE  +
test eax eax +
jl loc_1013F0C  +
lea ecx [ebp-3Ch] +
call sub_10189B4  +
test eax eax +
jbe loc_1013F0C  +
inc esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_1018955  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
lea ecx [ebp-3Ch] +
call sub_1018914  +
xor esi esi +
push esi  +
push offset aSuspenddwproce  +
push offset aSoftwareMicr_5  +
push esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] esi +
call sub_1018859  +
test eax eax +
jl loc_1013F79  +
push 100h  +
push 80000002h  +
lea ecx [ebp-3Ch] +
call sub_10189DE  +
test eax eax +
jl loc_1013F79  +
lea ecx [ebp-3Ch] +
call sub_10189B4  +
test eax eax +
jbe loc_1013F79  +
inc esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_1018955  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
lea ecx [ebp-18h] +
call sub_101292A  +
xor esi esi +
push esi  +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] esi +
call sub_1013455  +
cmp eax esi +
jge loc_1013FCF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
push dword ptr [ebp+8]  +
lea ecx [ebp-18h] +
call sub_1012E45  +
test eax eax +
jl loc_1013FB9  +
lea ecx [ebp-18h] +
call sub_1012949  +
push eax  +
call ds:LoadLibraryW  +
mov esi eax +
jmp loc_1013FB9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+20h] +
xor ebx ebx +
cmp eax ebx +
jz loc_1014013  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+20h] ebx +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_1014024  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+18h] ebx +
cmp [esi+10h] ebx +
jz loc_1014056  +
push edi  +
xor edi edi +
cmp [esi+14h] ebx +
jbe loc_1014049  +
mov eax [esi+14h] +
mov ecx [esi+10h] +
sub eax edi +
lea eax [ecx+eax*4-4] +
push eax  +
call sub_10139E2  +
inc edi  +
cmp edi [esi+14h] +
jb loc_1014031  +
push dword ptr [esi+10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+10h] ebx +
pop edi  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hKey] 0 +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset aSystemCurrentc  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp [ebp+hKey] 0 +
mov esi eax +
jz loc_101409F  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
test esi esi +
setz al  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 504h +
push ebx  +
push edi  +
xor eax eax +
xor ebx ebx +
mov [ebp+var_24] ebx +
lea edi [ebp+lpBaseAddress] +
stos   +
stos   +
stos   +
stos   +
push 247h  +
stos   +
lea eax [ebp+Buffer+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+Buffer] bl +
call memset  +
push 294h  +
lea eax [ebp+var_2B8] +
push ebx  +
push eax  +
mov [ebp+var_2BC] ebx +
call memset  +
add esp 18h +
mov [ebp+var_8] ebx +
mov [ebp+NumberOfBytesRead] ebx +
mov [ebp+var_C] ebx +
cmp [ebp+hProcess] ebx +
jz loc_1014340  +
cmp [ebp+arg_4] ebx +
jz loc_1014340  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
push 18h  +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
push [ebp+hProcess]  +
call ds:NtQueryInformationProcess  +
cmp eax ebx +
jl loc_10142F8  +
cmp [ebp+var_C] 18h +
jnz loc_10142F8  +
cmp [ebp+lpBaseAddress] ebx +
jz loc_10142F8  +
mov esi ds:__imp_ReadProcessMemory +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov edi 248h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpBaseAddress]  +
mov [ebp+NumberOfBytesRead] ebx +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jz loc_10142DA  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_10142DA  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
add edi 50h +
push edi  +
lea eax [ebp+var_2BC] +
push eax  +
push [ebp+var_4F4]  +
mov [ebp+NumberOfBytesRead] ebx +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jz loc_10142AC  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_10142AC  +
cmp [ebp+var_278] ebx +
jz loc_10142AC  +
mov edi 2000h +
mov eax edi +
cmp ax [ebp+var_27C] +
jb loc_10141CC  +
movzx edi [ebp+var_27C] +
add edi 2 +
xor ecx ecx +
push 2  +
mov eax edi +
shr eax 1 +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_10141F9  +
mov esi 8007000Eh +
jmp loc_101432D  +
push edi  +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
add edi 0FFFFFFFEh +
push edi  +
mov edi [ebp+var_8] +
push edi  +
push [ebp+var_278]  +
mov [ebp+NumberOfBytesRead] ebx +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jnz loc_1014256  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014328  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014328  +
push offset dword_1002C38  +
push 9Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1014328  +
mov eax [ebp+NumberOfBytesRead] +
xor ecx ecx +
shr eax 1 +
mov [edi+eax*2] cx +
mov ecx [ebp+arg_4] +
push edi  +
call sub_1012CBE  +
mov esi eax +
cmp esi ebx +
jge loc_10142A5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101432D  +
test byte ptr [eax+1Ch] 1 +
jz loc_101432D  +
push esi  +
push offset dword_1002C38  +
push 9Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_101432D  +
xor esi esi +
jmp loc_101432D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10142D3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10142D3  +
push offset dword_1002C38  +
push 99h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_101433B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10142D3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10142D3  +
push offset dword_1002C38  +
push 98h  +
jmp loc_10142C8  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1014328  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1014328  +
push [ebp+lpBaseAddress]  +
push [ebp+var_C]  +
push eax  +
push offset dword_1002C38  +
push 97h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10138B9  +
mov esi 80004005h +
cmp [ebp+var_8] ebx +
jz loc_101433B  +
push [ebp+var_8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_101436C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014367  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014367  +
push offset dword_1002C38  +
push 96h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax 0C54h +
mov [ebp+var_10] ax +
mov eax 4489h +
mov [ebp+var_E] ax +
xor eax eax +
mov word ptr [ebp+var_24] ax +
lea edi [ebp+var_24+2] +
stos   +
stos   +
stos   +
push 0  +
stos   +
push 0  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+var_14] 0E46EEAD8h +
mov [ebp+var_C] 98h +
mov [ebp+var_B] 98h +
mov [ebp+var_A] 8Fh +
mov [ebp+var_9] 0A7h +
mov [ebp+var_8] 9Dh +
mov [ebp+var_7] 5 +
mov [ebp+var_6] 9Eh +
mov [ebp+var_5] 0Eh +
call ds:EtwEventWriteNoRegistration  +
push 0C0000302h  +
mov esi eax +
call ds:RtlNtStatusToDosError  +
cmp esi eax +
jnz loc_10143FC  +
mov eax 0C0000080h +
jmp loc_101440E  +
test esi esi +
jle loc_101440C  +
and esi 0FFFFh +
or esi 0C0070000h +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push 46h  +
pop eax  +
push 48h  +
mov word ptr [ebp+var_C] ax +
pop eax  +
mov word ptr [ebp+var_C+2] ax +
lea eax [ebp+var_C] +
mov [ebp+var_24] eax +
lea eax [ebp+var_2C] +
push eax  +
xor esi esi +
push 100001h  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_8] offset aKernelobjectsS +
mov [ebp+var_2C] 18h +
mov [ebp+var_28] esi +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
call ds:NtOpenEvent  +
cmp eax esi +
jl loc_1014497  +
or [ebp+var_10] 0FFFFFFFFh +
lea eax [ebp+var_14] +
push eax  +
push esi  +
push [ebp+var_4]  +
mov [ebp+var_14] 0F70F2E80h +
call ds:NtWaitForSingleObject  +
push [ebp+var_4]  +
mov esi eax +
call ds:NtClose  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_8] +
push edi  +
mov [ebp+var_28] eax +
mov [ebp+var_C] bl +
mov [ebp-0Bh] bl +
mov [ebp+var_A] bl +
mov [ebp+var_9] bl +
mov [ebp+var_8] bl +
mov [ebp+var_7] 5 +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
call sub_1014377  +
mov edi eax +
cmp edi ebx +
jl loc_1014617  +
call sub_1014421  +
mov edi eax +
cmp edi ebx +
jl loc_1014617  +
cmp edi 102h +
jz loc_10145B8  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
call ds:RtlAllocateAndInitializeSid  +
mov edi eax +
cmp edi ebx +
jl loc_1014617  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jnz loc_1014537  +
mov eax 2710h +
push 0FFFFFFFFh  +
cdq   +
push 0FFFFD8F0h  +
push edx  +
push eax  +
call __allmul  +
mov [ebp+var_24] eax +
push esi  +
lea eax [ebp+var_48] +
push eax  +
mov [ebp+var_20] edx +
call ds:RtlInitUnicodeString  +
push 2Ch  +
lea eax [ebp+var_74] +
push ebx  +
push eax  +
mov [ebp+var_40] 18h +
mov [ebp+var_3C] ebx +
mov [ebp+var_34] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
call memset  +
add esp 0Ch +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_14]  +
lea eax [ebp+var_74] +
push 20000h  +
push eax  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
lea eax [ebp+var_10] +
mov esi 448h +
push eax  +
mov [ebp+var_64] esi +
call ds:NtAlpcConnectPort  +
mov edi eax +
cmp edi ebx +
jl loc_1014617  +
cmp edi 102h +
jnz loc_10145BF  +
mov edi 0C0000353h +
jmp loc_1014617  +
mov edi [ebp+var_28] +
push esi  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
mov eax 430h +
mov [edi] ax +
mov eax esi +
mov [edi+2] ax +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
push ebx  +
push [ebp+var_1C]  +
mov [ebp+var_18] esi +
push 20000h  +
push [ebp+var_10]  +
call ds:NtAlpcSendWaitReceivePort  +
mov edi eax +
cmp edi ebx +
jl loc_1014617  +
cmp edi 102h +
jz loc_1014617  +
mov edi [ebp+var_18] +
sub edi esi +
neg edi  +
sbb edi edi +
and edi 0C000021Fh +
cmp [ebp+var_14] ebx +
jz loc_1014625  +
push [ebp+var_14]  +
call ds:RtlFreeSid  +
cmp [ebp+var_10] ebx +
jz loc_1014633  +
push [ebp+var_10]  +
call ds:NtClose  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 10h  +
***
call __SEH_prolog4_GS  +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ebp+lpBaseAddress] eax +
xor edi edi +
mov [ebp+var_220] edi +
mov [ebp+NumberOfBytesRead] edi +
mov [ebp+var_224] edi +
mov esi 200h +
push esi  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+ms_exc.disabled] edi +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpBaseAddress]  +
push ebx  +
call ds:__imp_ReadProcessMemory  +
test eax eax +
jz loc_10146EB  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_10146EB  +
lea eax [ebp+var_224] +
push eax  +
push edi  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
call ds:RtlImageNtHeaderEx  +
test eax eax +
jl loc_1014704  +
mov eax [ebp+var_224] +
cmp eax edi +
jz loc_1014704  +
mov eax [eax+8] +
mov [ebp+var_220] eax +
jmp loc_1014704  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
jmp loc_1014711  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-220h] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_220] +
call __SEH_epilog4_GS  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+SystemTime.wYear] ax +
lea edi [ebp+SystemTime.wMonth] +
stos   +
stos   +
stos   +
stos   +
xor esi esi +
xor eax eax +
lea edi [ebp+FileTime.dwHighDateTime] +
mov [ebp+FileTime.dwLowDateTime] esi +
stos   +
lea edi [ebp+var_10] +
mov dword ptr [ebp+Data] esi +
stos   +
mov edi [ebp+arg_0] +
mov ebx 80004005h +
mov [ebp+hKey] esi +
cmp [ebp+lpSubKey] esi +
jnz loc_101475D  +
cmp edi esi +
jz loc_1014762  +
cmp [ebp+lpValueName] esi +
jnz loc_1014793  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014789  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014789  +
push offset dword_1002C38  +
push 0F1h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_101485E  +
cmp [ebp+lpSubKey] esi +
jz loc_10147D6  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 20106h  +
push esi  +
push esi  +
push esi  +
push [ebp+lpSubKey]  +
push edi  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_10147D9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014849  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014849  +
push offset dword_1002C38  +
push 0F2h  +
jmp loc_101483A  +
mov [ebp+hKey] edi +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetSystemTime  +
lea eax [ebp+FileTime] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToFileTime  +
mov eax [ebp+FileTime.dwHighDateTime] +
mov [ebp+var_10] eax +
mov eax [ebp+FileTime.dwLowDateTime] +
push 8  +
mov dword ptr [ebp+Data] eax +
lea eax [ebp+Data] +
push eax  +
push 0Bh  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
cmp eax esi +
jz loc_1014847  +
push eax  +
call sub_100629E  +
mov ebx eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014849  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014849  +
push offset dword_1002C38  +
push 0F3h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1014849  +
xor ebx ebx +
cmp [ebp+hKey] esi +
jz loc_101485C  +
cmp [ebp+hKey] edi +
jz loc_101485C  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_14] +
mov ecx [ebp+hKey] +
push ebx  +
mov ebx [ebp+phkResult] +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
xor esi esi +
mov [ebp+var_C] edi +
mov [ebp+var_8] ebx +
mov [ebp+var_4] 8 +
mov [ebp+phkResult] ecx +
cmp eax esi +
jz loc_1014899  +
mov [eax] esi +
cmp [ebp+lpSubKey] esi +
jnz loc_10148A3  +
cmp [ebp+arg_18] esi +
jz loc_10148BB  +
lea eax [ebp+phkResult] +
push eax  +
push 101h  +
push esi  +
push [ebp+lpSubKey]  +
push ecx  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_10148D7  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
push 40h  +
push [ebp+arg_8]  +
push esi  +
push [ebp+phkResult]  +
call ds:RegGetValueW  +
cmp eax esi +
jz loc_10148DF  +
push eax  +
call sub_100629E  +
jmp loc_10148E1  +
xor eax eax +
cmp eax esi +
jge loc_10148F8  +
mov eax [ebp+arg_14] +
mov [ebp+var_C] edi +
mov [ebp+var_8] ebx +
cmp eax esi +
jz loc_10148F8  +
mov dword ptr [eax] 1 +
mov eax [ebp+phkResult] +
pop edi  +
cmp eax esi +
pop esi  +
pop ebx  +
jz loc_101490E  +
cmp eax [ebp+hKey] +
jz loc_101490E  +
push eax  +
call ds:RegCloseKey  +
mov eax [ebp+var_C] +
mov edx [ebp+var_8] +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
lea edi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
mov [ebp+SystemTimeAsFileTime.dwLowDateTime] esi +
stos   +
lea edi [ebp+var_4] +
mov [ebp+var_8] esi +
stos   +
mov [ebp+var_4] esi +
cmp [ebp+lpSubKey] esi +
jnz loc_1014946  +
cmp [ebp+hKey] esi +
jz loc_10149AB  +
cmp [ebp+arg_8] esi +
jz loc_10149AB  +
cmp [ebp+arg_C] esi +
jz loc_10149AB  +
push ebx  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push esi  +
push [ebp+arg_8]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call sub_101486A  +
mov edi eax +
mov eax [ebp+arg_10] +
mov ebx edx +
cmp eax esi +
jz loc_101497C  +
xor ecx ecx +
cmp [ebp+var_4] esi +
setz cl  +
mov [eax] ecx +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov eax [ebp+SystemTimeAsFileTime.dwLowDateTime] +
mov ecx [ebp+SystemTimeAsFileTime.dwHighDateTime] +
push 8  +
sub eax edi +
push 61C46800h  +
sbb ecx ebx +
push ecx  +
push eax  +
call __aulldiv  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov [ebp+SystemTimeAsFileTime.dwHighDateTime] edx +
xor eax eax +
pop ebx  +
jmp loc_10149D7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10149D2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10149D2  +
push offset dword_1002C38  +
push 0F4h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
call __EH_prolog3_catch  +
mov ebx [ebp+0Ch] +
xor esi esi +
mov [ebp-14h] esi +
cmp ebx esi +
jz loc_1014AF8  +
cmp [ebp+8] esi +
jz loc_1014AF8  +
push dword ptr [ebp+8]  +
call ds:IsValidSid  +
test eax eax +
jnz loc_1014A4A  +
mov edi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014AF1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014AF1  +
push offset dword_1002C38  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1014AF1  +
push dword ptr [ebp+8]  +
call ds:GetLengthSid  +
push eax  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov esi eax +
jmp loc_1014A78  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1014A72 +
retn   +
mov ebx [ebp+0Ch] +
mov esi [ebp-14h] +
test esi esi +
jnz loc_1014A9C  +
mov edi 8007000Eh +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014AF1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014AF1  +
push offset dword_1002C38  +
push 27h  +
jmp loc_1014A3A  +
push dword ptr [ebp+8]  +
push esi  +
push dword ptr [ebp-18h]  +
call ds:CopySid  +
test eax eax +
jnz loc_1014AE2  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014AE6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014AE6  +
push edi  +
push offset dword_1002C38  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1014AE6  +
mov [ebx] esi +
xor edi edi +
test edi edi +
jge loc_1014AF4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [ebx] 0 +
mov eax edi +
jmp loc_1014B25  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014B20  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014B20  +
push dword ptr [ebp+8]  +
push ebx  +
push offset dword_1002C38  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10138F1  +
mov eax 80070057h +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push edi  +
call ds:GetProcessWindowStation  +
mov [ebp+hObj] eax +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
xor edi edi +
mov [ebp+var_10] eax +
mov [ebp+var_8] edi +
mov [ebp+var_18] edi +
cmp [ebp+hObj] edi +
jz loc_1014DB5  +
cmp eax edi +
jz loc_1014DB5  +
push ebx  +
push esi  +
mov esi ds:GetUserObjectInformationW +
lea eax [ebp+nLengthNeeded] +
push eax  +
push edi  +
push edi  +
push 2  +
pop ebx  +
push ebx  +
push [ebp+hObj]  +
mov [ebp+nLengthNeeded] edi +
call esi  +
test eax eax +
jnz loc_1014BD3  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jz loc_1014BD3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014DB3  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014DB3  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_1002C38  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1014DB3  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push [ebp+nLengthNeeded]  +
call sub_1011D50  +
test eax eax +
jge loc_1014C16  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014DB3  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014DB3  +
push offset dword_1002C38  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1014DB3  +
mov eax [ebp+var_8] +
xor ecx ecx +
mov edx ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_14] eax +
cmp eax edi +
jz loc_1014DB3  +
lea ecx [ebp+nLengthNeeded] +
push ecx  +
push [ebp+nLengthNeeded]  +
push eax  +
push ebx  +
push [ebp+hObj]  +
call esi  +
test eax eax +
jnz loc_1014C87  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014DAA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014DAA  +
call ds:__imp_GetLastError  +
push eax  +
push offset dword_1002C38  +
push 2Bh  +
mov eax Reserved +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1014DAA  +
lea eax [ebp+nLengthNeeded] +
push eax  +
push edi  +
push edi  +
push ebx  +
push [ebp+var_10]  +
mov [ebp+nLengthNeeded] edi +
call esi  +
test eax eax +
jnz loc_1014CCF  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jz loc_1014CCF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014DAA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014DAA  +
call ds:__imp_GetLastError  +
push eax  +
push offset dword_1002C38  +
push 2Ch  +
jmp loc_1014C72  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push [ebp+nLengthNeeded]  +
call sub_1011D50  +
test eax eax +
jge loc_1014D12  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014DAA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014DAA  +
push offset dword_1002C38  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1014DAA  +
mov eax [ebp+var_8] +
xor ecx ecx +
mov edx ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+hObj] eax +
cmp eax edi +
jz loc_1014DAA  +
lea ecx [ebp+nLengthNeeded] +
push ecx  +
push [ebp+nLengthNeeded]  +
push eax  +
push ebx  +
push [ebp+var_10]  +
call esi  +
test eax eax +
jnz loc_1014D74  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014DA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014DA1  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_1002C38  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1014DA1  +
push offset aWinsta0  +
push [ebp+var_14]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1014DA1  +
push offset aDefault  +
push [ebp+hObj]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1014DA1  +
mov [ebp+var_18] 1 +
push [ebp+hObj]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push [ebp+var_14]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebx  +
mov eax [ebp+var_18] +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
call sub_1013923  +
test eax eax +
jz loc_1014DF4  +
call sub_1014B32  +
test eax eax +
jz loc_1014DF4  +
push offset Name  +
push esi  +
push 1F0001h  +
call ds:OpenMutexW  +
cmp eax esi +
jz loc_1014DF4  +
push eax  +
inc esi  +
call ds:__imp_CloseHandle  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
mov [ebp+var_10] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_1014E63  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014EA8  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014EA8  +
push offset dword_1002C38  +
push 31h  +
jmp loc_1014E8E  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_1014E9B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014EA8  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014EA8  +
push offset dword_1002C38  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1014EA8  +
cmp [ebp+var_10] ebx +
jz loc_1014EAD  +
call sub_1014B32  +
mov [ebp+var_10] eax +
cmp [ebp+var_10] ebx +
jnz loc_1014ED4  +
call sub_1014DC0  +
test eax eax +
jnz loc_1014ECD  +
call sub_1014068  +
test eax eax +
jz loc_1014EC8  +
call sub_1014B32  +
test eax eax +
jnz loc_1014ECD  +
mov [ebp+var_10] ebx +
jmp loc_1014ED4  +
mov [ebp+var_10] 1 +
cmp [ebp+pSid] ebx +
pop ebx  +
jz loc_1014EE3  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
xor ecx ebp +
call sub_10042AF  +
leave   +
retn   +
***
call __EH_prolog3_catch  +
mov eax [ebp+8] +
test eax eax +
jz loc_101500A  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_101500A  +
and dword ptr [esi] 0 +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1014F1F  +
sub eax edx +
sar eax 1 +
inc eax  +
mov [ebp-14h] eax +
jnz loc_1014F59  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101502E  +
test byte ptr [eax+1Ch] 1 +
jz loc_101502E  +
push offset dword_1002C38  +
push 55h  +
jmp loc_1015023  +
and dword ptr [ebp-4] 0 +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [esi] eax +
jmp loc_1014F87  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1014F84 +
retn   +
mov esi [ebp+0Ch] +
mov eax [esi] +
test eax eax +
jnz loc_1014FB8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014FB1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014FB1  +
push offset dword_1002C38  +
push 56h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 8007000Eh +
jmp loc_1014FF6  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push eax  +
call sub_1006418  +
mov edi eax +
test edi edi +
jge loc_1014FF0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1014FF2  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014FF2  +
push offset dword_1002C38  +
push 57h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1014FF2  +
xor edi edi +
test edi edi +
jge loc_1015006  +
mov eax [esi] +
test eax eax +
jz loc_1015006  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax edi +
jmp loc_1015033  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101502E  +
test byte ptr [eax+1Ch] 1 +
jz loc_101502E  +
push offset dword_1002C38  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+hLibModule] +
mov eax [esi+24h] +
push edi  +
push dword ptr [esi+0Ch]  +
xor ebx ebx +
push ebx  +
mov [ebp+hLibModule] eax +
call ds:RegisterEventSourceW  +
mov edi eax +
cmp edi ebx +
jnz loc_1015098  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10150D5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10150D5  +
push ebx  +
push offset dword_1002C38  +
push 6Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10150D5  +
push dword ptr [esi+18h]  +
movzx eax word ptr [esi+14h] +
push dword ptr [esi+10h]  +
push dword ptr [esi+1Ch]  +
push eax  +
push dword ptr [esi+20h]  +
movzx eax word ptr [esi+4] +
push dword ptr [esi]  +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push edi  +
call ds:ReportEventW  +
test eax eax +
jnz loc_10150CE  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
push edi  +
call ds:DeregisterEventSource  +
cmp dword ptr [esi+28h] 0 +
jz loc_10150F2  +
push esi  +
call sub_1013FF6  +
mov eax [ebp+hLibModule] +
test eax eax +
jz loc_10150F2  +
push ebx  +
push [ebp+hLibModule]  +
call ds:FreeLibraryAndExitThread  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
xor edi edi +
mov dword ptr [ebp-14h] 80004005h +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov [ebp-20h] edi +
mov [ebp-24h] edi +
cmp [ebp+14h] edi +
jnz loc_1015154  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101514A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101514A  +
push offset dword_1002C38  +
push 6Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1015317  +
push 2Ch  +
mov [ebp-4] edi +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
pop ecx  +
mov [ebp-18h] esi +
jmp loc_1015179  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1015174 +
retn   +
mov esi [ebp-18h] +
xor edi edi +
cmp esi edi +
jnz loc_10151B7  +
mov ecx 8007000Eh +
mov [ebp-14h] ecx +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015306  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015306  +
push ecx  +
push offset dword_1002C38  +
push 70h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1015306  +
push 2Ch  +
push edi  +
push esi  +
call memset  +
mov eax [ebp+8] +
mov ebx [ebp+1Ch] +
mov [esi] eax +
mov eax [ebp+0Ch] +
mov [esi+4] eax +
mov eax [ebp+10h] +
mov [esi+8] eax +
mov eax [ebp+14h] +
mov [esi+0Ch] eax +
mov eax [ebp+24h] +
add esp 0Ch +
cmp dword ptr [ebp+2Ch] 0FFFFFFFFh +
mov [esi+10h] edi +
mov [esi+14h] ebx +
mov [esi+18h] edi +
mov [esi+1Ch] eax +
mov [esi+20h] edi +
mov [esi+24h] edi +
jnz loc_1015224  +
mov eax [ebp+18h] +
mov [esi+10h] eax +
mov eax [ebp+20h] +
mov [esi+18h] eax +
mov eax [ebp+28h] +
push esi  +
mov [esi+20h] eax +
mov [esi+28h] edi +
call sub_1015040  +
mov [ebp-14h] eax +
mov [esi+10h] edi +
mov [esi+18h] edi +
mov [esi+20h] edi +
jmp loc_1015300  +
lea eax [ebp-1Ch] +
push eax  +
push offset sub_1015040  +
push 4  +
call ds:GetModuleHandleExW  +
test eax eax +
jnz loc_101527C  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov [ebp-14h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015300  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015300  +
push dword ptr [ebp-14h]  +
push offset dword_1002C38  +
push 71h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1015300  +
mov eax [ebp-1Ch] +
mov [esi+24h] eax +
cmp [ebp+18h] edi +
jz loc_101536C  +
cmp ebx edi +
jz loc_101536C  +
xor ecx ecx +
push 4  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
mov dword ptr [ebp-4] 2 +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [ebp-20h] eax +
jmp loc_10152CA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10152C4 +
retn   +
mov ebx [ebp+1Ch] +
mov esi [ebp-18h] +
mov edi [ebp-20h] +
test edi edi +
jnz loc_101531F  +
mov ecx 8007000Eh +
mov [ebp-14h] ecx +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10152FE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10152FE  +
push ecx  +
push offset dword_1002C38  +
push 72h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
xor edi edi +
push esi  +
call sub_1013FF6  +
cmp [ebp-1Ch] edi +
jz loc_1015314  +
push dword ptr [ebp-1Ch]  +
call ds:FreeLibrary  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 28h  +
mov eax ebx +
shl eax 2 +
push eax  +
push 0  +
push edi  +
call memset  +
and dword ptr [ebp+14h] 0 +
add esp 0Ch +
mov [esi+10h] edi +
test ebx ebx +
jbe loc_101536A  +
mov edi [ebp+18h] +
mov eax [ebp-20h] +
sub eax edi +
mov [ebp+18h] eax +
mov ecx [edi] +
test ecx ecx +
jz loc_101535F  +
add eax edi +
push eax  +
push ecx  +
call sub_1014EF7  +
mov [ebp-14h] eax +
test eax eax +
jl loc_101538D  +
mov eax [ebp+18h] +
inc dword ptr [ebp+14h]  +
add edi 4 +
cmp [ebp+14h] ebx +
jb loc_1015346  +
xor edi edi +
cmp [ebp+20h] edi +
jz loc_101541B  +
push dword ptr [ebp+24h]  +
mov dword ptr [ebp-4] 4 +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov ebx eax +
jmp loc_10153D6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10152FE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10152FE  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+14h]  +
push offset dword_1002C38  +
push 73h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100C7C8  +
jmp loc_10152FE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10153CE +
retn   +
mov esi [ebp-18h] +
mov ebx [ebp-24h] +
xor edi edi +
cmp ebx edi +
jnz loc_1015409  +
mov ecx 8007000Eh +
mov [ebp-14h] ecx +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015300  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015300  +
push ecx  +
push offset dword_1002C38  +
push 74h  +
jmp loc_101526C  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push ebx  +
call memmove  +
add esp 0Ch +
mov [esi+18h] ebx +
cmp [ebp+28h] edi +
jz loc_101545C  +
lea eax [esi+20h] +
push eax  +
push dword ptr [ebp+28h]  +
call sub_10149E2  +
cmp eax edi +
mov [ebp-14h] eax +
jge loc_101545C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015300  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015300  +
push dword ptr [ebp-14h]  +
push offset dword_1002C38  +
push 75h  +
jmp loc_101526C  +
push edi  +
push edi  +
push esi  +
push offset sub_1015040  +
xor ebx ebx +
push edi  +
inc ebx  +
push edi  +
mov [ebp+24h] edi +
mov [esi+28h] ebx +
call ds:CreateThread  +
mov [ebp+18h] eax +
cmp eax edi +
jnz loc_10154B6  +
mov [ebp+24h] ebx +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov [ebp-14h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015567  +
test [eax+1Ch] bl +
jz loc_1015567  +
push dword ptr [ebp-14h]  +
push offset dword_1002C38  +
push 76h  +
jmp loc_101555C  +
push dword ptr [ebp+2Ch]  +
push eax  +
push offset aLogeventworker  +
call sub_10167A4  +
cmp eax edi +
jz loc_1015528  +
cmp eax 102h +
jz loc_1015504  +
cmp eax 0FFFFFFFFh +
jnz loc_1015567  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov [ebp-14h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015567  +
test [eax+1Ch] bl +
jz loc_1015567  +
push dword ptr [ebp-14h]  +
push offset dword_1002C38  +
push 79h  +
jmp loc_101555C  +
mov ecx 80070102h +
mov [ebp-14h] ecx +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015567  +
test byte ptr [eax+1Ch] 2 +
jz loc_1015567  +
push ecx  +
push offset dword_1002C38  +
push 78h  +
jmp loc_101555C  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+18h]  +
call ds:GetExitCodeThread  +
test eax eax +
jnz loc_1015540  +
mov dword ptr [ebp-14h] 80070507h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015567  +
test byte ptr [eax+1Ch] 8 +
jz loc_1015567  +
push dword ptr [ebp-14h]  +
push offset dword_1002C38  +
push 77h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
cmp [ebp+18h] edi +
jz loc_1015575  +
push dword ptr [ebp+18h]  +
call ds:__imp_CloseHandle  +
cmp [ebp+24h] edi +
jz loc_1015314  +
jmp loc_1015300  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101449F  +
or eax 10000000h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push edi  +
xor ebx ebx +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp+lpBaseAddress] +
mov [ebp+var_1C] ebx +
stos   +
cmp [ebp+arg_4] ebx +
jz loc_1015673  +
cmp [ebp+lpBuffer] ebx +
jz loc_1015673  +
push esi  +
push ebx  +
push 1Ch  +
lea eax [ebp+var_1C] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
call ds:NtQueryInformationThread  +
mov esi eax +
cmp esi ebx +
jge loc_1015620  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015616  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015616  +
push offset dword_1002C38  +
push 93h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
or esi 10000000h +
mov eax esi +
jmp loc_1015670  +
push ebx  +
push 0FE4h  +
push [ebp+lpBuffer]  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call ds:__imp_ReadProcessMemory  +
test eax eax +
jnz loc_101566E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015660  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015660  +
push offset dword_1002C38  +
push 94h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
jmp loc_1015670  +
xor eax eax +
pop esi  +
jmp loc_101569F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101569A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101569A  +
push offset dword_1002C38  +
push 92h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+lpLibFileName] edi +
jnz loc_10156E2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10156DE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10156DE  +
push offset dword_1002C38  +
push 0B9h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
jmp loc_1015711  +
push esi  +
push 2  +
push edi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov esi eax +
cmp esi edi +
jz loc_101570E  +
and esi 0FFFFFFFCh +
push esi  +
call ds:__imp_GetCurrentProcess  +
push eax  +
call sub_101464B  +
push esi  +
mov edi eax +
call ds:FreeLibrary  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+hKey] +
push ebx  +
mov ebx [ebp+phkResult] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
xor esi esi +
mov [ebp+var_4] ebx +
mov [ebp+var_8] 4 +
mov [ebp+phkResult] eax +
cmp edi esi +
jz loc_1015743  +
mov [edi] esi +
cmp [ebp+lpSubKey] esi +
jnz loc_101574D  +
cmp [ebp+arg_14] esi +
jz loc_1015765  +
lea ecx [ebp+phkResult] +
push ecx  +
push 101h  +
push esi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_1015781  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push 10h  +
push [ebp+arg_8]  +
push esi  +
push [ebp+phkResult]  +
call ds:RegGetValueW  +
cmp eax esi +
jz loc_1015789  +
push eax  +
call sub_100629E  +
jmp loc_101578B  +
xor eax eax +
cmp eax esi +
jge loc_101579C  +
mov [ebp+var_4] ebx +
cmp edi esi +
jz loc_101579C  +
mov dword ptr [edi] 1 +
mov eax [ebp+phkResult] +
pop edi  +
cmp eax esi +
pop esi  +
pop ebx  +
jz loc_10157B2  +
cmp eax [ebp+hKey] +
jz loc_10157B2  +
push eax  +
call ds:RegCloseKey  +
mov eax [ebp+var_4] +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+hKey] +
push edi  +
xor edi edi +
mov [ebp+var_C] edi +
mov [ebp+var_4] 80004005h +
mov [ebp+phkResult] ecx +
cmp [ebp+arg_10] edi +
jnz loc_10157E8  +
mov eax 80070057h +
jmp loc_1015995  +
mov eax [ebp+arg_18] +
cmp [ebp+lpSubKey] edi +
jnz loc_10157F4  +
cmp eax edi +
jz loc_1015854  +
neg eax  +
sbb eax eax +
lea edx [ebp+phkResult] +
push edx  +
and eax 100h +
or eax 1 +
push eax  +
push edi  +
push [ebp+lpSubKey]  +
push ecx  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jz loc_1015854  +
push eax  +
call sub_100629E  +
mov [ebp+var_4] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101597F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101597F  +
push [ebp+var_4]  +
push offset dword_1002C38  +
push 0BAh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_101597F  +
push esi  +
mov esi ds:RegGetValueW +
lea eax [ebp+var_C] +
push eax  +
push edi  +
push edi  +
push 2  +
push [ebp+arg_8]  +
push edi  +
push [ebp+phkResult]  +
call esi  +
cmp eax edi +
jz loc_10158A2  +
cmp [ebp+arg_C] edi +
jz loc_1015894  +
cmp [ebp+arg_14] edi +
jz loc_1015887  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1016864  +
jmp loc_101589A  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_10] +
call sub_1012CBE  +
jmp loc_101589A  +
push eax  +
call sub_100629E  +
mov [ebp+var_4] eax +
jmp loc_101597E  +
mov eax [ebp+var_C] +
push ebx  +
xor ecx ecx +
push 2  +
shr eax 1 +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jnz loc_10158F4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015972  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015972  +
push offset dword_1002C38  +
push 0BBh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1015972  +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
push edi  +
push 2  +
push [ebp+arg_8]  +
push edi  +
push [ebp+phkResult]  +
call esi  +
cmp eax edi +
jz loc_1015933  +
push eax  +
call sub_100629E  +
mov [ebp+var_4] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015972  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015972  +
push [ebp+var_4]  +
push offset dword_1002C38  +
push 0BCh  +
jmp loc_1015962  +
mov ecx [ebp+arg_10] +
push ebx  +
call sub_1012CBE  +
cmp eax edi +
mov [ebp+var_4] eax +
jge loc_101596F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015972  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015972  +
push [ebp+var_4]  +
push offset dword_1002C38  +
push 0BDh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1015972  +
mov [ebp+var_4] edi +
cmp ebx edi +
jz loc_101597D  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebx  +
pop esi  +
mov eax [ebp+phkResult] +
cmp eax edi +
jz loc_1015992  +
cmp eax [ebp+hKey] +
jz loc_1015992  +
push eax  +
call ds:RegCloseKey  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 1Ch  +
***
call __EH_prolog3_GS  +
mov edi [ebp+0Ch] +
mov esi [ebp+8] +
lea ecx [ebp-248h] +
mov [ebp-22Ch] edi +
call sub_101292A  +
xor ebx ebx +
lea ecx [ebp-23Ch] +
mov [ebp-4] ebx +
mov [ebp-228h] ebx +
mov [ebp-224h] ebx +
mov [ebp-220h] ebx +
call sub_101292A  +
lea ecx [ebp-254h] +
mov byte ptr [ebp-4] 1 +
call sub_101292A  +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jz loc_1015EAB  +
cmp edi ebx +
jz loc_1015EAB  +
xor eax eax +
mov [ebp-218h] ax +
lea eax [ebp-248h] +
push eax  +
push esi  +
call sub_10140AE  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jge loc_1015A64  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0DAh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1015E6A  +
lea eax [ebp-224h] +
push eax  +
lea ecx [ebp-248h] +
call sub_1012949  +
push eax  +
call ds:CommandLineToArgvW  +
mov ecx eax +
mov [ebp-228h] ecx +
cmp ecx ebx +
jnz loc_1015ACF  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1015A9D  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-21Ch] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0DBh  +
jmp loc_1015A54  +
mov esi [ebp-224h] +
cmp esi 2 +
jge loc_1015B18  +
mov dword ptr [ebp-21Ch] 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push offset dword_1002C38  +
push 0DCh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1015E6A  +
xor eax eax +
inc eax  +
cmp eax esi +
jge loc_1015B38  +
mov edx [ecx+eax*4] +
movzx edx word ptr [edx] +
cmp dx 2Fh +
jz loc_1015B31  +
cmp dx 2Dh +
jnz loc_1015B36  +
inc eax  +
cmp eax esi +
jl loc_1015B1F  +
cmp eax esi +
jnz loc_1015B6A  +
mov dword ptr [ebp-21Ch] 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push offset dword_1002C38  +
push 0DDh  +
jmp loc_1015B08  +
mov edi [ecx+eax*4] +
push 2Ch  +
push edi  +
mov [ebp-230h] edi +
call wcschr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jnz loc_1015BB4  +
mov dword ptr [ebp-21Ch] 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push offset dword_1002C38  +
push 0DEh  +
jmp loc_1015B08  +
xor ecx ecx +
push 2Eh  +
push edi  +
mov [eax] cx +
call wcsrchr  +
push 5Ch  +
push edi  +
mov esi eax +
call wcschr  +
add esp 10h +
test eax eax +
jnz loc_1015D7C  +
lea eax [ebp-220h] +
push eax  +
call ds:__imp_GetCurrentProcess  +
push eax  +
call ds:__imp_IsWow64Process  +
test eax eax +
jnz loc_1015C25  +
mov eax Reserved +
mov edi offset Reserved +
cmp eax edi +
jz loc_1015C1D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015C1D  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0DFh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov [ebp-220h] ebx +
jmp loc_1015C2A  +
mov edi offset Reserved +
lea ecx [ebp-23Ch] +
call sub_10133E7  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jge loc_1015C6B  +
mov eax Reserved +
cmp eax edi +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0E0h  +
jmp loc_1015A54  +
push ebx  +
push dword ptr [ebp-220h]  +
lea ecx [ebp-254h] +
call sub_1013455  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jge loc_1015CB3  +
mov eax Reserved +
cmp eax edi +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0E1h  +
jmp loc_1015A54  +
lea ecx [ebp-23Ch] +
call sub_1012949  +
lea ecx [ebp-254h] +
mov [ebp-25Ch] eax +
call sub_1012949  +
neg esi  +
sbb esi esi +
not esi  +
mov [ebp-258h] eax +
mov dword ptr [ebp-21Ch] 80070002h +
and esi offset a_dll +
mov edi 104h +
push 0  +
lea eax [ebp-218h] +
push eax  +
push edi  +
push esi  +
push dword ptr [ebp-230h]  +
push dword ptr [ebp+ebx*4-25Ch]  +
call ds:SearchPathW  +
cmp eax edi +
ja loc_1015D49  +
test eax eax +
jnz loc_1015DC8  +
inc ebx  +
cmp ebx 2 +
jb loc_1015CF0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push offset dword_1002C38  +
push 0E3h  +
jmp loc_1015B08  +
mov dword ptr [ebp-21Ch] 8007007Ah +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push offset dword_1002C38  +
push 0E2h  +
jmp loc_1015B08  +
push edi  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1006418  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jge loc_1015DCA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0E4h  +
jmp loc_1015A54  +
xor ebx ebx +
lea eax [ebp-218h] +
push 2Eh  +
push eax  +
call wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jnz loc_1015E21  +
push offset a_dll  +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1012BE9  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jge loc_1015E21  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0E5h  +
jmp loc_1015A54  +
mov ecx [ebp-22Ch] +
lea eax [ebp-218h] +
push eax  +
call sub_1012CBE  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jge loc_1015E64  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015E6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015E6A  +
push dword ptr [ebp-21Ch]  +
push offset dword_1002C38  +
push 0E6h  +
jmp loc_1015A54  +
mov [ebp-21Ch] ebx +
push dword ptr [ebp-228h]  +
call ds:LocalFree  +
lea ecx [ebp-254h] +
mov byte ptr [ebp-4] 1 +
call sub_101293C  +
lea ecx [ebp-23Ch] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-248h] +
call sub_101293C  +
mov eax [ebp-21Ch] +
jmp loc_1015F04  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015ED2  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015ED2  +
push offset dword_1002C38  +
push 0D9h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
lea ecx [ebp-254h] +
mov byte ptr [ebp-4] 1 +
call sub_101293C  +
lea ecx [ebp-23Ch] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-248h] +
call sub_101293C  +
mov eax 80070057h +
call sub_1012614  +
retn 8  +
***
call __EH_prolog3_catch_GS  +
mov ecx [ebp+0Ch] +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-13Ch] ecx +
mov ecx [ebp+10h] +
mov [ebp-134h] ecx +
mov ecx [ebp+14h] +
mov [ebp-140h] eax +
mov [ebp-11Ch] ecx +
mov [ebp-130h] ebx +
mov [ebp-118h] ebx +
mov [ebp-120h] ebx +
mov [ebp-124h] ebx +
mov [ebp-12Ch] ebx +
mov [ebp-128h] ebx +
cmp eax ebx +
jnz loc_1015F9C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015F92  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015F92  +
push offset dword_1002C38  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1016221  +
lea ecx [ebp-130h] +
push ecx  +
push eax  +
call GetFileVersionInfoSizeW  +
mov [ebp-138h] eax +
cmp eax ebx +
jnz loc_1015FEA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1015FD7  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015FD7  +
push offset dword_1002C38  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
jmp loc_101621F  +
push eax  +
mov [ebp-4] ebx +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [ebp-118h] eax +
jmp loc_101600C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101600A +
retn   +
xor ebx ebx +
cmp [ebp-118h] ebx +
jnz loc_1016042  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016038  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016038  +
push offset dword_1002C38  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 8007000Eh +
jmp loc_101621F  +
push dword ptr [ebp-118h]  +
push dword ptr [ebp-138h]  +
push dword ptr [ebp-130h]  +
push dword ptr [ebp-140h]  +
call GetFileVersionInfoW  +
test eax eax +
jnz loc_101609A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016087  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016087  +
push offset dword_1002C38  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
jmp loc_1016213  +
mov edi [ebp-13Ch] +
cmp edi ebx +
jz loc_10160D1  +
lea eax [ebp-120h] +
push eax  +
lea eax [ebp-128h] +
push eax  +
push offset SubBlock  +
push dword ptr [ebp-118h]  +
call VerQueryValueW  +
test eax eax +
jz loc_1016120  +
mov esi [ebp-128h] +
push 0Dh  +
pop ecx  +
movs   +
lea eax [ebp-120h] +
push eax  +
lea eax [ebp-124h] +
push eax  +
push offset aVarfileinfoTra  +
push dword ptr [ebp-118h]  +
call VerQueryValueW  +
test eax eax +
jz loc_1016164  +
call ds:GetUserDefaultUILanguage  +
mov esi [ebp-120h] +
mov ecx [ebp-124h] +
movzx edx ax +
shr esi 2 +
xor eax eax +
cmp esi ebx +
jbe loc_101611C  +
cmp dx [ecx+eax*4] +
jz loc_101615F  +
inc eax  +
cmp eax esi +
jb loc_1016111  +
mov eax [ecx] +
jmp loc_101616D  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016213  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016213  +
push offset dword_1002C38  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1016213  +
mov eax [ecx+eax*4] +
jmp loc_101616D  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
cmp [ebp-134h] ebx +
jz loc_1016213  +
cmp [ebp-11Ch] ebx +
jz loc_1016213  +
xor esi esi +
cmp [ebp+18h] ebx +
jbe loc_1016213  +
mov ebx eax +
movzx edi ax +
mov eax [ebp-11Ch] +
shr ebx 10h +
mov [ebp-11Ch] eax +
mov eax [ebp-134h] +
push dword ptr [eax+esi*4]  +
movzx eax bx +
push eax  +
push edi  +
push offset aStringfileinfo  +
lea eax [ebp-114h] +
push 80h  +
push eax  +
call sub_100937B  +
add esp 18h +
test eax eax +
jl loc_1016204  +
lea eax [ebp-120h] +
push eax  +
lea eax [ebp-12Ch] +
push eax  +
lea eax [ebp-114h] +
push eax  +
push dword ptr [ebp-118h]  +
call VerQueryValueW  +
test eax eax +
jz loc_1016204  +
push dword ptr [ebp-12Ch]  +
mov ecx [ebp-11Ch] +
call sub_1012CBE  +
add dword ptr [ebp-11Ch] 0Ch +
inc esi  +
cmp esi [ebp+18h] +
jb loc_10161A4  +
xor ebx ebx +
push dword ptr [ebp-118h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax ebx +
call sub_1012628  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push ebx  +
xor eax eax +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+CreationTime.dwLowDateTime] ebx +
lea edi [ebp+CreationTime.dwHighDateTime] +
stos   +
mov [ebp+var_30] ebx +
lea edi [ebp+var_2C] +
stos   +
mov [ebp+SystemTime.wYear] ax +
mov [ebp+FileTime.dwLowDateTime] ebx +
lea edi [ebp+FileTime.dwHighDateTime] +
stos   +
lea edi [ebp+SystemTime.wMonth] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
push [ebp+hProcess]  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_10] ebx +
call ds:GetApplicationRestartSettings  +
test eax eax +
jl loc_1016295  +
test [ebp+var_8] 80000000h +
jz loc_1016295  +
mov [ebp+var_4] 1 +
jmp loc_101645D  +
mov esi ds:GetProcessTimes +
lea eax [ebp+UserTime] +
push eax  +
lea eax [ebp+KernelTime] +
push eax  +
lea eax [ebp+ExitTime] +
push eax  +
lea eax [ebp+CreationTime] +
push eax  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jnz loc_10162F4  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1016486  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1016463  +
push eax  +
push offset dword_1002C38  +
push 63h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_101645D  +
lea eax [ebp+UserTime] +
push eax  +
lea eax [ebp+KernelTime] +
push eax  +
lea eax [ebp+ExitTime] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call ds:__imp_GetCurrentProcess  +
push eax  +
call esi  +
test eax eax +
jnz loc_1016343  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1016486  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1016463  +
push eax  +
push offset dword_1002C38  +
push 64h  +
jmp loc_10162E4  +
mov eax [ebp+CreationTime.dwLowDateTime] +
mov edi [ebp+var_30] +
mov esi [ebp+var_2C] +
mov [ebp+var_20] eax +
mov eax [ebp+CreationTime.dwHighDateTime] +
mov [ebp+var_1C] eax +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetSystemTime  +
lea eax [ebp+FileTime] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToFileTime  +
test eax eax +
jnz loc_10163A6  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1016486  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1016463  +
push eax  +
push offset dword_1002C38  +
push 65h  +
jmp loc_10162E4  +
mov eax [ebp+FileTime.dwLowDateTime] +
sub eax [ebp+var_20] +
mov ecx [ebp+FileTime.dwHighDateTime] +
sbb ecx [ebp+var_1C] +
cmp esi [ebp+var_1C] +
jb loc_10163C8  +
ja loc_10163BE  +
cmp edi [ebp+var_20] +
jbe loc_10163C8  +
sub edi [ebp+FileTime.dwLowDateTime] +
sbb esi [ebp+FileTime.dwHighDateTime] +
add eax edi +
adc ecx esi +
push ebx  +
push 3E8h  +
push ecx  +
push eax  +
call __aulldiv  +
push ebx  +
push 2710h  +
push edx  +
push eax  +
call __aulldiv  +
mov [ebp+var_20] eax +
mov [ebp+var_1C] edx +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016410  +
test byte ptr [eax+1Ch] 4 +
jz loc_1016410  +
push edx  +
push [ebp+var_20]  +
push offset dword_1002C38  +
push 66h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10127B7  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push 3Ch  +
mov edi offset aRestartruntime +
push edi  +
mov esi offset aSoftwareMicr_6 +
push esi  +
push 80000002h  +
call sub_101571B  +
cmp [ebp+var_C] ebx +
jz loc_1016444  +
push 1  +
push ebx  +
push 3Ch  +
push edi  +
push esi  +
push 80000001h  +
call sub_101571B  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
jb loc_101645A  +
ja loc_1016289  +
cmp [ebp+var_20] eax +
ja loc_1016289  +
mov [ebp+var_4] ebx +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1016486  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1016486  +
push [ebp+var_4]  +
push offset dword_1002C38  +
push 67h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi offset sub_101293C +
push esi  +
push offset sub_101292A  +
push 1  +
push 0Ch  +
lea eax [ebp-1Ch] +
push eax  +
mov dword ptr [ebp-10h] offset aProductname +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [ebp+8] ebx +
jz loc_1016575  +
cmp [ebp+0Ch] ebx +
jz loc_1016575  +
mov ecx [ebp+0Ch] +
push offset aUnknown  +
call sub_1012CBE  +
push 1  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_1015F11  +
test eax eax +
jl loc_101655D  +
lea ecx [ebp-1Ch] +
call sub_1012B64  +
test eax eax +
jz loc_101655D  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_101332A  +
lea ecx [ebp-1Ch] +
call sub_1012B64  +
test eax eax +
jz loc_101655D  +
lea ecx [ebp-1Ch] +
call sub_1012949  +
mov ecx [ebp+0Ch] +
push eax  +
call sub_1012CBE  +
mov edi eax +
cmp edi ebx +
jge loc_101655D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101655F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101655F  +
push edi  +
push offset dword_1002C38  +
push 0A9h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_101655F  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
push 1  +
push 0Ch  +
lea eax [ebp-1Ch] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
mov eax edi +
jmp loc_10165B3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101659C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101659C  +
push offset dword_1002C38  +
push 0A8h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
push 1  +
push 0Ch  +
lea eax [ebp-1Ch] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
mov eax 80070057h +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
xor ebx ebx +
xor esi esi +
mov dword ptr [ebp-14h] offset aFiledescriptio +
mov dword ptr [ebp-10h] offset aProductname +
cmp [ebp+0Ch] ebx +
jz loc_1016727  +
cmp [ebp+8] ebx +
jz loc_1016727  +
mov edi offset sub_101293C +
push edi  +
push offset sub_101292A  +
push 2  +
push 0Ch  +
lea eax [ebp-2Ch] +
push eax  +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
push 2  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_1015F11  +
lea ecx [ebp-2Ch] +
call sub_1012B64  +
test eax eax +
jz loc_101662F  +
lea ecx [ebp-2Ch] +
jmp loc_101663E  +
lea ecx [ebp-20h] +
call sub_1012B64  +
test eax eax +
jz loc_1016645  +
lea ecx [ebp-20h] +
call sub_1012949  +
mov esi eax +
mov ecx [ebp+0Ch] +
push esi  +
call sub_1012CBE  +
mov esi eax +
cmp esi ebx +
jge loc_1016685  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016711  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016711  +
push offset dword_1002C38  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1016711  +
mov ecx [ebp+0Ch] +
push ebx  +
call sub_101332A  +
mov ecx [ebp+0Ch] +
call sub_1012B76  +
test eax eax +
jz loc_101670F  +
push dword ptr [ebp+8]  +
call sub_1016739  +
mov ecx [ebp+0Ch] +
push eax  +
call sub_1012CBE  +
mov esi eax +
cmp esi ebx +
jge loc_10166D8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016711  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016711  +
push esi  +
push offset dword_1002C38  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1016711  +
mov ecx [ebp+0Ch] +
call sub_1012B76  +
test eax eax +
jz loc_101670F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016708  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016708  +
push offset dword_1002C38  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov esi 80004005h +
jmp loc_1016711  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 2  +
push 0Ch  +
lea eax [ebp-2Ch] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
mov eax esi +
jmp loc_101672C  +
mov eax 80070057h +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101676E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101676A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101676A  +
push offset dword_1002F3C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
xor eax eax +
jmp loc_101679A  +
push esi  +
call ds:lstrlenW  +
lea eax [esi+eax*2] +
jmp loc_1016791  +
dec eax  +
dec eax  +
movzx ecx word ptr [eax] +
cmp cx 5Ch +
jz loc_1016797  +
cmp cx 2Fh +
jz loc_1016797  +
cmp cx 3Ah +
jz loc_1016797  +
cmp eax esi +
ja loc_101677A  +
dec eax  +
dec eax  +
add eax 2 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetTickCount +
push edi  +
call esi  +
push [ebp+dwMilliseconds]  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
mov edi eax +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_20] 0 +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
pop edi  +
cmp [ebp+arg_0] eax +
jnz loc_10167F1  +
xor eax eax +
jmp locret_101683C  +
push 20h  +
pop eax  +
push 0  +
push eax  +
mov [ebp+var_20] eax +
lea eax [ebp+var_20] +
push eax  +
push 0  +
push [ebp+arg_0]  +
call ds:NtQueryInformationProcess  +
test eax eax +
jge loc_1016836  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_10167ED  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10167ED  +
push eax  +
push offset dword_1002F3C  +
push 38h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_10167ED  +
mov eax [ebp+var_4] +
and eax 1 +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_0] +
jb loc_1016857  +
sub eax [ebp+arg_0] +
jmp loc_101685B  +
sub eax [ebp+arg_0] +
dec eax  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
xor ebx ebx +
cmp [ebp+8] ebx +
jz loc_101695F  +
cmp [ebp+0Ch] ebx +
jz loc_101695F  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:ExpandEnvironmentStringsW  +
xor ecx ecx +
push 2  +
pop edx  +
mov [ebp-14h] eax +
mul  edx +
seto cl  +
mov [ebp-4] ebx +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov esi eax +
jmp loc_10168C0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10168BC +
retn   +
xor ebx ebx +
mov esi ebx +
cmp esi ebx +
jnz loc_10168F2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10168EB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10168EB  +
push dword ptr [ebp-14h]  +
push offset dword_1002F3C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
mov edi 8007000Eh +
jmp loc_101695B  +
push dword ptr [ebp-14h]  +
push esi  +
push dword ptr [ebp+8]  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_1016943  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016933  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016933  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_1002F3C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
jmp loc_1016950  +
mov ecx [ebp+0Ch] +
push esi  +
call sub_1012B8A  +
xor esi esi +
xor edi edi +
cmp esi ebx +
jz loc_101695B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
jmp loc_1016988  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016983  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016983  +
push offset dword_1002F3C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:GetTickCount +
push edi  +
call esi  +
push [ebp+dwMilliseconds]  +
mov edi eax +
push [ebp+bWaitAll]  +
push [ebp+lpHandles]  +
push [ebp+nCount]  +
call ds:WaitForMultipleObjects  +
mov ebx eax +
call esi  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_10169EE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10169EE  +
push eax  +
push edi  +
call sub_1016845  +
push eax  +
push [ebp+arg_0]  +
push offset dword_1002F3C  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10049DA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
call __EH_prolog3  +
lea ecx [ebp-3Ch] +
call sub_1018914  +
and dword ptr [ebp-4] 0 +
call ds:__imp_GetCurrentProcess  +
push eax  +
call sub_10167D0  +
test eax eax +
mov eax offset aSoftwareMicr_9 +
jnz loc_1016A2E  +
mov eax offset aSoftwareMic_10 +
push 0  +
push offset aDebugger  +
push eax  +
push 1  +
lea ecx [ebp-3Ch] +
call sub_1018859  +
test eax eax +
jge loc_1016A7E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016A68  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016A68  +
push offset dword_1002F3C  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
lea ecx [ebp-3Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1018955  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
push 0  +
push 80000002h  +
lea ecx [ebp-3Ch] +
call sub_10189DE  +
lea ecx [ebp-3Ch] +
test eax eax +
jl loc_1016A6B  +
call sub_10189A2  +
mov ecx [ebp+8] +
mov esi eax +
test ecx ecx +
jz loc_1016AA8  +
push esi  +
call sub_1012CBE  +
push offset aDrwtsn32  +
push esi  +
call sub_101288A  +
test eax eax +
jnz loc_1016A68  +
push offset aDrwatson  +
push esi  +
call sub_101288A  +
test eax eax +
jnz loc_1016A68  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_1018955  +
xor eax eax +
inc eax  +
jmp loc_1016A76  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+8] +
call sub_101292A  +
xor ebx ebx +
lea ecx [esi+14h] +
mov [ebp-4] ebx +
call sub_101292A  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 1 +
call sub_101292A  +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 2 +
call sub_101292A  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 3 +
call sub_101292A  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 4 +
call sub_101292A  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 5 +
call sub_101292A  +
lea ecx [esi+84h] +
mov byte ptr [ebp-4] 6 +
call sub_101292A  +
lea ecx [esi+90h] +
mov byte ptr [ebp-4] 7 +
call sub_101292A  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 8 +
call sub_101292A  +
lea ecx [esi+0B4h] +
mov byte ptr [ebp-4] 9 +
call sub_101292A  +
xor eax eax +
lea edi [esi+2Ch] +
stos   +
stos   +
xor eax eax +
lea edi [esi+78h] +
stos   +
stos   +
mov [esi+80h] ebx +
mov [esi+34h] ebx +
mov [esi+9Ch] ebx +
mov [esi+0A0h] ebx +
mov [esi+0A4h] ebx +
mov [esi] ebx +
mov [esi+38h] ebx +
mov [esi+40h] ebx +
mov [esi+44h] ebx +
mov [esi+4] ebx +
mov [esi+0C0h] ebx +
mov dword ptr [esi+0C4h] 3 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push edi  +
xor ebx ebx +
push 30h  +
lea eax [ebp+var_30] +
push ebx  +
push eax  +
mov [ebp+var_34] ebx +
call memset  +
add esp 0Ch +
cmp [ebp+arg_4] ebx +
jz loc_1016CF5  +
mov ecx [ebp+arg_C] +
cmp ecx ebx +
jz loc_1016CF5  +
cmp [ebp+arg_10] ebx +
jz loc_1016CF5  +
mov edi [ebp+arg_18] +
cmp edi ebx +
jz loc_1016CF5  +
push esi  +
push [ebp+arg_4]  +
call sub_1012CBE  +
mov esi eax +
cmp esi ebx +
jge loc_1016C46  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016CF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016CF0  +
push offset dword_1003070  +
push 0Fh  +
jmp loc_1016C7A  +
push [ebp+arg_4]  +
call sub_1016739  +
mov ecx [ebp+arg_10] +
push eax  +
call sub_1012CBE  +
mov esi eax +
cmp esi ebx +
jge loc_1016C87  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016CF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016CF0  +
push offset dword_1003070  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1016CF0  +
mov ecx [ebp+arg_10] +
push ebx  +
push 40h  +
call sub_10132F5  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_101464B  +
mov [edi] eax +
cmp eax ebx +
jnz loc_1016CB3  +
mov ecx [ebp+arg_C] +
call sub_1012949  +
push eax  +
call sub_10156AA  +
mov [edi] eax +
mov ecx [ebp+arg_C] +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_34] +
push eax  +
call sub_1012949  +
push eax  +
call sub_1015F11  +
test eax eax +
jl loc_1016CEE  +
mov ecx [ebp+var_2C] +
mov eax [ebp+arg_14] +
mov edx ecx +
shr edx 10h +
mov [eax+2] cx +
mov ecx [ebp+var_28] +
mov [eax] dx +
mov edx ecx +
shr edx 10h +
mov [eax+4] dx +
mov [eax+6] cx +
xor esi esi +
mov eax esi +
pop esi  +
jmp loc_1016D1E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016D19  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016D19  +
push offset dword_1003070  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_1016739  +
mov edi eax +
test edi edi +
jz loc_1016D5A  +
xor esi esi +
push off_101D810[esi]  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1016D62  +
add esi 4 +
cmp esi 1Ch +
jb loc_1016D40  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
inc eax  +
jmp loc_1016D5C  +
***
call __EH_prolog3_GS  +
mov esi [ebp+8] +
mov edi ecx +
lea ecx [ebp-9Ch] +
call sub_101292A  +
and dword ptr [ebp-4] 0 +
xor eax eax +
and [edi+0C0h] eax +
mov [ebp-90h] ax +
push 40h  +
lea eax [ebp-90h] +
push eax  +
call ds:GetSystemDirectoryW  +
test eax eax +
jz loc_1016E8F  +
cmp eax 40h +
ja loc_1016E8F  +
push esi  +
call sub_1016739  +
mov ebx eax +
test ebx ebx +
jz loc_1016E74  +
cmp ebx esi +
jz loc_1016E74  +
sub eax esi +
sar eax 1 +
dec eax  +
push eax  +
push esi  +
lea ecx [ebp-9Ch] +
call sub_1013579  +
test eax eax +
jge loc_1016E20  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1016EB3  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1016EB3  +
push eax  +
push offset dword_1003070  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
jmp loc_1016EB3  +
lea ecx [ebp-9Ch] +
call sub_1012949  +
push eax  +
lea eax [ebp-90h] +
push eax  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1016EB3  +
xor esi esi +
push ebx  +
push off_101D82C[esi*8]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1016E5B  +
inc esi  +
cmp esi 2 +
jb loc_1016E40  +
jmp loc_1016EB3  +
mov dword ptr [edi+0C0h] 1 +
mov eax dword_101D830[esi*8] +
mov [edi+0C4h] eax +
jmp loc_1016EB3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016EB3  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016EB3  +
push offset dword_1003070  +
push 12h  +
jmp loc_1016EA8  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1016EB3  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016EB3  +
push offset dword_1003070  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi [edi+0C0h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-9Ch] +
call sub_101293C  +
mov eax edi +
call sub_1012614  +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
lea ecx [ebp-18h] +
call sub_101292A  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1012949  +
push eax  +
mov ecx edi +
call sub_1016D29  +
test eax eax +
jz loc_1016F45  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1016495  +
test eax eax +
jl loc_1016F45  +
lea ecx [ebp-18h] +
call sub_1012B64  +
test eax eax +
jz loc_1016F45  +
push offset a__1  +
mov ecx esi +
call sub_1012E45  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_10136C6  +
push 0  +
push 40h  +
mov ecx esi +
call sub_10132F5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
mov edi ecx +
lea ecx [ebp-18h] +
call sub_101292A  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_101599F  +
mov esi eax +
test esi esi +
jge loc_1016FB0  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101704F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101704F  +
push esi  +
push offset dword_1003070  +
push 14h  +
jmp loc_1016FDE  +
lea ecx [ebp-18h] +
call sub_1012949  +
push eax  +
call sub_1016739  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FEB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101704F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101704F  +
push esi  +
push offset dword_1003070  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_101704F  +
mov ecx [ebp+0Ch] +
push offset a__2  +
call sub_101364A  +
mov ecx [ebp+0Ch] +
push ebx  +
call sub_1012E45  +
mov ecx [ebp+0Ch] +
push 0  +
push 40h  +
call sub_10132F5  +
lea esi [edi+20h] +
push esi  +
lea ecx [ebp-18h] +
call sub_1012949  +
push eax  +
call sub_10165C0  +
test eax eax +
jge loc_101704D  +
push ebx  +
mov ecx esi +
call sub_1012CBE  +
mov esi eax +
test esi esi +
jge loc_101704D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101704F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101704F  +
push esi  +
push offset dword_1003070  +
push 16h  +
jmp loc_1016FDE  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov eax [ecx+0A0h] +
cmp eax 0C0000139h +
jz loc_101708F  +
cmp eax 0C0000135h +
jz loc_101708F  +
cmp eax 0C0000138h +
jz loc_101708F  +
cmp eax 0C0000142h +
jz loc_101708F  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
add ecx 8 +
jmp sub_1012949  +
***
add ecx 60h +
jmp sub_1012949  +
***
add ecx 14h +
jmp sub_1012949  +
***
add ecx 6Ch +
jmp sub_1012949  +
***
add ecx 48h +
jmp sub_1012949  +
***
add ecx 84h +
jmp sub_1012949  +
***
add ecx 54h +
jmp sub_1012949  +
***
add ecx 90h +
jmp sub_1012949  +
***
add ecx 0A8h +
jmp sub_1012949  +
***
add ecx 0B4h +
jmp sub_1012949  +
***
call __EH_prolog3  +
lea ecx [ebp-18h] +
call sub_101292A  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+8] 0 +
jz loc_101722B  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_101722B  +
push esi  +
call sub_1016739  +
test eax eax +
jz loc_10171F1  +
cmp eax esi +
jz loc_10171F1  +
sub eax esi +
sar eax 1 +
dec eax  +
push eax  +
push esi  +
lea ecx [ebp-18h] +
call sub_1013579  +
mov edi eax +
test edi edi +
jge loc_10171AD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101721B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101721B  +
push edi  +
push offset dword_1003070  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_101721B  +
lea ecx [ebp-18h] +
call sub_1012949  +
push eax  +
push dword ptr [ebp+8]  +
call ds:SetEnvironmentVariableW  +
test eax eax +
jnz loc_10171ED  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101721B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101721B  +
push edi  +
push offset dword_1003070  +
push 0Dh  +
jmp loc_10171A0  +
xor edi edi +
jmp loc_101721B  +
mov edi 80070057h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101721B  +
test byte ptr [eax+1Ch] 2 +
jz loc_101721B  +
push esi  +
push offset dword_1003070  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
mov eax edi +
jmp loc_1017260  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101724F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101724F  +
push offset dword_1003070  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_101293C  +
mov eax 80070057h +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 110Ch +
call __alloca_probe  +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_10F4] eax +
mov [ebp+var_10F8] ecx +
xor ecx ecx +
xor eax eax +
mov [ebp+var_110C] ecx +
lea edi [ebp+var_1108] +
stos   +
stos   +
push 0FE0h  +
stos   +
push ecx  +
lea eax [ebp+var_10E4] +
push eax  +
mov [ebp+Buffer] ecx +
call memset  +
add esp 0Ch +
lea eax [ebp+Buffer] +
push eax  +
xor edi edi +
push ebx  +
push esi  +
mov [ebp+hLibModule] edi +
mov [ebp+cchBuffer] edi +
mov [ebp+hSCObject] edi +
call sub_10155AC  +
mov ebx eax +
cmp ebx edi +
jge loc_101731B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10174ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174ED  +
push ebx  +
push offset dword_1003070  +
push 17h  +
jmp loc_10174DE  +
push esi  +
call ds:__imp_GetProcessId  +
mov [ebp+var_110C] eax +
mov eax [ebp+var_188] +
push offset aAdvapi32_dll  +
mov [ebp+var_1108] eax +
call sub_1013F92  +
mov [ebp+hLibModule] eax +
cmp eax edi +
jnz loc_101737E  +
mov ebx 8007007Eh +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10174ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174ED  +
push offset dword_1003070  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10174ED  +
push offset aI_querytaginfo  +
push eax  +
call ds:__imp_GetProcAddress  +
cmp eax edi +
jnz loc_10173B4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10173C4  +
test byte ptr [eax+1Ch] 1 +
jz loc_10173C4  +
push offset dword_1003070  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10173C4  +
lea ecx [ebp+var_110C] +
push ecx  +
push 1  +
push edi  +
call eax  +
test eax eax +
jz loc_10173CE  +
mov ebx 80004005h +
jmp loc_10174ED  +
mov eax [ebp+hMem] +
cmp eax edi +
jz loc_101744D  +
cmp [eax] di +
jz loc_101744D  +
mov ecx [ebp+var_10F4] +
push offset a__1  +
call sub_1012E45  +
push [ebp+hMem]  +
mov ecx [ebp+var_10F4] +
call sub_1012E45  +
mov ecx [ebp+var_10F4] +
push edi  +
push 40h  +
call sub_10132F5  +
mov ecx [ebp+var_10F8] +
push [ebp+hMem]  +
add ecx 20h +
call sub_1012CBE  +
mov ebx eax +
cmp ebx edi +
jge loc_101744D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10174ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174ED  +
push ebx  +
push offset dword_1003070  +
push 1Ah  +
jmp loc_10174DE  +
push 1  +
push edi  +
push edi  +
call ds:OpenSCManagerW  +
mov [ebp+hSCObject] eax +
cmp eax edi +
jz loc_10174EB  +
mov esi [ebp+var_10F8] +
xor eax eax +
mov [ebp+DisplayName] ax +
lea eax [ebp+cchBuffer] +
push eax  +
lea eax [ebp+DisplayName] +
add esi 20h +
push eax  +
mov ecx esi +
mov [ebp+cchBuffer] 80h +
call sub_1012949  +
push eax  +
push [ebp+hSCObject]  +
call ds:GetServiceDisplayNameW  +
test eax eax +
jz loc_10174EB  +
cmp [ebp+DisplayName] di +
jz loc_10174EB  +
lea eax [ebp+DisplayName] +
push eax  +
mov ecx esi +
call sub_1012CBE  +
mov ebx eax +
cmp ebx edi +
jge loc_10174EB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10174ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174ED  +
push ebx  +
push offset dword_1003070  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10174ED  +
xor ebx ebx +
cmp [ebp+hMem] edi +
jz loc_1017501  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+hLibModule] edi +
jz loc_1017515  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
cmp [ebp+hSCObject] edi +
jz loc_1017529  +
push [ebp+hSCObject]  +
call ds:CloseServiceHandle  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
xor ebx ebx +
lea eax [ebp+lpBaseAddress] +
push eax  +
mov edi ecx +
mov [ebp+lpBaseAddress] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
call ds:RtlGetUnloadEventTraceEx  +
cmp [ebp+lpBaseAddress] ebx +
jz loc_10176D7  +
cmp [ebp+var_C] ebx +
jz loc_10176D7  +
cmp [ebp+var_10] ebx +
jz loc_10176D7  +
mov esi ds:__imp_ReadProcessMemory +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpBaseAddress]  +
mov [ebp+NumberOfBytesRead] ebx +
push dword ptr [edi+4]  +
call esi  +
test eax eax +
jz loc_10176AD  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_10176AD  +
cmp [ebp+Buffer] 5Ch +
jz loc_10175E2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10176FB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10176FB  +
push offset dword_1003070  +
push 1Eh  +
jmp loc_10176F0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_C]  +
mov [ebp+NumberOfBytesRead] ebx +
push dword ptr [edi+4]  +
call esi  +
test eax eax +
jz loc_1017683  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_1017683  +
mov eax 1000h +
cmp [ebp+var_14] eax +
jbe loc_1017612  +
mov [ebp+var_14] eax +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 4  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_10]  +
mov [ebp+NumberOfBytesRead] ebx +
push dword ptr [edi+4]  +
call esi  +
test eax eax +
jz loc_1017646  +
cmp [ebp+NumberOfBytesRead] 4 +
jnz loc_1017646  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_14] +
mov [eax] ecx +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_18] +
mov [eax] ecx +
jmp loc_1017700  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017700  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017700  +
push ebx  +
push offset dword_1003070  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1017700  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017700  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017700  +
push ebx  +
push offset dword_1003070  +
push 1Fh  +
jmp loc_1017676  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ebx eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017700  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017700  +
push ebx  +
push offset dword_1003070  +
push 1Dh  +
jmp loc_1017676  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10176FB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10176FB  +
push offset dword_1003070  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov ebx 80004005h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+lpBaseAddress] +
push eax  +
xor ebx ebx +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
mov [ebp+lpBaseAddress] ebx +
mov [ebp+NumberOfBytesRead] ebx +
mov [ebp+var_4] ebx +
call sub_1017541  +
mov edi eax +
cmp edi ebx +
jge loc_101776B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017894  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017894  +
push edi  +
push offset dword_1003070  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1017894  +
mov eax [ebp+var_4] +
xor ecx ecx +
push 5Ch  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
mov [ebp+var_8] ebx +
test ebx ebx +
jnz loc_10177BD  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017885  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017885  +
push offset dword_1003070  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1017885  +
mov edi [ebp+var_4] +
imul edi edi +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push edi  +
push ebx  +
push [ebp+lpBaseAddress]  +
push dword ptr [esi+4]  +
call ds:__imp_ReadProcessMemory  +
test eax eax +
jz loc_1017852  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_1017852  +
xor eax eax +
cmp [ebp+var_4] eax +
jbe loc_101784E  +
mov ecx ebx +
mov edx [ecx] +
test edx edx +
jz loc_101784E  +
mov edi [esi+0A4h] +
cmp edi edx +
jb loc_1017800  +
mov ebx [ecx+4] +
add ebx edx +
cmp edi ebx +
jb loc_101780B  +
inc eax  +
add ecx 5Ch +
cmp eax [ebp+var_4] +
jb loc_10177E7  +
jmp loc_101784E  +
mov ecx [ebp+arg_0] +
imul eax eax +
mov dword ptr [ecx] 1 +
mov ecx [ebp+var_8] +
add eax ecx +
xor ecx ecx +
mov [eax+52h] cx +
mov ecx [eax+0Ch] +
lea edi [eax+14h] +
mov [esi+80h] ecx +
push edi  +
lea ecx [esi+60h] +
call sub_1012CBE  +
add esi 6Ch +
push edi  +
mov ecx esi +
call sub_1012CBE  +
push offset a_unloaded  +
mov ecx esi +
call sub_1012E45  +
xor edi edi +
jmp loc_1017885  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017885  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017885  +
push edi  +
push offset dword_1003070  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
cmp [ebp+var_8] 0 +
jz loc_1017894  +
push [ebp+var_8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 80h  +
lea eax [ebp+var_84] +
push ebx  +
push eax  +
mov esi ecx +
mov [ebp+Buffer] ebx +
call memset  +
add esp 0Ch +
push offset ModuleName  +
mov [ebp+NumberOfBytesRead] ebx +
call sub_1013F92  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jnz loc_1017921  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017917  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017917  +
push offset dword_1003070  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80070485h +
jmp loc_1017AFA  +
push offset aLdrgetfailured  +
push eax  +
call ds:__imp_GetProcAddress  +
cmp eax ebx +
jnz loc_101796E  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1017945  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017AEE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017AEE  +
push edi  +
push offset dword_1003070  +
push 25h  +
jmp loc_1017AE3  +
call eax  +
cmp eax ebx +
jnz loc_10179A2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017998  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017998  +
push offset dword_1003070  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80004005h +
jmp loc_1017AEE  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
mov edi 84h +
push edi  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
call ds:__imp_ReadProcessMemory  +
test eax eax +
jz loc_1017ABB  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_1017ABB  +
mov eax [ebp+Buffer] +
cmp eax [esi+0A0h] +
jz loc_1017A18  +
mov edi 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017AEE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017AEE  +
push offset dword_1003070  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1017AEE  +
xor eax eax +
mov [ebp+var_46] ax +
lea eax [ebp+var_84] +
push eax  +
lea ecx [esi+60h] +
call sub_1012CBE  +
mov edi eax +
cmp edi ebx +
jge loc_1017A5A  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017AEE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017AEE  +
push edi  +
push offset dword_1003070  +
push 29h  +
jmp loc_1017AE3  +
lea eax [ebp+var_84] +
lea ebx [esi+6Ch] +
push eax  +
mov ecx ebx +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jge loc_1017A8D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017AEE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017AEE  +
push edi  +
push offset dword_1003070  +
push 2Ah  +
jmp loc_1017AE3  +
cmp dword ptr [esi+0A0h] 0C0000139h +
jnz loc_1017AB7  +
cmp word ptr [ebp+var_44] 0 +
jz loc_1017AB7  +
push offset asc_1003194  +
mov ecx ebx +
call sub_1012E45  +
lea eax [ebp+var_44] +
push eax  +
mov ecx ebx +
call sub_1012E45  +
xor edi edi +
jmp loc_1017AEE  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017AEE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017AEE  +
push edi  +
push offset dword_1003070  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
call sub_1016D6C  +
test eax eax +
jz loc_1017B62  +
mov eax [esi+0C4h] +
sub eax 0 +
jz loc_1017B52  +
dec eax  +
jz loc_1017B43  +
dec eax  +
jz loc_1017B3C  +
mov eax 80004005h +
jmp loc_1017B62  +
mov eax 80004001h +
jmp loc_1017B62  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1016F60  +
jmp loc_1017B62  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101726D  +
pop esi  +
pop ebp  +
retn 10h  +
***
call __EH_prolog3_GS  +
mov eax [ebp+10h] +
mov ebx [ebp+8] +
xor edi edi +
push 424h  +
mov [ebp-658h] eax +
lea eax [ebp-63Ch] +
push edi  +
push eax  +
mov esi ecx +
mov [ebp-648h] ebx +
mov [ebp-640h] edi +
call memset  +
add esp 0Ch +
lea ecx [ebp-66Ch] +
call sub_101292A  +
lea ecx [ebp-678h] +
mov [ebp-4] edi +
call sub_101292A  +
mov [ebp-660h] edi +
xor eax eax +
lea edi [ebp-65Ch] +
mov byte ptr [ebp-4] 1 +
stos   +
test ebx ebx +
jnz loc_1017C2D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017C00  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017C00  +
push offset dword_1003070  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov edi 80070057h +
lea ecx [ebp-678h] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-66Ch] +
call sub_101293C  +
mov eax edi +
call sub_1012614  +
retn 14h  +
mov edi ds:__imp_GetProcessId +
push ebx  +
call edi  +
mov [ebp-644h] eax +
test eax eax +
jnz loc_1017C74  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1017C64  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017C64  +
push offset dword_1003070  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
jmp loc_1017C05  +
xor eax eax +
mov [ebp-218h] ax +
call ds:GetTickCount  +
push offset aPsapi_dll  +
mov [ebp-64Ch] eax +
call sub_1013F92  +
mov [ebp-654h] eax +
test eax eax +
jnz loc_1017CDC  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1018304  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018304  +
push offset dword_1003070  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1018304  +
push offset aGetmodulefilen  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [ebp-650h] eax +
test eax eax +
jnz loc_1017D32  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1018304  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018304  +
push edi  +
push offset dword_1003070  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1018304  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+14h] +
mov [esi+0A0h] eax +
mov eax [ebp+18h] +
push ebx  +
mov [esi+0A4h] eax +
mov [esi+9Ch] eax +
call edi  +
mov [esi+38h] eax +
lea eax [ebp-688h] +
push eax  +
lea eax [ebp-690h] +
push eax  +
lea eax [ebp-680h] +
push eax  +
lea eax [ebp-660h] +
push eax  +
push ebx  +
mov [esi+4] ebx +
call ds:GetProcessTimes  +
test eax eax +
jz loc_1017D91  +
mov eax [ebp-660h] +
mov ecx [ebp-65Ch] +
mov [esi+40h] eax +
mov [esi+44h] ecx +
push dword ptr [ebp-644h]  +
push 8  +
call CreateToolhelp32Snapshot  +
mov [ebp-644h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1017DDF  +
mov edi 80004005h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182F8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182F8  +
push offset dword_1003070  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10182F8  +
lea ecx [ebp-640h] +
push ecx  +
push eax  +
mov dword ptr [ebp-640h] 428h +
call Module32FirstW  +
test eax eax +
jnz loc_1017E3A  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push edi  +
push offset dword_1003070  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_10182EF  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-624h]  +
push ebx  +
call dword ptr [ebp-650h]  +
test eax eax +
jnz loc_1017E9F  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1017E8B  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1017E8B  +
push eax  +
push offset dword_1003070  +
push 31h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
lea eax [ebp-420h] +
push eax  +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1006418  +
lea eax [esi+34h] +
push eax  +
lea ecx [esi+2Ch] +
push ecx  +
lea edx [esi+14h] +
push edx  +
lea ebx [esi+8] +
push ebx  +
push dword ptr [ebp-624h]  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-648h]  +
mov ecx esi +
call sub_1016BCE  +
mov edi eax +
test edi edi +
jge loc_1017F00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push offset dword_1003070  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_10182EF  +
lea eax [esi+20h] +
push eax  +
mov ecx ebx +
call sub_1012949  +
push eax  +
call sub_10165C0  +
lea edi [esi+14h] +
push edi  +
mov ecx ebx +
call sub_1012949  +
push eax  +
push dword ptr [ebp-658h]  +
mov ecx esi +
push dword ptr [ebp-648h]  +
call sub_1017B10  +
push edi  +
mov ecx ebx +
call sub_1012949  +
push eax  +
mov ecx esi +
call sub_1016ED7  +
mov ecx ebx +
call sub_1012949  +
push eax  +
push offset aAppdir  +
call sub_1017126  +
mov ebx offset aUnknown +
lea ecx [esi+60h] +
push ebx  +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jge loc_1017F8C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push offset dword_1003070  +
push 33h  +
jmp loc_1017EF0  +
lea ecx [esi+6Ch] +
push ebx  +
call sub_1012CBE  +
mov edi eax +
test edi edi +
jge loc_1017FC1  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push offset dword_1003070  +
push 34h  +
jmp loc_1017EF0  +
mov eax [ebp-62Ch] +
mov ecx [ebp-628h] +
lea edx [ecx+eax] +
mov ecx [esi+0A4h] +
cmp ecx eax +
jb loc_1017FDE  +
cmp ecx edx +
jb loc_1018034  +
lea eax [ebp-640h] +
push eax  +
push dword ptr [ebp-644h]  +
call Module32NextW  +
test eax eax +
jnz loc_1017FC1  +
lea eax [ebp-658h] +
push eax  +
mov ecx esi +
call sub_101770E  +
mov ebx offset Reserved +
mov ecx esi +
call sub_101706A  +
test eax eax +
jz loc_1018017  +
call sub_10178A2  +
call ds:GetTickCount  +
cmp [ebp-64Ch] eax +
ja loc_1018111  +
sub eax [ebp-64Ch] +
jmp loc_1018118  +
sub ecx eax +
xor eax eax +
mov [ebp-218h] ax +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-624h]  +
mov [esi+9Ch] ecx +
push dword ptr [ebp-648h]  +
call dword ptr [ebp-650h]  +
test eax eax +
jnz loc_10180B2  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov ecx Reserved +
mov ebx offset Reserved +
cmp ecx ebx +
jz loc_101809C  +
test byte ptr [ecx+1Ch] 1 +
jz loc_101809C  +
push eax  +
push offset dword_1003070  +
push 35h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
lea eax [ebp-420h] +
push eax  +
push edi  +
lea eax [ebp-218h] +
push eax  +
call sub_1006418  +
jmp loc_10180B7  +
mov ebx offset Reserved +
lea eax [esi+80h] +
push eax  +
lea eax [esi+78h] +
push eax  +
lea eax [esi+6Ch] +
push eax  +
lea eax [esi+60h] +
push eax  +
push dword ptr [ebp-624h]  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-648h]  +
mov ecx esi +
call sub_1016BCE  +
mov edi eax +
test edi edi +
jge loc_1018007  +
mov eax Reserved +
cmp eax ebx +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push offset dword_1003070  +
push 36h  +
jmp loc_1017EF0  +
sub eax [ebp-64Ch] +
dec eax  +
mov ecx Reserved +
cmp ecx ebx +
jz loc_101813B  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101813B  +
push eax  +
push offset dword_1003070  +
push 37h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100DC70  +
lea ecx [esi+60h] +
call sub_1012949  +
push eax  +
push offset aModdir  +
call sub_1017126  +
movzx eax word ptr [esi+32h] +
push eax  +
movzx eax word ptr [esi+30h] +
push eax  +
movzx eax word ptr [esi+2Eh] +
push eax  +
movzx eax word ptr [esi+2Ch] +
push eax  +
lea eax [esi+48h] +
push offset aU_U_U_U  +
push eax  +
call sub_10136DE  +
mov edi eax +
add esp 18h +
test edi edi +
jge loc_101819D  +
mov eax Reserved +
cmp eax ebx +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push edi  +
push offset dword_1003070  +
push 38h  +
jmp loc_1017E2A  +
push dword ptr [esi+34h]  +
mov ebx offset a08x_0 +
lea eax [esi+54h] +
push ebx  +
push eax  +
call sub_10136DE  +
mov edi eax +
add esp 0Ch +
test edi edi +
jge loc_10181DF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push edi  +
push offset dword_1003070  +
push 39h  +
jmp loc_1017E2A  +
movzx eax word ptr [esi+7Eh] +
push eax  +
movzx eax word ptr [esi+7Ch] +
push eax  +
movzx eax word ptr [esi+7Ah] +
push eax  +
movzx eax word ptr [esi+78h] +
push eax  +
lea eax [esi+84h] +
push offset aU_U_U_U  +
push eax  +
call sub_10136DE  +
mov edi eax +
add esp 18h +
test edi edi +
jge loc_1018234  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push edi  +
push offset dword_1003070  +
push 3Ah  +
jmp loc_1017E2A  +
push dword ptr [esi+80h]  +
lea eax [esi+90h] +
push ebx  +
push eax  +
call sub_10136DE  +
mov edi eax +
add esp 0Ch +
test edi edi +
jge loc_1018277  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push edi  +
push offset dword_1003070  +
push 3Bh  +
jmp loc_1017E2A  +
push dword ptr [esi+0A0h]  +
lea eax [esi+0B4h] +
push ebx  +
push eax  +
call sub_10136DE  +
mov edi eax +
add esp 0Ch +
test edi edi +
jge loc_10182B2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push edi  +
push offset dword_1003070  +
push 3Ch  +
jmp loc_1017E2A  +
push dword ptr [esi+9Ch]  +
add esi 0A8h +
push ebx  +
push esi  +
call sub_10136DE  +
mov edi eax +
add esp 0Ch +
test edi edi +
jge loc_10182ED  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10182EF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10182EF  +
push edi  +
push offset dword_1003070  +
push 3Dh  +
jmp loc_1017E2A  +
xor edi edi +
cmp dword ptr [ebp-644h] 0 +
jz loc_1018304  +
push dword ptr [ebp-644h]  +
call ds:__imp_CloseHandle  +
cmp dword ptr [ebp-654h] 0 +
jz loc_1017C05  +
push dword ptr [ebp-654h]  +
call ds:FreeLibrary  +
jmp loc_1017C05  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi+38h]  +
xor eax eax +
push offset asc_10029D4  +
mov [ebp+var_64] ax +
mov [ebp+var_24] ax +
lea eax [ebp+var_24] +
push 10h  +
push eax  +
call sub_100937B  +
push dword ptr [esi+44h]  +
lea eax [ebp+var_64] +
push dword ptr [esi+40h]  +
push offset a016i64x  +
push 20h  +
push eax  +
call sub_100937B  +
add esp 24h +
lea ecx [esi+14h] +
call sub_1012949  +
lea ecx [esi+48h] +
mov [ebp+var_98] eax +
call sub_1012949  +
lea ecx [esi+54h] +
mov [ebp+var_94] eax +
call sub_1012949  +
lea ecx [esi+6Ch] +
mov [ebp+var_90] eax +
call sub_1012949  +
lea ecx [esi+84h] +
mov [ebp+var_8C] eax +
call sub_1012949  +
lea ecx [esi+90h] +
mov [ebp+var_88] eax +
call sub_1012949  +
lea ecx [esi+0B4h] +
mov [ebp+var_84] eax +
call sub_1012949  +
lea ecx [esi+0A8h] +
mov [ebp+var_80] eax +
call sub_1012949  +
mov [ebp+var_7C] eax +
lea eax [ebp+var_24] +
mov [ebp+var_78] eax +
lea eax [ebp+var_64] +
lea ecx [esi+8] +
mov [ebp+var_74] eax +
call sub_1012949  +
lea ecx [esi+60h] +
mov [ebp+var_70] eax +
call sub_1012949  +
push 2710h  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push 0Dh  +
mov [ebp+var_6C] eax +
lea eax [ebp+var_98] +
push eax  +
push offset aApplicationErr  +
push 1  +
push 64h  +
push 3E8h  +
mov [ebp+var_68] edi +
call sub_1015100  +
mov edi eax +
cmp edi esi +
jge loc_1018467  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1018469  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018469  +
push edi  +
push offset dword_1003070  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DC70  +
jmp loc_1018469  +
xor edi edi +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10042AF  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
test eax eax +
jz loc_1018498  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+8] 0 +
mov eax [esi+4] +
mov edi ds:__imp_CloseHandle +
test eax eax +
jz loc_10184B1  +
cmp eax 0FFFFFFFFh +
jz loc_10184B1  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
mov eax [esi] +
test eax eax +
jz loc_10184C2  +
cmp eax 0FFFFFFFFh +
jz loc_10184C2  +
push eax  +
call edi  +
or dword ptr [esi] 0FFFFFFFFh +
pop edi  +
pop esi  +
retn   +
***
mov eax ecx +
or dword ptr [eax] 0FFFFFFFFh +
or dword ptr [eax+4] 0FFFFFFFFh +
and dword ptr [eax+8] 0 +
and dword ptr [eax+0Ch] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
mov [ebp+FileSizeHigh] ebx +
call sub_1018480  +
mov [ebp+var_4] ebx +
or edi 0FFFFFFFFh +
cmp [esi] edi +
jnz loc_1018559  +
push ebx  +
push 8  +
push 3  +
push ebx  +
push [ebp+dwShareMode]  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov [esi] eax +
cmp eax edi +
jnz loc_1018559  +
call ds:__imp_GetLastError  +
cmp eax 20h +
jz loc_101853D  +
cmp eax 21h +
jz loc_101853D  +
cmp eax 36h +
jnz loc_1018551  +
inc [ebp+var_4]  +
push 0FAh  +
call ds:Sleep  +
cmp [ebp+var_4] 5 +
jb loc_1018507  +
cmp [esi] edi +
jz loc_1018608  +
mov eax [esi] +
cmp eax ebx +
jz loc_1018608  +
lea ecx [ebp+FileSizeHigh] +
push ecx  +
push eax  +
call ds:GetFileSize  +
mov [esi+0Ch] eax +
cmp eax edi +
jnz loc_10185A6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101862F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101862F  +
push offset dword_1003224  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_101862F  +
push ebx  +
push eax  +
push ebx  +
push 8  +
push ebx  +
push dword ptr [esi]  +
call ds:CreateFileMappingW  +
mov [esi+4] eax +
cmp eax ebx +
jnz loc_10185D6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101862F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101862F  +
push offset dword_1003224  +
push 0Ch  +
jmp loc_1018596  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
push eax  +
call ds:MapViewOfFile  +
mov [esi+8] eax +
cmp eax ebx +
jnz loc_1018604  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101862F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101862F  +
push offset dword_1003224  +
push 0Dh  +
jmp loc_1018596  +
xor edi edi +
jmp loc_1018648  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101862F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101862F  +
push [ebp+lpFileName]  +
push offset dword_1003224  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100496D  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100629E  +
mov edi eax +
cmp edi ebx +
jge loc_1018648  +
mov ecx esi +
call sub_1018480  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
test esi esi +
jz loc_1018681  +
mov eax [ebp+8] +
test eax eax +
jz loc_1018681  +
cmp dword ptr [ebp+14h] 4 +
jnz loc_1018681  +
cmp word ptr [eax] 0 +
jz loc_10186A5  +
push eax  +
call _wtoi  +
pop ecx  +
mov [esi] eax +
jmp loc_10186A5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10186A5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10186A5  +
push offset dword_1003234  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+10h] +
test ecx ecx +
jz loc_1018705  +
cmp dword ptr [ebp+8] 0 +
jz loc_1018705  +
cmp dword ptr [ebp+14h] 0 +
jnz loc_1018705  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1013579  +
test eax eax +
jge loc_1018729  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1018729  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1018729  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_1003234  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1008B70  +
jmp loc_1018729  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1018729  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018729  +
push offset dword_1003234  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor eax eax +
push esi  +
push edi  +
cmp [ebp+arg_0] eax +
jz loc_1018829  +
cmp [ebp+arg_8] eax +
jz loc_1018829  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_4] eax +
jbe loc_101884D  +
cmp [edi] ax +
jz loc_101884D  +
mov eax edi +
sub eax [ebp+arg_0] +
mov esi edi +
mov edx eax +
sar edx 1 +
cmp edx [ebp+arg_4] +
jmp loc_1018795  +
movzx ecx word ptr [esi] +
test cx cx +
jz loc_101879A  +
cmp cx 0Ah +
jz loc_101879A  +
cmp cx 0Dh +
jz loc_101879A  +
inc esi  +
inc esi  +
inc eax  +
inc eax  +
mov ecx eax +
sar ecx 1 +
cmp ecx [ebp+arg_4] +
mov [ebp+var_4] esi +
jb loc_1018776  +
mov eax [ebp+arg_C] +
test eax eax +
jbe loc_101880B  +
mov ecx [ebp+arg_4] +
mov esi [ebp+arg_8] +
sub ecx edx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] eax +
mov ebx [esi] +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10187B6  +
sub eax edx +
sar eax 1 +
cmp [ebp+var_C] eax +
jb loc_1018800  +
push eax  +
push ebx  +
push edi  +
call wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1018800  +
mov eax [esi] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10187DD  +
push dword ptr [esi+8]  +
mov ecx [ebp+var_4] +
push dword ptr [esi+4]  +
sub eax edx +
sar eax 1 +
lea eax [edi+eax*2] +
sub ecx eax +
sar ecx 1 +
push ecx  +
push eax  +
call dword ptr [esi+0Ch]  +
add esi 14h +
dec [ebp+var_8]  +
jnz loc_10187AF  +
mov esi [ebp+var_4] +
xor eax eax +
lea edi [esi+4] +
cmp [esi] ax +
jnz loc_1018817  +
mov edi esi +
mov ecx edi +
sub ecx [ebp+arg_0] +
sar ecx 1 +
cmp ecx [ebp+arg_4] +
jb loc_101875D  +
jmp loc_101884D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_101884D  +
test byte ptr [eax+1Ch] 1 +
jz loc_101884D  +
push offset dword_1003234  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [esi+14h] +
call sub_1012CBE  +
test eax eax +
jl loc_10188AB  +
push [ebp+arg_8]  +
lea ecx [esi+20h] +
call sub_1012CBE  +
test eax eax +
jl loc_10188AB  +
mov eax [ebp+arg_0] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+2Ch] eax +
mov eax [esi+8] +
test eax eax +
jz loc_10188A0  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+8] 0 +
and dword ptr [esi] 0 +
pop ecx  +
mov dword ptr [esi+4] 1 +
xor eax eax +
jmp loc_10188B0  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov ecx ds:dword_100325C[eax*8] +
cmp ecx [ebp+arg_0] +
jz loc_10188DA  +
inc eax  +
cmp eax 0Bh +
jb loc_10188C1  +
push 9  +
pop eax  +
pop ebp  +
retn 4  +
mov eax ds:dword_1003258[eax*8] +
jmp loc_10188D6  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
xor edi edi +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
mov [esi+2Ch] edi +
cmp eax edi +
jz loc_101890C  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+8] edi +
pop edi  +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+14h] +
call sub_101292A  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+20h] +
call sub_101292A  +
and dword ptr [esi+8] 0 +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_10188E8  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_101897F  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+8] 0 +
pop ecx  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 0 +
call sub_101293C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+14h] +
call sub_101293C  +
call __EH_epilog3  +
retn   +
***
cmp dword ptr [ecx] 0 +
jz loc_10189AB  +
mov eax [ecx+8] +
retn   +
mov eax [ecx+2Ch] +
retn   +
***
cmp dword ptr [ecx] 0 +
jz loc_10189D5  +
mov eax [ecx+0Ch] +
test eax eax +
jnz loc_10189C6  +
mov eax [ecx+8] +
mov eax [eax] +
retn   +
cmp eax 1 +
jnz loc_10189D5  +
push dword ptr [ecx+8]  +
call _wtoi  +
pop ecx  +
retn   +
mov eax [ecx+2Ch] +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-20h] esi +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-14h] edi +
mov [ebp+8] ebx +
mov [ebp-1Ch] ebx +
cmp edi ebx +
jnz loc_1018A2F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1018A25  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018A25  +
push offset dword_1003248  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
mov eax 80070057h +
jmp loc_1018BE3  +
lea ecx [esi+20h] +
call sub_1012B76  +
test eax eax +
jz loc_1018A45  +
mov eax 0E0000000h +
jmp loc_1018BE3  +
cmp [esi+4] ebx +
jz loc_1018BD0  +
cmp [esi] ebx +
jnz loc_1018BD0  +
lea ebx [esi+14h] +
mov ecx ebx +
call sub_1012951  +
test eax eax +
jnz loc_1018A7E  +
xor ebx ebx +
cmp [ebp-14h] ebx +
jz loc_1018AB3  +
cmp [ebp-14h] edi +
jz loc_1018AB3  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov [ebp-14h] edi +
jmp loc_1018AB3  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+0Ch] +
or eax 20019h +
push eax  +
push 0  +
mov ecx ebx +
call sub_1012949  +
push eax  +
push edi  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1018AAA  +
mov esi 80004005h +
jmp loc_1018BE1  +
mov dword ptr [ebp-1Ch] 1 +
xor ebx ebx +
lea eax [ebp+8] +
push eax  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea ecx [esi+20h] +
call sub_1012949  +
push eax  +
push dword ptr [ebp-14h]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jz loc_1018ADD  +
mov esi 80004005h +
jmp loc_1018BD2  +
mov eax [ebp-18h] +
xor edx edx +
inc edx  +
cmp eax edx +
jz loc_1018AF7  +
cmp eax 2 +
jz loc_1018AF7  +
cmp eax 7 +
jnz loc_1018AFA  +
add dword ptr [ebp+8] 2 +
jmp loc_1018AFA  +
inc dword ptr [ebp+8]  +
push eax  +
call sub_10188BA  +
mov ecx [esi+0Ch] +
cmp ecx eax +
jz loc_1018B4B  +
cmp ecx 9 +
jz loc_1018B4B  +
cmp ecx 5 +
jnz loc_1018B15  +
cmp eax edx +
jz loc_1018B4B  +
cmp ecx edx +
jnz loc_1018B1E  +
cmp eax 5 +
jz loc_1018B4B  +
cmp ecx ebx +
jnz loc_1018B26  +
cmp eax edx +
jz loc_1018B4B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1018AD3  +
test [eax+1Ch] dl +
jz loc_1018AD3  +
push offset dword_1003248  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043B6  +
jmp loc_1018AD3  +
mov [esi+0Ch] eax +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1018B5F  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+8] ebx +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [esi+8] eax +
jmp loc_1018B83  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1018B7E +
retn   +
mov esi [ebp-20h] +
xor ebx ebx +
mov eax [esi+8] +
cmp eax ebx +
jnz loc_1018B91  +
mov esi 8007000Eh +
jmp loc_1018BD2  +
push dword ptr [ebp+8]  +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+8] +
push eax  +
push dword ptr [esi+8]  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea ecx [esi+20h] +
call sub_1012949  +
push eax  +
push dword ptr [ebp-14h]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1018AD3  +
mov eax [ebp+8] +
mov dword ptr [esi] 1 +
mov [esi+10h] eax +
xor esi esi +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1018BE1  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1018CDD  +
cmp ecx 7FFFFFFFh +
jbe loc_1018CE2  +
mov eax 80070057h +
test eax eax +
jl loc_1018D1D  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call _vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1018D10  +
cmp eax esi +
ja loc_1018D10  +
jnz loc_1018D18  +
mov [esi+edi] bl +
jmp loc_1018D18  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1018D61  +
dec eax  +
jz loc_1018D5A  +
dec eax  +
jz loc_1018D53  +
dec eax  +
jz loc_1018D5A  +
mov eax offset aPrint +
jmp loc_1018D66  +
mov eax offset aInfo +
jmp loc_1018D66  +
mov eax offset aWarning +
jmp loc_1018D66  +
mov eax offset OutputString +
push eax  +
call OutputDebugStringA  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_204] +
push 200h  +
push eax  +
call sub_1018CC7  +
test eax eax +
jl loc_1018D91  +
lea eax [ebp+var_204] +
push eax  +
jmp loc_1018D96  +
push offset aErrorInLogging  +
call OutputDebugStringA  +
push offset asc_1003680  +
call OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10042AF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3F0h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+hProcess] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+hSourceHandle] eax +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_36C] eax +
mov eax [ebp+arg_10] +
xor ebx ebx +
push 40h  +
mov [ebp+var_37C] eax +
lea eax [ebp+StartupInfo.lpReserved] +
push ebx  +
push eax  +
mov [ebp+hObject] ebx +
mov [ebp+StartupInfo.cb] ebx +
call memset  +
mov [ebp+ProcessInformation.hProcess] ebx +
xor eax eax +
lea edi [ebp+ProcessInformation.hThread] +
stos   +
add esp 0Ch +
push [ebp+hProcess]  +
stos   +
stos   +
mov [ebp+var_360] ebx +
mov [ebp+lpCommandLine] ebx +
mov [ebp+lpAddress] ebx +
mov [ebp+var_364] ebx +
call GetProcessId  +
mov dword ptr [ebp+var_378] eax +
cmp eax ebx +
jnz loc_1018E6F  +
call GetLastError  +
cmp eax ebx +
jg loc_1018E63  +
mov edi eax +
jmp loc_10191B2  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1018E5C  +
call GetCurrentProcessId  +
xor ecx ecx +
cmp dword ptr [ebp+var_378] eax +
push 4  +
setz cl  +
mov edi 1000h +
push edi  +
push 4C0h  +
push ebx  +
mov [ebp+var_384] ecx +
call VirtualAlloc  +
mov [ebp+lpCommandLine] eax +
cmp eax ebx +
jnz loc_1018EAC  +
mov edi 8007000Eh +
jmp loc_10191B2  +
xor eax eax +
inc eax  +
push 2  +
push eax  +
mov [ebp+EventAttributes.bInheritHandle] eax +
push ebx  +
lea eax [ebp+hObject] +
push eax  +
mov [ebp+EventAttributes.lpSecurityDescriptor] ebx +
mov [ebp+EventAttributes.nLength] 0Ch +
call GetCurrentProcess  +
push eax  +
push [ebp+hSourceHandle]  +
call GetCurrentProcess  +
push eax  +
call DuplicateHandle  +
test eax eax +
jnz loc_1018EF1  +
mov [ebp+hObject] ebx +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+EventAttributes] +
push eax  +
call CreateEventW  +
mov [ebp+var_370] eax +
cmp eax ebx +
jz loc_1019061  +
cmp esi ebx +
jz loc_1019061  +
push ebx  +
push 0Ch  +
lea eax [ebp+var_3AC] +
push eax  +
push 1  +
call ds:NtQuerySystemInformation  +
test eax eax +
jl loc_1019061  +
cmp [ebp+hSourceHandle] ebx +
jz loc_1018F4C  +
push [ebp+hSourceHandle]  +
call GetThreadId  +
mov [ebp+var_344] eax +
jmp loc_1018F52  +
mov [ebp+var_344] ebx +
movzx eax word ptr [ebp+var_3AC] +
mov [ebp+var_348] eax +
mov eax [esi+0Ch] +
mov [ebp+Buffer] 28h +
mov [ebp+var_340] ebx +
mov [ebp+var_33C] eax +
mov [ebp+var_338] ebx +
cmp [ebp+var_384] ebx +
jnz loc_1019037  +
push 4  +
push edi  +
push 348h  +
push ebx  +
push [ebp+hProcess]  +
call VirtualAllocEx  +
mov [ebp+lpAddress] eax +
cmp eax ebx +
jz loc_1019061  +
push 14h  +
pop ecx  +
lea edi [ebp+var_324] +
movs   +
mov esi [ebp+var_36C] +
mov ecx 0B3h +
lea edi [ebp+var_2D4] +
movs   +
lea ecx [ebp+Buffer] +
sub eax ecx +
lea ecx [ebp+eax+var_324] +
mov [ebp+NumberOfBytesWritten] eax +
lea eax [ebp+eax+var_2D4] +
mov [ebp+var_32C] eax +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
mov esi 348h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpAddress]  +
mov [ebp+var_334] ecx +
push [ebp+hProcess]  +
mov [ebp+var_330] ebx +
mov [ebp+var_328] ebx +
call WriteProcessMemory  +
test eax eax +
jz loc_1019061  +
cmp [ebp+NumberOfBytesWritten] esi +
jnz loc_1019061  +
mov eax [ebp+lpAddress] +
jmp loc_101905B  +
mov eax [ebp+var_36C] +
mov [ebp+var_32C] eax +
mov [ebp+var_334] esi +
mov [ebp+var_330] ebx +
mov [ebp+var_328] ebx +
lea eax [ebp+Buffer] +
mov [ebp+var_364] eax +
mov edi [ebp+var_37C] +
cmp word ptr [edi] 22h +
jz loc_10190AC  +
push edi  +
call ds:RtlDetermineDosPathNameType_U  +
cmp eax 5 +
jnz loc_10190AC  +
mov esi [ebp+lpCommandLine] +
push edi  +
push 7FFE0030h  +
push offset aSSystem32S  +
add esi 276h +
push 125h  +
push esi  +
call sub_100937B  +
mov edi eax +
add esp 14h +
cmp edi ebx +
jge loc_10190AE  +
push edi  +
push offset aStringcchprint  +
jmp loc_10190E0  +
mov esi edi +
push [ebp+var_364]  +
push [ebp+var_370]  +
push dword ptr [ebp+var_378]  +
push esi  +
push 13Bh  +
push [ebp+lpCommandLine]  +
call sub_100937B  +
mov edi eax +
add esp 18h +
cmp edi ebx +
jge loc_10190EE  +
push edi  +
push offset aStringcchpri_0  +
push ebx  +
call sub_1018D26  +
add esp 0Ch +
jmp loc_1019193  +
call RtlGetCurrentTransaction  +
push ebx  +
mov [ebp+var_360] eax +
call RtlSetCurrentTransaction  +
lea eax [ebp+ProcessInformation] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
mov eax [ebp+arg_14] +
push ebx  +
push ebx  +
neg eax  +
sbb eax eax +
and eax 40000h +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push ebx  +
push ebx  +
push [ebp+lpCommandLine]  +
mov [ebp+StartupInfo.cb] 44h +
push ebx  +
mov [ebp+StartupInfo.lpDesktop] offset dword_100156C +
call CreateProcessW  +
test eax eax +
jz loc_1019193  +
mov eax [ebp+var_370] +
cmp eax ebx +
jz loc_1019193  +
mov [ebp+var_380] eax +
mov eax [ebp+ProcessInformation.hProcess] +
mov [ebp+var_37C] eax +
push ebx  +
push esi  +
push esi  +
lea eax [ebp+var_380] +
push eax  +
push 2  +
call ds:NtWaitForMultipleObjects  +
cmp eax 0C0h +
jz loc_1019162  +
cmp eax 101h +
jz loc_1019162  +
cmp eax esi +
jnz loc_101918D  +
mov edi 8000FFFFh +
jmp loc_1019193  +
cmp eax ebx +
jnz loc_1019193  +
xor edi edi +
cmp [ebp+lpAddress] ebx +
jz loc_10191B2  +
push 8000h  +
push ebx  +
push [ebp+lpAddress]  +
push [ebp+hProcess]  +
call VirtualFreeEx  +
cmp [ebp+hObject] ebx +
jz loc_10191CB  +
push [ebp+hObject]  +
call CloseHandle  +
mov [ebp+hObject] ebx +
cmp [ebp+ProcessInformation.hProcess] ebx +
jz loc_10191DE  +
push [ebp+ProcessInformation.hProcess]  +
call CloseHandle  +
cmp [ebp+ProcessInformation.hThread] ebx +
jz loc_10191F1  +
push [ebp+ProcessInformation.hThread]  +
call CloseHandle  +
cmp [ebp+var_360] ebx +
jz loc_101920F  +
push [ebp+var_360]  +
call RtlSetCurrentTransaction  +
push [ebp+var_360]  +
call CloseHandle  +
cmp [ebp+lpCommandLine] ebx +
jz loc_1019228  +
push 8000h  +
push ebx  +
push [ebp+lpCommandLine]  +
call VirtualFree  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 18h  +
***
call __SEH_prolog4_GS  +
xor edi edi +
cmp [ebp-0A4h] edi +
jz loc_101937C  +
push dword ptr [ebp-0A4h]  +
call CloseHandle  +
mov [ebp-0A4h] edi +
mov eax [esi] +
cmp eax edi +
jz locret_1019392  +
cmp [ebp-0A0h] edi +
jge locret_1019392  +
push eax  +
call CloseHandle  +
mov [esi] edi +
retn   +
***
push offset aInvalidArgs  +
push edi  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
mov eax 80070057h +
call __SEH_epilog4_GS  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1019401  +
cmp [ebp+lpProcName] 0 +
jz loc_1019401  +
mov eax dword_101DB9C +
test eax eax +
jnz loc_10193EE  +
push offset ModuleName  +
call GetModuleHandleW  +
mov dword_101DB9C eax +
test eax eax +
jnz loc_10193EE  +
call GetLastError  +
push eax  +
call sub_100629E  +
jmp loc_1019414  +
push [ebp+lpProcName]  +
push eax  +
call GetProcAddress  +
test eax eax +
jz loc_10193E1  +
mov [esi] eax +
xor eax eax +
jmp loc_1019414  +
push offset aInvalidParrams  +
push 0  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push offset aNtwow64queryin  +
call sub_10193B2  +
mov esi eax +
test esi esi +
jge loc_101944F  +
push offset aUnableToGetNtw  +
push 0  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_1019487  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call [ebp+var_4]  +
mov esi eax +
mov eax 0C0000000h +
mov ecx esi +
and ecx eax +
cmp ecx eax +
jnz loc_1019480  +
push esi  +
push offset aNtwow64query_0  +
push 0  +
call sub_1018D26  +
add esp 0Ch +
mov eax esi +
or eax 10000000h +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push offset aNtwow64readvir  +
call sub_10193B2  +
mov esi eax +
test esi esi +
jge loc_10194C2  +
push offset aUnableToGetN_0  +
push 0  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_1019500  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call [ebp+var_4]  +
mov esi eax +
mov eax 0C0000000h +
mov ecx esi +
and ecx eax +
cmp ecx eax +
jnz loc_10194F9  +
push esi  +
push offset aNtwow64readv_0  +
push 0  +
call sub_1018D26  +
add esp 0Ch +
mov eax esi +
or eax 10000000h +
pop esi  +
leave   +
retn 1Ch  +
***
call __SEH_prolog4  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1019531  +
push offset aInvalidArgs  +
push eax  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
mov eax 80070057h +
jmp loc_1019579  +
and [ebp+ms_exc.disabled] 0 +
push 0Eh  +
push offset aPeb_signature  +
add eax 4 +
push eax  +
call wcsncmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
and eax 80004005h +
jmp loc_101956F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov eax 80004005h +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+lpBaseAddress] esi +
cmp dword ptr [ebp+hProcess] esi +
jz loc_101962A  +
cmp [ebp+lpBuffer] esi +
jz loc_101962A  +
push esi  +
push 4  +
lea eax [ebp+lpBaseAddress] +
push eax  +
push 1Ah  +
push dword ptr [ebp+hProcess]  +
call ds:NtQueryInformationProcess  +
mov edi eax +
cmp edi esi +
jge loc_10195D5  +
push edi  +
push offset aNtqueryinforma  +
push esi  +
call sub_1018D26  +
mov eax edi +
add esp 0Ch +
or eax 10000000h +
jmp loc_101963C  +
cmp [ebp+lpBaseAddress] esi +
jnz loc_10195EC  +
push offset aNo32PebForProc  +
push esi  +
call sub_1018D26  +
mov eax 80004005h +
jmp loc_101963A  +
push esi  +
push 248h  +
push [ebp+lpBuffer]  +
push [ebp+lpBaseAddress]  +
push dword ptr [ebp+hProcess]  +
call ReadProcessMemory  +
test eax eax +
jnz loc_1019626  +
push offset aReadprocessmem  +
push esi  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
call GetLastError  +
cmp eax esi +
jle loc_101963C  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101963C  +
xor eax eax +
jmp loc_101963C  +
push offset aInvalidArg  +
push esi  +
call sub_1018D26  +
mov eax 80070057h +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_0] esi +
jz loc_10196F5  +
cmp [ebp+arg_4] esi +
jz loc_10196F5  +
push 2Ch  +
lea eax [ebp+var_2C] +
push esi  +
push eax  +
mov [ebp+var_30] esi +
call memset  +
add esp 0Ch +
push esi  +
push 30h  +
lea eax [ebp+var_30] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_101941E  +
mov edi eax +
cmp edi esi +
jge loc_10196A5  +
push edi  +
push offset aWerpntwow64que  +
push esi  +
call sub_1018D26  +
mov eax edi +
add esp 0Ch +
or eax 10000000h +
jmp loc_1019707  +
mov eax [ebp+var_28] +
or eax [ebp+var_24] +
jnz loc_10196BF  +
push offset aNo64BitPebForP  +
push esi  +
call sub_1018D26  +
mov eax 80004005h +
jmp loc_1019705  +
push esi  +
push esi  +
push 380h  +
push [ebp+arg_4]  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push [ebp+arg_0]  +
call sub_1019491  +
mov edi eax +
cmp edi esi +
jge loc_10196F1  +
push offset aWerpntwow64rea  +
push esi  +
call sub_1018D26  +
mov eax edi +
or eax 10000000h +
jmp loc_1019705  +
xor eax eax +
jmp loc_1019707  +
push offset aInvalidArg  +
push esi  +
call sub_1018D26  +
mov eax 80070057h +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
xor esi esi +
cmp dword ptr [ebp+hProcess] esi +
jz loc_10197A7  +
cmp [ebp+lpBuffer] esi +
jz loc_10197A7  +
push esi  +
push 18h  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push dword ptr [ebp+hProcess]  +
call ds:NtQueryInformationProcess  +
test eax eax +
jge loc_1019752  +
push offset aNtqueryinfor_0  +
push esi  +
call sub_1018D26  +
mov eax 80070006h +
jmp loc_10197B7  +
cmp [ebp+lpBaseAddress] esi +
jnz loc_1019769  +
push offset aNoPebForProces  +
push esi  +
call sub_1018D26  +
mov eax 80004005h +
jmp loc_10197B7  +
push esi  +
push 248h  +
push [ebp+lpBuffer]  +
push [ebp+lpBaseAddress]  +
push dword ptr [ebp+hProcess]  +
call ReadProcessMemory  +
test eax eax +
jnz loc_10197A3  +
push offset aReadprocessmem  +
push esi  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
call GetLastError  +
cmp eax esi +
jle loc_10197B9  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10197B9  +
xor eax eax +
jmp loc_10197B9  +
push offset aInvalidArg  +
push esi  +
call sub_1018D26  +
mov eax 80070057h +
pop ecx  +
pop ecx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 81Ch +
push ebx  +
push esi  +
push edi  +
mov esi 247h +
xor ebx ebx +
push esi  +
lea eax [ebp+var_49C+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+var_49C] bl +
call memset  +
push esi  +
lea eax [ebp+Buffer+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+Buffer] bl +
call memset  +
push 37Fh  +
lea eax [ebp+var_81C+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+var_81C] bl +
call memset  +
mov edi [ebp+arg_0] +
add esp 24h +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
cmp edi ebx +
jz loc_1019995  +
cmp [ebp+lpBuffer] ebx +
jz loc_1019995  +
lea eax [ebp+var_4] +
push eax  +
call GetCurrentProcess  +
push eax  +
call IsWow64Process  +
test eax eax +
jnz loc_101984E  +
mov [ebp+var_4] ebx +
cmp [ebp+var_4] ebx +
jz loc_101986F  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call IsWow64Process  +
test eax eax +
jnz loc_1019864  +
mov [ebp+var_8] ebx +
xor eax eax +
cmp [ebp+var_8] ebx +
setz al  +
mov [ebp+var_C] eax +
cmp [ebp+var_8] ebx +
jnz loc_10198CC  +
cmp [ebp+var_4] ebx +
jz loc_10198B1  +
cmp [ebp+var_C] ebx +
jz loc_10198B1  +
lea eax [ebp+var_81C] +
push eax  +
push edi  +
call sub_1019647  +
mov esi eax +
cmp esi ebx +
jge loc_10198A3  +
push offset aFailedToReadTh  +
push ebx  +
call sub_1018D26  +
mov eax esi +
jmp loc_10199A5  +
mov eax [ebp+var_4C4] +
mov ecx [ebp+var_4C0] +
jmp loc_10198E6  +
lea eax [ebp+var_49C] +
push eax  +
push edi  +
call sub_1019712  +
mov esi eax +
cmp esi ebx +
jl loc_1019891  +
mov eax [ebp+var_26C] +
jmp loc_10198E4  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
call sub_1019586  +
cmp eax ebx +
jl loc_10199A7  +
mov eax [ebp+var_24] +
xor ecx ecx +
mov edx eax +
or edx ecx +
jnz loc_10198F6  +
mov eax 80070490h +
jmp loc_10199A7  +
cmp [ebp+var_4] ebx +
jz loc_1019935  +
cmp [ebp+var_C] ebx +
jz loc_1019935  +
push ebx  +
push ebx  +
push 8D0h  +
push [ebp+lpBuffer]  +
push ecx  +
push eax  +
push edi  +
call sub_1019491  +
mov esi eax +
mov eax 0C0000000h +
mov ecx esi +
and ecx eax +
cmp ecx eax +
jnz loc_101996B  +
push offset aWerpntwow64r_0  +
push ebx  +
call sub_1018D26  +
mov eax esi +
or eax 10000000h +
jmp loc_10199A5  +
push ebx  +
push 8D0h  +
push [ebp+lpBuffer]  +
push eax  +
push edi  +
call ReadProcessMemory  +
test eax eax +
jnz loc_101996B  +
push offset aReadprocessmem  +
push ebx  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
call GetLastError  +
cmp eax ebx +
jle loc_10199A7  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10199A7  +
mov esi [ebp+lpBuffer] +
push esi  +
call sub_101950A  +
test eax eax +
jge loc_101998A  +
push offset aWerpvalidatepe  +
push ebx  +
call sub_1018D26  +
mov eax 80004005h +
jmp loc_10199A5  +
xor eax eax +
mov [esi+826h] ax +
jmp loc_10199A7  +
push offset aInvalidArgumen  +
push ebx  +
call sub_1018D26  +
mov eax 80070057h +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8D4h +
mov eax dword_101D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push 8CCh  +
lea eax [ebp+var_8D0] +
push edi  +
push eax  +
mov [ebp+lpBuffer] edi +
call memset  +
add esp 0Ch +
cmp ebx edi +
jz loc_1019A35  +
cmp esi edi +
jz loc_1019A35  +
push 8D0h  +
lea eax [ebp+lpBuffer] +
push edi  +
push eax  +
mov [esi] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+lpBuffer] +
push eax  +
push ebx  +
call sub_10197C3  +
cmp eax edi +
jl loc_1019A47  +
mov eax [ebp+var_64] +
mov ecx eax +
or ecx [ebp+var_60] +
jnz loc_1019A2F  +
mov eax 80070490h +
jmp loc_1019A47  +
mov [esi] eax +
xor eax eax +
jmp loc_1019A47  +
push offset aInvalidArgsInC  +
push edi  +
call sub_1018D26  +
pop ecx  +
pop ecx  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10042AF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1019B20  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1019B49  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_1019B92  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_1019BD3  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1019BA0  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_1019BCE  +
cmp edx [esp+arg_4] +
ja loc_1019BCE  +
jb loc_1019BCF  +
cmp eax [esp+arg_0] +
jbe loc_1019BCF  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-49Ch] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A46C +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A498 +
jmp loc_1012504  +
***
push 8  +
push 0Ch  +
lea eax [ebp-540h] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-544h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A4C4 +
jmp loc_1012504  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A4F8 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A524 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-344h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A550 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8D0h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A57C +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A5B0 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A5DC +
jmp loc_1012504  +
***
lea ecx [ebp-1Ch] +
jmp sub_101293C  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A608 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A63C +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8C4h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A668 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A694 +
jmp loc_1012504  +
***
jmp fword ptr [eax+3Ch]  +
***
sub [ecx] eax +
add [edx+0Ah] ebp +
push 0Ch  +
mov eax [ebp-10h] +
add eax 6Ch +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
retn   +
***
push offset sub_101293C  +
push 0Ch  +
push 0Ch  +
mov eax [ebp-10h] +
add eax 0E4h +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
retn   +
***
mov ecx [ebp-10h] +
add ecx 174h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 180h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 18Ch +
jmp sub_101293C  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A6B8 +
jmp loc_1012504  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov esp 0A9E8C833h +
mov ds:4A8BFFFEh al +
cld   +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A75C +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A8D8 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A930 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A988 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101A9E0 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AA38 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AA64 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AAC4 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AB38 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AB90 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101ABE4 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-260h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AC8C +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-144h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101ACE4 +
jmp loc_1012504  +
***
push 1  +
push 0Ch  +
lea eax [ebp-1Ch] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AD10 +
jmp loc_1012504  +
***
push 2  +
push 0Ch  +
lea eax [ebp-2Ch] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AD3C +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AD94 +
jmp loc_1012504  +
***
mov ecx [ebp-10h] +
add ecx 8 +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 14h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 20h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 48h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 54h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 60h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 6Ch +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 84h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 90h +
jmp sub_101293C  +
***
mov ecx [ebp-10h] +
add ecx 0A8h +
jmp sub_101293C  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101ADB8 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A0h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AE34 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AE60 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-694h] +
xor ecx eax +
call sub_10042AF  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AE94 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AEC8 +
jmp loc_1012504  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_10042AF  +
mov eax offset dword_101AF20 +
jmp loc_1012504  +
***
mov al dl +
add [eax] eax +
mov al ds:780001C2h +
retn 1  +
***
retn   +
***
retn   +
***
