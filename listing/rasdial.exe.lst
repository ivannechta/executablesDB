mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100EB20  +
cmp [esi] ax +
jz loc_100EB1C  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_100EB12  +
test edx edx +
jnz loc_100EB25  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_100EB36  +
test eax eax +
jl loc_100EB33  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_100EB4C  +
cmp ecx [ebp+arg_0] +
jbe loc_100EB51  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_100EB7F  +
cmp [ebp+arg_0] eax +
jnz loc_100EB73  +
cmp ecx eax +
jnz loc_100EB78  +
cmp ecx [ebp+arg_4] +
jbe loc_100EB87  +
mov eax 80070057h +
jmp loc_100EB87  +
push [ebp+arg_4]  +
call sub_100EB3C  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100EBC5  +
cmp [ebp+arg_4] eax +
jz loc_100EBC1  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100EBC1  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100EBA4  +
test esi esi +
jnz loc_100EBCD  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100EBDB  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_100EC0A  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_100EC3F  +
test [ebp+arg_8] 1000h +
jz loc_100EC3F  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_100EC87  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_100EC6F  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_100EC87  +
test esi esi +
jbe loc_100ECA0  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_100ECA0  +
test [ebp+arg_8] 800h +
jz loc_100ECA0  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100ECCA  +
mov eax [ebp+arg_0] +
jb loc_100ECC1  +
cmp eax 0FFFFFFFFh +
ja loc_100ECCA  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100ECD5  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 264h +
mov eax dword_1012000 +
xor eax ebp +
mov [ebp+var_4] eax +
push 25Ch  +
lea eax [ebp+var_264.rasconnstate] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+var_264.dwSize] 260h +
jmp loc_100ED28  +
push 7Dh  +
call ds:Sleep  +
lea eax [ebp+var_264] +
push eax  +
push dword_1012030  +
call RasGetConnectStatusW  +
cmp eax 6 +
jnz loc_100ED20  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101098F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100ED61  +
xor eax eax +
jmp loc_100ED84  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100ED66  +
sub eax edx +
sar eax 1 +
cmp eax 100h +
ja loc_100ED5D  +
xor eax eax +
cmp word ptr [esi] 2Fh +
setnz al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec [ebp+arg_4]  +
push ebx  +
mov ebx ds:_getwch +
push esi  +
mov esi [ebp+arg_8] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
jmp loc_100EDD3  +
cmp eax 0FFFFh +
jz loc_100EDDD  +
cmp eax 8 +
jnz loc_100EDC1  +
cmp edi [ebp+arg_0] +
jz loc_100EDD3  +
dec edi  +
dec edi  +
dec dword ptr [esi]  +
jmp loc_100EDD3  +
mov [edi] ax +
mov eax [esi] +
cmp eax [ebp+arg_4] +
sbb ecx ecx +
neg ecx  +
inc eax  +
lea edi [edi+ecx*2] +
mov [esi] eax +
call ebx  +
movzx eax ax +
cmp eax 0Dh +
jnz loc_100EDAA  +
xor eax eax +
mov [edi] ax +
call ds:__iob_func  +
add eax 20h +
push eax  +
push 0Ah  +
call ds:fputwc  +
mov eax [ebp+arg_4] +
cmp eax [esi] +
pop ecx  +
pop ecx  +
pop edi  +
sbb eax eax +
pop esi  +
and eax 84Bh +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_100EE6A  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_100EE6A  +
dec [ebp+arg_4]  +
and dword ptr [edi] 0 +
push ebx  +
mov ebx ds:getchar +
jmp loc_100EE49  +
movzx eax word ptr [esi] +
cmp eax 0FFFFFFFFh +
jz loc_100EE56  +
mov eax [edi] +
cmp eax [ebp+arg_4] +
sbb ecx ecx +
neg ecx  +
inc eax  +
lea esi [esi+ecx*2] +
mov [edi] eax +
call ebx  +
push 0Ah  +
pop ecx  +
mov [esi] ax +
cmp cx ax +
jnz loc_100EE32  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+arg_4] +
cmp eax [edi] +
pop ebx  +
sbb eax eax +
and eax 84Bh +
jmp loc_100EE6F  +
mov eax 84Bh +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+lpFileName] +
push esi  +
xor eax eax +
xor esi esi +
cmp ecx eax +
jz loc_100EEB0  +
cmp [ecx] ax +
jz loc_100EEB0  +
push eax  +
push 80h  +
push 3  +
push eax  +
push 1  +
push eax  +
push ecx  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_100EEB0  +
push eax  +
inc esi  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
test eax eax +
jnz loc_100EEE4  +
or eax 0FFFFFFFFh +
jmp loc_100EEE6  +
dec eax  +
dec eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100EF05  +
cmp edx 7FFFFFFFh +
jbe loc_100EF0A  +
mov eax 80070057h +
test eax eax +
jl loc_100EF20  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100EB90  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_100EB5A  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_100F03D  +
test [ebp+arg_14] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
jz loc_100EF6F  +
cmp [ebp+arg_8] eax +
jnz loc_100EF6F  +
mov [ebp+arg_8] offset dword_1007D20 +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_100EF8A  +
mov esi 80070057h +
cmp ecx eax +
jz loc_100EFF6  +
xor eax eax +
mov [edi] ax +
jmp loc_100EFF6  +
cmp ecx eax +
jnz loc_100EFAB  +
mov edx [ebp+arg_8] +
cmp [edx] ax +
jz loc_100F027  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_100EFF6  +
mov [ebp+arg_0] eax +
push 7FFFFFFEh  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_8] +
mov edx ecx +
mov ecx edi +
call sub_100EB90  +
mov esi eax +
mov eax [ebp+arg_0] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_100EFF3  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_100F027  +
cmp ebx 1 +
jbe loc_100F027  +
push [ebp+arg_0]  +
lea ecx [ebx+ebx] +
call sub_100EBE7  +
jmp loc_100F027  +
mov ecx [ebp+arg_4] +
test [ebp+arg_14] 1C00h +
jz loc_100F01B  +
test ecx ecx +
jz loc_100F01B  +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_100EC15  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_100F027  +
cmp esi 8007007Ah +
jnz loc_100F03C  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100F033  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100F03C  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_100F065  +
cmp edx 7FFFFFFFh +
jbe loc_100F067  +
mov eax ecx +
test eax eax +
jl loc_100F090  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100F080  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_100F090  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100EB90  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_14] +
mov edx [ebp+arg_4] +
mov [ebp+var_8] eax +
and [ebp+var_8] 100h +
push esi  +
push edi  +
jz loc_100F172  +
push eax  +
push 7FFFFFFFh  +
push [ebp+arg_0]  +
mov ecx edx +
call sub_100EB5A  +
test eax eax +
jl loc_100F0D5  +
test edx edx +
jnz loc_100F18D  +
and [ebp+var_4] 0 +
mov esi eax +
test eax eax +
jl loc_100F16A  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov edi [ebp+arg_4] +
push ebx  +
sub edi eax +
xor esi esi +
lea ebx [ecx+eax*2] +
mov [ebp+var_C] ebx +
mov [ebp+var_10] edi +
cmp [ebp+var_8] esi +
jz loc_100F10B  +
cmp [ebp+arg_8] esi +
jnz loc_100F10B  +
mov [ebp+arg_8] offset dword_1007D20 +
test [ebp+arg_14] 0FFFFE000h +
jz loc_100F19D  +
mov esi 80070057h +
test [ebp+arg_14] 1C00h +
jz loc_100F14B  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100F14B  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_C] +
push ecx  +
mov ecx [ebp+var_4] +
add eax eax +
push eax  +
lea ebx [ebp+var_10] +
call sub_100EC15  +
mov ebx [ebp+var_C] +
mov edi [ebp+var_10] +
test esi esi +
jge loc_100F157  +
cmp esi 8007007Ah +
jnz loc_100F169  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100F160  +
mov [eax] ebx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100F169  +
mov [eax] edi +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
xor eax eax +
test edx edx +
jz loc_100F180  +
cmp edx 7FFFFFFFh +
jbe loc_100F185  +
mov eax 80070057h +
test eax eax +
jl loc_100F0D5  +
mov eax [ebp+arg_0] +
lea edi [ebp+var_4] +
call sub_100EB05  +
jmp loc_100F0D9  +
cmp edi 1 +
ja loc_100F1BE  +
mov eax [ebp+arg_8] +
cmp [eax] si +
jz loc_100F157  +
mov esi ecx +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_100F11D  +
push 7FFFFFFEh  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
mov ecx ebx +
mov [ebp+var_10] esi +
call sub_100EB90  +
mov esi eax +
mov eax [ebp+var_10] +
sub edi eax +
lea ebx [ebx+eax*2] +
mov [ebp+var_C] ebx +
mov [ebp+var_10] edi +
test esi esi +
jl loc_100F11D  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_100F157  +
cmp edi 1 +
jbe loc_100F157  +
lea ecx [edi+edi] +
push ebx  +
call sub_100EBE7  +
jmp loc_100F157  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi 568h +
mov [ebp+dwBytes] edi +
test ebx ebx +
jz loc_100F2E8  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100F2E8  +
and dword ptr [ebx] 0 +
push edi  +
push 0  +
call ds:GlobalAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_100F267  +
call ds:GetLastError  +
mov dword_1012604 eax +
and dword ptr [ebx] 0 +
xor eax eax +
inc eax  +
jmp loc_100F2EA  +
push edi  +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
mov [eax] edi +
push ebx  +
lea eax [ebp+dwBytes] +
push eax  +
push dword ptr [esi]  +
call RasEnumConnectionsW  +
test eax eax +
jz loc_100F2E8  +
cmp dword ptr [ebx] 0 +
jz loc_100F2E8  +
cmp eax 25Bh +
jz loc_100F2A5  +
mov dword_1012604 eax +
push dword ptr [esi]  +
call ds:GlobalFree  +
and dword ptr [esi] 0 +
jmp loc_100F25C  +
push dword ptr [esi]  +
call ds:GlobalFree  +
push [ebp+dwBytes]  +
push 0  +
call ds:GlobalAlloc  +
mov [esi] eax +
test eax eax +
jz loc_100F251  +
mov [eax] edi +
push ebx  +
lea eax [ebp+dwBytes] +
push eax  +
push dword ptr [esi]  +
call RasEnumConnectionsW  +
test eax eax +
jz loc_100F2E8  +
mov dword_1012604 eax +
and dword ptr [ebx] 0 +
push dword ptr [esi]  +
call ds:GlobalFree  +
and dword ptr [esi] 0 +
jmp loc_100F25F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov ecx dword_1012034 +
xor eax eax +
inc eax  +
xor edx edx +
test ecx ecx +
jbe locret_100F31C  +
push esi  +
mov esi dword_1012038 +
cmp dword ptr [esi+edx*4] 0 +
jz loc_100F319  +
inc edx  +
cmp edx ecx +
jb loc_100F306  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_100F391  +
cmp [ebp+arg_4] 0 +
jz loc_100F391  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F33C  +
sub eax edx +
sar eax 1 +
mov edi eax +
mov eax [ebp+arg_4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100F352  +
mov esi ds:GlobalAlloc +
sub eax ecx +
sar eax 1 +
mov ebx eax +
lea eax [edi+edi+2] +
push eax  +
push 0  +
call esi  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_100F391  +
lea eax [ebx+ebx+2] +
push eax  +
push 0  +
call esi  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100F39A  +
push [ebp+hMem]  +
call ds:GlobalFree  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov esi 100h +
push esi  +
push 0  +
push 0  +
push [ebp+arg_0]  +
inc edi  +
push edi  +
mov edi [ebp+hMem] +
push edi  +
call sub_100EF29  +
test eax eax +
jge loc_100F3BE  +
call ds:GetLastError  +
jmp loc_100F391  +
push esi  +
push 0  +
push 0  +
push [ebp+arg_4]  +
inc ebx  +
push ebx  +
mov ebx [ebp+var_8] +
push ebx  +
call sub_100EF29  +
test eax eax +
jl loc_100F3B6  +
push 3Ah  +
push edi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100F3E9  +
xor ecx ecx +
mov [eax] cx +
mov esi ds:_wcsupr +
push edi  +
call esi  +
push ebx  +
call esi  +
push edi  +
push ebx  +
call ds:wcsstr  +
mov esi eax +
add esp 10h +
sub esi ebx +
neg esi  +
sbb esi esi +
push edi  +
mov edi ds:GlobalFree +
inc esi  +
call edi  +
push ebx  +
call edi  +
mov eax esi +
jmp loc_100F393  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
mov [ebp+NumberOfBytesWritten] esi +
call ds:GetConsoleOutputCP  +
push 0FFFFFFF5h  +
mov [ebp+CodePage] eax +
call ds:GetStdHandle  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100F450  +
call ds:GetLastError  +
jmp loc_100F4C0  +
push ebx  +
push edi  +
mov edi ds:WideCharToMultiByte +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push esi  +
push [ebp+CodePage]  +
call edi  +
mov ebx eax +
cmp ebx esi +
jnz loc_100F475  +
call ds:GetLastError  +
jmp loc_100F4BE  +
push ebx  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax esi +
jz loc_100F4BE  +
push esi  +
push esi  +
push ebx  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push esi  +
push [ebp+CodePage]  +
call edi  +
cmp eax esi +
jz loc_100F4AF  +
push esi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
dec eax  +
push eax  +
push [ebp+hMem]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jnz loc_100F4B5  +
call ds:GetLastError  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
call __SEH_prolog4_GS  +
cmp dword ptr [ebp-424h] 0 +
jz locret_100F71D  +
cmp dword ptr [ebp-43Ch] 0 +
jz locret_100F71D  +
push dword ptr [ebp-424h]  +
call ds:GlobalFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+hMem] +
xor edi edi +
push eax  +
mov [ebp+var_4] edi +
mov [ebp+hMem] edi +
call sub_100F218  +
test eax eax +
jz loc_100F754  +
cmp [ebp+hMem] edi +
jz loc_100F7A9  +
push [ebp+hMem]  +
call ds:GlobalFree  +
jmp loc_100F7A9  +
push ebx  +
mov ebx [ebp+hMem] +
push edi  +
cmp [ebp+var_4] edi +
jnz loc_100F767  +
push 16h  +
call sub_100F4CA  +
jmp loc_100F7A1  +
push 0Bh  +
call sub_100F4CA  +
cmp [ebp+var_4] edi +
jz loc_100F79E  +
push esi  +
lea esi [ebx+8] +
dec [ebp+var_4]  +
push offset dword_10125E0  +
push 0Ch  +
mov dword_10125E0 esi +
mov dword_10125E4 edi +
call sub_100F4CA  +
add esi 568h +
cmp [ebp+var_4] edi +
jnz loc_100F777  +
pop esi  +
dec [ebp+var_4]  +
push ebx  +
call ds:GlobalFree  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+hMem] +
xor ebx ebx +
push eax  +
mov [ebp+var_4] ebx +
mov [ebp+hMem] ebx +
call sub_100F218  +
test eax eax +
jnz loc_100F86E  +
mov ax word_1012DA0 +
push edi  +
mov edi [ebp+hMem] +
mov [ebp+hMem] edi +
cmp ax bx +
jnz loc_100F7FD  +
cmp [ebp+var_4] 1 +
jbe loc_100F7FD  +
push ebx  +
push 0Dh  +
call sub_100F4CA  +
call sub_100F723  +
jmp loc_100F86D  +
cmp [ebp+var_4] ebx +
jnz loc_100F80C  +
push ebx  +
push 16h  +
call sub_100F4CA  +
jmp loc_100F86D  +
push esi  +
mov esi offset word_1012DA0 +
cmp ax bx +
jnz loc_100F84C  +
cmp [ebp+var_4] 1 +
jnz loc_100F84C  +
push 100h  +
push ebx  +
push ebx  +
lea eax [edi+8] +
push eax  +
push 101h  +
push esi  +
call sub_100EF29  +
jmp loc_100F84C  +
dec [ebp+var_4]  +
lea eax [edi+8] +
push eax  +
push esi  +
call sub_100EEC2  +
test eax eax +
jz loc_100F87F  +
add edi 568h +
cmp [ebp+var_4] ebx +
jnz loc_100F835  +
dec [ebp+var_4]  +
push offset dword_10125E0  +
push 17h  +
mov dword_10125E0 esi +
mov dword_10125E4 ebx +
call sub_100F4CA  +
pop esi  +
pop edi  +
cmp [ebp+hMem] ebx +
jz loc_100F87C  +
push [ebp+hMem]  +
call ds:GlobalFree  +
pop ebx  +
leave   +
retn   +
push 1  +
push offset HandlerRoutine  +
call ds:SetConsoleCtrlHandler  +
push dword ptr [edi+4]  +
call RasHangUpW  +
cmp eax ebx +
jz loc_100F89D  +
mov dword_1012604 eax +
call sub_100ECE9  +
jmp loc_100F86C  +
***
and dword_10125E4 0 +
push offset dword_10125E0  +
push 0Eh  +
mov dword_10125E0 offset unk_10123C0 +
call sub_100F4CA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_1012000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor ebx ebx +
push 208h  +
mov [ebp+Buffer] ax +
lea eax [ebp-20Eh] +
push ebx  +
push eax  +
mov [ebp+pNumArgs] ebx +
call memset  +
add esp 0Ch +
call ds:GetCommandLineW  +
lea ecx [ebp+pNumArgs] +
push ecx  +
push eax  +
call ds:CommandLineToArgvW  +
mov [ebp+hMem] eax +
cmp eax ebx +
jnz loc_100F936  +
call ds:GetLastError  +
or ebx 0FFFFFFFFh +
jmp loc_100FEF7  +
mov esi 100h +
push esi  +
push ebx  +
push ebx  +
push dword ptr [eax]  +
lea edi [esi+5] +
push edi  +
push offset unk_10123C0  +
call sub_100EF29  +
push esi  +
push ebx  +
push ebx  +
push offset String2  +
xor eax eax +
push 10h  +
push offset unk_10123A0  +
mov String1 ax +
mov word_1012B80 ax +
call sub_100EF29  +
xor eax eax +
cmp [ebp+pNumArgs] 1 +
mov word_1012620 ax +
mov Dst ax +
mov word_1012FC0 ax +
mov dword_1012024 ebx +
jz loc_100FEEB  +
mov eax [ebp+hMem] +
push dword ptr [eax+4]  +
call sub_100ED50  +
test eax eax +
jz loc_100FE68  +
mov eax [ebp+hMem] +
push esi  +
push ebx  +
push ebx  +
push dword ptr [eax+4]  +
push 101h  +
push offset word_1012DA0  +
call sub_100EF29  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 5  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
cmp [ebp+pNumArgs] 3 +
jnz loc_100FA3F  +
mov eax [ebp+hMem] +
mov eax [eax+8] +
push 2Fh  +
pop ecx  +
cmp cx [eax] +
jnz loc_100FA96  +
lea edx [eax+2] +
mov eax edx +
lea ecx [eax+2] +
mov [ebp+var_214] ecx +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100FA0C  +
sub eax [ebp+var_214] +
sar eax 1 +
jz loc_100FA96  +
lea eax [ebp+Buffer] +
push eax  +
push edx  +
call sub_100F322  +
test eax eax +
jz loc_100FA38  +
push 2  +
jmp loc_100FEEA  +
cmp [ebp+pNumArgs] 3 +
jbe loc_100FA89  +
mov eax [ebp+hMem] +
mov eax [eax+8] +
push 2Fh  +
pop ecx  +
cmp cx [eax] +
jnz loc_100FA89  +
lea edx [eax+2] +
mov eax edx +
lea ecx [eax+2] +
mov [ebp+var_214] ecx +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100FA60  +
sub eax [ebp+var_214] +
sar eax 1 +
jz loc_100FA89  +
lea eax [ebp+Buffer] +
push eax  +
push edx  +
call sub_100F322  +
test eax eax +
jnz loc_100FEE8  +
cmp [ebp+pNumArgs] 2 +
jbe loc_100FB49  +
mov eax [ebp+hMem] +
mov ecx [eax+8] +
cmp word ptr [ecx] 2Fh +
jz loc_100FB49  +
mov eax ecx +
lea edx [eax+2] +
mov [ebp+var_214] edx +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100FAB4  +
sub eax [ebp+var_214] +
sar eax 1 +
cmp eax esi +
ja loc_100FEE8  +
push esi  +
push ebx  +
push ebx  +
push ecx  +
push 101h  +
push offset String1  +
call sub_100EF29  +
cmp [ebp+pNumArgs] 3 +
jbe loc_100FB3D  +
mov eax [ebp+hMem] +
mov ecx [eax+0Ch] +
cmp word ptr [ecx] 2Fh +
jz loc_100FB3D  +
mov eax ecx +
lea edx [eax+2] +
mov [ebp+var_214] edx +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100FB04  +
sub eax [ebp+var_214] +
sar eax 1 +
cmp eax esi +
ja loc_100FEE8  +
push esi  +
push ebx  +
push ebx  +
push ecx  +
push 101h  +
push offset word_1012B80  +
call sub_100EF29  +
mov [ebp+var_220] 4 +
jmp loc_100FB53  +
mov [ebp+var_220] 3 +
jmp loc_100FB53  +
mov [ebp+var_220] 2 +
mov eax [ebp+pNumArgs] +
cmp [ebp+var_220] eax +
jnb loc_100FE58  +
mov eax [ebp+hMem] +
mov ecx [ebp+var_220] +
lea esi [eax+ecx*4] +
mov eax [esi] +
cmp word ptr [eax] 2Fh +
jnz loc_100FEE8  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 2  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [esi] +
inc eax  +
inc eax  +
push eax  +
call sub_100F322  +
test eax eax +
jz loc_100FBF1  +
push 3Ah  +
push dword ptr [esi]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_100FEE8  +
push 0Fh  +
add eax 2 +
push eax  +
push 10h  +
mov esi offset unk_10123A0 +
push esi  +
call sub_100F04A  +
test eax eax +
jl loc_100FE60  +
xor eax eax +
push esi  +
mov word_10123BE ax +
call ds:_wcsupr  +
pop ecx  +
jmp loc_100FE40  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 3  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [esi] +
inc eax  +
inc eax  +
push eax  +
call sub_100F322  +
test eax eax +
jz loc_100FC85  +
cmp word_1012620 bx +
jnz loc_100FEE8  +
push 3Ah  +
push dword ptr [esi]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_100FEE8  +
lea edx [eax+2] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100FC47  +
sub eax esi +
sar eax 1 +
jz loc_100FEE8  +
push 80h  +
push edx  +
push 81h  +
push offset word_1012620  +
call sub_100F04A  +
test eax eax +
jl loc_100FE60  +
xor eax eax +
mov word_1012720 ax +
jmp loc_100FE40  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 1Fh  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [esi] +
inc eax  +
inc eax  +
push eax  +
call sub_100F322  +
test eax eax +
jz loc_100FD8A  +
cmp Dst bx +
jnz loc_100FEE8  +
push edi  +
push offset Dst  +
push offset Src  +
call ds:ExpandEnvironmentStringsW  +
push 3Ah  +
push dword ptr [esi]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_100FEE8  +
lea edx [eax+2] +
mov eax edx +
mov [ebp+var_214] edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100FCF6  +
sub eax esi +
sar eax 1 +
jz loc_100FEE8  +
mov eax edx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100FD0F  +
sub eax edx +
sar eax 1 +
mov esi offset Dst +
mov ecx esi +
mov [ebp+var_224] eax +
lea eax [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
cmp dx bx +
jnz loc_100FD2D  +
push 100h  +
push ebx  +
sub ecx eax +
mov eax [ebp+var_224] +
push ebx  +
push [ebp+var_214]  +
sar ecx 1 +
add ecx eax +
push edi  +
push esi  +
cmp ecx 103h +
ja loc_100FD80  +
call sub_100F099  +
push esi  +
call sub_100EE7A  +
test eax eax +
jnz loc_100FE40  +
push 100h  +
push ebx  +
push ebx  +
push [ebp+var_214]  +
push edi  +
push offset Dst  +
call sub_100EF29  +
jmp loc_100FE40  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 4  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [esi] +
inc eax  +
inc eax  +
push eax  +
call sub_100F322  +
test eax eax +
jz loc_100FE05  +
push 3Ah  +
push dword ptr [esi]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_100FEE8  +
lea edx [eax+2] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100FDD3  +
sub eax esi +
sar eax 1 +
jz loc_100FEE8  +
push edx  +
push 81h  +
push offset word_1012FC0  +
call sub_100EEEF  +
test eax eax +
jl loc_100FE60  +
xor eax eax +
mov word_10130C0 ax +
jmp loc_100FE40  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 21h  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [esi] +
inc eax  +
inc eax  +
push eax  +
call sub_100F322  +
test eax eax +
jz loc_100FEE8  +
mov dword_1012024 1 +
inc [ebp+var_220]  +
mov eax [ebp+var_220] +
cmp eax [ebp+pNumArgs] +
jb loc_100FB65  +
xor ebx ebx +
inc ebx  +
jmp loc_100FEEB  +
or eax 0FFFFFFFFh +
jmp loc_100FEF9  +
mov esi ds:GetModuleHandleW +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 1  +
push ebx  +
call esi  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+hMem] +
mov eax [eax+4] +
inc eax  +
inc eax  +
push eax  +
call sub_100F322  +
test eax eax +
jnz loc_100FEE8  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 5  +
push ebx  +
call esi  +
push eax  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+hMem] +
mov eax [eax+4] +
inc eax  +
inc eax  +
push eax  +
call sub_100F322  +
test eax eax +
jz loc_100FEE8  +
xor eax eax +
xor ebx ebx +
cmp [ebp+pNumArgs] 2 +
mov word_1012DA0 ax +
setnz bl  +
inc ebx  +
jmp loc_100FE5A  +
push 3  +
pop ebx  +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101098F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1012000 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+18h] +
xor eax eax +
push edi  +
mov edi 2001h +
cmp [ebp+1Ch] eax +
jnz loc_1010053  +
cmp esi 17h +
jz loc_1010053  +
cmp esi edi +
jz loc_1010053  +
xor ebx ebx +
inc ebx  +
cmp esi 0Fh +
jg loc_100FFBD  +
jz loc_100FFB8  +
sub esi eax +
jz loc_100FF86  +
sub esi 5 +
jz loc_100FF79  +
sub esi 5 +
jz loc_100FF74  +
dec esi  +
jz loc_100FF6F  +
dec esi  +
dec esi  +
jnz loc_10100A7  +
push eax  +
push 1Dh  +
jmp loc_100FF7C  +
push eax  +
push 1Ch  +
jmp loc_100FF7C  +
push eax  +
push 1Bh  +
jmp loc_100FF7C  +
push eax  +
push 0Fh  +
call sub_100F4CA  +
jmp loc_10100A7  +
mov dword_10125E0 offset word_1012DA0 +
mov dword_10125E4 eax +
push offset dword_10125E0  +
cmp dword_1012020 eax +
jz loc_100FFA6  +
push 20h  +
jmp loc_100FF7C  +
***
push 9  +
call sub_100F4CA  +
mov dword_1012020 ebx +
jmp loc_10100A7  +
push eax  +
push 11h  +
jmp loc_100FF7C  +
***
cmp esi 16h +
jz loc_100FFE2  +
cmp esi 0FFFh +
jle loc_10100A7  +
cmp esi 1003h +
jle loc_1010029  +
cmp esi 2000h +
jnz loc_10100A7  +
mov eax [ebp+0Ch] +
mov ecx dword_1012038 +
mov dword_101203C ebx +
mov [ecx+eax*4-4] ebx +
call sub_100F2F6  +
test eax eax +
jnz loc_101000A  +
cmp dword_101202C eax +
jz loc_10100A7  +
and dword_10125E4 0 +
push offset dword_10125E0  +
push 13h  +
mov dword_10125E0 offset word_1012DA0 +
call sub_100F4CA  +
jmp loc_101009B  +
push 0Ah  +
lea eax [ebp-14h] +
push eax  +
push esi  +
call ds:_itow  +
and dword_10125E4 0 +
add esp 0Ch +
push offset dword_10125E0  +
push 12h  +
mov dword_10125E0 eax +
call sub_100F4CA  +
jmp loc_101008A  +
mov ecx [ebp+0Ch] +
mov edx dword_1012038 +
xor ebx ebx +
inc ebx  +
mov [edx+ecx*4-4] ebx +
cmp dword_101202C eax +
jnz loc_101007A  +
call sub_100F2F6  +
test eax eax +
jnz loc_1010078  +
cmp esi edi +
jnz loc_10100A7  +
xor eax eax +
cmp dword_101203C eax +
jnz loc_101009B  +
mov eax [ebp+1Ch] +
mov dword_1012604 eax +
push dword_1012030  +
call RasHangUpW  +
mov dword_1012028 ebx +
push hHandle  +
call ds:SetEvent  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101098F  +
leave   +
retn 1Ch  +
***
mov eax dword_1012030 +
test eax eax +
jz loc_10100CE  +
push eax  +
call RasHangUpW  +
call sub_100ECE9  +
push 0  +
push 18h  +
call sub_100F4CA  +
push 1  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 888h +
mov eax dword_1012000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push edi  +
push 838h  +
lea eax [ebp+var_840.szEntryName] +
push ebx  +
push eax  +
mov [ebp+var_844] ebx +
mov [ebp+uBytes] ebx +
mov [ebp+var_860] ebx +
mov [ebp+var_84C] ebx +
mov [ebp+var_840.dwSize] ebx +
call memset  +
add esp 0Ch +
push 9  +
pop ecx  +
xor eax eax +
mov [ebp+var_888] ebx +
lea edi [ebp+var_884] +
stos   +
lea eax [ebp+var_844] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
mov [ebp+var_850] ebx +
mov [ebp+hMem] ebx +
call sub_100F218  +
test eax eax +
jnz loc_10104F2  +
push esi  +
mov esi [ebp+hMem] +
mov edi esi +
jmp loc_101019D  +
dec [ebp+var_844]  +
lea eax [esi+8] +
push eax  +
push offset word_1012DA0  +
call sub_100EEC2  +
test eax eax +
jz loc_1010286  +
add esi 568h +
cmp [ebp+var_844] ebx +
jnz loc_101017B  +
dec [ebp+var_844]  +
push edi  +
call ds:GlobalFree  +
mov esi 100h +
push esi  +
push ebx  +
push ebx  +
push offset String1  +
lea edi [esi+1] +
push edi  +
lea eax [ebp+var_840.szUserName] +
push eax  +
mov [ebp+var_840.dwSize] 83Ch +
call sub_100EF29  +
push esi  +
push ebx  +
push ebx  +
push offset word_1012B80  +
push edi  +
lea eax [ebp+var_840.szPassword] +
push eax  +
call sub_100EF29  +
push esi  +
push ebx  +
push ebx  +
push offset word_1012DA0  +
push edi  +
lea eax [ebp+var_840.szEntryName] +
push eax  +
call sub_100EF29  +
push esi  +
push ebx  +
push ebx  +
push offset unk_10123A0  +
push 10h  +
lea eax [ebp+var_840.szDomain] +
push eax  +
call sub_100EF29  +
push esi  +
push ebx  +
push ebx  +
push offset word_1012620  +
add edi 0FFFFFF80h +
push edi  +
lea eax [ebp+var_840.szPhoneNumber] +
push eax  +
call sub_100EF29  +
push esi  +
push ebx  +
push ebx  +
push offset word_1012FC0  +
push edi  +
lea eax [ebp+var_840.szCallbackNumber] +
push eax  +
call sub_100EF29  +
push 0Ah  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_888] +
stos   +
cmp dword_1012024 ebx +
jz loc_10102AD  +
lea eax [ebp+var_888] +
mov [ebp+var_888] 28h +
mov [ebp+var_884] 1 +
mov [ebp+var_880] ebx +
mov [ebp+var_87C] ebx +
mov [ebp+var_85C] eax +
jmp loc_10102B3  +
push offset dword_10125E0  +
add esi 8 +
push 1Eh  +
mov dword_10125E0 esi +
mov dword_10125E4 ebx +
call sub_100F4CA  +
push edi  +
call ds:GlobalFree  +
jmp loc_10104F1  +
mov [ebp+var_85C] ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call ds:CreateEventW  +
mov hHandle eax +
cmp eax ebx +
jnz loc_10102E3  +
call ds:GetLastError  +
push eax  +
push offset aErrorCreatingE  +
mov dword_1012604 eax +
call nullsub_1  +
pop ecx  +
pop ecx  +
jmp loc_10104F1  +
push 1  +
push offset sub_10100BF  +
call ds:SetConsoleCtrlHandler  +
test eax eax +
jnz loc_10102FF  +
push offset aSetconsolectrl  +
call nullsub_1  +
pop ecx  +
cmp Dst bx +
jz loc_1010312  +
mov [ebp+var_84C] offset Dst +
lea eax [ebp+var_860] +
push eax  +
push ebx  +
lea eax [ebp+uBytes] +
push eax  +
push ebx  +
mov edi offset word_1012DA0 +
push edi  +
push [ebp+var_84C]  +
call RasGetEntryPropertiesW  +
cmp eax 25Bh +
jnz loc_101043B  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_1010412  +
lea ecx [ebp+var_860] +
push ecx  +
push ebx  +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
push edi  +
push [ebp+var_84C]  +
mov dword ptr [eax] 1630h +
call RasGetEntryPropertiesW  +
mov [ebp+var_858] eax +
cmp eax ebx +
jz loc_101039D  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+var_858] +
jmp loc_101043B  +
mov eax [ebp+hMem] +
mov eax [eax+0D8Ch] +
push eax  +
push edi  +
push offset aSHasDSubentrie  +
mov dword_1012034 eax +
call nullsub_1  +
mov eax [ebp+hMem] +
mov ecx [eax+0D90h] +
not ecx  +
add esp 0Ch +
and ecx 1 +
push eax  +
mov dword_101202C ecx +
call ds:LocalFree  +
lea eax [ebp+var_858] +
push eax  +
mov eax dword_1012034 +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_100ECAC  +
test eax eax +
jl loc_10104F1  +
push [ebp+var_858]  +
push 40h  +
call ds:LocalAlloc  +
mov dword_1012038 eax +
cmp eax ebx +
jnz loc_101041A  +
call ds:GetLastError  +
jmp loc_101043B  +
lea eax [ebp+var_850] +
push eax  +
push ebx  +
push 2  +
push edi  +
push [ebp+var_84C]  +
call RasGetEapUserIdentityW  +
cmp eax ebx +
jz loc_1010445  +
cmp eax 30Ch +
jz loc_101048E  +
mov dword_1012604 eax +
jmp loc_10104F1  +
push esi  +
push ebx  +
push ebx  +
push [ebp+var_850]  +
lea eax [ebp+var_840.szUserName] +
push 101h  +
push eax  +
call sub_100EF29  +
mov eax [ebp+var_850] +
mov [ebp+var_888] 28h +
mov edx [eax+204h] +
add eax 208h +
lea ecx [ebp+var_888] +
mov [ebp+var_874] edx +
mov [ebp+var_870] eax +
jmp loc_1010494  +
mov ecx [ebp+var_85C] +
push offset dword_1012030  +
push offset loc_100FF0E  +
push 2  +
lea eax [ebp+var_840] +
push eax  +
push [ebp+var_84C]  +
push ecx  +
call RasDialW  +
cmp eax ebx +
jz loc_10104CB  +
push eax  +
push offset aErrorFromRasdi  +
mov dword_1012604 eax +
call nullsub_1  +
pop ecx  +
pop ecx  +
jmp loc_10104E6  +
push 0FFFFFFFFh  +
push hHandle  +
call ds:WaitForSingleObject  +
cmp dword_1012028 ebx +
jz loc_10104E6  +
call sub_100ECE9  +
push [ebp+var_850]  +
call RasFreeEapUserIdentityW  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101098F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 81Ch +
mov eax dword_1012000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor esi esi +
push 7FEh  +
mov [ebp+WideCharStr] ax +
lea eax [ebp-816h] +
push esi  +
push eax  +
mov [ebp+var_81C] esi +
call memset  +
add esp 0Ch +
push esi  +
mov dword_1012604 esi +
call ds:SetThreadUILanguage  +
push esi  +
push esi  +
push 1  +
push esi  +
call ds:HeapSetInformation  +
call sub_100F8CC  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101058A  +
cmp edi 3 +
jz loc_101058A  +
push dword_1012604  +
push offset aRassqmRasdialI  +
call nullsub_1  +
pop ecx  +
pop ecx  +
push 1  +
push 0E90h  +
call sub_1010EBF  +
mov eax edi +
sub eax esi +
jz loc_101060A  +
dec eax  +
jz loc_10105AA  +
dec eax  +
jz loc_10105A3  +
dec eax  +
jnz loc_101060F  +
call sub_100F8A9  +
jmp loc_10106CE  +
call sub_100F7B1  +
jmp loc_101060F  +
push offset String2  +
mov edi offset String1 +
push edi  +
call sub_100EEC2  +
mov ebx 101h +
test eax eax +
jnz loc_10105D9  +
push esi  +
push 7  +
call sub_100F4CA  +
lea eax [ebp+var_81C] +
push eax  +
push ebx  +
push edi  +
call sub_100EE0E  +
push offset String2  +
mov edi offset word_1012B80 +
push edi  +
call sub_100EEC2  +
test eax eax +
jnz loc_1010603  +
push esi  +
push 8  +
call sub_100F4CA  +
lea eax [ebp+var_81C] +
push eax  +
push ebx  +
push edi  +
call sub_100ED8E  +
call sub_10100EA  +
jmp loc_101060F  +
call sub_100F723  +
mov eax dword_1012604 +
cmp eax esi +
jz loc_10106C6  +
cmp eax 258h +
jb loc_101062A  +
cmp eax 364h +
jbe loc_1010635  +
lea ecx [eax-384h] +
cmp ecx 39h +
ja loc_1010696  +
push 0Ah  +
lea ecx [ebp+var_18] +
push ecx  +
push eax  +
call ds:_itow  +
add esp 0Ch +
mov dword_10125E4 esi +
mov esi offset dword_10125E0 +
push esi  +
push 1Ah  +
mov dword_10125E0 eax +
call sub_100F4CA  +
push 400h  +
lea eax [ebp+WideCharStr] +
push eax  +
push dword_1012604  +
call RasGetErrorStringW  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_100F421  +
mov eax dword_1012604 +
add eax 0FFFFFDA8h +
cmp eax 10Ch +
ja loc_10106CE  +
push esi  +
push 19h  +
jmp loc_10106C9  +
push esi  +
push 400h  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push esi  +
push eax  +
push esi  +
call ds:GetModuleHandleW  +
push eax  +
push 12FFh  +
call ds:FormatMessageW  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_100F421  +
jmp loc_10106CE  +
push esi  +
push 14h  +
call sub_100F4CA  +
push dword_1012604  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10106FC  +
test eax eax +
jnz loc_1010701  +
mov ecx [esi] +
test ecx ecx +
jz loc_10106F9  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10106ED  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1012068 +
push offset dword_1012058  +
push dword_1012064  +
mov dword_1012058 eax +
push offset dword_1012048  +
push offset dword_101204C  +
push offset dword_1012044  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1012054 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1010789  +
cmp eax esi +
jnz loc_101077C  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_101078C  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1010763  +
xor esi esi +
inc esi  +
mov eax dword_10130CC +
cmp eax esi +
jnz loc_101079F  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10107DA  +
mov eax dword_10130CC +
test eax eax +
jnz loc_10107D4  +
mov dword_10130CC esi +
push offset dword_1001144  +
push offset dword_1001138  +
call sub_10106E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10107DA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10108A4  +
mov dword_1012060 esi +
mov eax dword_10130CC +
cmp eax esi +
jnz loc_10107FE  +
push offset dword_1001134  +
push offset dword_100112C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10130CC 2 +
cmp [ebp+var_1C] ebx +
jnz loc_101080B  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10130D4 ebx +
jz loc_101082C  +
push offset dword_10130D4  +
call sub_1010B29  +
pop ecx  +
test eax eax +
jz loc_101082C  +
push ebx  +
push 2  +
push ebx  +
call dword_10130D4  +
push dword_1012048  +
push dword_101204C  +
push dword_1012044  +
call sub_1010505  +
add esp 0Ch +
mov dword_101205C eax +
cmp dword_1012050 ebx +
jnz loc_101088A  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_101205C eax +
xor ebx ebx +
cmp dword_1012050 ebx +
jnz loc_101088A  +
push eax  +
call ds:_exit  +
cmp dword_1012060 ebx +
jnz loc_1010898  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_101205C +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10108C1  +
xor eax eax +
jmp loc_101090E  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10108BD  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10108FB  +
cmp ecx 20Bh +
jnz loc_10108BD  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10108BD  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1010909  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10108BD  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1012050 eax +
call sub_1010C98  +
push eax  +
call ds:__set_app_type  +
or dword_10130C4 0FFFFFFFFh +
or dword_10130C8 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1012070 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_101206C +
mov [eax] ecx +
call sub_1010C2A  +
cmp dword_1012010 0 +
jnz loc_1010967  +
push offset sub_1010C2A  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1010C12  +
xor eax eax +
retn   +
***
call sub_1010CD7  +
jmp sub_1010741  +
***
cmp ecx dword_1012000 +
jnz loc_101099A  +
retn 0  +
jmp loc_1010D6D  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_101098F  +
jmp __SEH_epilog4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_101098F  +
push offset dword_1012000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1010A67  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1010A67  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1010A61  +
cmp eax 19930521h +
jz loc_1010A61  +
cmp eax 19930522h +
jz loc_1010A61  +
cmp eax 1994000h +
jnz loc_1010A67  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1010A28+2)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1010AB6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1010AB2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1010B1D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1010B15  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1010B1F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1010B05  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1010AA0  +
pop ecx  +
test eax eax +
jz loc_1010B86  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1010AE0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1010B86  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1010B8F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1010C8B  +
cmp ecx 0FFFFFFFFh +
jz loc_1010C8B  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1010C84  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1010C84  +
cmp edx 10000000h +
jnb loc_1010C84  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1010C84  +
jmp loc_1010C7F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1010CCD  +
push eax  +
call sub_1010C32  +
test eax eax +
jz loc_1010CCD  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1010CC2  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1010CCD  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1012000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1010D09  +
test eax ebx +
jz loc_1010D09  +
not eax  +
mov dword_1012004 eax +
jmp loc_1010D64  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1010D50  +
test dword_1012000 ebx +
jnz loc_1010D55  +
mov esi 0BB40E64Fh +
mov dword_1012000 esi +
not esi  +
mov dword_1012004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1012178 eax +
mov dword_1012174 ecx +
mov dword_1012170 edx +
mov dword_101216C ebx +
mov dword_1012168 esi +
mov dword_1012164 edi +
mov word_1012190 ss +
mov word_1012184 cs +
mov word_1012160 ds +
mov word_101215C es +
mov word_1012158 fs +
mov word_1012154 gs +
pushf   +
pop dword_1012188  +
mov eax [ebp+0] +
mov dword_101217C eax +
mov eax [ebp+4] +
mov dword_1012180 eax +
lea eax [ebp+8] +
mov dword_101218C eax +
mov eax [ebp-320h] +
mov dword_10120C8 10001h +
mov eax dword_1012180 +
mov dword_1012084 eax +
mov dword_1012078 0C0000409h +
mov dword_101207C 1 +
mov eax dword_1012000 +
mov [ebp-328h] eax +
mov eax dword_1012004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call WinSqmSetDWORD  +
pop ebp  +
retn 8  +
***
adc al 11h +
add [eax] eax +
sbb al 11h +
add [eax] eax +
sub dl [ecx] +
add [eax] eax +
cmp [ecx] dl +
add [eax] eax +
dec edx  +
adc [ecx] eax +
add [eax+11h] bl +
add [eax] eax +
push 76000111h  +
adc [ecx] eax +
add [edx-71FFFEEFh] al +
adc [ecx] eax +
add [ecx+edx+11B20001h] bl +
add [eax] eax +
retn 111h  +
***
