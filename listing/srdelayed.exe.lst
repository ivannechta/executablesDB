mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_10012EA  +
cmp [ebp+arg_0] eax +
jnz loc_10012EE  +
cmp ecx eax +
jnz loc_10012F3  +
jmp loc_10012EE  +
cmp ecx eax +
jz loc_10012F3  +
cmp ecx [ebp+arg_4] +
jbe loc_10012F8  +
mov eax 0C000000Dh +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_100132B  +
test [ebp+arg_8] 1000h +
jz loc_100132B  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1001373  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_100135B  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1001373  +
test esi esi +
jbe loc_100138C  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_100138C  +
test [ebp+arg_8] 800h +
jz loc_100138C  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jnz loc_10013A8  +
xor eax eax +
jmp loc_10013C5  +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jz loc_10013A4  +
mov edx 989680h +
mul  edx +
neg eax  +
adc edx 0 +
neg edx  +
mov [ecx] eax +
mov [ecx+4] edx +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_1001462  +
test byte ptr [esi] 1 +
jnz loc_1001462  +
movzx eax word ptr [esi+2] +
test al 1 +
jnz loc_1001462  +
movzx edi ax +
test edi edi +
jnz loc_10013F7  +
push 40h  +
pop edi  +
add edi edi +
mov eax 0FFFEh +
cmp edi eax +
jbe loc_1001404  +
mov edi eax +
movzx eax word ptr [esi+2] +
cmp edi eax +
jnz loc_1001413  +
mov eax 0C0000106h +
jmp loc_1001467  +
mov ecx [esi+4] +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
test ecx ecx +
jnz loc_1001430  +
push ecx  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
jmp loc_100143C  +
push ecx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlReAllocateHeap  +
test eax eax +
jnz loc_1001447  +
mov eax 0C0000017h +
jmp loc_1001467  +
mov [esi+4] eax +
movzx eax word ptr [esi] +
movzx ecx di +
sub ecx eax +
cmp ecx 2 +
sbb eax eax +
mov [esi+2] di +
and eax 0C0000106h +
jmp loc_1001467  +
mov eax 0C000000Dh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ax [esi] +
cmp ax [esi+2] +
jb loc_100148E  +
push esi  +
call sub_10013CE  +
test eax eax +
jl loc_10014A4  +
movzx eax word ptr [esi] +
mov ecx [esi+4] +
mov dx [ebp+arg_4] +
shr eax 1 +
mov [ecx+eax*2] dx +
add word ptr [esi] 2 +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
xor eax eax +
jmp loc_10014CA  +
push ecx  +
push [ebp+arg_0]  +
call sub_1001472  +
test eax eax +
jl loc_10014D2  +
inc esi  +
inc esi  +
movzx ecx word ptr [esi] +
test cx cx +
jnz loc_10014BB  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ecx] ax +
mov eax [ebp+arg_0] +
lea edx [eax-30h] +
cmp dx 9 +
ja loc_10014FC  +
add eax 0FFD0h +
jmp loc_100151A  +
lea edx [eax-41h] +
cmp dx 5 +
ja loc_100150C  +
add eax 0FFC9h +
jmp loc_100151A  +
lea edx [eax-61h] +
cmp dx 5 +
ja loc_1001521  +
add eax 0FFA9h +
mov [ecx] ax +
xor eax eax +
jmp loc_1001526  +
mov eax 0C000000Dh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10014DC  +
test eax eax +
jl loc_1001563  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
call sub_10014DC  +
test eax eax +
jl loc_1001563  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
shl ecx 4 +
or ecx [ebp+arg_4] +
mov [edx] cx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ecx+4] +
movzx ecx word ptr [ecx] +
shr ecx 1 +
lea ecx [esi+ecx*2] +
xor eax eax +
mov [ebp+var_4] eax +
mov [ebp+arg_0] ecx +
cmp esi ecx +
jnb loc_10015EA  +
push ebx  +
push edi  +
lea ebx [esi+2] +
lea edi [esi+4] +
movzx eax word ptr [esi] +
cmp ax 25h +
jnz loc_10015C8  +
cmp ebx [ebp+arg_0] +
jnb loc_10015C8  +
cmp edi [ebp+arg_0] +
jnb loc_10015C8  +
lea eax [ebp+var_4] +
push eax  +
movzx eax word ptr [edi] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_100152F  +
test eax eax +
jl loc_10015E8  +
add esi 6 +
add edi 6 +
add ebx 6 +
jmp loc_10015D4  +
inc esi  +
inc esi  +
inc edi  +
movzx eax ax +
inc edi  +
inc ebx  +
mov [ebp+var_4] eax +
inc ebx  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call sub_1001472  +
test eax eax +
jl loc_10015E8  +
cmp esi [ebp+arg_0] +
jb loc_1001595  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov ecx dword_10040BC +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
add ecx ecx +
lea edi [ebp+var_C] +
mov [ebp+var_10] esi +
stos   +
mov ebx ecx +
add ebx dword_10040B0 +
lea edi [ebp+var_4] +
mov [ebp+var_8] esi +
stos   +
adc eax dword_10040B4 +
mov [ebp+var_14] eax +
mov eax dword_10040B8 +
lea edi [ecx+eax] +
mov ecx dword_10040C0 +
cmp dword_10040BC ecx +
jnz loc_10016DA  +
cmp eax esi +
jnz loc_100166D  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 10000h  +
push esi  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov dword_10040B8 eax +
cmp eax esi +
jz loc_1001725  +
mov ecx dword_10040C0 +
add ecx ecx +
add dword_10040B0 ecx +
mov ecx dword_10040B0 +
push esi  +
adc dword_10040B4 esi +
mov [ebp+var_8] ecx +
mov ecx dword_10040B4 +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push 10000h  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+arg_0]  +
mov dword_10040C0 esi +
mov dword_10040BC esi +
call ds:NtReadFile  +
cmp eax 0C0000011h +
jz loc_100172C  +
cmp eax esi +
jl loc_100174C  +
mov eax [ebp+var_C] +
shr eax 1 +
mov dword_10040C0 eax +
mov eax dword_10040B8 +
mov edi eax +
movzx ecx word ptr [edi] +
inc dword_10040BC  +
mov edx 0FEFFh +
cmp cx dx +
jnz loc_100170B  +
mov edx dword_10040B0 +
or edx dword_10040B4 +
jnz loc_100170B  +
cmp dword_10040BC 1 +
jnz loc_100170B  +
inc edi  +
inc edi  +
jmp loc_1001632  +
cmp cx si +
jz loc_100173F  +
push ecx  +
push [ebp+arg_4]  +
call sub_1001472  +
mov eax dword_10040B8 +
inc edi  +
inc edi  +
jmp loc_1001632  +
mov eax 0C0000017h +
jmp loc_100174C  +
cmp ebx dword_10040B0 +
jnz loc_100173F  +
mov ecx [ebp+var_14] +
cmp ecx dword_10040B4 +
jz loc_100174C  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_14] +
mov [eax] ebx +
mov [eax+4] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
stos   +
stos   +
xor esi esi +
xor eax eax +
push 9  +
pop ecx  +
mov [ebp+var_C] esi +
lea edi [ebp+var_8] +
stos   +
push 204020h  +
mov [ebp+var_4C] esi +
lea edi [ebp+var_48] +
stos   +
mov eax [ebp+arg_0] +
mov [ebp+var_1C] eax +
push 3  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 100100h  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_24] 18h +
mov [ebp+var_20] esi +
mov [ebp+var_18] 40h +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
call ds:NtOpenFile  +
mov edi eax +
cmp edi esi +
jl loc_10017EE  +
push 0Ah  +
pop ecx  +
xor eax eax +
push 4  +
lea edi [ebp+var_4C] +
stos   +
push 28h  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
mov [ebp+var_2C] 80h +
call ds:NtSetInformationFile  +
mov edi eax +
cmp [ebp+var_4] esi +
jz loc_10017FC  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
mov eax [ebp+arg_4] +
xor ecx ecx +
mov [eax] cx +
mov ecx [ebp+arg_8] +
xor edx edx +
mov [ecx] dx +
mov edx [ebp+arg_C] +
xor esi esi +
mov [edx] si +
mov esi [ebp+arg_10] +
xor edi edi +
mov [esi] di +
mov [ebp+var_C] esi +
mov [ebp+var_18] eax +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
xor esi esi +
lea eax [ebp+var_8] +
push eax  +
push [ebp+esi*4+var_18]  +
push [ebp+arg_0]  +
call sub_10015F4  +
test eax eax +
jl loc_100187B  +
inc esi  +
cmp esi 4 +
jb loc_1001851  +
mov eax [ebp+arg_14] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
mov [eax+4] ecx +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
xor eax eax +
xor esi esi +
mov [ebp+var_C] esi +
lea edi [ebp+var_8] +
stos   +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_0] +
push 204020h  +
mov [ebp+var_1C] eax +
push 7  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 100080h  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_24] 18h +
mov [ebp+var_20] esi +
mov [ebp+var_18] 40h +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
call ds:NtOpenFile  +
mov edi eax +
cmp edi esi +
jl loc_10018FD  +
push 4  +
push 28h  +
push [ebp+arg_4]  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
call ds:NtQueryInformationFile  +
mov edi eax +
cmp [ebp+var_4] esi +
jz loc_100190B  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
xor eax eax +
xor esi esi +
mov [ebp+var_C] esi +
lea edi [ebp+var_8] +
stos   +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_0] +
push 204020h  +
mov [ebp+var_1C] eax +
push 7  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 100100h  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_24] 18h +
mov [ebp+var_20] esi +
mov [ebp+var_18] 40h +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
call ds:NtOpenFile  +
mov edi eax +
cmp edi esi +
jl loc_100198F  +
push 4  +
push 28h  +
push [ebp+arg_4]  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
call ds:NtSetInformationFile  +
mov edi eax +
cmp [ebp+var_4] esi +
jz loc_100199D  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
push [ebp+arg_8]  +
xor eax eax +
xor esi esi +
mov [ebp+var_24] esi +
mov [ebp+var_C] esi +
lea edi [ebp+var_8] +
stos   +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
stos   +
mov [ebp+var_4] esi +
stos   +
call sub_1001758  +
mov edi eax +
cmp edi esi +
jge loc_10019E3  +
cmp edi 0C0000034h +
jnz loc_1001A4E  +
mov eax [ebp+arg_4] +
push 204020h  +
mov [ebp+var_1C] eax +
push 7  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 110080h  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_24] 18h +
mov [ebp+var_20] esi +
mov [ebp+var_18] 40h +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
call ds:NtOpenFile  +
mov edi eax +
cmp edi esi +
jl loc_1001A4E  +
cmp [ebp+arg_C] esi +
jz loc_1001A43  +
push 4  +
push 28h  +
push [ebp+arg_C]  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
call ds:NtQueryInformationFile  +
mov edi eax +
cmp edi esi +
jl loc_1001A4E  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov [ebp+var_4] esi +
cmp [ebp+var_4] esi +
jz loc_1001A5C  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_0] +
mov ecx [edx+4] +
movzx edx word ptr [edx] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor eax eax +
xor ebx ebx +
shr edx 1 +
push edi  +
mov [ebp+var_4] eax +
lea esi [ecx+esi*2] +
lea edi [ecx+edx*2] +
jmp loc_1001AAB  +
lea eax [ebp+var_4] +
push eax  +
movzx eax word ptr [esi] +
push eax  +
call sub_10014DC  +
test eax eax +
jl loc_1001AB4  +
movzx ecx word ptr [ebp+var_4] +
shl ebx 4 +
add ebx ecx +
inc esi  +
inc esi  +
cmp esi edi +
jb loc_1001A8F  +
mov ecx [ebp+arg_8] +
mov [ecx] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
and [ebp+var_28] 0 +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_1001886  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov al cl +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:RtlAppendUnicodeToString +
jmp loc_1001B17  +
cmp eax 0C0000023h +
jnz loc_1001B23  +
push [ebp+arg_0]  +
call sub_10013CE  +
test eax eax +
jl loc_1001B23  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jl loc_1001B04  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push edi  +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
stos   +
xor edx edx +
push 9  +
xor eax eax +
pop ecx  +
mov [ebp+var_40] edx +
lea edi [ebp+var_3C] +
stos   +
mov eax [ebp+arg_0] +
mov [ebp+var_10] eax +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov [ebp+var_18] 18h +
mov [ebp+var_14] edx +
mov [ebp+var_C] 40h +
mov [ebp+var_8] edx +
mov [ebp+var_4] edx +
call ds:NtQueryAttributesFile  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov al cl +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1001B2D  +
test al al +
jnz loc_1001BAF  +
push [ebp+arg_4]  +
call sub_1001B2D  +
test al al +
jz loc_1001BAF  +
xor eax eax +
inc eax  +
jmp loc_1001BB1  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor eax eax +
push 9  +
xor esi esi +
pop ecx  +
mov [ebp+var_C] esi +
lea edi [ebp+var_8] +
stos   +
mov [ebp+var_34] esi +
lea edi [ebp+var_30] +
stos   +
lea eax [ebp+var_34] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
call sub_10019AA  +
mov edi eax +
test edi edi +
jl loc_1001C5F  +
movzx edi word ptr [ebx] +
mov eax large fs:18h +
mov eax [eax+30h] +
add edi 10h +
push edi  +
push esi  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_1001C1F  +
mov edi 0C0000017h +
jmp loc_1001C5F  +
and dword ptr [esi+4] 0 +
lea eax [edi-10h] +
push eax  +
mov [esi+8] eax +
mov byte ptr [esi] 1 +
push dword ptr [ebx+4]  +
lea eax [esi+0Ch] +
push eax  +
call memcpy  +
add esp 0Ch +
push 0Ah  +
push edi  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
call ds:NtSetInformationFile  +
mov edi eax +
test edi edi +
jl loc_1001C5F  +
lea eax [ebp+var_34] +
push eax  +
push ebx  +
call sub_1001918  +
mov edi eax +
cmp [ebp+var_4] 0 +
jz loc_1001C6E  +
push [ebp+var_4]  +
call ds:NtClose  +
test esi esi +
jz loc_1001C87  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1001B2D  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0C0000101h +
jz loc_1001CD8  +
cmp [ebp+arg_0] 0C0000034h +
jz loc_1001CD8  +
cmp [ebp+arg_0] 0C0000056h +
jz loc_1001CD8  +
xor eax eax +
jmp loc_1001CDB  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1001CB4  +
test al al +
jz loc_1001CF9  +
mov al 1 +
jmp loc_1001D01  +
xor eax eax +
cmp [ebp+arg_0] eax +
setnl al  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push [ebp+arg_0]  +
xor eax eax +
push [ebp+arg_0]  +
mov [ebp+var_10] ebx +
lea edi [ebp+var_C] +
stos   +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] ebx +
mov byte ptr [ebp+var_1] bl +
call sub_10019AA  +
mov esi eax +
cmp esi ebx +
jl loc_1001D57  +
push 0Dh  +
push 1  +
lea eax [ebp+var_1] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_8]  +
mov byte ptr [ebp+var_1] 1 +
call ds:NtSetInformationFile  +
mov esi eax +
cmp [ebp+var_8] ebx +
jz loc_1001D65  +
push [ebp+var_8]  +
call ds:NtClose  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
stos   +
stos   +
xor esi esi +
xor eax eax +
push 9  +
pop ecx  +
mov [ebp+var_C] esi +
lea edi [ebp+var_8] +
stos   +
push 204020h  +
mov [ebp+var_4C] esi +
lea edi [ebp+var_48] +
stos   +
mov eax [ebp+arg_4] +
mov [ebp+var_1C] eax +
push 3  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 110180h  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_24] 18h +
mov [ebp+var_20] esi +
mov [ebp+var_18] 40h +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
call ds:NtOpenFile  +
mov ebx eax +
cmp ebx esi +
jl loc_1001E8F  +
push 4  +
push 28h  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
call ds:NtQueryInformationFile  +
mov ebx eax +
cmp ebx esi +
jl loc_1001E8F  +
mov esi [ebp+arg_0] +
movzx ebx word ptr [esi] +
mov eax large fs:18h +
mov eax [eax+30h] +
add ebx 6 +
push ebx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jnz loc_1001E30  +
mov ebx 0C0000017h +
jmp loc_1001E74  +
movzx eax word ptr [esi] +
mov [edi] eax +
movzx eax word ptr [esi] +
push eax  +
push dword ptr [esi+4]  +
lea eax [edi+4] +
push eax  +
call memcpy  +
mov esi ds:NtSetInformationFile +
add esp 0Ch +
push 28h  +
push ebx  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
call esi  +
mov ebx eax +
test ebx ebx +
jl loc_1001E74  +
push 4  +
push 28h  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
call esi  +
mov ebx eax +
test edi edi +
jz loc_1001E8D  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
xor esi esi +
cmp [ebp+var_4] esi +
jz loc_1001E9D  +
push [ebp+var_4]  +
call ds:NtClose  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:RtlAdjustPrivilege +
lea eax [ebp-1] +
push eax  +
xor ebx ebx +
push ebx  +
push 1  +
push 11h  +
mov byte ptr [ebp+var_1] bl +
call esi  +
cmp eax ebx +
jl loc_1001F0B  +
lea eax [ebp+var_1] +
push eax  +
push ebx  +
push 1  +
push 12h  +
call esi  +
cmp eax ebx +
jl loc_1001F0B  +
lea eax [ebp+var_1] +
push eax  +
push ebx  +
push 1  +
push 8  +
call esi  +
cmp eax ebx +
jl loc_1001F0B  +
lea eax [ebp+var_1] +
push eax  +
push ebx  +
push 1  +
push 9  +
call esi  +
cmp eax ebx +
jl loc_1001F0B  +
lea eax [ebp+var_1] +
push eax  +
push ebx  +
push 1  +
push 13h  +
call esi  +
cmp eax ebx +
jl loc_1001F0B  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor eax eax +
push esi  +
push edi  +
xor ebx ebx +
lea edi [ebp-0Ch] +
mov [ebp-10h] ebx +
stos   +
lea edi [ebp-4] +
stos   +
mov eax dword_100440C +
mov [ebp-8] eax +
mov eax dword_10043EC +
mov [ebp-4] eax +
cmp byte_10043F4 bl +
jz loc_1001F4A  +
xor esi esi +
jmp loc_1001F57  +
lea eax [ebp-10h] +
push eax  +
push 3Ch  +
call sub_1001398  +
mov esi eax +
push esi  +
push ebx  +
push 1  +
lea eax [ebp-8] +
push eax  +
push 2  +
call ds:NtWaitForMultipleObjects  +
mov ecx eax +
sub ecx ebx +
jz loc_1001F8E  +
dec ecx  +
jz loc_1001F57  +
sub ecx 101h +
jz loc_1001F83  +
cmp eax ebx +
jge loc_1001F94  +
mov dword_1004000 eax +
jmp loc_1001F94  +
push 102h  +
call ds:RtlExitUserProcess  +
mov dword_1004000 ebx +
mov eax dword_1004000 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:NtCreateEvent +
xor esi esi +
push esi  +
push esi  +
push esi  +
mov ebx 1F0003h +
push ebx  +
push offset dword_100440C  +
call edi  +
cmp eax esi +
jl loc_1001FF4  +
push esi  +
push 1  +
push esi  +
push ebx  +
push offset dword_10043EC  +
call edi  +
cmp eax esi +
jl loc_1001FF4  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push offset loc_1001F14  +
push 0FFFFFFFFh  +
push esi  +
push 1FFFFFh  +
push offset dword_10043F0  +
call ds:NtCreateThreadEx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call ds:NtSetEvent  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
call sub_1001FFD  +
push 0  +
push dword_100440C  +
call ds:NtSetEvent  +
pop edi  +
test eax eax +
jl locret_100205E  +
lea eax [ebp+var_8] +
push eax  +
push 3Ch  +
call sub_1001398  +
push eax  +
push 0  +
push dword_10043F0  +
call ds:NtWaitForSingleObject  +
test eax eax +
jl locret_100205E  +
mov eax dword_1004000 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi off_1004004 +
push edi  +
mov edi offset off_1004004 +
jmp loc_1002095  +
push 1  +
push ebx  +
lea eax [esi+8] +
push eax  +
call ds:RtlEqualUnicodeString  +
test al al +
jnz loc_10020BE  +
mov esi [esi] +
cmp esi edi +
jnz loc_1002082  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 10h  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_10020C7  +
mov [ebp+var_4] 0C0000017h +
jmp loc_1002127  +
mov [ebp+var_4] 40000000h +
jmp loc_1002127  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
mov [esi+4] esi +
mov [esi] esi +
mov ax [ebx] +
mov [esi+8] ax +
mov ax [ebx] +
mov [esi+0Ah] ax +
mov eax large fs:18h +
movzx ecx word ptr [ebx] +
mov eax [eax+30h] +
push ecx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_10020B5  +
movzx ecx word ptr [ebx] +
push ecx  +
push dword ptr [ebx+4]  +
push eax  +
call memmove  +
mov eax off_1004008 +
mov dword ptr [esi] offset off_1004004 +
mov [esi+4] eax +
mov [eax] esi +
add esp 0Ch +
mov off_1004008 esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
test ebx ebx +
jz loc_1002190  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_1002190  +
mov esi [ebp+arg_4] +
mov ecx [ebx] +
cmp esi [edi] +
ja loc_1002159  +
xor eax eax +
jmp loc_1002195  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
test ecx ecx +
jnz loc_1002173  +
push ecx  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
jmp loc_100217F  +
push ecx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlReAllocateHeap  +
test eax eax +
jnz loc_100218A  +
mov eax 0C0000017h +
jmp loc_1002195  +
mov [ebx] eax +
mov [edi] esi +
jmp loc_1002155  +
mov eax 0C000000Dh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
push edi  +
test ecx ecx +
jz loc_1002207  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1002207  +
cmp [ebp+arg_8] 0 +
jz loc_1002207  +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_1002207  +
movzx eax word ptr [edx] +
lea esi [eax+ecx+2] +
cmp esi ecx +
jnb loc_10021D5  +
mov eax 0C0000095h +
jmp loc_100220C  +
cmp esi [ebp+arg_8] +
jbe loc_10021E1  +
mov eax 80000005h +
jmp loc_100220C  +
push eax  +
push dword ptr [edx+4]  +
lea esi [eax+ecx] +
push ecx  +
call memmove  +
push 2  +
push offset dword_10011E8  +
push esi  +
call memmove  +
add esi 2 +
add esp 18h +
mov [edi] esi +
xor eax eax +
jmp loc_100220C  +
mov eax 0C000000Dh +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_18] +
mov [ebp+var_1C] ebx +
stos   +
xor esi esi +
lea edi [ebp+var_20] +
mov [ebp+var_24] ebx +
stos   +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
cmp [ebp+arg_0] ebx +
jz loc_10023B6  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_10023B6  +
mov edi off_1004004 +
mov eax offset off_1004004 +
cmp edi eax +
jnz loc_1002269  +
mov [ecx] bl +
jmp loc_10023F9  +
add dword_10040B0 0FFFFFFFEh +
adc dword_10040B4 0FFFFFFFFh +
cmp edi eax +
jz loc_100236D  +
movzx eax word ptr [edi+8] +
add eax 40h +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
mov [ebp+var_14] eax +
lea eax [ebp+var_8] +
push eax  +
call sub_1002136  +
mov esi eax +
cmp esi ebx +
jl loc_10023BB  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_10] +
lea edx [ebp+var_4] +
push edx  +
add ecx eax +
push ecx  +
push offset dword_10011D0  +
push eax  +
mov [ebp+var_C] ecx +
call sub_10021A1  +
mov esi eax +
cmp esi ebx +
jl loc_10023BB  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+var_C]  +
push offset dword_10011E0  +
push [ebp+var_4]  +
call sub_10021A1  +
mov esi eax +
cmp esi ebx +
jl loc_10023BB  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+var_C]  +
lea eax [edi+8] +
push eax  +
push [ebp+var_4]  +
call sub_10021A1  +
mov esi eax +
cmp esi ebx +
jl loc_10023BB  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+var_C]  +
push offset dword_10011B8  +
push [ebp+var_4]  +
call sub_10021A1  +
mov esi eax +
cmp esi ebx +
jl loc_10023BB  +
mov eax dword_10040B0 +
push ebx  +
mov [ebp+var_1C] eax +
mov eax dword_10040B4 +
mov [ebp+var_18] eax +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_14]  +
lea eax [ebp+var_24] +
push [ebp+var_8]  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+arg_0]  +
call ds:NtWriteFile  +
mov esi eax +
cmp esi ebx +
jl loc_10023BB  +
mov eax [ebp+var_20] +
add dword_10040B0 eax +
mov edi [edi] +
adc dword_10040B4 ebx +
cmp edi offset off_1004004 +
jnz loc_100227F  +
mov eax dword_10040B0 +
push ebx  +
mov [ebp+var_1C] eax +
mov eax dword_10040B4 +
mov [ebp+var_18] eax +
lea eax [ebp+var_1C] +
push eax  +
push 2  +
push offset dword_10011E8  +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+arg_0]  +
call ds:NtWriteFile  +
mov esi eax +
cmp esi ebx +
jl loc_10023BB  +
mov eax [ebp+var_20] +
add dword_10040B0 eax +
mov eax [ebp+arg_4] +
mov byte ptr [eax] 1 +
adc dword_10040B4 ebx +
jmp loc_10023BB  +
mov esi 0C000000Dh +
cmp [ebp+var_8] ebx +
jz loc_10023F9  +
push [ebp+var_8]  +
jmp loc_10023E6  +
mov eax [edi] +
mov ecx [edi+4] +
mov [ecx] eax +
mov [eax+4] ecx +
push dword ptr [edi+0Ch]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
push edi  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov edi off_1004004 +
cmp edi offset off_1004004 +
jnz loc_10023C5  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 4 +
jnz loc_1002430  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0 +
jz loc_1002430  +
mov byte_10043F4 1 +
int 3  +
xor eax eax +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 4 +
jnz loc_1002450  +
mov eax [ebp+10h] +
mov eax [eax] +
mov dword_10040C4 eax +
xor eax eax +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+var_10] ax +
lea edi [ebp+var_10+2] +
stos   +
stos   +
push 0  +
lea eax [ebp+var_10] +
push eax  +
call ds:RtlInitUnicodeString  +
push dword_1004404  +
lea eax [ebp+var_10] +
push eax  +
call sub_10014AE  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025D0  +
push offset dword_10011EC  +
lea eax [ebp+var_10] +
push eax  +
call sub_10014AE  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025D0  +
push dword_10043E4  +
lea eax [ebp+var_10] +
push eax  +
call sub_10014AE  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025D0  +
push 0  +
lea eax [ebp+var_10] +
push eax  +
call sub_1001472  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025D0  +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_8] +
shr ecx 1 +
lea edx [eax+ecx*2] +
xor ecx ecx +
inc ecx  +
push ebx  +
mov [ebp+arg_8] eax +
mov [ebp+var_8] edx +
cmp [ebp+arg_4] ecx +
jz loc_1002597  +
cmp [ebp+arg_4] 2 +
jz loc_1002597  +
cmp [ebp+arg_4] 7 +
jnz loc_10025CF  +
mov byte_1004400 cl +
mov ebx offset word_10043F8 +
cmp eax edx +
jnb loc_1002582  +
mov edi [ebp+arg_8] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1002529  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov [ebp+arg_4] ecx +
jz loc_1002582  +
movzx eax word ptr [ebp+var_10] +
shr eax 1 +
cmp ecx eax +
jnz loc_1002551  +
mov esi [ebp+var_C] +
xor eax eax +
cmps   +
jz loc_1002570  +
push [ebp+arg_8]  +
push ebx  +
call sub_10014AE  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025CF  +
push 0  +
push ebx  +
call sub_1001472  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025CF  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
lea eax [eax+ecx*2+2] +
mov [ebp+arg_8] eax +
cmp eax [ebp+var_8] +
jb loc_1002521  +
push 0  +
push ebx  +
call sub_1001472  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025CF  +
and [ebp+var_4] 0 +
jmp loc_10025CF  +
mov esi [ebp+var_C] +
mov dword_1004408 ecx +
mov byte_1004400 cl +
mov ecx [ebp+arg_C] +
mov edi eax +
xor edx edx +
cmps   +
jz loc_10025CF  +
push eax  +
mov ebx offset word_10043F8 +
push ebx  +
call sub_10014AE  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10025CF  +
push 0  +
push ebx  +
call sub_1001472  +
mov [ebp+var_4] eax +
pop ebx  +
xor esi esi +
cmp [ebp+var_C] esi +
jz loc_10025F8  +
push [ebp+var_C]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
push esi  +
lea eax [ebp+var_10] +
push eax  +
call ds:RtlInitUnicodeString  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push [ebp+arg_10]  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
shr ebx 1 +
push esi  +
mov ecx ebx +
call sub_10012CF  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+var_4] eax +
jl loc_10026C5  +
test [ebp+arg_10] 100h +
push edi  +
mov edi esi +
mov [ebp+var_8] edi +
mov [ebp+var_C] ebx +
jz loc_1002653  +
cmp [ebp+arg_14] ecx +
jnz loc_1002653  +
mov [ebp+arg_14] offset dword_10011E8 +
test [ebp+arg_10] 0FFFFE000h +
mov [ebp+var_4] ecx +
jz loc_10026CC  +
mov [ebp+var_4] 0C000000Dh +
cmp ebx ecx +
jz loc_100266F  +
xor eax eax +
mov [esi] ax +
test [ebp+arg_10] 1C00h +
jz loc_1002697  +
cmp [ebp+arg_4] 0 +
jz loc_1002697  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
lea ebx [ebp+var_C] +
xor ecx ecx +
mov edi esi +
call sub_1001301  +
mov edi [ebp+var_8] +
cmp [ebp+var_4] 0 +
jge loc_10026A6  +
cmp [ebp+var_4] 80000005h +
jnz loc_10026C4  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10026AF  +
mov [eax] edi +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10026C4  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_C] +
and ecx 1 +
lea ecx [ecx+edx*2] +
mov [eax] ecx +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp ebx ecx +
jnz loc_10026ED  +
mov eax [ebp+arg_14] +
cmp [eax] cx +
jz loc_10026A6  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 0BFFFFFF8h +
add eax 0C000000Dh +
mov [ebp+var_4] eax +
jmp loc_100266F  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea edi [ebx-1] +
push edi  +
push esi  +
mov [ebp+var_C] ecx +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1002710  +
cmp eax edi +
ja loc_1002710  +
jz loc_1002717  +
jmp loc_100271F  +
mov [ebp+var_C] 80000005h +
xor eax eax +
mov [esi+edi*2] ax +
mov eax edi +
mov ecx [ebp+var_C] +
sub ebx eax +
lea edi [esi+eax*2] +
mov [ebp+var_4] ecx +
mov [ebp+var_8] edi +
mov [ebp+var_C] ebx +
test ecx ecx +
jl loc_100266F  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_10026A6  +
mov ecx [ebp+arg_4] +
and ecx 1 +
lea ecx [ecx+ebx*2] +
cmp ecx 2 +
jbe loc_10026A6  +
add ecx 0FFFFFFFEh +
push ecx  +
and eax 0FFh +
push eax  +
lea eax [edi+2] +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_10026A6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_100409C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_20] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax dword_10043E8 +
inc dword_10043E8  +
push eax  +
push offset a_Ld  +
push 0  +
push 0  +
push 0  +
lea eax [ebp+var_1C] +
push 16h  +
push eax  +
call sub_1002606  +
add esp 1Ch +
test eax eax +
jl loc_10027FD  +
push esi  +
call ds:RtlFreeUnicodeString  +
push esi  +
push ebx  +
push 3  +
call ds:RtlDuplicateUnicodeString  +
test eax eax +
jl loc_10027FD  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
call sub_1001AF6  +
test eax eax +
jl loc_10027FD  +
push esi  +
call sub_1001AC0  +
test al al +
jz loc_100280D  +
inc [ebp+var_20]  +
cmp [ebp+var_20] 3E8h +
jb loc_1002796  +
mov eax 80000006h +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003031  +
leave   +
retn 8  +
xor eax eax +
jmp loc_10027FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
mov eax dword_100409C +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
mov word ptr [ebp+var_84] ax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_74] ebx +
lea edi [ebp+var_70] +
stos   +
lea edi [ebp+var_84+2] +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_7C] ax +
lea edi [ebp+var_7C+2] +
stos   +
stos   +
xor eax eax +
mov [ebp+var_A0] ebx +
lea edi [ebp+var_9C] +
stos   +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_50] ax +
lea edi [ebp+var_50+2] +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_3C] ax +
lea edi [ebp+var_3C+2] +
stos   +
stos   +
xor eax eax +
mov esi [ebp+arg_4] +
mov word ptr [ebp+var_34] ax +
lea edi [ebp+var_34+2] +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_44] ax +
lea edi [ebp+var_44+2] +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_5C] ax +
lea edi [ebp+var_5C+2] +
stos   +
stos   +
xor eax eax +
mov [ebp+var_6C] ebx +
lea edi [ebp+var_68] +
mov [ebp+var_20] ebx +
mov [ebp+var_48] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_64] ebx +
mov [ebp+var_60] ebx +
stos   +
mov [ebp-24h] bl +
mov [ebp+var_88] 0C0000225h +
mov [ebp+var_25] 1 +
mov [ebp+var_54] ebx +
call sub_1003004  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:RtlSetHeapInformation  +
cmp eax ebx +
mov [ebp+var_20] eax +
jge loc_10028F2  +
or eax 0FFFFFFFFh +
jmp loc_1002ED3  +
cmp [ebp+arg_0] 2 +
jl loc_10028EA  +
mov eax [esi] +
push ebx  +
push ebx  +
push offset off_1004010  +
mov edi offset aSystemrestore +
mov dword_1004404 eax +
mov eax [esi+4] +
push edi  +
push 3  +
mov dword_10043E4 eax +
call ds:RtlQueryRegistryValues  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D69  +
push 4  +
lea eax [ebp+var_88] +
push eax  +
push 4  +
push offset aRestorestatusr  +
push edi  +
push 3  +
call ds:RtlWriteRegistryValue  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D69  +
push ebx  +
push ebx  +
push offset off_1004064  +
push offset aSessionManager  +
push 2  +
call ds:RtlQueryRegistryValues  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D69  +
call sub_1001EAB  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D69  +
push dword ptr [esi+4]  +
lea eax [ebp+var_84] +
push eax  +
call ds:RtlInitUnicodeString  +
mov esi ds:RtlInitUnicodeString +
push ebx  +
lea eax [ebp+var_7C] +
push eax  +
call esi  +
push ebx  +
lea eax [ebp+var_50] +
push eax  +
call esi  +
push ebx  +
lea eax [ebp+var_3C] +
push eax  +
call esi  +
push ebx  +
lea eax [ebp+var_34] +
push eax  +
call esi  +
push ebx  +
lea eax [ebp+var_44] +
push eax  +
call esi  +
lea eax [ebp+var_7C] +
push eax  +
lea eax [ebp+var_84] +
push eax  +
call sub_100156C  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D69  +
push 4022h  +
lea eax [ebp+var_7C] +
mov [ebp+var_98] eax +
push 3  +
lea eax [ebp+var_74] +
push eax  +
lea eax [ebp+var_A0] +
push eax  +
push 0C0100000h  +
lea eax [ebp+var_2C] +
push eax  +
mov [ebp+var_A0] 18h +
mov [ebp+var_9C] ebx +
mov [ebp+var_94] 40h +
mov [ebp+var_90] ebx +
mov [ebp+var_8C] ebx +
call ds:NtOpenFile  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D69  +
call sub_1001FA5  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D69  +
jmp loc_1002CED  +
mov esi ds:RtlEqualUnicodeString +
call sub_1001FFD  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D5F  +
xor edi edi +
inc edi  +
push edi  +
push offset dword_10011C8  +
lea eax [ebp+var_50] +
push eax  +
mov [ebp+var_21] bl +
call esi  +
push edi  +
mov [ebp-23h] al +
push offset dword_10011D0  +
lea eax [ebp+var_50] +
push eax  +
call esi  +
push edi  +
mov [ebp+var_22] al +
push offset dword_10011D8  +
lea eax [ebp+var_50] +
push eax  +
call esi  +
push edi  +
mov [ebp+var_26] al +
push offset dword_10011C0  +
lea eax [ebp+var_44] +
push eax  +
call esi  +
test al al +
jz loc_1002AC9  +
cmp [ebp-23h] bl +
jz loc_1002AB1  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
call sub_1001B8D  +
test al al +
jnz loc_1002CED  +
cmp [ebp+var_22] bl +
jz loc_1002B32  +
lea eax [ebp+var_34] +
push eax  +
call sub_1001C95  +
test al al +
jnz loc_1002CED  +
jmp loc_1002B32  +
cmp word ptr [ebp+var_44] 6 +
jb loc_1002B32  +
mov esi [ebp+var_40] +
push 3  +
pop ecx  +
mov edi offset aSc +
xor eax eax +
cmps   +
jnz loc_1002B2C  +
lea eax [ebp+var_48] +
push eax  +
push 3  +
lea eax [ebp+var_44] +
push eax  +
call sub_1001A69  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002D5F  +
cmp [ebp-23h] bl +
jz loc_1002B0A  +
cmp [ebp+var_48] ebx +
jge loc_1002CED  +
cmp [ebp+var_22] bl +
jz loc_1002B23  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+var_48]  +
call sub_1001CE4  +
test al al +
jnz loc_1002CED  +
cmp [ebp+var_26] bl +
jnz loc_1002CED  +
mov esi ds:RtlEqualUnicodeString +
mov eax [ebp+var_64] +
mov edi ds:NtWriteFile +
push ebx  +
mov [ebp+var_6C] eax +
mov eax [ebp+var_60] +
mov [ebp+var_68] eax +
lea eax [ebp+var_6C] +
push eax  +
push 16h  +
push offset aIn_progress  +
lea eax [ebp+var_74] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_2C]  +
call edi  +
cmp eax ebx +
jl loc_1002D16  +
cmp [ebp-23h] bl +
jz loc_1002BF6  +
lea eax [ebp+var_34] +
push eax  +
call sub_1001D0A  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
call sub_1001BBA  +
mov [ebp+var_20] eax +
cmp eax 0C0000022h +
jz loc_1002BA6  +
cmp eax 0C0000043h +
jz loc_1002BA6  +
cmp eax 0C0190001h +
jz loc_1002BA6  +
cmp eax 0C0000056h +
jnz loc_1002CA8  +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_1002778  +
test eax eax +
jl loc_1002D5F  +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_1001BBA  +
test eax eax +
jl loc_1002D5F  +
lea eax [ebp+var_5C] +
push eax  +
call sub_1002065  +
test eax eax +
jl loc_1002D5F  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
call sub_1001BBA  +
mov [ebp+var_20] eax +
jmp loc_1002CA8  +
cmp [ebp+var_22] bl +
jz loc_1002C89  +
lea eax [ebp+var_34] +
push eax  +
call sub_1001D0A  +
push eax  +
mov [ebp+var_20] eax +
call sub_1001CB4  +
test al al +
jnz loc_1002C9E  +
cmp [ebp+var_20] 0C0000121h +
jz loc_1002C34  +
cmp [ebp+var_20] 0C0000043h +
jz loc_1002C34  +
cmp [ebp+var_20] 0C0190001h +
jnz loc_1002CA8  +
push 1  +
push offset dword_10011E0  +
lea eax [ebp+var_3C] +
push eax  +
call esi  +
test al al +
jnz loc_1002D5F  +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_1002778  +
test eax eax +
jl loc_1002D5F  +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_1001BBA  +
test eax eax +
jl loc_1002D5F  +
lea eax [ebp+var_5C] +
push eax  +
call sub_1002065  +
test eax eax +
jl loc_1002D5F  +
mov [ebp+var_20] ebx +
jmp loc_1002CA8  +
cmp [ebp+var_26] bl +
jz loc_1002CA4  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
call sub_1001D73  +
mov [ebp+var_20] eax +
mov [ebp+var_21] 1 +
jmp loc_1002CA8  +
or [ebp+var_20] 0FFFFFFFFh +
push [ebp+var_20]  +
lea eax [ebp+var_1C] +
push offset aSc08x  +
push ebx  +
push ebx  +
push ebx  +
push 18h  +
push eax  +
call sub_1002606  +
add esp 1Ch +
cmp eax ebx +
jl loc_1002D16  +
push ebx  +
lea eax [ebp+var_6C] +
push eax  +
push 18h  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_74] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_2C]  +
call edi  +
cmp eax ebx +
mov [ebp+var_48] eax +
jl loc_1002D16  +
cmp [ebp+var_21] bl +
jnz loc_1002CED  +
cmp [ebp+var_20] ebx +
jl loc_1002D19  +
lea eax [ebp+var_64] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push [ebp+var_2C]  +
call sub_1001809  +
cmp eax ebx +
mov [ebp+var_20] eax +
jge loc_1002A3E  +
jmp loc_1002D19  +
mov [ebp+var_20] eax +
mov esi 0C0000011h +
cmp [ebp+var_20] esi +
jnz loc_1002D28  +
mov [ebp+var_20] ebx +
jmp loc_1002D4C  +
lea eax [ebp+var_64] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push [ebp+var_2C]  +
call sub_1001809  +
cmp eax ebx +
jge loc_1002D28  +
cmp eax esi +
jnz loc_1002D5F  +
lea eax [ebp-24h] +
push eax  +
push [ebp+var_2C]  +
call sub_1002217  +
cmp eax ebx +
jge loc_1002D5F  +
mov [ebp+var_20] eax +
call sub_1002011  +
mov edi offset aSystemrestore +
cmp [ebp+var_2C] ebx +
jz loc_1002D7A  +
push [ebp+var_2C]  +
call ds:NtClose  +
mov [ebp+var_2C] ebx +
cmp [ebp-24h] bl +
jz loc_1002DCF  +
lea eax [ebp+var_54] +
push eax  +
mov [ebp+var_25] 1 +
call ds:RtlLockBootStatusData  +
cmp eax ebx +
mov [ebp+var_20] eax +
jl loc_1002ED3  +
push ebx  +
push 1  +
lea eax [ebp+var_25] +
push eax  +
push 4  +
push ebx  +
push [ebp+var_54]  +
call ds:RtlGetSetBootStatusData  +
push [ebp+var_54]  +
mov [ebp+var_20] eax +
call ds:RtlUnlockBootStatusData  +
mov eax [ebp+var_20] +
cmp eax ebx +
jl loc_1002ED3  +
push 1  +
call ds:NtShutdownSystem  +
jmp loc_1002ED3  +
mov esi offset word_10043F8 +
cmp byte_1004400 bl +
jz loc_1002E43  +
mov ecx dword_10043FC +
cmp ecx ebx +
jz loc_1002DF7  +
mov ax word_10043F8 +
cmp ax 1 +
jnz loc_1002E0B  +
cmp [ecx] bx +
jnz loc_1002E43  +
push offset aSetupexecute  +
push offset aSessionManager  +
push 2  +
call ds:RtlDeleteRegistryValue  +
jmp loc_1002E43  +
jbe loc_1002E43  +
cmp dword_1004408 1 +
jnz loc_1002E43  +
push ebx  +
push esi  +
call sub_1001472  +
cmp eax ebx +
jl loc_1002E43  +
movzx eax word_10043F8 +
push eax  +
push dword_10043FC  +
push 7  +
push offset aSetupexecute  +
push offset aSessionManager  +
push 2  +
call ds:RtlWriteRegistryValue  +
mov eax dword_10043FC +
cmp eax ebx +
jz loc_1002E68  +
push eax  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
push ebx  +
push esi  +
call ds:RtlInitUnicodeString  +
cmp [ebp+var_20] ebx +
jl loc_1002E7F  +
push 4  +
lea eax [ebp+var_20] +
push eax  +
push 4  +
mov [ebp+var_20] ebx +
push offset aRestorestatusr  +
jmp loc_1002EC7  +
push [ebp+var_20]  +
lea eax [ebp+var_1C] +
push offset a0x08x  +
push ebx  +
push ebx  +
push ebx  +
push 18h  +
push eax  +
call sub_1002606  +
add esp 1Ch +
cmp eax ebx +
jl loc_1002EB9  +
lea eax [ebp+var_1C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1002EA2  +
sub eax edx +
sar eax 1 +
add eax eax +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
jmp loc_1002EC0  +
push 14h  +
push offset a0xffffffff  +
push 1  +
push offset aRestorestatusd  +
push edi  +
push 3  +
call ds:RtlWriteRegistryValue  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003031  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov dword_10041C8 eax +
mov dword_10041C4 ecx +
mov dword_10041C0 edx +
mov dword_10041BC ebx +
mov dword_10041B8 esi +
mov dword_10041B4 edi +
mov word_10041E0 ss +
mov word_10041D4 cs +
mov word_10041B0 ds +
mov word_10041AC es +
mov word_10041A8 fs +
mov word_10041A4 gs +
pushf   +
pop dword_10041D8  +
mov eax [ebp+0] +
mov dword_10041CC eax +
mov eax [ebp+4] +
mov dword_10041D0 eax +
lea eax [ebp+8] +
mov dword_10041DC eax +
mov eax dword_10041D0 +
mov dword_10040D4 eax +
mov eax dword_100409C +
mov dword_1004118 10001h +
mov dword_10040C8 0C0000409h +
mov dword_10040CC 1 +
mov [ebp-8] eax +
mov eax dword_10040A0 +
push offset off_100129C  +
mov [ebp-4] eax +
call RtlUnhandledExceptionFilter  +
push 0C0000409h  +
push 0FFFFFFFFh  +
call NtTerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_1002FB8  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_1002FB6  +
mov eax ds:7FFE0004h +
mul  edx +
shl ecx 8 +
imul ecx ds:7FFE0004h +
shrd eax edx +
add eax ecx +
mov ecx [ebp+arg_0] +
shr edx 18h +
xor eax ecx +
mov [ecx] eax +
jz loc_1002FF7  +
cmp eax 0BB40E64Eh +
jnz loc_1002FFD  +
mov dword ptr [ecx] 0BB40E64Fh +
pop ebp  +
retn   +
***
mov eax dword_100409C +
test eax eax +
jz loc_1003014  +
cmp eax 0BB40E64Eh +
jnz loc_1003024  +
push offset dword_100409C  +
call sub_1002FAF  +
mov eax dword_100409C +
pop ecx  +
not eax  +
mov dword_10040A0 eax +
retn   +
***
cmp ecx dword_100409C +
jnz loc_100303C  +
retn 0  +
jmp loc_1002EE7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push dword ptr [eax+10h]  +
xor esi esi +
mov [ebp+var_1C] esi +
call ds:RtlNormalizeProcessParams  +
mov edi eax +
lea eax [ebp+var_1C] +
mov [ebp+var_24] eax +
mov [ebp+var_20] eax +
xor eax eax +
inc eax  +
mov [ebp+var_2C] edi +
mov [ebp+var_14] esi +
mov [ebp+var_18] esi +
mov [ebp+var_8] esi +
mov [ebp+var_10] eax +
mov [ebp+var_C] esi +
cmp edi esi +
jz loc_1003171  +
mov eax [edi+0Ch] +
lea esi [edi+40h] +
mov ebx [esi+4] +
mov [ebp+var_14] eax +
test ebx ebx +
jz loc_10030E7  +
cmp word ptr [esi] 0 +
jnz loc_10030F1  +
lea esi [edi+38h] +
mov ebx [esi+4] +
test ebx ebx +
jz loc_1003163  +
movzx eax word ptr [esi] +
mov [ebp+var_4] eax +
test eax eax +
jbe loc_1003166  +
cmp word ptr [ebx] 0 +
jz loc_1003166  +
cmp [ebp+var_4] 0 +
jbe loc_1003126  +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_1003122  +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_1003122  +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jnz loc_1003107  +
cmp [ebp+var_4] 0 +
jz loc_1003166  +
cmp word ptr [ebx] 0 +
jz loc_100315B  +
inc [ebp+var_10]  +
mov [ebp+var_28] ebx +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jz loc_100314A  +
movzx eax word ptr [ebx] +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_1003134  +
mov ecx [ebp+var_8] +
mov eax ebx +
sub eax [ebp+var_28] +
sar eax 1 +
lea eax [ecx+eax*2+2] +
mov [ebp+var_8] eax +
cmp [ebp+var_4] 0 +
ja loc_10030FB  +
jmp loc_1003166  +
mov ebx [ebp+arg_0] +
push dword ptr [edi+48h]  +
call sub_10032DB  +
inc eax  +
jmp loc_1003174  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+var_10] +
add eax ecx +
cmp eax 2 +
jbe loc_100328B  +
cmp ecx 1 +
jbe loc_1003190  +
movzx ecx word ptr [esi] +
mov ebx [esi+4] +
mov [ebp+var_4] ecx +
mov edi eax +
mov eax large fs:18h +
and dword ptr [eax+0BF4h] 0 +
mov eax [ebp+arg_0] +
shl edi 2 +
add [ebp+var_8] edi +
push [ebp+var_8]  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_10031DF  +
mov eax large fs:18h +
mov eax [eax+0BF4h] +
mov [ebp+var_C] eax +
test eax eax +
jl loc_100328B  +
mov [ebp+var_C] 0C0000017h +
jmp loc_100328B  +
cmp [ebp+var_10] 1 +
mov [ebp+var_24] esi +
jbe loc_1003276  +
mov eax [ebp+var_8] +
add eax esi +
mov [ebp+arg_0] eax +
add edi esi +
jmp loc_1003270  +
cmp edi [ebp+arg_0] +
jnb loc_1003276  +
cmp word ptr [ebx] 0 +
jz loc_1003276  +
cmp [ebp+var_4] 0 +
jbe loc_1003228  +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_1003224  +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_1003224  +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jnz loc_1003209  +
cmp [ebp+var_4] 0 +
jz loc_1003276  +
cmp word ptr [ebx] 0 +
jz loc_1003270  +
mov [esi] edi +
add esi 4 +
inc [ebp+var_18]  +
mov ax [ebx] +
mov [edi] ax +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jz loc_100325B  +
cmp edi [ebp+arg_0] +
jnb loc_1003269  +
movzx eax word ptr [ebx] +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_1003238  +
cmp edi [ebp+arg_0] +
jnb loc_1003269  +
xor eax eax +
mov [edi] ax +
inc edi  +
inc edi  +
jmp loc_1003270  +
dec edi  +
dec edi  +
xor eax eax +
mov [edi] ax +
cmp [ebp+var_4] 0 +
ja loc_10031F8  +
and dword ptr [esi] 0 +
mov eax [ebp+var_2C] +
add esi 4 +
push esi  +
push dword ptr [eax+48h]  +
mov [ebp+var_20] esi +
call sub_1003309  +
cmp [ebp+var_14] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1003295  +
int 3  +
cmp [ebp+var_C] 0 +
jl loc_10032B2  +
push [ebp+var_14]  +
push [ebp+var_20]  +
push [ebp+var_24]  +
push [ebp+var_18]  +
call sub_1002816  +
add esp 10h +
mov [ebp+var_C] eax +
push [ebp+var_C]  +
push 0FFFFFFFFh  +
call ds:__imp_NtTerminateProcess  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1003004  +
pop ebp  +
jmp loc_100308D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1003300  +
cmp [ecx] ax +
jz loc_1003300  +
inc ecx  +
inc ecx  +
inc eax  +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_10032F1  +
cmp [ecx] dx +
jnz loc_10032EE  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor edx edx +
cmp eax edx +
jz loc_1003339  +
cmp [eax] dx +
jz loc_1003339  +
mov ecx [ebp+arg_4] +
push esi  +
mov [ecx] eax +
add ecx 4 +
inc eax  +
inc eax  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1003327  +
cmp [eax] dx +
jnz loc_1003320  +
pop esi  +
jmp loc_100333C  +
mov ecx [ebp+arg_4] +
mov [ecx] edx +
pop ebp  +
retn 8  +
***
