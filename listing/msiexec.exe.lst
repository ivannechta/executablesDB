mov edi edi +
push esi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_1001311  +
push offset ProcName  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100130A  +
call eax  +
test eax eax +
jz loc_100132B  +
push esi  +
call ds:FreeLibrary  +
mov al 1 +
pop esi  +
retn   +
push esi  +
call ds:FreeLibrary  +
xor al al +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 0DC8h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push 0BB8h  +
push ebx  +
mov esi offset CriticalSection +
push 2  +
mov ecx esi +
mov [ebp-0D84h] ebx +
call sub_1001760  +
test eax eax +
jz loc_10074DC  +
lea eax [ebp-0D84h] +
push eax  +
push 20019h  +
push ebx  +
push offset aClsid  +
push 80000000h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10013A4  +
push dword ptr [ebp-0D84h]  +
call ds:RegCloseKey  +
push ebx  +
push ebx  +
call off_100E060  +
mov [ebp-0D64h] eax +
call sub_10022E3  +
call sub_100406B  +
test al al +
jz loc_10074E3  +
push edi  +
mov edi 200h +
push ebx  +
mov [ebp-0D78h] edi +
call sub_10021B5  +
mov dword ptr [esp] 11Ch +
lea eax [ebp-0D5Ch] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-0D5Ch] +
push eax  +
mov dword ptr [ebp-0D5Ch] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_1001FA3  +
cmp dword ptr [ebp-0D58h] 6 +
jb loc_1001FA3  +
push 7  +
pop eax  +
push ebx  +
push eax  +
lea eax [ebp-0D78h] +
push eax  +
lea eax [ebp-204h] +
push eax  +
call sub_1002B95  +
add esp 10h +
mov [ebp-0D6Ch] eax +
cmp eax ebx +
jnz loc_1007505  +
mov eax [ebp-0D78h] +
push eax  +
lea ecx [ebp-410h] +
mov [ebp-0D8Ch] eax +
mov [ebp-0D74h] eax +
mov [ebp-0D7Ch] eax +
mov [ebp-0D88h] eax +
mov [ebp-0D80h] eax +
call sub_100242B  +
push dword ptr [ebp-0D74h]  +
lea ecx [ebp-828h] +
call sub_100242B  +
push dword ptr [ebp-0D7Ch]  +
lea ecx [ebp-61Ch] +
call sub_100242B  +
push dword ptr [ebp-0D88h]  +
lea ecx [ebp-0A34h] +
call sub_100242B  +
push dword ptr [ebp-0D80h]  +
lea ecx [ebp-0C40h] +
call sub_100242B  +
cmp [ebp-410h] ebx +
jz loc_1001FCD  +
cmp [ebp-828h] ebx +
jz loc_1001FCD  +
cmp [ebp-61Ch] ebx +
jz loc_1001FCD  +
cmp [ebp-0A34h] ebx +
jz loc_1001FCD  +
cmp [ebp-0C40h] ebx +
jz loc_1001FCD  +
lea eax [ebp-0D80h] +
push eax  +
push dword ptr [ebp-0C40h]  +
lea eax [ebp-0D88h] +
push eax  +
push dword ptr [ebp-0A34h]  +
lea eax [ebp-0D7Ch] +
push eax  +
push dword ptr [ebp-61Ch]  +
lea eax [ebp-0D74h] +
push eax  +
push dword ptr [ebp-828h]  +
lea eax [ebp-0D8Ch] +
push eax  +
push dword ptr [ebp-410h]  +
lea eax [ebp-204h] +
push eax  +
call ds:MakeAbsoluteSD  +
test eax eax +
jz loc_100751E  +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push 2  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push dword ptr [ebp-410h]  +
call off_100E064  +
cmp eax ebx +
jnz loc_100759F  +
push ebx  +
push 0BB8h  +
push ebx  +
push 2  +
mov ecx esi +
call sub_1001760  +
test eax eax +
jz loc_10075C5  +
push ebx  +
lea eax [ebp-0D6Ch] +
push eax  +
lea eax [ebp-0D9Ch] +
push eax  +
mov [ebp-0D98h] ebx +
mov dword ptr [ebp-0DA0h] 0Ch +
call sub_1002596  +
add esp 0Ch +
push ebx  +
test eax eax +
jnz loc_10075A7  +
mov edi ds:CreateEventW +
push ebx  +
push 1  +
push ebx  +
mov dword_100E02C ebx +
mov dword_100E028 ebx +
mov dword_100E024 ebx +
mov byte ptr [ebp-0D5Dh] 1 +
mov dword ptr [ebp-0D94h] 9A5F4400h +
mov dword ptr [ebp-0D90h] 0FFFFFFFEh +
call edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword_100E028 eax +
call edi  +
mov dword_100E02C eax +
cmp dword_100E028 ebx +
jz loc_1001FC0  +
cmp eax ebx +
jz loc_1001FC0  +
push ebx  +
push 1  +
lea eax [ebp-0DA0h] +
push eax  +
call off_100E06C  +
mov dword_100E024 eax +
cmp eax ebx +
jz loc_100762E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp-0D94h] +
push ecx  +
push eax  +
call off_100E070  +
test eax eax +
jz loc_1007641  +
mov dword ptr [ebp-0D68h] offset rclsid +
xor edi edi +
push ebx  +
push 0BB8h  +
push ebx  +
push 2  +
mov ecx esi +
call sub_1001760  +
test eax eax +
jz loc_1001F03  +
lea eax dwRegister[edi] +
push eax  +
push 1  +
push 15h  +
lea eax dword_100E038[edi] +
push eax  +
push dword ptr [ebp-0D68h]  +
call ds:CoRegisterClassObject  +
mov [ebp-0D6Ch] eax +
cmp eax ebx +
jnz loc_1007654  +
add dword ptr [ebp-0D68h] 10h +
add edi 4 +
cmp dword ptr [ebp-0D68h] offset aRuveh?ijdqxfat +
jl loc_100164F  +
cmp [ebp-0D6Ch] ebx +
jnz loc_1001F03  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
mov ecx esi +
call sub_1001760  +
test eax eax +
jz loc_1001F03  +
mov eax dword_100E024 +
mov edi ds:PeekMessageW +
mov [ebp-0DACh] eax +
mov eax dword_100E028 +
mov [ebp-0DA8h] eax +
mov eax dword_100E02C +
mov [ebp-0DA4h] eax +
cmp byte_100FC04 bl +
jnz loc_1007683  +
push 4FFh  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-0DACh] +
push eax  +
push 3  +
call ds:MsgWaitForMultipleObjects  +
cmp eax 3 +
jz loc_10076E8  +
cmp eax ebx +
jz loc_1001ED5  +
cmp eax 1 +
jz loc_1001FB8  +
cmp eax 2 +
jnz loc_1001FAA  +
push ebx  +
push ebx  +
push ebx  +
push dword_100E09C  +
mov ecx esi +
call sub_1001760  +
jmp loc_10016F0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
cmp dword ptr [esi+1Ch] 1 +
jz loc_1005241  +
mov edi [ebp+arg_0] +
and dword ptr [esi+20h] 0 +
cmp edi 2 +
jz loc_100179F  +
cmp dword_100E078 0 +
jg loc_1001798  +
call sub_10012E0  +
test al al +
jz loc_10017EC  +
mov dword ptr [esi+20h] 4 +
mov eax [ebp+arg_C] +
mov [esi+1Ch] edi +
test eax eax +
jnz loc_1005248  +
mov eax [ebp+arg_4] +
mov [esi+24h] eax +
mov eax [ebp+arg_8] +
mov [esi+30h] eax +
cmp edi 4 +
jnz loc_10019FE  +
and dword ptr [esi+2Ch] 0 +
lea eax [esi+18h] +
push eax  +
push dword ptr [esi+34h]  +
call ds:SetServiceStatus  +
mov edi eax +
test edi edi +
jz loc_1005257  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
mov dword ptr [esi+20h] 5 +
jmp loc_100179F  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001848 +
xor eax eax +
cmps   +
jz loc_1001827  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1001838 +
xor eax eax +
cmps   +
jnz loc_1001DD1  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
sub eax offset dword_100E038 +
push ebx  +
mov ebx [ebp+14h] +
sar eax 2 +
mov [ebp+8] eax +
test ebx ebx +
jz loc_1005194  +
and dword ptr [ebx] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_100519E  +
push esi  +
mov esi [ebp+10h] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001848 +
xor edx edx +
cmps   +
jnz loc_10051A8  +
mov esi offset dword_100E078 +
push esi  +
call ds:InterlockedIncrement  +
cmp byte_100FC04 0 +
jnz loc_10051CD  +
mov eax dword_100E024 +
xor edi edi +
cmp eax edi +
jz loc_10018E5  +
push eax  +
call off_100E074  +
push edi  +
push dword_100E024  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jnz loc_10051D2  +
mov eax [ebp+8] +
call off_100FC00[eax*4]  +
push esi  +
mov [ebx] eax +
call ds:InterlockedDecrement  +
cmp [ebx] edi +
jz loc_10051E5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax hModule +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
test eax eax +
jz loc_1002340  +
push offset aDllgetclassobj  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1004FCD  +
push esi  +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_1001848  +
mov esi offset dword_10019BC +
push esi  +
call eax  +
test eax eax +
jnz loc_100235D  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push esi  +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100235D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+74h]  +
push dword_100E02C  +
mov esi eax +
push dword_100E028  +
mov eax [ebp+var_4] +
push dword_100E024  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0C0h]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0C8h]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+Target]  +
call ds:InterlockedExchange  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 4  +
***
cmp edi 1 +
jz loc_10017C2  +
mov eax dword_100E008 +
inc dword_100E008  +
mov [esi+2Ch] eax +
jmp loc_10017C6  +
***
mov edi edi +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax [ebp+lpData] +
mov [ebp+TokenHandle] eax +
movzx esi word ptr [eax] +
test si si +
jz loc_1001A8D  +
push esi  +
call sub_1002987  +
pop ecx  +
test al al +
jnz loc_1005E4D  +
and [ebp+var_2398] 0 +
test si si +
jz loc_1001C3D  +
mov edi 104h +
cmp si 2Fh +
jnz loc_1005E5F  +
mov eax [ebp+TokenHandle] +
inc eax  +
inc eax  +
movzx esi word ptr [eax] +
push eax  +
or esi 20h +
call sub_100219C  +
pop ecx  +
mov ecx eax +
push 52h  +
mov [ebp+TokenHandle] ecx +
mov edi offset aRuveh?ijdqxfat +
pop eax  +
movzx eax ax +
or eax 20h +
cmp eax esi +
jz loc_1001AE5  +
inc edi  +
inc edi  +
movzx eax word ptr [edi] +
test ax ax +
jnz loc_1001AD1  +
movzx esi word ptr [edi] +
test si si +
jz loc_100602A  +
movzx eax word ptr [ecx] +
cmp ax 20h +
jz loc_1001B03  +
test ax ax +
jnz loc_1005ED8  +
xor ebx ebx +
lea eax [ebp+TokenHandle] +
push eax  +
call sub_1002389  +
lea eax [ebp+ValueName] +
pop ecx  +
mov [ebp+var_2384] eax +
cmp si 63h +
jz loc_1005EEA  +
cmp si 50h +
jz loc_1005EF7  +
cmp si 71h +
jz loc_1003972  +
cmp si 63h +
jz loc_1003972  +
push 400h  +
lea eax [ebp+var_2384] +
push eax  +
lea eax [ebp+TokenHandle] +
push eax  +
call sub_1004547  +
add esp 0Ch +
test al al +
jz loc_1005CAA  +
lea eax [ebp+TokenHandle] +
push eax  +
call sub_1002389  +
movzx esi ax +
movzx eax word ptr [edi] +
pop ecx  +
cmp ax 46h +
jz loc_100397F  +
cmp ax 71h +
jz loc_100397F  +
cmp ax 4Ah +
jz loc_100397F  +
cmp ax 6Ch +
jz loc_100397F  +
movzx eax word ptr [edi] +
cmp ax 61h +
jnb loc_1005F9F  +
mov ecx dword_100E034 +
test ecx ecx +
jnz loc_1005FC6  +
mov dword_100E034 edi +
cmp ax 50h +
jz loc_1001BE4  +
mov eax 400h +
push eax  +
push [ebp+lpString]  +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_1003A9E  +
push 1Eh  +
push [ebp+var_2390]  +
lea eax [ebp+var_108] +
push 1Eh  +
push eax  +
call sub_1003A9E  +
mov eax dword_100E034 +
cmp word ptr [eax] 45h +
jz loc_1001C3D  +
lea eax [ebp+ValueName] +
mov [ebp+lpString] eax +
xor eax eax +
mov [ebp+ValueName] ax +
lea eax [ebp+var_1208] +
mov [ebp+var_2390] eax +
xor eax eax +
mov word ptr [ebp+var_1208] ax +
mov edi 104h +
test si si +
jnz loc_1001AA2  +
mov ecx dword_100E034 +
xor edi edi +
cmp ecx edi +
jz loc_1006039  +
movzx eax word ptr [ecx] +
push 45h  +
pop edx  +
cmp dx ax +
jz loc_1001C73  +
push 59h  +
pop edx  +
cmp dx ax +
jz loc_1001C73  +
push 5Ah  +
pop edx  +
cmp dx ax +
jz loc_1001C73  +
call sub_10045DB  +
mov ecx dword_100E034 +
cmp word ptr [ecx] 50h +
mov eax [ebp+var_1A18] +
jz loc_1001C85  +
lea eax [ebp+String] +
push eax  +
sub ecx offset aRuveh?ijdqxfat +
lea eax [ebp+var_108] +
sar ecx 1 +
push eax  +
call off_100FC48[ecx*4]  +
mov esi eax +
mov eax dword_100E034 +
movzx eax word ptr [eax] +
pop ecx  +
pop ecx  +
mov [ebp+var_2398] esi +
cmp ax 59h +
jz loc_1001CE0  +
cmp ax 5Ah +
jz loc_1001CE0  +
cmp esi edi +
jz loc_1006083  +
cmp esi 8000h +
jnz loc_10060D8  +
mov dword_100E01C edi +
mov [ebp+var_2398] edi +
mov esi [ebp+var_2398] +
lea ecx [ebp+lpData] +
call sub_1001DE6  +
lea ecx [ebp+var_1A18] +
call sub_1001E0B  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
cmp ecx dword_100E00C +
jnz loc_100CB37  +
retn   +
***
push 14h  +
push offset dword_1001D70  +
call sub_1001D8C  +
mov dword ptr [ebp-24h] 8 +
mov dword ptr [ebp-20h] 20h +
and dword ptr [ebp-1Ch] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-24h] +
push eax  +
call off_100E068  +
push dword ptr [ebp+8]  +
call sub_1003409  +
pop ecx  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1001E2D  +
push dword ptr [ebp-1Ch]  +
call ds:ExitProcess  +
int 3  +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_100E00C +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
jmp loc_1001831  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 104h +
jg loc_100513B  +
lea eax [esi+0Ch] +
mov dword ptr [esi+4] 104h +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 1 +
jg loc_1005234  +
lea eax [esi+0Ch] +
mov dword ptr [esi+4] 1 +
mov [esi] eax +
pop esi  +
retn   +
***
push offset dword_100FC30  +
push offset off_100FC10  +
call sub_1001E4F  +
add esp 10h +
retn   +
***
call sub_1001D8C  +
push dword ptr [ebp+10h]  +
call sub_10019E3  +
cmp al 1 +
jz loc_1001ECB  +
mov esi [ebp+0Ch] +
cmp dword ptr [esi] 0 +
jz loc_1001EB9  +
mov ecx [ebp+8] +
mov eax [ecx] +
test eax eax +
jz loc_1001EA4  +
mov edx [ecx+4] +
mov [eax] edx +
add ecx 8 +
jmp loc_1001E72  +
and [ebp-4] eax +
push dword ptr [esi]  +
call ds:FreeLibrary  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
and dword ptr [esi] 0 +
mov eax [ebp+14h] +
mov byte ptr [eax] 1 +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
call sub_1001A56  +
retn   +
push 0Ah  +
call ds:Sleep  +
jmp loc_1001E5B  +
***
call sub_10012E0  +
push ebx  +
push ebx  +
push ebx  +
test al al +
jnz loc_10076A1  +
push 3  +
mov ecx esi +
call sub_1001760  +
call sub_1001FE3  +
mov eax dwRegister +
cmp eax ebx +
jz loc_1001F03  +
push eax  +
call ds:CoRevokeClassObject  +
mov eax dword_100E024 +
mov edi ds:CloseHandle +
cmp eax ebx +
jz loc_1001F15  +
push eax  +
call edi  +
mov eax dword_100E028 +
cmp eax ebx +
jz loc_1001F21  +
push eax  +
call edi  +
mov eax dword_100E02C +
cmp eax ebx +
jz loc_1001F2D  +
push eax  +
call edi  +
cmp [ebp-0D64h] ebx +
jl loc_1001F3B  +
call ds:CoUninitialize  +
cmp [ebp-0D5Dh] bl +
jz loc_1001F4F  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
mov ecx esi +
call sub_1001760  +
mov esi 200h +
cmp [ebp-0C3Ch] esi +
jg loc_100773E  +
cmp [ebp-0A30h] esi +
jg loc_100774F  +
cmp [ebp-618h] esi +
jg loc_1007760  +
cmp [ebp-824h] esi +
jg loc_1007771  +
cmp [ebp-40Ch] esi +
jg loc_1007782  +
xor eax eax +
pop edi  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn 4  +
***
push 2  +
jmp loc_100141B  +
***
cmp eax 0FFFFFFFFh +
jz loc_1007700  +
jmp loc_10016F0  +
***
push ebx  +
push ebx  +
push ebx  +
jmp loc_1001EE5  +
***
mov edi ds:GetLastError +
call edi  +
jmp loc_1007718  +
***
cmp [ebp-0D64h] ebx +
jge loc_1007793  +
jmp loc_1007799  +
***
push 12h  +
push idThread  +
call ds:PostThreadMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_1002165  +
cmp ecx [ebp+arg_0] +
ja loc_1002165  +
pop ebp  +
retn 4  +
mov eax 80070057h +
jmp loc_1002161  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+samDesired] +
push eax  +
call sub_1004283  +
pop ecx  +
push [ebp+phkResult]  +
push [ebp+samDesired]  +
push [ebp+ulOptions]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp cx [eax] +
jz loc_10021AE  +
add eax 2 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_0]  +
call sub_1003B5A  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_1003B5A  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 12Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_18] +
mov [ebp+var_12C] eax +
mov eax [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_124] eax +
mov eax [ebp+arg_14] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_128] ecx +
test eax eax +
jnz loc_1004EFB  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_10022BC  +
test esi esi +
jnz loc_1004F05  +
test edi edi +
jnz loc_1004F12  +
test ebx ebx +
jnz loc_1004F1F  +
mov eax [ebp+var_12C] +
test eax eax +
jnz loc_1004F31  +
mov eax [ebp+var_128] +
test eax eax +
jnz loc_1004F3C  +
mov esi [ebp+var_124] +
test esi esi +
jz loc_10022BC  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
mov byte ptr [esi] 0 +
jnz loc_10022BC  +
push 0  +
push 4  +
lea eax [ebp+var_124] +
push eax  +
push 1Ah  +
call ds:GetCurrentProcess  +
push eax  +
call ds:NtQueryInformationProcess  +
test eax eax +
jl loc_10022BC  +
cmp [ebp+var_124] 0 +
jnz loc_1004F46  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_10022DD  +
push eax  +
call ds:FreeSid  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push 40h  +
lea eax [ebp+Buffer] +
push eax  +
push offset Name  +
mov byte_100E000 1 +
call ds:GetEnvironmentVariableW  +
test eax eax +
jnz loc_1004FA0  +
xor al al +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001D10  +
leave   +
retn   +
***
push offset LibFileName  +
call ds:LoadLibraryW  +
mov hModule eax +
test eax eax +
jnz loc_100192A  +
jmp loc_1004FCD  +
xor eax eax +
jmp loc_10019B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2Dh +
jz loc_1002380  +
cmp [ebp+arg_0] 2Fh +
jnz loc_1004FD1  +
mov al 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov ecx [edx] +
movzx eax word ptr [ecx] +
cmp ax 20h +
jz loc_10023A4  +
cmp ax 9 +
jz loc_10023A4  +
pop ebp  +
retn   +
add ecx 2 +
mov [edx] ecx +
jmp loc_1002391  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp ebx [esi+8] +
push edi  +
jg loc_1005086  +
lea edi [esi+0Ch] +
test edi edi +
jz loc_1005099  +
cmp [ebp+arg_4] 0 +
jz loc_10023DF  +
cmp [esi] edi +
jnz loc_10050A0  +
mov eax [esi] +
lea ecx [esi+0Ch] +
cmp eax ecx +
jnz loc_10050C4  +
mov [esi] edi +
mov [esi+4] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 200h  +
lea edi [esi+0Ch] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
mov [esi] edi +
pop edi  +
mov dword ptr [esi+4] 200h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov eax 200h +
cmp ecx eax +
mov [esi+4] ecx +
jg loc_10050D0  +
push edi  +
push eax  +
lea edi [esi+0Ch] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
mov [esi] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx 104h +
push esi  +
push edi  +
mov esi ecx +
jg loc_10050E9  +
lea edi [esi+0Ch] +
test edi edi +
jz loc_10050FC  +
cmp [ebp+arg_4] 0 +
jnz loc_1005103  +
mov eax [esi] +
lea ecx [esi+0Ch] +
cmp eax ecx +
jnz loc_100512F  +
mov [esi] edi +
mov [esi+4] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 20Ah  +
lea edi [esi+0Ch] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
mov [esi] edi +
pop edi  +
mov dword ptr [esi+4] 105h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_100250C  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_100250C  +
call sub_10044E1  +
test eax eax +
jl loc_1005171  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_10024FF  +
***
lea esi [ebp+pSid] +
call sub_10032A6  +
mov edi ds:AllocateAndInitializeSid +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and eax 0FE10001h +
add eax 1EFFFFh +
mov [ebp+AccessMask] eax +
mov [ebp+var_248] eax +
mov esi [ebp+var_24C] +
push 2  +
jmp loc_1002D14  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_100E004 0 +
push esi  +
mov esi offset unk_100F7F8 +
jnz loc_10025C8  +
push [ebp+arg_8]  +
push 3  +
push offset dword_100E0B8  +
push esi  +
call sub_1002B95  +
add esp 10h +
test eax eax +
jnz loc_10025DA  +
mov byte_100E004 1 +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+arg_4] +
mov ecx dword_100E0B8 +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0 +
jnz loc_1005181  +
cmp byte_100E005 0 +
push esi  +
mov esi offset unk_100F8F8 +
jnz loc_100261E  +
push [ebp+arg_8]  +
push 1  +
push offset dword_100E0BC  +
push esi  +
call sub_1002B95  +
add esp 10h +
test eax eax +
jnz loc_1002630  +
mov byte_100E005 1 +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+arg_4] +
mov ecx dword_100E0BC +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpHandlerProc]  +
mov esi ecx +
push [ebp+lpServiceName]  +
call ds:RegisterServiceCtrlHandlerW  +
mov [esi+34h] eax +
pop esi  +
test eax eax +
jz loc_10052A2  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp byte_100E058 0 +
jnz sub_1007B04  +
push [ebp+uSize]  +
push [ebp+lpBuffer]  +
call ds:GetSystemDirectoryW  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100E064  +
push offset aCoinitializese  +
call sub_10042E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007BD6  +
pop ebp  +
jmp off_100E064  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100E070  +
push offset aSetwaitabletim  +
call sub_1003CFE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007C07  +
pop ebp  +
jmp off_100E070  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100E074  +
push offset aCancelwaitable  +
call sub_1003CFE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007C0D  +
pop ebp  +
jmp off_100E074  +
***
push offset dword_100E048  +
push dword_100FCB8  +
mov dword_100E048 eax +
push offset unk_100E0CC  +
push offset unk_100E0D0  +
push offset unk_100E0C8  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100E044 eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100E00C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1007CCE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100282A  +
test dword_100E00C ebx +
jz loc_100282A  +
mov dword_100E00C esi +
not esi  +
mov dword_100E010 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1002817  +
***
retn   +
***
call sub_1004B92  +
pop ecx  +
retn   +
***
call sub_1004B92  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
imul eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
add esi eax +
dec [ebp+arg_8]  +
js loc_10028A8  +
sub esi [ebp+arg_4] +
mov ecx esi +
call [ebp+arg_C]  +
jmp loc_1002899  +
pop esi  +
pop ebp  +
retn 10h  +
***
xor eax eax +
jmp loc_100297D  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1002955  +
jmp loc_1002961  +
test cl cl +
jz loc_1002955  +
jmp loc_1002961  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [eax] ebx +
mov eax [esi] +
push edi  +
cmp eax ebx +
jz loc_10028AD  +
cmp [eax] bx +
jz loc_10028AD  +
mov edi [esi] +
movzx eax word ptr [edi] +
push eax  +
call sub_1002987  +
pop ecx  +
test al al +
jnz loc_1004FD5  +
mov eax [esi] +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_10028AD  +
push 22h  +
pop edx  +
mov [ebp+var_1] 1 +
cmp dx cx +
jz loc_1004FEA  +
lea edi [eax+2] +
mov [esi] edi +
mov [ebp+var_8] eax +
mov byte ptr [ebp+arg_0+3] bl +
cmp [edi] bx +
jz loc_1002963  +
movzx ebx word ptr [edi] +
push ebx  +
call sub_1002987  +
pop ecx  +
push 22h  +
pop ecx  +
cmp cx bx +
setz cl  +
test al al +
jnz loc_1004FF2  +
test cl cl +
jnz loc_1004FF2  +
inc edi  +
inc edi  +
mov eax edi +
mov [esi] edi +
cmp word ptr [eax] 0 +
jnz loc_1002932  +
xor ebx ebx +
cmp [ebp+var_1] 0 +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
jz loc_100501C  +
mov edx [esi] +
mov eax [ebp+var_8] +
sub edx eax +
sar edx 1 +
mov [ecx] edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 20h +
jz loc_100299E  +
cmp [ebp+arg_0] 9 +
jz loc_100299E  +
xor al al +
pop ebp  +
retn   +
mov al 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
lea eax [ebp+bOwnerDefaulted] +
push eax  +
lea eax [ebp+pSid1] +
push eax  +
push [ebp+pSecurityDescriptor]  +
call ds:GetSecurityDescriptorOwner  +
test eax eax +
jz loc_1005306  +
cmp [ebp+pSid1] 0 +
jz loc_1005319  +
lea eax [ebp+pSid2] +
push eax  +
call sub_1003C62  +
pop ecx  +
test eax eax +
jnz loc_100531D  +
push esi  +
push [ebp+pSid2]  +
mov esi ds:EqualSid +
push [ebp+pSid1]  +
call esi  +
test eax eax +
jz loc_10029FC  +
mov al 1 +
pop esi  +
leave   +
retn   +
lea eax [ebp+pSid2] +
push eax  +
call sub_1002A24  +
pop ecx  +
test eax eax +
jnz loc_1005325  +
push [ebp+pSid2]  +
push [ebp+pSid1]  +
call esi  +
test eax eax +
jnz loc_10029F7  +
jmp loc_100532D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_14] eax +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov esi offset unk_100F5F8 +
cmp byte_100E002 bl +
jnz loc_1002AC3  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1004F4E  +
push [ebp+pSid]  +
mov edi ds:GetLengthSid +
call edi  +
cmp eax 100h +
ja loc_1004F59  +
push [ebp+pSid]  +
call edi  +
push eax  +
push [ebp+pSid]  +
push esi  +
call memcpy  +
add esp 0Ch +
mov byte_100E002 1 +
cmp [ebp+pSid] ebx +
jz loc_1002AC3  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov eax [ebp+var_14] +
mov [eax] esi +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
lea esi [ebp+pSid] +
call sub_10032A6  +
mov edi ds:AllocateAndInitializeSid +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+var_14] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_244] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and eax 0FE10001h +
add eax 1EFFFFh +
mov [ebp+AccessMask] eax +
mov [ebp+var_248] 0A0120000h +
mov esi [ebp+var_244] +
mov [ebp+var_240] eax +
push 3  +
jmp loc_1002D14  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 270h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+pSelfRelativeSecurityDescriptor] eax +
mov eax [ebp+arg_4] +
push 4  +
mov [ebp+lpdwBufferLength] eax +
lea eax [ebp+pSid] +
pop ecx  +
xor ebx ebx +
mov [eax] ebx +
mov [eax+4] ebx +
add eax 8 +
dec ecx  +
jns loc_1002BCA  +
mov eax [ebp+arg_8] +
xor edi edi +
xor esi esi +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov byte ptr [ebp+var_14] bl +
mov byte ptr [ebp+var_14+1] bl +
mov byte ptr [ebp+var_14+2] bl +
mov byte ptr [ebp+var_14+3] bl +
mov [ebp+var_10] bl +
mov [ebp+var_F] 1 +
mov [ebp+pGroup] ebx +
cmp eax 7 +
ja loc_1002D15  +
jmp ds:off_1003281[eax*4]  +
lea esi [ebp+pSid] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_244] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_23C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 13h  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_234] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 14h  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
mov esi [ebp+var_244] +
mov [ebp+pGroup] esi +
mov [ebp+AccessMask] edi +
mov [ebp+var_248] edi +
mov [ebp+var_240] edi +
mov [ebp+var_238] edi +
mov [ebp+var_230] edi +
push 5  +
pop edi  +
cmp edi ebx +
mov [ebp+pAce] 8 +
mov [ebp+dwAceIndex] ebx +
jle loc_1002D5A  +
mov eax [ebp+dwAceIndex] +
push [ebp+eax*8+pSid]  +
call ds:GetLengthSid  +
mov ecx [ebp+pAce] +
inc [ebp+dwAceIndex]  +
cmp [ebp+dwAceIndex] edi +
lea eax [ecx+eax+8] +
mov [ebp+pAce] eax +
jl loc_1002D29  +
lea ecx [ebp+hMem] +
call sub_10023FF  +
mov eax [ebp+pAce] +
cmp [ebp+var_21C] eax +
jl loc_10031E8  +
cmp [ebp+hMem] ebx +
jz loc_10031F9  +
push 2  +
push [ebp+pAce]  +
push [ebp+hMem]  +
call ds:InitializeAcl  +
test eax eax +
jz loc_1002EF6  +
cmp edi ebx +
mov [ebp+dwAceIndex] ebx +
jle loc_1002E0F  +
mov eax [ebp+dwAceIndex] +
shl eax 3 +
push [ebp+eax+pSid]  +
push [ebp+eax+AccessMask]  +
push 2  +
push [ebp+hMem]  +
call ds:AddAccessAllowedAce  +
test eax eax +
jz loc_1002EF6  +
lea eax [ebp+pAce] +
push eax  +
push [ebp+dwAceIndex]  +
push [ebp+hMem]  +
call ds:GetAce  +
test eax eax +
jz loc_1002EF6  +
inc [ebp+dwAceIndex]  +
cmp [ebp+dwAceIndex] edi +
mov eax [ebp+pAce] +
mov byte ptr [eax+1] 3 +
jl loc_1002DA9  +
push 1  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_1002EF6  +
push ebx  +
push [ebp+hMem]  +
lea eax [ebp+pSecurityDescriptor] +
push 1  +
push eax  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_1002EF6  +
push ebx  +
push esi  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_1002EF6  +
cmp [ebp+pGroup] ebx +
jnz loc_1002ED0  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:GetSecurityDescriptorLength  +
mov ecx [ebp+lpdwBufferLength] +
cmp [ecx] eax +
jb loc_1003211  +
push ecx  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:MakeSelfRelativeSD  +
test eax eax +
jz loc_100322D  +
cmp [ebp+var_21C] 200h +
jg loc_100323A  +
push offset loc_10022D0  +
push 5  +
push 8  +
lea eax [ebp+pSid] +
push eax  +
call sub_1002887  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
push ebx  +
push [ebp+pGroup]  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jnz loc_1002E63  +
jmp loc_1002EF6  +
call ds:GetLastError  +
jmp loc_1002F01  +
call ds:GetLastError  +
jmp loc_100324B  +
mov esi eax +
jmp loc_1003265  +
lea esi [ebp+pSid] +
call sub_10032A6  +
mov edi ds:AllocateAndInitializeSid +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+var_14] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_244] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
mov esi [ebp+var_244] +
mov [ebp+AccessMask] 13FFFFh +
cmp [ebp+arg_C] ebx +
jnz loc_1002F97  +
mov [ebp+AccessMask] 12FFFFh +
mov eax 10000000h +
mov [ebp+var_248] eax +
jmp loc_1002B83  +
lea esi [ebp+pSid] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_244] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
mov esi [ebp+var_244] +
mov [ebp+pGroup] esi +
mov [ebp+AccessMask] edi +
mov [ebp+var_248] edi +
mov [ebp+var_240] edi +
jmp loc_1002B89  +
lea esi [ebp+pSid] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_244] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
mov eax [ebp+pSid] +
mov esi [ebp+var_24C] +
mov [ebp+pGroup] eax +
jmp loc_1003033  +
lea esi [ebp+pSid] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1002EEE  +
mov eax [ebp+pSid] +
mov [ebp+pGroup] eax +
mov [ebp+AccessMask] edi +
mov [ebp+var_248] edi +
jmp loc_1002584  +
lea esi [ebp+pSid] +
call sub_10032A6  +
mov edi ds:AllocateAndInitializeSid +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+var_14] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_24C] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
lea esi [ebp+var_244] +
call sub_10032A6  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call edi  +
test eax eax +
jz loc_1002EEE  +
mov eax 10000000h +
mov [ebp+AccessMask] 2001Bh +
mov [ebp+var_248] eax +
jmp loc_1002B7D  +
push eax  +
lea ecx [ebp+hMem] +
call sub_1008B85  +
jmp loc_1002D77  +
cmp [ebp+var_21C] 200h +
jle loc_100320C  +
push ebx  +
call sub_1008836  +
pop ecx  +
push 0Eh  +
pop esi  +
jmp loc_1003265  +
cmp [ebp+var_21C] 200h +
jle loc_1003229  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
push 7Ah  +
jmp loc_100320E  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1002E9A  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
jmp loc_1002EAA  +
cmp [ebp+var_21C] 200h +
mov esi eax +
jle loc_1003265  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
push offset loc_10022D0  +
push 5  +
push 8  +
lea eax [ebp+pSid] +
push eax  +
call sub_1002887  +
mov eax esi +
jmp loc_1002EC1  +
***
mov eax [esi] +
test eax eax +
jnz loc_1004F94  +
mov eax esi +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
cmp [ebp+arg_4] 3 +
jg loc_100339A  +
lea eax [ebp+hObject] +
push eax  +
push 1  +
push 28h  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_100330F  +
call ds:GetLastError  +
cmp eax 3F0h +
jnz loc_100339A  +
lea eax [ebp+hObject] +
push eax  +
push 28h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_100339A  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+arg_8] bl +
jz loc_1003389  +
xor edi edi +
cmp [ebp+arg_4] ebx +
jle loc_1003352  +
lea esi [ebp+NewState.Privileges.Attributes] +
lea eax [esi-8] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+edi*4]  +
push ebx  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jz loc_1004EDE  +
movzx eax [ebp+arg_8] +
neg eax  +
sbb eax eax +
and eax 2 +
mov [esi] eax +
inc edi  +
add esi 0Ch +
cmp edi [ebp+arg_4] +
jl loc_1003323  +
push [ebp+ReturnLength]  +
mov eax [ebp+arg_4] +
push [ebp+PreviousState]  +
mov [ebp+NewState.PrivilegeCount] eax +
push [ebp+BufferLength]  +
lea eax [ebp+NewState] +
push eax  +
push ebx  +
push [ebp+hObject]  +
call ds:AdjustTokenPrivileges  +
push [ebp+hObject]  +
call ds:CloseHandle  +
call ds:GetLastError  +
neg eax  +
sbb al al +
inc al  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp [ebp+PreviousState] ebx +
jz loc_1003319  +
mov eax [ebp+ReturnLength] +
push ebx  +
push ebx  +
push dword ptr [eax]  +
push [ebp+PreviousState]  +
jmp loc_1003365  +
xor al al +
leave   +
retn   +
***
imul eax [eax] +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2418h +
call sub_100403B  +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push offset byte_100E058  +
push edi  +
push edi  +
lea eax [ebp+var_1A0C] +
push edi  +
push edi  +
mov [ebp+var_1A14] 1 +
mov [ebp+var_1A18] eax +
call sub_10021E5  +
mov ecx szCommandLine +
xor eax eax +
mov [ecx] ax +
mov ecx off_100E400 +
mov [ecx] ax +
lea eax [ebp+var_215C] +
add esp 1Ch +
mov [ebp+var_2164] 104h +
mov [ebp+lpData] eax +
call ds:GetCommandLineW  +
push 22h  +
mov ebx eax +
pop ecx  +
cmp [ebx] cx +
jz loc_1005C52  +
push 20h  +
pop ecx  +
movzx eax word ptr [ebx] +
cmp ax di +
jz loc_10034B6  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
cmp ax cx +
jz loc_10034AF  +
inc ebx  +
inc ebx  +
movzx eax word ptr [ebx] +
cmp ax di +
jnz loc_10034A0  +
cmp [ebx] di +
jz loc_10034B6  +
inc ebx  +
inc ebx  +
mov eax [ebp+arg_0] +
push 0FFFFFFF5h  +
mov dword_100E014 eax +
call ds:GetStdHandle  +
mov hFile eax +
cmp eax 0FFFFFFFFh +
jz loc_10034DB  +
push eax  +
call ds:GetFileType  +
test eax eax +
jnz loc_10034E1  +
mov hFile edi +
xor eax eax +
mov esi 7FEh +
push esi  +
mov [ebp+ValueName] ax +
lea eax [ebp-0A06h] +
push edi  +
push eax  +
mov [ebp+var_23E0] edi +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_1208] ax +
lea eax [ebp+var_1208+2] +
push edi  +
push eax  +
call memset  +
lea eax [ebp+ValueName] +
mov [ebp+lpString] eax +
lea eax [ebp+var_1208] +
add esp 18h +
mov [ebp+var_2390] eax +
mov [ebp+var_23B4] edi +
mov dword_100E01C edi +
movzx eax word ptr [ebx] +
cmp ax 20h +
jz loc_100395C  +
cmp ax 9 +
jz loc_100395C  +
movzx eax word ptr [ebx] +
cmp ax 2Fh +
jnz loc_1005C59  +
lea eax [ebx+2] +
cmp eax edi +
jz loc_100357D  +
mov ax [eax] +
or ax 20h +
cmp ax 60h +
jz loc_1005C68  +
lea eax [ebp+var_2384] +
push eax  +
push 7FFFFFFFh  +
push ebx  +
mov [ebp+var_2384] edi +
call sub_10024DF  +
test eax eax +
jl loc_1005DCF  +
mov eax [ebp+var_2384] +
push edi  +
inc eax  +
push eax  +
lea ecx [ebp+lpData] +
call sub_1002465  +
test al al +
jz loc_1003963  +
mov ecx [ebp+lpData] +
xor eax eax +
mov [ecx] ax +
mov esi offset asc_100392C +
lea edi [ebp+var_8C] +
movs   +
movs   +
mov esi offset aP +
lea edi [ebp+var_84] +
movs   +
movs   +
mov esi offset aPatch +
lea edi [ebp+var_AC] +
movs   +
movs   +
movs   +
push 8  +
pop ecx  +
movs   +
mov esi offset aMsipatchremove +
lea edi [ebp+var_CC] +
movs   +
lea ecx [ebp+cchCount2] +
xor edx edx +
push ecx  +
mov eax offset String2 +
push 7FFFFFFFh  +
push eax  +
mov [ebp+var_7C] offset aUpdate +
mov [ebp+var_78] edx +
mov [ebp+var_74] dl +
mov [ebp+var_70] offset aUninstall +
mov [ebp+var_6C] edx +
mov [ebp+var_68] dl +
mov [ebp+var_64] eax +
mov [ebp+var_60] offset aI +
mov [ebp+var_5C] 1 +
mov [ebp+var_58] offset aHelp +
mov [ebp+pSid1] offset asc_10038B4 +
mov [ebp+var_50] 1 +
mov [ebp+var_4C] offset aQuiet +
mov [ebp+var_48] offset aQn +
mov [ebp+var_44] 1 +
mov [ebp+var_40] offset aPassive +
mov [ebp+var_3C] offset aQbRebootprompt +
mov [ebp+var_38] 1 +
mov [ebp+var_34] offset aNorestart +
mov [ebp+var_30] offset aRebootReallysu +
mov [ebp+var_2C] 1 +
mov [ebp+var_28] offset aForcerestart +
mov [ebp+var_24] offset aRebootForce +
mov [ebp+var_20] 1 +
mov [ebp+var_1C] offset aPromptrestart +
mov [ebp+var_18] offset aRebootprompt +
mov [ebp+var_14] 1 +
mov [ebp+var_10] offset aLog +
mov [ebp+var_C] offset asc_10037A0 +
mov [ebp+var_8] 1 +
mov [ebp+cchCount2] edx +
call sub_10024DF  +
test eax eax +
jl loc_1005DCF  +
and [ebp+var_238C] 0 +
mov [ebp+var_2384] ebx +
lea eax [ebp+var_238C] +
push eax  +
lea eax [ebp+var_2384] +
push eax  +
call sub_10028D5  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_100339E  +
lea eax [ebp+var_84] +
mov [ebp+var_78] eax +
mov [ebp+var_74] 1 +
lea eax [ebp+var_8C] +
mov [ebp+var_68] 1 +
and [ebp+var_238C] 0 +
mov [ebp+var_6C] eax +
mov [ebp+var_2384] ebx +
lea eax [ebp+var_238C] +
push eax  +
lea eax [ebp+var_2384] +
push eax  +
call sub_10028D5  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jnz loc_1003932  +
mov esi [ebp+lpData] +
and [ebp+var_2384] 0 +
lea eax [ebp+var_2384] +
push eax  +
push 7FFFFFFFh  +
push esi  +
call sub_10024DF  +
test eax eax +
jl loc_1005DCF  +
mov eax [ebp+var_2384] +
test eax eax +
jbe loc_1001A6A  +
lea esi [esi+eax*2-2] +
movzx eax word ptr [esi] +
push eax  +
call sub_1002987  +
pop ecx  +
test al al +
jz loc_1001A6A  +
cmp esi [ebp+lpData] +
jb loc_1001A6A  +
xor eax eax +
mov [esi] ax +
dec esi  +
dec esi  +
jmp loc_1003778  +
movzx eax word ptr [edi] +
test ax ax +
jz loc_100373F  +
push eax  +
call sub_1002369  +
pop ecx  +
test al al +
jz loc_10039BD  +
mov ebx [ebp+var_238C] +
and [ebp+var_23A0] 0 +
dec ebx  +
lea esi [ebp+var_7C] +
jmp loc_100398C  +
inc ebx  +
inc ebx  +
jmp loc_1003541  +
push 0Eh  +
pop esi  +
jmp loc_1001CE0  +
mov esi eax +
jmp loc_1001CE0  +
test ebx ebx +
jnz loc_1001B46  +
jmp loc_1001B69  +
test ebx ebx +
jnz loc_1005F39  +
jmp loc_1001BA4  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
lea eax [edi+2] +
push ebx  +
push eax  +
push 1  +
push 409h  +
call ds:CompareStringW  +
cmp eax 2 +
jz loc_1005E1C  +
inc [ebp+var_23A0]  +
add esi 0Ch +
cmp [ebp+var_23A0] 0Ah +
jb loc_100398C  +
push 1  +
push [ebp+var_238C]  +
lea eax [ebp+lpData] +
push edi  +
push eax  +
mov [ebp+var_2160] 104h +
call sub_10039EE  +
add esp 10h +
test eax eax +
jz loc_1003720  +
jmp loc_100396B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push dword ptr [esi]  +
call sub_10024DF  +
test eax eax +
jl loc_1005222  +
xor eax eax +
cmp [ebp+arg_C] al +
push ebx  +
mov ebx [ebp+arg_8] +
setnz al  +
push edi  +
mov edi [ebp+var_4] +
lea eax [eax+ebx+1] +
cmp eax ebx +
jbe loc_1003A4C  +
lea ecx [edi+eax*2] +
cmp ecx edi +
jbe loc_1003A4C  +
add eax edi +
cmp eax [esi+4] +
jbe loc_1003A4C  +
push 1  +
push ecx  +
mov ecx esi +
call sub_10023B0  +
test al al +
jz loc_100522C  +
mov eax [esi+4] +
mov ecx [esi] +
push ebx  +
push [ebp+arg_4]  +
sub eax edi +
push eax  +
lea eax [ecx+edi*2] +
push eax  +
call sub_1003A9E  +
test eax eax +
jl loc_1003A92  +
cmp [ebp+arg_C] 0 +
jz loc_1003A8B  +
mov eax [esi+4] +
mov esi [esi] +
push 1  +
sub eax edi +
push offset asc_1002138  +
sub eax ebx +
push eax  +
add edi ebx +
lea eax [esi+edi*2] +
push eax  +
call sub_1003A9E  +
test eax eax +
jl loc_1003A92  +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
mov eax 65Bh +
jmp loc_1003A8D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1003ADE  +
cmp edx 7FFFFFFFh +
ja loc_1003ADE  +
test eax eax +
jl loc_1003ADA  +
cmp [ebp+arg_C] 7FFFFFFEh +
ja loc_1005162  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1003AE7  +
pop ebp  +
retn 10h  +
mov eax ecx +
jmp loc_1003AB9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1003B33  +
cmp [ebp+arg_4] eax +
jz loc_1003B18  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1003B18  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1003AFB  +
test esi esi +
jz loc_1003B33  +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1004EB0  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_1003B1C  +
***
push offset unk_100F4F4  +
push offset unk_100F4C4  +
push 30h  +
push dword ptr [ebp+arg_4]  +
push 1  +
push offset off_100FC40  +
jmp loc_1003BCA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
ja loc_1004EF7  +
push ebx  +
push esi  +
push edi  +
mov esi offset Target +
push esi  +
call sub_10019E3  +
test al al +
jnz loc_1003BEC  +
xor ebx ebx +
cmp byte_100E001 bl +
jz loc_100451B  +
mov esi [ebp+arg_0] +
imul esi esi +
lea esi dword_100F4C0[esi] +
mov edi [esi] +
cmp [ebp+arg_4] bl +
jz loc_1003BE5  +
lea eax [edi+1] +
cmp eax 1 +
mov [esi] eax +
jnz loc_1003BF9  +
mov eax [ebp+arg_0] +
sub eax ebx +
jz loc_1003B3D  +
dec eax  +
jnz loc_1004EEE  +
push offset ReturnLength  +
push offset PreviousState  +
push 30h  +
push dword ptr [ebp+arg_4]  +
push 2  +
push offset off_100FC38  +
call sub_10032B8  +
add esp 18h +
cmp al bl +
jz loc_1004EF0  +
pop edi  +
pop esi  +
mov Target ebx +
pop ebx  +
pop ebp  +
retn   +
lea eax [edi-1] +
cmp eax ebx +
jmp loc_1003BA2  +
push 0Ah  +
call ds:Sleep  +
jmp loc_1003B71  +
mov al 1 +
jmp loc_1003BD2  +
***
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1004F71  +
push [ebp+pSid]  +
mov esi ds:GetLengthSid +
call esi  +
cmp eax 100h +
ja loc_1004F7C  +
push [ebp+pSid]  +
call esi  +
push eax  +
push [ebp+pSid]  +
push edi  +
call memcpy  +
add esp 0Ch +
mov byte_100E003 1 +
cmp [ebp+pSid] ebx +
jz loc_1003CA3  +
push [ebp+pSid]  +
call ds:FreeSid  +
jmp loc_1003CA3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_14] eax +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov edi offset unk_100F6F8 +
cmp byte_100E003 bl +
jz loc_1003BFD  +
mov eax [ebp+var_14] +
mov [eax] edi +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100E06C  +
push offset aCreatewaitable  +
call sub_1003CFE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007C01  +
pop ebp  +
jmp off_100E06C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset dword_100FCB4 +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_1003D65  +
cmp byte_100FCA1 0 +
mov ecx dword_100FCB0 +
pop esi  +
jz loc_1003D27  +
test ecx ecx +
jz loc_1003D49  +
xor eax eax +
test ecx ecx +
jz loc_1003D40  +
push [ebp+lpProcName]  +
push ecx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1003D40  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
and dword_100FCB4 0 +
pop ebp  +
retn   +
push offset aKernel32  +
call sub_1004361  +
pop ecx  +
mov ecx eax +
mov dword_100FCB0 ecx +
test ecx ecx +
jnz loc_1003D27  +
jmp loc_1007BF7  +
push 0Ah  +
call ds:Sleep  +
jmp loc_1003D09  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_1003DA8  +
test eax eax +
jnz loc_1003DA8  +
mov ecx [esi] +
test ecx ecx +
jz loc_1003DA3  +
call ecx  +
add esi 4 +
jmp loc_1003D92  +
pop esi  +
pop ebp  +
retn   +
***
call sub_10027A7  +
push 58h  +
push offset dword_1003EE8  +
call sub_1001D8C  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-68h] +
push eax  +
call ds:GetStartupInfoA  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset unk_100E07C +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jnz loc_1003F53  +
xor esi esi +
inc esi  +
mov eax dword_100E04C +
cmp eax esi +
jz loc_1003F71  +
mov eax dword_100E04C +
test eax eax +
jnz loc_1003F1F  +
mov dword_100E04C esi +
push offset dword_1003EE4  +
push offset dword_1003ED8  +
call sub_1003D87  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1004029  +
mov eax dword_100E04C +
cmp eax esi +
jnz loc_1003E61  +
push offset dword_1003ED4  +
push offset dword_1003EB8  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100E04C 2 +
test ebx ebx +
jnz loc_1003E6D  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100FCC8 0 +
jnz loc_1003F7E  +
mov eax ds:_acmdln +
mov esi [eax] +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov [ebp-20h] esi +
mov al [esi] +
cmp al 20h +
jbe loc_1003F10  +
cmp al 22h +
jz loc_1003FBD  +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jnz loc_1003FCD  +
inc esi  +
jmp loc_1003E90  +
***
test al al +
jz loc_1003F2A  +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1003F2A  +
jmp loc_1003E99  +
***
mov dword_1010484 esi +
jmp loc_1003E3D  +
***
mov al [esi] +
test al al +
jz loc_1003F3A  +
cmp al 20h +
ja loc_1003F3A  +
inc esi  +
mov [ebp-20h] esi +
jmp loc_1003F2A  +
***
test byte ptr [ebp-3Ch] 1 +
jnz loc_1003FA2  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call loc_1001D22  +
jmp loc_1003FA8  +
cmp eax esi +
jnz loc_1003F61  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1003E04  +
***
push 3E8h  +
call ds:Sleep  +
jmp loc_1003DEF  +
***
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1003E3D  +
***
push offset dword_100FCC8  +
call sub_100CAA0  +
pop ecx  +
test eax eax +
jz loc_1003E7A  +
push 0  +
push 2  +
push 0  +
call dword_100FCC8  +
jmp loc_1003E7A  +
***
movzx eax word ptr [ebp-38h] +
jmp loc_1003F43  +
***
mov dword_100E0DC eax +
cmp dword_100E040 0 +
jnz loc_1004011  +
push eax  +
call ds:exit  +
***
xor ecx ecx +
cmp [ebp-1Ch] ecx +
setz cl  +
mov [ebp-1Ch] ecx +
jmp loc_1003EA1  +
***
inc esi  +
mov [ebp-20h] esi +
jmp loc_1003EB4  +
***
add [ecx+59h] bl +
retn   +
***
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_100E0DC eax +
cmp dword_100E040 0 +
jnz loc_1004005  +
push eax  +
call ds:_exit  +
***
cmp dword_1010484 0 +
jnz near ptr loc_1004013+1  +
adc al [eax] +
add edi eax +
inc ebp  +
cld   +
xor eax eax +
inc eax  +
retn   +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jnb loc_100405C  +
sub eax 1000h +
test [eax] eax +
jmp loc_100404F  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
mov ebx 0BB8h +
push ebx  +
push esi  +
mov edi offset CriticalSection +
push 2  +
mov ecx edi +
call sub_1001760  +
test eax eax +
jz loc_1004229  +
push esi  +
push 1  +
lea eax [ebp+samDesired] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
call sub_10025E2  +
add esp 10h +
test eax eax +
jnz loc_1004229  +
push esi  +
call MsiCreateAndVerifyInstallerDirectory  +
cmp eax esi +
jnz loc_100716F  +
mov eax [ebp+var_4] +
push esi  +
push ebx  +
push esi  +
push 2  +
mov ecx edi +
mov [ebp+SecurityAttributes.nLength] 0Ch +
mov [ebp+SecurityAttributes.bInheritHandle] esi +
mov [ebp+SecurityAttributes.lpSecurityDescriptor] eax +
call sub_1001760  +
test eax eax +
jz loc_1004229  +
push esi  +
push ebx  +
push esi  +
push 2  +
pop ebx  +
push ebx  +
mov ecx edi +
mov [ebp+hKey] esi +
mov [ebp+phkResult] esi +
mov [ebp+dwDisposition] esi +
call sub_1001760  +
test eax eax +
jz loc_1004229  +
xor edi edi +
inc edi  +
push edi  +
mov [ebp+var_4] ebx +
call sub_10021B5  +
pop ecx  +
test al al +
jz loc_1004119  +
mov [ebp+var_4] edi +
lea eax [ebp+samDesired] +
push eax  +
mov [ebp+samDesired] 2001Fh +
call sub_1004283  +
pop ecx  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push [ebp+samDesired]  +
mov edi offset SubKey +
push esi  +
push esi  +
push esi  +
push edi  +
mov ebx 80000002h +
push ebx  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jnz loc_1007181  +
cmp [ebp+dwDisposition] 2 +
jnz loc_100417E  +
push [ebp+hKey]  +
call sub_100465A  +
pop ecx  +
test al al +
jz loc_10071A3  +
push [ebp+hKey]  +
call sub_100479C  +
pop ecx  +
test al al +
jz loc_100422D  +
push esi  +
push 0BB8h  +
push esi  +
push 2  +
mov ecx offset CriticalSection +
call sub_1001760  +
test eax eax +
jz loc_100422D  +
lea eax [ebp+samDesired] +
push eax  +
mov [ebp+samDesired] 2001Fh +
call sub_1004283  +
pop ecx  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push [ebp+samDesired]  +
push esi  +
push esi  +
push esi  +
push offset aSecure  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jnz loc_1007219  +
push [ebp+phkResult]  +
mov edi ds:RegCloseKey +
call edi  +
push [ebp+hKey]  +
call edi  +
push esi  +
push 0BB8h  +
push esi  +
push 2  +
pop esi  +
push esi  +
mov ecx offset CriticalSection +
call sub_1001760  +
test eax eax +
jz loc_1007224  +
push offset aSoftwareClasse  +
push ebx  +
call sub_10046E8  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1007224  +
cmp [ebp+var_4] esi +
jz loc_1004222  +
push [ebp+var_4]  +
call sub_10021CD  +
pop ecx  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
xor al al +
jmp loc_1004224  +
cmp [ebp+var_4] 2 +
jmp loc_1007193  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_100E058 0 +
jnz loc_1004EB7  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100E060  +
push offset aCoinitializeex  +
call sub_10042E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10042C5  +
push [ebp+arg_4]  +
push 0  +
call off_100E060  +
pop ebp  +
retn 8  +
mov eax 80004005h +
jmp loc_10042C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset dword_100FCAC +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_1004346  +
cmp byte_100FCA0 0 +
mov ecx dword_100FCA8 +
pop esi  +
jz loc_1004324  +
test ecx ecx +
jnz loc_1004324  +
push offset aOle32  +
call sub_1004361  +
pop ecx  +
mov ecx eax +
mov dword_100FCA8 ecx +
test ecx ecx +
jz loc_1007BCC  +
xor eax eax +
test ecx ecx +
jz loc_100433D  +
push [ebp+lpProcName]  +
push ecx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100433D  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
and dword_100FCAC 0 +
pop ebp  +
retn   +
push 0Ah  +
call ds:Sleep  +
jmp loc_10042EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push 208h  +
push eax  +
mov [ebp+Buffer] ax +
lea eax [ebp-20Eh] +
push eax  +
call memset  +
push 105h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
call sub_10043D1  +
add esp 18h +
pop esi  +
test al al +
jz loc_10043C8  +
lea eax [ebp+Buffer] +
push eax  +
call ds:LoadLibraryW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001D10  +
leave   +
retn   +
xor eax eax +
jmp loc_10043BC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpString] +
test edi edi +
jz loc_100440A  +
cmp word ptr [edi] 0 +
jz loc_100440A  +
push edi  +
call ds:lstrlenW  +
cmp eax 2 +
jl loc_100440A  +
movzx eax word ptr [edi] +
cmp ax 7Fh +
jnb loc_1004400  +
cmp word ptr [edi+2] 3Ah +
jz loc_100445A  +
cmp ax 5Ch +
jz loc_1007B9E  +
push ebx  +
mov ebx [ebp+uSize] +
push esi  +
mov esi [ebp+lpBuffer] +
push 0  +
push ebx  +
push esi  +
call sub_1002664  +
add esp 0Ch +
test eax eax +
jz loc_100445E  +
lea ecx [eax+2] +
cmp ecx ebx +
ja loc_100445E  +
push 5Ch  +
pop ecx  +
lea eax [esi+eax*2] +
push edi  +
mov [eax] cx +
push ebx  +
xor ecx ecx +
push esi  +
mov [eax+2] cx +
call sub_1004473  +
test eax eax +
jl loc_100445E  +
push offset a_dll  +
push ebx  +
push esi  +
call sub_1004473  +
test eax eax +
setnl al  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn   +
xor al al +
jmp loc_1004457  +
xor al al +
jmp loc_1004455  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 7FFFFFFFh +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
call sub_10044B4  +
test eax eax +
jl loc_10044A9  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push esi  +
sub edx eax +
lea ecx [edi+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1003AE7  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
mov ecx edx +
mov edi eax +
call sub_1002151  +
test eax eax +
jl loc_10044D7  +
mov eax [ebp+arg_0] +
call sub_10044E1  +
pop edi  +
pop ebp  +
retn 8  +
and dword ptr [edi] 0 +
jmp loc_10044D2  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1004514  +
nop   +
nop   +
cmp [esi] ax +
jz loc_10044FA  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_10044F0  +
test edx edx +
jz loc_1004514  +
pop esi  +
test edi edi +
jz nullsub_1  +
test eax eax +
jl loc_1004EAC  +
sub ecx edx +
mov [edi] ecx +
retn   +
mov eax 80070057h +
jmp loc_10044FE  +
***
push 70h  +
push ebx  +
push offset dword_100F4C0  +
call memset  +
add esp 0Ch +
mov byte_100E001 1 +
jmp loc_1003B89  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
movzx eax word ptr [eax] +
cmp ax 22h +
jz loc_1005060  +
cmp ax 2Fh +
jz loc_100457B  +
cmp ax 2Dh +
jz loc_100457B  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call sub_100458F  +
add esp 0Ch +
pop ebp  +
retn   +
cmp [ebp+arg_8] 0 +
jbe loc_1005071  +
jmp loc_1005075  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
movzx ecx word ptr [edx] +
test cx cx +
jnz loc_10045C6  +
mov eax [eax] +
sub eax edx +
sar eax 1 +
cmp eax [ebp+arg_8] +
jnb loc_10045D2  +
test eax eax +
jl loc_10045D2  +
push esi  +
mov esi [ebp+arg_4] +
jnz loc_1005048  +
mov eax [esi] +
xor ecx ecx +
mov [eax] cx +
mov al 1 +
pop esi  +
pop ebp  +
retn   +
cmp cx 20h +
jnz loc_1005031  +
jmp loc_10045A1  +
xor al al +
pop ebp  +
retn   +
***
call sub_1004643  +
cmp eax 6 +
jb locret_100460E  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz locret_100460E  +
push offset aHeapsetinforma  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz locret_100460E  +
push 0  +
push 0  +
push 1  +
push 0  +
call eax  +
retn   +
***
call ds:GetVersion  +
test eax eax +
js loc_1005083  +
movzx eax al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:RegGetKeySecurity +
push edi  +
mov edi [ebp+hKey] +
push 40h  +
pop eax  +
mov [ebp+var_4C] eax +
mov [ebp+dwBytes] eax +
lea ecx [ebp+pSecurityDescriptor] +
lea eax [ebp+dwBytes] +
push eax  +
mov eax ecx +
push eax  +
push 1  +
push edi  +
mov [ebp+var_50] ecx +
call esi  +
xor ebx ebx +
cmp eax ebx +
jnz loc_10055E0  +
push [ebp+var_50]  +
call sub_10029A7  +
mov bl al +
pop ecx  +
lea ecx [ebp+var_50] +
call sub_10046C6  +
mov al bl +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 40h +
jg loc_1005148  +
lea eax [esi+0Ch] +
mov dword ptr [esi+4] 40h +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 81Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+lpSubKey] +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_808] +
mov [ebp+var_814] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor ebx ebx +
push ebx  +
push esi  +
push edi  +
mov [ebp+hKey] ebx +
mov [ebp+var_810] 401h +
call sub_1002171  +
add esp 14h +
mov [ebp+Strings] eax +
cmp eax ebx +
jnz loc_10059E2  +
push [ebp+hKey]  +
call sub_100465A  +
pop ecx  +
test al al +
jz loc_1005A2E  +
push [ebp+hKey]  +
call sub_100479C  +
pop ecx  +
test al al +
jz loc_100477B  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov bl 1 +
lea ecx [ebp+var_814] +
call sub_10048A9  +
mov al bl +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A40h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+dwIndex] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+hMem] +
call sub_10024B3  +
mov esi ds:RegEnumKeyW +
lea eax [ebp+var_A20] +
mov [ebp+var_A2C] eax +
mov eax [ebp+cbName] +
push eax  +
push [ebp+hMem]  +
mov [ebp+var_A28] 401h +
push 0  +
push edi  +
mov [ebp+var_A38] eax +
call esi  +
test eax eax +
jnz loc_100486D  +
mov ebx ds:RegCloseKey +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push [ebp+hMem]  +
push edi  +
call sub_1002171  +
add esp 14h +
mov [ebp+var_A40] eax +
test eax eax +
jnz loc_1005762  +
push [ebp+hKey]  +
call sub_100465A  +
pop ecx  +
test al al +
jz loc_10056DA  +
inc [ebp+dwIndex]  +
push [ebp+hKey]  +
call ebx  +
push [ebp+var_A38]  +
push [ebp+hMem]  +
push [ebp+dwIndex]  +
push edi  +
call esi  +
test eax eax +
jz loc_1004807  +
cmp eax 103h +
jnz loc_100575A  +
lea ecx [ebp+var_A2C] +
call sub_10048A9  +
cmp [ebp+cbName] 105h +
jg loc_10057C2  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 401h +
jg loc_1005155  +
lea eax [esi+0Ch] +
mov dword ptr [esi+4] 401h +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push offset loc_100C1AF  +
mov esi offset CriticalSection +
push offset ServiceName  +
mov ecx esi +
call sub_1002638  +
test eax eax +
jz loc_1004944  +
push ebx  +
push edi  +
xor ebx ebx +
push ebx  +
mov edi 0BB8h +
push edi  +
push ebx  +
push 2  +
mov ecx esi +
call sub_1001760  +
test eax eax +
jz loc_1004942  +
push offset idThread  +
push ebx  +
push ebx  +
push (offset dword_1001338+3)  +
push ebx  +
push ebx  +
call ds:CreateThread  +
cmp eax ebx +
jz loc_1007A76  +
push eax  +
mov ecx offset dword_100E05C +
call sub_100494D  +
push 1  +
push offset loc_100A2D3  +
mov dword_100E018 2 +
call ds:SetConsoleCtrlHandler  +
pop edi  +
pop ebx  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jnz loc_1004ED2  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset loc_100C26C  +
push offset off_100E068  +
push offset aInitcommoncont  +
call sub_10049AE  +
add esp 0Ch +
call eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi offset dword_100FC34 +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_1004A14  +
cmp byte_100FC0A 0 +
mov esi [ebp+arg_4] +
mov eax dword_100FC30 +
mov [ebp+var_1] 0 +
jz loc_1004A1E  +
test eax eax +
jnz loc_10049F4  +
lea eax [ebp-1] +
push eax  +
call sub_1004A2C  +
pop ecx  +
mov dword_100FC30 eax +
test eax eax +
jz loc_1007BDF  +
push [ebp+lpProcName]  +
push eax  +
call ds:GetProcAddress  +
mov [esi] eax +
test eax eax +
jz loc_1007BED  +
and dword_100FC34 0 +
mov eax [esi] +
pop esi  +
leave   +
retn   +
push 0Ah  +
call ds:Sleep  +
jmp loc_10049BA  +
test eax eax +
jnz loc_10049F4  +
jmp loc_1007BED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push 114h  +
mov byte ptr [eax] 0 +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1007BBC  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jbe loc_1007BAD  +
push offset aComctl32  +
call ds:LoadLibraryW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001D10  +
leave   +
retn   +
***
jz loc_1007C39  +
call sub_1004B69  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
push offset loc_100CD13  +
call sub_1004B92  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1004BAE  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_1001D8C  +
mov eax dword_100E054 +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007C4A  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_1001A56  +
retn   +
***
mov ecx offset CriticalSection +
call sub_1004C1C  +
push offset loc_100CD2A  +
call sub_1004B92  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call ds:InitializeCriticalSection  +
lea edx [esi+18h] +
push 7  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
and [esi+28h] eax +
and [esi+34h] eax +
pop edi  +
mov eax esi +
mov dword ptr [edx] 10h +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1004C79  +
push eax  +
call sub_1004C83  +
test eax eax +
jz loc_1004C79  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1007CBF  +
push 2  +
pop eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_1001D8C  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1004CD2  +
cmp ecx 0FFFFFFFFh +
jz loc_1004CD2  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1004CCB  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1004CCB  +
cmp edx 10000000h +
jnb loc_1004CCB  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1007CB5  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1001A56  +
retn 4  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
push edi  +
mov ecx [esp+arg_0] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
mov ebx offset unk_100FE40 +
retn   +
***
mov [ecx] edi +
jmp loc_1003B2C  +
***
mov edx [ebp+arg_0] +
mov eax [edx] +
mov ecx 100h +
test eax ecx +
jnz loc_1004295  +
or eax ecx +
mov [edx] eax +
jmp loc_1004295  +
***
push eax  +
call ds:CloseHandle  +
jmp loc_1004960  +
***
push [ebp+hObject]  +
call ds:CloseHandle  +
xor al al +
jmp loc_1003384  +
***
xor al al +
mov [esi] edi +
jmp loc_1003BDA  +
xor al al +
pop ebp  +
retn   +
***
xor ecx ecx +
mov [eax] cx +
jmp loc_100222C  +
mov eax [ebp+VersionInformation.dwMajorVersion] +
mov [esi] eax +
jmp loc_100224F  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
mov [edi] eax +
jmp loc_1002257  +
mov eax [ebp+VersionInformation.dwBuildNumber] +
and eax 0FFFFh +
mov [ebx] eax +
jmp loc_100225F  +
movzx ecx [ebp+var_C] +
mov [eax] ecx +
jmp loc_100226D  +
mov cl [ebp+var_6] +
mov [eax] cl +
jmp loc_100227B  +
mov byte ptr [esi] 1 +
jmp loc_10022BC  +
***
call ds:GetLastError  +
jmp loc_1002ACA  +
cmp [ebp+pSid] ebx +
jz loc_1004F67  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov eax 0EAh +
jmp loc_1002ACA  +
***
call ds:GetLastError  +
jmp loc_1003CAA  +
cmp [ebp+pSid] ebx +
jz loc_1004F8A  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov eax 0EAh +
jmp loc_1003CAA  +
***
push eax  +
call ds:FreeSid  +
jmp loc_10032B0  +
***
movzx ecx [ebp+Buffer] +
lea eax [ebp+Buffer] +
jmp loc_1004FC2  +
xor edx edx +
and ecx 1Fh +
inc edx  +
shl edx cl +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
or dword_100FE50 edx +
test ecx ecx +
jnz loc_1004FAF  +
mov al 1 +
jmp loc_100231D  +
***
xor eax eax +
leave   +
retn   +
***
xor al al +
pop ebp  +
retn   +
***
add edi 2 +
mov eax edi +
mov [esi] edi +
cmp [eax] bx +
jz loc_1002908  +
jmp loc_10028F4  +
mov [ebp+var_1] bl +
jmp loc_1002922  +
cmp [ebp+var_1] 0 +
jz loc_10028C3  +
test cl cl +
jz loc_100500F  +
cmp byte ptr [ebp+arg_0+3] 0 +
setz al  +
mov byte ptr [ebp+arg_0+3] al +
jmp loc_1002955  +
test al al +
jnz loc_10028B4  +
jmp loc_1002955  +
mov eax [esi] +
cmp [eax] bx +
jz loc_1002972  +
add eax 2 +
mov [esi] eax +
jmp loc_1002972  +
***
cmp cx 9 +
jz loc_10045A1  +
add dword ptr [eax] 2 +
mov ecx [eax] +
movzx ecx word ptr [ecx] +
jmp loc_100459C  +
push edi  +
lea edi [eax+eax] +
push edi  +
push edx  +
push dword ptr [esi]  +
call memcpy  +
add esp 0Ch +
add [esi] edi +
pop edi  +
jmp loc_10045BA  +
***
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call sub_1008953  +
jmp loc_1004576  +
xor al al +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
mov eax [eax] +
xor ecx ecx +
mov [eax] cx +
mov al 1 +
pop ebp  +
retn   +
***
xor eax eax +
retn   +
***
lea eax [ebx+ebx] +
push eax  +
push 0  +
call ds:GlobalAlloc  +
mov edi eax +
jmp loc_10023C9  +
xor al al +
jmp loc_10023F3  +
mov eax [esi+4] +
cmp ebx eax +
jge loc_10050A9  +
mov eax ebx +
test eax eax +
jz loc_10023DF  +
mov ecx [esi] +
dec eax  +
mov cx [ecx+eax*2] +
mov [edi+eax*2] cx +
jz loc_10023DF  +
jmp loc_10050B1  +
push eax  +
call ds:GlobalFree  +
jmp loc_10023EC  +
***
push ecx  +
call sub_100881F  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_1002459  +
and [esi+4] eax +
jmp loc_1002459  +
***
lea eax [ebx+ebx] +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov edi eax +
jmp loc_1002481  +
xor al al +
jmp loc_10024A7  +
cmp [esi] edi +
jz loc_1002493  +
mov eax [esi+4] +
cmp ebx eax +
jge loc_1005114  +
mov eax ebx +
test eax eax +
jz loc_1002493  +
mov ecx [esi] +
dec eax  +
mov cx [ecx+eax*2] +
mov [edi+eax*2] cx +
jz loc_1002493  +
jmp loc_100511C  +
push eax  +
call ds:GlobalFree  +
jmp loc_10024A0  +
***
push dword ptr [esi]  +
call ds:GlobalFree  +
jmp loc_1001DF8  +
***
push dword ptr [esi]  +
call ds:GlobalFree  +
jmp loc_10046D5  +
***
push dword ptr [esi]  +
call ds:GlobalFree  +
jmp loc_10048BB  +
***
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_1003ADA  +
***
test edi edi +
jz loc_1002507  +
and dword ptr [edi] 0 +
jmp loc_1002507  +
***
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002596  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov eax 80070057h +
jmp loc_1001904  +
***
mov eax 80040110h +
jmp loc_1001904  +
***
mov esi [ebp+10h] +
mov edi eax +
shl edi 4 +
push 4  +
add edi offset rclsid +
pop ecx  +
xor eax eax +
cmps   +
jz loc_10018A2  +
mov eax 80004002h +
jmp loc_1001902  +
***
and dword ptr [ebx] 0 +
jmp loc_10051D4  +
mov [ebx] edi +
push esi  +
call ds:InterlockedDecrement  +
mov eax 80080008h +
jmp loc_1001902  +
***
cmp dword_100E024 edi +
jz loc_1005218  +
call sub_10012E0  +
test al al +
jnz loc_1005218  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp-8] +
push eax  +
push dword_100E024  +
mov dword ptr [ebp-8] 9A5F4400h +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call off_100E070  +
mov eax 8007000Eh +
jmp loc_1001902  +
***
mov eax 65Bh +
jmp loc_1003A8F  +
push 0Eh  +
pop eax  +
jmp loc_1003A8D  +
***
push dword ptr [esi]  +
call ds:GlobalFree  +
jmp loc_1001E1A  +
***
xor edi edi +
jmp loc_10017DD  +
mov dword ptr [esi+24h] 42Ah +
mov [esi+28h] eax +
jmp loc_10017B3  +
call ds:GetLastError  +
push eax  +
push offset aSetservicestat  +
call sub_100B355  +
pop ecx  +
pop ecx  +
jmp loc_10017DD  +
***
call ds:GetLastError  +
push eax  +
push offset aRegisterservic  +
call sub_100B355  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_100265B  +
***
call ds:GetLastError  +
push eax  +
push offset aFisownersystem  +
call sub_100B355  +
pop ecx  +
pop ecx  +
xor al al +
leave   +
retn   +
push eax  +
push offset aFisownersyst_0  +
jmp loc_1005312  +
push eax  +
push offset aFisownersyst_1  +
jmp loc_1005341  +
lea eax [ebp+pSid2] +
push eax  +
call sub_1008036  +
pop ecx  +
test eax eax +
jz loc_100534F  +
push eax  +
push offset aFisownersyst_2  +
call sub_100B355  +
pop ecx  +
pop ecx  +
xor al al +
jmp loc_10029F9  +
push [ebp+pSid2]  +
push [ebp+pSid1]  +
call esi  +
test eax eax +
setnz al  +
jmp loc_10029F9  +
***
cmp eax 7Ah +
jnz loc_1005610  +
push ebx  +
push [ebp+dwBytes]  +
lea ecx [ebp+var_50] +
call sub_1008C3A  +
test al al +
jnz loc_1005604  +
lea ecx [ebp+var_50] +
call sub_10046C6  +
xor al al +
jmp loc_10046B2  +
lea eax [ebp+dwBytes] +
push eax  +
push [ebp+var_50]  +
push 1  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_100469D  +
push eax  +
push offset aFiskeylocalsys  +
call sub_100B355  +
pop ecx  +
jmp loc_10046A7  +
***
push [ebp+hKey]  +
call ebx  +
mov eax [ebp+hMem] +
mov [ebp+Strings] eax +
xor eax eax +
push eax  +
lea ecx [ebp+Strings] +
push ecx  +
push eax  +
push 1  +
push eax  +
push 403h  +
push eax  +
push 2  +
call sub_10087BC  +
push [ebp+hMem]  +
push offset aPurgeuserowned  +
push [ebp+var_A28]  +
push [ebp+var_A2C]  +
call sub_1008F12  +
add esp 30h +
test eax eax +
jl loc_100573B  +
push 0  +
push [ebp+var_A2C]  +
call sub_100B355  +
pop ecx  +
pop ecx  +
push [ebp+hMem]  +
push edi  +
call sub_100BC53  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100484C  +
push 0  +
push offset aPurgeuserown_0  +
jmp loc_1005791  +
push eax  +
push offset aPurgeuserown_1  +
jmp loc_1005791  +
push [ebp+hMem]  +
push offset aPurgeuserown_2  +
push [ebp+var_A28]  +
push [ebp+var_A2C]  +
call sub_1008F12  +
add esp 10h +
test eax eax +
jl loc_1005798  +
push [ebp+var_A40]  +
push [ebp+var_A2C]  +
call sub_100B355  +
pop ecx  +
pop ecx  +
lea ecx [ebp+var_A2C] +
call sub_10048A9  +
cmp [ebp+cbName] 105h +
jle loc_10057BB  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
xor al al +
jmp loc_1004895  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
jmp loc_1004893  +
***
cmp eax 2 +
jz loc_1004779  +
push esi  +
push offset aPurgeuserown_3  +
push [ebp+var_810]  +
push [ebp+var_814]  +
call sub_1008F12  +
add esp 10h +
test eax eax +
jl loc_1005A1C  +
push [ebp+Strings]  +
push [ebp+var_814]  +
call sub_100B355  +
pop ecx  +
pop ecx  +
lea ecx [ebp+var_814] +
call sub_10048A9  +
xor al al +
jmp loc_1004788  +
push ebx  +
lea eax [ebp+Strings] +
push eax  +
push ebx  +
push 1  +
push ebx  +
push 403h  +
push ebx  +
push 2  +
mov [ebp+Strings] esi +
call sub_10087BC  +
push esi  +
push offset aPurgeuserown_4  +
push [ebp+var_810]  +
push [ebp+var_814]  +
call sub_1008F12  +
add esp 30h +
test eax eax +
jl loc_1005A79  +
push ebx  +
push [ebp+var_814]  +
call sub_100B355  +
pop ecx  +
pop ecx  +
push esi  +
push edi  +
call sub_100BC53  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100476D  +
push ebx  +
push offset aPurgeuserown_5  +
jmp loc_1005A15  +
***
inc ebx  +
inc ebx  +
jmp loc_1003491  +
cmp ax 2Dh +
jz loc_1003565  +
jmp loc_100357D  +
lea eax [ebp+TokenHandle] +
add ebx 4 +
push eax  +
mov [ebp+TokenHandle] ebx +
call sub_1002389  +
lea eax [ebp+ValueName] +
mov [ebp+var_2384] eax +
lea eax [ebp+var_2384] +
mov [esp+10h+var_10] 400h +
push eax  +
lea eax [ebp+TokenHandle] +
push eax  +
call sub_1004547  +
add esp 0Ch +
test al al +
jnz loc_1005CB9  +
call sub_100BE15  +
mov esi 667h +
jmp loc_1001CE0  +
mov eax [ebp+var_2164] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+samDesired] +
push eax  +
mov [ebp+cchCount2] edi +
mov [ebp+samDesired] 20019h +
call sub_1004283  +
pop ecx  +
lea eax [ebp+hKey] +
push eax  +
push [ebp+samDesired]  +
push edi  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_1005DC8  +
mov esi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+cchCount2] +
push eax  +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call esi  +
mov ebx eax +
cmp ebx 0EAh +
jnz loc_1005D81  +
mov eax [ebp+cbData] +
push edi  +
shr eax 1 +
push eax  +
lea ecx [ebp+lpData] +
call sub_1002465  +
test al al +
jz loc_1003963  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+cchCount2] +
push eax  +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call esi  +
mov ebx eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp ebx edi +
jnz loc_1005DC8  +
cmp [ebp+cchCount2] 1 +
jnz loc_1005DC8  +
mov eax [ebp+lpData] +
mov [ebp+TokenHandle] eax +
mov eax [ebp+TokenHandle] +
movzx esi word ptr [eax] +
cmp si 20h +
jz loc_1005DBF  +
cmp si 9 +
jnz loc_1001A8D  +
add [ebp+TokenHandle] 2 +
jmp loc_1005DA6  +
xor esi esi +
jmp loc_1001CE0  +
mov esi 65Bh +
jmp loc_1001CE0  +
push [ebp+cchCount2]  +
dec edi  +
push offset String2  +
push edi  +
add esi 2 +
push esi  +
push 1  +
push 409h  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_10036DA  +
lea eax [ebp+var_AC] +
mov [ebp+var_78] eax +
mov [ebp+var_74] 0 +
lea eax [ebp+var_CC] +
mov [ebp+var_68] 0 +
jmp loc_1003710  +
mov eax [ebp+var_23A0] +
imul eax eax +
movzx ecx [ebp+eax+var_74] +
push ecx  +
push [ebp+eax+var_78]  +
lea eax [ebp+lpData] +
push eax  +
mov [ebp+var_2160] 104h +
call sub_1009904  +
add esp 0Ch +
jmp loc_10039DF  +
add [ebp+TokenHandle] 2 +
mov eax [ebp+TokenHandle] +
jmp loc_1001A76  +
cmp si 2Dh +
jz loc_1001AAC  +
lea ecx [ebp+hMem] +
call sub_1008CA9  +
lea eax [ebp+hMem] +
push eax  +
lea eax [ebp+TokenHandle] +
push eax  +
mov [ebp+var_2374] edi +
call sub_100B7E6  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006095  +
push [ebp+hMem]  +
lea eax [ebp+var_1208] +
push eax  +
call sub_100A5BD  +
lea eax [ebp+TokenHandle] +
push eax  +
call sub_1002389  +
add esp 0Ch +
cmp [ebp+var_2378] edi +
movzx esi ax +
jle loc_1001C34  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
jmp loc_1001C34  +
cmp ax 9 +
jz loc_1001B03  +
xor ebx ebx +
inc ebx  +
jmp loc_1001B05  +
test ebx ebx +
jz loc_1001B28  +
jmp loc_100602A  +
push 0  +
push [ebp+TokenHandle]  +
call ds:lstrlenW  +
add eax 0Ah +
push eax  +
lea ecx [ebp+var_1A18] +
call sub_1008B11  +
test al al +
jz loc_10060BD  +
mov eax [ebp+var_1A18] +
push [ebp+var_1A14]  +
mov [ebp+pSid2] eax +
lea eax [ebp+pSid2] +
jmp loc_1001B51  +
lea ecx [ebp+var_1208] +
mov [ebp+var_2384] ecx +
lea ecx [ebp+ValueName] +
mov [ebp+var_2390] ecx +
lea ecx [ebp+var_1208] +
mov [ebp+lpString] ecx +
cmp ax 71h +
jz loc_1001BA4  +
push 400h  +
lea eax [ebp+var_2384] +
push eax  +
lea eax [ebp+TokenHandle] +
push eax  +
call sub_1004547  +
add esp 0Ch +
test al al +
jz loc_1005CAA  +
lea eax [ebp+TokenHandle] +
push eax  +
call sub_1002389  +
pop ecx  +
movzx esi ax +
jmp loc_1001BA4  +
cmp ax 7Ah +
ja loc_1001BB1  +
push [ebp+lpString]  +
sub edi offset aRuveh?ijdqxfat +
push [ebp+var_2390]  +
sar edi 1 +
call off_100FC48[edi*4]  +
jmp loc_1006020  +
cmp ax 50h +
jnz loc_1006007  +
cmp word ptr [ecx] 41h +
jnz loc_1006007  +
lea eax [ebp+String] +
push eax  +
push 41h  +
call sub_1009B61  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100602A  +
push 1Eh  +
push [ebp+var_2390]  +
lea eax [ebp+var_108] +
push 1Eh  +
push eax  +
mov dword_100E034 edi +
call sub_1003A9E  +
jmp loc_1001C05  +
cmp word ptr [ecx] 50h +
jnz loc_100602A  +
cmp ax 41h +
jnz loc_100602A  +
push [ebp+lpString]  +
push 41h  +
call sub_1009B61  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001C05  +
call sub_100BE15  +
mov [ebp+var_2398] 667h +
call sub_10045DB  +
cmp [ebp+var_2398] 0 +
jnz loc_1001CDA  +
cmp dword_100E034 0 +
jnz loc_1006154  +
call sub_100BE15  +
mov esi 667h +
mov [ebp+var_2398] esi +
xor edi edi +
cmp esi edi +
jnz loc_1001CDA  +
cmp [ebp+var_23B4] edi +
jz loc_1006156  +
jmp loc_1006162  +
cmp ax 45h +
jnz loc_10060CC  +
mov dword_100E01C 1 +
jmp loc_100606A  +
call sub_100BE15  +
cmp [ebp+var_2378] edi +
mov [ebp+var_2398] 667h +
jle loc_1006039  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
jmp loc_1006039  +
mov [ebp+var_2398] 0Eh +
jmp loc_1006039  +
mov [ebp+var_23B4] 1 +
jmp loc_100606A  +
cmp ax 52h +
jz loc_1006148  +
cmp ax 55h +
jz loc_1006148  +
mov eax 4EBh +
cmp esi eax +
jg loc_100611C  +
jz loc_100606A  +
cmp esi 0FFFFFFFEh +
jl loc_1006148  +
cmp esi edi +
jl loc_1001CDA  +
cmp esi 1 +
jle loc_1006148  +
cmp esi 3 +
jle loc_100610F  +
cmp esi 7Bh +
jnz loc_1006148  +
mov esi 653h +
mov [ebp+var_2398] esi +
jmp loc_1006148  +
cmp esi 642h +
jl loc_1006148  +
cmp esi 644h +
jle loc_100606A  +
cmp esi 669h +
jz loc_100606A  +
cmp esi 0BC2h +
jz loc_100606A  +
push esi  +
call sub_100B561  +
pop ecx  +
jmp loc_100606A  +
xor edi edi +
cmp dword_100E01C edi +
jz loc_1001CDA  +
push edi  +
cmp dword_100E01C edi +
jz loc_1006174  +
push edi  +
call off_100E060  +
jmp loc_1006185  +
call ds:CoInitialize  +
push offset aOleaut32_dll  +
call sub_1004361  +
pop ecx  +
cmp [ebp+var_23B4] edi +
jz loc_10061D5  +
cmp dword_100E01C edi +
jnz loc_10061E4  +
xor ebx ebx +
xor esi esi +
mov edi offset rclsid +
inc ebx  +
lea eax dwRegister[esi] +
push eax  +
push ebx  +
push 4  +
lea eax dword_100E038[esi] +
push eax  +
push edi  +
call ds:CoRegisterClassObject  +
test eax eax +
jnz loc_10061CD  +
add edi 10h +
add esi 4 +
cmp edi offset aRuveh?ijdqxfat +
jl loc_100619F  +
xor edi edi +
jmp loc_10061D8  +
mov [ebp+var_23E0] ebx +
jmp loc_10061C9  +
xor ebx ebx +
inc ebx  +
cmp dword_100E01C edi +
jz loc_1006C69  +
mov esi [ebp+TokenHandle] +
xor ebx ebx +
xor eax eax +
lea edi [ebp+var_9C] +
stos   +
stos   +
stos   +
stos   +
movzx eax word ptr [esi] +
cmp ax 30h +
jb loc_1006222  +
cmp ax 39h +
ja loc_1006222  +
mov ecx ebx +
and ecx 80000001h +
jns loc_1006216  +
dec ecx  +
or ecx 0FFFFFFFEh +
inc ecx  +
neg ecx  +
movzx eax ax +
sbb ecx ecx +
sub eax 30h +
jmp loc_1006247  +
cmp ax 41h +
jb loc_100626E  +
cmp ax 46h +
ja loc_100626E  +
mov ecx ebx +
and ecx 80000001h +
jns loc_100623D  +
dec ecx  +
or ecx 0FFFFFFFEh +
inc ecx  +
neg ecx  +
movzx eax ax +
sbb ecx ecx +
sub eax 37h +
and ecx 0FFFFFFF1h +
add ecx 10h +
imul ecx eax +
cmp ebx 20h +
jge loc_1006C5F  +
mov eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
lea eax [ebp+eax+var_9C] +
or [eax] cl +
inc ebx  +
inc esi  +
inc esi  +
jmp loc_10061F8  +
cmp ebx 20h +
jnz loc_1006C5F  +
cmp word ptr [esi] 0 +
mov byte ptr [ebp+var_23AC] 0 +
mov [ebp+var_2391] 0 +
mov [ebp+var_2385] 0 +
mov byte ptr [ebp+var_23C8] 0 +
jz loc_100629B  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax 43h +
jnz loc_10063A7  +
mov byte ptr [ebp+var_23AC] 1 +
xor ebx ebx +
or [ebp+TokenHandle] 0FFFFFFFFh +
lea eax [ebp+TokenHandle] +
push eax  +
push 1  +
push 2  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
mov edi ds:GetLastError +
test eax eax +
jnz loc_10062EE  +
or [ebp+TokenHandle] 0FFFFFFFFh +
call edi  +
cmp eax 3F0h +
jnz loc_1006C5F  +
cmp [ebp+var_2391] 0 +
jnz loc_10062FD  +
call ds:RevertToSelf  +
mov esi 80000001h +
push esi  +
call ds:RegCloseKey  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
call ds:RegEnumKeyW  +
cmp [ebp+var_2391] 0 +
jz loc_1006322  +
call ds:RevertToSelf  +
lea eax [ebp+hObject] +
push eax  +
xor esi esi +
push 8  +
mov [ebp+var_2384] esi +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1006434  +
lea eax [ebp+pSid2] +
push eax  +
call sub_1003C62  +
pop ecx  +
test eax eax +
jnz loc_1006396  +
lea eax [ebp+ReturnLength] +
push eax  +
push 50h  +
lea eax [ebp+pSid1] +
push eax  +
push 1  +
push [ebp+hObject]  +
call ds:GetTokenInformation  +
test eax eax +
jz loc_1006396  +
push [ebp+pSid2]  +
push [ebp+pSid1]  +
call ds:EqualSid  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 2 +
mov [ebp+var_2384] esi +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_100646D  +
cmp ax 55h +
jnz loc_10063C0  +
mov byte ptr [ebp+var_23AC] 1 +
mov [ebp+var_2385] 1 +
jmp loc_10062AF  +
cmp ax 41h +
jnz loc_10063D2  +
mov byte ptr [ebp+var_23C8] 1 +
jmp loc_10062AF  +
cmp ax 4Dh +
jz loc_10063E3  +
cmp ax 45h +
jz loc_10063EA  +
jmp loc_10062AF  +
mov [ebp+var_2391] 1 +
add esi 4 +
push esi  +
xor ebx ebx +
push ebx  +
push 100000h  +
call ds:OpenEventW  +
mov esi eax +
cmp esi ebx +
jz loc_1006C4C  +
cmp esi 0FFFFFFFFh +
jz loc_1006C4C  +
push 0FFFFFFFFh  +
push esi  +
call ds:WaitForSingleObject  +
push esi  +
mov edi eax +
call ds:CloseHandle  +
cmp edi ebx +
jz loc_10062B1  +
push edi  +
push offset aServermainCaWa  +
jmp loc_1006C58  +
call edi  +
mov edi eax +
xor eax eax +
push 206h  +
mov [ebp+var_2370] ax +
lea eax [ebp-236Eh] +
push ebx  +
push eax  +
call memset  +
push edi  +
push offset aOpenprocesstok  +
lea eax [ebp+var_2370] +
push 104h  +
push eax  +
call sub_1008F12  +
add esp 1Ch +
cmp [ebp+var_2385] 0 +
jz loc_100648C  +
cmp esi 1 +
jnz loc_100647F  +
push 7  +
jmp loc_1006485  +
cmp esi ebx +
jnz loc_10064A1  +
push 6  +
pop esi  +
mov [ebp+var_2384] esi +
cmp byte ptr [ebp+var_23C8] 0 +
push 5  +
pop eax  +
jz loc_10064BD  +
cmp esi ebx +
jnz loc_10064AC  +
push 4  +
pop esi  +
jmp loc_10064B7  +
push ebx  +
push offset aServermainCaEr  +
jmp loc_1006C58  +
cmp esi 1 +
jnz loc_1006C5F  +
mov esi eax +
mov [ebp+var_2384] esi +
mov edi 100h +
mov [ebp+dwBytes] edi +
cmp esi ebx +
jz loc_10064E4  +
cmp esi 1 +
jz loc_10064E4  +
cmp esi 4 +
jz loc_10064E4  +
cmp esi eax +
jz loc_10064E4  +
cmp esi 6 +
jz loc_10064E4  +
cmp esi 7 +
jnz loc_10064E7  +
push 4  +
pop eax  +
push ebx  +
push eax  +
lea eax [ebp+dwBytes] +
push eax  +
lea eax [ebp+pSelfRelativeSecurityDescriptor] +
push eax  +
call sub_1002B95  +
mov esi eax +
add esp 10h +
cmp esi ebx +
jz loc_1006523  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_1001CE0  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
jmp loc_1001CE0  +
mov eax [ebp+dwBytes] +
push eax  +
lea ecx [ebp+pAbsoluteSecurityDescriptor] +
mov [ebp+dwAbsoluteSecurityDescriptorSize] eax +
mov [ebp+dwDaclSize] eax +
mov [ebp+dwSaclSize] eax +
mov [ebp+dwOwnerSize] eax +
mov [ebp+dwPrimaryGroupSize] eax +
call sub_1008CD5  +
push [ebp+dwDaclSize]  +
lea ecx [ebp+pDacl] +
call sub_1008CD5  +
push [ebp+dwSaclSize]  +
lea ecx [ebp+pSacl] +
call sub_1008CD5  +
push [ebp+dwOwnerSize]  +
lea ecx [ebp+pOwner] +
call sub_1008CD5  +
push [ebp+dwPrimaryGroupSize]  +
lea ecx [ebp+pPrimaryGroup] +
call sub_1008CD5  +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push [ebp+pPrimaryGroup]  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push [ebp+pOwner]  +
lea eax [ebp+dwSaclSize] +
push eax  +
push [ebp+pSacl]  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push [ebp+pAbsoluteSecurityDescriptor]  +
lea eax [ebp+pSelfRelativeSecurityDescriptor] +
push eax  +
call ds:MakeAbsoluteSD  +
test eax eax +
jnz loc_1006677  +
call ds:GetLastError  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
mov esi eax +
jz loc_100660A  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
cmp [ebp+var_1E44] edi +
jle loc_100661E  +
push [ebp+pPrimaryGroup]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1C2C] edi +
jle loc_1006632  +
push [ebp+pOwner]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1D38] edi +
jle loc_1006646  +
push [ebp+pSacl]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1F50] edi +
jle loc_100665A  +
push [ebp+pDacl]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1B20] edi +
jle loc_1001CE0  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call sub_1008836  +
pop ecx  +
jmp loc_1001CE0  +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push 3  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call off_100E064  +
mov esi eax +
cmp esi ebx +
jz loc_1006726  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_10066AD  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
push esi  +
push offset aServermainCa_1  +
call sub_100B355  +
pop ecx  +
pop ecx  +
cmp [ebp+var_1E44] edi +
jle loc_10066CE  +
push [ebp+pPrimaryGroup]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1C2C] edi +
jle loc_10066E2  +
push [ebp+pOwner]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1D38] edi +
jle loc_10066F6  +
push [ebp+pSacl]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1F50] edi +
jle loc_100670A  +
push [ebp+pDacl]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1B20] edi +
jle loc_1006C5F  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call sub_1008836  +
jmp loc_1006C5E  +
mov esi ds:CreateEventW +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call esi  +
mov [ebp+samDesired] eax +
cmp eax ebx +
jnz loc_100675B  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_10066BA  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
jmp loc_10066BA  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+var_23CC] eax +
cmp eax ebx +
jz loc_100673D  +
xor esi esi +
mov [ebp+lpString] esi +
mov [ebp+var_238C] esi +
mov [ebp+var_2390] esi +
call sub_100B941  +
mov ebx eax +
cmp ebx esi +
jnz loc_10067D5  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_100679F  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
push esi  +
push offset aServermainCaCo  +
call sub_100B355  +
mov eax [ebp+var_2390] +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_10067BC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_238C] +
cmp eax esi +
jz loc_10066BA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10066BA  +
mov [ebp+dwProcessId] esi +
mov [ebp+pSid2] esi +
call sub_10080E5  +
mov esi eax +
test esi esi +
jnz loc_1006821  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_1006801  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp+var_2390] +
test eax eax +
jz loc_1006817  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_238C] +
test eax eax +
jmp loc_10067C4  +
mov eax [esi] +
lea ecx [ebp+var_238C] +
mov [ebp+var_23A0] eax +
call sub_1008D1D  +
push eax  +
mov eax [ebp+var_23A0] +
push offset dword_1006CB8  +
push esi  +
call dword ptr [eax]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax [ebp+var_2384] +
mov [ebp+var_23BC] eax +
mov eax [ebp+var_238C] +
mov esi [ebx] +
mov [ebp+var_23A0] eax +
lea eax [ebp+pSid2] +
push eax  +
lea ecx [ebp+var_2390] +
add esi 38h +
call sub_1008D1D  +
push eax  +
lea eax [ebp+dwProcessId] +
push eax  +
push [ebp+var_23A0]  +
lea eax [ebp+var_9C] +
push 10h  +
push eax  +
lea eax [ebp+var_23BC] +
push eax  +
push ebx  +
call dword ptr [esi]  +
test eax eax +
jz loc_10068C5  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_10068B2  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
push 0  +
push offset aServermainCaPr  +
call sub_100B355  +
pop ecx  +
pop ecx  +
jmp loc_1006801  +
push [ebp+dwProcessId]  +
push 0  +
push 100000h  +
call ds:OpenProcess  +
mov [ebp+var_23A0] eax +
test eax eax +
jnz loc_1006905  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_10068F7  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
call ds:GetLastError  +
push eax  +
push offset aServermainCa_0  +
jmp loc_10068B9  +
push [ebp+var_2390]  +
call off_100FE14  +
test eax eax +
jz loc_10067EC  +
mov eax [ebp+var_238C] +
mov ecx [eax] +
lea edx [ebp+lpString] +
push edx  +
push offset dword_1006CC8  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp+var_2384] +
xor ecx ecx +
cmp eax [ebp+var_23BC] +
jnz loc_100694A  +
cmp eax 6 +
jz loc_100694A  +
cmp eax 7 +
jnz loc_1006950  +
lea ecx [ebp+var_23BC] +
mov eax [ebp+lpString] +
mov edx [eax] +
lea esi [ebp+var_9C] +
push esi  +
push ecx  +
push eax  +
call dword ptr [edx+0A0h]  +
mov eax [ebp+lpString] +
push [ebp+samDesired]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A8h]  +
mov eax [ebp+lpString] +
mov esi [ebp+var_23CC] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0ACh]  +
push [ebp+TokenHandle]  +
mov eax [ebp+lpString] +
push [ebp+pSid2]  +
mov ecx [eax] +
push [ebp+var_23C8]  +
push [ebp+var_23AC]  +
push [ebp+dwProcessId]  +
push eax  +
call dword ptr [ecx+0A4h]  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
mov [ebp+var_23CC] eax +
jz loc_10069E1  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
or [ebp+TokenHandle] 0FFFFFFFFh +
cmp [ebp+var_23CC] 0 +
jz loc_10069F6  +
push 0  +
push offset aServermainCaIm  +
jmp loc_10068B9  +
mov eax [ebp+lpString] +
push [ebp+var_2390]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+9Ch]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp+var_2390] +
test eax eax +
jz loc_1006A21  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_238C] +
test eax eax +
jz loc_1006A31  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_23A0] +
mov ebx ds:MsgWaitForMultipleObjects +
push 3  +
pop eax  +
mov [ebp+var_23EC] esi +
mov esi 4FFh +
push esi  +
mov [ebp+var_23F4] ecx +
mov ecx [ebp+samDesired] +
push 0FFFFFFFFh  +
mov [ebp+var_23F0] ecx +
push 0  +
lea ecx [ebp+var_23F4] +
push ecx  +
mov dword_100E018 eax +
mov [ebp+var_2385] 0 +
push eax  +
jmp loc_1006C06  +
cmp eax 1 +
jz loc_1006C15  +
cmp eax 2 +
jnz loc_1006ADE  +
push [ebp+var_23A0]  +
call ds:CloseHandle  +
mov eax [ebp+lpString] +
and [ebp+var_23AC] 0 +
mov ecx [eax] +
lea edx [ebp+var_23AC] +
push edx  +
push eax  +
call dword ptr [ecx+0B0h]  +
push [ebp+var_23AC]  +
push 0  +
push 100000h  +
call ds:OpenProcess  +
mov [ebp+var_23A0] eax +
test eax eax +
jz loc_1006C26  +
mov [ebp+var_23F4] eax +
jmp loc_1006BF8  +
cmp eax 3 +
jz loc_1006BCA  +
mov eax [ebp+lpString] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_23A0]  +
call ds:CloseHandle  +
cmp [ebp+var_1E44] edi +
jle loc_1006B13  +
push [ebp+pPrimaryGroup]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1C2C] edi +
jle loc_1006B27  +
push [ebp+pOwner]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1D38] edi +
jle loc_1006B3B  +
push [ebp+pSacl]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1F50] edi +
jle loc_1006B4F  +
push [ebp+pDacl]  +
call sub_1008836  +
pop ecx  +
cmp [ebp+var_1B20] edi +
jle loc_1006B63  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call sub_1008836  +
pop ecx  +
xor esi esi +
cmp [ebp+var_23B4] esi +
jz loc_1006B85  +
cmp dword_100E01C esi +
jnz loc_1006B85  +
mov eax dwRegister +
cmp eax esi +
jz loc_1006B85  +
push eax  +
call ds:CoRevokeClassObject  +
call ds:CoUninitialize  +
cmp [ebp+var_23E0] esi +
jz loc_1001CDA  +
mov esi 641h +
push esi  +
call sub_100B561  +
jmp loc_1006671  +
cmp [ebp+Msg.message] 12h +
jz loc_1006BE4  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Msg] +
push eax  +
call ds:PeekMessageW  +
test eax eax +
jz loc_1006BEB  +
jmp loc_1006BA7  +
mov [ebp+var_2385] 1 +
cmp [ebp+var_2385] 0 +
jnz loc_1006AE7  +
push esi  +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp+var_23F4] +
push eax  +
push 3  +
call ebx  +
test eax eax +
jz loc_1006AE7  +
jmp loc_1006A7B  +
push [ebp+samDesired]  +
call ds:CloseHandle  +
jmp loc_1006AE7  +
cmp [ebp+TokenHandle] 0FFFFFFFFh +
jz loc_1006C3B  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
call ds:GetLastError  +
push eax  +
push offset aServermainCa_0  +
jmp loc_10066B3  +
call ds:GetLastError  +
push eax  +
push offset aServermainCaOp  +
call sub_100B355  +
pop ecx  +
pop ecx  +
mov esi 641h +
jmp loc_1001CE0  +
mov dword_100E018 ebx +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call ds:GetMessageW  +
test eax eax +
jnz loc_1006C9B  +
cmp dword_100FE64 edi +
jz loc_1006B63  +
cmp dword_100E078 edi +
jz loc_1006B63  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_1006C6F  +
***
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
push eax  +
push ecx  +
call sub_1008A8E  +
pop ecx  +
pop ecx  +
retn   +
***
mov esp [ebp-18h] +
jmp loc_1001D5A  +
***
push eax  +
push offset aSetinstallerac  +
call sub_100B355  +
pop ecx  +
pop ecx  +
jmp loc_1004229  +
push eax  +
push offset aSetinstaller_0  +
call sub_100B355  +
pop ecx  +
pop ecx  +
jmp loc_100422D  +
jz loc_1004229  +
push [ebp+var_4]  +
call sub_10021CD  +
jmp loc_100717B  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push 402h  +
push esi  +
push 2  +
call sub_10087BC  +
push esi  +
push offset aSetinstaller_1  +
call sub_100B355  +
add esp 28h +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push edi  +
push ebx  +
call sub_100BC53  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_10071E1  +
push esi  +
push offset aSetinstaller_2  +
jmp loc_1007187  +
lea eax [ebp+samDesired] +
push eax  +
mov [ebp+samDesired] 2001Fh +
call sub_1004283  +
pop ecx  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push [ebp+samDesired]  +
push esi  +
push esi  +
push esi  +
push edi  +
push ebx  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jz loc_100416D  +
jmp loc_1007181  +
push eax  +
push offset aSetinstaller_3  +
jmp loc_1007187  +
cmp [ebp+var_4] esi +
jmp loc_1007193  +
***
xor eax eax +
jmp loc_1001F93  +
***
push ebx  +
push ebx  +
call ds:GetLastError  +
push eax  +
push 1  +
mov ecx esi +
call sub_1001760  +
cmp [ebp-0D64h] ebx +
jl loc_10074DC  +
call ds:CoUninitialize  +
jmp loc_10074DC  +
***
cmp [ebp-0D64h] ebx +
jl loc_1007513  +
call ds:CoUninitialize  +
mov eax [ebp-0D6Ch] +
jmp loc_1001F92  +
***
cmp [ebp-0D64h] ebx +
jl loc_100752C  +
call ds:CoUninitialize  +
call ds:GetLastError  +
cmp [ebp-0C3Ch] edi +
mov esi eax +
jle loc_1007548  +
push dword ptr [ebp-0C40h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-0A30h] edi +
jle loc_100755C  +
push dword ptr [ebp-0A34h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-618h] edi +
jle loc_1007570  +
push dword ptr [ebp-61Ch]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-824h] edi +
jle loc_1007584  +
push dword ptr [ebp-828h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-40Ch] edi +
jle loc_1007598  +
push dword ptr [ebp-410h]  +
call sub_1008836  +
pop ecx  +
mov eax esi +
jmp loc_1001F92  +
***
push eax  +
push offset aServicethreadm  +
jmp loc_10075AC  +
push offset aServicethrea_0  +
call sub_100B355  +
pop ecx  +
pop ecx  +
push ebx  +
push ebx  +
call ds:GetLastError  +
push eax  +
push 1  +
mov ecx esi +
call sub_1001760  +
cmp [ebp-0D64h] ebx +
jl loc_10075D3  +
call ds:CoUninitialize  +
cmp [ebp-0C3Ch] edi +
jle loc_10075E7  +
push dword ptr [ebp-0C40h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-0A30h] edi +
jle loc_10075FB  +
push dword ptr [ebp-0A34h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-618h] edi +
jle loc_100760F  +
push dword ptr [ebp-61Ch]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-824h] edi +
jle loc_1007623  +
push dword ptr [ebp-828h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-40Ch] edi +
jmp loc_1001F8A  +
***
mov edi ds:GetLastError +
call edi  +
push eax  +
push offset aServicethrea_1  +
jmp loc_100771E  +
mov edi ds:GetLastError +
call edi  +
push eax  +
push offset aServicethrea_2  +
jmp loc_100771E  +
push dword ptr [ebp-0D6Ch]  +
push offset aServicethrea_3  +
call sub_100B355  +
pop ecx  +
pop ecx  +
push ebx  +
push ebx  +
call ds:GetLastError  +
push eax  +
push 1  +
mov ecx esi +
call sub_1001760  +
mov [ebp-0D5Dh] bl +
jmp loc_10016A9  +
***
call sub_10012E0  +
test al al +
jnz loc_10016FC  +
cmp dword_100E078 ebx +
jg loc_10016FC  +
jmp loc_1001EF3  +
***
push ebx  +
lea eax [ebp-0D70h] +
push eax  +
push dword_100E024  +
mov dword ptr [ebp-0D70h] 9A5F4400h +
mov dword ptr [ebp-0D6Ch] 0FFFFFFFEh +
call off_100E070  +
jmp loc_10016F0  +
***
lea eax [ebp-0DC8h] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp-0DC8h] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-0DC8h] +
push eax  +
call edi  +
test eax eax +
jz loc_10016F0  +
jmp loc_10076CE  +
***
call ds:GetLastError  +
push eax  +
push offset aWaitFailedInMs  +
call sub_100B355  +
pop ecx  +
pop ecx  +
jmp loc_1001EF3  +
***
push eax  +
push offset aServicethrea_4  +
call sub_100B355  +
pop ecx  +
pop ecx  +
push ebx  +
push ebx  +
call edi  +
push eax  +
push 1  +
mov ecx esi +
call sub_1001760  +
mov [ebp-0D5Dh] bl +
jmp loc_1001F03  +
***
push dword ptr [ebp-0C40h]  +
call sub_1008836  +
pop ecx  +
jmp loc_1001F60  +
***
push dword ptr [ebp-0A34h]  +
call sub_1008836  +
pop ecx  +
jmp loc_1001F6C  +
***
push dword ptr [ebp-61Ch]  +
call sub_1008836  +
pop ecx  +
jmp loc_1001F78  +
***
push dword ptr [ebp-828h]  +
call sub_1008836  +
pop ecx  +
jmp loc_1001F84  +
***
push dword ptr [ebp-410h]  +
call sub_1008836  +
pop ecx  +
jmp loc_1001F90  +
***
call ds:CoUninitialize  +
cmp [ebp-0C3Ch] edi +
jle loc_10077AD  +
push dword ptr [ebp-0C40h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-0A30h] edi +
jle loc_10077C1  +
push dword ptr [ebp-0A34h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-618h] edi +
jle loc_10077D5  +
push dword ptr [ebp-61Ch]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-824h] edi +
jle loc_10077E9  +
push dword ptr [ebp-828h]  +
call sub_1008836  +
pop ecx  +
cmp [ebp-40Ch] edi +
jle loc_10077FD  +
push dword ptr [ebp-410h]  +
call sub_1008836  +
pop ecx  +
push 0Eh  +
pop eax  +
jmp loc_1001F92  +
***
push ebx  +
push edi  +
call ds:GetLastError  +
push eax  +
push 1  +
mov ecx esi +
call sub_1001760  +
jmp loc_1004942  +
***
call ds:GetLastError  +
push eax  +
push offset aStartservicect  +
call sub_100B355  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
leave   +
retn   +
***
xor eax eax +
inc eax  +
retn   +
***
call ds:LoadLibraryW  +
mov ebx eax +
test ebx ebx +
jz loc_1007B61  +
push esi  +
push offset aGetsystemwow64  +
push ebx  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_1007B31  +
call ds:GetLastError  +
xor esi esi +
jmp loc_1007B4E  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call eax  +
mov esi eax +
test esi esi +
jz loc_1007B48  +
cmp esi [ebp+0Ch] +
ja loc_1007B50  +
xor edi edi +
jmp loc_1007B50  +
call ds:GetLastError  +
mov edi eax +
push ebx  +
call ds:FreeLibrary  +
push edi  +
call ds:SetLastError  +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_1002685  +
***
cmp [edi+2] ax +
jz loc_100445A  +
jmp loc_100440A  +
***
jnz loc_1007BBC  +
cmp [ebp+VersionInformation.dwMinorVersion] 1 +
jnb loc_1004A8E  +
push offset aComctl32  +
call sub_1004361  +
pop ecx  +
jmp loc_1004A99  +
***
mov byte_100FCA0 al +
jmp loc_1004324  +
***
mov eax 80004005h +
pop ebp  +
retn 24h  +
***
mov cl [ebp+var_1] +
mov byte_100FC0A cl +
jmp loc_1004A1E  +
mov eax [ebp+arg_8] +
mov [esi] eax +
jmp loc_1004A08  +
***
mov byte_100FCA1 al +
jmp loc_1003D27  +
***
xor eax eax +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
pop ebp  +
retn 18h  +
***
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_100279C+3)  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_1004B58  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_100E054 +
mov [ebp-1Ch] eax +
mov eax dword_100E050 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_100E054 eax +
mov eax [ebp-20h] +
mov dword_100E050 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007CA5  +
mov eax [ebp-24h] +
jmp loc_1004BD5  +
***
pop ecx  +
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_1004CCB  +
***
cmp ax 3 +
jnz loc_1004C79  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_10027D0  +
not eax  +
mov dword_100E010 eax +
jmp loc_1002826  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1007FCD  +
cmp [ebp+arg_4] eax +
jz loc_1007FC9  +
mov dl [ebx] +
test dl dl +
jz loc_1007FC9  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1007FB1  +
test esi esi +
jnz loc_1007FD4  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007FE0  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1007FFD  +
push eax  +
call MsiCloseHandle  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 2  +
pop eax  +
mov esi ecx +
mov [esi] eax +
cmp edi eax +
jz loc_100802B  +
push edi  +
call sub_10021B5  +
pop ecx  +
test al al +
jz loc_100802B  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
cmp byte_1010460 0 +
push esi  +
mov esi offset unk_1010360 +
jnz loc_10080AF  +
and [ebp+var_4] 0 +
push offset aTrustedInstall  +
lea eax [ebp+var_C] +
push eax  +
call off_100FE38  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
lea eax [ebp+var_C] +
push eax  +
call off_100FE3C  +
cmp eax 0C0000023h +
jz loc_100807C  +
push 0Dh  +
pop eax  +
jmp loc_10080B6  +
cmp [ebp+var_4] 100h +
jbe loc_100808C  +
mov eax 0EAh +
jmp loc_10080B6  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
call off_100FE3C  +
test eax eax +
jge loc_10080A8  +
push eax  +
call ds:RtlNtStatusToDosError  +
jmp loc_10080B6  +
mov byte_1010460 1 +
mov eax [ebp+arg_0] +
mov [eax] esi +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax hModule +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
test eax eax +
jnz loc_1008111  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov hModule eax +
test eax eax +
jz loc_1008121  +
push offset aDllgetclassobj  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_1008125  +
xor eax eax +
leave   +
retn   +
push esi  +
lea ecx [ebp+var_4] +
push ecx  +
push offset dword_1001848  +
mov esi offset dword_1008160 +
push esi  +
call eax  +
test eax eax +
jz loc_100813F  +
xor eax eax +
jmp loc_100815B  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push esi  +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1008183  +
pop ebp  +
retn   +
cmp word ptr [eax] 0 +
jz loc_100818C  +
add eax 2 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+pwcsName] +
push ebx  +
xor ebx ebx +
mov [ebp+lpWideCharStr] ecx +
lea ecx [ebp+ppstgOpen] +
push ecx  +
push ebx  +
push ebx  +
push 20h  +
push ebx  +
push eax  +
mov [ebp+var_31] bl +
mov [ebp+ppstgOpen] ebx +
mov [ebp+var_30] ebx +
call ds:StgOpenStorage  +
cmp eax ebx +
jge loc_10081EC  +
xor ecx ecx +
cmp eax 80030002h +
setnz cl  +
dec ecx  +
and ecx 0FFFFF9AFh +
add ecx 653h +
mov eax ecx +
jmp loc_10083A3  +
mov eax [ebp+ppstgOpen] +
mov ecx [eax] +
lea edx [ebp+var_30] +
push edx  +
push ebx  +
push 10h  +
push ebx  +
push offset dword_10083B0  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jge loc_1008219  +
mov eax [ebp+ppstgOpen] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 654h +
jmp loc_10083A3  +
mov eax [ebp+var_30] +
push esi  +
mov esi [eax] +
push 2Ch  +
pop ecx  +
push ebx  +
push ebx  +
xor edx edx +
push edx  +
push ecx  +
push eax  +
call dword ptr [esi+14h]  +
test eax eax +
jl loc_100837A  +
mov eax [ebp+var_30] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push 4  +
pop esi  +
push esi  +
lea edx [ebp+var_4C] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100837A  +
cmp [ebp+var_38] esi +
jnz loc_100837A  +
mov eax [ebp+var_4C] +
mov ecx [ebp+var_30] +
push edi  +
mov edi [ecx] +
push ebx  +
push ebx  +
xor edx edx +
push edx  +
push eax  +
push ecx  +
call dword ptr [edi+14h]  +
pop edi  +
test eax eax +
jl loc_100837A  +
mov eax [ebp+var_30] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push esi  +
lea edx [ebp+var_44] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100837A  +
cmp [ebp+var_38] esi +
jnz loc_100837A  +
mov eax [ebp+var_30] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push esi  +
lea edx [ebp+var_54] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100837A  +
cmp [ebp+var_38] esi +
jnz loc_100837A  +
mov [ebp+var_40] ebx +
mov [ebp+var_48] ebx +
cmp [ebp+var_44] ebx +
jz loc_100837A  +
cmp [ebp+var_40] 9 +
jz loc_100831B  +
mov eax [ebp+var_30] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push esi  +
lea edx [ebp+var_40] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100837A  +
cmp [ebp+var_38] esi +
jnz loc_100837A  +
mov eax [ebp+var_30] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push esi  +
lea edx [ebp+var_48] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100837A  +
cmp [ebp+var_38] esi +
jnz loc_100837A  +
sub [ebp+var_44] 8 +
jnz loc_10082CB  +
cmp [ebp+var_40] 9 +
jnz loc_100837A  +
mov ecx [ebp+var_48] +
mov eax [ebp+var_4C] +
push ebx  +
push ebx  +
xor edx edx +
lea eax [ecx+eax+8] +
mov ecx [ebp+var_30] +
mov esi [ecx] +
push edx  +
push eax  +
push ecx  +
call dword ptr [esi+14h]  +
test eax eax +
jl loc_100837A  +
mov eax [ebp+var_30] +
mov ecx [eax] +
lea edx [ebp+var_38] +
push edx  +
push 26h  +
lea edx [ebp+MultiByteStr] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100837A  +
cmp [ebp+var_38] 26h +
jnz loc_100837A  +
mov esi [ebp+lpWideCharStr] +
push 27h  +
push esi  +
push 27h  +
lea eax [ebp+MultiByteStr] +
push eax  +
push ebx  +
push ebx  +
mov [ebp+var_6] bl +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_100837A  +
xor eax eax +
mov [esi+4Ch] ax +
mov [ebp+var_31] 1 +
mov eax [ebp+var_30] +
pop esi  +
cmp eax ebx +
jz loc_1008388  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppstgOpen] +
cmp eax ebx +
jz loc_1008395  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
cmp [ebp+var_31] bl +
setnz al  +
dec eax  +
and eax 654h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10083EF  +
cmp word ptr [eax] 0 +
jnz loc_10083FC  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1008403  +
cmp word ptr [eax] 0 +
jz loc_1008403  +
mov eax 667h +
pop ebp  +
retn   +
mov byte_100FE61 1 +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push edi  +
xor edi edi +
mov dwUILevel edi +
movzx ecx word ptr [edx] +
xor eax eax +
inc eax  +
cmp ecx 52h +
jg loc_1008463  +
jz loc_100847F  +
cmp ecx edi +
jz loc_1008449  +
cmp ecx 2Bh +
jz loc_1008457  +
cmp ecx 42h +
jz loc_1008497  +
cmp ecx 46h +
jz loc_100848B  +
cmp ecx 4Eh +
jnz loc_1008477  +
or dwUILevel 2 +
mov dword_100FE58 eax +
jmp loc_10084A1  +
mov dwUILevel 80h +
jmp loc_1008449  +
cmp ecx 62h +
jz loc_1008497  +
cmp ecx 66h +
jz loc_100848B  +
cmp ecx 6Eh +
jz loc_1008449  +
cmp ecx 72h +
jz loc_100847F  +
xor eax eax +
inc eax  +
jmp loc_100851D  +
mov dwUILevel 4 +
jmp loc_10084A1  +
mov dwUILevel 5 +
jmp loc_10084A1  +
mov dwUILevel 3 +
push ebx  +
push esi  +
cmp [edx] di +
jz loc_1008519  +
inc edx  +
inc edx  +
movzx ecx word ptr [edx] +
cmp cx di +
jz loc_1008519  +
mov esi 0FFFFFF3Fh +
movzx ecx cx +
inc edx  +
inc edx  +
cmp cx 2Bh +
jnz loc_10084CE  +
or dwUILevel 80h +
jmp loc_1008506  +
cmp cx 2Dh +
jnz loc_10084EF  +
mov ecx dwUILevel +
and ecx esi +
cmp ecx 3 +
jnz loc_100851B  +
or dwUILevel 40h +
mov dword_100FE58 eax +
jmp loc_1008506  +
push 21h  +
pop ebx  +
cmp bx cx +
jnz loc_1008506  +
mov ecx dwUILevel +
and ecx esi +
cmp ecx 3 +
jnz loc_100851B  +
mov edi eax +
movzx ecx word ptr [edx] +
test cx cx +
jnz loc_10084B7  +
test edi edi +
jz loc_1008519  +
or dwUILevel 20h +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 0 +
push esi  +
push edi  +
mov esi eax +
jz loc_100857B  +
mov ecx [ebp+arg_4] +
movzx eax word ptr [ecx] +
xor edi edi +
inc edi  +
test ax ax +
jz loc_100856D  +
mov dx [esi] +
or dx 20h +
movzx eax ax +
cmp ax dx +
jz loc_1008568  +
add edi edi +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_100856D  +
jmp loc_1008555  +
mov eax [ebp+arg_8] +
or [eax] edi +
cmp word ptr [ecx] 0 +
jz loc_1008581  +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jnz loc_100853D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
push 57h  +
pop eax  +
jmp loc_100857D  +
***
mov dword_100FE64 1 +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
push esi  +
call ds:lstrlenW  +
cmp eax 26h +
jnz loc_10085DF  +
cmp word ptr [esi] 7Bh +
jnz loc_10085DF  +
push 2Dh  +
pop eax  +
cmp [esi+12h] ax +
jnz loc_10085DF  +
cmp [esi+1Ch] ax +
jnz loc_10085DF  +
cmp [esi+26h] ax +
jnz loc_10085DF  +
cmp [esi+30h] ax +
jnz loc_10085DF  +
cmp word ptr [esi+4Ah] 7Dh +
jnz loc_10085DF  +
xor eax eax +
inc eax  +
jmp loc_10085E1  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+pcchValueBuf] +
xor ebx ebx +
mov [ebp+hAny] ebx +
cmp esi ebx +
jz loc_10086F3  +
cmp [esi] bx +
jz loc_10086D2  +
lea ecx [ebp+hAny] +
call sub_1007FEC  +
push eax  +
push ebx  +
push esi  +
push ebx  +
call MsiGetSummaryInformationW  +
test eax eax +
jnz loc_10086D2  +
lea eax [ebp+pcchValueBuf] +
push eax  +
push offset szValueBuf  +
lea eax [ebp+pftValue] +
push eax  +
lea eax [ebp+piValue] +
push eax  +
lea eax [ebp+puiDataType] +
push eax  +
push 4  +
push [ebp+hAny]  +
mov byte_1010320 bl +
mov byte_10102A0 bl +
mov MultiByteStr bl +
mov szValueBuf bl +
mov [ebp+pcchValueBuf] 80h +
call MsiSummaryInfoGetPropertyA  +
push 40h  +
pop esi  +
lea eax [ebp+pcchValueBuf] +
push eax  +
push offset MultiByteStr  +
lea eax [ebp+pftValue] +
push eax  +
lea eax [ebp+piValue] +
push eax  +
lea eax [ebp+puiDataType] +
push eax  +
push 9  +
push [ebp+hAny]  +
mov [ebp+pcchValueBuf] esi +
call MsiSummaryInfoGetPropertyA  +
lea eax [ebp+pcchValueBuf] +
push eax  +
push offset byte_10102A0  +
lea eax [ebp+pftValue] +
push eax  +
lea eax [ebp+piValue] +
push eax  +
lea eax [ebp+puiDataType] +
push eax  +
push 3  +
push [ebp+hAny]  +
mov [ebp+pcchValueBuf] 80h +
call MsiSummaryInfoGetPropertyA  +
lea eax [ebp+pcchValueBuf] +
push eax  +
push offset byte_1010320  +
lea eax [ebp+pftValue] +
push eax  +
lea eax [ebp+piValue] +
push eax  +
lea eax [ebp+puiDataType] +
push eax  +
push 7  +
push [ebp+hAny]  +
mov [ebp+pcchValueBuf] esi +
call MsiSummaryInfoGetPropertyA  +
jmp loc_10086E6  +
push ebx  +
push ebx  +
push 40h  +
push offset MultiByteStr  +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
push ebx  +
call ds:WideCharToMultiByte  +
cmp [ebp+hAny] ebx +
jz loc_10086F3  +
push [ebp+hAny]  +
call MsiCloseHandle  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax hModule +
test eax eax +
jnz loc_100871F  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov hModule eax +
test eax eax +
jnz loc_100871F  +
mov eax 80040201h +
retn   +
push offset aDllregisterser  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1008731  +
jmp eax  +
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_100874E  +
lea edi [ebp+arg_4] +
mov ecx [ebp+arg_0] +
xor edx edx +
inc edx  +
xor esi esi +
xor ebx ebx +
mov [edi] edx +
test ecx ecx +
jnz loc_1008766  +
jmp loc_10087A2  +
test ebx ebx +
jnz loc_1008775  +
mov ebx edx +
movzx eax word ptr [ecx] +
sub eax 30h +
inc ecx  +
inc ecx  +
mov esi eax +
cmp eax 0FFFFFFFDh +
jz loc_1008760  +
cmp eax 9 +
jbe loc_100879B  +
push 0Dh  +
call ds:SetLastError  +
and dword ptr [edi] 0 +
mov eax 80000000h +
jmp loc_10087B2  +
inc ecx  +
sub eax 30h +
inc ecx  +
cmp eax 9 +
ja loc_100877A  +
imul esi esi +
add esi eax +
movzx eax word ptr [ecx] +
test eax eax +
jnz loc_100878C  +
push 0  +
call ds:SetLastError  +
test ebx ebx +
jz loc_10087B0  +
neg esi  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset SourceName  +
push 0  +
call ds:RegisterEventSourceW  +
mov esi eax +
test esi esi +
jz loc_10087FB  +
push [ebp+lpRawData]  +
push [ebp+lpStrings]  +
push [ebp+dwDataSize]  +
push dword ptr [ebp+wNumStrings]  +
push [ebp+lpUserSid]  +
push [ebp+dwEventID]  +
push dword ptr [ebp+wCategory]  +
push dword ptr [ebp+wType]  +
push esi  +
call ds:ReportEventW  +
push esi  +
call ds:DeregisterEventSource  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 0  +
call ds:GlobalAlloc  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hMem] 0 +
jz loc_100884A  +
push [ebp+hMem]  +
call ds:GlobalFree  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_100FE04 +
cmp eax 0FFFFFFFFh +
jz loc_1008877  +
test eax eax +
setnz al  +
jmp loc_10088E1  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_10088D8  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_10088D8  +
and [ebp+var_11C] 0 +
push 0  +
push 4  +
lea eax [ebp+var_11C] +
push eax  +
push 1Ah  +
call ds:GetCurrentProcess  +
push eax  +
call off_100FE34  +
test eax eax +
jl loc_10088D8  +
cmp [ebp+var_11C] 0 +
jz loc_10088D8  +
xor eax eax +
inc eax  +
mov dword_100FE04 eax +
jmp loc_10088E1  +
and dword_100FE04 0 +
xor al al +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1008940  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jb loc_1008940  +
call sub_1008851  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
jmp loc_1008942  +
xor al al +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push dword ptr [edi]  +
call sub_100219C  +
mov esi [ebp+arg_4] +
mov [edi] eax +
mov ebx eax +
jmp loc_1008A35  +
mov eax [edi] +
cmp word ptr [eax] 0 +
jz loc_1008A43  +
cmp cx 5Ch +
jnz loc_10089DD  +
cmp word ptr [eax+2] 60h +
jnz loc_1008A2C  +
sub eax ebx +
sar eax 1 +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_8] +
jnb loc_1008A82  +
test eax eax +
jl loc_1008A82  +
jz loc_10089C0  +
add eax eax +
push eax  +
push ebx  +
push dword ptr [esi]  +
call memcpy  +
mov eax [ebp+arg_0] +
add eax eax +
add esp 0Ch +
add [esi] eax +
mov eax [ebp+arg_0] +
mov ecx [esi] +
push 60h  +
pop edx  +
mov [ecx] dx +
add dword ptr [esi] 2 +
add dword ptr [edi] 2 +
mov ebx [edi] +
or ecx 0FFFFFFFFh +
sub ecx eax +
add [ebp+arg_8] ecx +
add ebx 2 +
jmp loc_1008A2C  +
cmp cx 60h +
jnz loc_1008A2C  +
sub eax ebx +
sar eax 1 +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_8] +
jnb loc_1008A82  +
test eax eax +
jl loc_1008A82  +
jz loc_1008A15  +
add eax eax +
push eax  +
push ebx  +
push dword ptr [esi]  +
call memcpy  +
mov eax [ebp+arg_0] +
add eax eax +
add esp 0Ch +
add [esi] eax +
mov eax [ebp+arg_0] +
mov ecx [esi] +
push 22h  +
pop edx  +
mov [ecx] dx +
add dword ptr [esi] 2 +
mov ebx [edi] +
or ecx 0FFFFFFFFh +
sub ecx eax +
add [ebp+arg_8] ecx +
inc ebx  +
inc ebx  +
push dword ptr [edi]  +
call sub_100219C  +
mov [edi] eax +
pop ecx  +
movzx ecx word ptr [eax] +
cmp cx 22h +
jnz loc_1008971  +
mov eax [edi] +
sub eax ebx +
sar eax 1 +
cmp eax [ebp+arg_8] +
jnb loc_1008A82  +
test eax eax +
jl loc_1008A82  +
jz loc_1008A6A  +
add eax eax +
push eax  +
push ebx  +
push dword ptr [esi]  +
mov [ebp+arg_0] eax +
call memcpy  +
mov eax [ebp+arg_0] +
add esp 0Ch +
add [esi] eax +
mov eax [esi] +
xor ecx ecx +
mov [eax] cx +
mov eax [edi] +
cmp word ptr [eax] 22h +
jnz loc_1008A7E  +
add eax 2 +
mov [edi] eax +
mov al 1 +
jmp loc_1008A84  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+ExceptionInfo] +
test ecx ecx +
jz loc_1008ABF  +
mov eax [ecx] +
test eax eax +
jz loc_1008ABF  +
cmp dword ptr [eax] 80000003h +
jz loc_1008ABF  +
cmp dword_100E01C 0 +
jz loc_1008AB6  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
push ecx  +
call ds:UnhandledExceptionFilter  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax [esi+8] +
jle loc_1008AE0  +
push dword ptr [esi]  +
call sub_1008836  +
pop ecx  +
mov eax [ebp+arg_0] +
cmp eax [esi+8] +
mov [esi+4] eax +
jle loc_1008B02  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100881F  +
pop ecx  +
jmp loc_1008B05  +
lea eax [esi+0Ch] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx 1 +
push esi  +
push edi  +
mov esi ecx +
jle loc_1008B33  +
lea eax [ebx+ebx] +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov edi eax +
jmp loc_1008B36  +
lea edi [esi+0Ch] +
test edi edi +
jnz loc_1008B3E  +
xor al al +
jmp loc_1008B79  +
cmp [ebp+arg_4] 0 +
jz loc_1008B62  +
cmp [esi] edi +
jz loc_1008B62  +
mov eax [esi+4] +
cmp ebx eax +
jge loc_1008B51  +
mov eax ebx +
test eax eax +
jz loc_1008B62  +
mov ecx [esi] +
dec eax  +
mov cx [ecx+eax*2] +
mov [edi+eax*2] cx +
jnz loc_1008B55  +
mov eax [esi] +
lea ecx [esi+0Ch] +
cmp eax ecx +
jz loc_1008B72  +
push eax  +
call ds:GlobalFree  +
mov [esi] edi +
mov [esi+4] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi 200h +
cmp [esi+4] edi +
jle loc_1008BA1  +
push dword ptr [esi]  +
call sub_1008836  +
pop ecx  +
mov ebx [ebp+dwBytes] +
cmp ebx edi +
jle loc_1008BB1  +
push ebx  +
call sub_100881F  +
pop ecx  +
jmp loc_1008BB4  +
lea eax [esi+0Ch] +
mov [esi] eax +
test eax eax +
jnz loc_1008BBC  +
xor ebx ebx +
pop edi  +
mov [esi+4] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+dwBytes] +
cmp ebx 1 +
push esi  +
push edi  +
mov esi ecx +
jle loc_1008BEA  +
push ebx  +
push 40h  +
call ds:GlobalAlloc  +
mov edi eax +
jmp loc_1008BED  +
lea edi [esi+0Ch] +
test edi edi +
jnz loc_1008BF5  +
xor al al +
jmp loc_1008C2E  +
cmp [ebp+arg_4] 0 +
jz loc_1008C17  +
cmp [esi] edi +
jz loc_1008C17  +
mov eax [esi+4] +
cmp ebx eax +
jge loc_1008C08  +
mov eax ebx +
test eax eax +
jz loc_1008C17  +
mov ecx [esi] +
dec eax  +
mov cl [eax+ecx] +
mov [eax+edi] cl +
jnz loc_1008C0C  +
mov eax [esi] +
lea ecx [esi+0Ch] +
cmp eax ecx +
jz loc_1008C27  +
push eax  +
call ds:GlobalFree  +
mov [esi] edi +
mov [esi+4] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+dwBytes] +
cmp ebx 40h +
push esi  +
push edi  +
mov esi ecx +
jle loc_1008C59  +
push ebx  +
push 40h  +
call ds:GlobalAlloc  +
mov edi eax +
jmp loc_1008C5C  +
lea edi [esi+0Ch] +
test edi edi +
jnz loc_1008C64  +
xor al al +
jmp loc_1008C9D  +
cmp [ebp+arg_4] 0 +
jz loc_1008C86  +
cmp [esi] edi +
jz loc_1008C86  +
mov eax [esi+4] +
cmp ebx eax +
jge loc_1008C77  +
mov eax ebx +
test eax eax +
jz loc_1008C86  +
mov ecx [esi] +
dec eax  +
mov cl [eax+ecx] +
mov [eax+edi] cl +
jnz loc_1008C7B  +
mov eax [esi] +
lea ecx [esi+0Ch] +
cmp eax ecx +
jz loc_1008C96  +
push eax  +
call ds:GlobalFree  +
mov [esi] edi +
mov [esi+4] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 208h  +
lea edi [esi+0Ch] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
mov [esi] edi +
pop edi  +
mov dword ptr [esi+4] 104h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+dwBytes] +
mov eax 100h +
cmp ecx eax +
mov [esi+4] ecx +
jle loc_1008CFE  +
push ecx  +
call sub_100881F  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_1008D11  +
and [esi+4] eax +
jmp loc_1008D11  +
push edi  +
push eax  +
lea edi [esi+0Ch] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
mov [esi] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1008D2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 3E8h  +
lea edi [esi+0Ch] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
mov [esi] edi +
pop edi  +
mov dword ptr [esi+4] 1F4h +
mov eax esi +
pop esi  +
retn   +
***
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 400h +
jle loc_1008D7C  +
push dword ptr [esi]  +
call ds:GlobalFree  +
lea eax [esi+0Ch] +
mov dword ptr [esi+4] 400h +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx 400h +
push esi  +
push edi  +
mov esi ecx +
jle loc_1008DB4  +
lea eax [ebx+ebx] +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov edi eax +
jmp loc_1008DB7  +
lea edi [esi+0Ch] +
test edi edi +
jnz loc_1008DBF  +
xor al al +
jmp loc_1008DFA  +
cmp [ebp+arg_4] 0 +
jz loc_1008DE3  +
cmp [esi] edi +
jz loc_1008DE3  +
mov eax [esi+4] +
cmp ebx eax +
jge loc_1008DD2  +
mov eax ebx +
test eax eax +
jz loc_1008DE3  +
mov ecx [esi] +
dec eax  +
mov cx [ecx+eax*2] +
mov [edi+eax*2] cx +
jnz loc_1008DD6  +
mov eax [esi] +
lea ecx [esi+0Ch] +
cmp eax ecx +
jz loc_1008DF3  +
push eax  +
call ds:GlobalFree  +
mov [esi] edi +
mov [esi+4] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 28h +
jle loc_1008E19  +
push dword ptr [esi]  +
call ds:GlobalFree  +
lea eax [esi+0Ch] +
mov dword ptr [esi+4] 28h +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1008E42  +
cmp edx 7FFFFFFFh +
jbe loc_1008E47  +
mov eax 80070057h +
test eax eax +
jl loc_1008E5D  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1003AE7  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1008E81  +
cmp edx 7FFFFFFFh +
jbe loc_1008E83  +
mov eax ecx +
test eax eax +
jl loc_1008EAA  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1008E9A  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_1008EAA  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1007F9D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1008EC9  +
cmp ecx 7FFFFFFFh +
jbe loc_1008ECE  +
mov eax 80070057h +
test eax eax +
jl loc_1008F0B  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1008EFE  +
cmp eax esi +
ja loc_1008EFE  +
jnz loc_1008F06  +
mov [esi+edi] bl +
jmp loc_1008F06  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1008F28  +
cmp ecx 7FFFFFFFh +
jbe loc_1008F2D  +
mov eax 80070057h +
test eax eax +
jl loc_1008F6A  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1008F5A  +
cmp eax esi +
ja loc_1008F5A  +
jz loc_1008F5F  +
jmp loc_1008F65  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi ecx +
jz loc_1008F84  +
mov eax [ebp+arg_0] +
jmp loc_1008F87  +
push 2  +
pop eax  +
push eax  +
call sub_1008009  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_205] 1 +
xor ebx ebx +
jmp loc_100905E  +
mov eax [esi] +
add esi 4 +
push dword ptr [esi]  +
mov [ebp+hKey] ebx +
push eax  +
lea eax [ebp+SubKey] +
push 100h  +
push eax  +
call sub_1008F12  +
add esp 10h +
add esi 4 +
test eax eax +
jl loc_100907B  +
mov eax [esi] +
push ebx  +
mov [ebp+lpValueName] eax +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+SubKey] +
add esi 4 +
mov edi [esi] +
push eax  +
push 80000000h  +
add esi 4 +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_100904C  +
push edi  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push edi  +
push 1  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_1009052  +
mov [ebp+var_205] bl +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [esi] ebx +
jnz loc_1008FC2  +
mov al [ebp+var_205] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
xor al al +
jmp loc_100906C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov bl 1 +
jmp loc_10090E9  +
mov eax [esi] +
add esi 4 +
push dword ptr [esi]  +
push eax  +
lea eax [ebp+SubKey] +
push 100h  +
push eax  +
call sub_1008F12  +
add esp 10h +
test eax eax +
jl loc_10090FE  +
lea eax [ebp+SubKey] +
push eax  +
push 80000000h  +
add esi 0Ch +
call ds:RegDeleteKeyW  +
cmp eax 3FAh +
jz loc_10090E9  +
cmp eax 2 +
jz loc_10090E9  +
test eax eax +
jz loc_10090E9  +
xor bl bl +
cmp dword ptr [esi] 0 +
jnz loc_10090A2  +
mov al bl +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
xor al al +
jmp loc_10090F0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 138h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push 103h  +
mov ebx offset Filename +
push ebx  +
push dword_100E014  +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_1009143  +
call ds:GetLastError  +
jmp loc_1009638  +
push edi  +
xor eax eax +
xor edi edi +
mov word_100FBFE ax +
mov [ebp+var_A8] edi +
mov [ebp+var_C0] offset rclsid +
mov [ebp+var_B4] edi +
push esi  +
mov eax [ebp+var_C0] +
push dword ptr [eax]  +
mov esi offset off_100FCD0 +
push offset a08lx00000000C0  +
push 28h  +
push offset word_100F470  +
call sub_1008F12  +
add esp 10h +
cmp eax edi +
jl loc_1009636  +
mov ecx [ebp+var_B4] +
mov ecx off_100FDF4[ecx] +
cmp ecx edi +
jz loc_10091AB  +
push ecx  +
push 28h  +
push offset unk_100F420  +
call sub_1008E2C  +
cmp eax edi +
jl loc_1009636  +
mov eax [ebp+var_B4] +
push off_100FDF8[eax]  +
push 64h  +
push offset unk_100F530  +
call sub_1008E2C  +
cmp eax edi +
jl loc_1009636  +
cmp off_100FCD0 edi +
jz loc_10092B4  +
lea ecx [esi+4] +
cmp [ecx] edi +
jz loc_10092AC  +
cmp [esi+8] edi +
jz loc_10092AC  +
mov eax [esi] +
mov esi ecx +
mov ecx [esi] +
push ecx  +
push eax  +
lea eax [ebp+SubKey] +
push 50h  +
push eax  +
add esi 4 +
call sub_1008F12  +
add esp 10h +
cmp eax edi +
jl loc_1009636  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push 2001Fh  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push 80000000h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1009261  +
push dword ptr [esi]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push dword ptr [esi]  +
push 1  +
push edi  +
push edi  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_1009267  +
inc [ebp+var_A8]  +
add esi 4 +
mov eax [esi] +
cmp eax edi +
jz loc_100929D  +
add eax 2 +
push eax  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push dword ptr [esi+4]  +
push 1  +
push edi  +
push dword ptr [esi]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100929D  +
inc [ebp+var_A8]  +
push [ebp+hKey]  +
add esi 8 +
call ds:RegCloseKey  +
cmp [esi] edi +
jnz loc_10091DF  +
cmp dword_100FE54 edi +
jz loc_100951D  +
push edi  +
push 1  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+var_B0] +
push eax  +
mov [ebp+var_B0] edi +
call sub_10025E2  +
add esp 10h +
test eax eax +
jnz loc_10094CC  +
mov [ebp+phkResult] edi +
mov [ebp+var_BC] edi +
mov [ebp+cbData] 2001Fh +
mov [ebp+var_CC] edi +
xor esi esi +
call sub_1008851  +
movzx eax al +
mov [ebp+var_C4] eax +
cmp eax edi +
jz loc_1009321  +
mov [ebp+cbData] 2011Fh +
mov eax [ebp+var_B0] +
mov [ebp+SecurityAttributes.nLength] 0Ch +
mov [ebp+SecurityAttributes.bInheritHandle] edi +
mov [ebp+SecurityAttributes.lpSecurityDescriptor] eax +
push esi  +
push 1  +
lea ecx [ebp+var_D0] +
call sub_1008F71  +
cmp esi edi +
jz loc_1009359  +
mov [ebp+var_CC] 1 +
mov esi ds:RegCreateKeyExW +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push [ebp+cbData]  +
push edi  +
push edi  +
push edi  +
push offset SubKey  +
push 80000002h  +
call esi  +
mov [ebp+var_B0] eax +
cmp eax edi +
jnz loc_10093D0  +
cmp [ebp+var_C4] edi +
jz loc_10093BE  +
push edi  +
lea eax [ebp+var_BC] +
push eax  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push 2001Fh  +
push edi  +
push edi  +
push edi  +
push offset SubKey  +
push 80000002h  +
call esi  +
mov [ebp+var_B0] eax +
cmp [ebp+var_B0] edi +
jnz loc_10093D0  +
mov [ebp+var_CC] 1 +
cmp [ebp+var_D0] 2 +
jz loc_10093E5  +
push [ebp+var_D0]  +
call sub_10021CD  +
pop ecx  +
xor esi esi +
inc esi  +
cmp [ebp+var_CC] edi +
jz loc_100933D  +
cmp [ebp+var_B0] edi +
jnz loc_10094CC  +
push 5Ch  +
push ebx  +
call ds:wcsrchr  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi edi +
jz loc_1009473  +
cmp esi ebx +
jz loc_1009473  +
xor eax eax +
push ebx  +
mov [esi] ax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push ebx  +
push 1  +
push edi  +
push offset ValueName  +
cmp [ebp+var_C4] edi +
jnz loc_1009455  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100944D  +
inc [ebp+var_A8]  +
push 5Ch  +
pop eax  +
mov [esi] ax +
jmp loc_10094AC  +
push [ebp+var_BC]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100946B  +
inc [ebp+var_A8]  +
push 5Ch  +
pop eax  +
mov [esi] ax +
jmp loc_1009479  +
inc [ebp+var_A8]  +
cmp [ebp+var_C4] edi +
jz loc_10094AC  +
push ebx  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push ebx  +
push 1  +
push edi  +
push offset aMsiexecca32  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_10094AC  +
inc [ebp+var_A8]  +
push [ebp+phkResult]  +
mov esi ds:RegCloseKey +
call esi  +
cmp [ebp+var_BC] edi +
jz loc_10094D2  +
push [ebp+var_BC]  +
call esi  +
jmp loc_10094D2  +
inc [ebp+var_A8]  +
call sub_10088F2  +
test al al +
jz loc_10094F3  +
push offset off_100FD24  +
call sub_1008F99  +
pop ecx  +
xor ecx ecx +
test al al +
setz cl  +
add [ebp+var_A8] ecx +
call sub_10088F2  +
test al al +
jnz loc_1009505  +
call sub_1008851  +
test al al +
jz loc_100951D  +
push offset off_100FDE0  +
call sub_1008F99  +
pop ecx  +
xor ecx ecx +
test al al +
setz cl  +
add [ebp+var_A8] ecx +
xor esi esi +
lea eax [ebp+cbData] +
inc esi  +
push eax  +
mov [ebp+cbData] esi +
call sub_1004283  +
pop ecx  +
lea eax [ebp+var_D4] +
push eax  +
push [ebp+cbData]  +
push edi  +
push offset aSystemSetup  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1009602  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset aSystemsetupinp  +
push [ebp+var_D4]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10095F6  +
cmp dword ptr [ebp+Data] esi +
jnz loc_10095F6  +
push 44h  +
pop esi  +
push esi  +
lea eax [ebp+StartupInfo] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push edi  +
push edi  +
push 8000000h  +
push edi  +
push edi  +
push edi  +
push edi  +
push offset ApplicationName  +
mov [ebp+StartupInfo.cb] esi +
call ds:CreateProcessW  +
test eax eax +
jz loc_10095F6  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
push [ebp+hObject]  +
mov esi ds:CloseHandle +
call esi  +
push dword ptr [ebp-0F0h]  +
call esi  +
push [ebp+var_D4]  +
call ds:RegCloseKey  +
add [ebp+var_C0] 10h +
add [ebp+var_B4] 4 +
cmp [ebp+var_C0] offset aRuveh?ijdqxfat +
jl loc_1009165  +
cmp [ebp+var_A8] edi +
jz loc_100962F  +
mov eax 80040201h +
jmp loc_1009636  +
call sub_10086FC  +
xor eax eax +
pop esi  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ACh +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_AC] edi +
mov [ebp+hKey] offset off_100FDF4 +
mov ebx offset rclsid +
push dword ptr [ebx]  +
mov esi offset off_100FCD0 +
push offset a08lx00000000C0  +
push 28h  +
push offset word_100F470  +
call sub_1008F12  +
add esp 10h +
cmp eax edi +
jl loc_100983B  +
mov eax [ebp+hKey] +
mov eax [eax] +
cmp eax edi +
jz loc_1009722  +
push eax  +
push 28h  +
push offset unk_100F420  +
call sub_1008E2C  +
cmp eax edi +
jl loc_100983B  +
cmp off_100FCD0 edi +
jz loc_1009789  +
lea ecx [esi+4] +
cmp [ecx] edi +
jz loc_1009785  +
cmp [esi+8] edi +
jz loc_1009785  +
mov eax [esi] +
mov esi ecx +
mov ecx [esi] +
push ecx  +
push eax  +
lea eax [ebp+SubKey] +
push 50h  +
push eax  +
add esi 4 +
call sub_1008F12  +
add esp 10h +
cmp eax edi +
jl loc_100983B  +
lea eax [ebp+SubKey] +
push eax  +
push 80000000h  +
call ds:RegDeleteKeyW  +
cmp eax 3FAh +
jz loc_1009782  +
cmp eax 2 +
jz loc_1009782  +
cmp eax edi +
jz loc_1009782  +
inc [ebp+var_AC]  +
add esi 0Ch +
cmp [esi] edi +
jnz loc_100972A  +
add [ebp+hKey] 4 +
add ebx 10h +
cmp ebx offset aRuveh?ijdqxfat +
jl loc_10096DE  +
mov esi 2001Fh +
call sub_1008851  +
movzx ebx al +
cmp ebx edi +
jz loc_10097B5  +
mov esi 2011Fh +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push edi  +
mov edi offset SubKey +
push edi  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10097FC  +
test ebx ebx +
jnz loc_10097DF  +
push offset ValueName  +
jmp loc_10097E4  +
push offset aMsiexecca32  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test ebx ebx +
jz loc_1009808  +
push edi  +
push esi  +
call ds:RegDeleteKeyW  +
call sub_10088F2  +
test al al +
jz loc_100981C  +
push offset off_100FD24  +
call sub_1009084  +
pop ecx  +
call sub_10088F2  +
test al al +
jnz loc_100982E  +
call sub_1008851  +
test al al +
jz loc_1009839  +
push offset off_100FDE0  +
call sub_1009084  +
pop ecx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov eax ebx +
mov esi ebx +
test ebx ebx +
jz loc_10098F9  +
cmp word ptr [ebx] 0 +
jz loc_1009887  +
cmp word ptr [eax] 5Ch +
push eax  +
jnz loc_100987B  +
call sub_1008175  +
mov esi eax +
jmp loc_1009880  +
call sub_1008175  +
cmp word ptr [eax] 0 +
pop ecx  +
jnz loc_100986B  +
movzx ecx word ptr [esi] +
mov eax esi +
test cx cx +
jz loc_10098A9  +
movzx ecx cx +
cmp cx 2Eh +
jz loc_10098F9  +
push eax  +
call sub_1008175  +
pop ecx  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1009894  +
cmp word ptr [eax] 2Eh +
jz loc_10098F9  +
mov esi ds:lstrlenW +
push edi  +
push ebx  +
call esi  +
push 0  +
push [ebp+lpString]  +
mov edi eax +
call esi  +
mov esi [ebp+arg_8] +
lea eax [eax+edi+1] +
push eax  +
mov ecx esi +
call sub_10023B0  +
mov eax [esi+4] +
mov ecx [esi] +
push ebx  +
push eax  +
push ecx  +
call sub_1008E2C  +
pop edi  +
test eax eax +
jnz loc_10098F9  +
push [ebp+lpString]  +
mov eax [esi+4] +
mov esi [esi] +
push eax  +
push esi  +
call sub_1004473  +
test eax eax +
jnz loc_10098F9  +
inc eax  +
jmp loc_10098FB  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push [ebp+arg_4]  +
call sub_10024DF  +
test eax eax +
jge loc_100992A  +
mov eax 65Bh +
leave   +
retn   +
push [ebp+arg_8]  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10039EE  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_1009961  +
push 26h  +
push [ebp+arg_4]  +
push 27h  +
push offset String  +
call sub_1003A9E  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100998B  +
cmp word ptr [eax] 0 +
jz loc_100998B  +
push 0  +
push eax  +
call sub_100873C  +
pop ecx  +
pop ecx  +
mov dword_100FE5C eax +
cmp dword_100FE5C 80000000h +
jnz loc_100999E  +
and dword_100FE5C 0 +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+szLogFile] eax +
cmp eax edi +
jz loc_1009B0F  +
xor ecx ecx +
cmp cx [eax] +
jz loc_1009B0F  +
push offset aMewuifsoarpcvx  +
push 15h  +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+dwLogMode] edi +
call sub_1008E2C  +
test eax eax +
jl loc_1009B0F  +
push 2Ah  +
pop eax  +
push 2Bh  +
mov [ebp+var_E] ax +
pop eax  +
mov [ebp+var_C] ax +
push 64h  +
pop eax  +
mov [ebp+var_A] ax +
xor eax eax +
mov [ebp+var_8] ax +
cmp ebx edi +
jz loc_1009A31  +
cmp [ebx] di +
jz loc_1009A31  +
lea eax [ebp+dwLogMode] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push ebx  +
call sub_1008525  +
add esp 0Ch +
test eax eax +
jnz loc_1009B0F  +
xor eax eax +
push esi  +
xor esi esi +
inc eax  +
test [ebp+dwLogMode] 40000h +
mov [ebp+var_38] edi +
jz loc_1009A46  +
mov [ebp+var_38] eax +
test [ebp+dwLogMode] 10000h +
jz loc_1009A51  +
mov esi eax +
test [ebp+dwLogMode] 20000h +
jz loc_1009A61  +
or [ebp+dwLogMode] 10FFFh +
cmp [ebp+dwLogMode] edi +
jnz loc_1009A6D  +
mov [ebp+dwLogMode] 397h +
and [ebp+dwLogMode] 0FFF0FFFFh +
cmp ebx edi +
jz loc_1009AEF  +
cmp [ebx] di +
jz loc_1009AEF  +
cmp [ebp+dwLogMode] edi +
jnz loc_1009AEF  +
mov ecx offset dword_1009B58 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1009AAF  +
cmp dx di +
jz loc_1009AAB  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1009AAF  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1009A89  +
xor eax eax +
jmp loc_1009AB4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_1009AE4  +
mov edi ds:lstrcmpW +
push offset word_1009B54  +
push ebx  +
call edi  +
test eax eax +
jz loc_1009AE2  +
push offset asc_1009B4C  +
push ebx  +
call edi  +
test eax eax +
jz loc_1009AE2  +
push offset asc_1009B44  +
push ebx  +
call edi  +
test eax eax +
jnz loc_1009AED  +
xor edi edi +
mov [ebp+dwLogMode] 397h +
jmp loc_1009AEF  +
xor edi edi +
neg esi  +
sbb esi esi +
xor eax eax +
and esi 2 +
cmp [ebp+var_38] edi +
setnz al  +
or esi eax +
push esi  +
push [ebp+szLogFile]  +
push [ebp+dwLogMode]  +
call MsiEnableLogW  +
pop esi  +
jmp loc_1009B12  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1009B93  +
cmp word ptr [ecx] 0 +
jz loc_1009B93  +
mov ax [ebp+arg_0] +
mov word_100FE70 ax +
mov eax 104h +
push eax  +
push ecx  +
push eax  +
push offset unk_100FE72  +
call sub_1003A9E  +
xor eax eax +
pop ebp  +
retn   +
push 57h  +
pop eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jz loc_1009BBC  +
mov eax 100h +
push eax  +
push [ebp+arg_8]  +
push eax  +
push offset byte_10100E0  +
call sub_1008E66  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+UsedDefaultChar] +
push ebx  +
xor ebx ebx +
mov byte_10100E0 bl +
mov szValueBuf bl +
mov MultiByteStr bl +
mov byte_10102A0 bl +
mov byte_1010320 bl +
cmp eax ebx +
jz loc_1009C2D  +
cmp [eax] bx +
jz loc_1009C2D  +
lea ecx [ebp+UsedDefaultChar] +
push ecx  +
push ebx  +
push 9  +
push offset byte_10100D0  +
push 0FFFFFFFFh  +
push eax  +
push ebx  +
push ebx  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_1009C32  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_1009C32  +
push ebx  +
push 3  +
push offset puiHandler  +
call MsiSetExternalUIA  +
mov byte_100FE60 1 +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
inc eax  +
jmp loc_1009C2F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
call MsiSetExternalUIA  +
push ebx  +
push ebx  +
push offset aIsmif32_dll  +
mov byte_100FE60 bl +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jz loc_1009DD6  +
push offset aInstallstatusm  +
push eax  +
call ds:GetProcAddress  +
mov [ebp+var_218] eax +
cmp eax ebx +
jz loc_1009DCA  +
mov eax dword ptr [ebp+dwMessageId] +
push esi  +
push edi  +
mov esi offset byte_10100E0 +
cmp eax ebx +
jz loc_1009D91  +
cmp eax 644h +
jz loc_1009D91  +
cmp eax 0BC2h +
jz loc_1009D91  +
cmp eax 669h +
jz loc_1009D91  +
mov [ebp+var_214] ebx +
cmp byte_10100E0 bl +
jnz loc_1009DA1  +
call ds:GetSystemDefaultLangID  +
cmp dword ptr [ebp+dwMessageId] 641h +
movzx eax ax +
mov [ebp+var_220] eax +
mov edi 100h +
jb loc_1009D0E  +
push eax  +
push edi  +
push esi  +
push dword ptr [ebp+dwMessageId]  +
push 0FFFFFFFFh  +
call MsiLoadStringA  +
test eax eax +
jnz loc_1009DA1  +
xor eax eax +
push 208h  +
mov [ebp+WideCharStr] ax +
lea eax [ebp-20Eh] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push ebx  +
push 105h  +
lea eax [ebp+WideCharStr] +
push eax  +
movzx eax word ptr [ebp+var_220] +
push eax  +
push dword ptr [ebp+dwMessageId]  +
push ebx  +
push 1000h  +
call ds:FormatMessageW  +
cmp eax ebx +
jz loc_1009D79  +
push ebx  +
push ebx  +
push edi  +
push esi  +
xor ecx ecx +
push 0FFFFFFFFh  +
mov word ptr [ebp+eax*2+var_214] cx +
lea eax [ebp+WideCharStr] +
push eax  +
push ebx  +
push ebx  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_1009D9B  +
jmp loc_1009DA1  +
push dword ptr [ebp+dwMessageId]  +
push offset aInstallerError  +
push edi  +
push esi  +
call sub_1008EB3  +
add esp 10h +
test eax eax +
jl loc_1009D9B  +
jmp loc_1009DA1  +
mov [ebp+var_214] 1 +
mov byte_10100E0 bl +
push [ebp+var_214]  +
push esi  +
push ebx  +
push offset byte_1010320  +
push offset byte_10102A0  +
push offset MultiByteStr  +
push offset szValueBuf  +
push offset byte_10100D0  +
call [ebp+var_218]  +
pop edi  +
pop esi  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 810h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push 103h  +
push offset Filename  +
push dword_100E014  +
xor eax eax +
mov word_100FBFE ax +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_1009E6B  +
call ds:GetLastError  +
jmp loc_1009FB5  +
xor eax eax +
and [ebp+var_80C] eax +
push esi  +
mov word_100FBFE ax +
mov esi offset unk_100FD48 +
cmp off_100FD4C eax +
jz loc_1009F91  +
push ebx  +
push edi  +
push 4  +
pop ebx  +
mov edi 401h +
mov eax [esi] +
add esi ebx +
test eax eax +
jnz loc_1009F82  +
mov ecx [esi] +
add esi ebx +
mov edx [esi] +
add esi ebx +
mov eax [esi] +
add esi ebx +
test eax eax +
jz loc_1009EC6  +
push eax  +
push edx  +
push ecx  +
lea eax [ebp+Data] +
push edi  +
push eax  +
call sub_1008F12  +
add esp 14h +
jmp loc_1009ED8  +
push edx  +
push ecx  +
lea eax [ebp+Data] +
push edi  +
push eax  +
call sub_1008F12  +
add esp 10h +
xor ecx ecx +
cmp eax ecx +
jge loc_1009EEC  +
inc [ebp+var_80C]  +
add esi 8 +
jmp loc_1009F85  +
push ecx  +
lea eax [ebp+hKey] +
push eax  +
push ecx  +
push 2001Fh  +
push ecx  +
push ecx  +
push ecx  +
lea eax [ebp+Data] +
push eax  +
push 80000000h  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_1009F19  +
inc [ebp+var_80C]  +
mov eax [esi] +
test eax eax +
jz loc_1009F71  +
add esi ebx +
push dword ptr [esi]  +
push eax  +
lea eax [ebp+Data] +
push edi  +
push eax  +
call sub_1008F12  +
add esp 10h +
add esi ebx +
test eax eax +
jl loc_1009F69  +
lea eax [ebp+Data] +
push eax  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 1  +
push 0  +
push 0  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_1009F74  +
inc [ebp+var_80C]  +
jmp loc_1009F74  +
add esi 8 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_1009F85  +
add esi 14h +
cmp dword ptr [esi+4] 0 +
jnz loc_1009E95  +
pop edi  +
pop ebx  +
push 0  +
push 0  +
push 1000h  +
push 8000000h  +
call off_100FE20  +
mov eax [ebp+var_80C] +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi offset off_100FD4C +
cmp off_100FD4C ebx +
jz loc_100A0AC  +
mov edi 401h +
mov ecx [esi] +
add esi 4 +
mov edx [esi] +
add esi 4 +
mov eax [esi] +
add esi 4 +
cmp eax ebx +
jz loc_100A01E  +
push eax  +
push edx  +
push ecx  +
lea eax [ebp+Name] +
push edi  +
push eax  +
call sub_1008F12  +
add esp 14h +
jmp loc_100A030  +
push edx  +
push ecx  +
lea eax [ebp+Name] +
push edi  +
push eax  +
call sub_1008F12  +
add esp 10h +
cmp eax ebx +
jl loc_100A0CF  +
lea eax [ebp+hKey] +
push eax  +
push 20008h  +
push ebx  +
lea eax [ebp+Name] +
push eax  +
push 80000000h  +
mov [ebp+hKey] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100A0A1  +
push 50h  +
lea eax [ebp+Name] +
push eax  +
push ebx  +
push [ebp+hKey]  +
call ds:RegEnumKeyW  +
cmp eax 103h +
jnz loc_100A08F  +
push offset word_1007D5C  +
push [ebp+hKey]  +
call ds:RegDeleteKeyW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov [ebp+hKey] ebx +
add esi 0Ch +
cmp [esi] ebx +
jnz loc_1009FF6  +
push ebx  +
push ebx  +
push 1000h  +
push 8000000h  +
call off_100FE20  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
mov eax 80004005h +
jmp loc_100A0C0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 424h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor eax eax +
push 20Ch  +
mov [ebp+BinaryPathName] ax +
xor edi edi +
lea eax [ebp-41Ah] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push 103h  +
lea eax [ebp+BinaryPathName] +
push eax  +
push edi  +
mov [ebp+var_420] edi +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_100A139  +
call ds:GetLastError  +
jmp loc_100A2C1  +
xor eax eax +
push 20h  +
mov [ebp+var_216] ax +
pop eax  +
push 2Fh  +
mov word ptr [ebp+var_C] ax +
pop eax  +
push 56h  +
mov word ptr [ebp+var_C+2] ax +
pop eax  +
mov word ptr [ebp+hSCObject] ax +
xor eax eax +
mov word ptr [ebp+hSCObject+2] ax +
lea eax [ebp+var_C] +
push eax  +
push 107h  +
lea eax [ebp+BinaryPathName] +
push eax  +
call sub_1004473  +
cmp eax edi +
jl loc_100A2C1  +
push esi  +
xor eax eax +
push 1FEh  +
mov [ebp+DisplayName] ax +
lea eax [ebp-20Ah] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push edi  +
mov esi 100h +
push esi  +
lea eax [ebp+DisplayName] +
push eax  +
push 1Bh  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
test eax eax +
jnz loc_100A1C7  +
push 9  +
push esi  +
lea eax [ebp+DisplayName] +
push eax  +
push 1Bh  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
push 0F003Fh  +
push edi  +
push edi  +
call ds:OpenSCManagerW  +
mov [ebp+hSCObject] eax +
cmp eax edi +
jz loc_100A2AE  +
push ebx  +
mov [ebp+var_424] edi +
cmp [ebp+var_420] edi +
jz loc_100A1F9  +
push 1F4h  +
call ds:Sleep  +
push edi  +
push edi  +
push lpDependencies  +
lea eax [ebp+BinaryPathName] +
push edi  +
push edi  +
push eax  +
push 1  +
push 3  +
push 20h  +
push 0F01FFh  +
lea eax [ebp+DisplayName] +
push eax  +
push offset ServiceName  +
push [ebp+hSCObject]  +
call ds:CreateServiceW  +
mov ebx eax +
cmp ebx edi +
jnz loc_100A256  +
call ds:GetLastError  +
mov [ebp+var_424] eax +
cmp eax 430h +
jnz loc_100A2A2  +
mov eax [ebp+var_420] +
inc [ebp+var_420]  +
cmp eax 0Eh +
jge loc_100A2A2  +
jmp loc_100A1E0  +
push edi  +
push esi  +
lea eax [ebp+DisplayName] +
push eax  +
push 20h  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
test eax eax +
jnz loc_100A27F  +
push 9  +
push esi  +
lea eax [ebp+DisplayName] +
push eax  +
push 1Bh  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
lea eax [ebp+DisplayName] +
mov [ebp+var_420] eax +
lea eax [ebp+var_420] +
push eax  +
push 1  +
push ebx  +
call off_100FE18  +
push ebx  +
call ds:CloseServiceHandle  +
push [ebp+hSCObject]  +
call ds:CloseServiceHandle  +
pop ebx  +
jmp loc_100A2BA  +
call ds:GetLastError  +
mov [ebp+var_424] eax +
mov eax [ebp+var_424] +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 5 +
jb loc_100A2F0  +
cmp dword ptr [ebp+8] 6 +
ja loc_100A2F0  +
mov byte_100FC04 1 +
call sub_1001FE3  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_1004CFC  +
xor esi esi +
inc esi  +
mov [ebp-88h] esi +
lea eax [ebp-80h] +
mov [ebp-8Ch] eax +
mov [ebp-78h] esi +
lea eax [ebp-70h] +
mov [ebp-7Ch] eax +
xor ebx ebx +
push ebx  +
mov edi 1388h +
push edi  +
lea ecx [ebp-8Ch] +
call sub_1008B11  +
test al al +
jz loc_100A50D  +
push ebx  +
push edi  +
lea ecx [ebp-7Ch] +
call sub_1008B11  +
test al al +
jz loc_100A50D  +
push ebx  +
push dword ptr [ebp-88h]  +
push dword ptr [ebp-8Ch]  +
push 0Ah  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
mov [ebp-0A4h] eax +
mov [ebp-68h] esi +
lea eax [ebp-60h] +
mov [ebp-6Ch] eax +
push ebx  +
mov edi 104h +
push edi  +
lea ecx [ebp-6Ch] +
call sub_1008B11  +
test al al +
jz loc_100A505  +
push edi  +
push dword ptr [ebp-6Ch]  +
push dword_100E014  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_100A505  +
xor eax eax +
mov ecx [ebp-6Ch] +
mov [ecx+206h] ax +
mov [ebp-4] ebx +
lea eax [ebp-0A8h] +
push eax  +
push dword ptr [ebp-6Ch]  +
call off_100FE24  +
mov [ebp-0A0h] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100A3F4  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor ebx ebx +
mov [ebp-0A0h] ebx +
mov [ebp-0A8h] ebx +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor esi esi +
inc esi  +
cmp [ebp-0A0h] ebx +
jz loc_100A505  +
mov [ebp-98h] esi +
lea eax [ebp-90h] +
mov [ebp-9Ch] eax +
push ebx  +
push dword ptr [ebp-0A0h]  +
lea ecx [ebp-9Ch] +
call sub_1008BCB  +
test al al +
jz loc_100A4FA  +
xor esi esi +
xor edi edi +
push dword ptr [ebp-9Ch]  +
push dword ptr [ebp-0A0h]  +
push dword ptr [ebp-0A8h]  +
push dword ptr [ebp-6Ch]  +
call off_100FE28  +
test eax eax +
jz loc_100A48A  +
lea eax [ebp-0B0h] +
push eax  +
lea eax [ebp-0ACh] +
push eax  +
push offset dword_100A52C  +
push dword ptr [ebp-9Ch]  +
call off_100FE2C  +
test eax eax +
jz loc_100A4FA  +
cmp [ebp-0B0h] ebx +
jbe loc_100A4FA  +
mov eax [ebp-0ACh] +
mov esi [eax+8] +
mov edi [eax+0Ch] +
movzx eax di +
push eax  +
shr edi 10h +
push edi  +
movzx eax si +
push eax  +
shr esi 10h +
push esi  +
push offset aD_D__4d_D  +
push 20h  +
lea eax [ebp-5Ch] +
push eax  +
call sub_1008F12  +
add esp 1Ch +
test eax eax +
jl loc_100A4FA  +
lea eax [ebp-5Ch] +
push eax  +
push dword ptr [ebp-8Ch]  +
push dword ptr [ebp-78h]  +
push dword ptr [ebp-7Ch]  +
call sub_1008F12  +
add esp 10h +
push 69h  +
pop eax  +
cmp dword ptr [ebp-0A4h] 4E8h +
jz loc_100A4E4  +
cmp dword ptr [ebp-0A4h] 4E7h +
jnz loc_100A4E7  +
push 78h  +
pop eax  +
push eax  +
push ebx  +
push dword ptr [ebp-0A4h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-7Ch]  +
push ebx  +
call msi_280  +
lea ecx [ebp-9Ch] +
call sub_1001E0B  +
lea ecx [ebp-6Ch] +
call sub_1001E0B  +
lea ecx [ebp-7Ch] +
call sub_1001E0B  +
lea ecx [ebp-8Ch] +
call sub_1001E0B  +
mov eax 8000h +
call sub_1004D44  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jz loc_100A5B4  +
push [ebp+lpString]  +
call ds:lstrlenW  +
inc eax  +
push 1  +
push eax  +
mov ecx offset off_100E400 +
call sub_1008D8F  +
test al al +
jz loc_100A5AF  +
push [ebp+lpString]  +
push dword_100E404  +
push off_100E400  +
call sub_1008E2C  +
test eax eax +
jge loc_100A5B4  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
push esi  +
jz loc_100A630  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
mov eax dword_100FE68 +
lea eax [eax+esi+2] +
push 1  +
push eax  +
mov ecx offset szCommandLine +
call sub_1008D8F  +
test al al +
jnz loc_100A5F3  +
xor eax eax +
inc eax  +
jmp loc_100A632  +
mov eax dword_100FE68 +
inc dword_100FE68  +
mov edx szCommandLine +
push 20h  +
pop ecx  +
push [ebp+lpString]  +
mov [edx+eax*2] cx +
mov ecx szCommandLine +
lea eax [esi+1] +
push eax  +
mov eax dword_100FE68 +
lea eax [ecx+eax*2] +
push eax  +
call sub_1008E2C  +
test eax eax +
jl loc_100A5EE  +
add dword_100FE68 esi +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push 11Ch  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_100A689  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
jnb loc_100A692  +
call sub_1009E29  +
test eax eax +
jnz loc_100A697  +
mov eax 8000h +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dwUILevel +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jnz loc_100A6DD  +
xor eax eax +
cmp esi ebx +
setz al  +
lea eax [eax+eax+3] +
push ebx  +
push eax  +
call MsiSetInternalUI  +
cmp byte_100FE60 bl +
jz loc_100A730  +
xor eax eax +
mov [ebp+ValueBuf] ax +
lea eax [ebp+pcchValueBuf] +
push eax  +
lea eax [ebp+ValueBuf] +
push eax  +
push offset szAttribute  +
push edi  +
mov [ebp+pcchValueBuf] 104h +
call MsiGetProductInfoW  +
lea eax [ebp+ValueBuf] +
cmp [ebp+ValueBuf] bx +
jnz loc_100A729  +
mov eax edi +
push eax  +
call sub_10085E9  +
pop ecx  +
push szCommandLine  +
neg esi  +
sbb esi esi +
and esi 0FFFFFFFDh +
add esi 5 +
push esi  +
push ebx  +
push edi  +
call MsiConfigureProductExW  +
mov esi eax +
cmp byte_100FE60 bl +
jz loc_100A759  +
push esi  +
call sub_1009C3C  +
pop ecx  +
cmp esi ebx +
jnz loc_100A762  +
mov esi 8000h +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dwUILevel +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_220] esi +
cmp eax 0FFFFFFFFh +
jnz loc_100A7C0  +
push 3  +
pop eax  +
xor ebx ebx +
push ebx  +
push eax  +
call MsiSetInternalUI  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
mov ecx eax +
xor edx edx +
or ecx 20h +
inc edx  +
mov [ebp+var_21C] ebx +
cmp cx 75h +
jnz loc_100A8A0  +
mov [ebp+var_21C] edx +
push edi  +
xor edi edi +
cmp byte_100FE61 bl +
jz loc_100A7FA  +
mov edi edx +
movzx eax word ptr dword_100FE5C +
push edi  +
push ebx  +
push eax  +
push off_100E400  +
push [ebp+var_21C]  +
push esi  +
call MsiAdvertiseProductExW  +
mov esi eax +
cmp esi 2 +
jnz loc_100A886  +
mov eax 104h +
mov [ebp+var_214] eax +
mov [ebp+var_210] eax +
lea eax [ebp+var_218] +
push eax  +
push offset a_msi  +
push [ebp+var_220]  +
lea ecx [ebp+var_20C] +
mov [ebp+var_218] ecx +
call sub_100984F  +
add esp 0Ch +
test eax eax +
jz loc_100A87B  +
movzx eax word ptr dword_100FE5C +
push edi  +
push ebx  +
push eax  +
push off_100E400  +
push [ebp+var_21C]  +
push [ebp+var_218]  +
call MsiAdvertiseProductExW  +
mov esi eax +
lea ecx [ebp+var_218] +
call sub_1001DE6  +
pop edi  +
cmp esi ebx +
jnz loc_100A890  +
mov esi 8000h +
mov eax esi +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
cmp ax bx +
jz loc_100A7ED  +
cmp cx 6Dh +
jz loc_100A7ED  +
push 57h  +
pop eax  +
jmp loc_100A892  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+pcchValueBuf] eax +
lea eax [ebp+var_230] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+var_23C] eax +
mov eax dwUILevel +
push esi  +
push edi  +
mov [ebp+var_244] ebx +
mov [ebp+var_238] 104h +
cmp eax 0FFFFFFFFh +
jz loc_100A90A  +
mov [ebp+dwUILevel] eax +
push 0  +
push [ebp+dwUILevel]  +
call MsiSetInternalUI  +
cmp String 0 +
jz loc_100A9B6  +
push 9  +
pop ecx  +
mov esi offset aMsiinstancegui +
lea edi [ebp+String] +
movs   +
mov esi ds:lstrlenW +
mov edi szCommandLine +
push ebx  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
lea edi [ebx+eax] +
mov ebx offset String +
push ebx  +
call esi  +
add edi eax +
lea eax [ebp+String] +
push eax  +
call esi  +
lea edi [eax+edi+2] +
push 1  +
push edi  +
mov ecx offset szCommandLine +
call sub_1008D8F  +
test al al +
jnz loc_100A980  +
push 0Eh  +
pop esi  +
lea ecx [ebp+var_23C] +
call sub_1001DE6  +
mov eax esi +
jmp loc_100AAB0  +
lea eax [ebp+String] +
push eax  +
push dword_100EC14  +
push szCommandLine  +
call sub_1004473  +
test eax eax +
jl loc_100A9AF  +
push ebx  +
push dword_100EC14  +
push szCommandLine  +
call sub_1004473  +
test eax eax +
jge loc_100A9DB  +
mov esi 65Bh +
jmp loc_100A96E  +
mov esi ds:lstrlenW +
mov edi szCommandLine +
push ebx  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
lea eax [ebx+eax+2] +
push 1  +
push eax  +
mov ecx offset szCommandLine +
call sub_1008D8F  +
push offset asc_1002138  +
push dword_100EC14  +
push szCommandLine  +
call sub_1004473  +
test eax eax +
jl loc_100AAA0  +
push [ebp+var_244]  +
push dword_100EC14  +
push szCommandLine  +
call sub_1004473  +
test eax eax +
jl loc_100AAA0  +
push szCommandLine  +
push [ebp+pcchValueBuf]  +
call MsiInstallProductW  +
mov esi eax +
cmp esi 2 +
jnz loc_100AA72  +
lea eax [ebp+var_23C] +
push eax  +
push offset a_msi  +
push [ebp+pcchValueBuf]  +
mov [ebp+var_234] 104h +
call sub_100984F  +
add esp 0Ch +
test eax eax +
jz loc_100AA72  +
mov eax [ebp+var_23C] +
push szCommandLine  +
mov [ebp+pcchValueBuf] eax +
push eax  +
call MsiInstallProductW  +
mov esi eax +
cmp byte_100FE60 0 +
jz loc_100AA8E  +
push [ebp+pcchValueBuf]  +
call sub_10085E9  +
push esi  +
call sub_1009C3C  +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_100A96E  +
mov esi 8000h +
jmp loc_100A96E  +
lea ecx [ebp+var_23C] +
call sub_1001DE6  +
mov eax 65Bh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
inc edi  +
xor esi esi +
cmp dwUILevel 0FFFFFFFFh +
jnz loc_100AB7F  +
push esi  +
lea eax [ebp+var_C] +
push 400h  +
lea ecx [ebp+var_18] +
mov [ebp+var_14] edi +
mov [ebp+var_18] eax +
call sub_1008B11  +
test al al +
jnz loc_100AB46  +
push 0Eh  +
pop esi  +
lea ecx [ebp+var_18] +
call sub_1001E0B  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
push esi  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push 18h  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
cmp eax esi +
jz loc_100AB77  +
push esi  +
push eax  +
push 10004h  +
push esi  +
push [ebp+var_18]  +
push esi  +
call MsiMessageBoxW  +
cmp eax 6 +
jz loc_100AB77  +
mov esi 642h +
jmp loc_100AB2D  +
lea ecx [ebp+var_18] +
call sub_1001E0B  +
push esi  +
lea eax [ebp+var_20] +
push 27h  +
lea ecx [ebp+var_2C] +
mov [ebp+var_28] edi +
mov [ebp+var_2C] eax +
call sub_1008B11  +
test al al +
jnz loc_100AB9F  +
push 0Eh  +
pop esi  +
lea ecx [ebp+var_2C] +
jmp loc_100AB30  +
push ebx  +
call sub_100859D  +
pop ecx  +
test al al +
jz loc_100ABD0  +
push ebx  +
push [ebp+var_28]  +
push [ebp+var_2C]  +
call sub_1008E2C  +
test eax eax +
jge loc_100ABC1  +
mov esi 65Bh +
jmp loc_100AB9A  +
push edi  +
push [ebp+var_2C]  +
call sub_100A6A8  +
pop ecx  +
pop ecx  +
mov esi eax +
jmp loc_100AB9A  +
push 5  +
pop ecx  +
mov esi offset aRemoveAll +
lea edi [ebp+var_1C] +
movs   +
push 3  +
lea eax [ebp+var_1C] +
push eax  +
push ebx  +
movs   +
call sub_100A8BD  +
add esp 0Ch +
jmp loc_100ABCC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
push 6  +
pop ecx  +
mov esi offset aActionAdmin +
lea edi [ebp+var_20] +
movs   +
push 5  +
lea ecx [ebp+var_20] +
push ecx  +
push eax  +
movs   +
call sub_100A8BD  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B10h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+lpString] +
push edi  +
push esi  +
call sub_100859D  +
pop ecx  +
test al al +
jz loc_100ACB9  +
push esi  +
push 27h  +
lea eax [ebp+szProduct] +
push eax  +
call sub_1008E2C  +
test eax eax +
jge loc_100AE95  +
mov eax 65Bh +
jmp loc_100AF0D  +
mov ecx ebx +
test ebx ebx +
jz loc_100ACDA  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_100ACDA  +
or eax 20h +
inc ecx  +
inc ecx  +
cmp ax 76h +
jz loc_100ADD0  +
test ecx ecx +
jnz loc_100ACBF  +
lea eax [ebp+var_54] +
push eax  +
push esi  +
call sub_1008193  +
mov edi eax +
pop ecx  +
pop ecx  +
cmp edi 2 +
jnz loc_100AD41  +
mov eax 104h +
mov [ebp+var_B08] eax +
mov [ebp+var_B04] eax +
lea eax [ebp+pwcsName] +
push eax  +
lea ecx [ebp+var_B00] +
push offset a_msi  +
push esi  +
mov [ebp+pwcsName] ecx +
call sub_100984F  +
add esp 0Ch +
test eax eax +
jz loc_100AD36  +
lea eax [ebp+var_54] +
push eax  +
push [ebp+pwcsName]  +
call sub_1008193  +
pop ecx  +
pop ecx  +
mov edi eax +
lea ecx [ebp+pwcsName] +
call sub_1001DE6  +
test edi edi +
jnz loc_100AE70  +
cmp String di +
jz loc_100AE81  +
xor eax eax +
push 4Ch  +
push eax  +
mov [ebp+ValueBuf] ax +
lea eax [ebp-0F2h] +
push eax  +
call memset  +
add esp 0Ch +
push 27h  +
pop edi  +
lea eax [ebp+pcchValueBuf] +
push eax  +
lea eax [ebp+ValueBuf] +
push eax  +
push offset aPackagecode  +
mov esi offset String +
push esi  +
mov [ebp+pcchValueBuf] edi +
call MsiGetProductInfoW  +
test eax eax +
jnz loc_100AE77  +
lea eax [ebp+ValueBuf] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100AE77  +
push 26h  +
push esi  +
push edi  +
lea eax [ebp+szProduct] +
push eax  +
call sub_1003A9E  +
jmp loc_100AE95  +
cmp word ptr [ebx] 0 +
jnz loc_100ADDB  +
mov ebx offset aPecms +
push ebx  +
push offset aReinstallAllRe  +
lea eax [ebp+var_8F8] +
push 401h  +
push eax  +
call sub_1008F12  +
add esp 10h +
test eax eax +
jl loc_100ACAF  +
push 3  +
lea eax [ebp+var_8F8] +
push eax  +
push esi  +
call sub_100A8BD  +
mov edi eax +
add esp 0Ch +
cmp edi 2 +
jnz loc_100AE70  +
mov eax 104h +
mov [ebp+var_B08] eax +
mov [ebp+var_B04] eax +
lea eax [ebp+pwcsName] +
push eax  +
lea ecx [ebp+var_B00] +
push offset a_msi  +
push esi  +
mov [ebp+pwcsName] ecx +
call sub_100984F  +
add esp 0Ch +
test eax eax +
jz loc_100AE65  +
push 3  +
lea eax [ebp+var_8F8] +
push eax  +
push [ebp+pwcsName]  +
call sub_100A8BD  +
add esp 0Ch +
mov edi eax +
lea ecx [ebp+pwcsName] +
call sub_1001DE6  +
mov eax edi +
jmp loc_100AF0D  +
mov eax 645h +
jmp loc_100AF0D  +
lea eax [ebp+szProduct] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
call MsiGetProductCodeFromPackageCodeW  +
test eax eax +
jnz loc_100AF0D  +
xor edi edi +
test ebx ebx +
jz loc_100AEDD  +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_100AEDD  +
xor esi esi +
push 72h  +
inc esi  +
mov ecx offset aRpoedcamusv +
or eax 20h +
pop edx  +
cmp ax dx +
jz loc_100AEC4  +
add esi esi +
inc ecx  +
inc ecx  +
movzx edx word ptr [ecx] +
test dx dx +
jz loc_100AEC6  +
jmp loc_100AEB1  +
or edi esi +
cmp word ptr [ecx] 0 +
jz loc_100AED8  +
inc ebx  +
inc ebx  +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_100AEE2  +
jmp loc_100AEA3  +
push 57h  +
pop eax  +
jmp loc_100AF0D  +
mov edi 2AAh +
mov eax dwUILevel +
cmp eax 0FFFFFFFFh +
jnz loc_100AEEF  +
push 3  +
pop eax  +
push 0  +
push eax  +
call MsiSetInternalUI  +
push edi  +
lea eax [ebp+szProduct] +
push eax  +
call MsiReinstallProductW  +
test eax eax +
jnz loc_100AF0D  +
mov eax 8000h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call sub_100859D  +
pop ecx  +
test al al +
jz loc_100AFBD  +
push 0  +
push [ebp+lpString]  +
call sub_100A6A8  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
push 5  +
push offset word_1007D5C  +
push [ebp+lpString]  +
call sub_100A8BD  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dwUILevel +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 5  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_100B000  +
mov ecx eax +
xor esi esi +
push esi  +
push ecx  +
call MsiSetInternalUI  +
mov ax word_100FE70 +
xor ebx ebx +
mov [ebp+var_21C] esi +
cmp ax si +
jz loc_100B037  +
cmp ax 41h +
jz loc_100B02A  +
push 57h  +
pop eax  +
jmp loc_100B14F  +
xor ebx ebx +
inc ebx  +
mov [ebp+var_21C] offset unk_100FE72 +
cmp String si +
jz loc_100B052  +
cmp ebx 1 +
jz loc_100B022  +
push 2  +
pop ebx  +
mov [ebp+var_21C] offset String +
movzx eax word ptr [edi] +
xor dl dl +
mov ecx edi +
cmp ax si +
jz loc_100B075  +
movzx eax ax +
cmp ax 3Bh +
jz loc_100B073  +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
cmp ax si +
jz loc_100B075  +
jmp loc_100B061  +
mov dl 1 +
cmp ebx esi +
jz loc_100B07E  +
cmp ebx 2 +
jnz loc_100B0A0  +
test dl dl +
jz loc_100B0A0  +
mov ecx szCommandLine +
movzx eax word ptr [ecx] +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
push [ebp+var_21C]  +
push edi  +
call DllUnregisterServer  +
jmp loc_100B0B3  +
push szCommandLine  +
push ebx  +
push [ebp+var_21C]  +
push edi  +
call MsiApplyPatchW  +
mov esi eax +
cmp esi 2 +
jnz loc_100B144  +
mov eax 104h +
mov [ebp+var_214] eax +
mov [ebp+var_210] eax +
lea eax [ebp+var_218] +
push eax  +
lea ecx [ebp+var_20C] +
push offset a_msp  +
push edi  +
mov [ebp+var_218] ecx +
call sub_100984F  +
add esp 0Ch +
test eax eax +
jz loc_100B139  +
test ebx ebx +
jz loc_100B116  +
cmp ebx esi +
jz loc_100B116  +
push szCommandLine  +
push ebx  +
push [ebp+var_21C]  +
push [ebp+var_218]  +
call MsiApplyPatchW  +
jmp loc_100B137  +
mov ecx szCommandLine +
movzx eax word ptr [ecx] +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
push [ebp+var_21C]  +
push [ebp+var_218]  +
call DllUnregisterServer  +
mov esi eax +
lea ecx [ebp+var_218] +
call sub_1001DE6  +
test esi esi +
jnz loc_100B14D  +
mov esi 8000h +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov [ebp+lpProcName] eax +
lea eax [ebp+var_20C] +
mov esi 104h +
push edi  +
mov [ebp+var_214] esi +
mov [ebp+lpPathName] eax +
call ds:lstrlenW  +
inc eax  +
cmp eax esi +
jle loc_100B1E5  +
push 0  +
push eax  +
lea ecx [ebp+lpPathName] +
call sub_1002465  +
test al al +
jnz loc_100B1E5  +
lea ecx [ebp+lpPathName] +
call sub_1001DE6  +
push 0Eh  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001D10  +
leave   +
retn   +
push ebx  +
push edi  +
push [ebp+var_214]  +
push [ebp+lpPathName]  +
call sub_1008E2C  +
test eax eax +
jge loc_100B20F  +
push 0Eh  +
pop ebx  +
lea ecx [ebp+lpPathName] +
call sub_1001DE6  +
mov eax ebx +
pop ebx  +
jmp loc_100B1D7  +
xor esi esi +
mov eax edi +
test edi edi +
jz loc_100B237  +
movzx ecx word ptr [edi] +
test cx cx +
jz loc_100B233  +
push eax  +
call sub_1008175  +
pop ecx  +
movzx ecx word ptr [eax] +
cmp cx 5Ch +
jnz loc_100B21A  +
mov esi eax +
jmp loc_100B21A  +
test esi esi +
jnz loc_100B23C  +
xor ebx ebx +
inc ebx  +
jmp loc_100B1FF  +
mov ecx [ebp+lpPathName] +
xor eax eax +
sub esi edi +
sar esi 1 +
push eax  +
mov [ecx+esi*2] ax +
call ds:CoInitialize  +
mov ebx eax +
test ebx ebx +
jnz loc_100B1FF  +
push 8  +
push eax  +
push edi  +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jz loc_100B287  +
push [ebp+lpPathName]  +
call ds:SetCurrentDirectoryW  +
test eax eax +
jnz loc_100B297  +
call ds:GetLastError  +
test eax eax +
jle loc_100B295  +
and eax edi +
or eax esi +
mov ebx eax +
push 0  +
push 0  +
call ds:SetThreadToken  +
test eax eax +
jnz loc_100B2B5  +
call ds:GetLastError  +
test eax eax +
jle loc_100B2B3  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jnz loc_100B2E3  +
push [ebp+lpProcName]  +
push [ebp+hLibModule]  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_100B2DF  +
call ds:GetLastError  +
test eax eax +
jle loc_100B2E1  +
and eax edi +
or eax esi +
jmp loc_100B2E1  +
call eax  +
mov ebx eax +
cmp [ebp+hLibModule] 0 +
jz loc_100B2F8  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
call ds:CoUninitialize  +
jmp loc_100B1FF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aDllregisterser  +
push [ebp+lpString]  +
call sub_100B171  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aDllunregisters  +
push [ebp+lpString]  +
call sub_100B171  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 86Ch +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
call ds:GetLastError  +
xor edi edi +
cmp dword_100FE08 0FFFFFFFFh +
mov ebx eax +
jnz loc_100B438  +
lea eax [ebp+cbData] +
push eax  +
mov dword_100FE08 edi +
mov [ebp+hKey] edi +
mov [ebp+cbData] 20019h +
call sub_1004283  +
pop ecx  +
lea eax [ebp+hKey] +
push eax  +
push [ebp+cbData]  +
push edi  +
push offset aSoftwarePolici  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100B438  +
lea eax [ebp+Data] +
mov [ebp+var_864] eax +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset aDebug  +
push [ebp+hKey]  +
mov [ebp+var_860] 28h +
mov [ebp+cbData] 50h +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100B421  +
mov eax [ebp+var_864] +
mov eax [eax] +
and eax 3 +
mov dword_100FE08 eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
lea ecx [ebp+var_864] +
call sub_1008E06  +
test dword_100FE08 3 +
jz loc_100B4AA  +
xor eax eax +
push 800h  +
mov [ebp+OutputString] ax +
lea eax [ebp-806h] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push esi  +
lea eax [ebp+OutputString] +
cmp dword ptr [ebp+arg_4] edi +
jz loc_100B486  +
push dword ptr [ebp+arg_4]  +
push offset aErrorD_S_  +
push 401h  +
push eax  +
call sub_1008F12  +
add esp 14h +
jmp loc_100B499  +
push offset aS  +
push 401h  +
push eax  +
call sub_1008F12  +
add esp 10h +
cmp eax edi +
jl loc_100B4AA  +
lea eax [ebp+OutputString] +
push eax  +
call ds:OutputDebugStringW  +
push ebx  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 940h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 800h  +
mov [ebp+Buffer] ax +
xor edi edi +
lea eax [ebp-81Ah] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
cmp dword ptr [ebp+dwMessageId] 641h +
mov [ebp+NumberOfBytesWritten] edi +
mov esi 401h +
jb loc_100B5CE  +
push edi  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [ebp+dwMessageId]  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
mov [ebp+var_940] eax +
cmp eax edi +
jnz loc_100B67F  +
call ds:GetACP  +
push offset aKernel32  +
mov [ebp+var_940] eax +
call ds:LoadLibraryW  +
mov ebx eax +
cmp ebx edi +
jz loc_100B62F  +
push offset aGetuserdefault  +
push ebx  +
call ds:GetProcAddress  +
cmp eax edi +
jz loc_100B628  +
call eax  +
movzx eax ax +
push 0Ah  +
lea ecx [ebp+LCData] +
mov [ebp+NumberOfBytesWritten] eax +
push ecx  +
movzx eax ax +
push 20001004h  +
push eax  +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_100B628  +
mov eax dword ptr [ebp+LCData] +
mov [ebp+var_940] eax +
push ebx  +
call ds:FreeLibrary  +
push edi  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
movzx eax word ptr [ebp+NumberOfBytesWritten] +
push eax  +
push dword ptr [ebp+dwMessageId]  +
push edi  +
push 1000h  +
call ds:FormatMessageW  +
cmp eax edi +
jz loc_100B65F  +
xor ecx ecx +
mov [ebp+eax*2+var_820] cx +
jmp loc_100B67F  +
push dword ptr [ebp+dwMessageId]  +
lea eax [ebp+Buffer] +
push offset aInstallErrorI  +
push esi  +
push eax  +
call sub_1008F12  +
add esp 10h +
test eax eax +
jl loc_100B791  +
mov eax hFile +
cmp dword_100FE58 edi +
jnz loc_100B744  +
cmp eax edi +
jz loc_100B69D  +
cmp eax 0FFFFFFFFh +
jnz loc_100B744  +
lea eax [ebp+var_8] +
mov esi 11Ch +
push esi  +
mov [ebp+var_14] eax +
xor ebx ebx +
lea eax [ebp+VersionInformation] +
push edi  +
inc ebx  +
push eax  +
mov [ebp+var_10] ebx +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
call ds:GetVersionExW  +
test eax eax +
jz loc_100B723  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
jb loc_100B723  +
push edi  +
push 100h  +
lea ecx [ebp+var_14] +
call sub_1008B11  +
test al al +
jz loc_100B723  +
push edi  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push 1Ch  +
push 0FFFFFFFFh  +
call MsiLoadStringW  +
test eax eax +
jz loc_100B723  +
push edi  +
push 0FFFEh  +
push ebx  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+var_14]  +
push edi  +
push edi  +
call off_100E0D8  +
test eax eax +
jge loc_100B73A  +
push edi  +
push [ebp+var_940]  +
lea eax [ebp+Buffer] +
push 10h  +
push edi  +
push eax  +
push edi  +
call MsiMessageBoxW  +
lea ecx [ebp+var_14] +
call sub_1001E0B  +
jmp loc_100B791  +
cmp eax edi +
jz loc_100B791  +
cmp eax 0FFFFFFFFh +
jz loc_100B791  +
lea eax [ebp+Buffer] +
push eax  +
call ds:lstrlenW  +
mov esi ds:WriteFile +
push edi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
add eax eax +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push hFile  +
call esi  +
push edi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 4  +
push offset dword_100B7A0  +
push hFile  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
movzx eax word ptr [esi] +
cmp ax 25h +
jz loc_100B809  +
push eax  +
call ds:IsCharAlphaNumericW  +
test eax eax +
jz loc_100B8FD  +
push edi  +
push 20h  +
pop edi  +
jmp loc_100B820  +
mov ecx edi +
cmp cx ax +
jz loc_100B828  +
push 3Dh  +
pop ecx  +
cmp cx ax +
jz loc_100B828  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100B80F  +
push 3Dh  +
pop eax  +
cmp ax [esi] +
jz loc_100B837  +
xor eax eax +
jmp loc_100B8FC  +
push ebx  +
push esi  +
call sub_100219C  +
pop ecx  +
mov esi eax +
push 22h  +
pop eax  +
xor ebx ebx +
cmp ax [esi] +
jnz loc_100B857  +
push eax  +
pop edi  +
push esi  +
inc ebx  +
call sub_100219C  +
pop ecx  +
mov esi eax +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100B894  +
cmp di ax +
jnz loc_100B876  +
test ebx ebx +
jz loc_100B887  +
push esi  +
call sub_100219C  +
pop ecx  +
cmp di [eax] +
jnz loc_100B887  +
mov esi eax +
push esi  +
call sub_100219C  +
mov esi eax +
movzx eax word ptr [esi] +
pop ecx  +
test ax ax +
jnz loc_100B85F  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100B894  +
cmp di ax +
jnz loc_100B8DB  +
test ebx ebx +
jz loc_100B8A1  +
push esi  +
call sub_100219C  +
pop ecx  +
mov esi eax +
mov ecx [ebp+arg_0] +
mov eax esi +
sub eax [ecx] +
sar eax 1 +
lea ebx [eax+1] +
cmp ebx 7FFFFFFFh +
jbe loc_100B8C6  +
push 0  +
push offset aPropertyValueI  +
call sub_100B355  +
pop ecx  +
xor eax eax +
jmp loc_100B8FA  +
mov edi [ebp+arg_4] +
cmp [edi+4] ebx +
jge loc_100B8DF  +
push ebx  +
mov ecx edi +
call sub_1008AC8  +
cmp dword ptr [edi] 0 +
jnz loc_100B8DF  +
xor eax eax +
jmp loc_100B8FB  +
push ebx  +
mov ebx [ebp+arg_0] +
push dword ptr [ebx]  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
call sub_1003A9E  +
push esi  +
call sub_100219C  +
mov [ebx] eax +
xor eax eax +
inc eax  +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D4h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
lea eax [ebp+var_D4] +
push eax  +
push offset dword_1001848  +
push 4  +
push 0  +
mov esi offset dword_100BA00 +
push esi  +
call off_100FE10  +
mov ebx eax +
test ebx ebx +
jz loc_100B9C4  +
xor eax eax +
push 0C6h  +
push eax  +
mov [ebp+var_CC] ax +
lea eax [ebp-0CAh] +
push eax  +
call memset  +
push ebx  +
push offset aFailedToConnec  +
lea eax [ebp+var_CC] +
push 64h  +
push eax  +
call sub_1008F12  +
add esp 1Ch +
test eax eax +
jl loc_100B9C0  +
lea eax [ebp+var_CC] +
push 0  +
push eax  +
call sub_100B355  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_100B9F0  +
mov eax [ebp+var_D4] +
and [ebp+var_D0] 0 +
mov ecx [eax] +
lea edx [ebp+var_D0] +
push edx  +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp+var_D4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_D0] +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
xor esi esi +
push 0F003Fh  +
push esi  +
push esi  +
mov [ebp+var_4] esi +
mov [ebp+var_C] esi +
call ds:OpenSCManagerW  +
mov [ebp+var_10] eax +
cmp eax esi +
jz loc_100BBB0  +
push 0F01FFh  +
push offset ServiceName  +
push eax  +
call ds:OpenServiceW  +
mov [ebp+hSCObject] eax +
cmp eax esi +
jz loc_100BB7C  +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+ServiceStatus] +
stos   +
lea eax [ebp+ServiceStatus] +
push eax  +
push 1  +
push [ebp+hSCObject]  +
call ds:ControlService  +
test eax eax +
jz loc_100BB19  +
mov esi ds:Sleep +
push ebx  +
mov ebx 3E8h +
push ebx  +
mov [ebp+ServiceStatus.dwCurrentState] 4 +
call esi  +
mov edi ds:QueryServiceStatus +
jmp loc_100BAFC  +
mov eax [ebp+var_C] +
inc [ebp+var_C]  +
cmp eax 5 +
jge loc_100BB09  +
cmp [ebp+ServiceStatus.dwCurrentState] 3 +
jnz loc_100BB09  +
push ebx  +
call esi  +
lea eax [ebp+ServiceStatus] +
push eax  +
push [ebp+hSCObject]  +
call edi  +
test eax eax +
jnz loc_100BAE8  +
cmp [ebp+ServiceStatus.dwCurrentState] 1 +
pop ebx  +
jz loc_100BB59  +
mov [ebp+var_4] 80004005h +
jmp loc_100BB70  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
sub eax 41Ch +
jz loc_100BB4D  +
sub eax 8 +
jz loc_100BB48  +
dec eax  +
dec eax  +
jz loc_100BB48  +
sub eax 0Fh +
jz loc_100BB48  +
push [ebp+var_4]  +
push offset aControlservice  +
call sub_100B355  +
pop ecx  +
pop ecx  +
jmp loc_100BB54  +
mov [ebp+var_4] esi +
jmp loc_100BB59  +
mov [ebp+var_4] 652h +
cmp [ebp+var_4] esi +
jnz loc_100BB70  +
push [ebp+hSCObject]  +
call ds:DeleteService  +
cmp eax 1 +
jz loc_100BB70  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
push [ebp+hSCObject]  +
call ds:CloseServiceHandle  +
pop edi  +
jmp loc_100BBA5  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
sub eax 424h +
jz loc_100BBA2  +
sub eax 0Ch +
jz loc_100BBA2  +
push [ebp+var_4]  +
push offset aOpenserviceFai  +
call sub_100B355  +
pop ecx  +
pop ecx  +
jmp loc_100BBA5  +
mov [ebp+var_4] esi +
push [ebp+var_10]  +
call ds:CloseServiceHandle  +
jmp loc_100BBC6  +
call ds:GetLastError  +
push eax  +
push offset aOpenscmanagerF  +
mov [ebp+var_4] eax +
call sub_100B355  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C08h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hKey] +
push ebx  +
mov ebx [ebp+lpSubKey] +
push esi  +
lea ecx [ebp+phkResult] +
push ecx  +
push 2001Fh  +
xor esi esi +
push esi  +
push ebx  +
push eax  +
mov [ebp+var_C08] eax +
call sub_1002171  +
add esp 14h +
cmp eax esi +
jz loc_100BC9E  +
cmp eax 2 +
setz al  +
jmp loc_100BDA8  +
push edi  +
lea ecx [ebp+hMem] +
call sub_1008D3A  +
mov edi ds:RegEnumKeyExW +
jmp loc_100BCC9  +
push [ebp+hMem]  +
push [ebp+phkResult]  +
call sub_100BC53  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100BD08  +
mov eax [ebp+var_BF8] +
push esi  +
push esi  +
push esi  +
push esi  +
mov [ebp+var_C04] eax +
lea eax [ebp+var_C04] +
push eax  +
push [ebp+hMem]  +
push esi  +
push [ebp+phkResult]  +
call edi  +
cmp eax esi +
jz loc_100BCB2  +
push [ebp+phkResult]  +
cmp eax 103h +
jz loc_100BD10  +
call ds:RegCloseKey  +
jmp loc_100BD71  +
push [ebp+phkResult]  +
jmp loc_100BD00  +
call ds:RegCloseKey  +
push ebx  +
push [ebp+var_C08]  +
call ds:RegDeleteKeyW  +
mov edi eax +
cmp edi esi +
jz loc_100BD8D  +
xor eax eax +
push 800h  +
mov [ebp+var_808] ax +
lea eax [ebp-806h] +
push esi  +
push eax  +
call memset  +
push ebx  +
push offset aFdeleteregtree  +
lea eax [ebp+var_808] +
push 401h  +
push eax  +
call sub_1008F12  +
add esp 1Ch +
test eax eax +
jl loc_100BD71  +
lea eax [ebp+var_808] +
push edi  +
push eax  +
call sub_100B355  +
pop ecx  +
pop ecx  +
cmp [ebp+var_BF8] 1F4h +
jle loc_100BD89  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
xor al al +
jmp loc_100BDA7  +
cmp [ebp+var_BF8] 1F4h +
jle loc_100BDA5  +
push [ebp+hMem]  +
call sub_1008836  +
pop ecx  +
mov al 1 +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001D10  +
leave   +
retn   +
***
call sub_100A2FB  +
pop ecx  +
pop ecx  +
retn   +
***
and dword_100FE54 0 +
push esi  +
push 0  +
call ds:CoInitialize  +
call sub_10088F2  +
test al al +
jz loc_100BE56  +
call sub_100BA67  +
test eax eax +
jz loc_100BE56  +
cmp eax 424h +
jz loc_100BE56  +
cmp eax 430h +
jnz loc_100BE7C  +
call sub_10096AF  +
mov esi eax +
test esi esi +
jnz loc_100BE7E  +
call sub_1009FC6  +
mov esi eax +
test esi esi +
jnz loc_100BE7E  +
call sub_1009107  +
mov esi eax +
test esi esi +
jnz loc_100BE7E  +
call sub_1009E29  +
mov esi eax +
call ds:CoUninitialize  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov dword_100FE54 1 +
call ds:CoInitialize  +
call sub_10088F2  +
test al al +
jz loc_100BED0  +
cmp [ebp+arg_0] edi +
jnz loc_100BED0  +
call sub_100BA67  +
cmp eax edi +
jz loc_100BED0  +
cmp eax 424h +
jz loc_100BED0  +
cmp eax 430h +
jz loc_100BED0  +
mov esi eax +
jmp loc_100BF20  +
call sub_10096AF  +
mov esi eax +
cmp esi edi +
jnz loc_100BF20  +
call sub_1009FC6  +
mov esi eax +
cmp esi edi +
jnz loc_100BF20  +
call sub_1009107  +
mov esi eax +
call sub_10088F2  +
test al al +
jz loc_100BF06  +
cmp [ebp+arg_0] edi +
jnz loc_100BF06  +
call sub_100A0DB  +
cmp eax edi +
jz loc_100BF06  +
mov esi eax +
cmp esi edi +
jnz loc_100BF20  +
call sub_1009E29  +
mov esi eax +
cmp esi edi +
jnz loc_100BF20  +
cmp [ebp+arg_0] edi +
jnz loc_100BF20  +
push edi  +
call MsiCreateAndVerifyInstallerDirectory  +
call ds:CoUninitialize  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
call ds:CoInitialize  +
call sub_10096AF  +
mov esi eax +
test esi esi +
jnz loc_100BF74  +
call sub_1009FC6  +
mov esi eax +
test esi esi +
jnz loc_100BF74  +
call sub_10088F2  +
test al al +
jz loc_100BF74  +
call sub_100BA67  +
test eax eax +
jz loc_100BF74  +
cmp eax 424h +
jz loc_100BF74  +
cmp eax 430h +
jz loc_100BF74  +
mov esi eax +
call ds:CoUninitialize  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
call ds:GetVersionExW  +
test eax eax +
jz loc_100BFDB  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
jb loc_100BFDB  +
mov eax 8000h +
jmp loc_100C020  +
mov esi ds:lstrcmpiW +
push offset aEgnoservice  +
push edi  +
call esi  +
test eax eax +
jnz loc_100BFF4  +
call sub_100BE26  +
jmp loc_100C017  +
push offset aEgserverca  +
push edi  +
call esi  +
test eax eax +
jnz loc_100C004  +
push 1  +
jmp loc_100C011  +
push offset aEgserver  +
push edi  +
call esi  +
test eax eax +
jnz loc_100C01D  +
push eax  +
call sub_100BE8D  +
pop ecx  +
test eax eax +
jz loc_100BFD4  +
jmp loc_100C020  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_100E00C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
call ds:GetVersionExW  +
test eax eax +
jz loc_100C0CA  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
jnb loc_100C10E  +
mov esi ds:lstrcmpiW +
push offset aNregister  +
push edi  +
call esi  +
test eax eax +
jz loc_100C105  +
push offset aNregserver  +
push edi  +
call esi  +
test eax eax +
jz loc_100C105  +
push offset aNregservice  +
push edi  +
call esi  +
test eax eax +
jz loc_100C105  +
push offset aNreg  +
push edi  +
call esi  +
test eax eax +
jz loc_100C105  +
xor eax eax +
inc eax  +
jmp loc_100C113  +
call sub_100BF31  +
test eax eax +
jnz loc_100C113  +
mov eax 8000h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001D10  +
leave   +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
cmp dword_100FE64 esi +
jz loc_100C195  +
cmp dword_100E078 esi +
jnz loc_100C195  +
push esi  +
call ds:PostQuitMessage  +
push esi  +
push esi  +
push esi  +
push dword_100E09C  +
mov ecx offset CriticalSection +
call sub_1001760  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
dec eax  +
push ebx  +
push 0  +
pop ebx  +
jz loc_100C1E9  +
sub eax 4 +
jnz loc_100C21D  +
mov byte_100FC04 1 +
call sub_10012E0  +
test al al +
jnz loc_100C21D  +
cmp dword_100E078 ebx +
jle loc_100C201  +
push dword_100E02C  +
call ds:SetEvent  +
jmp loc_100C21D  +
mov byte_100FC04 1 +
call sub_10012E0  +
test al al +
jnz loc_100C217  +
cmp dword_100E078 ebx +
jg loc_100C217  +
push ebx  +
push ebx  +
push ebx  +
push 3  +
mov ecx offset CriticalSection +
call sub_1001760  +
call sub_1001FE3  +
jmp loc_100C230  +
mov byte_100FC04 bl +
push ebx  +
push ebx  +
push ebx  +
push dword_100E09C  +
mov ecx offset CriticalSection +
call sub_1001760  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100C24D  +
inc dword_100E078  +
jmp loc_100C261  +
cmp dword_100E078 0 +
jz loc_100C261  +
dec dword_100E078  +
call sub_100C179  +
xor eax eax +
pop ebp  +
retn 8  +
***
call off_100E0D4  +
xor eax eax +
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE10  +
push offset aCocreateinstan  +
call sub_10042E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C29E  +
pop ebp  +
jmp off_100FE10  +
mov eax 80004005h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE14  +
push offset aCoishandlercon  +
call sub_10042E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C2DF  +
pop ebp  +
jmp off_100FE14  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset dword_1010468 +
jmp loc_100C317  +
push 0Ah  +
call ds:Sleep  +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_100C30F  +
cmp byte_100FE0C 0 +
mov ecx dword_1010464 +
pop esi  +
jz loc_100C351  +
test ecx ecx +
jnz loc_100C351  +
push offset aAdvapi32  +
call sub_1004361  +
pop ecx  +
mov ecx eax +
mov dword_1010464 ecx +
test ecx ecx +
jnz loc_100C351  +
mov byte_100FE0C al +
xor eax eax +
test ecx ecx +
jz loc_100C36A  +
push [ebp+lpProcName]  +
push ecx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100C36A  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
and dword_1010468 0 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE18  +
push offset aChangeservicec  +
call sub_100C302  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C3AC  +
pop ebp  +
jmp off_100FE18  +
push 1  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi offset dword_100FC34 +
jmp loc_100C3ED  +
push 0Ah  +
call ds:Sleep  +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_100C3E5  +
cmp byte_100FC0A 0 +
mov ecx dword_100FC30 +
mov [ebp+var_1] 0 +
pop esi  +
jz loc_100C42D  +
test ecx ecx +
jnz loc_100C42D  +
lea eax [ebp-1] +
push eax  +
call sub_1004A2C  +
pop ecx  +
mov ecx eax +
mov dword_100FC30 ecx +
test ecx ecx +
jnz loc_100C42D  +
mov al [ebp+var_1] +
mov byte_100FC0A al +
xor eax eax +
test ecx ecx +
jz loc_100C446  +
push [ebp+lpProcName]  +
push ecx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100C446  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
and dword_100FC34 0 +
leave   +
retn   +
***
call sub_100C3D7  +
pop ecx  +
pop ecx  +
test eax eax +
jz locret_100C46F  +
jmp off_100E0D4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100E0D8  +
push offset aTaskdialog  +
call sub_100C3D7  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C4A9  +
pop ebp  +
jmp off_100E0D8  +
mov eax 80004005h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset dword_1010470 +
jmp loc_100C4D9  +
push 0Ah  +
call ds:Sleep  +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_100C4D1  +
cmp byte_100FE1C 0 +
mov ecx dword_101046C +
pop esi  +
jz loc_100C513  +
test ecx ecx +
jnz loc_100C513  +
push offset aShell32  +
call sub_1004361  +
pop ecx  +
mov ecx eax +
mov dword_101046C ecx +
test ecx ecx +
jnz loc_100C513  +
mov byte_100FE1C al +
xor eax eax +
test ecx ecx +
jz loc_100C52C  +
push [ebp+lpProcName]  +
push ecx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100C52C  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
and dword_1010470 0 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE20  +
push offset aShchangenotify  +
call sub_100C4C4  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C56E  +
pop ebp  +
jmp off_100FE20  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset dword_1010478 +
jmp loc_100C59D  +
push 0Ah  +
call ds:Sleep  +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_100C595  +
cmp byte_100FE1D 0 +
mov ecx dword_1010474 +
pop esi  +
jz loc_100C5D7  +
test ecx ecx +
jnz loc_100C5D7  +
push offset aVersion  +
call sub_1004361  +
pop ecx  +
mov ecx eax +
mov dword_1010474 ecx +
test ecx ecx +
jnz loc_100C5D7  +
mov byte_100FE1D al +
xor eax eax +
test ecx ecx +
jz loc_100C5F0  +
push [ebp+lpProcName]  +
push ecx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100C5F0  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
and dword_1010478 0 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE24  +
push offset aGetfileversion  +
call sub_100C588  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C632  +
pop ebp  +
jmp off_100FE24  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE28  +
push offset aGetfileversi_0  +
call sub_100C588  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C676  +
pop ebp  +
jmp off_100FE28  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE2C  +
push offset aVerqueryvaluew  +
call sub_100C588  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C6B6  +
pop ebp  +
jmp off_100FE2C  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset dword_1010480 +
jmp loc_100C6E5  +
push 0Ah  +
call ds:Sleep  +
push esi  +
call sub_10019E3  +
cmp al 1 +
jz loc_100C6DD  +
cmp byte_100FE30 0 +
mov ecx dword_101047C +
pop esi  +
jz loc_100C71F  +
test ecx ecx +
jnz loc_100C71F  +
push offset aNtdll  +
call sub_1004361  +
pop ecx  +
mov ecx eax +
mov dword_101047C ecx +
test ecx ecx +
jnz loc_100C71F  +
mov byte_100FE30 al +
xor eax eax +
test ecx ecx +
jz loc_100C738  +
push [ebp+lpProcName]  +
push ecx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100C738  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
and dword_1010480 0 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE34  +
push offset aNtqueryinforma  +
call sub_100C6D0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C776  +
pop ebp  +
jmp off_100FE34  +
mov eax 8002802Fh +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE38  +
push offset aRtlinitunicode  +
call sub_100C6D0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C7C0  +
pop ebp  +
jmp off_100FE38  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset off_100FE3C  +
push offset aRtlcreateservi  +
call sub_100C6D0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C7FF  +
pop ebp  +
jmp off_100FE3C  +
mov eax 0C0000002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001D10  +
push offset dword_100E00C  +
call sub_100C84B  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_100C881  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_100C9A6  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_100C90B  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100C8DE  +
mov edx edi +
call sub_1004E29  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_100C915  +
jg loc_100C91E  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_100C8B3  +
cmp [ebp+var_1] 0 +
jz loc_100C90B  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100C8FD  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_100C8EB  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100C952  +
cmp dword_1010488 0 +
jz loc_100C952  +
push offset dword_1010488  +
call sub_100CAA0  +
add esp 4 +
test eax eax +
jz loc_100C952  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_1010488  +
add esp 8 +
mov ecx [ebp+arg_C] +
call sub_1004E59  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_100C973  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call sub_1004E73  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100C98B  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call sub_1004E40  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_100C90B  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call sub_1004E73  +
jmp loc_100C8EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100CA07  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100CA07  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100CA01  +
cmp eax 19930521h +
jz loc_100CA01  +
cmp eax 19930522h +
jz loc_100CA01  +
cmp eax 1994000h +
jnz loc_100CA07  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100CA33  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100CA2F  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100CA94  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100CA8C  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100CA96  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100CA7C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1001D8C  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_100CA1D  +
pop ecx  +
test eax eax +
jz loc_100CAFD  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_100CA57  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100CAFD  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100CB06  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1001A56  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100E1E0 eax +
mov dword_100E1DC ecx +
mov dword_100E1D8 edx +
mov dword_100E1D4 ebx +
mov dword_100E1D0 esi +
mov dword_100E1CC edi +
mov word_100E1F8 ss +
mov word_100E1EC cs +
mov word_100E1C8 ds +
mov word_100E1C4 es +
mov word_100E1C0 fs +
mov word_100E1BC gs +
pushf   +
pop dword_100E1F0  +
mov eax [ebp+0] +
mov dword_100E1E4 eax +
mov eax [ebp+4] +
mov dword_100E1E8 eax +
lea eax [ebp+8] +
mov dword_100E1F4 eax +
mov eax [ebp-320h] +
mov dword_100E130 10001h +
mov eax dword_100E1E8 +
mov dword_100E0EC eax +
mov dword_100E0E0 0C0000409h +
mov dword_100E0E4 1 +
mov eax dword_100E00C +
mov [ebp-328h] eax +
mov eax dword_100E010 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov eax dword_100E05C +
cmp eax 0FFFFFFFFh +
jz locret_100CD24  +
push eax  +
call ds:CloseHandle  +
retn   +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
retn 0D9h  +
***
