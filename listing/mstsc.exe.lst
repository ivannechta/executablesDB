or eax 7DFC74h +
jle loc_1003C9E  +
inc ecx  +
or edi ds:50BD2C2Eh +
retn   +
***
add al gs:[ecx] +
retn 266h  +
***
add esp esp +
add al [ecx] +
xchg eax esi +
sbb al [edx] +
add [ebx+66h] edx +
add al [ecx] +
dec ecx  +
add al [ecx] +
dec ecx  +
add al [ecx] +
dec ecx  +
add al [ecx] +
push ebx  +
add al [ecx] +
pop ebp  +
add al [ecx] +
push ebx  +
add al [ecx] +
dec ecx  +
add al [ecx] +
loope loc_1003C75  +
and [edi] cl +
add [edi-4] edx +
scas   +
nop   +
mov bh 0C3h +
stos   +
sub eax 0BA280732h +
mov edx 0C9ED2695h +
dec ecx  +
mov bh 4Fh +
xchg eax ebx +
mov cl 70h +
loope loc_1003C8F  +
dec ecx  +
clc   +
sub eax [eax] +
add edx ebp +
cwde   +
xor eax 690730Bh +
add al 47h +
std   +
iret   +
***
xchg eax ebp +
jmp loc_100A630  +
add [eax] eax +
cmps   +
retn   +
***
stos   +
test al 0Fh +
cmc   +
jge loc_100C53A  +
pop ecx  +
dec edi  +
mov cl 5Ch +
test eax 1FAEAC0Ch +
retf   +
***
aad  96h +
imul ecx [edi-4Fh] +
inc dword ptr [esi]  +
aaa   +
sbb [esi+69h] dl +
pop es  +
inc edx  +
push esp  +
setalc   +
leave   +
stc   +
mov al ds:738F45B2h +
setalc   +
sbb eax 0B6CBB82Dh +
iret   +
***
lods   +
mov cl 72h +
jb loc_100FD48  +
mov ah 40h +
mov ebx 13DA5713h +
retn   +
***
das   +
fcom  st(1) +
jle near ptr aTsclinkeditsav+0Fh  +
push cs  +
push ds  +
pop edi  +
xor ebx [edx+53A0B2DDh] +
jg near ptr loc_101030B+1  +
dec esi  +
test [edi-7Bh] eax +
sbb [edx-14h] edx +
mov word ptr [esi-638A8EEAh] ss +
inc ebx  +
test eax 6C0EAC4Dh +
ja near ptr aTsclinkeditsav+17h  +
push ebp  +
pusha   +
jnp near ptr stru_10102E0.Data4+7  +
inc esi  +
sbb ebx eax +
jb loc_101030B  +
inc ebp  +
lods   +
rcr eax 4Eh +
pop ebx  +
push es  +
loope loc_1010303  +
sub eax 3F840C74h +
jecxz loc_101029A  +
cmp [eax+35h] ebp +
mov al 74h +
add [ebp+0] ah +
jnb $+2  +
imul eax [eax] +
add [edi+0] ch +
jo $+2  +
inc ebx  +
add [eax+eax+69h] ch +
add [ebp+0] ah +
outs   +
add [eax+eax+2Dh] dh +
add [esi] bh +
add [ebx+0] dl +
jz $+2  +
popa   +
add [edx+0] dh +
jz $+2  +
push edx  +
add [ebp+0] ah +
ins  dx +
add [edi+0] ch +
jz $+2  +
add gs:[ecx+0] al +
jo $+2  +
jo $+2  +
ins  dx +
add [ecx+0] ch +
arpl [eax] ax +
popa   +
add [eax+eax+69h] dh +
add [edi+0] ch +
outs   +
add [eax] ah +
add [esi+0] ah +
popa   +
add [ecx+0] ch +
ins  dx +
add [ebp+0] ah +
add fs:[ecx] ah +
add [edx] ah +
retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1017BE3  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1017BE3  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1017BE3  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1017BE3  +
xor eax eax +
inc eax  +
jmp loc_1017BE5  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1017C02  +
cmp eax 0FFFFFFFFh +
jbe loc_1017C09  +
mov eax 80070057h +
jmp loc_1017C10  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1017BEE  +
test eax eax +
jge loc_1017C3A  +
xor eax eax +
jmp locret_1017C43  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1017BEE  +
test eax eax +
jge loc_1017C6D  +
xor eax eax +
jmp locret_1017C79  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call sub_1045E4F  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1017D18  +
cmp word ptr [edx] 0 +
jnz loc_1017CFD  +
push 0Eh  +
jmp loc_1017D1A  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1017D03  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1017D1B  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1017D2C  +
cmp word ptr [edx] 0 +
jnz loc_1017D31  +
mov edx offset aNull +
jmp loc_1017D31  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_1017D54  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1017DD2  +
cmp eax 0Ch +
jz loc_1017DCB  +
cmp eax 16h +
jz loc_1017DC4  +
cmp eax 22h +
jz loc_1017DC4  +
cmp eax 50h +
jz loc_1017DD2  +
push 80004005h  +
call loc_1017D72  +
push 80070057h  +
jmp loc_1017DBF  +
push 8007000Eh  +
jmp loc_1017DBF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1045E4F  +
add esp 10h +
push eax  +
call sub_1017D9A  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1045FAD  +
add esp 0Ch +
push eax  +
call sub_1017D9A  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1046114  +
add esp 10h +
push eax  +
call sub_1017D9A  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1045F2B  +
add esp 0Ch +
push eax  +
call sub_1017D9A  +
pop ebp  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1017EBF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
call ds:GetLastError  +
test eax eax +
jle locret_1017EE8  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_1017F04  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:WaitForSingleObject +
mov esi ecx +
xor ebx ebx +
push 0FFFFFFFFh  +
push dword ptr [esi+30h]  +
call edi  +
push dword ptr [esi+34h]  +
mov [esi+3Dh] bl +
push dword ptr [esi+30h]  +
call edi  +
test eax eax +
jz loc_1017F23  +
cmp [esi+3Dh] bl +
jnz loc_1017F1C  +
cmp [esi+8] ebx +
jnz loc_1017F1C  +
push dword ptr [esi+30h]  +
call ds:CloseHandle  +
push ebx  +
push ebx  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_1017FAC  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_1001A88  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_1017F9C  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_1017FA9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1017FF8  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jnb loc_1017FEA  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_1017FE1  +
mov eax [edi+10h] +
test eax eax +
jz loc_1017FDD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_1017FCA  +
pop edi  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
jmp loc_101801C  +
mov eax [esi] +
test eax eax +
jz loc_1018019  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_101800D  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_101807A  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_1018072  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_1018072  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_101806B  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_101806B  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_101804A  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10180C0  +
mov esi ds:CharNextW +
cmp word ptr [edi] 0 +
jz loc_10180C0  +
mov eax [ebp+lpsz] +
jmp loc_10180B3  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_10180B7  +
cmp [edi] cx +
jz loc_10180C8  +
push eax  +
call esi  +
test eax eax +
jnz loc_10180A3  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_1018098  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push edi  +
call esi  +
jmp loc_10180C2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
movzx eax word ptr [ebx] +
push esi  +
mov esi ds:CharUpperW +
push edi  +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jz loc_101814C  +
cmp di ax +
jnz loc_101813B  +
cmp di 20h +
jz loc_101813B  +
cmp di 9 +
jz loc_101813B  +
mov edi ds:CharNextW +
push ebx  +
call edi  +
push [ebp+lpsz]  +
mov ebx eax +
call edi  +
mov [ebp+lpsz] eax +
movzx eax word ptr [ebx] +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jnz loc_10180FD  +
test di di +
jz loc_101814C  +
cmp di 20h +
jz loc_101814C  +
cmp di 9 +
jnz loc_101815D  +
test ax ax +
jz loc_1018168  +
cmp ax 20h +
jz loc_1018168  +
cmp ax 9 +
jz loc_1018168  +
cmp di ax +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
jmp loc_101816A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_10181C8  +
cmp dword ptr [esi+8] 0 +
jnz loc_10181C8  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10181AA  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_10181C8  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_10181C8  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_10181DC  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_10181F2  +
mov eax [esi+8] +
test eax eax +
jz loc_10181EC  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_10181F2  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1018213  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1018255  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1018265  +
mov ecx esi +
call sub_10181FC  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10182A1  +
mov ecx esi +
call sub_10181FC  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_10182E6  +
push 80004005h  +
call loc_1017D72  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_101832C  +
push 80004005h  +
call loc_1017D72  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_101832E  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_101839E  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_101839E  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_10183BB  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_1017C19  +
mov [esi+8] eax +
test eax eax +
jz loc_10183D5  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_1018466  +
cmp ecx ebx +
jle loc_1018466  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_1018426  +
cmp edi 3FFFFFFFh +
jg loc_1018466  +
add edi edi +
cmp ecx edi +
jge loc_1018403  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_1017C4C  +
test eax eax +
jz loc_1018466  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_1018466  +
mov edx [esi+4] +
cmp eax edx +
jge loc_1018466  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_1018466  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1017DDB  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_1018468  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_1065F24 1 +
jnz loc_10184D7  +
or dword_1065F24 1 +
push 8  +
pop eax  +
mov word_1065F08 ax +
mov eax 4008h +
push 13h  +
mov word_1065F10 ax +
pop eax  +
push 11h  +
mov word_1065F18 ax +
pop eax  +
mov lpString2 offset aS_2 +
mov dword_1065F0C offset aM +
mov dword_1065F14 offset aD_0 +
mov dword_1065F1C offset aB +
mov word_1065F20 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_10184FB  +
inc esi  +
cmp esi 4 +
jb loc_10184DA  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_1065F08[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_10184F6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_1018547  +
cmp eax 39h +
jle loc_1018542  +
cmp eax 40h +
jle loc_1018547  +
cmp eax 46h +
jle loc_101853D  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_1018547  +
add eax 0FFFFFFA9h +
jmp loc_1018549  +
add eax 0FFFFFFC9h +
jmp loc_1018549  +
add eax 0FFFFFFD0h +
jmp loc_1018549  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1001B30[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_101857B  +
inc esi  +
cmp esi 0Eh +
jb loc_101855A  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_1001B34[esi*8] +
jmp loc_1018576  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_10185A7  +
jmp loc_10185B5  +
cmp cx [ebp+arg_4] +
jz loc_10185B1  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_101859A  +
jmp loc_10185B3  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_10185E1  +
cmp eax 0Ah +
jle loc_10185DC  +
cmp eax 0Dh +
jz loc_10185DC  +
cmp eax 20h +
jnz loc_10185E1  +
xor eax eax +
inc eax  +
jmp loc_10185E3  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_10185FF  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_10185BF  +
test eax eax +
jnz loc_10185F3  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_10185EC  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1018639  +
mov eax 80020009h +
jmp loc_1018719  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_10186C7  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_10186AA  +
mov ecx esi +
call sub_1018381  +
test eax eax +
jnz loc_10186B1  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1018670  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_101871E  +
test eax eax +
jle loc_10186A8  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_101869B  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1018656  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_101871E  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_1018715  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_10185BF  +
test eax eax +
jnz loc_1018710  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_101871E  +
test eax eax +
jle loc_1018707  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_10186FA  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_10186C7  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_1018717  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100199C +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1018757  +
add esi 4 +
cmp esi offset dword_10019CC +
jl loc_1018735  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1018752  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_101878A  +
xor eax eax +
jmp locret_1018793  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_10187F1  +
push esi  +
call sub_1018615  +
test eax eax +
jl loc_10187F3  +
mov ecx edi +
call sub_10185EC  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_1018615  +
test eax eax +
jl loc_10187F3  +
push esi  +
mov ecx edi +
call sub_1018615  +
test eax eax +
jl loc_10187F3  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101881C  +
mov eax 80070057h +
jmp loc_1018844  +
xor eax eax +
push esi  +
mov esi [edi+8] +
inc eax  +
jmp loc_101883E  +
test eax eax +
jl loc_1018843  +
mov ecx [esi] +
test ecx ecx +
jz loc_101883B  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push ecx  +
call sub_1017F5B  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_1018825  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_101886B  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_1018889  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_1018873  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_10188EF  +
cmp word ptr [edx] 0 +
jnz loc_10188D4  +
push 0Eh  +
jmp loc_10188F1  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10188DA  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10188F2  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1018903  +
cmp word ptr [edx] 0 +
jnz loc_1018908  +
mov edx offset aNull +
jmp loc_1018908  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1018944  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1017C9A  +
cmp dword ptr [esi] 0 +
jnz loc_1018938  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1018969  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1018978  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_101899E  +
cmp eax [ecx+8] +
jge loc_101899E  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10189D0  +
cmp eax [ecx+8] +
jge loc_10189D0  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1018A10  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_1018361  +
test al al +
jnz loc_1018A19  +
inc edi  +
cmp edi [esi+8] +
jl loc_10189F7  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_1018A13  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1017C82  +
test eax eax +
jnz loc_1018A4D  +
push 8007000Eh  +
call loc_1017D72  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1017BEE  +
test eax eax +
jge loc_1018A77  +
push eax  +
call loc_1017D72  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1017F0D  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov dword_1065EF0 esi +
mov ecx edx +
mov [esi+28h] eax +
call sub_1017E84  +
test eax eax +
jge loc_1018AED  +
mov byte_1065EE4 1 +
jmp loc_1018AF4  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1018B36  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1018B1C  +
push edi  +
call sub_101884E  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_1018B29  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_101826F  +
mov edi eax +
cmp edi esi +
jz loc_1018BB0  +
lea ecx [ebp+var_214] +
call sub_10181FC  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1018BCE  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1018B3E  +
cmp eax esi +
jnz loc_1018C19  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1018BB8  +
lea ecx [ebp+var_214] +
call sub_10181FC  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_1018176  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_10181FC  +
mov eax esi +
jmp loc_1018BA0  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1018C65  +
push edi  +
mov ecx esi +
call loc_1018984  +
push dword ptr [eax]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
push edi  +
mov ecx esi +
call loc_10189B5  +
push dword ptr [eax]  +
call ??_V@YAXPAX@Z  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_1018C3F  +
mov ecx esi +
call sub_1018950  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+lpString] 0 +
push esi  +
mov esi ecx +
jnz loc_1018C89  +
xor eax eax +
jmp loc_1018CAD  +
push [ebp+lpString]  +
and [ebp+var_4] 0 +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_10183E1  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1018931  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
add ecx 4 +
call sub_1018C32  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpString] ecx +
mov ecx [ebp+arg_C] +
xor edx edx +
mov [ebp+var_240] edi +
mov [ebp+pptlib] ecx +
cmp edi edx +
jz loc_1018EA0  +
cmp ecx edx +
jz loc_1018EA0  +
mov [edi] edx +
mov [ecx] edx +
mov esi 104h +
push esi  +
lea ecx [ebp+szFile] +
push ecx  +
push eax  +
mov [ebp+var_238] edx +
call ds:GetModuleFileNameW  +
mov ebx eax +
test ebx ebx +
jnz loc_1018D55  +
call sub_1017ED4  +
mov esi eax +
lea ecx [ebp+var_238] +
call sub_1018931  +
mov eax esi +
jmp loc_1018EA5  +
cmp ebx esi +
jnz loc_1018D60  +
mov esi 8007007Ah +
jmp loc_1018D43  +
xor esi esi +
lea eax [ebp+szFile] +
cmp [ebp+szFile] si +
jz loc_1018D9E  +
movzx ecx [ebp+szFile] +
movzx ecx cx +
cmp ecx 2Eh +
jz loc_1018D89  +
cmp ecx 5Ch +
jnz loc_1018D8B  +
xor esi esi +
jmp loc_1018D8B  +
mov esi eax +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1018D78  +
test esi esi +
jnz loc_1018DA6  +
mov [ebp+var_230] eax +
jmp loc_1018DAC  +
mov [ebp+var_230] esi +
cmp [ebp+lpString] 0 +
jz loc_1018DFA  +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea ecx [eax+ebx] +
cmp ecx ebx +
jb loc_1018E96  +
cmp ecx eax +
jb loc_1018E96  +
mov eax 10Eh +
cmp ecx eax +
jnb loc_1018E96  +
push [ebp+lpString]  +
sub eax ebx +
push eax  +
lea eax [ebp+ebx*2+szFile] +
push eax  +
call sub_1017E01  +
add esp 0Ch +
push [ebp+pptlib]  +
mov ebx ds:LoadTypeLib +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jge loc_1018E75  +
mov eax [ebp+var_230] +
mov esi offset a_tlb +
lea edi [ebp+var_10] +
movs   +
lea ecx [ebp+szFile] +
sub eax ecx +
sar eax 1 +
movs   +
lea ecx [eax+5] +
movs   +
cmp ecx 104h +
ja loc_1018E96  +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx 10Eh +
sub ecx eax +
push ecx  +
push [ebp+var_230]  +
call sub_1017E01  +
add esp 0Ch +
push [ebp+pptlib]  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jl loc_1018D43  +
mov edi [ebp+var_240] +
lea eax [ebp+szFile] +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
test eax eax +
jnz loc_1018D43  +
mov esi 8007000Eh +
jmp loc_1018D43  +
mov esi 80004005h +
jmp loc_1018D43  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10189E7  +
cmp eax 0FFFFFFFFh +
jnz loc_1018ED4  +
xor eax eax +
jmp loc_1018EDE  +
push eax  +
mov ecx esi +
call loc_10189B5  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_1018F02  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_1018F10  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_1018F34  +
push [ebp+arg_0]  +
call sub_1018A2F  +
jmp loc_1018F39  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_1018F60  +
push [ebp+arg_0]  +
call sub_1018A2F  +
jmp loc_1018F65  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
mov edi ecx +
call ds:CreateEventW  +
mov [edi+30h] eax +
cmp eax esi +
jnz loc_1018F92  +
xor eax eax +
jmp loc_1018FB8  +
push ebx  +
lea eax [ebp+ThreadId] +
push eax  +
push esi  +
push edi  +
push offset StartAddress  +
push esi  +
push esi  +
call ds:CreateThread  +
mov ebx eax +
cmp ebx esi +
jnz loc_1018FB5  +
push dword ptr [edi+30h]  +
call ds:CloseHandle  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi offset unk_1065EF4 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
mov dword ptr [esi] offset off_1001CF4 +
call sub_1018CB7  +
add esi 4 +
mov ecx esi +
call sub_1018C32  +
mov ecx esi +
pop esi  +
jmp sub_1018950  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_101901D  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018FE6  +
test [ebp+arg_0] 1 +
jz loc_1019050  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
mov [ebp+var_58] ebx +
test edi edi +
jz loc_101919C  +
test ebx ebx +
jz loc_101919C  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp+var_54] +
call sub_10183A6  +
xor ecx ecx +
cmp [ebp+pv] ecx +
jnz loc_10190B9  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_10191A1  +
mov [esi] edi +
mov [ebp+var_48] ecx +
cmp [edi] cx +
jz loc_101916B  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_1019147  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_1019147  +
push 25h  +
push eax  +
call sub_1018589  +
mov edi eax +
test edi edi +
jz loc_1019181  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_101918A  +
push eax  +
push ecx  +
lea eax [ebp+var_44] +
push 20h  +
push eax  +
call sub_1017E24  +
lea eax [ebp+var_44] +
add esp 10h +
mov [ebp+var_5C] eax +
mov eax [esi+4] +
lea ecx [ebp+var_5C] +
push ecx  +
lea ecx [eax+4] +
call sub_1018EBB  +
test eax eax +
jz loc_1019181  +
push eax  +
lea ecx [ebp+var_54] +
call sub_1018C76  +
test eax eax +
jz loc_1019193  +
cmp [esi] edi +
jz loc_1019156  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_101913B  +
jmp loc_1019156  +
push 1  +
push eax  +
lea ecx [ebp+var_54] +
call sub_10183E1  +
test eax eax +
jz loc_1019193  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_10190CD  +
mov ebx [ebp+var_58] +
xor ecx ecx +
mov eax [ebp+pv] +
mov [ebp+pv] ecx +
mov [ebx] eax +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+var_48] +
jmp loc_10191A1  +
mov [ebp+var_48] 80020009h +
jmp loc_1019173  +
mov [ebp+var_48] 80004005h +
jmp loc_1019173  +
mov [ebp+var_48] 8007000Eh +
jmp loc_1019173  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+libID]  +
push [ebp+hModule]  +
call sub_1018CD0  +
mov esi eax +
test esi esi +
jl loc_101921B  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+libID] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jl loc_101921B  +
mov eax [ebp+libID] +
push dword ptr [eax+14h]  +
movzx ecx word ptr [eax+1Ah] +
push dword ptr [eax+10h]  +
push ecx  +
movzx ecx word ptr [eax+18h] +
push ecx  +
push eax  +
call ds:UnRegisterTypeLib  +
push [ebp+libID]  +
mov esi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1019228  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+ptlib] +
push ecx  +
lea ecx [ebp+szFullPath] +
push ecx  +
push edi  +
xor ebx ebx +
push eax  +
mov [ebp+szFullPath] ebx +
mov [ebp+ptlib] ebx +
call sub_1018CD0  +
mov esi eax +
cmp esi ebx +
jl loc_101939F  +
mov eax [ebp+ptlib] +
lea edx [ebp+var_218] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
mov [ebp+var_218] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_101937E  +
cmp [ebp+var_218] ebx +
jz loc_101937E  +
push [ebp+szFullPath]  +
call ds:SysStringLen  +
push eax  +
push [ebp+szFullPath]  +
lea eax [ebp+sz] +
push 104h  +
push eax  +
call sub_1017E24  +
xor eax eax +
add esp 10h +
mov [ebp+var_6] ax +
cmp edi ebx +
jz loc_1019323  +
mov esi ds:lstrlenW +
lea eax [ebp+sz] +
push eax  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
mov ecx eax +
mov edx ebx +
sub edx ecx +
lea eax [ebp+edx*2+sz] +
mov esi eax +
xor ebx ebx +
cmps   +
jnz loc_1019321  +
cmp edx 104h +
jnb loc_1019321  +
xor ecx ecx +
mov [eax] cx +
xor ebx ebx +
lea edi [ebp+sz] +
mov esi edi +
cmp [ebp+sz] bx +
jz loc_1019359  +
push esi  +
call ds:CharNextW  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_1019350  +
cmp cx 2Fh +
jz loc_1019350  +
cmp cx 3Ah +
jnz loc_1019352  +
mov edi eax +
mov esi eax +
cmp [eax] bx +
jnz loc_1019334  +
lea eax [ebp+sz] +
sub edi eax +
sar edi 1 +
cmp edi 104h +
jnb loc_1019375  +
xor eax eax +
mov [ebp+edi*2+sz] ax +
lea eax [ebp+sz] +
push eax  +
jmp loc_101937F  +
push ebx  +
push [ebp+szFullPath]  +
push [ebp+ptlib]  +
call ds:RegisterTypeLib  +
push [ebp+var_218]  +
mov esi eax +
call ds:SysFreeString  +
mov eax [ebp+ptlib] +
cmp eax ebx +
jz loc_10193AF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+szFullPath]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1BCh +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+rguid] eax +
mov [ebp+ppv] ebx +
cmp esi ebx +
jnz loc_1019409  +
xor eax eax +
jmp loc_101964B  +
push offset dword_100C334  +
push eax  +
call sub_1017BB5  +
test eax eax +
jnz loc_1019402  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_1019448  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1019402  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1019402  +
mov eax esi +
push edi  +
mov [ebp+cSubKeys] eax +
cmp [esi] ebx +
jnz loc_1019661  +
cmp [ebp+arg_8] ebx +
jnz loc_1019638  +
push 40h  +
lea eax [ebp+sz] +
push eax  +
push [ebp+rguid]  +
call ds:StringFromGUID2  +
push offset aClsid  +
mov esi 80h +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
mov [ebp+var_1BC] ebx +
call sub_1045FAD  +
add esp 0Ch +
push eax  +
call sub_1017D9A  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1017E4A  +
push offset aRequiredCatego  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1045F2B  +
add esp 18h +
push eax  +
call sub_1017D9A  +
mov edi 20019h +
push edi  +
lea ecx [ebp+SubKey] +
mov eax 80000000h +
push ecx  +
push eax  +
lea ecx [ebp+hKey] +
mov [ebp+var_1B8] eax +
mov [ebp+var_1B4] ebx +
mov [ebp+var_1B0] ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_1A8] ebx +
mov [ebp+var_1A4] ebx +
mov [ebp+cSubKeys] ebx +
call sub_101826F  +
test eax eax +
jnz loc_1019568  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov [ebp+rguid] eax +
call sub_10181FC  +
cmp [ebp+rguid] ebx +
jnz loc_1019568  +
cmp [ebp+cSubKeys] ebx +
jnz loc_1019568  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1018176  +
push offset aClsid  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1045FAD  +
add esp 0Ch +
push eax  +
call sub_1017D9A  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1017E4A  +
push offset aImplementedCat  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1045F2B  +
add esp 18h +
push eax  +
call sub_1017D9A  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_1B8]  +
lea ecx [ebp+hKey] +
call sub_101826F  +
test eax eax +
jnz loc_1019617  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov esi eax +
call sub_10181FC  +
cmp esi ebx +
jnz loc_1019617  +
cmp [ebp+cSubKeys] ebx +
jnz loc_1019617  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1018176  +
lea ecx [ebp+hKey] +
call sub_10181FC  +
lea ecx [ebp+var_1B8] +
call sub_10181FC  +
lea ecx [ebp+var_1BC] +
call sub_1018931  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1019648  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
mov eax [ebp+cSubKeys] +
mov esi [eax+4] +
lea edi [ebp+var_194] +
movs   +
movs   +
lea edx [ebp+var_194] +
movs   +
push edx  +
push 1  +
push [ebp+rguid]  +
movs   +
cmp [ebp+arg_8] ebx +
jz loc_10196B2  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_1019695  +
call dword ptr [ecx+14h]  +
jmp loc_1019698  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jge loc_10196C8  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_10196AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_101964A  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_10196C5  +
call dword ptr [ecx+18h]  +
jmp loc_10196C8  +
call dword ptr [ecx+20h]  +
add [ebp+cSubKeys] 8 +
mov eax [ebp+cSubKeys] +
cmp [eax] ebx +
jnz loc_101965B  +
jmp loc_1019459  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_10659D0 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1019708  +
xor eax eax +
jmp loc_1019736  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_1019704  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_1018EE8  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1018A59  +
push eax  +
mov ecx esi +
call sub_1018F19  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1018A59  +
push eax  +
mov ecx esi +
call sub_1018F45  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1018A59  +
push eax  +
mov ecx esi +
call sub_1018F45  +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset GetCurrentThreadId +
and dword ptr [esi+30h] 0 +
push 0  +
mov [esi+2Ch] eax +
mov dword ptr [esi+34h] 1388h +
mov dword ptr [esi+38h] 3E8h +
mov byte ptr [esi+3Ch] 1 +
mov byte ptr [esi+3Eh] 0 +
call ds:CoInitialize  +
test eax eax +
jge loc_1019805  +
cmp eax 80010106h +
jnz loc_10197FC  +
push offset aMscoree_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_1019809  +
mov byte_1065EE4 1 +
jmp loc_1019815  +
mov byte ptr [esi+3Eh] 1 +
push 1  +
mov ecx offset unk_1066080 +
call sub_1017FFF  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi offset unk_1066080 +
push 0  +
mov ecx esi +
call sub_1017FFF  +
mov ecx edi +
call sub_1018AFE  +
mov ecx esi +
call sub_1017FB6  +
cmp byte ptr [edi+3Eh] 0 +
jz loc_101984C  +
call ds:CoUninitialize  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1018AFE  +
***
mov edi edi +
push esi  +
push edi  +
push 1  +
push 4  +
push offset unk_1066080  +
mov esi ecx +
call sub_1018808  +
mov edi eax +
test edi edi +
jnz loc_101988B  +
cmp [esi+3Ch] al +
jz loc_101988F  +
mov ecx esi +
call sub_1018F71  +
test eax eax +
jnz loc_101988F  +
mov edi 80004005h +
jmp loc_101988F  +
mov byte ptr [esi+3Ch] 0 +
mov eax edi +
pop edi  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
mov [ebp+var_18] ecx +
cmp [ebp+lpString] eax +
jz loc_101997B  +
cmp [ebp+arg_4] eax +
jz loc_101997B  +
push ebx  +
push esi  +
mov esi ds:lstrlenW +
push edi  +
push [ebp+lpString]  +
mov [ebp+var_4] eax +
call esi  +
lea edi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
push [ebp+arg_4]  +
mov ebx eax +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call esi  +
lea esi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
test ebx ebx +
jz loc_101994B  +
test eax eax +
jz loc_101994B  +
push edi  +
push [ebp+lpString]  +
push edi  +
push ebx  +
call sub_1017DDB  +
push esi  +
push [ebp+arg_4]  +
push esi  +
push [ebp+var_8]  +
call sub_1017DDB  +
mov ecx [ebp+var_18] +
add esp 20h +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_10196E3  +
test eax eax +
jnz loc_1019954  +
mov [ebp+var_4] 8007000Eh +
jmp loc_101995C  +
and [ebp+var_10] 0 +
and [ebp+var_C] 0 +
push [ebp+var_C]  +
call ??_V@YAXPAX@Z  +
push [ebp+var_10]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
pop ecx  +
xor eax eax +
cmp [ebp+var_4] eax +
pop edi  +
pop esi  +
setnl al  +
pop ebx  +
jmp locret_101997D  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
cmp [ebp+lpString] eax +
jz loc_10199CC  +
cmp [ebp+arg_8] eax +
jz loc_10199CC  +
mov ecx [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
add ecx 4 +
push [ebp+lpString]  +
mov [ebp+var_4] eax +
call sub_101989B  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
lea ecx [ebp+var_4] +
add esi 8007000Eh +
call sub_1018931  +
mov eax esi +
pop esi  +
jmp locret_10199D1  +
mov eax 80070057h +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 211Ch +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_211C] eax +
lea eax [ebp+String1] +
xor edi edi +
push eax  +
mov [ebp+var_2118] ecx +
mov [ebp+var_2114] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_210C] edi +
call sub_1018615  +
cmp eax edi +
jl loc_1019CB7  +
lea eax [ebp+var_210C] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call sub_1018474  +
test eax eax +
jnz loc_1019A54  +
mov eax 80020009h +
jmp loc_1019CB7  +
mov ecx [ebp+var_2118] +
call sub_10185EC  +
mov ecx [ebp+var_2118] +
lea eax [ebp+String1] +
push eax  +
call sub_1018615  +
cmp eax edi +
jl loc_1019CB7  +
movzx eax word ptr [ebp+var_210C] +
sub eax 8 +
jz loc_1019C81  +
sub eax 9 +
jz loc_1019B9A  +
dec eax  +
dec eax  +
jz loc_1019B5E  +
sub eax 3FF5h +
jnz loc_1019CA0  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
push eax  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_1019765  +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_1019B39  +
cmp [ebp+String1] 0 +
lea edi [ebp+String1] +
jz loc_1019B13  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_1019B06  +
cmp word ptr [eax] 30h +
jnz loc_1019B06  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_1019B0D  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_1019AE6  +
mov ecx [ebp+var_2114] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_1018311  +
mov esi eax +
xor edi edi +
jmp loc_1019B3C  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1019C94  +
lea ecx [ebp+lpData] +
call sub_1018A22  +
jmp loc_1019C94  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String1] +
push eax  +
mov [ebp+var_2114] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_10182AB  +
lea ecx [ebp+var_2114] +
mov esi eax +
call sub_1018931  +
jmp loc_1019C94  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_210C] eax +
test al 1 +
jz loc_1019BBB  +
mov eax 80004005h +
jmp loc_1019CB7  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
push ebx  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_1019789  +
cmp [ebp+lpData] edi +
jnz loc_1019BF3  +
lea eax [ebp+var_2104] +
test eax eax +
jz loc_1019BB1  +
lea ecx [ebp+lpData] +
call sub_1018A22  +
jmp loc_1019BB1  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_210C] edi +
jle loc_1019C4B  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax [ebp+edi*2+String1] +
push eax  +
call sub_1018513  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_210C] +
jl loc_1019C0B  +
mov esi [ebp+var_2114] +
xor edi edi +
mov esi [esi] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push esi  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1019C94  +
lea ecx [ebp+lpData] +
call sub_1018A22  +
jmp loc_1019C94  +
push 1  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
mov ecx esi +
call sub_10182CE  +
mov esi eax +
cmp esi edi +
jz loc_1019CA0  +
push esi  +
call sub_1017EEE  +
jmp loc_1019CB7  +
push [ebp+var_211C]  +
mov ecx [ebp+var_2118] +
call sub_1018615  +
cmp eax edi +
jl loc_1019CB7  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_2214] eax +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_2210] ecx +
mov [ebp+var_2220] ebx +
mov [ebp+var_221C] ebx +
mov [ebp+var_2218] ebx +
mov [ebp+var_2258] eax +
call sub_1018615  +
mov esi eax +
cmp esi ebx +
jmp loc_101A227  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2224] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_1019D5A  +
test ebx ebx +
jz loc_1019E17  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1018615  +
mov esi eax +
test esi esi +
jl loc_101A291  +
cmp [ebp+arg_8] 0 +
jz loc_1019E17  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_2230] esi +
mov [ebp+var_222C] esi +
mov [ebp+var_2228] esi +
call sub_1018589  +
test eax eax +
jnz loc_101A235  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_101872A  +
test eax eax +
jz loc_1019DCC  +
mov eax [ebp+var_2214] +
push edi  +
lea ecx [ebp+var_2230] +
mov [ebp+var_2230] eax +
call sub_1018B3E  +
mov [ebp+var_2230] esi +
cmp ebx esi +
jz loc_1019E0C  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1018615  +
mov esi eax +
test esi esi +
jl loc_101A247  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_101879C  +
lea ecx [ebp+var_2230] +
mov esi eax +
call sub_10181FC  +
test esi esi +
jl loc_101A291  +
jmp loc_101A1E2  +
lea ecx [ebp+var_2230] +
call sub_10181FC  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1019E43  +
mov ecx [ebp+var_2210] +
and [ebp+var_2224] eax +
push edi  +
call sub_1018615  +
mov esi eax +
test esi esi +
jl loc_101A291  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1019F60  +
mov ecx [ebp+var_2210] +
lea eax [ebp+ValueName] +
push eax  +
call sub_1018615  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_101A291  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1018615  +
mov esi eax +
cmp esi ebx +
jl loc_101A291  +
cmp word ptr [edi] 3Dh +
jnz loc_101A240  +
cmp [ebp+arg_8] ebx +
jz loc_1019EE6  +
mov eax [ebp+var_2214] +
mov ecx [ebp+var_2210] +
mov [ebp+var_2248] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2248] +
push eax  +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_10199DA  +
lea ecx [ebp+var_2248] +
mov esi eax +
mov [ebp+var_2248] ebx +
call sub_10181FC  +
cmp esi ebx +
jmp loc_1019E01  +
cmp [ebp+arg_C] ebx +
jnz loc_1019F4F  +
cmp [ebp+var_2224] ebx +
jz loc_1019F4F  +
push 20006h  +
push ebx  +
push [ebp+var_2214]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2238] ebx +
mov [ebp+var_2234] ebx +
call sub_101826F  +
cmp eax ebx +
jnz loc_101A24F  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_1019F44  +
cmp eax 2 +
jnz loc_101A24F  +
lea ecx [ebp+hKey] +
call sub_10181FC  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_101879C  +
jmp loc_1019D1E  +
push 5Ch  +
push edi  +
call sub_1018589  +
test eax eax +
jnz loc_101A240  +
cmp [ebp+arg_8] eax +
jz loc_101A00F  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_101826F  +
test eax eax +
jz loc_1019FD3  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_101826F  +
test eax eax +
jz loc_1019FD3  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_101821A  +
mov esi eax +
cmp esi ebx +
jnz loc_101A25D  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1018615  +
mov esi eax +
test esi esi +
jl loc_101A291  +
cmp word ptr [edi] 3Dh +
jnz loc_101A1E2  +
mov ecx [ebp+var_2210] +
push edi  +
push 0  +
lea eax [ebp+var_2220] +
push eax  +
call sub_10199DA  +
mov esi eax +
jmp loc_1019DFF  +
cmp [ebp+arg_C] 0 +
jnz loc_101A030  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_101826F  +
mov ebx eax +
jmp loc_101A033  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_101A03E  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call sub_1046114  +
add esp 10h +
push eax  +
call sub_1017D9A  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1018615  +
mov esi eax +
test esi esi +
jl loc_101A291  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_101879C  +
mov esi eax +
test esi esi +
jl loc_101A291  +
cmp word ptr [edi] 7Bh +
jnz loc_101A0D6  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_101A0D6  +
push [ebp+arg_C]  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+var_2220]  +
push edi  +
call sub_1019CCD  +
mov esi eax +
test esi esi +
jge loc_101A0C0  +
cmp [ebp+arg_C] 0 +
jz loc_101A291  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1018615  +
mov esi eax +
test esi esi +
jl loc_101A291  +
mov eax [ebp+var_2258] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_101A229  +
test ebx ebx +
jz loc_101A101  +
test eax eax +
jnz loc_101A229  +
push ebx  +
call sub_1017EEE  +
mov esi eax +
jmp loc_101A291  +
test eax eax +
jz loc_101A158  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_1018760  +
test eax eax +
jz loc_101A158  +
mov ecx [ebp+var_2210] +
lea eax [ebp+SubKey] +
push eax  +
call sub_101872A  +
test eax eax +
jz loc_101A229  +
cmp [ebp+var_2224] 0 +
jz loc_101A229  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2220] +
call sub_1018B3E  +
jmp loc_101A229  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_1018760  +
lea ecx [ebp+var_2220] +
mov [ebp+var_225C] eax +
call sub_10181FC  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_101A270  +
cmp [ebp+var_2224] eax +
jz loc_101A229  +
cmp [ebp+var_225C] eax +
jnz loc_101A229  +
mov [ebp+var_2250] eax +
mov [ebp+var_224C] eax +
mov eax [ebp+var_2214] +
mov [ebp+var_2254] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2254] +
call sub_1018176  +
and [ebp+var_2254] 0 +
test eax eax +
jnz loc_101A27E  +
lea ecx [ebp+var_2254] +
call sub_10181FC  +
cmp [ebp+arg_8] 0 +
jz loc_101A229  +
cmp word ptr [edi] 7Bh +
jnz loc_101A229  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_101A229  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_2220]  +
push edi  +
call sub_1019CCD  +
mov esi eax +
test esi esi +
jl loc_101A291  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1018615  +
mov esi eax +
test esi esi +
jl loc_101A291  +
cmp word ptr [edi] 7Dh +
jnz loc_1019D27  +
jmp loc_101A291  +
lea ecx [ebp+var_2230] +
call sub_10181FC  +
mov esi 80020009h +
jmp loc_101A291  +
lea ecx [ebp+var_2230] +
jmp loc_101A28C  +
push eax  +
call sub_1017EEE  +
lea ecx [ebp+hKey] +
jmp loc_101A28A  +
lea ecx [ebp+var_2220] +
call sub_10181FC  +
push esi  +
call sub_1017EEE  +
jmp loc_101A29E  +
lea ecx [ebp+var_2220] +
call sub_10181FC  +
push ebx  +
jmp loc_101A269  +
push eax  +
call sub_1017EEE  +
lea ecx [ebp+var_2254] +
mov esi eax +
call sub_10181FC  +
lea ecx [ebp+var_2220] +
call sub_10181FC  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101A2CA  +
mov eax 80070057h +
jmp loc_101A33D  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_101A32B  +
mov ebx [edx] +
test ebx ebx +
jz loc_101A319  +
cmp [ebp+arg_8] 0 +
jz loc_101A2F9  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_101A319  +
push 1  +
call dword ptr [ebx+4]  +
test eax eax +
jl loc_101A33B  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_10193D3  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_101A33B  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_101A2DC  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_101A33B  +
cmp [ebp+arg_4] 0 +
jz loc_101A33B  +
push 0  +
push dword ptr [esi+4]  +
call sub_101923D  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101A35D  +
mov eax 80070057h +
jmp loc_101A3D0  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_101A3BE  +
mov ebx [edx] +
test ebx ebx +
jz loc_101A3AC  +
cmp [ebp+arg_8] 0 +
jz loc_101A38C  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_101A3AC  +
push 0  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_10193D3  +
test eax eax +
jl loc_101A3CE  +
push 0  +
call dword ptr [ebx+4]  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_101A3CE  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_101A36F  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_101A3CE  +
cmp [ebp+arg_4] 0 +
jz loc_101A3CE  +
push 0  +
push dword ptr [esi+4]  +
call sub_10191B7  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset a6b1de8b3Dfb14c  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_101A42B  +
mov eax 80004003h +
jmp loc_101A45C  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_101A44D  +
push esi  +
push offset stru_1001DC4  +
push 1  +
push edi  +
push offset stru_100194C  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_101A459  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
xor eax eax +
cmp edi eax +
jnz loc_101A4A0  +
cmp [esi+3Ch] al +
jz loc_101A493  +
push dword ptr [esi+30h]  +
mov byte ptr [esi+3Dh] 1 +
call ds:SetEvent  +
jmp loc_101A4A0  +
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101981E  +
test byte ptr [ebp+8] 1 +
jz loc_101A4C4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
call sub_101C646  +
push eax  +
lea ecx [ebp+var_4] +
call sub_101C97A  +
mov esi ds:GetMessageW +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
mov ebx [ebp+var_4] +
jmp loc_101A531  +
lea eax [ebp+Msg] +
push eax  +
push [ebp+hAccTable]  +
mov ecx ebx +
call sub_101D003  +
test eax eax +
jnz loc_101A528  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_101A502  +
lea ecx [ebx+4] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
test eax eax +
jge loc_101A565  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101A565  +
test byte ptr [eax+1Ch] 4 +
jz loc_101A565  +
push offset dword_10019EC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp ebx edi +
jz loc_101A56F  +
push ebx  +
call sub_1018A83  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpString] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_101905C  +
mov edi eax +
test edi edi +
jl loc_101A672  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_101A664  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1018615  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_101A663  +
lea eax [ebp+String1] +
push eax  +
call sub_1018552  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_101A6AC  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1018615  +
mov edi eax +
cmp edi ebx +
jl loc_101A663  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_101A6AC  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_101A682  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_1019CCD  +
mov edi eax +
test edi edi +
jge loc_101A696  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_1019CCD  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_1019CCD  +
mov edi eax +
cmp edi ebx +
jl loc_101A663  +
mov ecx esi +
call sub_10185EC  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_101A5CF  +
jmp loc_101A663  +
mov edi 80020009h +
jmp loc_101A663  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_1066080  +
call sub_101A2B4  +
test eax eax +
jl loc_101A6E3  +
mov ecx dword_1065EE8 +
test ecx ecx +
jz loc_101A6E3  +
push hModule  +
call ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1065EEC +
test eax eax +
jz loc_101A700  +
call eax  +
test eax eax +
jl loc_101A710  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_1066080  +
call sub_101A347  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpLibFileName] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push 2  +
push edi  +
push eax  +
mov [ebp+var_410] edi +
mov [ebp+var_414] ecx +
mov [ebp+var_418] edi +
mov [ebp+lpString] edi +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
cmp eax edi +
jnz loc_101A774  +
call sub_1017ED4  +
mov esi eax +
jmp loc_101A855  +
push ebx  +
push esi  +
push eax  +
call ds:FindResourceW  +
mov esi eax +
cmp esi edi +
jnz loc_101A78D  +
call sub_1017ED4  +
jmp loc_101A847  +
push esi  +
push [ebp+hLibModule]  +
call ds:LoadResource  +
mov ebx eax +
cmp ebx edi +
jz loc_101A783  +
push esi  +
push [ebp+hLibModule]  +
call ds:SizeofResource  +
mov esi eax +
lea eax [esi+1] +
cmp eax esi +
jnb loc_101A7F2  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_101A7CF  +
lea ecx [ebp+lpString] +
call sub_1018A22  +
mov esi 8007000Eh +
lea ecx [ebp+var_410] +
call sub_1018931  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
push eax  +
lea ecx [ebp+lpString] +
call sub_1019741  +
cmp [ebp+lpString] edi +
jnz loc_101A80D  +
mov esi 8007000Eh +
jmp loc_101A849  +
push esi  +
push [ebp+lpString]  +
push esi  +
push ebx  +
push edi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax edi +
jz loc_101A783  +
mov edx [ebp+lpString] +
push [ebp+arg_C]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push [ebp+lpString]  +
lea ecx [ebp+var_418] +
call sub_101A57B  +
mov esi eax +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_101A7D4  +
lea ecx [ebp+lpString] +
call sub_1018A22  +
jmp loc_101A7D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 1  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_101A719  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1018931  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 0  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_101A719  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1018931  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_A4C] offset off_1001CF4 +
mov [ebp+var_A48] ebx +
mov [ebp+var_A44] ebx +
mov [ebp+var_A40] ebx +
cmp esi ebx +
jz loc_101A943  +
jmp loc_101A93D  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_1019986  +
add esi 8 +
mov eax [esi] +
cmp eax ebx +
jnz loc_101A92A  +
mov eax [edi] +
lea ecx [ebp+var_A4C] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
cmp eax ebx +
jge loc_101A975  +
mov esi eax +
lea ecx [ebp+var_A4C] +
call sub_1018FE6  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_101A9AD  +
call sub_1017ED4  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_1018931  +
jmp loc_101A957  +
cmp eax esi +
jnz loc_101A9C3  +
lea ecx [ebp+var_A38] +
call sub_1018931  +
mov esi 8007007Ah +
jmp loc_101A957  +
lea eax [ebp+LibFileName] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_101802C  +
cmp edi ebx +
jz loc_101A9F2  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_101A9F2  +
lea eax [ebp+var_A34] +
jmp loc_101AA57  +
push 22h  +
pop eax  +
mov [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_1017CB2  +
test al al +
jnz loc_101AA2D  +
lea ecx [ebp+var_A38] +
call sub_1018931  +
mov esi 80004005h +
jmp loc_101A957  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax+String] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp+String] +
push eax  +
push offset String  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_1019986  +
mov esi eax +
cmp esi ebx +
jl loc_101A9A0  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_1019986  +
mov esi eax +
cmp esi ebx +
jl loc_101A9A0  +
push offset aRegistry  +
push dword ptr [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_A4C] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_101AABA  +
call sub_101A87C  +
jmp loc_101A99E  +
call sub_101A8B2  +
jmp loc_101A99E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] offset aAppid +
push 3AB3h  +
push dword_1065EF0  +
mov [ebp+var_C] offset a6b1de8b3Dfb14c +
call sub_101A8E8  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov esi offset asc_1002010 +
lea edi [ebp+sz] +
movs   +
xor ebx ebx +
movs   +
mov [eax] ebx +
mov [ebp+var_10] ecx +
mov [ebp+var_18] eax +
cmp byte_1065EE4 bl +
jz loc_101AB67  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101AB60  +
test byte ptr [eax+1Ch] 4 +
jz loc_101AB60  +
push offset dword_10019EC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 80004005h +
jmp loc_101ABBB  +
call ds:GetCommandLineW  +
lea ecx [ebp+sz] +
push ecx  +
push eax  +
jmp loc_101ABAE  +
push offset sz  +
push esi  +
call sub_10180D2  +
test eax eax +
jz loc_101ABCE  +
push offset aRegserver  +
push esi  +
call sub_10180D2  +
test eax eax +
jz loc_101AC42  +
push offset aEmbedding  +
push esi  +
call sub_10180D2  +
test eax eax +
jz loc_101ACB5  +
lea eax [ebp+sz] +
push eax  +
push esi  +
call sub_1018084  +
mov esi eax +
cmp esi ebx +
jnz loc_101AB74  +
xor esi esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
mov ecx [ebp+var_10] +
push ebx  +
push 1  +
call sub_101A6EC  +
mov esi eax +
cmp esi ebx +
jge loc_101AC0B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101ABBB  +
test byte ptr [eax+1Ch] 4 +
jz loc_101ABBB  +
push esi  +
push offset aUnregisterserv  +
push offset dword_10019EC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101ABBB  +
push ebx  +
call sub_101AAC9  +
mov esi eax +
cmp esi ebx +
jge loc_101AC38  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101ABBB  +
test byte ptr [eax+1Ch] 4 +
jz loc_101ABBB  +
push esi  +
push offset aUnregisterappi  +
push offset dword_10019EC  +
push 0Ch  +
jmp loc_101ABFE  +
mov esi 40200h +
jmp loc_101ABBB  +
push 1  +
call sub_101AAC9  +
mov esi eax +
cmp esi ebx +
jge loc_101AC78  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101ABBB  +
test byte ptr [eax+1Ch] 4 +
jz loc_101ABBB  +
push esi  +
push offset aRegisterappidF  +
push offset dword_10019EC  +
push 0Dh  +
jmp loc_101ABFE  +
mov ecx [ebp+var_10] +
push ebx  +
push 1  +
call sub_101A6B8  +
mov esi eax +
cmp esi ebx +
jge loc_101AC38  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101ABBB  +
test byte ptr [eax+1Ch] 4 +
jz loc_101ABBB  +
push esi  +
push offset aRegisterserver  +
push offset dword_10019EC  +
push 0Eh  +
jmp loc_101ABFE  +
push 224h  +
mov [ebp+var_14] ebx +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_101ACD0  +
mov ecx eax +
call sub_101D44C  +
jmp loc_101ACD2  +
xor eax eax +
push eax  +
lea ecx [ebp+var_14] +
call sub_101C97A  +
mov edi [ebp+var_14] +
cmp edi ebx +
jnz loc_101AD15  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101AD0B  +
test byte ptr [eax+1Ch] 4 +
jz loc_101AD0B  +
push offset aCtscremotesess  +
push offset dword_10019EC  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_101ABBB  +
lea ecx [edi+4] +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov esi eax +
cmp esi ebx +
jge loc_101AD58  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101AD4D  +
test byte ptr [eax+1Ch] 4 +
jz loc_101AD4D  +
push esi  +
push offset aFailedToToInti  +
push offset dword_10019EC  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
push edi  +
call sub_1018A83  +
jmp loc_101ABBB  +
mov ecx [ebp+var_10] +
push ebx  +
call sub_101985A  +
mov esi eax +
cmp esi ebx +
jge loc_101AD88  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101AD4D  +
test byte ptr [eax+1Ch] 4 +
jz loc_101AD4D  +
push esi  +
push offset aCatlexemodulet  +
push offset dword_10019EC  +
push 11h  +
jmp loc_101AD42  +
mov eax [ebp+var_18] +
mov dword ptr [eax] 1 +
jmp loc_101AD4D  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1017E84  +
test eax eax +
jl loc_101ADAA  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push esi  +
call ds:OLEAUT32_77  +
test eax eax +
jl loc_101ADEF  +
test edi edi +
jz loc_101ADEF  +
cmp word ptr [edi] 0Dh +
jnz loc_101ADEF  +
test esi esi +
jz loc_101ADEF  +
movzx ecx word ptr [esi+2] +
test cl 40h +
jz loc_101ADEF  +
test ecx 400h +
jz loc_101ADEF  +
push 9  +
pop ecx  +
mov [edi] cx +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetCurrentProcessId  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+plUbound] +
lea eax [ebp+plLbound] +
push eax  +
inc edi  +
mov esi ecx +
push edi  +
push dword ptr [esi]  +
call ds:SafeArrayGetLBound  +
test eax eax +
jge loc_101AE3A  +
push eax  +
call loc_1017D72  +
lea eax [ebp+plUbound] +
push eax  +
push edi  +
push dword ptr [esi]  +
call ds:SafeArrayGetUBound  +
pop edi  +
pop esi  +
test eax eax +
jl loc_101AE34  +
mov eax [ebp+plUbound] +
sub eax [ebp+plLbound] +
inc eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_101AE70  +
mov eax 80004003h +
jmp loc_101AE78  +
and dword ptr [eax] 0 +
mov eax 80040110h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+plLbound] 0 +
lea eax [ebp+plLbound] +
push eax  +
mov eax [ebp+arg_0] +
inc eax  +
push eax  +
push dword ptr [ecx]  +
call ds:SafeArrayGetLBound  +
test eax eax +
jge loc_101AEAE  +
push eax  +
call loc_1017D72  +
mov eax [ebp+plLbound] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+plUbound] 0 +
lea eax [ebp+plUbound] +
push eax  +
mov eax [ebp+arg_0] +
inc eax  +
push eax  +
push dword ptr [ecx]  +
call ds:SafeArrayGetUBound  +
test eax eax +
jge loc_101AEDF  +
push eax  +
call loc_1017D72  +
mov eax [ebp+plUbound] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+0B5D4h] +
push edi  +
push [ebp+arg_4]  +
xor edi edi +
call sub_104F887  +
sub esi edi +
jz loc_101AF2C  +
dec esi  +
jnz loc_101AF33  +
cmp eax edi +
jz loc_101AF33  +
jmp loc_101AF30  +
cmp eax edi +
jnz loc_101AF33  +
xor edi edi +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
cmp dword ptr [edi] 0 +
jnz loc_101AF59  +
push 80004005h  +
call loc_1017D72  +
push 0  +
call sub_101AE89  +
mov esi [ebp+arg_0] +
cmp esi eax +
mov [ebp+var_4] eax +
jl loc_101AF88  +
push 0  +
mov ecx edi +
call sub_101AEBA  +
cmp esi eax +
jg loc_101AF88  +
mov eax [edi] +
sub esi [ebp+var_4] +
mov eax [eax+0Ch] +
pop edi  +
lea eax [eax+esi*4] +
pop esi  +
leave   +
retn 4  +
push 80070057h  +
jmp loc_101AF54  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_101AFBB  +
push ecx  +
call ds:SafeArrayUnlock  +
test eax eax +
jl loc_101AFBB  +
push dword ptr [esi]  +
call ds:SafeArrayDestroy  +
test eax eax +
jl loc_101AFBB  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
shr eax 1 +
xor edx edx +
test ecx ecx +
jz loc_101B005  +
cmp eax 7FFFFFFFh +
ja loc_101B005  +
push esi  +
xor esi esi +
mov edx eax +
test eax eax +
jz loc_101AFF3  +
cmp [ecx] si +
jz loc_101AFEF  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_101AFE5  +
test edx edx +
jnz loc_101AFFF  +
mov esi 80070057h +
xor edx edx +
mov eax esi +
pop esi  +
jmp loc_101B00A  +
sub eax edx +
mov edx eax +
jmp loc_101AFFA  +
mov eax 80070057h +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_101B01E  +
test eax eax +
jl loc_101B01B  +
add edx edx +
mov [ecx] edx +
jmp loc_101B01E  +
and dword ptr [ecx] 0 +
pop ebp  +
retn 0Ch  +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_101B03B  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_101B07D  +
push 80070057h  +
call loc_1017D72  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_101ADB1  +
test eax eax +
jge loc_101B08E  +
push eax  +
jmp loc_101B078  +
cmp word ptr [ebp+arg_0] 8 +
jnz loc_101B073  +
mov ecx edi +
call sub_101AF94  +
test eax eax +
jl loc_101B08B  +
push esi  +
mov [edi] esi +
call ds:SafeArrayLock  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_101B041  +
mov dword ptr [esi] offset off_1002068 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_101B0FA  +
cmp dword ptr [eax+4] 0 +
jnz loc_101B0FA  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_101B0FA  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_101B0FA  +
xor eax eax +
inc eax  +
jmp loc_101B0FC  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+14h] +
mov eax 80004003h +
test esi esi +
jz loc_101B140  +
and dword ptr [esi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101B133  +
push dword ptr [ebp+10h]  +
call sub_101B0D0  +
test eax eax +
jnz loc_101B133  +
mov eax 80040110h +
jmp loc_101B140  +
mov eax [ebp+8] +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx dword_1065EF0 +
mov eax [ecx] +
jz loc_101B162  +
call dword ptr [eax+4]  +
jmp loc_101B165  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101B0B4  +
mov dword ptr [esi] offset off_100207C +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_101B220  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_101B220  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_101B1B2  +
mov eax 80004003h +
jmp loc_101B225  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_101B0D0  +
test eax eax +
jz loc_101B212  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_101B225  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_101B1F0  +
push [ebp+arg_8]  +
push eax  +
call sub_1017BB5  +
test eax eax +
jz loc_101B20F  +
cmp edi 1 +
jz loc_101B1C1  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_101B225  +
cmp [ebp+arg_4] 0 +
jnz loc_101B20F  +
test eax eax +
jl loc_101B225  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_101B1D3  +
mov eax 80004002h +
jmp loc_101B225  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1002090  +
push ecx  +
call sub_101B18B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_101B231  +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
lea ecx [eax+4] +
mov dword ptr [ecx] 0C0000001h +
mov dword ptr [eax] offset off_1002068 +
jmp loc_101B027  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_101B041  +
mov dword ptr [esi] offset off_10020B8 +
mov ecx dword_1065EF0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10020D0  +
push ecx  +
call sub_101B18B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101B311  +
test esi esi +
jz loc_101B311  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_101B2B0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
lea esi [ecx+4] +
mov dword ptr [ecx] offset off_10020B8 +
mov dword ptr [esi] 0C0000001h +
mov ecx dword_1065EF0 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_101B027  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B33A  +
test byte ptr [ebp+8] 1 +
jz loc_101B37E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-0Ch] ebx +
cmp [ebp+10h] ebx +
jnz loc_101B3E9  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_101B9F5  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B9F5  +
push esi  +
push offset aNullPsaparamsP  +
push offset dword_1002038  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101B9F5  +
push edi  +
mov edi ds:OLEAUT32_77 +
cmp [ebp+0Ch] ebx +
jz loc_101B4F1  +
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov esi eax +
test esi esi +
jge loc_101B431  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B9F4  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B9F4  +
push esi  +
push offset aSafearraygetva  +
push offset dword_1002038  +
push 0Bh  +
jmp loc_101B464  +
cmp word ptr [ebp-0Ch] 8 +
jz loc_101B474  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_101B9F4  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B9F4  +
push esi  +
push offset aPsacredsIsInva  +
push offset dword_1002038  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101B9F4  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-4] +
call sub_101B063  +
mov esi eax +
test esi esi +
jge loc_101B4B1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B975  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B975  +
push esi  +
push offset aCreds_attachFa  +
push offset dword_1002038  +
push 0Dh  +
jmp loc_101B598  +
push 0  +
lea ecx [ebp-4] +
call sub_101AE15  +
cmp eax 2 +
jz loc_101B4F1  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_101B975  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B975  +
push esi  +
push offset aPsacredsIsInva  +
push offset dword_1002038  +
push 0Eh  +
jmp loc_101B598  +
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp+10h]  +
call edi  +
mov esi eax +
test esi esi +
jge loc_101B529  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B975  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B975  +
push esi  +
push offset aSafearraygetva  +
push offset dword_1002038  +
push 0Fh  +
jmp loc_101B598  +
cmp word ptr [ebp-0Ch] 8 +
jz loc_101B55E  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_101B975  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B975  +
push esi  +
push offset aPsaparamsIsInv  +
push offset dword_1002038  +
push 10h  +
jmp loc_101B598  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-8] +
call sub_101B063  +
mov esi eax +
xor edi edi +
cmp esi edi +
jge loc_101B5A8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B975  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B975  +
push esi  +
push offset aParams_attachF  +
push offset dword_1002038  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101B975  +
push edi  +
lea ecx [ebp-8] +
call sub_101AE15  +
cmp eax 1 +
jnb loc_101B5E4  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_101B975  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B975  +
push esi  +
push offset aBadPsaparamsCo  +
push offset dword_1002038  +
push 12h  +
jmp loc_101B598  +
***
push edi  +
lea ecx [ebp-8] +
call sub_101AF40  +
mov esi [eax] +
push esi  +
call ds:SysStringByteLen  +
cmp eax 10000h +
jbe loc_101B62E  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_101B975  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B975  +
push esi  +
push offset aBadCommandLine  +
push offset dword_1002038  +
push 13h  +
jmp loc_101B598  +
***
push edi  +
lea ecx [ebp-8] +
call sub_101AE15  +
cmp eax 2 +
jbe loc_101B648  +
push 2  +
lea ecx [ebp-8] +
call sub_101AF40  +
mov ebx [eax] +
push edi  +
lea ecx [ebp-8] +
call sub_101AE15  +
cmp eax 3 +
jbe loc_101B662  +
push 3  +
lea ecx [ebp-8] +
call sub_101AF40  +
mov edi [eax] +
push 109Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_101B67D  +
mov ecx eax +
call sub_1040C50  +
mov [ebp+0Ch] eax +
jmp loc_101B681  +
and dword ptr [ebp+0Ch] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101B6BA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B6B0  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B6B0  +
push offset aCommandlinedat  +
push offset dword_1002038  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_101B975  +
mov ecx [ebp+0Ch] +
push ebx  +
push 1  +
push esi  +
call sub_104266E  +
cmp eax 1 +
jz loc_101B6FC  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_101B96C  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B96C  +
push esi  +
push offset aProcesscommand  +
push offset dword_1002038  +
push 15h  +
jmp loc_101B961  +
push 0CAA0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_101B714  +
mov ecx eax +
call sub_102CBA0  +
jmp loc_101B716  +
xor eax eax +
push eax  +
lea ecx [ebp-10h] +
call sub_101C97A  +
mov ebx [ebp-10h] +
test ebx ebx +
jnz loc_101B759  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B74F  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B74F  +
push offset aCtscsettings  +
push offset dword_1002038  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_101B96C  +
mov ecx ebx +
test edi edi +
jz loc_101B79B  +
push edi  +
call sub_10347D0  +
mov esi eax +
test esi esi +
jge loc_101B813  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B96C  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B96C  +
push esi  +
push offset aSptscsetInitse  +
push offset dword_1002038  +
push 17h  +
jmp loc_101B961  +
push dword ptr [ebp+0Ch]  +
call sub_10309C7  +
mov esi eax +
xor edi edi +
cmp esi edi +
jge loc_101B7D7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B96C  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B96C  +
push esi  +
push offset aSptscsetInitia  +
push offset dword_1002038  +
push 18h  +
jmp loc_101B961  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_103447B  +
mov esi eax +
cmp esi edi +
jge loc_101B815  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B96C  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B96C  +
push esi  +
push offset aSptscsetLoadal  +
push offset dword_1002038  +
push 19h  +
jmp loc_101B961  +
xor edi edi +
cmp dword_106607C edi +
jnz loc_101B880  +
push 3Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_101B832  +
mov ecx eax +
call sub_105A914  +
jmp loc_101B834  +
xor eax eax +
mov dword_106607C eax +
cmp eax edi +
jnz loc_101B868  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B74F  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B74F  +
push offset aCclxshell  +
push offset dword_1002038  +
push 1Ah  +
jmp loc_101B744  +
***
push eax  +
call sub_101AEEB  +
mov ecx dword_106607C +
lea eax [ebx+0CA94h] +
push eax  +
call sub_105A98E  +
cmp [ebp-4] edi +
jz loc_101B922  +
push edi  +
lea ecx [ebp-4] +
call sub_101AF40  +
push dword ptr [eax]  +
mov ecx ebx +
call sub_102BA7C  +
push offset word_1002174  +
mov ecx ebx +
call sub_102BB29  +
mov esi [ebp+14h] +
push 1  +
lea ecx [ebp-4] +
call sub_101AF40  +
and esi 1 +
push dword ptr [eax]  +
mov ecx ebx +
jz loc_101B8C4  +
call sub_102A110  +
jmp loc_101B8C9  +
call sub_102A0FA  +
cmp dword ptr [ebx+0B5DCh] 1 +
jnz loc_101B922  +
push edi  +
lea ecx [ebp-4] +
call sub_101AF40  +
push dword ptr [eax]  +
mov ecx [ebp+8] +
push ebx  +
call sub_101AF05  +
test eax eax +
jz loc_101B91C  +
push edi  +
lea ecx [ebp-4] +
call sub_101AF40  +
push dword ptr [eax]  +
mov ecx ebx +
call sub_102C2EF  +
push 1  +
lea ecx [ebp-4] +
call sub_101AF40  +
push dword ptr [eax]  +
mov ecx ebx +
cmp esi edi +
jz loc_101B915  +
call sub_102A20E  +
jmp loc_101B922  +
call sub_102A1F8  +
jmp loc_101B922  +
mov [ebx+0B5DCh] edi +
call sub_101C646  +
push eax  +
lea ecx [ebp-14h] +
call sub_101C97A  +
mov ecx [ebp-14h] +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_101CCC7  +
mov esi eax +
cmp esi edi +
jge loc_101B975  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101B96C  +
test byte ptr [eax+1Ch] 4 +
jz loc_101B96C  +
push esi  +
push offset aSpremotesessio  +
push offset dword_1002038  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor edi edi +
cmp [ebp-4] edi +
jz loc_101B9C9  +
test byte ptr [ebp+14h] 1 +
jnz loc_101B9BA  +
push edi  +
lea ecx [ebp-4] +
call sub_101AE15  +
cmp eax 2 +
jnz loc_101B9BA  +
push 1  +
lea ecx [ebp-4] +
call sub_101AF40  +
mov edi [eax] +
push 1  +
lea ecx [ebp-4] +
call sub_101AF40  +
mov ebx [eax] +
push edi  +
call ds:SysStringByteLen  +
test eax eax +
jz loc_101B9BA  +
mov byte ptr [ebx] 0 +
inc ebx  +
dec eax  +
jnz loc_101B9B3  +
push dword ptr [ebp-4]  +
call ds:SafeArrayUnlock  +
and dword ptr [ebp-4] 0 +
xor edi edi +
cmp [ebp-8] edi +
jz loc_101B9DA  +
push dword ptr [ebp-8]  +
call ds:SafeArrayUnlock  +
mov [ebp-8] edi +
cmp [ebp-10h] edi +
jz loc_101B9E7  +
push dword ptr [ebp-10h]  +
call sub_1018A83  +
cmp [ebp-14h] edi +
jz loc_101B9F4  +
push dword ptr [ebp-14h]  +
call sub_1018A83  +
pop edi  +
lea ecx [ebp-8] +
call sub_101AF94  +
lea ecx [ebp-4] +
call sub_101AF94  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B26C  +
test [ebp+arg_0] 1 +
jz loc_101BA2C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101BA5F  +
test esi esi +
jz loc_101BA5F  +
push 1  +
mov ecx esi +
call sub_101BA12  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_101BA7F  +
mov eax 80004003h +
jmp loc_101BAEE  +
and dword ptr [eax] 0 +
push esi  +
push edi  +
push 24h  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_101BAA3  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_101B287  +
mov esi eax +
jmp loc_101BAA5  +
xor esi esi +
test esi esi +
jz loc_101BAEA  +
push ebx  +
lea ebx [esi+4] +
push ebx  +
call ds:InterlockedIncrement  +
lea ecx [esi+8] +
call sub_101AD98  +
mov edi eax +
test edi edi +
jl loc_101BAC4  +
xor edi edi +
push ebx  +
call ds:InterlockedDecrement  +
pop ebx  +
test edi edi +
jnz loc_101BAE1  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_101BAEA  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_101BB0D  +
mov eax 80004003h +
jmp loc_101BB68  +
push ebx  +
push edi  +
push 28h  +
mov [eax] esi +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
mov ebx [ebp+8] +
pop ecx  +
cmp eax esi +
jz loc_101BB2F  +
push ebx  +
mov ecx eax +
call sub_101B170  +
mov esi eax +
test esi esi +
jz loc_101BB64  +
lea ecx [esi+8] +
mov [esi+24h] ebx +
call sub_101AD98  +
mov edi eax +
test edi edi +
jl loc_101BB5B  +
xor edi edi +
test edi edi +
jnz loc_101BB5B  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_101BB64  +
push 1  +
mov ecx esi +
call sub_101BA12  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_101BB8E  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_101BA6C  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_101AE5D  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 3AB4h  +
push dword_1065EF0  +
call sub_101A8E8  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 33B2h  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1052A87  +
and dword ptr [esi+20h] 0 +
and dword ptr [esi+24h] 0 +
mov dword ptr [esi] offset off_100249C +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
mov dword ptr [esi] offset off_100249C +
test eax eax +
jz loc_101BC12  +
push eax  +
call sub_105D688  +
and dword ptr [esi+20h] 0 +
mov ecx esi +
pop esi  +
jmp sub_1052ABD  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+24h] 0 +
jnz loc_101BC3A  +
mov eax [esi] +
mov dword ptr [esi+24h] 1 +
call dword ptr [eax+4]  +
and dword ptr [esi+24h] 0 +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jz loc_101BC5E  +
push 0  +
push 33B3h  +
push 111h  +
push eax  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+20h]  +
push 33B6h  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push 65h  +
mov ecx esi +
call sub_1052AC9  +
push 33B3h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BBF6  +
test byte ptr [ebp+8] 1 +
jz loc_101BCBF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
sub eax 110h +
push esi  +
jz loc_101BD27  +
dec eax  +
jz loc_101BCF9  +
push [ebp+arg_10]  +
push dword ptr [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+hWnd]  +
push [ebp+arg_0]  +
call sub_10534BF  +
mov ebx eax +
jmp loc_101BD58  +
mov eax 33B3h +
cmp [ebp+arg_C] ax +
jnz loc_101BD58  +
mov esi [ebp+arg_0] +
mov eax [esi+20h] +
cmp eax ebx +
jz loc_101BD17  +
push eax  +
call sub_105D688  +
mov [esi+20h] ebx +
push 1  +
push [ebp+hWnd]  +
call ds:EndDialog  +
mov [esi+4] ebx +
jmp loc_101BD58  +
mov esi [ebp+hWnd] +
push edi  +
mov edi [ebp+arg_0] +
push 2  +
push 33B3h  +
push esi  +
mov [edi+4] esi +
call ds:CheckDlgButton  +
mov ecx edi +
call sub_101BC67  +
pop edi  +
test eax eax +
jz loc_101BD4F  +
xor ebx ebx +
jmp loc_101BD58  +
push 3  +
push esi  +
call ds:EndDialog  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_101BD7B  +
cmp ecx 7FFFFFFFh +
jbe loc_101BD80  +
mov eax 80070057h +
test eax eax +
jl loc_101BDCB  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_101BDBB  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_101BDB6  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_101BDB6  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_101BD9E  +
pop edi  +
test esi esi +
jnz loc_101BDC2  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_101BDEA  +
cmp ecx 7FFFFFFFh +
jbe loc_101BDEF  +
mov eax 80070057h +
test eax eax +
jl loc_101BE2C  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_101BE1C  +
cmp eax esi +
ja loc_101BE1C  +
jnz loc_101BE27  +
jmp loc_101BE21  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 650h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov [ebp+var_63C] eax +
mov eax [ecx+20h] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_634] eax +
xor eax eax +
mov esi 206h +
xor ebx ebx +
push esi  +
mov [ebp+Buffer] ax +
lea eax [ebp-20Ah] +
push ebx  +
push eax  +
mov [ebp+var_638] ecx +
mov dword ptr [ebp+var_624] ebx +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_414] ax +
lea eax [ebp+var_414+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_61C] ax +
lea eax [ebp+var_61C+2] +
push ebx  +
push eax  +
call memset  +
add esp 24h +
lea eax [ebp+Date] +
push eax  +
mov [ebp+var_628] ebx +
mov dword ptr [ebp+var_630] ebx +
call ds:GetLocalTime  +
mov esi 104h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 4A38h  +
push edi  +
call sub_105DD36  +
mov ebx ds:GetLastError +
test eax eax +
jnz loc_101BF24  +
call ebx  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101BF24  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101BF24  +
push eax  +
push offset aTsloadstringFa  +
push offset dword_100248C  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
push 4A39h  +
push edi  +
call sub_105DD36  +
test eax eax +
jnz loc_101BF69  +
call ebx  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101BF69  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101BF69  +
push eax  +
push offset aTsloadstringFa  +
push offset dword_100248C  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
push esi  +
lea eax [ebp+var_61C] +
push eax  +
push 4A3Ah  +
push edi  +
call sub_105DD36  +
test eax eax +
jnz loc_101BFAE  +
call ebx  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101BFAE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101BFAE  +
push eax  +
push offset aTsloadstringFa  +
push offset dword_100248C  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov edi ds:GetTimeFormatW +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Date] +
push eax  +
push 2  +
mov esi 400h +
push esi  +
call edi  +
mov [ebp+cchDate] eax +
test eax eax +
jnz loc_101C002  +
call ebx  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C002  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C002  +
push eax  +
push offset aGettimeformatF  +
push offset dword_100248C  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+cchDate] +
add eax eax +
push eax  +
call sub_105D670  +
mov dword ptr [ebp+var_62C] eax +
test eax eax +
jz loc_101C2C6  +
push [ebp+cchDate]  +
push eax  +
push 0  +
lea eax [ebp+Date] +
push eax  +
push 2  +
push esi  +
call edi  +
test eax eax +
jnz loc_101C065  +
call ebx  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C065  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C065  +
push eax  +
push offset aGettimeformatF  +
push offset dword_100248C  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov edi ds:GetDateFormatW +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Date] +
push eax  +
push 1  +
push esi  +
call edi  +
mov [ebp+cchDate] eax +
test eax eax +
jnz loc_101C0B4  +
call ebx  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C0B4  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C0B4  +
push eax  +
push offset aGetdateformatF  +
push offset dword_100248C  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+cchDate] +
add eax eax +
push eax  +
call sub_105D670  +
mov [ebp+var_628] eax +
test eax eax +
jz loc_101C2C6  +
push [ebp+cchDate]  +
push eax  +
push 0  +
lea eax [ebp+Date] +
push eax  +
push 1  +
push esi  +
call edi  +
test eax eax +
jnz loc_101C117  +
call ebx  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C117  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C117  +
push eax  +
push offset aGetdateformatF  +
push offset dword_100248C  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
lea eax [ebp+Buffer] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101C120  +
sub eax edx +
sar eax 1 +
mov edi eax +
mov eax dword ptr [ebp+var_62C] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101C139  +
sub eax ecx +
sar eax 1 +
mov ecx eax +
mov eax [ebp+var_628] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_101C152  +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
add esi edi +
lea esi [esi+esi+2] +
lea eax [esi+esi] +
push eax  +
call sub_105D670  +
mov edi eax +
mov dword ptr [ebp+var_630] edi +
test edi edi +
jz loc_101C2C6  +
push [ebp+var_628]  +
lea eax [ebp+Buffer] +
push dword ptr [ebp+var_62C]  +
push eax  +
push esi  +
push edi  +
call sub_101BDD4  +
mov esi eax +
add esp 14h +
test esi esi +
jl loc_101C2EE  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101C1AE  +
sub eax edx +
sar eax 1 +
mov ebx eax +
lea eax [ebp+var_414] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101C1C7  +
sub eax ecx +
sar eax 1 +
mov edi eax +
mov eax [ebp+var_63C] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101C1E0  +
sub eax ecx +
sar eax 1 +
mov ecx eax +
lea eax [ebp+var_61C] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_101C1F9  +
sub eax edx +
sar eax 1 +
add eax ecx +
add eax edi +
add eax ebx +
lea edi [eax+eax+2] +
push edi  +
call sub_105D670  +
mov dword ptr [ebp+var_624] eax +
test eax eax +
jz loc_101C2C6  +
lea ecx [ebp+var_61C] +
push ecx  +
push [ebp+var_63C]  +
lea ecx [ebp+var_414] +
push ecx  +
push dword ptr [ebp+var_630]  +
push offset aSSSS  +
push edi  +
push eax  +
call sub_101BDD4  +
mov esi eax +
add esp 1Ch +
test esi esi +
jl loc_101C2EE  +
mov ebx [ebp+var_638] +
mov eax [ebx+20h] +
test eax eax +
jnz loc_101C287  +
push edi  +
call sub_105D670  +
mov [ebx+20h] eax +
test eax eax +
jz loc_101C2C6  +
push dword ptr [ebp+var_624]  +
push edi  +
push eax  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jl loc_101C2EE  +
jmp loc_101C2EA  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101C28A  +
sub eax edx +
sar eax 1 +
push 2  +
pop ecx  +
mul  ecx +
mov esi eax +
xor eax eax +
add esi edi +
adc edx eax +
mov [ebp+var_63C] edx +
jnz loc_101C2B2  +
cmp esi 0FFFFFFFFh +
jbe loc_101C2B9  +
mov esi 80070216h +
jmp loc_101C2EE  +
push esi  +
call sub_105D670  +
mov [ebx+20h] eax +
test eax eax +
jnz loc_101C2CD  +
mov esi 8007000Eh +
jmp loc_101C2EE  +
push [ebp+var_634]  +
push dword ptr [ebp+var_624]  +
push offset aSS  +
push esi  +
push eax  +
call sub_101BDD4  +
add esp 14h +
mov esi eax +
test esi esi +
jge loc_101C305  +
mov edi [ebp+var_638] +
mov eax [edi+20h] +
test eax eax +
jz loc_101C305  +
push eax  +
call sub_105D688  +
and dword ptr [edi+20h] 0 +
cmp dword ptr [ebp+var_624] 0 +
jz loc_101C319  +
push dword ptr [ebp+var_624]  +
call sub_105D688  +
cmp dword ptr [ebp+var_630] 0 +
jz loc_101C32D  +
push dword ptr [ebp+var_630]  +
call sub_105D688  +
cmp [ebp+var_634] 0 +
jz loc_101C341  +
push [ebp+var_634]  +
call sub_105D688  +
cmp dword ptr [ebp+var_62C] 0 +
jz loc_101C355  +
push dword ptr [ebp+var_62C]  +
call sub_105D688  +
cmp [ebp+var_628] 0 +
jz loc_101C369  +
push [ebp+var_628]  +
call sub_105D688  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
push 0  +
push 0  +
push 425h  +
push dword ptr [ecx+1FCh]  +
mov esi 80004005h +
call ds:PostMessageW  +
test eax eax +
jnz loc_101C3E8  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101C3CF  +
test byte ptr [eax+1Ch] 4 +
jz loc_101C3CF  +
push esi  +
push offset dword_100256C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test esi esi +
jle loc_101C3E1  +
and esi 0FFFFh +
or esi 80070000h +
test esi esi +
jl loc_101C3E8  +
mov esi 80004005h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lParam]  +
push 0  +
push 426h  +
push dword ptr [ecx+1FCh]  +
call ds:PostMessageW  +
test eax eax +
jnz loc_101C459  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101C43E  +
test byte ptr [eax+1Ch] 4 +
jz loc_101C43E  +
push esi  +
push offset dword_100256C  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test esi esi +
jle loc_101C450  +
and esi 0FFFFh +
or esi 80070000h +
test esi esi +
jl loc_101C45B  +
mov esi 80004005h +
jmp loc_101C45B  +
xor esi esi +
xor eax eax +
test esi esi +
setnl al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+8] +
and eax 1 +
retn   +
***
or dword ptr [ecx+8] 2 +
xor eax eax +
retn   +
***
or dword ptr [ecx+8] 4 +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
or dword ptr [esi+8] 8 +
test byte ptr [ebp+8] 1 +
mov dword ptr [esi] offset off_10025A4 +
jz loc_101C4AF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 14h +
push eax  +
call sub_105E1BB  +
cmp eax 1 +
ja loc_101C4D4  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [edi+14h] +
push esi  +
call sub_105E1D9  +
test eax eax +
jnz loc_101C503  +
inc dword ptr [esi]  +
lea ecx [edi+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor eax eax +
jmp loc_101C50B  +
cmp eax 1 +
ja loc_101C50B  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 10h  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_101C533  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jz loc_101C57E  +
mov edx [eax+4] +
mov [ecx] edx +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101C59D  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jz loc_101C5CE  +
push ebx  +
push edi  +
lea ebx [esi+10h] +
mov eax [esi+4] +
mov edi [eax] +
cmp eax ebx +
jz loc_101C5C5  +
push eax  +
call sub_105D688  +
mov [esi+4] edi +
test edi edi +
jnz loc_101C5B6  +
pop edi  +
pop ebx  +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_101C5E2  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
test byte ptr [ebp+8] 1 +
mov dword ptr [esi+4] offset off_10025A4 +
jz loc_101C60F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
call sub_105D843  +
mov esi eax +
test esi esi +
jz loc_101C63A  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi] +
xor esi esi +
add eax 628h +
mov ebx ecx +
mov [ebp-1Ch] ebx +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
mov [ebp-8] esi +
cmp eax esi +
jz loc_101C6A6  +
mov ecx [ebx+4] +
mov ecx [ecx] +
add ecx 628h +
cmp ecx esi +
jz loc_101C6A6  +
push ecx  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101C6A6  +
mov dword ptr [ebp-10h] 1 +
jmp loc_101C8ED  +
mov eax [edi] +
add eax 0C5Ch +
mov [ebp-10h] esi +
cmp [eax] si +
jz loc_101C8ED  +
mov ecx [ebx+4] +
mov ecx [ecx] +
cmp [ecx+0C5Ch] si +
jz loc_101C8ED  +
push esi  +
mov ebx 80h +
push ebx  +
push 3  +
push esi  +
mov esi ds:CreateFileW +
push 1  +
mov edi 80000000h +
push edi  +
push eax  +
call esi  +
mov [ebp-0Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101C72D  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C8ED  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C8ED  +
push eax  +
push offset aCreatefileFail  +
push offset dword_100256C  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_101C8ED  +
mov eax [ebp-1Ch] +
mov eax [eax+4] +
mov eax [eax] +
push 0  +
push ebx  +
push 3  +
push 0  +
push 1  +
add eax 0C5Ch +
push edi  +
push eax  +
call esi  +
mov [ebp+8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101C783  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C8BB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C8BB  +
push eax  +
push offset aCreatefileFail  +
push offset dword_100256C  +
push 1Dh  +
jmp loc_101C88D  +
mov esi ds:GetFileSize +
push 0  +
push dword ptr [ebp-0Ch]  +
call esi  +
push 0  +
push dword ptr [ebp+8]  +
mov edi eax +
call esi  +
mov ebx eax +
cmp edi ebx +
jnz loc_101C8BB  +
push edi  +
call sub_105D670  +
mov [ebp-4] eax +
test eax eax +
jnz loc_101C7D3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101C8BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_101C8BB  +
push offset dword_100256C  +
push 1Eh  +
jmp loc_101C801  +
push ebx  +
call sub_105D670  +
mov [ebp-8] eax +
test eax eax +
jnz loc_101C811  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101C8BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_101C8BB  +
push offset dword_100256C  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101C8BB  +
mov esi ds:ReadFile +
push 0  +
lea eax [ebp-14h] +
push eax  +
push edi  +
push dword ptr [ebp-4]  +
push dword ptr [ebp-0Ch]  +
call esi  +
test eax eax +
jnz loc_101C853  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C8BB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C8BB  +
push eax  +
push offset aReadfileOnQueu  +
push offset dword_100256C  +
push 20h  +
jmp loc_101C88D  +
push 0  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
push dword ptr [ebp-8]  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jnz loc_101C89A  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101C8BB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101C8BB  +
push eax  +
push offset aReadfileFailed  +
push offset dword_100256C  +
push 21h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_101C8BB  +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jnz loc_101C8BB  +
cmp eax edi +
jnz loc_101C8BB  +
mov esi [ebp-4] +
mov ecx edi +
mov edi [ebp-8] +
xor eax eax +
cmps   +
jnz loc_101C8BB  +
mov dword ptr [ebp-10h] 1 +
push dword ptr [ebp-0Ch]  +
mov esi ds:CloseHandle +
call esi  +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jz loc_101C8D1  +
push dword ptr [ebp+8]  +
call esi  +
cmp dword ptr [ebp-4] 0 +
jz loc_101C8DF  +
push dword ptr [ebp-4]  +
call sub_105D688  +
cmp dword ptr [ebp-8] 0 +
jz loc_101C8ED  +
push dword ptr [ebp-8]  +
call sub_105D688  +
mov eax [ebp-10h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax [ecx+0E8h] +
mov [ecx+1E8h] eax +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_101C948  +
mov ecx [esi] +
test ecx ecx +
jz loc_101C935  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax [esi+4] +
test eax eax +
jz loc_101C942  +
push eax  +
call sub_1018A83  +
push esi  +
call sub_105D688  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
call sub_105D7E9  +
mov esi eax +
test esi esi +
jz loc_101C96E  +
push [ebp+arg_0]  +
call sub_101AEEB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101C991  +
and dword ptr [esi] 0 +
push eax  +
call sub_1018A83  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_101C9A0  +
push eax  +
call sub_101AEEB  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_101C9CE  +
mov eax [esi+0E4h] +
mov [ebp+arg_4] eax +
mov edi eax +
jmp loc_101C9D1  +
mov [ebp+arg_4] edi +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
call sub_101C561  +
test eax eax +
jz loc_101CA0D  +
push ebx  +
mov ebx [ebp+arg_0] +
push [ebp+var_4]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax]  +
test eax eax +
jnz loc_101CA0C  +
and [ebp+var_4] eax +
mov edi [ebp+arg_4] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_101C561  +
test eax eax +
jnz loc_101C9E6  +
pop ebx  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_101CA19  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
and eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_4] +
mov dword ptr [eax+4] offset off_10025A4 +
mov dword ptr [eax+8] 0DBCAABCDh +
mov dword ptr [eax+0Ch] 1 +
mov dword ptr [eax] offset off_10025C4 +
mov dword ptr [eax+4] offset off_10025B4 +
mov dword ptr [eax+14h] 0 +
test ecx ecx +
jnz loc_101CA66  +
mov ecx eax +
mov [eax+10h] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_100C344  +
push [ebp+arg_4]  +
call sub_101C516  +
test eax eax +
jz loc_101CA98  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_101C545  +
xor eax eax +
jmp loc_101CAA3  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0ECh] ecx +
mov [eax+0E8h] ecx +
mov [eax+0E4h] ecx +
mov [eax+0E0h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
call sub_101C952  +
mov esi eax +
test esi esi +
jz loc_101CAF5  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
call sub_105D897  +
mov esi eax +
test esi esi +
jz loc_101CB1F  +
mov ecx offset unk_1065F28 +
call sub_101A467  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
mov [ebp+var_8] ebx +
mov eax lpReserved +
mov edi offset lpReserved +
cmp eax edi +
jz loc_101CB62  +
test byte ptr [eax+1Ch] 2 +
jz loc_101CB62  +
push offset dword_100256C  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [esi+1F8h] ebx +
jz loc_101CBF6  +
push offset Addend  +
mov [ebp+lParam] ebx +
call ds:InterlockedIncrement  +
lea ebx [esi+10Ch] +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
call sub_101CB01  +
push [ebp+lParam]  +
push 0  +
push 424h  +
push dword ptr [esi+1FCh]  +
call ds:PostMessageW  +
test eax eax +
jnz loc_101CC07  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_101CBD5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101CBD5  +
push eax  +
push offset aFailedToPostWm  +
push offset dword_100256C  +
push 32h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
push [ebp+lParam]  +
mov ecx esi +
call sub_101C91C  +
and [ebp+lParam] 0 +
cmp dword ptr [esi+1F8h] 0 +
jnz loc_101CB82  +
mov ecx offset unk_1065F28 +
call sub_101A467  +
and dword ptr [esi+204h] 0FFFFFFFEh +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov [ebp+var_8] 1 +
jmp loc_101CBFD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_101CC2C  +
push eax  +
call sub_101AEEB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101C587  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_105D8EA  +
cmp [ebp+var_4] 0 +
pop esi  +
jz locret_101CC6A  +
push [ebp+var_4]  +
call sub_1018A83  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101C9AC  +
mov edi eax +
test edi edi +
jz loc_101CC9A  +
test esi esi +
jz loc_101CC9A  +
push dword ptr [esi]  +
call sub_101AEEB  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_101CC38  +
mov ecx offset unk_1065F28 +
call sub_101A467  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
lea eax [esi+208h] +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
test byte ptr [esi+204h] 2 +
jz loc_101CD28  +
mov eax lpReserved +
mov ebx 80004005h +
cmp eax offset lpReserved +
jz loc_101CECA  +
test byte ptr [eax+1Ch] 4 +
jz loc_101CECA  +
push ebx  +
push offset aCannotBindSess  +
push offset dword_100256C  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101CECA  +
push edi  +
push 8  +
call sub_105D670  +
mov edi eax +
test edi edi +
jnz loc_101CD69  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101CD5F  +
test byte ptr [eax+1Ch] 4 +
jz loc_101CD5F  +
push offset aTsc_queued_app  +
push offset dword_100256C  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ebx 8007000Eh +
jmp loc_101CEBA  +
mov eax [ebp+arg_0] +
mov [edi] eax +
mov eax [ebp+arg_4] +
push eax  +
mov [edi+4] eax +
call sub_101AEEB  +
test byte ptr [esi+204h] 1 +
jz loc_101CE37  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push 0  +
lea eax [ebp+var_C] +
lea ebx [esi+10Ch] +
push eax  +
mov ecx ebx +
mov [ebp+var_C] offset off_10025D0 +
mov [ebp+var_8] edi +
call sub_101C9AC  +
cmp [ebp+arg_0] 0 +
jz loc_101CDE0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101CDD6  +
test byte ptr [eax+1Ch] 4 +
jz loc_101CDD6  +
push offset dword_100256C  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ebx 800700B7h +
jmp loc_101CEBA  +
cmp dword ptr [esi+1F8h] 0FFh +
jb loc_101CE28  +
mov eax lpReserved +
mov ebx 80004005h +
cmp eax offset lpReserved +
jz loc_101CEBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_101CEBA  +
push ebx  +
push offset aTooManyQueuedR  +
push offset dword_100256C  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101CEBA  +
push edi  +
mov ecx ebx +
call sub_101C61B  +
xor ebx ebx +
jmp loc_101CEC9  +
push offset Addend  +
call ds:InterlockedIncrement  +
or dword ptr [esi+204h] 1 +
push edi  +
push 0  +
push 424h  +
push dword ptr [esi+1FCh]  +
call ds:PostMessageW  +
test eax eax +
jnz loc_101CE30  +
mov ecx offset unk_1065F28 +
call sub_101A467  +
call ds:GetLastError  +
mov ebx eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101CE98  +
test byte ptr [eax+1Ch] 4 +
jz loc_101CE98  +
push ebx  +
push offset dword_100256C  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test ebx ebx +
jle loc_101CEAA  +
and ebx 0FFFFh +
or ebx 80070000h +
test ebx ebx +
jl loc_101CEB1  +
mov ebx 80004005h +
push 0  +
mov ecx esi +
call sub_101CB2B  +
test edi edi +
jz loc_101CEC9  +
and dword ptr [edi] 0 +
push edi  +
mov ecx esi +
call sub_101C91C  +
pop edi  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101CC15  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101C561  +
push [ebp+var_4]  +
mov ecx [ebp+arg_4] +
mov esi eax +
call sub_101C97A  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101C587  +
push [ebp+var_4]  +
mov ecx [ebp+arg_4] +
mov esi eax +
call sub_101C97A  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_1002788 +
mov dword ptr [esi+18h] offset off_1002780 +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101CF9A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101CF9A  +
push offset dword_100256C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
lea eax [esi+208h] +
cmp byte ptr [eax+18h] 0 +
jz loc_101CFB1  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
lea edi [esi+10Ch] +
mov ecx edi +
call sub_105D7B0  +
mov ecx edi +
call sub_101C5A6  +
lea edi [esi+1Ch] +
mov ecx edi +
call sub_105D7B0  +
mov ecx edi +
call sub_101C5A6  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
pop edi  +
mov dword ptr [esi+4] offset off_10025A4 +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_101D4EC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
xor eax eax +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
cmp [ecx+108h] eax +
jnz loc_101D04C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D0D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D0D0  +
push offset dword_100256C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101D0D0  +
mov eax [ecx+100h] +
push ebx  +
mov [ebp+var_C] eax +
lea eax [ebp+var_4] +
push eax  +
lea ebx [ecx+1Ch] +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
call sub_101CEFC  +
test eax eax +
jz loc_101D0C1  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov ecx [ebp+var_4] +
call sub_103559C  +
push dword ptr [esi]  +
mov edi eax +
push edi  +
call ds:IsChild  +
test eax eax +
jz loc_101D097  +
push esi  +
push [ebp+hAccTable]  +
push edi  +
call ds:TranslateAcceleratorW  +
test eax eax +
jnz loc_101D0B8  +
push esi  +
push edi  +
call ds:IsDialogMessageW  +
test eax eax +
jnz loc_101D0B8  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
call sub_101CEFC  +
test eax eax +
jnz loc_101D071  +
jmp loc_101D0BF  +
mov [ebp+var_8] 1 +
pop edi  +
pop esi  +
cmp [ebp+var_4] 0 +
pop ebx  +
jz loc_101D0D0  +
push [ebp+var_4]  +
call sub_1018A83  +
mov eax [ebp+var_8] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ecx+100h] +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea edi [ecx+1Ch] +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
mov [ebp+var_8] esi +
call sub_101CEFC  +
test eax eax +
jz loc_101D170  +
push ebx  +
mov ebx offset dword_100256C +
mov ecx [ebp+var_4] +
call sub_1035D2C  +
test eax eax +
jge loc_101D131  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D151  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D151  +
push ebx  +
push 16h  +
jmp loc_101D146  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D151  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D151  +
push ebx  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push esi  +
mov ecx edi +
call sub_101CCA7  +
mov esi [ebp+var_8] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call sub_101CEFC  +
test eax eax +
jnz loc_101D10E  +
pop ebx  +
cmp [ebp+var_4] 0 +
pop edi  +
pop esi  +
jz loc_101D180  +
push [ebp+var_4]  +
call sub_1018A83  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push esi  +
mov esi [ecx+100h] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
add ecx 1Ch +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+var_C] ecx +
call sub_101CEFC  +
test eax eax +
jz loc_101D255  +
push ebx  +
push edi  +
mov ebx offset lpReserved +
mov edi offset dword_100256C +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
cmp dword ptr [eax+6BCh] 0 +
jz loc_101D238  +
mov eax lpReserved +
cmp eax ebx +
jz loc_101D1F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D1F2  +
push edi  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp+var_4] +
call sub_1035D2C  +
test eax eax +
jge loc_101D212  +
mov eax lpReserved +
cmp eax ebx +
jz loc_101D22F  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D22F  +
push edi  +
push 1Ah  +
jmp loc_101D224  +
mov eax lpReserved +
cmp eax ebx +
jz loc_101D22F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D22F  +
push edi  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp+var_C] +
push esi  +
call sub_101CCA7  +
mov ecx [ebp+var_C] +
mov esi [ebp+var_8] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_101CEFC  +
test eax eax +
jnz loc_101D1C6  +
pop edi  +
pop ebx  +
cmp [ebp+var_4] 0 +
pop esi  +
jz loc_101D264  +
push [ebp+var_4]  +
call sub_1018A83  +
xor eax eax +
inc eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002798 +
call sub_101CEE0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+4]  +
mov ecx [ebp+8] +
call sub_1035B43  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea esi [ecx+1E8h] +
mov eax [esi] +
lea edi [ecx+4] +
lea ecx [ebp-4] +
push ecx  +
xor ebx ebx +
push eax  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_101CF2C  +
test eax eax +
jz loc_101D2EC  +
mov eax [ebp-4] +
mov ebx [eax+28h] +
lea eax [ebp-4] +
push eax  +
push esi  +
mov ecx edi +
call sub_101CEFC  +
cmp dword ptr [ebp-4] 0 +
jz loc_101D2FA  +
push dword ptr [ebp-4]  +
call sub_1018A83  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
mov edi ecx +
call ds:GetModuleHandleW  +
push eax  +
call sub_1036047  +
mov esi eax +
test esi esi +
jge loc_101D363  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D42E  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D42E  +
push esi  +
push offset aCtscremotese_0  +
push offset dword_100256C  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101D42E  +
push [ebp+arg_0]  +
mov ecx [ebp+var_4] +
push 1  +
call sub_1035EAD  +
mov esi eax +
test esi esi +
jge loc_101D39F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D42E  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D42E  +
push esi  +
push offset aCtscremotese_1  +
push offset dword_100256C  +
push 34h  +
jmp loc_101D353  +
cmp esi 40200h +
jnz loc_101D3CD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D42E  +
test byte ptr [eax+1Ch] 2 +
jz loc_101D42E  +
push offset dword_100256C  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101D42E  +
mov eax lpReserved +
mov esi offset lpReserved +
push ebx  +
mov ebx offset dword_100256C +
cmp eax esi +
jz loc_101D3F5  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D3F5  +
push ebx  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push [ebp+var_4]  +
lea ecx [edi+1Ch] +
call sub_101CAD6  +
test eax eax +
jnz loc_101D42B  +
mov eax lpReserved +
mov edi 80004005h +
cmp eax esi +
jz loc_101D427  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D427  +
push edi  +
push ebx  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov esi edi +
jmp loc_101D42D  +
xor esi esi +
pop ebx  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_101D43F  +
and [ebp+var_4] 0 +
push eax  +
call sub_1018A83  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
push offset aCtscremotese_2  +
mov esi ecx +
call sub_101CA2D  +
mov dword ptr [esi+18h] offset off_100259C +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_1002788 +
mov dword ptr [esi+18h] offset off_1002780 +
call sub_101CAAC  +
lea ecx [esi+10Ch] +
call sub_101CAAC  +
and dword ptr [esi+1FCh] 0 +
and dword ptr [esi+200h] 0 +
and dword ptr [esi+204h] 0FFFFFFFCh +
lea edx [esi+208h] +
push 6  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
mov [edx+18h] al +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D4D7  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D4D7  +
push offset dword_100256C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push esi  +
mov ecx offset dword_1065F68 +
call sub_101C97A  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101CF5C  +
test byte ptr [ebp+8] 1 +
jz loc_101D506  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax lpReserved +
mov edi offset lpReserved +
mov ebx offset dword_100256C +
cmp eax edi +
jz loc_101D540  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D540  +
push ebx  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
or dword ptr [esi+200h] 2 +
push 0  +
mov ecx offset dword_1065F68 +
call sub_101C97A  +
mov eax [esi+1F8h] +
test eax eax +
jz loc_101D5B0  +
push eax  +
call ds:DestroyWindow  +
test eax eax +
jnz loc_101D5A9  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax edi +
jz loc_101D58E  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D58E  +
push esi  +
push ebx  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test esi esi +
jle loc_101D5A0  +
and esi 0FFFFh +
or esi 80070000h +
test esi esi +
jl loc_101D5E5  +
mov esi 80004005h +
jmp loc_101D5E5  +
and dword ptr [esi+1F8h] 0 +
lea ecx [esi-4] +
call sub_101D0DC  +
mov esi eax +
test esi esi +
jge loc_101D5E3  +
mov eax lpReserved +
cmp eax edi +
jz loc_101D5E5  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D5E5  +
push esi  +
push offset aFailedToEndAll  +
push ebx  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101D5E5  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0AE0h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_ACC] eax +
xor ebx ebx +
xor eax eax +
cmp eax [esi+108h] +
push edi  +
push dword ptr [esi+1FCh]  +
sbb edi edi +
mov [ebp+var_AC8] ebx +
mov [ebp+var_AD8] ebx +
neg edi  +
call ds:SetForegroundWindow  +
cmp edi ebx +
jz loc_101D681  +
push [ebp+var_ACC]  +
lea ecx [ebp+var_AD4] +
call sub_101D26E  +
lea ecx [ebp+var_AC8] +
push ecx  +
push ebx  +
push eax  +
lea ecx [esi+1Ch] +
call sub_101CC73  +
mov eax [ebp+var_AD0] +
cmp eax ebx +
jz loc_101D675  +
push eax  +
mov [ebp+var_AD0] ebx +
call sub_1018A83  +
cmp [ebp+var_AC8] ebx +
jnz loc_101D7D7  +
lea ecx [ebp+var_AD4] +
call sub_1061FCA  +
lea ecx [ebp+var_AC4] +
call sub_10268C5  +
push [ebp+var_ACC]  +
lea eax [ebp+var_AC4] +
push eax  +
lea ecx [ebp+var_AD4] +
call sub_1040BBF  +
mov ebx eax +
test ebx ebx +
jge loc_101D6FA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D6DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D6DF  +
push ebx  +
push offset aFailedToInit_0  +
push offset dword_100256C  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
lea ecx [ebp+var_AC4] +
call sub_102692A  +
lea ecx [ebp+var_AD4] +
call sub_1040B9A  +
jmp loc_101D882  +
lea eax [ebp+var_AD8] +
push eax  +
lea eax [esi+18h] +
push eax  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
lea ecx [ebp+var_AD4] +
call sub_10408B4  +
mov ebx eax +
test ebx ebx +
jge loc_101D740  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D6DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D6DF  +
push ebx  +
push offset aFailedToLaunch  +
push offset dword_100256C  +
push 23h  +
jmp loc_101D6D4  +
cmp ebx 40200h +
jnz loc_101D771  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D6DF  +
test byte ptr [eax+1Ch] 2 +
jz loc_101D6DF  +
push offset dword_100256C  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101D6DF  +
cmp [ebp+var_AD8] 0 +
jnz loc_101D7B8  +
test edi edi +
jz loc_101D7B8  +
push [ebp+var_ACC]  +
lea ecx [ebp+var_AE0] +
call sub_101D26E  +
lea ecx [ebp+var_AC8] +
push ecx  +
push 0  +
push eax  +
lea ecx [esi+1Ch] +
call sub_101CC73  +
mov eax [ebp+var_ADC] +
test eax eax +
jz loc_101D7B8  +
and [ebp+var_ADC] 0 +
push eax  +
call sub_1018A83  +
lea ecx [ebp+var_AC4] +
call sub_102692A  +
lea ecx [ebp+var_AD4] +
call sub_1040B9A  +
cmp [ebp+var_AC8] 0 +
jz loc_101D822  +
push [ebp+var_ACC]  +
mov ecx [ebp+var_AC8] +
call sub_10355AE  +
mov ebx eax +
xor eax eax +
test ebx ebx +
setnl al  +
mov ecx esi +
push eax  +
call sub_101CB2B  +
test ebx ebx +
jge loc_101D882  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D882  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D882  +
push ebx  +
push offset aStartremoteapp  +
push offset dword_100256C  +
push 25h  +
jmp loc_101D877  +
mov eax lpReserved +
mov edi offset lpReserved +
cmp eax edi +
jz loc_101D848  +
test byte ptr [eax+1Ch] 2 +
jz loc_101D848  +
push offset dword_100256C  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push [ebp+var_ACC]  +
mov ecx esi +
call sub_101D306  +
mov ebx eax +
test ebx ebx +
jge loc_101D896  +
mov eax lpReserved +
cmp eax edi +
jz loc_101D896  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D896  +
push ebx  +
push offset aStartsessionWo  +
push offset dword_100256C  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+var_AC8] 0 +
jz loc_101D896  +
push [ebp+var_AC8]  +
call sub_1018A83  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [ebp+var_8] ecx +
cmp esi ebx +
jz loc_101D8CF  +
cmp [esi] ebx +
jz loc_101D8CF  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_101D902  +
mov ecx 80070057h +
mov edi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D994  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D994  +
push ecx  +
push offset aInvalidCopydat  +
push offset dword_100256C  +
push 2Dh  +
jmp loc_101D985  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+uID] +
push eax  +
mov [ebp+uID] ebx +
mov [ebp+arg_0] ebx +
call sub_102A2F4  +
mov edi eax +
cmp edi ebx +
jge loc_101D955  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D940  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D940  +
push edi  +
push offset dword_100256C  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push [ebp+arg_0]  +
push [ebp+uID]  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call sub_104497F  +
jmp loc_101D994  +
push dword ptr [esi+4]  +
mov ecx [ebp+var_8] +
call sub_101D5F0  +
mov edi eax +
cmp edi ebx +
jge loc_101D992  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101D994  +
test byte ptr [eax+1Ch] 4 +
jz loc_101D994  +
push edi  +
push offset aFailedToStartR  +
push offset dword_100256C  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_101D994  +
xor edi edi +
cmp esi ebx +
jz loc_101D9AF  +
mov eax [esi] +
cmp eax ebx +
jz loc_101D9AF  +
add eax 0C5Ch +
cmp [eax] bx +
jz loc_101D9AF  +
push eax  +
call ds:DeleteFileW  +
mov ecx [ebp+var_8] +
push esi  +
call sub_101C91C  +
mov ecx offset unk_1065F28 +
call sub_101A467  +
xor eax eax +
cmp edi ebx +
pop edi  +
pop esi  +
setnl al  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebp+14h] +
push edi  +
cmp ebx 1 +
jnz loc_101DA08  +
push dword ptr [esi]  +
lea ecx [ebp-4] +
call sub_101C97A  +
mov edi [ebp-4] +
push edi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
jmp loc_101DA1F  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
push eax  +
lea ecx [ebp-4] +
call sub_101C97A  +
mov edi [ebp-4] +
test edi edi +
jz loc_101DA4F  +
mov eax ebx +
sub eax 424h +
jz loc_101DA45  +
dec eax  +
jz loc_101DA3C  +
dec eax  +
push esi  +
jnz loc_101DA50  +
mov ecx edi +
call sub_101CB2B  +
jmp loc_101DA5D  +
mov ecx edi +
call sub_101D189  +
jmp loc_101DA5D  +
push esi  +
mov ecx edi +
call sub_101D8AE  +
jmp loc_101DA5D  +
push esi  +
push dword ptr [ebp+10h]  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
mov esi eax +
test edi edi +
jz loc_101DA69  +
push edi  +
call sub_1018A83  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 30h +
push edi  +
xor edi edi +
push edi  +
mov dword ptr [ebp-30h] 30h +
mov dword ptr [ebp-2Ch] 3 +
mov dword ptr [ebp-28h] offset loc_101D9D5 +
mov [ebp-24h] edi +
mov [ebp-20h] edi +
call ds:GetModuleHandleW  +
mov [ebp-1Ch] eax +
lea eax [ebp-30h] +
push eax  +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
mov [ebp-0Ch] edi +
mov dword ptr [ebp-8] offset aMstscremoteses +
mov [ebp-4] edi +
call ds:RegisterClassExW  +
test ax ax +
jnz loc_101DB18  +
push esi  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101DAFA  +
test byte ptr [eax+1Ch] 4 +
jz loc_101DAFA  +
push esi  +
push offset dword_100256C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp esi edi +
jle loc_101DB0A  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
cmp eax edi +
pop esi  +
jl loc_101DB1A  +
mov eax 80004005h +
jmp loc_101DB1A  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi ecx +
push ebx  +
push 8  +
lea ecx [esi+18h] +
call sub_105D971  +
mov edi eax +
cmp edi ebx +
jge loc_101DB68  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101DC90  +
test byte ptr [eax+1Ch] 4 +
jz loc_101DC90  +
push edi  +
push offset aInitializati_0  +
push offset dword_100256C  +
push 0Ch  +
jmp loc_101DC85  +
push ebx  +
push 8  +
lea ecx [esi+108h] +
call sub_105D971  +
mov edi eax +
cmp edi ebx +
jge loc_101DBA8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101DC90  +
test byte ptr [eax+1Ch] 4 +
jz loc_101DC90  +
push edi  +
push offset aInitialization  +
push offset dword_100256C  +
push 0Dh  +
jmp loc_101DC85  +
call near ptr dword_101DA74+3  +
mov edi eax +
cmp edi ebx +
jge loc_101DBDF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101DC90  +
test byte ptr [eax+1Ch] 4 +
jz loc_101DC90  +
push edi  +
push offset aFailedToRegist  +
push offset dword_100256C  +
push 0Eh  +
jmp loc_101DC85  +
lea eax [esi-4] +
push eax  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push offset word_1002174  +
push offset aMstscremoteses  +
push ebx  +
call ds:CreateWindowExW  +
mov [esi+1F8h] eax +
cmp eax ebx +
jnz loc_101DC55  +
call ds:GetLastError  +
mov edi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101DC3A  +
test byte ptr [eax+1Ch] 4 +
jz loc_101DC3A  +
push edi  +
push offset dword_100256C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp edi ebx +
jle loc_101DC4C  +
and edi 0FFFFh +
or edi 80070000h +
cmp edi ebx +
jl loc_101DC90  +
mov edi 80004005h +
jmp loc_101DC90  +
lea ecx [esi+204h] +
call sub_101AD98  +
mov edi eax +
cmp edi ebx +
jge loc_101DC90  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101DC90  +
test byte ptr [eax+1Ch] 4 +
jz loc_101DC90  +
push edi  +
push offset aM_cs_initFaile  +
push offset dword_100256C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
mov esi ecx +
call ds:CreateRectRgn  +
mov [esi] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [ecx]  +
call ds:SetRectRgn  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp dword_1065028 edi +
jz loc_101DD2F  +
push esi  +
cmp Destination edi +
jnz loc_101DD1D  +
push offset aNtdll_dll  +
call ds:LoadLibraryW  +
mov esi eax +
cmp esi edi +
jz loc_101DD2E  +
push edi  +
push esi  +
push offset Destination  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_101DD1D  +
push esi  +
call ds:FreeLibrary  +
push [ebp+lpProcName]  +
push Destination  +
call ds:GetProcAddress  +
mov edi eax +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1065028 0 +
jz loc_101DD66  +
cmp dword_1065F88 0 +
jnz loc_101DD78  +
push offset aWinsqmaddtostr  +
call sub_101DCDB  +
test eax eax +
jnz loc_101DD6A  +
and dword_1065028 eax +
pop ebp  +
retn 10h  +
push 0  +
push eax  +
push offset dword_1065F88  +
call ds:InterlockedCompareExchange  +
pop ebp  +
jmp dword_1065F88  +
***
mov edi edi +
push esi  +
xor esi esi +
cmp dword_1065028 esi +
jz loc_101DDC4  +
cmp dword_1065F80 esi +
jnz loc_101DDBC  +
push offset aWinsqmisoptedi  +
call sub_101DCDB  +
cmp eax esi +
jnz loc_101DDAF  +
mov dword_1065028 esi +
jmp loc_101DDC4  +
push esi  +
push eax  +
push offset dword_1065F80  +
call ds:InterlockedCompareExchange  +
call dword_1065F80  +
mov esi eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push 90h  +
lea eax [ebp+VersionInformation.dwMajorVersion] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
setz al  +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
cmp dword_1065FA8 ebx +
jz loc_101DE46  +
xor eax eax +
cmp dword_1065F9C ebx +
pop ebx  +
setnz al  +
retn   +
push esi  +
push edi  +
call sub_101DDCD  +
push offset aUser32  +
mov dword_1065FAC eax +
call ds:GetModuleHandleW  +
mov edi eax +
cmp edi ebx +
jz loc_101DF08  +
mov esi ds:GetProcAddress +
push offset aGetsystemmetri  +
push edi  +
call esi  +
mov dword_1065F8C eax +
cmp eax ebx +
jz loc_101DF08  +
push offset aMonitorfromwin  +
push edi  +
call esi  +
mov dword_1065F90 eax +
cmp eax ebx +
jz loc_101DF08  +
push offset aMonitorfromrec  +
push edi  +
call esi  +
mov dword_1065F94 eax +
cmp eax ebx +
jz loc_101DF08  +
push offset aMonitorfrompoi  +
push edi  +
call esi  +
mov dword_1065F98 eax +
cmp eax ebx +
jz loc_101DF08  +
push offset aEnumdisplaymon  +
push edi  +
call esi  +
mov dword_1065FA0 eax +
cmp eax ebx +
jz loc_101DF08  +
push offset aEnumdisplaydev  +
push edi  +
call esi  +
mov dword_1065FA4 eax +
cmp eax ebx +
jz loc_101DF08  +
cmp dword_1065FAC ebx +
jz loc_101DEE6  +
push offset aGetmonitorinfo  +
jmp loc_101DEEB  +
push offset aGetmonitorin_0  +
push edi  +
call esi  +
mov dword_1065F9C eax +
cmp eax ebx +
jz loc_101DF08  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
mov dword_1065FA8 1 +
pop ebx  +
retn   +
mov dword_1065F8C ebx +
mov dword_1065F90 ebx +
mov dword_1065F94 ebx +
mov dword_1065F98 ebx +
mov dword_1065F9C ebx +
mov dword_1065FA0 ebx +
mov dword_1065FA4 ebx +
xor eax eax +
jmp loc_101DEFA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_101DE2C  +
test eax eax +
jz loc_101DF50  +
pop ebp  +
jmp dword_1065F8C  +
mov eax [ebp+arg_0] +
cmp eax 4Ch +
jl loc_101DF76  +
cmp eax 4Dh +
jle loc_101DF85  +
cmp eax 4Eh +
jz loc_101DF81  +
cmp eax 4Fh +
jz loc_101DF73  +
jle loc_101DF76  +
cmp eax 51h +
jg loc_101DF76  +
xor eax eax +
inc eax  +
jmp loc_101DF7D  +
xor eax eax +
inc eax  +
push eax  +
call ds:GetSystemMetrics  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_101DF76  +
xor eax eax +
jmp loc_101DF7D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_101DE2C  +
test eax eax +
jz loc_101DFAD  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_1065F98  +
jmp loc_101DFE2  +
test byte ptr [ebp+arg_8] 3 +
push esi  +
jnz loc_101DFDC  +
cmp [ebp+arg_0] 0 +
jl loc_101DFD8  +
mov esi ds:GetSystemMetrics +
push 0  +
call esi  +
cmp [ebp+arg_0] eax +
jge loc_101DFD8  +
cmp [ebp+arg_4] 0 +
jl loc_101DFD8  +
push 1  +
call esi  +
cmp [ebp+arg_4] eax +
jl loc_101DFDC  +
xor eax eax +
jmp loc_101DFE1  +
mov eax 12340042h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_101DE2C  +
test eax eax +
jz loc_101E000  +
pop ebp  +
jmp dword_1065F94  +
test [ebp+arg_4] 3 +
push esi  +
push edi  +
jnz loc_101E031  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp [esi+8] eax +
jle loc_101E02D  +
cmp [esi+0Ch] eax +
jle loc_101E02D  +
mov edi ds:GetSystemMetrics +
push eax  +
call edi  +
cmp [esi] eax +
jge loc_101E02D  +
push 1  +
call edi  +
cmp [esi+4] eax +
jl loc_101E031  +
xor eax eax +
jmp loc_101E036  +
mov eax 12340042h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
call sub_101DE2C  +
test eax eax +
jz loc_101E060  +
push [ebp+arg_4]  +
push [ebp+hWnd]  +
call dword_1065F90  +
jmp locret_101E0AA  +
test byte ptr [ebp+arg_4] 3 +
jz loc_101E06D  +
mov eax 12340042h +
jmp locret_101E0AA  +
push [ebp+hWnd]  +
call ds:IsIconic  +
test eax eax +
jz loc_101E089  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowPlacement  +
jmp loc_101E096  +
lea eax [ebp-10h] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
test eax eax +
jz loc_101E0A8  +
push [ebp+arg_4]  +
lea eax [ebp-10h] +
push eax  +
call sub_101DFEB  +
jmp locret_101E0AA  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
call sub_101DE2C  +
test eax eax +
jz loc_101E0FD  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
call dword_1065F9C  +
mov edi eax +
xor ecx ecx +
cmp edi ecx +
jz loc_101E0F9  +
cmp dword_1065FAC ecx +
jnz loc_101E0F9  +
cmp dword ptr [esi] 68h +
jb loc_101E0F9  +
push 20h  +
lea eax [esi+28h] +
push eax  +
push 0FFFFFFFFh  +
push eax  +
push ecx  +
push ecx  +
call ds:MultiByteToWideChar  +
mov eax edi +
jmp loc_101E173  +
cmp [ebp+arg_0] 12340042h +
push ebx  +
jnz loc_101E170  +
mov ebx [ebp+arg_4] +
xor esi esi +
cmp ebx esi +
jz loc_101E170  +
cmp dword ptr [ebx] 28h +
jb loc_101E170  +
push esi  +
lea eax [ebp+pvParam] +
push eax  +
push esi  +
push 30h  +
call ds:SystemParametersInfoA  +
test eax eax +
jz loc_101E170  +
mov [ebx+4] esi +
mov [ebx+8] esi +
push esi  +
mov esi ds:GetSystemMetrics +
call esi  +
push 1  +
mov [ebx+0Ch] eax +
call esi  +
lea edi [ebx+14h] +
lea esi [ebp+pvParam] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
inc esi  +
cmp dword ptr [ebx] 68h +
mov [ebx+10h] eax +
mov [ebx+24h] esi +
jb loc_101E16C  +
push 20h  +
add ebx 28h +
push ebx  +
push 0FFFFFFFFh  +
push offset MultiByteStr  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
mov eax esi +
jmp loc_101E172  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
call sub_101DE2C  +
test eax eax +
jz loc_101E1A6  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lprcSrc2]  +
push [ebp+arg_0]  +
call dword_1065FA0  +
jmp locret_101E267  +
push edi  +
xor edi edi +
cmp [ebp+arg_8] edi +
jnz loc_101E1B5  +
xor eax eax +
jmp loc_101E266  +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
mov [ebp+rcSrc1.left] edi +
mov [ebp+rcSrc1.top] edi +
call esi  +
push 1  +
mov [ebp+rcSrc1.right] eax +
call esi  +
mov ebx [ebp+arg_0] +
mov [ebp+rcSrc1.bottom] eax +
cmp ebx edi +
jz loc_101E238  +
lea eax [ebp+rcSrc2] +
push eax  +
push ebx  +
call ds:GetClipBox  +
sub eax edi +
jz loc_101E234  +
dec eax  +
jz loc_101E24F  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
call ds:GetDCOrgEx  +
test eax eax +
jz loc_101E234  +
mov eax [ebp+var_8.y] +
neg eax  +
push eax  +
mov eax [ebp+var_8.x] +
neg eax  +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
call ds:OffsetRect  +
mov esi ds:IntersectRect +
lea eax [ebp+rcSrc2] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
push eax  +
call esi  +
test eax eax +
jz loc_101E24F  +
cmp [ebp+lprcSrc2] edi +
jz loc_101E254  +
push [ebp+lprcSrc2]  +
lea eax [ebp+rcSrc1] +
push eax  +
push eax  +
call esi  +
jmp loc_101E24B  +
xor eax eax +
jmp loc_101E264  +
cmp [ebp+lprcSrc2] edi +
jz loc_101E254  +
push [ebp+lprcSrc2]  +
lea eax [ebp+rcSrc1] +
push eax  +
push eax  +
call ds:IntersectRect  +
test eax eax +
jnz loc_101E254  +
xor eax eax +
inc eax  +
jmp loc_101E264  +
push [ebp+arg_C]  +
lea eax [ebp+rcSrc1] +
push eax  +
push ebx  +
push 12340042h  +
call [ebp+arg_8]  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002D40 +
jz loc_101E28B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 38h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1025DC9  +
test [ebp+arg_0] 1 +
jz loc_101E320  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov eax ecx +
push 100h  +
lea ecx [ebp+Buffer] +
push ecx  +
push [ebp+uID]  +
push dword ptr [eax+2Ch]  +
call sub_105DD36  +
mov edi eax +
test edi edi +
jnz loc_101E38E  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101E3DA  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101E3DA  +
push eax  +
push offset aTsloadstring_0  +
push offset dword_1002C2C  +
push 1Dh  +
jmp loc_101E3CF  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uIDNewItem]  +
push [ebp+uFlags]  +
push esi  +
call ds:AppendMenuW  +
mov edi eax +
test edi edi +
jnz loc_101E3DA  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101E3DA  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101E3DA  +
push eax  +
push offset aAppendmenuFail  +
push offset dword_1002C2C  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx [ebp+var_4] +
xor eax eax +
test edi edi +
setnz al  +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] 0FFFFFFFEh +
push esi  +
mov esi ecx +
jz loc_101E442  +
xor eax eax +
cmp [ebp+arg_0] 0FFFFFFFFh +
setz al  +
add eax 400h +
jmp loc_101E447  +
mov eax 402h +
push 104h  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_101E478  +
push 10h  +
lea eax [esi+28Ch] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [esi+4]  +
call sub_105D992  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 20h  +
mov edi ecx +
call sub_101DF3B  +
mov esi [ebp+arg_0] +
neg eax  +
push 21h  +
mov [esi+14h] eax +
call sub_101DF3B  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
neg eax  +
mov [esi+18h] eax +
push dword ptr [edi+4]  +
call ds:IsZoomed  +
test eax eax +
jz loc_101E4C9  +
or dword ptr [esi+4] 2 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
push dword ptr [esi+60h]  +
lea eax [ebp+Rect] +
push dword ptr [esi+5Ch]  +
push 0  +
push 0  +
push eax  +
call ds:SetRect  +
push 0  +
push 0CF0000h  +
lea eax [ebp+Rect] +
push eax  +
call ds:AdjustWindowRect  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
mov ecx [ebp+Rect.bottom] +
sub ecx [ebp+Rect.top] +
mov [esi+54h] eax +
mov [esi+58h] ecx +
mov edx lpReserved +
pop esi  +
cmp edx offset lpReserved +
jz locret_101E53F  +
test byte ptr [edx+1Ch] 2 +
jz locret_101E53F  +
push ecx  +
push eax  +
push offset dword_1002C2C  +
push 3Ah  +
push dword ptr [edx+14h]  +
push dword ptr [edx+10h]  +
call sub_101E297  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_14] +
mov ebx ecx +
push eax  +
push dword ptr [ebx+4]  +
call sub_1050D9D  +
mov esi [ebp+var_C] +
mov edi [ebp+var_8] +
mov eax [ebx+54h] +
sub esi [ebp+var_14] +
sub edi [ebp+var_10] +
push 20h  +
mov [ebp+var_4] eax +
call sub_101DF3B  +
lea ecx [esi+eax*2] +
mov eax [ebp+var_4] +
cmp eax ecx +
jb loc_101E58C  +
push 20h  +
call sub_101DF3B  +
lea eax [esi+eax*2] +
mov esi [ebp+arg_4] +
mov [esi] eax +
mov eax [ebx+58h] +
push 21h  +
mov [ebp+arg_4] eax +
call sub_101DF3B  +
mov ecx [ebp+arg_4] +
lea eax [edi+eax*2] +
cmp ecx eax +
jb loc_101E5B2  +
push 21h  +
call sub_101DF3B  +
lea ecx [edi+eax*2] +
mov [esi+4] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101E5E2  +
test byte ptr [eax+1Ch] 2 +
jz loc_101E5E2  +
push ecx  +
push dword ptr [esi]  +
push dword ptr [ebx+58h]  +
push dword ptr [ebx+54h]  +
push offset dword_1002C2C  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E2C9  +
mov ecx [esi] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
mov ecx [esi+4] +
pop esi  +
mov [eax+4] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jz loc_101E6E2  +
push 65h  +
push dword ptr [esi+2Ch]  +
call ds:LoadIconW  +
mov [esi+50h] eax +
lea eax [ebp+var_30] +
push eax  +
mov ebx offset aTsc_popup_pare +
push ebx  +
push edi  +
call ds:GetClassInfoExW  +
test eax eax +
jnz loc_101E743  +
mov eax ds:DefWindowProcW +
push edi  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] eax +
mov [ebp+var_30.cbClsExtra] edi +
mov [ebp+var_30.cbWndExtra] edi +
call ds:GetModuleHandleW  +
mov [ebp+var_30.hInstance] eax +
mov eax [esi+50h] +
mov [ebp+var_30.hIcon] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.hCursor] edi +
mov [ebp+var_30.hbrBackground] edi +
mov [ebp+var_30.lpszMenuName] edi +
mov [ebp+var_30.lpszClassName] ebx +
mov [ebp+var_30.hIconSm] edi +
call ds:RegisterClassExW  +
mov esi ds:GetLastError +
movzx ebx ax +
call esi  +
cmp bx di +
jnz loc_101E743  +
cmp eax 582h +
jz loc_101E743  +
cmp eax edi +
jle loc_101E6AC  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
call esi  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101E745  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101E745  +
push eax  +
push offset aFailedToRegist  +
push offset dword_1002C2C  +
push 45h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_101E745  +
push edi  +
call ds:GetModuleHandleW  +
push eax  +
push offset aTsc_popup_pare  +
call ds:UnregisterClassW  +
test eax eax +
jnz loc_101E743  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101E726  +
test byte ptr [eax+1Ch] 4 +
jz loc_101E726  +
push esi  +
push offset dword_1002C2C  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp esi edi +
jle loc_101E736  +
and esi 0FFFFh +
or esi 80070000h +
mov ebx esi +
cmp ebx edi +
jl loc_101E745  +
mov ebx 80004005h +
jmp loc_101E745  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
lea edx [ecx+6C4h] +
inc eax  +
cmp dword ptr [edx] 0 +
jz loc_101E777  +
push [ebp+arg_8]  +
mov eax [ecx+4] +
push [ebp+arg_4]  +
mov ecx [edx] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+30h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
mov eax [ecx] +
push 120h  +
lea edx [ebp+String] +
push edx  +
call dword ptr [eax+24h]  +
lea eax [ebp+String] +
push eax  +
push dword ptr [esi+4]  +
call ds:SetWindowTextW  +
mov esi [esi+38h] +
mov eax [esi] +
lea ecx [ebp+String] +
push ecx  +
push esi  +
call dword ptr [eax+68h]  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
xor eax eax +
lea ecx [esi+6C4h] +
cmp [ecx] eax +
jz loc_101E80B  +
mov edx [esi+4] +
cmp [ebp+wParam] edx +
jz loc_101E80B  +
push [ebp+lParam]  +
mov ecx [ecx] +
push [ebp+wParam]  +
mov eax [ecx] +
push edx  +
call dword ptr [eax+38h]  +
mov ecx [esi+24h] +
pop esi  +
test ecx ecx +
jz loc_101E828  +
call sub_101A40B  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push eax  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
lea eax [esi+6C4h] +
cmp [eax] edi +
jz loc_101E858  +
push [ebp+lParam]  +
mov eax [eax] +
push [ebp+wParam]  +
mov edx [eax] +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx+40h]  +
mov ecx [esi+24h] +
cmp ecx edi +
jz loc_101E882  +
call sub_101A40B  +
test eax eax +
jz loc_101E882  +
push [ebp+lParam]  +
mov ecx [esi+24h] +
push [ebp+wParam]  +
push [ebp+Msg]  +
call sub_101A40B  +
push eax  +
call ds:SendMessageW  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+6C4h] +
cmp dword ptr [eax] 0 +
jz loc_101E8B1  +
push [ebp+arg_8]  +
mov eax [eax] +
push [ebp+arg_4]  +
mov edx [eax] +
push dword ptr [ecx+4]  +
mov ecx eax +
call dword ptr [edx+44h]  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+6C4h] +
cmp dword ptr [eax] 0 +
jz loc_101E8DE  +
push [ebp+arg_8]  +
mov eax [eax] +
push [ebp+arg_4]  +
mov edx [eax] +
push dword ptr [ecx+4]  +
mov ecx eax +
call dword ptr [edx+48h]  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
add ecx 6C4h +
cmp [ecx] eax +
jz locret_101E8FC  +
mov ecx [ecx] +
mov eax [ecx] +
jmp dword ptr [eax+68h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi+5Ch] +
xor ecx ecx +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ecx +
cmp [ebp+arg_0] eax +
jb loc_101E933  +
cmp ebx [esi+60h] +
jb loc_101E92E  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ecx +
jmp loc_101E974  +
cmp [ebp+arg_0] eax +
jnb loc_101E94C  +
mov edi [esi+60h] +
push 3  +
call sub_101DF3B  +
add eax edi +
cmp ebx eax +
jb loc_101E94C  +
mov [ebp+var_4] 1 +
jmp loc_101E974  +
cmp ebx [esi+60h] +
jnb loc_101E96B  +
mov edi [esi+5Ch] +
push 2  +
call sub_101DF3B  +
add eax edi +
cmp [ebp+arg_0] eax +
jb loc_101E96B  +
mov [ebp+var_8] 1 +
jmp loc_101E974  +
xor eax eax +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
mov eax [esi+54h] +
mov edi [ebp+arg_8] +
mov [edi] eax +
mov eax [esi+58h] +
mov esi [ebp+arg_C] +
mov [esi] eax +
jz loc_101E993  +
push 3  +
call sub_101DF3B  +
add [esi] eax +
cmp [ebp+var_8] 0 +
jz loc_101E9A2  +
push 2  +
call sub_101DF3B  +
add [edi] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101E9CA  +
test byte ptr [eax+1Ch] 2 +
jz loc_101E9CA  +
push dword ptr [esi]  +
push dword ptr [edi]  +
push offset dword_1002C2C  +
push 72h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
xor eax eax +
cmp [ecx+44h] eax +
setnz al  +
retn   +
***
mov edi edi +
push esi  +
mov esi [ecx+4] +
push esi  +
call ds:IsWindow  +
test eax eax +
jz loc_101EA08  +
push 0  +
push 0F020h  +
push 112h  +
push esi  +
call ds:PostMessageW  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+288h] 0 +
jnz loc_101EA4A  +
push edi  +
mov edi ds:ShowWindow +
push 5  +
push dword ptr [esi+48h]  +
call edi  +
mov eax [esi+44h] +
test eax eax +
jz loc_101EA3D  +
push 1  +
push eax  +
call ds:EnableWindow  +
jmp loc_101EA49  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_101EA49  +
push 0  +
push eax  +
call edi  +
pop edi  +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+var_10] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call sub_1050D9D  +
mov eax [ebp+var_8] +
sub eax [ebp+var_10] +
cmp eax [esi+5Ch] +
jnz loc_101EA87  +
mov eax [ebp+var_4] +
sub eax [ebp+var_C] +
cmp eax [esi+60h] +
jnz loc_101EA87  +
xor eax eax +
inc eax  +
jmp loc_101EA89  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-28h] 28h +
call sub_101E0B3  +
test eax eax +
jz loc_101EAD5  +
push esi  +
lea eax [ebp-14h] +
push eax  +
call ds:CreateRectRgnIndirect  +
mov esi eax +
mov eax [ebp+14h] +
mov eax [eax] +
push 2  +
push esi  +
push eax  +
push eax  +
call ds:CombineRgn  +
push esi  +
call ds:DeleteObject  +
pop esi  +
xor eax eax +
inc eax  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push esi  +
mov esi [ebp+arg_0] +
push 2  +
push esi  +
call sub_101DFEB  +
lea ecx [ebp+var_44] +
push ecx  +
push eax  +
mov [ebp+var_44] 28h +
call sub_101E0B3  +
test eax eax +
jz loc_101EC18  +
push ebx  +
push edi  +
lea ecx [ebp+var_C] +
call sub_101DC9B  +
lea ecx [ebp+var_8] +
call sub_101DC9B  +
lea ecx [ebp+arg_0] +
call sub_101DC9B  +
lea eax [ebp+rcSrc2] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jnz loc_101EB48  +
mov ebx [ebp+rcSrc2.left] +
mov edi [ebp+rcSrc2.top] +
sub ebx [ebp+rc1.left] +
sub edi [ebp+rc1.top] +
jmp loc_101EB4C  +
xor edi edi +
xor ebx ebx +
push edi  +
push ebx  +
push esi  +
call ds:OffsetRect  +
lea eax [ebp+var_C] +
push eax  +
push offset loc_101EA91  +
push 0  +
push 0  +
call sub_101E17E  +
push esi  +
lea ecx [ebp+arg_0] +
call sub_101DCB7  +
push 1  +
push [ebp+arg_0]  +
push [ebp+var_C]  +
push [ebp+var_8]  +
call ds:CombineRgn  +
push [ebp+arg_0]  +
push [ebp+var_8]  +
call ds:EqualRgn  +
test eax eax +
jnz loc_101EBF4  +
mov eax [esi] +
mov ecx [ebp+rcSrc2.left] +
xor edx edx +
cmp eax ecx +
mov [ebp+var_4] edx +
jge loc_101EBA4  +
sub ecx eax +
mov [ebp+var_4] ecx +
mov ecx [esi+4] +
mov eax [ebp+rcSrc2.top] +
cmp ecx eax +
jge loc_101EBB2  +
sub eax ecx +
mov edx eax +
mov ecx [esi+8] +
mov eax [ebp+rcSrc2.right] +
cmp ecx eax +
jle loc_101EBC1  +
sub eax ecx +
mov [ebp+var_4] eax +
mov ecx [esi+0Ch] +
mov eax [ebp+rcSrc2.bottom] +
cmp ecx eax +
jle loc_101EBCF  +
sub eax ecx +
mov edx eax +
push edx  +
push [ebp+var_4]  +
push esi  +
call ds:OffsetRect  +
lea eax [ebp+rcSrc2] +
push eax  +
push esi  +
lea eax [ebp+rcSrc] +
push eax  +
call ds:IntersectRect  +
lea eax [ebp+rcSrc] +
push eax  +
push esi  +
call ds:CopyRect  +
neg edi  +
push edi  +
neg ebx  +
push ebx  +
push esi  +
call ds:OffsetRect  +
push [ebp+arg_0]  +
mov esi ds:DeleteObject +
call esi  +
push [ebp+var_8]  +
call esi  +
push [ebp+var_C]  +
call esi  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp [ecx+38h] esi +
jz loc_101EC50  +
mov ecx [ecx+38h] +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push ecx  +
call dword ptr [eax+44h]  +
test eax eax +
jl loc_101EC50  +
xor eax eax +
cmp word ptr [ebp+var_4] 1 +
setz al  +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp [ecx+38h] esi +
jz loc_101EC88  +
mov ecx [ecx+38h] +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push ecx  +
call dword ptr [eax+44h]  +
test eax eax +
jl loc_101EC88  +
xor eax eax +
cmp word ptr [ebp+var_4] 2 +
setz al  +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
lea eax [ecx+6C4h] +
cmp dword ptr [eax] 0 +
push [ebp+wParam]  +
jz loc_101ECB5  +
mov edx [ecx+4] +
mov ecx [eax] +
mov eax [ecx] +
push edx  +
call dword ptr [eax+3Ch]  +
jmp loc_101ECC1  +
mov ecx [ecx+4] +
push 14h  +
push ecx  +
call ds:DefWindowProcW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+6C4h] +
cmp dword ptr [eax] 0 +
jz loc_101ECEC  +
push [ebp+arg_8]  +
mov eax [eax] +
push [ebp+arg_4]  +
mov edx [eax] +
push dword ptr [ecx+4]  +
mov ecx eax +
call dword ptr [edx+4Ch]  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101ED26  +
test byte ptr [eax+1Ch] 1 +
jz loc_101ED26  +
push [ebp+wParam]  +
push offset dword_1002C2C  +
push 7Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi+48h] +
test eax eax +
jz loc_101ED4B  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_101ED4B  +
push 0  +
push [ebp+wParam]  +
push 401h  +
push dword ptr [esi+48h]  +
call ds:PostMessageW  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1000h +
cmp [ebp+arg_0] eax +
jnb loc_101ED69  +
mov eax [ebp+arg_0] +
mov [ecx+70D0h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 800h +
cmp [ebp+arg_0] eax +
jnb loc_101ED8A  +
mov eax [ebp+arg_0] +
mov [ecx+70D4h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push 0  +
push eax  +
call ds:GetSystemMenu  +
mov [esi+1Ch] eax +
test eax eax +
jz loc_101EEA7  +
push edi  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 0BC5h  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
mov edi 0F060h +
test eax eax +
jz loc_101EE1E  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push 0  +
push edi  +
push dword ptr [esi+1Ch]  +
call ds:ModifyMenuW  +
test eax eax +
jnz loc_101EE42  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101EE42  +
test byte ptr [eax+1Ch] 4 +
jz loc_101EE42  +
push offset dword_1002C2C  +
push 1Fh  +
jmp loc_101EE37  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101EE42  +
test byte ptr [eax+1Ch] 4 +
jz loc_101EE42  +
push offset dword_1002C2C  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push ebx  +
call ds:CreateMenu  +
mov ebx eax +
test ebx ebx +
jz loc_101EEA5  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 0BB8h  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_101EEA2  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push 10h  +
push edi  +
push dword ptr [esi+1Ch]  +
call ds:InsertMenuW  +
push ebx  +
push 0  +
push 70h  +
push 0BB9h  +
mov ecx esi +
call sub_101E32C  +
push ebx  +
push 0  +
push 6Dh  +
push 0BBAh  +
mov ecx esi +
call sub_101E32C  +
mov [esi+20h] ebx +
pop ebx  +
pop edi  +
mov ecx [ebp+var_4] +
xor eax eax +
xor ecx ebp +
inc eax  +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
push esi  +
mov esi ecx +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
cmp [esi+38h] eax +
jz loc_101EF59  +
push ebx  +
push edi  +
mov eax lpReserved +
mov edi offset lpReserved +
mov ebx offset dword_1002C2C +
cmp eax edi +
jz loc_101EF00  +
test byte ptr [eax+1Ch] 2 +
jz loc_101EF00  +
push ebx  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+44h]  +
test eax eax +
jge loc_101EF2C  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_101EF57  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101EF57  +
push eax  +
push offset aGet_connectedF  +
push ebx  +
push 34h  +
jmp loc_101EF88  +
cmp word ptr [ebp+var_8] 0 +
jnz loc_101EF5F  +
mov eax lpReserved +
cmp eax edi +
jz loc_101EF50  +
test byte ptr [eax+1Ch] 2 +
jz loc_101EF50  +
push ebx  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_4] 1 +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
mov eax [esi+38h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+88h]  +
test eax eax +
jge loc_101EF50  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_101EF57  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101EF57  +
push eax  +
push offset aDisconnectFail  +
push ebx  +
push 36h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_101EF57  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ecx+10h] esi +
jz loc_101EFC2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F00D  +
test byte ptr [eax+1Ch] 4 +
jz loc_101F00D  +
push offset dword_1002C2C  +
push 37h  +
jmp loc_101EFE9  +
xor eax eax +
inc eax  +
mov [ecx+10h] eax +
cmp [ecx+278h] esi +
jz loc_101EFF6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F00D  +
test byte ptr [eax+1Ch] 4 +
jz loc_101F00D  +
push offset dword_1002C2C  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101F00D  +
push [ebp+lParam]  +
mov [ecx+18h] eax +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
call ds:DefWindowProcW  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
mov esi ecx +
cmp dword ptr [esi+30h] 0 +
jnz loc_101F0A0  +
push dword ptr [esi+4]  +
call ds:IsIconic  +
test eax eax +
jnz loc_101F0A0  +
mov eax [esi+4] +
lea ecx [ebp+wndpl] +
push ecx  +
push eax  +
mov [ebp+wndpl.length] 2Ch +
call ds:GetWindowPlacement  +
test eax eax +
jnz loc_101F084  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_101F0A0  +
test byte ptr [ecx+1Ch] 4 +
jz loc_101F0A0  +
push eax  +
push offset aGetwindowplace  +
push offset dword_1002C2C  +
push 3Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_101F0A0  +
cmp dword ptr [esi+288h] 0 +
jz loc_101F0A0  +
push edi  +
mov edi [esi+284h] +
push 0Bh  +
add edi 28h +
pop ecx  +
lea esi [ebp+wndpl] +
movs   +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax lpReserved +
mov edi offset lpReserved +
mov ebx offset dword_1002C2C +
cmp eax edi +
jz loc_101F0E2  +
test byte ptr [eax+1Ch] 1 +
jz loc_101F0E2  +
push ebx  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax lpReserved +
mov ecx [esi+284h] +
cmp dword ptr [ecx+0C238h] 1 +
jnz loc_101F12C  +
cmp eax edi +
jz loc_101F109  +
test byte ptr [eax+1Ch] 4 +
jz loc_101F109  +
push ebx  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor edi edi +
push edi  +
push dword ptr [esi+4]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+284h]  +
call sub_10270A0  +
mov [esi+6D0h] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
push 7F02h  +
xor edi edi +
push edi  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
mov eax [esi+284h] +
cmp [eax+20h] edi +
jz loc_101F15B  +
push eax  +
call sub_1026EBD  +
test eax eax +
jz loc_101F15B  +
cmp [ebp+arg_8] edi +
jz loc_101F1D1  +
cmp [esi+280h] edi +
jnz loc_101F198  +
push 1F4h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_101F190  +
push [ebp+arg_4]  +
mov edx [esi+284h] +
push [ebp+arg_0]  +
mov ecx eax +
push edx  +
push esi  +
push dword ptr [esi+28h]  +
push dword ptr [esi+2Ch]  +
push edi  +
call sub_103B50F  +
jmp loc_101F192  +
xor eax eax +
mov [esi+280h] eax +
mov ecx [esi+280h] +
cmp ecx edi +
jz loc_101F123  +
cmp [esi+64h] edi +
jz loc_101F1BA  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
push 9  +
push eax  +
mov [esi+44h] eax +
call ds:ShowWindow  +
jmp loc_101F1CE  +
push 9  +
push dword ptr [esi+44h]  +
call ds:ShowWindow  +
push dword ptr [esi+44h]  +
call ds:SetForegroundWindow  +
mov [esi+64h] edi +
xor eax eax +
inc eax  +
jmp loc_101F125  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 274h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor eax eax +
push 206h  +
mov [ebp+Buffer] ax +
xor edi edi +
lea eax [ebp-20Ah] +
push edi  +
push eax  +
mov esi ecx +
call memset  +
add esp 0Ch +
cmp [esi+4Ch] edi +
jnz loc_101F327  +
mov eax [esi+284h] +
cmp eax edi +
jz loc_101F240  +
mov eax [eax+135Ch] +
neg eax  +
sbb eax eax +
and eax 32C7h +
add eax 3ECh +
jmp loc_101F245  +
mov eax 3ECh +
push 104h  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push 80CA0000h  +
lea eax [ebp+Buffer] +
push eax  +
push offset aTsc_popup_pare  +
push edi  +
call ds:CreateWindowExW  +
mov [esi+4Ch] eax +
cmp eax edi +
jnz loc_101F2AF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F32A  +
test byte ptr [eax+1Ch] 4 +
jz loc_101F32A  +
push offset dword_1002C2C  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101F32A  +
push 1  +
push eax  +
call sub_101E041  +
cmp eax edi +
jz loc_101F31D  +
lea ecx [ebp+var_274] +
push ecx  +
push eax  +
mov [ebp+var_274] 68h +
call sub_101E0B3  +
test eax eax +
jz loc_101F31D  +
mov eax [ebp+var_254] +
sub eax [ebp+var_25C] +
push edi  +
cdq   +
xor eax edx +
sub eax edx +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp+var_25C] +
push edi  +
push edi  +
push eax  +
mov eax [ebp+var_258] +
sub eax [ebp+var_260] +
cdq   +
xor eax edx +
sub eax edx +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp+var_260] +
push eax  +
push edi  +
push dword ptr [esi+4Ch]  +
call ds:SetWindowPos  +
push edi  +
push dword ptr [esi+4Ch]  +
call ds:ShowWindow  +
xor edi edi +
inc edi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov ecx esi +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
call sub_101E902  +
mov ecx [ebp+arg_8] +
mov eax [ebp+var_8] +
mov [ecx+20h] eax +
mov eax [ebp+var_4] +
mov [ecx+24h] eax +
lea eax [esi+6C4h] +
cmp dword ptr [eax] 0 +
jz loc_101F39E  +
mov eax [eax] +
mov edx [eax] +
push ecx  +
push [ebp+arg_4]  +
mov ecx eax +
push dword ptr [esi+4]  +
call dword ptr [edx+50h]  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101E8E9  +
test eax eax +
jz loc_101F3F7  +
cmp dword ptr [esi+6B4h] 0 +
jnz loc_101F3F7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F3E5  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F3E5  +
push offset dword_1002C2C  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+6C4h] +
mov eax [ecx] +
call dword ptr [eax+64h]  +
push eax  +
call ds:SetFocus  +
xor eax eax +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi ecx +
jz loc_101F458  +
call sub_101E8E9  +
test eax eax +
jz loc_101F458  +
cmp dword ptr [esi+6B4h] 0 +
jnz loc_101F458  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F446  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F446  +
push offset dword_1002C2C  +
push 4Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+6C4h] +
mov eax [ecx] +
call dword ptr [eax+64h]  +
push eax  +
call ds:SetFocus  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101E8E9  +
test eax eax +
jz loc_101F4B6  +
cmp dword ptr [esi+6B4h] 0 +
jnz loc_101F4B6  +
cmp dword ptr [esi+6C4h] 0 +
jz loc_101F4B6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F4A8  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F4A8  +
push offset dword_1002C2C  +
push 50h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+6C4h] +
mov eax [ecx] +
call dword ptr [eax+80h]  +
xor eax eax +
inc eax  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+30h] 0 +
push esi  +
mov [ebp+var_4] ebx +
jz loc_101F500  +
cmp dword ptr [ebx+6CCh] 0 +
jz loc_101F678  +
push 4Ch  +
call sub_101DF3B  +
mov esi [ebp+arg_4] +
push 4Dh  +
mov [esi+8] eax +
call sub_101DF3B  +
mov [esi+0Ch] eax +
jmp loc_101F678  +
mov esi [ebp+arg_4] +
test byte ptr [esi+18h] 1 +
jz loc_101F53A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F678  +
test byte ptr [eax+1Ch] 1 +
jz loc_101F678  +
push offset dword_1002C2C  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101F678  +
mov eax lpReserved +
push edi  +
mov edi offset dword_1002C2C +
cmp eax offset lpReserved +
jz loc_101F566  +
test byte ptr [eax+1Ch] 1 +
jz loc_101F566  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push edi  +
push 52h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push dword ptr [esi+14h]  +
mov ecx ebx +
push dword ptr [esi+10h]  +
call sub_101E902  +
mov ecx [esi+10h] +
mov ebx [ebp+arg_4] +
cmp ecx ebx +
jbe loc_101F5F9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F5A7  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F5A7  +
push ebx  +
push ecx  +
push edi  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
and dword ptr [esi+18h] 0FFFFFFFEh +
lea eax [ebp+Rect] +
push eax  +
mov eax [ebp+var_4] +
mov [esi+10h] ebx +
push dword ptr [eax+4]  +
call ds:GetWindowRect  +
mov ecx [esi+8] +
cmp ecx [ebp+Rect.left] +
jge loc_101F5F9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F5ED  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F5ED  +
mov edx [ebp+Rect.right] +
sub edx ebx +
push edx  +
push ecx  +
push edi  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov eax [ebp+Rect.right] +
sub eax ebx +
and dword ptr [esi+18h] 0FFFFFFFDh +
mov [esi+8] eax +
mov ecx [esi+14h] +
mov ebx [ebp+var_8] +
cmp ecx ebx +
jbe loc_101F677  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F625  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F625  +
push ebx  +
push ecx  +
push edi  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
and dword ptr [esi+18h] 0FFFFFFFEh +
lea eax [ebp+Rect] +
push eax  +
mov eax [ebp+var_4] +
mov [esi+14h] ebx +
push dword ptr [eax+4]  +
call ds:GetWindowRect  +
mov ecx [esi+0Ch] +
cmp ecx [ebp+Rect.top] +
jge loc_101F677  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F66B  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F66B  +
mov edx [ebp+Rect.bottom] +
sub edx ebx +
push edx  +
push ecx  +
push edi  +
push 56h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov eax [ebp+Rect.bottom] +
sub eax ebx +
and dword ptr [esi+18h] 0FFFFFFFDh +
mov [esi+0Ch] eax +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101E780  +
mov ecx [esi+6C4h] +
mov eax [ecx] +
pop esi  +
jmp dword ptr [eax+20h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+278h] ebx +
jz loc_101F6E6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F6D8  +
test byte ptr [eax+1Ch] 4 +
jz loc_101F6D8  +
push offset dword_1002C2C  +
push 64h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [esi+6A8h] 1 +
xor eax eax +
jmp loc_101F757  +
cmp [esi+0Ch] ebx +
jnz loc_101F6E2  +
push edi  +
xor edi edi +
inc edi  +
mov [esi+0Ch] edi +
cmp [esi+27Ch] ebx +
jz loc_101F720  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F754  +
test byte ptr [eax+1Ch] 4 +
jz loc_101F754  +
push offset dword_1002C2C  +
push 65h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_101F754  +
mov eax [esi+38h] +
mov [esi+27Ch] edi +
cmp eax ebx +
jz loc_101F75D  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+0B8h]  +
test eax eax +
jl loc_101F74E  +
cmp [ebp+var_4] ebx +
jz loc_101F781  +
cmp [ebp+var_4] edi +
jnz loc_101F74E  +
mov [esi+6A8h] edi +
mov [esi+27Ch] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F781  +
test byte ptr [eax+1Ch] 4 +
jz loc_101F781  +
push offset dword_1002C2C  +
push 66h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [esi+6A4h] ebx +
jz loc_101F794  +
mov ecx [esi+284h] +
call sub_102C2A5  +
push [ebp+lParam]  +
mov esi [esi+4] +
push [ebp+wParam]  +
push [ebp+Msg]  +
push esi  +
call ds:DefWindowProcW  +
jmp loc_101F756  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
xor ebx ebx +
push edi  +
mov edi ds:ShowWindow +
cmp eax ebx +
jz loc_101F7D1  +
push ebx  +
push eax  +
call edi  +
push ebx  +
push dword ptr [esi+4]  +
call edi  +
mov eax [esi+284h] +
cmp [eax+20h] ebx +
jnz loc_101F835  +
cmp [eax+135Ch] ebx +
jnz loc_101F835  +
cmp [esi+6A8h] ebx +
jnz loc_101F835  +
cmp [ebp+arg_0] ebx +
jnz loc_101F835  +
push dword ptr [esi+44h]  +
call ds:IsWindow  +
test eax eax +
jz loc_101F84A  +
push ebx  +
push ebx  +
push 423h  +
push dword ptr [esi+44h]  +
call ds:SendMessageW  +
push 1  +
push dword ptr [esi+44h]  +
call edi  +
push dword ptr [esi+44h]  +
call ds:SetForegroundWindow  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call ds:InvalidateRect  +
push dword ptr [esi+44h]  +
call ds:UpdateWindow  +
jmp loc_101F84A  +
push 0BEEBBEEBh  +
push 0C16h  +
push 10h  +
push dword ptr [esi+4]  +
call ds:PostMessageW  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ecx+38h] 0 +
jz loc_101F894  +
mov eax [ecx+38h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_100C4E8  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_101F8B8  +
push [ebp+arg_C]  +
mov eax [ebp+var_4] +
push [ebp+arg_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101F8B8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F8B8  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F8B8  +
push offset dword_1002C2C  +
push 6Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jz loc_101F8FF  +
cmp dword ptr [esi+28h] 0 +
jz loc_101F8FF  +
call sub_101EC22  +
test eax eax +
jnz loc_101F8FF  +
mov ecx [esi+28h] +
push eax  +
mov eax [esi+284h] +
push dword ptr [eax+135Ch]  +
push offset aHelp_entry_id_  +
push offset aMshelpWindows?  +
push dword ptr [esi+4]  +
call sub_102817E  +
xor eax eax +
pop esi  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101E8E9  +
test eax eax +
jz loc_101F94E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101F93C  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F93C  +
push offset dword_1002C2C  +
push 6Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+6C4h] +
mov eax [ecx] +
call dword ptr [eax+64h]  +
push eax  +
call ds:SetFocus  +
xor eax eax +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+6B4h] 0 +
jz loc_101F9DC  +
push ebx  +
push esi  +
mov eax lpReserved +
mov esi offset lpReserved +
mov ebx offset dword_1002C2C +
cmp eax esi +
jz loc_101F990  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F990  +
push ebx  +
push 6Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and dword ptr [edi+6B4h] 0 +
mov ecx edi +
call sub_101E8E9  +
test eax eax +
jz loc_101F9DA  +
cmp dword ptr [edi+6C4h] 0 +
jz loc_101F9DA  +
mov eax lpReserved +
cmp eax esi +
jz loc_101F9C8  +
test byte ptr [eax+1Ch] 2 +
jz loc_101F9C8  +
push ebx  +
push 6Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [edi+6C4h] +
mov eax [ecx] +
call dword ptr [eax+64h]  +
push eax  +
call ds:SetFocus  +
pop esi  +
pop ebx  +
xor eax eax +
pop edi  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
dec dword ptr [esi+278h]  +
jnz loc_101FA2A  +
cmp dword ptr [esi+6A8h] 0 +
jz loc_101FA2A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101FA21  +
test byte ptr [eax+1Ch] 2 +
jz loc_101FA21  +
push offset dword_1002C2C  +
push 74h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 1  +
mov ecx esi +
call sub_101F7AE  +
mov eax [esi+278h] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
inc dword ptr [esi+278h]  +
test ecx ecx +
jz loc_101FA5D  +
push [ebp+arg_8]  +
mov eax [ecx] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+54h]  +
mov ecx esi +
call sub_101F9E7  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
inc dword ptr [esi+278h]  +
test ecx ecx +
jz loc_101FA91  +
push [ebp+arg_4]  +
mov eax [ecx] +
push [ebp+arg_0]  +
call dword ptr [eax+58h]  +
mov ecx esi +
call sub_101F9E7  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
inc dword ptr [esi+278h]  +
test ecx ecx +
jz loc_101FAC2  +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+5Ch]  +
mov ecx esi +
call sub_101F9E7  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
inc dword ptr [esi+278h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_101FB3C  +
push 2  +
push 1  +
push offset aShowshutdowndi  +
push offset word_1002174  +
call sub_10509E3  +
test eax eax +
jz loc_101FB22  +
mov eax [esi+4] +
push 10041h  +
push 3AB5h  +
push 3ECh  +
push eax  +
push dword ptr [esi+2Ch]  +
call sub_105DE17  +
jmp loc_101FB25  +
xor eax eax +
inc eax  +
cmp eax 2 +
jnz loc_101FB3C  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] eax +
mov [esi+0Ch] eax +
mov [esi+6A8h] eax +
jmp loc_101FB45  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
mov ecx esi +
call sub_101F9E7  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+3Ch] +
inc dword ptr [esi+278h]  +
mov dword ptr [esi+40h] 1 +
test ecx ecx +
jnz loc_101FBDF  +
push 28h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_101FB93  +
mov edx [esi+8] +
push edi  +
mov edi [esi+4] +
push edx  +
push edi  +
mov ecx eax +
call sub_101BBBC  +
pop edi  +
jmp loc_101FB95  +
xor eax eax +
mov [esi+3Ch] eax +
test eax eax +
jnz loc_101FBC7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101FC07  +
test byte ptr [eax+1Ch] 4 +
jz loc_101FC07  +
push offset aCadminservicem  +
push offset dword_1002C2C  +
push 75h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_101FC07  +
push dword ptr [esi+8]  +
mov ecx eax +
push [ebp+arg_0]  +
call sub_101BE33  +
cmp dword ptr [esi+6B8h] 3 +
jnz loc_101FC07  +
jmp loc_101FBFB  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_101BE33  +
cmp dword ptr [esi+6B8h] 3 +
jnz loc_101FC07  +
mov ecx [esi+3Ch] +
call sub_101BC67  +
mov ecx [esi+3Ch] +
call sub_101BC1F  +
and dword ptr [esi+40h] 0 +
mov ecx esi +
call sub_101F9E7  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp dword ptr [ecx+38h] 0 +
push ebx  +
push esi  +
mov ebx offset dword_1002C2C +
jz loc_101FC86  +
mov ecx [ecx+38h] +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_100C4F8  +
push ecx  +
call dword ptr [eax]  +
mov esi eax +
test esi esi +
jl loc_101FC63  +
mov eax [ebp+var_4] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
jmp loc_101FC8B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101FC90  +
test byte ptr [eax+1Ch] 4 +
jz loc_101FC90  +
push esi  +
push ebx  +
push 76h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_101FC8B  +
mov esi 80004005h +
mov eax lpReserved +
test esi esi +
jge loc_101FCB5  +
cmp eax offset lpReserved +
jz loc_101FCB5  +
test byte ptr [eax+1Ch] 4 +
jz loc_101FCB5  +
push esi  +
push offset aFailedToSetCon  +
push ebx  +
push 77h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+288h] 0 +
push edi  +
jnz loc_101FD0F  +
mov edi ds:ShowWindow +
push 0  +
push dword ptr [esi+48h]  +
call edi  +
mov eax [esi+44h] +
test eax eax +
jz loc_101FCF3  +
push 0  +
push eax  +
call ds:EnableWindow  +
mov eax [esi+44h] +
jmp loc_101FD12  +
mov ecx esi +
call sub_101F1DE  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_101FD0B  +
push 5  +
push eax  +
call edi  +
mov eax [esi+4Ch] +
jmp loc_101FD12  +
xor eax eax +
jmp loc_101FD12  +
mov eax [esi+4] +
push eax  +
mov ecx esi +
mov dword ptr [esi+0Ch] 1 +
call sub_101FC18  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
push edi  +
xor edi edi +
inc dword ptr [esi+278h]  +
test ecx ecx +
jz loc_101FD4E  +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+7Ch]  +
mov edi eax +
mov ecx esi +
call sub_101F9E7  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
push edi  +
xor edi edi +
inc dword ptr [esi+278h]  +
test ecx ecx +
jz loc_101FD8A  +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+84h]  +
mov edi eax +
mov ecx esi +
call sub_101F9E7  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+284h] +
add eax 0B3D0h +
retn   +
***
mov eax [ecx+284h] +
mov eax [eax+0B5D8h] +
retn   +
***
mov eax [ecx+284h] +
mov eax [eax+0B5D0h] +
retn   +
***
mov eax [ecx+284h] +
mov eax [eax+0B5D4h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi ecx +
call sub_101DD84  +
test eax eax +
jz loc_101FE6E  +
and [ebp+var_18] 0 +
mov ecx [esi+284h] +
push edi  +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
stos   +
cmp dword ptr [ecx+0C458h] 0 +
jz loc_101FE1B  +
xor edi edi +
jmp loc_101FE2C  +
xor eax eax +
cmp [ecx+0C45Ch] eax +
setz al  +
lea eax [eax+eax+1] +
mov edi eax +
mov eax [esi+280h] +
test eax eax +
jnz loc_101FE3A  +
xor edx edx +
jmp loc_101FE40  +
mov edx [eax+1B8h] +
xor eax eax +
inc eax  +
mov [ebp+var_18] eax +
mov [ebp+var_10] eax +
mov [ebp+var_14] edi +
mov [ebp+var_C] edx +
mov ecx [ecx+135Ch] +
mov [ebp+var_8] eax +
lea eax [ebp+var_18] +
push eax  +
push 3  +
push 17BEh  +
push 0  +
mov [ebp+var_4] ecx +
call sub_101DD3B  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 65h +
jnz loc_101FE93  +
xor eax eax +
push eax  +
push eax  +
push eax  +
call sub_101F0AC  +
test eax eax +
jnz loc_101FE93  +
inc eax  +
jmp loc_101FE95  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
inc dword ptr [esi+278h]  +
xor edi edi +
inc edi  +
mov [esi+494h] edi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101FEDF  +
test byte ptr [eax+1Ch] 2 +
jz loc_101FEDF  +
push 3  +
push dword ptr [esi+6B8h]  +
push offset dword_1002C2C  +
push 57h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov ecx [esi+6C4h] +
inc dword ptr [esi+6A0h]  +
mov dword ptr [esi+6B8h] 3 +
mov [esi+6A4h] edi +
mov eax [ecx] +
call dword ptr [eax+10h]  +
cmp dword ptr [esi+40h] 0 +
jz loc_101FF16  +
mov ecx [esi+3Ch] +
test ecx ecx +
jz loc_101FF16  +
call sub_101BC1F  +
and dword ptr [esi+40h] 0 +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_101F9E7  +
***
mov edi edi +
push esi  +
mov esi ecx +
inc dword ptr [esi+278h]  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_101FF5B  +
test byte ptr [eax+1Ch] 2 +
jz loc_101FF5B  +
push 2  +
push dword ptr [esi+6B8h]  +
push offset dword_1002C2C  +
push 58h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
cmp dword ptr [esi+30h] 0 +
mov dword ptr [esi+6B8h] 2 +
jz loc_101FF83  +
lea eax [esi+6B0h] +
push eax  +
lea eax [esi+6ACh] +
push eax  +
push 1  +
push dword ptr [esi+4]  +
call sub_1050B9C  +
mov ecx esi +
pop esi  +
jmp sub_101F9E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 610h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
mov eax [esi+284h] +
mov ebx 100h +
push ebx  +
lea ecx [ebp-404h] +
push ecx  +
lea ecx [eax+54h] +
mov [ebp-610h] edi +
call sub_105B0F0  +
test eax eax +
jl loc_1020191  +
mov edx [esi+284h] +
cmp dword ptr [edx+0C460h] 0 +
jz loc_1020124  +
lea ecx [edx+0C464h] +
lea eax [esi+498h] +
mov di [eax] +
cmp di [ecx] +
jnz loc_102001B  +
test di di +
jz loc_1020017  +
mov di [eax+2] +
cmp di [ecx+2] +
jnz loc_102001B  +
add eax 4 +
add ecx 4 +
test di di +
jnz loc_101FFF5  +
xor eax eax +
jmp loc_1020020  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_102011E  +
cmp dword ptr [edx+0C44Ch] 0 +
jnz loc_102011E  +
push ebx  +
lea eax [ebp-204h] +
push eax  +
push 3EDh  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_10200EA  +
mov esi [esi+284h] +
cmp dword ptr [esi+0C45Ch] 0 +
lea eax [ebp-60Ch] +
jnz loc_102007B  +
push 104h  +
push eax  +
add esi 0C464h +
push esi  +
call sub_1026FF6  +
jmp loc_102008D  +
add esi 0C66Ch +
push esi  +
push 104h  +
push eax  +
call sub_101BD65  +
mov esi [ebp-610h] +
lea eax [ebp-404h] +
push eax  +
lea eax [ebp-60Ch] +
push eax  +
lea eax [ebp-204h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_101BDD4  +
add esp 14h +
test eax eax +
jge loc_10201BA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10200E0  +
test byte ptr [eax+1Ch] 4 +
jz loc_10200E0  +
push offset dword_1002C2C  +
push 5Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov [esi] ax +
jmp loc_10201BA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102010E  +
test byte ptr [eax+1Ch] 4 +
jz loc_102010E  +
push offset dword_1002C2C  +
push 5Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp-610h] +
xor eax eax +
mov [ecx] ax +
jmp loc_10201BA  +
mov edi [ebp-610h] +
push ebx  +
lea eax [ebp-204h] +
push eax  +
push 3EEh  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_1020176  +
lea eax [ebp-404h] +
push eax  +
lea eax [ebp-204h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_101BDD4  +
add esp 10h +
test eax eax +
jge loc_10201BA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10201B5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10201B5  +
push offset dword_1002C2C  +
push 5Ch  +
jmp loc_10201AA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10201B5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10201B5  +
push offset dword_1002C2C  +
push 5Dh  +
jmp loc_10201AA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10201B5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10201B5  +
push offset dword_1002C2C  +
push 5Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov [edi] ax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
inc dword ptr [esi+278h]  +
mov dword ptr [esi+74h] 1 +
test ecx ecx +
jz loc_10201F1  +
mov eax [ecx] +
call dword ptr [eax+60h]  +
mov ecx esi +
pop esi  +
jmp sub_101F9E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
movzx eax byte ptr [ebp+wParam] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+wParam] +
mov esi ecx +
mov ecx [esi+3Ch] +
shr edi 18h +
inc dword ptr [esi+278h]  +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_102022A  +
call sub_101BC44  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+lParam] +
push edx  +
push eax  +
call dword ptr [ecx+0A4h]  +
test eax eax +
jge loc_1020242  +
and [ebp+lParam] 0 +
mov eax lpReserved +
xor ebx ebx +
inc ebx  +
cmp eax offset lpReserved +
jz loc_1020270  +
test byte ptr [eax+1Ch] 2 +
jz loc_1020270  +
push ebx  +
push dword ptr [esi+6B8h]  +
push offset dword_1002C2C  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
push [ebp+lParam]  +
mov ecx [esi+6C4h] +
push [ebp+wParam]  +
mov [esi+6B8h] ebx +
mov eax [ecx] +
call dword ptr [eax+14h]  +
and dword ptr [esi+0Ch] 0 +
test edi edi +
jnz loc_10202A7  +
cmp [ebp+wParam] 0B08h +
jz loc_10202A7  +
cmp [ebp+var_8] 2 +
jz loc_10202A7  +
cmp [ebp+var_8] ebx +
jz loc_10202A7  +
mov ecx ebx +
jmp loc_10202A9  +
xor ecx ecx +
cmp [ebp+lParam] 5 +
jz loc_10202B7  +
test edi edi +
jnz loc_10202B7  +
xor eax eax +
jmp loc_10202B9  +
mov eax ebx +
or ecx eax +
cmp edi 3 +
jnz loc_10202E3  +
mov eax [ebp+wParam] +
cmp eax 300001Ah +
jz loc_10202DF  +
cmp eax 300001Dh +
jz loc_10202DF  +
cmp eax 3000001h +
jz loc_10202DF  +
cmp eax 3000026h +
jnz loc_10202E1  +
xor ebx ebx +
and ecx ebx +
test ecx ecx +
jz loc_10203C6  +
mov eax lpReserved +
mov ebx offset lpReserved +
cmp eax ebx +
jz loc_1020319  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020319  +
mov edi offset dword_1002C2C +
push edi  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax lpReserved +
jmp loc_102031E  +
mov edi offset dword_1002C2C +
cmp dword ptr [esi+288h] 0 +
jnz loc_102037E  +
push dword ptr [esi+44h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1020379  +
mov eax [esi+284h] +
cmp dword ptr [eax+135Ch] 0 +
jnz loc_1020379  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1020360  +
test byte ptr [eax+1Ch] 2 +
jz loc_1020360  +
push edi  +
push 61h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 8102h  +
push dword ptr [esi+44h]  +
call ds:PostMessageW  +
jmp loc_102044B  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1020396  +
test byte ptr [eax+1Ch] 2 +
jz loc_1020396  +
push edi  +
push 62h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push esi  +
push dword ptr [esi+2Ch]  +
lea ecx [ebp+var_20] +
push dword ptr [esi+4]  +
call sub_1028CE8  +
mov eax [ebp+wParam] +
mov [ebp+var_1C] eax +
mov eax [ebp+lParam] +
lea ecx [ebp+var_20] +
mov [ebp+var_C] eax +
call sub_1029213  +
lea ecx [ebp+var_20] +
call sub_1028D18  +
jmp loc_102044B  +
mov ecx [esi+284h] +
push 0  +
push dword ptr [esi+38h]  +
call sub_102C00D  +
test eax eax +
jge loc_1020406  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1020406  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1020406  +
push eax  +
push offset aGetupdatesfrom  +
push offset dword_1002C2C  +
push 63h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
cmp dword ptr [esi+6A4h] 0 +
jz loc_1020441  +
mov ecx [esi+284h] +
call sub_102C2A5  +
push dword ptr [esi+44h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1020441  +
push 1394h  +
push dword ptr [esi+44h]  +
call ds:GetDlgItem  +
push eax  +
push dword ptr [esi+284h]  +
call sub_1026EEB  +
push dword ptr [esi+74h]  +
mov ecx esi +
call sub_101F7AE  +
and dword ptr [esi+288h] 0 +
mov ecx esi +
call sub_101F9E7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
inc dword ptr [esi+278h]  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov ecx esi +
pop esi  +
jmp sub_101F9E7  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+6C4h] +
inc dword ptr [esi+278h]  +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov ecx esi +
pop esi  +
jmp sub_101F9E7  +
***
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
xor esi esi +
mov ebx ecx +
mov [ebp-4] esi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10204E0  +
test byte ptr [eax+1Ch] 2 +
jz loc_10204E0  +
push offset dword_1002C2C  +
push 6Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
inc dword ptr [ebx+278h]  +
mov eax [ebx+284h] +
mov [eax+0C200h] esi +
cmp [ebx+30h] esi +
jz loc_1020600  +
push dword ptr [ebx+4]  +
call ds:LockWindowUpdate  +
mov ecx ebx +
mov [ebx+30h] esi +
call sub_101E4D4  +
mov eax [ebx+284h] +
lea edx [eax+28h] +
cmp edx esi +
jz loc_1020600  +
mov eax [ebx+54h] +
push edi  +
push 0Bh  +
pop ecx  +
mov esi edx +
lea edi [ebp-40h] +
movs   +
mov esi [ebp-1Ch] +
mov ecx [ebp-24h] +
sub esi ecx +
cmp esi eax +
jbe loc_1020545  +
add eax ecx +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 1 +
mov esi [ebp-18h] +
mov ecx [ebp-20h] +
mov eax [ebx+58h] +
sub esi ecx +
cmp esi eax +
jbe loc_1020560  +
add eax ecx +
mov [ebp-18h] eax +
mov dword ptr [ebp-4] 1 +
cmp dword ptr [ebp-4] 0 +
jz loc_1020570  +
push 0Bh  +
pop ecx  +
lea esi [ebp-40h] +
mov edi edx +
movs   +
mov eax [ebx+4] +
lea ecx [ebp-40h] +
push ecx  +
push eax  +
call ds:SetWindowPlacement  +
pop edi  +
test eax eax +
jz loc_1020600  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetWindowRect  +
mov eax [ebx+4] +
push 0FFFFFFF0h  +
push eax  +
call ds:GetWindowLongW  +
or eax 0C50000h +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [ebx+4]  +
call ds:SetWindowLongW  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push 32h  +
push eax  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
xor esi esi +
push eax  +
push esi  +
push esi  +
push 0FFFFFFFEh  +
push dword ptr [ebx+4]  +
call ds:SetWindowPos  +
mov ecx ebx +
call sub_101EA55  +
test eax eax +
jz loc_10205E2  +
push 1  +
push dword ptr [ebx+4]  +
call ds:ShowWindow  +
push esi  +
call ds:LockWindowUpdate  +
lea eax [ebx+6B0h] +
push eax  +
lea eax [ebx+6ACh] +
push eax  +
push esi  +
push dword ptr [ebx+4]  +
call sub_1050B9C  +
mov ecx ebx +
call sub_101F9E7  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push esi  +
mov esi ecx +
inc dword ptr [esi+278h]  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020648  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020648  +
push [ebp+arg_0]  +
push offset dword_1002C2C  +
push 70h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [ebp+arg_0] +
dec eax  +
jnz loc_102066C  +
push dword ptr [esi+2Ch]  +
lea ecx [ebp+var_34] +
push dword ptr [esi+4]  +
call sub_1029375  +
lea ecx [ebp+var_34] +
call sub_105340F  +
lea ecx [ebp+var_34] +
call sub_102939F  +
mov ecx esi +
call sub_101F9E7  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
push ebx  +
push esi  +
mov ebx ecx +
inc dword ptr [ebx+278h]  +
push edi  +
mov eax lpReserved +
mov esi [ebp+arg_4] +
cmp eax offset lpReserved +
jz loc_10206BB  +
test byte ptr [eax+1Ch] 2 +
jz loc_10206BB  +
push esi  +
push [ebp+hWnd]  +
push offset dword_1002C2C  +
push 71h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov eax [ebp+hWnd] +
mov ecx ebx +
mov [ebx+5Ch] eax +
mov [ebx+60h] esi +
call sub_101E4D4  +
xor edi edi +
cmp [ebx+30h] edi +
jnz loc_10207CF  +
mov eax [ebp+hWnd] +
mov [ebp+rcSrc1.right] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+4]  +
mov [ebp+rcSrc1.left] edi +
mov [ebp+rcSrc1.top] edi +
mov [ebp+rcSrc1.bottom] esi +
call ds:GetWindowRect  +
mov eax [ebx+4] +
mov esi ds:GetWindowLongW +
push 0FFFFFFECh  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
push eax  +
push edi  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call esi  +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
call ds:AdjustWindowRectEx  +
push 14h  +
call sub_101DF3B  +
mov ecx [ebp+Rect.left] +
sub ecx [ebp+rcSrc1.left] +
push 3  +
add ecx [ebp+rcSrc1.right] +
add ecx eax +
mov [ebp+rcSrc1.right] ecx +
call sub_101DF3B  +
mov ecx [ebp+Rect.top] +
mov edx ecx +
sub edx [ebp+rcSrc1.top] +
mov [ebp+rcSrc1.top] ecx +
add edx [ebp+rcSrc1.bottom] +
add edx eax +
mov eax [ebp+Rect.left] +
mov [ebp+rcSrc1.left] eax +
lea eax [ebp+rcDst] +
push eax  +
push dword ptr [ebx+4]  +
mov [ebp+rcSrc1.bottom] edx +
call sub_1026CF9  +
lea eax [ebp+rcDst] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
lea eax [ebp+X] +
push eax  +
call ds:IntersectRect  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
push edi  +
push eax  +
mov eax [ebp-18h] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-1Ch]  +
push [ebp+X]  +
push dword ptr [ebx+4]  +
call ds:MoveWindow  +
cmp [ebx+494h] edi +
jz loc_10207CF  +
push dword ptr [ebx+4]  +
call ds:IsIconic  +
test eax eax +
jnz loc_10207CF  +
push 0Ah  +
pop ecx  +
mov [ebp+wndpl.length] 2Ch +
lea edi [ebp+wndpl.flags] +
stos   +
mov eax [ebx+4] +
lea ecx [ebp+wndpl] +
push ecx  +
push eax  +
call ds:GetWindowPlacement  +
test eax eax +
jz loc_10207CF  +
mov edi [ebx+284h] +
push 0Bh  +
add edi 28h +
pop ecx  +
lea esi [ebp+wndpl] +
movs   +
mov ecx ebx +
call sub_101F9E7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi 100h +
push esi  +
lea edi [ecx+78h] +
push edi  +
push 0BB6h  +
push dword ptr [ecx+2Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_102080D  +
push offset aInvalidResourc  +
push esi  +
push edi  +
call sub_101BD65  +
mov eax edi +
pop edi  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
test eax eax +
jz loc_1020858  +
push 0FFFFFFF0h  +
push eax  +
call ds:GetWindowLongW  +
test eax 20000000h +
jz loc_1020858  +
push 5  +
push dword ptr [esi+4]  +
call ds:ShowWindow  +
mov edi 100h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 0BB7h  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_1020888  +
push offset aFatalError  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call sub_101BD65  +
push dword ptr [ebp+arg_4]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_404] +
push edi  +
push eax  +
call sub_101BDD4  +
mov esi [esi+4] +
add esp 10h +
push 10010h  +
lea eax [ebp+var_404] +
push eax  +
push ebx  +
push esi  +
call sub_105D992  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10208DF  +
test byte ptr [eax+1Ch] 2 +
jz loc_10208DF  +
push esi  +
push offset dword_1002C2C  +
push 73h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
pop edi  +
mov eax esi +
dec eax  +
pop esi  +
pop ebx  +
jz loc_10208F6  +
dec eax  +
dec eax  +
jz loc_10208F6  +
dec eax  +
jnz loc_1020905  +
call ds:DebugBreak  +
jmp loc_1020905  +
push 0  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 430h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [ebp+var_420] ebx +
mov [ebp+var_41C] ebx +
cmp [esi+38h] ebx +
jz loc_1020E49  +
push edi  +
mov [esi+6A4h] ebx +
call sub_101FDE5  +
mov eax [esi+284h] +
cmp dword ptr [eax+0C238h] 1 +
jnz loc_10209A4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020987  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020987  +
push offset dword_1002C2C  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push ebx  +
push dword ptr [esi+4]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+284h]  +
call sub_10270A0  +
mov [esi+6D0h] ebx +
jmp loc_1020E38  +
cmp [eax+0C214h] ebx +
jnz loc_1020A97  +
mov edi [eax+0C204h] +
mov ecx [eax+0C20Ch] +
mov [ebp+var_418] edi +
mov [ebp+var_414] ecx +
cmp [eax+0C200h] ebx +
jz loc_10209FE  +
cmp edi ebx +
jnz loc_10209FE  +
lea ecx [ebp+rc] +
push ecx  +
add eax 44h +
push eax  +
call sub_1026D4E  +
mov ebx [ebp+rc.right] +
mov edi [ebp+rc.bottom] +
sub ebx [ebp+rc.left] +
sub edi [ebp+rc.top] +
jmp loc_1020A58  +
cmp [eax+135Ch] ebx +
jz loc_1020A97  +
cmp edi ebx +
jnz loc_1020A16  +
cmp ecx ebx +
jnz loc_1020A16  +
xor eax eax +
jmp loc_1020A19  +
push 4Eh  +
pop eax  +
push eax  +
call sub_101DF3B  +
mov ebx eax +
test edi edi +
jnz loc_1020A32  +
cmp [ebp+var_414] edi +
jnz loc_1020A32  +
xor eax eax +
inc eax  +
jmp loc_1020A35  +
push 4Fh  +
pop eax  +
push eax  +
call sub_101DF3B  +
cmp [ebp+var_418] 0 +
mov edi eax +
jz loc_1020A58  +
push 4Ch  +
call sub_101DF3B  +
push 4Dh  +
add ebx eax +
call sub_101DF3B  +
add edi eax +
test ebx ebx +
jz loc_1020A97  +
test edi edi +
jz loc_1020A97  +
cmp [ebp+var_414] 0 +
jnz loc_1020A7F  +
mov eax 1000h +
cmp ebx eax +
jl loc_1020A74  +
mov ebx eax +
mov eax 800h +
cmp edi eax +
jl loc_1020A7F  +
mov edi eax +
mov ecx [esi+284h] +
push ebx  +
call sub_101ED57  +
mov ecx [esi+284h] +
push edi  +
call sub_101ED78  +
mov ecx [esi+284h] +
call sub_102A3DD  +
call sub_104A1C6  +
test eax eax +
jnz loc_1020B13  +
mov eax [esi+284h] +
mov ecx [eax+0B5D0h] +
cmp ecx 1 +
jnz loc_1020AD4  +
push dword ptr [eax+135Ch]  +
push 3425h  +
push dword ptr [esi+44h]  +
call sub_105B0B4  +
jmp loc_1020E38  +
cmp ecx 2 +
jnz loc_1020B13  +
lea ecx [ebp+var_414] +
push ecx  +
push dword ptr [eax+135Ch]  +
push 3426h  +
push dword ptr [esi+44h]  +
call sub_105AFB2  +
xor edi edi +
cmp [ebp+var_414] edi +
jz loc_1020E38  +
mov eax [esi+284h] +
mov dword ptr [eax+0B5D0h] 4 +
jmp loc_1020B15  +
xor edi edi +
mov eax [esi+284h] +
push 100h  +
lea ecx [ebp+var_40C] +
push ecx  +
lea ecx [eax+54h] +
call sub_105B10A  +
cmp eax edi +
jge loc_1020B6C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1020E38  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1020E38  +
push eax  +
push offset aFailedToGetPla  +
push offset dword_1002C2C  +
push 28h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1020E38  +
push dword ptr [esi+38h]  +
mov ecx [esi+284h] +
call sub_102D4DA  +
cmp eax edi +
jge loc_1020BA9  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1020E38  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1020E38  +
push eax  +
push offset aApplytocontrol  +
push offset dword_1002C2C  +
push 29h  +
jmp loc_1020B5C  +
mov eax [esi+284h] +
mov ecx [eax+70D0h] +
mov [esi+5Ch] ecx +
mov eax [eax+70D4h] +
mov ecx esi +
mov [esi+60h] eax +
call sub_101E4D4  +
mov eax [esi+284h] +
cmp [eax+135Ch] edi +
jz loc_1020C3B  +
mov eax [esi+38h] +
lea edx [ebp+var_410] +
push edx  +
mov [ebp+var_410] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+9Ch]  +
test eax eax +
jl loc_1020C3B  +
cmp [ebp+var_410] edi +
jz loc_1020C3B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020C1F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020C1F  +
push offset dword_1002C2C  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+var_410] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+1D4h]  +
mov eax [ebp+var_410] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_41C] +
push edx  +
push eax  +
call dword ptr [ecx+80h]  +
test eax eax +
jl loc_1020E38  +
mov ecx [ebp+var_41C] +
cmp ecx edi +
jz loc_1020E48  +
mov eax [esi+284h] +
mov edx [ecx] +
add eax 0C874h +
push eax  +
push ecx  +
call dword ptr [edx+64h]  +
cmp eax edi +
jge loc_1020CA8  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1020E38  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1020E38  +
push eax  +
push offset aFailedPut_clxc  +
push offset dword_1002C2C  +
push 2Bh  +
jmp loc_1020B5C  +
mov eax [esi+38h] +
mov [esi+74h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+84h]  +
mov edi eax +
mov ebx 404h +
test edi edi +
jl loc_1020CE6  +
cmp edi ebx +
jz loc_1020CE6  +
test edi edi +
jnz loc_1020CD7  +
mov esi [esi+6C4h] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov [ebp+var_420] 1 +
jmp loc_1020E38  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020D0B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020D0B  +
push edi  +
push offset dword_1002C2C  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi+44h] +
test eax eax +
jnz loc_1020D15  +
mov eax [esi+4] +
mov [ebp+var_414] eax +
cmp edi ebx +
jnz loc_1020E00  +
mov eax [esi+38h] +
and [ebp+var_410] 0 +
and [ebp+var_418] 0 +
mov ecx [eax] +
lea edx [ebp+var_410] +
push edx  +
push offset dword_100C718  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_1020D95  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1020D75  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1020D75  +
push eax  +
push offset aQiForIid_imsrd  +
push offset dword_1002C2C  +
push 2Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+var_410] +
test eax eax +
jz loc_1020E38  +
and [ebp+var_410] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1020E38  +
mov eax [ebp+var_410] +
mov ecx [eax] +
lea edx [ebp+var_418] +
push edx  +
push 0  +
push ebx  +
push eax  +
call dword ptr [ecx+0D8h]  +
test eax eax +
jge loc_1020DD5  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1020D75  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1020D75  +
push eax  +
push offset aGeterrordescri  +
push offset dword_1002C2C  +
push 2Eh  +
jmp loc_1020D6A  +
push 10h  +
add esi 28Ch +
push esi  +
push [ebp+var_418]  +
push [ebp+var_414]  +
call sub_105D992  +
push [ebp+var_418]  +
call ds:SysFreeString  +
jmp loc_1020D75  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 409h  +
push dword ptr [esi+2Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_1020E38  +
push 10h  +
add esi 28Ch +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+var_414]  +
call sub_105D992  +
mov eax [ebp+var_41C] +
test eax eax +
jz loc_1020E48  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_420] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor eax eax +
cmp dword ptr [ebx+0C238h] 1 +
push edi  +
mov edi ecx +
mov esi 8000FFFFh +
mov [ebp+var_4] eax +
jnz loc_1020E9D  +
push eax  +
push eax  +
push eax  +
call ds:GetModuleHandleW  +
push eax  +
push ebx  +
call sub_10270A0  +
mov esi 8007000Dh +
jmp loc_1020F8E  +
cmp [edi+6C4h] eax +
jz loc_1020F8E  +
mov eax [edi+38h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset loc_100C518  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jge loc_1020EEC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020F8E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020F8E  +
push esi  +
push offset aQiForIid_ims_0  +
push offset dword_1002C2C  +
push 2Fh  +
jmp loc_1020F83  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_102A45C  +
mov esi eax +
test esi esi +
jge loc_1020F21  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020F8E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020F8E  +
push esi  +
push offset aApplyrdpsignin  +
push offset dword_1002C2C  +
push 30h  +
jmp loc_1020F83  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_102A5B7  +
mov esi eax +
test esi esi +
jge loc_1020F52  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020F8E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020F8E  +
push esi  +
push offset aApplytswasetti  +
push offset dword_1002C2C  +
push 31h  +
jmp loc_1020F83  +
mov ecx [edi+6C4h] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+2Ch]  +
mov esi eax +
test esi esi +
jge loc_1020F8E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1020F8E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1020F8E  +
push esi  +
push offset aStartremotea_0  +
push offset dword_1002C2C  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1020F9F  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor edi edi +
cmp [ebx+30h] edi +
jnz loc_10211CA  +
mov eax [ebx+284h] +
cmp eax edi +
jz loc_10211C1  +
lea esi [eax+28h] +
cmp esi edi +
jz loc_10211C1  +
push 0Bh  +
pop ecx  +
push dword ptr [ebx+4]  +
lea edi [ebp+wndpl] +
movs   +
call ds:IsIconic  +
test eax eax +
jnz loc_1021061  +
mov eax [ebx+4] +
lea ecx [ebp+wndpl] +
push ecx  +
push eax  +
call ds:GetWindowPlacement  +
test eax eax +
jnz loc_1021047  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10211C1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10211C1  +
push eax  +
push offset aGetwindowplace  +
push offset dword_1002C2C  +
push 3Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10211C1  +
cmp dword ptr [ebx+288h] 0 +
jz loc_1021061  +
mov edi [ebx+284h] +
push 0Bh  +
add edi 28h +
pop ecx  +
lea esi [ebp+wndpl] +
movs   +
mov eax lpReserved +
mov esi offset lpReserved +
cmp eax esi +
jz loc_102108C  +
test byte ptr [eax+1Ch] 1 +
jz loc_102108C  +
push offset dword_1002C2C  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax lpReserved +
cmp [ebp+arg_4] 2 +
jnz loc_102114D  +
cmp eax esi +
jz loc_10210B2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10210B2  +
push offset dword_1002C2C  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
lea eax [ebp+wndpl] +
push eax  +
mov ecx ebx +
call sub_101E48C  +
cmp dword ptr [ebx+288h] 0 +
jz loc_10210DC  +
mov edi [ebx+284h] +
push 0Bh  +
add edi 28h +
pop ecx  +
lea esi [ebp+wndpl] +
movs   +
mov esi offset lpReserved +
mov eax [ebx+4] +
lea ecx [ebp+wndpl] +
push ecx  +
push eax  +
call ds:SetWindowPlacement  +
test eax eax +
jnz loc_102111E  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_10211C1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10211C1  +
push eax  +
push offset aSetwindowplace  +
push offset dword_1002C2C  +
push 40h  +
jmp loc_1021037  +
mov ecx ebx +
call sub_101E4D4  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
call sub_101E546  +
push 216h  +
push dword ptr [ebp-14h]  +
xor eax eax +
push dword ptr [ebp-18h]  +
push eax  +
push eax  +
push eax  +
push dword ptr [ebx+4]  +
call ds:SetWindowPos  +
xor edi edi +
cmp [ebx+6C4h] edi +
jz loc_10211C1  +
push [ebp+arg_8]  +
mov ecx [ebx+6C4h] +
push [ebp+arg_4]  +
mov eax [ecx] +
push dword ptr [ebx+4]  +
call dword ptr [eax+34h]  +
cmp [ebx+24h] edi +
jz loc_10211C1  +
mov ecx [ebx+6C4h] +
mov eax [ecx] +
lea edx [ebp+arg_8] +
push edx  +
lea edx [ebp+arg_4] +
push edx  +
call dword ptr [eax+28h]  +
lea eax [ebp+X] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
mov eax [ebp-14h] +
sub eax [ebp+arg_8] +
mov ecx [ebp-1Ch] +
add ecx [ebp+arg_4] +
mov [ebp-14h] eax +
push 1  +
sub eax ecx +
push eax  +
mov eax [ebp-18h] +
sub eax [ebp+X] +
mov [ebp-1Ch] ecx +
push eax  +
push ecx  +
push [ebp+X]  +
mov ecx [ebx+24h] +
call sub_101A40B  +
push eax  +
call ds:MoveWindow  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 0Ch  +
cmp [ebp+arg_4] edi +
jnz loc_102114F  +
cmp [ebx+38h] edi +
jz loc_102114F  +
mov eax [ebx+38h] +
lea edx [ebp+var_4] +
push edx  +
push offset loc_100C528  +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_102122E  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+0DCh]  +
cmp eax edi +
jge loc_102122E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102122E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102122E  +
push eax  +
push offset dword_1002C2C  +
push 41h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
cmp [ebx+6CCh] edi +
jnz loc_102124F  +
cmp [ebp+var_8] 1 +
ja loc_102124F  +
mov eax [ebx+4] +
lea ecx [ebp+Y] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
call sub_1050CE9  +
jmp loc_1021265  +
push 4Ch  +
call sub_101DF3B  +
push 4Dh  +
mov [ebp-14h] eax +
call sub_101DF3B  +
mov [ebp+Y] eax +
xor eax eax +
cmp eax edi +
jl loc_1021282  +
push 205h  +
push edi  +
push edi  +
push [ebp+Y]  +
push dword ptr [ebp-14h]  +
push edi  +
push dword ptr [ebx+4]  +
call ds:SetWindowPos  +
jmp loc_10212A9  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10212A9  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10212A9  +
push eax  +
push offset dword_1002C2C  +
push 42h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_102114F  +
mov [ebp+var_4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102114F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov eax [esi+38h] +
lea edx [ebp+var_1C] +
push edx  +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
mov [ebp+var_14] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+9Ch]  +
test eax eax +
jl loc_1021337  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C6A8  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1021337  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+2DCh]  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset loc_100C528  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_102135C  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+0E4h]  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
call sub_1026BB3  +
test eax eax +
jnz loc_1021386  +
mov ecx esi +
call sub_101EA55  +
test eax eax +
jnz loc_1021386  +
cmp word ptr [ebp+var_10] di +
jnz loc_1021386  +
cmp word ptr [ebp+var_14] di +
jnz loc_1021386  +
xor esi esi +
jmp loc_1021389  +
xor esi esi +
inc esi  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_1021399  +
mov [ebp+var_4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_10213A9  +
mov [ebp+var_8] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax edi +
jz loc_10213B9  +
mov [ebp+var_C] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:IsZoomed  +
or eax [esi+30h] +
jnz loc_1021464  +
push dword ptr [esi+4]  +
call ds:IsIconic  +
test eax eax +
jnz loc_1021464  +
and [ebp+var_4] eax +
mov eax [esi+38h] +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
xor edi edi +
call dword ptr [ecx+0A0h]  +
test eax eax +
jl loc_102141F  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
test eax eax +
jl loc_102141F  +
cmp [ebp+var_8] 1 +
jz loc_102141F  +
inc edi  +
mov esi ds:EnableMenuItem +
push 1  +
push 0F120h  +
push [ebp+hMenu]  +
call esi  +
xor eax eax +
test edi edi +
setz al  +
mov edi eax +
push edi  +
push 0F010h  +
push [ebp+hMenu]  +
call esi  +
push edi  +
push 0F000h  +
push [ebp+hMenu]  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
test eax eax +
jz loc_102148E  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102148E  +
mov esi ds:EnableMenuItem +
push 0  +
push 0F120h  +
push [ebp+hMenu]  +
call esi  +
push 1  +
push 0F010h  +
push [ebp+hMenu]  +
call esi  +
push 1  +
push 0F000h  +
push [ebp+hMenu]  +
call esi  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 80h +
push ebx  +
push edi  +
mov ebx ecx +
mov eax [ebx+38h] +
lea edx [ebp-4] +
xor edi edi +
push edx  +
mov [ebp-8] edi +
mov [ebp-0Ch] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0ACh]  +
test eax eax +
jl loc_10215C5  +
xor eax eax +
cmp [ebp-4] di +
lea edx [ebp-8] +
setnz al  +
push edx  +
push offset loc_100C528  +
mov [ebp-10h] eax +
mov eax [ebx+38h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1021525  +
mov eax [ebp-8] +
mov ecx [eax] +
lea edx [ebp-0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0DCh]  +
cmp eax edi +
jge loc_1021525  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1021525  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1021525  +
push eax  +
push offset dword_1002C2C  +
push 59h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax [ebx+284h] +
push esi  +
lea esi [eax+28h] +
cmp esi edi +
jz loc_10215C4  +
push 0Bh  +
pop ecx  +
lea edi [ebp-3Ch] +
movs   +
xor esi esi +
inc esi  +
cmp [ebp-0Ch] esi +
ja loc_102159A  +
cmp dword ptr [eax+0C204h] 0 +
jnz loc_102159A  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_101EAE1  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_1021573  +
mov eax [ebx+4] +
lea ecx [ebp-3Ch] +
push ecx  +
push eax  +
call ds:SetWindowPlacement  +
test eax eax +
jz loc_10215C4  +
cmp [ebx+6A0h] esi +
jnz loc_102159D  +
lea eax [ebp-80h] +
push eax  +
call ds:GetStartupInfoA  +
test byte ptr [ebp-54h] 1 +
jz loc_102159D  +
cmp [ebp-50h] si +
jz loc_102159D  +
movzx eax word ptr [ebp-50h] +
mov [ebp-34h] eax +
jmp loc_102159D  +
mov [ebp-34h] esi +
mov edi [ebx+284h] +
push 0Bh  +
pop ecx  +
add edi 28h +
lea esi [ebp-3Ch] +
movs   +
push dword ptr [ebp-34h]  +
push dword ptr [ebx+4]  +
call ds:ShowWindow  +
mov dword ptr [ebx+288h] 1 +
pop esi  +
mov eax [ebp-8] +
pop edi  +
pop ebx  +
test eax eax +
jz locret_10215D8  +
and dword ptr [ebp-8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
push edi  +
lea edx [ebp-4] +
mov ebx ecx +
mov eax [ebx+38h] +
push edx  +
xor edi edi +
push offset loc_100C528  +
mov [ebp-4] edi +
mov [ebp-8] edi +
mov [ebp-0Ch] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
cmp eax edi +
jge loc_1021644  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102187A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102187A  +
push eax  +
push offset aQiForIid_ims_1  +
push offset dword_1002C2C  +
push 67h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_102187A  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push eax  +
call dword ptr [ecx+0DCh]  +
cmp eax edi +
jge loc_1021683  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102187A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102187A  +
push eax  +
push offset aGet_remotemoni  +
push offset dword_1002C2C  +
push 68h  +
jmp loc_1021634  +
***
push esi  +
xor esi esi +
inc esi  +
cmp [ebp-8] esi +
jbe loc_10216D9  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0E4h]  +
cmp eax edi +
jge loc_10216D9  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1021879  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1021879  +
push eax  +
push offset aGet_remotemo_0  +
push offset dword_1002C2C  +
push 69h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1021879  +
mov eax [ebx+284h] +
mov [eax+0C200h] esi +
push dword ptr [ebx+4]  +
call ds:LockWindowUpdate  +
mov eax [ebx+284h] +
add eax 28h +
mov [ebx+30h] esi +
mov [ebp-18h] eax +
jz loc_1021740  +
cmp [ebx+288h] edi +
jz loc_1021740  +
push dword ptr [ebx+4]  +
mov dword ptr [ebp-54h] 2Ch +
call ds:IsIconic  +
test eax eax +
jnz loc_1021740  +
mov eax [ebx+4] +
lea ecx [ebp-54h] +
push ecx  +
push eax  +
call ds:GetWindowPlacement  +
test eax eax +
jz loc_1021740  +
mov edi [ebx+284h] +
push 0Bh  +
add edi 28h +
pop ecx  +
lea esi [ebp-54h] +
movs   +
xor edi edi +
mov eax [ebx+4] +
push 0FFFFFFF0h  +
push eax  +
call ds:GetWindowLongW  +
mov esi ds:SetWindowLongW +
and eax 0FF3AFFFFh +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [ebx+4]  +
call esi  +
push edi  +
push 0FFFFFFF4h  +
push dword ptr [ebx+4]  +
call esi  +
xor esi esi +
inc esi  +
mov [ebx+6CCh] edi +
cmp [ebp-8] esi +
jz loc_10217AB  +
cmp [ebp-0Ch] di +
jz loc_10217AB  +
push 4Ch  +
call sub_101DF3B  +
push 4Dh  +
mov [ebp-28h] eax +
call sub_101DF3B  +
push 4Eh  +
mov [ebp-24h] eax +
call sub_101DF3B  +
add eax [ebp-28h] +
push 4Fh  +
mov [ebp-20h] eax +
call sub_101DF3B  +
add eax [ebp-24h] +
mov [ebp-1Ch] eax +
jmp loc_102181A  +
mov eax [ebx+38h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebx+38h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
call sub_1026BB3  +
test eax eax +
jz loc_102180A  +
push 4Ch  +
call sub_101DF3B  +
push 4Dh  +
mov [ebp-28h] eax +
call sub_101DF3B  +
push 4Eh  +
mov [ebp-24h] eax +
call sub_101DF3B  +
add eax [ebp-28h] +
push 4Fh  +
mov [ebp-20h] eax +
call sub_101DF3B  +
add eax [ebp-24h] +
mov [ebx+6CCh] esi +
mov [ebp-1Ch] eax +
jmp loc_102181A  +
lea eax [ebp-28h] +
push eax  +
mov eax [ebp-18h] +
add eax 1Ch +
push eax  +
call sub_1026D4E  +
push 9  +
push dword ptr [ebx+4]  +
call ds:ShowWindow  +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
mov esi ds:SetWindowPos +
push 30h  +
push eax  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push eax  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-28h]  +
push edi  +
push dword ptr [ebx+4]  +
call esi  +
push 215h  +
push edi  +
push edi  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-28h]  +
push edi  +
push dword ptr [ebx+4]  +
call esi  +
push edi  +
call ds:LockWindowUpdate  +
lea eax [ebx+6B0h] +
push eax  +
lea eax [ebx+6ACh] +
push eax  +
push 1  +
push dword ptr [ebx+4]  +
call sub_1050B9C  +
pop esi  +
mov eax [ebp-4] +
cmp eax edi +
jz loc_102188A  +
mov [ebp-4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
and dword ptr [esi+6B4h] 0 +
call ds:IsZoomed  +
test eax eax +
jz loc_1021904  +
mov ecx esi +
call sub_10212C7  +
test eax eax +
jz loc_1021904  +
mov eax [esi+284h] +
cmp dword ptr [eax+135Ch] 0 +
jnz loc_1021904  +
mov esi [esi+38h] +
mov eax [esi] +
push 0FFFFFFFFh  +
push esi  +
call dword ptr [eax+0A8h]  +
test eax eax +
jge loc_1021904  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1021904  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1021904  +
push eax  +
push offset aPut_fullscre_0  +
push offset dword_1002C2C  +
push 6Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push [ebp+arg_0]  +
inc dword ptr [esi+278h]  +
call sub_10207E2  +
push eax  +
mov ecx esi +
call sub_1020819  +
mov ecx esi +
call sub_101F9E7  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov ebx ecx +
mov eax [ebx+284h] +
xor esi esi +
push edi  +
cmp [eax+135Ch] esi +
jnz loc_1021A41  +
cmp [ebx+30h] esi +
jz loc_1021A41  +
mov eax [ebx+38h] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0A8h]  +
cmp eax esi +
jl loc_1021A1A  +
mov ecx ebx +
call sub_10212C7  +
test eax eax +
jz loc_10219D7  +
mov ebx [ebx+38h] +
mov eax [ebx] +
push 0FFFFFFFFh  +
push ebx  +
call dword ptr [eax+0A8h]  +
cmp eax esi +
jge loc_1021A41  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1021A41  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1021A41  +
push eax  +
push offset aPut_fullscreen  +
push offset dword_1002C2C  +
push 79h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1021A41  +
mov esi [ebx+284h] +
add esi 28h +
jz loc_1021A41  +
push 0Bh  +
pop ecx  +
lea edi [ebp+wndpl] +
lea eax [ebp+wndpl.rcNormalPosition] +
movs   +
push eax  +
mov ecx ebx +
call sub_101EAE1  +
mov eax [ebx+4] +
lea ecx [ebp+wndpl] +
push ecx  +
push eax  +
call ds:SetWindowPlacement  +
test eax eax +
jz loc_1021A41  +
mov edi [ebx+284h] +
push 0Bh  +
add edi 28h +
pop ecx  +
lea esi [ebp+wndpl] +
movs   +
jmp loc_1021A41  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1021A41  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1021A41  +
push eax  +
push offset dword_1002C2C  +
push 7Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_10034C8 +
and dword ptr [eax+4] 0 +
and dword ptr [eax+8] 0 +
mov [eax+0Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
and dword ptr [eax] 0 +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
pop ebp  +
retn 8  +
***
mov eax 8000FFFFh +
retn 4  +
***
xor eax eax +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
push 0  +
mov ecx esi +
mov dword ptr [edi] offset off_10034C8 +
call sub_101C97A  +
mov eax [esi] +
test eax eax +
jz loc_1021ADA  +
and dword ptr [esi] 0 +
push eax  +
call sub_1018A83  +
mov dword ptr [edi] offset off_1002D40 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi+10h] eax +
call sub_101C97A  +
mov eax [ebp+14h] +
mov [esi+8] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021AB3  +
test byte ptr [ebp+8] 1 +
jz loc_1021B2D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ??0DNameNode@@IAE@XZ  +
mov eax [ebp+arg_0] +
xor edi edi +
lea ecx [esi+284h] +
xor ebx ebx +
mov dword ptr [esi] offset off_1003550 +
mov [ecx] edi +
inc ebx  +
push edi  +
mov [esi+6C0h] eax +
mov [esi+38h] edi +
mov [esi+44h] edi +
mov [esi+48h] edi +
mov [esi+4Ch] edi +
mov [esi+50h] edi +
mov [esi+74h] edi +
mov [esi+6C8h] edi +
mov [esi+30h] edi +
mov [esi+34h] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+24h] edi +
mov [esi+64h] ebx +
mov [esi+278h] edi +
mov [esi+27Ch] edi +
mov [esi+280h] edi +
call sub_101C97A  +
push 208h  +
lea eax [esi+28Ch] +
push edi  +
push eax  +
mov [esi+28h] edi +
call memset  +
add esp 0Ch +
push 64h  +
pop eax  +
mov [esi+494h] edi +
mov [esi+6A8h] edi +
mov [esi+6ACh] edi +
mov [esi+6B0h] edi +
mov [esi+6B4h] edi +
mov [esi+54h] eax +
mov [esi+58h] eax +
mov dword ptr [esi+5Ch] 320h +
mov dword ptr [esi+60h] 258h +
mov [esi+288h] edi +
mov [esi+6A0h] edi +
mov [esi+6C4h] edi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1021C36  +
test byte ptr [eax+1Ch] 2 +
jz loc_1021C36  +
push edi  +
push dword ptr [esi+6B8h]  +
push offset dword_1002C2C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov [esi+6B8h] edi +
mov [esi+6A4h] edi +
mov [esi+6BCh] edi +
mov [esi+6CCh] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
pop edi  +
mov [esi+6D0h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+6ACh] +
mov eax [edi] +
xor ebx ebx +
mov dword ptr [esi] offset off_1003550 +
cmp eax ebx +
jz loc_1021C8B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
mov ecx [esi+280h] +
cmp ecx ebx +
jz loc_1021C9B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
lea edi [esi+6C4h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_1021CAF  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [edi] ebx +
mov ecx [esi+24h] +
cmp ecx ebx +
jz loc_1021CCC  +
call sub_10261F2  +
mov ecx [esi+24h] +
cmp ecx ebx +
jz loc_1021CC9  +
push 1  +
call sub_101E306  +
mov [esi+24h] ebx +
mov ecx [esi+3Ch] +
cmp ecx ebx +
jz loc_1021CE8  +
call sub_101BC44  +
mov ecx [esi+3Ch] +
cmp ecx ebx +
jz loc_1021CE8  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [esi+3Ch] ebx +
lea edi [esi+284h] +
push ebx  +
mov ecx edi +
call sub_101C97A  +
mov eax [edi] +
cmp eax ebx +
jz loc_1021D04  +
push eax  +
mov [edi] ebx +
call sub_1018A83  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp loc_103B72E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+284h] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp ecx edi +
jz loc_1021D33  +
push edi  +
call sub_1033056  +
mov eax [esi+38h] +
cmp eax edi +
jz loc_1021D43  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+38h] edi +
push dword ptr [esi+44h]  +
mov ebx ds:IsWindow +
call ebx  +
mov edi ds:DestroyWindow +
test eax eax +
jz loc_1021D61  +
push dword ptr [esi+44h]  +
call edi  +
and dword ptr [esi+44h] 0 +
push dword ptr [esi+4Ch]  +
call ebx  +
test eax eax +
jz loc_1021D73  +
push dword ptr [esi+4Ch]  +
call edi  +
and dword ptr [esi+4Ch] 0 +
mov eax [esi+50h] +
xor ebx ebx +
cmp eax ebx +
jz loc_1021D86  +
push eax  +
call ds:DeleteObject  +
mov [esi+50h] ebx +
push ebx  +
mov ecx esi +
mov dword ptr [esi+6BCh] 1 +
call sub_101E5FB  +
cmp eax ebx +
jge loc_1021DC8  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1021DC8  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1021DC8  +
push eax  +
push offset aFailedRegister  +
push offset dword_1002C2C  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
call sub_101C646  +
push eax  +
lea ecx [ebp+var_4] +
call sub_101C97A  +
mov edi [ebp+var_4] +
cmp edi ebx +
jz loc_1021DE6  +
mov ecx edi +
call sub_101C381  +
jmp loc_1021DED  +
push ebx  +
call ds:PostQuitMessage  +
mov dword ptr [esi+18h] 2 +
cmp edi ebx +
jz loc_1021DFE  +
push edi  +
call sub_1018A83  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
cmp dword ptr [ecx+14h] 0 +
jz loc_1021E37  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1021E32  +
test byte ptr [eax+1Ch] 4 +
jz loc_1021E32  +
push offset dword_1002C2C  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
inc eax  +
jmp locret_1021E45  +
mov dword ptr [ecx+14h] 1 +
call sub_1021D13  +
xor eax eax +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
movzx ebx word ptr [ebp+wParam] +
mov eax ebx +
push esi  +
and eax 0FFF0h +
push edi  +
mov esi ecx +
cmp eax 0F030h +
jnz loc_1021EFD  +
call sub_10212C7  +
test eax eax +
jz loc_1021EE5  +
mov eax [esi+284h] +
xor edi edi +
cmp [eax+135Ch] edi +
jnz loc_1021EE5  +
mov esi [esi+38h] +
mov eax [esi] +
push 0FFFFFFFFh  +
push esi  +
call dword ptr [eax+0A8h]  +
cmp eax edi +
jge loc_1022034  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1022034  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1022034  +
push eax  +
push offset aPut_fullscre_0  +
push offset dword_1002C2C  +
push 48h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1022034  +
push [ebp+lParam]  +
mov esi [esi+4] +
push [ebp+wParam]  +
push [ebp+Msg]  +
push esi  +
call ds:DefWindowProcW  +
jmp loc_1022036  +
xor edi edi +
cmp eax 0F020h +
jnz loc_1021F24  +
cmp [esi+30h] edi +
jz loc_1021F89  +
lea eax [esi+6B0h] +
push eax  +
lea eax [esi+6ACh] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
call sub_1050B9C  +
jmp loc_1021F89  +
cmp eax 0F120h +
jnz loc_1021F89  +
cmp [esi+34h] edi +
jnz loc_1021F81  +
cmp [esi+30h] edi +
jz loc_1021F89  +
push dword ptr [esi+4]  +
call ds:IsIconic  +
test eax eax +
jnz loc_1021F89  +
mov eax [esi+38h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0A8h]  +
cmp eax edi +
jge loc_1021F89  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1021F8F  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1021F8F  +
push eax  +
push offset aPut_fullscre_0  +
push offset dword_1002C2C  +
push 49h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1021F89  +
call sub_1021941  +
mov [esi+34h] edi +
mov ecx lpReserved +
cmp ebx 6Dh +
jz loc_1021FFD  +
cmp ebx 70h +
jz loc_1021FB0  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [esi+4]  +
call ds:DefWindowProcW  +
jmp loc_1022034  +
cmp ecx offset lpReserved +
jz loc_1021FD0  +
test byte ptr [ecx+1Ch] 2 +
jz loc_1021FD0  +
push offset dword_1002C2C  +
push 4Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1018898  +
mov eax [esi+4] +
cmp eax edi +
jz loc_1022034  +
mov ecx [esi+28h] +
cmp ecx edi +
jz loc_1022034  +
mov edx [esi+284h] +
push edi  +
push dword ptr [edx+135Ch]  +
push offset aHelp_entry_id_  +
push offset aMshelpWindows?  +
push eax  +
call sub_102817E  +
jmp loc_1022034  +
mov eax [esi+28h] +
lea ecx [eax+650h] +
push ecx  +
push dword ptr [eax+64Ch]  +
lea ecx [ebp+var_228] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+4]  +
call sub_10285D3  +
lea ecx [ebp+var_228] +
call sub_105340F  +
lea ecx [ebp+var_228] +
call sub_1028597  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
cmp eax 1Ah +
ja loc_102216E  +
jz loc_1022159  +
cmp eax 6 +
ja loc_10220ED  +
jz loc_10220D8  +
mov ecx eax +
dec ecx  +
jz loc_10220C3  +
dec ecx  +
jz loc_10220AB  +
dec ecx  +
jz loc_1022096  +
dec ecx  +
dec ecx  +
jnz loc_1022332  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 5  +
call sub_1020FB0  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 3  +
call sub_101F019  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 2  +
push dword ptr [ebp+0Ch]  +
call sub_101EF9A  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 1  +
call sub_101E3F6  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 6  +
call sub_101F402  +
jmp loc_1022374  +
mov ecx eax +
sub ecx 7 +
jz loc_1022144  +
sub ecx 9 +
jz loc_102212F  +
sub ecx 4 +
jz loc_102211A  +
dec ecx  +
jnz loc_1022332  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 15h  +
call sub_101E831  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 14h  +
call sub_101EC92  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 10h  +
call sub_101F6A0  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 7  +
call sub_101F3AA  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 1Ah  +
call sub_101E88F  +
jmp loc_1022374  +
mov ecx 113h +
cmp eax ecx +
ja loc_1022284  +
jz loc_1022270  +
cmp eax 7Eh +
ja loc_102220F  +
jz loc_10221FA  +
cmp eax 21h +
jz loc_10221E5  +
cmp eax 24h +
jz loc_10221D0  +
cmp eax 46h +
jz loc_10221BB  +
cmp eax 53h +
jnz loc_1022332  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_101F8C3  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 46h  +
call sub_101E753  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 24h  +
call sub_101F33F  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 21h  +
call sub_101F464  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 7Eh  +
call sub_101E8BC  +
jmp loc_1022374  +
mov edx eax +
mov ecx 82h +
sub edx ecx +
jz loc_1022259  +
sub edx 8Fh +
jz loc_1022241  +
dec edx  +
jnz loc_1022332  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 112h  +
call sub_1021E4D  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 111h  +
call sub_101FE76  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1021E08  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ecx  +
mov ecx [ebp+8] +
call sub_101ECCA  +
jmp loc_1022374  +
mov ecx 219h +
cmp eax ecx +
ja loc_102231D  +
jz loc_1022309  +
mov edx eax +
mov ecx 116h +
sub edx ecx +
jz loc_10222F8  +
dec edx  +
jz loc_10222E2  +
sub edx 0FBh +
jz loc_10222CA  +
sub edx 3 +
jnz loc_1022332  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 215h  +
call sub_101F959  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 212h  +
call sub_101F90A  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push 117h  +
push dword ptr [ebp+0Ch]  +
call ds:DefWindowProcW  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ecx  +
mov ecx [ebp+8] +
call sub_10213C4  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_101F859  +
jmp loc_1022374  +
mov ecx eax +
sub ecx 231h +
jz loc_1022365  +
dec ecx  +
jz loc_1022350  +
sub ecx 0DFh +
jz loc_102233B  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push eax  +
jmp loc_10222ED  +
***
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 311h  +
call sub_101E7E1  +
jmp loc_1022374  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
push 232h  +
call sub_1021893  +
jmp loc_1022374  +
mov eax [ebp+8] +
mov dword ptr [eax+6B4h] 1 +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+284h] +
push edi  +
xor edi edi +
cmp [eax+135Ch] edi +
jnz loc_10223A9  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_10223C2  +
push esi  +
mov ecx eax +
call sub_1021A4B  +
jmp loc_10223C4  +
push 48Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_10223C2  +
push esi  +
mov ecx eax +
call sub_10253D2  +
jmp loc_10223C4  +
xor eax eax +
mov [esi+6C4h] eax +
cmp eax edi +
jnz loc_10223FC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10223F7  +
test byte ptr [eax+1Ch] 4 +
jz loc_10223F7  +
push offset aCcontwndext  +
push offset dword_1002C2C  +
push 78h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021C68  +
test byte ptr [ebp+8] 1 +
jz loc_1022420  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+24h] 0 +
push edi  +
jz loc_102246D  +
mov eax lpReserved +
mov edi 80004005h +
cmp eax offset lpReserved +
jz loc_10225CB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10225CB  +
push edi  +
push offset a_pwndviewAlrea  +
push offset dword_1002C2C  +
push 22h  +
jmp loc_1022553  +
push 34h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1022483  +
push esi  +
mov ecx eax +
call sub_1025EF5  +
jmp loc_1022485  +
xor eax eax +
mov [esi+24h] eax +
test eax eax +
jnz loc_10224BF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10224B5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10224B5  +
push offset aCaxhostwnd  +
push offset dword_1002C2C  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 8007000Eh +
jmp loc_10225CB  +
mov ecx eax +
call sub_1026360  +
test eax eax +
jnz loc_10224D4  +
mov edi 80004005h +
jmp loc_10225CB  +
mov ecx esi +
call sub_102237D  +
mov edi eax +
test edi edi +
jge loc_102250A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10225CB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10225CB  +
push edi  +
push offset aCreateextensio  +
push offset dword_1002C2C  +
push 24h  +
jmp loc_1022553  +
push dword ptr [esi+28h]  +
mov eax [esi+284h] +
mov edx [esi+4] +
mov ecx [esi+6C4h] +
mov edi [ecx] +
push eax  +
push dword ptr [esi+2Ch]  +
push edx  +
call dword ptr [edi+4]  +
mov edi eax +
test edi edi +
jge loc_1022560  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10225CB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10225CB  +
push edi  +
push offset aOnprecreatecon  +
push offset dword_1002C2C  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10225CB  +
mov ecx [esi+24h] +
push ebx  +
lea ebx [esi+38h] +
push ebx  +
call sub_1025FEE  +
mov [ebp+var_4] eax +
cmp eax 1 +
jnz loc_1022597  +
push dword ptr [esi+2Ch]  +
mov eax [esi+4] +
mov ecx [esi+24h] +
push eax  +
call sub_10263C4  +
test eax eax +
jz loc_10225C5  +
push dword ptr [ebx]  +
mov ecx [esi+284h] +
call sub_1033056  +
jmp loc_10225CA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10225BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10225BB  +
push offset dword_1002C2C  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101E414  +
mov edi 80004005h +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_4] edi +
cmp [ebp+hInstance] edi +
jz loc_1022899  +
cmp [ebp+arg_4] edi +
jz loc_1022899  +
mov ebx [ebp+arg_8] +
cmp ebx edi +
jz loc_1022899  +
call ds:GetDesktopWindow  +
lea ecx [ebp+rcSrc] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
test eax eax +
jz loc_102262A  +
lea eax [ebp+rcSrc] +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:CopyRect  +
jmp loc_102263C  +
push 1  +
push 1  +
push 0  +
push 0  +
lea eax [ebp+rc] +
push eax  +
call ds:SetRect  +
mov eax [ebp+hInstance] +
push 1  +
mov ecx esi +
mov [esi+28h] ebx +
mov [esi+2Ch] eax +
call sub_101E5FB  +
mov ebx offset lpReserved +
test eax eax +
jge loc_102267F  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_102267F  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102267F  +
push eax  +
push offset aFailedRegist_0  +
push offset dword_1002C2C  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
lea eax [ebp+var_C] +
push eax  +
mov [ebp+var_C.dwSize] 8 +
mov [ebp+var_C.dwICC] 200h +
call ds:InitCommonControlsEx  +
mov edi eax +
test edi edi +
jz loc_1022899  +
push [ebp+arg_4]  +
lea ecx [esi+284h] +
call sub_101C97A  +
mov edi 104h +
push edi  +
lea eax [esi+28Ch] +
push eax  +
push 3ECh  +
push [ebp+hInstance]  +
call sub_105DD36  +
test eax eax +
jnz loc_10226EE  +
mov eax lpReserved +
cmp eax ebx +
jz loc_10226EE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10226EE  +
push offset dword_1002C2C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push edi  +
lea eax [esi+498h] +
push eax  +
call sub_1028518  +
mov eax [esi+28h] +
push dword ptr [eax+89Ch]  +
lea ecx [ebp+rc] +
push ecx  +
push 6CF0100h  +
push eax  +
push offset aTscshellcontai  +
push 0  +
push [ebp+hInstance]  +
mov ecx esi +
call sub_103B797  +
mov edi eax +
neg edi  +
sbb edi edi +
neg edi  +
jnz loc_102274C  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1022899  +
test byte ptr [eax+1Ch] 4 +
jz loc_1022899  +
push offset dword_1002C2C  +
push 0Dh  +
jmp loc_102288E  +
mov ecx esi +
call sub_102242C  +
test eax eax +
jl loc_102275E  +
mov eax [esi+38h] +
test eax eax +
jnz loc_1022783  +
xor edi edi +
mov eax lpReserved +
cmp eax ebx +
jz loc_1022899  +
test byte ptr [eax+1Ch] 4 +
jz loc_1022899  +
push offset dword_1002C2C  +
push 0Eh  +
jmp loc_102288E  +
mov ecx [esi+28h] +
push eax  +
call sub_1027728  +
mov edi eax +
test edi edi +
jnz loc_10227B5  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1022899  +
test byte ptr [eax+1Ch] 4 +
jz loc_1022899  +
push offset dword_1002C2C  +
push 0Fh  +
jmp loc_102288E  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+9Ch]  +
test eax eax +
jl loc_10227D0  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_10227F5  +
xor edi edi +
mov eax lpReserved +
cmp eax ebx +
jz loc_1022899  +
test byte ptr [eax+1Ch] 4 +
jz loc_1022899  +
push offset dword_1002C2C  +
push 10h  +
jmp loc_102288E  +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+44h]  +
mov edi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
test edi edi +
setnl al  +
mov edi eax +
test edi edi +
jnz loc_102282D  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1022899  +
test byte ptr [eax+1Ch] 4 +
jz loc_1022899  +
push offset dword_1002C2C  +
push 11h  +
jmp loc_102288E  +
mov ecx esi +
call sub_101ED99  +
mov eax lpReserved +
cmp eax ebx +
jz loc_102285D  +
test byte ptr [eax+1Ch] 2 +
jz loc_102285D  +
push 1  +
push dword ptr [esi+6B8h]  +
push offset dword_1002C2C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov ecx [esi+6C4h] +
mov dword ptr [esi+6B8h] 1 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov edi eax +
test edi edi +
jnz loc_10228E2  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1022899  +
test byte ptr [eax+1Ch] 4 +
jz loc_1022899  +
push offset dword_1002C2C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp dword ptr [esi+6D0h] 0 +
jz loc_10228C3  +
mov eax [esi+284h] +
test eax eax +
jz loc_10228B4  +
mov eax [eax+135Ch] +
jmp loc_10228B6  +
xor eax eax +
push eax  +
push 33F5h  +
push 0  +
call sub_105B0B4  +
mov eax [esi+4] +
test eax eax +
jz loc_10228D1  +
push eax  +
call ds:DestroyWindow  +
mov eax [esi+38h] +
test eax eax +
jz loc_10228E2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+38h] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
push 1Fh  +
pop eax  +
mov [edi] ax +
lea eax [edi+8] +
push eax  +
push [ebp+arg_0]  +
call ds:SHStrDupW  +
mov ecx eax +
test ecx ecx +
jge loc_1022918  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
mov eax ecx +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
test edx edx +
jz loc_1022981  +
cmp word ptr [edx] 0 +
jnz loc_1022966  +
push 0Eh  +
jmp loc_1022983  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102296C  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1022984  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1022995  +
cmp word ptr [edx] 0 +
jnz loc_102299A  +
mov edx offset aNull +
jmp loc_102299A  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_18] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp edx ebx +
jz loc_10229FF  +
cmp [edx] bx +
jnz loc_10229E3  +
mov [ebp+arg_18] 0Eh +
jmp loc_1022A06  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10229E8  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_1022A06  +
mov [ebp+arg_18] 0Ah +
cmp edx ebx +
jz loc_1022A1D  +
cmp [edx] bx +
jnz loc_1022A18  +
mov [ebp+var_4] offset aNull +
jmp loc_1022A24  +
mov [ebp+var_4] edx +
jmp loc_1022A24  +
mov [ebp+var_4] offset aNull_0 +
mov edi [ebp+arg_14] +
cmp edi ebx +
jz loc_1022A4D  +
cmp [edi] bx +
jnz loc_1022A34  +
push 0Eh  +
jmp loc_1022A4F  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1022A39  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_1022A50  +
push 0Ah  +
pop ebx  +
test edi edi +
jz loc_1022A65  +
cmp word ptr [edi] 0 +
jnz loc_1022A61  +
mov edx offset aNull +
jmp loc_1022A6A  +
mov edx edi +
jmp loc_1022A6A  +
mov edx offset aNull_0 +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_1022A94  +
cmp word ptr [edi] 0 +
jnz loc_1022A7B  +
push 0Eh  +
jmp loc_1022A96  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1022A80  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1022A97  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_1022AAC  +
cmp word ptr [edi] 0 +
jnz loc_1022AA8  +
mov eax offset aNull +
jmp loc_1022AB1  +
mov eax edi +
jmp loc_1022AB1  +
mov eax offset aNull_0 +
push 0  +
push [ebp+arg_18]  +
push [ebp+var_4]  +
push ebx  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0Ch] +
pop ebp  +
jmp loc_101FF90  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
push dword ptr [eax+48h]  +
mov edi ds:IsWindow +
call edi  +
mov ebx ds:PostMessageW +
test eax eax +
jz loc_1022B25  +
mov eax [esi+0Ch] +
push 0BEEBBAABh  +
push 9Ch  +
push 10h  +
push dword ptr [eax+48h]  +
call ebx  +
mov ecx [esi+0Ch] +
call sub_101F685  +
mov eax [esi+0Ch] +
push dword ptr [eax+44h]  +
call edi  +
test eax eax +
jz loc_1022B57  +
mov eax [esi+0Ch] +
xor edi edi +
push edi  +
push edi  +
push 420h  +
push dword ptr [eax+44h]  +
call ebx  +
mov eax [esi+0Ch] +
push edi  +
push dword ptr [eax+44h]  +
call ds:ShowWindowAsync  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebx  +
mov ebx ds:IsWindow +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
mov eax [eax+48h] +
push edi  +
mov edi ds:PostMessageW +
test eax eax +
jz loc_1022B92  +
push eax  +
call ebx  +
test eax eax +
jz loc_1022B92  +
mov eax [esi+0Ch] +
push 0  +
push 0  +
push 10h  +
push dword ptr [eax+48h]  +
call edi  +
mov ecx [esi+0Ch] +
call sub_101E9D6  +
test eax eax +
jz loc_1022BBB  +
mov eax [esi+0Ch] +
push dword ptr [eax+44h]  +
call ebx  +
test eax eax +
jz loc_1022BBB  +
mov eax [esi+0Ch] +
push 0  +
push 0  +
push 421h  +
push dword ptr [eax+44h]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ecx+0Ch] +
push dword ptr [ebp+0Ch]  +
call sub_101F4C2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
cmp dword ptr [eax+30h] 0 +
jz loc_1022C38  +
push dword ptr [eax+4]  +
call ds:IsIconic  +
test eax eax +
jnz loc_1022C2E  +
mov ecx [esi+0Ch] +
call sub_1021941  +
jmp loc_1022C38  +
mov eax [esi+0Ch] +
mov dword ptr [eax+34h] 1 +
xor eax eax +
pop esi  +
retn 0Ch  +
***
mov eax [ecx+0Ch] +
mov ecx [eax+24h] +
jmp sub_101A40B  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
push dword ptr [eax+44h]  +
call ds:IsWindow  +
mov esi [esi+0Ch] +
cmp dword ptr [esi+288h] 0 +
jz loc_1022C86  +
test eax eax +
jz loc_1022C81  +
push dword ptr [esi+44h]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_1022C86  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov ecx [eax+280h] +
test ecx ecx +
jz loc_1022CA9  +
push [ebp+lpString]  +
call sub_1039933  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1053829  +
test [ebp+arg_0] 1 +
jz loc_1022CCE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ecx+14h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
push edi  +
mov edi ds:EnableWindow +
test eax eax +
jz loc_1022D1A  +
push 1  +
push eax  +
call edi  +
push 1  +
push dword ptr [esi+28h]  +
call edi  +
push dword ptr [esi+24h]  +
call ds:SetFocus  +
pop edi  +
pop esi  +
test eax eax +
jnz locret_1022D62  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz locret_1022D62  +
test byte ptr [ecx+1Ch] 4 +
jz locret_1022D62  +
push eax  +
push offset aSetfocusFailed  +
push offset dword_100373C  +
push 31h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov eax [edx+1Ch] +
sub eax [edx+14h] +
push ebx  +
mov ebx [edx+20h] +
sub ebx [edx+18h] +
push esi  +
mov esi [ecx+8] +
sub esi [ecx] +
push edi  +
mov edi [ecx+0Ch] +
sub edi [ecx+4] +
cmp esi eax +
jle loc_1022D9E  +
and dword ptr [ecx] 0 +
jmp loc_1022DA7  +
sub eax esi +
cdq   +
sub eax edx +
sar eax 1 +
mov [ecx] eax +
mov eax [ecx] +
add eax esi +
cmp edi ebx +
mov [ecx+8] eax +
jle loc_1022DB8  +
and dword ptr [ecx+4] 0 +
jmp loc_1022DC4  +
mov eax ebx +
sub eax edi +
cdq   +
sub eax edx +
sar eax 1 +
mov [ecx+4] eax +
mov eax [ecx+4] +
add eax edi +
pop edi  +
pop esi  +
mov [ecx+0Ch] eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 2  +
push [ebp+hWnd]  +
call sub_101E041  +
mov ecx [ebp+arg_4] +
push ecx  +
push eax  +
mov dword ptr [ecx] 68h +
call sub_101E0B3  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
xor ecx ecx +
mov [ebp+var_4] ecx +
cmp eax ecx +
jz loc_1022E65  +
cmp [esi+0Ch] ecx +
jz loc_1022E65  +
mov eax [eax+0Ch] +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
mov edi ds:SelectPalette +
cmp eax ecx +
jz loc_1022E3B  +
push ecx  +
push eax  +
push ebx  +
call edi  +
push ebx  +
mov [ebp+var_4] eax +
call ds:RealizePalette  +
mov ecx [esi+8] +
test ecx ecx +
jz loc_1022E48  +
push ebx  +
call sub_103BB27  +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_1022E55  +
push ebx  +
call sub_1053848  +
cmp [ebp+var_4] 0 +
jz loc_1022E63  +
push 1  +
push [ebp+var_4]  +
push ebx  +
call edi  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0Ch] +
test ecx ecx +
jz loc_1022E85  +
push [ebp+arg_4]  +
call sub_1053867  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ecx+488h] 2 +
jz loc_1022EA5  +
mov eax [ebp+arg_8] +
and dword ptr [eax+18h] 0FFFFFFBFh +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+1Ch] +
xor ecx ecx +
cmp [eax+288h] ecx +
setnz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+rcUpdate] +
push eax  +
push [ebp+hWnd]  +
mov esi ecx +
call ds:GetClientRect  +
mov eax [esi+8] +
mov eax [eax+14h] +
push 45h  +
mov [ebp+rcUpdate.bottom] eax +
push 0  +
lea eax [ebp+rcUpdate] +
push eax  +
push [ebp+hWnd]  +
call ds:RedrawWindow  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+rcUpdate] +
push eax  +
push [ebp+hWnd]  +
mov esi ecx +
call ds:GetClientRect  +
mov eax [esi+0Ch] +
mov ecx [eax+0Ch] +
sub ecx [eax+1Ch] +
push 45h  +
add ecx [eax+24h] +
push 0  +
lea eax [ebp+rcUpdate] +
push eax  +
push [ebp+hWnd]  +
mov [ebp+rcUpdate.bottom] ecx +
call ds:RedrawWindow  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov edx [ecx+484h] +
xor eax eax +
push esi  +
xor esi esi +
inc eax  +
mov [ebp+var_3C] esi +
mov [ebp+var_38] 0Ah +
mov [ebp+var_34] 14h +
mov [ebp+var_30] 4BDh +
cmp edx eax +
jz loc_1022FC9  +
cmp edx esi +
jz loc_1022FC9  +
push 2  +
pop eax  +
cmp edx eax +
jz loc_1022FB9  +
cmp edx 3 +
jz loc_1022FB9  +
cmp edx 4 +
jnz loc_1022FEE  +
mov [ebp+var_24] 340Ah +
mov [ebp+var_10] 340Bh +
mov [ebp+var_2C] eax +
mov eax 4BCh +
lea edx [eax-2] +
mov [ebp+var_18] esi +
mov [ebp+var_1C] eax +
mov [ebp+var_20] edx +
mov [ebp+var_14] esi +
mov [ebp+var_C] edx +
mov [ebp+var_8] eax +
mov [ebp+var_4] esi +
jmp loc_1022FEB  +
mov [ebp+var_24] 36B4h +
mov [ebp+var_10] 33FCh +
jmp loc_1022F97  +
mov [ebp+var_2C] eax +
mov [ebp+var_38] 11h +
mov [ebp+var_24] 36B3h +
mov [ebp+var_20] 4BAh +
mov [ebp+var_1C] 4BBh +
mov [ebp+var_18] eax +
mov [ebp+var_28] esi +
mov ecx [ecx+8] +
lea eax [ebp+var_3C] +
push eax  +
call sub_103C0DB  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
mov ecx [ecx+14h] +
mov eax [esi+0Ch] +
sub ecx [eax+1Ch] +
xor ebx ebx +
add ecx [eax+24h] +
mov [esi+10h] ecx +
cmp [ebp+arg_0] ebx +
jz loc_1023069  +
push edi  +
mov [ebp+Rect.left] ebx +
xor eax eax +
lea edi [ebp+Rect.top] +
stos   +
stos   +
push 1  +
push dword ptr [esi+44h]  +
stos   +
call ds:EnableWindow  +
push 5  +
push dword ptr [esi+44h]  +
call ds:ShowWindow  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+44h]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
pop edi  +
add [esi+10h] eax +
or dword ptr [esi+488h] 40h +
jmp loc_1023084  +
push ebx  +
push dword ptr [esi+44h]  +
call ds:EnableWindow  +
push ebx  +
push dword ptr [esi+44h]  +
call ds:ShowWindow  +
and dword ptr [esi+488h] 0FFFFFFBFh +
mov ecx [esi+1Ch] +
push ebx  +
push ebx  +
push ebx  +
call sub_1020FB0  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
or dword ptr [esi+488h] 20h +
test eax eax +
jz loc_10230BD  +
push eax  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10230D4  +
push dword ptr [esi+30h]  +
jmp loc_10230D7  +
mov eax [esi+28h] +
test eax eax +
jz loc_10230D4  +
push eax  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10230D4  +
push dword ptr [esi+28h]  +
jmp loc_10230D7  +
push dword ptr [esi+2Ch]  +
call ds:SetFocus  +
xor eax eax +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+24h]  +
and dword ptr [esi+488h] 0FFFFFFDFh +
call ds:IsWindowVisible  +
test eax eax +
jz loc_102310F  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+64h]  +
push eax  +
call ds:SetFocus  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
mov edi ecx +
push 1004h  +
push dword ptr [edi+48h]  +
call esi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] ebx +
cmp [ebp+lpString2] ebx +
jz loc_10231DD  +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
jge loc_10231DD  +
push 34h  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp+var_4] +
add esp 0Ch +
mov [ebp+var_38] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 104Bh  +
push dword ptr [edi+48h]  +
mov [ebp+lParam] 4 +
call esi  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_10231D5  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10231BB  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10231BB  +
mov eax [ebp+lpString1] +
cdq   +
push edx  +
push eax  +
push offset dword_100373C  +
push 4Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1022924  +
push [ebp+lpString1]  +
call sub_105D688  +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 104Ch  +
push dword ptr [edi+48h]  +
mov [ebp+lpString1] ebx +
call esi  +
inc [ebp+var_4]  +
jmp loc_1023148  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push 2000h  +
xor esi esi +
push esi  +
mov [edx] eax +
push esi  +
movzx eax ax +
push esi  +
mov [edi] esi +
push eax  +
mov [ebx] esi +
push dword ptr [ecx+4]  +
call ds:LoadImageW  +
mov [ebp+arg_0] eax +
cmp eax esi +
jz loc_1023249  +
lea ecx [ebp+var_18] +
push ecx  +
push 18h  +
push eax  +
call ds:GetObjectW  +
mov eax [ebp+var_10] +
push [ebp+arg_0]  +
mov [ebx] eax +
mov eax [ebp+var_14] +
cdq   +
sub eax edx +
sar eax 1 +
mov [edi] eax +
call ds:DeleteObject  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov edx ecx +
push esi  +
mov esi [edx+30h] +
test esi esi +
jz loc_102329E  +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
mov ecx [edx+488h] +
inc eax  +
and ecx eax +
mov [ebp+var_1C] eax +
lea eax [ebp+lParam] +
push eax  +
push 338Dh  +
push 440h  +
push esi  +
mov [ebp+lParam] 20h +
mov [ebp+var_14] ecx +
call ds:SendMessageW  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+30h] edi +
jz loc_102330A  +
lea eax [ebp+cy] +
push eax  +
push dword ptr [esi+28h]  +
call ds:GetClientRect  +
mov eax [ebp-8] +
movzx ecx word ptr [ebp-4] +
imul eax eax +
cdq   +
sub eax edx +
sar eax 1 +
movzx eax ax +
shl ecx 10h +
or eax ecx +
push eax  +
push edi  +
push 41Fh  +
push dword ptr [esi+30h]  +
call ds:SendMessageW  +
mov eax [ebp-8] +
imul eax eax +
push 6  +
push dword ptr [ebp-4]  +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push edi  +
push edi  +
push edi  +
push dword ptr [esi+30h]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
mov esi ecx +
jnz loc_102332B  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+8]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1023324  +
push 8007000Eh  +
call loc_1017D72  +
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
xor edi edi +
cmp [eax+20h] edi +
jz loc_10233AE  +
push eax  +
call sub_1026EBD  +
test eax eax +
jz loc_10233AE  +
mov ecx [esi+0Ch] +
call sub_1020918  +
mov edi eax +
test edi edi +
jnz loc_1023411  +
mov ecx [esi+0Ch] +
call sub_101E9D6  +
mov edi eax +
test edi edi +
jnz loc_1023411  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023411  +
test byte ptr [eax+1Ch] 4 +
jz loc_1023411  +
push offset dword_100373C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1023411  +
mov eax lpReserved +
push ebx  +
mov ebx offset lpReserved +
cmp eax ebx +
jz loc_10233D5  +
test byte ptr [eax+1Ch] 2 +
jz loc_10233D5  +
push offset dword_100373C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+4] +
mov eax [eax+0C454h] +
mov ecx [esi+0Ch] +
push edi  +
push edi  +
push eax  +
call sub_101F0AC  +
mov edi eax +
test edi edi +
jnz loc_1023410  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1023410  +
test byte ptr [eax+1Ch] 4 +
jz loc_1023410  +
push offset dword_100373C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push 7F02h  +
push 0  +
mov esi ecx +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
push 200h  +
lea eax [ebp-204h] +
push 0  +
push eax  +
call memset  +
mov ecx [esi+4] +
add esp 0Ch +
push 100h  +
lea eax [ebp-204h] +
push eax  +
add ecx 54h +
call sub_105B0F0  +
mov ecx [esi+0Ch] +
call sub_101E9D6  +
test eax eax +
jz loc_1023488  +
mov eax [esi+0Ch] +
mov eax [eax+44h] +
jmp loc_102348A  +
xor eax eax +
lea ecx [ebp-204h] +
push ecx  +
push dword ptr [esi+0Ch]  +
lea ecx [ebp-428h] +
push dword ptr [esi+10h]  +
push eax  +
call sub_102899A  +
lea ecx [ebp-428h] +
call sub_105340F  +
lea ecx [ebp-428h] +
call sub_102895E  +
mov ecx [ebp-4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1023522  +
mov eax [eax+38h] +
test eax eax +
jz loc_1023522  +
mov ecx [esi+4] +
push 1  +
push eax  +
call sub_102C00D  +
test eax eax +
jge loc_1023519  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1023519  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1023519  +
push eax  +
push offset aGetupdatesfrom  +
push offset dword_100373C  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx [esi+4] +
pop esi  +
jmp loc_102A651  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor ebx ebx +
mov [ebp+Rect.left] ebx +
lea edi [ebp+Rect.top] +
stos   +
stos   +
mov esi ecx +
stos   +
call sub_102736E  +
cmp eax 78h +
jnb loc_1023560  +
lea eax [esi+3Ch] +
push eax  +
lea eax [esi+38h] +
push eax  +
lea eax [esi+40h] +
push eax  +
push 2ACh  +
jmp loc_102357F  +
cmp eax 90h +
lea eax [esi+3Ch] +
push eax  +
lea eax [esi+38h] +
push eax  +
lea eax [esi+40h] +
push eax  +
jnb loc_102357A  +
push 2ADh  +
jmp loc_102357F  +
push 2AEh  +
mov ecx esi +
call sub_10231E9  +
push 0Bh  +
call sub_101DF3B  +
push 0Ch  +
mov [ebp+var_8] eax +
call sub_101DF3B  +
push ebx  +
push offset sub_1022CF8  +
push [ebp+hWndParent]  +
mov [ebp+cy] eax +
push 36C7h  +
push dword ptr [esi+4]  +
call sub_105DBBC  +
mov [esi+44h] eax +
cmp eax ebx +
jnz loc_1023608  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10235E4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10235E4  +
push esi  +
push offset dword_100373C  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp esi ebx +
jle loc_10235F4  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
cmp eax ebx +
jl loc_1023722  +
mov eax 80004005h +
jmp loc_1023722  +
push esi  +
push 0FFFFFFEBh  +
push eax  +
call ds:SetWindowLongW  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+44h]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
or dword ptr [esi+488h] 40h +
add [esi+10h] eax +
push 3390h  +
push dword ptr [esi+44h]  +
call ds:GetDlgItem  +
mov [esi+48h] eax +
cmp eax ebx +
jnz loc_1023672  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023668  +
test byte ptr [eax+1Ch] 4 +
jz loc_1023668  +
push offset dword_100373C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 8000FFFFh +
jmp loc_1023722  +
mov edi ds:SendMessageW +
push 0FFFFFFFFh  +
push ebx  +
push 1001h  +
push eax  +
call edi  +
push 0FFFFFFFFh  +
push ebx  +
push 1026h  +
push dword ptr [esi+48h]  +
call edi  +
push ebx  +
push ebx  +
push 104Ah  +
push dword ptr [esi+48h]  +
call edi  +
fild  [ebp+var_8] +
fmul  ds:dbl_1003790 +
call __ftol2  +
mov ecx [ebp+cy] +
imul ecx ecx +
movzx ecx cx +
movzx eax ax +
shl ecx 10h +
or eax ecx +
push eax  +
push ebx  +
push 1035h  +
push dword ptr [esi+48h]  +
call edi  +
push ebx  +
push dword ptr [esi+48h]  +
call ds:EnableWindow  +
push 20h  +
push ebx  +
push 21h  +
push [ebp+cy]  +
push [ebp+var_8]  +
call ds:ImageList_Create  +
mov [esi+4Ch] eax +
cmp eax ebx +
jnz loc_1023714  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102370D  +
test byte ptr [eax+1Ch] 4 +
jz loc_102370D  +
push offset dword_100373C  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 8007000Eh +
jmp loc_1023722  +
push eax  +
push ebx  +
push 1003h  +
push dword ptr [esi+48h]  +
call edi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ecx+480h] esi +
jz loc_1023776  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
cmp [ebp+arg_8] esi +
jz loc_1023753  +
or eax [ebp+arg_4] +
jmp loc_102375A  +
mov ecx [ebp+arg_4] +
not ecx  +
and eax ecx +
push eax  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:SetWindowLongW  +
push 37h  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 0  +
push 0  +
mov esi ecx +
push 1009h  +
push dword ptr [esi+48h]  +
call ds:SendMessageW  +
mov eax [esi+18h] +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+2Ch]  +
test eax eax +
jge loc_10237DD  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10237D2  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10237D2  +
push eax  +
push offset aStartremotea_0  +
push offset dword_100373C  +
push 30h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [esi] +
push 0  +
push 0  +
mov ecx esi +
call dword ptr [eax+58h]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+Rect.left] 0 +
xor eax eax +
push esi  +
push edi  +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
mov edx [ebp+Rect.right] +
mov esi ecx +
mov eax [esi+14h] +
add eax [esi+10h] +
mov ecx [ebp+Rect.left] +
add [ebp+Rect.bottom] eax +
mov eax [esi+8] +
mov eax [eax+2Ch] +
sub edx ecx +
cmp edx eax +
jge loc_102381C  +
add eax ecx +
mov [ebp+Rect.right] eax +
mov edi ds:GetWindowLongW +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call edi  +
mov esi [esi+480h] +
push 0FFFFFFECh  +
push [ebp+hWnd]  +
not esi  +
and esi eax +
call edi  +
push eax  +
push [ebp+hWnd]  +
call ds:GetMenu  +
neg eax  +
sbb eax eax +
neg eax  +
push eax  +
push esi  +
lea eax [ebp+Rect] +
push eax  +
call ds:AdjustWindowRectEx  +
mov eax [ebp+arg_4] +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
mov [eax+8] ecx +
mov ecx [ebp+Rect.bottom] +
sub ecx [ebp+Rect.top] +
cmp [ebp+arg_8] 0 +
pop edi  +
mov [eax+0Ch] ecx +
pop esi  +
jz locret_1023883  +
add ecx 12Ch +
mov [eax+0Ch] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor eax eax +
xor ebx ebx +
push 0Ah  +
mov [ebp+wndpl] ebx +
pop ecx  +
lea edi [ebp-98h] +
stos   +
mov eax [esi+1Ch] +
mov ecx [esi+18h] +
mov eax [eax+4] +
mov [ebp+hWnd] eax +
cmp [ecx+0C20Ch] ebx +
jz loc_10238EF  +
push 1  +
xor ecx ecx +
xor eax eax +
push ecx  +
push eax  +
call sub_101DF8E  +
lea ecx [ebp+var_6C] +
push ecx  +
push eax  +
mov [ebp+var_6C] 68h +
call sub_101E0B3  +
jmp loc_10238FB  +
lea ecx [ebp+var_6C] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1022DD8  +
mov eax [ebp+var_60] +
sub eax [ebp+var_68] +
push 3  +
add eax eax +
cdq   +
pop ecx  +
idiv  ecx +
mov edi eax +
mov eax [ebp+var_5C] +
sub eax [ebp+var_64] +
mov [esi+474h] edi +
add eax eax +
cdq   +
idiv  ecx +
mov ecx [esi+18h] +
mov [esi+478h] eax +
mov edx [ecx+70D0h] +
shr edx 1 +
cmp edx edi +
ja loc_102393D  +
mov ecx [ecx+70D4h] +
shr ecx 1 +
cmp ecx eax +
jbe loc_1023995  +
push 4Eh  +
call sub_101DF3B  +
push 4Ch  +
mov edi eax +
call sub_101DF3B  +
push 4Fh  +
add edi eax +
call sub_101DF3B  +
push 4Dh  +
mov ebx eax +
call sub_101DF3B  +
mov ecx [esi+474h] +
add ebx eax +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
cmp ecx eax +
jg loc_1023974  +
mov ecx eax +
mov eax ebx +
cdq   +
sub eax edx +
mov [esi+474h] ecx +
mov ecx [esi+478h] +
sar eax 1 +
cmp ecx eax +
jle loc_102398D  +
mov eax ecx +
mov [esi+478h] eax +
xor ebx ebx +
lea eax [ebp+wndpl] +
push eax  +
push [ebp+hWnd]  +
mov [ebp+wndpl] 2Ch +
call ds:GetWindowPlacement  +
push ebx  +
lea eax [ebp-80h] +
push eax  +
push [ebp+hWnd]  +
mov ecx esi +
mov [ebp-80h] ebx +
mov [ebp-7Ch] ebx +
mov [ebp-78h] ebx +
mov [ebp-74h] ebx +
call sub_10237E4  +
mov eax [ebp-74h] +
mov edi [ebp-78h] +
sub edi [ebp-80h] +
mov ebx eax +
add eax [esi+478h] +
sub ebx [ebp-7Ch] +
mov [ebp-74h] eax +
mov eax [esi+8] +
mov ecx [eax+2Ch] +
mov eax [esi+474h] +
cmp eax ecx +
jle loc_10239F6  +
sub eax ecx +
add [ebp-78h] eax +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp-80h] +
push eax  +
mov ecx esi +
call sub_1022D70  +
mov eax [ebp-80h] +
add edi eax +
mov eax [ebp-7Ch] +
add ebx eax +
lea eax [ebp+wndpl] +
push eax  +
push [ebp+hWnd]  +
mov [ebp-78h] edi +
mov [ebp-74h] ebx +
call ds:SetWindowPlacement  +
mov eax [esi+30h] +
mov edi ds:EnableWindow +
test eax eax +
jz loc_1023A37  +
push 0  +
push eax  +
call edi  +
push 0  +
push dword ptr [esi+28h]  +
call edi  +
push dword ptr [esi+2Ch]  +
call ds:SetFocus  +
xor edi edi +
inc edi  +
push edi  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
mov eax [esi+1Ch] +
mov ecx [ebp+var_4] +
mov [eax+288h] edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
test ecx ecx +
jz loc_1023A92  +
push [ebp+arg_4]  +
call sub_103BABD  +
push [ebp+hWnd]  +
mov ecx esi +
call sub_1022EC6  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp dword ptr [ecx+8] 0 +
jz loc_1023B00  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1023AFF  +
and [ebp+var_10] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
mov eax [ecx+488h] +
shl eax 1Fh +
sar eax 1Fh +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+hWnd]  +
call sub_10237E4  +
mov eax [ebp+var_8] +
sub eax [ebp+var_10] +
mov ecx [esi+18h] +
cmp ecx eax +
pop edi  +
jle loc_1023AEA  +
mov eax ecx +
mov ecx [esi+1Ch] +
mov [esi+18h] eax +
mov eax [ebp+var_4] +
sub eax [ebp+var_C] +
cmp ecx eax +
jle loc_1023AFC  +
mov eax ecx +
mov [esi+1Ch] eax +
pop esi  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+488h] +
test al 1 +
jz loc_1023B1E  +
test al 20h +
jz loc_1023B2B  +
push dword ptr [esi+24h]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_1023B5B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023B4F  +
test byte ptr [eax+1Ch] 2 +
jz loc_1023B4F  +
push offset dword_100373C  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+1Ch] +
mov ecx [eax+24h] +
pop esi  +
jmp sub_101A40B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023B7F  +
test byte ptr [eax+1Ch] 2 +
jz loc_1023B7F  +
push offset dword_100373C  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+24h] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+488h] +
test al 10h +
jnz loc_1023C70  +
or eax 10h +
push edi  +
mov [esi+488h] eax +
mov eax [esi+1Ch] +
xor edi edi +
cmp eax edi +
jz loc_1023C49  +
cmp [eax+4] edi +
jz loc_1023C21  +
mov eax [eax+38h] +
cmp eax edi +
jz loc_1023C6F  +
mov ecx [esi+18h] +
push 1  +
push eax  +
call sub_102C00D  +
cmp eax edi +
jge loc_1023BFE  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1023BFE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1023BFE  +
push eax  +
push offset aGetupdatesfrom  +
push offset dword_100373C  +
push 42h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
call sub_101C646  +
test eax eax +
jz loc_1023C6F  +
push 1  +
call sub_101C646  +
mov ecx eax +
call sub_101C3F1  +
or dword ptr [esi+488h] 80h +
jmp loc_1023C6F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023C6F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1023C6F  +
push edi  +
push edi  +
push offset dword_100373C  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1022924  +
jmp loc_1023C6F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023C6F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1023C6F  +
push edi  +
push edi  +
push offset dword_100373C  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
pop edi  +
pop esi  +
retn   +
***
mov ecx [ecx+0Ch] +
push esi  +
call sub_10538D3  +
mov esi eax +
test esi esi +
jnz loc_1023CAA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023CAA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1023CAA  +
push offset dword_100373C  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1023CCD  +
push [ebp+arg_0]  +
mov ecx [ecx+18h] +
call sub_102BA7C  +
xor eax eax +
jmp loc_1023CD2  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
mov edi ecx +
push 1004h  +
push dword ptr [edi+48h]  +
mov [ebp+var_8] ebx +
call esi  +
cmp eax ebx +
mov [ebp+var_4] eax +
jle loc_1023DEA  +
mov ebx 1008h +
push 34h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+var_8] +
add esp 0Ch +
mov [ebp+wParam] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push dword ptr [edi+48h]  +
mov [ebp+lParam] 4 +
call esi  +
xor eax eax +
cmp [ebp+lpString2] eax +
jz loc_1023D68  +
cmp [ebp+lpString1] eax +
jz loc_1023D58  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1023DA4  +
inc [ebp+var_8]  +
mov eax [ebp+var_4] +
cmp [ebp+var_8] eax +
jl loc_1023D0F  +
jmp loc_1023DEA  +
cmp [ebp+lpString1] eax +
jnz loc_1023D58  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1023D94  +
test byte ptr [eax+1Ch] 1 +
jz loc_1023D94  +
push [ebp+wParam]  +
push offset dword_100373C  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push 0  +
push [ebp+wParam]  +
push ebx  +
push dword ptr [edi+48h]  +
call esi  +
dec [ebp+var_4]  +
jmp loc_1023D5B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1023DD0  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1023DD0  +
mov eax [ebp+lpString1] +
cdq   +
push edx  +
push eax  +
push offset dword_100373C  +
push 4Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1022924  +
push [ebp+lpString1]  +
call sub_105D688  +
and [ebp+lpString1] 0 +
push 0  +
push [ebp+wParam]  +
push ebx  +
push dword ptr [edi+48h]  +
call esi  +
dec [ebp+var_4]  +
xor eax eax +
cmp [ebp+var_4] eax +
mov ecx edi +
setnle al  +
push eax  +
call sub_1023002  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ecx +
mov eax [eax+18h] +
push 100h  +
lea ecx [ebp+var_204] +
push ecx  +
lea ecx [eax+54h] +
call sub_105B10A  +
test eax eax +
jge loc_1023E66  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1023E7A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1023E7A  +
push eax  +
push offset aGetservernamep  +
push offset dword_100373C  +
push 4Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1023E7A  +
push [ebp+arg_0]  +
lea eax [ebp+var_204] +
push offset aTermsrv  +
push eax  +
call sub_105A19B  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 1FEh  +
xor edi edi +
mov [ebp+Buffer] ax +
lea eax [ebp-202h] +
push edi  +
push eax  +
mov esi ecx +
call memset  +
add esp 0Ch +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 33F9h  +
push dword ptr [esi+4]  +
call sub_105DD36  +
test eax eax +
jz loc_1023EF5  +
push 338Ch  +
push dword ptr [esi+24h]  +
call ds:GetDlgItem  +
mov [esi+30h] eax +
mov eax [esi+30h] +
cmp eax edi +
jz loc_1024074  +
mov ebx ds:SendMessageW +
push edi  +
push 14h  +
push 41Eh  +
push eax  +
call ebx  +
push edi  +
push 1  +
push 43Ch  +
push dword ptr [esi+30h]  +
call ebx  +
movzx eax word ptr [esi+3Ch] +
movzx ecx word ptr [esi+38h] +
shl eax 10h +
or eax ecx +
push eax  +
push edi  +
push 420h  +
push dword ptr [esi+30h]  +
call ebx  +
push edi  +
push edi  +
push 456h  +
push dword ptr [esi+30h]  +
call ebx  +
shr eax 10h +
shl eax 10h +
push eax  +
push edi  +
push 457h  +
push dword ptr [esi+30h]  +
call ebx  +
movzx eax word ptr [esi+40h] +
push 2000h  +
push edi  +
push edi  +
push edi  +
push dword ptr [esi+38h]  +
push eax  +
push dword ptr [esi+4]  +
call ds:ImageList_LoadImageW  +
mov [esi+34h] eax +
cmp eax edi +
jz loc_1023FDF  +
push eax  +
push edi  +
push 430h  +
push dword ptr [esi+30h]  +
call ebx  +
push dword ptr [esi+34h]  +
push edi  +
push 436h  +
push dword ptr [esi+30h]  +
call ebx  +
mov [ebp+lParam] edi +
mov [ebp+var_20C] edi +
xor eax eax +
mov [ebp+var_214] 338Dh +
mov [ebp+var_210] 4 +
mov [ebp+var_20F] 10h +
mov [ebp+var_20E] 0 +
mov [ebp+var_20D] 0 +
lea edi [ebp+var_208] +
stos   +
lea eax [ebp+lParam] +
push eax  +
push 1  +
push 444h  +
push dword ptr [esi+30h]  +
call ebx  +
xor edi edi +
mov eax [esi+28h] +
cmp eax edi +
jz loc_1023FF6  +
push edi  +
push edi  +
push 31h  +
push eax  +
call ebx  +
push edi  +
push eax  +
push 30h  +
push dword ptr [esi+30h]  +
call ebx  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_234] +
stos   +
lea eax [ebp+Buffer] +
mov [ebp+var_220] eax +
mov eax [esi+488h] +
xor edi edi +
inc edi  +
and eax edi +
mov [ebp+var_22C] eax +
lea eax [ebp+var_238] +
push eax  +
push 338Dh  +
push 440h  +
push dword ptr [esi+30h]  +
mov [ebp+var_238] 20h +
mov [ebp+var_234] 3 +
mov [ebp+var_21C] 100h +
call ebx  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [esi+30h]  +
call ds:SetWindowTextW  +
mov ecx esi +
call sub_10232A6  +
mov ecx esi +
call sub_1023255  +
jmp loc_10240B0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1024098  +
test byte ptr [eax+1Ch] 4 +
jz loc_1024098  +
push offset dword_100373C  +
push 4Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+30h] +
mov ebx ds:ShowWindow +
cmp eax edi +
jz loc_10240A9  +
push edi  +
push eax  +
call ebx  +
push 4  +
push dword ptr [esi+28h]  +
call ebx  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
push 2050h  +
xor ebx ebx +
push ebx  +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push [ebp+hIcon]  +
mov edi ecx +
push ebx  +
mov [ebp+var_4] ebx +
call ds:LoadImageW  +
mov [ebp+hIcon] eax +
cmp eax ebx +
jz loc_10240F9  +
mov [ebp+var_4] esi +
jmp loc_1024105  +
mov eax [edi+20h] +
mov eax [eax+89Ch] +
mov [ebp+hIcon] eax +
push [ebp+hIcon]  +
push 0FFFFFFFFh  +
push dword ptr [edi+4Ch]  +
call ds:ImageList_ReplaceIcon  +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102414C  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_1024145  +
test byte ptr [eax+1Ch] 4 +
jz loc_1024145  +
push esi  +
push offset dword_100373C  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov ebx esi +
jmp loc_10242DA  +
mov eax [ebp+arg_C] +
cmp [eax] bx +
jnz loc_1024157  +
mov eax [ebp+arg_8] +
mov [ebp+arg_C] eax +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_102415D  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
lea eax [esi+esi] +
push eax  +
call sub_105D670  +
mov [ebp+arg_8] eax +
cmp eax ebx +
jnz loc_10241B5  +
mov ebx 8007000Eh +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10242CC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10242CC  +
push esi  +
push offset dword_100373C  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_10242CC  +
push [ebp+arg_C]  +
push esi  +
push eax  +
call sub_101BD65  +
mov ebx eax +
xor esi esi +
cmp ebx esi +
jge loc_10241FE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10242C8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10242C8  +
push ebx  +
push offset aStringcchcopyF  +
push offset dword_100373C  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10242C8  +
push 34h  +
lea eax [ebp+lParam] +
push esi  +
push eax  +
call memset  +
mov eax [ebp+arg_4] +
mov [ebp+var_28] eax +
mov eax [ebp+var_8] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_8] +
add esp 0Ch +
mov [ebp+var_1C] eax +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push 104Dh  +
push dword ptr [edi+48h]  +
mov [ebp+lParam] 7 +
call ds:SendMessageW  +
cmp eax 0FFFFFFFFh +
jnz loc_102426A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1024263  +
test byte ptr [eax+1Ch] 4 +
jz loc_1024263  +
push ebx  +
push offset dword_100373C  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov ebx 80004005h +
jmp loc_10242CC  +
cmp [ebp+var_4] esi +
jz loc_102427D  +
cmp [ebp+hIcon] esi +
jz loc_102427D  +
push [ebp+hIcon]  +
call ds:DestroyIcon  +
lea esi [edi+488h] +
test byte ptr [esi] 40h +
jnz loc_1024291  +
push 1  +
mov ecx edi +
call sub_1023002  +
test byte ptr [esi] 2 +
jnz loc_10242C6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10242BA  +
test byte ptr [eax+1Ch] 2 +
jz loc_10242BA  +
push offset dword_100373C  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [edi+1Ch] +
push dword ptr [eax+4]  +
call ds:SetForegroundWindow  +
xor ebx ebx +
test ebx ebx +
jge loc_10242DA  +
cmp [ebp+arg_8] 0 +
jz loc_10242DA  +
push [ebp+arg_8]  +
call sub_105D688  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+Rect] 0 +
push ebx  +
xor eax eax +
push esi  +
push edi  +
lea edi [ebp-14h] +
stos   +
stos   +
mov esi ecx +
stos   +
mov eax [esi+480h] +
mov [ebp+var_8] eax +
mov eax [esi+1Ch] +
mov ecx [eax+4] +
mov eax [esi+488h] +
mov edx eax +
xor ebx ebx +
not edx  +
and edx 1 +
cmp [ebp+arg_0] ebx +
mov [ebp+hWnd] ecx +
setz bl  +
cmp ebx edx +
jz loc_10244A5  +
mov edx eax +
xor edx [ebp+arg_0] +
push 0  +
and edx 1 +
xor edx eax +
lea eax [ebp+Rect] +
push eax  +
push ecx  +
mov ecx esi +
mov [esi+488h] edx +
call sub_10237E4  +
mov edi [ebp-10h] +
sub edi [ebp+Rect] +
mov ecx [esi+8] +
mov ebx [ebp-0Ch] +
sub ebx [ebp-14h] +
mov eax edi +
sub eax [ecx+2Ch] +
test byte ptr [esi+488h] 1 +
mov [ebp+arg_0] eax +
jz loc_102438C  +
lea eax [esi+64h] +
push eax  +
push dword ptr [esi+28h]  +
call ds:SetWindowTextW  +
mov edi [esi+474h] +
add ebx [esi+478h] +
add edi [ebp+arg_0] +
jmp loc_10243F6  +
lea eax [esi+26Ch] +
push eax  +
push dword ptr [esi+28h]  +
call ds:SetWindowTextW  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
sub eax ebx +
mov [esi+478h] eax +
mov eax [ebp-10h] +
sub eax [ebp+Rect] +
sub eax [ebp+arg_0] +
mov [esi+474h] eax +
call ds:GetWindowLongW  +
shr eax 18h +
shl eax 2 +
xor eax [esi+488h] +
and eax 4 +
xor [esi+488h] eax +
test byte ptr [esi+488h] 4 +
jz loc_10243F6  +
or [ebp+var_8] 1000000h +
mov ecx [esi+488h] +
mov eax ecx +
shl eax 1Fh +
sar eax 1Fh +
xor edx edx +
cmp eax edx +
jz loc_1024417  +
test cl 4 +
jz loc_1024413  +
push 3  +
jmp loc_102441E  +
cmp eax edx +
jnz loc_1024429  +
test cl 4 +
jz loc_1024429  +
push 9  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
jmp loc_1024439  +
push 2  +
push ebx  +
push edi  +
push edx  +
push edx  +
push edx  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
mov eax [esi+488h] +
shl eax 1Fh +
sar eax 1Fh +
push eax  +
push [ebp+var_8]  +
mov ecx esi +
push [ebp+hWnd]  +
call sub_102372E  +
mov eax [esi] +
and dword ptr [esi+488h] 0FFFFFFDFh +
mov ecx esi +
call dword ptr [eax+64h]  +
push eax  +
call ds:SetFocus  +
test eax eax +
jnz loc_102449E  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102449E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102449E  +
push eax  +
push offset aSetfocusFailed  +
push offset dword_100373C  +
push 2Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx esi +
call sub_1023255  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
test eax eax +
jz loc_10245A5  +
cmp dword ptr [eax+6B8h] 0 +
jz loc_10245A5  +
mov eax [esi+18h] +
mov edi 100h +
push edi  +
lea ecx [ebp+var_204] +
push ecx  +
lea ecx [eax+54h] +
call sub_105B10A  +
test eax eax +
jge loc_1024536  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10245C9  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10245C9  +
push eax  +
push offset dword_100373C  +
push 32h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_10245C9  +
mov eax [esi+1Ch] +
xor ecx ecx +
cmp dword ptr [eax+6B8h] 3 +
push edi  +
setnz cl  +
dec ecx  +
and ecx 2FE0h +
add ecx 41Eh +
mov eax ecx +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
call sub_105DD36  +
test eax eax +
jz loc_10245C9  +
lea eax [ebp+var_204] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+arg_4]  +
push ebx  +
call sub_101BDD4  +
add esp 10h +
test eax eax +
jge loc_10245CE  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10245C9  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10245C9  +
push eax  +
push offset dword_100373C  +
push 33h  +
jmp loc_1024526  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10245C9  +
test byte ptr [eax+1Ch] 4 +
jz loc_10245C9  +
push offset dword_100373C  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov [ebx] ax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
cmp [ebp+arg_4] 2 +
push ebx  +
mov ebx ecx +
jz loc_10245FF  +
cmp [ebp+arg_4] 0 +
jnz loc_10248F1  +
mov eax [ebx+488h] +
push esi  +
shl eax 1Fh +
push edi  +
sar eax 1Fh +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+hWnd]  +
call sub_10237E4  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
test byte ptr [ebx+488h] 1 +
mov edi [ebp+var_18] +
mov esi [ebp+var_1C] +
jz loc_1024678  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
mov ecx esi +
sub ecx [ebp+var_24] +
cmp ecx eax +
jg loc_1024654  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov ecx edi +
sub ecx [ebp+var_20] +
cmp ecx eax +
jle loc_1024695  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1024678  +
test byte ptr [eax+1Ch] 2 +
jz loc_1024678  +
push offset dword_100373C  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
sub edi [ebp+var_20] +
sub esi [ebp+var_24] +
push 216h  +
push edi  +
push esi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
jmp loc_1024697  +
xor esi esi +
xor eax eax +
cmp [ebp+arg_4] 2 +
setz al  +
shl eax 3 +
xor eax [ebx+488h] +
and eax 8 +
xor [ebx+488h] eax +
cmp [ebx+8] esi +
jz loc_10246C8  +
mov ecx ebx +
call sub_1022F44  +
push [ebp+hWnd]  +
mov ecx ebx +
call sub_1022EC6  +
cmp [ebx+0Ch] esi +
jz loc_10246DE  +
mov ecx ebx +
call sub_1023C77  +
push [ebp+hWnd]  +
mov ecx ebx +
call sub_1022F02  +
mov eax [ebx+24h] +
mov edi ds:GetClientRect +
cmp eax esi +
jz loc_1024765  +
push eax  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_1024765  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call edi  +
mov eax [ebx+14h] +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
push 4  +
push eax  +
push ecx  +
mov ecx [ebp+Rect.bottom] +
sub ecx eax +
push ecx  +
push esi  +
push esi  +
push dword ptr [ebx+24h]  +
call ds:SetWindowPos  +
lea eax [ebp+var_64] +
push eax  +
push dword ptr [ebx+24h]  +
call edi  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+2Ch]  +
call edi  +
mov eax [ebp+var_18] +
sub eax [ebp+var_20] +
push 4  +
push eax  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_24] +
push eax  +
mov eax [ebp+var_5C] +
sub eax [ebx+58h] +
push dword ptr [ebx+5Ch]  +
sub eax [ebp+var_1C] +
add eax [ebp+var_24] +
push eax  +
push esi  +
push dword ptr [ebx+2Ch]  +
call ds:SetWindowPos  +
push 1  +
push esi  +
push dword ptr [ebx+28h]  +
call ds:InvalidateRect  +
mov eax [ebx+44h] +
cmp eax esi +
jz loc_10248EF  +
test byte ptr [ebx+488h] 40h +
jz loc_10248EF  +
push 0FFFFFFECh  +
push eax  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax 400000h +
and esi eax +
sub esi eax +
lea eax [ebp+Rect] +
neg esi  +
push eax  +
push [ebp+hWnd]  +
sbb esi esi +
inc esi  +
call edi  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+44h]  +
call edi  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_24] +
push 0Ch  +
mov [ebp+var_C] eax +
mov eax [ebp+var_18] +
sub eax [ebp+var_20] +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
mov eax [ebx+10h] +
sub eax [ebp+var_18] +
add eax [ebp+var_20] +
add eax [ebp+Rect.top] +
push eax  +
push 0  +
push 0  +
push dword ptr [ebx+44h]  +
call ds:SetWindowPos  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
xor ecx ecx +
cmp [ebp+var_C] eax +
push 3391h  +
push dword ptr [ebx+44h]  +
setnl cl  +
mov [ebp+var_14] ecx +
call ds:GetDlgItem  +
mov [ebp+var_4] eax +
lea eax [ebp+var_54] +
push eax  +
push dword ptr [ebx+48h]  +
call ds:GetWindowRect  +
lea eax [ebp+var_64] +
push eax  +
push [ebp+var_4]  +
call ds:GetWindowRect  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+44h]  +
call ds:GetWindowRect  +
mov edx [ebp+var_1C] +
mov ecx [ebp+var_18] +
sub ecx [ebp+var_20] +
mov eax edx +
sub eax [ebp+var_24] +
mov [ebp+var_10] ecx +
mov [ebp+var_8] eax +
test esi esi +
jz loc_102484A  +
sub edx [ebp+var_5C] +
mov [ebp+arg_4] edx +
mov edx [ebp+var_1C] +
sub edx [ebp+var_4C] +
jmp loc_1024859  +
mov edx [ebp+var_64] +
sub edx [ebp+var_24] +
mov [ebp+arg_4] edx +
mov edx [ebp+var_54] +
sub edx [ebp+var_24] +
mov [ebp+hWnd] edx +
mov edx [ebp+var_48] +
sub edx [ebp+var_50] +
push 0Eh  +
sub edx [ebp+var_18] +
add edx [ebp+var_20] +
add edx ecx +
mov ecx [ebp+hWnd] +
push edx  +
add ecx ecx +
sub eax ecx +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push dword ptr [ebx+48h]  +
call ds:SetWindowPos  +
mov ecx [ebp+arg_4] +
mov eax [ebp+var_10] +
push 0Eh  +
add ecx ecx +
sub eax ecx +
push eax  +
mov eax [ebp+var_8] +
sub eax ecx +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+var_4]  +
call ds:SetWindowPos  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+44h]  +
call edi  +
test esi esi +
jnz loc_10248D6  +
mov eax [ebp+var_8] +
cmp [ebp+var_14] esi +
jnz loc_10248BC  +
mov eax [ebp+var_C] +
sub eax [ebp+hWnd] +
mov [ebp+var_44] eax +
mov eax [ebp+var_20] +
mov [ebp+var_40] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_3C] eax +
mov eax [ebp+var_18] +
mov [ebp+var_38] eax +
jmp loc_10248E0  +
lea esi [ebp+var_24] +
lea edi [ebp+var_44] +
movs   +
movs   +
movs   +
movs   +
push 1  +
lea eax [ebp+var_44] +
push eax  +
push dword ptr [ebx+44h]  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jz loc_102491A  +
call sub_1022F44  +
push [ebp+hWnd]  +
mov ecx esi +
call sub_1022EC6  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1024931  +
mov ecx esi +
call sub_1023C77  +
push [ebp+hWnd]  +
mov ecx esi +
call sub_1022F02  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
mov edi [eax+4] +
mov [ebp+hWnd] edi +
mov eax lpReserved +
mov ebx offset dword_100373C +
cmp eax offset lpReserved +
jz loc_102497F  +
test byte ptr [eax+1Ch] 2 +
jz loc_102497F  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
setnz cl  +
push ecx  +
push ebx  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_102499A  +
call sub_10535C4  +
mov eax [esi+0Ch] +
and dword ptr [eax+28h] 0 +
push edi  +
mov ecx esi +
call sub_1022F02  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1024AEE  +
push edi  +
call ds:IsWindow  +
test eax eax +
jz loc_1024AEE  +
mov ecx [ebp+arg_4] +
mov edi ecx +
xor edx edx +
and edi 1 +
jnz loc_10249F8  +
and ecx 2 +
jz loc_10249F8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10249F3  +
test byte ptr [eax+1Ch] 2 +
jz loc_10249F3  +
push ecx  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
setnz cl  +
push ecx  +
push ebx  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov eax lpReserved +
xor edx edx +
inc edx  +
jmp loc_10249FD  +
mov eax lpReserved +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jnz loc_1024AD3  +
cmp edx ecx +
jnz loc_1024AD3  +
cmp eax offset lpReserved +
jz loc_1024A2F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1024A2F  +
push [ebp+arg_4]  +
push ecx  +
push ebx  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
neg edi  +
sbb edi edi +
and edi 3 +
inc edi  +
mov ecx esi +
mov [esi+484h] edi +
call sub_1022F44  +
mov eax [esi+1Ch] +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1022EC6  +
mov ecx [esi+1Ch] +
and dword ptr [esi+488h] 0FFFFFFFDh +
call sub_101E780  +
xor edi edi +
inc edi  +
push edi  +
mov ecx esi +
call sub_10242E8  +
push 5  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
mov eax [esi+1Ch] +
push [ebp+hWnd]  +
mov [eax+288h] edi +
call ds:SetForegroundWindow  +
push 0  +
mov ecx esi +
call sub_1023CDB  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+64h]  +
push eax  +
call ds:SetFocus  +
test eax eax +
jnz loc_1024AEE  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1024AEE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1024AEE  +
push eax  +
push offset aSetfocusFailed  +
push ebx  +
push 41h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1024AEE  +
push ecx  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
mov eax [esi+1Ch] +
or dword ptr [esi+488h] 2 +
and dword ptr [eax+288h] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jl loc_1024B13  +
cmp ecx 1 +
jle loc_1024B3D  +
cmp ecx 3 +
jle loc_1024B4F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1024B38  +
test byte ptr [eax+1Ch] 4 +
jz loc_1024B38  +
push ecx  +
push offset dword_100373C  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
pop esi  +
pop ebp  +
retn 4  +
push 1  +
mov ecx esi +
call sub_1023E06  +
push 2  +
mov ecx esi +
call sub_1023E06  +
mov ecx esi +
mov dword ptr [esi+484h] 2 +
call sub_1022F44  +
mov eax [esi+1Ch] +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1022EC6  +
push 1  +
mov ecx esi +
call sub_10242E8  +
jmp loc_1024B38  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ds:SendMessageW +
push edi  +
mov [ebp+var_210] eax +
xor eax eax +
push eax  +
push eax  +
mov edi ecx +
push 1004h  +
push dword ptr [edi+48h]  +
mov [ebp+var_20C] eax +
call esi  +
and [ebp+var_208] 0 +
mov [ebp+var_214] eax +
test ebx ebx +
jz loc_1024CCF  +
mov eax [ebp+var_214] +
cmp [ebp+var_208] eax +
jge loc_1024CCF  +
push 34h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
xor eax eax +
mov word ptr [ebp+var_204] ax +
mov eax [ebp+var_208] +
mov [ebp+var_248] eax +
add esp 0Ch +
lea eax [ebp+var_204] +
mov [ebp+var_238] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push dword ptr [edi+48h]  +
mov [ebp+var_234] 100h +
mov [ebp+lParam] 5 +
call esi  +
push ebx  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1024CBA  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1024C85  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1024C85  +
push [ebp+var_238]  +
mov eax [ebp+lpString1] +
cdq   +
push edx  +
push eax  +
push offset dword_100373C  +
push 4Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1022950  +
mov eax [ebp+var_238] +
test eax eax +
jz loc_1024CBA  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1024C92  +
sub eax edx +
sar eax 1 +
jz loc_1024CBA  +
push [ebp+var_238]  +
push [ebp+arg_8]  +
push [ebp+var_210]  +
call sub_101BD65  +
test eax eax +
jge loc_1024CC5  +
inc [ebp+var_208]  +
jmp loc_1024BD2  +
mov [ebp+var_20C] 1 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_20C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] 111h +
push esi  +
mov esi ecx +
jnz loc_1024DDC  +
mov edx [ebp+arg_8] +
mov ecx 338Dh +
cmp dx cx +
jnz loc_1024D3E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1024DC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1024DC6  +
mov ecx [esi+488h] +
not ecx  +
and ecx 1 +
push ecx  +
push offset dword_100373C  +
push 28h  +
jmp loc_1024DBB  +
mov ecx edx +
shr ecx 10h +
sub ecx eax +
jz loc_1024D4F  +
dec ecx  +
dec ecx  +
jnz loc_1024DDC  +
cmp dx 2 +
jnz loc_1024D8C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1024D78  +
test [eax+1Ch] dl +
jz loc_1024D78  +
push offset dword_100373C  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+1Ch] +
push 0  +
push 0  +
push 10h  +
push dword ptr [eax+4]  +
call ds:PostMessageW  +
jmp loc_1024DD9  +
mov ecx 338Bh +
cmp dx cx +
jnz loc_1024DDC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1024DC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1024DC6  +
mov ecx [esi+488h] +
not ecx  +
and ecx 1 +
push ecx  +
push offset dword_100373C  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi+488h] +
not eax  +
and eax 1 +
push eax  +
mov ecx esi +
call sub_10242E8  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1A0Ch +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov ebx ecx +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebx+484h] +
inc esi  +
mov [ebp+var_1A08] ebx +
mov [ebp+lpString2] edi +
cmp [eax] esi +
jz loc_1024E34  +
mov [eax] esi +
call sub_1022F44  +
mov eax [ebx+1Ch] +
push dword ptr [eax+4]  +
mov ecx ebx +
call sub_1022EC6  +
cmp [ebp+arg_4] 0 +
jnz loc_1024E47  +
push edi  +
mov ecx ebx +
call sub_1023118  +
jmp loc_10250B5  +
mov eax lpReserved +
mov ebx offset lpReserved +
cmp eax ebx +
jz loc_1024E71  +
test byte ptr [eax+1Ch] 4 +
jz loc_1024E71  +
push [ebp+arg_4]  +
push edi  +
push offset dword_100373C  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
test edi edi +
jz loc_1024ED7  +
cmp [ebp+arg_4] 5 +
jnz loc_1024ED7  +
mov edi 36B9h +
mov esi 400h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+var_1A08] +
mov eax [eax+1Ch] +
push edi  +
push dword ptr [eax+2Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_1024F73  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_10250B5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10250B5  +
push eax  +
push offset aTsloadstring_0  +
push offset dword_100373C  +
push 39h  +
jmp loc_102507D  +
cmp [ebp+arg_4] esi +
jnz loc_1024F44  +
mov edi 36BDh +
mov ecx [ebp+var_1A08] +
push esi  +
call sub_10242E8  +
mov esi 400h +
push esi  +
lea eax [ebp+var_A04] +
push eax  +
mov eax [ebp+var_1A08] +
mov eax [eax+1Ch] +
push edi  +
push dword ptr [eax+2Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_1025038  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_10250B5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10250B5  +
push eax  +
push offset aTsloadstring_0  +
push offset dword_100373C  +
push 3Ch  +
jmp loc_102507D  +
cmp [ebp+arg_4] 7 +
jnz loc_1024F51  +
mov edi 36C0h +
jmp loc_1024EE1  +
cmp [ebp+arg_4] 3 +
jnz loc_1024F69  +
mov edi [ebp+arg_8] +
neg edi  +
sbb edi edi +
add edi 36BFh +
jmp loc_1024E80  +
mov edi 36B8h +
jmp loc_1024EED  +
cmp edi 36BFh +
jz loc_1024FE5  +
mov ecx [ebp+var_1A08] +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
push [ebp+lpString2]  +
call sub_1024B7D  +
test eax eax +
jz loc_1024FE5  +
lea eax [ebp+var_204] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_A04] +
push esi  +
push eax  +
call sub_101BDD4  +
add esp 10h +
test eax eax +
jge loc_1025038  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_10250B5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10250B5  +
push eax  +
push offset aStringcchprint  +
push offset dword_100373C  +
push 3Ah  +
jmp loc_102502B  +
push [ebp+lpString2]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_A04] +
push esi  +
push eax  +
call sub_101BDD4  +
add esp 10h +
test eax eax +
jge loc_1025038  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_10250B5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10250B5  +
push eax  +
push offset aStringcchprint  +
push offset dword_100373C  +
push 3Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10250B5  +
push esi  +
mov esi [ebp+var_1A08] +
lea eax [ebp+var_1A04] +
push eax  +
mov eax [esi+1Ch] +
push 36BAh  +
push dword ptr [eax+2Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_102508A  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_10250B5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10250B5  +
push eax  +
push offset aTsloadstring_0  +
push offset dword_100373C  +
push 3Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10250B5  +
push [ebp+lpString2]  +
mov ecx esi +
call sub_1023CDB  +
push 10040h  +
lea eax [ebp+var_1A04] +
push eax  +
lea eax [ebp+var_A04] +
push eax  +
mov eax [esi+1Ch] +
push dword ptr [eax+4]  +
call sub_105D992  +
push [ebp+arg_8]  +
mov eax [ebp+var_1A08] +
push [ebp+arg_4]  +
mov eax [eax+1Ch] +
push [ebp+lpString2]  +
mov ecx [eax+6C0h] +
call sub_1035AC4  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx+1Ch] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
cmp eax edi +
jz loc_102518A  +
cmp [eax+38h] edi +
jz loc_102518A  +
mov eax [eax+38h] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C738  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jge loc_1025153  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10251B3  +
test byte ptr [eax+1Ch] 4 +
jz loc_10251B3  +
push esi  +
push offset aQiForIid_imsrd  +
push offset dword_100373C  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10251B3  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+0FCh]  +
mov esi eax +
cmp esi edi +
jge loc_10251B3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10251B3  +
test byte ptr [eax+1Ch] 4 +
jz loc_10251B3  +
push esi  +
push offset aGet_remoteprog  +
push offset dword_100373C  +
push 48h  +
jmp loc_1025146  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10251AE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10251AE  +
push offset dword_100373C  +
push 49h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 8000FFFFh +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [ebp+var_8] +
mov [ebp+var_4] edi +
cmp eax edi +
jz loc_10251CE  +
mov [ebp+var_8] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_10251DE  +
mov [ebp+var_4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
xor ebx ebx +
and [ebp+var_4] ebx +
push offset aShell32_dll  +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_102525D  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_1025222  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10253B4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10253B4  +
call esi  +
push eax  +
mov eax lpReserved +
push offset dword_100373C  +
push 50h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_10253B4  +
push offset aShgetpropertys  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_10252BE  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_1025283  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10253AB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10253AB  +
call esi  +
push eax  +
mov eax lpReserved +
push offset dword_100373C  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_10253AB  +
cmp [ebp+arg_0] ebx +
jz loc_10253AB  +
lea ecx [ebp+var_4] +
push ecx  +
push offset dword_10038DC  +
push [ebp+arg_0]  +
call eax  +
mov ebx eax +
test ebx ebx +
jl loc_10253AB  +
push edi  +
lea eax [ebp+var_18] +
push eax  +
push offset aMicrosoft_wind  +
call sub_10228F0  +
mov edi offset dword_100373C +
test eax eax +
jl loc_1025322  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push offset dword_100C378  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax lpReserved +
mov esi offset lpReserved +
cmp eax esi +
jz loc_1025344  +
test byte ptr [eax+1Ch] 1 +
jz loc_1025344  +
push edi  +
push 52h  +
jmp loc_1025339  +
mov eax lpReserved +
mov esi offset lpReserved +
cmp eax esi +
jz loc_1025344  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025344  +
push edi  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 0Bh  +
pop eax  +
mov word ptr [ebp+var_18] ax +
or eax 0FFFFFFFFh +
lea edx [ebp+var_18] +
push edx  +
mov [ebp+var_10] ax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push offset dword_100C38C  +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
test ebx ebx +
jz loc_102538A  +
mov eax lpReserved +
cmp eax esi +
jz loc_10253AA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10253AA  +
push ebx  +
push edi  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_10253AA  +
mov eax lpReserved +
cmp eax esi +
jz loc_10253AA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10253AA  +
push [ebp+arg_0]  +
push edi  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
pop edi  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10253C5  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov edx [ebp+arg_0] +
push edi  +
mov [ecx+4] eax +
mov [ecx+8] eax +
mov [ecx+0Ch] eax +
mov [ecx+10h] eax +
mov [ecx+14h] eax +
mov dword ptr [ecx] offset off_1003920 +
mov [ecx+18h] eax +
and dword ptr [ecx+488h] 0FFFFFF00h +
mov [ecx+20h] eax +
mov [ecx+24h] eax +
mov [ecx+28h] eax +
mov [ecx+2Ch] eax +
mov [ecx+30h] eax +
mov [ecx+34h] eax +
mov [ecx+38h] eax +
mov [ecx+3Ch] eax +
mov [ecx+40h] eax +
mov [ecx+44h] eax +
mov [ecx+48h] eax +
mov [ecx+4Ch] eax +
mov [ecx+50h] eax +
mov [ecx+54h] eax +
mov [ecx+58h] eax +
mov [ecx+5Ch] eax +
mov [ecx+60h] eax +
mov [ecx+47Ch] eax +
mov [ecx+480h] eax +
mov [ecx+484h] eax +
mov [ecx+64h] ax +
mov [ecx+26Ch] ax +
mov [ecx+1Ch] edx +
lea edi [ecx+474h] +
stos   +
stos   +
mov eax ecx +
pop edi  +
pop ebp  +
retn 4  +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
xor ebx ebx +
lea ecx [esi+18h] +
push ebx  +
mov dword ptr [esi] offset off_1003920 +
call sub_101C97A  +
lea edi [esi+47Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_10254BF  +
push eax  +
call ds:DestroyIcon  +
mov [edi] ebx +
mov eax [esi+24h] +
mov edi ds:SetWindowLongW +
cmp eax ebx +
jz loc_10254D2  +
push ebx  +
push 0FFFFFFEBh  +
push eax  +
call edi  +
mov eax [esi+28h] +
cmp eax ebx +
jz loc_10254DF  +
push ebx  +
push 0FFFFFFEBh  +
push eax  +
call edi  +
mov eax [esi+2Ch] +
cmp eax ebx +
jz loc_10254EC  +
push ebx  +
push 0FFFFFFEBh  +
push eax  +
call edi  +
mov eax [esi+44h] +
cmp eax ebx +
jz loc_10254F9  +
push ebx  +
push 0FFFFFFEBh  +
push eax  +
call edi  +
mov ecx [esi+0Ch] +
cmp ecx ebx +
jz loc_102550A  +
push 1  +
call sub_1022CB4  +
mov [esi+0Ch] ebx +
mov ecx [esi+8] +
cmp ecx ebx +
jz loc_102551A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [esi+8] ebx +
lea edi [esi+488h] +
test byte ptr [edi] 80h +
jnz loc_1025541  +
call sub_101C646  +
test eax eax +
jz loc_1025541  +
push ebx  +
call sub_101C646  +
mov ecx eax +
call sub_101C3F1  +
or dword ptr [edi] 80h +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_1025551  +
push eax  +
mov [esi+18h] ebx +
call sub_1018A83  +
pop edi  +
mov dword ptr [esi] offset off_1002D40 +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jz loc_10257FF  +
lea eax [ebp+var_4] +
push eax  +
call sub_10250EB  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_10255D1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10255BA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10255BA  +
push [ebp+arg_0]  +
push offset aGettsremoteapp  +
push offset dword_100373C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov ebx [ebp+var_4] +
test ebx ebx +
jz loc_10255C7  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov ebx [ebp+var_4] +
mov ecx [ebx] +
lea eax [esi+136Ch] +
push eax  +
push ebx  +
call dword ptr [ecx+28h]  +
test eax eax +
jge loc_1025614  +
mov ecx lpReserved +
mov edi offset lpReserved +
cmp ecx edi +
jz loc_1025619  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1025619  +
push eax  +
push offset aSettingRemoteA  +
push offset dword_100373C  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1025619  +
mov edi offset lpReserved +
mov ecx [ebx] +
lea eax [esi+29FCh] +
push eax  +
push ebx  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jge loc_1025652  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1025652  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1025652  +
push eax  +
push offset aSettingRemot_0  +
push offset dword_100373C  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx [ebx] +
lea eax [esi+2C04h] +
push eax  +
push ebx  +
mov [ebp+var_4] eax +
call dword ptr [ecx+30h]  +
test eax eax +
jge loc_102568E  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_102568E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102568E  +
push eax  +
push offset aSettingRemot_1  +
push offset dword_100373C  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [esi+1364h] +
mov ecx [esi+1360h] +
neg eax  +
sbb eax eax +
push eax  +
push [ebp+var_4]  +
neg ecx  +
sbb ecx ecx +
push ecx  +
lea edx [esi+6E94h] +
mov [ebp+var_C] edx +
push [ebp+var_C]  +
mov edx [ebx] +
lea edi [esi+17F4h] +
push edi  +
lea eax [esi+29FCh] +
push eax  +
push ebx  +
call dword ptr [edx+24h]  +
mov ecx eax +
mov [ebp+arg_0] ecx +
test ecx ecx +
jge loc_1025723  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10256F5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10256F5  +
push ecx  +
push offset dword_100373C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push edi  +
lea ecx [ebp+var_C] +
call loc_1023313  +
mov ecx [ebp+var_8] +
xor edx edx +
cmp [edi] dx +
mov esi eax +
mov eax [ecx] +
setz dl  +
push edx  +
push 6  +
push dword ptr [esi]  +
call dword ptr [eax+54h]  +
push [ebp+var_C]  +
call ds:SysFreeString  +
jmp loc_10255BD  +
cmp ecx 1 +
jnz loc_1025759  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10255BD  +
test byte ptr [eax+1Ch] 2 +
jz loc_10255BD  +
push offset dword_100373C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_10255BD  +
mov ecx [ebp+var_8] +
push edi  +
lea edi [esi+29FCh] +
push edi  +
lea eax [esi+136Ch] +
push eax  +
add esi 156Ch +
push esi  +
call sub_10240C6  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_10257AE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10255BD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10257B3  +
push [ebp+arg_0]  +
push offset aAddremoteappli  +
push offset dword_100373C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10255BD  +
test byte ptr [eax+1Ch] 2 +
jz loc_10255BD  +
mov esi [ebp+var_4] +
mov ecx offset word_1002174 +
test esi esi +
jnz loc_10257D6  +
mov esi ecx +
mov edx [ebp+var_C] +
test edx edx +
jnz loc_10257DF  +
mov edx ecx +
test edi edi +
jz loc_10257E5  +
mov ecx edi +
push esi  +
push edx  +
push ecx  +
push offset dword_100373C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10229C3  +
jmp loc_10255BD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025823  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025823  +
push offset dword_100373C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+arg_0] 80070057h +
jmp loc_10255BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_1025850  +
mov ecx eax +
pop ebp  +
jmp loc_1024CEB  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+18h]  +
call sub_1026EBD  +
mov [ebp-4] eax +
test eax eax +
jz loc_1025942  +
push 0  +
push 0  +
push 1009h  +
push dword ptr [esi+48h]  +
call ds:SendMessageW  +
mov eax [esi+18h] +
lea ecx [eax+17F4h] +
push ecx  +
lea ecx [eax+29FCh] +
push ecx  +
lea ecx [eax+136Ch] +
push ecx  +
add eax 156Ch +
push eax  +
mov ecx esi +
call sub_10240C6  +
mov edi offset dword_100373C +
mov ebx offset lpReserved +
test eax eax +
jge loc_10258E2  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_10258E2  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10258E2  +
push eax  +
push offset aAddremoteappli  +
push edi  +
push 2Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [esi+1Ch] +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_10251EB  +
test eax eax +
jge loc_1025917  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_1025917  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1025917  +
push eax  +
push offset aSetappidanddis  +
push edi  +
push 2Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx [esi+1Ch] +
call sub_101F685  +
mov ecx [esi+1Ch] +
call sub_1020918  +
mov [ebp-4] eax +
test eax eax +
jnz loc_1025966  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1025966  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025966  +
push edi  +
push 2Eh  +
jmp loc_102595B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025966  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025966  +
push offset dword_100373C  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1025492  +
test byte ptr [ebp+8] 1 +
jz loc_102598D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
push 0  +
push offset sub_1025834  +
push [ebp+hWndParent]  +
mov esi ecx +
push 32E4h  +
push dword ptr [esi+4]  +
call sub_105DBBC  +
mov [esi+24h] eax +
test eax eax +
jnz loc_1025A13  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10259EF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10259EF  +
push esi  +
push offset dword_100373C  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test esi esi +
jle loc_10259FF  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
test eax eax +
jl loc_1025B6A  +
mov eax 80004005h +
jmp loc_1025B6A  +
push edi  +
push esi  +
push 0FFFFFFEBh  +
push eax  +
call ds:SetWindowLongW  +
mov edi ds:GetDlgItem +
push 338Bh  +
push dword ptr [esi+24h]  +
call edi  +
push 2  +
push dword ptr [esi+24h]  +
mov [esi+28h] eax +
call edi  +
mov edi ds:GetWindowRect +
mov [esi+2Ch] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+24h]  +
call edi  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov [esi+14h] eax +
lea eax [ebp+var_30] +
push eax  +
push dword ptr [esi+28h]  +
call edi  +
lea eax [ebp+var_20] +
push eax  +
push dword ptr [esi+2Ch]  +
call edi  +
mov eax [esi+24h] +
push 0FFFFFFECh  +
push eax  +
call ds:GetWindowLongW  +
mov ecx 400000h +
and eax ecx +
sub eax ecx +
mov ecx [ebp+var_20] +
neg eax  +
sbb eax eax +
inc eax  +
jz loc_1025A8B  +
mov edx ecx +
sub edx [ebp+Rect.left] +
jmp loc_1025A91  +
mov edx [ebp+Rect.right] +
sub edx [ebp+var_18] +
mov [esi+58h] edx +
test eax eax +
jz loc_1025AA3  +
mov eax [ebp+var_30] +
sub eax [ebp+var_18] +
mov [esi+60h] eax +
jmp loc_1025AA9  +
sub ecx [ebp+var_28] +
mov [esi+60h] ecx +
mov eax [ebp+var_1C] +
sub eax [ebp+Rect.top] +
push ebx  +
mov edi 104h +
push edi  +
lea ebx [esi+26Ch] +
push ebx  +
push 33F7h  +
push dword ptr [esi+4]  +
mov [esi+5Ch] eax +
call sub_105DD36  +
test eax eax +
jnz loc_1025AF5  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025B38  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025B38  +
push esi  +
push offset dword_100373C  +
push 20h  +
jmp loc_1025B2D  +
push edi  +
lea eax [esi+64h] +
push eax  +
push 33F8h  +
push dword ptr [esi+4]  +
call sub_105DD36  +
test eax eax +
jnz loc_1025B55  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025B38  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025B38  +
push esi  +
push offset dword_100373C  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test esi esi +
jle loc_1025B48  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
test eax eax +
jl loc_1025B68  +
mov eax 80004005h +
jmp loc_1025B68  +
push ebx  +
push dword ptr [esi+28h]  +
call ds:SetWindowTextW  +
mov ecx esi +
call sub_1023E8D  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
lea ecx [esi+18h] +
mov [esi+4] ebx +
call sub_101C97A  +
mov eax [ebp+14h] +
mov [esi+20h] eax +
call sub_102736E  +
push 34h  +
mov edi eax +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1025BB8  +
push 0  +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_103B94C  +
jmp loc_1025BBA  +
xor eax eax +
mov [esi+8] eax +
test eax eax +
jz loc_1025D8F  +
mov ecx esi +
call sub_1022F44  +
test eax eax +
jz loc_1025D74  +
mov eax [esi+8] +
mov eax [eax+14h] +
add [esi+10h] eax +
cmp edi 78h +
jnb loc_1025BE9  +
mov edi 272h +
jmp loc_1025BFA  +
cmp edi 90h +
sbb edi edi +
and edi 0FFFFFFFEh +
add edi 276h +
push 34h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1025C1D  +
mov ecx [esi+8] +
push dword ptr [ecx+0Ch]  +
mov ecx eax +
push edi  +
push dword ptr [esi+10h]  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10537D9  +
jmp loc_1025C1F  +
xor eax eax +
mov [esi+0Ch] eax +
test eax eax +
jz loc_1025D59  +
mov ecx eax +
call sub_1053592  +
mov ecx esi +
call sub_1023C77  +
test eax eax +
jz loc_1025D2C  +
mov ecx [esi+0Ch] +
mov eax [ecx+24h] +
sub eax [ecx+1Ch] +
add [esi+10h] eax +
call sub_105359A  +
mov edi [ebp+8] +
push edi  +
mov ecx esi +
call sub_1023529  +
mov [ebp+8] eax +
test eax eax +
jge loc_1025C8E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025DBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025DBA  +
push dword ptr [ebp+8]  +
push offset aCreateconqueue  +
push offset dword_100373C  +
push 26h  +
jmp loc_1025CC6  +
push edi  +
mov ecx esi +
call sub_1025999  +
mov [ebp+8] eax +
test eax eax +
jge loc_1025CD6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025DBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025DBA  +
push dword ptr [ebp+8]  +
push offset aCreateconqueue  +
push offset dword_100373C  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1025DBA  +
push 0FFFFFFF0h  +
push edi  +
call ds:GetWindowLongW  +
mov ecx [esi+488h] +
shl ecx 1Fh +
sar ecx 1Fh +
push ecx  +
and eax 50000h +
push eax  +
push edi  +
mov ecx esi +
mov [esi+480h] eax +
call sub_102372E  +
mov eax [esi+1Ch] +
mov ecx [esi+24h] +
mov edi ds:ShowWindow +
xor ebx ebx +
inc ebx  +
push ebx  +
mov [eax+44h] ecx +
push dword ptr [esi+24h]  +
call edi  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
mov eax [ebp+10h] +
mov [eax+86F4h] ebx +
jmp loc_1025DBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025D50  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025D50  +
push offset dword_100373C  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [ebp+8] 80004005h +
jmp loc_1025DBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025DB3  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025DB3  +
push offset dword_100373C  +
push 25h  +
jmp loc_1025DA8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025D50  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025D50  +
push offset dword_100373C  +
push 22h  +
jmp loc_1025D45  +
***
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1025DB3  +
test byte ptr [eax+1Ch] 4 +
jz loc_1025DB3  +
push offset dword_100373C  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [ebp+8] 8007000Eh +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov dword ptr [ecx] offset off_1003BCC +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+Msg] +
sub esp 10h +
sub eax 5 +
jz loc_1025E88  +
dec eax  +
dec eax  +
jz loc_1025E67  +
sub eax 0Eh +
jz loc_1025E37  +
sub eax 7 +
jz loc_1025E19  +
sub eax 2F3h +
jz loc_1025E37  +
dec eax  +
dec eax  +
jz loc_1025E37  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
call ds:DefWindowProcW  +
jmp locret_1025EEC  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+28h] 0 +
jz loc_1025EEA  +
mov eax [eax+28h] +
push [ebp+wParam]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_1025EEA  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+28h] 0 +
jz loc_1025E5F  +
mov eax [eax+28h] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+arg_0]  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
jmp locret_1025EEC  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+28h] 0 +
jz loc_1025EEA  +
mov eax [eax+28h] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push [ebp+arg_0]  +
call ds:SetFocus  +
jmp loc_1025EEA  +
mov eax [ebp+lParam] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
movzx edi ax +
shr eax 10h +
mov ebx eax +
xor eax eax +
mov [ebp+var_4] ebx +
mov [ebp+var_8] edi +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
cmp [esi+2Ch] eax +
jz loc_1025EBA  +
mov eax [esi+2Ch] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp dword ptr [esi+28h] 0 +
jz loc_1025EE7  +
mov esi [esi+28h] +
mov eax [esi] +
lea ecx [ebp+arg_0] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
movzx eax bx +
movzx ecx di +
shl eax 10h +
or eax ecx +
push eax  +
push [ebp+wParam]  +
push 5  +
push [ebp+arg_0]  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+30h] ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1003BCC +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov dword ptr [eax+4] 1 +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
mov [eax+10h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_1025FAA  +
and dword ptr [eax] 0 +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C344 +
xor edx edx +
cmps   +
jnz loc_1025F5F  +
mov ecx [ebp+8] +
jmp loc_1025F8F  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C3C0 +
xor edx edx +
cmps   +
jnz loc_1025F78  +
mov ecx [ebp+8] +
mov ecx [ecx+1Ch] +
jmp loc_1025F8F  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C3B0 +
xor edx edx +
cmps   +
jnz loc_1025F91  +
mov ecx [ebp+8] +
mov ecx [ecx+20h] +
mov [eax] ecx +
mov eax [eax] +
pop edi  +
pop esi  +
test eax eax +
jz loc_1025FA3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1025FAF  +
mov eax 80004002h +
jmp loc_1025FAF  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+4] +
push esi  +
call ds:InterlockedDecrement  +
test eax eax +
jz loc_1025FD4  +
mov eax [esi] +
jmp loc_1025FE3  +
test edi edi +
jz loc_1025FE1  +
push 1  +
mov ecx edi +
call sub_101E306  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_1026012  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_10260DA  +
push offset aMstscax_dll  +
call ds:LoadLibraryW  +
mov [esi+14h] eax +
cmp eax ebx +
jnz loc_1026050  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1026048  +
test byte ptr [eax+1Ch] 4 +
jz loc_1026048  +
push offset dword_1003BBC  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
or eax 0FFFFFFFFh +
jmp loc_10260DA  +
push edi  +
mov edi ds:GetProcAddress +
push offset aDllgettscctlve  +
push eax  +
call edi  +
cmp eax ebx +
jz loc_10260D6  +
call eax  +
cmp eax 6011DB1h +
jz loc_1026070  +
push 0FFFFFFFEh  +
jmp loc_10260D8  +
push offset aDllgetclassobj  +
push dword ptr [esi+14h]  +
call edi  +
cmp eax ebx +
jz loc_10260D6  +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_100C354  +
push offset dword_100C7B8  +
call eax  +
test eax eax +
jl loc_10260D6  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edi [esi+0Ch] +
push edi  +
push offset dword_100C6D8  +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
jge loc_10260E0  +
call dword ptr [ecx+8]  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10260D6  +
test byte ptr [eax+1Ch] 4 +
jz loc_10260D6  +
push offset dword_1003BBC  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 0FFFFFFFDh  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
call dword ptr [ecx+8]  +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push offset dword_100C3A0  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10260D6  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_100C788  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
mov eax [ebp+var_C] +
mov ecx [eax] +
push eax  +
jge loc_1026118  +
call dword ptr [ecx+8]  +
jmp loc_10260D6  +
call dword ptr [ecx+8]  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_1026133  +
push dword ptr [esi+30h]  +
mov ecx eax +
call sub_1029B41  +
jmp loc_1026135  +
xor eax eax +
mov [esi+18h] eax +
cmp eax ebx +
jnz loc_1026144  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
jmp loc_1026113  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [esi+10h] +
push edx  +
push dword ptr [esi+18h]  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
jge loc_1026178  +
call dword ptr [ecx+8]  +
mov eax [esi+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+18h] ebx +
jmp loc_10260D6  +
call dword ptr [ecx+8]  +
mov eax [edi] +
mov ecx [eax] +
lea ebx [esi+24h] +
push ebx  +
push offset dword_100C3D0  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10260D6  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+28h] +
push edx  +
push offset dword_100C3E0  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10260D6  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+2Ch] +
push edx  +
push offset dword_100C3F0  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10260D6  +
mov ebx [ebx] +
push dword ptr [esi+1Ch]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_10260D6  +
mov eax [edi] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov edi [edi] +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
xor eax eax +
inc eax  +
jmp loc_10260D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+18h] edi +
jz loc_102628F  +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_1026283  +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C3A0  +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1026283  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_100C788  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_102627A  +
mov eax [ebp+var_4] +
push dword ptr [esi+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jge loc_1026271  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1026271  +
test byte ptr [eax+1Ch] 4 +
jz loc_1026271  +
push offset dword_1003BBC  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+18h] edi +
mov eax [esi+28h] +
cmp eax edi +
jz loc_102629C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+24h] +
cmp eax edi +
jz loc_10262A9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_10262B6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+20h] +
cmp eax edi +
jz loc_10262C3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_10262D0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+2Ch] +
cmp eax edi +
jz loc_10262DD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+8] +
cmp eax edi +
jz loc_10262F8  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_10262F8  +
push dword ptr [esi+8]  +
call ds:DestroyWindow  +
mov eax [esi+14h] +
mov [esi+18h] edi +
mov [esi+20h] edi +
mov [esi+1Ch] edi +
mov [esi+0Ch] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
cmp eax edi +
jz loc_102631E  +
push eax  +
call ds:FreeLibrary  +
mov [esi+14h] edi +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_1026354  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_1025DD5  +
pop ebp  +
retn 10h  +
***
pop ebp  +
jmp ds:DefWindowProcW  +
***
mov edi edi +
push esi  +
push 0Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_102637B  +
push esi  +
mov ecx eax +
call sub_1026676  +
jmp loc_102637D  +
xor eax eax +
mov [esi+1Ch] eax +
test eax eax +
jnz loc_102638F  +
mov ecx esi +
call sub_10261F2  +
xor eax eax +
pop esi  +
retn   +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10263AB  +
push esi  +
mov ecx eax +
call sub_1026775  +
jmp loc_10263AD  +
xor eax eax +
mov [esi+20h] eax +
test eax eax +
jz loc_1026384  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:GetLastError  +
mov eax [ebp+hInstance] +
xor edi edi +
push 7F00h  +
push edi  +
mov [ebp+var_40.cbSize] 30h +
mov [ebp+var_40.style] edi +
mov [ebp+var_40.lpfnWndProc] offset loc_102632A +
mov [ebp+var_40.cbClsExtra] edi +
mov [ebp+var_40.cbWndExtra] edi +
mov [ebp+var_40.hInstance] eax +
mov [ebp+var_40.hIcon] edi +
call ds:LoadCursorW  +
push 5  +
mov [ebp+var_40.hCursor] eax +
call ds:GetStockObject  +
mov [ebp+var_40.hbrBackground] eax +
lea eax [ebp+var_40] +
mov ebx offset aTscshellaxhost +
push eax  +
mov [ebp+var_40.lpszMenuName] edi +
mov [ebp+var_40.lpszClassName] ebx +
mov [ebp+var_40.hIconSm] edi +
call ds:RegisterClassExW  +
xor ecx ecx +
cmp cx ax +
jnz loc_102647C  +
call ds:GetLastError  +
cmp eax 582h +
jz loc_102647C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102651E  +
test byte ptr [eax+1Ch] 4 +
jz loc_102651E  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_1003BBC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_102651E  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWndParent]  +
call ds:GetClientRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push esi  +
push [ebp+hInstance]  +
push edi  +
push [ebp+hWndParent]  +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
push edi  +
push edi  +
push 46000000h  +
push edi  +
push ebx  +
push edi  +
call ds:CreateWindowExW  +
mov [esi+8] eax +
cmp eax edi +
jz loc_10264FA  +
push esi  +
push 0FFFFFFEBh  +
push eax  +
call ds:SetWindowLongW  +
mov eax [esi+20h] +
cmp eax edi +
jz loc_10264D0  +
push dword ptr [esi+8]  +
push eax  +
call sub_1026617  +
mov eax [esi+24h] +
mov ecx [eax] +
lea edx [ebp+Rect] +
push edx  +
push dword ptr [esi+8]  +
push edi  +
push dword ptr [esi+1Ch]  +
push edi  +
push edi  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_102651E  +
push 1  +
push dword ptr [esi+8]  +
call ds:ShowWindow  +
xor eax eax +
inc eax  +
jmp loc_1026520  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102651E  +
test byte ptr [eax+1Ch] 4 +
jz loc_102651E  +
push offset dword_1003BBC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov dword ptr [ecx] offset off_1003C4C +
mov ecx [ecx+8] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102652C  +
test [ebp+arg_0] 1 +
jz loc_1026572  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 8  +
***
mov eax 80004001h +
retn 4  +
***
mov dword ptr [ecx] offset off_1003C70 +
mov ecx [ecx+8] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10265BD  +
test [ebp+arg_0] 1 +
jz loc_102660B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
retn 4  +
***
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1003C4C +
mov [esi+8] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jnz loc_10266B9  +
push 1  +
call sub_1026558  +
xor eax eax +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jnz loc_10266DB  +
push 1  +
call sub_10265F1  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub esp 10h +
push ebx  +
xor ebx ebx +
mov [eax] ebx +
mov eax [ebp+10h] +
mov [eax] ebx +
lea eax [ebp-10h] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+0Ch]  +
call ds:GetClientRect  +
test eax eax +
jz loc_1026739  +
push esi  +
mov esi [ebp-8] +
sub esi [ebp-10h] +
push edi  +
mov edi [ebp-4] +
sub edi [ebp-0Ch] +
push edi  +
push esi  +
push ebx  +
push ebx  +
push dword ptr [ebp+18h]  +
mov ebx ds:SetRect +
call ebx  +
push edi  +
push esi  +
push 0  +
push 0  +
push dword ptr [ebp+14h]  +
call ebx  +
pop edi  +
pop esi  +
jmp loc_1026769  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1026769  +
test byte ptr [eax+1Ch] 4 +
jz loc_1026769  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset loc_1003C3C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1003C70 +
mov [esi+8] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
and dword ptr [esi+0Ch] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10267B7  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_10267BC  +
mov ecx offset aNull_1 +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
push [ebp+arg_0]  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
call sub_10267A3  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push 38Fh  +
push 0  +
call sub_101DD3B  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:MultiByteToWideChar +
push edi  +
xor edi edi +
xor ebx ebx +
cmp [ebp+lpMultiByteStr] edi +
jz loc_102683C  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call esi  +
mov ebx eax +
lea eax [ebx+ebx+2] +
push eax  +
call ds:CoTaskMemAlloc  +
jmp loc_102683E  +
xor eax eax +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax edi +
jz loc_1026856  +
push ebx  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call esi  +
xor eax eax +
jmp loc_102685B  +
mov eax 8007000Eh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
xor edx edx +
sub ecx edx +
jz loc_102689F  +
dec ecx  +
jz loc_102688E  +
dec ecx  +
jz loc_1026889  +
mov eax [ebp+arg_8] +
mov [eax] edx +
mov eax 80004005h +
jmp loc_10268BC  +
add eax 4 +
jmp loc_1026894  +
mov eax [eax+4] +
add eax [ebp+arg_4] +
push [ebp+arg_8]  +
push eax  +
call sub_102680B  +
jmp loc_10268BC  +
mov ecx [ebp+arg_8] +
push esi  +
mov esi [eax+4] +
mov [ecx] esi +
mov [eax+4] edx +
mov eax [ecx] +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+850h] +
call sub_1034881  +
push 410h  +
xor edi edi +
lea eax [esi+440h] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
mov [esi+89Ch] edi +
mov [esi+0AA8h] edi +
mov [esi+0AACh] edi +
mov [esi+0AB0h] edi +
mov [esi+0AB4h] edi +
mov [esi+0ABCh] edi +
mov [esi+0AB8h] edi +
mov [esi+8A0h] ax +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
add ecx 850h +
jmp nullsub_3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
push edi  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102694A  +
mov ebx ds:memmove +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+2] +
jmp loc_1026971  +
dec edi  +
dec edi  +
push edi  +
lea eax [esi+2] +
push eax  +
push esi  +
call ebx  +
add esp 0Ch +
push 20h  +
pop eax  +
cmp ax [esi] +
jz loc_1026964  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102697E  +
sub eax edx +
sar eax 1 +
jz loc_10269A2  +
push 20h  +
pop ecx  +
cmp cx [esi+eax*2-2] +
jnz loc_10269A2  +
push 0  +
dec eax  +
pop ecx  +
mov [esi+eax*2] cx +
jnz loc_102698E  +
cmp word ptr [esi] 5Ch +
jnz loc_10269D1  +
cmp word ptr [esi+2] 5Ch +
jnz loc_10269D1  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10269B4  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax-2] +
push eax  +
lea eax [esi+4] +
push eax  +
push esi  +
call ebx  +
add esp 0Ch +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
inc eax  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+lpFileName] esi +
jz loc_1026A1E  +
push esi  +
push 80h  +
push 3  +
push esi  +
push 1  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_1026A1E  +
push eax  +
inc esi  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+FilePart] esi +
cmp [ebp+lpFileName] esi +
jz loc_1026A5C  +
cmp [ebp+lpPath] esi +
jz loc_1026A5C  +
lea eax [ebp+FilePart] +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+nBufferLength]  +
push esi  +
push [ebp+lpFileName]  +
push [ebp+lpPath]  +
call ds:SearchPathW  +
test eax eax +
jz loc_1026A5C  +
inc esi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+lpFileName] esi +
jz loc_1026A9B  +
push esi  +
push 2000000h  +
push 3  +
push esi  +
push 1  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_1026A9B  +
push eax  +
inc esi  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
mov ebx ds:FreeLibrary +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0AACh] +
mov eax [edi] +
test eax eax +
jz loc_1026ACD  +
push eax  +
call ebx  +
and dword ptr [esi+0AB0h] 0 +
and dword ptr [edi] 0 +
lea edi [esi+0AB4h] +
mov eax [edi] +
test eax eax +
jz loc_1026AE6  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
and dword ptr [esi+0ABCh] 0 +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 8  +
pop edi  +
push 0  +
call ds:GetDC  +
mov esi eax +
test esi esi +
jz loc_1026B41  +
push 0Ch  +
push esi  +
call ds:GetDeviceCaps  +
mov edi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1026B38  +
test byte ptr [eax+1Ch] 2 +
jz loc_1026B38  +
push edi  +
push esi  +
push (offset loc_1003CDB+1)  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
push esi  +
push 0  +
call ds:ReleaseDC  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
push 68h  +
lea eax [ebp-6Ch] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-6Ch] +
push eax  +
push edi  +
mov dword ptr [ebp-6Ch] 68h +
call sub_101E0B3  +
test eax eax +
jz loc_1026B9B  +
mov eax [ebp-60h] +
mov ecx [ebp-5Ch] +
sub eax [ebp-68h] +
sub ecx [ebp-64h] +
imul eax ecx +
add [esi] eax +
mov ecx [ebp-4] +
xor eax eax +
pop edi  +
xor ecx ebp +
inc eax  +
pop esi  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
push 4Eh  +
call sub_101DF3B  +
push 4Fh  +
mov ebx eax +
call sub_101DF3B  +
push 4Ch  +
mov esi eax +
call sub_101DF3B  +
push 4Dh  +
mov edi eax +
call sub_101DF3B  +
mov ecx 1000h +
xor edx edx +
cmp [ebp+arg_0] ecx +
jnz loc_1026BF9  +
cmp ebx ecx +
jl loc_1026BF9  +
mov [ebp+var_4] 1 +
jmp loc_1026BFC  +
and [ebp+var_4] edx +
mov ecx 800h +
cmp [ebp+arg_4] ecx +
jnz loc_1026C0F  +
cmp esi ecx +
jl loc_1026C0F  +
xor ecx ecx +
inc ecx  +
jmp loc_1026C11  +
xor ecx ecx +
cmp [ebp+arg_0] ebx +
jz loc_1026C1B  +
cmp [ebp+var_4] edx +
jz loc_1026C58  +
cmp [ebp+arg_4] esi +
jz loc_1026C24  +
test ecx ecx +
jz loc_1026C58  +
and [ebp+arg_0] edx +
mov [ebp+rcSrc2.top] eax +
add eax esi +
mov [ebp+rcSrc2.bottom] eax +
lea eax [ebp+arg_0] +
push eax  +
push offset loc_1026B4B  +
lea eax [ebp+rcSrc2] +
mov [ebp+rcSrc2.left] edi +
push eax  +
add edi ebx +
push 0  +
mov [ebp+rcSrc2.right] edi +
call sub_101E17E  +
imul esi ebx +
sub esi [ebp+arg_0] +
neg esi  +
sbb esi esi +
inc esi  +
mov edx esi +
pop edi  +
pop esi  +
mov eax edx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
push 68h  +
lea eax [ebp-6Ch] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-6Ch] +
push eax  +
push edi  +
mov dword ptr [ebp-6Ch] 68h +
call sub_101E0B3  +
test eax eax +
jz loc_1026CB9  +
test byte ptr [ebp-48h] 1 +
jnz loc_1026CB9  +
xor eax eax +
cmp [ebp-68h] eax +
jl loc_1026CB7  +
cmp [ebp-64h] eax +
jge loc_1026CB9  +
mov [esi] eax +
mov ecx [ebp-4] +
mov eax [esi] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
push offset loc_1026C66  +
push 0  +
push 0  +
mov [ebp+var_4] 1 +
call sub_101E17E  +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
push 9  +
pop ecx  +
push 2  +
push [ebp+hWnd]  +
xor eax eax +
mov [ebp+var_28] 28h +
lea edi [ebp+var_24] +
stos   +
xor esi esi +
call sub_101E041  +
test eax eax +
jz loc_1026D41  +
lea ecx [ebp+var_28] +
push ecx  +
push eax  +
call sub_101E0B3  +
test eax eax +
jz loc_1026D41  +
lea eax [ebp+rcSrc] +
push eax  +
push [ebp+lprcDst]  +
call ds:CopyRect  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
mov [ebp+var_28] 28h +
lea edi [ebp+rcSrc] +
push 50h  +
stos   +
call sub_101DF3B  +
cmp eax 1 +
pop edi  +
jle loc_1026DA0  +
push 2  +
push [ebp+arg_0]  +
call sub_101DFEB  +
test eax eax +
jz loc_1026DA0  +
lea ecx [ebp+var_28] +
push ecx  +
push eax  +
call sub_101E0B3  +
test eax eax +
jz loc_1026DA0  +
lea eax [ebp+rcSrc] +
push eax  +
push [ebp+lprc]  +
call ds:CopyRect  +
jmp locret_1026DBD  +
push 1  +
call sub_101DF3B  +
push eax  +
push 0  +
call sub_101DF3B  +
push eax  +
push 0  +
push 0  +
push [ebp+lprc]  +
call ds:SetRect  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+Arguments]  +
lea eax [ebp+Arguments] +
push 0  +
push eax  +
push 0  +
push 0  +
push [ebp+lpSource]  +
push 500h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_1026DED  +
and [ebp+Arguments] eax +
mov eax [ebp+Arguments] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_4] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+lpSource]  +
call sub_1026DC6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 2  +
push 4  +
push 0  +
push 1  +
push 0C0000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_1026E46  +
push eax  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
jmp loc_1026E7B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1026E79  +
test byte ptr [eax+1Ch] 4 +
jz loc_1026E79  +
call ds:GetLastError  +
push eax  +
push [ebp+lpFileName]  +
mov eax lpReserved +
push (offset loc_1003CDB+1)  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wcsstr +
push offset word_1003CF0  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1026EB0  +
push offset word_1003CEC  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1026EB3  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
test eax eax +
jz loc_1026EDF  +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
call sub_105B179  +
test eax eax +
jz loc_1026EDF  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_1026FEB  +
cmp [ebp+hWnd] edi +
jz loc_1026FEB  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push 0FFh  +
push 141h  +
push [ebp+hWnd]  +
call esi  +
xor eax eax +
inc eax  +
cmp eax 0FFFFFFFFh +
jz loc_1026F3A  +
push edi  +
push edi  +
push 144h  +
push [ebp+hWnd]  +
call esi  +
cmp eax edi +
jnz loc_1026F25  +
add ebx 70D8h +
mov [ebp+var_4] 0Ah +
push 100h  +
push offset word_1002174  +
push ebx  +
call ds:__imp_wcsncmp  +
add esp 0Ch +
test eax eax +
jz loc_1026FA5  +
or [ebp+var_24] 0FFFFFFFFh +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 40Bh  +
push [ebp+hWnd]  +
mov [ebp+lParam] 1 +
mov [ebp+var_20] ebx +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_1026FA5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1026FA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_1026FA5  +
push (offset loc_1003CDB+1)  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
add ebx 200h +
dec [ebp+var_4]  +
jnz loc_1026F47  +
mov ebx [ebp+hWnd] +
push edi  +
push edi  +
push 146h  +
push ebx  +
call esi  +
cmp eax 1 +
jz loc_1026FCC  +
push edi  +
push edi  +
push 14Eh  +
push ebx  +
call esi  +
push 1  +
push edi  +
push 40Eh  +
push ebx  +
call esi  +
push edi  +
push edi  +
push 407h  +
push ebx  +
call esi  +
push eax  +
push [ebp+arg_0]  +
call sub_1039165  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_102700E  +
cmp dword ptr [ebp+arg_8] 0 +
jbe loc_102700E  +
xor eax eax +
mov [esi] ax +
cmp [ebp+arg_0] 0 +
jz loc_1027065  +
test esi esi +
jz loc_1027065  +
cmp dword ptr [ebp+arg_8] 0 +
jz loc_1027065  +
push dword ptr [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call ds:GetFileTitleW  +
test ax ax +
jz loc_102706C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1027060  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027060  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push (offset loc_1003CDB+1)  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
mov [esi] ax +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1027071  +
sub eax edx +
sar eax 1 +
lea eax [esi+eax*2-2] +
jmp loc_1027092  +
cmp word ptr [eax] 2Eh +
jnz loc_1027090  +
xor ecx ecx +
mov [eax] cx +
dec eax  +
dec eax  +
cmp eax esi +
jnb loc_1027085  +
xor eax eax +
inc eax  +
jmp loc_1027067  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A1Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov [ebp+var_A14] eax +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_A1C] eax +
mov eax [esi+0C230h] +
push edi  +
mov edi [esi+0C234h] +
mov [ebp+var_A18] eax +
xor eax eax +
push 7FEh  +
push eax  +
mov [ebp+Buffer] ax +
lea eax [ebp-0A0Ah] +
push eax  +
call memset  +
and [ebp+var_A10] 0 +
add esp 0Ch +
cmp dword ptr [esi+135Ch] 0 +
push 400h  +
lea eax [ebp+Buffer] +
mov ebx 36C3h +
push eax  +
jz loc_1027125  +
push 36B3h  +
jmp loc_102712A  +
push 3ECh  +
push [ebp+var_A14]  +
call sub_105DD36  +
cmp [ebp+arg_C] 0 +
jz loc_1027152  +
mov ebx [ebp+arg_C] +
cmp ebx 36C5h +
jnz loc_10271AE  +
mov [ebp+var_A10] 5 +
jmp loc_10271AE  +
test edi edi +
jl loc_10271AE  +
xor eax eax +
inc eax  +
cmp edi eax +
jle loc_10271A3  +
push 3  +
pop eax  +
cmp edi eax +
jle loc_1027192  +
cmp edi 5 +
jnz loc_10271AE  +
test [ebp+var_A18] 200000h +
jnz loc_10271A8  +
test [ebp+var_A18] 1000h +
jz loc_10271AE  +
mov ebx 36C2h +
mov [ebp+var_A10] 4 +
jmp loc_10271AE  +
mov ebx 36C4h +
mov [ebp+var_A10] 2 +
jmp loc_10271AE  +
mov ebx 36C4h +
mov [ebp+var_A10] eax +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
push [ebp+var_A14]  +
call sub_105DD36  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jz loc_10271FD  +
mov ecx dword_106607C +
test ecx ecx +
jz loc_10271E2  +
push [ebp+var_A10]  +
call sub_105A6D8  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_A1C]  +
call sub_105D992  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpFileName] +
xor ebx ebx +
inc ebx  +
push edi  +
mov [ebp+var_4] ebx +
xor esi esi +
call sub_1026A68  +
test eax eax +
jz loc_1027235  +
mov eax ebx +
jmp loc_1027362  +
test edi edi +
jz loc_102735F  +
push 5Ch  +
pop ebx  +
cmp [edi] bx +
jnz loc_10272A4  +
cmp [edi+2] bx +
jnz loc_10272A4  +
push 2  +
pop esi  +
movzx eax word ptr [edi+esi*2] +
test ax ax +
jz loc_102725D  +
inc esi  +
cmp ax bx +
jnz loc_102724E  +
cmp word ptr [edi+esi*2] 0 +
jnz loc_1027290  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1027289  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027289  +
push edi  +
push (offset loc_1003CDB+1)  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor eax eax +
jmp loc_1027362  +
cmp word ptr [edi+esi*2+2] 24h +
jnz loc_10272C3  +
cmp [edi+esi*2+4] bx +
jnz loc_10272C3  +
add esi 3 +
jmp loc_10272C3  +
movzx eax word ptr [edi+esi*2] +
test ax ax +
jz loc_10272B4  +
inc esi  +
cmp ax 3Ah +
jnz loc_10272A4  +
movzx eax word ptr [edi+esi*2] +
test ax ax +
jz loc_102730E  +
cmp ax bx +
jnz loc_102730E  +
inc esi  +
lea esi [edi+esi*2] +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1027335  +
cmp ax bx +
jnz loc_1027304  +
xor eax eax +
push edi  +
mov [esi] ax +
call sub_1026A68  +
test eax eax +
jnz loc_10272FF  +
push eax  +
push edi  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_10272FF  +
call ds:GetLastError  +
cmp eax 0B7h +
jz loc_10272FF  +
and [ebp+var_4] 0 +
mov eax ebx +
mov [esi] ax +
inc esi  +
inc esi  +
cmp [ebp+var_4] 0 +
jnz loc_10272C6  +
jmp loc_102733B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1027289  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027289  +
push edi  +
push (offset loc_1003CDB+1)  +
push 32h  +
jmp loc_102727E  +
cmp [ebp+var_4] 0 +
jnz loc_102735F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102735F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102735F  +
push (offset loc_1003CDB+1)  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
push 60h  +
pop edi  +
push 0  +
call ds:GetDC  +
mov esi eax +
test esi esi +
jz loc_1027399  +
push 58h  +
push esi  +
call ds:GetDeviceCaps  +
push esi  +
push 0  +
mov edi eax +
call ds:ReleaseDC  +
jmp loc_10273BD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10273BD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10273BD  +
push (offset loc_1003CDB+1)  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+VersionInformation] +
push eax  +
xor esi esi +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_1027412  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_102740D  +
jnz loc_1027442  +
cmp [ebp+VersionInformation.dwMinorVersion] esi +
jnz loc_1027442  +
xor esi esi +
inc esi  +
jmp loc_1027442  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1027442  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027442  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push (offset loc_1003CDB+1)  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0AB8h] 0 +
mov [ebp+var_4] 80004001h +
jnz loc_102756B  +
push ebx  +
push edi  +
lea edi [esi+0AB4h] +
cmp dword ptr [edi] 0 +
mov ebx offset lpReserved +
jnz loc_102752C  +
push offset aUxtheme_dll  +
call ds:LoadLibraryW  +
mov [edi] eax +
test eax eax +
jz loc_10274F5  +
push offset aEnablethemedia  +
push eax  +
call ds:GetProcAddress  +
mov [esi+0ABCh] eax +
test eax eax +
jnz loc_10274D2  +
mov dword ptr [esi+0AB8h] 1 +
mov eax lpReserved +
cmp eax ebx +
jz loc_102752C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102752C  +
push (offset loc_1003CDB+1)  +
push 38h  +
jmp loc_10274E8  +
mov eax lpReserved +
cmp eax ebx +
jz loc_102752C  +
test byte ptr [eax+1Ch] 2 +
jz loc_102752C  +
push (offset loc_1003CDB+1)  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_102752C  +
mov dword ptr [esi+0AB8h] 1 +
mov eax lpReserved +
cmp eax ebx +
jz loc_102752C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102752C  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push (offset loc_1003CDB+1)  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov esi [esi+0ABCh] +
test esi esi +
jz loc_1027569  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_1027569  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1027569  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027569  +
push [ebp+var_4]  +
push (offset loc_1003CDB+1)  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1027591  +
cmp edx ebx +
jbe loc_1027596  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_10275CD  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_10275BA  +
cmp [eax] cx +
jz loc_10275B6  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10275AC  +
cmp esi ecx +
jnz loc_10275C3  +
mov [ebp+arg_4] 80070057h +
jmp loc_10275C7  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_10275CF  +
xor ecx ecx +
test eax eax +
jl loc_10275E3  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1055017  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hInstance] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi 104h +
push edi  +
lea ecx [esi+8A0h] +
push ecx  +
mov ebx 3ECh +
push ebx  +
push eax  +
mov [esi+0AA8h] eax +
call sub_105DD36  +
test eax eax +
jnz loc_1027642  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1027642  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027642  +
push (offset loc_1003CDB+1)  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 100h  +
lea eax [esi+240h] +
push eax  +
push ebx  +
push [ebp+hInstance]  +
call sub_105DD36  +
test eax eax +
jz loc_1027693  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102767F  +
test byte ptr [eax+1Ch] 1 +
jz loc_102767F  +
push (offset loc_1003CDB+1)  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
lea eax [esi+240h] +
push eax  +
push 120h  +
push esi  +
call sub_101BD65  +
jmp loc_10276BC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10276B7  +
test byte ptr [eax+1Ch] 4 +
jz loc_10276B7  +
push (offset loc_1003CDB+1)  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov [esi] ax +
and dword ptr [esi+89Ch] 0 +
push 2  +
push edi  +
lea ebx [esi+440h] +
push ebx  +
mov edi offset word_1002174 +
push edi  +
push offset aIconFile  +
push edi  +
call sub_1051DEC  +
push 2  +
push 0  +
push offset aIconIndex  +
push edi  +
call sub_10509E3  +
push eax  +
push ebx  +
push [ebp+hInstance]  +
mov [esi+648h] eax +
call ds:ExtractIconW  +
mov [esi+89Ch] eax +
test eax eax +
jnz loc_1027719  +
push 65h  +
push [ebp+hInstance]  +
call ds:LoadIconW  +
mov [esi+89Ch] eax +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_102773D  +
xor eax eax +
jmp loc_102779F  +
mov eax [esi] +
push ebx  +
lea ecx [ebp+var_4] +
push ecx  +
push esi  +
call dword ptr [eax+6Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_1027797  +
mov eax [ebp+var_4] +
lea ecx [ebp+arg_0] +
push ecx  +
mov [edi+64Ch] eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+70h]  +
mov ebx eax +
test ebx ebx +
jl loc_1027797  +
cmp [ebp+arg_0] 0 +
jz loc_102778E  +
push [ebp+arg_0]  +
add edi 650h +
push 100h  +
push edi  +
call sub_101BD65  +
push [ebp+arg_0]  +
mov ebx eax +
call ds:SysFreeString  +
jmp loc_1027797  +
xor eax eax +
mov [edi+650h] ax +
xor eax eax +
test ebx ebx +
setnl al  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+hMem] +
xor ecx ecx +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
cmp ebx ecx +
jz loc_10277CB  +
cmp [ebp+nBufferLength] ecx +
jbe loc_10277CB  +
xor eax eax +
mov [ebx] ax +
mov eax [ebp+nBufferLength] +
cmp eax 104h +
jb loc_1027844  +
push 2  +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
mov edi offset aRemotedesktopf +
push edi  +
mov esi offset aDefault +
push esi  +
mov [ebp+hMem] ecx +
call sub_1050980  +
cmp [ebp+hMem] 0 +
jz loc_10278C6  +
push [ebp+hMem]  +
mov edi [ebp+nBufferLength] +
lea eax [edi-2] +
push eax  +
push ebx  +
call sub_101BD65  +
push [ebp+hMem]  +
mov esi eax +
call ds:LocalFree  +
test esi esi +
jge loc_102784D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1027844  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027844  +
push esi  +
push (offset loc_1003CDB+1)  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1027852  +
sub eax edx +
sar eax 1 +
cmp word ptr [ebx+eax*2-2] 5Ch +
jz loc_102789C  +
push offset word_1003CEC  +
push edi  +
push ebx  +
call sub_1027578  +
test eax eax +
jge loc_102789C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1027844  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1027844  +
push eax  +
push (offset loc_1003CDB+1)  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_102783F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10278C1  +
test byte ptr [eax+1Ch] 2 +
jz loc_10278C1  +
push ebx  +
push (offset loc_1003CDB+1)  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor eax eax +
inc eax  +
jmp loc_1027846  +
mov eax [ebp+nBufferLength] +
push 2  +
add eax 0FFFFFFFEh +
push eax  +
push ebx  +
push offset word_1002174  +
push edi  +
push esi  +
call sub_1051DEC  +
xor esi esi +
cmp [ebx] si +
jz loc_1027960  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_10278E8  +
sub eax edx +
sar eax 1 +
cmp word ptr [ebx+eax*2-2] 5Ch +
jz loc_1027939  +
push offset word_1003CEC  +
push [ebp+nBufferLength]  +
push ebx  +
call sub_1027578  +
cmp eax esi +
jge loc_1027939  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1027844  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1027844  +
push eax  +
push (offset loc_1003CDB+1)  +
push 12h  +
jmp loc_1027894  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10278C1  +
test byte ptr [eax+1Ch] 2 +
jz loc_10278C1  +
push ebx  +
push (offset loc_1003CDB+1)  +
push 13h  +
jmp loc_10278B6  +
lea eax [ebp+pidl] +
push eax  +
push 5  +
push esi  +
mov [ebp+pidl] esi +
call ds:SHGetSpecialFolderLocation  +
mov esi (offset loc_1003CDB+1) +
mov edi offset lpReserved +
test eax eax +
jl loc_10279B6  +
cmp [ebp+pidl] 0 +
jz loc_10279B6  +
push ebx  +
push [ebp+pidl]  +
call ds:SHGetPathFromIDListW  +
mov [ebp+var_C] eax +
lea eax [ebp+ppMalloc] +
push eax  +
call ds:SHGetMalloc  +
test eax eax +
jl loc_10279D5  +
mov eax [ebp+ppMalloc] +
push [ebp+pidl]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp+ppMalloc] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10279D5  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_10279FE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10279E1  +
push eax  +
push esi  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
cmp [ebp+var_C] 0 +
jnz loc_1027A37  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_10279FE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10279FE  +
push offset aRootFolderInCu  +
push esi  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1017CE7  +
push ebx  +
push [ebp+nBufferLength]  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jnz loc_1027A37  +
mov eax lpReserved +
cmp eax edi +
jz loc_1027844  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027844  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push esi  +
push 16h  +
jmp loc_1027839  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1027A3C  +
sub eax edx +
sar eax 1 +
cmp eax 1 +
jl loc_10278C1  +
cmp word ptr [ebx+eax*2-2] 5Ch +
jz loc_10278C1  +
push offset word_1003CEC  +
push [ebp+nBufferLength]  +
push ebx  +
call sub_1027578  +
test eax eax +
jge loc_10278C1  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1027844  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1027844  +
push eax  +
push esi  +
push 17h  +
jmp loc_1027894  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1027578  +
test eax eax +
jl loc_1027AC2  +
push offset asc_1003DD4  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1027578  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0AA4h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea ecx [ebp+var_A8C] +
mov [ebp+var_A9C] ebx +
call sub_1034881  +
xor edi edi +
cmp ebx edi +
jz loc_1027B0A  +
cmp [ebp+arg_8] edi +
jbe loc_1027B0A  +
xor eax eax +
mov [ebx] ax +
push offset aAddins  +
push esi  +
push offset aSS_0  +
mov ebx 109h +
lea eax [ebp+var_218] +
push ebx  +
push eax  +
call sub_101BDD4  +
add esp 14h +
cmp eax edi +
jge loc_1027B73  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1027B55  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1027B55  +
push eax  +
push (offset loc_1003CDB+1)  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
lea ecx [ebp+var_A8C] +
call nullsub_3  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
lea eax [ebp+var_A94] +
push eax  +
lea eax [ebp+var_42C] +
push eax  +
push edi  +
lea eax [ebp+var_218] +
push eax  +
lea ecx [ebp+var_A8C] +
mov [ebp+dwIndex] edi +
mov [ebp+var_A94] ebx +
call sub_1050A39  +
mov esi offset lpReserved +
mov edi (offset loc_1003CDB+1) +
jmp loc_1027DA4  +
mov eax lpReserved +
cmp eax esi +
jz loc_1027BD3  +
test byte ptr [eax+1Ch] 2 +
jz loc_1027BD3  +
lea ecx [ebp+var_42C] +
push ecx  +
push edi  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
lea eax [ebp+var_42C] +
push eax  +
lea eax [ebp+var_218] +
push eax  +
push offset aSS_0  +
lea eax [ebp+var_640] +
push ebx  +
push eax  +
call sub_101BDD4  +
add esp 14h +
test eax eax +
jl loc_1027DD4  +
mov eax lpReserved +
cmp eax esi +
jz loc_1027C22  +
test byte ptr [eax+1Ch] 2 +
jz loc_1027C22  +
lea ecx [ebp+var_640] +
push ecx  +
push edi  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
and [ebp+hMem] 0 +
and [ebp+var_AA4] 0 +
push 2  +
lea eax [ebp+var_AA4] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
push offset aName  +
lea eax [ebp+var_640] +
push eax  +
call sub_1050980  +
test eax eax +
jz loc_1027CED  +
mov eax lpReserved +
cmp eax esi +
jz loc_1027C7C  +
test byte ptr [eax+1Ch] 2 +
jz loc_1027C7C  +
push [ebp+hMem]  +
push edi  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax [ebp+hMem] +
test eax eax +
jz loc_1027D72  +
cmp word ptr [eax] 0 +
jz loc_1027D72  +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_A9C]  +
call sub_1027A9B  +
push [ebp+hMem]  +
mov [ebp+var_AA0] eax +
call ds:LocalFree  +
cmp [ebp+var_AA0] 0 +
jge loc_1027D72  +
mov eax lpReserved +
cmp eax esi +
jz loc_1027B55  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027B55  +
push [ebp+var_AA0]  +
push edi  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_1027B50  +
push 400h  +
lea eax [ebp+var_A40] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
push 200h  +
lea eax [ebp+var_A40] +
push eax  +
push offset word_1002174  +
push offset aName  +
lea eax [ebp+var_640] +
push eax  +
call sub_1051DEC  +
mov eax lpReserved +
cmp eax esi +
jz loc_1027D4B  +
test byte ptr [eax+1Ch] 2 +
jz loc_1027D4B  +
lea ecx [ebp+var_A40] +
push ecx  +
push edi  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
cmp word ptr [ebp+var_A40] 0 +
jz loc_1027D72  +
lea eax [ebp+var_A40] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_A9C]  +
call sub_1027A9B  +
test eax eax +
jl loc_1027DF5  +
inc [ebp+dwIndex]  +
lea eax [ebp+var_A94] +
push eax  +
lea eax [ebp+var_42C] +
push eax  +
push [ebp+dwIndex]  +
lea eax [ebp+var_218] +
push eax  +
lea ecx [ebp+var_A8C] +
mov [ebp+var_A94] ebx +
call sub_1050A39  +
test eax eax +
jnz loc_1027BAF  +
mov eax lpReserved +
cmp eax esi +
jz loc_1027DCF  +
test byte ptr [eax+1Ch] 2 +
jz loc_1027DCF  +
push [ebp+var_A9C]  +
push edi  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor esi esi +
inc esi  +
jmp loc_1027E16  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_1027B55  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1027B55  +
push eax  +
push edi  +
push 1Ah  +
jmp loc_1027B4A  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_1027E14  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1027E14  +
push eax  +
push edi  +
push 1Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
xor esi esi +
lea ecx [ebp+var_A8C] +
call nullsub_3  +
mov eax esi +
jmp loc_1027B62  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push eax  +
push offset SubKey  +
push offset aSS  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_101BDD4  +
add esp 14h +
test eax eax +
jge loc_1027E91  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1027EF6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1027EF6  +
push (offset loc_1003CDB+1)  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1027EF6  +
push esi  +
mov esi ds:RegOpenKeyExW +
push edi  +
lea eax [ebp+hKey] +
push eax  +
mov edi 20019h +
push edi  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
push 80000002h  +
call esi  +
test eax eax +
jnz loc_1027EC1  +
cmp [ebp+hKey] ebx +
jnz loc_1027EE5  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push 0  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call esi  +
test eax eax +
jnz loc_1027EF4  +
cmp [ebp+hKey] ebx +
jz loc_1027EF4  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor ebx ebx +
inc ebx  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
push ebx  +
mov ebx [ebp+pv] +
xor eax eax +
push esi  +
push edi  +
mov [ebp+ppshf] eax +
mov [ebp+ppidl] eax +
mov [ebp+var_C] eax +
cmp ebx eax +
jz loc_1028170  +
cmp [ebp+arg_4] eax +
jbe loc_1027F3D  +
xor ecx ecx +
cmp [ebp+arg_4] eax +
mov [ebx] cx +
jz loc_1028170  +
xor eax eax +
mov [ebx] ax +
lea eax [ebp+ppshf] +
push eax  +
call ds:SHGetDesktopFolder  +
mov edi offset lpReserved +
mov esi (offset loc_1003CDB+1) +
test eax eax +
jl loc_102813B  +
mov eax [ebp+ppshf] +
test eax eax +
jz loc_1028152  +
mov ecx [eax] +
push 0  +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_10] +
push edx  +
push offset a450d8fbaAd2511  +
push 0  +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_102804E  +
mov eax [ebp+ppshf] +
mov ecx [eax] +
lea edx [ebp+var_118] +
push edx  +
push 1  +
push [ebp+var_C]  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_1028038  +
lea eax [ebp+pv] +
push eax  +
push [ebp+ppidl]  +
lea eax [ebp+var_118] +
push eax  +
call sub_1026867  +
test eax eax +
jl loc_102801A  +
push [ebp+pv]  +
push [ebp+arg_4]  +
push ebx  +
call sub_101BD65  +
test eax eax +
jge loc_1028000  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1028141  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028141  +
push eax  +
push esi  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_102813B  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+ppshf] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
inc eax  +
jmp loc_1028172  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1028141  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028141  +
push eax  +
push esi  +
push 24h  +
jmp loc_1027FF0  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_102806D  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102806D  +
push eax  +
push esi  +
push 25h  +
jmp loc_1028062  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_102806D  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102806D  +
push eax  +
push esi  +
push 26h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
lea eax [ebp+ppidl] +
push eax  +
push 5  +
push 0  +
call ds:SHGetSpecialFolderLocation  +
test eax eax +
jl loc_102811C  +
cmp [ebp+ppidl] 0 +
jz loc_102811C  +
mov eax [ebp+ppshf] +
mov ecx [eax] +
lea edx [ebp+var_118] +
push edx  +
push 1  +
push [ebp+ppidl]  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_1028103  +
lea eax [ebp+pv] +
push eax  +
push [ebp+ppidl]  +
lea eax [ebp+var_118] +
push eax  +
call sub_1026867  +
test eax eax +
jl loc_10280EA  +
push [ebp+pv]  +
push [ebp+arg_4]  +
push ebx  +
call sub_101BD65  +
test eax eax +
jge loc_1028000  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1028141  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028141  +
push eax  +
push esi  +
push 27h  +
jmp loc_1027FF0  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1028141  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028141  +
push eax  +
push esi  +
push 28h  +
jmp loc_1027FF0  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1028141  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028141  +
push eax  +
push esi  +
push 29h  +
jmp loc_1027FF0  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1028141  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028141  +
push eax  +
push esi  +
push 2Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov ecx lpReserved +
mov eax [ebp+ppshf] +
test eax eax +
jz loc_1028158  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppshf] 0 +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1028170  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028170  +
push esi  +
push 2Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1018898  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 330h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_324] eax +
lea eax [ebp+VersionInformation] +
xor ebx ebx +
push eax  +
mov [ebp+ppv] ebx +
mov [ebp+var_328] ebx +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
test eax eax +
jnz loc_10281FF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1028397  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028397  +
push (offset loc_1003CDB+1)  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1028397  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1028383  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jbe loc_1028321  +
push ebx  +
call ds:CoInitialize  +
mov esi eax +
cmp esi ebx +
jge loc_102825D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1028393  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028393  +
push esi  +
push offset aFailedToCallCo  +
push (offset loc_1003CDB+1)  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1028393  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1003F6C  +
push 17h  +
push ebx  +
push offset stru_100D3F4  +
mov [ebp+var_328] 1 +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jge loc_10282BE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102838D  +
test byte ptr [eax+1Ch] 4 +
jz loc_102838D  +
push esi  +
push offset aFailedToCocrea  +
push (offset loc_1003CDB+1)  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102838D  +
cmp [ebp+arg_8] ebx +
jz loc_10282CB  +
push [ebp+arg_8]  +
call sub_10267D1  +
push edi  +
lea ecx [ebp+var_330] +
call loc_1023313  +
mov eax [eax] +
mov ecx [ebp+ppv] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0Ch]  +
push [ebp+var_330]  +
mov esi eax +
call ds:SysFreeString  +
cmp esi ebx +
jge loc_1028383  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102838D  +
test byte ptr [eax+1Ch] 4 +
jz loc_102838D  +
push esi  +
push offset aFailedDisplayc  +
push (offset loc_1003CDB+1)  +
push 2Fh  +
jmp loc_10282AE  +
mov edi offset aMstsc_chm +
cmp esi ebx +
jz loc_1028375  +
push esi  +
push edi  +
push offset aSS_1  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_101BDD4  +
add esp 14h +
test eax eax +
jge loc_102836F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1028375  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028375  +
push (offset loc_1003CDB+1)  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1028375  +
lea edi [ebp+var_20C] +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_324]  +
call sub_104F6A2  +
xor esi esi +
cmp [ebp+var_328] ebx +
jz loc_10283AA  +
call ds:CoUninitialize  +
cmp esi ebx +
jge loc_10283AA  +
push [ebp+arg_C]  +
push 411h  +
push [ebp+var_324]  +
call sub_105B0B4  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E40h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 0  +
call ds:GetModuleHandleW  +
mov [ebp+var_E40] eax +
mov esi 104h +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_10277AA  +
test eax eax +
jz loc_1028504  +
lea eax [ebp+FileName] +
push eax  +
call sub_1027210  +
test eax eax +
jz loc_1028416  +
xor eax eax +
inc eax  +
jmp loc_1028506  +
mov eax lpReserved +
push ebx  +
push edi  +
mov edi offset lpReserved +
mov ebx (offset loc_1003CDB+1) +
cmp eax edi +
jz loc_1028452  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028452  +
call ds:GetLastError  +
push eax  +
lea eax [ebp+FileName] +
push eax  +
mov eax lpReserved +
push ebx  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
push esi  +
lea eax [ebp+pv] +
push eax  +
call sub_1027F0C  +
test eax eax +
jz loc_1028502  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 3ECh  +
push [ebp+var_E40]  +
call sub_105DD36  +
test eax eax +
jz loc_1028502  +
push esi  +
lea eax [ebp+var_61C] +
push eax  +
push 405h  +
push [ebp+var_E40]  +
call sub_105DD36  +
test eax eax +
jz loc_1028502  +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+var_61C] +
push eax  +
lea eax [ebp+var_E3C] +
push 30Ch  +
push eax  +
call sub_101BDD4  +
add esp 14h +
test eax eax +
jge loc_10284EB  +
mov eax lpReserved +
cmp eax edi +
jz loc_1028502  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028502  +
push ebx  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1028502  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_E3C] +
push eax  +
push 0  +
call sub_105D992  +
pop edi  +
pop ebx  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+hMem] +
xor ebx ebx +
push edi  +
mov edi [ebp+nBufferLength] +
test esi esi +
jz loc_1028535  +
test edi edi +
jbe loc_1028535  +
xor eax eax +
mov [esi] ax +
cmp edi 104h +
jb loc_1028589  +
push edi  +
push esi  +
call sub_10277AA  +
test eax eax +
jz loc_1028589  +
push offset aDefault_rdp  +
push edi  +
push esi  +
call sub_1027578  +
test eax eax +
jge loc_1028586  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1028589  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028589  +
push eax  +
push offset aStringcchcatFa  +
push (offset loc_1003CDB+1)  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1028589  +
xor ebx ebx +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov dword ptr [ecx] offset off_100401C +
jmp sub_1052ABD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100401C +
call sub_1052ABD  +
test byte ptr [ebp+8] 1 +
jz loc_10285C7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 191h  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1052A87  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov [esi+20h] eax +
push 100h  +
lea eax [esi+24h] +
push eax  +
mov dword ptr [esi] offset off_100401C +
call sub_101BD65  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+hDlg] ebx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102865B  +
test byte ptr [eax+1Ch] 1 +
jz loc_102865B  +
push offset dword_100400C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+arg_8] 110h +
jz loc_102867B  +
push [ebp+arg_10]  +
push dword ptr [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push esi  +
call sub_10534BF  +
mov esi eax +
jmp loc_1028947  +
and [ebp+var_A0C] 0 +
push edi  +
push 2  +
push 2  +
push dword ptr [esi+8]  +
mov ecx esi +
mov [esi+4] ebx +
call sub_1052B2B  +
push 65h  +
mov ecx esi +
call sub_1052AC9  +
mov edi ds:GetSystemMetrics +
push 0Ch  +
call edi  +
push eax  +
push 0Bh  +
call edi  +
push eax  +
push 65h  +
push 138Ch  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_1053364  +
mov edi 100h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
mov ebx 36C8h +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_102874E  +
push offset a7_1  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+String] +
push edi  +
push eax  +
call sub_101BDD4  +
add esp 10h +
mov eax lpReserved +
mov ebx offset lpReserved +
cmp eax ebx +
jz loc_102872B  +
test byte ptr [eax+1Ch] 1 +
jz loc_102872B  +
lea ecx [ebp+String] +
push ecx  +
push offset dword_100400C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
cmp [ebp+hDlg] 0 +
jz loc_1028778  +
lea eax [ebp+String] +
push eax  +
push 1388h  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextW  +
jmp loc_1028778  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1028773  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028773  +
push ebx  +
push offset dword_100400C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov ebx offset lpReserved +
push edi  +
lea eax [ebp+var_404] +
push eax  +
push 36C9h  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_10287C1  +
mov eax lpReserved +
cmp eax ebx +
jz loc_102882A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102882A  +
push 36C9h  +
push offset dword_100400C  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_102882A  +
push 1DB1h  +
push 1  +
push 6  +
lea eax [ebp+var_404] +
push eax  +
lea eax [ebp+var_204] +
push edi  +
push eax  +
call sub_101BDD4  +
add esp 18h +
mov eax lpReserved +
cmp eax ebx +
jz loc_1028809  +
test byte ptr [eax+1Ch] 1 +
jz loc_1028809  +
lea ecx [ebp+var_204] +
push ecx  +
push offset dword_100400C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
cmp [ebp+hDlg] 0 +
jz loc_102882A  +
lea eax [ebp+var_204] +
push eax  +
push 138Ah  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextW  +
push edi  +
lea eax [ebp+var_404] +
push eax  +
push 3F1h  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_102886F  +
mov eax lpReserved +
cmp eax ebx +
jz loc_10288D3  +
test byte ptr [eax+1Ch] 4 +
jz loc_10288D3  +
push 3F1h  +
push offset dword_100400C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_10288D3  +
lea eax [esi+24h] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
lea eax [ebp+var_204] +
push edi  +
push eax  +
call sub_101BDD4  +
add esp 10h +
mov eax lpReserved +
cmp eax ebx +
jz loc_10288B2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10288B2  +
lea ecx [ebp+var_404] +
push ecx  +
push offset dword_100400C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
cmp [ebp+hDlg] 0 +
jz loc_10288D3  +
lea eax [ebp+var_204] +
push eax  +
push 138Bh  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextW  +
call sub_1059AD8  +
mov ebx eax +
neg ebx  +
push edi  +
sbb ebx ebx +
lea eax [ebp+var_804] +
push eax  +
add ebx 44Ch +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
pop edi  +
test eax eax +
jnz loc_1028921  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1028939  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028939  +
push ebx  +
push offset dword_100400C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1028939  +
lea eax [ebp+var_804] +
push eax  +
push 138Dh  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextW  +
xor esi esi +
lea ecx [ebp+var_A0C] +
inc esi  +
call sub_1018931  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov dword ptr [ecx] offset off_1004058 +
jmp sub_1052ABD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004058 +
call sub_1052ABD  +
test byte ptr [ebp+8] 1 +
jz loc_102898E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 19Ah  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1052A87  +
cmp [ebp+arg_C] 0 +
mov eax [ebp+arg_8] +
mov dword ptr [esi] offset off_1004058 +
mov [esi+20h] eax +
jz loc_1028A08  +
push [ebp+arg_C]  +
lea edi [esi+24h] +
push 100h  +
push edi  +
call sub_101BD65  +
test eax eax +
jge loc_1028A0E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1028A01  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028A01  +
push eax  +
push offset dword_1004048  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
xor eax eax +
mov [edi] ax +
jmp loc_1028A0E  +
xor eax eax +
mov [esi+24h] ax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+lpString] 0 +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
test eax eax +
jz loc_1028B28  +
mov eax [eax+38h] +
test eax eax +
jz loc_1028B28  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C738  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_1028A8E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1028B53  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028B53  +
push eax  +
push offset aQueryinterface  +
push offset dword_1004048  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1028B53  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+lpString] +
push edx  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+0F4h]  +
test eax eax +
jge loc_1028AD0  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1028B53  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1028B53  +
push eax  +
push offset aGeterrordescri  +
push offset dword_1004048  +
push 0Ch  +
jmp loc_1028A7E  +
cmp [ebp+lpString] 0 +
jz loc_1028AFF  +
push [ebp+lpString]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1028AFF  +
push [ebp+lpString]  +
push 13A0h  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push [ebp+lpString]  +
call ds:SysFreeString  +
jmp loc_1028B53  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1028B53  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028B53  +
push [ebp+arg_0]  +
push offset dword_1004048  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1028B53  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1028B53  +
test byte ptr [eax+1Ch] 4 +
jz loc_1028B53  +
mov ecx [esi+20h] +
push dword ptr [ecx+38h]  +
push ecx  +
push offset dword_1004048  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov eax [ebp+var_8] +
pop esi  +
test eax eax +
jz locret_1028B65  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
xor edi edi +
sub eax 46h +
jz loc_1028CD4  +
dec eax  +
jz loc_1028C8B  +
sub eax 0C9h +
jz loc_1028C0B  +
dec eax  +
jz loc_1028BC2  +
sub eax 2F0h +
jz loc_1028BB2  +
cmp [ebp+hWnd] edi +
jz loc_1028CDB  +
push [ebp+arg_10]  +
push dword ptr [ebp+arg_C]  +
push [ebp+arg_8]  +
jmp loc_1028CC5  +
push dword ptr [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
call sub_1028A1B  +
jmp loc_1028CDB  +
movzx eax [ebp+arg_C] +
dec eax  +
dec eax  +
jz loc_1028BEA  +
sub eax 139Ah +
jz loc_1028BEA  +
cmp [ebp+hWnd] edi +
jz loc_1028CDB  +
push [ebp+arg_10]  +
push dword ptr [ebp+arg_C]  +
push 111h  +
jmp loc_1028CC5  +
mov esi [ebp+arg_0] +
mov ecx [esi+20h] +
call sub_101EEBC  +
mov eax [esi+20h] +
push 2  +
push [ebp+hWnd]  +
mov [eax+48h] edi +
call ds:EndDialog  +
jmp loc_1028CDB  +
mov esi [ebp+arg_0] +
mov eax [esi+20h] +
push ebx  +
mov ebx [ebp+hWnd] +
mov [esi+4] ebx +
mov [eax+48h] ebx +
cmp ebx edi +
jz loc_1028C85  +
push 2  +
push 2  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_1052B2B  +
push 65h  +
mov ecx esi +
call sub_1052AC9  +
mov edi ds:GetSystemMetrics +
push 0Ch  +
call edi  +
push eax  +
push 0Bh  +
call edi  +
push eax  +
push 65h  +
push 139Eh  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_1053364  +
lea eax [esi+24h] +
push eax  +
push 139Dh  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push 23h  +
push 1  +
push 40Ah  +
push 139Fh  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
xor edi edi +
inc edi  +
pop ebx  +
jmp loc_1028CDB  +
mov esi [ebp+arg_10] +
cmp esi edi +
jz loc_1028CBF  +
test byte ptr [esi+18h] 40h +
jz loc_1028CBF  +
cmp dword_106607C edi +
jz loc_1028CBF  +
push 139Ch  +
push [ebp+hWnd]  +
call ds:GetDlgItem  +
mov ecx dword_106607C +
push eax  +
push 19Ah  +
call sub_105A73B  +
push esi  +
push dword ptr [ebp+arg_C]  +
push 47h  +
push [ebp+hWnd]  +
push [ebp+arg_0]  +
call sub_10534BF  +
mov edi eax +
jmp loc_1028CDB  +
mov eax [ebp+arg_10] +
or dword ptr [eax+18h] 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_8] +
and dword ptr [eax+4] 0 +
and dword ptr [eax+14h] 0 +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_10040E8 +
mov [eax+10h] ecx +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [ecx] offset off_10040E8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+8] +
mov ecx [esi] +
call sub_101FDD3  +
mov ecx [esi] +
push eax  +
call sub_101FD9E  +
mov ecx [esi] +
push eax  +
call sub_101FDC1  +
mov ecx [esi] +
push eax  +
call sub_101FDAF  +
push eax  +
call sub_105EBDE  +
mov esi eax +
test esi esi +
jz loc_1028D89  +
push esi  +
push [ebp+arg_4]  +
lea ecx [ebp+var_28] +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+10h]  +
call sub_10431CD  +
lea ecx [ebp+var_28] +
call sub_105340F  +
push esi  +
call ds:CertFreeCertificateContext  +
lea ecx [ebp+var_28] +
call sub_1043203  +
jmp loc_1028D9C  +
push 4010h  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+10h]  +
call sub_105D992  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push [ebp+arg_4]  +
push dword ptr [ecx+0Ch]  +
push dword ptr [ecx+10h]  +
lea ecx [ebp+var_24] +
call sub_104327E  +
lea ecx [ebp+var_24] +
call sub_105340F  +
lea ecx [ebp+var_24] +
call sub_10432AE  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx eax +
and ecx 0FF000000h +
cmp ecx 3000000h +
jnz loc_1028E1E  +
and eax 0FFFFFFh +
cmp eax 5 +
jz loc_1028E19  +
cmp eax 2 +
jz loc_1028E19  +
cmp eax 3 +
jz loc_1028E19  +
cmp eax 4 +
jz loc_1028E19  +
cmp eax 6 +
jz loc_1028E19  +
cmp eax 7 +
jz loc_1028E19  +
cmp eax 2Ah +
jnz loc_1028E1E  +
xor eax eax +
inc eax  +
jmp loc_1028E20  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx eax +
and ecx 0FF000000h +
cmp ecx 3000000h +
jnz loc_1028E55  +
and eax 0FFFFFFh +
cmp eax 3Dh +
jz loc_1028E50  +
cmp eax 3Fh +
jnz loc_1028E55  +
xor eax eax +
inc eax  +
jmp loc_1028E57  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 814h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_808] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov [ebp+var_810] eax +
mov eax [ebp+arg_14] +
push esi  +
mov ebx ecx +
push edi  +
mov [ebp+var_80C] ebx +
mov [ebp+var_814] eax +
mov eax lpReserved +
mov esi offset lpReserved +
mov edi offset dword_10040D8 +
cmp eax esi +
jz loc_1028EC8  +
test byte ptr [eax+1Ch] 2 +
jz loc_1028EC8  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov ecx [ebp+var_814] +
xor eax eax +
inc eax  +
cmp [ebp+arg_8] 0 +
mov [ecx] eax +
jz loc_1028EFC  +
cmp [ebp+arg_8] eax +
jnz loc_1028EFC  +
mov eax [ebx+8] +
mov ecx [eax+6C4h] +
mov eax [ecx] +
call dword ptr [eax+70h]  +
mov ebx eax +
test ebx ebx +
jnz loc_1028FE9  +
mov ebx [ebp+var_80C] +
mov eax [ebp+arg_4] +
test eax 0FF000000h +
jnz loc_102907C  +
movzx ecx al +
cmp ecx 4 +
jz loc_1028F84  +
cmp ecx 8 +
jnz loc_102907C  +
sar eax 8 +
and eax 0FFh +
cmp eax 2 +
jb loc_102907C  +
cmp eax 3 +
jbe loc_1028F3F  +
cmp eax 4 +
jz loc_1028F57  +
cmp eax 5 +
jnz loc_102907C  +
mov eax lpReserved +
cmp eax esi +
jz loc_1028FD1  +
test byte ptr [eax+1Ch] 2 +
jz loc_1028FD1  +
push edi  +
push 0Fh  +
jmp loc_1028FC6  +
mov eax lpReserved +
cmp eax esi +
jz loc_1028F74  +
test byte ptr [eax+1Ch] 2 +
jz loc_1028F74  +
push edi  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebx+8] +
mov ecx [eax+6C4h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
jmp loc_1028FDF  +
sar eax 8 +
and eax 0FFh +
dec eax  +
jz loc_1028FB4  +
sub eax 5 +
jz loc_1028FB4  +
dec eax  +
dec eax  +
jz loc_1028FB4  +
dec eax  +
dec eax  +
jnz loc_102907C  +
mov eax lpReserved +
cmp eax esi +
jz loc_1028F74  +
test byte ptr [eax+1Ch] 2 +
jz loc_1028F74  +
push edi  +
push 0Eh  +
jmp loc_1028F69  +
mov eax lpReserved +
cmp eax esi +
jz loc_1028FD1  +
test byte ptr [eax+1Ch] 2 +
jz loc_1028FD1  +
push edi  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebx+8] +
mov ecx [eax+6C4h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
mov ebx eax +
test ebx ebx +
jz loc_1029076  +
mov eax lpReserved +
cmp eax esi +
jz loc_1029007  +
test byte ptr [eax+1Ch] 1 +
jz loc_1029007  +
push ebx  +
push edi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push [ebp+var_808]  +
call sub_105DD36  +
test eax eax +
jnz loc_102905C  +
mov eax lpReserved +
cmp eax esi +
jz loc_1029041  +
test byte ptr [eax+1Ch] 4 +
jz loc_1029041  +
push ebx  +
push edi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
call ds:GetLastError  +
test eax eax +
jle loc_1029055  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_10291FB  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+arg_10]  +
push [ebp+var_810]  +
call sub_101BD65  +
jmp loc_10291BC  +
mov ebx [ebp+var_80C] +
mov eax lpReserved +
cmp eax esi +
jz loc_102909E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102909E  +
push edi  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax lpReserved +
mov ecx [ebx+8] +
and [ebp+var_808] 0 +
and [ebp+var_80C] 0 +
test ecx ecx +
jz loc_10291C0  +
mov ecx [ecx+38h] +
test ecx ecx +
jz loc_10291C0  +
mov eax [ecx] +
lea edx [ebp+var_808] +
push edx  +
push offset dword_100C718  +
push ecx  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jge loc_1029109  +
mov eax lpReserved +
cmp eax esi +
jz loc_10291E4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10291E4  +
push ebx  +
push offset aQiForIid_imsrd  +
push edi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10291E4  +
mov eax [ebp+var_808] +
mov ecx [eax] +
lea edx [ebp+var_80C] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0D8h]  +
mov ebx eax +
test ebx ebx +
jge loc_102914D  +
mov eax lpReserved +
cmp eax esi +
jz loc_10291E4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10291E4  +
push ebx  +
push offset aGeterrordescri  +
push edi  +
push 15h  +
jmp loc_10290F9  +
push [ebp+var_80C]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1029173  +
push [ebp+var_80C]  +
push [ebp+arg_10]  +
push [ebp+var_810]  +
call sub_101BD65  +
jmp loc_1029199  +
mov eax lpReserved +
cmp eax esi +
jz loc_1029190  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029190  +
push edi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+var_814] +
and dword ptr [eax] 0 +
push [ebp+var_80C]  +
call ds:SysFreeString  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_10291BC  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor ebx ebx +
jmp loc_10291FB  +
cmp eax esi +
jz loc_10291DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10291DF  +
mov ecx [ebx+8] +
push dword ptr [ecx+38h]  +
push ecx  +
push edi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov ebx 80004003h +
mov eax [ebp+var_808] +
test eax eax +
jz loc_10291FB  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_88] 0 +
push ebx  +
push esi  +
push 1800h  +
push 40h  +
mov esi ecx +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_102924E  +
or eax 0FFFFFFFFh +
jmp loc_1029362  +
lea eax [ebp+var_88] +
push eax  +
push 0C00h  +
push ebx  +
push dword ptr [esi+14h]  +
mov ecx esi +
push dword ptr [esi+4]  +
push dword ptr [esi+0Ch]  +
call sub_1028E60  +
test eax eax +
jl loc_1029359  +
cmp [ebp+var_88] 0 +
jz loc_1029327  +
mov eax [esi+8] +
mov ecx [eax+6C4h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+6Ch]  +
mov edi eax +
push 40h  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_10292D5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10292CC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10292CC  +
push edi  +
push offset dword_10040D8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
mov [ebp+Buffer] ax +
mov edx [esi+4] +
push edx  +
mov ecx esi +
call sub_1028DD9  +
pop edi  +
mov ecx esi +
test eax eax +
jz loc_10292F9  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push dword ptr [esi+10h]  +
call sub_1028D24  +
jmp loc_102934B  +
push edx  +
call sub_1028E29  +
test eax eax +
jz loc_1029310  +
push ebx  +
push dword ptr [esi+10h]  +
mov ecx esi +
call sub_1028DA7  +
jmp loc_102934B  +
push 4010h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push dword ptr [esi+10h]  +
call sub_105D992  +
jmp loc_102934B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102934B  +
test byte ptr [eax+1Ch] 2 +
jz loc_102934B  +
push offset dword_10040D8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+8] +
test ecx ecx +
jz loc_1029359  +
push 0  +
call sub_101F7AE  +
push ebx  +
call ds:LocalFree  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 19Eh  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1052A87  +
mov dword ptr [esi] offset off_100413C +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov dword ptr [ecx] offset off_100413C +
jmp sub_1052ABD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100413C +
call sub_1052ABD  +
test byte ptr [ebp+8] 1 +
jz loc_10293CF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
sub ecx 0Fh +
push edi  +
mov edi [ebp+arg_4] +
jz loc_10294EC  +
dec ecx  +
jz loc_10294B6  +
sub ecx 100h +
jz loc_102945E  +
dec ecx  +
jnz loc_1029522  +
movzx ecx [ebp+arg_C] +
dec ecx  +
jnz loc_1029522  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029448  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029448  +
push offset dword_100412C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
test edi edi +
jz loc_102951F  +
push 1  +
push edi  +
call ds:EndDialog  +
jmp loc_102951F  +
push 65h  +
mov ecx esi +
mov [esi+4] edi +
call sub_1052AC9  +
push 7F03h  +
push 0  +
call ds:LoadIconW  +
mov [esi+20h] eax +
test edi edi +
jz loc_102951F  +
push ebx  +
push 1392h  +
push edi  +
call ds:GetDlgItem  +
mov ebx eax +
test ebx ebx +
jz loc_10294B3  +
add esi 24h +
push esi  +
push ebx  +
call ds:GetWindowRect  +
push 2  +
push esi  +
push edi  +
push 0  +
call ds:MapWindowPoints  +
push ebx  +
call ds:DestroyWindow  +
pop ebx  +
jmp loc_102951F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10294DA  +
test byte ptr [eax+1Ch] 2 +
jz loc_10294DA  +
push offset dword_100412C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push edi  +
call ds:IsWindow  +
test eax eax +
jz loc_102951F  +
push 2  +
jmp loc_1029452  +
test edi edi +
jz loc_102951F  +
lea eax [ebp+Paint] +
push eax  +
push edi  +
call ds:BeginPaint  +
test eax eax +
jz loc_1029514  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1029514  +
push ecx  +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
push eax  +
call ds:DrawIcon  +
lea eax [ebp+Paint] +
push eax  +
push edi  +
call ds:EndPaint  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C344 +
xor edx edx +
cmps   +
jz loc_1029577  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C400 +
xor edx edx +
cmps   +
jz loc_1029577  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C788 +
xor edx edx +
cmps   +
jnz loc_102957C  +
mov ecx [ebp+8] +
mov [eax] ecx +
mov eax [eax] +
pop edi  +
pop esi  +
test eax eax +
jz loc_102958E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1029593  +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004170 +
jz loc_10295B7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax 80004001h +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_10295FA  +
call sub_1020465  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029619  +
call sub_1020488  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029645  +
push [ebp+arg_8]  +
xor eax eax +
cmp [ebp+arg_4] ax +
setnz al  +
push eax  +
call sub_101FA6E  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029667  +
push [ebp+arg_4]  +
call sub_101FAA2  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+4] +
push esi  +
call ds:InterlockedDecrement  +
test eax eax +
jz loc_102968E  +
mov eax [esi] +
jmp loc_102969D  +
test edi edi +
jz loc_102969B  +
push 1  +
mov ecx edi +
call sub_102959C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10296D1  +
test byte ptr [eax+1Ch] 2 +
jz loc_10296D1  +
push offset dword_1004160  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_10296E0  +
call sub_101FE9E  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029714  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029714  +
push offset dword_1004160  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029723  +
call sub_101FF24  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029757  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029757  +
push offset dword_1004160  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029766  +
call sub_10201D0  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102979A  +
test byte ptr [eax+1Ch] 2 +
jz loc_102979A  +
push offset dword_1004160  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_10297AC  +
push [ebp+wParam]  +
call sub_10201FE  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10297E0  +
test byte ptr [eax+1Ch] 4 +
jz loc_10297E0  +
push offset dword_1004160  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_10297F2  +
push [ebp+arg_4]  +
call sub_102190F  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029826  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029826  +
push offset dword_1004160  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029838  +
push [ebp+arg_4]  +
call sub_1020610  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102986C  +
test byte ptr [eax+1Ch] 2 +
jz loc_102986C  +
push offset dword_1004160  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029881  +
push [ebp+arg_8]  +
push [ebp+hWnd]  +
call sub_102067D  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10298B5  +
test byte ptr [eax+1Ch] 2 +
jz loc_10298B5  +
push offset dword_1004160  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_10298C4  +
call sub_101E9E4  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi 80004005h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029900  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029900  +
push offset dword_1004160  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_102992E  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_102992A  +
lea eax [ebp+var_4] +
push eax  +
call sub_101FAD3  +
mov esi eax +
test esi esi +
jl loc_102992A  +
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
mov [edi] ax +
mov eax esi +
jmp loc_1029933  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029967  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029967  +
push offset dword_1004160  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029979  +
push [ebp+arg_4]  +
call sub_101FB58  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10299AD  +
test byte ptr [eax+1Ch] 2 +
jz loc_10299AD  +
push offset dword_1004160  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_10299BC  +
call sub_101FCC2  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10299F0  +
test byte ptr [eax+1Ch] 2 +
jz loc_10299F0  +
push offset dword_1004160  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_10299FF  +
call sub_101EA0F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jz loc_1029A3A  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
cmp ecx esi +
jz loc_1029A63  +
xor edx edx +
xor eax eax +
cmp ax [ebp+arg_C] +
setnz dl  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101FA37  +
jmp loc_1029A63  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029A5E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1029A5E  +
push offset dword_1004160  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 80070057h +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029A98  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029A98  +
push offset dword_1004160  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029AAA  +
push [ebp+arg_4]  +
call sub_101FD29  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029ADE  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029ADE  +
push offset dword_1004160  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029AF0  +
push [ebp+arg_4]  +
call sub_101FD62  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029B24  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029B24  +
push offset dword_1004160  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
test ecx ecx +
jz loc_1029B36  +
push [ebp+wParam]  +
call sub_101ECF7  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1004170 +
mov [eax+8] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
lea eax [ecx-1] +
push esi  +
mov esi 80004001h +
cmp eax 1Bh +
ja loc_1029D11  +
jmp ds:off_1029D3D[eax*4]  +
push [ebp+arg_0]  +
call sub_10296EB  +
mov esi eax +
jmp loc_1029D36  +
push [ebp+arg_0]  +
call sub_10296A8  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_1029771  +
jmp loc_1029B8A  +
push [ebp+arg_0]  +
call sub_102972E  +
jmp loc_1029B8A  +
push [ebp+arg_0]  +
call sub_10295E6  +
jmp loc_1029B8A  +
push [ebp+arg_0]  +
call sub_1029605  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_10297B7  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_10297FD  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push dword ptr [eax+18h]  +
push [ebp+arg_0]  +
call sub_1029843  +
jmp loc_1029B8A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029D36  +
test byte ptr [eax+1Ch] 2 +
jz loc_1029D36  +
push offset dword_1004160  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1029D36  +
push [ebp+arg_0]  +
call sub_102988C  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_10298CF  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_102993E  +
jmp loc_1029B8A  +
push [ebp+arg_0]  +
call sub_1029984  +
jmp loc_1029B8A  +
push [ebp+arg_0]  +
call sub_10299C7  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
movzx ecx word ptr [eax+8] +
push ecx  +
push dword ptr [eax+18h]  +
push dword ptr [eax+28h]  +
push [ebp+arg_0]  +
call sub_1029A0A  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+18h]  +
movzx eax word ptr [eax+8] +
push eax  +
push [ebp+arg_0]  +
call sub_1029624  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_1029650  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_1029A6F  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_1029AB5  +
jmp loc_1029B8A  +
mov eax [ebp+arg_14] +
mov eax [eax] +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call sub_1029AFB  +
jmp loc_1029B8A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029D36  +
test byte ptr [eax+1Ch] 4 +
jz loc_1029D36  +
push ecx  +
push offset dword_1004160  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push [ebp+hKey]  +
push [ebp+cbData]  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi 2 +
jz loc_1029E8B  +
cmp esi 5 +
jz loc_1029E8B  +
test esi esi +
jz loc_1029E0A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029E6B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1029E6B  +
push esi  +
push offset aRegopenkeyexFa  +
push offset dword_10043C8  +
push 12h  +
jmp loc_1029E60  +
push 4  +
pop ebx  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] ebx +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi 2 +
jz loc_1029E8B  +
cmp esi 5 +
jz loc_1029E8B  +
test esi esi +
jz loc_1029E7D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1029E6B  +
test [eax+1Ch] bl +
jz loc_1029E6B  +
push esi  +
push offset aRegqueryvaluee  +
push offset dword_10043C8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
test esi esi +
jle loc_1029E8E  +
and esi 0FFFFh +
or esi 80070000h +
jmp loc_1029E8E  +
cmp [ebp+Type] ebx +
jnz loc_1029E8B  +
cmp [ebp+cbData] ebx +
jnz loc_1029E8B  +
xor esi esi +
jmp loc_1029E8E  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_1029ECC  +
cmp word ptr [edx] 0 +
jnz loc_1029EB1  +
push 0Eh  +
jmp loc_1029ECE  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1029EB7  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1029ECF  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1029EE0  +
cmp word ptr [edx] 0 +
jnz loc_1029EE5  +
mov edx offset aNull +
jmp loc_1029EE5  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_1029F48  +
cmp word ptr [edx] 0 +
jnz loc_1029F2C  +
mov [ebp+arg_14] 0Eh +
jmp loc_1029F4F  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1029F31  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_1029F4F  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_1029F65  +
cmp word ptr [edx] 0 +
jnz loc_1029F67  +
mov edx offset aNull +
jmp loc_1029F67  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_1029F91  +
cmp word ptr [edi] 0 +
jnz loc_1029F78  +
push 0Eh  +
jmp loc_1029F93  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1029F7D  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1029F94  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_1029FA9  +
cmp word ptr [edi] 0 +
jnz loc_1029FA5  +
mov eax offset aNull +
jmp loc_1029FAB  +
mov eax edi +
jmp loc_1029FAB  +
mov eax ebx +
push 0  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+3Ch] +
call sub_105B0D2  +
lea ecx [esi+84C0h] +
call sub_1042F51  +
lea ecx [esi+0C1E4h] +
call sub_1042F51  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0C1E4h] +
call sub_1042F84  +
lea ecx [esi+84C0h] +
call sub_1042F84  +
lea ecx [esi+3Ch] +
pop esi  +
jmp nullsub_3  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0C22Ch] +
mov eax [edi] +
test eax eax +
jz loc_102A046  +
push eax  +
call ds:CertFreeCertificateChain  +
and dword ptr [edi] 0 +
mov esi [esi+0C23Ch] +
test esi esi +
jz loc_102A056  +
push esi  +
call sub_105D688  +
push 6  +
pop ecx  +
xor eax eax +
stos   +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+84E4h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+84E0h] eax +
pop ebp  +
retn 4  +
***
mov ecx [ecx+0C234h] +
xor eax eax +
inc eax  +
sub ecx 0 +
jz locret_102A0BC  +
dec ecx  +
jz loc_102A0B9  +
dec ecx  +
jz loc_102A0B5  +
dec ecx  +
jz loc_102A0B1  +
dec ecx  +
jnz locret_102A0BC  +
push 5  +
pop eax  +
retn   +
push 4  +
pop eax  +
retn   +
push 3  +
pop eax  +
retn   +
push 2  +
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 84D8h +
pop ebp  +
jmp loc_1042F8E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 84D8h +
pop ebp  +
jmp loc_104301E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
push edi  +
mov [ebp+var_4] ebx +
mov [esi+0B3C0h] ebx +
mov edi offset off_10043E8 +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_102A1BF  +
cmp [ebp+var_8] 0 +
jz loc_102A176  +
mov eax [edi+8] +
or [esi+0B3C0h] eax +
inc ebx  +
add edi 10h +
cmp ebx 8 +
jb loc_102A152  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push 1  +
push offset aBitmapcacheper  +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_102A1EF  +
mov ecx [ebp+var_4] +
neg ecx  +
sbb ecx ecx +
mov eax 80000000h +
and ecx eax +
add ecx eax +
or ecx [esi+0B3C0h] +
xor eax eax +
and ecx 0FFFFFFBFh +
mov [esi+0B3C0h] ecx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A1EF  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A1EF  +
shl ebx 4 +
push ds:off_10043E8[ebx]  +
push offset dword_10043D8  +
push 0E6h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor eax eax +
jmp loc_102A1B8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 0C1FCh +
pop ebp  +
jmp loc_1042F8E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 0C1FCh +
pop ebp  +
jmp loc_104301E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_4] +
lea edi [ebp+var_64] +
movs   +
movs   +
xor ebx ebx +
push ebx  +
push [ebp+arg_0]  +
movs   +
lea eax [ebp+var_78] +
push eax  +
mov [ebp+var_80] ecx +
movs   +
call ds:CM_Get_Child  +
jmp loc_102A2D4  +
mov ecx [ebp+var_80] +
sub esp 10h +
mov edi esp +
push [ebp+var_78]  +
lea esi [ebp+var_64] +
movs   +
movs   +
movs   +
movs   +
call sub_102A224  +
test al al +
jnz loc_102A2DA  +
push ebx  +
lea eax [ebp+var_84] +
push eax  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
push 9  +
push [ebp+var_78]  +
mov [ebp+var_84] 4Eh +
call ds:CM_Get_DevNode_Registry_PropertyW  +
test eax eax +
jnz loc_102A2C6  +
cmp [ebp+var_7C] 1 +
jnz loc_102A2C6  +
lea eax [ebp+pclsid] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call ds:CLSIDFromString  +
test eax eax +
jl loc_102A2C6  +
push 4  +
pop ecx  +
lea edi [ebp+var_64] +
lea esi [ebp+pclsid] +
xor eax eax +
cmps   +
jz loc_102A2DA  +
push ebx  +
push [ebp+var_78]  +
lea eax [ebp+var_78] +
push eax  +
call ds:CM_Get_Sibling  +
test eax eax +
jz loc_102A25B  +
jmp loc_102A2DC  +
mov bl 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+135Ch] 0 +
push edi  +
mov edi 80070057h +
jz loc_102A363  +
cmp word ptr [ecx+29FCh] 0 +
jnz loc_102A363  +
add ecx 17F4h +
cmp word ptr [ecx] 0 +
jnz loc_102A363  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A347  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A347  +
push ecx  +
push ecx  +
push offset dword_10043D8  +
push 170h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102A354  +
mov dword ptr [eax] 36BCh +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102A365  +
mov dword ptr [eax] 36B3h +
jmp loc_102A365  +
xor edi edi +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 50h  +
mov esi ecx +
call ds:GetSystemMetrics  +
dec eax  +
neg eax  +
sbb eax eax +
not eax  +
and eax [ebp+arg_0] +
mov [esi+0C214h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hKey]  +
push [ebp+lpData]  +
push [ebp+lpValueName]  +
push 80000001h  +
call sub_1029DB2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hKey]  +
push [ebp+lpData]  +
push [ebp+lpValueName]  +
push 80000002h  +
call sub_1029DB2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0B3B8h] 0 +
jz loc_102A42A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A40F  +
test byte ptr [eax+1Ch] 1 +
jz loc_102A40F  +
push offset dword_10043D8  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 2  +
push 1  +
push offset aPinconnectionb  +
push offset word_1002174  +
call sub_10509E3  +
mov [esi+0B3BCh] eax +
pop esi  +
retn   +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A44E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102A44E  +
push offset dword_10043D8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and dword ptr [esi+0B3BCh] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_4] ecx +
call ds:VariantInit  +
mov ecx [ebp+var_4] +
call sub_102A093  +
mov esi [ebp+arg_0] +
mov ebx eax +
mov eax [esi] +
xor ecx ecx +
cmp ebx 5 +
setz cl  +
dec ecx  +
push ecx  +
push esi  +
call dword ptr [eax+44h]  +
mov edi eax +
test edi edi +
jge loc_102A4C3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A59F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A59F  +
push edi  +
push offset aPut_showredire  +
push offset dword_10043D8  +
push 6Bh  +
jmp loc_102A594  +
mov eax [esi] +
push ebx  +
push esi  +
call dword ptr [eax+94h]  +
mov edi eax +
test edi edi +
jge loc_102A4FF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A59F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A59F  +
push edi  +
push offset aPut_redirectio  +
push offset dword_10043D8  +
push 6Ch  +
jmp loc_102A594  +
cmp ebx 5 +
jz loc_102A50D  +
cmp ebx 4 +
jz loc_102A50D  +
xor eax eax +
jmp loc_102A510  +
or eax 0FFFFFFFFh +
mov ecx [esi] +
push eax  +
push esi  +
call dword ptr [ecx+9Ch]  +
mov edi eax +
test edi edi +
jge loc_102A541  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A59F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A59F  +
push edi  +
push offset aPut_markrdpset  +
push offset dword_10043D8  +
push 6Dh  +
jmp loc_102A594  +
mov eax [ebp+var_4] +
mov eax [eax+0C22Ch] +
test eax eax +
jz loc_102A55C  +
mov ecx 4000h +
mov word ptr [ebp+pvarg.anonymous_0] cx +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
jmp loc_102A562  +
xor eax eax +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [esi] +
lea ecx [ebp+pvarg] +
push ecx  +
push esi  +
call dword ptr [eax+0A4h]  +
mov edi eax +
test edi edi +
jge loc_102A59F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A59F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A59F  +
push edi  +
push offset aPut_publisherc  +
push offset dword_10043D8  +
push 6Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi+0C44Ch] +
mov ecx [esi] +
neg eax  +
sbb eax eax +
push eax  +
push esi  +
call dword ptr [ecx+0C4h]  +
mov ebx eax +
test ebx ebx +
jge loc_102A5FF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A643  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A643  +
push ebx  +
push offset aPut_launchedvi  +
push offset dword_10043D8  +
push 6Fh  +
jmp loc_102A638  +
mov eax [edi+0C450h] +
mov ecx [esi] +
neg eax  +
sbb eax eax +
push eax  +
push esi  +
call dword ptr [ecx+0CCh]  +
mov ebx eax +
test ebx ebx +
jge loc_102A643  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A643  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A643  +
push ebx  +
push offset aPut_trustedzon  +
push offset dword_10043D8  +
push 70h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+0CA7Ch] edi +
jnz loc_102A6A4  +
cmp [esi+135Ch] edi +
jnz loc_102A6A4  +
cmp [esi+0C44Ch] edi +
jnz loc_102A6A4  +
push edi  +
call ds:GetModuleHandleW  +
push eax  +
cmp [esi+0C228h] edi +
jz loc_102A698  +
mov ecx [esi+0B3B4h] +
push ecx  +
lea ecx [esi+54h] +
call sub_1034881  +
push eax  +
call sub_10446C0  +
jmp loc_102A6A4  +
add esi 0C464h +
push esi  +
call sub_104476F  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_208] 0 +
mov eax ecx +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea ecx [eax+84D8h] +
mov [ebp+var_218] eax +
mov [ebp+var_214] 1 +
call sub_1042F5C  +
mov ebx 200h +
push ebx  +
lea eax [ebp+var_204] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
call sub_1050F9B  +
test eax eax +
jz loc_102A83F  +
mov eax [esi] +
push edi  +
mov edi offset aPassword51 +
push edi  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jz loc_102A83E  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+64h]  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_102A7FB  +
cmp eax 1000h +
jnb loc_102A7FB  +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+var_208] eax +
test eax eax +
jz loc_102A83E  +
push [ebp+hMem]  +
mov edx [esi] +
push eax  +
push edi  +
mov ecx esi +
call dword ptr [edx+3Ch]  +
test eax eax +
jz loc_102A829  +
mov eax [ebp+hMem] +
and [ebp+hMem] 0 +
mov [ebp+var_220] eax +
mov eax [ebp+var_208] +
mov [ebp+var_21C] eax +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+var_220] +
push eax  +
call sub_105112E  +
test eax eax +
jz loc_102A822  +
mov eax [ebp+var_210] +
cmp eax ebx +
jb loc_102A7B8  +
mov eax ebx +
push eax  +
push [ebp+hMem]  +
lea eax [ebp+var_204] +
push eax  +
call memcpy  +
mov ecx [ebp+var_218] +
add esp 0Ch +
lea eax [ebp+var_204] +
push eax  +
call sub_102A0FA  +
lea eax [ebp+var_204] +
mov byte ptr [eax] 0 +
inc eax  +
dec ebx  +
jnz loc_102A7E6  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_102A829  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A822  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A822  +
push offset dword_10043D8  +
push 0E5h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and [ebp+var_214] 0 +
cmp [ebp+var_208] 0 +
jz loc_102A83E  +
push [ebp+var_208]  +
call ds:LocalFree  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_214] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov esi offset dword_10043F4 +
mov eax [esi-4] +
and eax [ebx+0B3C0h] +
push dword ptr [esi]  +
mov edx [edi] +
neg eax  +
sbb eax eax +
neg eax  +
push eax  +
push 0  +
push dword ptr [esi-0Ch]  +
mov ecx edi +
call dword ptr [edx+54h]  +
test eax eax +
jz loc_102A8CB  +
inc [ebp+var_4]  +
add esi 10h +
cmp [ebp+var_4] 8 +
jb loc_102A871  +
mov eax [ebx+0B3C0h] +
mov edx [edi] +
shr eax 1Fh +
not eax  +
push 1  +
and eax 1 +
push eax  +
push 1  +
push offset aBitmapcacheper  +
mov ecx edi +
call dword ptr [edx+54h]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102A8FE  +
test byte ptr [eax+1Ch] 4 +
jz loc_102A8FE  +
mov ecx [ebp+var_4] +
shl ecx 4 +
push ds:off_10043E8[ecx]  +
push offset dword_10043D8  +
push 0E7h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor eax eax +
jmp loc_102A8C4  +
***
or dword ptr [ecx+8] 2 +
and dword ptr [ecx+0CA98h] 0 +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi+0CA8Ch] +
mov eax [ecx] +
push 0  +
push offset aRemoteapplicat  +
call dword ptr [eax+50h]  +
test eax eax +
jnz loc_102A96F  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102AA02  +
test byte ptr [eax+1Ch] 4 +
jz loc_102AA02  +
push esi  +
push offset aReadboolFailed  +
push offset dword_10043D8  +
push 0E9h  +
jmp loc_102A9F7  +
push [ebp+arg_4]  +
mov ecx [esi+0CA8Ch] +
mov eax [ecx] +
push 0  +
push offset aDisableconnect  +
call dword ptr [eax+50h]  +
test eax eax +
jnz loc_102A9B1  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102AA02  +
test byte ptr [eax+1Ch] 4 +
jz loc_102AA02  +
push esi  +
push offset aReadboolFailed  +
push offset dword_10043D8  +
push 0EAh  +
jmp loc_102A9F7  +
push [ebp+arg_C]  +
mov ecx [esi+0CA8Ch] +
push [ebp+arg_8]  +
mov eax [ecx] +
push offset word_1002174  +
push offset aWorkspaceId  +
call dword ptr [eax+34h]  +
test eax eax +
jnz loc_102AA06  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102AA02  +
test byte ptr [eax+1Ch] 4 +
jz loc_102AA02  +
push esi  +
push offset aReadstringUtre  +
push offset dword_10043D8  +
push 0EBh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax esi +
jmp loc_102AA08  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_102AA29  +
and dword ptr [esi] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [esi] eax +
test eax eax +
jz loc_102AA3A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_102AA61  +
cmp edx 7FFFFFFFh +
jbe loc_102AA63  +
mov eax ecx +
test eax eax +
jl loc_102AA8C  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_102AA7C  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_102AA8C  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1055017  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_102AAAB  +
cmp ecx 7FFFFFFFh +
jbe loc_102AAB0  +
mov eax 80070057h +
test eax eax +
jl loc_102AAED  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_102AAE0  +
cmp eax esi +
ja loc_102AAE0  +
jnz loc_102AAE8  +
mov [esi+edi] bl +
jmp loc_102AAE8  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_102AB16  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_102AB16  +
call sub_1054F9D  +
jmp loc_102AB1B  +
mov eax 80070057h +
test eax eax +
jge loc_102AB26  +
test edi edi +
jz loc_102AB26  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
or [ebp+var_4] 0FFFFFFFFh +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jge loc_102AB77  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102AB77  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102AB77  +
push eax  +
push offset aImsrdpdeviceGe  +
push offset dword_1004488  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
and [ebp+var_4] 0 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jge loc_102ABC8  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102ABC8  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102ABC8  +
push eax  +
push offset aImsrdpdevice_0  +
push offset dword_1004488  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jge loc_102AC15  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102AC15  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102AC15  +
push eax  +
push offset aImsrdpdeviceIs  +
push offset dword_1004488  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
cmp word ptr [ebp+var_4] ax +
setnz al  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
test eax eax +
jge loc_102AC68  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102AC68  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102AC68  +
push eax  +
push offset aImsrdpdevice_1  +
push offset dword_1004488  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
cmp word ptr [ebp+var_4] ax +
setnz al  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax] +
xor edx edx +
cmp [ebp+arg_0] dl +
setz dl  +
dec edx  +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jge loc_102ACC0  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102ACC0  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102ACC0  +
push eax  +
push offset aImsrdpdevicePu  +
push offset dword_1004488  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
and [ebp+var_4] 0 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jge loc_102AD10  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102AD10  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102AD10  +
push eax  +
push offset aImsrdpdevice_2  +
push offset dword_1004488  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
cmp word ptr [ebp+var_4] ax +
setnz al  +
leave   +
retn   +
***
mov edi edi +
push esi  +
lea esi [ecx+18h] +
cmp dword ptr [esi] 0 +
jnz loc_102AD65  +
mov eax [ecx+4] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jge loc_102AD65  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102AD65  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102AD65  +
push eax  +
push offset aImsrdpdevice_6  +
push offset dword_1004488  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
lea esi [ecx+1Ch] +
cmp dword ptr [esi] 0 +
jnz loc_102ADB3  +
mov eax [ecx+4] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+38h]  +
test eax eax +
jge loc_102ADB3  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102ADB3  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102ADB3  +
push eax  +
push offset aImsrdpdevice_8  +
push offset dword_1004488  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_102ADD3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hKey]  +
push [ebp+lpData]  +
push [ebp+lpValueName]  +
call sub_102A3BC  +
mov esi eax +
test esi esi +
jge loc_102AE1A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102AE5D  +
test byte ptr [eax+1Ch] 4 +
jz loc_102AE5D  +
push esi  +
push offset aReadmachinepol  +
push offset dword_10043C8  +
push 10h  +
jmp loc_102AE52  +
cmp esi 1 +
jnz loc_102AE5D  +
push [ebp+hKey]  +
push [ebp+lpData]  +
push [ebp+lpValueName]  +
call sub_102A39B  +
mov esi eax +
test esi esi +
jge loc_102AE5D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102AE5D  +
test byte ptr [eax+1Ch] 4 +
jz loc_102AE5D  +
push esi  +
push offset aReaduserpolicy  +
push offset dword_10043C8  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 104h  +
lea eax [esi+0C464h] +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_102AEB0  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102AEB0  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102AEB0  +
push eax  +
push offset dword_10043D8  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov dword ptr [esi+0C460h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
test eax eax +
jz loc_102AF26  +
cmp word ptr [eax] 0 +
jz loc_102AF26  +
push eax  +
lea esi [ecx+1254h] +
push 80h  +
push esi  +
call sub_101BD65  +
test eax eax +
jge loc_102AF60  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102AF14  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102AF14  +
push eax  +
push offset dword_10043D8  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push 100h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
jmp loc_102AF60  +
push 100h  +
add ecx 1254h +
push 0  +
push ecx  +
call memset  +
add esp 0Ch +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102AF60  +
test byte ptr [eax+1Ch] 2 +
jz loc_102AF60  +
push offset dword_10043D8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+0CA9Ch] 0 +
lea ecx [edi+54h] +
jz loc_102AF9A  +
call sub_1034881  +
push 1  +
push eax  +
mov ebx offset word_1002174 +
push ebx  +
push offset aAlternateFullA  +
jmp loc_102AFAD  +
call sub_1034881  +
push 1  +
push eax  +
mov ebx offset word_1002174 +
push ebx  +
push offset aFullAddress  +
mov esi [ebp+arg_0] +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+38h]  +
test eax eax +
jnz loc_102AFEC  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringUtr  +
push offset dword_10043D8  +
push 24h  +
jmp loc_102BA5F  +
mov eax [edi+84E4h] +
mov edx [esi] +
push 1  +
push eax  +
push 0  +
push offset aAudiomode  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102B038  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteintUtreg_  +
push offset dword_10043D8  +
push 25h  +
jmp loc_102BA5F  +
xor eax eax +
cmp [edi+0CA88h] eax +
jnz loc_102B048  +
mov eax [edi+8740h] +
mov edx [esi] +
push 1  +
push eax  +
push 1  +
push offset aRedirectprinte  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102B08E  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTscse  +
push offset dword_10043D8  +
push 26h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
push dword ptr [edi+8744h]  +
mov ecx esi +
push 0  +
push offset aRedirectcompor  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102B0D9  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_0  +
push offset dword_10043D8  +
push 27h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
push dword ptr [edi+8748h]  +
mov ecx esi +
push 1  +
push offset aRedirectsmartc  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102B124  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_1  +
push offset dword_10043D8  +
push 28h  +
jmp loc_102BA5F  +
xor eax eax +
cmp [edi+0CA84h] eax +
jnz loc_102B134  +
mov eax [edi+874Ch] +
mov edx [esi] +
push 1  +
push eax  +
push 1  +
push offset aRedirectclipbo  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102B17A  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_2  +
push offset dword_10043D8  +
push 29h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
push dword ptr [edi+875Ch]  +
mov ecx esi +
push 0  +
push offset aRedirectposdev  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102B1C5  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_3  +
push offset dword_10043D8  +
push 2Ah  +
jmp loc_102BA5F  +
mov eax [edi+8760h] +
mov edx [esi] +
push 1  +
push eax  +
push 1  +
push offset aRedirectdirect  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102B211  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_4  +
push offset dword_10043D8  +
push 2Bh  +
jmp loc_102BA5F  +
mov eax [esi] +
push 0  +
lea ecx [edi+8764h] +
push ecx  +
push ebx  +
push offset aDevicestoredir  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B25C  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_5  +
push offset dword_10043D8  +
push 2Ch  +
jmp loc_102BA5F  +
mov eax [esi] +
push 0  +
lea ecx [edi+8F64h] +
push ecx  +
push ebx  +
push offset aUsbdevicestore  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B2A7  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_5  +
push offset dword_10043D8  +
push 2Dh  +
jmp loc_102BA5F  +
mov eax [esi] +
push 0  +
lea ecx [edi+9764h] +
push ecx  +
push offset asc_1005984  +
push offset aDrivestoredire  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B2F6  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_6  +
push offset dword_10043D8  +
push 2Eh  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
push dword ptr [edi+0B3C4h]  +
mov ecx esi +
push 1  +
push offset aAutoreconnecti  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102B341  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolTsc_7  +
push offset dword_10043D8  +
push 2Fh  +
jmp loc_102BA5F  +
cmp dword ptr [edi+0C220h] 3 +
jnz loc_102B3A1  +
call sub_1059AD8  +
mov ecx [edi+0C21Ch] +
mov edx [esi] +
neg eax  +
push 1  +
sbb eax eax +
push ecx  +
and eax 2 +
push eax  +
push offset aAuthentication  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102B3A1  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteintUtre_0  +
push offset dword_10043D8  +
push 30h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
push dword ptr [edi+70A0h]  +
mov ecx esi +
push 0  +
push offset aPromptForCrede  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102B3EC  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolUtreg  +
push offset dword_10043D8  +
push 31h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
push dword ptr [edi+70B0h]  +
mov ecx esi +
push 1  +
push offset aNegotiateSecur  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102B437  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolUtr_0  +
push offset dword_10043D8  +
push 32h  +
jmp loc_102BA5F  +
mov eax [edi+135Ch] +
mov edx [esi] +
push 1  +
push eax  +
push 0  +
push offset aRemoteapplicat  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102B483  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolUtr_1  +
push offset dword_10043D8  +
push 33h  +
jmp loc_102BA5F  +
cmp dword ptr [edi+135Ch] 0 +
jz loc_102B78E  +
mov eax [esi] +
push 1  +
lea ecx [edi+136Ch] +
push ecx  +
push ebx  +
push offset aRemoteapplic_0  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B4DB  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_0  +
push offset dword_10043D8  +
push 34h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
lea ecx [edi+156Ch] +
push ecx  +
push ebx  +
push offset aRemoteapplic_1  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B526  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_1  +
push offset dword_10043D8  +
push 35h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 0  +
lea ecx [edi+1774h] +
push ecx  +
push ebx  +
push offset aRemoteapplic_2  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B571  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_2  +
push offset dword_10043D8  +
push 36h  +
jmp loc_102BA5F  +
cmp dword ptr [edi+1358h] 0 +
jz loc_102B78E  +
mov eax [esi] +
push 1  +
lea ecx [edi+29FCh] +
push ecx  +
push ebx  +
push offset aRemoteapplic_3  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B5C9  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_3  +
push offset dword_10043D8  +
push 37h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
lea ecx [edi+17F4h] +
push ecx  +
push ebx  +
push offset aRemoteapplic_4  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B614  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_4  +
push offset dword_10043D8  +
push 38h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
lea ecx [edi+19FCh] +
push ecx  +
push ebx  +
push offset aRemoteapplic_5  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B65F  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_5  +
push offset dword_10043D8  +
push 39h  +
jmp loc_102BA5F  +
mov eax [edi+1360h] +
mov edx [esi] +
push 1  +
push eax  +
push 0  +
push offset aRemoteapplic_6  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102B6AB  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolUtr_2  +
push offset dword_10043D8  +
push 3Ah  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
lea ecx [edi+2C04h] +
push ecx  +
push ebx  +
push offset aRemoteapplic_7  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B6F6  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_6  +
push offset dword_10043D8  +
push 3Bh  +
jmp loc_102BA5F  +
mov eax [edi+1364h] +
mov edx [esi] +
push 1  +
push eax  +
push 1  +
push offset aRemoteapplic_8  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102B742  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolUtr_3  +
push offset dword_10043D8  +
push 3Ch  +
jmp loc_102BA5F  +
mov eax [edi+1368h] +
mov edx [esi] +
push 1  +
push eax  +
push 0  +
push offset aDisableremotea  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102B78E  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolUtr_4  +
push offset dword_10043D8  +
push 3Dh  +
jmp loc_102BA5F  +
cmp dword ptr [edi+1354h] 0 +
mov eax [esi] +
push 1  +
jz loc_102B835  +
lea ecx [edi+6C8Ch] +
push ecx  +
push ebx  +
push offset aAlternateShell  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B7E6  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_7  +
push offset dword_10043D8  +
push 3Eh  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
lea ecx [edi+6E94h] +
push ecx  +
push ebx  +
push offset aShellWorkingDi  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B8BB  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_8  +
push offset dword_10043D8  +
push 3Fh  +
jmp loc_102BA5F  +
push ebx  +
push ebx  +
push offset aAlternateShell  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B876  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_7  +
push offset dword_10043D8  +
push 40h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
push ebx  +
push ebx  +
push offset aShellWorkingDi  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B8BB  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringU_8  +
push offset dword_10043D8  +
push 41h  +
jmp loc_102BA5F  +
mov eax [esi] +
push 1  +
lea ecx [edi+0B3D0h] +
push ecx  +
push ebx  +
push offset aGatewayhostnam  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102B906  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWritestringTsc  +
push offset dword_10043D8  +
push 42h  +
jmp loc_102BA5F  +
mov eax [esi] +
xor ebx ebx +
inc ebx  +
push ebx  +
push dword ptr [edi+0B5D0h]  +
mov ecx esi +
push 4  +
push offset aGatewayusageme  +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_102B953  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteintTscset  +
push offset dword_10043D8  +
push 43h  +
jmp loc_102BA5F  +
mov eax [esi] +
push ebx  +
push dword ptr [edi+0B5D4h]  +
mov ecx esi +
push 4  +
push offset aGatewaycredent  +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_102B99D  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteintTscs_0  +
push offset dword_10043D8  +
push 44h  +
jmp loc_102BA5F  +
mov eax [esi] +
push ebx  +
push dword ptr [edi+0B5D8h]  +
mov ecx esi +
push 0  +
push offset aGatewayprofile  +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_102B9E4  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteintTscs_1  +
push offset dword_10043D8  +
push 45h  +
jmp loc_102BA5F  +
mov eax [esi] +
push ebx  +
push dword ptr [edi+0B5DCh]  +
mov ecx esi +
push ebx  +
push offset aPromptcredenti  +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_102BA22  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteintTscs_2  +
push offset dword_10043D8  +
push 46h  +
jmp loc_102BA5F  +
mov eax [esi] +
push ebx  +
push dword ptr [edi+0C224h]  +
mov ecx esi +
push 0  +
push offset aUseRedirection  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102BA6D  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102BA6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BA6A  +
push esi  +
push offset aWriteboolUtr_5  +
push offset dword_10043D8  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
mov esi 200h +
push esi  +
push edi  +
mov ebx ecx +
call sub_102AAF4  +
test eax eax +
jge loc_102BAD0  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BB14  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BB14  +
push eax  +
push offset aStringcchlengt  +
push offset dword_10043D8  +
push 5Eh  +
jmp loc_102BB09  +
cmp [ebp+var_4] 0 +
jz loc_102BAD6  +
inc edi  +
inc edi  +
dec [ebp+var_4]  +
cmp word ptr [edi] 20h +
jz loc_102BAC5  +
push edi  +
push esi  +
lea eax [ebx+254h] +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_102BB1D  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BB14  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BB14  +
push eax  +
push offset aStringcchcopyF  +
push offset dword_10043D8  +
push 5Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
mov [ebx+254h] ax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
mov esi 200h +
push esi  +
push edi  +
mov ebx ecx +
call sub_102AAF4  +
test eax eax +
jge loc_102BB7D  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BBC1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BBC1  +
push eax  +
push offset aStringcchlengt  +
push offset dword_10043D8  +
push 60h  +
jmp loc_102BBB6  +
cmp [ebp+var_4] 0 +
jz loc_102BB83  +
inc edi  +
inc edi  +
dec [ebp+var_4]  +
cmp word ptr [edi] 20h +
jz loc_102BB72  +
push edi  +
push esi  +
lea eax [ebx+0A54h] +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_102BBCA  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BBC1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BBC1  +
push eax  +
push offset aStringcchcopyF  +
push offset dword_10043D8  +
push 61h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
mov [ebx+0A54h] ax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 6C8Ch +
push 104h  +
push ecx  +
call sub_101BD65  +
test eax eax +
jge loc_102BC1A  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BC1A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BC1A  +
push eax  +
push offset dword_10043D8  +
push 62h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 6E94h +
push 104h  +
push ecx  +
call sub_101BD65  +
test eax eax +
jge loc_102BC67  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BC67  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BC67  +
push eax  +
push offset dword_10043D8  +
push 63h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 156Ch +
push 104h  +
push ecx  +
call sub_101BD65  +
test eax eax +
jge loc_102BCB4  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BCB4  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BCB4  +
push eax  +
push offset dword_10043D8  +
push 65h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 17F4h +
push 104h  +
push ecx  +
call sub_101BD65  +
test eax eax +
jge loc_102BD01  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BD01  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BD01  +
push eax  +
push offset dword_10043D8  +
push 67h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 2C04h +
push 1F40h  +
push ecx  +
call sub_101BD65  +
test eax eax +
jge loc_102BD4E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BD4E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BD4E  +
push eax  +
push offset dword_10043D8  +
push 68h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and dword ptr [ebp+var_8] 0 +
push esi  +
lea esi [ecx+19FCh] +
mov ecx offset asc_1005EE4 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_102BD9A  +
test dx dx +
jz loc_102BD96  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_102BD9A  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_102BD74  +
xor eax eax +
jmp loc_102BD9F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_102BDAF  +
mov [ebp+var_4] 1 +
jmp loc_102BE91  +
push edi  +
push [ebp+pszPath]  +
call ds:PathFindExtensionW  +
push 1000h  +
mov [ebp+pszPath] eax +
call sub_105D670  +
mov edi eax +
test edi edi +
jnz loc_102BE02  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102BE86  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BE86  +
push offset aPszrdpextensio  +
push offset dword_10043D8  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_102BE86  +
push esi  +
push 800h  +
push edi  +
call sub_101BD65  +
test eax eax +
jge loc_102BE40  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102BE86  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102BE86  +
push eax  +
push offset aCopyExtensionL  +
push offset dword_10043D8  +
push 6Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_102BE86  +
lea eax [ebp+var_8] +
push eax  +
mov esi offset asc_1003DD4 +
push esi  +
push edi  +
jmp loc_102BE71  +
cmp word ptr [eax] 2Eh +
jnz loc_102BE6A  +
cmp word ptr [eax+2] 0 +
jz loc_102BE6A  +
push [ebp+pszPath]  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102BE7F  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push 0  +
call sub_10461EC  +
add esp 0Ch +
test eax eax +
jnz loc_102BE4D  +
jmp loc_102BE86  +
mov [ebp+var_4] 1 +
test edi edi +
jz loc_102BE90  +
push edi  +
call sub_105D688  +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_208] eax +
cmp [esi] di +
jz loc_102BF66  +
push ebx  +
mov eax lpReserved +
mov ebx offset dword_10043D8 +
cmp eax offset lpReserved +
jz loc_102BEF6  +
test byte ptr [eax+1Ch] 2 +
jz loc_102BEF6  +
push esi  +
push ebx  +
push 0E0h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
push esi  +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jl loc_102BFF5  +
cmp [ebp+var_204] 0 +
lea esi [ebp+var_204] +
jz loc_102BF38  +
movzx eax word ptr [esi] +
push eax  +
call ds:towupper  +
mov [esi] ax +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
pop ecx  +
jnz loc_102BF22  +
lea eax [ebp+var_204] +
push offset aAdmin  +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_102BF93  +
push eax  +
push 3448h  +
push eax  +
call sub_105B0B4  +
mov edi 80004005h +
jmp loc_102BFF5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102BFF6  +
test byte ptr [eax+1Ch] 2 +
jz loc_102BFF6  +
push offset dword_10043D8  +
push 0E1h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_102BFF6  +
mov eax lpReserved +
mov esi offset lpReserved +
cmp eax esi +
jz loc_102BFB8  +
test byte ptr [eax+1Ch] 2 +
jz loc_102BFB8  +
push ebx  +
push 0E2h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+var_208] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+2C0h]  +
mov edi eax +
test edi edi +
jge loc_102BFF5  +
mov eax lpReserved +
cmp eax esi +
jz loc_102BFF5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102BFF5  +
push edi  +
push offset aPut_connecttoa  +
push ebx  +
push 0E3h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
test esi esi +
jz loc_102C0CE  +
cmp [ebp+arg_4] 0 +
jz loc_102C07A  +
mov eax [esi] +
lea ecx [ebp+arg_4] +
push ecx  +
push esi  +
call dword ptr [eax+28h]  +
test eax eax +
jl loc_102C0D0  +
cmp [ebp+arg_4] 0 +
jz loc_102C0B4  +
push [ebp+arg_4]  +
mov ecx ebx +
call sub_102BB29  +
push [ebp+arg_4]  +
mov edi ds:SysFreeString +
call edi  +
mov eax [esi] +
lea ecx [ebp+var_4] +
push ecx  +
push esi  +
call dword ptr [eax+30h]  +
test eax eax +
jl loc_102C0D0  +
cmp [ebp+var_4] 0 +
jz loc_102C0B4  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_102BA7C  +
push [ebp+var_4]  +
call edi  +
mov eax [esi] +
and [ebp+var_8] 0 +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
call dword ptr [eax+9Ch]  +
test eax eax +
jl loc_102C0CE  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+1D0h]  +
test eax eax +
jl loc_102C0BB  +
xor eax eax +
cmp word ptr [ebp+arg_0] ax +
setnz al  +
mov [ebx+0B3BCh] eax +
jmp loc_102C0C5  +
mov eax 80004005h +
jmp loc_102C0D0  +
mov dword ptr [ebx+0B3BCh] 1 +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_10] 0 +
and [ebp+var_4] 0 +
push ebx  +
mov ebx ecx +
push esi  +
lea eax [ebx+70D8h] +
push edi  +
mov [ebp+var_8] eax +
mov esi 100h +
push esi  +
push [ebp+arg_0]  +
push [ebp+var_8]  +
call ds:__imp__wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_102C154  +
mov eax [ebp+var_4] +
mov [ebp+var_10] 1 +
mov [ebp+var_C] eax +
test eax eax +
jle loc_102C144  +
mov edi [ebp+var_8] +
lea eax [edi-200h] +
push eax  +
push esi  +
push edi  +
call sub_101BD65  +
dec [ebp+var_C]  +
sub edi 200h +
cmp [ebp+var_C] 0 +
jg loc_102C127  +
push [ebp+arg_0]  +
lea eax [ebx+70D8h] +
push esi  +
push eax  +
call sub_101BD65  +
inc [ebp+var_4]  +
add [ebp+var_8] 200h +
cmp [ebp+var_4] 0Ah +
jl loc_102C0FF  +
cmp [ebp+var_10] 0 +
jnz loc_102C1A4  +
mov [ebp+var_4] 9 +
lea edi [ebx+82D8h] +
lea eax [edi-200h] +
push eax  +
push esi  +
push edi  +
call sub_101BD65  +
dec [ebp+var_4]  +
sub edi 200h +
cmp [ebp+var_4] 0 +
jg loc_102C177  +
push [ebp+arg_0]  +
lea eax [ebx+70D8h] +
push esi  +
push eax  +
call sub_101BD65  +
lea eax [ebx+70D8h] +
push eax  +
mov edi offset word_1002174 +
push edi  +
push offset aMru0  +
mov esi offset aDefault +
push esi  +
call sub_1050A49  +
lea eax [ebx+72D8h] +
push eax  +
push edi  +
push offset aMru1  +
push esi  +
call sub_1050A49  +
lea eax [ebx+74D8h] +
push eax  +
push edi  +
push offset aMru2  +
push esi  +
call sub_1050A49  +
lea eax [ebx+76D8h] +
push eax  +
push edi  +
push offset aMru3  +
push esi  +
call sub_1050A49  +
lea eax [ebx+78D8h] +
push eax  +
push edi  +
push offset aMru4  +
push esi  +
call sub_1050A49  +
lea eax [ebx+7AD8h] +
push eax  +
push edi  +
push offset aMru5  +
push esi  +
call sub_1050A49  +
lea eax [ebx+7CD8h] +
push eax  +
push edi  +
push offset aMru6  +
push esi  +
call sub_1050A49  +
lea eax [ebx+7ED8h] +
push eax  +
push edi  +
push offset aMru7  +
push esi  +
call sub_1050A49  +
lea eax [ebx+80D8h] +
push eax  +
push edi  +
push offset aMru8  +
push esi  +
call sub_1050A49  +
add ebx 82D8h +
push ebx  +
push edi  +
push offset aMru9  +
push esi  +
call sub_1050A49  +
mov eax lpReserved +
pop edi  +
pop esi  +
pop ebx  +
cmp eax offset lpReserved +
jz loc_102C299  +
test byte ptr [eax+1Ch] 2 +
jz loc_102C299  +
push [ebp+arg_0]  +
push offset dword_10043D8  +
push 0E4h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor eax eax +
inc eax  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0CA7Ch] 0 +
jnz loc_102C2C3  +
lea ecx [esi+54h] +
call sub_1034881  +
push eax  +
mov ecx esi +
call sub_102C0DC  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 0B3D0h +
push 100h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 0BDFCh +
push 200h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 84F4h +
push 80h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 85F4h +
push 80h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+0C234h] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] ebx +
cmp eax 4 +
jz loc_102C378  +
cmp eax 3 +
jnz loc_102C3F4  +
cmp [edi+4] bx +
jnz loc_102C39E  +
cmp [edi+418h] ebx +
jz loc_102C396  +
lea eax [edi+210h] +
push eax  +
call sub_102BD57  +
test eax eax +
jz loc_102C39E  +
cmp [edi+624h] ebx +
jz loc_102C3F4  +
push 36C5h  +
push ebx  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
push esi  +
call sub_10270A0  +
mov ecx 80004005h +
mov [ebp+var_4] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102C5A4  +
test byte ptr [eax+1Ch] 4 +
jz loc_102C5A4  +
push ecx  +
push offset aAttemptedOverr  +
push offset dword_10043D8  +
push 0F9h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102C5A4  +
xor ebx ebx +
lea eax [edi+4] +
inc ebx  +
cmp word ptr [eax] 0 +
jz loc_102C40C  +
push eax  +
lea ecx [esi+54h] +
call sub_105B15D  +
mov [esi+20h] ebx +
xor eax eax +
cmp [edi+204h] eax +
jz loc_102C41C  +
mov [esi+0C200h] ebx +
cmp [edi+0E6Ch] eax +
jz loc_102C430  +
mov [esi+0C20Ch] ebx +
mov [esi+0C210h] ebx +
cmp [edi+0E68h] eax +
jz loc_102C444  +
mov [esi+0C204h] ebx +
mov [esi+0C208h] ebx +
mov ecx edi +
call sub_1040CB3  +
test eax eax +
jz loc_102C4A2  +
and dword ptr [esi+0C20Ch] 0 +
and dword ptr [esi+0C204h] 0 +
mov [esi+0C210h] ebx +
mov [esi+0C208h] ebx +
mov eax [edi+208h] +
mov ecx [edi+20Ch] +
mov [ebp+arg_0] ecx +
test eax eax +
jz loc_102C4A2  +
test ecx ecx +
jz loc_102C4A2  +
push eax  +
mov ecx esi +
call sub_101ED57  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101ED78  +
cmp dword ptr [edi+204h] 0 +
jnz loc_102C4A2  +
and dword ptr [esi+0C200h] 0 +
cmp dword ptr [edi+0C50h] 0 +
jz loc_102C4B1  +
mov [esi+0B3B4h] ebx +
cmp dword ptr [edi+418h] 0 +
jz loc_102C4C8  +
lea eax [edi+210h] +
push eax  +
mov ecx esi +
call sub_102BCBD  +
cmp dword ptr [edi+624h] 0 +
jz loc_102C4DF  +
lea eax [edi+41Ch] +
push eax  +
mov ecx esi +
call sub_102BD0A  +
lea ebx [edi+0A50h] +
test ebx ebx +
jz loc_102C53B  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102C4EE  +
sub eax edx +
sar eax 1 +
jz loc_102C53B  +
push ebx  +
push 104h  +
lea eax [esi+0C874h] +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_102C53B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102C53B  +
test byte ptr [eax+1Ch] 4 +
jz loc_102C53B  +
push offset dword_10043D8  +
push 0FAh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aCookie  +
push ebx  +
call ds:wcsstr  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_102C58B  +
add ebx 0Eh +
push 20h  +
push ebx  +
call ds:__imp_wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102C565  +
sub eax ebx +
jmp loc_102C576  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102C56A  +
sub eax edx +
sar eax 1 +
push eax  +
push ebx  +
push 104h  +
lea eax [esi+0C244h] +
push eax  +
call sub_102AA46  +
movzx eax word ptr [edi+0C5Ch] +
mov [esi+0C44Ch] eax +
mov eax [edi+0E64h] +
mov [esi+0C450h] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 298h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push offset hKey  +
lea ecx [ebp+var_298] +
push ecx  +
lea ecx [ebp+var_288] +
push ecx  +
xor esi esi +
push offset aTrustedcertthu  +
push eax  +
mov [ebp+var_288] esi +
mov [ebp+var_298] esi +
mov [ebp+var_28C] 80h +
mov [ebp+var_294] esi +
mov [ebp+var_290] esi +
call sub_10517A1  +
test eax eax +
jnz loc_102C646  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102C718  +
test byte ptr [eax+1Ch] 4 +
jz loc_102C718  +
push offset dword_10043D8  +
push 101h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_102C718  +
push ebx  +
lea eax [ebp+var_294] +
push eax  +
mov ebx offset asc_1003DD4 +
push ebx  +
push [ebp+var_288]  +
call sub_10461EC  +
add esp 0Ch +
cmp eax esi +
jz loc_102C717  +
push edi  +
push eax  +
push 100h  +
lea eax [ebp+var_284] +
push eax  +
call sub_101BD65  +
test eax eax +
jl loc_102C6EF  +
lea eax [ebp+var_284] +
push eax  +
call sub_10512F1  +
lea eax [ebp+var_284] +
mov [ebp+var_28C] 80h +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_102C6A0  +
lea ecx [ebp+var_28C] +
push ecx  +
lea ecx [ebp+var_84] +
push ecx  +
sub eax edx +
lea ecx [ebp+var_284] +
sar eax 1 +
push ecx  +
push eax  +
call sub_1051405  +
test eax eax +
jz loc_102C6EF  +
mov eax [ebp+var_28C] +
lea ecx [eax-1] +
mov eax [ebp+arg_8] +
cmp eax ecx +
jnz loc_102C6EF  +
mov esi [ebp+arg_4] +
lea ecx [eax-1] +
lea edi [ebp+var_84] +
xor eax eax +
cmps   +
jz loc_102C70C  +
lea eax [ebp+var_294] +
push eax  +
push ebx  +
xor esi esi +
push esi  +
call sub_10461EC  +
add esp 0Ch +
cmp eax esi +
jnz loc_102C66B  +
jmp loc_102C716  +
mov [ebp+var_290] 1 +
pop edi  +
pop ebx  +
cmp [ebp+var_288] 0 +
pop esi  +
jz loc_102C72D  +
push [ebp+var_288]  +
call sub_105D688  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_290] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp+Data] 0 +
push offset hKey  +
lea eax [ebp+Data] +
push eax  +
push offset aDisablepasswor  +
call sub_102ADDF  +
test eax eax +
jge loc_102C796  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102C796  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102C796  +
push eax  +
push offset aReadeffectivep  +
push offset dword_10043D8  +
push 11Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax dword ptr [ebp+Data] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0CA7Ch] ebx +
jnz loc_102C92A  +
cmp [esi+0C228h] ebx +
jz loc_102C7D2  +
lea ecx [esi+84D8h] +
call sub_1042F77  +
test eax eax +
jz loc_102C92A  +
mov ebx [ebp+arg_0] +
mov edx [ebx] +
push edi  +
mov edi 200h +
push edi  +
lea eax [esi+254h] +
push eax  +
push offset word_1002174  +
push offset aUsername  +
mov ecx ebx +
call dword ptr [edx+34h]  +
test eax eax +
jnz loc_102C82C  +
mov eax lpReserved +
mov ebx 80004005h +
cmp eax offset lpReserved +
jz loc_102C929  +
test byte ptr [eax+1Ch] 4 +
jz loc_102C929  +
push ebx  +
push offset aReadstringUt_0  +
push offset dword_10043D8  +
push 171h  +
jmp loc_102C91A  +
lea eax [esi+254h] +
push eax  +
call sub_1026E84  +
test eax eax +
jnz loc_102C88D  +
mov eax [ebx] +
push edi  +
lea ecx [esi+0A54h] +
push ecx  +
push offset word_1002174  +
push offset aDomain  +
mov ecx ebx +
call dword ptr [eax+34h]  +
test eax eax +
jnz loc_102C88D  +
mov eax lpReserved +
mov ebx 80004005h +
cmp eax offset lpReserved +
jz loc_102C929  +
test byte ptr [eax+1Ch] 4 +
jz loc_102C929  +
push ebx  +
push offset aReadstringUt_1  +
push offset dword_10043D8  +
push 172h  +
jmp loc_102C91A  +
lea ecx [esi+84D8h] +
call sub_1042F77  +
test eax eax +
jz loc_102C927  +
lea eax [esi+254h] +
push eax  +
push edi  +
lea eax [esi+654h] +
push eax  +
call sub_101BD65  +
mov ebx eax +
test ebx ebx +
jge loc_102C8DE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102C929  +
test byte ptr [eax+1Ch] 4 +
jz loc_102C929  +
push ebx  +
push offset aStringcchcopyS  +
push offset dword_10043D8  +
push 173h  +
jmp loc_102C91A  +
lea eax [esi+0A54h] +
push eax  +
push edi  +
add esi 0E54h +
push esi  +
call sub_101BD65  +
mov ebx eax +
test ebx ebx +
jge loc_102C927  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102C929  +
test byte ptr [eax+1Ch] 4 +
jz loc_102C929  +
push ebx  +
push offset aStringcchcop_0  +
push offset dword_10043D8  +
push 174h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102C929  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 608h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
push 1FEh  +
mov word ptr [ebp+var_204] ax +
xor ebx ebx +
lea eax [ebp+var_204+2] +
push ebx  +
push eax  +
mov esi ecx +
call memset  +
xor eax eax +
push 3FEh  +
mov [ebp+var_604] ax +
lea eax [ebp-602h] +
push ebx  +
push eax  +
call memset  +
add esp 18h +
cmp [esi+0C228h] ebx +
jz loc_102CAD3  +
lea ecx [esi+84D8h] +
call sub_1042F77  +
test eax eax +
jnz loc_102CAD3  +
lea eax [esi+254h] +
mov [ebp+var_608] eax +
cmp [eax] bx +
jz loc_102CB6A  +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
lea ecx [esi+54h] +
call sub_105B10A  +
mov edi eax +
cmp edi ebx +
jge loc_102CA0C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102CB6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102CB6C  +
push edi  +
push offset aGetservernam_0  +
push offset dword_10043D8  +
push 175h  +
jmp loc_102CB5B  +
push [ebp+var_608]  +
add esi 0A54h +
lea eax [ebp+var_604] +
cmp [esi] bx +
jnz loc_102CA63  +
push 200h  +
push eax  +
call sub_101BD65  +
mov edi eax +
cmp edi ebx +
jge loc_102CAAC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102CB6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102CB6C  +
push edi  +
push offset aStringcchcopyS  +
push offset dword_10043D8  +
push 176h  +
jmp loc_102CB5B  +
push esi  +
push offset aSS_0  +
push 200h  +
push eax  +
call sub_101BDD4  +
mov edi eax +
add esp 14h +
cmp edi ebx +
jge loc_102CAAC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102CB6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102CB6C  +
push edi  +
push offset aStringcchpri_0  +
push offset dword_10043D8  +
push 177h  +
jmp loc_102CB5B  +
lea eax [ebp+var_604] +
push eax  +
push offset word_1002174  +
push offset aUsernamehint  +
lea eax [ebp+var_204] +
push eax  +
push offset aServers  +
call sub_1051EA3  +
jmp loc_102CB6A  +
mov eax [edi] +
push ebx  +
lea ecx [esi+254h] +
push ecx  +
mov ebx offset word_1002174 +
push ebx  +
push offset aUsername  +
mov ecx edi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102CB1A  +
mov eax lpReserved +
mov edi 80004005h +
cmp eax offset lpReserved +
jz loc_102CB6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102CB6C  +
push edi  +
push offset aWritestringU_9  +
push offset dword_10043D8  +
push 178h  +
jmp loc_102CB5B  +
mov eax [edi] +
push 0  +
add esi 0A54h +
push esi  +
push ebx  +
push offset aDomain  +
mov ecx edi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102CB68  +
mov eax lpReserved +
mov edi 80004005h +
cmp eax offset lpReserved +
jz loc_102CB6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102CB6C  +
push edi  +
push offset aWritestring_10  +
push offset dword_10043D8  +
push 179h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102CB6C  +
xor ebx ebx +
xor edi edi +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102ADBC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
push offset aCtscsettings_0  +
mov esi ecx +
call sub_101CA2D  +
lea edi [esi+18h] +
mov ecx edi +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_1006394 +
call sub_1029FD5  +
and dword ptr [esi+0CA8Ch] 0 +
and dword ptr [esi+0CA90h] 0 +
push esi  +
lea ecx [esi+0CA94h] +
call sub_104364A  +
push 0CA74h  +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_10309A1  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_1006394 +
call sub_102A02A  +
lea edi [esi+0CA8Ch] +
mov ecx [edi] +
test ecx ecx +
jz loc_102CC3C  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push 0  +
mov ecx edi +
call sub_1054923  +
or dword ptr [esi+0Ch] 4 +
mov eax [esi+0BBF0h] +
test eax eax +
jz loc_102CC50  +
push eax  +
call sub_105D688  +
mov eax [esi+0B9E4h] +
test eax eax +
jz loc_102CC60  +
push eax  +
call sub_105D688  +
lea eax [esi+0CA90h] +
mov ecx [eax] +
test ecx ecx +
jz loc_102CC75  +
and dword ptr [eax] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
mov eax [edi] +
test eax eax +
jz loc_102CC84  +
and dword ptr [edi] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+18h] +
call sub_102A001  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
pop edi  +
mov dword ptr [esi+4] offset off_10025A4 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_102CD06  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_102CCFB  +
test byte ptr [eax+1Ch] 4 +
jz loc_102CCFB  +
push esi  +
push offset aPstoreIsNull  +
push offset dword_10043D8  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov [ebp+var_208] esi +
jmp loc_102D4BF  +
mov eax [edi+0C200h] +
mov edx [esi] +
push ebx  +
xor ebx ebx +
xor ecx ecx +
inc ebx  +
test eax eax +
setnz cl  +
push ebx  +
inc ecx  +
push ecx  +
push 2  +
push offset aScreenModeId  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102CD5D  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_1  +
push offset dword_10043D8  +
push 49h  +
jmp loc_102D49D  +
mov eax [edi+0C204h] +
mov [ebp+var_20C] eax +
test eax eax +
jz loc_102CDC0  +
cmp dword ptr [edi+0C208h] 0 +
jnz loc_102CDC0  +
mov eax [esi] +
push ebx  +
push [ebp+var_20C]  +
mov ecx esi +
push 0  +
push offset aSpanMonitors  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102CDC0  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_2  +
push offset dword_10043D8  +
push 4Ah  +
jmp loc_102D49D  +
cmp dword ptr [edi+0C210h] 0 +
mov eax [edi+0C20Ch] +
jnz loc_102CE14  +
mov edx [esi] +
push ebx  +
push eax  +
push 0  +
push offset aUseMultimon  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102CE14  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_3  +
push offset dword_10043D8  +
push 4Bh  +
jmp loc_102D49D  +
cmp [ebp+var_20C] 0 +
jnz loc_102CEB7  +
mov eax [edi+70D0h] +
mov edx [esi] +
push ebx  +
push eax  +
push 0  +
push offset aDesktopwidth  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102CE6C  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_4  +
push offset dword_10043D8  +
push 4Ch  +
jmp loc_102D49D  +
mov eax [edi+70D4h] +
mov edx [esi] +
push ebx  +
push eax  +
push 0  +
push offset aDesktopheight  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102CEB7  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_5  +
push offset dword_10043D8  +
push 4Dh  +
jmp loc_102D49D  +
mov eax [edi+84DCh] +
mov edx [esi] +
push ebx  +
push eax  +
push 0FFFFFFFFh  +
push offset aSessionBpp  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102CF02  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_6  +
push offset dword_10043D8  +
push 4Eh  +
jmp loc_102D49D  +
push dword ptr [edi+50h]  +
lea eax [ebp+var_204] +
push dword ptr [edi+4Ch]  +
push dword ptr [edi+48h]  +
push dword ptr [edi+44h]  +
push dword ptr [edi+30h]  +
push dword ptr [edi+2Ch]  +
push offset aUUDDDD  +
push 100h  +
push eax  +
call sub_101BDD4  +
add esp 24h +
mov [ebp+var_208] eax +
test eax eax +
jge loc_102CF68  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102D4BE  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4BE  +
push [ebp+var_208]  +
push offset aStringcchprint  +
push offset dword_10043D8  +
push 4Fh  +
jmp loc_102D270  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102CF8E  +
test [eax+1Ch] bl +
jz loc_102CF8E  +
push dword ptr [edi+48h]  +
push offset dword_10043D8  +
push 50h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi] +
push ebx  +
lea ecx [ebp+var_204] +
push ecx  +
push offset a0300800600  +
push offset aWinposstr  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102CFDC  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWritestring_11  +
push offset dword_10043D8  +
push 51h  +
jmp loc_102D49D  +
mov eax [esi] +
push ebx  +
push dword ptr [edi+1Ch]  +
mov ecx esi +
push ebx  +
push offset aCompression  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102D022  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteboolUtr_6  +
push offset dword_10043D8  +
push 52h  +
jmp loc_102D49D  +
mov eax [esi] +
push 0  +
push dword ptr [edi+86F4h]  +
mov ecx esi +
push 0  +
push offset aSmartSizing  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102D06D  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteboolUtr_7  +
push offset dword_10043D8  +
push 53h  +
jmp loc_102D49D  +
mov eax [edi+84E0h] +
mov edx [esi] +
push ebx  +
push eax  +
push 2  +
push offset aKeyboardhook  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102D0B8  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_7  +
push offset dword_10043D8  +
push 54h  +
jmp loc_102D49D  +
mov eax [edi+84E8h] +
mov edx [esi] +
push ebx  +
push eax  +
push 0  +
push offset aAudiocapturemo  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102D103  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteboolTsc_8  +
push offset dword_10043D8  +
push 55h  +
jmp loc_102D49D  +
mov eax [edi+84ECh] +
mov edx [esi] +
push ebx  +
push eax  +
push ebx  +
push offset aVideoplaybackm  +
mov ecx esi +
call dword ptr [edx+54h]  +
test eax eax +
jnz loc_102D14D  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteboolUtr_8  +
push offset dword_10043D8  +
push 56h  +
jmp loc_102D49D  +
mov eax [edi+0B3CCh] +
mov edx [esi] +
push ebx  +
push eax  +
push 2  +
push offset aConnectionType  +
mov ecx esi +
call dword ptr [edx+4Ch]  +
test eax eax +
jnz loc_102D198  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteintUtre_8  +
push offset dword_10043D8  +
push 57h  +
jmp loc_102D49D  +
mov eax [esi] +
push ebx  +
push dword ptr [edi+0B3B8h]  +
mov ecx esi +
push ebx  +
push offset aDisplayconnect  +
call dword ptr [eax+54h]  +
test eax eax +
jnz loc_102D1E1  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteboolTsc_9  +
push offset dword_10043D8  +
push 58h  +
jmp loc_102D49D  +
push dword ptr [edi+0B3BCh]  +
push ebx  +
push offset aPinconnectionb  +
push offset word_1002174  +
call sub_1050AC3  +
cmp dword ptr [edi+0CA80h] 0 +
jnz loc_102D208  +
mov eax [edi+709Ch] +
jmp loc_102D20A  +
xor eax eax +
test eax eax +
jnz loc_102D232  +
mov eax [esi] +
push offset aPassword50  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov eax [esi] +
push offset aSalt50  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov eax [esi] +
push offset aPassword51  +
mov ecx esi +
call dword ptr [eax+58h]  +
push esi  +
mov ecx edi +
call sub_102C937  +
mov [ebp+var_208] eax +
test eax eax +
jge loc_102D280  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102D4BE  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4BE  +
push [ebp+var_208]  +
push offset aSaveusernameto  +
push offset dword_10043D8  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102D4BE  +
push 4  +
lea ecx [edi+254h] +
lea eax [edi+654h] +
pop ebx  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_102D2B3  +
test dx dx +
jz loc_102D2AF  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_102D2B3  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_102D28F  +
xor eax eax +
jmp loc_102D2B8  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_102D3A8  +
lea ecx [edi+0A54h] +
lea eax [edi+0E54h] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_102D2F0  +
test dx dx +
jz loc_102D2EC  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_102D2F0  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_102D2CC  +
xor eax eax +
jmp loc_102D2F5  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_102D3A8  +
mov eax [esi] +
push offset aPassword50  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov eax [esi] +
push offset aSalt50  +
mov ecx esi +
call dword ptr [eax+58h]  +
lea ebx [edi+84D8h] +
mov ecx ebx +
call sub_1042F77  +
test eax eax +
jz loc_102D39C  +
cmp dword ptr [edi+0CA80h] 0 +
jnz loc_102D337  +
mov eax [edi+709Ch] +
jmp loc_102D339  +
xor eax eax +
test eax eax +
jz loc_102D39C  +
and [ebp+var_20C] 0 +
and [ebp+var_210] 0 +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push dword ptr [ebx]  +
call sub_105CFCA  +
test eax eax +
jl loc_102D3A8  +
push [ebp+var_210]  +
mov eax [esi] +
push [ebp+var_20C]  +
mov ecx esi +
push offset aPassword51  +
call dword ptr [eax+40h]  +
push [ebp+var_20C]  +
mov ebx eax +
call sub_105D688  +
test ebx ebx +
jnz loc_102D3A8  +
mov [ebp+var_208] 80004005h +
jmp loc_102D4BE  +
mov eax [esi] +
push offset aPassword51  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov eax [esi] +
push 0  +
lea ecx [edi+1254h] +
push ecx  +
mov ebx offset word_1002174 +
push ebx  +
push offset aLoadbalanceinf  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102D3F8  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWritestring_12  +
push offset dword_10043D8  +
push 5Ah  +
jmp loc_102D49D  +
mov eax [esi] +
push 0  +
lea ecx [edi+6A84h] +
push ecx  +
push ebx  +
push offset aWorkspaceId  +
mov ecx esi +
call dword ptr [eax+38h]  +
test eax eax +
jnz loc_102D43C  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWritestring_13  +
push offset dword_10043D8  +
push 5Bh  +
jmp loc_102D49D  +
push esi  +
mov ecx edi +
call sub_102A85A  +
test eax eax +
jnz loc_102D46E  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aWriteperfoptio  +
push offset dword_10043D8  +
push 5Ch  +
jmp loc_102D49D  +
mov ecx edi +
call sub_102C2A5  +
test eax eax +
jnz loc_102D4B0  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_102D4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_102D4A8  +
push esi  +
push offset aSaveregsetting  +
push offset dword_10043D8  +
push 5Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov [ebp+var_208] esi +
jmp loc_102D4BE  +
cmp [ebp+arg_4] 0 +
jz loc_102D4BE  +
push esi  +
mov ecx edi +
call sub_102AF6A  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_208] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6D8h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor eax eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov word ptr [ebp+var_6D8] ax +
mov word ptr [ebp+var_6A8] ax +
lea edi [ebp+var_6D8+2] +
stos   +
stos   +
mov ebx ecx +
xor ecx ecx +
stos   +
mov dword ptr [ebp+var_6A4] esi +
mov [ebp+var_6B8] ecx +
mov [ebp+var_6A0] ecx +
mov [ebp+var_6B4] ecx +
stos   +
mov [ebp+var_6AC] ecx +
mov [ebp+var_690] ecx +
mov [ebp+var_6C4] ecx +
mov [ebp+var_69C] ecx +
mov [ebp+var_698] ecx +
mov [ebp+var_694] ecx +
mov [ebp+var_6BC] ecx +
mov [ebp+var_68C] ecx +
mov [ebp+var_6B0] ecx +
cmp esi ecx +
jz loc_102F56A  +
mov eax [esi] +
lea ecx [ebp+var_698] +
push ecx  +
push offset dword_100C738  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_102D5B8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aQiForIid_ims_2  +
push offset dword_10043D8  +
push 71h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102F584  +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_69C] +
push edx  +
push eax  +
call dword ptr [ecx+0F8h]  +
mov edi eax +
test edi edi +
jge loc_102D5FD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aGet_securedset  +
push offset dword_10043D8  +
push 72h  +
jmp loc_102D5A8  +
mov eax [esi] +
lea ecx [ebp+var_694] +
push ecx  +
push offset loc_100C518  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_102D640  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aQiForIid_ims_0  +
push offset dword_10043D8  +
push 73h  +
jmp loc_102D5A8  +
mov eax [esi] +
lea ecx [ebp+var_6BC] +
push ecx  +
push offset dword_100C758  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_102D683  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aQiForIid_ims_3  +
push offset dword_10043D8  +
push 74h  +
jmp loc_102D5A8  +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_68C] +
push edx  +
push eax  +
call dword ptr [ecx+0ECh]  +
mov edi eax +
test edi edi +
jge loc_102D6CB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aGet_advancedse  +
push offset dword_10043D8  +
push 75h  +
jmp loc_102D5A8  +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_6B0] +
push edx  +
push offset dword_100C768  +
push eax  +
call dword ptr [ecx]  +
mov esi offset dword_10043D8 +
test eax eax +
jge loc_102D713  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_102D713  +
test byte ptr [ecx+1Ch] 4 +
jz loc_102D713  +
push eax  +
push offset aQiForIid_ims_4  +
push esi  +
push 76h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_6AC] +
push edx  +
push eax  +
call dword ptr [ecx+0FCh]  +
mov edi eax +
test edi edi +
jge loc_102D757  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aGet_remotepr_0  +
push esi  +
push 77h  +
jmp loc_102D5A8  +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_690] +
push edx  +
push eax  +
call dword ptr [ecx+0F0h]  +
mov edi eax +
test edi edi +
jge loc_102D79B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aGet_transports  +
push esi  +
push 78h  +
jmp loc_102D5A8  +
mov eax dword ptr [ebp+var_6A4] +
mov ecx [eax] +
lea edx [ebp+var_6C4] +
push edx  +
push offset loc_100FD1C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jge loc_102D7E0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aQiForIid_itswk  +
push esi  +
push 7Ah  +
jmp loc_102D5A8  +
lea edx [ebx+6A84h] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102D7EB  +
sub eax edi +
sar eax 1 +
jz loc_102D849  +
push dword ptr [ebx+0C240h]  +
mov eax [ebx+0C44Ch] +
push dword ptr [ebx+0C23Ch]  +
mov ecx [ebp+var_6C4] +
mov edi [ecx] +
push edx  +
push eax  +
push ecx  +
call dword ptr [edi+0Ch]  +
mov edi eax +
test edi edi +
jge loc_102D849  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aWorkspaceClien  +
push esi  +
push 7Bh  +
jmp loc_102D5A8  +
cmp dword ptr [ebx+70D4h] 0 +
jz loc_102F563  +
mov ecx [ebx+70D0h] +
test ecx ecx +
jz loc_102F563  +
mov eax [ebp+var_698] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov edi eax +
test edi edi +
jge loc_102D89F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_desktopwid  +
push esi  +
push 7Ch  +
jmp loc_102D5A8  +
mov eax [ebx+70D4h] +
mov ecx [ebp+var_698] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+50h]  +
mov edi eax +
test edi edi +
jge loc_102D8E0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_desktophei  +
push esi  +
push 7Dh  +
jmp loc_102D5A8  +
mov eax [ebx+0C20Ch] +
mov ecx [ebp+var_694] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+0D4h]  +
mov edi eax +
test edi edi +
jge loc_102D928  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_usemultimo  +
push esi  +
push 7Eh  +
jmp loc_102D5A8  +
mov ecx [ebx+84DCh] +
test ecx ecx +
jz loc_102D970  +
mov eax [ebp+var_698] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+94h]  +
mov edi eax +
test edi edi +
jge loc_102D970  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_colordepth  +
push esi  +
push 7Fh  +
jmp loc_102D5A8  +
mov eax [ebx+0C200h] +
mov ecx [ebp+var_698] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+0A8h]  +
mov edi eax +
test edi edi +
jge loc_102D9BB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_fullscre_0  +
push esi  +
push 80h  +
jmp loc_102D5A8  +
cmp dword ptr [ebx+1354h] 0 +
mov eax [ebp+var_69C] +
mov ecx [eax] +
jz loc_102DA54  +
lea edx [ebx+6C8Ch] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jge loc_102DA0C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_startprogr  +
push esi  +
push 81h  +
jmp loc_102D5A8  +
mov eax [ebp+var_69C] +
mov ecx [eax] +
lea edx [ebx+6E94h] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov edi eax +
test edi edi +
jge loc_102DAD4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_workdirFai  +
push esi  +
push 82h  +
jmp loc_102D5A8  +
lea edx [ebp+var_6A8] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jge loc_102DA90  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_startprogr  +
push esi  +
push 83h  +
jmp loc_102D5A8  +
mov eax [ebp+var_69C] +
mov ecx [eax] +
lea edx [ebp+var_6A8] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov edi eax +
test edi edi +
jge loc_102DAD4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_workdirFai  +
push esi  +
push 84h  +
jmp loc_102D5A8  +
mov eax [ebx+135Ch] +
mov ecx [ebp+var_6AC] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+1Ch]  +
mov edi eax +
test edi edi +
jge loc_102DB1C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_remoteprog  +
push esi  +
push 85h  +
jmp loc_102D5A8  +
mov eax [ebp+var_6AC] +
mov ecx [eax] +
lea edx [ebx+136Ch] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
test edi edi +
jge loc_102DB60  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_remoteappl  +
push esi  +
push 86h  +
jmp loc_102D5A8  +
mov eax [ebp+var_6AC] +
mov ecx [eax] +
lea edx [ebx+29FCh] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov edi eax +
test edi edi +
jge loc_102DBA4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_remoteap_0  +
push esi  +
push 87h  +
jmp loc_102D5A8  +
mov eax [ebp+var_6AC] +
mov ecx [eax] +
lea edx [ebx+2C04h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov edi eax +
test edi edi +
jge loc_102DBE8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_remoteap_0  +
push esi  +
push 88h  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
and [ebp+var_6C8] 0 +
mov ecx [eax] +
lea edx [ebp+var_6C8] +
push edx  +
push eax  +
call dword ptr [ecx+44h]  +
mov edi eax +
test edi edi +
jge loc_102DC33  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aGet_proxyissup  +
push esi  +
push 89h  +
jmp loc_102D5A8  +
cmp [ebp+var_6C8] 0 +
jz loc_102E19F  +
mov eax [ebp+var_690] +
mov ecx [eax] +
lea edx [ebx+0B3D0h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jge loc_102DC84  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayhos  +
push esi  +
push 8Ah  +
jmp loc_102D5A8  +
mov eax [ebx+0B5D0h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+24h]  +
mov edi eax +
test edi edi +
jge loc_102DCC8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayusa  +
push esi  +
push 8Bh  +
jmp loc_102D5A8  +
mov eax [ebx+0B5D8h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+2Ch]  +
mov edi eax +
test edi edi +
jge loc_102DD0C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaypro  +
push esi  +
push 8Ch  +
jmp loc_102D5A8  +
mov eax [ebx+0B5D4h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+34h]  +
mov edi eax +
test edi edi +
jge loc_102DD50  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaycre  +
push esi  +
push 8Dh  +
jmp loc_102D5A8  +
mov eax [ebx+0B5E0h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+54h]  +
mov edi eax +
test edi edi +
jge loc_102DD94  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaypre  +
push esi  +
push 8Eh  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
mov ecx [eax] +
lea edx [ebx+0B5E4h] +
push edx  +
push eax  +
call dword ptr [ecx+5Ch]  +
mov edi eax +
test edi edi +
jge loc_102DDD8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayp_0  +
push esi  +
push 8Fh  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
mov ecx [eax] +
lea edx [ebx+0B7E4h] +
push edx  +
push eax  +
call dword ptr [ecx+64h]  +
mov edi eax +
test edi edi +
jge loc_102DE1C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaysup  +
push esi  +
push 90h  +
jmp loc_102D5A8  +
mov eax [ebx+0B9E4h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+6Ch]  +
mov edi eax +
test edi edi +
jge loc_102DE60  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayenc  +
push esi  +
push 91h  +
jmp loc_102D5A8  +
mov eax [ebx+0B9E8h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+74h]  +
mov edi eax +
test edi edi +
jge loc_102DEA4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaye_0  +
push esi  +
push 92h  +
jmp loc_102D5A8  +
mov eax [ebx+0B5DCh] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+4Ch]  +
mov edi eax +
test edi edi +
jge loc_102DEE8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayc_0  +
push esi  +
push 93h  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
mov edx [eax] +
xor ecx ecx +
cmp dword ptr [ebx+0B5D4h] 5 +
setz cl  +
push ecx  +
push eax  +
call dword ptr [edx+90h]  +
mov edi eax +
test edi edi +
jge loc_102DF35  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayc_1  +
push esi  +
push 94h  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
mov ecx [eax] +
lea edx [ebx+0B9F0h] +
push edx  +
push eax  +
call dword ptr [ecx+98h]  +
mov edi eax +
test edi edi +
jge loc_102DF7C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayaut  +
push esi  +
push 95h  +
jmp loc_102D5A8  +
mov eax [ebx+0BBF0h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0A0h]  +
mov edi eax +
test edi edi +
jge loc_102DFC3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaye_1  +
push esi  +
push 96h  +
jmp loc_102D5A8  +
mov eax [ebx+0BBF4h] +
mov ecx [ebp+var_690] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0A8h]  +
mov edi eax +
test edi edi +
jge loc_102E00A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaye_2  +
push esi  +
push 97h  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
mov ecx [eax] +
lea edx [ebx+0BBFCh] +
push edx  +
push eax  +
call dword ptr [ecx+0B0h]  +
mov edi eax +
test edi edi +
jge loc_102E051  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaya_0  +
push esi  +
push 98h  +
jmp loc_102D5A8  +
lea ecx [ebx+0C1FCh] +
call sub_1042F77  +
test eax eax +
jz loc_102E19F  +
mov eax [ebp+var_690] +
mov ecx [eax] +
lea edx [ebx+0BDFCh] +
push edx  +
push eax  +
call dword ptr [ecx+7Ch]  +
mov edi eax +
test edi edi +
jge loc_102E0A8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayuse  +
push esi  +
push 99h  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
mov ecx [eax] +
push offset word_1002174  +
push eax  +
call dword ptr [ecx+84h]  +
mov edi eax +
test edi edi +
jge loc_102E0ED  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewayuse  +
push esi  +
push 9Ah  +
jmp loc_102D5A8  +
lea eax [ebp+var_6B4] +
push eax  +
lea eax [ebp+var_6A0] +
push eax  +
lea ecx [ebx+0C1FCh] +
call sub_1043103  +
mov edi eax +
test edi edi +
jge loc_102E137  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aGetproxypasswo  +
push esi  +
push 9Bh  +
jmp loc_102D5A8  +
mov eax [ebp+var_690] +
push [ebp+var_6A0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8Ch]  +
mov ecx [ebp+var_6A0] +
mov edi eax +
mov eax [ebp+var_6B4] +
add eax eax +
jz loc_102E165  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_102E15E  +
push [ebp+var_6A0]  +
call sub_105D688  +
test edi edi +
jge loc_102E19F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_gatewaypas  +
push esi  +
push 9Ch  +
jmp loc_102D5A8  +
mov edx [ebx+8740h] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+1ECh]  +
mov edi eax +
test edi edi +
jge loc_102E1EA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirectpr  +
push esi  +
push 9Dh  +
jmp loc_102D5A8  +
mov edx [ebx+8744h] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+1F4h]  +
mov edi eax +
test edi edi +
jge loc_102E235  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirectpo  +
push esi  +
push 9Eh  +
jmp loc_102D5A8  +
mov edx [ebx+8748h] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+1FCh]  +
mov edi eax +
test edi edi +
jge loc_102E280  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirectsm  +
push esi  +
push 9Fh  +
jmp loc_102D5A8  +
xor eax eax +
cmp [ebx+0CA84h] eax +
jnz loc_102E290  +
mov eax [ebx+874Ch] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+254h]  +
mov edi eax +
test edi edi +
jge loc_102E2D5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirectcl  +
push esi  +
push 0A0h  +
jmp loc_102D5A8  +
mov edx [ebx+8750h] +
mov eax [ebp+var_694] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+64h]  +
mov edi eax +
test edi edi +
jge loc_102E31D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirectdy  +
push esi  +
push 0A1h  +
jmp loc_102D5A8  +
mov edx [ebx+8754h] +
mov eax [ebp+var_694] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+6Ch]  +
mov edi eax +
test edi edi +
jge loc_102E365  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirectdy  +
push esi  +
push 0A2h  +
jmp loc_102D5A8  +
mov edx [ebx+875Ch] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+27Ch]  +
mov edi eax +
test edi edi +
jge loc_102E3B0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirect_0  +
push esi  +
push 0A3h  +
jmp loc_102D5A8  +
mov eax [ebx+84E0h] +
mov ecx [ebp+var_69C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+34h]  +
mov edi eax +
test edi edi +
jge loc_102E3F4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_keyboardho  +
push esi  +
push 0A4h  +
jmp loc_102D5A8  +
mov eax [ebx+84E4h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+25Ch]  +
mov edi eax +
test edi edi +
jge loc_102E43B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_audioredir  +
push esi  +
push 0A5h  +
jmp loc_102D5A8  +
mov eax [ebx+84E8h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+2C8h]  +
mov edi eax +
test edi edi +
jge loc_102E486  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_audiocaptu  +
push esi  +
push 0A6h  +
jmp loc_102D5A8  +
mov eax [ebx+84ECh] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+2D0h]  +
mov edi eax +
test edi edi +
jge loc_102E4CD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_videoplayb  +
push esi  +
push 0A7h  +
jmp loc_102D5A8  +
mov eax [ebx+84F0h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+2F0h]  +
mov edi eax +
test edi edi +
jge loc_102E514  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_audioquali  +
push esi  +
push 0A8h  +
jmp loc_102D5A8  +
mov eax [ebp+var_6B0] +
test eax eax +
jz loc_102E5DA  +
push 8  +
pop ecx  +
lea edx [ebp+var_6D8] +
mov word ptr [ebp+var_6D8] cx +
push edx  +
lea ecx [ebx+84F4h] +
push offset aAudioplaybackd  +
mov [ebp+var_6D0] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jge loc_102E57B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_propertyUt  +
push esi  +
push 0A9h  +
jmp loc_102D5A8  +
push 8  +
pop eax  +
mov word ptr [ebp+var_6D8] ax +
lea edx [ebp+var_6D8] +
lea eax [ebx+85F4h] +
push edx  +
mov [ebp+var_6D0] eax +
mov eax [ebp+var_6B0] +
mov ecx [eax] +
push offset aAudiocapturede  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jge loc_102E5DA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_property_0  +
push esi  +
push 0AAh  +
jmp loc_102D5A8  +
mov eax [ebx+8760h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+2F8h]  +
mov edi eax +
test edi edi +
jge loc_102E625  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_redirectdi  +
push esi  +
push 0ABh  +
jmp loc_102D5A8  +
mov eax [ebx+0B3CCh] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+300h]  +
mov edi eax +
test edi edi +
jge loc_102E66C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aPut_networkcon  +
push esi  +
push 0ACh  +
jmp loc_102D5A8  +
lea ecx [ebx+1254h] +
movzx eax word ptr [ecx] +
neg eax  +
sbb eax eax +
and eax ecx +
mov dword ptr [ebp+var_6A4] eax +
jz loc_102E7D1  +
and [ebp+len] 0 +
lea eax [ebp+len] +
push eax  +
push 80h  +
push dword ptr [ebp+var_6A4]  +
call sub_102AAF4  +
mov edi eax +
test edi edi +
jge loc_102E6D6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aStringcchlen_0  +
push esi  +
push 0ADh  +
jmp loc_102D5A8  +
push dword ptr [ebp+var_6A4]  +
add [ebp+len] 2 +
push offset aS_1  +
lea eax [ebp+psz] +
push 83h  +
push eax  +
call sub_102AA95  +
mov edi eax +
add esp 10h +
test edi edi +
jge loc_102E72D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F584  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F584  +
push edi  +
push offset aStringcchpri_1  +
push esi  +
push 0AEh  +
jmp loc_102D5A8  +
push [ebp+len]  +
lea eax [ebp+psz] +
push eax  +
call ds:SysAllocStringByteLen  +
mov [ebp+var_6B8] eax +
test eax eax +
jnz loc_102E780  +
mov eax lpReserved +
mov edi 8007000Eh +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push esi  +
push 0AFh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_102F56F  +
mov eax [ebp+var_68C] +
push [ebp+var_6B8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1DCh]  +
mov edi eax +
test edi edi +
jge loc_102E7D1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_loadbalanc  +
push esi  +
push 0B0h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102F56F  +
mov eax [ebp+var_698] +
mov edx [eax] +
lea ecx [ebx+254h] +
push ecx  +
push eax  +
call dword ptr [edx+2Ch]  +
mov edi eax +
test edi edi +
jge loc_102E812  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_usernameFa  +
push esi  +
push 0B1h  +
jmp loc_102E7C1  +
lea eax [ebx+254h] +
push eax  +
call sub_1026E84  +
test eax eax +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_6A8] +
jnz loc_102E836  +
lea edx [ebx+0A54h] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov edi eax +
test edi edi +
jge loc_102E86C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_domainFail  +
push esi  +
push 0B2h  +
jmp loc_102E7C1  +
cmp word ptr [ebx+254h] 0 +
jz loc_102E909  +
lea edi [ebx+84D8h] +
mov ecx edi +
call sub_1042F77  +
test eax eax +
jz loc_102E909  +
lea eax [ebp+var_6B4] +
push eax  +
lea eax [ebp+var_6A0] +
push eax  +
mov ecx edi +
call sub_1043103  +
test eax eax +
jl loc_102E909  +
mov eax [ebp+var_694] +
push [ebp+var_6A0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ecx [ebp+var_6A0] +
mov edi eax +
mov eax [ebp+var_6B4] +
add eax eax +
jz loc_102E8CF  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_102E8C8  +
push [ebp+var_6A0]  +
call sub_105D688  +
test edi edi +
jge loc_102E909  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_cleartextp  +
push esi  +
push 0B3h  +
jmp loc_102E7C1  +
push 100h  +
lea eax [ebp+var_288] +
lea ecx [ebx+54h] +
push eax  +
call sub_105B0F0  +
mov edi eax +
test edi edi +
jge loc_102E94E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aGetserverporti  +
push esi  +
push 0B4h  +
jmp loc_102E7C1  +
lea eax [ebp+var_288] +
push eax  +
call sub_1051A69  +
mov dword ptr [ebp+var_6A4] eax +
cmp eax 0FFFFFFFFh +
jz loc_102EA69  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102E992  +
test byte ptr [eax+1Ch] 2 +
jz loc_102E992  +
push dword ptr [ebp+var_6A4]  +
push esi  +
push 0B5h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push 100h  +
lea eax [ebp+var_488] +
push eax  +
lea eax [ebp+var_288] +
push eax  +
call sub_1051ADD  +
mov edi eax +
test edi edi +
jge loc_102E9DB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aGetservernamef  +
push esi  +
push 0B6h  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebp+var_6A4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8Ch]  +
mov edi eax +
test edi edi +
jge loc_102EA21  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_rdpportFai  +
push esi  +
push 0B7h  +
jmp loc_102E7C1  +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_488] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jge loc_102EAF4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_serverFail  +
push esi  +
push 0B8h  +
jmp loc_102E7C1  +
mov eax [ebx+86FCh] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+8Ch]  +
mov edi eax +
test edi edi +
jge loc_102EAB0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_rdpportFai  +
push esi  +
push 0B9h  +
jmp loc_102E7C1  +
mov eax [ebp+var_698] +
mov ecx [eax] +
lea edx [ebp+var_288] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jge loc_102EAF4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_serverFail  +
push esi  +
push 0BAh  +
jmp loc_102E7C1  +
mov eax [ebx+86F4h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+1A0h]  +
mov edi eax +
test edi edi +
jge loc_102EB3F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_smartsizin  +
push esi  +
push 0BBh  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebx+870Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+104h]  +
mov edi eax +
test edi edi +
jge loc_102EB85  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_bitmapvirt  +
push esi  +
push 0BCh  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebx+8710h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+204h]  +
mov edi eax +
test edi edi +
jge loc_102EBCB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_bitmapvi_0  +
push esi  +
push 0BDh  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebx+8714h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20Ch]  +
mov edi eax +
test edi edi +
jge loc_102EC11  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_bitmapvi_1  +
push esi  +
push 0BEh  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebx+8718h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+284h]  +
mov edi eax +
test edi edi +
jge loc_102EC57  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_bitmapvi_2  +
push esi  +
push 0BFh  +
jmp loc_102E7C1  +
mov eax [ebx+0B3C0h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
shr eax 1Fh +
not eax  +
and eax 1 +
push eax  +
push ecx  +
call dword ptr [edx+190h]  +
mov edi eax +
test edi edi +
jge loc_102ECA6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_bitmappers  +
push esi  +
push 0C0h  +
jmp loc_102E7C1  +
mov edx [ebx+8700h] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+94h]  +
mov edi eax +
test edi edi +
jge loc_102ECF1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_enablemous  +
push esi  +
push 0C1h  +
jmp loc_102E7C1  +
mov eax [ebx+1Ch] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+1Ch]  +
mov edi eax +
test edi edi +
jge loc_102ED32  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_compressFa  +
push esi  +
push 0C2h  +
jmp loc_102E7C1  +
mov eax [ebx+8704h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+9Ch]  +
mov edi eax +
test edi edi +
jge loc_102ED79  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_disablectr  +
push esi  +
push 0C3h  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
mov ecx [eax] +
lea edx [ebx+9F64h] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
mov edi eax +
test edi edi +
jge loc_102EDBD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_plugindlls  +
push esi  +
push 0C4h  +
jmp loc_102E7C1  +
mov edx [ebx+0B3B4h] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+2C0h]  +
mov edi eax +
test edi edi +
jge loc_102EE08  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_connectt_0  +
push esi  +
push 0C5h  +
jmp loc_102E7C1  +
mov edx [ebx+0B3B8h] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+1C4h]  +
mov edi eax +
test edi edi +
jge loc_102EE53  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_displaycon  +
push esi  +
push 0C6h  +
jmp loc_102E7C1  +
mov edx [ebx+0B3BCh] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+1CCh]  +
mov edi eax +
test edi edi +
jge loc_102EE9E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_pinconnect  +
push esi  +
push 0C7h  +
jmp loc_102E7C1  +
mov edx [ebx+0B3C4h] +
mov eax [ebp+var_68C] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+22Ch]  +
mov edi eax +
test edi edi +
jge loc_102EEE9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_enableauto  +
push esi  +
push 0C8h  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebx+0B3C8h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+234h]  +
mov edi eax +
test edi edi +
jge loc_102EF2F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_maxreconne  +
push esi  +
push 0C9h  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
mov ecx [eax] +
lea edx [ebx+8724h] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
mov edi eax +
test edi edi +
jge loc_102EF73  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_keyboardla  +
push esi  +
push 0CAh  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebx+8708h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0FCh]  +
mov edi eax +
test edi edi +
jge loc_102EFB9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_bitmapcach  +
push esi  +
push 0CBh  +
jmp loc_102E7C1  +
mov eax [ebx+0C21Ch] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+24Ch]  +
mov edi eax +
test edi edi +
jge loc_102F000  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_authentica  +
push esi  +
push 0CCh  +
jmp loc_102E7C1  +
mov eax [ebx+0CA7Ch] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+26Ch]  +
mov edi eax +
test edi edi +
jge loc_102F04B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_publicmode  +
push esi  +
push 0CDh  +
jmp loc_102E7C1  +
mov eax [ebx+0C214h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+2D8h]  +
mov edi eax +
test edi edi +
jge loc_102F096  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_enablesupe  +
push esi  +
push 0CEh  +
jmp loc_102E7C1  +
mov eax [ebp+var_68C] +
push dword ptr [ebx+0C218h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2E0h]  +
mov edi eax +
test edi edi +
jge loc_102F0DC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_superpanac  +
push esi  +
push 0CFh  +
jmp loc_102E7C1  +
mov edx [ebx+1368h] +
mov eax [ebp+var_694] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+0ECh]  +
mov edi eax +
test edi edi +
jge loc_102F127  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_disablerem  +
push esi  +
push 0D0h  +
jmp loc_102E7C1  +
mov eax [ebx+70B4h] +
mov ecx [ebp+var_694] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+5Ch]  +
mov edi eax +
test edi edi +
jge loc_102F16F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_enablecred  +
push esi  +
push 0D1h  +
jmp loc_102E7C1  +
xor ecx ecx +
cmp [ebx+70A0h] ecx +
jnz loc_102F181  +
cmp [ebx+70A4h] ecx +
jz loc_102F184  +
or ecx 0FFFFFFFFh +
mov eax [ebp+var_694] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+4Ch]  +
mov edi eax +
test edi edi +
jge loc_102F1C2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_promptforc  +
push esi  +
push 0D2h  +
jmp loc_102E7C1  +
mov eax [ebx+70A8h] +
mov ecx [ebp+var_694] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+0B4h]  +
mov edi eax +
test edi edi +
jge loc_102F20D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_allowcrede  +
push esi  +
push 0D3h  +
jmp loc_102E7C1  +
mov eax [ebx+70ACh] +
mov ecx [ebp+var_694] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+0BCh]  +
mov edi eax +
test edi edi +
jge loc_102F258  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_promptfo_0  +
push esi  +
push 0D4h  +
jmp loc_102E7C1  +
mov eax [ebx+70B0h] +
mov ecx [ebp+var_694] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+54h]  +
mov edi eax +
test edi edi +
jge loc_102F2A0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_negotiates  +
push esi  +
push 0D5h  +
jmp loc_102E7C1  +
push [ebp+var_694]  +
mov ecx ebx +
call sub_102A5B7  +
mov edi eax +
test edi edi +
jge loc_102F2DE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aApplytswasetti  +
push esi  +
push 0D6h  +
jmp loc_102E7C1  +
mov eax [ebx+0B3C0h] +
mov ecx [ebp+var_68C] +
mov edx [ecx] +
and eax 7FFFFFFFh +
push eax  +
push ecx  +
call dword ptr [edx+214h]  +
mov edi eax +
test edi edi +
jge loc_102F32A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_performanc  +
push esi  +
push 0D7h  +
jmp loc_102E7C1  +
push 100h  +
lea eax [ebp+var_688] +
push eax  +
lea ecx [ebx+54h] +
call sub_105B290  +
mov edi eax +
test edi edi +
jge loc_102F36F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aGetargumentspo  +
push esi  +
push 0D8h  +
jmp loc_102E7C1  +
push [ebp+var_68C]  +
lea eax [ebp+var_688] +
push eax  +
mov ecx ebx +
call sub_102BE9E  +
mov edi eax +
test edi edi +
jge loc_102F3B4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aApplyconnectio  +
push esi  +
push 0D9h  +
jmp loc_102E7C1  +
push [ebp+var_694]  +
mov ecx ebx +
call sub_102A45C  +
mov edi eax +
test edi edi +
jge loc_102F3F2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aApplyrdpsignin  +
push esi  +
push 0DAh  +
jmp loc_102E7C1  +
mov eax [ebx+0C228h] +
mov edi [ebp+var_694] +
mov ecx [edi] +
xor edx edx +
test eax eax +
setnz dl  +
dec edx  +
push edx  +
push edi  +
call dword ptr [ecx+84h]  +
mov edi eax +
test edi edi +
jge loc_102F441  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_warnaboutc  +
push esi  +
push 0DBh  +
jmp loc_102E7C1  +
mov eax [ebx+0C228h] +
mov edi [ebp+var_694] +
mov ecx [edi] +
xor edx edx +
test eax eax +
setnz dl  +
dec edx  +
push edx  +
push edi  +
call dword ptr [ecx+0ACh]  +
mov edi eax +
test edi edi +
jge loc_102F490  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_warnaboutp  +
push esi  +
push 0DCh  +
jmp loc_102E7C1  +
mov eax [ebx+0C228h] +
mov edi [ebp+var_694] +
mov ecx [edi] +
xor edx edx +
test eax eax +
setnz dl  +
dec edx  +
push edx  +
push edi  +
call dword ptr [ecx+0F4h]  +
mov edi eax +
test edi edi +
jge loc_102F4DF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_warnaboutd  +
push esi  +
push 0DDh  +
jmp loc_102E7C1  +
mov eax [ebx+0C228h] +
mov edi [ebp+var_694] +
mov ecx [edi] +
xor edx edx +
test eax eax +
setnz dl  +
dec edx  +
push edx  +
push edi  +
call dword ptr [ecx+7Ch]  +
mov edi eax +
test edi edi +
jge loc_102F523  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_warnabouts  +
push esi  +
push 0DEh  +
jmp loc_102E7C1  +
mov edx [ebx+0C224h] +
mov eax [ebp+var_6BC] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jge loc_102F56F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F56F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F56F  +
push edi  +
push offset aPut_useredirec  +
push esi  +
push 0DFh  +
jmp loc_102E7C1  +
mov edi 80004005h +
jmp loc_102F584  +
mov edi 80070057h +
cmp [ebp+var_6B8] 0 +
jz loc_102F584  +
push [ebp+var_6B8]  +
call ds:SysFreeString  +
mov eax [ebp+var_6B0] +
xor esi esi +
cmp eax esi +
jz loc_102F59C  +
mov [ebp+var_6B0] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_68C] +
cmp eax esi +
jz loc_102F5B2  +
mov [ebp+var_68C] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_6BC] +
cmp eax esi +
jz loc_102F5C8  +
mov [ebp+var_6BC] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_694] +
cmp eax esi +
jz loc_102F5DE  +
mov [ebp+var_694] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_698] +
cmp eax esi +
jz loc_102F5F4  +
mov [ebp+var_698] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_69C] +
cmp eax esi +
jz loc_102F60A  +
mov [ebp+var_69C] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_6C4] +
cmp eax esi +
jz loc_102F620  +
mov [ebp+var_6C4] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_690] +
cmp eax esi +
jz loc_102F636  +
mov [ebp+var_690] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_6AC] +
cmp eax esi +
jz loc_102F64C  +
mov [ebp+var_6AC] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_8] 80000002h +
mov [ebp+var_4] 80000001h +
xor esi esi +
push [ebp+arg_4]  +
mov ecx edi +
push [ebp+arg_0]  +
push [ebp+esi*4+var_8]  +
call sub_102C5B3  +
test eax eax +
jnz loc_102F6A0  +
inc esi  +
cmp esi 2 +
jb loc_102F67F  +
pop edi  +
pop esi  +
leave   +
retn 8  +
xor eax eax +
inc eax  +
jmp loc_102F69A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+lpFileName] +
push edi  +
push esi  +
mov [ebp+var_8] ecx +
call sub_10269EB  +
mov ebx offset lpReserved +
mov edi offset dword_10043D8 +
test eax eax +
jnz loc_102F78B  +
cmp [ebp+arg_4] eax +
jz loc_102F74B  +
call sub_10283C0  +
test eax eax +
jnz loc_102F70E  +
mov eax lpReserved +
cmp eax ebx +
jz loc_102F70A  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F70A  +
push esi  +
push edi  +
push 102h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax lpReserved +
xor esi esi +
jmp loc_102F713  +
mov eax lpReserved +
test esi esi +
jz loc_102F794  +
push esi  +
call sub_1026E18  +
test eax eax +
jnz loc_102F78B  +
mov eax lpReserved +
cmp eax ebx +
jz loc_102F747  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F747  +
push esi  +
push edi  +
push 103h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax lpReserved +
xor esi esi +
jmp loc_102F790  +
push eax  +
push esi  +
push 404h  +
push eax  +
call sub_105AE15  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102F77F  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F77F  +
push offset dword_10043D8  +
push 104h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+lpFileName] 80004005h +
jmp loc_102F83C  +
mov eax lpReserved +
test esi esi +
jnz loc_102F7C0  +
mov [ebp+lpFileName] 80004005h +
cmp eax ebx +
jz loc_102F83C  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F83C  +
push edi  +
push 105h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_102F83C  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_1053EA3  +
mov [ebp+lpFileName] eax +
test eax eax +
jge loc_102F814  +
mov eax lpReserved +
cmp eax ebx +
jz loc_102F7F4  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F7F4  +
push [ebp+lpFileName]  +
push edi  +
push 106h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
cmp [ebp+lpFileName] 8007000Dh +
push 0  +
setz al  +
push esi  +
lea eax [eax+eax+406h] +
push eax  +
push 0  +
call sub_105AE15  +
jmp loc_102F83C  +
push esi  +
mov esi [ebp+var_8] +
mov ecx esi +
call sub_102AE69  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+0CA8Ch] +
call sub_102AA12  +
push 0  +
lea ecx [ebp+var_4] +
call sub_1054923  +
and [ebp+lpFileName] 0 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
test ecx ecx +
jz loc_102F858  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push 0  +
lea ecx [ebp+var_4] +
call sub_1054923  +
mov ecx [ebp+var_4] +
mov eax ecx +
test ecx ecx +
jz loc_102F868  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+lpFileName] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov [ebp+var_C] ecx +
push edi  +
lea ecx [ebp-1] +
call sub_1034881  +
and [ebp+var_8] 0 +
mov eax lpReserved +
mov esi offset lpReserved +
mov edi offset dword_10043D8 +
cmp eax esi +
jz loc_102F8BB  +
test byte ptr [eax+1Ch] 2 +
jz loc_102F8BB  +
push [ebp+arg_0]  +
push edi  +
push 107h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
lea eax [ebp+var_8] +
push eax  +
call sub_1053E3A  +
mov ebx eax +
test ebx ebx +
jge loc_102F8FA  +
mov eax lpReserved +
cmp eax esi +
jz loc_102F979  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F979  +
push ebx  +
push offset aTscreatesettin  +
push edi  +
push 108h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102F979  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
xor ebx ebx +
push ebx  +
push [ebp+var_8]  +
lea ecx [ebp-1] +
push [ebp+arg_0]  +
call sub_1035014  +
test eax eax +
jz loc_102F954  +
mov eax lpReserved +
cmp eax esi +
jz loc_102F937  +
test byte ptr [eax+1Ch] 2 +
jz loc_102F937  +
push edi  +
push 109h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp+var_C] +
lea eax [ebp+var_8] +
push eax  +
add ecx 0CA8Ch +
call sub_102AA12  +
push ebx  +
lea ecx [ebp+var_8] +
call sub_1054923  +
jmp loc_102F979  +
mov eax lpReserved +
cmp eax esi +
jz loc_102F974  +
test byte ptr [eax+1Ch] 4 +
jz loc_102F974  +
push edi  +
push 10Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ebx 80004005h +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_102F992  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push 0  +
lea ecx [ebp+var_8] +
call sub_1054923  +
mov ecx [ebp+var_8] +
mov eax ecx +
test ecx ecx +
jz loc_102F9A2  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-1] +
call nullsub_3  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
test ebx ebx +
jnz loc_102FA07  +
mov esi 80070057h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FAF1  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FAF1  +
push offset dword_10043D8  +
push 118h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_102FADB  +
cmp dword ptr [edi+0CA7Ch] 0 +
jz loc_102FA18  +
xor esi esi +
inc esi  +
jmp loc_102FAF1  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
call sub_1053EA3  +
mov esi eax +
test esi esi +
jge loc_102FA5F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FADB  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FADB  +
push esi  +
push offset aFailedToOpenSe  +
push offset dword_10043D8  +
push 119h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102FADB  +
push [ebp+arg_4]  +
mov ecx edi +
push [ebp+var_4]  +
call sub_102CCAC  +
mov esi eax +
test esi esi +
jl loc_102FAB2  +
mov ecx [ebp+var_4] +
mov eax [ecx] +
push 0  +
call dword ptr [eax+10h]  +
mov esi eax +
test esi esi +
jge loc_102FAA6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FADB  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FADB  +
push esi  +
push offset aUnableToCommit  +
push offset dword_10043D8  +
push 11Ah  +
jmp loc_102FA52  +
push ebx  +
mov ecx edi +
call sub_102AE69  +
xor esi esi +
jmp loc_102FADB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FADB  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FADB  +
push ebx  +
push esi  +
push offset dword_10043D8  +
push 11Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029E9B  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_102FAF1  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push 0  +
lea ecx [ebp+var_4] +
call sub_1054923  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_102FB02  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 824h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov ebx ecx +
mov eax [ebx+0CA90h] +
push edi  +
xor edi edi +
mov [ebp+var_814] edi +
mov [ebp+var_810] edi +
mov [ebp+var_80C] edi +
mov dword ptr [ebp+var_824] 3Bh +
cmp eax edi +
jnz loc_102FB5A  +
xor esi esi +
inc esi  +
jmp loc_102FD39  +
mov ecx [eax] +
lea edx [ebp+var_814] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jge loc_102FBAB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FD39  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FD39  +
push esi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 150h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_102FD39  +
mov eax [ebp+var_814] +
mov ecx [eax] +
lea edx [ebp+var_810] +
push edx  +
push eax  +
call dword ptr [ecx+78h]  +
mov esi eax +
cmp esi edi +
jge loc_102FBF0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FD39  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FD39  +
push esi  +
push offset aImsrdpclient5G  +
push offset dword_10043D8  +
push 151h  +
jmp loc_102FB9B  +
mov eax [ebp+var_810] +
mov ecx [eax] +
lea edx [ebp+var_80C] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi edi +
jge loc_102FC38  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FD39  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FD39  +
push esi  +
push offset aImsrdpdrivecol  +
push offset dword_10043D8  +
push 152h  +
jmp loc_102FB9B  +
lea eax [ebx+9764h] +
push eax  +
push 400h  +
lea eax [ebp+String1] +
push eax  +
call sub_101BD65  +
mov esi eax +
cmp esi edi +
jge loc_102FC85  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FD39  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FD39  +
push esi  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 153h  +
jmp loc_102FB9B  +
mov edi ds:lstrcmpW +
push offset asc_1005984  +
lea eax [ebp+String1] +
push eax  +
call edi  +
mov esi eax +
neg esi  +
push offset asc_1005EE4  +
lea eax [ebp+String1] +
sbb esi esi +
push eax  +
inc esi  +
call edi  +
neg eax  +
sbb eax eax +
inc eax  +
xor edi edi +
test esi esi +
jz loc_102FDE5  +
cmp [ebp+var_80C] edi +
jbe loc_102FD2B  +
mov eax [ebp+var_810] +
and [ebp+var_808] 0 +
mov ecx [eax] +
lea edx [ebp+var_808] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_102FD78  +
mov edx [ebx+873Ch] +
mov eax [ebp+var_808] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_102FDC1  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_102FD22  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [ebp+var_80C] +
jb loc_102FCC5  +
mov eax [ebx+873Ch] +
mov [ebx+8750h] eax +
xor esi esi +
mov eax [ebp+var_810] +
test eax eax +
jz loc_102FD50  +
and [ebp+var_810] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_814] +
test eax eax +
jz loc_102FD67  +
and [ebp+var_814] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdrivec_0  +
push offset dword_10043D8  +
push 154h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_102FD39  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102FD39  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdrivePut  +
push offset dword_10043D8  +
push 155h  +
jmp loc_102FD9A  +
cmp eax edi +
jz loc_102FEB7  +
cmp [ebp+var_80C] edi +
jbe loc_102FE4A  +
mov eax [ebp+var_810] +
and [ebp+var_808] 0 +
mov ecx [eax] +
lea edx [ebp+var_808] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_102FE59  +
mov eax [ebp+var_808] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_102FE88  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_102FE41  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [ebp+var_80C] +
jb loc_102FDF5  +
mov dword ptr [ebx+8750h] 1 +
jmp loc_102FD37  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdrivec_0  +
push offset dword_10043D8  +
push 156h  +
jmp loc_102FD9A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdrivePut  +
push offset dword_10043D8  +
push 157h  +
jmp loc_102FD9A  +
cmp [ebp+var_80C] edi +
jbe loc_102FF1C  +
mov eax [ebp+var_810] +
and [ebp+var_808] 0 +
mov ecx [eax] +
lea edx [ebp+var_808] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_102FF77  +
mov eax [ebp+var_808] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_102FFA6  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_102FF13  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [ebp+var_80C] +
jb loc_102FEBF  +
and dword ptr [ebx+8750h] 0 +
lea eax [ebp+var_824] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
mov [ebp+lpString2] eax +
test eax eax +
jz loc_102FD37  +
mov edi offset dword_10043D8 +
push 0FFFFFFFFh  +
push offset aDynamicdrives  +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
xor esi esi +
inc esi  +
push esi  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_102FFD5  +
mov [ebx+8750h] esi +
jmp loc_10300C7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdrivec_0  +
push offset dword_10043D8  +
push 158h  +
jmp loc_102FD9A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdrivePut  +
push offset dword_10043D8  +
push 159h  +
jmp loc_102FD9A  +
and [ebp+var_818] 0 +
cmp [ebp+var_80C] 0 +
jbe loc_10300C7  +
mov eax [ebp+var_810] +
and [ebp+var_808] 0 +
mov ecx [eax] +
lea edx [ebp+var_808] +
push edx  +
push [ebp+var_818]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_10300EB  +
mov eax [ebp+var_808] +
mov ecx [eax] +
lea edx [ebp+var_820] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_1030116  +
push [ebp+lpString2]  +
push [ebp+var_820]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1030083  +
mov eax [ebp+var_808] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jge loc_1030083  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1030083  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1030083  +
push eax  +
push offset aImsrdpdrivePut  +
push edi  +
push 15Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
cmp [ebp+var_820] 0 +
jz loc_1030098  +
push [ebp+var_820]  +
call ds:SysFreeString  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_10300AF  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+var_818]  +
mov eax [ebp+var_818] +
cmp eax [ebp+var_80C] +
jb loc_102FFE9  +
lea eax [ebp+var_824] +
push eax  +
push 0  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
mov [ebp+lpString2] eax +
test eax eax +
jnz loc_102FF4C  +
jmp loc_102FD37  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdrivec_0  +
push edi  +
push 15Ah  +
jmp loc_102FD9A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_102FDA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_102FDA5  +
push esi  +
push offset aImsrdpdriveGet  +
push edi  +
push 15Bh  +
jmp loc_102FD9A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 82Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 7FEh  +
mov word ptr [ebp+var_804] ax +
xor edi edi +
lea eax [ebp+var_804+2] +
mov esi ecx +
push edi  +
push eax  +
mov [ebp+var_820] esi +
call memset  +
mov eax [esi+0CA90h] +
xor ebx ebx +
inc ebx  +
add esp 0Ch +
mov [ebp+var_82C] edi +
mov [ebp+var_81C] ebx +
mov [ebp+var_814] edi +
mov [ebp+var_810] edi +
mov [ebp+var_824] edi +
cmp eax edi +
jz loc_10305AD  +
mov ecx [eax] +
lea edx [ebp+var_814] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx edi +
jge loc_1030206  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10305AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10305AD  +
push ebx  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 15Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10305AD  +
mov eax [ebp+var_814] +
mov ecx [eax] +
lea edx [ebp+var_810] +
push edx  +
push eax  +
call dword ptr [ecx+78h]  +
mov ebx eax +
cmp ebx edi +
jge loc_103024B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10305AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10305AD  +
push ebx  +
push offset aImsrdpclient5G  +
push offset dword_10043D8  +
push 15Eh  +
jmp loc_10301F6  +
mov eax [ebp+var_810] +
mov ecx [eax] +
lea edx [ebp+var_824] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov ebx eax +
cmp ebx edi +
jge loc_1030293  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10305AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10305AD  +
push ebx  +
push offset aImsrdpdrivec_1  +
push offset dword_10043D8  +
push 15Fh  +
jmp loc_10301F6  +
cmp [ebp+var_824] 0 +
mov [ebp+var_818] edi +
mov esi offset dword_10043D8 +
mov edi 400h +
jbe loc_1030432  +
mov eax [ebp+var_810] +
and [ebp+var_808] 0 +
mov ecx [eax] +
lea edx [ebp+var_808] +
push edx  +
push [ebp+var_818]  +
push eax  +
call dword ptr [ecx+10h]  +
mov ebx eax +
test ebx ebx +
jl loc_1030492  +
mov eax [ebp+var_808] +
mov ecx [eax] +
lea edx [ebp+var_828] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jl loc_10304DB  +
cmp word ptr [ebp+var_828] ax +
jz loc_10303FD  +
mov [ebp+var_80C] eax +
mov eax [ebp+var_808] +
mov ecx [eax] +
lea edx [ebp+var_80C] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_10304FB  +
cmp [ebp+var_82C] 0 +
push [ebp+var_80C]  +
lea eax [ebp+var_804] +
push edi  +
push eax  +
jnz loc_103037B  +
call sub_101BD65  +
test eax eax +
jge loc_103036F  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103036F  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103036F  +
push eax  +
push esi  +
push 163h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov [ebp+var_82C] 1 +
jmp loc_10303AA  +
call sub_1027578  +
test eax eax +
jge loc_10303AA  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10303AA  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10303AA  +
push eax  +
push esi  +
push 164h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push offset asc_1008B48  +
push edi  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
mov ebx eax +
test ebx ebx +
jge loc_10303E6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10303E6  +
test byte ptr [eax+1Ch] 4 +
jz loc_10303E6  +
push ebx  +
push esi  +
push 165h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp [ebp+var_80C] 0 +
jz loc_1030403  +
push [ebp+var_80C]  +
call ds:SysFreeString  +
jmp loc_1030403  +
mov [ebp+var_81C] eax +
mov eax [ebp+var_808] +
test eax eax +
jz loc_103041A  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+var_818]  +
mov eax [ebp+var_818] +
cmp eax [ebp+var_824] +
jb loc_10302B0  +
mov eax [ebp+var_820] +
cmp dword ptr [eax+8750h] 0 +
jz loc_103051B  +
push offset aDynamicdrives  +
push edi  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
mov ebx eax +
test ebx ebx +
jge loc_1030522  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030522  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030522  +
push ebx  +
push esi  +
push 166h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1030522  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10304BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10304BB  +
push ebx  +
push offset aImsrdpdrivec_0  +
push esi  +
push 160h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_10305AD  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10305AD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10304BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10304BB  +
push ebx  +
push offset aImsrdpdriveG_0  +
push esi  +
push 161h  +
jmp loc_10304B0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10304BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10304BB  +
push ebx  +
push offset aImsrdpdriveG_1  +
push esi  +
push 162h  +
jmp loc_10304B0  +
and [ebp+var_81C] 0 +
cmp [ebp+var_81C] 0 +
jz loc_103056B  +
mov eax [ebp+var_820] +
push offset asc_1005EE4  +
push edi  +
add eax 9764h +
push eax  +
call sub_101BD65  +
mov ebx eax +
test ebx ebx +
jge loc_10305AB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10305AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10305AD  +
push ebx  +
push offset aStringcchcop_1  +
push esi  +
push 167h  +
jmp loc_10301F6  +
lea eax [ebp+var_804] +
push eax  +
mov eax [ebp+var_820] +
push edi  +
add eax 9764h +
push eax  +
call sub_101BD65  +
test ebx ebx +
jge loc_10305AB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10305AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10305AD  +
push ebx  +
push offset aStringcchcop_1  +
push esi  +
push 168h  +
jmp loc_10301F6  +
xor ebx ebx +
mov eax [ebp+var_810] +
test eax eax +
jz loc_10305C4  +
and [ebp+var_810] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_814] +
test eax eax +
jz loc_10305DB  +
and [ebp+var_814] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jnz loc_103063A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030630  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030630  +
push offset dword_10043D8  +
push 16Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 80004003h +
jmp loc_10306D5  +
mov eax [ecx+0CA90h] +
test eax eax +
jnz loc_103064E  +
mov edi 8000FFFFh +
jmp loc_10306D5  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jge loc_1030691  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10306D5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10306D5  +
push edi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 16Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10306D5  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov edi eax +
test edi edi +
jge loc_10306C8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10306D5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10306D5  +
push edi  +
push offset aImsrdpclient_0  +
push offset dword_10043D8  +
push 16Ch  +
jmp loc_1030684  +
mov eax [ebp+var_4] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor edi edi +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10306E6  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_10306F7  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jnz loc_103074D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030743  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030743  +
push offset dword_10043D8  +
push 16Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 80004003h +
jmp loc_10307E8  +
mov eax [ecx+0CA90h] +
test eax eax +
jnz loc_1030761  +
mov edi 8000FFFFh +
jmp loc_10307E8  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jge loc_10307A4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10307E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10307E8  +
push edi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 16Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10307E8  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+78h]  +
mov edi eax +
test edi edi +
jge loc_10307DB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10307E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10307E8  +
push edi  +
push offset aImsrdpclient5G  +
push offset dword_10043D8  +
push 16Fh  +
jmp loc_1030797  +
mov eax [ebp+var_4] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor edi edi +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10307F9  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_103080A  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102CB84  +
mov ecx [ebp+arg_4] +
xor ebx ebx +
lea eax [esi+4] +
mov [eax] ebx +
push eax  +
lea edi [esi+8] +
push offset dword_100C5D8  +
mov [edi] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] bl +
mov [esi+11h] bl +
mov [esi+12h] bl +
mov [esi+13h] bl +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
mov edx [ecx] +
push ecx  +
call dword ptr [edx]  +
cmp eax ebx +
jge loc_103088B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103088B  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103088B  +
push eax  +
push offset aQiForIid_ims_5  +
push offset dword_1004488  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [esi] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
jge loc_10308C4  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10308C4  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10308C4  +
push eax  +
push offset aImsrdpdeviceco  +
push offset dword_1004488  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
push edi  +
mov edi ds:SysFreeString +
test eax eax +
jz loc_10308E8  +
push eax  +
call edi  +
mov eax [esi+18h] +
test eax eax +
jz loc_10308F2  +
push eax  +
call edi  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_10308FC  +
push eax  +
call edi  +
mov eax [esi+4] +
test eax eax +
jz loc_103090D  +
and dword ptr [esi+4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi] +
test eax eax +
jz loc_103091C  +
and dword ptr [esi] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx] +
push ebx  +
xor ebx ebx +
push edi  +
cmp eax ebx +
jnz loc_103093E  +
cmp [ebp+arg_0] ebx +
jnz loc_1030994  +
xor eax eax +
inc eax  +
jmp loc_1030996  +
mov edi [ebp+arg_0] +
cmp edi ebx +
jz loc_1030994  +
push esi  +
lea edx [ebp+arg_0] +
push edx  +
mov esi offset dword_100C344 +
push esi  +
mov [ebp+arg_0] ebx +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp+var_4] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp+var_4] +
xor ecx ecx +
cmp [ebp+arg_0] eax +
setz cl  +
mov esi ecx +
cmp eax ebx +
jz loc_103097F  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_103098F  +
mov [ebp+arg_0] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
jmp loc_1030996  +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102CC0A  +
test byte ptr [ebp+8] 1 +
jz loc_10309BB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov eax [ecx] +
push edi  +
mov edi [ebp+arg_0] +
call dword ptr [eax+8]  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jge loc_1030A2E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030D00  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030D00  +
push ebx  +
push offset aInitializeFail  +
push offset dword_10043D8  +
push 0F0h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1030D00  +
cmp [edi+838h] eax +
jnz loc_1030CA9  +
cmp [edi+83Ch] eax +
jnz loc_1030CA9  +
cmp [edi+840h] eax +
jz loc_1030AE7  +
add edi 844h +
push edi  +
mov ecx esi +
call sub_102F874  +
mov ebx eax +
test ebx ebx +
jge loc_1030A92  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030D00  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030D00  +
push ebx  +
push offset aInitsettingsfr  +
push offset dword_10043D8  +
push 0F2h  +
jmp loc_1030A1E  +
push edi  +
push 104h  +
lea eax [esi+0C66Ch] +
push eax  +
call sub_101BD65  +
mov ebx eax +
test ebx ebx +
jge loc_1030AD9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030D00  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030D00  +
push ebx  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 0F3h  +
jmp loc_1030A1E  +
xor edi edi +
inc edi  +
mov [esi+0C45Ch] edi +
jmp loc_1030CFD  +
add edi 0C5Ch +
cmp [edi] ax +
jz loc_1030B3F  +
push eax  +
push edi  +
mov ecx esi +
call sub_102F6AA  +
mov ebx eax +
test ebx ebx +
jge loc_1030B30  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030D00  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030D00  +
push ebx  +
push offset aFailedToInit_1  +
push offset dword_10043D8  +
push 0F4h  +
jmp loc_1030A1E  +
and dword ptr [esi+0C454h] 0 +
xor edi edi +
inc edi  +
jmp loc_1030CF7  +
xor edi edi +
push 104h  +
lea eax [ebp+FileName] +
inc edi  +
push eax  +
mov [esi+0C228h] edi +
call sub_1028518  +
test eax eax +
jnz loc_1030B9C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030B84  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030B84  +
push offset dword_10043D8  +
push 0F5h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 0  +
push 40Ah  +
push 0  +
call sub_105B0B4  +
mov ebx 80004005h +
jmp loc_1030D00  +
push edi  +
lea eax [ebp+FileName] +
push eax  +
mov ecx esi +
call sub_102F6AA  +
mov ebx eax +
test ebx ebx +
jl loc_1030BCA  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesW  +
not eax  +
and eax edi +
mov [esi+18h] eax +
jmp loc_1030D00  +
and [ebp+var_210] 0 +
mov eax lpReserved +
mov edi offset lpReserved +
cmp eax edi +
jz loc_1030BFA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030BFA  +
push offset dword_10043D8  +
push 0F6h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
lea eax [ebp+var_210] +
push eax  +
call sub_1053E3A  +
mov ebx eax +
test ebx ebx +
jge loc_1030C56  +
mov eax lpReserved +
cmp eax edi +
jz loc_1030C36  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030C36  +
push ebx  +
push offset aTscreatesettin  +
push offset dword_10043D8  +
push 0F7h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_210] +
test eax eax +
jz loc_1030D00  +
and [ebp+var_210] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1030D00  +
mov ecx [ebp+var_210] +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jge loc_1030C88  +
mov eax lpReserved +
cmp eax edi +
jz loc_1030C36  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030C36  +
push ebx  +
push offset aSettonullstore  +
push offset dword_10043D8  +
push 0F8h  +
jmp loc_1030C2B  +
lea eax [ebp+var_210] +
push eax  +
lea ecx [esi+0CA8Ch] +
call sub_102AA12  +
push 0  +
lea ecx [ebp+var_210] +
call sub_1054923  +
jmp loc_1030C36  +
push eax  +
lea eax [edi+628h] +
push eax  +
mov ecx esi +
call sub_102F6AA  +
mov ebx eax +
test ebx ebx +
jge loc_1030CE5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1030D00  +
test byte ptr [eax+1Ch] 4 +
jz loc_1030D00  +
push ebx  +
push offset aFailedToInit_1  +
push offset dword_10043D8  +
push 0F1h  +
jmp loc_1030A1E  +
mov eax [edi+838h] +
mov [esi+0C454h] eax +
mov edi [edi+83Ch] +
mov [esi+0C458h] edi +
mov [esi+20h] edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+var_C] +
xor esi esi +
push ecx  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call dword ptr [eax+74h]  +
test eax eax +
jge loc_1030D7E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1030F6C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1030F6C  +
push eax  +
push offset aItssettingssto  +
push offset dword_10043D8  +
push 0FBh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1030F6C  +
mov eax [ebp+var_C] +
sub eax 0 +
jz loc_1030F5F  +
dec eax  +
jz loc_1030DB2  +
dec eax  +
jnz loc_1030E5C  +
mov eax [edi] +
lea ecx [ebx+0C230h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+78h]  +
test eax eax +
jl loc_1030E5C  +
push 2  +
pop esi  +
jmp loc_1030F6C  +
mov edx [edi] +
lea eax [ebx+0C230h] +
push eax  +
mov ecx edi +
call dword ptr [edx+78h]  +
test eax eax +
jge loc_1030E63  +
mov ecx lpReserved +
mov edi offset dword_10043D8 +
cmp ecx offset lpReserved +
jz loc_1030DFF  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1030DFF  +
push dword ptr [ebx+0C230h]  +
push eax  +
push edi  +
push 0FCh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_101E297  +
mov ecx lpReserved +
mov eax [ebx+0C230h] +
test eax 200000h +
jnz loc_1030E3B  +
test eax 1000h +
jz loc_1030E42  +
cmp eax 1002h +
jnz loc_1030E3B  +
cmp ecx offset lpReserved +
jz loc_1030E5C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1030E5C  +
push edi  +
push 0FDh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1018898  +
jmp loc_1030E5C  +
push 5  +
jmp loc_1030DAC  +
test eax 10000h +
jz loc_1030E51  +
xor esi esi +
inc esi  +
jmp loc_1030F6C  +
test eax 10100000h +
jz loc_1030F6C  +
xor esi esi +
jmp loc_1030F6C  +
mov eax [edi] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx edi +
call dword ptr [eax+7Ch]  +
test eax eax +
jge loc_1030EA3  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1030F6C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1030F6C  +
push eax  +
push offset aItssettingss_0  +
push offset dword_10043D8  +
push 0FEh  +
jmp loc_1030D6E  +
mov eax [ebp+var_4] +
mov ecx eax +
add eax 0FFFFFFE8h +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
lea ecx [ebp+var_8] +
call sub_1056507  +
mov edi [ebp+var_8] +
lea eax [ebx+0C240h] +
lea ecx [ebx+0C23Ch] +
push eax  +
add edi 2Ch +
mov edx [edi] +
push ecx  +
mov ecx edi +
call dword ptr [edx+0Ch]  +
test eax eax +
jge loc_1030F06  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1030F6C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1030F6C  +
push eax  +
push offset aCtsrdpcertsign  +
push offset dword_10043D8  +
push 0FFh  +
jmp loc_1030D6E  +
push dword ptr [ebx+0C240h]  +
mov ecx ebx +
push dword ptr [ebx+0C23Ch]  +
call sub_102F664  +
mov esi eax +
mov eax [edi] +
neg esi  +
sbb esi esi +
lea ecx [ebx+0C22Ch] +
push ecx  +
neg esi  +
mov ecx edi +
add esi 3 +
call dword ptr [eax+8]  +
test eax eax +
jge loc_1030F6C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1030F6C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1030F6C  +
push eax  +
push offset aCtsrdpcertsi_0  +
push offset dword_10043D8  +
push 100h  +
jmp loc_1030D6E  +
mov esi [ebx+0C228h] +
neg esi  +
sbb esi esi +
and esi 2 +
mov eax [ebp+var_8] +
pop edi  +
mov [ebx+0C234h] esi +
pop esi  +
pop ebx  +
test eax eax +
jz loc_1030F85  +
add eax 18h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz locret_1030F96  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
mov eax [esi+0CA90h] +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_10] ebx +
cmp eax ebx +
jz loc_10310E4  +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
jge loc_1031012  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10310E4  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10310E4  +
push eax  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 11Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10310E4  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
cmp eax ebx +
jge loc_1031051  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10310E4  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10310E4  +
push eax  +
push offset aImsrdpclient_0  +
push offset dword_10043D8  +
push 11Eh  +
jmp loc_1031002  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
jge loc_103108B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10310E4  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10310E4  +
push eax  +
push offset aImsrdpdevice_3  +
push offset dword_10043D8  +
push 11Fh  +
jmp loc_1031002  +
push edi  +
xor edi edi +
cmp [ebp+var_10] ebx +
jbe loc_10310DD  +
mov eax [ebp+var_8] +
lea edx [ebp+var_4] +
push edx  +
push edi  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jl loc_1031108  +
push [ebp+var_4]  +
lea ecx [ebp+var_30] +
push [ebp+var_8]  +
call sub_1030817  +
push ebx  +
lea ecx [ebp+var_30] +
call sub_102AC78  +
lea ecx [ebp+var_30] +
call sub_10308D2  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_10310D7  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [ebp+var_10] +
jb loc_1031093  +
mov [esi+8754h] ebx +
pop edi  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_10310F4  +
mov [ebp+var_8] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_1031104  +
mov [ebp+var_C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1031137  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1031137  +
push eax  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 120h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_10310E3  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10310E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 840h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 7FEh  +
mov word ptr [ebp+var_804] ax +
xor ebx ebx +
lea eax [ebp+var_804+2] +
mov esi ecx +
push ebx  +
push eax  +
mov [ebp+var_820] esi +
call memset  +
mov eax [esi+0CA90h] +
xor edi edi +
inc edi  +
add esp 0Ch +
mov [ebp+var_81C] edi +
mov [ebp+var_814] ebx +
mov [ebp+var_80C] ebx +
mov [ebp+var_818] ebx +
cmp eax ebx +
jz loc_1031555  +
mov ecx [eax] +
lea edx [ebp+var_814] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jge loc_1031208  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031555  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031555  +
push edi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 133h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1031555  +
mov eax [ebp+var_814] +
mov ecx [eax] +
lea edx [ebp+var_80C] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov edi eax +
cmp edi ebx +
jge loc_103124D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031555  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031555  +
push edi  +
push offset aImsrdpclient_0  +
push offset dword_10043D8  +
push 134h  +
jmp loc_10311F8  +
mov eax [ebp+var_80C] +
mov ecx [eax] +
lea edx [ebp+var_818] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi ebx +
jge loc_1031295  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031555  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031555  +
push edi  +
push offset aImsrdpdevice_5  +
push offset dword_10043D8  +
push 135h  +
jmp loc_10311F8  +
cmp [ebp+var_818] 0 +
mov [ebp+var_810] ebx +
mov esi offset dword_10043D8 +
mov ebx 400h +
jbe loc_10313E3  +
mov eax [ebp+var_80C] +
and [ebp+var_808] 0 +
mov ecx [eax] +
lea edx [ebp+var_808] +
push edx  +
push [ebp+var_810]  +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
test edi edi +
jl loc_103147F  +
push [ebp+var_808]  +
lea ecx [ebp+var_840] +
push [ebp+var_80C]  +
call sub_1030817  +
lea ecx [ebp+var_840] +
call sub_102ABD2  +
lea ecx [ebp+var_840] +
test al al +
jnz loc_10313AF  +
call sub_102ACC9  +
test al al +
jz loc_10313A2  +
lea ecx [ebp+var_840] +
call sub_102AD20  +
test eax eax +
jz loc_1031444  +
push eax  +
push ebx  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
test eax eax +
jge loc_1031364  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1031364  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1031364  +
push eax  +
push esi  +
push 138h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push offset asc_1008B48  +
push ebx  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
test eax eax +
jge loc_10313A9  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10313A9  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10313A9  +
push eax  +
push esi  +
push 139h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_10313A9  +
and [ebp+var_81C] 0 +
lea ecx [ebp+var_840] +
call sub_10308D2  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_10313CB  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+var_810]  +
mov eax [ebp+var_810] +
cmp eax [ebp+var_818] +
jb loc_10312B2  +
mov eax [ebp+var_820] +
xor edi edi +
cmp [eax+8754h] edi +
jz loc_10314C8  +
push offset aDynamicdevices  +
push ebx  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
cmp eax edi +
jge loc_10314CE  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10314CE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10314CE  +
push eax  +
push esi  +
push 13Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_10314CE  +
mov edi 80070490h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031472  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031472  +
push edi  +
push offset aImsrdpdevice_6  +
push esi  +
push 137h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
lea ecx [ebp+var_840] +
call sub_10308D2  +
jmp loc_10314A8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10314A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10314A8  +
push edi  +
push offset aImsrdpdevice_4  +
push esi  +
push 136h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_1031555  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1031555  +
mov [ebp+var_81C] edi +
cmp [ebp+var_81C] edi +
jz loc_1031511  +
push offset asc_1005EE4  +
push ebx  +
lea eax [ebp+var_804] +
push eax  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_1031511  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031555  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031555  +
push edi  +
push offset aStringcchcop_1  +
push esi  +
push 13Bh  +
jmp loc_10311F8  +
lea eax [ebp+var_804] +
push eax  +
mov eax [ebp+var_820] +
push ebx  +
add eax 8764h +
push eax  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_1031553  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031555  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031555  +
push edi  +
push offset aStringcchcop_1  +
push esi  +
push 13Ch  +
jmp loc_10311F8  +
xor edi edi +
mov eax [ebp+var_80C] +
test eax eax +
jz loc_103156C  +
and [ebp+var_80C] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_814] +
test eax eax +
jz loc_1031583  +
and [ebp+var_814] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1058h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 7FEh  +
mov word ptr [ebp+var_804] ax +
xor esi esi +
lea eax [ebp+var_804+2] +
push esi  +
push eax  +
mov ebx ecx +
call memset  +
add esp 0Ch +
mov [ebp+var_1028] esi +
mov [ebp+var_1024] esi +
mov [ebp+var_102C] esi +
mov [ebp+var_1015] 0 +
cmp [ebx+0CA90h] esi +
jnz loc_1031600  +
xor edi edi +
inc edi  +
jmp loc_1031B06  +
cmp dword ptr [ebx+8758h] 0 +
mov esi 400h +
jz loc_1031667  +
push offset asc_1005EE4  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_1031660  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 13Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1031B06  +
mov [ebp+var_1015] 1 +
lea eax [ebx+8F64h] +
push eax  +
mov [ebp+var_1034] eax +
push esi  +
lea eax [ebp+var_1004] +
push eax  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_10316B3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 13Eh  +
jmp loc_1031650  +
lea eax [ebp+var_1038] +
push eax  +
lea eax [ebp+var_1030] +
push eax  +
lea eax [ebp+var_1004] +
mov [ebp+var_1030] 3Bh +
push eax  +
jmp loc_1031744  +
lea eax [ebp+pclsid] +
push eax  +
push [ebp+lpsz]  +
call ds:CLSIDFromString  +
test eax eax +
jl loc_1031734  +
cmp [ebp+var_1015] 0 +
jz loc_1031710  +
push offset asc_1008B48  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
mov edi eax +
test edi edi +
jl loc_10317AC  +
push [ebp+lpsz]  +
lea eax [ebp+var_804] +
push esi  +
push eax  +
call sub_1027578  +
mov edi eax +
test edi edi +
jl loc_10317DB  +
mov [ebp+var_1015] 1 +
lea eax [ebp+var_1038] +
push eax  +
lea eax [ebp+var_1030] +
push eax  +
push 0  +
call sub_10461EC  +
add esp 0Ch +
mov [ebp+lpsz] eax +
test eax eax +
jnz loc_10316D4  +
mov ebx [ebx+0CA90h] +
mov eax [ebx] +
lea ecx [ebp+var_1028] +
push ecx  +
push offset dword_100C508  +
push ebx  +
call dword ptr [eax]  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jge loc_103180A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 141h  +
jmp loc_1031650  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aStringcchcat_0  +
push offset dword_10043D8  +
push 13Fh  +
jmp loc_1031650  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aStringcchcat_1  +
push offset dword_10043D8  +
push 140h  +
jmp loc_1031650  +
mov eax [ebp+var_1028] +
mov ecx [eax] +
lea edx [ebp+var_1024] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov edi eax +
cmp edi ebx +
jge loc_1031852  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aImsrdpclient_0  +
push offset dword_10043D8  +
push 142h  +
jmp loc_1031650  +
mov eax [ebp+var_1024] +
mov ecx [eax] +
lea edx [ebp+var_102C] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi ebx +
jge loc_103189A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aImsrdpdevice_5  +
push offset dword_10043D8  +
push 143h  +
jmp loc_1031650  +
mov [ebp+lpsz] ebx +
cmp [ebp+var_102C] ebx +
jbe loc_10319B9  +
mov eax [ebp+var_1024] +
lea edx [ebp+var_101C] +
push edx  +
push [ebp+lpsz]  +
mov [ebp+var_101C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
cmp edi ebx +
jl loc_1031A36  +
push [ebp+var_101C]  +
lea ecx [ebp+var_1058] +
push [ebp+var_1024]  +
call sub_1030817  +
lea ecx [ebp+var_1058] +
call sub_102ABD2  +
test al al +
jz loc_1031980  +
cmp [ebp+var_1015] bl +
jz loc_1031923  +
push offset asc_1008B48  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
mov edi eax +
cmp edi ebx +
jl loc_1031A82  +
lea ecx [ebp+var_1058] +
call sub_102ACC9  +
test al al +
jnz loc_103194E  +
push offset asc_1005984  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
mov edi eax +
cmp edi ebx +
jl loc_1031ABC  +
lea ecx [ebp+var_1058] +
call sub_102AD20  +
cmp eax ebx +
jz loc_1031A05  +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_1027578  +
mov edi eax +
cmp edi ebx +
jl loc_1031AE0  +
mov [ebp+var_1015] 1 +
lea ecx [ebp+var_1058] +
call sub_10308D2  +
mov eax [ebp+var_101C] +
cmp eax ebx +
jz loc_10319A1  +
mov [ebp+var_101C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+lpsz]  +
mov eax [ebp+lpsz] +
cmp eax [ebp+var_102C] +
jb loc_10318AC  +
lea eax [ebp+var_804] +
push eax  +
push esi  +
push [ebp+var_1034]  +
call sub_101BD65  +
mov edi eax +
cmp edi ebx +
jge loc_1031B04  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031B06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031B06  +
push edi  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 149h  +
jmp loc_1031650  +
mov edi 80070490h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031AAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031AAF  +
push edi  +
push offset aImsrdpdevice_6  +
push offset dword_10043D8  +
push 147h  +
jmp loc_1031AA4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031A63  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031A63  +
push edi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 144h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_101C] +
cmp eax ebx +
jz loc_1031B06  +
and [ebp+var_101C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1031B06  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031AAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031AAF  +
push edi  +
push offset aStringcchcat_0  +
push offset dword_10043D8  +
push 145h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
lea ecx [ebp+var_1058] +
call sub_10308D2  +
jmp loc_1031A63  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031AAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031AAF  +
push edi  +
push offset aStringcchcat_2  +
push offset dword_10043D8  +
push 146h  +
jmp loc_1031AA4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031AAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031AAF  +
push edi  +
push offset aStringcchcat_3  +
push offset dword_10043D8  +
push 148h  +
jmp loc_1031AA4  +
xor edi edi +
mov eax [ebp+var_1024] +
test eax eax +
jz loc_1031B1D  +
and [ebp+var_1024] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_1028] +
test eax eax +
jz loc_1031B34  +
and [ebp+var_1028] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
mov esi ecx +
call sub_102ABD2  +
test al al +
jnz loc_1031B66  +
or eax 0FFFFFFFFh +
jmp loc_1031C25  +
push ebx  +
push edi  +
mov ecx esi +
call sub_102AB30  +
mov edi [esi+0Ch] +
mov [ebp+var_8] eax +
cmp edi [esi+8] +
jnb loc_1031C20  +
xor ebx ebx +
mov eax [esi] +
lea edx [ebp+var_4] +
push edx  +
push edi  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jge loc_1031BC2  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1031C06  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1031C06  +
push eax  +
push offset aImsrdpdevice_7  +
push offset dword_1004488  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1031C06  +
push dword ptr [esi+4]  +
lea ecx [ebp+var_4] +
call sub_1030924  +
test eax eax +
jnz loc_1031C06  +
push [ebp+var_4]  +
lea ecx [ebp+var_2C] +
push dword ptr [esi]  +
call sub_1030817  +
push ebx  +
lea ecx [ebp+var_2C] +
call sub_102AB30  +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call ds:CM_Get_Parent  +
test eax eax +
jnz loc_1031BFE  +
mov eax [ebp+var_8] +
cmp [ebp+var_C] eax +
jz loc_1031C28  +
lea ecx [ebp+var_2C] +
call sub_10308D2  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1031C16  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [esi+8] +
jb loc_1031B80  +
or eax 0FFFFFFFFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
lea eax [edi+1] +
lea ecx [ebp+var_2C] +
mov [esi+0Ch] eax +
call sub_10308D2  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1031C46  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_1031C23  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_102A02A  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1030D18  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_8] +
xor ebx ebx +
mov [ebp+var_1C] eax +
inc ebx  +
lea eax [ebp+var_4] +
mov [ebp+var_20] offset aAllowunsignedf +
mov [ebp+var_18] ebx +
mov [ebp+var_14] offset aAllowsignedfil +
mov [ebp+var_10] eax +
mov [ebp+var_C] ebx +
lea esi [ebp+var_1C] +
mov [ebp+arg_0] 2 +
mov eax [esi] +
push offset hKey  +
push eax  +
push dword ptr [esi-4]  +
call sub_102ADDF  +
cmp eax ebx +
jnz loc_1031CBB  +
mov ecx [esi+4] +
mov eax [esi] +
mov [eax] ecx +
add esi 0Ch +
dec [ebp+arg_0]  +
jnz loc_1031CA0  +
mov eax [edi+0C234h] +
test eax eax +
jl loc_1031D09  +
cmp eax ebx +
jle loc_1031CFB  +
cmp eax 3 +
jle loc_1031CF4  +
cmp eax 4 +
jz loc_1031CE8  +
cmp eax 5 +
jnz loc_1031D09  +
mov [edi+0C238h] ebx +
jmp loc_1031D09  +
mov dword ptr [edi+0C238h] 2 +
jmp loc_1031D09  +
xor eax eax +
cmp [ebp+var_4] eax +
jmp loc_1031D00  +
xor eax eax +
cmp [ebp+var_8] eax +
setz al  +
mov [edi+0C238h] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
call sub_103114E  +
mov esi eax +
test esi esi +
jge loc_1031D4A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031D88  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031D88  +
push esi  +
push offset aStoresupported  +
push offset dword_10043D8  +
push 131h  +
jmp loc_1031D79  +
mov ecx edi +
call sub_1031599  +
mov esi eax +
test esi esi +
jge loc_1031D86  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1031D88  +
test byte ptr [eax+1Ch] 4 +
jz loc_1031D88  +
push esi  +
push offset aStoresupported  +
push offset dword_10043D8  +
push 132h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1031D88  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 860h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+0CA90h] +
xor ebx ebx +
mov [ebp+var_81C] edi +
mov [ebp+var_814] ebx +
mov [ebp+var_80C] ebx +
mov [ebp+var_818] ebx +
mov dword ptr [ebp+var_820] 3Bh +
cmp eax ebx +
jnz loc_1031DE2  +
xor esi esi +
inc esi  +
jmp loc_1032127  +
mov ecx [eax] +
lea edx [ebp+var_814] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jge loc_1031E33  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032127  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032127  +
push esi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 121h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1032127  +
mov eax [ebp+var_814] +
mov ecx [eax] +
lea edx [ebp+var_80C] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov esi eax +
cmp esi ebx +
jge loc_1031E78  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032127  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032127  +
push esi  +
push offset aImsrdpclient_0  +
push offset dword_10043D8  +
push 122h  +
jmp loc_1031E23  +
mov eax [ebp+var_80C] +
mov ecx [eax] +
lea edx [ebp+var_818] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jge loc_1031EC0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032127  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032127  +
push esi  +
push offset aImsrdpdevice_3  +
push offset dword_10043D8  +
push 123h  +
jmp loc_1031E23  +
add edi 8764h +
push edi  +
push 400h  +
lea eax [ebp+var_804] +
push eax  +
call sub_101BD65  +
mov esi eax +
cmp esi ebx +
jge loc_1031F0D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032127  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032127  +
push esi  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 124h  +
jmp loc_1031E23  +
lea eax [ebp+var_820] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
call ds:wcstok  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_1032125  +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_0] 0 +
jz loc_1032017  +
mov edi ds:CompareStringW +
push 0FFFFFFFFh  +
push offset asc_1005EE4  +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
push 7Fh  +
call edi  +
cmp eax 2 +
jnz loc_1031FEE  +
xor edi edi +
cmp [ebp+var_818] edi +
jbe loc_1032006  +
mov eax [ebp+var_80C] +
and [ebp+var_808] 0 +
mov ecx [eax] +
lea edx [ebp+var_808] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_1032168  +
push [ebp+var_808]  +
lea ecx [ebp+var_840] +
push [ebp+var_80C]  +
call sub_1030817  +
lea ecx [ebp+var_840] +
call sub_102ABD2  +
lea ecx [ebp+var_840] +
cmp al bl +
jz loc_1031FC3  +
push ebx  +
call sub_102AC78  +
lea ecx [ebp+var_840] +
call sub_10308D2  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_1031FDF  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [ebp+var_818] +
jb loc_1031F66  +
jmp loc_1032006  +
push 0FFFFFFFFh  +
push offset aDynamicdevices  +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
push 7Fh  +
call edi  +
cmp eax 2 +
jnz loc_103210A  +
mov eax [ebp+var_81C] +
mov [eax+8754h] ebx +
jmp loc_103210A  +
mov eax [ebp+var_80C] +
lea edx [ebp+var_810] +
push edx  +
xor edi edi +
push esi  +
mov [ebp+var_810] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jnz loc_10320F4  +
push [ebp+var_810]  +
lea ecx [ebp+var_840] +
push [ebp+var_80C]  +
call sub_1030817  +
push ebx  +
lea ecx [ebp+var_840] +
call sub_102AC78  +
lea ecx [ebp+var_840] +
call sub_102AB30  +
mov [ebp+var_834] edi +
jmp loc_10320D9  +
mov ecx [ebp+var_80C] +
lea esi [ebp+var_808] +
push esi  +
push eax  +
mov [ebp+var_808] edi +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_10321B1  +
push [ebp+var_808]  +
lea ecx [ebp+var_860] +
push [ebp+var_80C]  +
call sub_1030817  +
push ebx  +
lea ecx [ebp+var_860] +
call sub_102AC78  +
lea ecx [ebp+var_860] +
call sub_10308D2  +
mov eax [ebp+var_808] +
cmp eax edi +
jz loc_10320D9  +
mov [ebp+var_808] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_840] +
call sub_1031B4A  +
cmp eax 0FFFFFFFFh +
jnz loc_1032071  +
lea ecx [ebp+var_840] +
call sub_10308D2  +
mov eax [ebp+var_810] +
cmp eax edi +
jz loc_103210A  +
mov [ebp+var_810] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp+var_820] +
push eax  +
push 0  +
call ds:wcstok  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_1031F30  +
xor esi esi +
mov eax [ebp+var_80C] +
test eax eax +
jz loc_103213E  +
and [ebp+var_80C] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_814] +
test eax eax +
jz loc_1032155  +
and [ebp+var_814] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032195  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032195  +
push esi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 125h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_808] +
test eax eax +
jz loc_1032127  +
and [ebp+var_808] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1032127  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10321DE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10321DE  +
push esi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 126h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_808] +
cmp eax edi +
jz loc_10321F4  +
mov [ebp+var_808] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_840] +
call sub_10308D2  +
mov eax [ebp+var_810] +
cmp eax edi +
jz loc_1032127  +
and [ebp+var_810] 0 +
jmp loc_10321A6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 878h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+0CA90h] +
xor ebx ebx +
mov [ebp+var_844] edi +
mov [ebp+var_858] ebx +
mov [ebp+var_83C] ebx +
mov [ebp+var_84C] ebx +
mov [ebp+var_848] 3Bh +
cmp eax ebx +
jnz loc_103226B  +
xor esi esi +
inc esi  +
jmp loc_1032620  +
mov ecx [eax] +
lea edx [ebp+var_858] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jge loc_10322BC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032620  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032620  +
push esi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 127h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1032620  +
mov eax [ebp+var_858] +
mov ecx [eax] +
lea edx [ebp+var_83C] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov esi eax +
cmp esi ebx +
jge loc_1032301  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032620  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032620  +
push esi  +
push offset aImsrdpclient_0  +
push offset dword_10043D8  +
push 128h  +
jmp loc_10322AC  +
mov eax [ebp+var_83C] +
mov ecx [eax] +
lea edx [ebp+var_84C] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jge loc_1032349  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032620  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032620  +
push esi  +
push offset aImsrdpdevice_3  +
push offset dword_10043D8  +
push 129h  +
jmp loc_10322AC  +
add edi 8F64h +
cmp [ebp+arg_0] bl +
jz loc_10326CB  +
push edi  +
push 400h  +
lea eax [ebp+var_804] +
push eax  +
call sub_101BD65  +
mov esi eax +
cmp esi ebx +
jge loc_103239F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032620  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032620  +
push esi  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 12Ah  +
jmp loc_10322AC  +
lea eax [ebp+var_850] +
push eax  +
lea eax [ebp+var_848] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
jmp loc_103260C  +
push 0FFFFFFFFh  +
push offset asc_1005EE4  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_103248D  +
xor edi edi +
cmp [ebp+var_84C] ebx +
jbe loc_1032478  +
mov eax [ebp+var_83C] +
lea edx [ebp+var_838] +
push edx  +
push edi  +
mov [ebp+var_838] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_103265F  +
push [ebp+var_838]  +
lea ecx [ebp+var_878] +
push [ebp+var_83C]  +
call sub_1030817  +
lea ecx [ebp+var_878] +
call sub_102ABD2  +
lea ecx [ebp+var_878] +
test al al +
jz loc_1032450  +
call sub_102AC25  +
lea ecx [ebp+var_878] +
test al al +
jnz loc_1032450  +
push 1  +
call sub_102AC78  +
lea ecx [ebp+var_878] +
call sub_10308D2  +
mov eax [ebp+var_838] +
cmp eax ebx +
jz loc_103246B  +
mov [ebp+var_838] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [ebp+var_84C] +
jb loc_10323E4  +
mov eax [ebp+var_844] +
mov dword ptr [eax+8758h] 1 +
jmp loc_10325FD  +
lea eax [ebp+pclsid] +
push eax  +
push esi  +
call ds:CLSIDFromString  +
test eax eax +
jl loc_10325FD  +
mov [ebp+var_840] ebx +
cmp [ebp+var_84C] ebx +
jbe loc_10325FD  +
mov eax [ebp+var_83C] +
lea edx [ebp+var_838] +
push edx  +
push [ebp+var_840]  +
mov [ebp+var_838] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_10326A7  +
push [ebp+var_838]  +
lea ecx [ebp+var_878] +
push [ebp+var_83C]  +
call sub_1030817  +
lea ecx [ebp+var_878] +
call sub_102ABD2  +
lea ecx [ebp+var_878] +
test al al +
jz loc_10325CA  +
call sub_102AD6E  +
cmp eax ebx +
jnz loc_1032548  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10325C4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10325C4  +
push offset dword_10043D8  +
push 12Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_10325C4  +
lea ecx [ebp+var_824] +
push ecx  +
push eax  +
call ds:CLSIDFromString  +
test eax eax +
jge loc_1032578  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10325C4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10325C4  +
push offset dword_10043D8  +
push 12Eh  +
jmp loc_103253B  +
push 4  +
pop ecx  +
lea edi [ebp+pclsid] +
lea esi [ebp+var_824] +
xor eax eax +
cmps   +
lea ecx [ebp+var_878] +
jz loc_10325BD  +
call sub_102AB30  +
mov ecx [ebp+var_844] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pclsid] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call sub_102A224  +
test al al +
jz loc_10325C4  +
lea ecx [ebp+var_878] +
push 1  +
call sub_102AC78  +
lea ecx [ebp+var_878] +
call sub_10308D2  +
mov eax [ebp+var_838] +
cmp eax ebx +
jz loc_10325E5  +
mov [ebp+var_838] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+var_840]  +
mov eax [ebp+var_840] +
cmp eax [ebp+var_84C] +
jb loc_10324B5  +
lea eax [ebp+var_850] +
push eax  +
lea eax [ebp+var_848] +
push eax  +
push ebx  +
call sub_10461EC  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jnz loc_10323B9  +
xor esi esi +
mov eax [ebp+var_83C] +
cmp eax ebx +
jz loc_1032636  +
mov [ebp+var_83C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_858] +
cmp eax ebx +
jz loc_103264C  +
mov [ebp+var_858] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103268C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103268C  +
push esi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 12Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_838] +
cmp eax ebx +
jz loc_1032620  +
mov [ebp+var_838] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1032620  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103268C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103268C  +
push esi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 12Ch  +
jmp loc_1032681  +
mov [ebp+var_844] ebx +
cmp [ebp+var_844] ebx +
push edi  +
push 400h  +
lea eax [ebp+var_804] +
push eax  +
setz byte ptr [ebp+var_854]  +
call sub_101BD65  +
mov esi eax +
cmp esi ebx +
jl loc_103287D  +
lea eax [ebp+var_850] +
push eax  +
lea eax [ebp+var_848] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
call sub_10461EC  +
add esp 0Ch +
mov esi eax +
jmp loc_103285D  +
cmp word ptr [esi] 2Dh +
jnz loc_1032741  +
cmp byte ptr [ebp+var_854] bl +
jz loc_103273D  +
lea eax [ebp+var_850] +
push eax  +
lea eax [ebp+var_848] +
push eax  +
push ebx  +
jmp loc_103270F  +
inc esi  +
inc esi  +
jmp loc_1032749  +
cmp byte ptr [ebp+var_854] bl +
jz loc_103272C  +
mov eax [ebp+var_83C] +
lea edx [ebp+var_840] +
push edx  +
push esi  +
mov [ebp+var_840] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jnz loc_103282E  +
push [ebp+var_840]  +
lea ecx [ebp+var_878] +
push [ebp+var_83C]  +
call sub_1030817  +
push [ebp+var_854]  +
lea ecx [ebp+var_878] +
call sub_102AC78  +
lea ecx [ebp+var_878] +
call sub_102AB30  +
mov [ebp+var_86C] ebx +
jmp loc_1032813  +
mov ecx [ebp+var_83C] +
lea esi [ebp+var_838] +
push esi  +
push eax  +
mov [ebp+var_838] ebx +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_10328AC  +
push [ebp+var_838]  +
lea ecx [ebp+var_834] +
push [ebp+var_83C]  +
call sub_1030817  +
push [ebp+var_854]  +
lea ecx [ebp+var_834] +
call sub_102AC78  +
lea ecx [ebp+var_834] +
call sub_10308D2  +
mov eax [ebp+var_838] +
cmp eax ebx +
jz loc_1032813  +
mov [ebp+var_838] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_878] +
call sub_1031B4A  +
cmp eax 0FFFFFFFFh +
jnz loc_10327A6  +
lea ecx [ebp+var_878] +
call sub_10308D2  +
lea eax [ebp+var_850] +
push eax  +
lea eax [ebp+var_848] +
push eax  +
push ebx  +
call sub_10461EC  +
mov esi eax +
mov eax [ebp+var_840] +
add esp 0Ch +
cmp eax ebx +
jz loc_103285D  +
mov [ebp+var_840] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jnz loc_103271E  +
inc [ebp+var_844]  +
cmp [ebp+var_844] 2 +
jb loc_10326D1  +
jmp loc_103261E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032620  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032620  +
push esi  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 12Fh  +
jmp loc_10322AC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10328D9  +
test byte ptr [eax+1Ch] 4 +
jz loc_10328D9  +
push esi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 130h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_838] +
cmp eax ebx +
jz loc_10328EF  +
mov [ebp+var_838] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_878] +
call sub_10308D2  +
mov eax [ebp+var_840] +
cmp eax ebx +
jz loc_1032620  +
mov [ebp+var_840] ebx +
jmp loc_103269C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax [ecx+0CA90h] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
cmp eax ebx +
jnz loc_1032945  +
xor esi esi +
inc esi  +
jmp loc_1032D5C  +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push offset dword_100C508  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jge loc_1032993  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5C  +
push esi  +
push offset aQiForImsrdpcli  +
push offset dword_10043D8  +
push 17Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1032D5C  +
mov eax [ebp+var_20] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov esi eax +
cmp esi ebx +
jge loc_10329D2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5C  +
push esi  +
push offset aImsrdpclient_0  +
push offset dword_10043D8  +
push 17Bh  +
jmp loc_1032983  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jge loc_1032A14  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5C  +
push esi  +
push offset aImsrdpdevice_3  +
push offset dword_10043D8  +
push 17Ch  +
jmp loc_1032983  +
cmp [ebp+var_18] ebx +
jz loc_1032D5C  +
mov eax [ebp+var_20] +
mov ecx [eax] +
lea edx [ebp+var_1C] +
push edx  +
push eax  +
call dword ptr [ecx+78h]  +
mov esi eax +
cmp esi ebx +
jge loc_1032A5F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5C  +
push esi  +
push offset aImsrdpclient5G  +
push offset dword_10043D8  +
push 17Dh  +
jmp loc_1032983  +
mov eax [ebp+var_1C] +
mov ecx [eax] +
lea edx [ebp+var_28] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jge loc_1032AA1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5C  +
push esi  +
push offset aImsrdpdrivec_2  +
push offset dword_10043D8  +
push 17Eh  +
jmp loc_1032983  +
push edi  +
mov [ebp+var_24] ebx +
cmp [ebp+var_28] ebx +
jbe loc_1032C0E  +
mov eax [ebp+var_1C] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push [ebp+var_24]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_1032C5A  +
mov eax [ebp+var_14] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1032C89  +
cmp word ptr [ebp+var_4] bx +
jz loc_1032BF6  +
mov eax [ebp+var_14] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C5A8  +
mov [ebp+var_8] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_1032CB8  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_2C] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_1032CDC  +
mov ecx [ebp+var_2C] +
xor edi edi +
inc edi  +
shl edi cl +
cmp [ebp+var_18] 0 +
jbe loc_1032BE3  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_1032D1B  +
push [ebp+var_10]  +
lea ecx [ebp+var_4C] +
push [ebp+var_C]  +
call sub_1030817  +
lea ecx [ebp+var_4C] +
call sub_102ACC9  +
lea ecx [ebp+var_4C] +
test al al +
jz loc_1032BCA  +
call sub_102AB81  +
test eax edi +
jz loc_1032BC7  +
cmp [ebp+arg_0] 0 +
push 0  +
jz loc_1032BBF  +
mov eax [ebp+var_14] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jge loc_1032BC7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032BB2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032BB2  +
push esi  +
push offset aImsrdpdrivePut  +
push offset dword_10043D8  +
push 184h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
lea ecx [ebp+var_4C] +
call sub_10308D2  +
jmp loc_1032D48  +
lea ecx [ebp+var_4C] +
call sub_102AC78  +
lea ecx [ebp+var_4C] +
call sub_10308D2  +
push 0  +
lea ecx [ebp+var_10] +
inc ebx  +
call sub_1054923  +
cmp ebx [ebp+var_18] +
jb loc_1032B30  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1032BF4  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor ebx ebx +
inc [ebp+var_24]  +
push ebx  +
lea ecx [ebp+var_14] +
call sub_1054923  +
mov eax [ebp+var_24] +
cmp eax [ebp+var_28] +
jb loc_1032AAE  +
xor edi edi +
cmp [ebp+var_18] ebx +
jbe loc_1032E4C  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_1032E53  +
push [ebp+var_10]  +
lea ecx [ebp+var_4C] +
push [ebp+var_C]  +
call sub_1030817  +
lea ecx [ebp+var_4C] +
call sub_102ACC9  +
lea ecx [ebp+var_4C] +
test al al +
jz loc_1032E34  +
mov [ebp+var_40] ebx +
jmp loc_1032E04  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5B  +
push esi  +
push offset aImsrdpdrivec_0  +
push offset dword_10043D8  +
push 17Fh  +
jmp loc_1032E7D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5B  +
push esi  +
push offset aImsrdpdrivePut  +
push offset dword_10043D8  +
push 180h  +
jmp loc_1032E7D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D09  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D09  +
push esi  +
push offset aQiForIid_ims_6  +
push offset dword_10043D8  +
push 181h  +
jmp loc_1032CFE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D09  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D09  +
push esi  +
push offset aImsrdpdriveG_2  +
push offset dword_10043D8  +
push 182h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_1032D5B  +
mov [ebp+var_8] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1032D5B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D48  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D48  +
push esi  +
push offset aImsrdpdevice_9  +
push offset dword_10043D8  +
push 183h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1032D59  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor ebx ebx +
pop edi  +
mov eax [ebp+var_14] +
cmp eax ebx +
jz loc_1032D6C  +
mov [ebp+var_14] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_10] +
cmp eax ebx +
jz loc_1032D7C  +
mov [ebp+var_10] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_1032D8C  +
mov [ebp+var_C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_1C] +
cmp eax ebx +
jz loc_1032D9C  +
mov [ebp+var_1C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_20] +
cmp eax ebx +
jz loc_1032DAC  +
mov [ebp+var_20] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov ecx [ebp+var_C] +
lea esi [ebp+arg_0] +
push esi  +
push eax  +
mov dword ptr [ebp+arg_0] ebx +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_1032E8D  +
push dword ptr [ebp+arg_0]  +
lea ecx [ebp+var_6C] +
push [ebp+var_C]  +
call sub_1030817  +
lea ecx [ebp+var_6C] +
call sub_102ACC9  +
test al al +
jz loc_1032E10  +
lea ecx [ebp+var_6C] +
call sub_10308D2  +
mov eax dword ptr [ebp+arg_0] +
cmp eax ebx +
jz loc_1032E01  +
mov dword ptr [ebp+arg_0] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_4C] +
call sub_1031B4A  +
cmp eax 0FFFFFFFFh +
jnz loc_1032DB4  +
jmp loc_1032E31  +
push ebx  +
lea ecx [ebp+var_4C] +
call sub_102AC78  +
lea ecx [ebp+var_6C] +
call sub_10308D2  +
mov eax dword ptr [ebp+arg_0] +
cmp eax ebx +
jz loc_1032E31  +
mov dword ptr [ebp+arg_0] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_4C] +
call sub_10308D2  +
push ebx  +
lea ecx [ebp+var_10] +
inc edi  +
call sub_1054923  +
cmp edi [ebp+var_18] +
jb loc_1032C19  +
xor esi esi +
jmp loc_1032D5B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032D5B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032D5B  +
push esi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 185h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1032D5B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1032EBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1032EBA  +
push esi  +
push offset aImsrdpdevice_4  +
push offset dword_10043D8  +
push 186h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax dword ptr [ebp+arg_0] +
cmp eax ebx +
jz loc_1032ECA  +
mov dword ptr [ebp+arg_0] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_4C] +
call sub_10308D2  +
jmp loc_1032D5B  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
call sub_1030F9F  +
push 1  +
mov ecx edi +
call sub_1031D92  +
mov esi eax +
test esi esi +
jge loc_1032F28  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103304C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103304C  +
push esi  +
push offset aCtscsettingsLo  +
push offset dword_10043D8  +
push 14Ah  +
jmp loc_1033041  +
push 1  +
mov ecx edi +
call sub_103221B  +
mov esi eax +
test esi esi +
jge loc_1032F66  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103304C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103304C  +
push esi  +
push offset aCtscsettings_1  +
push offset dword_10043D8  +
push 14Bh  +
jmp loc_1033041  +
mov ecx edi +
call sub_102FB10  +
mov esi eax +
test esi esi +
jge loc_1032FA2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103304C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103304C  +
push esi  +
push offset aCtscsettings_2  +
push offset dword_10043D8  +
push 14Ch  +
jmp loc_1033041  +
push 0  +
mov ecx edi +
call sub_1031D92  +
mov esi eax +
test esi esi +
jge loc_1032FDD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103304C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103304C  +
push esi  +
push offset aCtscsettings_3  +
push offset dword_10043D8  +
push 14Dh  +
jmp loc_1033041  +
push 0  +
mov ecx edi +
call sub_103221B  +
mov esi eax +
test esi esi +
jge loc_1033010  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103304C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103304C  +
push esi  +
push offset aCtscsettings_3  +
push offset dword_10043D8  +
push 14Eh  +
jmp loc_1033041  +
push 1  +
mov ecx edi +
call sub_1032918  +
mov esi eax +
test esi esi +
jge loc_103304C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103304C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103304C  +
push esi  +
push offset aCtscsettingsRe  +
push offset dword_10043D8  +
push 14Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+0CA90h] +
call sub_1054923  +
cmp [ebp+arg_0] 0 +
jz loc_10330AE  +
mov ecx esi +
call sub_1032EDF  +
mov esi eax +
test esi esi +
jge loc_10330AE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10330B0  +
test byte ptr [eax+1Ch] 4 +
jz loc_10330B0  +
push esi  +
push offset aCtscsettings_4  +
push offset dword_10043D8  +
push 169h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10330B0  +
xor esi esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 76Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov [ebp+var_740] esi +
test esi esi +
jnz loc_10330EC  +
mov eax 80070057h +
jmp loc_1034466  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+20h]  +
test eax eax +
jnz loc_1033101  +
mov eax 80004005h +
jmp loc_1034466  +
push edi  +
push 2  +
push 0  +
push offset aDisableprinter  +
mov edi offset word_1002174 +
push edi  +
call sub_10509E3  +
push 2  +
push 0  +
push offset aDisableclipboa  +
push edi  +
mov [ebx+0CA88h] eax +
call sub_10509E3  +
lea ecx [ebp+var_76C] +
push ecx  +
xor edi edi +
push edi  +
mov [ebx+0CA84h] eax +
mov eax [esi] +
push offset aPublicMode  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
cmp [ebp+var_76C] edi +
jz loc_1033161  +
mov dword ptr [ebx+0CA7Ch] 1 +
mov eax [esi] +
lea ecx [ebp+var_764] +
push ecx  +
push edi  +
push offset aScreenModeId  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
cmp [ebp+var_764] edi +
jnz loc_10331AD  +
mov eax [esi] +
lea ecx [ebp+var_744] +
push ecx  +
push 0FFFFFFFFh  +
push offset aDesktopSizeId  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
xor eax eax +
cmp [ebp+var_744] 0FFFFFFFFh +
jmp loc_10331B6  +
xor eax eax +
cmp [ebp+var_764] 2 +
setz al  +
push 100h  +
lea ecx [ebp+var_53C] +
push ecx  +
push offset a0300800600  +
push offset aWinposstr  +
mov ecx esi +
mov [ebx+0C200h] eax +
mov eax [esi] +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103320F  +
test byte ptr [eax+1Ch] 2 +
jz loc_103320F  +
lea ecx [ebp+var_53C] +
push ecx  +
push offset dword_10043D8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
lea eax [ebx+50h] +
push eax  +
lea ecx [ebx+4Ch] +
push ecx  +
lea edx [ebx+48h] +
push edx  +
lea eax [ebx+44h] +
push eax  +
lea eax [ebx+30h] +
push eax  +
lea edi [ebx+2Ch] +
push edi  +
lea eax [ebp+var_53C] +
push offset aUUDDDD  +
push eax  +
call sub_1045ED1  +
add esp 20h +
cmp eax 6 +
jz loc_10332AC  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1033269  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1033269  +
push 6  +
push eax  +
push offset dword_10043D8  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_101E297  +
push 8  +
pop ecx  +
lea eax [ebx+50h] +
push eax  +
lea eax [ebx+4Ch] +
push eax  +
lea eax [ebx+48h] +
push eax  +
lea eax [ebx+44h] +
push eax  +
lea eax [ebx+30h] +
push eax  +
lea eax [ebx+2Ch] +
push eax  +
lea eax [ebp+var_3C] +
push offset aUUDDDD  +
mov esi offset a0300800600 +
lea edi [ebp+var_3C] +
push eax  +
movs   +
call sub_1045ED1  +
mov esi [ebp+var_740] +
add esp 20h +
mov edi offset lpReserved +
jmp loc_10332D2  +
mov eax lpReserved +
mov edi offset lpReserved +
cmp eax edi +
jz loc_10332D2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10332D2  +
push offset dword_10043D8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebx+2Ch] +
mov dword ptr [ebx+28h] 2Ch +
test ecx ecx +
jz loc_1033306  +
mov eax lpReserved +
cmp eax edi +
jz loc_1033302  +
test byte ptr [eax+1Ch] 1 +
jz loc_1033302  +
push ecx  +
push offset dword_10043D8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
and dword ptr [ebx+2Ch] 0 +
mov ecx [ebx+30h] +
cmp ecx 3 +
jz loc_103333E  +
cmp ecx 1 +
jz loc_103333E  +
mov eax lpReserved +
cmp eax edi +
jz loc_1033337  +
test byte ptr [eax+1Ch] 1 +
jz loc_1033337  +
push 1  +
push ecx  +
push offset dword_10043D8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov dword ptr [ebx+30h] 1 +
mov ecx [ebx+4Ch] +
sub ecx [ebx+44h] +
mov eax 0C8h +
cmp ecx eax +
jge loc_1033358  +
and dword ptr [ebx+44h] 0 +
mov dword ptr [ebx+4Ch] 320h +
mov ecx [ebx+50h] +
sub ecx [ebx+48h] +
cmp ecx eax +
jge loc_103336D  +
and dword ptr [ebx+48h] 0 +
mov dword ptr [ebx+50h] 258h +
mov eax [esi] +
lea edi [ebx+70CCh] +
push edi  +
push 1  +
push offset aDesktopSizeId  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10333B0  +
test byte ptr [eax+1Ch] 2 +
jz loc_10333B0  +
push dword ptr [edi]  +
push offset dword_10043D8  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp dword ptr [edi] 4 +
jbe loc_10333BB  +
mov dword ptr [edi] 1 +
mov eax [edi] +
push dword_1065044[eax*8]  +
mov ecx ebx +
call sub_101ED57  +
mov eax [edi] +
push dword_1065048[eax*8]  +
mov ecx ebx +
call sub_101ED78  +
mov eax [esi] +
lea ecx [ebp+var_760] +
push ecx  +
push 0  +
push offset aDesktopwidth  +
mov ecx esi +
mov [ebp+var_760] 320h +
mov [ebp+var_768] 258h +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebp+var_768] +
push ecx  +
push 0  +
push offset aDesktopheight  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
mov ecx [ebp+var_760] +
test ecx ecx +
jz loc_103346A  +
mov edi [ebp+var_768] +
test edi edi +
jz loc_103346A  +
mov eax 0C8h +
cmp ecx eax +
jb loc_103346A  +
cmp edi eax +
jb loc_103346A  +
cmp ecx 1000h +
ja loc_103346A  +
cmp edi 800h +
ja loc_103346A  +
push ecx  +
mov ecx ebx +
call sub_101ED57  +
push edi  +
mov ecx ebx +
call sub_101ED78  +
push 0  +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_10334C3  +
push 0Ch  +
push edi  +
call ds:GetDeviceCaps  +
mov [ebp+var_744] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10334B2  +
test byte ptr [eax+1Ch] 2 +
jz loc_10334B2  +
push [ebp+var_744]  +
push edi  +
push offset dword_10043D8  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
push edi  +
push 0  +
call ds:ReleaseDC  +
mov edi [ebp+var_744] +
jmp loc_10334C6  +
push 10h  +
pop edi  +
push 20h  +
pop eax  +
cmp edi eax +
ja loc_10334CF  +
mov eax edi +
mov edx [esi] +
lea ecx [ebp+var_74C] +
push ecx  +
push eax  +
push offset aSessionBpp  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1033515  +
test byte ptr [eax+1Ch] 2 +
jz loc_1033515  +
push [ebp+var_74C]  +
push offset dword_10043D8  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [ebp+var_74C] +
cmp eax edi +
jb loc_103352C  +
cmp edi 8 +
jb loc_103352C  +
mov eax edi +
mov [ebp+var_74C] eax +
cmp eax 8 +
jz loc_103354E  +
cmp eax 0Eh +
jbe loc_1033545  +
cmp eax 10h +
jbe loc_103354E  +
cmp eax 18h +
jz loc_103354E  +
cmp eax 20h +
jz loc_103354E  +
push 10h  +
pop eax  +
mov [ebp+var_74C] eax +
and [ebp+var_740] 0 +
mov [ebx+84DCh] eax +
lea eax [ebx+70D8h] +
mov [ebp+var_744] eax +
mov edi offset word_1002174 +
mov eax [ebp+var_740] +
push 2  +
push 100h  +
push [ebp+var_744]  +
push edi  +
push off_106506C[eax]  +
push offset aDefault  +
call sub_1051DEC  +
add [ebp+var_740] 4 +
add [ebp+var_744] 200h +
cmp [ebp+var_740] 28h +
jb loc_103356C  +
mov eax [esi] +
push 100h  +
lea ecx [ebp+var_73C] +
push ecx  +
push offset aAlternateFullA  +
mov ecx esi +
call dword ptr [eax+30h]  +
test eax eax +
jz loc_10335D2  +
mov dword ptr [ebx+0CA9Ch] 1 +
jmp loc_10335FA  +
mov eax [esi] +
push 100h  +
lea ecx [ebp+var_73C] +
push ecx  +
push edi  +
push offset aFullAddress  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
and dword ptr [ebx+0CA9Ch] 0 +
lea eax [ebp+var_73C] +
push eax  +
lea ecx [ebx+54h] +
call sub_105B15D  +
mov eax [esi] +
push 80h  +
lea ecx [ebp+var_33C] +
push ecx  +
push edi  +
push offset aLoadbalanceinf  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
lea eax [ebp+var_33C] +
push eax  +
mov ecx ebx +
call sub_102AEC4  +
mov eax [esi] +
lea ecx [ebx+86F4h] +
push ecx  +
push 0  +
push offset aSmartSizing  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+0B3B4h] +
push ecx  +
push 0  +
push offset aAdministrative  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea edi [ebx+86F8h] +
push edi  +
push 1  +
push offset aTransportType  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10336B5  +
test byte ptr [eax+1Ch] 2 +
jz loc_10336B5  +
push dword ptr [edi]  +
push offset dword_10043D8  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
inc eax  +
cmp [edi] eax +
jz loc_10336BE  +
mov [edi] eax +
mov eax [esi] +
lea edi [ebx+70B4h] +
push edi  +
push 1  +
push offset aEnablecredssps  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
push 3  +
pop eax  +
mov [ebx+0C220h] eax +
mov [ebx+0C21Ch] eax +
call sub_1051E66  +
cmp eax 3 +
jb loc_1033791  +
and [ebp+var_744] 0 +
call sub_1059AD8  +
test eax eax +
jz loc_1033712  +
cmp dword ptr [edi] 0 +
jz loc_1033712  +
push 2  +
pop edi  +
jmp loc_1033714  +
xor edi edi +
mov eax [esi] +
lea ecx [ebp+var_744] +
push ecx  +
push edi  +
push offset aAuthentication  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jnz loc_1033752  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034454  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034454  +
push offset dword_10043D8  +
push 19h  +
jmp loc_10341B4  +
mov eax [ebp+var_744] +
cmp eax 3 +
jnb loc_1033765  +
mov [ebx+0C21Ch] eax +
jmp loc_1033797  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1033789  +
test byte ptr [eax+1Ch] 4 +
jz loc_1033789  +
push offset dword_10043D8  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebx+0C21Ch] edi +
jmp loc_1033797  +
mov [ebx+0C220h] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10337EB  +
test byte ptr [eax+1Ch] 2 +
jz loc_10337C6  +
push dword ptr [ebx+0C21Ch]  +
push offset dword_10043D8  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10337EB  +
test byte ptr [eax+1Ch] 2 +
jz loc_10337EB  +
push dword ptr [ebx+0C220h]  +
push offset dword_10043D8  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi] +
lea ecx [ebx+70A0h] +
push ecx  +
push 0  +
push offset aPromptForCrede  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+70ACh] +
push ecx  +
push 0  +
push offset aPromptForCre_0  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea edi [ebx+70B0h] +
push edi  +
push 1  +
push offset aNegotiateSecur  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
call sub_1059AD8  +
test eax eax +
jz loc_1033854  +
cmp dword ptr [ebx+70B4h] 0 +
jnz loc_103385A  +
mov dword ptr [edi] 1 +
mov eax [esi] +
lea edi [ebx+86FCh] +
push edi  +
push 0D3Dh  +
push offset aServerPort  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
cmp dword ptr [edi] 0FFFFh +
jbe loc_10338AC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10338A6  +
test byte ptr [eax+1Ch] 4 +
jz loc_10338A6  +
push offset dword_10043D8  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [edi] 0D3Dh +
mov eax [esi] +
lea ecx [ebx+8700h] +
push ecx  +
push 1  +
push offset aEnableMouse  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+8704h] +
push ecx  +
push 1  +
push offset aDisableCtrlAlt  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebp+var_754] +
push ecx  +
push 2  +
pop edi  +
push edi  +
push offset aKeyboardhook  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
cmp [ebp+var_754] edi +
jbe loc_1033914  +
and [ebp+var_754] 0 +
mov eax [ebp+var_754] +
lea ecx [ebp+var_75C] +
push ecx  +
push 0  +
mov [ebx+84E0h] eax +
mov eax [esi] +
push offset aAudiomode  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
cmp [ebp+var_75C] edi +
jbe loc_103394C  +
and [ebp+var_75C] 0 +
mov eax [ebp+var_75C] +
lea ecx [ebx+84E8h] +
push ecx  +
push 0  +
mov [ebx+84E4h] eax +
mov eax [esi] +
push offset aAudiocapturemo  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebp+var_758] +
push ecx  +
push 1  +
push offset aVideoplaybackm  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
cmp [ebp+var_758] edi +
jbe loc_10339A4  +
mov [ebp+var_758] 1 +
mov eax [ebp+var_758] +
lea ecx [ebp+var_750] +
push ecx  +
push 0  +
mov [ebx+84ECh] eax +
mov eax [esi] +
push offset aAudioqualitymo  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
cmp [ebp+var_750] edi +
jbe loc_10339DC  +
and [ebp+var_750] 0 +
mov eax [ebp+var_750] +
mov edi 80h +
push edi  +
lea ecx [ebp+var_23C] +
push ecx  +
push offset aDefault_0  +
mov [ebx+84F0h] eax +
mov eax [esi] +
push offset aAudioplaybackd  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
lea eax [ebp+var_23C] +
push eax  +
mov ecx ebx +
call sub_102C311  +
mov eax [esi] +
push edi  +
lea ecx [ebp+var_13C] +
push ecx  +
push offset aDefault_0  +
push offset aAudiocapturede  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
lea eax [ebp+var_13C] +
push eax  +
mov ecx ebx +
call sub_102C333  +
mov eax [esi] +
lea ecx [ebp+var_748] +
push ecx  +
push 2  +
pop edi  +
push edi  +
push offset aConnectionType  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
cmp [ebp+var_748] 1 +
jb loc_1033A7C  +
cmp [ebp+var_748] 6 +
jbe loc_1033A82  +
mov [ebp+var_748] edi +
mov eax [ebp+var_748] +
lea ecx [ebx+24h] +
push ecx  +
push 0  +
mov [ebx+0B3CCh] eax +
mov eax [esi] +
push offset aDisableconnect  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov edi 400h +
push edi  +
lea eax [ebx+254h] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [ebx+0A54h] +
push 0  +
push eax  +
call memset  +
mov edi 208h +
push edi  +
lea eax [ebx+6C8Ch] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [ebx+29FCh] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [ebx+6E94h] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [ebx+6A84h] +
push 0  +
push eax  +
call memset  +
add esp 48h +
cmp dword ptr [ebx+0CA7Ch] 0 +
jnz loc_1033B48  +
push esi  +
mov ecx ebx +
call sub_102A6AF  +
test eax eax +
jnz loc_1033B48  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1033B48  +
test byte ptr [eax+1Ch] 4 +
jz loc_1033B48  +
push offset dword_10043D8  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edx [esi] +
push 104h  +
lea eax [ebx+6C8Ch] +
push eax  +
push offset word_1002174  +
push offset aAlternateShell  +
mov ecx esi +
call dword ptr [edx+34h]  +
test eax eax +
jz loc_1034454  +
cmp dword ptr [ebx+0C44Ch] 0 +
jz loc_1033BA0  +
lea eax [ebx+6C8Ch] +
push offset aRdpinit_exe  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1033BA0  +
push edi  +
lea eax [ebx+6C8Ch] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov edx [esi] +
push 104h  +
lea eax [ebx+6E94h] +
push eax  +
mov edi offset word_1002174 +
push edi  +
push offset aShellWorkingDi  +
mov ecx esi +
call dword ptr [edx+34h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
push 104h  +
lea eax [ebx+6A84h] +
push eax  +
push edi  +
push offset aWorkspaceId  +
mov ecx esi +
call dword ptr [edx+34h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
push 104h  +
lea eax [ebx+29FCh] +
push eax  +
push edi  +
push offset aRemoteapplic_3  +
mov ecx esi +
call dword ptr [edx+34h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
lea eax [ebx+135Ch] +
push eax  +
push 0  +
push offset aRemoteapplicat  +
mov ecx esi +
call dword ptr [edx+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 100h  +
lea ecx [ebx+136Ch] +
push ecx  +
push edi  +
push offset aRemoteapplic_0  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 104h  +
lea ecx [ebx+156Ch] +
push ecx  +
push edi  +
push offset aRemoteapplic_1  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 40h  +
lea ecx [ebx+1774h] +
push ecx  +
push edi  +
push offset aRemoteapplic_2  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 104h  +
lea ecx [ebx+17F4h] +
push ecx  +
push edi  +
push offset aRemoteapplic_4  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 800h  +
lea ecx [ebx+19FCh] +
push ecx  +
push edi  +
push offset aRemoteapplic_5  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+1360h] +
push ecx  +
push 0  +
push offset aRemoteapplic_6  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 1F40h  +
lea ecx [ebx+2C04h] +
push ecx  +
push edi  +
push offset aRemoteapplic_7  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+1364h] +
push ecx  +
push 1  +
push offset aRemoteapplic_8  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+1368h] +
push ecx  +
push 0  +
push offset aDisableremotea  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov ecx edi +
lea eax [ebx+6C8Ch] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1033D6D  +
test dx dx +
jz loc_1033D69  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1033D6D  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1033D47  +
xor eax eax +
jmp loc_1033D72  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
mov [ebx+1354h] eax +
mov edx [esi] +
lea eax [ebx+1Ch] +
push eax  +
push 1  +
push offset aCompression  +
mov ecx esi +
call dword ptr [edx+50h]  +
test eax eax +
jz loc_1034454  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1033DB9  +
test byte ptr [eax+1Ch] 2 +
jz loc_1033DB9  +
push dword ptr [ebx+1Ch]  +
push offset dword_10043D8  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi] +
lea ecx [ebx+8708h] +
push ecx  +
push 5DCh  +
push offset aBitmapcachesiz  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
lea eax [ebx+870Ch] +
push eax  +
push 0Ah  +
push offset aBitmappersistc  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
lea eax [ebx+8710h] +
push eax  +
push 14h  +
push offset aBitmappersis_0  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
lea eax [ebx+8714h] +
push eax  +
push 1Eh  +
push offset aBitmappersis_1  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
lea eax [ebx+8718h] +
push eax  +
push 28h  +
push offset aBitmappersis_2  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
push 2  +
push dword ptr [ebx+870Ch]  +
push offset aBitmappersistc  +
push edi  +
call sub_10509E3  +
push 2  +
push dword ptr [ebx+8710h]  +
mov [ebx+870Ch] eax +
push offset aBitmappersis_0  +
push edi  +
call sub_10509E3  +
push 2  +
push dword ptr [ebx+8714h]  +
mov [ebx+8710h] eax +
push offset aBitmappersis_1  +
push edi  +
call sub_10509E3  +
push 2  +
push dword ptr [ebx+8718h]  +
mov [ebx+8714h] eax +
push offset aBitmappersis_2  +
push edi  +
call sub_10509E3  +
push 30h  +
pop ecx  +
mov [ebx+8718h] eax +
cmp [ebx+870Ch] ecx +
jbe loc_1033EC2  +
mov [ebx+870Ch] ecx +
lea edx [ebx+8710h] +
cmp [edx] ecx +
jbe loc_1033ECE  +
mov [edx] ecx +
lea edx [ebx+8714h] +
cmp [edx] ecx +
jbe loc_1033EDA  +
mov [edx] ecx +
cmp eax ecx +
jbe loc_1033EE4  +
mov [ebx+8718h] ecx +
push 6  +
pop ecx  +
push 2  +
push 0Ch  +
lea edx [ebx+8724h] +
push edx  +
xor eax eax +
mov edi edx +
stos   +
push offset a0xffffffff  +
mov edi offset aKeyboardLayout +
push edi  +
push offset word_1002174  +
call sub_1051DEC  +
lea eax [ebx+8724h] +
push eax  +
push 0Ch  +
lea eax [ebp+var_1C] +
push eax  +
call sub_101BD65  +
mov [ebp+var_740] eax +
test eax eax +
jge loc_1033F5A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034434  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034434  +
push [ebp+var_740]  +
push offset aStringcchcop_1  +
push offset dword_10043D8  +
push 20h  +
jmp loc_1034429  +
mov edx [esi] +
push 0Ch  +
lea eax [ebx+8724h] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push edi  +
mov ecx esi +
call dword ptr [edx+34h]  +
test eax eax +
jz loc_1034454  +
push 1450h  +
lea edi [ebx+9F64h] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
push 0A28h  +
push edi  +
push offset aDefault  +
call sub_1027ACB  +
mov eax [esi] +
lea ecx [ebx+873Ch] +
push ecx  +
push 0  +
push offset aRedirectdrives  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+8740h] +
push ecx  +
xor edi edi +
inc edi  +
push edi  +
push offset aRedirectprinte  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+8744h] +
push ecx  +
push 0  +
push offset aRedirectcompor  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+8748h] +
push ecx  +
push edi  +
push offset aRedirectsmartc  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+874Ch] +
push ecx  +
push edi  +
push offset aRedirectclipbo  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+875Ch] +
push ecx  +
push 0  +
push offset aRedirectposdev  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+8760h] +
push ecx  +
push edi  +
push offset aRedirectdirect  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 400h  +
lea ecx [ebx+8764h] +
push ecx  +
mov edi offset word_1002174 +
push edi  +
push offset aDevicestoredir  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 400h  +
lea ecx [ebx+8F64h] +
push ecx  +
push edi  +
push offset aUsbdevicestore  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 400h  +
lea ecx [ebx+9764h] +
push ecx  +
push offset asc_1005984  +
push offset aDrivestoredire  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov ecx ebx +
call sub_1032EDF  +
mov eax [esi] +
lea ecx [ebx+0B3B8h] +
push ecx  +
push 1  +
push offset aDisplayconnect  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+0B3C4h] +
push ecx  +
push 1  +
push offset aAutoreconnecti  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+0B3C8h] +
push ecx  +
push 14h  +
push offset aAutoreconnectM  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
push esi  +
mov ecx ebx +
call sub_102A136  +
test eax eax +
jnz loc_1034160  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034454  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034454  +
push offset dword_10043D8  +
push 21h  +
jmp loc_10341B4  +
push 208h  +
lea eax [ebx+0C874h] +
push 0  +
push eax  +
call memset  +
mov edx [esi] +
add esp 0Ch +
push 104h  +
lea eax [ebx+0C874h] +
push eax  +
push edi  +
push offset aClxcommandline  +
mov ecx esi +
call dword ptr [edx+34h]  +
test eax eax +
jnz loc_10341C4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034454  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034454  +
push offset dword_10043D8  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1034454  +
mov eax [esi] +
push 100h  +
lea ecx [ebx+0B3D0h] +
push ecx  +
push edi  +
push offset aGatewayhostnam  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov edx [esi] +
lea eax [ebx+0B5D0h] +
push eax  +
push 4  +
push offset aGatewayusageme  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
push 4  +
lea eax [ebx+0B5D0h] +
pop ecx  +
cmp [eax] ecx +
jbe loc_1034211  +
mov [eax] ecx +
mov edx [esi] +
lea eax [ebx+0B5D4h] +
push eax  +
push 4  +
push offset aGatewaycredent  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
lea eax [ebx+0B5D4h] +
cmp dword ptr [eax] 5 +
jbe loc_103423F  +
mov dword ptr [eax] 4 +
mov edx [esi] +
lea eax [ebx+0B5D8h] +
push eax  +
push 0  +
push offset aGatewayprofile  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
lea eax [ebx+0B5D8h] +
cmp dword ptr [eax] 1 +
jbe loc_103426D  +
mov dword ptr [eax] 4 +
mov edx [esi] +
lea eax [ebx+0B5E0h] +
push eax  +
push 0  +
push offset aRequirePreAuth  +
mov ecx esi +
call dword ptr [edx+48h]  +
test eax eax +
jz loc_1034454  +
cmp dword ptr [ebx+0B5E0h] 1 +
jbe loc_103429A  +
and dword ptr [ebx+0B5D8h] 0 +
mov eax [esi] +
push 100h  +
lea ecx [ebx+0B5E4h] +
push ecx  +
push edi  +
push offset aPreAuthenticat  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 100h  +
lea ecx [ebx+0B9F0h] +
push ecx  +
push edi  +
push offset aCookieBasedAut  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 100h  +
lea ecx [ebx+0B7E4h] +
push ecx  +
push edi  +
push offset aSupportUrl  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
push 100h  +
lea ecx [ebx+0BBFCh] +
push ecx  +
push edi  +
push offset aLoginWebPageAd  +
mov ecx esi +
call dword ptr [eax+34h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea edi [ebx+0B5DCh] +
push edi  +
push 1  +
push offset aPromptcredenti  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
xor eax eax +
inc eax  +
cmp [edi] eax +
jbe loc_1034344  +
mov [edi] eax +
mov eax [esi] +
lea ecx [ebx+0C204h] +
push ecx  +
push 0  +
push offset aSpanMonitors  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea ecx [ebx+0C20Ch] +
push ecx  +
push 0  +
push offset aUseMultimon  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
mov eax [esi] +
lea edi [ebx+0C214h] +
push edi  +
push 0  +
push offset aEnablesuperpan  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jz loc_1034454  +
push dword ptr [edi]  +
mov ecx ebx +
call sub_102A371  +
mov eax [esi] +
lea ecx [ebx+0C218h] +
push ecx  +
push 1  +
push offset aSuperpanaccele  +
mov ecx esi +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1034454  +
xor edi edi +
cmp [ebx+135Ch] edi +
jz loc_10343D3  +
push edi  +
mov ecx ebx +
call sub_102A371  +
lea ecx [ebx+84D8h] +
call sub_1042F77  +
test eax eax +
jz loc_10343F3  +
xor eax eax +
cmp [ebx+0CA80h] edi +
setz al  +
mov [ebx+709Ch] eax +
push esi  +
mov ecx ebx +
call sub_102C7A0  +
cmp eax edi +
mov [ebp+var_740] eax +
jge loc_103443C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034434  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034434  +
push [ebp+var_740]  +
push offset aLoadusernamefr  +
push offset dword_10043D8  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_740] +
jmp loc_1034465  +
mov eax [esi] +
lea ecx [ebx+0C224h] +
push ecx  +
push edi  +
push offset aUseRedirection  +
mov ecx esi +
call dword ptr [eax+50h]  +
test eax eax +
jnz loc_103445B  +
mov eax 80004005h +
jmp loc_1034465  +
push esi  +
mov ecx ebx +
call sub_1031C4F  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
call sub_102C746  +
mov [esi+0CA80h] eax +
mov eax [esi+0B9E4h] +
xor ebx ebx +
mov [esi+0B9E8h] ebx +
cmp eax ebx +
jz loc_10344AF  +
push eax  +
call sub_105D688  +
mov [esi+0B9E4h] ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [edi+0E70h] ebx +
jz loc_103454E  +
mov eax [edi+0E78h] +
lea eax [eax+eax+2] +
push eax  +
call sub_105D670  +
mov [esi+0B9E4h] eax +
cmp eax ebx +
jnz loc_1034507  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103474F  +
test byte ptr [eax+1Ch] 4 +
jz loc_103474F  +
push offset a_set_szencrypt  +
push offset dword_10043D8  +
push 0ECh  +
jmp loc_1034744  +
mov ecx [edi+0E78h] +
lea ecx [ecx+ecx+2] +
push ecx  +
push ebx  +
push eax  +
call memset  +
mov eax [edi+0E78h] +
add eax eax +
push eax  +
push dword ptr [edi+0E74h]  +
push dword ptr [esi+0B9E4h]  +
call memcpy  +
mov eax [edi+0E78h] +
add esp 18h +
mov [esi+0B9E8h] eax +
mov dword ptr [esi+0B9ECh] 1 +
jmp loc_1034554  +
mov [esi+0B9ECh] ebx +
movzx eax word ptr [edi+0C5Ch] +
mov [esi+0C44Ch] eax +
mov eax [edi+0E64h] +
mov [esi+0C450h] eax +
cmp [edi+834h] ebx +
jz loc_103457F  +
mov dword ptr [esi+0CA7Ch] 1 +
push dword ptr [esi+0CA8Ch]  +
mov ecx esi +
call sub_10330BC  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jge loc_10345F7  +
cmp [esi+0C45Ch] ebx +
jz loc_10345A2  +
mov eax 33F4h +
jmp loc_10345B4  +
mov eax [esi+0C228h] +
neg eax  +
sbb eax eax +
and eax 3 +
add eax 408h +
push ebx  +
lea ecx [esi+0C464h] +
push ecx  +
push eax  +
push ebx  +
call sub_105AE15  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10347A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10347A8  +
push offset dword_10043D8  +
push 0EDh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_10347A8  +
push edi  +
mov ecx esi +
call sub_102C355  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jge loc_1034642  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10347A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10347A8  +
push [ebp+arg_0]  +
push offset aApplycmdlinese  +
push offset dword_10043D8  +
push 0EEh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10347A8  +
cmp [esi+0CA7Ch] ebx +
jz loc_1034654  +
mov dword ptr [esi+0CA80h] 1 +
mov ecx esi +
call sub_102A3DD  +
cmp [esi+0C204h] ebx +
jz loc_10346E1  +
push 4Eh  +
call sub_101DF3B  +
push 4Fh  +
mov [ebp+var_4] eax +
call sub_101DF3B  +
push eax  +
push [ebp+var_4]  +
mov [ebp+var_8] eax +
call sub_1026BB3  +
mov [ebp+arg_0] eax +
cmp [esi+135Ch] ebx +
jz loc_10346AC  +
cmp [ebp+var_4] 1000h +
jg loc_103469D  +
cmp [ebp+var_8] 800h +
jle loc_10346A0  +
mov [ebp+arg_0] ebx +
call sub_1026CD0  +
test eax eax +
jnz loc_10346AC  +
mov [ebp+arg_0] ebx +
cmp [ebp+arg_0] ebx +
jz loc_10346D1  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101ED57  +
push [ebp+var_8]  +
mov ecx esi +
call sub_101ED78  +
mov dword ptr [esi+0C200h] 1 +
jmp loc_10346E1  +
mov [esi+0C204h] ebx +
mov dword ptr [esi+0C208h] 1 +
mov eax [esi+0BBF0h] +
mov [esi+0BBF4h] ebx +
cmp eax ebx +
jz loc_10346FD  +
push eax  +
call sub_105D688  +
mov [esi+0BBF0h] ebx +
cmp [edi+0E7Ch] ebx +
jz loc_103479F  +
mov eax [edi+0E84h] +
lea eax [eax+eax+2] +
push eax  +
call sub_105D670  +
mov [esi+0BBF0h] eax +
cmp eax ebx +
jnz loc_1034758  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103474F  +
test byte ptr [eax+1Ch] 4 +
jz loc_103474F  +
push offset a_set_szencry_0  +
push offset dword_10043D8  +
push 0EFh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_10347A8  +
mov ecx [edi+0E84h] +
lea ecx [ecx+ecx+2] +
push ecx  +
push ebx  +
push eax  +
call memset  +
mov eax [edi+0E84h] +
add eax eax +
push eax  +
push dword ptr [edi+0E80h]  +
push dword ptr [esi+0BBF0h]  +
call memcpy  +
mov eax [edi+0E84h] +
add esp 18h +
mov [esi+0BBF4h] eax +
mov dword ptr [esi+0BBF8h] 1 +
jmp loc_10347A5  +
mov [esi+0BBF8h] ebx +
mov [ebp+arg_0] ebx +
add esi 0CA8Ch +
mov ecx [esi] +
pop edi  +
cmp ecx ebx +
jz loc_10347C2  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push ebx  +
mov ecx esi +
call sub_1054923  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov edi ecx +
call sub_1053F9D  +
mov esi eax +
test esi esi +
jl loc_1034823  +
push [ebp+var_4]  +
mov ecx edi +
call sub_10330BC  +
mov esi eax +
test esi esi +
jge loc_103481F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103484B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103484B  +
push esi  +
push offset dword_10043D8  +
push 10Bh  +
jmp loc_1034840  +
xor esi esi +
jmp loc_103484B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103484B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103484B  +
push esi  +
push offset dword_10043D8  +
push 10Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1034864  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push 0  +
lea ecx [ebp+var_4] +
call sub_1054923  +
mov ecx [ebp+var_4] +
mov eax ecx +
test ecx ecx +
jz loc_1034874  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
push 4  +
mov edx offset aPassword50 +
pop esi  +
mov ax [ecx] +
cmp ax [edx] +
jnz loc_10348C4  +
test ax ax +
jz loc_10348C0  +
mov ax [ecx+2] +
cmp ax [edx+2] +
jnz loc_10348C4  +
add ecx esi +
add edx esi +
test ax ax +
jnz loc_10348A0  +
xor eax eax +
jmp loc_10348C9  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_10348D2  +
xor eax eax +
inc eax  +
jmp loc_1034941  +
mov eax [ebp+arg_0] +
mov ecx offset aPassword +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10348FE  +
test dx dx +
jz loc_10348FA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10348FE  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_10348DA  +
xor eax eax +
jmp loc_1034903  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_10348CD  +
mov eax [ebp+arg_0] +
mov ecx offset aSalt50 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1034933  +
test dx dx +
jz loc_103492F  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1034933  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_103490F  +
xor eax eax +
jmp loc_1034938  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push 2  +
xor esi esi +
push esi  +
push [ebp+phkResult]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1034984  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegDeleteValueW  +
test eax eax +
jnz loc_103497B  +
inc esi  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aPassword50  +
push [ebp+phkResult]  +
mov esi ecx +
push [ebp+hKey]  +
call sub_103494B  +
push offset aPassword  +
push [ebp+phkResult]  +
mov ecx esi +
push [ebp+hKey]  +
call sub_103494B  +
push offset aSalt50  +
push [ebp+phkResult]  +
mov ecx esi +
push [ebp+hKey]  +
call sub_103494B  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi offset aDesktopSizeId +
push edi  +
mov ecx esi +
call dword ptr [eax+60h]  +
xor ebx ebx +
inc ebx  +
test eax eax +
jnz loc_1034A34  +
mov eax [esi] +
push ebx  +
push 0  +
push 0FFFFFFFFh  +
push edi  +
mov ecx esi +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_1034A34  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034A2D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034A2D  +
push offset dword_1009CEC  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
jmp loc_1034AF9  +
mov eax [esi] +
mov edi offset aScreenModeId +
push edi  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jnz loc_1034A70  +
mov eax [esi] +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
mov ecx esi +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_1034A70  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034A2D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034A2D  +
push offset dword_1009CEC  +
push 16h  +
jmp loc_1034A22  +
mov eax [esi] +
mov edi offset aBitmapcacheper +
push edi  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jnz loc_1034AB0  +
mov eax [esi] +
push ebx  +
push 0  +
push 0FFFFFFFFh  +
push edi  +
mov ecx esi +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_1034AB0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034A2D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034A2D  +
push offset dword_1009CEC  +
push 17h  +
jmp loc_1034A22  +
mov eax [esi] +
mov edi offset aCompression +
push edi  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jnz loc_1034AF7  +
mov eax [esi] +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
mov ecx esi +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_1034AF7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034A2D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034A2D  +
push offset dword_1009CEC  +
push 18h  +
jmp loc_1034A22  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push offset aPassword  +
mov ecx esi +
mov [ebp+var_224] 1 +
call dword ptr [eax+58h]  +
call sub_1050F9B  +
mov ebx offset aPassword50 +
test eax eax +
jz loc_1034CB0  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jz loc_1034CB0  +
mov eax [esi] +
push offset aSalt50  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jz loc_1034CB0  +
and [ebp+hMem] 0 +
push edi  +
mov edi 200h +
push edi  +
lea eax [ebp+var_218] +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
push edi  +
lea ecx [ebp+var_218] +
push ecx  +
push ebx  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
test eax eax +
jz loc_1034BAA  +
mov [ebp+hMem] 1 +
jmp loc_1034BCE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034BCE  +
test byte ptr [eax+1Ch] 2 +
jz loc_1034BCE  +
push offset dword_1009CEC  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi] +
push 14h  +
lea ecx [ebp+var_18] +
push ecx  +
push offset aSalt50  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
test eax eax +
jnz loc_1034C16  +
and [ebp+hMem] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034CAF  +
test byte ptr [eax+1Ch] 2 +
jz loc_1034CAF  +
push offset dword_1009CEC  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+hMem] 0 +
jz loc_1034CAF  +
push 14h  +
lea eax [ebp+var_18] +
push eax  +
push 20h  +
lea eax [ebp+var_218] +
push eax  +
call sub_1049B77  +
test eax eax +
jz loc_1034CAF  +
and [ebp+hMem] 0 +
lea eax [ebp+var_218] +
mov [ebp+var_228] eax +
lea eax [ebp+var_220] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
mov [ebp+var_22C] edi +
call sub_1050FF5  +
test eax eax +
jz loc_1034C9B  +
push [ebp+var_220]  +
mov eax [esi] +
push [ebp+hMem]  +
mov ecx esi +
push offset aPassword51  +
call dword ptr [eax+40h]  +
test eax eax +
jnz loc_1034C8D  +
and [ebp+var_224] eax +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1034CA2  +
and [ebp+var_224] 0 +
lea eax [ebp+var_218] +
mov byte ptr [eax] 0 +
inc eax  +
dec edi  +
jnz loc_1034CA8  +
pop edi  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov eax [esi] +
push offset aSalt50  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_224] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1034D52  +
push offset aMru  +
push esi  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1034D4D  +
mov ecx offset aMru0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1034D2B  +
test dx dx +
jz loc_1034D27  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1034D2B  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1034D05  +
xor eax eax +
jmp loc_1034D30  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1034D52  +
push offset aFullAddress  +
push [ebp+arg_4]  +
push esi  +
call sub_101BD65  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
jmp loc_1034D54  +
xor eax eax +
inc eax  +
jmp loc_1034D54  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hKey] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
lea edx [ebp+phkResult] +
push edx  +
push 20019h  +
mov [ebp+var_328] ecx +
mov ecx [ebp+lpSubKey] +
xor ebx ebx +
push ebx  +
push ecx  +
push eax  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1034FCD  +
push esi  +
mov esi 104h +
push esi  +
lea eax [ebp+Data] +
push ebx  +
push eax  +
mov [ebp+dwIndex] ebx +
mov [ebp+cbValueName] esi +
mov [ebp+cbData] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push ebx  +
jmp loc_1034F27  +
mov eax [ebp+Type] +
dec eax  +
jz loc_1034E9D  +
dec eax  +
dec eax  +
jz loc_1034E2B  +
dec eax  +
jnz loc_1034EDA  +
mov eax [edi] +
push 1  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+ValueName] +
push 0FFFFFFFFh  +
push ecx  +
mov ecx edi +
call dword ptr [eax+4Ch]  +
jmp loc_1034ECC  +
mov ecx [ebp+var_328] +
lea eax [ebp+ValueName] +
push eax  +
call sub_103488F  +
test eax eax +
jz loc_1034E5E  +
push [ebp+cbData]  +
mov eax [edi] +
lea ecx [ebp+Data] +
push ecx  +
lea ecx [ebp+ValueName] +
push ecx  +
mov ecx edi +
call dword ptr [eax+40h]  +
jmp loc_1034E93  +
lea eax [ebp+ValueName] +
push offset a50  +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1034E7B  +
xor ecx ecx +
mov [eax] cx +
mov eax [edi] +
push 1  +
lea ecx [ebp+Data] +
push ecx  +
push ebx  +
lea ecx [ebp+ValueName] +
push ecx  +
mov ecx edi +
call dword ptr [eax+38h]  +
mov [ebp+cbData] eax +
cmp eax ebx +
jmp loc_1034ED4  +
mov ecx [ebp+var_328] +
push esi  +
lea eax [ebp+ValueName] +
push eax  +
call sub_1034CDF  +
test eax eax +
jz loc_1034EDA  +
mov eax [edi] +
push 1  +
lea ecx [ebp+Data] +
push ecx  +
push ebx  +
lea ecx [ebp+ValueName] +
push ecx  +
mov ecx edi +
call dword ptr [eax+38h]  +
cmp eax ebx +
mov [ebp+cbData] eax +
jz loc_1034F84  +
inc [ebp+dwIndex]  +
push esi  +
lea eax [ebp+Data] +
push ebx  +
push eax  +
mov [ebp+cbValueName] esi +
mov [ebp+cbData] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+dwIndex]  +
push [ebp+phkResult]  +
call ds:RegEnumValueW  +
cmp eax ebx +
jz loc_1034DF6  +
cmp eax 103h +
jnz loc_1034F4E  +
mov [ebp+cbData] 1 +
jmp loc_1034F84  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034F7E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034F7E  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_1009CEC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov [ebp+cbData] ebx +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
pop esi  +
test eax eax +
jz loc_1034FC5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034FC5  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034FC5  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_1009CEC  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [ebp+cbData] +
jmp loc_1034FFF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1034FFD  +
test byte ptr [eax+1Ch] 4 +
jz loc_1034FFD  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_1009CEC  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_210] ecx +
test ebx ebx +
jz loc_10350F8  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+24h]  +
test eax eax +
jz loc_10350F8  +
test esi esi +
jz loc_10350F8  +
push offset aDefault  +
push esi  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10350F8  +
push esi  +
push offset SubKey  +
push offset aSS  +
lea eax [ebp+phkResult] +
push 104h  +
push eax  +
call sub_101BDD4  +
add esp 14h +
test eax eax +
jl loc_10350F8  +
mov ecx [ebp+var_210] +
push ebx  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 80000002h +
push edi  +
call sub_1034D5E  +
mov ecx [ebp+var_210] +
push ebx  +
lea eax [ebp+phkResult] +
push eax  +
lea esi [edi-1] +
push esi  +
call sub_1034D5E  +
test eax eax +
jz loc_10350F8  +
mov ecx [ebp+var_210] +
push ebx  +
call sub_1034B05  +
test eax eax +
jnz loc_103510B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10350F8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10350F8  +
push offset dword_1009CEC  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
cmp [ebp+arg_8] 0 +
jz loc_1035137  +
mov ecx [ebp+var_210] +
lea eax [ebp+phkResult] +
push eax  +
push edi  +
call sub_1034990  +
mov ecx [ebp+var_210] +
lea eax [ebp+phkResult] +
push eax  +
push esi  +
call sub_1034990  +
mov ecx [ebp+var_210] +
push ebx  +
call sub_10349D9  +
jmp loc_10350FA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 644h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_63C] ecx +
mov [ebp+lpFileName] eax +
mov [ebp+var_638] esi +
cmp eax esi +
jz loc_103555E  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_103553A  +
cmp [ebp+hKey] esi +
jz loc_103553A  +
mov ebx ds:RegEnumKeyExW +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+dwIndex] esi +
mov [ebp+cbName] 104h +
call ebx  +
mov edi offset dword_1009CEC +
jmp loc_103546F  +
mov ecx offset aTrace +
lea eax [ebp+Name] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1035224  +
cmp dx si +
jz loc_1035220  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1035224  +
add eax 4 +
add ecx 4 +
cmp dx si +
jnz loc_10351FE  +
xor eax eax +
jmp loc_1035229  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jz loc_1035439  +
mov ecx offset aDefault +
lea eax [ebp+Name] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1035262  +
cmp dx si +
jz loc_103525E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1035262  +
add eax 4 +
add ecx 4 +
cmp dx si +
jnz loc_103523C  +
xor eax eax +
jmp loc_1035267  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jz loc_1035439  +
lea eax [ebp+Name] +
push offset aLocaldevices  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1035439  +
lea eax [ebp+Name] +
push offset aRemoteapplic_9  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1035439  +
lea eax [ebp+Name] +
push offset aImeMappingTabl  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1035439  +
lea eax [ebp+Name] +
push offset aGateway  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1035439  +
lea eax [ebp+Name] +
push offset aTrustedsites  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1035439  +
lea eax [ebp+Name] +
push eax  +
push [ebp+lpFileName]  +
lea eax [ebp+var_620] +
push offset aSS_rdp  +
push 208h  +
push eax  +
mov [ebp+var_624] esi +
call sub_101BDD4  +
add esp 14h +
cmp eax esi +
jl loc_1035491  +
cmp [ebp+var_638] esi +
jnz loc_1035354  +
push [ebp+lpFileName]  +
call sub_1027210  +
test eax eax +
jz loc_10354D8  +
mov [ebp+var_638] 1 +
lea eax [ebp+var_624] +
push eax  +
lea eax [ebp+var_620] +
push eax  +
call sub_1053EA3  +
cmp eax esi +
jl loc_1035400  +
mov ecx [ebp+var_63C] +
push 1  +
push [ebp+var_624]  +
lea eax [ebp+Name] +
push eax  +
call sub_1035014  +
test eax eax +
jnz loc_10353BB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10353BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10353BB  +
lea ecx [ebp+var_620] +
push ecx  +
lea ecx [ebp+Name] +
push ecx  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
mov ecx [ebp+var_624] +
mov eax [ecx] +
push esi  +
call dword ptr [eax+10h]  +
cmp eax esi +
jge loc_10353F3  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10353F3  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10353F3  +
push eax  +
push offset aCommitstoreFai  +
push edi  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx [ebp+var_624] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
jmp loc_1035423  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1035423  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1035423  +
push eax  +
push edi  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax [ebp+var_624] +
cmp eax esi +
jz loc_1035439  +
mov [ebp+var_624] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+dwIndex]  +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbName] 104h +
push [ebp+hKey]  +
call ebx  +
test eax eax +
jz loc_10351F3  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test eax eax +
jnz loc_103550C  +
inc eax  +
jmp loc_1035560  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10354B9  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10354B9  +
push eax  +
push offset aStringcchprint  +
push edi  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+var_624] +
cmp eax esi +
jz loc_103555E  +
mov [ebp+var_624] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_103555E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10354FE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10354FE  +
push [ebp+lpFileName]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_10354B9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103555E  +
test byte ptr [eax+1Ch] 4 +
jz loc_103555E  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push edi  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_103555E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103555E  +
test byte ptr [eax+1Ch] 4 +
jz loc_103555E  +
push offset dword_1009CEC  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102692A  +
test [ebp+arg_0] 1 +
jz loc_1035590  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx+1Ch] +
xor eax eax +
test ecx ecx +
jz locret_10355A8  +
mov eax [ecx+44h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+1Ch] +
push esi  +
test ecx ecx +
jnz loc_10355E1  +
mov eax lpReserved +
mov esi 8000FFFFh +
cmp eax offset lpReserved +
jz loc_1035619  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035619  +
push esi  +
push offset aStartremotea_1  +
push offset dword_1009E10  +
push 0Dh  +
jmp loc_103560E  +
push [ebp+arg_0]  +
call sub_1020E62  +
mov esi eax +
test esi esi +
jge loc_1035619  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035619  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035619  +
push esi  +
push offset aStartremotea_0  +
push offset dword_1009E10  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0AC0h  +
mov [esi+18h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103564C  +
mov ecx eax +
call sub_10268C5  +
jmp loc_103564E  +
xor eax eax +
mov [esi+20h] eax +
test eax eax +
jz loc_1035684  +
push edi  +
mov ecx eax +
call sub_10275EE  +
test eax eax +
jz loc_1035669  +
or dword ptr [esi+0Ch] 2 +
xor edi edi +
jmp loc_10356CB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10356A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10356A8  +
push offset dword_1009E10  +
push 0Fh  +
jmp loc_103569D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10356A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10356A8  +
push offset dword_1009E10  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+20h] +
mov edi 80004005h +
test ecx ecx +
jz loc_10356CB  +
call sub_1026AA7  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_10356C7  +
push 1  +
call sub_1035576  +
and dword ptr [esi+20h] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
xor edi edi +
xor ebx ebx +
push eax  +
inc ebx  +
mov [ebp+var_4] edi +
xor esi esi +
mov [ebp+var_8] edi +
call sub_1049D94  +
test eax eax +
jge loc_1035735  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10357CC  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10357CC  +
push eax  +
push offset aLoaddefaultpro  +
push offset dword_1009E10  +
push 1Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10357CC  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_103576A  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov edi eax +
mov esi eax +
xor edx edx +
inc edx  +
shr edi 1 +
shr eax 2 +
not esi  +
not edi  +
not eax  +
and esi edx +
and eax edx +
and edi edx +
mov [ebp+var_8] eax +
test esi esi +
jz loc_103576D  +
test edi edi +
jz loc_103576D  +
test eax eax +
jnz loc_10357CC  +
jmp loc_103576D  +
xor edx edx +
inc edx  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
cmp [eax+0B5D8h] edx +
jz loc_1035783  +
cmp [ecx+0B5D8h] edx +
jnz loc_10357CA  +
xor ebx ebx +
cmp esi ebx +
jnz loc_1035797  +
mov esi [eax+0B5D0h] +
cmp esi [ecx+0B5D0h] +
jnz loc_10357CC  +
cmp [ebp+var_8] ebx +
jnz loc_10357AA  +
mov esi [eax+0B5D4h] +
cmp esi [ecx+0B5D4h] +
jnz loc_10357CC  +
cmp edi ebx +
jnz loc_10357CA  +
add ecx 0B3D0h +
push ecx  +
add eax 0B3D0h +
push eax  +
call ds:lstrcmpiW  +
mov ebx eax +
neg ebx  +
sbb ebx ebx +
inc ebx  +
jmp loc_10357CC  +
mov ebx edx +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_10357D8  +
mov eax [ecx] +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 430h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
xor eax eax +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_428] eax +
mov [ebp+var_424] eax +
mov [ebp+var_41C] eax +
mov [ebp+var_420] eax +
push 105h  +
lea eax [ebp+var_418] +
push eax  +
lea eax [ebp+var_424] +
push eax  +
lea eax [ebp+var_428] +
push eax  +
call sub_102A91A  +
mov esi eax +
xor eax eax +
cmp esi eax +
jge loc_103587F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035A9A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035A9A  +
push esi  +
push offset aLoadconnection  +
push offset dword_1009E10  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1035A9A  +
cmp [ebp+var_428] eax +
jz loc_1035A54  +
cmp [ebp+arg_4] eax +
jz loc_1035A54  +
cmp [ebp+var_424] eax +
jnz loc_1035A54  +
lea eax [ebp+Buffer] +
push eax  +
push 104h  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jnz loc_1035901  +
mov eax lpReserved +
mov esi ds:GetLastError +
cmp eax offset lpReserved +
jz loc_10358E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10358E8  +
call esi  +
push eax  +
mov eax lpReserved +
push offset dword_1009E10  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
call esi  +
test eax eax +
jg loc_10358F5  +
mov esi eax +
jmp loc_1035A9A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10358EE  +
mov esi ds:SysAllocString +
push edi  +
call esi  +
mov [ebp+var_41C] eax +
test eax eax +
jnz loc_1035947  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103593D  +
test byte ptr [eax+1Ch] 4 +
jz loc_103593D  +
push offset aBstr  +
push offset dword_1009E10  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_1035A85  +
push ebx  +
call esi  +
mov [ebp+var_420] eax +
test eax eax +
jnz loc_1035987  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103597D  +
test byte ptr [eax+1Ch] 4 +
jz loc_103597D  +
push offset aBstr  +
push offset dword_1009E10  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_1035A70  +
lea eax [ebp+Buffer] +
push eax  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_10359C9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10359BF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10359BF  +
push offset aBstr  +
push offset dword_1009E10  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_1035A65  +
lea eax [ebp+var_418] +
push eax  +
call esi  +
mov ebx eax +
test ebx ebx +
jnz loc_1035A08  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035A01  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035A01  +
push offset aBstr  +
push offset dword_1009E10  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_1035A5A  +
push ebx  +
push edi  +
push [ebp+var_420]  +
push [ebp+var_41C]  +
call sub_105CA3C  +
mov esi eax +
test esi esi +
jge loc_1035A4D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035A5A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035A5A  +
push esi  +
push offset aCtsccomhelperS  +
push offset dword_1009E10  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1035A5A  +
mov esi 40200h +
jmp loc_1035A5A  +
xor esi esi +
mov ebx eax +
mov edi eax +
test ebx ebx +
jz loc_1035A65  +
push ebx  +
call ds:SysFreeString  +
test edi edi +
jz loc_1035A70  +
push edi  +
call ds:SysFreeString  +
cmp [ebp+var_420] 0 +
jz loc_1035A85  +
push [ebp+var_420]  +
call ds:SysFreeString  +
cmp [ebp+var_41C] 0 +
jz loc_1035A9A  +
push [ebp+var_41C]  +
call ds:SysFreeString  +
test esi esi +
jge loc_1035AAC  +
push 1  +
push 33F5h  +
push 0  +
call sub_105B0B4  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax lpReserved +
mov edi offset lpReserved +
mov esi offset dword_1009E10 +
cmp eax edi +
jz loc_1035B00  +
test byte ptr [eax+1Ch] 2 +
jz loc_1035B00  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax lpReserved +
cmp [ebp+arg_4] 0 +
jz loc_1035B34  +
cmp eax edi +
jz loc_1035B24  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035B24  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp dword ptr [ebx+24h] 0 +
jnz loc_1035B37  +
mov ecx [ebx+1Ch] +
call sub_101EEBC  +
jmp loc_1035B37  +
inc dword ptr [ebx+24h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+1Ch] +
push edi  +
test ecx ecx +
jz loc_1035CF7  +
call sub_101EC5A  +
test eax eax +
jnz loc_1035B9A  +
mov ecx [esi+1Ch] +
call sub_101EC22  +
test eax eax +
jnz loc_1035B9A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035CCA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035CCA  +
push 1  +
push offset aSessionNotLogg  +
push offset dword_1009E10  +
push 16h  +
jmp loc_1035CBF  +
cmp dword ptr [esi+28h] 0 +
jnz loc_1035BAA  +
mov esi 8000FFFFh +
jmp loc_1035D1E  +
mov ebx [ebp+arg_0] +
lea ecx [ebx+54h] +
call sub_1034881  +
mov edi eax +
mov eax [esi+28h] +
lea ecx [eax+54h] +
call sub_1034881  +
push edi  +
mov edi ds:lstrcmpiW +
push eax  +
call edi  +
test eax eax +
jz loc_1035BFD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035CCA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035CCA  +
push 1  +
push offset aGetflatconnect  +
push offset dword_1009E10  +
push 18h  +
jmp loc_1035CBF  +
mov eax [esi+28h] +
push ebx  +
push eax  +
call sub_10356D8  +
test eax eax +
jnz loc_1035C38  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035CCA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035CCA  +
push 1  +
push offset aMatchproxysett  +
push offset dword_1009E10  +
push 19h  +
jmp loc_1035CBF  +
mov eax [esi+28h] +
lea ecx [ebx+254h] +
push ecx  +
add eax 254h +
push eax  +
call edi  +
test eax eax +
jz loc_1035C70  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035CCA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035CCA  +
push 1  +
push offset aUsernamesDoNot  +
push offset dword_1009E10  +
push 1Ah  +
jmp loc_1035CBF  +
mov eax [esi+28h] +
add eax 254h +
cmp word ptr [eax] 0 +
jz loc_1035CCA  +
push eax  +
call sub_1026E84  +
test eax eax +
jnz loc_1035CCF  +
mov esi [esi+28h] +
add ebx 0A54h +
push ebx  +
add esi 0A54h +
push esi  +
call edi  +
test eax eax +
jz loc_1035CCF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035CCA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1035CCA  +
push 1  +
push offset aDomainsDoNotMa  +
push offset dword_1009E10  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
xor esi esi +
inc esi  +
jmp loc_1035D1E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035CF3  +
test byte ptr [eax+1Ch] 2 +
jz loc_1035CF3  +
push offset dword_1009E10  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor esi esi +
jmp loc_1035D1E  +
xor esi esi +
inc esi  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035D1E  +
test byte ptr [eax+1Ch] 2 +
jz loc_1035D1E  +
push offset dword_1009E10  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
cmp [esi+28h] ebx +
jz loc_1035DC4  +
mov ecx [esi+20h] +
cmp ecx ebx +
jz loc_1035DC4  +
call sub_1026AA7  +
mov eax [esi+28h] +
cmp [eax+18h] ebx +
jz loc_1035DC0  +
mov ecx [esi+1Ch] +
cmp ecx ebx +
jz loc_1035DC0  +
cmp [ecx+6A4h] ebx +
jz loc_1035DC0  +
cmp [eax+0C228h] ebx +
jz loc_1035D9C  +
mov ecx eax +
push 1  +
lea eax [ecx+0C464h] +
push eax  +
call sub_102F9B8  +
mov edi eax +
cmp edi ebx +
jge loc_1035DC7  +
mov esi [esi+28h] +
push dword ptr [esi+135Ch]  +
add esi 0C464h +
push esi  +
push 407h  +
push ebx  +
call sub_105AE15  +
jmp loc_1035DC7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035DC0  +
test byte ptr [eax+1Ch] 2 +
jz loc_1035DC0  +
push offset dword_1009E10  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor edi edi +
jmp loc_1035DC7  +
xor edi edi +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
push edi  +
push offset aCtscremotese_3  +
mov esi ecx +
call sub_101CA2D  +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100A154 +
mov [esi+28h] edi +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_10360F1  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100A154 +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035E4F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1035E4F  +
push offset dword_1009E10  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+1Ch] +
test ecx ecx +
jz loc_1035E5C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1035E6A  +
push 1  +
call sub_1035576  +
lea edi [esi+28h] +
push 0  +
mov ecx edi +
call sub_101C97A  +
and dword ptr [esi+20h] 0 +
or dword ptr [esi+0Ch] 4 +
mov eax [edi] +
test eax eax +
jz loc_1035E8D  +
and dword ptr [edi] 0 +
push eax  +
call sub_1018A83  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
pop edi  +
mov dword ptr [esi+4] offset off_10025A4 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_8] +
call sub_1061FCA  +
push [ebp+arg_4]  +
lea edi [esi+28h] +
mov ecx edi +
call sub_101C97A  +
mov eax [edi] +
cmp dword ptr [eax+135Ch] 0 +
jz loc_1035FB3  +
cmp [ebp+arg_0] 0 +
jnz loc_1035FB3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1035F0B  +
test byte ptr [eax+1Ch] 2 +
jz loc_1035F0B  +
push offset dword_1009E10  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push dword ptr [edi]  +
lea ecx [ebp+var_8] +
push dword ptr [esi+20h]  +
call sub_1040BBF  +
mov ebx eax +
test ebx ebx +
jge loc_1035F55  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1036031  +
test byte ptr [eax+1Ch] 4 +
jz loc_1036031  +
push ebx  +
push offset aFailedToInit_2  +
push offset dword_1009E10  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1036031  +
push 0  +
push 0  +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_8] +
call sub_10408B4  +
mov ebx eax +
cmp ebx 40200h +
jnz loc_1035F9F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1036031  +
test byte ptr [eax+1Ch] 2 +
jz loc_1036031  +
push offset dword_1009E10  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1036031  +
test ebx ebx +
jge loc_1035FB3  +
push 1  +
push 33F5h  +
push 0  +
call sub_105B0B4  +
jmp loc_1036031  +
push 6D4h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1035FCC  +
push esi  +
mov ecx eax +
call sub_1021B39  +
jmp loc_1035FCE  +
xor eax eax +
mov [esi+1Ch] eax +
test eax eax +
jz loc_1036008  +
push dword ptr [esi+20h]  +
mov edi [edi] +
push edi  +
push dword ptr [esi+18h]  +
mov ecx eax +
call sub_10225D6  +
test eax eax +
jz loc_1035FED  +
xor ebx ebx +
jmp loc_1036031  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103602C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103602C  +
push offset dword_1009E10  +
push 14h  +
jmp loc_1036021  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103602C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103602C  +
push offset dword_1009E10  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ebx 80004005h +
lea ecx [ebp+var_8] +
call sub_1040B9A  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1036066  +
mov ecx eax +
call sub_1035DD2  +
jmp loc_1036068  +
xor eax eax +
push esi  +
push edi  +
push eax  +
lea ecx [ebp+var_4] +
call sub_101C97A  +
mov edi [ebp+var_4] +
test edi edi +
jz loc_10360B6  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1035625  +
mov esi eax +
test esi esi +
jge loc_10360DF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10360DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10360DF  +
push esi  +
push offset aCtscremotese_4  +
push offset dword_1009E10  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10360DF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10360DA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10360DA  +
push offset dword_1009E10  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 8007000Eh +
mov eax [ebp+arg_4] +
mov [eax] edi +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1035E18  +
test byte ptr [ebp+8] 1 +
jz loc_103610B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105C2FD  +
test [ebp+arg_0] 1 +
jz loc_1036131  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
cmp dword ptr [esi+22Ch] 0 +
jz loc_10361A8  +
xor eax eax +
push 1FEh  +
push eax  +
mov [ebp+String] ax +
lea eax [ebp-202h] +
push eax  +
call memset  +
add esp 0Ch +
push 100h  +
lea eax [ebp+String] +
push eax  +
push 32FAh  +
push dword ptr [esi+1Ch]  +
call ds:GetDlgItemTextW  +
mov ecx [esi+22Ch] +
lea eax [ebp+String] +
push eax  +
call sub_105C328  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+22Ch] +
test ecx ecx +
jz loc_10361CF  +
pop ebp  +
jmp sub_105B7FD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax [ebx+10h] +
mov edx [ebx+18h] +
mov ecx [ebx+0Ch] +
xor esi esi +
push esi  +
sub edx eax +
push edx  +
mov edx [ebx+14h] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push esi  +
push dword ptr [ebx+1Ch]  +
call ds:SetWindowPos  +
mov eax [ebx] +
mov ecx [eax+0C234h] +
mov [ebp+var_C] ecx +
mov edi offset dword_100A2B8 +
cmp [eax+0CA7Ch] esi +
jnz loc_1036223  +
mov edi offset dword_100A228 +
mov esi ds:EnableWindow +
mov [ebp+var_4] edi +
lea edi [edi+ecx*4+4] +
mov [ebp+var_8] 5 +
push dword ptr [edi]  +
mov eax [ebp+var_4] +
push dword ptr [eax]  +
push dword ptr [ebx+1Ch]  +
call ds:GetDlgItem  +
push eax  +
call esi  +
add [ebp+var_4] 1Ch +
add edi 1Ch +
dec [ebp+var_8]  +
jnz loc_1036237  +
cmp [ebp+var_C] 5 +
jnz loc_1036260  +
push 0  +
jmp loc_1036262  +
push 1  +
push 1  +
push dword ptr [ebx+20h]  +
call ds:GetDlgItem  +
push eax  +
call esi  +
xor esi esi +
cmp [ebp+hWnd] esi +
jz loc_103635A  +
cmp [ebx+22Ch] esi +
jnz loc_10362B0  +
push 834h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10362A8  +
mov edx [ebx] +
push esi  +
add edx 0CA94h +
push edx  +
push dword ptr [ebx+4]  +
mov ecx eax +
call sub_105C6CB  +
jmp loc_10362AA  +
xor eax eax +
mov [ebx+22Ch] eax +
push 32FFh  +
push dword ptr [ebx+1Ch]  +
call ds:GetDlgItem  +
mov [ebp+hWnd] eax +
cmp [ebx+22Ch] esi +
jz loc_103634F  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+1Ch]  +
call sub_1050D43  +
mov edi [ebx+22Ch] +
add edi 1Ch +
lea esi [ebp+Rect] +
movs   +
movs   +
movs   +
push 32E9h  +
movs   +
push dword ptr [ebx+4]  +
call sub_105DC73  +
test eax eax +
jz loc_103634F  +
push dword ptr [ebx+22Ch]  +
push offset DialogFunc  +
push dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx+4]  +
call ds:CreateDialogIndirectParamW  +
push 5  +
push eax  +
mov [ebx+230h] eax +
call ds:ShowWindow  +
push 32FAh  +
push dword ptr [ebx+1Ch]  +
call ds:GetDlgItem  +
push 3  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push eax  +
push dword ptr [ebx+230h]  +
call ds:SetWindowPos  +
push 0  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
mov esi 32FAh +
push esi  +
push dword ptr [ebx+1Ch]  +
call ds:GetDlgItem  +
push eax  +
push dword ptr [ebx]  +
call sub_1026EEB  +
mov eax [ebx] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
push esi  +
push dword ptr [ebx+1Ch]  +
call ds:SetDlgItemTextW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 208h  +
lea edi [esi+24h] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
push 104h  +
push edi  +
push 444h  +
push dword ptr [esi+4]  +
call sub_105DD36  +
pop edi  +
pop esi  +
test eax eax +
jnz loc_10363EB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10363E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10363E8  +
push offset dword_100A218  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 100h  +
lea eax [ebp+String] +
push eax  +
mov esi ecx +
push 32FAh  +
push dword ptr [esi+1Ch]  +
call ds:GetDlgItemTextW  +
mov ecx [esi] +
lea eax [ebp+String] +
push eax  +
add ecx 54h +
call sub_105B15D  +
mov ecx [esi+22Ch] +
pop esi  +
test ecx ecx +
jz loc_1036447  +
call sub_105B3A7  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
inc edi  +
call sub_10363F4  +
mov ecx [esi] +
mov eax [ecx+0C234h] +
test eax eax +
jz loc_103647F  +
cmp eax edi +
jz loc_103647B  +
cmp eax 2 +
jz loc_103647F  +
xor eax eax +
jmp loc_1036481  +
mov eax edi +
push eax  +
lea eax [ecx+0C464h] +
push eax  +
call sub_102F9B8  +
test eax eax +
jge loc_10364AE  +
mov eax [esi] +
push dword ptr [eax+135Ch]  +
add eax 0C464h +
push eax  +
push 407h  +
push 0  +
call sub_105AE15  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 478h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
push ecx  +
mov [ebp+var_41C] ecx +
mov [ebp+var_418] ecx +
lea ecx [ebp+Buffer] +
push ecx  +
mov edi 104h +
push edi  +
add eax 0C464h +
push eax  +
call ds:GetFullPathNameW  +
mov ebx 0C464h +
test eax eax +
jnz loc_103653B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1036535  +
test byte ptr [eax+1Ch] 4 +
jz loc_1036535  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100A218  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi] +
add eax ebx +
jmp loc_1036541  +
lea eax [ebp+Buffer] +
push 58h  +
mov [ebp+var_420] eax +
lea eax [ebp+var_478] +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
add eax ebx +
push eax  +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
call sub_101BD65  +
mov eax [esi+1Ch] +
mov [ebp+var_478.hwndOwner] eax +
mov eax [esi+4] +
mov [ebp+var_478.hInstance] eax +
lea eax [ebp+var_20C] +
mov [ebp+var_478.lpstrFile] eax +
lea eax [esi+24h] +
mov [ebp+var_478.lpstrFilter] eax +
lea eax [ebp+var_478] +
push eax  +
mov [ebp+var_478.lStructSize] 4Ch +
mov [ebp+var_478.nMaxFile] edi +
mov [ebp+var_478.lpstrDefExt] offset aRdp +
mov [ebp+var_478.Flags] 2000806h +
call ds:GetSaveFileNameW  +
test eax eax +
jz loc_10367A9  +
lea eax [ebp+var_20C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10365D5  +
sub eax edx +
sar eax 1 +
cmp eax 0FFh +
jb loc_1036669  +
lea eax [ebp+eax*2+var_216] +
push offset a_rdp  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1036669  +
mov eax 40Fh +
xor esi esi +
push esi  +
lea ecx [ebp+var_20C] +
push ecx  +
push eax  +
push esi  +
call sub_105AE15  +
mov ecx [ebp+var_418] +
test ecx ecx +
jz loc_103662E  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov ecx [ebp+var_418] +
mov eax ecx +
test ecx ecx +
jz loc_1036641  +
and [ebp+var_418] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_41C] +
test eax eax +
jz loc_1036658  +
and [ebp+var_41C] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
mov ecx esi +
call sub_10363F4  +
mov eax [esi] +
mov eax [eax+0C234h] +
test eax eax +
jz loc_103668A  +
cmp eax 1 +
jz loc_1036686  +
cmp eax 2 +
jz loc_103668A  +
xor ebx ebx +
jmp loc_103668D  +
xor ebx ebx +
inc ebx  +
lea eax [ebp+var_41C] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1053C91  +
test eax eax +
jge loc_10366D5  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10366CB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10366CB  +
push eax  +
push offset dword_100A218  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax 406h +
jmp loc_1036608  +
lea eax [ebp+var_418] +
push eax  +
push [ebp+var_420]  +
call sub_1053EA3  +
test eax eax +
jge loc_1036709  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10366CB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10366CB  +
push eax  +
push offset dword_100A218  +
push 0Eh  +
jmp loc_10366C0  +
mov eax [esi] +
add eax 0C228h +
mov edi [eax] +
and dword ptr [eax] 0 +
mov ecx [esi] +
push ebx  +
push [ebp+var_418]  +
call sub_102CCAC  +
test eax eax +
jge loc_1036760  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103674E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103674E  +
push eax  +
push offset dword_100A218  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax [esi] +
mov [eax+0C228h] edi +
mov eax 407h +
jmp loc_1036608  +
mov ecx [ebp+var_418] +
push [ebp+var_41C]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jge loc_103679B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103674E  +
test byte ptr [eax+1Ch] 4 +
jz loc_103674E  +
push offset dword_100A218  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103674E  +
mov ecx [esi] +
lea eax [ebp+var_20C] +
push eax  +
call sub_102AE69  +
xor esi esi +
inc esi  +
jmp loc_1036619  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 268h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 58h  +
xor ebx ebx +
lea eax [ebp+var_268] +
push ebx  +
push eax  +
mov esi ecx +
call memset  +
mov eax [esi] +
add esp 0Ch +
add eax 0C464h +
push eax  +
mov edi 104h +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
call sub_101BD65  +
mov eax [esi+1Ch] +
mov [ebp+var_268.hwndOwner] eax +
mov eax [esi+4] +
mov [ebp+var_268.hInstance] eax +
lea eax [ebp+var_20C] +
mov [ebp+var_268.lpstrFile] eax +
lea eax [esi+24h] +
mov [ebp+var_268.lpstrFilter] eax +
lea eax [ebp+var_268] +
push eax  +
mov [ebp+var_268.lStructSize] 4Ch +
mov [ebp+var_268.nMaxFile] edi +
mov [ebp+var_268.lpstrDefExt] offset aRdp +
mov [ebp+var_268.Flags] 2001002h +
call ds:GetOpenFileNameW  +
test eax eax +
jz loc_1036953  +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
mov [ebp+var_210] ebx +
call sub_1053EA3  +
cmp eax ebx +
jl loc_1036915  +
mov eax [esi] +
add eax 0C228h +
mov edi [eax] +
mov [eax] ebx +
push [ebp+var_210]  +
mov ecx [esi] +
call sub_10330BC  +
cmp eax ebx +
jl loc_10368AE  +
mov ecx [esi] +
lea eax [ebp+var_20C] +
push eax  +
call sub_102AE69  +
xor esi esi +
inc esi  +
jmp loc_10368F2  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10368D5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10368D5  +
push eax  +
push offset dword_100A218  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
push 408h  +
push ebx  +
call sub_105AE15  +
mov eax [esi] +
mov [eax+0C228h] edi +
xor esi esi +
mov ecx [ebp+var_210] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov eax [ebp+var_210] +
cmp eax ebx +
jz loc_1036955  +
mov [ebp+var_210] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1036955  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103693C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103693C  +
push eax  +
push offset dword_100A218  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
push 406h  +
push ebx  +
call sub_105AE15  +
xor esi esi +
jmp loc_10368FD  +
xor esi esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov [esi+20h] eax +
call sub_101C97A  +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+22Ch] 0 +
and dword ptr [esi+230h] 0 +
mov ecx esi +
call sub_1036392  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
mov esi ecx +
call sub_101C97A  +
lea edi [esi+22Ch] +
mov ecx [edi] +
test ecx ecx +
jz loc_10369D8  +
push 1  +
call sub_1036117  +
and dword ptr [edi] 0 +
mov eax [esi] +
test eax eax +
jz loc_10369E7  +
and dword ptr [esi] 0 +
push eax  +
call sub_1018A83  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub eax 110h +
push esi  +
jz loc_1036B0D  +
dec eax  +
push edi  +
jz loc_1036A90  +
sub eax 30Dh +
jz loc_1036A86  +
sub eax 4 +
jz loc_1036A50  +
dec eax  +
jnz loc_1036B08  +
mov esi [ebp+arg_0] +
push 32FAh  +
push dword ptr [esi+1Ch]  +
call ds:GetDlgItem  +
mov edi eax +
push edi  +
push dword ptr [esi]  +
call sub_1026EEB  +
mov esi [esi] +
lea ecx [esi+54h] +
call sub_1034881  +
push eax  +
push edi  +
call ds:SetWindowTextW  +
jmp loc_1036B08  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp [ebp+arg_C] eax +
setnz al  +
mov edi eax +
push edi  +
push 5  +
push offset unk_1065094  +
push dword ptr [esi+1Ch]  +
call sub_105AC93  +
mov ecx [esi+22Ch] +
test ecx ecx +
jz loc_1036B08  +
push edi  +
call sub_105B7DD  +
jmp loc_1036B08  +
mov ecx [ebp+arg_0] +
call sub_10363F4  +
jmp loc_1036B08  +
movzx eax word ptr [ebp+arg_C] +
sub eax 32FAh +
jz loc_1036AD0  +
dec eax  +
jz loc_1036AB8  +
dec eax  +
jz loc_1036AAE  +
dec eax  +
jnz loc_1036B08  +
mov ecx [ebp+arg_0] +
call sub_10364B8  +
jmp loc_1036B08  +
mov ecx [ebp+arg_0] +
call sub_1036458  +
jmp loc_1036B08  +
mov ecx [ebp+arg_0] +
call sub_10367B6  +
test eax eax +
jz loc_1036B08  +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10361D8  +
jmp loc_1036B08  +
mov eax [ebp+arg_C] +
shr eax 10h +
cmp ax 1 +
jnz loc_1036AFA  +
mov esi [ebp+arg_0] +
mov eax [esi] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
push dword ptr [esi+4]  +
push dword ptr [esi+1Ch]  +
push [ebp+arg_10]  +
call sub_10269E0  +
jmp loc_1036B08  +
cmp ax 5 +
jnz loc_1036B08  +
mov ecx [ebp+arg_0] +
call sub_103613D  +
xor eax eax +
pop edi  +
jmp loc_1036B74  +
mov eax [ebp+arg_4] +
mov esi [ebp+arg_0] +
mov ecx [esi+8] +
push 6  +
push eax  +
mov [esi+1Ch] eax +
call sub_1027456  +
push 1  +
mov ecx esi +
call sub_10361D8  +
push 32FAh  +
push dword ptr [esi+1Ch]  +
call ds:GetDlgItem  +
push 3AA5h  +
push eax  +
push dword ptr [esi+4]  +
call sub_105DD8E  +
test eax eax +
jz loc_1036B71  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1036B71  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1036B71  +
push eax  +
push offset dword_100A218  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 110h +
push esi  +
mov esi [ebp+14h] +
push edi  +
jz loc_1036BA0  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov edi eax +
jmp loc_1036BAE  +
push esi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
mov edi esi +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
test edi edi +
jz loc_1036BC4  +
push edi  +
call sub_10369EF  +
jmp loc_1036BCA  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
test edx edx +
jz loc_1036C06  +
cmp word ptr [edx] 0 +
jnz loc_1036BEB  +
push 0Eh  +
jmp loc_1036C08  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1036BF1  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1036C09  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1036C1A  +
cmp word ptr [edx] 0 +
jnz loc_1036C1F  +
mov edx offset aNull +
jmp loc_1036C1F  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 38h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 3309h  +
push [ebp+hDlg]  +
mov esi ecx +
call ds:GetDlgItem  +
mov edi ds:SendMessageW +
push 0  +
push 1  +
mov ebx eax +
push 402h  +
push ebx  +
call edi  +
push 0  +
push 0  +
push 400h  +
push ebx  +
mov [ebp+var_4] eax +
call edi  +
cmp eax [ebp+var_4] +
jnz loc_1036CA9  +
add esi 60h +
push esi  +
push 330Bh  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextW  +
jmp loc_1036D23  +
cmp eax [esi+0A0h] +
jge loc_1036D23  +
mov ecx eax +
add eax 0Eh +
imul ecx ecx +
mov ecx [ecx+esi+0A4h] +
imul eax eax +
push dword ptr [eax+esi]  +
add esi 20h +
push ecx  +
push esi  +
call sub_1026DF9  +
mov esi eax +
add esp 0Ch +
test esi esi +
jz loc_1036CF1  +
push esi  +
push 330Bh  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextW  +
push esi  +
call ds:LocalFree  +
jmp loc_1036D23  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1036D23  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1036D23  +
push eax  +
push offset aFormatmessageF  +
push offset dword_100A368  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov edx [eax+8] +
sub edx [eax] +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [eax+0Ch] +
sub esi [eax+4] +
xor ecx ecx +
cmp edx ds:dword_100A37C[ecx] +
jnz loc_1036D5E  +
cmp esi ds:dword_100A380[ecx] +
jz loc_1036D6B  +
add ecx 0Ch +
cmp ecx 0A8h +
jb loc_1036D4E  +
jmp loc_1036D72  +
mov [ebp+var_4] 1 +
mov ebx [ebp+arg_C] +
mov ecx [ebx] +
cmp ecx 20h +
jnb loc_1036E10  +
and [ebp+arg_8] 0 +
push edi  +
test ecx ecx +
jbe loc_1036DA9  +
lea edi [ebx+4] +
mov ebx [edi] +
cmp ebx edx +
jnz loc_1036D99  +
mov ebx [edi+4] +
cmp ebx esi +
jz loc_1036E0F  +
ja loc_1036E19  +
inc [ebp+arg_8]  +
add edi 0Ch +
cmp [ebp+arg_8] ecx +
jb loc_1036D8C  +
mov ebx [ebp+arg_C] +
mov ecx [ebp+arg_8] +
mov edx [eax+8] +
imul ecx ecx +
sub edx [eax] +
add ecx ebx +
mov [ecx+4] edx +
mov edx [eax+0Ch] +
sub edx [eax+4] +
mov [ecx+8] edx +
mov edx [ebp+var_4] +
mov [ecx+0Ch] edx +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1036E0D  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1036E0D  +
test edx edx +
mov edx offset aStandard +
jnz loc_1036DEA  +
mov edx offset aNonStandard +
push [ebp+arg_8]  +
push edx  +
mov edx [eax+0Ch] +
sub edx [eax+4] +
push edx  +
mov edx [eax+8] +
sub edx [eax] +
push edx  +
push offset dword_100A368  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1036BD5  +
inc dword ptr [ebx]  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn 10h  +
cmp ecx [ebp+arg_8] +
jbe loc_1036DA6  +
mov ebx [ebp+arg_C] +
mov edx ecx +
imul edx edx +
sub ecx [ebp+arg_8] +
lea edx [edx+ebx+4] +
lea esi [edx-0Ch] +
mov edi edx +
movs   +
movs   +
sub edx 0Ch +
dec ecx  +
movs   +
jnz loc_1036E2D  +
jmp loc_1036DA9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
push ebx  +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp edx ebx +
jbe loc_1036E83  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
add ecx 8 +
cmp edi [ecx-4] +
ja loc_1036E70  +
mov eax [esi+4] +
cmp eax [ecx] +
jbe loc_1036E7A  +
inc ebx  +
add ecx 0Ch +
cmp ebx edx +
jb loc_1036E64  +
jmp loc_1036E81  +
mov [ebp+var_4] 1 +
pop edi  +
pop esi  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetDlgItem +
mov ebx 3309h +
push ebx  +
push [ebp+hDlg]  +
mov esi ecx +
call edi  +
mov [ebp+hWnd] eax +
test eax eax +
jz loc_1036FC9  +
push 3310h  +
push [ebp+hDlg]  +
call ds:IsDlgButtonChecked  +
mov ecx [esi] +
xor edx edx +
cmp [ecx+0C204h] edx +
jnz loc_1036F7D  +
cmp eax edx +
jnz loc_1036F7D  +
mov eax [esi+1Ch] +
cmp eax 0FFFFFFFFh +
jnz loc_1036F3C  +
mov eax [ecx+70D0h] +
mov [ebp+lParam] eax +
mov eax [ecx+70D4h] +
mov [ebp+var_8] eax +
cmp [ecx+0C200h] edx +
jnz loc_1036F35  +
xor ecx ecx +
cmp [esi+0A0h] edx +
jle loc_1036F35  +
lea eax [esi+0A8h] +
mov edx [ebp+lParam] +
cmp edx [eax-4] +
jnz loc_1036F1F  +
mov edx [ebp+var_8] +
cmp edx [eax] +
jz loc_1036F2D  +
inc ecx  +
add eax 0Ch +
cmp ecx [esi+0A0h] +
jl loc_1036F10  +
jmp loc_1036F35  +
mov [ebp+lParam] ecx +
cmp ecx 0FFFFFFFFh +
jnz loc_1036F3F  +
mov eax [esi+0A0h] +
dec eax  +
mov [ebp+lParam] eax +
push 1  +
push ebx  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:EnableWindow  +
mov edi ds:SendMessageW +
push 0  +
push 1  +
push 40Ah  +
push [ebp+hWnd]  +
call edi  +
push [ebp+lParam]  +
push 1  +
push 405h  +
push [ebp+hWnd]  +
call edi  +
push [ebp+hDlg]  +
mov ecx esi +
call sub_1036C54  +
jmp loc_1036FC6  +
cmp [ebp+lParam] edx +
jz loc_1036F95  +
push edx  +
push edx  +
push 400h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov [esi+1Ch] eax +
mov eax [esi+0A0h] +
dec eax  +
push eax  +
push 1  +
push 405h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
push [ebp+hDlg]  +
mov ecx esi +
call sub_1036C54  +
push 0  +
push ebx  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:EnableWindow  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi ecx +
xor edi edi +
push 20h  +
lea eax dword_10650C8[edi] +
push eax  +
push dword_10650C4[edi]  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jz loc_103706C  +
add edi 48h +
inc ebx  +
cmp edi 120h +
jb loc_1036FE0  +
xor ebx ebx +
xor edi edi +
push 20h  +
lea eax dword_10651E8[edi] +
push eax  +
push dword_10651E4[edi]  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jz loc_103709D  +
add edi 48h +
inc ebx  +
cmp edi 48h +
jb loc_103700B  +
push 20h  +
lea eax [esi+20h] +
push eax  +
push 436h  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_10370C1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037099  +
test byte ptr [eax+1Ch] 4 +
jz loc_1037099  +
push offset dword_100A368  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1037099  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037099  +
test byte ptr [eax+1Ch] 4 +
jz loc_1037099  +
imul ebx ebx +
push dword_10650C4[ebx]  +
push offset dword_100A368  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
jmp loc_10370F9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037099  +
test byte ptr [eax+1Ch] 4 +
jz loc_1037099  +
imul ebx ebx +
push dword_10651E4[ebx]  +
push offset dword_100A368  +
push 0Ch  +
jmp loc_103708E  +
push 20h  +
lea eax [esi+60h] +
push eax  +
push 437h  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_10370F6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037099  +
test byte ptr [eax+1Ch] 4 +
jz loc_1037099  +
push offset dword_100A368  +
push 0Eh  +
jmp loc_103705F  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1B0h +
push esi  +
push edi  +
xor edi edi +
push 180h  +
lea eax [ebp+var_1AC] +
mov esi ecx +
push edi  +
push eax  +
mov [ebp+var_24] esi +
mov [ebp+dwData] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+dwData] +
push eax  +
push offset fnEnum  +
push edi  +
push edi  +
mov [esi+0A0h] edi +
call ds:EnumDisplayMonitors  +
test eax eax +
jnz loc_1037173  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037173  +
test byte ptr [eax+1Ch] 4 +
jz loc_1037173  +
push offset dword_100A368  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
lea eax [ebp+var_1AC] +
mov [ebp+var_14] eax +
lea eax [ebp+var_1A4] +
mov [ebp+var_1C] eax +
lea eax [esi+98h] +
mov [ebp+var_4] eax +
lea eax [esi+9Ch] +
push ebx  +
mov [ebp+var_C] eax +
lea eax [esi+0A4h] +
push 0Ch  +
mov [ebp+var_18] edi +
mov [ebp+var_2C] edi +
mov [ebp+var_10] edi +
mov [ebp+var_20] offset dword_100A37C +
mov [ebp+var_8] eax +
mov [ebp+var_28] edi +
pop ebx  +
mov eax [ebp+dwData] +
cmp [ebp+var_18] eax +
jnb loc_10372E3  +
cmp [ebp+var_2C] 0Eh +
jnb loc_103728F  +
mov eax [ebp+var_14] +
mov eax [eax] +
mov edi [ebp+var_20] +
cmp eax [edi] +
ja loc_1037234  +
mov eax [ebp+var_1C] +
cmp dword ptr [eax] 0 +
jz loc_10371EF  +
inc [ebp+var_18]  +
add [ebp+var_1C] ebx +
add [ebp+var_14] ebx +
jmp loc_10371B7  +
mov edi [ebp+var_8] +
mov esi [ebp+var_14] +
inc [ebp+var_10]  +
add [ebp+var_C] ebx +
add [ebp+var_8] ebx +
add [ebp+var_4] ebx +
movs   +
movs   +
movs   +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10372D2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10372D2  +
mov ecx [ebp+var_C] +
push dword ptr [ecx]  +
mov ecx [ebp+var_4] +
push dword ptr [ecx]  +
push offset dword_100A368  +
push 14h  +
jmp loc_10372C7  +
lea eax [ebp+dwData] +
push eax  +
push edi  +
mov ecx esi +
call sub_1036E45  +
test eax eax +
jz loc_1037347  +
inc [ebp+var_10]  +
add [ebp+var_C] ebx +
mov esi edi +
mov edi [ebp+var_8] +
add [ebp+var_8] ebx +
add [ebp+var_4] ebx +
movs   +
movs   +
movs   +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037344  +
test byte ptr [eax+1Ch] 1 +
jz loc_1037344  +
mov ecx [ebp+var_C] +
push dword ptr [ecx]  +
mov ecx [ebp+var_4] +
push dword ptr [ecx]  +
push offset dword_100A368  +
push 15h  +
jmp loc_1037339  +
mov edi [ebp+var_8] +
mov esi [ebp+var_14] +
inc [ebp+var_10]  +
add [ebp+var_C] ebx +
add [ebp+var_8] ebx +
add [ebp+var_4] ebx +
movs   +
movs   +
movs   +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10372D2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10372D2  +
mov ecx [ebp+var_C] +
push dword ptr [ecx]  +
mov ecx [ebp+var_4] +
push dword ptr [ecx]  +
push offset dword_100A368  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
inc [ebp+var_18]  +
add [ebp+var_1C] ebx +
add [ebp+var_14] ebx +
mov esi [ebp+var_24] +
jmp loc_10371B7  +
cmp [ebp+var_28] 0A8h +
jnb loc_1037355  +
lea eax [ebp+dwData] +
push eax  +
push [ebp+var_20]  +
mov ecx esi +
call sub_1036E45  +
test eax eax +
jz loc_1037347  +
mov edi [ebp+var_8] +
mov esi [ebp+var_20] +
inc [ebp+var_10]  +
add [ebp+var_C] ebx +
add [ebp+var_8] ebx +
add [ebp+var_4] ebx +
movs   +
movs   +
movs   +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037344  +
test byte ptr [eax+1Ch] 1 +
jz loc_1037344  +
mov ecx [ebp+var_C] +
push dword ptr [ecx]  +
mov ecx [ebp+var_4] +
push dword ptr [ecx]  +
push offset dword_100A368  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov esi [ebp+var_24] +
inc [ebp+var_2C]  +
add [ebp+var_28] ebx +
add [ebp+var_20] ebx +
jmp loc_10371B7  +
mov ecx [ebp+var_10] +
pop ebx  +
test eax eax +
jz loc_1037385  +
imul eax eax +
mov edi [ebp+eax+var_1B8] +
mov eax [ebp+eax+var_1B4] +
mov edx ecx +
imul edx edx +
mov [edx+esi+0A4h] edi +
lea edx [ecx+0Eh] +
imul edx edx +
mov [edx+esi] eax +
jmp loc_10373A6  +
mov edx [ebp+var_110] +
mov eax ecx +
imul eax eax +
mov [eax+esi+0A4h] edx +
mov edx [ebp+var_10C] +
lea eax [ecx+0Eh] +
imul eax eax +
mov [eax+esi] edx +
inc ecx  +
pop edi  +
mov [esi+0A0h] ecx +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
or [ebp+wParam] 0FFFFFFFFh +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
mov eax [eax+84DCh] +
mov [ebp+var_14] eax +
xor eax eax +
push edi  +
mov edi ds:SendDlgItemMessageW +
inc eax  +
mov ebx 330Ah +
cmp eax 0FFFFFFFFh +
jz loc_10373FC  +
push 0  +
push 0  +
push 144h  +
push ebx  +
push [ebp+hDlg]  +
call edi  +
test eax eax +
jnz loc_10373E4  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [esi+3B0h] eax +
jbe loc_1037458  +
mov [ebp+var_C] eax +
mov ecx [ebp+var_C] +
mov eax [esi+3ACh] +
add eax ecx +
mov ecx [eax] +
cmp ecx [esi+3A8h] +
ja loc_1037452  +
cmp [ebp+var_14] ecx +
jnz loc_103742C  +
mov ecx [ebp+var_4] +
mov [ebp+wParam] ecx +
add eax 8 +
push eax  +
push 0  +
push 143h  +
push ebx  +
push [ebp+hDlg]  +
call edi  +
inc [ebp+var_10]  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add [ebp+var_C] 48h +
cmp eax [esi+3B0h] +
jb loc_103740C  +
cmp [ebp+wParam] 0FFFFFFFFh +
jnz loc_1037468  +
mov esi [esi+3B4h] +
cmp esi [ebp+var_10] +
sbb eax eax +
and eax esi +
mov [ebp+wParam] eax +
push 0  +
push [ebp+wParam]  +
push 14Eh  +
push ebx  +
push [ebp+hDlg]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub eax 7Eh +
push ebx  +
push esi  +
push edi  +
jz loc_10374BA  +
sub eax 92h +
jz loc_1037600  +
dec eax  +
jz loc_10375C8  +
sub eax 3 +
jz loc_10374BA  +
sub eax 30Ah +
jz loc_10374E8  +
sub eax 4 +
jz loc_10374CE  +
dec eax  +
jnz loc_10374C5  +
push [ebp+hDlg]  +
mov ecx [ebp+arg_0] +
call sub_1036C54  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
xor eax eax +
cmp [ebp+hWnd] eax +
setnz al  +
push eax  +
push 4  +
push offset unk_1065228  +
push [ebp+hDlg]  +
call sub_105AC93  +
jmp loc_10374C5  +
mov ebx ds:GetDlgItem +
push 3309h  +
push [ebp+hDlg]  +
call ebx  +
mov esi ds:SendMessageW +
xor edi edi +
push edi  +
push 1  +
push 402h  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
push edi  +
push edi  +
push 400h  +
push [ebp+hWnd]  +
mov [ebp+arg_8] eax +
call esi  +
push edi  +
push edi  +
push 147h  +
push 330Ah  +
push [ebp+hDlg]  +
mov [ebp+hWnd] eax +
call ebx  +
push eax  +
call esi  +
imul eax eax +
mov esi [ebp+arg_0] +
mov ecx [esi+3ACh] +
mov edx [esi] +
mov eax [eax+ecx] +
mov ebx ds:IsDlgButtonChecked +
push 330Dh  +
push [ebp+hDlg]  +
mov [edx+84DCh] eax +
call ebx  +
mov ecx [esi] +
push 3310h  +
push [ebp+hDlg]  +
mov [ecx+0B3B8h] eax +
call ebx  +
mov ecx [esi] +
mov [ecx+0C20Ch] eax +
mov eax [esi] +
cmp [eax+0C204h] edi +
jnz loc_10374C5  +
cmp [eax+0C20Ch] edi +
jnz loc_10374C5  +
mov edi [ebp+hWnd] +
xor ecx ecx +
cmp edi [ebp+arg_8] +
setz cl  +
mov [eax+0C200h] ecx +
mov ecx [esi] +
mov eax edi +
imul eax eax +
push dword ptr [eax+esi+0A4h]  +
call sub_101ED57  +
mov ecx [esi] +
add edi 0Eh +
imul edi edi +
push dword ptr [edi+esi]  +
call sub_101ED78  +
jmp loc_10374C5  +
mov ecx [ebp+hWnd] +
movzx eax cx +
sub eax 330Ah +
jz loc_10374C5  +
sub eax 6 +
jnz loc_10374C5  +
shr ecx 10h +
cmp ax cx +
jnz loc_10374C5  +
mov ecx [ebp+arg_0] +
push 1  +
push [ebp+hDlg]  +
call sub_1036E90  +
jmp loc_10374C5  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
mov edx [esi+14h] +
mov ecx [esi+8] +
xor edi edi +
push edi  +
sub edx eax +
push edx  +
mov edx [esi+10h] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push edi  +
push [ebp+hDlg]  +
call ds:SetWindowPos  +
mov eax [esi] +
xor ecx ecx +
mov [esi+3A4h] edi +
cmp [eax+0B3B8h] edi +
setnz cl  +
push ecx  +
push 330Dh  +
push [ebp+hDlg]  +
call ds:CheckDlgButton  +
push 50h  +
call ds:GetSystemMetrics  +
mov ebx ds:GetDlgItem +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_103767D  +
mov eax [esi] +
push edi  +
mov [eax+0C20Ch] edi +
mov eax [esi] +
push 3310h  +
push [ebp+hDlg]  +
mov [eax+0C210h] ecx +
call ebx  +
push eax  +
call ds:EnableWindow  +
mov eax [esi] +
xor ecx ecx +
cmp [eax+0C20Ch] edi +
setnz cl  +
push ecx  +
push 3310h  +
push [ebp+hDlg]  +
call ds:CheckDlgButton  +
push [ebp+hDlg]  +
mov ecx esi +
call sub_10373B6  +
mov ecx esi +
call sub_1037102  +
push 3309h  +
push [ebp+hDlg]  +
call ebx  +
mov [ebp+hWnd] eax +
cmp eax edi +
jz loc_10374C5  +
mov cx [esi+0A0h] +
dec cx  +
movzx ecx cx +
shl ecx 10h +
push ecx  +
push 1  +
push 406h  +
push eax  +
call ds:SendMessageW  +
push 1  +
push edi  +
push 415h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
push edi  +
push [ebp+hDlg]  +
mov ecx esi +
call sub_1036E90  +
mov eax [esi] +
mov eax [eax+0C234h] +
cmp eax 5 +
jg loc_103774F  +
lea eax dword_100A504[eax*4] +
mov [ebp+hWnd] eax +
mov [ebp+arg_0] edi +
mov edi [ebp+arg_0] +
lea edi dword_100A500[edi] +
push dword ptr [edi]  +
push [ebp+hDlg]  +
call ebx  +
push eax  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_1037741  +
mov eax [ebp+hWnd] +
push dword ptr [eax]  +
push dword ptr [edi]  +
push [ebp+hDlg]  +
call ebx  +
push eax  +
call ds:EnableWindow  +
add [ebp+arg_0] 1Ch +
add [ebp+hWnd] 1Ch +
cmp [ebp+arg_0] 70h +
jb loc_1037713  +
mov ecx [esi+4] +
push 6  +
push [ebp+hDlg]  +
call sub_1027456  +
xor eax eax +
inc eax  +
jmp loc_10374C7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 110h +
push esi  +
mov esi [ebp+14h] +
push edi  +
jz loc_103778B  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov edi eax +
jmp loc_1037799  +
push esi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
mov edi esi +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
test edi edi +
jz loc_10377AF  +
push edi  +
call sub_1037484  +
jmp loc_10377B5  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+18h] eax +
call sub_101C97A  +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
call sub_1026AF2  +
push 8  +
pop edx  +
lea ecx [esi+3A8h] +
mov [ecx] eax +
cmp eax edx +
jnb loc_10377F5  +
mov [ecx] edx +
cmp [ecx] edx +
jnz loc_1037816  +
and dword ptr [esi+3B4h] 0 +
mov dword ptr [esi+3ACh] offset unk_10651E0 +
mov dword ptr [esi+3B0h] 1 +
jmp loc_1037834  +
mov dword ptr [esi+3ACh] offset unk_10650C0 +
mov dword ptr [esi+3B0h] 4 +
mov dword ptr [esi+3B4h] 1 +
mov ecx esi +
call sub_1036FD5  +
test eax eax +
jnz loc_1037863  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1037863  +
test byte ptr [eax+1Ch] 4 +
jz loc_1037863  +
push offset dword_100A368  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and dword ptr [esi+3A4h] 0 +
or dword ptr [esi+1Ch] 0FFFFFFFFh +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ds:IsDlgButtonChecked +
push edi  +
mov edi ecx +
push 3328h  +
push dword ptr [edi+1Ch]  +
xor ebx ebx +
call esi  +
test eax eax +
jnz loc_1037898  +
inc ebx  +
push 3330h  +
push dword ptr [edi+1Ch]  +
call esi  +
test eax eax +
jz loc_10378AC  +
or ebx 100h +
push 332Fh  +
push dword ptr [edi+1Ch]  +
call esi  +
test eax eax +
jz loc_10378C0  +
or ebx 80h +
push 3329h  +
push dword ptr [edi+1Ch]  +
call esi  +
test eax eax +
jnz loc_10378D1  +
or ebx 2 +
push 332Ah  +
push dword ptr [edi+1Ch]  +
call esi  +
test eax eax +
jnz loc_10378E2  +
or ebx 4 +
push 332Bh  +
push dword ptr [edi+1Ch]  +
call esi  +
test eax eax +
jnz loc_10378F3  +
or ebx 8 +
push 332Ch  +
push dword ptr [edi+1Ch]  +
call esi  +
test eax eax +
jnz loc_1037907  +
or ebx 80000000h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103792C  +
test byte ptr [eax+1Ch] 2 +
jz loc_103792C  +
push ebx  +
push offset loc_100A5E0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov eax [ecx] +
cmp dword ptr [eax+0CA7Ch] 0 +
mov eax offset unk_1065290 +
jz locret_103794C  +
mov eax offset unk_10652A8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
inc eax  +
cmp dword_1066010 0 +
push esi  +
mov esi ecx +
jnz loc_103796E  +
xor eax eax +
jmp loc_10379F1  +
push ebx  +
push edi  +
mov edi ds:SendDlgItemMessageW +
mov ebx 3327h +
cmp eax 0FFFFFFFFh +
jz loc_1037993  +
push 0  +
push 0  +
push 144h  +
push ebx  +
push dword ptr [esi+1Ch]  +
call edi  +
test eax eax +
jnz loc_103797B  +
mov eax [esi] +
xor ecx ecx +
cmp [eax+0CA7Ch] ecx +
setnz cl  +
mov eax ecx +
cmp eax 6 +
jge loc_10379D5  +
imul eax eax +
add eax offset dword_10653A4 +
mov [ebp+lParam] eax +
push [ebp+lParam]  +
push 0  +
push 143h  +
push ebx  +
push dword ptr [esi+1Ch]  +
call edi  +
add [ebp+lParam] 104h +
cmp [ebp+lParam] offset unk_10659BC +
jl loc_10379B5  +
mov eax [esi] +
mov eax [eax+0B3CCh] +
push 0  +
dec eax  +
push eax  +
push 14Eh  +
push ebx  +
push dword ptr [esi+1Ch]  +
call edi  +
xor eax eax +
pop edi  +
inc eax  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx] +
mov eax [eax+0CA7Ch] +
neg eax  +
push ebx  +
mov ebx [ebp+arg_0] +
sbb eax eax +
push esi  +
add eax 6 +
push edi  +
mov [ebp+var_4] ecx +
mov edi offset lpReserved +
cmp ebx eax +
jb loc_1037A4E  +
mov esi lpReserved +
cmp esi edi +
jz loc_1037A49  +
test byte ptr [esi+1Ch] 4 +
jz loc_1037A49  +
push ebx  +
push offset loc_100A5E0  +
push 0Ah  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_1051EE1  +
mov esi lpReserved +
xor ebx ebx +
inc ebx  +
jmp loc_1037A54  +
mov esi lpReserved +
mov ecx [ebp+var_4] +
call sub_1037937  +
mov ebx [eax+ebx*4] +
cmp esi edi +
jz loc_1037A7C  +
test byte ptr [esi+1Ch] 2 +
jz loc_1037A7C  +
push ebx  +
push offset loc_100A5E0  +
push 0Bh  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_1051EE1  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
xor eax eax +
push edi  +
mov edi ds:CheckDlgButton +
inc eax  +
mov ecx ebx +
not ecx  +
and ecx eax +
push ecx  +
push 3328h  +
push dword ptr [esi+1Ch]  +
mov [esi+20h] eax +
call edi  +
mov eax ebx +
shr eax 8 +
and eax 1 +
push eax  +
push 3330h  +
push dword ptr [esi+1Ch]  +
call edi  +
mov eax ebx +
shr eax 7 +
and eax 1 +
push eax  +
push 332Fh  +
push dword ptr [esi+1Ch]  +
call edi  +
mov eax ebx +
shr eax 1 +
not eax  +
and eax 1 +
push eax  +
push 3329h  +
push dword ptr [esi+1Ch]  +
call edi  +
mov eax ebx +
shr eax 2 +
not eax  +
and eax 1 +
push eax  +
push 332Ah  +
push dword ptr [esi+1Ch]  +
call edi  +
mov eax ebx +
shr eax 3 +
not eax  +
and eax 1 +
push eax  +
push 332Bh  +
push dword ptr [esi+1Ch]  +
call edi  +
mov eax [esi] +
cmp dword ptr [eax+0CA7Ch] 0 +
jnz loc_1037B36  +
shr ebx 1Fh +
not ebx  +
and ebx 1 +
push ebx  +
push 332Ch  +
push dword ptr [esi+1Ch]  +
call edi  +
and dword ptr [esi+20h] 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103787A  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1037B89  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1037B89  +
mov edx [esi] +
mov edx [edx+0B3C0h] +
xor edx eax +
and edx 7FFFFE30h +
xor edx eax +
push edx  +
push offset loc_100A5E0  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
push 0  +
push 147h  +
mov esi ecx +
push 3327h  +
push dword ptr [esi+1Ch]  +
call ds:SendDlgItemMessageW  +
test eax eax +
jl loc_1037BB6  +
mov ecx eax +
jmp loc_1037BB9  +
xor ecx ecx +
inc ecx  +
mov eax [esi] +
mov eax [eax+0CA7Ch] +
neg eax  +
sbb eax eax +
add eax 6 +
cmp ecx eax +
jb loc_1037BCF  +
xor ecx ecx +
inc ecx  +
push ecx  +
mov ecx esi +
call sub_10379F9  +
push eax  +
mov ecx esi +
call sub_1037A8A  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub eax 110h +
push ebx  +
push esi  +
push edi  +
jz loc_1037CE7  +
dec eax  +
jz loc_1037CAB  +
sub eax 30Dh +
jz loc_1037C2E  +
sub eax 4 +
jnz loc_1037CE0  +
cmp [ebp+arg_C] eax +
setnz al  +
push eax  +
push 9  +
push offset unk_1065248  +
push [ebp+hDlg]  +
call sub_105AC93  +
jmp loc_1037CE0  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_103787A  +
push 332Dh  +
push [ebp+hDlg]  +
mov ebx eax +
mov eax [edi] +
mov esi [eax+0B3C0h] +
call ds:IsDlgButtonChecked  +
mov ecx [edi] +
push 0  +
push 0  +
push 147h  +
xor esi ebx +
mov [ecx+0B3C4h] eax +
mov eax [edi] +
push 3327h  +
push [ebp+hDlg]  +
and esi 7FFFFE30h +
xor esi ebx +
mov [eax+0B3C0h] esi +
call ds:SendDlgItemMessageW  +
test eax eax +
jl loc_1037C89  +
mov ecx eax +
jmp loc_1037C8C  +
xor ecx ecx +
inc ecx  +
mov edi [edi] +
mov eax [edi+0CA7Ch] +
neg eax  +
sbb eax eax +
add eax 6 +
cmp ecx eax +
jb loc_1037CA2  +
xor ecx ecx +
inc ecx  +
inc ecx  +
mov [edi+0B3CCh] ecx +
jmp loc_1037CE0  +
mov eax [ebp+arg_C] +
movzx edx ax +
shr eax 10h +
cmp edx 3327h +
jz loc_1037CD2  +
test ax ax +
jnz loc_1037CE0  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+20h] 0 +
jnz loc_1037CE0  +
push edx  +
call sub_1037B46  +
jmp loc_1037CE0  +
cmp ax 1 +
jnz loc_1037CE0  +
mov ecx [ebp+arg_0] +
call sub_1037B92  +
xor eax eax +
jmp loc_1037DA5  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
mov edx [esi+14h] +
mov ecx [esi+8] +
mov edi [ebp+hDlg] +
xor ebx ebx +
push ebx  +
sub edx eax +
push edx  +
mov edx [esi+10h] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push ebx  +
push edi  +
mov [esi+1Ch] edi +
call ds:SetWindowPos  +
mov ecx esi +
call sub_1037952  +
mov eax [esi] +
push dword ptr [eax+0B3C0h]  +
mov ecx esi +
call sub_1037A8A  +
mov eax [esi] +
xor ecx ecx +
cmp [eax+0B3C4h] ebx +
setnz cl  +
push ecx  +
push 332Dh  +
push edi  +
call ds:CheckDlgButton  +
mov eax [esi] +
mov eax [eax+0C234h] +
and [ebp+hDlg] 0 +
lea ebx dword_100A5F4[eax*4] +
mov eax [ebp+hDlg] +
mov eax ds:dword_100A5F0[eax] +
cmp eax 332Ch +
jnz loc_1037D76  +
xor ecx ecx +
cmp [ebx] ecx +
jz loc_1037D73  +
mov edx [esi] +
cmp [edx+0CA7Ch] ecx +
jnz loc_1037D73  +
inc ecx  +
push ecx  +
jmp loc_1037D78  +
push dword ptr [ebx]  +
push eax  +
push edi  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
add [ebp+hDlg] 1Ch +
add ebx 1Ch +
cmp [ebp+hDlg] 0FCh +
jb loc_1037D52  +
mov ecx [esi+4] +
push 6  +
push edi  +
call sub_1027456  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+18h] eax +
call sub_101C97A  +
mov eax [ebp+arg_8] +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+20h] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_101C97A  +
mov eax [esi] +
test eax eax +
jz loc_1037DFF  +
and dword ptr [esi] 0 +
push eax  +
call sub_1018A83  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 110h +
push esi  +
mov esi [ebp+14h] +
push edi  +
jz loc_1037E28  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov edi eax +
jmp loc_1037E36  +
push esi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
mov edi esi +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
test edi edi +
jz loc_1037E4C  +
push edi  +
call sub_1037BE6  +
jmp loc_1037E52  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
sub eax 110h +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+hDlg] ebx +
jz loc_1037FB4  +
dec eax  +
jz loc_1037F22  +
sub eax 30Dh +
jz loc_1037EBF  +
sub eax 4 +
jnz loc_1037FAD  +
cmp [ebp+arg_C] eax +
setnz al  +
push eax  +
push 5  +
push offset unk_10652BC  +
push ebx  +
call sub_105AC93  +
jmp loc_1037FAD  +
push 331Dh  +
push ebx  +
call ds:IsDlgButtonChecked  +
mov ecx [esi] +
mov edi ds:GetDlgItemTextW +
push 104h  +
mov [ecx+1354h] eax +
lea eax [ebp+String] +
push eax  +
push 331Eh  +
push ebx  +
call edi  +
push 104h  +
lea eax [ebp+var_414] +
push eax  +
push 331Fh  +
push ebx  +
call edi  +
mov ecx [esi] +
lea eax [ebp+String] +
push eax  +
call sub_102BBD6  +
mov ecx [esi] +
lea eax [ebp+var_414] +
push eax  +
call sub_102BC23  +
jmp loc_1037FAD  +
mov eax [ebp+arg_C] +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jnz loc_1037FAD  +
mov edi 331Dh +
mov eax edi +
cmp ax word ptr [ebp+arg_C] +
jnz loc_1037FAD  +
push edi  +
push ebx  +
call ds:IsDlgButtonChecked  +
mov edi ds:GetDlgItem +
push eax  +
push 331Eh  +
push ebx  +
mov [ebp+bEnable] eax +
call edi  +
push eax  +
call ds:EnableWindow  +
push [ebp+bEnable]  +
push 331Fh  +
push ebx  +
call edi  +
push eax  +
call ds:EnableWindow  +
push [ebp+bEnable]  +
push 3320h  +
push ebx  +
call edi  +
push eax  +
call ds:EnableWindow  +
push [ebp+bEnable]  +
push 3321h  +
push ebx  +
call edi  +
push eax  +
call ds:EnableWindow  +
mov eax [esi] +
mov ecx [ebp+bEnable] +
mov [eax+1354h] ecx +
xor eax eax +
jmp loc_10380A3  +
mov eax [esi+0Ch] +
mov edx [esi+14h] +
mov ecx [esi+8] +
push 0  +
sub edx eax +
push edx  +
mov edx [esi+10h] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push 0  +
push ebx  +
call ds:SetWindowPos  +
mov eax [esi] +
mov edi ds:SetDlgItemTextW +
add eax 6C8Ch +
push eax  +
push 331Eh  +
push ebx  +
call edi  +
mov eax [esi] +
add eax 6E94h +
push eax  +
push 331Fh  +
push ebx  +
call edi  +
mov eax [esi] +
xor ecx ecx +
cmp [eax+1354h] ecx +
mov edi 331Dh +
setnz cl  +
push ecx  +
push edi  +
push ebx  +
call ds:CheckDlgButton  +
mov eax [esi] +
mov eax [eax+0C234h] +
mov ebx eax +
shl ebx 2 +
push ds:dword_100A704[ebx]  +
push edi  +
push [ebp+hDlg]  +
mov edi ds:GetDlgItem +
call edi  +
push eax  +
call ds:EnableWindow  +
lea ebx dword_100A720[ebx] +
mov [ebp+bEnable] 1Ch +
xor eax eax +
cmp [ebx] eax +
jz loc_103805E  +
mov ecx [esi] +
cmp [ecx+1354h] eax +
jz loc_103805E  +
inc eax  +
push eax  +
mov eax [ebp+bEnable] +
push ds:dword_100A700[eax]  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:EnableWindow  +
add [ebp+bEnable] 1Ch +
add ebx 1Ch +
cmp [ebp+bEnable] 8Ch +
jb loc_103804D  +
mov ecx [esi+4] +
push 6  +
push [ebp+hDlg]  +
call sub_1027456  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 110h +
push esi  +
mov esi [ebp+14h] +
push edi  +
jz loc_10380DB  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov edi eax +
jmp loc_10380E9  +
push esi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
mov edi esi +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
test edi edi +
jz loc_10380FF  +
push edi  +
call sub_1037E5D  +
jmp loc_1038105  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+18h] eax +
call sub_101C97A  +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
xor esi esi +
push esi  +
push esi  +
push 147h  +
push 3332h  +
push dword ptr [ecx+1Ch]  +
call ds:SendDlgItemMessageW  +
dec eax  +
jz loc_103815E  +
dec eax  +
jnz loc_1038161  +
inc esi  +
jmp loc_1038161  +
push 2  +
pop esi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor edx edx +
dec eax  +
jz loc_103817D  +
dec eax  +
jnz loc_1038180  +
inc edx  +
jmp loc_1038180  +
push 2  +
pop edx  +
push 0  +
push edx  +
push 14Eh  +
push 3332h  +
push dword ptr [ecx+1Ch]  +
call ds:SendDlgItemMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor edi edi +
cmp [ebp+hWndTo] edi +
jz loc_1038212  +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_10] edi +
jle loc_1038211  +
push esi  +
mov eax [ebp+arg_C] +
push dword ptr [eax+ebx*4]  +
push [ebp+hWndTo]  +
call ds:GetDlgItem  +
mov esi eax +
cmp esi edi +
jz loc_103820A  +
lea eax [ebp+X] +
push eax  +
push esi  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+X] +
push eax  +
push [ebp+hWndTo]  +
push edi  +
call ds:MapWindowPoints  +
push [ebp+dy]  +
lea eax [ebp+X] +
push [ebp+arg_4]  +
push eax  +
call ds:OffsetRect  +
push 5  +
push edi  +
push edi  +
push dword ptr [ebp-0Ch]  +
push [ebp+X]  +
push edi  +
push esi  +
call ds:SetWindowPos  +
inc ebx  +
cmp ebx [ebp+arg_10] +
jl loc_10381B8  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
mov esi ecx +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038265  +
call ds:GetLastError  +
test eax eax +
jle loc_1038281  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1038281  +
lea eax [ebp+Buffer] +
push eax  +
push 0  +
push 143h  +
push [ebp+nIDDlgItem]  +
push dword ptr [esi+1Ch]  +
call ds:SendDlgItemMessageW  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+Rect.left] 0 +
push esi  +
push edi  +
push [ebp+nIDDlgItem]  +
xor eax eax +
push [ebp+hDlg]  +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
call ds:GetDlgItem  +
mov esi eax +
test esi esi +
jnz loc_10382E6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038314  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038314  +
push [ebp+nIDDlgItem]  +
push offset dword_100A79C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1038314  +
lea eax [ebp+Rect] +
push eax  +
push esi  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push 6  +
add eax [ebp+arg_C] +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
add eax [ebp+arg_8] +
push eax  +
push 0  +
push 0  +
push 0  +
push esi  +
call ds:SetWindowPos  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push edi  +
xor ebx ebx +
mov [ebp+Rect.left] ebx +
xor eax eax +
lea edi [ebp+Rect.top] +
stos   +
stos   +
push ebx  +
stos   +
call ds:CreateCompatibleDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jz loc_1038434  +
push [ebp+nIDDlgItem]  +
mov [ebp+var_8] ebx +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
mov edi eax +
cmp edi ebx +
jz loc_1038434  +
push esi  +
lea eax [ebp+Rect] +
push eax  +
push edi  +
call ds:GetClientRect  +
mov esi [ebp+Rect.bottom] +
sub esi [ebp+Rect.top] +
push ebx  +
push ebx  +
push 31h  +
push edi  +
call ds:SendMessageW  +
cmp eax ebx +
mov ebx ds:SelectObject +
jz loc_1038393  +
push eax  +
push [ebp+hDC]  +
call ebx  +
mov [ebp+var_8] eax +
push 410h  +
lea eax [ebp+Rect] +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpString]  +
push [ebp+hDC]  +
call ds:DrawTextW  +
mov edi [ebp+Rect.bottom] +
sub edi [ebp+Rect.top] +
cmp [ebp+var_8] 0 +
jz loc_10383BE  +
push [ebp+var_8]  +
push [ebp+hDC]  +
call ebx  +
push [ebp+hDC]  +
call ds:DeleteObject  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103840E  +
test byte ptr [eax+1Ch] 1 +
mov ebx offset dword_100A79C +
jz loc_10383F2  +
push edi  +
push ebx  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103840E  +
test byte ptr [eax+1Ch] 1 +
jz loc_103840E  +
push esi  +
push ebx  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp edi esi +
jg loc_1038433  +
push [ebp+arg_10]  +
sub edi esi +
push [ebp+arg_C]  +
push edi  +
push 0  +
push [ebp+hDlg]  +
call sub_103819F  +
push edi  +
push 0  +
push [ebp+arg_14]  +
push [ebp+hDlg]  +
call sub_1038295  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+pvContextBuffer] +
push eax  +
xor esi esi +
and [ebp+pvContextBuffer] esi +
push offset pszPackageName  +
call ds:QuerySecurityPackageInfoW  +
test eax eax +
jge loc_103848C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103849A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103849A  +
push eax  +
push offset aQuerysecurityp  +
push offset dword_100A79C  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103849A  +
mov eax [ebp+pvContextBuffer] +
test dword ptr [eax] 10000h +
jz loc_103849A  +
xor esi esi +
inc esi  +
cmp [ebp+pvContextBuffer] 0 +
jz loc_10384A8  +
push [ebp+pvContextBuffer]  +
call FreeContextBuffer  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_108] 0 +
push ebx  +
push esi  +
push 400h  +
mov esi ecx +
mov [ebp+var_110] 1 +
call ??_U@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
mov [ebp+lpString] ebx +
test ebx ebx +
jnz loc_1038529  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10387A2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10387A2  +
push offset aTchar  +
push offset dword_100A79C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_10387A2  +
push edi  +
push 200h  +
push ebx  +
mov edi 3AB1h +
push edi  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038580  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038795  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038795  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push edi  +
push offset dword_100A79C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
jmp loc_1038795  +
push ebx  +
mov ebx ds:GetDlgItem +
push 3AA6h  +
push dword ptr [esi+1Ch]  +
call ebx  +
push eax  +
call ds:SetWindowTextW  +
mov eax [esi] +
cmp dword ptr [eax+70B4h] 0 +
jz loc_10385C5  +
mov ecx esi +
mov [ebp+var_118] offset dword_100A7CC +
call sub_103843F  +
mov edi eax +
neg edi  +
sbb edi edi +
and edi 0Eh +
add edi 3AAFh +
jmp loc_10385D4  +
mov [ebp+var_118] offset dword_100A7C0 +
mov edi 3AB0h +
push 80h  +
lea eax [ebp+String] +
push eax  +
push edi  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038627  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103861E  +
test byte ptr [eax+1Ch] 4 +
jz loc_103861E  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push edi  +
push offset dword_100A79C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
xor eax eax +
mov [ebp+String] ax +
push 3AAEh  +
push dword ptr [esi+1Ch]  +
call ebx  +
test eax eax +
jz loc_1038645  +
lea ecx [ebp+String] +
push ecx  +
push eax  +
call ds:SetWindowTextW  +
jmp loc_1038669  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038669  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038669  +
push offset dword_100A79C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 3332h +
push edi  +
push dword ptr [esi+1Ch]  +
call ebx  +
xor ebx ebx +
mov [ebp+hWnd] eax +
cmp eax ebx +
jnz loc_10386B1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038795  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038795  +
push offset dword_100A79C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1038795  +
cmp [ebp+var_110] 0FFFFFFFFh +
jz loc_10386D7  +
push ebx  +
push ebx  +
push 144h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov [ebp+var_110] eax +
cmp eax ebx +
jnz loc_10386B1  +
mov eax [ebp+var_118] +
push dword ptr [eax+ebx*4]  +
mov ecx esi +
push edi  +
call sub_103821C  +
test eax eax +
jl loc_1038709  +
inc ebx  +
cmp ebx 3 +
jb loc_10386D7  +
mov eax [esi] +
mov edi [eax+0C220h] +
cmp edi 3 +
jnz loc_1038739  +
mov edi [eax+0C21Ch] +
push 1  +
jmp loc_103873B  +
and [ebp+var_108] 0 +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1038795  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1038795  +
push eax  +
push offset dword_100A79C  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_1038795  +
push 0  +
push [ebp+hWnd]  +
call ds:EnableWindow  +
push edi  +
mov ecx esi +
call sub_103816A  +
mov edi 3AB6h +
push edi  +
push 6  +
push offset unk_106531C  +
lea eax [ebp+String] +
push eax  +
push 3AAEh  +
push dword ptr [esi+1Ch]  +
call sub_1038321  +
push edi  +
push 7  +
push offset unk_1065300  +
push [ebp+lpString]  +
push 3AA6h  +
push dword ptr [esi+1Ch]  +
call sub_1038321  +
mov [ebp+var_108] 1 +
push [ebp+lpString]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_108] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_104A1C6  +
mov edi eax +
call sub_10273C7  +
xor ebx ebx +
cmp edi ebx +
jz loc_1038804  +
cmp eax ebx +
jnz loc_1038804  +
push 1  +
push 3334h  +
push dword ptr [esi+1Ch]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
jmp loc_1038857  +
push ebx  +
push 3334h  +
push dword ptr [esi+1Ch]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push 3424h  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038842  +
mov [ebp+var_808] ebx +
jmp loc_10388DB  +
lea eax [ebp+Buffer] +
push eax  +
push 3AA1h  +
push dword ptr [esi+1Ch]  +
call ds:SetDlgItemTextW  +
mov ecx esi +
call sub_10384B2  +
mov [ebp+var_808] eax +
cmp eax ebx +
jnz loc_103888E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10388DB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10388DB  +
push offset dword_100A79C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_10388DB  +
mov eax [esi] +
mov eax [eax+0C234h] +
lea edi dword_100A7DC[eax*4] +
push ds:dword_100A7D8[ebx]  +
push dword ptr [esi+1Ch]  +
call ds:GetDlgItem  +
cmp dword ptr [edi] 0 +
mov [ebp+hWnd] eax +
jnz loc_10388D0  +
push eax  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10388D0  +
push 0  +
push [ebp+hWnd]  +
call ds:EnableWindow  +
add ebx 1Ch +
add edi 1Ch +
cmp ebx 38h +
jb loc_103889D  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_808] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+18h] eax +
call sub_101C97A  +
mov eax [ebp+arg_8] +
and dword ptr [esi+1Ch] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 45Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor edx edx +
xor ebx ebx +
sub eax 4Eh +
push edi  +
mov edi [ebp+hDlg] +
jz loc_1038A20  +
sub eax 0C2h +
jz loc_10389EA  +
dec eax  +
jz loc_10389AA  +
sub eax 30Dh +
jz loc_1038989  +
sub eax 4 +
jnz loc_1038A5C  +
cmp [ebp+arg_C] edx +
setnz al  +
push eax  +
push 3  +
push offset unk_10652E8  +
push edi  +
call sub_105AC93  +
jmp loc_1038A5C  +
mov ecx esi +
call sub_103813B  +
mov esi [esi] +
cmp dword ptr [esi+0C220h] 3 +
jnz loc_1038A5C  +
mov [esi+0C21Ch] eax +
jmp loc_1038A5C  +
mov eax 3334h +
cmp word ptr [ebp+arg_C] ax +
jnz loc_1038A5C  +
push edx  +
push edx  +
push dword ptr [esi+4]  +
lea ecx [ebp+var_45C] +
push dword ptr [esi]  +
push dword ptr [esi+18h]  +
push edi  +
call sub_103C666  +
lea ecx [ebp+var_45C] +
call sub_105340F  +
xor ebx ebx +
lea ecx [ebp+var_45C] +
inc ebx  +
call sub_103C6F8  +
jmp loc_1038A5C  +
mov eax [esi+0Ch] +
mov ebx [esi+14h] +
mov ecx [esi+8] +
push edx  +
sub ebx eax +
push ebx  +
mov ebx [esi+10h] +
sub ebx ecx +
push ebx  +
push eax  +
push ecx  +
push edx  +
push edi  +
mov [esi+1Ch] edi +
call ds:SetWindowPos  +
mov ecx [esi+4] +
push 6  +
push edi  +
call sub_1027456  +
mov ecx esi +
call sub_10387BB  +
mov ebx eax +
jmp loc_1038A5C  +
mov eax [ebp+arg_10] +
cmp dword ptr [eax+4] 3AB2h +
jnz loc_1038A5C  +
mov eax [eax+8] +
cmp eax 0FFFFFFFCh +
jz loc_1038A39  +
cmp eax 0FFFFFFFEh +
jnz loc_1038A5C  +
mov eax [esi] +
mov ecx [esi+4] +
push offset aMstsc_topnode_  +
push dword ptr [eax+135Ch]  +
push offset aHelp_entry_i_0  +
push offset aMshelpWindow_0  +
push edi  +
call sub_102817E  +
xor ebx ebx +
inc ebx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 110h +
push esi  +
mov esi [ebp+14h] +
push edi  +
jz loc_1038A96  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov edi eax +
jmp loc_1038AA4  +
push esi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
mov edi esi +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
test edi edi +
jz loc_1038ABA  +
push edi  +
call sub_1038924  +
jmp loc_1038AC0  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
mov edi 100h +
push edi  +
lea eax [esi+1Ch] +
push eax  +
push 438h  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038B17  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038B10  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038B10  +
push offset dword_100A978  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
jmp loc_1038C3F  +
push edi  +
lea eax [esi+21Ch] +
push eax  +
push 439h  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038B4B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038B10  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038B10  +
push offset dword_100A978  +
push 12h  +
jmp loc_1038B05  +
push edi  +
lea eax [esi+41Ch] +
push eax  +
push 43Ah  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038B7F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038B10  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038B10  +
push offset dword_100A978  +
push 13h  +
jmp loc_1038B05  +
push edi  +
lea eax [esi+61Ch] +
push eax  +
push 43Bh  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038BBE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038B10  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038B10  +
push offset dword_100A978  +
push 14h  +
jmp loc_1038B05  +
push edi  +
lea eax [esi+81Ch] +
push eax  +
push 43Ch  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038BFD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038B10  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038B10  +
push offset dword_100A978  +
push 15h  +
jmp loc_1038B05  +
push edi  +
lea eax [esi+0A1Ch] +
push eax  +
push 43Dh  +
push dword ptr [esi+18h]  +
call sub_105DD36  +
test eax eax +
jnz loc_1038C3C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038B10  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038B10  +
push offset dword_100A978  +
push 16h  +
jmp loc_1038B05  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:SendDlgItemMessageW +
mov ebx ecx +
xor eax eax +
push edi  +
mov [ebp+var_4] ebx +
inc eax  +
mov edi 3313h +
cmp eax 0FFFFFFFFh +
jz loc_1038C7B  +
push 0  +
push 0  +
push 144h  +
push edi  +
push [ebp+hDlg]  +
call esi  +
test eax eax +
jnz loc_1038C63  +
add ebx 41Ch +
push ebx  +
push 0  +
mov ebx 143h +
push ebx  +
push edi  +
push [ebp+hDlg]  +
call esi  +
mov eax [ebp+var_4] +
add eax 21Ch +
push eax  +
push 0  +
push ebx  +
push edi  +
push [ebp+hDlg]  +
call esi  +
mov eax [ebp+var_4] +
add eax 1Ch +
push eax  +
push 0  +
push ebx  +
push edi  +
push [ebp+hDlg]  +
call esi  +
mov eax [ebp+var_4] +
mov eax [eax] +
push 0  +
push dword ptr [eax+84E0h]  +
push 14Eh  +
push edi  +
push [ebp+hDlg]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
sub eax 110h +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
jz loc_1038F78  +
dec eax  +
jz loc_1038DF4  +
sub eax 30Dh +
jz loc_1038D26  +
sub eax 4 +
jnz loc_103908B  +
cmp [ebp+arg_C] ebx +
setnz al  +
push eax  +
push 5  +
push offset unk_1065334  +
push [ebp+hDlg]  +
call sub_105AC93  +
jmp loc_103908B  +
push ebx  +
push ebx  +
push 147h  +
push 3313h  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
push eax  +
call sub_102A07C  +
mov edi ds:IsDlgButtonChecked +
push 33A6h  +
push [ebp+hDlg]  +
call edi  +
mov ecx [esi] +
mov edx [ecx+0CA88h] +
neg edx  +
sbb edx edx +
not edx  +
push 3316h  +
push [ebp+hDlg]  +
and edx eax +
mov [ecx+8740h] edx +
call edi  +
mov ecx [esi] +
mov edx [ecx+0CA84h] +
neg edx  +
sbb edx edx +
not edx  +
and edx eax +
mov [ecx+874Ch] edx +
mov ecx [esi] +
call sub_1031D15  +
test eax eax +
jge loc_1038DCA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038DC2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038DC2  +
push offset dword_100A978  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and [ebp+var_4] ebx +
jmp loc_103908B  +
mov ecx [esi] +
call sub_1030146  +
test eax eax +
jge loc_103908B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038DC2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038DC2  +
push offset dword_100A978  +
push 10h  +
jmp loc_1038DB7  +
movzx eax word ptr [ebp+arg_C] +
sub eax 331Ah +
jz loc_1038E35  +
dec eax  +
jnz loc_103908B  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
lea ecx [ebp+var_38] +
push dword ptr [eax+18h]  +
push [ebp+hDlg]  +
call sub_103FEA4  +
lea ecx [ebp+var_38] +
call sub_105340F  +
lea ecx [ebp+var_38] +
mov [ebp+var_4] 1 +
call sub_103FEE2  +
jmp loc_103908B  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
lea eax [ebp+arg_8] +
push eax  +
mov [ebp+arg_8] ebx +
mov [ebp+arg_C] ebx +
call sub_10305F1  +
test eax eax +
jge loc_1038E9D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038E71  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038E71  +
push offset dword_100A978  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_4] ebx +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_1038E84  +
mov [ebp+arg_C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_103908B  +
mov [ebp+arg_8] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_103908B  +
mov eax [esi] +
mov eax [eax+8754h] +
mov ecx [ebp+arg_8] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+0Ch]  +
test eax eax +
jge loc_1038ED2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038E71  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038E71  +
push offset dword_100A978  +
push 0Ch  +
jmp loc_1038E66  +
mov ecx [esi] +
lea eax [ebp+arg_C] +
push eax  +
call sub_1030704  +
test eax eax +
jge loc_1038F03  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038E71  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038E71  +
push offset dword_100A978  +
push 0Dh  +
jmp loc_1038E66  +
mov eax [esi] +
mov eax [eax+8750h] +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+0Ch]  +
test eax eax +
jge loc_1038F43  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1038E71  +
test byte ptr [eax+1Ch] 4 +
jz loc_1038E71  +
push offset dword_100A978  +
push 0Eh  +
jmp loc_1038E66  +
push [ebp+arg_C]  +
lea ecx [ebp+var_58] +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push dword ptr [esi+18h]  +
push [ebp+hDlg]  +
call sub_103DF61  +
lea ecx [ebp+var_58] +
call sub_105340F  +
lea ecx [ebp+var_58] +
mov [ebp+var_4] 1 +
call sub_103DFB4  +
jmp loc_1038E74  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
mov edx [esi+14h] +
mov ecx [esi+8] +
push ebx  +
sub edx eax +
push edx  +
mov edx [esi+10h] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push ebx  +
push [ebp+hDlg]  +
call ds:SetWindowPos  +
mov eax [esi] +
mov eax [eax+0C234h] +
mov [ebp+arg_0] ebx +
mov ebx ds:EnableWindow +
lea edi dword_100A98C[eax*4] +
push dword ptr [edi]  +
mov eax [ebp+arg_0] +
push ds:dword_100A988[eax]  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ebx  +
add [ebp+arg_0] 1Ch +
add edi 1Ch +
cmp [ebp+arg_0] 8Ch +
jb loc_1038FB2  +
push [ebp+hDlg]  +
mov ecx esi +
call sub_1038C47  +
mov eax [esi] +
xor edi edi +
cmp [eax+0CA88h] edi +
jnz loc_103900F  +
mov eax [eax+8740h] +
xor ecx ecx +
cmp eax edi +
mov edi ds:CheckDlgButton +
setnz cl  +
push ecx  +
push 33A6h  +
push [ebp+hDlg]  +
call edi  +
jmp loc_1039033  +
push edi  +
mov edi ds:CheckDlgButton +
push 33A6h  +
push [ebp+hDlg]  +
call edi  +
push 0  +
push 33A6h  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ebx  +
mov eax [esi] +
xor ecx ecx +
cmp [eax+0CA84h] ecx +
jnz loc_1039059  +
mov eax [eax+874Ch] +
xor edx edx +
cmp eax ecx +
setnz dl  +
push edx  +
push 3316h  +
push [ebp+hDlg]  +
call edi  +
jmp loc_1039077  +
push ecx  +
push 3316h  +
push [ebp+hDlg]  +
call edi  +
push 0  +
push 3316h  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ebx  +
mov ecx [esi+4] +
push 6  +
push [ebp+hDlg]  +
call sub_1027456  +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+18h] eax +
call sub_101C97A  +
mov eax [ebp+arg_8] +
mov ecx esi +
mov [esi+4] eax +
call sub_1038ACB  +
test eax eax +
jnz loc_10390E8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10390E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10390E8  +
push offset dword_100A978  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 110h +
push esi  +
mov esi [ebp+14h] +
push edi  +
jz loc_1039116  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov edi eax +
jmp loc_1039124  +
push esi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
mov edi esi +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
test edi edi +
jz loc_103913A  +
push edi  +
call sub_1038CD6  +
jmp loc_1039140  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
and dword ptr [eax+1408h] 0 +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
mov [ebp+ppv] edi +
mov [ebp+var_8] edi +
mov [ebp+var_C] edi +
cmp [ebp+arg_0] edi +
jz loc_1039397  +
cmp [ebp+arg_4] edi +
jz loc_1039397  +
push esi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100C440  +
push 1  +
push edi  +
push offset stru_100C420  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jge loc_10391CF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039359  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039359  +
push offset loc_100AA24  +
push 0Ah  +
jmp loc_10392EE  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_100C450  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jge loc_103920D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039359  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039359  +
push esi  +
push offset loc_100AA24  +
push 0Bh  +
jmp loc_1039326  +
push 140Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1039233  +
and [eax+1408h] edi +
mov dword ptr [eax] offset off_100AA34 +
mov dword ptr [eax+4] 1 +
mov edi eax +
jmp loc_1039235  +
xor edi edi +
test edi edi +
jnz loc_1039243  +
mov esi 8007000Eh +
jmp loc_1039359  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10394E9  +
test eax eax +
jnz loc_103927F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039275  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039275  +
push offset loc_100AA24  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 80004005h +
jmp loc_1039359  +
mov eax [edi] +
lea ecx [ebp+var_C] +
push ecx  +
push offset dword_100C344  +
push edi  +
call dword ptr [eax]  +
mov esi eax +
test esi esi +
jge loc_10392B6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039359  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039359  +
push offset loc_100AA24  +
push 0Dh  +
jmp loc_10392EE  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
xor edi edi +
push edi  +
push edi  +
push [ebp+var_C]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10392FB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039359  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039359  +
push offset loc_100AA24  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1039359  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push 3  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jge loc_1039333  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039359  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039359  +
push esi  +
push offset loc_100AA24  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1039359  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039357  +
test byte ptr [eax+1Ch] 2 +
jz loc_1039357  +
push offset loc_100AA24  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor esi esi +
mov eax [ebp+var_8] +
test eax eax +
jz loc_103936A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_8] 0 +
mov eax [ebp+ppv] +
test eax eax +
jz loc_103937B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppv] 0 +
test edi edi +
jz loc_1039385  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp+var_C] +
test eax eax +
jz loc_1039392  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
jmp loc_103939C  +
mov eax 80070057h +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_10393B9  +
mov eax 80070057h +
jmp loc_10393F5  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C460 +
xor eax eax +
cmps   +
jz loc_10393DD  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100C344 +
xor eax eax +
cmps   +
jnz loc_10393EC  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_10393F3  +
and [edx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jg loc_103941F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov edx [ebp+0Ch] +
add eax 1408h +
mov ecx [eax] +
add ecx edx +
cmp ecx 0Ah +
jnb loc_103944B  +
mov [eax] ecx +
xor eax eax +
jmp loc_103944E  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+14h] +
and dword ptr [ebx] 0 +
push esi  +
mov esi [ebp+8] +
push edi  +
jmp loc_10394AE  +
mov eax [ebx] +
cmp eax [ebp+0Ch] +
jnb loc_10394B7  +
push 200h  +
call ds:CoTaskMemAlloc  +
mov edi eax +
test edi edi +
jz loc_10394DD  +
mov eax [esi+1408h] +
mov ecx eax +
shl ecx 9 +
lea ecx [ecx+esi+8] +
push ecx  +
push 100h  +
inc eax  +
push edi  +
mov [esi+1408h] eax +
call sub_101BD65  +
mov eax [ebx] +
mov ecx [ebp+10h] +
mov [ecx+eax*4] edi +
inc dword ptr [ebx]  +
cmp dword ptr [esi+1408h] 0Ah +
jb loc_103946A  +
mov eax [ebx] +
mov ecx [ebp+0Ch] +
cmp eax ecx +
jnb loc_10394CC  +
mov edx [ebp+10h] +
lea edi [edx+eax*4] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx [ebp+0Ch] +
xor eax eax +
cmp [ebx] ecx +
setnz al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov eax 8007000Eh +
jmp loc_10394D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10394FA  +
xor eax eax +
jmp loc_1039530  +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
lea ebx [ecx+8] +
add edi 70D8h +
mov esi 200h +
test edi edi +
jz loc_1039535  +
push edi  +
push 100h  +
push ebx  +
call sub_101BD65  +
inc [ebp+arg_0]  +
add edi esi +
add ebx esi +
cmp [ebp+arg_0] 0Ah +
jl loc_103950E  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_103952E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10369B5  +
test [ebp+arg_0] 1 +
jz loc_1039558  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1037DE4  +
test [ebp+arg_0] 1 +
jz loc_103957E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov edx ecx +
push esi  +
mov esi [edx+1E0h] +
test esi esi +
jz loc_10395D7  +
push edi  +
push 7  +
xor eax eax +
cmp [edx+2Ch] eax +
pop ecx  +
lea edi [ebp+var_1C] +
stos   +
setnz al  +
mov [ebp+lParam] 20h +
mov [ebp+var_1C] 1 +
mov [ebp+var_14] eax +
lea eax [ebp+lParam] +
push eax  +
push 139Ah  +
push 440h  +
push esi  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push 2000h  +
xor esi esi +
push esi  +
mov [edx] eax +
push esi  +
movzx eax ax +
push esi  +
mov [edi] esi +
push eax  +
mov [ebx] esi +
push dword ptr [ecx+0Ch]  +
call ds:LoadImageW  +
mov [ebp+arg_0] eax +
cmp eax esi +
jz loc_103963F  +
lea ecx [ebp+var_18] +
push ecx  +
push 18h  +
push eax  +
call ds:GetObjectW  +
mov eax [ebp+var_10] +
push [ebp+arg_0]  +
mov [ebx] eax +
mov eax [ebp+var_14] +
cdq   +
sub eax edx +
sar eax 1 +
mov [edi] eax +
call ds:DeleteObject  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+1DCh] +
mov eax [esi] +
test eax eax +
jz loc_1039666  +
push eax  +
call sub_105D688  +
and dword ptr [esi] 0 +
lea esi [edi+1D8h] +
mov ecx [esi] +
test ecx ecx +
jz loc_103967B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push 0  +
push 0  +
push 130Bh  +
mov esi ecx +
push 1397h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
mov edi ds:SendMessageW +
push eax  +
call edi  +
mov ebx eax +
cmp ebx 5 +
ja loc_1039721  +
mov eax [esi+14Ch] +
test eax eax +
jz loc_10396DA  +
push 0  +
push 0  +
push 41Eh  +
push eax  +
call edi  +
push dword ptr [esi+14Ch]  +
call ds:DestroyWindow  +
and dword ptr [esi+14Ch] 0 +
cmp dword ptr [esi+2Ch] 0 +
jz loc_103971C  +
push dword ptr [esi+ebx*4+180h]  +
push dword ptr [esi+ebx*4+168h]  +
push dword ptr [esi+4]  +
push dword ptr [esi+ebx*4+150h]  +
push dword ptr [esi+0Ch]  +
call ds:CreateDialogIndirectParamW  +
push 4  +
push eax  +
mov [esi+14Ch] eax +
call ds:ShowWindow  +
push dword ptr [esi+14Ch]  +
call ds:SetFocus  +
xor eax eax +
inc eax  +
jmp loc_1039723  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
mov edi ecx +
push 0  +
push dword ptr [edi+4]  +
call ds:GetSystemMenu  +
mov ebx eax +
test ebx ebx +
jz loc_10397C2  +
push esi  +
mov esi ds:EnableMenuItem +
push 1  +
push 0F030h  +
push ebx  +
call esi  +
push 1  +
push 0F000h  +
push ebx  +
call esi  +
push 20h  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 0BBAh +
push esi  +
push dword ptr [edi+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_103979C  +
lea eax [ebp+Buffer] +
push eax  +
push 6Dh  +
push 0  +
push 0F060h  +
push ebx  +
call ds:InsertMenuW  +
jmp loc_10397C1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10397C1  +
test byte ptr [eax+1Ch] 4 +
jz loc_10397C1  +
push esi  +
push offset dword_100AA70  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+1D8h] +
xor ebx ebx +
push edi  +
mov edi ds:SelectPalette +
cmp eax ebx +
jz loc_103980A  +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_103980A  +
push ebx  +
push eax  +
push [ebp+arg_0]  +
call edi  +
push [ebp+arg_0]  +
mov ebx eax +
call ds:RealizePalette  +
mov ecx [esi+1D8h] +
test ecx ecx +
jz loc_103981C  +
push [ebp+arg_0]  +
call sub_103BB27  +
test ebx ebx +
jz loc_1039828  +
push 1  +
push ebx  +
push [ebp+arg_0]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
mov eax lpReserved +
mov edi [ebp+arg_0] +
cmp eax offset lpReserved +
jz loc_103986B  +
test byte ptr [eax+1Ch] 2 +
jz loc_103986B  +
push edi  +
push dword ptr [esi+1A8h]  +
push offset dword_100AA70  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov [esi+1A8h] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetWindow +
push edi  +
push 5  +
push [ebp+arg_0]  +
jmp loc_10398A3  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push edi  +
call ds:SendMessageW  +
push 2  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_1039890  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1B0h] 0 +
jz loc_1039921  +
xor eax eax +
push 1FEh  +
push eax  +
mov [ebp+String] ax +
lea eax [ebp-202h] +
push eax  +
call memset  +
add esp 0Ch +
push 100h  +
lea eax [ebp+String] +
push eax  +
push 1394h  +
push dword ptr [esi+4]  +
call ds:GetDlgItemTextW  +
mov ecx [esi+1B0h] +
lea eax [ebp+String] +
push eax  +
call sub_105C328  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+1B0h] +
test ecx ecx +
jz loc_103994D  +
push [ebp+lpString]  +
call sub_105B7FD  +
mov ecx [esi+1BCh] +
pop esi  +
test ecx ecx +
jz loc_103995E  +
pop ebp  +
jmp loc_10361BA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+Msg] 110h +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
jz loc_1039989  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov esi eax +
jmp loc_1039997  +
push edi  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
mov esi edi +
call ds:SetWindowLongW  +
push edi  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
test esi esi +
jz loc_10399AD  +
mov eax [esi] +
push esi  +
call dword ptr [eax+0Ch]  +
jmp loc_10399B3  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1E0h] 0 +
jz loc_1039AC0  +
mov eax [esi+4] +
push ebx  +
push edi  +
push 0FFFFFFECh  +
push eax  +
call ds:GetWindowLongW  +
mov ebx ds:GetDlgItem +
mov edi eax +
push 1396h  +
push dword ptr [esi+4]  +
shr edi 16h +
and edi 1 +
call ebx  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
cmp [ebp+arg_0] 0 +
jnz loc_1039A3F  +
cmp dword ptr [esi+2Ch] 0 +
jnz loc_1039A1C  +
test edi edi +
jz loc_1039A46  +
mov eax [ebp+Rect.right] +
jmp loc_1039A49  +
push 1397h  +
push dword ptr [esi+4]  +
call ebx  +
lea ecx [ebp+var_28] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
test edi edi +
jz loc_1039A3A  +
mov eax [ebp+var_20] +
jmp loc_1039A49  +
mov eax [ebp+var_28] +
jmp loc_1039A49  +
mov eax [ebp+Rect.right] +
test edi edi +
jnz loc_1039A49  +
mov eax [ebp+Rect.left] +
mov [ebp+X] eax +
mov eax [ebp+Rect.top] +
mov [ebp-4] eax +
lea eax [ebp+X] +
push eax  +
push dword ptr [esi+4]  +
call ds:ScreenToClient  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
mov ecx [ebp+Rect.bottom] +
sub ecx [ebp+Rect.top] +
imul eax eax +
cdq   +
sub eax edx +
sar eax 1 +
movzx ecx cx +
movzx eax ax +
shl ecx 10h +
or eax ecx +
push eax  +
push 0  +
push 41Fh  +
push dword ptr [esi+1E0h]  +
call ds:SendMessageW  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push 4  +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
imul eax eax +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push dword ptr [ebp-4]  +
push [ebp+X]  +
push 0  +
push dword ptr [esi+1E0h]  +
call ds:SetWindowPos  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor edi edi +
push 1FEh  +
mov [ebp+Buffer] ax +
lea eax [ebp-202h] +
push edi  +
push eax  +
mov esi ecx +
mov [ebp+var_220] edi +
call memset  +
mov ebx ds:GetDlgItem +
add esp 0Ch +
push 1396h  +
push dword ptr [esi+4]  +
call ebx  +
push 100h  +
mov [ebp+hWnd] eax +
lea eax [ebp+Buffer] +
push eax  +
push 430h  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_1039B4D  +
push 1399h  +
push dword ptr [esi+4]  +
call ebx  +
mov [esi+1E0h] eax +
mov eax [esi+1E0h] +
cmp eax edi +
jz loc_1039D0E  +
mov ebx ds:SendMessageW +
push edi  +
push 14h  +
push 41Eh  +
push eax  +
call ebx  +
push edi  +
push 1  +
push 43Ch  +
push dword ptr [esi+1E0h]  +
call ebx  +
movzx eax word ptr [esi+1ECh] +
movzx ecx word ptr [esi+1E8h] +
shl eax 10h +
or eax ecx +
push eax  +
push edi  +
push 420h  +
push dword ptr [esi+1E0h]  +
call ebx  +
push edi  +
push edi  +
push 456h  +
push dword ptr [esi+1E0h]  +
call ebx  +
shr eax 10h +
shl eax 10h +
push eax  +
push edi  +
push 457h  +
push dword ptr [esi+1E0h]  +
call ebx  +
movzx eax word ptr [esi+1F0h] +
push 2000h  +
push edi  +
push edi  +
push edi  +
push dword ptr [esi+1E8h]  +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:ImageList_LoadImageW  +
mov [esi+1E4h] eax +
cmp eax edi +
jz loc_1039C61  +
push eax  +
push edi  +
push 430h  +
push dword ptr [esi+1E0h]  +
call ebx  +
push dword ptr [esi+1E4h]  +
push edi  +
push 436h  +
push dword ptr [esi+1E0h]  +
call ebx  +
mov [ebp+lParam] edi +
mov [ebp+var_20C] edi +
xor eax eax +
mov [ebp+var_214] 139Ah +
mov [ebp+var_210] 4 +
mov [ebp+var_20F] 10h +
mov [ebp+var_20E] 0 +
mov [ebp+var_20D] 0 +
lea edi [ebp+var_208] +
stos   +
lea eax [ebp+lParam] +
push eax  +
push 1  +
push 444h  +
push dword ptr [esi+1E0h]  +
call ebx  +
xor edi edi +
cmp [ebp+hWnd] edi +
jz loc_1039C81  +
push edi  +
push edi  +
push 31h  +
push [ebp+hWnd]  +
call ebx  +
push edi  +
push eax  +
push 30h  +
push dword ptr [esi+1E0h]  +
call ebx  +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_23C] +
stos   +
lea eax [ebp+Buffer] +
mov [ebp+var_228] eax +
xor eax eax +
cmp [esi+2Ch] eax +
mov [ebp+var_240] 20h +
setnz al  +
mov [ebp+var_23C] 3 +
mov [ebp+var_224] 100h +
mov [ebp+var_234] eax +
lea eax [ebp+var_240] +
push eax  +
push 139Ah  +
push 440h  +
push dword ptr [esi+1E0h]  +
call ebx  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [esi+1E0h]  +
call ds:SetWindowTextW  +
push 0  +
mov ecx esi +
call sub_10399BE  +
mov ecx esi +
call sub_103958A  +
mov [ebp+var_220] 1 +
jmp loc_1039D50  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039D32  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039D32  +
push offset dword_100AA70  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi [esi+1E0h] +
mov ebx ds:ShowWindow +
cmp esi edi +
jz loc_1039D46  +
push edi  +
push esi  +
call ebx  +
push 4  +
push [ebp+hWnd]  +
call ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_220] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
push 3Ch  +
mov esi ecx +
mov [ebp+var_4] edi +
call sub_105D670  +
mov [esi+1DCh] eax +
cmp eax edi +
jz loc_1039EC9  +
push ebx  +
push 3Ch  +
push edi  +
push eax  +
call memset  +
mov eax [esi+1DCh] +
mov [eax] edi +
mov eax [esi+1DCh] +
mov dword ptr [eax+4] 8 +
mov eax [esi+1DCh] +
mov dword ptr [eax+8] 14h +
mov eax [esi+1DCh] +
mov dword ptr [eax+0Ch] 4B7h +
mov eax [esi+1DCh] +
mov dword ptr [eax+10h] 2 +
mov eax [esi+1DCh] +
mov dword ptr [eax+18h] 4B1h +
mov eax [esi+1DCh] +
mov dword ptr [eax+2Ch] 4B2h +
mov eax [esi+1DCh] +
mov dword ptr [eax+1Ch] 4B3h +
mov eax [esi+1DCh] +
mov dword ptr [eax+30h] 4B5h +
mov eax [esi+1DCh] +
mov dword ptr [eax+20h] 4B4h +
mov eax [esi+1DCh] +
mov dword ptr [eax+34h] 4B6h +
mov eax [esi+1DCh] +
mov [eax+24h] edi +
mov eax [esi+1DCh] +
push 34h  +
mov dword ptr [eax+38h] 1 +
call ??2@YAPAXI@Z  +
mov ebx eax +
add esp 10h +
cmp ebx edi +
jz loc_1039E5E  +
push edi  +
call sub_102736E  +
push eax  +
push dword ptr [esi+0Ch]  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_103B94C  +
jmp loc_1039E60  +
xor eax eax +
mov [esi+1D8h] eax +
pop ebx  +
cmp eax edi +
jz loc_1039EAE  +
push dword ptr [esi+1DCh]  +
mov ecx eax +
call sub_103C0DB  +
test eax eax +
jz loc_1039E88  +
mov [ebp+var_4] 1 +
jmp loc_1039F19  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039EEF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039EEF  +
push offset dword_100AA70  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1039EEF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039EEF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039EEF  +
push offset dword_100AA70  +
push 17h  +
jmp loc_1039EA1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1039EEF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1039EEF  +
push 3Ch  +
push offset dword_100AA70  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax [esi+1DCh] +
cmp eax edi +
jz loc_1039F05  +
push eax  +
call sub_105D688  +
mov [esi+1DCh] edi +
add esi 1D8h +
mov ecx [esi] +
cmp ecx edi +
jz loc_1039F19  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [esi] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 100h  +
lea eax [ebp+String] +
push eax  +
mov esi ecx +
push 1394h  +
push dword ptr [esi+4]  +
call ds:GetDlgItemTextW  +
mov ecx [esi+24h] +
lea eax [ebp+String] +
push eax  +
add ecx 54h +
call sub_105B15D  +
mov ecx [esi+1B0h] +
pop esi  +
test ecx ecx +
jz loc_1039F7B  +
call sub_105B3A7  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
push 1394h  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
mov ecx [esi+1B0h] +
test ecx ecx +
jz loc_1039FC2  +
call sub_105B953  +
mov ecx esi +
pop esi  +
jmp sub_10398B6  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_103958A  +
push 0  +
mov ecx esi +
call sub_10399BE  +
cmp dword ptr [esi+2Ch] 0 +
mov ebx offset unk_1065374 +
mov edi offset unk_1065380 +
jz loc_103A04A  +
mov ecx esi +
call sub_1039F27  +
push 0  +
push dword_106537C  +
mov ecx esi +
push ebx  +
call sub_1053016  +
push 0  +
push dword_106537C  +
mov ecx esi +
push ebx  +
call sub_105305A  +
push 1  +
push dword_1065384  +
mov ecx esi +
push edi  +
call sub_1053016  +
push 1  +
push dword_1065384  +
mov ecx esi +
push edi  +
call sub_105305A  +
push 0  +
push dword ptr [esi+1B4h]  +
call ds:ShowWindow  +
mov ecx esi +
call sub_1039683  +
cmp dword ptr [esi+2Ch] 0 +
jnz loc_103A0FF  +
mov ecx esi +
call sub_1039F8C  +
mov eax [esi+24h] +
mov eax [eax+0C234h] +
cmp eax 5 +
jg loc_103A0AA  +
and [ebp+var_4] 0 +
lea eax dword_100AA9C[eax*4] +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
push dword ptr [eax]  +
mov eax [ebp+var_4] +
push ds:dword_100AA98[eax]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
add [ebp+var_4] 1Ch +
add [ebp+var_8] 1Ch +
cmp [ebp+var_4] 54h +
jb loc_103A07E  +
push 1  +
push dword_106537C  +
mov ecx esi +
push ebx  +
call sub_105305A  +
push 0  +
push dword_1065384  +
mov ecx esi +
push edi  +
call sub_1053016  +
push 0  +
push dword_1065384  +
mov ecx esi +
push edi  +
call sub_105305A  +
push 4  +
push dword ptr [esi+1B4h]  +
call ds:ShowWindow  +
push 1394h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
jmp loc_103A121  +
lea edi [esi+14Ch] +
push dword ptr [edi]  +
call ds:SetFocus  +
push 0  +
push 10002h  +
push 127h  +
push dword ptr [edi]  +
call ds:SendMessageW  +
push 1396h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
cmp dword ptr [esi+2Ch] 0 +
lea ecx [esi+0B4h] +
jnz loc_103A13E  +
lea ecx [esi+34h] +
push ecx  +
push eax  +
call ds:SetWindowTextW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+30h] 0 +
jnz loc_103A22E  +
xor eax eax +
cmp [esi+2Ch] eax +
push ebx  +
setz al  +
push edi  +
mov [ebp+wndpl.length] 2Ch +
mov [esi+2Ch] eax +
lea eax [ebp+wndpl] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetWindowPlacement  +
mov ebx [ebp+wndpl.rcNormalPosition.right] +
mov edi [ebp+wndpl.rcNormalPosition.bottom] +
sub ebx [ebp+wndpl.rcNormalPosition.left] +
sub edi [ebp+wndpl.rcNormalPosition.top] +
and [ebp+Rect.left] 0 +
and [ebp+Rect.top] 0 +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+Rect.right] 64h +
mov [ebp+Rect.bottom] 88h +
call ds:MapDialogRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov ecx [esi+2Ch] +
mov [esi+19Ch] eax +
mov [ebp+var_4] edi +
test ecx ecx +
jnz loc_103A1CD  +
neg eax  +
add edi eax +
test ecx ecx +
jnz loc_103A1DA  +
mov ecx esi +
call sub_1039FCB  +
mov eax [ebp+arg_0] +
push 427h  +
neg eax  +
push 0  +
sbb eax eax +
and eax 0FFFFFF38h +
add eax 0C8h +
push eax  +
push edi  +
push ebx  +
push [ebp+var_4]  +
push ebx  +
push dword ptr [esi+4]  +
call sub_1053BC2  +
test eax eax +
jl loc_103A20E  +
mov dword ptr [esi+30h] 1 +
jmp loc_103A22C  +
push 6  +
push edi  +
push ebx  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
cmp [esi+2Ch] edi +
jz loc_103A22C  +
mov ecx esi +
call sub_1039FCB  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ecx +
mov eax [ebx+4] +
test eax eax +
jnz loc_103A25E  +
xor eax eax +
jmp loc_103A6D5  +
push 1397h  +
push eax  +
call ds:GetDlgItem  +
mov [ebp+hWnd] eax +
test eax eax +
jz loc_103A257  +
push 8  +
pop eax  +
mov [ebp+var_234.dwSize] eax +
mov [ebp+var_234.dwICC] eax +
lea eax [ebp+var_234] +
push eax  +
call ds:InitCommonControlsEx  +
push 234h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103A2B5  +
push dword ptr [ebx+20h]  +
mov edx [ebx+24h] +
push edx  +
push dword ptr [ebx+4]  +
mov ecx eax +
push dword ptr [ebx+0Ch]  +
call sub_103696B  +
jmp loc_103A2B7  +
xor eax eax +
mov [ebx+1BCh] eax +
test eax eax +
jz loc_103A257  +
push 0C1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103A2E3  +
push dword ptr [ebx+20h]  +
mov edx [ebx+24h] +
push edx  +
push dword ptr [ebx+0Ch]  +
mov ecx eax +
call sub_103909A  +
jmp loc_103A2E5  +
xor eax eax +
mov [ebx+1C4h] eax +
test eax eax +
jz loc_103A257  +
push 3B8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103A315  +
push dword ptr [ebx+20h]  +
mov edx [ebx+24h] +
push edx  +
push dword ptr [ebx+0Ch]  +
mov ecx eax +
call sub_10377C0  +
jmp loc_103A317  +
xor eax eax +
mov [ebx+1C0h] eax +
test eax eax +
jz loc_103A257  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103A344  +
push dword ptr [ebx+20h]  +
mov edx [ebx+24h] +
push edx  +
push dword ptr [ebx+0Ch]  +
mov ecx eax +
call sub_1038110  +
jmp loc_103A346  +
xor eax eax +
mov [ebx+1C8h] eax +
test eax eax +
jz loc_103A257  +
push 24h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103A373  +
push dword ptr [ebx+20h]  +
mov edx [ebx+24h] +
push edx  +
push dword ptr [ebx+0Ch]  +
mov ecx eax +
call sub_1037DB1  +
jmp loc_103A375  +
xor eax eax +
mov [ebx+1CCh] eax +
test eax eax +
jz loc_103A257  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103A3A2  +
push dword ptr [ebx+20h]  +
mov edx [ebx+24h] +
push edx  +
push dword ptr [ebx+0Ch]  +
mov ecx eax +
call sub_10388F5  +
jmp loc_103A3A4  +
xor eax eax +
mov [ebx+1D0h] eax +
test eax eax +
jz loc_103A257  +
or [ebp+var_218] 0FFFFFFFFh +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 43Fh  +
push dword ptr [ebx+0Ch]  +
mov [ebp+lParam] 3 +
call sub_105DD36  +
test eax eax +
jz loc_103A257  +
push esi  +
push edi  +
mov edi ds:SendMessageW +
lea eax [ebp+Buffer] +
mov [ebp+var_220] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
mov esi 133Eh +
push esi  +
push [ebp+hWnd]  +
call edi  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 440h  +
push dword ptr [ebx+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_103A520  +
lea eax [ebp+Buffer] +
mov [ebp+var_220] eax +
lea eax [ebp+lParam] +
push eax  +
push 1  +
push esi  +
push [ebp+hWnd]  +
call edi  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 441h  +
push dword ptr [ebx+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_103A520  +
lea eax [ebp+Buffer] +
mov [ebp+var_220] eax +
lea eax [ebp+lParam] +
push eax  +
push 2  +
push esi  +
push [ebp+hWnd]  +
call edi  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 442h  +
push dword ptr [ebx+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_103A520  +
lea eax [ebp+Buffer] +
mov [ebp+var_220] eax +
lea eax [ebp+lParam] +
push eax  +
push 3  +
push esi  +
push [ebp+hWnd]  +
call edi  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 443h  +
push dword ptr [ebx+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_103A520  +
lea eax [ebp+Buffer] +
mov [ebp+var_220] eax +
lea eax [ebp+lParam] +
push eax  +
push 4  +
push esi  +
push [ebp+hWnd]  +
call edi  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 33F6h  +
push dword ptr [ebx+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_103A527  +
xor eax eax +
jmp loc_103A6D3  +
lea eax [ebp+Buffer] +
mov [ebp+var_220] eax +
lea eax [ebp+lParam] +
push eax  +
push 5  +
push esi  +
push [ebp+hWnd]  +
call edi  +
lea esi [ebx+13Ch] +
push esi  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
push esi  +
push 0  +
push 1328h  +
push [ebp+hWnd]  +
call edi  +
push 2  +
push esi  +
push dword ptr [ebx+4]  +
push 0  +
call ds:MapWindowPoints  +
push 32DCh  +
mov ecx ebx +
call sub_10530A6  +
mov [ebx+150h] eax +
mov eax [ebx+1BCh] +
push 32DDh  +
mov ecx ebx +
mov dword ptr [ebx+168h] offset loc_1036B7E +
mov [ebx+180h] eax +
call sub_10530A6  +
mov [ebx+154h] eax +
mov eax [ebx+1C0h] +
push 32DEh  +
mov ecx ebx +
mov dword ptr [ebx+16Ch] offset loc_1037769 +
mov [ebx+184h] eax +
call sub_10530A6  +
mov [ebx+158h] eax +
mov eax [ebx+1C4h] +
push 32DFh  +
mov ecx ebx +
mov dword ptr [ebx+170h] offset loc_10390F4 +
mov [ebx+188h] eax +
call sub_10530A6  +
mov [ebx+15Ch] eax +
mov eax [ebx+1C8h] +
push 32E0h  +
mov ecx ebx +
mov dword ptr [ebx+174h] offset loc_10380B9 +
mov [ebx+18Ch] eax +
call sub_10530A6  +
mov [ebx+160h] eax +
mov eax [ebx+1CCh] +
push 3AADh  +
mov ecx ebx +
mov dword ptr [ebx+178h] offset loc_1037E06 +
mov [ebx+190h] eax +
call sub_10530A6  +
mov edi [ebx+1BCh] +
and dword ptr [ebx+14Ch] 0 +
mov [ebx+164h] eax +
mov eax [ebx+1D0h] +
add edi 0Ch +
mov [ebx+194h] eax +
mov dword ptr [ebx+17Ch] offset loc_1038A74 +
movs   +
movs   +
movs   +
movs   +
mov edi [ebx+1C0h] +
push 8  +
pop ecx  +
add edi ecx +
lea eax [ebx+13Ch] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov edi [ebx+1C4h] +
add edi ecx +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov edi [ebx+1C8h] +
add edi ecx +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov edi [ebx+1CCh] +
add edi ecx +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov edi [ebx+1D0h] +
add edi ecx +
mov esi eax +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_1039683  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 1  +
mov esi ecx +
call sub_1039834  +
call ds:GetFocus  +
xor edi edi +
push edi  +
push 6  +
push offset unk_1065388  +
push dword ptr [esi+4]  +
mov [esi+1ACh] eax +
call sub_105AC5D  +
mov eax [esi+1E0h] +
cmp eax edi +
jz loc_103A724  +
push edi  +
push eax  +
call ds:EnableWindow  +
cmp [esi+2Ch] edi +
jz loc_103A741  +
mov esi [esi+14Ch] +
cmp esi edi +
jz loc_103A741  +
push edi  +
push edi  +
push 422h  +
push esi  +
call ds:SendMessageW  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+1A8h] edi +
jz loc_103A7F6  +
cmp [ebp+arg_0] edi +
jz loc_103A76C  +
push 2  +
jmp loc_103A76D  +
push edi  +
call sub_1039834  +
push 1  +
push 6  +
push offset unk_1065388  +
push dword ptr [esi+4]  +
call sub_105AC5D  +
mov eax [esi+1E0h] +
cmp eax edi +
jz loc_103A796  +
push 1  +
push eax  +
call ds:EnableWindow  +
cmp [esi+2Ch] edi +
jz loc_103A7B4  +
mov eax [esi+14Ch] +
cmp eax edi +
jz loc_103A7B4  +
push edi  +
push 1  +
push 422h  +
push eax  +
call ds:SendMessageW  +
xor eax eax +
cmp [esi+2Ch] edi +
setz al  +
push eax  +
push dword_106537C  +
push offset unk_1065374  +
push dword ptr [esi+4]  +
call sub_105AC5D  +
push 1  +
push edi  +
push dword ptr [esi+4]  +
call ds:InvalidateRect  +
cmp [ebp+arg_0] edi +
jnz loc_103A7F6  +
add esi 1ACh +
mov eax [esi] +
cmp eax edi +
jz loc_103A7F6  +
push eax  +
call ds:SetFocus  +
mov [esi] edi +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
cmp dword_1066010 edi +
jnz loc_103A8AD  +
xor esi esi +
push 80h  +
lea eax dword_10653A4[edi] +
push eax  +
push dword_10653A0[edi]  +
push dword ptr [ebx+0Ch]  +
call sub_105DD36  +
test eax eax +
jz loc_103A879  +
add edi 104h +
inc esi  +
cmp edi 618h +
jb loc_103A81B  +
xor esi esi +
inc esi  +
mov dword_1066010 esi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103A875  +
test byte ptr [eax+1Ch] 2 +
jz loc_103A875  +
push offset dword_100AA70  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax esi +
jmp loc_103A8D4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103A8A9  +
test byte ptr [eax+1Ch] 4 +
jz loc_103A8A9  +
imul esi esi +
push dword_10653A0[esi]  +
push offset dword_100AA70  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
jmp loc_103A8D4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103A8D1  +
test byte ptr [eax+1Ch] 2 +
jz loc_103A8D1  +
push offset dword_100AA70  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+1B0h] 0 +
jnz loc_103A920  +
push 834h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103A918  +
mov edx [ebx+24h] +
push 1  +
add edx 0CA94h +
push edx  +
push dword ptr [ebx+0Ch]  +
mov ecx eax +
call sub_105C6CB  +
jmp loc_103A91A  +
xor eax eax +
mov [ebx+1B0h] eax +
push 32FFh  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
cmp dword ptr [ebx+1B0h] 0 +
mov [ebp+hWnd] eax +
jz loc_103A9CB  +
push esi  +
push edi  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+4]  +
call sub_1050D43  +
mov edi [ebx+1B0h] +
add edi 1Ch +
lea esi [ebp+Rect] +
movs   +
movs   +
movs   +
push 3A9Ah  +
movs   +
push dword ptr [ebx+0Ch]  +
call sub_105DC73  +
pop edi  +
pop esi  +
test eax eax +
jz loc_103A9CB  +
push dword ptr [ebx+1B0h]  +
push offset DialogFunc  +
push dword ptr [ebx+4]  +
push eax  +
push dword ptr [ebx+0Ch]  +
call ds:CreateDialogIndirectParamW  +
push 4  +
push eax  +
mov [ebx+1B4h] eax +
call ds:ShowWindow  +
push 1394h  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
push 3  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push eax  +
push dword ptr [ebx+1B4h]  +
call ds:SetWindowPos  +
mov ecx ebx +
call sub_10398B6  +
push 0  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+10h] +
push esi  +
push offset sub_1039967  +
push dword ptr [esi+8]  +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_105DBBC  +
mov [esi+4] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+Msg] +
mov edx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov eax 111h +
mov [ebp+hDlg] ebx +
mov [ebp+lParam] edx +
mov [ebp+hWnd] edi +
cmp ecx eax +
ja loc_103B31C  +
jz loc_103AFFD  +
cmp ecx 47h +
ja loc_103ABEF  +
jz loc_103AB92  +
sub ecx 0Fh +
jz loc_103AB52  +
dec ecx  +
jz loc_103AB47  +
sub ecx 5 +
jz loc_103AA7B  +
sub ecx 5 +
jnz loc_103B436  +
call sub_1026AF2  +
mov edx [esi+134h] +
cmp edx eax +
jz loc_103AB2E  +
mov ecx lpReserved +
mov edi offset dword_100AA70 +
cmp ecx offset lpReserved +
jz loc_103AAD9  +
test byte ptr [ecx+1Ch] 2 +
jz loc_103AABD  +
push eax  +
push edx  +
push edi  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_101E297  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103AAD9  +
test byte ptr [ecx+1Ch] 2 +
jz loc_103AAD9  +
push edi  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1018898  +
mov ecx [esi+1D4h] +
test ecx ecx +
jz loc_103AB0C  +
call sub_10538D3  +
test eax eax +
jnz loc_103AB0C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103AB0C  +
test byte ptr [eax+1Ch] 4 +
jz loc_103AB0C  +
push edi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+1D8h] +
test ecx ecx +
jz loc_103AB2E  +
push dword ptr [esi+1DCh]  +
call sub_103C0DB  +
push 1  +
push 0  +
push dword ptr [esi+4]  +
call ds:InvalidateRect  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+wParam]  +
push [ebp+Msg]  +
push ebx  +
call sub_103987C  +
jmp loc_103B4F3  +
mov [ebp+hWnd] edi +
jmp loc_103B4F3  +
lea eax [ebp+Paint] +
push eax  +
push ebx  +
call ds:BeginPaint  +
push eax  +
mov ecx esi +
mov [ebp+lParam] eax +
call sub_10397D5  +
mov esi [esi+1D4h] +
cmp esi edi +
jz loc_103AB82  +
push [ebp+lParam]  +
mov ecx esi +
call sub_1053848  +
lea eax [ebp+Paint] +
push eax  +
push ebx  +
call ds:EndPaint  +
jmp loc_103B4F3  +
mov edx [esi+1A0h] +
cmp edx edi +
jle loc_103ABD2  +
mov eax [ebp+lParam] +
test byte ptr [eax+18h] 1 +
jnz loc_103ABD2  +
mov ecx [eax+14h] +
mov [esi+1A0h] ecx +
push dword_1065370  +
mov eax ecx +
push offset unk_1065364  +
sub eax edx +
push eax  +
push edi  +
mov ecx esi +
call sub_1052F8E  +
push 1  +
mov ecx esi +
call sub_10399BE  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 47h  +
push ebx  +
push esi  +
call sub_10534BF  +
mov [ebp+hWnd] eax +
jmp loc_103B4F3  +
cmp ecx 4Eh +
jz loc_103AF9C  +
cmp ecx 53h +
jz loc_103AF8A  +
cmp ecx 7Eh +
jz loc_103AA7B  +
cmp ecx 110h +
jnz loc_103B436  +
push 65h  +
mov ecx esi +
mov [esi+4] ebx +
call sub_1052AC9  +
cmp [esi+20h] edi +
jz loc_103AF83  +
cmp [esi+28h] edi +
jz loc_103AF83  +
push 4  +
push 2  +
push edi  +
mov ecx esi +
call sub_1052B2B  +
push ebx  +
call ds:SetForegroundWindow  +
push 0FFFFFFF0h  +
push ebx  +
call ds:GetWindowLongW  +
and eax 0FFFEFFFFh +
push eax  +
push 0FFFFFFF0h  +
push ebx  +
call ds:SetWindowLongW  +
mov eax [esi+28h] +
mov [eax+44h] ebx +
call sub_1026AF2  +
mov [esi+134h] eax +
call sub_102736E  +
mov [esi+138h] eax +
mov ecx esi +
cmp eax 78h +
jnb loc_103ACAD  +
lea eax [esi+1ECh] +
push eax  +
lea eax [esi+1E8h] +
push eax  +
lea eax [esi+1F0h] +
push eax  +
push 2ACh  +
call sub_10395DF  +
mov [ebp+hWnd] 271h +
jmp loc_103ACF3  +
cmp eax 90h +
lea eax [esi+1ECh] +
push eax  +
lea eax [esi+1E8h] +
push eax  +
lea eax [esi+1F0h] +
push eax  +
jnb loc_103ACDF  +
push 2ADh  +
call sub_10395DF  +
mov [ebp+hWnd] 273h +
jmp loc_103ACF3  +
push 2AEh  +
call sub_10395DF  +
mov [ebp+hWnd] 275h +
push ebx  +
mov ecx esi +
call sub_1039D6A  +
mov eax [esi+1D8h] +
xor edi edi +
mov [ebp+lParam] edi +
test eax eax +
jz loc_103AD19  +
mov edi [eax+14h] +
mov eax [eax+0Ch] +
mov [ebp+lParam] eax +
push 34h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103AD3F  +
push [ebp+lParam]  +
mov ecx eax +
push [ebp+hWnd]  +
push edi  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_10537D9  +
jmp loc_103AD41  +
xor eax eax +
mov [esi+1D4h] eax +
test eax eax +
jz loc_103AD92  +
mov ecx eax +
call sub_1053592  +
test eax eax +
jnz loc_103AD92  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103AD7A  +
test byte ptr [eax+1Ch] 4 +
jz loc_103AD7A  +
push offset dword_100AA70  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+1D4h] +
test ecx ecx +
jz loc_103AD8B  +
push 1  +
call sub_1022CB4  +
and dword ptr [esi+1D4h] 0 +
mov ecx esi +
call sub_103972C  +
mov edi ds:GetDlgItem +
mov ebx 1394h +
push ebx  +
push [ebp+hDlg]  +
call edi  +
push eax  +
push dword ptr [esi+24h]  +
mov [ebp+hWnd] eax +
call sub_1026EEB  +
mov eax [esi+24h] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
push [ebp+hWnd]  +
call ds:SetWindowTextW  +
push 3AA5h  +
push [ebp+hWnd]  +
push dword ptr [esi+0Ch]  +
call sub_105DD8E  +
test eax eax +
jz loc_103AE12  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103AE12  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103AE12  +
push eax  +
push offset dword_100AA70  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push ebx  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:SetFocus  +
push [ebp+hDlg]  +
call ds:SetForegroundWindow  +
push 40h  +
lea eax [esi+34h] +
push eax  +
mov ebx 42Eh +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_103AE71  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103AE6B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103AE6B  +
push ebx  +
push offset dword_100AA70  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
mov [esi+34h] ax +
push 40h  +
lea eax [esi+0B4h] +
push eax  +
mov ebx 42Fh +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_103AEBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103AEB1  +
test byte ptr [eax+1Ch] 4 +
jz loc_103AEB1  +
push ebx  +
push offset dword_100AA70  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
mov [esi+0B4h] ax +
cmp dword ptr [esi+2Ch] 0 +
lea eax [esi+0B4h] +
jnz loc_103AEC9  +
lea eax [esi+34h] +
push eax  +
push 1396h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SetWindowTextW  +
push 0  +
push dword_1065384  +
mov ebx offset unk_1065380 +
push ebx  +
mov ecx esi +
call sub_1053016  +
push 0  +
push dword_1065384  +
mov ecx esi +
push ebx  +
call sub_105305A  +
mov ecx esi +
call sub_103A238  +
mov ecx esi +
call sub_103A8DD  +
mov ecx esi +
call sub_1039ACA  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hDlg]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
cmp dword ptr [esi+198h] 0 +
mov [esi+1A0h] eax +
jz loc_103AF74  +
push 1  +
mov ecx esi +
call sub_103A150  +
push 0  +
push dword ptr [esi+1A4h]  +
push 130Ch  +
push 1397h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:SendMessageW  +
mov ecx esi +
call sub_1039683  +
mov [ebp+hWnd] 1 +
jmp loc_103B4F3  +
xor eax eax +
jmp loc_103B4F9  +
push edi  +
push edi  +
push offset aHelp_entry_id_  +
push offset aMshelpWindows?  +
push ebx  +
jmp loc_103B30F  +
cmp edx edi +
jz loc_103B4F3  +
cmp dword ptr [edx+8] 0FFFFFDD9h +
jnz loc_103B4F3  +
push 1397h  +
push ebx  +
call ds:GetDlgItem  +
mov ebx eax +
call ds:GetFocus  +
mov edi eax +
sub edi ebx +
neg edi  +
sbb edi edi +
mov ecx esi +
inc edi  +
call sub_1039683  +
test edi edi +
jz loc_103AFE0  +
push ebx  +
call ds:SetFocus  +
push 0  +
push 10002h  +
push 127h  +
push dword ptr [esi+14Ch]  +
call ds:SendMessageW  +
jmp loc_103B4F3  +
movzx ecx word ptr [ebp+wParam] +
mov ebx 1394h +
cmp ecx ebx +
jg loc_103B28D  +
jz loc_103B246  +
cmp ecx 1 +
jz loc_103B0DD  +
cmp ecx 2 +
jz loc_103B0B1  +
add ecx 0FFFFF439h +
cmp ecx 1 +
ja loc_103B29D  +
cmp [esi+2Ch] edi +
jz loc_103B4F3  +
cmp [esi+1A8h] edi +
jnz loc_103B4F3  +
mov ebx ds:GetDlgItem +
push 0  +
push 0  +
push 130Bh  +
push 1397h  +
push dword ptr [esi+4]  +
call ebx  +
mov edi ds:SendMessageW +
push eax  +
call edi  +
xor edx edx +
mov ecx 0BC7h +
cmp word ptr [ebp+wParam] cx +
setz dl  +
lea edx [edx+edx-1] +
add eax edx +
cmp eax 6 +
jl loc_103B089  +
xor eax eax +
jmp loc_103B090  +
test eax eax +
jge loc_103B090  +
push 5  +
pop eax  +
push 0  +
push eax  +
push 130Ch  +
push 1397h  +
push dword ptr [esi+4]  +
call ebx  +
push eax  +
call edi  +
mov ecx esi +
call sub_1039683  +
jmp loc_103B4F3  +
mov ecx esi +
call sub_1039F27  +
push 2  +
push [ebp+hDlg]  +
call ds:EndDialog  +
mov eax [esi+28h] +
push 0  +
push 0  +
push 10h  +
push dword ptr [eax+4]  +
call ds:PostMessageW  +
jmp loc_103B4F3  +
xor edi edi +
cmp [esi+2Ch] edi +
jz loc_103B101  +
mov eax [esi+14Ch] +
cmp eax edi +
jz loc_103B0FC  +
push edi  +
push edi  +
push 41Eh  +
push eax  +
call ds:SendMessageW  +
cmp [esi+2Ch] edi +
jnz loc_103B108  +
mov ecx esi +
call sub_1039F27  +
mov eax [esi+24h] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
push 100h  +
lea eax [ebp+var_244] +
push eax  +
call sub_101BD65  +
cmp eax edi +
jge loc_103B155  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103B155  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103B155  +
push eax  +
push offset aStringcchcopyF  +
push offset dword_100AA70  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx [esi+20h] +
lea eax [ebp+var_244] +
push eax  +
call sub_102693A  +
lea eax [ebp+var_244] +
push eax  +
call sub_105B179  +
test eax eax +
jnz loc_103B1F2  +
mov eax [esi+24h] +
push dword ptr [eax+135Ch]  +
push 4CBh  +
push [ebp+hDlg]  +
call sub_105B0B4  +
cmp [esi+2Ch] edi +
jz loc_103B19F  +
push 32FAh  +
push dword ptr [esi+14Ch]  +
jmp loc_103B1A6  +
push ebx  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
mov esi eax +
cmp esi edi +
jz loc_103B4F3  +
push offset word_1002174  +
push esi  +
call ds:SetWindowTextW  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103B1E6  +
test byte ptr [eax+1Ch] 1 +
jz loc_103B1E6  +
push offset dword_100AA70  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push esi  +
call ds:SetFocus  +
jmp loc_103B4F3  +
mov ecx [esi+24h] +
lea eax [ebp+var_244] +
push eax  +
add ecx 54h +
call sub_105B15D  +
mov ecx esi +
call sub_103A6E7  +
mov ecx [esi+28h] +
call sub_1020918  +
test eax eax +
jnz loc_103B4F3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103B23F  +
test byte ptr [eax+1Ch] 4 +
jz loc_103B23F  +
push offset dword_100AA70  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 0  +
jmp loc_103B415  +
mov eax [ebp+wParam] +
shr eax 10h +
cmp ax 1 +
jnz loc_103B277  +
mov eax [esi+24h] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
push dword ptr [esi+0Ch]  +
push [ebp+hDlg]  +
push [ebp+lParam]  +
call sub_10269E0  +
jmp loc_103B4F3  +
cmp ax 5 +
jnz loc_103B4F3  +
mov ecx esi +
call sub_10398B6  +
jmp loc_103B4F3  +
sub ecx 1395h +
jz loc_103B2CE  +
dec ecx  +
jz loc_103B2B6  +
sub ecx 4 +
jz loc_103B2B6  +
mov esi [esi+14Ch] +
test esi esi +
jz loc_103B4F3  +
push edx  +
push [ebp+wParam]  +
push eax  +
push esi  +
jmp loc_103AFF2  +
push 0  +
mov ecx esi +
call sub_103A150  +
mov dword ptr [esi+1B8h] 1 +
jmp loc_103B4F3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103B2F2  +
test byte ptr [eax+1Ch] 2 +
jz loc_103B2F2  +
push offset dword_100AA70  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+28h] +
mov eax [eax+4] +
test eax eax +
jz loc_103B4F3  +
push 0  +
push 0  +
push offset aHelp_entry_id_  +
push offset aMshelpWindows?  +
push eax  +
mov ecx [esi+20h] +
call sub_102817E  +
jmp loc_103B4F3  +
cmp ecx 421h +
ja loc_103B421  +
mov eax 420h +
cmp ecx eax +
jnb loc_103B400  +
sub ecx 112h +
jz loc_103B3B9  +
dec ecx  +
jz loc_103B39C  +
sub ecx 1FCh +
jz loc_103B36A  +
dec ecx  +
dec ecx  +
jnz loc_103B436  +
mov esi [esi+1D8h] +
cmp esi edi +
jz loc_103B4F3  +
push [ebp+wParam]  +
mov ecx esi +
call sub_103BABD  +
jmp loc_103B37F  +
mov esi [esi+1D8h] +
cmp esi edi +
jz loc_103B4F3  +
mov ecx esi +
call sub_103BA4C  +
push 1  +
push 0  +
push ebx  +
mov [ebp+hWnd] eax +
call ds:InvalidateRect  +
push ebx  +
call ds:UpdateWindow  +
jmp loc_103B4F3  +
mov esi [esi+1D4h] +
cmp esi edi +
jz loc_103B4F3  +
push [ebp+wParam]  +
mov ecx esi +
call sub_1053867  +
jmp loc_103B4F3  +
push 6Dh  +
pop eax  +
cmp ax word ptr [ebp+wParam] +
jnz loc_103B4F3  +
mov eax [esi+20h] +
lea ecx [eax+650h] +
push ecx  +
push dword ptr [eax+64Ch]  +
lea ecx [ebp+var_268] +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_10285D3  +
lea ecx [ebp+var_268] +
call sub_105340F  +
lea ecx [ebp+var_268] +
call sub_1028597  +
jmp loc_103B4F3  +
cmp [esi+1A8h] edi +
jz loc_103B4F3  +
xor ecx ecx +
cmp [ebp+Msg] eax +
setz cl  +
push ecx  +
mov ecx esi +
call sub_103A74C  +
jmp loc_103B4F3  +
sub ecx 423h +
jz loc_103B49A  +
sub ecx 4 +
jz loc_103B489  +
sub ecx 7CDBh +
jz loc_103B442  +
push edx  +
push [ebp+wParam]  +
push [ebp+Msg]  +
jmp loc_103ABDD  +
push edi  +
mov ecx esi +
call sub_1039834  +
push dword ptr [esi+28h]  +
lea ecx [ebp+var_28C] +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_1028CE8  +
mov eax [ebp+wParam] +
mov [ebp+var_288] eax +
mov eax [ebp+lParam] +
lea ecx [ebp+var_28C] +
mov [ebp+Rect.bottom] eax +
call sub_1029213  +
lea ecx [ebp+var_28C] +
call sub_1028D18  +
jmp loc_103B4F3  +
cmp [esi+2Ch] edi +
jz loc_103B495  +
mov ecx esi +
call sub_1039FCB  +
mov [esi+30h] edi +
jmp loc_103B4F3  +
push 1394h  +
push ebx  +
call ds:GetDlgItem  +
mov [ebp+lParam] eax +
mov eax [esi+24h] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
push [ebp+lParam]  +
call ds:SetWindowTextW  +
cmp [esi+2Ch] edi +
jz loc_103B4E1  +
mov esi [esi+14Ch] +
cmp esi edi +
jz loc_103B4E1  +
push edi  +
push edi  +
push 423h  +
push esi  +
call ds:SendMessageW  +
push 1  +
push 1  +
push 0F4h  +
push 1  +
push ebx  +
call ds:SendDlgItemMessageW  +
mov eax [ebp+hWnd] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 3A99h  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1052A87  +
mov eax [ebp+arg_8] +
push [ebp+arg_10]  +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_100AAEC +
mov [esi+20h] eax +
call sub_101CEE0  +
mov eax [ebp+arg_C] +
mov [esi+28h] eax +
mov eax [ebp+arg_14] +
mov [esi+198h] eax +
mov eax [ebp+arg_18] +
mov [esi+1A4h] eax +
xor eax eax +
mov ecx esi +
mov [esi+1B8h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov [esi+1BCh] eax +
mov [esi+1C4h] eax +
mov [esi+1C0h] eax +
mov [esi+1C8h] eax +
mov [esi+1CCh] eax +
mov [esi+1D0h] eax +
mov [esi+134h] eax +
mov [esi+138h] eax +
mov [esi+1ACh] eax +
mov [esi+1D4h] eax +
mov [esi+1D8h] eax +
mov [esi+1DCh] eax +
mov [esi+1B0h] eax +
mov [esi+1B4h] eax +
mov [esi+1E0h] eax +
mov [esi+1E4h] eax +
mov [esi+1F0h] eax +
mov [esi+1E8h] eax +
mov [esi+1ECh] eax +
mov [esi+19Ch] eax +
mov [esi+1A0h] eax +
mov [esi+1A8h] eax +
call sub_103A804  +
mov eax esi +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
xor ebx ebx +
lea ecx [esi+24h] +
push ebx  +
mov dword ptr [esi] offset off_100AAEC +
call sub_101C97A  +
lea edi [esi+1BCh] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B626  +
push 1  +
call sub_103953E  +
mov [edi] ebx +
lea edi [esi+1C4h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B63B  +
push 1  +
call sub_1039564  +
mov [edi] ebx +
lea edi [esi+1C0h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B650  +
push 1  +
call sub_1039564  +
mov [edi] ebx +
lea edi [esi+1C8h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B665  +
push 1  +
call sub_1039564  +
mov [edi] ebx +
lea edi [esi+1CCh] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B67A  +
push 1  +
call sub_1039564  +
mov [edi] ebx +
lea edi [esi+1D0h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B68F  +
push 1  +
call sub_1039564  +
mov [edi] ebx +
lea edi [esi+1D4h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B6A6  +
push 1  +
call sub_1022CB4  +
mov [edi] ebx +
lea edi [esi+1B0h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_103B6BB  +
push 1  +
call sub_1036117  +
mov [edi] ebx +
lea edi [esi+1E4h] +
mov eax [edi] +
cmp eax ebx +
jz loc_103B6D0  +
push eax  +
call ds:ImageList_Destroy  +
mov [edi] ebx +
mov ecx esi +
call sub_103964B  +
mov eax [esi+24h] +
cmp eax ebx +
jz loc_103B6E7  +
push eax  +
mov [esi+24h] ebx +
call sub_1018A83  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp sub_1052ABD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103B5FB  +
test byte ptr [ebp+8] 1 +
jz loc_103B710  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_100AB14 +
retn   +
***
mov dword ptr [ecx] offset off_100AB14 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100AB14 +
jz loc_103B755  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_103B78B  +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 10h  +
***
pop ebp  +
jmp ds:DefWindowProcW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hInstance] +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
cmp eax edi +
jz loc_103B906  +
cmp [ebp+lpClassName] edi +
jz loc_103B906  +
mov esi [ebp+arg_14] +
cmp esi edi +
jz loc_103B906  +
mov [ebx+8] eax +
mov [ebp+var_30.hInstance] eax +
mov eax [ebp+arg_18] +
push 7F00h  +
push edi  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] edi +
mov [ebp+var_30.lpfnWndProc] offset loc_103B761 +
mov [ebp+var_30.cbClsExtra] edi +
mov [ebp+var_30.cbWndExtra] edi +
mov [ebp+var_30.hIcon] eax +
call ds:LoadCursorW  +
mov [ebp+var_30.hCursor] eax +
mov eax [ebp+lpClassName] +
mov [ebp+var_30.lpszClassName] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.hbrBackground] edi +
mov [ebp+var_30.lpszMenuName] edi +
mov [ebp+var_30.hIconSm] edi +
call ds:RegisterClassExW  +
xor ecx ecx +
cmp cx ax +
jnz loc_103B861  +
call ds:GetLastError  +
cmp eax 582h +
jz loc_103B861  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103B906  +
test byte ptr [eax+1Ch] 4 +
jz loc_103B906  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100AB04  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_103B906  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push ebx  +
push [ebp+hInstance]  +
push edi  +
push [ebp+hWndParent]  +
push eax  +
mov eax [esi+8] +
sub eax [esi] +
push eax  +
push edi  +
push edi  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push [ebp+lpClassName]  +
push edi  +
call ds:CreateWindowExW  +
mov [ebx+4] eax +
cmp eax edi +
jz loc_103B8D6  +
push edi  +
call ds:SetLastError  +
mov eax [ebx+4] +
push ebx  +
push 0FFFFFFEBh  +
push eax  +
call ds:SetWindowLongW  +
test eax eax +
jnz loc_103B8D1  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jz loc_103B8D1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103B906  +
test byte ptr [eax+1Ch] 4 +
jz loc_103B906  +
call esi  +
push eax  +
push offset dword_100AB04  +
push 0Bh  +
jmp loc_103B8F6  +
mov eax [ebx+4] +
jmp loc_103B908  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103B906  +
test byte ptr [eax+1Ch] 4 +
jz loc_103B906  +
call ds:GetLastError  +
push eax  +
push offset dword_100AB04  +
push 0Ch  +
mov eax lpReserved +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
mov eax [ebp+arg_4] +
mov [ecx+8] eax +
xor eax eax +
mov [ecx+0Ch] eax +
mov [ecx+28h] eax +
mov [ecx+2Ch] eax +
mov eax [ebp+arg_C] +
push edi  +
mov [ecx+30h] eax +
xor eax eax +
mov dword ptr [ecx] offset off_100AB3C +
lea edi [ecx+10h] +
stos   +
stos   +
mov eax [ebp+arg_8] +
mov [ecx+24h] eax +
pop edi  +
cmp eax 60h +
jz loc_103B9BB  +
cmp eax 78h +
jz loc_103B9A4  +
mov dword ptr [ecx+18h] 2A9h +
mov dword ptr [ecx+1Ch] 2AAh +
mov dword ptr [ecx+20h] 2ABh +
jmp loc_103B9D0  +
mov dword ptr [ecx+18h] 2A6h +
mov dword ptr [ecx+1Ch] 2A7h +
mov dword ptr [ecx+20h] 2A8h +
jmp loc_103B9D0  +
mov dword ptr [ecx+18h] 2A3h +
mov dword ptr [ecx+1Ch] 2A4h +
mov dword ptr [ecx+20h] 2A5h +
mov eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
push edi  +
mov edi ds:DeleteObject +
mov dword ptr [esi] offset off_100AB3C +
test eax eax +
jz loc_103B9FB  +
push eax  +
call edi  +
and dword ptr [esi+28h] 0 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_103BA09  +
push eax  +
call edi  +
and dword ptr [esi+0Ch] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+24h] +
cmp eax 78h +
jb loc_103BA40  +
cmp eax 90h +
mov eax [ebp+arg_0] +
jnb loc_103BA36  +
imul eax eax +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
jmp loc_103BA43  +
imul eax eax +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_103BA43  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_103BA5F  +
xor eax eax +
jmp loc_103BAB5  +
push ebx  +
push dword ptr [esi+4]  +
call ds:GetDC  +
mov ebx eax +
test ebx ebx +
jz loc_103BAB4  +
push edi  +
mov edi ds:SelectPalette +
push 0  +
push dword ptr [esi+0Ch]  +
push ebx  +
call edi  +
push ebx  +
mov [ebp+var_4] eax +
call ds:RealizePalette  +
push ebx  +
call ds:UpdateColors  +
push dword ptr [esi+4]  +
call ds:UpdateWindow  +
cmp [ebp+var_4] 0 +
jz loc_103BAA6  +
push 0  +
push [ebp+var_4]  +
push ebx  +
call edi  +
push ebx  +
push dword ptr [esi+4]  +
call ds:ReleaseDC  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+0Ch] 0 +
jz loc_103BB1B  +
mov eax [edi+4] +
push ebx  +
cmp eax [ebp+arg_0] +
jz loc_103BB1A  +
push eax  +
call ds:GetDC  +
mov ebx eax +
test ebx ebx +
jz loc_103BB1A  +
push esi  +
mov esi ds:SelectPalette +
push 0  +
push dword ptr [edi+0Ch]  +
push ebx  +
call esi  +
push ebx  +
mov [ebp+arg_0] eax +
call ds:RealizePalette  +
push ebx  +
call ds:UpdateColors  +
cmp [ebp+arg_0] 0 +
jz loc_103BB0F  +
push 0  +
push [ebp+arg_0]  +
push ebx  +
call esi  +
push ebx  +
push dword ptr [edi+4]  +
call ds:ReleaseDC  +
pop esi  +
pop ebx  +
xor eax eax +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreateCompatibleDC  +
mov edi eax +
test edi edi +
jz loc_103BB6D  +
push dword ptr [esi+28h]  +
push edi  +
call ds:SelectObject  +
push 0CC0020h  +
push 0  +
push 0  +
push edi  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call ds:BitBlt  +
push edi  +
call ds:DeleteDC  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103B9DB  +
test byte ptr [ebp+8] 1 +
jz loc_103BB92  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 0Ah  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
mov edi ecx +
push dword ptr [edi+8]  +
call sub_105DD36  +
test eax eax +
jz loc_103BBD9  +
lea eax [ebp+Buffer] +
push eax  +
call ds:__imp__wtol  +
pop ecx  +
jmp loc_103BBDC  +
push 28h  +
pop eax  +
neg eax  +
push eax  +
mov ecx edi +
mov [esi] eax +
call sub_103BA11  +
mov ecx [ebp+var_4] +
pop edi  +
mov [esi] eax +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 20h  +
add esi 1Ch +
push esi  +
push [ebp+uID]  +
push dword ptr [ecx+8]  +
call sub_105DD36  +
test eax eax +
jnz loc_103BC4E  +
push offset aTahoma  +
push 20h  +
push esi  +
call sub_101BD65  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103BC4E  +
test byte ptr [eax+1Ch] 4 +
jz loc_103BC4E  +
push offset dword_100AB2C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push 58h  +
lea eax [ebp-5Ch] +
push ebx  +
push eax  +
mov esi ecx +
mov [ebp+var_60] ebx +
call memset  +
mov eax [ebp+arg_8] +
add esp 0Ch +
neg eax  +
sbb eax eax +
and eax 1F4h +
add eax 190h +
mov [ebp-50h] eax +
push 2  +
lea eax [ebp+var_80] +
push eax  +
mov [ebp-5Ch] ebx +
mov [ebp-48h] bl +
mov [ebp-47h] bl +
mov [ebp-46h] bl +
mov [ebp-45h] bl +
call ds:GetACP  +
push eax  +
call ds:TranslateCharsetInfo  +
test eax eax +
jnz loc_103BCC2  +
mov [ebp+var_80] ebx +
mov al byte ptr [ebp+var_80] +
push [ebp+arg_0]  +
mov [ebp-49h] al +
lea eax [ebp+var_60] +
push eax  +
mov ecx esi +
call sub_103BBFF  +
push [ebp+uID]  +
lea eax [ebp+var_60] +
push eax  +
mov ecx esi +
call sub_103BB9E  +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 274h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push edi  +
mov edi [ebp+arg_4] +
mov ebx ecx +
mov [ebp+var_248] eax +
mov [ebp+var_240] eax +
mov [ebp+var_254] eax +
mov eax [ebx+4] +
push 0FFFFFFECh  +
push eax  +
call ds:GetWindowLongW  +
test eax 400000h +
jz loc_103BD7A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103BD6E  +
test byte ptr [eax+1Ch] 2 +
jz loc_103BD6E  +
push offset dword_100AB2C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+uFormat] 2 +
jmp loc_103BD81  +
and [ebp+uFormat] 0 +
or [ebp+uFormat] 8000h +
push 14h  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [edi+0Ch]  +
push dword ptr [ebx+8]  +
call sub_105DD36  +
test eax eax +
jz loc_103BDB3  +
lea eax [ebp+Buffer] +
push eax  +
call ds:__imp__wtol  +
pop ecx  +
mov [ebp+var_24C] eax +
jmp loc_103BDE1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103BDD7  +
test byte ptr [eax+1Ch] 4 +
jz loc_103BDD7  +
push offset dword_100AB2C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_24C] 5 +
push 0  +
call ds:CreateCompatibleDC  +
mov [ebp+hDC] eax +
test eax eax +
jz loc_103C086  +
push esi  +
push eax  +
call ds:SelectObject  +
push 993300h  +
push [ebp+hDC]  +
mov [ebp+var_250] eax +
call ds:SetTextColor  +
push 1  +
push [ebp+hDC]  +
call ds:SetBkMode  +
push 1  +
push [ebp+hDC]  +
call ds:SetMapMode  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
mov eax [ebx+10h] +
cmp eax [ebp+Rect.right] +
jl loc_103BE53  +
mov eax [ebp+Rect.right] +
sub eax [edi+8] +
push dword ptr [edi+4]  +
mov ecx ebx +
mov [ebp+var_25C] eax +
call sub_103BA11  +
and [ebp+var_23C] 0 +
cmp dword ptr [edi+10h] 0 +
mov [ebp+var_260] eax +
mov eax [edi] +
mov [ebp+var_258] 64h +
mov [ebp+var_264] eax +
jbe loc_103C00C  +
mov eax [ebp+var_23C] +
imul eax eax +
lea esi [eax+edi] +
mov eax [esi+14h] +
test eax eax +
jz loc_103BEDE  +
push eax  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_103BEFD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103BEFD  +
test byte ptr [eax+1Ch] 4 +
jz loc_103BEFD  +
push offset dword_100AB2C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103BEFD  +
push 104h  +
lea eax [ebp+String] +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [ebx+8]  +
call sub_105DD36  +
test eax eax +
jz loc_103C03F  +
cmp [ebp+var_240] 0 +
jz loc_103BF12  +
push [ebp+var_240]  +
call ds:DeleteObject  +
push dword ptr [esi+24h]  +
mov ecx ebx +
push dword ptr [esi+20h]  +
push dword ptr [esi+1Ch]  +
call sub_103BC58  +
mov [ebp+var_240] eax +
test eax eax +
jz loc_103C05A  +
cmp [ebp+var_23C] 0 +
push eax  +
push [ebp+hDC]  +
jnz loc_103BF4E  +
call ds:SelectObject  +
mov [ebp+var_248] eax +
jmp loc_103BF54  +
call ds:SelectObject  +
lea eax [ebp+String] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_103BF5D  +
push [ebp+uFormat]  +
sub eax edx +
lea ecx [ebp+var_264] +
push ecx  +
sar eax 1 +
push eax  +
lea eax [ebp+String] +
push eax  +
push [ebp+hDC]  +
call ds:DrawTextW  +
mov esi eax +
test esi esi +
jnz loc_103BFC2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103BFC2  +
test byte ptr [eax+1Ch] 4 +
jz loc_103BFC2  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100AB2C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax esi +
sub eax [ebp+var_24C] +
sub esi [ebp+var_24C] +
add [ebp+var_260] eax +
add [ebp+var_258] esi +
inc [ebp+var_23C]  +
mov eax [ebp+var_23C] +
cmp eax [edi+10h] +
jb loc_103BE8F  +
cmp [ebp+var_248] 0 +
jz loc_103C00C  +
push [ebp+var_248]  +
push [ebp+hDC]  +
call ds:SelectObject  +
cmp [ebp+var_250] 0 +
jz loc_103C027  +
push [ebp+var_250]  +
push [ebp+hDC]  +
call ds:SelectObject  +
push [ebp+hDC]  +
call ds:DeleteDC  +
mov [ebp+var_254] 1 +
jmp loc_103C0AA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C0AA  +
test byte ptr [eax+1Ch] 4 +
jz loc_103C0AA  +
push offset dword_100AB2C  +
push 14h  +
jmp loc_103C09F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C0AA  +
test byte ptr [eax+1Ch] 4 +
jz loc_103C0AA  +
push [ebp+var_23C]  +
push offset dword_100AB2C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_103C0AA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C0BF  +
test byte ptr [eax+1Ch] 4 +
jz loc_103C0BF  +
push offset dword_100AB2C  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+var_240] 0 +
jz loc_103C0BF  +
push [ebp+var_240]  +
call ds:DeleteObject  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_254] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B4h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
xor eax eax +
lea edi [ebp+var_48] +
mov [ebp+var_4C] esi +
stos   +
lea edi [ebp+var_28] +
mov [ebp+var_2C] esi +
stos   +
mov ebx ecx +
lea edi [ebp+var_30] +
mov [ebp+var_34] esi +
stos   +
mov eax [ebx+1Ch] +
mov edi [ebx+18h] +
mov [ebp+var_14] eax +
mov eax [ebx+20h] +
mov [ebp+var_44] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_20] esi +
mov [ebp+var_24] esi +
mov [ebp+var_3C] 1 +
mov [ebp+hdc] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C151  +
test byte ptr [eax+1Ch] 2 +
jz loc_103C151  +
push [ebp+hdc]  +
push [ebp+var_14]  +
push edi  +
push offset dword_100AB2C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_103B914  +
mov eax [ebx+4] +
push 0FFFFFFECh  +
push eax  +
call ds:GetWindowLongW  +
test eax 400000h +
jz loc_103C190  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C188  +
test byte ptr [eax+1Ch] 2 +
jz loc_103C188  +
push offset dword_100AB2C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax edi +
mov edi [ebp+hdc] +
mov [ebp+hdc] eax +
cmp edi esi +
jz loc_103C1F6  +
push 2000h  +
push esi  +
push esi  +
movzx eax di +
push esi  +
push eax  +
push dword ptr [ebx+8]  +
call ds:LoadImageW  +
mov [ebp+var_20] eax +
cmp eax esi +
jz loc_103C1F6  +
push 50h  +
lea eax [ebp+var_B0] +
push esi  +
push eax  +
mov [ebp+var_B4] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_B4] +
push eax  +
push 54h  +
push [ebp+var_20]  +
call ds:GetObjectW  +
test eax eax +
jz loc_103C1F6  +
mov eax [ebp+var_AC] +
cmp eax esi +
jge loc_103C1EA  +
neg eax  +
mov [ebp+var_28] eax +
mov eax [ebp+var_B0] +
mov [ebp+var_2C] eax +
cmp [ebp+var_14] esi +
jz loc_103C260  +
movzx eax word ptr [ebp+var_14] +
push 2000h  +
push esi  +
push esi  +
push esi  +
push eax  +
push dword ptr [ebx+8]  +
call ds:LoadImageW  +
mov [ebp+var_24] eax +
cmp eax esi +
jz loc_103C260  +
push 50h  +
lea eax [ebp+var_B0] +
push esi  +
push eax  +
mov [ebp+var_B4] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_B4] +
push eax  +
push 54h  +
push [ebp+var_24]  +
call ds:GetObjectW  +
test eax eax +
jz loc_103C260  +
mov edi [ebp+var_AC] +
cmp edi esi +
jge loc_103C252  +
neg edi  +
mov eax [ebp+var_B0] +
mov [ebp+var_30] edi +
mov [ebp+var_34] eax +
jmp loc_103C263  +
mov edi [ebp+var_30] +
cmp [ebp+hdc] esi +
jz loc_103C2CA  +
movzx eax word ptr [ebp+hdc] +
push 2000h  +
push esi  +
push esi  +
push esi  +
push eax  +
push dword ptr [ebx+8]  +
call ds:LoadImageW  +
mov [ebp+var_1C] eax +
cmp eax esi +
jz loc_103C2CA  +
push 50h  +
lea eax [ebp+var_B0] +
push esi  +
push eax  +
mov [ebp+var_B4] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_B4] +
push eax  +
push 54h  +
push [ebp+var_1C]  +
call ds:GetObjectW  +
test eax eax +
jz loc_103C2CA  +
mov eax [ebp+var_AC] +
cmp eax esi +
jge loc_103C2BF  +
neg eax  +
mov ecx [ebp+var_B0] +
mov [ebp+var_4C] ecx +
jmp loc_103C2CD  +
mov eax [ebp+var_48] +
cmp edi eax +
mov ecx edi +
jg loc_103C2D5  +
mov ecx eax +
mov edx [ebp+var_28] +
cmp edx ecx +
jle loc_103C2E1  +
mov [ebp+var_10] edx +
jmp loc_103C2EB  +
cmp edi eax +
mov [ebp+var_10] edi +
jg loc_103C2EB  +
mov [ebp+var_10] eax +
mov eax [ebp+var_2C] +
mov ecx [ebp+var_34] +
add ecx eax +
mov eax [ebp+var_4C] +
add ecx eax +
mov [ebx+2Ch] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C320  +
test byte ptr [eax+1Ch] 2 +
jz loc_103C320  +
push ecx  +
push offset dword_100AB2C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
mov esi [ebp+Rect.right] +
sub esi [ebp+Rect.left] +
mov edi ds:DeleteObject +
inc esi  +
mov [ebp+var_14] esi +
jnz loc_103C365  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C65B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103C65B  +
push offset dword_100AB2C  +
push 0Dh  +
jmp loc_103C650  +
cmp [ebp+var_10] 0 +
jz loc_103C637  +
push dword ptr [ebx+4]  +
call ds:GetWindowDC  +
mov [ebp+hDC] eax +
test eax eax +
jz loc_103C573  +
push [ebp+var_10]  +
push esi  +
push eax  +
call ds:CreateCompatibleBitmap  +
push [ebp+hDC]  +
mov edi ds:CreateCompatibleDC +
mov [ebp+var_44] eax +
call edi  +
push [ebp+hDC]  +
mov [ebp+var_8] eax +
call edi  +
cmp [ebp+var_8] 0 +
mov [ebp+hdc] eax +
jz loc_103C55F  +
xor edi edi +
cmp eax edi +
jz loc_103C55F  +
mov eax [ebp+var_20] +
mov [ebp+var_40] edi +
mov [ebp+var_38] edi +
cmp eax edi +
jnz loc_103C3CB  +
mov eax [ebp+var_1C] +
push eax  +
push [ebp+hDC]  +
call sub_1050E1E  +
mov esi ds:SelectPalette +
mov [ebx+0Ch] eax +
cmp eax edi +
jz loc_103C400  +
push edi  +
push eax  +
push [ebp+hDC]  +
call esi  +
push edi  +
push dword ptr [ebx+0Ch]  +
mov [ebp+var_40] eax +
push [ebp+hdc]  +
call esi  +
push [ebp+hDC]  +
mov [ebp+var_38] eax +
call ds:RealizePalette  +
push [ebp+var_44]  +
mov esi ds:SelectObject +
push [ebp+hdc]  +
call esi  +
cmp [ebp+var_20] 0 +
mov [ebp+var_50] eax +
mov edi 0CC0020h +
jz loc_103C44E  +
push [ebp+var_20]  +
push [ebp+var_8]  +
call esi  +
push edi  +
mov [ebp+xLeft] eax +
xor eax eax +
push eax  +
push eax  +
push [ebp+var_8]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push eax  +
push eax  +
push [ebp+hdc]  +
call ds:BitBlt  +
cmp [ebp+xLeft] 0 +
jz loc_103C44E  +
push [ebp+xLeft]  +
push [ebp+var_8]  +
call esi  +
cmp [ebp+var_24] 0 +
jz loc_103C495  +
push [ebp+var_24]  +
push [ebp+var_8]  +
call esi  +
mov ecx [ebp+var_14] +
sub ecx [ebp+var_2C] +
push edi  +
push [ebp+var_30]  +
sub ecx [ebp+var_4C] +
push [ebp+var_34]  +
mov [ebp+xLeft] eax +
xor eax eax +
push eax  +
push eax  +
push [ebp+var_8]  +
push [ebp+var_30]  +
push ecx  +
push eax  +
push [ebp+var_2C]  +
push [ebp+hdc]  +
call ds:StretchBlt  +
cmp [ebp+xLeft] 0 +
jz loc_103C495  +
push [ebp+xLeft]  +
push [ebp+var_8]  +
call esi  +
cmp [ebp+var_1C] 0 +
jz loc_103C4D2  +
push [ebp+var_1C]  +
push [ebp+var_8]  +
call esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push [ebp+var_8]  +
mov [ebp+xLeft] eax +
push [ebp+var_10]  +
mov eax [ebp+var_14] +
push [ebp+var_14]  +
sub eax [ebp+var_4C] +
push edi  +
push eax  +
push [ebp+hdc]  +
call ds:BitBlt  +
cmp [ebp+xLeft] edi +
jz loc_103C4D2  +
push [ebp+xLeft]  +
push [ebp+var_8]  +
call esi  +
cmp dword ptr [ebx+30h] 0 +
jz loc_103C516  +
mov edi ds:GetSystemMetrics +
push 0Ch  +
call edi  +
cdq   +
sub eax edx +
sar eax 1 +
push 0Ch  +
mov [ebp+xLeft] eax +
call edi  +
mov ecx [ebp+var_10] +
sub ecx eax +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
jns loc_103C4FE  +
xor eax eax +
push 0Bh  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push dword ptr [ebx+30h]  +
push eax  +
push [ebp+xLeft]  +
push [ebp+hdc]  +
call ds:DrawIconEx  +
cmp [ebp+var_50] 0 +
jz loc_103C524  +
push [ebp+var_50]  +
push [ebp+hdc]  +
call esi  +
cmp [ebp+var_40] 0 +
jz loc_103C538  +
push 1  +
push [ebp+var_40]  +
push [ebp+hDC]  +
call ds:SelectPalette  +
cmp [ebp+var_38] 0 +
jz loc_103C54C  +
push 1  +
push [ebp+var_38]  +
push [ebp+hDC]  +
call ds:SelectPalette  +
push [ebp+var_8]  +
mov esi ds:DeleteDC +
call esi  +
push [ebp+hdc]  +
call esi  +
mov esi [ebp+var_14] +
push [ebp+hDC]  +
push dword ptr [ebx+4]  +
call ds:ReleaseDC  +
mov edi ds:DeleteObject +
jmp loc_103C5A5  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103C5A5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103C5A5  +
push eax  +
push offset aGetwindowdcFai  +
push offset dword_100AB2C  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+var_10] +
mov [ebx+10h] esi +
mov [ebx+14h] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C5DB  +
test byte ptr [eax+1Ch] 2 +
jz loc_103C5DB  +
push [ebp+var_10]  +
push esi  +
push offset dword_100AB2C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov eax lpReserved +
mov esi [ebp+var_44] +
test esi esi +
jz loc_103C63C  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_103C5FB  +
mov ecx [ebp+var_2C] +
test ecx ecx +
jz loc_103C5F2  +
mov [eax] ecx +
push eax  +
push esi  +
mov ecx ebx +
call sub_103BD03  +
mov eax [ebx+28h] +
test eax eax +
jz loc_103C609  +
push eax  +
call edi  +
and dword ptr [ebx+28h] 0 +
mov [ebx+28h] esi +
cmp [ebp+var_20] 0 +
jz loc_103C617  +
push [ebp+var_20]  +
call edi  +
cmp [ebp+var_24] 0 +
jz loc_103C622  +
push [ebp+var_24]  +
call edi  +
cmp [ebp+var_1C] 0 +
jz loc_103C62D  +
push [ebp+var_1C]  +
call edi  +
mov eax [ebp+var_3C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C65B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103C65B  +
push offset dword_100AB2C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and [ebp+var_3C] 0 +
jmp loc_103C60C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 3A98h  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_103FF3D  +
mov eax [ebp+arg_8] +
mov [esi+42Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+430h] eax +
mov eax [ebp+arg_10] +
mov [esi+434h] eax +
mov eax [ebp+arg_14] +
mov [esi+438h] eax +
xor eax eax +
push 200h  +
mov [esi+43Ch] eax +
mov [esi+444h] eax +
mov [esi+44Ch] eax +
mov [esi+450h] eax +
lea eax [esi+2Ch] +
push eax  +
push 36C1h  +
push dword ptr [esi+0Ch]  +
mov dword ptr [esi] offset off_100AC7C +
mov dword ptr [esi+440h] 7 +
mov dword ptr [esi+448h] 6 +
call sub_105DD36  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+42Ch] 0 +
and dword ptr [esi+430h] 0 +
push edi  +
lea edi [esi+43Ch] +
mov ecx [edi] +
mov dword ptr [esi] offset off_100AC7C +
test ecx ecx +
jz loc_103C726  +
mov eax [ecx] +
call dword ptr [eax+4]  +
and dword ptr [edi] 0 +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_1040027  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_103C75B  +
dec eax  +
jz loc_103C756  +
dec eax  +
jz loc_103C752  +
dec eax  +
jz loc_103C74E  +
dec eax  +
dec eax  +
xor eax eax +
jmp loc_103C75E  +
push 3  +
jmp loc_103C75D  +
push 2  +
jmp loc_103C75D  +
xor eax eax +
inc eax  +
jmp loc_103C75E  +
push 4  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
push 0  +
push 0  +
mov ebx 0F1h +
push ebx  +
mov esi ecx +
push 3345h  +
push dword ptr [esi+4]  +
call edi  +
push 0  +
push 0  +
push ebx  +
push 3344h  +
push dword ptr [esi+4]  +
call edi  +
push 0  +
push 1  +
push ebx  +
push 3342h  +
push dword ptr [esi+4]  +
call edi  +
push 0  +
push 4  +
push offset dword_100ABD4  +
mov ecx esi +
call sub_1053016  +
push 0  +
push 3346h  +
mov ecx esi +
call sub_1052AFE  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
mov [ebp+var_4] 334Fh +
lea eax [ebp+var_4] +
jz loc_103C7EA  +
push 0  +
jmp loc_103C7EC  +
push 1  +
push 1  +
push eax  +
call sub_105305A  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:SendDlgItemMessageW +
push edi  +
xor eax eax +
push eax  +
push eax  +
mov edi 0F0h +
push edi  +
mov ebx ecx +
push 3344h  +
push dword ptr [ebx+4]  +
mov [ebp+var_4] eax +
call esi  +
cmp eax 1 +
jnz loc_103C835  +
mov [ebp+var_4] 3344h +
jmp loc_103C86A  +
push 0  +
push 0  +
push edi  +
push 3345h  +
push dword ptr [ebx+4]  +
call esi  +
cmp eax 1 +
jnz loc_103C852  +
mov [ebp+var_4] 3345h +
jmp loc_103C86A  +
push 0  +
push 0  +
push edi  +
mov edi 3342h +
push edi  +
push dword ptr [ebx+4]  +
call esi  +
cmp eax 1 +
jnz loc_103C86A  +
mov [ebp+var_4] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push offset aTermsrv  +
push [ebp+arg_0]  +
call sub_105A4D8  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103C6F8  +
test byte ptr [ebp+8] 1 +
jz loc_103C8B7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_103C90E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103C902  +
test byte ptr [eax+1Ch] 4 +
jz loc_103C902  +
push offset aHandlegpsettin  +
push offset nullsub_1  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_8] 80070057h +
jmp loc_103CA4B  +
mov eax [esi+440h] +
push ebx  +
mov ebx eax +
push edi  +
mov edi eax +
shr eax 2 +
xor edx edx +
inc edx  +
not eax  +
and eax edx +
mov [ebp+var_C] eax +
mov eax [esi+42Ch] +
mov eax [eax+0B5D4h] +
shr edi 1 +
not ebx  +
not edi  +
mov [ebp+wParam] eax +
xor eax eax +
and ebx edx +
and edi edx +
mov [ecx] eax +
cmp [ebp+arg_4] eax +
jz loc_103C9F4  +
cmp [ebp+var_C] eax +
jz loc_103C9DC  +
mov eax edx +
cmp eax 0FFFFFFFFh +
jz loc_103C978  +
push 0  +
push 0  +
push 144h  +
push 334Ah  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
test eax eax +
jnz loc_103C958  +
mov [ebp+arg_4] offset dword_100ABB4 +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx esi +
push 334Ah  +
call sub_10530BF  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_103CA53  +
add [ebp+arg_4] 4 +
cmp [ebp+arg_4] offset dword_100ABC8 +
jl loc_103C97F  +
cmp [ebp+wParam] 4 +
jl loc_103C9B4  +
cmp [ebp+wParam] 1 +
jle loc_103C9C4  +
push dword ptr [esi+448h]  +
mov ecx esi +
call sub_103C734  +
mov [ebp+wParam] eax +
push 0  +
push [ebp+wParam]  +
push 14Eh  +
push 334Ah  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
test edi edi +
jz loc_103C9F4  +
push dword ptr [esi+44Ch]  +
push 3348h  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push 0  +
push 3346h  +
mov ecx esi +
call sub_1052AFE  +
test ebx ebx +
jz loc_103CA14  +
push 0  +
push 3342h  +
mov ecx esi +
call sub_1052AFE  +
push 0  +
push 4  +
push offset dword_100ABD4  +
mov ecx esi +
call sub_1053016  +
push 0  +
push 2  +
push offset dword_100ABE4  +
mov ecx esi +
call sub_1053016  +
xor eax eax +
cmp ebx eax +
jz loc_103CA44  +
cmp edi eax +
jz loc_103CA44  +
cmp [ebp+var_C] eax +
jz loc_103CA44  +
inc eax  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
pop edi  +
pop ebx  +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn 8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103CA49  +
test byte ptr [eax+1Ch] 4 +
jz loc_103CA49  +
push [ebp+var_8]  +
push offset aAddstringtocom  +
push offset nullsub_1  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_103CA49  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+42Ch] +
lea ecx [eax+0B3D0h] +
mov eax [eax+0B5D4h] +
push edi  +
push [ebp+bEnable]  +
mov [ebp+var_C] eax +
mov eax [esi+440h] +
mov edi eax +
shr eax 2 +
shr edi 1 +
not eax  +
mov [ebp+lpString] ecx +
and eax 1 +
xor ebx ebx +
not edi  +
push 3346h  +
mov ecx esi +
mov [ebp+var_8] ebx +
and edi 1 +
mov [ebp+var_4] eax +
call sub_1052AFE  +
xor eax eax +
cmp [ebp+bEnable] ebx +
push ebx  +
mov ebx ds:SendDlgItemMessageW +
setnz al  +
push eax  +
push 0F1h  +
push 3345h  +
push dword ptr [esi+4]  +
call ebx  +
cmp [ebp+var_4] 0 +
jnz loc_103CBD9  +
cmp [ebp+arg_0] 0 +
jz loc_103CB27  +
xor eax eax +
inc eax  +
cmp eax 0FFFFFFFFh +
jz loc_103CB27  +
push 0  +
push 0  +
push 144h  +
push 334Ah  +
push dword ptr [esi+4]  +
call ebx  +
test eax eax +
jnz loc_103CB0B  +
push [ebp+bEnable]  +
mov ecx esi +
push 2  +
push offset dword_100ABEC  +
call sub_1053016  +
cmp [ebp+arg_0] 0 +
jz loc_103CBD9  +
mov [ebp+var_4] offset dword_100ABC8 +
mov eax [ebp+var_4] +
push dword ptr [eax]  +
mov ecx esi +
push 334Ah  +
call sub_10530BF  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_103CB8D  +
add [ebp+var_4] 4 +
cmp [ebp+var_4] offset dword_100ABD4 +
jl loc_103CB49  +
mov eax [ebp+var_C] +
sub eax 0 +
jz loc_103CBC4  +
dec eax  +
jz loc_103CBBF  +
sub eax 3 +
jz loc_103CBBB  +
push dword ptr [esi+448h]  +
mov ecx esi +
call sub_103C734  +
jmp loc_103CBC7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103CC04  +
test byte ptr [eax+1Ch] 4 +
jz loc_103CC04  +
push [ebp+var_8]  +
push offset aAddstringtocom  +
push offset nullsub_1  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_103CC04  +
xor eax eax +
jmp loc_103CBC7  +
push 2  +
pop eax  +
jmp loc_103CBC7  +
xor eax eax +
inc eax  +
push 0  +
push eax  +
push 14Eh  +
push 334Ah  +
push dword ptr [esi+4]  +
call ebx  +
test edi edi +
jnz loc_103CC04  +
push [ebp+bEnable]  +
mov ecx esi +
push 2  +
push offset dword_100ABE4  +
call sub_1053016  +
cmp [ebp+arg_0] edi +
jz loc_103CC04  +
push [ebp+lpString]  +
push 3348h  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edx [ecx+440h] +
mov eax [ecx+42Ch] +
not edx  +
push esi  +
mov esi [eax+0B5D0h] +
test dl 1 +
jnz loc_103CC44  +
cmp dword ptr [eax+0B5D8h] 1 +
jnz loc_103CC44  +
cmp esi 4 +
jz loc_103CC3F  +
test esi esi +
jnz loc_103CC44  +
call sub_103C767  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
cmp [ebp+arg_0] 1 +
push ebx  +
mov esi 0F1h +
push ebx  +
mov edi ecx +
push esi  +
jnz loc_103CC92  +
push 3344h  +
push dword ptr [edi+4]  +
call ds:SendDlgItemMessageW  +
push ebx  +
push ebx  +
push esi  +
push 3342h  +
push dword ptr [edi+4]  +
call ds:SendDlgItemMessageW  +
push 1  +
push ebx  +
mov ecx edi +
call sub_103CA86  +
jmp loc_103CCBD  +
push 3345h  +
push dword ptr [edi+4]  +
call ds:SendDlgItemMessageW  +
push ebx  +
push ebx  +
push esi  +
push 3342h  +
push dword ptr [edi+4]  +
call ds:SendDlgItemMessageW  +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_103C8C3  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+440h] +
mov ecx eax +
shr eax 2 +
push edi  +
xor edi edi +
inc edi  +
shr ecx 1 +
not eax  +
and eax edi +
xor ebx ebx +
not ecx  +
and ecx edi +
mov [ebp+var_21C] eax +
xor eax eax +
mov [ebp+var_218] edx +
mov [ebp+var_20C] ebx +
mov [ebp+var_210] ebx +
mov [ebp+var_214] ecx +
mov [ebp+String] ax +
cmp edx ebx +
jnz loc_103CD69  +
mov [ebp+var_20C] 80070057h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103CFD7  +
test byte ptr [eax+1Ch] 4 +
jz loc_103CFD7  +
push offset nullsub_1  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103CFD7  +
push ebx  +
push ebx  +
mov ebx 0F0h +
push ebx  +
mov [edx] edi +
mov edi ds:SendDlgItemMessageW +
push 3345h  +
push dword ptr [esi+4]  +
call edi  +
mov [ebp+var_208] eax +
cmp eax 1 +
jnz loc_103CDAA  +
push 0  +
push 0  +
push ebx  +
push 3346h  +
push dword ptr [esi+4]  +
call edi  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
inc eax  +
mov [ebp+var_210] eax +
push 0  +
push 0  +
push ebx  +
push 3344h  +
push dword ptr [esi+4]  +
call edi  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_103CE44  +
mov eax lpReserved +
mov edi offset lpReserved +
mov ebx offset nullsub_1 +
cmp eax edi +
jz loc_103CDEA  +
test [eax+1Ch] cl +
jz loc_103CDEA  +
push ebx  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi+42Ch] +
and dword ptr [eax+0B5D8h] 0 +
mov esi [esi+43Ch] +
test esi esi +
jz loc_103CE14  +
lea eax [ebp+var_210] +
push eax  +
push esi  +
call sub_105E76B  +
mov [ebp+var_20C] eax +
mov eax lpReserved +
cmp eax edi +
jz loc_103CFD7  +
test byte ptr [eax+1Ch] 4 +
jz loc_103CFD7  +
push [ebp+var_210]  +
push ebx  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_103CFD7  +
mov eax [esi+42Ch] +
mov [eax+0B5D8h] ecx +
cmp [ebp+var_208] ecx +
jnz loc_103CE6A  +
mov eax [esi+42Ch] +
mov ecx [ebp+var_210] +
mov [eax+0B5D0h] ecx +
push 0  +
push 0  +
push ebx  +
push 3342h  +
push dword ptr [esi+4]  +
call edi  +
cmp eax 1 +
jnz loc_103CEA9  +
mov esi [esi+42Ch] +
lea eax [esi+0B5D0h] +
mov ecx [eax] +
cmp ecx 2 +
jz loc_103CE9E  +
cmp ecx 4 +
jz loc_103CE9E  +
and dword ptr [eax] 0 +
jmp loc_103CFD7  +
mov dword ptr [eax] 4 +
jmp loc_103CFD7  +
push 100h  +
lea eax [ebp+String] +
push eax  +
push 3348h  +
push dword ptr [esi+4]  +
call ds:GetDlgItemTextW  +
push 0  +
push 0  +
push 147h  +
push 334Ah  +
push dword ptr [esi+4]  +
call edi  +
xor ecx ecx +
sub eax ecx +
jz loc_103CEF6  +
dec eax  +
jz loc_103CEEE  +
dec eax  +
jnz loc_103CEF6  +
mov [ebp+var_208] 1 +
jmp loc_103CF00  +
mov [ebp+var_208] ecx +
jmp loc_103CF00  +
mov [ebp+var_208] 4 +
push ecx  +
push ecx  +
push ebx  +
push 334Fh  +
push dword ptr [esi+4]  +
call edi  +
xor ecx ecx +
cmp eax 1 +
mov eax [esi+42Ch] +
setz cl  +
xor edi edi +
mov [eax+0B5DCh] ecx +
cmp [ebp+String] di +
jz loc_103CF73  +
push edi  +
lea eax [ebp+String] +
push eax  +
call sub_105191B  +
test eax eax +
jz loc_103CF73  +
cmp [ebp+var_214] edi +
jnz loc_103CF57  +
mov ecx [esi+42Ch] +
lea eax [ebp+String] +
push eax  +
call sub_102C2CD  +
cmp [ebp+var_21C] edi +
jnz loc_103CFD7  +
mov eax [esi+42Ch] +
mov ecx [ebp+var_208] +
mov [eax+0B5D4h] ecx +
jmp loc_103CFD7  +
mov eax [esi+42Ch] +
push dword ptr [eax+135Ch]  +
push 3423h  +
push dword ptr [esi+4]  +
call sub_105B0B4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103CFB0  +
test byte ptr [eax+1Ch] 4 +
jz loc_103CFB0  +
push offset nullsub_1  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 3348h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
mov eax [ebp+var_218] +
mov [eax] edi +
mov [ebp+var_20C] 80004005h +
mov ecx [ebp+var_4] +
mov eax [ebp+var_20C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 410h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_410] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_40C] eax +
xor eax eax +
push 400h  +
push eax  +
mov [ebp+NameBuffer] ax +
lea eax [ebp-406h] +
push eax  +
mov ebx ecx +
call memset  +
add esp 0Ch +
test esi esi +
jnz loc_103D072  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D06B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D06B  +
push offset aUpdateusername  +
push offset nullsub_1  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_103D0D2  +
cmp dword ptr [esi] 1 +
push edi  +
jnz loc_103D0BD  +
mov edi 201h +
push edi  +
lea eax [ebp+NameBuffer] +
push eax  +
lea eax [ebp+var_410] +
push eax  +
push [ebp+var_40C]  +
mov ecx ebx +
call sub_103C877  +
mov [esi] eax +
test eax eax +
jnz loc_103D0B5  +
cmp [ebp+arg_4] eax +
jz loc_103D0B1  +
push edi  +
lea eax [ebp+NameBuffer] +
push eax  +
call sub_1059B11  +
test eax eax +
jz loc_103D0BD  +
lea eax [ebp+NameBuffer] +
jmp loc_103D0C0  +
lea eax [ebx+2Ch] +
push eax  +
push 334Ch  +
push dword ptr [ebx+4]  +
call ds:SetDlgItemTextW  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_103C7FF  +
mov ecx [esi+440h] +
mov edi [ebp+arg_0] +
shr ecx 2 +
not ecx  +
and ecx 1 +
test edi edi +
jnz loc_103D13D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D133  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D133  +
push offset aGeteffectiveau  +
push offset nullsub_1  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_103D1BE  +
mov edx eax +
sub edx 3344h +
jz loc_103D1B4  +
dec edx  +
jz loc_103D178  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103D171  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103D171  +
push eax  +
push offset nullsub_1  +
push 25h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax 80004005h +
jmp loc_103D1BE  +
test ecx ecx +
jnz loc_103D1B4  +
push ecx  +
push ecx  +
push 147h  +
push 334Ah  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
sub eax 0 +
jz loc_103D1AC  +
dec eax  +
jz loc_103D1A4  +
dec eax  +
jnz loc_103D1AC  +
mov dword ptr [edi] 3 +
jmp loc_103D1BC  +
mov dword ptr [edi] 2 +
jmp loc_103D1BC  +
mov dword ptr [edi] 6 +
jmp loc_103D1BC  +
mov eax [esi+448h] +
mov [edi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 818h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
xor edi edi +
push 800h  +
mov [ebp+Buffer] ax +
lea eax [ebp-806h] +
push edi  +
push eax  +
mov esi ecx +
mov [ebp+var_818] ebx +
mov [ebp+var_80C] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_814] +
push eax  +
push 104h  +
push ebx  +
mov [ebp+var_814] edi +
call sub_102AAF4  +
cmp eax edi +
mov [ebp+var_810] eax +
jge loc_103D270  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D3BA  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D3BA  +
push [ebp+var_810]  +
push offset aStringcchlen_1  +
push offset nullsub_1  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_103D3BA  +
push edi  +
xor edi edi +
inc edi  +
cmp [ebp+uID] 3AA4h +
lea eax [ebp+var_80C] +
push edi  +
mov ecx esi +
push eax  +
jnz loc_103D31C  +
mov [ebp+var_80C] 334Dh +
call sub_105305A  +
test ebx ebx +
jnz loc_103D2D6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D2C7  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D2C7  +
push offset aUpdatecredacti  +
push offset nullsub_1  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_810] 80070057h +
jmp loc_103D3BA  +
push 401h  +
lea eax [ebp+Buffer] +
push eax  +
push 3AA4h  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
push edi  +
push edi  +
lea eax [ebp+var_80C] +
mov ebx 334Eh +
push eax  +
mov ecx esi +
mov [ebp+var_80C] ebx +
call sub_105305A  +
push edi  +
push edi  +
lea eax [ebp+var_80C] +
push eax  +
mov ecx esi +
call sub_1053016  +
jmp loc_103D395  +
mov [ebp+var_80C] 334Eh +
call sub_105305A  +
push edi  +
push edi  +
lea eax [ebp+var_80C] +
mov ebx 334Dh +
push eax  +
mov ecx esi +
mov [ebp+var_80C] ebx +
call sub_105305A  +
push edi  +
push edi  +
lea eax [ebp+var_80C] +
push eax  +
mov ecx esi +
call sub_1053016  +
cmp [ebp+var_818] 0 +
jz loc_103D3A8  +
cmp [ebp+var_814] 0 +
jz loc_103D3A8  +
mov eax 3AA3h +
push 401h  +
cmp [ebp+uID] eax +
jnz loc_103D381  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
jmp loc_103D38D  +
lea eax [ebp+Buffer] +
push eax  +
push 3AA2h  +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
jmp loc_103D3B3  +
push [ebp+uID]  +
mov ecx esi +
push ebx  +
call sub_1053138  +
and [ebp+var_810] 0 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_810] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
call sub_103C7FF  +
and [ebp+var_4] 0 +
mov ecx eax +
sub ecx 3344h +
jz loc_103D471  +
dec ecx  +
jz loc_103D42A  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103D41D  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103D41D  +
push eax  +
push offset nullsub_1  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
push [ebp+nMaxCount]  +
push [ebp+lpString]  +
push 3348h  +
push dword ptr [esi+4]  +
call ds:GetDlgItemTextW  +
test eax eax +
jnz loc_103D557  +
mov edi 80004005h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D422  +
test byte ptr [eax+1Ch] 2 +
jz loc_103D422  +
push offset nullsub_1  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103D422  +
cmp dword ptr [esi+43Ch] 0 +
jz loc_103D41D  +
mov eax [esi+44Ch] +
test eax eax +
jz loc_103D41D  +
lea ecx [ebp+var_4] +
push ecx  +
push 104h  +
push eax  +
call sub_102AAF4  +
mov edi eax +
test edi edi +
jge loc_103D4C5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D422  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D422  +
push edi  +
push offset aStringcchlen_1  +
push offset nullsub_1  +
push 1Fh  +
jmp loc_103D547  +
cmp [ebp+var_4] 0 +
jz loc_103D41D  +
cmp [ebp+var_4] 105h +
jbe loc_103D509  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D41D  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D41D  +
push offset nullsub_1  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103D41D  +
push dword ptr [esi+44Ch]  +
push [ebp+nMaxCount]  +
push [ebp+lpString]  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_103D557  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D422  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D422  +
push edi  +
push offset aStringcbcopyFa  +
push offset nullsub_1  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_103D422  +
xor edi edi +
jmp loc_103D422  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 230h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor eax eax +
xor esi esi +
inc esi  +
push edi  +
mov ebx ecx +
mov [ebp+var_228] eax +
mov [ebp+var_224] eax +
mov [ebp+var_21C] eax +
mov [ebp+var_22C] eax +
mov [ebp+var_218] esi +
mov [ebp+var_214] 3AA2h +
call sub_103C7FF  +
mov edi eax +
xor eax eax +
push 208h  +
push eax  +
mov [ebp+String] ax +
lea eax [ebp-20Eh] +
push eax  +
call memset  +
and [ebp+var_230] 0 +
mov eax edi +
add esp 0Ch +
sub eax 3342h +
mov [ebp+var_220] 6 +
jz loc_103D691  +
dec eax  +
dec eax  +
jz loc_103D67A  +
dec eax  +
jz loc_103D627  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D61D  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D61D  +
push edi  +
push offset nullsub_1  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax 80004005h +
jmp loc_103D7F5  +
push 105h  +
lea eax [ebp+String] +
push eax  +
mov ecx ebx +
call sub_103D3D6  +
lea eax [ebp+var_220] +
push eax  +
mov ecx ebx +
call sub_103D0E7  +
mov edi eax +
test edi edi +
jge loc_103D6A9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D7F3  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D7F3  +
push edi  +
push offset aGeteffective_0  +
push offset nullsub_1  +
push 17h  +
jmp loc_103D742  +
push 105h  +
lea eax [ebp+String] +
push eax  +
mov ecx ebx +
call sub_103D3D6  +
test eax eax +
jge loc_103D63A  +
mov [ebp+var_228] esi +
mov [ebp+var_22C] esi +
mov [ebp+var_214] 3491h +
jmp loc_103D6E2  +
cmp [ebp+var_220] 4 +
jnz loc_103D6CA  +
mov [ebp+var_224] esi +
mov [ebp+var_214] 3AA3h +
mov [ebp+var_21C] esi +
jmp loc_103D6E2  +
cmp [ebp+var_220] 3 +
jz loc_103D6DB  +
cmp [ebp+var_220] esi +
jnz loc_103D6E2  +
and [ebp+var_218] 0 +
mov ecx [ebx+42Ch] +
add ecx 0CA94h +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_103D6FD  +
and [ebp+var_218] 0 +
lea eax [ebp+var_230] +
push eax  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_102AAF4  +
mov edi eax +
test edi edi +
jge loc_103D752  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103D7F3  +
test byte ptr [eax+1Ch] 4 +
jz loc_103D7F3  +
push edi  +
push offset aStringcchlen_1  +
push offset nullsub_1  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_103D7F3  +
lea eax [ebp+var_218] +
push eax  +
push [ebp+var_224]  +
lea eax [ebp+String] +
push eax  +
mov ecx ebx +
call sub_103CFF4  +
xor edi edi +
cmp [ebp+var_230] edi +
jz loc_103D7A9  +
cmp [ebp+var_218] edi +
jz loc_103D791  +
mov [ebp+var_214] 3AA4h +
mov [ebp+var_21C] esi +
jmp loc_103D7A9  +
cmp [ebp+var_224] edi +
jnz loc_103D7A9  +
mov [ebp+var_214] 3AA2h +
mov [ebp+var_21C] edi +
push [ebp+var_214]  +
lea eax [ebp+String] +
push eax  +
mov ecx ebx +
call sub_103D1C9  +
push [ebp+var_21C]  +
mov ecx ebx +
call sub_103C7D0  +
cmp [ebp+var_228] edi +
jz loc_103D7E4  +
cmp [ebp+var_22C] edi +
jz loc_103D7E4  +
push edi  +
push 4  +
push offset dword_100ABF4  +
jmp loc_103D7EC  +
push esi  +
push 3  +
push offset dword_100AC04  +
mov ecx ebx +
call sub_1053016  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor eax eax +
push 206h  +
push eax  +
mov [ebp+String] ax +
lea eax [ebp-20Ah] +
push eax  +
mov esi ecx +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+String] +
push eax  +
mov ecx esi +
call sub_103D3D6  +
test eax eax +
jge loc_103D884  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103D8C1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103D8C1  +
push eax  +
push offset aGeteffectivese  +
push offset nullsub_1  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103D8C1  +
lea eax [ebp+var_210] +
push eax  +
mov eax [esi+42Ch] +
push dword ptr [eax+135Ch]  +
push 3452h  +
push dword ptr [esi+4]  +
call sub_105AFD3  +
cmp [ebp+var_210] 0 +
jz loc_103D8C1  +
push [ebp+arg_0]  +
lea eax [ebp+String] +
push offset aTermsrv  +
push eax  +
call sub_105A19B  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 620h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov esi 206h +
push esi  +
mov [ebp+String] ax +
xor ebx ebx +
lea eax [ebp-20Ah] +
push ebx  +
push eax  +
mov edi ecx +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_61C] ax +
lea eax [ebp+var_61C+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov [ebp+Buffer] ax +
lea eax [ebp-412h] +
push ebx  +
push eax  +
call memset  +
add esp 24h +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
mov ecx edi +
mov [ebp+var_620] ebx +
call sub_103D3D6  +
cmp eax ebx +
jge loc_103D987  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103DA1E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103DA1E  +
push eax  +
push offset aGeteffectivese  +
push offset nullsub_1  +
push 1Dh  +
jmp loc_103D9EC  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 348Fh  +
push dword ptr [edi+0Ch]  +
call sub_105DD36  +
push esi  +
lea eax [ebp+var_61C] +
push eax  +
push 348Eh  +
push dword ptr [edi+0Ch]  +
call sub_105DD36  +
lea eax [ebp+var_620] +
push eax  +
push 2  +
lea eax [ebp+String] +
push eax  +
push ebx  +
call sub_104A2C8  +
cmp eax ebx +
jge loc_103D9F9  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103DA1E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103DA1E  +
push eax  +
push offset aFailedToCreate  +
push offset nullsub_1  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103DA1E  +
mov ecx [ebp+var_620] +
mov eax [ecx] +
push ebx  +
push ebx  +
lea edx [ebp+String] +
push edx  +
lea edx [ebp+Buffer] +
push edx  +
lea edx [ebp+var_61C] +
push edx  +
push dword ptr [edi+4]  +
call dword ptr [eax+64h]  +
mov ecx [ebp+var_620] +
pop edi  +
pop esi  +
cmp ecx ebx +
pop ebx  +
jz loc_103DA30  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
xor ebx ebx +
push ebx  +
push 0FFh  +
push 0C5h  +
mov esi ecx +
push 3348h  +
push dword ptr [esi+4]  +
mov [ebp+var_4] ebx +
call edi  +
mov eax [esi+42Ch] +
mov ecx [eax+0B5D8h] +
mov eax [eax+0B5D0h] +
mov [ebp+var_8] ecx +
cmp eax 1 +
jz loc_103DA90  +
cmp eax ebx +
jz loc_103DA90  +
xor eax eax +
inc eax  +
jmp loc_103DA92  +
xor eax eax +
push ebx  +
push eax  +
mov ebx 0F1h +
push ebx  +
push 3346h  +
push dword ptr [esi+4]  +
call edi  +
mov eax [esi+42Ch] +
xor ecx ecx +
cmp [eax+0B5DCh] ecx +
push 0  +
setnz cl  +
push ecx  +
push ebx  +
push 334Fh  +
push dword ptr [esi+4]  +
call edi  +
push 0  +
push 1  +
push ebx  +
push 3344h  +
push dword ptr [esi+4]  +
call edi  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_103C8C3  +
cmp [ebp+var_4] 0 +
jnz loc_103DB14  +
xor eax eax +
cmp [ebp+var_8] 1 +
mov ecx esi +
setz al  +
push eax  +
push 1  +
call sub_103CA86  +
cmp [ebp+var_8] 0 +
jz loc_103DB14  +
mov ecx esi +
call sub_103CC13  +
push 0  +
push 0  +
push ebx  +
push 3344h  +
push dword ptr [esi+4]  +
call edi  +
mov ecx esi +
call sub_103D563  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+42Ch] +
xor ecx ecx +
cmp [eax+135Ch] ecx +
jz loc_103DB47  +
lea ecx [eax+136Ch] +
push ecx  +
mov ecx esi +
call sub_1040242  +
mov ebx eax +
test ebx ebx +
jnz loc_103DB86  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103DD00  +
test byte ptr [eax+1Ch] 4 +
jz loc_103DD00  +
push offset nullsub_1  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103DD00  +
push edi  +
push 65h  +
mov ecx esi +
call sub_1052AC9  +
lea edi [esi+43Ch] +
push edi  +
call sub_1049D94  +
test eax eax +
jge loc_103DBD9  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103DCFF  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103DCFF  +
push eax  +
push offset aLoaddefaultp_0  +
push offset nullsub_1  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103DCFF  +
mov ecx [edi] +
test ecx ecx +
jz loc_103DC1E  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov ecx [edi] +
mov [esi+440h] eax +
mov eax [ecx] +
call dword ptr [eax+28h]  +
mov ecx [edi] +
mov [esi+444h] eax +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov ecx [edi] +
mov [esi+448h] eax +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov ecx [edi] +
mov [esi+44Ch] eax +
mov eax [ecx] +
call dword ptr [eax+30h]  +
mov [esi+450h] eax +
mov ecx esi +
call sub_103DA41  +
test eax eax +
jge loc_103DC57  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103DC50  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103DC50  +
push eax  +
push offset nullsub_1  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
xor ebx ebx +
jmp loc_103DCFF  +
mov eax [esi+42Ch] +
mov eax [eax+0C234h] +
cmp eax 5 +
mov [ebp+var_4] eax +
jg loc_103DC9A  +
lea edi dword_100AC2C[eax*4] +
xor ebx ebx +
push dword ptr [edi]  +
push ds:dword_100AC28[ebx]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
add ebx 1Ch +
add edi 1Ch +
cmp ebx 54h +
jb loc_103DC74  +
mov eax [ebp+var_4] +
xor ebx ebx +
xor ecx ecx +
inc ebx  +
cmp ds:dword_100AC48[eax*4] ecx +
jnz loc_103DCD1  +
push ecx  +
push ecx  +
push 0F0h  +
push 3345h  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
cmp eax ebx +
jnz loc_103DCD1  +
push 0  +
push 5  +
push offset dword_100AC10  +
mov ecx esi +
call sub_1053016  +
push 2  +
push 2  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_1052B2B  +
push 9  +
push dword ptr [esi+4]  +
call ds:ShowWindow  +
push 3340h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
xor esi esi +
sub eax 4Eh +
push edi  +
mov edi [ebp+arg_10] +
jz loc_103DE3F  +
sub eax 0C2h +
jz loc_103DE18  +
dec eax  +
jnz loc_103DF40  +
movzx eax word ptr [ebp+arg_C] +
sub eax 3340h +
jz loc_103DD89  +
dec eax  +
dec eax  +
jz loc_103DD72  +
dec eax  +
dec eax  +
jz loc_103DD66  +
dec eax  +
jz loc_103DD62  +
sub eax 3 +
jz loc_103DD7C  +
dec eax  +
dec eax  +
jz loc_103DD7C  +
push edi  +
push [ebp+arg_C]  +
push 111h  +
jmp loc_103DF47  +
push 1  +
jmp loc_103DD68  +
push 0  +
mov ecx [ebp+arg_0] +
call sub_103CC4D  +
jmp loc_103DD7A  +
mov ecx [ebp+arg_0] +
call sub_103C767  +
mov esi eax +
mov ecx [ebp+arg_0] +
call sub_103D563  +
jmp loc_103DF54  +
mov ecx [ebp+arg_0] +
xor esi esi +
lea eax [ebp+arg_C] +
inc esi  +
push eax  +
mov [ebp+arg_C] esi +
call sub_103CCCC  +
cmp [ebp+arg_C] 0 +
jz loc_103DDD7  +
test eax eax +
jge loc_103DDD1  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103DDD1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103DDD1  +
push eax  +
push offset aOnclickokbutto  +
push offset nullsub_1  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
push esi  +
push [ebp+arg_4]  +
jmp loc_103DE34  +
test eax eax +
jge loc_103DF54  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103DF54  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103DF54  +
push eax  +
push offset aOnclickokbut_0  +
push offset nullsub_1  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103DF54  +
mov ecx [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov [ecx+4] edi +
call sub_103DB27  +
test eax eax +
jz loc_103DE31  +
xor esi esi +
jmp loc_103DF54  +
push 3  +
push edi  +
call ds:EndDialog  +
jmp loc_103DF54  +
mov eax [edi+4] +
sub eax 3341h +
jz loc_103DEF4  +
sub eax 0Dh +
jnz loc_103DF01  +
mov eax [edi+8] +
cmp eax 0FFFFFFFCh +
jz loc_103DE67  +
cmp eax 0FFFFFFFEh +
jnz loc_103DF40  +
lea esi [edi+1Ch] +
mov ecx offset aTscproxylinked +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_103DE97  +
test dx dx +
jz loc_103DE93  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_103DE97  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_103DE71  +
xor eax eax +
jmp loc_103DE9C  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_103DEAA  +
mov ecx [ebp+arg_0] +
call sub_103D8D5  +
jmp loc_103DEEA  +
mov ecx offset aTscproxylinkde +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_103DED7  +
test dx dx +
jz loc_103DED3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_103DED7  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_103DEB1  +
xor eax eax +
jmp loc_103DEDC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_103DEEA  +
mov ecx [ebp+arg_0] +
push 2  +
call sub_103D809  +
mov ecx [ebp+arg_0] +
call sub_103D563  +
jmp loc_103DF40  +
mov eax [edi+8] +
cmp eax 0FFFFFFFCh +
jz loc_103DF14  +
cmp eax 0FFFFFFFEh +
jz loc_103DF14  +
push edi  +
push [ebp+arg_C]  +
push 4Eh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1040058  +
jmp loc_103DF40  +
mov eax [ebp+arg_0] +
mov ecx [eax+42Ch] +
push offset aMstsc_topnode_  +
push dword ptr [ecx+135Ch]  +
mov ecx [eax+430h] +
push offset aHelp_entry_i_1  +
push offset aMshelpWindow_1  +
push dword ptr [eax+4]  +
call sub_102817E  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1040058  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 32E8h  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_103FF3D  +
mov eax [ebp+arg_8] +
mov [esi+2Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+30h] eax +
mov eax [ebp+arg_10] +
mov [esi+34h] eax +
mov eax [ebp+arg_14] +
mov [esi+38h] eax +
xor eax eax +
mov [esi+48h] edi +
mov [esi+3Ch] eax +
mov [esi+44h] eax +
mov [esi+4Ch] eax +
pop edi  +
mov dword ptr [esi] offset off_100B0E4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4Ch] +
and dword ptr [esi+2Ch] 0 +
and dword ptr [esi+30h] 0 +
mov dword ptr [esi] offset off_100B0E4 +
test eax eax +
jz loc_103DFD9  +
push eax  +
call ??_V@YAXPAX@Z  +
and dword ptr [esi+4Ch] 0 +
pop ecx  +
mov ecx esi +
pop esi  +
jmp sub_1040027  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+lParam] 0 +
push edi  +
mov edi ecx +
jz loc_103E07D  +
push ebx  +
push esi  +
push [ebp+lParam]  +
mov esi ds:SendMessageW +
push 4  +
push 110Ah  +
push dword ptr [edi+44h]  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_103E07B  +
xor eax eax +
cmp [ebp+arg_4] eax +
setnz al  +
inc eax  +
mov [ebp+lParam] eax +
shl [ebp+lParam] 0Ch +
push [ebp+arg_4]  +
mov ecx edi +
push ebx  +
call sub_103DFE6  +
mov eax [ebp+lParam] +
mov [ebp+var_20] eax +
lea eax [ebp+var_28] +
push eax  +
push 0  +
push 113Fh  +
push dword ptr [edi+44h]  +
mov [ebp+var_28] 8 +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] 0F000h +
call esi  +
cmp [ebp+arg_4] 0 +
jz loc_103E068  +
push ebx  +
mov ecx edi +
call sub_103E52A  +
push ebx  +
push 1  +
push 110Ah  +
push dword ptr [edi+44h]  +
call esi  +
mov ebx eax +
test ebx ebx +
jnz loc_103E028  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jz loc_103E152  +
push ebx  +
push esi  +
mov esi ds:SendMessageW +
mov ebx 110Ah +
cmp [ebp+arg_0] 0FFFF0000h +
jz loc_103E150  +
push [ebp+arg_0]  +
mov [ebp+var_8] 1 +
push 4  +
jmp loc_103E0F5  +
push 0F000h  +
push [ebp+wParam]  +
push 1127h  +
push dword ptr [edi+44h]  +
call esi  +
mov ecx [ebp+wParam] +
shr eax 0Ch +
dec eax  +
cmp ecx [ebp+arg_4] +
jnz loc_103E0EB  +
xor edx edx +
test eax eax +
setz dl  +
mov eax edx +
test eax eax +
jnz loc_103E0F2  +
and [ebp+var_8] eax +
push ecx  +
push 1  +
push ebx  +
push dword ptr [edi+44h]  +
call esi  +
mov [ebp+wParam] eax +
test eax eax +
jnz loc_103E0C4  +
mov eax [ebp+arg_0] +
mov [ebp+var_2C] eax +
xor eax eax +
cmp [ebp+var_8] eax +
mov [ebp+var_30] 8 +
setnz al  +
mov [ebp+var_24] 0F000h +
inc eax  +
shl eax 0Ch +
mov [ebp+var_28] eax +
lea eax [ebp+var_30] +
push eax  +
push 0  +
push 113Fh  +
push dword ptr [edi+44h]  +
call esi  +
mov eax [ebp+arg_0] +
push 0  +
push 3  +
push ebx  +
push dword ptr [edi+44h]  +
mov [ebp+arg_4] eax +
call esi  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_103E0A9  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103DFB4  +
test byte ptr [ebp+8] 1 +
jz loc_103E176  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
jge loc_103E1C5  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103E1C5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103E1C5  +
push eax  +
push offset aImsrdpdevic_10  +
push offset dword_100B0D4  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
cmp word ptr [ebp+var_4] ax +
setnz al  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_102ABD2  +
mov ebx offset dword_100B0D4 +
cmp al 1 +
jnz loc_103E22E  +
mov ecx esi +
call sub_103E182  +
cmp al 1 +
jnz loc_103E22E  +
mov eax [esi+4] +
mov ecx [eax] +
lea edx [esi+14h] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jge loc_103E22E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103E22E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103E22E  +
push eax  +
push offset aImsrdpdevic_11  +
push ebx  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
lea edi [esi+14h] +
cmp dword ptr [edi] 0 +
jnz loc_103E27A  +
mov eax [esi+4] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jge loc_103E27A  +
mov esi [esi+4] +
mov eax [esi] +
push edi  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jge loc_103E27A  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103E27A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103E27A  +
push eax  +
push offset aImsrdpdevic_12  +
push ebx  +
push 17h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_1] bl +
call sub_102AB30  +
mov edi eax +
mov [ebp+var_14] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_14] +
push eax  +
push 3  +
push edi  +
call ds:CM_Get_DevNode_Registry_PropertyW  +
mov esi eax +
cmp esi 1Ah +
jnz loc_103E2E8  +
cmp [ebp+var_8] ebx +
jnz loc_103E2E8  +
mov eax [ebp+var_10] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_103E35C  +
inc [ebp+var_C]  +
cmp [ebp+var_C] 2 +
jb loc_103E2A8  +
cmp esi ebx +
jnz loc_103E35C  +
mov ecx [ebp+var_8] +
cmp ecx ebx +
jz loc_103E35C  +
cmp [ebp+var_14] 7 +
jnz loc_103E35C  +
jmp loc_103E351  +
mov edx offset aUsbClass_07 +
mov eax ecx +
mov si [eax] +
cmp si [edx] +
jnz loc_103E331  +
cmp si bx +
jz loc_103E32D  +
mov si [eax+2] +
cmp si [edx+2] +
jnz loc_103E331  +
add eax 4 +
add edx 4 +
cmp si bx +
jnz loc_103E30B  +
xor eax eax +
jmp loc_103E336  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_103E358  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_103E33F  +
sub eax esi +
sar eax 1 +
lea ecx [ecx+eax*2+2] +
cmp [ecx] bx +
jnz loc_103E304  +
jmp loc_103E35C  +
mov [ebp+var_1] 1 +
push [ebp+var_8]  +
call ??_V@YAXPAX@Z  +
mov al [ebp+var_1] +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
xor ebx ebx +
mov eax 0FFFFh +
push esi  +
mov esi ecx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] eax +
jnz loc_103E396  +
inc ebx  +
jmp loc_103E4FB  +
cmp [ebp+arg_4] eax +
jnz loc_103E3A3  +
or ebx 0FFFFFFFFh +
jmp loc_103E4FB  +
mov eax [esi+34h] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jge loc_103E3F0  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103E4FB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103E4FB  +
push eax  +
push offset aUnableToGetDev  +
push offset dword_100B0C4  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103E4FB  +
mov eax [esi+34h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jge loc_103E42F  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103E4FB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103E4FB  +
push eax  +
push offset aUnableToGetDev  +
push offset dword_100B0C4  +
push 0Ch  +
jmp loc_103E3E0  +
push [ebp+var_8]  +
lea ecx [ebp+var_48] +
push dword ptr [esi+34h]  +
call sub_1030817  +
push [ebp+var_4]  +
lea ecx [ebp+var_28] +
push dword ptr [esi+34h]  +
call sub_1030817  +
lea ecx [ebp+var_48] +
call sub_103E1D5  +
lea ecx [ebp+var_28] +
mov esi eax +
call sub_103E1D5  +
test esi esi +
jz loc_103E4A6  +
test eax eax +
jz loc_103E4A6  +
lea ecx [ebp+var_28] +
call sub_103E1D5  +
lea ecx [ebp+var_48] +
mov esi eax +
call sub_103E1D5  +
mov cx [eax] +
cmp cx [esi] +
jnz loc_103E49D  +
test cx cx +
jz loc_103E499  +
mov cx [eax+2] +
cmp cx [esi+2] +
jnz loc_103E49D  +
add eax 4 +
add esi 4 +
test cx cx +
jnz loc_103E477  +
xor eax eax +
jmp loc_103E4A2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
mov ebx eax +
jmp loc_103E4A8  +
xor ebx ebx +
test ebx ebx +
jnz loc_103E4EB  +
lea ecx [ebp+var_28] +
call sub_102AD20  +
lea ecx [ebp+var_48] +
mov esi eax +
call sub_102AD20  +
mov cx [eax] +
cmp cx [esi] +
jnz loc_103E4E4  +
test cx cx +
jz loc_103E4E0  +
mov cx [eax+2] +
cmp cx [esi+2] +
jnz loc_103E4E4  +
add eax 4 +
add esi 4 +
test cx cx +
jnz loc_103E4BE  +
xor eax eax +
jmp loc_103E4E9  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
mov ebx eax +
lea ecx [ebp+var_28] +
call sub_10308D2  +
lea ecx [ebp+var_48] +
call sub_10308D2  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_103E50C  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_103E51D  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B0h +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendMessageW +
xor eax eax +
push eax  +
push eax  +
mov ebx 110Ah +
mov esi ecx +
push ebx  +
push dword ptr [esi+44h]  +
mov [ebp+var_8] eax +
mov [ebp+var_10] eax +
call edi  +
push eax  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
mov [ebp+var_14] eax +
call edi  +
cmp dword ptr [esi+50h] 0 +
mov [ebp+var_4] eax +
jz loc_103E578  +
push eax  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
mov [ebp+var_C] eax +
jmp loc_103E57C  +
and [ebp+var_C] 0 +
push [ebp+wParam]  +
push 3  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
xor ecx ecx +
cmp eax ecx +
jz loc_103E8A9  +
cmp eax [ebp+var_4] +
jz loc_103E8A9  +
cmp eax [ebp+var_C] +
jnz loc_103E722  +
mov eax [ebp+wParam] +
mov [ebp+var_8C] eax +
lea eax [ebp+var_90] +
push eax  +
push ecx  +
push 113Eh  +
push dword ptr [esi+44h]  +
mov [ebp+var_90] 4 +
call edi  +
mov eax [esi+34h] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+var_6C]  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_103E8A9  +
push [ebp+var_8]  +
lea ecx [ebp+var_B0] +
push dword ptr [esi+34h]  +
call sub_1030817  +
lea ecx [ebp+var_B0] +
call sub_102AB81  +
push [ebp+var_14]  +
mov [ebp+var_C] eax +
push 4  +
jmp loc_103E701  +
push 0F000h  +
push [ebp+wParam]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
shr eax 0Ch +
dec eax  +
jz loc_103E6FC  +
mov eax [ebp+wParam] +
mov [ebp+var_3C] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 113Eh  +
push dword ptr [esi+44h]  +
mov [ebp+lParam] 4 +
call edi  +
cmp [ebp+var_1C] 0FFFFFFFFh +
jz loc_103E6FC  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push [ebp+var_1C]  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_103E6FC  +
mov eax [ebp+var_10] +
and [ebp+var_4] 0 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_100C5A8  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
mov eax [ebp+var_4] +
jl loc_103E6EE  +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_103E6EB  +
mov ecx [ebp+var_18] +
xor eax eax +
inc eax  +
shl eax cl +
mov ecx [ebp+var_C] +
test eax ecx +
jz loc_103E6E1  +
push 0  +
push [ebp+wParam]  +
mov ecx esi +
call sub_103DFE6  +
push [ebp+wParam]  +
mov ecx esi +
push [ebp+var_14]  +
call sub_103E087  +
mov eax [ebp+wParam] +
mov [ebp+var_64] eax +
lea eax [ebp+var_68] +
push eax  +
push 0  +
push 113Fh  +
push dword ptr [esi+44h]  +
mov [ebp+var_68] 8 +
mov [ebp+var_5C] 0F000h +
mov [ebp+var_60] 1000h +
call edi  +
push 0  +
lea ecx [ebp+var_10] +
call sub_1054923  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_103E6FC  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+wParam]  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
mov [ebp+wParam] eax +
test eax eax +
jnz loc_103E609  +
lea ecx [ebp+var_B0] +
call sub_10308D2  +
jmp loc_103E8A9  +
cmp [ebp+var_C] ecx +
jz loc_103E8A9  +
mov eax [ebp+wParam] +
mov [ebp+var_3C] eax +
lea eax [ebp+lParam] +
push eax  +
push ecx  +
push 113Eh  +
push dword ptr [esi+44h]  +
mov [ebp+lParam] 4 +
call edi  +
cmp [ebp+var_1C] 0FFFFFFFFh +
jz loc_103E8A9  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push [ebp+var_1C]  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_103E8A9  +
mov eax [ebp+var_10] +
and [ebp+var_4] 0 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_100C5A8  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
mov eax [ebp+var_4] +
jl loc_103E89B  +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_103E898  +
mov ecx [ebp+var_18] +
push [ebp+var_C]  +
xor eax eax +
inc eax  +
shl eax cl +
push 4  +
mov [ebp+var_14] eax +
jmp loc_103E887  +
push 0F000h  +
push [ebp+wParam]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
shr eax 0Ch +
dec eax  +
jz loc_103E882  +
mov eax [ebp+wParam] +
mov [ebp+var_8C] eax +
lea eax [ebp+var_90] +
push eax  +
push 0  +
push 113Eh  +
push dword ptr [esi+44h]  +
mov [ebp+var_90] 4 +
call edi  +
mov eax [esi+34h] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+var_6C]  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_103E882  +
push [ebp+var_8]  +
lea ecx [ebp+var_B0] +
push dword ptr [esi+34h]  +
call sub_1030817  +
lea ecx [ebp+var_B0] +
call sub_102AB81  +
mov ecx [ebp+var_14] +
test eax ecx +
jz loc_103E86D  +
push 0  +
push [ebp+wParam]  +
mov ecx esi +
call sub_103DFE6  +
push [ebp+wParam]  +
mov ecx esi +
push [ebp+var_C]  +
call sub_103E087  +
mov eax [ebp+wParam] +
mov [ebp+var_64] eax +
lea eax [ebp+var_68] +
push eax  +
push 0  +
push 113Fh  +
push dword ptr [esi+44h]  +
mov [ebp+var_68] 8 +
mov [ebp+var_5C] 0F000h +
mov [ebp+var_60] 1000h +
call edi  +
push 0  +
lea ecx [ebp+var_8] +
call sub_1054923  +
lea ecx [ebp+var_B0] +
call sub_10308D2  +
push [ebp+wParam]  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
mov [ebp+wParam] eax +
test eax eax +
jnz loc_103E7B0  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_103E8A9  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jz loc_103E8BD  +
and [ebp+var_10] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
test eax eax +
jz locret_103E8CE  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+10h] +
push dword ptr [ebp+8]  +
call sub_103E372  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+12h] bl +
jnz loc_103E9CA  +
mov byte ptr [esi+12h] 1 +
call sub_102ABD2  +
test al al +
jnz loc_103E91F  +
mov [esi+13h] bl +
jmp loc_103E9CA  +
mov ecx esi +
call sub_102ACC9  +
test al al +
jnz loc_103E917  +
mov ecx esi +
mov [esi+0Ch] ebx +
call sub_1031B4A  +
cmp eax 0FFFFFFFFh +
jz loc_103E9CA  +
push edi  +
cmp [esi+13h] bl +
jnz loc_103E9C9  +
mov ecx [esi] +
lea edi [ebp+var_4] +
push edi  +
push eax  +
mov [ebp+var_4] ebx +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+10h]  +
cmp eax ebx +
jge loc_103E989  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103E9A9  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103E9A9  +
push eax  +
push offset aImsrdpdevice_7  +
push offset dword_100B0D4  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103E9A9  +
push [ebp+var_4]  +
lea ecx [ebp+var_24] +
push dword ptr [esi]  +
call sub_1030817  +
lea ecx [ebp+var_24] +
call sub_103E285  +
or [esi+13h] al +
lea ecx [ebp+var_24] +
call sub_10308D2  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_103E9B9  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx esi +
call sub_1031B4A  +
cmp eax 0FFFFFFFFh +
jnz loc_103E93E  +
pop edi  +
mov al [esi+13h] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+10h] bl +
jnz loc_103EADA  +
mov byte ptr [esi+10h] 1 +
call sub_102ABD2  +
test al al +
jz loc_103EADA  +
push ebx  +
mov ecx esi +
call sub_102AB30  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call ds:CM_Get_Parent  +
test eax eax +
jnz loc_103EADA  +
push edi  +
xor edi edi +
cmp [esi+8] ebx +
jbe loc_103EAD9  +
mov eax [esi] +
lea edx [ebp+var_4] +
push edx  +
push edi  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jge loc_103EA67  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103EA98  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103EA98  +
push eax  +
push offset aImsrdpdevice_7  +
push offset dword_100B0D4  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_103EA98  +
push dword ptr [esi+4]  +
lea ecx [ebp+var_4] +
call sub_1030924  +
test eax eax +
jnz loc_103EA98  +
push [ebp+var_4]  +
lea ecx [ebp+var_28] +
push dword ptr [esi]  +
call sub_1030817  +
lea ecx [ebp+var_28] +
call sub_102AB30  +
lea ecx [ebp+var_28] +
cmp [ebp+var_8] eax +
jz loc_103EAB4  +
call sub_10308D2  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_103EAA8  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [esi+8] +
jb loc_103EA25  +
jmp loc_103EAD9  +
call sub_103E8F3  +
test al al +
jnz loc_103EAC1  +
mov byte ptr [esi+11h] 1 +
lea ecx [ebp+var_28] +
call sub_10308D2  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_103EAD9  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov al [esi+11h] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 3154h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+Rect.left] 0 +
and [ebp+var_3044] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
lea edi [ebp+Rect.top] +
stos   +
stos   +
mov ebx ecx +
mov [ebp+hDlg] esi +
stos   +
call ds:InitCommonControls  +
push 0  +
mov ecx ebx +
call sub_1040242  +
mov edi eax +
test edi edi +
jnz loc_103EB6C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103F72B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103F72B  +
push offset dword_100B0C4  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103F72B  +
push 65h  +
mov ecx ebx +
call sub_1052AC9  +
push 2  +
push 2  +
push dword ptr [ebx+8]  +
mov ecx ebx +
call sub_1052B2B  +
push 9  +
push dword ptr [ebx+4]  +
call ds:ShowWindow  +
push 33A5h  +
push esi  +
call ds:GetDlgItem  +
mov [ebp+hWnd] eax +
mov [ebx+44h] eax +
mov edi 400h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 3459h  +
push dword ptr [ebx+48h]  +
call sub_105DD36  +
test eax eax +
jnz loc_103EBC8  +
xor edi edi +
jmp loc_103F72B  +
push edi  +
lea eax [ebp+var_1804] +
push eax  +
push 345Ah  +
push dword ptr [ebx+48h]  +
call sub_105DD36  +
test eax eax +
jz loc_103EBC1  +
push edi  +
lea eax [ebp+var_2004] +
push eax  +
push 3461h  +
push dword ptr [ebx+48h]  +
call sub_105DD36  +
test eax eax +
jz loc_103EBC1  +
push edi  +
lea eax [ebp+var_3004] +
push eax  +
push 345Bh  +
push dword ptr [ebx+48h]  +
call sub_105DD36  +
test eax eax +
jz loc_103EBC1  +
push edi  +
lea eax [ebp+var_1004] +
push eax  +
push 345Ch  +
push dword ptr [ebx+48h]  +
call sub_105DD36  +
test eax eax +
jz loc_103EBC1  +
push edi  +
lea eax [ebp+var_2804] +
push eax  +
push 345Dh  +
push dword ptr [ebx+48h]  +
call sub_105DD36  +
test eax eax +
jz loc_103EBC1  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetClientRect  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov esi ds:SetWindowLongW +
mov edi eax +
and eax 0FFFFFEFFh +
push eax  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call esi  +
or edi 100h +
push edi  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call esi  +
mov eax [ebx+34h] +
mov ecx [eax] +
lea edx [ebp+var_3044] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jge loc_103ECDB  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103EBC1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103EBC1  +
push eax  +
push offset dword_100B0C4  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_103EBC1  +
mov eax [ebp+var_3044] +
mov [ebx+3Ch] eax +
mov eax [ebx+38h] +
mov edx [eax] +
lea ecx [ebx+40h] +
push ecx  +
push eax  +
call dword ptr [edx+14h]  +
test eax eax +
jge loc_103ED1B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103EBC1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103EBC1  +
push eax  +
push offset dword_100B0C4  +
push 0Fh  +
jmp loc_103ECCB  +
mov esi ds:SendMessageW +
mov eax 0FFFF0000h +
mov [ebp+lParam] eax +
mov [ebp+var_30D8] eax +
lea eax [ebp+var_3004] +
mov [ebp+var_30C4] eax +
lea eax [ebp+lParam] +
push eax  +
xor edi edi +
push edi  +
push 1132h  +
push [ebp+hWnd]  +
mov [ebp+var_30D4] 5 +
call esi  +
mov [ebp+var_3028] eax +
mov [ebp+lParam] eax +
xor eax eax +
inc eax  +
mov [ebp+var_3010] eax +
mov [ebp+var_3014] eax +
mov [ebp+var_3018] edi +
cmp [ebx+40h] edi +
jbe loc_103EF5F  +
mov eax [ebx+38h] +
lea edx [ebp+var_3008] +
push edx  +
push [ebp+var_3018]  +
mov [ebp+var_301C] edi +
mov [ebp+var_3008] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax edi +
jge loc_103EDD8  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103EF34  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103EF34  +
push eax  +
push offset dword_100B0C4  +
push 10h  +
jmp loc_103EF29  +
mov eax [ebp+var_3008] +
mov ecx [eax] +
lea edx [ebp+var_301C] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax edi +
jl loc_103EF0D  +
mov eax [ebp+var_301C] +
mov [ebp+var_30C4] eax +
mov eax [ebp+var_3018] +
mov [ebp+var_30B0] eax +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1132h  +
push [ebp+hWnd]  +
call esi  +
lea edx [ebp+var_3020] +
mov [ebp+wParam] eax +
mov eax [ebp+var_3008] +
push edx  +
mov [ebp+var_3020] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax edi +
jge loc_103EE6A  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103EE6A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103EE6A  +
push eax  +
push offset dword_100B0C4  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax [ebp+wParam] +
mov [ebp+var_306C] eax +
xor eax eax +
cmp word ptr [ebp+var_3020] di +
mov [ebp+var_3070] 8 +
setnz al  +
mov [ebp+var_3064] 0F000h +
inc eax  +
shl eax 0Ch +
mov [ebp+var_3068] eax +
lea eax [ebp+var_3070] +
push eax  +
push edi  +
push 113Fh  +
push [ebp+hWnd]  +
call esi  +
cmp [ebp+var_3014] edi +
jz loc_103EED0  +
mov [ebp+var_3014] 1 +
cmp word ptr [ebp+var_3020] di +
jz loc_103EED6  +
mov [ebp+var_3014] edi +
cmp [ebp+var_3010] edi +
jz loc_103EEF1  +
mov [ebp+var_3010] 1 +
cmp word ptr [ebp+var_3020] di +
jnz loc_103EEF7  +
mov [ebp+var_3010] edi +
cmp [ebp+var_301C] edi +
jz loc_103EF34  +
push [ebp+var_301C]  +
call ds:SysFreeString  +
jmp loc_103EF34  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103EF34  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103EF34  +
push eax  +
push offset dword_100B0C4  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax [ebp+var_3008] +
cmp eax edi +
jz loc_103EF4A  +
mov [ebp+var_3008] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+var_3018]  +
mov eax [ebp+var_3018] +
cmp eax [ebx+40h] +
jb loc_103ED89  +
or [ebp+var_30B0] 0FFFFFFFFh +
lea eax [ebp+var_2804] +
mov [ebp+var_30C4] eax +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1132h  +
push [ebp+hWnd]  +
mov [ebp+var_3070] 8 +
call esi  +
mov [ebp+var_306C] eax +
mov eax [ebx+2Ch] +
xor ecx ecx +
mov [ebp+var_3064] 0F000h +
cmp [eax+8750h] edi +
lea eax [ebp+var_3070] +
setnz cl  +
push eax  +
push edi  +
push 113Fh  +
push [ebp+hWnd]  +
inc ecx  +
shl ecx 0Ch +
mov [ebp+var_3068] ecx +
call esi  +
mov eax [ebx+2Ch] +
mov eax [eax+8750h] +
push edi  +
push [ebp+var_3028]  +
mov ecx ebx +
mov [ebp+var_3030] eax +
call sub_103E087  +
mov eax [ebp+var_3010] +
test [ebp+var_3030] eax +
jnz loc_103F023  +
mov ecx [ebp+var_3014] +
xor eax eax +
cmp [ebp+var_3030] edi +
setz al  +
test eax ecx +
jnz loc_103F023  +
push [ebp+var_3028]  +
push 2  +
push 1102h  +
push [ebp+hWnd]  +
call esi  +
mov [ebp+var_302C] edi +
jmp loc_103F02D  +
xor edi edi +
xor eax eax +
inc eax  +
cmp [ebp+var_302C] eax +
jnz loc_103F04C  +
lea ecx [ebp+var_2004] +
mov [ebp+var_30C4] ecx +
mov [ebp+var_3048] eax +
jmp loc_103F06A  +
cmp [ebp+var_302C] edi +
jnz loc_103F65C  +
lea eax [ebp+var_1804] +
mov [ebp+var_30C4] eax +
mov [ebp+var_3048] edi +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1132h  +
push [ebp+hWnd]  +
mov [ebp+lParam] 0FFFF0000h +
mov [ebp+var_30D8] 0FFFF0002h +
call esi  +
mov [ebp+var_3040] eax +
mov [ebp+lParam] eax +
xor eax eax +
inc eax  +
mov [ebp+var_30D8] 0FFFF0002h +
mov [ebp+var_3010] eax +
mov [ebp+var_3014] eax +
mov [ebp+var_3030] edi +
mov [ebp+var_3020] edi +
cmp [ebp+var_3044] edi +
jbe loc_103F520  +
mov eax [ebx+34h] +
lea edx [ebp+var_3008] +
push edx  +
push [ebp+var_3020]  +
mov [ebp+var_3008] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax edi +
jge loc_103F124  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103F4F2  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103F4F2  +
push eax  +
push offset dword_100B0C4  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_103F4F2  +
push [ebp+var_3008]  +
lea ecx [ebp+var_3090] +
push dword ptr [ebx+34h]  +
call sub_1030817  +
lea ecx [ebp+var_3090] +
call sub_103E9D6  +
lea ecx [ebp+var_3090] +
test al al +
jnz loc_103F4ED  +
call sub_103E8F3  +
lea ecx [ebp+var_3090] +
test al al +
jnz loc_103F4ED  +
call sub_103E285  +
lea ecx [ebp+var_3090] +
test al al +
jnz loc_103F4ED  +
call sub_102ABD2  +
test al al +
jz loc_103F194  +
cmp [ebp+var_3048] edi +
jz loc_103F4E7  +
inc [ebp+var_3030]  +
jmp loc_103F1A0  +
cmp [ebp+var_3048] edi +
jnz loc_103F4E7  +
lea ecx [ebp+var_3090] +
call sub_103E1D5  +
mov [ebp+var_30C4] eax +
cmp eax edi +
jnz loc_103F1C1  +
lea eax [ebp+Buffer] +
mov [ebp+var_30C4] eax +
mov eax [ebp+var_3020] +
mov [ebp+var_30B0] eax +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1132h  +
push [ebp+hWnd]  +
call esi  +
lea edx [ebp+var_3024] +
mov [ebp+wParam] eax +
mov eax [ebp+var_3008] +
push edx  +
mov [ebp+var_3024] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax edi +
jge loc_103F22C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103F22C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103F22C  +
push eax  +
push offset dword_100B0C4  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov eax [ebp+wParam] +
mov [ebp+var_306C] eax +
xor eax eax +
cmp word ptr [ebp+var_3024] di +
mov [ebp+var_3070] 8 +
setnz al  +
mov [ebp+var_3064] 0F000h +
inc eax  +
shl eax 0Ch +
mov [ebp+var_3068] eax +
lea eax [ebp+var_3070] +
push eax  +
push edi  +
push 113Fh  +
push [ebp+hWnd]  +
call esi  +
cmp word ptr [ebp+var_3024] di +
jz loc_103F28D  +
push [ebp+wParam]  +
mov ecx ebx +
call sub_103E52A  +
cmp [ebp+var_3014] edi +
jz loc_103F2A8  +
mov [ebp+var_3014] 1 +
cmp word ptr [ebp+var_3024] di +
jz loc_103F2AE  +
mov [ebp+var_3014] edi +
cmp [ebp+var_3010] edi +
jz loc_103F2C9  +
mov [ebp+var_3010] 1 +
cmp word ptr [ebp+var_3024] di +
jnz loc_103F2CF  +
mov [ebp+var_3010] edi +
xor eax eax +
inc eax  +
lea ecx [ebp+var_3090] +
mov [ebp+var_303C] eax +
mov [ebp+var_301C] eax +
mov [ebp+var_3084] edi +
call sub_1031B4A  +
mov [ebp+var_3028] eax +
cmp eax 0FFFFFFFFh +
jz loc_103F4CF  +
mov eax [ebx+34h] +
lea edx [ebp+var_3018] +
push edx  +
push [ebp+var_3028]  +
mov [ebp+var_3018] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax edi +
jge loc_103F352  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103F47A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103F47A  +
push eax  +
push offset dword_100B0C4  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_103F47A  +
push [ebp+var_3018]  +
lea ecx [ebp+var_3068] +
push dword ptr [ebx+34h]  +
call sub_1030817  +
mov eax [ebp+wParam] +
mov [ebp+var_3154] eax +
mov eax [ebp+var_3028] +
lea ecx [ebp+var_3068] +
mov [ebp+var_3150] 0FFFF0002h +
mov [ebp+var_314C] 5 +
mov [ebp+var_3128] eax +
call sub_103E1D5  +
mov [ebp+var_313C] eax +
cmp eax edi +
jnz loc_103F3B3  +
lea eax [ebp+Buffer] +
mov [ebp+var_313C] eax +
lea eax [ebp+var_3154] +
push eax  +
push edi  +
push 1132h  +
push [ebp+hWnd]  +
call esi  +
lea ecx [ebp+var_3068] +
mov [ebp+var_3028] eax +
call sub_102ACC9  +
mov ecx [ebp+var_3028] +
movzx ax al +
movzx eax ax +
mov [ebp+var_3100] ecx +
xor ecx ecx +
cmp ax di +
setnz cl  +
mov [ebp+var_3024] eax +
lea eax [ebp+var_3104] +
push eax  +
push edi  +
push 113Fh  +
push [ebp+hWnd]  +
inc ecx  +
shl ecx 0Ch +
mov [ebp+var_3104] 8 +
mov [ebp+var_30F8] 0F000h +
mov [ebp+var_30FC] ecx +
call esi  +
cmp [ebp+var_303C] edi +
jz loc_103F448  +
mov [ebp+var_303C] 1 +
cmp word ptr [ebp+var_3024] di +
jz loc_103F44E  +
mov [ebp+var_303C] edi +
cmp [ebp+var_301C] edi +
jz loc_103F469  +
mov [ebp+var_301C] 1 +
cmp word ptr [ebp+var_3024] di +
jnz loc_103F46F  +
mov [ebp+var_301C] edi +
lea ecx [ebp+var_3068] +
call sub_10308D2  +
mov eax [ebp+var_3018] +
cmp eax edi +
jz loc_103F490  +
mov [ebp+var_3018] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_3090] +
call sub_1031B4A  +
mov [ebp+var_3028] eax +
cmp eax 0FFFFFFFFh +
jnz loc_103F2FE  +
cmp [ebp+var_303C] edi +
jnz loc_103F4CF  +
cmp [ebp+var_301C] edi +
jnz loc_103F4CF  +
push [ebp+wParam]  +
push 2  +
push 1102h  +
push [ebp+hWnd]  +
call esi  +
mov eax [ebp+var_303C] +
and [ebp+var_3010] eax +
mov eax [ebp+var_301C] +
and [ebp+var_3014] eax +
lea ecx [ebp+var_3090] +
call sub_10308D2  +
mov eax [ebp+var_3008] +
cmp eax edi +
jz loc_103F508  +
mov [ebp+var_3008] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc [ebp+var_3020]  +
mov eax [ebp+var_3020] +
cmp eax [ebp+var_3044] +
jb loc_103F0D0  +
xor eax eax +
lea edi [ebp+var_309C] +
stos   +
stos   +
stos   +
mov eax [ebp+var_3040] +
mov [ebp+var_309C] eax +
lea eax [ebp+var_309C] +
push eax  +
push 0  +
push 1115h  +
push [ebp+hWnd]  +
mov [ebp+var_3098] offset loc_103E8D7 +
mov [ebp+var_3094] ebx +
call esi  +
xor edi edi +
cmp [ebp+var_302C] edi +
jnz loc_103F5F6  +
or [ebp+var_30B0] 0FFFFFFFFh +
lea eax [ebp+var_1004] +
mov [ebp+var_30C4] eax +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1132h  +
push [ebp+hWnd]  +
mov [ebp+var_3104] 8 +
call esi  +
mov [ebp+var_3100] eax +
mov eax [ebx+2Ch] +
xor ecx ecx +
mov [ebp+var_30F8] 0F000h +
cmp [eax+8754h] edi +
lea eax [ebp+var_3104] +
setnz cl  +
push eax  +
push edi  +
push 113Fh  +
push [ebp+hWnd]  +
inc ecx  +
shl ecx 0Ch +
mov [ebp+var_30FC] ecx +
call esi  +
mov eax [ebx+2Ch] +
mov eax [eax+8754h] +
and [ebp+var_3010] eax +
xor ecx ecx +
cmp eax edi +
setz cl  +
and [ebp+var_3014] ecx +
push edi  +
push [ebp+var_3040]  +
mov ecx ebx +
call sub_103E087  +
cmp [ebp+var_3010] edi +
jnz loc_103F629  +
cmp [ebp+var_3014] edi +
jnz loc_103F629  +
push [ebp+var_3040]  +
push 2  +
push 1102h  +
push [ebp+hWnd]  +
call esi  +
cmp [ebp+var_302C] 1 +
jnz loc_103F65C  +
xor edi edi +
cmp [ebp+var_3030] edi +
jnz loc_103F655  +
push [ebp+var_3040]  +
push edi  +
push 1101h  +
push [ebp+hWnd]  +
call esi  +
mov [ebx+50h] edi +
jmp loc_103F65C  +
mov dword ptr [ebx+50h] 1 +
inc [ebp+var_302C]  +
cmp [ebp+var_302C] 2 +
jl loc_103F02B  +
mov eax [ebx+2Ch] +
mov esi ds:CheckDlgButton +
xor ecx ecx +
cmp [eax+8744h] ecx +
setnz cl  +
push ecx  +
push 33A7h  +
push [ebp+hDlg]  +
call esi  +
mov eax [ebx+2Ch] +
xor ecx ecx +
cmp [eax+8748h] ecx +
mov edi 33A8h +
setnz cl  +
push ecx  +
push edi  +
push [ebp+hDlg]  +
call esi  +
mov eax [ebx+2Ch] +
mov eax [eax+0C234h] +
test eax eax +
jz loc_103F6F5  +
cmp eax 1 +
jz loc_103F6CC  +
cmp eax 2 +
jz loc_103F6F5  +
jle loc_103F728  +
cmp eax 5 +
jg loc_103F728  +
mov esi ds:EnableWindow +
push 0  +
push dword ptr [ebx+44h]  +
call esi  +
mov ebx ds:GetDlgItem +
push 0  +
push 33A7h  +
push [ebp+hDlg]  +
call ebx  +
push eax  +
call esi  +
push 0  +
jmp loc_103F71C  +
mov esi ds:EnableWindow +
push 1  +
push dword ptr [ebx+44h]  +
call esi  +
mov ebx ds:GetDlgItem +
push 1  +
push 33A7h  +
push [ebp+hDlg]  +
call ebx  +
push eax  +
call esi  +
push 1  +
push edi  +
push [ebp+hDlg]  +
call ebx  +
push eax  +
call esi  +
xor edi edi +
inc edi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub esp 54h +
push ebx  +
push esi  +
push edi  +
push 4Eh  +
pop edx  +
xor ebx ebx +
xor esi esi +
sub eax edx +
jz loc_103FADF  +
sub eax 0C2h +
jz loc_103FAB7  +
dec eax  +
jz loc_103F77C  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jmp loc_103FC6A  +
mov eax 33A4h +
cmp word ptr [ebp+arg_C] ax +
jz loc_103F797  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 111h  +
jmp loc_103FC6A  +
mov esi [ebp+wParam] +
mov edi ds:SendMessageW +
push ebx  +
push ebx  +
mov ebx 110Ah +
push ebx  +
push dword ptr [esi+44h]  +
mov [ebp+lParam] 4 +
call edi  +
push eax  +
push 4  +
push ebx  +
push dword ptr [esi+44h]  +
mov [ebp+arg_10] eax +
call edi  +
mov [ebp+wParam] eax +
test eax eax +
jz loc_103F89F  +
mov eax [ebp+wParam] +
and [ebp+arg_C] 0 +
mov [ebp+var_50] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 113Eh  +
push dword ptr [esi+44h]  +
mov [ebp+lParam] 4 +
call edi  +
cmp [ebp+var_30] 0FFFFFFFFh +
jnz loc_103F813  +
push 0F000h  +
push [ebp+wParam]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
mov ecx [esi+2Ch] +
shr eax 0Ch +
dec eax  +
mov [ecx+8750h] eax +
jmp loc_103F876  +
mov eax [esi+38h] +
mov ecx [eax] +
lea edx [ebp+arg_C] +
push edx  +
push [ebp+var_30]  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_103F876  +
push 0F000h  +
push [ebp+wParam]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
shr eax 0Ch +
dec eax  +
neg eax  +
sbb eax eax +
push eax  +
push ecx  +
call dword ptr [edx+10h]  +
test eax eax +
jge loc_103F876  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_103F876  +
test byte ptr [ecx+1Ch] 4 +
jz loc_103F876  +
push eax  +
push offset dword_100B0C4  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push [ebp+wParam]  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
mov [ebp+wParam] eax +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_103F895  +
and [ebp+arg_C] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+wParam] 0 +
jnz loc_103F7CB  +
mov eax [ebp+arg_10] +
and [ebp+arg_C] 0 +
mov [ebp+arg_8] eax +
cmp [ebp+arg_C] 0 +
jz loc_103F8C3  +
cmp [ebp+arg_C] 1 +
jnz loc_103FA75  +
cmp dword ptr [esi+50h] 0 +
jz loc_103FA75  +
push [ebp+arg_8]  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
push eax  +
push 4  +
push ebx  +
push dword ptr [esi+44h]  +
mov [ebp+arg_8] eax +
call edi  +
mov [ebp+wParam] eax +
jmp loc_103FA6B  +
mov eax [ebp+wParam] +
and [ebp+var_8] 0 +
mov [ebp+var_50] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 113Eh  +
push dword ptr [esi+44h]  +
mov [ebp+lParam] 4 +
call edi  +
cmp [ebp+var_30] 0FFFFFFFFh +
jnz loc_103F937  +
cmp [ebp+arg_C] 0 +
jnz loc_103FA4C  +
push 0F000h  +
push [ebp+wParam]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
mov ecx [esi+2Ch] +
shr eax 0Ch +
dec eax  +
mov [ecx+8754h] eax +
jmp loc_103FA4C  +
mov eax [esi+34h] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+var_30]  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_103F98D  +
push 0F000h  +
push [ebp+wParam]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
push [ebp+var_8]  +
shr eax 0Ch +
push dword ptr [esi+34h]  +
dec eax  +
lea ecx [ebp+var_2C] +
mov [ebp+arg_10] eax +
call sub_1030817  +
cmp [ebp+arg_10] 0 +
lea ecx [ebp+var_2C] +
setnz al  +
movzx eax al +
push eax  +
call sub_102AC78  +
lea ecx [ebp+var_2C] +
call sub_10308D2  +
mov eax [ebp+wParam] +
push 4  +
pop ecx  +
push eax  +
push ecx  +
push ebx  +
push dword ptr [esi+44h]  +
mov [ebp+lParam] ecx +
mov [ebp+var_50] eax +
call edi  +
mov [ebp+arg_10] eax +
test eax eax +
jz loc_103FA4C  +
mov eax [ebp+arg_10] +
and [ebp+var_4] 0 +
mov [ebp+var_50] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 113Eh  +
push dword ptr [esi+44h]  +
mov [ebp+lParam] 4 +
call edi  +
mov eax [esi+34h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+var_30]  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_103FA23  +
push 0F000h  +
push [ebp+arg_10]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
push [ebp+var_4]  +
shr eax 0Ch +
push dword ptr [esi+34h]  +
dec eax  +
lea ecx [ebp+var_2C] +
mov [ebp+var_C] eax +
call sub_1030817  +
cmp [ebp+var_C] 0 +
lea ecx [ebp+var_2C] +
setnz al  +
movzx eax al +
push eax  +
call sub_102AC78  +
lea ecx [ebp+var_2C] +
call sub_10308D2  +
push [ebp+arg_10]  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
mov [ebp+arg_10] eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_103FA42  +
and [ebp+var_4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+arg_10] 0 +
jnz loc_103F9AC  +
push [ebp+wParam]  +
push 1  +
push ebx  +
push dword ptr [esi+44h]  +
call edi  +
mov [ebp+wParam] eax +
mov eax [ebp+var_8] +
test eax eax +
jz loc_103FA6B  +
and [ebp+var_8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+wParam] 0 +
jnz loc_103F8E2  +
inc [ebp+arg_C]  +
cmp [ebp+arg_C] 2 +
jl loc_103F8A9  +
mov edi ds:IsDlgButtonChecked +
push 33A7h  +
push [ebp+hDlg]  +
call edi  +
mov ecx [esi+2Ch] +
push 33A8h  +
push [ebp+hDlg]  +
mov [ecx+8744h] eax +
call edi  +
mov ecx [esi+2Ch] +
xor esi esi +
inc esi  +
push esi  +
push [ebp+hDlg]  +
mov [ecx+8748h] eax +
jmp loc_103FAD4  +
mov edi [ebp+hDlg] +
mov ecx [ebp+wParam] +
push edi  +
mov [ecx+4] edi +
call sub_103EAE6  +
test eax eax +
jz loc_103FAD1  +
xor esi esi +
jmp loc_103FC77  +
push 3  +
push edi  +
call ds:EndDialog  +
jmp loc_103FC77  +
mov eax [ebp+arg_10] +
mov ecx [eax+4] +
cmp ecx 33A9h +
jnz loc_103FB2C  +
mov ecx [eax+8] +
cmp ecx 0FFFFFFFCh +
jz loc_103FAFE  +
cmp ecx 0FFFFFFFEh +
jnz loc_103FC65  +
mov eax [ebp+wParam] +
mov ecx [eax+2Ch] +
push offset aMstsc_map_loca  +
push dword ptr [ecx+135Ch]  +
mov ecx [eax+30h] +
push offset aRemote_desktop  +
push offset aMshelpWindow_2  +
push dword ptr [eax+4]  +
call sub_102817E  +
xor esi esi +
inc esi  +
jmp loc_103FC77  +
cmp ecx 33A5h +
jnz loc_103FC65  +
mov ecx [eax+8] +
cmp ecx 0FFFFFFFEh +
jnz loc_103FBE3  +
lea eax [ebp+Point] +
push eax  +
call ds:GetCursorPos  +
mov esi [ebp+wParam] +
lea eax [ebp+Point] +
push eax  +
push dword ptr [esi+44h]  +
call ds:ScreenToClient  +
mov edi ds:SendMessageW +
lea eax [ebp+Point] +
push eax  +
push ebx  +
push 1111h  +
push dword ptr [esi+44h]  +
call edi  +
test [ebp+var_14] 40h +
jz loc_103FBCF  +
push 0F000h  +
push [ebp+var_10]  +
push 1127h  +
push dword ptr [esi+44h]  +
call edi  +
mov ebx eax +
push 0  +
pop eax  +
shr ebx 0Ch +
dec ebx  +
setz al  +
mov ecx esi +
push eax  +
push [ebp+var_10]  +
call sub_103DFE6  +
push [ebp+var_10]  +
push 3  +
push 110Ah  +
push dword ptr [esi+44h]  +
call edi  +
mov [ebp+wParam] eax +
test ebx ebx +
jnz loc_103FBC2  +
push [ebp+var_10]  +
mov ecx esi +
call sub_103E52A  +
push [ebp+var_10]  +
mov ecx esi +
push [ebp+wParam]  +
call sub_103E087  +
push [ebp+var_10]  +
push 9  +
push 110Bh  +
push dword ptr [esi+44h]  +
call edi  +
jmp loc_103FB24  +
cmp ecx 0FFFFFE64h +
jnz loc_103FC65  +
cmp word ptr [eax+0Ch] 20h +
jnz loc_103FC77  +
mov edi [ebp+wParam] +
mov esi ds:SendMessageW +
push ebx  +
push 9  +
mov ebx 110Ah +
push ebx  +
push dword ptr [edi+44h]  +
call esi  +
push 0F000h  +
push eax  +
push 1127h  +
push dword ptr [edi+44h]  +
mov [ebp+wParam] eax +
call esi  +
shr eax 0Ch +
dec eax  +
push 0  +
mov [ebp+hDlg] eax +
pop eax  +
setz al  +
mov ecx edi +
push eax  +
push [ebp+wParam]  +
call sub_103DFE6  +
push [ebp+wParam]  +
push 3  +
push ebx  +
push dword ptr [edi+44h]  +
call esi  +
cmp [ebp+hDlg] 0 +
mov esi eax +
jnz loc_103FC55  +
push [ebp+wParam]  +
mov ecx edi +
call sub_103E52A  +
push [ebp+wParam]  +
mov ecx edi +
push esi  +
call sub_103E087  +
jmp loc_103FB24  +
push eax  +
push [ebp+arg_C]  +
push edx  +
push [ebp+hDlg]  +
push [ebp+wParam]  +
call sub_1040058  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push 0  +
mov esi ecx +
call sub_1040242  +
mov edi eax +
test edi edi +
jnz loc_103FCCD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_103FD5B  +
test byte ptr [eax+1Ch] 4 +
jz loc_103FD5B  +
push offset dword_100B354  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_103FD5B  +
mov eax [esi+2Ch] +
mov esi [eax+84E8h] +
mov eax [eax+84E4h] +
sub eax 0 +
mov ecx 33B8h +
jz loc_103FCFE  +
dec eax  +
jz loc_103FCF5  +
dec eax  +
jnz loc_103FCFE  +
mov [ebp+nIDCheckButton] 33B9h +
jmp loc_103FD01  +
mov [ebp+nIDCheckButton] 33BAh +
jmp loc_103FD01  +
mov [ebp+nIDCheckButton] ecx +
push ebx  +
push [ebp+nIDCheckButton]  +
mov ebx ds:CheckRadioButton +
push 33BAh  +
push ecx  +
push [ebp+hDlg]  +
call ebx  +
neg esi  +
sbb esi esi +
mov edi 33BEh +
add esi edi +
push esi  +
push edi  +
lea esi [edi-1] +
push esi  +
push [ebp+hDlg]  +
call ebx  +
cmp [ebp+nIDCheckButton] 33BAh +
jnz loc_103FD57  +
push 0  +
push esi  +
push [ebp+hDlg]  +
mov esi ds:GetDlgItem +
call esi  +
mov ebx ds:EnableWindow +
push eax  +
call ebx  +
push 0  +
push edi  +
push [ebp+hDlg]  +
call esi  +
push eax  +
call ebx  +
xor edi edi +
inc edi  +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
sub eax 110h +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
jz loc_103FE74  +
dec eax  +
jz loc_103FD95  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jmp loc_103FE64  +
movzx ecx word ptr [ebp+arg_C] +
mov eax 33B8h +
cmp ecx eax +
jl loc_103FE59  +
cmp ecx 33B9h +
jle loc_103FE2C  +
lea edi [eax+2] +
cmp ecx edi +
jz loc_103FE2F  +
cmp ecx 33BBh +
jnz loc_103FE59  +
mov esi ds:IsDlgButtonChecked +
push eax  +
push [ebp+hDlg]  +
call esi  +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jnz loc_103FDD8  +
xor eax eax +
jmp loc_103FDFB  +
push 33B9h  +
push [ebp+hDlg]  +
call esi  +
cmp eax ebx +
jnz loc_103FDEB  +
push 2  +
pop eax  +
jmp loc_103FDFB  +
push edi  +
push [ebp+hDlg]  +
call esi  +
xor ecx ecx +
cmp eax ebx +
setnz cl  +
inc ecx  +
mov eax ecx +
mov edi [ebp+arg_0] +
mov ecx [edi+2Ch] +
push eax  +
call sub_102A065  +
push 33BDh  +
push [ebp+hDlg]  +
call esi  +
mov ecx [edi+2Ch] +
dec eax  +
neg eax  +
sbb eax eax +
push ebx  +
push [ebp+hDlg]  +
inc eax  +
mov [ecx+84E8h] eax +
call ds:EndDialog  +
jmp loc_103FE87  +
xor ebx ebx +
inc ebx  +
mov esi ds:GetDlgItem +
push ebx  +
push 33BDh  +
push [ebp+hDlg]  +
call esi  +
mov edi ds:EnableWindow +
push eax  +
call edi  +
push ebx  +
push 33BEh  +
push [ebp+hDlg]  +
call esi  +
push eax  +
call edi  +
jmp loc_103FE95  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 111h  +
push [ebp+hDlg]  +
push [ebp+arg_0]  +
call sub_1040058  +
mov [ebp+var_4] eax +
jmp loc_103FE95  +
mov esi [ebp+hDlg] +
mov ecx [ebp+arg_0] +
push esi  +
mov [ecx+4] esi +
call sub_103FC85  +
test eax eax +
jz loc_103FE8C  +
mov [ebp+var_4] ebx +
jmp loc_103FE95  +
push 3  +
push esi  +
call ds:EndDialog  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 32EAh  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_103FF3D  +
push [ebp+arg_8]  +
lea ecx [esi+2Ch] +
mov dword ptr [esi] offset off_100B364 +
and dword ptr [ecx] 0 +
call sub_101C97A  +
mov [esi+30h] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+2Ch] +
push 0  +
mov ecx esi +
mov dword ptr [edi] offset off_100B364 +
call sub_101C97A  +
mov eax [esi] +
test eax eax +
jz loc_103FF09  +
and dword ptr [esi] 0 +
push eax  +
call sub_1018A83  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1040027  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103FEE2  +
test byte ptr [ebp+8] 1 +
jz loc_103FF31  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1052A87  +
xor eax eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov dword ptr [esi] offset off_100B398 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
test eax eax +
jz loc_103FF86  +
push eax  +
call sub_105D688  +
and dword ptr [esi+24h] 0 +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_103FF97  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [esi+20h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
push edi  +
mov edi ds:SelectPalette +
test eax eax +
jz loc_103FFD6  +
mov eax [eax+0Ch] +
test eax eax +
jz loc_103FFD6  +
push 0  +
push eax  +
push ebx  +
call edi  +
push ebx  +
mov [ebp+var_4] eax +
call ds:RealizePalette  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
push 10h  +
lea eax [ebp+rc] +
push eax  +
push ebx  +
call ds:FillRect  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_103FFFD  +
push ebx  +
call sub_103BB27  +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_104000A  +
push ebx  +
call sub_1053848  +
cmp [ebp+var_4] 0 +
jz loc_1040018  +
push 1  +
push [ebp+var_4]  +
push ebx  +
call edi  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
mov dword ptr [esi] offset off_100B398 +
test ecx ecx +
jz loc_1040044  +
push 1  +
call sub_1022CB4  +
and dword ptr [esi+28h] 0 +
mov ecx esi +
call sub_103FF70  +
mov ecx esi +
pop esi  +
jmp sub_1052ABD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 14h +
jz loc_1040069  +
pop ebp  +
jmp sub_10534BF  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
call sub_103FF9E  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push 3Ch  +
mov esi ecx +
mov [ebp+var_4] 80004005h +
call sub_105D670  +
xor ebx ebx +
mov [esi+24h] eax +
cmp eax ebx +
jz loc_10401E9  +
push 3Ch  +
push ebx  +
push eax  +
call memset  +
mov eax [esi+24h] +
mov [eax] ebx +
mov eax [esi+24h] +
mov dword ptr [eax+8] 14h +
mov eax [esi+24h] +
mov dword ptr [eax+0Ch] 4B7h +
mov eax [ebp+arg_4] +
add esp 0Ch +
cmp eax ebx +
jz loc_1040103  +
mov edx [esi+24h] +
xor ecx ecx +
inc ecx  +
mov [edx+10h] ecx +
mov edx [esi+24h] +
mov dword ptr [edx+4] 11h +
mov edx [esi+24h] +
mov [edx+14h] eax +
mov eax [esi+24h] +
mov dword ptr [eax+1Ch] 4B5h +
mov eax [esi+24h] +
mov dword ptr [eax+20h] 4B6h +
mov eax [esi+24h] +
mov [eax+24h] ecx +
jmp loc_1040163  +
mov eax [esi+24h] +
mov dword ptr [eax+10h] 2 +
mov eax [esi+24h] +
mov dword ptr [eax+4] 8 +
mov eax [esi+24h] +
mov dword ptr [eax+18h] 4B1h +
mov eax [esi+24h] +
mov dword ptr [eax+1Ch] 4B3h +
mov eax [esi+24h] +
mov dword ptr [eax+20h] 4B4h +
mov eax [esi+24h] +
mov [eax+24h] ebx +
mov eax [esi+24h] +
mov dword ptr [eax+2Ch] 4B2h +
mov eax [esi+24h] +
mov dword ptr [eax+30h] 4B5h +
mov eax [esi+24h] +
mov dword ptr [eax+34h] 4B6h +
mov eax [esi+24h] +
mov dword ptr [eax+38h] 1 +
push edi  +
push 34h  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_1040188  +
push ebx  +
call sub_102736E  +
push eax  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
push [ebp+arg_0]  +
call sub_103B94C  +
jmp loc_104018A  +
xor eax eax +
mov [esi+20h] eax +
pop edi  +
cmp eax ebx +
jz loc_10401CE  +
push dword ptr [esi+24h]  +
mov ecx eax +
call sub_103C0DB  +
test eax eax +
jz loc_10401A8  +
mov [ebp+var_4] ebx +
jmp loc_1040234  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040214  +
test byte ptr [eax+1Ch] 4 +
jz loc_1040214  +
push offset dword_100B388  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1040214  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104020D  +
test byte ptr [eax+1Ch] 4 +
jz loc_104020D  +
push offset dword_100B388  +
push 0Bh  +
jmp loc_1040202  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104020D  +
test byte ptr [eax+1Ch] 4 +
jz loc_104020D  +
push offset dword_100B388  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_4] 8007000Eh +
mov eax [esi+24h] +
cmp eax ebx +
jz loc_1040224  +
push eax  +
call sub_105D688  +
mov [esi+24h] ebx +
mov ecx [esi+20h] +
cmp ecx ebx +
jz loc_1040234  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [esi+20h] ebx +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+4]  +
call sub_104007D  +
test eax eax +
jge loc_104028D  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1040353  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1040353  +
push eax  +
push offset dword_100B388  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_1040353  +
mov eax [esi+20h] +
push ebx  +
mov ebx [eax+14h] +
mov eax [eax+0Ch] +
push edi  +
mov [ebp+arg_0] eax +
call sub_102736E  +
cmp eax 78h +
jnb loc_10402AC  +
mov edi 271h +
jmp loc_10402BC  +
cmp eax 90h +
sbb edi edi +
and edi 0FFFFFFFEh +
add edi 275h +
push 34h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10402DC  +
push [ebp+arg_0]  +
mov ecx eax +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+4]  +
call sub_10537D9  +
jmp loc_10402DE  +
xor eax eax +
pop edi  +
mov [esi+28h] eax +
pop ebx  +
test eax eax +
jz loc_104032F  +
mov ecx eax +
call sub_1053592  +
test eax eax +
jnz loc_104032A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040316  +
test byte ptr [eax+1Ch] 4 +
jz loc_1040316  +
push offset dword_100B388  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_1040324  +
push 1  +
call sub_1022CB4  +
and dword ptr [esi+28h] 0 +
jmp loc_1040353  +
xor eax eax +
inc eax  +
jmp loc_1040355  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040353  +
test byte ptr [eax+1Ch] 4 +
jz loc_1040353  +
push offset dword_100B388  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1040027  +
test byte ptr [ebp+8] 1 +
jz loc_1040379  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 32E5h  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_103FF3D  +
mov eax [ebp+arg_8] +
and dword ptr [esi+34h] 0 +
and dword ptr [esi+38h] 0 +
mov [esi+2Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+30h] eax +
mov dword ptr [esi] offset off_100B3E8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+34h] +
and dword ptr [esi+2Ch] 0 +
and dword ptr [esi+30h] 0 +
mov dword ptr [esi] offset off_100B3E8 +
test ecx ecx +
jz loc_10403E8  +
push 1  +
call sub_1036117  +
and dword ptr [esi+34h] 0 +
mov ecx esi +
pop esi  +
jmp sub_1040027  +
***
mov eax [ecx+2Ch] +
cmp dword ptr [eax+0C454h] 0 +
push esi  +
jnz loc_104042B  +
xor esi esi +
inc esi  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040432  +
test byte ptr [eax+1Ch] 1 +
jz loc_1040432  +
push offset dword_100B3BC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1040432  +
call sub_105340F  +
mov esi eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov ebx ecx +
mov eax [ebx+2Ch] +
mov esi 136Ch +
push edi  +
add eax esi +
push eax  +
call sub_1040242  +
mov edi eax +
test edi edi +
jnz loc_104048F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10405E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10405E8  +
push offset dword_100B3BC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_10405E8  +
push 65h  +
mov ecx ebx +
call sub_1052AC9  +
mov eax [ebx+2Ch] +
add eax esi +
push eax  +
push dword ptr [ebx+4]  +
call ds:SetWindowTextW  +
mov eax [ebx+2Ch] +
lea ecx [eax+54h] +
call sub_1034881  +
push eax  +
mov esi 335Eh +
push esi  +
push dword ptr [ebx+4]  +
call ds:SetDlgItemTextW  +
push 1  +
push esi  +
mov ecx ebx +
call sub_10531AA  +
xor esi esi +
cmp [ebx+34h] esi +
jnz loc_10404FE  +
push 834h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10404F9  +
mov edx [ebx+2Ch] +
push esi  +
add edx 0CA94h +
push edx  +
push dword ptr [ebx+0Ch]  +
mov ecx eax +
call sub_105C6CB  +
jmp loc_10404FB  +
xor eax eax +
mov [ebx+34h] eax +
push 3366h  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
mov [ebp+hWnd] eax +
cmp [ebx+34h] esi +
jz loc_10405A2  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+4]  +
call sub_1050D43  +
mov edi [ebx+34h] +
add edi 1Ch +
lea esi [ebp+Rect] +
movs   +
movs   +
movs   +
push 32E9h  +
movs   +
push dword ptr [ebx+0Ch]  +
call sub_105DC73  +
test eax eax +
jz loc_10405A2  +
push dword ptr [ebx+34h]  +
push offset DialogFunc  +
push dword ptr [ebx+4]  +
push eax  +
push dword ptr [ebx+0Ch]  +
call ds:CreateDialogIndirectParamW  +
push 5  +
push eax  +
mov [ebx+38h] eax +
call ds:ShowWindow  +
push 335Eh  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
push 3  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push eax  +
push dword ptr [ebx+38h]  +
call ds:SetWindowPos  +
mov eax [ebx+2Ch] +
lea ecx [eax+54h] +
call sub_1034881  +
mov ecx [ebx+34h] +
push eax  +
call sub_105C328  +
mov eax [ebx+2Ch] +
mov eax [eax+0C234h] +
push ds:bEnable[eax*4]  +
xor edi edi +
inc edi  +
push edi  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
mov esi ds:ShowWindow +
push 0  +
push [ebp+hWnd]  +
call esi  +
push 2  +
push 2  +
push dword ptr [ebx+8]  +
mov ecx ebx +
call sub_1052B2B  +
push 9  +
push dword ptr [ebx+4]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10403C3  +
test byte ptr [ebp+8] 1 +
jz loc_104060E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor esi esi +
sub eax 53h +
jz loc_10406A8  +
sub eax 0BDh +
jz loc_1040687  +
dec eax  +
jz loc_104064D  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+hDlg]  +
push [ebp+arg_0]  +
call sub_1040058  +
mov esi eax +
jmp loc_10406C2  +
movzx eax word ptr [ebp+arg_C] +
dec eax  +
jz loc_1040668  +
sub eax 335Eh +
jz loc_10406A8  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 111h  +
jmp loc_104063E  +
mov eax [ebp+arg_0] +
mov ecx [eax+34h] +
test ecx ecx +
jz loc_1040677  +
call sub_105B3A7  +
push 65h  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor esi esi +
inc esi  +
jmp loc_10406C2  +
mov ecx [ebp+arg_0] +
mov ebx [ebp+hDlg] +
mov [ecx+4] ebx +
call sub_104043B  +
test eax eax +
jz loc_104069D  +
xor esi esi +
jmp loc_10406C2  +
push 3  +
push ebx  +
call ds:EndDialog  +
jmp loc_10406C2  +
mov eax [ebp+arg_0] +
mov ecx [eax+30h] +
xor esi esi +
push esi  +
inc esi  +
push esi  +
push 0  +
push offset aMshelpWindow_3  +
push dword ptr [eax+4]  +
call sub_102817E  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea eax [edi+edi] +
push eax  +
push 0  +
push [ebp+arg_0]  +
mov esi ecx +
call memset  +
mov eax [esi+4] +
add esp 0Ch +
add eax 1774h +
jnz loc_1040721  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104071A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104071A  +
push offset dword_100B484  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 80004005h +
jmp loc_1040791  +
push eax  +
push offset aRemoteapplic_9  +
push offset aSS_0  +
push edi  +
push [ebp+arg_0]  +
call sub_101BDD4  +
mov esi eax +
add esp 14h +
test esi esi +
jge loc_104076A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040791  +
test byte ptr [eax+1Ch] 4 +
jz loc_1040791  +
push esi  +
push offset aStringcchpri_2  +
push offset dword_100B484  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1040791  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040791  +
test byte ptr [eax+1Ch] 2 +
jz loc_1040791  +
push [ebp+arg_0]  +
push offset dword_100B484  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 45Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ecx +
lea ecx [ebp+var_458] +
call sub_1034881  +
push 100h  +
lea eax [ebp+var_40C] +
push eax  +
mov ecx ebx +
call sub_10406CF  +
test eax eax +
jge loc_1040811  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1040897  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1040897  +
push eax  +
push offset aGetregistrysec  +
push offset dword_100B484  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1040897  +
push esi  +
push edi  +
push 2  +
mov esi 104h +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
push offset word_1002174  +
mov edi offset aRemoteapplic_1 +
push edi  +
lea eax [ebp+var_40C] +
push eax  +
call sub_1051DEC  +
lea eax [ebp+var_45C] +
push eax  +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
call sub_102AAF4  +
test eax eax +
jl loc_1040895  +
cmp [ebp+var_45C] 0 +
jbe loc_1040895  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040886  +
test byte ptr [eax+1Ch] 2 +
jz loc_1040886  +
lea ecx [ebp+var_20C] +
push ecx  +
push edi  +
push offset dword_100B484  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
mov ecx [ebx+4] +
lea eax [ebp+var_20C] +
push eax  +
call sub_102BC70  +
pop edi  +
pop esi  +
lea ecx [ebp+var_458] +
call nullsub_3  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 20F0h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+var_20B4] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi]  +
lea ecx [ebp+var_20F0] +
push dword ptr [esi+4]  +
mov [ebp+var_20AC] eax +
push edi  +
push 0  +
call sub_1040385  +
push ebx  +
push dword ptr [esi]  +
xor ebx ebx +
push dword ptr [esi+4]  +
lea ecx [ebp+var_20A8] +
push edi  +
push ebx  +
call sub_1042E89  +
mov edi [ebp+var_20AC] +
cmp edi ebx +
jz loc_104091C  +
mov [edi] ebx +
mov ecx esi +
call sub_104079E  +
lea ecx [ebp+var_20A8] +
call sub_1042D0D  +
dec eax  +
dec eax  +
jz loc_1040AEB  +
sub eax 63h +
jz loc_1040B19  +
dec eax  +
mov ebx offset lpReserved +
jz loc_1040A51  +
dec eax  +
jz loc_1040A2E  +
dec eax  +
jnz loc_1040A89  +
mov edi 400h +
push edi  +
xor ebx ebx +
lea eax [ebp+var_804] +
push ebx  +
push eax  +
call memset  +
push edi  +
lea eax [ebp+var_C04] +
push ebx  +
push eax  +
call memset  +
mov edi 200h +
push edi  +
lea eax [ebp+var_404] +
push ebx  +
push eax  +
call memset  +
push edi  +
lea eax [ebp+var_204] +
push ebx  +
push eax  +
call memset  +
mov ecx [esi+4] +
add esp 30h +
mov ebx 100h +
push ebx  +
lea eax [ebp+var_204] +
push eax  +
add ecx 54h +
call sub_105B10A  +
push 0  +
push edi  +
lea eax [ebp+var_804] +
push eax  +
lea eax [ebp+var_20B4] +
push eax  +
push offset aTermsrv  +
lea eax [ebp+var_204] +
push eax  +
call sub_105A4D8  +
push ebx  +
lea eax [ebp+var_404] +
push eax  +
push edi  +
lea eax [ebp+var_C04] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
call ds:CredUIParseUserNameW  +
mov ecx [esi+4] +
test eax eax +
jnz loc_1040A1B  +
lea eax [ebp+var_C04] +
push eax  +
call sub_102BA7C  +
lea eax [ebp+var_404] +
push eax  +
mov ecx [esi+4] +
call sub_102BB29  +
jmp loc_1040A27  +
lea eax [ebp+var_804] +
push eax  +
call sub_102BA7C  +
xor edi edi +
jmp loc_1040AF0  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1040A89  +
test byte ptr [eax+1Ch] 2 +
jz loc_1040A89  +
push offset dword_100B484  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1040A89  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1040A72  +
test byte ptr [eax+1Ch] 2 +
jz loc_1040A72  +
push offset dword_100B484  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
test edi edi +
jz loc_1040A7C  +
mov dword ptr [edi] 1 +
mov eax [esi+4] +
mov dword ptr [eax+70A4h] 1 +
lea ecx [ebp+var_20F0] +
call sub_10403F5  +
cmp eax 1 +
jz loc_1040A27  +
cmp eax 65h +
jnz loc_1040AEB  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1040ABF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1040ABF  +
push offset dword_100B484  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [esi+4] +
push 1  +
lea eax [ecx+0C464h] +
push eax  +
call sub_102F9B8  +
test eax eax +
jge loc_1040AEB  +
mov eax [esi+4] +
push 1  +
add eax 0C464h +
push eax  +
push 407h  +
push 0  +
call sub_105AE15  +
mov edi 40200h +
lea ecx [ebp+var_20A8] +
call sub_1042EEE  +
lea ecx [ebp+var_20F0] +
call sub_10403C3  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
lea eax [ebp+var_20B0] +
push eax  +
lea eax [ebp+var_20AC] +
push eax  +
lea ecx [ebp+var_20A8] +
mov [ebp+var_20AC] ebx +
mov [ebp+var_20B0] ebx +
call sub_1042969  +
mov edi eax +
cmp edi ebx +
jge loc_1040B70  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040AF0  +
test byte ptr [eax+1Ch] 4 +
jz loc_1040AF0  +
push edi  +
push offset aGetselectedcre  +
push offset dword_100B484  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1040AF0  +
push [ebp+var_20AC]  +
mov ecx [esi+4] +
call sub_102BA7C  +
cmp [ebp+var_20B0] ebx +
jz loc_1040A27  +
push [ebp+var_20B0]  +
jmp loc_1040A11  +
***
mov edi edi +
push esi  +
lea esi [ecx+4] +
push 0  +
mov ecx esi +
call sub_101C97A  +
mov eax [esi] +
test eax eax +
jz loc_1040BB8  +
and dword ptr [esi] 0 +
push eax  +
call sub_1018A83  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1040BE2  +
cmp [ebp+arg_4] 0 +
jz loc_1040BE2  +
push [ebp+arg_4]  +
mov [ecx] eax +
add ecx 4 +
call sub_101C97A  +
xor eax eax +
jmp loc_1040BE7  +
mov eax 80070057h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1040C02  +
cmp cx 20h +
jnz loc_1040C0A  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1040BFA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 22h +
push 20h  +
pop edx  +
jnz loc_1040C30  +
push 22h  +
pop edx  +
jmp loc_1040C2E  +
cmp cx dx +
jz loc_1040C3D  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1040C29  +
cmp [eax] dx +
jnz loc_1040C47  +
push 22h  +
pop ecx  +
cmp cx dx +
jnz loc_1040C47  +
inc eax  +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 1098h  +
lea eax [esi+4] +
push 0  +
push eax  +
mov dword ptr [esi] offset off_100B5A4 +
call memset  +
add esp 0Ch +
mov dword ptr [esi+0A4Ch] 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0E80h] +
mov dword ptr [esi] offset off_100B5A4 +
test eax eax +
jz loc_1040C9C  +
push eax  +
call sub_105D688  +
mov esi [esi+0E74h] +
test esi esi +
jz loc_1040CAC  +
push esi  +
call sub_105D688  +
pop esi  +
retn   +
***
xor eax eax +
cmp [ecx+20Ch] eax +
jz locret_1040CC6  +
cmp [ecx+208h] eax +
jz locret_1040CC6  +
inc eax  +
retn   +
***
mov edx [ecx+20Ch] +
xor eax eax +
push esi  +
mov esi [ecx+208h] +
inc eax  +
cmp edx esi +
jz loc_1040CFC  +
test edx edx +
jnz loc_1040CEE  +
mov dword ptr [ecx+20Ch] 258h +
test esi esi +
jnz loc_1040CFC  +
mov dword ptr [ecx+208h] 320h +
mov esi [ecx+20Ch] +
mov edx 0C8h +
test esi esi +
jz loc_1040D29  +
cmp esi edx +
jnb loc_1040D17  +
mov [ecx+20Ch] edx +
jmp loc_1040D29  +
cmp esi 800h +
jbe loc_1040D29  +
mov dword ptr [ecx+20Ch] 800h +
mov esi [ecx+208h] +
test esi esi +
jz loc_1040D46  +
cmp esi edx +
jb loc_1040D40  +
mov edx 1000h +
cmp esi edx +
jbe loc_1040D46  +
mov [ecx+208h] edx +
cmp dword ptr [ecx+838h] 0 +
pop esi  +
jz locret_1040D5B  +
cmp dword ptr [ecx+834h] 0 +
jz locret_1040D5B  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call sub_1040BF0  +
inc eax  +
inc eax  +
push eax  +
call sub_1040BF0  +
mov ebx eax +
push ebx  +
call sub_1040C13  +
mov esi eax +
mov [ebp+var_4] esi +
sub esi ebx +
sar esi 1 +
test esi esi +
jle loc_1040DB0  +
lea eax [esi+esi] +
push eax  +
lea eax [edi+0A50h] +
push ebx  +
push eax  +
call ds:memmove  +
add esp 0Ch +
xor eax eax +
mov [edi+esi*2+0A50h] ax +
mov eax [ebp+var_4] +
sub eax [ebp+arg_0] +
pop edi  +
pop esi  +
sar eax 1 +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 2  +
pop ebx  +
xor esi esi +
push 20h  +
mov [ebp+var_4] esi +
pop edx  +
jmp loc_1040DDF  +
add eax ebx +
cmp [eax] dx +
jz loc_1040DDD  +
movzx ecx word ptr [eax] +
cmp cx 3Dh +
jz loc_1040DF3  +
cmp cx 3Ah +
jnz loc_1040DF5  +
add eax ebx +
cmp [eax] dx +
jz loc_1040DF3  +
movzx ecx word ptr [eax] +
mov edi [ebp+arg_4] +
cmp cx si +
jz loc_1040E3F  +
movzx edx cx +
sub edx 20h +
jz loc_1040E1E  +
sub edx ebx +
jnz loc_1040E24  +
xor ecx ecx +
cmp [ebp+var_4] ecx +
setz cl  +
mov [ebp+var_4] ecx +
jmp loc_1040E31  +
cmp [ebp+var_4] 0 +
jz loc_1040E3D  +
mov edx [ebp+arg_8] +
dec edx  +
cmp esi edx +
jge loc_1040E31  +
mov [edi+esi*2] cx +
inc esi  +
add eax ebx +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1040E05  +
jmp loc_1040E3F  +
add eax ebx +
xor ecx ecx +
mov [edi+esi*2] cx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jnz loc_1040E65  +
xor eax eax +
jmp loc_1040EFB  +
push esi  +
mov esi [ebp+arg_0] +
cmp esi edi +
jnz loc_1040E74  +
xor eax eax +
jmp loc_1040EFA  +
push 20h  +
pop ecx  +
jmp loc_1040E7B  +
inc esi  +
inc esi  +
cmp [esi] cx +
jz loc_1040E79  +
movzx eax word ptr [esi] +
cmp ax 3Dh +
jz loc_1040E8F  +
cmp ax 3Ah +
jnz loc_1040E91  +
inc esi  +
inc esi  +
cmp [esi] cx +
jz loc_1040E8F  +
movzx eax word ptr [esi] +
cmp ax di +
jz loc_1040EF3  +
cmp ax 20h +
jz loc_1040EF3  +
push eax  +
call ds:__imp_iswdigit  +
pop ecx  +
test eax eax +
jz loc_1040ECC  +
movzx eax word ptr [esi] +
sub eax 30h +
cmp eax 9 +
ja loc_1040EF3  +
imul edi edi +
add edi eax +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1040E9E  +
jmp loc_1040EF3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040EF1  +
test byte ptr [eax+1Ch] 4 +
jz loc_1040EF1  +
push esi  +
push offset dword_100B594  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor esi esi +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_1C] ecx +
jmp loc_1040F22  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_1040F20  +
movzx eax word ptr [esi] +
cmp ax 3Dh +
jz loc_1040F37  +
cmp ax 3Ah +
jnz loc_1040F39  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_1040F37  +
push edi  +
xor edi edi +
jmp loc_1040F5F  +
cmp ax 20h +
jz loc_1040F67  +
cmp edi 9 +
jnb loc_1040F5D  +
push eax  +
call ds:towupper  +
mov word ptr [ebp+edi*2+var_18] ax +
pop ecx  +
inc edi  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1040F44  +
xor eax eax +
mov word ptr [ebp+edi*2+var_18] ax +
mov ecx offset aBitmap +
lea eax [ebp+var_18] +
pop edi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1040F9D  +
test dx dx +
jz loc_1040F99  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1040F9D  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1040F77  +
xor eax eax +
jmp loc_1040FA2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1040FB5  +
mov eax [ebp+var_1C] +
mov dword ptr [eax+0C54h] 1 +
jmp loc_1040FDD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1040FDD  +
test byte ptr [eax+1Ch] 2 +
jz loc_1040FDD  +
lea ecx [ebp+var_18] +
push ecx  +
push offset dword_100B594  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:MultiByteToWideChar +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
mov [ebp+var_4] ebx +
push [ebp+lpMultiByteStr]  +
mov [ebp+lpWideCharStr] ebx +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_104105F  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1041033  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041105  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041105  +
push [ebp+var_4]  +
push offset dword_100B594  +
push 29h  +
jmp loc_10410FA  +
lea eax [edi+edi+2] +
push eax  +
call sub_105D670  +
mov [ebp+lpWideCharStr] eax +
cmp eax ebx +
jnz loc_10410A2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041099  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041099  +
push offset aPdest  +
push offset dword_100B594  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_4] 8007000Eh +
jmp loc_104110A  +
lea eax [edi+edi+2] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
call memset  +
add esp 0Ch +
push edi  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_104111C  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10410DB  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041105  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041105  +
push [ebp+var_4]  +
push offset dword_100B594  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
cmp [ebp+var_4] ebx +
jge loc_104111C  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_104111A  +
push [ebp+lpWideCharStr]  +
call sub_105D688  +
mov [ebp+lpWideCharStr] ebx +
xor edi edi +
mov eax [ebp+arg_8] +
mov ecx [ebp+lpWideCharStr] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
mov [eax] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1040C81  +
test byte ptr [ebp+8] 1 +
jz loc_1041152  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea ecx [ebp+hMem] +
call sub_1034881  +
push 104h  +
lea eax [ebp+hMem+1] +
push eax  +
call sub_10277AA  +
test eax eax +
jz loc_10411F4  +
lea eax [ebp+hMem+1] +
push eax  +
lea ecx [ebp+hMem] +
call sub_103514A  +
test eax eax +
jnz loc_10411D7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041218  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041218  +
lea ecx [ebp+hMem+1] +
push ecx  +
push offset dword_100B594  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_1041218  +
xor esi esi +
inc esi  +
lea ecx [ebp+hMem] +
call nullsub_3  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041218  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041218  +
push offset dword_100B594  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor esi esi +
jmp loc_10411DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2204h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:GetModuleHandleW +
push edi  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 40Dh  +
push 0  +
call esi  +
push eax  +
call sub_105DD36  +
mov ebx offset dword_100B594 +
mov edi offset lpReserved +
test eax eax +
jnz loc_1041289  +
mov eax lpReserved +
cmp eax edi +
jz loc_1041289  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041289  +
push ebx  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 1000h  +
lea eax [ebp+var_2204] +
push eax  +
push 36CBh  +
push 0  +
call esi  +
push eax  +
call sub_105DD36  +
test eax eax +
jnz loc_10412C5  +
mov eax lpReserved +
cmp eax edi +
jz loc_10412C5  +
test byte ptr [eax+1Ch] 2 +
jz loc_10412C5  +
push ebx  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 40h  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_2204] +
push eax  +
push 0  +
call sub_105D992  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor edx edx +
test eax eax +
jnz loc_1041302  +
jmp loc_1041327  +
inc eax  +
inc eax  +
cmp word ptr [eax] 20h +
jz loc_1041300  +
jmp loc_1041312  +
cmp edx 2 +
jnb loc_1041318  +
inc edx  +
inc eax  +
inc eax  +
cmp word ptr [eax] 5Ch +
jz loc_104130A  +
push 100h  +
lea edx [ecx+4] +
push edx  +
push eax  +
call sub_1040DC4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push 104h  +
lea eax [esi+844h] +
push eax  +
push [ebp+arg_0]  +
call sub_1040DC4  +
mov edi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041373  +
test byte ptr [eax+1Ch] 1 +
jz loc_1041373  +
push offset dword_100B594  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and dword ptr [esi+0A4Ch] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 104h  +
lea eax [esi+210h] +
push eax  +
push [ebp+arg_0]  +
call sub_1040DC4  +
mov dword ptr [esi+418h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 104h  +
lea eax [esi+41Ch] +
push eax  +
push [ebp+arg_0]  +
call sub_1040DC4  +
mov dword ptr [esi+624h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 104h  +
lea eax [esi+628h] +
push eax  +
push [ebp+arg_0]  +
call sub_1040DC4  +
and dword ptr [esi+0A4Ch] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
inc ebx  +
lea edi [esi+844h] +
mov [ebp+var_4] ebx +
mov ecx offset aDefault +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1041458  +
test dx dx +
jz loc_1041454  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1041458  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1041432  +
xor eax eax +
jmp loc_104145D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_10414C8  +
push 104h  +
lea eax [esi+628h] +
push eax  +
lea eax [esi+0E94h] +
push eax  +
push edi  +
call sub_1026A2A  +
test eax eax +
jz loc_104148D  +
and dword ptr [esi+840h] 0 +
mov [esi+83Ch] ebx +
jmp loc_10414C8  +
push edi  +
call sub_1027E2D  +
test eax eax +
jz loc_104149F  +
mov [esi+840h] ebx +
jmp loc_10414C8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10414C4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10414C4  +
push edi  +
push offset dword_100B594  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 63Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov [ebp+var_62C] ecx +
xor ecx ecx +
push edi  +
mov [ebp+NumberOfBytesRead] ecx +
mov [ebp+lpMultiByteStr] ecx +
mov [ebp+cchMultiByte] ecx +
mov [ebp+FileSizeHigh] ecx +
mov [ebp+FileName] cx +
mov esi 104h +
push esi  +
lea ecx [ebp+var_61C] +
push ecx  +
mov ecx [ebp+var_62C] +
push eax  +
call sub_1040DC4  +
mov [ebp+var_63C] eax +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
call ds:GetTempPathW  +
mov edi ds:GetLastError +
mov ebx 80070000h +
test eax eax +
jnz loc_10415A6  +
call edi  +
test eax eax +
jle loc_1041560  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_620] eax +
test eax eax +
jge loc_10415A6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041875  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041875  +
push [ebp+var_620]  +
push offset aGettemppathFai  +
push offset dword_100B594  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1041875  +
call sub_1050EF5  +
test eax eax +
mov eax offset aOtpcookie +
jz loc_10415D5  +
cmp [ebp+arg_0] 0 +
jnz loc_10415BF  +
mov eax offset aAuthcookie +
lea ecx [ebp+var_61C] +
push ecx  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSlowSS_txt  +
jmp loc_10415F4  +
cmp [ebp+arg_0] 0 +
jnz loc_10415E0  +
mov eax offset aAuthcookie +
lea ecx [ebp+var_61C] +
push ecx  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSSS_txt  +
lea eax [ebp+FileName] +
push esi  +
push eax  +
call sub_101BDD4  +
xor esi esi +
add esp 18h +
cmp eax esi +
mov [ebp+var_620] eax +
jge loc_1041641  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041875  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041875  +
push [ebp+var_620]  +
push offset aStringcchprint  +
push offset dword_100B594  +
push 0Ch  +
jmp loc_1041596  +
push esi  +
push 8000000h  +
push 3  +
push esi  +
push esi  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10416B2  +
call edi  +
cmp eax esi +
jle loc_1041675  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_620] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041875  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041875  +
push [ebp+var_620]  +
push offset dword_100B594  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1041875  +
push esi  +
push esi  +
push esi  +
push eax  +
call ds:SetFilePointer  +
cmp eax 0FFFFFFFFh +
jnz loc_1041700  +
call edi  +
cmp eax esi +
jle loc_10416CE  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_620] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041869  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041869  +
push [ebp+var_620]  +
push offset dword_100B594  +
push 0Eh  +
jmp loc_1041822  +
lea eax [ebp+FileSizeHigh] +
push eax  +
push [ebp+hObject]  +
call ds:GetFileSize  +
mov [ebp+cchMultiByte] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1041768  +
call edi  +
test eax eax +
jz loc_1041768  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041750  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041750  +
call edi  +
push eax  +
mov eax lpReserved +
push offset dword_100B594  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
call edi  +
cmp eax esi +
jle loc_104175D  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_620] eax +
jmp loc_1041869  +
cmp [ebp+FileSizeHigh] esi +
jnz loc_104182F  +
cmp [ebp+cchMultiByte] 7FFFFFFFh +
ja loc_104182F  +
push [ebp+cchMultiByte]  +
call sub_105D670  +
mov [ebp+lpMultiByteStr] eax +
cmp eax esi +
jnz loc_10417D1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10417C2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10417C2  +
push offset aFilecontents  +
push offset dword_100B594  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_620] 8007000Eh +
jmp loc_1041869  +
push esi  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push [ebp+cchMultiByte]  +
push eax  +
push [ebp+hObject]  +
call ds:ReadFile  +
test eax eax +
jnz loc_1041869  +
call edi  +
cmp eax esi +
jle loc_10417FD  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_620] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041869  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041869  +
push [ebp+var_620]  +
push offset dword_100B594  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1041869  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104185F  +
test byte ptr [eax+1Ch] 4 +
jz loc_104185F  +
push [ebp+cchMultiByte]  +
push [ebp+FileSizeHigh]  +
push offset dword_100B594  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov [ebp+var_620] 80004005h +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+FileName] 0 +
jz loc_104188C  +
lea eax [ebp+FileName] +
push eax  +
call ds:DeleteFileW  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jz loc_10418B6  +
mov edi [ebp+var_62C] +
lea esi [edi+0E74h] +
mov eax [esi] +
mov [edi+0E78h] ecx +
cmp eax ecx +
jz loc_10418DD  +
push eax  +
call sub_105D688  +
and dword ptr [esi] 0 +
jmp loc_10418DD  +
mov esi [ebp+var_62C] +
mov [esi+0E84h] ecx +
add esi 0E80h +
mov eax [esi] +
cmp eax ecx +
jz loc_10418D7  +
push eax  +
call sub_105D688  +
and dword ptr [esi] 0 +
mov edi [ebp+var_62C] +
xor eax eax +
cmp [ebp+var_620] eax +
jl loc_104194A  +
mov ecx edi +
cmp [ebp+arg_0] eax +
jz loc_104191C  +
lea eax [edi+0E78h] +
push eax  +
lea eax [edi+0E74h] +
push eax  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
call sub_1040FF5  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov [edi+0E70h] ecx +
jmp loc_104195D  +
lea eax [edi+0E84h] +
push eax  +
lea eax [edi+0E80h] +
push eax  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
call sub_1040FF5  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov [edi+0E7Ch] ecx +
jmp loc_104195D  +
cmp [ebp+arg_0] eax +
jz loc_1041957  +
mov [edi+0E70h] eax +
jmp loc_104195D  +
mov [edi+0E7Ch] eax +
cmp [ebp+lpMultiByteStr] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1041974  +
push [ebp+lpMultiByteStr]  +
call sub_105D688  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_63C] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 46Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_464] 0 +
or [ebp+hFindFile] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+pszPath] +
push edi  +
mov [ebp+var_46C] ecx +
mov [ebp+var_468] edi +
call ds:PathFindFileNameW  +
mov esi eax +
test esi esi +
jz loc_1041C46  +
cmp esi edi +
jz loc_1041C46  +
push [ebp+arg_4]  +
mov ebx 104h +
push ebx  +
lea eax [ebp+FileName] +
push eax  +
call sub_101BD65  +
mov edi ds:PathAppendW +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1041A35  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041C7F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041C7F  +
push offset dword_100B594  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1041C7F  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1041A5A  +
test al 10h +
jnz loc_1041A5A  +
mov [ebp+var_464] 1 +
jmp loc_1041C7F  +
cmp [ebp+arg_8] 0 +
jz loc_1041C7F  +
push [ebp+arg_4]  +
lea eax [ebp+FileName] +
push ebx  +
push eax  +
call sub_101BD65  +
push offset asc_1005EE4  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1041AAC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041C7F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041C7F  +
push offset dword_100B594  +
push 23h  +
jmp loc_1041A25  +
lea eax [ebp+pMore] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call ds:FindFirstFileW  +
test byte ptr [ebp+pMore] 10h +
mov [ebp+hFindFile] eax +
jz loc_1041BBD  +
mov ecx offset a_ +
lea eax [ebp-430h] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1041B04  +
test dx dx +
jz loc_1041B00  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1041B04  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1041ADE  +
xor eax eax +
jmp loc_1041B09  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1041BBD  +
mov ecx offset a__ +
lea eax [ebp-430h] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1041B42  +
test dx dx +
jz loc_1041B3E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1041B42  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1041B1C  +
xor eax eax +
jmp loc_1041B47  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1041BBD  +
push [ebp+arg_4]  +
lea eax [ebp+FileName] +
push ebx  +
push eax  +
call sub_101BD65  +
lea eax [ebp-430h] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1041B95  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041C6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041C6A  +
push offset dword_100B594  +
push 24h  +
jmp loc_1041C5F  +
mov ecx [ebp+var_46C] +
push 0  +
lea eax [ebp+FileName] +
push eax  +
push [ebp+var_468]  +
call sub_104198D  +
mov [ebp+var_464] eax +
test eax eax +
jnz loc_1041C6A  +
mov esi ds:FindNextFileW +
jmp loc_1041C16  +
test byte ptr [ebp+pMore] 10h +
jz loc_1041C16  +
push [ebp+arg_4]  +
lea eax [ebp+FileName] +
push ebx  +
push eax  +
call sub_101BD65  +
lea eax [ebp-430h] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jz loc_1041C2B  +
mov ecx [ebp+var_46C] +
push 0  +
lea eax [ebp+FileName] +
push eax  +
push [ebp+var_468]  +
call sub_104198D  +
mov [ebp+var_464] eax +
test eax eax +
jnz loc_1041C6A  +
lea eax [ebp+pMore] +
push eax  +
push [ebp+hFindFile]  +
call esi  +
test eax eax +
jnz loc_1041BC5  +
jmp loc_1041C6A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041C6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041C6A  +
push offset dword_100B594  +
push 25h  +
jmp loc_1041C5F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041C7F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041C7F  +
push offset dword_100B594  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+hFindFile] 0FFFFFFFFh +
jz loc_1041C7F  +
push [ebp+hFindFile]  +
call ds:FindClose  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_464] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 440h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+FileInformation] 0 +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 8  +
mov [ebp+var_418] ecx +
pop ecx  +
xor eax eax +
lea edi [ebp+var_43C] +
stos   +
mov ecx [ebp+var_418] +
mov edi 104h +
push edi  +
lea eax [ebp+pszPath] +
push eax  +
push edx  +
call sub_1040DC4  +
mov [ebp+var_41C] eax +
mov eax lpReserved +
mov esi offset lpReserved +
mov ebx offset dword_100B594 +
cmp eax esi +
jz loc_1041D1D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1041D1D  +
lea ecx [ebp+pszPath] +
push ecx  +
push ebx  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathFindExtensionW  +
test eax eax +
jz loc_1041EA1  +
cmp word ptr [eax] 0 +
jz loc_1041EA1  +
push 0FFFFFFFFh  +
push offset a_rdp  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_1041EA1  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
call ds:GetTempPathW  +
test eax eax +
jz loc_1041E8D  +
cmp eax edi +
jnb loc_1041E8D  +
mov ecx [ebp+var_418] +
push 1  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
call sub_104198D  +
test eax eax +
jnz loc_1041DB5  +
mov eax lpReserved +
cmp eax esi +
jz loc_1041EBE  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041EBE  +
push ebx  +
push 1Dh  +
jmp loc_1041EB3  +
lea eax [ebp+FileInformation] +
push eax  +
push 0  +
lea eax [ebp+pszPath] +
push eax  +
call ds:GetFileAttributesExW  +
test eax eax +
jnz loc_1041E06  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_1041EBE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1041EBE  +
push eax  +
push offset aGetfileattribu  +
push ebx  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1041EBE  +
cmp [ebp+var_424] 0 +
jnz loc_1041E62  +
cmp [ebp+var_420] 10000h +
ja loc_1041E62  +
lea eax [ebp+pszPath] +
push eax  +
mov eax [ebp+var_418] +
push edi  +
add eax 0C5Ch +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_1041EBE  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_1041EBE  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1041EBE  +
push eax  +
push offset aStringcchcop_1  +
push ebx  +
push 20h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1041EBE  +
mov eax lpReserved +
cmp eax esi +
jz loc_1041EBE  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041EBE  +
push [ebp+var_420]  +
push [ebp+var_424]  +
push ebx  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
jmp loc_1041EBE  +
mov eax lpReserved +
cmp eax esi +
jz loc_1041EBE  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041EBE  +
push ebx  +
push 1Ch  +
jmp loc_1041EB3  +
mov eax lpReserved +
cmp eax esi +
jz loc_1041EBE  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041EBE  +
push ebx  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_41C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D0h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
jmp loc_1041F25  +
cmp ax 20h +
jz loc_1041F33  +
cmp ax 3Dh +
jz loc_1041F33  +
cmp ax 3Ah +
jz loc_1041F33  +
cmp esi 63h +
jnb loc_1041F23  +
push eax  +
call ds:towupper  +
mov word ptr [ebp+esi*2+var_CC] ax +
pop ecx  +
inc esi  +
inc ebx  +
inc ebx  +
movzx eax word ptr [ebx] +
mov [ebp+var_D0] ebx +
test ax ax +
jnz loc_1041EFB  +
xor ecx ecx +
xor eax eax +
inc ecx  +
mov word ptr [ebp+esi*2+var_CC] ax +
cmp esi ecx +
jnz loc_1041FEE  +
movzx eax word ptr [ebp+var_CC] +
sub eax 43h +
jz loc_1041FE1  +
sub eax 3 +
jz loc_1041FD6  +
dec eax  +
dec eax  +
jz loc_1041FCE  +
sub eax 0Bh +
jz loc_1041FC1  +
sub eax 3 +
jz loc_1041FB4  +
dec eax  +
jz loc_1041FA0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041F99  +
test byte ptr [eax+1Ch] 4 +
jz loc_1041F99  +
lea ecx [ebp+var_CC] +
push ecx  +
push offset dword_100B594  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
xor eax eax +
jmp loc_10425A9  +
lea eax [edi+208h] +
push eax  +
push ebx  +
mov ecx edi +
call sub_1040E51  +
jmp loc_104259D  +
push ebx  +
mov ecx edi +
call sub_10412F0  +
jmp loc_104259D  +
push ebx  +
mov ecx edi +
call sub_1041330  +
jmp loc_104259D  +
lea eax [edi+20Ch] +
jmp loc_1041FA6  +
mov [edi+204h] ecx +
jmp loc_10425A3  +
push ebx  +
mov ecx edi +
call sub_1040F05  +
jmp loc_104259D  +
push 4  +
mov edx offset aOtpcookie +
lea eax [ebp+var_CC] +
pop ebx  +
mov cx [eax] +
or esi 0FFFFFFFFh +
cmp cx [edx] +
jnz loc_1042023  +
test cx cx +
jz loc_104201F  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_1042023  +
add eax ebx +
add edx ebx +
test cx cx +
jnz loc_1041FFC  +
xor eax eax +
jmp loc_1042027  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_104203F  +
push [ebp+var_D0]  +
push 1  +
mov ecx edi +
call sub_10414D5  +
jmp loc_104259D  +
mov ecx offset aWeb +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_104206E  +
test dx dx +
jz loc_104206A  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_104206E  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_104204A  +
xor eax eax +
jmp loc_1042072  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_1042085  +
mov dword ptr [edi+0C58h] 1 +
jmp loc_10425A3  +
mov ecx offset aWebfilename +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10420B4  +
test dx dx +
jz loc_10420B0  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10420B4  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042090  +
xor eax eax +
jmp loc_10420B8  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_10420CE  +
push [ebp+var_D0]  +
mov ecx edi +
call sub_1041C9B  +
jmp loc_104259D  +
mov ecx offset aTrustedzone +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10420FD  +
test dx dx +
jz loc_10420F9  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10420FD  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_10420D9  +
xor eax eax +
jmp loc_1042101  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_1042114  +
mov dword ptr [edi+0E64h] 1 +
jmp loc_10425A3  +
mov ecx offset aSpan +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1042143  +
test dx dx +
jz loc_104213F  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1042143  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_104211F  +
xor eax eax +
jmp loc_1042147  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_104215A  +
mov dword ptr [edi+0E68h] 1 +
jmp loc_10425A3  +
mov ecx offset aMultimon +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1042189  +
test dx dx +
jz loc_1042185  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1042189  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042165  +
xor eax eax +
jmp loc_104218D  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_10421A0  +
mov dword ptr [edi+0E6Ch] 1 +
jmp loc_10425A3  +
mov ecx offset aClxcmdline +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10421CF  +
test dx dx +
jz loc_10421CB  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10421CF  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_10421AB  +
xor eax eax +
jmp loc_10421D3  +
sbb eax eax +
sbb eax esi +
test eax eax +
jz loc_104258C  +
mov ecx offset aClxdll +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_104220A  +
test dx dx +
jz loc_1042206  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_104220A  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_10421E6  +
xor eax eax +
jmp loc_104220E  +
sbb eax eax +
sbb eax esi +
test eax eax +
jz loc_104258C  +
mov ecx offset aFullscreen +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1042245  +
test dx dx +
jz loc_1042241  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1042245  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042221  +
xor eax eax +
jmp loc_1042249  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_104225C  +
mov dword ptr [edi+204h] 1 +
jmp loc_10425A3  +
mov ecx offset aEdit +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_104228B  +
test dx dx +
jz loc_1042287  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_104228B  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042267  +
xor eax eax +
jmp loc_104228F  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_10422AF  +
push [ebp+var_D0]  +
mov ecx edi +
call sub_10413E7  +
mov dword ptr [edi+838h] 1 +
jmp loc_104259D  +
mov ecx offset aMigrate +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10422DE  +
test dx dx +
jz loc_10422DA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10422DE  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_10422BA  +
xor eax eax +
jmp loc_10422E2  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_10422F5  +
mov dword ptr [edi+830h] 1 +
jmp loc_10425A3  +
mov ecx offset aPublic +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1042324  +
test dx dx +
jz loc_1042320  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1042324  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042300  +
xor eax eax +
jmp loc_1042328  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_104233B  +
mov dword ptr [edi+834h] 1 +
jmp loc_10425A3  +
mov ecx offset aAdmin_0 +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_104236A  +
test dx dx +
jz loc_1042366  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_104236A  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042346  +
xor eax eax +
jmp loc_104236E  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_1042381  +
mov dword ptr [edi+0C50h] 1 +
jmp loc_10425A3  +
mov ecx offset aRemotefile +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10423B0  +
test dx dx +
jz loc_10423AC  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10423B0  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_104238C  +
xor eax eax +
jmp loc_10423B4  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_10423CA  +
push [ebp+var_D0]  +
mov ecx edi +
call sub_1041387  +
jmp loc_104259D  +
mov ecx offset aRemotecmdline +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10423F9  +
test dx dx +
jz loc_10423F5  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10423F9  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_10423D5  +
xor eax eax +
jmp loc_10423FD  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_1042413  +
push [ebp+var_D0]  +
mov ecx edi +
call sub_10413B7  +
jmp loc_104259D  +
mov ecx offset aAuthcookie +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1042442  +
test dx dx +
jz loc_104243E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1042442  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_104241E  +
xor eax eax +
jmp loc_1042446  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_1042456  +
push [ebp+var_D0]  +
push eax  +
jmp loc_1042033  +
mov ecx offset aConsole +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1042485  +
test dx dx +
jz loc_1042481  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1042485  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042461  +
xor eax eax +
jmp loc_1042489  +
sbb eax eax +
sbb eax esi +
test eax eax +
jz loc_10425A3  +
mov ecx offset aRegserver_0 +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10424C0  +
test dx dx +
jz loc_10424BC  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10424C0  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_104249C  +
xor eax eax +
jmp loc_10424C4  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_10424D7  +
mov dword ptr [edi+0E88h] 1 +
jmp loc_10425A3  +
mov ecx offset aUnregserver_0 +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1042506  +
test dx dx +
jz loc_1042502  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1042506  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_10424E2  +
xor eax eax +
jmp loc_104250A  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_104251D  +
mov dword ptr [edi+0E8Ch] 1 +
jmp loc_10425A3  +
mov ecx offset aEmbedding_0 +
lea eax [ebp+var_CC] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_104254C  +
test dx dx +
jz loc_1042548  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_104254C  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1042528  +
xor eax eax +
jmp loc_1042550  +
sbb eax eax +
sbb eax esi +
test eax eax +
jnz loc_1042560  +
mov dword ptr [edi+0E90h] 1 +
jmp loc_10425A3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1041F99  +
test [eax+1Ch] bl +
jz loc_1041F99  +
lea ecx [ebp+var_CC] +
push ecx  +
push offset dword_100B594  +
push 14h  +
jmp loc_1041F8E  +
mov esi [ebp+var_D0] +
push esi  +
mov ecx edi +
call sub_1040D61  +
lea eax [esi+eax*2] +
mov [ebp+var_D0] eax +
mov eax [ebp+var_D0] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aDefault  +
mov esi ecx +
push 104h  +
lea eax [esi+844h] +
push eax  +
call sub_101BD65  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_104261B  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1042620  +
mov ecx esi +
call sub_1040CCC  +
test eax eax +
jnz loc_1042656  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104261B  +
test byte ptr [eax+1Ch] 4 +
jz loc_104261B  +
push offset dword_100B594  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
or eax 0FFFFFFFFh +
jmp loc_1042664  +
cmp cx 20h +
jnz loc_104262E  +
inc eax  +
inc eax  +
cmp word ptr [eax] 20h +
jz loc_1042626  +
movzx ecx word ptr [eax] +
sub ecx 0 +
jz loc_10425E4  +
sub ecx 2Dh +
jz loc_1042649  +
dec ecx  +
dec ecx  +
jz loc_1042649  +
push eax  +
mov ecx esi +
call sub_1041330  +
jmp loc_10425E4  +
add eax 2 +
push eax  +
mov ecx esi +
call sub_1041EDA  +
jmp loc_10425E0  +
call sub_1041414  +
neg eax  +
sbb eax eax +
and eax 3 +
dec eax  +
dec eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+0E94h] +
jz loc_10426BA  +
push [ebp+arg_8]  +
push 104h  +
push eax  +
call sub_101BD65  +
test eax eax +
jl loc_10426CA  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10425BF  +
mov edi eax +
cmp [ebp+arg_4] 0 +
jz loc_10426E4  +
cmp edi 0FFFFFFFEh +
jz loc_10426CF  +
cmp edi 0FFFFFFFFh +
jnz loc_10426E4  +
mov ecx esi +
call sub_1041221  +
jmp loc_10426E4  +
push eax  +
push 104h  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jnz loc_1042695  +
push 0FFFFFFFEh  +
pop edi  +
jmp loc_10426A1  +
push 0  +
add esi 844h +
push esi  +
push 413h  +
push 0  +
call sub_105AE15  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 5 +
jnb loc_1042711  +
push [ebp+lpString]  +
imul eax eax +
push dword ptr [eax+ecx+38h]  +
call ds:SetWindowTextW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 5 +
jnb loc_1042748  +
mov eax edi +
imul eax eax +
push 1  +
push dword ptr [eax+esi+3Ch]  +
push dword ptr [esi+4]  +
call ds:CheckDlgButton  +
mov [esi+14A0h] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
push edi  +
add eax 136Ch +
push eax  +
call sub_1040242  +
mov edi eax +
test edi edi +
jnz loc_10427B1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042954  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042954  +
push offset dword_100B818  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1042954  +
push ebx  +
push 65h  +
mov ecx esi +
call sub_1052AC9  +
mov edi ds:GetSystemMetrics +
push 0Ch  +
call edi  +
push eax  +
push 0Bh  +
call edi  +
mov edi ds:GetDlgItem +
push eax  +
push 32D4h  +
push 3382h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
mov ecx esi +
call sub_1053364  +
mov eax [esi+2Ch] +
add eax 136Ch +
push eax  +
push dword ptr [esi+4]  +
call ds:SetWindowTextW  +
mov eax 337Ch +
push eax  +
push dword ptr [esi+4]  +
mov [esi+3Ch] eax +
lea ebx [esi+38h] +
call edi  +
mov [ebx] eax +
mov eax 337Dh +
push eax  +
push dword ptr [esi+4]  +
mov [esi+450h] eax +
call edi  +
mov [esi+44Ch] eax +
mov eax 337Eh +
push eax  +
push dword ptr [esi+4]  +
mov [esi+864h] eax +
call edi  +
mov [esi+860h] eax +
mov eax 337Fh +
push eax  +
push dword ptr [esi+4]  +
mov [esi+0C78h] eax +
call edi  +
mov [esi+0C74h] eax +
mov eax 3380h +
push eax  +
push dword ptr [esi+4]  +
mov [esi+108Ch] eax +
call edi  +
xor edi edi +
push edi  +
mov ecx esi +
mov [esi+1088h] eax +
call sub_104271A  +
mov [ebp+var_208] edi +
lea eax [ebx+14h] +
cmp [eax-0Ch] edi +
jz loc_1042891  +
push eax  +
push [ebp+var_208]  +
mov ecx esi +
call sub_10426F1  +
jmp loc_10428A3  +
push edi  +
push dword ptr [ebx]  +
call ds:EnableWindow  +
push edi  +
push dword ptr [ebx]  +
call ds:ShowWindow  +
inc [ebp+var_208]  +
add ebx 414h +
cmp [ebp+var_208] 5 +
jb loc_1042879  +
mov eax [esi+149Ch] +
cmp eax 5 +
mov ebx 3381h +
jge loc_10428E2  +
push edi  +
imul eax eax +
push 3  +
push offset dword_100B828  +
push ebx  +
push dword ptr [eax+esi+3Ch]  +
mov ecx esi +
call sub_10532C1  +
mov eax [esi+2Ch] +
push 100h  +
lea ecx [ebp+var_204] +
push ecx  +
lea ecx [eax+54h] +
call sub_105B10A  +
test eax eax +
jl loc_104292E  +
mov eax [esi+2Ch] +
xor ecx ecx +
cmp [eax+0CA80h] edi +
mov eax [eax+0CA7Ch] +
setz cl  +
xor edx edx +
push offset aTermsrv  +
cmp ecx edi +
setz dl  +
push edx  +
push eax  +
lea eax [ebp+var_204] +
push eax  +
call sub_1059C77  +
push eax  +
jmp loc_104292F  +
push edi  +
push ebx  +
mov ecx esi +
call sub_1052AFE  +
push 2  +
push 2  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_1052B2B  +
push 9  +
push dword ptr [esi+4]  +
call ds:ShowWindow  +
xor edi edi +
inc edi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
test eax eax +
jnz loc_10429A8  +
test esi esi +
jnz loc_10429A8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10429A1  +
test byte ptr [eax+1Ch] 4 +
jz loc_10429A1  +
push offset dword_100B818  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 80070057h +
jmp loc_10429DC  +
mov edx [ecx+14A0h] +
cmp edx 0FFFFFFFFh +
jz loc_10429DA  +
test edx edx +
jl loc_10429E1  +
cmp edx 5 +
jge loc_10429E1  +
imul edx edx +
mov edx [edx+ecx+44h] +
mov [eax] edx +
mov eax [ecx+14A0h] +
imul eax eax +
mov eax [eax+ecx+48h] +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042A06  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042A06  +
push edx  +
push offset dword_100B818  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax 8000FFFFh +
jmp loc_10429DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
xor eax eax +
sub ecx 110h +
jz loc_1042AE1  +
dec ecx  +
jz loc_1042A31  +
pop ebp  +
jmp sub_1040058  +
movzx ecx word ptr [ebp+arg_C] +
dec ecx  +
jz loc_1042AC1  +
sub ecx 337Bh +
jz loc_1042AB6  +
dec ecx  +
jz loc_1042AA7  +
dec ecx  +
jz loc_1042A98  +
dec ecx  +
jz loc_1042A89  +
dec ecx  +
jz loc_1042A7A  +
dec ecx  +
jz loc_1042A6E  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 111h  +
push [ebp+hDlg]  +
push [ebp+arg_0]  +
call sub_1040058  +
jmp loc_1042AEF  +
mov ecx [ebp+arg_0] +
or dword ptr [ecx+14A0h] 0FFFFFFFFh +
jmp loc_1042AEF  +
mov ecx [ebp+arg_0] +
mov dword ptr [ecx+14A0h] 4 +
jmp loc_1042AEF  +
mov ecx [ebp+arg_0] +
mov dword ptr [ecx+14A0h] 3 +
jmp loc_1042AEF  +
mov ecx [ebp+arg_0] +
mov dword ptr [ecx+14A0h] 2 +
jmp loc_1042AEF  +
mov ecx [ebp+arg_0] +
mov dword ptr [ecx+14A0h] 1 +
jmp loc_1042AEF  +
mov ecx [ebp+arg_0] +
mov [ecx+14A0h] eax +
jmp loc_1042AEF  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+14A0h] 0FFFFFFFFh +
jz loc_1042AD1  +
push 65h  +
jmp loc_1042AD3  +
push 66h  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
jmp loc_1042AEF  +
mov ecx [ebp+arg_0] +
mov eax [ebp+hDlg] +
mov [ecx+4] eax +
call sub_1042753  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 4 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
ja loc_1042C93  +
mov eax [ebp+arg_4] +
xor ebx ebx +
cmp eax ebx +
jz loc_1042C78  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jz loc_1042C78  +
cmp [eax] bx +
jnz loc_1042B51  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042CB7  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042CB7  +
push offset dword_100B818  +
push 0Fh  +
jmp loc_1042CAC  +
mov edx [ebp+arg_0] +
imul edx edx +
lea esi [edx+ecx] +
push eax  +
mov [esi+44h] eax +
call sub_1026E84  +
test eax eax +
jnz loc_1042B6F  +
mov [esi+48h] edi +
jmp loc_1042B72  +
mov [esi+48h] ebx +
mov eax [esi+48h] +
cmp eax ebx +
jz loc_1042BC7  +
cmp [eax] bx +
jz loc_1042BC7  +
push dword ptr [esi+44h]  +
lea edi [esi+4Ch] +
push eax  +
push offset aSS_0  +
push 200h  +
push edi  +
call sub_101BDD4  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jge loc_1042C15  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042CBC  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042CBC  +
push ebx  +
push offset aStringcchpri_3  +
push offset dword_100B818  +
push 10h  +
jmp loc_1042C05  +
push dword ptr [esi+44h]  +
lea edi [esi+4Ch] +
push 200h  +
push edi  +
call sub_101BD65  +
mov ebx eax +
test ebx ebx +
jge loc_1042C15  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042CBC  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042CBC  +
push ebx  +
push offset aStringcchcopyF  +
push offset dword_100B818  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1042CBC  +
and [ebp+arg_4] 0 +
cmp [ebp+arg_0] 0 +
jle loc_1042C42  +
mov ebx [ebp+var_4] +
add ebx 4Ch +
push ebx  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1042C4D  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
add ebx 414h +
cmp eax [ebp+arg_0] +
jl loc_1042C25  +
mov dword ptr [esi+40h] 1 +
xor ebx ebx +
jmp loc_1042CBC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042C71  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042C71  +
push offset dword_100B818  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ebx 800700B7h +
jmp loc_1042CBC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042CB7  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042CB7  +
push offset dword_100B818  +
push 0Eh  +
jmp loc_1042CAC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042CB7  +
test byte ptr [eax+1Ch] 4 +
jz loc_1042CB7  +
push offset dword_100B818  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ebx 80070057h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+149Ch] +
cmp eax 5 +
push edi  +
jge loc_1042CFD  +
push [ebp+arg_4]  +
mov edi eax +
push [ebp+arg_0]  +
inc eax  +
push edi  +
mov [esi+149Ch] eax +
call sub_1042AF8  +
test eax eax +
jge loc_1042D00  +
dec dword ptr [esi+149Ch]  +
or edi 0FFFFFFFFh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
mov edi ecx +
mov [ebp+var_4] esi +
cmp [edi+34h] esi +
jz loc_1042DD5  +
mov eax [edi+2Ch] +
cmp [eax+0C454h] esi +
jnz loc_1042DD5  +
push 1  +
push esi  +
push offset aRemoteprograms  +
push offset word_1002174  +
call sub_10509E3  +
test eax eax +
jz loc_1042D72  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042D6E  +
test byte ptr [eax+1Ch] 2 +
jz loc_1042D6E  +
push offset dword_100B818  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 68h  +
jmp loc_1042DD7  +
mov eax [edi+2Ch] +
cmp [eax+70A0h] esi +
jz loc_1042DA3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1042DD5  +
test byte ptr [eax+1Ch] 2 +
jz loc_1042DD5  +
push offset dword_100B818  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1042DD5  +
mov ecx [edi+34h] +
mov eax [ecx] +
call dword ptr [eax]  +
cmp eax esi +
jge loc_1042DDD  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1042DD5  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1042DD5  +
push eax  +
push offset dword_100B818  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push 67h  +
pop eax  +
jmp loc_1042E80  +
mov ecx [edi+34h] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
mov ebx eax +
cmp ebx esi +
jz loc_1042E7C  +
lea ecx [ebx+54h] +
call sub_1034881  +
mov esi eax +
mov eax [edi+2Ch] +
lea ecx [eax+54h] +
call sub_1034881  +
push esi  +
push eax  +
call ds:lstrcmpiW  +
mov esi eax +
mov eax [edi+2Ch] +
neg esi  +
push ebx  +
sbb esi esi +
push eax  +
inc esi  +
call sub_10356D8  +
test esi esi +
jz loc_1042E47  +
test eax eax +
jz loc_1042E47  +
lea eax [ebx+0A54h] +
push eax  +
add ebx 254h +
push ebx  +
mov ecx edi +
call sub_1042CCA  +
cmp eax 0FFFFFFFFh +
jz loc_1042E55  +
mov [ebp+var_4] 1 +
mov ecx [edi+34h] +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov ebx eax +
test ebx ebx +
jnz loc_1042DF0  +
cmp [ebp+var_4] 0 +
jz loc_1042E7C  +
mov eax [edi+149Ch] +
cmp eax 1 +
jnz loc_1042E71  +
and dword ptr [edi+14A0h] 0 +
push 65h  +
jmp loc_1042E7E  +
jle loc_1042E7C  +
mov ecx edi +
call sub_105340F  +
jmp loc_1042E7F  +
push 67h  +
pop eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 32E6h  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_103FF3D  +
push [ebp+arg_8]  +
lea ecx [esi+2Ch] +
mov dword ptr [esi] offset off_100B8A8 +
and dword ptr [ecx] 0 +
call sub_101C97A  +
mov eax [ebp+arg_C] +
and dword ptr [esi+149Ch] 0 +
or dword ptr [esi+14A0h] 0FFFFFFFFh +
mov [esi+30h] eax +
mov eax [ebp+arg_10] +
push 1464h  +
mov [esi+34h] eax +
lea eax [esi+38h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+2Ch] +
push 0  +
mov ecx edi +
mov dword ptr [esi] offset off_100B8A8 +
call sub_101C97A  +
and dword ptr [esi+30h] 0 +
and dword ptr [esi+34h] 0 +
mov eax [edi] +
test eax eax +
jz loc_1042F1D  +
and dword ptr [edi] 0 +
push eax  +
call sub_1018A83  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_1040027  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1042EEE  +
test byte ptr [ebp+8] 1 +
jz loc_1042F45  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
and dword ptr [eax] 0 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1042F70  +
push eax  +
call sub_105D688  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
xor eax eax +
cmp [ecx] eax +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1042F5C  +
push esi  +
push [ebp+arg_0]  +
call sub_105D198  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1042FC5  +
cmp ecx 7FFFFFFFh +
jbe loc_1042FCA  +
mov eax 80070057h +
test eax eax +
jl loc_1043015  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1043005  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1043000  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1043000  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1042FE8  +
pop edi  +
test esi esi +
jnz loc_104300C  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+uBytes] 0 +
push esi  +
push edi  +
mov edi ecx +
call sub_1042F5C  +
lea eax [ebp+uBytes] +
push eax  +
push 7FFFFFFFh  +
push [ebp+arg_0]  +
call sub_101AFC2  +
mov esi eax +
test esi esi +
jge loc_1043071  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10430EF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10430EF  +
push esi  +
push offset aStringcblength  +
push offset dword_100B8BC  +
push 0Ah  +
jmp loc_10430E4  +
add [ebp+uBytes] 2 +
push [ebp+uBytes]  +
call sub_105D670  +
mov [edi] eax +
test eax eax +
jnz loc_10430B3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10430AC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10430AC  +
push offset aPtstr  +
push offset dword_100B8BC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_10430EF  +
push [ebp+arg_0]  +
push [ebp+uBytes]  +
push eax  +
call sub_1042FAE  +
mov esi eax +
test esi esi +
jge loc_10430F6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10430EF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10430EF  +
push esi  +
push offset aStringcbcopy_0  +
push offset dword_100B8BC  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov ecx edi +
call sub_1042F5C  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor edx edx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov [esi] edx +
mov [edi] edx +
mov eax [ecx] +
mov [ebp+var_4] edx +
mov [ebp+var_8] edx +
cmp eax edx +
jnz loc_104312F  +
mov ebx 80070002h +
jmp loc_10431BF  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_105D074  +
mov ebx eax +
test ebx ebx +
jge loc_1043160  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10431AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10431AD  +
push ebx  +
push offset aTscryptdecodea  +
push offset dword_100B8BC  +
push 0Dh  +
jmp loc_1043196  +
lea eax [ebp+var_8] +
push eax  +
push 100h  +
push [ebp+var_4]  +
call sub_102AAF4  +
mov ebx eax +
test ebx ebx +
jge loc_10431A3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10431AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10431AD  +
push ebx  +
push offset aStringcchlengt  +
push offset dword_100B8BC  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10431AD  +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax [ebp+var_8] +
mov [edi] eax +
test ebx ebx +
jge loc_10431BF  +
cmp [ebp+var_4] 0 +
jz loc_10431BF  +
push [ebp+var_4]  +
call sub_105D688  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 3A9Bh  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1052A87  +
mov eax [ebp+arg_8] +
mov [esi+20h] eax +
mov eax [ebp+arg_C] +
mov [esi+24h] eax +
mov dword ptr [esi] offset off_100B9B0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov dword ptr [ecx] offset off_100B9B0 +
jmp sub_1052ABD  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+20h]  +
push 3A9Dh  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push 2  +
push 2  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_1052B2B  +
mov edi ds:GetSystemMetrics +
push 0Ch  +
call edi  +
push eax  +
push 0Bh  +
call edi  +
mov edi ds:GetDlgItem +
push eax  +
push 32C8h  +
push 3A9Eh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
mov ecx esi +
call sub_1053364  +
push 1  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SetFocus  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 3AB8h  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1052A87  +
mov eax [ebp+arg_8] +
mov [esi+20h] eax +
mov dword ptr [esi] offset off_100B9C4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [ecx] offset off_100B9C4 +
jmp sub_1052ABD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+20h]  +
mov [ebp+nIDDlgItem] 3ABCh +
push 3ABBh  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push [ebp+nIDDlgItem]  +
mov edi ds:GetDlgItem +
push dword ptr [esi+4]  +
call edi  +
xor ebx ebx +
inc ebx  +
mov [ebp+var_8] ebx +
test eax eax +
jz loc_1043328  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
push 0  +
push ebx  +
lea eax [ebp+nIDDlgItem] +
push eax  +
mov ecx esi +
call sub_105305A  +
push ebx  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+Rect.top] +
sub eax [ebp+Rect.bottom] +
mov ecx esi +
push eax  +
call sub_1053307  +
push 2  +
push 2  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_1052B2B  +
mov ebx ds:GetSystemMetrics +
push 0Ch  +
call ebx  +
push eax  +
push 0Bh  +
call ebx  +
push eax  +
push 32C9h  +
push 3ABAh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
mov ecx esi +
call sub_1053364  +
push 1  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SetFocus  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push 38h  +
lea eax [ebp+ExecInfo.fMask] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_0] +
and [ebp+ExecInfo.fMask] 0 +
mov [ebp+ExecInfo.lpFile] eax +
add esp 0Ch +
lea eax [ebp+ExecInfo] +
push eax  +
mov [ebp+ExecInfo.cbSize] 3Ch +
mov [ebp+ExecInfo.lpVerb] offset aOpen +
mov [ebp+ExecInfo.nShow] 1 +
call ds:ShellExecuteExW  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100B9B0 +
call sub_1052ABD  +
test byte ptr [ebp+8] 1 +
jz loc_10433E2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
and [ebp+var_4] 0 +
push esi  +
push 48h  +
lea eax [ebp+var_4C] +
push 0  +
push eax  +
mov esi ecx +
call memset  +
mov eax [esi+4] +
mov [ebp+var_48] eax +
mov eax [esi+24h] +
mov [ebp+var_3C] eax +
add esp 0Ch +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
mov [ebp+var_4C] 48h +
mov [ebp+var_44] 10h +
call CryptUIDlgViewCertificateW  +
pop esi  +
test eax eax +
jnz locret_104347D  +
call ds:GetLastError  +
test eax eax +
jle loc_104344D  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
test ecx ecx +
jge locret_104347D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz locret_104347D  +
test byte ptr [eax+1Ch] 4 +
jz locret_104347D  +
push ecx  +
push offset aCryptuidlgview  +
push offset dword_100B9A0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100B9C4 +
call sub_1052ABD  +
test byte ptr [ebp+8] 1 +
jz loc_10434A4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
xor edi edi +
sub eax 4Eh +
jz loc_1043507  +
sub eax 0C2h +
jz loc_10434EC  +
dec eax  +
jz loc_10434E3  +
push [ebp+arg_10]  +
push dword ptr [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+hWnd]  +
push [ebp+arg_0]  +
call sub_10534BF  +
mov edi eax +
jmp loc_1043537  +
movzx eax [ebp+arg_C] +
dec eax  +
jnz loc_1043537  +
jmp loc_104352C  +
mov ecx [ebp+arg_0] +
mov esi [ebp+hWnd] +
mov [ecx+4] esi +
call sub_10432BE  +
test eax eax +
jz loc_1043502  +
xor edi edi +
jmp loc_1043537  +
push 3  +
push esi  +
jmp loc_1043531  +
mov eax [ebp+arg_10] +
cmp dword ptr [eax+4] 3ABBh +
jnz loc_1043537  +
mov ecx [eax+8] +
cmp ecx 0FFFFFFFCh +
jz loc_1043520  +
cmp ecx 0FFFFFFFEh +
jnz loc_1043537  +
mov ecx [ebp+arg_0] +
add eax 1Ch +
push eax  +
call sub_1043378  +
push 1  +
push [ebp+hWnd]  +
call ds:EndDialog  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push edi  +
xor edi edi +
sub eax 110h +
jz loc_104359C  +
dec eax  +
jz loc_1043571  +
push [ebp+arg_10]  +
push dword ptr [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+hWnd]  +
push [ebp+arg_0]  +
call sub_10534BF  +
mov edi eax +
jmp loc_10435BD  +
movzx eax [ebp+arg_C] +
test eax eax +
jle loc_10435BD  +
cmp eax 2 +
jle loc_104358F  +
cmp eax 3A9Fh +
jnz loc_10435BD  +
mov ecx [ebp+arg_0] +
call sub_10433EE  +
jmp loc_10435BD  +
push 1  +
push [ebp+hWnd]  +
call ds:EndDialog  +
jmp loc_10435BD  +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+hWnd] +
mov [ecx+4] esi +
call sub_1043213  +
test eax eax +
jz loc_10435B3  +
xor edi edi +
jmp loc_10435BC  +
push 3  +
push esi  +
call ds:EndDialog  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
pop ebp  +
jmp sub_102BA7C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
pop ebp  +
jmp sub_102BB29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_100BA30 +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
mov eax [eax+0CA7Ch] +
retn   +
***
mov eax [ecx+4] +
mov eax [eax+0C228h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [ebp+8] +
mov [eax+0C228h] ecx +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
add eax 254h +
retn   +
***
mov eax [ecx+4] +
xor ecx ecx +
cmp [eax+254h] cx +
setnz cl  +
mov eax ecx +
retn   +
***
mov eax [ecx+4] +
add eax 0A54h +
retn   +
***
mov eax [ecx+4] +
mov eax [eax+135Ch] +
retn   +
***
mov ecx [ecx+4] +
add ecx 84D8h +
jmp sub_1042F5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [ebp+8] +
mov [eax+70A0h] ecx +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
mov eax [eax+70A0h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [ebp+8] +
mov [eax+70A8h] ecx +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
mov eax [eax+70A8h] +
retn   +
***
mov eax [ecx+4] +
mov eax [eax+70B4h] +
retn   +
***
mov eax [ecx+4] +
xor ecx ecx +
cmp [eax+0CA80h] ecx +
setz cl  +
mov eax ecx +
retn   +
***
mov eax [ecx+4] +
mov eax [eax+0C234h] +
retn   +
***
mov eax [ecx+4] +
add eax 0C244h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+0CA80h] +
neg ecx  +
sbb ecx ecx +
not ecx  +
and ecx [ebp+8] +
mov [eax+709Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 118h  +
xor esi esi +
lea eax [ebp+var_11C] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
push 3  +
push 2  +
push esi  +
push esi  +
mov esi ds:VerSetConditionMask +
mov [ebp+var_120] 11Ch +
mov [ebp+var_11C] 6 +
mov [ebp+var_118] 1 +
call esi  +
push 3  +
push 1  +
push edx  +
push eax  +
call esi  +
push edx  +
push eax  +
push 3  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1043867  +
cmp eax esi +
ja loc_1043867  +
jz loc_104386C  +
jmp loc_1043874  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_104387D  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 10h  +
pop ecx  +
mov esi offset aMicrosoft_wi_0 +
lea edi [ebp+var_44] +
push offset aShell32_dll  +
mov ebx 80004005h +
movs   +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_1043960  +
push offset aSetcurrentproc  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1043933  +
lea ecx [ebp+var_44] +
push ecx  +
call eax  +
mov ebx eax +
test ebx ebx +
jl loc_104390C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1043957  +
test byte ptr [eax+1Ch] 2 +
jz loc_1043957  +
lea ecx [ebp+var_44] +
push ecx  +
push offset dword_100BA8C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_1043957  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1043957  +
test byte ptr [eax+1Ch] 4 +
jz loc_1043957  +
push ebx  +
push offset dword_100BA8C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1043957  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1043957  +
test byte ptr [eax+1Ch] 2 +
jz loc_1043957  +
push offset dword_100BA8C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push esi  +
call ds:FreeLibrary  +
jmp loc_1043984  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1043984  +
test byte ptr [eax+1Ch] 4 +
jz loc_1043984  +
push offset dword_100BA8C  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_10439B1  +
cmp ecx 7FFFFFFFh +
jbe loc_10439B6  +
mov eax 80070057h +
test eax eax +
jl loc_10439CF  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax ecx +
push 0  +
call sub_104383E  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 5  +
pop ecx  +
mov esi offset aMstsc_exe +
lea edi [ebp+var_18] +
movs   +
and dword ptr [eax] 0 +
push 208h  +
mov [ebp+var_24] eax +
call sub_105D670  +
mov [ebp+pszPath] eax +
test eax eax +
jnz loc_1043A4A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1043A3E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1043A3E  +
push offset aTchar  +
push offset dword_100BA8C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_1C] 8007000Eh +
jmp loc_1043B81  +
mov esi 104h +
push esi  +
push eax  +
push ebx  +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_1043AB0  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1043A89  +
test byte ptr [eax+1Ch] 4 +
jz loc_1043A89  +
push esi  +
push offset dword_100BA8C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test esi esi +
jle loc_1043A99  +
and esi 0FFFFh +
or esi 80070000h +
mov [ebp+var_1C] esi +
test esi esi +
jl loc_1043B79  +
mov [ebp+var_1C] 80004005h +
jmp loc_1043B79  +
mov eax lpReserved +
mov ebx offset lpReserved +
mov edi offset dword_100BA8C +
cmp eax ebx +
jz loc_1043ADA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1043ADA  +
push [ebp+pszPath]  +
push edi  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
push [ebp+pszPath]  +
call ds:PathRemoveFileSpecW  +
push offset word_1003CEC  +
push esi  +
push [ebp+pszPath]  +
call sub_1027578  +
mov [ebp+var_1C] eax +
test eax eax +
jge loc_1043B14  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1043B73  +
test byte ptr [eax+1Ch] 4 +
jz loc_1043B73  +
push [ebp+var_1C]  +
push offset aStringcchcat_4  +
push edi  +
push 11h  +
jmp loc_1043B43  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
mov esi [ebp+pszPath] +
push esi  +
call sub_1027578  +
mov [ebp+var_1C] eax +
test eax eax +
jge loc_1043B50  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1043B73  +
test byte ptr [eax+1Ch] 4 +
jz loc_1043B73  +
push [ebp+var_1C]  +
push offset aStringcchcat_4  +
push edi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1043B73  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1043B6E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1043B6E  +
push esi  +
push edi  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax [ebp+var_24] +
mov [eax] esi +
cmp [ebp+var_1C] 0 +
jge loc_1043B81  +
push [ebp+pszPath]  +
call sub_105D688  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C3Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov dword ptr [ebp+var_C28] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_C24] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov [ebp+var_C2C] eax +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+var_C3C] ax +
lea edi [ebp+var_C3C+2] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
xor ebx ebx +
mov esi 206h +
push esi  +
mov [ebp+var_414] ax +
lea eax [ebp-412h] +
push ebx  +
push eax  +
mov [ebp+ppv] ebx +
mov [ebp+var_C1C] ebx +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+sz] ax +
lea eax [ebp-20Ah] +
push ebx  +
push eax  +
mov [ebp+lpsz] ebx +
call memset  +
xor eax eax +
mov esi 3FEh +
push esi  +
mov [ebp+Buffer] ax +
lea eax [ebp-0C12h] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_814] ax +
lea eax [ebp+var_814+2] +
push ebx  +
push eax  +
call memset  +
add esp 30h +
push dword ptr [ebp+var_C28]  +
mov ebx 104h +
push ebx  +
lea eax [ebp+sz] +
push eax  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_1043CB3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044094  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044094  +
push esi  +
push offset aStringcchcopyF  +
push offset dword_100BA8C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1044094  +
mov edi ds:CharLowerW +
lea eax [ebp+sz] +
push eax  +
call edi  +
push dword ptr [ebp+var_C28]  +
lea eax [ebp+var_414] +
push offset aVS  +
push ebx  +
push eax  +
call sub_101BDD4  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_1043D0C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044094  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044094  +
push esi  +
push offset aStringcchpri_3  +
push offset dword_100BA8C  +
push 15h  +
jmp loc_1043CA3  +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 3F0h +
push esi  +
push [ebp+var_C24]  +
call sub_105DD36  +
test eax eax +
jnz loc_1043D6F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1043D52  +
test byte ptr [eax+1Ch] 4 +
jz loc_1043D52  +
push esi  +
push offset dword_100BA8C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
call ds:GetLastError  +
test eax eax +
jg loc_1043D63  +
mov esi eax +
jmp loc_1044094  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1043D5C  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_814] +
push 400h  +
push eax  +
call sub_104399A  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_1043DC3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044094  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044094  +
push esi  +
push offset aStringcbprintf  +
push offset dword_100BA8C  +
push 17h  +
jmp loc_1043CA3  +
lea eax [ebp+lpsz] +
push eax  +
push [ebp+var_C24]  +
call sub_10439D6  +
mov ebx [ebp+lpsz] +
mov esi eax +
test esi esi +
jge loc_1043E0D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aGetclientpathF  +
push offset dword_100BA8C  +
push 18h  +
jmp loc_104407F  +
push ebx  +
call edi  +
lea eax [ebp+var_414] +
push eax  +
call edi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100C410  +
push 1  +
push 0  +
push offset stru_100C480  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jge loc_1043E66  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aCocreateinstan  +
push offset dword_100BA8C  +
push 19h  +
jmp loc_104407F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+50h]  +
mov esi eax +
test esi esi +
jge loc_1043EA5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aSetpathFailed  +
push offset dword_100BA8C  +
push 1Ah  +
jmp loc_104407F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_414] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jge loc_1043EEA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aSetargumentsFa  +
push offset dword_100BA8C  +
push 1Bh  +
jmp loc_104407F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0  +
push ebx  +
push eax  +
call dword ptr [ecx+44h]  +
mov esi eax +
test esi esi +
jge loc_1043F2B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aSeticonlocatio  +
push offset dword_100BA8C  +
push 1Ch  +
jmp loc_104407F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
test esi esi +
jge loc_1043F6B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aSetshowcmdFail  +
push offset dword_100BA8C  +
push 1Dh  +
jmp loc_104407F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_814] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_1043FB0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aSetdescription  +
push offset dword_100BA8C  +
push 1Eh  +
jmp loc_104407F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_C1C] +
push edx  +
push offset dword_100C430  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jge loc_1043FF9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aQueryinterfa_0  +
push offset dword_100BA8C  +
push 1Fh  +
jmp loc_104407F  +
push 1Fh  +
pop eax  +
mov word ptr [ebp+var_C3C] ax +
lea edx [ebp+var_C3C] +
lea eax [ebp+sz] +
push edx  +
mov [ebp+var_C34] eax +
mov eax [ebp+var_C1C] +
mov ecx [eax] +
push offset dword_100C364  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
test esi esi +
jge loc_104404E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aSetvalueFailed  +
push offset dword_100BA8C  +
push 20h  +
jmp loc_104407F  +
mov eax [ebp+var_C1C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_104408A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104408A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104408A  +
push esi  +
push offset aCommitFailed  +
push offset dword_100BA8C  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
test ebx ebx +
jz loc_1044094  +
push ebx  +
call sub_105D688  +
mov eax [ebp+var_C1C] +
test eax eax +
jz loc_10440AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_C1C] 0 +
test esi esi +
jge loc_10440C1  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_10440D3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10440D3  +
mov eax [ebp+var_C2C] +
test eax eax +
jz loc_10440D3  +
mov ecx [ebp+ppv] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C44h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov dword ptr [ebp+var_C2C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_C34] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov [ebp+var_C30] eax +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+var_C44] ax +
lea edi [ebp+var_C44+2] +
stos   +
stos   +
stos   +
stos   +
xor ebx ebx +
xor eax eax +
mov esi 206h +
push esi  +
mov word ptr [ebp+pszPath] ax +
lea eax [ebp-20Ah] +
push ebx  +
push eax  +
mov [ebp+ppv] ebx +
mov [ebp+var_C28] ebx +
mov [ebp+lpsz] ebx +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_414] ax +
lea eax [ebp+var_414+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_81C] ax +
lea eax [ebp+var_81C+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push 3FEh  +
mov word ptr [ebp+var_C1C] ax +
lea eax [ebp+var_C1C+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push 1FEh  +
mov word ptr [ebp+var_614] ax +
lea eax [ebp+var_614+2] +
push ebx  +
push eax  +
call memset  +
add esp 3Ch +
push dword ptr [ebp+var_C2C]  +
lea ebx [esi+2] +
push ebx  +
lea eax [ebp+pszPath] +
push eax  +
call sub_1042FAE  +
mov esi eax +
test esi esi +
jge loc_104421C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044669  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044669  +
push esi  +
push offset aStringcbcopy_0  +
push offset dword_100BA8C  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1044669  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathStripPathW  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathFindExtensionW  +
mov edi ds:CharLowerW +
push eax  +
call edi  +
push dword ptr [ebp+var_C2C]  +
lea eax [ebp+var_414] +
push ebx  +
push eax  +
call sub_1042FAE  +
mov esi eax +
test esi esi +
jge loc_1044281  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044669  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044669  +
push esi  +
push offset aStringcbcopy_0  +
push offset dword_100BA8C  +
push 23h  +
jmp loc_104420C  +
lea eax [ebp+var_414] +
push eax  +
call ds:PathRemoveFileSpecW  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
push offset aSS_2  +
lea eax [ebp+var_C1C] +
push 400h  +
push eax  +
call sub_104399A  +
mov esi eax +
add esp 14h +
test esi esi +
jge loc_10442E7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044669  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044669  +
push esi  +
push offset aStringcbprintf  +
push offset dword_100BA8C  +
push 24h  +
jmp loc_104420C  +
lea eax [ebp+pszPath] +
push eax  +
push offset aS  +
lea eax [ebp+var_614] +
push 200h  +
push eax  +
call sub_104399A  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_1044339  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044669  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044669  +
push esi  +
push offset aStringcbprintf  +
push offset dword_100BA8C  +
push 25h  +
jmp loc_104420C  +
lea eax [ebp+lpsz] +
push eax  +
push [ebp+var_C34]  +
call sub_10439D6  +
mov esi eax +
test esi esi +
jge loc_104437D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aGetclientpathF  +
push offset dword_100BA8C  +
push 26h  +
jmp loc_104464A  +
push [ebp+lpsz]  +
call edi  +
push dword ptr [ebp+var_C2C]  +
call edi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100C410  +
push 1  +
push 0  +
push offset stru_100C480  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jge loc_10443DA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aCocreateinstan  +
push offset dword_100BA8C  +
push 27h  +
jmp loc_104464A  +
mov eax [ebp+ppv] +
push [ebp+lpsz]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
mov esi eax +
test esi esi +
jge loc_104441E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aSetpathFailed  +
push offset dword_100BA8C  +
push 28h  +
jmp loc_104464A  +
push dword ptr [ebp+var_C2C]  +
lea eax [ebp+var_81C] +
push offset aS_0  +
push ebx  +
push eax  +
call sub_104399A  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_104446B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aStringcbprintf  +
push offset dword_100BA8C  +
push 29h  +
jmp loc_104464A  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_81C] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jge loc_10444B0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aSetargumentsFa  +
push offset dword_100BA8C  +
push 2Ah  +
jmp loc_104464A  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0  +
push [ebp+lpsz]  +
push eax  +
call dword ptr [ecx+44h]  +
mov esi eax +
test esi esi +
jge loc_10444F6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aSeticonlocatio  +
push offset dword_100BA8C  +
push 2Bh  +
jmp loc_104464A  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
test esi esi +
jge loc_1044536  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aSetshowcmdFail  +
push offset dword_100BA8C  +
push 2Ch  +
jmp loc_104464A  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_C1C] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_104457B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aSetdescription  +
push offset dword_100BA8C  +
push 2Dh  +
jmp loc_104464A  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_C28] +
push edx  +
push offset dword_100C430  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jge loc_10445C4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aQueryinterfa_0  +
push offset dword_100BA8C  +
push 2Eh  +
jmp loc_104464A  +
push 1Fh  +
pop eax  +
mov word ptr [ebp+var_C44] ax +
lea edx [ebp+var_C44] +
lea eax [ebp+var_614] +
push edx  +
mov [ebp+var_C3C] eax +
mov eax [ebp+var_C28] +
mov ecx [eax] +
push offset dword_100C364  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
test esi esi +
jge loc_1044619  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aSetvalueFailed  +
push offset dword_100BA8C  +
push 2Fh  +
jmp loc_104464A  +
mov eax [ebp+var_C28] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_1044655  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044655  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044655  +
push esi  +
push offset aCommitFailed  +
push offset dword_100BA8C  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+lpsz] 0 +
jz loc_1044669  +
push [ebp+lpsz]  +
call sub_105D688  +
mov eax [ebp+var_C28] +
test eax eax +
jz loc_1044680  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_C28] 0 +
test esi esi +
jge loc_1044696  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_10446A8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10446A8  +
mov eax [ebp+var_C30] +
test eax eax +
jz loc_10446A8  +
mov ecx [ebp+ppv] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
call sub_10437BA  +
test eax eax +
jz loc_1044735  +
and [ebp+var_48] 0 +
lea eax [ebp+var_48] +
push eax  +
push edi  +
push [ebp+arg_4]  +
push esi  +
call sub_1043B9A  +
mov ebx [ebp+var_48] +
test eax eax +
jl loc_1044729  +
test ebx ebx +
jz loc_1044759  +
push 10h  +
pop ecx  +
mov esi offset aMicrosoft_wi_0 +
lea edi [ebp+var_44] +
movs   +
xor eax eax +
lea edi [ebp+var_48] +
stos   +
lea eax [ebp+var_44] +
mov [ebp+var_48] eax +
lea eax [ebp+pv] +
push eax  +
push 7  +
mov [ebp+pv] ebx +
call ds:SHAddToRecentDocs  +
test ebx ebx +
jz loc_1044759  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_1044759  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044759  +
test byte ptr [eax+1Ch] 2 +
jz loc_1044759  +
push offset dword_100BA8C  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
call sub_10437BA  +
test eax eax +
jz loc_10447E1  +
and [ebp+var_48] 0 +
lea eax [ebp+var_48] +
push eax  +
push edi  +
push esi  +
call sub_10440EB  +
mov ebx [ebp+var_48] +
test eax eax +
jl loc_10447D5  +
test ebx ebx +
jz loc_1044805  +
push 10h  +
pop ecx  +
mov esi offset aMicrosoft_wi_0 +
lea edi [ebp+var_44] +
movs   +
xor eax eax +
lea edi [ebp+var_48] +
stos   +
lea eax [ebp+var_44] +
mov [ebp+var_48] eax +
lea eax [ebp+pv] +
push eax  +
push 7  +
mov [ebp+pv] ebx +
call ds:SHAddToRecentDocs  +
test ebx ebx +
jz loc_1044805  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_1044805  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044805  +
test byte ptr [eax+1Ch] 2 +
jz loc_1044805  +
push offset dword_100BA8C  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1044872  +
dec eax  +
jz loc_1044869  +
push 57h  +
pop eax  +
jmp loc_10448E0  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1044898  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_10448C1  +
cmp dword ptr [esi+10h] 0 +
jz loc_10448C1  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_10448DE  +
test cl 2 +
jz loc_10448CF  +
mov esi [esi+10h] +
test esi esi +
jz loc_10448CF  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi lpReserved +
push edi  +
mov edi offset dword_1066078 +
jmp loc_104492B  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1044843  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1044902  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi lpReserved +
push edi  +
mov edi offset lpReserved +
cmp esi edi +
jz loc_1044977  +
jmp loc_104496D  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_104496B  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_104494F  +
mov lpReserved edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 200h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push edi  +
call sub_105DD36  +
test eax eax +
jnz loc_10449D1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044A26  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044A26  +
push [ebp+uID]  +
push offset dword_100BDE0  +
push 0Bh  +
jmp loc_1044A02  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
push [ebp+arg_8]  +
push edi  +
call sub_105DD36  +
test eax eax +
jnz loc_1044A0F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044A26  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044A26  +
push [ebp+arg_8]  +
push offset dword_100BDE0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1044A26  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
push 0  +
call sub_105D992  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push offset aIswow64process  +
push offset aKernel32  +
call ds:GetModuleHandleW  +
push eax  +
call ds:GetProcAddress  +
and [ebp+var_4] 0 +
mov esi eax +
test esi esi +
jz loc_1044A77  +
lea eax [ebp+var_4] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call esi  +
test eax eax +
jnz loc_1044A77  +
and [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
test eax eax +
jz loc_1044A98  +
push eax  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1044AB5  +
mov eax 80070057h +
jmp loc_1044AD6  +
push esi  +
mov esi [edi+8] +
xor eax eax +
jmp loc_1044AD0  +
test eax eax +
jnz loc_1044AD5  +
mov ecx [esi] +
test ecx ecx +
jz loc_1044ACD  +
push ecx  +
call sub_1044A82  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_1044ABD  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
call ds:GetCommandLineW  +
mov esi eax +
test esi esi +
jz loc_1044B35  +
movzx eax word ptr [esi] +
push 2  +
pop ecx  +
cmp ax 22h +
jnz loc_1044B13  +
add esi ecx +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1044B0B  +
cmp ax 22h +
jnz loc_1044AFB  +
cmp word ptr [esi] 22h +
jnz loc_1044B2B  +
jmp loc_1044B29  +
cmp ax 20h +
jbe loc_1044B2B  +
add esi ecx +
cmp word ptr [esi] 20h +
ja loc_1044B19  +
jmp loc_1044B2B  +
cmp ax 20h +
ja loc_1044B59  +
add esi ecx +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1044B23  +
jmp loc_1044B59  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044B59  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044B59  +
push offset dword_100BDE0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push offset aKernel32_dll  +
xor ebx ebx +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jnz loc_1044BC6  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1044B93  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044D13  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044D13  +
push offset dword_100BDE0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1044D13  +
push esi  +
mov esi ds:GetProcAddress +
push edi  +
push offset aWow64disablewo  +
push eax  +
call esi  +
push offset aWow64revertwow  +
push [ebp+hLibModule]  +
mov [ebp+var_4] eax +
call esi  +
mov [ebp+var_10] eax +
cmp [ebp+var_4] ebx +
jz loc_1044CDF  +
cmp eax ebx +
jz loc_1044CDF  +
push 44h  +
pop edi  +
push edi  +
lea eax [ebp+StartupInfo] +
push ebx  +
push eax  +
call memset  +
mov [ebp+StartupInfo.cb] edi +
xor eax eax +
lea edi [ebp+hObject] +
stos   +
stos   +
stos   +
stos   +
add esp 0Ch +
lea eax [ebp+var_C] +
push eax  +
call [ebp+var_4]  +
test eax eax +
jz loc_1044CB4  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push ebx  +
push ebx  +
push 10h  +
push 1  +
push ebx  +
push ebx  +
push [ebp+lpCommandLine]  +
push [ebp+lpApplicationName]  +
call ds:CreateProcessW  +
mov esi offset dword_100BDE0 +
test eax eax +
jnz loc_1044C83  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1044C5C  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044C93  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044C93  +
push [ebp+lpApplicationName]  +
push esi  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_1044C93  +
push [ebp+hObject]  +
mov edi ds:CloseHandle +
call edi  +
push dword ptr [ebp-1Ch]  +
call edi  +
push [ebp+var_C]  +
call [ebp+var_10]  +
test eax eax +
jnz loc_1044D08  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044CD8  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044CD8  +
push esi  +
push 10h  +
jmp loc_1044CCD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044CD8  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044CD8  +
push offset dword_100BDE0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ebx 80004005h +
jmp loc_1044D08  +
mov ebx 80004005h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044D08  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044D08  +
push offset dword_100BDE0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
call sub_1044A3B  +
test eax eax +
jz loc_1044DAA  +
push esi  +
call ds:GetCommandLineW  +
mov esi eax +
test esi esi +
jnz loc_1044D73  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044DA9  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044DA9  +
push offset dword_100BDE0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1044DA9  +
xor eax eax +
mov [ebp+ApplicationName] ax +
push 104h  +
lea eax [ebp+ApplicationName] +
push eax  +
push offset Src  +
call ds:ExpandEnvironmentStringsW  +
push esi  +
lea eax [ebp+ApplicationName] +
push eax  +
call sub_1044B62  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov edi ecx +
pop esi  +
mov ecx [ebp+var_4] +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset unk_1066080  +
mov esi ecx +
call sub_1044AA1  +
cmp byte ptr [esi+3Ch] 0 +
mov edi eax +
jz loc_1044DDF  +
push dword ptr [esi+38h]  +
call ds:Sleep  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
lea eax [ebp+var_14] +
push eax  +
mov ecx offset unk_1065F28 +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_14] ebx +
call sub_101AB07  +
mov edi eax +
cmp edi ebx +
mov esi offset dword_100BDE0 +
jge loc_1044E51  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1045203  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045203  +
push edi  +
push offset a_atlmodule_pre  +
push esi  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1045203  +
cmp edi 40200h +
jz loc_1045203  +
cmp [ebp+var_14] ebx +
jz loc_1044E74  +
push [ebp+hAccTable]  +
mov ecx offset unk_1065F28 +
call sub_101A4D0  +
jmp loc_1045203  +
push 109Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1044E91  +
mov ecx eax +
call sub_1040C50  +
mov ebx eax +
mov [ebp+var_C] eax +
jmp loc_1044E96  +
xor ebx ebx +
mov [ebp+var_C] ebx +
test ebx ebx +
jnz loc_1044EC9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044EBF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044EBF  +
push offset aCommandlinedat  +
push esi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 8007000Eh +
jmp loc_1045203  +
push 0  +
push 1  +
push [ebp+arg_C]  +
mov ecx ebx +
call sub_104266E  +
cmp eax 1 +
jz loc_1044F0B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1044EFF  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1044EFF  +
push eax  +
push esi  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov [ebp+var_10] 1 +
jmp loc_1045203  +
cmp dword ptr [ebx+830h] 0 +
jz loc_1044F47  +
mov ecx ebx +
call sub_104115E  +
test eax eax +
jz loc_1044F28  +
and [ebp+var_10] 0 +
jmp loc_1045203  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044EFF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044EFF  +
push 1  +
push esi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_1044EFA  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_1036047  +
mov edi eax +
test edi edi +
jge loc_1044F81  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1045203  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045203  +
push edi  +
push offset aCreateinstance  +
push esi  +
push 17h  +
jmp loc_1044E41  +
push 0CAA0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1044F99  +
mov ecx eax +
call sub_102CBA0  +
jmp loc_1044F9B  +
xor eax eax +
push eax  +
lea ecx [ebp+var_4] +
call sub_101C97A  +
cmp [ebp+var_4] 0 +
jnz loc_1044FD1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044EBF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044EBF  +
push offset aCtscsettings  +
push esi  +
push 18h  +
jmp loc_1044EB4  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_10309C7  +
mov edi eax +
test edi edi +
jge loc_1045008  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1045203  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045203  +
push edi  +
push offset aFailedToInit_3  +
push esi  +
push 19h  +
jmp loc_1044E41  +
mov eax [ebx+838h] +
xor ecx ecx +
add ebx 628h +
test eax eax +
setz cl  +
push ebx  +
push [ebp+arg_C]  +
push ecx  +
push [ebp+var_4]  +
mov ecx [ebp+var_8] +
call sub_10357E6  +
mov edi eax +
cmp edi 40200h +
jz loc_1045203  +
test edi edi +
jge loc_1045065  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1045203  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045203  +
push edi  +
push offset aTrybindtosingl  +
push esi  +
push 1Ah  +
jmp loc_1044E41  +
mov ebx [ebp+var_C] +
mov ecx [ebp+var_4] +
push ebx  +
call sub_103447B  +
mov edi eax +
test edi edi +
jge loc_104509F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1045203  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045203  +
push edi  +
push offset aLoadallsetting  +
push esi  +
push 1Bh  +
jmp loc_1044E41  +
push 3Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10450B4  +
mov ecx eax +
call sub_105A914  +
jmp loc_10450B6  +
xor eax eax +
mov dword_106607C eax +
test eax eax +
jnz loc_10450E6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1044EBF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1044EBF  +
push offset aCclxshell  +
push esi  +
push 1Ch  +
jmp loc_1044EB4  +
push eax  +
call sub_101AEEB  +
mov edi [ebp+var_4] +
mov ecx dword_106607C +
lea eax [edi+0CA94h] +
push eax  +
call sub_105A98E  +
lea eax [ebx+0C5Ch] +
cmp word ptr [eax] 0 +
jz loc_1045120  +
push eax  +
call ds:DeleteFileW  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
and [ebp+var_C] 0 +
and [ebp+uID] 0 +
and [ebp+var_18] 0 +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+uID] +
push eax  +
mov ecx edi +
call sub_102A2F4  +
mov edi eax +
test edi edi +
jge loc_1045171  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104515E  +
test byte ptr [eax+1Ch] 4 +
jz loc_104515E  +
push edi  +
push esi  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push [ebp+var_18]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_104497F  +
jmp loc_1045203  +
push [ebp+var_4]  +
mov ecx [ebp+var_8] +
push 0  +
call sub_1035EAD  +
mov edi eax +
test edi edi +
jge loc_10451A4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1045203  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045203  +
push edi  +
push offset aStartshellRetu  +
push esi  +
push 1Eh  +
jmp loc_1044E41  +
mov ecx [ebp+var_8] +
call sub_103559C  +
mov ebx eax +
test edi edi +
jnz loc_1045203  +
mov esi ds:GetMessageW +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jz loc_10451FE  +
lea eax [ebp+Msg] +
push eax  +
push [ebp+hAccTable]  +
push ebx  +
call ds:TranslateAcceleratorW  +
test eax eax +
jnz loc_10451B8  +
lea eax [ebp+Msg] +
push eax  +
push ebx  +
call ds:IsDialogMessageW  +
test eax eax +
jnz loc_10451B8  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_10451B8  +
mov esi offset dword_100BDE0 +
cmp [ebp+var_14] 0 +
jz loc_1045213  +
mov ecx offset unk_1065F28 +
call sub_1044DBE  +
mov ebx [ebp+var_C] +
test ebx ebx +
jz loc_104523D  +
cmp edi 40200h +
jz loc_1045235  +
lea eax [ebx+0C5Ch] +
cmp word ptr [eax] 0 +
jz loc_1045235  +
push eax  +
call ds:DeleteFileW  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_104526F  +
call sub_1035D2C  +
mov edi eax +
test edi edi +
jge loc_104526F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104526F  +
test byte ptr [eax+1Ch] 4 +
jz loc_104526F  +
push esi  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax dword_106607C +
test eax eax +
jz loc_1045285  +
push eax  +
call sub_1018A83  +
and dword_106607C 0 +
test edi edi +
pop edi  +
pop esi  +
pop ebx  +
jge loc_1045293  +
mov [ebp+var_10] 1 +
cmp [ebp+var_4] 0 +
jz loc_10452A1  +
push [ebp+var_4]  +
call sub_1018A83  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_10452B2  +
and [ebp+var_8] 0 +
push eax  +
call sub_1018A83  +
mov eax [ebp+var_10] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
mov esi offset unk_1066058 +
push esi  +
call sub_104481B  +
push offset aMstsctrace  +
mov dword_1066078 offset dword_10019CC +
mov lpReserved esi +
call sub_10448EC  +
call sub_104388A  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:HeapSetInformation  +
mov esi offset dword_100BDE0 +
mov edi offset lpReserved +
test eax eax +
jnz loc_1045339  +
mov eax lpReserved +
cmp eax edi +
jz loc_1045339  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045339  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push esi  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
call sub_105D698  +
cmp eax ebx +
jge loc_1045365  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1045487  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1045487  +
push eax  +
push offset aTsplatformstat  +
push esi  +
push 21h  +
jmp loc_10453C2  +
push ebx  +
call ds:CoInitialize  +
cmp eax ebx +
jge loc_1045393  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1045487  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1045487  +
push eax  +
push offset aCoinitializeFa  +
push esi  +
push 22h  +
jmp loc_10453C2  +
call sub_1049BCE  +
call sub_105D9A3  +
cmp eax ebx +
jge loc_10453D2  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1045487  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1045487  +
push eax  +
push offset aFailedToInitia  +
push esi  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1045487  +
mov ebx [ebp+hInstance] +
push ebx  +
call sub_105DAF6  +
test eax eax +
jz loc_10453F1  +
push 0BC6h  +
push ebx  +
call sub_105DCE4  +
mov [ebp+hAccTable] eax +
test eax eax +
jnz loc_1045401  +
push offset a_mui  +
push ebx  +
call sub_105DF42  +
jmp loc_1045487  +
call sub_1044AE0  +
mov ebx eax +
test ebx ebx +
jnz loc_104542B  +
mov eax lpReserved +
cmp eax edi +
jz loc_1045487  +
test byte ptr [eax+1Ch] 4 +
jz loc_1045487  +
push esi  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1045487  +
mov eax lpReserved +
cmp eax edi +
jz loc_1045449  +
test byte ptr [eax+1Ch] 1 +
jz loc_1045449  +
push ebx  +
push esi  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
call sub_1044D1F  +
test eax eax +
jz loc_1045475  +
mov eax lpReserved +
cmp eax edi +
jz loc_104546F  +
test byte ptr [eax+1Ch] 2 +
jz loc_104546F  +
push esi  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and [ebp+var_4] 0 +
jmp loc_1045487  +
push ebx  +
push [ebp+hAccTable]  +
push [ebp+hPrevInstance]  +
push [ebp+hInstance]  +
call sub_1044DE9  +
mov [ebp+var_4] eax +
call ds:CoUninitialize  +
call sub_105D70F  +
test eax eax +
jge loc_10454BA  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_10454BA  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10454BA  +
push eax  +
push offset aTsplatformst_0  +
push esi  +
push 27h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
call sub_105DA93  +
test eax eax +
jge loc_10454E7  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_10454E7  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10454E7  +
push eax  +
push offset aFailedToTermin  +
push esi  +
push 28h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
call sub_1049BDB  +
mov eax lpReserved +
cmp eax edi +
jz loc_1045509  +
test byte ptr [eax+1Ch] 1 +
jz loc_1045509  +
push esi  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
call sub_104493A  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov dword ptr [esi+8] offset off_1062290 +
mov dword ptr [esi+0Ch] offset dword_1062294 +
call sub_1017E84  +
test eax eax +
jge loc_1045565  +
mov byte_1065EE4 1 +
jmp loc_104556B  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_1045588  +
mov eax 80070057h +
jmp loc_1045599  +
cmp dword ptr [eax] 2Ch +
jnz loc_1045581  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1017E84  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10455B7  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10455E0  +
cmp eax [ecx+4] +
jge loc_10455E0  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_104562F  +
mov eax 80070057h +
jmp loc_1045676  +
mov eax [esi] +
cmp eax edi +
jz loc_1045674  +
cmp eax 2Ch +
jnz loc_1045628  +
cmp [esi+24h] edi +
jle loc_104565F  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_10455C6  +
movzx eax word ptr [eax] +
push [ebp+hInstance]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1045643  +
pop ebx  +
lea ecx [esi+20h] +
call sub_10455A2  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1017E6D  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
adc eax offset DeleteCriticalSection +
lea ecx [esi+30h] +
pop esi  +
jmp sub_10455A2  +
***
or al dh +
add eax offset byte_1065EE4 +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push hModule  +
mov esi ecx +
push esi  +
call sub_1045618  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_10455A2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10457F0  +
test eax eax +
jnz loc_10457F5  +
mov ecx [esi] +
test ecx ecx +
jz loc_10457ED  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10457E1  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_106616C +
push offset dword_106615C  +
push dword_1066168  +
mov dword_106615C eax +
push offset unk_106614C  +
push offset unk_1066150  +
push offset unk_1066148  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1066158 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset dword_10670C0 +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1045895  +
cmp eax esi +
jnz loc_1045888  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1045898  +
push 3E8h  +
call ds:Sleep  +
jmp loc_104586F  +
xor esi esi +
inc esi  +
mov eax dword_10670BC +
cmp eax esi +
jnz loc_10458AB  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10458DA  +
mov eax dword_10670BC +
test eax eax +
jnz loc_10458D4  +
mov dword_10670BC esi +
push offset dword_1001728  +
push offset dword_1001718  +
call sub_10457D4  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10458DA  +
jmp loc_1045A02  +
mov dword_1066164 esi +
mov eax dword_10670BC +
cmp eax esi +
jnz loc_10458FE  +
push offset dword_1001714  +
push offset dword_10016F4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10670BC 2 +
test ebx ebx +
jnz loc_104590A  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10670D0 0 +
jz loc_104592E  +
push offset dword_10670D0  +
call sub_10467F9  +
pop ecx  +
test eax eax +
jz loc_104592E  +
push 0  +
push 2  +
push 0  +
call dword_10670D0  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1045948  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1045958  +
cmp al 20h +
ja loc_1045958  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1045948  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1045964  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1045967  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_1066160 eax +
cmp dword_1066154 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1045999  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_10459AC  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1045935  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_1066160 eax +
cmp dword_1066154 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_1066164 0 +
jnz loc_10459ED  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1066160 +
jmp loc_1045A0E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1045A2B  +
xor eax eax +
jmp loc_1045A78  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1045A27  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1045A65  +
cmp ecx 20Bh +
jnz loc_1045A27  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1045A27  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1045A73  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1045A27  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1066154 eax +
call sub_10468FF  +
push eax  +
call ds:__set_app_type  +
or dword_10670C8 0FFFFFFFFh +
or dword_10670CC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1066174 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1066170 +
mov [eax] ecx +
call sub_101BBEE  +
cmp dword_10659E8 0 +
jnz loc_1045AD1  +
push offset sub_101BBEE  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1046881  +
xor eax eax +
retn   +
***
call sub_104693E  +
jmp ___tmainCRTStartup  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1045B9C  +
push offset dword_10659C0  +
call sub_1046440  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_10659C0 +
jnz loc_1045BA7  +
retn 0  +
jmp loc_10469D4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_1045C27  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_1045C27  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1045E28  +
add esp 14h +
xor eax eax +
jmp loc_1045C36  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1045C61  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1045D7D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1045E63  +
xor eax eax +
jmp loc_1045EC8  +
cmp [ebp+arg_0] edi +
jnz loc_1045E83  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1045E28  +
add esp 14h +
mov eax esi +
jmp loc_1045EC8  +
cmp [ebp+arg_8] edi +
jz loc_1045E9E  +
cmp [ebp+arg_4] esi +
jb loc_1045E9E  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call memcpy  +
add esp 0Ch +
jmp loc_1045E5F  +
push [ebp+arg_4]  +
push edi  +
push [ebp+arg_0]  +
call memset  +
add esp 0Ch +
cmp [ebp+arg_8] edi +
jz loc_1045E68  +
cmp [ebp+arg_4] esi +
jnb loc_1045EC5  +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1045E72  +
push 16h  +
pop eax  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_1045EFC  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1045F23  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_1045F02  +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_4]  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_1047F5F  +
add esp 10h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_1045F43  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
ja loc_1045F61  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1045E28  +
add esp 14h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov esi [ebp+arg_8] +
cmp esi edi +
jnz loc_1045F6F  +
xor eax eax +
mov [edx] ax +
jmp loc_1045F43  +
mov ecx edx +
cmp [ecx] di +
jz loc_1045F7B  +
inc ecx  +
inc ecx  +
dec ebx  +
jnz loc_1045F71  +
cmp ebx edi +
jz loc_1045F68  +
movzx eax word ptr [esi] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
cmp ax di +
jz loc_1045F91  +
dec ebx  +
jnz loc_1045F7F  +
xor eax eax +
cmp ebx edi +
jnz loc_1045F5C  +
mov [edx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1045F4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_1045FC5  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
ja loc_1045FE3  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1045E28  +
add esp 14h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov esi [ebp+arg_8] +
cmp esi edi +
jnz loc_1045FF1  +
xor eax eax +
mov [edx] ax +
jmp loc_1045FC5  +
mov ecx edx +
movzx eax word ptr [esi] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
cmp ax di +
jz loc_1046005  +
dec ebx  +
jnz loc_1045FF3  +
xor eax eax +
cmp ebx edi +
jnz loc_1045FDE  +
mov [edx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1045FCF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_C] edi +
jnz loc_1046044  +
cmp ebx edi +
jnz loc_1046048  +
cmp [ebp+arg_4] edi +
jnz loc_104604F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp ebx edi +
jz loc_104604F  +
mov ecx [ebp+arg_4] +
cmp ecx edi +
ja loc_104606A  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1045E28  +
add esp 14h +
mov eax esi +
jmp loc_104603F  +
mov edx [ebp+arg_8] +
cmp [ebp+arg_C] edi +
jz loc_104607D  +
cmp edx edi +
jnz loc_104607D  +
xor eax eax +
mov [ebx] ax +
jmp loc_104604F  +
push 2  +
mov eax ebx +
mov [ebp+var_4] ecx +
pop esi  +
cmp [eax] di +
jz loc_1046091  +
add eax esi +
dec [ebp+var_4]  +
jnz loc_1046085  +
cmp [ebp+var_4] edi +
jz loc_1046076  +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_10460B2  +
movzx ecx word ptr [edx] +
mov [eax] cx +
add eax esi +
add edx esi +
cmp cx di +
jz loc_10460DA  +
dec [ebp+var_4]  +
jnz loc_104609C  +
jmp loc_10460DA  +
cmp [ebp+arg_C] edi +
jbe loc_10460D3  +
movzx ecx word ptr [edx] +
mov [eax] cx +
add eax esi +
add edx esi +
cmp cx di +
jz loc_10460D0  +
dec [ebp+var_4]  +
jz loc_10460D0  +
dec [ebp+arg_C]  +
jnz loc_10460B7  +
cmp [ebp+arg_C] edi +
jnz loc_10460DA  +
xor ecx ecx +
mov [eax] cx +
cmp [ebp+var_4] edi +
jnz loc_104603D  +
xor eax eax +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_10460FB  +
mov ecx [ebp+arg_4] +
push 50h  +
mov [ebx+ecx*2-2] ax +
pop eax  +
jmp loc_104603F  +
mov [ebx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1046059  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp [ebp+arg_C] edi +
jnz loc_1046136  +
cmp esi edi +
jnz loc_104613A  +
cmp [ebp+arg_4] edi +
jnz loc_1046141  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp esi edi +
jz loc_1046141  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
ja loc_104615C  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1045E28  +
add esp 14h +
mov eax esi +
jmp loc_1046131  +
cmp [ebp+arg_C] edi +
jnz loc_1046168  +
xor eax eax +
mov [esi] ax +
jmp loc_104612F  +
mov edx [ebp+arg_8] +
cmp edx edi +
jnz loc_1046176  +
xor eax eax +
mov [esi] ax +
jmp loc_1046141  +
cmp [ebp+arg_C] 0FFFFFFFFh +
mov eax esi +
jnz loc_1046192  +
movzx ecx word ptr [edx] +
mov [eax] cx +
inc eax  +
inc eax  +
inc edx  +
inc edx  +
cmp cx di +
jz loc_10461B3  +
dec ebx  +
jnz loc_104617E  +
jmp loc_10461B3  +
movzx ecx word ptr [edx] +
mov [eax] cx +
inc eax  +
inc eax  +
inc edx  +
inc edx  +
cmp cx di +
jz loc_10461A9  +
dec ebx  +
jz loc_10461A9  +
dec [ebp+arg_C]  +
jnz loc_1046192  +
cmp [ebp+arg_C] edi +
jnz loc_10461B3  +
xor ecx ecx +
mov [eax] cx +
cmp ebx edi +
jnz loc_104612F  +
xor eax eax +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_10461D3  +
mov ecx [ebp+arg_4] +
push 50h  +
mov [esi+ecx*2-2] ax +
pop eax  +
jmp loc_1046131  +
mov [esi] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_104614B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_104621B  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
xor eax eax +
jmp loc_10462D7  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_1046230  +
mov ecx [ebp+arg_0] +
cmp ecx esi +
jnz loc_104624F  +
mov ecx [eax] +
cmp ecx esi +
jnz loc_104624F  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
xor eax eax +
jmp loc_10462D6  +
movzx edx word ptr [ecx] +
push ebx  +
cmp dx si +
jz loc_1046284  +
movzx ebx word ptr [edi] +
mov edi [ebp+arg_4] +
cmp bx si +
jz loc_1046275  +
movzx eax bx +
cmp ax dx +
jz loc_1046275  +
inc edi  +
inc edi  +
movzx eax word ptr [edi] +
cmp ax si +
jnz loc_1046266  +
cmp [edi] si +
jz loc_1046284  +
inc ecx  +
inc ecx  +
movzx edx word ptr [ecx] +
cmp dx si +
jnz loc_104625B  +
mov [ebp+var_4] ecx +
cmp [ecx] si +
jz loc_10462C4  +
mov eax [ebp+arg_4] +
movzx ebx word ptr [eax] +
mov edx [ebp+arg_4] +
cmp bx si +
jz loc_10462AF  +
movzx edi word ptr [ecx] +
movzx eax bx +
cmp ax di +
jz loc_10462AF  +
inc edx  +
inc edx  +
movzx eax word ptr [edx] +
cmp ax si +
jnz loc_10462A0  +
cmp [edx] si +
jnz loc_10462BD  +
inc ecx  +
inc ecx  +
cmp [ecx] si +
jnz loc_1046292  +
jmp loc_10462C4  +
xor eax eax +
mov [ecx] ax +
inc ecx  +
inc ecx  +
mov eax [ebp+arg_8] +
mov [eax] ecx +
mov eax [ebp+var_4] +
sub eax ecx +
neg eax  +
sbb eax eax +
and eax [ebp+var_4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1046476  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_10465A3  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1046508  +
jmp loc_10464B0  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_10464DB  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_1046512  +
jg loc_104651B  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_10464B0  +
cmp [ebp+var_1] 0 +
jz loc_1046508  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_10464FA  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_10464E8  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_104654F  +
cmp dword_10670C4 0 +
jz loc_104654F  +
push offset dword_10670C4  +
call sub_10467F9  +
add esp 4 +
test eax eax +
jz loc_104654F  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_10670C4  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1046570  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1046588  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1046508  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_10464E8  +
***
sub esp 8 +
and esp 0FFFFFFF8h +
fstp  [esp+8+var_8] +
cvttsd2si eax [esp+8+var_8] +
leave   +
retn   +
***
sub esp 20h +
and esp 0FFFFFFF0h +
fld  st +
fst  [esp+20h+var_8] +
fistp  [esp+20h+var_10] +
fild  [esp+20h+var_10] +
mov edx [esp+20h+var_8] +
mov eax dword ptr [esp+20h+var_10] +
test eax eax +
jz integer_QnaN_or_zero  +
fsubp st(1) st +
test edx edx +
jns positive  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
xor ecx 80000000h +
add ecx 7FFFFFFFh +
adc eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
adc edx 0 +
jmp localexit  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
add ecx 7FFFFFFFh +
sbb eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
sbb edx 0 +
jmp localexit  +
mov edx dword ptr [esp+20h+var_10+4] +
test edx 7FFFFFFFh +
jnz arg_is_not_integer_QnaN  +
fstp  [esp+20h+var_8] +
fstp  [esp+20h+var_8] +
leave   +
retn   +
***
cmp dword_1065A00 0 +
jz __ftol2  +
jmp sub_10465C7  +
***
push offset loc_1045B72  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10659C0 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1045B9C  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_104673E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_104673E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1046738  +
cmp eax 19930521h +
jz loc_1046738  +
cmp eax 19930522h +
jz loc_1046738  +
cmp eax 1994000h +
jnz loc_104673E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1046700+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1046786  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1046782  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10467ED  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10467E5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10467EF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10467D5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1046770  +
pop ecx  +
test eax eax +
jz loc_1046856  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10467B0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1046856  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_104685F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10468F2  +
cmp ecx 0FFFFFFFFh +
jz loc_10468F2  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10468EB  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10468EB  +
cmp edx 10000000h +
jnb loc_10468EB  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10468EB  +
jmp loc_10468E6  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1046934  +
push eax  +
call sub_1046899  +
test eax eax +
jz loc_1046934  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1046929  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1046934  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10659C0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1046970  +
test eax ebx +
jz loc_1046970  +
not eax  +
mov dword_10659C4 eax +
jmp loc_10469CB  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10469B7  +
test dword_10659C0 ebx +
jnz loc_10469BC  +
mov esi 0BB40E64Fh +
mov dword_10659C0 esi +
not esi  +
mov dword_10659C4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1066278 eax +
mov dword_1066274 ecx +
mov dword_1066270 edx +
mov dword_106626C ebx +
mov dword_1066268 esi +
mov dword_1066264 edi +
mov word_1066290 ss +
mov word_1066284 cs +
mov word_1066260 ds +
mov word_106625C es +
mov word_1066258 fs +
mov word_1066254 gs +
pushf   +
pop dword_1066288  +
mov eax [ebp+0] +
mov dword_106627C eax +
mov eax [ebp+4] +
mov dword_1066280 eax +
lea eax [ebp+8] +
mov dword_106628C eax +
mov eax [ebp-320h] +
mov dword_10661C8 10001h +
mov eax dword_1066280 +
mov dword_1066184 eax +
mov dword_1066178 0C0000409h +
mov dword_106617C 1 +
mov eax dword_10659C0 +
mov [ebp-328h] eax +
mov eax dword_10659C4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_1046B21  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1046B68  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1046B2F  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_1046B5D  +
cmp edx [esp+0Ch] +
ja loc_1046B5D  +
jb loc_1046B66  +
cmp eax [esp+8] +
jbe loc_1046B66  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1046BA8  +
mov eax [ebp+arg_0] +
jb loc_1046B9F  +
cmp eax 0FFFFFFFFh +
ja loc_1046BA8  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mul  [ebp+arg_4] +
push [ebp+arg_8]  +
push edx  +
push eax  +
call sub_1046B8A  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [esi] +
cmp [ebp+arg_0] ebx +
jnz loc_1046C6B  +
mov eax [edi] +
cmp eax [ebp+arg_4] +
jnz loc_1046C56  +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
pop ecx  +
mov eax ebx +
mul  ecx +
push edx  +
push eax  +
call sub_1046B8A  +
add esp 0Ch +
test eax eax +
jge loc_1046C0E  +
xor eax eax +
jmp loc_1046C6E  +
push 4  +
push ebx  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [edi] eax +
test eax eax +
jz loc_1046C0A  +
push [ebp+arg_0]  +
mov eax [ebp+arg_8] +
push [ebp+arg_4]  +
mov dword ptr [eax] 1 +
push dword ptr [edi]  +
call memcpy  +
mov eax [esi] +
push esi  +
add eax eax +
push 2  +
push eax  +
mov [esi] eax +
call sub_1046BBA  +
add esp 18h +
test eax eax +
jge loc_1046C6B  +
push dword ptr [edi]  +
call ds:__imp_free  +
pop ecx  +
jmp loc_1046C0A  +
push 4  +
push ebx  +
push eax  +
call off_10659D0  +
add esp 0Ch +
test eax eax +
jz loc_1046C0A  +
mov [edi] eax +
shl dword ptr [esi] 1 +
xor eax eax +
inc eax  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 0FF00h +
push esi  +
jnz loc_1046CA0  +
movzx esi word ptr [ebp+arg_0] +
mov eax esi +
and eax 0FFh +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1046CA0  +
mov eax esi +
jmp loc_1046CAA  +
movzx eax word ptr [ebp+arg_0] +
and eax 0FFFFFFDFh +
sub eax 7 +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
cmp ax [ebp+arg_0] +
jz loc_1046CC8  +
pop ebp  +
jmp loc_1049780  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+arg_0]  +
inc dword ptr [edi]  +
call sub_1049669  +
movzx esi ax +
mov eax 0FFFFh +
pop ecx  +
cmp si ax +
jz loc_1046CFC  +
push 8  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1046CD5  +
mov ax si +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_28] edx +
mov edx [ebx] +
mov [ebp+var_10] edx +
mov edx [ebp+arg_0] +
push esi  +
and dl 8 +
movsx esi dl +
neg esi  +
sbb esi esi +
dec dword ptr [edi]  +
mov [ebp+var_1C] eax +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
mov [ebp+var_20] ecx +
call sub_1046CB2  +
mov eax [ebp+arg_0] +
mov [ebp+var_14] eax +
and [ebp+var_14] 10h +
pop ecx  +
pop ecx  +
jnz loc_1046D55  +
dec [ebp+arg_10]  +
mov [ebp+var_18] eax +
and [ebp+var_18] 1 +
cmp [ebp+var_18] 0 +
jz loc_1046D70  +
mov eax [ebp+arg_C] +
dec [ebp+arg_C]  +
test eax eax +
jz loc_1046E8C  +
push [ebp+var_20]  +
inc dword ptr [edi]  +
call sub_1049669  +
pop ecx  +
mov ecx [ebp+var_1C] +
mov [ecx] ax +
mov ecx 0FFFFh +
mov [ebp+var_2C] ax +
cmp cx ax +
jz loc_1046E79  +
cmp [ebp+var_14] 0 +
jnz loc_1046DEF  +
test byte ptr [ebp+arg_0] 20h +
jz loc_1046DB1  +
cmp ax 9 +
jb loc_1046DAB  +
cmp ax 0Dh +
jbe loc_1046DB1  +
cmp ax 20h +
jnz loc_1046DEF  +
test byte ptr [ebp+arg_0] 40h +
jz loc_1046E79  +
mov cx ax +
shr cx 3 +
movzx edx cx +
cmp ax dx +
jb loc_1046E79  +
mov ecx eax +
and ecx 7 +
xor eax eax +
inc eax  +
shl eax cl +
movzx ecx dx +
mov edx [ebp+arg_4] +
movsx ecx byte ptr [ecx+edx] +
xor ecx esi +
test eax ecx +
jz loc_1046E79  +
mov eax dword ptr [ebp+var_2C] +
test byte ptr [ebp+arg_0] 4 +
jnz loc_1046E70  +
cmp [ebp+arg_10] 0 +
jz loc_1046EB3  +
test byte ptr [ebp+arg_0] 2 +
jz loc_1046E15  +
mov ecx [ebx] +
mov [ecx] ax +
add dword ptr [ebx] 2 +
dec [ebp+arg_10]  +
jmp loc_1046D5C  +
mov ecx ds:__mb_cur_max +
mov edx [ebp+arg_10] +
push eax  +
cmp edx [ecx] +
jb loc_1046E2F  +
push dword ptr [ebx]  +
call ds:wctomb  +
pop ecx  +
pop ecx  +
jmp loc_1046E5E  +
lea eax [ebp+var_C] +
push eax  +
call ds:wctomb  +
pop ecx  +
pop ecx  +
mov [ebp+var_24] eax +
test eax eax +
jle loc_1046E47  +
cmp eax [ebp+arg_10] +
ja loc_1046EB3  +
cmp eax 5 +
ja loc_1046EB3  +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx]  +
call memcpy  +
mov eax [ebp+var_24] +
add esp 0Ch +
test eax eax +
jle loc_1046D5C  +
add [ebx] eax +
sub [ebp+arg_10] eax +
jmp loc_1046D5C  +
add [ebp+var_10] 2 +
jmp loc_1046D5C  +
dec dword ptr [edi]  +
mov eax [ebp+var_1C] +
movzx eax word ptr [eax] +
push [ebp+var_20]  +
push eax  +
call sub_1046CB2  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_10] +
cmp eax [ebx] +
jz loc_1046ECD  +
test byte ptr [ebp+arg_0] 4 +
jnz loc_1046EE8  +
mov eax [ebp+var_28] +
inc dword ptr [eax]  +
cmp [ebp+var_14] 0 +
jnz loc_1046EE8  +
test byte ptr [ebp+arg_0] 2 +
mov eax [ebx] +
jz loc_1046EE5  +
xor ecx ecx +
mov [eax] cx +
jmp loc_1046EE8  +
call ds:__imp__errno  +
test byte ptr [ebp+arg_0] 2 +
mov dword ptr [eax] 0Ch +
jz loc_1046EDD  +
mov ecx [ebp+var_10] +
xor eax eax +
mov [ecx] ax +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
mov eax [ebp+var_10] +
mov byte ptr [eax] 0 +
jmp loc_1046ECD  +
mov byte ptr [eax] 0 +
xor eax eax +
jmp loc_1046ED0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi 2000h +
push edi  +
xor ebx ebx +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1046F21  +
call ds:__imp__errno  +
push 0Ch  +
pop ecx  +
mov [eax] ecx +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push edi  +
push 0  +
push esi  +
call memset  +
mov edx [ebp+arg_4] +
add dword ptr [edx] 2 +
mov eax [edx] +
add esp 0Ch +
push 5Eh  +
pop ecx  +
cmp cx [eax] +
jnz loc_1046F43  +
inc eax  +
inc eax  +
or [ebp+arg_0] 8 +
push 5Dh  +
pop ecx  +
cmp cx [eax] +
jnz loc_1046FDE  +
push ecx  +
inc eax  +
pop ebx  +
inc eax  +
mov byte ptr [esi+0Bh] 20h +
jmp loc_1046FDE  +
movzx ecx cx +
inc eax  +
push 2Dh  +
pop edi  +
inc eax  +
mov [ebp+var_4] ecx +
cmp di cx +
jnz loc_1046FC2  +
test bx bx +
jz loc_1046FC2  +
movzx ecx word ptr [eax] +
push 5Dh  +
pop edi  +
cmp di cx +
jz loc_1046FC2  +
movzx edi cx +
inc eax  +
inc eax  +
cmp bx di +
jnb loc_1046F8B  +
movzx ecx di +
jmp loc_1046F91  +
movzx ecx bx +
movzx ebx di +
cmp bx cx +
ja loc_1046FBE  +
sub ecx ebx +
inc ecx  +
movzx ecx cx +
movzx edx bx +
mov [ebp+var_4] ecx +
mov ecx edx +
shr ecx 3 +
lea edi [ecx+esi] +
mov ecx edx +
and ecx 7 +
mov bl 1 +
shl bl cl +
or [edi] bl +
inc edx  +
dec [ebp+var_4]  +
jnz loc_1046FA2  +
mov edx [ebp+arg_4] +
xor ebx ebx +
jmp loc_1046FDE  +
movzx ecx word ptr [ebp+var_4] +
movzx ebx word ptr [ebp+var_4] +
mov edx ecx +
shr edx 3 +
lea edi [edx+esi] +
and ecx 7 +
mov dl 1 +
shl dl cl +
or [edi] dl +
mov edx [ebp+arg_4] +
movzx ecx word ptr [eax] +
push 5Dh  +
pop edi  +
cmp di cx +
jnz loc_1046F5C  +
cmp word ptr [eax] 0 +
jnz loc_1047005  +
or edi 0FFFFFFFFh +
push esi  +
call ds:__imp_free  +
pop ecx  +
mov eax edi +
jmp loc_1046F1C  +
push [ebp+arg_1C]  +
mov ecx [ebp+arg_18] +
push [ebp+arg_14]  +
mov ebx [ebp+arg_10] +
push [ebp+arg_8]  +
mov edi [ebp+arg_C] +
push esi  +
push [ebp+arg_0]  +
mov [edx] eax +
mov edx [ebp+arg_20] +
call sub_1046D07  +
add esp 14h +
mov edi eax +
jmp loc_1046FF6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 31Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_8] +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+var_314] edx +
lea edx [ebp+var_2C0] +
mov [ebp+var_2D8] ecx +
mov [ebp+var_2E8] eax +
mov [ebp+var_2E0] edx +
mov [ebp+var_300] 15Eh +
mov [ebp+var_2FC] esi +
mov dword ptr [ebp+var_2C4] esi +
mov [ebp+var_31C] esi +
cmp eax esi +
jnz loc_10470B1  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1047F4D  +
push edi  +
cmp ecx esi +
jnz loc_10470D9  +
call ds:__imp__errno  +
or edi 0FFFFFFFFh +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
mov eax edi +
jmp loc_1047F4C  +
movzx eax word ptr [eax] +
mov [ebp+var_2D9] 0 +
mov [ebp+var_2CC] esi +
mov [ebp+var_2F8] esi +
cmp ax si +
jz loc_1047F46  +
mov esi [ebp+var_2E8] +
xor edi edi +
push ebx  +
mov ebx ds:iswctype +
push 8  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1047152  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push [ebp+var_2D8]  +
lea edi [ebp+var_2CC] +
call sub_1046CCF  +
movzx eax ax +
pop ecx  +
push eax  +
call sub_1046CB2  +
pop ecx  +
pop ecx  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
push 8  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_104713B  +
xor edi edi +
jmp loc_1047E9D  +
push 25h  +
pop eax  +
cmp ax [esi] +
jnz loc_1047E5D  +
mov [ebp+var_310] edi +
mov [ebp+var_2E4] edi +
mov [ebp+var_2F4] edi +
mov [ebp+var_2D0] edi +
mov [ebp+var_308] edi +
mov [ebp+var_2DA] 0 +
mov [ebp+var_2D3] 0 +
mov [ebp+var_2C5] 0 +
mov [ebp+var_2D2] 0 +
mov [ebp+var_2D1] 1 +
mov [ebp+var_30C] edi +
inc esi  +
inc esi  +
movzx ebx word ptr [esi] +
mov [ebp+var_2E8] esi +
test ebx 0FF00h +
jnz loc_10471E5  +
movzx eax bl +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_10471E5  +
mov eax [ebp+var_2D0] +
inc [ebp+var_2F4]  +
imul eax eax +
lea eax [eax+ebx-30h] +
mov [ebp+var_2D0] eax +
jmp loc_10472BF  +
cmp ebx 4Eh +
jg loc_1047285  +
jz loc_10472BF  +
cmp ebx 2Ah +
jz loc_104727D  +
cmp ebx 46h +
jz loc_10472BF  +
cmp ebx 49h +
jz loc_104721F  +
cmp ebx 4Ch +
jnz loc_1047294  +
inc [ebp+var_2D1]  +
jmp loc_10472BF  +
movzx ecx word ptr [esi+2] +
cmp cx 36h +
jnz loc_104724E  +
lea eax [esi+4] +
cmp word ptr [eax] 34h +
jnz loc_104724E  +
inc [ebp+var_30C]  +
mov [ebp+var_2F0] edi +
mov [ebp+var_2EC] edi +
mov [ebp+var_2E8] eax +
mov esi eax +
jmp loc_10472BF  +
cmp cx 33h +
jnz loc_104725D  +
lea eax [esi+4] +
cmp word ptr [eax] 32h +
jz loc_1047244  +
cmp cx 64h +
jz loc_10472BF  +
cmp cx 69h +
jz loc_10472BF  +
cmp cx 6Fh +
jz loc_10472BF  +
cmp cx 78h +
jz loc_10472BF  +
cmp cx 58h +
jnz loc_1047294  +
jmp loc_10472BF  +
inc [ebp+var_2D3]  +
jmp loc_10472BF  +
cmp ebx 68h +
jz loc_10472B3  +
cmp ebx 6Ch +
jz loc_104729C  +
cmp ebx 77h +
jz loc_10472AB  +
inc [ebp+var_2C5]  +
jmp loc_10472BF  +
lea eax [esi+2] +
cmp word ptr [eax] 6Ch +
jz loc_1047232  +
inc [ebp+var_2D1]  +
inc [ebp+var_2D2]  +
jmp loc_10472BF  +
dec [ebp+var_2D1]  +
dec [ebp+var_2D2]  +
cmp [ebp+var_2C5] 0 +
jz loc_10471A5  +
cmp [ebp+var_2D3] 0 +
jnz loc_10472EE  +
mov eax [ebp+var_314] +
mov ebx [eax] +
mov [ebp+var_318] eax +
add eax 4 +
mov [ebp+var_314] eax +
jmp loc_10472F0  +
xor ebx ebx +
cmp [ebp+var_2D2] 0 +
mov [ebp+var_304] ebx +
mov [ebp+var_2C5] 0 +
jnz loc_1047323  +
movzx eax word ptr [esi] +
cmp ax 53h +
jz loc_104731C  +
mov [ebp+var_2D2] 1 +
cmp ax 43h +
jnz loc_1047323  +
mov [ebp+var_2D2] 0FFh +
mov eax [ebp+var_2E8] +
movzx esi word ptr [eax] +
or esi 20h +
cmp esi 6Eh +
jz loc_104737E  +
cmp esi 63h +
jz loc_1047351  +
cmp esi 7Bh +
jz loc_1047351  +
push [ebp+var_2D8]  +
lea edi [ebp+var_2CC] +
call sub_1046CCF  +
jmp loc_1047362  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
mov dword ptr [ebp+var_2C4] eax +
mov eax 0FFFFh +
pop ecx  +
cmp ax [ebp+var_2C4] +
jz loc_1047EF1  +
cmp [ebp+var_2F4] 0 +
jz loc_1047394  +
cmp [ebp+var_2D0] 0 +
jz loc_1047EAB  +
mov cl [ebp+var_2D3] +
test cl cl +
jnz loc_10473F4  +
cmp esi 63h +
jz loc_10473AD  +
cmp esi 73h +
jz loc_10473AD  +
cmp esi 7Bh +
jnz loc_10473F4  +
mov eax [ebp+var_318] +
mov ebx [eax] +
add eax 4 +
mov [ebp+var_318] eax +
add eax 4 +
xor edi edi +
mov [ebp+var_314] eax +
mov eax [eax-4] +
inc edi  +
mov [ebp+var_304] ebx +
mov [ebp+var_308] eax +
cmp eax edi +
jnb loc_10473F7  +
cmp [ebp+var_2D2] 0 +
jle loc_1047EB9  +
xor eax eax +
mov [ebx] ax +
jmp loc_1047EBC  +
xor edi edi +
inc edi  +
cmp esi 6Fh +
jg loc_10478D4  +
jz loc_1047AEF  +
cmp esi 63h +
jz loc_10478B9  +
cmp esi 64h +
jz loc_1047AEF  +
jle loc_10478FE  +
cmp esi 67h +
jle loc_1047463  +
cmp esi 69h +
jz loc_1047444  +
cmp esi 6Eh +
jnz loc_10478FE  +
mov eax [ebp+var_2CC] +
test cl cl +
jz loc_1047E1A  +
jmp loc_1047E46  +
push 64h  +
pop esi  +
push 2Dh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_104793A  +
mov [ebp+var_2DA] 1 +
jmp loc_1047946  +
push 2Dh  +
pop eax  +
xor ebx ebx +
cmp ax [ebp+var_2C4] +
jnz loc_104747E  +
mov ecx [ebp+var_2E0] +
mov [ecx] ax +
mov ebx edi +
jmp loc_104748A  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_10474AB  +
dec [ebp+var_2D0]  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
cmp [ebp+var_2F4] 0 +
jnz loc_10474BB  +
or [ebp+var_2D0] 0FFFFFFFFh +
test dword ptr [ebp+var_2C4] 0FF00h +
jnz loc_1047558  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1047558  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_1047558  +
movsx ax byte ptr [ebp+var_2C4] +
mov ecx [ebp+var_2E0] +
inc [ebp+var_2E4]  +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1046BD9  +
add esp 0Ch +
test eax eax +
jz loc_1047EF1  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test eax 0FF00h +
jz loc_10474CB  +
call ds:localeconv  +
mov eax [eax+30h] +
movzx eax word ptr [eax] +
movsx ecx byte ptr [ebp+var_2C4] +
mov [ebp+var_308] eax +
movzx eax ax +
cmp eax ecx +
jnz loc_1047683  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_1047683  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
mov ecx [ebp+var_2E0] +
movzx eax ax +
mov dword ptr [ebp+var_2C4] eax +
mov ax word ptr [ebp+var_308] +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1046BD9  +
add esp 10h +
test eax eax +
jz loc_1047EF1  +
test dword ptr [ebp+var_2C4] 0FF00h +
jnz loc_1047683  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1047683  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_1047683  +
mov eax [ebp+var_2E0] +
mov cx [ebp+var_2C4] +
inc [ebp+var_2E4]  +
mov [eax+ebx*2] cx +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1046BD9  +
add esp 0Ch +
test eax eax +
jz loc_1047EF1  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test eax 0FF00h +
jz loc_10475F7  +
cmp [ebp+var_2E4] 0 +
jz loc_1047825  +
push 65h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jz loc_10476AC  +
push 45h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1047825  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_1047825  +
mov ecx [ebp+var_2E0] +
push 65h  +
pop eax  +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1046BD9  +
add esp 0Ch +
test eax eax +
jz loc_1047EF1  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
pop ecx  +
movzx eax ax +
push 2Dh  +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
cmp cx ax +
jnz loc_104774A  +
push ecx  +
mov ecx [ebp+var_2E0] +
pop eax  +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
call sub_1046BD9  +
add esp 0Ch +
test eax eax +
jz loc_1047EF1  +
jmp loc_1047756  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1047789  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jnz loc_104776E  +
and [ebp+var_2D0] eax +
jmp loc_1047789  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test dword ptr [ebp+var_2C4] 0FF00h +
jnz loc_1047825  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1047825  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_1047825  +
mov eax [ebp+var_2E0] +
mov cx [ebp+var_2C4] +
inc [ebp+var_2E4]  +
mov [eax+ebx*2] cx +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1046BD9  +
add esp 0Ch +
test eax eax +
jz loc_1047EF1  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test eax 0FF00h +
jz loc_1047799  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push dword ptr [ebp+var_2C4]  +
call sub_1046CB2  +
cmp [ebp+var_2E4] 0 +
pop ecx  +
pop ecx  +
jz loc_1047EF1  +
cmp [ebp+var_2D3] 0 +
jnz loc_1047E46  +
mov edi [ebp+var_300] +
mov esi [ebp+var_2E0] +
inc [ebp+var_2F8]  +
xor eax eax +
lea edi [edi+edi+2] +
push edi  +
mov [esi+ebx*2] ax +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1047EF1  +
push edi  +
push esi  +
push ebx  +
call ds:wcstombs  +
push [ebp+var_308]  +
movsx eax [ebp+var_2D1] +
push ebx  +
push [ebp+var_304]  +
dec eax  +
push eax  +
call sub_10495DD  +
push ebx  +
call ds:__imp_free  +
add esp 20h +
jmp loc_1047E46  +
cmp [ebp+var_2F4] 0 +
push 10h  +
pop eax  +
jnz loc_1047A4B  +
inc [ebp+var_2D0]  +
jmp loc_1047A4B  +
mov eax esi +
sub eax 70h +
jz loc_1047AE8  +
sub eax 3 +
jz loc_1047A3F  +
dec eax  +
dec eax  +
jz loc_1047AEF  +
sub eax 3 +
jz loc_1047447  +
sub eax 3 +
jz loc_1047933  +
mov ax [ebp+var_2C4] +
mov edx [ebp+var_2E8] +
cmp [edx] ax +
jnz loc_1047ECA  +
dec [ebp+var_2D9]  +
test cl cl +
jnz loc_1047E46  +
mov eax [ebp+var_318] +
mov [ebp+var_314] eax +
jmp loc_1047E46  +
push 40h  +
jmp loc_1047A41  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_104797B  +
dec [ebp+var_2D0]  +
jnz loc_1047960  +
cmp [ebp+var_2F4] 0 +
jz loc_1047960  +
mov [ebp+var_2C5] 1 +
jmp loc_104797B  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
push 30h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1047B45  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
pop ecx  +
movzx eax ax +
push 78h  +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
cmp cx ax +
jz loc_10479FE  +
push 58h  +
pop ecx  +
cmp cx ax +
jz loc_10479FE  +
mov [ebp+var_2E4] edi +
cmp esi 78h +
jz loc_10479DC  +
cmp [ebp+var_2F4] 0 +
jz loc_10479D8  +
dec [ebp+var_2D0]  +
jnz loc_10479D8  +
inc [ebp+var_2C5]  +
push 6Fh  +
jmp loc_1047A39  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push eax  +
call sub_1046CB2  +
pop ecx  +
mov dword ptr [ebp+var_2C4] 30h +
jmp loc_1047B44  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
cmp [ebp+var_2F4] 0 +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
jz loc_1047A37  +
sub [ebp+var_2D0] 2 +
cmp [ebp+var_2D0] edi +
jge loc_1047A37  +
inc [ebp+var_2C5]  +
push 78h  +
pop esi  +
jmp loc_1047B45  +
push 20h  +
cmp [ebp+var_2F4] 0 +
pop eax  +
jz loc_1047A4D  +
or eax edi +
cmp [ebp+var_2D2] 0 +
jle loc_1047A59  +
or eax 2 +
test cl cl +
jz loc_1047A60  +
or eax 4 +
cmp esi 7Bh +
jnz loc_1047AA5  +
lea ecx [ebp+var_2F8] +
push ecx  +
push [ebp+var_308]  +
lea ecx [ebp+var_304] +
push [ebp+var_2D8]  +
push [ebp+var_2D0]  +
push ecx  +
lea ecx [ebp+var_2CC] +
push ecx  +
lea ecx [ebp+var_2C4] +
push ecx  +
lea ecx [ebp+var_2E8] +
push ecx  +
push eax  +
call sub_1046EF1  +
add esp 24h +
jmp loc_1047ADB  +
push [ebp+var_308]  +
lea ecx [ebp+var_2C4] +
push [ebp+var_2D0]  +
lea edx [ebp+var_2F8] +
push ecx  +
mov ecx [ebp+var_2D8] +
push 0  +
push eax  +
lea ebx [ebp+var_304] +
lea edi [ebp+var_2CC] +
call sub_1046D07  +
add esp 14h +
test eax eax +
jnz loc_1047EF1  +
jmp loc_1047E46  +
mov [ebp+var_2D1] 1 +
push 2Dh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1047B04  +
mov [ebp+var_2DA] 1 +
jmp loc_1047B10  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1047B45  +
dec [ebp+var_2D0]  +
jnz loc_1047B2A  +
cmp [ebp+var_2F4] 0 +
jz loc_1047B2A  +
mov [ebp+var_2C5] 1 +
jmp loc_1047B45  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
mov dword ptr [ebp+var_2C4] eax +
pop ecx  +
cmp [ebp+var_30C] 0 +
jz loc_1047CDD  +
cmp [ebp+var_2C5] 0 +
jnz loc_1047CAC  +
mov ebx 0FF00h +
cmp esi 78h +
jz loc_1047BEE  +
cmp esi 70h +
jz loc_1047BEE  +
test dword ptr [ebp+var_2C4] ebx +
jnz loc_1047C93  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1047C93  +
cmp esi 6Fh +
jnz loc_1047BCB  +
push 38h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jbe loc_1047C93  +
mov eax [ebp+var_2F0] +
mov ecx [ebp+var_2EC] +
shld ecx eax +
shl eax 3 +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] ecx +
jmp loc_1047C45  +
push 0  +
push 0Ah  +
push [ebp+var_2EC]  +
push [ebp+var_2F0]  +
call __allmul  +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] edx +
jmp loc_1047C45  +
test dword ptr [ebp+var_2C4] ebx +
jnz loc_1047C93  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isxdigit  +
pop ecx  +
test eax eax +
jz loc_1047C93  +
mov eax [ebp+var_2F0] +
mov ecx [ebp+var_2EC] +
push dword ptr [ebp+var_2C4]  +
shld ecx eax +
shl eax 4 +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] ecx +
call sub_1046C76  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
movzx eax [ebp+var_2C4] +
inc [ebp+var_2E4]  +
sub eax 30h +
cdq   +
add [ebp+var_2F0] eax +
adc [ebp+var_2EC] edx +
cmp [ebp+var_2F4] 0 +
jz loc_1047C73  +
dec [ebp+var_2D0]  +
jz loc_1047CAC  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
jmp loc_1047B64  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push dword ptr [ebp+var_2C4]  +
call sub_1046CB2  +
pop ecx  +
pop ecx  +
cmp [ebp+var_2DA] 0 +
jz loc_1047DE6  +
mov eax [ebp+var_2F0] +
mov ecx [ebp+var_2EC] +
neg eax  +
adc ecx 0 +
neg ecx  +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] ecx +
jmp loc_1047DE6  +
cmp [ebp+var_2C5] 0 +
mov ebx [ebp+var_310] +
jnz loc_1047DD5  +
mov edi 0FF00h +
cmp esi 78h +
jz loc_1047D41  +
cmp esi 70h +
jz loc_1047D41  +
test dword ptr [ebp+var_2C4] edi +
jnz loc_1047DBC  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1047DBC  +
cmp esi 6Fh +
jnz loc_1047D3C  +
push 38h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jbe loc_1047DBC  +
shl ebx 3 +
jmp loc_1047D74  +
imul ebx ebx +
jmp loc_1047D74  +
test dword ptr [ebp+var_2C4] edi +
jnz loc_1047DBC  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isxdigit  +
pop ecx  +
test eax eax +
jz loc_1047DBC  +
push dword ptr [ebp+var_2C4]  +
shl ebx 4 +
call sub_1046C76  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
movzx eax [ebp+var_2C4] +
inc [ebp+var_2E4]  +
cmp [ebp+var_2F4] 0 +
lea ebx [ebx+eax-30h] +
mov [ebp+var_310] ebx +
jz loc_1047D9C  +
dec [ebp+var_2D0]  +
jz loc_1047DD5  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
jmp loc_1047CF5  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push dword ptr [ebp+var_2C4]  +
call sub_1046CB2  +
pop ecx  +
pop ecx  +
cmp [ebp+var_2DA] 0 +
jz loc_1047DE6  +
neg ebx  +
mov [ebp+var_310] ebx +
cmp esi 46h +
jnz loc_1047DF2  +
and [ebp+var_2E4] 0 +
cmp [ebp+var_2E4] 0 +
jz loc_1047EF1  +
cmp [ebp+var_2D3] 0 +
jnz loc_1047E46  +
inc [ebp+var_2F8]  +
mov ebx [ebp+var_304] +
mov eax [ebp+var_310] +
cmp [ebp+var_30C] 0 +
jz loc_1047E36  +
mov eax [ebp+var_2F0] +
mov [ebx] eax +
mov eax [ebp+var_2EC] +
mov [ebx+4] eax +
jmp loc_1047E46  +
cmp [ebp+var_2D1] 0 +
jz loc_1047E43  +
mov [ebx] eax +
jmp loc_1047E46  +
mov [ebx] ax +
add [ebp+var_2E8] 2 +
inc [ebp+var_2D9]  +
mov esi [ebp+var_2E8] +
xor edi edi +
jmp loc_1047E82  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_1049669  +
pop ecx  +
mov cx [esi] +
movzx eax ax +
inc esi  +
inc esi  +
mov dword ptr [ebp+var_2C4] eax +
cmp cx ax +
jnz loc_1047EE3  +
mov eax 0FFFFh +
cmp ax [ebp+var_2C4] +
jnz loc_1047E9D  +
cmp word ptr [esi] 25h +
jnz loc_1047EF1  +
cmp word ptr [esi+2] 6Eh +
jnz loc_1047EF1  +
movzx eax word ptr [esi] +
cmp ax di +
jnz loc_1047101  +
jmp loc_1047EF1  +
push [ebp+var_2D8]  +
push dword ptr [ebp+var_2C4]  +
jmp loc_1047EEA  +
mov byte ptr [ebx] 0 +
call ds:__imp__errno  +
mov dword ptr [eax] 0Ch +
jmp loc_1047EF1  +
push [ebp+var_2D8]  +
push dword ptr [ebp+var_2C4]  +
call sub_1046CB2  +
mov [ebp+var_31C] edi +
jmp loc_1047EEF  +
push [ebp+var_2D8]  +
push eax  +
call sub_1046CB2  +
pop ecx  +
pop ecx  +
cmp [ebp+var_2FC] 1 +
pop ebx  +
jnz loc_1047F08  +
push [ebp+var_2E0]  +
call ds:__imp_free  +
pop ecx  +
mov eax 0FFFFh +
cmp ax [ebp+var_2C4] +
jnz loc_1047F2A  +
mov eax [ebp+var_2F8] +
test eax eax +
jnz loc_1047F4C  +
cmp [ebp+var_2D9] al +
jnz loc_1047F4C  +
jmp loc_1047F4C  +
cmp [ebp+var_31C] 1 +
jnz loc_1047F46  +
call ds:__imp__errno  +
mov edi [ebp+var_2F8] +
xor esi esi +
jmp loc_10470BF  +
mov eax [ebp+var_2F8] +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 20h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1047F8F  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1047FC4  +
cmp [ebp+arg_8] esi +
jz loc_1047F71  +
mov ecx [ebp+arg_4] +
cmp ecx 3FFFFFFFh +
ja loc_1047F71  +
push [ebp+arg_C]  +
mov [ebp+var_18] eax +
push [ebp+arg_8]  +
mov [ebp+var_20] eax +
lea eax [ecx+ecx] +
mov [ebp+var_1C] eax +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_14] 49h +
call sub_1047031  +
add esp 0Ch +
pop esi  +
leave   +
retn   +
***
mov ebx offset unk_10659F0 +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
movapd xmm0 xmm1 +
mov [ebp+var_1C] 1 +
jmp loc_104803D  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0C0000005h +
jz loc_1048032  +
cmp eax 0C000001Dh +
jz loc_1048032  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
push ebx  +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov [ebp-8] eax +
push ebx  +
pushf   +
pop eax  +
mov ecx eax +
xor eax 200000h +
push eax  +
popf   +
pushf   +
pop edx  +
sub edx ecx +
jz loc_1048097  +
push ecx  +
popf   +
xor eax eax +
cpuid   +
mov [ebp-0Ch] eax +
mov [ebp-18h] ebx +
mov [ebp-14h] edx +
mov [ebp-10h] ecx +
mov eax 1 +
cpuid   +
mov [ebp-4] edx +
mov [ebp-8] eax +
pop ebx  +
test dword ptr [ebp-4] 4000000h +
jz loc_10480BF  +
call _has_osfxsr_set  +
test eax eax +
jz loc_10480BF  +
call ds:GetVersion  +
and eax 0FFh +
cmp eax 6 +
jb loc_10480BF  +
xor eax eax +
inc eax  +
jmp loc_10480C1  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jnz loc_104810A  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
jmp loc_10481E8  +
mov eax [esi+0Ch] +
test al 83h +
jz loc_10481E8  +
test al 40h +
jnz loc_10481E8  +
test al 2 +
jz loc_104812C  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_10481E8  +
or eax 1 +
mov [esi+0Ch] eax +
test eax 10Ch +
jz loc_10480EC  +
push dword ptr [esi+18h]  +
mov eax [esi+8] +
mov edi ds:_fileno +
push eax  +
push esi  +
mov [esi] eax +
call edi  +
pop ecx  +
push eax  +
call ds:_read  +
add esp 0Ch +
mov [esi+4] eax +
cmp eax ebx +
jz loc_10481D8  +
cmp eax 0FFFFFFFFh +
jz loc_10481D8  +
test byte ptr [esi+0Ch] 82h +
jnz loc_10481AD  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1048198  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_1048198  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_104819D  +
mov eax ds:__badioinfo +
mov al [eax+4] +
and al 82h +
cmp al 82h +
jnz loc_10481AD  +
or dword ptr [esi+0Ch] 2000h +
cmp dword ptr [esi+18h] 200h +
jnz loc_10481CB  +
mov eax [esi+0Ch] +
test al 8 +
jz loc_10481CB  +
test eax 400h +
jnz loc_10481CB  +
mov dword ptr [esi+18h] 1000h +
mov ecx [esi] +
dec dword ptr [esi+4]  +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_10481EB  +
neg eax  +
sbb eax eax +
and eax 10h +
add eax 10h +
or [esi+0Ch] eax +
mov [esi+4] ebx +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_1048261  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_1048251  +
inc eax  +
cmp eax 3 +
jl loc_104823E  +
xor eax eax +
jmp loc_10486F6  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_10486F6  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_1065A10 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_1048299  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_104833F  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_10482C7  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_10482D1  +
inc eax  +
cmp eax 3 +
jl loc_10482C2  +
jmp loc_104833F  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_10482EB  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_104832A  +
cmp [ebp+arg_0] edx +
jmp loc_1048328  +
test ecx ecx +
jz loc_104833C  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_104832A  +
cmp esi 1 +
jnb loc_1048331  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_104830D  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_104835F  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_1048366  +
inc ebx  +
mov eax dword_1065A0C +
mov ecx eax +
sub ecx dword_1065A10 +
cmp ebx ecx +
jge loc_1048384  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_1048591  +
cmp ebx eax +
jg loc_104859B  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_10483B2  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_10483CD  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1048413  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1048418  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1048407  +
mov esi dword_1065A10 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_1048447  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_10484E2  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_1048472  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_104847C  +
inc eax  +
cmp eax 3 +
jl loc_104846D  +
jmp loc_10484E2  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_1048496  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_10484B2  +
cmp edi edx +
jnb loc_10484B9  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_10484DF  +
test ecx ecx +
jz loc_10484E2  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_10484D8  +
cmp esi 1 +
jnb loc_10484DB  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_10484C0  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1048502  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_1065A14 +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1048523  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_104853E  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1048584  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1048589  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1048578  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_10486F5  +
cmp ebx dword_1065A08 +
mov ecx dword_1065A14 +
jl loc_104865A  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_10485D6  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_10485F1  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1048637  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_104863C  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_104862B  +
mov eax dword_1065A08 +
mov ecx dword_1065A1C +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_10486F5  +
mov eax dword_1065A1C +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1048682  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_104869D  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_10486E6  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_10486EB  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10486DA  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_1065A14 +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_1065A18 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_104872B  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_1048735  +
cmp ecx 20h +
jnz loc_1048735  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_10487AA  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_104879A  +
inc eax  +
cmp eax 3 +
jl loc_1048787  +
xor eax eax +
jmp loc_1048C3F  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_1048C3F  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_1065A28 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_10487E2  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_1048888  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_1048810  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_104881A  +
inc eax  +
cmp eax 3 +
jl loc_104880B  +
jmp loc_1048888  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_1048834  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_1048873  +
cmp [ebp+arg_0] edx +
jmp loc_1048871  +
test ecx ecx +
jz loc_1048885  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_1048873  +
cmp esi 1 +
jnb loc_104887A  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_1048856  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_10488A8  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_10488AF  +
inc ebx  +
mov eax dword_1065A24 +
mov ecx eax +
sub ecx dword_1065A28 +
cmp ebx ecx +
jge loc_10488CD  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_1048ADA  +
cmp ebx eax +
jg loc_1048AE4  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_10488FB  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1048916  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_104895C  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1048961  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1048950  +
mov esi dword_1065A28 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_1048990  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_1048A2B  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_10489BB  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_10489C5  +
inc eax  +
cmp eax 3 +
jl loc_10489B6  +
jmp loc_1048A2B  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_10489DF  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_10489FB  +
cmp edi edx +
jnb loc_1048A02  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_1048A28  +
test ecx ecx +
jz loc_1048A2B  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_1048A21  +
cmp esi 1 +
jnb loc_1048A24  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_1048A09  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1048A4B  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_1065A2C +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1048A6C  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1048A87  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1048ACD  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1048AD2  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1048AC1  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_1048C3E  +
cmp ebx dword_1065A20 +
mov ecx dword_1065A2C +
jl loc_1048BA3  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1048B1F  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1048B3A  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1048B80  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1048B85  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1048B74  +
mov eax dword_1065A20 +
mov ecx dword_1065A34 +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_1048C3E  +
mov eax dword_1065A34 +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1048BCB  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_1048BE6  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1048C2F  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1048C34  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1048C23  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_1065A2C +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_1065A30 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_1048C74  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_1048C7E  +
cmp ecx 20h +
jnz loc_1048C7E  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_18] 404Eh +
mov [eax] esi +
mov [eax+4] esi +
mov [eax+8] esi +
cmp [ebp+arg_4] esi +
jbe loc_1048DFF  +
mov edx [eax] +
mov ebx [eax+4] +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
mov ecx edx +
shr ecx 1Fh +
lea edi [edx+edx] +
lea edx [ebx+ebx] +
or edx ecx +
mov ecx [eax+8] +
mov esi ebx +
shr esi 1Fh +
add ecx ecx +
or ecx esi +
mov [ebp+var_14] edi +
mov esi edi +
and [ebp+var_14] 0 +
mov ebx edx +
shr ebx 1Fh +
add ecx ecx +
shr edi 1Fh +
or ecx ebx +
mov ebx [ebp+var_10] +
add esi esi +
add edx edx +
or edx edi +
lea edi [esi+ebx] +
mov [eax] esi +
mov [eax+4] edx +
mov [eax+8] ecx +
cmp edi esi +
jb loc_1048D10  +
cmp edi ebx +
jnb loc_1048D17  +
mov [ebp+var_14] 1 +
xor ebx ebx +
mov [eax] edi +
cmp [ebp+var_14] ebx +
jz loc_1048D3A  +
lea esi [edx+1] +
cmp esi edx +
jb loc_1048D2C  +
cmp esi 1 +
jnb loc_1048D2F  +
xor ebx ebx +
inc ebx  +
mov [eax+4] esi +
test ebx ebx +
jz loc_1048D3A  +
inc ecx  +
mov [eax+8] ecx +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
lea ebx [ecx+edx] +
xor esi esi +
cmp ebx ecx +
jb loc_1048D4D  +
cmp ebx edx +
jnb loc_1048D50  +
xor esi esi +
inc esi  +
mov [eax+4] ebx +
test esi esi +
jz loc_1048D5A  +
inc dword ptr [eax+8]  +
mov ecx [ebp+var_8] +
add [eax+8] ecx +
and [ebp+var_14] 0 +
lea ecx [edi+edi] +
mov edx edi +
shr edx 1Fh +
lea edi [ebx+ebx] +
or edi edx +
mov edx [eax+8] +
mov esi ebx +
shr esi 1Fh +
lea ebx [edx+edx] +
mov edx [ebp+arg_0] +
or ebx esi +
mov [eax] ecx +
mov [eax+4] edi +
mov [eax+8] ebx +
movsx edx byte ptr [edx] +
lea esi [ecx+edx] +
mov [ebp+var_10] edx +
cmp esi ecx +
jb loc_1048D9A  +
cmp esi edx +
jnb loc_1048DA1  +
mov [ebp+var_14] 1 +
cmp [ebp+var_14] 0 +
mov [eax] esi +
jz loc_1048DC5  +
lea ecx [edi+1] +
xor edx edx +
cmp ecx edi +
jb loc_1048DB7  +
cmp ecx 1 +
jnb loc_1048DBA  +
xor edx edx +
inc edx  +
mov [eax+4] ecx +
test edx edx +
jz loc_1048DC5  +
inc ebx  +
mov [eax+8] ebx +
dec [ebp+arg_4]  +
inc [ebp+arg_0]  +
cmp [ebp+arg_4] 0 +
ja loc_1048CB9  +
xor esi esi +
jmp loc_1048DFF  +
mov ecx [eax+4] +
mov edx ecx +
shr edx 10h +
mov [eax+8] edx +
mov edx [eax] +
mov edi edx +
shl ecx 10h +
shr edi 10h +
or ecx edi +
shl edx 10h +
add [ebp+var_18] 0FFF0h +
mov [eax+4] ecx +
mov [eax] edx +
cmp [eax+8] esi +
jz loc_1048DD9  +
mov ebx 8000h +
test [eax+8] ebx +
jnz loc_1048E3E  +
mov esi [eax] +
mov edi [eax+4] +
add [ebp+var_18] 0FFFFh +
mov ecx esi +
add esi esi +
shr ecx 1Fh +
mov [eax] esi +
lea esi [edi+edi] +
or esi ecx +
mov ecx [eax+8] +
mov edx edi +
shr edx 1Fh +
add ecx ecx +
or ecx edx +
mov [eax+4] esi +
mov [eax+8] ecx +
test ecx ebx +
jz loc_1048E0E  +
mov cx word ptr [ebp+var_18] +
mov [eax+0Ah] cx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
xor ecx ecx +
push ebx  +
push esi  +
xor esi esi +
mov [ebp+var_78] eax +
mov eax [ebp+arg_4] +
inc esi  +
push edi  +
mov [ebp+var_70] eax +
lea edi [ebp+var_20] +
mov [ebp+var_74] ecx +
mov [ebp+var_68] esi +
mov [ebp+var_4C] ecx +
mov [ebp+var_58] ecx +
mov [ebp+var_5C] ecx +
mov [ebp+var_60] ecx +
mov [ebp+var_64] ecx +
mov [ebp+var_50] ecx +
mov [ebp+var_6C] ecx +
mov [ebp+var_54] edx +
mov al [edx] +
cmp al 20h +
jz loc_1048EB6  +
cmp al 9 +
jz loc_1048EB6  +
cmp al 0Ah +
jz loc_1048EB6  +
cmp al 0Dh +
jnz loc_1048EB9  +
inc edx  +
jmp loc_1048EA4  +
mov bl 30h +
mov al [edx] +
inc edx  +
cmp ecx 0Bh +
ja loc_10490B4  +
jmp ds:off_10494BA[ecx*4]  +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_1048EDE  +
push 3  +
pop ecx  +
dec edx  +
jmp loc_1048EBB  +
cmp al [ebp+arg_1C] +
jnz loc_1048EE8  +
push 5  +
pop ecx  +
jmp loc_1048EBB  +
movsx eax al +
sub eax 2Bh +
jz loc_1048F0D  +
dec eax  +
dec eax  +
jz loc_1048F01  +
sub eax 3 +
jnz loc_1049052  +
mov ecx esi +
jmp loc_1048EBB  +
push 2  +
pop ecx  +
mov [ebp+var_74] 8000h +
jmp loc_1048EBB  +
and [ebp+var_74] 0 +
push 2  +
pop ecx  +
jmp loc_1048EBB  +
mov cl al +
sub cl 31h +
mov [ebp+var_58] esi +
cmp cl 8 +
jbe loc_1048ED8  +
cmp al [ebp+arg_1C] +
jnz loc_1048F2C  +
push 4  +
jmp loc_1048EE5  +
cmp al 2Bh +
jz loc_1048F58  +
cmp al 2Dh +
jz loc_1048F58  +
cmp al bl +
jz loc_1048EFD  +
cmp al 43h +
jle loc_1049052  +
cmp al 45h +
jle loc_1048F54  +
cmp al 63h +
jle loc_1049052  +
cmp al 65h +
jg loc_1049052  +
push 6  +
jmp loc_1048EE5  +
dec edx  +
push 0Bh  +
jmp loc_1048EE5  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_1048ED8  +
cmp al [ebp+arg_1C] +
jz loc_1048EE3  +
cmp al bl +
jz loc_1048EFD  +
mov edx [ebp+var_54] +
jmp loc_104907D  +
mov [ebp+var_58] esi +
jmp loc_1048F9F  +
cmp al 39h +
jg loc_1048FA3  +
cmp [ebp+var_4C] 19h +
jnb loc_1048F99  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
jmp loc_1048F9C  +
inc [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1048F85  +
cmp al [ebp+arg_1C] +
jz loc_1048F28  +
cmp al 2Bh +
jz loc_1048F58  +
cmp al 2Dh +
jz loc_1048F58  +
jmp loc_1048F38  +
cmp [ebp+var_4C] 0 +
mov [ebp+var_58] esi +
mov [ebp+var_5C] esi +
jnz loc_1048FE4  +
jmp loc_1048FC6  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_1048FC0  +
jmp loc_1048FE4  +
cmp al 39h +
jg loc_1048FA8  +
cmp [ebp+var_4C] 19h +
jnb loc_1048FE1  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1048FCC  +
jmp loc_1048FA8  +
sub al bl +
mov [ebp+var_5C] esi +
cmp al 9 +
ja loc_1048F78  +
push 4  +
jmp loc_1048EDA  +
lea ecx [edx-2] +
mov [ebp+var_54] ecx +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_1049011  +
push 9  +
jmp loc_1048EDA  +
movsx eax al +
sub eax 2Bh +
jz loc_1049039  +
dec eax  +
dec eax  +
jz loc_104902D  +
sub eax 3 +
jnz loc_1048F78  +
push 8  +
jmp loc_1048EE5  +
or [ebp+var_68] 0FFFFFFFFh +
push 7  +
pop ecx  +
jmp loc_1048EBB  +
push 7  +
jmp loc_1048EE5  +
mov [ebp+var_60] esi +
jmp loc_1049048  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_1049045  +
sub al 31h +
cmp al 8 +
jbe loc_104900A  +
dec edx  +
jmp loc_104907D  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_104900A  +
cmp al bl +
jmp loc_1049020  +
cmp [ebp+arg_18] 0 +
jz loc_10490B0  +
movsx eax al +
sub eax 2Bh +
lea ecx [edx-1] +
mov [ebp+var_54] ecx +
jz loc_1049039  +
dec eax  +
dec eax  +
jz loc_104902D  +
mov edx ecx +
cmp [ebp+var_58] 0 +
mov eax [ebp+var_70] +
mov [eax] edx +
jz loc_1049465  +
push 18h  +
pop eax  +
cmp [ebp+var_4C] eax +
jbe loc_10490A4  +
cmp [ebp+var_9] 5 +
jl loc_104909D  +
inc [ebp+var_9]  +
dec edi  +
inc [ebp+var_50]  +
mov [ebp+var_4C] eax +
cmp [ebp+var_4C] 0 +
jbe loc_104948C  +
jmp loc_1049109  +
push 0Ah  +
pop ecx  +
dec edx  +
cmp ecx 0Ah +
jnz loc_1048EBB  +
jmp loc_104907D  +
mov [ebp+var_60] esi +
xor ecx ecx +
jmp loc_10490DF  +
cmp al 39h +
jg loc_10490EA  +
imul ecx ecx +
movsx esi al +
lea ecx [ecx+esi-30h] +
cmp ecx 1450h +
jg loc_10490E5  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_10490C6  +
jmp loc_10490EA  +
mov ecx 1451h +
mov [ebp+var_64] ecx +
jmp loc_10490FA  +
cmp al 39h +
jg loc_1049052  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_10490EF  +
jmp loc_1049052  +
dec [ebp+var_4C]  +
inc [ebp+var_50]  +
dec edi  +
cmp byte ptr [edi] 0 +
jz loc_1049103  +
lea eax [ebp+var_3C] +
push eax  +
push [ebp+var_4C]  +
lea eax [ebp+var_20] +
push eax  +
call sub_1048C87  +
mov eax [ebp+var_64] +
xor edx edx +
add esp 0Ch +
cmp [ebp+var_68] edx +
jge loc_104912E  +
neg eax  +
add eax [ebp+var_50] +
cmp [ebp+var_60] edx +
jnz loc_1049139  +
add eax [ebp+arg_10] +
cmp [ebp+var_5C] edx +
jnz loc_1049141  +
sub eax [ebp+arg_14] +
cmp eax 1450h +
jg loc_104946E  +
cmp eax 0FFFFEBB0h +
jl loc_1049485  +
mov ecx offset unk_1065A38 +
sub ecx 60h +
mov [ebp+var_54] eax +
cmp eax edx +
jz loc_1049453  +
jge loc_1049179  +
neg eax  +
mov ecx offset unk_1065B98 +
mov [ebp+var_54] eax +
sub ecx 60h +
cmp [ebp+arg_C] edx +
jnz loc_1049184  +
xor eax eax +
mov word ptr [ebp+var_3C] ax +
cmp [ebp+var_54] edx +
jz loc_1049453  +
jmp loc_1049194  +
mov ecx [ebp+var_7C] +
xor edx edx +
mov eax [ebp+var_54] +
sar [ebp+var_54] 3 +
add ecx 54h +
and eax 7 +
mov [ebp+var_7C] ecx +
cmp eax edx +
jz loc_1049449  +
imul eax eax +
add eax ecx +
mov ebx eax +
mov eax 8000h +
cmp [ebx] ax +
jb loc_10491CB  +
mov esi ebx +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
dec [ebp+var_48+2]  +
lea ebx [ebp+var_48] +
movzx ecx word ptr [ebx+0Ah] +
xor eax eax +
mov [ebp+var_50] eax +
mov [ebp+var_2C] eax +
mov [ebp+var_28] eax +
mov [ebp+var_24] eax +
mov eax [ebp+var_32] +
mov esi ecx +
mov edx 7FFFh +
xor esi eax +
and eax edx +
and ecx edx +
and esi 8000h +
mov edi 7FFFh +
lea edx [ecx+eax] +
mov [ebp+var_70] esi +
movzx edx dx +
cmp ax di +
jnb loc_104942B  +
cmp cx di +
jnb loc_104942B  +
mov edi 0BFFDh +
cmp dx di +
ja loc_104942B  +
mov esi 3FBFh +
cmp dx si +
ja loc_1049238  +
xor eax eax +
mov [ebp+var_38] eax +
mov [ebp+var_3C] eax +
jmp loc_1049446  +
xor esi esi +
cmp ax si +
jnz loc_104925E  +
inc edx  +
test dword ptr [ebp-34h] 7FFFFFFFh +
jnz loc_104925E  +
cmp [ebp+var_38] esi +
jnz loc_104925E  +
cmp [ebp+var_3C] esi +
jnz loc_104925E  +
xor eax eax +
mov word ptr [ebp+var_32] ax +
jmp loc_1049449  +
cmp cx si +
jnz loc_1049284  +
inc edx  +
test dword ptr [ebx+8] 7FFFFFFFh +
jnz loc_1049284  +
cmp [ebx+4] esi +
jnz loc_1049284  +
cmp [ebx] esi +
jnz loc_1049284  +
mov [ebp-34h] esi +
mov [ebp+var_38] esi +
mov [ebp+var_3C] esi +
jmp loc_1049449  +
mov [ebp+var_68] esi +
lea edi [ebp+var_28] +
mov [ebp+var_58] 5 +
mov eax [ebp+var_68] +
mov ecx [ebp+var_58] +
add eax eax +
mov [ebp+var_64] ecx +
test ecx ecx +
jle loc_10492F2  +
lea eax [ebp+eax+var_3C] +
mov [ebp+var_5C] eax +
lea eax [ebx+8] +
mov [ebp+var_60] eax +
mov eax [ebp+var_5C] +
mov ecx [ebp+var_60] +
movzx ecx word ptr [ecx] +
movzx eax word ptr [eax] +
and [ebp+var_4C] 0 +
imul eax ecx +
mov ecx [edi-4] +
lea esi [ecx+eax] +
cmp esi ecx +
jb loc_10492CE  +
cmp esi eax +
jnb loc_10492D5  +
mov [ebp+var_4C] 1 +
cmp [ebp+var_4C] 0 +
mov [edi-4] esi +
jz loc_10492E1  +
inc word ptr [edi]  +
add [ebp+var_5C] 2 +
sub [ebp+var_60] 2 +
dec [ebp+var_64]  +
cmp [ebp+var_64] 0 +
jg loc_10492AD  +
inc edi  +
inc edi  +
inc [ebp+var_68]  +
dec [ebp+var_58]  +
cmp [ebp+var_58] 0 +
jg loc_1049291  +
add edx 0C002h +
test dx dx +
jle loc_1049342  +
mov edi [ebp+var_24] +
test edi edi +
js loc_104933D  +
mov esi [ebp+var_28] +
mov eax [ebp+var_2C] +
shl [ebp+var_2C] 1 +
shr eax 1Fh +
mov ecx esi +
add esi esi +
or esi eax +
shr ecx 1Fh +
lea eax [edi+edi] +
or eax ecx +
add edx 0FFFFh +
mov [ebp+var_28] esi +
mov [ebp+var_24] eax +
test dx dx +
jg loc_104930B  +
test dx dx +
jg loc_104938F  +
add edx 0FFFFh +
test dx dx +
jge loc_104938F  +
mov eax edx +
neg eax  +
movzx esi ax +
add edx esi +
test byte ptr [ebp+var_2C] 1 +
jz loc_104935F  +
inc [ebp+var_50]  +
mov eax [ebp+var_24] +
mov edi [ebp+var_28] +
mov ecx [ebp+var_28] +
shr [ebp+var_24] 1 +
shl eax 1Fh +
shr edi 1 +
or edi eax +
mov eax [ebp+var_2C] +
shl ecx 1Fh +
shr eax 1 +
or eax ecx +
dec esi  +
mov [ebp+var_28] edi +
mov [ebp+var_2C] eax +
jnz loc_1049356  +
cmp [ebp+var_50] esi +
jz loc_104938F  +
or word ptr [ebp+var_2C] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_2C] cx +
ja loc_10493AD  +
mov ecx [ebp+var_2C] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_10493E1  +
cmp [ebp+var_2C+2] 0FFFFFFFFh +
jnz loc_10493DE  +
and [ebp+var_2C+2] 0 +
cmp [ebp+var_28+2] 0FFFFFFFFh +
jnz loc_10493D9  +
and [ebp+var_28+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_24+2] cx +
jnz loc_10493D3  +
mov word ptr [ebp+var_24+2] ax +
inc edx  +
jmp loc_10493E1  +
inc word ptr [ebp+var_24+2]  +
jmp loc_10493E1  +
inc [ebp+var_28+2]  +
jmp loc_10493E1  +
inc [ebp+var_2C+2]  +
mov eax 7FFFh +
cmp dx ax +
jb loc_104940E  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_70] ax +
mov [ebp+var_38] eax +
setz cl  +
mov [ebp+var_3C] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp-34h] ecx +
jmp loc_1049449  +
mov ax word ptr [ebp+var_2C+2] +
or edx [ebp+var_70] +
mov word ptr [ebp+var_3C] ax +
mov eax [ebp+var_28] +
mov [ebp+var_3C+2] eax +
mov eax [ebp+var_24] +
mov [ebp+var_38+2] eax +
mov word ptr [ebp+var_32] dx +
jmp loc_1049449  +
xor eax eax +
test si si +
setz al  +
and [ebp+var_38] 0 +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
and [ebp+var_3C] 0 +
mov [ebp-34h] eax +
cmp [ebp+var_54] 0 +
jnz loc_104918F  +
mov eax [ebp-34h] +
movzx ecx word ptr [ebp+var_3C] +
mov esi [ebp+var_3C+2] +
mov edx [ebp+var_38+2] +
shr eax 10h +
jmp loc_1049494  +
mov [ebp+var_6C] 4 +
jmp loc_104948C  +
xor esi esi +
mov eax 7FFFh +
mov edx 80000000h +
xor ecx ecx +
mov [ebp+var_6C] 2 +
jmp loc_1049494  +
mov [ebp+var_6C] 1 +
xor ecx ecx +
xor eax eax +
xor edx edx +
xor esi esi +
mov edi [ebp+var_78] +
or eax [ebp+var_74] +
mov [edi] cx +
mov ecx [ebp+var_4] +
mov [edi+2] esi +
mov [edi+0Ah] ax +
mov eax [ebp+var_6C] +
mov [edi+6] edx +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_1048E5A  +
mov ebx eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_10481F5  +
add esp 28h +
test bl 3 +
jnz loc_1049547  +
cmp eax 1 +
jnz loc_104953E  +
push 3  +
pop eax  +
jmp loc_1049553  +
cmp eax 2 +
jnz loc_1049551  +
push 4  +
jmp loc_104953B  +
test bl 1 +
jnz loc_1049543  +
test bl 2 +
jnz loc_1049539  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_1048E5A  +
mov ebx eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_104873E  +
add esp 28h +
test bl 3 +
jnz loc_10495BE  +
cmp eax 1 +
jnz loc_10495B5  +
push 3  +
pop eax  +
jmp loc_10495CA  +
cmp eax 2 +
jnz loc_10495C8  +
push 4  +
jmp loc_10495B2  +
test bl 1 +
jnz loc_10495BA  +
test bl 2 +
jnz loc_10495B0  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jz loc_1049609  +
lea eax [ebp+var_8] +
push eax  +
call sub_10494EF  +
mov ecx [ebp+var_8] +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
mov [eax+4] ecx +
jmp loc_104961A  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1049566  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
add esp 0Ch +
leave   +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1049649  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi dword ptr [ebp+arg_0] +
test byte ptr [esi+0Ch] 40h +
push edi  +
jnz loc_104975E  +
mov edi ds:_fileno +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10496B6  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_10496B6  +
push ebx  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
pop ebx  +
jmp loc_10496BB  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 80h +
jz loc_104975E  +
xor edi edi +
inc edi  +
dec dword ptr [esi+4]  +
js loc_10496D7  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_10496DE  +
push esi  +
call sub_10480DB  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10496ED  +
mov eax 0FFFFh +
jmp loc_1049777  +
mov [ebp+var_4] al +
movzx eax al +
push eax  +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_1049733  +
dec dword ptr [esi+4]  +
js loc_104970E  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_1049715  +
push esi  +
call sub_10480DB  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_104972D  +
movsx eax [ebp+var_4] +
push esi  +
push eax  +
call ungetc  +
pop ecx  +
mov eax 0FFFFh +
jmp loc_1049776  +
push 2  +
mov [ebp-3] al +
pop edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call ds:mbtowc  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1049758  +
call ds:__imp__errno  +
mov dword ptr [eax] 2Ah +
jmp loc_10496E3  +
mov ax [ebp+arg_0] +
jmp loc_1049777  +
add dword ptr [esi+4] 0FFFFFFFEh +
js loc_1049770  +
mov ecx [esi] +
movzx eax word ptr [ecx] +
add ecx 2 +
mov [esi] ecx +
jmp loc_1049777  +
push esi  +
call sub_10498C9  +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx dword ptr [ebp+arg_0] +
push ebx  +
mov ebx 0FFFFh +
push esi  +
mov esi [ebp+arg_4] +
mov eax ebx +
push edi  +
cmp cx ax +
jz loc_1049824  +
mov eax [esi+0Ch] +
test al 1 +
jnz loc_10497B6  +
test al al +
jns loc_1049824  +
test al 2 +
jnz loc_1049824  +
test al 40h +
jnz loc_1049877  +
mov edi ds:_fileno +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10497F9  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_10497F9  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
mov ebx 0FFFFh +
jmp loc_10497FE  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 80h +
jz loc_1049874  +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+var_C] +
push eax  +
call ds:wctomb  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1049835  +
call ds:__imp__errno  +
mov dword ptr [eax] 2Ah +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
mov ecx [esi+8] +
add ecx eax +
cmp [esi] ecx +
jnb loc_104984B  +
cmp dword ptr [esi+4] 0 +
jnz loc_1049824  +
cmp eax [esi+18h] +
jg loc_1049824  +
mov [esi] ecx +
lea ecx [eax-1] +
test ecx ecx +
jl loc_104985F  +
dec dword ptr [esi]  +
dec ecx  +
mov dl [ebp+ecx-0Bh] +
mov edi [esi] +
mov [edi] dl +
jns loc_1049852  +
add [esi+4] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 1 +
mov [esi+0Ch] eax +
mov ax [ebp+arg_0] +
jmp loc_1049826  +
mov ecx dword ptr [ebp+arg_0] +
mov eax [esi+8] +
add eax 2 +
cmp [esi] eax +
jnb loc_104988F  +
cmp dword ptr [esi+4] 0 +
jnz loc_1049824  +
cmp dword ptr [esi+18h] 2 +
jb loc_1049824  +
mov [esi] eax +
add dword ptr [esi] 0FFFFFFFEh +
test byte ptr [esi+0Ch] 40h +
mov eax [esi] +
jz loc_10498A9  +
cmp [eax] cx +
jz loc_10498AC  +
add eax 2 +
mov [esi] eax +
jmp loc_1049824  +
mov [eax] cx +
mov eax [esi+0Ch] +
add dword ptr [esi+4] 2 +
and eax 0FFFFFFEFh +
or eax 1 +
mov [esi+0Ch] eax +
mov ax cx +
jmp loc_1049826  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jnz loc_10498F8  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1045E28  +
add esp 14h +
jmp loc_10499E2  +
mov eax [esi+0Ch] +
test al 83h +
jz loc_10499E2  +
test al 40h +
jnz loc_10499E2  +
test al 2 +
jz loc_104991A  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_10499E2  +
or eax 1 +
mov [esi+0Ch] eax +
test eax 10Ch +
jz loc_10498DA  +
push dword ptr [esi+18h]  +
mov eax [esi+8] +
mov edi ds:_fileno +
push eax  +
push esi  +
mov [esi] eax +
call edi  +
pop ecx  +
push eax  +
call ds:_read  +
add esp 0Ch +
mov [esi+4] eax +
cmp eax ebx +
jz loc_10499D2  +
cmp eax 1 +
jz loc_10499D2  +
cmp eax 0FFFFFFFFh +
jz loc_10499D2  +
test byte ptr [esi+0Ch] 82h +
jnz loc_10499A4  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_104998F  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_104998F  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_1049994  +
mov eax ds:__badioinfo +
mov al [eax+4] +
and al 82h +
cmp al 82h +
jnz loc_10499A4  +
or dword ptr [esi+0Ch] 2000h +
cmp dword ptr [esi+18h] 200h +
jnz loc_10499C2  +
mov eax [esi+0Ch] +
test al 8 +
jz loc_10499C2  +
test eax 400h +
jnz loc_10499C2  +
mov dword ptr [esi+18h] 1000h +
mov ecx [esi] +
add dword ptr [esi+4] 0FFFFFFFEh +
movzx eax word ptr [ecx] +
add ecx 2 +
mov [esi] ecx +
jmp loc_10499E7  +
neg eax  +
sbb eax eax +
and eax 10h +
add eax 10h +
or [esi+0Ch] eax +
mov [esi+4] ebx +
mov eax 0FFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 324h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_174] +
mov esi 100h +
push eax  +
mov [ebp+nSize] esi +
call sub_104CBB0  +
push esi  +
lea eax [ebp+Buffer] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetUserNameA  +
test eax eax +
jz loc_1049B35  +
push [ebp+nSize]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_174] +
push eax  +
call sub_104CC70  +
lea eax [ebp+Data] +
push eax  +
call sub_105EFB2  +
test eax eax +
jnz loc_1049A9E  +
push 14h  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+var_174] +
push eax  +
call sub_104CC70  +
push 25h  +
push offset aDeed047eA3cb11  +
lea eax [ebp+var_174] +
push eax  +
call sub_104CC70  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_174] +
push eax  +
call sub_104CD80  +
lea eax [ebp+var_174] +
push eax  +
call sub_104CBB0  +
push [ebp+arg_8]  +
lea eax [ebp+var_174] +
push ebx  +
push eax  +
call sub_104CC70  +
push 14h  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_174] +
push eax  +
call sub_104CC70  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_174] +
push eax  +
call sub_104CD80  +
dec esi  +
jnz loc_1049AC1  +
lea eax [ebp+var_18] +
push eax  +
push 10h  +
lea eax [ebp+var_30C] +
push eax  +
call sub_104CAAD  +
push 40h  +
pop ecx  +
lea esi [ebp+var_30C] +
movs   +
xor eax eax +
movs   +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_1049A79  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1049A79  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_1049A79  +
xor eax eax +
jmp loc_1049B24  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push eax  +
lea eax [ebp+var_108] +
push eax  +
call sub_10499FD  +
test eax eax +
jz loc_1049BBA  +
push esi  +
push [ebp+arg_4]  +
lea eax [ebp+var_108] +
push eax  +
call sub_104C960  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
push 0  +
call sub_104ED0F  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_1049C3F  +
cmp word ptr [edx] 0 +
jnz loc_1049C23  +
mov [ebp+arg_14] 0Eh +
jmp loc_1049C46  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1049C28  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_1049C46  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_1049C5C  +
cmp word ptr [edx] 0 +
jnz loc_1049C5E  +
mov edx offset aNull +
jmp loc_1049C5E  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_1049C88  +
cmp word ptr [edi] 0 +
jnz loc_1049C6F  +
push 0Eh  +
jmp loc_1049C8A  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1049C74  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1049C8B  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_1049CA0  +
cmp word ptr [edi] 0 +
jnz loc_1049C9C  +
mov eax offset aNull +
jmp loc_1049CA2  +
mov eax edi +
jmp loc_1049CA2  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_18] +
push esi  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jnz loc_1049D18  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1049D86  +
test byte ptr [eax+1Ch] 4 +
jz loc_1049D86  +
push offset aPallowedsettin  +
push offset dword_100C8D8  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_1049D7A  +
xor edi edi +
lea eax [ebp+var_4] +
inc edi  +
push eax  +
mov dword ptr [esi] 7 +
mov [ebp+arg_0] edi +
call sub_104B84E  +
test eax eax +
jge loc_1049D5F  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1049D7A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1049D7A  +
push eax  +
push offset aCaaprofileLoad  +
push offset dword_100C8D8  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1049D7A  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1049D86  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov [esi] eax +
test al 7 +
jnz loc_1049D77  +
and [ebp+arg_0] 0 +
jmp loc_1049D7A  +
mov [ebp+arg_0] edi +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1049D86  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_104BBAD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+hKey] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push dword ptr [ebx]  +
mov edi [ebp+lpFilename] +
push edi  +
push 1000000h  +
mov [ebp+cbData] 208h +
call ds:GetModuleFileNameW  +
mov [ebp+var_218] eax +
test eax eax +
jnz loc_1049E3D  +
call ds:GetLastError  +
test eax eax +
jle loc_1049DFF  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1049F7B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1049F7B  +
push edi  +
push offset aGetmodulefilen  +
push offset aPathlen  +
push offset dword_100C8D8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1049C05  +
jmp loc_1049F7B  +
push 5Ch  +
push edi  +
call wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1049F76  +
cmp word ptr [eax] 5Ch +
jnz loc_1049F76  +
cmp eax edi +
jbe loc_1049F76  +
inc eax  +
inc eax  +
mov esi eax +
mov [ebp+var_21C] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset aSoftwareMicr_0  +
sub esi edi +
push 80000002h  +
sar esi 1 +
call ds:RegOpenKeyExW  +
mov edi eax +
test edi edi +
jz loc_1049EB4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1049F07  +
test byte ptr [eax+1Ch] 4 +
jz loc_1049F07  +
push edi  +
push offset aRegopenkeyexFo  +
push offset dword_100C8D8  +
push 0Ch  +
jmp loc_1049EFC  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 0  +
push 0  +
push offset aGateway  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov edi eax +
test edi edi +
jz loc_1049F19  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1049F07  +
test byte ptr [eax+1Ch] 4 +
jz loc_1049F07  +
push edi  +
push offset aRegqueryvalu_0  +
push offset dword_100C8D8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
test edi edi +
jle loc_1049F7B  +
and edi 0FFFFh +
or edi 80070000h +
jmp loc_1049F7B  +
lea eax [ebp+Data] +
push eax  +
mov eax [ebx] +
sub eax [ebp+var_218] +
push eax  +
push [ebp+var_21C]  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_1049F66  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1049F7B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1049F7B  +
push edi  +
push offset aStringcchcopy  +
push offset dword_100C8D8  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1049F7B  +
mov eax [ebp+cbData] +
shr eax 1 +
lea eax [eax+esi+1] +
mov [ebx] eax +
jmp loc_1049F7B  +
mov edi 8007007Ah +
cmp [ebp+hKey] 0 +
jz loc_1049F90  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
mov [ebp+var_214] esi +
mov [ebp+hLibModule] esi +
mov [ebp+var_21C] 105h +
cmp dword_10665A0 esi +
jnz loc_104A1AE  +
push ebx  +
push edi  +
push esi  +
call time  +
push eax  +
call srand  +
pop ecx  +
pop ecx  +
lea eax [ebp+Filename] +
push eax  +
lea eax [ebp+var_21C] +
push eax  +
call sub_1049DA4  +
mov ebx ds:GetLastError +
mov edi eax +
cmp edi esi +
jge loc_104A046  +
mov eax lpReserved +
mov esi offset lpReserved +
cmp eax esi +
jz loc_104A038  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A038  +
push edi  +
push offset dword_100C8D8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
movzx eax di +
mov [ebp+var_214] eax +
jmp loc_104A14D  +
push 8  +
push esi  +
mov esi ds:LoadLibraryExW +
lea eax [ebp+Filename] +
push eax  +
call esi  +
xor edi edi +
mov [ebp+hLibModule] eax +
cmp eax edi +
jnz loc_104A0C5  +
push 8  +
push edi  +
lea eax [ebp+Filename] +
push eax  +
call esi  +
mov [ebp+hLibModule] eax +
cmp eax edi +
jnz loc_104A0C5  +
call ebx  +
mov [ebp+var_214] eax +
mov eax lpReserved +
mov esi offset lpReserved +
cmp eax esi +
jz loc_104A14D  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A14D  +
push [ebp+var_214]  +
push offset aBuftouse  +
push offset aLoadlibraryex  +
push offset dword_100C8D8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1049C05  +
jmp loc_104A14D  +
push edi  +
push [ebp+hLibModule]  +
push offset dword_10665A0  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_104A1AC  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov esi offset lpReserved +
test eax eax +
jnz loc_104A119  +
call ebx  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_104A119  +
test byte ptr [ecx+1Ch] 4 +
jz loc_104A119  +
push eax  +
push offset dword_100C8D8  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov [ebp+var_214] edi +
cmp dword_10665A4 0 +
jnz loc_104A1AC  +
push 1  +
call ds:Sleep  +
inc edi  +
cmp edi 3 +
jb loc_104A11F  +
cmp dword_10665A4 0 +
jnz loc_104A1AC  +
mov [ebp+var_214] 6Eh +
xor edi edi +
cmp [ebp+var_214] edi +
jz loc_104A1AC  +
mov eax dword_10665A0 +
cmp eax edi +
jz loc_104A198  +
push eax  +
call ds:FreeLibrary  +
test eax eax +
jnz loc_104A190  +
call ebx  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_104A190  +
test byte ptr [ecx+1Ch] 4 +
jz loc_104A190  +
push eax  +
push offset dword_100C8D8  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov dword_10665A0 edi +
jmp loc_104A1AC  +
cmp [ebp+hLibModule] edi +
jz loc_104A1AC  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_214] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_124] 0 +
push esi  +
push edi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+var_120] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 3  +
push 2  +
xor edi edi +
push 0  +
mov [ebp+var_120] esi +
mov esi ds:VerSetConditionMask +
inc edi  +
push 0  +
mov [ebp+var_11C] 5 +
mov [ebp+var_118] edi +
call esi  +
push 3  +
push edi  +
push edx  +
push eax  +
call esi  +
push edx  +
push eax  +
push 3  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
test eax eax +
jz loc_104A27F  +
call sub_1049FA8  +
test eax eax +
jz loc_104A277  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_104A2AF  +
test byte ptr [ecx+1Ch] 4 +
jz loc_104A2AF  +
push eax  +
push offset aLoadaalibrary  +
push offset dword_100C8D8  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_104A2AF  +
mov [ebp+var_124] edi +
jmp loc_104A2AF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A2AF  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A2AF  +
push [ebp+var_118]  +
push [ebp+var_11C]  +
push offset dword_100C8D8  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_124] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
cmp [ebp+arg_C] 0 +
push esi  +
jnz loc_104A30D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A303  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A303  +
push offset aPpprofile  +
push offset dword_100C8D8  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 80070057h +
jmp loc_104A3BC  +
lea eax [ebp+var_4] +
push eax  +
mov esi 104h +
push esi  +
push [ebp+arg_4]  +
call sub_102AAF4  +
test eax eax +
jz loc_104A34C  +
mov esi 80070057h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A3BC  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A3BC  +
push offset aPwszproxyhostn  +
push offset dword_100C8D8  +
push 1Ah  +
jmp loc_104A386  +
cmp [ebp+arg_0] 0 +
jz loc_104A393  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_102AAF4  +
test eax eax +
jz loc_104A393  +
mov esi 80070057h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A3BC  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A3BC  +
push offset aPwszprofilenam  +
push offset dword_100C8D8  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_104A3BC  +
lea eax [ebp+var_8] +
push eax  +
call sub_1049CD2  +
test eax eax +
jnz loc_104A3A7  +
mov esi 800759E5h +
jmp loc_104A3BC  +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104B426  +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ecx+844h] 1 +
mov eax 800759E5h +
jz loc_104A3E6  +
mov eax [ebp+8] +
mov [ecx+84Ch] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ecx+850h] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp [ebp+8] ebx +
jnz loc_104A466  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A442  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A442  +
push offset aPreauthcookie  +
push offset aRkq9I0vPsM  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ebx 80070057h +
add esi 834h +
mov eax [esi] +
test eax eax +
jz loc_104A45D  +
push eax  +
call ds:LocalFree  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi [ebp+0Ch] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov [esi+834h] eax +
test eax eax +
jnz loc_104A4AC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A4A5  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A4A5  +
push (offset aRkq9I0vPsM+10h)  +
push offset aRkq9I0vPsM  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ebx 8007000Eh +
jmp loc_104A447  +
***
push edi  +
push dword ptr [ebp+8]  +
push eax  +
call memcpy  +
add esp 0Ch +
mov [esi+838h] edi +
jmp loc_104A45D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
xor eax eax +
test esi esi +
jnz loc_104A4F5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A525  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A525  +
push offset aPpreauthcookie  +
push offset aRkq9I0vPsM  +
push 24h  +
jmp loc_104A51A  +
mov edx [ebp+0Ch] +
test edx edx +
jnz loc_104A52C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A525  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A525  +
push offset aPdcookiesize  +
push offset aRkq9I0vPsM  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_104A53E  +
push edi  +
mov edi [ecx+834h] +
mov [esi] edi +
mov ecx [ecx+838h] +
mov [edx] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
mov eax 800759E5h +
cmp edx 2 +
jz loc_104A569  +
cmp edx 3 +
jz loc_104A569  +
cmp edx 7 +
jz loc_104A569  +
cmp edx 6 +
jnz loc_104A572  +
mov eax [ecx] +
push edx  +
call dword ptr [eax+8Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ecx+844h] 4 +
mov eax 800759E5h +
jz loc_104A5A8  +
mov eax [ebp+arg_0] +
lea edx [eax-1] +
cmp edx 6 +
ja loc_104A5A3  +
mov [ecx+83Ch] eax +
xor eax eax +
jmp loc_104A5A8  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push 0  +
call dword ptr [eax+88h]  +
xor eax eax +
cmp [ebp+var_4] eax +
setz al  +
leave   +
retn   +
***
mov eax [ecx] +
push 0  +
push 2  +
call dword ptr [eax+18h]  +
push eax  +
call ds:CredDeleteW  +
test eax eax +
jnz loc_104A5FD  +
call ds:GetLastError  +
test eax eax +
jle locret_104A5FF  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-8] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-4] +
push ecx  +
mov eax [esi] +
lea ecx [ebp-0Ch] +
push ecx  +
xor ebx ebx +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-1Ch] +
push ecx  +
push ebx  +
push dword ptr [ebp+1Ch]  +
mov ecx esi +
push dword ptr [ebp+18h]  +
mov dword ptr [ebp-14h] 2 +
push dword ptr [ebp+14h]  +
mov [ebp-10h] ebx +
push ebx  +
push dword ptr [ebp+10h]  +
mov [ebp-0Ch] ebx +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
mov [ebp-8] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov dword ptr [esi+854h] 1 +
call dword ptr [eax+5Ch]  +
cmp eax ebx +
mov [ebp+1Ch] eax +
jge loc_104A6A0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A6A0  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A6A0  +
push dword ptr [ebp+1Ch]  +
push offset aCtsccredential  +
push offset aRkq9I0vPsM  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov [esi+854h] ebx +
cmp [ebp-8] ebx +
jz loc_104A6B8  +
push dword ptr [ebp-8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+6Ch]  +
mov [ebp-8] ebx +
mov esi ds:LocalFree +
cmp [ebp-0Ch] ebx +
jz loc_104A6CB  +
push dword ptr [ebp-0Ch]  +
call esi  +
mov [ebp-0Ch] ebx +
mov eax [ebp-4] +
cmp eax ebx +
jz loc_104A6FF  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_104A6D5  +
mov ecx [ebp-4] +
sub eax edx +
sar eax 1 +
add eax eax +
cmp eax ebx +
jz loc_104A6F2  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_104A6EC  +
cmp [ebp-4] ebx +
jz loc_104A6FF  +
push dword ptr [ebp-4]  +
call esi  +
mov [ebp-4] ebx +
mov eax [ebp-10h] +
pop esi  +
cmp eax ebx +
pop ebx  +
jz loc_104A70E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+1Ch] +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_104A759  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A752  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A752  +
push offset aPusercreds  +
push offset aRkq9I0vPsM  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 80070057h +
jmp loc_104A779  +
lea ecx [eax-4] +
cmp dword ptr [ecx] 0DEADBEEFh +
jnz loc_104A779  +
mov edx 62Ch +
mov eax ecx +
mov byte ptr [eax] 0 +
inc eax  +
dec edx  +
jnz loc_104A76B  +
push ecx  +
call ds:LocalFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_C] +
push edi  +
xor edi edi +
mov [ebp+cbData] edi +
mov dword ptr [ebp+Data] edi +
cmp eax edi +
jnz loc_104A7D0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A852  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A852  +
push offset aIsgpdefined  +
push offset aRkq9I0vPsM  +
push 66h  +
jmp loc_104A847  +
mov [eax] edi +
mov eax [ebp+arg_8] +
cmp eax edi +
jnz loc_104A7F9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A852  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A852  +
push offset aIsenforcedbygp  +
push offset aRkq9I0vPsM  +
push 67h  +
jmp loc_104A847  +
mov [eax] edi +
mov eax [ebp+arg_4] +
cmp eax edi +
jnz loc_104A822  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A852  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A852  +
push offset aPproxyusage  +
push offset aRkq9I0vPsM  +
push 68h  +
jmp loc_104A847  +
mov [eax] edi +
cmp [ebp+hKey] edi +
jnz loc_104A859  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A852  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A852  +
push offset aHgpkey  +
push offset aRkq9I0vPsM  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_104A8D1  +
push ebx  +
push esi  +
mov esi ds:RegQueryValueExW +
push 4  +
pop ebx  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] ebx +
call esi  +
cmp eax edi +
jz loc_104A88D  +
jle loc_104A8CF  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_104A8CF  +
cmp dword ptr [ebp+Data] edi +
jz loc_104A8CD  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 2 +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset aAllowexplicitu  +
push [ebp+hKey]  +
mov [ebp+cbData] ebx +
call esi  +
test eax eax +
jnz loc_104A8C4  +
cmp dword ptr [ebp+Data] edi +
jnz loc_104A8CD  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 1 +
mov eax edi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_10] +
push edi  +
xor edi edi +
mov [ebp+cbData] edi +
mov dword ptr [ebp+Data] edi +
cmp eax edi +
jnz loc_104A91D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A9AE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A9AE  +
push offset aIsgpdefined  +
push offset aRkq9I0vPsM  +
push 6Ah  +
jmp loc_104A9A3  +
mov [eax] edi +
mov eax [ebp+arg_C] +
cmp eax edi +
jnz loc_104A946  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A9AE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A9AE  +
push offset aIsenforcedbygp  +
push offset aRkq9I0vPsM  +
push 6Bh  +
jmp loc_104A9A3  +
mov [eax] edi +
mov eax [ebp+Type] +
cmp eax edi +
jnz loc_104A96F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A9AE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A9AE  +
push offset aProxyhostname  +
push offset aRkq9I0vPsM  +
push 6Ch  +
jmp loc_104A9A3  +
mov ecx [ebp+arg_8] +
cmp ecx 2 +
jbe loc_104AA4A  +
xor edx edx +
mov [eax] dx +
cmp [ebp+hKey] edi +
jnz loc_104A9B8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104A9AE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104A9AE  +
push offset aHgpkey  +
push offset aRkq9I0vPsM  +
push 6Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 80070057h +
jmp loc_104AA4A  +
push esi  +
mov esi ds:RegQueryValueExW +
mov [ebp+cbData] ecx +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset aProxyname  +
push [ebp+hKey]  +
call esi  +
cmp eax edi +
jz loc_104A9EA  +
jle loc_104A9E6  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_104AA49  +
push ebx  +
xor ebx ebx +
inc ebx  +
cmp [ebp+Type] ebx +
jnz loc_104AA23  +
mov eax [ebp+arg_10] +
mov [eax] ebx +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset aAllowexplicitp  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call esi  +
test eax eax +
jnz loc_104AA1C  +
cmp dword ptr [ebp+Data] edi +
jnz loc_104AA48  +
mov eax [ebp+arg_C] +
mov [eax] ebx +
jmp loc_104AA48  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AA48  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AA48  +
push edi  +
push offset aRkq9I0vPsM  +
push 6Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
pop ebx  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_C] +
push edi  +
xor edi edi +
mov [ebp+cbData] edi +
mov dword ptr [ebp+Data] edi +
cmp eax edi +
jnz loc_104AA96  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AB1C  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AB1C  +
push offset aIsgpdefined  +
push offset aRkq9I0vPsM  +
push 6Fh  +
jmp loc_104AB11  +
mov [eax] edi +
mov eax [ebp+arg_8] +
cmp eax edi +
jnz loc_104AABF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AB1C  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AB1C  +
push offset aIsenforcedbygp  +
push offset aRkq9I0vPsM  +
push 70h  +
jmp loc_104AB11  +
mov [eax] edi +
mov eax [ebp+arg_4] +
cmp eax edi +
jnz loc_104AAE8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AB1C  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AB1C  +
push offset aPauthschemes  +
push offset aRkq9I0vPsM  +
push 71h  +
jmp loc_104AB11  +
mov dword ptr [eax] 6 +
cmp [ebp+hKey] edi +
jnz loc_104AB23  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AB1C  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AB1C  +
push offset aHgpkey  +
push offset aRkq9I0vPsM  +
push 72h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_104AB95  +
push ebx  +
push esi  +
mov esi ds:RegQueryValueExW +
push 4  +
pop ebx  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset aLogonmethod  +
push [ebp+hKey]  +
mov [ebp+cbData] ebx +
call esi  +
cmp eax edi +
jz loc_104AB57  +
jle loc_104AB93  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_104AB93  +
mov eax dword ptr [ebp+Data] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push offset aAllowexplicitl  +
push [ebp+hKey]  +
mov [ebp+cbData] ebx +
call esi  +
test eax eax +
jnz loc_104AB88  +
cmp dword ptr [ebp+Data] edi +
jnz loc_104AB91  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 1 +
mov eax edi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
***
mov eax [ecx] +
test eax eax +
jz locret_104ABB1  +
and dword ptr [ecx] 0 +
add eax 18h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_104ABD1  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_104ABDC  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
lea esi [ecx+4] +
push esi  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_104AC1D  +
test esi esi +
jz loc_104AC1B  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+8]  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100CDCC +
jz loc_104AC3F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [esi] edi +
push dword_10665A0  +
call sub_105DAF6  +
mov [esi] eax +
cmp eax edi +
jnz loc_104AC7F  +
push offset a_mui  +
push dword_10665A0  +
call sub_105DF42  +
mov edi 8007007Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
mov ebx ds:LocalFree +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+840h] +
mov eax [edi] +
mov dword ptr [esi] offset off_100CE10 +
test eax eax +
jz loc_104ACB1  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
lea edi [esi+834h] +
mov eax [edi] +
test eax eax +
jz loc_104ACC3  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
pop edi  +
mov dword ptr [esi] offset off_100CDCC +
pop esi  +
pop ebx  +
retn   +
***
lea eax [ecx+216h] +
retn   +
***
lea eax [ecx+0Ch] +
retn   +
***
mov eax [ecx+83Ch] +
retn   +
***
mov eax [ecx+84Ch] +
retn   +
***
mov eax [ecx+844h] +
retn   +
***
mov eax [ecx+848h] +
retn   +
***
mov eax [ecx+850h] +
retn   +
***
lea eax [ecx+420h] +
retn   +
***
lea eax [ecx+62Ah] +
retn   +
***
mov eax [ecx+840h] +
retn   +
***
xor eax eax +
test byte ptr [ecx+844h] 7 +
jz locret_104AD53  +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 258h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+var_230] eax +
mov eax [ebp+arg_4] +
push edi  +
mov esi ecx +
mov [ebp+var_228] eax +
mov eax [esi] +
xor edi edi +
mov [ebp+var_220] edi +
mov [ebp+var_214] edi +
call dword ptr [eax+20h]  +
mov [ebp+hMem] edi +
mov [ebp+var_218] edi +
mov [ebp+var_224] edi +
mov [ebp+var_22C] 2 +
cmp eax 4 +
jnz loc_104ADCA  +
mov [ebp+var_220] 1 +
jmp loc_104B004  +
cmp eax 3 +
jz loc_104AFE8  +
cmp eax 1 +
jz loc_104AFE8  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push eax  +
push 20Ah  +
lea eax [ebp+var_210] +
push eax  +
call sub_1042FAE  +
cmp eax edi +
mov [ebp+var_214] eax +
jge loc_104AE30  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AFEE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AFEE  +
push [ebp+var_214]  +
push offset aStringcbcopy  +
push offset aRkq9I0vPsM  +
push 2Ah  +
jmp loc_104AFDB  +
push 0Ah  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_258] +
stos   +
lea eax [ebp+var_210] +
mov [ebp+var_258] eax +
lea eax [ebp+var_22C] +
mov [ebp+var_234] eax +
lea eax [ebp+var_210] +
mov [ebp+var_250] eax +
lea eax [ebp+var_218] +
push eax  +
lea eax [ebp+var_224] +
push eax  +
xor esi esi +
xor edi edi +
push esi  +
lea eax [ebp+var_258] +
inc edi  +
push eax  +
mov [ebp+var_238] edi +
mov [ebp+var_23C] edi +
call ds:CredReadDomainCredentialsW  +
test eax eax +
jnz loc_104AEED  +
call ds:GetLastError  +
cmp eax esi +
jle loc_104AEA6  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_214] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AFEE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AFEE  +
push [ebp+var_214]  +
push offset aCredreaddomain  +
push offset aFret  +
push offset aRkq9I0vPsM  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1049C05  +
jmp loc_104AFEE  +
cmp [ebp+var_224] esi +
jbe loc_104AFEE  +
mov eax [ebp+var_218] +
mov eax [eax+esi*4] +
push dword ptr [eax+8]  +
push [ebp+var_258]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_104AF24  +
inc esi  +
cmp esi [ebp+var_224] +
jb loc_104AEF9  +
jmp loc_104AFEE  +
mov eax [ebp+var_218] +
mov [ebp+var_220] edi +
mov edi esi +
shl edi 2 +
mov eax [edi+eax] +
mov eax [eax+30h] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_104AF3E  +
sub eax ecx +
sar eax 1 +
lea esi [eax+1] +
lea eax [esi+esi] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_104AF9A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AF8E  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AF8E  +
push offset aUsername_0  +
push offset aRkq9I0vPsM  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_214] 8007000Eh +
jmp loc_104AFEE  +
mov ecx [ebp+var_218] +
mov ecx [edi+ecx] +
push dword ptr [ecx+30h]  +
push esi  +
push eax  +
call sub_101BD65  +
mov [ebp+var_214] eax +
test eax eax +
jge loc_104AFEE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104AFEE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104AFEE  +
push [ebp+var_214]  +
push offset aStringcchcopy  +
push offset aRkq9I0vPsM  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_104AFEE  +
mov [ebp+var_220] edi +
xor edi edi +
cmp [ebp+var_218] edi +
jz loc_104B004  +
push [ebp+var_218]  +
call ds:CredFree  +
mov eax [ebp+var_230] +
cmp eax edi +
jz loc_104B018  +
mov ecx [ebp+hMem] +
mov [eax] ecx +
jmp loc_104B02C  +
cmp [ebp+hMem] edi +
jz loc_104B02C  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+var_220] +
mov ecx [ebp+var_228] +
mov [ecx] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+var_214] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+hInstance] +
xor ebx ebx +
push eax  +
mov edi ecx +
mov [ebp+hInstance] ebx +
call sub_104AC4B  +
mov esi eax +
test esi esi +
jge loc_104B0B5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B1B6  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B1B6  +
push esi  +
push offset aGetmuihandle  +
push offset aRkq9I0vPsM  +
push 7Fh  +
jmp loc_104B1AB  +
push 202h  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_104B101  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B1BA  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B1BA  +
push offset aResultstr  +
push offset aRkq9I0vPsM  +
push 80h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_104B1BA  +
mov esi 100h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 2  +
push [ebp+hInstance]  +
call ds:LoadStringW  +
test eax eax +
jnz loc_104B16A  +
call ds:GetLastError  +
test eax eax +
jle loc_104B134  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B1B6  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B1B6  +
push esi  +
push offset aLoadstring  +
push offset aRc  +
push offset aRkq9I0vPsM  +
push 81h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1049C05  +
jmp loc_104B1B6  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
push ebx  +
call sub_101BDD4  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_104B1C7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B1B6  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B1B6  +
push esi  +
push offset aStringcchpri_4  +
push offset aRkq9I0vPsM  +
push 82h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
test esi esi +
jge loc_104B1C7  +
test ebx ebx +
jz loc_104B1C7  +
push ebx  +
call ds:LocalFree  +
xor ebx ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+hInstance] +
xor ebx ebx +
push eax  +
mov edi ecx +
mov [ebp+hInstance] ebx +
call sub_104AC4B  +
mov esi eax +
test esi esi +
jge loc_104B240  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B341  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B341  +
push esi  +
push offset aGetmuihandle  +
push offset aRkq9I0vPsM  +
push 83h  +
jmp loc_104B336  +
push 202h  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_104B28C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B345  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B345  +
push offset aResultstr  +
push offset aRkq9I0vPsM  +
push 84h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_104B345  +
mov esi 100h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 1  +
push [ebp+hInstance]  +
call ds:LoadStringW  +
test eax eax +
jnz loc_104B2F5  +
call ds:GetLastError  +
test eax eax +
jle loc_104B2BF  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B341  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B341  +
push esi  +
push offset aLoadstring  +
push offset aRc  +
push offset aRkq9I0vPsM  +
push 85h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1049C05  +
jmp loc_104B341  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
push ebx  +
call sub_101BDD4  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_104B352  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B341  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B341  +
push esi  +
push offset aStringcchpri_4  +
push offset aRkq9I0vPsM  +
push 86h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
test esi esi +
jge loc_104B352  +
test ebx ebx +
jz loc_104B352  +
push ebx  +
call ds:LocalFree  +
xor ebx ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
inc ebx  +
push edi  +
xor edi edi +
mov [esi+4] ebx +
mov dword ptr [esi] offset off_100CE10 +
mov [esi+8] edi +
mov [esi+84Ch] edi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B3A9  +
test [eax+1Ch] bl +
jz loc_104B3A9  +
push offset aRkq9I0vPsM  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov [esi+848h] edi +
mov [esi+834h] edi +
mov [esi+840h] edi +
mov [esi+838h] edi +
mov [esi+854h] edi +
mov [esi+0Ch] ax +
mov [esi+420h] ax +
mov [esi+62Ah] ax +
pop edi  +
mov [esi+850h] ebx +
mov dword ptr [esi+844h] 7 +
mov dword ptr [esi+83Ch] 6 +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104AC8C  +
test byte ptr [ebp+8] 1 +
jz loc_104B41A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_10] +
push edi  +
test ebx ebx +
jnz loc_104B467  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B45D  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B45D  +
push offset aPpprofile  +
push offset aRkq9I0vPsM  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 80070057h +
jmp loc_104B5AC  +
and dword ptr [ebx] 0 +
push esi  +
push 858h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_104B485  +
mov ecx eax +
call sub_104B368  +
mov esi eax +
jmp loc_104B487  +
xor esi esi +
test esi esi +
jnz loc_104B4BE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B4B4  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B4B4  +
push offset aPprofile  +
push offset aRkq9I0vPsM  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 8007000Eh +
jmp loc_104B5AB  +
push [ebp+arg_8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov edi eax +
test edi edi +
jge loc_104B4FA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B59E  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B59E  +
push edi  +
push offset aSetauthscheme  +
push offset aRkq9I0vPsM  +
push 10h  +
jmp loc_104B58F  +
push [ebp+arg_4]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
mov edi eax +
test edi edi +
jge loc_104B52F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B59E  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B59E  +
push edi  +
push offset aSetproxyhostna  +
push offset aRkq9I0vPsM  +
push 11h  +
jmp loc_104B58F  +
push [ebp+arg_0]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov edi eax +
test edi edi +
jge loc_104B560  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B59E  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B59E  +
push edi  +
push offset aSetprofilename  +
push offset aRkq9I0vPsM  +
push 12h  +
jmp loc_104B58F  +
push [ebp+arg_C]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+58h]  +
mov edi eax +
test edi edi +
jge loc_104B59C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B59E  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B59E  +
push edi  +
push offset aSetalternatesp  +
push offset aRkq9I0vPsM  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_104B59E  +
mov [ebx] esi +
test edi edi +
jge loc_104B5AB  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+8]  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+8] 1 +
mov eax 80070005h +
jz loc_104B5E5  +
mov eax [ebp+8] +
test eax eax +
jnz loc_104B5D3  +
lea eax [ecx+0Ch] +
push eax  +
push 104h  +
add ecx 216h +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
mov eax 80070005h +
jnz loc_104B62E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B627  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B627  +
push offset aPwszhostname  +
push offset aRkq9I0vPsM  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_104B648  +
test byte ptr [ecx+844h] 2 +
jz loc_104B648  +
push dword ptr [ebp+8]  +
add ecx 0Ch +
push 104h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_104B68C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B685  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B685  +
push offset aPwszpreauthser  +
push offset aRkq9I0vPsM  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_104B6A0  +
push dword ptr [ebp+8]  +
add ecx 420h +
push 104h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_104B6E4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B6DD  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B6DD  +
push offset aPwszsupporturl  +
push offset aRkq9I0vPsM  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 80070057h +
jmp loc_104B6F8  +
push dword ptr [ebp+8]  +
add ecx 62Ah +
push 104h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+840h] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_104B725  +
push eax  +
call ds:LocalFree  +
mov [esi+840h] edi +
mov ebx offset aRkq9I0vPsM +
cmp [ebp+8] edi +
jz loc_104B813  +
lea eax [ebp-4] +
push eax  +
push 0FFFFFFFEh  +
push dword ptr [ebp+8]  +
call sub_101AFC2  +
mov edi eax +
test edi edi +
jge loc_104B77A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B820  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B820  +
push edi  +
push offset aStringcbleng_1  +
push ebx  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_104B81B  +
lea eax [ebp-4] +
push eax  +
push 2  +
push dword ptr [ebp-4]  +
call sub_104ABB7  +
test eax eax +
jge loc_104B79B  +
mov eax lpReserved +
mov edi 80070216h +
jmp loc_104B824  +
push dword ptr [ebp-4]  +
push 40h  +
call ds:LocalAlloc  +
mov [esi+840h] eax +
test eax eax +
jnz loc_104B7E1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B7DA  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B7DA  +
push offset aM_alternatespn  +
push ebx  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax lpReserved +
mov edi 8007000Eh +
jmp loc_104B824  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-4]  +
push eax  +
call sub_1042FAE  +
mov edi eax +
test edi edi +
jge loc_104B819  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B820  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B820  +
push edi  +
push offset aStringcbcopy  +
push ebx  +
push 28h  +
jmp loc_104B76A  +
***
mov [esi+840h] edi +
xor edi edi +
mov eax lpReserved +
test edi edi +
jge loc_104B840  +
cmp eax offset lpReserved +
jz loc_104B840  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B840  +
push edi  +
push ebx  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
xor edi edi +
xor ecx ecx +
mov [ebp+var_224] eax +
mov [ebp+hKey] edi +
mov word ptr [ebp+Type] cx +
cmp eax edi +
jnz loc_104B8B6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B8AC  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B8AC  +
push offset aPpprofile  +
push offset aRkq9I0vPsM  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ebx 80070057h +
jmp loc_104BB82  +
push esi  +
push 858h  +
mov [eax] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_104B8D3  +
mov ecx eax +
call sub_104B368  +
mov esi eax +
jmp loc_104B8D5  +
xor esi esi +
cmp esi edi +
jnz loc_104B90C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104B902  +
test byte ptr [eax+1Ch] 4 +
jz loc_104B902  +
push offset aPprofile  +
push offset aRkq9I0vPsM  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ebx 8007000Eh +
jmp loc_104BB81  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push edi  +
push offset aSoftwarePoli_0  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_104B935  +
xor ebx ebx +
inc ebx  +
jmp loc_104BB70  +
lea eax [ebp+var_218] +
push eax  +
lea eax [ebp+var_214] +
push eax  +
lea eax [ebp+var_21C] +
push eax  +
push [ebp+hKey]  +
call sub_104A790  +
push [ebp+var_21C]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
mov ebx eax +
cmp ebx edi +
jge loc_104B994  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BB6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BB6A  +
push ebx  +
push offset aSetproxyusage  +
push offset aRkq9I0vPsM  +
push 61h  +
jmp loc_104BB2F  +
cmp [ebp+var_218] edi +
jz loc_104B9B2  +
or dword ptr [esi+848h] 1 +
cmp [ebp+var_214] edi +
jz loc_104B9B2  +
and dword ptr [esi+844h] 0FFFFFFFEh +
lea eax [ebp+var_218] +
push eax  +
lea eax [ebp+var_214] +
push eax  +
mov edi 208h +
push edi  +
lea eax [ebp+Type] +
push eax  +
push [ebp+hKey]  +
call sub_104A8DB  +
mov eax [esi] +
lea ecx [ebp+Type] +
push ecx  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov ebx eax +
test ebx ebx +
jge loc_104BA18  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BB6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BB6A  +
push ebx  +
push offset aSetproxyhostna  +
push offset aRkq9I0vPsM  +
push 62h  +
jmp loc_104BB2F  +
cmp [ebp+var_218] 0 +
jz loc_104BA38  +
or dword ptr [esi+848h] 2 +
cmp [ebp+var_214] 0 +
jz loc_104BA38  +
and dword ptr [esi+844h] 0FFFFFFFDh +
lea eax [ebp+var_218] +
push eax  +
lea eax [ebp+var_214] +
push eax  +
lea eax [ebp+var_21C] +
push eax  +
push [ebp+hKey]  +
call sub_104AA56  +
push [ebp+var_21C]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8Ch]  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jge loc_104BA9C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BB6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BB6A  +
push ebx  +
push offset aInternalsetaut  +
push offset aRkq9I0vPsM  +
push 63h  +
jmp loc_104BB2F  +
cmp [ebp+var_218] eax +
jz loc_104BABA  +
or dword ptr [esi+848h] 4 +
cmp [ebp+var_214] eax +
jz loc_104BABA  +
and dword ptr [esi+844h] 0FFFFFFFBh +
lea ecx [ebp+var_220] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
lea ecx [ebp+var_228] +
push ecx  +
push eax  +
push offset aAlternatespn  +
push [ebp+hKey]  +
mov [ebp+var_220] edi +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_104BB3C  +
cmp [ebp+var_228] 1 +
jnz loc_104BB3C  +
cmp [ebp+var_220] eax +
jbe loc_104BB3C  +
mov eax [esi] +
lea ecx [ebp+Type] +
push ecx  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov ebx eax +
test ebx ebx +
jge loc_104BB63  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BB6A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BB6A  +
push ebx  +
push offset aSetalternatesp  +
push offset aRkq9I0vPsM  +
push 64h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_104BB6A  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_104BB63  +
test byte ptr [ecx+1Ch] 1 +
jz loc_104BB63  +
push eax  +
push offset aRkq9I0vPsM  +
push 65h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov dword ptr [esi+8] 1 +
xor edi edi +
cmp ebx edi +
jz loc_104BB79  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
jmp loc_104BB81  +
mov eax [ebp+var_224] +
mov [eax] esi +
pop esi  +
cmp [ebp+hKey] edi +
jz loc_104BB96  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_104BBF0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BBE9  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BBE9  +
push offset aPpprofile  +
push offset aRkq9I0vPsM  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 80070057h +
jmp loc_104BC30  +
lea eax [ebp+var_4] +
push eax  +
call sub_104B84E  +
mov esi eax +
test esi esi +
jge loc_104BC2B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BC30  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BC30  +
push esi  +
push offset aLoadgpprofile  +
push offset aRkq9I0vPsM  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_104BC30  +
mov eax [ebp+var_4] +
mov [edi] eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 38F8h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov [ebp+var_3890] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_3864] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_3868] eax +
mov eax [ebp+arg_24] +
mov [ebp+var_3898] eax +
mov eax [ebp+arg_28] +
mov [ebp+var_3828] eax +
mov eax [ebp+arg_2C] +
mov [ebp+var_3888] eax +
mov eax [ebp+arg_30] +
mov [ebp+var_3880] eax +
mov eax [ebp+arg_34] +
mov [ebp+var_389C] eax +
mov eax [ebp+arg_38] +
mov [ebp+var_387C] eax +
mov eax [ebp+arg_3C] +
xor ebx ebx +
mov edi [ebp+arg_40] +
mov [ebp+var_3884] eax +
mov eax [ebp+arg_44] +
push 2200h  +
mov [ebp+var_3878] eax +
lea eax [ebp+var_3818] +
push ebx  +
push eax  +
mov esi ecx +
mov [ebp+var_3894] edi +
mov [ebp+var_3820] ebx +
mov [ebp+var_3838] ebx +
mov [ebp+var_385C] ebx +
mov [ebp+lpString1] ebx +
mov [ebp+var_3830] ebx +
mov [ebp+var_386C] ebx +
mov [ebp+var_3850] ebx +
mov [ebp+var_381C] ebx +
call memset  +
add esp 0Ch +
mov ecx esi +
mov [ebp+var_3870] ebx +
mov [ebp+var_3848] ebx +
mov [ebp+var_3860] ebx +
call sub_104B1DD  +
mov ecx esi +
mov [ebp+var_3854] eax +
call sub_104B055  +
mov [ebp+hMem] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+20h]  +
mov [ebp+var_3824] eax +
mov [ebp+var_384C] ebx +
mov [ebp+var_383C] ebx +
mov [ebp+var_3874] ebx +
mov [ebp+var_3840] ebx +
mov [ebp+var_3834] ebx +
mov [ebp+var_3844] ebx +
cmp edi ebx +
jnz loc_104BDA7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BD98  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BD98  +
push offset aPpusercreds  +
push offset aRkq9I0vPsM  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_3820] 80070057h +
jmp loc_104BEB1  +
mov eax [ebp+var_3878] +
cmp eax ebx +
jnz loc_104BDD1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104BD98  +
test byte ptr [eax+1Ch] 4 +
jz loc_104BD98  +
push offset aPauthschemeuse  +
push offset aRkq9I0vPsM  +
push 34h  +
jmp loc_104BD8D  +
mov ecx [ebp+var_3884] +
mov [ecx] ebx +
mov ecx [ebp+var_3888] +
mov [ecx] ebx +
mov ecx [ebp+var_3880] +
mov [ecx] ebx +
mov [edi] ebx +
mov dword ptr [eax] 6 +
mov eax [ebp+var_387C] +
mov [eax] ebx +
cmp [ebp+arg_14] ebx +
jnz loc_104BF59  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+84h]  +
test eax eax +
jnz loc_104BF59  +
cmp [ebp+arg_18] ebx +
jnz loc_104BF59  +
cmp [esi+854h] ebx +
jnz loc_104BF59  +
cmp [ebp+var_3824] 6 +
jnz loc_104BE3C  +
mov [ebp+var_3824] 2 +
mov eax [ebp+var_386C] +
mov ecx [ebp+var_3894] +
mov [ecx] eax +
mov eax [ebp+var_3824] +
mov ecx [ebp+var_3878] +
mov [ecx] eax +
mov eax [ebp+var_3834] +
mov ecx [ebp+var_387C] +
mov [ecx] eax +
mov eax [ebp+var_3844] +
mov ecx [ebp+var_389C] +
mov [ecx] eax +
mov eax [ebp+var_3840] +
cmp eax ebx +
jz loc_104BE95  +
add eax 18h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+var_3884] +
mov ecx [ebp+var_3840] +
mov [eax] ecx +
mov eax [ebp+var_3874] +
mov ecx [ebp+var_3888] +
mov [ecx] eax +
mov eax [ebp+var_3860] +
mov ecx [ebp+var_3880] +
mov [ecx] eax +
mov ecx [ebp+lpString1] +
cmp ecx ebx +
jz loc_104BED8  +
mov eax [ebp+var_3830] +
add eax eax +
cmp eax ebx +
jz loc_104BECD  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_104BEC7  +
push [ebp+lpString1]  +
call sub_105D688  +
cmp [ebp+var_3838] ebx +
jz loc_104BEEB  +
push [ebp+var_3838]  +
call sub_105D688  +
cmp [ebp+hMem] ebx +
jz loc_104BEFF  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_3854] ebx +
jz loc_104BF13  +
push [ebp+var_3854]  +
call ds:LocalFree  +
mov eax [ebp+var_3840] +
cmp eax ebx +
jz loc_104BF2C  +
add eax 18h +
mov [ebp+var_3840] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_384C] +
cmp eax ebx +
jz loc_104BF42  +
push eax  +
mov [ebp+var_384C] ebx +
call sub_1018A83  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_3820] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 48h  +
lea eax [ebp+var_384C] +
push eax  +
call sub_10506DB  +
cmp eax ebx +
mov [ebp+var_3820] eax +
jge loc_104BFA0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C72A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C72A  +
push [ebp+var_3820]  +
push offset aCtsccredential  +
push offset aRkq9I0vPsM  +
push 35h  +
jmp loc_104C71F  +
mov edi offset lpReserved +
cmp [ebp+arg_14] ebx +
jnz loc_104BFAF  +
cmp [ebp+arg_18] ebx +
jz loc_104C01A  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+20h]  +
cmp eax 4 +
jnz loc_104BFC5  +
mov [ebp+var_3824] 2 +
cmp [ebp+var_3824] 2 +
jz loc_104BFD7  +
cmp [ebp+var_3824] 6 +
jnz loc_104C01A  +
cmp [ebp+arg_14] ebx +
jz loc_104C01A  +
mov eax [esi] +
push ebx  +
push 2  +
mov ecx esi +
call dword ptr [eax+18h]  +
push eax  +
call ds:CredDeleteW  +
test eax eax +
jnz loc_104C01A  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_104C01A  +
test byte ptr [ecx+1Ch] 1 +
jz loc_104C01A  +
push eax  +
push offset aRkq9I0vPsM  +
push 36h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push 62Ch  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+var_3850] eax +
cmp eax ebx +
jnz loc_104C066  +
mov eax lpReserved +
cmp eax edi +
jz loc_104C057  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C057  +
push offset aMycredsbuf  +
push offset aRkq9I0vPsM  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_3820] 8007000Eh +
jmp loc_104C736  +
lea edi [eax+4] +
push 404h  +
mov dword ptr [eax] 0DEADBEEFh +
lea eax [ebp+var_614] +
push ebx  +
push eax  +
mov [ebp+var_386C] edi +
call memset  +
add esp 0Ch +
cmp [ebp+var_3828] ebx +
jz loc_104C0C2  +
push [ebp+var_3828]  +
lea eax [ebp+var_614] +
push 202h  +
push eax  +
call sub_101BD65  +
cmp eax ebx +
mov [ebp+var_3820] eax +
jge loc_104C0C2  +
xor eax eax +
mov [ebp+var_3820] ebx +
mov word ptr [ebp+var_614] ax +
push 628h  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
cmp [ebp+var_3824] ebx +
mov [ebp+var_3828] 80002h +
jle loc_104C137  +
mov eax [ebp+var_3824] +
push 2  +
pop ecx  +
cmp eax ecx +
jle loc_104C127  +
cmp eax 3 +
jz loc_104C107  +
cmp eax 5 +
jz loc_104C127  +
cmp eax 6 +
jnz loc_104C137  +
mov [ebp+var_3848] ebx +
jmp loc_104C137  +
mov [ebp+var_3828] 80102h +
mov [ebp+var_3848] 1 +
mov [ebp+var_3870] 20h +
jmp loc_104C137  +
mov [ebp+var_3828] 8080Ah +
mov [ebp+var_3848] ecx +
mov eax [ebp+var_3890] +
mov [ebp+var_381C] eax +
mov edi 80h +
lea eax [ebp+var_3818] +
cmp [ebp+var_3864] ebx +
jz loc_104C16B  +
push [ebp+var_3864]  +
push edi  +
push eax  +
call sub_101BD65  +
push [ebp+var_3864]  +
jmp loc_104C17E  +
push [ebp+var_3854]  +
push edi  +
push eax  +
call sub_101BD65  +
push [ebp+var_3854]  +
push edi  +
lea eax [ebp+var_2718] +
push eax  +
call sub_101BD65  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_104C200  +
cmp [ebp+var_3868] ebx +
jz loc_104C1C5  +
push [ebp+var_3868]  +
cmp [ebp+arg_20] ebx +
jnz loc_104C1CD  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push eax  +
push edi  +
mov edi 800h +
lea eax [ebp+var_1618] +
push edi  +
push eax  +
call sub_101BDD4  +
add esp 14h +
jmp loc_104C1E3  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push eax  +
push edi  +
mov edi 800h +
lea eax [ebp+var_1618] +
push edi  +
push eax  +
call sub_101BDD4  +
add esp 10h +
lea eax [ebp+var_1618] +
push eax  +
push edi  +
lea eax [ebp+var_3718] +
push eax  +
call sub_101BD65  +
lea eax [ebp+var_1618] +
push eax  +
jmp loc_104C21E  +
push [ebp+hMem]  +
mov edi 800h +
push edi  +
lea eax [ebp+var_3718] +
push eax  +
call sub_101BD65  +
push [ebp+hMem]  +
push edi  +
lea eax [ebp+var_2618] +
push eax  +
call sub_101BD65  +
cmp [esi+854h] ebx +
jnz loc_104C25E  +
cmp [ebp+arg_18] ebx +
jnz loc_104C25E  +
push 2  +
pop eax  +
cmp [ebp+var_3824] eax +
jz loc_104C24C  +
cmp [ebp+var_3824] 6 +
jnz loc_104C25E  +
cmp [ebp+arg_1C] ebx +
jnz loc_104C25E  +
or [ebp+var_3828] 42h +
mov [ebp+var_3870] eax +
mov ecx [ebp+var_3898] +
mov edi offset word_1002174 +
cmp ecx ebx +
jnz loc_104C26F  +
mov ecx edi +
mov eax [ebp+var_3848] +
or eax 4 +
push eax  +
lea eax [ebp+var_3874] +
push eax  +
lea eax [ebp+var_383C] +
push eax  +
lea eax [ebp+var_3840] +
push eax  +
push [ebp+var_3870]  +
lea eax [ebp+var_3860] +
push [ebp+var_3828]  +
push eax  +
lea eax [ebp+var_3830] +
push eax  +
lea eax [ebp+lpString1] +
push eax  +
lea eax [ebp+var_385C] +
push eax  +
lea eax [ebp+var_3838] +
push eax  +
lea eax [ebp+var_614] +
push eax  +
mov eax [ebp+arg_14] +
neg eax  +
sbb eax eax +
and eax 8009030Ch +
push eax  +
push ecx  +
mov ecx [ebp+var_384C] +
lea eax [ebp+var_381C] +
push eax  +
call sub_10507BA  +
cmp eax ebx +
jz loc_104C32B  +
jle loc_104C2F4  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_3820] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C72A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C72A  +
push [ebp+var_3820]  +
push offset aCreduipromptfo  +
push offset aRkq9I0vPsM  +
push 38h  +
jmp loc_104C71F  +
mov eax [ebp+var_3824] +
cmp eax 3 +
jnz loc_104C375  +
cmp [ebp+var_383C] ebx +
jnz loc_104C3F6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C366  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C366  +
push offset aRkq9I0vPsM  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_3820] 800759F2h +
jmp loc_104C736  +
cmp eax 2 +
jnz loc_104C3B6  +
cmp [ebp+var_383C] 1 +
jnz loc_104C3F6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C3A7  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C3A7  +
push offset aRkq9I0vPsM  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_3820] 800759F1h +
jmp loc_104C736  +
cmp eax 1 +
jnz loc_104C3DE  +
cmp [ebp+var_383C] eax +
jnz loc_104C3F6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C3A7  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C3A7  +
push offset aRkq9I0vPsM  +
push 3Bh  +
jmp loc_104C39C  +
cmp eax 6 +
jnz loc_104C3F6  +
xor eax eax +
cmp [ebp+var_383C] ebx +
setnz al  +
inc eax  +
inc eax  +
mov [ebp+var_3824] eax +
push edi  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_104C423  +
cmp [ebp+var_383C] 1 +
jnz loc_104C72A  +
mov [ebp+var_3820] 8010002Ah +
jmp loc_104C72A  +
mov eax [ebp+var_3830] +
mov edi ds:LocalAlloc +
add eax eax +
push eax  +
push 40h  +
call edi  +
mov [ebp+var_3834] eax +
cmp eax ebx +
jnz loc_104C46B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C057  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C057  +
push offset aPcredsharepass  +
push offset aRkq9I0vPsM  +
push 3Ch  +
jmp loc_104C04C  +
mov eax [ebp+var_385C] +
add eax eax +
push eax  +
push 40h  +
call edi  +
mov [ebp+var_3844] eax +
cmp eax ebx +
jnz loc_104C4AD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C057  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C057  +
push offset aPcredshareuser  +
push offset aRkq9I0vPsM  +
push 3Dh  +
jmp loc_104C04C  +
push [ebp+lpString1]  +
push [ebp+var_3830]  +
push [ebp+var_3834]  +
call sub_101BD65  +
push [ebp+var_3838]  +
push [ebp+var_385C]  +
push [ebp+var_3844]  +
call sub_101BD65  +
push 2  +
pop edi  +
cmp [ebp+var_3824] edi +
jnz loc_104C679  +
cmp [ebp+arg_18] ebx +
jnz loc_104C679  +
cmp [ebp+var_3860] 1 +
jz loc_104C509  +
cmp dword ptr [esi+854h] 1 +
jnz loc_104C679  +
push 34h  +
lea eax [ebp+var_38F8] +
push ebx  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
mov ecx esi +
mov [ebp+var_388C] edi +
call dword ptr [eax+18h]  +
push eax  +
push 20Ah  +
lea eax [ebp+var_210] +
push eax  +
call sub_1042FAE  +
cmp eax ebx +
mov [ebp+var_3820] eax +
jge loc_104C575  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C72A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C72A  +
push [ebp+var_3820]  +
push offset aStringcchcopy  +
push offset aRkq9I0vPsM  +
push 3Eh  +
jmp loc_104C71F  +
mov eax [ebp+var_388C] +
mov [ebp+var_38F4] eax +
lea eax [ebp+var_210] +
mov [ebp+var_38F0] eax +
mov eax [ebp+lpString1] +
mov [ebp+var_38DC] eax +
mov eax [ebp+var_3830] +
lea eax [eax+eax-2] +
mov [ebp+var_38E0] eax +
mov eax [ebp+var_3838] +
mov [ebp+var_38C8] eax +
xor eax eax +
push 0Ah  +
pop ecx  +
lea edi [ebp+var_38C4] +
stos   +
lea eax [ebp+var_210] +
mov [ebp+var_38C4] eax +
xor eax eax +
inc eax  +
mov [ebp+var_38A4] eax +
mov [ebp+var_38A8] eax +
lea eax [ebp+var_210] +
mov [ebp+var_38BC] eax +
push ebx  +
lea eax [ebp+var_38F8] +
push eax  +
lea eax [ebp+var_38C4] +
lea ecx [ebp+var_388C] +
push eax  +
mov [ebp+var_38F8] ebx +
mov [ebp+var_38D8] 2 +
mov [ebp+var_38A0] ecx +
call ds:CredWriteDomainCredentialsW  +
test eax eax +
jnz loc_104C679  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_104C632  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_3820] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C72A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C72A  +
push [ebp+var_3820]  +
push offset aCredwrite  +
push offset aFret  +
push offset aRkq9I0vPsM  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1049C05  +
jmp loc_104C72A  +
mov esi [ebp+var_386C] +
mov eax 104h +
push eax  +
lea ecx [esi+414h] +
push ecx  +
push eax  +
push esi  +
push [ebp+var_3838]  +
call ds:CredUIParseUserNameW  +
cmp eax ebx +
jz loc_104C6D6  +
jle loc_104C6AA  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_3820] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C72A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C72A  +
push [ebp+var_3820]  +
push offset aCreduiparseuse  +
push offset aRkq9I0vPsM  +
push 40h  +
jmp loc_104C71F  +
push [ebp+lpString1]  +
add esi 20Ah +
push 20Ah  +
push esi  +
call sub_1042FAE  +
cmp eax ebx +
mov [ebp+var_3820] eax +
jge loc_104BE3C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C72A  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C72A  +
push [ebp+var_3820]  +
push offset aStringcbcopy  +
push offset aRkq9I0vPsM  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+var_3820] ebx +
jge loc_104BE3C  +
cmp [ebp+var_3850] ebx +
jz loc_104C75B  +
mov eax [ebp+var_3850] +
mov ecx 62Ch +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_104C749  +
push [ebp+var_3850]  +
call ds:LocalFree  +
cmp [ebp+var_3834] ebx +
jz loc_104C787  +
mov eax [ebp+var_3830] +
mov ecx [ebp+var_3834] +
add eax eax +
cmp eax ebx +
jz loc_104C77B  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_104C775  +
push [ebp+var_3834]  +
call ds:LocalFree  +
cmp [ebp+var_3844] ebx +
jz loc_104BEB1  +
push [ebp+var_3844]  +
call ds:LocalFree  +
jmp loc_104BEB1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+8] +
mov [ebp-4] ecx +
test esi esi +
jnz loc_104C7ED  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C7E3  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C7E3  +
push offset aPproxyinputcre  +
push offset aRkq9I0vPsM  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 80070057h +
jmp loc_104C8FD  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_104C814  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C7E3  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C7E3  +
push offset aPpproxyoutputc  +
push offset aRkq9I0vPsM  +
push 30h  +
jmp loc_104C7D8  +
***
and dword ptr [eax] 0 +
push edi  +
push 1Ch  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_104C859  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C84F  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C84F  +
push offset aGathercredenti  +
push offset aRkq9I0vPsM  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_104C8F1  +
and dword ptr [edi] 0 +
and dword ptr [edi+0Ch] 0 +
and dword ptr [edi+10h] 0 +
push ebx  +
lea ecx [edi+18h] +
push ecx  +
mov dword ptr [ecx] 2 +
lea ebx [edi+14h] +
and dword ptr [ebx] 0 +
push ebx  +
lea ecx [edi+10h] +
push ecx  +
lea ecx [edi+0Ch] +
push ecx  +
lea edx [edi+8] +
and dword ptr [edx] 0 +
push edx  +
lea eax [edi+4] +
and dword ptr [eax] 0 +
push eax  +
push edi  +
push dword ptr [esi+18h]  +
mov ecx [ebp-4] +
push dword ptr [esi+14h]  +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+4]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi]  +
call sub_104BC3D  +
mov esi eax +
pop ebx  +
test esi esi +
jge loc_104C8E8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104C8ED  +
test byte ptr [eax+1Ch] 4 +
jz loc_104C8ED  +
push esi  +
push offset aInternalgather  +
push offset aRkq9I0vPsM  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_104C8ED  +
mov eax [ebp+0Ch] +
mov [eax] edi +
test esi esi +
jge loc_104C8FC  +
test edi edi +
jz loc_104C8FC  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+40h]  +
mov eax [ebp+30h] +
push dword ptr [ebp+3Ch]  +
mov edx [eax] +
push dword ptr [ebp+38h]  +
push dword ptr [ebp+34h]  +
push eax  +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push edx  +
push dword ptr [ebp+24h]  +
push 0  +
push 0  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_104BC3D  +
pop ebp  +
retn 3Ch  +
***
xor ecx ecx +
mov ecx 10h +
push esi  +
mov esi [esp+4+arg_0] +
push edi  +
mov edi 8080808h +
mov edx esi +
push ebp  +
mov ebp 7060504h +
mov [edx] eax +
add edx 8 +
add eax edi +
mov [edx-4] ebp +
add ebp edi +
mov [edx] eax +
add edx 8 +
add eax edi +
mov [edx-4] ebp +
add ebp edi +
dec ecx  +
jnz loc_104CACB  +
mov ebp [esp+0Ch+arg_8] +
xor eax eax +
mov [edx] cl +
mov al [esp+0Ch+arg_4] +
lea edi [eax+ebp] +
mov [edx+1] cl +
xor ebx ebx +
xor edx edx +
xor ecx ecx +
and al 3 +
jnz loc_104CB70  +
mov dl [ecx+esi] +
mov al [ebp+0] +
add bl al +
add bl dl +
mov al [ebx+esi] +
mov [ecx+esi] al +
mov [ebx+esi] dl +
mov al [ebp+1] +
mov dl [ecx+esi+1] +
add bl al +
add bl dl +
mov al [ebx+esi] +
mov [ecx+esi+1] al +
mov [ebx+esi] dl +
mov al [ebp+2] +
mov dl [ecx+esi+2] +
add bl al +
add bl dl +
mov al [ebx+esi] +
mov [ecx+esi+2] al +
mov [ebx+esi] dl +
mov al [ebp+3] +
mov dl [ecx+esi+3] +
add bl al +
add bl dl +
mov al [ebx+esi] +
mov [ecx+esi+3] al +
add ebp 4 +
mov [ebx+esi] dl +
cmp ebp edi +
jnz loc_104CB5F  +
mov ebp [esp+0Ch+arg_8] +
add cl 4 +
jnz loc_104CB02  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn 0Ch  +
mov dl [ecx+esi] +
mov al [ebp+0] +
add bl al +
inc ebp  +
add bl dl +
mov al [ebx+esi] +
mov [ecx+esi] al +
mov [ebx+esi] dl +
cmp ebp edi +
jnz loc_104CB8C  +
mov ebp [esp+0Ch+arg_8] +
inc ecx  +
cmp ecx 100h +
jnz loc_104CB70  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
cmp dword_10665AC 0 +
push ebx  +
jnz loc_104CC2D  +
push eax  +
push ebx  +
push ecx  +
push edx  +
xor eax eax +
cpuid   +
xor eax eax +
xor ebx 756E6547h +
setz al  +
xor ebx ebx +
xor ecx 6C65746Eh +
setz bl  +
and eax ebx +
xor ecx ecx +
xor edx 49656E69h +
setz cl  +
and eax ecx +
mov [ebp+var_4] eax +
mov eax 1 +
cpuid   +
xor ecx ecx +
xor edx edx +
mov ebx 0FF0h +
and ebx eax +
mov [ebp+var_8] ebx +
pop edx  +
pop ecx  +
pop ebx  +
pop eax  +
cmp [ebp+var_4] 0 +
mov eax 1 +
jz loc_104CC21  +
cmp [ebp+var_8] 660h +
jnb loc_104CC21  +
xor eax eax +
mov eax off_1065D08[eax*4] +
mov dword_10665AC eax +
mov eax [ebp+arg_0] +
mov dword ptr [eax+54h] 0 +
mov dword ptr [eax+58h] 0 +
mov dword ptr [eax+40h] 67452301h +
mov dword ptr [eax+44h] 0EFCDAB89h +
mov dword ptr [eax+48h] 98BADCFEh +
mov dword ptr [eax+4Ch] 10325476h +
mov dword ptr [eax+50h] 0C3D2E1F0h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi+58h] +
mov eax ecx +
add ecx esi +
and eax 3Fh +
mov [ebp+var_4] eax +
mov [edi+58h] ecx +
cmp ecx esi +
jnb loc_104CC98  +
inc dword ptr [edi+54h]  +
test eax eax +
jbe loc_104CCEB  +
lea ecx [eax+esi] +
mov [ebp+var_8] ecx +
cmp ecx 40h +
jb loc_104CCEB  +
mov ebx [ebp+arg_4] +
mov ecx 40h +
sub ecx eax +
push ecx  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
mov eax [ebp+var_8] +
add esp 0Ch +
mov edx 40h +
sub edx [ebp+var_4] +
push edi  +
lea ecx [edi+40h] +
add eax 0FFFFFFC0h +
push ecx  +
add ebx edx +
mov [ebp+arg_8] eax +
call dword_10665AC  +
mov esi [ebp+arg_8] +
mov [ebp+var_4] 0 +
mov eax [ebp+var_4] +
jmp loc_104CCEE  +
mov ebx [ebp+arg_4] +
test bl 3 +
jz loc_104CD2C  +
cmp esi 40h +
jb loc_104CD5A  +
shr esi 6 +
mov [ebp+arg_4] esi +
mov edi edi +
mov eax [ebp+arg_0] +
push eax  +
add eax 40h +
mov ecx 10h +
mov esi ebx +
push eax  +
movs   +
call dword_10665AC  +
sub [ebp+arg_8] 40h +
mov edi [ebp+arg_0] +
add ebx 40h +
sub [ebp+arg_4] 1 +
jnz loc_104CD00  +
mov esi [ebp+arg_8] +
jmp loc_104CD57  +
cmp esi 40h +
jb loc_104CD5A  +
mov eax esi +
shr eax 6 +
mov [ebp+arg_8] eax +
lea esp [esp+0] +
push ebx  +
lea eax [edi+40h] +
push eax  +
call dword_10665AC  +
add ebx 40h +
sub esi 40h +
sub [ebp+arg_8] 1 +
jnz loc_104CD40  +
mov eax [ebp+var_4] +
test esi esi +
jz loc_104CD6B  +
push esi  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+58h] +
push edi  +
and eax 3Fh +
mov edi 40h +
sub edi eax +
cmp edi 8 +
ja loc_104CDA2  +
add edi 40h +
lea ecx [edi-8] +
push ecx  +
lea edx [ebp+var_50] +
push 0  +
push edx  +
call memset  +
mov ecx [esi+54h] +
mov eax [esi+58h] +
add ecx ecx +
mov edx eax +
add ecx ecx +
add ecx ecx +
shr edx 1Dh +
or ecx edx +
add esp 0Ch +
add eax eax +
mov [ebp+var_8] ecx +
push 2  +
lea ecx [ebp+var_8] +
add eax eax +
push ecx  +
lea edx [ebp+edi+var_58] +
add eax eax +
push edx  +
mov byte ptr [ebp+var_50] 80h +
mov [ebp+var_4] eax +
call sub_104EC40  +
push edi  +
lea eax [ebp+var_50] +
push eax  +
push esi  +
call sub_104CC70  +
mov edx [ebp+arg_4] +
push 5  +
lea ecx [esi+40h] +
push ecx  +
push edx  +
call sub_104EC40  +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push esi  +
call sub_104CBB0  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
push ebp  +
mov edx [esp+arg_4] +
sub esp 140h +
mov esi 10h +
lea ecx [esp+140h+var_144] +
mov eax [edx] +
add ecx 4 +
add edx 4 +
bswap eax  +
mov [ecx] eax +
dec esi  +
jnz loc_104CE47  +
mov ebp [esp+140h+arg_0] +
lea ecx [esp+140h+var_138] +
mov edx 20h +
xor eax eax +
xor ebx ebx +
mov eax [ecx-8] +
mov ebx [ecx-4] +
mov esi [ecx] +
mov edi [ecx+4] +
xor eax esi +
xor ebx edi +
mov esi [ecx+18h] +
mov edi [ecx+1Ch] +
xor eax esi +
xor ebx edi +
mov esi [ecx+2Ch] +
mov edi [ecx+30h] +
xor eax esi +
add ecx 8 +
rol eax 1 +
xor ebx edi +
rol ebx 1 +
mov [ecx+30h] eax +
dec edx  +
mov [ecx+34h] ebx +
jnz loc_104CE6A  +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp ecx +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_140] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_13C] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_138] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_134] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_130] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_12C] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_128] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_124] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_120] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_11C] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_118] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_114] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_110] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_10C] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_108] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_104] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_100] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_FC] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_F8] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_F4] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_F0] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_EC] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_E8] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_E4] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_E0] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_DC] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_D8] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_D4] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_D0] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_CC] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_C8] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_C4] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C0] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_BC] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_B8] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_B4] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_B0] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_AC] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_A8] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_A4] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
mov ebp ebx +
mov esi eax +
or ebp ecx +
rol esi 5 +
and ebp edx +
add edi esi +
mov esi [esp+140h+var_A0] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_9C] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_98] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_94] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_90] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_8C] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_88] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_84] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_80] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_7C] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_78] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_74] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_70] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_6C] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_68] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_64] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_60] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_5C] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_58] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_54] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ecx +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_50] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_4C] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_48] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_44] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_40] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_3C] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_38] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_34] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_30] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_2C] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_28] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_24] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_20] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_1C] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_18] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_14] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_10] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_8] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_4] +
add eax 0CA62C1D6h +
add esi ebp +
add eax esi +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
push ebx  +
push ebp  +
sub esp 140h +
mov ebp [esp+140h+arg_0] +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp [esp+140h+arg_4] +
mov esi [ebp+0] +
bswap esi  +
mov [esp+140h+var_140] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+4] +
bswap esi  +
mov [esp+140h+var_13C] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+8] +
bswap esi  +
mov [esp+140h+var_138] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+0Ch] +
bswap esi  +
mov [esp+140h+var_134] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+10h] +
bswap esi  +
mov [esp+140h+var_130] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+14h] +
bswap esi  +
mov [esp+140h+var_12C] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+18h] +
bswap esi  +
mov [esp+140h+var_128] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+1Ch] +
bswap esi  +
mov [esp+140h+var_124] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+20h] +
bswap esi  +
mov [esp+140h+var_120] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+24h] +
bswap esi  +
mov [esp+140h+var_11C] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+28h] +
bswap esi  +
mov [esp+140h+var_118] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+2Ch] +
bswap esi  +
mov [esp+140h+var_114] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+30h] +
bswap esi  +
mov [esp+140h+var_110] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+34h] +
bswap esi  +
mov [esp+140h+var_10C] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+38h] +
bswap esi  +
mov [esp+140h+var_108] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+3Ch] +
bswap esi  +
mov [esp+140h+var_104] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [esp+140h+var_140] +
mov ebp [esp+140h+var_138] +
xor esi ebp +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_100] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+5A827999h] +
add edx esi +
mov ebp ebx +
xor ebp ecx +
and ebp eax +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_13C] +
mov ebp [esp+140h+var_134] +
xor esi ebp +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_FC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+5A827999h] +
add ecx esi +
mov ebp eax +
xor ebp ebx +
and ebp edi +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_138] +
mov ebp [esp+140h+var_130] +
xor esi ebp +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+5A827999h] +
add ebx esi +
mov ebp edi +
xor ebp eax +
and ebp edx +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_134] +
mov ebp [esp+140h+var_12C] +
xor esi ebp +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+5A827999h] +
add eax esi +
mov ebp edx +
xor ebp edi +
and ebp ecx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_130] +
mov ebp [esp+140h+var_128] +
xor esi ebp +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_12C] +
mov ebp [esp+140h+var_124] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_EC] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_128] +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E8] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_124] +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E4] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_120] +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E0] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_11C] +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_DC] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_118] +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D8] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_114] +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D4] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_110] +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D0] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_10C] +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_CC] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_108] +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C8] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_104] +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C4] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_100] +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C0] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_FC] +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_BC] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_F8] +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B8] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_F4] +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B4] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_F0] +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B0] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_EC] +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_AC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_E8] +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_E4] +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_E0] +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_DC] +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_9C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_D8] +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_98] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_D4] +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_94] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_D0] +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_90] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_CC] +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_8C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_C8] +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_88] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_C4] +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_84] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_C0] +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_80] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_BC] +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_7C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_B8] +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_78] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_B4] +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_74] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_B0] +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_70] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_AC] +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_6C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_A8] +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_68] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_A4] +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_64] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_A0] +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_60] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_9C] +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_5C] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_98] +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_58] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_94] +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_54] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_90] +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_50] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_8C] +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_4C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_88] +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_48] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_84] +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_44] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_80] +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_40] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_7C] +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_3C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_78] +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_38] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_74] +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_34] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_70] +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_30] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_6C] +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_2C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_68] +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_28] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_64] +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_24] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_60] +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_20] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_5C] +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_1C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_58] +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_18] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_54] +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
mov ebp [esp+140h+var_20] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_14] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_50] +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
mov ebp [esp+140h+var_1C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_10] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_4C] +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
mov ebp [esp+140h+var_18] +
xor esi ebp +
rol esi 1 +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_48] +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
mov ebp [esp+140h+var_14] +
xor esi ebp +
rol esi 1 +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_44] +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
mov ebp [esp+140h+var_10] +
xor esi ebp +
rol esi 1 +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
test edx edx +
jbe loc_104EC65  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub ecx eax +
push esi  +
mov esi [ecx+eax] +
bswap esi  +
mov [eax] esi +
add eax 4 +
sub edx 1 +
jnz loc_104EC55  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_10670D4 0 +
jnz loc_104ECA6  +
lea eax [ebp+Exchange] +
push eax  +
call sub_104EE87  +
test eax eax +
jz locret_104ECA9  +
push 0  +
push [ebp+Exchange]  +
push offset dword_10670D4  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_104ECA6  +
push [ebp+Exchange]  +
call sub_104EDFD  +
xor eax eax +
inc eax  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ds:InterlockedExchange +
push 0  +
push offset dword_10670D4  +
call esi  +
test eax eax +
jz loc_104ECCE  +
push eax  +
call sub_104EDFD  +
push 0  +
push offset Target  +
call esi  +
pop esi  +
test eax eax +
jz locret_104ECE3  +
push eax  +
call ds:CloseHandle  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call sub_104EC6E  +
test eax eax +
jz loc_104ED06  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_104F099  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push 0  +
call sub_104ECEB  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
dec ecx  +
and ecx [ebp+arg_4] +
mov eax [eax+ecx*4+4] +
add eax 8 +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
dec ecx  +
and ecx [ebp+arg_4] +
mov eax [eax+ecx*4+4] +
add eax 8 +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
dec ecx  +
and ecx [ebp+arg_4] +
mov eax [eax+ecx*4+4] +
push eax  +
push [ebp+arg_8]  +
add eax 20h +
push [ebp+arg_C]  +
push 0  +
push 0  +
push eax  +
call sub_104F307  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
dec ecx  +
and ecx [ebp+arg_4] +
push esi  +
mov esi [eax+ecx*4+4] +
cmp dword ptr [esi+4] 0 +
lea eax [esi+20h] +
jnz loc_104EDE0  +
push dword_1065D14  +
push off_1065D10  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push eax  +
call sub_104F22C  +
mov dword ptr [esi+4] 1 +
jmp loc_104EDF3  +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push eax  +
call sub_104F4A0  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
test eax eax +
jbe loc_104EE27  +
push ebx  +
push esi  +
lea esi [edi+4] +
mov ebx eax +
mov eax [esi] +
add eax 8 +
push eax  +
call ds:DeleteCriticalSection  +
add esi 4 +
dec ebx  +
jnz loc_104EE13  +
pop esi  +
pop ebx  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset dword_10665B0  +
call ds:InterlockedIncrement  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
dec edx  +
and eax edx +
mov edx [ebp+arg_4] +
mov esi [ecx+eax*4+4] +
push eax  +
push ecx  +
mov [edx] eax +
call sub_104ED2A  +
xor eax eax +
cmp [esi] eax +
jnz loc_104EE75  +
cmp [esi+4] eax +
jnz loc_104EE78  +
xor eax eax +
inc eax  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
push 3A4h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_104EEEA  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov dword ptr [edi] 8 +
lea esi [edi+24h] +
lea ebx [edi+4] +
lea eax [esi+8] +
push eax  +
mov [ebx] esi +
call ds:RtlInitializeCriticalSection  +
test eax eax +
jl loc_104EEEF  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
inc [ebp+var_4]  +
add ebx 4 +
add esi 70h +
cmp [ebp+var_4] 8 +
jb loc_104EEBA  +
mov eax [ebp+arg_0] +
mov [eax] edi +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
mov eax [ebp+var_4] +
push edi  +
mov [edi] eax +
call sub_104EDFD  +
xor eax eax +
jmp loc_104EEE8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax Target +
push esi  +
push edi  +
xor edi edi +
mov [ebp+hDevice] eax +
cmp eax edi +
jnz loc_104EF9A  +
mov esi ds:NtOpenFile +
cmp esi edi +
jz loc_104EFBE  +
mov eax ds:RtlInitUnicodeString +
cmp eax edi +
jz loc_104EFBE  +
push offset aDeviceKsecdd  +
lea ecx [ebp+var_C] +
push ecx  +
call eax  +
push 20h  +
lea eax [ebp+var_C] +
mov [ebp+var_24] eax +
push 7  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
push 100001h  +
lea eax [ebp+hDevice] +
push eax  +
mov [ebp+var_2C] 18h +
mov [ebp+var_28] edi +
mov [ebp+var_20] 40h +
mov [ebp+var_1C] edi +
mov [ebp+var_18] edi +
call esi  +
test eax eax +
jl loc_104EFBE  +
push edi  +
push [ebp+hDevice]  +
push offset Target  +
call ds:InterlockedCompareExchange  +
mov esi eax +
cmp esi edi +
jz loc_104EF9A  +
push [ebp+hDevice]  +
call ds:CloseHandle  +
mov [ebp+hDevice] esi +
mov eax [ebp+lpBytesReturned] +
push edi  +
push eax  +
push dword ptr [eax]  +
push [ebp+lpOutBuffer]  +
push [ebp+nInBufferSize]  +
push [ebp+lpInBuffer]  +
push 390008h  +
push [ebp+hDevice]  +
call ds:DeviceIoControl  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
xor eax eax +
jmp loc_104EFB8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_44] eax +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
push dword_10670D4  +
call sub_104EE41  +
xor ebx ebx +
cmp [ebp+var_40] ebx +
jz loc_104F054  +
push 30h  +
pop edi  +
push [ebp+var_38]  +
mov [ebp+BytesReturned] edi +
push dword_10670D4  +
call sub_104ED4F  +
lea eax [ebp+BytesReturned] +
push eax  +
lea eax [ebp+OutBuffer] +
push eax  +
push ebx  +
push ebx  +
call sub_104EF03  +
test eax eax +
jz loc_104F083  +
push [ebp+var_38]  +
push dword_10670D4  +
call sub_104ED2A  +
push ebx  +
push ebx  +
lea eax [ebp+OutBuffer] +
push eax  +
push [ebp+BytesReturned]  +
push [ebp+var_38]  +
push dword_10670D4  +
call sub_104EDA3  +
lea eax [ebp+OutBuffer] +
mov [eax] bl +
inc eax  +
dec edi  +
jnz loc_104F04E  +
mov eax 10000h +
cmp [esi] eax +
jbe loc_104F05F  +
mov [esi] eax +
push [ebp+var_44]  +
push dword ptr [esi]  +
push [ebp+var_38]  +
push dword_10670D4  +
call sub_104ED74  +
push [ebp+var_38]  +
push dword_10670D4  +
call sub_104ED4F  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jbe loc_104F0D5  +
mov eax [ebp+arg_4] +
sub eax esi +
cmp eax 0FFFFFFFFh +
jnb loc_104F0B6  +
mov [ebp+var_4] eax +
jmp loc_104F0BA  +
or [ebp+var_4] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add eax esi +
push eax  +
call sub_104EFC7  +
test eax eax +
jz loc_104F0DD  +
add esi [ebp+var_4] +
cmp esi [ebp+arg_4] +
jb loc_104F0A7  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
xor eax eax +
jmp loc_104F0D8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor bl bl +
push esi  +
mov al 1 +
xor ecx ecx +
mov edx [ebp+arg_0] +
sub edx ecx +
lea ecx [edx+0Fh] +
movzx dx byte ptr [ecx] +
movzx ax al +
add ax dx +
movzx edx ax +
mov eax edx +
and eax 0FF00h +
xor esi esi +
cmp si ax +
setnz al  +
inc bl  +
mov [ecx] dl +
movzx ecx bl +
cmp ecx 10h +
jb loc_104F0F3  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
shr edx 3 +
test edx edx +
jbe loc_104F15A  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub ecx eax +
push esi  +
mov esi [ecx+eax] +
xor [eax] esi +
mov esi [ecx+eax+4] +
xor [eax+4] esi +
add eax 8 +
dec edx  +
jnz loc_104F147  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
test eax eax +
jnz loc_104F19D  +
push dword ptr [edi+38h]  +
mov edx edi +
lea ecx [ebp+var_210] +
call sub_105FD20  +
lea eax [ebp+var_210] +
mov ebx [ebp+arg_8] +
mov [ebp+var_38] eax +
test ebx ebx +
jbe loc_104F1C7  +
lea eax [edi+20h] +
push eax  +
call sub_104F0E6  +
mov ecx [ebp+var_38] +
lea eax [ebp+esi+var_34] +
push eax  +
lea edx [edi+20h] +
call loc_105F130  +
add esi 10h +
cmp esi ebx +
jb loc_104F1A7  +
push ebx  +
push [ebp+arg_4]  +
lea eax [ebp+var_34] +
push eax  +
call sub_104F12F  +
push dword ptr [edi+38h]  +
lea eax [ebp+var_34] +
push eax  +
push edi  +
call memcpy  +
add edi 20h +
lea esi [ebp+ebx+var_44] +
movs   +
movs   +
movs   +
add esp 0Ch +
movs   +
pop edi  +
pop esi  +
mov ecx ebx +
test ebx ebx +
lea eax [ebp+var_34] +
pop ebx  +
jz loc_104F202  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_104F1FB  +
lea eax [ebp+var_210] +
cmp eax [ebp+var_38] +
jnz loc_104F219  +
mov ecx 1D8h +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_104F212  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_10665B8 0 +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_3C] eax +
jnz loc_104F26A  +
call nullsub_4  +
xchg eax [ebp+var_40] +
mov dword_10665B8 1 +
jmp loc_104F26D  +
xchg eax [ebp+var_38] +
mov edi [ebp+arg_8] +
cmp edi 20h +
jz loc_104F286  +
cmp edi 28h +
jz loc_104F286  +
cmp edi 30h +
jz loc_104F286  +
mov eax 0C000000Dh +
jmp loc_104F2E4  +
cmp edi ebx +
jb loc_104F27F  +
push ebx  +
push [ebp+var_3C]  +
lea eax [ebp+var_34] +
push eax  +
call memcpy  +
mov eax edi +
sub eax ebx +
push eax  +
lea eax [ebp+ebx+var_34] +
push 0  +
push eax  +
call memset  +
add esp 18h +
push edi  +
push [ebp+arg_4]  +
lea eax [ebp+var_34] +
push eax  +
call sub_104F12F  +
push 50h  +
xor ebx ebx +
push ebx  +
push esi  +
call memset  +
add esp 0Ch +
push ebx  +
lea eax [edi-10h] +
mov [esi+38h] eax +
push edi  +
lea eax [ebp+var_34] +
push eax  +
push esi  +
call sub_104F163  +
mov dword ptr [esi+30h] 1 +
mov [esi+34h] ebx +
xor eax eax +
push 30h  +
pop edx  +
pop edi  +
pop esi  +
lea ecx [ebp+var_34] +
pop ebx  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec edx  +
jnz loc_104F2ED  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov edx [ebp+arg_14] +
mov ecx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebx+38h] +
push edi  +
mov edi [ebp+arg_8] +
add esi 10h +
mov [ebp+var_4C] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_50] edx +
mov [ebp+var_48] eax +
mov [ebp+var_54] esi +
cmp esi edi +
jb loc_104F459  +
cmp esi 30h +
ja loc_104F459  +
cmp eax 10000h +
ja loc_104F459  +
lea eax [ebp+var_44] +
test ecx ecx +
jz loc_104F391  +
push edi  +
push ecx  +
push eax  +
call memcpy  +
mov eax esi +
sub eax edi +
push eax  +
lea eax [ebp+edi+var_44] +
push 0  +
push eax  +
call memset  +
add esp 18h +
push 0  +
push esi  +
lea eax [ebp+var_44] +
push eax  +
push ebx  +
call sub_104F163  +
jmp loc_104F39D  +
push esi  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push dword ptr [ebx+38h]  +
mov edx ebx +
lea ecx [ebp+var_22C] +
call sub_105FD20  +
cmp [ebp+arg_10] 0 +
jbe loc_104F415  +
lea esi [ebx+20h] +
push esi  +
call sub_104F0E6  +
lea eax [ebp+var_14] +
push eax  +
mov edx esi +
lea ecx [ebp+var_22C] +
call loc_105F130  +
push 10h  +
pop ecx  +
lea edi [ebx+3Ch] +
lea esi [ebp+var_14] +
xor eax eax +
cmps   +
jz loc_104F3E1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_104F452  +
lea esi [ebp+var_14] +
lea edi [ebx+3Ch] +
movs   +
movs   +
movs   +
push 10h  +
movs   +
pop esi  +
cmp [ebp+var_48] esi +
jnb loc_104F3FA  +
mov esi [ebp+var_48] +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_4C]  +
call memcpy  +
add [ebp+var_4C] esi +
add esp 0Ch +
sub [ebp+var_48] esi +
jnz loc_104F3B3  +
mov esi [ebp+var_54] +
lea eax [ebp+var_22C] +
push eax  +
push esi  +
lea eax [ebp+var_44] +
push eax  +
push ebx  +
call sub_104F163  +
mov eax [ebp+var_50] +
xor ecx ecx +
inc ecx  +
add [ebx+30h] ecx +
push 0  +
pop edx  +
adc [ebx+34h] edx +
cmp eax edx +
jz loc_104F44E  +
mov [eax] edx +
cmp dword ptr [ebx+34h] 10000h +
jb loc_104F44E  +
ja loc_104F44C  +
cmp [ebx+30h] edx +
jbe loc_104F44E  +
mov [eax] ecx +
xor eax eax +
jmp loc_104F45E  +
mov eax 0C00000E5h +
jmp loc_104F45E  +
mov eax 0C000000Dh +
push 30h  +
pop edx  +
pop edi  +
pop esi  +
lea ecx [ebp+var_44] +
pop ebx  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec edx  +
jnz loc_104F467  +
push 10h  +
pop edx  +
lea ecx [ebp+var_14] +
mov byte ptr [ecx] 0 +
inc ecx  +
dec edx  +
jnz loc_104F474  +
mov edx 1D8h +
lea ecx [ebp+var_22C] +
mov byte ptr [ecx] 0 +
inc ecx  +
dec edx  +
jnz loc_104F486  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+38h] +
add ecx 10h +
push edi  +
mov edi [ebp+arg_10] +
cmp ecx ebx +
jz loc_104F4D2  +
mov eax 0C000000Dh +
jmp loc_104F521  +
cmp ebx edi +
jb loc_104F4CB  +
cmp ebx 30h +
ja loc_104F4CB  +
push edi  +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call memcpy  +
mov eax ebx +
sub eax edi +
push eax  +
lea eax [ebp+edi+var_34] +
push 0  +
push eax  +
call memset  +
add esp 18h +
push ebx  +
push [ebp+arg_4]  +
lea eax [ebp+var_34] +
push eax  +
call sub_104F12F  +
push 0  +
push ebx  +
lea eax [ebp+var_34] +
push eax  +
push esi  +
call sub_104F163  +
and dword ptr [esi+34h] 0 +
mov dword ptr [esi+30h] 1 +
xor eax eax +
push 30h  +
pop edx  +
pop edi  +
pop esi  +
lea ecx [ebp+var_34] +
pop ebx  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec edx  +
jnz loc_104F52A  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_104F565  +
cmp ecx 7FFFFFFFh +
jbe loc_104F56A  +
mov eax 80070057h +
test eax eax +
jl loc_104F5AE  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_104F5A1  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_104F59C  +
mov cl [edx+eax] +
test cl cl +
jz loc_104F59C  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_104F588  +
pop edi  +
test esi esi +
jnz loc_104F5A7  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+lpDst] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset aClsidAdb880a6D  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_104F68C  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push esi  +
push [ebp+hKey]  +
mov edi 104h +
mov [ebp+cbData] edi +
mov [ebp+Type] 1 +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_104F67B  +
cmp [ebp+Type] 2 +
mov [ebp+var_5] al +
lea eax [ebp+Src] +
jnz loc_104F665  +
push edi  +
push [ebp+lpDst]  +
push eax  +
call ds:ExpandEnvironmentStringsA  +
dec eax  +
lea ecx [edi-1] +
cmp ecx eax +
sbb esi esi +
inc esi  +
jmp loc_104F67B  +
push eax  +
push edi  +
push [ebp+lpDst]  +
call sub_104F54F  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov esi ecx +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop edi  +
jmp loc_104F68E  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx dword_10665C8 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test ecx ecx +
jnz loc_104F721  +
cmp dword_10665C4 ecx +
jnz loc_104F721  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_104F5B7  +
mov esi ds:LoadLibraryA +
test eax eax +
jz loc_104F6F6  +
lea eax [ebp+LibFileName] +
push eax  +
call esi  +
mov dword_10665C8 eax +
mov ecx dword_10665C8 +
test ecx ecx +
jnz loc_104F721  +
push offset aHhctrl_ocx  +
call esi  +
mov ecx eax +
mov dword_10665C8 ecx +
test ecx ecx +
jnz loc_104F721  +
mov dword_10665C4 1 +
xor eax eax +
jmp loc_104F746  +
mov eax dword_10665C0 +
test eax eax +
jnz loc_104F73C  +
push 0Fh  +
push ecx  +
call ds:GetProcAddress  +
mov dword_10665C0 eax +
test eax eax +
jz loc_104F713  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push offset aCrypt32_dll  +
mov esi ecx +
call ds:LoadLibraryW  +
mov edi ds:GetProcAddress +
mov ebx eax +
test ebx ebx +
jz loc_104F790  +
push offset aCryptprotectme  +
push ebx  +
call edi  +
push offset aCryptunprotect  +
push ebx  +
mov [esi+30h] eax +
call edi  +
mov [esi+34h] eax +
xor eax eax +
cmp [esi+30h] eax +
jz loc_104F79C  +
cmp [esi+34h] eax +
jnz loc_104F7E0  +
mov [esi+30h] eax +
mov [esi+34h] eax +
cmp ebx eax +
jz loc_104F7AD  +
push ebx  +
call ds:FreeLibrary  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov ebx eax +
test ebx ebx +
jz loc_104F7D4  +
push offset aSystemfunction  +
push ebx  +
call edi  +
push offset aSystemfuncti_0  +
push ebx  +
mov [esi+28h] eax +
call edi  +
mov [esi+2Ch] eax +
xor eax eax +
cmp [esi+28h] eax +
jz loc_104F7EC  +
cmp [esi+2Ch] eax +
jz loc_104F7EC  +
mov dword ptr [esi+38h] 1 +
mov [esi+3Ch] ebx +
jmp loc_104F7FD  +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
cmp ebx eax +
jz loc_104F7FD  +
push ebx  +
call ds:FreeLibrary  +
mov eax [esi+38h] +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
cmp [ecx+38h] eax +
jz locret_104F836  +
mov edx [ecx+30h] +
cmp edx eax +
jz loc_104F821  +
push eax  +
push dword ptr [ecx+24h]  +
push dword ptr [ecx+1Ch]  +
call edx  +
retn   +
mov edx [ecx+28h] +
cmp edx eax +
jz locret_104F836  +
push eax  +
push dword ptr [ecx+24h]  +
push dword ptr [ecx+1Ch]  +
call edx  +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
xor eax eax +
cmp [ecx+38h] eax +
jz locret_104F869  +
mov edx [ecx+34h] +
cmp edx eax +
jz loc_104F854  +
push eax  +
push dword ptr [ecx+24h]  +
push dword ptr [ecx+1Ch]  +
call edx  +
retn   +
mov edx [ecx+2Ch] +
cmp edx eax +
jz locret_104F869  +
push eax  +
push dword ptr [ecx+24h]  +
push dword ptr [ecx+1Ch]  +
call edx  +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
xor eax eax +
cmp [ecx+4] eax +
jz locret_104F881  +
cmp [ecx+8] eax +
jz locret_104F881  +
cmp [ecx+0Ch] eax +
jz locret_104F881  +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call ds:CredUnmarshalCredentialW  +
mov esi eax +
test esi esi +
jz loc_104F8B4  +
xor eax eax +
cmp [ebp+arg_0] 1 +
setz al  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_104F8C3  +
push [ebp+var_4]  +
call ds:CredFree  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1Ch +
jnb loc_104F8DE  +
xor eax eax +
jmp loc_104F8EF  +
mov eax [ebp+arg_0] +
mov eax [eax] +
sub eax 0Dh +
jz loc_104F8EC  +
dec eax  +
dec eax  +
jnz loc_104F8DA  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+LsaHandle] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
lea eax [ebp+LsaHandle] +
push eax  +
call LsaConnectUntrusted  +
mov esi eax +
mov edi 10000000h +
or esi edi +
jge loc_104F942  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104F98C  +
test byte ptr [eax+1Ch] 4 +
jz loc_104F98C  +
push esi  +
push offset aLsaconnectuntr  +
push offset dword_100D414  +
push 27h  +
jmp loc_104F981  +
push [ebp+arg_0]  +
lea eax [ebp+PackageName] +
push eax  +
call ds:RtlInitString  +
push ebx  +
lea eax [ebp+PackageName] +
push eax  +
push [ebp+LsaHandle]  +
call LsaLookupAuthenticationPackage  +
mov esi eax +
or esi edi +
jge loc_104F98C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104F98C  +
test byte ptr [eax+1Ch] 4 +
jz loc_104F98C  +
push esi  +
push offset aLsalookupauthe  +
push offset dword_100D414  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+LsaHandle] 0 +
jz loc_104F99A  +
push [ebp+LsaHandle]  +
call LsaDeregisterLogonProcess  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_104F9BB  +
mov eax 80004003h +
jmp loc_104F9D0  +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx] +
test ecx ecx +
jz loc_104F9CE  +
lea eax [ecx+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
xor edi edi +
mov dword ptr [esi] offset off_100D558 +
mov dword ptr [esi+4] offset off_100D548 +
mov dword ptr [esi+18h] offset off_100D534 +
cmp eax edi +
jz loc_104FA05  +
push eax  +
call sub_105D688  +
mov [esi+1Ch] edi +
mov eax [esi+3Ch] +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov [esi+34h] edi +
mov [esi+38h] edi +
cmp eax edi +
jz loc_104FA2B  +
push eax  +
call ds:FreeLibrary  +
mov [esi+3Ch] edi +
or dword ptr [esi+0Ch] 4 +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
pop edi  +
mov dword ptr [esi+4] offset off_10025A4 +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_104FEB4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax-8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
or dword ptr [esi+0Ch] 2 +
push edi  +
call sub_104F75C  +
test eax eax +
jnz loc_104FAB1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104FAB1  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FAB1  +
push offset dword_100D414  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+arg_0] 0 +
jz loc_104FB4B  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_104FB4B  +
lea edi [ebx+0Fh] +
and edi 0FFFFFFF0h +
push edi  +
call sub_105D670  +
mov [esi+1Ch] eax +
test eax eax +
jnz loc_104FB09  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104FB02  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FB02  +
push offset aVoid  +
push offset dword_100D414  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 8007000Eh +
jmp loc_104FB4D  +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call memcpy  +
add esp 0Ch +
mov ecx esi +
mov [esi+20h] ebx +
mov [esi+24h] edi +
call sub_104F809  +
test eax eax +
jnz loc_104FB4B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104FB4B  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FB4B  +
push offset dword_100D414  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
mov esi ecx +
cmp edi ebx +
jz loc_104FC5F  +
cmp [ebp+0Ch] ebx +
jz loc_104FC5F  +
cmp [esi+4] ebx +
jz loc_104FC52  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_104FC52  +
cmp [esi+0Ch] ebx +
jz loc_104FC52  +
push eax  +
call sub_105D670  +
mov [edi] eax +
cmp eax ebx +
jnz loc_104FBD5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104FBCB  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FBCB  +
push offset aVoid  +
push offset dword_100D414  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 8007000Eh +
jmp loc_104FC88  +
lea edi [esi-18h] +
mov ecx edi +
call sub_104F83C  +
mov ebx offset lpReserved +
test eax eax +
jnz loc_104FC09  +
mov eax lpReserved +
cmp eax ebx +
jz loc_104FC09  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FC09  +
push offset dword_100D414  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push dword ptr [esi+8]  +
mov eax [ebp+8] +
push dword ptr [esi+4]  +
push dword ptr [eax]  +
call memcpy  +
mov eax [esi+8] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
add esp 0Ch +
mov ecx edi +
call sub_104F809  +
test eax eax +
jnz loc_104FC5B  +
mov eax lpReserved +
cmp eax ebx +
jz loc_104FC5B  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FC5B  +
push offset dword_100D414  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_104FC5B  +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
xor eax eax +
jmp loc_104FC88  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104FC83  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FC83  +
push offset dword_100D414  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+20h] 0 +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100D570 +
test eax eax +
jz loc_104FCC4  +
push eax  +
call ds:FreeLibrary  +
and dword ptr [esi+18h] 0 +
or dword ptr [esi+0Ch] 4 +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
mov dword ptr [esi+4] offset off_10025A4 +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_104FF10  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
or dword ptr [esi+8] 2 +
push offset aCredui_dll  +
call ds:LoadLibraryW  +
mov [esi+14h] eax +
test eax eax +
jz loc_104FD8A  +
mov edi ds:GetProcAddress +
push offset aCreduiprompt_0  +
push eax  +
call edi  +
mov [esi+18h] eax +
test eax eax +
jz loc_104FDAE  +
push offset aCredunpackauth  +
push dword ptr [esi+14h]  +
call edi  +
mov [esi+1Ch] eax +
mov ebx offset lpReserved +
test eax eax +
jnz loc_104FD61  +
mov eax lpReserved +
cmp eax ebx +
jz loc_104FD61  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FD61  +
push offset dword_100D414  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aCredpackauthen  +
push dword ptr [esi+14h]  +
call edi  +
mov [esi+20h] eax +
test eax eax +
jnz loc_104FDAE  +
mov eax lpReserved +
cmp eax ebx +
jz loc_104FDAE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FDAE  +
push offset dword_100D414  +
push 1Ch  +
jmp loc_104FDA3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_104FDAE  +
test byte ptr [eax+1Ch] 4 +
jz loc_104FDAE  +
push offset dword_100D414  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
cmp [esi+18h] eax +
jz loc_104FDC8  +
cmp [esi+20h] eax +
jz loc_104FDBF  +
cmp [esi+1Ch] eax +
jnz loc_104FDC8  +
mov [esi+18h] eax +
mov [esi+20h] eax +
mov [esi+1Ch] eax +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_104FDE6  +
mov eax 80004003h +
jmp loc_104FDF8  +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx] +
test ecx ecx +
jz loc_104FDF6  +
push ecx  +
call sub_101AEEB  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_100C344  +
push dword ptr [ebp+0Ch]  +
call sub_101C516  +
test eax eax +
jz loc_104FE27  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101CA72  +
jmp loc_104FE4F  +
push offset dword_100D404  +
push dword ptr [ebp+0Ch]  +
call sub_101C516  +
test eax eax +
jz loc_104FE53  +
mov eax [ebp+8] +
mov edx [ebp+10h] +
lea ecx [eax+18h] +
neg eax  +
sbb eax eax +
and eax ecx +
mov [edx] eax +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_104FE58  +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
push edi  +
push offset aCtscauthentica  +
mov esi ecx +
call sub_101CA2D  +
mov dword ptr [esi+18h] offset off_100D520 +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+3Ch] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov [esi+34h] edi +
mov [esi+38h] edi +
pop edi  +
mov dword ptr [esi] offset off_100D558 +
mov dword ptr [esi+4] offset off_100D548 +
mov dword ptr [esi+18h] offset off_100D534 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104F9D9  +
test byte ptr [ebp+8] 1 +
jz loc_104FECE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
push edi  +
push offset aCtsccredenti_0  +
mov esi ecx +
call sub_101CA2D  +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+24h] edi +
mov [esi+20h] edi +
pop edi  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100D570 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104FC94  +
test byte ptr [ebp+8] 1 +
jz loc_104FF2A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push edi  +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_0] +
lea ecx [eax+4] +
mov [ebp+var_14] ecx +
lea ecx [eax+104h] +
mov eax [eax] +
xor ebx ebx +
push 404h  +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_18] ecx +
mov [ebp+var_20] 14h +
mov [ebp+var_1C] eax +
call sub_105D670  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_104FF8C  +
mov [ebp+arg_1C] 8 +
jmp loc_104FFF6  +
push esi  +
push [ebp+arg_4]  +
mov esi 202h +
push esi  +
push eax  +
call sub_101BD65  +
cmp eax ebx +
jge loc_104FFFF  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_104FFCC  +
test byte ptr [ecx+1Ch] 4 +
jz loc_104FFCC  +
push eax  +
push offset aStringcchcopyF  +
push offset dword_100D414  +
push 21h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov [ebp+arg_1C] 57h +
push [ebp+arg_0]  +
call sub_105D688  +
test ebx ebx +
jz loc_104FFF5  +
mov eax [ebp+var_C] +
add eax eax +
mov ecx ebx +
jz loc_104FFEF  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_104FFE8  +
push ebx  +
call sub_105D688  +
pop esi  +
mov eax [ebp+arg_1C] +
pop edi  +
pop ebx  +
leave   +
retn 2Ch  +
mov edi 101h +
push esi  +
mov [ebp+var_C] edi +
call sub_105D670  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_105001E  +
mov [ebp+arg_1C] 8 +
jmp loc_104FFD3  +
cmp [ebp+arg_28] 2 +
jnz loc_1050028  +
or [ebp+arg_1C] 8 +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push edi  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
push eax  +
push eax  +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call ds:CredUIPromptForCredentialsW  +
mov [ebp+arg_1C] eax +
test eax eax +
jnz loc_104FFD3  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_102AAF4  +
test eax eax +
jge loc_1050092  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1050086  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1050086  +
push eax  +
push offset aStringcchlengt  +
push offset dword_100D414  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov [ebp+arg_1C] 0Dh +
jmp loc_104FFD3  +
inc [ebp+var_4]  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push ebx  +
call sub_102AAF4  +
test eax eax +
jge loc_10500C7  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1050086  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1050086  +
push eax  +
push offset aStringcchlengt  +
push offset dword_100D414  +
push 23h  +
jmp loc_105007B  +
mov ecx [ebp+arg_8] +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
mov [ecx] esi +
mov ecx [ebp+arg_C] +
mov [ecx] edx +
mov ecx [ebp+arg_10] +
mov [ecx] ebx +
mov ecx [ebp+arg_14] +
inc eax  +
mov [ecx] eax +
mov eax [ebp+arg_24] +
and dword ptr [eax] 0 +
push esi  +
call sub_104F887  +
mov ecx [ebp+arg_20] +
mov [ecx] eax +
jmp loc_104FFF5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_24] ebx +
cmp [ebp+arg_4] ebx +
jz loc_105034A  +
mov ecx [ebp+arg_C] +
cmp ecx ebx +
jz loc_105034A  +
mov edi [ebp+arg_14] +
cmp edi ebx +
jz loc_105034A  +
mov esi [ebp+arg_10] +
cmp esi ebx +
jz loc_105034A  +
mov edx [ebp+arg_18] +
cmp edx ebx +
jz loc_105034A  +
mov eax [ebp+arg_1C] +
cmp eax ebx +
jz loc_105034A  +
mov [ecx] ebx +
mov [esi] ebx +
mov [edi] ebx +
mov [edx] ebx +
mov [eax] ebx +
mov eax [ebp+var_1C] +
cmp [eax+20h] ebx +
jnz loc_1050178  +
mov edi 139Fh +
jmp loc_10503A0  +
mov esi 202h +
mov edi 101h +
push esi  +
mov [ebp+var_20] 1 +
mov [ebp+var_14] edi +
call sub_105D670  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_10501A1  +
push 8  +
pop edi  +
jmp loc_1050375  +
push 404h  +
mov [ebp+var_18] esi +
call sub_105D670  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_1050199  +
lea ecx [ebp+var_C] +
push ecx  +
push [ebp+var_4]  +
lea ecx [ebp+var_8] +
push ebx  +
push ebx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov [ebp+var_8] esi +
push [ebp+arg_4]  +
mov esi [ebp+var_1C] +
mov [ebp+var_C] edi +
push 1  +
jmp loc_1050269  +
call ds:GetLastError  +
mov edi eax +
cmp edi 307h +
jnz loc_10501F5  +
mov [ebp+var_24] 1 +
mov [ebp+var_20] ebx +
jmp loc_1050250  +
cmp edi 7Ah +
jnz loc_1050371  +
mov eax [ebp+var_18] +
cmp [ebp+var_8] eax +
jbe loc_1050227  +
push [ebp+var_10]  +
call sub_105D688  +
mov eax [ebp+var_8] +
mov [ebp+var_18] eax +
add eax eax +
push eax  +
call sub_105D670  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_1050199  +
mov eax [ebp+var_14] +
cmp [ebp+var_C] eax +
jbe loc_1050250  +
push [ebp+var_4]  +
call sub_105D688  +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
add eax eax +
push eax  +
call sub_105D670  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1050199  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
lea eax [ebp+var_8] +
push ebx  +
push ebx  +
push eax  +
push [ebp+var_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_20]  +
call dword ptr [esi+20h]  +
test eax eax +
jz loc_10501D9  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_18]  +
push [ebp+var_10]  +
call sub_102AAF4  +
cmp eax ebx +
jge loc_10502BA  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10502B3  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10502B3  +
push eax  +
push offset aStringcchlengt  +
push offset dword_100D414  +
push 25h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
push 0Dh  +
jmp loc_105019B  +
mov esi [ebp+var_24] +
inc [ebp+var_8]  +
cmp esi ebx +
jz loc_10502EA  +
cmp [ebp+arg_0] ebx +
jnz loc_10502EA  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_4] +
add eax eax +
cmp eax ebx +
jz loc_10502DB  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_10502D5  +
push [ebp+var_4]  +
call sub_105D688  +
mov [ebp+var_4] ebx +
xor eax eax +
jmp loc_1050324  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_14]  +
push [ebp+var_4]  +
call sub_102AAF4  +
cmp eax ebx +
jge loc_1050320  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10502B3  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10502B3  +
push eax  +
push offset aStringcchlengt  +
push offset dword_100D414  +
push 26h  +
jmp loc_10502A8  +
mov eax [ebp+var_C] +
inc eax  +
mov ecx [ebp+arg_C] +
mov edx [ebp+var_10] +
mov [ecx] edx +
mov ecx [ebp+arg_10] +
mov edx [ebp+var_8] +
mov [ecx] edx +
mov ecx [ebp+arg_14] +
mov edx [ebp+var_4] +
mov [ecx] edx +
mov ecx [ebp+arg_18] +
mov [ecx] eax +
mov eax [ebp+arg_1C] +
xor edi edi +
mov [eax] esi +
jmp loc_10503A0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105036E  +
test byte ptr [eax+1Ch] 4 +
jz loc_105036E  +
push offset dword_100D414  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 57h  +
pop edi  +
cmp edi ebx +
jz loc_10503A0  +
mov ecx [ebp+var_4] +
cmp ecx ebx +
jz loc_1050393  +
mov eax [ebp+var_C] +
add eax eax +
cmp eax ebx +
jz loc_105038B  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1050385  +
push [ebp+var_4]  +
call sub_105D688  +
cmp [ebp+var_10] ebx +
jz loc_10503A0  +
push [ebp+var_10]  +
call sub_105D688  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 40h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10503CD  +
mov ecx eax +
call sub_104FE61  +
jmp loc_10503CF  +
xor eax eax +
push esi  +
push edi  +
push eax  +
lea ecx [ebp+var_4] +
call sub_1056507  +
mov edi [ebp+var_4] +
test edi edi +
jz loc_1050452  +
push [ebp+arg_4]  +
mov ecx edi +
push [ebp+arg_0]  +
call sub_104FA76  +
mov esi eax +
test esi esi +
jge loc_1050420  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105047B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105047B  +
push esi  +
push offset aFailedToInit_4  +
push offset dword_100D414  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105047B  +
push [ebp+arg_8]  +
lea ecx [ebp+var_4] +
call sub_104F9A8  +
mov esi eax +
test esi esi +
jge loc_105047B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105047B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105047B  +
push esi  +
push offset aCopytoPpcreden  +
push offset dword_100D414  +
push 10h  +
jmp loc_1050413  +
mov esi 8007000Eh +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050488  +
test byte ptr [eax+1Ch] 4 +
jz loc_1050488  +
push offset dword_100D414  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
test edi edi +
jz loc_1050488  +
lea eax [edi+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
lea edi [ebp+var_24] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_C] +
xor esi esi +
test [ebp+arg_30] 1 +
mov [eax] esi +
mov eax [ebp+arg_10] +
mov [eax] esi +
mov eax [ebp+arg_14] +
mov [eax] esi +
mov eax [ebp+arg_18] +
mov [eax] esi +
mov eax [ebp+arg_24] +
mov [eax] esi +
mov eax [ebp+arg_0] +
mov ebx ecx +
lea ecx [eax+1104h] +
mov [ebp+var_1C] ecx +
lea ecx [eax+1204h] +
mov eax [eax] +
mov [ebp+pv] esi +
mov [ebp+var_10] esi +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
mov [ebp+var_14] esi +
mov [ebp+var_20] ecx +
mov [ebp+var_28] 14h +
mov [ebp+var_24] eax +
jz loc_1050528  +
push 28h  +
pop eax  +
push eax  +
mov [ebp+var_8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_4] eax +
cmp eax esi +
jz loc_1050559  +
push [ebp+var_8]  +
push esi  +
push eax  +
call memset  +
mov eax [ebp+var_4] +
add esp 0Ch +
mov dword ptr [eax] 0Dh +
jmp loc_105057D  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
mov edi offset word_1002174 +
push edi  +
push [ebp+arg_8]  +
push esi  +
call dword ptr [ebx+24h]  +
test eax eax +
jnz loc_105057D  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_105057D  +
push [ebp+var_8]  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_4] eax +
cmp eax esi +
jnz loc_105055D  +
push 8  +
jmp loc_10505C5  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
push edi  +
push [ebp+arg_8]  +
push esi  +
call dword ptr [ebx+24h]  +
test eax eax +
jnz loc_105057D  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
test [ebp+arg_30] 2 +
jz loc_10505CF  +
lea eax [ebp+var_14] +
push eax  +
push offset aNtlm  +
mov ecx ebx +
call sub_104F8F8  +
cmp eax esi +
jge loc_10505CB  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10505C3  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10505C3  +
push eax  +
push offset aGetauthenticat  +
push offset dword_100D414  +
push 1Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
push 5  +
pop edi  +
jmp loc_105067B  +
or [ebp+arg_20] 10h +
push [ebp+arg_20]  +
lea eax [ebp+var_10] +
push [ebp+arg_1C]  +
push eax  +
lea eax [ebp+pv] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_14] +
push [ebp+var_4]  +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_28] +
push eax  +
call dword ptr [ebx+1Ch]  +
mov edi eax +
cmp edi esi +
jnz loc_105067B  +
push [ebp+var_10]  +
mov ecx ebx +
push [ebp+pv]  +
call sub_104F8CF  +
push [ebp+arg_2C]  +
mov ecx [ebp+arg_28] +
push [ebp+arg_18]  +
mov [ecx] eax +
push [ebp+arg_14]  +
mov eax dword ptr [ebp+arg_30] +
push [ebp+arg_10]  +
and eax 4 +
push [ebp+arg_C]  +
mov ecx ebx +
push [ebp+var_10]  +
push [ebp+pv]  +
push eax  +
call sub_10500FD  +
mov edi eax +
cmp edi esi +
jnz loc_105067B  +
push [ebp+arg_24]  +
push [ebp+var_10]  +
push [ebp+pv]  +
call sub_10503AE  +
mov ebx eax +
cmp ebx esi +
jge loc_10506B1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050674  +
test byte ptr [eax+1Ch] 4 +
jz loc_1050674  +
push ebx  +
push offset aCtscauthenti_0  +
push offset dword_100D414  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
movzx edi bx +
cmp edi esi +
jz loc_10506B1  +
mov ebx [ebp+arg_24] +
mov eax [ebx] +
cmp eax esi +
jz loc_105068F  +
add eax 18h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebx] esi +
mov ebx [ebp+arg_C] +
mov eax [ebx] +
cmp eax esi +
jz loc_10506A0  +
push eax  +
call sub_105D688  +
mov [ebx] esi +
mov ebx [ebp+arg_14] +
mov eax [ebx] +
cmp eax esi +
jz loc_10506B1  +
push eax  +
call sub_105D688  +
mov [ebx] esi +
cmp [ebp+var_4] esi +
jz loc_10506BF  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+pv] esi +
jz loc_10506CD  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 34h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 28h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10506FA  +
mov ecx eax +
call sub_104FEDA  +
jmp loc_10506FC  +
xor eax eax +
push esi  +
push edi  +
push eax  +
lea ecx [ebp+var_4] +
call sub_101C97A  +
mov edi [ebp+var_4] +
test edi edi +
jz loc_105077A  +
lea ecx [edi+4] +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov esi eax +
test esi esi +
jge loc_1050748  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10507A3  +
test byte ptr [eax+1Ch] 4 +
jz loc_10507A3  +
push esi  +
push offset aFailedToInit_5  +
push offset dword_100D414  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10507A3  +
push [ebp+arg_0]  +
lea ecx [ebp+var_4] +
call sub_104FDD3  +
mov esi eax +
test esi esi +
jge loc_10507A3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10507A3  +
test byte ptr [eax+1Ch] 4 +
jz loc_10507A3  +
push esi  +
push offset aCopytoPpcreden  +
push offset dword_100D414  +
push 18h  +
jmp loc_105073B  +
mov esi 8007000Eh +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10507AD  +
test byte ptr [eax+1Ch] 4 +
jz loc_10507AD  +
push offset dword_100D414  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
test edi edi +
jz loc_10507AD  +
push edi  +
call sub_1018A83  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
cmp [ebp+arg_0] eax +
jz loc_1050868  +
cmp [ebp+arg_C] eax +
jz loc_1050868  +
cmp [ebp+arg_2C] eax +
jz loc_1050868  +
mov ecx [ebp+arg_10] +
cmp ecx eax +
jz loc_1050868  +
cmp [ebp+arg_18] eax +
jz loc_1050868  +
mov ebx [ebp+arg_14] +
cmp ebx eax +
jz loc_1050868  +
mov edi [ebp+arg_1C] +
cmp edi eax +
jz loc_1050868  +
mov esi [ebp+arg_30] +
cmp esi eax +
jz loc_1050868  +
mov edx [ebp+arg_34] +
cmp edx eax +
jz loc_1050868  +
push [ebp+arg_38]  +
mov [ecx] eax +
mov ecx [ebp+arg_18] +
mov [ebx] eax +
mov [ecx] eax +
mov ecx [ebp+arg_2C] +
mov [edi] eax +
mov [ecx] eax +
mov ecx [ebp+var_4] +
mov [esi] eax +
mov [edx] eax +
push edx  +
push esi  +
cmp [ecx+1Ch] eax +
jz loc_105084D  +
push [ebp+arg_2C]  +
push [ebp+arg_28]  +
push [ebp+arg_20]  +
push edi  +
push [ebp+arg_18]  +
push ebx  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1050495  +
jmp loc_105088F  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push edi  +
push [ebp+arg_18]  +
push ebx  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_104FF36  +
jmp loc_105088F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105088C  +
test byte ptr [eax+1Ch] 4 +
jz loc_105088C  +
push offset dword_100D414  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 3Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_10508ED  +
cmp word ptr [edx] 0 +
jnz loc_10508D1  +
mov [ebp+arg_18] 0Eh +
jmp loc_10508F4  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10508D6  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_10508F4  +
mov [ebp+arg_18] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_105090A  +
cmp word ptr [edx] 0 +
jnz loc_105090C  +
mov edx offset aNull +
jmp loc_105090C  +
mov edx ebx +
mov edi [ebp+arg_14] +
test edi edi +
jz loc_1050936  +
cmp word ptr [edi] 0 +
jnz loc_105091D  +
push 0Eh  +
jmp loc_1050938  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1050922  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_1050939  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_105094E  +
cmp word ptr [edi] 0 +
jnz loc_105094A  +
mov eax offset aNull +
jmp loc_1050950  +
mov eax edi +
jmp loc_1050950  +
mov eax ebx +
push 0  +
push [ebp+arg_18]  +
push edx  +
push ecx  +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_8] +
push esi  +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1052628  +
test eax eax +
jnz loc_10509D5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10509CB  +
test byte ptr [eax+1Ch] 2 +
jz loc_10509CB  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset dword_100D858  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
and dword ptr [edi] 0 +
and dword ptr [esi] 0 +
xor eax eax +
jmp loc_10509D8  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1052797  +
test eax eax +
jnz loc_1050A2D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050A28  +
test byte ptr [eax+1Ch] 2 +
jz loc_1050A28  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset dword_100D858  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
mov eax [ebp+arg_8] +
jmp loc_1050A30  +
mov eax [ebp+arg_C] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1052398  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_8] esi +
jz loc_1050A76  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1050A76  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1052274  +
test eax eax +
jnz loc_1050AB4  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105285C  +
test eax eax +
jnz loc_1050AB4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050AB7  +
test byte ptr [eax+1Ch] 2 +
jz loc_1050AB7  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset dword_100D858  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
jmp loc_1050AB7  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi [ebp+arg_8] +
jnz loc_1050AE3  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1052274  +
test eax eax +
jnz loc_1050B20  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10528C6  +
test eax eax +
jnz loc_1050B20  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050B23  +
test byte ptr [eax+1Ch] 2 +
jz loc_1050B23  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push edi  +
push offset dword_100D858  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10508B3  +
jmp loc_1050B23  +
xor edi edi +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
xor edi edi +
cmp word ptr [esi] 5Bh +
jnz loc_1050B70  +
inc edi  +
add esi 2 +
jmp loc_1050B70  +
push eax  +
push offset a_1234567890abc  +
call wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1050B8B  +
movzx eax word ptr [esi] +
cmp ax 3Ah +
jnz loc_1050B68  +
inc ebx  +
jmp loc_1050B6E  +
cmp ax 5Dh +
jz loc_1050B8F  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1050B4B  +
xor eax eax +
test edi edi +
jnz loc_1050B84  +
cmp ebx 1 +
setnle al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1050B84  +
xor eax eax +
test edi edi +
jnz loc_1050B7E  +
jmp loc_1050B84  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+ppv] 0 +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1050BD9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050BD2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1050BD2  +
push offset dword_100D858  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
jmp loc_1050CDF  +
mov ecx [ebp+arg_C] +
test ecx ecx +
jnz loc_1050BFB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050BD2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1050BD2  +
push offset dword_100D858  +
push 23h  +
jmp loc_1050BC7  +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_1050CA0  +
cmp [ecx] eax +
jnz loc_1050C74  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100C470  +
push 1  +
push 0  +
push offset stru_100C490  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_1050C45  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push esi  +
push offset dword_100D86C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppv] 0 +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
test edi edi +
jge loc_1050C9A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050CD7  +
test byte ptr [eax+1Ch] 4 +
jz loc_1050CD7  +
push edi  +
push offset dword_100D858  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_1050CD2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050CD7  +
test byte ptr [eax+1Ch] 2 +
jz loc_1050CD7  +
push offset dword_100D858  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1050CD7  +
mov eax [esi] +
test eax eax +
jz loc_1050CDB  +
push [ebp+arg_4]  +
mov ecx [eax] +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jge loc_1050CDB  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1050CD7  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1050CD7  +
push eax  +
push offset dword_100D858  +
push 26h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
xor eax eax +
jmp loc_1050CDE  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
and [ebp+mi.cbSize] 0 +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
and [esi] eax +
lea edi [ebp+mi.rcMonitor] +
push 2  +
push [ebp+hwnd]  +
stos   +
mov edi [ebp+arg_8] +
and [edi] eax +
call ds:MonitorFromWindow  +
test eax eax +
jz loc_1050D36  +
lea ecx [ebp+mi] +
push ecx  +
push eax  +
mov [ebp+mi.cbSize] 28h +
call ds:GetMonitorInfoW  +
mov eax [ebp+mi.rcMonitor.left] +
mov [esi] eax +
mov eax [ebp+mi.rcMonitor.top] +
mov [edi] eax +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov [ebp+xLeft] eax +
mov eax [esi+4] +
mov [ebp-0Ch] eax +
mov eax [esi+8] +
mov [ebp+xRight] eax +
mov eax [esi+0Ch] +
push edi  +
mov edi ds:ScreenToClient +
mov [ebp+yBottom] eax +
lea eax [ebp+xLeft] +
push eax  +
push [ebp+hWnd]  +
call edi  +
lea eax [ebp+xRight] +
push eax  +
push [ebp+hWnd]  +
call edi  +
push [ebp+yBottom]  +
push [ebp+xRight]  +
push dword ptr [ebp-0Ch]  +
push [ebp+xLeft]  +
push esi  +
call ds:SetRect  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp+rcSrc.top] +
mov [ebp+rcSrc.left] 28h +
stos   +
xor edi edi +
cmp ebx edi +
jz loc_1050E0C  +
push esi  +
mov esi ds:GetSystemMetrics +
push 1  +
call esi  +
push eax  +
push edi  +
call esi  +
push eax  +
push edi  +
push edi  +
push ebx  +
call ds:SetRect  +
push 50h  +
call esi  +
cmp eax 1 +
pop esi  +
jle loc_1050E0C  +
push edi  +
push [ebp+hwnd]  +
call ds:MonitorFromWindow  +
cmp eax edi +
jz loc_1050E0C  +
lea ecx [ebp+rcSrc] +
push ecx  +
push eax  +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_1050E0C  +
lea eax [ebp+rcSrc.top] +
push eax  +
push ebx  +
call ds:CopyRect  +
xor eax eax +
cmp ebx edi +
pop edi  +
setnz al  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
and [ebp+var_4] 0 +
push edi  +
push [ebp+arg_0]  +
call ds:CreateCompatibleDC  +
mov edi eax +
mov [ebp+var_8] edi +
test edi edi +
jz loc_1050EE8  +
push ebx  +
mov ebx ds:SelectObject +
push esi  +
push [ebp+arg_4]  +
push edi  +
call ebx  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_408] +
push eax  +
mov esi 100h +
push esi  +
push 0  +
push edi  +
call ds:GetDIBColorTable  +
cmp eax esi +
jnz loc_1050ECF  +
push 2000h  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_1050ECF  +
mov eax 300h +
mov [edi] ax +
mov eax esi +
mov [edi+2] ax +
xor ecx ecx +
lea eax [edi+5] +
mov dl [ebp+ecx*4+var_408.rgbRed] +
mov [eax-1] dl +
mov dl [ebp+ecx*4+var_408.rgbGreen] +
mov [eax] dl +
mov dl [ebp+ecx*4+var_408.rgbBlue] +
mov [eax+1] dl +
mov byte ptr [eax+2] 0 +
inc ecx  +
add eax 4 +
cmp ecx esi +
jl loc_1050E95  +
push edi  +
call ds:CreatePalette  +
push edi  +
mov [ebp+var_4] eax +
call ds:LocalFree  +
cmp [ebp+arg_0] 0 +
jz loc_1050EDD  +
push [ebp+arg_0]  +
push [ebp+var_8]  +
call ebx  +
push [ebp+var_8]  +
call ds:DeleteDC  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jnz loc_1050F6F  +
call ds:GetLastError  +
test eax eax +
jle loc_1050F3A  +
and eax 0FFFFh +
or eax 80070000h +
xor esi esi +
mov ecx eax +
inc esi  +
test ecx ecx +
jge loc_1050F6F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1050F87  +
test byte ptr [eax+1Ch] 4 +
jz loc_1050F87  +
push ecx  +
push offset aGetversionexFa  +
push offset dword_100D858  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1050F87  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
jnb loc_1050F7C  +
xor esi esi +
jmp loc_1050F87  +
xor eax eax +
cmp [ebp+var_6] 1 +
setz al  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_1050FE2  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1050FE2  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_1050FE2  +
xor eax eax +
inc eax  +
jmp loc_1050FE4  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10510FC  +
cmp [esi] edi +
jz loc_10510FC  +
cmp [esi+4] edi +
jz loc_10510FC  +
cmp [ebp+arg_4] edi +
jz loc_10510FC  +
push offset aCrypt32_dll  +
call ds:LoadLibraryW  +
mov ebx eax +
cmp ebx edi +
jz loc_10510CA  +
push offset aCryptprotectda  +
push ebx  +
call ds:GetProcAddress  +
cmp eax edi +
jz loc_105108F  +
push [ebp+arg_4]  +
push 1  +
push edi  +
push edi  +
push edi  +
push offset aPsw  +
push esi  +
call eax  +
test eax eax +
jz loc_1051060  +
inc edi  +
jmp loc_10510BF  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10510BF  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10510BF  +
push eax  +
push offset dword_100D858  +
push 30h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_10510BF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10510BF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10510BF  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100D858  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push ebx  +
call ds:FreeLibrary  +
mov eax edi +
jmp loc_1051122  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051120  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051120  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100D858  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1051120  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051120  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051120  +
push offset dword_100D858  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_1051231  +
cmp [edi] esi +
jz loc_1051231  +
cmp [edi+4] esi +
jz loc_1051231  +
cmp [ebp+arg_4] esi +
jz loc_1051231  +
push offset aCrypt32_dll  +
call ds:LoadLibraryW  +
mov ebx eax +
cmp ebx esi +
jz loc_10511FF  +
push offset aCryptunprote_0  +
push ebx  +
call ds:GetProcAddress  +
cmp eax esi +
jz loc_10511C4  +
push [ebp+arg_4]  +
push 1  +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
call eax  +
test eax eax +
jz loc_1051195  +
inc esi  +
jmp loc_10511F4  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10511F4  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10511F4  +
push eax  +
push offset dword_100D858  +
push 34h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_10511F4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10511F4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10511F4  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100D858  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push ebx  +
call ds:FreeLibrary  +
mov eax esi +
jmp loc_1051257  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051255  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051255  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100D858  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1051255  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051255  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051255  +
push offset dword_100D858  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov eax [esi] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_C] +
cmp eax ebx +
jz loc_1051283  +
push eax  +
call sub_105D688  +
mov [esi] ebx +
mov [edi] ebx +
cmp [ebp+arg_0] ebx +
jz loc_10512DD  +
mov ebx [ebp+uBytes] +
test ebx ebx +
jz loc_10512DD  +
push ebx  +
call sub_105D670  +
mov [esi] eax +
test eax eax +
jnz loc_10512CB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10512C4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10512C4  +
push offset aPpboutblob  +
push offset dword_100D858  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 8007000Eh +
jmp loc_10512E5  +
push ebx  +
push [ebp+arg_0]  +
mov [edi] ebx +
push dword ptr [esi]  +
call memcpy  +
add esp 0Ch +
jmp loc_10512E3  +
and dword ptr [esi] 0 +
and dword ptr [edi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp edi ebx +
jz loc_105132E  +
cmp [edi] bx +
jz loc_1051328  +
push esi  +
mov esi edi +
movzx eax word ptr [esi] +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jnz loc_105131F  +
mov ax [esi] +
mov [edi+ebx*2] ax +
inc ebx  +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jnz loc_1051309  +
pop esi  +
xor eax eax +
mov [edi+ebx*2] ax +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov edx [ebp+arg_8] +
mov ebx [ebp+arg_C] +
push edi  +
push 8  +
pop ecx  +
mov esi offset a0123456789abcd +
lea edi [ebp+var_28] +
movs   +
movs   +
mov esi [ebp+arg_4] +
xor eax eax +
mov [ebp+var_2C] eax +
test esi esi +
jz loc_10513ED  +
test ebx ebx +
jz loc_10513ED  +
test edx edx +
jnz loc_1051385  +
mov eax [ebp+arg_0] +
lea eax [eax+eax+3] +
mov [ebx] eax +
xor eax eax +
inc eax  +
jmp loc_10513EF  +
cmp [ebp+arg_0] eax +
jbe loc_10513C3  +
mov ecx [ebx] +
sub ecx 3 +
cmp eax ecx +
ja loc_10513C3  +
mov ecx [ebp+var_2C] +
add ecx esi +
movzx edi byte ptr [ecx] +
shr edi 4 +
mov di word ptr [ebp+edi*2+var_28] +
mov [edx+eax*2] di +
movzx ecx byte ptr [ecx] +
and ecx 0Fh +
mov cx word ptr [ebp+ecx*2+var_28] +
inc eax  +
mov [edx+eax*2] cx +
inc eax  +
inc [ebp+var_2C]  +
mov ecx [ebp+var_2C] +
cmp ecx [ebp+arg_0] +
jb loc_105138A  +
mov ecx [ebx] +
sub ecx 3 +
cmp eax ecx +
ja loc_10513E4  +
push 30h  +
pop ecx  +
mov [edx+eax*2] cx +
mov [edx+eax*2+2] cx +
xor ecx ecx +
mov [edx+eax*2+4] cx +
add eax 3 +
jmp loc_105137E  +
xor ecx ecx +
mov [edx+eax*2] cx +
inc eax  +
mov [ebx] eax +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor eax eax +
xor edi edi +
xor ebx ebx +
cmp esi eax +
jz loc_1051530  +
cmp [ebp+arg_C] eax +
jz loc_1051530  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_105142C  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax [ebp+arg_0] +
cmp ecx eax +
jnz loc_1051537  +
cmp eax 2 +
jb loc_1051537  +
cmp [ebp+arg_8] ebx +
jnz loc_1051476  +
cmp word ptr [esi+eax*2-4] 30h +
jnz loc_1051469  +
cmp word ptr [esi+eax*2-2] 30h +
jnz loc_1051469  +
shr eax 1 +
jmp loc_105146C  +
shr eax 1 +
inc eax  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
jmp loc_105152D  +
mov ecx [ebp+arg_C] +
mov ecx [ecx] +
dec ecx  +
jz loc_1051520  +
add eax 0FFFFFFFEh +
mov [ebp+arg_4] eax +
cmp ebx [ebp+arg_4] +
ja loc_1051520  +
movzx eax word ptr [esi+ebx*2] +
push eax  +
call toupper  +
movzx eax ax +
inc ebx  +
pop ecx  +
cmp ax 41h +
jb loc_10514AC  +
cmp ax 46h +
jbe loc_10514BC  +
cmp ax 30h +
jb loc_1051537  +
cmp ax 39h +
ja loc_1051537  +
cmp ax 41h +
movzx eax ax +
jb loc_10514CA  +
sub eax 37h +
jmp loc_10514CD  +
sub eax 30h +
mov ecx [ebp+arg_8] +
shl al 4 +
mov [edi+ecx] al +
movzx eax word ptr [esi+ebx*2] +
push eax  +
call toupper  +
movzx eax ax +
inc ebx  +
pop ecx  +
cmp ax 41h +
jb loc_10514F1  +
cmp ax 46h +
jbe loc_10514FA  +
lea ecx [eax-30h] +
cmp cx 9 +
ja loc_1051537  +
cmp ax 41h +
movzx eax ax +
jb loc_1051508  +
sub eax 37h +
jmp loc_105150B  +
sub eax 30h +
mov ecx [ebp+arg_8] +
or [edi+ecx] al +
mov eax [ebp+arg_C] +
mov eax [eax] +
inc edi  +
dec eax  +
cmp edi eax +
jb loc_1051488  +
mov eax [ebp+arg_8] +
mov byte ptr [edi+eax] 0 +
mov eax [ebp+arg_C] +
inc edi  +
mov [eax] edi +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
xor eax eax +
jmp loc_1051530  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_8] +
xor eax eax +
push ebx  +
mov [ecx] eax +
mov ecx [ebp+arg_C] +
push esi  +
mov esi ds:CryptBinaryToStringW +
mov [ecx] eax +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push 1  +
push [ebp+arg_4]  +
mov ebx 80004005h +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
call esi  +
test eax eax +
jnz loc_10515AC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105166D  +
test byte ptr [eax+1Ch] 4 +
jz loc_105166D  +
push ebx  +
push offset aCryptbinarytos  +
push offset dword_100D858  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105166D  +
mov eax [ebp+var_4] +
push edi  +
add eax eax +
push eax  +
call sub_105D670  +
mov edi eax +
test edi edi +
jnz loc_10515EE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10515E7  +
test byte ptr [eax+1Ch] 4 +
jz loc_10515E7  +
push offset aSzencoded  +
push offset dword_100D858  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ebx 8007000Eh +
jmp loc_1051662  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jnz loc_105162D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051662  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051662  +
push ebx  +
push offset aCryptbinarytos  +
push offset dword_100D858  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1051662  +
xor ebx ebx +
xor ecx ecx +
cmp [ebp+var_4] ebx +
jbe loc_1051653  +
movzx eax word ptr [edi+ecx*2] +
cmp ax 0Dh +
jz loc_1051646  +
cmp ax 0Ah +
jnz loc_105164D  +
push 20h  +
pop eax  +
mov [edi+ecx*2] ax +
inc ecx  +
cmp ecx [ebp+var_4] +
jb loc_1051636  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_4] +
mov [eax] edi +
mov eax [ebp+arg_C] +
xor edi edi +
mov [eax] ecx +
test edi edi +
jz loc_105166C  +
push edi  +
call sub_105D688  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi ds:CryptStringToBinaryW +
xor esi esi +
push esi  +
push esi  +
mov [ebx] esi +
mov [eax] esi +
lea eax [ebp+uBytes] +
push eax  +
push esi  +
push 1  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_8] 80004005h +
mov [ebp+uBytes] esi +
call edi  +
test eax eax +
jnz loc_10516EE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051792  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051792  +
push 80004005h  +
push offset aCryptstringtob  +
push offset dword_100D858  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1051792  +
push [ebp+uBytes]  +
call sub_105D670  +
mov [ebp+arg_4] eax +
cmp eax esi +
jnz loc_105172F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051726  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051726  +
push offset aPbbinary  +
push offset dword_100D858  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_8] 8007000Eh +
jmp loc_1051785  +
push esi  +
push esi  +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
push 1  +
push esi  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jnz loc_1051772  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051785  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051785  +
push 80004005h  +
push offset aCryptstringtob  +
push offset dword_100D858  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1051785  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ebx] eax +
mov eax [ebp+uBytes] +
mov [ebp+arg_4] esi +
mov [ecx] eax +
mov [ebp+var_8] esi +
cmp [ebp+arg_4] esi +
jz loc_1051792  +
push [ebp+arg_4]  +
call sub_105D688  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
xor edi edi +
push edi  +
push edi  +
push [ebp+arg_4]  +
mov [ebp+var_4] edi +
push [ebp+arg_10]  +
push [ebp+arg_0]  +
call sub_1051F58  +
mov [ebp+var_8] eax +
cmp eax edi +
jnz loc_10517FE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10518A2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10518A2  +
push offset dword_100D858  +
push 4Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_10518A2  +
push esi  +
mov esi [ebp+var_4] +
cmp esi edi +
jnz loc_105180E  +
mov [ebp+var_8] edi +
jmp loc_10518A1  +
add esi 2 +
push esi  +
call sub_105D670  +
mov edi eax +
test edi edi +
jnz loc_105183B  +
and [ebp+var_8] eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051897  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051897  +
push offset dword_100D858  +
push 4Bh  +
jmp loc_1051873  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push esi  +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_10]  +
push [ebp+arg_0]  +
call sub_1051F58  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1051880  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051897  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051897  +
push offset dword_100D858  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1051897  +
mov eax [ebp+arg_8] +
mov [eax] edi +
mov eax [ebp+var_4] +
shr eax 1 +
xor ecx ecx +
mov [edi+eax*2] cx +
mov eax [ebp+arg_C] +
xor edi edi +
mov [eax] esi +
test edi edi +
jz loc_10518A1  +
push edi  +
call sub_105D688  +
pop esi  +
mov eax [ebp+var_8] +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_14]  +
mov esi [ebp+arg_C] +
push [ebp+arg_10]  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1052563  +
test eax eax +
jnz loc_1051911  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10518F8  +
test byte ptr [eax+1Ch] 2 +
jz loc_10518F8  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset dword_100D858  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
cmp [ebp+arg_8] 0 +
jz loc_105190C  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push esi  +
call sub_1042FAE  +
jmp loc_1051911  +
xor eax eax +
mov [esi] ax +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1051A5B  +
cmp [esi] di +
jz loc_1051A5B  +
push esi  +
call sub_1050B30  +
movzx ecx word ptr [esi] +
cmp cx di +
jz loc_1051A24  +
push 2  +
pop ebx  +
cmp cx 3Bh +
jz loc_1051A5B  +
cmp cx 22h +
jz loc_1051A5B  +
cmp cx 3Ch +
jz loc_1051A5B  +
cmp cx 3Eh +
jz loc_1051A5B  +
cmp cx 2Ah +
jz loc_1051A5B  +
cmp cx 2Bh +
jz loc_1051A5B  +
cmp cx 3Dh +
jz loc_1051A5B  +
cmp cx 7Ch +
jz loc_1051A5B  +
cmp cx 3Fh +
jz loc_1051A5B  +
cmp cx 2Ch +
jz loc_1051A5B  +
cmp cx 20h +
jz loc_1051A5B  +
cmp cx 9 +
jz loc_1051A5B  +
cmp cx 3Ah +
jnz loc_1051A0C  +
cmp eax edi +
jnz loc_1051A16  +
cmp [ebp+arg_4] edi +
jz loc_1051A5B  +
add esi ebx +
movzx eax word ptr [esi] +
mov edi esi +
test ax ax +
jz loc_1051A5B  +
movzx eax ax +
push eax  +
call iswdigit  +
add esi ebx +
pop ecx  +
test eax eax +
jz loc_1051A5B  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_10519E5  +
sub esi edi +
and esi 0FFFFFFFEh +
xor eax eax +
cmp esi 0Ah +
setle al  +
jmp loc_1051A5D  +
cmp eax edi +
jz loc_1051A16  +
cmp cx 5Dh +
jz loc_1051A29  +
add esi ebx +
movzx ecx word ptr [esi] +
cmp cx di +
jnz loc_105194E  +
xor eax eax +
inc eax  +
jmp loc_1051A5D  +
add esi ebx +
cmp [esi] di +
jz loc_1051A24  +
cmp [ebp+arg_4] edi +
jz loc_1051A5B  +
add esi ebx +
movzx eax word ptr [esi] +
mov edi esi +
test ax ax +
jz loc_1051A5B  +
movzx eax ax +
push eax  +
call iswdigit  +
add esi ebx +
pop ecx  +
test eax eax +
jz loc_1051A5B  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1051A41  +
jmp loc_10519FD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 1  +
push esi  +
call sub_105191B  +
test eax eax +
jz loc_1051AD0  +
push esi  +
call sub_1050B30  +
test eax eax +
jz loc_1051AB1  +
cmp word ptr [esi] 5Bh +
jnz loc_1051AD0  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1051AD0  +
inc esi  +
inc esi  +
cmp ax 5Dh +
jnz loc_1051A8E  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1051AD0  +
cmp ax 3Ah +
jnz loc_1051AD0  +
add esi 2 +
jmp loc_1051AC7  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1051AD0  +
inc esi  +
inc esi  +
cmp ax 3Ah +
jnz loc_1051AB1  +
cmp word ptr [esi] 0 +
jz loc_1051AD0  +
push esi  +
call _wtoi  +
pop ecx  +
jmp loc_1051AD3  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 1  +
push esi  +
call sub_105191B  +
test eax eax +
jz loc_1051C1D  +
push esi  +
call sub_1050B30  +
test eax eax +
jz loc_1051BB8  +
cmp word ptr [esi] 5Bh +
jnz loc_1051B81  +
mov edi [ebp+arg_4] +
add esi 2 +
push esi  +
push [ebp+arg_8]  +
push edi  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_1051B4D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051C1F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051C1F  +
push esi  +
push offset aStringcchcopyF  +
push offset dword_100D858  +
push 1Dh  +
jmp loc_1051BEA  +
mov eax edi +
test edi edi +
jz loc_1051C1D  +
cmp word ptr [edi] 0 +
jz loc_1051C1D  +
dec [ebp+arg_8]  +
jz loc_1051C1D  +
cmp word ptr [eax] 5Dh +
jz loc_1051C18  +
inc eax  +
inc eax  +
cmp word ptr [eax] 0 +
jnz loc_1051B61  +
jmp loc_1051C1D  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_1051C1D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051C1F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051C1F  +
push esi  +
push offset aStringcchcopyF  +
push offset dword_100D858  +
push 1Eh  +
jmp loc_1051BEA  +
mov edi [ebp+arg_4] +
push esi  +
push [ebp+arg_8]  +
push edi  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_1051BF7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051C1F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051C1F  +
push esi  +
push offset aStringcchcopyF  +
push offset dword_100D858  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1051C1F  +
mov eax edi +
test edi edi +
jz loc_1051C1D  +
cmp word ptr [edi] 0 +
jz loc_1051C1D  +
dec [ebp+arg_8]  +
jz loc_1051C1D  +
cmp word ptr [eax] 3Ah +
jz loc_1051C18  +
inc eax  +
inc eax  +
cmp word ptr [eax] 0 +
jnz loc_1051C03  +
jmp loc_1051C1D  +
xor ecx ecx +
mov [eax] cx +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push offset asc_100D9AC  +
push esi  +
call wcspbrk  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1051C54  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101BD65  +
jmp loc_1051C65  +
sub eax esi +
sar eax 1 +
push eax  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102AA46  +
mov esi eax +
test esi esi +
jge loc_1051C90  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051C90  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051C90  +
push esi  +
push offset dword_100D858  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov esi 109h +
push esi  +
push dword ptr [ebp+arg_0]  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
call sub_101AFC2  +
cmp eax ebx +
jge loc_1051CFC  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1051DDF  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1051DDF  +
push eax  +
push offset aStringcbleng_0  +
push offset dword_100D858  +
push 4Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1051DDF  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call sub_101AFC2  +
mov edi eax +
test edi edi +
jge loc_1051D47  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051DDE  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051DDE  +
push edi  +
push offset aStringcbleng_0  +
push offset dword_100D858  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1051DDE  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
lea esi [eax+ecx+4] +
push esi  +
call sub_105D670  +
mov ebx eax +
test ebx ebx +
jnz loc_1051D62  +
mov edi 8007000Eh +
test edi edi +
jge loc_1051D8D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1051DD2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1051DD2  +
push edi  +
push offset aMemoryAllocati  +
push offset dword_100D858  +
push 4Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_1051DCD  +
push [ebp+arg_4]  +
push dword ptr [ebp+arg_0]  +
push offset aSS_0  +
push esi  +
push ebx  +
call sub_104399A  +
add esp 14h +
test eax eax +
jge loc_1051DDE  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1051DD2  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1051DD2  +
push eax  +
push offset aStringcbprin_0  +
push offset dword_100D858  +
push 50h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
test ebx ebx +
jz loc_1051DDE  +
push ebx  +
call sub_105D688  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov eax [ebp+arg_10] +
add eax eax +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10518AF  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1051C9C  +
mov esi eax +
test esi esi +
jz loc_1051E48  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
call sub_1051DEC  +
push esi  +
call sub_105D688  +
jmp loc_1051E5C  +
cmp [ebp+arg_C] 0 +
jz loc_1051E5C  +
push [ebp+arg_C]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
call sub_101BD65  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push offset hKey  +
lea eax [ebp+Data] +
push eax  +
push offset aAuthenticati_0  +
call sub_102ADDF  +
test eax eax +
jz loc_1051E99  +
push 2  +
push 3  +
push offset aAuthenticati_1  +
push offset word_1002174  +
call sub_10509E3  +
mov dword ptr [ebp+Data] eax +
mov eax dword ptr [ebp+Data] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
xor edi edi +
push [ebp+arg_0]  +
call sub_1051C9C  +
mov esi eax +
test esi esi +
jz loc_1051ED4  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
call sub_1050A49  +
push esi  +
mov edi eax +
call sub_105D688  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+arg_8]  +
mov esi [ebp+arg_0] +
push offset aSoftwareMicr_1  +
push [ebp+arg_4]  +
push esi  +
call sub_101BDD4  +
mov eax esi +
add esp 10h +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1051F2F  +
sub eax ecx +
sar eax 1 +
jz loc_1051F4E  +
lea eax [esi+eax*2-2] +
cmp word ptr [eax] 5Ch +
jnz loc_1051F4E  +
xor ecx ecx +
mov [eax] cx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 230h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_C] +
mov eax dword ptr [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_18] +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+lpData] ecx +
xor ecx ecx +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_230] eax +
mov [ebp+var_220] ecx +
cmp ebx ecx +
jz loc_1051F99  +
mov [ebx] ecx +
cmp [ebp+arg_1C] ecx +
jnz loc_1051FB6  +
push eax  +
push 109h  +
lea eax [ebp+SubKey] +
push eax  +
call sub_1051F0D  +
lea eax [ebp+SubKey] +
lea ecx [ebp+hKey] +
push ecx  +
push 20019h  +
push 0  +
push eax  +
push edi  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_105200B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10520D0  +
test byte ptr [ecx+1Ch] 2 +
jz loc_10520D0  +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push offset dword_100DACC  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10520D0  +
mov eax [ebp+arg_10] +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push esi  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov edi offset dword_100DACC +
test eax eax +
jz loc_105206C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105209D  +
test byte ptr [ecx+1Ch] 2 +
jz loc_105209D  +
push eax  +
push esi  +
push [ebp+var_230]  +
push edi  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1049C05  +
jmp loc_105209D  +
mov ecx [ebp+Type] +
mov eax [ebp+cbData] +
cmp ecx [ebp+arg_14] +
jz loc_105208D  +
cmp ecx 3 +
jnz loc_105209D  +
cmp [ebp+arg_14] 4 +
jnz loc_105209D  +
cmp eax 4 +
jnz loc_105209D  +
test ebx ebx +
jz loc_1052093  +
mov [ebx] eax +
mov [ebp+var_220] 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test eax eax +
jz loc_10520D0  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10520D0  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10520D0  +
push eax  +
push edi  +
push 17h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_220] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword ptr [ebp+arg_4] +
and [ebp+var_21C] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
push eax  +
mov [ebp+var_228] eax +
push 109h  +
lea eax [ebp+SubKey] +
push eax  +
call sub_1051F0D  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
xor eax eax +
push eax  +
push 20006h  +
push eax  +
push eax  +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_1052195  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1052258  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1052258  +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push offset dword_100DACC  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_1052258  +
mov eax lpReserved +
mov esi offset dword_100DACC +
cmp eax offset lpReserved +
jz loc_10521D5  +
test byte ptr [eax+1Ch] 2 +
jz loc_10521D5  +
cmp [ebp+dwDisposition] 1 +
mov ecx offset aCreated +
jz loc_10521BF  +
mov ecx offset aOpened +
lea edx [ebp+SubKey] +
push edx  +
push ecx  +
push esi  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
push [ebp+cbData]  +
push ebx  +
push [ebp+dwType]  +
push 0  +
push edi  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_105221B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1052225  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1052225  +
push eax  +
push edi  +
push [ebp+var_228]  +
push esi  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1049C05  +
jmp loc_1052225  +
mov [ebp+var_21C] 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test eax eax +
jz loc_1052258  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1052258  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1052258  +
push eax  +
push esi  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_21C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_21C] 0 +
push ebx  +
mov ebx dword ptr [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push ebx  +
push 109h  +
lea eax [ebp+SubKey] +
push eax  +
call sub_1051F0D  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push 0  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1052306  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105237D  +
test byte ptr [ecx+1Ch] 2 +
jz loc_105237D  +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push offset dword_100DACC  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_105237D  +
push edi  +
push esi  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
mov edi offset dword_100DACC +
test eax eax +
jz loc_105233F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105233F  +
test byte ptr [eax+1Ch] 2 +
jz loc_105233F  +
push ebx  +
push esi  +
push edi  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1029F0E  +
push [ebp+hKey]  +
mov [ebp+var_21C] 1 +
call ds:RegCloseKey  +
test eax eax +
jz loc_105237C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105237C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105237C  +
push eax  +
push edi  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_21C] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword ptr [ebp+arg_0] +
and [ebp+var_224] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_8] +
push eax  +
mov [ebp+lpName] ecx +
mov ecx [ebp+arg_C] +
push 109h  +
lea eax [ebp+SubKey] +
push eax  +
mov [ebp+phkResult] edi +
mov [ebp+lpcbName] ecx +
call sub_1051F0D  +
cmp [ebp+dwIndex] 0 +
mov esi offset lpReserved +
jnz loc_105249F  +
push edi  +
mov edi ds:RegOpenKeyExW +
mov ebx 20019h +
push ebx  +
push 0  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call edi  +
mov [ebp+var_220] eax +
mov eax lpReserved +
cmp eax esi +
jz loc_1052446  +
test byte ptr [eax+1Ch] 2 +
jz loc_1052446  +
push [ebp+var_220]  +
lea ecx [ebp+SubKey] +
push ecx  +
push offset dword_100DACC  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+var_220] 0 +
jz loc_1052499  +
push [ebp+phkResult]  +
lea eax [ebp+SubKey] +
push ebx  +
push 0  +
push eax  +
push 80000002h  +
call edi  +
mov edi eax +
mov eax lpReserved +
cmp eax esi +
jz loc_1052491  +
test byte ptr [eax+1Ch] 2 +
jz loc_1052491  +
push edi  +
lea ecx [ebp+SubKey] +
push ecx  +
push offset dword_100DACC  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
test edi edi +
jnz loc_1052547  +
mov edi [ebp+phkResult] +
lea eax [ebp+ftLastWriteTime] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpcbName]  +
push [ebp+lpName]  +
push [ebp+dwIndex]  +
push dword ptr [edi]  +
call ds:RegEnumKeyExW  +
cmp eax ebx +
jnz loc_10524F3  +
mov eax lpReserved +
cmp eax esi +
jz loc_10524E7  +
test byte ptr [eax+1Ch] 2 +
jz loc_10524E7  +
push offset dword_100DACC  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_224] 1 +
jmp loc_1052547  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_1052516  +
test byte ptr [ecx+1Ch] 2 +
jz loc_1052516  +
push eax  +
push offset dword_100DACC  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
push dword ptr [edi]  +
call ds:RegCloseKey  +
cmp eax ebx +
jz loc_1052545  +
mov ecx lpReserved +
cmp ecx esi +
jz loc_1052545  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1052545  +
push eax  +
push offset dword_100DACC  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov [edi] ebx +
mov ecx [ebp+var_4] +
mov eax [ebp+var_224] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
xor esi esi +
inc ebx  +
cmp [ebp+arg_10] 2 +
mov [ebp+var_4] edi +
jz loc_1052581  +
cmp [ebp+arg_10] edi +
jnz loc_10525C7  +
push edi  +
push edi  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 80000001h  +
call sub_1051F58  +
mov esi eax +
cmp esi edi +
jnz loc_10525C7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10525C4  +
test byte ptr [eax+1Ch] 2 +
jz loc_10525C4  +
push offset dword_100DABC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_4] ebx +
cmp [ebp+arg_10] ebx +
jz loc_10525D7  +
cmp [ebp+arg_10] 2 +
jnz loc_105261A  +
cmp [ebp+var_4] edi +
jz loc_105261A  +
push edi  +
push edi  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 80000002h  +
call sub_1051F58  +
mov esi eax +
cmp esi edi +
jnz loc_105261A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105261A  +
test byte ptr [eax+1Ch] 2 +
jz loc_105261A  +
push offset dword_100DABC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov [ebp+var_218] eax +
mov eax [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_21C] eax +
xor eax eax +
cmp [ebp+arg_10] 2 +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_210] eax +
mov [ebp+var_214] eax +
mov ebx 208h +
jz loc_1052676  +
cmp [ebp+arg_10] eax +
jnz loc_10526C6  +
push eax  +
push eax  +
push 2  +
push ebx  +
lea eax [ebp+Src] +
push eax  +
push edi  +
push esi  +
push 80000001h  +
call sub_1051F58  +
mov [ebp+var_210] eax +
test eax eax +
jnz loc_10526C6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10526BC  +
test byte ptr [eax+1Ch] 2 +
jz loc_10526BC  +
push offset dword_100DABC  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_214] 1 +
cmp [ebp+arg_10] 1 +
jz loc_10526DB  +
cmp [ebp+arg_10] 2 +
jnz loc_1052723  +
cmp [ebp+var_214] 0 +
jz loc_1052723  +
push 0  +
push 0  +
push 2  +
push ebx  +
lea eax [ebp+Src] +
push eax  +
push edi  +
push esi  +
push 80000002h  +
call sub_1051F58  +
mov [ebp+var_210] eax +
test eax eax +
jnz loc_105272C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052723  +
test byte ptr [eax+1Ch] 2 +
jz loc_1052723  +
push offset dword_100DABC  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+var_210] 0 +
jz loc_105277B  +
mov esi ds:ExpandEnvironmentStringsW +
push 0  +
push 0  +
lea eax [ebp+Src] +
push eax  +
call esi  +
mov ebx eax +
lea edi [ebx+ebx+2] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov ecx [ebp+var_218] +
mov [ecx] eax +
test eax eax +
jz loc_105277B  +
push ebx  +
push eax  +
lea eax [ebp+Src] +
push eax  +
call esi  +
test eax eax +
jz loc_105277B  +
mov eax [ebp+var_21C] +
mov [eax] edi +
mov [ebp+var_210] 1 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
cmp [ebp+arg_C] 2 +
mov [ebp+var_4] edi +
jz loc_10527B1  +
cmp [ebp+arg_C] edi +
jnz loc_10527FB  +
push edi  +
push edi  +
push 4  +
push 4  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 80000001h  +
call sub_1051F58  +
mov esi eax +
cmp esi edi +
jnz loc_10527FB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10527F4  +
test byte ptr [eax+1Ch] 2 +
jz loc_10527F4  +
push offset dword_100DABC  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_4] 1 +
cmp [ebp+arg_C] 1 +
jz loc_105280C  +
cmp [ebp+arg_C] 2 +
jnz loc_105284F  +
cmp [ebp+var_4] edi +
jz loc_105284F  +
push edi  +
push edi  +
push 4  +
push 4  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 80000002h  +
call sub_1051F58  +
mov esi eax +
cmp esi edi +
jnz loc_105284F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105284F  +
test byte ptr [eax+1Ch] 2 +
jz loc_105284F  +
push offset dword_100DABC  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1052867  +
push esi  +
sub eax edx +
push 1  +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ebp+arg_0]  +
push 80000001h  +
call sub_10520EC  +
mov esi eax +
test esi esi +
jnz loc_10528BA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10528BA  +
test byte ptr [eax+1Ch] 2 +
jz loc_10528BA  +
push offset dword_100DABC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 4  +
push 4  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push dword ptr [ebp+arg_0]  +
push 80000001h  +
call sub_10520EC  +
mov esi eax +
test esi esi +
jnz loc_105290E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105290E  +
test byte ptr [eax+1Ch] 2 +
jz loc_105290E  +
push offset dword_100DABC  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push offset aDwmapi_dll  +
xor esi esi +
call ds:LoadLibraryW  +
mov ebx eax +
test ebx ebx +
jz loc_1052A56  +
push offset aDwmgetwindowat  +
push ebx  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1052A29  +
push 10h  +
lea ecx [ebp+rc] +
push ecx  +
push 9  +
push [ebp+hWnd]  +
call eax  +
test eax eax +
jl loc_1052A00  +
lea eax [ebp+rc] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_10529E5  +
push edi  +
mov eax lpReserved +
mov esi offset lpReserved +
mov edi offset dword_100DB6C +
cmp eax esi +
jz loc_10529A6  +
test byte ptr [eax+1Ch] 2 +
jz loc_10529A6  +
push [ebp+rc.bottom]  +
push [ebp+rc.right]  +
push [ebp+rc.top]  +
push [ebp+rc.left]  +
push edi  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E2C9  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
mov eax lpReserved +
cmp eax esi +
jz loc_10529DC  +
test byte ptr [eax+1Ch] 2 +
jz loc_10529DC  +
push [ebp+Rect.bottom]  +
push [ebp+Rect.right]  +
push [ebp+Rect.top]  +
push [ebp+Rect.left]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E2C9  +
mov esi [ebp+Rect.left] +
sub esi [ebp+rc.left] +
pop edi  +
jmp loc_1052A4D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052A4D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1052A4D  +
push offset dword_100DB6C  +
push 0Ch  +
jmp loc_1052A42  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1052A4D  +
test byte ptr [ecx+1Ch] 2 +
jz loc_1052A4D  +
push eax  +
push offset dword_100DB6C  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_1052A4D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052A4D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1052A4D  +
push offset dword_100DB6C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push ebx  +
call ds:FreeLibrary  +
jmp loc_1052A7A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052A7A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1052A7A  +
push offset dword_100DB6C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_8] +
mov [eax+10h] ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_100DBC4 +
mov [eax+4] ecx +
mov [eax+18h] ecx +
mov [eax+14h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [ecx] offset off_100DBC4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:LoadIconW  +
test eax eax +
jz loc_1052AF4  +
push eax  +
push 1  +
push 80h  +
push dword ptr [esi+4]  +
call ds:SendMessageW  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_1052B22  +
push [ebp+nIDDlgItem]  +
push eax  +
call ds:GetDlgItem  +
test eax eax +
jz loc_1052B22  +
push [ebp+bEnable]  +
push eax  +
call ds:EnableWindow  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor esi esi +
mov [ebp+rcDst.left] esi +
lea edi [ebp+rcDst.top] +
stos   +
stos   +
mov ebx ecx +
stos   +
mov eax [ebx+4] +
mov [ebp+var_4] ebx +
cmp eax esi +
jz loc_1052CF6  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
push 2  +
pop eax  +
cmp [ebp+arg_4] esi +
jnz loc_1052B69  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_8] esi +
jnz loc_1052B71  +
mov [ebp+arg_8] eax +
cmp [ebp+hwnd] esi +
mov esi ds:GetSystemMetrics +
jz loc_1052BDD  +
push [ebp+hwnd]  +
call ds:IsWindow  +
test eax eax +
jz loc_1052BDD  +
push [ebp+hwnd]  +
call ds:IsIconic  +
test eax eax +
jnz loc_1052BDD  +
push eax  +
call esi  +
mov edi eax +
push 1  +
dec edi  +
call esi  +
mov ebx eax +
lea eax [ebp+rcDst] +
push eax  +
push [ebp+hwnd]  +
dec ebx  +
call ds:GetWindowRect  +
push ds:pt.y  +
lea eax [ebp+rcDst] +
push ds:pt.x  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_1052C04  +
push ebx  +
push edi  +
lea eax [ebp+rcDst] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_1052C04  +
mov ebx [ebp+var_4] +
push 1  +
call esi  +
push eax  +
xor edi edi +
push edi  +
call esi  +
push eax  +
push edi  +
push edi  +
lea eax [ebp+rcSrc] +
push eax  +
call ds:SetRect  +
lea eax [ebp+rcSrc] +
push eax  +
lea eax [ebp+rcDst] +
push eax  +
call ds:CopyRect  +
jmp loc_1052C48  +
lea eax [ebp+rcSrc] +
push eax  +
push [ebp+hwnd]  +
call sub_1050D9D  +
test eax eax +
jnz loc_1052C45  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052CF6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1052CF6  +
push offset dword_100DB6C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1052CF6  +
mov ebx [ebp+var_4] +
mov eax [ebp+Rect.left] +
sub eax [ebp+Rect.right] +
push dword ptr [ebx+4]  +
add eax [ebp+rcDst.right] +
add eax [ebp+rcDst.left] +
cdq   +
idiv  [ebp+arg_4] +
mov esi eax +
mov eax [ebp+Rect.top] +
sub eax [ebp+Rect.bottom] +
add eax [ebp+rcDst.top] +
add eax [ebp+rcDst.bottom] +
cdq   +
idiv  [ebp+arg_8] +
mov edi eax +
call sub_105291A  +
mov ecx [ebp+rcSrc] +
cmp esi ecx +
jge loc_1052C80  +
lea esi [ecx+eax] +
jmp loc_1052C99  +
mov ecx [ebp-2Ch] +
mov edx ecx +
sub edx [ebp+Rect.right] +
add edx [ebp+Rect.left] +
cmp esi edx +
jle loc_1052C99  +
sub ecx eax +
sub ecx [ebp+Rect.right] +
add ecx [ebp+Rect.left] +
mov esi ecx +
mov ecx [ebp-30h] +
cmp edi ecx +
jge loc_1052CA5  +
lea edi [ecx+eax] +
jmp loc_1052CBE  +
mov ecx [ebp-28h] +
mov edx ecx +
sub edx [ebp+Rect.bottom] +
add edx [ebp+Rect.top] +
cmp edi edx +
jle loc_1052CBE  +
sub ecx eax +
sub ecx [ebp+Rect.bottom] +
add ecx [ebp+Rect.top] +
mov edi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052CE4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1052CE4  +
push edi  +
push esi  +
push offset dword_100DB6C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_101E297  +
push 15h  +
xor eax eax +
push eax  +
push eax  +
push edi  +
push esi  +
push eax  +
push dword ptr [ebx+4]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 110h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
jnz loc_1052D7D  +
mov esi edi +
test edi edi +
jz loc_1052D6C  +
push 0  +
call ds:SetLastError  +
push edi  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:SetWindowLongW  +
test eax eax +
jnz loc_1052D75  +
mov ebx ds:GetLastError +
call ebx  +
test eax eax +
jz loc_1052D75  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052D6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1052D6C  +
call ebx  +
push eax  +
mov eax lpReserved +
push offset dword_100DB6C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax [ebp+hWnd] +
mov [edi+4] eax +
jmp loc_1052D8A  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov esi eax +
test esi esi +
jz loc_1052D6C  +
mov eax [esi] +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+hWnd]  +
push esi  +
call dword ptr [eax+0Ch]  +
jmp loc_1052D6E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
lea eax [ebp+WndClass] +
push eax  +
mov edi offset ClassName +
mov esi ecx +
push edi  +
push dword ptr [esi+0Ch]  +
call ds:GetClassInfoW  +
test eax eax +
jnz loc_1052E32  +
mov eax ds:DefDlgProcW +
and [ebp+WndClass.cbClsExtra] 0 +
mov [ebp+WndClass.lpfnWndProc] eax +
mov eax [esi+0Ch] +
push 65h  +
push eax  +
mov [ebp+WndClass.style] 2808h +
mov [ebp+WndClass.cbWndExtra] 22h +
mov [ebp+WndClass.hInstance] eax +
call ds:LoadIconW  +
push 7F00h  +
push 0  +
mov [ebp+WndClass.hIcon] eax +
call ds:LoadCursorW  +
and [ebp+WndClass.lpszMenuName] 0 +
mov [ebp+WndClass.hCursor] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.hbrBackground] 6 +
mov [ebp+WndClass.lpszClassName] edi +
call ds:RegisterClassW  +
test ax ax +
jnz loc_1052E32  +
call ds:GetLastError  +
cmp eax 582h +
jz loc_1052E32  +
xor eax eax +
jmp loc_1052E91  +
movzx eax [ebp+arg_0] +
push esi  +
push offset sub_1052D02  +
push dword ptr [esi+8]  +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_105DC17  +
mov dword ptr [ebp+arg_0] eax +
test eax eax +
jz loc_1052E54  +
cmp eax 0FFFFFFFFh +
jnz loc_1052E84  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052E84  +
test byte ptr [eax+1Ch] 4 +
jz loc_1052E84  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100DB6C  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push dword ptr [esi+0Ch]  +
push edi  +
call ds:UnregisterClassW  +
mov eax dword ptr [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
lea eax [ebp+WndClass] +
push eax  +
mov edi offset ClassName +
mov esi ecx +
push edi  +
push dword ptr [esi+0Ch]  +
call ds:GetClassInfoW  +
test eax eax +
jnz loc_1052F29  +
mov eax ds:DefDlgProcW +
and [ebp+WndClass.cbClsExtra] 0 +
mov [ebp+WndClass.lpfnWndProc] eax +
mov eax [esi+0Ch] +
push 65h  +
push eax  +
mov [ebp+WndClass.style] 2808h +
mov [ebp+WndClass.cbWndExtra] 22h +
mov [ebp+WndClass.hInstance] eax +
call ds:LoadIconW  +
push 7F00h  +
push 0  +
mov [ebp+WndClass.hIcon] eax +
call ds:LoadCursorW  +
and [ebp+WndClass.lpszMenuName] 0 +
mov [ebp+WndClass.hCursor] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.hbrBackground] 6 +
mov [ebp+WndClass.lpszClassName] edi +
call ds:RegisterClassW  +
test ax ax +
jnz loc_1052F29  +
call ds:GetLastError  +
cmp eax 582h +
jz loc_1052F29  +
xor eax eax +
jmp loc_1052F83  +
movzx eax [ebp+arg_0] +
push esi  +
push offset sub_1052D02  +
push dword ptr [esi+8]  +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_105DBBC  +
mov dword ptr [ebp+arg_0] eax +
test eax eax +
jnz loc_1052F76  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1052F76  +
test byte ptr [eax+1Ch] 4 +
jz loc_1052F76  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100DB6C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push dword ptr [esi+0Ch]  +
push edi  +
call ds:UnregisterClassW  +
mov eax dword ptr [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+4] ebx +
jz loc_105300B  +
cmp [ebp+arg_C] ebx +
mov [ebp+var_4] ebx +
jle loc_105300B  +
push edi  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_4] +
push dword ptr [eax+ecx*4]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
mov edi eax +
cmp edi ebx +
jz loc_1052FFF  +
lea eax [ebp+X] +
push eax  +
push edi  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+X] +
push eax  +
push dword ptr [esi+4]  +
push ebx  +
call ds:MapWindowPoints  +
push [ebp+dy]  +
lea eax [ebp+X] +
push [ebp+arg_0]  +
push eax  +
call ds:OffsetRect  +
push 5  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
push [ebp+X]  +
push ebx  +
push edi  +
call ds:SetWindowPos  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_C] +
jl loc_1052FAA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_1053050  +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jle loc_105304F  +
mov eax [ebp+arg_0] +
push dword ptr [eax+esi*4]  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
test eax eax +
jz loc_1053049  +
push [ebp+bEnable]  +
push eax  +
call ds:EnableWindow  +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_105302C  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_105309C  +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jle loc_105309B  +
mov eax [ebp+arg_0] +
push dword ptr [eax+esi*4]  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
test eax eax +
jz loc_1053095  +
mov ecx [ebp+arg_8] +
neg ecx  +
sbb ecx ecx +
and ecx 5 +
push ecx  +
push eax  +
call ds:ShowWindow  +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_1053070  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword ptr [ecx+0Ch]  +
call sub_105DC73  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_1053108  +
call ds:GetLastError  +
test eax eax +
jle loc_1053124  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1053124  +
lea eax [ebp+Buffer] +
push eax  +
push 0  +
push 143h  +
push [ebp+nIDDlgItem]  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
call sub_105DD36  +
test eax eax +
jnz loc_1053181  +
call ds:GetLastError  +
test eax eax +
jle loc_1053196  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1053196  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+nIDDlgItem]  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+nIDDlgItem]  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
test eax eax +
jz loc_10531E3  +
push 0  +
push [ebp+wParam]  +
push 0CFh  +
push eax  +
call ds:SendMessageW  +
push 0  +
push 0  +
push dword ptr [esi+4]  +
call ds:InvalidateRect  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+Rect.left] 0 +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push 6  +
add eax [ebp+arg_4] +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
add eax [ebp+arg_0] +
push eax  +
push 0  +
push 0  +
push 0  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
and [ebp+wndpl.length] 0 +
push ebx  +
push esi  +
mov esi ds:GetDlgItem +
push edi  +
push 0Ah  +
mov ebx ecx +
pop ecx  +
xor eax eax +
and [ebp+var_2C] eax +
push 0Ah  +
lea edi [ebp+wndpl.flags] +
stos   +
pop ecx  +
push [ebp+hWnd]  +
lea edi [ebp+var_28] +
push dword ptr [ebx+4]  +
stos   +
xor edi edi +
call esi  +
push [ebp+arg_4]  +
mov [ebp+hWnd] eax +
push dword ptr [ebx+4]  +
call esi  +
mov ebx eax +
cmp [ebp+hWnd] edi +
jz loc_10532B3  +
test ebx ebx +
jz loc_10532B3  +
mov esi ds:GetWindowPlacement +
push 2Ch  +
pop eax  +
mov [ebp+wndpl.length] eax +
mov [ebp+var_2C] eax +
lea eax [ebp+wndpl] +
push eax  +
push [ebp+hWnd]  +
call esi  +
lea eax [ebp+var_2C] +
push eax  +
push ebx  +
call esi  +
mov edi [ebp+var_C] +
sub edi [ebp+wndpl.rcNormalPosition.top] +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
push [ebp+hWnd]  +
call sub_1053242  +
push [ebp+arg_C]  +
mov esi eax +
sub esi [ebp+arg_10] +
push [ebp+arg_8]  +
mov ebx esi +
neg ebx  +
push ebx  +
push 0  +
mov ecx edi +
call sub_1052F8E  +
push ebx  +
push 0  +
mov ecx edi +
call sub_10531ED  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053336  +
test byte ptr [eax+1Ch] 2 +
jz loc_1053336  +
push [ebp+dy]  +
push offset dword_100DB6C  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_4]  +
push [ebp+dy]  +
push 0  +
call sub_1052F8E  +
cmp [ebp+arg_C] 0 +
jz loc_105335A  +
push [ebp+dy]  +
mov ecx edi +
push 0  +
call sub_10531ED  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push esi  +
xor esi esi +
push esi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push 1  +
push eax  +
push dword ptr [ecx+0Ch]  +
call ds:LoadImageW  +
cmp eax esi +
jz loc_10533A6  +
push eax  +
push 1  +
push 172h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
cmp eax esi +
jz loc_10533A3  +
push eax  +
call ds:DestroyIcon  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 42h  +
mov [ebp+pvParam] 0Ch +
call ds:SystemParametersInfoW  +
movzx eax byte ptr [ebp+var_8] +
and eax 1 +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100DBC4 +
jz loc_1053403  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push dword ptr [ecx+10h]  +
call sub_1052DA5  +
mov esi eax +
test esi esi +
jz loc_1053425  +
cmp esi 0FFFFFFFFh +
jnz loc_1053455  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053455  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053455  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100DB6C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push dword ptr [ecx+10h]  +
call sub_1052E9C  +
mov esi eax +
test esi esi +
jnz loc_105349F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105349F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105349F  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100DB6C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10533B2  +
mov [esi+1Ch] eax +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
xor eax eax +
sub ecx 0Fh +
jz loc_1053581  +
dec ecx  +
jz loc_1053550  +
sub ecx 0Ah +
jz loc_1053536  +
sub ecx 0F6h +
jz loc_105352C  +
dec ecx  +
jnz loc_1053589  +
movzx ecx [ebp+arg_C] +
dec ecx  +
dec ecx  +
jnz loc_1053589  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053519  +
test byte ptr [eax+1Ch] 2 +
jz loc_1053519  +
push offset dword_100DB6C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+hWnd] 0 +
jz loc_105354B  +
push 2  +
push [ebp+hWnd]  +
call ds:EndDialog  +
jmp loc_105354B  +
mov ecx [ebp+arg_0] +
call sub_10534A8  +
jmp loc_1053589  +
cmp dword ptr [ebp+arg_C] 43h +
jnz loc_105354B  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10533B2  +
mov [esi+1Ch] eax +
pop esi  +
xor eax eax +
inc eax  +
jmp loc_1053589  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053574  +
test byte ptr [eax+1Ch] 2 +
jz loc_1053574  +
push offset dword_100DB6C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push [ebp+hWnd]  +
call ds:IsWindow  +
test eax eax +
jmp loc_105351D  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
pop ebp  +
retn 14h  +
***
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 14h  +
mov esi ecx +
push 89h  +
push dword ptr [esi+4]  +
call ds:SetTimer  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi+30h] eax +
pop esi  +
mov eax ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
test eax eax +
jz loc_10535DE  +
push eax  +
push dword ptr [esi+4]  +
call ds:KillTimer  +
and dword ptr [esi+30h] 0 +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor eax eax +
lea ebx [esi+18h] +
mov edi ebx +
stos   +
stos   +
stos   +
push 2000h  +
stos   +
movzx eax word ptr [esi+10h] +
xor edi edi +
push edi  +
push edi  +
push edi  +
push eax  +
push dword ptr [esi+8]  +
call ds:LoadImageW  +
mov [esi+14h] eax +
cmp eax edi +
jz loc_1053674  +
lea ecx [ebp+var_18] +
push ecx  +
push 18h  +
push eax  +
call ds:GetObjectW  +
cmp eax 18h +
jb loc_1053642  +
push [ebp+yBottom]  +
push [ebp+xRight]  +
push edi  +
push edi  +
push ebx  +
call ds:SetRect  +
jmp loc_10536A6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053666  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053666  +
push offset aT@bCcBjsR  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push dword ptr [esi+14h]  +
call ds:DeleteObject  +
mov [esi+14h] edi +
jmp loc_10536A6  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10536A6  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10536A6  +
push eax  +
push (offset aT@bCcBjsR+10h)  +
push offset aT@bCcBjsR  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
cmp [esi+14h] edi +
pop edi  +
pop esi  +
setnz al  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor ebx ebx +
mov [ebp+Rect.left] ebx +
xor eax eax +
lea edi [ebp+Rect.top] +
stos   +
stos   +
mov esi ecx +
mov [ebp+var_C] ebx +
stos   +
call ds:CreateCompatibleDC  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_10537CB  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
mov eax [esi+2Ch] +
cmp eax ebx +
jz loc_1053714  +
push ebx  +
push eax  +
push [ebp+arg_0]  +
call ds:SelectPalette  +
push [ebp+arg_0]  +
mov [ebp+var_C] eax +
call ds:RealizePalette  +
push dword ptr [esi+14h]  +
push [ebp+var_8]  +
call ds:SelectObject  +
mov edi [ebp+Rect.right] +
sub edi [ebp+Rect.left] +
mov [ebp+var_10] eax +
mov eax [esi+20h] +
sub eax [esi+18h] +
inc edi  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_105373A  +
mov [ebp+var_4] edi +
mov ecx [esi+24h] +
sub eax [ebp+var_4] +
sub ecx [esi+1Ch] +
push 0CC0020h  +
push ecx  +
push [ebp+var_4]  +
cdq   +
push ebx  +
mov ebx ds:StretchBlt +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+var_8]  +
push ecx  +
push edi  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+28h]  +
push [ebp+arg_0]  +
call ebx  +
mov eax [esi+20h] +
sub eax [esi+18h] +
mov ecx [esi+24h] +
sub eax [ebp+var_4] +
sub ecx [esi+1Ch] +
push 0CC0020h  +
push ecx  +
push [ebp+var_4]  +
cdq   +
push 0  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+var_8]  +
mov eax [esi+28h] +
push ecx  +
push edi  +
push dword ptr [esi+0Ch]  +
sub eax edi +
push eax  +
push [ebp+arg_0]  +
call ebx  +
cmp [ebp+var_10] 0 +
jz loc_10537AE  +
push [ebp+var_10]  +
push [ebp+var_8]  +
call ds:SelectObject  +
cmp [ebp+var_C] 0 +
jz loc_10537C2  +
push 1  +
push [ebp+var_C]  +
push [ebp+arg_0]  +
call ds:SelectPalette  +
push [ebp+var_8]  +
call ds:DeleteDC  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_C] +
push edi  +
xor edi edi +
mov [esi+10h] eax +
mov eax [ebp+arg_10] +
mov [esi] edi +
mov [esi+14h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] eax +
mov [esi+30h] edi +
call sub_10535E8  +
xor eax eax +
cmp [esi+14h] edi +
pop edi  +
setnz al  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10535C4  +
mov esi [esi+14h] +
test esi esi +
jz loc_1053841  +
push esi  +
call ds:DeleteObject  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+14h] 0 +
jz loc_105385B  +
push [ebp+arg_0]  +
call sub_10536B8  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
cmp eax [ebp+arg_0] +
jnz loc_10538C6  +
cmp dword ptr [esi+14h] 0 +
jz loc_10538C6  +
push edi  +
push dword ptr [esi+4]  +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_10538C5  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
cmp [ebp+Rect.right] 0 +
jz loc_10538BB  +
mov eax [esi+28h] +
add eax 5 +
cdq   +
idiv  [ebp+Rect.right] +
push edi  +
mov ecx esi +
sub edx [ebp+Rect.left] +
mov [esi+28h] edx +
call sub_10536B8  +
push edi  +
push dword ptr [esi+4]  +
call ds:ReleaseDC  +
pop edi  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
push edi  +
test eax eax +
jz loc_10538E7  +
push eax  +
call ds:DeleteObject  +
xor eax eax +
lea edi [esi+18h] +
stos   +
stos   +
stos   +
stos   +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_10535E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_10] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_14] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_18] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_1C] +
mov [eax+1Ch] ecx +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  ds:dbl_100DC50 +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jnz loc_1053978  +
fld  [ebp+arg_0] +
fadd st st +
fld  ds:dbl_100DC48 +
fxch  st(1) +
call _CIpow  +
fld1   +
fsub st(1) st +
fxch  st(1) +
fdiv  ds:dbl_100DC40 +
fmul  ds:dbl_100DC50 +
jmp loc_10539A2  +
fld1   +
fsub  [ebp+arg_0] +
fadd st st +
fld  ds:dbl_100DC48 +
fxch  st(1) +
call _CIpow  +
fld1   +
fsub st(1) st +
fxch  st(1) +
fdiv  ds:dbl_100DC40 +
fmul  ds:dbl_100DC50 +
fld  st(1) +
fsubrp st(1) st +
fsub st(1) st +
fxch  st(1) +
fmul  [ebp+arg_8] +
fxch  st(1) +
fmul  [ebp+arg_10] +
faddp st(1) st +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
sub eax [esi+20h] +
push edi  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
test eax eax +
jge loc_10539DA  +
fadd  ds:dbl_100DC58 +
mov eax [esi+14h] +
fild  dword ptr [esi+14h] +
test eax eax +
jge loc_10539EA  +
fadd  ds:dbl_100DC58 +
fdivp st(1) st +
mov eax [esi+18h] +
sub eax 0 +
fst  [ebp+var_8] +
jz loc_1053A38  +
dec eax  +
jnz loc_1053A83  +
mov edi [esi+4] +
mov eax [esi+0Ch] +
sub eax edi +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
push ebx  +
fmul st st(1) +
call sub_1046659  +
add eax edi +
mov edi [ebp+arg_4] +
mov [edi] eax +
mov ebx [esi+8] +
mov eax [esi+10h] +
sub eax ebx +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
fmulp st(1) st +
call sub_1046659  +
add eax ebx +
mov [edi+4] eax +
pop ebx  +
jmp loc_1053A85  +
fild  dword ptr [esi+0Ch] +
sub esp 18h +
fstp  [esp+28h+var_18] +
fild  dword ptr [esi+4] +
fstp  [esp+28h+var_20] +
fstp  [esp+28h+var_28] +
call sub_105393D  +
call sub_1046659  +
mov edi [ebp+arg_4] +
mov [edi] eax +
fild  dword ptr [esi+10h] +
sub esp 18h +
mov ecx esi +
fstp  [esp+28h+var_18] +
fild  dword ptr [esi+8] +
fstp  [esp+28h+var_20] +
fld  [ebp+var_8] +
fstp  [esp+28h+var_28] +
call sub_105393D  +
call sub_1046659  +
mov [edi+4] eax +
jmp loc_1053A85  +
fstp  st +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
call ds:timeGetTime  +
mov ecx eax +
sub ecx [esi+20h] +
cmp ecx [esi+14h] +
jb loc_1053AE8  +
push [ebp+uTimerID]  +
call ds:timeKillEvent  +
push dword ptr [esi+2Ch]  +
mov eax [esi+0Ch] +
push dword ptr [esi+10h]  +
mov ecx [esi+24h] +
push eax  +
push dword ptr [esi+28h]  +
sub ecx eax +
push ecx  +
push 0  +
push dword ptr [esi]  +
call ds:SetWindowPos  +
push 0  +
push 0  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi]  +
call ds:PostMessageW  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1053B17  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10539B9  +
mov eax [esi+2Ch] +
or eax 400h +
push eax  +
push [ebp+cy]  +
mov eax [esi+24h] +
push [ebp+var_8]  +
sub eax [ebp+var_8] +
push dword ptr [esi+28h]  +
push eax  +
push 0  +
push dword ptr [esi]  +
call ds:SetWindowPos  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1053B35  +
push [ebp+uTimerID]  +
call sub_1053A90  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi]  +
call ds:GetWindowRect  +
push 0FFFFFFECh  +
push dword ptr [esi]  +
call ds:GetWindowLongW  +
shr eax 16h +
and eax 1 +
mov dword ptr [esi+2Ch] 14h +
jz loc_1053B7F  +
mov eax [esi+4] +
add eax [ebp+Rect.left] +
mov [esi+24h] eax +
mov eax [ebp+Rect.top] +
mov [esi+28h] eax +
jmp loc_1053B8E  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
mov dword ptr [esi+2Ch] 16h +
call ds:timeGetTime  +
push 101h  +
push esi  +
push offset fptc  +
push 0  +
push 21h  +
mov [esi+20h] eax +
call ds:timeSetEvent  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi 8007000Eh +
cmp [ebp+arg_14] edi +
jbe loc_1053BE9  +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 1042h  +
call ds:SystemParametersInfoW  +
jmp loc_1053BEE  +
xor eax eax +
mov [ebp+pvParam] edi +
cmp eax edi +
jz loc_1053C5B  +
cmp [ebp+pvParam] edi +
jz loc_1053C5B  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1053C24  +
push [ebp+arg_1C]  +
mov ecx eax +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10538FE  +
jmp loc_1053C26  +
xor eax eax +
cmp eax edi +
jz loc_1053C35  +
mov ecx eax +
call sub_1053B3E  +
mov esi eax +
jmp loc_1053C84  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053C84  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053C84  +
push offset dword_100DC30  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1053C84  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053C7F  +
test byte ptr [eax+1Ch] 2 +
jz loc_1053C7F  +
push offset dword_100DC30  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 80004001h +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
push 258h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1053CB9  +
mov ecx eax +
call sub_1054955  +
mov esi eax +
jmp loc_1053CBB  +
xor esi esi +
test esi esi +
jnz loc_1053CEA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053CE3  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053CE3  +
push offset dword_100DC60  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 8007000Eh +
jmp loc_1053D59  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
push [ebp+arg_0]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+30h]  +
mov edi eax +
test edi edi +
jge loc_1053D27  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053D30  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053D30  +
push edi  +
push offset dword_100DC60  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1053D2B  +
mov [ebx] esi +
xor edi edi +
mov eax lpReserved +
test edi edi +
jge loc_1053D59  +
cmp eax offset lpReserved +
jz loc_1053D53  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053D53  +
push offset dword_100DC60  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1053D8C  +
mov ecx eax +
call sub_1054BC2  +
mov esi eax +
jmp loc_1053D8E  +
xor esi esi +
test esi esi +
jnz loc_1053DBD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053DB6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053DB6  +
push offset dword_100DC60  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 8007000Eh +
jmp loc_1053E2C  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
push [ebp+arg_0]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+30h]  +
mov edi eax +
test edi edi +
jge loc_1053DFA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053E03  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053E03  +
push edi  +
push offset dword_100DC60  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1053DFE  +
mov [ebx] esi +
xor edi edi +
mov eax lpReserved +
test edi edi +
jge loc_1053E2C  +
cmp eax offset lpReserved +
jz loc_1053E26  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053E26  +
push offset dword_100DC60  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
push 44h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1053E5B  +
mov ecx eax +
call sub_105754B  +
jmp loc_1053E5D  +
xor eax eax +
test eax eax +
jnz loc_1053E8C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053E85  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053E85  +
push offset dword_100DC60  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 8007000Eh +
jmp loc_1053E99  +
add eax 18h +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1053E3A  +
mov edi [ebp+var_4] +
mov esi eax +
test esi esi +
jge loc_1053EFD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053F86  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053F86  +
push esi  +
push offset aFailedToCrea_0  +
push offset dword_100DC60  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1053F86  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_1053C91  +
mov ebx [ebp+var_8] +
mov esi eax +
test esi esi +
jge loc_1053F3F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053F7B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053F7B  +
push esi  +
push offset aFailedToCrea_1  +
push offset dword_100DC60  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1053F7B  +
mov eax [edi] +
push 0  +
push ebx  +
mov ecx edi +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_1053F70  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1053F7B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1053F7B  +
push esi  +
push offset aOpenstoreFaile  +
push offset dword_100DC60  +
push 14h  +
jmp loc_1053F32  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
test ebx ebx +
jz loc_1053F85  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
pop ebx  +
test edi edi +
jz loc_1053F90  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1053E3A  +
mov edi [ebp+var_4] +
mov esi eax +
test esi esi +
jge loc_1053FF7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054080  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054080  +
push esi  +
push offset aFailedToCrea_0  +
push offset dword_100DC60  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1054080  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_1053D67  +
mov ebx [ebp+var_8] +
mov esi eax +
test esi esi +
jge loc_1054039  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054075  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054075  +
push esi  +
push offset aFailedToCrea_2  +
push offset dword_100DC60  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1054075  +
mov eax [edi] +
push 0  +
push ebx  +
mov ecx edi +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_105406A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054075  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054075  +
push esi  +
push offset aOpenstoreFaile  +
push offset dword_100DC60  +
push 17h  +
jmp loc_105402C  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
test ebx ebx +
jz loc_105407F  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
pop ebx  +
test edi edi +
jz loc_105408A  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push dword ptr [ecx+2Ch]  +
call ds:SetFilePointer  +
cmp eax 0FFFFFFFFh +
jnz loc_10540C3  +
call ds:GetLastError  +
cmp eax esi +
jle loc_10540C1  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_100DDC0 +
mov dword ptr [ecx+4] offset off_10025C4 +
mov dword ptr [ecx+8] offset off_100DDB0 +
mov dword ptr [ecx+4] offset off_10025C4 +
mov dword ptr [ecx+8] offset off_10025B4 +
or dword ptr [ecx+10h] 8 +
mov dword ptr [ecx+8] offset off_10025A4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+14h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10540CC  +
test byte ptr [ebp+8] 1 +
jz loc_105418B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp [ebp+8] ebx +
jz loc_10541E3  +
push dword ptr [ebp+8]  +
mov eax [esi] +
call dword ptr [eax+30h]  +
mov edi eax +
cmp edi ebx +
jge loc_105424E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10542A4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10542A4  +
push edi  +
push offset aUnableToInitia  +
push offset dword_100DDA0  +
push 0Dh  +
jmp loc_1054241  +
cmp [esi+40h] bx +
jnz loc_1054217  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105420D  +
test byte ptr [eax+1Ch] 4 +
jz loc_105420D  +
push offset dword_100DDA0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 8007007Bh +
jmp loc_10542A4  +
mov eax [esi] +
call dword ptr [eax+20h]  +
mov edi eax +
cmp edi ebx +
jge loc_105424E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10542A4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10542A4  +
push edi  +
push offset aFailedToCloseF  +
push offset dword_100DDA0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10542A4  +
push ebx  +
push 80h  +
push 4  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push 80000000h  +
lea eax [esi+40h] +
push eax  +
call ds:CreateFileW  +
mov [esi+2Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_105428A  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1054286  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_10542A4  +
mov [esi+24h] edi +
mov [esi+250h] edi +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+28h] ebx +
mov [esi+24Ch] ebx +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+8] ebx +
jz loc_1054300  +
push dword ptr [ebp+8]  +
mov eax [esi] +
call dword ptr [eax+30h]  +
cmp eax ebx +
mov [ebp+8] eax +
jge loc_105437B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054454  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054454  +
push dword ptr [ebp+8]  +
push offset aUnableToInitia  +
push offset dword_100DDA0  +
push 10h  +
jmp loc_105436B  +
cmp [esi+40h] bx +
jnz loc_1054336  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105432A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105432A  +
push offset dword_100DDA0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [ebp+8] 8007007Bh +
jmp loc_1054454  +
mov eax [esi] +
call dword ptr [eax+20h]  +
cmp eax ebx +
mov [ebp+8] eax +
jge loc_105437B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054454  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054454  +
push dword ptr [ebp+8]  +
push offset aFailedToCloseF  +
push offset dword_100DDA0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1054454  +
push edi  +
cmp [esi+30h] ebx +
jnz loc_10543C6  +
mov edi 800h +
push edi  +
call sub_105D670  +
mov [esi+30h] eax +
cmp eax ebx +
jnz loc_10543C3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10543B7  +
test byte ptr [eax+1Ch] 4 +
jz loc_10543B7  +
push offset dword_100DDA0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_1054453  +
mov [esi+34h] edi +
lea edi [esi+40h] +
push edi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_105440B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054406  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054406  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push edi  +
push offset dword_100DDA0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax 80h +
push ebx  +
push eax  +
push 2  +
push ebx  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 40000000h  +
push edi  +
call ds:CreateFileW  +
mov [esi+2Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1054441  +
call ds:GetLastError  +
test eax eax +
jle loc_105443C  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+8] eax +
jmp loc_1054453  +
mov eax [ebp+0Ch] +
mov [esi+28h] ebx +
mov [esi+24Ch] eax +
mov [esi+250h] ebx +
pop edi  +
mov eax [ebp+8] +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_10545FA  +
mov edi [ebp+8] +
cmp edi ebx +
jz loc_10545F6  +
cmp [esi+24Ch] ebx +
jz loc_1054507  +
cmp [esi+250h] ebx +
jz loc_10544EA  +
push ebx  +
lea eax [ebp-4] +
push eax  +
push 2  +
lea eax [ebp+8] +
push eax  +
push dword ptr [esi+2Ch]  +
mov dword ptr [ebp+8] 0FEFFh +
call ds:WriteFile  +
test eax eax +
jz loc_10545B5  +
cmp dword ptr [ebp-4] 2 +
jz loc_10544E4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10545EF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10545EF  +
push offset dword_100DDA0  +
push 15h  +
jmp loc_10545E4  +
mov [esi+250h] ebx +
mov eax edi +
mov edx edi +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10544F1  +
sub eax edi +
sar eax 1 +
lea edi [eax+eax] +
jmp loc_1054598  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_105450C  +
sub eax edx +
sar eax 1 +
lea edi [eax+1] +
cmp edi [esi+34h] +
jbe loc_1054575  +
mov eax [esi+30h] +
cmp eax ebx +
jz loc_1054532  +
push eax  +
call sub_105D688  +
mov [esi+30h] ebx +
push edi  +
call sub_105D670  +
mov [esi+30h] eax +
cmp eax ebx +
jnz loc_1054572  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054568  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054568  +
push offset a_pansilinebuf  +
push offset dword_100DDA0  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 8007000Eh +
jmp loc_105462A  +
mov [esi+34h] edi +
push ebx  +
push ebx  +
push dword ptr [esi+34h]  +
push dword ptr [esi+30h]  +
push 0FFFFFFFFh  +
push dword ptr [ebp+8]  +
push 240h  +
push ebx  +
call ds:WideCharToMultiByte  +
cmp eax ebx +
jz loc_10545B5  +
mov edx [esi+30h] +
lea edi [eax-1] +
push ebx  +
lea eax [ebp-4] +
push eax  +
push edi  +
push edx  +
push dword ptr [esi+2Ch]  +
call ds:WriteFile  +
cmp eax ebx +
jz loc_10545B5  +
cmp [ebp-4] edi +
jnz loc_10545CB  +
xor eax eax +
jmp loc_105462A  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_105462A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_105462A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10545EF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10545EF  +
push offset dword_100DDA0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 800703F5h +
jmp loc_105462A  +
cmp eax ebx +
jnz loc_1054625  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105461E  +
test byte ptr [eax+1Ch] 4 +
jz loc_105461E  +
push offset dword_100DDA0  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 80070005h +
jmp loc_105462A  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+NumberOfBytesRead] ebx +
mov [ebp+Buffer] ebx +
mov [ebp+uBytes] ebx +
mov [eax] ebx +
call sub_1054097  +
mov esi eax +
cmp esi ebx +
jge loc_105468A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10547FA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10547FA  +
push esi  +
push offset aFailedToMovePo  +
push offset dword_100DDA0  +
push 19h  +
jmp loc_10547DD  +
push ebx  +
push dword ptr [edi+2Ch]  +
call ds:GetFileSize  +
mov ebx eax +
test ebx ebx +
jnz loc_10546A4  +
mov esi 80070018h +
jmp loc_10547FA  +
cmp ebx 80000h +
ja loc_10546F7  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [edi+2Ch]  +
call ds:ReadFile  +
test eax eax +
jnz loc_10546E0  +
call ds:GetLastError  +
test eax eax +
jle loc_10546D9  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10547FA  +
mov eax 0FEFFh +
cmp word ptr [ebp+Buffer] ax +
jnz loc_1054701  +
mov [ebp+var_4] 1 +
test bl 1 +
jz loc_1054745  +
mov esi 8007000Dh +
jmp loc_10547FA  +
and [ebp+var_4] 0 +
inc ebx  +
lea eax [ebx+ebx] +
mov ecx edi +
mov [ebp+uBytes] eax +
call sub_1054097  +
mov esi eax +
test esi esi +
jge loc_1054745  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10547FA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10547FA  +
push esi  +
push offset aFailedToMovePo  +
push offset dword_100DDA0  +
push 1Ah  +
jmp loc_10547DD  +
push ebx  +
call sub_105D670  +
mov esi eax +
mov [ebp+lpMultiByteStr] esi +
test esi esi +
jnz loc_105477A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054839  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054839  +
push offset dword_100DDA0  +
push 1Bh  +
jmp loc_105482E  +
push ebx  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
xor eax eax +
cmp [ebp+var_4] eax +
setnz al  +
inc eax  +
sub ebx eax +
push ebx  +
push esi  +
push dword ptr [edi+2Ch]  +
call ds:ReadFile  +
test eax eax +
jnz loc_10547B1  +
push esi  +
call sub_105D688  +
jmp loc_10546C5  +
mov ecx edi +
call sub_1054097  +
mov esi eax +
test esi esi +
jge loc_10547EA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10547FA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10547FA  +
push esi  +
push offset aFailedToMovePo  +
push offset dword_100DDA0  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10547FA  +
cmp [ebp+var_4] 0 +
jz loc_1054803  +
mov eax [ebp+lpMultiByteStr] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov esi [ebp+uBytes] +
push esi  +
call sub_105D670  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jnz loc_1054840  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054839  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054839  +
push offset dword_100DDA0  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 8007000Eh +
jmp loc_10547FA  +
shr esi 1 +
push esi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push 1  +
push 0  +
call ds:MultiByteToWideChar  +
push [ebp+lpMultiByteStr]  +
mov esi eax +
call sub_105D688  +
test esi esi +
jnz loc_10547F8  +
jmp loc_10546C5  +
***
mov ecx [ecx+254h] +
xor eax eax +
test ecx ecx +
jz locret_105487C  +
mov eax [ecx] +
jmp dword ptr [eax+2Ch]  +
retn   +
***
mov ecx [ecx+254h] +
mov eax [ecx] +
jmp dword ptr [eax+28h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_10548CC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10548C5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10548C5  +
push offset dword_100DDA0  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 80070057h +
jmp loc_1054916  +
mov eax [esi] +
call dword ptr [eax+20h]  +
mov edi eax +
test edi edi +
jge loc_1054903  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054916  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054916  +
push edi  +
push offset aFailedToCloseF  +
push offset dword_100DDA0  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1054916  +
push [ebp+arg_0]  +
add esi 40h +
push 105h  +
push esi  +
call sub_101BD65  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_105493A  +
and dword ptr [esi] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_1054949  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push offset aCrdpsettingsfi  +
mov esi ecx +
call sub_10585F8  +
xor eax eax +
lea ecx [esi+254h] +
mov dword ptr [esi] offset off_100DF38 +
mov dword ptr [esi+4] offset off_10025C4 +
mov dword ptr [esi+8] offset off_100DF28 +
mov [ecx] eax +
or dword ptr [esi+2Ch] 0FFFFFFFFh +
push eax  +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+24Ch] eax +
mov dword ptr [esi+250h] 1 +
mov [esi+30h] eax +
mov [esi+34h] eax +
call sub_1054923  +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 8 +
jmp loc_1054B79  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 2Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10549E0  +
mov ecx eax +
call sub_1054BC2  +
jmp loc_10549E2  +
xor eax eax +
push edi  +
lea edi [esi+254h] +
push eax  +
mov ecx edi +
call sub_1054923  +
mov eax [esi] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx esi +
call dword ptr [eax+24h]  +
mov esi eax +
test esi esi +
jge loc_1054A23  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054A5D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054A5D  +
push esi  +
push offset aFailedToGetThe  +
push offset dword_100DDA0  +
push 0Bh  +
jmp loc_1054A52  +
mov ecx [edi] +
push [ebp+var_4]  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_1054A5D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054A5D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054A5D  +
push esi  +
push offset aFailedToSetMem  +
push offset dword_100DDA0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+var_4] 0 +
pop edi  +
jz loc_1054A6C  +
push [ebp+var_4]  +
call sub_105D688  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
cmp eax 0FFFFFFFFh +
jz loc_1054A8E  +
push eax  +
call ds:CloseHandle  +
or dword ptr [esi+2Ch] 0FFFFFFFFh +
xor eax eax +
push eax  +
lea ecx [esi+254h] +
mov [esi+28h] eax +
mov [esi+24h] eax +
call sub_1054923  +
xor eax eax +
pop esi  +
retn   +
***
cmp dword ptr [ecx+254h] 0 +
push esi  +
mov esi 80004005h +
jnz loc_1054AEF  +
call sub_10549BE  +
mov esi eax +
test esi esi +
jge loc_1054AEF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054AEF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054AEF  +
push esi  +
push offset aFailedToLoadFi  +
push offset dword_100DDA0  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100DF38 +
mov dword ptr [esi+4] offset off_10025C4 +
mov dword ptr [esi+8] offset off_100DF28 +
call sub_1054A76  +
test eax eax +
jge loc_1054B46  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1054B46  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1054B46  +
push eax  +
push offset aCloseFailedOnS  +
push offset dword_100DDA0  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [esi+30h] +
test eax eax +
jz loc_1054B57  +
push eax  +
call sub_105D688  +
and dword ptr [esi+30h] 0 +
lea eax [esi+254h] +
mov ecx [eax] +
test ecx ecx +
jz loc_1054B6C  +
and dword ptr [eax] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp sub_10540CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1054AF8  +
test byte ptr [ebp+8] 1 +
jz loc_1054B93  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
test eax eax +
jz loc_1054BB5  +
push eax  +
call sub_105D688  +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+24h] 0 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push offset aCrdpsettingsme  +
mov esi ecx +
call sub_10585F8  +
mov dword ptr [esi] offset off_100E0CC +
mov dword ptr [esi+4] offset off_10025C4 +
mov dword ptr [esi+8] offset off_100E0BC +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 8 +
jmp loc_1054E99  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100E0CC +
mov dword ptr [esi+4] offset off_10025C4 +
mov dword ptr [esi+8] offset off_100E0BC +
call sub_1054B9F  +
test eax eax +
jge loc_1054C49  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1054C49  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1054C49  +
push eax  +
push offset aCloseFailedOnS  +
push offset dword_100E0AC  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx esi +
pop esi  +
jmp sub_10540CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
mov esi ecx +
jz loc_1054C9F  +
push dword ptr [ebp+8]  +
mov eax [esi] +
call dword ptr [eax+30h]  +
mov edi eax +
test edi edi +
jge loc_1054CD0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054CD9  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054CD9  +
push edi  +
push offset aInitializefrom  +
push offset dword_100E0AC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1054CD9  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_1054CD0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054CC9  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054CC9  +
push offset dword_100E0AC  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 800700E8h +
jmp loc_1054CD9  +
mov dword ptr [esi+24h] 1 +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jnz loc_1054D22  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054D18  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054D18  +
push offset dword_100E0AC  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 80070057h +
jmp loc_1054DE6  +
mov eax [edi] +
push ebx  +
call dword ptr [eax+20h]  +
mov ebx offset lpReserved +
test eax eax +
jge loc_1054D59  +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_1054D5F  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1054D5F  +
push eax  +
push offset aCloseOnTheMemo  +
push offset dword_100E0AC  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx lpReserved +
mov eax [ebp+arg_0] +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1054D66  +
sub eax esi +
sar eax 1 +
lea esi [eax+eax] +
test esi esi +
jnz loc_1054D9E  +
cmp ecx ebx +
jz loc_1054D97  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1054D97  +
push offset dword_100E0AC  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1018898  +
mov eax 80070057h +
jmp loc_1054DE4  +
inc esi  +
inc esi  +
push esi  +
call sub_105D670  +
mov [edi+1Ch] eax +
test eax eax +
jnz loc_1054DD5  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1054DCE  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054DCE  +
push offset dword_100E0AC  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 8007000Eh +
jmp loc_1054DE4  +
push esi  +
push [ebp+arg_0]  +
push eax  +
call memcpy  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
mov ebx ecx +
mov eax [ebx+1Ch] +
test eax eax +
jnz loc_1054E31  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054E2A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054E2A  +
push offset dword_100E0AC  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 80004005h +
jmp loc_1054E8E  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1054E34  +
sub eax ecx +
push esi  +
sar eax 1 +
lea esi [eax+eax+2] +
push esi  +
call sub_105D670  +
mov [edi] eax +
test eax eax +
jnz loc_1054E7E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1054E77  +
test byte ptr [eax+1Ch] 4 +
jz loc_1054E77  +
push offset dword_100E0AC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 8007000Eh +
jmp loc_1054E8D  +
push esi  +
push dword ptr [ebx+1Ch]  +
push eax  +
call memcpy  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1054BFB  +
test byte ptr [ebp+8] 1 +
jz loc_1054EB3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 20h  +
pop eax  +
cmp ax [ebp+arg_0] +
jz loc_1054EDA  +
push 9  +
pop eax  +
cmp ax [ebp+arg_0] +
jz loc_1054EDA  +
xor eax eax +
jmp loc_1054EDD  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov eax [ecx+0Ch] +
retn   +
***
mov eax [ecx+10h] +
retn   +
***
mov eax [ecx+14h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ecx+14h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
jz loc_1054F45  +
mov esi [ebp+10h] +
test esi esi +
jz loc_1054F45  +
mov eax [ecx] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call dword ptr [eax+48h]  +
test eax eax +
jz loc_1054F40  +
mov eax [ebp+8] +
mov [esi] eax +
xor eax eax +
inc eax  +
jmp loc_1054F47  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+88h] +
sub ecx 0 +
jz loc_1054F91  +
dec ecx  +
jz loc_1054F81  +
dec ecx  +
jz loc_1054F81  +
dec ecx  +
jz loc_1054F81  +
xor eax eax +
jmp loc_1054F94  +
mov eax [eax+8Ch] +
test eax eax +
jz loc_1054F91  +
push eax  +
call sub_105D688  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1054FB8  +
cmp [esi] ax +
jz loc_1054FB4  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1054FAA  +
test edx edx +
jnz loc_1054FBD  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1054FCE  +
test eax eax +
jl loc_1054FCB  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_105500C  +
and dword ptr [eax] 0 +
cmp dword ptr [ecx+30h] 0 +
jz loc_1055000  +
mov edx [ecx+34h] +
test edx edx +
jz loc_1055000  +
mov [eax+4] edx +
mov edx [ecx+34h] +
mov [edx] eax +
mov [ecx+34h] eax +
xor eax eax +
inc eax  +
jmp loc_105500E  +
mov [ecx+34h] eax +
mov [ecx+30h] eax +
and dword ptr [eax+4] 0 +
jmp loc_1054FFB  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_105504C  +
cmp [ebp+arg_4] eax +
jz loc_1055048  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1055048  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_105502B  +
test esi esi +
jnz loc_1055054  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1055062  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
mov ebx ecx +
push esi  +
mov esi [ebx+30h] +
test esi esi +
jz loc_10550A5  +
push edi  +
mov edi esi +
mov eax [edi+88h] +
dec eax  +
mov esi [esi] +
jz loc_105508F  +
dec eax  +
jz loc_105508F  +
dec eax  +
jnz loc_105509A  +
push dword ptr [edi+8Ch]  +
call sub_105D688  +
push edi  +
call sub_105D688  +
test esi esi +
jnz loc_105507C  +
pop edi  +
and dword ptr [ebx+30h] 0 +
and dword ptr [ebx+34h] 0 +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1055116  +
cmp [ecx+34h] esi +
jnz loc_10550D0  +
mov eax [esi+4] +
mov [ecx+34h] eax +
cmp [ecx+30h] esi +
jnz loc_10550DA  +
mov eax [esi] +
mov [ecx+30h] eax +
mov eax [esi+4] +
test eax eax +
jz loc_10550E5  +
mov ecx [esi] +
mov [eax] ecx +
mov eax [esi] +
test eax eax +
jz loc_10550F1  +
mov ecx [esi+4] +
mov [eax+4] ecx +
mov eax [esi+88h] +
dec eax  +
jz loc_1055100  +
dec eax  +
jz loc_1055100  +
dec eax  +
jnz loc_105510B  +
push dword ptr [esi+8Ch]  +
call sub_105D688  +
push esi  +
call sub_105D688  +
xor eax eax +
inc eax  +
jmp loc_1055118  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi-18h] +
call sub_105506E  +
xor eax eax +
inc eax  +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0  +
push dword ptr [ebp+8]  +
call dword ptr [eax+5Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1055183  +
test [ebp+arg_8] 1000h +
jz loc_1055183  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_10551CB  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_10551B3  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_10551CB  +
test esi esi +
jbe loc_10551E4  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_10551E4  +
test [ebp+arg_8] 800h +
jz loc_10551E4  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_14] +
push esi  +
and eax 100h +
push edi  +
mov [ebp+var_10] eax +
jz loc_10552D2  +
xor eax eax +
cmp [ebp+arg_0] eax +
jnz loc_1055219  +
mov edx [ebp+arg_4] +
test edx edx +
jnz loc_1055224  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
jbe loc_1055229  +
mov eax 80070057h +
test eax eax +
jl loc_1055235  +
test edx edx +
jnz loc_10552F0  +
and [ebp+var_4] 0 +
mov esi eax +
test eax eax +
jl loc_10552CA  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
sub ebx eax +
xor esi esi +
lea edi [ecx+eax*2] +
mov [ebp+var_8] edi +
mov [ebp+var_C] ebx +
cmp [ebp+var_10] esi +
jz loc_105526B  +
cmp [ebp+arg_8] esi +
jnz loc_105526B  +
mov [ebp+arg_8] offset word_1002174 +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1055300  +
mov esi 80070057h +
test [ebp+arg_14] 1C00h +
jz loc_10552AB  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10552AB  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_4] +
add eax eax +
push eax  +
lea ebx [ebp+var_C] +
call sub_1055159  +
mov edi [ebp+var_8] +
mov ebx [ebp+var_C] +
test esi esi +
jge loc_10552B7  +
cmp esi 8007007Ah +
jnz loc_10552C9  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10552C0  +
mov [eax] edi +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_10552C9  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_10552E3  +
cmp edx 7FFFFFFFh +
jbe loc_10552E8  +
mov eax 80070057h +
test eax eax +
jl loc_1055235  +
mov eax [ebp+arg_0] +
lea edi [ebp+var_4] +
call sub_1054F9D  +
jmp loc_1055239  +
cmp ebx 1 +
ja loc_1055321  +
mov eax [ebp+arg_8] +
cmp [eax] si +
jz loc_10552B7  +
mov esi ecx +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_105527D  +
push 7FFFFFFEh  +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+arg_8] +
mov edx ebx +
mov ecx edi +
mov [ebp+var_C] esi +
call sub_1055017  +
mov esi eax +
mov eax [ebp+var_C] +
sub ebx eax +
lea edi [edi+eax*2] +
mov [ebp+var_8] edi +
mov [ebp+var_C] ebx +
test esi esi +
jl loc_105527D  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_10552B7  +
cmp ebx 1 +
jbe loc_10552B7  +
lea ecx [ebx+ebx] +
cmp ecx 2 +
jbe loc_10552B7  +
add ecx 0FFFFFFFEh +
push ecx  +
and eax 0FFh +
push eax  +
lea eax [edi+2] +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_10552B7  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_10553CF  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jnz loc_10553B5  +
mov ecx [esi+20h] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
test eax eax +
jz loc_10553CF  +
mov ecx [esi+20h] +
mov eax [ecx] +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_10553D2  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
pop esi  +
retn   +
***
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
xor ecx ecx +
push esi  +
push edi  +
cmp ebx ecx +
jz loc_10555E3  +
cmp [ebp+arg_4] ecx +
jz loc_10555E3  +
cmp [ebp+arg_8] ecx +
jz loc_10555E3  +
cmp [ebp+arg_10] ecx +
jz loc_10555E3  +
movzx eax word ptr [ebx] +
push 2  +
mov esi ebx +
pop edi  +
cmp ax cx +
jz loc_105542D  +
movzx eax ax +
push eax  +
call sub_1054EBF  +
test eax eax +
jz loc_105542D  +
add esi edi +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1055419  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_10555E3  +
mov ecx [ebp+arg_8] +
xor edx edx +
cmp ax 3Ah +
jz loc_105545D  +
mov [ecx] ax +
add ecx edi +
add esi edi +
inc edx  +
cmp edx [ebp+arg_C] +
jnb loc_10554EF  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_105543E  +
xor eax eax +
mov [ecx] ax +
cmp word ptr [esi] 3Ah +
jnz loc_10555E3  +
add esi edi +
movzx eax word ptr [esi] +
test ax ax +
jz loc_10555BE  +
push eax  +
call sub_1054EBF  +
test eax eax +
jz loc_105548E  +
add esi edi +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_105547A  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_10555BE  +
push eax  +
call towlower  +
movzx eax ax +
movzx eax ax +
add esi edi +
pop ecx  +
cmp eax 62h +
jz loc_1055534  +
cmp eax 69h +
jz loc_105552C  +
cmp eax 73h +
jz loc_1055521  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10554E1  +
test byte ptr [eax+1Ch] 4 +
jz loc_10554E1  +
push ebx  +
push offset nullsub_2  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 3 +
jmp loc_10555E3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055607  +
test byte ptr [eax+1Ch] 4 +
jz loc_10555E8  +
push edx  +
push offset nullsub_2  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_10555E3  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
jmp loc_1055547  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
jmp loc_1055547  +
mov eax [ebp+arg_4] +
mov [eax] edi +
jmp loc_1055547  +
push eax  +
call sub_1054EBF  +
test eax eax +
jz loc_105554F  +
add esi edi +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_105553B  +
cmp word ptr [esi] 3Ah +
jnz loc_10555E3  +
jmp loc_1055565  +
push eax  +
call sub_1054EBF  +
test eax eax +
jz loc_105556F  +
add esi edi +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_105555B  +
mov ecx [ebp+arg_10] +
xor edx edx +
jmp loc_105558F  +
cmp ax 0Ah +
jz loc_1055597  +
cmp ax 0Dh +
jz loc_1055597  +
mov [ecx] ax +
add ecx edi +
add esi edi +
inc edx  +
cmp edx [ebp+arg_14] +
jnb loc_105559F  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1055576  +
xor eax eax +
mov [ecx] ax +
inc eax  +
jmp loc_1055612  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055607  +
test byte ptr [eax+1Ch] 4 +
jz loc_10555E8  +
push edx  +
push offset nullsub_2  +
push 27h  +
jmp loc_1055511  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055607  +
test byte ptr [eax+1Ch] 4 +
jz loc_10555E8  +
push ebx  +
push offset nullsub_2  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055607  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055607  +
push offset nullsub_2  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 3 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_10556E8  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jz loc_10556E8  +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_1055759  +
dec eax  +
jz loc_1055745  +
dec eax  +
jz loc_1055695  +
dec eax  +
jnz loc_10556E8  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_105565E  +
sub eax edx +
sar eax 1 +
lea edi [eax+1] +
lea eax [edi+edi] +
push eax  +
call sub_105D670  +
mov [esi+8Ch] eax +
test eax eax +
jz loc_10556E8  +
push ebx  +
push edi  +
push eax  +
call sub_101BD65  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
jmp loc_10556EA  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_105569A  +
sub eax edx +
sar eax 1 +
mov edi eax +
shr eax 1 +
inc eax  +
inc eax  +
push eax  +
mov [ebp+arg_0] eax +
call sub_105D670  +
mov [esi+8Ch] eax +
test eax eax +
jnz loc_10556F1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10556E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10556E8  +
push [ebp+arg_0]  +
push offset nullsub_2  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
push [ebp+arg_0]  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+8Ch]  +
push ebx  +
push edi  +
call sub_1051405  +
test eax eax +
jnz loc_105573A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10556E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10556E8  +
push offset nullsub_2  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_10556E8  +
mov eax [ebp+arg_0] +
mov [esi+90h] eax +
jmp loc_1055766  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_105574A  +
jmp loc_1055668  +
push ebx  +
call _wtol  +
pop ecx  +
mov [esi+8Ch] eax +
xor eax eax +
inc eax  +
jmp loc_10556EA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1027578  +
test eax eax +
jl loc_105579A  +
push offset asc_100E3B0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1027578  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 101Ch +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_101C] ecx +
xor ecx ecx +
push edi  +
mov [ebp+var_1014] eax +
mov [ebp+var_1008] ecx +
mov [ebp+var_100C] ecx +
mov [ebp+var_1018] ecx +
cmp esi ecx +
jz loc_1055BBB  +
cmp eax ecx +
jz loc_1055802  +
mov [ebp+var_1010] 1 +
cmp [ebp+arg_8] ecx +
jnz loc_1055808  +
mov [ebp+var_1010] ecx +
push ebx  +
mov ebx [esi+88h] +
cmp ebx 3 +
jnb loc_1055B4A  +
lea edi [esi+8] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1055820  +
sub eax edx +
sar eax 1 +
add eax 5 +
cmp [ebp+var_1010] 0 +
mov [ebp+var_100C] eax +
jz loc_1055876  +
push off_1065DD8[ebx*4]  +
push edi  +
push offset aSS  +
push [ebp+arg_8]  +
push [ebp+var_1014]  +
call sub_101BDD4  +
add esp 14h +
mov [ebp+var_1008] eax +
test eax eax +
jge loc_1055876  +
cmp eax 8007007Ah +
jnz loc_105589E  +
and [ebp+var_1010] 0 +
mov eax [esi+88h] +
sub eax 0 +
jz loc_1055A75  +
dec eax  +
jz loc_10559FB  +
dec eax  +
jz loc_10558CF  +
mov [ebp+var_1008] 8000FFFFh +
jmp loc_1055BBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055BBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055BBA  +
push [ebp+var_1008]  +
push offset aStringcchprint  +
push offset nullsub_2  +
push 2Bh  +
jmp loc_1055BAF  +
lea eax [ebp+var_1018] +
push eax  +
push 0  +
push dword ptr [esi+8Ch]  +
push dword ptr [esi+90h]  +
call sub_1051339  +
test eax eax +
jnz loc_1055913  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10559EC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10559EC  +
push offset nullsub_2  +
push 2Fh  +
jmp loc_10559E1  +
cmp [ebp+var_1010] 0 +
mov ecx [ebp+var_100C] +
mov eax [ebp+var_1018] +
lea ecx [ecx+eax-2] +
mov [ebp+var_100C] ecx +
jz loc_1055BBA  +
cmp eax 800h +
jnb loc_1055BBA  +
lea eax [ebp+var_1018] +
push eax  +
lea eax [ebp+var_1004] +
push eax  +
push dword ptr [esi+8Ch]  +
push dword ptr [esi+90h]  +
call sub_1051339  +
test eax eax +
jz loc_10559C8  +
mov ecx [ebp+var_1018] +
xor eax eax +
mov word ptr [ebp+ecx*2+var_1008] ax +
lea eax [ebp+var_1004] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_1014]  +
call sub_1055773  +
mov [ebp+var_1008] eax +
test eax eax +
jge loc_1055BBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055BBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055BBA  +
push [ebp+var_1008]  +
push offset aStringcchcatcr  +
push offset nullsub_2  +
push 30h  +
jmp loc_1055BAF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10559EC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10559EC  +
push offset nullsub_2  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+var_1008] 80004005h +
jmp loc_1055BBA  +
mov esi [esi+8Ch] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1055A06  +
sub eax edx +
sar eax 1 +
add [ebp+var_100C] eax +
cmp [ebp+var_1010] 0 +
jz loc_1055BBA  +
push esi  +
push [ebp+arg_8]  +
push [ebp+var_1014]  +
call sub_1055773  +
mov [ebp+var_1008] eax +
test eax eax +
jge loc_1055BBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055BBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055BBA  +
push [ebp+var_1008]  +
push offset aStringcchcatcr  +
push offset nullsub_2  +
push 2Eh  +
jmp loc_1055BAF  +
push dword ptr [esi+8Ch]  +
lea eax [ebp+var_1004] +
push offset aD  +
push 800h  +
push eax  +
call sub_101BDD4  +
add esp 10h +
mov [ebp+var_1008] eax +
test eax eax +
jge loc_1055ACF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055BBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055BBA  +
push [ebp+var_1008]  +
push offset aStringcchprint  +
push offset nullsub_2  +
push 2Ch  +
jmp loc_1055BAF  +
lea eax [ebp+var_1004] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1055AD8  +
sub eax edx +
sar eax 1 +
add [ebp+var_100C] eax +
cmp [ebp+var_1010] 0 +
jz loc_1055BBA  +
lea eax [ebp+var_1004] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_1014]  +
call sub_1055773  +
mov [ebp+var_1008] eax +
test eax eax +
jge loc_1055BBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055BBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055BBA  +
push [ebp+var_1008]  +
push offset aStringcchcatcr  +
push offset nullsub_2  +
push 2Dh  +
jmp loc_1055BAF  +
mov esi [esi+8Ch] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1055B55  +
sub eax edx +
sar eax 1 +
cmp [ebp+var_1010] 0 +
mov [ebp+var_100C] eax +
jz loc_1055BBA  +
push esi  +
push [ebp+arg_8]  +
push [ebp+var_1014]  +
call sub_101BD65  +
mov [ebp+var_1008] eax +
test eax eax +
jge loc_1055BBA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055BBA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055BBA  +
push [ebp+var_1008]  +
push offset aStringcchcop_1  +
push offset nullsub_2  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
pop ebx  +
mov eax [ebp+var_101C] +
pop edi  +
pop esi  +
test eax eax +
jz loc_1055BCF  +
mov ecx [ebp+var_100C] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1008] +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_1055CA1  +
cmp dword ptr [esi+30h] 0 +
jz loc_1055CA1  +
push eax  +
push 40h  +
lea eax [ebp+var_84] +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_1055C51  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1055CA1  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1055CA1  +
push eax  +
push offset nullsub_2  +
push 33h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_1055CA1  +
lea eax [ebp+var_84] +
push eax  +
call _wcslwr  +
mov eax [esi+30h] +
pop ecx  +
jmp loc_1055C9D  +
lea edx [eax+8] +
lea ecx [ebp+var_84] +
mov si [ecx] +
cmp si [edx] +
jnz loc_1055C92  +
test si si +
jz loc_1055C8E  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_1055C92  +
add ecx 4 +
add edx 4 +
test si si +
jnz loc_1055C6C  +
xor ecx ecx +
jmp loc_1055C97  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jz loc_1055CA3  +
mov eax [eax] +
test eax eax +
jnz loc_1055C63  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_1055D3B  +
push 98h  +
call sub_105D670  +
mov esi eax +
test esi esi +
jz loc_1055D3B  +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
push 40h  +
push edi  +
mov [esi+88h] eax +
call sub_101BD65  +
mov ebx eax +
test ebx ebx +
jge loc_1055D1F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055D2D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055D2D  +
push ebx  +
push offset aStringcchcopyF  +
push offset nullsub_2  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1055D2D  +
push edi  +
call _wcslwr  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop ecx  +
pop edi  +
test ebx ebx +
pop ebx  +
jge loc_1055D3B  +
push esi  +
call sub_105D688  +
xor esi esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
jz loc_1055D73  +
push dword ptr [ebp+8]  +
lea esi [ecx-18h] +
mov ecx esi +
call sub_1055BE8  +
test eax eax +
jz loc_1055D6E  +
push eax  +
mov ecx esi +
call sub_10550B8  +
jmp loc_1055D75  +
xor eax eax +
inc eax  +
jmp loc_1055D75  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1055DAD  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_1055BE8  +
test eax eax +
jz loc_1055DAD  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_1055DA8  +
mov eax [eax+88h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1055DAF  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1055E0D  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_1055BE8  +
test eax eax +
jz loc_1055E0D  +
mov ecx [eax+88h] +
sub ecx 0 +
jz loc_1055E08  +
dec ecx  +
jz loc_1055DEB  +
dec ecx  +
jnz loc_1055E0D  +
mov eax [eax+90h] +
jmp loc_1055E0F  +
mov eax [eax+8Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1055DF4  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1055E0F  +
push 4  +
pop eax  +
jmp loc_1055E0F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jnz loc_1055E50  +
mov ecx 80070057h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055E79  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055E79  +
push ecx  +
push offset aCrdpsettingsst  +
push offset nullsub_2  +
push 3Eh  +
jmp loc_1055EA7  +
mov eax [esi+24h] +
test eax eax +
jz loc_1055E81  +
lea ecx [eax+4] +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
jz loc_1055E81  +
mov eax [esi+24h] +
lea ecx [eax+18h] +
neg eax  +
sbb eax eax +
and eax ecx +
mov [edi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx 8007000Dh +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055E79  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055E79  +
push ecx  +
push offset aCrdpsettingsst  +
push offset nullsub_2  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1055E79  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 154h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp+var_154] ebx +
lea edi [ebp+var_150] +
stos   +
mov [ebp+var_14C] ebx +
lea edi [ebp+var_148] +
push 138h  +
stos   +
lea eax [ebp+var_144] +
push ebx  +
push eax  +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ebx +
call memset  +
add esp 0Ch +
xor edi edi +
mov ecx [ebp+var_C] +
lea esi dword_100E1CC[edi] +
push dword ptr [esi-4]  +
call sub_1055BE8  +
cmp eax ebx +
jnz loc_1055F5D  +
cmp dword ptr [esi] 1 +
jnz loc_1055F68  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105610D  +
test byte ptr [eax+1Ch] 4 +
jz loc_105610D  +
push ecx  +
push offset aMandatorySensi  +
push offset nullsub_2  +
push 63h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105610D  +
mov [ebp+edi+var_154] 1 +
add edi 8 +
cmp edi 148h +
jb loc_1055F04  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1055F79  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
lea eax [esi+esi] +
push eax  +
call sub_105D670  +
mov ebx eax +
mov [ebp+var_8] ebx +
test ebx ebx +
jnz loc_1055FD1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1055FC5  +
test byte ptr [eax+1Ch] 4 +
jz loc_1055FC5  +
push offset aSztempscope  +
push offset nullsub_2  +
push 64h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_10560FF  +
push [ebp+arg_0]  +
push esi  +
push ebx  +
call sub_101BD65  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_1056010  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10560FF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10560FF  +
push [ebp+arg_0]  +
push offset aStringcchcop_1  +
push offset nullsub_2  +
push 65h  +
jmp loc_10560F4  +
lea eax [ebp+var_4] +
push eax  +
mov edi offset asc_1003DD4 +
push edi  +
push ebx  +
jmp loc_105607E  +
mov ecx [ebp+var_C] +
push ebx  +
call sub_1055BE8  +
test eax eax +
jz loc_10560A4  +
xor esi esi +
mov eax ds:off_100E1C8[esi*8] +
mov ecx ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_105605B  +
test dx dx +
jz loc_1056057  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_105605B  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1056035  +
xor eax eax +
jmp loc_1056060  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_105606C  +
inc esi  +
cmp esi 29h +
jb loc_105602C  +
jmp loc_1056077  +
mov [ebp+esi*8+var_150] 1 +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push 0  +
call sub_10461EC  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jnz loc_105601D  +
mov ecx [ebp+eax*8+var_154] +
cmp ecx [ebp+eax*8+var_150] +
jnz loc_10560CD  +
inc eax  +
cmp eax 29h +
jb loc_105608C  +
jmp loc_10560FF  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10560FF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10560FF  +
push ecx  +
push offset aFieldInSignsco  +
push offset nullsub_2  +
push 66h  +
jmp loc_10560F4  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10560FF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10560FF  +
push ecx  +
push offset aSettingsInSign  +
push offset nullsub_2  +
push 67h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+var_8] 0 +
jz loc_105610D  +
push [ebp+var_8]  +
call sub_105D688  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
and [eax] edi +
mov [ebp+var_4] ecx +
xor esi esi +
push ds:off_100E1C8[esi]  +
mov ecx [ebp+var_4] +
call sub_1055BE8  +
cmp ds:dword_100E1CC[esi] 0 +
jz loc_1056187  +
test eax eax +
jz loc_10561C1  +
cmp dword ptr [eax+88h] 1 +
jnz loc_105616F  +
mov ecx [eax+8Ch] +
lea ebx [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_105615F  +
sub ecx ebx +
sar ecx 1 +
jz loc_10561EB  +
mov ecx [eax+88h] +
cmp ecx 2 +
jnz loc_1056187  +
cmp dword ptr [eax+90h] 0 +
jz loc_1056215  +
test eax eax +
jz loc_10561A6  +
mov eax ds:off_100E1C8[esi] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1056194  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax+1] +
add esi 8 +
cmp esi 148h +
jb loc_1056132  +
mov eax [ebp+arg_0] +
mov [eax] edi +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax 80070490h +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10561B8  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10561B8  +
push eax  +
push offset aMandatorySen_0  +
push offset nullsub_2  +
push 6Eh  +
jmp loc_105623D  +
mov eax 80070490h +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10561B8  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10561B8  +
push eax  +
push offset aMandatorySen_1  +
push offset nullsub_2  +
push 6Fh  +
jmp loc_105623D  +
mov eax 80070490h +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_10561B8  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10561B8  +
push eax  +
push offset aMandatorySen_1  +
push offset nullsub_2  +
push 70h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10561B8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
xor esi esi +
mov edi offset asc_1003DD4 +
push edi  +
push [ebp+arg_0]  +
mov [ebp+var_4] ecx +
mov [ebp+var_C] esi +
xor ebx ebx +
mov [ebp+var_8] esi +
jmp loc_10562A9  +
mov ecx [ebp+var_4] +
push eax  +
call sub_1055BE8  +
cmp eax esi +
jz loc_10562FE  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_4] +
push esi  +
push esi  +
push eax  +
call sub_10557A3  +
cmp eax esi +
mov [ebp+arg_0] eax +
jl loc_105632F  +
add ebx [ebp+var_8] +
lea eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_10461EC  +
add esp 0Ch +
cmp eax esi +
jnz loc_1056279  +
mov ecx [ebp+var_4] +
push offset aSignscope  +
call sub_1055BE8  +
cmp eax esi +
jnz loc_1056352  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10563A5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10563A5  +
push ecx  +
push offset aSignscopeField  +
push offset nullsub_2  +
push 73h  +
jmp loc_1056389  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10563A5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10563A5  +
push ecx  +
push offset aFieldInSignsco  +
push offset nullsub_2  +
push 71h  +
jmp loc_1056389  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10563A5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10563A5  +
push [ebp+arg_0]  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 72h  +
jmp loc_1056389  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_4] +
push esi  +
push esi  +
push eax  +
call sub_10557A3  +
cmp eax esi +
mov [ebp+arg_0] eax +
jge loc_1056396  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10563A5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10563A5  +
push [ebp+arg_0]  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 74h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10563A5  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_4] +
lea eax [eax+ebx+1] +
mov [ecx] eax +
mov [ebp+arg_0] esi +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea eax [ebp+var_C] +
push eax  +
mov edi offset asc_1003DD4 +
push edi  +
push [ebp+arg_0]  +
mov [ebp+var_4] ecx +
jmp loc_1056415  +
mov ecx [ebp+var_4] +
push eax  +
call sub_1055BE8  +
test eax eax +
jz loc_105646A  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_4] +
push ebx  +
push esi  +
push eax  +
call sub_10557A3  +
mov [ebp+arg_4] eax +
test eax eax +
jl loc_1056493  +
mov eax [ebp+var_8] +
lea esi [esi+eax*2] +
sub ebx eax +
lea eax [ebp+var_C] +
push eax  +
push edi  +
push 0  +
call sub_10461EC  +
add esp 0Ch +
test eax eax +
jnz loc_10563DF  +
mov ecx [ebp+var_4] +
push offset aSignscope  +
call sub_1055BE8  +
test eax eax +
jnz loc_10564B6  +
mov ecx 80070490h +
mov [ebp+arg_4] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10564F8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10564F8  +
push ecx  +
push offset aSignscopeField  +
push offset nullsub_2  +
push 77h  +
jmp loc_10564ED  +
mov ecx 80070490h +
mov [ebp+arg_4] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10564F8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10564F8  +
push ecx  +
push offset aFieldInSignsco  +
push offset nullsub_2  +
push 75h  +
jmp loc_10564ED  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10564F8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10564F8  +
push [ebp+arg_4]  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 76h  +
jmp loc_10564ED  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_4] +
push ebx  +
push esi  +
push eax  +
call sub_10557A3  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_10564F8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10564F8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10564F8  +
push [ebp+arg_4]  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 78h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104AB9F  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_1056526  +
add eax 18h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104AB9F  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [esi] eax +
test eax eax +
jz loc_1056553  +
add eax 18h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100E730 +
mov dword ptr [esi+18h] offset off_100E6B0 +
call sub_105506E  +
lea ecx [esi+3Ch] +
call sub_104AB9F  +
mov eax [esi+38h] +
test eax eax +
jz loc_1056596  +
and dword ptr [esi+38h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
mov dword ptr [esi+4] offset off_10025A4 +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_10575BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax-8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax-8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1014h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp-1008h] edi +
mov [ebp-1010h] edi +
cmp ebx edi +
jz loc_105663C  +
mov ecx [esi+20h] +
cmp ecx edi +
jz loc_1056648  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
jmp loc_1056648  +
mov ebx [esi+20h] +
cmp [esi+10h] edi +
jz loc_105680D  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+10h]  +
test eax eax +
jnz loc_105665E  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+18h]  +
test eax eax +
jz loc_1056665  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+20h]  +
mov eax [ebx] +
push 1  +
push edi  +
mov ecx ebx +
call dword ptr [eax+14h]  +
mov edi eax +
test edi edi +
jl loc_10567E6  +
mov eax [esi+18h] +
mov [ebp-100Ch] eax +
test eax eax +
jz loc_105675A  +
add esi 0FFFFFFE8h +
mov [ebp-1014h] esi +
mov ecx [ebp-1014h] +
lea eax [ebp-1010h] +
push eax  +
push 0  +
push 0  +
push dword ptr [ebp-100Ch]  +
call sub_10557A3  +
mov edi eax +
test edi edi +
jl loc_1056761  +
cmp dword ptr [ebp-1008h] 0 +
jz loc_10566DB  +
lea eax [ebp-1004h] +
cmp [ebp-1008h] eax +
jz loc_10566DB  +
push dword ptr [ebp-1008h]  +
call sub_105D688  +
mov esi [ebp-1010h] +
mov eax 800h +
cmp esi eax +
jnb loc_10566FA  +
lea ecx [ebp-1004h] +
mov [ebp-1008h] ecx +
mov esi eax +
jmp loc_105670E  +
inc esi  +
lea eax [esi+esi] +
push eax  +
call sub_105D670  +
mov [ebp-1008h] eax +
test eax eax +
jz loc_105678A  +
mov ecx [ebp-1014h] +
push 0  +
push esi  +
push dword ptr [ebp-1008h]  +
mov esi [ebp-100Ch] +
push esi  +
call sub_10557A3  +
mov edi eax +
test edi edi +
jl loc_10567BA  +
push dword ptr [ebp-1008h]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+1Ch]  +
mov edi eax +
test edi edi +
jl loc_1056836  +
mov eax [esi] +
mov [ebp-100Ch] eax +
test eax eax +
jnz loc_1056693  +
xor edi edi +
jmp loc_1056836  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056836  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056836  +
push edi  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 0Eh  +
jmp loc_10567D9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10567B3  +
test byte ptr [eax+1Ch] 4 +
jz loc_10567B3  +
push offset aSzbuf  +
push offset nullsub_2  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 8007000Eh +
jmp loc_1056836  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056836  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056836  +
push edi  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1056836  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056858  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056858  +
push edi  +
push offset nullsub_2  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1056858  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056831  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056831  +
push offset nullsub_2  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 80070005h +
cmp dword ptr [ebp-1008h] 0 +
jz loc_1056858  +
lea eax [ebp-1004h] +
cmp [ebp-1008h] eax +
jz loc_1056858  +
push dword ptr [ebp-1008h]  +
call sub_105D688  +
mov ecx [ebp-4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1024h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ecx +
mov esi [edi+18h] +
mov [ebp-1020h] eax +
mov [ebp-1014h] ebx +
mov [ebp-1010h] ebx +
mov [ebp-101Ch] ebx +
mov [ebp-1008h] ebx +
mov [ebp-100Ch] ebx +
cmp esi ebx +
jz loc_1056914  +
lea eax [ebp-1018h] +
push eax  +
push 0  +
push 0  +
push esi  +
lea ecx [edi-18h] +
call sub_10557A3  +
mov [ebp-1008h] eax +
test eax eax +
jl loc_1056962  +
mov ecx [ebp-1018h] +
lea eax [ecx+ebx] +
cmp eax ebx +
jb loc_105692F  +
cmp eax ecx +
jb loc_105692F  +
mov ebx eax +
cmp ecx [ebp-100Ch] +
jbe loc_1056901  +
mov [ebp-100Ch] ecx +
mov esi [esi] +
test esi esi +
jnz loc_10568BE  +
mov eax [ebp-100Ch] +
cmp eax 800h +
jnb loc_1056993  +
lea eax [ebp-1004h] +
mov [ebp-1010h] eax +
mov dword ptr [ebp-100Ch] 800h +
jmp loc_10569D1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056953  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056953  +
push offset nullsub_2  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [ebp-1008h] 8007000Eh +
jmp loc_1056AF1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056AAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056AAF  +
push dword ptr [ebp-1008h]  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 14h  +
jmp loc_1056A73  +
inc eax  +
mov [ebp-100Ch] eax +
add eax eax +
push eax  +
call sub_105D670  +
mov [ebp-1010h] eax +
test eax eax +
jnz loc_10569C7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056953  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056953  +
push offset nullsub_2  +
push 15h  +
jmp loc_1056948  +
***
mov dword ptr [ebp-101Ch] 1 +
push ebx  +
push 0  +
call ds:SysAllocStringLen  +
mov [ebp-1014h] eax +
test eax eax +
jz loc_1056A80  +
xor ecx ecx +
mov [eax+ebx*2] cx +
mov esi [edi+18h] +
mov ebx eax +
test esi esi +
jz loc_1056AAF  +
add edi 0FFFFFFE8h +
mov [ebp-1024h] edi +
mov ecx [ebp-1024h] +
lea eax [ebp-1018h] +
push eax  +
push dword ptr [ebp-100Ch]  +
push dword ptr [ebp-1010h]  +
push esi  +
call sub_10557A3  +
mov [ebp-1008h] eax +
test eax eax +
jl loc_1056A4F  +
mov edi [ebp-1018h] +
add edi edi +
push edi  +
push dword ptr [ebp-1010h]  +
push ebx  +
call memcpy  +
mov esi [esi] +
add esp 0Ch +
add ebx edi +
test esi esi +
jnz loc_1056A04  +
jmp loc_1056AAF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056AAF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056AAF  +
push dword ptr [ebp-1008h]  +
push offset aRecordtostring  +
push offset nullsub_2  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1056AAF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056AA5  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056AA5  +
push ebx  +
push offset nullsub_2  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov dword ptr [ebp-1008h] 8007000Eh +
cmp dword ptr [ebp-1008h] 0 +
jl loc_1056AC8  +
mov eax [ebp-1020h] +
mov ecx [ebp-1014h] +
mov [eax] ecx +
jmp loc_1056ADD  +
cmp dword ptr [ebp-1014h] 0 +
jz loc_1056ADD  +
push dword ptr [ebp-1014h]  +
call ds:SysFreeString  +
cmp dword ptr [ebp-101Ch] 0 +
jz loc_1056AF1  +
push dword ptr [ebp-1010h]  +
call sub_105D688  +
mov ecx [ebp-4] +
mov eax [ebp-1008h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1056BAB  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1056BAB  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1056BAB  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_1055BE8  +
test eax eax +
jz loc_1056B87  +
cmp dword ptr [eax+88h] 1 +
jnz loc_1056B87  +
push dword ptr [eax+8Ch]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101BD65  +
test eax eax +
jl loc_1056B5E  +
xor eax eax +
inc eax  +
jmp loc_1056BAD  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1056BAB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1056BAB  +
push eax  +
push offset nullsub_2  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
jmp loc_1056BAB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056BAB  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056BAB  +
push offset nullsub_2  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1056C6C  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1056C6C  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1056C6C  +
cmp dword ptr [ebp+14h] 0 +
jz loc_1056C6C  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_1055BE8  +
test eax eax +
jz loc_1056C33  +
cmp dword ptr [eax+88h] 1 +
jnz loc_1056C33  +
push dword ptr [eax+8Ch]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call sub_101BD65  +
test eax eax +
jl loc_1056C15  +
xor eax eax +
inc eax  +
jmp loc_1056C6E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1056C6C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1056C6C  +
push eax  +
push offset nullsub_2  +
push 1Ah  +
jmp loc_1056C61  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call sub_101BD65  +
test eax eax +
jge loc_1056C10  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1056C6C  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1056C6C  +
push eax  +
push offset nullsub_2  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
jz loc_1056CF7  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1056CF7  +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1056CE8  +
cmp dword ptr [ebp+14h] 0 +
jnz loc_1056CE8  +
mov edx [ebp+10h] +
mov si [eax] +
cmp si [edx] +
jnz loc_1056CBF  +
test si si +
jz loc_1056CBB  +
mov si [eax+2] +
cmp si [edx+2] +
jnz loc_1056CBF  +
add eax 4 +
add edx 4 +
test si si +
jnz loc_1056C99  +
xor eax eax +
jmp loc_1056CC4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1056CE8  +
push dword ptr [ebp+8]  +
lea esi [ecx-18h] +
mov ecx esi +
call sub_1055BE8  +
test eax eax +
jz loc_1056CE3  +
push eax  +
mov ecx esi +
call sub_10550B8  +
jmp loc_1056CF9  +
xor eax eax +
inc eax  +
jmp loc_1056CF9  +
push dword ptr [ebp+10h]  +
mov eax [ecx] +
push 1  +
push dword ptr [ebp+8]  +
call dword ptr [eax+68h]  +
jmp loc_1056CF9  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1056D78  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1056D78  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1056D78  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_1055BE8  +
test eax eax +
jz loc_1056D78  +
cmp dword ptr [eax+88h] 2 +
jnz loc_1056D78  +
mov ecx [eax+90h] +
cmp ecx [ebp+10h] +
ja loc_1056D54  +
push ecx  +
push dword ptr [eax+8Ch]  +
push dword ptr [ebp+0Ch]  +
call memcpy  +
xor eax eax +
add esp 0Ch +
inc eax  +
jmp loc_1056D7A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056D78  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056D78  +
push offset nullsub_2  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
jz loc_1056DDF  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_1056DDF  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_1055BE8  +
test eax eax +
jz loc_1056DBB  +
cmp dword ptr [eax+88h] 0 +
jnz loc_1056DBB  +
mov eax [eax+8Ch] +
mov [esi] eax +
xor eax eax +
inc eax  +
jmp loc_1056DE1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056DDF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056DDF  +
push offset nullsub_2  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
jz loc_1056E28  +
mov esi [ebp+10h] +
test esi esi +
jz loc_1056E28  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_1055BE8  +
test eax eax +
jz loc_1056E23  +
cmp dword ptr [eax+88h] 0 +
jnz loc_1056E23  +
mov eax [eax+8Ch] +
mov [esi] eax +
xor eax eax +
inc eax  +
jmp loc_1056E2A  +
mov eax [ebp+0Ch] +
jmp loc_1056E1C  +
***
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2014h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
push 0FFEh  +
push eax  +
mov word ptr [ebp+var_1004] ax +
lea eax [ebp+var_1004+2] +
push eax  +
mov [ebp+var_2014] ecx +
mov [ebp+var_2010] esi +
call memset  +
mov eax esi +
add esp 0Ch +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1056E82  +
sub eax ecx +
sar eax 1 +
lea ebx [eax+1] +
mov esi 800h +
cmp ebx esi +
ja loc_1056EAC  +
lea eax [ebp+var_1004] +
mov [ebp+var_2008] eax +
mov ebx esi +
jmp loc_1056EF6  +
lea edi [ebx+ebx] +
push edi  +
call sub_105D670  +
mov [ebp+var_2008] eax +
test eax eax +
jnz loc_1056EEA  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1056EE3  +
test byte ptr [eax+1Ch] 4 +
jz loc_1056EE3  +
push offset nullsub_2  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor esi esi +
jmp loc_1057044  +
push edi  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 1000h  +
lea eax [ebp+var_2004] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+var_2014] +
add esp 0Ch +
push ebx  +
push [ebp+var_2008]  +
lea eax [ebp+var_2004] +
push esi  +
push eax  +
lea eax [ebp+var_200C] +
push eax  +
push [ebp+var_2010]  +
call sub_10553D9  +
mov eax lpReserved +
mov edi offset lpReserved +
cmp eax edi +
jz loc_1056F6C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1056F6C  +
push [ebp+var_200C]  +
lea ecx [ebp+var_2004] +
push [ebp+var_2008]  +
push ecx  +
push offset nullsub_2  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1049C05  +
mov eax [ebp+var_200C] +
test eax eax +
jz loc_1056F8C  +
cmp eax 1 +
jz loc_1056F8C  +
cmp eax 2 +
jz loc_1056F8C  +
cmp eax 3 +
jz loc_1056F91  +
xor esi esi +
jmp loc_1057022  +
cmp eax 3 +
jnz loc_1056FF0  +
push [ebp+var_2010]  +
push ebx  +
push [ebp+var_2008]  +
call sub_101BD65  +
test eax eax +
jge loc_1056FF0  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_1056FD0  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1056FD0  +
push eax  +
push offset nullsub_2  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov ecx lpReserved +
xor esi esi +
cmp ecx edi +
jz loc_1057022  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1057022  +
push offset nullsub_2  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1018898  +
jmp loc_1057022  +
push [ebp+var_2008]  +
mov esi [ebp+var_2014] +
push [ebp+var_200C]  +
lea eax [ebp+var_2004] +
add esi 18h +
mov edi [esi] +
push eax  +
call _wcslwr  +
pop ecx  +
push eax  +
mov ecx esi +
call dword ptr [edi+68h]  +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
cmp [ebp+var_2008] 0 +
jz loc_1057044  +
lea eax [ebp+var_1004] +
cmp [ebp+var_2008] eax +
jz loc_1057044  +
push [ebp+var_2008]  +
call sub_105D688  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
jz loc_10570D9  +
cmp dword ptr [ebp+10h] 0 +
jz loc_10570D9  +
push dword ptr [ebp+8]  +
lea esi [ecx-18h] +
mov ecx esi +
call sub_1055BE8  +
mov edi eax +
test edi edi +
jz loc_10570AA  +
push edi  +
call sub_1054F61  +
test eax eax +
jz loc_10570D9  +
push dword ptr [ebp+10h]  +
mov eax [ebp+0Ch] +
push eax  +
push edi  +
mov ecx esi +
mov [edi+88h] eax +
call sub_105561E  +
test eax eax +
jz loc_10570D9  +
xor eax eax +
inc eax  +
jmp loc_10570DB  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1055CB7  +
mov edi eax +
test edi edi +
jz loc_10570D9  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_105561E  +
test eax eax +
jz loc_10570D9  +
push edi  +
mov ecx esi +
call sub_1054FD4  +
jmp loc_10570A1  +
***
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_1057147  +
push [ebp+arg_0]  +
call sub_1055BE8  +
mov esi eax +
test esi esi +
jz loc_1057122  +
push esi  +
call sub_1054F61  +
test eax eax +
jz loc_1057147  +
mov eax [ebp+arg_4] +
and dword ptr [esi+88h] 0 +
mov [esi+8Ch] eax +
xor eax eax +
inc eax  +
jmp loc_1057149  +
push 0  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1055CB7  +
test eax eax +
jz loc_1057147  +
mov ecx [ebp+arg_4] +
mov [eax+8Ch] ecx +
push eax  +
mov ecx edi +
call sub_1054FD4  +
test eax eax +
jnz loc_105711D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_10571FD  +
push dword ptr [ebp+8]  +
call sub_1055BE8  +
mov esi eax +
test esi esi +
jz loc_10571B5  +
push esi  +
call sub_1054F61  +
test eax eax +
jz loc_10571FD  +
mov edi [ebp+10h] +
push edi  +
mov dword ptr [esi+88h] 2 +
call sub_105D670  +
mov [esi+8Ch] eax +
test eax eax +
jz loc_10571FD  +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call memcpy  +
xor eax eax +
add esp 0Ch +
mov [esi+90h] edi +
inc eax  +
jmp loc_10571FF  +
push 2  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_1055CB7  +
mov esi eax +
test esi esi +
jz loc_10571FD  +
mov edi [ebp+10h] +
push edi  +
call sub_105D670  +
mov [esi+8Ch] eax +
test eax eax +
jz loc_10571FD  +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call memcpy  +
add esp 0Ch +
push esi  +
mov ecx ebx +
mov [esi+90h] edi +
call sub_1054FD4  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_10571FF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [eax] edi +
mov eax [ebp+arg_4] +
mov [eax] edi +
lea eax [ebp+var_C] +
push eax  +
mov [ebp+var_10] ecx +
mov [ebp+var_4] edi +
mov [ebp+var_C] edi +
call sub_105611C  +
mov esi eax +
cmp esi edi +
jge loc_1057266  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057317  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057317  +
push esi  +
push offset aCrdpsettings_0  +
push offset nullsub_2  +
push 60h  +
jmp loc_1057352  +
mov ebx [ebp+var_C] +
lea eax [ebx+ebx] +
push eax  +
call sub_105D670  +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_10572A9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10572A2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10572A2  +
push offset aSzsignscope  +
push offset nullsub_2  +
push 61h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_105731D  +
mov [ebp+var_8] ebx +
mov [ebp+var_C] eax +
push ds:off_100E1C8[edi]  +
mov ecx [ebp+var_10] +
call sub_1055BE8  +
test eax eax +
jz loc_10572FA  +
push 800h  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push ds:off_100E1C8[edi]  +
push [ebp+var_8]  +
push [ebp+var_C]  +
call sub_10551F0  +
mov esi eax +
test esi esi +
jl loc_1057333  +
cmp [ebp+var_8] 2 +
jb loc_10572FA  +
mov eax [ebp+var_C] +
push 2Ch  +
pop ecx  +
mov [eax] cx +
xor ecx ecx +
mov [eax+2] cx +
add edi 8 +
cmp edi 148h +
jb loc_10572AF  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [ebp+arg_4] +
xor esi esi +
mov [eax] ebx +
mov [ebp+var_4] esi +
xor edi edi +
cmp esi edi +
jge loc_105732A  +
cmp [ebp+var_4] edi +
jz loc_105732A  +
push [ebp+var_4]  +
call sub_105D688  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057317  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057317  +
push esi  +
push offset aStringcchcatex  +
push offset nullsub_2  +
push 62h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057317  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor esi esi +
mov [eax] esi +
mov eax [ebp+arg_4] +
mov [eax] esi +
mov eax [ebp+arg_0] +
mov [ebp+var_10] ecx +
push edi  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_105738A  +
sub eax ecx +
sar eax 1 +
lea edi [eax+1] +
lea eax [edi+edi] +
push eax  +
call sub_105D670  +
mov ebx eax +
mov [ebp+var_C] ebx +
cmp ebx esi +
jnz loc_10573E0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10573D6  +
test byte ptr [eax+1Ch] 4 +
jz loc_10573D6  +
push offset aSztempscope  +
push offset nullsub_2  +
push 68h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_105753D  +
push [ebp+arg_0]  +
push edi  +
push ebx  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_105741C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057527  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057527  +
push esi  +
push offset aStringcchcop_1  +
push offset nullsub_2  +
push 69h  +
jmp loc_105750A  +
mov ecx [ebp+var_10] +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
call sub_1056252  +
mov esi eax +
test esi esi +
jge loc_105745B  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057527  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057527  +
push esi  +
push offset aCalculatesecur  +
push offset nullsub_2  +
push 6Ah  +
jmp loc_105750A  +
mov ebx [ebp+var_8] +
add ebx ebx +
push ebx  +
call sub_105D670  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_10574A0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057496  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057496  +
push offset aSzblob  +
push offset nullsub_2  +
push 6Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_1057527  +
push [ebp+arg_0]  +
push edi  +
push [ebp+var_C]  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_10574D3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057527  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057527  +
push esi  +
push offset aStringcchcop_1  +
push offset nullsub_2  +
push 6Ch  +
jmp loc_105750A  +
push [ebp+var_8]  +
mov edi [ebp+var_4] +
mov ecx [ebp+var_10] +
push edi  +
push [ebp+var_C]  +
call sub_10563B4  +
mov esi eax +
test esi esi +
jge loc_1057517  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057527  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057527  +
push esi  +
push offset aCopysecuresett  +
push offset nullsub_2  +
push 6Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057527  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [eax] edi +
mov eax [ebp+arg_8] +
mov [eax] ebx +
xor esi esi +
push [ebp+var_C]  +
call sub_105D688  +
cmp [ebp+var_4] 0 +
jz loc_105753D  +
push [ebp+var_4]  +
call sub_105D688  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push offset aCrdpsettings_1  +
mov esi ecx +
call sub_101CA2D  +
mov dword ptr [esi+18h] offset off_100E330 +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100E730 +
mov dword ptr [esi+18h] offset off_100E6B0 +
lea ecx [esi+38h] +
mov [ecx] edi +
lea ebx [esi+3Ch] +
mov [ebx] edi +
push edi  +
mov dword ptr [esi+1Ch] 1 +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov [esi+34h] edi +
call sub_1054923  +
mov ecx ebx +
call sub_104AB9F  +
mov [ebx] edi +
mov [esi+40h] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105655F  +
test byte ptr [ebp+8] 1 +
jz loc_10575D4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+10h] eax +
jnz loc_10575EF  +
inc eax  +
jmp loc_1057604  +
cmp [ebp+8] eax +
jz loc_1057602  +
cmp [ebp+0Ch] eax +
jz loc_1057602  +
add ecx 0FFFFFFE8h +
pop ebp  +
jmp loc_1057154  +
***
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
jz loc_1057655  +
cmp dword ptr [ebp+14h] 0 +
mov eax [ebp+10h] +
jnz loc_1057647  +
cmp [ebp+0Ch] eax +
jnz loc_1057647  +
push dword ptr [ebp+8]  +
lea esi [ecx-18h] +
mov ecx esi +
call sub_1055BE8  +
test eax eax +
jz loc_1057642  +
push eax  +
mov ecx esi +
call sub_10550B8  +
jmp loc_1057657  +
xor eax eax +
inc eax  +
jmp loc_1057657  +
push eax  +
push dword ptr [ebp+8]  +
add ecx 0FFFFFFE8h +
call sub_10570E6  +
jmp loc_1057657  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+38h] +
mov eax [ecx] +
push edi  +
mov edi 80004005h +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_1057718  +
mov ecx esi +
call sub_105506E  +
mov ecx [esi+38h] +
mov eax [ecx] +
call dword ptr [eax+34h]  +
mov edi eax +
test edi edi +
jge loc_10576C1  +
cmp edi 80070018h +
jnz loc_105769B  +
xor edi edi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057718  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057718  +
push offset nullsub_2  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1057718  +
mov ecx [esi+38h] +
mov eax [ecx] +
call dword ptr [eax+28h]  +
test eax eax +
jz loc_1057718  +
jmp loc_10576E1  +
cmp word ptr [eax] 0 +
jz loc_1057718  +
push eax  +
mov ecx esi +
call sub_1056E34  +
test eax eax +
jz loc_10576EF  +
mov ecx [esi+38h] +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
test eax eax +
jnz loc_10576CF  +
jmp loc_1057718  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057713  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057713  +
push offset nullsub_2  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 8007000Dh +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
xor edi edi +
mov ebx ecx +
mov [ebp+var_10] edi +
mov [ebp+var_8] edi +
mov [ebp+var_C] edi +
mov [ebp+var_4] edi +
cmp [ebp+arg_0] edi +
jnz loc_1057753  +
cmp [ebx+3Ch] edi +
jz loc_1057753  +
cmp [ebx+40h] edi +
jz loc_1057753  +
mov [ebp+arg_0] edi +
jmp loc_1057B9A  +
push esi  +
lea esi [ebx+3Ch] +
mov ecx esi +
call sub_104AB9F  +
mov [esi] edi +
mov esi offset aSignature +
push esi  +
mov ecx ebx +
mov [ebx+40h] edi +
call sub_1055BE8  +
cmp eax edi +
jnz loc_10577B3  +
mov esi 80070490h +
mov [ebp+arg_0] esi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057B7C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B7C  +
push esi  +
push offset aCrdpsettings_2  +
push offset nullsub_2  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057B7C  +
cmp dword ptr [eax+88h] 1 +
jz loc_10577ED  +
mov esi 80070490h +
mov [ebp+arg_0] esi +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057B7C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B7C  +
push esi  +
push offset aCrdpsettings_2  +
push offset nullsub_2  +
push 49h  +
jmp loc_10577A3  +
lea ecx [ebp+var_10] +
push ecx  +
push 7FFFFFFFh  +
push dword ptr [eax+8Ch]  +
call sub_102AAF4  +
cmp eax edi +
mov [ebp+arg_0] eax +
jge loc_1057836  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057B7C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B7C  +
push [ebp+arg_0]  +
push offset aStringcchlen_1  +
push offset nullsub_2  +
push 4Ah  +
jmp loc_10577A3  +
mov edi [ebp+var_10] +
test edi edi +
jnz loc_105787C  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057B7A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B7A  +
push ecx  +
push offset aSignatureIsZer  +
push offset nullsub_2  +
push 4Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057B7A  +
lea eax [edi+edi+2] +
push eax  +
call sub_105D670  +
mov [ebp+var_10] eax +
test eax eax +
jnz loc_10578C2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10578B6  +
test byte ptr [eax+1Ch] 4 +
jz loc_10578B6  +
push offset aSzsignature  +
push offset nullsub_2  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_1057B6C  +
inc edi  +
push edi  +
lea ecx [ebx+18h] +
mov edx [ecx] +
push eax  +
push esi  +
call dword ptr [edx+30h]  +
test eax eax +
jnz loc_1057909  +
mov eax lpReserved +
mov esi 80070490h +
cmp eax offset lpReserved +
jz loc_1057901  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057901  +
push esi  +
push offset aReadstringnode  +
push offset nullsub_2  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov [ebp+arg_0] esi +
jmp loc_1057B6C  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_10]  +
call sub_105167A  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_1057959  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057B6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B6C  +
push [ebp+arg_0]  +
push offset aBase64stringto  +
push offset nullsub_2  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057B6C  +
cmp [ebp+var_C] 0Ch +
jnb loc_1057990  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057B6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B6C  +
push ecx  +
push offset aTooFewBytesInS  +
push offset nullsub_2  +
push 4Fh  +
jmp loc_1057949  +
mov eax [ebp+var_8] +
cmp byte ptr [eax] 1 +
mov [ebp+arg_0] eax +
jz loc_10579CF  +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057B6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B6C  +
push ecx  +
push offset aFailedVersionC  +
push offset nullsub_2  +
push 50h  +
jmp loc_1057949  +
add eax 2 +
mov [ebp+var_14] eax +
movzx eax word ptr [eax] +
dec eax  +
jz loc_1057AAB  +
dec eax  +
jz loc_1057A36  +
mov eax lpReserved +
mov edi offset lpReserved +
mov esi offset nullsub_2 +
cmp eax edi +
jz loc_1057A0E  +
test byte ptr [eax+1Ch] 2 +
jz loc_1057A0E  +
push esi  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax lpReserved +
mov ecx 8007000Dh +
mov [ebp+arg_0] ecx +
cmp eax edi +
jz loc_1057B6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B6C  +
push ecx  +
push offset aFailedSignatur  +
push esi  +
push 56h  +
jmp loc_1057949  +
mov eax lpReserved +
mov edi offset lpReserved +
mov esi offset nullsub_2 +
cmp eax edi +
jz loc_1057A5D  +
test byte ptr [eax+1Ch] 2 +
jz loc_1057A5D  +
push esi  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1057A72  +
mov ecx eax +
call sub_1059881  +
jmp loc_1057A74  +
xor eax eax +
push eax  +
lea ecx [ebp+var_4] +
call sub_1056507  +
cmp [ebp+var_4] 0 +
jnz loc_1057B1C  +
mov eax lpReserved +
cmp eax edi +
jz loc_10578B6  +
test byte ptr [eax+1Ch] 4 +
jz loc_10578B6  +
push offset aCtsrdpusersign  +
push esi  +
push 54h  +
jmp loc_10578AB  +
mov eax lpReserved +
mov edi offset lpReserved +
mov esi offset nullsub_2 +
cmp eax edi +
jz loc_1057AD2  +
test byte ptr [eax+1Ch] 2 +
jz loc_1057AD2  +
push esi  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push 38h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1057AE7  +
mov ecx eax +
call sub_1058730  +
jmp loc_1057AE9  +
xor eax eax +
push eax  +
lea ecx [ebp+var_4] +
call sub_1056507  +
cmp [ebp+var_4] 0 +
jnz loc_1057B1C  +
mov eax lpReserved +
cmp eax edi +
jz loc_10578B6  +
test byte ptr [eax+1Ch] 4 +
jz loc_10578B6  +
push offset aCtsrdpcertsi_1  +
push esi  +
push 52h  +
jmp loc_10578AB  +
push [ebp+var_C]  +
mov ecx [ebp+var_4] +
push [ebp+arg_0]  +
add ecx 18h +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_1057B53  +
mov eax lpReserved +
cmp eax edi +
jz loc_1057B6C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057B6C  +
push [ebp+arg_0]  +
push offset aCtsrdpsignatur  +
push esi  +
push 57h  +
jmp loc_1057949  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebx+3Ch] +
call sub_1056532  +
mov eax [ebp+var_14] +
movzx eax word ptr [eax] +
and [ebp+arg_0] 0 +
mov [ebx+40h] eax +
cmp [ebp+var_10] 0 +
jz loc_1057B7A  +
push [ebp+var_10]  +
call sub_105D688  +
xor edi edi +
pop esi  +
cmp [ebp+var_8] edi +
jz loc_1057B8A  +
push [ebp+var_8]  +
call sub_105D688  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_1057B9A  +
add eax 18h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+18h] +
mov eax [esi] +
push offset aSignscope  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov eax [esi] +
push offset aSignature  +
mov ecx esi +
call dword ptr [eax+58h]  +
lea esi [edi+3Ch] +
mov ecx esi +
call sub_104AB9F  +
and dword ptr [esi] 0 +
and dword ptr [edi+40h] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jz loc_1057CC5  +
mov ebx [ebp+0Ch] +
push dword ptr [ebp+8]  +
lea edi [esi+20h] +
mov ecx edi +
mov [esi+8] ebx +
call sub_1054923  +
mov ecx [edi] +
test ecx ecx +
jnz loc_1057C3F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057C33  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057C33  +
push offset nullsub_2  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_1057CF0  +
mov eax [ecx] +
push 0  +
call dword ptr [eax+0Ch]  +
mov [ebp+8] eax +
test eax eax +
jl loc_1057C9C  +
mov ecx [edi] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov [esi+0Ch] eax +
xor eax eax +
test ebx ebx +
setz al  +
lea ecx [esi-18h] +
mov [esi+10h] eax +
call sub_1057661  +
mov [ebp+8] eax +
test eax eax +
jge loc_1057C96  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057CF0  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057CF0  +
push offset nullsub_2  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1057CF0  +
and dword ptr [ebp+8] 0 +
jmp loc_1057CF0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057CF0  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057CF0  +
push dword ptr [ebp+8]  +
push offset nullsub_2  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_1057CF0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057CE9  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057CE9  +
push offset nullsub_2  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov dword ptr [ebp+8] 80070057h +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jnz loc_1057D42  +
mov ecx 80070057h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057D53  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057D53  +
push ecx  +
push offset aCrdpsettings_3  +
push offset nullsub_2  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057D53  +
push 0  +
lea ecx [esi-18h] +
call sub_1057722  +
mov eax [esi+28h] +
mov [edi] eax +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1014h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
xor eax eax +
push 0FFEh  +
mov [ebp-1004h] ax +
xor esi esi +
lea eax [ebp-1002h] +
push esi  +
push eax  +
mov edi ecx +
mov [ebp-100Ch] ebx +
call memset  +
add esp 0Ch +
mov [ebp-1008h] esi +
mov [ebp-1010h] esi +
cmp ebx esi +
jnz loc_1057DF3  +
mov esi 80070057h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FE0  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057FE0  +
push esi  +
push offset aCrdpsettings_4  +
push offset nullsub_2  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057FE0  +
mov [ebx] esi +
lea ebx [edi-18h] +
push 1  +
mov ecx ebx +
call sub_1057722  +
mov esi eax +
test esi esi +
jge loc_1057E33  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FD6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057FD6  +
push esi  +
push offset aCrdpsettings_2  +
push offset nullsub_2  +
push 41h  +
jmp loc_1057FA3  +
mov eax [edi] +
push 800h  +
lea ecx [ebp-1004h] +
push ecx  +
push offset aSignscope  +
mov ecx edi +
call dword ptr [eax+30h]  +
test eax eax +
jz loc_1057E68  +
lea eax [ebp-1004h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1057E58  +
sub eax edx +
sar eax 1 +
jnz loc_1057EA4  +
mov esi 80070490h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FDA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057FDA  +
push esi  +
push offset aEmptySignscope  +
push offset nullsub_2  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057FDA  +
lea eax [ebp-1004h] +
push eax  +
mov ecx ebx +
call sub_1055EBB  +
mov esi eax +
test esi esi +
jge loc_1057EE4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FD6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057FD6  +
push esi  +
push offset aCrdpsettings_5  +
push offset nullsub_2  +
push 43h  +
jmp loc_1057FA3  +
lea eax [ebp-1010h] +
push eax  +
lea eax [ebp-1008h] +
push eax  +
lea eax [ebp-1004h] +
push eax  +
mov ecx ebx +
call sub_1057364  +
mov esi eax +
test esi esi +
jge loc_1057F2F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FD6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057FD6  +
push esi  +
push offset aCrdpsettings_6  +
push offset nullsub_2  +
push 44h  +
jmp loc_1057FA3  +
mov eax [edi+24h] +
push dword ptr [ebp-1010h]  +
lea ecx [eax+18h] +
push dword ptr [ebp-1008h]  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov esi eax +
test esi esi +
jge loc_1057F6D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FD6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057FD6  +
push esi  +
push offset aCrdpsettings_7  +
push offset nullsub_2  +
push 45h  +
jmp loc_1057FA3  +
mov edi [edi+24h] +
push dword ptr [ebp-100Ch]  +
lea ecx [edi+18h] +
mov eax [ecx] +
call dword ptr [eax+28h]  +
mov esi eax +
test esi esi +
jge loc_1057FB0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FD6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1057FD6  +
push esi  +
push offset aSignatureVerif  +
push offset nullsub_2  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1057FD6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1057FD4  +
test byte ptr [eax+1Ch] 2 +
jz loc_1057FD4  +
push offset nullsub_2  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor esi esi +
test esi esi +
jge loc_1058012  +
mov ebx [ebp-100Ch] +
cmp dword ptr [ebx] 0 +
jnz loc_1058012  +
mov eax esi +
and eax 0FFFFh +
cmp eax 0Dh +
jz loc_105800C  +
xor ecx ecx +
cmp eax 490h +
setz cl  +
dec ecx  +
and ecx 0FF00000h +
add ecx 100000h +
mov [ebx] ecx +
jmp loc_1058012  +
mov dword ptr [ebx] 200000h +
cmp dword ptr [ebp-1008h] 0 +
jz loc_1058026  +
push dword ptr [ebp-1008h]  +
call sub_105D688  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_4] +
mov ebx ecx +
push eax  +
mov [ebp+var_14] ebx +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
mov [ebp+var_18] esi +
mov [ebp+var_C] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_10] esi +
mov [ebp+var_24] esi +
mov [ebp+var_20] esi +
call sub_105720B  +
mov edi eax +
cmp edi esi +
jge loc_10580A7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105829F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105829F  +
push edi  +
push offset aFailedGenerate  +
push offset nullsub_2  +
push 58h  +
jmp loc_1058236  +
push [ebp+var_4]  +
xor esi esi +
inc esi  +
add ebx 18h +
mov eax [ebx] +
push esi  +
push offset aSignscope  +
mov ecx ebx +
call dword ptr [eax+68h]  +
test eax eax +
jnz loc_10580FD  +
mov eax lpReserved +
mov edi 80004005h +
cmp eax offset lpReserved +
jz loc_10582B1  +
test byte ptr [eax+1Ch] 4 +
jz loc_10582B1  +
push edi  +
push offset aInsertrecordFa  +
push offset nullsub_2  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10582B1  +
mov ecx [ebp+var_14] +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
mov [ebp+var_20] esi +
call sub_1057364  +
mov edi eax +
test edi edi +
jge loc_1058145  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105829F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105829F  +
push edi  +
push offset aCrdpsettings_6  +
push offset nullsub_2  +
push 5Ah  +
jmp loc_1058236  +
push [ebp+var_18]  +
mov esi [ebp+arg_0] +
push [ebp+var_8]  +
add esi 18h +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
mov edi eax +
test edi edi +
jge loc_105818A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105829F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105829F  +
push edi  +
push offset aCtsrdpsignat_0  +
push offset nullsub_2  +
push 5Bh  +
jmp loc_1058236  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+24h]  +
mov edi eax +
test edi edi +
jge loc_10581C0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105829F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105829F  +
push edi  +
push offset aCtsrdpsignat_1  +
push offset nullsub_2  +
push 5Ch  +
jmp loc_1058236  +
mov eax [esi] +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_C] +
push ecx  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
mov edi eax +
test edi edi +
jge loc_10581FE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105829F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105829F  +
push edi  +
push offset aCtsrdpsignat_2  +
push offset nullsub_2  +
push 5Dh  +
jmp loc_1058236  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_1C]  +
push [ebp+var_C]  +
call sub_1051540  +
mov edi eax +
test edi edi +
jge loc_1058243  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105829F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105829F  +
push edi  +
push offset aBinarytobase64  +
push offset nullsub_2  +
push 5Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105829F  +
push [ebp+var_10]  +
mov eax [ebx] +
push 1  +
push offset aSignature  +
mov ecx ebx +
call dword ptr [eax+68h]  +
test eax eax +
jnz loc_1058289  +
mov eax lpReserved +
mov edi 80004005h +
cmp eax offset lpReserved +
jz loc_10582A9  +
test byte ptr [eax+1Ch] 4 +
jz loc_10582A9  +
push edi  +
push offset aInsertrecordFa  +
push offset nullsub_2  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10582A9  +
mov esi [ebp+var_14] +
push [ebp+arg_0]  +
lea ecx [esi+3Ch] +
call sub_1056507  +
mov eax [ebp+arg_4] +
mov [esi+40h] eax +
xor edi edi +
test edi edi +
jge loc_10582B1  +
cmp [ebp+var_20] 0 +
jz loc_10582B1  +
mov ecx [ebp+var_14] +
call sub_1057BA8  +
xor esi esi +
cmp [ebp+var_4] esi +
jz loc_10582C0  +
push [ebp+var_4]  +
call sub_105D688  +
cmp [ebp+var_8] esi +
jz loc_10582CD  +
push [ebp+var_8]  +
call sub_105D688  +
cmp [ebp+var_C] esi +
jz loc_10582DA  +
push [ebp+var_C]  +
call sub_105D688  +
cmp [ebp+var_10] esi +
jz loc_10582E7  +
push [ebp+var_10]  +
call sub_105D688  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
and dword ptr [ebp-210h] 0 +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jnz loc_1058358  +
mov edi 80070057h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10584A5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10584A5  +
push edi  +
push offset aCrdpsettings_8  +
push offset nullsub_2  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10584A5  +
push 38h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_105836D  +
mov ecx eax +
call sub_1058730  +
jmp loc_105836F  +
xor eax eax +
push ebx  +
push eax  +
lea ecx [ebp-210h] +
call sub_1056507  +
mov ebx [ebp-210h] +
test ebx ebx +
jnz loc_10583B9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10583AF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10583AF  +
push offset aCtsrdpcertsi_1  +
push offset nullsub_2  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 8007000Eh +
jmp loc_10584A4  +
lea ecx [ebx+2Ch] +
mov eax [ecx] +
push 0  +
push edi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_1058400  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105849B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105849B  +
push edi  +
push offset aCtsrdpcertsi_2  +
push offset nullsub_2  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105849B  +
mov eax [esi] +
mov edi offset aAlternateFullA +
push edi  +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jnz loc_1058440  +
mov eax [esi] +
push 104h  +
lea ecx [ebp-20Ch] +
push ecx  +
push offset aFullAddress  +
mov ecx esi +
call dword ptr [eax+30h]  +
test eax eax +
jz loc_1058440  +
mov eax [esi] +
push 1  +
lea ecx [ebp-20Ch] +
push ecx  +
push 0  +
push edi  +
mov ecx esi +
call dword ptr [eax+38h]  +
push 1  +
push ebx  +
lea ecx [esi-18h] +
call sub_105803E  +
mov edi eax +
test edi edi +
jge loc_1058475  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105849B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105849B  +
push edi  +
push offset aInternalsignFa  +
push offset nullsub_2  +
push 38h  +
jmp loc_10583F0  +
***
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058499  +
test byte ptr [eax+1Ch] 2 +
jz loc_1058499  +
push offset nullsub_2  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor edi edi +
lea eax [ebx+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebx  +
mov ecx [ebp-4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
push edi  +
push 2Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10584DF  +
mov ecx eax +
call sub_1059881  +
jmp loc_10584E1  +
xor eax eax +
push eax  +
lea ecx [ebp-4] +
call sub_1056507  +
mov edi [ebp-4] +
test edi edi +
jnz loc_1058521  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105851A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105851A  +
push offset aCtsrdpusersign  +
push offset nullsub_2  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_105858D  +
push 2  +
push edi  +
lea ecx [esi-18h] +
call sub_105803E  +
mov esi eax +
test esi esi +
jge loc_105855E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058584  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058584  +
push esi  +
push offset aInternalsignFa  +
push offset nullsub_2  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1058584  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058582  +
test byte ptr [eax+1Ch] 2 +
jz loc_1058582  +
push offset nullsub_2  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor esi esi +
lea eax [edi+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov eax [ecx+1Ch] +
mov [ecx+20h] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
mov eax [ecx+20h] +
mov edx eax +
test edx edx +
jz locret_10585F2  +
push esi  +
jmp loc_10585C7  +
cmp si 0Dh +
jz loc_10585D5  +
cmp si 0Ah +
jz loc_10585CF  +
inc edx  +
inc edx  +
movzx esi word ptr [edx] +
test si si +
jnz loc_10585B9  +
cmp word ptr [edx] 0Dh +
jnz loc_10585D7  +
inc edx  +
inc edx  +
cmp word ptr [edx] 0Ah +
jnz loc_10585DF  +
inc edx  +
inc edx  +
movzx esi word ptr [edx] +
cmp si 0Dh +
jz loc_10585C7  +
cmp si 0Ah +
jz loc_10585C7  +
mov [ecx+20h] edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
push ebx  +
push [ebp+arg_0]  +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_100F038 +
call sub_101CA2D  +
mov dword ptr [edi] offset off_10025C4 +
pop edi  +
mov [esi+1Ch] ebx +
mov [esi+20h] ebx +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov dword ptr [esi] offset off_100DDC0 +
mov dword ptr [esi+8] offset off_100DDB0 +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jz loc_105865C  +
push eax  +
call ds:CertFreeCertificateContext  +
and dword ptr [esi+18h] 0 +
mov eax [esi+1Ch] +
test eax eax +
jz loc_105866E  +
push eax  +
call ds:CertFreeCertificateChain  +
and dword ptr [esi+1Ch] 0 +
mov ecx esi +
pop esi  +
jmp sub_10598C2  +
***
cmp dword ptr [ecx+2Ch] 0 +
jz loc_1058694  +
cmp dword ptr [ecx+30h] 0 +
jz loc_1058694  +
call sub_10598F8  +
test eax eax +
jz loc_1058694  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
push ebx  +
push esi  +
push edi  +
mov edi [eax] +
mov esi [edi+0Ch] +
mov eax esi +
shl eax 2 +
push eax  +
call sub_105D670  +
mov ebx eax +
test ebx ebx +
jnz loc_10586F0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10586E9  +
test byte ptr [eax+1Ch] 4 +
jz loc_10586E9  +
push offset aPcertarray  +
push offset dword_100F080  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov eax 8007000Eh +
jmp loc_1058724  +
and [ebp+arg_0] 0 +
test esi esi +
jbe loc_1058718  +
mov eax [edi+10h] +
mov ecx [ebp+arg_0] +
mov eax [eax+ecx*4] +
push dword ptr [eax+4]  +
call ds:CertDuplicateCertificateContext  +
mov ecx [ebp+arg_0] +
inc [ebp+arg_0]  +
mov [ebx+ecx*4] eax +
cmp [ebp+arg_0] esi +
jb loc_10586F8  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10599F1  +
mov dword ptr [esi+2Ch] offset off_100F090 +
and dword ptr [esi+30h] 0 +
and dword ptr [esi+34h] 0 +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100F0F8 +
mov dword ptr [esi+18h] offset off_100F0C8 +
mov dword ptr [esi+2Ch] offset off_100F0B8 +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 14h +
jmp loc_105867B  +
***
sub ecx 4 +
jmp loc_1059359  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100F0F8 +
mov dword ptr [ecx] offset off_100F0C8 +
mov dword ptr [esi+2Ch] offset off_100F0B8 +
call sub_1058645  +
mov ecx esi +
pop esi  +
jmp sub_10599A5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
mov esi ecx +
cmp [ebp+8] edi +
jz loc_105880B  +
push dword ptr [ebp+8]  +
call ds:CertDuplicateCertificateContext  +
mov ebx eax +
test ebx ebx +
jnz loc_105880B  +
mov eax lpReserved +
mov esi 8000FFFFh +
cmp eax offset lpReserved +
jz loc_105887E  +
test byte ptr [eax+1Ch] 4 +
jz loc_105887E  +
push esi  +
push offset aCertduplicatec  +
push offset dword_100F080  +
push 0Ah  +
jmp loc_1058843  +
cmp [ebp+0Ch] edi +
jz loc_1058850  +
push dword ptr [ebp+0Ch]  +
call ds:CertDuplicateCertificateChain  +
mov edi eax +
test edi edi +
jnz loc_1058850  +
mov eax lpReserved +
mov esi 8000FFFFh +
cmp eax offset lpReserved +
jz loc_105887E  +
test byte ptr [eax+1Ch] 4 +
jz loc_105887E  +
push esi  +
push offset aCertduplicat_0  +
push offset dword_100F080  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105887E  +
mov eax [esi+4] +
test eax eax +
jz loc_1058862  +
push eax  +
call ds:CertFreeCertificateContext  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_1058874  +
push eax  +
call ds:CertFreeCertificateChain  +
and dword ptr [esi+8] 0 +
mov [esi+4] ebx +
mov [esi+8] edi +
xor ebx ebx +
xor esi esi +
test ebx ebx +
jz loc_1058889  +
push ebx  +
call ds:CertFreeCertificateContext  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jnz loc_10588D7  +
mov ecx 80070057h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10588EE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10588EE  +
push ecx  +
push offset aGetcertificate  +
push offset dword_100F080  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10588EE  +
mov eax [ecx+4] +
test eax eax +
jz loc_10588E9  +
push eax  +
call ds:CertDuplicateCertificateContext  +
mov [esi] eax +
jmp loc_10588EC  +
and dword ptr [esi] 0 +
xor esi esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jnz loc_105892F  +
mov ecx 80070057h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058979  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058979  +
push ecx  +
push offset aGetcertifica_0  +
push offset dword_100F080  +
push 0Dh  +
jmp loc_1058967  +
mov eax [ecx+8] +
test eax eax +
jz loc_1058974  +
push eax  +
call ds:CertDuplicateCertificateChain  +
mov [esi] eax +
test eax eax +
jnz loc_1058977  +
mov eax lpReserved +
mov esi 8000FFFFh +
cmp eax offset lpReserved +
jz loc_1058979  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058979  +
push esi  +
push offset aCertduplicat_0  +
push offset dword_100F080  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1058979  +
and dword ptr [esi] 0 +
xor esi esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
mov eax ecx +
mov dword ptr [ebp-6Ch] 64h +
test esi esi +
jz loc_10589B0  +
test edi edi +
jnz loc_10589EE  +
mov ecx 80070057h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058AC2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058AC2  +
push ecx  +
push offset aGetcertifica_1  +
push offset dword_100F080  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1058AC2  +
and dword ptr [esi] 0 +
and dword ptr [edi] 0 +
mov eax [eax+4] +
test eax eax +
jz loc_1058AC0  +
lea ecx [ebp-6Ch] +
push ecx  +
lea ecx [ebp-68h] +
push ecx  +
push 3  +
push eax  +
call ds:CertGetCertificateContextProperty  +
test eax eax +
jnz loc_1058A6D  +
push ebx  +
mov eax lpReserved +
mov ebx ds:GetLastError +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax offset lpReserved +
jz loc_1058A5E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058A5E  +
call ebx  +
test eax eax +
jle loc_1058A41  +
and eax edi +
or eax esi +
push eax  +
mov eax lpReserved +
push offset aCertgetcertifi  +
push offset dword_100F080  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
call ebx  +
pop ebx  +
test eax eax +
jle loc_1058A69  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_1058AC2  +
push dword ptr [ebp-6Ch]  +
call sub_105D670  +
mov [esi] eax +
test eax eax +
jnz loc_1058AAB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058AA4  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058AA4  +
push offset aPpthumbprint  +
push offset dword_100F080  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_1058AC2  +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-68h] +
push ecx  +
push eax  +
call memcpy  +
mov eax [ebp-6Ch] +
add esp 0Ch +
mov [edi] eax +
xor esi esi +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+10h] +
test eax eax +
jnz loc_1058B24  +
mov ecx 80070490h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058B98  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058B98  +
push ecx  +
push offset aCannotSerializ  +
push offset dword_100F080  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1058B98  +
push ebx  +
lea ebx [eax+0Ch] +
push ebx  +
call sub_105D670  +
mov esi eax +
test esi esi +
jnz loc_1058B64  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058B5D  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058B5D  +
push offset aPrdpsig  +
push offset dword_100F080  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov esi 8007000Eh +
jmp loc_1058B97  +
xor eax eax +
inc eax  +
mov ecx eax +
mov [esi+4] eax +
mov [esi] cx +
mov [esi+2] cx +
mov eax [edi+10h] +
mov [esi+8] eax +
push dword ptr [edi+10h]  +
lea eax [esi+0Ch] +
push dword ptr [edi+0Ch]  +
push eax  +
call memcpy  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+arg_4] +
add esp 0Ch +
mov [eax] ebx +
xor esi esi +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
test eax eax +
jnz loc_1058BE5  +
mov ecx 80070057h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058DBD  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058DBD  +
push ecx  +
push offset aInitializeFa_0  +
push offset dword_100F080  +
push 1Bh  +
jmp loc_1058DAE  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_1058C1F  +
mov ecx 80070057h +
mov esi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058DBD  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058DBD  +
push ecx  +
push offset aInitializeFa_0  +
push offset dword_100F080  +
push 1Ch  +
jmp loc_1058DAE  +
cmp esi 0Ch +
jnb loc_1058C59  +
mov eax 8007000Dh +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1058DBD  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1058DBD  +
push eax  +
push offset aTooFewBytesInS  +
push offset dword_100F080  +
push 1Dh  +
jmp loc_1058D6F  +
cmp byte ptr [eax] 1 +
jz loc_1058C93  +
mov eax 8007000Dh +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1058DBD  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1058DBD  +
push eax  +
push offset aInvalidSignatu  +
push offset dword_100F080  +
push 1Eh  +
jmp loc_1058D6F  +
cmp word ptr [eax+2] 1 +
jz loc_1058CCF  +
mov eax 8007000Dh +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1058DBD  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1058DBD  +
push eax  +
push offset aInvalidSigna_0  +
push offset dword_100F080  +
push 1Fh  +
jmp loc_1058D6F  +
test byte ptr [eax+4] 1 +
jnz loc_1058D07  +
mov eax 8007000Dh +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1058DBD  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1058DBD  +
push eax  +
push offset aNoSignatureFie  +
push offset dword_100F080  +
push 20h  +
jmp loc_1058D6F  +
mov edx [eax+8] +
test edx edx +
jnz loc_1058D40  +
mov eax 8007000Dh +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1058DBD  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1058DBD  +
push eax  +
push offset aZeroLengthSign  +
push offset dword_100F080  +
push 21h  +
jmp loc_1058D6F  +
add esi 0FFFFFFF4h +
cmp esi edx +
jnb loc_1058D77  +
mov eax 8007000Dh +
mov esi eax +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1058DBD  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1058DBD  +
push eax  +
push offset aInvalidLengthO  +
push offset dword_100F080  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_1058DB4  +
lea esi [ecx+10h] +
push esi  +
add ecx 0Ch +
push ecx  +
push edx  +
add eax 0Ch +
push eax  +
call sub_1051263  +
mov esi eax +
test esi esi +
jge loc_1058DBB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1058DBD  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058DBD  +
push esi  +
push offset aOverwritebyteb  +
push offset dword_100F080  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1058DBD  +
xor esi esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
xor ecx ecx +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_18] ecx +
lea edi [ebp+var_14] +
stos   +
stos   +
xor eax eax +
mov [ebp+var_2C] ecx +
lea edi [ebp+var_28] +
stos   +
stos   +
stos   +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
stos   +
mov [ebp+var_C] ecx +
cmp [ebp+arg_0] ecx +
jz loc_1058E07  +
mov esi [ebp+arg_8] +
cmp esi ecx +
jz loc_1058E07  +
mov eax [ebp+arg_C] +
cmp eax ecx +
jnz loc_1058E46  +
mov ecx 80070057h +
mov [ebp+var_4] ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10591F2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10591F2  +
push ecx  +
push offset aValidatecertif  +
push offset dword_100F080  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_10591E3  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov [eax] ecx +
call sub_105D502  +
mov ebx offset lpReserved +
test eax eax +
jnz loc_1058E86  +
mov [ebp+var_4] 8007000Dh +
mov eax lpReserved +
cmp eax ebx +
jz loc_1058E86  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058E86  +
mov edi offset dword_100F080 +
push edi  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_1058E8B  +
mov edi offset dword_100F080 +
push 2  +
push 0  +
push offset aRdpsigncertcha  +
push offset word_1002174  +
call sub_10509E3  +
mov [ebp+arg_8] eax +
cmp eax 1 +
jnz loc_1058ECA  +
mov [ebp+var_C] 40000000h +
mov eax lpReserved +
cmp eax ebx +
jz loc_1058ECA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1058ECA  +
push edi  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
xor eax eax +
push [ebp+var_C]  +
push eax  +
push eax  +
push eax  +
push [ebp+arg_0]  +
call sub_105D58C  +
test eax eax +
jge loc_1058F1F  +
or dword ptr [esi] 10000h +
mov [ebp+var_4] eax +
mov ecx lpReserved +
cmp ecx ebx +
jz loc_10591E2  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10591E2  +
push eax  +
push offset aConstructcerti  +
push edi  +
push 2Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_10591E2  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov [ebp+arg_0] eax +
test al 1 +
jz loc_1058F53  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1058F49  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058F49  +
push edi  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor [ebp+arg_0] 1 +
or dword ptr [esi] 1002h +
test byte ptr [ebp+arg_0] 4 +
jz loc_1058F80  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1058F76  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058F76  +
push edi  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor [ebp+arg_0] 4 +
or dword ptr [esi] 1004h +
test byte ptr [ebp+arg_0] 8 +
jz loc_1058FAD  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1058FA3  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058FA3  +
push edi  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor [ebp+arg_0] 8 +
or dword ptr [esi] 1010h +
test byte ptr [ebp+arg_0] 20h +
jz loc_1058FDA  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1058FD0  +
test byte ptr [eax+1Ch] 4 +
jz loc_1058FD0  +
push edi  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor [ebp+arg_0] 20h +
or dword ptr [esi] 10001h +
test [ebp+arg_0] 1000000h +
jz loc_105900D  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1059000  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059000  +
push edi  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor [ebp+arg_0] 1000000h +
or dword ptr [esi] 1008h +
test byte ptr [ebp+arg_0] 40h +
jz loc_105903A  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1059030  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059030  +
push edi  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor [ebp+arg_0] 40h +
or dword ptr [esi] 1008h +
cmp [ebp+arg_0] 0 +
jz loc_1059066  +
mov eax lpReserved +
cmp eax ebx +
jz loc_1059060  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059060  +
push [ebp+arg_0]  +
push edi  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
or dword ptr [esi] 10000h +
cmp dword ptr [esi] 0 +
jz loc_105908F  +
mov [ebp+var_4] 8007000Dh +
mov eax lpReserved +
cmp eax ebx +
jz loc_105908F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105908F  +
push edi  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+arg_8] 0 +
mov [ebp+var_18] 0Ch +
jnz loc_10590A3  +
or [ebp+var_14] 0F00h +
or [ebp+var_24] 0FFFFFFFFh +
or [ebp+var_20] 0FFFFFFFFh +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_8]  +
mov [ebp+var_2C] 14h +
push 2  +
call ds:CertVerifyCertificateChainPolicy  +
test eax eax +
jnz loc_1059127  +
or dword ptr [esi] 10000h +
mov eax lpReserved +
cmp eax ebx +
mov ebx ds:GetLastError +
mov edi 0FFFFh +
mov esi 80070000h +
jz loc_1059115  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059115  +
call ebx  +
test eax eax +
jle loc_10590F8  +
and eax edi +
or eax esi +
push eax  +
mov eax lpReserved +
push offset aCertverifycert  +
push offset dword_100F080  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
call ebx  +
test eax eax +
jle loc_105911F  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_10591E2  +
mov ecx [ebp+var_28] +
mov eax 800B0101h +
cmp ecx eax +
ja loc_1059161  +
jz loc_1059159  +
test ecx ecx +
jz loc_10591A7  +
cmp ecx 80092010h +
jz loc_1059199  +
cmp ecx 80092013h +
jz loc_1059191  +
cmp ecx 80096004h +
jnz loc_1059181  +
or dword ptr [esi] 1010h +
jmp loc_10591A7  +
or dword ptr [esi] 1002h +
jmp loc_10591A7  +
cmp ecx 800B0109h +
jz loc_10591A1  +
cmp ecx 800B010Ch +
jz loc_1059199  +
cmp ecx 800B010Eh +
jz loc_1059191  +
cmp ecx 800B0110h +
jz loc_1059189  +
or dword ptr [esi] 10000h +
jmp loc_10591A7  +
or dword ptr [esi] 1001h +
jmp loc_10591A7  +
or dword ptr [esi] 1008h +
jmp loc_10591A7  +
or dword ptr [esi] 1004h +
jmp loc_10591A7  +
or dword ptr [esi] 10001h +
cmp dword ptr [esi] 0 +
jz loc_10591D0  +
mov [ebp+var_4] 8007000Dh +
mov eax lpReserved +
cmp eax ebx +
jz loc_10591E2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10591E2  +
push edi  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp [ebp+var_4] 0 +
jl loc_10591E2  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_C] +
and [ebp+var_8] 0 +
mov [ecx] eax +
pop ebx  +
cmp [ebp+var_8] 0 +
jz loc_10591F2  +
push [ebp+var_8]  +
call ds:CertFreeCertificateChain  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push edi  +
push 4  +
mov esi 10001h +
push esi  +
mov [ebp+var_4] edi +
call ds:CryptMsgOpenToDecode  +
mov ebx eax +
cmp ebx edi +
jnz loc_105926F  +
mov eax lpReserved +
mov esi ds:GetLastError +
cmp eax offset lpReserved +
jz loc_105926B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105926B  +
call esi  +
cmp eax edi +
jle loc_105924E  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
mov eax lpReserved +
push offset aCryptmsgopento  +
push offset dword_100F080  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
call esi  +
jmp loc_10592E1  +
push 1  +
push [ebp+cbData]  +
push [ebp+pbData]  +
push ebx  +
call ds:CryptMsgUpdate  +
test eax eax +
jnz loc_10592CB  +
mov eax lpReserved +
mov esi ds:GetLastError +
cmp eax offset lpReserved +
jz loc_10592C7  +
test byte ptr [eax+1Ch] 4 +
jz loc_10592C7  +
call esi  +
cmp eax edi +
jle loc_10592AA  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
mov eax lpReserved +
push offset aCryptmsgupdate  +
push offset dword_100F080  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
call esi  +
jmp loc_10592DA  +
push ebx  +
push edi  +
push edi  +
push esi  +
push 1  +
call ds:CertOpenStore  +
mov [ebp+var_4] eax +
push ebx  +
call ds:CryptMsgClose  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
cmp edi esi +
jz loc_105934E  +
cmp [ebp+arg_0] esi +
jbe loc_1059348  +
push dword ptr [edi+esi*4]  +
call ds:CertFreeCertificateContext  +
test eax eax +
jnz loc_1059342  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059342  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059342  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100F080  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
inc esi  +
cmp esi [ebp+arg_0] +
jb loc_1059305  +
push edi  +
call sub_105D688  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1058787  +
test byte ptr [ebp+8] 1 +
jz loc_1059373  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 40h  +
lea eax [ebp+pSignPara.dwMsgEncodingType] +
push edi  +
push eax  +
mov esi ecx +
mov [ebp+pSignPara.cbSize] edi +
call memset  +
mov eax [esi+18h] +
add esp 0Ch +
mov [ebp+uBytes] edi +
mov [ebp+var_10] edi +
mov [ebp+var_14] edi +
mov [ebp+var_C] edi +
cmp eax edi +
jz loc_10593BA  +
lea ebx [esi+8] +
cmp [ebx] edi +
jnz loc_10593F8  +
mov ecx 80070490h +
mov edi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105966B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105966B  +
push ecx  +
push offset aAttemptToSignW  +
push offset dword_100F080  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105965C  +
lea ecx [ebp+var_20] +
push ecx  +
push eax  +
call sub_105D502  +
test eax eax +
jnz loc_1059434  +
mov edi 8007000Dh +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105965C  +
test byte ptr [eax+1Ch] 4 +
jz loc_105965C  +
push edi  +
push offset aAttemptToSig_0  +
push offset dword_100F080  +
push 13h  +
jmp loc_10593E8  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [esi+18h]  +
call sub_105D58C  +
test eax eax +
jge loc_105947C  +
mov ecx 80070490h +
mov edi ecx +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105965C  +
test byte ptr [eax+1Ch] 4 +
jz loc_105965C  +
push ecx  +
push offset aUnableToConstr  +
push offset dword_100F080  +
push 14h  +
jmp loc_10593E8  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_10]  +
lea ecx [esi-18h] +
mov [ebp+var_1C] ecx +
call sub_105869C  +
mov edi eax +
test edi edi +
jge loc_10594CF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059648  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059648  +
push edi  +
push offset aCertchainconte  +
push offset dword_100F080  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1059648  +
mov eax [ebp+var_C] +
mov edi ds:CryptSignMessage +
mov [ebp+pSignPara.cbSize] 44h +
mov [ebp+pSignPara.dwMsgEncodingType] 10001h +
mov ecx [eax] +
mov [ebp+pSignPara.rgpMsgCert] eax +
mov eax [esi+4] +
mov [ebp+rgpbToBeSigned] eax +
lea eax [ebp+uBytes] +
push eax  +
push 0  +
push ebx  +
lea eax [ebp+rgpbToBeSigned] +
push eax  +
xor ebx ebx +
inc ebx  +
push ebx  +
mov [ebp+pSignPara.pSigningCert] ecx +
mov ecx [ebp+var_14] +
push ebx  +
lea eax [ebp+pSignPara] +
push eax  +
mov [ebp+pSignPara.HashAlgorithm.pszObjId] offset a1_3_14_3_2_26 +
mov [ebp+pSignPara.cMsgCert] ecx +
call edi  +
test eax eax +
jnz loc_1059577  +
mov eax lpReserved +
mov ebx ds:GetLastError +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax offset lpReserved +
jz loc_1059564  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059564  +
call ebx  +
test eax eax +
jle loc_1059547  +
and eax edi +
or eax esi +
push eax  +
mov eax lpReserved +
push offset aCryptsignmessa  +
push offset dword_100F080  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
call ebx  +
test eax eax +
jg loc_1059571  +
mov edi eax +
jmp loc_1059648  +
and eax edi +
or eax esi +
jmp loc_105956A  +
push [ebp+uBytes]  +
call sub_105D670  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_10595B9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_10595AF  +
test byte ptr [eax+1Ch] 4 +
jz loc_10595AF  +
push offset aPbsignedblob  +
push offset dword_100F080  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov edi 8007000Eh +
jmp loc_105963A  +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
lea eax [esi+8] +
push eax  +
lea eax [ebp+rgpbToBeSigned] +
push eax  +
push ebx  +
push ebx  +
lea eax [ebp+pSignPara] +
push eax  +
call edi  +
test eax eax +
jnz loc_1059629  +
mov eax lpReserved +
mov ebx ds:GetLastError +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax offset lpReserved +
jz loc_105961B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105961B  +
call ebx  +
test eax eax +
jle loc_10595FE  +
and eax edi +
or eax esi +
push eax  +
mov eax lpReserved +
push offset aCryptsignmessa  +
push offset dword_100F080  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
call ebx  +
test eax eax +
jle loc_1059625  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_105963A  +
mov eax [ebp+var_8] +
mov [esi+0Ch] eax +
mov eax [ebp+uBytes] +
xor edi edi +
mov [ebp+var_8] edi +
mov [esi+10h] eax +
cmp [ebp+var_8] 0 +
jz loc_1059648  +
push [ebp+var_8]  +
call sub_105D688  +
cmp [ebp+var_C] 0 +
jz loc_105965C  +
push [ebp+var_C]  +
mov ecx [ebp+var_1C] +
push [ebp+var_14]  +
call sub_10592F0  +
cmp [ebp+var_10] 0 +
jz loc_105966B  +
push [ebp+var_10]  +
call ds:CertFreeCertificateChain  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov esi ecx +
xor ecx ecx +
mov [ebp+pVerifyPara.cbSize] ecx +
lea edi [ebp+pVerifyPara.dwMsgAndCertEncodingType] +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+rgpbToBeSigned] +
mov [ebp+pCertContext] ecx +
mov [ebp+var_8] ecx +
mov [ebp+hCertStore] ecx +
cmp edi ecx +
jnz loc_10596D3  +
mov ebx 80070057h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059873  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059873  +
push ebx  +
push offset aVerifysignatur  +
push offset dword_100F080  +
push 24h  +
jmp loc_1059837  +
mov edx [esi+10h] +
cmp edx ecx +
jz loc_10596E1  +
lea eax [esi+8] +
cmp [eax] ecx +
jnz loc_1059718  +
or dword ptr [edi] 100000h +
mov ebx 80070490h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059873  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059873  +
push ebx  +
push offset aInsufficientNu  +
push offset dword_100F080  +
push 25h  +
jmp loc_1059837  +
mov ebx [esi+4] +
mov [ebp+rgpbToBeSigned] ebx +
lea ebx [ebp+pCertContext] +
push ebx  +
push eax  +
lea eax [ebp+rgpbToBeSigned] +
push eax  +
push 1  +
push edx  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+pVerifyPara] +
push ecx  +
push eax  +
mov [ebp+pVerifyPara.cbSize] 14h +
mov [ebp+pVerifyPara.dwMsgAndCertEncodingType] 10001h +
call ds:CryptVerifyDetachedMessageSignature  +
test eax eax +
jnz loc_10597BB  +
mov ebx ds:GetLastError +
call ebx  +
cmp eax 80090006h +
jnz loc_1059761  +
or dword ptr [edi] 200000h +
jmp loc_1059767  +
or dword ptr [edi] 10000h +
mov eax lpReserved +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax offset lpReserved +
jz loc_10597AA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10597AA  +
call ebx  +
test eax eax +
jle loc_105978D  +
and eax edi +
or eax esi +
push eax  +
mov eax lpReserved +
push offset aCryptverifydet  +
push offset dword_100F080  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
call ebx  +
test eax eax +
jle loc_10597B4  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_1059846  +
push dword ptr [esi+10h]  +
lea ebx [esi-18h] +
push dword ptr [esi+0Ch]  +
mov ecx ebx +
call sub_1059200  +
lea ecx [ebp+var_8] +
push ecx  +
push edi  +
push eax  +
push [ebp+pCertContext]  +
mov ecx ebx +
mov [ebp+hCertStore] eax +
call sub_1058DC9  +
mov ebx eax +
test ebx ebx +
jge loc_1059805  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059846  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059846  +
push ebx  +
push offset aValidatecertif  +
push offset dword_100F080  +
push 27h  +
jmp loc_1059837  +
push [ebp+var_8]  +
lea ecx [esi+14h] +
push [ebp+pCertContext]  +
mov eax [ecx] +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jge loc_1059844  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059846  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059846  +
push ebx  +
push offset aSetcertificate  +
push offset dword_100F080  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1059846  +
xor ebx ebx +
xor esi esi +
cmp [ebp+pCertContext] esi +
jz loc_1059856  +
push [ebp+pCertContext]  +
call ds:CertFreeCertificateContext  +
cmp [ebp+var_8] esi +
jz loc_1059864  +
push [ebp+var_8]  +
call ds:CertFreeCertificateChain  +
cmp [ebp+hCertStore] esi +
jz loc_1059873  +
push esi  +
push [ebp+hCertStore]  +
call ds:CertCloseStore  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10599F1  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100F9D4 +
mov dword ptr [esi+18h] offset off_100F934 +
mov eax esi +
pop esi  +
retn   +
***
mov eax 80004001h +
retn 8  +
***
sub ecx 14h +
jmp sub_10598F8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_10598D8  +
push eax  +
call sub_105D688  +
and dword ptr [esi+4] 0 +
mov eax [esi+0Ch] +
and dword ptr [esi+8] 0 +
test eax eax +
jz loc_10598ED  +
push eax  +
call sub_105D688  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
xor eax eax +
cmp [ecx+1Ch] eax +
jz loc_1059910  +
cmp [ecx+18h] eax +
jz loc_1059910  +
cmp [ecx+24h] eax +
jz loc_1059910  +
cmp [ecx+20h] eax +
jz loc_1059910  +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+8] +
push eax  +
add ecx 4 +
push ecx  +
push [ebp+uBytes]  +
push [ebp+arg_0]  +
call sub_1051263  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_1059961  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1059961  +
and dword ptr [edx] 0 +
and dword ptr [eax] 0 +
push eax  +
push edx  +
push dword ptr [ecx+8]  +
push dword ptr [ecx+4]  +
call sub_1051263  +
jmp loc_1059966  +
mov eax 80070057h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_1059997  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1059997  +
and dword ptr [edx] 0 +
and dword ptr [eax] 0 +
push eax  +
push edx  +
push dword ptr [ecx+10h]  +
push dword ptr [ecx+0Ch]  +
call sub_1051263  +
jmp loc_105999C  +
mov eax 80070057h +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100F9D4 +
mov dword ptr [ecx] offset off_100F9A4 +
call sub_10598C2  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_10025B4 +
or dword ptr [esi+0Ch] 8 +
mov dword ptr [esi+4] offset off_10025A4 +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_1059A35  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
push edi  +
push offset aCtsrdpsignat_3  +
mov esi ecx +
call sub_101CA2D  +
mov dword ptr [esi+18h] offset off_100F974 +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
pop edi  +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100F9D4 +
mov dword ptr [esi+18h] offset off_100F9A4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10599A5  +
test byte ptr [ebp+8] 1 +
jz loc_1059A4F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+hKey] 0 +
push esi  +
push 4  +
pop esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset aSoftwareMicr_2  +
push 80000002h  +
mov [ebp+cbData] esi +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1059ABD  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset aEnablesecurecr  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1059ABD  +
cmp [ebp+Type] esi +
jnz loc_1059ABD  +
cmp dword ptr [ebp+Data] 1 +
setz al  +
mov esi eax +
jmp loc_1059ABF  +
xor esi esi +
cmp [ebp+hKey] 0 +
jz loc_1059ACE  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pvContextBuffer] 0 +
push esi  +
lea eax [ebp+pvContextBuffer] +
push eax  +
push offset pszPackageName  +
call ds:QuerySecurityPackageInfoW  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
cmp [ebp+pvContextBuffer] 0 +
jz loc_1059B07  +
push [ebp+pvContextBuffer]  +
call FreeContextBuffer  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
mov [ebp+nSize] eax +
lea eax [ebp+nSize] +
push eax  +
push [ebp+lpNameBuffer]  +
push 8  +
call GetUserNameExW  +
movzx eax al +
test eax eax +
jnz locret_1059B43  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+lpNameBuffer]  +
push 2  +
call GetUserNameExW  +
movzx eax al +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
call sub_1059AD8  +
test eax eax +
jz loc_1059BA2  +
lea eax [ebp+var_4] +
push eax  +
push 2  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1060F33  +
test eax eax +
jge loc_1059BA7  +
cmp eax 80070005h +
jz loc_1059BA2  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1059B9E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1059B9E  +
push eax  +
push offset dword_100F9F4  +
push 1Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
xor eax eax +
jmp locret_1059BAA  +
xor eax eax +
inc eax  +
jmp locret_1059BAA  +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
call sub_1059AD8  +
test eax eax +
jz loc_1059C05  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1060F33  +
test eax eax +
jge loc_1059C09  +
cmp eax 80070005h +
jz loc_1059C05  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1059C05  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1059C05  +
push eax  +
push offset dword_100F9F4  +
push 20h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
call sub_1059AD8  +
test eax eax +
jz loc_1059C67  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1060F33  +
test eax eax +
jge loc_1059C6B  +
cmp eax 80070005h +
jz loc_1059C67  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1059C67  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1059C67  +
push eax  +
push offset dword_100F9F4  +
push 21h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_1059B4C  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+ppv] 0 +
and [ebp+var_8] 0 +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100FB34  +
push 1  +
push 0  +
push offset stru_100C4A0  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_1059CDE  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1059D1B  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1059D1B  +
push eax  +
push offset aCocreateinst_0  +
push offset dword_100F9F4  +
push 1Bh  +
jmp loc_1059D10  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jge loc_1059D1B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_1059D1B  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1059D1B  +
push eax  +
push offset aPhomegroupIsme  +
push offset dword_100F9F4  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1059D28  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi 400h +
push esi  +
xor ebx ebx +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1059D84  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059E0A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059E0A  +
push offset aTchar  +
push offset dword_100F9F4  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_1059E0A  +
push esi  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1059DBC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059DF8  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059DF8  +
push offset aTchar  +
push offset dword_100F9F4  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
jmp loc_1059DF8  +
mov eax 200h +
push eax  +
push esi  +
push eax  +
push edi  +
push [ebp+arg_0]  +
call ds:CredUIParseUserNameW  +
test eax eax +
jnz loc_1059DF8  +
push offset aHomegroupuser  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1059DF8  +
call sub_10437BA  +
test eax eax +
jz loc_1059DF8  +
call sub_1059C90  +
test eax eax +
jz loc_1059DF8  +
xor ebx ebx +
inc ebx  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
test esi esi +
jz loc_1059E0A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [eax] ebx +
lea eax [ebp+var_4] +
push eax  +
mov esi 105h +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
call sub_102AAF4  +
mov edi eax +
test edi edi +
jge loc_1059E73  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059F29  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059F29  +
push edi  +
push offset aStringcchlen_1  +
push offset dword_100F9F4  +
push 0Ah  +
jmp loc_1059F17  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push dword ptr [ebp+arg_4]  +
call sub_102AAF4  +
mov edi eax +
test edi edi +
jge loc_1059EAF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059F29  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059F29  +
push edi  +
push offset aStringcchlen_1  +
push offset dword_100F9F4  +
push 0Bh  +
jmp loc_1059F17  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
lea esi [ecx+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1059EDD  +
mov edi 8007000Eh +
jmp loc_1059F2D  +
push [ebp+arg_0]  +
push dword ptr [ebp+arg_4]  +
push offset aSS_3  +
push esi  +
push ebx  +
call sub_101BDD4  +
mov edi eax +
add esp 14h +
test edi edi +
jge loc_1059F24  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059F29  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059F29  +
push edi  +
push offset aStringcchprint  +
push offset dword_100F9F4  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_1059F29  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
test edi edi +
jge loc_1059F38  +
test ebx ebx +
jz loc_1059F38  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
mov [ebp+var_C] esi +
cmp [ebp+arg_14] esi +
jz loc_1059F95  +
cmp [ebp+arg_8] 1 +
jz loc_1059F95  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1059F8B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1059F8B  +
push offset dword_100F9F4  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 80070057h +
jmp loc_105A170  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1059E18  +
mov edi eax +
cmp edi esi +
jge loc_1059FE1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A170  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A170  +
push edi  +
push offset aCreatespnFaile  +
push offset dword_100F9F4  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105A170  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push [ebp+arg_8]  +
mov esi ds:CredReadW +
push [ebp+var_8]  +
call esi  +
mov ebx 80070000h +
test eax eax +
jnz loc_105A011  +
call ds:GetLastError  +
test eax eax +
jle loc_105A00F  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
cmp edi 80070490h +
jz loc_105A021  +
cmp edi 80070057h +
jnz loc_105A04D  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push [ebp+arg_8]  +
mov [ebp+var_C] 1 +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jnz loc_105A09B  +
call ds:GetLastError  +
test eax eax +
jle loc_105A04B  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
test edi edi +
jge loc_105A09B  +
cmp edi 80070490h +
jz loc_105A16F  +
cmp edi 80070005h +
jz loc_105A16F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A16F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A16F  +
push edi  +
push offset dword_100F9F4  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_105A16F  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_105A0F6  +
mov ecx [ebp+var_4] +
cmp dword ptr [ecx+30h] 0 +
jz loc_105A0F1  +
push dword ptr [ecx+30h]  +
push [ebp+arg_10]  +
push eax  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_105A0F6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A16F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A16F  +
push edi  +
push offset aStringcchcopyF  +
push offset dword_100F9F4  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105A16F  +
xor ecx ecx +
mov [eax] cx +
mov esi [ebp+arg_14] +
test esi esi +
jz loc_105A161  +
mov edi [ebp+var_4] +
cmp dword ptr [edi+1Ch] 0 +
jz loc_105A15C  +
mov eax [ebp+arg_18] +
mov edx [edi+18h] +
lea ecx [eax-1] +
shr edx 1 +
cmp edx ecx +
ja loc_105A131  +
add eax eax +
push eax  +
push 0  +
push esi  +
call memset  +
push dword ptr [edi+18h]  +
push dword ptr [edi+1Ch]  +
push esi  +
call memcpy  +
add esp 18h +
jmp loc_105A161  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A155  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A155  +
push offset dword_100F9F4  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov edi 8007007Ah +
jmp loc_105A16F  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_105A16D  +
mov ecx [ebp+var_C] +
mov [eax] ecx +
xor edi edi +
pop ebx  +
cmp [ebp+var_4] 0 +
jz loc_105A17F  +
push [ebp+var_4]  +
call ds:CredFree  +
cmp [ebp+var_8] 0 +
jz loc_105A18E  +
push [ebp+var_8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
inc ebx  +
mov [ebp+var_4] edi +
cmp [ebp+arg_8] edi +
jnz loc_105A26D  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+arg_8] ebx +
push [ebp+arg_0]  +
call sub_105A19B  +
mov esi eax +
mov edi 80070490h +
cmp esi edi +
jnz loc_105A1D5  +
xor esi esi +
xor ebx ebx +
test esi esi +
jge loc_105A210  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A396  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A396  +
push esi  +
push offset aDeletesavedcre  +
push offset dword_100F9F4  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105A396  +
push 2  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105A19B  +
mov esi eax +
cmp esi edi +
jnz loc_105A228  +
xor esi esi +
mov [ebp+arg_8] esi +
test esi esi +
jge loc_105A255  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A396  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A396  +
push esi  +
push offset aDeletesavedc_0  +
push offset dword_100F9F4  +
push 13h  +
jmp loc_105A200  +
test ebx ebx +
jnz loc_105A396  +
cmp [ebp+arg_8] ebx +
jnz loc_105A396  +
mov esi edi +
jmp loc_105A396  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_C] ebx +
push [ebp+arg_0]  +
mov [ebp+var_8] ebx +
call sub_1059E18  +
mov esi eax +
cmp esi edi +
jge loc_105A2B4  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A387  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A387  +
push esi  +
push offset aCreatespnFaile  +
push offset dword_100F9F4  +
push 14h  +
jmp loc_105A36C  +
mov ebx ds:CredDeleteW +
push edi  +
push [ebp+arg_8]  +
push [ebp+var_4]  +
call ebx  +
test eax eax +
jnz loc_105A2DD  +
call ds:GetLastError  +
test eax eax +
jle loc_105A2DB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov edi 80070490h +
cmp esi edi +
jz loc_105A2EE  +
cmp esi 80070057h +
jnz loc_105A2F3  +
xor esi esi +
mov [ebp+var_8] esi +
test esi esi +
jge loc_105A31C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A387  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A387  +
push esi  +
push offset aCreddeleteSpnF  +
push offset dword_100F9F4  +
push 15h  +
jmp loc_105A36C  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call ebx  +
test eax eax +
jnz loc_105A340  +
call ds:GetLastError  +
test eax eax +
jle loc_105A33E  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jnz loc_105A349  +
xor esi esi +
mov [ebp+var_C] esi +
test esi esi +
jge loc_105A379  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A387  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A387  +
push esi  +
push offset aCreddeleteServ  +
push offset dword_100F9F4  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105A387  +
cmp [ebp+var_8] 0 +
jnz loc_105A387  +
cmp [ebp+var_C] 0 +
jnz loc_105A387  +
mov esi edi +
cmp [ebp+var_4] 0 +
jz loc_105A396  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push esi  +
push edi  +
xor esi esi +
push 30h  +
lea eax [ebp+var_34] +
push esi  +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_38] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1059E18  +
mov edi eax +
cmp edi esi +
jge loc_105A411  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A4BC  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A4BC  +
push edi  +
push offset aCreatespnFaile  +
push offset dword_100F9F4  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105A4BC  +
mov eax [ebp+arg_14] +
mov [ebp+var_34] eax +
mov eax [ebp+var_4] +
mov [ebp+var_30] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov [ebp+var_8] eax +
push esi  +
mov esi ds:CredWriteW +
lea eax [ebp+var_38] +
push eax  +
call esi  +
mov ebx 80070000h +
test eax eax +
jnz loc_105A45F  +
call ds:GetLastError  +
test eax eax +
jle loc_105A45D  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
cmp edi 80070057h +
jnz loc_105A48D  +
mov eax [ebp+arg_0] +
xor edi edi +
mov [ebp+var_30] eax +
push edi  +
lea eax [ebp+var_38] +
push eax  +
call esi  +
test eax eax +
jnz loc_105A4BB  +
call ds:GetLastError  +
test eax eax +
jle loc_105A48B  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
test edi edi +
jge loc_105A4BB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105A4BB  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A4BB  +
push edi  +
push offset aCredwriteFaile  +
push offset dword_100F9F4  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
pop ebx  +
cmp [ebp+var_4] 0 +
jz loc_105A4CB  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_8] +
xor esi esi +
push esi  +
push esi  +
push [ebp+arg_10]  +
mov [ebp+var_4] esi +
push [ebp+arg_C]  +
mov [edi] esi +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1059F47  +
test eax eax +
jl loc_105A50E  +
mov dword ptr [edi] 1 +
jmp loc_105A534  +
push [ebp+arg_14]  +
push esi  +
push esi  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 2  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1059F47  +
test eax eax +
jl loc_105A530  +
mov dword ptr [edi] 2 +
cmp [edi] esi +
jz loc_105A53B  +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_20] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_418] eax +
xor eax eax +
xor ecx ecx +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_408] eax +
mov [ebp+var_40C] eax +
mov word ptr [ebp+var_404] cx +
cmp [ebp+arg_8] eax +
jz loc_105A68E  +
cmp [ebp+arg_18] eax +
jz loc_105A59D  +
mov [ebp+var_410] eax +
jmp loc_105A5B1  +
push edi  +
push esi  +
call sub_1059C15  +
push edi  +
push esi  +
mov [ebp+var_410] eax +
call sub_1059BB3  +
push edi  +
push esi  +
mov [ebp+var_414] eax +
call sub_1059B4C  +
mov ebx eax +
lea eax [ebp+var_40C] +
push eax  +
push 200h  +
lea eax [ebp+var_404] +
push eax  +
lea eax [ebp+var_408] +
push eax  +
push edi  +
push esi  +
call sub_105A4D8  +
mov esi eax +
xor edi edi +
cmp esi edi +
jz loc_105A625  +
cmp [ebp+var_418] edi +
jz loc_105A606  +
lea eax [ebp+var_404] +
push eax  +
push [ebp+arg_24]  +
push [ebp+var_418]  +
call sub_101BD65  +
cmp [ebp+var_40C] edi +
jz loc_105A625  +
lea eax [ebp+var_404] +
push eax  +
call sub_1059D32  +
test eax eax +
jz loc_105A625  +
mov [ebp+arg_C] 1 +
cmp [ebp+arg_C] edi +
jnz loc_105A680  +
cmp [ebp+arg_10] edi +
jz loc_105A63C  +
cmp [ebp+arg_14] edi +
jz loc_105A63C  +
cmp ebx edi +
jz loc_105A63C  +
push 6  +
jmp loc_105A67D  +
cmp esi edi +
jz loc_105A673  +
cmp [ebp+var_408] 1 +
jnz loc_105A660  +
call sub_1059A5B  +
cmp ebx edi +
jz loc_105A673  +
cmp eax edi +
jnz loc_105A673  +
cmp [ebp+arg_18] edi +
jnz loc_105A673  +
xor eax eax +
inc eax  +
jmp loc_105A69B  +
push 2  +
pop eax  +
cmp [ebp+var_408] eax +
jnz loc_105A673  +
cmp [ebp+var_414] edi +
jnz loc_105A69B  +
cmp [ebp+var_410] edi +
jz loc_105A680  +
push 3  +
pop eax  +
jmp loc_105A69B  +
neg ebx  +
sbb ebx ebx +
and ebx 0FFFFFFFDh +
add ebx 7 +
mov eax ebx +
jmp loc_105A69B  +
xor ecx ecx +
cmp [ebp+arg_10] eax +
setnz cl  +
add ecx 5 +
mov eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 28h  +
***
mov edx [ecx+24h] +
xor eax eax +
cmp edx eax +
jz locret_105A6C0  +
push eax  +
push dword ptr [ecx+1Ch]  +
call edx  +
retn   +
***
mov eax [ecx+28h] +
test eax eax +
jz locret_105A6D2  +
push dword ptr [ecx+1Ch]  +
call eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+2Ch] +
test eax eax +
jz loc_105A6EC  +
push [ebp+arg_0]  +
push dword ptr [ecx+1Ch]  +
call eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+30h] +
test eax eax +
jz loc_105A70F  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+1Ch]  +
call eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+34h] +
test eax eax +
jz loc_105A732  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+1Ch]  +
call eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+38h] +
test eax eax +
jz loc_105A752  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+1Ch]  +
call eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi-4] +
call sub_105A6C6  +
lea edi [esi+14h] +
mov eax [edi] +
test eax eax +
jz loc_105A779  +
push eax  +
call ds:FreeLibrary  +
push 9  +
pop ecx  +
xor eax eax +
stos   +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetProcAddress +
mov esi ecx +
push offset aClxshlinitiali  +
push dword ptr [esi+18h]  +
call edi  +
mov [esi+20h] eax +
mov ebx offset lpReserved +
test eax eax +
jnz loc_105A7CC  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105A7CC  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A7CC  +
push offset dword_100FD3C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aClxshlconnect  +
push dword ptr [esi+18h]  +
call edi  +
mov [esi+24h] eax +
test eax eax +
jnz loc_105A7FE  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105A7FE  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A7FE  +
push offset dword_100FD3C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aClxshlterminat  +
push dword ptr [esi+18h]  +
call edi  +
mov [esi+28h] eax +
test eax eax +
jnz loc_105A830  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105A830  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A830  +
push offset dword_100FD3C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aClxshlonblocke  +
push dword ptr [esi+18h]  +
call edi  +
mov [esi+2Ch] eax +
test eax eax +
jnz loc_105A862  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105A862  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A862  +
push offset dword_100FD3C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aClxshlondialog  +
push dword ptr [esi+18h]  +
call edi  +
mov [esi+30h] eax +
test eax eax +
jnz loc_105A894  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105A894  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A894  +
push offset dword_100FD3C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aClxshloncontin  +
push dword ptr [esi+18h]  +
call edi  +
mov [esi+34h] eax +
test eax eax +
jnz loc_105A8C6  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105A8C6  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A8C6  +
push offset dword_100FD3C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
push offset aClxshlonshelld  +
push dword ptr [esi+18h]  +
call edi  +
mov [esi+38h] eax +
test eax eax +
jnz loc_105A8F8  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105A8F8  +
test byte ptr [eax+1Ch] 4 +
jz loc_105A8F8  +
push offset dword_100FD3C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
cmp dword ptr [esi+20h] 0 +
jz loc_105A909  +
cmp dword ptr [esi+28h] 0 +
jz loc_105A909  +
xor eax eax +
inc eax  +
jmp loc_105A90B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
push offset aCclxshell_0  +
mov esi ecx +
call sub_101CA2D  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [esi+18h] +
mov dword ptr [esi] offset off_10025C4 +
mov dword ptr [esi+4] offset off_100FDF0 +
stos   +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_105AC37  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov ecx esi +
mov dword ptr [edi] offset off_10025C4 +
mov dword ptr [esi] offset off_100FDF0 +
call sub_105A75B  +
mov dword ptr [edi] offset off_10025C4 +
mov dword ptr [esi] offset off_10025B4 +
or dword ptr [esi+8] 8 +
pop edi  +
mov dword ptr [esi] offset off_10025A4 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 530h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_530] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_52C] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov esi 206h +
push esi  +
push eax  +
mov [ebp+LibFileName] ax +
lea eax [ebp-516h] +
push eax  +
mov [ebp+var_51C] ecx +
call memset  +
xor eax eax +
push esi  +
mov [ebp+WideCharStr] ax +
xor edi edi +
lea eax [ebp-30Eh] +
push edi  +
push eax  +
call memset  +
push 103h  +
lea eax [ebp-107h] +
push edi  +
push eax  +
mov [ebp+MultiByteStr] 0 +
call memset  +
mov eax [ebx] +
add esp 24h +
mov ecx ebx +
call dword ptr [eax+58h]  +
mov ebx eax +
cmp ebx edi +
jnz loc_105AA70  +
mov esi 80004005h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105AA4F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105AA4F  +
push esi  +
push offset aFailedToGetT_0  +
push offset dword_100FD3C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov ecx [ebp+var_51C] +
add ecx 4 +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
push 2  +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
mov eax offset word_1002174 +
push eax  +
push ebx  +
push eax  +
call sub_1051DEC  +
xor eax eax +
cmp ax [ebp+LibFileName] +
jnz loc_105AABD  +
mov esi 80004005h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105AA4F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105AA4F  +
push esi  +
push offset aNoTestDllToLoa  +
push offset dword_100FD3C  +
push 0Bh  +
jmp loc_105AA44  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryW  +
mov ecx [ebp+var_51C] +
mov [ecx+18h] eax +
cmp eax edi +
jnz loc_105AB08  +
mov esi 80004005h +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105AA4F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105AA4F  +
push esi  +
push offset aInitErrorLoadi  +
push offset dword_100FD3C  +
push 0Ch  +
jmp loc_105AA44  +
call sub_105A788  +
test eax eax +
jnz loc_105AB42  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_105AA4F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105AA4F  +
push esi  +
push offset aFailedToLoadCl  +
push offset dword_100FD3C  +
push 0Dh  +
jmp loc_105AA44  +
push offset aCookie  +
push esi  +
lea eax [ebp+WideCharStr] +
push eax  +
mov [ebp+var_530] 14h +
mov [ebp+var_52C] 2 +
call sub_101BD65  +
push ebx  +
push esi  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_1027578  +
push edi  +
push edi  +
push esi  +
lea eax [ebp+MultiByteStr] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+WideCharStr] +
push eax  +
push edi  +
push edi  +
call ds:WideCharToMultiByte  +
test eax eax +
jnz loc_105ABCF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105ABC5  +
test byte ptr [eax+1Ch] 4 +
jz loc_105ABC5  +
call ds:GetLastError  +
push eax  +
mov eax lpReserved +
push offset dword_100FD3C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
mov esi 80004005h +
jmp loc_105AA4F  +
mov esi [ebp+var_51C] +
lea eax [ebp+MultiByteStr] +
mov [ebp+var_524] eax +
lea eax [esi+1Ch] +
push eax  +
lea eax [ebp+var_530] +
push eax  +
call dword ptr [esi+20h]  +
test eax eax +
jnz loc_105AC24  +
mov eax lpReserved +
mov esi 80004005h +
cmp eax offset lpReserved +
jz loc_105AA4F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105AA4F  +
push esi  +
push offset aFailedToLoadCl  +
push offset dword_100FD3C  +
push 0Fh  +
jmp loc_105AA44  +
mov ecx esi +
call sub_105A6B1  +
xor esi esi +
jmp loc_105AA5D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105A954  +
test byte ptr [ebp+8] 1 +
jz loc_105AC51  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_8] esi +
jbe loc_105AC89  +
push [ebp+bEnable]  +
mov eax [ebp+arg_4] +
push dword ptr [eax+esi*4]  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
inc esi  +
cmp esi [ebp+arg_8] +
jb loc_105AC6A  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor edi edi +
cmp [ebp+arg_C] ebx +
jnz loc_105ACCC  +
cmp [ebp+arg_8] ebx +
jbe loc_105ACF5  +
mov esi [ebp+arg_4] +
push ebx  +
push dword ptr [esi+edi*8]  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
mov [esi+edi*8+4] eax +
inc edi  +
cmp edi [ebp+arg_8] +
jb loc_105ACAC  +
jmp loc_105ACF5  +
cmp [ebp+arg_8] ebx +
jbe loc_105ACF5  +
mov esi [ebp+arg_4] +
cmp [esi+edi*8+4] ebx +
jnz loc_105ACEF  +
push 1  +
push dword ptr [esi+edi*8]  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
inc edi  +
cmp edi [ebp+arg_8] +
jb loc_105ACD4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
cmp dword_10669F0 0 +
push esi  +
mov esi offset Buffer +
jnz loc_105AD72  +
movzx eax word_10665E0 +
push 104h  +
neg eax  +
push esi  +
sbb eax eax +
and eax offset word_10665E0 +
push 3ECh  +
push eax  +
call ds:GetModuleHandleW  +
push eax  +
call sub_105DD36  +
test eax eax +
jnz loc_105AD68  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105AD60  +
test byte ptr [eax+1Ch] 4 +
jz loc_105AD60  +
push offset dword_100FF34  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov Buffer ax +
mov dword_10669F0 1 +
mov eax esi +
pop esi  +
retn   +
***
cmp dword_1066C00 0 +
push esi  +
mov esi offset word_10669F8 +
jnz loc_105ADEC  +
movzx eax word_10665E0 +
push 104h  +
neg eax  +
push esi  +
sbb eax eax +
and eax offset word_10665E0 +
push 36B3h  +
push eax  +
call ds:GetModuleHandleW  +
push eax  +
call sub_105DD36  +
test eax eax +
jnz loc_105ADE2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105ADDA  +
test byte ptr [eax+1Ch] 4 +
jz loc_105ADDA  +
push offset dword_100FF34  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
mov word_10669F8 ax +
mov dword_1066C00 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_105AE07  +
call sub_105AD7B  +
jmp loc_105AE0C  +
call sub_105AD01  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 61Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
test esi esi +
jz loc_105AEE6  +
movzx eax word_10665E0 +
push 104h  +
neg eax  +
lea ecx [ebp+Buffer] +
push ecx  +
push [ebp+uID]  +
sbb eax eax +
and eax offset word_10665E0 +
push eax  +
call ds:GetModuleHandleW  +
push eax  +
call sub_105DD36  +
test eax eax +
jz loc_105AEE6  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_61C] +
push 208h  +
push eax  +
call sub_101BDD4  +
add esp 10h +
test eax eax +
jge loc_105AEB3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105AEE6  +
test byte ptr [eax+1Ch] 4 +
jz loc_105AEE6  +
push offset dword_100FF34  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105AEE6  +
mov ecx dword_106607C +
test ecx ecx +
jz loc_105AECE  +
lea eax [ebp+var_61C] +
push eax  +
push 10h  +
push [ebp+uID]  +
call sub_105A6F5  +
push 10h  +
call sub_105AD01  +
push eax  +
lea eax [ebp+var_61C] +
push eax  +
push edi  +
call sub_105D992  +
xor ebx ebx +
inc ebx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_10] +
and dword ptr [edi] 0 +
movzx eax word_10665E0 +
push 104h  +
neg eax  +
lea ecx [ebp+Buffer] +
push ecx  +
push [ebp+uID]  +
sbb eax eax +
and eax offset word_10665E0 +
push eax  +
call ds:GetModuleHandleW  +
push eax  +
call sub_105DD36  +
test eax eax +
jz loc_105AF9B  +
mov ecx dword_106607C +
push esi  +
mov esi [ebp+arg_C] +
test ecx ecx +
jz loc_105AF71  +
lea eax [ebp+Buffer] +
push eax  +
mov eax esi +
or eax 4 +
push eax  +
push [ebp+uID]  +
call sub_105A718  +
or esi 4 +
push esi  +
push [ebp+arg_8]  +
call sub_105ADF5  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call sub_105D992  +
sub eax 6 +
neg eax  +
sbb eax eax +
inc eax  +
mov [edi] eax +
xor eax eax +
inc eax  +
pop esi  +
jmp loc_105AF9D  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 10h  +
push [ebp+arg_8]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_105AEFE  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 30h  +
push [ebp+arg_8]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_105AEFE  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
movzx eax word_10665E0 +
push esi  +
mov esi [ebp+arg_0] +
push 104h  +
neg eax  +
lea ecx [ebp+Buffer] +
push ecx  +
push [ebp+uID]  +
sbb eax eax +
and eax offset word_10665E0 +
push eax  +
call ds:GetModuleHandleW  +
push eax  +
call sub_105DD36  +
test eax eax +
jz loc_105B077  +
mov ecx dword_106607C +
test ecx ecx +
jz loc_105B059  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+arg_8]  +
push [ebp+uID]  +
call sub_105A6F5  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
call sub_105ADF5  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
call sub_105D992  +
xor eax eax +
inc eax  +
jmp loc_105B0A0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105B09E  +
test byte ptr [eax+1Ch] 4 +
jz loc_105B09E  +
push [ebp+uID]  +
push offset dword_100FF34  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push 10h  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_105AFF4  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 200h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ecx  +
call sub_1051C2C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
push ecx  +
call sub_1051C2C  +
test eax eax +
jl loc_105B149  +
push [ebp+arg_4]  +
lea eax [ebp+var_204] +
push esi  +
push eax  +
call sub_1051ADD  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 100h  +
push ecx  +
call sub_101BD65  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea ecx [ebp+var_404] +
xor esi esi +
call sub_105B0D2  +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_105B1D7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105B27A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105B27A  +
push offset dword_100FF54  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105B27A  +
push eax  +
lea ecx [ebp+var_404] +
call sub_105B15D  +
test eax eax +
jl loc_105B253  +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
call sub_1051C2C  +
test eax eax +
jge loc_105B21E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105B27A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105B27A  +
push offset dword_100FF54  +
push 0Bh  +
jmp loc_105B1C7  +
push 1  +
lea eax [ebp+var_204] +
push eax  +
call sub_105191B  +
test eax eax +
jz loc_105B235  +
xor esi esi +
inc esi  +
jmp loc_105B27A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105B27A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105B27A  +
push offset dword_100FF54  +
push 0Ch  +
jmp loc_105B1C7  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105B27A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105B27A  +
push eax  +
push offset dword_100FF54  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_4] +
mov [ebp+var_210] eax +
test ecx ecx +
jz loc_105B38D  +
test eax eax +
jz loc_105B38D  +
add ecx ecx +
push ecx  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov esi 100h +
push esi  +
lea eax [ebp+var_204] +
push eax  +
push edi  +
call sub_1051C2C  +
test eax eax +
jl loc_105B380  +
and [ebp+var_20C] 0 +
and [ebp+var_208] 0 +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
lea eax [ebp+var_204] +
push eax  +
call sub_102AAF4  +
test eax eax +
jl loc_105B392  +
lea eax [ebp+var_208] +
push eax  +
push esi  +
push edi  +
call sub_102AAF4  +
test eax eax +
jl loc_105B392  +
mov ecx [ebp+var_20C] +
cmp [ebp+var_208] ecx +
jbe loc_105B37C  +
cmp [ebp+var_208] 200h +
jnb loc_105B37C  +
lea eax [edi+ecx*2] +
movzx ecx word ptr [eax] +
xor esi esi +
mov edx eax +
test cx cx +
jz loc_105B37A  +
movzx ecx cx +
cmp cx 20h +
jz loc_105B35B  +
xor esi esi +
inc esi  +
inc edx  +
inc edx  +
movzx ecx word ptr [edx] +
test cx cx +
jnz loc_105B352  +
test esi esi +
jz loc_105B37A  +
push eax  +
push [ebp+arg_4]  +
push [ebp+var_210]  +
call sub_101BD65  +
jmp loc_105B37C  +
xor eax eax +
test eax eax +
jge loc_105B392  +
mov edx [ebp+var_210] +
xor ecx ecx +
mov [edx] cx +
jmp loc_105B392  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_105B3DE  +
push edi  +
mov edi ds:IsDlgButtonChecked +
push 3301h  +
push dword ptr [esi+8]  +
call edi  +
mov ecx [esi] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+3Ch]  +
push 36C6h  +
push dword ptr [esi+8]  +
call edi  +
mov ecx [esi] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+44h]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi] +
lea eax [ebp+var_4] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
push eax  +
push 3452h  +
push dword ptr [esi+8]  +
call sub_105AFD3  +
cmp [ebp+var_4] 0 +
jz loc_105B432  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+28h]  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+30h]  +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
call dword ptr [eax+38h]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax]  +
mov ecx [esi] +
mov ebx eax +
mov eax [ecx] +
call dword ptr [eax+4Ch]  +
mov ecx [esi] +
mov [ebp+var_4] eax +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
mov [ebp+var_8] eax +
xor eax eax +
cmp ebx eax +
jnz loc_105B46E  +
cmp [ebp+var_4] eax +
jz loc_105B46E  +
inc eax  +
mov edi ds:EnableWindow +
push eax  +
push dword ptr [esi+10h]  +
call edi  +
xor eax eax +
cmp ebx eax +
jnz loc_105B48B  +
cmp [ebp+var_4] eax +
jz loc_105B48B  +
cmp [ebp+var_8] eax +
jnz loc_105B48B  +
inc eax  +
push eax  +
push dword ptr [esi+14h]  +
call edi  +
test ebx ebx +
jnz loc_105B4CC  +
cmp [ebp+var_4] ebx +
jz loc_105B4C8  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+40h]  +
mov edi ds:CheckDlgButton +
neg eax  +
sbb eax eax +
neg eax  +
push eax  +
push 3301h  +
push dword ptr [esi+8]  +
call edi  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+48h]  +
neg eax  +
sbb eax eax +
neg eax  +
push eax  +
jmp loc_105B4E0  +
push 0  +
jmp loc_105B4CE  +
push 1  +
mov edi ds:CheckDlgButton +
push 3301h  +
push dword ptr [esi+8]  +
call edi  +
push 0  +
push 36C6h  +
push dword ptr [esi+8]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
mov esi ecx +
push dword ptr [esi+4]  +
call sub_105DD36  +
test eax eax +
jnz loc_105B571  +
call ds:GetLastError  +
mov esi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105B554  +
test byte ptr [eax+1Ch] 4 +
jz loc_105B554  +
push esi  +
push offset dword_100FF74  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test esi esi +
jle loc_105B564  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
test eax eax +
jl loc_105B586  +
mov eax 80004005h +
jmp loc_105B586  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+nIDDlgItem]  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+54h]  +
xor ebx ebx +
mov [ebp+var_4] eax +
cmp [esi+0Ch] ebx +
jnz loc_105B60E  +
mov edi [ebp+arg_C] +
cmp edi ebx +
jbe loc_105B5D4  +
cmp edi 3 +
jbe loc_105B655  +
cmp edi 6 +
jz loc_105B655  +
cmp edi 7 +
jz loc_105B623  +
mov edi [ebp+arg_10] +
cmp edi ebx +
jbe loc_105B6EA  +
cmp edi 3 +
jbe loc_105B5F6  +
cmp edi 4 +
jz loc_105B6AC  +
cmp edi 6 +
jnz loc_105B6EA  +
cmp [ebp+arg_0] ebx +
jz loc_105B6FC  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+54h]  +
mov [ebp+var_4] eax +
cmp [esi+0Ch] ebx +
jz loc_105B5B9  +
mov edi ds:ShowWindow +
push ebx  +
push dword ptr [esi+10h]  +
call edi  +
push ebx  +
push dword ptr [esi+14h]  +
jmp loc_105B6FA  +
mov edi ds:ShowWindow +
push ebx  +
push dword ptr [esi+14h]  +
call edi  +
cmp [ebp+arg_10] 7 +
jz loc_105B6F6  +
mov eax [ebp+var_4] +
cmp ds:dword_100FFA4[eax*4] 1 +
jnz loc_105B6F6  +
push 5  +
push dword ptr [esi+10h]  +
call edi  +
push 1  +
jmp loc_105B6A1  +
mov edi ds:ShowWindow +
push ebx  +
push dword ptr [esi+14h]  +
call edi  +
cmp [ebp+arg_0] ebx +
jz loc_105B6FC  +
push offset aTermsrv  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1059C77  +
test eax eax +
jz loc_105B699  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+4Ch]  +
test eax eax +
jz loc_105B699  +
mov eax [ebp+var_4] +
cmp ds:dword_100FF88[eax*4] 1 +
jz loc_105B64A  +
push 5  +
push dword ptr [esi+10h]  +
call edi  +
push ebx  +
push dword ptr [esi+10h]  +
call ds:EnableWindow  +
jmp loc_105B6FC  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
test eax eax +
jnz loc_105B6D4  +
cmp [ebp+arg_4] ebx +
jnz loc_105B6D4  +
push 5  +
push dword ptr [esi+14h]  +
call ds:ShowWindow  +
push 1  +
push dword ptr [esi+14h]  +
call ds:EnableWindow  +
jmp loc_105B6DE  +
push ebx  +
push dword ptr [esi+14h]  +
call ds:ShowWindow  +
push ebx  +
push dword ptr [esi+10h]  +
call ds:ShowWindow  +
jmp loc_105B6FC  +
mov edi ds:ShowWindow +
push ebx  +
push dword ptr [esi+14h]  +
call edi  +
push ebx  +
push dword ptr [esi+10h]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jbe loc_105B7D3  +
cmp eax 2 +
jbe loc_105B7C4  +
cmp eax 3 +
jz loc_105B7BD  +
cmp eax 4 +
jz loc_105B78E  +
cmp eax 5 +
jz loc_105B787  +
cmp eax 6 +
jz loc_105B771  +
cmp eax 7 +
jnz loc_105B7D3  +
mov eax [ebp+arg_0] +
mov ecx 3456h +
test eax eax +
jbe loc_105B765  +
cmp eax 2 +
jbe loc_105B760  +
cmp eax 3 +
jz loc_105B76A  +
cmp eax 6 +
jnz loc_105B765  +
mov ecx 344Ch +
push ecx  +
mov ecx esi +
jmp loc_105B7C9  +
mov ecx 344Fh +
jmp loc_105B765  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+34h]  +
neg eax  +
sbb eax eax +
and eax 8 +
add eax 3449h +
push eax  +
jmp loc_105B766  +
push 3450h  +
jmp loc_105B7C9  +
cmp dword ptr [esi+0Ch] 0 +
mov ecx 3449h +
jnz loc_105B765  +
mov eax [ebp+arg_0] +
test eax eax +
jbe loc_105B765  +
cmp eax 2 +
jbe loc_105B7AF  +
cmp eax 3 +
jz loc_105B7B6  +
cmp eax 6 +
jnz loc_105B765  +
mov ecx 344Bh +
jmp loc_105B765  +
mov ecx 344Eh +
jmp loc_105B765  +
push 3AABh  +
jmp loc_105B7C9  +
push 3AAAh  +
push 3306h  +
call sub_105B4F4  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 4  +
push offset unk_1065DE4  +
push dword ptr [ecx+8]  +
call sub_105AC93  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call sub_104F887  +
test eax eax +
jz loc_105B818  +
push offset word_1002174  +
jmp loc_105B81B  +
push [ebp+lpString]  +
push 3308h  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [esi+1Ch] +
cmp eax ecx +
push edi  +
jle loc_105B851  +
sub eax ecx +
mov edi eax +
mov eax ecx +
jmp loc_105B855  +
sub ecx eax +
mov edi ecx +
mov edx [esi+20h] +
mov ecx [esi+28h] +
push 0  +
sub ecx edx +
push ecx  +
push edi  +
push edx  +
push eax  +
push 0  +
push dword ptr [esi+8]  +
call ds:SetWindowPos  +
push 200h  +
lea eax [esi+2Ch] +
push eax  +
push 36C1h  +
push dword ptr [esi+4]  +
call sub_105DD36  +
test eax eax +
jnz loc_105B8BA  +
call ds:GetLastError  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105B8BA  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105B8BA  +
push eax  +
push offset aTsloadstring_1  +
push offset dword_100FF74  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov edi ds:GetDlgItem +
push 3301h  +
push dword ptr [esi+8]  +
call edi  +
push 36C6h  +
push dword ptr [esi+8]  +
mov [esi+10h] eax +
call edi  +
mov ecx esi +
mov [esi+14h] eax +
call sub_105B43A  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+54h]  +
and [ebp+var_4] 0 +
lea ebx dword_100FF88[eax*4] +
mov eax [ebp+var_4] +
push ds:dword_100FF84[eax]  +
push dword ptr [esi+8]  +
call edi  +
cmp dword ptr [ebx] 0 +
mov [ebp+hWnd] eax +
jnz loc_105B91F  +
push eax  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_105B91F  +
push 0  +
push [ebp+hWnd]  +
call ds:EnableWindow  +
add [ebp+var_4] 1Ch +
add ebx 1Ch +
cmp [ebp+var_4] 38h +
jb loc_105B8F3  +
push 0  +
push 1FFh  +
push 0C5h  +
push 3308h  +
push dword ptr [esi+8]  +
call edi  +
push eax  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx ecx +
mov ecx [ebx] +
push esi  +
mov esi [ebp+arg_0] +
mov dword ptr [ebp+var_2008] eax +
mov eax [ecx] +
push edi  +
call dword ptr [eax+2Ch]  +
push eax  +
call sub_105ADF5  +
push eax  +
push 80h  +
lea eax [esi+4] +
push eax  +
call sub_101BD65  +
mov edi eax +
test edi edi +
jge loc_105B9D5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BB8F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BB8F  +
push edi  +
push offset aStringcchcopyO  +
push offset dword_100FF74  +
push 0Fh  +
jmp loc_105BB80  +
mov edi 800h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 3458h  +
push dword ptr [ebx+4]  +
call sub_105DD36  +
test eax eax +
jnz loc_105BA22  +
call ds:GetLastError  +
mov edi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BB0A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BB0A  +
push edi  +
push offset dword_100FF74  +
push 10h  +
jmp loc_105BAFF  +
push dword ptr [ebp+var_2008]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [esi+104h] +
push edi  +
push eax  +
call sub_101BDD4  +
add esp 10h +
test eax eax +
jge loc_105BA6F  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105BA6F  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105BA6F  +
push eax  +
push offset aBannerTextWasT  +
push offset dword_100FF74  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
xor eax eax +
cmp [ebp+arg_8] eax +
push 80h  +
setnz al  +
add eax 36B0h +
mov [ebp+uID] eax +
lea eax [esi+1104h] +
push eax  +
push 345Eh  +
push dword ptr [ebx+4]  +
call sub_105DD36  +
test eax eax +
jnz loc_105BAC3  +
call ds:GetLastError  +
mov edi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BB0A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BB0A  +
push edi  +
push offset dword_100FF74  +
push 12h  +
jmp loc_105BAFF  +
push edi  +
lea eax [ebp+var_1004] +
push eax  +
push [ebp+uID]  +
push dword ptr [ebx+4]  +
call sub_105DD36  +
test eax eax +
jnz loc_105BB25  +
call ds:GetLastError  +
mov edi eax +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BB0A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BB0A  +
push edi  +
push offset dword_100FF74  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
test edi edi +
jle loc_105BB1C  +
and edi 0FFFFh +
or edi 80070000h +
test edi edi +
jl loc_105BB8F  +
mov edi 80004005h +
jmp loc_105BB8F  +
push dword ptr [ebp+var_2008]  +
add esi 1204h +
cmp [ebp+arg_8] 0 +
lea eax [ebp+var_1004] +
jz loc_105BB50  +
push dword ptr [ebp+var_2008]  +
push eax  +
push edi  +
push esi  +
call sub_101BDD4  +
add esp 14h +
jmp loc_105BB5B  +
push eax  +
push edi  +
push esi  +
call sub_101BDD4  +
add esp 10h +
mov edi eax +
test edi edi +
jge loc_105BB8D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BB8F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BB8F  +
push edi  +
push offset aStringcchpri_3  +
push offset dword_100FF74  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105BB8F  +
xor edi edi +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ecx+62Ch] +
add ecx 42Ch +
xor eax eax +
push ecx  +
mov ecx edi +
mov [esi] ax +
call sub_105B15D  +
mov ebx eax +
test ebx ebx +
jge loc_105BBF2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BC3E  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BC3E  +
push ebx  +
push offset aSetfullconnect  +
push offset dword_100FF74  +
push 19h  +
jmp loc_105BC22  +
push [ebp+arg_4]  +
mov ecx edi +
push esi  +
call sub_105B10A  +
mov ebx eax +
test ebx ebx +
jge loc_105BC2F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BC3E  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BC3E  +
push ebx  +
push offset aGetservernamep  +
push offset dword_100FF74  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105BC3E  +
cmp word ptr [esi] 0 +
jnz loc_105BC3C  +
mov ebx 80004005h +
jmp loc_105BC3E  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_50] +
mov [ebp+var_58] eax +
call sub_1034881  +
cmp [ebp+arg_8] 0 +
jnz loc_105BC83  +
mov esi 80070057h +
jmp loc_105BDBA  +
xor eax eax +
mov [edi] ax +
mov ecx [esi] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+0Ch]  +
mov ecx [esi] +
mov ebx eax +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov ecx [esi] +
mov dword ptr [ebp+var_54] eax +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
jz loc_105BCE9  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+34h]  +
test eax eax +
jnz loc_105BCE9  +
test ebx ebx +
jz loc_105BCBB  +
cmp [ebx] ax +
jnz loc_105BCE9  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jnz loc_105BCE9  +
push 2  +
push [ebp+arg_8]  +
push edi  +
push offset word_1002174  +
push offset aUsernamehint  +
push [ebp+var_58]  +
push offset aServers  +
call sub_1051E14  +
xor esi esi +
jmp loc_105BDB9  +
test ebx ebx +
jz loc_105BD7B  +
cmp word ptr [ebx] 0 +
jz loc_105BD7B  +
mov eax dword ptr [ebp+var_54] +
test eax eax +
jz loc_105BD4A  +
cmp word ptr [eax] 0 +
jz loc_105BD4A  +
push ebx  +
push eax  +
push offset aSS_0  +
push [ebp+arg_8]  +
push edi  +
call sub_101BDD4  +
mov esi eax +
add esp 14h +
test esi esi +
jge loc_105BDB9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BDB9  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BDB9  +
push esi  +
push offset aStringchprintf  +
push offset dword_100FF74  +
push 1Dh  +
jmp loc_105BDAE  +
push ebx  +
push [ebp+arg_8]  +
push edi  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_105BDB9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BDB9  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BDB9  +
push esi  +
push offset aStringchcopyFa  +
push offset dword_100FF74  +
push 1Ch  +
jmp loc_105BDAE  +
push offset word_1002174  +
push [ebp+arg_8]  +
push edi  +
call sub_101BD65  +
mov esi eax +
test esi esi +
jge loc_105BDB9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BDB9  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BDB9  +
push esi  +
push offset aStringchcopyFa  +
push offset dword_100FF74  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
pop ebx  +
lea ecx [ebp+var_50] +
call nullsub_3  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 450h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
xor eax eax +
push 3FEh  +
push eax  +
mov [ebp-404h] ax +
lea eax [ebp-402h] +
push eax  +
mov esi ecx +
call memset  +
add esp 0Ch +
lea ecx [ebp-450h] +
call sub_1034881  +
mov edi 3308h +
push edi  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:IsWindowEnabled  +
test eax eax +
jnz loc_105BE63  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BEDD  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BEDD  +
push offset dword_100FF74  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105BEDD  +
push 200h  +
lea eax [ebp-404h] +
push eax  +
push edi  +
push dword ptr [esi+8]  +
call ds:GetDlgItemTextW  +
test eax eax +
jnz loc_105BEC3  +
call ds:GetLastError  +
test eax eax +
jle loc_105BE91  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jge loc_105BEC3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105BEDF  +
test byte ptr [eax+1Ch] 4 +
jz loc_105BEDF  +
push edi  +
push offset aGetdlgitemtext  +
push offset dword_100FF74  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105BEDF  +
mov ecx [esi] +
mov eax [ecx] +
lea edx [ebp-404h] +
push edx  +
call dword ptr [eax+10h]  +
mov ecx [esi] +
mov eax [ecx] +
push offset word_1002174  +
call dword ptr [eax+20h]  +
xor edi edi +
lea ecx [ebp-450h] +
call nullsub_3  +
mov ecx [ebp-4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
cmp dword ptr [ecx+830h] 0 +
jnz locret_105BF0D  +
jmp loc_105BDD9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
mov esi ecx +
call sub_105BBA7  +
test eax eax +
jge loc_105BF6E  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105BFA7  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105BFA7  +
push eax  +
push offset aGetcanonicalse  +
push offset dword_100FF74  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_105BFA7  +
mov ecx [esi] +
lea eax [ebp+var_208] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
push eax  +
push 3452h  +
push dword ptr [esi+8]  +
call sub_105AFD3  +
cmp [ebp+var_208] 0 +
jz loc_105BFA7  +
push [ebp+arg_0]  +
lea eax [ebp+var_204] +
push offset aTermsrv  +
push eax  +
call sub_105A19B  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
push 3FEh  +
push eax  +
mov [ebp+NameBuffer] ax +
lea eax [ebp-402h] +
push eax  +
mov esi ecx +
call memset  +
mov eax [esi+18h] +
add esp 0Ch +
mov dword ptr [esi+830h] 1 +
cmp eax 7 +
ja loc_105C115  +
jmp ds:off_105C12F[eax*4]  +
push ebx  +
mov edi 3308h +
push edi  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_105C115  +
jmp loc_105C102  +
push 200h  +
lea eax [ebp+NameBuffer] +
push eax  +
push edi  +
mov ecx esi +
call sub_105BC4C  +
xor ebx ebx +
lea eax [ebp+NameBuffer] +
cmp [esi+0Ch] ebx +
jz loc_105C076  +
cmp [ebp+NameBuffer] bx +
jnz loc_105C062  +
lea eax [esi+2Ch] +
push eax  +
push 3308h  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
jmp loc_105C115  +
push eax  +
mov edi 3308h +
push edi  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
test eax eax +
jz loc_105C094  +
push ebx  +
jmp loc_105C104  +
push 1  +
jmp loc_105C104  +
push 200h  +
lea eax [ebp+NameBuffer] +
push eax  +
call sub_1059B11  +
test eax eax +
lea eax [ebp+NameBuffer] +
jnz loc_105C0B6  +
lea eax [esi+2Ch] +
push eax  +
jmp loc_105C017  +
push 200h  +
lea eax [ebp+NameBuffer] +
push eax  +
push edi  +
mov ecx esi +
call sub_105BC4C  +
lea eax [ebp+NameBuffer] +
push eax  +
mov edi 3308h +
push edi  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_105C115  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+34h]  +
test eax eax +
jnz loc_105C102  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
test eax eax +
jz loc_105C094  +
push 0  +
push edi  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
and dword ptr [esi+830h] 0 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 3FEh  +
mov word ptr [ebp+var_604] ax +
xor edi edi +
lea eax [ebp+var_604+2] +
push edi  +
push eax  +
mov esi ecx +
call memset  +
mov ecx [esi] +
mov eax [ecx] +
add esp 0Ch +
call dword ptr [eax]  +
mov ecx [esi] +
mov [ebp+var_60C] eax +
mov eax [ecx] +
call dword ptr [eax+50h]  +
mov ebx eax +
neg ebx  +
push 100h  +
lea eax [ebp+var_204] +
sbb ebx ebx +
push eax  +
mov ecx esi +
inc ebx  +
call sub_105BBA7  +
test eax eax +
jge loc_105C207  +
xor eax eax +
cmp [esi+42Ch] di +
mov ecx esi +
setnz al  +
dec eax  +
and eax 659h +
add eax 3453h +
push eax  +
push 3306h  +
call sub_105B4F4  +
push edi  +
lea eax [ebp+var_204] +
push eax  +
mov ecx esi +
mov [esi+18h] edi +
call sub_105BFBB  +
mov eax [esi+18h] +
push eax  +
push eax  +
push ebx  +
push [ebp+var_60C]  +
push edi  +
jmp loc_105C2E0  +
push 3301h  +
push dword ptr [esi+8]  +
call ds:IsDlgButtonChecked  +
mov edi [esi] +
mov [ebp+var_608] eax +
push 200h  +
lea eax [ebp+var_604] +
push eax  +
mov eax [edi] +
push ebx  +
mov ecx edi +
call dword ptr [eax]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+34h]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push eax  +
push [ebp+var_608]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+4Ch]  +
push eax  +
push offset aTermsrv  +
lea eax [ebp+var_204] +
push eax  +
call sub_105A549  +
cmp [ebp+var_608] 0 +
mov [esi+18h] eax +
jz loc_105C2AF  +
mov eax [esi] +
mov edi eax +
push 200h  +
lea eax [ebp+var_604] +
push eax  +
mov eax [edi] +
push ebx  +
mov ecx edi +
call dword ptr [eax]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+34h]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push eax  +
mov eax [edi] +
push 0  +
mov ecx edi +
call dword ptr [eax+4Ch]  +
push eax  +
push offset aTermsrv  +
lea eax [ebp+var_204] +
push eax  +
call sub_105A549  +
mov edi eax +
push edi  +
mov ecx esi +
call sub_105B708  +
lea eax [ebp+var_604] +
push eax  +
lea eax [ebp+var_204] +
push eax  +
mov ecx esi +
call sub_105BFBB  +
push edi  +
push dword ptr [esi+18h]  +
lea eax [ebp+var_204] +
push ebx  +
push [ebp+var_60C]  +
push eax  +
mov ecx esi +
call sub_105B59A  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+82Ch] +
mov ecx [eax] +
test ecx ecx +
jz loc_105C317  +
and dword ptr [eax] 0 +
push ecx  +
call sub_1018A83  +
lea ecx [esi+62Ch] +
pop esi  +
jmp nullsub_3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 100h  +
lea eax [esi+42Ch] +
push eax  +
call sub_101BD65  +
test eax eax +
jge loc_105C374  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105C374  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105C374  +
push eax  +
push offset aStringcchcopyF  +
push offset dword_100FF74  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx esi +
call sub_105C154  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 284Ch +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 3FEh  +
mov word ptr [ebp+var_604] ax +
xor ebx ebx +
lea eax [ebp+var_604+2] +
push ebx  +
push eax  +
mov esi ecx +
call memset  +
xor eax eax +
push 1FEh  +
mov word ptr [ebp+var_204] ax +
lea eax [ebp+var_204+2] +
push ebx  +
push eax  +
call memset  +
push 2200h  +
lea eax [ebp+var_2804] +
push ebx  +
push eax  +
mov [ebp+var_2814] ebx +
mov [ebp+var_2820] ebx +
mov [ebp+var_2818] ebx +
mov [ebp+var_280C] ebx +
mov [ebp+var_2808] ebx +
call memset  +
add esp 24h +
push 6  +
pop ecx  +
xor eax eax +
mov [ebp+var_284C] ebx +
lea edi [ebp+var_2848] +
stos   +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
mov ecx esi +
mov [ebp+var_2824] 1 +
mov [ebp+var_281C] ebx +
mov [ebp+var_2828] 2 +
call sub_105BBA7  +
cmp eax ebx +
jge loc_105C480  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105C664  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105C664  +
push eax  +
push offset aGetcanonicalse  +
push offset dword_100FF74  +
push 15h  +
jmp loc_105C659  +
xor eax eax +
cmp dword ptr [esi+18h] 1 +
push ebx  +
setnz al  +
push ebx  +
push ebx  +
push 200h  +
mov edi offset aTermsrv +
inc eax  +
mov [ebp+var_2810] eax +
lea eax [ebp+var_604] +
push eax  +
push [ebp+var_2810]  +
lea eax [ebp+var_204] +
push edi  +
push eax  +
call sub_1059F47  +
test eax eax +
jl loc_105C664  +
call sub_1059A5B  +
push eax  +
lea eax [ebp+var_204] +
push eax  +
lea eax [ebp+var_2808] +
push eax  +
mov ecx esi +
call sub_105B95D  +
cmp eax ebx +
jge loc_105C50C  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105C664  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105C664  +
push eax  +
push offset aGetprompttexti  +
push offset dword_100FF74  +
push 16h  +
jmp loc_105C659  +
mov eax [esi+8] +
push 6  +
mov [ebp+var_2808] eax +
lea eax [ebp+var_282C] +
push eax  +
mov esi [esi+82Ch] +
lea eax [ebp+var_2830] +
push eax  +
lea eax [ebp+var_281C] +
push eax  +
push ebx  +
push 40082h  +
lea eax [ebp+var_2824] +
push eax  +
lea eax [ebp+var_280C] +
push eax  +
lea eax [ebp+var_2818] +
push eax  +
lea eax [ebp+var_2820] +
push eax  +
lea eax [ebp+var_2814] +
push eax  +
lea eax [ebp+var_604] +
push eax  +
push ebx  +
lea eax [ebp+var_204] +
push eax  +
lea eax [ebp+var_2808] +
push eax  +
mov ecx esi +
call sub_10507BA  +
test eax eax +
jnz loc_105C664  +
cmp [ebp+var_282C] ebx +
jz loc_105C5C2  +
cmp [ebp+var_2810] 1 +
jnz loc_105C5C2  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105C664  +
test byte ptr [eax+1Ch] 4 +
jz loc_105C664  +
push offset dword_100FF74  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105C664  +
push 2  +
pop esi  +
cmp [ebp+var_2810] esi +
jnz loc_105C5DB  +
cmp [ebp+var_280C] ebx +
jz loc_105C5DB  +
dec [ebp+var_280C]  +
lea eax [ebp+var_284C] +
push eax  +
push 7  +
call ds:CredGetSessionTypes  +
test eax eax +
jz loc_105C605  +
mov eax [ebp+var_2810] +
lea eax [ebp+eax*4+var_284C] +
cmp [eax] esi +
jbe loc_105C601  +
mov [eax] esi +
mov eax [eax] +
jmp loc_105C60B  +
mov eax [ebp+var_2828] +
push eax  +
push [ebp+var_2810]  +
mov eax [ebp+var_280C] +
add eax eax +
push eax  +
push [ebp+var_2818]  +
lea eax [ebp+var_204] +
push [ebp+var_2814]  +
push edi  +
push eax  +
call sub_105A3A4  +
cmp eax ebx +
jge loc_105C664  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105C664  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105C664  +
push eax  +
push offset aSavecredsFaile  +
push offset dword_100FF74  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov ecx [ebp+var_2818] +
cmp ecx ebx +
jz loc_105C68B  +
mov eax [ebp+var_280C] +
add eax eax +
cmp eax ebx +
jz loc_105C680  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_105C67A  +
push [ebp+var_2818]  +
call sub_105D688  +
cmp [ebp+var_2814] ebx +
jz loc_105C69E  +
push [ebp+var_2814]  +
call sub_105D688  +
mov eax [ebp+var_281C] +
cmp eax ebx +
jz loc_105C6B7  +
add eax 18h +
mov [ebp+var_281C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+62Ch] +
mov [esi+8] edi +
mov [esi+0Ch] eax +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
call sub_105B0D2  +
lea ebx [esi+82Ch] +
mov [ebx] edi +
mov [esi+830h] edi +
xor eax eax +
lea edi [esi+1Ch] +
stos   +
stos   +
stos   +
push 200h  +
stos   +
lea eax [esi+42Ch] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push ebx  +
call sub_10506DB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub eax 4Eh +
jz loc_105C7B2  +
sub eax 0C2h +
jz loc_105C79C  +
dec eax  +
jnz loc_105C8CE  +
mov ecx [ebp+arg_C] +
movzx eax cx +
sub eax 3301h +
jz loc_105C78F  +
sub eax 7 +
jnz loc_105C8CE  +
shr ecx 10h +
mov eax 300h +
cmp cx ax +
jnz loc_105C8CE  +
mov ecx [ebp+arg_0] +
call sub_105BEFF  +
jmp loc_105C8CE  +
mov ecx [ebp+arg_0] +
call sub_105C154  +
jmp loc_105C8CE  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ecx+8] eax +
call sub_105B833  +
xor eax eax +
inc eax  +
jmp loc_105C8D0  +
mov eax [ebp+arg_10] +
mov ecx [eax+8] +
cmp ecx 0FFFFFFFCh +
jz loc_105C7C6  +
cmp ecx 0FFFFFFFEh +
jnz loc_105C8CE  +
push ebx  +
push esi  +
lea esi [eax+1Ch] +
push 4  +
mov ecx offset aTsclinkeditsav +
mov eax esi +
pop ebx  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_105C7F9  +
test dx dx +
jz loc_105C7F5  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_105C7F9  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_105C7D5  +
xor eax eax +
jmp loc_105C7FE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_105C80F  +
mov ecx [ebp+arg_0] +
call sub_105C385  +
jmp loc_105C89E  +
mov ecx offset aTsclinkdelsave +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_105C83A  +
test dx dx +
jz loc_105C836  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_105C83A  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_105C816  +
xor eax eax +
jmp loc_105C83F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_105C862  +
mov esi [ebp+arg_0] +
mov eax [esi+18h] +
cmp eax 1 +
jnz loc_105C851  +
push eax  +
jmp loc_105C857  +
cmp eax 2 +
jnz loc_105C85E  +
push eax  +
mov ecx esi +
call sub_105BF13  +
mov ecx esi +
jmp loc_105C8A1  +
mov ecx offset aTsclinkdelrdpc +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_105C88D  +
test dx dx +
jz loc_105C889  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_105C88D  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_105C869  +
xor eax eax +
jmp loc_105C892  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_105C8A8  +
mov ecx [ebp+arg_0] +
call sub_105B3E5  +
mov ecx [ebp+arg_0] +
call sub_105C154  +
jmp loc_105C8CC  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105C8CC  +
test [eax+1Ch] bl +
jz loc_105C8CC  +
push esi  +
push offset dword_100FF74  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
pop esi  +
pop ebx  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 110h +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
jz loc_105C8FB  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov edi eax +
jmp loc_105C909  +
push esi  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
mov edi esi +
call ds:SetWindowLongW  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+hWnd]  +
test edi edi +
jz loc_105C91F  +
push edi  +
call sub_105C740  +
jmp loc_105C925  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_105C944  +
mov eax 80004005h +
jmp loc_105C979  +
cmp [ebp+rgsabound] 0 +
jz loc_105C974  +
cmp [ebp+cDims] 0 +
jz loc_105C974  +
push [ebp+rgsabound]  +
push [ebp+cDims]  +
push 8  +
call ds:SafeArrayCreate  +
mov [esi] eax +
test eax eax +
jnz loc_105C96B  +
mov eax 8007000Eh +
jmp loc_105C979  +
push eax  +
call ds:SafeArrayLock  +
jmp loc_105C979  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
cmp dword ptr [ebx] 0 +
push edi  +
mov edi ecx +
jnz loc_105C99B  +
mov eax 80070057h +
jmp loc_105CA0A  +
push esi  +
push 0  +
call sub_101AE89  +
mov esi [ebp+arg_0] +
cmp esi eax +
mov [ebp+arg_4] eax +
jl loc_105CA04  +
push 0  +
mov ecx edi +
call sub_101AEBA  +
cmp esi eax +
jg loc_105CA04  +
sub esi [ebp+arg_4] +
mov eax [edi] +
mov eax [eax+0Ch] +
shl esi 2 +
mov eax [esi+eax] +
test eax eax +
jz loc_105C9D3  +
push eax  +
call ds:SysFreeString  +
cmp [ebp+arg_8] 0 +
jz loc_105C9F6  +
push dword ptr [ebx]  +
call ds:SysAllocString  +
test eax eax +
jnz loc_105C9EC  +
mov eax 8007000Eh +
jmp loc_105CA09  +
mov ecx [edi] +
mov ecx [ecx+0Ch] +
mov [esi+ecx] eax +
jmp loc_105CA00  +
mov eax [edi] +
mov eax [eax+0Ch] +
mov ecx [ebx] +
mov [esi+eax] ecx +
xor eax eax +
jmp loc_105CA09  +
mov eax 80070057h +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov [ebp+rgsabound.cElements] eax +
mov eax [ebp+arg_4] +
mov [ebp+rgsabound.lLbound] eax +
push 1  +
lea eax [ebp+rgsabound] +
push eax  +
call sub_105C930  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
push esi  +
setnz al  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
mov [ebp+ppv] ebx +
inc eax  +
inc eax  +
cmp [ebp+arg_0] ebx +
jnz loc_105CA97  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_105CE40  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE40  +
push esi  +
push offset loc_10102D0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1051EE1  +
jmp loc_105CE40  +
cmp [ebp+arg_4] ebx +
jnz loc_105CAC5  +
mov eax lpReserved +
mov esi 80070057h +
cmp eax offset lpReserved +
jz loc_105CE40  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE40  +
push esi  +
push offset loc_10102D0  +
push 0Bh  +
jmp loc_105CA87  +
push ebx  +
push eax  +
lea ecx [ebp+var_4] +
call sub_105CA15  +
mov esi eax +
cmp esi ebx +
jge loc_105CB0C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE40  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE40  +
push esi  +
push offset aSaparams_creat  +
push offset loc_10102D0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105CE40  +
push edi  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push ebx  +
lea ecx [ebp+var_4] +
call sub_105C983  +
mov esi eax +
cmp esi ebx +
jge loc_105CB50  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3F  +
push esi  +
push offset aParams_setatFa  +
push offset loc_10102D0  +
push 0Dh  +
jmp loc_105CD96  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
lea ecx [ebp+var_4] +
call sub_105C983  +
mov esi eax +
cmp esi ebx +
jge loc_105CB90  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3F  +
push esi  +
push offset aParams_setatFa  +
push offset loc_10102D0  +
push 0Eh  +
jmp loc_105CD96  +
cmp [ebp+arg_8] ebx +
jz loc_105CBD6  +
push edi  +
lea eax [ebp+arg_8] +
push eax  +
push 2  +
lea ecx [ebp+var_4] +
call sub_105C983  +
mov esi eax +
cmp esi ebx +
jge loc_105CBD6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3F  +
push esi  +
push offset aParams_setatFa  +
push offset loc_10102D0  +
push 0Fh  +
jmp loc_105CD96  +
mov eax [ebp+arg_C] +
mov edi ds:CoCreateInstance +
cmp eax ebx +
jz loc_105CC37  +
cmp [eax] bx +
jz loc_105CC37  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10102E0  +
push 4  +
push ebx  +
push offset stru_10104B0  +
call edi  +
mov esi eax +
cmp esi 80040154h +
jnz loc_105CC07  +
xor esi esi +
cmp esi ebx +
jge loc_105CC37  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3F  +
push esi  +
push offset aCocreateinst_0  +
push offset loc_10102D0  +
push 10h  +
jmp loc_105CD96  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_105CD1A  +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jge loc_105CC7E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3F  +
push esi  +
push offset aSpworkspaceGet  +
push offset loc_10102D0  +
push 11h  +
jmp loc_105CD96  +
push [ebp+var_10]  +
call ds:AllowSetForegroundWindow  +
mov edi offset loc_10102D0 +
mov ebx offset lpReserved +
test eax eax +
jnz loc_105CCD2  +
call ds:GetLastError  +
test eax eax +
jle loc_105CCA9  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
test ecx ecx +
jge loc_105CCD2  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105CCD2  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CCD2  +
push ecx  +
push offset aAllowsetforegr  +
push edi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
push [ebp+var_4]  +
mov eax [ebp+ppv] +
push [ebp+arg_C]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi 800700B7h +
jnz loc_105CCED  +
xor esi esi +
test esi esi +
jge loc_105CE3D  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105CE3D  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3D  +
push esi  +
push offset aSpworkspaceSta  +
push edi  +
push 13h  +
jmp loc_105CE32  +
lea eax [ebp+var_C] +
push eax  +
push offset dword_10020E8  +
push 4  +
push ebx  +
push offset dword_1002018  +
call edi  +
mov esi eax +
cmp esi ebx +
jge loc_105CD5C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3F  +
push esi  +
push offset aCocreateinst_0  +
push offset loc_10102D0  +
push 14h  +
jmp loc_105CD96  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jge loc_105CDA6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105CE3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3F  +
push esi  +
push offset aSpremotedeskto  +
push offset loc_10102D0  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105CE3F  +
push [ebp+var_10]  +
call ds:AllowSetForegroundWindow  +
mov edi offset loc_10102D0 +
mov ebx offset lpReserved +
test eax eax +
jnz loc_105CDFA  +
call ds:GetLastError  +
test eax eax +
jle loc_105CDD1  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
test ecx ecx +
jge loc_105CDFA  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105CDFA  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CDFA  +
push ecx  +
push offset aAllowsetforegr  +
push edi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
mov eax [ebp+var_C] +
mov ecx [eax] +
push 0  +
push [ebp+var_4]  +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi 800700B7h +
jnz loc_105CE16  +
xor esi esi +
test esi esi +
jge loc_105CE3D  +
mov eax lpReserved +
cmp eax ebx +
jz loc_105CE3D  +
test byte ptr [eax+1Ch] 4 +
jz loc_105CE3D  +
push esi  +
push offset aSpremote  +
push edi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
xor ebx ebx +
pop edi  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_105CE4D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_105CE5A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_4] +
call sub_101AF94  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov esi 80004001h +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+uBytes] ebx +
mov [ebp+hMem] ebx +
cmp eax ebx +
jz loc_105CF03  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_105CF03  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jz loc_105CF03  +
mov [ebp+var_C] eax +
lea eax [ebp+uBytes] +
push eax  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
mov [edi] ebx +
mov [ebp+var_10] ecx +
call ds:CryptUnprotectData  +
test eax eax +
jz loc_105CF08  +
mov eax [ebp+uBytes] +
mov [ebp+arg_0] eax +
cmp eax 2 +
jb loc_105CF03  +
mov edx [ebp+hMem] +
mov ecx eax +
shr ecx 1 +
cmp [edx+ecx*2-2] bx +
jnz loc_105CF03  +
push eax  +
call sub_105D670  +
mov esi eax +
cmp esi ebx +
jnz loc_105CEEE  +
mov esi 8007000Eh +
jmp loc_105CF08  +
push [ebp+arg_0]  +
push [ebp+hMem]  +
push esi  +
call memcpy  +
add esp 0Ch +
mov [edi] esi +
xor esi esi +
jmp loc_105CF08  +
mov esi 80070057h +
mov eax [ebp+hMem] +
cmp eax ebx +
jz loc_105CF25  +
mov ecx [ebp+uBytes] +
cmp ecx ebx +
jz loc_105CF1C  +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_105CF16  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] 80004005h +
mov [ebp+var_8] edi +
cmp [ebp+arg_0] edi +
jz loc_105CFAA  +
cmp [ebp+arg_4] edi +
jz loc_105CFAA  +
mov ebx [ebp+arg_8] +
cmp ebx edi +
jz loc_105CFAA  +
mov esi ds:CryptBinaryToStringW +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push 1  +
push [ebp+arg_4]  +
mov [ebx] edi +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jz loc_105CFBB  +
mov eax [ebp+var_8] +
add eax eax +
push eax  +
call sub_105D670  +
mov edi eax +
test edi edi +
jnz loc_105CF8F  +
mov [ebp+var_4] 8007000Eh +
jmp loc_105CFB1  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jz loc_105CFB1  +
and [ebp+var_4] 0 +
mov [ebx] edi +
jmp loc_105CFBB  +
mov [ebp+var_4] 80070057h +
test edi edi +
jz loc_105CFBB  +
push edi  +
call sub_105D688  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_C] 80004005h +
mov [ebp+var_8] esi +
mov [ebp+uBytes] esi +
cmp [ebp+arg_0] esi +
jz loc_105D051  +
mov eax [ebp+arg_4] +
cmp eax esi +
jz loc_105D051  +
mov ebx [ebp+arg_8] +
cmp ebx esi +
jz loc_105D051  +
mov edi ds:CryptStringToBinaryW +
push esi  +
push esi  +
mov [eax] esi +
lea eax [ebp+uBytes] +
push eax  +
push esi  +
push 1  +
push esi  +
push [ebp+arg_0]  +
mov [ebx] esi +
call edi  +
test eax eax +
jz loc_105D065  +
push [ebp+uBytes]  +
call sub_105D670  +
mov [ebp+var_8] eax +
cmp eax esi +
jnz loc_105D02C  +
mov [ebp+var_C] 8007000Eh +
jmp loc_105D058  +
push esi  +
push esi  +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
push 1  +
push esi  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_105D058  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax [ebp+uBytes] +
mov [ebx] eax +
mov [ebp+var_C] esi +
jmp loc_105D065  +
mov [ebp+var_C] 80070057h +
cmp [ebp+var_8] esi +
jz loc_105D065  +
push [ebp+var_8]  +
call sub_105D688  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jz loc_105D0BA  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_105D0BA  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov [esi] ebx +
call sub_105CFCA  +
mov edi eax +
cmp edi ebx +
jl loc_105D0BF  +
push esi  +
push [ebp+var_8]  +
push [ebp+var_4]  +
call sub_105CE6F  +
mov edi eax +
jmp loc_105D0BF  +
mov edi 80070057h +
cmp [ebp+var_4] ebx +
jz loc_105D0CC  +
push [ebp+var_4]  +
call sub_105D688  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+uBytes] esi +
mov [ebp+hMem] esi +
cmp [ebp+arg_0] esi +
jz loc_105D177  +
mov eax [ebp+arg_4] +
cmp eax esi +
jz loc_105D177  +
mov ebx [ebp+arg_8] +
cmp ebx esi +
jz loc_105D177  +
mov [eax] esi +
lea eax [ebp+var_4] +
push eax  +
push 0FFFFFFFEh  +
push [ebp+arg_0]  +
mov [ebx] esi +
call sub_101AFC2  +
mov edi eax +
cmp edi esi +
jl loc_105D18A  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
inc eax  +
inc eax  +
mov [ebp+var_14] eax +
lea eax [ebp+uBytes] +
push eax  +
push 1  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+var_10] ecx +
call ds:CryptProtectData  +
test eax eax +
jz loc_105D17C  +
mov edi [ebp+uBytes] +
push edi  +
call sub_105D670  +
mov esi eax +
test esi esi +
jnz loc_105D15D  +
mov edi 8007000Eh +
jmp loc_105D173  +
push edi  +
push [ebp+hMem]  +
push esi  +
call memcpy  +
mov eax [ebp+arg_4] +
mov [eax] esi +
add esp 0Ch +
mov [ebx] edi +
xor edi edi +
xor esi esi +
jmp loc_105D17C  +
mov edi 80070057h +
cmp [ebp+hMem] esi +
jz loc_105D18A  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jz loc_105D1DE  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_105D1DE  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov [esi] ebx +
call sub_105D0DA  +
mov edi eax +
cmp edi ebx +
jl loc_105D1E3  +
push esi  +
push [ebp+var_8]  +
push [ebp+var_4]  +
call sub_105CF33  +
mov edi eax +
jmp loc_105D1E3  +
mov edi 80070057h +
cmp [ebp+var_4] ebx +
jz loc_105D1F0  +
push [ebp+var_4]  +
call sub_105D688  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:CryptDecodeObject +
push edi  +
mov edi [ebp+pcbStructInfo] +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+cbEncoded]  +
push [ebp+pbEncoded]  +
push [ebp+lpszStructType]  +
push [ebp+dwCertEncodingType]  +
call esi  +
test eax eax +
jz loc_105D25B  +
push dword ptr [edi]  +
push 40h  +
call ds:LocalAlloc  +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
cmp eax ebx +
jz loc_105D283  +
push edi  +
push eax  +
push ebx  +
push [ebp+cbEncoded]  +
push [ebp+pbEncoded]  +
push [ebp+lpszStructType]  +
push [ebp+dwCertEncodingType]  +
call esi  +
test eax eax +
jnz loc_105D27F  +
mov esi [ebp+arg_14] +
push dword ptr [esi]  +
call ds:LocalFree  +
mov [esi] ebx +
call ds:GetLastError  +
cmp eax ebx +
jle loc_105D271  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jge loc_105D278  +
mov ecx [ebp+arg_14] +
mov [ecx] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
xor eax eax +
jmp loc_105D278  +
mov eax 8007000Eh +
jmp loc_105D273  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_105D2AC  +
mov [ebp+var_4] 80070057h +
jmp loc_105D327  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetSystemTime  +
lea eax [ebp+FileTime] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToFileTime  +
test eax eax +
jnz loc_105D2E1  +
call ds:GetLastError  +
test eax eax +
jle loc_105D2DC  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_105D327  +
mov eax [esi+0Ch] +
mov edx [eax+24h] +
mov ecx [ebp+FileTime.dwHighDateTime] +
mov esi [eax+20h] +
push ebx  +
mov ebx [eax+2Ch] +
mov eax [eax+28h] +
push edi  +
mov edi [ebp+FileTime.dwLowDateTime] +
cmp ecx edx +
ja loc_105D30A  +
jb loc_105D302  +
cmp edi esi +
jnb loc_105D30A  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
jmp loc_105D325  +
cmp ecx ebx +
jb loc_105D31F  +
ja loc_105D314  +
cmp edi eax +
jbe loc_105D31F  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
jmp loc_105D325  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
shl esi 2 +
push esi  +
push 40h  +
call ds:LocalAlloc  +
xor ebx ebx +
mov [ebp+hMem] eax +
cmp eax ebx +
jnz loc_105D35C  +
xor esi esi +
jmp loc_105D430  +
push edi  +
push esi  +
push ebx  +
push eax  +
call memset  +
mov edi [ebp+arg_0] +
xor ecx ecx +
add esp 0Ch +
cmp [edi] ecx +
jbe loc_105D3E0  +
mov [ebp+arg_0] ecx +
cmp [ebp+arg_8] ecx +
jbe loc_105D3D9  +
mov esi [ebp+arg_4] +
mov eax [ebp+hMem] +
sub eax esi +
mov [ebp+var_8] eax +
cmp dword ptr [eax+esi] 0 +
jnz loc_105D3BC  +
mov eax [edi+4] +
mov ecx [eax+ebx*4] +
mov eax [esi] +
mov dl [eax] +
cmp dl [ecx] +
jnz loc_105D3B0  +
test dl dl +
jz loc_105D3AC  +
mov dl [eax+1] +
cmp dl [ecx+1] +
jnz loc_105D3B0  +
inc eax  +
inc eax  +
inc ecx  +
inc ecx  +
test dl dl +
jnz loc_105D392  +
xor eax eax +
jmp loc_105D3B5  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_105D3CC  +
mov eax [ebp+var_8] +
inc [ebp+arg_0]  +
mov ecx [ebp+arg_0] +
add esi 4 +
cmp ecx [ebp+arg_8] +
jb loc_105D384  +
jmp loc_105D3D9  +
mov eax [ebp+hMem] +
mov ecx [ebp+arg_0] +
mov dword ptr [eax+ecx*4] 1 +
inc ebx  +
xor ecx ecx +
cmp ebx [edi] +
jb loc_105D371  +
pop edi  +
cmp [ebp+arg_C] ecx +
jnz loc_105D400  +
xor esi esi +
inc esi  +
xor eax eax +
cmp [ebp+arg_8] ecx +
jbe loc_105D427  +
mov edx [ebp+hMem] +
cmp [edx+eax*4] ecx +
jz loc_105D425  +
inc eax  +
cmp eax [ebp+arg_8] +
jb loc_105D3F0  +
jmp loc_105D427  +
cmp [ebp+arg_C] 1 +
jnz loc_105D425  +
xor esi esi +
xor eax eax +
cmp [ebp+arg_8] ecx +
jbe loc_105D427  +
mov ecx [ebp+hMem] +
cmp dword ptr [ecx+eax*4] 1 +
jz loc_105D420  +
inc eax  +
cmp eax [ebp+arg_8] +
jb loc_105D40F  +
jmp loc_105D427  +
xor esi esi +
inc esi  +
jmp loc_105D427  +
xor esi esi +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov edi [ebp+pcbStructInfo] +
mov [ebp+hMem] ebx +
mov [ebp+var_8] ebx +
mov [edi] ebx +
cmp esi ebx +
jnz loc_105D467  +
mov [ebp+var_8] 80070057h +
jmp loc_105D4F3  +
mov eax [esi+0Ch] +
push dword ptr [eax+6Ch]  +
push dword ptr [eax+68h]  +
push offset pszObjId  +
call ds:CertFindExtension  +
cmp [ebp+pcbUsage] ebx +
jz loc_105D4BD  +
cmp eax ebx +
jz loc_105D4F3  +
lea ecx [ebp+pcbStructInfo] +
push ecx  +
lea ecx [ebp+hMem] +
push ecx  +
push ebx  +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
push 24h  +
push dword ptr [esi]  +
call sub_105D1FE  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_105D4E5  +
cmp [ebp+hMem] ebx +
jz loc_105D4F3  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+pcbUsage]  +
push [ebp+hMem]  +
call sub_105D334  +
mov [edi] eax +
jmp loc_105D4E5  +
lea eax [ebp+pcbUsage] +
push eax  +
push ebx  +
push 2  +
push esi  +
mov [ebp+pcbUsage] ebx +
call ds:CertGetEnhancedKeyUsage  +
test eax eax +
jnz loc_105D4F3  +
call ds:GetLastError  +
cmp eax 80092004h +
jnz loc_105D4F3  +
mov dword ptr [edi] 1 +
cmp [ebp+hMem] ebx +
jz loc_105D4F3  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
xor eax eax +
mov [ebp+pcbStructInfo] edi +
mov [ebp+var_8] edi +
mov [ebp+pcbUsage] offset a1_3_6_1_5_5_7_ +
mov [ebp+var_10] offset a1_3_6_1_5_5__0 +
mov [ebp+var_C] offset a1_3_6_1_4_1_31 +
cmp esi edi +
jz loc_105D581  +
push 1  +
push 3  +
lea eax [ebp+pcbUsage] +
push eax  +
push [ebp+arg_0]  +
lea eax [ebp+pcbStructInfo] +
push eax  +
mov dword ptr [esi] 10000000h +
call sub_105D43D  +
test eax eax +
jl loc_105D579  +
cmp [ebp+pcbStructInfo] edi +
jz loc_105D579  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_105D28F  +
test eax eax +
jl loc_105D571  +
cmp [ebp+var_8] edi +
jnz loc_105D571  +
xor eax eax +
inc eax  +
mov [esi] edi +
jmp loc_105D581  +
mov dword ptr [esi] 1002h +
jmp loc_105D57F  +
mov dword ptr [esi] 1001h +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
xor eax eax +
mov [ebp+var_18] ebx +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
mov edi [ebp+arg_18] +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
cmp edi ebx +
jz loc_105D643  +
cmp [ebp+arg_0] ebx +
jz loc_105D643  +
mov eax [ebp+arg_C] +
mov esi ds:CertGetCertificateChain +
mov [ebp+var_14] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_10] eax +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push [ebp+arg_10]  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_14]  +
mov [ebp+var_18] 10h +
push ebx  +
push [ebp+arg_0]  +
push ebx  +
call esi  +
test eax eax +
jz loc_105D604  +
mov eax [ebp+var_4] +
cmp [eax+4] ebx +
jnz loc_105D604  +
mov [ebp+var_4] ebx +
jmp loc_105D63D  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
push [ebp+arg_10]  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_14]  +
push ebx  +
push [ebp+arg_0]  +
push 1  +
call esi  +
test eax eax +
jnz loc_105D637  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_105D633  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_105D648  +
mov eax [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [edi] eax +
xor edi edi +
jmp loc_105D648  +
mov edi 80070057h +
mov esi ds:CertFreeCertificateChain +
cmp [ebp+var_4] ebx +
jz loc_105D658  +
push [ebp+var_4]  +
call esi  +
cmp [ebp+var_8] ebx +
jz loc_105D662  +
push [ebp+var_8]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+uBytes]  +
call sub_105E057  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_105E079  +
***
cmp dword_1066C0C 0 +
push esi  +
jz loc_105D6CD  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105D6C6  +
test byte ptr [eax+1Ch] 4 +
jz loc_105D6C6  +
push offset dword_1010590  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov esi 80004005h +
jmp loc_105D706  +
call sub_105E333  +
mov esi eax +
test esi esi +
jge loc_105D6FE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105D706  +
test byte ptr [eax+1Ch] 4 +
jz loc_105D706  +
push offset dword_1010590  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105D706  +
inc dword_1066C0C  +
xor esi esi +
mov eax esi +
pop esi  +
retn   +
***
call sub_105E1F7  +
test eax eax +
jge loc_105D73C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105D73C  +
test byte ptr [eax+1Ch] 4 +
jz loc_105D73C  +
push offset dword_1010590  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
dec dword_1066C0C  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_105D796  +
mov eax [esi+8] +
dec eax  +
imul eax eax +
add eax 10h +
push eax  +
call sub_105D670  +
test eax eax +
jnz loc_105D772  +
mov eax 8007000Eh +
jmp loc_105D7A6  +
xor edx edx +
cmp [esi+8] edx +
jbe loc_105D78E  +
lea ecx [eax+4] +
push edi  +
mov edi [esi] +
mov [ecx+4] edi +
mov [esi] ecx +
inc edx  +
add ecx 0Ch +
cmp edx [esi+8] +
jb loc_105D77D  +
pop edi  +
mov ecx [esi+4] +
mov [eax] ecx +
mov [esi+4] eax +
mov eax [esi] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [esi] +
mov eax [eax+4] +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+0E4h] 0 +
jz loc_105D7D5  +
push edi  +
mov eax [ecx+0E4h] +
mov edx [eax+4] +
mov edi [ecx] +
mov [eax+4] edi +
mov [ecx] eax +
mov [ecx+0E4h] edx +
test edx edx +
jnz loc_105D7BA  +
pop edi  +
and dword ptr [ecx+0ECh] 0 +
and dword ptr [ecx+0E8h] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_105D74A  +
test eax eax +
jge loc_105D803  +
xor eax eax +
jmp loc_105D839  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [esi+0E4h] +
mov [eax+4] ecx +
and dword ptr [eax+8] 0 +
mov ecx [esi+0E4h] +
test ecx ecx +
jz loc_105D827  +
mov [ecx+8] eax +
jmp loc_105D82D  +
mov [esi+0E8h] eax +
inc dword ptr [esi+0ECh]  +
mov [esi+0E4h] eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_105D74A  +
test eax eax +
jge loc_105D85D  +
xor eax eax +
jmp loc_105D88D  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
and dword ptr [eax+4] 0 +
lea ecx [esi+0E8h] +
mov edx [ecx] +
mov [eax+8] edx +
mov edx [ecx] +
test edx edx +
jz loc_105D87F  +
mov [edx+4] eax +
jmp loc_105D885  +
mov [esi+0E4h] eax +
inc dword ptr [esi+0ECh]  +
mov [ecx] eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
test edx edx +
jz loc_105D8DE  +
lea esi [ecx+0E4h] +
mov eax [esi] +
test eax eax +
jz loc_105D8DE  +
push edi  +
mov edi [eax] +
mov [edx] edi +
mov edx [eax+4] +
mov [esi] edx +
pop edi  +
test edx edx +
jz loc_105D8C5  +
and dword ptr [edx+8] 0 +
jmp loc_105D8CC  +
and dword ptr [ecx+0E8h] 0 +
mov edx [ecx] +
mov [eax+4] edx +
dec dword ptr [ecx+0ECh]  +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_105D8E0  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [ecx+0E4h] +
push esi  +
mov esi [eax+4] +
cmp eax [edx] +
jnz loc_105D904  +
mov [edx] esi +
jmp loc_105D90A  +
mov edx [eax+8] +
mov [edx+4] esi +
mov esi [eax+8] +
lea edx [ecx+0E8h] +
cmp eax [edx] +
jnz loc_105D91B  +
mov [edx] esi +
jmp loc_105D921  +
mov edx [eax+4] +
mov [edx+8] esi +
mov edx [ecx] +
mov [eax+4] edx +
dec dword ptr [ecx+0ECh]  +
mov [ecx] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
lea eax [ecx+10h] +
xor edx edx +
mov [ecx+4] eax +
mov [eax] edx +
push esi  +
mov eax [ecx+4] +
mov esi [ecx] +
lea eax [eax+edx+4] +
add edx 0Ch +
mov [eax+4] esi +
mov [ecx] eax +
cmp edx 0C0h +
jb loc_105D94E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov [ecx+0E0h] eax +
call sub_105D938  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:MessageBoxW  +
***
cmp dword_1066C20 0 +
jz loc_105D9D3  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105D9D0  +
test byte ptr [eax+1Ch] 2 +
jz loc_105D9D0  +
push offset dword_10105C0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
retn   +
push esi  +
mov esi offset unk_1066C1C +
mov ecx esi +
call sub_1061FD6  +
test eax eax +
jnz loc_105DA0F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DA08  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DA08  +
push offset dword_10105C0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 8007000Eh +
pop esi  +
retn   +
mov ecx esi +
call sub_106204C  +
and dword_1066C18 0 +
and dword_1066C14 0 +
mov ecx esi +
call sub_106205F  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi offset unk_1066C1C +
mov ecx esi +
call sub_106204C  +
mov eax dword_1066C18 +
test eax eax +
jz loc_105DA62  +
push eax  +
call sub_10614A1  +
and dword_1066C18 0 +
and dword_1066C14 0 +
jmp loc_105DA86  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DA86  +
test byte ptr [eax+1Ch] 1 +
jz loc_105DA86  +
push offset dword_10105C0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov ecx esi +
pop esi  +
jmp sub_106205F  +
***
cmp dword_1066C20 0 +
jnz loc_105DAB7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DAEE  +
test byte ptr [eax+1Ch] 2 +
jz loc_105DAEE  +
push offset dword_10105C0  +
push 0Dh  +
jmp loc_105DAE3  +
call sub_105DA34  +
mov ecx offset unk_1066C1C +
call sub_1062024  +
test eax eax +
jnz loc_105DAEE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DAEE  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DAEE  +
push offset dword_10105C0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi offset unk_1066C1C +
mov ecx esi +
mov ebx edi +
call sub_106204C  +
mov ecx esi +
cmp dword_1066C14 edi +
jnz loc_105DB31  +
mov ebx dword_1066C18 +
jmp loc_105DB9F  +
call sub_106205F  +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_105DB73  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DBA4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DBA4  +
push offset dword_10105C0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105DBA4  +
push 0  +
push 8  +
lea eax [ebp+Filename] +
push eax  +
call sub_10615F2  +
mov ebx eax +
call sub_105DA34  +
mov ecx esi +
call sub_106204C  +
mov dword_1066C14 edi +
mov dword_1066C18 ebx +
mov ecx esi +
call sub_106205F  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
call sub_105DAF6  +
test eax eax +
jnz loc_105DBF6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DC0B  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DC0B  +
push offset dword_10105C0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105DC0B  +
push [ebp+dwInitParam]  +
push [ebp+lpDialogFunc]  +
push [ebp+hWndParent]  +
push [ebp+lpTemplateName]  +
push eax  +
call ds:CreateDialogParamW  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
or esi 0FFFFFFFFh +
call sub_105DAF6  +
test eax eax +
jnz loc_105DC52  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DC67  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DC67  +
push offset dword_10105C0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105DC67  +
push [ebp+dwInitParam]  +
push [ebp+lpDialogFunc]  +
push [ebp+hWndParent]  +
push [ebp+lpTemplateName]  +
push eax  +
call ds:DialogBoxParamW  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor edi edi +
call sub_105DAF6  +
mov esi eax +
test esi esi +
jnz loc_105DCB0  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DCD7  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DCD7  +
push offset dword_10105C0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105DCD7  +
movzx eax [ebp+arg_4] +
push 5  +
push eax  +
push esi  +
call ds:FindResourceW  +
test eax eax +
jz loc_105DCD7  +
push eax  +
push esi  +
call ds:LoadResource  +
test eax eax +
jz loc_105DCD7  +
push eax  +
call ds:LockResource  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
call sub_105DAF6  +
test eax eax +
jnz loc_105DD1E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DD2A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DD2A  +
push offset dword_10105C0  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105DD2A  +
push [ebp+lpTableName]  +
push eax  +
call ds:LoadAcceleratorsW  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
call sub_105DAF6  +
test eax eax +
jnz loc_105DD70  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105DD82  +
test byte ptr [eax+1Ch] 4 +
jz loc_105DD82  +
push offset dword_10105C0  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
jmp loc_105DD82  +
push [ebp+nBufferMax]  +
push [ebp+lpBuffer]  +
push [ebp+uID]  +
push eax  +
call ds:LoadStringW  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push 57h  +
pop eax  +
test ecx ecx +
jz loc_105DE03  +
test esi esi +
jz loc_105DE03  +
push 80h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push ecx  +
call sub_105DD36  +
test eax eax +
jz loc_105DDF9  +
push 0  +
push 0  +
push 407h  +
push esi  +
mov esi ds:SendMessageW +
call esi  +
test eax eax +
jz loc_105DDF9  +
lea ecx [ebp+Buffer] +
push ecx  +
push 1  +
push 1501h  +
push eax  +
call esi  +
test eax eax +
jnz loc_105DE01  +
call ds:GetLastError  +
jmp loc_105DE03  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1008h +
call __alloca_probe  +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_1008] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 400h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push edi  +
call sub_105DD36  +
test eax eax +
jz loc_105DE8D  +
push esi  +
lea eax [ebp+Text] +
push eax  +
push [ebp+arg_C]  +
push edi  +
call sub_105DD36  +
test eax eax +
jz loc_105DE8D  +
push [ebp+uType]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push ebx  +
call ds:MessageBoxW  +
mov [ebp+var_1008] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1008] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
xor edi edi +
and [ebp+var_4] edi +
push esi  +
call sub_102AAF4  +
test eax eax +
jge loc_105DEFA  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105DF35  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105DF35  +
push eax  +
push offset aFailedToGetStr  +
push offset dword_10105C0  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_105DF35  +
mov eax [ebp+var_4] +
lea ecx [eax-1] +
mov edi eax +
test ecx ecx +
jl loc_105DF2F  +
cmp word ptr [esi+ecx*2] 5Ch +
jz loc_105DF12  +
dec ecx  +
jns loc_105DF06  +
jmp loc_105DF2F  +
sub eax ecx +
dec eax  +
mov edi eax +
xor edx edx +
test edi edi +
jle loc_105DF2F  +
lea eax [esi+ecx*2+2] +
mov cx [eax] +
mov [esi+edx*2] cx +
inc edx  +
inc eax  +
inc eax  +
cmp edx edi +
jl loc_105DF21  +
xor eax eax +
mov [esi+edi*2] ax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 82Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+hModule] eax +
mov eax [ebp+arg_4] +
xor ebx ebx +
push ebx  +
mov [ebp+var_82C] eax +
mov esi 208h +
push esi  +
lea eax [ebp+Text] +
push eax  +
push ebx  +
push 2  +
push ebx  +
push 1200h  +
call ds:FormatMessageW  +
push offset asc_1010628  +
push esi  +
lea eax [ebp+Text] +
push eax  +
call sub_1027578  +
mov edi 104h +
push edi  +
lea eax [ebp+Filename] +
push eax  +
push [ebp+hModule]  +
call ds:GetModuleFileNameW  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
lea eax [ebp+pszPath] +
push eax  +
call sub_101BD65  +
lea eax [ebp+Filename] +
push eax  +
call sub_105DEA9  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathRemoveFileSpecW  +
lea eax [ebp+pszPath] +
push eax  +
push esi  +
lea eax [ebp+Text] +
push eax  +
call sub_1027578  +
push offset aLang_name  +
push esi  +
lea eax [ebp+Text] +
push eax  +
call sub_1027578  +
lea eax [ebp+Filename] +
push eax  +
push esi  +
lea eax [ebp+Text] +
push eax  +
call sub_1027578  +
push [ebp+var_82C]  +
lea eax [ebp+Text] +
push esi  +
push eax  +
call sub_1027578  +
push 10h  +
push ebx  +
lea eax [ebp+Text] +
push eax  +
push ebx  +
call ds:MessageBoxW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push [ebp+uBytes]  +
neg eax  +
sbb eax eax +
and eax 40h +
push eax  +
call ds:LocalAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LocalFree  +
***
call __SEH_prolog4  +
mov [ebp+var_1C] 80004005h +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_105E0AE  +
mov eax 80070057h +
jmp loc_105E134  +
push 18h  +
push 40h  +
call ds:LocalAlloc  +
test eax eax +
jnz loc_105E0E7  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E0E0  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E0E0  +
push offset dword_101063C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 8007000Eh +
jmp loc_105E134  +
mov [esi] eax +
and [ebp+ms_exc.disabled] 0 +
push eax  +
call ds:InitializeCriticalSection  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
jmp loc_105E134  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E12A  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E12A  +
push offset dword_101063C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpCriticalSection] 0 +
jnz loc_105E153  +
mov eax 80070057h +
jmp loc_105E15E  +
push [ebp+lpCriticalSection]  +
call ds:EnterCriticalSection  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpCriticalSection] 0 +
jnz loc_105E179  +
mov eax 80070057h +
jmp loc_105E184  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpCriticalSection] 0 +
jnz loc_105E19F  +
mov eax 80070057h +
jmp loc_105E1B2  +
push [ebp+lpCriticalSection]  +
call ds:DeleteCriticalSection  +
push [ebp+lpCriticalSection]  +
call sub_105E079  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_105E1CD  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
pop ebp  +
jmp ds:InterlockedIncrement  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_105E1EB  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
pop ebp  +
jmp ds:InterlockedDecrement  +
***
mov eax dword_1065E04 +
cmp eax 2 +
jz loc_105E20A  +
cmp eax 1 +
jnz loc_105E321  +
mov eax dwTlsIndex +
push esi  +
mov esi ds:TlsFree +
push edi  +
test eax eax +
jz loc_105E225  +
push eax  +
call esi  +
and dwTlsIndex 0 +
mov eax dword_1066F60 +
test eax eax +
jz loc_105E238  +
push eax  +
call esi  +
and dword_1066F60 0 +
push offset unk_1066F7C  +
call sub_105E46E  +
mov esi offset dword_101063C +
mov edi offset lpReserved +
test eax eax +
jge loc_105E274  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_105E274  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105E274  +
push eax  +
push offset aFailedToTerm_0  +
push esi  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
mov eax lpCriticalSection +
test eax eax +
jz loc_105E2AB  +
push eax  +
call sub_105E18D  +
test eax eax +
jge loc_105E2AB  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_105E2AB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105E2AB  +
push eax  +
push offset aFailedToTerm_1  +
push esi  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
call sub_105E68A  +
test eax eax +
jge loc_105E2D8  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_105E2D8  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105E2D8  +
push eax  +
push offset aFailedToUnregi  +
push esi  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
call sub_105E5A9  +
test eax eax +
jge loc_105E305  +
mov ecx lpReserved +
cmp ecx edi +
jz loc_105E305  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105E305  +
push eax  +
push offset aFailedToUnre_0  +
push esi  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
and dword_1066F70 0 +
xor eax eax +
cmp dword_1065E04 1 +
mov edi offset unk_1066F64 +
stos   +
stos   +
stos   +
pop edi  +
pop esi  +
jz loc_105E32B  +
mov dword_1065E04 3 +
xor eax eax +
retn   +
***
mov eax dword_1065E04 +
push ebx  +
push esi  +
mov esi 80004005h +
mov ebx offset dword_101063C +
cmp eax 1 +
jz loc_105E352  +
cmp eax 3 +
jnz loc_105E3F4  +
mov esi ds:TlsAlloc +
call esi  +
mov dwTlsIndex eax +
call esi  +
push offset lpCriticalSection  +
mov dword_1066F60 eax +
call sub_105E08A  +
mov esi eax +
test esi esi +
jge loc_105E39E  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E3EE  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E3EE  +
push esi  +
push offset aFailedToInit_6  +
push ebx  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105E3E9  +
push offset unk_1066F7C  +
call sub_105E423  +
mov esi eax +
test esi esi +
jge loc_105E3CB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E3EE  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E3EE  +
push esi  +
push offset aFailedToInit_7  +
push ebx  +
push 0Bh  +
jmp loc_105E391  +
push edi  +
xor eax eax +
mov edi offset unk_1066F64 +
stos   +
stos   +
xor esi esi +
stos   +
mov dword_1066F70 esi +
mov dword_1065E04 2 +
pop edi  +
mov eax lpReserved +
test esi esi +
jge loc_105E419  +
jmp loc_105E3F9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E414  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E414  +
push ebx  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
call sub_105E1F7  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_105E45A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E453  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E453  +
push offset dword_1010840  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 80070057h +
jmp loc_105E465  +
and dword ptr [eax+4] 0 +
mov [eax+8] eax +
mov [eax] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_105E4A6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E49F  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E49F  +
push offset dword_1010840  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
mov eax 80070057h +
jmp loc_105E4CD  +
push esi  +
mov esi [edi+8] +
jmp loc_105E4C6  +
mov eax [esi+8] +
mov ecx [esi] +
mov [eax] ecx +
mov eax [esi] +
mov ecx [esi+8] +
mov [eax+8] ecx +
mov eax esi +
mov esi [esi+8] +
push eax  +
call sub_105E079  +
cmp edi esi +
jnz loc_105E4AC  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_105E4ED  +
cmp ecx 7FFFFFFFh +
jbe loc_105E4F2  +
mov eax 80070057h +
test eax eax +
jl loc_105E52E  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_105E51E  +
cmp eax esi +
ja loc_105E51E  +
jnz loc_105E529  +
jmp loc_105E523  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_105E598  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_105E598  +
push [ebp+arg_0]  +
xor ecx ecx +
push offset unk_1066F8C  +
push offset aPS  +
push [ebp+arg_8]  +
mov [eax] cx +
push eax  +
call sub_105E4D7  +
mov esi eax +
add esp 14h +
test esi esi +
jge loc_105E59D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E59D  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E59D  +
push esi  +
push offset aFailedStringcc  +
push offset dword_1010840  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105E59D  +
mov esi 80070057h +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 208h  +
lea eax [ebp+ClassName] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+ClassName] +
push eax  +
push offset aPal_sys_win32_  +
call sub_105E535  +
mov esi eax +
test esi esi +
jge loc_105E61D  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E676  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E676  +
push esi  +
push offset aFailedToGetMod  +
push offset dword_1010840  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105E676  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
lea eax [ebp+ClassName] +
push eax  +
call ds:UnregisterClassW  +
test eax eax +
jnz loc_105E676  +
call ds:GetLastError  +
mov esi eax +
test eax eax +
jle loc_105E64F  +
and esi 0FFFFh +
or esi 80070000h +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105E676  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105E676  +
push eax  +
push offset dword_1010840  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 208h  +
lea eax [ebp+ClassName] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+ClassName] +
push eax  +
push offset aPal_sys_win3_0  +
call sub_105E535  +
mov esi eax +
test esi esi +
jge loc_105E6FE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E757  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E757  +
push esi  +
push offset aFailedToGetMod  +
push offset dword_1010840  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105E757  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
lea eax [ebp+ClassName] +
push eax  +
call ds:UnregisterClassW  +
test eax eax +
jnz loc_105E757  +
call ds:GetLastError  +
mov esi eax +
test eax eax +
jle loc_105E730  +
and esi 0FFFFh +
or esi 80070000h +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105E757  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105E757  +
push eax  +
push offset dword_1010840  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1051EE1  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_105E7AF  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E7A6  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E7A6  +
push offset aValidateandove  +
push offset dword_1010960  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_4] 80070057h +
jmp loc_105E823  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_105E7E9  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E7E0  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E7E0  +
push offset aValidateandove  +
push offset dword_1010960  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov [ebp+var_4] 80070057h +
jmp loc_105E822  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+28h]  +
mov ebx eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
test bl 3 +
pop ebx  +
jz loc_105E822  +
xor ecx ecx +
cmp eax ecx +
jz loc_105E80B  +
cmp [eax] cx +
jnz loc_105E822  +
cmp dword ptr [edi] 2 +
jnz loc_105E818  +
mov dword ptr [edi] 4 +
jmp loc_105E81A  +
mov [edi] ecx +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
mov [ebp+var_4] eax +
cmp edi eax +
jnz loc_105E87A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E870  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E870  +
push offset aGeteffective_1  +
push offset dword_1010960  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1017CE7  +
mov ebx 80070057h +
jmp loc_105EBB8  +
cmp [ebp+arg_8] eax +
jnz loc_105E89F  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E870  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E870  +
push offset aGeteffective_1  +
push offset dword_1010960  +
push 0Bh  +
jmp loc_105E865  +
mov esi [ebp+arg_C] +
cmp esi eax +
jnz loc_105E8C6  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E870  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E870  +
push offset aGeteffective_1  +
push offset dword_1010960  +
push 0Ch  +
jmp loc_105E865  +
cmp [ebp+arg_10] eax +
jnz loc_105E8EE  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105E870  +
test byte ptr [eax+1Ch] 4 +
jz loc_105E870  +
push offset aGeteffective_1  +
push offset dword_1010960  +
push 0Dh  +
jmp loc_105E865  +
lea eax [ebp+var_4] +
push eax  +
call sub_1049D94  +
mov ebx eax +
test ebx ebx +
jge loc_105E929  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EBB4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EBB4  +
push ebx  +
push offset aLoaddefaultp_0  +
push offset dword_1010960  +
push 0Eh  +
jmp loc_105EB97  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_105EB3A  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov ecx [ebp+var_4] +
mov edi eax +
mov eax [ecx] +
mov esi edi +
mov [ebp+var_8] edi +
shr esi 1 +
shr edi 2 +
not esi  +
not edi  +
and esi 1 +
and edi 1 +
call dword ptr [eax+18h]  +
mov ecx [ebp+var_4] +
mov [ebp+var_C] eax +
mov eax [ecx] +
call dword ptr [eax+30h]  +
mov ecx [ebp+var_4] +
mov ebx eax +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov [ebp+var_10] eax +
mov eax [ebp+var_8] +
not eax  +
test al 1 +
mov eax [ebp+arg_4] +
jz loc_105E9DA  +
cmp dword ptr [eax] 1 +
jz loc_105E986  +
mov dword ptr [eax] 2 +
test esi esi +
jnz loc_105EA5C  +
cmp [ebp+arg_0] esi +
jz loc_105EA5C  +
mov edx [ebp+arg_8] +
mov ecx [ebp+var_4] +
push dword ptr [edx]  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov ebx eax +
test ebx ebx +
jge loc_105EAA1  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EBB4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EBB4  +
push ebx  +
push offset aPprofileSetaut  +
push offset dword_1010960  +
push 11h  +
jmp loc_105EB97  +
cmp [ebp+arg_0] 0 +
jnz loc_105EA0A  +
push 2  +
pop ecx  +
cmp [eax] ecx +
jnz loc_105E9F8  +
xor edx edx +
cmp ebx ecx +
setnz dl  +
lea edx [edx+edx+2] +
mov ecx edx +
mov [eax] ecx +
jmp loc_105E986  +
sub ebx ecx +
neg ebx  +
sbb ebx ebx +
and ebx 0FFFFFFFEh +
add ebx ecx +
mov [eax] ebx +
jmp loc_105E986  +
mov eax [eax] +
cmp eax 1 +
jz loc_105EA1A  +
cmp eax 2 +
jz loc_105EA1A  +
xor eax eax +
jmp loc_105EA1D  +
push 2  +
pop eax  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+2Ch]  +
mov ebx eax +
test ebx ebx +
jge loc_105E986  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EBB4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EBB4  +
push ebx  +
push offset aPprofileSetpro  +
push offset dword_1010960  +
push 0Fh  +
jmp loc_105EB97  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
call sub_105E76B  +
mov ebx eax +
test ebx ebx +
jge loc_105EA99  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EBB4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EBB4  +
push ebx  +
push offset aValidateandove  +
push offset dword_1010960  +
push 10h  +
jmp loc_105EB97  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
test edi edi +
jnz loc_105EB08  +
cmp [ebp+arg_0] edi +
jz loc_105EB08  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax 1 +
jnz loc_105EAB9  +
push 3  +
pop eax  +
jmp loc_105EAC9  +
xor ecx ecx +
test eax eax +
setnz cl  +
lea ecx ds:2[ecx*4] +
mov eax ecx +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+1Ch]  +
mov ebx eax +
test ebx ebx +
jge loc_105EBC8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EBB4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EBB4  +
push ebx  +
push offset aPprofileSetaut  +
push offset dword_1010960  +
push 12h  +
jmp loc_105EB97  +
mov eax [ebp+var_10] +
cmp eax 3 +
jnz loc_105EB15  +
xor eax eax +
inc eax  +
jmp loc_105EB33  +
cmp eax 1 +
jnz loc_105EB1E  +
push 3  +
jmp loc_105EB2E  +
cmp eax 4 +
jnz loc_105EB27  +
push 2  +
jmp loc_105EB2E  +
cmp eax 7 +
jnz loc_105EB31  +
push 5  +
pop eax  +
jmp loc_105EB33  +
xor eax eax +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
jmp loc_105EBB4  +
cmp [ebp+arg_0] 1 +
jnz loc_105EBA4  +
mov eax [esi] +
cmp eax 1 +
jnz loc_105EB4B  +
push 3  +
jmp loc_105EB51  +
test eax eax +
jnz loc_105EB54  +
push 2  +
pop eax  +
jmp loc_105EB61  +
xor ecx ecx +
cmp eax 5 +
setz cl  +
add ecx 6 +
mov eax ecx +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
mov eax [ebp+arg_8] +
push dword ptr [eax]  +
push 0  +
call sub_104A2C8  +
mov ebx eax +
test ebx ebx +
jge loc_105EBC8  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EBB4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EBB4  +
push ebx  +
push offset aFailedToCreate  +
push offset dword_1010960  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105EBB4  +
cmp dword ptr [edi] 2 +
jnz loc_105EBB1  +
mov dword ptr [edi] 4 +
jmp loc_105EBB4  +
and dword ptr [edi] 0 +
test ebx ebx +
jge loc_105EBC8  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_105EBC8  +
mov eax [ecx] +
call dword ptr [eax+4]  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_10] +
pop edi  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
xor ebx ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_C] 4 +
mov [ebp+var_8] ebx +
call sub_105E830  +
cmp eax ebx +
jge loc_105EC4B  +
mov ecx lpReserved +
cmp ecx offset lpReserved +
jz loc_105EE04  +
test byte ptr [ecx+1Ch] 4 +
jz loc_105EE04  +
push eax  +
push offset aCtscproxyutilG  +
push offset dword_1010960  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10188BE  +
jmp loc_105EE04  +
push esi  +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push 1  +
push offset aTsgConnection  +
call ds:WinHttpOpen  +
cmp eax ebx +
mov ebx ds:GetLastError +
mov [ebp+arg_4] eax +
mov edi 0FFFFh +
mov esi 80070000h +
jnz loc_105ECBB  +
call ebx  +
test eax eax +
jle loc_105EC7E  +
and eax edi +
or eax esi +
mov ecx eax +
test ecx ecx +
jge loc_105ECBB  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EDF3  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EDF3  +
push ecx  +
push offset aWinhttpopenFai  +
push offset dword_1010960  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105EDF3  +
push 0  +
push 1BBh  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:WinHttpConnect  +
mov [ebp+arg_C] eax +
test eax eax +
jnz loc_105ED1C  +
call ebx  +
test eax eax +
jle loc_105ECDF  +
and eax edi +
or eax esi +
mov ecx eax +
test ecx ecx +
jge loc_105ED1C  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EDE4  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EDE4  +
push ecx  +
push offset aWinhttpconnect  +
push offset dword_1010960  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
jmp loc_105EDE4  +
push 800000h  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push offset aGet  +
push [ebp+arg_C]  +
call ds:WinHttpOpenRequest  +
mov [ebp+arg_8] eax +
xor eax eax +
cmp [ebp+arg_8] eax +
jnz loc_105ED72  +
call ebx  +
test eax eax +
jle loc_105ED49  +
and eax edi +
or eax esi +
mov ecx eax +
test ecx ecx +
jge loc_105ED70  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EDD5  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EDD5  +
push ecx  +
push offset aWinhttpopenreq  +
push offset dword_1010960  +
push 17h  +
jmp loc_105EDCA  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push [ebp+arg_8]  +
call ds:WinHttpSendRequest  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 4Eh  +
push [ebp+arg_8]  +
call ds:WinHttpQueryOption  +
test eax eax +
jnz loc_105EDD5  +
and [ebp+var_4] eax +
call ebx  +
test eax eax +
jle loc_105EDA5  +
and eax edi +
or eax esi +
mov ecx eax +
test ecx ecx +
jge loc_105EDD5  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_105EDD5  +
test byte ptr [eax+1Ch] 4 +
jz loc_105EDD5  +
push ecx  +
push offset aWinhttpqueryop  +
push offset dword_1010960  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10188BE  +
cmp [ebp+arg_8] 0 +
jz loc_105EDE4  +
push [ebp+arg_8]  +
call ds:WinHttpCloseHandle  +
cmp [ebp+arg_C] 0 +
jz loc_105EDF3  +
push [ebp+arg_C]  +
call ds:WinHttpCloseHandle  +
cmp [ebp+arg_4] 0 +
pop edi  +
pop esi  +
jz loc_105EE04  +
push [ebp+arg_4]  +
call ds:WinHttpCloseHandle  +
mov ecx [ebp+var_8] +
pop ebx  +
test ecx ecx +
jz loc_105EE11  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax [ebp+var_4] +
leave   +
retn 10h  +
***
push ebx  +
push esi  +
mov eax [esp+18h] +
or eax eax +
jnz loc_105EEB2  +
mov ecx [esp+14h] +
mov eax [esp+10h] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+0Ch] +
div  ecx +
mov edx ebx +
jmp loc_105EEF3  +
mov ecx eax +
mov ebx [esp+14h] +
mov edx [esp+10h] +
mov eax [esp+0Ch] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_105EEC0  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+18h] +
mov ecx eax +
mov eax [esp+14h] +
mul  esi +
add edx ecx +
jb loc_105EEEE  +
cmp edx [esp+10h] +
ja loc_105EEEE  +
jb loc_105EEEF  +
cmp eax [esp+0Ch] +
jbe loc_105EEEF  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_105EF1F  +
push 3  +
pop eax  +
jmp loc_105EF9E  +
push edi  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi 94h +
push edi  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] edi +
call ds:GetVersionExA  +
mov eax [ebp+VersionInformation.dwPlatformId] +
push 4  +
pop edi  +
mov [esi] eax +
push edi  +
lea eax [esi+4] +
push eax  +
call sub_1049BE8  +
test eax eax +
jz loc_105EF9A  +
push edi  +
lea eax [esi+8] +
push eax  +
call sub_1049BE8  +
test eax eax +
jz loc_105EF9A  +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call sub_1049BE8  +
test eax eax +
jz loc_105EF9A  +
push edi  +
add esi 10h +
push esi  +
call sub_1049BE8  +
test eax eax +
jz loc_105EF9A  +
xor eax eax +
jmp loc_105EF9D  +
push 25h  +
pop eax  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+lpData] +
mov [ebp+hKey] ebx +
mov [ebp+dwDisposition] ebx +
mov [ebp+Type] ebx +
mov [ebp+cbData] 14h +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
cmp edi ebx +
jnz loc_105EFE3  +
push 3  +
pop eax  +
jmp loc_105F0D7  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
push esi  +
stos   +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
mov edi offset aSoftwareMicr_3 +
push edi  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExA  +
cmp eax ebx +
jz loc_105F02A  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push offset Class  +
push ebx  +
push edi  +
push esi  +
call ds:RegCreateKeyExA  +
jmp loc_105F038  +
mov [ebp+var_14] 1 +
mov [ebp+dwDisposition] 2 +
cmp eax ebx +
jnz loc_105F090  +
cmp [ebp+dwDisposition] 2 +
jnz loc_105F05C  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aClienthwid  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
cmp [ebp+dwDisposition] 1 +
jz loc_105F06C  +
cmp eax ebx +
jnz loc_105F06C  +
cmp [ebp+cbData] 14h +
jz loc_105F0C5  +
cmp [ebp+var_14] ebx +
jz loc_105F095  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
push ebx  +
push edi  +
push esi  +
call ds:RegOpenKeyExA  +
test eax eax +
jz loc_105F095  +
push 13h  +
pop eax  +
jmp loc_105F0D6  +
push [ebp+lpData]  +
call sub_105EEFD  +
mov [ebp+var_C] eax +
cmp eax ebx +
jnz loc_105F0C5  +
push 14h  +
push [ebp+lpData]  +
push 3  +
push ebx  +
push offset aClienthwid  +
push [ebp+hKey]  +
call ds:RegSetValueExA  +
test eax eax +
jz loc_105F0C5  +
mov [ebp+var_C] 15h +
cmp [ebp+hKey] ebx +
jz loc_105F0D3  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+var_C] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax [ecx] +
rol eax 8 +
mov [ecx+400h] eax +
rol eax 8 +
mov [ecx+800h] eax +
rol eax 8 +
mov [ecx+0C00h] eax +
add ecx 4 +
cmp ecx edx +
jb loc_105F100  +
retn   +
***
sub esp 18h +
mov [esp+10h] ebp +
mov [esp+8] edi +
mov [esp+0Ch] esi +
mov [esp+14h] ebx +
mov esi [ecx+1D0h] +
add esi ecx +
mov [esp+4] esi +
test byte_10670A8 0FFh +
jnz loc_105F373  +
mov eax [edx] +
mov ebx [edx+4] +
mov ebp [edx+0Ch] +
mov edx [edx+8] +
xor eax [ecx] +
xor ebx [ecx+4] +
xor edx [ecx+8] +
xor ebp [ecx+0Ch] +
lea ecx [ecx+10h] +
mov [esp] ecx +
lea esp [esp+0] +
nop   +
push ebp  +
movzx ecx al +
mov ecx ds:dword_1011400[ecx*4] +
movzx esi ah +
shr eax 10h +
mov ebp ds:dword_1011800[esi*4] +
movzx edi ah +
mov edi ds:dword_1012000[edi*4] +
movzx eax al +
mov eax ds:dword_1011C00[eax*4] +
movzx esi bl +
xor edi ds:dword_1011400[esi*4] +
movzx esi bh +
shr ebx 10h +
xor ecx ds:dword_1011800[esi*4] +
movzx esi bl +
xor ebp ds:dword_1011C00[esi*4] +
movzx ebx bh +
xor eax ds:dword_1012000[ebx*4] +
pop ebx  +
movzx esi dl +
xor eax ds:dword_1011400[esi*4] +
movzx esi dh +
xor edi ds:dword_1011800[esi*4] +
shr edx 10h +
movzx esi dl +
xor ecx ds:dword_1011C00[esi*4] +
movzx edx dh +
xor ebp ds:dword_1012000[edx*4] +
mov esi [esp] +
movzx edx bl +
xor ebp ds:dword_1011400[edx*4] +
movzx edx bh +
xor eax ds:dword_1011800[edx*4] +
shr ebx 10h +
movzx edx bl +
xor edi ds:dword_1011C00[edx*4] +
movzx ebx bh +
xor ecx ds:dword_1012000[ebx*4] +
mov edx [esi+8] +
xor edx eax +
mov eax [esi] +
xor eax ecx +
xor ebp [esi+0Ch] +
mov ebx [esi+4] +
xor ebx edi +
add esi 10h +
cmp esi [esp+4] +
mov [esp] esi +
jb loc_105F180  +
push ebp  +
movzx ecx al +
movzx ecx ds:byte_1011000[ecx] +
movzx esi ah +
shr eax 10h +
movzx ebp ds:byte_1011000[esi] +
movzx edi ah +
shl ebp 8 +
movzx edi ds:byte_1011000[edi] +
movzx eax al +
shl edi 18h +
movzx eax ds:byte_1011000[eax] +
shl eax 10h +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
or edi esi +
movzx esi bh +
shr ebx 10h +
movzx esi ds:byte_1011000[esi] +
shl esi 8 +
or ecx esi +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
movzx ebx bh +
shl esi 10h +
movzx ebx ds:byte_1011000[ebx] +
or ebp esi +
shl ebx 18h +
or eax ebx +
movzx esi dl +
movzx esi ds:byte_1011000[esi] +
movzx ebx dh +
shr edx 10h +
movzx ebx ds:byte_1011000[ebx] +
or eax esi +
shl ebx 8 +
movzx esi dl +
movzx esi ds:byte_1011000[esi] +
or edi ebx +
pop ebx  +
movzx edx dh +
movzx edx ds:byte_1011000[edx] +
shl esi 10h +
or ecx esi +
shl edx 18h +
or ebp edx +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
movzx edx bh +
shr ebx 10h +
movzx edx ds:byte_1011000[edx] +
or ebp esi +
shl edx 8 +
or eax edx +
mov edx [esp] +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
movzx ebx bh +
movzx ebx ds:byte_1011000[ebx] +
shl esi 10h +
shl ebx 18h +
or edi esi +
or ecx ebx +
xor ecx [edx] +
xor edi [edx+4] +
xor eax [edx+8] +
xor ebp [edx+0Ch] +
mov ebx [esp+1Ch] +
mov [ebx] ecx +
mov [ebx+4] edi +
mov [ebx+8] eax +
mov [ebx+0Ch] ebp +
mov [esp-4] ebx +
mov ebp [esp+10h] +
mov edi [esp+8] +
mov esi [esp+0Ch] +
mov ebx [esp+14h] +
add esp 18h +
retn 4  +
***
movups xmm0 oword ptr [edx] +
movups xmm1 oword ptr [ecx] +
pxor xmm0 xmm1 +
add ecx 10h +
movups xmm1 oword ptr [ecx] +
add al 0F6h +
add eax offset byte_10670A8 +
dec dword ptr [edi]  +
test [ecx] edx +
add al [eax] +
add [ebx+45A8B02h] cl +
mov ebp [edx+0Ch] +
mov edx [edx+8] +
xor eax [ecx] +
xor ebx [ecx+4] +
xor edx [ecx+8] +
xor ebp [ecx+0Ch] +
lea ecx [ecx+10h] +
mov [esp] ecx +
mov edi edi +
push ebp  +
movzx ecx al +
mov ecx ds:(dword_101214C+2B4h)[ecx*4] +
movzx esi ah +
shr eax 10h +
mov edi ds:(dword_1012590+270h)[esi*4] +
movzx ebp ah +
mov ebp ds:(dword_1012D90+270h)[ebp*4] +
movzx eax al +
mov eax ds:(dword_1012990+270h)[eax*4] +
movzx esi bl +
xor edi ds:(dword_101214C+2B4h)[esi*4] +
movzx esi bh +
shr ebx 10h +
xor eax ds:(dword_1012590+270h)[esi*4] +
movzx esi bl +
xor ebp ds:(dword_1012990+270h)[esi*4] +
movzx ebx bh +
xor ecx ds:(dword_1012D90+270h)[ebx*4] +
pop ebx  +
movzx esi dl +
xor eax ds:(dword_101214C+2B4h)[esi*4] +
movzx esi dh +
xor ebp ds:(dword_1012590+270h)[esi*4] +
shr edx 10h +
movzx esi dl +
xor ecx ds:(dword_1012990+270h)[esi*4] +
movzx edx dh +
xor edi ds:(dword_1012D90+270h)[edx*4] +
mov esi [esp] +
movzx edx bl +
xor ebp ds:(dword_101214C+2B4h)[edx*4] +
movzx edx bh +
xor ecx ds:(dword_1012590+270h)[edx*4] +
shr ebx 10h +
movzx edx bl +
xor edi ds:(dword_1012990+270h)[edx*4] +
movzx ebx bh +
xor eax ds:(dword_1012D90+270h)[ebx*4] +
mov edx [esi+8] +
xor edx eax +
mov eax [esi] +
xor eax ecx +
xor ebp [esi+0Ch] +
mov ebx [esi+4] +
xor ebx edi +
add esi 10h +
cmp esi [esp+4] +
mov [esp] esi +
jb loc_105F3F0  +
push ebp  +
movzx ecx al +
movzx ecx byte ptr ds:(dword_1011004+0FCh)[ecx] +
movzx edi ah +
shr eax 10h +
movzx edi byte ptr ds:(dword_1011004+0FCh)[edi] +
movzx esi ah +
shl edi 8 +
movzx ebp byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx eax al +
shl ebp 18h +
movzx eax byte ptr ds:(dword_1011004+0FCh)[eax] +
shl eax 10h +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
or edi esi +
movzx esi bh +
shr ebx 10h +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
shl esi 8 +
or eax esi +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx ebx bh +
shl esi 10h +
movzx ebx byte ptr ds:(dword_1011004+0FCh)[ebx] +
or ebp esi +
shl ebx 18h +
or ecx ebx +
movzx esi dl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx ebx dh +
shr edx 10h +
movzx ebx byte ptr ds:(dword_1011004+0FCh)[ebx] +
or eax esi +
shl ebx 8 +
movzx esi dl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
or ebp ebx +
pop ebx  +
movzx edx dh +
movzx edx byte ptr ds:(dword_1011004+0FCh)[edx] +
shl esi 10h +
or ecx esi +
shl edx 18h +
or edi edx +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx edx bh +
shr ebx 10h +
movzx edx byte ptr ds:(dword_1011004+0FCh)[edx] +
or ebp esi +
shl edx 8 +
or ecx edx +
mov edx [esp] +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx ebx bh +
movzx ebx byte ptr ds:(dword_1011004+0FCh)[ebx] +
shl esi 10h +
shl ebx 18h +
or edi esi +
or eax ebx +
xor ecx [edx] +
xor edi [edx+4] +
xor eax [edx+8] +
xor ebp [edx+0Ch] +
mov ebx [esp+1Ch] +
mov [ebx] ecx +
mov [ebx+4] edi +
mov [ebx+8] eax +
mov [ebx+0Ch] ebp +
mov [esp-4] ebx +
mov ebp [esp+10h] +
mov edi [esp+8] +
mov esi [esp+0Ch] +
mov ebx [esp+14h] +
add esp 18h +
retn 4  +
***
jnz loc_105F8A4  +
mov ecx [edx] +
mov edi [edx+4] +
mov eax [edx+8] +
mov ebp [edx+0Ch] +
lea esp [esp+0] +
lea esp [esp+0] +
mov edx [ebx+8] +
xor ebp [ebx+0Ch] +
xor edx eax +
mov eax [ebx] +
mov ebx [ebx+4] +
xor eax ecx +
mov ecx [esp+8] +
xor ebx edi +
xor eax [ecx] +
xor ebx [ecx+4] +
xor edx [ecx+8] +
xor ebp [ecx+0Ch] +
lea ecx [ecx+10h] +
mov [esp] ecx +
lea esp [esp+0] +
lea ecx [ecx+0] +
push ebp  +
movzx ecx al +
mov ecx ds:dword_1011400[ecx*4] +
movzx esi ah +
shr eax 10h +
mov ebp ds:dword_1011800[esi*4] +
movzx edi ah +
mov edi ds:dword_1012000[edi*4] +
movzx eax al +
mov eax ds:dword_1011C00[eax*4] +
movzx esi bl +
xor edi ds:dword_1011400[esi*4] +
movzx esi bh +
shr ebx 10h +
xor ecx ds:dword_1011800[esi*4] +
movzx esi bl +
xor ebp ds:dword_1011C00[esi*4] +
movzx ebx bh +
xor eax ds:dword_1012000[ebx*4] +
pop ebx  +
movzx esi dl +
xor eax ds:dword_1011400[esi*4] +
movzx esi dh +
xor edi ds:dword_1011800[esi*4] +
shr edx 10h +
movzx esi dl +
xor ecx ds:dword_1011C00[esi*4] +
movzx edx dh +
xor ebp ds:dword_1012000[edx*4] +
mov esi [esp] +
movzx edx bl +
xor ebp ds:dword_1011400[edx*4] +
movzx edx bh +
xor eax ds:dword_1011800[edx*4] +
shr ebx 10h +
movzx edx bl +
xor edi ds:dword_1011C00[edx*4] +
movzx ebx bh +
xor ecx ds:dword_1012000[ebx*4] +
mov edx [esi+8] +
xor edx eax +
mov eax [esi] +
xor eax ecx +
xor ebp [esi+0Ch] +
mov ebx [esi+4] +
xor ebx edi +
add esi 10h +
cmp esi [esp+4] +
mov [esp] esi +
jb loc_105F6A0  +
push ebp  +
movzx ecx al +
movzx ecx ds:byte_1011000[ecx] +
movzx esi ah +
shr eax 10h +
movzx ebp ds:byte_1011000[esi] +
movzx edi ah +
shl ebp 8 +
movzx edi ds:byte_1011000[edi] +
movzx eax al +
shl edi 18h +
movzx eax ds:byte_1011000[eax] +
shl eax 10h +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
or edi esi +
movzx esi bh +
shr ebx 10h +
movzx esi ds:byte_1011000[esi] +
shl esi 8 +
or ecx esi +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
movzx ebx bh +
shl esi 10h +
movzx ebx ds:byte_1011000[ebx] +
or ebp esi +
shl ebx 18h +
or eax ebx +
movzx esi dl +
movzx esi ds:byte_1011000[esi] +
movzx ebx dh +
shr edx 10h +
movzx ebx ds:byte_1011000[ebx] +
or eax esi +
shl ebx 8 +
movzx esi dl +
movzx esi ds:byte_1011000[esi] +
or edi ebx +
pop ebx  +
movzx edx dh +
movzx edx ds:byte_1011000[edx] +
shl esi 10h +
or ecx esi +
shl edx 18h +
or ebp edx +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
movzx edx bh +
shr ebx 10h +
movzx edx ds:byte_1011000[edx] +
or ebp esi +
shl edx 8 +
or eax edx +
mov edx [esp] +
movzx esi bl +
movzx esi ds:byte_1011000[esi] +
movzx ebx bh +
movzx ebx ds:byte_1011000[ebx] +
shl esi 10h +
shl ebx 18h +
or edi esi +
or ecx ebx +
xor ecx [edx] +
xor edi [edx+4] +
xor eax [edx+8] +
xor ebp [edx+0Ch] +
mov ebx [esp+20h] +
mov [ebx] ecx +
mov [ebx+4] edi +
mov [ebx+8] eax +
mov [ebx+0Ch] ebp +
add ebx 10h +
cmp ebx [esp+24h] +
mov [esp+20h] ebx +
jb loc_105F670  +
mov [esp-4] ebx +
mov ebp [esp+14h] +
mov edi [esp+0Ch] +
mov esi [esp+10h] +
mov ebx [esp+18h] +
add esp 1Ch +
retn 8  +
***
movups xmm0 oword ptr [edx] +
mov edi ecx +
movups xmm1 oword ptr [ebx] +
pxor xmm0 xmm1 +
mov ecx edi +
movups xmm1 oword ptr [ecx] +
pxor xmm0 xmm1 +
add ecx 10h +
movups xmm1 oword ptr [ecx] +
test byte_10670A8 0FFh +
jnz loc_105FBA4  +
mov ebx [eax+4] +
mov edx [eax+8] +
mov ebp [eax+0Ch] +
mov eax [eax] +
lea esp [esp+0] +
xor eax [ecx] +
xor ebx [ecx+4] +
xor edx [ecx+8] +
xor ebp [ecx+0Ch] +
lea ecx [ecx+10h] +
mov [esp] ecx +
lea esp [esp+0] +
lea esp [esp+0] +
nop   +
push ebp  +
movzx ecx al +
mov ecx ds:(dword_101214C+2B4h)[ecx*4] +
movzx esi ah +
shr eax 10h +
mov edi ds:(dword_1012590+270h)[esi*4] +
movzx ebp ah +
mov ebp ds:(dword_1012D90+270h)[ebp*4] +
movzx eax al +
mov eax ds:(dword_1012990+270h)[eax*4] +
movzx esi bl +
xor edi ds:(dword_101214C+2B4h)[esi*4] +
movzx esi bh +
shr ebx 10h +
xor eax ds:(dword_1012590+270h)[esi*4] +
movzx esi bl +
xor ebp ds:(dword_1012990+270h)[esi*4] +
movzx ebx bh +
xor ecx ds:(dword_1012D90+270h)[ebx*4] +
pop ebx  +
movzx esi dl +
xor eax ds:(dword_101214C+2B4h)[esi*4] +
movzx esi dh +
xor ebp ds:(dword_1012590+270h)[esi*4] +
shr edx 10h +
movzx esi dl +
xor ecx ds:(dword_1012990+270h)[esi*4] +
movzx edx dh +
xor edi ds:(dword_1012D90+270h)[edx*4] +
mov esi [esp] +
movzx edx bl +
xor ebp ds:(dword_101214C+2B4h)[edx*4] +
movzx edx bh +
xor ecx ds:(dword_1012590+270h)[edx*4] +
shr ebx 10h +
movzx edx bl +
xor edi ds:(dword_1012990+270h)[edx*4] +
movzx ebx bh +
xor eax ds:(dword_1012D90+270h)[ebx*4] +
mov edx [esi+8] +
xor edx eax +
mov eax [esi] +
xor eax ecx +
xor ebp [esi+0Ch] +
mov ebx [esi+4] +
xor ebx edi +
add esi 10h +
cmp esi [esp+4] +
mov [esp] esi +
jb loc_105F960  +
push ebp  +
movzx ecx al +
movzx ecx byte ptr ds:(dword_1011004+0FCh)[ecx] +
movzx edi ah +
shr eax 10h +
movzx edi byte ptr ds:(dword_1011004+0FCh)[edi] +
movzx esi ah +
shl edi 8 +
movzx ebp byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx eax al +
shl ebp 18h +
movzx eax byte ptr ds:(dword_1011004+0FCh)[eax] +
shl eax 10h +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
or edi esi +
movzx esi bh +
shr ebx 10h +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
shl esi 8 +
or eax esi +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx ebx bh +
shl esi 10h +
movzx ebx byte ptr ds:(dword_1011004+0FCh)[ebx] +
or ebp esi +
shl ebx 18h +
or ecx ebx +
movzx esi dl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx ebx dh +
shr edx 10h +
movzx ebx byte ptr ds:(dword_1011004+0FCh)[ebx] +
or eax esi +
shl ebx 8 +
movzx esi dl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
or ebp ebx +
pop ebx  +
movzx edx dh +
movzx edx byte ptr ds:(dword_1011004+0FCh)[edx] +
shl esi 10h +
or ecx esi +
shl edx 18h +
or edi edx +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx edx bh +
shr ebx 10h +
movzx edx byte ptr ds:(dword_1011004+0FCh)[edx] +
or ebp esi +
shl edx 8 +
or ecx edx +
mov edx [esp] +
movzx esi bl +
movzx esi byte ptr ds:(dword_1011004+0FCh)[esi] +
movzx ebx bh +
movzx ebx byte ptr ds:(dword_1011004+0FCh)[ebx] +
shl esi 10h +
shl ebx 18h +
or edi esi +
or eax ebx +
xor ecx [edx] +
xor edi [edx+4] +
xor eax [edx+8] +
xor ebp [edx+0Ch] +
mov esi [esp+28h] +
cmp esi [esp+24h] +
jbe loc_105FB70  +
sub esi 10h +
mov [esp+28h] esi +
mov edx [esi+8] +
xor eax edx +
mov [esi+18h] eax +
mov eax [esi] +
xor ecx eax +
mov [esi+10h] ecx +
mov ebx [esi+4] +
xor edi ebx +
mov [esi+14h] edi +
mov edi ebp +
mov ebp [esi+0Ch] +
xor edi ebp +
mov [esi+1Ch] edi +
mov ecx [esp+8] +
jmp loc_105F940  +
***
mov ebx [esp+0Ch] +
xor ecx [ebx] +
mov [esi] ecx +
xor edi [ebx+4] +
mov [esi+4] edi +
xor eax [ebx+8] +
mov [esi+8] eax +
xor ebp [ebx+0Ch] +
mov [esi+0Ch] ebp +
mov [esp-4] esi +
mov ebp [esp+18h] +
mov edi [esp+10h] +
mov esi [esp+14h] +
mov ebx [esp+1Ch] +
add esp 20h +
retn 8  +
***
mov ebx [esp+24h] +
mov edi ecx +
movups xmm0 oword ptr [eax] +
movups xmm1 oword ptr [ecx] +
pxor xmm0 xmm1 +
add ecx 10h +
movups xmm1 oword ptr [ecx] +
add bl ch +
wait   +
mov eax [ecx] +
movd xmm0 eax +
movsldup xmm0 xmm0 +
add al bl +
movups xmm0 oword ptr [ecx] +
fcmovnb st st +
movups oword ptr [edx] xmm0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
xor eax eax +
xor ecx ecx +
push ebx  +
cpuid   +
push esi  +
lea esi [ebp+var_14] +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
cmp [ebp+var_10] 68747541h +
mov [ebp+var_4] 0 +
jnz loc_105FC9B  +
cmp [ebp+var_C] 444D4163h +
jnz loc_105FC9B  +
cmp [ebp+var_8] 69746E65h +
jnz loc_105FC9B  +
xor ecx ecx +
mov eax 1 +
cpuid   +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov ecx [ebp+var_14] +
mov eax ecx +
sar eax 8 +
and eax 0Fh +
cmp eax 0Fh +
jb loc_105FC91  +
sar ecx 14h +
and ecx 0FFh +
add ecx eax +
mov eax ecx +
cmp eax 15h +
mov eax 1 +
jb loc_105FC9E  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp dword_10670AC 0 +
jnz loc_105FCFF  +
push ebx  +
xor ecx ecx +
mov eax 1 +
cpuid   +
push esi  +
lea esi [ebp+var_10] +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
test [ebp+var_8] 2000000h +
pop esi  +
pop ebx  +
jz loc_105FCF5  +
call sub_105FC20  +
test eax eax +
jnz loc_105FCF5  +
mov byte_10670A8 1 +
mov dword_10670AC 1 +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp+var_C] edx +
mov [ebp+var_8] esi +
call sub_105FCB0  +
mov eax [ebp+arg_0] +
push eax  +
mov edi eax +
mov eax [ebp+var_C] +
push eax  +
sar edi 2 +
push esi  +
lea ebx [edi+6] +
call memcpy  +
mov ecx [ebp+arg_0] +
and edi 2 +
mov eax ebx +
add edi 3 +
add esi ecx +
mov ecx [ebp+var_8] +
shl eax 4 +
shl ebx 5 +
mov [ebp+var_C] edi +
lea edi [eax+ecx+10h] +
add esp 0Ch +
mov [ecx+1D4h] ebx +
mov [ebp+var_10] edi +
mov [ecx+1D0h] eax +
mov bl 1 +
cmp esi edi +
jnb loc_105FEB4  +
jmp loc_105FD90  +
cmp byte_10670A8 0 +
lea edi [esi-4] +
jz loc_105FDAB  +
lea edx [ebp+var_4] +
mov ecx edi +
call loc_105FBF3  +
mov al byte ptr [ebp+var_4+1] +
jmp loc_105FDE1  +
movzx edx byte ptr [edi] +
movzx eax ds:byte_1011000[edx] +
movzx ecx byte ptr [edi+1] +
movzx edx byte ptr [edi+2] +
mov byte ptr [ebp+var_4] al +
mov al ds:byte_1011000[ecx] +
movzx ecx ds:byte_1011000[edx] +
movzx edx byte ptr [edi+3] +
mov byte ptr [ebp+var_4+2] cl +
movzx ecx ds:byte_1011000[edx] +
mov byte ptr [ebp+var_4+1] al +
mov byte ptr [ebp+var_4+3] cl +
mov dl byte ptr [ebp+var_4+2] +
mov cl byte ptr [ebp+var_4] +
mov edi [ebp+arg_0] +
xor al bl +
mov [esi+1] dl +
mov [esi+3] cl +
mov [esi] al +
mov al byte ptr [ebp+var_4+3] +
mov edx esi +
sub edx edi +
mov [esi+2] al +
mov eax [edx] +
xor [esi] eax +
mov cl bl +
and cl 80h +
add esi 4 +
neg cl  +
sbb cl cl +
and cl 1Bh +
add bl bl +
xor bl cl +
mov ecx [ebp+var_C] +
test ecx ecx +
jle loc_105FE35  +
mov eax 4 +
sub eax edi +
mov edx [eax+esi-4] +
xor edx [esi-4] +
add esi 4 +
sub ecx 1 +
mov [esi-4] edx +
jnz loc_105FE23  +
cmp edi 20h +
jnz loc_105FEA6  +
cmp byte_10670A8 0 +
lea ecx [esi-4] +
jz loc_105FE4F  +
mov edx esi +
call loc_105FBF3  +
jmp loc_105FE84  +
movzx eax byte ptr [ecx] +
movzx edx ds:byte_1011000[eax] +
mov [esi] dl +
movzx eax byte ptr [ecx+1] +
movzx edx ds:byte_1011000[eax] +
mov [esi+1] dl +
movzx eax byte ptr [ecx+2] +
movzx edx ds:byte_1011000[eax] +
mov [esi+2] dl +
movzx eax byte ptr [ecx+3] +
mov cl ds:byte_1011000[eax] +
mov [esi+3] cl +
mov edx [esi-20h] +
xor [esi] edx +
mov eax [esi-1Ch] +
xor eax [esi] +
add esi 4 +
mov [esi] eax +
mov ecx [esi-1Ch] +
xor ecx eax +
mov [esi+4] ecx +
mov eax [esi-18h] +
xor eax ecx +
mov [esi+8] eax +
add esi 0Ch +
mov edi [ebp+var_10] +
cmp esi edi +
jb loc_105FD90  +
mov ecx [ebp+var_8] +
lea ebx [ecx+20h] +
mov esi edi +
cmp edi ebx +
jbe loc_105FFA6  +
sub esi 20h +
cmp byte_10670A8 0 +
jz loc_105FEDB  +
mov edx edi +
mov ecx esi +
call loc_105FC0A  +
jmp loc_105FF95  +
movzx ecx byte ptr [esi+3] +
mov eax ds:dword_1014000[ecx*4] +
movzx edx byte ptr [esi+2] +
xor eax ds:dword_1013C00[edx*4] +
movzx ecx byte ptr [esi+1] +
xor eax ds:dword_1013800[ecx*4] +
movzx edx byte ptr [esi] +
xor eax ds:dword_1013400[edx*4] +
mov [edi] eax +
movzx eax byte ptr [esi+7] +
mov edx ds:dword_1014000[eax*4] +
movzx ecx byte ptr [esi+6] +
xor edx ds:dword_1013C00[ecx*4] +
movzx eax byte ptr [esi+5] +
xor edx ds:dword_1013800[eax*4] +
movzx ecx byte ptr [esi+4] +
xor edx ds:dword_1013400[ecx*4] +
mov [edi+4] edx +
movzx edx byte ptr [esi+0Bh] +
movzx eax byte ptr [esi+0Ah] +
mov ecx ds:dword_1014000[edx*4] +
xor ecx ds:dword_1013C00[eax*4] +
movzx edx byte ptr [esi+9] +
xor ecx ds:dword_1013800[edx*4] +
movzx eax byte ptr [esi+8] +
xor ecx ds:dword_1013400[eax*4] +
mov [edi+8] ecx +
movzx ecx byte ptr [esi+0Fh] +
movzx edx byte ptr [esi+0Eh] +
mov eax ds:dword_1014000[ecx*4] +
xor eax ds:dword_1013C00[edx*4] +
movzx ecx byte ptr [esi+0Dh] +
movzx edx byte ptr [esi+0Ch] +
xor eax ds:dword_1013800[ecx*4] +
xor eax ds:dword_1013400[edx*4] +
mov [edi+0Ch] eax +
add esi 10h +
add edi 10h +
cmp esi ebx +
ja loc_105FEC1  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
mov [edi] eax +
mov edx [ecx+4] +
mov [edi+4] edx +
mov eax [ecx+8] +
mov [edi+8] eax +
mov ecx [ecx+0Ch] +
mov [edi+0Ch] ecx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov eax [esp+4] +
push ebx  +
mov ecx [esp+0Ch] +
push esi  +
push edi  +
mov edx [eax+4] +
push ebp  +
mov esi [eax+8] +
mov edi [eax+0Ch] +
mov ebp [ecx] +
mov ebx edi +
xor ebx esi +
and ebx edx +
xor ebx edi +
add ebx ebp +
mov ebp [eax] +
lea ebx [ebp+ebx-28955B88h] +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+4] +
xor eax esi +
add edi ebp +
add eax 0E8C7B756h +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+8] +
xor eax edx +
add esi ebp +
add eax 242070DBh +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+0Ch] +
xor eax ebx +
add edx ebp +
add eax 0C1BDCEEEh +
add edx eax +
rol edx 16h +
mov eax edi +
add edx esi +
xor eax esi +
and eax edx +
mov ebp [ecx+10h] +
xor eax edi +
add ebx ebp +
add eax 0F57C0FAFh +
add ebx eax +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+14h] +
xor eax esi +
add edi ebp +
add eax 4787C62Ah +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+18h] +
xor eax edx +
add esi ebp +
add eax 0A8304613h +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+1Ch] +
xor eax ebx +
add edx ebp +
add eax 0FD469501h +
add edx eax +
rol edx 16h +
mov eax edi +
add edx esi +
xor eax esi +
and eax edx +
mov ebp [ecx+20h] +
xor eax edi +
add ebx ebp +
add eax 698098D8h +
add ebx eax +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+24h] +
xor eax esi +
add edi ebp +
add eax 8B44F7AFh +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+28h] +
xor eax edx +
add esi ebp +
add eax 0FFFF5BB1h +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+2Ch] +
xor eax ebx +
add edx ebp +
add eax 895CD7BEh +
add edx eax +
rol edx 16h +
mov eax edi +
add edx esi +
xor eax esi +
and eax edx +
mov ebp [ecx+30h] +
xor eax edi +
add ebx ebp +
add eax 6B901122h +
add ebx eax +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+34h] +
xor eax esi +
add edi ebp +
add eax 0FD987193h +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+38h] +
xor eax edx +
add esi ebp +
add eax 0A679438Eh +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+3Ch] +
xor eax ebx +
add edx ebp +
add eax 49B40821h +
add edx eax +
rol edx 16h +
mov eax esi +
add edx esi +
mov ebp [ecx+4] +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 0F61E2562h +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+18h] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 0C040B340h +
add edi eax +
mov ebp [ecx+2Ch] +
rol edi 9 +
add edi ebx +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 265E5A51h +
add esi eax +
mov eax edi +
rol esi 0Eh +
mov ebp [ecx] +
add esi edi +
xor eax esi +
and eax ebx +
xor eax edi +
add edx ebp +
add eax 0E9B6C7AAh +
add edx eax +
mov eax esi +
rol edx 14h +
mov ebp [ecx+14h] +
add edx esi +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 0D62F105Dh +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+28h] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 2441453h +
add edi eax +
rol edi 9 +
add edi ebx +
mov ebp [ecx+3Ch] +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 0D8A1E681h +
add esi eax +
mov eax edi +
rol esi 0Eh +
mov ebp [ecx+10h] +
add esi edi +
xor eax esi +
and eax ebx +
xor eax edi +
add edx ebp +
add eax 0E7D3FBC8h +
add edx eax +
mov eax esi +
rol edx 14h +
mov ebp [ecx+24h] +
add edx esi +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 21E1CDE6h +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+38h] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 0C33707D6h +
add edi eax +
mov ebp [ecx+0Ch] +
rol edi 9 +
add edi ebx +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 0F4D50D87h +
add esi eax +
mov eax edi +
rol esi 0Eh +
mov ebp [ecx+20h] +
add esi edi +
xor eax esi +
and eax ebx +
xor eax edi +
add edx ebp +
add eax 455A14EDh +
add edx eax +
rol edx 14h +
add edx esi +
mov eax esi +
mov ebp [ecx+34h] +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 0A9E3E905h +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+8] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 0FCEFA3F8h +
add edi eax +
mov ebp [ecx+1Ch] +
rol edi 9 +
add edi ebx +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 676F02D9h +
add esi eax +
mov eax edi +
rol esi 0Eh +
add esi edi +
xor eax esi +
mov ebp eax +
and ebp ebx +
xor ebp edi +
mov eax [ecx+30h] +
add edx ebp +
add eax 8D2A4C8Ah +
add edx eax +
rol edx 14h +
mov eax edi +
add edx esi +
xor eax esi +
mov ebp [ecx+14h] +
xor eax edx +
add ebx ebp +
add eax 0FFFA3942h +
add ebx eax +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx+20h] +
xor eax ebx +
add edi ebp +
add eax 8771F681h +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+2Ch] +
add esi ebp +
add edi ebx +
mov eax edi +
add esi 6D9D6122h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
xor eax esi +
mov ebp [ecx+38h] +
add edx ebp +
mov ebp ebx +
xor ebp eax +
add edx 0FDE5380Ch +
add edx ebp +
rol edx 17h +
mov ebp [ecx+4] +
add ebx ebp +
add edx esi +
mov ebp edx +
add ebx 0A4BEEA44h +
xor ebp eax +
add ebx ebp +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx+10h] +
xor eax ebx +
add edi ebp +
add eax 4BDECFA9h +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+1Ch] +
add esi ebp +
add edi ebx +
mov eax edi +
add esi 0F6BB4B60h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
mov ebp [ecx+28h] +
add edx ebp +
mov ebp ebx +
xor eax esi +
add edx 0BEBFBC70h +
xor ebp eax +
add edx ebp +
rol edx 17h +
mov ebp [ecx+34h] +
add ebx ebp +
add edx esi +
mov ebp edx +
add ebx 289B7EC6h +
xor ebp eax +
add ebx ebp +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx] +
xor eax ebx +
add edi ebp +
add eax 0EAA127FAh +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+0Ch] +
add esi ebp +
add edi ebx +
mov eax edi +
add esi 0D4EF3085h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
mov ebp [ecx+18h] +
add edx ebp +
mov ebp ebx +
xor eax esi +
add edx 4881D05h +
xor ebp eax +
add edx ebp +
rol edx 17h +
add edx esi +
mov ebp edx +
xor ebp eax +
mov eax [ecx+24h] +
add ebx ebp +
add eax 0D9D4D039h +
add ebx eax +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx+30h] +
xor eax ebx +
add eax 0E6DB99E5h +
add edi ebp +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+3Ch] +
add edi ebx +
add esi ebp +
mov eax edi +
add esi 1FA27CF8h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
mov ebp [ecx+8] +
xor eax esi +
add edx ebp +
xor eax ebx +
add edx 0C4AC5665h +
add edx eax +
rol edx 17h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 0F4292244h +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+1Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 432AFF97h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+38h] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 0AB9423A7h +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+14h] +
or eax esi +
xor eax edi +
add edx ebp +
add edx 0FC93A039h +
add edx eax +
rol edx 15h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx+30h] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 655B59C3h +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+0Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 8F0CCC92h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+28h] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 0FFEFF47Dh +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+4] +
or eax esi +
xor eax edi +
add edx ebp +
add eax 85845DD1h +
add edx eax +
rol edx 15h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx+20h] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 6FA87E4Fh +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+3Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 0FE2CE6E0h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+18h] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 0A3014314h +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+34h] +
or eax esi +
xor eax edi +
add edx ebp +
add eax 4E0811A1h +
add edx eax +
rol edx 15h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx+10h] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 0F7537E82h +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+2Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 0BD3AF235h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+8] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 2AD7D2BBh +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+24h] +
or eax esi +
xor eax edi +
add edx ebp +
add eax 0EB86D391h +
add edx eax +
rol edx 15h +
mov eax [esp+14h] +
add edx esi +
mov ecx [eax] +
add ebx ecx +
mov ecx [eax+4] +
add edx ecx +
mov [eax] ebx +
mov ecx [eax+8] +
mov [eax+4] edx +
add esi ecx +
pop ebp  +
mov ecx [eax+0Ch] +
mov [eax+8] esi +
add edi ecx +
mov [eax+0Ch] edi +
pop edi  +
pop esi  +
pop ebx  +
retn 8  +
***
mov ecx [esp+10h] +
xor eax eax +
test ecx ecx +
jbe locret_1060691  +
push edi  +
mov edi [esp+0Ch] +
push esi  +
mov esi [esp+14h] +
push ebx  +
push ebp  +
mov ebx [esp+14h] +
sub edi esi +
sub ebx esi +
mov edx [esi+edi] +
mov ebp [esi] +
add edx eax +
mov eax 0 +
adc eax eax +
add edx ebp +
adc eax 0 +
mov [esi+ebx] edx +
and eax 1 +
add esi 4 +
dec ecx  +
jnz loc_106066E  +
pop ebp  +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov ecx [esp+10h] +
xor eax eax +
test ecx ecx +
jbe locret_10606D5  +
push edi  +
mov edi [esp+0Ch] +
push esi  +
mov esi [esp+14h] +
push ebx  +
push ebp  +
mov ebx [esp+14h] +
sub edi esi +
sub ebx esi +
mov edx [esi+edi] +
mov ebp [esi] +
sub edx eax +
mov eax 0 +
sbb eax eax +
sub edx ebp +
sbb eax 0 +
mov [esi+ebx] edx +
and eax 1 +
add esi 4 +
dec ecx  +
jnz loc_10606B2  +
pop ebp  +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov eax 0FFFFFFFFh +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+phkResult] +
and dword ptr [ecx] 0 +
cmp [ebp+arg_4] 0 +
mov eax off_1065EC8 +
jnz loc_1060715  +
mov eax lpSubKey +
push ecx  +
push 20019h  +
push 0  +
push eax  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax 2 +
jnz loc_1060730  +
xor eax eax +
test eax eax +
jle loc_106073E  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_C] +
mov ecx [esi] +
mov eax [ebp+hKey] +
push edi  +
mov edi [ebp+lpData] +
lea ecx [ecx+ecx-2] +
mov [ebp+cbData] ecx +
lea ecx [ebp+cbData] +
push ecx  +
push edi  +
lea ecx [ebp+Type] +
push ecx  +
push 0  +
lea ecx [ebp+cbValueName] +
push ecx  +
lea ecx [ebp+ValueName] +
push ecx  +
push [ebp+dwIndex]  +
mov [ebp+cbValueName] 0Bh +
push eax  +
call ds:RegEnumValueW  +
test eax eax +
jnz loc_10607BA  +
cmp [ebp+Type] 1 +
jnz loc_10607A4  +
mov ecx [ebp+cbData] +
shr ecx 1 +
cmp [esi] ecx +
ja loc_10607A9  +
push 0Dh  +
pop eax  +
jmp loc_10607BA  +
xor edx edx +
mov [esi] ecx +
mov [edi+ecx*2] dx +
mov ecx [esi] +
test ecx ecx +
jbe loc_10607BA  +
dec ecx  +
mov [esi] ecx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1060852  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1060852  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1060852  +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_1060852  +
push 2Ah  +
push esi  +
call wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1060845  +
sub eax esi +
sar eax 1 +
mov esi edi +
sub esi eax +
dec esi  +
lea ecx [esi+eax] +
cmp ecx ebx +
ja loc_1060852  +
push eax  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1060852  +
mov eax [ebp+arg_0] +
sub ebx esi +
lea eax [eax+ebx*2] +
push esi  +
push eax  +
mov eax [ebp+arg_8] +
sub edi esi +
lea eax [eax+edi*2] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1060852  +
inc eax  +
jmp loc_1060854  +
push [ebp+arg_0]  +
push esi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
jmp loc_106083E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+Buffer] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push 0  +
call NetGetJoinInformation  +
test eax eax +
jle loc_106088F  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jl loc_10608A1  +
cmp [ebp+arg_0] 3 +
jnz loc_10608A1  +
mov dword ptr [esi] 1 +
cmp [ebp+Buffer] 0 +
jz loc_10608AF  +
push [ebp+Buffer]  +
call NetApiBufferFree  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp+Data] 0 +
push edi  +
mov edi [ebp+Type] +
and dword ptr [edi] 0 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
cmp eax 2 +
jnz loc_10608F8  +
xor eax eax +
jmp loc_1060923  +
test eax eax +
jle loc_1060908  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_1060923  +
cmp [ebp+Type] 4 +
jz loc_1060917  +
mov eax 8007000Dh +
jmp loc_1060923  +
cmp dword ptr [ebp+Data] 0 +
jnz loc_1060923  +
mov dword ptr [edi] 1 +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp+Data] 0 +
push esi  +
mov esi [ebp+Type] +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push [ebp+hKey]  +
mov dword ptr [esi] 1 +
call ds:RegQueryValueExW  +
cmp eax 2 +
jnz loc_106096C  +
xor eax eax +
jmp loc_1060994  +
test eax eax +
jle loc_106097C  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_1060994  +
cmp [ebp+Type] 4 +
jz loc_106098B  +
mov eax 8007000Dh +
jmp loc_1060994  +
cmp dword ptr [ebp+Data] 0 +
jnz loc_1060994  +
and dword ptr [esi] 0 +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 800h  +
call ??2@YAPAXI@Z  +
mov ebx eax +
xor edi edi +
pop ecx  +
cmp ebx edi +
jnz loc_10609C1  +
mov esi 8007000Eh +
jmp loc_1060A16  +
mov esi 400h +
jmp loc_10609E1  +
push [ebp+var_4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10607CF  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
test eax eax +
jnz loc_1060A1F  +
inc edi  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push edi  +
push [ebp+hKey]  +
mov [ebp+var_4] esi +
call sub_1060747  +
test eax eax +
jz loc_10609C8  +
cmp eax 103h +
jnz loc_10609FF  +
xor eax eax +
test eax eax +
jle loc_1060A0D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
xor esi esi +
jmp loc_1060A0F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+lpValueName] +
mov [ebp+hKey] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_238] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_14] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_22C] eax +
mov eax [ebp+arg_18] +
push edi  +
xor edi edi +
mov [ebp+var_21C] eax +
mov eax [ebp+arg_20] +
mov [ebp+lpSubKey] ecx +
mov [ebp+var_210] eax +
mov ebx 80004001h +
mov [ebp+var_224] edi +
mov [ebp+phkResult] edi +
mov [ebp+var_20C] edi +
mov [ebp+var_218] edi +
mov [ebp+Type] edi +
mov [ebp+var_208] edi +
mov [eax] edi +
cmp esi edi +
jz loc_1060B7A  +
cmp ecx edi +
jz loc_1060B7A  +
lea eax [ebp+Type] +
push eax  +
push ecx  +
push esi  +
call sub_10608BC  +
mov ebx eax +
cmp ebx edi +
jl loc_1060CD1  +
cmp [ebp+Type] edi +
jnz loc_1060CCF  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push edi  +
push [ebp+lpSubKey]  +
push esi  +
call ds:RegOpenKeyExW  +
cmp eax 2 +
jz loc_1060B90  +
cmp eax edi +
jle loc_1060B14  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
cmp ebx edi +
jl loc_1060CD1  +
push [ebp+var_210]  +
push [ebp+arg_1C]  +
push [ebp+var_21C]  +
push [ebp+phkResult]  +
call sub_106099E  +
mov ebx eax +
cmp ebx edi +
jl loc_1060CD1  +
mov eax [ebp+var_210] +
cmp [eax] edi +
jnz loc_1060CD1  +
cmp [ebp+var_22C] edi +
jz loc_1060CD1  +
lea eax [ebp+var_208] +
push eax  +
push [ebp+var_22C]  +
push esi  +
call sub_106092D  +
mov ebx eax +
cmp ebx edi +
jge loc_1060B84  +
jmp loc_1060CD1  +
mov [ebp+var_208] 1 +
cmp [ebp+var_208] edi +
jz loc_1060CD1  +
lea eax [ebp+var_218] +
push eax  +
call sub_1060860  +
mov ebx eax +
cmp ebx edi +
jl loc_1060CD1  +
mov eax [ebp+var_234] +
cmp [ebp+var_218] edi +
jnz loc_1060BBA  +
mov eax [ebp+var_238] +
mov [ebp+var_208] eax +
cmp [ebp+hKey] edi +
jz loc_1060C88  +
mov ebx [ebp+lpSubKey] +
cmp ebx edi +
jz loc_1060C88  +
mov eax ebx +
cmp [ebp+var_218] edi +
jz loc_1060C2A  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1060BE7  +
sub eax edx +
sar eax 1 +
mov esi eax +
push esi  +
push ebx  +
mov ebx 100h +
lea eax [ebp+SubKey] +
push ebx  +
push eax  +
call sub_1046114  +
push 6  +
push offset aDomain  +
sub ebx esi +
lea eax [ebp+SubKey] +
push ebx  +
push eax  +
call sub_1046021  +
add esp 20h +
lea eax [ebp+SubKey] +
lea ecx [ebp+var_20C] +
push ecx  +
push 20019h  +
push edi  +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_1060C6F  +
mov esi [ebp+var_210] +
push esi  +
push [ebp+arg_1C]  +
push [ebp+var_21C]  +
push [ebp+var_20C]  +
call sub_106099E  +
mov ebx eax +
cmp ebx edi +
jl loc_1060CD1  +
cmp [esi] edi +
jnz loc_1060CD1  +
jmp loc_1060C8E  +
cmp eax 2 +
jz loc_1060C88  +
cmp eax edi +
jle loc_1060C82  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
cmp ebx edi +
jl loc_1060CD1  +
mov esi [ebp+var_210] +
cmp [ebp+var_208] edi +
jz loc_1060CCF  +
lea eax [ebp+var_224] +
push eax  +
push 400h  +
push [ebp+var_208]  +
call sub_102AAF4  +
mov ebx eax +
cmp ebx edi +
jl loc_1060CD1  +
push [ebp+var_224]  +
push [ebp+var_208]  +
push [ebp+arg_1C]  +
push [ebp+var_21C]  +
call sub_10607CF  +
mov [esi] eax +
xor ebx ebx +
mov esi ds:RegCloseKey +
cmp [ebp+phkResult] edi +
jz loc_1060CE7  +
push [ebp+phkResult]  +
call esi  +
cmp [ebp+var_20C] edi +
jz loc_1060CF7  +
push [ebp+var_20C]  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
cmp eax ebx +
jnz loc_1060D31  +
mov edi 80070057h +
jmp loc_1060DD2  +
push esi  +
mov [eax] ebx +
cmp dword ptr [ebp+arg_0] ebx +
jz loc_1060DBD  +
cmp [ebp+arg_4] ebx +
jz loc_1060DBD  +
lea eax [ebp+var_4] +
push eax  +
mov esi 104h +
push esi  +
push [ebp+arg_4]  +
call sub_102AAF4  +
mov edi eax +
test edi edi +
jl loc_1060DD1  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push dword ptr [ebp+arg_0]  +
call sub_102AAF4  +
mov edi eax +
test edi edi +
jl loc_1060DD1  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
lea esi [eax+ecx+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1060D9B  +
mov edi 8007000Eh +
jmp loc_1060DC6  +
push [ebp+arg_4]  +
push dword ptr [ebp+arg_0]  +
push offset aSS_3  +
push esi  +
push ebx  +
call sub_101BDD4  +
mov edi eax +
add esp 14h +
test edi edi +
jl loc_1060DC6  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
jmp loc_1060DC2  +
mov edi 80070057h +
test edi edi +
jge loc_1060DD1  +
test ebx ebx +
jz loc_1060DD1  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
and [ebp+var_4] 0 +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
lea eax [ebp+var_4] +
push eax  +
push 400h  +
push [ebp+arg_8]  +
call sub_102AAF4  +
test eax eax +
jl loc_1060E72  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push [ebp+var_4]  +
shl esi 5 +
push [ebp+arg_8]  +
push ds:off_1014974[esi]  +
push ds:dword_101496C[esi]  +
push ds:dword_1014968[esi]  +
push ds:off_1014964[esi]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1060A28  +
test eax eax +
jl loc_1060E71  +
cmp dword ptr [edi] 0 +
jnz loc_1060E71  +
push [ebp+arg_10]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push ds:off_1014970[esi]  +
push ds:dword_1014960[esi]  +
push ds:dword_101495C[esi]  +
push ds:off_1014958[esi]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1060A28  +
pop esi  +
pop edi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
xor edi edi +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov [ebp+phkResult] edi +
mov [ebp+var_C] edi +
mov [ebp+var_4] edi +
mov [ebp+var_10] edi +
mov [ebx] edi +
call sub_10606FA  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1060F0A  +
xor esi esi +
inc esi  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
call sub_10606FA  +
mov eax [ebp+arg_4] +
sub eax edi +
jz loc_1060EE5  +
dec eax  +
jz loc_1060EDA  +
dec eax  +
jz loc_1060ECE  +
mov [ebp+arg_8] 80070057h +
jmp loc_1060F0A  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 2  +
jmp loc_1060EEE  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
jmp loc_1060EEE  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+arg_0]  +
push [ebp+var_C]  +
push [ebp+phkResult]  +
call sub_1060DDF  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1060F0A  +
cmp [ebp+var_4] edi +
jz loc_1060F0A  +
mov [ebx] esi +
mov esi ds:RegCloseKey +
cmp [ebp+phkResult] edi +
jz loc_1060F1A  +
push [ebp+phkResult]  +
call esi  +
cmp [ebp+var_C] edi +
jz loc_1060F24  +
push [ebp+var_C]  +
call esi  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1060D0F  +
mov esi eax +
test esi esi +
jl loc_1060F63  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+var_4]  +
call sub_1060E7C  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_1060F72  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1060FD5  +
cmp eax esi +
ja loc_1060FD5  +
jz loc_1060FDA  +
jmp loc_1060FE2  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1060FEB  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_1060FF8  +
test eax eax +
jz loc_1061036  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_1061094  +
cmp [ebp+arg_4] 0 +
jz loc_1061094  +
push [ebp+hModule]  +
call sub_1061019  +
push [ebp+arg_4]  +
mov esi eax +
call sub_1061019  +
test esi esi +
jz loc_106108C  +
test eax eax +
jz loc_106108C  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_1061094  +
cmp [eax] ecx +
jnz loc_1061094  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_1061094  +
inc eax  +
jmp loc_1061096  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_10610B3  +
xor eax eax +
jmp loc_1061121  +
cmp [ebp+arg_4] esi +
jz loc_106110E  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10610AF  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_10610AF  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_10610AF  +
or eax 1 +
jmp loc_1061121  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_10670B0 edi +
jnz loc_1061249  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_1061194  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_10670B0 edi +
pop esi  +
jz loc_106121C  +
dec eax  +
jnz loc_1061249  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_1061209  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_10611FD  +
dec eax  +
jz loc_10611EA  +
dec eax  +
jz loc_10611D0  +
mov dword_10670B0 14h +
jmp loc_1061249  +
cmp [ebp+var_C] 1 +
jb loc_10611E1  +
mov dword_10670B0 10h +
or dword_10670B0 4 +
jmp loc_1061249  +
cmp [ebp+var_C] 2 +
jb loc_10611E1  +
mov dword_10670B0 8 +
jmp loc_10611E1  +
mov dword_10670B0 4 +
jmp loc_1061249  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_106125B  +
mov dword_10670B0 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_1061249  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_106123F  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_106123F  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_1061249  +
mov dword_10670B0 1 +
mov ecx [ebp+var_4] +
mov eax dword_10670B0 +
xor ecx ebp +
pop edi  +
call sub_1045B9C  +
leave   +
retn   +
mov dword_10670B0 20h +
jmp loc_1061249  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_10612C0  +
push 3  +
lea eax [ebp+LCData] +
push offset word_1014F10  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_10670B4 +
jnz loc_1061370  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset aSoftwareMicr_4  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_106136F  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aLocale  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_106136F  +
push 3  +
push ds:off_1014C90[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1061361  +
inc esi  +
cmp esi 1Ch +
jb loc_1061340  +
jmp loc_106136F  +
mov ax ds:word_1014C94[esi*8] +
mov word_10670B4 ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_10670B4 +
xor ecx ebp +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1061445  +
cmp [ebp+arg_0] ebx +
jz loc_1061445  +
cmp [ebp+arg_4] ebx +
jz loc_1061445  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_10613C1  +
movzx eax ax +
sub eax 61h +
jmp loc_10613D0  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_10613FA  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_10613FA  +
mov esi ds:dword_1014DD8[eax*4] +
test esi esi +
jz loc_10613FA  +
jmp loc_10613F2  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1061405  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_10613E2  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jl loc_10613AD  +
jmp loc_1061444  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_106140D  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_1061444  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1061425  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_1061496  +
cmp [ebp+arg_4] 0 +
jz loc_1061496  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_1061E61  +
test eax eax +
jz loc_1061496  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_1061F07  +
test edi edi +
jz loc_1061491  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_1061387  +
xor eax eax +
inc eax  +
jmp loc_1061498  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10614C7  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_10614CC  +
mov eax 80070057h +
test eax eax +
jl loc_10614E5  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1060FAD  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_106150F  +
xor eax eax +
jmp loc_106157A  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_10614B2  +
test eax eax +
jl loc_1061577  +
push esi  +
call sub_106112D  +
mov esi eax +
and esi 26h +
call sub_106112D  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_10610A0  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_1061577  +
push ebx  +
push edi  +
call sub_106103F  +
test eax eax +
jnz loc_1061577  +
push ebx  +
test bl 1 +
jz loc_106156F  +
call ds:UnmapViewOfFile  +
jmp loc_1061575  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1045B9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_10615E7  +
test ecx ecx +
jz loc_10615E7  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_10615CB  +
test edx edx +
jz loc_10615B8  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_10614EE  +
add esp 14h +
jmp loc_10615E9  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_10614EE  +
add esp 10h +
jmp loc_10615E9  +
test edx edx +
jz loc_10615D7  +
push edx  +
push offset a_SS_mui  +
jmp loc_10615C0  +
push offset a_S_mui  +
push ecx  +
call sub_10614EE  +
add esp 0Ch +
jmp loc_10615E9  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_10659C0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_1061625  +
xor eax eax +
jmp loc_1061D7E  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_106161E  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_1061641  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_1061CAB  +
call sub_106112D  +
mov dword_10670B8 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_1061CAB  +
test byte ptr dword_10670B8 20h +
jnz loc_1061D7D  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_1061C9F  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_10616BD  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_10616CF  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_1060FF8  +
test eax eax +
jz loc_1061C87  +
test di di +
jnz loc_1061C5F  +
mov al byte ptr dword_10670B8 +
test al 4 +
jz loc_1061A6E  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_1061721  +
call sub_106126C  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_10617F7  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1061450  +
test eax eax +
jz loc_1061CEB  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
cmp word ptr [ebp+var_208] ax +
jz loc_10617D6  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_10619A2  +
mov [ebp+var_420] 404h +
jmp loc_106172D  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101BDD4  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1061450  +
test eax eax +
jz loc_10618A9  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1061DF9  +
movzx eax ax +
test ax ax +
jz loc_10618A9  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_101BDD4  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_10617E8  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_1061986  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101BDD4  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1061450  +
test eax eax +
jz loc_1061980  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1061DF9  +
movzx eax ax +
test ax ax +
jz loc_1061980  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_101BDD4  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1061C37  +
cmp ax si +
jmp loc_1061C0F  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_1061A55  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1061450  +
test eax eax +
jz loc_1061C87  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
cmp word ptr [ebp+var_208] ax +
jz loc_1061A55  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1061C37  +
jmp loc_1061B2C  +
test al 3 +
jz loc_1061C87  +
call sub_10612D5  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_1061B55  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1061450  +
test eax eax +
jz loc_1061C87  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
cmp word ptr [ebp+var_208] ax +
jz loc_1061B25  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_1061C37  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1061450  +
mov edx esi +
jmp loc_1061C16  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101BDD4  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1061450  +
test eax eax +
jz loc_1061C03  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1061DF9  +
movzx eax ax +
test ax ax +
jz loc_1061C03  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_101BDD4  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_1061C37  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jnz loc_1061CEF  +
jmp loc_1061CEB  +
test byte ptr dword_10670B8 7 +
jz loc_1061C87  +
test byte ptr [ebp+arg_4] 8 +
jz loc_1061CB2  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1061450  +
test eax eax +
jnz loc_1061CCC  +
test byte ptr [ebp+arg_4] 10h +
jz loc_1061CFF  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_1060FF8  +
test eax eax +
jnz loc_1061CFF  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_1061D7D  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_101BDD4  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_106158C  +
mov ebx eax +
test ebx ebx +
jz loc_1061C87  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_1061D7D  +
test byte ptr [ebp+hModule] 1 +
jz loc_1061D77  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_106112D  +
test al 38h +
jz loc_1061D54  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS_0  +
push 104h  +
push eax  +
call sub_101BDD4  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_10610A0  +
jmp loc_1061D71  +
call sub_106112D  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1045B9C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_1061DAD  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_1061DEE  +
cmp word ptr [eax] 7Fh +
jz loc_1061DEE  +
xor eax eax +
inc eax  +
jmp loc_1061DF0  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1061E4E  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_1061E4E  +
push offset sub_1061DBA  +
push 8  +
push 163h  +
push offset off_1016FF0  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_1061E4E  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1015F40 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_1061E49  +
push ecx  +
call sub_1061DD5  +
test eax eax +
jnz loc_1061E4E  +
mov ax [ecx] +
jmp loc_1061E58  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_1061EF2  +
cmp [ebp+arg_4] 0 +
jnz loc_1061E7E  +
cmp [ebp+arg_8] 0 +
jnz loc_1061EF2  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1061EF2  +
push offset sub_1061D93  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1015F40  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_1061EF2  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1061EBA  +
push ecx  +
call sub_1061DD5  +
test eax eax +
jnz loc_1061EF2  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1061EC2  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_1061EEE  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102AA46  +
test eax eax +
jge loc_1061EEE  +
push 7Ah  +
jmp loc_1061EF4  +
mov eax esi +
jmp loc_1061EFC  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_1061FB5  +
cmp [ebp+arg_8] edi +
jle loc_1061F2A  +
cmp [ebp+arg_4] edi +
jz loc_1061FB5  +
cmp [ebp+arg_8] edi +
jl loc_1061FB5  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1061FB5  +
push offset sub_1061DBA  +
push 8  +
push 163h  +
push offset off_1016FF0  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_1061FB5  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1015F40 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1061F76  +
push ecx  +
call sub_1061DD5  +
test eax eax +
jnz loc_1061FB5  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_1061F86  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_1061FB1  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102AA46  +
test eax eax +
jge loc_1061FB1  +
push 7Ah  +
jmp loc_1061FB7  +
mov eax esi +
jmp loc_1061FBF  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_106201A  +
push esi  +
mov dword ptr [esi+4] 1 +
call sub_105E08A  +
test eax eax +
jge loc_106201A  +
mov eax lpReserved +
cmp eax offset lpReserved +
jz loc_1062016  +
test byte ptr [eax+1Ch] 4 +
jz loc_1062016  +
push offset dword_1017B08  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1018898  +
and dword ptr [esi+4] 0 +
mov eax [esi+4] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jz loc_106203F  +
push dword ptr [esi]  +
call sub_105E18D  +
test eax eax +
jl loc_1062042  +
mov [esi+4] edi +
xor edi edi +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
cmp dword ptr [ecx+4] 0 +
jz locret_1062059  +
push dword ptr [ecx]  +
call sub_105E141  +
retn   +
***
cmp dword ptr [ecx+4] 0 +
jz locret_106206C  +
push dword ptr [ecx]  +
call sub_105E167  +
retn   +
***
jmp fword ptr [eax+41h]  +
***
xor al 0FEh +
jmp fword ptr [eax+6Ch]  +
***
jmp fword ptr (byte_10647FF-1064875h)[eax]  +
***
jmp sub_101981E  +
***
mov eax dword_1065F68 +
test eax eax +
jz locret_1062166  +
and dword_1065F68 0 +
push eax  +
call sub_1018A83  +
retn   +
***
mov ecx offset unk_1066080 +
jmp sub_1017FB6  +
***
arpl [ebx+4Fh] bp +
bound ebp [edx+65h] +
arpl [eax+eax+0] si +
retf   +
***
jmp far ptr 7063h:6D656D04h  +
***
retn 6904h  +
***
retf   +
***
