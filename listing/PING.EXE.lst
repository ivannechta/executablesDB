mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp [eax] cx +
jnz loc_100126B  +
cmp [eax+2] cx +
jnz loc_100126B  +
cmp [eax+4] cx +
jnz loc_100126B  +
cmp [eax+6] cx +
jnz loc_100126B  +
cmp [eax+8] cx +
jnz loc_100126B  +
mov edx 0FFFFh +
cmp [eax+0Ah] dx +
jnz loc_100126B  +
mov al 1 +
jmp loc_100126D  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi offset unk_10040C0 +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_4] 7FFh +
call GetIpErrorString  +
test eax eax +
mov eax esi +
jz loc_10012A1  +
mov eax offset dword_100114C +
pop esi  +
leave   +
retn 4  +
***
call sub_1002F39  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [edi+18h] +
cmp word ptr [esi] 17h +
jnz loc_1001307  +
cmp [ebp+arg_0] 0 +
jnz loc_1001307  +
lea eax [esi+8] +
push eax  +
call sub_1001235  +
test al al +
jz loc_1001307  +
mov eax [ebp+arg_8] +
push 2  +
pop ecx  +
mov [eax] cx +
mov ecx [esi+14h] +
mov [eax+4] ecx +
mov cx [esi+2] +
mov [eax+2] cx +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 10h +
jmp loc_1001320  +
mov eax [edi+10h] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
push dword ptr [edi+10h]  +
push dword ptr [edi+18h]  +
push [ebp+arg_8]  +
call memcpy  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
lea ecx [eax-1] +
mov eax [ebp+arg_8] +
cmp eax ecx +
mov ecx [ebp+arg_0] +
jnz loc_100135A  +
push dword ptr [ecx+eax*4]  +
push 2711h  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
push 1  +
call ds:exit  +
push esi  +
lea esi [ecx+eax*4] +
push 0  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+4]  +
call ds:strtoul  +
add esp 0Ch +
cmp eax [ebp+arg_C] +
jb loc_100137F  +
cmp eax [ebp+arg_10] +
ja loc_100137F  +
pop esi  +
pop ebp  +
retn 14h  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push dword ptr [esi]  +
push 2712h  +
push 1  +
call sub_1002F39  +
add esp 14h +
jmp loc_1001352  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_0] +
movzx edx byte ptr [eax+17h] +
push esi  +
mov esi [eax+18h] +
add edx esi +
mov [ebp+var_1] 0 +
mov [ebp+var_1C] edx +
cmp esi edx +
jnb loc_1001700  +
push ebx  +
push edi  +
cmp [ebp+var_1] 0 +
jnz loc_10016FE  +
movzx ecx byte ptr [esi] +
mov eax 82h +
cmp ecx eax +
jg loc_1001590  +
jz loc_1001588  +
sub ecx 0 +
jz loc_100157F  +
dec ecx  +
jz loc_1001579  +
sub ecx 6 +
jz loc_10015BA  +
sub ecx 3Dh +
jnz loc_10015A0  +
lea eax [esi+4] +
cmp eax edx +
jbe loc_1001416  +
push 2746h  +
jmp loc_10016E6  +
mov cl [esi+2] +
mov bl [esi+1] +
mov [ebp+var_2] cl +
cmp cl 5 +
jnb loc_100143A  +
push 2746h  +
push 1  +
call sub_1002F39  +
movzx eax bl +
add esi eax +
jmp loc_10016F1  +
mov al [esi+3] +
and al 1 +
mov [ebp+var_3] al +
movzx eax bl +
movzx ecx cl +
mov [ebp+var_14] eax +
inc eax  +
cmp ecx eax +
jle loc_1001455  +
inc bl  +
mov [ebp+var_2] bl +
and [ebp+var_8] 0 +
xor ebx ebx +
push 2745h  +
inc ebx  +
push ebx  +
mov byte ptr [ebp+arg_0+3] 5 +
call sub_1002F39  +
movzx edi [ebp+var_2] +
cmp edi 8 +
pop ecx  +
pop ecx  +
jle loc_1001566  +
cmp [ebp+var_8] 0 +
jz loc_10014AF  +
push 2742h  +
push ebx  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
cmp [ebp+var_8] ebx +
jnz loc_10014AF  +
push 273Fh  +
push ebx  +
call sub_1002F39  +
push 274Eh  +
push ebx  +
call sub_1002F39  +
add esp 10h +
and [ebp+var_8] 0 +
inc [ebp+var_8]  +
cmp [ebp+var_3] 0 +
jz loc_100151E  +
movzx eax byte ptr [ebp+arg_0+3] +
lea ecx [eax+8] +
cmp ecx edi +
jg loc_1001566  +
cmp [ebp+arg_4] 0 +
mov eax [eax+esi-1] +
mov dword ptr [ebp+in.S_un] eax +
jz loc_1001504  +
push 2  +
push 4  +
lea eax [ebp+in] +
push eax  +
call ds:gethostbyaddr  +
push dword ptr [ebp+in.S_un]  +
mov edi eax +
call ds:inet_ntoa  +
push eax  +
test edi edi +
jz loc_100150C  +
push dword ptr [edi]  +
push 274Dh  +
push ebx  +
call sub_1002F39  +
add esp 10h +
jmp loc_100151A  +
push eax  +
call ds:inet_ntoa  +
push eax  +
push 2743h  +
push ebx  +
call sub_1002F39  +
add esp 0Ch +
add byte ptr [ebp+arg_0+3] 4 +
movzx eax byte ptr [ebp+arg_0+3] +
mov eax [eax+esi-1] +
mov ecx eax +
shr ecx 8 +
mov edx eax +
shl edx 8 +
xor ecx edx +
and ecx 0FF00FFh +
shl eax 8 +
xor ecx eax +
rol ecx 10h +
push ecx  +
push 2744h  +
push ebx  +
call sub_1002F39  +
add byte ptr [ebp+arg_0+3] 4 +
movzx eax byte ptr [ebp+arg_0+3] +
movzx edi [ebp+var_2] +
add eax 3 +
add esp 0Ch +
cmp eax edi +
jl loc_100147A  +
push 273Fh  +
push ebx  +
call sub_1002F39  +
add esi [ebp+var_14] +
jmp loc_10016F1  +
inc esi  +
jmp loc_10016F3  +
mov [ebp+var_1] 1 +
jmp loc_10016F3  +
add esi 0Bh +
jmp loc_10016F3  +
sub ecx 83h +
jz loc_10015BA  +
sub ecx 5 +
jz loc_10015B2  +
dec ecx  +
jz loc_10015BA  +
lea eax [esi+2] +
cmp eax edx +
ja loc_100157F  +
movzx eax byte ptr [esi+1] +
add esi eax +
jmp loc_10016F3  +
add esi 4 +
jmp loc_10016F3  +
lea eax [esi+3] +
cmp eax edx +
ja loc_10016E1  +
mov al [esi+1] +
movzx ecx al +
lea edi [ecx+esi] +
mov [ebp+var_18] edi +
cmp edi edx +
ja loc_10016E1  +
cmp al 3 +
jb loc_10016E1  +
mov bl [esi+2] +
cmp bl 4 +
jnb loc_10015FC  +
push 273Eh  +
push 1  +
call sub_1002F39  +
mov esi edi +
jmp loc_10016F1  +
movzx edx bl +
inc ecx  +
cmp edx ecx +
jle loc_1001608  +
inc al  +
mov bl al +
and [ebp+var_8] 0 +
xor edi edi +
push 2740h  +
inc edi  +
push edi  +
mov byte ptr [ebp+arg_0+3] 4 +
call sub_1002F39  +
movzx eax bl +
cmp eax 7 +
pop ecx  +
pop ecx  +
mov [ebp+var_14] eax +
jle loc_10016D1  +
push 4  +
pop ebx  +
cmp [ebp+var_8] 0 +
jz loc_1001667  +
push 2742h  +
push edi  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
cmp [ebp+var_8] edi +
jnz loc_1001667  +
push 273Fh  +
push edi  +
call sub_1002F39  +
push 2749h  +
push edi  +
call sub_1002F39  +
add esp 10h +
and [ebp+var_8] 0 +
inc [ebp+var_8]  +
cmp [ebp+arg_4] 0 +
mov ebx [ebx+esi-1] +
mov dword ptr [ebp+addr] ebx +
jz loc_10016A7  +
push 2  +
push 4  +
lea eax [ebp+addr] +
push eax  +
call ds:gethostbyaddr  +
push dword ptr [ebp+addr]  +
mov ebx eax +
call ds:inet_ntoa  +
push eax  +
test ebx ebx +
jz loc_10016AF  +
push dword ptr [ebx]  +
push 274Ch  +
push edi  +
call sub_1002F39  +
add esp 10h +
jmp loc_10016BD  +
push ebx  +
call ds:inet_ntoa  +
push eax  +
push 2741h  +
push edi  +
call sub_1002F39  +
add esp 0Ch +
add byte ptr [ebp+arg_0+3] 4 +
movzx ebx byte ptr [ebp+arg_0+3] +
lea eax [ebx+3] +
cmp eax [ebp+var_14] +
jl loc_1001632  +
push 273Fh  +
push edi  +
call sub_1002F39  +
mov esi [ebp+var_18] +
jmp loc_10016F1  +
push 273Eh  +
push 1  +
call sub_1002F39  +
mov [ebp+var_1] 1 +
pop ecx  +
pop ecx  +
mov edx [ebp+var_1C] +
cmp esi edx +
jb loc_10013C3  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_10040A4 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_10050C0 0 +
jbe loc_10017B9  +
cmp dword_10040A0 0FFFFFFFFh +
jnz loc_1001739  +
and dword_10040A0 0 +
push esi  +
push edi  +
push 2  +
push 0  +
push 0  +
push 41h  +
lea eax [ebp+var_48] +
push eax  +
push dword_1005688  +
push offset word_10055E0  +
call ds:getnameinfo  +
mov ecx dword_10050C0 +
mov esi dword_10050C4 +
mov edi ecx +
sub edi esi +
mov eax edi +
imul eax eax +
xor edx edx +
div  ecx +
push eax  +
push edi  +
push esi  +
push ecx  +
lea eax [ebp+var_48] +
push eax  +
push 274Fh  +
push 1  +
call sub_1002F39  +
mov ecx dword_10050C8 +
add esp 1Ch +
pop edi  +
pop esi  +
test ecx ecx +
jbe loc_10017B9  +
mov eax dword_10050D0 +
xor edx edx +
div  ecx +
push eax  +
push dword_10050CC  +
push dword_10040A0  +
push 2753h  +
push 1  +
call sub_1002F39  +
add esp 14h +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002AC1  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_100170A  +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_10017F2  +
dec eax  +
jnz loc_1001800  +
push 2750h  +
push 1  +
call sub_1002F39  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1001802  +
push 2751h  +
push 1  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+hKey] esi +
mov dword ptr [ebp+Data] esi +
mov [ebp+cbData] 4 +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_100185A  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
mov ebx dword ptr [ebp+Data] +
cmp ebx esi +
jnz loc_1001863  +
mov bl 80h +
cmp [ebp+hKey] esi +
jz loc_1001871  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push edi  +
push 8  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
mov eax [ebp+arg_0] +
mov [ebp+var_1C] eax +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push 0  +
push [ebp+arg_4]  +
mov [ebp+var_20] 1 +
call ds:getaddrinfo  +
pop edi  +
test eax eax +
jz loc_10018B8  +
xor eax eax +
jmp locret_10018CF  +
mov eax [ebp+arg_0] +
push dword ptr [eax+10h]  +
push dword ptr [eax+18h]  +
push [ebp+arg_8]  +
call memcpy  +
xor eax eax +
add esp 0Ch +
inc eax  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ebp+arg_4] +
test eax eax +
jz loc_1001913  +
cmp eax edx +
jz loc_1001913  +
mov eax offset aIpv4 +
cmp edx 2 +
jz loc_10018FC  +
mov eax offset aIpv6 +
push eax  +
push [ebp+arg_8]  +
push 2755h  +
push 1  +
call sub_1002F39  +
add esp 10h +
xor al al +
jmp loc_1001917  +
mov [ecx] edx +
mov al 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001936  +
cmp ecx 7FFFFFFFh +
jbe loc_100193B  +
mov eax 80070057h +
test eax eax +
jl loc_100197F  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1001972  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100196D  +
mov cl [edx+eax] +
test cl cl +
jz loc_100196D  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1001959  +
pop edi  +
test esi esi +
jnz loc_1001978  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
mov esi ds:getaddrinfo +
push edi  +
push 8  +
pop ecx  +
xor ebx ebx +
mov [eax] bl +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+var_1C] edi +
mov [ebp+var_20] 4 +
call esi  +
test eax eax +
jnz loc_1001A02  +
mov esi [ebp+arg_C] +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push edi  +
call sub_10012BF  +
cmp [ebp+arg_18] bl +
jz loc_10019F3  +
push 4  +
push ebx  +
push ebx  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push dword ptr [esi]  +
push [ebp+arg_8]  +
call ds:getnameinfo  +
mov bl 1 +
push [ebp+arg_0]  +
call ds:freeaddrinfo  +
mov al bl +
jmp loc_1001A4D  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+var_20] 2 +
call esi  +
test eax eax +
jnz loc_1001A4B  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_10012BF  +
cmp [esi+14h] ebx +
jz loc_1001A35  +
mov esi [esi+14h] +
jmp loc_1001A38  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
call sub_1001920  +
test eax eax +
setnl bl  +
jmp loc_10019F5  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 520h +
mov eax dword_10040A4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
push esi  +
mov [ebp+hMem] ebx +
mov [ebp+var_520] esi +
mov [ebp+var_4FC] esi +
mov [ebp+var_514] esi +
mov [ebp+var_500] 0 +
mov [ebp+var_508] 4 +
mov [ebp+var_4E0] esi +
mov [ebp+var_4D4] esi +
mov [ebp+var_4D9] 0 +
mov [ebp+var_4CD] 0 +
mov [ebp+var_50C] 0FA0h +
mov [ebp+var_4E8] esi +
mov [ebp+var_4F4] esi +
mov [ebp+uBytes] 20h +
mov [ebp+var_4F0] esi +
mov [ebp+var_504] 1 +
call ds:SetThreadUILanguage  +
push esi  +
push esi  +
push 1  +
push esi  +
call ds:HeapSetInformation  +
push offset stru_1005440  +
push 2  +
call ds:WSAStartup  +
cmp eax esi +
jz loc_1001B2A  +
push eax  +
call sub_1001276  +
push eax  +
push 274Ah  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
push 1  +
call ds:exit  +
push 80h  +
lea eax [ebp+var_4CC] +
push esi  +
push eax  +
call memset  +
push 401h  +
lea eax [ebp+var_44C] +
push esi  +
push eax  +
call memset  +
push 41h  +
lea eax [ebp+var_48] +
push esi  +
push eax  +
call memset  +
add esp 24h +
call sub_100180B  +
cmp [ebp+arg_0] 2 +
mov [ebp+var_4E1] al +
jge loc_1001B78  +
call sub_10012AB  +
jmp loc_10027FD  +
xor edi edi +
inc edi  +
cmp [ebp+arg_0] edi +
jbe loc_1001C10  +
mov ecx [ebx+edi*4] +
mov [ebp+var_4D8] ecx +
mov al [ecx] +
cmp al 2Dh +
jz loc_1001B97  +
cmp al 2Fh +
jnz loc_1001BE5  +
movsx eax byte ptr [ecx+1] +
cmp eax 66h +
jg loc_1001BB5  +
jz loc_1001BCE  +
sub eax 34h +
jz loc_1001BCE  +
dec eax  +
dec eax  +
jz loc_1001BB0  +
sub eax 1Ch +
jnz loc_1001BE5  +
push ecx  +
push 17h  +
jmp loc_1001BD1  +
cmp eax 6Ah +
jl loc_1001BE5  +
cmp eax 6Bh +
jle loc_1001BCE  +
cmp eax 71h +
jle loc_1001BE5  +
cmp eax 73h +
jle loc_1001BCE  +
cmp eax 76h +
jnz loc_1001BE5  +
push ecx  +
push 2  +
lea eax [ebp+var_4F0] +
push eax  +
call sub_10018D8  +
test al al +
jz loc_10027FD  +
inc edi  +
cmp edi [ebp+arg_0] +
jb loc_1001B84  +
cmp [ebp+var_4F0] 2 +
jnz loc_1001C10  +
call sub_1002FC9  +
test al al +
jnz loc_1001C10  +
push 275Ch  +
push 1  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
jmp loc_1001B22  +
mov edx [ebp+arg_0] +
xor edi edi +
inc edi  +
cmp edx edi +
jbe loc_100215D  +
mov ecx [ebx+edi*4] +
mov [ebp+var_4D8] ecx +
mov al [ecx] +
cmp al 2Dh +
jz loc_1001C9A  +
cmp al 2Fh +
jz loc_1001C9A  +
cmp [ebp+var_514] 0 +
jnz loc_10020DE  +
push dword ptr [ebp+var_500]  +
lea eax [ebp+var_44C] +
push 401h  +
push eax  +
push offset dword_1005688  +
push offset word_10055E0  +
push ecx  +
push [ebp+var_4F0]  +
call sub_1001988  +
test al al +
jz loc_10020F3  +
cmp word_10055E0 2 +
jnz loc_1001C85  +
cmp dword_10055E4 0FFFFFFFFh +
jz loc_10020F3  +
mov [ebp+var_514] 1 +
mov [ebp+var_4FC] edi +
jmp loc_10020D0  +
movsx eax byte ptr [ecx+1] +
cmp eax 6Ah +
jg loc_1001E63  +
jz loc_1001D5C  +
cmp eax 53h +
jg loc_1001D15  +
jz loc_1001CE3  +
sub eax 34h +
jz loc_10020D0  +
dec eax  +
dec eax  +
jz loc_10020D0  +
sub eax 9 +
jz loc_1002100  +
sub eax 13h +
jnz loc_100213F  +
or [ebp+var_4CD] 1 +
jmp loc_10020D0  +
dec edx  +
cmp edi edx +
jz loc_100210C  +
lea eax [ebp+var_4CC] +
push eax  +
inc edi  +
push dword ptr [ebx+edi*4]  +
push [ebp+var_4F0]  +
call sub_100187C  +
test eax eax +
jz loc_1002114  +
mov [ebp+var_520] edi +
jmp loc_10020D0  +
cmp eax 61h +
jz loc_1001D50  +
cmp eax 66h +
jz loc_1001D44  +
cmp eax 69h +
jnz loc_100213F  +
push 0FFh  +
push 1  +
push edi  +
push [ebp+arg_0]  +
push ebx  +
call sub_100132B  +
mov [ebp+var_4E1] al +
jmp loc_1001F14  +
or [ebp+var_4CD] 2 +
jmp loc_10020D0  +
mov [ebp+var_500] 1 +
jmp loc_10020D0  +
cmp [ebp+var_4E8] 0 +
jnz loc_100211E  +
lea eax [esi+3] +
cmp eax 28h +
jg loc_1002131  +
add [ebp+var_4D4] 3 +
mov [ebp+var_4E0] offset dword_1005660 +
mov byte ptr dword_1005660[esi] 83h +
mov byte ptr (dword_1005660+1)[esi] 3 +
mov byte ptr (dword_1005660+2)[esi] 4 +
lea eax [edx-2] +
jmp loc_1001E43  +
mov eax [ebx+edi*4+4] +
cmp byte ptr [eax] 2Dh +
jz loc_1001E4B  +
lea eax [esi+3] +
cmp eax 24h +
jg loc_1002131  +
inc edi  +
mov eax [ebx+edi*4] +
mov [ebp+var_4D8] eax +
lea ecx [ebp+var_510] +
push ecx  +
lea ecx [ebp+var_4D8] +
push ecx  +
push 1  +
push eax  +
call ds:RtlIpv4StringToAddressA  +
test eax eax +
jl loc_1002138  +
mov edx [ebp+var_510] +
add [ebp+var_4D4] 4 +
lea eax (dword_1005660+1)[esi] +
movzx ecx byte ptr [eax] +
mov dword_1005660[ecx+esi] edx +
add byte ptr [eax] 4 +
mov eax [ebp+var_4D8] +
mov al [eax] +
test al al +
jz loc_1001E3D  +
movzx eax al +
push eax  +
call ds:isspace  +
pop ecx  +
test eax eax +
jz loc_1001E32  +
inc [ebp+var_4D8]  +
mov eax [ebp+var_4D8] +
mov al [eax] +
test al al +
jnz loc_1001E11  +
mov eax [ebp+var_4D8] +
cmp byte ptr [eax] 0 +
jnz loc_1001DC6  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFEh +
cmp edi eax +
jb loc_1001DA3  +
movzx eax byte ptr (dword_1005660+1)[esi] +
add esi eax +
mov [ebp+var_4E8] 1 +
jmp loc_10020D0  +
cmp eax 73h +
jg loc_1002085  +
jz loc_1002030  +
sub eax 6Bh +
jz loc_1001F1A  +
dec eax  +
jz loc_1001EFD  +
dec eax  +
dec eax  +
jz loc_1001EE7  +
sub eax 4 +
jnz loc_100213F  +
lea eax [esi+3] +
cmp eax 28h +
jg loc_1002131  +
push 9  +
push 1  +
mov eax edi +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_4E0] offset dword_1005660 +
push ebx  +
mov byte ptr dword_1005660[esi] 7 +
mov byte ptr (dword_1005660+2)[esi] 4 +
inc edi  +
call sub_100132B  +
shl al 2 +
add al 3 +
movzx ecx al +
lea edx [ecx+esi] +
cmp edx 28h +
jg loc_1002131  +
add [ebp+var_4D4] ecx +
mov byte ptr (dword_1005660+1)[esi] al +
mov esi edx +
jmp loc_10020D0  +
push 0FFFFFFFFh  +
push 1  +
push edi  +
push [ebp+arg_0]  +
push ebx  +
call sub_100132B  +
mov [ebp+var_508] eax +
jmp loc_1001F14  +
push 0FFDCh  +
push 0  +
push edi  +
push [ebp+arg_0]  +
push ebx  +
call sub_100132B  +
mov [ebp+uBytes] eax +
inc edi  +
jmp loc_10020D0  +
cmp [ebp+var_4E8] 0 +
jnz loc_100211E  +
lea eax [esi+3] +
cmp eax 28h +
jg loc_1002131  +
mov ebx [ebp+arg_0] +
add [ebp+var_4D4] 3 +
mov [ebp+var_4E0] offset dword_1005660 +
mov byte ptr dword_1005660[esi] 89h +
mov byte ptr (dword_1005660+1)[esi] 3 +
mov byte ptr (dword_1005660+2)[esi] 4 +
add ebx 0FFFFFFFEh +
jmp loc_100200A  +
mov eax [ebp+hMem] +
mov eax [eax+edi*4+4] +
cmp byte ptr [eax] 2Dh +
jz loc_1002012  +
lea eax [esi+3] +
cmp eax 24h +
jg loc_1002131  +
mov eax [ebp+hMem] +
inc edi  +
mov eax [eax+edi*4] +
mov [ebp+var_4D8] eax +
lea ecx [ebp+var_510] +
push ecx  +
lea ecx [ebp+var_4D8] +
push ecx  +
push 1  +
push eax  +
call ds:RtlIpv4StringToAddressA  +
test eax eax +
jl loc_1002138  +
mov edx [ebp+var_510] +
add [ebp+var_4D4] 4 +
lea eax (dword_1005660+1)[esi] +
movzx ecx byte ptr [eax] +
mov dword_1005660[ecx+esi] edx +
add byte ptr [eax] 4 +
mov eax [ebp+var_4D8] +
mov al [eax] +
test al al +
jz loc_100200A  +
movzx eax al +
push eax  +
call ds:isspace  +
pop ecx  +
test eax eax +
jz loc_1001FFF  +
inc [ebp+var_4D8]  +
mov eax [ebp+var_4D8] +
mov al [eax] +
test al al +
jnz loc_1001FDE  +
mov eax [ebp+var_4D8] +
cmp byte ptr [eax] 0 +
jnz loc_1001F93  +
cmp edi ebx +
jb loc_1001F64  +
movzx eax byte ptr (dword_1005660+1)[esi] +
mov ebx [ebp+hMem] +
add esi eax +
mov [ebp+var_4E8] 1 +
jmp loc_10020D0  +
lea eax [esi+4] +
cmp eax 28h +
jg loc_1002131  +
push 4  +
push 1  +
mov eax edi +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_4E0] offset dword_1005660 +
push ebx  +
mov byte ptr dword_1005660[esi] 44h +
mov byte ptr (dword_1005660+2)[esi] 5 +
inc edi  +
call sub_100132B  +
shl al 3 +
add al 4 +
movzx ecx al +
lea edx [ecx+esi] +
cmp edx 28h +
jg loc_1002131  +
mov byte ptr (dword_1005660+3)[esi] 1 +
jmp loc_1001ED4  +
sub eax 74h +
jz loc_10020C9  +
dec eax  +
dec eax  +
jz loc_10020AD  +
dec eax  +
jnz loc_100213F  +
push 0FFFFFFFFh  +
push eax  +
push edi  +
push [ebp+arg_0]  +
push ebx  +
call sub_100132B  +
mov [ebp+var_50C] eax +
jmp loc_1001F14  +
push 0FFh  +
push 0  +
push edi  +
push [ebp+arg_0]  +
push ebx  +
call sub_100132B  +
mov [ebp+var_4D9] al +
jmp loc_1001F14  +
or [ebp+var_508] 0FFFFFFFFh +
inc edi  +
cmp edi [ebp+arg_0] +
jnb loc_1002154  +
mov edx [ebp+arg_0] +
jmp loc_1001C1E  +
push ecx  +
push 271Ch  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
jmp loc_10027FD  +
push [ebp+var_4D8]  +
push 271Dh  +
jmp loc_10020E4  +
call sub_10012AB  +
push 0  +
jmp loc_1001B24  +
push ecx  +
push 2711h  +
jmp loc_10020E4  +
push dword ptr [ebx+edi*4]  +
push 2754h  +
jmp loc_10020E4  +
push 273Dh  +
push 1  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
jmp loc_10027FD  +
push 2747h  +
jmp loc_1002123  +
push 2714h  +
jmp loc_1002123  +
push ecx  +
push 271Bh  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
jmp loc_1001B6E  +
cmp [ebp+var_514] 0 +
jnz loc_1002164  +
push 271Eh  +
jmp loc_1002123  +
cmp [ebp+var_4F0] 0 +
jnz loc_10021E3  +
mov ax word ptr [ebp+var_4CC] +
test ax ax +
jz loc_10021E3  +
cmp ax word_10055E0 +
jz loc_10021E3  +
lea eax [ebp+var_4CC] +
push eax  +
mov eax [ebp+var_520] +
push dword ptr [ebx+eax*4]  +
movzx eax word_10055E0 +
push eax  +
call sub_100187C  +
test eax eax +
jnz loc_10021E3  +
push dword ptr [ebp+var_500]  +
lea eax [ebp+var_44C] +
push 401h  +
push eax  +
mov eax [ebp+var_4FC] +
push offset dword_1005688  +
push offset word_10055E0  +
push dword ptr [ebx+eax*4]  +
movzx eax word ptr [ebp+var_4CC] +
push eax  +
call sub_1001988  +
test al al +
jnz loc_10021E3  +
push 275Bh  +
jmp loc_1002123  +
movzx eax word_10055E0 +
mov [ebp+var_4F0] eax +
cmp eax 2 +
jnz loc_10021FC  +
call IcmpCreateFile  +
jmp loc_1002201  +
call Icmp6CreateFile  +
mov [ebp+var_4E8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002223  +
call ds:GetLastError  +
push eax  +
call sub_1001276  +
push eax  +
push 271Fh  +
jmp loc_10020E4  +
mov ebx [ebp+uBytes] +
mov esi ds:LocalAlloc +
push ebx  +
xor edi edi +
push edi  +
call esi  +
mov [ebp+hMem] eax +
cmp eax edi +
jnz loc_1002252  +
push 2748h  +
push 1  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
jmp loc_10027CC  +
push 20h  +
pop eax  +
cmp eax ebx +
sbb eax eax +
and eax 0E043h +
add eax 1FF8h +
push eax  +
push edi  +
mov [ebp+var_4FC] eax +
call esi  +
mov [ebp+var_4F4] eax +
cmp eax edi +
jz loc_100223F  +
xor ecx ecx +
cmp ebx edi +
jbe loc_1002297  +
xor edx edx +
push 17h  +
mov eax ecx +
pop esi  +
div  esi +
mov eax [ebp+hMem] +
add dl 61h +
mov [ecx+eax] dl +
inc ecx  +
cmp ecx ebx +
jb loc_100227D  +
mov eax [ebp+var_4E0] +
mov esi ds:getnameinfo +
mov [ebp+var_518] eax +
mov al byte ptr [ebp+var_4D4] +
mov [ebp+var_519] al +
mov al [ebp+var_4E1] +
push 2  +
mov [ebp+var_51C] al +
mov al [ebp+var_4D9] +
push edi  +
mov [ebp-51Bh] al +
mov al [ebp+var_4CD] +
push edi  +
push 41h  +
mov [ebp+var_51A] al +
lea eax [ebp+var_48] +
push eax  +
push dword_1005688  +
push offset word_10055E0  +
call esi  +
test eax eax +
jz loc_1002303  +
push 41h  +
lea eax [ebp+var_48] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
cmp byte ptr [ebp+var_44C] 0 +
lea eax [ebp+var_48] +
push eax  +
jz loc_1002328  +
lea eax [ebp+var_44C] +
push eax  +
push 2720h  +
push 1  +
call sub_1002F39  +
add esp 10h +
jmp loc_1002337  +
push 274Bh  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
cmp word ptr [ebp+var_4CC] 17h +
jz loc_100234B  +
cmp word ptr [ebp+var_4CC] 2 +
jnz loc_1002399  +
xor eax eax +
cmp word ptr [ebp+var_4CC] 2 +
push 2  +
setnz al  +
push edi  +
push edi  +
push 41h  +
lea ecx [ebp+var_48] +
push ecx  +
dec eax  +
and eax 0FFFFFFF4h +
add eax 1Ch +
push eax  +
lea eax [ebp+var_4CC] +
push eax  +
call esi  +
test eax eax +
jz loc_1002386  +
push 41h  +
lea eax [ebp+var_48] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_48] +
push eax  +
push 2759h  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
push ebx  +
push 275Ah  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
push 1  +
push offset HandlerRoutine  +
call ds:SetConsoleCtrlHandler  +
mov eax [ebp+var_508] +
mov [ebp+var_4E0] edi +
cmp eax edi +
jbe loc_10027B6  +
dec eax  +
mov [ebp+var_4D4] eax +
mov esi edi +
jmp loc_10023DB  +
mov ebx [ebp+uBytes] +
cmp [ebp+var_4F0] 2 +
push [ebp+var_50C]  +
lea eax [ebp+var_51C] +
push [ebp+var_4FC]  +
push [ebp+var_4F4]  +
push eax  +
push ebx  +
push [ebp+hMem]  +
jnz loc_1002624  +
push dword_10055E4  +
xor eax eax +
cmp word ptr [ebp+var_4CC] 2 +
setnz al  +
dec eax  +
and eax [ebp+var_4C8] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+var_4E8]  +
call IcmpSendEcho2Ex  +
inc dword_10050C0  +
cmp eax edi +
jnz loc_10024A4  +
call ds:GetLastError  +
cmp eax 2AF8h +
jnb loc_1002460  +
push eax  +
call sub_1001276  +
push eax  +
push 2722h  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
jmp loc_100248E  +
mov ecx dword_1004000 +
xor edx edx +
jmp loc_100247A  +
cmp ecx 2B2Ah +
jz loc_100247E  +
mov ecx dword_1004008[edx*8] +
inc edx  +
cmp ecx eax +
jnz loc_100246A  +
push dwMessageId[edx*8]  +
push 1  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
cmp esi [ebp+var_4D4] +
jnb loc_100279B  +
push 3E8h  +
jmp loc_1002795  +
mov esi [ebp+var_4F4] +
push dword ptr [esi]  +
dec eax  +
mov [ebp+var_504] eax +
call ds:inet_ntoa  +
push eax  +
xor edi edi +
push 2723h  +
inc edi  +
push edi  +
call sub_1002F39  +
mov eax [esi+4] +
add esp 0Ch +
test eax eax +
jnz loc_10025C2  +
inc dword_10050C8  +
movzx eax word ptr [esi+0Ch] +
push eax  +
push 273Ch  +
push edi  +
call sub_1002F39  +
movzx eax word ptr [esi+0Ch] +
add esp 0Ch +
cmp eax [ebp+uBytes] +
jz loc_1002509  +
push [ebp+uBytes]  +
push 2724h  +
push edi  +
jmp loc_100253B  +
mov edi [ebp+hMem] +
xor ecx ecx +
cmp [ebp+uBytes] ecx +
jbe loc_1002543  +
mov eax [esi+10h] +
sub eax edi +
mov dl [edi] +
mov bl [eax+edi] +
inc edi  +
cmp dl bl +
jnz loc_1002533  +
inc ecx  +
cmp ecx [ebp+uBytes] +
jb loc_100251E  +
jmp loc_1002543  +
push ecx  +
push 2725h  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
mov eax [esi+8] +
test eax eax +
jz loc_1002585  +
push eax  +
push 2726h  +
push 1  +
call sub_1002F39  +
mov eax [esi+8] +
add dword_10050D0 eax +
mov eax [esi+8] +
add esp 0Ch +
cmp eax dword_10040A0 +
jnb loc_1002573  +
mov dword_10040A0 eax +
mov eax [esi+8] +
cmp eax dword_10050CC +
jbe loc_100259A  +
mov dword_10050CC eax +
jmp loc_100259A  +
push 2727h  +
push 1  +
call sub_1002F39  +
and dword_10040A0 0 +
pop ecx  +
pop ecx  +
movzx eax byte ptr [esi+14h] +
push eax  +
push 2728h  +
push 1  +
call sub_1002F39  +
add esp 0Ch +
cmp byte ptr [esi+17h] 0 +
jz loc_10025F0  +
push dword ptr [ebp+var_500]  +
push esi  +
call sub_100139D  +
jmp loc_10025F0  +
mov ecx dword_1004000 +
xor edx edx +
mov ebx 2B2Ah +
jmp loc_10025DD  +
cmp ecx eax +
jz loc_10025E1  +
mov ecx dword_1004008[edx*8] +
inc edx  +
cmp ecx ebx +
jnz loc_10025D1  +
push dwMessageId[edx*8]  +
push edi  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_504] +
inc dword_10050C4  +
add esi 1Ch +
test eax eax +
jnz loc_10024AA  +
mov eax [ebp+var_4D4] +
cmp [ebp+var_4E0] eax +
jnb loc_100279B  +
sub esi 1Ch +
mov esi [esi+8] +
jmp loc_1002785  +
push offset word_10055E0  +
lea eax [ebp+var_4CC] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+var_4E8]  +
call Icmp6SendEcho2  +
inc dword_10050C0  +
mov ebx eax +
cmp ebx edi +
jnz loc_1002682  +
call ds:GetLastError  +
cmp eax 2AF8h +
jb loc_1002448  +
mov ecx dword_1004000 +
xor edx edx +
jmp loc_1002679  +
cmp ecx 2B2Ah +
jz loc_100247E  +
mov ecx dword_1004008[edx*8] +
inc edx  +
cmp ecx eax +
jnz loc_1002665  +
jmp loc_100247E  +
mov esi [ebp+var_4F4] +
push 2  +
push edi  +
push edi  +
push 41h  +
lea eax [ebp+var_48] +
push eax  +
push dword_1005688  +
dec ebx  +
push offset word_10055E0  +
call ds:getnameinfo  +
test eax eax +
jz loc_10026B7  +
push 41h  +
lea eax [ebp+var_48] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_48] +
push eax  +
push 2723h  +
push 1  +
call sub_1002F39  +
mov edx [esi+1Ch] +
add esp 0Ch +
cmp edx edi +
jnz loc_1002734  +
inc dword_10050C8  +
mov eax [esi+20h] +
cmp eax edi +
jz loc_1002719  +
push eax  +
push 2726h  +
push 1  +
call sub_1002F39  +
mov eax [esi+20h] +
add dword_10050D0 eax +
mov eax [esi+20h] +
add esp 0Ch +
cmp eax dword_10040A0 +
jnb loc_1002707  +
mov dword_10040A0 eax +
mov eax [esi+20h] +
cmp eax dword_10050CC +
jbe loc_100272D  +
mov dword_10050CC eax +
jmp loc_100272D  +
push 2727h  +
push 1  +
call sub_1002F39  +
pop ecx  +
pop ecx  +
mov dword_10040A0 edi +
push 273Fh  +
jmp loc_1002757  +
mov eax dword_1004000 +
xor ecx ecx +
jmp loc_1002749  +
cmp eax edx +
jz loc_1002750  +
mov eax dword_1004008[ecx*8] +
inc ecx  +
cmp eax 2B2Ah +
jnz loc_100273D  +
push dwMessageId[ecx*8]  +
push 1  +
call sub_1002F39  +
inc dword_10050C4  +
pop ecx  +
add esi 24h +
pop ecx  +
cmp ebx edi +
jnz loc_1002688  +
mov eax [ebp+var_4D4] +
cmp [ebp+var_4E0] eax +
jnb loc_100279B  +
sub esi 24h +
mov esi [esi+20h] +
cmp esi 3E8h +
jnb loc_100279B  +
mov eax 3E8h +
sub eax esi +
push eax  +
call ds:Sleep  +
mov esi [ebp+var_4E0] +
inc esi  +
xor edi edi +
mov [ebp+var_4E0] esi +
cmp esi [ebp+var_508] +
jb loc_10023D5  +
xor eax eax +
cmp dword_10050C4 edi +
setz al  +
mov [ebp+var_504] eax +
call sub_100170A  +
push [ebp+var_4E8]  +
call IcmpCloseHandle  +
mov esi ds:LocalFree +
cmp [ebp+hMem] edi +
jz loc_10027ED  +
push [ebp+hMem]  +
call esi  +
cmp [ebp+var_4F4] edi +
jz loc_10027FD  +
push [ebp+var_4F4]  +
call esi  +
call ds:WSACleanup  +
push [ebp+var_504]  +
jmp loc_1001B24  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100282F  +
test eax eax +
jnz loc_1002834  +
mov ecx [esi] +
test ecx ecx +
jz loc_100282C  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1002820  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10050F8 +
push offset dword_10050E8  +
push dword_10050F4  +
mov dword_10050E8 eax +
push offset dword_10050D8  +
push offset dword_10050DC  +
push offset dword_10050D4  +
call ds:__getmainargs  +
add esp 14h +
mov dword_10050E4 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10028BC  +
cmp eax esi +
jnz loc_10028AF  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10028BF  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002896  +
xor esi esi +
inc esi  +
mov eax dword_1005694 +
cmp eax esi +
jnz loc_10028D2  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100290D  +
mov eax dword_1005694 +
test eax eax +
jnz loc_1002907  +
mov dword_1005694 esi +
push offset dword_1001120  +
push offset dword_1001114  +
call sub_1002813  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100290D  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10029D7  +
mov dword_10050F0 esi +
mov eax dword_1005694 +
cmp eax esi +
jnz loc_1002931  +
push offset dword_1001110  +
push offset dword_1001108  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1005694 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100293E  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100569C ebx +
jz loc_100295F  +
push offset dword_100569C  +
call sub_1002BD9  +
pop ecx  +
test eax eax +
jz loc_100295F  +
push ebx  +
push 2  +
push ebx  +
call dword_100569C  +
push dword_10050D8  +
push dword_10050DC  +
push dword_10050D4  +
call sub_1001A59  +
add esp 0Ch +
mov dword_10050EC eax +
cmp dword_10050E0 ebx +
jnz loc_10029BD  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_10050EC eax +
xor ebx ebx +
cmp dword_10050E0 ebx +
jnz loc_10029BD  +
push eax  +
call ds:_exit  +
cmp dword_10050F0 ebx +
jnz loc_10029CB  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10050EC +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10029F4  +
xor eax eax +
jmp loc_1002A41  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10029F0  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002A2E  +
cmp ecx 20Bh +
jnz loc_10029F0  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10029F0  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002A3C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10029F0  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_10050E0 eax +
call sub_1002D72  +
push eax  +
call ds:__set_app_type  +
or dword_100568C 0FFFFFFFFh +
or dword_1005690 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1005100 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10050FC +
mov [eax] ecx +
call sub_1002D04  +
cmp dword_10040B4 0 +
jnz loc_1002A9A  +
push offset sub_1002D04  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1002CEC  +
xor eax eax +
retn   +
***
call sub_1002DB1  +
jmp sub_1002874  +
***
cmp ecx dword_10040A4 +
jnz loc_1002ACC  +
retn 0  +
jmp loc_1002E47  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1002B1E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1002B1E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1002B18  +
cmp eax 19930521h +
jz loc_1002B18  +
cmp eax 19930522h +
jz loc_1002B18  +
cmp eax 1994000h +
jnz loc_1002B1E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1002AE0+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002B66  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002B62  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1002BCD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002BC5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1002BCF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002BB5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1002B50  +
pop ecx  +
test eax eax +
jz loc_1002C36  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002B90  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002C36  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1002C3F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002AC1  +
push offset dword_10040A4  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002D65  +
cmp ecx 0FFFFFFFFh +
jz loc_1002D65  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1002D5E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1002D5E  +
cmp edx 10000000h +
jnb loc_1002D5E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1002D5E  +
jmp loc_1002D59  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002DA7  +
push eax  +
call sub_1002D0C  +
test eax eax +
jz loc_1002DA7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1002D9C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002DA7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10040A4 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002DE3  +
test eax ebx +
jz loc_1002DE3  +
not eax  +
mov dword_10040A8 eax +
jmp loc_1002E3E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1002E2A  +
test dword_10040A4 ebx +
jnz loc_1002E2F  +
mov esi 0BB40E64Fh +
mov dword_10040A4 esi +
not esi  +
mov dword_10040A8 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1005208 eax +
mov dword_1005204 ecx +
mov dword_1005200 edx +
mov dword_10051FC ebx +
mov dword_10051F8 esi +
mov dword_10051F4 edi +
mov word_1005220 ss +
mov word_1005214 cs +
mov word_10051F0 ds +
mov word_10051EC es +
mov word_10051E8 fs +
mov word_10051E4 gs +
pushf   +
pop dword_1005218  +
mov eax [ebp+0] +
mov dword_100520C eax +
mov eax [ebp+4] +
mov dword_1005210 eax +
lea eax [ebp+8] +
mov dword_100521C eax +
mov eax [ebp-320h] +
mov dword_1005158 10001h +
mov eax dword_1005210 +
mov dword_1005114 eax +
mov dword_1005108 0C0000409h +
mov dword_100510C 1 +
mov eax dword_10040A4 +
mov [ebp-328h] eax +
mov eax dword_10040A8 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 0  +
lea eax [ebp+hMem] +
push eax  +
push 0  +
push [ebp+dwMessageId]  +
push lpSource  +
push 900h  +
call ds:FormatMessageA  +
test eax eax +
jnz loc_1002F6C  +
leave   +
retn   +
mov eax [ebp+hMem] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1002F72  +
push esi  +
push edi  +
sub eax ecx +
mov esi eax +
push esi  +
push [ebp+hMem]  +
push [ebp+hMem]  +
call ds:CharToOemBuffA  +
push 8000h  +
push [ebp+arg_0]  +
call _setmode  +
push esi  +
push [ebp+hMem]  +
mov edi eax +
push [ebp+arg_0]  +
call _write  +
push edi  +
push [ebp+arg_0]  +
mov esi eax +
call _setmode  +
add esp 1Ch +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
mov [ebp+var_4] eax +
call GetIpForwardTable  +
cmp eax 7Ah +
setz al  +
leave   +
retn   +
***
arpl [ebp+73h] sp +
jnb $+2  +
iret   +
***
