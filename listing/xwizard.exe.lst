jmp fword ptr [eax+2498777Bh]  +
***
call ds:GetLastError  +
test eax eax +
jle locret_1001379  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_10013B0  +
cmp word ptr [edx] 0 +
jnz loc_1001395  +
push 0Eh  +
jmp loc_10013B2  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100139B  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10013B3  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10013C4  +
cmp word ptr [edx] 0 +
jnz loc_10013C9  +
mov edx offset aNull +
jmp loc_10013C9  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1001410  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001404  +
sub eax edx +
inc eax  +
jmp loc_1001413  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_100141E  +
mov ecx offset aNull_1 +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_100147A  +
cmp word ptr [edx] 0 +
jnz loc_1001461  +
push 0Eh  +
jmp loc_100147C  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001466  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_100147D  +
push 0Ah  +
pop ebx  +
test edx edx +
jz loc_100148E  +
cmp word ptr [edx] 0 +
jnz loc_1001493  +
mov edx offset aNull +
jmp loc_1001493  +
mov edx offset aNull_0 +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_10014AB  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100149F  +
sub eax esi +
inc eax  +
jmp loc_10014AE  +
push 5  +
pop eax  +
mov ecx edi +
test edi edi +
jnz loc_10014B9  +
mov ecx offset aNull_1 +
push 0  +
push 4  +
lea esi [ebp+arg_18] +
push esi  +
push ebx  +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_100153E  +
dec eax  +
jz loc_1001535  +
push 57h  +
pop eax  +
jmp loc_10015AC  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1001564  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_100158D  +
cmp dword ptr [esi+10h] 0 +
jz loc_100158D  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_10015AA  +
test cl 2 +
jz loc_100159B  +
mov esi [esi+10h] +
test esi esi +
jz loc_100159B  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1003040 +
push edi  +
mov edi offset dword_1003290 +
jmp loc_10015F7  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_100150F  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_10015CE  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1003040 +
push edi  +
mov edi offset off_1003040 +
cmp esi edi +
jz loc_1001643  +
jmp loc_1001639  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1001637  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_100161B  +
mov off_1003040 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:FormatMessageW +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
push 1  +
push lpSource  +
mov edi 900h +
push edi  +
mov [ebp+hMem] ebx +
mov [ebp+lpText] ebx +
call esi  +
test eax eax +
jnz loc_10016B7  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1001718  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001718  +
call sub_1001365  +
push eax  +
push offset dword_10011C8  +
push 0Ah  +
mov eax off_1003040 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
jmp loc_1001718  +
push ebx  +
push ebx  +
lea eax [ebp+lpText] +
push eax  +
push ebx  +
push 2  +
push lpSource  +
push edi  +
call esi  +
test eax eax +
jnz loc_10016F7  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1001718  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001718  +
call sub_1001365  +
push eax  +
push offset dword_10011C8  +
push 0Bh  +
jmp loc_10016A5  +
push 40h  +
push [ebp+hMem]  +
push [ebp+lpText]  +
push [ebp+hWnd]  +
call ds:MessageBoxW  +
push [ebp+hMem]  +
mov esi ds:LocalFree +
call esi  +
push [ebp+lpText]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpWideCharStr] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp eax ebx +
jz loc_10017A6  +
cmp [eax] bx +
jz loc_10017A6  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_10017A6  +
push eax  +
call ds:lstrlenW  +
mov esi eax +
inc esi  +
inc esi  +
push esi  +
call ds:CoTaskMemAlloc  +
mov [edi] eax +
cmp eax ebx +
jz loc_10017A2  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push 400h  +
push ebx  +
call ds:WideCharToMultiByte  +
mov [ebp+lpWideCharStr] eax +
cmp eax ebx +
jz loc_1001784  +
mov eax [edi] +
mov byte ptr [eax+esi-2] 57h +
mov eax [edi] +
mov [eax+esi-1] bl +
jmp loc_100179D  +
call ds:GetLastError  +
push dword ptr [edi]  +
mov esi eax +
call ds:CoTaskMemFree  +
push esi  +
mov [edi] ebx +
call ds:SetLastError  +
mov eax [ebp+lpWideCharStr] +
jmp loc_10017B0  +
push 0Eh  +
jmp loc_10017A8  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:DefWindowProcW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+pNumArgs] esi +
mov edi offset unk_1003270 +
push edi  +
call sub_10014E7  +
push offset aMicrosoftXwiza  +
mov dword_1003290 offset loc_10011D8 +
mov off_1003040 edi +
call sub_10015B8  +
mov ebx [ebp+pv] +
push 7Bh  +
push ebx  +
call sub_100256D  +
push 9  +
pop ecx  +
xor eax eax +
push 2710h  +
mov [ebp+WndClass.style] esi +
lea edi [ebp+WndClass.lpfnWndProc] +
stos   +
push ebx  +
mov [ebp+WndClass.lpfnWndProc] offset loc_10017BC +
mov [ebp+WndClass.hInstance] ebx +
call ds:LoadIconW  +
push 7F00h  +
push esi  +
mov [ebp+WndClass.hIcon] eax +
call ds:LoadCursorW  +
mov [ebp+WndClass.hCursor] eax +
lea eax [ebp+WndClass] +
mov edi offset aExtensibleWiza +
push eax  +
mov [ebp+WndClass.hbrBackground] 6 +
mov [ebp+WndClass.cbWndExtra] 4 +
mov [ebp+WndClass.lpszClassName] edi +
call ds:RegisterClassW  +
push esi  +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
mov eax 80000000h +
push eax  +
push eax  +
push esi  +
push offset WindowName  +
push edi  +
push 80h  +
call sub_1002706  +
mov [ebp+hWnd] eax +
cmp eax esi +
jnz loc_10018C3  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1001AEF  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001AEF  +
call sub_1001365  +
push eax  +
mov eax off_1003040 +
push offset dword_10011C8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
jmp loc_1001AEF  +
lea eax [ebp+pNumArgs] +
push eax  +
push [ebp+lpCmdLine]  +
call ds:CommandLineToArgvW  +
mov [ebp+hMem] eax +
cmp eax esi +
jz loc_1001AAD  +
cmp [ebp+pNumArgs] 1 +
jle loc_1001A71  +
push esi  +
push esi  +
mov edi offset LibFileName +
push edi  +
call ds:LoadLibraryExW  +
mov [ebp+hInst] eax +
cmp eax esi +
jz loc_1001A3F  +
push 7Bh  +
push eax  +
call sub_10022BA  +
mov [ebp+var_14] eax +
cmp eax esi +
jz loc_1001A04  +
lea eax [ebp+pv] +
push eax  +
mov eax [ebp+hMem] +
push dword ptr [eax]  +
mov [ebp+pv] esi +
call sub_1001724  +
test eax eax +
jz loc_10019C5  +
push [ebp+pv]  +
push [ebp+hInst]  +
call ds:GetProcAddress  +
cmp eax esi +
jz loc_100198D  +
mov ecx [ebp+hMem] +
mov ecx [ecx] +
lea edx [ecx+2] +
mov di [ecx] +
inc ecx  +
inc ecx  +
cmp di si +
jnz loc_1001942  +
push [ebp+arg_C]  +
sub ecx edx +
mov edx [ebp+lpCmdLine] +
sar ecx 1 +
lea ecx [edx+ecx*2+2] +
push ecx  +
push ebx  +
push [ebp+hWnd]  +
call eax  +
mov ecx off_1003040 +
cmp ecx offset off_1003040 +
jz loc_10019BA  +
test byte ptr [ecx+1Ch] 10h +
jz loc_10019BA  +
push eax  +
push [ebp+pv]  +
push offset dword_10011C8  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10013F2  +
jmp loc_10019BA  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_10019BA  +
test byte ptr [eax+1Ch] 8 +
jz loc_10019BA  +
push 80070057h  +
push edi  +
push [ebp+pv]  +
push offset dword_10011C8  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001448  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
jmp loc_10019F9  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_10019F9  +
test byte ptr [eax+1Ch] 4 +
jz loc_10019F9  +
call sub_1001365  +
push eax  +
mov eax [ebp+hMem] +
push dword ptr [eax]  +
mov eax off_1003040 +
push offset dword_10011C8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100137F  +
lea eax [ebp+var_14] +
push eax  +
call sub_1002468  +
jmp loc_1001A34  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1001A34  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001A34  +
call sub_1001365  +
push eax  +
mov eax off_1003040 +
push edi  +
push offset dword_10011C8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100137F  +
push [ebp+hInst]  +
call ds:CoFreeLibrary  +
jmp loc_1001AA2  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1001AA2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001AA2  +
call sub_1001365  +
push eax  +
mov eax off_1003040 +
push edi  +
push offset dword_10011C8  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100137F  +
jmp loc_1001AA2  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1001A9A  +
test byte ptr [eax+1Ch] 8 +
jz loc_1001A9A  +
push 80070057h  +
push offset dword_10011C8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
push [ebp+hWnd]  +
call sub_100164B  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1001ADC  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1001ADC  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001ADC  +
call sub_1001365  +
push eax  +
mov eax off_1003040 +
push offset dword_10011C8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
push [ebp+hWnd]  +
call ds:DestroyWindow  +
call sub_100264B  +
call sub_1001606  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1001B25  +
test eax eax +
jnz loc_1001B2A  +
mov ecx [esi] +
test ecx ecx +
jz loc_1001B22  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1001B16  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1003340 +
push offset dword_1003330  +
push dword_100333C  +
mov dword_1003330 eax +
push offset unk_1003320  +
push offset unk_1003324  +
push offset unk_100331C  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100332C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1001BCD  +
cmp eax esi +
jnz loc_1001BC0  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1001BD0  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1001BA7  +
xor esi esi +
inc esi  +
mov eax dword_10036EC +
cmp eax esi +
jnz loc_1001BE3  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1001C12  +
mov eax dword_10036EC +
test eax eax +
jnz loc_1001C0C  +
mov dword_10036EC esi +
push offset dword_1001128  +
push offset dword_100111C  +
call sub_1001B09  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001C12  +
jmp loc_1001D36  +
mov dword_1003338 esi +
mov eax dword_10036EC +
cmp eax esi +
jnz loc_1001C36  +
push offset dword_1001118  +
push offset dword_1001110  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10036EC 2 +
cmp [ebp+var_20] ebx +
jnz loc_1001C43  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10036FC ebx +
jz loc_1001C64  +
push offset dword_10036FC  +
call sub_1001F19  +
pop ecx  +
test eax eax +
jz loc_1001C64  +
push ebx  +
push 2  +
push ebx  +
call dword_10036FC  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1001D36  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1001C89  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1001C9E  +
cmp cx 20h +
ja loc_1001C9E  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1001C89  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1001CAA  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1001CAD  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1003334 eax +
cmp dword_1003328 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1001CDF  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1001C73  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1003334 eax +
xor ebx ebx +
cmp dword_1003328 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1003338 ebx +
jnz loc_1001D21  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1003334 +
jmp loc_1001D42  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1001D5F  +
xor eax eax +
jmp loc_1001DAC  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1001D5B  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1001D99  +
cmp ecx 20Bh +
jnz loc_1001D5B  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1001D5B  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1001DA7  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1001D5B  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1003328 eax +
call sub_10020B2  +
push eax  +
call ds:__set_app_type  +
or dword_10036F4 0FFFFFFFFh +
or dword_10036F8 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1003348 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1003344 +
mov [eax] ecx +
call sub_1002044  +
cmp dword_1003054 0 +
jnz loc_1001E05  +
push offset sub_1002044  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100202C  +
xor eax eax +
retn   +
***
call sub_10020F1  +
jmp ___tmainCRTStartup  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1001E5E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1001E5E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1001E58  +
cmp eax 19930521h +
jz loc_1001E58  +
cmp eax 19930522h +
jz loc_1001E58  +
cmp eax 1994000h +
jnz loc_1001E5E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1001E20+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1001EA6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1001EA2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1001F0D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1001F05  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1001F0F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1001EF5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1001E90  +
pop ecx  +
test eax eax +
jz loc_1001F76  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1001ED0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001F76  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1001F7F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002187  +
push offset dword_1003058  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10020A5  +
cmp ecx 0FFFFFFFFh +
jz loc_10020A5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100209E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100209E  +
cmp edx 10000000h +
jnb loc_100209E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100209E  +
jmp loc_1002099  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10020E7  +
push eax  +
call sub_100204C  +
test eax eax +
jz loc_10020E7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10020DC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10020E7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1003058 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002123  +
test eax ebx +
jz loc_1002123  +
not eax  +
mov dword_100305C eax +
jmp loc_100217E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100216A  +
test dword_1003058 ebx +
jnz loc_100216F  +
mov esi 0BB40E64Fh +
mov dword_1003058 esi +
not esi  +
mov dword_100305C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
cmp ecx dword_1003058 +
jnz loc_1002192  +
retn 0  +
jmp loc_10021A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1003450 eax +
mov dword_100344C ecx +
mov dword_1003448 edx +
mov dword_1003444 ebx +
mov dword_1003440 esi +
mov dword_100343C edi +
mov word_1003468 ss +
mov word_100345C cs +
mov word_1003438 ds +
mov word_1003434 es +
mov word_1003430 fs +
mov word_100342C gs +
pushf   +
pop dword_1003460  +
mov eax [ebp+0] +
mov dword_1003454 eax +
mov eax [ebp+4] +
mov dword_1003458 eax +
lea eax [ebp+8] +
mov dword_1003464 eax +
mov eax [ebp-320h] +
mov dword_10033A0 10001h +
mov eax dword_1003458 +
mov dword_100335C eax +
mov dword_1003350 0C0000409h +
mov dword_1003354 1 +
mov eax dword_1003058 +
mov [ebp-328h] eax +
mov eax dword_100305C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 230h +
mov eax dword_1003058 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push 8  +
mov [ebp+var_210] eax +
call ds:CoTaskMemAlloc  +
mov esi eax +
test esi esi +
jz loc_100242C  +
push edi  +
xor eax eax +
mov edi esi +
stos   +
stos   +
xor eax eax +
push 206h  +
push eax  +
mov [ebp+Filename] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push ebx  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_10023F3  +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_22C] +
stos   +
lea eax [ebp+Filename] +
mov [ebp+var_228] eax +
mov eax [ebp+var_210] +
mov [ebp+var_21C] eax +
lea eax [ebp+var_230] +
push eax  +
mov [ebp+var_230] 20h +
mov [ebp+var_22C] 88h +
mov [ebp+var_214] ebx +
call ds:CreateActCtxW  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10023AB  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1002422  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002422  +
call sub_1001365  +
push eax  +
push offset dword_10012B0  +
push 0Ah  +
jmp loc_1002412  +
lea ecx [esi+4] +
push ecx  +
push eax  +
call ds:ActivateActCtx  +
test eax eax +
jnz loc_100242B  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_10023E9  +
test byte ptr [eax+1Ch] 4 +
jz loc_10023E9  +
call sub_1001365  +
push eax  +
mov eax off_1003040 +
push offset dword_10012B0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
push dword ptr [esi]  +
call ds:ReleaseActCtx  +
jmp loc_1002422  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1002422  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002422  +
call sub_1001365  +
push eax  +
push offset dword_10012B0  +
push 0Ch  +
mov eax off_1003040 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
push esi  +
call ds:CoTaskMemFree  +
xor esi esi +
pop edi  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_1002451  +
test byte ptr [eax+1Ch] 10h +
jz loc_1002451  +
push esi  +
push offset dword_10012B0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002187  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx offset dword_10012B0 +
test esi esi +
jz loc_10024D9  +
mov edi [esi] +
test edi edi +
jz loc_10024D9  +
push dword ptr [edi+4]  +
push 0  +
call ds:DeactivateActCtx  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10024AE  +
push dword ptr [edi]  +
call ds:ReleaseActCtx  +
push dword ptr [esi]  +
call ds:CoTaskMemFree  +
and dword ptr [esi] 0 +
jmp loc_10024D9  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_10024FC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10024DE  +
call sub_1001365  +
push eax  +
mov eax off_1003040 +
push ebx  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
mov eax off_1003040 +
cmp eax offset off_1003040 +
jz loc_10024FC  +
test byte ptr [eax+1Ch] 10h +
jz loc_10024FC  +
push [ebp+var_4]  +
push ebx  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100228E  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseActCtx  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push eax  +
push [ebp+arg_0]  +
call ds:ActivateActCtx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0  +
call ds:DeactivateActCtx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1002564  +
pop ebp  +
jmp loc_100253A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_1003058 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1003060 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
jnz loc_100262B  +
and [ebp+var_22C] 0 +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_228] +
stos   +
pop edi  +
test esi esi +
jnz loc_10025B6  +
push eax  +
call ds:GetModuleHandleW  +
mov esi eax +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push esi  +
call ds:GetModuleFileNameW  +
lea eax [ebp+Filename] +
mov [ebp+var_224] eax +
movzx eax [ebp+arg_4] +
mov [ebp+var_218] eax +
lea eax [ebp+var_22C] +
push eax  +
mov [ebp+var_22C] 20h +
mov [ebp+var_228] 88h +
mov [ebp+var_210] esi +
call ds:CreateActCtxW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100262B  +
push 0FFFFFFFFh  +
push esi  +
push offset dword_1003060  +
call ds:InterlockedCompareExchange  +
cmp eax 0FFFFFFFFh +
jz loc_1002626  +
push esi  +
call sub_100250B  +
call sub_1002763  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp dword_1003060 0FFFFFFFFh +
pop esi  +
setnz al  +
xor ecx ebp +
call sub_1002187  +
leave   +
retn 8  +
***
mov eax dword_1003060 +
cmp eax 0FFFFFFFFh +
jz loc_1002662  +
push eax  +
call sub_100250B  +
or dword_1003060 0FFFFFFFFh +
cmp dword_1003670 0 +
jz locret_1002672  +
or dword_1003670 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
cmp dword_1003060 0FFFFFFFFh +
jnz loc_10026B4  +
mov eax dword_1003670 +
test eax eax +
jz loc_10026C2  +
cmp eax 0FFFFFFFFh +
jnz loc_100269F  +
xor eax eax +
jmp loc_10026C5  +
push dword_100366C  +
push eax  +
call sub_100256D  +
cmp dword_1003060 0FFFFFFFFh +
jz loc_10026C2  +
push esi  +
push dword_1003060  +
call sub_100251C  +
jmp loc_10026C5  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_1002678  +
test eax eax +
jz locret_10026FD  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryW  +
push [ebp+var_4]  +
mov esi eax +
call sub_1002553  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_1002678  +
test eax eax +
jz locret_100275A  +
push esi  +
call sub_1002763  +
push [ebp+lpParam]  +
push [ebp+hInstance]  +
push [ebp+hMenu]  +
push [ebp+hWndParent]  +
push [ebp+nHeight]  +
push [ebp+nWidth]  +
push [ebp+Y]  +
push [ebp+X]  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push [ebp+lpClassName]  +
push [ebp+dwExStyle]  +
call ds:CreateWindowExW  +
push [ebp+var_4]  +
mov esi eax +
call sub_1002553  +
mov eax esi +
pop esi  +
leave   +
retn 30h  +
***
mov eax dword_100368C +
test eax eax +
jnz loc_1002793  +
push esi  +
mov esi offset aComctl32_dll +
push esi  +
call sub_10026CF  +
mov dword_100368C eax +
test eax eax +
jnz loc_1002792  +
call sub_100264B  +
push esi  +
call ds:LoadLibraryW  +
mov dword_100368C eax +
pop esi  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756E759Fh  +
***
