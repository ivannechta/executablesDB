mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1001BFC  +
dec eax  +
jz loc_1001BF3  +
push 57h  +
pop eax  +
jmp loc_1001C6A  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1001C22  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1001C4B  +
cmp dword ptr [esi+10h] 0 +
jz loc_1001C4B  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1001C68  +
test cl 2 +
jz loc_1001C59  +
mov esi [esi+10h] +
test esi esi +
jz loc_1001C59  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1007000 +
push edi  +
mov edi offset dword_10072D0 +
jmp loc_1001CB5  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1001BCD  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1001C8C  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1007000 +
push edi  +
mov edi offset off_1007000 +
cmp esi edi +
jz loc_1001D01  +
jmp loc_1001CF7  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1001CF5  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1001CD9  +
mov off_1007000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1001D3A  +
cmp word ptr [edx] 0 +
jnz loc_1001D1F  +
push 0Eh  +
jmp loc_1001D3C  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001D25  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1001D3D  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1001D4E  +
cmp word ptr [edx] 0 +
jnz loc_1001D53  +
mov edx offset aNull +
jmp loc_1001D53  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1001DA7  +
cmp word ptr [edx] 0 +
jnz loc_1001D8C  +
push 0Eh  +
jmp loc_1001DA9  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001D92  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1001DAA  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1001DBB  +
cmp word ptr [edx] 0 +
jnz loc_1001DC0  +
mov edx offset aNull +
jmp loc_1001DC0  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi] eax +
mov [esi+4] ecx +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1001E21  +
test byte ptr [eax+1Ch] 40h +
jz loc_1001E21  +
push ecx  +
push offset dword_1001250  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D09  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov ebx offset off_1007000 +
mov edi offset dword_1001250 +
test eax eax +
jz loc_1001E6B  +
mov ecx [eax] +
test ecx ecx +
jge loc_1001E6B  +
mov eax off_1007000 +
cmp eax ebx +
jz loc_1001E8B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001E70  +
push ecx  +
push dword ptr [esi+4]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D76  +
mov eax off_1007000 +
cmp eax ebx +
jz loc_1001E8B  +
test byte ptr [eax+1Ch] 40h +
jz loc_1001E8B  +
push dword ptr [esi+4]  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D09  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+var_14] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_1001EDF  +
mov [ebp+pSid] ebx +
cmp [ebp+pSid] ebx +
jz loc_1001F0D  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
push [ebp+pSid]  +
mov esi eax +
call ds:FreeSid  +
cmp esi ebx +
pop esi  +
jz loc_1001F0D  +
cmp [ebp+var_14] ebx +
jz loc_1001F0D  +
xor eax eax +
inc eax  +
jmp loc_1001F0F  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100223D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
push esi  +
mov esi offset unk_10072B0 +
push esi  +
call sub_1001BA5  +
push offset aMicrosoftEoa  +
mov dword_10072D0 offset dword_1001260 +
mov off_1007000 esi +
call sub_1001C76  +
call sub_1001E94  +
push eax  +
lea ecx [ebp+var_6C] +
call sub_10029C7  +
lea ecx [ebp+var_6C] +
call sub_1005DF2  +
mov ecx eax +
call sub_1005229  +
call sub_1001CC4  +
lea ecx [ebp+var_6C] +
call sub_10029ED  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1001FAB  +
test eax eax +
jnz loc_1001FB0  +
mov ecx [esi] +
test ecx ecx +
jz loc_1001FA8  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1001F9C  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10072FC +
push offset dword_10072EC  +
push dword_10072F8  +
mov dword_10072EC eax +
push offset dword_10072DC  +
push offset dword_10072E0  +
push offset dword_10072D8  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10072E8 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1002038  +
cmp eax esi +
jnz loc_100202B  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100203B  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002012  +
xor esi esi +
inc esi  +
mov eax dword_10076F4 +
cmp eax esi +
jnz loc_100204E  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1002089  +
mov eax dword_10076F4 +
test eax eax +
jnz loc_1002083  +
mov dword_10076F4 esi +
push offset dword_10011BC  +
push offset dword_10011B0  +
call sub_1001F8F  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002089  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1002153  +
mov dword_10072F4 esi +
mov eax dword_10076F4 +
cmp eax esi +
jnz loc_10020AD  +
push offset dword_10011AC  +
push offset dword_1001194  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10076F4 2 +
cmp [ebp+var_1C] ebx +
jnz loc_10020BA  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10076FC ebx +
jz loc_10020DB  +
push offset dword_10076FC  +
call sub_1002349  +
pop ecx  +
test eax eax +
jz loc_10020DB  +
push ebx  +
push 2  +
push ebx  +
call dword_10076FC  +
push dword_10072DC  +
push dword_10072E0  +
push dword_10072D8  +
call sub_1001F21  +
add esp 0Ch +
mov dword_10072F0 eax +
cmp dword_10072E4 ebx +
jnz loc_1002139  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_10072F0 eax +
xor ebx ebx +
cmp dword_10072E4 ebx +
jnz loc_1002139  +
push eax  +
call ds:_exit  +
cmp dword_10072F4 ebx +
jnz loc_1002147  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10072F0 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1002170  +
xor eax eax +
jmp loc_10021BD  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100216C  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10021AA  +
cmp ecx 20Bh +
jnz loc_100216C  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100216C  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_10021B8  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100216C  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_10072E4 eax +
call sub_1002588  +
push eax  +
call ds:__set_app_type  +
or dword_10076EC 0FFFFFFFFh +
or dword_10076F0 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1007304 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1007300 +
mov [eax] ecx +
call sub_1002474  +
cmp dword_1007014 0 +
jnz loc_1002216  +
push offset sub_1002474  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100245C  +
xor eax eax +
retn   +
***
call sub_10025C7  +
jmp sub_1001FF0  +
***
cmp ecx dword_1007004 +
jnz loc_1002248  +
retn 0  +
jmp loc_100265D  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100228F  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100228F  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1002289  +
cmp eax 19930521h +
jz loc_1002289  +
cmp eax 19930522h +
jz loc_1002289  +
cmp eax 1994000h +
jnz loc_100228F  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1002250+2)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10022D6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10022D2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100233D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002335  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100233F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002325  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10022C0  +
pop ecx  +
test eax eax +
jz loc_10023A6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002300  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10023A6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10023AF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100223D  +
push offset dword_1007004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_100247C  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100257B  +
cmp ecx 0FFFFFFFFh +
jz loc_100257B  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1002574  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1002574  +
cmp edx 10000000h +
jnb loc_1002574  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1002574  +
jmp loc_100256F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10025BD  +
push eax  +
call sub_1002522  +
test eax eax +
jz loc_10025BD  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10025B2  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10025BD  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1007004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10025F9  +
test eax ebx +
jz loc_10025F9  +
not eax  +
mov dword_1007008 eax +
jmp loc_1002654  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1002640  +
test dword_1007004 ebx +
jnz loc_1002645  +
mov esi 0BB40E64Fh +
mov dword_1007004 esi +
not esi  +
mov dword_1007008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1007408 eax +
mov dword_1007404 ecx +
mov dword_1007400 edx +
mov dword_10073FC ebx +
mov dword_10073F8 esi +
mov dword_10073F4 edi +
mov word_1007420 ss +
mov word_1007414 cs +
mov word_10073F0 ds +
mov word_10073EC es +
mov word_10073E8 fs +
mov word_10073E4 gs +
pushf   +
pop dword_1007418  +
mov eax [ebp+0] +
mov dword_100740C eax +
mov eax [ebp+4] +
mov dword_1007410 eax +
lea eax [ebp+8] +
mov dword_100741C eax +
mov eax [ebp-320h] +
mov dword_1007358 10001h +
mov eax dword_1007410 +
mov dword_1007314 eax +
mov dword_1007308 0C0000409h +
mov dword_100730C 1 +
mov eax dword_1007004 +
mov [ebp-328h] eax +
mov eax dword_1007008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_1002773  +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_10027D0  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1002809  +
mov ecx esi +
call sub_10027B9  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_100282B  +
push 80004005h  +
call loc_1002791  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test ecx ecx +
jz locret_100286C  +
push esi  +
mov esi [ecx] +
push ecx  +
call ds:__imp_free  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_100285B  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100537D  +
test [ebp+arg_0] 1 +
jz loc_100288C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jnz loc_10028B0  +
push 80004005h  +
call loc_1002791  +
mov edx [eax] +
mov [ecx] edx +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_10028DC  +
mov eax [esi] +
cmp eax edi +
jz loc_10028FB  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_1002A78  +
cmp [esi+8] edi +
ja loc_10028CA  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_10028F8  +
call sub_1002856  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1002791  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005DA1  +
test eax eax +
jl loc_1002953  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005E21  +
test eax eax +
jl loc_1002953  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_1002953  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
jmp locret_1002955  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_10029A1  +
push 0Ch  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_100290B  +
test eax eax +
jnz loc_1002985  +
push 8007000Eh  +
call loc_1002791  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-8] +
jmp loc_100299E  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 0Ch +
dec ecx  +
jns loc_1002993  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 1  +
mov esi ecx +
call sub_10037F6  +
push 0Ah  +
lea ecx [esi+54h] +
call sub_1003699  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10037F6  +
push 0Ah  +
lea ecx [esi+54h] +
call sub_1003699  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+5Ch] 0 +
jz loc_1002A28  +
push esi  +
lea esi [edi+54h] +
mov eax [esi] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1002A27  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1002898  +
mov ecx [eax] +
test ecx ecx +
jz loc_1002A21  +
push 1  +
call sub_1002872  +
cmp [ebp+var_4] 0 +
jnz loc_1002A09  +
pop esi  +
lea ecx [edi+54h] +
call loc_10028C0  +
mov ecx edi +
call sub_1003833  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100295E  +
mov eax [esi+10h] +
mov ecx [eax] +
test eax eax +
jz loc_1002A5D  +
mov edx [ebp+arg_0] +
mov edx [edx] +
mov [eax+8] edx +
mov [esi+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
inc dword ptr [esi+8]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_0] +
mov [eax] edx +
dec dword ptr [ecx+8]  +
mov [ecx+10h] eax +
jnz loc_1002A92  +
call loc_10028C0  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1002A3F  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1002ABB  +
mov [ecx] eax +
jmp loc_1002ABD  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20019h  +
xor esi esi +
push offset SubKey  +
mov [ebp+var_90] ecx +
push 80000002h  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] esi +
mov [ebp+var_98] esi +
mov [ebp+var_94] esi +
call sub_10027D7  +
test eax eax +
jnz loc_1002BB7  +
push ebx  +
push edi  +
mov edi ds:RegEnumKeyExW +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbName] 40h +
mov [ebp+dwIndex] esi +
call edi  +
mov ebx 103h +
jmp loc_1002BB1  +
lea eax [ebp+Name] +
push eax  +
call sub_10055B7  +
mov [ebp+var_A0] eax +
cmp eax esi +
jz loc_1002B81  +
mov ecx [ebp+var_90] +
lea eax [ebp+var_A0] +
push eax  +
add ecx 54h +
call sub_1002A9B  +
inc [ebp+dwIndex]  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbName] 40h +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jnz loc_1002B56  +
pop edi  +
pop ebx  +
lea ecx [ebp+hKey] +
call sub_10027B9  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_90] +
xor ecx ebp +
add eax 54h +
pop esi  +
call sub_100223D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1002C45  +
cmp eax 0Ch +
jz loc_1002C3E  +
cmp eax 16h +
jz loc_1002C37  +
cmp eax 22h +
jz loc_1002C37  +
cmp eax 50h +
jz loc_1002C45  +
push 80004005h  +
call loc_1002791  +
push 80070057h  +
jmp loc_1002C32  +
push 8007000Eh  +
jmp loc_1002C32  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003546  +
add esp 10h +
push eax  +
call sub_1002C0D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_1002CCD  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_1002CBF  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_1002CBB  +
cmp esi eax +
jnb loc_1002CBF  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_1002CAD  +
cmp esi eax +
jb loc_1002CC3  +
xor eax eax +
jmp loc_1002CCC  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_1002D01  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_1002C74  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_1002D38  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_1002C74  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_1007624 +
push 0  +
mov ecx esi +
call sub_1005B23  +
xor ebx ebx +
inc ebx  +
jmp loc_1002D75  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_1002D0A  +
test eax eax +
jnz loc_1002D82  +
push ebx  +
mov ecx esi +
call sub_1005B23  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_1002D5C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_1002D7B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1002DC6  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1002DD6  +
mov ecx esi +
call sub_10027B9  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz locret_1002E16  +
mov eax [ebp+lpData] +
sub eax 4 +
neg eax  +
sbb eax eax +
and eax 0Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+Type] +
mov eax [esi] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+lpData] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1002E8A  +
cmp [ebp+Type] 1 +
jz loc_1002E62  +
cmp [ebp+Type] 2 +
jz loc_1002E62  +
push 0Dh  +
pop eax  +
jmp loc_1002E8A  +
mov eax [ebp+cbData] +
test edi edi +
jz loc_1002E84  +
test eax eax +
jz loc_1002E7F  +
test al 1 +
jnz loc_1002E5D  +
mov ecx eax +
shr ecx 1 +
cmp word ptr [edi+ecx*2-2] 0 +
jz loc_1002E84  +
jmp loc_1002E5D  +
xor ecx ecx +
mov [edi] cx +
shr eax 1 +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1002ED2  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1002EDD  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_1002EFF  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1002F36  +
test dx dx +
jz loc_1002F32  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1002F36  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1002F10  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push eax  +
push 3  +
call ds:MultiByteToWideChar  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 3  +
call ds:MultiByteToWideChar  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_1002FA5  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1002F96  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002C4E  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1002FD9  +
cmp [esi] ax +
jz loc_1002FD5  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1002FCB  +
test edx edx +
jnz loc_1002FDE  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1002FEF  +
test eax eax +
jl loc_1002FEC  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_1003008  +
cmp edx [ebp+arg_4] +
jbe loc_100300D  +
mov eax 80070057h +
test eax eax +
jl loc_100301B  +
mov eax [ebp+arg_0] +
call sub_1002FBE  +
jmp loc_100301E  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100305D  +
cmp [ebp+arg_4] eax +
jz loc_1003059  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1003059  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100303C  +
test esi esi +
jnz loc_1003065  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003073  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C4h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:GetKeyState +
push edi  +
push 0A2h  +
call esi  +
mov edi 8000h +
xor ebx ebx +
mov ecx edi +
inc ebx  +
test ax cx +
jz loc_10030B0  +
mov [ebp+var_4] ebx +
push 0A3h  +
call esi  +
push 2  +
test ax di +
pop edi  +
jz loc_10030C2  +
or [ebp+var_4] edi +
push 0A4h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_10030D7  +
or [ebp+var_4] 4 +
push 0A5h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_10030EC  +
or [ebp+var_4] 8 +
push 0A0h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_1003101  +
or [ebp+var_4] 10h +
push 0A1h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_1003116  +
or [ebp+var_4] 20h +
and [ebp+pInputs.type] 0 +
push 1BCh  +
lea eax [ebp+pInputs.anonymous_0] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
test byte ptr [ebp+var_4] bl +
jz loc_1003154  +
mov eax 0A2h +
mov word ptr [ebp+pInputs.anonymous_0] ax +
mov [ebp+pInputs.type] ebx +
mov dword ptr [ebp+pInputs.anonymous_0+4] edi +
mov eax ebx +
test byte ptr [ebp+var_4] 2 +
push 3  +
pop esi  +
jz loc_1003178  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A3h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 4 +
jz loc_1003199  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A4h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 8 +
jz loc_10031BA  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A5h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 10h +
jz loc_10031DB  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A0h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 20h +
jz loc_10031FC  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A1h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 5Bh  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 55h  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov [ecx+4] dx +
mov [ecx] ebx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
push 5Bh  +
lea ecx [ebp+ecx+pInputs] +
pop edx  +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
push 1Ch  +
lea ecx [ebp+pInputs] +
push ecx  +
inc eax  +
push eax  +
call ds:SendInput  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100328D  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_1003292  +
mov ecx offset aNull_1 +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
xor esi esi +
mov [ebp+var_14] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_1003347  +
mov [ebp+pSid] ebx +
cmp [ebp+pSid] ebx +
jz loc_1003365  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
push [ebp+pSid]  +
mov esi eax +
call ds:FreeSid  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100339A  +
test byte ptr [eax+1Ch] 10h +
jz loc_100339A  +
cmp esi ebx +
jz loc_1003385  +
cmp [ebp+var_14] ebx +
jz loc_1003385  +
xor ecx ecx +
inc ecx  +
jmp loc_1003387  +
xor ecx ecx +
push ecx  +
push offset dword_10013A4  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
cmp esi ebx +
jz loc_10033A8  +
cmp [ebp+var_14] ebx +
jz loc_10033A8  +
xor eax eax +
inc eax  +
jmp loc_10033AA  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100223D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsProcessInJob  +
mov edi eax +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003413  +
test byte ptr [eax+1Ch] 10h +
jz loc_1003413  +
cmp [ebp+var_4] 0 +
jz loc_10033FE  +
test edi edi +
jz loc_10033FE  +
xor ecx ecx +
inc ecx  +
jmp loc_1003400  +
xor ecx ecx +
push ecx  +
push offset dword_10013A4  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
cmp [ebp+var_4] 0 +
jz loc_1003422  +
test edi edi +
jz loc_1003422  +
xor eax eax +
inc eax  +
jmp loc_1003424  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+Type] +
push esi  +
push edi  +
test ebx ebx +
jbe loc_10034E9  +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push 20019h  +
push offset aSoftwareMicros  +
xor eax eax +
push 80000001h  +
mov [edi] ax +
call sub_10027D7  +
mov esi eax +
test esi esi +
jz loc_10034A2  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_100348E  +
test byte ptr [eax+1Ch] 8 +
jz loc_100348E  +
push esi  +
push offset dword_10013A4  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
test esi esi +
jle loc_100349E  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
jmp loc_10034F3  +
mov ecx [ebp+arg_8] +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset aConfiguration  +
mov [ebp+Type] ebx +
call sub_1002E1F  +
test eax eax +
jz loc_10034F0  +
mov ecx off_1007000 +
cmp ecx offset off_1007000 +
jz loc_10034E2  +
test byte ptr [ecx+1Ch] 8 +
jz loc_10034E2  +
push eax  +
push offset dword_10013A4  +
push 1Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10032CD  +
xor eax eax +
mov [edi] ax +
jmp loc_10034F0  +
mov [ebp+var_4] 80070057h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100350D  +
pop ebp  +
retn   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003510  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002BDD  +
mov [esi] eax +
test eax eax +
setnz al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
push 8007000Eh  +
call loc_1002791  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10035C4  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_10035C4  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_1002791  +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_1002D41  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_1003621  +
call loc_1003592  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_100362A  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_1003546  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_1002EE6  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_1003685  +
test edx edx +
jle loc_1003685  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_100368A  +
call loc_1003592  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_10036DB  +
mov eax [esi] +
cmp eax edi +
jz loc_10036FA  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_10041BD  +
cmp [esi+8] edi +
ja loc_10036C9  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_10036F7  +
call sub_1002856  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1002791  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov edx 7FFFFFFFh +
sub edx eax +
cmp edx ecx +
jge loc_1003727  +
mov eax 80070057h +
jmp loc_1003730  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1003750  +
cmp edx 7FFFFFFFh +
jbe loc_1003755  +
mov eax 80070057h +
test eax eax +
jl loc_100376B  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1003028  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi 7FFFFFFFh +
push edi  +
shr esi 1 +
push ebx  +
lea eax [ebp+arg_4] +
mov edx esi +
call sub_1002FF5  +
test eax eax +
jl loc_10037AE  +
mov eax [ebp+arg_4] +
push edi  +
mov edx esi +
sub edx eax +
lea ecx [ebx+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1003028  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_10037DC  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_10037DC  +
call sub_1002FBE  +
jmp loc_10037E1  +
mov eax 80070057h +
test eax eax +
jge loc_10037EC  +
test edi edi +
jz loc_10037EC  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0Ah  +
mov esi ecx +
call sub_1003699  +
push 0Ah  +
lea ecx [esi+18h] +
call sub_1003699  +
push 0Ah  +
lea ecx [esi+30h] +
call sub_1003699  +
mov eax [ebp+arg_0] +
and dword ptr [esi+48h] 0 +
and dword ptr [esi+50h] 0 +
mov [esi+4Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+30h] +
call loc_10036BF  +
lea ecx [esi+18h] +
call loc_10036BF  +
mov ecx esi +
pop esi  +
jmp loc_10036BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
call WinSqmIsOptedIn  +
test eax eax +
jz locret_10038A3  +
mov ecx [ebp+arg_0] +
push esi  +
call sub_1005362  +
mov esi [eax] +
test esi esi +
jz loc_10038A2  +
push 5Ch  +
push esi  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003886  +
lea esi [eax+2] +
push esi  +
lea eax [ebp+var_8] +
push eax  +
call sub_1003279  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push 107Dh  +
push 0  +
call WinSqmAddToStream  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 2  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_1005DA1  +
test eax eax +
jge loc_10038CF  +
xor al al +
jmp loc_10038D9  +
push [ebp+var_4]  +
mov ecx esi +
call sub_1003525  +
pop esi  +
leave   +
retn 4  +
***
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_10038F3  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
jmp loc_10038F5  +
xor eax eax +
test eax eax +
jnz locret_1003906  +
mov ecx offset dword_1007698 +
mov eax dword_1007698 +
jmp dword ptr [eax+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1003921  +
push 80004005h  +
call loc_1002791  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call sub_1002F05  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx [ebp+arg_0] +
call sub_100390C  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1003970  +
push 80004005h  +
call loc_1002791  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_10039AE  +
cmp eax [esi] +
jnz loc_10039AE  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_10039E0  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_10039C4  +
call loc_1003592  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_1003546  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jnz loc_1003A05  +
push 80004005h  +
call loc_1002791  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jnz loc_1003A19  +
test edi edi +
jz loc_1003A19  +
push 80070057h  +
jmp loc_1003A00  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_1003A29  +
call loc_1003592  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call loc_10035A2  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_1003546  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_1003A86  +
cmp [ecx+0Ch] eax +
jge loc_1003A75  +
push eax  +
mov ecx esi +
call loc_10035A2  +
jmp loc_1003A86  +
call sub_1002EE6  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_1003AA5  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_1003AB3  +
push esi  +
call sub_10035EC  +
jmp loc_1003AD7  +
mov eax [eax+8] +
cmp eax esi +
jge loc_1003AD7  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_1003AC9  +
add edx eax +
jmp loc_1003ACB  +
add edx edx +
cmp edx esi +
jge loc_1003AD1  +
mov edx esi +
push edx  +
call sub_100365B  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
test eax eax +
jnz loc_1003AF2  +
mov esi [ecx] +
jmp loc_1003B09  +
mov esi [eax] +
jmp loc_1003B09  +
push [ebp+arg_0]  +
push dword ptr [esi+8]  +
call sub_1002F05  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003B14  +
mov esi [esi] +
test esi esi +
jnz loc_1003AF6  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax esi +
jmp loc_1003B0F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_100370A  +
test eax eax +
jge loc_1003B3B  +
push eax  +
call loc_1002791  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push offset dword_1007698  +
mov esi ecx +
call sub_1003957  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100390C  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100390C  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003957  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_1003986  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10039EB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_1003C29  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1003A8E  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
xor ebx ebx +
push offset aStartlistCreat  +
lea ecx [ebp+var_10] +
mov [ebp+var_8] ebx +
call sub_1001DE9  +
mov esi [ebp+lpDst] +
cmp esi ebx +
jz loc_1003D98  +
cmp [esi] bx +
jz loc_1003D98  +
lea eax [ebp+nSize] +
push eax  +
push 7FFFFFFFh  +
push esi  +
mov [ebp+nSize] ebx +
call sub_10037BA  +
test eax eax +
jl loc_1003D73  +
lea eax [ebp+nSize] +
push eax  +
push 104h  +
push [ebp+nSize]  +
call sub_1002EB8  +
test eax eax +
jl loc_1003D73  +
push [ebp+nSize]  +
lea ecx [ebp+lpDst] +
mov [ebp+lpDst] ebx +
call sub_10038AC  +
test al al +
jnz loc_1003CC1  +
push [ebp+lpDst]  +
call sub_1002BF5  +
mov esi 8007000Eh +
jmp loc_1003D78  +
push [ebp+nSize]  +
mov edi [ebp+lpDst] +
push edi  +
push esi  +
call ds:ExpandEnvironmentStringsW  +
mov esi eax +
cmp esi ebx +
jnz loc_1003CF6  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1003CE9  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push edi  +
call sub_1002BF5  +
jmp loc_1003D78  +
cmp esi [ebp+nSize] +
jbe loc_1003D08  +
push edi  +
call sub_1002BF5  +
mov esi 8007007Ah +
jmp loc_1003D78  +
push [ebp+nShowCmd]  +
push ebx  +
push [ebp+lpParameters]  +
push edi  +
push ebx  +
push ebx  +
call ds:ShellExecuteW  +
mov edi eax +
cmp edi 20h +
jg loc_1003D84  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1003D47  +
test byte ptr [eax+1Ch] 8 +
jz loc_1003D47  +
push edi  +
push [ebp+lpDst]  +
push offset dword_10013A4  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D76  +
cmp edi 2 +
jl loc_1003D6B  +
cmp edi 3 +
jle loc_1003D56  +
cmp edi 0Bh +
jnz loc_1003D6B  +
cmp esi ebx +
jle loc_1003D66  +
and esi 0FFFFh +
or esi 80070000h +
push [ebp+lpDst]  +
jmp loc_1003CEC  +
push [ebp+lpDst]  +
call sub_1002BF5  +
mov esi 80004005h +
lea ecx [ebp+var_10] +
call sub_1001E2D  +
mov eax esi +
jmp loc_1003DA5  +
push [ebp+lpDst]  +
call sub_1002BF5  +
lea ecx [ebp+var_10] +
call sub_1001E2D  +
xor eax eax +
jmp loc_1003DA5  +
lea ecx [ebp+var_10] +
call sub_1001E2D  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
push 2001Fh  +
xor eax eax +
push offset aSoftwareMicr_2  +
mov [ecx] ax +
mov ecx [ebp+arg_8] +
push 80000001h  +
call sub_10027D7  +
test eax eax +
jnz loc_1003EBA  +
lea ecx [ebp+var_7C] +
call sub_10029A8  +
lea ecx [ebp+var_7C] +
call sub_1002ACA  +
mov [ebp+var_C] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1003EB2  +
push esi  +
mov ecx [ebp+var_C] +
lea eax [ebp+var_8] +
push eax  +
call sub_1002898  +
mov esi [eax] +
push offset aSystemsetting  +
mov ecx esi +
call sub_1005374  +
push eax  +
call sub_1003B7D  +
test al al +
jz loc_1003EA7  +
mov ecx esi +
call sub_1005DF2  +
mov eax [eax] +
lea ecx [ebp+Data] +
push ecx  +
mov ecx [ebp+arg_8] +
push eax  +
call sub_1002DE0  +
test eax eax +
jnz loc_1003EA7  +
test [ebp+Data] 2 +
jz loc_1003E67  +
and dword ptr [ebp+Data] 0FFFFFFFDh +
mov ecx esi +
mov dword ptr [edi+50h] 1 +
call sub_1005DF2  +
push dword ptr [ebp+Data]  +
mov ecx [ebp+arg_8] +
push dword ptr [eax]  +
call sub_1002E95  +
test [ebp+Data] 1 +
jz loc_1003EA7  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003E73  +
sub eax edx +
sar eax 1 +
jz loc_1003E93  +
push offset asc_10013EC  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003774  +
mov ecx esi +
call sub_1005DF2  +
push dword ptr [eax]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003774  +
cmp [ebp+var_8] 0 +
jnz loc_1003E04  +
pop esi  +
lea ecx [ebp+var_7C] +
call sub_10029ED  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003BB8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jge loc_1003EF4  +
and [ebp+arg_4] 0 +
mov esi [ebp+arg_8] +
test esi esi +
jge loc_1003EFD  +
xor esi esi +
mov eax [ebx] +
mov edi [eax-0Ch] +
push esi  +
push [ebp+arg_4]  +
call sub_1003B1D  +
cmp eax edi +
jle loc_1003F17  +
mov eax [ebx] +
mov esi [eax-0Ch] +
sub esi [ebp+arg_4] +
mov edi [ebx] +
mov eax [edi-0Ch] +
cmp [ebp+arg_4] eax +
jle loc_1003F23  +
xor esi esi +
cmp [ebp+arg_4] 0 +
jnz loc_1003F38  +
cmp esi eax +
jnz loc_1003F38  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1003EC4  +
jmp loc_1003F50  +
mov ecx ebx +
call sub_10038E3  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push esi  +
lea eax [edi+eax*2] +
push eax  +
call sub_1003BE0  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_1003F74  +
call sub_1003A52  +
jmp loc_1003FC9  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1003F86  +
push 80070057h  +
call loc_1002791  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_1003C02  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_1003FAF  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_100356C  +
jmp loc_1003FBB  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_1003546  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_10035A2  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_1002CD6  +
mov esi eax +
test esi esi +
jz loc_1004017  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_1003C02  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_1002F83  +
add esp 10h +
push edi  +
mov ecx ebx +
call loc_10035A2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
sub ecx 10h +
call sub_1002EE6  +
test [ebp+arg_0] 1 +
jz loc_1004042  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_1004098  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_100408D  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_100408D  +
push ebx  +
push ecx  +
call sub_1003986  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_1002EE6  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_1004098  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_1003F5F  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_1003C02  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_10040D4  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_1003546  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call loc_10035A2  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_1004119  +
push [ebp+lpMultiByteStr]  +
call sub_1002F42  +
pop ecx  +
mov esi eax +
jmp loc_100411B  +
xor esi esi +
mov ecx edi +
test esi esi +
jle loc_1004140  +
push esi  +
call sub_1003C02  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push esi  +
push eax  +
call sub_1002F61  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_10035A2  +
jmp loc_1004145  +
call sub_1003A52  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10035D4  +
test eax eax +
jz loc_1004171  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_1003FD3  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
push eax  +
call sub_10040A5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10034FF  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1003F5F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_1004022  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_10041E6  +
mov ecx esi +
call loc_10036BF  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10034FF  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10040A5  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1004238  +
test [ebp+arg_0] 0FFFF0000h +
jnz loc_1004238  +
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_1004152  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1004197  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100417B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1004241  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100425D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1003957  +
push [ebp+lpMultiByteStr]  +
mov ecx esi +
call sub_1004217  +
test al al +
jnz loc_10042D9  +
push [ebp+lpMultiByteStr]  +
mov ecx esi +
call sub_10040FD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1003957  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004217  +
test al al +
jnz loc_100430D  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004279  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset dword_1001490  +
mov ecx esi +
call sub_1004197  +
mov edi [ebp+arg_4] +
mov eax [edi] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1004368  +
mov eax [esi] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_100434F  +
push offset asc_10013EC  +
mov ecx esi +
call sub_10041F1  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_1002898  +
push eax  +
mov ecx esi +
call sub_1004295  +
cmp [ebp+arg_0] 0 +
jnz loc_100433B  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset dword_1007698  +
mov esi ecx +
call sub_1003957  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004217  +
test al al +
jnz loc_100439D  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004279  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov ebx ecx +
mov ecx [esi] +
push edi  +
test ecx ecx +
jge loc_10043C7  +
push 80070057h  +
call loc_1002791  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1004420  +
cmp word ptr [edx] 0 +
jz loc_1004420  +
mov eax [ebx] +
lea edi [eax+ecx*2] +
mov ecx [eax-0Ch] +
lea eax [eax+ecx*2] +
mov [ebp+arg_8] eax +
cmp edi eax +
jnb loc_100443F  +
push edx  +
push edi  +
call ds:wcsspn  +
lea edi [edi+eax*2] +
pop ecx  +
pop ecx  +
mov [ebp+var_4] eax +
cmp edi [ebp+arg_8] +
jnb loc_100443F  +
push [ebp+arg_4]  +
push edi  +
call ds:wcscspn  +
pop ecx  +
pop ecx  +
mov ecx [esi] +
add ecx [ebp+var_4] +
push eax  +
push ecx  +
push [ebp+arg_0]  +
lea edx [ecx+eax+1] +
mov ecx ebx +
mov [esi] edx +
call sub_1003EE0  +
jmp loc_1004452  +
mov edi [ebx] +
cmp ecx [edi-0Ch] +
jge loc_100443F  +
mov ecx ebx +
call sub_10038E3  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [esi] +
lea eax [edi+eax*2] +
push eax  +
call sub_10042E5  +
jmp loc_1004452  +
or dword ptr [esi] 0FFFFFFFFh +
mov ecx ebx +
call sub_10038E3  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_1003B9C  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_10038E3  +
push eax  +
push [ebp+lpMultiByteStr]  +
lea ecx [ebp+lpMultiByteStr] +
call sub_10042B1  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
push [ebp+arg_0]  +
call sub_1003936  +
mov ecx [ebp+lpMultiByteStr] +
add ecx 0FFFFFFF0h +
mov bl al +
call sub_1002EE6  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_1004373  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_20] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_20] +
push eax  +
call ds:GetCurrentProcessId  +
push eax  +
call ds:ProcessIdToSessionId  +
push offset aSoftwareMicr_3  +
mov ecx esi +
call sub_1004373  +
push 0Ah  +
push 0Ch  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_20]  +
call _ltow_s  +
add esp 10h +
lea eax [ebp+var_1C] +
push eax  +
mov ecx esi +
call sub_10041F1  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100223D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1018h +
call __alloca_probe  +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor eax eax +
mov esi 7FEh +
push esi  +
mov word ptr [ebp+Data] ax +
lea eax [ebp-1002h] +
push ebx  +
push eax  +
mov [ebp+lpSubKey] ecx +
mov [ebp+var_1018] ebx +
mov [ebp+var_1014] ebx +
mov [ebp+var_1010] ebx +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_804] ax +
lea eax [ebp+var_804+2] +
push ebx  +
push eax  +
call memset  +
add esp 18h +
mov esi 20019h +
push esi  +
push offset aSoftwareMicros  +
push 80000001h  +
lea ecx [ebp+var_1018] +
call sub_10027D7  +
mov edi offset ValueName +
test eax eax +
jnz loc_10045EB  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
lea ecx [ebp+var_1018] +
mov [ebp+Type] 400h +
call sub_1002E1F  +
test eax eax +
jz loc_10045EB  +
xor eax eax +
mov word ptr [ebp+Data] ax +
mov ecx [ebp+lpSubKey] +
lea eax [ebp+lpSubKey] +
push eax  +
call sub_10044BF  +
push esi  +
mov esi [ebp+lpSubKey] +
push esi  +
push 80000002h  +
lea ecx [ebp+var_1018] +
call sub_10027D7  +
test eax eax +
jnz loc_100464A  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
push edi  +
lea ecx [ebp+var_1018] +
mov [ebp+Type] 400h +
call sub_1002E1F  +
test eax eax +
jz loc_100464A  +
xor eax eax +
mov word ptr [ebp+var_804] ax +
lea ecx [ebp+var_804] +
lea eax [ebp+Data] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100467C  +
cmp dx bx +
jz loc_1004678  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100467C  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_1004656  +
xor eax eax +
jmp loc_1004681  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_100468A  +
call sub_100307F  +
lea ecx [esi-10h] +
call sub_1002EE6  +
lea ecx [ebp+var_1018] +
call sub_10027B9  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100223D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+Type] +
xor eax eax +
mov [esi] ax +
push edi  +
lea eax [ebp+Type] +
push eax  +
call sub_10044BF  +
mov eax [eax] +
mov ecx [ebp+arg_8] +
push 2001Fh  +
push eax  +
push 80000002h  +
call sub_10027D7  +
mov ecx [ebp+Type] +
add ecx 0FFFFFFF0h +
mov edi eax +
call sub_1002EE6  +
mov ebx offset dword_10013A4 +
test edi edi +
jz loc_1004716  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004716  +
test byte ptr [eax+1Ch] 8 +
jz loc_1004716  +
push edi  +
push ebx  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ebp+Type] eax +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset aConfiguration  +
call sub_1002E1F  +
test eax eax +
jz loc_100475A  +
mov ecx off_1007000 +
cmp ecx offset off_1007000 +
jz loc_1004755  +
test byte ptr [ecx+1Ch] 8 +
jz loc_1004755  +
push eax  +
push ebx  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10032CD  +
xor eax eax +
mov [esi] ax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpData] ecx +
mov [ebp+Type] edi +
mov eax off_1007000 +
mov esi offset off_1007000 +
cmp eax esi +
jz loc_10047BA  +
test byte ptr [eax+1Ch] 8 +
jz loc_10047BA  +
push ecx  +
mov ebx offset dword_10013A4 +
push ebx  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D09  +
jmp loc_10047BF  +
mov ebx offset dword_10013A4 +
lea eax [ebp+var_214] +
push eax  +
xor eax eax +
push eax  +
push 3  +
push eax  +
push eax  +
push offset aSoftwareMicros  +
push 80000001h  +
mov ecx edi +
call sub_1002D8B  +
mov edi eax +
test edi edi +
jz loc_1004825  +
mov eax off_1007000 +
cmp eax esi +
jz loc_1004802  +
test byte ptr [eax+1Ch] 8 +
jz loc_1004802  +
push edi  +
push ebx  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
test edi edi +
jle loc_1004812  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100223D  +
leave   +
retn 0Ch  +
mov ecx [ebp+Type] +
push 1  +
push [ebp+lpData]  +
push offset ValueName  +
call sub_1002813  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_100485A  +
mov eax off_1007000 +
cmp eax esi +
jz loc_1004802  +
test byte ptr [eax+1Ch] 8 +
jz loc_1004802  +
push edi  +
push ebx  +
push 20h  +
jmp loc_10047F7  +
push 20019h  +
push offset aSoftwareMicr_4  +
push 80000001h  +
lea ecx [ebp+var_228] +
mov [ebp+var_228] eax +
mov [ebp+var_224] eax +
mov [ebp+var_220] eax +
call sub_10027D7  +
mov edi eax +
test edi edi +
jz loc_10048CE  +
mov eax off_1007000 +
cmp eax esi +
jz loc_10048AA  +
test byte ptr [eax+1Ch] 8 +
jz loc_10048AA  +
push edi  +
push ebx  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
test edi edi +
jle loc_10048BA  +
and edi 0FFFFh +
or edi 80070000h +
mov esi edi +
lea ecx [ebp+var_228] +
call sub_10027B9  +
mov eax esi +
jmp loc_1004814  +
xor eax eax +
push 206h  +
push eax  +
mov word ptr [ebp+Data] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push offset aStartup  +
lea ecx [ebp+var_228] +
mov [ebp+Type] 104h +
call sub_1002E1F  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+Type] +
call sub_1004373  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1004373  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+var_21C] +
call sub_1004373  +
push offset aOnScreenKeyboa  +
lea ecx [ebp+Type] +
call sub_10041F1  +
push offset aNarrator_lnk  +
lea ecx [ebp+var_214] +
call sub_10041F1  +
push offset aMagnifier_lnk  +
lea ecx [ebp+var_21C] +
call sub_10041F1  +
push [ebp+Type]  +
mov ebx ds:GetFileAttributesW +
call ebx  +
mov edi ds:DeleteFileW +
cmp eax 0FFFFFFFFh +
jz loc_10049CF  +
push offset aOsk  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_1003774  +
push [ebp+Type]  +
call edi  +
mov eax off_1007000 +
cmp eax esi +
jz loc_10049CF  +
test byte ptr [eax+1Ch] 10h +
jz loc_10049CF  +
push offset dword_10013A4  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032A7  +
push [ebp+var_214]  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1004A18  +
push offset aNarrator  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_1003774  +
push [ebp+var_214]  +
call edi  +
mov eax off_1007000 +
cmp eax esi +
jz loc_1004A18  +
test byte ptr [eax+1Ch] 10h +
jz loc_1004A18  +
push offset dword_10013A4  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032A7  +
push [ebp+var_21C]  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1004A61  +
push offset aMagnifierpane  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_1003774  +
push [ebp+var_21C]  +
call edi  +
mov eax off_1007000 +
cmp eax esi +
jz loc_1004A61  +
test byte ptr [eax+1Ch] 10h +
jz loc_1004A61  +
push offset dword_10013A4  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032A7  +
mov ecx [ebp+var_21C] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
mov ecx [ebp+var_214] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
mov ecx [ebp+Type] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
xor esi esi +
jmp loc_10048BC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_100295E  +
mov esi [edi+10h] +
mov ebx [esi] +
test esi esi +
jz loc_1004AB9  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10044A0  +
mov eax [ebp+arg_4] +
mov [edi+10h] ebx +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi] eax +
inc dword ptr [edi+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov ebx ecx +
push offset aStartlistSaves  +
lea ecx [ebp+var_18] +
mov [ebp+lpData] edi +
call sub_1001DE9  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
mov [ebp+var_24] edi +
mov [ebp+var_20] edi +
mov [ebp+var_1C] edi +
call sub_10044BF  +
mov eax [eax] +
push 20006h  +
push eax  +
mov esi 80000002h +
push esi  +
lea ecx [ebp+var_24] +
call sub_10027D7  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
mov [ebp+var_4] eax +
call sub_1002EE6  +
cmp [ebp+var_4] edi +
jz loc_1004BBE  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
call sub_10044BF  +
mov eax [eax] +
lea ecx [ebp+var_10] +
push ecx  +
push edi  +
push 3  +
push 1  +
push edi  +
push eax  +
push esi  +
lea ecx [ebp+var_24] +
call sub_1002D8B  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
mov esi eax +
call sub_1002EE6  +
cmp esi edi +
jz loc_1004BBE  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004BA9  +
test byte ptr [eax+1Ch] 8 +
jz loc_1004BA9  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
mov [ebp+lpData] 1 +
call sub_10044BF  +
push esi  +
push dword ptr [eax]  +
mov eax off_1007000 +
push offset dword_10013A4  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D76  +
test byte ptr [ebp+lpData] 1 +
jz loc_1004C48  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
jmp loc_1004C43  +
push offset dword_1007698  +
lea ecx [ebp+lpData] +
call sub_1003957  +
lea eax [ebx+18h] +
push eax  +
lea eax [ebp+lpData] +
push eax  +
mov ecx ebx +
call sub_1004319  +
mov esi [ebp+lpData] +
push 1  +
push esi  +
push offset ValueName  +
lea ecx [ebp+var_24] +
call sub_1002813  +
cmp [ebp+var_4] edi +
jz loc_1004C1B  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004C40  +
test byte ptr [eax+1Ch] 8 +
jz loc_1004C40  +
push [ebp+var_4]  +
push offset dword_10013A4  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
jmp loc_1004C40  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004C40  +
test byte ptr [eax+1Ch] 10h +
jz loc_1004C40  +
push esi  +
push offset dword_10013A4  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D09  +
lea ecx [esi-10h] +
call sub_1002EE6  +
lea ecx [ebp+var_24] +
call sub_10027B9  +
lea ecx [ebp+var_18] +
call sub_1001E2D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1004A97  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1004C82  +
mov [ecx] eax +
jmp loc_1004C84  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov ecx [ebp+arg_0] +
push ebx  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_4] +
xor ebx ebx +
push eax  +
mov [ebp+var_C] ebx +
mov dword ptr [ebp+var_10] 2Ch +
call sub_10043A9  +
mov edi offset dword_1001718 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1004461  +
test al al +
jz loc_1004D6D  +
push esi  +
mov esi [ebp+var_4] +
cmp [esi-0Ch] ebx +
jz loc_1004D32  +
push offset aSoftwareMicr_0  +
lea ecx [ebp+lpSubKey] +
call sub_1004373  +
push dword ptr [esi-0Ch]  +
lea ecx [ebp+lpSubKey] +
push esi  +
call sub_10040A5  +
push 20019h  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_20] +
push 80000002h  +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
call sub_10027D7  +
test eax eax +
jnz loc_1004D1F  +
mov ecx [ebp+arg_4] +
push esi  +
call sub_1004C62  +
lea ecx [ebp+var_20] +
call sub_10027B9  +
mov ecx [ebp+lpSubKey] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_10043A9  +
push eax  +
lea ecx [ebp+var_4] +
call sub_100404E  +
mov ecx [ebp+var_14] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1004461  +
test al al +
jnz loc_1004CD3  +
pop esi  +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1830h +
call __alloca_probe  +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
xor eax eax +
cmp [edi+48h] esi +
jnz loc_1004F52  +
push ebx  +
mov ebx 7FEh +
push ebx  +
mov word ptr [ebp+var_804] ax +
lea eax [ebp+var_804+2] +
push esi  +
push eax  +
mov dword ptr [edi+48h] 1 +
mov [ebp+var_1818] esi +
mov [ebp+var_1814] esi +
mov [ebp+var_1810] esi +
call memset  +
xor eax eax +
push ebx  +
mov word ptr [ebp+Type] ax +
lea eax [ebp+Type+2] +
push esi  +
push eax  +
mov [ebp+var_1830] esi +
mov [ebp+var_182C] esi +
mov [ebp+var_1828] esi +
call memset  +
add esp 18h +
lea eax [ebp+var_1830] +
push eax  +
mov esi 400h +
push esi  +
lea eax [ebp+Type] +
push eax  +
mov ecx edi +
call sub_10046B1  +
lea eax [ebp+Type] +
push eax  +
lea ecx [ebp+var_180C] +
call sub_1004373  +
lea eax [edi+18h] +
push eax  +
lea eax [ebp+var_180C] +
push eax  +
mov ecx edi +
call sub_1004C91  +
mov ecx edi +
call sub_10032F9  +
test eax eax +
jz loc_1005014  +
xor eax eax +
push ebx  +
push eax  +
mov [ebp+var_1824] eax +
mov [ebp+var_1820] eax +
mov [ebp+var_181C] eax +
lea eax [ebp+var_1804+2] +
xor ecx ecx +
push eax  +
mov word ptr [ebp+var_1804] cx +
call memset  +
add esp 0Ch +
lea eax [ebp+var_1824] +
push eax  +
push esi  +
lea eax [ebp+var_1804] +
push eax  +
mov ecx edi +
call sub_1003DB1  +
lea eax [ebp+var_1804] +
push eax  +
lea ecx [ebp+var_1808] +
call sub_1004373  +
lea eax [edi+30h] +
push eax  +
lea eax [ebp+var_1808] +
push eax  +
mov ecx edi +
call sub_1004C91  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_100342C  +
mov ebx eax +
test ebx ebx +
jge loc_1004FF9  +
and eax 0FFFFh +
cmp eax 2 +
jz loc_1004F60  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004F12  +
test byte ptr [eax+1Ch] 8 +
jz loc_1004F12  +
push ebx  +
push offset dword_10013A4  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
lea ecx [ebp+var_1824] +
call sub_10027B9  +
mov ecx [ebp+var_180C] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
lea ecx [ebp+var_1830] +
call sub_10027B9  +
lea ecx [ebp+var_1818] +
call sub_10027B9  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100223D  +
leave   +
retn   +
lea eax [ebp+Type] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_1003739  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_1004766  +
mov esi eax +
test esi esi +
jge loc_1004FF9  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1004FB5  +
test byte ptr [eax+1Ch] 8 +
jz loc_1004FB5  +
push esi  +
push offset dword_10013A4  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032CD  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
lea ecx [ebp+var_1824] +
call sub_10027B9  +
mov ecx [ebp+var_180C] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
lea ecx [ebp+var_1830] +
call sub_10027B9  +
lea ecx [ebp+var_1818] +
call sub_10027B9  +
mov eax esi +
jmp loc_1004F51  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
lea ecx [ebp+var_1824] +
call sub_10027B9  +
jmp loc_100502A  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_10046B1  +
lea eax [ebp+var_804] +
push eax  +
lea ecx [ebp+var_1808] +
call sub_1004373  +
push edi  +
lea eax [ebp+var_1808] +
push eax  +
mov ecx edi +
call sub_1004C91  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
xor esi esi +
jmp loc_1004FCE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_1005084  +
mov eax 80070057h +
jmp loc_1005206  +
call sub_1004D83  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1005206  +
push ebx  +
push offset aSystemsetting  +
mov ecx edi +
call sub_1005374  +
push eax  +
call sub_1003B5F  +
test al al +
jz loc_100513A  +
mov ecx edi +
call sub_1005362  +
push dword ptr [eax]  +
call ds:_wtoi  +
pop ecx  +
mov ebx eax +
call sub_10056FB  +
cmp ebx eax +
jnb loc_1005202  +
push dword ptr [esi+4Ch]  +
mov ecx edi +
push [ebp+arg_4]  +
push ebx  +
call sub_1005DF2  +
push eax  +
call sub_10057E3  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1005202  +
mov ecx esi +
call sub_10032F9  +
test eax eax +
jz loc_1005123  +
mov ecx edi +
mov [ebp+var_4] 1 +
call sub_1005DF2  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003BB8  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1003AE1  +
test eax eax +
jz loc_1005123  +
mov bl 1 +
jmp loc_1005125  +
xor bl bl +
test byte ptr [ebp+var_4] 1 +
jz loc_1005136  +
mov ecx [ebp+arg_4] +
add ecx 0FFFFFFF0h +
call sub_1002EE6  +
test bl bl +
jmp loc_10051A1  +
mov ecx esi +
call sub_10032F9  +
test eax eax +
jz loc_100515E  +
mov ecx esi +
call sub_10033BD  +
test eax eax +
jnz loc_100515E  +
mov ecx esi +
call sub_100452A  +
xor eax eax +
jmp loc_1005205  +
mov ecx edi +
call sub_1005362  +
mov ebx [eax] +
test ebx ebx +
jnz loc_1005175  +
mov eax 80004005h +
jmp loc_1005205  +
mov ecx edi +
call sub_100536B  +
mov eax [eax] +
push 5  +
push eax  +
push ebx  +
mov ecx esi +
call sub_1003C35  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1005202  +
push edi  +
mov ecx esi +
call sub_1003855  +
mov ecx esi +
call sub_10033BD  +
test eax eax +
jz loc_1005202  +
mov ecx edi +
call sub_1005DF2  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003BB8  +
push 0  +
push [ebp+arg_4]  +
lea ecx [esi+18h] +
call sub_1003AE1  +
mov ecx [ebp+arg_4] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002EE6  +
test bl bl +
jz loc_10051FB  +
mov ecx edi +
call sub_1005DF2  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003BB8  +
mov edi [ebp+arg_4] +
push edi  +
lea ecx [esi+18h] +
call sub_1004C62  +
lea ecx [edi-10h] +
call sub_1002EE6  +
mov ecx esi +
call sub_1004AD8  +
mov eax [ebp+arg_0] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_1005065  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
call sub_1004D83  +
test eax eax +
jl loc_1005331  +
mov eax [esi] +
and [ebp+var_4] 0 +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10052B8  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1002898  +
push dword ptr [eax]  +
call sub_10055B7  +
mov edi eax +
test edi edi +
jz loc_1005334  +
push edi  +
mov ecx esi +
call sub_1005211  +
mov ebx eax +
test ebx ebx +
jge loc_10052B2  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_10052AF  +
test byte ptr [eax+1Ch] 8 +
jz loc_10052AF  +
mov ecx edi +
call sub_1005DF2  +
push [ebp+var_4]  +
push dword ptr [eax]  +
mov eax off_1007000 +
push offset dword_10013A4  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D76  +
mov [ebp+var_4] ebx +
cmp [ebp+var_8] 0 +
jnz loc_1005250  +
lea ebx [esi+30h] +
mov eax [ebx] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_100532C  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_1002898  +
push dword ptr [eax]  +
call sub_10055B7  +
mov edi eax +
test edi edi +
jz loc_1005334  +
push edi  +
mov ecx esi +
call sub_1005211  +
mov [ebp+var_C] eax +
test eax eax +
jge loc_1005326  +
mov eax off_1007000 +
cmp eax offset off_1007000 +
jz loc_1005320  +
test byte ptr [eax+1Ch] 8 +
jz loc_1005320  +
mov ecx edi +
call sub_1005DF2  +
push [ebp+var_4]  +
push dword ptr [eax]  +
mov eax off_1007000 +
push offset dword_10013A4  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001D76  +
mov eax [ebp+var_C] +
mov [ebp+var_4] eax +
cmp [ebp+var_8] 0 +
jnz loc_10052C4  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
mov eax 8007000Eh +
jmp loc_100532F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call _wcslwr_s  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+1Ch] +
push 10h  +
pop edi  +
sub ecx edi +
call sub_1002EE6  +
mov ecx [esi+18h] +
sub ecx edi +
call sub_1002EE6  +
mov ecx [esi+14h] +
sub ecx edi +
call sub_1002EE6  +
mov ecx [esi+10h] +
sub ecx edi +
call sub_1002EE6  +
mov ecx [esi+0Ch] +
sub ecx edi +
call sub_1002EE6  +
mov ecx [esi+8] +
sub ecx edi +
call sub_1002EE6  +
mov ecx [esi+4] +
sub ecx edi +
call sub_1002EE6  +
mov ecx [esi] +
sub ecx edi +
pop edi  +
pop esi  +
jmp sub_1002EE6  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_10053EE  +
push 1  +
call sub_1002872  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
push esi  +
call sub_1003C02  +
lea ecx [esi+1] +
push ecx  +
push eax  +
call sub_1005340  +
pop ecx  +
pop ecx  +
push esi  +
mov ecx edi +
call loc_10035A2  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003B47  +
lea ecx [esi+4] +
call sub_1003B47  +
lea ecx [esi+8] +
call sub_1003B47  +
lea ecx [esi+0Ch] +
call sub_1003B47  +
lea ecx [esi+10h] +
call sub_1003B47  +
lea ecx [esi+14h] +
call sub_1003B47  +
lea ecx [esi+18h] +
call sub_1003B47  +
lea ecx [esi+1Ch] +
call sub_1003B47  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004279  +
mov ecx esi +
call sub_10053F8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 810h +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push offset dword_1001718  +
mov [ebp+var_810] edi +
mov [ebp+var_80C] ecx +
call sub_10040FD  +
and [ebp+Type] 0 +
lea eax [ebp+Type] +
push eax  +
push 0  +
push edi  +
mov ecx esi +
call sub_1002E1F  +
test eax eax +
jnz loc_100559E  +
mov eax [ebp+Type] +
test eax eax +
jz loc_100559E  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
mov ebx eax +
xor eax eax +
pop ecx  +
test ebx ebx +
jz loc_10055A1  +
mov [ebx] ax +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1002E1F  +
mov edi 400h +
test eax eax +
jnz loc_100554E  +
cmp [ebp+Type] eax +
jbe loc_100554E  +
cmp [ebp+Type] edi +
jbe loc_1005542  +
mov [ebx+7FEh] ax +
mov ecx [ebp+var_80C] +
push ebx  +
call sub_1004279  +
cmp word ptr [ebx] 40h +
jnz loc_1005597  +
mov esi [esi] +
push 0  +
push 1  +
push 0  +
push edi  +
lea eax [ebp+var_804] +
push eax  +
push [ebp+var_810]  +
push esi  +
call ds:RegLoadMUIStringW  +
mov ecx [ebp+var_80C] +
test eax eax +
jnz loc_100558D  +
mov [ebp+var_6] ax +
lea eax [ebp+var_804] +
push eax  +
call sub_1004197  +
jmp loc_1005597  +
push offset dword_1001718  +
call sub_10040FD  +
push ebx  +
call ??_V@YAXPAX@Z  +
pop ecx  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100223D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
push offset aSoftwareMicr_0  +
lea ecx [ebp+lpSubKey] +
call sub_1004373  +
push [ebp+arg_0]  +
lea ecx [ebp+lpSubKey] +
call sub_10041F1  +
mov edi [ebp+lpSubKey] +
and [ebp+var_10] 0 +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
push 20019h  +
push edi  +
push 80000002h  +
lea ecx [ebp+var_10] +
call sub_10027D7  +
test eax eax +
jz loc_1005615  +
lea ecx [ebp+var_10] +
call sub_10027B9  +
lea ecx [edi-10h] +
call sub_1002EE6  +
xor eax eax +
pop edi  +
leave   +
retn 4  +
push esi  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1005630  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1005427  +
mov esi eax +
jmp loc_1005632  +
xor esi esi +
mov [ebp+arg_0] esi +
test esi esi +
jnz loc_1005656  +
lea ecx [ebp+arg_0] +
call sub_10053DC  +
lea ecx [ebp+var_10] +
call sub_10027B9  +
lea ecx [edi-10h] +
call sub_1002EE6  +
mov eax esi +
pop esi  +
jmp loc_1005610  +
lea eax [esi+4] +
push eax  +
push offset aApplicationnam  +
lea eax [ebp+var_10] +
push eax  +
call sub_1005489  +
lea eax [esi+8] +
push eax  +
push offset aDescription  +
lea eax [ebp+var_10] +
push eax  +
call sub_1005489  +
lea eax [esi+0Ch] +
push eax  +
push offset aStartexe  +
lea eax [ebp+var_10] +
push eax  +
call sub_1005489  +
lea eax [esi+10h] +
push eax  +
push offset aStartparams  +
lea eax [ebp+var_10] +
push eax  +
call sub_1005489  +
lea edi [esi+14h] +
push edi  +
push offset aSimpleprofile  +
lea eax [ebp+var_10] +
push eax  +
call sub_1005489  +
lea eax [esi+18h] +
push eax  +
push offset aProfile  +
lea eax [ebp+var_10] +
push eax  +
call sub_1005489  +
lea eax [esi+1Ch] +
push eax  +
push offset aAtexe  +
lea eax [ebp+var_10] +
push eax  +
call sub_1005489  +
push offset aSystemsetting  +
push edi  +
call sub_1003B7D  +
test al al +
jz loc_10056EA  +
mov ecx edi +
call sub_10053F8  +
and [ebp+arg_0] 0 +
mov edi [ebp+lpSubKey] +
jmp loc_1005639  +
***
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx [ebp+pvParam] +
push esi  +
mov esi ds:SystemParametersInfoW +
push edi  +
mov [ebp+uiAction] 1003h +
mov [ebp+var_18] 1005h +
mov [ebp+var_14] 1007h +
mov [ebp+var_10] 1015h +
mov [ebp+var_C] 1017h +
xor edi edi +
push 3  +
push ebx  +
push 0  +
push [ebp+edi*4+uiAction]  +
call esi  +
test eax eax +
jz loc_1005775  +
inc edi  +
cmp edi 5 +
jb loc_100573D  +
push 3  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 49h  +
mov [ebp+var_8] 8 +
mov [ebp+var_4] ebx +
call esi  +
test eax eax +
jz loc_1005775  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
call ds:GetLastError  +
test eax eax +
jle loc_100576E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100576E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+arg_4] +
imul eax eax +
mov eax off_10070B0[eax] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10057CC  +
test dx dx +
jz loc_10057C8  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10057CC  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10057A6  +
xor eax eax +
jmp loc_10057D1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1007004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
neg ebx  +
push esi  +
push [ebp+arg_0]  +
sbb ebx ebx +
and ebx 3 +
call sub_1005790  +
test eax eax +
jnz loc_100581F  +
mov eax 80070057h +
jmp loc_10058D3  +
imul esi esi +
add esi offset off_10070B0 +
mov eax [esi] +
mov ecx offset aAnimations +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1005855  +
test dx dx +
jz loc_1005851  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1005855  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100582F  +
xor eax eax +
jmp loc_100585A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1005869  +
push dword ptr [edi]  +
call sub_1005704  +
test eax eax +
jl loc_10058D3  +
mov eax [esi+0Ch] +
sub eax 0 +
jz loc_10058F6  +
dec eax  +
jz loc_10058ED  +
dec eax  +
jnz loc_10058D1  +
mov eax [esi+10h] +
test edi edi +
jnz loc_10058E4  +
push edi  +
mov edi ds:SystemParametersInfoW +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pvParam] eax +
call edi  +
test eax eax +
jz loc_100590A  +
test byte ptr [ebp+var_3C] 1 +
jnz loc_10058D1  +
or [ebp+var_3C] 1 +
push ebx  +
lea eax [ebp+pvParam] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call edi  +
test ebx ebx +
jnz loc_10058D1  +
lea eax [ebp+dwResult] +
push eax  +
push 1388h  +
push 2  +
push ebx  +
push dword ptr [esi+8]  +
push 1Ah  +
push 0FFFFh  +
call ds:SendMessageTimeoutW  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100223D  +
leave   +
retn 10h  +
push ebx  +
push edi  +
mov [edi] eax +
push dword ptr [esi+10h]  +
jmp loc_10058FD  +
mov edi [edi] +
push ebx  +
push edi  +
push dword ptr [esi+10h]  +
jmp loc_10058FD  +
mov edi [edi] +
push ebx  +
push dword ptr [esi+14h]  +
push edi  +
push dword ptr [esi+8]  +
call ds:SystemParametersInfoW  +
test eax eax +
jnz loc_10058D1  +
call ds:GetLastError  +
test eax eax +
jle loc_10058D3  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10058D3  +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1005993  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_10059BB  +
mov eax 80070057h +
jmp loc_10059CC  +
cmp dword ptr [eax] 2Ch +
jnz loc_10059B4  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1005958  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10059EA  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005A13  +
cmp eax [ecx+4] +
jge loc_1005A13  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005A44  +
cmp eax [ecx+4] +
jge loc_1005A44  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1005A93  +
mov eax 80070057h +
jmp loc_1005ADA  +
mov eax [esi] +
cmp eax edi +
jz loc_1005AD8  +
cmp eax 2Ch +
jnz loc_1005A8C  +
cmp [esi+24h] edi +
jle loc_1005AC3  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_10059F9  +
movzx eax word ptr [eax] +
push [ebp+hInstance]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1005AA7  +
pop ebx  +
lea ecx [esi+20h] +
call sub_10059D5  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_100593D  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
push esi  +
mov esi ecx +
lea eax [esi+18h] +
push eax  +
call ds:DeleteCriticalSection  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_10059D5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_1005B63  +
test ecx ecx +
jl loc_1005B63  +
cmp ecx eax +
jnz loc_1005B56  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1005B6C  +
push ecx  +
lea ecx [esi+30h] +
call loc_1005A2A  +
mov esi [eax] +
jmp loc_1005B4B  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
or al dh +
add eax offset byte_10072D4 +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push dword_1007628  +
mov esi ecx +
push esi  +
call sub_1005A7C  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_10059D5  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1001A94 +
jz locret_1005CA6  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1005CA6  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1005CE1  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_1005CFF  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1005D20  +
cmp [ebp+0Ch] eax +
jnz loc_1005D10  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1005D20  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005C8C  +
test byte ptr [ebp+8] 1 +
jz loc_1005D5F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1001AA8 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1005DB5  +
cmp eax 0FFFFFFFFh +
jbe loc_1005DBC  +
mov eax 80070057h +
jmp loc_1005DC3  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
ror byte ptr [ebp-0FBDEBBFh] cl +
xadd [eax] edx +
lea eax [ecx+8] +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001AA8 +
jz loc_1005E15  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_1005E3C  +
mov eax 80070057h +
jmp loc_1005E45  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_1005E6A  +
mov eax [ebp+arg_8] +
jmp loc_1005E70  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1005E4E  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_1005DA1  +
test eax eax +
jl loc_1005ED9  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_1005E21  +
test eax eax +
jl loc_1005ED9  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_1005ED9  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_1005EDB  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1005E4E  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1005DA1  +
test eax eax +
jl loc_1005F3D  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_1005E21  +
test eax eax +
jl loc_1005F3D  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1005F3D  +
dec edi  +
mov [eax+8] edi +
jmp loc_1005F3F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push offset loc_1002432  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1007004 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_100223D  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
mov ecx offset dword_100768C +
jmp sub_1005C8C  +
***
mov dword_1007698 offset off_1001AA8 +
retn   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756EAFCFh  +
***
jns $+2  +
retf   +
***
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
iret   +
***
