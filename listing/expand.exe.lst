retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
or dword_100CF1C 0FFFFFFFFh +
push ebx  +
xor eax eax +
push esi  +
push edi  +
xor edi edi +
inc edi  +
cmp [ebp+arg_0] edi +
mov dword_100CF14 eax +
mov dword_100CF10 eax +
mov dword_100CF0C eax +
mov dword_100CF04 eax +
mov dword_100CF00 eax +
mov dword_100CF18 eax +
mov dword_100CF08 eax +
mov ebx edi +
mov [ebp+var_4] edi +
jle loc_10046B8  +
mov esi ds:toupper +
mov eax [ebp+arg_4] +
lea edx [eax+ebx*4] +
mov eax [edx] +
mov cl [eax] +
mov [ebp+var_C] edx +
cmp cl 2Fh +
jz loc_10045BA  +
cmp cl 2Dh +
jz loc_10045BA  +
mov dword_100CF1C ebx +
push dword ptr [edx]  +
call sub_10055C7  +
test eax eax +
jnz loc_100468E  +
inc dword_100CF00  +
jmp loc_100468E  +
mov bl [eax+1] +
mov [ebp+TestChar] bl +
push dword ptr [ebp+TestChar]  +
call ds:__imp_IsDBCSLeadByte  +
test eax eax +
jnz loc_10046C1  +
movsx edi bl +
push edi  +
call esi  +
push 52h  +
mov ebx eax +
call esi  +
pop ecx  +
pop ecx  +
cmp ebx eax +
jnz loc_10045F1  +
xor edi edi +
inc edi  +
mov dword_100CF14 edi +
jmp loc_100468E  +
push edi  +
call esi  +
push 49h  +
mov ebx eax +
call esi  +
pop ecx  +
pop ecx  +
cmp ebx eax +
jnz loc_1004611  +
xor edi edi +
inc edi  +
mov dword_100CF14 edi +
mov dword_100CF10 edi +
jmp loc_100468E  +
push edi  +
call esi  +
push 3Fh  +
mov ebx eax +
call esi  +
pop ecx  +
pop ecx  +
cmp ebx eax +
jnz loc_100462B  +
xor edi edi +
inc edi  +
mov dword_100CF0C edi +
jmp loc_100468E  +
push edi  +
call esi  +
push 44h  +
mov ebx eax +
call esi  +
pop ecx  +
pop ecx  +
cmp ebx eax +
jnz loc_100464B  +
xor edi edi +
inc edi  +
mov dword_100CF14 edi +
mov dword_100CF18 edi +
jmp loc_100468E  +
push edi  +
call esi  +
push 46h  +
mov edi eax +
call esi  +
pop ecx  +
pop ecx  +
cmp edi eax +
jnz loc_1004706  +
mov eax [ebp+var_C] +
mov eax [eax] +
cmp byte ptr [eax+2] 3Ah +
jnz loc_1004706  +
add eax 3 +
cmp byte ptr [eax] 0 +
jz loc_1004706  +
cmp dword_100CF08 0 +
jnz loc_1004706  +
xor edi edi +
mov dword_100CF08 eax +
inc edi  +
mov ebx [ebp+var_4] +
inc ebx  +
cmp ebx [ebp+arg_0] +
mov [ebp+var_4] ebx +
jl loc_1004583  +
mov eax dword_100CF1C +
cmp eax 0FFFFFFFFh +
jz loc_10046B8  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx+eax*4]  +
call sub_10055C7  +
mov dword_100CF04 eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_4] +
mov eax [eax+ecx*4] +
push 2  +
inc eax  +
push eax  +
lea eax [ebp+arg_4] +
push 3  +
push eax  +
call sub_1006AE1  +
add esp 10h +
push 400h  +
mov esi offset Buffer +
push esi  +
push 13h  +
push hInstance  +
call ds:LoadStringA  +
lea eax [ebp+arg_4] +
push eax  +
push esi  +
call ds:printf  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_10046BA  +
push 400h  +
mov esi offset Buffer +
push esi  +
push 3  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
movsx eax [ebp+TestChar] +
jmp loc_10046F8  +
***
mov ecx dword_100CF00 +
xor eax eax +
inc eax  +
cmp ecx eax +
push esi  +
jge loc_1004776  +
push 400h  +
mov esi offset Buffer +
push esi  +
push 4  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
mov eax ds:_iob +
add eax 20h +
push eax  +
push esi  +
call ds:fputs  +
jmp loc_1004807  +
mov edx dword_100CF04 +
xor esi esi +
cmp ecx eax +
jnz loc_10047A5  +
cmp dword_100CF14 esi +
jnz loc_10047CD  +
cmp edx esi +
jnz loc_10047CD  +
cmp dword_100CF18 esi +
jnz loc_100480B  +
push 400h  +
mov esi offset Buffer +
push esi  +
push 5  +
jmp loc_10047E6  +
cmp ecx 2 +
jle loc_10047CD  +
cmp dword_100CF14 esi +
jnz loc_10047CD  +
cmp edx esi +
jnz loc_10047CD  +
cmp dword_100CF18 esi +
jnz loc_100480B  +
push 400h  +
mov esi offset Buffer +
push esi  +
push 2  +
jmp loc_10047E6  +
cmp dword_100CF18 esi +
jz loc_100480B  +
cmp edx eax +
jnz loc_100480B  +
push 400h  +
mov esi offset Buffer +
push esi  +
push 19h  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
push dword_100C6D4  +
push esi  +
call ds:printf  +
pop ecx  +
xor eax eax +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi dword_100B340 +
jmp loc_100484D  +
mov eax [ebp+arg_0] +
mov eax [eax+esi*4] +
mov cl [eax] +
cmp cl 2Fh +
jz loc_100484D  +
cmp cl 2Dh +
jz loc_100484D  +
cmp esi dword_100CF1C +
jl loc_1004843  +
cmp dword_100CF04 0 +
jnz loc_100484D  +
push eax  +
call sub_10055C7  +
test eax eax +
jz loc_100485E  +
inc esi  +
cmp esi dword_100CF1C +
jle loc_1004820  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 4  +
mov dword_100B340 esi +
mov eax esi +
jmp loc_1004859  +
***
mov edi edi +
push esi  +
cmp eax 0FFFFFFF8h +
jz loc_100492C  +
cmp eax 0FFFFFFFCh +
jz loc_100491D  +
cmp eax 0FFFFFFFDh +
jz loc_100490E  +
cmp eax 0FFFFFFFEh +
jz loc_10048E5  +
cmp eax 0FFFFFFFFh +
jz loc_10048D6  +
test eax eax +
jz loc_100495C  +
push 800h  +
mov esi offset Buffer +
push esi  +
push 0Bh  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
push dword_100C6DC  +
push lpPathName  +
push esi  +
call ds:printf  +
add esp 0Ch +
pop esi  +
retn   +
push 800h  +
mov esi offset Buffer +
push esi  +
push 6  +
jmp loc_1004939  +
push 800h  +
mov esi offset Buffer +
push esi  +
push 8  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
push dword_100C6DC  +
jmp loc_1004953  +
push 800h  +
mov esi offset Buffer +
push esi  +
push 17h  +
jmp loc_1004939  +
push 800h  +
mov esi offset Buffer +
push esi  +
push 9  +
jmp loc_10048F2  +
push 800h  +
mov esi offset Buffer +
push esi  +
push 18h  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
push lpPathName  +
push esi  +
call ds:printf  +
pop ecx  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+FilePart] +
push eax  +
push [ebp+FilePart]  +
push 104h  +
push [ebp+lpFileName]  +
call ds:GetFullPathNameA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+FilePart] +
push eax  +
push [ebp+FilePart]  +
push 104h  +
push [ebp+lpFileName]  +
call ds:GetFullPathNameW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
lea ecx [ebp+FilePart] +
push ecx  +
push eax  +
call sub_1004963  +
test eax eax +
jz loc_10049FE  +
lea eax [ebp+String2] +
push eax  +
push esi  +
call sub_1004963  +
test eax eax +
jz loc_10049FE  +
lea eax [ebp+String2] +
push eax  +
lea eax [ebp+FilePart] +
push eax  +
call ds:lstrcmpiA  +
test eax eax +
jnz loc_10049FE  +
inc eax  +
jmp loc_1004A00  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1006668  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
lea ecx [ebp+FilePart] +
push ecx  +
push eax  +
call sub_1004986  +
test eax eax +
jz loc_1004A68  +
lea eax [ebp+String2] +
push eax  +
push esi  +
call sub_1004986  +
test eax eax +
jz loc_1004A68  +
lea eax [ebp+String2] +
push eax  +
lea eax [ebp+FilePart] +
push eax  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1004A68  +
inc eax  +
jmp loc_1004A6A  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1006668  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word ptr [ebp+10h] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
dec eax  +
inc edi  +
cmp eax edi +
ja loc_1004B6F  +
cmp dword_100CF18 edi +
jnz loc_1004AF2  +
push 5Ch  +
push dword ptr [ebp+0Ch]  +
call sub_100527B  +
mov edi eax +
test edi edi +
jz loc_1004AB0  +
inc edi  +
jmp loc_1004AB3  +
mov edi [ebp+0Ch] +
push 800h  +
mov esi offset Buffer +
push esi  +
push 1Ah  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
push edi  +
push dword ptr [ebp+8]  +
push esi  +
call ds:printf  +
add esp 0Ch +
inc dword_100C6D8  +
inc dword_100B34C  +
xor eax eax +
jmp loc_1004B71  +
mov ebx [ebp+8] +
mov esi [ebp+0Ch] +
push ebx  +
call sub_10049A9  +
push 800h  +
mov esi offset Buffer +
push esi  +
test eax eax +
jz loc_1004B2F  +
push 0Ch  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
push ebx  +
push esi  +
call ds:printf  +
pop ecx  +
pop ecx  +
jmp loc_1004AEE  +
***
inc dword_100C6D8  +
inc dword_100B34C  +
cmp [ebp+10h] di +
jnz loc_1004B45  +
push 14h  +
jmp loc_1004B4D  +
mov dword_100B344 edi +
push 15h  +
push hInstance  +
call ds:LoadStringA  +
push esi  +
push esi  +
call ds:CharToOemA  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push esi  +
call ds:printf  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word ptr [ebp+10h] +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
push edi  +
test eax eax +
jle loc_1004C30  +
cmp eax 2 +
mov edi 0FFh +
jle loc_1004BA6  +
cmp eax edi +
jnz loc_1004C30  +
cmp dword_100CF18 ebx +
jnz loc_1004BD4  +
push dword ptr [ebp+0Ch]  +
call sub_10059FC  +
push eax  +
push dword ptr [ebp+8]  +
push 1Ah  +
call sub_1005C5A  +
add esp 0Ch +
inc dword_100C6D8  +
inc dword_100B34C  +
xor eax eax +
jmp loc_1004C3B  +
push dword ptr [ebp+8]  +
mov esi [ebp+0Ch] +
call sub_1004A13  +
test eax eax +
jz loc_1004BF2  +
push dword ptr [ebp+8]  +
push 0Ch  +
call sub_1005C5A  +
pop ecx  +
xor eax eax +
jmp loc_1004C3A  +
inc dword_100C6D8  +
inc dword_100B34C  +
push esi  +
cmp [ebp+10h] bx +
jnz loc_1004C0C  +
push dword ptr [ebp+8]  +
push 14h  +
jmp loc_1004C28  +
cmp [ebp+10h] di +
jnz loc_1004C1D  +
push 26h  +
call sub_1005C5A  +
pop ecx  +
pop ecx  +
jmp loc_1004C30  +
push dword ptr [ebp+8]  +
mov dword_100B344 ebx +
push 15h  +
call sub_1005C5A  +
add esp 0Ch +
push 0  +
call ds:fflush  +
mov eax ebx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1004C5D  +
cmp ecx 7FFFFFFFh +
jbe loc_1004C62  +
mov eax 80070057h +
test eax eax +
jl loc_1004CA6  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1004C99  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1004C94  +
mov cl [edx+eax] +
test cl cl +
jz loc_1004C94  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1004C80  +
pop edi  +
test esi esi +
jnz loc_1004C9F  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 134h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
xor esi esi +
push ebx  +
inc esi  +
push esi  +
push ebx  +
mov [ebp+var_11C] eax +
mov [ebp+var_120] ebx +
mov [ebp+var_128] ebx +
mov [ebp+var_124] ebx +
mov [ebp+var_12C] esi +
call ds:HeapSetInformation  +
push ebx  +
call ds:SetThreadUILanguage  +
mov edi offset a_ocp +
push edi  +
push esi  +
mov esi ds:_wsetlocale +
call esi  +
push edi  +
push 3  +
call esi  +
push edi  +
push 4  +
call esi  +
push edi  +
push 5  +
call esi  +
add esp 20h +
call ds:GetConsoleOutputCP  +
push eax  +
push offset a_D  +
push 0FFFFFFFFh  +
lea eax [ebp+var_14] +
push 8  +
push eax  +
call sub_10069D7  +
lea eax [ebp+var_14] +
push eax  +
push 2  +
call esi  +
add esp 1Ch +
push ebx  +
push 8  +
push offset aExpand_exe  +
call sub_1009D5A  +
mov hInstance eax +
cmp eax ebx +
jnz loc_1004D6D  +
push offset aFailedToLoadMu  +
call ds:printf  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1004E7D  +
mov edi ds:LoadStringA +
push 800h  +
mov esi offset Buffer +
push esi  +
push 0Ah  +
push eax  +
call edi  +
mov ebx ds:CharToOemA +
push esi  +
push esi  +
call ebx  +
push offset a6_1_7600_16385  +
push esi  +
call ds:printf  +
pop ecx  +
pop ecx  +
push [ebp+var_11C]  +
push [ebp+arg_0]  +
call sub_1004535  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_1004DBB  +
mov [ebp+var_120] ecx +
jmp loc_1004E68  +
mov eax dword_100CF1C +
mov edx [ebp+var_11C] +
mov eax [edx+eax*4] +
mov dword_100C6D4 eax +
cmp dword_100CF0C ecx +
jnz loc_1004E03  +
push 800h  +
push esi  +
push 10h  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ebx  +
mov eax ds:_iob +
add eax 20h +
push eax  +
push esi  +
call ds:fputs  +
and [ebp+var_120] 0 +
jmp loc_1004E66  +
call sub_1004732  +
test eax eax +
jnz loc_1004E18  +
mov [ebp+var_120] 1 +
jmp loc_1004E68  +
call sub_100833D  +
mov ebx eax +
mov [ebp+var_134] ebx +
test ebx ebx +
jz loc_1004E36  +
call sub_100555B  +
test eax eax +
jnz loc_1005157  +
push 800h  +
push esi  +
xor ebx ebx +
inc ebx  +
push ebx  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
mov eax ds:_iob +
add eax 20h +
push eax  +
push esi  +
call ds:fputs  +
mov [ebp+var_120] ebx +
pop ecx  +
pop ecx  +
mov eax hInstance +
test eax eax +
jz loc_1004E77  +
push eax  +
call sub_100942D  +
mov eax [ebp+var_120] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006668  +
leave   +
retn   +
and dword_100C6D8 0 +
mov ecx [ebp+var_11C] +
and dword ptr [ebx+28h] 0 +
push dword ptr [ecx+eax*4]  +
call ds:CharLowerA  +
cmp dword_100CF00 2 +
mov ecx dword_100CF04 +
mov lpPathName eax +
jnz loc_1004EDC  +
test ecx ecx +
jnz loc_1004EDC  +
cmp dword_100CF14 ecx +
jnz loc_1004F17  +
push [ebp+var_11C]  +
call sub_1004812  +
mov ecx [ebp+var_11C] +
push dword ptr [ecx+eax*4]  +
jmp loc_1004F18  +
cmp ecx 1 +
jnz loc_1004F17  +
push dword_100C6D4  +
lea eax [ebp+String] +
push 104h  +
push eax  +
call sub_1004C47  +
push lpPathName  +
call sub_10086F3  +
push eax  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_1008783  +
jmp loc_1004F29  +
push eax  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_1004C47  +
lea eax [ebp+String] +
push eax  +
call ds:CharLowerA  +
and dword_100B344 0 +
push offset dword_100C6D0  +
push lpPathName  +
mov dword_100C6DC eax +
call sub_10054EA  +
test eax eax +
jz loc_1005026  +
mov ecx dword_100C6D0 +
mov eax dword_100CF18 +
test ecx ecx +
jz loc_1004FEF  +
cmp dword_100CF00 1 +
mov edx dword_100CF08 +
jnz loc_1004FB2  +
test eax eax +
jnz loc_1004FB2  +
test edx edx +
jnz loc_1004FB2  +
push 800h  +
push esi  +
push 1Eh  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
mov eax ds:_iob +
add eax 20h +
push eax  +
push esi  +
call ds:fputs  +
pop ecx  +
jmp loc_1005156  +
cmp dword_100CF04 0 +
jnz loc_1004FE6  +
test eax eax +
jnz loc_1004FE6  +
push 800h  +
push esi  +
push 1Dh  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
push lpPathName  +
push esi  +
call ds:printf  +
jmp loc_1004FAC  +
and [ebp+var_12C] 0 +
jmp loc_1004FF1  +
xor edx edx +
push dword_100CF10  +
push dword_100CF14  +
push ecx  +
push eax  +
push edx  +
push dword_100C6D4  +
push lpPathName  +
push offset loc_1004B7D  +
call sub_10060EA  +
xor ecx ecx +
cmp eax 1 +
setnz cl  +
mov [ebp+var_120] ecx +
jmp loc_100504E  +
push ebx  +
push dword_100CF14  +
push dword_100C6DC  +
push lpPathName  +
push offset loc_1004A7D  +
call sub_10085A0  +
cmp eax 1 +
jz loc_100505D  +
mov [ebp+var_120] eax +
cmp eax 1 +
jz loc_100505D  +
call sub_100486D  +
jmp loc_100514B  +
cmp dword_100C6D0 0 +
jz loc_1005093  +
cmp dword_100C6D8 0 +
jnz loc_100514B  +
push 800h  +
push esi  +
push 1Ch  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
push dword_100CF08  +
jmp loc_10050D9  +
mov ecx [ebx+24h] +
test ecx ecx +
jz loc_100514B  +
mov eax [ebx+28h] +
test eax eax +
jz loc_100514B  +
add [ebp+var_128] ecx +
add [ebp+var_124] eax +
cmp dword_100B344 0 +
push 800h  +
push esi  +
jz loc_10050EB  +
push 16h  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
push dword ptr [ebx+24h]  +
push lpPathName  +
push esi  +
call ds:printf  +
add esp 0Ch +
jmp loc_100514B  +
push 0Dh  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
mov eax [ebx+28h] +
mov ebx [ebx+24h] +
push 0  +
cdq   +
push 64h  +
push edx  +
push eax  +
call __allmul  +
mov ecx eax +
mov eax edx +
mov [ebp+var_130] eax +
mov eax ebx +
cdq   +
push edx  +
push eax  +
mov eax [ebp+var_130] +
push eax  +
push ecx  +
call __alldiv  +
mov ebx [ebp+var_134] +
sub eax 64h +
push eax  +
push dword ptr [ebx+28h]  +
push dword ptr [ebx+24h]  +
push lpPathName  +
push esi  +
call ds:printf  +
add esp 14h +
push offset asc_100123C  +
call ds:printf  +
pop ecx  +
push [ebp+var_11C]  +
call sub_1004812  +
cmp eax 0FFFFFFFFh +
jnz loc_1004E8C  +
push ebx  +
call sub_1008354  +
call sub_10055AA  +
cmp [ebp+var_12C] 0 +
jz loc_100523F  +
cmp dword_100CF18 0 +
jnz loc_100523F  +
cmp dword_100B34C 1 +
jle loc_1004E68  +
mov eax [ebp+var_128] +
test eax eax +
jz loc_1004E68  +
mov ebx [ebp+var_124] +
mov ecx 186A0h +
cmp eax ecx +
mov [ebp+var_11C] eax +
jle loc_10051E2  +
mov eax [ebp+var_11C] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_11C] eax +
mov eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
cmp [ebp+var_11C] ecx +
mov ebx eax +
jg loc_10051C0  +
mov eax [ebp+var_11C] +
cdq   +
mov ecx 0C8h +
idiv  ecx +
add ebx eax +
jns loc_10051F6  +
xor ebx ebx +
push 800h  +
push esi  +
push 0Fh  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
mov eax ebx +
imul eax eax +
cdq   +
idiv  [ebp+var_11C] +
sub eax 64h +
push eax  +
push [ebp+var_124]  +
push [ebp+var_128]  +
push dword_100B34C  +
push esi  +
call ds:printf  +
add esp 14h +
jmp loc_1004E68  +
cmp dword_100B34C 1 +
jle loc_1004E68  +
push 800h  +
push esi  +
push 1Bh  +
push hInstance  +
call edi  +
push esi  +
push esi  +
call ds:CharToOemA  +
push dword_100B34C  +
push esi  +
call ds:printf  +
jmp loc_1004E66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_1008A1B  +
cmp byte ptr [ebx] 0 +
jz loc_10052B7  +
push esi  +
push edi  +
mov ecx eax +
sub ecx ebx +
lea edi [ebp+arg_4] +
mov esi ebx +
xor edx edx +
cmps   +
jnz loc_10052A8  +
mov [ebp+var_4] ebx +
push eax  +
mov ebx eax +
call sub_1008A1B  +
cmp byte ptr [ebx] 0 +
jnz loc_1005296  +
pop edi  +
pop esi  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movsx eax al +
lea ecx [eax-41h] +
cmp ecx 19h +
ja loc_10052D7  +
add eax 20h +
movsx ecx [ebp+arg_0] +
lea edx [ecx-41h] +
cmp edx 19h +
ja loc_10052E6  +
add ecx 20h +
xor edx edx +
cmp eax ecx +
setz dl  +
mov eax edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
jmp loc_1005335  +
cmp al 2Ah +
jz loc_100537C  +
cmp al 3Fh +
jz loc_100534B  +
mov al [edi] +
push ebx  +
call sub_10052C4  +
test eax eax +
jnz loc_100532E  +
cmp bl 2Eh +
jnz loc_100535C  +
cmp [edi] al +
jnz loc_100535C  +
cmp [ebp+arg_8] 1 +
jnz loc_100535C  +
and [ebp+arg_8] eax +
cmp byte ptr [edi] 0 +
jz loc_1005334  +
inc edi  +
inc esi  +
mov bl [esi] +
mov al bl +
test al al +
jnz loc_1005308  +
xor eax eax +
cmp [edi] al +
setz al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
cmp byte ptr [edi] 0 +
jnz loc_1005333  +
cmp [ebp+arg_8] 1 +
jnz loc_100535C  +
and [ebp+arg_8] 0 +
jmp loc_1005334  +
xor eax eax +
jmp loc_1005344  +
cmp al 3Fh +
jnz loc_1005378  +
cmp byte ptr [edi] 0 +
jnz loc_1005375  +
cmp [ebp+arg_8] 1 +
jnz loc_100535C  +
and [ebp+arg_8] 0 +
jmp loc_100537C  +
inc edi  +
jmp loc_100537C  +
cmp al 2Ah +
jnz loc_10053AC  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1005360  +
xor eax eax +
inc eax  +
jmp loc_1005344  +
movzx ecx byte ptr [esi] +
push ecx  +
call sub_10052C4  +
cmp eax 1 +
jnz loc_10053AB  +
push [ebp+arg_8]  +
lea eax [esi+1] +
push eax  +
lea eax [edi+1] +
push eax  +
call sub_10052F8  +
cmp eax 1 +
jz loc_1005383  +
inc edi  +
mov al [edi] +
test al al +
jnz loc_1005388  +
cmp byte ptr [esi] 2Eh +
jnz loc_100535C  +
cmp [ebp+arg_8] 1 +
jmp loc_10053BF  +
cmp al 2Ah +
jnz loc_100535C  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_10053BD  +
jmp loc_1005383  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
call ds:__imp_LocalAlloc  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:__imp_LocalFree  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
test [ebp+arg_4] al +
jnz loc_100540F  +
movsx eax [ebp+arg_4] +
and eax 2 +
or eax 20h +
push eax  +
push [ebp+lpPathName]  +
call ds:__imp__lopen  +
cmp eax 0FFFFFFFFh +
jnz loc_1005429  +
or dword_100C6B8 eax +
or eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:__imp__lread  +
cmp eax 0FFFFFFFFh +
jnz loc_1005455  +
or eax eax +
mov dword_100C6B8 0FFFFFFFDh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:__imp__lwrite  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1005492  +
call ds:GetLastError  +
sub eax 70h +
neg eax  +
sbb eax eax +
and eax 2 +
add eax 0FFFFFFFCh +
mov dword_100C6B8 eax +
jmp loc_10054A1  +
cmp esi [ebp+10h] +
jz loc_10054A1  +
mov dword_100C6B8 0FFFFFFFCh +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hFile]  +
call ds:__imp__lclose  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:__imp__llseek  +
cmp eax 0FFFFFFFFh +
jnz loc_10054E3  +
or dword_100C6B8 eax +
or eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebx] edi +
cmp dword_100C6CC edi +
jnz loc_1005507  +
xor eax eax +
jmp loc_1005550  +
push esi  +
push edi  +
push edi  +
push [ebp+lpPathName]  +
call sub_10053FB  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jnz loc_1005520  +
xor eax eax +
jmp loc_100554F  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push dword_100C6CC  +
call FDIIsCabinet  +
push esi  +
mov [ebp+arg_4] eax +
call sub_10054AB  +
add esp 10h +
cmp [ebp+arg_4] edi +
jz loc_100554C  +
xor eax eax +
inc eax  +
cmp [ebp+var_12] ax +
jbe loc_100554C  +
mov [ebx] eax +
mov eax [ebp+arg_4] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax dword_100C6CC +
test eax eax +
jnz loc_100559B  +
push offset unk_100C6C0  +
push 0FFFFFFFFh  +
push offset loc_10054C2  +
push offset sub_10054AB  +
push offset loc_100545C  +
push offset loc_1005430  +
push offset sub_10053FB  +
push offset loc_10053E6  +
push offset loc_10053CF  +
call FDICreate  +
add esp 24h +
mov dword_100C6CC eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
mov eax dword_100C6CC +
test eax eax +
jz locret_10055C1  +
push eax  +
call FDIDestroy  +
and dword_100C6CC 0 +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpFileName]  +
xor esi esi +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jz loc_10055E2  +
test al 10h +
jz loc_10055E2  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpFileName]  +
xor esi esi +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1005609  +
test al 10h +
jz loc_1005609  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ds:GetCurrentDirectoryW +
push 0  +
push 0  +
mov [ebp+var_4] 80004005h +
call edi  +
mov esi eax +
lea eax [esi-1] +
cmp eax 7FFDh +
ja loc_100566C  +
lea eax [esi+esi+2] +
push ebx  +
push eax  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_100566B  +
push ebx  +
inc esi  +
push esi  +
call edi  +
test eax eax +
jbe loc_1005663  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
mov [eax] ebx +
jmp loc_100566B  +
push ebx  +
call ds:free  +
pop ecx  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ds:GetTempPathW +
push 0  +
push 0  +
mov [ebp+var_4] 80004005h +
call edi  +
mov esi eax +
lea eax [esi-1] +
cmp eax 7FFDh +
ja loc_10056D1  +
lea eax [esi+esi+2] +
push ebx  +
push eax  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_10056D0  +
push ebx  +
inc esi  +
push esi  +
call edi  +
test eax eax +
jbe loc_10056C8  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
mov [eax] ebx +
jmp loc_10056D0  +
push ebx  +
call ds:free  +
pop ecx  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_10056FC  +
cmp word ptr [ecx+eax*2] 0 +
jz loc_10056FC  +
inc eax  +
cmp eax 7FFFh +
jbe loc_10056ED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1005721  +
cmp byte ptr [eax+ecx] 0 +
jz loc_1005721  +
inc eax  +
cmp eax 7FFFh +
jbe loc_1005713  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+lpWideCharStr]  +
mov [ebp+var_4] 80004005h +
call sub_10056DF  +
mov ecx [ebp+arg_8] +
movzx eax ax +
xor ebx ebx +
mov [ebp+cchWideChar] eax +
mov [ecx] ebx +
cmp [ebp+lpWideCharStr] ebx +
jz loc_10057CA  +
cmp eax ebx +
jz loc_10057CA  +
push esi  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax ebx +
jz loc_10057C4  +
inc eax  +
push edi  +
push eax  +
call ds:malloc  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_10057B0  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
cmp eax ebx +
jz loc_10057A7  +
mov [edi+eax] bl +
mov eax [ebp+arg_8] +
mov [eax] edi +
mov [ebp+var_4] ebx +
jmp loc_10057C3  +
mov [ebp+var_4] 80004005h +
jmp loc_10057B7  +
mov [ebp+var_4] 8007000Eh +
cmp edi ebx +
jz loc_10057C3  +
push edi  +
call ds:free  +
pop ecx  +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
jmp loc_10057CF  +
mov eax 80070057h +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
push edi  +
push [ebp+lpMultiByteStr]  +
xor edi edi +
mov [ebp+var_4] 80004005h +
mov [eax] edi +
call sub_1005705  +
movzx ebx ax +
cmp [ebp+lpMultiByteStr] edi +
jz loc_1005876  +
cmp ebx edi +
jz loc_1005876  +
push esi  +
mov esi ds:MultiByteToWideChar +
push edi  +
push edi  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push 8  +
push [ebp+CodePage]  +
call esi  +
mov [ebp+cchWideChar] eax +
cmp eax edi +
jz loc_1005870  +
lea eax [eax+eax+2] +
push eax  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100585D  +
push [ebp+cchWideChar]  +
push edi  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push 8  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jz loc_1005854  +
xor ecx ecx +
and [ebp+var_4] ecx +
mov [edi+eax*2] cx +
mov eax [ebp+arg_8] +
mov [eax] edi +
jmp loc_1005870  +
mov [ebp+var_4] 80004005h +
jmp loc_1005864  +
mov [ebp+var_4] 8007000Eh +
test edi edi +
jz loc_1005870  +
push edi  +
call ds:free  +
pop ecx  +
mov eax [ebp+var_4] +
pop esi  +
jmp loc_100587B  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
mov edx ecx +
mov cl [ecx] +
inc eax  +
jmp loc_10058AB  +
cmp cl 2Eh +
jnz loc_10058A0  +
xor eax eax +
jmp loc_10058A8  +
cmp cl 5Ch +
jnz loc_10058A8  +
xor eax eax +
inc eax  +
inc edx  +
mov cl [edx] +
test cl cl +
jnz loc_1005897  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] 0 +
jz loc_10058CC  +
pop ebp  +
jmp sub_10052F8  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edx  +
call sub_10056DF  +
push [ebp+arg_4]  +
movzx esi ax +
call sub_10056DF  +
xor ecx ecx +
movzx ebx ax +
cmp edx ecx +
jz loc_1005910  +
cmp esi ecx +
jz loc_1005910  +
lea eax [edx+esi*2-2] +
cmp word ptr [eax] 5Ch +
jnz loc_1005910  +
dec esi  +
dec eax  +
dec eax  +
cmp esi ecx +
jnz loc_1005903  +
cmp [ebp+arg_4] ecx +
jz loc_1005929  +
cmp ebx ecx +
jz loc_1005929  +
mov eax [ebp+arg_4] +
cmp word ptr [eax] 5Ch +
jnz loc_1005929  +
add [ebp+arg_4] 2 +
dec ebx  +
jnz loc_1005919  +
lea eax [ebx+esi] +
cmp eax ecx +
jnz loc_1005949  +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_1005939  +
mov [eax] ecx +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_1005942  +
mov [eax] ecx +
xor eax eax +
jmp loc_10059F1  +
inc eax  +
cmp esi ecx +
jz loc_1005953  +
cmp ebx ecx +
jz loc_1005953  +
inc eax  +
add eax eax +
push edi  +
push eax  +
mov [ebp+var_8] eax +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_10059EE  +
and [ebp+var_4] 0 +
cmp [ebp+arg_0] 0 +
jz loc_10059A0  +
test esi esi +
jz loc_10059A0  +
lea eax [esi+esi] +
mov [ebp+var_4] eax +
cmp eax [ebp+var_8] +
ja loc_10059E4  +
push eax  +
push [ebp+arg_0]  +
push edi  +
call memcpy  +
add esp 0Ch +
test ebx ebx +
jz loc_10059A0  +
mov ecx [ebp+var_4] +
push 5Ch  +
pop eax  +
mov [ecx+edi] ax +
inc esi  +
cmp [ebp+arg_4] 0 +
jz loc_10059C7  +
test ebx ebx +
jz loc_10059C7  +
mov eax [ebp+var_8] +
sub eax [ebp+var_4] +
lea ecx [ebx+ebx] +
cmp ecx eax +
ja loc_10059E4  +
push ecx  +
push [ebp+arg_4]  +
lea eax [edi+esi*2] +
push eax  +
call memcpy  +
add esp 0Ch +
lea eax [ebx+esi] +
xor ecx ecx +
mov [edi+eax*2] cx +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10059D9  +
mov [eax] esi +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10059EE  +
mov [eax] ebx +
jmp loc_10059EE  +
push edi  +
call ds:free  +
pop ecx  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax ecx +
test ecx ecx +
jz loc_1005A2D  +
push esi  +
jmp loc_1005A22  +
push 5Ch  +
pop esi  +
cmp si dx +
jz loc_1005A1D  +
push 2Fh  +
pop esi  +
cmp si dx +
jnz loc_1005A20  +
lea eax [ecx+2] +
inc ecx  +
inc ecx  +
movzx edx word ptr [ecx] +
xor esi esi +
cmp si dx +
jnz loc_1005A0D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1008F2E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+20h]  +
mov dword_100B000 eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jle loc_1005A82  +
push offset asc_10012A8  +
call ds:printf  +
dec esi  +
pop ecx  +
jnz loc_1005A73  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1005AA0  +
push eax  +
call ds:free  +
pop ecx  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1005AC1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_1005AE3  +
cmp ecx 7FFFFFFFh +
jbe loc_1005AE5  +
mov eax edx +
test eax eax +
jl loc_1005B42  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_1005B01  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_1005B41  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1005B31  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1005B2D  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1005B2D  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1005B15  +
test esi esi +
jnz loc_1005B38  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1005B61  +
cmp ecx 7FFFFFFFh +
jbe loc_1005B66  +
mov eax 80070057h +
test eax eax +
jl loc_1005BA3  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1005B96  +
cmp eax esi +
ja loc_1005B96  +
jnz loc_1005B9E  +
mov [esi+edi] bl +
jmp loc_1005B9E  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov ebx 80004005h +
xor edi edi +
call sub_10059FC  +
mov esi eax +
sub esi [ebp+arg_0] +
sar esi 1 +
jnz loc_1005BCE  +
xor ebx ebx +
jmp loc_1005C11  +
lea eax [esi-1] +
cmp eax 7FFFFFFDh +
ja loc_1005C18  +
lea eax [esi+esi] +
push eax  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_1005C18  +
lea eax [esi-1] +
push eax  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_1005AC8  +
mov ebx eax +
test ebx ebx +
jl loc_1005C18  +
cmp esi 2 +
jnz loc_1005C0D  +
cmp word ptr [edi] 5Ch +
jnz loc_1005C0D  +
mov ebx 80070057h +
test ebx ebx +
jl loc_1005C18  +
mov eax [ebp+arg_4] +
mov [eax] edi +
jmp loc_1005C20  +
push edi  +
call ds:free  +
pop ecx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10012AC +
call sub_1005A8C  +
test byte ptr [ebp+8] 1 +
jz loc_1005C4E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 100Ch +
call __alloca_probe  +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi 800h +
push edi  +
mov esi offset word_100B350 +
push esi  +
push [ebp+uID]  +
xor ebx ebx +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+arg_4] +
push eax  +
push esi  +
lea eax [ebp+WideCharStr] +
push edi  +
push eax  +
call sub_1006B9B  +
and [ebp+var_1008] ebx +
add esp 10h +
lea eax [ebp+var_1008] +
push eax  +
call ds:GetConsoleOutputCP  +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_100572A  +
test eax eax +
jl loc_1005CE1  +
push [ebp+var_1008]  +
push offset aS  +
call ds:printf  +
pop ecx  +
pop ecx  +
mov ebx eax +
lea ecx [ebp+var_100C] +
mov [ebp+var_100C] offset off_10012AC +
call sub_1005A8C  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1006668  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
lea ecx [ebp+hMem] +
push ecx  +
push 400h  +
push [ebp+hMem]  +
push eax  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_1005D46  +
push [ebp+hMem]  +
push 28h  +
call sub_1005C5A  +
pop ecx  +
pop ecx  +
push [ebp+hMem]  +
call ds:__imp_LocalFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1005DC4  +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_1005DC4  +
cmp dword ptr [esi+10h] 0 +
jz loc_1005D89  +
mov eax [esi+14h] +
test eax eax +
jz loc_1005D89  +
push eax  +
push ecx  +
push offset aSS_0  +
jmp loc_1005D92  +
push dword ptr [esi+14h]  +
push ecx  +
push offset aSU  +
lea eax [ebp+var_804] +
push 800h  +
push eax  +
call sub_1005B4B  +
mov esi [esi+20h] +
add esp 14h +
test esi esi +
jnz loc_1005DB0  +
push 7Fh  +
pop esi  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
push 21h  +
call sub_1005C5A  +
add esp 0Ch +
jmp loc_1005DCC  +
push 22h  +
call sub_1005C5A  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_1006668  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+arg_14] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_10]  +
mov esi 80004005h +
push [ebp+arg_14]  +
call sub_10058D5  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1005E3B  +
push 0FFh  +
push eax  +
push [ebp+arg_8]  +
call [ebp+arg_0]  +
test eax eax +
jz loc_1005E39  +
mov eax [ebp+arg_18] +
mov ecx [eax] +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jl loc_1005E3B  +
mov byte_100C354 1 +
jmp loc_1005E3B  +
xor esi esi +
lea ecx [ebp+var_8] +
mov [ebp+var_8] offset off_10012AC +
call sub_1005A8C  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 58h +
test eax eax +
jnz loc_1005E6C  +
mov eax 80070057h +
jmp locret_1005EAE  +
mov ecx [eax] +
lea edx [ebp+var_58] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl locret_1005EAE  +
push esi  +
mov esi [ebp+var_20] +
add esi [ebp+var_28] +
push edi  +
mov edi [ebp+var_1C] +
push dword_100C350  +
adc edi [ebp+var_24] +
call sub_1005A66  +
push edi  +
push esi  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push 27h  +
call sub_1005C5A  +
add esp 14h +
pop edi  +
mov dword_100C350 eax +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax 80004005h +
mov esi eax +
mov dword_100B000 eax +
lea eax [ebp+ThreadId] +
push eax  +
xor ebx ebx +
push ebx  +
push [ebp+lpParameter]  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov edi eax +
cmp edi ebx +
jz loc_1005F2A  +
mov [ebp+var_1] 1 +
push 3E8h  +
push edi  +
call ds:WaitForSingleObject  +
cmp eax ebx +
jz loc_1005F15  +
cmp eax 102h +
jnz loc_1005F23  +
push [ebp+lpParameter]  +
call sub_1005E56  +
cmp eax ebx +
jge loc_1005F1E  +
mov esi eax +
jmp loc_1005F1B  +
mov esi dword_100B000 +
mov [ebp+var_1] bl +
cmp [ebp+var_1] bl +
jnz loc_1005EEE  +
push edi  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_10012C8 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10012C8 +
call sub_1005AAB  +
mov dword ptr [esi] offset off_10012AC +
mov ecx esi +
pop esi  +
jmp sub_1005A8C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_18] +
and [ebp+var_14] 0 +
push esi  +
mov [ebp+var_18] offset off_10012C8 +
test eax eax +
jnz loc_1005F9C  +
mov esi 80070057h +
lea ecx [ebp+var_18] +
call sub_1005F4A  +
mov eax esi +
pop esi  +
leave   +
retn 28h  +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jl loc_1005F8D  +
and [ebp+var_8] 0 +
and [ebp+var_C] 0 +
push ebx  +
mov [ebp+var_10] offset off_10012C8 +
push edi  +
mov eax [ebp+var_14] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+var_C] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jnz loc_10060B0  +
and [ebp+var_4] eax +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_10060A0  +
push [ebp+var_4]  +
call sub_10059FC  +
push [ebp+arg_4]  +
mov edi eax +
call sub_1005886  +
and [ebp+var_1C] 0 +
mov ebx eax +
test edi edi +
jnz loc_1006015  +
mov esi 8007007Bh +
jmp loc_1006091  +
lea eax [ebp+var_1C] +
push eax  +
push 0FDE9h  +
push edi  +
call sub_100572A  +
mov esi eax +
test esi esi +
jl loc_1006091  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+var_1C]  +
call sub_10058B8  +
test eax eax +
jz loc_1006091  +
xor eax eax +
cmp [ebp+arg_1C] eax +
jnz loc_1006061  +
cmp [ebp+arg_20] eax +
jnz loc_1006061  +
push [ebp+lpFileName]  +
call sub_10055EE  +
test eax eax +
jz loc_1006057  +
push [ebp+arg_8]  +
jmp loc_100605A  +
push [ebp+lpFileName]  +
call sub_10059FC  +
jmp loc_100606B  +
cmp [ebp+arg_24] eax +
mov eax [ebp+var_4] +
jz loc_100606B  +
mov eax edi +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005DE2  +
push [ebp+var_4]  +
mov esi eax +
mov eax [ebp+var_C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
lea ecx [ebp+var_20] +
mov [ebp+var_20] offset off_10012AC +
call sub_1005A8C  +
lea ecx [ebp+var_10] +
call sub_1005AAB  +
test esi esi +
jge loc_1005FBD  +
lea ecx [ebp+var_10] +
call sub_1005F4A  +
pop edi  +
pop ebx  +
jmp loc_1005F8D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005F4A  +
test byte ptr [ebp+8] 1 +
jz loc_10060DE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov esi offset off_10012AC +
mov [ebp+var_38] esi +
xor ebx ebx +
mov [ebp+var_34] ebx +
mov [ebp+ms_exc.disabled] ebx +
mov [ebp+var_30] esi +
mov [ebp+lpFileName] ebx +
mov [ebp+var_28] esi +
mov [ebp+var_24] ebx +
lea ecx [ebp+var_40] +
call ??0DNameNode@@IAE@XZ  +
mov [ebp+var_20] ebx +
mov edi ds:GetACP +
call edi  +
lea ecx [ebp+var_34] +
push ecx  +
push eax  +
push [ebp+lpMultiByteStr]  +
call sub_10057D9  +
mov [ebp+hMem] eax +
cmp eax ebx +
jge loc_1006171  +
lea ecx [ebp+var_40] +
call sub_1005F4A  +
mov [ebp+var_28] esi +
lea ecx [ebp+var_28] +
call sub_1005A8C  +
mov [ebp+var_30] esi +
lea ecx [ebp+var_30] +
call sub_1005A8C  +
mov [ebp+var_38] esi +
lea ecx [ebp+var_38] +
call sub_1005A8C  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+hMem] +
jmp loc_100632F  +
call edi  +
lea ecx [ebp+lpFileName] +
push ecx  +
push eax  +
push [ebp+arg_8]  +
call sub_10057D9  +
mov [ebp+hMem] eax +
cmp eax ebx +
jl loc_1006139  +
cmp [ebp+arg_10] ebx +
jz loc_100619C  +
lea eax [ebp+var_24] +
push eax  +
call sub_100567A  +
mov [ebp+hMem] eax +
cmp eax ebx +
jmp loc_10061DD  +
cmp [ebp+arg_14] ebx +
jz loc_10061A6  +
mov eax [ebp+lpFileName] +
jmp loc_10061E2  +
mov edi [ebp+lpFileName] +
push edi  +
call sub_10055EE  +
test eax eax +
jz loc_10061B8  +
mov [ebp+var_20] edi +
jmp loc_10061E5  +
lea eax [ebp+var_24] +
push eax  +
push edi  +
call sub_1005BAA  +
mov [ebp+hMem] eax +
cmp eax ebx +
jl loc_10061E5  +
cmp [ebp+var_24] ebx +
jnz loc_10061DA  +
lea eax [ebp+var_24] +
push eax  +
call sub_1005615  +
mov [ebp+hMem] eax +
cmp [ebp+hMem] ebx +
jl loc_10061E5  +
mov eax [ebp+var_24] +
mov [ebp+var_20] eax +
cmp [ebp+var_20] ebx +
jz loc_10062A4  +
lea eax [ebp+lpParameter] +
push eax  +
push [ebp+var_20]  +
call sub_1005A36  +
mov [ebp+hMem] eax +
cmp eax ebx +
jl loc_10062A4  +
lea ecx [ebp+var_48] +
call ??0DNameNode@@IAE@XZ  +
mov eax [ebp+lpParameter] +
mov ecx [eax] +
lea edx [ebp+var_44] +
push edx  +
push [ebp+var_34]  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+hMem] eax +
cmp eax ebx +
jl loc_100629C  +
mov eax [ebp+lpParameter] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+20h]  +
mov [ebp+hMem] eax +
cmp eax ebx +
jl loc_100629C  +
mov byte_100C354 bl +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+var_44]  +
push [ebp+var_20]  +
push [ebp+lpFileName]  +
push [ebp+arg_C]  +
push [ebp+var_34]  +
push [ebp+lpMultiByteStr]  +
push [ebp+arg_0]  +
call sub_1005F6D  +
mov [ebp+hMem] eax +
cmp eax ebx +
jl loc_100629C  +
cmp [ebp+arg_10] ebx +
jnz loc_100629C  +
cmp byte_100C354 bl +
jz loc_100629C  +
push 24h  +
call sub_1005C5A  +
pop ecx  +
push [ebp+lpParameter]  +
call sub_1005EB7  +
mov [ebp+hMem] eax +
cmp eax ebx +
jge loc_1006294  +
push eax  +
push 1Fh  +
call sub_1005C5A  +
pop ecx  +
jmp loc_100629B  +
push 25h  +
call sub_1005C5A  +
pop ecx  +
lea ecx [ebp+var_48] +
call sub_1005F4A  +
lea ecx [ebp+var_40] +
call sub_1005F4A  +
mov [ebp+var_28] esi +
lea ecx [ebp+var_28] +
call sub_1005A8C  +
mov [ebp+var_30] esi +
lea ecx [ebp+var_30] +
call sub_1005A8C  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10062FF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0C06D007Eh +
jz loc_10062E3  +
cmp eax 0C06D007Fh +
jz loc_10062E3  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007007Eh +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov esi offset off_10012AC +
xor ebx ebx +
cmp [ebp+hMem] ebx +
jge loc_100631C  +
push [ebp+hMem]  +
push [ebp+var_34]  +
push 23h  +
call sub_1005C5A  +
add esp 0Ch +
push [ebp+hMem]  +
call sub_1005D0C  +
mov [ebp+var_38] esi +
lea ecx [ebp+var_38] +
call sub_1005A8C  +
xor eax eax +
cmp [ebp+hMem] ebx +
setnl al  +
call __SEH_epilog4  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call unknown_libname_1  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10063E1  +
test eax eax +
jnz loc_10063E6  +
mov ecx [esi] +
test ecx ecx +
jz loc_10063DE  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10063D2  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100C37C +
push offset dword_100C36C  +
push dword_100C378  +
mov dword_100C36C eax +
push offset dword_100C35C  +
push offset dword_100C360  +
push offset dword_100C358  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100C368 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100646E  +
cmp eax esi +
jnz loc_1006461  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1006471  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1006448  +
xor esi esi +
inc esi  +
mov eax dword_100CF28 +
cmp eax esi +
jnz loc_1006484  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10064BF  +
mov eax dword_100CF28 +
test eax eax +
jnz loc_10064B9  +
mov dword_100CF28 esi +
push offset dword_1001218  +
push offset dword_100120C  +
call sub_10063C5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10064BF  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1006589  +
mov dword_100C374 esi +
mov eax dword_100CF28 +
cmp eax esi +
jnz loc_10064E3  +
push offset dword_1001208  +
push offset dword_1001200  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100CF28 2 +
cmp [ebp+var_1C] ebx +
jnz loc_10064F0  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100CF34 ebx +
jz loc_1006511  +
push offset dword_100CF34  +
call sub_1006FE9  +
pop ecx  +
test eax eax +
jz loc_1006511  +
push ebx  +
push 2  +
push ebx  +
call dword_100CF34  +
push dword_100C35C  +
push dword_100C360  +
push dword_100C358  +
call sub_1004CAF  +
add esp 0Ch +
mov dword_100C370 eax +
cmp dword_100C364 ebx +
jnz loc_100656F  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_100C370 eax +
xor ebx ebx +
cmp dword_100C364 ebx +
jnz loc_100656F  +
push eax  +
call ds:_exit  +
cmp dword_100C374 ebx +
jnz loc_100657D  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100C370 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jz loc_10065A6  +
xor eax eax +
jmp loc_10065F3  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_10065A2  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10065E0  +
cmp ecx 20Bh +
jnz loc_10065A2  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10065A2  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_10065EE  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10065A2  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100C364 eax +
call sub_10070F7  +
push eax  +
call ds:__set_app_type  +
or dword_100CF20 0FFFFFFFFh +
or dword_100CF24 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100C384 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100C380 +
mov [eax] ecx +
call sub_100633C  +
cmp dword_100B018 0 +
jnz loc_100664C  +
push offset loc_1007089  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1007071  +
xor eax eax +
retn   +
***
call sub_1007136  +
jmp sub_1006426  +
***
cmp ecx dword_100B004 +
jnz loc_1006673  +
retn 0  +
jmp loc_10071CC  +
***
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_10066A1  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_10066BD  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_10066D9  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_100671A  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_10066E7  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_1006715  +
cmp edx [esp+arg_4] +
ja loc_1006715  +
jb loc_1006716  +
cmp eax [esp+arg_0] +
jbe loc_1006716  +
dec esi  +
xor edx edx +
mov eax esi +
dec edi  +
jnz loc_1006724  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1006749  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1006668  +
push offset dword_100B004  +
call sub_1006D60  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1006668  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1006848  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_C] esi +
jnz loc_1006940  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10068F3  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10069B7  +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
cmp ebx esi +
jnz loc_1006959  +
cmp edi esi +
jnz loc_100695D  +
cmp [ebp+arg_4] esi +
jnz loc_1006962  +
xor eax eax +
jmp loc_10069B5  +
cmp edi esi +
jz loc_1006962  +
cmp [ebp+arg_4] esi +
ja loc_1006970  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
jmp loc_10069A5  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
cmp [ebp+arg_4] ebx +
jbe loc_10069BA  +
inc ebx  +
push ebx  +
push edi  +
call sub_1007FEF  +
add esp 10h +
cmp eax 0FFFFFFFEh +
jz loc_10069B2  +
cmp eax esi +
jge loc_10069B5  +
xor ecx ecx +
mov [edi] cx +
cmp eax 0FFFFFFFEh +
jnz loc_10069B2  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10068F3  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
push [ebp+arg_4]  +
push edi  +
call sub_1007FEF  +
add esp 10h +
cmp eax 0FFFFFFFEh +
jnz loc_100698B  +
cmp ebx 0FFFFFFFFh +
jnz loc_100698F  +
jmp loc_10069B2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1006915  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp eax ebx +
jz loc_1006A13  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_1006A2E  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10068F3  +
add esp 14h +
mov eax esi +
jmp loc_1006A6A  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_1006A39  +
mov [eax] bl +
jmp loc_1006A13  +
mov edx eax +
cmp [edx] bl +
jz loc_1006A43  +
inc edx  +
dec edi  +
jnz loc_1006A3B  +
cmp edi ebx +
jz loc_1006A35  +
mov cl [esi] +
mov [edx] cl +
inc edx  +
inc esi  +
cmp cl bl +
jz loc_1006A54  +
dec edi  +
jnz loc_1006A47  +
cmp edi ebx +
jnz loc_1006A68  +
mov [eax] bl +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1006A1D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_1006A8C  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_1006AA7  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10068F3  +
add esp 14h +
mov eax esi +
jmp loc_1006AD7  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_1006AB2  +
mov [ecx] bl +
jmp loc_1006A8C  +
mov edx ecx +
mov al [esi] +
mov [edx] al +
inc edx  +
inc esi  +
cmp al bl +
jz loc_1006AC1  +
dec edi  +
jnz loc_1006AB4  +
cmp edi ebx +
jnz loc_1006AD5  +
mov [ecx] bl +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1006A96  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp [ebp+arg_C] ebx +
jnz loc_1006B03  +
cmp esi ebx +
jnz loc_1006B07  +
cmp [ebp+arg_4] ebx +
jnz loc_1006B0E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp esi ebx +
jz loc_1006B0E  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_1006B29  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10068F3  +
add esp 14h +
mov eax esi +
jmp loc_1006AFE  +
cmp [ebp+arg_C] ebx +
jnz loc_1006B32  +
mov [esi] bl +
jmp loc_1006AFC  +
mov edx [ebp+arg_8] +
cmp edx ebx +
jnz loc_1006B3D  +
mov [esi] bl +
jmp loc_1006B0E  +
cmp [ebp+arg_C] 0FFFFFFFFh +
mov eax esi +
jnz loc_1006B54  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_1006B6D  +
dec edi  +
jnz loc_1006B45  +
jmp loc_1006B6D  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_1006B66  +
dec edi  +
jz loc_1006B66  +
dec [ebp+arg_C]  +
jnz loc_1006B54  +
cmp [ebp+arg_C] ebx +
jnz loc_1006B6D  +
mov [eax] bl +
cmp edi ebx +
jnz loc_1006AFC  +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_1006B86  +
mov eax [ebp+arg_4] +
push 50h  +
mov [esi+eax-1] bl +
pop eax  +
jmp loc_1006AFE  +
mov [esi] bl +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1006B18  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_1006BB0  +
cmp [ebp+arg_4] esi +
ja loc_1006BD0  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10068F3  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
cmp [ebp+arg_8] esi +
jz loc_1006BB0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_1007FEF  +
add esp 10h +
cmp eax esi +
jge loc_1006BCC  +
xor ecx ecx +
mov [edi] cx +
cmp eax 0FFFFFFFEh +
jnz loc_1006BC9  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_1006BBC  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1006D96  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1006EC3  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1006E28  +
jmp loc_1006DD0  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_1006DFB  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_1006E32  +
jg loc_1006E3B  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1006DD0  +
cmp [ebp+var_1] 0 +
jz loc_1006E28  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1006E1A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1006E08  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1006E6F  +
cmp dword_100CF30 0 +
jz loc_1006E6F  +
push offset dword_100CF30  +
call sub_1006FE9  +
add esp 4 +
test eax eax +
jz loc_1006E6F  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_100CF30  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1006E90  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1006EA8  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1006E28  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1006E08  +
***
mov dword_100C378 1 +
xor eax eax +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1006F36  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1006F36  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1006F30  +
cmp eax 19930521h +
jz loc_1006F30  +
cmp eax 19930522h +
jz loc_1006F30  +
cmp eax 1994000h +
jnz loc_1006F36  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1006EF8+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1006F76  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1006F72  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1006FDD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1006FD5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1006FDF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1006FC5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_1006F60  +
pop ecx  +
test eax eax +
jz loc_1007046  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1006FA0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007046  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100704F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
xor eax eax +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10070EA  +
cmp ecx 0FFFFFFFFh +
jz loc_10070EA  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10070E3  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10070E3  +
cmp edx 10000000h +
jnb loc_10070E3  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10070E3  +
jmp loc_10070DE  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100712C  +
push eax  +
call sub_1007091  +
test eax eax +
jz loc_100712C  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1007121  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100712C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100B004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1007168  +
test eax ebx +
jz loc_1007168  +
not eax  +
mov dword_100B008 eax +
jmp loc_10071C3  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10071AF  +
test dword_100B004 ebx +
jnz loc_10071B4  +
mov esi 0BB40E64Fh +
mov dword_100B004 esi +
not esi  +
mov dword_100B008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100C488 eax +
mov dword_100C484 ecx +
mov dword_100C480 edx +
mov dword_100C47C ebx +
mov dword_100C478 esi +
mov dword_100C474 edi +
mov word_100C4A0 ss +
mov word_100C494 cs +
mov word_100C470 ds +
mov word_100C46C es +
mov word_100C468 fs +
mov word_100C464 gs +
pushf   +
pop dword_100C498  +
mov eax [ebp+0] +
mov dword_100C48C eax +
mov eax [ebp+4] +
mov dword_100C490 eax +
lea eax [ebp+8] +
mov dword_100C49C eax +
mov eax [ebp-320h] +
mov dword_100C3D8 10001h +
mov eax dword_100C490 +
mov dword_100C394 eax +
mov dword_100C388 0C0000409h +
mov dword_100C38C 1 +
mov eax dword_100B004 +
mov [ebp-328h] eax +
mov eax dword_100B008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
or eax eax +
jnz loc_10072F1  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_1007338  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10072FF  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_100732D  +
cmp edx [esp+arg_4] +
ja loc_100732D  +
jb loc_1007336  +
cmp eax [esp+arg_0] +
jbe loc_1007336  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
xor eax eax +
inc eax  +
push edi  +
mov edi [ebp+arg_4] +
test [ebp+arg_14] al +
jz loc_100738D  +
sub [ebp+arg_C] 20h +
test [ebp+arg_14] 80h +
mov [ebp+var_24] 25h +
jz loc_100739E  +
push 2  +
mov byte ptr [ebp-23h] 23h +
pop eax  +
push esi  +
mov [ebp+eax+var_24] 2Eh +
push 0Ah  +
lea eax [ebp+eax-23h] +
push eax  +
push [ebp+arg_10]  +
call ds:_itoa  +
lea eax [ebp+var_24] +
add esp 0Ch +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10073BD  +
mov cl byte ptr [ebp+arg_C] +
sub eax esi +
mov [ebp+eax+var_24] cl +
mov byte ptr [ebp+eax-23h] 0 +
mov eax [ebp+arg_8] +
lea esi [edi+eax-1] +
mov byte ptr [esi] 0 +
push ecx  +
push ecx  +
mov ecx [ebp+var_28] +
fld  qword ptr [ecx] +
lea ecx [ebp+var_24] +
fstp  [esp+38h+var_38] +
push ecx  +
push eax  +
push edi  +
call ds:_snprintf  +
add esp 14h +
cmp byte ptr [esi] 0 +
pop esi  +
jnz loc_1007403  +
test eax eax +
jle loc_1007403  +
xor eax eax +
jmp loc_1007409  +
push 16h  +
mov byte ptr [edi] 0 +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1006668  +
leave   +
retn   +
***
mov ecx [eax+0Ch] +
test cl 40h +
jz loc_1007429  +
cmp dword ptr [eax+8] 0 +
jz loc_100745E  +
add dword ptr [eax+4] 0FFFFFFFEh +
mov edx 0FFFFh +
js loc_1007441  +
mov ecx [eax] +
mov [ecx] si +
add dword ptr [eax] 2 +
movzx ecx si +
jmp loc_1007449  +
or ecx 20h +
mov [eax+0Ch] ecx +
mov ecx edx +
cmp cx dx +
jnz loc_100745E  +
push eax  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_100745E  +
or dword ptr [edi] 0FFFFFFFFh +
retn   +
inc dword ptr [edi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_100748F  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_100741B  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_100748E  +
cmp [ebp+arg_4] 0 +
jg loc_1007475  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebx+0Ch] 40h +
push edi  +
mov edi eax +
jz loc_10074B2  +
cmp dword ptr [ebx+8] 0 +
jnz loc_10074B2  +
mov eax [ebp+arg_4] +
add [edi] eax +
jmp loc_10074EE  +
cmp [ebp+arg_4] 0 +
jle loc_10074EE  +
push esi  +
mov eax [ebp+arg_0] +
movzx esi word ptr [eax] +
dec [ebp+arg_4]  +
mov eax ebx +
call sub_100741B  +
add [ebp+arg_0] 2 +
cmp dword ptr [edi] 0FFFFFFFFh +
jnz loc_10074E7  +
call ds:__imp__errno  +
cmp dword ptr [eax] 2Ah +
jnz loc_10074ED  +
push 3Fh  +
mov eax ebx +
pop esi  +
call sub_100741B  +
cmp [ebp+arg_4] 0 +
jg loc_10074B9  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_428] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_44C] edi +
mov [ebp+var_408] edi +
mov [ebp+var_430] edi +
mov [ebp+var_40C] edi +
mov [ebp+var_424] edi +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_42C] edi +
cmp eax edi +
jnz loc_100757A  +
call ds:__imp__errno  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_10068F3  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1007FB9  +
cmp esi edi +
jz loc_1007559  +
movzx ecx word ptr [esi] +
mov [ebp+var_420] edi +
mov [ebp+var_414] edi +
mov [ebp+var_440] edi +
mov [ebp+var_448] edi +
mov [ebp+var_41C] ecx +
cmp cx di +
jz loc_1007FB3  +
inc esi  +
inc esi  +
cmp [ebp+var_420] edi +
mov [ebp+var_450] esi +
jl loc_1007F9E  +
lea eax [ecx-20h] +
cmp ax 58h +
ja loc_10075D4  +
movzx eax cx +
movzx eax byte ptr ds:ExceptionInfo.ExceptionRecord[eax] +
and eax 0Fh +
jmp loc_10075D6  +
xor eax eax +
mov edx [ebp+var_440] +
imul eax eax +
movzx eax ds:byte_1001328[eax+edx] +
push 8  +
shr eax 4 +
pop edx  +
mov [ebp+var_440] eax +
cmp eax edx +
jz loc_1007559  +
cmp eax 7 +
ja loc_1007F7B  +
jmp ds:off_1007FCA[eax*4]  +
or [ebp+var_40C] 0FFFFFFFFh +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_430] edi +
mov [ebp+var_424] edi +
mov [ebp+var_408] edi +
mov [ebp+var_42C] edi +
jmp loc_1007F89  +
movzx eax cx +
sub eax 20h +
jz loc_100768B  +
sub eax 3 +
jz loc_100767C  +
sub eax edx +
jz loc_1007670  +
dec eax  +
dec eax  +
jz loc_1007664  +
sub eax 3 +
jnz loc_1007F7B  +
or [ebp+var_408] edx +
jmp loc_1007F89  +
or [ebp+var_408] 4 +
jmp loc_1007F89  +
or [ebp+var_408] 1 +
jmp loc_1007F89  +
or [ebp+var_408] 80h +
jmp loc_1007F89  +
or [ebp+var_408] 2 +
jmp loc_1007F89  +
cmp cx 2Ah +
jnz loc_10076C8  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_430] eax +
jge loc_1007F89  +
or [ebp+var_408] 4 +
neg [ebp+var_430]  +
jmp loc_1007F89  +
mov eax [ebp+var_430] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_430] eax +
jmp loc_1007F89  +
mov [ebp+var_40C] edi +
jmp loc_1007F89  +
cmp cx 2Ah +
jnz loc_1007719  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_40C] eax +
jge loc_1007F89  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_1007F89  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_1007F89  +
movzx eax cx +
cmp eax 49h +
jz loc_100778D  +
cmp eax 68h +
jz loc_1007781  +
cmp eax 6Ch +
jz loc_100775E  +
cmp eax 77h +
jnz loc_1007F89  +
or [ebp+var_408] 800h +
jmp loc_1007F89  +
cmp word ptr [esi] 6Ch +
jnz loc_1007775  +
inc esi  +
inc esi  +
or [ebp+var_408] 1000h +
jmp loc_1007F89  +
or [ebp+var_408] 10h +
jmp loc_1007F89  +
or [ebp+var_408] 20h +
jmp loc_1007F89  +
movzx eax word ptr [esi] +
cmp ax 36h +
jnz loc_10077AF  +
cmp word ptr [esi+2] 34h +
jnz loc_10077AF  +
add esi 4 +
or [ebp+var_408] 8000h +
jmp loc_1007F89  +
cmp ax 33h +
jnz loc_10077CE  +
cmp word ptr [esi+2] 32h +
jnz loc_10077CE  +
add esi 4 +
and [ebp+var_408] 0FFFF7FFFh +
jmp loc_1007F89  +
cmp ax 64h +
jz loc_1007F89  +
cmp ax 69h +
jz loc_1007F89  +
cmp ax 6Fh +
jz loc_1007F89  +
cmp ax 75h +
jz loc_1007F89  +
cmp ax 78h +
jz loc_1007F89  +
cmp ax 58h +
jz loc_1007F89  +
mov [ebp+var_440] edi +
mov eax [ebp+var_428] +
lea edi [ebp+var_420] +
mov esi ecx +
mov [ebp+var_42C] 1 +
call sub_100741B  +
jmp loc_1007F81  +
movzx eax cx +
cmp eax 64h +
jg loc_1007A88  +
jz loc_1007ADB  +
cmp eax 53h +
jg loc_1007960  +
jz loc_10078CC  +
sub eax 41h +
jz loc_1007864  +
dec eax  +
dec eax  +
jz loc_10078B0  +
dec eax  +
dec eax  +
jz loc_1007864  +
dec eax  +
dec eax  +
jnz loc_1007DDE  +
add ecx 20h +
mov dword ptr [ebp+var_438] 1 +
mov [ebp+var_41C] ecx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] edi +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov eax 200h +
mov [ebp+var_434] eax +
jge loc_1007B0A  +
mov [ebp+var_40C] 6 +
jmp loc_1007B71  +
test [ebp+var_408] 830h +
jnz loc_1007982  +
or [ebp+var_408] 20h +
jmp loc_1007982  +
test [ebp+var_408] 830h +
jnz loc_10078DF  +
or [ebp+var_408] 20h +
mov edi [ebp+var_40C] +
cmp edi 0FFFFFFFFh +
jnz loc_10078EF  +
mov edi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_1007DA2  +
test ebx ebx +
jnz loc_100791D  +
mov eax off_100B020 +
mov [ebp+var_410] eax +
and [ebp+var_414] 0 +
mov esi [ebp+var_410] +
test edi edi +
jle loc_1007DDE  +
mov al [esi] +
test al al +
jz loc_1007DDE  +
movzx eax al +
push eax  +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_100794C  +
inc esi  +
inc esi  +
inc [ebp+var_414]  +
cmp [ebp+var_414] edi +
jl loc_1007932  +
jmp loc_1007DDE  +
sub eax 58h +
jz loc_1007BFA  +
dec eax  +
dec eax  +
jz loc_10079FB  +
sub eax 7 +
jz loc_1007877  +
dec eax  +
dec eax  +
jnz loc_1007DDE  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor esi esi +
inc esi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_42C] esi +
mov [ebp+var_418] ebx +
mov dword ptr [ebp+var_458] eax +
jz loc_10079DD  +
mov [ebp+var_444] al +
mov eax ds:__mb_cur_max +
mov byte ptr [ebp-443h] 0 +
push dword ptr [eax]  +
lea eax [ebp+var_444] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
call ds:mbtowc  +
add esp 0Ch +
test eax eax +
jge loc_10079E4  +
mov [ebp+var_454] esi +
jmp loc_10079E4  +
mov [ebp+var_404] ax +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov [ebp+var_414] esi +
jmp loc_1007DDE  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
cmp eax edi +
jz loc_1007A6C  +
mov esi [eax+4] +
cmp esi edi +
jz loc_1007A6C  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_1007559  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_1007A5B  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_1007559  +
mov edx esi +
not edx  +
test dl cl +
jz loc_1007559  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_42C] ecx +
jmp loc_1007DD8  +
mov [ebp+var_42C] edi +
mov [ebp+var_410] esi +
jmp loc_1007DD8  +
mov eax off_100B020 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1007A7A  +
sub eax edx +
jmp loc_1007DD8  +
cmp eax 70h +
jg loc_1007C06  +
jz loc_1007BF4  +
cmp eax 65h +
jl loc_1007DDE  +
cmp eax 67h +
jle loc_1007877  +
cmp eax 69h +
jz loc_1007ADB  +
cmp eax 6Eh +
jz loc_1007559  +
cmp eax 6Fh +
jnz loc_1007DDE  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] edx +
jz loc_1007AEC  +
or [ebp+var_408] 200h +
jmp loc_1007AEC  +
or [ebp+var_408] 40h +
mov [ebp+var_41C] 0Ah +
mov eax [ebp+var_408] +
test eax 8000h +
jz loc_1007C6A  +
add ebx edx +
mov eax [ebx-8] +
mov edx [ebx-4] +
jmp loc_1007C9F  +
jnz loc_1007B1E  +
cmp cx 67h +
jnz loc_1007B71  +
mov [ebp+var_40C] 1 +
jmp loc_1007B71  +
cmp [ebp+var_40C] eax +
jle loc_1007B2C  +
mov [ebp+var_40C] eax +
mov edi 0A3h +
cmp [ebp+var_40C] edi +
jle loc_1007B71  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call ds:malloc  +
pop ecx  +
mov ecx [ebp+var_41C] +
mov [ebp+var_448] eax +
test eax eax +
jz loc_1007B6B  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
jmp loc_1007B71  +
mov [ebp+var_40C] edi +
test byte ptr [ebp+var_408] 80h +
jz loc_1007B84  +
or dword ptr [ebp+var_438] 80h +
mov eax [ebx] +
push dword ptr [ebp+var_438]  +
mov esi [ebp+var_410] +
push [ebp+var_40C]  +
add ebx 8 +
mov [ebp+var_468] eax +
mov eax [ebx-4] +
mov [ebp+var_464] eax +
movsx eax cl +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_468] +
push esi  +
push eax  +
mov [ebp+var_418] ebx +
call sub_1007365  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_1007BDF  +
or [ebp+var_408] 100h +
inc [ebp+var_410]  +
mov eax [ebp+var_410] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1007BE8  +
jmp loc_1007A81  +
mov [ebp+var_40C] edx +
mov [ebp+var_44C] 7 +
jmp loc_1007C2A  +
sub eax 73h +
jz loc_10078DF  +
dec eax  +
dec eax  +
jz loc_1007AE2  +
sub eax 3 +
jnz loc_1007DDE  +
mov [ebp+var_44C] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] 10h +
jz loc_1007AEC  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_43C] ax +
mov eax [ebp+var_44C] +
add eax 51h +
mov word ptr [ebp+var_43C+2] ax +
mov [ebp+var_424] 2 +
jmp loc_1007AEC  +
test eax 1000h +
jnz loc_1007AFD  +
add ebx 4 +
test al 20h +
jz loc_1007C93  +
mov [ebp+var_418] ebx +
test al 40h +
jz loc_1007C8C  +
movsx eax word ptr [ebx-4] +
jmp loc_1007C90  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_1007CA5  +
test al 40h +
mov eax [ebx-4] +
jz loc_1007C9D  +
cdq   +
jmp loc_1007C9F  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_1007CC9  +
cmp edx edi +
jg loc_1007CC9  +
jl loc_1007CB8  +
cmp eax edi +
jnb loc_1007CC9  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_1007CDB  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_1007CF0  +
mov [ebp+var_40C] 1 +
jmp loc_1007D0A  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_1007D0A  +
mov [ebp+var_40C] eax +
mov eax edi +
or eax ebx +
jnz loc_1007D16  +
and [ebp+var_424] eax +
lea esi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_1007D32  +
mov eax edi +
or eax ebx +
jz loc_1007D5F  +
mov eax [ebp+var_41C] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call __aulldvrm  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_45C] ebx +
mov edi eax +
mov ebx edx +
jle loc_1007D5A  +
add ecx [ebp+var_44C] +
mov [esi] cl +
dec esi  +
jmp loc_1007D1C  +
lea eax [ebp+var_205] +
sub eax esi +
inc esi  +
test [ebp+var_408] 200h +
mov [ebp+var_414] eax +
mov [ebp+var_410] esi +
jz loc_1007DDE  +
test eax eax +
jz loc_1007D8B  +
mov eax esi +
cmp byte ptr [eax] 30h +
jz loc_1007DDE  +
dec [ebp+var_410]  +
mov eax [ebp+var_410] +
inc [ebp+var_414]  +
mov byte ptr [eax] 30h +
jmp loc_1007DDE  +
test ebx ebx +
jnz loc_1007DB1  +
mov eax off_100B024 +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_42C] 1 +
jmp loc_1007DCC  +
dec edi  +
cmp word ptr [eax] 0 +
jz loc_1007DD0  +
inc eax  +
inc eax  +
test edi edi +
jnz loc_1007DC3  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_414] eax +
cmp [ebp+var_454] 0 +
jnz loc_1007F5E  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_1007E20  +
test eax 100h +
jz loc_1007E00  +
push 2Dh  +
jmp loc_1007E0E  +
test al 1 +
jz loc_1007E08  +
push 2Bh  +
jmp loc_1007E0E  +
test al 2 +
jz loc_1007E20  +
push 20h  +
pop ecx  +
mov word ptr [ebp+var_43C] cx +
mov [ebp+var_424] 1 +
mov esi [ebp+var_430] +
sub esi [ebp+var_414] +
sub esi [ebp+var_424] +
mov [ebp+var_45C] esi +
test al 0Ch +
jnz loc_1007E53  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_1007466  +
add esp 0Ch +
push [ebp+var_424]  +
mov ebx [ebp+var_428] +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+var_420] +
call sub_1007497  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
pop ecx  +
jz loc_1007E97  +
test byte ptr [ebp+var_408] 4 +
jnz loc_1007E97  +
push ebx  +
push esi  +
push 30h  +
lea eax [ebp+var_420] +
call sub_1007466  +
add esp 0Ch +
cmp [ebp+var_42C] 0 +
jnz loc_1007F1C  +
mov eax [ebp+var_414] +
test eax eax +
jle loc_1007F1C  +
mov ecx [ebp+var_410] +
mov [ebp+var_41C] ecx +
mov [ebp+var_434] eax +
mov eax ds:__mb_cur_max +
push dword ptr [eax]  +
dec [ebp+var_434]  +
push [ebp+var_41C]  +
lea eax [ebp+var_458] +
push eax  +
call ds:mbtowc  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jle loc_1007F13  +
mov eax [ebp+var_428] +
mov esi dword ptr [ebp+var_458] +
lea edi [ebp+var_420] +
call sub_100741B  +
add [ebp+var_41C] ebx +
cmp [ebp+var_434] 0 +
mov esi [ebp+var_45C] +
jg loc_1007EBC  +
jmp loc_1007F35  +
or [ebp+var_420] 0FFFFFFFFh +
jmp loc_1007F35  +
push [ebp+var_414]  +
lea eax [ebp+var_420] +
push [ebp+var_410]  +
call sub_1007497  +
pop ecx  +
pop ecx  +
cmp [ebp+var_420] 0 +
jl loc_1007F5E  +
test byte ptr [ebp+var_408] 4 +
jz loc_1007F5E  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_1007466  +
add esp 0Ch +
cmp [ebp+var_448] 0 +
jz loc_1007F7B  +
push [ebp+var_448]  +
call ds:free  +
and [ebp+var_448] 0 +
pop ecx  +
mov ebx [ebp+var_418] +
mov esi [ebp+var_450] +
xor edi edi +
movzx eax word ptr [esi] +
mov [ebp+var_41C] eax +
cmp ax di +
jz loc_1007F9E  +
mov ecx eax +
jmp loc_10075A8  +
cmp [ebp+var_440] edi +
jz loc_1007FB3  +
cmp [ebp+var_440] 7 +
jnz loc_1007559  +
mov eax [ebp+var_420] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006668  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_100800A  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_100803B  +
cmp edi 3FFFFFFFh +
jbe loc_1008035  +
call ds:__imp__errno  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10068F3  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10080C6  +
lea eax [edi+edi] +
mov [ebp+var_1C] eax +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_10074F6  +
xor ecx ecx +
xor ebx ebx +
add esp 0Ch +
cmp eax ebx +
mov [ebp+arg_4] eax +
mov [esi+edi*2-2] cx +
jge loc_1008080  +
cmp [ebp+var_1C] ebx +
jl loc_10080C2  +
cmp esi ebx +
jz loc_10080C5  +
cmp edi ebx +
jbe loc_10080C5  +
mov [esi] cx +
jmp loc_10080C5  +
dec [ebp+var_1C]  +
js loc_100808F  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_10080A0  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1008100  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10080C2  +
dec [ebp+var_1C]  +
js loc_10080AC  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_10080BD  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1008100  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10080C2  +
mov eax [ebp+arg_4] +
jmp loc_10080C5  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov ebx offset unk_100B028 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call ds:_fileno  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_1008134  +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1008274  +
test al 40h +
jz loc_1008146  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_1008128  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_100815F  +
mov [esi+4] ebx +
test al 10h +
jz loc_10081BA  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_10081C2  +
mov eax ds:_iob +
lea ecx [eax+20h] +
cmp esi ecx +
jz loc_100818B  +
add eax 40h +
cmp esi eax +
jnz loc_1008199  +
push [ebp+arg_4]  +
call ds:_isatty  +
pop ecx  +
test eax eax +
jnz loc_10081C2  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10068F3  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1008273  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_10081B2  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_1008245  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_10081F6  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_100823B  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_1008219  +
cmp eax 0FFFFFFFEh +
jz loc_1008219  +
mov edx ds:__pioinfo +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax [edx+ecx*4] +
jmp loc_100821E  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 20h +
jz loc_100823B  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call ds:_lseeki64  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_1008261  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_100825C  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_100826A  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1008272  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 50h  +
push 40h  +
call LocalAlloc  +
mov esi eax +
test esi esi +
jnz loc_10082A3  +
xor eax eax +
jmp loc_100832F  +
cmp [ebp+dwBytes] 0 +
jnz loc_10082B0  +
mov [ebp+dwBytes] 1080h +
push [ebp+dwBytes]  +
push 40h  +
call GlobalAlloc  +
mov [esi] eax +
test eax eax +
jz loc_100829C  +
mov eax [ebp+arg_8] +
mov edx 8000h +
test eax eax +
jnz loc_10082CE  +
mov eax edx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_10082D7  +
mov ecx edx +
push edi  +
mov [esi+2Ch] eax +
mov [esi+30h] ecx +
test eax eax +
jbe loc_1008325  +
mov edi 0FFFFFC00h +
cmp dword ptr [esi+30h] 0 +
jbe loc_1008325  +
mov eax [esi+2Ch] +
inc eax  +
push eax  +
push 40h  +
call GlobalAlloc  +
mov [esi+4] eax +
test eax eax +
jz loc_1008319  +
push dword ptr [esi+30h]  +
push 40h  +
call GlobalAlloc  +
mov [esi+10h] eax +
test eax eax +
jnz loc_1008334  +
push dword ptr [esi+4]  +
call GlobalFree  +
add [esi+2Ch] edi +
add [esi+30h] edi +
cmp dword ptr [esi+2Ch] 0 +
ja loc_10082E7  +
push dword ptr [esi]  +
call GlobalFree  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax esi +
jmp loc_100832E  +
***
mov eax 8000h +
push eax  +
push 1080h  +
push eax  +
call sub_1008287  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1008398  +
mov eax [esi] +
test eax eax +
jz loc_1008370  +
push eax  +
call GlobalFree  +
and dword ptr [esi] 0 +
mov eax [esi+4] +
test eax eax +
jz loc_1008381  +
push eax  +
call GlobalFree  +
and dword ptr [esi+4] 0 +
mov eax [esi+10h] +
test eax eax +
jz loc_1008392  +
push eax  +
call GlobalFree  +
and dword ptr [esi+10h] 0 +
push esi  +
call LocalFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+lpPathName] edi +
jnz loc_10083BB  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 0FFFFFFFEh +
jmp loc_1008406  +
push edi  +
push [ebp+lpPathName]  +
cmp [ebp+arg_4] edi +
jnz loc_10083D8  +
call _lcreat  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1008406  +
push 0FFFFFFFEh  +
pop eax  +
jmp loc_1008415  +
call _lopen  +
mov esi [ebp+arg_8] +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jz loc_1008412  +
push 2  +
push edi  +
push eax  +
call _llseek  +
cmp eax edi +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
jl loc_100840B  +
push edi  +
push edi  +
push dword ptr [esi]  +
call _llseek  +
test eax eax +
jnz loc_100840B  +
xor eax eax +
inc eax  +
jmp loc_1008415  +
push dword ptr [esi]  +
call _lclose  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+hFile]  +
call _llseek  +
test eax eax +
jz loc_100843E  +
or eax 0FFFFFFFFh +
jmp loc_10084D4  +
cmp [ebp+arg_4] 0FFFFFFFEh +
jz loc_1008457  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call _llseek  +
test eax eax +
jz loc_1008457  +
push 0FFFFFFFEh  +
pop eax  +
jmp loc_10084D4  +
push esi  +
mov esi [ebp+arg_8] +
mov ecx [esi+2Ch] +
mov edx [esi+4] +
lea eax [edx+ecx+1] +
push edi  +
mov edi [esi+30h] +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov eax [esi+10h] +
add edi eax +
push ecx  +
mov [esi+1Ch] ebx +
mov [esi+14h] edi +
mov [esi+18h] eax +
mov [esi+28h] ebx +
push edx  +
jmp loc_10084A7  +
cmp edi 0FFFFFFFFh +
jz loc_10084BA  +
push edi  +
push dword ptr [esi+4]  +
push [ebp+arg_4]  +
call _lwrite  +
cmp eax edi +
jnz loc_10084BF  +
add [esi+28h] eax +
cmp edi [esi+2Ch] +
jnz loc_10084B5  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+4]  +
push [ebp+hFile]  +
call _lread  +
mov edi eax +
cmp edi ebx +
ja loc_1008484  +
cmp edi 0FFFFFFFFh +
jnz loc_10084CF  +
or eax 0FFFFFFFFh +
jmp loc_10084D2  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
lea ecx [ecx+ecx-4] +
mov eax ecx +
jmp loc_10084D2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
lea edi [esi+24h] +
push edi  +
push [ebp+hFile]  +
lea eax [ebp+var_18] +
push eax  +
call sub_1008DF0  +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jz loc_1008517  +
cmp dword ptr [edi] 0Eh +
jl loc_1008517  +
or eax 0FFFFFFFFh +
jmp loc_100858A  +
lea eax [ebp+var_18] +
push eax  +
call sub_1008EA7  +
mov edi eax +
dec edi  +
neg edi  +
sbb edi edi +
inc edi  +
jz loc_1008549  +
cmp [ebp+var_10] 41h +
jz loc_1008534  +
push 0FFFFFFF8h  +
jmp loc_1008585  +
mov eax [ebp+var_C] +
push esi  +
push ebx  +
push ebx  +
dec eax  +
push eax  +
push [ebp+arg_4]  +
push [ebp+hFile]  +
call sub_1008B81  +
jmp loc_1008555  +
push esi  +
push [ebp+arg_4]  +
push [ebp+hFile]  +
call sub_1008420  +
cmp eax ebx +
jnz loc_100858A  +
push esi  +
push [ebp+arg_4]  +
push 46h  +
call sub_1008B2F  +
cmp eax ebx +
jnz loc_100858A  +
push [ebp+arg_4]  +
push [ebp+hFile]  +
call sub_1008907  +
cmp eax ebx +
jnz loc_100858A  +
test edi edi +
jz loc_1008588  +
mov eax [esi+28h] +
cmp eax [ebp+var_C] +
jz loc_1008588  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_100858A  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006668  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 12Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+lpPathName] +
push esi  +
mov esi [ebp+arg_10] +
mov [ebp+var_12C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_128] eax +
test esi esi +
jnz loc_10085DB  +
push 0FFFFFFFAh  +
pop eax  +
jmp loc_10086DE  +
push edi  +
lea edi [esi+24h] +
push edi  +
lea eax [ebp+hFile] +
push eax  +
push 1  +
push ebx  +
call sub_10083A2  +
cmp eax 1 +
jnz loc_10086DD  +
push edi  +
push [ebp+hFile]  +
lea eax [ebp+var_11C] +
push eax  +
call sub_1008DF0  +
cmp eax 1 +
jz loc_1008623  +
cmp dword ptr [edi] 0Eh +
jl loc_1008623  +
or esi 0FFFFFFFFh +
push [ebp+hFile]  +
jmp loc_10086D6  +
cmp [ebp+var_128] 0 +
jnz loc_1008634  +
push 0FFFFFFF9h  +
pop eax  +
jmp loc_10086DD  +
push [ebp+var_128]  +
lea eax [ebp+PathName] +
push 104h  +
push eax  +
call sub_1006A74  +
add esp 0Ch +
cmp [ebp+arg_C] 1 +
jnz loc_1008666  +
push [ebp+var_113]  +
lea eax [ebp+PathName] +
push eax  +
call sub_1008806  +
lea eax [ebp+var_11C] +
push eax  +
call sub_1008EA7  +
neg eax  +
sbb eax eax +
inc eax  +
inc eax  +
push eax  +
lea eax [ebp+PathName] +
push eax  +
push ebx  +
call [ebp+var_12C]  +
test eax eax +
jnz loc_100868F  +
xor esi esi +
jmp loc_1008618  +
push edi  +
lea eax [ebp+var_124] +
push eax  +
push 0  +
lea eax [ebp+PathName] +
push eax  +
call sub_10083A2  +
cmp eax 1 +
jz loc_10086B1  +
mov esi eax +
jmp loc_1008618  +
push esi  +
push [ebp+var_124]  +
push [ebp+hFile]  +
call sub_10084DE  +
push [ebp+hFile]  +
mov esi eax +
call _lclose  +
push [ebp+var_124]  +
call _lclose  +
mov eax esi +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006668  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi esi +
jmp loc_100872C  +
movzx eax byte ptr [esi] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jnz loc_1008724  +
mov al [esi] +
cmp al 2Fh +
jz loc_100871C  +
cmp al 5Ch +
jz loc_100871C  +
cmp al 3Ah +
jnz loc_1008724  +
push esi  +
call sub_1008A1B  +
mov edi eax +
push esi  +
call sub_1008A1B  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_1008701  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
call sub_10086F3  +
mov esi eax +
movzx eax byte ptr [esi] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jnz loc_1008765  +
mov al [esi] +
test al al +
jz loc_100876D  +
cmp al 2Eh +
jz loc_1008772  +
push esi  +
call sub_1008A1B  +
jmp loc_100874C  +
cmp byte ptr [esi] 2Eh +
jnz loc_1008777  +
lea eax [esi+1] +
jmp loc_1008779  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
call sub_10086F3  +
mov esi eax +
movzx eax byte ptr [esi] +
test al al +
jz loc_10087FC  +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jnz loc_10087BC  +
cmp byte ptr [esi] 2Eh +
jnz loc_10087BC  +
movzx eax byte ptr [esi+1] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jnz loc_10087BC  +
cmp [esi+1] al +
jz loc_10087FC  +
push edi  +
mov edi [ebp+lpString] +
push edi  +
call lstrlenA  +
add eax edi +
push eax  +
push edi  +
call sub_1008A4E  +
mov al [eax] +
cmp al 2Fh +
jz loc_10087EE  +
cmp al 5Ch +
jz loc_10087EE  +
cmp al 3Ah +
jz loc_10087EE  +
push offset dword_1001384  +
push [ebp+arg_4]  +
push edi  +
call sub_10069FB  +
add esp 0Ch +
push esi  +
push [ebp+arg_4]  +
push edi  +
call sub_10069FB  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call sub_100873E  +
mov edi eax +
test edi edi +
jz loc_10088FC  +
push ebx  +
mov bl [ebp+arg_4] +
cmp bl 41h +
jb loc_100882E  +
cmp bl 5Ah +
jbe loc_1008836  +
mov al bl +
sub al 61h +
cmp al 19h +
ja loc_1008894  +
movzx eax byte ptr [esi] +
jmp loc_100885E  +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jz loc_1008849  +
inc esi  +
inc esi  +
jmp loc_100885C  +
mov al [esi] +
cmp al 41h +
jl loc_1008853  +
cmp al 5Ah +
jle loc_1008862  +
cmp al 61h +
jl loc_100885B  +
cmp al 7Ah +
jle loc_1008862  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_100883B  +
movzx eax byte ptr [esi] +
push eax  +
call sub_1008951  +
test eax eax +
jz loc_100887C  +
mov al bl +
sub al 41h +
cmp al 19h +
ja loc_1008894  +
add bl 20h +
jmp loc_1008894  +
movzx eax byte ptr [esi] +
push eax  +
call sub_10089B6  +
test eax eax +
jz loc_1008894  +
mov al bl +
sub al 61h +
cmp al 19h +
ja loc_1008894  +
add bl 0E0h +
push edi  +
call lstrlenA  +
test eax eax +
jle loc_10088EC  +
movzx eax byte ptr [edi] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jnz loc_10088C2  +
cmp byte ptr [edi] 5Fh +
jnz loc_10088C2  +
movzx eax byte ptr [edi+1] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jz loc_10088C2  +
mov [edi] bl +
jmp loc_10088EC  +
cmp byte ptr [edi] 0 +
mov esi edi +
mov eax edi +
jz loc_10088D8  +
push eax  +
mov esi eax +
call sub_1008A1B  +
cmp byte ptr [eax] 0 +
jnz loc_10088CB  +
movzx eax byte ptr [esi] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jnz loc_10088EC  +
cmp byte ptr [esi] 5Fh +
jnz loc_10088EC  +
mov [esi] bl +
cmp byte ptr [edi] 0 +
pop ebx  +
jnz loc_10088FC  +
cmp byte ptr [edi-1] 2Eh +
jnz loc_10088FC  +
mov byte ptr [edi-1] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
lea eax [ebp+LastWriteTime] +
push eax  +
lea eax [ebp+LastAccessTime] +
push eax  +
lea eax [ebp+CreationTime] +
push eax  +
push [ebp+hFile]  +
call GetFileTime  +
test eax eax +
jnz loc_100892C  +
or eax 0FFFFFFFFh +
jmp locret_1008948  +
lea eax [ebp+LastWriteTime] +
push eax  +
lea eax [ebp+LastAccessTime] +
push eax  +
lea eax [ebp+CreationTime] +
push eax  +
push [ebp+arg_4]  +
call SetFileTime  +
neg eax  +
sbb eax eax +
and eax 2 +
dec eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax ds:NlsMbCodePageTag +
and dword ptr [ebp+CharType] 0 +
and dword ptr [ebp+SrcStr] 0 +
cmp byte ptr [eax] 0 +
jz loc_100897A  +
push dword ptr [ebp+TestChar]  +
call IsDBCSLeadByte  +
test eax eax +
jz loc_100897A  +
xor eax eax +
jmp locret_10089AD  +
push 1  +
lea eax [ebp+TestChar] +
push eax  +
push 0  +
push 2  +
lea eax [ebp+SrcStr] +
push eax  +
call ds:RtlMultiByteToUnicodeN  +
lea eax [ebp+CharType] +
push eax  +
push 1  +
lea eax [ebp+SrcStr] +
push eax  +
push 1  +
call GetStringTypeW  +
mov al byte ptr [ebp+CharType] +
and al 2 +
xor ecx ecx +
cmp al 2 +
setz cl  +
mov eax ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax ds:NlsMbCodePageTag +
and dword ptr [ebp+CharType] 0 +
and dword ptr [ebp+SrcStr] 0 +
cmp byte ptr [eax] 0 +
jz loc_10089DF  +
push dword ptr [ebp+TestChar]  +
call IsDBCSLeadByte  +
test eax eax +
jz loc_10089DF  +
xor eax eax +
jmp locret_1008A12  +
push 1  +
lea eax [ebp+TestChar] +
push eax  +
push 0  +
push 2  +
lea eax [ebp+SrcStr] +
push eax  +
call ds:RtlMultiByteToUnicodeN  +
lea eax [ebp+CharType] +
push eax  +
push 1  +
lea eax [ebp+SrcStr] +
push eax  +
push 1  +
call GetStringTypeW  +
mov al byte ptr [ebp+CharType] +
and al 1 +
xor ecx ecx +
cmp al 1 +
setz cl  +
mov eax ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ds:NlsMbCodePageTag +
cmp byte ptr [eax] 0 +
push esi  +
mov esi [ebp+arg_0] +
jz loc_1008A3C  +
movzx eax byte ptr [esi] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jz loc_1008A3C  +
inc esi  +
cmp byte ptr [esi] 0 +
jz loc_1008A42  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi [ebp+arg_0] +
jbe loc_1008AA0  +
mov eax ds:NlsMbCodePageTag +
cmp byte ptr [eax] 0 +
jz loc_1008A9F  +
and [ebp+arg_4] 0 +
dec edi  +
lea ebx [edi-1] +
mov esi ebx +
cmp esi [ebp+arg_0] +
jb loc_1008AA0  +
movzx eax byte ptr [esi] +
push eax  +
call IsDBCSLeadByte  +
test eax eax +
jz loc_1008A95  +
xor eax eax +
cmp [ebp+arg_4] eax +
setz al  +
dec esi  +
mov [ebp+arg_4] eax +
cmp esi [ebp+arg_0] +
jnb loc_1008A77  +
cmp [ebp+arg_4] 0 +
jz loc_1008AA0  +
mov edi ebx +
jmp loc_1008AA0  +
dec edi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
mov eax [esi+8] +
mov al [eax-1] +
mov ecx [esi+4] +
mov [ecx] al +
push dword ptr [esi+2Ch]  +
mov eax [esi+4] +
inc eax  +
push eax  +
push [ebp+hFile]  +
call _lread  +
mov edx [esi+2Ch] +
cmp eax edx +
jz loc_1008AF1  +
cmp eax 0FFFFFFFFh +
jnz loc_1008AE3  +
or eax 0FFFFFFFFh +
jmp loc_1008B25  +
test eax eax +
jbe loc_1008B0D  +
mov ecx [esi+4] +
lea eax [eax+ecx+1] +
mov [esi+8] eax +
cmp dword ptr [esi+1Ch] 0 +
mov eax [esi+4] +
lea ecx [eax+1] +
mov [esi+0Ch] ecx +
jz loc_1008B14  +
mov al [eax] +
mov ecx [ebp+arg_0] +
mov [ecx] al +
and dword ptr [esi+1Ch] 0 +
jmp loc_1008B22  +
mov eax 1F4h +
jmp loc_1008B25  +
test edx edx +
jz loc_1008ADE  +
mov al [ecx] +
mov ecx [ebp+arg_0] +
mov [ecx] al +
inc dword ptr [esi+0Ch]  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov eax [edi+10h] +
mov esi [edi+18h] +
sub esi eax +
cmp [ebp+hFile] 0FFFFFFFEh +
mov [edi+18h] eax +
jz loc_1008B68  +
push esi  +
push eax  +
push [ebp+hFile]  +
call _lwrite  +
cmp eax esi +
jz loc_1008B68  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setz cl  +
lea ecx [ecx+ecx-4] +
mov eax ecx +
jmp loc_1008B76  +
mov eax [edi+18h] +
mov cl [ebp+arg_0] +
mov [eax] cl +
inc dword ptr [edi+18h]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
xor edi edi +
inc edi  +
mov dword ptr [esi+20h] 10h +
cmp [ebp+arg_C] edi +
jnz loc_1008C22  +
xor ebx ebx +
push ebx  +
push 0Eh  +
push [ebp+hFile]  +
call _llseek  +
cmp eax 0Eh +
jz loc_1008BBA  +
or eax 0FFFFFFFFh +
jmp loc_1008DE4  +
cmp [ebp+arg_4] 0FFFFFFFEh +
jz loc_1008BD5  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call _llseek  +
test eax eax +
jz loc_1008BD5  +
push 0FFFFFFFEh  +
jmp loc_1008DE3  +
mov ecx [esi+4] +
mov eax [esi+2Ch] +
lea eax [eax+ecx+1] +
mov ecx [esi+30h] +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov eax [esi+10h] +
add ecx eax +
mov [esi+18h] eax +
mov eax 1000h +
mov edx eax +
sub edx [esi+20h] +
mov [esi+14h] ecx +
xor ecx ecx +
mov [esi+1Ch] ebx +
mov [esi+28h] ebx +
test edx edx +
jle loc_1008C19  +
mov edx [esi] +
mov byte ptr [ecx+edx] 20h +
mov edx eax +
sub edx [esi+20h] +
inc ecx  +
cmp ecx edx +
jl loc_1008C09  +
sub eax [esi+20h] +
mov [esi+34h] ebx +
mov [esi+38h] eax +
mov eax [esi+0Ch] +
cmp eax [esi+8] +
jb loc_1008D96  +
push esi  +
push [ebp+hFile]  +
lea eax [ebp+arg_C] +
push eax  +
call sub_1008AAE  +
cmp eax edi +
jz loc_1008DBC  +
cmp eax 1F4h +
jz loc_1008DDD  +
jmp loc_1008DE4  +
mov eax [esi+28h] +
cmp eax [ebp+arg_8] +
jg loc_1008DC9  +
shr dword ptr [esi+34h] 1 +
test dword ptr [esi+34h] 100h +
jnz loc_1008C9F  +
movzx eax byte ptr [ebp+arg_C] +
or eax 0FF00h +
mov [esi+34h] eax +
mov eax [esi+0Ch] +
cmp eax [esi+8] +
jnb loc_1008C8A  +
mov cl [eax] +
inc eax  +
mov byte ptr [ebp+arg_C] cl +
mov [esi+0Ch] eax +
jmp loc_1008C9F  +
push esi  +
push [ebp+hFile]  +
lea eax [ebp+arg_C] +
push eax  +
call sub_1008AAE  +
cmp eax edi +
jnz loc_1008DE1  +
test byte ptr [esi+34h] 1 +
jz loc_1008CED  +
mov eax [esi+18h] +
cmp eax [esi+14h] +
jnb loc_1008CBA  +
mov cl byte ptr [ebp+arg_C] +
mov [eax] cl +
inc dword ptr [esi+18h]  +
inc dword ptr [esi+28h]  +
jmp loc_1008CD1  +
inc dword ptr [esi+28h]  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_C]  +
call sub_1008B2F  +
cmp eax edi +
jnz loc_1008DE4  +
mov eax [esi+38h] +
mov ecx [esi] +
mov dl byte ptr [ebp+arg_C] +
mov [eax+ecx] dl +
mov eax [esi+38h] +
inc eax  +
and eax 0FFFh +
mov [esi+38h] eax +
jmp loc_1008D8E  +
mov eax [esi+0Ch] +
cmp eax [esi+8] +
jnb loc_1008D00  +
mov cl [eax] +
inc eax  +
mov byte ptr [ebp+arg_14+3] cl +
mov [esi+0Ch] eax +
jmp loc_1008D15  +
push esi  +
push [ebp+hFile]  +
lea eax [ebp+arg_14+3] +
push eax  +
call sub_1008AAE  +
cmp eax edi +
jnz loc_1008DE1  +
movzx eax byte ptr [ebp+arg_14+3] +
movzx ecx byte ptr [ebp+arg_C] +
mov edi eax +
and edi 0F0h +
shl edi 4 +
and eax 0Fh +
or edi ecx +
add eax 2 +
push 0  +
mov [ebp+var_4] eax +
pop ebx  +
js loc_1008D8B  +
mov ecx [esi] +
lea eax [edi+ebx] +
and eax 0FFFh +
mov cl [eax+ecx] +
mov eax [esi+18h] +
mov byte ptr [ebp+arg_C] cl +
cmp eax [esi+14h] +
jnb loc_1008D5A  +
mov [eax] cl +
inc dword ptr [esi+18h]  +
inc dword ptr [esi+28h]  +
jmp loc_1008D6E  +
inc dword ptr [esi+28h]  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_C]  +
call sub_1008B2F  +
cmp eax 1 +
jnz loc_1008DE4  +
mov eax [esi+38h] +
mov ecx [esi] +
mov dl byte ptr [ebp+arg_C] +
mov [eax+ecx] dl +
mov eax [esi+38h] +
inc eax  +
and eax 0FFFh +
inc ebx  +
cmp ebx [ebp+var_4] +
mov [esi+38h] eax +
jle loc_1008D38  +
xor edi edi +
inc edi  +
mov eax [esi+0Ch] +
cmp eax [esi+8] +
jnb loc_1008DA4  +
mov cl [eax] +
inc eax  +
mov byte ptr [ebp+arg_C] cl +
mov [esi+0Ch] eax +
jmp loc_1008C53  +
push esi  +
push [ebp+hFile]  +
lea eax [ebp+arg_C] +
push eax  +
call sub_1008AAE  +
cmp eax edi +
jz loc_1008DBC  +
cmp eax 1F4h +
jnz loc_1008DE4  +
cmp eax 1F4h +
jnz loc_1008C53  +
jmp loc_1008DDD  +
mov ecx [esi+4] +
mov eax [esi+0Ch] +
inc ecx  +
cmp eax ecx +
jnz loc_1008DD9  +
mov [esi+1Ch] edi +
jmp loc_1008DDD  +
dec eax  +
mov [esi+0Ch] eax +
mov eax edi +
jmp loc_1008DE4  +
push 0FFFFFFFDh  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 2  +
xor edi edi +
push edi  +
push [ebp+hFile]  +
mov [ebp+var_18] esi +
call _llseek  +
cmp eax edi +
mov [esi] eax +
jl loc_1008E8E  +
push edi  +
push edi  +
push [ebp+hFile]  +
call _llseek  +
test eax eax +
jnz loc_1008E8E  +
push 0Eh  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call _lread  +
xor ecx ecx +
cmp eax 0Eh +
jz loc_1008E52  +
cmp eax 0FFFFFFFFh +
setz cl  +
lea ecx [ecx+ecx-3] +
mov eax ecx +
jmp loc_1008E91  +
mov al [ebp+var_C] +
lea esi [ebp+Buffer] +
mov edi ebx +
movs   +
movs   +
mov [ebx+8] al +
mov al [ebp+var_B] +
mov [ebx+9] al +
xor edx edx +
mov [ebx+0Ch] ecx +
xor eax eax +
movzx esi [ebp+eax+var_A] +
shl esi cl +
add ecx 8 +
or edx esi +
inc eax  +
cmp eax 4 +
jl loc_1008E6C  +
mov eax [ebp+var_18] +
mov [ebx+0Ch] edx +
mov eax [eax] +
mov [ebx+10h] eax +
xor eax eax +
inc eax  +
jmp loc_1008E91  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006668  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+String1] +
movs   +
push offset String2  +
lea eax [ebp+String1] +
movs   +
push eax  +
mov [ebp+var_8] 0 +
call lstrcmpA  +
mov ecx [ebp+var_4] +
neg eax  +
sbb eax eax +
pop edi  +
xor ecx ebp +
inc eax  +
pop esi  +
call sub_1006668  +
leave   +
retn 4  +
***
mov eax offset DpxNewJob +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset dpx_dll_import_table  +
call sub_1009FF6  +
pop edx  +
pop ecx  +
jmp eax  +
***
jmp DpxNewJob  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1008F61  +
cmp eax esi +
ja loc_1008F61  +
jz loc_1008F66  +
jmp loc_1008F6E  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1008F77  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_1008F84  +
test eax eax +
jz loc_1008FC2  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_1009020  +
cmp [ebp+arg_4] 0 +
jz loc_1009020  +
push [ebp+hModule]  +
call sub_1008FA5  +
push [ebp+arg_4]  +
mov esi eax +
call sub_1008FA5  +
test esi esi +
jz loc_1009018  +
test eax eax +
jz loc_1009018  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_1009020  +
cmp [eax] ecx +
jnz loc_1009020  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_1009020  +
inc eax  +
jmp loc_1009022  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_100903F  +
xor eax eax +
jmp loc_10090AD  +
cmp [ebp+arg_4] esi +
jz loc_100909A  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100903B  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_100903B  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_100903B  +
or eax 1 +
jmp loc_10090AD  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_100C6A8 edi +
jnz loc_10091D5  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_1009120  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_100C6A8 edi +
pop esi  +
jz loc_10091A8  +
dec eax  +
jnz loc_10091D5  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_1009195  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_1009189  +
dec eax  +
jz loc_1009176  +
dec eax  +
jz loc_100915C  +
mov dword_100C6A8 14h +
jmp loc_10091D5  +
cmp [ebp+var_C] 1 +
jb loc_100916D  +
mov dword_100C6A8 10h +
or dword_100C6A8 4 +
jmp loc_10091D5  +
cmp [ebp+var_C] 2 +
jb loc_100916D  +
mov dword_100C6A8 8 +
jmp loc_100916D  +
mov dword_100C6A8 4 +
jmp loc_10091D5  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_10091E7  +
mov dword_100C6A8 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_10091D5  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_10091CB  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_10091CB  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_10091D5  +
mov dword_100C6A8 1 +
mov ecx [ebp+var_4] +
mov eax dword_100C6A8 +
xor ecx ebp +
pop edi  +
call sub_1006668  +
leave   +
retn   +
mov dword_100C6A8 20h +
jmp loc_10091D5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_100924C  +
push 3  +
lea eax [ebp+LCData] +
push offset word_10018A0  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1006668  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_100C6AC +
jnz loc_10092FC  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10092FB  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_10092FB  +
push 3  +
push ds:off_1001620[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10092ED  +
inc esi  +
cmp esi 1Ch +
jb loc_10092CC  +
jmp loc_10092FB  +
mov ax ds:word_1001624[esi*8] +
mov word_100C6AC ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_100C6AC +
xor ecx ebp +
call sub_1006668  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_10093D1  +
cmp [ebp+arg_0] ebx +
jz loc_10093D1  +
cmp [ebp+arg_4] ebx +
jz loc_10093D1  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_100934D  +
movzx eax ax +
sub eax 61h +
jmp loc_100935C  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_1009386  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_1009386  +
mov esi ds:dword_1001768[eax*4] +
test esi esi +
jz loc_1009386  +
jmp loc_100937E  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009391  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_100936E  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jl loc_1009339  +
jmp loc_10093D0  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009399  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_10093D0  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10093B1  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_1009422  +
cmp [ebp+arg_4] 0 +
jz loc_1009422  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_1009E8A  +
test eax eax +
jz loc_1009422  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_1009F30  +
test edi edi +
jz loc_100941D  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_1009313  +
xor eax eax +
inc eax  +
jmp loc_1009424  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1009453  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1009458  +
mov eax 80070057h +
test eax eax +
jl loc_1009471  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1008F39  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100948F  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1009494  +
mov eax 80070057h +
test eax eax +
jl loc_10094AE  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1008F39  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10094D6  +
xor eax eax +
jmp loc_1009541  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_100943E  +
test eax eax +
jl loc_100953E  +
push esi  +
call sub_10090B9  +
mov esi eax +
and esi 26h +
call sub_10090B9  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100902C  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_100953E  +
push ebx  +
push edi  +
call sub_1008FCB  +
test eax eax +
jnz loc_100953E  +
push ebx  +
test bl 1 +
jz loc_1009536  +
call ds:UnmapViewOfFile  +
jmp loc_100953C  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1006668  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_10095AE  +
test ecx ecx +
jz loc_10095AE  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_1009592  +
test edx edx +
jz loc_100957F  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_10094B5  +
add esp 14h +
jmp loc_10095B0  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_10094B5  +
add esp 10h +
jmp loc_10095B0  +
test edx edx +
jz loc_100959E  +
push edx  +
push offset a_SS_mui  +
jmp loc_1009587  +
push offset a_S_mui  +
push ecx  +
call sub_10094B5  +
add esp 0Ch +
jmp loc_10095B0  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_10095EC  +
xor eax eax +
jmp loc_1009D45  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_10095E5  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_1009608  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_1009C72  +
call sub_10090B9  +
mov dword_100C6B0 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_1009C72  +
test byte ptr dword_100C6B0 20h +
jnz loc_1009D44  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_1009C66  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_1009684  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_1009696  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_1008F84  +
test eax eax +
jz loc_1009C4E  +
test di di +
jnz loc_1009C26  +
mov al byte ptr dword_100C6B0 +
test al 4 +
jz loc_1009A35  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_10096E8  +
call sub_10091F8  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_10097BE  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10093DC  +
test eax eax +
jz loc_1009CB2  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
cmp word ptr [ebp+var_208] ax +
jz loc_100979D  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_1009969  +
mov [ebp+var_420] 404h +
jmp loc_10096F4  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100947A  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10093DC  +
test eax eax +
jz loc_1009870  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1009E22  +
movzx eax ax +
test ax ax +
jz loc_1009870  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100947A  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_10097AF  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_100994D  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100947A  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10093DC  +
test eax eax +
jz loc_1009947  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1009E22  +
movzx eax ax +
test ax ax +
jz loc_1009947  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100947A  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1009BFE  +
cmp ax si +
jmp loc_1009BD6  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_1009A1C  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10093DC  +
test eax eax +
jz loc_1009C4E  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
cmp word ptr [ebp+var_208] ax +
jz loc_1009A1C  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1009BFE  +
jmp loc_1009AF3  +
test al 3 +
jz loc_1009C4E  +
call sub_1009261  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_1009B1C  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10093DC  +
test eax eax +
jz loc_1009C4E  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
cmp word ptr [ebp+var_208] ax +
jz loc_1009AEC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_1009BFE  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10093DC  +
mov edx esi +
jmp loc_1009BDD  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100947A  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10093DC  +
test eax eax +
jz loc_1009BCA  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1009E22  +
movzx eax ax +
test ax ax +
jz loc_1009BCA  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100947A  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_1009BFE  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jnz loc_1009CB6  +
jmp loc_1009CB2  +
test byte ptr dword_100C6B0 7 +
jz loc_1009C4E  +
test byte ptr [ebp+arg_4] 8 +
jz loc_1009C79  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10093DC  +
test eax eax +
jnz loc_1009C93  +
test byte ptr [ebp+arg_4] 10h +
jz loc_1009CC6  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_1008F84  +
test eax eax +
jnz loc_1009CC6  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_1009D44  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100947A  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_1009553  +
mov ebx eax +
test ebx ebx +
jz loc_1009C4E  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_1009D44  +
test byte ptr [ebp+hModule] 1 +
jz loc_1009D3E  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_10090B9  +
test al 38h +
jz loc_1009D1B  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_100947A  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100902C  +
jmp loc_1009D38  +
call sub_10090B9  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006668  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1009D7A  +
xor eax eax +
jmp loc_1009DA9  +
push 104h  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_1009D76  +
push dword ptr [ebp+wLanguage]  +
lea eax [ebp+WideCharStr] +
push [ebp+arg_4]  +
push eax  +
call sub_10095B9  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1006668  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_1009DD6  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_1009E17  +
cmp word ptr [eax] 7Fh +
jz loc_1009E17  +
xor eax eax +
inc eax  +
jmp loc_1009E19  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1009E77  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_1009E77  +
push offset sub_1009DE3  +
push 8  +
push 163h  +
push offset off_1003990  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_1009E77  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_10028E0 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_1009E72  +
push ecx  +
call sub_1009DFE  +
test eax eax +
jnz loc_1009E77  +
mov ax [ecx] +
jmp loc_1009E81  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_1009F1B  +
cmp [ebp+arg_4] 0 +
jnz loc_1009EA7  +
cmp [ebp+arg_8] 0 +
jnz loc_1009F1B  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1009F1B  +
push offset sub_1009DBC  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_10028E0  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_1009F1B  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1009EE3  +
push ecx  +
call sub_1009DFE  +
test eax eax +
jnz loc_1009F1B  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009EEB  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_1009F17  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1005AC8  +
test eax eax +
jge loc_1009F17  +
push 7Ah  +
jmp loc_1009F1D  +
mov eax esi +
jmp loc_1009F25  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_1009FDE  +
cmp [ebp+arg_8] edi +
jle loc_1009F53  +
cmp [ebp+arg_4] edi +
jz loc_1009FDE  +
cmp [ebp+arg_8] edi +
jl loc_1009FDE  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1009FDE  +
push offset sub_1009DE3  +
push 8  +
push 163h  +
push offset off_1003990  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_1009FDE  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_10028E0 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1009F9F  +
push ecx  +
call sub_1009DFE  +
test eax eax +
jnz loc_1009FDE  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_1009FAF  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_1009FDA  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1005AC8  +
test eax eax +
jge loc_1009FDA  +
push 7Ah  +
jmp loc_1009FE0  +
mov eax esi +
jmp loc_1009FE8  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
mov eax offset __ImageBase +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+8] +
mov ecx [esi+4] +
mov ebx [esi+0Ch] +
add edx eax +
push edi  +
mov edi [esi+14h] +
add edi eax +
add ecx eax +
mov [ebp+Target] edx +
mov edx [esi+10h] +
add ebx eax +
add edx eax +
mov eax [esi+1Ch] +
mov [ebp+var_4] eax +
mov eax [ebp+Arguments] +
mov [ebp+lpLibFileName] ecx +
xor ecx ecx +
mov [ebp+var_C] edi +
mov [ebp+var_3C] eax +
xor eax eax +
test dword ptr [esi] 1 +
lea edi [ebp+lpProcName] +
mov [ebp+var_44] 24h +
mov [ebp+var_40] esi +
mov [ebp+var_34] ecx +
stos   +
mov [ebp+var_2C] ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] ecx +
jnz loc_100A07C  +
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push ecx  +
push 0C06D0057h  +
call ds:RaiseException  +
xor eax eax +
jmp loc_100A22C  +
mov eax [ebp+Target] +
mov edi [eax] +
mov eax [ebp+Arguments] +
sub eax ebx +
sar eax 2 +
shl eax 2 +
add edx eax +
mov edx [edx] +
mov [ebp+arg_0] eax +
mov eax edx +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+var_34] eax +
lea eax (__ImageBase+2)[edx] +
jnz loc_100A0AB  +
movzx eax dx +
mov [ebp+lpProcName] eax +
mov eax ds:dword_10012D0 +
xor ebx ebx +
cmp eax ecx +
jz loc_100A0CA  +
lea edx [ebp+var_44] +
push edx  +
push ecx  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_100A20F  +
test edi edi +
jnz loc_100A174  +
mov eax ds:dword_10012D0 +
test eax eax +
jz loc_100A0E9  +
lea ecx [ebp+var_44] +
push ecx  +
push 1  +
call eax  +
mov edi eax +
test edi edi +
jnz loc_100A139  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryA  +
mov edi eax +
test edi edi +
jnz loc_100A139  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax ds:off_10012A4 +
test eax eax +
jz loc_100A118  +
lea ecx [ebp+var_44] +
push ecx  +
push 3  +
call eax  +
mov edi eax +
test edi edi +
jnz loc_100A139  +
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push 0  +
push 0C06D007Eh  +
call ds:RaiseException  +
mov eax [ebp+var_28] +
jmp loc_100A22C  +
push edi  +
push [ebp+Target]  +
call ds:InterlockedExchange  +
cmp eax edi +
jz loc_100A16D  +
cmp dword ptr [esi+18h] 0 +
jz loc_100A174  +
push 8  +
push 40h  +
call ds:__imp_LocalAlloc  +
test eax eax +
jz loc_100A174  +
mov [eax+4] esi +
mov ecx dword_100C6B4 +
mov [eax] ecx +
mov dword_100C6B4 eax +
jmp loc_100A174  +
push edi  +
call ds:FreeLibrary  +
mov eax ds:dword_10012D0 +
mov [ebp+var_2C] edi +
test eax eax +
jz loc_100A18A  +
lea ecx [ebp+var_44] +
push ecx  +
push 2  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_100A20A  +
cmp [esi+14h] ebx +
jz loc_100A1BF  +
cmp [esi+1Ch] ebx +
jz loc_100A1BF  +
mov eax [edi+3Ch] +
add eax edi +
cmp dword ptr [eax] 4550h +
jnz loc_100A1BF  +
mov ecx [ebp+var_4] +
cmp [eax+8] ecx +
jnz loc_100A1BF  +
cmp edi [eax+34h] +
jnz loc_100A1BF  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
mov ebx [ecx+eax] +
test ebx ebx +
jnz loc_100A20A  +
push [ebp+lpProcName]  +
push edi  +
call ds:GetProcAddress  +
mov ebx eax +
test ebx ebx +
jnz loc_100A20A  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax ds:off_10012A4 +
test eax eax +
jz loc_100A1EB  +
lea ecx [ebp+var_44] +
push ecx  +
push 4  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_100A20A  +
lea eax [ebp+var_44] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Fh  +
call ds:RaiseException  +
mov ebx [ebp+var_28] +
mov eax [ebp+Arguments] +
mov [eax] ebx +
mov eax ds:dword_10012D0 +
test eax eax +
jz loc_100A22A  +
and [ebp+var_24] 0 +
lea ecx [ebp+var_44] +
push ecx  +
push 5  +
mov [ebp+var_2C] edi +
mov [ebp+var_28] ebx +
call eax  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
retn 6904h  +
***
