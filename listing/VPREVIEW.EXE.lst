mov edx [ebp+arg_20] +
push ecx  +
sub esp 10h +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
movzx eax byte ptr [ecx] +
lea edx [ecx+1] +
mov ecx [edx+6] +
shl eax 18h +
mov [ebp+var_10] eax +
movzx eax word ptr [edx] +
mov [ebp+var_C] eax +
mov eax [edx+2] +
add edx 0Ah +
mov [ebp+var_8] eax +
mov eax [esi+4] +
mov [ebp+var_4] ecx +
mov ecx [ebp+arg_14] +
push ecx  +
push [ebp+arg_10]  +
and dword ptr [ecx+4] 0 +
push [ebp+arg_C]  +
mov [ecx] eax +
mov eax [esi+4] +
push [ebp+arg_8]  +
movzx eax word ptr [eax] +
and dword ptr [ecx+14h] 0 +
mov [ecx+8] eax +
mov dword ptr [ecx+0Ch] 2 +
mov [ecx+10h] edx +
movzx eax word ptr [edx] +
mov [ecx+18h] eax +
mov eax offset unk_448099 +
mov dword ptr [ecx+1Ch] 1 +
sub eax offset unk_447FE8 +
mov [ebp+arg_4] eax +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+18h]  +
call ds:EventWriteTransfer  +
pop esi  +
leave   +
retn 18h  +
***
push offset nullsub_4  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset nullsub_5  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset nullsub_6  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset nullsub_7  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset nullsub_8  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset nullsub_9  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_4403F3  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_4403FD  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440407  +
call sub_43D63A  +
pop ecx  +
retn   +
***
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_44041B  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_44042F  +
mov off_44D490 offset off_442918 +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440425  +
mov off_44D4A0 offset off_442924 +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440439  +
mov off_44D4B0 offset off_442C48 +
call sub_43D63A  +
pop ecx  +
retn   +
***
mov eax dword_44E7E8 +
mov eax dword_44E7E8 +
mov eax dword_44E7E8 +
call ds:_Mtx_init_in_situ  +
push offset sub_440465  +
call sub_43D63A  +
add esp 0Ch +
retn   +
***
push offset sub_440472  +
call sub_43D63A  +
pop ecx  +
retn   +
***
mov eax dword_44E7E8 +
mov eax dword_44E7E8 +
mov eax dword_44E7E8 +
mov dword_44D5BC eax +
mov dword_44E7E8 offset dword_44D5BC +
retn   +
***
push offset sub_440486  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push ecx  +
call ds:_Mtx_init_in_situ  +
push offset sub_4404C0  +
call sub_43D63A  +
add esp 0Ch +
retn   +
***
mov eax dword_44E7E8 +
call ds:_Mtx_init_in_situ  +
call ds:_Mtx_init_in_situ  +
push offset sub_4404E2  +
call sub_43D63A  +
add esp 0Ch +
retn   +
***
push offset sub_4404EF  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_4404F9  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440529  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440541  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440559  +
mov off_44D62C offset off_443FE0 +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440563  +
mov off_44D63C offset off_444018 +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_44056D  +
mov off_44D64C offset off_4440B4 +
call sub_43D63A  +
pop ecx  +
retn   +
***
mov eax dword_44E7E8 +
push offset sub_440582  +
mov dword_44D660 eax +
mov dword_44E7E8 offset dword_44D660 +
call sub_43D63A  +
pop ecx  +
retn   +
***
call ds:_Mtx_init_in_situ  +
retn   +
***
call ds:_Mtx_init_in_situ  +
mov eax dword_44E7E8 +
call ds:_Mtx_init_in_situ  +
push offset sub_4405C4  +
call sub_43D63A  +
add esp 0Ch +
retn   +
***
mov eax dword_44E7E8 +
mov eax dword_44E7E8 +
call ds:_Mtx_init_in_situ  +
call loc_434FB6  +
call ds:_Mtx_init_in_situ  +
call loc_4366CB  +
call sub_43762D  +
mov eax dword_44E7E8 +
mov eax dword_44E7E8 +
mov dword_44D878 eax +
mov dword_44E7E8 offset dword_44D878 +
retn   +
***
push offset sub_440638  +
call sub_43D63A  +
pop ecx  +
retn   +
***
push offset sub_440642  +
call sub_43D63A  +
pop ecx  +
retn   +
***
mov eax dword_44E7E8 +
mov eax dword_44E7E8 +
mov dword_44E76C eax +
mov dword_44E770 eax +
mov dword_44E774 eax +
retn   +
***
mov ecx offset unk_44DC78 +
call sub_43CED4  +
push offset loc_440660  +
call sub_43D63A  +
pop ecx  +
retn   +
***
mov eax dword_44E070 +
call sub_43E960  +
mov edx [ebp-238h] +
mov eax dword_44E06C +
mov eax dword_44E080 +
call sub_43DF12  +
cmp dword_44E068 0 +
call sub_43DF12  +
cmp dword_44E068 0 +
and esp 0FFFFFFF8h +
push esi  +
cmp dword ptr [ecx+4] 0 +
push esi  +
lea eax [ecx+4] +
and dword ptr [ecx+4] 0 +
sub esp 0Ch +
push esi  +
mov eax 80004001h +
mov eax 80004001h +
mov eax 80004001h +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
call sub_43E8C1  +
mov eax [ebp+arg_0] +
push esi  +
and dword ptr [ecx+14h] 0 +
push ebx  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_4] +
mov eax 8002000Bh +
push edi  +
mov eax 80020003h +
mov eax dword_44E090 +
mov dword ptr [ecx] offset off_441B3C +
push edi  +
mov ecx [ebp+arg_0] +
push esi  +
sub esp 10h +
push ebx  +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
push ecx  +
sub esp 38h +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
cmp edx 1000h +
cmp ecx 1000h +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 4 +
call sub_43DF12  +
cmp dword_44E068 0 +
push [ebp+arg_C]  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
push [ebp+arg_0]  +
cmp byte ptr [ecx+8] 0 +
push [ebp+dwBytes]  +
cmp [ebp+lpMem] 0 +
mov edx [ebp+arg_0] +
push [ebp+lpMem]  +
push esi  +
mov eax large fs:2Ch +
mov edx [ebp+arg_0] +
mov ecx [ecx+4] +
mov edx [ebp+arg_4] +
push esi  +
test edx edx +
js loc_402BF2  +
mov eax 7FFFFFFFh +
sub eax edx +
cmp eax 1 +
jl loc_402BF2  +
inc edx  +
lea esi [edx+7] +
and esi 0FFFFFFF8h +
cmp edx esi +
jg loc_402BF2  +
mov eax esi +
mul  [ebp+arg_8] +
test edx edx +
ja loc_402BF2  +
jb loc_402BD2  +
cmp eax 0FFFFFFFFh +
ja loc_402BF2  +
cmp eax 0FFFFFFEFh +
ja loc_402BF2  +
mov ecx [ecx+4] +
lea edx [eax+10h] +
push edx  +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_402BF2  +
lea ecx [esi-1] +
mov [eax+8] ecx +
jmp loc_402BF4  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test [ebp+arg_0] 1 +
movzx eax cl +
push 0FFFFFFFFh  +
xor eax eax +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push ecx  +
mov ecx [ebp+arg_4] +
push ecx  +
call sub_43E8F4  +
mov eax 4218h +
test ecx ecx +
sub esp 20h +
call sub_43E8C1  +
mov edx [ebx] +
mov eax [edx+4] +
and dword ptr [eax] 0 +
mov eax [edx] +
test eax eax +
jz loc_403483  +
push esi  +
mov esi [eax] +
push eax  +
call ds:free  +
mov eax esi +
pop ecx  +
test esi esi +
jnz loc_403472  +
pop esi  +
push dword ptr [ebx]  +
call ds:free  +
pop ecx  +
pop ebx  +
retn   +
***
push ecx  +
mov edx [ecx] +
push ecx  +
int 3  +
***
mov eax [ebp+arg_4] +
push ebx  +
cmp [ebp+arg_0] 0 +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
push esi  +
push esi  +
sub esp 0Ch +
or edi 0FFFFFFFFh +
push ecx  +
and dword ptr [ecx] 0 +
test [ebp+arg_0] 1 +
mov edx [esi+14h] +
int 3  +
***
push esi  +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
mov edx 7FFFFFFEh +
or esi 7 +
push edi  +
mov edi [ecx+14h] +
cmp esi edx +
ja loc_403B13  +
mov ecx edi +
mov eax edx +
shr ecx 1 +
sub eax ecx +
cmp edi eax +
ja loc_403B13  +
add ecx edi +
mov edx esi +
cmp esi ecx +
cmovb edx ecx +
pop edi  +
mov eax edx +
pop esi  +
pop ebp  +
retn 4  +
***
and dword ptr [ecx+4] 0 +
sub esp 0Ch +
push esi  +
mov ecx [ecx+4] +
mov ecx [ecx+4] +
mov eax [ebp+arg_0] +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
pop ebp  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E8C1  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
mov ecx [ebp+arg_8] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_43ED2D  +
mov eax large fs:0 +
push eax  +
push ebx  +
push esi  +
push edi  +
mov eax dword_44D0B4 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jnz loc_404958  +
add ecx 18h +
mov edx offset aNull +
call sub_40586D  +
jmp loc_404976  +
mov al [eax] +
test al al +
jz loc_404976  +
xor edi edi +
lea ebx [ecx+18h] +
mov dl al +
mov ecx ebx +
inc edi  +
call sub_40673B  +
mov eax [esi] +
mov al [edi+eax] +
test al al +
jnz loc_404963  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax large fs:2Ch +
push 0FFFFFFFFh  +
push edi  +
push 0FFFFFFFFh  +
push 64h  +
push 0FFFFFFFFh  +
mov ecx esi +
push esi  +
mov ecx [ecx] +
push 0FFFFFFFFh  +
mov ecx dword_44E0A4 +
push ecx  +
and esp 0FFFFFFF8h +
mov edx ecx +
push ebx  +
sub esp 0Ch +
test byte ptr [esi+3Ch] 1 +
mov eax [esi-68h] +
call sub_43E8C1  +
push ecx  +
push ebx  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push 0FFFFFFFFh  +
call sub_43E8C1  +
cmp dword ptr [esi] 0 +
call sub_43E8C1  +
push 0FFFFFFFFh  +
push esi  +
call sub_43E92A  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_43E92A  +
mov eax [edx+10h] +
push edi  +
call sub_43E8C1  +
push ecx  +
call sub_43E92A  +
call sub_43E92A  +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push ecx  +
push 0FFFFFFFEh  +
mov dword_44E79C ecx +
call sub_406D78  +
mov eax dword_44E7A0 +
mov edx ecx +
mov dword ptr [esi] offset off_4422D0 +
push esi  +
push [ebp+arg_0]  +
push esi  +
mov eax [esi+0Ch] +
mov ecx [ecx+4] +
push 0FFFFFFFFh  +
cmp byte_44E7A4 0 +
and esp 0FFFFFFF8h +
lea eax [ecx+4] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
cmp edx 1 +
jnz locret_40722D  +
test ecx ecx +
jz locret_40722D  +
mov eax [ecx] +
push edx  +
call dword ptr [eax+8]  +
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
mov ecx 30303030h +
call sub_43E8F4  +
call sub_43E8F4  +
push ebx  +
call sub_43E8F4  +
lea eax [ebp+arg_C] +
sub esp 90h +
mov eax [ecx] +
mov edx [ecx] +
sub esp 0Ch +
push esi  +
mov edx [ebp+arg_0] +
sub esp 2Ch +
push esi  +
push ecx  +
mov eax [ebp+arg_0] +
push ecx  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
call dword ptr [eax+7Ch]  +
pop ebp  +
retn 4  +
***
sub esp 14h +
mov dword ptr [ecx] offset off_4423FC +
push esi  +
push esi  +
sub esp 1Ch +
mov ecx [ecx-18h] +
push 0FFFFFFFFh  +
push esi  +
push esi  +
mov eax [ebp+arg_0] +
mov [ecx+18h] eax +
mov eax [ebp+arg_4] +
mov [ecx+1Ch] eax +
pop ebp  +
retn 8  +
***
push ecx  +
push 0FFFFFFFFh  +
lea eax [esi+44h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 18h +
sub esp 20h +
and esp 0FFFFFFF8h +
push edi  +
push 0FFFFFFFFh  +
mov eax [esi] +
push dword ptr [eax+4]  +
push esi  +
call sub_40916E  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
push esi  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
push ecx  +
push ecx  +
push esi  +
push ecx  +
xor eax eax +
mov eax [esi+4] +
cmp dword ptr [ecx] 0 +
inc dword ptr [ecx+4]  +
mov eax [ecx] +
sub esp 0Ch +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
mov eax [ecx] +
call sub_43E8C1  +
push ebx  +
sub ecx 20h +
sub [esp+arg_0] 4 +
sub ecx 20h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
int 3  +
mov ecx [ebp+arg_0] +
push esi  +
push esi  +
mov ecx [ebp+arg_0] +
call sub_4092A7  +
push 0FFFFFFFFh  +
push esi  +
mov ecx [esi+14h] +
push edi  +
mov ecx [ebp+arg_0] +
call sub_4093D0  +
push 0FFFFFFFFh  +
push esi  +
mov ecx [esi+14h] +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
test ecx ecx +
jz loc_4099C4  +
and dword ptr [esi+8] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
test [ebp+arg_0] 1 +
jz loc_4099D2  +
push esi  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
push esi  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
push ecx  +
push esi  +
push esi  +
push esi  +
mov eax [ebp+arg_0] +
mov eax 80004005h +
push 0  +
push ecx  +
push ecx  +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
pop ebp  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
test [ebp+arg_0] 1 +
mov ecx esi +
mov ecx 1C068Eh +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push esi  +
push ecx  +
test esi esi +
push esi  +
push 0FFFFFFFFh  +
sub esp 414h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 14h +
sub esp 14h +
push ecx  +
push ebx  +
push ebx  +
sub esp 34h +
push 0FFFFFFFFh  +
mov ecx 2C309Eh +
sub esp 41Ch +
push esi  +
sub esp 18h +
call sub_43E8C1  +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
sub esp 68h +
push ebx  +
sub esp 44h +
xor edx edx +
push 0FFFFFFFFh  +
call sub_43E8C1  +
push esi  +
lea ecx [esi+444h] +
push 440h  +
push 0FFFFFFFFh  +
sub esp 18h +
sub esp 14h +
lea eax [ecx+444h] +
lea edi [ecx+444h] +
and esp 0FFFFFFF8h +
push ecx  +
push edi  +
mov eax [ecx+42Ch] +
push ecx  +
push ecx  +
push ecx  +
sub esp 10h +
mov edx [ebp+arg_4] +
push esi  +
mov dword ptr [esi] offset off_4429C8 +
mov edi ecx +
push ecx  +
push ecx  +
push ecx  +
mov eax [esi] +
push esi  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
push esi  +
mov ecx [ebp+arg_0] +
test [ebp+arg_0] 1 +
mov ecx [ebp+arg_0] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
pop ebp  +
mov edx [ebp+arg_0] +
sub esp 18h +
push ecx  +
push ecx  +
push esi  +
push ecx  +
call sub_424EBC  +
mov ecx [ebp+arg_0] +
push esi  +
cmp dword ptr [esi+8] 0 +
push esi  +
mov ecx 1C1191h +
mov ecx [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx 1C0697h +
mov ecx 1C0697h +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
call ds:GetCurrentThreadId  +
mov eax [ebp+arg_0] +
mov ecx 1C1192h +
mov ecx 1C1193h +
mov ecx 1C1194h +
push esi  +
cmp dword ptr [esi] 0 +
sub esp 408h +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_8] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx [esi+20h] +
and esp 0FFFFFFF8h +
push ecx  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push esi  +
mov dword ptr [esi] offset off_442B64 +
mov ecx [esi+18h] +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
mov esi ecx +
call sub_40CFDA  +
test [ebp+arg_0] 1 +
jz loc_40CFCF  +
push esi  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx [esi+2Ch] +
mov eax [ecx+20h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push ecx  +
sub esp 428h +
push ecx  +
push edi  +
mov eax [ecx+42Ch] +
push ecx  +
push ebx  +
cmp dword ptr [ecx+1Ch] 0 +
push esi  +
mov edx [ebp+arg_0] +
push esi  +
mov dword ptr [esi] offset off_442AD4 +
cmp dword ptr [esi+438h] 0 +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
push [ebp+arg_14]  +
push 0FFFFFFFFh  +
sub esp 44Ch +
sub esp 50h +
and esp 0FFFFFFF8h +
sub esp 0Ch +
and esp 0FFFFFFF8h +
sub esp 41Ch +
push 0FFFFFFFFh  +
push ecx  +
sub [esp+arg_0] 28h +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 20h +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 28h +
sub [esp+arg_0] 20h +
sub esp 38h +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
push edi  +
push ecx  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov eax 80004001h +
push 18h  +
mov eax [ebp+arg_0] +
push esi  +
push ebx  +
mov dword ptr [esi] offset off_442C58 +
sub esp 14h +
sub esp 10h +
and esp 0FFFFFFF8h +
sub esp 18h +
push esi  +
mov ecx [esi+8] +
mov eax [ebp+arg_10] +
mov eax [ecx+8] +
mov eax [ebp+arg_0] +
pop ebp  +
jmp sub_40F446  +
***
push 0FFFFFFFFh  +
push offset loc_43F32D  +
mov eax large fs:0 +
push eax  +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov eax dword_44D0B4 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov esi ecx +
and [ebp+var_4] 0 +
lea edi [esi+10h] +
push ecx  +
push ecx  +
mov ecx edi +
mov [ebp+var_14] edi +
call sub_423C68  +
mov byte ptr [ebp+var_4] 1 +
mov esi [esi+0Ch] +
test esi esi +
jz loc_40F7C5  +
lea eax [esi+4] +
push eax  +
lea ecx [ebp+arg_0] +
call sub_40F5D1  +
test al al +
jz loc_40F7C5  +
mov esi [esi] +
jmp loc_40F79D  +
mov ecx 2C72CFh +
call sub_427550  +
mov eax offset loc_40F7CC +
retn   +
mov ecx edi +
call sub_423C97  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push esi  +
mov edx ecx +
sub esp 28h +
and esp 0FFFFFFF8h +
sub [esp+arg_0] 4 +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push esi  +
push ecx  +
mov edx [ebp+arg_8] +
push ecx  +
xor eax eax +
push ecx  +
sub esp 1Ch +
lea eax [esi+8] +
push ecx  +
push [ebp+arg_0]  +
push esi  +
push esi  +
sub esp 24h +
cmp byte_44E7C7 0 +
cmp byte_44E7C7 0 +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
call sub_41014B  +
push 0FFFFFFFFh  +
push ecx  +
cmp dword_44E7C8 0 +
ja loc_4104F8  +
mov eax 80004005h +
jmp loc_410500  +
mov ecx [ebp+arg_0] +
call sub_41337C  +
pop ebp  +
retn 4  +
***
mov eax [esi] +
push esi  +
mov edx [ebp+arg_4] +
sub esp 18h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push ebx  +
sub esp 0Ch +
int 3  +
***
push esi  +
mov ecx [ebp+arg_0] +
push dword ptr [esi+48h]  +
push esi  +
push esi  +
push ebx  +
mov dword ptr [esi] offset off_442CF4 +
push esi  +
push esi  +
push 0FFFFFFFFh  +
sub esp 10h +
push ecx  +
push ebx  +
mov ebx ds:malloc +
push esi  +
push edi  +
xor esi esi +
push 30h  +
mov [ebp+var_4] esi +
call ebx  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_410E99  +
push esi  +
mov dword ptr [edi] offset off_442CF4 +
lea eax [edi+18h] +
push esi  +
push eax  +
mov dword ptr [edi+4] 1 +
mov [edi+0Ch] esi +
mov [edi+10h] esi +
mov [edi+14h] esi +
call ds:InitializeCriticalSectionEx  +
mov esi [ebp+arg_0] +
push esi  +
mov eax [esi] +
call dword ptr [eax+4]  +
mov [edi+8] esi +
jmp loc_410E9B  +
mov edi esi +
test edi edi +
jnz loc_410EA6  +
mov esi 8007000Eh +
jmp loc_410EFC  +
lea ecx [ebp+var_4] +
call sub_40F318  +
mov esi eax +
test esi esi +
js loc_410EE9  +
push 50h  +
call ebx  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_410EC6  +
mov esi 8007000Eh +
jmp loc_410EE9  +
push ebx  +
push [ebp+var_4]  +
xor esi esi +
push edi  +
push 14h  +
push ecx  +
mov ecx ebx +
call sub_423940  +
mov dword ptr [ebx] offset off_442D18 +
inc dword ptr [edi+4]  +
mov eax [ebp+arg_4] +
mov [ebx+48h] edi +
mov [eax] ebx +
push edi  +
call sub_410BDC  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_410EFC  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push esi  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov edi ecx +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ecx+20h] +
lea eax [ecx+8] +
add ecx 8 +
call sub_4155A0  +
retn   +
***
mov ecx [ebp+arg_0] +
pop ebp  +
push esi  +
mov dl [ebp+arg_4] +
mov edx [ebp+arg_8] +
mov eax [ebp+arg_0] +
cmp [ebp+arg_4] 0 +
mov ecx [ebp+arg_0] +
push esi  +
mov dl [ebp+arg_0] +
push edi  +
sub esp 18h +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
and eax 70h +
push edi  +
mov edi ecx +
cmp eax 40h +
ja loc_4113C8  +
movzx eax ds:byte_411444[eax] +
jmp ds:off_411430[eax*4]  +
mov eax 1 +
jmp loc_4113AC  +
xor eax eax +
jmp loc_4113AC  +
mov eax 2 +
push eax  +
call sub_4112AF  +
mov esi eax +
test esi esi +
js loc_4113D7  +
pop edi  +
pop esi  +
pop ecx  +
pop ebp  +
retn 4  +
xor eax eax +
pop edi  +
pop esi  +
pop ecx  +
pop ebp  +
retn 4  +
mov ecx 1C1303h +
call sub_427550  +
mov esi 80004005h +
mov ecx 1C1304h +
call sub_427550  +
cmp dword ptr [edi+14h] 0 +
jnz loc_4113F6  +
cmp dword ptr [edi+18h] 0 +
jnz loc_4113F6  +
mov dword ptr [edi+20h] 1 +
jmp loc_411400  +
mov ecx 1C06CDh +
call sub_427550  +
cmp esi 80010106h +
jz loc_41141B  +
mov ecx 1C1305h +
call sub_427550  +
mov eax esi +
pop edi  +
pop esi  +
pop ecx  +
pop ebp  +
retn 4  +
call ds:CoUninitialize  +
pop edi  +
mov eax esi +
pop esi  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edx [ebp+arg_4] +
push esi  +
mov eax [ebp+arg_0] +
push edi  +
push esi  +
cmp dword ptr [esi+10h] 0 +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push esi  +
push ecx  +
cmp [ebp+arg_4] 0 +
push ecx  +
sub esp 8 +
and esp 0FFFFFFF8h +
add esp 4 +
push ebp  +
mov ebp [ebx+4] +
mov [esp+8+var_4] ebp +
mov ebp esp +
sub esp 98h +
mov eax dword_44D0B4 +
xor eax ebp +
mov [ebp-4] eax +
cmp dword ptr [ebx+0Ch] 2 +
mov eax ecx +
mov ecx [ebx+10h] +
lea edx [eax+8] +
mov [ebp-84h] ecx +
setnz ch  +
cmp dword ptr [ebx+0Ch] 1 +
push esi  +
mov [ebp-8Ch] eax +
setz cl  +
mov eax [edx] +
push edi  +
mov edi [edx+4] +
mov [ebp-90h] edx +
mov edx eax +
mov [ebp-88h] edi +
mov esi edx +
mov [ebp-78h] edx +
shr esi 0Ch +
dec esi  +
shl esi 0Ch +
xor esi edx +
and esi 7F000h +
xor esi edx +
mov eax esi +
shr eax 1Eh +
and al 1 +
or cl al +
or ch al +
mov [ebp-6Ah] cl +
mov [ebp-6Ch] ch +
jnz loc_41266B  +
test edi edi +
jz loc_41266B  +
lea eax [esi-1] +
mov byte ptr [ebp-6Dh] 0 +
xor eax esi +
and eax 0FFFh +
xor eax esi +
mov esi eax +
shr esi 13h +
dec esi  +
shl esi 13h +
xor esi eax +
and esi 3FF80000h +
xor esi eax +
mov eax esi +
sub edi 1 +
jz loc_412636  +
and eax 7F000h +
jnz loc_41263B  +
mov cl 1 +
jmp loc_41263D  +
and eax 7F000h +
xor cl cl +
mov [ebp-69h] cl +
test esi 3FF80000h +
jnz loc_412665  +
test esi esi +
js loc_412650  +
test eax eax +
jz loc_412665  +
lea eax [esi+80000h] +
mov byte ptr [ebp-6Bh] 1 +
xor eax esi +
and eax 3FF80000h +
xor esi eax +
jmp loc_4126C0  +
mov byte ptr [ebp-6Bh] 0 +
jmp loc_4126C0  +
mov byte ptr [ebp-6Dh] 1 +
mov byte ptr [ebp-69h] 0 +
mov byte ptr [ebp-6Bh] 0 +
test ch ch +
jz loc_4126F2  +
mov ecx esi +
shr ecx 13h +
dec ecx  +
shl ecx 13h +
xor ecx esi +
and ecx 3FF80000h +
xor ecx esi +
mov esi ecx +
test ecx 7F000h +
jnz loc_4126F2  +
cmp byte ptr [ebp-6Ah] 0 +
jz loc_4126D5  +
mov eax ecx +
shr ecx 13h +
shl eax 14h +
and ecx 7FFh +
sar eax 14h +
sub ecx eax +
mov eax [ebp-8Ch] +
add ecx [eax+54h] +
setnz cl  +
mov [ebp-69h] cl +
test cl cl +
jz loc_4126F2  +
lea eax [esi+1000h] +
xor eax esi +
and eax 7F000h +
xor esi eax +
jmp loc_4126F2  +
test edi edi +
jz loc_4126EE  +
lea eax [esi+1000h] +
mov byte ptr [ebp-69h] 1 +
xor eax esi +
and eax 7F000h +
xor esi eax +
jmp loc_4126F2  +
mov byte ptr [ebp-69h] 0 +
mov eax edx +
mov ecx edi +
mov edx [ebp-88h] +
mov edi [ebp-90h] +
push ebx  +
mov ebx esi +
cmpxchg8b qword ptr [edi]  +
mov esi ebx +
pop ebx  +
mov edi edx +
cmp eax [ebp-78h] +
jnz loc_41271B  +
cmp edi [ebp-88h] +
jz loc_412726  +
mov cl [ebp-6Ah] +
mov ch [ebp-6Ch] +
jmp loc_4125CC  +
cmp byte ptr [ebp-6Bh] 0 +
jz loc_41273F  +
mov ecx [ebp-8Ch] +
push dword ptr [ebp-84h]  +
push 1  +
mov eax [ecx] +
call dword ptr [eax+8]  +
cmp byte ptr [ebp-69h] 0 +
jz loc_4128D1  +
xor eax eax +
cmp [ebp-6Ah] al +
setz al  +
inc eax  +
mov [ebp-88h] eax +
call ds:GetCurrentThreadId  +
test byte_44E7C0 10h +
mov edi eax +
mov esi [ebp-88h] +
jz loc_4127C1  +
lea eax [ebp-78h] +
mov [ebp-80h] edi +
mov [ebp-28h] eax +
mov edx offset unk_442688 +
lea eax [ebp-80h] +
mov [ebp-78h] esi +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
push 3  +
push ecx  +
mov ecx offset unk_44D0C8 +
mov dword ptr [ebp-24h] 0 +
mov dword ptr [ebp-20h] 4 +
mov dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-10h] 4 +
mov dword ptr [ebp-0Ch] 0 +
call sub_40B111  +
mov eax [ebp-8Ch] +
push 0  +
push esi  +
push edi  +
push dword ptr [eax+50h]  +
call ds:PostQueuedCompletionStatus  +
test eax eax +
jz loc_4127F1  +
mov ecx [ebp-8Ch] +
mov esi [ebp-84h] +
push esi  +
push 0  +
mov eax [ecx] +
call dword ptr [eax+8]  +
jmp loc_4128D7  +
test byte_44E7C0 20h +
jz loc_41284C  +
lea eax [ebp-80h] +
mov [ebp-78h] edi +
mov [ebp-58h] eax +
mov edx offset unk_4425C0 +
lea eax [ebp-78h] +
mov [ebp-80h] esi +
mov [ebp-48h] eax +
lea eax [ebp-68h] +
push eax  +
push 3  +
push ecx  +
mov ecx offset unk_44D0C8 +
mov dword ptr [ebp-54h] 0 +
mov dword ptr [ebp-50h] 4 +
mov dword ptr [ebp-4Ch] 0 +
mov dword ptr [ebp-44h] 0 +
mov dword ptr [ebp-40h] 4 +
mov dword ptr [ebp-3Ch] 0 +
call sub_40B111  +
mov ecx 1C135Eh +
call sub_427550  +
mov eax [ebp-90h] +
mov edi [eax] +
mov esi edi +
mov ecx [eax+4] +
mov eax edi +
shr esi 0Ch +
mov edx ecx +
dec esi  +
mov [ebp-80h] edi +
shl esi 0Ch +
xor esi edi +
mov [ebp-78h] ecx +
and esi 7F000h +
xor esi edi +
mov edi [ebp-90h] +
push ebx  +
mov ebx esi +
cmpxchg8b qword ptr [edi]  +
mov esi ebx +
pop ebx  +
mov ecx edx +
cmp eax [ebp-80h] +
jnz loc_41289A  +
cmp ecx [ebp-78h] +
jz loc_4128D1  +
mov edi [ebp-90h] +
mov esi eax +
shr esi 0Ch +
mov edx ecx +
dec esi  +
mov [ebp-80h] eax +
shl esi 0Ch +
xor esi eax +
mov [ebp-78h] ecx +
and esi 7F000h +
xor esi eax +
push ebx  +
mov ebx esi +
cmpxchg8b qword ptr [edi]  +
mov esi ebx +
pop ebx  +
mov ecx edx +
cmp eax [ebp-80h] +
jnz loc_41289A  +
cmp ecx [ebp-78h] +
jnz loc_41289A  +
mov esi [ebp-84h] +
cmp byte ptr [ebp-6Ch] 0 +
jz loc_412903  +
cmp dword ptr [ebx+0Ch] 3 +
jnz loc_4128EF  +
mov eax [ebx+8] +
mov [esi] eax +
mov eax 3 +
jmp loc_41290C  +
cmp byte ptr [ebp-6Ah] 0 +
jnz loc_4128FF  +
mov ecx 1C1394h +
call sub_427550  +
xor eax eax +
jmp loc_41290C  +
xor eax eax +
cmp [ebp-6Dh] al +
setz al  +
inc eax  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_43D1F2  +
mov esp ebp +
pop ebp  +
mov esp ebx +
pop ebx  +
retn 0Ch  +
***
push ebx  +
mov ebx esp +
sub esp 8 +
and esp 0FFFFFFF8h +
add esp 4 +
push ebp  +
mov ebp [ebx+4] +
mov [esp+4] ebp +
mov ebp esp +
sub esp 20h +
mov edx [ebx+8] +
push esi  +
push edi  +
mov [ebp-20h] ecx +
mov eax [edx+20h] +
mov [ebp-0Ch] eax +
lea eax [ecx+8] +
mov dword ptr [edx+1Ch] 0 +
mov esi [eax] +
mov [ebp-10h] eax +
mov eax [eax+4] +
mov [ebp-8] eax +
mov edi esi +
mov ecx eax +
mov [ebp-18h] edi +
mov [ebp-1Ch] ecx +
test edi 40000000h +
jnz loc_412993  +
test ecx ecx +
jz loc_412993  +
test edi 800h +
jnz loc_412993  +
cmp dword ptr [ebp-0Ch] 0 +
jnz loc_412993  +
lea eax [ecx-1] +
mov dword ptr [ebp-4] 2 +
mov [ebp-8] eax +
jmp loc_4129CF  +
lea esi [edi+1] +
xor esi edi +
and esi 0FFFh +
xor esi edi +
mov eax esi +
test eax 40000000h +
jnz loc_4129C8  +
cmp dword ptr [edx+20h] 0 +
jnz loc_4129C8  +
lea esi [eax+80000h] +
mov dword ptr [ebp-4] 1 +
xor esi eax +
and esi 3FF80000h +
xor esi eax +
jmp loc_4129CF  +
mov dword ptr [ebp-4] 0 +
mov eax edi +
mov edx ecx +
mov ecx [ebp-8] +
mov edi [ebp-10h] +
push ebx  +
mov ebx esi +
cmpxchg8b qword ptr [edi]  +
mov esi ebx +
pop ebx  +
mov esi eax +
mov [ebp-8] edx +
mov eax edx +
cmp esi [ebp-18h] +
jnz loc_4129F4  +
cmp eax [ebp-1Ch] +
jz loc_4129FC  +
mov edx [ebx+8] +
jmp loc_412960  +
***
mov eax [ebx+8] +
cmp dword ptr [eax+20h] 0 +
jz loc_412A11  +
mov ecx [ebp-20h] +
push 0  +
push 0  +
mov edx [ecx] +
call dword ptr [edx+8]  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
mov esp ebx +
pop ebx  +
retn 4  +
***
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 60h +
mov eax dword_44D0B4 +
xor eax esp +
mov [esp+5Ch] eax +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov [esp+14h] eax +
mov [esp+0Ch] esi +
push edi  +
mov esi [esi+4] +
push dword ptr [esi+14h]  +
call ds:FlsGetValue  +
mov edi eax +
test edi edi +
jnz loc_412A93  +
call ds:GetCurrentThreadId  +
cmp eax dwThreadId +
jnz loc_412A93  +
mov eax [esi+2Ch] +
push eax  +
push dword ptr [esi+14h]  +
mov [esp+14h] eax +
call ds:FlsSetValue  +
test eax eax +
jz loc_412A93  +
mov ecx esi +
call sub_41403B  +
cmp eax [esp+0Ch] +
jz loc_412A90  +
mov ecx 1C1449h +
call sub_427550  +
jmp loc_412A93  +
mov edi [esi+2Ch] +
cmp edi [esp+18h] +
jz loc_412AA3  +
mov ecx 1C139Ch +
call sub_427550  +
mov esi [esp+10h] +
mov ecx [esi+8] +
or edx 0FFFFFFFFh +
mov eax [esi+0Ch] +
mov eax ecx +
shr eax 13h +
and eax 7FFh +
test ecx ecx +
jns loc_412AC3  +
test eax eax +
jz loc_412AC3  +
dec eax  +
shr ecx 0Ch +
and ecx 7Fh +
sub eax ecx +
sub eax 4 +
test eax eax +
jle loc_412B80  +
cmp eax 4 +
jbe loc_412B7B  +
lea eax [esp+0Ch] +
mov dword ptr [esp+0Ch] 0 +
push eax  +
call ds:GetCurrentThread  +
push eax  +
call ds:GetThreadIOPendingFlag  +
test eax eax +
jz loc_412B04  +
cmp dword ptr [esp+0Ch] 0 +
jnz loc_412B16  +
push ecx  +
push 1  +
mov ecx esi +
call sub_411A6F  +
test al al +
jnz loc_412C90  +
mov esi [esi+4] +
push dword ptr [esi+14h]  +
call ds:FlsGetValue  +
mov edi eax +
test edi edi +
jnz loc_412B67  +
call ds:GetCurrentThreadId  +
cmp eax dwThreadId +
jnz loc_412B67  +
mov eax [esi+2Ch] +
push eax  +
push dword ptr [esi+14h]  +
mov [esp+1Ch] eax +
call ds:FlsSetValue  +
test eax eax +
jz loc_412B67  +
mov ecx esi +
call sub_41403B  +
cmp eax [esp+14h] +
jz loc_412B64  +
mov ecx 1C1449h +
call sub_427550  +
jmp loc_412B67  +
mov edi [esi+2Ch] +
cmp edi [esp+18h] +
jz loc_412B77  +
mov ecx 1C139Ah +
call sub_427550  +
mov esi [esp+10h] +
mov edx 1770h +
push edx  +
lea eax [esp+24h] +
mov dword ptr [esp+20h] 0 +
push eax  +
lea eax [esp+24h] +
mov dword ptr [esp+28h] 0 +
push eax  +
lea eax [esp+30h] +
push eax  +
push dword ptr [esi+50h]  +
call ds:GetQueuedCompletionStatus  +
mov esi eax +
test esi esi +
jz loc_412BB3  +
xor edi edi +
jmp loc_412BBB  +
call ds:GetLastError  +
mov edi eax +
mov ecx [esp+1Ch] +
cmp ecx 4 +
mov edx [esp+20h] +
setnb al  +
test esi esi +
jnz loc_412D17  +
test edx edx +
jnz loc_412D17  +
test byte_44E7C0 20h +
jz loc_412C39  +
mov eax [esp+24h] +
mov [esp+0Ch] eax +
lea eax [esp+14h] +
mov [esp+40h] eax +
lea eax [esp+0Ch] +
mov [esp+50h] eax +
lea eax [esp+30h] +
push eax  +
push 3  +
mov [esp+1Ch] ecx +
mov [esp+4Ch] edx +
mov [esp+54h] edx +
mov [esp+5Ch] edx +
mov [esp+64h] edx +
mov edx offset unk_442698 +
push ecx  +
mov ecx offset unk_44D0C8 +
mov dword ptr [esp+54h] 4 +
mov dword ptr [esp+64h] 4 +
call sub_40B111  +
mov ecx [esp+1Ch] +
test ecx ecx +
jz loc_412C47  +
mov ecx 1C13A3h +
call sub_427550  +
cmp edi 102h +
jz loc_412C59  +
mov ecx 1C13C0h +
call sub_427550  +
lea eax [esp+0Ch] +
mov dword ptr [esp+0Ch] 0 +
push eax  +
call ds:GetCurrentThread  +
push eax  +
call ds:GetThreadIOPendingFlag  +
test eax eax +
jz loc_412C7E  +
cmp dword ptr [esp+0Ch] 0 +
jnz loc_412CA5  +
mov esi [esp+10h] +
push ecx  +
push 1  +
mov ecx esi +
call sub_411A6F  +
test al al +
jz loc_412CA9  +
xor eax eax +
pop edi  +
pop esi  +
mov ecx [esp+5Ch] +
xor ecx esp +
call sub_43D1F2  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov esi [esp+10h] +
mov esi [esi+4] +
push dword ptr [esi+14h]  +
call ds:FlsGetValue  +
mov edi eax +
test edi edi +
jnz loc_412CFA  +
call ds:GetCurrentThreadId  +
cmp eax dwThreadId +
jnz loc_412CFA  +
mov eax [esi+2Ch] +
push eax  +
push dword ptr [esi+14h]  +
mov [esp+1Ch] eax +
call ds:FlsSetValue  +
test eax eax +
jz loc_412CFA  +
mov ecx esi +
call sub_41403B  +
cmp eax [esp+14h] +
jz loc_412CF7  +
mov ecx 1C1449h +
call sub_427550  +
jmp loc_412CFA  +
mov edi [esi+2Ch] +
mov esi [esp+10h] +
cmp edi [esp+18h] +
jz loc_412AA7  +
mov ecx 1C139Ah +
call sub_427550  +
jmp loc_412AA7  +
***
test al al +
jz loc_412E42  +
test edx edx +
jnz loc_412D35  +
mov ecx 1C13C3h +
call sub_427550  +
mov ecx [esp+1Ch] +
mov edx [esp+20h] +
test byte_44E7C0 10h +
jz loc_412DA9  +
mov eax [esp+24h] +
mov edx offset unk_442658 +
mov [esp+0Ch] eax +
lea eax [esp+14h] +
mov [esp+40h] eax +
lea eax [esp+0Ch] +
mov [esp+50h] eax +
lea eax [esp+30h] +
push eax  +
push 3  +
mov [esp+1Ch] ecx +
push ecx  +
mov ecx offset unk_44D0C8 +
mov dword ptr [esp+50h] 0 +
mov dword ptr [esp+54h] 4 +
mov dword ptr [esp+58h] 0 +
mov dword ptr [esp+60h] 0 +
mov dword ptr [esp+64h] 4 +
mov dword ptr [esp+68h] 0 +
call sub_40B111  +
mov ecx [esp+1Ch] +
mov edx [esp+20h] +
push dword ptr [esp+18h]  +
mov esi [esp+14h] +
push edi  +
push dword ptr [esp+2Ch]  +
push ecx  +
push edx  +
mov ecx esi +
call sub_412320  +
mov esi [esi+4] +
mov [esp+14h] eax +
push dword ptr [esi+14h]  +
call ds:FlsGetValue  +
mov [esp+0Ch] eax +
test eax eax +
jnz loc_412E0F  +
call ds:GetCurrentThreadId  +
cmp eax dwThreadId +
jnz loc_412E0B  +
mov edi [esi+2Ch] +
push edi  +
push dword ptr [esi+14h]  +
call ds:FlsSetValue  +
test eax eax +
jz loc_412E0B  +
mov ecx esi +
call sub_41403B  +
cmp eax edi +
jz loc_412E3D  +
mov ecx 1C1449h +
call sub_427550  +
mov eax [esp+0Ch] +
cmp eax [esp+18h] +
jz loc_412E1F  +
mov ecx 1C13C7h +
call sub_427550  +
mov eax [esp+14h] +
mov esi [esp+10h] +
cmp eax 1 +
jz loc_412AA7  +
test eax eax +
jz loc_412C90  +
jmp loc_412ED9  +
mov eax [esi+2Ch] +
jmp loc_412E0F  +
***
test byte_44E7C0 10h +
jz loc_412EB6  +
mov eax [esp+24h] +
mov edx offset unk_4425B0 +
mov [esp+0Ch] eax +
lea eax [esp+14h] +
mov [esp+40h] eax +
lea eax [esp+0Ch] +
mov [esp+50h] eax +
lea eax [esp+30h] +
push eax  +
push 3  +
mov [esp+1Ch] ecx +
push ecx  +
mov ecx offset unk_44D0C8 +
mov dword ptr [esp+50h] 0 +
mov dword ptr [esp+54h] 4 +
mov dword ptr [esp+58h] 0 +
mov dword ptr [esp+60h] 0 +
mov dword ptr [esp+64h] 4 +
mov dword ptr [esp+68h] 0 +
call sub_40B111  +
mov ecx [esp+1Ch] +
mov edx [esp+20h] +
push dword ptr [esp+18h]  +
push ecx  +
mov ecx [esp+18h] +
push edx  +
call sub_412577  +
mov esi eax +
cmp esi 1 +
jz loc_412AA3  +
cmp esi 2 +
jnz loc_412FAD  +
mov esi [esp+10h] +
lea eax [esi+5Ch] +
mov [esp+28h] eax +
lea ecx [esp+0Ch] +
mov dword ptr [esp+0Ch] 0 +
push ecx  +
mov ecx eax +
call sub_424C36  +
mov edi [esp+0Ch] +
test edi edi +
jz loc_412F83  +
mov eax [edi] +
mov ecx edi +
push dword ptr [esp+18h]  +
call dword ptr [eax+78h]  +
mov esi [esi+4] +
push dword ptr [esi+14h]  +
call ds:FlsGetValue  +
mov [esp+0Ch] eax +
test eax eax +
jnz loc_412F69  +
call ds:GetCurrentThreadId  +
cmp eax dwThreadId +
jnz loc_412F65  +
mov eax [esi+2Ch] +
push eax  +
push dword ptr [esi+14h]  +
mov [esp+1Ch] eax +
call ds:FlsSetValue  +
test eax eax +
jz loc_412F65  +
mov ecx esi +
call sub_41403B  +
cmp eax [esp+14h] +
jz loc_412FA8  +
mov ecx 1C1449h +
call sub_427550  +
mov eax [esp+0Ch] +
cmp eax [esp+18h] +
jz loc_412F79  +
mov ecx 1C13D4h +
call sub_427550  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov esi [esp+10h] +
push dword ptr [esp+18h]  +
mov ecx esi +
call loc_412921  +
cmp eax 1 +
jz loc_412AA7  +
test eax eax +
jz loc_412C90  +
mov eax [esp+28h] +
jmp loc_412EF0  +
***
mov eax [esi+2Ch] +
jmp loc_412F69  +
***
push 0FFFFFFFFh  +
push ebx  +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
push ecx  +
mov edx [ebp+arg_8] +
mov ecx 1D05D4h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push esi  +
mov ecx [ebp+arg_0] +
sub esp 10h +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push edi  +
push edi  +
mov edi ecx +
push 0FFFFFFFFh  +
push esi  +
push esi  +
mov ecx [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov ecx [ebp+arg_0] +
call sub_424EBC  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
sub [esp+arg_0] 88h +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 88h +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 88h +
sub [esp+arg_0] 0Ch +
sub ecx 8 +
sub [esp+arg_0] 4 +
sub ecx 4 +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push ebx  +
sub esp 44h +
test [ebp+arg_0] 1 +
lea ecx [esi+20h] +
mov ecx [esi] +
jnz loc_41442E  +
mov eax [ebp+arg_0] +
and esp 0FFFFFFF8h +
sub esp 34h +
and esp 0FFFFFFF8h +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+14h] 0 +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_0] +
push esi  +
push 0FFFFFFFFh  +
call sub_418921  +
push esi  +
cmp [ebp+arg_4] 0 +
push ecx  +
push edi  +
and esp 0FFFFFFF8h +
sub ecx 8 +
sub [esp+arg_0] 0E0h +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 88h +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 0E0h +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 88h +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 0E0h +
and esp 0FFFFFFF8h +
push ecx  +
push 0FFFFFFFFh  +
test dword ptr [esi+20h] 10000000h +
mov edi ecx +
mov esi ecx +
and esp 0FFFFFFF8h +
push ecx  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
mov edx [esi] +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_415112  +
push 1  +
call sub_414FDE  +
mov ecx esi +
call sub_4150E3  +
push 0  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_4155A0  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+10h] +
push edi  +
lea edi [esi+10h] +
mov ebx [esi+20h] +
shr ebx 0Bh +
not bl  +
and bl 1 +
push edi  +
mov edi ecx +
mov eax [edi+14h] +
push eax  +
mov edx [eax] +
call dword ptr [edx+58h]  +
mov edx [edi+20h] +
and edx eax +
test edx 600000h +
jz loc_4151E3  +
mov eax [edi] +
mov ecx edi +
push 0  +
call dword ptr [eax+8Ch]  +
pop edi  +
pop ebp  +
retn 4  +
push ecx  +
mov ecx edi +
call loc_415129  +
test al al +
jz loc_41525A  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [esi+8] +
mov [esi+4] edi +
mov ecx [edi+18h] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
test eax eax +
mov ecx edi +
push esi  +
cmovz eax edi +
mov [esi+8] eax +
call sub_414EE9  +
push esi  +
mov ecx edi +
call loc_41525F  +
cmp [esi+8] ebx +
jz loc_415226  +
mov dword ptr [esi+1Ch] 0 +
cmp dword ptr [esi+10h] 1 +
jnz loc_41524E  +
cmp dword ptr [esi+18h] 0 +
jnz loc_41524E  +
mov eax [esi+4] +
test eax eax +
jz loc_41523F  +
test byte ptr [eax+23h] 1 +
jnz loc_41524E  +
cmp dword ptr [esi+14h] 0 +
jnz loc_41524E  +
push 0  +
mov ecx esi +
call sub_4112AF  +
mov [esi+8] ebx +
mov dword ptr [esi+4] 0 +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi ecx +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_415287  +
push 0  +
push 1  +
mov dword ptr [esi+1Ch] 1 +
call sub_4155A0  +
mov dword ptr [esi+1Ch] 0 +
mov eax [edi+20h] +
shr eax 0Bh +
not al  +
test al 1 +
jz loc_4152CE  +
mov ecx [edi+10h] +
lea ebx [edi+10h] +
sub esp 30h +
mov edx ecx +
push edi  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
push esi  +
push esi  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push edi  +
push ecx  +
push esi  +
push esi  +
mov edx [esi+54h] +
mov ecx [ebp+arg_4] +
push ecx  +
push esi  +
mov ecx [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push esi  +
push esi  +
mov edx [ebp+arg_8] +
sub [esp+arg_0] 4 +
mov eax [ebp+arg_0] +
test byte_44E7C0 8 +
push 0FFFFFFFFh  +
mov eax [ecx+20h] +
push ecx  +
sub esp 24h +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
sub ecx 0FFFFFF80h +
lea eax [ecx+80h] +
push esi  +
push esi  +
mov ecx [esi+84h] +
push esi  +
cmp dword ptr [esi+84h] 0 +
cmp [ebp+arg_4] 0 +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 80h +
sub esp 34h +
push esi  +
push ebx  +
mov eax [esi+8F4h] +
mov esi ecx +
push esi  +
lea eax [ecx+14h] +
mov eax [ebp+arg_0] +
push ecx  +
mov edi ecx +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
push ecx  +
push ecx  +
cmp byte ptr [esi+8F8h] 0 +
push ebx  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ecx  +
mov eax [ecx+40h] +
retn   +
***
sub esp 44h +
push esi  +
push esi  +
push esi  +
mov ecx [esi+84h] +
push 1  +
push [ebp+arg_C]  +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx ecx +
mov ecx [esi+84h] +
push 0FFFFFFFFh  +
push esi  +
lea eax [ecx+14h] +
mov eax [ebp+arg_0] +
push esi  +
mov dword ptr [esi] offset off_443454 +
lea esi [ecx+30h] +
push ecx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+8] 0 +
jz loc_417A1E  +
mov eax 80004005h +
jmp loc_417AC6  +
push ebx  +
lea ebx [esi+7Ch] +
or eax 0FFFFFFFFh +
xadd [ebx] eax +
dec eax  +
js loc_417A33  +
xor eax eax +
jmp loc_417AC5  +
push edi  +
push ecx  +
lea eax [esi+0Ch] +
push ecx  +
mov ecx eax +
mov [ebp+var_4] eax +
call sub_423C68  +
lea edx [esi+70h] +
cmp dword ptr [edx] 0 +
jnz loc_417A6E  +
mov ecx [ebp+arg_0] +
push edx  +
push esi  +
push 20008101h  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+14h]  +
mov edi eax +
test edi edi +
js loc_417AD0  +
mov ecx esi +
call sub_4185EE  +
mov [esi+89h] al +
cmp byte ptr [esi+8] 0 +
jz loc_417AB5  +
mov edi 80004005h +
jmp loc_417AD0  +
mov edi [esi+80h] +
add edi 0Fh +
cmp edi 6666666h +
jnb loc_417ACB  +
push edi  +
lea ecx [esi+30h] +
call sub_4395AD  +
test al al +
jz loc_417ACB  +
imul edx edi +
lea ecx [esi+74h] +
call sub_4273F7  +
test al al +
jz loc_417ACB  +
push 0Fh  +
mov [esi+80h] edi +
pop eax  +
xadd [ebx] eax +
cmp dword ptr [ebx] 0 +
jl loc_417A7B  +
mov ecx [ebp+var_4] +
call sub_423C97  +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov edi 8007000Eh +
inc dword ptr [ebx]  +
mov ecx [ebp+var_4] +
call sub_423C97  +
mov eax edi +
jmp loc_417AC4  +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_415564  +
lea ecx [esi+0Ch] +
mov bl al +
call sub_423C97  +
test bl bl +
jz loc_417B0F  +
mov eax [edi+4Ch] +
push eax  +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 34h +
mov eax dword_44D0B4 +
xor eax esp +
mov [esp+30h] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
mov edi eax +
cmp edi [esi+0Ch] +
jnz loc_417B4B  +
mov eax [esi+10h] +
inc eax  +
mov [esi+10h] eax +
jmp loc_417B64  +
lea eax [esi+14h] +
push eax  +
call ds:EnterCriticalSection  +
mov [esi+0Ch] edi +
mov eax 1 +
mov dword ptr [esi+10h] 1 +
cmp byte ptr [esi+8] 0 +
jnz loc_417B8F  +
mov ecx [esi+78h] +
xor edi edi +
test ecx ecx +
jz loc_417B8F  +
mov ebx [esi+74h] +
mov eax ebx +
mov edx [ebp+8] +
mov eax [esi+10h] +
add eax 0FFFFFFFFh +
mov [esi+10h] eax +
jnz loc_417BA8  +
lea eax [esi+14h] +
mov dword ptr [esi+0Ch] 0 +
push eax  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [esp+30h] +
xor ecx esp +
call sub_43D1F2  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
mov edi ecx +
and esp 0FFFFFFF8h +
mov edx [ebp+arg_0] +
mov eax [ecx+78h] +
cmp [edx] eax +
jnb loc_417F87  +
push esi  +
push edi  +
dec eax  +
mov [ecx+78h] eax +
imul edi [edx] +
imul esi eax +
push 0Ah  +
add edi [ecx+74h] +
add esi [ecx+74h] +
pop ecx  +
movs   +
dec dword ptr [edx]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
sub [esp+arg_0] 80h +
sub [esp+arg_0] 4 +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_0] +
sub esp 10h +
mov ecx [esi] +
lea ecx [esi+28h] +
mov ecx [ebp+arg_0] +
push edi  +
push esi  +
sub esp 0Ch +
sub esp 0Ch +
push esi  +
push ebx  +
push esi  +
push esi  +
push esi  +
cmp [ebp+arg_4] 0 +
push esi  +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_43DF12  +
cmp dword_44E068 0 +
push [ebp+arg_4]  +
push 0  +
push [ebp+arg_0]  +
push edx  +
push ecx  +
call sub_4028FE  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call ds:__stdio_common_vswprintf_s  +
or ecx 0FFFFFFFFh +
add esp 1Ch +
test eax eax +
cmovs eax ecx +
pop ebp  +
retn   +
***
mov eax off_44D520 +
xor edx edx +
call sub_419140  +
push esi  +
sub esp 10h +
call sub_43E8F4  +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
test ecx ecx +
cmp [ebp+arg_0] 0 +
cmp ecx 3FFFFFFEh +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
mov edx [esi+14h] +
cmp edx 10h +
jb loc_419B5F  +
mov ecx [esi] +
inc edx  +
call sub_402740  +
and dword ptr [esi+10h] 0 +
mov dword ptr [esi+14h] 0Fh +
mov byte ptr [esi] 0 +
pop esi  +
retn   +
***
mov eax 400h +
push ebx  +
push ebx  +
mov eax dword_44E7E8 +
call sub_43E8C1  +
mov eax dword_44E7E4 +
push 0FFFFFFFFh  +
sub esp 18h +
push ecx  +
mov edx ecx +
mov eax [edx] +
cmp byte ptr [eax+0Dh] 0 +
jz loc_419FDB  +
mov eax [eax+8] +
mov [edx] eax +
jmp loc_41A027  +
mov ecx [eax] +
cmp byte ptr [ecx+0Dh] 0 +
jz loc_41A01C  +
mov ecx [eax+4] +
cmp byte ptr [ecx+0Dh] 0 +
jnz loc_41A012  +
push esi  +
push edi  +
mov esi eax +
mov edi eax +
push ebx  +
mov ebx ecx +
mov [ebp+var_4] ecx +
mov eax edi +
cmp esi [ecx] +
jnz loc_41A00F  +
mov [edx] ecx +
mov esi ecx +
mov ecx [ecx+4] +
mov edi esi +
mov eax ebx +
cmp byte ptr [ecx+0Dh] 0 +
jz loc_419FF3  +
pop ebx  +
pop edi  +
pop esi  +
cmp byte ptr [eax+0Dh] 0 +
jnz loc_41A027  +
jmp loc_41A025  +
mov ecx eax +
mov eax [ecx+8] +
cmp byte ptr [eax+0Dh] 0 +
jz loc_41A01A  +
mov [edx] ecx +
mov eax edx +
leave   +
retn   +
***
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
cmp word_44E7F0 0 +
xor eax eax +
call sub_41A2B4  +
sub esp 108h +
push 0FFFFFFFFh  +
int 3  +
***
push 10h  +
mov eax dword_44EA50 +
mov eax lpModuleName +
sub esp 120h +
mov eax large fs:2Ch +
push 0FFFFFFFFh  +
push esi  +
push ecx  +
push ecx  +
push esi  +
cmp byte ptr [ecx+0Ch] 0 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
mov ecx [esi+4Ch] +
sub esp 14h +
push ecx  +
push ecx  +
push 0FFFFFFFFh  +
mov edx [ecx] +
mov ecx dword_44E0E0 +
push esi  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
call sub_41B50B  +
push ebx  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
cmp dword ptr [esi+14h] 0 +
push esi  +
push [ebp+arg_8]  +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
and esp 0FFFFFFF8h +
mov esi ecx +
push 0FFFFFFFFh  +
push edi  +
push 0FFFFFFFFh  +
push ebx  +
mov esi ecx +
mov ecx [ecx+0Ch] +
cmp dword ptr [ecx] 0 +
push ecx  +
push esi  +
mov ecx [esi+10h] +
sub [esp+arg_0] 50h +
sub [esp+arg_0] 50h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 50h +
jmp sub_41AF3C  +
***
mov edx [esi+4] +
sub edx [esi] +
mov ecx [esi] +
and edx 0FFFFFFFCh +
call sub_402740  +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
pop esi  +
retn   +
***
call sub_43E8C1  +
push ebx  +
mov eax [edx+4] +
push ecx  +
push ecx  +
sub esp 10h +
mov edi ecx +
push ecx  +
push ebx  +
push ebx  +
jmp loc_41BDCC  +
push esi  +
mov dword ptr [esi] offset off_443C70 +
push 0FFFFFFFFh  +
push ecx  +
mov ecx [ebp+arg_4] +
mov dword ptr [esi] offset off_443C5C +
push [ebp+arg_C]  +
push 0FFFFFFFFh  +
push ecx  +
call sub_43E8C1  +
call sub_43E8C1  +
mov dl 1 +
push 0FFFFFFFFh  +
mov ecx [ecx] +
test ecx ecx +
jz loc_41C744  +
mov eax [ecx] +
lea edx [ebp+arg_0] +
push edx  +
call dword ptr [eax+0Ch]  +
pop ebp  +
retn 4  +
push 0  +
push 152139Ah  +
call sub_406D78  +
int 3  +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
call sub_41C795  +
pop ebp  +
retn 0Ch  +
***
mov eax [ebp+arg_0] +
push ecx  +
sub esp 20h +
push ebx  +
push ebx  +
and esp 0FFFFFFF8h +
push ebx  +
sub esp 1Ch +
sub esp 1Ch +
sub esp 14h +
int 3  +
***
mov eax [ebp+arg_0] +
sub esp 0Ch +
mov edx ecx +
push edi  +
mov edi ecx +
push ecx  +
push esi  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
sub esp 34h +
sub esp 54h +
mov esi eax +
mov eax large fs:2Ch +
mov eax large fs:2Ch +
test ecx ecx +
cmp byte ptr [esi+1Dh] 0 +
mov eax [esi+18h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
push ecx  +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push esi  +
push ecx  +
cmp byte ptr [ecx+20h] 0 +
cmp dword ptr [esi] 0 +
push esi  +
push 0FFFFFFFFh  +
mov esi ecx +
push 0FFFFFFFFh  +
mov eax [ecx+14h] +
push edi  +
mov eax [ecx+8] +
push ecx  +
push esi  +
push ebx  +
push esi  +
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
sub esp 0Ch +
mov ecx [esi+4] +
push edi  +
mov eax [ecx+8] +
sub esp 18h +
sub esp 0Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
push 0FFFFFFFFh  +
sub esp 44h +
sub esp 34h +
mov eax large fs:2Ch +
mov ecx [ebp+arg_0] +
push ecx  +
push ecx  +
push esi  +
mov edi ecx +
test byte ptr dword_44EA80 10h +
push 0FFFFFFFFh  +
mov eax large fs:2Ch +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
call sub_41AEE9  +
push 0FFFFFFFFh  +
add ecx 50h +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
push [ebp+arg_8]  +
mov edx ecx +
push ecx  +
mov edi ecx +
push 0B4h  +
mov edi edx +
push esi  +
mov ecx [esi+4] +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 14h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 14h +
sub [esp+arg_0] 14h +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 0Ch +
sub esp 0Ch +
push 0FFFFFFFFh  +
sub esp 0Ch +
mov eax [ebp+arg_C] +
push 0FFFFFFFFh  +
push ecx  +
mov esi ecx +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push ebx  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
push ebx  +
push esi  +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
push ebx  +
sub esp 18h +
mov ecx [ebp+arg_0] +
sub esp 24h +
sub esp 44h +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ebx edx +
lea ecx [ebp+var_4] +
mov eax [edi] +
mov [ebp+var_4] eax +
call sub_409EE9  +
test byte ptr dword_44EA80 10h +
mov esi eax +
jz loc_41F48E  +
push ebx  +
push esi  +
push dword ptr [edi]  +
call sub_41F3FD  +
test esi esi +
jz loc_41F499  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
and esp 0FFFFFFF8h +
cmp dword_44EA88 0 +
push ecx  +
push ecx  +
push 0FFFFFFFFh  +
sub esp 24h +
mov ecx [esi+78h] +
sub esp 24h +
push ebx  +
mov eax ecx +
push esi  +
push edi  +
push ecx  +
lea ebx [eax+44h] +
mov [ebp+var_8] eax +
push ebx  +
lea ecx [ebp+var_24] +
mov [ebp+var_C] ebx +
call sub_40896F  +
mov edi [ebx+30h] +
test edi edi +
jz loc_41F7F9  +
inc dword ptr [edi+4]  +
lea ecx [ebp+var_24] +
call sub_408946  +
mov [ebp+var_18] edi +
test edi edi +
jz loc_41F815  +
lea ecx [ebp+var_18] +
call sub_4099E9  +
mov esi [eax+8] +
jmp loc_41F817  +
xor esi esi +
mov [ebp+var_14] esi +
test edi edi +
jz loc_41F834  +
lea ecx [ebp+var_18] +
call sub_4099E9  +
mov ecx [eax+0Ch] +
sub ecx [eax+8] +
sar ecx 2 +
lea eax [esi+ecx*4] +
jmp loc_41F836  +
xor eax eax +
mov [ebp+var_4] eax +
cmp esi eax +
jz loc_41F850  +
mov ebx eax +
mov ecx esi +
call sub_404EF2  +
add esi 4 +
cmp esi ebx +
jnz loc_41F83F  +
mov ebx [ebp+var_C] +
test edi edi +
jz loc_41F85B  +
mov ecx edi +
call sub_41F5C3  +
mov edi [ebp+var_8] +
push ecx  +
add edi 10h +
lea ecx [ebp+var_24] +
push edi  +
call sub_40896F  +
mov esi [edi+30h] +
lea ecx [ebp+var_24] +
and dword ptr [edi+30h] 0 +
call sub_408946  +
test esi esi +
jz loc_41F885  +
mov ecx esi +
call sub_41F5C3  +
push ecx  +
push ebx  +
lea ecx [ebp+var_24] +
call sub_40896F  +
mov esi [ebx+30h] +
lea ecx [ebp+var_24] +
and dword ptr [ebx+30h] 0 +
call sub_408946  +
test esi esi +
jz loc_41F8A9  +
mov ecx esi +
call sub_41F5C3  +
mov eax [ebp+var_8] +
mov ecx [eax+78h] +
test ecx ecx +
jz loc_41F8BD  +
and dword ptr [eax+78h] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
push ecx  +
lea ecx [esp+18h] +
lea eax [edi+0Ch] +
push eax  +
call sub_40896F  +
cmp dword ptr [edi+4] 1 +
jz loc_41F936  +
xorps xmm0 xmm0 +
push 7Ch  +
movlpd oword ptr [esp+10h] xmm0 +
call ds:malloc  +
mov [esp+10h] eax +
pop ecx  +
test eax eax +
jz loc_41F95F  +
lea ecx [esp+0Ch] +
call sub_42048E  +
mov esi [esp+10h] +
lea ecx [esp+0Ch] +
and dword ptr [esp+10h] 0 +
call sub_41FF22  +
lea ebx [edi+8] +
mov eax [ebx] +
lea ecx [esp+0Ch] +
mov [esp+0Ch] eax +
mov [ebx] esi +
call sub_41FC07  +
mov dword ptr [edi+4] 1 +
jmp loc_41F939  +
lea ebx [edi+8] +
cmp byte ptr [ebp+8] 0 +
jz loc_41F94D  +
mov ecx ebx +
call sub_4099E9  +
mov ecx eax +
call sub_41F5E6  +
lea ecx [esp+14h] +
call sub_408946  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov ecx 1117748h +
call sub_406E36  +
int 3  +
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
push ecx  +
lea ecx [esp+10h] +
lea eax [esi+0Ch] +
push eax  +
call sub_40896F  +
lea ecx [esi+8] +
xor ebx ebx +
cmp [ecx] ebx +
jz loc_41F9A0  +
call sub_4099E9  +
mov eax [eax+4] +
test eax eax +
jle loc_41F9A2  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0  +
push 1  +
and esp 0FFFFFFF8h +
mov ecx [esi+30h] +
push ecx  +
and esp 0FFFFFFF8h +
mov ecx [ecx] +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
push ecx  +
push edi  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
push esi  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
mov esi ecx +
mov esi ecx +
push ecx  +
call sub_43E8C1  +
sub esp 0Ch +
push edi  +
push ecx  +
push ecx  +
push 0FFFFFFFFh  +
add ecx 8 +
mov eax [ebp+arg_0] +
push esi  +
mov edx [ebp+arg_0] +
sub esp 0Ch +
push ecx  +
push ecx  +
push esi  +
cmp dword ptr [esi] 0 +
push ecx  +
mov eax [ecx+4] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ecx  +
push 0FFFFFFFFh  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
push ecx  +
mov esi ecx +
lea ecx [esi+0ECh] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
add ecx 0FFFFFFC4h +
add ecx 0FFFFFFF4h +
push ecx  +
mov edx [ebp+arg_8] +
push esi  +
sub esp 0Ch +
push ecx  +
push ecx  +
push edi  +
sub [esp+arg_0] 128h +
sub [esp+arg_0] 12Ch +
sub [esp+arg_0] 128h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 12Ch +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 128h +
sub [esp+arg_0] 12Ch +
call sub_406D78  +
push 0FFFFFFFFh  +
push esi  +
mov eax [esi+104h] +
push ecx  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
cmp byte ptr [esi+42h] 0 +
mov al [esi+43h] +
push 0FFFFFFFFh  +
cmp byte ptr [ecx+34h] 0 +
sub esp 0Ch +
and esp 0FFFFFFF8h +
add ecx 0FFFFFFF4h +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
call ds:_Thrd_id  +
mov ecx [esi+24h] +
test ecx ecx +
jz loc_4227BF  +
and dword ptr [esi+24h] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
lea ecx [esi+4] +
pop esi  +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_41B90F  +
mov edx [esi+4] +
call sub_4230D0  +
push dword ptr [esi+4]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
lea ecx [ebp-14h] +
call sub_422D33  +
mov ecx [eax] +
and dword ptr [eax] 0 +
mov eax dword_44E174 +
mov dword_44E174 ecx +
lea ecx [ebp-10h] +
mov [ebp-10h] eax +
call sub_422CF4  +
lea ecx [ebp-14h] +
call sub_422CF4  +
push dword ptr [ebp-18h]  +
call ds:_Mtx_unlock  +
pop ecx  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn   +
***
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
mov ecx [esi+8] +
push 0FFFFFFFFh  +
mov dword ptr [ecx] offset off_443F50 +
push esi  +
push ecx  +
push esi  +
mov esi [ecx] +
test esi esi +
jz loc_422D1B  +
and dword ptr [ecx] 0 +
or eax 0FFFFFFFFh +
xadd [esi] eax +
dec eax  +
jnz loc_422D1B  +
mov ecx esi +
call sub_4227AB  +
push esi  +
call ds:free  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
push 0FFFFFFFFh  +
call sub_43E8C1  +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
mov eax [edx+4] +
push edi  +
and dword ptr [eax] 0 +
mov edi [edx] +
test edi edi +
jz loc_4230F7  +
push esi  +
mov esi [edi] +
lea ecx [edi+0Ch] +
call sub_422BC9  +
push edi  +
call ds:free  +
mov edi esi +
pop ecx  +
test esi esi +
jnz loc_4230DE  +
pop esi  +
pop edi  +
retn   +
***
cmp dword ptr [ecx] 0 +
push ecx  +
push ecx  +
sub esp 14h +
mov eax [ebp+arg_0] +
push ecx  +
call sub_43E8C1  +
push 0FFFFFFFFh  +
mov eax [ecx+18h] +
call sub_43E8C1  +
cmp dword ptr [ecx+8] 0 +
mov eax [ecx+8] +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 8 +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 0Ch +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 10h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 8 +
mov eax large fs:2Ch +
push ecx  +
push edi  +
mov ecx [ebp+arg_0] +
test [ebp+arg_0] 1 +
pop ecx  +
cmp [ebp+arg_0] 0 +
push 0Ch  +
call ds:malloc  +
pop ecx  +
mov ecx eax +
test ecx ecx +
jz loc_423902  +
mov dword ptr [ecx] offset off_443FEC +
mov dword ptr [ecx+4] 10h +
mov dword ptr [ecx+8] 1 +
jmp loc_423904  +
xor ecx ecx +
mov eax [ebp+arg_0] +
mov edx 8007000Eh +
mov [eax] ecx +
xor eax eax +
test ecx ecx +
cmovz eax edx +
pop ebp  +
retn 4  +
***
push esi  +
push esi  +
push ecx  +
push ecx  +
push ecx  +
push esi  +
push ebx  +
mov ecx [ebp+arg_0] +
push 1F0003h  +
push esi  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push esi  +
push 0FFFFFFFFh  +
mov esi ecx +
sub dword ptr [ecx+4] 1 +
push 0FFFFFFFFh  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_423B95  +
pop ebp  +
retn 4  +
***
sub [esp+arg_0] 48h +
sub [esp+arg_0] 48h +
sub [esp+arg_0] 48h +
mov dword ptr [ecx] offset off_444060 +
push ecx  +
push 0FFFFFFFFh  +
push edi  +
mov ecx esi +
sub esp 14h +
and esp 0FFFFFFF8h +
mov edi [ecx+1Ch] +
mov edx ecx +
push ecx  +
mov dword ptr [esi] offset off_444078 +
mov eax [esi-50h] +
call sub_43E8C1  +
push esi  +
push esi  +
test byte ptr [esi+3Ch] 1 +
call sub_43E8C1  +
mov eax [edx+10h] +
call sub_43E92A  +
push 0FFFFFFFFh  +
call sub_43E8C1  +
call sub_43E92A  +
sub ecx [ecx-4] +
mov ax [ebp+arg_4] +
push esi  +
push 0  +
push esi  +
push ebx  +
lea eax [esi+8] +
push esi  +
push ecx  +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
push edi  +
call sub_40F318  +
mov edi eax +
test edi edi +
js loc_424A61  +
push esi  +
push [ebp+arg_0]  +
mov esi [ebp+var_4] +
push esi  +
call sub_424964  +
mov edi eax +
test esi esi +
jz loc_424A60  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
push ebx  +
mov edi ecx +
push esi  +
push ebx  +
push ecx  +
push ebx  +
sub esp 0Ch +
mov edx [ebp+arg_0] +
push esi  +
push esi  +
xor eax eax +
mov eax dwThreadId +
call ds:GetCurrentThreadId  +
mov ecx [ebp+arg_0] +
push ecx  +
and esp 0FFFFFFF8h +
push ecx  +
push esi  +
sub esp 0Ch +
cmp dword_44EC30 0 +
push ecx  +
sub esp 10h +
call sub_43E8C1  +
push ecx  +
mov edx [ebp+arg_4] +
call sub_43E8C1  +
push ecx  +
call sub_43E8C1  +
movzx eax word ptr [ecx+6] +
push 0FFFFFFFFh  +
sub esp 0Ch +
push ecx  +
push 0FFFFFFFFh  +
mov eax [ecx+1Ch] +
test eax eax +
jz loc_4259B3  +
retn   +
push 0  +
push 312119Fh  +
call sub_406D78  +
int 3  +
push esi  +
mov esi [ecx] +
test esi esi +
jz loc_4259D6  +
mov ecx esi +
call sub_4259F9  +
push esi  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
lea eax [esi+28h] +
push eax  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
lea ecx [esi+20h] +
call sub_425A34  +
lea ecx [esi+0Ch] +
call sub_41B90F  +
lea ecx [esi+4] +
pop esi  +
jmp sub_403460  +
***
push ecx  +
call sub_43E8C1  +
call sub_43E8C1  +
movzx eax dl +
cmp ecx 3F2h +
and eax 1Fh +
sub esp 2Ch +
cmp ecx 8 +
push 0FFFFFFFFh  +
push ecx  +
mov eax dword_44EC34 +
test cl cl +
sub esp 34h +
sub esp 2Ch +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
sub esp 1Ch +
cmp dword_44EC30 0 +
push ebx  +
push esi  +
push edi  +
jnz loc_426E22  +
push ecx  +
push offset off_44D680  +
lea ecx [esp+30h+var_1C] +
call sub_426E5A  +
push 4  +
pop ecx  +
call sub_425C03  +
push 0Ah  +
pop ecx  +
call sub_425C03  +
push 8  +
pop ecx  +
call sub_426BC2  +
push 9  +
pop ecx  +
call sub_426BC2  +
push 0Dh  +
pop ecx  +
call sub_426BC2  +
push 0Eh  +
pop ecx  +
call sub_426BC2  +
push 0Bh  +
pop ecx  +
call sub_426BC2  +
push 0Fh  +
pop ecx  +
call sub_426BC2  +
xor ebx ebx +
mov esi offset off_444760 +
inc ebx  +
mov edi offset aPath +
cmp dword_44D720 0 +
jz loc_426DD1  +
mov eax off_44D728 +
mov [esp+28h+var_8] eax +
xor eax eax +
mov [esp+28h+var_4] ax +
lea eax [esp+28h+var_10] +
push eax  +
push offset aHkcuPolicyExis  +
push ecx  +
mov ecx 65D093h +
mov [esp+34h+var_10] esi +
mov [esp+34h+var_C] edi +
call sub_4270D2  +
mov dword_44EC2C ebx +
cmp dword_44D740 0 +
jz loc_426E13  +
mov eax off_44D748 +
mov [esp+28h+var_8] eax +
xor eax eax +
mov [esp+28h+var_4] ax +
lea eax [esp+28h+var_10] +
push eax  +
push offset aHkcuCloudPolic  +
push ecx  +
mov ecx 21522DCh +
mov [esp+34h+var_10] esi +
mov [esp+34h+var_C] edi +
call sub_4270D2  +
mov dword_44EC2C ebx +
mov byte_44EC28 bl +
lea ecx [esp+28h+var_1C] +
mov dword_44EC30 ebx +
call loc_426E29  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
jmp loc_426E43  +
mov ecx edi +
call sub_408B71  +
mov eax [esi] +
push dword ptr [eax]  +
call ds:ReleaseSRWLockExclusive  +
mov eax [edi] +
test eax eax +
jnz loc_426E32  +
mov eax [ebp+arg_0] +
push esi  +
sub esp 0Ch +
mov ecx [ebp+arg_0] +
sub esp 18h +
sub esp 10h +
sub esp 20h +
push ecx  +
sub esp 20h +
push esi  +
push ecx  +
push ecx  +
and dword ptr [ecx+4] 0 +
sub esp 0Ch +
mov esi ecx +
mov eax large fs:2Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
cmp dword ptr [esi] 0 +
test esi esi +
mov eax [ebp+arg_0] +
sub esp 64h +
sub esp 44h +
sub esp 44h +
push dword ptr [ecx]  +
mov edx [ecx] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
movzx ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push esi  +
mov dword ptr [esi] offset off_445190 +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
mov edx [ebp+arg_8] +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push esi  +
mov esi ecx +
push esi  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
test byte_44E7C1 2 +
sub esp 18h +
sub esp 2Ch +
mov eax [ecx+1DCh] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
sub esp 44h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [esp+50h+var_24] edi +
sub eax 0FFh +
jz loc_429709  +
sub eax 14h +
jz loc_429348  +
sub eax 105h +
jnz loc_429907  +
push dword ptr [edi+58h]  +
xor ebx ebx +
mov [esp+54h+var_C] edi +
lea ecx [esp+54h+var_14] +
mov [esp+54h+var_10] ebx +
mov [esp+54h+var_8] ebx +
mov [esp+54h+var_4] 1 +
call sub_42B3A0  +
mov eax [ebp+arg_8] +
mov byte ptr [esp+50h+var_3C] bl +
cmp eax 12h +
ja loc_4292F5  +
jz loc_42924D  +
cmp eax 0Bh +
ja loc_4292FC  +
jmp ds:off_429910[eax*4]  +
and [esp+50h+var_14] 0FFFFFFF0h +
jmp loc_429333  +
mov ecx 3D41D6h +
call sub_427550  +
mov eax [esp+50h+var_14] +
mov esi 200h +
test eax esi +
jz loc_429216  +
mov ecx 3D41D7h +
call sub_427550  +
mov eax [esp+50h+var_14] +
or eax esi +
mov [esp+50h+var_14] eax +
test eax 800h +
jz loc_42923E  +
push offset aTooQuickToEnte  +
push ecx  +
push 0Fh  +
mov edx 4ECh +
mov ecx 3D41D8h +
call sub_404AE6  +
mov eax [esp+50h+var_14] +
and eax 0FFFFF3FFh +
mov byte ptr [esp+50h+var_3C] 1 +
jmp loc_42932F  +
call ds:GetTickCount64  +
mov ebx eax +
mov [esp+50h+var_34] edx +
call ds:IsSystemResumeAutomatic  +
shl eax 7 +
xor eax [esp+50h+var_14] +
and eax 80h +
xor eax [esp+50h+var_14] +
mov [esp+50h+var_14] eax +
test eax 200h +
jz loc_429285  +
or eax 400h +
mov [esp+50h+var_14] eax +
jmp loc_4292EB  +
test eax 800h +
jz loc_4292EB  +
mov edx [edi+158h] +
mov eax edx +
mov esi [edi+15Ch] +
and eax esi +
cmp eax 0FFFFFFFFh +
jnz loc_4292B7  +
mov ecx 3D41DCh +
call sub_427550  +
mov edx [edi+158h] +
mov esi [edi+15Ch] +
mov eax [esp+50h+var_34] +
mov ecx ebx +
sub ecx edx +
sbb eax esi +
mov [esp+50h+var_1C] eax +
js loc_4292DB  +
jg loc_4292D1  +
cmp ecx 7530h +
jb loc_4292DB  +
mov ecx 3D41DDh +
call sub_427550  +
mov eax [esp+50h+var_34] +
mov [edi+158h] ebx +
mov [edi+15Ch] eax +
and [esp+50h+var_14] 0FFFFFDFFh +
jmp loc_429333  +
cmp eax 8013h +
jz loc_429323  +
mov ecx 3D41E1h +
call sub_427550  +
mov ecx [esp+50h+var_14] +
and ecx 0Fh +
call sub_428DBB  +
mov ecx [esp+50h+var_14] +
xor eax ecx +
and eax 0Fh +
xor ecx eax +
mov [esp+50h+var_14] ecx +
jmp loc_429333  +
push [esp+50h+var_14]  +
mov ecx [ebp+arg_C] +
call sub_428B0E  +
mov [esp+50h+var_14] eax +
mov eax [esp+50h+var_C] +
lea edx [esp+50h+var_14] +
push [esp+50h+var_3C]  +
push edx  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+60h]  +
jmp loc_429387  +
mov esi [ebp+arg_8] +
lea ecx [esp+50h+var_14] +
mov eax esi +
xor ebx ebx +
shr eax 8 +
not al  +
mov [esp+50h+var_41] bl +
and eax 0FFFFFF01h +
mov [esp+50h+var_42] bl +
push eax  +
push edi  +
push dword ptr [edi+58h]  +
mov [esp+5Ch+var_2C] eax +
call sub_42B340  +
mov byte ptr [esp+50h+var_3C] bl +
test esi 100h +
jz loc_429395  +
cmp [edi+13Ch] bl +
jnz loc_429395  +
lea ecx [esp+50h+var_14] +
call sub_42B3F4  +
jmp loc_429907  +
mov eax esi +
and eax 0FFFFFEFFh +
mov [esp+50h+var_34] eax +
sub eax 1 +
jz loc_42961C  +
dec eax  +
sub eax 1 +
jz loc_4295E7  +
sub eax 1 +
jz loc_4294A3  +
sub eax 1 +
jz loc_429447  +
sub eax 1 +
jz loc_429440  +
sub eax 1 +
jz loc_42942A  +
sub eax 1 +
jz loc_4293DE  +
mov ecx 3D41D5h +
jmp loc_429682  +
call ds:GetTickCount64  +
cmp edx [edi+21Ch] +
jg loc_429415  +
jl loc_4293F6  +
cmp eax [edi+218h] +
jnb loc_429415  +
mov [esp+50h+var_41] 1 +
cmp edx [edi+224h] +
jl loc_4296A1  +
jg loc_429415  +
cmp eax [edi+220h] +
jbe loc_4296A1  +
push esi  +
push dword ptr [edi+5Ch]  +
call KillTimer  +
mov [edi+211h] bl +
jmp loc_4296A1  +
mov ecx edi +
call sub_428A74  +
push esi  +
push dword ptr [edi+5Ch]  +
call KillTimer  +
jmp loc_42968E  +
mov [esp+50h+var_42] 1 +
jmp loc_429431  +
or [esp+50h+var_14] 8000h +
call ds:GetTickCount64  +
mov ecx [edi+254h] +
mov [esp+50h+var_34] eax +
xor eax eax +
add ecx [edi+228h] +
mov [esp+50h+var_40] edx +
adc eax [edi+22Ch] +
cmp edx eax +
jg loc_429481  +
jl loc_42948B  +
mov edx [esp+50h+var_34] +
cmp edx ecx +
jnb loc_429485  +
jmp loc_42948B  +
mov edx [esp+50h+var_34] +
mov eax [esp+50h+var_40] +
mov ecx edx +
mov [edi+218h] ecx +
mov ecx 20CFh +
mov [edi+21Ch] eax +
call sub_43CD0E  +
jmp loc_429431  +
test [esp+50h+var_14] 200h +
jnz loc_4294BC  +
mov ecx 3D41C8h +
call sub_427550  +
jmp loc_42968E  +
call ds:GetTickCount64  +
push [esp+50h+var_2C]  +
mov ecx [edi] +
push edi  +
mov [esp+58h+var_40] eax +
mov [esp+58h+var_34] edx +
call dword ptr [ecx+5Ch]  +
mov esi eax +
mov edx [esi+10h] +
mov ecx edx +
and ecx [esi+14h] +
cmp ecx 0FFFFFFFFh +
jz loc_4294EE  +
mov eax [esi+8] +
and eax [esi+0Ch] +
cmp eax 0FFFFFFFFh +
jnz loc_4294FB  +
mov ecx 3D41C9h +
call sub_427550  +
mov edx [esi+10h] +
mov eax [esi+0Ch] +
mov ecx [esi+14h] +
cmp eax ecx +
jl loc_42951C  +
jg loc_42950C  +
cmp [esi+8] edx +
jbe loc_42951C  +
mov ecx 3D41CAh +
call sub_427550  +
mov edx [esi+10h] +
mov ecx [esi+14h] +
cmp ecx [esp+58h+var_3C] +
jl loc_42953C  +
jg loc_42952C  +
mov eax [esp+58h+var_48] +
cmp edx eax +
jbe loc_429540  +
mov ecx 3D41CBh +
call sub_427550  +
mov edx [esi+10h] +
mov ecx [esi+14h] +
mov eax [esp+58h+var_48] +
sub eax edx +
mov edx [esp+58h+var_3C] +
mov [esp+58h+var_34] eax +
mov eax edx +
sbb eax ecx +
cmp eax ebx +
jg loc_4295C3  +
jl loc_42955E  +
cmp [esp+58h+var_34] 1B58h +
jnb loc_4295C3  +
mov eax [esp+58h+var_48] +
mov ecx edx +
sub eax [esi+8] +
sbb ecx [esi+0Ch] +
js loc_429591  +
jg loc_429575  +
cmp eax 9C40h +
jb loc_429591  +
mov ecx 3D41CCh +
call sub_427550  +
and [esp+58h+var_1C] 0FFFFFDFFh +
mov byte ptr [esp+58h+var_C+2] 1 +
jmp loc_42968E  +
add eax 0FFFF810Ch +
adc ecx 0FFFFFFFFh +
cmp ecx ebx +
ja loc_4295B4  +
jb loc_4295A6  +
cmp eax 1387h +
ja loc_4295B4  +
mov ecx 3D41CDh +
call sub_427550  +
mov edx [esp+58h+var_3C] +
mov eax [esp+58h+var_48] +
mov [esi+10h] eax +
mov [esi+14h] edx +
jmp loc_42968E  +
call ds:IsSystemResumeAutomatic  +
mov ecx [esp+58h+var_1C] +
and eax 1 +
or eax 8 +
and ecx 0FFFFFF7Fh +
shl eax 7 +
or eax ecx +
mov [esp+58h+var_1C] eax +
jmp loc_42968E  +
push offset aItTookTooLongT  +
push ecx  +
push 0Fh  +
mov edx 4ECh +
mov ecx 3D41D0h +
call sub_404AE6  +
push esi  +
push dword ptr [edi+5Ch]  +
call KillTimer  +
and [esp+50h+var_14] 0FFFFF2FFh +
mov [esp+50h+var_2] 1 +
mov byte ptr [esp+50h+var_3C] 1 +
jmp loc_42968E  +
mov ecx [esp+50h+var_14] +
mov byte ptr [esp+50h+var_3C] 1 +
test ecx 200h +
jnz loc_42967D  +
test ecx 400h +
jz loc_42964D  +
and ecx 0FFFFFBFFh +
mov [esp+50h+var_14] ecx +
shr ecx 0Ch +
not cl  +
and cl 1 +
mov byte ptr [esp+50h+var_3C] cl +
jmp loc_42968E  +
mov edx 800h +
test ecx edx +
jz loc_429673  +
mov eax ecx +
shr eax 1 +
not eax  +
xor eax ecx +
and eax edx +
xor eax ecx +
mov [esp+50h+var_14] eax +
shr eax 0Bh +
not al  +
and al 1 +
mov byte ptr [esp+50h+var_3C] al +
jmp loc_42968E  +
mov ecx 3D41D2h +
jmp loc_4294B2  +
mov ecx 3D41D3h +
call sub_427550  +
cmp [esp+50h+var_34] 8 +
jz loc_4296A1  +
mov eax [esp+50h+var_C] +
lea edx [esp+50h+var_14] +
push [esp+50h+var_3C]  +
push edx  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+60h]  +
lea ecx [esp+5Ch+var_20] +
call sub_42B3F4  +
cmp [esp+5Ch+var_4E] bl +
jz loc_4296B7  +
mov ecx edi +
call sub_428EC2  +
cmp [esp+5Ch+var_4D] bl +
jz loc_429907  +
mov eax [edi+208h] +
sub eax [edi+204h] +
push 28h  +
cdq   +
pop ecx  +
idiv  ecx +
test eax eax +
jz loc_429907  +
cmp [edi+25Ch] ebx +
jz loc_4296EE  +
mov eax [edi] +
push edi  +
call dword ptr [eax+70h]  +
jmp loc_429907  +
push 1  +
lea eax [edi+1A8h] +
mov ecx offset off_44D154 +
push eax  +
mov eax off_44D154 +
push edi  +
call dword ptr [eax]  +
jmp loc_429907  +
call ds:GetTickCount64  +
mov ecx eax +
mov [esp+50h+var_40] edx +
xor ebx ebx +
mov [esp+50h+var_3C] ecx +
cmp edx [edi+184h] +
jl loc_4298A6  +
jg loc_429735  +
cmp ecx [edi+180h] +
jbe loc_4298A6  +
push dword ptr [edi+58h]  +
lea ecx [esp+54h+var_14] +
mov [esp+54h+var_10] ebx +
mov [esp+54h+var_C] edi +
mov [esp+54h+var_8] ebx +
mov [esp+54h+var_4] 1 +
call sub_42B3A0  +
mov ecx [esp+50h+var_40] +
lea eax [edi+0B8h] +
mov edi [esp+50h+var_3C] +
mov [esp+50h+var_34] eax +
mov esi [eax] +
mov edx [eax+4] +
mov eax esi +
mov [esp+50h+var_2C] esi +
mov esi [esp+50h+var_34] +
mov [esp+50h+var_28] edx +
push ebx  +
mov ebx edi +
cmpxchg8b qword ptr [esi]  +
mov edi ebx +
pop ebx  +
cmp eax [esp+50h+var_2C] +
mov eax esi +
jnz loc_429764  +
cmp edx [esp+50h+var_28] +
jnz loc_429764  +
mov eax [esp+50h+var_C] +
lea edx [esp+50h+var_14] +
and [esp+50h+var_14] 0FFFF7FFFh +
push ebx  +
push edx  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+60h]  +
lea ecx [esp+5Ch+var_20] +
call sub_42B3F4  +
mov ecx edi +
mov edi [esp+5Ch+var_30] +
add ecx [edi+188h] +
mov eax [edi+18Ch] +
adc eax [esp+5Ch+var_4C] +
mov [edi+184h] eax +
lea eax [edi+190h] +
mov [edi+180h] ecx +
lea ecx [esp+5Ch+var_30] +
push eax  +
call sub_409E3B  +
push ecx  +
mov ecx [edi+5Ch] +
mov [esp+60h+var_3C] 0FFFh +
mov eax [eax] +
mov [esp+60h+var_40] eax +
lea eax [esp+60h+var_40] +
push eax  +
push 5  +
pop edx  +
call sub_43941C  +
test eax eax +
jnz loc_42980F  +
mov ecx 3D41C5h +
call sub_427550  +
push ecx  +
lea esi [edi+1E4h] +
push ecx  +
mov ecx esi +
call sub_423C68  +
cmp [edi+211h] bl +
jnz loc_42987C  +
mov eax [edi+224h] +
cmp eax [edi+21Ch] +
jl loc_42987C  +
jg loc_429844  +
mov eax [edi+220h] +
cmp eax [edi+218h] +
jb loc_42987C  +
mov eax [edi+254h] +
push ecx  +
mov ecx [edi+5Ch] +
mov [esp+60h+var_2C] eax +
lea eax [esp+60h+var_2C] +
push eax  +
push 8  +
pop edx  +
mov byte ptr [edi+211h] 1 +
mov [esp+64h+var_28] 0FFFh +
call sub_43941C  +
test eax eax +
jnz loc_42987C  +
mov ecx 3D41C6h +
call sub_427550  +
or dword ptr [edi+218h] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [edi+21Ch] 7FFFFFFFh +
call sub_423C97  +
mov ecx 20D0h +
call sub_43CD0E  +
mov ecx [esp+5Ch+var_48] +
mov edx [esp+5Ch+var_4C] +
mov esi [edi+1B0h] +
mov eax [edi+1B4h] +
add esi 1Eh +
adc eax ebx +
cmp eax edx +
jg loc_4298D6  +
jl loc_4298C1  +
cmp esi ecx +
jnb loc_4298D6  +
mov [edi+1B0h] ecx +
mov ecx edi +
mov [edi+1B4h] edx +
call sub_428EC2  +
jmp loc_429907  +
cmp [edi+230h] bl +
jnz loc_429907  +
or dword ptr [esp+18h] 0FFFFFFFFh +
lea eax [esp+5Ch+var_48] +
push ecx  +
mov ecx [edi+5Ch] +
push eax  +
push 6  +
pop edx  +
mov [esp+64h+var_48] 1Eh +
call sub_43941C  +
test eax eax +
setnz al  +
mov [edi+230h] al +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
sub esp 0A0h +
test byte_44E7C1 2 +
sub esp 14h +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ecx  +
push 2  +
and esp 0FFFFFFF8h +
sub esp 14h +
push ebx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ebx  +
and esp 0FFFFFFF8h +
movzx eax [ebp+arg_4] +
sub esp 14h +
push 0FFFFFFFFh  +
sub esp 14h +
mov eax 0FFFFFEFFh +
sub esp 14h +
sub esp 28h +
sub esp 14h +
push 0FFFFFFFFh  +
push ebx  +
sub esp 0Ch +
sub esp 0Ch +
sub esp 0Ch +
sub esp 0Ch +
push 0FFFFFFFFh  +
push ebx  +
and esp 0FFFFFFF8h +
push esi  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_4] +
push esi  +
push ecx  +
push ecx  +
mov ecx [esi] +
push esi  +
imul edx [ebp+arg_4] +
push edi  +
push ecx  +
call sub_43E92A  +
sub esp 14h +
sub esp 10h +
push ecx  +
push ecx  +
push ecx  +
sub esp 10h +
push edi  +
sub esp 28h +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
push ecx  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
sub esp 2Ch +
push ecx  +
push ecx  +
sub esp 60h +
call sub_42C04C  +
push ebx  +
sub esp 14h +
sub esp 120h +
call sub_42C04C  +
push ecx  +
test esi esi +
mov eax [esi-68h] +
call sub_43E8C1  +
push esi  +
push ecx  +
push ebx  +
sub esp 0Ch +
lea ecx [esi+20h] +
call sub_42C3EE  +
lea ecx [esi+18h] +
call sub_42C407  +
mov ecx esi +
pop esi  +
jmp sub_419B4C  +
***
mov eax [esi] +
mov eax [esi] +
push ecx  +
push esi  +
push ecx  +
push esi  +
imul edx [ebp+arg_4] +
sub esp 10h +
push ecx  +
push esi  +
push ebx  +
push ecx  +
push ecx  +
push esi  +
push esi  +
push ecx  +
push ebx  +
test [ebp+arg_0] 1 +
push ecx  +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
add esp 4 +
push ebp  +
mov ebp [ebx+4] +
mov [esp+8+var_4] ebp +
mov ebp esp +
sub esp 10h +
and [ebp+var_8] 0 +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+0Ch] +
mov [ebp+var_C] eax +
push dword ptr [eax]  +
call ds:AcquireSRWLockShared  +
inc [ebp+var_8]  +
mov edi [esi+14h] +
mov esi [esi+10h] +
jmp loc_42C920  +
mov ecx [esi] +
push dword ptr [ebx+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
add esi 4 +
cmp esi edi +
jnz loc_42C913  +
jmp loc_42C935  +
dec [ebp+var_8]  +
mov eax [ebp+var_C] +
push dword ptr [eax]  +
call ds:ReleaseSRWLockShared  +
mov eax [ebp+var_8] +
test eax eax +
jnz loc_42C926  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
mov esp ebx +
pop ebx  +
retn 4  +
***
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 10h +
and dword ptr [esp+8] 0 +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+0Ch] +
mov [esp+0Ch] eax +
push dword ptr [eax]  +
call ds:AcquireSRWLockShared  +
inc dword ptr [esp+10h]  +
mov edi [esi+14h] +
mov esi [esi+10h] +
jmp loc_42C985  +
mov ecx [esi] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add esi 4 +
cmp esi edi +
jnz loc_42C975  +
jmp loc_42C99C  +
dec dword ptr [esp+10h]  +
mov eax [esp+0Ch] +
push dword ptr [eax]  +
call ds:ReleaseSRWLockShared  +
mov eax [esp+10h] +
test eax eax +
jnz loc_42C98B  +
push 0FFFFFFFFh  +
sub esp 1Ch +
sub esp 0Ch +
push ecx  +
sub esp 0Ch +
push ecx  +
push ecx  +
xor eax eax +
mov edi ecx +
sub esp 0Ch +
push ecx  +
push ecx  +
push 3E8h  +
push esi  +
sub esp 0Ch +
push edi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
mov edi ecx +
sub esp 0Ch +
push edi  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ecx  +
mov eax [ebp+arg_0] +
push ecx  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [ecx] +
push ecx  +
push ecx  +
add ecx 4 +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push 0  +
add ecx 0Ch +
push esi  +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ebx  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
test ecx ecx +
push esi  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 18h +
sub esp 18h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 14h +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ecx  +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push ecx  +
lea ecx [esi+18h] +
call sub_419B4C  +
lea ecx [esi+0Ch] +
call sub_4143E6  +
mov ecx esi +
pop esi  +
jmp sub_42C472  +
***
mov ecx [esi+28h] +
mov eax [edx] +
mov dword ptr [ecx] offset off_442E78 +
mov dword ptr [ecx+4] offset off_445DD4 +
mov [ecx+8] eax +
test eax eax +
jz loc_42FCD2  +
mov eax ecx +
retn   +
push 0  +
push 1404253h  +
call sub_406D78  +
int 3  +
***
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_43F194  +
mov eax large fs:0 +
push eax  +
push ebx  +
push edi  +
mov eax dword_44D0B4 +
xor eax ebp +
push eax  +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
mov edi ecx +
mov ebx 102h +
mov dword ptr [edi] offset off_445A2C +
lea eax [edi+0Ch] +
mov dword ptr [edi+4] offset off_445A58 +
push ebx  +
push eax  +
mov dword ptr [edi+8] 100h +
call ds:_Mtx_init_in_situ  +
lea eax [edi+3Ch] +
push ebx  +
push eax  +
call ds:_Mtx_init_in_situ  +
add esp 10h +
lea ecx [edi+6Ch] +
call sub_42FDDC  +
lea ecx [edi+88h] +
call sub_42FDDC  +
lea ecx [edi+0A4h] +
xor ebx ebx +
mov [ebp-4] ebx +
push ecx  +
mov [ecx] ebx +
mov [ecx+4] ebx +
mov [ecx+8] ebx +
mov [ecx+0Ch] bl +
call sub_42FB95  +
mov dword ptr [edi+0B4h] offset off_4464C0 +
mov dword ptr [edi+0B8h] offset unk_44EC4C +
mov dword ptr [edi+0BCh] offset byte_44EC48 +
call sub_436375  +
mov [edi+0C0h] eax +
call sub_4363BA  +
mov [edi+0C4h] eax +
mov eax [edi+0BCh] +
mov [edi+0C8h] ebx +
mov al [eax] +
test al al +
jnz loc_42FDD0  +
lea eax [esi+4] +
push esi  +
push esi  +
lea ecx [edi+0B4h] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
mov dl 1 +
push 0FFFFFFFFh  +
push offset loc_43F6D3  +
mov eax large fs:0 +
push eax  +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov eax dword_44D0B4 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_4303F4  +
cmp [ebp+arg_4] 0 +
jz loc_4302EE  +
and [ebp+arg_0] 0 +
lea ecx [esi+88h] +
push ecx  +
mov eax esp +
mov [eax] edx +
call sub_42C9B8  +
jmp loc_4303CD  +
xor ebx ebx +
mov dword ptr [ebp+arg_4] edx +
mov [ebp+arg_0] ebx +
mov [ebp+var_4] ebx +
test edx edx +
jnz loc_430308  +
push ebx  +
push 121D08Fh  +
jmp loc_4303FB  +
push ecx  +
lea eax [esi+74h] +
push eax  +
lea ecx [ebp+var_1C] +
call sub_426E5A  +
mov ecx dword ptr [ebp+arg_4] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_4303EC  +
mov ecx dword ptr [ebp+arg_4] +
mov edi offset word_441A9C +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov cx [eax] +
cmp cx [edi] +
jnz loc_430358  +
test cx cx +
jz loc_430354  +
mov cx [eax+2] +
cmp cx [edi+2] +
jnz loc_430358  +
add eax 4 +
add edi 4 +
test cx cx +
jnz loc_430332  +
mov eax ebx +
jmp loc_43035D  +
sbb eax eax +
or eax 1 +
test eax eax +
jz loc_4303EC  +
lea eax [ebp+arg_4] +
push eax  +
push dword ptr [esi+80h]  +
lea ecx [ebp+var_10] +
push dword ptr [esi+7Ch]  +
call sub_42CCA4  +
mov eax [eax] +
cmp eax [esi+80h] +
jz loc_43038C  +
push ebx  +
push 237920D0h  +
jmp loc_4303FB  +
mov ecx [esi+80h] +
cmp ecx [esi+84h] +
jz loc_4303AB  +
mov eax dword ptr [ebp+arg_4] +
mov dword ptr [ebp+arg_4] ebx +
mov [ecx] eax +
add dword ptr [esi+80h] 4 +
jmp loc_4303B8  +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
lea ecx [esi+7Ch] +
call sub_42CD16  +
lea ecx [ebp+var_1C] +
call loc_426E29  +
mov ecx dword ptr [ebp+arg_4] +
test ecx ecx +
jz loc_4303CD  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_4303DA  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push ebx  +
push 237920D1h  +
jmp loc_4303FB  +
push 0  +
push 111711Eh  +
call sub_406D78  +
int 3  +
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
push ecx  +
lea ecx [esp+5Ch+var_3C] +
lea eax [edi+3Ch] +
push eax  +
call sub_40896F  +
mov dl 1 +
lea eax [edi+0Bh] +
xchg dl [eax] +
push ecx  +
lea eax [edi+0Ch] +
push eax  +
lea ecx [esp+60h+var_48] +
call sub_40896F  +
lea ecx [edi+6Ch] +
call sub_42CAC6  +
lea ecx [edi+88h] +
call sub_42CAC6  +
xor cl cl +
lea eax [edi+9] +
xchg cl [eax] +
mov ebx [edi+0A8h] +
mov esi [edi+0A4h] +
cmp esi ebx +
jz loc_430475  +
mov ecx [esi] +
test ecx ecx +
jz loc_430468  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
add esi 4 +
cmp esi ebx +
jnz loc_43045C  +
mov esi [edi+0A4h] +
mov [edi+0A8h] esi +
lea eax [edi+0B0h] +
xor cl cl +
xchg cl [eax] +
lea ecx [esp+5Ch+var_4C] +
call sub_408946  +
lea ecx [esp+5Ch+var_40] +
call sub_408946  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_43FD8B  +
mov eax large fs:0 +
push eax  +
sub esp 10h +
push esi  +
mov eax dword_44D0B4 +
xor eax ebp +
push eax  +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
mov esi ecx +
and dword ptr [ebp-4] 0 +
lea eax [esi+4] +
mov edx esi +
neg edx  +
sbb edx edx +
and edx eax +
mov al byte_44EC48 +
mov [ebp-10h] edx +
test al al +
jnz loc_430544  +
call sub_4363BA  +
push ecx  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_40896F  +
call sub_436375  +
mov edx [eax+4] +
cmp edx [eax+8] +
jz loc_430517  +
mov ecx [ebp-10h] +
mov [edx] ecx +
add dword ptr [eax+4] 4 +
jmp loc_430523  +
lea ecx [ebp-10h] +
push ecx  +
push edx  +
mov ecx eax +
call loc_436460  +
lea ecx [ebp-1Ch] +
call sub_408946  +
lea ecx [esi+0B4h] +
call sub_4361F1  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
leave   +
retn   +
***
neg ecx  +
add ecx 0FFFFFFFCh +
push esi  +
test esi esi +
test esi esi +
cmp [ebp+arg_0] 0 +
sub esp 38h +
mov eax [ebp+arg_8] +
sub esp 0Ch +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push esi  +
push esi  +
sub esp 5FCh +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
sub esp 10h +
sub esp 10h +
push ecx  +
cmp byte ptr [ecx+60h] 0 +
sub esp 130h +
sub esp 130h +
cmp byte ptr [ecx+50h] 0 +
sub esp 100h +
sub esp 0F4h +
cmp byte ptr [ecx+54h] 0 +
sub esp 108h +
cmp byte ptr [ecx+68h] 0 +
sub esp 148h +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
sub esp 0Ch +
add ecx 18h +
test [ebp+arg_0] 1 +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
and esp 0FFFFFFF8h +
push esi  +
push 0FFFFFFFFh  +
push esi  +
sub esp 10h +
sub esp 10h +
push 0FFFFFFFFh  +
mov ecx [esi+5Ch] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_43F4EA  +
mov eax large fs:0 +
push eax  +
sub esp 5Ch +
mov eax dword_44D0B4 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov edi ecx +
mov eax [ebp+arg_4] +
lea ecx [ebp+var_34] +
mov esi [ebp+arg_0] +
mov [ebp+var_44] eax +
xor eax eax +
mov [ebp+var_29] al +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
call sub_432623  +
mov ecx [edi+58h] +
lea edx [ebp+var_40] +
push edx  +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx [edi+54h] +
cmp ecx [eax+4] +
jg loc_431E78  +
jl loc_431DD0  +
mov ecx [edi+50h] +
cmp ecx [eax] +
jnb loc_431E78  +
push ecx  +
lea ebx [edi+18h] +
push ebx  +
lea ecx [ebp+var_58] +
call sub_40896F  +
push esi  +
push offset aPerftrackingda  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_431E5D  +
lea eax [ebp+var_40] +
mov ecx edi +
push eax  +
call sub_432029  +
lea ecx [ebp+var_34] +
mov [ebp+var_48] eax +
cmp ecx eax +
jz loc_431E37  +
mov esi [ebp+var_34] +
mov eax ecx +
push dword ptr [esi+4]  +
push eax  +
call sub_4328D8  +
mov edx [ebp+var_48] +
mov [esi+4] esi +
mov [esi] esi +
mov [esi+8] esi +
and [ebp+var_30] 0 +
mov ecx [ebp+var_34] +
mov eax [edx] +
mov [ebp+var_34] eax +
mov eax [edx+4] +
mov [edx] ecx +
mov ecx [ebp+var_30] +
mov [ebp+var_30] eax +
mov [edx+4] ecx +
mov eax [ebp+var_40] +
push dword ptr [eax+4]  +
lea eax [ebp+var_40] +
push eax  +
mov ecx eax +
call sub_4328D8  +
push [ebp+var_40]  +
call ds:free  +
pop ecx  +
mov ecx edi +
mov [ebp+var_29] 1 +
call sub_431FBB  +
lea ecx [ebp+var_58] +
call sub_408946  +
cmp [ebp+var_29] 0 +
jz loc_431E7B  +
mov eax [edi] +
lea ecx [ebp+var_34] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
jmp loc_431E7B  +
lea ebx [edi+18h] +
push ecx  +
push ebx  +
lea ecx [ebp+var_64] +
call sub_40896F  +
mov edx [ebp+var_44] +
xor ebx ebx +
mov ecx edx +
mov [ebp+var_28] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] 7 +
lea esi [ecx+2] +
mov ax [ecx] +
add ecx 2 +
cmp ax bx +
jnz loc_431E9C  +
sub ecx esi +
sar ecx 1 +
push ecx  +
push edx  +
lea ecx [ebp+var_28] +
call sub_403A06  +
lea eax [ebp+var_28] +
add edi 10h +
push eax  +
lea eax [ebp+var_40] +
mov ecx edi +
push eax  +
call sub_432813  +
mov ecx edi +
mov eax [eax] +
inc dword ptr [eax+44h]  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
call sub_432813  +
mov esi [ebp+arg_C] +
mov eax [eax] +
cmp [eax+4Ch] esi +
jg loc_431EF5  +
mov edx [ebp+arg_8] +
jl loc_431EEF  +
cmp [eax+48h] edx +
jnb loc_431EF5  +
mov [eax+48h] edx +
mov [eax+4Ch] esi +
lea eax [ebp+var_28] +
mov ecx edi +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
call sub_432813  +
mov esi [ebp+arg_C] +
mov ecx ebx +
mov edi [ebp+arg_8] +
mov edx [eax] +
mov eax ebx +
cmp ds:dword_445C74[eax] esi +
jg loc_431F2D  +
jl loc_431F22  +
cmp ds:dword_445C70[eax] edi +
jnb loc_431F2D  +
add eax 8 +
inc ecx  +
cmp eax 38h +
jb loc_431F10  +
jmp loc_431F31  +
inc dword ptr [edx+ecx*4+28h]  +
mov eax [ebp+var_14] +
cmp eax 8 +
jb loc_431F67  +
mov ecx [ebp+var_28] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_431F5F  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_431F5F  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp+var_18] ebx +
lea ecx [ebp+var_64] +
mov [ebp+var_14] 7 +
mov word ptr [ebp+var_28] ax +
call sub_408946  +
mov eax [ebp+var_34] +
push dword ptr [eax+4]  +
lea eax [ebp+var_34] +
push eax  +
mov ecx eax +
call sub_4328D8  +
push [ebp+var_34]  +
call ds:free  +
pop ecx  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_43D1F2  +
leave   +
retn 10h  +
***
sub esp 0Ch +
call sub_43E8C1  +
mov edi ecx +
mov [ebp-34h] edi +
xor eax eax +
mov [ebp-4] eax +
mov [ebp-20h] eax +
mov ebx [ebp+8] +
mov ecx ebx +
mov [ebx] eax +
mov [ebx+4] eax +
call sub_432623  +
and dword ptr [ebp-4] 0 +
lea eax [edi+10h] +
mov [ebp-24h] eax +
mov eax [eax] +
mov dword ptr [ebp-20h] 1 +
mov eax [eax] +
mov [ebp-10h] eax +
jmp loc_432208  +
mov ecx [edi+58h] +
lea esi [eax+10h] +
mov eax [edi+8] +
lea edx [ebp-48h] +
mov [ebp-84h] eax +
push edx  +
mov eax [ecx] +
mov [ebp-14h] esi +
call dword ptr [eax]  +
push 0  +
push 989680h  +
mov ecx [eax] +
sub ecx [edi+48h] +
mov eax [eax+4] +
sbb eax [edi+4Ch] +
push eax  +
push ecx  +
call sub_43E9A8  +
mov ecx [ebp-24h] +
mov [ebp-80h] eax +
lea eax [ebp-50h] +
push esi  +
push eax  +
mov [ebp-2Ch] edx +
call sub_432813  +
mov ecx [ebp-24h] +
push esi  +
mov eax [eax] +
mov eax [eax+44h] +
mov [ebp-7Ch] eax +
lea eax [ebp-58h] +
push eax  +
call sub_432813  +
and dword ptr [ebp-18h] 0 +
lea edi [ebp-74h] +
push 7  +
add esi 18h +
mov eax [eax] +
pop ecx  +
mov eax [eax+48h] +
mov [ebp-78h] eax +
movs   +
mov ecx [ebx] +
mov edi ecx +
mov [ebp-2Ch] ecx +
mov eax [ecx+4] +
mov [ebp-1Ch] eax +
cmp byte ptr [eax+0Dh] 0 +
jnz loc_432126  +
mov ebx [ebp-14h] +
mov esi eax +
lea eax [esi+10h] +
mov [ebp-1Ch] esi +
push ebx  +
push eax  +
call sub_432C2B  +
test al al +
jz loc_432112  +
and dword ptr [ebp-18h] 0 +
mov esi [esi+8] +
jmp loc_43211D  +
mov edi esi +
mov dword ptr [ebp-18h] 1 +
mov esi [esi] +
cmp byte ptr [esi+0Dh] 0 +
jz loc_4320F8  +
mov ebx [ebp+8] +
cmp byte ptr [edi+0Dh] 0 +
jnz loc_43213C  +
lea eax [edi+10h] +
push eax  +
push dword ptr [ebp-14h]  +
call sub_432C2B  +
test al al +
jz loc_4321B6  +
cmp dword ptr [ebx+4] 30C30C3h +
jz loc_432222  +
mov [ebp-3Ch] ebx +
mov dword ptr [ebp-4] 1 +
and dword ptr [ebp-38h] 0 +
push 54h  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_43221C  +
mov [ebp-38h] edi +
push dword ptr [ebp-14h]  +
lea ecx [edi+10h] +
mov dword ptr [ebp-4] 2 +
call sub_4075C2  +
push 2Ch  +
lea eax [edi+28h] +
push 0  +
push eax  +
call j_memset  +
mov eax [ebp-2Ch] +
add esp 0Ch +
mov [edi] eax +
mov ecx ebx +
mov [edi+4] eax +
mov [edi+8] eax +
xor eax eax +
push edi  +
push dword ptr [ebp-18h]  +
mov [ebp-4] al +
push dword ptr [ebp-1Ch]  +
mov [edi+0Ch] ax +
mov [ebp-38h] eax +
call sub_408C14  +
mov edi eax +
mov eax [ebp-10h] +
lea esi [ebp-84h] +
push 0Bh  +
add edi 28h +
pop ecx  +
movs   +
mov ecx [eax+8] +
cmp byte ptr [ecx+0Dh] 0 +
jz loc_4321EC  +
mov ecx [eax+4] +
jmp loc_4321DF  +
cmp eax [ecx+8] +
jnz loc_4321E5  +
mov eax ecx +
mov ecx [ecx+4] +
cmp byte ptr [ecx+0Dh] 0 +
jz loc_4321D5  +
mov eax ecx +
mov [ebp-10h] eax +
jmp loc_432205  +
mov eax ecx +
mov edx [eax] +
cmp byte ptr [edx+0Dh] 0 +
jmp loc_432200  +
mov ecx [edx] +
mov eax edx +
mov edx ecx +
cmp byte ptr [ecx+0Dh] 0 +
mov [ebp-10h] eax +
jz loc_4321F6  +
mov edi [ebp-34h] +
cmp byte ptr [eax+0Dh] 0 +
jz loc_43206E  +
mov eax ebx +
call sub_43E8A1  +
retn 4  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
call sub_4091E3  +
int 3  +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_43FDE9  +
mov eax large fs:0 +
push eax  +
sub esp 20Ch +
mov eax dword_44D0B4 +
xor eax ebp +
mov [ebp-10h] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
mov eax [ebp+8] +
mov esi [eax] +
mov esi [esi] +
mov [ebp-1BCh] esi +
cmp byte ptr [esi+0Dh] 0 +
jnz loc_4325EE  +
push 4  +
xor edx edx +
pop eax  +
add esi 38h +
mov [ebp-1C8h] edx +
mov [ebp-1C4h] edx +
mov ebx offset off_445C54 +
mov [ebp-1C0h] edx +
mov dword ptr [ebp-1CCh] 7 +
mov [ebp-1D0h] eax +
lea ecx [ebp-1F8h] +
lea eax [ebp-1D0h] +
mov edx ebx +
push eax  +
push esi  +
call sub_43268C  +
mov edi [ebp-1F4h] +
test edi edi +
jz loc_4322BF  +
inc dword ptr [edi+4]  +
mov eax [ebp-1C4h] +
mov ecx [ebp-1F8h] +
mov [ebp-1F0h] ecx +
mov [ebp-1ECh] edi +
cmp eax [ebp-1C0h] +
jz loc_4322FB  +
xor edx edx +
mov [eax] ecx +
mov [eax+4] edi +
add dword ptr [ebp-1C4h] 8 +
mov [ebp-1F0h] edx +
mov [ebp-1ECh] edx +
jmp loc_43231D  +
lea ecx [ebp-1F0h] +
push ecx  +
push eax  +
lea ecx [ebp-1C8h] +
call sub_43273C  +
mov ecx [ebp-1ECh] +
test ecx ecx +
jz loc_43231D  +
call sub_40390F  +
test edi edi +
jz loc_432328  +
mov ecx edi +
call sub_40390F  +
push 4  +
pop eax  +
add esi eax +
add ebx eax +
sub dword ptr [ebp-1CCh] 1 +
jnz loc_432296  +
mov ecx [ebp-1C8h] +
xor eax eax +
mov esi [ebp-1BCh] +
xor edx edx +
mov [ebp-1CCh] eax +
xor ebx ebx +
mov [ebp-1DCh] eax +
mov eax [ebp-1C4h] +
sub eax ecx +
mov [ebp-1E4h] edx +
sar eax 3 +
mov [ebp-1E0h] ebx +
test eax eax +
jz loc_4323A0  +
push ecx  +
push eax  +
lea ecx [ebp-1E4h] +
call sub_432A55  +
mov eax [ebp-1DCh] +
mov ecx [ebp-1C8h] +
mov ebx [ebp-1E0h] +
mov edx [ebp-1E4h] +
mov [ebp-1CCh] eax +
mov eax [ebp-1C4h] +
mov edi edx +
cmp ecx eax +
jz loc_4323CA  +
push 4  +
mov edx eax +
pop esi  +
mov eax [ecx] +
add ecx 8 +
mov [edi] eax +
add edi esi +
cmp ecx edx +
jnz loc_4323B1  +
mov esi [ebp-1BCh] +
mov edx [ebp-1E4h] +
sub ebx edx +
mov dword ptr [ebp-204h] offset off_445A5C +
sar ebx 2 +
lea edi [esi+10h] +
push 4  +
lea ecx [ebp-74h] +
mov [ebp-200h] edx +
lea eax [edx+ebx*4] +
pop ebx  +
push ebx  +
push edi  +
push offset aEventsink  +
mov [ebp-1FCh] eax +
call sub_42EE70  +
push ebx  +
lea ecx [edi+24h] +
mov [ebp-1D0h] eax +
push ecx  +
push offset aHighesteventdu  +
lea ecx [ebp-0C4h] +
call sub_42F2C1  +
push ebx  +
lea ecx [edi+20h] +
mov [ebp-1BCh] eax +
push ecx  +
push offset aTotalevents  +
lea ecx [ebp-114h] +
call sub_42F2C1  +
push 4  +
mov ebx eax +
lea ecx [edi+1Ch] +
pop eax  +
push eax  +
push ecx  +
push offset aTimewindowactu  +
lea ecx [ebp-164h] +
call sub_42F2C1  +
push 4  +
mov edi eax +
lea ecx [esi+28h] +
pop eax  +
push eax  +
push ecx  +
push offset aTimewindowsett  +
lea ecx [ebp-1B4h] +
call sub_42F2C1  +
mov edx eax +
mov byte ptr [ebp-1E6h] 1 +
xor eax eax +
push 4  +
pop ecx  +
mov [ebp-1B5h] al +
mov [ebp-1D1h] al +
mov [ebp-1D3h] al +
mov [ebp-1D5h] al +
mov [ebp-1D7h] al +
lea eax [ebp-1D2h] +
push eax  +
lea eax [ebp-1E8h] +
mov [ebp-1E8h] cx +
push eax  +
lea eax [ebp-1D4h] +
push eax  +
lea eax [ebp-1D6h] +
push eax  +
lea eax [ebp-1D8h] +
push eax  +
lea ecx [ebp-218h] +
call sub_4306A3  +
lea eax [ebp-204h] +
mov dword ptr [ebp-210h] offset off_442E78 +
push eax  +
push dword ptr [ebp-1D0h]  +
lea eax [ebp-1B5h] +
mov dword ptr [ebp-20Ch] offset off_445DD4 +
push dword ptr [ebp-1BCh]  +
mov dword ptr [ebp-208h] offset aPerftrackingda +
push ebx  +
push edi  +
push edx  +
push eax  +
mov edx ecx +
lea ecx [ebp-210h] +
call sub_4326E7  +
lea ecx [ebp-2Ch] +
call sub_403985  +
mov ecx [ebp-1E4h] +
test ecx ecx +
jz loc_432548  +
mov edx [ebp-1CCh] +
sub edx ecx +
and edx 0FFFFFFFCh +
call sub_402740  +
xor edx edx +
mov [ebp-1E4h] edx +
mov [ebp-1E0h] edx +
mov [ebp-1DCh] edx +
jmp loc_43254A  +
xor edx edx +
mov edi [ebp-1C8h] +
test edi edi +
jz loc_43259D  +
mov ebx [ebp-1C4h] +
cmp edi ebx +
jz loc_432577  +
mov ecx [edi+4] +
test ecx ecx +
jz loc_43256A  +
call sub_40390F  +
add edi 8 +
cmp edi ebx +
jnz loc_43255E  +
mov edi [ebp-1C8h] +
mov edx [ebp-1C0h] +
mov ecx edi +
sub edx edi +
and edx 0FFFFFFF8h +
call sub_402740  +
xor edx edx +
mov [ebp-1C8h] edx +
mov [ebp-1C4h] edx +
mov [ebp-1C0h] edx +
mov eax [esi+8] +
cmp byte ptr [eax+0Dh] 0 +
jz loc_4325C5  +
mov eax [esi+4] +
jmp loc_4325B5  +
cmp esi [eax+8] +
jnz loc_4325BB  +
mov esi eax +
mov eax [eax+4] +
cmp byte ptr [eax+0Dh] 0 +
jz loc_4325AB  +
mov esi eax +
mov [ebp-1BCh] esi +
jmp loc_4325E1  +
mov esi eax +
mov ecx [esi] +
cmp byte ptr [ecx+0Dh] 0 +
jmp loc_4325D9  +
mov eax [ecx] +
mov esi ecx +
mov ecx eax +
cmp byte ptr [eax+0Dh] 0 +
mov [ebp-1BCh] esi +
jz loc_4325CF  +
cmp byte ptr [esi+0Dh] 0 +
push 4  +
pop eax  +
jz loc_432272  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_43D1F2  +
leave   +
retn 4  +
***
mov esi ecx +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
sub esp 0Ch +
sub esp 14h +
push ebx  +
mov eax [esi+4] +
add ecx 0Ch +
push esi  +
test [ebp+arg_0] 1 +
sub esp 44h +
push ecx  +
call sub_43E8C1  +
sub esp 0Ch +
mov ecx [esi+18h] +
push edi  +
mov edx [ebp+arg_4] +
mov ecx offset dword_44E4A8 +
push 0FFFFFFFFh  +
push offset loc_43EF0D  +
mov eax large fs:0 +
push eax  +
push esi  +
mov eax dword_44D0B4 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
push [ebp+arg_0]  +
mov ecx [esi+4] +
call sub_436538  +
mov ecx [ebp+arg_0] +
push 1  +
push offset unk_445D74  +
call sub_42C334  +
mov ecx [esi+8] +
lea edx [ecx+1] +
mov al [ecx] +
inc ecx  +
test al al +
jnz loc_432CC2  +
sub ecx edx +
push ecx  +
push dword ptr [esi+8]  +
mov ecx [ebp+arg_0] +
call sub_42C334  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
leave   +
retn 4  +
***
lea ecx [esi+0Ch] +
sub esp 1Ch +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
call sub_43E8C1  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi] 0 +
xor edi edi +
push 24h  +
mov [esi+4] edi +
mov [esi+8] edi +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_433115  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov [eax] eax +
mov [eax+4] eax +
mov [esi+4] eax +
lea ecx [esi+0Ch] +
mov [ebp-4] edi +
mov [ecx] edi +
mov [ecx+4] edi +
mov [ecx+8] edi +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi+18h] 7 +
mov dword ptr [esi+1Ch] 8 +
mov dword ptr [esi] 3F800000h +
push dword ptr [esi+4]  +
push 10h  +
call sub_423338  +
mov eax esi +
call sub_43E8A1  +
retn   +
***
mov ecx [esi] +
call sub_43E8C1  +
call sub_43E8C1  +
call sub_43E92A  +
mov eax offset loc_433309 +
push ecx  +
call sub_43E8C1  +
sub esp 34h +
mov eax [edx+4] +
push edi  +
and dword ptr [eax] 0 +
mov edi [edx] +
test edi edi +
jz loc_43354C  +
push esi  +
mov esi [edi] +
lea ecx [edi+8] +
call sub_419B4C  +
push edi  +
call ds:free  +
mov edi esi +
pop ecx  +
test esi esi +
jnz loc_433533  +
pop esi  +
pop edi  +
retn   +
***
mov ecx [esi+24h] +
push ecx  +
sub esp 18h +
mov eax [ecx+18h] +
push ecx  +
add ecx 10h +
test [ebp+arg_0] 1 +
cmp dword ptr [edx+14h] 10h +
cmp [ebp+arg_0] 0 +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov dword ptr [eax] offset off_445D4C +
pop ebp  +
retn 4  +
***
push edi  +
mov eax [ebp+arg_0] +
push esi  +
lea ecx [esi+0E0h] +
push 0FFFFFFFFh  +
sub esp 18h +
sub esp 24h +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push ebx  +
push edi  +
sub esp 0Ch +
push edi  +
push ebx  +
add ecx 4 +
add ecx 4 +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
test esi esi +
mov edi ecx +
call sub_4345CB  +
push edi  +
call sub_43E8C1  +
sub esp 10h +
push 0FFFFFFFFh  +
push esi  +
mov ecx [esi+24h] +
push ecx  +
mov edx [ebp+arg_4] +
push ecx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
call sub_43E8F4  +
push ebx  +
call sub_43E8F4  +
mov dword ptr [ecx] offset off_4461C0 +
push esi  +
lea ecx [esi+0D8h] +
mov eax [ecx+8] +
push ebx  +
push ebx  +
call sub_43E92A  +
lea ecx [esi+60h] +
push esi  +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_42FE47  +
test [ebp+arg_0] 1 +
jz loc_435252  +
push esi  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
push ecx  +
mov al byte_44E594 +
test esi esi +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
call sub_43E8C1  +
push ecx  +
push esi  +
mov ecx [esi+60h] +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
lea ecx [esi+34h] +
push esi  +
test esi esi +
call sub_43E92A  +
push ecx  +
and esp 0FFFFFFF8h +
mov eax dword_44E4AC +
mov eax [ebp+arg_0] +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
mov eax large fs:2Ch +
mov eax large fs:2Ch +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 0Ch +
mov eax [ebp+arg_4] +
mov eax [ecx] +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_43E8F4  +
call sub_43E8C1  +
mov edi ecx +
mov ebx [ebp+0Ch] +
mov edx ebx +
cmp dword ptr [ebx+14h] 10h +
jb loc_43747C  +
mov edx [ebx] +
push dword ptr [ebx+10h]  +
call sub_41BAC9  +
push eax  +
mov [ebp+0Ch] eax +
mov ecx edi +
push ebx  +
lea eax [ebp-18h] +
push eax  +
call sub_433770  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_4374A9  +
mov eax [ebp+8] +
mov [eax] ecx +
mov byte ptr [eax+4] 0 +
jmp loc_4375A6  +
cmp dword ptr [edi+8] 71C71C7h +
jnz loc_4374BD  +
push offset aUnordered_mapS  +
call ds:?_Xlength_error@std@@YAXPBD@Z  +
lea eax [edi+4] +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-1Ch] 0 +
push 24h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_4374E0  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
lea ecx [esi+8] +
mov [ebp-1Ch] esi +
push ebx  +
call sub_419C10  +
and dword ptr [esi+20h] 0 +
mov dword ptr [ebp-4] 1 +
mov eax [edi+8] +
inc eax  +
movd xmm0 eax +
cvtdq2pd xmm0 xmm0 +
shr eax 1Fh +
addsd xmm0 ds:qword_446B70[eax*8] +
mov eax [edi+1Ch] +
cvtpd2ps xmm1 xmm0 +
movd xmm0 eax +
cvtdq2pd xmm0 xmm0 +
shr eax 1Fh +
addsd xmm0 ds:qword_446B70[eax*8] +
cvtpd2ps xmm0 xmm0 +
divss xmm1 xmm0 +
comiss xmm1 dword ptr [edi] +
jbe loc_437555  +
mov ecx edi +
call sub_43358F  +
mov ebx [ebp+0Ch] +
lea eax [esi+8] +
push ebx  +
push eax  +
lea eax [ebp-20h] +
mov ecx edi +
push eax  +
call sub_433770  +
mov edx [eax] +
jmp loc_43755B  +
mov edx [ebp-18h] +
mov ebx [ebp+0Ch] +
mov eax [edi+8] +
mov ecx [edx+4] +
inc eax  +
mov [edi+8] eax +
mov [esi] edx +
mov [esi+4] ecx +
mov [ecx] esi +
mov [edx+4] esi +
mov eax [edi+18h] +
mov [ebp+0Ch] ecx +
and eax ebx +
mov ecx [edi+0Ch] +
mov ebx [ecx+eax*8] +
cmp ebx [edi+4] +
jnz loc_437587  +
mov [ecx+eax*8] esi +
jmp loc_437599  +
cmp ebx edx +
jnz loc_437590  +
mov [ecx+eax*8] esi +
jmp loc_43759D  +
mov edx [ebp+0Ch] +
cmp [ecx+eax*8+4] edx +
jnz loc_43759D  +
mov [ecx+eax*8+4] esi +
mov eax [ebp+8] +
mov [eax] esi +
mov byte ptr [eax+4] 1 +
call sub_43E8A1  +
retn 8  +
***
push esi  +
mov eax [ebp+arg_0] +
push ecx  +
push esi  +
mov eax [esi] +
push ebx  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
sub esp 14h +
mov eax [esi+4] +
call sub_43E8C1  +
mov eax [ebp+arg_8] +
sub esp 420h +
sub esp 418h +
sub esp 418h +
sub esp 41Ch +
sub esp 1Ch +
push ecx  +
push ecx  +
sub esp 114h +
push ebx  +
push ecx  +
push ecx  +
push ecx  +
sub esp 0Ch +
mov eax hMem[esi*4] +
mov eax dword_44F040[esi*4] +
mov esi ecx +
mov esi ecx +
mov esi ecx +
mov esi ecx +
mov esi ecx +
push ecx  +
sub esp 10h +
mov eax dword_44EE98[esi*4] +
push edi  +
mov eax dword_44EC54[esi*4] +
push edi  +
sub esp 0Ch +
test ecx 100000h +
sub esp 30h +
sub esp 5Ch +
push ecx  +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
call sub_438EE1  +
leave   +
retn   +
***
lea eax [ebp+arg_8] +
lea eax [ebp+arg_8] +
and esp 0FFFFFFF8h +
cmp [ebp+arg_4] 0 +
sub esp 1Ch +
push ecx  +
sub esp 10h +
push esi  +
call sub_42BFE8  +
xor esi esi +
test eax eax +
jz loc_439373  +
call sub_42C144  +
test al al +
jz loc_439373  +
mov eax large fs:2Ch +
mov ecx [eax] +
mov eax dword_44F1DC +
cmp eax [ecx+8] +
jg loc_4393A6  +
jmp loc_43936A  +
pop edi  +
mov eax dword_44F1E0 +
test eax eax +
jnz loc_4393A3  +
lea eax [ebp+SystemAffinityMask] +
push eax  +
lea eax [ebp+ProcessAffinityMask] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:GetProcessAffinityMask  +
test eax eax +
jnz loc_43938F  +
inc eax  +
jmp loc_4393A3  +
mov edx [ebp+ProcessAffinityMask] +
test edx edx +
jz loc_4393A1  +
mov ecx edx +
and ecx 1 +
add esi ecx +
shr edx 1 +
jnz loc_439396  +
mov eax esi +
pop esi  +
leave   +
retn   +
push edi  +
mov edi offset dword_44F1DC +
push edi  +
call sub_43D32B  +
cmp dword_44F1DC 0FFFFFFFFh +
pop ecx  +
jnz loc_439369  +
lea eax [ebp+var_8] +
mov [ebp+var_4] esi +
push eax  +
lea edx [ebp+var_4] +
mov [ebp+var_8] 4 +
mov ecx offset off_444AD0 +
call sub_424FF7  +
test eax eax +
jnz loc_4393E9  +
mov eax 200h +
cmp [ebp+var_4] eax +
cmovbe eax [ebp+var_4] +
jmp loc_4393EC  +
push 2  +
pop eax  +
push edi  +
mov dword_44F1E0 eax +
call sub_43D2E7  +
pop ecx  +
jmp loc_439369  +
***
push esi  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
mov dword ptr [esi] offset off_446844 +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_8] +
push 10h  +
push esi  +
push 0FFFFFFFFh  +
mov eax offset loc_43961F +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ecx  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov ecx offset off_44D88C +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_439CC8  +
mov eax 80004005h +
jmp loc_439CCD  +
call sub_43952D  +
pop ebp  +
retn 4  +
***
push esi  +
sub esp 0Ch +
lea eax [ebp+arg_C] +
mov ecx 8DE523h +
mov ecx 8DE540h +
mov ecx 8DE541h +
test [ebp+arg_0] 1 +
push ecx  +
mov esi ecx +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov esi ecx +
sub esp 0Ch +
push ebx  +
push ecx  +
sub esp 0Ch +
sub esp 0Ch +
push ecx  +
sub esp 0Ch +
sub esp 0Ch +
sub esp 0Ch +
sub esp 10h +
sub esp 10h +
sub esp 0Ch +
sub esp 0Ch +
push ecx  +
sub esp 0Ch +
test esi esi +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
xor edx edx +
push esi  +
mov esi ecx +
push edi  +
mov [esi+8] eax +
lea edi [esi+4] +
mov eax [ebp+arg_4] +
mov dword ptr [edi] offset off_4469F0 +
mov [esi+0Ch] edx +
mov dword ptr [esi] offset off_446974 +
mov [esi+10h] edx +
mov ecx [eax] +
mov [eax] edx +
mov [esi+14h] ecx +
mov ecx esi +
mov [esi+18h] edx +
mov [esi+1Ch] edx +
call sub_43CD16  +
cmp dword_44F108 0 +
jz loc_43AF4A  +
mov ecx 2357880h +
call sub_427550  +
mov eax dword_44D100 +
mov ecx 0FFF3DFE9h +
cmp dword_44F104 0 +
mov dword_44F108 edi +
cmovnz eax ecx +
mov dword_44D100 eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
mov edx [ecx+18h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
xor eax eax +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
sub esp 0Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
call sub_43E8C1  +
push ecx  +
push esi  +
sub esp 0Ch +
push edi  +
mov edi [ecx+4] +
jmp loc_43CB13  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_43CB10  +
or dword ptr [esi] 0FFFFFFFFh +
push eax  +
call ds:CloseHandle  +
add esi 4 +
cmp esi edi +
jnz loc_43CAFF  +
pop edi  +
pop esi  +
retn   +
***
pop ebp  +
cmp [ebp+arg_0] 0 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
pop ecx  +
cmp dword_44F104 0 +
push ebx  +
push esi  +
mov esi ecx +
setz bl  +
test esi esi +
setz al  +
cmp bl al +
jnz loc_43CD37  +
mov ecx 15D80E0h +
call sub_427550  +
test bl bl +
jnz loc_43CD3F  +
test esi esi +
jnz loc_43CD48  +
mov dword_44F104 esi +
pop esi  +
pop ebx  +
retn   +
push 0  +
push 15D80E1h  +
call sub_406D78  +
int 3  +
mov eax offset ImmDisableIME +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset IMM32_dll_import_table  +
call sub_43E5BA  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset RegisterClassExW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset USER32_dll_import_table  +
call sub_43E5BA  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CreateWindowExW +
jmp loc_43CD74  +
***
mov eax offset DestroyWindow +
jmp loc_43CD74  +
***
mov eax offset DefWindowProcW +
jmp loc_43CD74  +
***
mov eax offset GetClientRect +
jmp loc_43CD74  +
***
mov eax offset SetFocus +
jmp loc_43CD74  +
***
mov eax offset MoveWindow +
jmp loc_43CD74  +
***
mov eax offset GetFocus +
jmp loc_43CD74  +
***
mov eax offset GetMenu +
jmp loc_43CD74  +
***
mov eax offset GetWindow +
jmp loc_43CD74  +
***
mov eax offset AdjustWindowRectEx +
jmp loc_43CD74  +
***
mov eax offset GetWindowLongW +
jmp loc_43CD74  +
***
mov eax offset TranslateMessage +
jmp loc_43CD74  +
***
mov eax offset IsChild +
jmp loc_43CD74  +
***
mov eax offset PeekMessageW +
jmp loc_43CD74  +
***
mov eax offset DispatchMessageW +
jmp loc_43CD74  +
***
mov eax offset LoadStringW +
jmp loc_43CD74  +
***
mov eax offset MsgWaitForMultipleObjects +
jmp loc_43CD74  +
***
mov eax offset UnregisterClassW +
jmp loc_43CD74  +
***
mov eax offset MessageBoxW +
jmp loc_43CD74  +
***
mov eax offset SendNotifyMessageW +
jmp loc_43CD74  +
***
mov eax offset MsgWaitForMultipleObjectsEx +
jmp loc_43CD74  +
***
mov eax offset SetCoalescableTimer +
jmp loc_43CD74  +
***
mov eax offset KillTimer +
jmp loc_43CD74  +
***
mov eax offset PostMessageW +
jmp loc_43CD74  +
***
mov eax offset UnregisterPowerSettingNotification +
jmp loc_43CD74  +
***
mov eax offset UnhookWindowsHookEx +
jmp loc_43CD74  +
***
mov eax offset RegisterRawInputDevices +
jmp loc_43CD74  +
***
mov eax offset CallNextHookEx +
jmp loc_43CD74  +
***
mov eax offset SetWindowLongW +
jmp loc_43CD74  +
***
mov eax offset SetWindowsHookExW +
jmp loc_43CD74  +
***
mov eax offset RegisterPowerSettingNotification +
jmp loc_43CD74  +
***
mov eax offset GetSystemMetrics +
jmp loc_43CD74  +
***
mov eax offset IsWindow +
jmp loc_43CD74  +
***
mov eax offset SendMessageW +
jmp loc_43CD74  +
***
mov eax offset RegisterWindowMessageW +
jmp loc_43CD74  +
***
mov eax offset RegisterWindowMessageA +
jmp loc_43CD74  +
***
mov eax offset GetAsyncKeyState +
jmp loc_43CD74  +
***
call sub_43CF27  +
mov esi ecx +
xor edi edi +
push 18h  +
push edi  +
lea eax [esi+14h] +
push eax  +
call j_memset  +
add esp 0Ch +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov eax esi +
mov [esi+34h] edi +
pop edi  +
pop esi  +
retn   +
***
call j__set_app_type  +
call sub_43DE50  +
call sub_403937  +
push eax  +
call j__set_new_mode  +
pop ecx  +
retn   +
***
mov ecx [ebp-14h] +
mov esp [ebp-18h] +
call sub_43DE0D  +
test al al +
jz loc_43D1B0  +
cmp byte ptr [ebp-19h] 0 +
jnz loc_43D189  +
call j__c_exit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 7  +
call sub_43DCC2  +
push esi  +
call j_exit  +
***
push dword ptr [ebp-20h]  +
call j__exit  +
***
call sub_43DC0B  +
push esi  +
cmp ecx dword_44D0B4 +
test [ebp+arg_0] 1 +
call sub_43D249  +
push 0FA0h  +
push esi  +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
jnz loc_43D353  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_43D36F  +
push 64h  +
call sub_43D3B0  +
pop ecx  +
jmp loc_43D33F  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_43D349  +
mov eax large fs:2Ch +
mov ecx TlsIndex +
mov ecx [eax+ecx*4] +
mov eax dword_44D0A8 +
mov [ecx+8] eax +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
mov eax [ebp+arg_0] +
test eax eax +
cmp [ebp+arg_0] 0 +
cmp byte_44DCE1 0 +
call sub_43DF12  +
call sub_43E136  +
cmp byte_44DCE0 0 +
cmp dword_44DCE4 0FFFFFFFFh +
push [ebp+arg_0]  +
pop eax  +
push 0  +
sub esp 324h +
push 8  +
sub esp 31Ch +
call sub_43DF12  +
test al al +
call sub_43DF12  +
mov edi [ebp+10h] +
test al al +
call sub_43DF12  +
xor esi esi +
mov [ebp-4] esi +
mov edi [ebp+8] +
mov [ebp-24h] esi +
cmp esi [ebp+10h] +
jz loc_43DA2C  +
sub edi [ebp+0Ch] +
mov [ebp+8] edi +
mov ecx [ebp+14h] +
call ds:off_441540  +
mov ecx edi +
call dword ptr [ebp+14h]  +
inc esi  +
jmp loc_43D9E6  +
mov eax [ebp-14h] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_43DA45  +
mov dword ptr [ebp-28h] 0 +
mov eax [ebp-28h] +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push 0FFFFFFFFh  +
push 0  +
push ecx  +
push ecx  +
cmp [ebp+arg_4] 3 +
jz loc_43DAF8  +
cmp [ebp+arg_4] 0 +
jnz locret_43DB5A  +
mov ecx TlsIndex +
mov eax large fs:2Ch +
push ebx  +
push esi  +
mov ebx [eax+ecx*4] +
mov [ebp+var_8] ebx +
mov esi [ebx+10h] +
test esi esi +
jz loc_43DB58  +
push edi  +
mov edi [esi] +
sub edi 1 +
js loc_43DB40  +
lea ebx [edi+2] +
lea ebx [esi+ebx*4] +
mov eax [ebx] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_43DB35  +
mov ecx eax +
call ds:off_441540  +
call [ebp+var_4]  +
sub ebx 4 +
sub edi 1 +
jns loc_43DB21  +
mov ebx [ebp+var_8] +
mov edi [esi+4] +
test edi edi +
jz loc_43DB4E  +
push esi  +
call j_free  +
pop ecx  +
mov [ebx+10h] edi +
mov esi edi +
test edi edi +
jnz loc_43DB14  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
sub esp 14h +
mov ecx dword_44D0B4 +
retn   +
***
push 0  +
call sub_4028FE  +
xor eax eax +
sub esp 324h +
sub esp 44h +
push 44h  +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
call j_memset  +
add esp 0Ch +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_43DE03  +
movzx eax [ebp+StartupInfo.wShowWindow] +
leave   +
retn   +
push 0Ah  +
pop eax  +
leave   +
retn   +
***
test eax eax +
retn   +
***
push esi  +
and dword_44E028 0 +
mov esi offset unk_4480A0 +
mov esi offset unk_4480A8 +
mov eax [esp+8+arg_4] +
push [ebp+arg_0]  +
call sub_43CB31  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
and dword_44E030 0 +
sub esp 24h +
or dword_44D0B8 1 +
push 0Ah  +
call ds:IsProcessorFeaturePresent  +
test eax eax +
jz loc_43E132  +
and dword ptr [ebp-10h] 0 +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
lea edi [ebp-24h] +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
mov [edi] eax +
mov [edi+4] esi +
mov [edi+8] ecx +
xor ecx ecx +
mov [edi+0Ch] edx +
mov eax [ebp-24h] +
mov edi [ebp-1Ch] +
mov [ebp-0Ch] eax +
xor edi 6C65746Eh +
mov eax [ebp-18h] +
xor eax 49656E69h +
mov [ebp-8] eax +
mov eax [ebp-20h] +
xor eax 756E6547h +
mov [ebp-4] eax +
xor eax eax +
inc eax  +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov eax [ebp-4] +
mov [ebx+4] esi +
or eax edi +
or eax [ebp-8] +
mov [ebx+8] ecx +
mov [ebx+0Ch] edx +
jnz loc_43E033  +
mov eax [ebp-24h] +
and eax 0FFF3FF0h +
cmp eax 106C0h +
jz loc_43E022  +
cmp eax 20660h +
jz loc_43E022  +
cmp eax 20670h +
jz loc_43E022  +
cmp eax 30650h +
jz loc_43E022  +
cmp eax 30660h +
jz loc_43E022  +
cmp eax 30670h +
jnz loc_43E033  +
mov edi dword_44E034 +
or edi 1 +
mov dword_44E034 edi +
jmp loc_43E039  +
mov edi dword_44E034 +
mov ecx [ebp-1Ch] +
push 7  +
pop eax  +
mov [ebp-4] ecx +
cmp [ebp-0Ch] eax +
jl loc_43E076  +
xor ecx ecx +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov [ebx+4] esi +
mov [ebx+8] ecx +
mov ecx [ebp-4] +
mov [ebx+0Ch] edx +
mov ebx [ebp-20h] +
test ebx 200h +
jz loc_43E079  +
or edi 2 +
mov dword_44E034 edi +
jmp loc_43E079  +
mov ebx [ebp-10h] +
mov eax dword_44D0B8 +
or eax 2 +
mov dword_44E030 1 +
mov dword_44D0B8 eax +
test ecx 100000h +
jz loc_43E12F  +
or eax 4 +
mov dword_44E030 2 +
mov dword_44D0B8 eax +
test ecx 8000000h +
jz loc_43E12F  +
test ecx 10000000h +
jz loc_43E12F  +
xor ecx ecx +
xor eax eax +
cmp dword_44D0BC eax +
setnz al  +
retn   +
***
call sub_4028FE  +
mov edi [ecx+4] +
mov eax [edi] +
mov esi [eax+8] +
mov ecx esi +
call ds:off_441540  +
mov ecx edi +
call esi  +
mov edi eax +
test edi edi +
jz loc_43E1BF  +
mov ecx [edi] +
push 1  +
mov esi [ecx] +
mov ecx esi +
call ds:off_441540  +
mov ecx edi +
call esi  +
pop edi  +
pop esi  +
retn   +
***
push ecx  +
test ds:dword_441970 1000h +
mov eax dword_44E040 +
call sub_43E34E  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
call sub_43E34E  +
mov edi edi +
push ecx  +
mov ecx [ebp-0Ch] +
mov ecx [ebp-10h] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
mov eax [esp+8+arg_4] +
push ebx  +
push ebp  +
mov eax [esp+arg_4] +
sub ecx eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_8] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call sub_43D1C3  +
add esp 10h +
test byte ptr [esi+4] 66h +
jnz loc_43EBBE  +
cmp dword ptr [esi] 0E06D7363h +
jnz loc_43EBBE  +
cmp eax 1 +
jz loc_43EBC2  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
call j___current_exception  +
mov [eax] esi +
call j___current_exception_context  +
mov [eax] edi +
call j_terminate  +
int 3  +
***
cmp dword_44E030 6 +
jl loc_43EBE6  +
movd eax xmm0 +
shl eax 1 +
jb loc_43EC09  +
cmp eax 9E000000h +
jnb loc_43EBFA  +
cvttss2si eax xmm0 +
retn   +
***
cmp eax 9F000000h +
jnb loc_43EC10  +
shl eax 7 +
bts eax 1Fh +
retn   +
***
cmp eax 7F000000h +
jb loc_43EBF5  +
cvttss2si ecx ds:dword_446B80 +
cmc   +
sbb eax eax +
retn   +
***
cmp dword_44E030 6 +
jl loc_43EC36  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4481CC +
jmp loc_43E142  +
***
lea ecx [ebp-220h] +
lea ecx [ebp-21Ch] +
lea ecx [ebp-21Ch] +
jmp sub_4034FC  +
***
lea ecx [ebp-14h] +
jmp loc_4038FE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448284 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482D4 +
jmp loc_43E142  +
***
mov eax offset unk_448308 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0ECh] +
xor ecx eax +
call sub_43D1F2  +
nop   +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F4h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
lea ecx [ebp-2Ch] +
jmp sub_405740  +
***
lea ecx [ebp-5Ch] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-120h] +
lea ecx [ebp-118h] +
jmp loc_404988  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-124h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448398 +
jmp loc_43E142  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
add ecx 20h +
jmp ds:??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448450 +
jmp loc_43E142  +
***
mov ecx [ebp-10h] +
jmp sub_405806  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_43EF5F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_403985  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4484B0 +
jmp loc_43E142  +
***
lea ecx [ebp-30h] +
jmp sub_40568D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4484DC +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
lea ecx [ebp-38h] +
lea ecx [ebp-40h] +
jmp sub_403BA4  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-18h] +
jmp loc_4069DD  +
***
lea ecx [ebp-24h] +
jmp sub_40568D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4485D8 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448638 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-218h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
lea ecx [ebp-2Ch] +
jmp sub_403985  +
***
lea ecx [ebp-2Ch] +
jmp sub_403985  +
***
lea ecx [ebp-28h] +
jmp sub_403985  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_44875C +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov ecx [ebp-10h] +
jmp loc_4038FE  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
jmp loc_4099D9  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
jmp loc_4099D9  +
***
mov ecx [ebp-14h] +
jmp loc_43CB1A  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_44881C +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
mov ecx [ebp-14h] +
jmp loc_43CB1A  +
***
mov ecx [ebp-10h] +
jmp sub_40DDFD  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448944 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-434h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
lea ecx [ebp-14h] +
jmp loc_40F7DE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448970 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4489D0 +
jmp loc_43E142  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-1Ch] +
jmp loc_4038FE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448A7C +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4489D0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448AE4 +
jmp loc_43E142  +
***
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
lea ecx [ebp-6E4h] +
jmp loc_419132  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-6F0h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448B34 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-6Ch] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov ecx [ebp-10h] +
lea ecx [ebp-18h] +
jmp loc_4038FE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448B8C +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-240h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_41B90F  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
lea ecx [ebp+0Ch] +
jmp loc_4099D9  +
***
lea ecx [ebp-24h] +
jmp sub_41B077  +
***
lea ecx [ebp-14h] +
jmp loc_4099D9  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448C5C +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448C88 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448CC4 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448AE4 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4489D0 +
jmp loc_43E142  +
***
mov eax offset unk_448B60 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448B60 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448CF8 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448AE4 +
jmp loc_43E142  +
***
mov eax offset unk_448214 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448AE4 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448C88 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448AE4 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448AE4 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
lea ecx [ebp-1Ch] +
jmp loc_4230F9  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_41B90F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448D60 +
jmp loc_43E142  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
add ecx 8 +
jmp ds:??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_43F949  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_419B4C  +
retn   +
***
lea ecx [ebp-30h] +
jmp sub_4246CC  +
***
lea ecx [ebp-24h] +
jmp sub_4246CC  +
***
lea ecx [ebp-1Ch] +
jmp sub_408946  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-1Ch] +
jmp loc_4038FE  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_4038FE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448F14 +
jmp loc_43E142  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-10h] +
jmp loc_425A20  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_41B90F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448F84 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-924h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448AE4 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448FB8 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-70h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
lea ecx [ebp-48h] +
jmp sub_42B3F4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_44904C +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4490AC +
jmp loc_43E142  +
***
lea ecx [ebp-20h] +
jmp loc_40F7DE  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-1Ch] +
jmp loc_40F7DE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449140 +
jmp loc_43E142  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
add ecx 20h +
jmp ds:??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449200 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov eax [ebp-20h] +
lea ecx [ebp-3Ch] +
lea ecx [ebp-3Ch] +
jmp loc_4038FE  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449234 +
jmp loc_43E142  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
jmp loc_4038FE  +
***
mov eax offset unk_449270 +
jmp loc_43E142  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_41B90F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4492A4 +
jmp loc_43E142  +
***
lea ecx [ebp-30h] +
jmp sub_432CEC  +
***
lea ecx [ebp-1Ch] +
lea ecx [ebp-1Ch] +
jmp loc_43354E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449338 +
jmp loc_43E142  +
***
mov ecx [ebp-10h] +
jmp loc_41A02B  +
***
lea ecx [ebp-0A0h] +
jmp sub_42C472  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-8Ch] +
jmp sub_42FC6A  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4493CC +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449400 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448C88 +
jmp loc_43E142  +
***
lea ecx [ebp-90h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
lea ecx [ebp-58h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
and eax 8 +
jz locret_44009B  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-3Ch] +
jmp loc_419C05  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449458 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-15Ch] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
lea ecx [ebp-30h] +
jmp sub_4246CC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4494AC +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E8h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4482B0 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
lea ecx [ebp-38h] +
jmp sub_433571  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_43354E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449538 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_44956C +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-90h] +
xor ecx eax +
call sub_43D1F2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_448214 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_4495D4 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449618 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449654 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449618 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449618 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449618 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449618 +
jmp loc_43E142  +
***
mov ecx [edx-4] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449618 +
jmp loc_43E142  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449618 +
jmp loc_43E142  +
***
lea ecx [ebp-10h] +
jmp loc_4089ED  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43D1F2  +
mov eax offset unk_449698 +
jmp loc_43E142  +
***
mov ecx offset dword_44F10C +
mov ecx offset dword_44E0A4 +
mov ecx offset unk_44E0A0 +
mov ecx offset unk_44E09C +
mov ecx offset dword_44D488 +
mov ecx offset dword_44F144 +
mov ecx offset off_44D4A0 +
mov ecx offset off_44D490 +
mov ecx offset off_44D4B0 +
mov ecx offset off_44D4C0 +
mov ecx dword_44D500 +
pop ecx  +
mov ecx offset dword_44D550 +
mov ecx offset dword_44D570 +
mov ecx dword_44E0E0 +
mov ecx dword_44E0E4 +
mov ecx offset dword_44E0E8 +
pop ecx  +
mov ecx offset unk_44E138 +
mov ecx offset off_44D5F0 +
pop ecx  +
mov ecx offset dword_44E174 +
mov ecx dword_44E178 +
test ecx ecx +
jz locret_440510  +
and dword_44E178 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
mov ecx dword_44E17C +
mov ecx dword_44E180 +
mov ecx offset off_44D62C +
mov ecx offset off_44D63C +
mov ecx offset off_44D64C +
mov off_44D148 offset off_44D14C +
mov ecx offset dword_44D678 +
push 18h  +
pop ecx  +
pop ecx  +
pop ecx  +
mov eax hObject +
pop ecx  +
mov ecx offset dword_44E490 +
pop ecx  +
retn   +
***
mov ecx offset unk_44F19C +
jmp sub_4143E6  +
***
push offset unk_44F1AC  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
retn   +
***
mov ecx offset unk_44E700 +
jmp sub_42C3CE  +
***
mov ecx offset unk_44E184 +
mov ecx offset unk_44E740 +
mov ecx offset off_44D88C +
jmp loc_439CD1  +
***
mov ecx offset dword_44D8CC +
jmp loc_403B1B  +
***
mov ecx offset unk_44DC78 +
jmp loc_43CF4A  +
***
mov ecx offset unk_44E03C +
jmp loc_43E1C2  +
***
