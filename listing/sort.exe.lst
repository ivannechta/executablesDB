mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2010h +
call __alloca_probe  +
mov eax dword_1005014 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ds:GetProcessHeap +
push edi  +
mov edi ds:HeapAlloc +
test ebx ebx +
jz loc_100139F  +
mov eax ebx +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10012FD  +
sub eax ecx +
mov [ebp+var_2008] eax +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call esi  +
push eax  +
call edi  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_100139F  +
mov ecx [ebp+var_2008] +
push ecx  +
push ebx  +
lea edx [ebp+var_2008] +
push edx  +
add ecx ecx +
push ecx  +
push eax  +
call ds:RtlMultiByteToUnicodeN  +
test eax eax +
jl loc_100138E  +
push [ebp+var_2008]  +
lea eax [ebp+var_2008] +
push [ebp+lpMem]  +
push eax  +
push 1FFFh  +
lea eax [ebp+var_2004] +
push eax  +
call ds:RtlUnicodeToOemN  +
test eax eax +
jl loc_100138E  +
mov eax [ebp+var_2008] +
mov [ebp+eax+var_2004] 0 +
lea eax [ebp+var_2004] +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call ds:fprintf  +
pop ecx  +
pop ecx  +
push [ebp+lpMem]  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_10013AC  +
call ds:GetLastError  +
xor ecx ecx +
push ecx  +
push ecx  +
lea edx [ebp+Buffer] +
push edx  +
push ecx  +
push eax  +
push ecx  +
call ds:GetModuleHandleA  +
push eax  +
push 1300h  +
call ds:FormatMessageA  +
mov [ebp+var_2008] eax +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call esi  +
push eax  +
call edi  +
mov esi eax +
test esi esi +
jz loc_1001450  +
mov eax [ebp+var_2008] +
push eax  +
push dword ptr [ebp+Buffer]  +
lea ecx [ebp+var_2008] +
push ecx  +
add eax eax +
push eax  +
push esi  +
call ds:RtlMultiByteToUnicodeN  +
test eax eax +
jl loc_1001450  +
push [ebp+var_2008]  +
lea eax [ebp+var_2008] +
push esi  +
push eax  +
push 1FFFh  +
lea eax [ebp+var_2004] +
push eax  +
call ds:RtlUnicodeToOemN  +
test eax eax +
jl loc_1001450  +
mov eax [ebp+var_2008] +
mov [ebp+eax+var_2004] 0 +
lea eax [ebp+var_2004] +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call ds:fprintf  +
pop ecx  +
pop ecx  +
push 1  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push 2000h  +
mov esi offset Buffer +
push esi  +
push ebx  +
push [ebp+dwMessageId]  +
push ebx  +
push 0A00h  +
call ds:FormatMessageA  +
mov edi ds:GetProcessHeap +
mov [ebp+dwMessageId] eax +
lea eax [eax+eax+2] +
push eax  +
push ebx  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_10014EB  +
mov ecx [ebp+dwMessageId] +
push ecx  +
push esi  +
lea edx [ebp+dwMessageId] +
push edx  +
add ecx ecx +
push ecx  +
push eax  +
call ds:RtlMultiByteToUnicodeN  +
test eax eax +
jl loc_10014DE  +
push [ebp+dwMessageId]  +
lea eax [ebp+dwMessageId] +
push [ebp+lpMem]  +
push eax  +
push 1FFFh  +
push esi  +
call ds:RtlUnicodeToOemN  +
test eax eax +
jl loc_10014DE  +
mov eax [ebp+dwMessageId] +
mov Buffer[eax] bl +
push [ebp+lpMem]  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push 1CE8h  +
call sub_100145E  +
mov esi ds:fprintf +
push eax  +
mov eax ds:_iob +
add eax 20h +
push offset aS  +
push eax  +
call esi  +
add esp 0Ch +
push 1CF7h  +
call sub_100145E  +
push eax  +
mov eax ds:_iob +
add eax 20h +
push offset aS_0  +
push eax  +
call esi  +
add esp 0Ch +
push 0  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
call sub_100145E  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push offset aS_0  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
call sub_100145E  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push offset aS_0  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
push 1  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2 +
jl loc_10017D5  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea esi [edi+4] +
add edi 8 +
mov edx [esi] +
cmp byte ptr [edx] 2Fh +
jnz loc_10017B0  +
lea ecx [edx+1] +
mov eax ecx +
lea ebx [eax+1] +
mov [ebp+arg_4] ebx +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_10015DE  +
sub eax [ebp+arg_4] +
mov ebx eax +
mov al [ecx] +
test al al +
jz loc_1001623  +
cmp al 3Fh +
jz loc_10017D9  +
test al al +
jz loc_1001623  +
cmp al 2Bh +
jnz loc_1001623  +
add edx 2 +
push edx  +
call ds:atoi  +
pop ecx  +
mov dword_1007410 eax +
test eax eax +
jle loc_10017DE  +
dec eax  +
mov dword_1007410 eax +
jmp loc_10017BF  +
push ebx  +
push offset aCase_sensitive  +
push ecx  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1001646  +
mov dword_10074FC 1 +
jmp loc_10017BF  +
mov eax [esi] +
push ebx  +
inc eax  +
push offset aLocale  +
push eax  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1001673  +
cmp [ebp+arg_0] 3 +
jl loc_10017E8  +
mov eax [edi] +
mov dword_10074EC eax +
jmp loc_1001782  +
mov eax [esi] +
push ebx  +
inc eax  +
push offset aMemory  +
push eax  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10016A7  +
cmp [ebp+arg_0] 3 +
jl loc_10017E8  +
push dword ptr [edi]  +
call ds:atoi  +
pop ecx  +
mov dword_10073E8 eax +
jmp loc_1001782  +
mov eax [esi] +
push ebx  +
inc eax  +
push offset aOutput  +
push eax  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10016E0  +
cmp dword_10074F8 eax +
jnz loc_10017E8  +
cmp [ebp+arg_0] 3 +
jl loc_10017E8  +
mov eax [edi] +
mov dword_10074F8 eax +
jmp loc_1001782  +
mov eax [esi] +
push ebx  +
inc eax  +
push offset aReverse  +
push eax  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1001706  +
mov dword_100742C 1 +
jmp loc_10017BF  +
mov eax [esi] +
push ebx  +
inc eax  +
push offset aRecord_maximum  +
push eax  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1001756  +
cmp [ebp+arg_0] 3 +
jl loc_10017E8  +
push dword ptr [edi]  +
call ds:atoi  +
pop ecx  +
mov ecx 80h +
cmp eax ecx +
mov cchWideChar eax +
jge loc_1001745  +
mov eax ecx +
mov cchWideChar eax +
cmp eax 10000h +
jl loc_1001782  +
push 1CEDh  +
jmp loc_10017E3  +
mov eax [esi] +
push ebx  +
inc eax  +
push offset aTemporary  +
push eax  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100178D  +
cmp dword_10074AC eax +
jnz loc_10017E8  +
cmp [ebp+arg_0] 3 +
jl loc_10017E8  +
mov eax [edi] +
mov dword_10074AC eax +
add edi 4 +
add esi 4 +
dec [ebp+arg_0]  +
jmp loc_10017BF  +
mov eax [esi] +
push ebx  +
inc eax  +
push offset aUni_output  +
push eax  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10017E8  +
mov dword_10074A8 1 +
jmp loc_10017BF  +
cmp lpFileName 0 +
jnz loc_10017EF  +
mov lpFileName edx +
dec [ebp+arg_0]  +
add edi 4 +
add esi 4 +
cmp [ebp+arg_0] 2 +
jge loc_10015C8  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
call sub_10014F9  +
push 1CEBh  +
call sub_100157A  +
push 1CECh  +
jmp loc_10017E3  +
push 1CEEh  +
jmp loc_10017E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpFileName +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ds:GetStdHandle +
cmp eax ebx +
jz loc_1001844  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 1  +
push 80000000h  +
push eax  +
call ds:CreateFileA  +
mov hFile eax +
cmp eax 0FFFFFFFFh +
jnz loc_100184D  +
push ebx  +
push lpFileName  +
call sub_10012C5  +
push 0FFFFFFF6h  +
call edi  +
mov hFile eax +
mov esi ds:GetFileType +
push eax  +
call esi  +
mov dword_10074D8 eax +
cmp eax 1 +
jnz loc_1001899  +
lea eax [ebp+FileSizeHigh] +
push eax  +
push hFile  +
call ds:GetFileSize  +
push 1  +
push ebx  +
push ebx  +
push [ebp+FileSizeHigh]  +
mov [ebp+var_8] eax +
call __allmul  +
xor ecx ecx +
add eax [ebp+var_8] +
mov nNumberOfBytesToRead ebx +
adc edx ecx +
mov dword ptr dbl_1005008 eax +
mov dword ptr dbl_1005008+4 edx +
jmp loc_10018B1  +
or dword ptr dbl_1005008 0FFFFFFFFh +
or dword ptr dbl_1005008+4 0FFFFFFFFh +
mov nNumberOfBytesToRead 1000h +
cmp dword_10074F8 ebx +
jnz loc_10018E3  +
push 0FFFFFFF5h  +
call edi  +
push eax  +
mov hConsoleHandle eax +
call esi  +
mov dword_10074F0 eax +
cmp eax 2 +
jnz loc_10018ED  +
lea eax [ebp+Mode] +
push eax  +
push hConsoleHandle  +
call ds:GetConsoleMode  +
test eax eax +
jnz loc_10018ED  +
mov dword_10074F0 1 +
mov edi ds:CreateEventA +
xor esi esi +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call edi  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov dword_1007958[esi] eax +
call edi  +
mov dword_10073B8[esi] eax +
add esi 1Ch +
cmp esi 38h +
jl loc_10018F5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov ecx [eax] +
mov eax dword_1007410 +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
mov ecx [ecx] +
add ecx eax +
push ecx  +
call ds:_stricoll  +
cmp dword_100742C 0 +
pop ecx  +
pop ecx  +
jz loc_100194E  +
neg eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov ecx [eax] +
mov eax dword_1007410 +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
mov ecx [ecx] +
add ecx eax +
push ecx  +
call ds:strcoll  +
cmp dword_100742C 0 +
pop ecx  +
pop ecx  +
jz loc_1001982  +
neg eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1007410 +
mov ecx [ebp+0Ch] +
mov ecx [ecx] +
add eax eax +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
mov ecx [ecx] +
add ecx eax +
push ecx  +
call ds:_wcsicoll  +
cmp dword_100742C 0 +
pop ecx  +
pop ecx  +
jz loc_10019B8  +
neg eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1007410 +
mov ecx [ebp+0Ch] +
mov ecx [ecx] +
add eax eax +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
mov ecx [ecx] +
add ecx eax +
push ecx  +
call ds:wcscoll  +
cmp dword_100742C 0 +
pop ecx  +
pop ecx  +
jz loc_10019EE  +
neg eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push offset dword_1007460  +
mov dword_1007460 40h +
call ds:GlobalMemoryStatusEx  +
push offset SystemInfo  +
call ds:GetSystemInfo  +
mov ecx dword_10073E8 +
xor ebx ebx +
inc ebx  +
test ecx ecx +
jnz loc_1001AA9  +
cmp dword_1007474 0 +
mov ecx 3FFFFFFFh +
ja loc_1001A45  +
mov eax dword_1007470 +
jb loc_1001A47  +
cmp eax ecx +
jb loc_1001A47  +
mov eax ecx +
cmp dword_10074D8 ebx +
jnz loc_1001A6F  +
cmp dword_10074F0 ebx +
jnz loc_1001A6F  +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
test eax eax +
jge loc_1001A67  +
fadd  ds:dbl_10011F8 +
fmul  ds:dbl_10011F0 +
jmp loc_1001A85  +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
test eax eax +
jge loc_1001A7F  +
fadd  ds:dbl_10011F8 +
fmul  ds:dbl_10011E8 +
call _ftol2  +
mov esi SystemInfo.dwPageSize +
or edi 0FFFFFFFFh +
cmp eax edi +
jbe loc_1001AA0  +
lea eax [esi+esi] +
mov ecx eax +
mov eax edi +
sub eax ecx +
lea eax [esi+eax-1] +
jmp loc_1001B38  +
cmp ecx 0A0h +
jnb loc_1001ACB  +
push 1CF3h  +
call sub_100154C  +
mov esi SystemInfo.dwPageSize +
mov eax 28000h +
jmp loc_1001B4F  +
mov eax dword_1007484 +
or edi 0FFFFFFFFh +
test eax eax +
ja loc_1001AE3  +
mov edx dword_1007480 +
jb loc_1001AE7  +
cmp edx edi +
jb loc_1001AE7  +
mov edx edi +
xor eax eax +
shrd edx eax +
shr eax 0Ah +
xor esi esi +
cmp esi eax +
jb loc_1001B23  +
ja loc_1001AFA  +
cmp ecx edx +
jbe loc_1001B23  +
push 1CF4h  +
call sub_100154C  +
cmp dword_1007484 esi +
ja loc_1001B1F  +
mov eax dword_1007480 +
jb loc_1001B17  +
cmp eax edi +
jnb loc_1001B1F  +
mov esi SystemInfo.dwPageSize +
jmp loc_1001B3F  +
mov eax edi +
jmp loc_1001B17  +
mov eax ecx +
cmp ecx edi +
jb loc_1001B2B  +
mov eax edi +
mov esi SystemInfo.dwPageSize +
shl eax 0Ah +
lea eax [eax+esi-1] +
xor edx edx +
div  esi +
imul eax esi +
mov ecx 28000h +
mov dwSize eax +
cmp eax ecx +
jnb loc_1001B54  +
mov eax ecx +
mov dwSize eax +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
test eax eax +
jge loc_1001B64  +
fadd  ds:dbl_10011F8 +
fmul  ds:dbl_10011E0 +
call _ftol2_sse  +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
xor edx edx +
div  esi +
imul eax esi +
cmp eax esi +
jg loc_1001B85  +
mov eax esi +
mov ecx 40000h +
cmp eax ecx +
jl loc_1001B90  +
mov eax ecx +
mov dword_10073E0 eax +
mov dword_10074B0 eax +
mov dword_10073DC eax +
cmp dword_10074D8 ebx +
jnz loc_1001BAC  +
mov nNumberOfBytesToRead eax +
push offset CPInfo  +
push ebx  +
call ds:GetCPInfo  +
mov eax CPInfo.MaxCharSize +
cmp eax 2 +
jnb loc_1001BC5  +
push 2  +
pop eax  +
mov esi cchWideChar +
mov ecx SystemInfo.dwPageSize +
imul eax esi +
lea eax [eax+ecx-1] +
xor edx edx +
div  ecx +
mov edi eax +
imul edi ecx +
mov eax 1000h +
cmp esi eax +
mov [ebp+var_4] edi +
jg loc_1001BEF  +
mov esi eax +
xor edx edx +
lea eax [ecx+esi*4+0F9Fh] +
div  ecx +
mov edx dword_10074B0 +
imul eax ecx +
mov ecx dword_10073E0 +
cmp ecx edx +
mov [ebp+var_8] eax +
jg loc_1001C12  +
mov ecx edx +
mov edx dword_10073DC +
add ecx edx +
lea esi [eax+ecx*2] +
add esi edi +
cmp esi dwSize +
jbe loc_1001C47  +
mov eax dword_10073E8 +
test eax eax +
jz loc_1001C41  +
cmp eax 0A0h +
jb loc_1001C41  +
push 1CF3h  +
call sub_100154C  +
mov dwSize esi +
mov edi ds:VirtualAlloc +
push 4  +
push 2000h  +
push dwSize  +
push 0  +
call edi  +
mov lpAddress eax +
test eax eax +
jnz loc_1001C71  +
push 1CF0h  +
call sub_100157A  +
mov ecx dword_10073E0 +
xor edx edx +
mov ebx offset dword_1007438 +
lea esi [eax+edx] +
mov [ebx] esi +
mov esi dword_10074B0 +
cmp ecx esi +
jle loc_1001C8F  +
mov esi ecx +
add ebx 4 +
add edx esi +
cmp ebx offset dword_1007440 +
jl loc_1001C7E  +
lea esi [eax+edx] +
add edx [ebp+var_4] +
mov dword_10073EC esi +
mov esi offset lpBuffer +
lea ebx [eax+edx] +
add edx dword_10073DC +
mov [esi] ebx +
add esi 4 +
cmp esi offset dword_1007400 +
jl loc_1001CAD  +
mov esi lpBuffer +
mov dword_10073E4 ecx +
lea ecx [eax+edx] +
add edx [ebp+var_8] +
push 4  +
push 1000h  +
mov dword_10073D8 ecx +
mov dword_10078F0 ecx +
lea ecx [eax+edx] +
push edx  +
push eax  +
mov dword_1007418 esi +
mov lpWideCharStr ecx +
mov dword_1007404 ecx +
mov dword_1007430 ecx +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp dword_10078EC edi +
jz loc_1001E7E  +
mov ecx dword_1005004 +
mov esi dword_100740C +
mov eax dword_10073F0 +
lea edx [ecx+esi] +
cmp eax edx +
mov ebx offset unk_1007940 +
jge loc_1001E10  +
mov edi dword_10074E4 +
cmp edi dword ptr dbl_1005008+4 +
jg loc_1001E10  +
jl loc_1001D6F  +
mov edx dword_10074E0 +
cmp edx dword ptr dbl_1005008 +
jnb loc_1001E10  +
cdq   +
idiv  ecx +
mov eax dword_10074E0 +
mov esi edx +
imul esi esi +
add esi ebx +
push dword ptr [esi+18h]  +
mov [esi+10h] eax +
mov eax edi +
sar eax 1Fh +
mov eax nNumberOfBytesToRead +
mov [esi+14h] edi +
mov [esi] eax +
call ds:ResetEvent  +
lea eax [esi+8] +
push eax  +
lea eax [esi+4] +
push eax  +
mov eax dword_10073F0 +
cdq   +
idiv  dword_1005004 +
push dword ptr [esi]  +
push lpBuffer[edx*4]  +
push hFile  +
call ds:ReadFile  +
test eax eax +
jnz loc_1001DD7  +
call ds:GetLastError  +
cmp eax 3E5h +
jnz loc_1001E65  +
mov eax [esi] +
mov edi dword_10074E4 +
mov ecx dword_1005004 +
mov esi dword_100740C +
cdq   +
add dword_10074E0 eax +
mov eax dword_10073F0 +
adc edi edx +
inc eax  +
lea edx [ecx+esi] +
cmp eax edx +
mov dword_10074E4 edi +
mov dword_10073F0 eax +
jl loc_1001D4F  +
cmp esi eax +
jge loc_1001E72  +
mov eax esi +
cdq   +
idiv  ecx +
imul edx edx +
add edx ebx +
lea edi [edx+4] +
cmp dword ptr [edi] 0 +
jnz loc_1001E49  +
push 1  +
push edi  +
add edx 8 +
push edx  +
push hFile  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_1001E65  +
mov esi dword_100740C +
mov ecx dword_1005004 +
mov eax esi +
cdq   +
idiv  ecx +
mov edi [edi] +
inc esi  +
mov dword_100740C esi +
mov eax lpBuffer[edx*4] +
mov dword_1007400 eax +
jmp loc_1001ED8  +
push 0  +
push lpFileName  +
call sub_10012C5  +
mov dword_10078F8 1 +
jmp loc_1001EF7  +
mov eax lpBuffer +
push edi  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push nNumberOfBytesToRead  +
mov dword_1007400 eax +
push eax  +
push hFile  +
call ds:ReadFile  +
test eax eax +
jnz loc_1001EC6  +
call ds:GetLastError  +
cmp eax 6Dh +
jz loc_1001EC9  +
mov eax lpFileName +
cmp eax edi +
jnz loc_1001EC2  +
push 1CF5h  +
call sub_100145E  +
push edi  +
push eax  +
jmp loc_1001E6D  +
mov edi [ebp+NumberOfBytesRead] +
mov eax edi +
cdq   +
add dword_10074E0 eax +
adc dword_10074E4 edx +
mov eax dword_1007400 +
add eax edi +
mov dword_1007450 eax +
test edi edi +
jz loc_1001E72  +
mov eax edi +
cdq   +
add cb eax +
adc dword_1007394 edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp dword_10078F4 ebx +
jnz loc_1001F5F  +
mov esi dword_1007924 +
and esi 80000001h +
jns loc_1001F23  +
dec esi  +
or esi 0FFFFFFFEh +
inc esi  +
imul esi esi +
add esi offset unk_10073A0 +
lea edi [esi+4] +
cmp [edi] ebx +
jnz loc_1001FBE  +
push 1  +
push edi  +
lea eax [esi+8] +
push eax  +
push dword_100739C  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_1001F54  +
mov eax [edi] +
cmp eax [esi] +
jz loc_1001FBE  +
push ebx  +
push offset TempFileName  +
call sub_10012C5  +
cmp dword_1007930 ebx +
jz loc_1001FBE  +
mov esi dword_1007924 +
and esi 80000001h +
jns loc_1001F7A  +
dec esi  +
or esi 0FFFFFFFEh +
inc esi  +
imul esi esi +
add esi offset unk_10073A0 +
lea edi [esi+4] +
cmp [edi] ebx +
jnz loc_1001FBE  +
push 1  +
push edi  +
lea eax [esi+8] +
push eax  +
push hConsoleHandle  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_1001FA7  +
mov eax [edi] +
cmp eax [esi] +
jz loc_1001FBE  +
mov eax dword_10074F8 +
cmp eax ebx +
jnz loc_1001FBA  +
push 1CF6h  +
call sub_100145E  +
push ebx  +
push eax  +
jmp loc_1001F5A  +
inc dword_1007924  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx dword_1007428 +
push esi  +
mov esi ecx +
and esi 80000001h +
push edi  +
jns loc_1001FEA  +
dec esi  +
or esi 0FFFFFFFEh +
inc esi  +
mov eax dword_1007420 +
imul esi esi +
add esi offset unk_10073A0 +
mov [esi+10h] eax +
mov eax dword_1007424 +
mov edx eax +
mov [esi+14h] eax +
mov eax dword_10074B8 +
xor edi edi +
sar edx 1Fh +
mov [esi] eax +
cmp dword_10078F4 edi +
jnz loc_1002074  +
push dword ptr [esi+18h]  +
call ds:ResetEvent  +
lea eax [esi+8] +
push eax  +
lea eax [esi+4] +
push eax  +
mov eax dword_1007428 +
and eax 80000001h +
push dword ptr [esi]  +
jns loc_100203D  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
push dword_1007438[eax*4]  +
push dword_100739C  +
call ds:WriteFile  +
test eax eax +
jnz loc_1002154  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_1002154  +
push edi  +
push offset TempFileName  +
call sub_10012C5  +
cmp dword_1007930 edi +
jz loc_1002120  +
cdq   +
idiv  dword_10074A4 +
test edx edx +
jz loc_10020C3  +
push hConsoleHandle  +
call ds:CloseHandle  +
push edi  +
mov eax 40000000h +
push eax  +
push 4  +
push edi  +
push 1  +
push eax  +
push dword_10074F8  +
call ds:CreateFileA  +
mov hConsoleHandle eax +
cmp eax 0FFFFFFFFh +
jnz loc_10020C3  +
push edi  +
push dword_10074F8  +
jmp loc_100206F  +
push dword ptr [esi+18h]  +
call ds:ResetEvent  +
lea eax [esi+8] +
push eax  +
lea eax [esi+4] +
push eax  +
mov eax dword_1007428 +
cdq   +
idiv  dword_1005010 +
push dword ptr [esi]  +
push dword_1007438[edx*4]  +
push hConsoleHandle  +
call ds:WriteFile  +
test eax eax +
jnz loc_1002154  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_1002154  +
mov eax dword_10074F8 +
cmp eax edi +
jnz loc_1002119  +
push 1CF6h  +
call sub_100145E  +
push edi  +
push eax  +
jmp loc_100206F  +
push edi  +
lea edx [ebp+NumberOfBytesWritten] +
push edx  +
push eax  +
mov eax ecx +
cdq   +
idiv  dword_1005010 +
push dword_1007438[edx*4]  +
push hConsoleHandle  +
call ds:WriteFile  +
test eax eax +
jz loc_1002106  +
mov eax [ebp+NumberOfBytesWritten] +
cmp eax dword_10074B8 +
jnz loc_1002106  +
mov [esi+4] eax +
mov eax dword_10074B8 +
cdq   +
add dword_1007420 eax +
mov dword_10074B8 edi +
pop edi  +
adc dword_1007424 edx +
inc dword_1007428  +
pop esi  +
leave   +
retn   +
***
call sub_1001D11  +
mov eax cb +
mov ecx dword_1007394 +
mov edx eax +
or edx ecx +
jnz loc_100219B  +
mov dword_10078F8 1 +
test ecx ecx +
jl loc_10021ED  +
jg loc_10021A6  +
cmp eax 1 +
jbe loc_10021ED  +
push 0  +
push eax  +
push dword_1007400  +
call ds:IsTextUnicode  +
test eax eax +
jz loc_10021ED  +
mov edx dword_1007400 +
push 2  +
pop eax  +
mov ecx 0FEFFh +
mov dword_10074E8 eax +
cmp [edx] cx +
jnz loc_10021D7  +
add dword_1007400 eax +
mov ecx cchWideChar +
add ecx ecx +
mov dword_10074B4 ecx +
mov cchMultiByte ecx +
jmp loc_1002248  +
mov edx CPInfo.MaxCharSize +
push esi  +
cmp edx 1 +
jnz loc_1002227  +
mov esi dword_10074EC +
test esi esi +
jz loc_1002227  +
push edi  +
push 2  +
pop ecx  +
mov edi offset dword_1001200 +
xor eax eax +
cmps   +
pop edi  +
jnz loc_1002227  +
mov ecx cchWideChar +
mov dword_10074B4 ecx +
mov cchMultiByte ecx +
jmp loc_1002242  +
mov ecx cchWideChar +
xor eax eax +
inc eax  +
imul edx ecx +
lea esi [ecx+ecx] +
mov dword_10074B4 esi +
mov cchMultiByte edx +
mov dword_10074E8 eax +
pop esi  +
xor ecx ecx +
mov dword_100744C eax +
cmp dword_10074A8 ecx +
jz loc_1002263  +
mov dword_100744C 2 +
jmp loc_1002272  +
cmp eax 2 +
jnz loc_1002272  +
mov dword_100744C 1 +
cmp eax ecx +
jnz loc_1002294  +
cmp dword_10074FC ecx +
jz loc_1002289  +
mov dword_1007978 offset loc_1001955 +
retn   +
mov dword_1007978 offset loc_1001921 +
retn   +
mov dword_1007978 offset loc_10019BF +
cmp dword_10074FC ecx +
jnz locret_10022B0  +
mov dword_1007978 offset loc_1001989 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3F4h +
mov eax dword_1005014 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+RootPathName] 0 +
test esi esi +
jz loc_1002302  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10022DF  +
sub eax edx +
mov ecx 3E8h +
cmp eax ecx +
jnb loc_1002302  +
push esi  +
push ecx  +
lea eax [ebp+RootPathName] +
push eax  +
call strcpy_s  +
add esp 0Ch +
lea eax [ebp+RootPathName] +
push 5Ch  +
push eax  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100231B  +
mov byte ptr [eax+1] 0 +
mov esi ds:GetDiskFreeSpaceA +
lea eax [ebp+TotalNumberOfClusters] +
push eax  +
push eax  +
lea eax [ebp+BytesPerSector] +
push eax  +
lea eax [ebp+TotalNumberOfClusters] +
push eax  +
lea eax [ebp+RootPathName] +
push eax  +
call esi  +
test eax eax +
jnz loc_100235E  +
lea eax [ebp+TotalNumberOfClusters] +
push eax  +
push eax  +
lea eax [ebp+BytesPerSector] +
push eax  +
lea eax [ebp+TotalNumberOfClusters] +
push eax  +
push 0  +
call esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+BytesPerSector] +
xor ecx ebp +
pop esi  +
call sub_1003998  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3ECh +
mov eax dword_1005014 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
inc eax  +
cmp dword_10074A0 eax +
jz loc_1002434  +
push esi  +
push edi  +
mov dword_10074A0 eax +
mov eax dword_10074AC +
xor edi edi +
cmp eax edi +
jz loc_1002400  +
push eax  +
lea eax [ebp+Buffer] +
push 3E8h  +
push eax  +
call strcpy_s  +
add esp 0Ch +
mov esi offset TempFileName +
push esi  +
push edi  +
push offset PrefixString  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetTempFileNameA  +
push edi  +
push 64000000h  +
push 2  +
push edi  +
push edi  +
push 0C0000000h  +
push esi  +
call ds:CreateFileA  +
mov dword_100739C eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002421  +
push edi  +
push esi  +
jmp loc_100241C  +
lea eax [ebp+Buffer] +
push eax  +
push 3E7h  +
call ds:GetTempPathA  +
test eax eax +
jnz loc_10023C3  +
push edi  +
push offset dword_1001204  +
call sub_10012C5  +
lea eax [ebp+Buffer] +
push eax  +
call sub_10022B6  +
pop edi  +
mov dword_10074F4 eax +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1003998  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
push hFile  +
call ds:CloseHandle  +
mov eax dword_100740C +
xor ebx ebx +
xor esi esi +
mov dword_10073F0 eax +
mov eax dword_10074B0 +
inc ebx  +
mov dword_1007420 esi +
mov dword_1007424 esi +
mov dword_10073E4 eax +
cmp dword_10074F0 ebx +
jz loc_100249B  +
mov ecx 1000h +
cmp eax ecx +
jl loc_1002497  +
mov dword_10073E4 ecx +
pop esi  +
pop ebx  +
leave   +
retn   +
***
lea eax [ebp-40h] +
push eax  +
mov dword ptr [ebp-40h] 40h +
call ds:GlobalMemoryStatusEx  +
mov eax dword_10074F8 +
cmp dword_10074A0 esi +
jnz loc_10024D1  +
mov ecx [ebp-2Ch] +
cmp ecx dword_1007394 +
ja loc_10024E7  +
jb loc_10024D1  +
mov ecx [ebp-30h] +
cmp ecx cb +
jnb loc_10024E7  +
cmp eax esi +
jnz loc_10024E1  +
push 1CF2h  +
call sub_100154C  +
jmp loc_1002497  +
***
mov dword_1007930 ebx +
cmp eax esi +
jz loc_1002497  +
cmp dword_1007930 esi +
jz loc_100251F  +
push eax  +
mov dword_1005010 2 +
call sub_10022B6  +
push esi  +
push 60000000h  +
push 2  +
push esi  +
push ebx  +
push 40000000h  +
push dword_10074F8  +
mov dword_10074A4 eax +
jmp loc_100252F  +
push esi  +
push 80h  +
push 2  +
push esi  +
push ebx  +
push 40000000h  +
push eax  +
call ds:CreateFileA  +
mov hConsoleHandle eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002497  +
push esi  +
push dword_10074F8  +
call sub_10012C5  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_1007400 +
cmp eax dword_1007450 +
jnz loc_100257A  +
call sub_1001D11  +
cmp dword_10078F8 0 +
jnz locret_1002761  +
push edi  +
xor edi edi +
push ebx  +
mov [ebp+var_4] edi +
push esi  +
mov esi cchMultiByte +
mov edx dword_1007400 +
mov ecx dword_1007450 +
sub esi edi +
add esi edx +
mov eax edx +
cmp ecx esi +
jbe loc_10025A0  +
mov ecx esi +
cmp dword_10074E8 2 +
jnz loc_10025F5  +
mov eax edx +
cmp edx ecx +
jnb loc_10025C9  +
movzx esi word ptr [eax] +
cmp si 0Ah +
jz loc_10025C9  +
test si si +
jz loc_10025C9  +
cmp si 1Ah +
jz loc_10025C9  +
inc eax  +
inc eax  +
cmp eax ecx +
jb loc_10025AF  +
mov esi eax +
sub esi edx +
cmp eax ecx +
jnz loc_10025D8  +
mov dword_1007400 eax +
jmp loc_1002644  +
xor ecx ecx +
lea ebx [eax+2] +
inc ecx  +
mov dword_1007400 ebx +
cmp word ptr [eax] 1Ah +
mov [ebp+var_4] ecx +
jnz loc_1002640  +
mov dword_10078F8 ecx +
jmp loc_1002635  +
cmp edx ecx +
jnb loc_100260E  +
mov bl [eax] +
cmp bl 0Ah +
jz loc_100260E  +
test bl bl +
jz loc_100260E  +
cmp bl 1Ah +
jz loc_100260E  +
inc eax  +
cmp eax ecx +
jb loc_10025F9  +
mov esi eax +
sub esi edx +
cmp eax ecx +
jz loc_10025D1  +
lea ecx [eax+1] +
mov dword_1007400 ecx +
cmp byte ptr [eax] 1Ah +
mov [ebp+var_4] 1 +
jnz loc_1002640  +
mov dword_10078F8 1 +
lea eax [esi+edi] +
test eax eax +
jz loc_100275E  +
test edi edi +
jz loc_1002683  +
lea ebx [esi+edi] +
cmp ebx cchMultiByte +
jge loc_100269D  +
mov eax dword_10073EC +
push esi  +
push edx  +
add eax edi +
push eax  +
call memcpy  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
mov edi ebx +
jnz loc_100267B  +
call sub_1001D11  +
cmp dword_10078F8 0 +
jz loc_1002582  +
mov edx dword_10073EC +
mov esi edi +
mov eax dword_10074E8 +
cmp eax 2 +
jnz loc_10026A7  +
test esi esi +
jz loc_10026B3  +
cmp word ptr [esi+edx-2] 0Dh +
jnz loc_10026B3  +
dec esi  +
dec esi  +
jmp loc_10026B3  +
push 1CE9h  +
call sub_100157A  +
test esi esi +
jz loc_10026B3  +
cmp byte ptr [esi+edx-1] 0Dh +
jnz loc_10026B3  +
dec esi  +
mov ecx dword_10073D8 +
mov edi ecx +
test eax eax +
jnz loc_10026DC  +
push esi  +
push edx  +
push ecx  +
call memcpy  +
mov byte ptr [esi+edi] 0 +
mov ecx dword_10073D8 +
add esp 0Ch +
mov eax esi +
lea ecx [ecx+esi+1] +
jmp loc_1002701  +
cmp eax 2 +
jnz loc_1002733  +
push esi  +
push edx  +
push ecx  +
call memcpy  +
add esp 0Ch +
shr esi 1 +
mov eax esi +
mov ecx dword_10073D8 +
lea ecx [ecx+eax*2] +
xor edx edx +
mov [ecx] dx +
add ecx 2 +
sub lpWideCharStr 4 +
cmp eax dword_1007410 +
mov dword_10073D8 ecx +
jg loc_1002757  +
sub dword_1007404 4 +
mov eax dword_1007404 +
mov eax [eax] +
mov ecx lpWideCharStr +
mov [ecx] eax +
mov eax dword_1007404 +
jmp loc_100275C  +
test esi esi +
jz loc_1002753  +
push cchWideChar  +
push ecx  +
push esi  +
push edx  +
push 0  +
push 1  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_10026F0  +
jmp loc_100269D  +
xor eax eax +
jmp loc_10026F6  +
mov eax lpWideCharStr +
mov [eax] edi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpAddress +
sub eax dword_1007418 +
mov edx dword_10074B4 +
mov ecx [ebp+arg_4] +
add eax [ebp+arg_0] +
lea ecx [edx+ecx*2+5Ch] +
xor edx edx +
div  ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_8] +
push edi  +
call sub_1002768  +
mov ecx lpAddress +
mov esi eax +
lea eax [esi+esi] +
mov dword_1007440 eax +
imul eax eax +
sub ecx eax +
sub ecx dword_10074B4 +
sub ecx dword_10078F0 +
lea eax [ecx+edi-4] +
xor ecx ecx +
mov edx eax +
add edx [ebp+arg_0] +
mov edi ecx +
adc edi [ebp+arg_4] +
push ecx  +
sub edx 1 +
push eax  +
sbb edi ecx +
push edi  +
push edx  +
call __alldiv  +
xor ecx ecx +
cmp edx ecx +
jg loc_10027F8  +
jl loc_10027F3  +
cmp eax esi +
ja loc_10027F8  +
xor eax eax +
inc eax  +
jmp loc_10027FA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi dwSize +
push edi  +
mov edi dword_10073E0 +
push edi  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002795  +
test eax eax +
jz loc_1002893  +
mov ebx dword_1007430 +
sub ebx lpAddress +
mov [ebp+var_4] esi +
lea eax [esi+ebx] +
mov esi SystemInfo.dwPageSize +
shr eax 1 +
xor edx edx +
lea eax [eax+esi-1] +
div  esi +
mov edi eax +
imul edi esi +
push dword_10073E0  +
mov [ebp+var_8] edi +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002795  +
test eax eax +
jz loc_1002874  +
mov [ebp+var_4] edi +
lea eax [edi+ebx] +
jmp loc_100287B  +
mov eax [ebp+var_4] +
mov ebx edi +
add eax edi +
shr eax 1 +
xor edx edx +
lea eax [esi+eax-1] +
div  esi +
mov edi eax +
imul edi esi +
cmp edi [ebp+var_8] +
jnz loc_1002853  +
mov eax edi +
jmp loc_10028C6  +
mov ebx SystemInfo.dwPageSize +
sub edi ebx +
cmp edi ebx +
jb loc_10028BA  +
push edi  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002795  +
test eax eax +
jnz loc_10028B6  +
sub edi ebx +
cmp edi ebx +
jnb loc_100289F  +
cmp edi ebx +
jnb loc_10028C4  +
push 1CF0h  +
call sub_100157A  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp dword_10074D8 1 +
push esi  +
jz loc_1002900  +
push SystemInfo.dwPageSize  +
mov esi dwSize +
push esi  +
call sub_1002768  +
mov dword_1007440 eax +
jmp loc_1002A7D  +
mov eax dword_1007430 +
sub eax lpWideCharStr +
mov esi dword_10078F0 +
sar eax 2 +
shl eax 2 +
sub eax esi +
add eax dword_10073D8 +
push ebx  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
push edi  +
test eax eax +
jge loc_1002931  +
fadd  ds:dbl_10011F8 +
mov eax cb +
sub eax dword_1007450 +
add eax dword_1007400 +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fdivp st(1) st +
fild  dbl_1005008 +
fmulp st(1) st +
call _ftol2  +
sub esi lpAddress +
mov edi SystemInfo.dwPageSize +
mov dword ptr [ebp+var_10] eax +
mov dword ptr [ebp+var_10+4] edx +
mov [ebp+var_4] esi +
fild  [ebp+var_4] +
xor ebx ebx +
fild  [ebp+var_10] +
fmul  ds:dbl_1001220 +
faddp st(1) st +
fiadd  dword_10074B4 +
fadd  ds:dbl_1001218 +
call _ftol2  +
add eax edi +
adc edx ebx +
push ebx  +
sub eax 1 +
push edi  +
sbb edx ebx +
push edx  +
push eax  +
call __alldiv  +
push ebx  +
push edi  +
push edx  +
push eax  +
call __allmul  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp dword_10073E8 ebx +
jz loc_10029CA  +
mov esi dwSize +
push edi  +
push esi  +
call sub_1002768  +
mov dword_1007440 eax +
jmp loc_10029F8  +
cmp edx ebx +
jg loc_10029E6  +
jl loc_10029D8  +
cmp eax dwSize +
ja loc_10029E6  +
mov esi eax +
mov dword_1007440 2 +
jmp loc_10029F8  +
push dword ptr [ebp+var_10+4]  +
push dword ptr [ebp+var_10]  +
call sub_1002805  +
mov esi eax +
call sub_1002378  +
mov ecx dword ptr dbl_1005008 +
add ecx [ebp+var_8] +
mov eax dword ptr dbl_1005008+4 +
adc eax [ebp+var_4] +
cmp eax ebx +
jl loc_1002A7B  +
jg loc_1002A17  +
cmp ecx dwSize +
jbe loc_1002A7B  +
cmp lpFileName ebx +
jnz loc_1002A2B  +
push 1CF1h  +
call sub_100154C  +
jmp loc_1002A7B  +
push hFile  +
call ds:CloseHandle  +
push ebx  +
push 60000000h  +
push 3  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push 80000000h  +
push lpFileName  +
call ds:CreateFileA  +
mov hFile eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002A6B  +
push ebx  +
push lpFileName  +
call sub_10012C5  +
mov dword_10078EC edi +
mov dword_1005004 2 +
pop edi  +
pop ebx  +
push 4  +
push 1000h  +
push esi  +
push lpAddress  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_1002A9F  +
push 1CF0h  +
call sub_100157A  +
mov ecx dword_1007440 +
mov eax lpAddress +
mov edx ecx +
imul ecx ecx +
shl edx 2 +
sub eax edx +
add eax esi +
mov dword_1007414 eax +
sub eax ecx +
mov ecx dword_1007430 +
mov dword_10078E8 eax +
sub eax ecx +
sar eax 2 +
mov esi eax +
mov eax lpWideCharStr +
sub ecx eax +
push ecx  +
push eax  +
shl esi 2 +
add eax esi +
push eax  +
call memcpy  +
add lpWideCharStr esi +
add dword_1007404 esi +
add esp 0Ch +
add dword_1007430 esi +
pop esi  +
leave   +
retn   +
***
jmp loc_1002B22  +
mov eax lpWideCharStr +
sub eax dword_10073D8 +
mov ecx dword_10074B4 +
sub eax 4 +
add ecx 4 +
cmp eax ecx +
jl locret_1002B2B  +
call sub_1002555  +
cmp dword_10078F8 0 +
jz loc_1002B02  +
retn   +
***
call sub_100217B  +
cmp dword_10078F8 0 +
jnz locret_1002B44  +
jmp sub_1002B00  +
retn   +
***
mov ecx dword_1007404 +
sub ecx eax +
push 4  +
sar ecx 2 +
push ecx  +
push eax  +
call ds:qsort  +
add esp 10h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100744C +
push ebx  +
push esi  +
push edi  +
mov edi dword_10073EC +
push 2  +
pop ebx  +
cmp eax ebx +
jnz loc_1002BD2  +
mov eax [ebp+lpWideCharStr] +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_1002B93  +
sub eax edx +
sar eax 1 +
lea esi [eax+eax] +
push esi  +
push [ebp+lpWideCharStr]  +
push edi  +
call memcpy  +
add esp 0Ch +
cmp dword_10078F4 0 +
jnz loc_1002BBE  +
xor eax eax +
jmp loc_1002BCA  +
push 0Dh  +
pop eax  +
mov [esi+edi] ax +
push 0Ah  +
add esi ebx +
pop eax  +
mov [esi+edi] ax +
add esi ebx +
jmp loc_1002C2A  +
cmp eax 1 +
jnz loc_1002BF5  +
xor eax eax +
push eax  +
push eax  +
push cchMultiByte  +
push edi  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push eax  +
push 1  +
call ds:WideCharToMultiByte  +
mov esi eax +
dec esi  +
jmp loc_1002C11  +
mov esi [ebp+lpWideCharStr] +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_1002BFB  +
sub esi ecx +
push esi  +
push [ebp+lpWideCharStr]  +
push edi  +
call memcpy  +
add esp 0Ch +
cmp dword_10078F4 0 +
jnz loc_1002C20  +
mov byte ptr [esi+edi] 0 +
jmp loc_1002C29  +
mov byte ptr [esi+edi] 0Dh +
inc esi  +
mov byte ptr [esi+edi] 0Ah +
inc esi  +
mov ebx dword_10074B8 +
mov eax dword_10073E4 +
sub eax ebx +
cmp esi eax +
mov [ebp+lpWideCharStr] esi +
jl loc_1002C41  +
mov [ebp+lpWideCharStr] eax +
cmp dword_10078F4 0 +
jnz loc_1002C4F  +
push 2  +
pop ecx  +
jmp loc_1002C55  +
mov ecx dword_1005010 +
mov eax dword_1007428 +
cdq   +
idiv  ecx +
push [ebp+lpWideCharStr]  +
push edi  +
mov eax dword_1007438[edx*4] +
add eax ebx +
push eax  +
call memcpy  +
add ebx [ebp+lpWideCharStr] +
add esp 0Ch +
cmp ebx dword_10073E4 +
jl loc_1002CAF  +
mov eax dword_1005010 +
mov ecx dword_1007924 +
add ecx eax +
mov dword_10074B8 ebx +
cmp ecx dword_1007428 +
jnz loc_1002C9E  +
call sub_1001F01  +
call sub_1001FCD  +
xor ebx ebx +
sub esi [ebp+lpWideCharStr] +
jz loc_1002CAF  +
add edi [ebp+lpWideCharStr] +
jmp loc_1002C30  +
pop edi  +
pop esi  +
mov dword_10074B8 ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi dword_1007404 +
sub esi lpWideCharStr +
push edi  +
sar esi 2 +
xor edi edi +
test esi esi +
jle loc_1002CEC  +
mov eax lpWideCharStr +
push dword ptr [eax+edi*4]  +
call sub_1002B73  +
inc edi  +
cmp edi esi +
jl loc_1002CDA  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi dword_1007430 +
sub esi dword_1007404 +
push edi  +
sar esi 2 +
xor edi edi +
test esi esi +
jle loc_1002D1F  +
mov eax dword_1007404 +
push dword ptr [eax+edi*4]  +
call sub_1002B73  +
inc edi  +
cmp edi esi +
jl loc_1002D0D  +
pop edi  +
pop esi  +
retn   +
***
jmp loc_1002D2E  +
call sub_1001F01  +
mov eax dword_1007924 +
cmp eax dword_1007428 +
jnz loc_1002D29  +
cmp dword_10074B8 0 +
jz locret_1002D4E  +
call sub_1001FCD  +
jmp sub_1001F01  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
cmp dword_10078F4 edi +
jnz loc_1002DA2  +
mov ecx dword_100741C +
cmp ecx dword_1007440 +
jnz loc_1002D7A  +
push 1CF0h  +
call sub_100157A  +
mov eax dword_10074B8 +
mov esi dword_10078E8 +
cdq   +
add eax dword_1007420 +
adc edx dword_1007424 +
imul ecx ecx +
mov [ecx+esi+8] eax +
mov eax dword_10078E8 +
mov [ecx+eax+0Ch] edx +
cmp dword_100742C edi +
jz loc_1002DB1  +
call sub_1002CC1  +
jmp loc_1002DB6  +
call sub_1002CF4  +
cmp dword_10078F4 edi +
jnz loc_1002DEE  +
mov eax dword_10074B8 +
mov esi dword_10078E8 +
cdq   +
mov ecx eax +
add ecx dword_1007420 +
mov eax dword_100741C +
adc edx dword_1007424 +
imul eax eax +
mov [eax+esi+10h] ecx +
mov ecx dword_10078E8 +
mov [eax+ecx+14h] edx +
cmp dword_100742C edi +
jz loc_1002DFD  +
call sub_1002CF4  +
jmp loc_1002E02  +
call sub_1002CC1  +
cmp dword_10078F4 edi +
jnz loc_1002E86  +
mov eax dword_10074B8 +
mov esi dword_10078E8 +
cdq   +
mov ecx eax +
add ecx dword_1007420 +
mov eax dword_100741C +
adc edx dword_1007424 +
imul eax eax +
mov [eax+esi+18h] ecx +
mov ecx dword_10078E8 +
mov [eax+ecx+1Ch] edx +
mov eax dword_10074F4 +
mov ecx dword_10074B8 +
lea esi [eax-1] +
and esi ecx +
jz loc_1002E78  +
sub eax esi +
push eax  +
mov eax dword_1007428 +
and eax 80000001h +
push edi  +
jns loc_1002E61  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
mov eax dword_1007438[eax*4] +
add eax ecx +
push eax  +
call memset  +
mov eax dword_10074F4 +
add esp 0Ch +
sub eax esi +
add dword_10074B8 eax +
inc dword_100741C  +
pop edi  +
pop esi  +
jmp sub_1002D27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx dword_10073E0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4Ch] +
mov esi [edi+18h] +
imul eax ecx +
cdq   +
mov ebx eax +
add ebx [edi+8] +
mov eax ecx +
adc edx [edi+0Ch] +
mov ecx [edi+1Ch] +
sub esi ebx +
sbb ecx edx +
mov [ebp+var_4] edx +
mov [ebp+arg_0] eax +
cdq   +
cmp edx ecx +
jl loc_1002EEA  +
jg loc_1002ED1  +
cmp eax esi +
jbe loc_1002EEA  +
mov ecx [edi+18h] +
mov eax dword_10074F4 +
sub ecx ebx +
lea edx [eax-1] +
and edx ecx +
mov [ebp+arg_0] ecx +
jz loc_1002EEA  +
sub eax edx +
add [ebp+arg_0] eax +
mov esi dword_10073F0 +
and esi 80000001h +
jns loc_1002EFD  +
dec esi  +
or esi 0FFFFFFFEh +
inc esi  +
mov eax [ebp+var_4] +
imul esi esi +
add esi offset unk_1007940 +
push dword ptr [esi+18h]  +
mov ecx eax +
mov [esi+14h] eax +
mov eax [ebp+arg_0] +
mov [esi+10h] ebx +
sar ecx 1Fh +
mov [esi] eax +
call ds:ResetEvent  +
lea eax [esi+8] +
push eax  +
lea eax [esi+4] +
push eax  +
mov eax [edi+4Ch] +
and eax 80000001h +
push dword ptr [esi]  +
jns loc_1002F3B  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
push dword ptr [edi+eax*4+20h]  +
push dword_100739C  +
call ds:ReadFile  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jnz loc_1002F6B  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_1002F6B  +
push 0  +
push offset TempFileName  +
call sub_10012C5  +
inc dword_10073F0  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+54h] 0 +
cmp dword_10074BC 0 +
jnz loc_1002F96  +
mov dword_10074BC eax +
jmp loc_1002F9F  +
mov ecx dword_10074D4 +
mov [ecx+54h] eax +
mov ecx dword_100740C +
add ecx 2 +
cmp dword_10073F0 ecx +
mov dword_10074D4 eax +
jge loc_1002FBB  +
push eax  +
call sub_1002E92  +
pop ebp  +
retn 4  +
***
mov eax dword_100740C +
and eax 80000001h +
push 0FFFFFFFFh  +
jns loc_1002FD7  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
imul eax eax +
push dword_1007958[eax]  +
call ds:WaitForSingleObject  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi dword_100740C +
cmp dword_10073F0 esi +
jz loc_100309D  +
push edi  +
mov edi dword_10074BC +
test edi edi +
jz loc_100309C  +
and esi 80000001h +
jns loc_1003021  +
dec esi  +
or esi 0FFFFFFFEh +
inc esi  +
imul esi esi +
add esi offset unk_1007940 +
cmp dword ptr [esi+4] 0 +
jnz loc_1003069  +
push 0  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea eax [esi+8] +
push eax  +
push dword_100739C  +
call ds:GetOverlappedResult  +
test eax eax +
jnz loc_1003063  +
call ds:GetLastError  +
cmp eax 3E4h +
jz loc_100309C  +
push 0  +
push offset TempFileName  +
call sub_10012C5  +
mov eax [ebp+NumberOfBytesTransferred] +
mov [esi+4] eax +
inc dword_100740C  +
inc dword ptr [edi+4Ch]  +
mov edx dword_100740C +
mov ecx dword_10073F0 +
cmp edx ecx +
mov eax [edi+54h] +
mov dword_10074BC eax +
jge loc_1003092  +
sub ecx edx +
dec ecx  +
mov eax [eax+54h] +
jnz loc_100308C  +
test eax eax +
jz loc_100309C  +
push eax  +
call sub_1002E92  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10030BA  +
call sub_1002FC4  +
call sub_1002FEC  +
mov eax [esi+4Ch] +
cmp eax [esi+50h] +
jz loc_10030B0  +
mov ecx [esi+8] +
push ebx  +
mov ebx [esi+50h] +
mov eax ebx +
imul eax dword_10073E0 +
cdq   +
add eax ecx +
push edi  +
mov edi [esi+0Ch] +
mov [esi+30h] eax +
adc edx edi +
mov eax ebx +
and eax 80000001h +
mov [esi+34h] edx +
jns loc_10030EF  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
mov eax [esi+eax*4+20h] +
mov edi [esi+18h] +
sub edi [esi+30h] +
mov ecx [esi+1Ch] +
mov [esi+28h] eax +
mov [esi+3Ch] eax +
mov eax dword_10073E0 +
sbb ecx edx +
mov [esi+38h] eax +
cdq   +
cmp edx ecx +
jl loc_1003120  +
jg loc_1003117  +
cmp eax edi +
jbe loc_1003120  +
mov eax [esi+18h] +
sub eax [esi+30h] +
mov [esi+38h] eax +
mov eax [esi+4Ch] +
inc ebx  +
mov [esi+50h] ebx +
imul eax dword_10073E0 +
cdq   +
add eax [esi+8] +
pop edi  +
adc edx [esi+0Ch] +
pop ebx  +
cmp edx [esi+1Ch] +
jg loc_1003149  +
jl loc_1003143  +
cmp eax [esi+18h] +
jnb loc_1003149  +
push esi  +
call sub_1002F7A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+3Ch] +
push edi  +
mov edi [esi+28h] +
mov eax ecx +
sub eax edi +
cdq   +
xor ebx ebx +
add eax [esi+30h] +
mov [ebp+var_8] ebx +
adc edx [esi+34h] +
cmp edx [esi+44h] +
jl loc_1003189  +
jg loc_1003182  +
cmp eax [esi+40h] +
jb loc_1003189  +
xor eax eax +
jmp loc_1003296  +
mov eax [esi+38h] +
add eax edi +
cmp ecx eax +
jnz loc_1003198  +
push esi  +
call sub_10030A5  +
mov [ebp+var_4] ebx +
mov [ebp+arg_0] ebx +
mov edi cchMultiByte +
sub edi [ebp+arg_0] +
mov ecx [esi+3Ch] +
mov eax [esi+28h] +
add eax [esi+38h] +
add edi ecx +
mov edx ecx +
cmp eax edi +
jbe loc_10031BA  +
mov eax edi +
cmp dword_10074E8 2 +
jnz loc_10031E7  +
mov edx ecx +
cmp ecx eax +
jnb loc_10031D5  +
cmp word ptr [edx] 0 +
jz loc_10031D5  +
inc edx  +
inc edx  +
cmp edx eax +
jb loc_10031C9  +
mov edi edx +
sub edi ecx +
cmp edx eax +
jnz loc_10031E2  +
mov [esi+3Ch] edx +
jmp loc_100320E  +
add edx 2 +
jmp loc_10031FE  +
cmp ecx eax +
jnb loc_10031F5  +
cmp byte ptr [edx] 0 +
jz loc_10031F5  +
inc edx  +
cmp edx eax +
jb loc_10031EB  +
mov edi edx +
sub edi ecx +
cmp edx eax +
jz loc_10031DD  +
inc edx  +
cmp [ebp+arg_0] 0 +
mov [esi+3Ch] edx +
mov [ebp+var_4] 1 +
jz loc_1003255  +
mov eax [ebp+arg_0] +
lea ebx [edi+eax] +
cmp ebx cchMultiByte +
jge loc_1003243  +
push edi  +
push ecx  +
mov ecx dword_10073EC +
add ecx eax +
push ecx  +
call memcpy  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
mov [ebp+arg_0] ebx +
jnz loc_100324D  +
push esi  +
call sub_10030A5  +
jmp loc_100319E  +
push 1CE9h  +
call sub_100157A  +
mov ecx dword_10073EC +
mov edi ebx +
mov eax dword_10074E8 +
mov ebx [esi+48h] +
test eax eax +
jnz loc_1003272  +
push edi  +
push ecx  +
push ebx  +
call memcpy  +
add esp 0Ch +
mov byte ptr [edi+ebx] 0 +
jmp loc_1003293  +
cmp eax 2 +
jnz loc_100329D  +
push edi  +
push ecx  +
push ebx  +
call memcpy  +
add esp 0Ch +
shr edi 1 +
mov [ebp+var_8] edi +
mov eax [esi+48h] +
mov edx [ebp+var_8] +
xor ecx ecx +
mov [eax+edx*2] cx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
test edi edi +
jz loc_1003287  +
push cchWideChar  +
push ebx  +
push edi  +
push ecx  +
push 0  +
push 1  +
call ds:MultiByteToWideChar  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1003287  +
push 1CEFh  +
jmp loc_1003248  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
cmp dword_100741C ebx +
jbe loc_1003302  +
push esi  +
push edi  +
xor edi edi +
mov eax dword_10078E8 +
lea esi [edi+eax] +
jmp loc_10032EA  +
push dword ptr [esi+48h]  +
call sub_1002B73  +
push esi  +
call sub_1003153  +
test eax eax +
jnz loc_10032E2  +
inc ebx  +
add edi 58h +
cmp ebx dword_100741C +
jb loc_10032D8  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_4] 0 +
mov eax dword_1007978 +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
jz loc_1003327  +
mov edi eax +
jmp loc_100332A  +
or edi 0FFFFFFFFh +
mov ebx [eax] +
add ebx dword_100741C +
shr ebx 1 +
jz loc_1003370  +
mov eax dword_1007414 +
lea esi [eax+ebx*4] +
mov eax [esi] +
test eax eax +
jz loc_1003379  +
cmp eax 0FFFFFFFFh +
jz loc_100336C  +
cmp edi 0FFFFFFFFh +
jnz loc_1003355  +
or dword ptr [esi] 0FFFFFFFFh +
mov edi eax +
jmp loc_100336C  +
add eax 48h +
push eax  +
lea eax [edi+48h] +
push eax  +
call [ebp+var_4]  +
pop ecx  +
pop ecx  +
test eax eax +
jle loc_100336C  +
mov eax edi +
mov edi [esi] +
mov [esi] eax +
sar ebx 1 +
jnz loc_1003336  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov [esi] edi +
xor eax eax +
jmp loc_1003372  +
***
xor eax eax +
cmp dword_100741C eax +
jbe loc_10033A1  +
mov ecx dword_1007414 +
and dword ptr [ecx+eax*4] 0 +
inc eax  +
cmp eax dword_100741C +
jb loc_100338E  +
push ebx  +
xor ebx ebx +
inc ebx  +
push esi  +
cmp dword_100741C ebx +
jbe loc_10033D4  +
push edi  +
push 58h  +
pop edi  +
mov eax dword_10078E8 +
lea esi [edi+eax] +
push esi  +
call sub_1003153  +
push eax  +
push esi  +
call sub_1003309  +
inc ebx  +
add edi 58h +
cmp ebx dword_100741C +
jb loc_10033B2  +
pop edi  +
mov esi dword_10078E8 +
xor ebx ebx +
jmp loc_10033F4  +
test esi esi +
jz loc_1003408  +
push dword ptr [esi+48h]  +
call sub_1002B73  +
test bl bl +
jnz loc_10033F3  +
call sub_1002FEC  +
inc ebx  +
push esi  +
call sub_1003153  +
push eax  +
push esi  +
call sub_1003309  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_10033DE  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_10078E8 +
sub eax dword_1007418 +
push ebx  +
xor edx edx +
push esi  +
mov esi dword_100741C +
div  esi +
mov ecx SystemInfo.dwPageSize +
xor ebx ebx +
sub eax dword_10074B4 +
cdq   +
sub eax edx +
sar eax 1 +
xor edx edx +
div  ecx +
imul eax ecx +
cmp eax ebx +
jnz loc_1003456  +
push 1CF0h  +
call sub_100157A  +
mov ecx 40000h +
cmp eax ecx +
jle loc_1003461  +
mov eax ecx +
cmp dword_10073E0 eax +
jle loc_100346E  +
mov dword_10073E0 eax +
push edi  +
xor edi edi +
cmp esi ebx +
jbe loc_1003560  +
xor esi esi +
mov eax dword_10078E8 +
mov [esi+eax] edi +
lea eax [edi+edi] +
mov [ebp+var_4] eax +
lea eax [esi+20h] +
mov [ebp+var_8] 2 +
mov ecx [ebp+var_4] +
imul ecx dword_10073E0 +
add ecx dword_1007418 +
mov edx dword_10078E8 +
mov [eax+edx] ecx +
add eax 4 +
inc [ebp+var_4]  +
dec [ebp+var_8]  +
jnz loc_1003493  +
mov eax dword_10078E8 +
add eax esi +
mov ecx [eax+20h] +
mov [eax+28h] ecx +
mov eax dword_10078E8 +
add eax esi +
mov ecx [eax+28h] +
mov [eax+3Ch] ecx +
mov eax dword_10078E8 +
add eax esi +
mov ecx [eax+8] +
mov [eax+30h] ecx +
mov ecx [eax+0Ch] +
mov [eax+34h] ecx +
mov eax dword_10078E8 +
mov [esi+eax+38h] ebx +
mov eax dword_10078E8 +
add eax esi +
mov ecx [eax+10h] +
mov [eax+40h] ecx +
mov ecx [eax+14h] +
mov [eax+44h] ecx +
mov ecx dword_10074B4 +
mov eax dword_10073E0 +
imul ecx edi +
imul eax dword_100741C +
add ecx dword_1007418 +
lea eax [ecx+eax*2] +
mov ecx dword_10078E8 +
mov [esi+ecx+48h] eax +
mov eax dword_10078E8 +
mov [esi+eax+50h] ebx +
mov eax dword_10078E8 +
mov [esi+eax+4Ch] ebx +
mov eax dword_10078E8 +
mov [esi+eax+54h] ebx +
mov eax dword_10078E8 +
add eax esi +
push eax  +
call sub_1002F7A  +
inc edi  +
add esi 58h +
cmp edi dword_100741C +
jb loc_100347B  +
pop edi  +
cmp dword_100742C ebx +
jz loc_1003570  +
call sub_1003384  +
jmp loc_1003575  +
call sub_10032C7  +
xor edx edx +
cmp dword_100741C ebx +
jbe loc_10035A0  +
xor ecx ecx +
mov eax dword_10078E8 +
add eax ecx +
mov esi [eax+18h] +
mov [eax+40h] esi +
mov esi [eax+1Ch] +
inc edx  +
mov [eax+44h] esi +
add ecx 58h +
cmp edx dword_100741C +
jb loc_1003581  +
cmp dword_100742C ebx +
pop esi  +
pop ebx  +
jz loc_10035B1  +
call sub_10032C7  +
jmp loc_10035B6  +
call sub_1003384  +
call sub_1002D27  +
push dword_100739C  +
call ds:CloseHandle  +
leave   +
retn   +
***
mov eax dword_1007430 +
mov dword_1007404 eax +
mov lpWideCharStr eax +
mov eax dword_10078F0 +
mov dword_10073D8 eax +
retn   +
***
mov edi edi +
push esi  +
mov esi dword_10074EC +
test esi esi +
jnz loc_100360A  +
push offset dword_1001228  +
push esi  +
call ds:setlocale  +
pop ecx  +
pop ecx  +
pop esi  +
retn   +
***
push edi  +
mov edi offset dword_1001200 +
push 2  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jz loc_1003608  +
push 1CEAh  +
call sub_100157A  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push esi  +
call ds:SetThreadUILanguage  +
push esi  +
push esi  +
push 1  +
push esi  +
call ds:HeapSetInformation  +
push [ebp+arg_4]  +
mov dword_10078F4 esi +
push [ebp+arg_0]  +
call sub_10015AD  +
call loc_10035ED  +
call sub_10017FB  +
call sub_10019F5  +
call sub_1002B31  +
cmp dword_10078F8 esi +
jnz loc_1003683  +
call sub_10028D2  +
cmp dword_10078F8 esi +
jnz loc_1003683  +
call sub_1002B00  +
mov eax lpWideCharStr +
cmp eax dword_1007430 +
jz loc_10036BC  +
call sub_1002B4A  +
cmp dword_10074A0 esi +
jnz loc_10036AA  +
cmp dword_10078F8 esi +
jnz loc_10036BC  +
call sub_1002378  +
call sub_1002D54  +
call sub_10035CE  +
cmp dword_10078F8 esi +
jz loc_100367E  +
mov dword_10078F4 1 +
call loc_1002445  +
cmp dword_10074A0 esi +
pop esi  +
jz loc_10036DB  +
call sub_1003410  +
jmp loc_10036E0  +
call sub_1002D54  +
push hConsoleHandle  +
call ds:CloseHandle  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1003711  +
test eax eax +
jnz loc_1003716  +
mov ecx [esi] +
test ecx ecx +
jz loc_100370E  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1003702  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1007064 +
push offset dword_1007054  +
push dword_1007060  +
mov dword_1007054 eax +
push offset dword_1007044  +
push offset dword_1007048  +
push offset dword_1007040  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1007050 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100379E  +
cmp eax esi +
jnz loc_1003791  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10037A1  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1003778  +
xor esi esi +
inc esi  +
mov eax dword_1007984 +
cmp eax esi +
jnz loc_10037B4  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10037EF  +
mov eax dword_1007984 +
test eax eax +
jnz loc_10037E9  +
mov dword_1007984 esi +
push offset dword_1001150  +
push offset dword_1001144  +
call sub_10036F5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10037EF  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10038B9  +
mov dword_100705C esi +
mov eax dword_1007984 +
cmp eax esi +
jnz loc_1003813  +
push offset dword_1001140  +
push offset dword_1001138  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1007984 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1003820  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100798C ebx +
jz loc_1003841  +
push offset dword_100798C  +
call sub_1003C19  +
pop ecx  +
test eax eax +
jz loc_1003841  +
push ebx  +
push 2  +
push ebx  +
call dword_100798C  +
push dword_1007044  +
push dword_1007048  +
push dword_1007040  +
call sub_100362A  +
add esp 0Ch +
mov dword_1007058 eax +
cmp dword_100704C ebx +
jnz loc_100389F  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1007058 eax +
xor ebx ebx +
cmp dword_100704C ebx +
jnz loc_100389F  +
push eax  +
call ds:_exit  +
cmp dword_100705C ebx +
jnz loc_10038AD  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1007058 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10038D6  +
xor eax eax +
jmp loc_1003923  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10038D2  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1003910  +
cmp ecx 20Bh +
jnz loc_10038D2  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10038D2  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100391E  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10038D2  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100704C eax +
call sub_1003DB2  +
push eax  +
call ds:__set_app_type  +
or dword_100797C 0FFFFFFFFh +
or dword_1007980 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100706C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1007068 +
mov [eax] ecx +
call sub_1003D44  +
cmp dword_1005028 0 +
jnz loc_100397C  +
push offset sub_1003D44  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1003D2C  +
xor eax eax +
retn   +
***
call sub_1003DF1  +
jmp sub_1003756  +
***
cmp ecx dword_1005014 +
jnz loc_10039A3  +
retn 0  +
jmp loc_1003E87  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_10039F9  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_1003A81  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_1003A9D  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_1003AB9  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_1003AFA  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_1003AC7  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_1003AF5  +
cmp edx [esp+arg_4] +
ja loc_1003AF5  +
jb loc_1003AF6  +
cmp eax [esp+arg_0] +
jbe loc_1003AF6  +
dec esi  +
xor edx edx +
mov eax esi +
dec edi  +
jnz loc_1003B04  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1003B58  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1003B58  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1003B52  +
cmp eax 19930521h +
jz loc_1003B52  +
cmp eax 19930522h +
jz loc_1003B52  +
cmp eax 1994000h +
jnz loc_1003B58  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1003B18+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1003BA6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1003BA2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1003C0D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1003C05  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1003C0F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1003BF5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1003B90  +
pop ecx  +
test eax eax +
jz loc_1003C76  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1003BD0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003C76  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1003C7F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1003998  +
push offset dword_1005014  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003DA5  +
cmp ecx 0FFFFFFFFh +
jz loc_1003DA5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1003D9E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1003D9E  +
cmp edx 10000000h +
jnb loc_1003D9E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1003D9E  +
jmp loc_1003D99  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1003DE7  +
push eax  +
call sub_1003D4C  +
test eax eax +
jz loc_1003DE7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1003DDC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1003DE7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1005014 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1003E23  +
test eax ebx +
jz loc_1003E23  +
not eax  +
mov dword_1005018 eax +
jmp loc_1003E7E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1003E6A  +
test dword_1005014 ebx +
jnz loc_1003E6F  +
mov esi 0BB40E64Fh +
mov dword_1005014 esi +
not esi  +
mov dword_1005018 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1007170 eax +
mov dword_100716C ecx +
mov dword_1007168 edx +
mov dword_1007164 ebx +
mov dword_1007160 esi +
mov dword_100715C edi +
mov word_1007188 ss +
mov word_100717C cs +
mov word_1007158 ds +
mov word_1007154 es +
mov word_1007150 fs +
mov word_100714C gs +
pushf   +
pop dword_1007180  +
mov eax [ebp+0] +
mov dword_1007174 eax +
mov eax [ebp+4] +
mov dword_1007178 eax +
lea eax [ebp+8] +
mov dword_1007184 eax +
mov eax [ebp-320h] +
mov dword_10070C0 10001h +
mov eax dword_1007178 +
mov dword_100707C eax +
mov dword_1007070 0C0000409h +
mov dword_1007074 1 +
mov eax dword_1005014 +
mov [ebp-328h] eax +
mov eax dword_1005018 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
arpl [ebp+73h] sp +
jnb $+2  +
iret   +
***
