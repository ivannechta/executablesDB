mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0C0FEh +
jnz loc_1005561  +
cmp dword ptr [eax+4] 0FFFF0000h +
jnz loc_1005561  +
cmp dword ptr [eax+8] 0 +
jnz loc_1005561  +
mov eax [eax+0Ch] +
cmp eax 1000000h +
jz loc_100555C  +
cmp eax 2000000h +
jz loc_100555C  +
cmp eax 3000000h +
jnz loc_1005561  +
xor eax eax +
inc eax  +
jmp loc_1005563  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 1  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 144h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10055A3  +
sub eax edx +
cmp eax 100h +
jb loc_10055C6  +
push 2Fh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_1005722  +
push ebx  +
xor ebx ebx +
lea eax [ebp+var_104] +
push eax  +
cmp [ebp+arg_4] ebx +
jz loc_10055DC  +
push offset aLserverS  +
jmp loc_10055E1  +
push offset aServerS  +
push esi  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_1005620  +
lea eax [ebp+var_104] +
push eax  +
push offset aS_2  +
push esi  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_1005620  +
push esi  +
push 2Eh  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_1005721  +
push edi  +
push 10h  +
push 1  +
call sub_1009D5C  +
mov edi eax +
cmp edi ebx +
jnz loc_1005638  +
push 0Eh  +
pop eax  +
jmp loc_1005720  +
cmp [ebp+arg_4] ebx +
jz loc_1005645  +
mov esi dword_1016658 +
jmp loc_100565A  +
mov eax dword_1016654 +
cmp [eax+8] ebx +
jnz loc_1005654  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov esi [eax+8] +
add esi 20h +
lea eax [ebp+var_104] +
push eax  +
lea eax [ebp+var_144] +
push eax  +
call sub_100D26A  +
test eax eax +
jz loc_100568A  +
push edi  +
lea eax [ebp+var_144] +
push eax  +
push esi  +
call sub_100B278  +
mov ebx eax +
test ebx ebx +
jz loc_10056AC  +
cmp ebx 0FFFFFFFCh +
jz loc_10056A3  +
push 1  +
push edi  +
lea eax [ebp+var_104] +
push eax  +
push 0FF03h  +
push 1  +
push esi  +
call sub_100B498  +
mov ebx eax +
test ebx ebx +
jz loc_10056AC  +
cmp ebx 0FFFFFFFCh +
jnz loc_10056FD  +
cmp dword ptr [edi+8] 0 +
jz loc_10056FD  +
push dword_1016654  +
call sub_100A48C  +
push dword_1016654  +
call ds:free  +
mov dword_1016654 edi +
push dword ptr [edi]  +
push 100h  +
push offset unk_101AC00  +
call strcpy_s  +
mov eax ds:_iob +
add esp 10h +
push dword_1016654  +
add eax 20h +
push 2Bh  +
push eax  +
call sub_100A15A  +
xor eax eax +
jmp loc_1005720  +
push ebx  +
call sub_1009E26  +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push 30h  +
push 2  +
call sub_100BD21  +
push edi  +
call ds:free  +
add esp 14h +
mov eax ebx +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100CC5F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
cmp byte ptr [eax] 5Ch +
push edi  +
mov [ebp+var_4] esi +
jnz loc_1005751  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_4] +
cmp [eax+8] esi +
jnz loc_1005763  +
cmp [eax+0Ch] esi +
jz loc_100576B  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov ebx [eax+8] +
add ebx 20h +
jmp loc_100576D  +
xor ebx ebx +
push [ebp+arg_0]  +
lea eax [ebp+var_44] +
push eax  +
call sub_100D26A  +
cmp eax esi +
jz loc_10057E6  +
mov eax dword_1010188 +
cmp eax 1 +
jz loc_100579A  +
cmp eax 1Ch +
jz loc_100579A  +
cmp eax 0FF03h +
jz loc_100579A  +
cmp eax 0FFh +
jnz loc_10057B2  +
mov esi offset unk_101AA40 +
push esi  +
lea eax [ebp+var_44] +
push eax  +
push ebx  +
call sub_100B278  +
xor ecx ecx +
inc ecx  +
mov [ebp+var_4] ecx +
jmp loc_1005806  +
cmp eax 0Ch +
jnz loc_10057E6  +
cmp word ptr [ebp+var_44] 2 +
jnz loc_10057CB  +
push [ebp+var_40]  +
push [ebp+arg_0]  +
call sub_100D1AB  +
jmp loc_10057E6  +
cmp word ptr [ebp+var_44] 17h +
jnz loc_10057E6  +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+var_3C] +
movs   +
movs   +
movs   +
movs   +
call sub_100D1E8  +
push 0  +
mov esi offset unk_101AA40 +
push esi  +
push [ebp+arg_0]  +
push dword_1010188  +
push dword_101018C  +
push ebx  +
call sub_100B498  +
xor ecx ecx +
inc ecx  +
mov edi eax +
cmp edi 0FFFFFFFCh +
jz loc_100584D  +
cmp edi 0FFFFFFFEh +
jz loc_1005875  +
cmp edi 0FFFFFFFFh +
jz loc_1005864  +
test edi edi +
jz loc_100582C  +
push edi  +
call sub_1009E26  +
push eax  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push 34h  +
jmp loc_1005892  +
mov eax dword_1010188 +
cmp eax ecx +
jz loc_1005847  +
cmp eax 1Ch +
jz loc_1005847  +
cmp eax 0FF03h +
jz loc_1005847  +
cmp [ebp+var_4] 0 +
jz loc_100585B  +
mov dword_1016650 ecx +
push esi  +
push 31h  +
push dword_101AD00  +
call sub_100A15A  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
push 33h  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
jmp loc_100585B  +
push [ebp+arg_0]  +
push dword_1010188  +
call sub_100A010  +
push eax  +
push dword_1010188  +
call sub_1009FB4  +
push eax  +
push 32h  +
push 2  +
call sub_100BD21  +
add esp 14h +
jmp loc_100585B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 0FFh +
xor ebx ebx +
push esi  +
lea eax [ebp+var_204+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+var_204] bl +
call memset  +
push esi  +
lea eax [ebp-103h] +
push ebx  +
push eax  +
mov [ebp+var_104] bl +
call memset  +
mov eax edi +
add esp 18h +
mov dword_1016650 ebx +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_10058FB  +
sub eax esi +
cmp eax 100h +
jb loc_100591E  +
push 2Fh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_10059D3  +
lea eax [ebp+var_204] +
push eax  +
push offset aS_2  +
push edi  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_1005948  +
push edi  +
push 2Eh  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
jmp loc_1005916  +
cmp [ebp+arg_4] ebx +
jnz loc_100595C  +
mov eax ds:_iob +
add eax 20h +
mov dword_101AD00 eax +
jmp loc_100598D  +
lea eax [ebp+var_104] +
push eax  +
push edi  +
call sub_1009DAC  +
mov dword_101AD00 eax +
cmp eax ebx +
jnz loc_100597D  +
lea eax [ebp+var_104] +
push eax  +
push 0Ch  +
jmp loc_100593C  +
push edi  +
push offset aS_3  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
push dword_1016654  +
push 35h  +
push dword_101AD00  +
call sub_100A15A  +
push offset unk_101AC00  +
push dword_1016654  +
lea eax [ebp+var_204] +
push eax  +
call sub_1005736  +
mov esi eax +
cmp [ebp+arg_4] ebx +
jz loc_10059D1  +
push dword_101AD00  +
call ds:fclose  +
pop ecx  +
mov dword_101AD00 ebx +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 304h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 0FFh +
xor ebx ebx +
push esi  +
lea eax [ebp-203h] +
push ebx  +
push eax  +
mov [ebp+var_204] bl +
call memset  +
push esi  +
lea eax [ebp+var_304+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+var_304] bl +
call memset  +
push esi  +
lea eax [ebp+var_104+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+var_104] bl +
call memset  +
mov eax edi +
add esp 24h +
mov dword_1016650 ebx +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_1005A55  +
sub eax esi +
cmp eax 100h +
jb loc_1005A78  +
push 2Fh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_1005B7F  +
lea eax [ebp+var_104] +
push eax  +
lea eax [ebp+var_304] +
push eax  +
push offset aSS  +
push edi  +
call ds:sscanf  +
add esp 10h +
cmp eax 2 +
jz loc_1005AA9  +
push edi  +
push 2Eh  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
jmp loc_1005A70  +
cmp [ebp+arg_4] ebx +
jnz loc_1005ABD  +
mov eax ds:_iob +
add eax 20h +
mov dword_101AD00 eax +
jmp loc_1005AEE  +
lea eax [ebp+var_204] +
push eax  +
push edi  +
call sub_1009DAC  +
mov dword_101AD00 eax +
cmp eax ebx +
jnz loc_1005ADE  +
lea eax [ebp+var_204] +
push eax  +
push 0Ch  +
jmp loc_1005A9D  +
push edi  +
push offset aS_3  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
mov eax dword_1016654 +
cmp [eax+8] ebx +
jnz loc_1005AFD  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov eax [eax+8] +
push 1  +
mov esi offset unk_1016640 +
push esi  +
lea ecx [ebp+var_104] +
push ecx  +
push 0FF03h  +
add eax 20h +
push 1  +
push eax  +
call sub_100B498  +
mov edi eax +
cmp edi ebx +
jz loc_1005B41  +
push edi  +
call sub_1009E26  +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push 30h  +
push 2  +
call sub_100BD21  +
add esp 10h +
jmp loc_1005B65  +
push esi  +
push 35h  +
push dword_101AD00  +
call sub_100A15A  +
lea eax [ebp+var_104] +
push eax  +
push esi  +
lea eax [ebp+var_304] +
push eax  +
call sub_1005736  +
mov edi eax +
cmp [ebp+arg_4] ebx +
jz loc_1005B7D  +
push dword_101AD00  +
call ds:fclose  +
pop ecx  +
mov dword_101AD00 ebx +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 8  +
***
mov cl byte_10119A2 +
push esi  +
mov eax offset byte_10119A2 +
push edi  +
mov dword_1014BA4 eax +
mov esi offset dword_1014BA8 +
mov edx eax +
xor edi edi +
jmp loc_1005BBB  +
cmp cl 2Eh +
jnz loc_1005BB8  +
inc edi  +
inc edx  +
mov cl [edx] +
test cl cl +
jnz loc_1005BB2  +
jmp loc_1005BDB  +
cmp esi offset unk_1014BB0 +
jnb loc_1005BE0  +
push 2Eh  +
push eax  +
call ds:strchr  +
inc eax  +
pop ecx  +
mov [esi] eax +
add esi 4 +
pop ecx  +
dec edi  +
cmp edi 2 +
jge loc_1005BC1  +
and dword ptr [esi] 0 +
or dword_1011970 1 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 31FFh  +
push [ebp+arg_0]  +
mov esi offset byte_10119A2 +
push 3200h  +
push esi  +
call strncpy_s  +
mov edi ds:strchr +
push 0Ah  +
push esi  +
call edi  +
xor ebx ebx +
add esp 18h +
cmp eax ebx +
jz loc_1005C28  +
mov [eax] bl +
xor ecx ecx +
mov eax esi +
mov dword_1014BA4 esi +
mov esi offset dword_1014BA8 +
cmp byte_10119A2 bl +
jz loc_1005C63  +
cmp esi offset unk_1014C6C +
jnb loc_1005C63  +
cmp byte ptr [eax] 2Fh +
jnz loc_1005C53  +
xor ecx ecx +
mov [eax] bl +
inc ecx  +
jmp loc_1005C5E  +
cmp ecx ebx +
jz loc_1005C5E  +
mov [esi] eax +
add esi 4 +
xor ecx ecx +
inc eax  +
cmp [eax] bl +
jnz loc_1005C3F  +
push 2Fh  +
push dword ptr [esi-4]  +
call edi  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1005C72  +
mov [eax] bl +
pop edi  +
mov [esi] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ds:_iob +
sub esp 14h +
push dword_1016654  +
add eax 20h +
push 2Bh  +
push eax  +
call sub_100A15A  +
cmp dword_1016650 0 +
jz loc_1005CBC  +
mov eax ds:_iob +
push offset unk_101AA40  +
push 23h  +
add eax 20h +
push eax  +
call sub_100A15A  +
cmp dword_1014C74 0 +
mov ecx offset byte_1001253 +
mov eax offset aNo +
mov [ebp+var_4] ecx +
jnz loc_1005CD5  +
mov [ebp+var_4] eax +
mov edx dword_1011970 +
mov [ebp+var_8] ecx +
test dl 20h +
jnz loc_1005CE6  +
mov [ebp+var_8] eax +
mov [ebp+var_C] ecx +
test dl 8 +
jnz loc_1005CF1  +
mov [ebp+var_C] eax +
mov [ebp+var_10] ecx +
test edx edx +
js loc_1005CFB  +
mov [ebp+var_10] eax +
mov [ebp+var_14] ecx +
test dl 40h +
jnz loc_1005D06  +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
test edx 200h +
jnz loc_1005D15  +
mov ebx eax +
mov edi ecx +
test dl dl +
js loc_1005D1D  +
mov edi eax +
mov esi ecx +
test dl 2 +
jnz loc_1005D26  +
mov esi eax +
push hostlong  +
push [ebp+var_4]  +
push offset byte_10119A2  +
push offset aA_rootServers_  +
push dword_101196C  +
push dword_1011968  +
push dword_101018C  +
call sub_100BDD5  +
push eax  +
push dword_1010188  +
call sub_100A010  +
push eax  +
movzx eax word_10118E0 +
push eax  +
push [ebp+var_8]  +
push [ebp+var_C]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push ebx  +
push edi  +
push esi  +
push 63h  +
push 1  +
call sub_100BD21  +
push dword_1014BA4  +
mov esi ds:printf +
push offset aSrchlistS  +
call esi  +
mov eax dword_1014BA8 +
add esp 50h +
mov edi offset dword_1014BA8 +
jmp loc_1005DB1  +
push eax  +
push 2Fh  +
push offset aCS  +
call esi  +
add esp 0Ch +
add edi 4 +
mov eax [edi] +
test eax eax +
jnz loc_1005D9F  +
mov esi ds:putchar +
push 0Ah  +
call esi  +
push 0Ah  +
call esi  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_100BD21  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ds:isspace +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
jmp loc_1005E07  +
inc edi  +
movsx eax byte ptr [edi] +
push eax  +
call ebx  +
pop ecx  +
test eax eax +
jnz loc_1005E06  +
mov esi ds:strncmp +
push 4  +
push offset aSet  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005E2F  +
add edi 4 +
jmp loc_1005E2F  +
inc edi  +
movsx eax byte ptr [edi] +
push eax  +
call ebx  +
pop ecx  +
test eax eax +
jnz loc_1005E2E  +
cmp byte ptr [edi] 0 +
jnz loc_1005E52  +
push 36h  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_10063AF  +
push 3  +
push offset aAll  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1005E74  +
push 3  +
push offset aAll_0  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005E7E  +
call sub_1005C80  +
jmp loc_10063AD  +
push 2  +
push offset aD2  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005E9E  +
or dword_1011970 80000002h +
jmp loc_10063AD  +
push 4  +
push offset aNod2  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005ECA  +
and dword_1011970 7FFFFFFFh +
push offset aD2ModeDisabled  +
call ds:printf  +
pop ecx  +
jmp loc_10063AD  +
push 3  +
push offset aDef  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005EEA  +
or dword_1011970 80h +
jmp loc_10063AD  +
push 5  +
pop ebx  +
push ebx  +
push offset aNodef  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005F0C  +
and dword_1011970 0FFFFFF7Fh +
jmp loc_10063AD  +
push 2  +
push offset aDo  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005F4F  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
push offset byte_10119A2  +
inc eax  +
push offset aS  +
push eax  +
call ds:sscanf  +
add esp 0Ch +
call sub_1005B95  +
jmp loc_10063AD  +
push 1  +
push offset aDeb  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005F6C  +
or dword_1011970 2 +
jmp loc_10063AD  +
push ebx  +
push offset aNodeb  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005F8B  +
and dword_1011970 7FFFFFFDh +
jmp loc_10063AD  +
push 2  +
push offset aIg  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005FA8  +
or dword_1011970 20h +
jmp loc_10063AD  +
push 4  +
push offset aNoig  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005FC5  +
and dword_1011970 0FFFFFFDFh +
jmp loc_10063AD  +
push 2  +
push offset aPo  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1005FF8  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
push offset word_10118E0  +
push offset aHu  +
jmp loc_10062F1  +
push 1  +
push offset aQ  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_100634E  +
push 2  +
push offset aTy  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_100634E  +
push 2  +
push offset aCl  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_100609C  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
mov ecx eax +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100604B  +
sub ecx esi +
cmp ecx 100h +
jnb loc_1006373  +
lea ecx [ebp+var_104] +
push ecx  +
inc eax  +
push offset aS  +
push eax  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_10063AD  +
push dword_101018C  +
lea eax [ebp+var_104] +
push eax  +
call sub_1009EC6  +
mov dword_101018C eax +
jmp loc_10063AD  +
push 3  +
push offset aRec  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_10060B9  +
or dword_1011970 40h +
jmp loc_10063AD  +
push ebx  +
push offset aNorec  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_10060D5  +
and dword_1011970 0FFFFFFBFh +
jmp loc_10063AD  +
push 3  +
push offset aRet  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1006131  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
lea ecx [ebp+var_108] +
push ecx  +
inc eax  +
push offset aD_0  +
push eax  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_10063AD  +
mov eax [ebp+var_108] +
test eax eax +
jl loc_10063AD  +
mov dword_101196C eax +
jmp loc_10063AD  +
push 2  +
push offset aRo  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_100617E  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
mov ecx eax +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100615A  +
sub ecx esi +
cmp ecx 100h +
jnb loc_1006373  +
push offset aA_rootServers_  +
push offset aS  +
jmp loc_10062F1  +
push 3  +
push offset aSea  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_100619E  +
or dword_1011970 200h +
jmp loc_10063AD  +
push ebx  +
push offset aNosea  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_10061BD  +
and dword_1011970 0FFFFFDFFh +
jmp loc_10063AD  +
push ebx  +
push offset aSrchl  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_10061EC  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
inc eax  +
push eax  +
call sub_1005BF2  +
jmp loc_10063AD  +
push 2  +
push offset aTi  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1006248  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
lea ecx [ebp+var_108] +
push ecx  +
inc eax  +
push offset aD_0  +
push eax  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_10063AD  +
mov eax [ebp+var_108] +
test eax eax +
jl loc_10063AD  +
mov dword_1011968 eax +
jmp loc_10063AD  +
push 1  +
push offset aV  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1006265  +
or dword_1011970 8 +
jmp loc_10063AD  +
push 3  +
push offset aNov  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1006282  +
and dword_1011970 0FFFFFFF7h +
jmp loc_10063AD  +
mov esi ds:_strnicmp +
push ebx  +
push offset aMsxfr  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_10062A7  +
mov dword_1014C74 1 +
jmp loc_10063AD  +
push 4  +
push offset aNoms  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_10062C3  +
and dword_1014C74 eax +
jmp loc_10063AD  +
push 4  +
push offset aIxfr  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1006301  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
push offset hostlong  +
push offset aD_0  +
inc eax  +
push eax  +
call ds:sscanf  +
add esp 0Ch +
jmp loc_10063AD  +
push ebx  +
push offset aBase64  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_1006320  +
or dword_1011970 4000h +
jmp loc_10063AD  +
push ebx  +
push offset aNobase64  +
push edi  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_100633C  +
and dword_1011970 0FFFFBFFFh +
jmp loc_10063AD  +
push edi  +
push 37h  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
jmp loc_1005E4A  +
push 3Dh  +
push edi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063AD  +
mov ecx eax +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_1006362  +
sub ecx esi +
cmp ecx 100h +
jb loc_100637A  +
push 2Fh  +
jmp loc_1005E41  +
lea ecx [ebp+var_104] +
push ecx  +
inc eax  +
push offset aS  +
push eax  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_10063AD  +
push dword_1010188  +
lea eax [ebp+var_104] +
push eax  +
call sub_1009F52  +
mov dword_1010188 eax +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push offset aHome  +
call ds:getenv  +
pop ecx  +
test eax eax +
jz loc_100647A  +
push ebx  +
push esi  +
push eax  +
mov esi 101h +
lea eax [ebp+var_108] +
push esi  +
push eax  +
call strcpy_s  +
push offset a_nslookuprc  +
lea eax [ebp+var_108] +
push esi  +
push eax  +
call strcat_s  +
lea eax [ebp+var_108] +
push offset aR  +
push eax  +
call ds:fopen  +
mov ebx eax +
add esp 20h +
test ebx ebx +
jz loc_1006478  +
push edi  +
mov edi ds:fgets +
jmp loc_100645D  +
lea eax [ebp+var_108] +
push 0Ah  +
push eax  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006451  +
mov byte ptr [eax] 0 +
lea eax [ebp+var_108] +
push eax  +
call sub_1005DE3  +
push ebx  +
lea eax [ebp+var_108] +
push esi  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1006439  +
push ebx  +
call ds:fclose  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100CC5F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
push esi  +
push esi  +
push 1  +
push esi  +
mov [ebp+var_10] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
call ds:HeapSetInformation  +
push esi  +
call ds:SetThreadUILanguage  +
cmp [ebp+arg_0] 2 +
mov ebx [ebp+arg_4] +
jnz loc_1006504  +
mov eax [ebx+4] +
push 2  +
mov edi offset a?_1 +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jz loc_10064FF  +
push 3  +
mov edi offset a?_0 +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jz loc_10064FF  +
push 3  +
mov edi offset a? +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jz loc_10064FF  +
mov esi eax +
push 6  +
mov edi offset aHelp +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_1006504  +
call sub_100556C  +
push offset stru_101AA60  +
push 202h  +
xor edi edi +
call ds:WSAStartup  +
cmp eax 0FFFFFFFFh +
jnz loc_1006529  +
call ds:WSAGetLastError  +
push eax  +
push 26h  +
call sub_100BD97  +
call sub_100C33D  +
cmp eax 0FFFFFFFFh +
jnz loc_100654A  +
push 27h  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
mov [ebp+var_4] 1 +
jmp loc_10069C6  +
push 10h  +
push 1  +
call sub_1009D5C  +
mov dword_1016654 eax +
cmp eax edi +
jnz loc_1006568  +
mov [ebp+var_4] 0Eh +
jmp loc_10069C6  +
call sub_10063C5  +
mov esi [ebp+arg_0] +
jmp loc_1006585  +
mov eax [ebx] +
cmp byte ptr [eax] 2Dh +
jnz loc_100658B  +
inc eax  +
cmp byte ptr [eax] 0 +
jz loc_100658B  +
push eax  +
call sub_1005DE3  +
add ebx 4 +
dec esi  +
jnz loc_1006572  +
cmp esi 2 +
jg loc_10064FF  +
cmp esi edi +
jz loc_10065A2  +
mov eax [ebx] +
cmp byte ptr [eax] 2Dh +
jz loc_10065A2  +
mov [ebp+var_10] eax +
cmp esi 2 +
jnz loc_1006733  +
add ebx 4 +
push dword ptr [ebx]  +
lea eax [ebp+var_60] +
push eax  +
call sub_100D26A  +
test eax eax +
jz loc_10065E5  +
mov eax dword_1011978 +
cmp eax edi +
jz loc_1006684  +
push 10h  +
pop ecx  +
lea esi [ebp+var_60] +
mov edi eax +
movs   +
mov dword_1011974 1 +
xor edi edi +
jmp loc_1006684  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push edi  +
push dword ptr [ebx]  +
call ds:getaddrinfo  +
test eax eax +
jnz loc_100665F  +
cmp [ebp+var_8] edi +
jz loc_100665F  +
mov eax [ebp+var_8] +
xor esi esi +
cmp eax edi +
jz loc_100664B  +
cmp [eax+18h] edi +
jz loc_100663F  +
cmp esi dword_1011974 +
jb loc_100662A  +
push 40h  +
call ds:malloc  +
pop ecx  +
mov dword_1011978[esi*4] eax +
cmp eax edi +
jz loc_100655C  +
mov eax [ebp+var_8] +
push edi  +
push edi  +
push edi  +
push dword ptr [eax+18h]  +
push dword_1011978[esi*4]  +
call sub_100D45D  +
mov eax [ebp+var_8] +
mov eax [eax+1Ch] +
inc esi  +
cmp esi 0Ah +
jb loc_1006601  +
push [ebp+var_8]  +
mov dword_1011974 esi +
call ds:freeaddrinfo  +
mov [ebp+var_8] edi +
jmp loc_1006684  +
push dword ptr [ebx]  +
push 28h  +
push 2  +
call sub_100BD21  +
mov eax ds:_iob +
add eax 40h +
push eax  +
push 0Ah  +
call ds:fputc  +
add esp 14h +
mov dword_1011974 edi +
cmp dword_1011974 edi +
jz loc_1006733  +
mov eax dword_1011978 +
push dword_1016654  +
mov dword_1016658 eax +
push eax  +
push eax  +
call sub_100B278  +
test eax eax +
jz loc_1006940  +
push dword_1016658  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov [ebp+arg_0] edi +
call sub_100D36E  +
push 0Ch  +
call ds:malloc  +
pop ecx  +
mov ecx dword_1016654 +
mov [ecx] eax +
mov eax dword_1016654 +
cmp [eax] edi +
jz loc_100655C  +
push offset aUnknown  +
push 0Ch  +
push dword ptr [eax]  +
call strcpy_s  +
add esp 0Ch +
push 1  +
call sub_100D675  +
mov ecx dword_1016654 +
mov [ecx+8] eax +
mov eax dword_1016654 +
cmp [eax+8] edi +
jz loc_100655C  +
push 1  +
push dword ptr [eax+8]  +
call sub_100D5A5  +
mov eax dword_1016654 +
push edi  +
push edi  +
push dword_1016658  +
push dword ptr [eax+8]  +
call sub_100D76B  +
jmp loc_1006940  +
push edi  +
push edi  +
push 1030h  +
mov [ebp+var_1C] edi +
call DnsQueryConfigAllocEx  +
mov ebx eax +
cmp ebx edi +
jz loc_10068BB  +
mov eax dword_1011974 +
mov dword_1011974 edi +
mov esi [ebx+4] +
mov [ebp+var_18] edi +
mov [ebp+var_14] edi +
mov [ebp+var_20] eax +
mov [ebp+arg_0] edi +
cmp esi edi +
jbe loc_1006794  +
lea edi [ebx+28h] +
cmp word ptr [edi-8] 17h +
jnz loc_100678B  +
push edi  +
call sub_1005525  +
test eax eax +
jz loc_100678B  +
inc [ebp+arg_0]  +
add edi 40h +
cmp [ebp+arg_0] esi +
jb loc_100676D  +
jmp loc_1006792  +
mov [ebp+var_14] 1 +
xor edi edi +
mov [ebp+arg_0] edi +
cmp esi edi +
jbe loc_10068A7  +
lea eax [ebx+20h] +
mov [ebp+var_C] eax +
cmp [ebp+var_14] edi +
jz loc_10067C4  +
mov eax [ebp+var_C] +
cmp word ptr [eax] 17h +
jnz loc_10067C4  +
add eax 8 +
push eax  +
call sub_1005525  +
test eax eax +
jnz loc_1006894  +
cmp [ebp+var_18] edi +
jnz loc_1006802  +
mov eax [ebp+var_C] +
push dword_1016654  +
mov dword_1016658 eax +
push eax  +
push eax  +
call sub_100B278  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+var_1C] eax +
jnz loc_10067FB  +
push dword_1016658  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
mov [ebp+var_18] edi +
call sub_100D36E  +
mov [ebp+var_18] 1 +
cmp dword_1011974 0Ah +
jnb loc_10068A7  +
mov eax [ebp+var_20] +
cmp dword_1011974 eax +
jb loc_1006842  +
push 40h  +
call ds:malloc  +
pop ecx  +
mov ecx dword_1011974 +
mov dword_1011978[ecx*4] eax +
mov eax dword_1011974 +
cmp dword_1011978[eax*4] edi +
jz loc_1006971  +
mov eax dword_1011974 +
mov edi dword_1011978[eax*4] +
mov esi [ebp+var_C] +
push 10h  +
pop ecx  +
movs   +
mov eax dword_1011974 +
mov eax dword_1011978[eax*4] +
cmp word ptr [eax] 2 +
jnz loc_1006871  +
mov ecx 3500h +
mov [eax+2] cx +
mov eax dword_1011974 +
mov eax dword_1011978[eax*4] +
cmp word ptr [eax] 17h +
jnz loc_100688C  +
mov ecx 3500h +
mov [eax+2] cx +
inc dword_1011974  +
xor edi edi +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add [ebp+var_C] 40h +
cmp eax [ebx+4] +
jb loc_10067A5  +
push 1030h  +
push ebx  +
call DnsFreeConfigStructure  +
cmp [ebp+var_1C] edi +
jnz loc_1006940  +
mov eax dword_1011978 +
push 0Ch  +
mov dword_1016658 eax +
call ds:malloc  +
pop ecx  +
mov ecx dword_1016654 +
mov [ecx] eax +
mov eax dword_1016654 +
cmp [eax] edi +
jz loc_100655C  +
push offset aUnknown  +
push 0Ch  +
push dword ptr [eax]  +
call strcpy_s  +
add esp 0Ch +
push 1  +
call sub_100D675  +
mov ecx dword_1016654 +
mov [ecx+8] eax +
mov eax dword_1016654 +
cmp [eax+8] edi +
jz loc_100655C  +
push 1  +
push dword ptr [eax+8]  +
call sub_100D5A5  +
mov eax dword_1016654 +
push edi  +
push edi  +
push dword_1016658  +
push dword ptr [eax+8]  +
call sub_100D76B  +
cmp ebx edi +
jnz loc_1006940  +
push 2Ah  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
mov eax dword_1016654 +
cmp [eax] edi +
jz loc_100655C  +
push dword ptr [eax]  +
push 100h  +
push offset unk_101AC00  +
call strcpy_s  +
add esp 0Ch +
cmp [ebp+var_10] edi +
jz loc_1006981  +
push edi  +
push [ebp+var_10]  +
call sub_10058A3  +
jmp loc_10069C6  +
push 1030h  +
push ebx  +
call DnsFreeConfigStructure  +
jmp loc_100655C  +
push dword_1016654  +
mov eax ds:_iob +
push 2Bh  +
add eax 20h +
push eax  +
call sub_100A15A  +
mov esi ds:printf +
mov edi offset asc_1001358 +
push edi  +
call esi  +
mov ebx ds:fflush +
jmp loc_10069B0  +
push edi  +
call esi  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
call loc_1006F1D  +
test eax eax +
jnz loc_10069AD  +
cmp [ebp+var_8] 0 +
jz loc_10069D5  +
push [ebp+var_8]  +
call ds:freeaddrinfo  +
mov eax dword_1016654 +
test eax eax +
jz loc_10069E4  +
push eax  +
call sub_100A48C  +
xor esi esi +
cmp dword_1011974 esi +
jbe loc_1006A0A  +
mov eax dword_1011978[esi*4] +
test eax eax +
jz loc_1006A01  +
push eax  +
call ds:free  +
pop ecx  +
inc esi  +
cmp esi dword_1011974 +
jb loc_10069EE  +
push [ebp+var_4]  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1006A33  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1006A3E  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov eax dword_1016674 +
mov eax [eax+1Ch] +
add eax dword_101667C +
push esi  +
mov esi dword_101AA38 +
cmp esi dword_1016678 +
jnb loc_1006AE8  +
push ebx  +
push edi  +
mov cl [esi] +
test cl cl +
jz loc_1006A7C  +
movzx ecx cl +
mov bl byte_1010300[ecx*4] +
jmp loc_1006A7E  +
mov bl 1 +
lea ecx [eax+eax] +
cmp word_1010198[ecx] 0 +
jz loc_1006AB0  +
mov dword_1016670 eax +
mov dword_1016664 esi +
jmp loc_1006AB0  +
movsx eax word_1010920[ecx] +
cmp eax 0B2h +
jl loc_1006AAD  +
mov bl byte_1010700[edx*4] +
lea ecx [eax+eax] +
movsx edi word_1010778[ecx] +
movzx edx bl +
add edi edx +
movsx edi word_1010FF8[edi*2] +
cmp edi eax +
jnz loc_1006A98  +
movsx eax word_1010778[eax*2] +
movzx ecx bl +
add eax ecx +
movsx eax word_1010AC8[eax*2] +
inc esi  +
cmp esi dword_1016678 +
jb loc_1006A6A  +
pop edi  +
pop ebx  +
pop esi  +
retn   +
***
lea eax [ecx+ecx] +
cmp word_1010198[eax] 0 +
push esi  +
mov dl 1 +
jz loc_1006B11  +
mov esi dword_1016678 +
mov dword_1016670 ecx +
mov dword_1016664 esi +
movsx esi word_1010778[eax] +
movsx esi word_1010FFA[esi*2] +
cmp esi ecx +
jz loc_1006B5A  +
push edi  +
movsx ecx word_1010920[eax] +
cmp ecx 0B2h +
jl loc_1006B3E  +
movzx eax dl +
mov dl byte_1010700[eax*4] +
lea eax [ecx+ecx] +
movsx esi word_1010778[eax] +
movzx edi dl +
add esi edi +
movsx esi word_1010FF8[esi*2] +
cmp esi ecx +
jnz loc_1006B25  +
pop edi  +
movsx eax word_1010778[ecx*2] +
movzx ecx dl +
add eax ecx +
movsx ecx word_1010AC8[eax*2] +
mov eax ecx +
sub eax 0B1h +
neg eax  +
sbb eax eax +
and eax ecx +
pop esi  +
retn   +
***
mov eax dword_1016674 +
mov ecx [eax+10h] +
mov dword_1016668 ecx +
mov ecx [eax+8] +
mov dword_101AA38 ecx +
mov eax [eax] +
mov dword_1016680 eax +
mov al [ecx] +
mov dword_1016678 ecx +
mov byte_1016660 al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz loc_1006BED  +
mov edx [eax+4] +
mov [eax+10h] ecx +
mov [edx] cl +
mov edx [eax+4] +
mov [edx+1] cl +
mov edx [eax+4] +
mov [eax+8] edx +
mov dword ptr [eax+1Ch] 1 +
mov [eax+24h] ecx +
cmp eax dword_1016674 +
jnz loc_1006BED  +
call sub_1006B83  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax ds:_iob +
add eax 40h +
push offset aS_4  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
push 2  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_1006BB4  +
mov eax [ebp+arg_4] +
mov [esi] eax +
xor eax eax +
inc eax  +
mov [esi+20h] eax +
mov [esi+18h] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFDh +
jb loc_1006C74  +
xor eax eax +
jmp loc_1006CB2  +
push esi  +
push 28h  +
call sub_1006C23  +
mov esi eax +
test esi esi +
jnz loc_1006C8C  +
push offset aOutOfDynamicMe  +
call sub_1006BF6  +
mov [esi+0Ch] edi +
add edi 2 +
push edi  +
call sub_1006C23  +
mov [esi+4] eax +
test eax eax +
jz loc_1006C82  +
push [ebp+arg_0]  +
mov dword ptr [esi+14h] 1 +
push esi  +
call sub_1006C3B  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1016674 +
test eax eax +
jnz loc_1006CDF  +
push 4000h  +
push dword_1016680  +
call sub_1006C62  +
mov dword_1016674 eax +
push [ebp+arg_0]  +
push eax  +
call sub_1006C3B  +
call sub_1006B83  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1016668 +
mov ecx dword_101AA38 +
push ebx  +
push esi  +
mov esi dword_1016674 +
mov edx [esi+4] +
lea ebx [edx+eax+1] +
mov eax dword_1016678 +
push edi  +
mov edi ecx +
cmp eax ebx +
jbe loc_1006D2D  +
push offset aFatalFlexScann  +
call sub_1006BF6  +
cmp dword ptr [esi+20h] 0 +
jnz loc_1006D45  +
sub eax ecx +
xor ecx ecx +
cmp eax 1 +
setnz cl  +
inc ecx  +
mov eax ecx +
jmp loc_1006F13  +
mov ebx eax +
sub ebx ecx +
dec ebx  +
test ebx ebx +
jle loc_1006D5C  +
mov [ebp+var_4] ebx +
mov cl [edi] +
mov [edx] cl +
inc edx  +
inc edi  +
dec [ebp+var_4]  +
jnz loc_1006D51  +
cmp dword ptr [esi+24h] 2 +
jnz loc_1006D71  +
xor eax eax +
mov dword_1016668 eax +
mov [esi+10h] eax +
jmp loc_1006ECA  +
mov edi [esi+0Ch] +
sub edi ebx +
dec edi  +
xor edx edx +
jmp loc_1006DE4  +
mov edi [esi+4] +
sub eax edi +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp [esi+14h] edx +
jz loc_1006DC4  +
mov eax [esi+0Ch] +
lea ecx [eax+eax] +
cmp ecx edx +
jg loc_1006D9C  +
mov ecx eax +
shr ecx 3 +
add ecx eax +
lea eax [ebp+var_4] +
push eax  +
push 2  +
push ecx  +
mov [esi+0Ch] ecx +
call sub_1006A19  +
test eax eax +
jl loc_1006E62  +
push [ebp+var_4]  +
push edi  +
call ds:realloc  +
pop ecx  +
pop ecx  +
mov [esi+4] eax +
jmp loc_1006DC7  +
mov [esi+4] edx +
mov eax [esi+4] +
xor edx edx +
cmp eax edx +
jz loc_1006E6C  +
mov ecx [ebp+var_8] +
mov edi [esi+0Ch] +
add eax ecx +
sub edi ebx +
mov dword_1016678 eax +
dec edi  +
cmp edi edx +
jle loc_1006D7B  +
mov eax 2000h +
cmp edi eax +
jle loc_1006DF3  +
mov edi eax +
cmp [esi+18h] edx +
jz loc_1006E86  +
cmp edi edx +
mov [ebp+var_4] edx +
jle loc_1006E7C  +
push dword_1016680  +
call ds:getc  +
mov esi dword_1016674 +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1006E31  +
cmp eax 0Ah +
jz loc_1006E36  +
mov ecx [esi+4] +
add ecx [ebp+var_4] +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
mov [ecx+ebx] al +
jl loc_1006E03  +
cmp eax 0Ah +
jnz loc_1006E42  +
mov ecx [esi+4] +
add ecx [ebp+var_4] +
inc [ebp+var_4]  +
mov [ecx+ebx] al +
cmp eax 0FFFFFFFFh +
jnz loc_1006E7C  +
push dword_1016680  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_1006E76  +
push offset aInputInFlexSca  +
jmp loc_1006D28  +
push offset aIntegerOverflo  +
jmp loc_1006D28  +
push offset aFatalErrorScan  +
jmp loc_1006D28  +
mov esi dword_1016674 +
mov eax [ebp+var_4] +
mov dword_1016668 eax +
jmp loc_1006EC3  +
push dword_1016680  +
mov eax [esi+4] +
push edi  +
add eax ebx +
push 1  +
push eax  +
call ds:fread  +
add esp 10h +
mov dword_1016668 eax +
test eax eax +
jnz loc_1006EBD  +
push dword_1016680  +
call ds:ferror  +
pop ecx  +
test eax eax +
jnz loc_1006E58  +
mov eax dword_1016668 +
mov esi dword_1016674 +
mov [esi+10h] eax +
test eax eax +
jnz loc_1006EF1  +
test ebx ebx +
jnz loc_1006EE9  +
push dword_1016680  +
xor edi edi +
inc edi  +
call sub_1006CBC  +
mov esi dword_1016674 +
mov eax dword_1016668 +
jmp loc_1006EF3  +
push 2  +
pop edi  +
mov [esi+24h] edi +
jmp loc_1006EF3  +
xor edi edi +
mov ecx [esi+4] +
add eax ebx +
mov byte ptr [eax+ecx] 0 +
mov ecx [esi+4] +
mov byte ptr [eax+ecx+1] 0 +
mov dword_1016668 eax +
mov eax [esi+4] +
mov dword_101AA38 eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
cmp dword_1010190 ecx +
jz loc_1006F94  +
mov dword_1010190 ecx +
cmp dword_101667C ecx +
jnz loc_1006F49  +
mov dword_101667C 1 +
mov eax ds:_iob +
cmp dword_1016680 ecx +
jnz loc_1006F5B  +
mov dword_1016680 eax +
cmp dword_1016684 ecx +
jnz loc_1006F6B  +
add eax 20h +
mov dword_1016684 eax +
mov edi dword_1016674 +
cmp edi ecx +
jnz loc_1006F8D  +
push 4000h  +
push dword_1016680  +
call sub_1006C62  +
mov edi eax +
mov dword_1016674 edi +
call sub_1006B83  +
jmp loc_1006F9A  +
mov edi dword_1016674 +
mov cl byte_1016660 +
mov esi dword_1016678 +
mov [esi] cl +
mov eax [edi+1Ch] +
add eax dword_101667C +
mov ebx esi +
movzx ecx byte ptr [esi] +
mov dl byte_1010300[ecx*4] +
lea ecx [eax+eax] +
cmp word_1010198[ecx] 0 +
mov [ebp-1] dl +
mov [ebp-8] ecx +
jz loc_1006FDB  +
mov dword_1016670 eax +
mov dword_1016664 esi +
movzx edx dl +
jmp loc_1007005  +
mov eax [ebp-8] +
movsx eax word_1010920[eax] +
cmp eax 0B2h +
jl loc_1006FFB  +
mov cl byte_1010700[edx*4] +
mov [ebp-1] cl +
movzx edx byte ptr [ebp-1] +
lea ecx [eax+eax] +
mov [ebp-8] ecx +
movsx ecx word_1010778[ecx] +
add ecx edx +
movsx ecx word_1010FF8[ecx*2] +
cmp ecx eax +
jnz loc_1006FE0  +
movsx eax word_1010778[eax*2] +
movzx ecx byte ptr [ebp-1] +
add eax ecx +
movsx eax word_1010AC8[eax*2] +
mov ecx 27Ah +
inc esi  +
cmp word_1010778[eax*2] cx +
jnz loc_1006FB3  +
movsx eax word_1010198[eax*2] +
test eax eax +
jnz loc_1007063  +
mov eax dword_1016670 +
mov esi dword_1016664 +
movsx eax word_1010198[eax*2] +
mov ecx esi +
sub ecx ebx +
mov dword_101AA38 ebx +
mov dword_101AA3C ecx +
mov cl [esi] +
mov byte_1016660 cl +
mov byte ptr [esi] 0 +
mov dword_1016678 esi +
mov edx dword_101AA38 +
cmp eax 19h +
ja loc_100772E  +
jmp ds:off_1007739[eax*4]  +
mov eax esi +
sub eax edx +
dec eax  +
mov [esi] cl +
cmp dword ptr [edi+24h] 0 +
mov [ebp-8] eax +
jnz loc_10070C0  +
mov eax [edi+10h] +
mov dword_1016668 eax +
mov eax dword_1016680 +
mov [edi] eax +
mov dword ptr [edi+24h] 1 +
mov eax [edi+4] +
add eax dword_1016668 +
cmp dword_1016678 eax +
jbe loc_100714F  +
call sub_1006CF6  +
sub eax 0 +
jz loc_1007182  +
dec eax  +
jnz loc_1007123  +
and dword_101666C eax +
mov eax dword_101AA38 +
mov edi dword_1016674 +
mov cl byte_1016660 +
mov dword_1016678 eax +
mov eax dword_101667C +
dec eax  +
cdq   +
sub eax edx +
sar eax 1 +
add eax 19h +
jmp loc_1007084  +
***
mov eax dword_1016670 +
mov [esi] cl +
mov esi dword_1016664 +
jmp loc_1007044  +
***
dec eax  +
jnz loc_1006F94  +
mov edi dword_1016674 +
mov esi [edi+4] +
add esi dword_1016668 +
mov dword_1016678 esi +
call sub_1006A47  +
mov ebx dword_101AA38 +
mov [ebp-8] eax +
jmp loc_1007174  +
mov eax [ebp-8] +
mov ebx dword_101AA38 +
lea esi [ebx+eax] +
mov dword_1016678 esi +
call sub_1006A47  +
mov ecx eax +
mov [ebp-8] ecx +
call sub_1006AEF  +
test eax eax +
jnz loc_100717C  +
mov eax [ebp-8] +
jmp loc_1007044  +
***
inc esi  +
jmp loc_1006FB3  +
***
mov eax [ebp-8] +
mov ebx dword_101AA38 +
lea esi [ebx+eax] +
mov dword_1016678 esi +
call sub_1006A47  +
mov edi dword_1016674 +
mov [ebp-8] eax +
jmp loc_1006FB3  +
***
mov esi dword_101AA3C +
test esi esi +
jle loc_1006FA0  +
xor eax eax +
cmp byte ptr [esi+edx-1] 0Ah +
setz al  +
mov [edi+1Ch] eax +
jmp loc_1006FA0  +
***
mov eax dword_101AA3C +
test eax eax +
jle loc_10071E2  +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
mov eax dword_101AA3C +
push dword_1016684  +
push 1  +
push eax  +
push dword_101AA38  +
call ds:fwrite  +
add esp 10h +
jmp loc_1006F94  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_100723D  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 0  +
push dword_101AA38  +
call sub_1005585  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_1007290  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 1  +
jmp loc_100723F  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_10072D2  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
xor eax eax +
jmp loc_100724D  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_1007317  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 1  +
push offset aA_rootServers_  +
jmp loc_1007245  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_1007361  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 1  +
push dword_101AA38  +
call sub_1009585  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_10073B1  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 0  +
jmp loc_1007363  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_10073F3  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push dword_101AA38  +
call sub_10094EE  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_1007441  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 1  +
push dword_101AA38  +
call sub_1009B77  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_1007491  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 0  +
jmp loc_1007443  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_10074D3  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 1  +
push dword_101AA38  +
call sub_1009A61  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_1007523  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 0  +
jmp loc_10074D5  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_1007565  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push dword_101AA38  +
call sub_1005DE3  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_10075B3  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
call sub_1005DCF  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_10075FB  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 1  +
push dword_101AA38  +
call sub_10058A3  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_100764B  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 0  +
jmp loc_10075FD  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_100768D  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 1  +
push dword_101AA38  +
call sub_10059E9  +
jmp loc_100724A  +
***
mov [esi] cl +
dec esi  +
mov eax esi +
sub eax ebx +
mov dword_101AA3C eax +
mov dword_101AA38 ebx +
mov al [esi] +
mov byte_1016660 al +
mov byte ptr [esi] 0 +
mov eax dword_101AA3C +
mov dword_1016678 esi +
test eax eax +
jle loc_10076DD  +
mov edx dword_101AA38 +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push 0  +
jmp loc_100768F  +
***
mov eax dword_101AA3C +
test eax eax +
jle loc_100724A  +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
jmp loc_100724A  +
***
mov eax dword_101AA3C +
test eax eax +
jle loc_1007716  +
xor ecx ecx +
cmp byte ptr [eax+edx-1] 0Ah +
setz cl  +
mov [edi+1Ch] ecx +
push dword_101AA38  +
push offset aUnrecognizedCo  +
call ds:printf  +
pop ecx  +
pop ecx  +
jmp loc_100724A  +
***
push offset aFatalFlexSca_0  +
call sub_1006BF6  +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_108] ecx +
mov ebx 100h +
push ebx  +
lea ecx [ebp+var_104] +
push ecx  +
push esi  +
push eax  +
push edi  +
call sub_100BF88  +
mov [ebp+var_10C] eax +
test eax eax +
jge loc_100780A  +
sub esi edi +
push esi  +
push offset aInvalidNameAtO  +
push [ebp+var_108]  +
call ds:fprintf  +
add esp 0Ch +
xor eax eax +
jmp loc_1007862  +
cmp byte ptr [ebp+var_104] 0 +
jnz loc_1007828  +
push offset aRoot  +
lea eax [ebp+var_104] +
push ebx  +
push eax  +
call strcpy_s  +
add esp 0Ch +
cmp [ebp+arg_10] 0 +
lea eax [ebp+var_104] +
jz loc_100784B  +
push eax  +
push offset a30s  +
push [ebp+var_108]  +
call ds:fprintf  +
add esp 0Ch +
jmp loc_100785A  +
push [ebp+var_108]  +
push eax  +
call ds:fputs  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_10C] +
add eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10077A6  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10077A6  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
push 20h  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_100DF9E  +
neg eax  +
sbb eax eax +
and eax [ebp+arg_C] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9A0h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
push 7FFh  +
mov dword ptr [ebp+hostshort] eax +
lea eax [ebp+var_958+1] +
push 0  +
push eax  +
mov [ebp+var_974] ebx +
mov [ebp+var_97C] edi +
mov byte ptr [ebp+var_958] 0 +
call memset  +
add esp 0Ch +
push edi  +
push dword ptr [ebp+hostshort]  +
push ebx  +
push esi  +
call sub_1007878  +
mov ebx eax +
test ebx ebx +
jnz loc_1007964  +
push offset aNameTruncated?  +
push edi  +
call ds:fprintf  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1008551  +
push ebx  +
call sub_100C145  +
movzx eax ax +
inc ebx  +
inc ebx  +
push ebx  +
mov [ebp+var_988] eax +
call sub_100C145  +
movzx eax ax +
inc ebx  +
inc ebx  +
push ebx  +
mov [ebp+var_970] eax +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_994] eax +
call sub_100C145  +
mov ecx dword_1011970 +
mov esi ds:fprintf +
movzx eax ax +
mov [ebp+var_98C] eax +
inc ebx  +
mov eax ecx +
inc ebx  +
and eax 80000002h +
mov [ebp+var_984] eax +
jz loc_1007A1F  +
test ecx ecx +
jns loc_10079EE  +
push [ebp+var_98C]  +
push [ebp+var_970]  +
call sub_100BDD5  +
push eax  +
push [ebp+var_988]  +
call sub_100A010  +
push eax  +
push offset aTypeSClassSDle  +
push edi  +
call esi  +
add esp 14h +
cmp [ebp+var_988] 6 +
jnz loc_1007A14  +
push [ebp+var_994]  +
call sub_100BE2F  +
push eax  +
push [ebp+var_994]  +
push offset aTtlLuS  +
push edi  +
call esi  +
add esp 10h +
push edi  +
push 0Ah  +
call ds:putc  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_98C] +
lea eax [ebx+ecx] +
mov [ebp+var_978] eax +
mov eax [ebp+var_988] +
cmp eax 27h +
mov [ebp+var_99C] ebx +
jg loc_100833A  +
jz loc_100830B  +
dec eax  +
cmp eax 20h +
ja loc_10084DF  +
jmp ds:off_1008564[eax*4]  +
mov eax [ebp+var_970] +
dec eax  +
jz loc_1007A7F  +
sub eax 3 +
jz loc_1007A7F  +
push ecx  +
push [ebp+var_970]  +
push offset aAddressClassDL  +
push edi  +
call esi  +
add esp 10h +
jmp loc_10084F8  +
mov eax [ebx] +
cmp ecx 4 +
jnz loc_1007A9E  +
push eax  +
call ds:inet_ntoa  +
push eax  +
push offset aInternetAddres  +
push edi  +
call esi  +
add esp 0Ch +
jmp loc_1007CB9  +
cmp ecx 7 +
jnz loc_10084FE  +
push eax  +
call ds:inet_ntoa  +
push eax  +
push offset aInternetAddr_0  +
push edi  +
call esi  +
movsx eax byte ptr [ebx+4] +
push eax  +
push offset aProtocolD  +
push edi  +
call esi  +
movsx eax byte ptr [ebx+5] +
movsx ecx byte ptr [ebx+6] +
shl eax 8 +
add eax ecx +
push eax  +
push offset aPortD  +
push edi  +
call esi  +
add esp 24h +
add ebx 7 +
jmp loc_10084FE  +
push offset aCanonicalName  +
jmp loc_1008310  +
push ebx  +
call sub_100C145  +
movzx eax ax +
push eax  +
push offset aAfsdbSubtypeD  +
push edi  +
call esi  +
push offset aAfsDbServer  +
inc ebx  +
push edi  +
inc ebx  +
call esi  +
add esp 14h +
jmp loc_1008315  +
push offset aMailGroupMembe  +
jmp loc_1008310  +
push offset aMailBox  +
jmp loc_1008310  +
push offset aMailboxRename  +
jmp loc_1008310  +
push ebx  +
call sub_100C145  +
movzx eax ax +
push eax  +
push offset aMxPreferenceU  +
push edi  +
call esi  +
push offset aMailExchanger  +
jmp loc_1007B06  +
push offset aNameserver  +
jmp loc_1008310  +
push offset aName  +
jmp loc_1008310  +
movsx eax byte ptr [ebx] +
inc ebx  +
mov dword ptr [ebp+hostshort] eax +
test eax eax +
jz loc_1007B7F  +
push ebx  +
push eax  +
push offset aHinfoCpu_S  +
push edi  +
call esi  +
add esp 10h +
add ebx dword ptr [ebp+hostshort] +
movsx eax byte ptr [ebx] +
inc ebx  +
mov dword ptr [ebp+hostshort] eax +
test eax eax +
jz loc_10084FE  +
push ebx  +
push eax  +
push offset aOs_S  +
push edi  +
call esi  +
add esp 10h +
add ebx dword ptr [ebp+hostshort] +
jmp loc_10084FE  +
cmp [ebp+var_984] 0 +
jnz loc_1007BBD  +
push edi  +
push 0Ah  +
call ds:putc  +
pop ecx  +
pop ecx  +
push offset aPrimaryNameSer  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
push dword ptr [ebp+hostshort]  +
push [ebp+var_974]  +
push ebx  +
call sub_1007878  +
mov ebx eax +
test ebx ebx +
jz loc_100795D  +
push offset aResponsibleMai  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
push dword ptr [ebp+hostshort]  +
push [ebp+var_974]  +
push ebx  +
call sub_1007878  +
mov ebx eax +
test ebx ebx +
jz loc_100795D  +
push ebx  +
call sub_100C164  +
push eax  +
push offset aSerialLu  +
push edi  +
call esi  +
add esp 0Ch +
add ebx 4 +
push ebx  +
call sub_100C164  +
push eax  +
mov [ebp+var_974] eax +
call sub_100BE2F  +
push eax  +
push [ebp+var_974]  +
push offset aRefreshLuS  +
push edi  +
call esi  +
add esp 10h +
add ebx 4 +
push ebx  +
call sub_100C164  +
push eax  +
mov [ebp+var_974] eax +
call sub_100BE2F  +
push eax  +
push [ebp+var_974]  +
push offset aRetryLuS  +
push edi  +
call esi  +
add esp 10h +
add ebx 4 +
push ebx  +
call sub_100C164  +
push eax  +
mov [ebp+var_974] eax +
call sub_100BE2F  +
push eax  +
push [ebp+var_974]  +
push offset aExpireLuS  +
push edi  +
call esi  +
add esp 10h +
add ebx 4 +
push ebx  +
call sub_100C164  +
push eax  +
mov [ebp+var_974] eax +
call sub_100BE2F  +
push eax  +
push [ebp+var_974]  +
push offset aDefaultTtlLuS  +
push edi  +
call esi  +
add esp 10h +
add ebx 4 +
jmp loc_10084FE  +
cmp [ebp+var_984] 0 +
jnz loc_1007CD5  +
push edi  +
push 0Ah  +
call ds:putc  +
pop ecx  +
pop ecx  +
push offset aMinfoResponsib  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
push dword ptr [ebp+hostshort]  +
push [ebp+var_974]  +
push ebx  +
call sub_1007878  +
mov ebx eax +
push offset aErrorsToMailbo  +
jmp loc_1008310  +
push edi  +
push offset aText  +
call ds:fputs  +
pop ecx  +
pop ecx  +
jmp loc_1007D2F  +
movzx eax byte ptr [ebx] +
inc ebx  +
mov dword ptr [ebp+hostshort] eax +
test eax eax +
jz loc_1007D2F  +
push ebx  +
push eax  +
push offset a_S  +
push edi  +
call esi  +
add esp 10h +
add ebx dword ptr [ebp+hostshort] +
cmp ebx [ebp+var_978] +
jb loc_1007D0E  +
push edi  +
push offset asc_1001A78  +
call ds:fputs  +
jmp loc_1008333  +
cmp ecx 5 +
jb loc_10084FE  +
cmp [ebp+var_984] 0 +
jnz loc_1007D65  +
push edi  +
push 0Ah  +
call ds:putc  +
pop ecx  +
pop ecx  +
mov eax [ebx] +
mov [ebp+var_970] eax +
add ebx 4 +
movsx eax byte ptr [ebx] +
push eax  +
call ds:getprotobynumber  +
mov [ebp+var_984] eax +
test eax eax +
jz loc_1007D9D  +
push dword ptr [eax]  +
lea eax [ebp+var_14] +
push [ebp+var_970]  +
push eax  +
call sub_100D3FC  +
push eax  +
push offset aInetAddressSPr  +
jmp loc_1007DB6  +
movsx eax byte ptr [ebx] +
push eax  +
push [ebp+var_970]  +
lea eax [ebp+var_14] +
push eax  +
call sub_100D3FC  +
push eax  +
push offset aInetAddressS_0  +
push edi  +
call esi  +
add esp 10h +
inc ebx  +
and dword ptr [ebp+hostshort] 0 +
jmp loc_1007E33  +
movsx eax byte ptr [ebx] +
mov [ebp+var_970] eax +
inc ebx  +
test byte ptr [ebp+var_970] 80h +
jz loc_1007E1E  +
mov eax [ebp+var_984] +
test eax eax +
jz loc_1007DE7  +
mov eax [eax] +
jmp loc_1007DE9  +
xor eax eax +
push eax  +
push dword ptr [ebp+hostshort]  +
call ds:htons  +
movzx eax ax +
push eax  +
call ds:getservbyport  +
test eax eax +
jz loc_1007E0D  +
push dword ptr [eax]  +
push offset aS_8  +
jmp loc_1007E18  +
push dword ptr [ebp+hostshort]  +
push offset aD  +
push edi  +
call esi  +
add esp 0Ch +
shl [ebp+var_970] 1 +
inc dword ptr [ebp+hostshort]  +
test byte ptr [ebp+hostshort] 7 +
jnz loc_1007DD0  +
cmp ebx [ebp+var_978] +
jb loc_1007DC6  +
jmp loc_100832A  +
push ecx  +
push offset aNullDlenD  +
jmp loc_10084F2  +
movsx eax byte ptr [ebx] +
inc ebx  +
mov dword ptr [ebp+hostshort] eax +
test eax eax +
jz loc_10084FE  +
push ebx  +
push eax  +
push offset aX25X_121Addres  +
jmp loc_1007B98  +
push ebx  +
call sub_100C145  +
movzx eax ax +
push eax  +
push offset aRtPreferenceU  +
push edi  +
call esi  +
push offset aIntermediateHo  +
push edi  +
call esi  +
add esp 14h +
add ebx 2 +
jmp loc_1008315  +
movsx eax byte ptr [ebx] +
inc ebx  +
mov dword ptr [ebp+hostshort] eax +
test eax eax +
jz loc_1007EAF  +
push ebx  +
push eax  +
push offset aIsdnAddress_S  +
push edi  +
call esi  +
add esp 10h +
add ebx dword ptr [ebp+hostshort] +
cmp ebx [ebp+var_978] +
jnb loc_10084FE  +
movsx eax byte ptr [ebx] +
inc ebx  +
mov dword ptr [ebp+hostshort] eax +
test eax eax +
jz loc_10084FE  +
push ebx  +
push eax  +
push offset aSubaddress_S  +
jmp loc_1007B98  +
cmp [ebp+var_984] 0 +
jnz loc_1007EED  +
push edi  +
push 0Ah  +
call ds:putc  +
pop ecx  +
pop ecx  +
push offset aRpMailbox  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
push dword ptr [ebp+hostshort]  +
push [ebp+var_974]  +
push ebx  +
call sub_1007878  +
mov ebx eax +
push offset aTextLocation  +
jmp loc_1008310  +
cmp ecx 10h +
jz loc_1007F28  +
push offset aAaaaInvalidIpv  +
push edi  +
call esi  +
jmp loc_1008333  +
mov esi ebx +
lea edi [ebp+var_968] +
movs   +
movs   +
lea eax [ebp+var_968] +
movs   +
push eax  +
lea eax [ebp+var_58] +
push eax  +
movs   +
call sub_100D191  +
lea eax [ebp+var_58] +
push eax  +
push offset aAaaaIpv6Addres  +
push [ebp+var_97C]  +
add ebx 10h +
call ds:fprintf  +
add esp 0Ch +
mov edi [ebp+var_97C] +
mov esi ds:fprintf +
jmp loc_10084FE  +
push ebx  +
call sub_100C145  +
movzx eax ax +
inc ebx  +
inc ebx  +
push ebx  +
mov [ebp+var_984] eax +
call sub_100C145  +
inc ebx  +
movzx eax ax +
inc ebx  +
push ebx  +
mov [ebp+var_970] eax +
call sub_100C145  +
movzx eax ax +
push eax  +
movzx eax word ptr [ebp+var_970] +
push eax  +
movzx eax word ptr [ebp+var_984] +
push eax  +
push offset aSrvServiceLoca  +
jmp loc_1007E80  +
push offset aNxtNextDomainN  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
push dword ptr [ebp+hostshort]  +
push [ebp+var_974]  +
push ebx  +
call sub_1007878  +
mov ebx eax +
test ebx ebx +
jz loc_100795D  +
push offset aTypeBitmap  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
jmp loc_1007FF9  +
movzx eax byte ptr [ebx] +
push eax  +
push offset a02x  +
push edi  +
call esi  +
add esp 0Ch +
inc ebx  +
cmp ebx [ebp+var_978] +
jb loc_1007FE9  +
jmp loc_100832A  +
push 0FFh  +
lea eax [ebp+var_158+1] +
push 0  +
push eax  +
mov byte ptr [ebp+var_158] 0 +
call memset  +
add esp 0Ch +
push ebx  +
call sub_100C145  +
movzx ecx ax +
inc ebx  +
inc ebx  +
mov al [ebx] +
mov [ebp+var_97D] al +
inc ebx  +
mov al [ebx] +
mov [ebp+var_97E] al +
mov eax [ebp+var_978] +
inc ebx  +
sub eax ebx +
mov [ebp+var_970] eax +
movzx eax cx +
mov [ebp+var_984] ecx +
mov ecx 0C000h +
mov [ebp+var_97C] eax +
and eax ecx +
jz loc_100808D  +
cmp eax 4000h +
jz loc_1008086  +
cmp eax 8000h +
jz loc_100807F  +
cmp eax ecx +
jnz loc_10080A6  +
push offset aNoKey  +
jmp loc_1008092  +
push offset aConfOnly  +
jmp loc_1008092  +
push offset aAuthOnly  +
jmp loc_1008092  +
push offset aAuthConf  +
lea eax [ebp+var_158] +
push 100h  +
push eax  +
call strcat_s  +
add esp 0Ch +
test [ebp+var_984] 1000h +
jz loc_10080CB  +
push offset aFlagExt  +
lea eax [ebp+var_158] +
push 100h  +
push eax  +
call strcat_s  +
add esp 0Ch +
mov eax [ebp+var_97C] +
mov ecx 300h +
and eax ecx +
jz loc_1008101  +
cmp eax 100h +
jz loc_10080FA  +
cmp eax 200h +
jz loc_10080F3  +
cmp eax ecx +
jnz loc_100811A  +
push offset aReservedKey  +
jmp loc_1008106  +
push offset aOtherKey  +
jmp loc_1008106  +
push offset aZoneKey  +
jmp loc_1008106  +
push offset aHostKey  +
lea eax [ebp+var_158] +
push 100h  +
push eax  +
call strcat_s  +
add esp 0Ch +
mov eax dword_1011970 +
and eax 4000h +
push eax  +
push 800h  +
lea eax [ebp+var_958] +
push eax  +
push [ebp+var_970]  +
push ebx  +
push offset asc_1001810  +
call sub_10078BA  +
push eax  +
movzx eax [ebp+var_97E] +
push [ebp+var_970]  +
push eax  +
call sub_100A06C  +
push eax  +
movzx eax [ebp+var_97D] +
push eax  +
call sub_100A0C8  +
push eax  +
movzx eax byte ptr [ebp+var_984] +
and eax 0Fh +
push eax  +
lea eax [ebp+var_158] +
push eax  +
push [ebp+var_97C]  +
push offset aKeyFlags0x04xS  +
push edi  +
call esi  +
add esp 24h +
add ebx [ebp+var_970] +
jmp loc_10084FE  +
push ebx  +
call sub_100C145  +
movzx eax ax +
inc ebx  +
inc ebx  +
mov [ebp+var_990] eax +
mov al [ebx] +
inc ebx  +
mov [ebp+var_97E] al +
mov al [ebx] +
inc ebx  +
push ebx  +
mov [ebp+var_97D] al +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_998] eax +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_984] eax +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_970] eax +
call sub_100C145  +
movzx eax ax +
mov [ebp+var_9A0] eax +
lea eax [ebp+var_970] +
push eax  +
call ds:gmtime  +
push 9  +
mov esi eax +
pop ecx  +
lea eax [ebp+var_984] +
lea edi [ebp+var_3C] +
push eax  +
movs   +
call ds:gmtime  +
pop ecx  +
pop ecx  +
movzx ecx word ptr [ebp+var_9A0] +
push ecx  +
push [ebp+var_970]  +
mov ecx [ebp+var_2C] +
push [ebp+var_3C]  +
inc ecx  +
push [ebp+var_38]  +
push [ebp+var_34]  +
push [ebp+var_30]  +
push ecx  +
mov ecx [ebp+var_28] +
add ecx 76Ch +
push ecx  +
push [ebp+var_984]  +
mov ecx [eax+10h] +
push dword ptr [eax]  +
inc ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
mov eax [eax+14h] +
push ecx  +
add eax 76Ch +
push eax  +
push [ebp+var_998]  +
movzx eax [ebp+var_97D] +
push eax  +
movzx eax [ebp+var_97E] +
push eax  +
call sub_100A06C  +
push eax  +
movzx eax word ptr [ebp+var_990] +
push eax  +
call sub_100A010  +
push eax  +
push offset aSigTypeCovered  +
push [ebp+var_97C]  +
call ds:fprintf  +
add esp 54h +
push [ebp+var_97C]  +
push dword ptr [ebp+hostshort]  +
add ebx 2 +
push [ebp+var_974]  +
push ebx  +
call sub_1007878  +
mov ebx eax +
test ebx ebx +
jz loc_100795D  +
mov eax dword_1011970 +
mov esi [ebp+var_978] +
and eax 4000h +
push eax  +
push 800h  +
lea eax [ebp+var_958] +
push eax  +
sub esi ebx +
push esi  +
push ebx  +
push offset asc_1001810  +
call sub_10078BA  +
push eax  +
push esi  +
push offset aSigLengthDS  +
push [ebp+var_97C]  +
call ds:fprintf  +
add esp 10h +
add ebx esi +
jmp loc_1007F5F  +
push offset aDomainNameDnam  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
push dword ptr [ebp+hostshort]  +
push [ebp+var_974]  +
push ebx  +
call sub_1007878  +
mov ebx eax +
push edi  +
push 0Ah  +
call ds:putc  +
pop ecx  +
pop ecx  +
jmp loc_10084FE  +
cmp eax 64h +
jz loc_10084EC  +
jle loc_10084DF  +
cmp eax 66h +
jle loc_1008496  +
cmp eax 0FF01h +
jz loc_10083D3  +
cmp eax 0FF02h +
jnz loc_10084DF  +
push ebx  +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_970] eax +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_990] eax +
call sub_100C164  +
add ebx 4 +
test [ebp+var_970] 10000h +
mov ecx offset byte_1001253 +
mov edx offset aLocal +
jnz loc_10083A3  +
mov edx ecx +
test [ebp+var_970] 80000000h +
jz loc_10083B4  +
mov ecx offset aScope +
push eax  +
push [ebp+var_990]  +
push edx  +
push ecx  +
push [ebp+var_970]  +
push offset aWinsReverseNbs  +
push edi  +
call esi  +
add esp 1Ch +
jmp loc_1008315  +
push ebx  +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_970] eax +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_998] eax +
call sub_100C164  +
add ebx 4 +
push ebx  +
mov [ebp+var_990] eax +
call sub_100C164  +
add ebx 4 +
test [ebp+var_970] 10000h +
mov [ebp+var_97C] eax +
mov ecx offset byte_1001253 +
mov eax offset aLocal +
jnz loc_1008427  +
mov eax ecx +
test [ebp+var_970] 80000000h +
jz loc_1008438  +
mov ecx offset aScope +
push [ebp+var_97C]  +
push [ebp+var_990]  +
push [ebp+var_998]  +
push eax  +
push ecx  +
push [ebp+var_970]  +
push offset aWinsLookupFlag  +
push edi  +
call esi  +
add esp 20h +
jmp loc_100848B  +
dec [ebp+var_97C]  +
cmp ebx [ebp+var_978] +
jnb loc_10084FE  +
push dword ptr [ebx]  +
lea eax [ebp+var_14] +
push eax  +
call sub_100D3FC  +
push eax  +
push offset aWinsServerS  +
push edi  +
call esi  +
add esp 0Ch +
add ebx 4 +
cmp [ebp+var_97C] 0 +
jnz loc_100845F  +
jmp loc_10084FE  +
cmp ecx 4 +
jnz loc_10084C0  +
push ebx  +
call sub_100C164  +
push eax  +
xor eax eax +
cmp [ebp+var_988] 65h +
setnz al  +
dec eax  +
and eax 0Eh +
add eax 67h +
push eax  +
push offset aCidLu  +
jmp loc_1007CB3  +
xor eax eax +
cmp [ebp+var_988] 65h +
push ecx  +
setnz al  +
dec eax  +
and eax 0Eh +
add eax 67h +
push eax  +
push offset aCidOfLengthD?  +
jmp loc_1007A74  +
push [ebp+var_988]  +
push offset a???UnknownType  +
jmp loc_10084F2  +
push ebx  +
push offset aUserInfoS  +
push edi  +
call esi  +
add esp 0Ch +
mov ebx [ebp+var_978] +
test byte ptr dword_1011970 2 +
jz loc_100852D  +
cmp [ebp+var_988] 6 +
jz loc_100852D  +
push [ebp+var_994]  +
call sub_100BE2F  +
push eax  +
push [ebp+var_994]  +
push offset aTtlLuS_0  +
push edi  +
call esi  +
add esp 10h +
cmp ebx [ebp+var_978] +
jz loc_100854F  +
push [ebp+var_98C]  +
sub ebx [ebp+var_99C] +
push ebx  +
push offset aErrorRecordSiz  +
push edi  +
call esi  +
add esp 10h +
xor ebx ebx +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_8] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi ds:fprintf +
push edi  +
mov edi [ebp+arg_0] +
lea eax [edi+0Ch] +
mov [ebp+var_4] eax +
jnz loc_100861E  +
test dword_1011970 80000000h +
jz loc_1008748  +
push offset aHeader  +
push ebx  +
call esi  +
movzx eax byte ptr [edi+2] +
shr eax 3 +
and eax 0Fh +
push off_10118E8[eax*4]  +
push offset aOpcodeS  +
push ebx  +
call esi  +
movzx eax word ptr [edi] +
add esp 14h +
push eax  +
call ds:ntohs  +
movzx eax ax +
push eax  +
push offset aIdD  +
push ebx  +
call esi  +
movzx eax byte ptr [edi+3] +
and eax 0Fh +
push off_1011928[eax*4]  +
push offset aRcodeS  +
push ebx  +
call esi  +
push offset aHeaderFlags  +
push ebx  +
call esi  +
add esp 20h +
test byte ptr [edi+2] 80h +
jz loc_1008686  +
push offset aResponse  +
jmp loc_100868B  +
push offset aQuery  +
push ebx  +
call esi  +
test byte ptr [edi+2] 4 +
pop ecx  +
pop ecx  +
jz loc_10086A0  +
push offset aAuth_Answer  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test byte ptr [edi+2] 2 +
jz loc_10086B0  +
push offset aTruncation  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test byte ptr [edi+2] 1 +
jz loc_10086C0  +
push offset aWantRecursion  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test byte ptr [edi+3] 80h +
jz loc_10086D0  +
push offset aRecursionAvail  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test byte ptr [edi+3] 40h +
jz loc_10086E0  +
push offset aPrimary  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
movzx eax word ptr [edi+4] +
push eax  +
call ds:ntohs  +
movzx eax ax +
push eax  +
push offset aQuestionsD  +
push ebx  +
call esi  +
movzx eax word ptr [edi+6] +
add esp 0Ch +
push eax  +
call ds:ntohs  +
movzx eax ax +
push eax  +
push offset aAnswersD  +
push ebx  +
call esi  +
movzx eax word ptr [edi+8] +
add esp 0Ch +
push eax  +
call ds:ntohs  +
movzx eax ax +
push eax  +
push offset aAuthorityRecor  +
push ebx  +
call esi  +
movzx eax word ptr [edi+0Ah] +
add esp 0Ch +
push eax  +
call ds:ntohs  +
movzx eax ax +
push eax  +
push offset aAdditionalD  +
push ebx  +
call esi  +
add esp 0Ch +
movzx eax word ptr [edi+4] +
push eax  +
call ds:ntohs  +
movzx eax ax +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_10087E2  +
push offset aQuestions  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
jmp loc_10087DD  +
push offset asc_1001D88  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
push ebx  +
push [ebp+arg_4]  +
push edi  +
push [ebp+var_4]  +
call sub_1007878  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10088BC  +
push eax  +
call sub_100C145  +
add [ebp+var_4] 2 +
push [ebp+var_4]  +
movzx eax ax +
mov [ebp+arg_8] eax +
call sub_100C145  +
add [ebp+var_4] 2 +
movzx eax ax +
mov [ebp+arg_C] eax +
movsx eax word ptr [ebp+arg_8] +
push eax  +
call sub_100A010  +
push eax  +
push offset aTypeS  +
push ebx  +
call esi  +
movsx eax word ptr [ebp+arg_C] +
add esp 0Ch +
push eax  +
call sub_100BDD5  +
push eax  +
push offset aClassS  +
push ebx  +
call esi  +
add esp 0Ch +
dec [ebp+arg_0]  +
jns loc_100876D  +
movzx eax word ptr [edi+6] +
push eax  +
call ds:ntohs  +
movzx eax ax +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100882A  +
push offset aAnswers  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
jmp loc_1008825  +
push offset asc_1001D50  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
push ebx  +
push [ebp+arg_4]  +
push edi  +
push [ebp+var_4]  +
call sub_10078E8  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10088BC  +
dec [ebp+arg_0]  +
jns loc_1008803  +
movzx eax word ptr [edi+8] +
push eax  +
call ds:ntohs  +
movzx eax ax +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100886E  +
push offset aAuthorityRec_0  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
jmp loc_1008869  +
push offset asc_1001D50  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
push ebx  +
push [ebp+arg_4]  +
push edi  +
push [ebp+var_4]  +
call sub_10078E8  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10088BC  +
dec [ebp+arg_0]  +
jns loc_100884B  +
movzx eax word ptr [edi+0Ah] +
push eax  +
call ds:ntohs  +
movzx eax ax +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_10088B2  +
push offset aAdditionalReco  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
jmp loc_10088AD  +
push offset asc_1001D50  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
push ebx  +
push [ebp+arg_4]  +
push edi  +
push [ebp+var_4]  +
call sub_10078E8  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10088BC  +
dec [ebp+arg_0]  +
jns loc_100888F  +
push offset asc_1001D0C  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ds:_iob +
add eax 20h +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10085ED  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 290h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov [ebp+var_25C] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_28C] eax +
mov eax [ebp+arg_18] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+var_290] eax +
lea eax [ebx+0Ch] +
push esi  +
mov esi [ebp+arg_14] +
mov [ebp+var_274] ebx +
mov [ebp+var_260] ecx +
cmp eax ecx +
jbe loc_1008959  +
mov eax ds:_iob +
add eax 40h +
push offset aInvalidDnsReso  +
push eax  +
call ds:fprintf  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_1009455  +
mov [ebp+var_26C] eax +
mov al [ebx+3] +
test al 0Fh +
jz loc_1008971  +
movzx eax al +
and eax 0Fh +
jmp loc_1009455  +
movzx eax word ptr [ebx+6] +
push edi  +
mov edi ds:ntohs +
push eax  +
call edi  +
movzx eax ax +
mov [ebp+var_27C] eax +
movzx eax ax +
add [esi] eax +
test byte ptr dword_1011970 2 +
mov esi ds:fprintf +
jz loc_10089BB  +
push eax  +
movzx eax word ptr [ebx+4] +
push eax  +
call edi  +
movzx eax ax +
push eax  +
mov eax ds:_iob +
add eax 20h +
push offset aReceivedAxfrMe  +
push eax  +
call esi  +
add esp 10h +
cmp word ptr [ebp+var_27C] 0 +
jnz loc_10089CC  +
push 0FFFFFFFEh  +
jmp loc_1008F35  +
movzx eax word ptr [ebx+4] +
push eax  +
call edi  +
test ax ax +
jbe loc_1008A04  +
push [ebp+var_260]  +
mov edi [ebp+var_26C] +
push edi  +
call sub_100C072  +
test eax eax +
jl loc_1008F33  +
lea eax [edi+eax+4] +
mov [ebp+var_26C] eax +
jmp loc_1008A04  +
mov ebx [ebp+var_274] +
add [ebp+var_27C] 0FFFFh +
push 100h  +
lea eax [ebp+var_114] +
push eax  +
push [ebp+var_26C]  +
push [ebp+var_260]  +
push ebx  +
call sub_100BF88  +
mov [ebp+var_284] eax +
test eax eax +
jl loc_1009465  +
add [ebp+var_26C] eax +
mov edi [ebp+var_26C] +
add edi 2 +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push [ebp+var_26C]  +
call sub_100C145  +
movzx eax ax +
mov [ebp+var_264] eax +
mov eax edi +
lea edi [eax+2] +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push eax  +
call sub_100C145  +
movzx eax ax +
lea ebx [edi+4] +
mov [ebp+var_288] eax +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C164  +
lea edi [ebx+2] +
mov [ebp+var_270] eax +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push ebx  +
call sub_100C145  +
movzx eax ax +
mov [ebp+var_26C] eax +
add eax edi +
cmp [ebp+var_264] 6 +
mov [ebp+var_278] eax +
jnz loc_1008ADB  +
mov eax [ebp+var_290] +
inc dword ptr [eax]  +
mov eax [ebp+arg_C] +
cmp eax 0FFh +
jz loc_1008B0C  +
cmp [ebp+var_264] eax +
jz loc_1008B0C  +
cmp [ebp+var_264] 2 +
jz loc_1008B03  +
cmp [ebp+var_264] 0Ch +
jnz loc_1009438  +
cmp eax 1 +
jnz loc_1009438  +
cmp byte ptr [ebp+var_114] 0 +
mov ebx 100h +
jnz loc_1008B2F  +
push offset aRoot  +
lea eax [ebp+var_114] +
push ebx  +
push eax  +
call strcpy_s  +
add esp 0Ch +
test byte ptr dword_1011970 2 +
jnz loc_1008BA1  +
cmp [ebp+var_264] 6 +
jz loc_1008BA1  +
mov eax [ebp+var_28C] +
cmp byte ptr [eax] 0 +
jz loc_1008BA1  +
lea eax [ebp+var_114] +
mov [ebp+var_268] eax +
push 2Eh  +
push [ebp+var_268]  +
call ds:strchr  +
pop ecx  +
pop ecx  +
mov [ebp+var_268] eax +
test eax eax +
jz loc_1008BA1  +
inc [ebp+var_268]  +
push [ebp+var_268]  +
push [ebp+var_28C]  +
call sub_100C94F  +
test eax eax +
jnz loc_1008B58  +
cmp [ebp+var_268] eax +
jz loc_1008BA1  +
mov eax [ebp+var_268] +
mov byte ptr [eax-1] 0 +
jmp loc_1008BC2  +
cmp [ebp+var_284] 0FFh +
jnb loc_1008BC2  +
push offset a_  +
lea eax [ebp+var_114] +
push ebx  +
push eax  +
call strcat_s  +
add esp 0Ch +
lea eax [ebp+var_114] +
push eax  +
push offset a30s_0  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
test byte ptr dword_1011970 2 +
jz loc_1008C04  +
push dword_101018C  +
call sub_100BDD5  +
push eax  +
push [ebp+var_270]  +
push offset aLu5s  +
push [ebp+var_25C]  +
call esi  +
add esp 10h +
push [ebp+var_264]  +
call sub_100A010  +
push eax  +
push offset a6s  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
cmp [ebp+var_264] 21h +
jg loc_10091A7  +
mov eax [ebp+var_264] +
cmp eax 21h +
jz loc_100912D  +
dec eax  +
cmp eax 1Bh +
ja loc_1009429  +
movzx eax ds:byte_10094CD[eax] +
jmp ds:off_10094A1[eax*4]  +
cmp [ebp+var_288] 1 +
jnz loc_1009429  +
lea ebx [edi+4] +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
cmp [ebp+var_26C] 4 +
mov eax [edi] +
jnz loc_1008C8A  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_100D3FC  +
jmp loc_1009418  +
cmp [ebp+var_26C] 7 +
jnz loc_1008CD2  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_100D3FC  +
push eax  +
push offset aS_2  +
push [ebp+var_25C]  +
call esi  +
movsx eax byte ptr [edi+5] +
movsx ecx byte ptr [edi+6] +
shl eax 8 +
add eax ecx +
push eax  +
movsx eax byte ptr [ebx] +
push eax  +
push offset aDD  +
push [ebp+var_25C]  +
call esi  +
add esp 1Ch +
jmp loc_1009429  +
push [ebp+var_26C]  +
push offset aDlenD?  +
jmp loc_100941E  +
push [ebp+var_25C]  +
push 20h  +
call ds:putc  +
cmp [ebp+arg_C] 0FFh +
pop ecx  +
pop ecx  +
jz loc_1008D1F  +
cmp [ebp+var_264] 0Ch +
mov eax offset aHost +
jz loc_1008D0E  +
mov eax offset aServer +
push eax  +
push offset aS_9  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
push [ebp+var_25C]  +
push [ebp+var_260]  +
push [ebp+var_274]  +
push edi  +
call sub_1007899  +
jmp loc_1009429  +
movsx eax byte ptr [edi] +
inc edi  +
test eax eax +
jz loc_1008D8C  +
lea ecx [eax+edi] +
mov [ebp+var_270] ecx +
cmp ecx [ebp+var_260] +
ja loc_100948E  +
push edi  +
push eax  +
push offset a_S_2  +
lea eax [ebp+var_114] +
push ebx  +
push eax  +
call sprintf_s  +
lea eax [ebp+var_114] +
push eax  +
push offset a10s  +
push [ebp+var_25C]  +
call esi  +
mov edi [ebp+var_270] +
add esp 20h +
jmp loc_1008DA1  +
push offset asc_100200C  +
push offset a10s  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
movsx eax byte ptr [edi] +
inc edi  +
test eax eax +
jz loc_1009429  +
lea ecx [eax+edi] +
cmp ecx [ebp+var_260] +
ja loc_100948E  +
push edi  +
push eax  +
push offset a_S_1  +
push [ebp+var_25C]  +
call esi  +
add esp 10h +
jmp loc_1009429  +
push ebx  +
lea eax [ebp+var_214] +
push eax  +
push edi  +
push [ebp+var_260]  +
push [ebp+var_274]  +
call sub_100BF88  +
test eax eax +
jl loc_1008F24  +
add edi eax +
lea eax [ebp+var_214] +
push eax  +
push offset aS_2  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
push ebx  +
lea eax [ebp+var_214] +
push eax  +
push edi  +
push [ebp+var_260]  +
push [ebp+var_274]  +
call sub_100BF88  +
test eax eax +
jl loc_1008F24  +
add edi eax +
lea eax [ebp+var_214] +
push eax  +
push offset aS_  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
and [ebp+var_264] 0 +
lea ebx [edi+4] +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C164  +
add edi 4 +
add ebx 4 +
cmp [ebp+var_264] 0 +
mov ecx offset asc_100200C +
jnz loc_1008E7E  +
mov ecx offset byte_1001253 +
push eax  +
push ecx  +
push offset aSLu  +
push [ebp+var_25C]  +
call esi  +
add esp 10h +
inc [ebp+var_264]  +
cmp [ebp+var_264] 5 +
jl loc_1008E53  +
push offset asc_1001FF0  +
push [ebp+var_25C]  +
call esi  +
pop ecx  +
pop ecx  +
jmp loc_1009429  +
lea eax [edi+2] +
mov [ebp+var_270] eax +
cmp eax [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C145  +
movzx eax ax +
push eax  +
push offset a3d  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
push ebx  +
lea eax [ebp+var_214] +
push eax  +
push [ebp+var_270]  +
push [ebp+var_260]  +
push [ebp+var_274]  +
call sub_100BF88  +
test eax eax +
jge loc_1009412  +
test byte ptr dword_1011970 2 +
jz loc_1008F24  +
mov eax ds:_iob +
add eax 20h +
push offset aInvalidMxName  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push offset asc_1001FCC  +
push [ebp+var_25C]  +
call esi  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_1009454  +
lea ecx [edi+1] +
cmp ecx [ebp+var_260] +
ja loc_100948E  +
movzx eax byte ptr [edi] +
mov edi ecx +
test eax eax +
jz loc_1008F76  +
lea ebx [eax+edi] +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
push edi  +
push eax  +
push offset a_S_0  +
push [ebp+var_25C]  +
call esi  +
add esp 10h +
mov edi ebx +
cmp edi [ebp+var_278] +
jb loc_1008F3B  +
jmp loc_1009429  +
mov ebx [ebp+var_25C] +
push ebx  +
push 20h  +
call ds:putc  +
pop ecx  +
pop ecx  +
push ebx  +
push [ebp+var_260]  +
push [ebp+var_274]  +
push edi  +
call sub_1007878  +
push offset asc_1001FBC  +
push ebx  +
mov edi eax +
call esi  +
pop ecx  +
pop ecx  +
push ebx  +
push [ebp+var_260]  +
push [ebp+var_274]  +
push edi  +
call sub_1007878  +
jmp loc_1009429  +
cmp [ebp+var_288] 1 +
jnz loc_1009429  +
sub [ebp+var_26C] 4 +
add edi 4 +
lea ebx [edi+1] +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
movzx edi byte ptr [edi] +
push edi  +
call ds:getprotobynumber  +
mov [ebp+var_268] eax +
test eax eax +
jnz loc_100901F  +
push edi  +
push offset a3d  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
and [ebp+var_280] 0 +
jmp loc_1009037  +
mov eax [ebp+var_268] +
push dword ptr [eax]  +
push offset a3s  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
dec [ebp+var_26C]  +
mov edi ebx +
xor ebx ebx +
cmp [ebp+var_26C] ebx +
jle loc_1009429  +
lea eax [edi+1] +
jmp loc_1009058  +
mov eax [ebp+var_270] +
dec [ebp+var_26C]  +
cmp eax [ebp+var_260] +
ja loc_100948E  +
movsx ecx byte ptr [edi] +
inc edi  +
inc eax  +
mov [ebp+var_264] ecx +
mov [ebp+var_270] eax +
test [ebp+var_264] 200h +
jz loc_10090DB  +
cmp [ebp+var_268] 0 +
jz loc_10090AF  +
mov eax [ebp+var_268] +
push dword ptr [eax]  +
push ebx  +
call ds:htons  +
movzx eax ax +
push eax  +
call ds:getservbyport  +
mov [ebp+var_280] eax +
cmp [ebp+var_280] 0 +
jnz loc_10090C3  +
movzx eax bx +
push eax  +
push offset aU  +
jmp loc_10090D0  +
mov eax [ebp+var_280] +
push dword ptr [eax]  +
push offset aS_2  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
shl [ebp+var_264] 1 +
inc ebx  +
test bl 7 +
jnz loc_100907B  +
cmp [ebp+var_26C] 0 +
jg loc_1009052  +
jmp loc_1009429  +
cmp [ebp+var_26C] 10h +
jnz loc_100946C  +
lea eax [edi+10h] +
cmp eax [ebp+var_260] +
ja loc_100948E  +
push edi  +
lea eax [ebp+var_258] +
push eax  +
call sub_100D191  +
lea eax [ebp+var_258] +
jmp loc_1009418  +
lea ebx [edi+2] +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C145  +
movzx eax ax +
mov [ebp+var_270] eax +
mov eax ebx +
lea edi [eax+2] +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push eax  +
call sub_100C145  +
movzx ebx ax +
mov eax edi +
lea edi [eax+2] +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push eax  +
call sub_100C145  +
movzx eax ax +
push eax  +
movzx eax bx +
push eax  +
movzx eax word ptr [ebp+var_270] +
push eax  +
push offset aPriorityDWeigh  +
push [ebp+var_25C]  +
call esi  +
add esp 14h +
push [ebp+var_25C]  +
jmp loc_1008FB4  +
cmp [ebp+var_264] 27h +
jz loc_10093F0  +
cmp [ebp+var_264] 64h +
jz loc_10093DE  +
jle loc_1009429  +
cmp [ebp+var_264] 66h +
jle loc_10093C1  +
cmp [ebp+var_264] 0FF01h +
jz loc_10092A4  +
cmp [ebp+var_264] 0FF02h +
jnz loc_1009429  +
lea ebx [edi+4] +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C164  +
mov [ebp+var_268] eax +
mov eax ebx +
lea edi [eax+4] +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push eax  +
call sub_100C164  +
lea ebx [edi+4] +
mov [ebp+var_270] eax +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C164  +
test [ebp+var_268] 10000h +
mov edx offset aLocal +
jnz loc_1009257  +
mov edx offset byte_1001253 +
test [ebp+var_268] 80000000h +
mov ecx offset aScope +
jnz loc_100926D  +
mov ecx offset byte_1001253 +
push eax  +
push [ebp+var_270]  +
push edx  +
push ecx  +
push [ebp+var_268]  +
push offset aWinsReverseNbs  +
push [ebp+var_25C]  +
call esi  +
add esp 1Ch +
push [ebp+var_25C]  +
push [ebp+var_260]  +
push [ebp+var_274]  +
push ebx  +
jmp loc_1008FC1  +
lea ebx [edi+4] +
cmp ebx [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C164  +
mov [ebp+var_268] eax +
mov eax ebx +
lea edi [eax+4] +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push eax  +
call sub_100C164  +
mov [ebp+var_284] eax +
mov eax edi +
lea edi [eax+4] +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push eax  +
call sub_100C164  +
mov [ebp+var_270] eax +
mov eax edi +
lea edi [eax+4] +
cmp edi [ebp+var_260] +
ja loc_100948E  +
push eax  +
call sub_100C164  +
test [ebp+var_268] 10000h +
mov ebx eax +
mov ecx offset aLocal +
jnz loc_1009328  +
mov ecx offset byte_1001253 +
test [ebp+var_268] 80000000h +
mov eax offset aScope +
jnz loc_100933E  +
mov eax offset byte_1001253 +
push ebx  +
push [ebp+var_270]  +
push [ebp+var_284]  +
push ecx  +
push eax  +
push [ebp+var_268]  +
push offset aWinsLookupInfo  +
push [ebp+var_25C]  +
call esi  +
add esp 20h +
test ebx ebx +
jz loc_1009429  +
lea eax [edi+4] +
mov [ebp+var_268] eax +
jmp loc_100937C  +
mov eax [ebp+var_268] +
dec ebx  +
cmp edi [ebp+var_278] +
jnb loc_1009429  +
cmp eax [ebp+var_260] +
ja loc_100948E  +
push dword ptr [edi]  +
lea eax [ebp+var_14] +
push eax  +
call sub_100D3FC  +
push eax  +
push offset aWinsServerS_0  +
push [ebp+var_25C]  +
call esi  +
add [ebp+var_268] 4 +
add esp 0Ch +
add edi 4 +
test ebx ebx +
jnz loc_1009376  +
jmp loc_1009429  +
lea eax [edi+4] +
cmp eax [ebp+var_260] +
ja loc_100948E  +
push edi  +
call sub_100C164  +
push eax  +
push offset aLu  +
jmp loc_100941E  +
lea eax [edi+1] +
cmp eax [ebp+var_260] +
ja loc_100948E  +
push edi  +
jmp loc_1009419  +
push ebx  +
lea eax [ebp+var_214] +
push eax  +
push edi  +
push [ebp+var_260]  +
push [ebp+var_274]  +
call sub_100BF88  +
test eax eax +
jl loc_1008F24  +
lea eax [ebp+var_214] +
push eax  +
push offset aS_2  +
push [ebp+var_25C]  +
call esi  +
add esp 0Ch +
push offset asc_1001A78  +
push [ebp+var_25C]  +
call esi  +
pop ecx  +
pop ecx  +
cmp word ptr [ebp+var_27C] 0 +
mov eax [ebp+var_278] +
mov [ebp+var_26C] eax +
jnz loc_10089FE  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 1Ch  +
push offset aInvalidNameTer  +
jmp loc_1009493  +
push offset aInvalidAaaaAdd  +
push [ebp+var_25C]  +
call esi  +
push offset asc_1001FCC  +
push [ebp+var_25C]  +
call esi  +
add esp 10h +
jmp loc_1008F33  +
push offset aInvalidDnsReso  +
mov eax ds:_iob +
add eax 40h +
push eax  +
jmp loc_1008F2F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100950D  +
sub eax ecx +
mov esi 100h +
cmp eax esi +
jb loc_100952C  +
push 2Fh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
jmp loc_1009570  +
lea eax [ebp+var_104] +
push eax  +
push offset aViewS  +
push edi  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1009570  +
lea eax [ebp+var_104] +
push eax  +
push offset aSortSMore  +
lea eax [ebp+var_204] +
push esi  +
push eax  +
call sprintf_s  +
lea eax [ebp+var_204] +
push eax  +
call ds:system  +
add esp 14h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100CC5F  +
leave   +
retn 4  +
***
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
push 200h  +
xor ebx ebx +
mov [ebp+var_308] ecx +
lea ecx [ebp+var_304] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push 0FCh  +
push dword_101018C  +
mov [ebp+var_324] eax +
push eax  +
push ebx  +
mov [ebp+var_30C] ebx +
mov [ebp+var_31C] ebx +
mov [ebp+var_318] ebx +
mov [ebp+var_314] ebx +
call sub_100C7D2  +
mov edi eax +
cmp edi ebx +
jge loc_1009621  +
test byte ptr dword_1011970 2 +
jz loc_1009619  +
push 0CDh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_10096C3  +
mov eax dword_1016654 +
push esi  +
cmp [eax+8] ebx +
jnz loc_1009631  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov esi [eax+8] +
add esi 20h +
movzx eax word ptr [esi] +
mov ecx 3500h +
cmp ax 2 +
jnz loc_100964B  +
mov edx ecx +
mov [esi+2] dx +
cmp ax 17h +
jnz loc_1009655  +
mov [esi+2] cx +
push ebx  +
movzx eax ax +
push 1  +
push eax  +
call ds:socket  +
mov s eax +
cmp eax 0FFFFFFFFh +
jnz loc_100967D  +
push offset aLsSocket  +
call ds:perror  +
pop ecx  +
jmp loc_1009A43  +
push dword ptr [esi+20h]  +
push esi  +
push eax  +
call ds:connect  +
cmp eax 0FFFFFFFFh +
jnz loc_10096D3  +
call ds:WSAGetLastError  +
cmp eax 274Dh +
jnz loc_100969E  +
push 0FFFFFFFBh  +
jmp loc_10096AC  +
push offset aLsConnect  +
call ds:perror  +
pop ecx  +
push 0FFFFFFFDh  +
pop esi  +
push s  +
call ds:closesocket  +
or s 0FFFFFFFFh +
mov eax esi +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 8  +
push edi  +
call ds:htons  +
mov esi ds:send +
movzx eax ax +
push ebx  +
mov dword ptr [ebp+buf] eax +
push 2  +
lea eax [ebp+buf] +
push eax  +
push s  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1009A52  +
push ebx  +
push edi  +
lea eax [ebp+var_304] +
push eax  +
push s  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1009A52  +
mov eax dword_1016654 +
cmp [eax+8] ebx +
jnz loc_100972D  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov eax [eax] +
mov edi ds:fprintf +
push eax  +
mov eax ds:_iob +
mov esi offset aS_5 +
add eax 20h +
push esi  +
push eax  +
call edi  +
add esp 0Ch +
cmp [ebp+var_308] ebx +
jnz loc_1009761  +
mov eax ds:_iob +
add eax 20h +
mov dword_101AD00 eax +
jmp loc_10097C3  +
lea eax [ebp+var_104] +
push eax  +
push [ebp+var_308]  +
call sub_1009DAC  +
mov dword_101AD00 eax +
cmp eax ebx +
jnz loc_1009794  +
lea eax [ebp+var_104] +
push eax  +
push 0Ch  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
jmp loc_10096AA  +
push [ebp+var_308]  +
push offset aS_3  +
push eax  +
call edi  +
mov eax dword_1016654 +
add esp 0Ch +
cmp [eax+8] ebx +
jnz loc_10097B4  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov eax [eax] +
push eax  +
push esi  +
push dword_101AD00  +
call edi  +
add esp 0Ch +
cmp dword_101665C ebx +
jnz loc_1009924  +
push 2  +
lea esi [ebp+hostshort] +
pop ebx  +
push 0  +
push ebx  +
push esi  +
push s  +
call ds:recv  +
mov edi eax +
test edi edi +
jz loc_10097F6  +
sub ebx edi +
add esi edi +
test ebx ebx +
jg loc_10097D8  +
cmp edi 0FFFFFFFFh +
jz loc_1009950  +
cmp edi 2 +
jb loc_1009950  +
push dword ptr [ebp+hostshort]  +
call ds:htons  +
movzx eax ax +
mov dword ptr [ebp+buf] eax +
test ax ax +
jz loc_100995A  +
movzx ecx ax +
mov eax dword_101668C +
cmp ecx eax +
jle loc_100985C  +
test eax eax +
jz loc_1009843  +
push dword_1016688  +
call ds:free  +
pop ecx  +
movzx eax word ptr [ebp+buf] +
push eax  +
mov dword_101668C eax +
call ds:malloc  +
pop ecx  +
mov dword_1016688 eax +
movzx esi word ptr [ebp+buf] +
mov ebx dword_1016688 +
jmp loc_1009885  +
push 0  +
push esi  +
push ebx  +
push s  +
call ds:recv  +
mov edi eax +
test edi edi +
jle loc_1009889  +
add ebx edi +
sub esi edi +
test esi esi +
jg loc_100986B  +
cmp edi 0FFFFFFFFh +
jz loc_1009938  +
lea eax [ebp+var_318] +
push eax  +
lea eax [ebp+var_30C] +
push eax  +
push [ebp+var_324]  +
push [ebp+arg_0]  +
push ebx  +
push dword_1016688  +
push dword_101AD00  +
call sub_10088ED  +
mov [ebp+var_320] eax +
test eax eax +
jnz loc_1009944  +
cmp [ebp+var_308] eax +
jz loc_100990C  +
mov eax [ebp+var_30C] +
mov ecx eax +
sub ecx [ebp+var_31C] +
cmp ecx 32h +
jle loc_100990C  +
mov [ebp+var_31C] eax +
mov eax ds:_iob +
add eax 20h +
push offset asc_1002114  +
push eax  +
call ds:fprintf  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call ds:fflush  +
add esp 0Ch +
cmp [ebp+var_318] 2 +
jge loc_100995A  +
cmp dword_101665C 0 +
jz loc_10097CF  +
xor ebx ebx +
push offset asc_1001A78  +
mov dword_101665C ebx +
call ds:printf  +
pop ecx  +
jmp loc_100995C  +
mov [ebp+var_314] 2 +
jmp loc_100995A  +
mov [ebp+var_314] 3 +
jmp loc_100995A  +
mov [ebp+var_314] 1 +
xor ebx ebx +
cmp [ebp+var_308] ebx +
jz loc_100999B  +
cmp [ebp+var_30C] 1 +
mov eax offset byte_1001253 +
mov ecx offset aS_1 +
jnz loc_1009979  +
mov ecx eax +
cmp [ebp+var_30C] 32h +
jl loc_1009987  +
mov eax offset asc_1001A78 +
push ecx  +
push [ebp+var_30C]  +
push eax  +
push 21h  +
push 1  +
call sub_100BD21  +
add esp 14h +
push s  +
call ds:closesocket  +
or s 0FFFFFFFFh +
cmp [ebp+var_308] ebx +
jz loc_10099CD  +
mov eax dword_101AD00 +
cmp eax ebx +
jz loc_10099CD  +
push eax  +
call ds:fclose  +
pop ecx  +
mov dword_101AD00 ebx +
mov eax [ebp+var_314] +
sub eax ebx +
jz loc_1009A4B  +
dec eax  +
jz loc_1009A43  +
dec eax  +
jz loc_10099EB  +
dec eax  +
jnz loc_1009A43  +
mov eax [ebp+var_320] +
jmp loc_10096C2  +
mov esi dword_1016688 +
push 0D0h  +
push 2  +
call sub_100BD21  +
movzx eax word ptr [esi+0Ah] +
mov edi ds:ntohs +
pop ecx  +
pop ecx  +
push eax  +
call edi  +
movzx eax ax +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
call edi  +
movzx eax ax +
push eax  +
movzx eax word ptr [esi+6] +
push eax  +
call edi  +
movzx eax ax +
push eax  +
movzx eax byte ptr [esi+3] +
and eax 0Fh +
push off_1011928[eax*4]  +
push 0D1h  +
push 2  +
call sub_100BD21  +
add esp 18h +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_10096C2  +
xor eax eax +
jmp loc_10096C2  +
push offset aLsWrite  +
jmp loc_10096A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009A80  +
sub eax edx +
cmp eax 100h +
jb loc_1009AA0  +
push 2Fh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
jmp loc_1009B62  +
lea eax [ebp+var_204] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push offset aLsTSS  +
push edi  +
call ds:sscanf  +
add esp 10h +
cmp [ebp+arg_4] 0 +
jz loc_1009AD4  +
cmp eax 2 +
jnz loc_1009B18  +
cmp byte ptr [ebp+var_204] 3Eh +
jnz loc_1009AD9  +
xor eax eax +
inc eax  +
cmp eax 2 +
jnz loc_1009B18  +
push 0FFFFFFFFh  +
lea eax [ebp+var_104] +
push eax  +
call sub_1009F52  +
cmp eax 0FFFFFFFFh +
jz loc_1009B62  +
cmp eax 0FFh +
jle loc_1009B10  +
lea eax [ebp+var_104] +
push eax  +
mov eax ds:_iob +
add eax 40h +
push offset aUnsupportedQue  +
push eax  +
call ds:fprintf  +
jmp loc_1009B5F  +
lea esi [ebp+var_204] +
jmp loc_1009B28  +
cmp eax 1 +
jnz loc_1009B52  +
mov eax dword_1010188 +
lea esi [ebp+var_104] +
mov ecx [ebp+arg_4] +
neg ecx  +
sbb ecx ecx +
push esi  +
and ecx edi +
push eax  +
call sub_100959B  +
test eax eax +
jz loc_1009B62  +
push eax  +
call sub_1009E26  +
push eax  +
push esi  +
push 7  +
push 2  +
call sub_100BD21  +
add esp 10h +
jmp loc_1009B62  +
push edi  +
push 0CEh  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100CC5F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push 0FFh  +
lea eax [ebp+var_104+1] +
push 0  +
push eax  +
mov byte ptr [ebp+var_104] 0 +
call memset  +
mov eax ebx +
add esp 0Ch +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009BB3  +
sub eax edx +
cmp eax 100h +
jb loc_1009BD3  +
push 2Fh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
jmp loc_1009D15  +
lea eax [ebp+var_204] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push offset aLsSS  +
push ebx  +
call ds:sscanf  +
add esp 10h +
cmp [ebp+arg_4] 0 +
jz loc_1009C0B  +
cmp eax 2 +
jnz loc_1009C99  +
cmp byte ptr [ebp+var_204] 3Eh +
jnz loc_1009C14  +
xor eax eax +
inc eax  +
cmp eax 2 +
jnz loc_1009C99  +
push edi  +
push 3  +
pop eax  +
lea edi [ebp+var_104] +
mov esi offset aA +
mov ecx eax +
xor edx edx +
cmps   +
jnz loc_1009C2F  +
push 5  +
jmp loc_1009C72  +
lea edi [ebp+var_104] +
mov esi offset asc_1002190 +
mov ecx eax +
xor edx edx +
cmps   +
jnz loc_1009C46  +
push 0Dh  +
jmp loc_1009C72  +
lea edi [ebp+var_104] +
mov esi offset aM +
mov ecx eax +
xor edx edx +
cmps   +
jnz loc_1009C5D  +
push 0Fh  +
jmp loc_1009C72  +
lea edi [ebp+var_104] +
mov esi offset aS_10 +
mov ecx eax +
xor edx edx +
cmps   +
jnz loc_1009C75  +
push 0Bh  +
pop eax  +
jmp loc_1009C90  +
mov ecx eax +
xor eax eax +
lea edi [ebp+var_104] +
mov esi offset aD_1 +
cmps   +
setnz al  +
dec eax  +
and eax 0FEh +
inc eax  +
lea esi [ebp+var_204] +
pop edi  +
jmp loc_1009CA4  +
cmp eax 1 +
jnz loc_1009D05  +
lea esi [ebp+var_104] +
mov ecx [ebp+arg_4] +
neg ecx  +
sbb ecx ecx +
push esi  +
and ecx ebx +
push eax  +
call sub_100959B  +
test eax eax +
jz loc_1009D15  +
push eax  +
call sub_1009E26  +
push eax  +
push esi  +
push 7  +
push 2  +
call sub_100BD21  +
mov eax dword_1016654 +
add esp 10h +
cmp dword ptr [eax+8] 0 +
jnz loc_1009CDC  +
mov eax [eax+0Ch] +
mov eax [eax] +
mov eax [eax+8] +
add eax 20h +
push eax  +
call sub_100D544  +
test eax eax +
jnz loc_1009CF1  +
mov eax offset aUnknownServer +
push eax  +
push esi  +
push esi  +
push 0D2h  +
push 2  +
call sub_100BD21  +
add esp 14h +
jmp loc_1009D15  +
push ebx  +
push 0CEh  +
push 2  +
call sub_100BD21  +
add esp 0Ch +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1009D48  +
mov eax [ebp+arg_0] +
jb loc_1009D3F  +
cmp eax 0FFFFFFFFh +
ja loc_1009D48  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1009D53  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
test eax eax +
jl loc_1009DA0  +
cmp [ebp+arg_4] esi +
jl loc_1009DA0  +
mul  [ebp+arg_4] +
lea ecx [ebp+arg_4] +
push ecx  +
push edx  +
push eax  +
call sub_1009D2A  +
test eax eax +
jnz loc_1009DA0  +
push [ebp+arg_4]  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1009DA0  +
push [ebp+arg_4]  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 3Eh  +
push [ebp+arg_0]  +
xor edi edi +
call ds:strchr  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1009E1B  +
cmp byte ptr [esi+1] 3Eh +
push [ebp+arg_4]  +
jnz loc_1009DEC  +
push offset aS_6  +
push esi  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1009E19  +
push offset aA_1  +
jmp loc_1009E05  +
push offset aS_7  +
push esi  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1009E19  +
push offset aW  +
push [ebp+arg_4]  +
call ds:fopen  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1009E19  +
mov byte ptr [esi] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 1 +
jg loc_1009E83  +
jz loc_1009E7C  +
cmp eax 0FFFFFFFBh +
jz loc_1009E75  +
cmp eax 0FFFFFFFCh +
jz loc_1009E6E  +
cmp eax 0FFFFFFFDh +
jz loc_1009E67  +
cmp eax 0FFFFFFFEh +
jz loc_1009E60  +
cmp eax 0FFFFFFFFh +
jz loc_1009E59  +
test eax eax +
jnz loc_1009E95  +
mov eax offset aSuccess +
jmp loc_1009EBD  +
mov eax offset aTimedOut +
jmp loc_1009EBD  +
mov eax offset aNoInformation +
jmp loc_1009EBD  +
mov eax offset aUnspecifiedErr +
jmp loc_1009EBD  +
mov eax offset aNonAuthoritati +
jmp loc_1009EBD  +
mov eax offset aNoResponseFrom +
jmp loc_1009EBD  +
mov eax offset aFormatError +
jmp loc_1009EBD  +
dec eax  +
dec eax  +
jz loc_1009EB8  +
dec eax  +
jz loc_1009EB1  +
dec eax  +
jz loc_1009EAA  +
dec eax  +
jz loc_1009EA3  +
sub eax 0Ah +
jz loc_1009E9C  +
mov eax offset aBadErrorValue +
jmp loc_1009EBD  +
mov eax offset aNoChange +
jmp loc_1009EBD  +
mov eax offset aQueryRefused +
jmp loc_1009EBD  +
mov eax offset aNotImplemented +
jmp loc_1009EBD  +
mov eax offset aNonExistentDom +
jmp loc_1009EBD  +
mov eax offset aServerFailed +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push offset aIn  +
push esi  +
call sub_100C94F  +
test eax eax +
jnz loc_1009EE1  +
inc eax  +
jmp loc_1009F48  +
push offset aHesiod  +
push esi  +
call sub_100C94F  +
test eax eax +
jz loc_1009F45  +
push offset aHs  +
push esi  +
call sub_100C94F  +
test eax eax +
jz loc_1009F45  +
push offset aChaos  +
push esi  +
call sub_100C94F  +
test eax eax +
jnz loc_1009F12  +
push 3  +
jmp loc_1009F47  +
push offset aAny  +
push esi  +
call sub_100C94F  +
test eax eax +
jnz loc_1009F28  +
mov eax 0FFh +
jmp loc_1009F48  +
mov eax ds:_iob +
push esi  +
add eax 40h +
push offset aUnknownQueryCl  +
push eax  +
call ds:fprintf  +
mov eax [ebp+arg_4] +
add esp 0Ch +
jmp loc_1009F48  +
push 4  +
pop eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax off_10115D4 +
push esi  +
push edi  +
xor edi edi +
test eax eax +
jz loc_1009F80  +
mov esi offset off_10115D4 +
push eax  +
push [ebp+arg_0]  +
call sub_100C94F  +
test eax eax +
jz loc_1009FA3  +
add esi 0Ch +
mov eax [esi] +
inc edi  +
test eax eax +
jnz loc_1009F69  +
push [ebp+arg_0]  +
mov eax ds:_iob +
add eax 40h +
push offset aUnknownQueryTy  +
push eax  +
call ds:fprintf  +
mov eax [ebp+arg_4] +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
imul edi edi +
movzx eax word_10115D0[edi] +
jmp loc_1009F9D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word_10115D0 +
xor edx edx +
test ax ax +
jz loc_1009FE0  +
mov ecx offset word_10115D0 +
movzx eax ax +
cmp eax [ebp+arg_0] +
jz loc_100A000  +
add ecx 0Ch +
movzx eax word ptr [ecx] +
inc edx  +
test ax ax +
jnz loc_1009FCC  +
push esi  +
push [ebp+arg_0]  +
mov esi offset unk_1016690 +
push offset aD_0  +
push 14h  +
push esi  +
call sprintf_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
imul edx edx +
mov eax off_10115D8[edx] +
jmp loc_1009FFC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word_10115D0 +
xor edx edx +
test ax ax +
jz loc_100A03C  +
mov ecx offset word_10115D0 +
movzx eax ax +
cmp eax [ebp+arg_0] +
jz loc_100A05C  +
add ecx 0Ch +
movzx eax word ptr [ecx] +
inc edx  +
test ax ax +
jnz loc_100A028  +
push esi  +
push [ebp+arg_0]  +
mov esi offset unk_1016690 +
push offset aD_0  +
push 14h  +
push esi  +
call sprintf_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
imul edx edx +
mov eax off_10115D4[edx] +
jmp loc_100A058  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word_10117EC +
xor edx edx +
test ax ax +
jz loc_100A098  +
mov ecx offset word_10117EC +
movzx eax ax +
cmp eax [ebp+arg_0] +
jz loc_100A0B8  +
add ecx 0Ch +
movzx eax word ptr [ecx] +
inc edx  +
test ax ax +
jnz loc_100A084  +
push esi  +
push [ebp+arg_0]  +
mov esi offset unk_1016690 +
push offset aD_0  +
push 14h  +
push esi  +
call sprintf_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
imul edx edx +
mov eax off_10117F0[edx] +
jmp loc_100A0B4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word_1011828 +
xor edx edx +
test ax ax +
jz loc_100A0F4  +
mov ecx offset word_1011828 +
movzx eax ax +
cmp eax [ebp+arg_0] +
jz loc_100A114  +
add ecx 0Ch +
movzx eax word ptr [ecx] +
inc edx  +
test ax ax +
jnz loc_100A0E0  +
push esi  +
push [ebp+arg_0]  +
mov esi offset unk_1016690 +
push offset aD_0  +
push 14h  +
push esi  +
call sprintf_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
imul edx edx +
mov eax off_101182C[edx] +
jmp loc_100A110  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_4] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
xor eax eax +
push eax  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push [ebp+dwMessageId]  +
push eax  +
push 900h  +
call ds:FormatMessageA  +
neg eax  +
sbb eax eax +
and eax dword ptr [ebp+Buffer] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+dwMessageId]  +
call sub_100A124  +
mov edi [ebp+arg_8] +
push dword ptr [edi]  +
mov esi ds:fprintf +
push eax  +
push offset a7sS  +
push [ebp+arg_0]  +
call esi  +
mov eax [edi+8] +
add esp 14h +
test eax eax +
jz loc_100A1F6  +
cmp dword ptr [eax+4] 1 +
jbe loc_100A197  +
push offset aAddresses  +
jmp loc_100A19C  +
push offset aAddress_0  +
push [ebp+arg_0]  +
call esi  +
mov eax [edi+8] +
xor ebx ebx +
pop ecx  +
pop ecx  +
cmp [eax+4] ebx +
jbe loc_100A1F6  +
and [ebp+dwMessageId] ebx +
test ebx ebx +
jz loc_100A1C0  +
push offset asc_100271C  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
mov eax [edi+8] +
mov ecx [ebp+dwMessageId] +
lea eax [eax+ecx+20h] +
push eax  +
call sub_100D544  +
test eax eax +
jnz loc_100A1D9  +
mov eax offset aNull +
push eax  +
push 20h  +
push offset aCS_0  +
push [ebp+arg_0]  +
call esi  +
mov eax [edi+8] +
add [ebp+dwMessageId] 40h +
add esp 10h +
inc ebx  +
cmp ebx [eax+4] +
jb loc_100A1B0  +
cmp dword ptr [edi+4] 0 +
jz loc_100A249  +
push offset aAliases  +
push [ebp+arg_0]  +
call esi  +
mov ebx [edi+4] +
and [ebp+dwMessageId] 0 +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100A249  +
mov eax [ebx] +
test eax eax +
jz loc_100A249  +
cmp byte ptr [eax] 0 +
jz loc_100A249  +
cmp [ebp+dwMessageId] 0 +
jz loc_100A230  +
push offset asc_100271C  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
push dword ptr [ebx]  +
push 20h  +
push offset aCS_0  +
push [ebp+arg_0]  +
call esi  +
add esp 10h +
inc [ebp+dwMessageId]  +
add ebx 4 +
jnz loc_100A213  +
cmp dword ptr [edi+0Ch] 0 +
jz loc_100A339  +
push offset aServedBy  +
push [ebp+arg_0]  +
call esi  +
mov edi [edi+0Ch] +
jmp loc_100A32D  +
push dword ptr [eax]  +
push offset aS_0  +
push [ebp+arg_0]  +
call esi  +
mov eax [edi] +
mov eax [eax+8] +
add esp 0Ch +
test eax eax +
jz loc_100A2D1  +
xor ebx ebx +
cmp [eax+4] ebx +
jbe loc_100A2D1  +
and [ebp+dwMessageId] ebx +
test ebx ebx +
jz loc_100A297  +
push offset asc_100271C  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
mov eax [edi] +
mov eax [eax+8] +
mov ecx [ebp+dwMessageId] +
lea eax [eax+ecx+20h] +
push eax  +
call sub_100D544  +
test eax eax +
jnz loc_100A2B2  +
mov eax offset aNull +
push eax  +
push 20h  +
push offset aCS_0  +
push [ebp+arg_0]  +
call esi  +
mov eax [edi] +
mov eax [eax+8] +
add [ebp+dwMessageId] 40h +
add esp 10h +
inc ebx  +
cmp ebx [eax+4] +
jb loc_100A287  +
push offset asc_100271C  +
push [ebp+arg_0]  +
call esi  +
mov eax [edi] +
mov ebx [eax+4] +
and [ebp+dwMessageId] 0 +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100A320  +
mov eax [ebx] +
test eax eax +
jz loc_100A320  +
cmp byte ptr [eax] 0 +
jz loc_100A320  +
cmp [ebp+dwMessageId] 0 +
jz loc_100A307  +
push offset asc_100271C  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
push dword ptr [ebx]  +
push 20h  +
push offset aCS_0  +
push [ebp+arg_0]  +
call esi  +
add esp 10h +
inc [ebp+dwMessageId]  +
add ebx 4 +
jnz loc_100A2EA  +
push offset asc_1001A78  +
push [ebp+arg_0]  +
call esi  +
add edi 4 +
mov eax [edi] +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100A265  +
push offset asc_10026EC  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100C072  +
cmp eax 0FFFFFFFFh +
jnz loc_100A36C  +
xor eax eax +
jmp loc_100A38F  +
add esi eax +
lea eax [esi+0Ah] +
cmp eax [ebp+arg_4] +
ja loc_100A368  +
add esi 8 +
push esi  +
call sub_100C145  +
movzx eax ax +
lea ecx [esi+eax+2] +
cmp [ebp+arg_4] ecx +
sbb eax eax +
not eax  +
and eax ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:ntohs +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
movzx eax word ptr [edi+4] +
push eax  +
lea esi [edi+0Ch] +
call ebx  +
movzx eax ax +
test eax eax +
jz loc_100A3E1  +
dec eax  +
mov [ebp+arg_0] eax +
js loc_100A3E1  +
cmp esi [ebp+arg_8] +
jnb loc_100A3E1  +
push [ebp+arg_8]  +
push esi  +
call sub_100C072  +
cmp eax 0FFFFFFFFh +
jz loc_100A463  +
dec [ebp+arg_0]  +
lea esi [esi+eax+4] +
jns loc_100A3C1  +
dec [ebp+arg_4]  +
cmp [ebp+arg_4] 0 +
jle loc_100A47E  +
movzx eax word ptr [edi+6] +
push eax  +
call ebx  +
movzx eax ax +
test eax eax +
jz loc_100A41B  +
dec eax  +
mov [ebp+arg_0] eax +
js loc_100A41B  +
cmp esi [ebp+arg_8] +
jnb loc_100A41B  +
push [ebp+arg_8]  +
push esi  +
call sub_100A351  +
mov esi eax +
test esi esi +
jz loc_100A463  +
dec [ebp+arg_0]  +
jns loc_100A402  +
dec [ebp+arg_4]  +
jz loc_100A47E  +
movzx eax word ptr [edi+8] +
push eax  +
call ebx  +
movzx eax ax +
test eax eax +
jz loc_100A44D  +
dec eax  +
mov [ebp+arg_0] eax +
js loc_100A44D  +
cmp esi [ebp+arg_8] +
jnb loc_100A44D  +
push [ebp+arg_8]  +
push esi  +
call sub_100A351  +
mov esi eax +
test esi esi +
jz loc_100A463  +
dec [ebp+arg_0]  +
jns loc_100A434  +
mov eax [ebp+arg_4] +
dec eax  +
jz loc_100A47E  +
movzx eax word ptr [edi+0Ah] +
push eax  +
call ebx  +
movzx edi ax +
test edi edi +
jz loc_100A47E  +
jmp loc_100A47B  +
xor eax eax +
jmp loc_100A480  +
cmp esi [ebp+arg_8] +
jnb loc_100A47E  +
push [ebp+arg_8]  +
push esi  +
call sub_100A351  +
mov esi eax +
test esi esi +
jz loc_100A463  +
dec edi  +
jns loc_100A467  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ds:free +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_100A4AC  +
push eax  +
call ebx  +
pop ecx  +
mov [esi] edi +
mov eax [esi+4] +
cmp eax edi +
jz loc_100A4DF  +
mov [ebp+arg_0] edi +
cmp [eax] edi +
jz loc_100A4D6  +
xor eax eax +
mov ecx [esi+4] +
push dword ptr [ecx+eax]  +
call ebx  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [esi+4] +
shl eax 2 +
cmp [eax+ecx] edi +
jnz loc_100A4BC  +
push dword ptr [esi+4]  +
call ebx  +
pop ecx  +
mov [esi+4] edi +
mov eax [esi+8] +
cmp eax edi +
jz loc_100A4EF  +
push eax  +
call sub_100D5BF  +
mov [esi+8] edi +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_100A59E  +
mov [ebp+arg_0] edi +
cmp [eax] edi +
jz loc_100A595  +
mov eax [esi+0Ch] +
mov eax [edi+eax] +
cmp dword ptr [eax] 0 +
jz loc_100A515  +
push dword ptr [eax]  +
call ebx  +
pop ecx  +
mov eax [esi+0Ch] +
mov eax [edi+eax] +
mov eax [eax+4] +
test eax eax +
jz loc_100A560  +
and [ebp+var_4] 0 +
cmp dword ptr [eax] 0 +
jz loc_100A554  +
xor eax eax +
mov ecx [esi+0Ch] +
mov ecx [edi+ecx] +
mov ecx [ecx+4] +
push dword ptr [ecx+eax]  +
call ebx  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
pop ecx  +
mov ecx [esi+0Ch] +
mov ecx [edi+ecx] +
mov ecx [ecx+4] +
shl eax 2 +
cmp dword ptr [eax+ecx] 0 +
jnz loc_100A52D  +
mov eax [esi+0Ch] +
mov eax [edi+eax] +
push dword ptr [eax+4]  +
call ebx  +
pop ecx  +
mov eax [esi+0Ch] +
mov eax [edi+eax] +
mov eax [eax+8] +
test eax eax +
jz loc_100A57D  +
push eax  +
call sub_100D5BF  +
mov eax [esi+0Ch] +
mov eax [edi+eax] +
and dword ptr [eax+8] 0 +
inc [ebp+arg_0]  +
mov edi [ebp+arg_0] +
mov eax [esi+0Ch] +
shl edi 2 +
cmp dword ptr [edi+eax] 0 +
jnz loc_100A505  +
xor edi edi +
push dword ptr [esi+0Ch]  +
call ebx  +
pop ecx  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [eax+4] +
mov ecx [ebp+arg_0] +
mov [ecx+4] edx +
push esi  +
mov esi [eax] +
xor edx edx +
mov [eax+4] edx +
mov [ecx] esi +
mov esi [eax+8] +
mov [eax] edx +
mov [ecx+8] esi +
mov esi [eax+0Ch] +
mov [eax+8] edx +
mov [ecx+0Ch] esi +
mov [eax+0Ch] edx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+8] +
push edi  +
test ecx ecx +
jz loc_100A640  +
mov ebx [ebp+arg_4] +
mov eax [ebx+8] +
test eax eax +
jz loc_100A640  +
mov eax [eax+4] +
add eax [ecx+4] +
push eax  +
call sub_100D675  +
mov edi eax +
test edi edi +
jnz loc_100A615  +
push 0Eh  +
jmp loc_100A642  +
push dword ptr [esi+8]  +
push edi  +
call sub_100D8CA  +
push dword ptr [ebx+8]  +
push edi  +
call sub_100D8CA  +
push dword ptr [esi+8]  +
call sub_100D5BF  +
and dword ptr [esi+8] 0 +
push ebx  +
call sub_100A48C  +
mov [esi+8] edi +
xor eax eax +
jmp loc_100A643  +
push 0Dh  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10040h +
call __alloca_probe  +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push eax  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_1001C] eax +
mov [ebp+var_10010] edi +
mov [ebp+var_10020] edi +
mov [ebp+var_10034] edi +
call sub_100A48C  +
lea eax [ebp+var_10030] +
push eax  +
push 10000h  +
lea eax [ebp+var_10004] +
push eax  +
push [ebp+arg_4]  +
push ebx  +
push esi  +
call sub_100B623  +
mov esi eax +
cmp esi edi +
jz loc_100A6D6  +
test dword_1011970 80000000h +
jz loc_100A6CF  +
push 0CAh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_100B0B0  +
test byte ptr [ebp+var_10004+3] 0Fh +
mov eax [ebp+var_10030] +
lea eax [ebp+eax+var_10004] +
mov [ebp+var_1000C] eax +
jz loc_100A701  +
movzx eax byte ptr [ebp+var_10004+3] +
and eax 0Fh +
jmp loc_100B0B0  +
push dword ptr [ebp+netshort]  +
mov esi ds:ntohs +
call esi  +
push dword ptr [ebp-0FFFEh]  +
movzx ebx ax +
call esi  +
push [ebp+var_FFFC]  +
movzx edi ax +
call esi  +
push [ebp+var_FFFC+2]  +
movzx eax ax +
mov [ebp+var_10028] eax +
call esi  +
movzx eax ax +
mov [ebp+var_10024] eax +
test edi edi +
jnz loc_100A756  +
cmp [ebp+var_10028] edi +
jnz loc_100A756  +
test eax eax +
jnz loc_100A756  +
push 0FFFFFFFEh  +
jmp loc_100B0AF  +
mov [ebp+var_10018] offset unk_1019E80 +
mov [ebp+var_10014] 201h +
lea esi [ebp+var_FFF8] +
jmp loc_100A783  +
push [ebp+var_1000C]  +
dec ebx  +
push esi  +
call sub_100C072  +
lea esi [esi+eax+4] +
test ebx ebx +
jg loc_100A772  +
and [ebp+var_1002C] 0 +
xor ebx ebx +
inc ebx  +
mov [ebp+var_10038] offset dword_1019DF0 +
test edi edi +
jz loc_100AA65  +
cmp [ebp+arg_10] 0 +
jnz loc_100A7C0  +
test byte ptr [ebp+var_10004+2] 4 +
jnz loc_100A7C0  +
push 0CBh  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
cmp [ebp+arg_0] ebx +
jz loc_100A7DF  +
cmp [ebp+arg_0] 1Ch +
jz loc_100A7DF  +
cmp [ebp+arg_8] 0 +
jz loc_100A8E0  +
cmp [ebp+arg_0] 0Ch +
jnz loc_100A8E0  +
dec edi  +
mov [ebp+var_1003C] edi +
js loc_100AA65  +
cmp esi [ebp+var_1000C] +
jnb loc_100AA65  +
push [ebp+var_10014]  +
lea eax [ebp+var_10004] +
push [ebp+var_10018]  +
push esi  +
push [ebp+var_1000C]  +
push eax  +
call sub_100BF88  +
mov [ebp+var_10030] eax +
test eax eax +
jl loc_100A8EE  +
add esi eax +
push esi  +
call sub_100C145  +
inc esi  +
inc esi  +
push esi  +
movzx edi ax +
call sub_100C145  +
add esi 6 +
push esi  +
movzx ebx ax +
call sub_100C145  +
inc esi  +
movzx eax ax +
inc esi  +
mov [ebp+var_10008] eax +
cmp edi 5 +
jnz loc_100A8F5  +
add esi eax +
cmp [ebp+var_10038] offset unk_1019E78 +
jnb loc_100AA0F  +
mov ecx [ebp+var_10038] +
mov eax [ebp+var_10018] +
add [ebp+var_10038] 4 +
mov [ecx] eax +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100A882  +
sub eax ecx +
mov ecx [ebp+var_10010] +
inc eax  +
inc [ebp+var_10010]  +
add [ebp+var_10018] eax +
sub [ebp+var_10014] eax +
mov [ebp+var_10030] eax +
mov dword_1019D60[ecx*4] eax +
jmp loc_100AA0F  +
cmp esi [ebp+var_1000C] +
jnb loc_100A8E3  +
mov eax ds:_iob +
add eax 20h +
push eax  +
push [ebp+var_1000C]  +
lea eax [ebp+var_10004] +
push eax  +
push esi  +
call sub_10078E8  +
mov esi eax +
test esi esi +
jz loc_100A8EE  +
dec edi  +
jns loc_100A8B6  +
mov [ebp+var_10034] ebx +
jmp loc_100AA65  +
push 0FFFFFFFDh  +
jmp loc_100B0AF  +
cmp edi 0Ch +
jnz loc_100A92E  +
push [ebp+var_10014]  +
lea eax [ebp+var_10004] +
push [ebp+var_10018]  +
push esi  +
push [ebp+var_1000C]  +
push eax  +
call sub_100BF88  +
mov [ebp+var_10030] eax +
test eax eax +
jge loc_100AA1D  +
add esi eax +
jmp loc_100AA0F  +
cmp edi 1 +
jz loc_100A938  +
cmp edi 1Ch +
jnz loc_100A949  +
cmp [ebp+var_1002C] 0 +
jz loc_100A954  +
cmp ebx [ebp+var_10040] +
jz loc_100A9BD  +
add esi [ebp+var_10008] +
jmp loc_100AA0F  +
mov eax [ebp+var_10018] +
mov [ebp+var_10040] ebx +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100A963  +
sub eax ecx +
lea ebx [eax+1] +
push ebx  +
push 1  +
call sub_1009D5C  +
mov ecx [ebp+var_1001C] +
mov [ecx] eax +
test eax eax +
jz loc_100AA48  +
push ebx  +
push [ebp+var_10018]  +
push eax  +
call memcpy  +
add esp 0Ch +
push 0DACh  +
call sub_100D675  +
mov ecx [ebp+var_1001C] +
mov [ecx+8] eax +
test eax eax +
jz loc_100AA48  +
push 0DACh  +
push eax  +
call sub_100D5A5  +
cmp edi 1 +
jnz loc_100A9D5  +
mov eax [ebp+var_1001C] +
push 0  +
push esi  +
push dword ptr [eax+8]  +
call sub_100D7FF  +
jmp loc_100A9ED  +
cmp edi 1Ch +
jnz loc_100A9ED  +
mov eax [ebp+var_1001C] +
push 0  +
push 0  +
push esi  +
push dword ptr [eax+8]  +
call sub_100D81E  +
add esi [ebp+var_10008] +
cmp [ebp+var_10020] 0DACh +
jge loc_100AA0F  +
inc [ebp+var_10020]  +
mov [ebp+var_1002C] 1 +
dec [ebp+var_1003C]  +
jns loc_100A7EC  +
jmp loc_100AA65  +
mov eax [ebp+var_10018] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100AA26  +
sub eax ecx +
lea esi [eax+1] +
xor edi edi +
push esi  +
inc edi  +
push edi  +
call sub_1009D5C  +
mov ecx [ebp+var_1001C] +
mov [ecx] eax +
test eax eax +
jnz loc_100AA4F  +
push 0Eh  +
jmp loc_100B0AF  +
push esi  +
push [ebp+var_10018]  +
push eax  +
call memcpy  +
add esp 0Ch +
mov [ebp+var_1002C] edi +
mov esi [ebp+arg_0] +
cmp esi 1 +
jz loc_100AA7B  +
cmp esi 1Ch +
jz loc_100AA7B  +
cmp esi 0Ch +
jnz loc_100AB18  +
xor edi edi +
cmp [ebp+var_1002C] edi +
jz loc_100AB1A  +
mov esi [ebp+var_10010] +
cmp esi edi +
jle loc_100AB08  +
push 4  +
lea eax [esi+1] +
push eax  +
call sub_1009D5C  +
mov ecx [ebp+var_1001C] +
mov [ecx+4] eax +
cmp eax edi +
jz loc_100AA48  +
xor ebx ebx +
cmp esi edi +
jle loc_100AAFC  +
mov esi ebx +
shl esi 2 +
lea edi dword_1019D60[esi] +
push dword ptr [edi]  +
push 1  +
call sub_1009D5C  +
mov ecx [ebp+var_1001C] +
mov edx [ecx+4] +
mov [esi+edx] eax +
mov eax [ecx+4] +
add eax esi +
cmp dword ptr [eax] 0 +
jz loc_100AA48  +
push dword ptr [edi]  +
push dword_1019DF0[esi]  +
push dword ptr [eax]  +
call memcpy  +
add esp 0Ch +
inc ebx  +
cmp ebx [ebp+var_10010] +
jl loc_100AAB1  +
xor edi edi +
mov eax [ebp+var_1001C] +
mov eax [eax+4] +
mov [eax+ebx*4] edi +
mov eax [ebp+var_1001C] +
mov [eax+0Ch] edi +
xor eax eax +
jmp loc_100B0B0  +
xor edi edi +
test byte ptr [ebp+var_10004+2] 4 +
jnz loc_100AB4E  +
cmp esi 1 +
jz loc_100AB4E  +
cmp esi 1Ch +
jz loc_100AB4E  +
cmp [ebp+var_10028] edi +
jg loc_100AB3D  +
cmp [ebp+var_10024] edi +
jle loc_100AB4E  +
cmp [ebp+var_10034] edi +
jz loc_100AB4E  +
push 0Ah  +
call ds:putchar  +
pop ecx  +
push [ebp+var_1000C]  +
lea eax [ebp+var_10004] +
push 2  +
push eax  +
call sub_100A399  +
mov [ebp+var_10008] eax +
cmp eax edi +
jz loc_100A8EE  +
mov [ebp+var_10010] edi +
cmp esi 1 +
jz loc_100AB84  +
cmp esi 1Ch +
jnz loc_100AC8A  +
dec [ebp+var_10028]  +
js loc_100AD9C  +
mov ebx offset unk_101A424 +
mov eax [ebp+var_1000C] +
cmp [ebp+var_10008] eax +
jnb loc_100AD9C  +
push [ebp+var_10014]  +
mov edi [ebp+var_10018] +
push edi  +
push [ebp+var_10008]  +
push eax  +
lea eax [ebp+var_10004] +
push eax  +
call sub_100BF88  +
mov [ebp+var_10030] eax +
test eax eax +
jl loc_100A8EE  +
add [ebp+var_10008] eax +
mov eax edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100ABE0  +
sub eax ecx +
lea esi [eax+1] +
push esi  +
push 1  +
call sub_1009D5C  +
mov [ebp+var_10034] eax +
test eax eax +
jz loc_100AA48  +
push esi  +
push edi  +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+var_10008]  +
call sub_100C145  +
add [ebp+var_10008] 2 +
push [ebp+var_10008]  +
movzx esi ax +
call sub_100C145  +
add [ebp+var_10008] 6 +
push [ebp+var_10008]  +
call sub_100C145  +
add [ebp+var_10008] 2 +
movzx eax ax +
cmp esi 2 +
jz loc_100AC97  +
add [ebp+var_10008] eax +
jmp loc_100AD90  +
cmp eax [ebp+var_1000C] +
jnb loc_100AD9C  +
mov ecx ds:_iob +
add ecx 20h +
push ecx  +
push [ebp+var_1000C]  +
lea ecx [ebp+var_10004] +
push ecx  +
push eax  +
call sub_10078E8  +
cmp eax edi +
jz loc_100A8EE  +
dec [ebp+var_10028]  +
jns loc_100AC59  +
jmp loc_100AD9C  +
push [ebp+var_10014]  +
lea eax [ebp+var_10004] +
push edi  +
push [ebp+var_10008]  +
push [ebp+var_1000C]  +
push eax  +
call sub_100BF88  +
mov [ebp+var_10030] eax +
test eax eax +
jl loc_100A8EE  +
add [ebp+var_10008] eax +
mov eax edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100ACCF  +
sub eax ecx +
lea esi [eax+1] +
push esi  +
push 1  +
call sub_1009D5C  +
mov edi eax +
test edi edi +
jz loc_100AA48  +
push esi  +
push [ebp+var_10018]  +
push edi  +
call memcpy  +
xor esi esi +
add esp 0Ch +
cmp [ebp+var_10010] esi +
jle loc_100AD59  +
mov [ebp+var_10020] offset dword_101A420 +
mov eax [ebp+var_10020] +
mov eax [eax] +
mov ecx edi +
mov dl [ecx] +
cmp dl [eax] +
jnz loc_100AD39  +
test dl dl +
jz loc_100AD35  +
mov dl [ecx+1] +
cmp dl [eax+1] +
jnz loc_100AD39  +
inc ecx  +
inc ecx  +
inc eax  +
inc eax  +
test dl dl +
jnz loc_100AD1B  +
xor eax eax +
jmp loc_100AD3E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100ADDA  +
add [ebp+var_10020] 9Ch +
inc esi  +
cmp esi [ebp+var_10010] +
jl loc_100AD11  +
cmp ebx offset dword_101AA3C +
jge loc_100AD9C  +
mov eax [ebp+var_10034] +
and dword ptr [ebx+94h] 0 +
and dword ptr [ebx+8Ch] 0 +
inc [ebp+var_10010]  +
mov [ebx-4] edi +
mov [ebx] eax +
mov dword ptr [ebx+90h] 1 +
add ebx 9Ch +
dec [ebp+var_10028]  +
jns loc_100AB95  +
push [ebp+var_1000C]  +
lea eax [ebp+var_10004] +
push 3  +
push eax  +
call sub_100A399  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jnz loc_100ADC4  +
cmp [ebp+var_10024] ebx +
jnz loc_100A8EE  +
cmp [ebp+arg_0] 1 +
jz loc_100AF65  +
cmp [ebp+arg_0] 1Ch +
jz loc_100AF65  +
jmp loc_100AE3F  +
push edi  +
call ds:free  +
mov eax esi +
imul eax eax +
lea eax dword_101A4B4[eax] +
inc dword ptr [eax]  +
mov eax [eax] +
pop ecx  +
cmp eax 23h +
ja loc_100AD90  +
imul esi esi +
add esi eax +
mov eax [ebp+var_10034] +
mov dword_101A420[esi*4] eax +
jmp loc_100AD90  +
cmp edi [ebp+var_1000C] +
jnb loc_100AF71  +
mov eax ds:_iob +
add eax 20h +
push eax  +
push [ebp+var_1000C]  +
lea eax [ebp+var_10004] +
push eax  +
push edi  +
call sub_10078E8  +
mov edi eax +
cmp edi ebx +
jz loc_100A8EE  +
dec [ebp+var_10024]  +
jns loc_100AE0D  +
jmp loc_100AF71  +
cmp edi [ebp+var_1000C] +
jnb loc_100AF71  +
push [ebp+var_10014]  +
lea eax [ebp+var_10004] +
push [ebp+var_10018]  +
push edi  +
push [ebp+var_1000C]  +
push eax  +
call sub_100BF88  +
cmp eax ebx +
mov [ebp+var_10030] eax +
jl loc_100AF71  +
add edi eax +
push edi  +
call sub_100C145  +
inc edi  +
inc edi  +
push edi  +
movzx esi ax +
call sub_100C145  +
add edi 6 +
push edi  +
call sub_100C145  +
inc edi  +
movzx eax ax +
inc edi  +
mov [ebp+var_10008] eax +
cmp esi 1 +
jz loc_100AEBD  +
cmp esi 1Ch +
jz loc_100AEBD  +
add edi eax +
jmp loc_100AF65  +
xor eax eax +
cmp [ebp+var_10010] ebx +
jle loc_100AF5F  +
mov esi offset unk_101A4B8 +
mov ecx [esi-98h] +
mov edx [ebp+var_10018] +
mov bl [edx] +
cmp bl [ecx] +
jnz loc_100AEFA  +
test bl bl +
jz loc_100AEF6  +
mov bl [edx+1] +
cmp bl [ecx+1] +
jnz loc_100AEFA  +
inc edx  +
inc edx  +
inc ecx  +
inc ecx  +
test bl bl +
jnz loc_100AEDC  +
xor ecx ecx +
jmp loc_100AEFF  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
xor ebx ebx +
cmp ecx ebx +
jnz loc_100AF0F  +
inc dword ptr [esi]  +
cmp dword ptr [esi] 0DACh +
jbe loc_100AF20  +
inc eax  +
add esi 9Ch +
cmp eax [ebp+var_10010] +
jl loc_100AED0  +
jmp loc_100AF5F  +
imul eax eax +
push 1  +
lea esi dword_101A4B0[eax] +
mov eax [esi] +
push 1  +
push eax  +
call sub_100D6C2  +
cmp [ebp+var_10008] 4 +
mov [esi] eax +
jnz loc_100AF4D  +
push ebx  +
push edi  +
push eax  +
call sub_100D7FF  +
jmp loc_100AF5F  +
cmp [ebp+var_10008] 10h +
jnz loc_100AF5F  +
push ebx  +
push ebx  +
push edi  +
push eax  +
call sub_100D81E  +
add edi [ebp+var_10008] +
dec [ebp+var_10024]  +
jns loc_100AE4C  +
mov esi [ebp+var_10010] +
cmp esi ebx +
jle loc_100B099  +
push 4  +
lea eax [esi+1] +
push eax  +
call sub_1009D5C  +
mov ecx [ebp+var_1001C] +
mov [ecx+0Ch] eax +
cmp eax ebx +
jz loc_100AA48  +
cmp esi ebx +
mov [ebp+var_10014] ebx +
jle loc_100B085  +
mov ebx offset dword_101A4B4 +
mov edi ecx +
mov esi [ebp+var_10014] +
push 0Ch  +
push 1  +
shl esi 2 +
call sub_1009D5C  +
mov ecx [edi+0Ch] +
mov [esi+ecx] eax +
mov eax [edi+0Ch] +
add eax esi +
cmp dword ptr [eax] 0 +
jz loc_100AA48  +
mov eax [eax] +
mov ecx [ebx-94h] +
mov [eax] ecx +
mov eax [ebx] +
mov [ebp+var_1002C] eax +
cmp eax 0FFFFh +
ja loc_100AA48  +
push 4  +
inc eax  +
push eax  +
call sub_1009D5C  +
test eax eax +
jz loc_100AA48  +
xor ecx ecx +
cmp [ebp+var_1002C] ecx +
jle loc_100B035  +
lea edx [ebx-90h] +
mov [ebp+var_10020] edx +
mov edx [ebp+var_10020] +
mov edx [edx] +
add [ebp+var_10020] 4 +
mov [eax+ecx*4] edx +
inc ecx  +
cmp ecx [ebp+var_1002C] +
jl loc_100B01A  +
xor edx edx +
mov [eax+ecx*4] edx +
mov ecx [edi+0Ch] +
mov ecx [esi+ecx] +
mov [ecx+4] eax +
cmp [ebx+4] edx +
jbe loc_100B05E  +
push 1  +
push edx  +
push dword ptr [ebx-4]  +
call sub_100D6C2  +
mov ecx [edi+0Ch] +
mov ecx [esi+ecx] +
mov [ecx+8] eax +
jmp loc_100B067  +
mov eax [edi+0Ch] +
mov eax [esi+eax] +
mov [eax+8] edx +
inc [ebp+var_10014]  +
mov eax [ebp+var_10014] +
add ebx 9Ch +
cmp eax [ebp+var_10010] +
jl loc_100AFB0  +
mov eax [ebp+var_1001C] +
mov eax [eax+0Ch] +
mov ecx [ebp+var_10014] +
xor ebx ebx +
mov [eax+ecx*4] ebx +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_100B0AD  +
sub eax 0Bh +
jz loc_100B0C1  +
sub eax 10h +
jnz loc_100AB11  +
push 0FFFFFFFCh  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 14h  +
cmp [ebp+arg_8] ebx +
jz loc_100AB11  +
jmp loc_100A74F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10214h +
call __alloca_probe  +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [ebp+var_10210] eax +
mov eax [ebp+arg_14] +
push ebx  +
mov ebx [ebp+arg_10] +
mov [ebp+var_10214] eax +
push esi  +
lea eax [ebp+var_208] +
push edi  +
mov [ebp+var_1020C] eax +
test ebx ebx +
jnz loc_100B15A  +
mov eax ecx +
lea esi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B11D  +
sub eax esi +
lea esi [eax-1] +
cmp byte ptr [ecx+esi] 2Eh +
jnz loc_100B152  +
cmp esi 201h +
jnb loc_100B152  +
push esi  +
push ecx  +
lea eax [ebp+var_208] +
push eax  +
call memcpy  +
add esp 0Ch +
mov byte ptr [ebp+esi+var_208] 0 +
jmp loc_100B1B6  +
mov [ebp+var_1020C] ecx +
jmp loc_100B1B6  +
mov esi 100h +
test ecx ecx +
jz loc_100B17D  +
mov eax ecx +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B168  +
sub eax edi +
cmp eax esi +
jbe loc_100B17D  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_100B262  +
mov eax ebx +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B182  +
sub eax edi +
cmp eax esi +
ja loc_100B175  +
push ebx  +
push ecx  +
push offset aS_S  +
lea eax [ebp+var_208] +
push 202h  +
push eax  +
call sprintf_s  +
lea eax [ebp+var_208] +
add esp 14h +
mov [ebp+var_1020C] eax +
push 10000h  +
lea eax [ebp+var_10208] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_1020C]  +
push edi  +
call sub_100C7D2  +
cmp eax edi +
jge loc_100B1F3  +
test byte ptr dword_1011970 2 +
jz loc_100B175  +
push 8  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
jmp loc_100B175  +
push [ebp+arg_18]  +
mov ebx [ebp+var_10214] +
mov ecx [ebp+var_10210] +
push ebx  +
push edi  +
push eax  +
push [ebp+arg_8]  +
lea edx [ebp+var_10208] +
call sub_100A64F  +
mov [ebp+var_10210] eax +
cmp eax 0FFFFFFFCh +
jnz loc_100B25C  +
cmp [ebx] edi +
jnz loc_100B25C  +
mov eax [ebp+var_1020C] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B22B  +
sub eax ecx +
lea esi [eax+1] +
push 1  +
push esi  +
call sub_1009D5C  +
mov [ebx] eax +
cmp eax edi +
jnz loc_100B24C  +
push 0Eh  +
jmp loc_100B177  +
push esi  +
push [ebp+var_1020C]  +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+var_10210] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1010Ch +
call __alloca_probe  +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
cmp word ptr [esi] 2 +
push edi  +
mov [ebp+var_10108] eax +
mov [ebp+var_1010C] esi +
jnz loc_100B2E1  +
push dword ptr [esi+4]  +
lea eax [ebp+var_104] +
push eax  +
call sub_100D1AB  +
test eax eax +
jnz loc_100B2E1  +
test byte ptr dword_1011970 2 +
jz loc_100B2D9  +
push 0D3h  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_100B39D  +
cmp word ptr [esi] 17h +
jnz loc_100B313  +
sub esp 10h +
add esi 8 +
mov edi esp +
movs   +
movs   +
movs   +
lea eax [ebp+var_104] +
push eax  +
movs   +
call sub_100D1E8  +
test eax eax +
jnz loc_100B313  +
test byte ptr dword_1011970 2 +
jz loc_100B2D9  +
push 0D4h  +
jmp loc_100B2D0  +
push 10000h  +
lea eax [ebp+var_10104] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push 0Ch  +
xor esi esi +
inc esi  +
push esi  +
lea eax [ebp+var_104] +
push eax  +
push edi  +
call sub_100C7D2  +
cmp eax edi +
jge loc_100B34B  +
test byte ptr dword_1011970 2 +
jz loc_100B2D9  +
push 0CDh  +
jmp loc_100B2D0  +
mov ecx [ebp+var_10108] +
push esi  +
push ebx  +
push esi  +
push eax  +
push 0Ch  +
lea edx [ebp+var_10104] +
call sub_100A64F  +
mov [ebp+var_10108] eax +
cmp eax edi +
jnz loc_100B397  +
push esi  +
call sub_100D675  +
mov [ebx+8] eax +
cmp eax edi +
jnz loc_100B380  +
push 0Eh  +
jmp loc_100B2DB  +
push esi  +
push eax  +
call sub_100D5A5  +
push edi  +
push edi  +
push [ebp+var_1010C]  +
push dword ptr [ebx+8]  +
call sub_100D76B  +
mov eax [ebp+var_10108] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp [ebp+arg_8] 0FF03h +
jz loc_100B3E3  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B0D4  +
jmp locret_100B48F  +
xor eax eax +
push esi  +
push edi  +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_14] +
push edi  +
call sub_100A48C  +
push [ebp+arg_18]  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B0D4  +
push 1  +
mov esi eax +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 1Ch  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B0D4  +
test esi esi +
jnz loc_100B45D  +
test eax eax +
jnz loc_100B46F  +
cmp [ebp+var_8] eax +
jz loc_100B461  +
cmp [ebp+var_18] eax +
jz loc_100B461  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A5E3  +
test eax eax +
jz loc_100B461  +
push 0Eh  +
pop esi  +
jmp loc_100B479  +
test eax eax +
jnz loc_100B46F  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
call sub_100A5AA  +
xor esi esi +
jmp loc_100B479  +
lea eax [ebp+var_20] +
push eax  +
push edi  +
call sub_100A5AA  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A48C  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A48C  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_8] 1 +
mov [ebp+var_4] edi +
jz loc_100B4C0  +
cmp [ebp+arg_8] 1Ch +
jz loc_100B4C0  +
cmp [ebp+arg_8] 0FF03h +
jnz loc_100B53A  +
push ebx  +
lea eax [ebp+var_44] +
push eax  +
call sub_100D26A  +
test eax eax +
jz loc_100B53A  +
mov eax ebx +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B4D3  +
sub eax esi +
lea edi [eax+3] +
push 1  +
push edi  +
call sub_1009D5C  +
mov esi [ebp+arg_10] +
mov [esi] eax +
test eax eax +
jnz loc_100B4F7  +
push 0Eh  +
jmp loc_100B5F8  +
push ebx  +
push offset aS_11  +
push edi  +
push eax  +
call sprintf_s  +
add esp 10h +
xor edi edi +
push 1  +
mov [esi+4] edi +
mov [esi+0Ch] edi +
call sub_100D675  +
mov [esi+8] eax +
cmp eax edi +
jz loc_100B4F0  +
push 1  +
push eax  +
call sub_100D5A5  +
push edi  +
push edi  +
lea eax [ebp+var_44] +
push eax  +
push dword ptr [esi+8]  +
call sub_100D76B  +
xor eax eax +
jmp loc_100B5F9  +
mov cl [ebx] +
push 3  +
pop eax  +
mov esi ebx +
mov [ebp+arg_C] edi +
test cl cl +
jz loc_100B55C  +
cmp cl 2Eh +
jnz loc_100B550  +
inc [ebp+arg_C]  +
inc esi  +
mov cl [esi] +
test cl cl +
jnz loc_100B548  +
cmp [ebp+arg_C] edi +
jnz loc_100B56A  +
test byte ptr dword_1011970 80h +
jnz loc_100B57C  +
jmp loc_100B5F9  +
cmp byte ptr [esi-1] 2Eh +
jz loc_100B5CE  +
test dword_1011970 200h +
jz loc_100B5CE  +
mov esi offset dword_1014BA4 +
cmp dword_1014BA4 edi +
jz loc_100B5CE  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push dword ptr [esi]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B3B3  +
cmp eax edi +
jz loc_100B5F9  +
cmp eax 0FFFFFFFBh +
jz loc_100B5F9  +
cmp eax 0FFFFFFFEh +
jnz loc_100B5B1  +
inc [ebp+var_4]  +
cmp eax 3 +
jz loc_100B5BB  +
cmp eax 0FFFFFFFEh +
jnz loc_100B5CE  +
test dword_1011970 200h +
jz loc_100B5CE  +
add esi 4 +
cmp [esi] edi +
jnz loc_100B589  +
cmp [ebp+arg_C] edi +
jz loc_100B5F1  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push edi  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B3B3  +
cmp eax edi +
jz loc_100B533  +
cmp [ebp+var_4] edi +
jz loc_100B5F9  +
push 0FFFFFFFEh  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov eax dword_10118DC +
cmp eax 0FFFFFFFFh +
jz locret_100B61D  +
push eax  +
call ds:closesocket  +
or dword_10118DC 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 344h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
mov [ebp+var_20C] eax +
mov eax [ebp+arg_14] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_240] eax +
xor eax eax +
mov [ebp+var_22C] edi +
mov [ebp+buf] esi +
mov [ebp+len] ebx +
mov [ebp+var_21C] eax +
mov [ebp+var_210] eax +
mov [ebp+var_228] eax +
cmp edi eax +
jnz loc_100B688  +
push 0FFFFFFFBh  +
pop eax  +
jmp loc_100BD0B  +
test dword_1011970 80000000h +
jz loc_100B6AE  +
push ebx  +
push offset aSendrequestLen  +
call ds:printf  +
pop ecx  +
pop ecx  +
push 1  +
lea eax [ebx+esi] +
push eax  +
push esi  +
call sub_10088C8  +
movzx ecx word ptr [edi] +
mov eax 3500h +
cmp cx 2 +
jnz loc_100B6C2  +
mov edx eax +
mov [edi+2] dx +
cmp cx 17h +
jnz loc_100B6CC  +
mov [edi+2] ax +
test byte ptr dword_1011970 8 +
jnz loc_100B6E6  +
cmp ebx 200h +
jg loc_100B6E6  +
and [ebp+var_214] 0 +
jmp loc_100B6F0  +
mov [ebp+var_214] 1 +
and [ebp+var_218] 0 +
mov ebx ds:closesocket +
mov eax esi +
movzx eax word ptr [eax] +
or esi 0FFFFFFFFh +
cmp dword_101196C 0 +
mov [ebp+var_23C] eax +
jg loc_100B750  +
mov eax dword_10118DC +
cmp eax esi +
jz loc_100B726  +
push eax  +
call ebx  +
mov dword_10118DC esi +
cmp [ebp+var_214] 0 +
jnz loc_100BCF8  +
xor eax eax +
cmp [ebp+var_21C] eax +
setnz al  +
lea eax ds:0FFFFFFFBh[eax*4] +
jmp loc_100BD0B  +
mov edi [ebp+var_22C] +
cmp [ebp+var_214] 0 +
jnz loc_100B8EB  +
mov eax dword_10118DC +
cmp eax esi +
jnz loc_100B781  +
movzx eax word ptr [edi] +
push 0  +
push 2  +
push eax  +
call ds:socket  +
mov dword_10118DC eax +
cmp eax esi +
jz loc_100BB46  +
cmp [ebp+var_210] 0 +
jnz loc_100B7A7  +
push dword ptr [edi+20h]  +
push edi  +
push eax  +
call ds:connect  +
cmp eax esi +
jz loc_100BB63  +
mov [ebp+var_210] 1 +
push 0  +
push [ebp+len]  +
push [ebp+buf]  +
push dword_10118DC  +
call ds:send  +
cmp eax esi +
jz loc_100BB7A  +
mov eax dword_1011968 +
mov [ebp+timeout.tv_sec] eax +
test eax eax +
jg loc_100B7E2  +
mov [ebp+timeout.tv_sec] 1 +
and [ebp+timeout.tv_usec] 0 +
mov eax dword_10118DC +
lea ecx [ebp+timeout] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+readfds] +
xor edi edi +
push ecx  +
inc edi  +
push eax  +
mov [ebp+readfds.fd_array] eax +
mov [ebp+readfds.fd_count] edi +
call ds:select  +
test eax eax +
jl loc_100BB8D  +
jz loc_100BB9D  +
push 0  +
push [ebp+arg_10]  +
push [ebp+var_20C]  +
push dword_10118DC  +
call ds:recv  +
mov edi eax +
test edi edi +
jz loc_100BBDA  +
cmp edi esi +
jz loc_100BBDA  +
mov ax word ptr [ebp+var_23C] +
mov ecx [ebp+var_20C] +
mov [ebp+var_21C] 1 +
cmp ax [ecx] +
jz loc_100B89C  +
test dword_1011970 80000000h +
jz loc_100B7E9  +
push offset aOldAnswer  +
call ds:printf  +
mov eax [ebp+var_20C] +
pop ecx  +
push 1  +
lea ecx [eax+edi] +
push ecx  +
push eax  +
call sub_10088C8  +
jmp loc_100B7E9  +
mov al byte ptr dword_1011970 +
test al 20h +
jnz loc_100BC82  +
test byte ptr [ecx+2] 2 +
jz loc_100BC82  +
test al 2 +
jz loc_100B8C3  +
push offset aTruncatedAnswe  +
call ds:printf  +
pop ecx  +
push dword_10118DC  +
mov ebx ds:closesocket +
call ebx  +
or dword_10118DC 0FFFFFFFFh +
mov edi [ebp+var_22C] +
mov [ebp+var_214] 1 +
or esi 0FFFFFFFFh +
and [ebp+var_230] 0 +
mov eax dword_101196C +
mov [ebp+var_218] eax +
cmp dword_10118DC esi +
jnz loc_100B97D  +
movzx eax word ptr [edi] +
push 0  +
push 1  +
push eax  +
call ds:socket  +
mov dword_10118DC eax +
cmp eax esi +
jnz loc_100B940  +
call ds:WSAGetLastError  +
test byte ptr dword_1011970 2 +
jz loc_100BBFB  +
push offset aSocketVcFailed  +
call ds:perror  +
pop ecx  +
jmp loc_100BBFB  +
push dword ptr [edi+20h]  +
push edi  +
push eax  +
call ds:connect  +
cmp eax esi +
jnz loc_100B97D  +
call ds:WSAGetLastError  +
test byte ptr dword_1011970 2 +
jz loc_100B96A  +
push offset aConnectFailed  +
call ds:perror  +
pop ecx  +
push dword_10118DC  +
call ebx  +
mov dword_10118DC esi +
jmp loc_100BBFB  +
push [ebp+len]  +
call ds:htons  +
mov edi ds:send +
movzx eax ax +
push 0  +
mov [ebp+var_208] eax +
push 2  +
lea eax [ebp+var_208] +
push eax  +
push dword_10118DC  +
call edi  +
cmp eax esi +
jz loc_100BB29  +
push 0  +
push [ebp+len]  +
push [ebp+buf]  +
push dword_10118DC  +
call edi  +
cmp eax esi +
jz loc_100BB29  +
mov edi [ebp+var_20C] +
mov [ebp+var_208] 2 +
movzx eax word ptr [ebp+var_208] +
push 0  +
push eax  +
push edi  +
push dword_10118DC  +
call ds:recv  +
mov esi eax +
test esi esi +
jle loc_100BA10  +
sub [ebp+var_208] esi +
add edi esi +
cmp word ptr [ebp+var_208] 0 +
jnz loc_100B9E1  +
cmp esi 0FFFFFFFFh +
jnz loc_100BA66  +
call ds:WSAGetLastError  +
test byte ptr dword_1011970 2 +
mov esi eax +
jz loc_100BA32  +
push offset aReadFailed  +
call ds:perror  +
pop ecx  +
push dword_10118DC  +
call ebx  +
or dword_10118DC 0FFFFFFFFh +
cmp esi 6Fh +
jnz loc_100BBFB  +
cmp [ebp+var_228] 0 +
jnz loc_100BBFB  +
mov [ebp+var_228] 1 +
jmp loc_100BBFB  +
mov ebx [ebp+var_20C] +
movzx eax word ptr [ebx] +
push eax  +
call ds:ntohs  +
movzx edi ax +
cmp edi [ebp+arg_10] +
jbe loc_100BAAD  +
test byte ptr dword_1011970 2 +
jz loc_100BA9D  +
mov eax ds:_iob +
add eax 40h +
push offset aResponseTrunca  +
push eax  +
call ds:fprintf  +
pop ecx  +
pop ecx  +
movzx eax word ptr [ebp+arg_10] +
mov [ebp+var_230] 1 +
jmp loc_100BAB0  +
movzx eax di +
mov [ebp+var_208] eax +
jmp loc_100BADD  +
movzx eax word ptr [ebp+var_208] +
push 0  +
push eax  +
push ebx  +
push dword_10118DC  +
call ds:recv  +
mov esi eax +
test esi esi +
jle loc_100BAE7  +
add ebx esi +
sub [ebp+var_208] esi +
cmp word ptr [ebp+var_208] 0 +
jnz loc_100BAB8  +
cmp esi 0FFFFFFFFh +
jnz loc_100BC1B  +
call ds:WSAGetLastError  +
test byte ptr dword_1011970 2 +
jz loc_100BB0B  +
push offset aReadFailed  +
call ds:perror  +
pop ecx  +
push dword_10118DC  +
call ds:closesocket  +
or dword_10118DC 0FFFFFFFFh +
mov ebx ds:closesocket +
jmp loc_100BBFB  +
call ds:WSAGetLastError  +
test byte ptr dword_1011970 2 +
jz loc_100B96A  +
push offset aWriteFailed  +
jmp loc_100B963  +
call ds:WSAGetLastError  +
test byte ptr dword_1011970 2 +
jz loc_100BBFB  +
push offset aSocketDgFailed  +
jmp loc_100B934  +
test byte ptr dword_1011970 2 +
jz loc_100BBFB  +
push offset aConnect  +
jmp loc_100B934  +
test byte ptr dword_1011970 2 +
jz loc_100BBFB  +
push offset aSend  +
jmp loc_100B934  +
test byte ptr dword_1011970 2 +
jz loc_100BBEF  +
push offset aSelect  +
jmp loc_100BBE8  +
mov esi ds:printf +
push offset aDnsRequestTime  +
call esi  +
push [ebp+timeout.tv_sec]  +
push offset aTimeoutWasDSec  +
call esi  +
add esp 0Ch +
test byte ptr dword_1011970 2 +
jz loc_100BBD2  +
push [ebp+timeout.tv_sec]  +
push offset aTimeoutDSecs  +
call esi  +
pop ecx  +
pop ecx  +
mov [ebp+var_21C] edi +
jmp loc_100BBFB  +
test byte ptr dword_1011970 2 +
jz loc_100BBEF  +
push offset aRecvfrom  +
call ds:perror  +
pop ecx  +
call sub_100B605  +
and [ebp+var_210] 0 +
inc [ebp+var_218]  +
mov eax [ebp+var_218] +
or esi 0FFFFFFFFh +
cmp eax dword_101196C +
jl loc_100B74A  +
jmp loc_100B714  +
cmp [ebp+var_230] 0 +
jz loc_100BC82  +
mov eax [ebp+var_20C] +
or byte ptr [eax+2] 2 +
mov eax edi +
sub eax [ebp+arg_10] +
movzx eax ax +
mov [ebp+var_208] eax +
test ax ax +
jz loc_100BC82  +
mov eax 200h +
mov ecx eax +
cmp word ptr [ebp+var_208] cx +
ja loc_100BC58  +
movzx eax word ptr [ebp+var_208] +
push 0  +
push eax  +
lea eax [ebp+var_204] +
push eax  +
push dword_10118DC  +
call ds:recv  +
test eax eax +
jle loc_100BC82  +
sub [ebp+var_208] eax +
cmp word ptr [ebp+var_208] 0 +
jnz loc_100BC41  +
mov eax dword_1011970 +
test al 2 +
jz loc_100BCD9  +
test eax eax +
jns loc_100BC9E  +
push edi  +
push offset aGotAnswerDByte  +
call ds:printf  +
pop ecx  +
jmp loc_100BCA9  +
push offset aGotAnswer  +
call ds:printf  +
pop ecx  +
movzx eax di +
cmp edi [ebp+arg_10] +
jb loc_100BCB6  +
movzx eax word ptr [ebp+arg_10] +
mov [ebp+var_208] eax +
cmp ax 0Ch +
jb loc_100BCD9  +
movzx eax ax +
add eax [ebp+var_20C] +
push 1  +
push eax  +
push [ebp+var_20C]  +
call sub_10088C8  +
push dword_10118DC  +
call ds:closesocket  +
mov eax [ebp+var_240] +
or dword_10118DC 0FFFFFFFFh +
mov [eax] edi +
xor eax eax +
jmp loc_100BD0B  +
call ds:WSAGetLastError  +
sub eax 72h +
neg eax  +
sbb eax eax +
and eax 2 +
add eax 0FFFFFFFBh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 0  +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
push [ebp+dwMessageId]  +
push 0  +
push 900h  +
call ds:FormatMessageA  +
test eax eax +
jnz loc_100BD53  +
leave   +
retn   +
mov eax [ebp+hMem] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100BD59  +
push esi  +
sub eax edx +
mov esi eax +
push esi  +
push [ebp+hMem]  +
push [ebp+hMem]  +
call ds:CharToOemBuffA  +
push esi  +
push [ebp+hMem]  +
push [ebp+arg_0]  +
call ds:_write  +
add esp 0Ch +
push [ebp+hMem]  +
mov esi eax +
call ds:LocalFree  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
lea ecx [ebp+hMem] +
push ecx  +
push eax  +
push [ebp+hMem]  +
push eax  +
push 900h  +
call ds:FormatMessageA  +
test eax eax +
jz loc_100BDCC  +
push [ebp+arg_4]  +
push [ebp+hMem]  +
call s_perror  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_100BE21  +
dec eax  +
dec eax  +
jz loc_100BE1A  +
dec eax  +
jz loc_100BE13  +
sub eax 0FBh +
jz loc_100BE0C  +
push esi  +
push [ebp+arg_0]  +
mov esi offset unk_101A084 +
push offset aD_0  +
push 28h  +
push esi  +
call sprintf_s  +
add esp 10h +
mov eax esi +
pop esi  +
jmp loc_100BE26  +
mov eax offset aAny +
jmp loc_100BE26  +
mov eax offset aHs +
jmp loc_100BE26  +
mov eax offset aChaos +
jmp loc_100BE26  +
mov eax offset aIn +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 0Ch +
push edi  +
mov edi offset unk_101A084 +
test eax eax +
jnz loc_100BE59  +
push offset a0Secs  +
push 28h  +
push edi  +
call strcpy_s  +
add esp 0Ch +
jmp loc_100BF7C  +
push ebx  +
push esi  +
xor edx edx +
push 3Ch  +
pop ecx  +
div  ecx +
push 18h  +
mov esi edi +
mov [ebp+var_C] edx +
xor edx edx +
div  ecx +
pop ecx  +
mov [ebp+var_4] edx +
xor edx edx +
div  ecx +
mov ecx eax +
mov [ebp+arg_0] edx +
mov [ebp+var_8] ecx +
test ecx ecx +
jz loc_100BEA8  +
mov eax offset byte_1001253 +
cmp ecx 1 +
jz loc_100BE90  +
mov eax offset aS_1 +
push eax  +
push ecx  +
push offset aDDayS  +
push 28h  +
push edi  +
call sprintf_s  +
add esp 14h +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100BEA2  +
xor eax eax +
mov ebx offset dword_101A0AC +
cmp [ebp+arg_0] eax +
jz loc_100BEEC  +
cmp [ebp+var_8] eax +
jz loc_100BEBD  +
mov byte ptr [esi] 20h +
inc esi  +
cmp [ebp+arg_0] 1 +
mov eax offset byte_1001253 +
jz loc_100BECD  +
mov eax offset aS_1 +
push eax  +
push [ebp+arg_0]  +
mov eax ebx +
push offset aDHourS  +
sub eax esi +
push eax  +
push esi  +
call sprintf_s  +
add esp 14h +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100BEE4  +
xor eax eax +
cmp [ebp+var_4] eax +
jz loc_100BF2E  +
cmp [ebp+var_8] eax +
jnz loc_100BEFB  +
cmp [ebp+arg_0] eax +
jz loc_100BEFF  +
mov byte ptr [esi] 20h +
inc esi  +
cmp [ebp+var_4] 1 +
mov eax offset byte_1001253 +
jz loc_100BF0F  +
mov eax offset aS_1 +
push eax  +
push [ebp+var_4]  +
mov eax ebx +
push offset aDMinS  +
sub eax esi +
push eax  +
push esi  +
call sprintf_s  +
add esp 14h +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100BF26  +
xor eax eax +
cmp [ebp+var_C] eax +
jnz loc_100BF42  +
cmp [ebp+var_8] eax +
jnz loc_100BF7A  +
cmp [ebp+arg_0] eax +
jnz loc_100BF7A  +
cmp [ebp+var_4] eax +
jnz loc_100BF7A  +
cmp [ebp+var_8] eax +
jnz loc_100BF51  +
cmp [ebp+arg_0] eax +
jnz loc_100BF51  +
cmp [ebp+var_4] eax +
jz loc_100BF55  +
mov byte ptr [esi] 20h +
inc esi  +
cmp [ebp+var_C] 1 +
mov eax offset byte_1001253 +
jz loc_100BF65  +
mov eax offset aS_1 +
push eax  +
push [ebp+var_C]  +
sub ebx esi +
push offset aDSecS  +
push ebx  +
push esi  +
call sprintf_s  +
add esp 14h +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_10] +
or [ebp+var_8] 0FFFFFFFFh +
and [ebp+var_4] 0 +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
add ecx esi +
mov [ebp+arg_8] ecx +
movzx ecx byte ptr [eax] +
push edi  +
mov edx eax +
jmp loc_100C04E  +
mov edi ecx +
mov ebx 0C0h +
inc edx  +
and edi ebx +
jz loc_100C003  +
cmp edi ebx +
jnz loc_100BFFE  +
cmp [ebp+var_8] 0 +
jge loc_100BFD0  +
mov edi edx +
sub edi eax +
inc edi  +
mov [ebp+var_8] edi +
cmp edx [ebp+arg_4] +
jnb loc_100BFFE  +
movzx edx byte ptr [edx] +
and ecx 3Fh +
shl ecx 8 +
or ecx edx +
add ecx [ebp+arg_0] +
mov edx ecx +
cmp edx [ebp+arg_0] +
jb loc_100BFFE  +
cmp edx [ebp+arg_4] +
jnb loc_100BFFE  +
mov ecx [ebp+arg_4] +
sub ecx [ebp+arg_0] +
add [ebp+var_4] 2 +
cmp [ebp+var_4] ecx +
jl loc_100C04B  +
or eax 0FFFFFFFFh +
jmp loc_100C066  +
cmp esi [ebp+arg_C] +
jz loc_100C011  +
cmp esi [ebp+arg_8] +
jnb loc_100BFFE  +
mov byte ptr [esi] 2Eh +
inc esi  +
lea edi [ecx+esi] +
cmp edi [ebp+arg_8] +
jnb loc_100BFFE  +
mov edi [ebp+var_4] +
lea edi [edi+ecx+1] +
mov [ebp+var_4] edi +
jmp loc_100C048  +
movzx ebx byte ptr [edx] +
inc edx  +
cmp ebx 2Eh +
jnz loc_100C03B  +
lea edi [ecx+esi+2] +
cmp edi [ebp+arg_8] +
jnb loc_100BFFE  +
mov byte ptr [esi] 5Ch +
inc esi  +
cmp esi [ebp+arg_8] +
jnb loc_100BFFE  +
mov [esi] bl +
inc esi  +
cmp edx [ebp+arg_4] +
jnb loc_100BFFE  +
dec ecx  +
jns loc_100C025  +
movzx ecx byte ptr [edx] +
test ecx ecx +
jnz loc_100BFB2  +
cmp [ebp+var_8] ecx +
mov [esi] cl +
jge loc_100C063  +
sub edx eax +
inc edx  +
mov [ebp+var_8] edx +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
cmp edi [ebp+arg_4] +
jnb loc_100C0A9  +
mov edx 0C0h +
movzx esi byte ptr [eax] +
inc eax  +
test esi esi +
jz loc_100C0A9  +
mov ecx esi +
and ecx edx +
jnz loc_100C09F  +
add eax esi +
cmp eax [ebp+arg_4] +
jb loc_100C088  +
jmp loc_100C0A9  +
cmp ecx edx +
jz loc_100C0A8  +
or eax 0FFFFFFFFh +
jmp loc_100C0AB  +
inc eax  +
sub eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
jmp loc_100C129  +
mov ecx [ebx] +
mov edi [ebp+arg_0] +
mov [ebp+var_4] ecx +
movzx esi byte ptr [ecx] +
inc ecx  +
test esi esi +
jz loc_100C121  +
mov edx esi +
mov eax 0C0h +
and edx eax +
jz loc_100C10B  +
cmp edx eax +
jnz loc_100C12E  +
movzx eax byte ptr [ecx] +
and esi 3Fh +
shl esi 8 +
or esi eax +
add esi [ebp+arg_4] +
mov ecx esi +
jmp loc_100C0CB  +
mov dl [edi] +
cmp dl 2Eh +
jz loc_100C126  +
cmp dl 5Ch +
jnz loc_100C101  +
inc edi  +
mov dl [ecx] +
mov al [edi] +
inc ecx  +
inc edi  +
cmp al dl +
jnz loc_100C126  +
dec esi  +
jns loc_100C0F4  +
movzx edx byte ptr [edi] +
inc edi  +
test edx edx +
jnz loc_100C11A  +
cmp [ecx] dl +
jz loc_100C138  +
cmp edx 2Eh +
jz loc_100C0CB  +
jmp loc_100C126  +
cmp byte ptr [edi] 0 +
jz loc_100C138  +
add ebx 4 +
cmp ebx [ebp+arg_8] +
jb loc_100C0C3  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov eax [ebp+var_4] +
sub eax [ebp+arg_4] +
jmp loc_100C131  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx ax byte ptr [ecx] +
movzx ecx byte ptr [ecx+1] +
shl ax 8 +
or eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx eax byte ptr [ecx] +
inc ecx  +
movzx edx byte ptr [ecx] +
shl eax 8 +
or eax edx +
inc ecx  +
movzx edx byte ptr [ecx] +
movzx ecx byte ptr [ecx+1] +
shl eax 8 +
or eax edx +
shl eax 8 +
or eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [ecx+1] al +
shr eax 8 +
mov [ecx] al +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [ecx+3] al +
shr eax 8 +
mov [ecx+2] al +
shr eax 8 +
mov [ecx+1] al +
shr eax 8 +
mov [ecx] al +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
add eax edi +
mov [ebp+var_C] eax +
mov eax [ebp+arg_C] +
xor edx edx +
cmp eax edx +
jz loc_100C221  +
mov ecx [eax] +
add eax 4 +
mov [ebp+var_4] ecx +
mov [ebp+arg_C] eax +
cmp ecx edx +
jz loc_100C224  +
mov [ebp+arg_8] eax +
cmp eax edx +
jz loc_100C219  +
mov eax [ebp+arg_8] +
cmp [eax] edx +
jz loc_100C219  +
add [ebp+arg_8] 4 +
jnz loc_100C20C  +
mov eax [ebp+arg_8] +
mov [ebp+var_8] eax +
jmp loc_100C224  +
mov [ebp+var_4] edx +
mov esi [ebp+arg_0] +
movzx ebx byte ptr [esi] +
inc esi  +
jmp loc_100C2A9  +
cmp [ebp+var_4] edx +
jz loc_100C265  +
push [ebp+var_8]  +
lea eax [esi-1] +
push [ebp+var_4]  +
push eax  +
mov eax [ebp+arg_C] +
call sub_100C0B6  +
test eax eax +
jge loc_100C2C2  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100C265  +
add eax 0FFFFFFFCh +
cmp [ebp+arg_8] eax +
jnb loc_100C265  +
mov eax [ebp+arg_8] +
mov [eax] edi +
add eax 4 +
and dword ptr [eax] 0 +
mov [ebp+arg_8] eax +
mov ecx edi +
inc edi  +
xor edx edx +
cmp ebx 2Eh +
jz loc_100C28E  +
cmp ebx 5Ch +
jnz loc_100C27C  +
movzx ebx byte ptr [esi] +
inc esi  +
cmp ebx edx +
jz loc_100C292  +
cmp edi [ebp+var_C] +
jnb loc_100C2ED  +
mov [edi] bl +
movzx ebx byte ptr [esi] +
inc edi  +
inc esi  +
cmp ebx edx +
jnz loc_100C26A  +
jmp loc_100C292  +
movzx ebx byte ptr [esi] +
inc esi  +
mov eax edi +
sub eax ecx +
dec eax  +
jnz loc_100C29D  +
cmp ebx edx +
jz loc_100C2F9  +
lea edx [eax-1] +
cmp edx 3Eh +
ja loc_100C2FC  +
mov [ecx] al +
xor edx edx +
cmp ebx edx +
jnz loc_100C22D  +
cmp edi [ebp+var_C] +
jnb loc_100C2ED  +
mov byte ptr [edi] 0 +
mov eax edi +
sub eax [ebp+arg_4] +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
lea ecx [edi+1] +
cmp ecx [ebp+var_C] +
jb loc_100C2CF  +
or eax 0FFFFFFFFh +
jmp loc_100C2BB  +
mov edx eax +
sar edx 8 +
or dl 0C0h +
and eax 800000FFh +
mov [edi] dl +
jns loc_100C2E7  +
dec eax  +
or eax 0FFFFFF00h +
inc eax  +
mov [ecx] al +
mov eax ecx +
jmp loc_100C2B7  +
cmp [ebp+var_4] edx +
jz loc_100C2CA  +
mov eax [ebp+var_8] +
mov [eax] edx +
jmp loc_100C2CA  +
dec edi  +
jmp loc_100C2AD  +
cmp [ebp+var_4] 0 +
jz loc_100C2CA  +
mov eax [ebp+var_8] +
and dword ptr [eax] 0 +
jmp loc_100C2CA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 2  +
push [ebp+af]  +
call ds:socket  +
cmp eax 0FFFFFFFFh +
jnz loc_100C32A  +
xor eax eax +
jmp loc_100C334  +
push eax  +
call ds:closesocket  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
and [ebp+var_14] 0 +
push esi  +
mov esi ds:malloc +
push edi  +
push 40h  +
call esi  +
pop ecx  +
mov dword_1011978 eax +
test eax eax +
jnz loc_100C372  +
push 64h  +
push 2  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_100C707  +
push ebx  +
push 2  +
pop ebx  +
push ebx  +
call sub_100C30F  +
test eax eax +
jnz loc_100C390  +
push 17h  +
call sub_100C30F  +
test eax eax +
mov eax offset a1 +
jnz loc_100C395  +
mov eax offset a127_0_0_1 +
push eax  +
push dword_1011978  +
call sub_100D26A  +
test eax eax +
jz loc_100C6F6  +
mov eax dword_1011978 +
mov dword_1011974 1 +
mov ecx 3500h +
cmp [eax] bx +
jnz loc_100C3CD  +
mov edx ecx +
mov [eax+2] dx +
mov eax dword_1011978 +
cmp word ptr [eax] 17h +
jnz loc_100C3D7  +
mov [eax+2] cx +
push offset aRegistryMachin  +
lea eax [ebp+hKey] +
push eax  +
call sub_100F05D  +
test eax eax +
jge loc_100C400  +
push 65h  +
push ebx  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push 57h  +
call ds:SetLastError  +
jmp loc_100C703  +
mov edi 3200h +
push edi  +
call esi  +
mov esi eax +
pop ecx  +
mov [ebp+lpDst] esi +
test esi esi +
jnz loc_100C429  +
push 64h  +
push ebx  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push 8  +
jmp loc_100C3F5  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
push offset aDnslookuporder  +
push [ebp+hKey]  +
call sub_100F0D6  +
test eax eax +
jl loc_100C469  +
mov esi [esi] +
dec esi  +
jz loc_100C469  +
dec esi  +
jz loc_100C460  +
dec esi  +
jz loc_100C457  +
dec esi  +
jnz loc_100C469  +
mov [ebp+var_C] 400h +
jmp loc_100C470  +
mov [ebp+var_C] 800h +
jmp loc_100C470  +
mov [ebp+var_C] 1000h +
jmp loc_100C470  +
mov [ebp+var_C] 2000h +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+lpDst]  +
push offset aDomain  +
push [ebp+hKey]  +
call sub_100F0D6  +
mov ebx 31FFh +
mov esi offset byte_10119A2 +
test eax eax +
jl loc_100C4A4  +
mov eax [ebp+lpDst] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100C499  +
sub eax edx +
jnz loc_100C4BD  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+lpDst]  +
push offset aDhcpdomain  +
push [ebp+hKey]  +
call sub_100F0D6  +
test eax eax +
jl loc_100C4CF  +
push ebx  +
push [ebp+lpDst]  +
push edi  +
push esi  +
call strncpy_s  +
add esp 10h +
and [ebp+var_14] 0 +
push offset aRegistryMach_0  +
lea eax [ebp+var_18] +
push eax  +
call sub_100F05D  +
test eax eax +
jl loc_100C50F  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+lpDst]  +
push offset aSearchlist  +
push [ebp+var_18]  +
call sub_100F0D6  +
test eax eax +
jl loc_100C50F  +
mov ecx [ebp+lpDst] +
lea edx [ecx+1] +
mov [ebp+var_1C] edx +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100C503  +
sub ecx [ebp+var_1C] +
jnz loc_100C524  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+lpDst]  +
push offset aSearchlist  +
push [ebp+hKey]  +
call sub_100F0D6  +
test eax eax +
jl loc_100C5B5  +
mov eax [ebp+lpDst] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100C532  +
sub eax edx +
jz loc_100C5B5  +
push ebx  +
push [ebp+lpDst]  +
push edi  +
push esi  +
call strncpy_s  +
xor ebx ebx +
add esp 10h +
mov eax esi +
mov dword_1014BA4 esi +
mov ecx offset dword_1014BA8 +
cmp byte_10119A2 bl +
jz loc_100C5AB  +
cmp ecx offset unk_1014C6C +
jnb loc_100C5AB  +
mov dl [eax] +
cmp dl 20h +
jz loc_100C588  +
cmp dl 9 +
jz loc_100C588  +
cmp dl 2Ch +
jz loc_100C588  +
test ebx ebx +
jz loc_100C58E  +
mov [ecx] eax +
add ecx 4 +
xor ebx ebx +
jmp loc_100C58E  +
xor ebx ebx +
mov byte ptr [eax] 0 +
inc ebx  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_100C562  +
jmp loc_100C5AB  +
mov dl [eax] +
cmp dl 20h +
jz loc_100C649  +
cmp dl 9 +
jz loc_100C649  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_100C596  +
jmp loc_100C649  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+lpDst]  +
push offset aDhcpsearchlist  +
push [ebp+hKey]  +
call sub_100F0D6  +
test eax eax +
jl loc_100C656  +
mov eax [ebp+lpDst] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100C5D8  +
sub eax edx +
jz loc_100C656  +
push ebx  +
push [ebp+lpDst]  +
push edi  +
push esi  +
call strncpy_s  +
xor ebx ebx +
add esp 10h +
mov eax esi +
mov dword_1014BA4 esi +
mov ecx offset dword_1014BA8 +
cmp byte_10119A2 bl +
jz loc_100C644  +
cmp ecx offset unk_1014C6C +
jnb loc_100C644  +
mov dl [eax] +
cmp dl 20h +
jz loc_100C629  +
cmp dl 9 +
jz loc_100C629  +
test ebx ebx +
jz loc_100C62F  +
mov [ecx] eax +
add ecx 4 +
xor ebx ebx +
jmp loc_100C62F  +
xor ebx ebx +
mov byte ptr [eax] 0 +
inc ebx  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_100C608  +
jmp loc_100C644  +
mov dl [eax] +
cmp dl 20h +
jz loc_100C649  +
cmp dl 9 +
jz loc_100C649  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_100C637  +
mov byte ptr [eax] 0 +
and dword ptr [ecx] 0 +
mov [ebp+var_14] 1 +
mov eax [ebp+var_C] +
or dword_1011970 eax +
cmp byte_10119A2 0 +
jnz loc_100C693  +
push edi  +
push [ebp+lpDst]  +
call ds:gethostname  +
test eax eax +
jnz loc_100C693  +
push 2Eh  +
push [ebp+lpDst]  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C693  +
inc eax  +
push eax  +
push edi  +
push esi  +
call strcpy_s  +
add esp 0Ch +
cmp [ebp+var_14] 0 +
jnz loc_100C6E1  +
mov al byte_10119A2 +
mov dword_1014BA4 esi +
mov edi offset dword_1014BA8 +
mov ecx esi +
xor ebx ebx +
jmp loc_100C6B7  +
cmp al 2Eh +
jnz loc_100C6B4  +
inc ebx  +
inc ecx  +
mov al [ecx] +
test al al +
jnz loc_100C6AF  +
jmp loc_100C6D9  +
cmp edi offset unk_1014BB0 +
jnb loc_100C6DE  +
push 2Eh  +
push esi  +
call ds:strchr  +
inc eax  +
mov esi eax +
pop ecx  +
mov [edi] esi +
add edi 4 +
pop ecx  +
dec ebx  +
cmp ebx 2 +
jge loc_100C6BD  +
and dword ptr [edi] 0 +
push [ebp+lpDst]  +
or dword_1011970 1 +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_100C706  +
push 0D5h  +
push ebx  +
call sub_100BD21  +
pop ecx  +
pop ecx  +
or eax 0FFFFFFFFh +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1014C74 0 +
mov eax [ebp+arg_0] +
jz loc_100C729  +
mov byte ptr [eax] 4Dh +
inc eax  +
mov byte ptr [eax] 53h +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ds:htons +
mov ebx 0C00Ch +
push ebx  +
call edi  +
mov esi [ebp+arg_4] +
mov [esi] ax +
inc esi  +
push 6  +
inc esi  +
call edi  +
mov [esi] ax +
inc esi  +
push 1  +
inc esi  +
call edi  +
mov [esi] ax +
inc esi  +
inc esi  +
and dword ptr [esi] 0 +
add esi 4 +
mov [ebp+arg_4] esi +
inc esi  +
push ebx  +
inc esi  +
call edi  +
mov [esi] ax +
inc esi  +
push ebx  +
inc esi  +
call edi  +
mov [esi] ax +
push hostlong  +
inc esi  +
inc esi  +
call ds:htonl  +
mov ebx [ebp+arg_4] +
mov [esi] eax +
push 4  +
pop eax  +
add esi eax +
xor ecx ecx +
mov [esi] ecx +
add esi eax +
mov [esi] ecx +
add esi eax +
mov [esi] ecx +
add esi eax +
mov [esi] ecx +
add esi eax +
mov eax esi +
sub eax ebx +
dec eax  +
dec eax  +
push eax  +
call edi  +
push esi  +
mov [ebx] ax +
call sub_100C710  +
push 1  +
mov esi eax +
call edi  +
mov ecx [ebp+arg_0] +
pop edi  +
mov [ecx+8] ax +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_1C] +
push edi  +
test esi esi +
jz loc_100C940  +
cmp [ebp+arg_20] 0Ch +
jb loc_100C940  +
cmp [ebp+arg_14] 0FFFFh +
ja loc_100C940  +
mov ebx ds:htons +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
inc word_10119A0  +
movzx eax word_10119A0 +
push eax  +
call ebx  +
mov [esi] ax +
mov al byte ptr [ebp+arg_0] +
shl al 3 +
xor al [esi+2] +
and [ebp+var_24] 0 +
and al 78h +
xor [esi+2] al +
mov ecx dword_1011970 +
mov al [esi+2] +
shr ecx 4 +
shl cl 6 +
xor cl [esi+3] +
lea edi [esi+0Ch] +
and cl 40h +
xor [esi+3] cl +
mov ecx dword_1011970 +
and byte ptr [esi+3] 0F0h +
shr ecx 6 +
xor cl al +
and cl 1 +
xor cl al +
mov eax [ebp+arg_0] +
mov [esi+2] cl +
mov ecx [ebp+arg_20] +
sub ecx 0Ch +
sub eax 0 +
mov [ebp+var_28] esi +
jz loc_100C8DC  +
dec eax  +
jnz loc_100C93A  +
mov eax [ebp+arg_14] +
add eax 0Bh +
cmp ecx eax +
jl loc_100C940  +
mov byte ptr [edi] 0 +
inc edi  +
push edi  +
push [ebp+arg_C]  +
call sub_100C193  +
inc edi  +
inc edi  +
push edi  +
push [ebp+arg_8]  +
call sub_100C193  +
inc edi  +
inc edi  +
push edi  +
push 0  +
call sub_100C1AF  +
add edi 4 +
push edi  +
push [ebp+arg_14]  +
call sub_100C193  +
inc edi  +
inc edi  +
cmp [ebp+arg_14] 0 +
jz loc_100C8D2  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push edi  +
call memcpy  +
add esp 0Ch +
add edi [ebp+arg_14] +
push 1  +
call ebx  +
mov [esi+6] ax +
jmp loc_100C93A  +
sub ecx 4 +
js loc_100C940  +
lea eax [ebp+0] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
push ecx  +
push edi  +
push [ebp+arg_4]  +
call sub_100C1D7  +
test eax eax +
jl loc_100C940  +
add edi eax +
push edi  +
push [ebp+arg_C]  +
call sub_100C193  +
inc edi  +
inc edi  +
push edi  +
push [ebp+arg_8]  +
call sub_100C193  +
inc edi  +
push 1  +
inc edi  +
call ebx  +
cmp [ebp+arg_C] 0FCh +
mov [esi+4] ax +
jnz loc_100C928  +
push edi  +
call sub_100C710  +
jmp loc_100C938  +
cmp [ebp+arg_C] 0FBh +
jnz loc_100C93A  +
push edi  +
push esi  +
call sub_100C732  +
mov edi eax +
mov eax edi +
sub eax esi +
jmp loc_100C943  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx edx byte ptr [eax] +
mov dl byte_1014C78[edx] +
push ebx  +
push esi  +
movzx esi byte ptr [ecx] +
cmp dl byte_1014C78[esi] +
jnz loc_100C98C  +
mov dl [eax] +
inc ecx  +
inc eax  +
test dl dl +
jz loc_100C9A8  +
movzx esi byte ptr [eax] +
movzx edx byte ptr [ecx] +
mov bl byte_1014C78[esi] +
cmp bl byte_1014C78[edx] +
jz loc_100C970  +
movzx eax byte ptr [eax] +
movzx ecx byte ptr [ecx] +
movzx ecx byte_1014C78[ecx] +
movzx eax byte_1014C78[eax] +
sub eax ecx +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100C9A2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100C9CD  +
test eax eax +
jnz loc_100C9D2  +
mov ecx [esi] +
test ecx ecx +
jz loc_100C9CA  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100C9BE  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101A0D0 +
push offset dword_101A0C0  +
push dword_101A0CC  +
mov dword_101A0C0 eax +
push offset dword_101A0B0  +
push offset dword_101A0B4  +
push offset dword_101A0AC  +
call ds:__getmainargs  +
add esp 14h +
mov dword_101A0BC eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100CA5A  +
cmp eax esi +
jnz loc_100CA4D  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100CA5D  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100CA34  +
xor esi esi +
inc esi  +
mov eax dword_101AD0C +
cmp eax esi +
jnz loc_100CA70  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100CAAB  +
mov eax dword_101AD0C +
test eax eax +
jnz loc_100CAA5  +
mov dword_101AD0C esi +
push offset dword_10011E4  +
push offset dword_10011D8  +
call sub_100C9B1  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100CAAB  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100CB75  +
mov dword_101A0C8 esi +
mov eax dword_101AD0C +
cmp eax esi +
jnz loc_100CACF  +
push offset dword_10011D4  +
push offset dword_10011CC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101AD0C 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100CADC  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_101AD14 ebx +
jz loc_100CAFD  +
push offset dword_101AD14  +
call sub_100CDE9  +
pop ecx  +
test eax eax +
jz loc_100CAFD  +
push ebx  +
push 2  +
push ebx  +
call dword_101AD14  +
push dword_101A0B0  +
push dword_101A0B4  +
push dword_101A0AC  +
call sub_100648B  +
add esp 0Ch +
mov dword_101A0C4 eax +
cmp dword_101A0B8 ebx +
jnz loc_100CB5B  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_101A0C4 eax +
xor ebx ebx +
cmp dword_101A0B8 ebx +
jnz loc_100CB5B  +
push eax  +
call ds:_exit  +
cmp dword_101A0C8 ebx +
jnz loc_100CB69  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_101A0C4 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100CB92  +
xor eax eax +
jmp loc_100CBDF  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100CB8E  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100CBCC  +
cmp ecx 20Bh +
jnz loc_100CB8E  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100CB8E  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100CBDA  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100CB8E  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_101A0B8 eax +
call sub_100CF82  +
push eax  +
call ds:__set_app_type  +
or dword_101AD04 0FFFFFFFFh +
or dword_101AD08 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_101A0D8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_101A0D4 +
mov [eax] ecx +
call sub_100CF14  +
cmp dword_1014D88 0 +
jnz loc_100CC38  +
push offset sub_100CF14  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100CEFC  +
xor eax eax +
retn   +
***
call sub_100CFC1  +
jmp sub_100CA12  +
***
cmp ecx dword_1014D78 +
jnz loc_100CC6A  +
retn 0  +
jmp loc_100D057  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100CD28  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100CD28  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100CD22  +
cmp eax 19930521h +
jz loc_100CD22  +
cmp eax 19930522h +
jz loc_100CD22  +
cmp eax 1994000h +
jnz loc_100CD28  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_100CCE8+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100CD76  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100CD72  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100CDDD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100CDD5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100CDDF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100CDC5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100CD60  +
pop ecx  +
test eax eax +
jz loc_100CE46  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100CDA0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100CE46  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100CE4F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100CC5F  +
push offset dword_1014D78  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100CF75  +
cmp ecx 0FFFFFFFFh +
jz loc_100CF75  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100CF6E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100CF6E  +
cmp edx 10000000h +
jnb loc_100CF6E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100CF6E  +
jmp loc_100CF69  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100CFB7  +
push eax  +
call sub_100CF1C  +
test eax eax +
jz loc_100CFB7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100CFAC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100CFB7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1014D78 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100CFF3  +
test eax ebx +
jz loc_100CFF3  +
not eax  +
mov dword_1014D7C eax +
jmp loc_100D04E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100D03A  +
test dword_1014D78 ebx +
jnz loc_100D03F  +
mov esi 0BB40E64Fh +
mov dword_1014D78 esi +
not esi  +
mov dword_1014D7C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_101A1E0 eax +
mov dword_101A1DC ecx +
mov dword_101A1D8 edx +
mov dword_101A1D4 ebx +
mov dword_101A1D0 esi +
mov dword_101A1CC edi +
mov word_101A1F8 ss +
mov word_101A1EC cs +
mov word_101A1C8 ds +
mov word_101A1C4 es +
mov word_101A1C0 fs +
mov word_101A1BC gs +
pushf   +
pop dword_101A1F0  +
mov eax [ebp+0] +
mov dword_101A1E4 eax +
mov eax [ebp+4] +
mov dword_101A1E8 eax +
lea eax [ebp+8] +
mov dword_101A1F4 eax +
mov eax [ebp-320h] +
mov dword_101A130 10001h +
mov eax dword_101A1E8 +
mov dword_101A0EC eax +
mov dword_101A0E0 0C0000409h +
mov dword_101A0E4 1 +
mov eax dword_1014D78 +
mov [ebp-328h] eax +
mov eax dword_1014D7C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push [ebp+arg_4]  +
call ds:RtlIpv4StringToAddressA  +
test eax eax +
jge loc_100D179  +
xor eax eax +
jmp locret_100D188  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100D185  +
cmp byte ptr [eax] 0 +
jnz loc_100D175  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call ds:RtlIpv6AddressToStringA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
movzx ecx al +
push ecx  +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
push ecx  +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
push ecx  +
shr eax 18h +
push eax  +
push offset aU_U_U_U_inAddr  +
push 1Fh  +
push [ebp+arg_0]  +
call sub_100E2F7  +
add esp 1Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea esi [ebp+arg_4] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
push 10h  +
pop edi  +
mov eax ebx +
lea esi [ebx+4Bh] +
movzx ecx byte ptr [ebp+edi-15h] +
dec edi  +
mov edx ecx +
shr edx 4 +
push edx  +
and ecx 0Fh +
push ecx  +
mov ecx esi +
push offset aX_X_  +
sub ecx eax +
push ecx  +
push eax  +
call sub_100E2F7  +
add esp 14h +
test eax eax +
jz loc_100D252  +
test edi edi +
jnz loc_100D212  +
push offset aIp6_arpa_  +
sub esi eax +
push esi  +
push eax  +
call sub_100E2F7  +
add esp 0Ch +
test eax eax +
jnz loc_100D254  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
lea eax [ebp+var_8] +
push eax  +
xor ebx ebx +
call sub_100D155  +
test eax eax +
jz loc_100D2A0  +
push ebx  +
push [ebp+var_8]  +
push esi  +
call sub_100D4C0  +
jmp loc_100D2F2  +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
lea eax [esi+2] +
push eax  +
lea eax [esi+18h] +
push eax  +
lea eax [esi+8] +
push eax  +
push edi  +
call ds:RtlIpv6StringToAddressExA  +
mov ebx eax +
test ebx ebx +
jnz loc_100D2D5  +
push 17h  +
pop eax  +
mov [esi] ax +
mov dword ptr [esi+20h] 1Ch +
jmp loc_100D2E7  +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov ebx 2550h +
test ebx ebx +
jz loc_100D2F2  +
push ebx  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
xor eax eax +
test ebx ebx +
pop edi  +
setz al  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100D325  +
cmp ecx 7FFFFFFFh +
jbe loc_100D32A  +
mov eax 80070057h +
test eax eax +
jl loc_100D367  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100D35A  +
cmp eax esi +
ja loc_100D35A  +
jnz loc_100D362  +
mov [esi+edi] bl +
jmp loc_100D362  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
movzx ecx word ptr [eax] +
push esi  +
push edi  +
cmp cx 2 +
jnz loc_100D399  +
push [ebp+arg_4]  +
movzx ecx word ptr [eax+2] +
mov esi [ebp+arg_0] +
push esi  +
push ecx  +
add eax 4 +
push eax  +
call ds:RtlIpv4AddressToStringExA  +
jmp loc_100D3B8  +
cmp cx 17h +
jnz loc_100D3BC  +
push [ebp+arg_4]  +
movzx ecx word ptr [eax+2] +
mov esi [ebp+arg_0] +
push esi  +
push ecx  +
push dword ptr [eax+18h]  +
add eax 8 +
push eax  +
call ds:RtlIpv6AddressToStringExA  +
mov edi eax +
jmp loc_100D3E2  +
cmp [ebp+arg_4] 0 +
push 57h  +
pop edi  +
jz loc_100D3E0  +
mov ecx [ebp+arg_4] +
cmp dword ptr [ecx] 28h +
jbe loc_100D3E0  +
push eax  +
push offset aInvalidDns_add  +
push 28h  +
push [ebp+arg_0]  +
call sub_100D30F  +
add esp 10h +
xor esi esi +
test edi edi +
jnz loc_100D3ED  +
mov eax [ebp+arg_4] +
add esi [eax] +
jmp loc_100D3EF  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx eax +
shr ecx 18h +
push ecx  +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
push ecx  +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
push ecx  +
movzx eax al +
push eax  +
push offset dword_1002A5C  +
push 10h  +
push [ebp+arg_0]  +
call sub_100D30F  +
mov eax [ebp+arg_0] +
add esp 1Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 2 +
jnz loc_100D451  +
mov eax [eax+4] +
jmp loc_100D454  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 40h  +
push 0  +
push esi  +
call memset  +
mov ebx [ebp+arg_4] +
add esp 0Ch +
push ebx  +
call sub_100E3F3  +
mov edi eax +
cmp edi 20h +
jbe loc_100D489  +
xor eax eax +
jmp loc_100D4B4  +
cmp [ebp+arg_8] 0 +
jz loc_100D497  +
movzx eax word ptr [ebx] +
cmp [ebp+arg_8] eax +
jnz loc_100D485  +
push edi  +
push ebx  +
push esi  +
call memcpy  +
mov eax [ebp+arg_C] +
mov [esi+24h] eax +
mov eax [ebp+arg_10] +
mov [esi+28h] eax +
xor eax eax +
add esp 0Ch +
mov [esi+20h] edi +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [esi] ax +
mov ax [ebp+arg_8] +
mov [esi+2] ax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov dword ptr [esi+20h] 10h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 40h  +
push 0  +
push ebx  +
call memset  +
mov esi [ebp+arg_4] +
add esp 0Ch +
push 17h  +
pop eax  +
mov [ebx] ax +
mov ax [ebp+arg_C] +
mov [ebx+2] ax +
mov eax [ebp+arg_8] +
mov [ebx+18h] eax +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov dword ptr [ebx+20h] 1Ch +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100D557  +
mov eax offset aNullAddress +
jmp loc_100D57E  +
movzx ecx word ptr [eax] +
cmp cx 2 +
jnz loc_100D56B  +
push dword ptr [eax+4]  +
call ds:inet_ntoa  +
jmp loc_100D57E  +
cmp cx 17h +
jnz loc_100D57C  +
add eax 8 +
push eax  +
call sub_100E439  +
jmp loc_100D57E  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100D59C  +
mov eax [eax+4] +
shl eax 6 +
add eax 20h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
and dword ptr [eax+4] 0 +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_100E336  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
test eax eax +
jz loc_100D658  +
cmp eax 0FFFFFFFFh +
jz loc_100D658  +
cmp eax 0FFFFh +
jnz loc_100D5ED  +
push 8  +
jmp loc_100D65A  +
cmp eax 1 +
jnz loc_100D607  +
mov eax [ebp+arg_0] +
mov ax [eax] +
mov edx [ebp+arg_4] +
xor ecx ecx +
cmp ax [edx] +
setz cl  +
mov eax ecx +
jmp loc_100D66A  +
test al 3 +
jz loc_100D5E9  +
mov edx [ebp+arg_0] +
movzx eax word ptr [edx] +
cmp ax 2 +
jnz loc_100D63A  +
mov ecx [ebp+arg_4] +
cmp [ecx] ax +
jnz loc_100D636  +
push edx  +
call sub_100D43E  +
push ecx  +
mov edx eax +
call sub_100D43E  +
cmp edx eax +
jnz loc_100D636  +
xor eax eax +
inc eax  +
jmp loc_100D66A  +
xor eax eax +
jmp loc_100D66A  +
cmp ax 17h +
jnz loc_100D636  +
mov eax [ebp+arg_4] +
cmp word ptr [eax] 17h +
jnz loc_100D636  +
push 4  +
lea edi [eax+8] +
pop ecx  +
lea esi [edx+8] +
xor eax eax +
cmps   +
jmp loc_100D62F  +
push 10h  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
xor eax eax +
pop ecx  +
cmps   +
push eax  +
pop eax  +
setz al  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+uBytes] +
lea eax [ebp+uBytes] +
push eax  +
push 40h  +
pop ecx  +
mov eax esi +
mul  ecx +
push edx  +
push eax  +
call sub_1009D2A  +
test eax eax +
jz loc_100D698  +
xor eax eax +
jmp loc_100D6B8  +
lea eax [ebp+uBytes] +
push eax  +
push 20h  +
push [ebp+uBytes]  +
call sub_1006A19  +
test eax eax +
jnz loc_100D694  +
push [ebp+uBytes]  +
call sub_100E35D  +
test eax eax +
jz loc_100D694  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100D6E2  +
cmp [ebp+uBytes] ebx +
jz loc_100D6DE  +
push [ebp+uBytes]  +
call sub_100D675  +
jmp loc_100D71B  +
xor eax eax +
jmp loc_100D71B  +
mov eax [ebx+4] +
add eax [ebp+uBytes] +
push esi  +
push eax  +
call sub_100D675  +
mov esi eax +
test esi esi +
jz loc_100D71A  +
push edi  +
mov edi [esi] +
push ebx  +
call sub_100D587  +
push eax  +
push ebx  +
push esi  +
call memcpy  +
add esp 0Ch +
cmp [ebp+arg_8] 0 +
mov [esi] edi +
pop edi  +
jz loc_100D718  +
push ebx  +
call sub_100E336  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100D75D  +
push ebx  +
push esi  +
mov esi [eax+4] +
xor ebx ebx +
push edi  +
test esi esi +
jbe loc_100D758  +
lea edi [eax+20h] +
push [ebp+arg_8]  +
push edi  +
push [ebp+arg_4]  +
call sub_100D5CF  +
test eax eax +
jnz loc_100D761  +
inc ebx  +
add edi 40h +
cmp ebx esi +
jb loc_100D740  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_100D75A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100D77C  +
xor eax eax +
jmp loc_100D7C5  +
cmp [ebp+arg_8] 0 +
push esi  +
mov esi [ebp+arg_4] +
jz loc_100D78E  +
movzx eax word ptr [esi] +
cmp eax [ebp+arg_8] +
jnz loc_100D7C1  +
cmp [ebp+arg_C] 0 +
jz loc_100D7A2  +
push [ebp+arg_C]  +
push esi  +
push ebx  +
call sub_100D725  +
test eax eax +
jnz loc_100D7C1  +
mov eax [ebx+4] +
cmp eax [ebx] +
jb loc_100D7AD  +
xor eax eax +
jmp loc_100D7C4  +
push edi  +
mov ecx eax +
shl ecx 6 +
push 10h  +
lea edi [ecx+ebx+20h] +
pop ecx  +
movs   +
inc eax  +
mov [ebx+4] eax +
pop edi  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push 0  +
push [ebp+arg_4]  +
lea eax [ebp+var_40] +
push eax  +
call sub_100D4C0  +
push [ebp+arg_8]  +
lea eax [ebp+var_40] +
push 0  +
push eax  +
push [ebp+arg_0]  +
call sub_100D76B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
mov eax [eax] +
push eax  +
push [ebp+arg_0]  +
call sub_100D7CF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push 0  +
push [ebp+arg_8]  +
lea eax [ebp+var_40] +
push [ebp+arg_4]  +
push eax  +
call sub_100D4FB  +
push [ebp+arg_C]  +
lea eax [ebp+var_40] +
push 0  +
push eax  +
push [ebp+arg_0]  +
call sub_100D76B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
xor eax eax +
mov [ebp+var_4] eax +
cmp esi eax +
jz loc_100D8C0  +
mov [ebp+arg_4] eax +
cmp [esi+4] eax +
jbe loc_100D8BD  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
lea edi [esi+20h] +
cmp [ebp+arg_14] 0 +
jz loc_100D885  +
push [ebp+arg_18]  +
push edi  +
call [ebp+arg_14]  +
test eax eax +
jz loc_100D8A4  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push edi  +
push ebx  +
call sub_100D76B  +
test eax eax +
jz loc_100D89D  +
dec [ebp+arg_8]  +
jz loc_100D8BB  +
jmp loc_100D8A4  +
mov eax [ebx+4] +
cmp eax [ebx] +
jz loc_100D8B4  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
add edi 40h +
cmp eax [esi+4] +
jb loc_100D874  +
jmp loc_100D8BB  +
mov [ebp+var_4] 0EAh +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100D851  +
pop ebp  +
retn 8  +
***
cmp hHandle 0 +
push esi  +
jz loc_100D92C  +
mov esi ds:GetCurrentThreadId +
call esi  +
mov ecx dword_101A400 +
cmp eax ecx +
jnz loc_100D90F  +
inc dword_101A404  +
jmp loc_100D92C  +
push 0FFFFFFFFh  +
push hHandle  +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_100D925  +
xor eax eax +
pop esi  +
retn   +
call esi  +
mov dword_101A400 eax +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
cmp hHandle 0 +
jz loc_100D969  +
mov eax dword_101A404 +
test eax eax +
jbe loc_100D952  +
dec dword_101A404  +
xor eax eax +
inc eax  +
retn   +
push hHandle  +
mov dword_101A400 0 +
call ds:ReleaseMutex  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_4] 0 +
cmp [ebp+arg_10] 0 +
jnz loc_100D987  +
or [ebp+arg_10] 0FFFFFFFFh +
push edi  +
mov edi [ebp+arg_8] +
cmp [ebp+arg_10] edi +
ja loc_100D997  +
xor eax eax +
jmp loc_100DAFB  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
lea esi [ebx+1FEh] +
lea eax [esi-54h] +
mov [ebp+var_8] eax +
cmp ebx eax +
jnb loc_100DA73  +
mov cl [edi] +
mov al cl +
inc edi  +
and al 0C0h +
mov byte ptr [ebp+arg_0+3] cl +
jnz loc_100DA07  +
movzx eax cl +
push eax  +
mov [ebp+var_C] eax +
mov eax esi +
push offset aD_2  +
sub eax ebx +
push eax  +
push ebx  +
call sub_100E2F7  +
add esp 10h +
cmp byte ptr [ebp+arg_0+3] 0 +
mov ebx eax +
jz loc_100DAE2  +
mov ecx [ebp+var_C] +
lea eax [ecx+edi] +
mov [ebp+var_10] eax +
cmp eax [ebp+arg_10] +
jnb loc_100DA89  +
push ecx  +
push edi  +
push ebx  +
call memcpy  +
mov edi [ebp+var_10] +
add esp 0Ch +
add ebx [ebp+var_C] +
jmp loc_100DA6A  +
cmp al 0C0h +
jnz loc_100DAC8  +
cmp edi [ebp+arg_10] +
jnb loc_100DAA2  +
movzx ax cl +
movzx cx byte ptr [edi] +
shl ax 8 +
or ax cx +
movzx eax ax +
movzx eax ax +
push eax  +
mov [ebp+arg_0] eax +
mov eax esi +
push offset a04hx  +
sub eax ebx +
push eax  +
push ebx  +
inc edi  +
call sub_100E2F7  +
add esp 10h +
cmp [ebp+arg_C] 0 +
mov ebx eax +
jz loc_100DAC2  +
cmp [ebp+var_4] 0 +
jnz loc_100DA56  +
mov [ebp+var_4] edi +
mov eax [ebp+arg_0] +
xor eax 0C000h +
add eax [ebp+arg_C] +
lea ecx [edi-2] +
cmp eax ecx +
jnb loc_100DAAA  +
mov edi eax +
cmp ebx [ebp+var_8] +
jb loc_100D9B0  +
sub esi [ebp+var_8] +
push offset aErrorNameExcee  +
push esi  +
push [ebp+var_8]  +
call sub_100E2F7  +
add esp 0Ch +
jmp loc_100DADD  +
movzx eax byte ptr [ebp+arg_0+3] +
push edi  +
push eax  +
push offset aErrorLengthByt  +
sub esi ebx +
push esi  +
push ebx  +
call sub_100E2F7  +
add esp 14h +
jmp loc_100DADD  +
push edi  +
push offset aErrorCompressi  +
jmp loc_100DAD1  +
push eax  +
lea eax [edi-2] +
push eax  +
push offset aErrorOffsetAtP  +
sub esi ebx +
push esi  +
push ebx  +
call sub_100E2F7  +
add esp 14h +
jmp loc_100DAE0  +
mov byte ptr [ebx] 0 +
inc ebx  +
jmp loc_100DAE2  +
movzx eax cl +
push eax  +
push offset aErrorLengthB_0  +
sub esi ebx +
push esi  +
push ebx  +
call sub_100E2F7  +
add esp 10h +
mov edi [ebp+arg_8] +
mov ebx eax +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100DAEB  +
mov [eax] ebx +
cmp [ebp+var_4] 0 +
pop esi  +
pop ebx  +
jz loc_100DAF6  +
mov edi [ebp+var_4] +
mov eax edi +
sub eax [ebp+arg_8] +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_18] +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_208] edx +
mov [ebp+var_20C] ebx +
test eax eax +
jnz loc_100DB61  +
mov eax offset byte_1001253 +
test esi esi +
jnz loc_100DB4A  +
mov esi eax +
test edi edi +
jz loc_100DB50  +
mov eax edi +
push esi  +
push eax  +
push offset aSNullPacketNam  +
push ebx  +
call edx  +
add esp 10h +
xor eax eax +
jmp loc_100DBA6  +
push [ebp+arg_14]  +
push ecx  +
push eax  +
push 0  +
lea eax [ebp+var_204] +
push eax  +
call sub_100D971  +
mov ebx eax +
mov eax offset byte_1001253 +
test esi esi +
jnz loc_100DB81  +
mov esi eax +
test edi edi +
jz loc_100DB87  +
mov eax edi +
push esi  +
lea ecx [ebp+var_204] +
push ecx  +
push eax  +
push offset aSSS  +
push [ebp+var_20C]  +
call [ebp+var_208]  +
add esp 14h +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
lea ebx [edi+eax] +
mov byte ptr [edi] 0 +
test ecx ecx +
jz loc_100DCF7  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100DCF7  +
add ecx eax +
mov [ebp+arg_4] ecx +
test eax eax +
jbe loc_100DCE1  +
cmp [ebp+arg_14] 0 +
jz loc_100DC44  +
xor edx edx +
mov eax esi +
div  [ebp+arg_14] +
test edx edx +
jnz loc_100DC44  +
mov eax offset asc_1002D94 +
test esi esi +
jnz loc_100DC14  +
mov eax offset byte_1001253 +
cmp [ebp+arg_10] 0 +
jz loc_100DC25  +
push [ebp+arg_10]  +
push eax  +
push offset aSS_0  +
jmp loc_100DC2C  +
push esi  +
push eax  +
push offset aS4d  +
mov eax ebx +
sub eax edi +
push eax  +
push edi  +
call sub_100E2F7  +
mov edi eax +
add esp 14h +
test edi edi +
jz loc_100DCD8  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_18] +
add eax esi +
test ecx ecx +
jz loc_100DCBD  +
cmp ecx 4 +
jnz loc_100DC6D  +
test al 3 +
jnz loc_100DCBD  +
lea ecx [eax+4] +
cmp ecx [ebp+arg_4] +
ja loc_100DCBD  +
mov eax [eax] +
mov ecx offset a08x +
add esi 4 +
jmp loc_100DCC6  +
cmp ecx 2 +
jnz loc_100DC8F  +
mov ecx eax +
not ecx  +
test cl 1 +
jz loc_100DCBD  +
lea ecx [eax+2] +
cmp ecx [ebp+arg_4] +
ja loc_100DCBD  +
movzx eax word ptr [eax] +
inc esi  +
mov ecx offset a04x +
inc esi  +
jmp loc_100DCC6  +
cmp ecx 8 +
jnz loc_100DCBD  +
test al 7 +
jnz loc_100DCBD  +
lea ecx [eax+8] +
cmp ecx [ebp+arg_4] +
ja loc_100DCBD  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax ebx +
push offset aI64x  +
sub eax edi +
push eax  +
push edi  +
call sub_100E2F7  +
add esp 14h +
add esi 8 +
jmp loc_100DCD6  +
movzx eax byte ptr [eax] +
mov ecx offset a02x_0 +
inc esi  +
push eax  +
push ecx  +
mov eax ebx +
sub eax edi +
push eax  +
push edi  +
call sub_100E2F7  +
add esp 10h +
mov edi eax +
cmp esi [ebp+arg_C] +
jb loc_100DBF5  +
push offset asc_1002D94  +
sub ebx edi +
push ebx  +
push edi  +
call sub_100E2F7  +
add esp 0Ch +
sub eax [ebp+arg_0] +
jmp loc_100DCF9  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7F4h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
and [ebp+var_7E4] 0 +
push ebx  +
mov ebx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_7EC] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_7F0] edi +
mov [ebp+var_7F4] eax +
call sub_100D8EB  +
test eax eax +
jz loc_100DF61  +
test esi esi +
jz loc_100DD67  +
push esi  +
push offset aS  +
push [ebp+var_7EC]  +
call edi  +
add esp 0Ch +
cmp [ebp+arg_18] 1 +
mov byte ptr [ebp+var_7D4] 0 +
jnz loc_100DD78  +
and [ebp+arg_18] 0 +
mov edx [ebp+arg_14] +
xor ecx ecx +
lea esi [ebx+edx] +
mov dword ptr [ebp+var_7D8] ecx +
lea eax [ebp+var_7D4] +
mov [ebp+var_7E8] esi +
test edx edx +
jbe loc_100DF41  +
lea edx [ebx+8] +
mov [ebp+var_7DC] edx +
lea edx [ebx+2] +
mov [ebp+var_7E0] edx +
lea esi [ebx+4] +
and ecx 0Fh +
jz loc_100DDC2  +
push 10h  +
pop edx  +
sub edx [ebp+arg_18] +
cmp ecx edx +
ja loc_100DDC2  +
test eax eax +
jnz loc_100DE2F  +
cmp [ebp+var_7E4] 0Ah +
ja loc_100DDCF  +
test eax eax +
jnz loc_100DDF1  +
lea eax [ebp+var_7D4] +
push eax  +
push [ebp+var_7EC]  +
call [ebp+var_7F0]  +
and [ebp+var_7E4] 0 +
pop ecx  +
pop ecx  +
lea eax [ebp+var_7D4] +
lea ecx [ebp+var_4] +
sub ecx eax +
cmp [ebp+var_7F4] 0 +
jz loc_100DE0C  +
push [ebp+var_7F4]  +
push offset aS_13  +
jmp loc_100DE17  +
push dword ptr [ebp+var_7D8]  +
push offset a3d_0  +
push ecx  +
push eax  +
call sub_100E2F7  +
add esp 10h +
test eax eax +
jz loc_100DF32  +
inc [ebp+var_7E4]  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_100DF05  +
cmp ecx 4 +
jnz loc_100DE7B  +
test bl 3 +
jnz loc_100DF05  +
cmp esi [ebp+var_7E8] +
ja loc_100DF05  +
mov ecx [ebx] +
add dword ptr [ebp+var_7D8] 4 +
add [ebp+var_7E0] 4 +
add ebx 4 +
add esi 4 +
add [ebp+var_7DC] 4 +
mov edx offset a08x +
jmp loc_100DF21  +
cmp ecx 2 +
jnz loc_100DEBA  +
mov ecx ebx +
not ecx  +
test cl 1 +
jz loc_100DF05  +
mov ecx [ebp+var_7E8] +
cmp [ebp+var_7E0] ecx +
ja loc_100DF05  +
add dword ptr [ebp+var_7D8] 2 +
movzx ecx word ptr [ebx] +
add [ebp+var_7E0] 2 +
inc ebx  +
inc ebx  +
inc esi  +
inc esi  +
add [ebp+var_7DC] 2 +
mov edx offset a04x +
jmp loc_100DF21  +
push 8  +
pop edi  +
cmp ecx edi +
jnz loc_100DF05  +
test bl 7 +
jnz loc_100DF05  +
mov ecx [ebp+var_7DC] +
cmp ecx [ebp+var_7E8] +
ja loc_100DF05  +
push dword ptr [ebx+4]  +
lea ecx [ebp+var_4] +
push dword ptr [ebx]  +
sub ecx eax +
push offset aI64x  +
push ecx  +
push eax  +
call sub_100E2F7  +
add dword ptr [ebp+var_7D8] edi +
add [ebp+var_7E0] edi +
add esp 14h +
add ebx edi +
add esi edi +
add [ebp+var_7DC] edi +
jmp loc_100DF32  +
inc dword ptr [ebp+var_7D8]  +
movzx ecx byte ptr [ebx] +
inc ebx  +
inc esi  +
inc [ebp+var_7E0]  +
inc [ebp+var_7DC]  +
mov edx offset a02x_0 +
push ecx  +
push edx  +
lea ecx [ebp+var_4] +
sub ecx eax +
push ecx  +
push eax  +
call sub_100E2F7  +
add esp 10h +
mov ecx dword ptr [ebp+var_7D8] +
cmp ecx [ebp+arg_14] +
jb loc_100DDAF  +
lea eax [ebp+var_7D4] +
push eax  +
push offset aS_12  +
push [ebp+var_7EC]  +
call [ebp+var_7F0]  +
add esp 0Ch +
call sub_100D936  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DD05  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
lea ecx [ebx+eax] +
push edi  +
mov edi [ebp+arg_C] +
mov [ebp+var_4] ecx +
xor ecx ecx +
mov esi ebx +
mov [ebp+arg_0] ecx +
mov [ebp+arg_4] ecx +
cmp edi 0FFFFh +
ja loc_100E054  +
cmp [ebp+arg_10] ecx +
jnz loc_100DFD8  +
mov [ebp+arg_10] offset byte_1001253 +
cmp [ebp+arg_18] ecx +
jz loc_100E039  +
lea eax [edi+edi] +
push eax  +
call sub_100E35D  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100E054  +
push eax  +
push edi  +
push [ebp+arg_8]  +
call sub_100E549  +
mov eax [ebp+arg_0] +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100DFFD  +
sub eax edi +
mov edi eax +
test eax eax +
jbe loc_100E04F  +
cmp eax [ebp+arg_14] +
jbe loc_100E014  +
mov eax [ebp+arg_14] +
push [ebp+arg_0]  +
push eax  +
push [ebp+arg_10]  +
mov eax [ebp+var_4] +
push offset aS_S_0  +
sub eax esi +
push eax  +
push esi  +
call sub_100E2F7  +
add esp 18h +
mov esi eax +
mov eax edi +
test edi edi +
ja loc_100E00C  +
jmp loc_100E04F  +
push ecx  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push edi  +
push [ebp+arg_8]  +
push eax  +
push ebx  +
call sub_100DBBC  +
mov esi eax +
add esi ebx +
sub esi ebx +
mov [ebp+arg_4] esi +
push [ebp+arg_0]  +
call sub_100E336  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor eax eax +
push edi  +
mov ecx 80070057h +
test esi esi +
jz loc_100E089  +
cmp esi 7FFFFFFFh +
jbe loc_100E08B  +
mov eax ecx +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_100E0B6  +
xor ebx ebx +
mov edx esi +
mov eax edi +
test esi esi +
jz loc_100E0A8  +
cmp [eax] bl +
jz loc_100E0A4  +
inc eax  +
dec edx  +
jnz loc_100E09C  +
test edx edx +
jnz loc_100E0B0  +
mov ebx ecx +
xor ecx ecx +
mov eax ebx +
jmp loc_100E0B8  +
mov ecx esi +
sub ecx edx +
jmp loc_100E0AC  +
xor ecx ecx +
test eax eax +
jl loc_100E0FB  +
mov edx esi +
sub edx ecx +
push 0  +
lea eax [ecx+edi] +
pop ebx  +
jz loc_100E0F0  +
mov edi edx +
sub edi esi +
mov esi [ebp+arg_8] +
lea edi [edi+ecx+7FFFFFFFh] +
sub esi eax +
test edi edi +
jz loc_100E0EC  +
mov cl [esi+eax] +
test cl cl +
jz loc_100E0EC  +
mov [eax] cl +
inc eax  +
dec edx  +
dec edi  +
test edx edx +
jnz loc_100E0D8  +
test edx edx +
jnz loc_100E0F6  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
test edi edi +
jbe loc_100E12B  +
test [ebp+arg_4] 1000h +
jz loc_100E12B  +
mov edx [ebp+arg_0] +
lea eax [esi+ecx] +
mov [edx] eax +
mov edx edi +
sub edx ecx +
mov [ebx] edx +
mov byte ptr [eax] 0 +
test [ebp+arg_4] 400h +
jz loc_100E16F  +
mov eax [ebp+arg_4] +
and eax 0FFh +
push edi  +
push eax  +
push esi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_100E159  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
jmp loc_100E16F  +
test edi edi +
jbe loc_100E186  +
mov ecx [ebp+arg_0] +
lea eax [esi+edi-1] +
mov [ecx] eax +
mov dword ptr [ebx] 1 +
mov byte ptr [eax] 0 +
test edi edi +
jbe loc_100E186  +
test [ebp+arg_4] 800h +
jz loc_100E186  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
mov byte ptr [esi] 0 +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
sub esp 0Ch +
xor eax eax +
and edx 100h +
push esi  +
mov esi [ebp+arg_0] +
mov ecx 80070057h +
jz loc_100E1BA  +
test esi esi +
jnz loc_100E1C1  +
cmp [ebp+arg_4] eax +
jnz loc_100E1CA  +
jmp loc_100E1C1  +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100E1CA  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100E1CC  +
mov eax ecx +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100E252  +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
mov ebx edi +
mov [ebp+var_4] esi +
mov [ebp+var_C] ebx +
cmp edx eax +
jz loc_100E1F2  +
cmp [ebp+arg_14] eax +
jnz loc_100E1F2  +
mov [ebp+arg_14] offset byte_1001253 +
test [ebp+arg_10] 0FFFFE000h +
mov [ebp+arg_0] eax +
jz loc_100E25A  +
mov [ebp+arg_0] ecx +
cmp edi eax +
jz loc_100E208  +
mov byte ptr [esi] 0 +
test [ebp+arg_10] 1C00h +
jz loc_100E22C  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100E22C  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push eax  +
lea ebx [ebp+var_C] +
xor ecx ecx +
call sub_100E107  +
mov ebx [ebp+var_C] +
cmp [ebp+arg_0] 0 +
jge loc_100E23B  +
cmp [ebp+arg_0] 8007007Ah +
jnz loc_100E250  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100E247  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100E250  +
mov [eax] ebx +
pop edi  +
pop ebx  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 1Ch  +
cmp edi eax +
jnz loc_100E276  +
mov eax [ebp+arg_14] +
cmp byte ptr [eax] 0 +
jz loc_100E23B  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 23h +
add eax ecx +
mov [ebp+arg_0] eax +
jmp loc_100E208  +
push [ebp+arg_18]  +
dec edi  +
push [ebp+arg_14]  +
mov [ebp+var_8] eax +
push edi  +
push esi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100E299  +
cmp eax edi +
ja loc_100E299  +
jz loc_100E2A0  +
mov edi eax +
jmp loc_100E2A4  +
mov [ebp+var_8] 8007007Ah +
mov byte ptr [edi+esi] 0 +
mov eax [ebp+var_8] +
mov [ebp+arg_0] eax +
sub ebx edi +
cmp [ebp+var_8] 0 +
lea eax [edi+esi] +
mov [ebp+var_4] eax +
mov [ebp+var_C] ebx +
jl loc_100E208  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_100E23B  +
cmp ebx 1 +
jbe loc_100E23B  +
lea ecx [ebx-1] +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+var_4] +
inc eax  +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_100E23B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
mov [ebp+var_4] esi +
jge loc_100E30C  +
xor eax eax +
jmp loc_100E32E  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea eax [ebp+var_4] +
push esi  +
push esi  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E191  +
test eax eax +
jge loc_100E32B  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100E354  +
mov eax dword_101A414 +
test eax eax +
jz loc_100E34D  +
pop ebp  +
jmp eax  +
pop ebp  +
jmp ds:LocalFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101A40C +
push esi  +
push [ebp+uBytes]  +
test eax eax +
jz loc_100E389  +
call eax  +
mov esi eax +
test esi esi +
jz loc_100E391  +
push [ebp+uBytes]  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
jmp loc_100E391  +
push 40h  +
call ds:LocalAlloc  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] 2 +
jnz loc_100E3AF  +
mov eax offset unk_10155F8 +
jmp loc_100E3C7  +
cmp [ebp+arg_0] 17h +
jnz loc_100E3BC  +
mov eax offset unk_1015608 +
jmp loc_100E3C7  +
cmp [ebp+arg_0] 16h +
jnz loc_100E3C7  +
mov eax offset unk_1015618 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
call sub_100E39B  +
test eax eax +
jz loc_100E3E8  +
mov eax [eax+8] +
jmp loc_100E3EA  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
push eax  +
call sub_100E3D0  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 0FFFF0000h +
jnz loc_100E42E  +
cmp dword ptr [eax+4] 0 +
jnz loc_100E42E  +
cmp dword ptr [eax] 0 +
jnz loc_100E42E  +
xor eax eax +
inc eax  +
jmp loc_100E430  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100E44A  +
xor eax eax +
jmp loc_100E477  +
push edi  +
call sub_100E40D  +
test eax eax +
jz loc_100E45F  +
push dword ptr [edi+0Ch]  +
call ds:inet_ntoa  +
jmp loc_100E477  +
push esi  +
mov esi offset byte_101AD20 +
push esi  +
push edi  +
mov byte_101AD20 0 +
call ds:RtlIpv6AddressToStringA  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 31h +
ja loc_100E49A  +
movzx eax [ebp+arg_0] +
mov eax off_1015638[eax*8] +
jmp loc_100E4C1  +
mov ax word_10157CC +
push 32h  +
pop ecx  +
test ax ax +
jz loc_100E4BF  +
movzx eax ax +
cmp [ebp+arg_0] ax +
jz loc_100E4C5  +
movzx eax word_1015644[ecx*8] +
inc ecx  +
test ax ax +
jnz loc_100E4AB  +
xor eax eax +
pop ebp  +
retn 4  +
mov eax off_1015638[ecx*8] +
jmp loc_100E4C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100E481  +
test eax eax +
jnz loc_100E4E9  +
mov eax offset aUnknown_0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push offset unk_1015BA4  +
call sub_100E7C3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push offset unk_1015C20  +
call sub_100E7C3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push offset unk_1015BD8  +
call sub_100E7C3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
xor edx edx +
cmp [ebp+arg_4] 2 +
jnb loc_100E560  +
xor eax eax +
jmp loc_100E617  +
mov eax [ebp+arg_8] +
push edi  +
cmp [ebp+arg_4] esi +
jz loc_100E616  +
mov ecx [ebp+arg_0] +
push 3Fh  +
pop edi  +
push ebx  +
movzx ebx byte ptr [ecx] +
dec [ebp+arg_4]  +
shl edx 8 +
add edx ebx +
inc ecx  +
inc esi  +
cmp esi 3 +
jnz loc_100E5C5  +
mov esi edx +
shr esi 12h +
and esi edi +
mov bl byte_1015C30[esi] +
mov [eax] bl +
mov esi edx +
shr esi 0Ch +
and esi edi +
mov bl byte_1015C30[esi] +
mov esi edx +
inc eax  +
mov [eax] bl +
shr esi 6 +
and esi edi +
mov bl byte_1015C30[esi] +
inc eax  +
and edx edi +
mov [eax] bl +
mov dl byte_1015C30[edx] +
inc eax  +
mov [eax] dl +
inc eax  +
xor edx edx +
xor esi esi +
cmp [ebp+arg_4] 0 +
jnz loc_100E574  +
pop ebx  +
test esi esi +
jz loc_100E616  +
push 3  +
pop ecx  +
sub ecx esi +
shl ecx 3 +
shl edx cl +
mov ecx edx +
shr ecx 12h +
and ecx edi +
mov cl byte_1015C30[ecx] +
mov [eax] cl +
mov ecx edx +
shr ecx 0Ch +
and ecx edi +
mov cl byte_1015C30[ecx] +
inc eax  +
mov [eax] cl +
inc eax  +
cmp esi 2 +
jnz loc_100E60E  +
shr edx 6 +
and edx edi +
mov cl byte_1015C30[edx] +
mov [eax] cl +
jmp loc_100E611  +
mov byte ptr [eax] 3Dh +
inc eax  +
mov byte ptr [eax] 3Dh +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100E651  +
cmp [ebp+arg_4] eax +
jz loc_100E64D  +
mov dl [ebx] +
test dl dl +
jz loc_100E64D  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100E635  +
test esi esi +
jnz loc_100E658  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E664  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100E686  +
cmp edx 7FFFFFFFh +
jbe loc_100E68B  +
mov eax 80070057h +
test eax eax +
jl loc_100E6A1  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100E621  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_8] +
and [ebp+var_4] 0 +
push ebx  +
mov eax 0C000h +
push esi  +
mov esi [ebp+arg_0] +
and ecx eax +
push edi  +
mov byte ptr [esi] 0 +
mov ebx 4000h +
cmp ecx eax +
jnz loc_100E6D7  +
mov eax offset dword_1004974 +
jmp loc_100E6F4  +
cmp ecx 8000h +
jnz loc_100E6E6  +
mov eax offset dword_100496C +
jmp loc_100E6F4  +
mov eax offset dword_1004964 +
cmp ecx ebx +
jz loc_100E6F4  +
mov eax offset dword_1004954 +
mov edi [ebp+arg_4] +
push eax  +
push edi  +
push esi  +
call sub_100E670  +
test [ebp+arg_8] 1000h +
jz loc_100E714  +
push offset dword_100494C  +
push edi  +
push esi  +
call sub_100E06B  +
mov ecx [ebp+arg_8] +
mov eax 300h +
and ecx eax +
cmp ecx eax +
jnz loc_100E729  +
mov eax offset dword_1004944 +
jmp loc_100E75E  +
mov ecx [ebp+arg_8] +
and ecx 200h +
mov eax 100h +
cmp ecx eax +
jnz loc_100E742  +
mov eax offset dword_100493C +
jmp loc_100E75E  +
mov ecx [ebp+arg_8] +
and ecx eax +
cmp ecx ebx +
jnz loc_100E759  +
mov eax offset dword_1004934 +
mov [ebp+var_4] 1 +
jmp loc_100E75E  +
mov eax offset dword_100492C +
push eax  +
push edi  +
push esi  +
call sub_100E670  +
cmp [ebp+var_4] 0 +
jz loc_100E77F  +
test byte ptr [ebp+arg_8] 8 +
mov eax offset dword_1004924 +
jnz loc_100E77C  +
mov eax offset dword_100491C +
push eax  +
jmp loc_100E78A  +
test byte ptr [ebp+arg_8] 8 +
jz loc_100E791  +
push offset dword_1004914  +
push edi  +
push esi  +
call sub_100E06B  +
test byte ptr [ebp+arg_8] 4 +
jz loc_100E7A3  +
push offset dword_100490C  +
push edi  +
push esi  +
call sub_100E06B  +
test byte ptr [ebp+arg_8] 2 +
jz loc_100E7B5  +
push offset dword_1004904  +
push edi  +
push esi  +
call sub_100E06B  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor edx edx +
push esi  +
cmp [ecx+4] edx +
jz loc_100E7E6  +
mov eax ecx +
mov esi [ebp+arg_4] +
cmp esi [eax] +
jz loc_100E7ED  +
inc edx  +
lea eax [ecx+edx*8] +
cmp dword ptr [eax+4] 0 +
jnz loc_100E7D5  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax [ecx+edx*8+4] +
jmp loc_100E7E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
mov eax [ecx+0Ch] +
shr eax 3 +
and eax 3 +
push esi  +
mov edx offset unk_101A408 +
cmp eax 1 +
jnz loc_100E819  +
mov esi [ecx+18h] +
jmp loc_100E81B  +
mov esi edx +
cmp eax 1 +
jnz loc_100E824  +
mov ecx edx +
jmp loc_100E827  +
mov ecx [ecx+18h] +
push esi  +
push ecx  +
push offset aHostnameSS  +
push [ebp+arg_4]  +
call [ebp+arg_0]  +
add esp 10h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+10h] +
mov eax [ecx+0Ch] +
shr eax 3 +
and eax 3 +
push esi  +
mov edx offset unk_101A408 +
cmp eax 1 +
jnz loc_100E862  +
mov esi [ecx+18h] +
jmp loc_100E864  +
mov esi edx +
cmp eax 1 +
jz loc_100E86C  +
mov edx [ecx+18h] +
movzx eax word ptr [ecx+1Ch] +
push esi  +
push edx  +
push eax  +
push offset aPreferenceDExc  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 14h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [eax+0Ch] +
shr ecx 3 +
and ecx 3 +
push esi  +
push edi  +
mov edx offset unk_101A408 +
cmp ecx 1 +
jnz loc_100E8B0  +
mov esi [eax+1Ch] +
mov [ebp+10h] esi +
jmp loc_100E8B3  +
mov [ebp+10h] edx +
mov edi edx +
cmp ecx 1 +
jz loc_100E8F0  +
mov edi [eax+1Ch] +
mov esi edx +
cmp ecx 1 +
jz loc_100E8C7  +
mov edx [eax+18h] +
push dword ptr [eax+30h]  +
push dword ptr [eax+2Ch]  +
push dword ptr [eax+28h]  +
push dword ptr [eax+24h]  +
push dword ptr [eax+20h]  +
push dword ptr [ebp+10h]  +
push edi  +
push esi  +
push edx  +
push offset aPrimarySSAdmin  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 2Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov esi [eax+18h] +
jmp loc_100E8BF  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+10h] +
mov eax [ecx+0Ch] +
shr eax 3 +
and eax 3 +
push esi  +
push edi  +
mov edx offset unk_101A408 +
cmp eax 1 +
jnz loc_100E91F  +
mov esi [ecx+1Ch] +
mov [ebp+10h] esi +
jmp loc_100E922  +
mov [ebp+10h] edx +
mov edi edx +
cmp eax 1 +
jz loc_100E937  +
mov edi [ecx+1Ch] +
mov esi edx +
cmp eax 1 +
jnz loc_100E93C  +
mov ecx edx +
jmp loc_100E93F  +
mov esi [ecx+18h] +
jmp loc_100E92E  +
***
mov ecx [ecx+18h] +
push dword ptr [ebp+10h]  +
push edi  +
push esi  +
push ecx  +
push offset aMailboxSSError  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 18h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov ebx [esi+18h] +
push edi  +
lea edi [esi+1Ch] +
call sub_100D8EB  +
push ebx  +
push offset aStringcountD  +
push [ebp+arg_4]  +
call [ebp+arg_0]  +
xor eax eax +
inc eax  +
add esp 0Ch +
cmp ebx eax +
mov [ebp+arg_8] eax +
jl loc_100E9CE  +
mov eax [esi+0Ch] +
shr eax 3 +
and eax 3 +
cmp eax 1 +
jnz loc_100E99F  +
mov ecx [edi] +
jmp loc_100E9A4  +
mov ecx offset unk_101A408 +
cmp eax 1 +
mov eax offset unk_101A408 +
jz loc_100E9B0  +
mov eax [edi] +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push offset aStringDSS  +
push [ebp+arg_4]  +
call [ebp+arg_0]  +
add esp 14h +
add edi 4 +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] ebx +
jle loc_100E98D  +
call sub_100D936  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
add eax 18h +
push eax  +
lea eax [ebp-48h] +
push eax  +
call sub_100D191  +
lea eax [ebp-48h] +
push eax  +
push offset aIp6AddressS  +
push edi  +
call esi  +
mov ecx [ebp-4] +
add esp 0Ch +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100CC5F  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [eax+0Ch] +
shr ecx 3 +
and ecx 3 +
push esi  +
mov edx offset unk_101A408 +
cmp ecx 1 +
jnz loc_100EA4E  +
mov esi [eax+18h] +
jmp loc_100EA50  +
mov esi edx +
cmp ecx 1 +
jz loc_100EA58  +
mov edx [eax+18h] +
movzx ecx word ptr [eax+20h] +
push esi  +
push edx  +
push ecx  +
movzx ecx word ptr [eax+1Eh] +
movzx eax word ptr [eax+1Ch] +
push ecx  +
push eax  +
push offset aPriorityDWei_0  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 1Ch +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov edx [eax+0Ch] +
sub esp 0Ch +
push ebx  +
push esi  +
shr edx 3 +
xor esi esi +
and edx 3 +
inc esi  +
push edi  +
mov ecx offset unk_101A408 +
cmp edx esi +
jnz loc_100EAAC  +
mov edi [eax+28h] +
mov [ebp+10h] edi +
jmp loc_100EAAF  +
mov [ebp+10h] ecx +
cmp edx esi +
jnz loc_100EAB8  +
mov [ebp-4] ecx +
jmp loc_100EABE  +
mov edi [eax+28h] +
mov [ebp-4] edi +
cmp edx esi +
jnz loc_100EACA  +
mov edi [eax+24h] +
mov [ebp-8] edi +
jmp loc_100EACD  +
mov [ebp-8] ecx +
cmp edx esi +
jnz loc_100EAD6  +
mov [ebp-0Ch] ecx +
jmp loc_100EADC  +
mov edi [eax+24h] +
mov [ebp-0Ch] edi +
cmp edx esi +
jnz loc_100EAE5  +
mov ebx [eax+20h] +
jmp loc_100EAE7  +
mov ebx ecx +
mov edi ecx +
cmp edx esi +
jz loc_100EB29  +
mov edi [eax+20h] +
mov esi ecx +
cmp edx 1 +
jz loc_100EAFA  +
mov ecx [eax+1Ch] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-4]  +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
push ebx  +
push edi  +
push esi  +
push ecx  +
movzx ecx word ptr [eax+1Ah] +
movzx eax word ptr [eax+18h] +
push ecx  +
push eax  +
push offset aOrderDPreferen  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov esi [eax+1Ch] +
jmp loc_100EAF2  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
movzx eax byte ptr [esi+18h] +
push eax  +
push offset aAddressTypeD  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
lea eax [esi+19h] +
add esp 0Ch +
test eax eax +
jz loc_100EB8D  +
cmp byte ptr [esi+18h] 1 +
jnz loc_100EB6D  +
push eax  +
push offset aAddressS  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 0Ch +
jmp loc_100EB8D  +
test eax eax +
jz loc_100EB8D  +
movzx ecx word ptr [esi+0Ah] +
dec ecx  +
push ecx  +
push eax  +
push offset asc_1005058  +
push offset aAddress  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
mov eax [esi+0Ch] +
shr eax 3 +
and eax 3 +
push edi  +
mov ecx offset unk_101A408 +
cmp eax 1 +
jnz loc_100EBB9  +
mov edx [esi+2Ch] +
jmp loc_100EBBB  +
mov edx ecx +
cmp eax 1 +
jz loc_100EBC3  +
mov ecx [esi+2Ch] +
mov al [esi+1Ah] +
push edx  +
push ecx  +
movzx ecx word ptr [esi+28h] +
movzx edi word ptr [esi+18h] +
push ecx  +
push dword ptr [esi+24h]  +
movzx ecx byte ptr [esi+1Bh] +
push dword ptr [esi+20h]  +
push dword ptr [esi+1Ch]  +
push ecx  +
movzx ecx al +
push ecx  +
push eax  +
call sub_100E52C  +
push eax  +
movzx eax di +
push eax  +
push edi  +
call sub_100E4D3  +
push eax  +
push offset aTypeCoveredSDA  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
movzx eax word ptr [esi+2Ah] +
add esp 34h +
push eax  +
add esi 30h +
push esi  +
push offset asc_1002F3C  +
push offset aSignature_1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_1014D78 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
mov cl [esi+1Ah] +
movzx eax byte ptr [esi+1Bh] +
mov byte ptr [ebp+var_70] cl +
movzx ecx word ptr [esi+18h] +
mov [ebp+var_6C] ecx +
push edi  +
mov edi [ebp+arg_0] +
movzx ecx al +
push ecx  +
push eax  +
call sub_100E52C  +
push eax  +
movzx eax byte ptr [ebp+var_70] +
push eax  +
push [ebp+var_70]  +
call sub_100E4F2  +
push eax  +
push [ebp+var_6C]  +
lea eax [ebp+var_68] +
push [ebp+var_6C]  +
push 64h  +
push eax  +
call sub_100E6AA  +
push eax  +
push offset aFlagsS0x04xPro  +
push ebx  +
call edi  +
movzx eax word ptr [esi+1Ch] +
add esp 20h +
push eax  +
add esi 20h +
push esi  +
push offset asc_1002F3C  +
push offset aPublicKey  +
push ebx  +
push edi  +
call sub_100DF77  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100CC5F  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
push dword ptr [eax+18h]  +
add eax 1Ch +
push eax  +
push offset asc_1002F3C  +
push offset aDhcid  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
mov eax [esi+0Ch] +
shr eax 3 +
and eax 3 +
mov ecx offset unk_101A408 +
cmp eax 1 +
jnz loc_100ED0F  +
mov edx [esi+18h] +
jmp loc_100ED11  +
mov edx ecx +
cmp eax 1 +
mov eax ecx +
jz loc_100ED1B  +
mov eax [esi+18h] +
push edx  +
push eax  +
push offset aNextDomainName  +
push [ebp+arg_4]  +
call [ebp+arg_0]  +
movzx eax word ptr [esi+1Ch] +
add esp 10h +
push eax  +
add esi 20h +
push esi  +
push offset asc_1002F3C  +
push offset aTypeBitMaps  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DF77  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+10h] +
movzx eax byte ptr [esi+1Bh] +
mov bl [esi+1Ah] +
movzx ecx al +
push ecx  +
push eax  +
call sub_100E50F  +
push eax  +
movzx eax bl +
push eax  +
push ebx  +
call sub_100E52C  +
push eax  +
movzx eax word ptr [esi+18h] +
push eax  +
push offset aKeyTagDAlgorit  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
movzx eax word ptr [esi+1Ch] +
add esp 1Ch +
push eax  +
add esi 20h +
push esi  +
push offset asc_1002F3C  +
push offset aDigest  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
movzx ecx word ptr [eax+18h] +
push ecx  +
add eax 1Ch +
push eax  +
push offset asc_1002F3C  +
push offset aOptions  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DF77  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
call sub_100D8EB  +
mov esi [ebp+10h] +
xor edi edi +
cmp [esi+3Ch] edi +
jz loc_100EE17  +
push offset asc_1001A78  +
push edi  +
push edi  +
push dword ptr [esi+1Ch]  +
push offset aAlgorithm  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DB05  +
jmp loc_100EE4B  +
mov eax [esi+0Ch] +
shr eax 3 +
and eax 3 +
mov ecx offset unk_101A408 +
cmp eax 1 +
jnz loc_100EE2F  +
mov edx [esi+18h] +
jmp loc_100EE31  +
mov edx ecx +
cmp eax 1 +
mov eax ecx +
jz loc_100EE3B  +
mov eax [esi+18h] +
push edx  +
push eax  +
push offset aAlgorithmSS  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 10h +
push dword ptr [esi+24h]  +
movzx eax word ptr [esi+38h] +
push eax  +
movzx eax word ptr [esi+34h] +
push eax  +
movzx eax word ptr [esi+32h] +
push eax  +
push dword ptr [esi+20h]  +
movzx eax word ptr [esi+36h] +
push eax  +
movzx eax word ptr [esi+30h] +
push eax  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+28h]  +
push offset aSignedTimeI64u  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
mov eax [esi+20h] +
add esp 2Ch +
cmp eax edi +
jz loc_100EE9C  +
movzx ecx word ptr [esi+36h] +
push ecx  +
push eax  +
push edi  +
push offset aSignature  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
mov eax [esi+24h] +
cmp eax edi +
jz loc_100EEBA  +
movzx ecx word ptr [esi+38h] +
push ecx  +
push eax  +
push edi  +
push offset aOtherData  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
call sub_100D936  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
call sub_100D8EB  +
mov esi [ebp+10h] +
xor edi edi +
cmp [esi+3Ch] edi +
jz loc_100EEFC  +
push offset asc_1001A78  +
push edi  +
push edi  +
push dword ptr [esi+1Ch]  +
push offset aAlgorithm  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DB05  +
jmp loc_100EF30  +
mov eax [esi+0Ch] +
shr eax 3 +
and eax 3 +
mov ecx offset unk_101A408 +
cmp eax 1 +
jnz loc_100EF14  +
mov edx [esi+18h] +
jmp loc_100EF16  +
mov edx ecx +
cmp eax 1 +
mov eax ecx +
jz loc_100EF20  +
mov eax [esi+18h] +
push edx  +
push eax  +
push offset aAlgorithmSS  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 10h +
push dword ptr [esi+24h]  +
movzx eax word ptr [esi+36h] +
push eax  +
push dword ptr [esi+20h]  +
movzx eax word ptr [esi+34h] +
push eax  +
movzx eax word ptr [esi+32h] +
push eax  +
movzx eax word ptr [esi+30h] +
push eax  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+28h]  +
push offset aCreateTimeDExp  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
mov eax [esi+20h] +
add esp 28h +
cmp eax edi +
jz loc_100EF7C  +
movzx ecx word ptr [esi+34h] +
push ecx  +
push eax  +
push edi  +
push offset aKey  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
mov eax [esi+24h] +
cmp eax edi +
jz loc_100EF9A  +
movzx ecx word ptr [esi+36h] +
push ecx  +
push eax  +
push edi  +
push offset aOtherData  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF77  +
call sub_100D936  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aErrorInvalidRe  +
push [ebp+arg_4]  +
call [ebp+arg_0]  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
push ebx  +
movzx ebx word ptr [eax+0Ah] +
cmp bx 4 +
jnz loc_100EFF2  +
push dword ptr [eax+18h]  +
call ds:inet_ntoa  +
push eax  +
push offset aIpAddressS  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 0Ch +
jmp loc_100F03B  +
test bl 3 +
jz loc_100F005  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100EFAA  +
jmp loc_100F03B  +
push esi  +
lea esi [eax+18h] +
call sub_100D8EB  +
jmp loc_100F030  +
push dword ptr [esi]  +
call ds:inet_ntoa  +
push eax  +
push offset aIpAddressS  +
push dword ptr [ebp+0Ch]  +
call dword ptr [ebp+8]  +
add esp 0Ch +
add ebx 0FFFCh +
add esi 4 +
test bx bx +
jnz loc_100F010  +
call sub_100D936  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea eax [ebp+var_10] +
push eax  +
call ds:RtlInitString  +
push 1  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlAnsiStringToUnicodeString  +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov [ebp+var_24] eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
lea eax [ebp+var_28] +
push eax  +
push 20019h  +
push [ebp+arg_0]  +
lea ecx [ebp+var_8] +
mov [ebp+var_28] 18h +
mov [ebp+var_1C] 40h +
mov [ebp+var_20] ecx +
call ds:NtOpenKey  +
mov esi eax +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlFreeUnicodeString  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax large fs:18h +
mov eax [eax+30h] +
sub esp 24h +
push ebx  +
mov ebx ds:RtlAllocateHeap +
push esi  +
push edi  +
mov esi 400h +
push esi  +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov edi eax +
test edi edi +
jnz loc_100F10F  +
mov eax 0C0000017h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
push esi  +
push 0  +
push edi  +
call memset  +
xor eax eax +
mov word ptr [ebp+var_C] ax +
add esp 0Ch +
mov eax esi +
mov word ptr [ebp+var_C+2] ax +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100F15D  +
mov esi 0C0000017h +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax esi +
jmp loc_100F108  +
mov ecx [ebp+arg_4] +
mov eax esi +
mov word ptr [ebp+var_1C+2] ax +
mov eax ecx +
lea edx [eax+1] +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_100F16B  +
sub eax edx +
mov word ptr [ebp+var_1C] ax +
push 0  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
mov [ebp+var_18] ecx +
call ds:RtlAnsiStringToUnicodeString  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push edi  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call ds:NtQueryValueKey  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100F1C3  +
push [ebp+var_8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov esi [ebp+arg_4] +
jmp loc_100F144  +
mov eax [edi+4] +
mov ebx [ebp+arg_C] +
mov [ebx] eax +
cmp eax 4 +
jz loc_100F27F  +
cmp eax 3 +
jz loc_100F27F  +
xor eax eax +
cmp dword ptr [ebx] 2 +
mov word ptr [ebp+var_14] ax +
jnz loc_100F1F4  +
mov eax [ebp+var_8] +
mov [ebp+lpSrc] eax +
mov word ptr [ebp+var_14+2] si +
jmp loc_100F219  +
push [ebp+var_8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax [ebp+lpDst] +
mov [ebp+lpSrc] eax +
mov ax word ptr [ebp+nSize] +
mov word ptr [ebp+var_14+2] ax +
mov ax [edi+0Ch] +
mov word ptr [ebp+var_24] ax +
mov ax [edi+0Ch] +
mov word ptr [ebp+var_24+2] ax +
mov eax [edi+8] +
add eax edi +
mov [ebp+var_20] eax +
push 0  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call ds:RtlUnicodeStringToAnsiString  +
cmp dword ptr [ebx] 2 +
jnz loc_100F1BE  +
push [ebp+nSize]  +
push [ebp+lpDst]  +
push [ebp+lpSrc]  +
call ds:ExpandEnvironmentStringsA  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100F26B  +
call ds:GetLastError  +
mov [ebp+arg_4] eax +
jmp loc_100F277  +
cmp eax [ebp+nSize] +
jb loc_100F277  +
mov [ebp+arg_4] 0C0000023h +
push [ebp+lpSrc]  +
jmp loc_100F1AA  +
cmp [ebp+nSize] 4 +
jb loc_100F295  +
mov eax [edi+8] +
mov eax [edi+eax] +
mov ecx [ebp+lpDst] +
mov [ecx] eax +
jmp loc_100F1A7  +
mov [ebp+arg_4] 0C0000023h +
jmp loc_100F1A7  +
***
retf 5203h  +
***
retf   +
***
retn   +
***
retn 5204h  +
***
