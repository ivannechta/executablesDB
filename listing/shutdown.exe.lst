mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10017EA  +
cmp [ebp+arg_4] eax +
jz loc_10017E6  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10017E6  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10017C9  +
test esi esi +
jnz loc_10017F2  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001800  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1001835  +
cmp eax esi +
ja loc_1001835  +
jz loc_100183A  +
jmp loc_1001842  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100184B  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1001876  +
mov eax [ebp+arg_0] +
jb loc_100186D  +
cmp eax 0FFFFFFFFh +
ja loc_1001876  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1001881  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
test eax eax +
jz loc_100189A  +
push eax  +
call ds:LocalFree  +
and hMem 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx eax +
neg ecx  +
sbb ecx ecx +
mov edx 1000000h +
and ecx edx +
add ecx edx +
neg eax  +
sbb eax eax +
mov edx 4000000h +
and eax edx +
add eax edx +
mov edx hMem +
mov [ebp+arg_4] eax +
test edx edx +
jnz loc_10018DC  +
xor eax eax +
jmp loc_100191E  +
test [ebp+arg_0] ecx +
jz loc_10018E6  +
xor eax eax +
inc eax  +
jmp loc_100191E  +
push ebx  +
push esi  +
push edi  +
mov edi dword_1007BA4 +
xor ebx ebx +
test edi edi +
jle loc_1001919  +
mov esi [edx] +
test esi ecx +
jz loc_100190E  +
mov eax esi +
xor eax [ebp+arg_0] +
test eax 0F0FFFFFFh +
jnz loc_100190E  +
mov eax [ebp+arg_4] +
test esi eax +
jnz loc_1001922  +
inc ebx  +
add edx 284h +
cmp ebx edi +
jl loc_10018F5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor eax eax +
inc eax  +
jmp loc_100191B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
or [ebp+var_4] 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
neg edi  +
sbb edi edi +
and edi 80000000h +
neg esi  +
sbb esi esi +
mov eax 4000000h +
and esi eax +
add esi eax +
xor eax eax +
cmp [ebp+hWnd] eax +
jz loc_1001A35  +
push ebx  +
mov ebx ds:SendMessageW +
push eax  +
push eax  +
jmp loc_100197D  +
push 0  +
push 0  +
push 144h  +
push [ebp+hWnd]  +
call ebx  +
push 0  +
push 0  +
push 146h  +
push [ebp+hWnd]  +
call ebx  +
test eax eax +
jnz loc_100196B  +
cmp dword_1007BA4 eax +
mov [ebp+arg_8] eax +
jle loc_1001A2C  +
mov [ebp+arg_4] eax +
mov ecx [ebp+arg_4] +
mov eax hMem +
add eax ecx +
mov ecx [eax] +
mov edx ecx +
and edx 80000000h +
cmp edx edi +
jnz loc_10019D7  +
and ecx esi +
cmp ecx esi +
jnz loc_10019D7  +
add eax 4 +
push eax  +
push 0  +
push 143h  +
push [ebp+hWnd]  +
call ebx  +
cmp [ebp+var_4] 0FFFFFFFFh +
jnz loc_10019D7  +
mov eax [ebp+arg_8] +
mov [ebp+var_4] eax +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
add [ebp+arg_4] 284h +
cmp eax dword_1007BA4 +
jl loc_100199D  +
mov esi [ebp+var_4] +
cmp esi 0FFFFFFFFh +
jz loc_1001A2C  +
mov eax hMem +
imul esi esi +
lea eax [esi+eax+4] +
push eax  +
push 0FFFFFFFFh  +
push 14Dh  +
push [ebp+hWnd]  +
call ebx  +
cmp [ebp+arg_C] 0 +
jz loc_1001A2C  +
mov eax hMem +
lea eax [esi+eax+84h] +
push eax  +
push [ebp+arg_C]  +
call ds:SetWindowTextW  +
mov eax [ebp+var_4] +
mov dword_1007014 eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1001AD8  +
cmp ebx edi +
jz loc_1001AD8  +
push esi  +
push 40h  +
lea ecx [ebp+String1] +
push ecx  +
push eax  +
call ds:GetWindowTextW  +
xor eax eax +
xor esi esi +
mov [ebp+var_6] ax +
cmp dword_1007BA4 edi +
jbe loc_1001AD7  +
mov eax hMem +
lea eax [edi+eax+4] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1001AB4  +
inc esi  +
add edi 284h +
cmp esi dword_1007BA4 +
jb loc_1001A88  +
jmp loc_1001AD7  +
mov ecx hMem +
mov eax esi +
imul eax eax +
lea eax [eax+ecx+84h] +
push eax  +
push ebx  +
call ds:SetWindowTextW  +
mov dword_1007014 esi +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1005CD9  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+hFile]  +
call ds:GetStdHandle  +
xor esi esi +
mov [ebp+hFile] eax +
cmp eax esi +
jz loc_1001BAF  +
push ebx  +
mov ebx [ebp+lpWideCharStr] +
cmp ebx esi +
jz loc_1001BAE  +
cmp [ebx] si +
jz loc_1001BAE  +
push edi  +
push ebx  +
call ds:lstrlenW  +
push [ebp+hFile]  +
mov edi eax +
mov [ebp+NumberOfBytesWritten] esi +
mov [ebp+Mode] esi +
call ds:GetFileType  +
cmp eax 2 +
jnz loc_1001B61  +
lea eax [ebp+Mode] +
push eax  +
push [ebp+hFile]  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_1001B61  +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push edi  +
push ebx  +
push [ebp+hFile]  +
call ds:WriteConsoleW  +
jmp loc_1001BAD  +
add edi edi +
lea eax [edi+2] +
push eax  +
push esi  +
call ds:LocalAlloc  +
mov ebx eax +
cmp ebx esi +
jz loc_1001BAD  +
push esi  +
push esi  +
push edi  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push esi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_1001BA6  +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push ebx  +
call ds:lstrlenA  +
push eax  +
push ebx  +
push [ebp+hFile]  +
call ds:WriteFile  +
push ebx  +
call ds:LocalFree  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFF5h  +
push [ebp+lpWideCharStr]  +
call sub_1001AED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFF4h  +
push [ebp+lpWideCharStr]  +
call sub_1001AED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov ecx [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edx edx +
mov [ebp+var_C] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
xor edi edi +
mov eax edi +
sub eax ebx +
jz loc_1001CB8  +
dec eax  +
jz loc_1001C59  +
dec eax  +
jnz loc_1001D19  +
movzx eax word ptr [esi+edx*2] +
cmp ax 30h +
jb loc_1001D22  +
cmp ax 39h +
ja loc_1001D22  +
mov ebx [ebp+var_8] +
imul ebx ebx +
movzx eax ax +
lea eax [ebx+eax-30h] +
mov [ebp+var_14] 1 +
mov [ebp+var_8] eax +
xor ebx ebx +
jmp loc_1001D0F  +
movzx eax word ptr [esi+edx*2] +
cmp ax 30h +
jb loc_1001C82  +
cmp ax 39h +
ja loc_1001C82  +
mov ebx [ebp+var_4] +
imul ebx ebx +
movzx eax ax +
lea eax [ebx+eax-30h] +
mov [ebp+var_C] 1 +
mov [ebp+var_4] eax +
jmp loc_1001C52  +
cmp [ebp+var_C] ebx +
jz loc_1001D19  +
cmp [ebp+var_4] 0FFh +
jg loc_1001D19  +
cmp [ebp+var_4] 40h +
jl loc_1001CA4  +
or dword ptr [ecx] 40000000h +
mov eax [ebp+var_4] +
shl eax 10h +
or [ecx] eax +
cmp word ptr [esi+edx*2] 3Ah +
jnz loc_1001D19  +
push 2  +
pop edi  +
jmp loc_1001D0F  +
movzx eax word ptr [esi+edx*2] +
cmp eax 30h +
jl loc_1001D19  +
cmp eax 39h +
jle loc_1001D05  +
cmp eax 3Ah +
jz loc_1001CFC  +
cmp eax 50h +
jz loc_1001CED  +
cmp eax 55h +
jz loc_1001CDF  +
cmp eax 70h +
jz loc_1001CED  +
cmp eax 75h +
jnz loc_1001D19  +
cmp [ebp+var_10] ebx +
jnz loc_1001D19  +
mov [ebp+var_10] 1 +
jmp loc_1001D0F  +
mov eax [ecx] +
test eax eax +
js loc_1001D19  +
or eax 80000000h +
mov [ecx] eax +
jmp loc_1001D0F  +
cmp edx ebx +
jz loc_1001D19  +
xor edi edi +
inc edi  +
jmp loc_1001D0F  +
cmp edx ebx +
jnz loc_1001D19  +
xor edi edi +
inc edi  +
or edx 0FFFFFFFFh +
inc edx  +
cmp edi 4 +
jnz loc_1001C0F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp [ebp+var_14] ebx +
jz loc_1001D19  +
cmp [ebp+var_8] 0FFFFh +
jg loc_1001D19  +
mov eax [ecx] +
and eax 0FFFF0000h +
or eax [ebp+var_8] +
mov [ecx] eax +
xor eax eax +
cmp [esi+edx*2] bx +
setz al  +
jmp loc_1001D1B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
and dword ptr [ecx] 0 +
mov edx [ebp+arg_0] +
push esi  +
jmp loc_1001D79  +
cmp ax 30h +
jb loc_1001D89  +
cmp ax 39h +
ja loc_1001D89  +
mov esi [ecx] +
imul esi esi +
movzx eax ax +
lea eax [esi+eax-30h] +
inc edx  +
mov [ecx] eax +
inc edx  +
movzx eax word ptr [edx] +
test ax ax +
jnz loc_1001D5D  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1001D84  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_8] +
xor esi esi +
mov [eax] esi +
mov eax [ebp+arg_C] +
mov [eax] esi +
mov eax [ebp+arg_10] +
mov [eax] esi +
mov eax [ebp+arg_14] +
mov [eax] esi +
mov eax [ebp+arg_18] +
mov [eax] esi +
mov eax [ebp+arg_1C] +
mov [eax] esi +
mov eax [ebp+arg_20] +
mov [eax] esi +
mov eax [ebp+arg_24] +
mov [eax] esi +
mov eax [ebp+arg_28] +
mov [eax] esi +
mov eax [ebp+arg_2C] +
mov [eax] esi +
mov eax [ebp+arg_30] +
xor ebx ebx +
mov dword ptr [eax] 1Eh +
mov eax [ebp+arg_34] +
inc ebx  +
cmp [ebp+arg_0] ebx +
mov [ebp+var_1C] esi +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
mov [ebp+var_4] esi +
mov dword ptr [eax] 800000FFh +
mov [ebp+var_8] ebx +
jle loc_1001FD4  +
mov ecx [ebp+var_8] +
mov eax [ebp+arg_4] +
mov eax [eax+ecx*4] +
movzx ecx word ptr [eax] +
sub ecx 2Dh +
jz loc_1001E19  +
dec ecx  +
dec ecx  +
jnz loc_1001E55  +
movzx ecx word ptr [eax+2] +
add ecx 0FFFFFFBFh +
cmp ecx 38h +
ja loc_1001E55  +
movzx ecx ds:byte_100211E[ecx] +
jmp ds:off_10020E2[ecx*4]  +
mov ecx [ebp+arg_8] +
jmp loc_1001E78  +
cmp [ebp+var_1C] esi +
jnz loc_1001E55  +
mov [ebp+var_1C] ebx +
jmp loc_1001E7E  +
mov ecx [ebp+arg_C] +
cmp [ecx] esi +
jnz loc_1001E55  +
mov [ecx] ebx +
cmp [eax+4] si +
jz loc_1001FB7  +
xor eax eax +
jmp loc_10020DA  +
mov ecx [ebp+arg_14] +
jmp loc_1001E78  +
mov ecx [ebp+arg_10] +
jmp loc_1001E78  +
mov ecx [ebp+arg_18] +
jmp loc_1001E78  +
mov ecx [ebp+arg_1C] +
jmp loc_1001E78  +
mov ecx [ebp+arg_20] +
jmp loc_1001E78  +
mov ecx [ebp+arg_24] +
cmp [ecx] esi +
jnz loc_1001E55  +
mov [ecx] ebx +
cmp [eax+4] si +
jnz loc_1001E55  +
inc [ebp+var_4]  +
jmp loc_1001FB7  +
cmp [ebp+var_C] esi +
jnz loc_1001E55  +
mov eax [ebp+var_8] +
inc eax  +
mov [ebp+var_8] eax +
cmp eax [ebp+arg_0] +
jz loc_1001E55  +
mov ecx [ebp+arg_4] +
mov eax [ecx+eax*4] +
movzx ecx word ptr [eax] +
cmp cx 30h +
jb loc_1001E55  +
cmp cx 39h +
ja loc_1001E55  +
mov edi [ebp+arg_30] +
push edi  +
push eax  +
call sub_1001D4C  +
test eax eax +
jz loc_1001E55  +
cmp dword ptr [edi] 12CC0300h +
ja loc_1001E55  +
mov [ebp+var_C] ebx +
jmp loc_1001FB7  +
cmp [ebp+var_14] esi +
jnz loc_1001E55  +
mov eax [ebp+var_8] +
inc eax  +
mov [ebp+var_8] eax +
cmp eax [ebp+arg_0] +
jz loc_1001E55  +
mov ecx [ebp+arg_4] +
mov eax [ecx+eax*4] +
mov ecx [ebp+arg_34] +
push ecx  +
push eax  +
mov dword ptr [ecx] 0FFh +
call sub_1001BE9  +
test eax eax +
jz loc_1001E55  +
mov [ebp+var_14] ebx +
jmp loc_1001FB7  +
cmp [ebp+var_10] esi +
jnz loc_1001E55  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_0] +
jz loc_1001E55  +
mov eax [ebp+arg_2C] +
cmp [eax] esi +
jnz loc_1001E55  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_8] +
mov ecx [eax+ecx*4] +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1001F3C  +
sub eax edi +
sar eax 1 +
cmp eax 1FFh +
ja loc_1001E55  +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1001F5A  +
sub eax edi +
sar eax 1 +
jz loc_1001E55  +
mov eax [ebp+arg_2C] +
mov [eax] ecx +
mov [ebp+var_10] ebx +
jmp loc_1001FB7  +
cmp [ebp+var_18] esi +
jnz loc_1001E55  +
mov eax [ebp+var_8] +
inc eax  +
mov [ebp+var_8] eax +
cmp eax [ebp+arg_0] +
jz loc_1001E55  +
mov ecx [ebp+arg_28] +
cmp [ecx] esi +
jnz loc_1001E55  +
mov edx [ebp+arg_4] +
mov eax [edx+eax*4] +
cmp word ptr [eax] 5Ch +
jnz loc_1001FB2  +
cmp word ptr [eax+2] 5Ch +
jnz loc_1001FB2  +
add eax 4 +
mov [ecx] eax +
mov [ebp+var_18] ebx +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_0] +
jl loc_1001E04  +
cmp [ebp+var_4] ebx +
ja loc_1001E55  +
cmp [ebp+var_4] esi +
jnz loc_1001FD9  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
mov eax [ebp+arg_8] +
cmp [eax] esi +
jz loc_1002010  +
cmp [ebp+var_C] esi +
jnz loc_1001E55  +
cmp [ebp+var_14] esi +
jnz loc_1001E55  +
cmp [ebp+var_10] esi +
jnz loc_1001E55  +
cmp [ebp+var_18] esi +
jnz loc_1001E55  +
mov eax [ebp+arg_24] +
cmp [eax] esi +
jz loc_1002013  +
jmp loc_1001E55  +
mov eax [ebp+arg_24] +
mov ecx [ebp+arg_18] +
cmp [ecx] esi +
jz loc_1002048  +
cmp [ebp+var_C] esi +
jnz loc_1001E55  +
cmp [ebp+var_14] esi +
jnz loc_1001E55  +
mov ecx [ebp+arg_C] +
cmp [ecx] esi +
jnz loc_1001E55  +
cmp [ebp+var_10] esi +
jnz loc_1001E55  +
cmp [eax] esi +
jnz loc_1001E55  +
mov ecx [ebp+arg_14] +
cmp [ecx] esi +
jz loc_100207B  +
cmp [ebp+var_C] esi +
jnz loc_1001E55  +
cmp [ebp+var_14] esi +
jnz loc_1001E55  +
cmp [ebp+var_10] esi +
jnz loc_1001E55  +
cmp [ebp+var_18] esi +
jnz loc_1001E55  +
cmp [eax] esi +
jnz loc_1001E55  +
mov ecx [ebp+arg_1C] +
cmp [ecx] esi +
jz loc_10020A5  +
cmp [ebp+var_C] esi +
jnz loc_1001E55  +
cmp [ebp+var_10] esi +
jnz loc_1001E55  +
cmp [ebp+var_18] esi +
jnz loc_1001E55  +
cmp [eax] esi +
jnz loc_1001E55  +
mov ecx [ebp+arg_20] +
cmp [ecx] esi +
jz loc_10020C9  +
mov ecx [ebp+arg_C] +
cmp [ecx] esi +
jnz loc_1001E55  +
cmp [ebp+var_C] esi +
jnz loc_1001E55  +
cmp [ebp+var_14] esi +
jz loc_1001E55  +
cmp [eax] esi +
jz loc_10020D8  +
mov eax [ebp+arg_10] +
cmp [eax] esi +
jnz loc_1001E55  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 38h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_1002187  +
push esi  +
mov esi ds:RtlAdjustPrivilege +
lea eax [ebp+arg_4+3] +
push eax  +
push 0  +
push 1  +
push 13h  +
call esi  +
lea eax [ebp+arg_4+3] +
push eax  +
push 0  +
push 1  +
push 18h  +
call esi  +
pop esi  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push 4Ch  +
lea eax [ebp+var_50] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push 4  +
xor esi esi +
call ds:NtPowerInformation  +
mov ecx [ebp+arg_0] +
sub ecx ebx +
jz loc_10021CE  +
dec ecx  +
jnz loc_10021DA  +
cmp eax ebx +
jl loc_10021DA  +
cmp [ebp+var_49] bl +
jmp loc_10021D5  +
cmp eax ebx +
jl loc_10021DA  +
cmp [ebp+var_48] bl +
jz loc_10021DA  +
xor esi esi +
inc esi  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005CD9  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
xor eax eax +
cmp edi esi +
jz loc_100223E  +
push ebx  +
mov ebx [ebp+arg_0] +
mov [edi] ax +
cmp ebx esi +
jz loc_100223B  +
cmp dword_1007038 esi +
jbe loc_100223B  +
push dword_100701C[esi*8]  +
push off_1007018[esi*8]  +
push ebx  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jz loc_1002244  +
inc esi  +
cmp esi dword_1007038 +
jb loc_1002216  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
test esi esi +
jz loc_10022D9  +
jbe loc_100223B  +
push 2  +
pop edx  +
cmp esi edx +
jbe loc_1002299  +
cmp esi 3 +
jnz loc_100223B  +
push offset aCn  +
push ebx  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100223B  +
add eax 6 +
xor edx edx +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1002312  +
cmp cx 2Ch +
jz loc_1002312  +
mov [edi] cx +
inc edi  +
inc edi  +
inc eax  +
inc eax  +
inc edx  +
cmp edx 103h +
jb loc_1002271  +
jmp loc_1002312  +
mov eax dword_100701C[esi*8] +
lea eax [ebx+eax*2] +
jmp loc_10022AD  +
cmp cx 2Fh +
jz loc_10022B5  +
add eax edx +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_10022A5  +
add eax edx +
xor esi esi +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1002312  +
cmp cx 2Ch +
jz loc_1002312  +
mov [edi] cx +
add edi edx +
add eax edx +
inc esi  +
cmp esi 103h +
jb loc_10022B9  +
jmp loc_1002312  +
push offset aCn  +
push ebx  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100223B  +
add eax 6 +
xor edx edx +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1002312  +
cmp cx 2Ch +
jz loc_1002312  +
mov [edi] cx +
inc edi  +
inc edi  +
inc eax  +
inc eax  +
inc edx  +
cmp edx 103h +
jb loc_10022F4  +
xor eax eax +
mov [edi] ax +
inc eax  +
jmp loc_100223D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
dec eax  +
jz loc_1002341  +
dec eax  +
jnz loc_1002397  +
cmp [ebp+arg_C] eax +
jnz loc_1002397  +
push eax  +
push [ebp+hDlg]  +
call ds:EndDialog  +
jmp loc_1002397  +
cmp [ebp+arg_C] 0 +
jnz loc_1002397  +
push edi  +
push 3F8h  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
mov edi eax +
test edi edi +
jz loc_100238B  +
push esi  +
push edi  +
call ds:GetWindowTextLengthW  +
mov esi eax +
test esi esi +
jz loc_100238A  +
lea eax [esi+esi+2] +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov dword_100777C eax +
test eax eax +
jz loc_100238A  +
inc esi  +
push esi  +
push eax  +
push edi  +
call ds:GetWindowTextW  +
pop esi  +
push 0  +
push [ebp+hDlg]  +
call ds:EndDialog  +
pop edi  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword_1007BAC  +
call ds:DecodePointer  +
cmp dword ptr [ebp+0Ch] 302h +
jnz loc_10023C1  +
xor eax eax +
inc eax  +
jmp loc_10023DE  +
cmp dword ptr [ebp+0Ch] 7Bh +
jz loc_10023BC  +
test eax eax +
jz loc_10023DE  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call ds:CallWindowProcW  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 208h  +
push 0  +
mov esi 104h +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_1002449  +
push ebx  +
mov ebx ds:LoadStringW +
jmp loc_100242C  +
push edi  +
call ds:LocalFree  +
mov eax esi +
shl eax 2 +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_100244F  +
add esi esi +
push esi  +
push edi  +
push [ebp+arg_0]  +
push hInstance  +
call ebx  +
lea ecx [eax+1] +
cmp ecx esi +
jz loc_100240F  +
xor ecx ecx +
mov [edi+eax*2] cx +
mov eax edi +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1002448  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push esi  +
push 80h  +
lea ecx [ebp+ClassName] +
push ecx  +
push eax  +
call ds:GetClassNameW  +
test eax eax +
jz loc_10024BB  +
mov esi ds:_wcsicmp +
lea eax [ebp+ClassName] +
push offset aStatic  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10024B6  +
lea eax [ebp+ClassName] +
push offset a32770  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10024BB  +
xor eax eax +
inc eax  +
jmp loc_10024BD  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1005CD9  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_10024E7  +
cmp edx 7FFFFFFFh +
jbe loc_10024EC  +
mov eax 80070057h +
test eax eax +
jl loc_1002502  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_10017B5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1002526  +
cmp edx 7FFFFFFFh +
jbe loc_1002528  +
mov eax ecx +
test eax eax +
jl loc_1002551  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1002541  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_1002551  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10017B5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1002573  +
cmp edx esi +
jbe loc_1002578  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1002590  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1004EB6  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1002592  +
xor ecx ecx +
test eax eax +
jl loc_10025A9  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_10017B5  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10025C9  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_10025CE  +
mov eax 80070057h +
test eax eax +
jl loc_10025E8  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100180C  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1002606  +
cmp ecx 7FFFFFFFh +
jbe loc_100260B  +
mov eax 80070057h +
test eax eax +
jl loc_1002624  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax ecx +
push 0  +
call sub_100180C  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
xor eax eax +
cmp esi eax +
jz loc_10026CC  +
cmp [ebp+arg_8] eax +
jz loc_10026CC  +
xor ecx ecx +
push ebx  +
mov [esi] cx +
cmp dword_1007BA4 eax +
push edi  +
jle loc_10026B4  +
mov ebx [ebp+arg_0] +
mov ecx hMem +
mov edx 0C0FFFFFFh +
and ebx edx +
mov [ebp+var_4] ecx +
mov esi [ebp+var_4] +
mov esi [esi] +
mov edi esi +
and edi edx +
cmp ebx edi +
jnz loc_10026A1  +
mov edi 0C000000h +
test [ebp+arg_0] edi +
jnz loc_1002685  +
test esi edi +
jz loc_10026D1  +
mov edi 4000000h +
test [ebp+arg_0] edi +
jz loc_1002693  +
test esi edi +
jnz loc_10026D1  +
mov edi 8000000h +
test [ebp+arg_0] edi +
jz loc_10026A1  +
test esi edi +
jnz loc_10026D1  +
add [ebp+var_4] 284h +
inc eax  +
cmp eax dword_1007BA4 +
jl loc_100266A  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
push offset word_10076F8  +
push edi  +
push esi  +
call sub_10024D1  +
xor eax eax +
mov [esi+edi*2-2] ax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
mov edx [ebp+arg_8] +
imul eax eax +
lea esi [edx-1] +
push esi  +
lea eax [eax+ecx+4] +
push eax  +
push edx  +
push [ebp+arg_4]  +
call sub_100250B  +
jmp loc_10026CA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:SetThreadPreferredUILanguages +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
mov edi 100h +
push edi  +
mov dword ptr [ebp+Buffer] ebx +
call esi  +
mov eax dword ptr [ebp+arg_0] +
cmp eax 3E5h +
jz loc_10029FC  +
cmp eax ebx +
jz loc_10029FC  +
cmp eax 15h +
jnz loc_1002819  +
push 0Ah  +
call sub_10023E7  +
push ebx  +
push ebx  +
push edi  +
mov dword ptr [ebp+arg_0] eax +
call esi  +
cmp dword ptr [ebp+arg_0] ebx +
jz loc_10029FC  +
push 2  +
pop edi  +
cmp dword ptr [ebp+arg_4] ebx +
jz loc_10027C5  +
mov eax dword ptr [ebp+arg_4] +
lea edx [eax+2] +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_1002758  +
sub eax edx +
sar eax 1 +
jz loc_10027C5  +
mov eax dword ptr [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_100276E  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+arg_4] +
lea edx [eax+2] +
mov si [eax] +
add eax edi +
cmp si bx +
jnz loc_1002784  +
sub eax edx +
sar eax 1 +
lea edi [eax+ecx] +
lea edi [edi+edi+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1002811  +
push 15h  +
push dword ptr [ebp+arg_0]  +
xor eax eax +
push dword ptr [ebp+arg_4]  +
mov [esi] ax +
push offset aSSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 18h +
jmp loc_1002804  +
mov eax dword ptr [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_10027CB  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1002811  +
push 15h  +
push dword ptr [ebp+arg_0]  +
xor eax eax +
push offset aSD  +
push edi  +
push esi  +
mov [esi] ax +
call sub_10025EF  +
add esp 14h +
push esi  +
call sub_1001BD1  +
push esi  +
call ds:LocalFree  +
push dword ptr [ebp+arg_0]  +
jmp loc_10029F6  +
cmp eax 35h +
jz loc_1002912  +
cmp eax 2AF9h +
jz loc_1002912  +
push ebx  +
push ebx  +
lea ecx [ebp+Buffer] +
push ecx  +
push 400h  +
push eax  +
push ebx  +
push 1300h  +
call ds:FormatMessageW  +
mov edx dword ptr [ebp+Buffer] +
cmp edx ebx +
jz loc_10029FC  +
mov eax edx +
push 2  +
lea esi [eax+2] +
pop edi  +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_1002858  +
sub eax esi +
sar eax 1 +
mov ecx eax +
xor eax eax +
mov [edx+ecx*2-4] ax +
mov eax dword ptr [ebp+arg_4] +
cmp eax ebx +
jz loc_10028D1  +
lea esi [eax+2] +
mov dx [eax] +
add eax edi +
cmp dx bx +
jnz loc_1002879  +
sub eax esi +
sar eax 1 +
jz loc_10028D1  +
mov eax dword ptr [ebp+arg_4] +
lea esi [eax+2] +
mov dx [eax] +
add eax edi +
cmp dx bx +
jnz loc_100288F  +
sub eax esi +
sar eax 1 +
lea edi [eax+ecx] +
lea edi [edi+edi+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_100290A  +
push dword ptr [ebp+arg_0]  +
xor eax eax +
mov [esi] ax +
push dword ptr [ebp+Buffer]  +
push dword ptr [ebp+arg_4]  +
push offset aSSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 18h +
jmp loc_10028FD  +
lea edi [ecx+ecx+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_100290A  +
push dword ptr [ebp+arg_0]  +
xor eax eax +
mov [esi] ax +
push dword ptr [ebp+Buffer]  +
push offset aSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 14h +
push esi  +
call sub_1001BD1  +
push esi  +
call ds:LocalFree  +
push dword ptr [ebp+Buffer]  +
jmp loc_10029F6  +
push 0Bh  +
call sub_10023E7  +
push ebx  +
push ebx  +
push edi  +
mov dword ptr [ebp+hMem] eax +
call esi  +
cmp dword ptr [ebp+hMem] ebx +
jz loc_10029FC  +
push 2  +
pop edi  +
cmp dword ptr [ebp+arg_4] ebx +
jz loc_10029A6  +
mov eax dword ptr [ebp+arg_4] +
lea edx [eax+2] +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_1002938  +
sub eax edx +
sar eax 1 +
jz loc_10029A6  +
mov eax dword ptr [ebp+hMem] +
lea edx [eax+2] +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_100294E  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+arg_4] +
lea edx [eax+2] +
mov si [eax] +
add eax edi +
cmp si bx +
jnz loc_1002964  +
sub eax edx +
sar eax 1 +
lea edi [eax+ecx] +
lea edi [edi+edi+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_10029F3  +
push dword ptr [ebp+arg_0]  +
xor eax eax +
push dword ptr [ebp+hMem]  +
mov [esi] ax +
push dword ptr [ebp+arg_4]  +
push offset aSSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 18h +
jmp loc_10029E6  +
mov eax dword ptr [ebp+hMem] +
lea edx [eax+2] +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_10029AC  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_10029F3  +
push dword ptr [ebp+arg_0]  +
xor eax eax +
push dword ptr [ebp+hMem]  +
mov [esi] ax +
push offset aSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 14h +
push esi  +
call sub_1001BD1  +
push esi  +
call ds:LocalFree  +
push dword ptr [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1004h +
call __alloca_probe  +
mov eax dword_100709C +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
inc ebx  +
cmp eax edi +
jz loc_1002A94  +
cmp eax ebx +
jz loc_1002A94  +
cmp eax 2 +
jz loc_1002A99  +
mov esi ds:EnableWindow +
push edi  +
push hWnd  +
call esi  +
push edi  +
push dword_1007074  +
call esi  +
push edi  +
push dword_1007080  +
call esi  +
push edi  +
push dword_1007088  +
call esi  +
push edi  +
push dword_1007084  +
call esi  +
push edi  +
push dword_100707C  +
call esi  +
push edi  +
push dword_1007068  +
call esi  +
push edi  +
push dword_1007070  +
call esi  +
push edi  +
push dword_1007064  +
call esi  +
push ebx  +
push dword_1007090  +
jmp loc_1002C2C  +
cmp eax 2 +
jnz loc_1002ADA  +
mov esi ds:EnableWindow +
push edi  +
push dword_1007074  +
call esi  +
push edi  +
push dword_1007070  +
call esi  +
push ebx  +
push dword_1007068  +
call esi  +
cmp dword_1007B90 edi +
jz loc_1002B01  +
push edi  +
push dword_100707C  +
call esi  +
push edi  +
push hWnd  +
call esi  +
push ebx  +
jmp loc_1002B9F  +
mov esi ds:EnableWindow +
push ebx  +
push dword_1007074  +
call esi  +
push 3F3h  +
push hDlg  +
call ds:IsDlgButtonChecked  +
cmp eax ebx +
jnz loc_1002AA8  +
push ebx  +
jmp loc_1002AA9  +
push ebx  +
push dword_100707C  +
call esi  +
push ebx  +
push hWnd  +
call esi  +
mov eax dword_1007014 +
cmp eax 0FFFFFFFFh +
jz loc_1002BDD  +
xor ecx ecx +
cmp dword_100709C 2 +
setz cl  +
imul eax eax +
push ecx  +
mov ecx hMem +
push dword ptr [eax+ecx]  +
mov ecx offset unk_1007BA8 +
call sub_10018A7  +
test eax eax +
jz loc_1002BDD  +
push 18h  +
call sub_10023E7  +
mov [ebp+hMem] eax +
cmp eax edi +
jz loc_1002B73  +
push eax  +
push dword_1007094  +
call ds:SetWindowTextW  +
push [ebp+hMem]  +
call ds:LocalFree  +
push dword_1007068  +
call ds:GetWindowTextLengthW  +
test eax eax +
jle loc_1002B9E  +
push edi  +
push edi  +
push 18Bh  +
push dword_1007064  +
call ds:SendMessageW  +
test eax eax +
jg loc_1002AD4  +
push edi  +
push dword_1007090  +
call esi  +
push ebx  +
push dword_1007080  +
call esi  +
push ebx  +
push dword_1007088  +
call esi  +
lea eax [ebp+lParam] +
push eax  +
push 400h  +
push 191h  +
push dword_1007064  +
call ds:SendMessageW  +
test eax eax +
jle loc_1002C1C  +
push ebx  +
jmp loc_1002C1D  +
push 19h  +
call sub_10023E7  +
mov [ebp+hMem] eax +
cmp eax edi +
jz loc_1002C01  +
push eax  +
push dword_1007094  +
call ds:SetWindowTextW  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp dword_1007014 0FFFFFFFFh +
jnz loc_1002B83  +
push edi  +
push dword_100707C  +
call esi  +
jmp loc_1002B83  +
push edi  +
push dword_1007084  +
call esi  +
push ebx  +
push dword_1007064  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:GetDlgItem +
push edi  +
mov edi [ebp+lParam] +
push 3F3h  +
push edi  +
mov hDlg edi +
call esi  +
push 3E8h  +
push edi  +
mov dword_1007074 eax +
call esi  +
push 3E9h  +
push edi  +
mov dword_1007078 eax +
call esi  +
push 3F6h  +
push edi  +
mov dword_100707C eax +
call esi  +
push 3F9h  +
push edi  +
mov dword_1007068 eax +
call esi  +
push 3F4h  +
push edi  +
mov dword_100706C eax +
call esi  +
push 3EBh  +
push edi  +
mov dword_1007070 eax +
call esi  +
push 3F7h  +
push edi  +
mov dword_1007064 eax +
call esi  +
push 3F2h  +
push edi  +
mov dword_1007080 eax +
call esi  +
push 3ECh  +
push edi  +
mov dword_1007088 eax +
call esi  +
push 3FCh  +
push edi  +
mov dword_1007084 eax +
call esi  +
push 1  +
push edi  +
mov hWnd eax +
call esi  +
push 3FDh  +
push edi  +
mov dword_1007090 eax +
call esi  +
xor esi esi +
mov dword_1007094 eax +
cmp dword_1007074 esi +
jz loc_1002EDF  +
cmp dword_1007078 esi +
jz loc_1002EDF  +
cmp dword_100707C esi +
jz loc_1002EDF  +
cmp dword_1007068 esi +
jz loc_1002EDF  +
cmp dword_100706C esi +
jz loc_1002EDF  +
cmp dword_1007070 esi +
jz loc_1002EDF  +
cmp dword_1007064 esi +
jz loc_1002EDF  +
cmp dword_1007080 esi +
jz loc_1002EDF  +
cmp dword_1007088 esi +
jz loc_1002EDF  +
cmp dword_1007084 esi +
jz loc_1002EDF  +
cmp hWnd esi +
jz loc_1002EDF  +
mov ebx ds:LoadStringW +
push 20h  +
push offset Buffer  +
push 0Fh  +
push hInstance  +
call ebx  +
push offset loc_10023A2  +
push 0FFFFFFFCh  +
push dword_1007070  +
call ds:SetWindowLongW  +
push eax  +
call ds:EncodePointer  +
push esi  +
mov esi ds:SendMessageW +
push 3  +
push 0C5h  +
push dword_1007070  +
mov dword_1007BAC eax +
call esi  +
push lpString  +
push dword_1007070  +
call ds:SetWindowTextW  +
push 1  +
push 3F3h  +
push edi  +
call ds:CheckDlgButton  +
test eax eax +
jnz loc_1002DF2  +
push eax  +
jmp loc_1002EE0  +
mov [ebp+lParam] offset unk_10070E0 +
mov [ebp+var_4] offset unk_1007008 +
mov eax [ebp+var_4] +
push 103h  +
push [ebp+lParam]  +
push dword ptr [eax]  +
push hInstance  +
call ebx  +
push [ebp+lParam]  +
push 0  +
push 143h  +
push dword_1007078  +
call esi  +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 3 +
jnz loc_1002E4B  +
push [ebp+lParam]  +
push 0FFFFFFFFh  +
push 14Dh  +
push dword_1007078  +
call esi  +
mov dword_100709C 1 +
add [ebp+var_4] 4 +
add [ebp+lParam] 208h +
cmp [ebp+var_4] offset dword_1007014 +
jl loc_1002E00  +
xor eax eax +
cmp dword_1007BA4 eax +
push 1  +
setz al  +
mov ebx 3FCh +
push ebx  +
push edi  +
mov dword_1007B90 eax +
call ds:CheckDlgButton  +
push dword_100706C  +
push ebx  +
push edi  +
call ds:IsDlgButtonChecked  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
push dword_1007B94  +
mov ecx offset unk_1007BA8 +
push dword_100707C  +
call sub_100192C  +
cmp dword_1007B98 0 +
jz loc_1002EC1  +
mov dword_100709C 2 +
call sub_1002A08  +
push 0  +
push 1FFh  +
push 0C5h  +
push dword_1007068  +
call esi  +
call sub_1002A08  +
xor eax eax +
inc eax  +
jmp loc_1002EF7  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
push 0FFFFFFFFh  +
push edi  +
call ds:EndDialog  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 53h +
jz loc_1002F38  +
cmp [ebp+arg_4] 7Bh +
jz loc_1002F38  +
cmp [ebp+arg_4] 111h +
jnz loc_1002F34  +
mov eax [ebp+arg_8] +
shr eax 10h +
push eax  +
push [ebp+arg_C]  +
movzx eax word ptr [ebp+arg_8] +
push eax  +
push [ebp+hDlg]  +
call sub_1002322  +
xor eax eax +
jmp loc_1002F3B  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 348h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [ebp+var_310] ecx +
mov ecx [ebp+arg_8] +
push ebx  +
mov [ebp+var_320] ecx +
mov ecx [ebp+arg_C] +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_14] +
mov [ebp+var_31C] ecx +
mov ecx [ebp+arg_10] +
mov dword ptr [ebp+lpUNCServerName] eax +
mov [ebp+var_2F8] ecx +
mov [ebp+var_2F0] edi +
mov [ebp+hKey] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+hEventLog] ebx +
mov [ebp+var_314] 1 +
mov esi 104h +
cmp eax ebx +
jz loc_1003230  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1002FC0  +
sub eax edx +
sar eax 1 +
cmp eax 1 +
jbe loc_1003230  +
xor eax eax +
mov [ebp+NameBuffer] ax +
mov eax dword ptr [ebp+lpUNCServerName] +
cmp word ptr [eax] 5Ch +
jz loc_1002FFE  +
push offset asc_10013E4  +
push esi  +
lea eax [ebp+NameBuffer] +
push eax  +
call sub_10024D1  +
push dword ptr [ebp+lpUNCServerName]  +
lea eax [ebp+NameBuffer] +
push esi  +
push eax  +
call sub_100255A  +
xor eax eax +
mov [ebp+var_4A] ax +
lea eax [ebp+hKey] +
push eax  +
push 80000002h  +
lea eax [ebp+NameBuffer] +
push eax  +
call ds:RegConnectRegistryW  +
cmp [ebp+hKey] ebx +
jnz loc_1003142  +
call ds:GetLastError  +
push 1Ch  +
mov [edi] eax +
call sub_10023E7  +
push ebx  +
push ebx  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
cmp esi ebx +
jz loc_10039C7  +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003071  +
sub eax edx +
sar eax 1 +
mov eax esi +
lea edx [eax+2] +
jz loc_10030CC  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003086  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_100309F  +
jmp loc_10031D9  +
push eax  +
push dword ptr [ebp+hMem]  +
push dword ptr [ebp+lpUNCServerName]  +
push offset aSSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 18h +
jmp loc_100312A  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10030CC  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1003137  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
cmp eax ebx +
jz loc_1003115  +
push eax  +
push dword ptr [ebp+hMem]  +
push offset aSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 14h +
jmp loc_100312A  +
push dword ptr [ebp+hMem]  +
push offset aS  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 10h +
push esi  +
call sub_1001BD1  +
push esi  +
call ds:LocalFree  +
push dword ptr [ebp+hMem]  +
jmp loc_10039C1  +
lea eax [ebp+phkResult] +
push eax  +
push 0F013Fh  +
push ebx  +
push offset SubKey  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp [ebp+phkResult] ebx +
jnz loc_1003361  +
call ds:GetLastError  +
push 1Dh  +
mov [edi] eax +
call sub_10023E7  +
push ebx  +
push ebx  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
cmp esi ebx +
jz loc_10039C7  +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10031A1  +
sub eax edx +
sar eax 1 +
mov eax esi +
lea edx [eax+2] +
jz loc_1003221  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10031B6  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_10031CF  +
sub eax edx +
sar eax 1 +
lea edi [eax+ecx] +
lea edi [edi+edi+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1003137  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
cmp eax ebx +
jnz loc_10030AE  +
push dword ptr [ebp+hMem]  +
push dword ptr [ebp+lpUNCServerName]  +
push offset aSS  +
jmp loc_1003109  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003221  +
jmp loc_10030D6  +
lea eax [ebp+phkResult] +
push eax  +
push 20119h  +
push ebx  +
push offset SubKey  +
mov edi offset word_1007988 +
push 80000002h  +
mov dword ptr [ebp+lpUNCServerName] edi +
call ds:RegOpenKeyExW  +
cmp [ebp+phkResult] ebx +
jnz loc_100335B  +
call ds:GetLastError  +
mov ecx [ebp+var_2F0] +
push 1Dh  +
mov [ecx] eax +
call sub_10023E7  +
push ebx  +
push ebx  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
cmp esi ebx +
jz loc_10039C7  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100329B  +
sub eax edx +
sar eax 1 +
mov eax esi +
lea edx [eax+2] +
jz loc_1003323  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10032B0  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax edi +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_10032C5  +
sub eax edx +
sar eax 1 +
lea ebx [eax+ecx] +
lea ebx [ebx+ebx+28h] +
push ebx  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003137  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
test eax eax +
jz loc_1003311  +
push eax  +
push dword ptr [ebp+hMem]  +
push edi  +
push offset aSSD  +
push ebx  +
jmp loc_10030C1  +
push dword ptr [ebp+hMem]  +
push edi  +
push offset aSS  +
push ebx  +
jmp loc_100310A  +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003323  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+28h] +
push edi  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1003137  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
test eax eax +
jmp loc_10030FB  +
mov edi [ebp+var_2F0] +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset ValueName  +
push [ebp+phkResult]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1003428  +
call ds:GetLastError  +
push 1Ah  +
mov [edi] eax +
call sub_10023E7  +
push ebx  +
push ebx  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
cmp esi ebx +
jz loc_10039C7  +
cmp dword ptr [ebp+lpUNCServerName] ebx +
jz loc_1003414  +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10033D7  +
sub eax edx +
sar eax 1 +
jz loc_1003414  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10033EC  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_1003405  +
jmp loc_10031D9  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003419  +
jmp loc_10030D6  +
cmp dword ptr [ebp+Data] ebx +
jz loc_1003A22  +
push offset SourceName  +
push dword ptr [ebp+lpUNCServerName]  +
mov [ebp+nSize] esi +
call ds:RegisterEventSourceW  +
mov [ebp+hEventLog] eax +
cmp eax ebx +
jnz loc_10034E7  +
call ds:GetLastError  +
push 1Eh  +
mov [edi] eax +
call sub_10023E7  +
push ebx  +
push ebx  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
cmp esi ebx +
jz loc_10039C7  +
cmp dword ptr [ebp+lpUNCServerName] ebx +
jz loc_10034D3  +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003496  +
sub eax edx +
sar eax 1 +
jz loc_10034D3  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10034AB  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_10034C4  +
jmp loc_10031D9  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10034D8  +
jmp loc_10030D6  +
push 4Ah  +
lea eax [ebp+var_2E4] +
push eax  +
mov eax [ebp+var_310] +
push dword ptr [eax]  +
mov ecx offset unk_1007BA8 +
call sub_100262B  +
push offset aUnknown  +
push esi  +
lea eax [ebp+NameBuffer] +
push eax  +
call sub_10024D1  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+NameBuffer] +
push eax  +
push 0Ch  +
call GetUserNameExW  +
test al al +
jnz loc_10037FE  +
call ds:GetLastError  +
mov [ebp+var_300] eax +
cmp eax 534h +
jz loc_100369E  +
push 20h  +
call sub_10023E7  +
push 0  +
push 0  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
test esi esi +
jz loc_10037FE  +
mov ebx dword ptr [ebp+lpUNCServerName] +
test ebx ebx +
jz loc_1003621  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003581  +
sub eax edx +
sar eax 1 +
jz loc_1003621  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100359A  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax ebx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10035AF  +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
lea esi [esi+esi+28h] +
push esi  +
push 0  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_1003693  +
xor eax eax +
mov [edi] ax +
cmp [ebp+var_300] eax +
jz loc_1003602  +
push [ebp+var_300]  +
push dword ptr [ebp+hMem]  +
push ebx  +
push offset aSSD  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 18h +
jmp loc_1003618  +
push dword ptr [ebp+hMem]  +
push ebx  +
push offset aSS  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 14h +
push edi  +
call sub_1001BD1  +
push edi  +
jmp loc_100368D  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003626  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+28h] +
push edi  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003693  +
xor eax eax +
mov [esi] ax +
cmp [ebp+var_300] eax +
jz loc_1003671  +
push [ebp+var_300]  +
push dword ptr [ebp+hMem]  +
push offset aSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 14h +
jmp loc_1003686  +
push dword ptr [ebp+hMem]  +
push offset aS  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 10h +
push esi  +
call sub_1001BD1  +
push esi  +
call ds:LocalFree  +
push dword ptr [ebp+hMem]  +
jmp loc_10037F8  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+NameBuffer] +
push eax  +
push 2  +
mov [ebp+nSize] esi +
call GetUserNameExW  +
test al al +
jnz loc_10037FE  +
push 20h  +
call sub_10023E7  +
xor edi edi +
push edi  +
push edi  +
push 100h  +
mov ebx eax +
call ds:SetThreadPreferredUILanguages  +
cmp ebx edi +
jz loc_10037FE  +
cmp dword ptr [ebp+lpUNCServerName] edi +
jz loc_100378C  +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10036F6  +
sub eax edx +
sar eax 1 +
jz loc_100378C  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100370F  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si di +
jnz loc_1003728  +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
lea esi [esi+esi+28h] +
push esi  +
push 0  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_10037F7  +
xor eax eax +
mov [edi] ax +
call ds:GetLastError  +
test eax eax +
jz loc_100377E  +
call ds:GetLastError  +
push eax  +
push ebx  +
push dword ptr [ebp+lpUNCServerName]  +
push offset aSSD  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 18h +
jmp loc_10037EA  +
push ebx  +
push dword ptr [ebp+lpUNCServerName]  +
push offset aSS  +
jmp loc_10037CE  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1003791  +
sub eax edx +
sar eax 1 +
lea esi [eax+eax+28h] +
push esi  +
push 0  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_10037F7  +
xor eax eax +
mov [edi] ax +
call ds:GetLastError  +
test eax eax +
jz loc_10037DA  +
call ds:GetLastError  +
push eax  +
push ebx  +
push offset aSD  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 14h +
jmp loc_10037EA  +
push ebx  +
push offset aS  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 10h +
push edi  +
call sub_1001BD1  +
push edi  +
call ds:LocalFree  +
push ebx  +
call ds:LocalFree  +
mov esi [ebp+var_310] +
push dword ptr [esi]  +
lea eax [ebp+var_44] +
push offset a0xX  +
push 20h  +
push eax  +
call sub_10025B4  +
lea eax [ebp+var_2E4] +
mov [ebp+Strings] eax +
lea eax [ebp+var_44] +
mov [ebp+var_344] eax +
mov eax [ebp+var_320] +
mov [ebp+var_340] eax +
mov eax [ebp+var_31C] +
add esp 10h +
mov [ebp+var_33C] eax +
mov eax [ebp+var_2F8] +
push esi  +
mov [ebp+var_338] eax +
lea eax [ebp+NameBuffer] +
mov [ebp+var_334] eax +
lea eax [ebp+Strings] +
push eax  +
push 4  +
push 6  +
xor esi esi +
push esi  +
push 80000434h  +
push 2  +
push 2  +
push [ebp+hEventLog]  +
call ds:ReportEventW  +
test eax eax +
jnz loc_10039CE  +
call ds:GetLastError  +
mov ecx [ebp+var_2F0] +
push 1Fh  +
mov [ecx] eax +
call sub_10023E7  +
push esi  +
push esi  +
push 100h  +
mov ebx eax +
call ds:SetThreadPreferredUILanguages  +
cmp ebx esi +
jz loc_10039C7  +
cmp dword ptr [ebp+lpUNCServerName] esi +
jz loc_1003959  +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10038CB  +
sub eax edx +
sar eax 1 +
jz loc_1003959  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10038E0  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax dword ptr [ebp+lpUNCServerName] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10038F9  +
sub eax edx +
sar eax 1 +
lea edi [eax+ecx] +
lea edi [edi+edi+28h] +
push edi  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_10039C0  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
test eax eax +
jz loc_100394B  +
push eax  +
push ebx  +
push dword ptr [ebp+lpUNCServerName]  +
push offset aSSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 18h +
jmp loc_10039B3  +
push ebx  +
push dword ptr [ebp+lpUNCServerName]  +
push offset aSS  +
jmp loc_1003997  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100395E  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+28h] +
push edi  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_10039C0  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
test eax eax +
jz loc_10039A3  +
push eax  +
push ebx  +
push offset aSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 14h +
jmp loc_10039B3  +
push ebx  +
push offset aS  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 10h +
push esi  +
call sub_1001BD1  +
push esi  +
call ds:LocalFree  +
push ebx  +
call ds:LocalFree  +
and [ebp+var_314] 0 +
cmp [ebp+hEventLog] 0 +
jz loc_10039E3  +
push [ebp+hEventLog]  +
call ds:DeregisterEventSource  +
cmp [ebp+phkResult] 0 +
mov esi ds:RegCloseKey +
jz loc_10039FA  +
push [ebp+phkResult]  +
call esi  +
cmp [ebp+hKey] 0 +
jz loc_1003A0B  +
push [ebp+hKey]  +
call esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_314] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005CD9  +
leave   +
retn 18h  +
push 1Ah  +
mov [edi] ebx +
call sub_10023E7  +
push ebx  +
push ebx  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
cmp esi ebx +
jz loc_10039E3  +
mov ebx dword ptr [ebp+lpUNCServerName] +
test ebx ebx +
jz loc_1003AE1  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003A57  +
sub eax edx +
sar eax 1 +
jz loc_1003AE1  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003A6C  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax ebx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1003A81  +
sub eax edx +
sar eax 1 +
lea edi [eax+ecx] +
lea edi [edi+edi+28h] +
push edi  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003B52  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
test eax eax +
jz loc_1003AD3  +
push eax  +
push dword ptr [ebp+hMem]  +
push ebx  +
push offset aSSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 18h +
jmp loc_1003B45  +
push dword ptr [ebp+hMem]  +
push ebx  +
push offset aSS  +
jmp loc_1003B24  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003AE6  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax+28h] +
push edi  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003B52  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_2F0] +
mov eax [eax] +
test eax eax +
jz loc_1003B30  +
push eax  +
push dword ptr [ebp+hMem]  +
push offset aSD  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 14h +
jmp loc_1003B45  +
push dword ptr [ebp+hMem]  +
push offset aS  +
push edi  +
push esi  +
call sub_10025EF  +
add esp 10h +
push esi  +
call sub_1001BD1  +
push esi  +
call ds:LocalFree  +
push dword ptr [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_10039E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push offset LibFileName  +
mov word_10076F8 ax +
call ds:LoadLibraryW  +
mov edi eax +
xor ebx ebx +
mov [ebp+var_C] edi +
cmp edi ebx +
jz loc_1003CCD  +
push 40h  +
push offset word_10076F8  +
push 204Dh  +
push edi  +
call ds:LoadStringW  +
mov esi ds:GetProcAddress +
push offset ProcName  +
xor eax eax +
push edi  +
mov word_1007776 ax +
call esi  +
push offset aDestroyreasons  +
push edi  +
mov [ebp+var_8] eax +
call esi  +
mov [ebp+var_4] eax +
cmp [ebp+var_8] ebx +
jz loc_1003BEF  +
cmp eax ebx +
jz loc_1003BEF  +
mov esi [ebp+uBytes] +
push ebx  +
push ebx  +
push esi  +
call [ebp+var_8]  +
test eax eax +
jnz loc_1003BFB  +
push ebx  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
push edi  +
call ds:FreeLibrary  +
jmp loc_1003CDA  +
cmp [esi+4] ebx +
jnz loc_1003C10  +
push esi  +
call [ebp+var_4]  +
push 1  +
push 1  +
push esi  +
call [ebp+var_8]  +
test eax eax +
jz loc_1003BE2  +
lea eax [ebp+uBytes] +
push eax  +
mov eax [esi+4] +
mov ecx 284h +
mul  ecx +
push edx  +
push eax  +
mov [ebp+uBytes] ebx +
call sub_1001858  +
test eax eax +
jge loc_1003C38  +
push esi  +
call [ebp+var_4]  +
push ebx  +
push 216h  +
jmp loc_1003BEA  +
push [ebp+uBytes]  +
push ebx  +
call ds:LocalAlloc  +
mov hMem eax +
cmp eax ebx +
jnz loc_1003C51  +
push esi  +
call [ebp+var_4]  +
jmp loc_1003BE2  +
cmp [esi+4] ebx +
jle loc_1003CB5  +
xor edi edi +
jmp loc_1003C5F  +
mov eax hMem +
mov ecx [esi] +
mov ecx [ecx+ebx*4] +
add ecx 4 +
push ecx  +
push 40h  +
lea eax [edi+eax+4] +
push eax  +
call sub_10024D1  +
mov eax [esi] +
mov eax [eax+ebx*4] +
add eax 84h +
push eax  +
mov eax hMem +
push 100h  +
lea eax [edi+eax+84h] +
push eax  +
call sub_10024D1  +
mov eax [esi] +
mov eax [eax+ebx*4] +
mov eax [eax] +
mov ecx hMem +
mov [edi+ecx] eax +
inc ebx  +
add edi 284h +
cmp ebx [esi+4] +
jl loc_1003C5A  +
mov edi [ebp+var_C] +
mov eax [esi+4] +
push esi  +
mov dword_1007BA4 eax +
call [ebp+var_4]  +
push edi  +
call ds:FreeLibrary  +
xor eax eax +
inc eax  +
jmp loc_1003CDC  +
push ebx  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 670h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
push esi  +
push esi  +
push 100h  +
call ds:SetThreadPreferredUILanguages  +
push esi  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_1003D62  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
jmp loc_1003F8F  +
push edi  +
mov edi ds:lstrlenW +
mov [ebp+var_668] 4B0h +
push ebx  +
push [ebp+var_668]  +
call sub_10023E7  +
mov ebx eax +
mov [ebp+hMem] ebx +
cmp ebx esi +
jz loc_1003E04  +
cmp [ebp+var_668] 4B0h +
jnz loc_1003DF2  +
push dword_1007778  +
call edi  +
push ebx  +
mov [ebp+var_670] eax +
call edi  +
mov ecx [ebp+var_670] +
add ecx eax +
lea ebx [ecx+ecx+4] +
push ebx  +
push esi  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003E9B  +
xor eax eax +
mov [esi] ax +
push dword_1007778  +
push [ebp+hMem]  +
push ebx  +
push esi  +
call sub_10025EF  +
add esp 10h +
push esi  +
call sub_1001BB9  +
push esi  +
call ds:LocalFree  +
xor esi esi +
jmp loc_1003DF8  +
push ebx  +
call sub_1001BB9  +
push [ebp+hMem]  +
call ds:LocalFree  +
inc [ebp+var_668]  +
cmp [ebp+var_668] 4D3h +
jb loc_1003D74  +
mov eax hMem +
cmp eax esi +
jz loc_1003E2A  +
push eax  +
call ds:LocalFree  +
lea eax [ebp+uBytes] +
push eax  +
mov hMem esi +
call sub_1003B68  +
test eax eax +
jz loc_1003F8D  +
push 12h  +
call sub_10023E7  +
mov esi eax +
xor eax eax +
xor edi edi +
mov [ebp+WideCharStr] ax +
cmp esi edi +
jz loc_1003E69  +
push esi  +
call sub_1001BB9  +
push esi  +
call ds:LocalFree  +
cmp dword_1007BA4 edi +
jle loc_1003F76  +
xor esi esi +
mov ebx offset asc_100144C +
push offset WideCharStr  +
call sub_1001BB9  +
mov eax hMem +
test dword ptr [esi+eax] 4000000h +
jz loc_1003EBA  +
push offset aE  +
jmp loc_1003EBB  +
push [ebp+hMem]  +
call ds:LocalFree  +
push 0  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
jmp loc_1003F8D  +
push ebx  +
call sub_1001BB9  +
mov eax hMem +
test dword ptr [esi+eax] 8000000h +
jz loc_1003ED5  +
push offset aU  +
jmp loc_1003ED6  +
push ebx  +
call sub_1001BB9  +
mov eax hMem +
test dword ptr [esi+eax] 80000000h +
jz loc_1003EF0  +
push offset aP  +
jmp loc_1003EF1  +
push ebx  +
call sub_1001BB9  +
mov eax hMem +
test dword ptr [esi+eax] 40000000h +
jz loc_1003F0B  +
push offset aC  +
jmp loc_1003F0C  +
push ebx  +
call sub_1001BB9  +
mov eax hMem +
add eax esi +
movzx ecx word ptr [eax] +
movzx eax byte ptr [eax+2] +
push ecx  +
push eax  +
push offset aDD  +
lea eax [ebp+WideCharStr] +
push 104h  +
push eax  +
call sub_10025B4  +
add esp 14h +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_1001BB9  +
mov eax hMem +
lea eax [esi+eax+4] +
push eax  +
call sub_1001BB9  +
inc edi  +
add esi 284h +
cmp edi dword_1007BA4 +
jl loc_1003E7C  +
test edi edi +
jz loc_1003F76  +
push offset WideCharStr  +
call sub_1001BB9  +
mov eax hMem +
test eax eax +
jz loc_1003F86  +
push eax  +
call ds:LocalFree  +
and hMem 0 +
pop ebx  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1005CD9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 18ACh +
call __alloca_probe  +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
mov eax 3F2h +
cmp ecx eax +
push esi  +
push edi  +
mov [ebp+hDlg] edx +
mov [ebp+var_850] ebx +
jg loc_10046AD  +
jz loc_1004464  +
mov eax ecx +
dec eax  +
jz loc_10041DA  +
dec eax  +
jz loc_10041BE  +
sub eax 7 +
jz loc_100419D  +
sub eax 3DFh +
jz loc_10040C7  +
dec eax  +
jz loc_10040A3  +
dec eax  +
dec eax  +
jz loc_100407F  +
dec eax  +
jnz loc_10048FF  +
cmp [ebp+arg_C] ebx +
jnz loc_10048FF  +
mov edi ds:SendMessageW +
lea eax [ebp+wParam] +
push eax  +
push 400h  +
push 191h  +
push dword_1007064  +
call edi  +
cmp eax ebx +
jle loc_10041CB  +
lea esi [eax-1] +
cmp esi ebx +
jl loc_1004069  +
push ebx  +
push [ebp+esi*4+wParam]  +
push 182h  +
push dword_1007064  +
call edi  +
dec esi  +
jns loc_1004051  +
call sub_1002A08  +
push dword_1007064  +
call ds:SetFocus  +
jmp loc_10041CB  +
xor esi esi +
inc esi  +
cmp [ebp+arg_C] esi +
jnz loc_1004091  +
call sub_1002A08  +
jmp loc_10048F9  +
cmp [ebp+arg_C] 200h +
jnz loc_10048FF  +
jmp loc_10048F9  +
xor esi esi +
inc esi  +
cmp [ebp+arg_C] esi +
jnz loc_10048FF  +
push dword_100706C  +
mov ecx offset unk_1007BA8 +
push dword_100707C  +
call sub_1001A40  +
jmp loc_1004087  +
cmp [ebp+arg_C] 1 +
jnz loc_10048FF  +
mov eax dword_100709C +
push 3FCh  +
push edx  +
mov [ebp+var_854] eax +
mov [ebp+var_85C] ebx +
call ds:IsDlgButtonChecked  +
cmp eax 1 +
jnz loc_10040FD  +
mov [ebp+var_85C] 80000000h +
push 104h  +
lea eax [ebp+lParam] +
push eax  +
push dword_1007078  +
call ds:GetWindowTextW  +
xor edi edi +
mov [ebp+hDlg] offset unk_10070E0 +
mov esi 208h +
push [ebp+hDlg]  +
lea eax [ebp+lParam] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1004150  +
add [ebp+hDlg] esi +
add ebx esi +
inc edi  +
cmp ebx 618h +
jb loc_1004126  +
jmp loc_10041CB  +
xor eax eax +
cmp edi 2 +
setz al  +
mov dword_100709C edi +
mov dword_1007B94 eax +
cmp [ebp+var_854] edi +
jz loc_100471A  +
cmp [ebp+var_854] 2 +
jz loc_1004181  +
cmp edi 2 +
jnz loc_100471A  +
push dword_100706C  +
xor ecx ecx +
cmp [ebp+var_85C] 80000000h +
setz cl  +
push ecx  +
push eax  +
jmp loc_100470A  +
cmp [ebp+arg_C] ebx +
jnz loc_10048FF  +
push ebx  +
push ebx  +
push offset aReliab_chmHtml  +
call ds:GetDesktopWindow  +
push eax  +
call sub_100597C  +
jmp loc_10048FF  +
cmp [ebp+arg_C] ebx +
jnz loc_10041CB  +
push ebx  +
push edx  +
call ds:EndDialog  +
mov [ebp+var_850] 1 +
jmp loc_10048FF  +
cmp [ebp+arg_C] ebx +
jnz loc_10048FF  +
xor eax eax +
push 3FEh  +
mov word ptr [ebp+var_818] ax +
lea eax [ebp+var_818+2] +
push ebx  +
push eax  +
mov [ebp+var_86C] ebx +
mov [ebp+var_868] ebx +
mov [ebp+ppv] ebx +
mov [ebp+var_85C] ebx +
call memset  +
mov esi dword_100709C +
add esp 0Ch +
push 3F3h  +
push [ebp+hDlg]  +
call ds:IsDlgButtonChecked  +
mov edi ds:GetWindowTextW +
test eax eax +
jz loc_100429F  +
xor eax eax +
mov word ptr [ebp+lParam] ax +
push 104h  +
lea eax [ebp+lParam] +
push eax  +
push dword_1007070  +
mov [ebp+var_854] ebx +
call edi  +
lea eax [ebp+lParam] +
push eax  +
call ds:lstrlenW  +
test eax eax +
jnz loc_1004276  +
mov [ebp+ppv] ebx +
jmp loc_10042A9  +
lea eax [ebp+lParam] +
push eax  +
call ds:_wtoi  +
mov [ebp+ppv] eax +
mov eax 12CC0300h +
pop ecx  +
cmp [ebp+ppv] eax +
jbe loc_10042A9  +
mov [ebp+ppv] eax +
jmp loc_10042A9  +
mov [ebp+var_854] 1 +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 9  +
push hInstance  +
call ds:LoadStringW  +
push 200h  +
lea eax [ebp+var_818] +
push eax  +
push dword_1007068  +
call edi  +
xor eax eax +
mov [ebp+var_41A] ax +
cmp esi 3 +
jz loc_100432D  +
inc eax  +
cmp esi eax +
jnz loc_1004320  +
mov [ebp+var_86C] eax +
mov eax dword_1007014 +
cmp eax 0FFFFFFFFh +
jnz loc_1004301  +
xor eax eax +
mov dword_1007014 eax +
cmp dword_1007B90 ebx +
jnz loc_100436C  +
mov ecx hMem +
imul eax eax +
mov eax [eax+ecx] +
mov [ebp+var_85C] eax +
jmp loc_1004378  +
cmp esi 2 +
jnz loc_10042F0  +
mov [ebp+var_868] eax +
jmp loc_10042F0  +
mov eax [ebp+var_854] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFCh +
push ebx  +
add eax 4 +
push eax  +
call ds:ExitWindowsEx  +
test eax eax +
jnz loc_100435A  +
push offset word_1007988  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
push ebx  +
push [ebp+hDlg]  +
call ds:EndDialog  +
jmp loc_10048FF  +
cmp [ebp+var_868] ebx +
jnz loc_10048FF  +
mov esi ds:SendMessageW +
push ebx  +
push ebx  +
push 18Bh  +
push dword_1007064  +
call esi  +
mov [ebp+var_864] eax +
cmp eax ebx +
jbe loc_10048FF  +
xor edi edi +
cmp eax ebx +
jbe loc_100435A  +
push ebx  +
push edi  +
push 18Ah  +
push dword_1007064  +
xor eax eax +
mov word ptr [ebp+lParam] ax +
call esi  +
cmp eax 104h +
jnb loc_10043D5  +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 189h  +
push dword_1007064  +
call esi  +
push ebx  +
lea eax [ebp+lParam] +
push eax  +
call sub_100215C  +
cmp [ebp+var_868] ebx +
jz loc_100440F  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_818] +
push eax  +
push ebx  +
push ebx  +
lea eax [ebp+var_85C] +
push eax  +
lea eax [ebp+lParam] +
push eax  +
call sub_1002F44  +
jmp loc_1004452  +
push [ebp+var_85C]  +
lea eax [ebp+var_818] +
push [ebp+var_86C]  +
push [ebp+var_854]  +
push [ebp+ppv]  +
push eax  +
lea eax [ebp+lParam] +
push eax  +
call ds:InitiateSystemShutdownExW  +
test eax eax +
jnz loc_1004452  +
lea eax [ebp+lParam] +
push eax  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
inc edi  +
cmp edi [ebp+var_864] +
jb loc_10043A1  +
jmp loc_100435A  +
cmp [ebp+arg_C] ebx +
jnz loc_10048FF  +
push 30h  +
lea eax [ebp+var_848] +
push ebx  +
push eax  +
mov [ebp+var_84C] ebx +
call memset  +
add esp 0Ch +
push 6  +
pop ecx  +
xor eax eax +
mov [ebp+var_8AC] ebx +
lea edi [ebp+var_8A8] +
push offset szFormat  +
stos   +
call ds:RegisterClipboardFormatW  +
or [ebp+var_880] 0FFFFFFFFh +
xor esi esi +
inc esi  +
push ebx  +
mov word ptr [ebp+var_88C] ax +
mov [ebp+var_888] ebx +
mov [ebp+var_884] esi +
mov [ebp+var_87C] esi +
mov [ebp+var_878.tymed] ebx +
mov dword ptr [ebp+var_878.anonymous_0] ebx +
mov [ebp+var_878.pUnkForRelease] ebx +
call ds:CoInitialize  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push esi  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_1004512  +
call ds:CoUninitialize  +
push offset aCannotCreateIc  +
call DbgPrint  +
pop ecx  +
jmp loc_10048FF  +
mov [ebp+var_84C] 34h +
mov [ebp+var_848] 423h +
mov esi offset dword_100125C +
lea edi [ebp+var_844] +
movs   +
movs   +
movs   +
movs   +
lea eax [ebp+var_8AC] +
mov [ebp+var_834] eax +
mov eax [ebp+ppv] +
mov esi offset dword_100126C +
lea edi [ebp+var_830] +
movs   +
movs   +
lea edx [ebp+var_864] +
push edx  +
movs   +
lea edx [ebp+var_84C] +
push edx  +
push [ebp+hDlg]  +
movs   +
mov [ebp+var_8AC] 1Ch +
mov [ebp+var_8A8] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jge loc_100459F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:CoUninitialize  +
jmp loc_10048FF  +
mov eax [ebp+var_864] +
cmp eax ebx +
jz loc_1004588  +
mov ecx [eax] +
lea edx [ebp+var_878] +
push edx  +
lea edx [ebp+var_88C] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jl loc_1004680  +
push dword ptr [ebp+var_878.anonymous_0]  +
call ds:GlobalLock  +
mov esi eax +
cmp esi ebx +
jz loc_1004666  +
mov [ebp+var_85C] ebx +
cmp [esi+10h] ebx +
jbe loc_1004658  +
mov edi ds:SendMessageW +
lea eax [esi+1Ch] +
mov [ebp+var_854] eax +
lea eax [ebp+lParam] +
push eax  +
mov eax [ebp+var_854] +
mov eax [eax] +
add eax esi +
push eax  +
call sub_10021F1  +
test eax eax +
jz loc_1004640  +
lea eax [ebp+lParam] +
push eax  +
push 0FFFFFFFFh  +
push 1A2h  +
push dword_1007064  +
call edi  +
cmp eax 0FFFFFFFFh +
jnz loc_1004640  +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 180h  +
push dword_1007064  +
call edi  +
inc [ebp+var_85C]  +
mov eax [ebp+var_85C] +
add [ebp+var_854] 10h +
cmp eax [esi+10h] +
jb loc_10045F5  +
push dword ptr [ebp+var_878.anonymous_0]  +
call ds:GlobalUnlock  +
jmp loc_1004671  +
push offset aGloballockOnMe  +
call DbgPrint  +
pop ecx  +
lea eax [ebp+var_878] +
push eax  +
call ds:ReleaseStgMedium  +
jmp loc_100468D  +
push eax  +
push offset aPdoGetdataFail  +
call DbgPrint  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_864] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:CoUninitialize  +
jmp loc_100471A  +
mov eax 3F3h +
sub ecx eax +
jz loc_10048D5  +
dec ecx  +
jz loc_10048C7  +
dec ecx  +
dec ecx  +
jz loc_100485D  +
dec ecx  +
jz loc_1004724  +
sub ecx 5 +
jz loc_10046E2  +
sub ecx 0EC64h +
jnz loc_10048FF  +
jmp loc_10041C3  +
cmp [ebp+arg_C] ebx +
jnz loc_10048FF  +
push dword_100706C  +
push 3FCh  +
push edx  +
call ds:IsDlgButtonChecked  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
push dword_1007B94  +
push dword_100707C  +
mov ecx offset unk_1007BA8 +
call sub_100192C  +
call sub_1002A08  +
jmp loc_10041CB  +
cmp [ebp+arg_C] ebx +
jnz loc_10048FF  +
push ebx  +
push offset DialogFunc  +
push edx  +
push 66h  +
push hInstance  +
xor edi edi +
call ds:DialogBoxParamW  +
mov esi dword_100777C +
cmp esi ebx +
jz loc_10041CB  +
jmp loc_100480B  +
xor eax eax +
mov [ebp+Buffer] ax +
jmp loc_1004791  +
cmp ax 9 +
jz loc_1004799  +
cmp ax 0Ah +
jz loc_1004799  +
cmp ax 0Dh +
jz loc_1004799  +
cmp ax 20h +
jz loc_1004799  +
cmp edi 104h +
jnb loc_1004830  +
mov [ebp+edi*2+Buffer] ax +
inc edi  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax bx +
jnz loc_1004762  +
xor eax eax +
mov [ebp+edi*2+Buffer] ax +
cmp edi ebx +
jbe loc_10047DF  +
lea eax [ebp+Buffer] +
push eax  +
push 0FFFFFFFFh  +
push 1A2h  +
push dword_1007064  +
call ds:SendMessageW  +
cmp eax 0FFFFFFFFh +
jnz loc_10047DF  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push 180h  +
push dword_1007064  +
call ds:SendMessageW  +
movzx eax word ptr [esi] +
xor edi edi +
cmp ax bx +
jz loc_1004814  +
cmp ax 9 +
jz loc_1004801  +
cmp ax 0Ah +
jz loc_1004801  +
cmp ax 0Dh +
jz loc_1004801  +
cmp ax 20h +
jnz loc_100480B  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax bx +
jnz loc_10047E9  +
cmp [esi] bx +
jnz loc_1004757  +
call sub_1002A08  +
push dword_100777C  +
call ds:LocalFree  +
mov dword_100777C ebx +
jmp loc_10041CB  +
push 0Bh  +
call sub_10023E7  +
push dword_100777C  +
mov esi eax +
call ds:LocalFree  +
push ebx  +
push ebx  +
push esi  +
push ebx  +
mov dword_100777C ebx +
call ds:MessageBoxW  +
push 0FFFFFFFFh  +
call ds:exit  +
cmp [ebp+arg_C] 300h +
jnz loc_10048FF  +
xor esi esi +
inc esi  +
cmp dword_1007B90 ebx +
jz loc_1004878  +
push esi  +
jmp loc_10048BF  +
mov eax dword_1007014 +
cmp eax 0FFFFFFFFh +
jz loc_10048A7  +
mov ecx hMem +
imul eax eax +
test dword ptr [eax+ecx] 1000000h +
jz loc_10048A7  +
push dword_1007068  +
call ds:GetWindowTextLengthW  +
test eax eax +
jle loc_10048BE  +
push ebx  +
push ebx  +
push 18Bh  +
push dword_1007064  +
call ds:SendMessageW  +
test eax eax +
jg loc_1004875  +
push ebx  +
push dword_1007090  +
jmp loc_10048F3  +
cmp [ebp+arg_C] 200h +
jnz loc_10048FF  +
jmp loc_10041CB  +
cmp [ebp+arg_C] ebx +
jnz loc_10048FF  +
push eax  +
push edx  +
call ds:IsDlgButtonChecked  +
xor esi esi +
inc esi  +
cmp eax esi +
jnz loc_10048EC  +
push esi  +
jmp loc_10048ED  +
push ebx  +
push dword_1007070  +
call ds:EnableWindow  +
mov [ebp+var_850] esi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_850] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005CD9  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
dec eax  +
dec eax  +
jz loc_1004974  +
sub eax 51h +
jz loc_100496F  +
sub eax 28h +
jz loc_1004967  +
sub eax 95h +
jz loc_1004957  +
dec eax  +
jz loc_100493E  +
dec eax  +
jnz loc_100498F  +
mov eax [ebp+hWnd] +
shr eax 10h +
push eax  +
push [ebp+arg_C]  +
movzx eax word ptr [ebp+hWnd] +
push eax  +
push [ebp+lParam]  +
call sub_1003FA1  +
jmp loc_100498F  +
push [ebp+arg_C]  +
push [ebp+hWnd]  +
push [ebp+lParam]  +
call sub_1002C38  +
jmp loc_1004991  +
push [ebp+hWnd]  +
call sub_1002458  +
xor eax eax +
inc eax  +
jmp loc_1004991  +
push dword_1007BAC  +
call ds:DecodePointer  +
push eax  +
push 0FFFFFFFCh  +
push dword_1007070  +
call ds:SetWindowLongW  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
xor eax eax +
push edi  +
push eax  +
push eax  +
push 1  +
push eax  +
mov [ebp+dwReserved] eax +
mov [ebp+var_10] eax +
call ds:HeapSetInformation  +
mov ebx ds:GetEnvironmentVariableW +
mov esi 104h +
push esi  +
mov edi offset word_1007988 +
push edi  +
push offset Name  +
call ebx  +
push 0  +
test eax eax +
jnz loc_10049EB  +
call ds:GetLastError  +
push eax  +
call sub_10026F3  +
xor eax eax +
inc eax  +
jmp loc_1004D2C  +
call ds:GetModuleHandleW  +
mov hInstance eax +
test eax eax +
jnz loc_10049FD  +
push edi  +
jmp loc_10049D7  +
mov edi [ebp+arg_4] +
mov eax [edi] +
push esi  +
push offset word_1007780  +
push offset aUserdomain  +
mov dword_1007778 eax +
call ebx  +
test eax eax +
jnz loc_1004A28  +
push offset word_1007988  +
push esi  +
push offset word_1007780  +
call sub_10024D1  +
cmp [ebp+arg_0] 1 +
jnz loc_1004A3A  +
xor esi esi +
call sub_1003D20  +
jmp loc_1004D2A  +
mov esi ds:wcsncmp +
push 2  +
pop ebx  +
push ebx  +
push offset aI  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004E69  +
push ebx  +
push offset aI_0  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004E69  +
push ebx  +
push offset aI_1  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004E69  +
push ebx  +
push offset aI_2  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004E69  +
push ebx  +
push offset aUnexpected  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004DF9  +
push ebx  +
push offset aUnexpected_0  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004DF9  +
push ebx  +
push offset aUnexpected_1  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004DF9  +
push ebx  +
push offset aUnexpected_2  +
push dword ptr [edi+4]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_1004DF9  +
lea eax [ebp+dwReserved] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_1001D92  +
test eax eax +
jnz loc_1004B38  +
xor esi esi +
inc esi  +
jmp loc_1004A30  +
push [ebp+var_14]  +
mov esi offset unk_1007BA8 +
push [ebp+dwReserved]  +
mov ecx esi +
call sub_10018A7  +
xor ebx ebx +
test eax eax +
jz loc_1004B65  +
cmp [ebp+var_14] ebx +
jz loc_1004B5E  +
or [ebp+dwReserved] 2000000h +
jmp loc_1004B65  +
or [ebp+dwReserved] 1000000h +
push [ebp+var_14]  +
mov ecx esi +
push [ebp+dwReserved]  +
call sub_10018A7  +
test eax eax +
jz loc_1004B93  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_1004B90  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1004B80  +
sub eax edx +
sar eax 1 +
jnz loc_1004B93  +
mov [ebp+var_C] ebx +
push [ebp+var_1C]  +
mov edi dword ptr [ebp+hKey] +
push edi  +
call sub_100215C  +
cmp [ebp+var_24] ebx +
jz loc_1004BB0  +
push edi  +
call ds:AbortSystemShutdownW  +
jmp loc_1004D87  +
cmp [ebp+var_1C] ebx +
jz loc_1004BE4  +
mov eax dword ptr [ebp+hMem] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF4h +
push ebx  +
add eax 10h +
push eax  +
call ds:ExitWindowsEx  +
test eax eax +
jnz loc_1004D27  +
call ds:GetLastError  +
mov esi eax +
push offset word_1007988  +
jmp loc_1004EA6  +
cmp [ebp+var_28] ebx +
jz loc_1004D5A  +
push ebx  +
call sub_1002193  +
test eax eax +
jnz loc_1004D31  +
push 13h  +
call sub_10023E7  +
push ebx  +
push ebx  +
mov esi eax +
push 100h  +
mov dword ptr [ebp+hMem] esi +
call ds:SetThreadPreferredUILanguages  +
cmp esi ebx +
jz loc_1004D27  +
cmp edi ebx +
jz loc_1004CB2  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1004C29  +
sub eax edx +
sar eax 1 +
jz loc_1004CB2  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1004C3E  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax edi +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_1004C53  +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
lea esi [esi+esi+28h] +
push esi  +
push ebx  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_1004D1E  +
mov ebx ds:GetLastError +
xor eax eax +
mov [edi] ax +
call ebx  +
test eax eax +
jz loc_1004CA5  +
call ebx  +
push eax  +
push dword ptr [ebp+hMem]  +
push dword ptr [ebp+hKey]  +
push offset aSSD  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 18h +
jmp loc_1004D11  +
push dword ptr [ebp+hMem]  +
push dword ptr [ebp+hKey]  +
push offset aSS  +
jmp loc_1004CF3  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1004CB7  +
sub eax edx +
sar eax 1 +
lea esi [eax+eax+28h] +
push esi  +
push ebx  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_1004D1E  +
mov ebx ds:GetLastError +
xor eax eax +
mov [edi] ax +
call ebx  +
test eax eax +
jz loc_1004CFF  +
call ebx  +
push eax  +
push dword ptr [ebp+hMem]  +
push offset aSD  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 14h +
jmp loc_1004D11  +
push dword ptr [ebp+hMem]  +
push offset aS  +
push esi  +
push edi  +
call sub_10025EF  +
add esp 10h +
push edi  +
call sub_1001BD1  +
push edi  +
call ds:LocalFree  +
push dword ptr [ebp+hMem]  +
call ds:LocalFree  +
mov esi [ebp+var_10] +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax dword ptr [ebp+hMem] +
neg eax  +
sbb eax eax +
push ebx  +
and eax 7FFFFFFFh +
inc eax  +
push eax  +
push 2  +
push 3  +
call ds:NtInitiatePowerAction  +
cmp eax ebx +
jge loc_1004D27  +
push eax  +
call ds:RtlNtStatusToDosError  +
jmp loc_1004DDA  +
cmp [ebp+var_2C] ebx +
jz loc_1004D93  +
push 1  +
call sub_1002193  +
push [ebp+dwReserved]  +
test eax eax +
jz loc_1004D7F  +
xor eax eax +
cmp dword ptr [ebp+hMem] ebx +
setnz al  +
lea eax ds:8[eax*4] +
push eax  +
jmp loc_1004D81  +
push 1  +
call ds:ExitWindowsEx  +
test eax eax +
jnz loc_1004D27  +
call ds:GetLastError  +
jmp loc_1004DDA  +
cmp [ebp+var_14] ebx +
jz loc_1004DB0  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_C]  +
lea eax [ebp+dwReserved] +
push ebx  +
push ebx  +
push eax  +
push edi  +
call sub_1002F44  +
jmp loc_1004D27  +
cmp [ebp+Type] ebx +
jz loc_1004DE1  +
mov eax 84h +
cmp dword ptr [ebp+hMem] ebx +
jz loc_1004DC9  +
inc eax  +
cmp edi ebx +
jnz loc_1004DC9  +
mov eax 87h +
push [ebp+dwReserved]  +
push eax  +
push [ebp+var_20]  +
push [ebp+var_C]  +
push edi  +
call ds:InitiateShutdownW  +
mov esi eax +
jmp loc_1004EA5  +
push [ebp+dwReserved]  +
push [ebp+cbData]  +
push dword ptr [ebp+hMem]  +
push [ebp+var_20]  +
push [ebp+var_C]  +
push edi  +
call ds:InitiateSystemShutdownExW  +
jmp loc_1004D87  +
lea eax [ebp+hKey] +
push eax  +
push 20119h  +
xor edi edi +
push edi  +
push offset SubKey  +
push 80000002h  +
mov dword_1007B98 1 +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_1004D2C  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset ValueName  +
push dword ptr [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
push dword ptr [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi edi +
jnz loc_1004D2A  +
push hInstance  +
call sub_100558C  +
jmp loc_1004E9B  +
mov eax hInstance +
xor edi edi +
cmp eax edi +
jz loc_1004D27  +
push edi  +
push offset sub_100491B  +
push edi  +
push 65h  +
push eax  +
call ds:DialogBoxParamW  +
mov ecx eax +
and ecx 1FFF0000h +
movzx esi ax +
cmp ecx 70000h +
jz loc_1004E9D  +
mov esi eax +
cmp esi edi +
jz loc_1004D2A  +
push edi  +
push esi  +
call sub_10026F3  +
jmp loc_1004D2A  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1004ED1  +
cmp [esi] ax +
jz loc_1004ECD  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1004EC3  +
test edx edx +
jnz loc_1004ED6  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1004EE7  +
test eax eax +
jl loc_1004EE4  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7FFFFFFFh +
ja loc_1004F05  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_1004F10  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetDlgItem +
push 8A7h  +
push [ebp+hDlg]  +
call edi  +
mov esi [ebp+arg_4] +
push dword ptr [esi+0Ch]  +
xor ebx ebx +
inc ebx  +
mov [ebp+hWnd] eax +
mov [ebp+bEnable] ebx +
call ReasonCodeNeedsComment  +
test eax eax +
jnz loc_1004F65  +
push dword ptr [esi+0Ch]  +
call ReasonCodeNeedsBugID  +
test eax eax +
jnz loc_1004F65  +
push 19h  +
mov [ebp+bEnable] ebx +
call sub_10023E7  +
mov ebx eax +
jmp loc_1004F7B  +
push 18h  +
call sub_10023E7  +
cmp dword ptr [esi+450h] 0 +
mov ebx eax +
jnz loc_1004F7B  +
and [ebp+bEnable] 0 +
test ebx ebx +
jz loc_1004F90  +
push ebx  +
push [ebp+hWnd]  +
call ds:SetWindowTextW  +
push ebx  +
call ds:LocalFree  +
push [ebp+bEnable]  +
push 1  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:EnableWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SendMessageW +
push 0  +
push 0  +
push 147h  +
push [ebp+hWnd]  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1004FDD  +
push 0  +
push eax  +
push 150h  +
push [ebp+hWnd]  +
call esi  +
mov eax [eax] +
jmp loc_1004FE2  +
mov eax 0FFh +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SendMessageW +
push 0  +
push 0  +
push 147h  +
push [ebp+hWnd]  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1005027  +
push 0  +
push eax  +
push 150h  +
push [ebp+hWnd]  +
call esi  +
add eax 84h +
push eax  +
push [ebp+arg_4]  +
call ds:SetWindowTextW  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
push edi  +
push ebx  +
push 0FFFFFFEBh  +
push [ebp+hDlg]  +
call ds:SetWindowLongW  +
mov edi ds:GetDlgItem +
push 8A3h  +
push [ebp+hDlg]  +
call edi  +
and [ebp+var_4] 0 +
cmp dword ptr [ebx+4] 0 +
mov esi ds:SendMessageW +
mov [ebp+hWnd] eax +
jle loc_10050C9  +
mov eax [ebx] +
mov ecx [ebp+var_4] +
mov eax [eax+ecx*4] +
add eax 4 +
push eax  +
push 0  +
push 143h  +
push [ebp+hWnd]  +
call esi  +
mov [ebp+wParam] eax +
cmp eax 0FFFFFFFFh +
jz loc_10050BE  +
mov ecx [ebx] +
mov edx [ebp+var_4] +
push dword ptr [ecx+edx*4]  +
push eax  +
push 151h  +
push [ebp+hWnd]  +
call esi  +
mov eax [ebx] +
mov ecx [ebp+var_4] +
mov eax [eax+ecx*4] +
mov eax [eax] +
cmp eax [ebx+0Ch] +
jnz loc_10050BE  +
push 0  +
push [ebp+wParam]  +
push 14Eh  +
push [ebp+hWnd]  +
call esi  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebx+4] +
jl loc_100506D  +
push 0  +
push 0  +
push 146h  +
push [ebp+hWnd]  +
call esi  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+wParam] eax +
jle loc_100518C  +
cmp [ebx+450h] ecx +
jz loc_100518C  +
cmp eax ecx +
mov [ebp+var_4] ecx +
jle loc_100514F  +
push 0  +
push [ebp+var_4]  +
push 150h  +
push [ebp+hWnd]  +
call esi  +
cmp dword ptr [eax] 805000Fh +
jz loc_100511B  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+wParam] +
jl loc_10050F7  +
jmp loc_100514F  +
push 0  +
push [ebp+var_4]  +
push 14Eh  +
push [ebp+hWnd]  +
call esi  +
lea eax [ebx+10h] +
push eax  +
push 8A5h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:SetWindowTextW  +
push 1  +
push 1  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:EnableWindow  +
mov eax [ebp+wParam] +
cmp [ebp+var_4] eax +
jnz loc_10051B4  +
push 0  +
push 0  +
push 14Eh  +
push [ebp+hWnd]  +
call esi  +
lea eax [ebx+10h] +
push eax  +
push 8A5h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:SetWindowTextW  +
push 1  +
push 1  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:EnableWindow  +
jmp loc_10051B4  +
push ecx  +
push ecx  +
push 147h  +
push [ebp+hWnd]  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_10051B4  +
mov eax [ebx] +
mov eax [eax] +
mov eax [eax] +
push 0  +
push 0  +
push 14Eh  +
push [ebp+hWnd]  +
mov [ebx+0Ch] eax +
call esi  +
push 8A4h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
push [ebp+hWnd]  +
call sub_1004FEC  +
push ebx  +
push [ebp+hDlg]  +
call sub_1004F19  +
push 0  +
push 1FFh  +
push 0C5h  +
push 8A5h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call esi  +
push 0  +
push 1Fh  +
push 0C5h  +
push 8A6h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call esi  +
push [ebp+hDlg]  +
xor esi esi +
inc esi  +
mov [ebx+45Ch] esi +
call ds:SetForegroundWindow  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1005241  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_1005241  +
call sub_1004EB6  +
jmp loc_1005246  +
mov eax 80070057h +
test eax eax +
jge loc_1005251  +
test edi edi +
jz loc_1005251  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+hDlg] +
push edi  +
push 0FFFFFFEBh  +
push esi  +
xor ebx ebx +
call ds:GetWindowLongW  +
mov edi eax +
mov eax [ebp+hMem] +
dec eax  +
jz loc_100534F  +
dec eax  +
jz loc_100534C  +
sub eax 7 +
jz loc_100532B  +
sub eax 89Ah +
jz loc_10052F2  +
dec eax  +
dec eax  +
jz loc_10052CA  +
dec eax  +
jnz loc_1005509  +
cmp [ebp+arg_C] 300h +
jnz loc_1005509  +
push 8A6h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call ds:GetWindowTextLengthW  +
mov [edi+454h] eax +
jmp loc_100531C  +
cmp [ebp+arg_C] 300h +
jnz loc_1005509  +
push 8A5h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call ds:GetWindowTextLengthW  +
mov [edi+450h] eax +
jmp loc_100531C  +
cmp [ebp+arg_C] 1 +
jnz loc_1005509  +
push 8A4h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
push [ebp+hWnd]  +
call sub_1004FEC  +
push [ebp+hWnd]  +
call sub_1004FAD  +
mov [edi+0Ch] eax +
push edi  +
push esi  +
call sub_1004F19  +
xor ebx ebx +
inc ebx  +
jmp loc_1005509  +
cmp [ebp+arg_C] ebx +
jnz loc_1005509  +
push ebx  +
push ebx  +
push offset aReliab_chmHt_0  +
call ds:GetDesktopWindow  +
push eax  +
call sub_100597C  +
jmp loc_1005509  +
mov [edi+0Ch] ebx +
cmp [ebp+arg_C] ebx +
jnz loc_1005509  +
push 8A3h  +
mov [ebp+arg_C] ebx +
mov ebx ds:GetDlgItem +
push esi  +
call ebx  +
push eax  +
call sub_1004FAD  +
mov [edi+0Ch] eax +
cmp eax 0FFh +
jnz loc_1005383  +
xor ebx ebx +
inc ebx  +
push ebx  +
push esi  +
jmp loc_1005503  +
lea ecx [ebp+arg_C] +
push ecx  +
lea eax [edi+10h] +
push 1FFh  +
push eax  +
mov [ebp+hWnd] eax +
call sub_100521F  +
mov esi ds:LocalAlloc +
push 400h  +
push 40h  +
mov dword ptr [ebp+var_C] eax +
call esi  +
push 40h  +
push 40h  +
mov [ebp+hMem] eax +
call esi  +
mov [ebp+lpString] eax +
mov eax [ebp+arg_C] +
lea eax [eax+eax+2] +
push eax  +
push 40h  +
call esi  +
xor ecx ecx +
cmp dword ptr [ebp+var_C] ecx +
mov [ebp+var_8] eax +
jl loc_10054D9  +
cmp [ebp+hMem] ecx +
jz loc_10054D9  +
cmp [ebp+lpString] ecx +
jz loc_10054D9  +
cmp eax ecx +
jz loc_10054D9  +
push [ebp+hWnd]  +
mov ecx [ebp+arg_C] +
inc ecx  +
push ecx  +
push eax  +
call sub_10024D1  +
push 20h  +
push [ebp+lpString]  +
push 8A6h  +
push [ebp+hDlg]  +
call ebx  +
push eax  +
call ds:GetWindowTextW  +
mov esi 200h +
push esi  +
push [ebp+hMem]  +
mov dword ptr [ebp+var_C] eax +
push 8A5h  +
push [ebp+hDlg]  +
call ebx  +
push eax  +
call ds:GetWindowTextW  +
mov ebx [ebp+lpString] +
xor ecx ecx +
mov [ebx+3Eh] cx +
mov ecx [ebp+hMem] +
push ecx  +
push eax  +
push [ebp+var_8]  +
xor edx edx +
push [ebp+arg_C]  +
mov [ecx+3FEh] dx +
push ebx  +
push dword ptr [ebp+var_C]  +
push offset aDSDSDS  +
push esi  +
push [ebp+hWnd]  +
call sub_10025B4  +
add esp 24h +
lea eax [ebp+arg_C] +
push eax  +
push esi  +
mov esi [ebp+hWnd] +
push esi  +
call sub_100521F  +
test eax eax +
jge loc_100547D  +
and dword ptr [edi+450h] 0 +
xor eax eax +
mov [esi] ax +
jmp loc_100548C  +
lea eax [edi+450h] +
push eax  +
push [ebp+arg_C]  +
call sub_1004EED  +
push ebx  +
push offset aS  +
lea esi [edi+410h] +
push 20h  +
push esi  +
call sub_10025B4  +
add esp 10h +
lea eax [ebp+arg_C] +
push eax  +
push 20h  +
push esi  +
call sub_100521F  +
test eax eax +
jge loc_10054C1  +
and dword ptr [edi+454h] 0 +
xor eax eax +
mov [esi] ax +
jmp loc_10054D0  +
lea eax [edi+454h] +
push eax  +
push [ebp+arg_C]  +
call sub_1004EED  +
and dword ptr [edi+45Ch] 0 +
jmp loc_10054E7  +
mov [edi+450h] ecx +
mov ecx [ebp+hWnd] +
xor eax eax +
mov [ecx] ax +
push [ebp+hMem]  +
mov esi ds:LocalFree +
call esi  +
push [ebp+lpString]  +
call esi  +
push [ebp+var_8]  +
call esi  +
xor ebx ebx +
inc ebx  +
push ebx  +
push [ebp+hDlg]  +
call ds:EndDialog  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 14h +
jz loc_1005546  +
sub eax 0FCh +
jz loc_1005577  +
dec eax  +
jz loc_100555E  +
dec eax  +
jz loc_100554C  +
sub eax 5 +
jnz loc_1005546  +
push 1  +
push 0F010h  +
push [ebp+hMenu]  +
call ds:EnableMenuItem  +
xor eax eax +
pop ebp  +
retn 10h  +
mov eax [ebp+hMenu] +
and eax 0FFFFFFF0h +
cmp eax 0F010h +
jnz loc_1005546  +
xor eax eax +
inc eax  +
jmp loc_1005548  +
mov eax [ebp+hMenu] +
shr eax 10h +
push eax  +
push [ebp+hWnd]  +
movzx eax word ptr [ebp+hMenu] +
push eax  +
push [ebp+hDlg]  +
call sub_100525B  +
jmp loc_1005546  +
push [ebp+hWnd]  +
push [ebp+hMenu]  +
push [ebp+hDlg]  +
call sub_1005031  +
jmp loc_1005548  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4B0h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push 4  +
pop ebx  +
mov [ebp+hInstance] eax +
mov [ebp+var_474] esi +
mov [ebp+hKey] esi +
mov [ebp+cbData] ebx +
mov [ebp+var_46C] 3FEh +
mov [ebp+var_458] esi +
mov [ebp+dwInitParam] esi +
mov [ebp+var_460] esi +
mov [ebp+var_45C] esi +
call IsSETEnabled  +
test eax eax +
jz loc_10057A6  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 1  +
push esi  +
push esi  +
push esi  +
push offset SubKey  +
push 80000002h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_10057A0  +
mov [ebp+SystemTime.wYear] ax +
lea edi [ebp+SystemTime.wMonth] +
stos   +
stos   +
stos   +
stos   +
mov edi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
push esi  +
push esi  +
push offset aDirtyshutdownt  +
push [ebp+hKey]  +
mov [ebp+cbData] 10h +
call edi  +
test eax eax +
jnz loc_10056C4  +
lea eax [ebp+FileTime] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToFileTime  +
test eax eax +
jz loc_10056C4  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov eax [ebp+FileTime.dwLowDateTime] +
or eax [ebp+FileTime.dwHighDateTime] +
jz loc_10057A6  +
mov ecx [ebp+SystemTimeAsFileTime.dwLowDateTime] +
sub ecx [ebp+FileTime.dwLowDateTime] +
mov eax [ebp+SystemTimeAsFileTime.dwHighDateTime] +
sbb eax [ebp+FileTime.dwHighDateTime] +
cmp eax 1792h +
jg loc_10057A6  +
jl loc_10056C4  +
cmp ecx 0F8648000h +
ja loc_10057A6  +
push 1  +
push esi  +
lea eax [ebp+dwInitParam] +
push eax  +
call BuildReasonArray  +
test eax eax +
jz loc_10057A6  +
xor eax eax +
mov [ebp+var_54] ax +
lea eax [ebp+var_46C] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aBugcheckstring  +
push [ebp+hKey]  +
mov [ebp+var_10] esi +
call edi  +
test eax eax +
jz loc_1005713  +
xor eax eax +
mov word ptr [ebp+Data] ax +
mov [ebp+var_14] esi +
jmp loc_1005724  +
mov eax [ebp+var_46C] +
shr eax 1 +
mov [ebp+var_14] eax +
xor eax eax +
mov [ebp+var_56] ax +
lea eax [ebp+dwInitParam] +
push eax  +
push offset sub_1005517  +
push esi  +
push 8A2h  +
push [ebp+hInstance]  +
call ds:DialogBoxParamW  +
cmp eax 0FFFFFFFFh +
jnz loc_1005753  +
call ds:GetLastError  +
mov [ebp+var_474] eax +
mov eax [ebp+var_458] +
mov [ebp+var_498] eax +
lea eax [ebp+Data] +
mov [ebp+var_48C] eax +
lea eax [ebp+var_4A0] +
push eax  +
mov [ebp+var_4A0] 18h +
mov [ebp+var_49C] 1 +
mov [ebp+var_494] ebx +
call ds:RecordShutdownReason  +
lea eax [ebp+dwInitParam] +
push eax  +
call DestroyReasons  +
jmp loc_10057A6  +
mov [ebp+hKey] esi +
cmp [ebp+hKey] esi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10057BD  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_474] +
xor ecx ebp +
call sub_1005CD9  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100583F  +
cmp ecx 7FFFFFFFh +
jbe loc_1005844  +
mov eax 80070057h +
test eax eax +
jl loc_1005888  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100587B  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1005876  +
mov cl [edx+eax] +
test cl cl +
jz loc_1005876  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1005862  +
pop edi  +
test esi esi +
jnz loc_1005881  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+lpDst] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset aClsidAdb880a6D  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1005966  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push esi  +
push [ebp+hKey]  +
mov edi 104h +
mov [ebp+cbData] edi +
mov [ebp+Type] 1 +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_1005955  +
cmp [ebp+Type] 2 +
mov [ebp+var_5] al +
lea eax [ebp+Src] +
jnz loc_100593F  +
push edi  +
push [ebp+lpDst]  +
push eax  +
call ds:ExpandEnvironmentStringsA  +
dec eax  +
lea ecx [edi-1] +
cmp ecx eax +
sbb esi esi +
inc esi  +
jmp loc_1005955  +
push eax  +
push edi  +
push [ebp+lpDst]  +
call sub_1005829  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov esi ecx +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop edi  +
jmp loc_1005968  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1005CD9  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100703C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx dword_1007BBC +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test ecx ecx +
jnz loc_10059FB  +
cmp dword_1007BB8 ecx +
jnz loc_10059FB  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1005891  +
mov esi ds:LoadLibraryA +
test eax eax +
jz loc_10059D0  +
lea eax [ebp+LibFileName] +
push eax  +
call esi  +
mov dword_1007BBC eax +
mov ecx dword_1007BBC +
test ecx ecx +
jnz loc_10059FB  +
push offset aHhctrl_ocx  +
call esi  +
mov ecx eax +
mov dword_1007BBC ecx +
test ecx ecx +
jnz loc_10059FB  +
mov dword_1007BB8 1 +
xor eax eax +
jmp loc_1005A20  +
mov eax dword_1007BB4 +
test eax eax +
jnz loc_1005A16  +
push 0Fh  +
push ecx  +
call ds:GetProcAddress  +
mov dword_1007BB4 eax +
test eax eax +
jz loc_10059ED  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005CD9  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1005A52  +
test eax eax +
jnz loc_1005A57  +
mov ecx [esi] +
test ecx ecx +
jz loc_1005A4F  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1005A43  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1007BE4 +
push offset dword_1007BD4  +
push dword_1007BE0  +
mov dword_1007BD4 eax +
push offset dword_1007BC4  +
push offset dword_1007BC8  +
push offset dword_1007BC0  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1007BD0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1005ADF  +
cmp eax esi +
jnz loc_1005AD2  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1005AE2  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1005AB9  +
xor esi esi +
inc esi  +
mov eax dword_1007F0C +
cmp eax esi +
jnz loc_1005AF5  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1005B30  +
mov eax dword_1007F0C +
test eax eax +
jnz loc_1005B2A  +
mov dword_1007F0C esi +
push offset dword_100120C  +
push offset dword_1001200  +
call sub_1005A36  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005B30  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1005BFA  +
mov dword_1007BDC esi +
mov eax dword_1007F0C +
cmp eax esi +
jnz loc_1005B54  +
push offset dword_10011FC  +
push offset dword_10011EC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1007F0C 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1005B61  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1007F1C ebx +
jz loc_1005B82  +
push offset dword_1007F1C  +
call sub_1005EC9  +
pop ecx  +
test eax eax +
jz loc_1005B82  +
push ebx  +
push 2  +
push ebx  +
call dword_1007F1C  +
push dword_1007BC4  +
push dword_1007BC8  +
push dword_1007BC0  +
call sub_100499A  +
add esp 0Ch +
mov dword_1007BD8 eax +
cmp dword_1007BCC ebx +
jnz loc_1005BE0  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1007BD8 eax +
xor ebx ebx +
cmp dword_1007BCC ebx +
jnz loc_1005BE0  +
push eax  +
call ds:_exit  +
cmp dword_1007BDC ebx +
jnz loc_1005BEE  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1007BD8 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1005C17  +
xor eax eax +
jmp loc_1005C64  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1005C13  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1005C51  +
cmp ecx 20Bh +
jnz loc_1005C13  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1005C13  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1005C5F  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1005C13  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1007BCC eax +
call sub_1006063  +
push eax  +
call ds:__set_app_type  +
or dword_1007F14 0FFFFFFFFh +
or dword_1007F18 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1007BEC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1007BE8 +
mov [eax] ecx +
call sub_1005FF4  +
cmp dword_1007058 0 +
jnz loc_1005CBD  +
push offset sub_1005FF4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1005FDC  +
xor eax eax +
retn   +
***
call sub_10060A2  +
jmp sub_1005A97  +
***
cmp ecx dword_100703C +
jnz loc_1005CE4  +
retn 0  +
jmp loc_1006138  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1005D2B  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1005E0E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1005E0E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1005E08  +
cmp eax 19930521h +
jz loc_1005E08  +
cmp eax 19930522h +
jz loc_1005E08  +
cmp eax 1994000h +
jnz loc_1005E0E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1005DD0+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1005E56  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1005E52  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1005EBD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1005EB5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1005EBF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1005EA5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1005E40  +
pop ecx  +
test eax eax +
jz loc_1005F26  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1005E80  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005F26  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1005F2F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1005CD9  +
push offset dword_100703C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1006056  +
cmp ecx 0FFFFFFFFh +
jz loc_1006056  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100604F  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100604F  +
cmp edx 10000000h +
jnb loc_100604F  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100604F  +
jmp loc_100604A  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1006098  +
push eax  +
call sub_1005FFD  +
test eax eax +
jz loc_1006098  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100608D  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1006098  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100703C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10060D4  +
test eax ebx +
jz loc_10060D4  +
not eax  +
mov dword_1007040 eax +
jmp loc_100612F  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100611B  +
test dword_100703C ebx +
jnz loc_1006120  +
mov esi 0BB40E64Fh +
mov dword_100703C esi +
not esi  +
mov dword_1007040 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1007CF0 eax +
mov dword_1007CEC ecx +
mov dword_1007CE8 edx +
mov dword_1007CE4 ebx +
mov dword_1007CE0 esi +
mov dword_1007CDC edi +
mov word_1007D08 ss +
mov word_1007CFC cs +
mov word_1007CD8 ds +
mov word_1007CD4 es +
mov word_1007CD0 fs +
mov word_1007CCC gs +
pushf   +
pop dword_1007D00  +
mov eax [ebp+0] +
mov dword_1007CF4 eax +
mov eax [ebp+4] +
mov dword_1007CF8 eax +
lea eax [ebp+8] +
mov dword_1007D04 eax +
mov eax [ebp-320h] +
mov dword_1007C40 10001h +
mov eax dword_1007CF8 +
mov dword_1007BFC eax +
mov dword_1007BF0 0C0000409h +
mov dword_1007BF4 1 +
mov eax dword_100703C +
mov [ebp-328h] eax +
mov eax dword_1007040 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push 0  +
call ds:EncodePointer  +
mov dword_1007BAC eax +
retn   +
***
retf   +
***
