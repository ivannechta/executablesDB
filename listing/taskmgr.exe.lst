mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+Msg] +
push esi  +
push edi  +
mov edi ds:GetWindowRect +
cmp ebx 5 +
jz loc_100567C  +
cmp ebx 3 +
jz loc_100567C  +
mov esi ds:PostThreadMessageW +
cmp ebx dword_101F6B8 +
jz loc_1009850  +
mov eax dword_101E458 +
mov ecx 110h +
cmp ebx ecx +
ja loc_1001EC5  +
jz loc_1007F7D  +
cmp ebx 24h +
ja loc_1001F04  +
jz loc_10056BA  +
mov eax ebx +
dec eax  +
dec eax  +
jz loc_100893B  +
sub eax 3 +
jz loc_100990F  +
sub eax 0Bh +
jnz loc_100986B  +
push hWnd  +
call sub_100D98F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
cmp ecx dword_101E08C +
jnz loc_101B209  +
retn   +
***
push ebx  +
lea eax [ebp-3D0h] +
push eax  +
call esi  +
test eax eax +
jz loc_1009EA5  +
lea eax [ebp-3D0h] +
push eax  +
call sub_1001AFA  +
test eax eax +
jnz sub_10016A8  +
lea eax [ebp-3D0h] +
push eax  +
push hAccTable  +
push hWnd  +
call ds:TranslateAcceleratorW  +
test eax eax +
jnz sub_10016A8  +
lea eax [ebp-3D0h] +
push eax  +
push hWnd  +
call ds:IsDialogMessageW  +
test eax eax +
jnz sub_10016A8  +
lea eax [ebp-3D0h] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp-3D0h] +
push eax  +
call ds:DispatchMessageW  +
jmp sub_10016A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B58h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call ds:PeekMessageW  +
cmp esi ebx +
jz loc_100180D  +
push esi  +
call ds:SetEvent  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call ds:GetMessageW  +
test eax eax +
jz loc_10018FD  +
mov esi ds:Shell_NotifyIconW +
push edi  +
mov edi 3BCh +
mov eax [ebp+Msg.message] +
sub eax 402h +
jnz loc_1005064  +
mov eax [ebp+Msg.lParam] +
push edi  +
mov [ebp+lpMem] eax +
lea eax [ebp+Data] +
push ebx  +
push eax  +
call memset  +
mov eax hWnd +
add esp 0Ch +
mov [ebp+Data.hWnd] eax +
push 2  +
pop eax  +
mov [ebp+var_A1C] eax +
mov [ebp+var_A20] eax +
mov eax [ebp+Msg.wParam] +
mov eax dword_101E560[eax*4] +
mov [ebp+Data.cbSize] edi +
mov [ebp+Data.uFlags] 0Ah +
mov [ebp+Data.hIcon] eax +
cmp [ebp+Msg.lParam] ebx +
jz loc_10018D9  +
push [ebp+Msg.lParam]  +
lea eax [ebp+Data.szTip] +
push 80h  +
push eax  +
mov [ebp+Data.uFlags] 0Eh +
call sub_1001A1B  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
lea eax [ebp+Data] +
push eax  +
push 1  +
call esi  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call ds:GetMessageW  +
test eax eax +
jnz loc_1001831  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001951  +
test [ebp+arg_0] 1 +
jz loc_1001939  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push eax  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
jmp loc_1001964  +
***
mov edi edi +
push esi  +
lea esi [ecx+80h] +
mov eax [esi] +
test eax eax +
jnz loc_100CBBA  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10019B7  +
cmp ecx 7FFFFFFFh +
ja loc_10019B7  +
test eax eax +
jl loc_10019B5  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10019BE  +
cmp eax esi +
ja loc_10019BE  +
jz loc_10095CA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_1001981  +
mov ebx 8007007Ah +
jmp loc_10095CA  +
***
cmp eax 0A5h +
jbe loc_10092DF  +
cmp eax 202h +
jbe loc_1001A10  +
cmp eax 205h +
ja loc_1001A10  +
jmp loc_10092DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0A3h +
jnb loc_10019DE  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1001A4B  +
cmp edx 7FFFFFFFh +
ja loc_1001A4B  +
test eax eax +
jl loc_1001A47  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001A57  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_1001A31  +
***
mov edi edi +
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jl loc_1003DD6  +
mov eax [esp+arg_C] +
or eax eax +
jl loc_100909E  +
or eax eax +
jnz loc_10090B7  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
dec edi  +
jz loc_1003DEF  +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_6C] 0 +
cmp dword ptr [eax+4] 100h +
jz loc_1009354  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_6C] +
xor ecx ebp +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jz loc_10096EC  +
push esi  +
xor esi esi +
cmp dword_101E0D8 edi +
jle loc_1001B67  +
mov ecx dword_101E548[esi*4] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
inc esi  +
cmp esi dword_101E0D8 +
jl loc_1001B52  +
cmp dword_101E0CC edi +
jz loc_100970F  +
movzx eax byte_101E080 +
mov ecx dword_101F6BC +
imul eax ecx +
push ebx  +
push 64h  +
xor edx edx +
pop esi  +
div  esi +
mov ebx eax +
cmp ebx ecx +
jnb loc_10096F7  +
mov esi ds:GetProcessHeap +
push 100h  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_1001BCB  +
movzx eax byte_101E080 +
push eax  +
push offset word_101ED50  +
push 80h  +
push edi  +
call sub_100196B  +
add esp 10h +
push edi  +
push ebx  +
push 402h  +
push idThread  +
call ds:PostThreadMessageW  +
pop ebx  +
test eax eax +
jz loc_10096FF  +
call sub_1002432  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
mov [ebp-1Ch] esi +
cmp [esi+10h] edi +
jnz loc_1001D79  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-4] +
push eax  +
push 1  +
push edi  +
push edi  +
call WTSEnumerateSessionsW  +
test eax eax +
jz loc_1001D65  +
mov eax [esi+0Ch] +
mov edi [eax] +
push ebx  +
dec edi  +
jns loc_100250D  +
xor edi edi +
mov [ebp-20h] edi +
cmp [ebp-10h] edi +
jbe loc_1001D54  +
mov eax [ebp-4] +
mov eax [edi+eax+8] +
test eax eax +
jz loc_1001C62  +
cmp eax 2 +
jle loc_1001D42  +
cmp eax 4 +
jg loc_1001D42  +
push 98h  +
call ??2@YAPAXI@Z  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz loc_10059BA  +
push 98h  +
push ebx  +
push esi  +
call memset  +
add esp 0Ch +
cmp esi ebx +
jz loc_1001D42  +
mov eax [ebp-4] +
mov eax [edi+eax] +
mov [esi] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-8] +
push eax  +
mov eax [ebp-4] +
push 0Ah  +
push dword ptr [edi+eax]  +
push ebx  +
call WTSQuerySessionInformationW  +
test eax eax +
jz loc_1001D39  +
mov ecx [ebp-8] +
cmp ecx ebx +
jz loc_100D0BE  +
mov edx dword_101E458 +
mov eax [ebp-4] +
push ebx  +
push dword_101E134  +
shl edx 18h +
push dword_101E130  +
sar edx 1Fh +
push edx  +
add eax edi +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push ecx  +
mov ecx esi +
call sub_1002095  +
mov [ebp-24h] eax +
cmp [ebp-8] ebx +
jz loc_1001D01  +
push dword ptr [ebp-8]  +
call WTSFreeMemory  +
mov [ebp-8] ebx +
cmp [ebp-24h] ebx +
jl loc_1001D39  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
mov eax [ebp-4] +
push 5  +
push dword ptr [edi+eax]  +
push ebx  +
call WTSQuerySessionInformationW  +
test eax eax +
jz loc_1001D39  +
mov eax [ebp-0Ch] +
cmp eax ebx +
jz loc_1001D39  +
push eax  +
cmp [eax] bx +
jnz loc_1005935  +
call WTSFreeMemory  +
mov [ebp-0Ch] ebx +
push 1  +
mov ecx esi +
call sub_100191F  +
inc dword ptr [ebp-20h]  +
mov eax [ebp-20h] +
add edi 0Ch +
cmp eax [ebp-10h] +
jb loc_1001C45  +
push dword ptr [ebp-4]  +
call WTSFreeMemory  +
mov esi [ebp-1Ch] +
xor edi edi +
mov [ebp-4] edi +
pop ebx  +
mov ecx esi +
call sub_1001F6F  +
add dword_101E130 1 +
adc dword_101E134 edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
jz loc_1009CBA  +
sub ebx 111h +
jz loc_1009BFD  +
dec ebx  +
dec ebx  +
jnz loc_10099B8  +
jmp loc_1009B4E  +
***
mov eax [ecx+0Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push ebx  +
mov ebx ds:GetWindowLongW +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
call ebx  +
push dword ptr [ebp+14h]  +
mov esi [ebp+0Ch] +
push dword ptr [ebp+10h]  +
mov [ebp-4] eax +
push esi  +
call sub_1001A01  +
cmp eax 1 +
jz loc_1005B90  +
mov eax 110h +
cmp esi eax +
ja loc_100BC14  +
jz loc_10066A8  +
mov eax esi +
dec eax  +
dec eax  +
jz loc_1008CE7  +
sub eax 3 +
jz loc_1005B88  +
sub eax 10h +
jz loc_100BBDA  +
sub eax 5 +
jz loc_100BBB2  +
sub eax 34h +
jnz loc_1003C33  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
call sub_1001E36  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+8] +
mov esi ecx +
cmp eax 0FFFFFF4Fh +
jz loc_100BA6A  +
cmp eax 0FFFFFF94h +
jz sub_100B9AA  +
cmp eax 0FFFFFF9Bh +
jnz loc_1001E9D  +
test byte ptr [edi+1Ch] 8 +
jz loc_1001E9D  +
mov edi ds:GetDlgItem +
push 0  +
push 0  +
push 1032h  +
push 3F1h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SendMessageW  +
xor ecx ecx +
test eax eax +
setnz cl  +
push ecx  +
push 3F2h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:EnableWindow  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp eax [ebp+arg_0] +
jnz loc_1001B47  +
push 11h  +
call ds:GetKeyState  +
test ax ax +
jge loc_1001B47  +
jmp loc_1001BED  +
***
mov ecx 401h +
cmp ebx ecx +
jbe loc_1001D7D  +
sub ebx 405h +
jz loc_1009CBA  +
dec ebx  +
jnz loc_1009C0F  +
mov edi ds:GetDlgItem +
push 0  +
push 2  +
push 130Ch  +
mov esi 3E8h +
push esi  +
push [ebp+hWnd]  +
call edi  +
jmp loc_1009C69  +
sub ebx 4Eh +
jz loc_1004BC6  +
sub ebx 34h +
jz loc_1008722  +
dec ebx  +
dec ebx  +
jnz loc_1009924  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 84h  +
push [ebp+hWnd]  +
call ds:DefWindowProcW  +
test byte ptr dword_101E458 10h +
jz loc_100166B  +
jmp loc_1009972  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 7FFFFFFFh  +
push ecx  +
call ds:COMCTL32_334  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 12Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push 0BBAh  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
xor edi edi +
push edi  +
push edi  +
push 0Bh  +
push eax  +
mov [ebp+nVirtKey] eax +
call esi  +
push edi  +
push edi  +
push 1004h  +
push [ebp+nVirtKey]  +
call esi  +
mov ecx [ebx+0Ch] +
mov ecx [ecx] +
mov [ebp+var_B0] eax +
mov [ebp+var_B4] ecx +
test eax eax +
jle loc_1002058  +
cmp edi [ebp+var_B4] +
jge loc_1002050  +
push 38h  +
lea eax [ebp+var_128] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push [ebp+nVirtKey]  +
mov [ebp+lParam] 7 +
mov [ebp+var_128] edi +
call esi  +
test eax eax +
jz loc_1005C2B  +
mov eax [ebx+0Ch] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov [ebp+var_A8] eax +
cmp [ebp+var_10C] eax +
jnz loc_100CCB6  +
cmp dword ptr [eax+90h] 0 +
jnz loc_100CCB6  +
mov eax [ebp+var_B0] +
inc edi  +
cmp edi eax +
jl loc_1001FD4  +
cmp edi eax +
jl loc_100CD7C  +
cmp edi [ebp+var_B4] +
jl loc_1005B98  +
xor edi edi +
push 0  +
push 1  +
push 0Bh  +
push [ebp+nVirtKey]  +
call esi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and [ebp+var_4] 0 +
cmp [ebp+arg_18] 0 +
push esi  +
mov esi ecx +
mov [esi+88h] eax +
mov eax [ebp+arg_14] +
push edi  +
mov [esi+8Ch] eax +
jnz loc_1002324  +
push ebx  +
push [ebp+lpString]  +
mov ebx [esi+80h] +
call ds:lstrlenW  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
jmp loc_100CFF3  +
***
push [ebp+lpString]  +
push edi  +
push eax  +
call sub_1001A1B  +
or dword ptr [esi+90h] 10h +
test ebx ebx +
jnz sub_100D013  +
pop ebx  +
cmp [ebp+lpString2] 0 +
jz loc_100211F  +
push [ebp+lpString2]  +
lea edi [esi+56h] +
push edi  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_100D028  +
mov ecx [ebp+arg_8] +
lea eax [esi+84h] +
cmp ecx [eax] +
jz loc_1002135  +
or dword ptr [esi+90h] 4 +
mov [eax] ecx +
mov eax [ebp+arg_C] +
cmp eax [esi+4] +
jnz loc_100D03F  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
inc dword ptr [ebp-214h]  +
mov eax [ebp-214h] +
cmp eax [ebp-210h] +
jb loc_10022E9  +
push 0  +
push 0  +
push 3EEh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:InvalidateRect  +
push 3EEh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:UpdateWindow  +
mov eax lpMem +
movzx eax byte ptr [eax] +
push eax  +
push offset word_101F6C8  +
lea eax [ebp-20Ch] +
push ebx  +
push eax  +
call sub_100196B  +
jmp loc_100ACAB  +
***
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+50h] 0 +
jnz loc_100B64A  +
cmp dword_101E174 0 +
jnz loc_100B64A  +
pop esi  +
retn   +
***
cmp [ebp-8] eax +
jge loc_1003547  +
sub eax [ebp-8] +
mov [ebp-18h] eax +
push ebx  +
push dword ptr [ebp-8]  +
push 1008h  +
push dword ptr [ebp-4]  +
call esi  +
dec dword ptr [ebp-18h]  +
jz loc_1003547  +
jmp loc_10021DC  +
***
mov eax eax +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz sub_1003DFB  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_100F487  +
jmp loc_100AAEC  +
***
mov eax dword_101F6C0 +
add eax 2 +
push 0Ch  +
cdq   +
pop ecx  +
idiv  ecx +
push hWnd  +
mov dword_101F6C0 edx +
call ds:IsIconic  +
mov esi ds:GetDlgItem +
mov ebx 104h +
test eax eax +
jnz loc_100ACCA  +
push 0  +
push 0  +
push 3ECh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:InvalidateRect  +
push 3ECh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:UpdateWindow  +
test byte ptr dword_101E458 8 +
mov eax offset unk_101F778 +
jz loc_100AAF8  +
jmp loc_100AAFD  +
***
mov eax [ebp-214h] +
add eax 1388h +
push eax  +
push dword ptr [edi+0Ch]  +
call esi  +
mov [ebp-228h] eax +
test eax eax +
jz loc_100214A  +
push 0  +
push 0  +
push eax  +
call ds:InvalidateRect  +
push dword ptr [ebp-228h]  +
call ds:UpdateWindow  +
jmp loc_100ABD5  +
***
push [ebp+lpString]  +
push dword ptr [esi+80h]  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1002104  +
jmp loc_10020BF  +
***
cmp ecx [eax] +
jz loc_100234D  +
inc esi  +
add eax 0Ch +
cmp esi [ebp-10h] +
jb loc_1002340  +
cmp esi [ebp-10h] +
jnb loc_10059AD  +
imul esi esi +
lea eax [esi+edx] +
mov ecx [eax+8] +
test ecx ecx +
jnz loc_100D04E  +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-0Ch] +
push ecx  +
push 5  +
push dword ptr [eax]  +
push 0  +
call WTSQuerySessionInformationW  +
test eax eax +
jz loc_100D093  +
cmp dword ptr [ebp-0Ch] 0 +
jz loc_100D093  +
push dword ptr [ebp-0Ch]  +
lea eax [ebx+8] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_100D065  +
push dword ptr [ebp-0Ch]  +
call WTSFreeMemory  +
and dword ptr [ebp-0Ch] 0 +
cmp dword ptr [ebp-20h] 0 +
jnz loc_10059AD  +
and dword ptr [ebp-8] 0 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-8] +
push eax  +
mov eax [ebp-4] +
push 0Ah  +
push dword ptr [esi+eax]  +
push 0  +
call WTSQuerySessionInformationW  +
mov ecx [ebp-8] +
test ecx ecx +
jz loc_100D089  +
mov edx dword_101E458 +
mov eax [ebp-4] +
push 1  +
push dword_101E134  +
shl edx 18h +
push dword_101E130  +
sar edx 1Fh +
push edx  +
add eax esi +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push ecx  +
mov ecx ebx +
call sub_1002095  +
cmp dword ptr [ebp-8] 0 +
jz loc_100241D  +
push dword ptr [ebp-8]  +
call WTSFreeMemory  +
and dword ptr [ebp-8] 0 +
mov eax [ebp-4] +
mov dword ptr [esi+eax+8] 5 +
jmp loc_1001C30  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_101F6C4 0 +
jnz loc_1002501  +
push ebx  +
push esi  +
push edi  +
push dword_101E0F0  +
mov esi 104h +
push offset word_101EDD0  +
lea eax [ebp+lParam] +
push esi  +
push eax  +
call sub_100196B  +
mov edi ds:SendMessageW +
add esp 10h +
lea eax [ebp+lParam] +
push eax  +
push 0  +
mov ebx 40Bh +
push ebx  +
push dword_101E0A0  +
call edi  +
movzx eax byte_101E080 +
push eax  +
push offset word_101ED50  +
lea eax [ebp+lParam] +
push esi  +
push eax  +
call sub_100196B  +
add esp 10h +
lea eax [ebp+lParam] +
push eax  +
push 1  +
push ebx  +
push dword_101E0A0  +
call edi  +
xor eax eax +
cmp dword ptr dbl_101E118 eax +
jnz loc_10096CE  +
jmp loc_10096C2  +
push eax  +
push offset word_101F6C8  +
lea eax [ebp+lParam] +
push esi  +
push eax  +
call sub_100196B  +
add esp 10h +
lea eax [ebp+lParam] +
push eax  +
push 2  +
push ebx  +
push dword_101E0A0  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001679  +
leave   +
retn   +
***
mov eax [ebp-1Ch] +
mov eax [eax+0Ch] +
mov eax [eax+4] +
mov ebx [eax+edi*4] +
xor esi esi +
mov [ebp-20h] esi +
cmp [ebp-10h] esi +
jbe loc_10059AD  +
mov edx [ebp-4] +
mov ecx [ebx] +
mov eax edx +
jmp loc_1002340  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100255E  +
test [ebp+arg_0] 1 +
jz loc_1002552  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
mov esi ecx +
mov eax [esi+0C0h] +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_100B744  +
jmp loc_100B735  +
***
push 1  +
mov ecx edi +
call sub_1002538  +
push [ebp+hObject]  +
push dword ptr [ebx+0Ch]  +
call ds:COMCTL32_336  +
jmp loc_100299E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ds:GetProcessHeap +
mov esi ecx +
mov [ebp+var_4] ebx +
mov eax [esi+10h] +
cmp eax ebx +
jz loc_100664C  +
lea ecx [ebp+var_8] +
push ecx  +
push dword ptr [esi+14h]  +
push eax  +
push 5  +
call ds:NtQuerySystemInformation  +
cmp eax ebx +
jl loc_1007AB4  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1002E78  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
push 3F1h  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push 2  +
push 0FFFFFFFFh  +
mov ebx eax +
push 100Ch  +
push ebx  +
call esi  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_1003DA2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov ebx [ebp+var_228] +
or dword ptr [esi+0D0h] 20h +
mov [esi+20h] ebx +
mov [esi+24h] eax +
mov [esi+18h] ebx +
mov [esi+1Ch] eax +
jmp loc_1002A73  +
or dword ptr [esi+0D0h] 200h +
mov [esi+38h] eax +
jmp loc_1002AE1  +
or dword ptr [esi+0D0h] 4000h +
mov ecx [edi+60h] +
sub ecx eax +
mov [esi+40h] ecx +
jmp loc_1002AF2  +
or dword ptr [esi+0D0h] 2000h +
mov eax [edi+60h] +
mov [esi+3Ch] eax +
jmp loc_1002AFB  +
or dword ptr [esi+0D0h] 100000h +
mov eax [edi+88h] +
mov [esi+68h] eax +
mov eax [edi+8Ch] +
mov [esi+6Ch] eax +
jmp loc_1002B55  +
or dword ptr [esi+0D0h] 200000h +
mov eax [edi+90h] +
mov [esi+70h] eax +
mov eax [edi+94h] +
mov [esi+74h] eax +
jmp loc_1002B73  +
or dword ptr [esi+0D0h] 400000h +
mov eax [edi+98h] +
mov [esi+78h] eax +
mov eax [edi+9Ch] +
mov [esi+7Ch] eax +
jmp loc_1002B91  +
or dword ptr [esi+0D0h] 800000h +
mov eax [edi+0A0h] +
mov [esi+80h] eax +
mov eax [edi+0A4h] +
mov [esi+84h] eax +
jmp loc_1002BB5  +
or dword ptr [esi+0D0h] offset __ImageBase +
mov eax [edi+0A8h] +
mov [esi+88h] eax +
mov eax [edi+0ACh] +
mov [esi+8Ch] eax +
jmp loc_1002BD9  +
***
cmp [esi+4] eax +
jz loc_1002D5B  +
jmp loc_1002D26  +
push eax  +
call ds:GetPriorityClass  +
mov edi eax +
test edi edi +
jz loc_100276D  +
mov [esi+40h] edi +
push [ebp+hObject]  +
call ds:CloseHandle  +
test edi edi +
jnz loc_1002DE1  +
jmp loc_1002DBC  +
mov dword ptr [esi+40h] 4000h +
jmp loc_1002DE1  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+38h] 0 +
jnz loc_100C384  +
jmp loc_100C377  +
***
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 8  +
***
pop esi  +
mov eax ebx +
pop ebx  +
***
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
test eax eax +
jnz loc_100C778  +
jmp loc_100C788  +
***
push edi  +
call ds:GhostWindowFromHungWindow  +
test eax eax +
jnz loc_10067FB  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
call ds:InternalGetWindowText  +
test eax eax +
jz loc_10067FB  +
xor eax eax +
cmp ax [ebp-20Ch] +
jz loc_10067FB  +
cmp edi hWnd +
jz loc_10067FB  +
push offset aProgramManager  +
lea eax [ebp-20Ch] +
push eax  +
call ds:StrCmpICW  +
test eax eax +
jz loc_10067FB  +
xor ecx ecx +
mov [ebp-210h] ecx +
cmp [ebp-214h] ecx +
jbe loc_10028E4  +
mov eax [esi] +
mov eax [eax+4] +
jmp loc_10028BC  +
***
mov ebx [eax] +
cmp [ebx] edi +
jz loc_10021FD  +
inc ecx  +
add eax 4 +
mov [ebp-210h] ecx +
cmp ecx [ebp-214h] +
jb loc_10028BC  +
cmp ecx [ebp-214h] +
jb loc_10067FB  +
push 30h  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_10067F4  +
push 30h  +
push 0  +
push ebx  +
call memset  +
add esp 0Ch +
test ebx ebx +
jz loc_10067FB  +
mov eax [esi+10h] +
mov eax [eax+4] +
push 0  +
mov [ebx+24h] eax +
push dword ptr [esi+0Ch]  +
lea eax [ebp-20Ch] +
push dword ptr [esi+8]  +
mov ecx ebx +
push eax  +
push edi  +
call sub_1002935  +
jmp loc_100C7B0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi ecx +
push edi  +
mov [esi+10h] eax +
mov eax [ebp+arg_C] +
xor edi edi +
mov [esi+14h] eax +
cmp [ebp+arg_10] edi +
jz loc_100C70F  +
push [ebp+lpString]  +
push dword ptr [esi+4]  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_100C70F  +
mov edi [ebp+arg_0] +
push edi  +
call ds:IsHungAppWindow  +
cmp eax [esi+8] +
jnz loc_100C75C  +
cmp [esi] edi +
jnz loc_10067D0  +
push edi  +
mov ecx esi +
call sub_10184F0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov eax [ebx+0Ch] +
mov eax [eax] +
jmp loc_1003792  +
push esi  +
call ds:RtlLeaveCriticalSection  +
jmp loc_100C34B  +
mov ecx [ebx+0Ch] +
mov ecx [ecx+4] +
mov edi [ecx+eax*4] +
mov ecx [edi] +
cmp ecx dword_101E120 +
jnz loc_100C339  +
mov ecx [edi+4] +
cmp ecx dword_101E124 +
jnz loc_100C339  +
jmp loc_1003792  +
***
or dword ptr [esi+0D0h] 100h +
mov eax [edi+68h] +
cdq   +
and edx ecx +
add eax edx +
sar eax 0Ah +
sub eax ebx +
mov [esi+34h] eax +
jmp loc_1002ABA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 254h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_14] +
push ebx  +
mov [ebp+var_22C] eax +
mov eax [ebp+arg_C] +
push esi  +
mov esi ecx +
mov ebx [esi+1Ch] +
mov edx [esi+18h] +
mov [esi] eax +
mov eax [ebp+arg_10] +
mov [esi+4] eax +
push edi  +
mov edi [ebp+arg_8] +
mov ecx [edi+30h] +
add ecx [edi+28h] +
mov eax [edi+34h] +
adc eax [edi+2Ch] +
cmp eax ebx +
jg loc_1002A4E  +
jl loc_100BE93  +
cmp ecx edx +
jb loc_100BE93  +
mov edx ecx +
mov [ebp+var_228] edx +
sub edx [esi+18h] +
mov ecx eax +
sbb ecx ebx +
mov ebx edx +
or ebx ecx +
mov [ebp+var_234] edx +
mov [ebp+var_230] ecx +
jnz loc_1002642  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
mov ecx esi +
call sub_10032E9  +
mov eax [esi+8] +
cmp eax [edi+44h] +
jnz loc_1003994  +
mov eax [esi+10h] +
cmp eax [edi+50h] +
jnz loc_100BEA1  +
mov eax [edi+68h] +
mov ebx [esi+30h] +
cdq   +
mov ecx 3FFh +
and edx ecx +
add eax edx +
sar eax 0Ah +
sub eax ebx +
cmp [esi+34h] eax +
jnz loc_10029D5  +
mov ecx [edi+64h] +
lea eax [esi+0B0h] +
shr ecx 0Ah +
cmp [eax] ecx +
jnz loc_1003925  +
mov eax [edi+68h] +
shr eax 0Ah +
cmp ebx eax +
jnz loc_100BEB3  +
jmp loc_100BEC3  +
***
mov eax [esi+3Ch] +
mov ecx [edi+60h] +
sub ecx eax +
cmp [esi+40h] ecx +
jnz loc_1002672  +
cmp eax [edi+60h] +
jnz loc_1002689  +
lea eax [edi+84h] +
mov ecx [eax] +
shr ecx 0Ah +
cmp [esi+44h] ecx +
jnz loc_1003912  +
mov eax [edi+70h] +
shr eax 0Ah +
cmp [esi+48h] eax +
jnz loc_100393C  +
mov eax [edi+78h] +
shr eax 0Ah +
mov ecx 1000h +
cmp [esi+4Ch] eax +
jnz loc_100BEF8  +
jmp loc_100BF07  +
mov eax [esi+68h] +
cmp eax [edi+88h] +
jnz loc_100269E  +
mov eax [esi+6Ch] +
cmp eax [edi+8Ch] +
jnz loc_100269E  +
mov eax [esi+70h] +
cmp eax [edi+90h] +
jnz loc_10026BF  +
mov eax [esi+74h] +
cmp eax [edi+94h] +
jnz loc_10026BF  +
mov eax [esi+78h] +
cmp eax [edi+98h] +
jnz loc_10026E0  +
mov eax [esi+7Ch] +
cmp eax [edi+9Ch] +
jnz loc_10026E0  +
mov eax [esi+80h] +
cmp eax [edi+0A0h] +
jnz loc_1002701  +
mov eax [esi+84h] +
cmp eax [edi+0A4h] +
jnz loc_1002701  +
mov eax [esi+88h] +
cmp eax [edi+0A8h] +
jnz loc_1002728  +
mov eax [esi+8Ch] +
cmp eax [edi+0ACh] +
jnz loc_1002728  +
mov eax [esi+90h] +
cmp eax [edi+0B0h] +
jnz loc_1002BF9  +
mov eax [esi+94h] +
cmp eax [edi+0B4h] +
jz loc_100BF58  +
or dword ptr [esi+0D0h] 2000000h +
mov eax [edi+0B0h] +
mov [esi+90h] eax +
mov eax [edi+0B4h] +
mov [esi+94h] eax +
jmp loc_100BF58  +
test byte ptr dword_101E458 40h +
jz loc_1002C43  +
xor edi edi +
cmp [esi+0A4h] edi +
jnz loc_100C16D  +
cmp [esi+0A8h] edi +
jz loc_100C16D  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1F8h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
push 8  +
xor eax eax +
mov ebx ecx +
pop ecx  +
push eax  +
lea edi [ebp+var_84] +
stos   +
mov edi ds:NtQuerySystemInformation +
push 2Ch  +
lea ecx [ebp+var_B0] +
push ecx  +
push eax  +
mov [ebp+var_5C] eax +
mov [ebp+var_58] eax +
mov [ebp+var_4C] eax +
mov [ebp+hObject] eax +
call edi  +
test eax eax +
jl loc_100C243  +
push esi  +
mov esi [ebp+var_A8] +
shr esi 0Ah +
imul esi [ebp+var_A4] +
push 0  +
push 148h  +
lea eax [ebp+var_1F8] +
push eax  +
push 2  +
mov [ebp+var_78] esi +
call edi  +
test eax eax +
jl loc_100C24D  +
mov eax dword_101E490 +
and dword ptr dbl_101E118+4 0 +
shr eax 0Ah +
mov ecx eax +
imul ecx [ebp+var_1CC] +
mov edi eax +
imul eax [ebp+var_184] +
imul edi [ebp+var_188] +
mov [ebp+var_6C] eax +
mov [ebp+var_74] ecx +
add eax edi +
mov ecx ebx +
mov [ebp+var_68] eax +
mov dword ptr dbl_101E118 esi +
call sub_10025A3  +
mov [ebp+var_54] eax +
test eax eax +
jge loc_100C257  +
jmp loc_100C353  +
***
push eax  +
push dword ptr [ebx+0Ch]  +
call sub_1002E26  +
test eax eax +
jnz loc_100C271  +
mov eax [esi+30h] +
add eax [esi+28h] +
mov ecx [esi+34h] +
adc ecx [esi+2Ch] +
add [ebp+var_5C] eax +
mov eax [esi+4Ch] +
adc [ebp+var_58] ecx +
add dword ptr [ebp+var_84] eax +
mov eax [esi+4] +
add [ebp+var_80] eax +
inc [ebp+dwProcessId]  +
mov eax [esi] +
add [ebp+var_50] eax +
cmp dword_101E084 0FFFFFFFFh +
jz loc_100673B  +
cmp dword ptr [esi] 0 +
jnz loc_100C25B  +
mov eax [ebp+var_5C] +
sub eax [ebp+var_4C] +
mov ecx [ebp+var_58] +
sbb ecx [ebp+hObject] +
mov [ebp+var_64] eax +
mov eax [ebp+dwProcessId] +
xor esi esi +
mov [ebp+var_60] ecx +
mov dword_101E0F0 eax +
cmp dword_101E554 esi +
jnz loc_100C2B1  +
jmp loc_100C2CC  +
push eax  +
push 0  +
push 1000h  +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
test eax eax +
jnz loc_100275D  +
mov eax [esi+40h] +
cmp eax 4 +
jle loc_100C2EC  +
cmp eax 6 +
jle loc_1002783  +
cmp eax 8 +
jg loc_1003415  +
mov dword ptr [esi+40h] 20h +
push dword ptr [esi+44h]  +
push dword ptr [ebx+0Ch]  +
call sub_1002E26  +
test eax eax +
jz loc_1003A7B  +
push 1  +
push ebx  +
push dword_101E124  +
mov ecx eax +
push dword_101E120  +
push esi  +
push [ebp+var_60]  +
push [ebp+var_64]  +
call sub_10029F9  +
mov [ebp+var_54] eax +
test eax eax +
jge loc_100C321  +
jmp loc_100C353  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
push esi  +
xor esi esi +
push edi  +
test edx edx +
jle loc_1002E52  +
mov ecx [eax+4] +
nop   +
nop   +
nop   +
nop   +
nop   +
mov eax [ecx] +
mov edi [eax+8] +
cmp edi [ebp+arg_4] +
jz loc_1002E54  +
inc esi  +
add ecx 4 +
cmp esi edx +
jl loc_1002E40  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push edx  +
push dword ptr [esi+8]  +
push edx  +
push dword ptr [edi+8]  +
call sub_1003196  +
jmp loc_1002ED0  +
cmp eax edx +
jz loc_1002EAB  +
jmp loc_1002ED0  +
xor eax eax +
jmp loc_1002ECC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [edi+9Ch] +
xor edx edx +
mov [ebp+var_4] edi +
cmp ecx edx +
jnz loc_1002EE3  +
mov eax [ebp+arg_0] +
mov esi [eax+9Ch] +
cmp esi edx +
jnz loc_1002EA1  +
mov esi eax +
mov ebx ds:lstrcmpiW +
cmp edi esi +
jz loc_1002EE7  +
mov eax dword_101E2FC +
cmp eax 1Eh +
ja loc_1002E6F  +
jmp ds:off_1003115[eax*4]  +
push dword ptr [esi+98h]  +
push dword ptr [edi+98h]  +
call ebx  +
xor edx edx +
cmp eax edx +
jz loc_1002E5A  +
cmp dword_101E300 edx +
pop edi  +
pop esi  +
pop ebx  +
jg loc_100310E  +
leave   +
retn 4  +
mov edi ecx +
jmp loc_1002E92  +
cmp ecx edx +
jz loc_1002F13  +
cmp [eax+9Ch] edx +
jz loc_1002F0B  +
push dword ptr [eax+98h]  +
mov eax [ebp+var_4] +
push dword ptr [eax+98h]  +
call ebx  +
xor edx edx +
jmp loc_1002E69  +
or eax 0FFFFFFFFh +
jmp loc_1002E69  +
xor eax eax +
inc eax  +
jmp loc_1002E69  +
movzx eax byte ptr [esi+14h] +
cdq   +
push edx  +
push eax  +
movzx eax byte ptr [edi+14h] +
cdq   +
push edx  +
push eax  +
call sub_1003196  +
jmp loc_1002ECA  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+18h]  +
push dword ptr [edi+1Ch]  +
push dword ptr [edi+18h]  +
call sub_1003196  +
jmp loc_1002ECC  +
push edx  +
push dword ptr [esi+30h]  +
push edx  +
push dword ptr [edi+30h]  +
jmp loc_1002F3C  +
mov eax [esi+34h] +
cdq   +
push edx  +
push eax  +
mov eax [edi+34h] +
jmp loc_1002F26  +
push edx  +
push dword ptr [esi+0B0h]  +
push edx  +
push dword ptr [edi+0B0h]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+38h]  +
push edx  +
push dword ptr [edi+38h]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+3Ch]  +
push edx  +
push dword ptr [edi+3Ch]  +
jmp loc_1002F3C  +
mov eax [esi+40h] +
cdq   +
push edx  +
push eax  +
mov eax [edi+40h] +
jmp loc_1002F26  +
push edx  +
push dword ptr [esi+44h]  +
push edx  +
push dword ptr [edi+44h]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+48h]  +
push edx  +
push dword ptr [edi+48h]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+4Ch]  +
push edx  +
push dword ptr [edi+4Ch]  +
jmp loc_1002F3C  +
push dword ptr [esi+50h]  +
call sub_1013233  +
push edx  +
push eax  +
push dword ptr [edi+50h]  +
call sub_1013233  +
push edx  +
push eax  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+54h]  +
push edx  +
push dword ptr [edi+54h]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+58h]  +
push edx  +
push dword ptr [edi+58h]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+8]  +
push edx  +
push dword ptr [edi+8]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+10h]  +
push edx  +
push dword ptr [edi+10h]  +
jmp loc_1002F3C  +
push dword ptr [esi+0Ch]  +
push dword ptr [edi+0Ch]  +
jmp loc_1002EC8  +
push edx  +
push dword ptr [esi+60h]  +
push edx  +
push dword ptr [edi+60h]  +
jmp loc_1002F3C  +
push edx  +
push dword ptr [esi+5Ch]  +
push edx  +
push dword ptr [edi+5Ch]  +
jmp loc_1002F3C  +
push dword ptr [esi+6Ch]  +
push dword ptr [esi+68h]  +
push dword ptr [edi+6Ch]  +
push dword ptr [edi+68h]  +
jmp loc_1002F3C  +
push dword ptr [esi+74h]  +
push dword ptr [esi+70h]  +
push dword ptr [edi+74h]  +
push dword ptr [edi+70h]  +
jmp loc_1002F3C  +
push dword ptr [esi+7Ch]  +
push dword ptr [esi+78h]  +
push dword ptr [edi+7Ch]  +
push dword ptr [edi+78h]  +
jmp loc_1002F3C  +
push dword ptr [esi+84h]  +
push dword ptr [esi+80h]  +
push dword ptr [edi+84h]  +
push dword ptr [edi+80h]  +
jmp loc_1002F3C  +
push dword ptr [esi+8Ch]  +
push dword ptr [esi+88h]  +
push dword ptr [edi+8Ch]  +
push dword ptr [edi+88h]  +
jmp loc_1002F3C  +
push dword ptr [esi+94h]  +
push dword ptr [esi+90h]  +
push dword ptr [edi+94h]  +
push dword ptr [edi+90h]  +
jmp loc_1002F3C  +
push dword ptr [esi+0BCh]  +
push dword ptr [edi+0BCh]  +
call sub_1013206  +
jmp loc_1002ECA  +
push dword ptr [esi+0C0h]  +
push dword ptr [edi+0C0h]  +
jmp loc_1002EC8  +
mov ecx [esi+0B4h] +
shl ecx 7 +
mov eax offset word_101F4B8 +
add ecx eax +
push ecx  +
mov ecx [edi+0B4h] +
shl ecx 7 +
add ecx eax +
push ecx  +
jmp loc_1002EC8  +
mov ecx [esi+0B8h] +
shl ecx 7 +
mov eax offset word_101F4B8 +
add ecx eax +
push ecx  +
mov ecx [edi+0B8h] +
jmp loc_10030DC  +
push dword ptr [esi+0C4h]  +
push dword ptr [edi+0C4h]  +
jmp loc_10030AA  +
neg eax  +
jmp locret_1002EDF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_8] +
cmp ecx [ebp+arg_C] +
ja loc_1003985  +
jb loc_10031B5  +
cmp [ebp+arg_0] eax +
jnb loc_1003979  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 10h  +
***
mov eax dword_101E084 +
cmp eax [ecx+10h] +
jz loc_10031DA  +
xor eax eax +
cmp dword_101E464 eax +
jnz sub_100561E  +
retn   +
xor eax eax +
inc eax  +
jmp locret_10031D9  +
***
mov ebx ds:GetGuiResources +
push 1  +
push eax  +
call ebx  +
mov [ebp+ReturnLength] eax +
cmp [esi+60h] eax +
jnz loc_1003C48  +
push 0  +
push [ebp+hProcess]  +
call ebx  +
mov [ebp+ReturnLength] eax +
cmp [esi+5Ch] eax +
jnz loc_100BF91  +
jmp loc_1006722  +
lea eax [ebp+var_218] +
push eax  +
push [ebp+hProcess]  +
call ds:IsWow64Process  +
jmp loc_100BFA3  +
lea ecx [ebp+hObject] +
push ecx  +
push 8  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_10032B1  +
mov ebx ds:GetTokenInformation +
lea eax [ebp+ReturnLength] +
push eax  +
push 4  +
lea eax [ebp+TokenInformation] +
push eax  +
push 17h  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_10032A5  +
cmp [ebp+TokenInformation] 0 +
jz loc_100C004  +
lea eax [ebp+ReturnLength] +
push eax  +
push 4  +
lea eax [ebp+TokenInformation] +
push eax  +
push 18h  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_10032A5  +
xor eax eax +
cmp [ebp+TokenInformation] eax +
setnz al  +
inc eax  +
inc eax  +
mov [esi+0B4h] eax +
push [ebp+hObject]  +
call ds:CloseHandle  +
push 0  +
push 4  +
lea eax [ebp+var_224] +
push eax  +
push 22h  +
push [ebp+hProcess]  +
call ds:NtQueryInformationProcess  +
jmp loc_100C013  +
***
or dword ptr [esi+0D0h] 10h +
cmp [ebp+arg_10] 0 +
mov [esi+15h] al +
jnz loc_1003341  +
mov [esi+14h] al +
jmp loc_1003341  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 3E8h  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
call sub_1001AAD  +
mov ecx edx +
mov edx eax +
or edx ecx +
jz loc_100B681  +
push ecx  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001AAD  +
push 0  +
add eax 5 +
push 0Ah  +
adc edx 0 +
push edx  +
push eax  +
call sub_1001AAD  +
movzx eax al +
cmp eax 63h +
jg loc_100B68B  +
movzx ecx byte ptr [esi+15h] +
cmp ecx eax +
jnz loc_10032CF  +
pop esi  +
pop ebp  +
retn 14h  +
***
push dword ptr [esi+0Ch]  +
mov [esi+14h] eax +
call ebx  +
push 0FFFFFFFFh  +
push dword ptr [esi+8]  +
call edi  +
jmp loc_100337A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ds:WaitForSingleObject +
push 0FFFFFFFFh  +
push dword ptr [esi+8]  +
call edi  +
mov ebx ds:SetEvent +
cmp dword ptr [esi+10h] 0 +
jnz loc_10088E9  +
push dword ptr [esi+4]  +
push offset EnumFunc  +
call ds:GetProcessWindowStation  +
jmp loc_100CA5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+lpString]  +
mov edi [ebp+arg_4] +
push dword ptr [edi+4]  +
mov ecx [edi+10h] +
call sub_100C5CC  +
test eax eax +
jnz loc_100CA0F  +
push ebx  +
push 1  +
push eax  +
push eax  +
push [ebp+lpString]  +
call ds:OpenDesktopW  +
mov ebx eax +
test ebx ebx +
jz loc_100C9FC  +
push esi  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
mov esi ds:SetThreadDesktop +
push ebx  +
mov [ebp+lpString] eax +
call esi  +
test eax eax +
jz loc_100340C  +
push edi  +
push offset fn  +
push ebx  +
call ds:EnumDesktopWindows  +
push [ebp+lpString]  +
call esi  +
jmp loc_100340C  +
pop esi  +
pop ebx  +
jmp loc_100CA0F  +
push ebx  +
call ds:CloseDesktop  +
jmp loc_1003405  +
***
cmp eax 0Ah +
jle loc_1003434  +
xor ecx ecx +
cmp eax 0Dh +
setnle cl  +
dec ecx  +
and ecx 0FFFFFF80h +
add ecx 100h +
mov [esi+40h] ecx +
jmp loc_1002DE1  +
mov dword ptr [esi+40h] 8000h +
jmp loc_1002DE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
push 3F1h  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
xor ebx ebx +
push ebx  +
push ebx  +
push 0Bh  +
push eax  +
mov [ebp-4] eax +
call esi  +
push ebx  +
push ebx  +
push 1004h  +
push dword ptr [ebp-4]  +
call esi  +
mov [ebp-10h] eax +
mov eax [edi+0Ch] +
mov eax [eax] +
mov ecx edi +
mov [ebp-14h] eax +
call sub_1002603  +
mov [ebp-1Ch] eax +
mov eax [ebp-10h] +
cmp eax ebx +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
jle loc_1003547  +
mov ecx [ebp-0Ch] +
cmp ecx [ebp-14h] +
jge loc_10021CD  +
mov eax [edi+0Ch] +
mov eax [eax+4] +
mov ecx [eax+ecx*4] +
mov [ebp-18h] ecx +
call sub_10031C1  +
test eax eax +
jz loc_100BB15  +
push 38h  +
lea eax [ebp-54h] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp-8] +
add esp 0Ch +
mov [ebp-54h] eax +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push 104Bh  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-58h] 0Dh +
call esi  +
test eax eax +
jz loc_100BB2C  +
mov eax [ebp-18h] +
cmp [ebp-38h] eax +
jz loc_100BAFE  +
mov ecx [eax+98h] +
mov [ebp-44h] ecx +
mov [ebp-38h] eax +
cmp eax [ebp-1Ch] +
jz loc_100BAF5  +
and dword ptr [ebp-4Ch] 0FFFFFFFCh +
or dword ptr [ebp-48h] 3 +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push 104Ch  +
push dword ptr [ebp-4]  +
call esi  +
push dword ptr [ebp-54h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-4]  +
call sub_10166AE  +
jmp loc_100BB12  +
***
mov eax [ebp-14h] +
cmp [ebp-0Ch] eax +
jge loc_10035BF  +
mov eax [edi+0Ch] +
mov eax [eax+4] +
mov ecx [ebp-0Ch] +
mov ecx [eax+ecx*4] +
inc dword ptr [ebp-0Ch]  +
mov [ebp-18h] ecx +
call sub_10031C1  +
test eax eax +
jz loc_1003547  +
push 38h  +
lea eax [ebp-54h] +
push ebx  +
push eax  +
call memset  +
mov ecx [ebp-8] +
mov eax [ebp-18h] +
mov dword ptr [ebp-58h] 5 +
mov [ebp-54h] ecx +
mov edx [eax+98h] +
add esp 0Ch +
mov [ebp-44h] edx +
mov [ebp-38h] eax +
cmp ecx ebx +
jz loc_1006693  +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push 104Dh  +
push dword ptr [ebp-4]  +
call esi  +
push dword ptr [ebp-54h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-4]  +
call sub_10166AE  +
jmp loc_100BB40  +
***
push ebx  +
push 1  +
push 0Bh  +
push dword ptr [ebp-4]  +
call esi  +
push dword ptr [ebp-4]  +
call ds:UpdateWindow  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+10h] ebx +
jz loc_100CAA0  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push edi  +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp-18h] +
stos   +
mov eax [esi+0Ch] +
mov [ebp-18h] eax +
mov eax dword_101E128 +
mov [ebp-10h] eax +
mov eax dword_101E12C +
mov [ebp-0Ch] eax +
lea eax [ebp-18h] +
push eax  +
push ebx  +
mov ecx esi +
mov [ebp-8] esi +
mov [ebp-14h] ebx +
call sub_10037B4  +
test eax eax +
jz loc_1003666  +
mov eax [esi+0Ch] +
mov ebx [eax] +
dec ebx  +
js loc_100365D  +
mov ecx [eax+4] +
mov ecx [ecx+ebx*4] +
mov edx [ecx+10h] +
cmp edx dword_101E128 +
jnz loc_100CAC1  +
mov edx [ecx+14h] +
cmp edx dword_101E12C +
jz loc_1003635  +
jmp loc_100CAC1  +
***
mov ecx esi +
call sub_100367A  +
xor ebx ebx +
pop edi  +
cmp [ebp-14h] ebx +
jnz loc_100CB17  +
jmp loc_100CB2B  +
***
mov edi edi +
push 1004h  +
push dword ptr [ebp-4]  +
call esi  +
mov ecx [edi+0Ch] +
mov ecx [ecx] +
mov [ebp-8] eax +
mov [ebp-10h] ecx +
test eax eax +
jle loc_1003737  +
cmp ebx [ebp-10h] +
jge loc_100372F  +
push 38h  +
lea eax [ebp-4Ch] +
push 0  +
push eax  +
call memset  +
or dword ptr [ebp-40h] 0FFFFFFFFh +
add esp 0Ch +
lea eax [ebp-50h] +
push eax  +
push 0  +
push 104Bh  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-50h] 0Fh +
mov [ebp-4Ch] ebx +
call esi  +
test eax eax +
jz loc_1006862  +
mov eax [edi+0Ch] +
mov eax [eax+4] +
mov edi [eax+ebx*4] +
cmp [ebp-30h] edi +
jnz loc_100C7F2  +
cmp dword ptr [edi+28h] 0 +
jnz loc_100C7F2  +
mov eax [ebp-8] +
mov edi [ebp-0Ch] +
inc ebx  +
cmp ebx eax +
jl loc_10036CD  +
cmp ebx eax +
jl loc_100C82C  +
cmp ebx [ebp-10h] +
jl loc_1006803  +
and dword_101F7F8 0 +
push 0  +
push 1  +
push 0Bh  +
push dword ptr [ebp-4]  +
call esi  +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 0  +
push offset loc_10025EA  +
push dword ptr [ebx+0Ch]  +
call ds:COMCTL32_338  +
jmp loc_100C365  +
add dword_101E120 1 +
mov eax [ebp+var_54] +
adc dword_101E124 0 +
jmp loc_100C371  +
test eax eax +
jnz loc_1002DA3  +
jmp loc_1002DE1  +
dec eax  +
mov [ebp+hObject] eax +
js loc_100C353  +
jmp loc_10029AA  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ds:CreateEventW +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
mov [ebp+var_4] edi +
mov dword ptr [esi+34h] 1 +
cmp [esi+38h] edi +
jz loc_100686E  +
cmp [esi+3Ch] edi +
jnz loc_1006879  +
push edi  +
push edi  +
push edi  +
push edi  +
call ebx  +
mov [esi+3Ch] eax +
jmp loc_1006879  +
***
lea ecx [ebp+ThreadId] +
push ecx  +
push edi  +
push eax  +
push offset StartAddress  +
push edi  +
push edi  +
call ds:CreateThread  +
mov [esi+40h] eax +
cmp eax edi +
jz loc_1003828  +
push dword ptr [esi+38h]  +
call ds:SetEvent  +
push 40h  +
push 0FFFFFFFFh  +
push dword ptr [esi+3Ch]  +
push edi  +
call sub_100383A  +
mov eax [esi+30h] +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov [esi+34h] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov esi 102h +
push dword ptr [ebp+14h]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp-4]  +
push edi  +
push eax  +
push dword ptr [ebp-8]  +
call ds:MsgWaitForMultipleObjects  +
mov ebx eax +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-0Ch]  +
call sub_100388C  +
test eax eax +
jnz loc_100D2F0  +
jmp loc_100D2EE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
inc edi  +
cmp esi 0FFFFFFFFh +
jnz loc_100D29F  +
jmp loc_100D295  +
***
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax dword_101F748[esi] +
lea ecx [eax+ebx+18h] +
mov eax dword ptr [ebp+eax+var_84] +
push eax  +
push offset aU  +
mov [ecx] eax +
lea eax [ebp+String] +
push 20h  +
push eax  +
call sub_100196B  +
mov ecx dword_101E554 +
mov eax [ecx] +
add esp 10h +
call dword ptr [eax+14h]  +
test eax eax +
jz loc_10038FD  +
lea ecx [ebp+String] +
push ecx  +
push dword_101F74C[esi]  +
push eax  +
call ds:GetDlgItem  +
push eax  +
call ds:SetWindowTextW  +
add esi 8 +
cmp esi 30h +
jb loc_10038AF  +
jmp loc_100C2CC  +
***
or [esi+0D0h] ebx +
mov eax [eax] +
shr eax 0Ah +
mov [esi+44h] eax +
jmp loc_1002B0F  +
or dword ptr [esi+0D0h] 80h +
mov ecx [edi+64h] +
shr ecx 0Ah +
mov [eax] ecx +
jmp loc_1002ACE  +
or dword ptr [esi+0D0h] 800h +
mov eax [edi+70h] +
shr eax 0Ah +
mov [esi+48h] eax +
jmp loc_1002B1E  +
***
mov edi edi +
push esi  +
push 0D8h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov dword ptr [esi+10h] 340h +
mov eax esi +
pop esi  +
retn   +
***
cmp ecx [ebp+arg_C] +
jb loc_100398D  +
ja loc_1003985  +
cmp [ebp+arg_0] eax +
jbe loc_100398D  +
xor eax eax +
inc eax  +
jmp loc_10031B8  +
xor eax eax +
jmp loc_10031B8  +
***
or dword ptr [esi+0D0h] 2 +
mov eax [edi+44h] +
mov [esi+8] eax +
jmp loc_1002A90  +
push dword ptr [esi+8]  +
push 0  +
push 410h  +
call ds:OpenProcess  +
mov ebx eax +
test ebx ebx +
jz loc_100C0A1  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call sub_1006597  +
test eax eax +
jz sub_1006716  +
call ds:GetProcessHeap  +
jmp loc_100C086  +
movzx ebx word ptr [edi+38h] +
and [ebp+TokenInformation] 0 +
shr ebx 1 +
inc ebx  +
cmp [ebp+var_218] 1 +
jz loc_100C0FC  +
mov eax [ebp+TokenInformation] +
add eax ebx +
add eax eax +
push eax  +
push 8  +
call ds:GetProcessHeap  +
jmp loc_100C10B  +
push dword ptr [edi+3Ch]  +
push ebx  +
push eax  +
call sub_1001A1B  +
mov edi eax +
test edi edi +
jl loc_1006734  +
cmp [ebp+var_218] 1 +
jz loc_100C122  +
jmp loc_100C146  +
push offset aNtvdm_exe  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100C234  +
jmp loc_100C180  +
***
push 0D8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100C2F8  +
mov ecx eax +
call sub_1003959  +
mov [ebp+hObject] eax +
jmp loc_100C2FC  +
push 0  +
push ebx  +
push dword_101E124  +
push dword_101E120  +
push esi  +
push [ebp+var_60]  +
push [ebp+var_64]  +
call sub_10029F9  +
lea edi [ebx+260h] +
push edi  +
mov [ebp+var_54] eax +
call ds:RtlEnterCriticalSection  +
push [ebp+hObject]  +
mov ecx [ebx+0Ch] +
call sub_1001F49  +
push edi  +
mov [ebp+var_58] eax +
call ds:RtlLeaveCriticalSection  +
jmp loc_100C309  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi+9Ch] +
push edi  +
xor edi edi +
mov [ebp+var_410] edi +
cmp eax edi +
jnz loc_100B8BE  +
mov eax [esi+8] +
cmp eax edi +
jz loc_100B95D  +
cmp eax 4 +
jz loc_100B95D  +
lea ecx [ebp+dwBytes] +
push ecx  +
push edi  +
push dword ptr [ebx+4]  +
mov [ebp+dwBytes] edi +
push dword ptr [ebx]  +
push eax  +
push edi  +
call WinStationGetProcessSid  +
test al al +
jnz loc_1003BF1  +
push [ebp+dwBytes]  +
mov edi ds:GetProcessHeap +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
jmp loc_100B914  +
mov eax [esi+9Ch] +
test eax eax +
jnz loc_100B924  +
mov eax [esi+8] +
lea ecx [ebp+dwBytes] +
push ecx  +
push [ebp+lpMem]  +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push eax  +
push 0  +
call WinStationGetProcessSid  +
test al al +
jz loc_100B937  +
push [ebp+lpMem]  +
call ds:IsValidSid  +
test eax eax +
jz loc_100B937  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_30C] +
push eax  +
push [ebp+lpMem]  +
mov [ebp+var_414] 104h +
call CachedGetUserFromSid  +
mov eax [ebp+var_414] +
lea eax [eax+eax+2] +
push eax  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
jmp loc_100B92C  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
sub ebx 8 +
jz loc_1009A82  +
sub ebx 0E4h +
jnz loc_100166B  +
jmp loc_10099C6  +
dec eax  +
jz loc_10098EB  +
sub eax 4 +
jnz loc_100166B  +
jmp loc_1009874  +
***
sub eax 2Dh +
jz loc_100BB69  +
jmp loc_100BB48  +
***
xor eax eax +
jmp loc_1001E2A  +
***
or dword ptr [esi+0D0h] 40000h +
mov [esi+60h] eax +
jmp loc_10031F9  +
***
cmp esi 201h +
jnb loc_100BC9B  +
cmp esi 111h +
jz loc_100BC88  +
cmp esi 134h +
jbe loc_1003C41  +
cmp esi 136h +
ja loc_100BC26  +
jmp loc_100BC32  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchNumber]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003D11  +
push offset dword_1003C8C  +
push [ebp+cchNumber]  +
push [ebp+arg_8]  +
call sub_1003CD4  +
push offset unk_101E4E8  +
push [ebp+cchNumber]  +
push [ebp+arg_8]  +
call sub_1003CD4  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1009584  +
jmp loc_1009580  +
***
test eax eax +
jl loc_1003D06  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1001A57  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
push 0Ah  +
push 40h  +
lea eax [ebp+Value] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call _i64tow_s  +
add esp 14h +
push [ebp+cchNumber]  +
lea eax [ebp+Value] +
push ebx  +
push 0  +
push eax  +
push 0  +
mov edi 400h +
push edi  +
call ds:GetNumberFormatW  +
xor eax eax +
mov esi offset word_101E4CC +
cmp ax word_101E4CC +
jz loc_100582D  +
push esi  +
push ebx  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jnz loc_100B724  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001679  +
leave   +
retn 10h  +
***
push 38h  +
lea eax [ebp+var_38] +
push 0  +
push eax  +
mov [ebp+var_3C] 4 +
call memset  +
add esp 0Ch +
lea eax [ebp+var_3C] +
push eax  +
push 0  +
push 104Bh  +
push ebx  +
mov [ebp+var_38] edi +
call esi  +
neg eax  +
sbb eax eax +
and eax [ebp+var_1C] +
jmp loc_100263D  +
***
mov ebx eax +
mov eax [esp+arg_0] +
mul  [esp+arg_C] +
add ebx eax +
mov eax [esp+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [esi+8] +
sub edi [ebp+arg_8] +
push 408000h  +
push 1  +
push 0  +
call ds:CreatePen  +
push eax  +
push [ebp+arg_0]  +
mov [ebp+arg_8] eax +
call ds:SelectObject  +
mov ecx [esi+0Ch] +
mov [ebp+arg_4] eax +
mov eax [esi+4] +
push 0Bh  +
pop ebx  +
sub ecx eax +
cmp ecx ebx +
jle loc_1003E8A  +
push 0  +
add eax ebx +
push eax  +
push edi  +
push [ebp+arg_0]  +
call ds:MoveToEx  +
mov eax [esi+4] +
add eax ebx +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call ds:LineTo  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
add ebx 0Ch +
sub ecx eax +
cmp ebx ecx +
jl loc_1003E5A  +
mov ebx [esi+8] +
sub ebx dword_101F6C0 +
cmp ebx edi +
jle loc_1003EB8  +
push 0  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_0]  +
call ds:MoveToEx  +
push dword ptr [esi+0Ch]  +
push ebx  +
push [ebp+arg_0]  +
call ds:LineTo  +
sub ebx 0Ch +
jmp loc_1003E93  +
cmp [ebp+arg_4] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1003ECD  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:SelectObject  +
push [ebp+arg_8]  +
call ds:DeleteObject  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+20h] 0 +
jz loc_1004005  +
push ebx  +
push edi  +
push 4  +
lea edi [esi+50h] +
call ds:GetStockObject  +
push eax  +
push edi  +
push dword ptr [esi+20h]  +
call ds:FillRect  +
mov eax [ebp+arg_0] +
mov ebx [eax+24h] +
sub ebx [eax+1Ch] +
mov ecx esi +
push ebx  +
push edi  +
push dword ptr [esi+20h]  +
call sub_1003E1B  +
lea eax [ebx-1] +
cdq   +
mov ecx 7D0h +
idiv  ecx +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1003F3A  +
mov [ebp+var_8] 2 +
mov edi [esi+5Ch] +
push dword ptr [esi+4Ch]  +
sub edi [esi+54h] +
push dword ptr [esi+20h]  +
dec edi  +
call ds:SelectObject  +
mov [ebp+var_C] eax +
mov eax lpMem +
movzx eax byte ptr [eax] +
imul eax edi +
push 0  +
push 64h  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx [esi+5Ch] +
sub ecx eax +
push ecx  +
push dword ptr [esi+58h]  +
push dword ptr [esi+20h]  +
call ds:MoveToEx  +
and [ebp+var_4] 0 +
add ebx 4 +
mov [ebp+var_10] ebx +
xor ebx ebx +
cmp ebx [ebp+var_10] +
jge loc_1003FC5  +
mov eax lpMem +
mov ecx [ebp+var_4] +
mov al [eax+ecx] +
test al al +
jz loc_1003FC5  +
movzx eax al +
imul eax edi +
push 64h  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx [esi+5Ch] +
sub ecx eax +
mov eax [esi+58h] +
push ecx  +
sub eax ebx +
push eax  +
push dword ptr [esi+20h]  +
call ds:LineTo  +
inc [ebp+var_4]  +
add ebx [ebp+var_8] +
cmp [ebp+var_4] 7D0h +
jl loc_1003F81  +
mov eax [ebp+arg_0] +
mov ecx [eax+20h] +
mov edi [eax+28h] +
mov edx [eax+1Ch] +
push 0CC0020h  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
sub edi ecx +
push edi  +
mov edi [eax+24h] +
sub edi edx +
push edi  +
push ecx  +
push edx  +
push dword ptr [eax+18h]  +
call ds:BitBlt  +
cmp [ebp+var_C] 0 +
pop edi  +
pop ebx  +
jz loc_1004005  +
push [ebp+var_C]  +
push dword ptr [esi+20h]  +
call ds:SelectObject  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push 6  +
push eax  +
xor esi esi +
call ds:GetCurrentObject  +
test eax eax +
jz loc_1004052  +
lea ecx [ebp+var_60] +
push ecx  +
push 5Ch  +
push eax  +
call ds:GetObjectW  +
test eax eax +
jz loc_1004052  +
mov eax [ebp+var_60] +
mov esi eax +
test eax eax +
jge loc_1004052  +
neg eax  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+20h] 0 +
jz loc_100410E  +
push ebx  +
push edi  +
push 4  +
lea edi [esi+50h] +
call ds:GetStockObject  +
push eax  +
push edi  +
push dword ptr [esi+20h]  +
call ds:FillRect  +
mov edi [ebp+arg_0] +
mov ebx [edi+24h] +
sub ebx [edi+1Ch] +
mov ecx 7D0h +
lea eax [ebx-1] +
cdq   +
idiv  ecx +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_100A807  +
mov [ebp+arg_0] 2 +
jmp loc_100A807  +
push ebx  +
lea eax [esi+50h] +
push eax  +
push dword ptr [esi+20h]  +
mov ecx esi +
call sub_1003E1B  +
jmp loc_100A82C  +
cmp eax 1 +
jnz loc_10040BF  +
jmp loc_100410C  +
mov edx [esi+58h] +
mov eax [edi+24h] +
mov ecx [edi+1Ch] +
push 0CC0020h  +
sub edx eax +
sub edx [esi+50h] +
push 0  +
add edx ecx +
push edx  +
push dword ptr [esi+20h]  +
mov edx [edi+20h] +
mov esi [edi+28h] +
sub esi edx +
push esi  +
sub eax ecx +
push eax  +
push edx  +
push ecx  +
push dword ptr [edi+18h]  +
call ds:BitBlt  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
push 4  +
mov [ebp+var_28] edi +
call ds:GetStockObject  +
push eax  +
push dword ptr [ebx+18h]  +
call ds:SelectObject  +
push dword ptr [ebx+28h]  +
lea esi [ebx+1Ch] +
push dword ptr [ebx+24h]  +
mov [ebp+var_3C] eax +
push dword ptr [ebx+20h]  +
push dword ptr [esi]  +
push dword ptr [ebx+18h]  +
call ds:Rectangle  +
mov eax [ebx+24h] +
sub eax [esi] +
sub eax 21h +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_34] eax +
lea eax [ebp+Rect] +
push eax  +
push 3EDh  +
push dword ptr [edi+0Ch]  +
call ds:GetDlgItem  +
push eax  +
call ds:GetWindowRect  +
jmp loc_100A996  +
***
push dword ptr [ebx+18h]  +
call sub_100400F  +
imul edi edi +
mov ecx [ebx+28h] +
sub ecx edi +
sub ecx [ebx+20h] +
sub ecx eax +
mov [ebp+var_38] ecx +
test ecx ecx +
jle loc_10042E8  +
movzx eax byte_101E080 +
imul eax ecx +
push 64h  +
cdq   +
pop edi  +
idiv  edi +
test byte ptr dword_101E458 8 +
mov [ebp+var_18] eax +
jnz loc_100A9BF  +
and [ebp+var_30] 0 +
mov eax ecx +
sub eax [ebp+var_18] +
push 3  +
cdq   +
pop edi  +
idiv  edi +
push 1  +
push dword ptr [ebx+18h]  +
imul eax eax +
sub ecx eax +
mov [ebp+var_2C] ecx +
call ds:SetBkMode  +
push 0FF00h  +
push dword ptr [ebx+18h]  +
call ds:SetTextColor  +
movzx eax byte_101E080 +
push eax  +
push offset aD  +
lea eax [ebp+String] +
push 8  +
push eax  +
call sub_100196B  +
lea edi [ebp+var_4C] +
movs   +
add esp 10h +
movs   +
push 29h  +
lea eax [ebp+var_4C] +
push eax  +
movs   +
push 0FFFFFFFFh  +
lea eax [ebp+String] +
push eax  +
push dword ptr [ebx+18h]  +
movs   +
sub [ebp+var_40] 4 +
call ds:DrawTextW  +
push dword ptr [ebx+18h]  +
call ds:CreateCompatibleDC  +
mov [ebp+var_1C] eax +
test eax eax +
jz loc_10042DC  +
jmp loc_100A9D4  +
***
mov ecx [ebp+var_28] +
push dword ptr [ecx+14h]  +
sub esi [ebp+var_2C] +
and [ebp+var_24] 0 +
push eax  +
call ds:SelectObject  +
mov [ebp+var_18] eax +
test esi esi +
jg loc_1004530  +
cmp [ebp+var_18] 0 +
jz loc_1004291  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
call ds:SelectObject  +
cmp [ebp+var_2C] 0 +
jz loc_10042C9  +
mov eax [ebp+var_28] +
push dword ptr [eax+1Ch]  +
push [ebp+var_1C]  +
call ds:SelectObject  +
mov esi [ebp+var_2C] +
and [ebp+var_24] 0 +
sub esi [ebp+var_30] +
mov [ebp+var_20] eax +
test esi esi +
jg loc_10042F9  +
cmp [ebp+var_20] 0 +
jz loc_10042C9  +
push [ebp+var_20]  +
push [ebp+var_1C]  +
call ds:SelectObject  +
cmp [ebp+var_30] 0 +
jnz loc_100AA4D  +
push [ebp+var_1C]  +
call ds:DeleteDC  +
push [ebp+var_3C]  +
push dword ptr [ebx+18h]  +
call ds:SelectObject  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov [ebp+var_18] eax +
jle loc_100AA1C  +
jmp loc_100AA1F  +
sub eax [ebp+var_2C] +
push 0CC0020h  +
add eax [ebp+var_24] +
push 0  +
add eax [ebp+var_38] +
push 0  +
push [ebp+var_1C]  +
push [ebp+var_18]  +
push 21h  +
push eax  +
push [ebp+var_34]  +
push dword ptr [ebx+18h]  +
call edi  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov ecx esi +
jge loc_100AA46  +
add [ebp+var_24] ecx +
cmp esi eax +
jge loc_1004345  +
mov eax esi +
sub esi eax +
jmp loc_10042B3  +
***
push dword ptr [ebx+18h]  +
call sub_100400F  +
imul esi esi +
mov edi [ebx+28h] +
sub edi esi +
sub edi [ebx+20h] +
sub edi eax +
mov [ebp+var_50] edi +
test edi edi +
jle loc_10043CA  +
push dword ptr dbl_101E110+4  +
mov eax edi +
push dword ptr dbl_101E110  +
cdq   +
push edx  +
push eax  +
call sub_1002233  +
push dword ptr dbl_101E118+4  +
push dword ptr dbl_101E118  +
push edx  +
push eax  +
call sub_1001AAD  +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
imul esi esi +
mov [ebp+var_54] esi +
cmp edi esi +
jnz loc_100A101  +
jmp loc_10044D5  +
mov eax esi +
sub esi eax +
test esi esi +
jg loc_100A192  +
cmp [ebp+var_50] 0 +
jz loc_10043CA  +
push [ebp+var_50]  +
push [ebp+var_48]  +
call ds:SelectObject  +
push [ebp+var_48]  +
call ds:DeleteDC  +
jmp loc_10044A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 4  +
mov [ebp+var_58] ecx +
call ds:GetStockObject  +
push eax  +
push dword ptr [ebx+18h]  +
call ds:SelectObject  +
push dword ptr [ebx+28h]  +
lea esi [ebx+1Ch] +
push dword ptr [ebx+24h]  +
mov [ebp+var_64] eax +
push dword ptr [ebx+20h]  +
push dword ptr [esi]  +
push dword ptr [ebx+18h]  +
call ds:Rectangle  +
mov eax [ebx+24h] +
sub eax [esi] +
push 1  +
push dword ptr [ebx+18h]  +
sub eax 21h +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_5C] eax +
call ds:SetBkMode  +
push 0FF00h  +
push dword ptr [ebx+18h]  +
call ds:SetTextColor  +
push 20h  +
lea eax [ebp+String] +
push eax  +
push 0  +
push 400h  +
push dword ptr dbl_101E110+4  +
push dword ptr dbl_101E110  +
call sub_1002233  +
push edx  +
push eax  +
call ds:StrFormatByteSizeW  +
lea edi [ebp+Rect] +
movs   +
movs   +
movs   +
push 4  +
movs   +
pop esi  +
sub [ebp+Rect.bottom] esi +
push 29h  +
lea eax [ebp+Rect] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+String] +
push eax  +
push dword ptr [ebx+18h]  +
call ds:DrawTextW  +
push dword ptr [ebx+18h]  +
call ds:CreateCompatibleDC  +
mov [ebp+var_48] eax +
test eax eax +
jnz loc_100A0DD  +
push [ebp+var_64]  +
push dword ptr [ebx+18h]  +
call ds:SelectObject  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
push 4Bh  +
pop eax  +
cmp esi eax +
mov ecx esi +
jge loc_100A1E9  +
jmp loc_10044E2  +
test esi esi +
jnz loc_100A172  +
jmp loc_10043CA  +
add [ebp+var_4C] ecx +
cmp esi eax +
jge loc_10043AE  +
jmp loc_10043AC  +
add edi ecx +
cmp esi eax +
jge loc_10044FA  +
mov eax esi +
sub esi eax +
test esi esi +
jg loc_100451A  +
cmp [ebp+var_60] 0 +
jz loc_1004512  +
push [ebp+var_60]  +
push [ebp+var_48]  +
call ds:SelectObject  +
mov esi [ebp+var_54] +
mov edi [ebp+var_50] +
jmp loc_10044D5  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov [ebp+var_4C] esi +
jl loc_100A11F  +
mov [ebp+var_4C] eax +
jmp loc_100A11F  +
***
push 4Bh  +
pop eax  +
cmp esi eax +
mov [ebp+var_20] esi +
jge loc_100A9EB  +
jmp loc_100A9EE  +
mov ecx [ebp+var_24] +
push 0CC0020h  +
push 0  +
push 0  +
push [ebp+var_1C]  +
add eax ecx +
push [ebp+var_20]  +
push 21h  +
push eax  +
push [ebp+var_34]  +
push dword ptr [ebx+18h]  +
call edi  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov ecx esi +
jge loc_100AA15  +
add [ebp+var_24] ecx +
cmp esi eax +
jge loc_1004578  +
mov eax esi +
sub esi eax +
jmp loc_1004277  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
push dword ptr [ebp+14h]  +
mov edi [ebp+10h] +
mov esi [ebp+0Ch] +
push edi  +
push esi  +
mov [ebp+8] eax +
call sub_1001A01  +
cmp eax 1 +
jnz loc_100D0D6  +
jmp loc_100D0CE  +
***
cmp esi 11Fh +
jz loc_100D1AB  +
cmp esi 134h +
jbe loc_10045F1  +
cmp esi 136h +
jbe loc_1008597  +
cmp esi 138h +
jz loc_1008597  +
cmp esi 200h +
ja loc_100D157  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+0Ch] +
cmp esi 1 +
jnz loc_10091AF  +
push 0FFFFFFF0h  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
or eax 4000000h +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+8]  +
push dword_101E0E0  +
call ds:CallWindowProcW  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
mov [ebp-0D4h] edi +
call ds:GetWindowLongW  +
mov ecx eax +
mov eax [ebp+0Ch] +
mov edx 111h +
mov [ebp-0D0h] ecx +
cmp eax edx +
ja loc_100C4D2  +
jz loc_10077AE  +
mov edx eax +
sub edx 5 +
jz loc_10077A4  +
sub edx 49h +
jnz loc_1005216  +
cmp dword ptr [esi+8] 0FFFFFF94h +
jz loc_100C43A  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 10h  +
***
cmp esi 111h +
jz loc_100B577  +
cmp esi 115h +
jz loc_100B569  +
cmp esi 134h +
jbe loc_100475F  +
jmp loc_100B50E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetWindowLongW +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call edi  +
push dword ptr [ebp+14h]  +
mov ebx [ebp+10h] +
mov esi [ebp+0Ch] +
push ebx  +
push esi  +
mov [ebp-4] eax +
call sub_1001A01  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_100B4A7  +
mov eax 110h +
cmp esi eax +
ja loc_100B4F9  +
jz loc_100798A  +
dec esi  +
dec esi  +
jnz loc_100B4AE  +
push 0A28h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
mov ecx [ebp-4] +
push eax  +
call sub_1008896  +
xor eax eax +
jmp loc_100B5FB  +
***
mov eax 9C4h +
cmp ebx eax +
jnb loc_100B4BC  +
jmp loc_100475F  +
***
cmp eax 138h +
jz loc_100C544  +
cmp eax 200h +
jbe loc_10046BC  +
jmp loc_100C4EA  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_10047B9  +
mov eax [esi+28h] +
test eax eax +
jz loc_10047B0  +
push eax  +
push ecx  +
call ds:SelectObject  +
push dword ptr [esi+20h]  +
call ds:DeleteDC  +
mov esi [esi+24h] +
test esi esi +
jz loc_10047C7  +
push esi  +
call ds:DeleteObject  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10047EF  +
mov esi [esi+4] +
test esi esi +
jz loc_10047E8  +
push 0  +
push esi  +
call ds:ShowWindow  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push edi  +
mov [ebp+var_4] ecx +
xor ebx ebx +
push 0Ah  +
xor eax eax +
cmp dword_101E178 0FFFFFFFFh +
pop ecx  +
lea edi [ebp+var_2C] +
mov [ebp+lParam] ebx +
stos   +
jz loc_100485D  +
push esi  +
xor esi esi +
lea eax [ebp+lParam] +
push eax  +
mov eax [ebp+var_4] +
push ebx  +
push 105Fh  +
push 3F1h  +
push dword ptr [eax+4]  +
mov [ebp+lParam] 2 +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
test eax eax +
jz loc_100484D  +
mov eax [ebp+var_28] +
mov dword_101E1F8[esi] eax +
inc ebx  +
mov esi ebx +
shl esi 2 +
cmp dword_101E178[esi] 0FFFFFFFFh +
jnz loc_1004817  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push 104h  +
lea eax [ebp+String] +
push eax  +
push 2713h  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+String] +
push eax  +
push hWnd  +
call ds:SetWindowTextW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001679  +
leave   +
retn   +
***
sub ebx 3 +
jz loc_1009C32  +
dec ebx  +
jnz loc_100166B  +
jmp loc_1009C18  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101E158 +
sub esp 10h +
test eax eax +
jl locret_10049C5  +
cmp eax dword_101E0D8 +
jge locret_10049C5  +
mov eax dword_101E548[eax*4] +
mov edx [eax] +
push ebx  +
push esi  +
mov ecx eax +
call dword ptr [edx+14h]  +
push 0FFFFFFF0h  +
push hWnd  +
mov ebx eax +
call ds:GetWindowLongW  +
mov esi eax +
call sub_1004866  +
test byte ptr dword_101E458 10h +
jnz loc_100922A  +
or esi 0CF0000h +
push esi  +
push 0FFFFFFF0h  +
push hWnd  +
call ds:SetWindowLongW  +
mov eax hMenu +
test eax eax +
jz loc_1004956  +
push eax  +
push hWnd  +
call ds:SetMenu  +
call sub_10049CE  +
test ebx ebx +
jz loc_10049B6  +
push 3E8h  +
push [ebp+hWndTo]  +
call ds:GetDlgItem  +
mov esi eax +
lea eax [ebp+X] +
push eax  +
push esi  +
call ds:GetClientRect  +
push 2  +
lea eax [ebp+X] +
push eax  +
push [ebp+hWndTo]  +
push esi  +
call ds:MapWindowPoints  +
lea eax [ebp+X] +
push eax  +
push 0  +
push 1328h  +
push esi  +
call ds:SendMessageW  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push 14h  +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-0Ch]  +
push [ebp+X]  +
push 0  +
push ebx  +
call ds:SetWindowPos  +
cmp dword_101E158 4 +
pop esi  +
pop ebx  +
jz loc_1009281  +
leave   +
retn 4  +
***
mov edi edi +
push edi  +
push hWnd  +
call ds:GetMenu  +
mov edi eax +
test edi edi +
jz loc_1004B42  +
mov eax dword_101E140 +
push ebx  +
push esi  +
mov esi ds:CheckMenuRadioItem +
push 0  +
add eax 0EA60h +
push eax  +
push 0EAA3h  +
push 0EA60h  +
push edi  +
call esi  +
mov eax dword_101E144 +
push 0  +
add eax 9C56h +
push eax  +
push 9C59h  +
push 9C56h  +
push edi  +
call esi  +
mov eax dword_101E458 +
mov esi ds:CheckMenuItem +
and eax 4 +
add eax eax +
push eax  +
push 9C46h  +
push edi  +
call esi  +
mov eax dword_101E458 +
and eax 1 +
shl eax 3 +
push eax  +
push 9C47h  +
push edi  +
call esi  +
mov eax dword_101E458 +
push 8  +
pop ebx  +
and eax ebx +
push eax  +
push 9C78h  +
push edi  +
call esi  +
mov eax dword_101E458 +
and eax 10h +
shr eax 1 +
push eax  +
push 9CA3h  +
push edi  +
call esi  +
mov eax dword_101E458 +
and eax 20h +
shr eax 2 +
push eax  +
push 9C81h  +
push edi  +
call esi  +
mov eax dword_101E458 +
and eax 40h +
shr eax 3 +
push eax  +
push 9CA2h  +
push edi  +
call esi  +
mov eax dword_101E458 +
and eax 80h +
shr eax 4 +
push eax  +
push 0C94h  +
push edi  +
call esi  +
mov eax dword_101E170 +
neg eax  +
sbb eax eax +
and eax ebx +
push eax  +
push 968h  +
push edi  +
call esi  +
mov eax dword_101E15C +
neg eax  +
sbb eax eax +
and eax ebx +
push eax  +
push 967h  +
push edi  +
call esi  +
mov eax dword_101E160 +
neg eax  +
sbb eax eax +
and eax ebx +
push eax  +
push 961h  +
push edi  +
call esi  +
mov eax dword_101E164 +
neg eax  +
sbb eax eax +
and eax ebx +
push eax  +
push 962h  +
push edi  +
call esi  +
mov eax dword_101E168 +
neg eax  +
sbb eax eax +
and eax ebx +
push eax  +
push 963h  +
push edi  +
call esi  +
mov eax dword_101E16C +
neg eax  +
sbb eax eax +
and eax ebx +
push eax  +
push 965h  +
push edi  +
call esi  +
mov eax dword_101E174 +
neg eax  +
sbb eax eax +
and eax ebx +
push eax  +
push 96Ah  +
push edi  +
call esi  +
pop esi  +
pop ebx  +
pop edi  +
retn   +
***
cmp [ebp+wParam] 3E8h +
jnz loc_1009996  +
push [ebp+lParam]  +
call sub_1004DCA  +
jmp loc_100166D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
call ds:GetDC  +
mov edi eax +
push edi  +
call ds:CreateCompatibleDC  +
mov [esi+20h] eax +
test eax eax +
jz loc_100A24D  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
and dword ptr [esi+50h] 0 +
and dword ptr [esi+54h] 0 +
push ecx  +
push eax  +
push edi  +
mov [esi+58h] eax +
mov [esi+5Ch] ecx +
call ds:CreateCompatibleBitmap  +
push edi  +
push dword ptr [esi+0Ch]  +
mov [esi+24h] eax +
call ds:ReleaseDC  +
mov eax [esi+24h] +
test eax eax +
jz loc_100A261  +
push eax  +
push dword ptr [esi+20h]  +
call ds:SelectObject  +
mov [esi+28h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
test byte ptr dword_101E458 10h +
lea eax [ebp+lParam] +
mov [ebp+var_8] esi +
push eax  +
jnz loc_100A27C  +
push dword ptr [esi+10h]  +
call ds:GetClientRect  +
push 2  +
lea eax [ebp+lParam] +
push eax  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+10h]  +
call ds:MapWindowPoints  +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1328h  +
push dword ptr [esi+10h]  +
call ds:SendMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov ecx esi +
call sub_100F614  +
jmp loc_1004CC9  +
push [ebp+hWinPosInfo]  +
call ds:EndDeferWindowPos  +
jmp loc_100A7ED  +
test eax eax +
jge loc_1004CF5  +
jmp loc_1004D0D  +
push eax  +
call ds:GetClientRect  +
mov ecx esi +
call sub_1004795  +
mov eax [ebp+var_28] +
sub eax [ebp+Points.y] +
mov ecx esi +
push eax  +
mov eax [ebp+var_2C] +
sub eax [ebp+Points.x] +
push eax  +
call sub_1004BE5  +
pop ebx  +
jmp loc_1004D0D  +
mov eax [ebp+var_10] +
add eax 22h +
push eax  +
call ds:BeginDeferWindowPos  +
mov [ebp+hWinPosInfo] eax +
cmp eax edi +
jnz loc_100A28D  +
pop edi  +
pop esi  +
leave   +
retn   +
***
add [ebp+var_14] 4 +
cmp [ebp+var_14] 6Ch +
jb loc_100A2D5  +
mov ecx [ebp+var_8] +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+Points] +
push eax  +
push 408h  +
call sub_100EF56  +
jmp loc_100A30B  +
mov eax [ebp+var_5C] +
sub eax [ebp+var_64] +
push 16h  +
push ebx  +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov ecx [ebp+var_8] +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+Points] +
push eax  +
push 3ECh  +
call sub_100EF56  +
jmp loc_100A421  +
***
push 0  +
push 0  +
push 130Bh  +
push ecx  +
call ds:SendMessageW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1004DDF  +
mov eax dword_101E158 +
cmp eax 0FFFFFFFFh +
jz loc_1004D99  +
mov eax dword_101E548[eax*4] +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+8]  +
lea esi dword_101E548[edi*4] +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
jl loc_1009291  +
push hWnd  +
mov dword_101E158 edi +
call sub_10048D1  +
xor eax eax +
inc eax  +
jmp loc_1004DE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 0FFFFFDD9h +
mov ecx [eax] +
push esi  +
push edi  +
jz loc_1004D6A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
xor ebx ebx +
push ebx  +
lea eax [ebp+uID] +
push eax  +
lea eax [ebp+var_420] +
push eax  +
lea eax [ebp+var_41C] +
push eax  +
push ebx  +
mov edi ecx +
call sub_100F614  +
jmp loc_100A887  +
***
mov eax [ebp+uID] +
add eax 1388h +
push eax  +
push dword ptr [edi+0Ch]  +
call esi  +
xor ecx ecx +
cmp eax ecx +
jnz loc_1004E78  +
mov eax [ebp+uID] +
push ecx  +
push ecx  +
add eax 1388h +
push eax  +
push dword ptr [edi+0Ch]  +
push 1  +
push 1  +
push ecx  +
push ecx  +
push 4800000Bh  +
push offset WindowName  +
push offset ClassName  +
push 200h  +
call ds:CreateWindowExW  +
test eax eax +
jz loc_100A965  +
mov ecx [ebp+uID] +
test ecx ecx +
jnz loc_100A956  +
jmp loc_100A965  +
and [ebp+uID] 0 +
mov eax dword_101E458 +
and al 10h +
movsx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 5 +
push eax  +
mov eax [ebp+uID] +
push ds:dword_1004B48[eax]  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ebx  +
add [ebp+uID] 4 +
cmp [ebp+uID] 6Ch +
jb loc_1004E92  +
mov eax dword_101E458 +
and al 10h +
movsx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 5 +
push eax  +
push 3EEh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ebx  +
mov eax dword_101E458 +
and al 10h +
movsx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 5 +
push eax  +
push 3EAh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ebx  +
mov eax dword_101E458 +
and al 10h +
movsx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 5 +
push eax  +
push 428h  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ebx  +
mov eax dword_101E458 +
and al 10h +
movsx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 5 +
push eax  +
push 3EDh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ebx  +
jmp loc_100A97F  +
mov ecx edi +
call sub_1004C5A  +
jmp loc_100A985  +
leave   +
retn   +
***
push edi  +
lea eax [ebp-42Ch] +
push eax  +
push dword ptr [esi+10h]  +
call ds:GetClientRect  +
push 2  +
lea eax [ebp-42Ch] +
push eax  +
push hWnd  +
push dword ptr [esi+10h]  +
call ds:MapWindowPoints  +
lea eax [ebp-42Ch] +
push eax  +
push ebx  +
push 1328h  +
push dword ptr [esi+10h]  +
call ds:SendMessageW  +
jmp loc_100AFF7  +
***
mov eax [ebp-420h] +
sub eax [ebp-428h] +
push ebx  +
push eax  +
mov eax [ebp-424h] +
sub eax [ebp-42Ch] +
push eax  +
push dword ptr [ebp-428h]  +
push dword ptr [ebp-42Ch]  +
push ebx  +
push dword ptr [esi+0Ch]  +
call ds:SetWindowPos  +
push 5  +
push dword ptr [esi+0Ch]  +
call ds:ShowWindow  +
mov ecx esi +
call sub_1004DEC  +
push hWnd  +
call ds:GetMenu  +
push 78h  +
push hInstance  +
mov [ebp-41Ch] eax +
call ds:LoadMenuW  +
mov edi ds:DeleteMenu +
mov [ebp-418h] eax +
cmp eax ebx +
jnz loc_100B009  +
jmp loc_100B026  +
***
push eax  +
push hWnd  +
call ds:SetMenu  +
cmp [ebp-41Ch] ebx +
jz loc_100B043  +
push dword ptr [ebp-41Ch]  +
call ds:DestroyMenu  +
jmp loc_100B043  +
***
push dword ptr [esi+10h]  +
call ds:SetFocus  +
jmp loc_100B16D  +
***
leave   +
retn   +
***
dec eax  +
jz loc_10088F7  +
dec eax  +
jnz loc_10018E4  +
push edi  +
lea eax [ebp+var_3C0] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
inc eax  +
add esp 0Ch +
mov [ebp+var_2A8] eax +
mov [ebp+var_2A4] eax +
mov eax hWnd +
push 80h  +
mov [ebp+var_3BC] eax +
lea eax [ebp+Buffer] +
push eax  +
push 2713h  +
push hInstance  +
mov [ebp+var_3C0] edi +
mov [ebp+var_3B4] 0Fh +
mov [ebp+var_3B0] 40Ah +
call ds:LoadStringW  +
jmp loc_100CB47  +
***
jz loc_100857D  +
cmp esi 5 +
jz loc_100D13F  +
cmp esi 15h +
jz loc_100D125  +
cmp esi 1Ah +
jz loc_100D119  +
cmp esi 4Eh +
jnz loc_100D0E5  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
call sub_1005118  +
jmp loc_10045F3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
push edi  +
mov edi ecx +
cmp eax 0FFFFFF4Fh +
jz loc_100CEEC  +
cmp eax 0FFFFFF94h +
jz sub_100CE2A  +
cmp eax 0FFFFFF9Bh +
jz loc_10059CB  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
leave   +
retn 4  +
***
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
call sub_100B400  +
jmp loc_100475F  +
***
sub edx 2Dh +
jz loc_1007796  +
sub edx 28h +
jnz loc_1007782  +
jmp loc_100C510  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+hWnd] +
mov eax [esi+8] +
push edi  +
mov edi ecx +
cmp eax 0FFFFFF4Fh +
jz loc_100830D  +
cmp eax 0FFFFFF94h +
jz loc_100C920  +
cmp eax 0FFFFFF9Bh +
jz loc_10082C2  +
cmp eax 0FFFFFFFDh +
jz loc_100C8EC  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp eax esi +
jz loc_1009EA5  +
push offset unk_101E474  +
push offset dword_101E46C  +
push offset dword_101E468  +
call sub_100629D  +
cmp dword_101E468 ebx +
jz loc_10052A8  +
push offset dword_101E478  +
call ds:GetCurrentProcessId  +
push eax  +
call ds:ProcessIdToSessionId  +
lea eax [ebp-3A8h] +
push eax  +
push 20019h  +
push ebx  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1009E12  +
call ds:InitCommonControls  +
call sub_1008410  +
jmp loc_1009F29  +
***
cmp cx bx +
jnz loc_1006DAF  +
movzx ecx word ptr [eax] +
cmp cx bx +
jnz loc_100D4A7  +
test byte ptr [ebp-40h] 1 +
jz loc_1006DBD  +
movzx ecx word ptr [ebp-3Ch] +
push ecx  +
push eax  +
push ebx  +
push offset __ImageBase  +
call sub_1009D45  +
mov dword_101F824 eax +
cmp dword_101F7FC ebx +
jnz loc_100D4EB  +
push eax  +
call ds:exit  +
***
mov edi [ebp+hDC] +
push [ebp+var_214]  +
lea edi dword_101E548[edi*4] +
mov ecx [edi] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jl sub_1009786  +
mov ecx [edi] +
mov eax [ecx] +
mov edi 104h +
push edi  +
lea edx [ebp+var_20C] +
push edx  +
call dword ptr [eax+10h]  +
lea eax [ebp+var_20C] +
mov [ebp+var_258] eax +
lea eax [ebp+var_264] +
push eax  +
push [ebp+hDC]  +
mov [ebp+var_264] 1 +
push 133Eh  +
push [ebp+var_214]  +
mov [ebp+var_260] ebx +
mov [ebp+var_25C] ebx +
mov [ebp+var_254] edi +
mov [ebp+var_250] ebx +
mov [ebp+var_24C] ebx +
call esi  +
inc [ebp+hDC]  +
mov eax [ebp+hDC] +
cmp eax dword_101E0D8 +
jl loc_100539C  +
call sub_10049CE  +
mov eax dword_101E158 +
cmp eax ebx +
jl loc_1007FC3  +
mov ecx dword_101E0D8 +
cmp eax ecx +
jl loc_1009799  +
jmp loc_1007FC3  +
***
call sub_100603D  +
call sub_10064AC  +
test al al +
jz loc_10081FD  +
push ebx  +
push offset DialogFunc  +
push ebx  +
push 69h  +
push dword ptr [ebp-3B4h]  +
call ds:CreateDialogParamW  +
mov hWnd eax +
cmp eax ebx +
jnz sub_100A07A  +
jmp loc_10081FD  +
***
mov eax [ebp+lpMem] +
mov ecx eax +
mov eax dword_101E560[eax*4] +
mov [ebp+var_3AC] eax +
lea eax [ebp+var_3C0] +
push eax  +
not ecx  +
push ebx  +
mov [ebp+var_3B8] ecx +
call esi  +
inc [ebp+lpMem]  +
mov eax [ebp+lpMem] +
cmp eax dword_101F6BC +
jb loc_1005495  +
mov eax dword_101E560 +
mov [ebp+var_3AC] eax +
lea eax [ebp+var_3C0] +
push eax  +
mov [ebp+var_3B4] 7 +
mov [ebp+var_3B8] ebx +
push ebx  +
jmp loc_10018E2  +
***
lea ecx [ebp-20Ch] +
push ecx  +
push esi  +
push eax  +
call sub_1001A1B  +
inc ebx  +
cmp ebx 4 +
jl loc_1007CD5  +
cmp dword ptr [ebp-210h] 0 +
jl loc_1007CC5  +
push edi  +
push offset loc_1004584  +
push hWnd  +
push 0BB8h  +
push hInstance  +
call ds:CreateDialogParamW  +
mov [edi+4] eax +
test eax eax +
jz loc_100D275  +
cmp dword ptr [ebp-210h] 0 +
jl loc_1007CC5  +
mov ecx edi +
call sub_1006A47  +
mov [ebp-210h] eax +
test eax eax +
jl loc_1007CC5  +
mov ecx [ebp-4] +
mov eax [ebp-210h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
push ecx  +
push edx  +
push eax  +
push offset WTSAPI32_dll_import_table  +
call sub_1006CDE  +
pop edx  +
pop ecx  +
jmp eax  +
***
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_100D41E  +
jmp loc_100D42F  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:GetDlgItem +
push edi  +
push 3F0h  +
push [ebp+hDlg]  +
call esi  +
push 7F8h  +
push [ebp+hDlg]  +
mov ebx eax +
call esi  +
cmp dword_101E468 0 +
mov edi eax +
jz loc_100B711  +
call sub_100561E  +
test eax eax +
jnz loc_100B703  +
push ebx  +
mov esi edi +
call ds:DestroyWindow  +
push 1  +
push 0  +
push 160Ch  +
push edi  +
call ds:SendMessageW  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
test byte ptr dword_101F800 1 +
jnz loc_100563F  +
or dword_101F800 1 +
push 220h  +
push 0  +
call ShellExecuteA  +
mov dword_101E0F4 eax +
mov eax dword_101E0F4 +
retn   +
***
push 22Ch  +
push hWnd  +
call esi  +
xor eax eax +
inc eax  +
***
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
cmp dword_101F804 0 +
jz loc_100160B  +
push [ebp+hWnd]  +
call ds:IsIconic  +
test eax eax +
jnz loc_100160B  +
push [ebp+hWnd]  +
call ds:IsZoomed  +
test eax eax +
jnz loc_100160B  +
push offset X  +
push [ebp+hWnd]  +
call edi  +
jmp loc_100160B  +
test dword_101E458 10h +
jnz loc_100166B  +
mov ecx dword_101E0B8 +
mov eax [ebp+lParam] +
mov [eax+18h] ecx +
mov ecx dword_101E0BC +
mov [eax+1Ch] ecx +
jmp loc_100166B  +
xor eax eax +
inc eax  +
jmp loc_100166D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push edi  +
lea eax [ebp+Rect] +
mov edi ecx +
push eax  +
push dword ptr [edi+4]  +
call ds:GetClientRect  +
push 3  +
call ds:BeginDeferWindowPos  +
mov [ebp+hWinPosInfo] eax +
test eax eax +
jz loc_100582A  +
push ebx  +
push esi  +
push 3F2h  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push dword ptr [edi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov eax dword_101E0C0 +
mov ebx [ebp+Rect.right] +
mov esi [ebp+Rect.bottom] +
mov ecx [ebp+Points.y] +
push 15h  +
add eax eax +
sub ebx eax +
sub ebx [ebp+var_10] +
sub esi eax +
sub esi [ebp+var_C] +
xor eax eax +
push eax  +
push eax  +
add ecx esi +
push ecx  +
mov ecx [ebp+Points.x] +
add ecx ebx +
push ecx  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
push dword ptr [edi+4]  +
call sub_10055B7  +
mov [ebp+hWnd] eax +
test eax eax +
jz loc_10057C8  +
lea ecx [ebp+x] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+x] +
push eax  +
push dword ptr [edi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov ecx [ebp+var_24] +
push 15h  +
xor eax eax +
push eax  +
push eax  +
add ecx esi +
push ecx  +
push [ebp+x]  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
push 3F1h  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
lea ecx [ebp+var_38] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+var_38] +
push eax  +
push dword ptr [edi+4]  +
xor edi edi +
push edi  +
call ds:MapWindowPoints  +
mov eax [ebp+Points.y] +
sub eax dword_101E0C0 +
push 16h  +
sub eax [ebp+var_34] +
add eax esi +
push eax  +
mov eax [ebp+var_10] +
sub eax [ebp+var_38] +
add eax ebx +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
push [ebp+hWinPosInfo]  +
call ds:EndDeferWindowPos  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
push 4  +
push esi  +
push 0Eh  +
push edi  +
call ds:GetLocaleInfoW  +
jmp loc_1003D74  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0BB9h  +
push hInstance  +
call ds:LoadStringW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
push 0BBAh  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
xor ebx ebx +
push ebx  +
push ebx  +
push 1032h  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
mov [ebp+var_14] eax +
cmp eax ebx +
jz loc_1005923  +
push 4  +
call ds:COMCTL32_328  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1005923  +
or [ebp+wParam] 0FFFFFFFFh +
cmp [ebp+var_14] ebx +
push edi  +
mov [ebp+var_4] ebx +
jle loc_100591B  +
push 2  +
push [ebp+wParam]  +
push 100Ch  +
push [ebp+hWnd]  +
call esi  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1005927  +
push 38h  +
lea eax [ebp+var_4C] +
push ebx  +
push eax  +
mov [ebp+wParam] edi +
mov [ebp+lParam] 4 +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 104Bh  +
push [ebp+hWnd]  +
mov [ebp+var_4C] edi +
call esi  +
test eax eax +
jz loc_1005927  +
push [ebp+var_30]  +
mov ecx [ebp+var_8] +
call sub_1001F49  +
test eax eax +
jz loc_1005927  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_14] +
jl loc_10058BC  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
xor eax eax +
jmp loc_100591F  +
push [ebp+var_8]  +
call ds:COMCTL32_329  +
jmp loc_100CDE7  +
***
push 15h  +
lea eax [esi+8] +
push eax  +
call sub_1001A1B  +
push dword ptr [ebp-0Ch]  +
call WTSFreeMemory  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp-4] +
push 7  +
mov [ebp-0Ch] ebx +
push dword ptr [edi+eax]  +
push ebx  +
call WTSQuerySessionInformationW  +
test eax eax +
jz loc_1001D39  +
cmp [ebp-18h] ebx +
jz loc_1001D39  +
push dword ptr [ebp-18h]  +
lea eax [esi+32h] +
push 12h  +
push eax  +
call sub_1001A1B  +
push dword ptr [ebp-18h]  +
call WTSFreeMemory  +
mov eax [ebp-1Ch] +
mov [ebp-18h] ebx +
xor ebx ebx +
inc ebx  +
mov [esi+90h] ebx +
mov ecx [eax+0Ch] +
push esi  +
call sub_1001F49  +
test eax eax +
jnz loc_1001D42  +
jmp loc_100D0C8  +
***
test ebx ebx +
jnz loc_100D0A3  +
jmp loc_100D0AC  +
***
xor esi esi +
jmp loc_1001C88  +
***
mov eax offset __imp_WTSFreeMemory +
jmp loc_100557E  +
***
test byte ptr [esi+1Ch] 8 +
jz loc_1005147  +
push 0  +
push 0  +
push 1032h  +
push 0BBAh  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
cmp eax [edi+14h] +
jz loc_1005147  +
mov ecx edi +
mov [edi+14h] eax +
call sub_1005A10  +
jmp loc_1005147  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:EnableWindow +
push edi  +
mov edi ds:GetDlgItem +
mov ebx ecx +
xor eax eax +
cmp eax [ebx+14h] +
sbb eax eax +
neg eax  +
push eax  +
mov eax [ebp+var_4] +
push ds:dword_1005A90[eax]  +
push dword ptr [ebx+4]  +
call edi  +
push eax  +
call esi  +
add [ebp+var_4] 4 +
cmp [ebp+var_4] 0Ch +
jb loc_1005A2D  +
mov ecx ebx +
call sub_1005868  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1005ADF  +
and [ebp+var_4] 0 +
cmp dword ptr [eax] 0 +
jle loc_1005AD8  +
mov ecx [ebp+var_4] +
mov eax [eax+4] +
mov eax [eax+ecx*4] +
mov ecx dword_101E478 +
mov [ebp+var_C] eax +
cmp ecx [eax] +
jnz loc_1005ABB  +
push 41000001h  +
call ds:SHELL32_100  +
jmp loc_100CDEE  +
test eax eax +
jnz loc_100CE02  +
mov eax [ebp+var_8] +
cmp dword ptr [eax] 1 +
jnz loc_1005ABB  +
push 0  +
push 0C8Ah  +
push dword ptr [ebx+4]  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+var_C] +
cmp dword ptr [eax+84h] 4 +
jz loc_100CE16  +
inc [ebp+var_4]  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
cmp ecx [eax] +
jl loc_1005A69  +
push eax  +
call ds:COMCTL32_329  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 5  +
push dword ptr [edi+4]  +
call ds:ShowWindow  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [edi+4]  +
call ds:SetWindowPos  +
push hWnd  +
call ds:GetMenu  +
push 79h  +
push hInstance  +
mov [ebp-8] eax +
call ds:LoadMenuW  +
mov [ebp-4] eax +
cmp eax ebx +
jz loc_1005B36  +
push offset dword_1005648  +
call ds:SHLWAPI_618  +
test eax eax +
jnz loc_100B832  +
test byte ptr dword_101E458 10h +
mov eax [ebp-4] +
mov hMenu eax +
jnz loc_1005B54  +
push eax  +
push hWnd  +
call ds:SetMenu  +
cmp [ebp-8] ebx +
jz loc_1005B62  +
push dword ptr [ebp-8]  +
call ds:DestroyMenu  +
call ds:GetFocus  +
cmp eax [edi+8] +
jnz loc_100B846  +
jmp loc_1005B7A  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
cmp dword_101FDAC ebx +
jnz loc_100B860  +
jmp loc_1005B73  +
***
mov ecx [ebp-4] +
call sub_10056F1  +
xor eax eax +
inc eax  +
jmp loc_1001E2A  +
***
push 130Ch  +
push 3E8h  +
push hWnd  +
call ds:GetDlgItem  +
push eax  +
call esi  +
mov eax dword_101E158 +
mov ecx dword_101E548[eax*4] +
mov eax [ecx] +
call dword ptr [eax+4]  +
lea eax [ebp-248h] +
push eax  +
push dword ptr [ebp-218h]  +
call ds:GetClientRect  +
mov eax [ebp-23Ch] +
sub eax [ebp-244h] +
push eax  +
mov eax [ebp-240h] +
sub eax [ebp-248h] +
push eax  +
push ebx  +
push hWnd  +
call sub_1005CE3  +
jmp loc_10097B0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push edi  +
xor edi edi +
cmp [ebp+hWnd] 1 +
jz loc_10092B5  +
push ebx  +
push 14h  +
call ds:BeginDeferWindowPos  +
movzx ecx word ptr [ebp+arg_8] +
mov ebx eax +
movzx eax [ebp+arg_C] +
shl eax 10h +
or eax ecx +
push eax  +
push [ebp+hWnd]  +
push 5  +
push dword_101E0A0  +
call ds:SendMessageW  +
cmp ebx edi +
jz loc_1005DAD  +
push esi  +
lea eax [ebp+Points] +
push eax  +
push dword_101E0A0  +
call ds:GetClientRect  +
mov esi ds:MapWindowPoints +
push 2  +
lea eax [ebp+Points] +
push eax  +
push hWnd  +
push dword_101E0A0  +
call esi  +
push 3E8h  +
push [ebp+hWndTo]  +
call ds:GetDlgItem  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+Rect] +
push eax  +
push hWnd  +
push edi  +
call esi  +
mov eax [ebp+Rect.top] +
mov ecx [ebp+Points.y] +
push 16h  +
add eax eax +
sub ecx eax +
mov eax [ebp+Rect.left] +
push ecx  +
mov ecx [ebp+arg_8] +
add eax eax +
sub ecx eax +
push ecx  +
push edi  +
push edi  +
push edi  +
push [ebp+hWnd]  +
push ebx  +
call ds:DeferWindowPos  +
push ebx  +
call ds:EndDeferWindowPos  +
pop esi  +
pop ebx  +
cmp [ebp+arg_8] edi +
jz loc_1005DC0  +
push [ebp+hWndTo]  +
call sub_10048D1  +
pop edi  +
leave   +
retn 10h  +
cmp dword ptr [ebp+arg_C] edi +
jnz loc_1005DB3  +
jmp loc_1005DBB  +
***
mov eax Y +
mov ecx dword_101E154 +
mov edx dword_101E150 +
push 4  +
sub ecx eax +
push ecx  +
mov ecx X +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push ebx  +
push hWnd  +
mov dword_101F804 esi +
call ds:SetWindowPos  +
push dword ptr [ebp+14h]  +
push hWnd  +
call ds:ShowWindow  +
push hWnd  +
call sub_1005E3D  +
mov eax hMutex +
cmp eax ebx +
jz loc_1005E25  +
push eax  +
call ds:ReleaseMutex  +
push esi  +
push esi  +
call ds:SetProcessShutdownParameters  +
mov esi ds:GetMessageW +
jmp sub_10016A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push esi  +
push edi  +
lea eax [ebp+pt] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
mov esi [ebp+pt.y] +
mov edi [ebp+pt.x] +
push 2  +
push esi  +
push edi  +
call ds:MonitorFromPoint  +
lea ecx [ebp+mi] +
push ecx  +
push eax  +
mov [ebp+mi.cbSize] 28h +
call ds:GetMonitorInfoW  +
mov eax [ebp+mi.rcMonitor.right] +
sub eax [ebp-8] +
mov ecx [ebp+mi.rcMonitor.bottom] +
sub ecx [ebp-4] +
xor edx edx +
test eax eax +
jl loc_1009319  +
test ecx ecx +
jl loc_1009321  +
mov eax [ebp+pt.x] +
sub eax [ebp+mi.rcMonitor.left] +
mov ecx [ebp+pt.y] +
sub ecx [ebp+mi.rcMonitor.top] +
test eax eax +
jl loc_100932B  +
xor eax eax +
cmp ecx eax +
jl loc_1009335  +
cmp edx eax +
jnz loc_100933F  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push 78h  +
push hInstance  +
call ds:LoadAcceleratorsW  +
xor esi esi +
mov hAccTable eax +
cmp dword_101F6BC esi +
jbe loc_100608A  +
movzx eax ds:word_10060B8[esi*4] +
push 0  +
push 0  +
push 0  +
push 1  +
push eax  +
push hInstance  +
call ds:LoadImageW  +
mov dword_101E560[esi*4] eax +
inc esi  +
cmp esi dword_101F6BC +
jb loc_100605D  +
xor esi esi +
push ds:dword_10060EC[esi]  +
push ds:off_10060E8[esi]  +
push ds:dword_10060F0[esi]  +
push hInstance  +
call ds:LoadStringW  +
add esi 0Ch +
cmp esi 1B0h +
jb loc_100608C  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
and dword ptr [ebx] 0 +
push edi  +
mov edi [ebp+arg_4] +
push 1Ah  +
call ds:IsOS  +
neg eax  +
sbb eax eax +
inc eax  +
mov [edi] eax +
mov edi 11Ch +
push edi  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] edi +
call ds:GetVersionExW  +
test eax eax +
jz loc_100631B  +
test [ebp+var_8] 110h +
jz loc_100631B  +
xor eax eax +
inc eax  +
cmp byte ptr [ebp+var_8+2] 3 +
mov [esi] eax +
jz loc_100632C  +
cmp byte ptr [ebp+var_8+2] 2 +
jz loc_100632C  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 0Ch  +
mov [ebx] eax +
jmp loc_100631B  +
***
mov edx ecx +
push edi  +
push 8  +
xor eax eax +
mov dword ptr [edx] offset off_1001770 +
pop ecx  +
lea edi [edx+18h] +
stos   +
xor ecx ecx +
lea eax [edx+24Ch] +
mov [edx+4] ecx +
mov [edx+8] ecx +
mov [edx+0Ch] ecx +
mov [edx+10h] ecx +
mov [edx+14h] ecx +
mov [edx+38h] ecx +
mov [edx+3Ch] ecx +
mov [edx+278h] ecx +
mov [eax+4] eax +
mov [eax] eax +
mov [edx+254h] ecx +
mov [edx+258h] ecx +
mov eax edx +
pop edi  +
retn   +
***
mov edx ecx +
xor eax eax +
push edi  +
push 6  +
pop ecx  +
lea edi [edx+1Ch] +
mov dword ptr [edx] offset off_1001790 +
stos   +
mov [edx+4] eax +
mov [edx+8] eax +
mov [edx+10h] eax +
mov [edx+0Ch] eax +
mov [edx+14h] eax +
mov [edx+38h] eax +
mov [edx+3Ch] eax +
mov [edx+40h] eax +
mov [edx+18h] eax +
mov [edx+34h] eax +
mov [edx+48h] eax +
mov [edx+44h] eax +
mov eax edx +
pop edi  +
retn   +
***
mov edx ecx +
xor eax eax +
push edi  +
push 6  +
pop ecx  +
lea edi [edx+28h] +
mov dword ptr [edx] offset off_1001728 +
stos   +
mov [edx+4] eax +
mov [edx+8] eax +
mov [edx+0Ch] eax +
mov [edx+40h] eax +
mov [edx+44h] eax +
mov [edx+48h] eax +
mov [edx+14h] eax +
mov [edx+18h] eax +
mov [edx+1Ch] eax +
mov [edx+20h] eax +
mov dword ptr [edx+10h] 1 +
mov eax edx +
pop edi  +
retn   +
***
push esi  +
push ebx  +
call ds:HeapSetInformation  +
push 80h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetPriorityClass  +
mov hInstance edi +
call ds:SetProcessDPIAware  +
push offset loc_1006464  +
call ds:RegisterWindowMessageW  +
push esi  +
mov dword_101F6B8 eax +
call sub_100DE95  +
jmp loc_1009E05  +
push esp  +
add [ecx+0] ah +
jnb $+2  +
imul eax [eax] +
add [ecx+0] ah +
jb $+2  +
inc ebx  +
add [edx+0] dh +
add gs:[ecx+0] ah +
jz $+2  +
add gs:[eax+eax+0] ah +
add [eax-6F6F6F70h] dl +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 2710h  +
push hInstance  +
call ds:LoadStringW  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi offset dword_10064E8 +
lea esi [ecx+30h] +
push dword ptr [edi]  +
push 1  +
push 0  +
call ds:CreatePen  +
mov [esi] eax +
test eax eax +
jz loc_100B2EA  +
add edi 4 +
add esi 4 +
cmp edi offset dword_10064F4 +
jl loc_10064C0  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 272Eh  +
push hInstance  +
call ds:LoadStringW  +
pop ebp  +
retn 8  +
***
xor eax eax +
lea edi [edx+30h] +
stos   +
stos   +
stos   +
xor eax eax +
mov [edx+1Ch] eax +
mov [edx+20h] eax +
mov [edx+24h] eax +
mov [edx+28h] eax +
mov [edx+50h] eax +
mov [edx+54h] eax +
mov [edx+5Ch] eax +
mov [edx+58h] eax +
mov [edx+64h] eax +
mov [edx+68h] eax +
mov [edx+6Ch] eax +
mov [edx+70h] eax +
mov dword ptr [edx+4Ch] 1 +
mov eax edx +
pop edi  +
retn   +
***
sub esi 13h +
jz loc_10079C4  +
dec esi  +
dec esi  +
jz loc_100B4E0  +
sub esi 11h +
jnz loc_10079B6  +
jmp loc_1004766  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push [ebp+hModule]  +
call sub_101B35A  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4F8h +
push ebx  +
push edi  +
xor ebx ebx +
xor edi edi +
cmp [ebp+arg_8] ebx +
jbe loc_10065B5  +
mov ecx [ebp+lpBuffer] +
xor eax eax +
mov [ecx] ax +
push ebx  +
push 18h  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
push [ebp+hProcess]  +
call ds:NtQueryInformationProcess  +
test eax eax +
jl loc_100663E  +
push esi  +
mov esi ds:ReadProcessMemory +
push ebx  +
push 248h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jz loc_100663D  +
push ebx  +
push 298h  +
lea eax [ebp+var_2B0] +
push eax  +
push [ebp+var_4E8]  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jz loc_100663D  +
mov eax [ebp+arg_8] +
movzx ecx [ebp+var_270] +
lea eax [eax+eax-2] +
mov edi eax +
cmp eax ecx +
jb loc_100661C  +
mov edi ecx +
push ebx  +
push edi  +
push [ebp+lpBuffer]  +
push [ebp+var_26C]  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jz loc_1006648  +
mov edx [ebp+lpBuffer] +
mov eax edi +
shr eax 1 +
xor ecx ecx +
mov [edx+eax*2] cx +
pop esi  +
mov eax edi +
pop edi  +
shr eax 1 +
pop ebx  +
leave   +
retn 0Ch  +
xor edi edi +
jmp loc_100663D  +
***
mov [ebp+var_8] ebx +
jmp loc_1007AC0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 2714h  +
push hInstance  +
call ds:LoadStringW  +
pop ebp  +
retn 8  +
***
lea ecx [ebp+var_30C] +
push ecx  +
mov ecx [ebp+var_414] +
inc ecx  +
push ecx  +
push eax  +
call sub_1001A1B  +
jmp loc_100B937  +
***
push 3  +
pop eax  +
mov [ebp-4Ch] eax +
mov [ebp-48h] eax +
mov dword ptr [ebp-58h] 0Dh +
jmp loc_100359D  +
***
jmp loc_100C0A1  +
***
cmp dword ptr [esi+0ACh] 0 +
jz loc_1003217  +
jmp loc_100BFAA  +
mov eax edi +
jmp loc_1002C45  +
***
call ds:GetCurrentProcessId  +
cmp [esi+44h] eax +
jnz loc_1002D6D  +
mov eax [esi+50h] +
mov dword_101E084 eax +
jmp loc_1002D6D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 2725h  +
push hInstance  +
call ds:LoadStringW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
xor ebx ebx +
push ebx  +
push 32h  +
mov edi ecx +
call esi  +
push eax  +
push 31h  +
call esi  +
push eax  +
push 1  +
push 76h  +
push hInstance  +
call ds:LoadImageW  +
mov esi eax +
test esi esi +
jnz loc_100C6EC  +
pop edi  +
pop esi  +
pop ebx  +
jmp sub_100DD74  +
***
push [ebp+lpString]  +
push edi  +
push eax  +
call sub_1001A1B  +
or dword ptr [esi+28h] 2 +
jmp loc_1002969  +
or dword ptr [esi+28h] 1 +
mov [esi] edi +
jmp loc_1002984  +
***
mov ecx [esi] +
push ebx  +
call sub_1001F49  +
test eax eax +
jz loc_100C7BC  +
test edi edi +
jge loc_10067FB  +
jmp loc_100C7C6  +
xor ebx ebx +
jmp loc_1002903  +
xor eax eax +
inc eax  +
jmp loc_10027AF  +
***
mov eax [edi+0Ch] +
mov eax [eax+4] +
mov edi [eax+ebx*4] +
push 38h  +
lea eax [ebp-4Ch] +
push 0  +
push eax  +
call memset  +
or dword ptr [ebp-40h] 0FFFFFFFFh +
mov dword ptr [ebp-50h] 0Fh +
mov [ebp-4Ch] ebx +
mov eax [edi+4] +
mov [ebp-3Ch] eax +
mov [ebp-30h] edi +
mov eax [edi+18h] +
mov [ebp-34h] eax +
mov eax [edi+1Ch] +
add esp 0Ch +
mov [ebp-44h] eax +
lea eax [ebp-50h] +
push eax  +
push 0  +
push 104Dh  +
push dword ptr [ebp-4]  +
call esi  +
and dword ptr [edi+28h] 0 +
inc ebx  +
cmp ebx [ebp-10h] +
jge loc_1003740  +
mov edi [ebp-0Ch] +
jmp loc_1006803  +
mov dword ptr [ebp-14h] 80004005h +
jmp loc_1003740  +
***
push edi  +
push edi  +
push edi  +
push edi  +
call ebx  +
jmp loc_100CA68  +
mov edx [esi+38h] +
cmp edx edi +
jnz loc_100CA70  +
jmp loc_1003828  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
mov edi ecx +
call ds:COMCTL32_328  +
mov [edi+0Ch] eax +
test eax eax +
jz loc_100D215  +
push 21h  +
pop ebx  +
push 0FFFFFFECh  +
push esi  +
mov [edi+8] esi +
call ds:GetWindowLongW  +
test eax 400000h +
jnz loc_100D224  +
mov esi ds:GetSystemMetrics +
push 1  +
push 3  +
push ebx  +
push 32h  +
call esi  +
push eax  +
push 31h  +
call esi  +
push eax  +
call ds:ImageList_Create  +
jmp loc_100D22E  +
***
push offset dword_101FAFC  +
push dword_101FB00  +
mov dword_101FAFC eax +
push offset unk_101FAF0  +
push offset unk_101FAF4  +
push offset unk_101FAEC  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_101FAF8 eax +
retn   +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_101E08C +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_1006A11  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_1006A11  +
push eax  +
call ds:LockResource  +
test eax eax +
jz loc_1006A0A  +
and [ebp+arg_4] 0Fh +
jbe loc_10069DB  +
mov ecx [ebp+arg_4] +
dec ecx  +
movzx edx word ptr [eax] +
lea eax [eax+edx*2+2] +
jnz loc_10069D1  +
mov ecx [ebp+arg_C] +
test ecx ecx +
jz loc_1006A01  +
push esi  +
movzx esi word ptr [eax] +
neg esi  +
sbb esi esi +
lea edx [eax+2] +
and esi edx +
mov [ecx] esi +
mov ecx [ebp+arg_10] +
pop esi  +
mov ax [eax] +
mov [ecx] ax +
xor eax eax +
pop ebp  +
retn 14h  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jnz loc_10069F5  +
jmp loc_10069FB  +
mov eax 80004005h +
jmp loc_10069FD  +
call sub_101B392  +
jmp loc_10069FD  +
***
mov eax offset __imp_WTSQuerySessionInformationW +
jmp loc_100557E  +
***
mov eax offset __imp_WTSEnumerateSessionsW +
jmp loc_100557E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
mov eax ecx +
push 0BBAh  +
push dword ptr [eax+4]  +
mov [ebp+var_220] eax +
call ds:GetDlgItem  +
mov edi eax +
xor ebx ebx +
mov [ebp+hWnd] edi +
cmp edi ebx +
jz loc_100CBC8  +
push esi  +
mov esi ds:SendMessageW +
push ebx  +
push ebx  +
push 1009h  +
push edi  +
call esi  +
mov [ebp+lParam] 0Ah +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 105Fh  +
push edi  +
call esi  +
test eax eax +
jnz loc_100CBD2  +
push ebx  +
push ebx  +
push 101Ch  +
push edi  +
call esi  +
test eax eax +
jnz loc_1006AA1  +
mov [ebp+wParam] ebx +
mov [ebp+var_21C] ebx +
mov [ebp+var_210] offset dword_101F35C +
mov edi 200h +
mov eax [ebp+var_210] +
cmp [eax+4] ebx +
jz loc_100CC41  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+var_210] +
push dword ptr [eax-0Ch]  +
push hInstance  +
call ds:LoadStringW  +
jmp loc_100CBFB  +
***
mov [ebp+var_244] eax +
lea eax [ebp+Buffer] +
mov [ebp+var_240] eax +
mov eax [ebp+var_21C] +
mov [ebp+var_238] eax +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
push 1061h  +
push [ebp+hWnd]  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1006BA7  +
mov eax [ebp+wParam] +
cmp eax dword_101FAE8 +
jz loc_1006B6D  +
inc [ebp+wParam]  +
jmp loc_100CC41  +
mov ecx [ebp+var_220] +
push ebx  +
push ebx  +
push 101Fh  +
push [ebp+hWnd]  +
mov [ecx+4Ch] eax +
call esi  +
xor ecx ecx +
cmp dword_101F998 ebx +
setnl cl  +
dec ecx  +
and ecx edi +
add ecx edi +
push ecx  +
mov ecx [ebp+var_220] +
push dword ptr [ecx+4Ch]  +
push eax  +
call sub_1007617  +
jmp loc_1006B62  +
mov eax 80004005h +
jmp loc_1006BC3  +
push ebx  +
push off_101F898  +
push [ebp+hWnd]  +
call ds:SetWindowTheme  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
xor edi edi +
push edi  +
push edi  +
mov ebx ecx +
push 1009h  +
push dword ptr [ebx+78h]  +
call esi  +
push edi  +
push edi  +
push 101Ch  +
push dword ptr [ebx+78h]  +
call esi  +
test eax eax +
jnz loc_1006C05  +
cmp dword_101E304 edi +
jl loc_1006C9C  +
mov eax offset dword_101E304 +
mov eax [eax] +
mov esi eax +
push 104h  +
mov [ebp+var_210] eax +
lea eax [ebp+Buffer] +
push eax  +
shl esi 2 +
push ds:uID[esi]  +
push hInstance  +
call ds:LoadStringW  +
movsx eax word_101F830[esi] +
mov [ebp+var_238] eax +
movzx eax word_101E370[edi*2] +
or ecx 0FFFFFFFFh +
mov [ebp+lParam] 7 +
cmp cx ax +
jnz loc_100B334  +
jmp loc_100B309  +
cmp eax 0FFFFFFFFh +
jnz loc_100B36A  +
mov eax 80004005h +
jmp loc_1006CB2  +
inc edi  +
lea eax dword_101E304[edi*4] +
cmp dword ptr [eax] 0 +
jge loc_1006C22  +
xor edi edi +
push 10030h  +
push edi  +
push 1036h  +
push dword ptr [ebx+78h]  +
call ds:SendMessageW  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
***
mov eax offset __imp_WinStationGetProcessSid +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset WINSTA_dll_import_table  +
call sub_1006CDE  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
js loc_100D3B9  +
mov [ebp+lpProcName] eax +
test edx edx +
jz loc_100D3C1  +
jmp loc_1006D7D  +
cmp [ebp+hModule] 0 +
jnz loc_100558F  +
jmp loc_100D43A  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_100D3E5  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_1006D90 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jnz loc_100D3D8  +
cmp [ebp+hModule] 0FFFFFFFFh +
jnz loc_1006D36  +
mov [ebp+var_4] 1 +
jmp loc_100D43A  +
***
call sub_100693B  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-6Ch] +
push eax  +
call ds:GetStartupInfoW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-20h] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_100D459  +
xor esi esi +
inc esi  +
mov eax dword_101E104 +
cmp eax esi +
jz loc_100D478  +
mov eax dword_101E104 +
test eax eax +
jnz loc_1006DA4  +
mov dword_101E104 esi +
push offset dword_1006EDC  +
push offset dword_1006ED0  +
call sub_100788D  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D50E  +
mov eax dword_101E104 +
cmp eax esi +
jnz loc_1006E73  +
push offset dword_1006ECC  +
push offset dword_1006EBC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101E104 2 +
cmp [ebp-20h] ebx +
jnz loc_1006E80  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_101FB10 ebx +
jnz loc_100D485  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_100D50E  +
mov eax [eax] +
mov [ebp-24h] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
jbe loc_1005354  +
cmp cx 22h +
jz loc_1006D94  +
inc eax  +
inc eax  +
jmp loc_1006E9B  +
***
inc dword ptr [ebx+1F99C3Dh]  +
add [eax] eax +
jz loc_100D546  +
call sub_1006FB7  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 21h  +
pop edi  +
push 4  +
mov esi ecx +
call ds:COMCTL32_328  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100CA17  +
mov eax [ebp+8] +
push 0FFFFFFECh  +
push eax  +
mov [esi+8] eax +
call ds:GetWindowLongW  +
test eax 400000h +
jnz loc_100CA21  +
push 1  +
push 1  +
push edi  +
mov edi ds:GetSystemMetrics +
push 32h  +
call edi  +
push eax  +
push 31h  +
call edi  +
push eax  +
call ds:ImageList_Create  +
jmp loc_100CA2B  +
***
mov eax [esi+4] +
test eax eax +
jnz loc_100CA4C  +
jmp loc_100CA53  +
***
mov ecx esi +
call sub_1006781  +
mov edi eax +
test edi edi +
jl loc_1007028  +
push esi  +
push offset loc_1019146  +
push hWnd  +
push 70h  +
push hInstance  +
call ds:CreateDialogParamW  +
mov [esi+4] eax +
test eax eax +
jz loc_100CA40  +
test edi edi +
jl loc_1007028  +
mov ecx esi +
call sub_1007088  +
mov edi eax +
test edi edi +
jl loc_1007028  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov eax ecx +
push 41Dh  +
push dword ptr [eax+4]  +
mov [ebp+var_214] eax +
call ds:GetDlgItem  +
mov ebx eax +
xor esi esi +
mov [ebp+wParam] ebx +
cmp ebx esi +
jz loc_100C646  +
push edi  +
mov edi ds:SendMessageW +
push esi  +
push esi  +
push 1009h  +
push ebx  +
call edi  +
push esi  +
push esi  +
push 101Ch  +
push ebx  +
call edi  +
test eax eax +
jnz loc_10070D8  +
mov ebx 200h +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [esi+5208h] +
push eax  +
push hInstance  +
call ds:LoadStringW  +
jmp loc_100C650  +
***
mov [ebp+var_238] eax +
lea eax [ebp+Buffer] +
mov [ebp+var_234] eax +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push 1061h  +
push [ebp+wParam]  +
mov [ebp+var_22C] esi +
call edi  +
cmp eax 0FFFFFFFFh +
jz loc_1007152  +
cmp esi dword_101E450 +
jz loc_100C697  +
jmp loc_100C6C9  +
mov eax 80004005h +
jmp loc_100716F  +
push 0  +
push off_101F898  +
push [ebp+wParam]  +
call ds:SetWindowTheme  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp-418h] +
push eax  +
push 20019h  +
xor ebx ebx +
push ebx  +
push offset aSoftwareMicr_1  +
push 80000002h  +
mov esi ecx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1007201  +
lea eax [ebp-41Ch] +
push eax  +
lea eax [ebp-414h] +
push eax  +
push ebx  +
push ebx  +
push offset aDebugger  +
push dword ptr [ebp-418h]  +
mov dword ptr [ebp-41Ch] 410h +
call ds:RegQueryValueExW  +
push dword ptr [ebp-418h]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi ebx +
jz loc_100BDCE  +
push ebx  +
push 2Ch  +
push offset unk_101E488  +
push ebx  +
call ds:NtQuerySystemInformation  +
test eax eax +
jl loc_1007356  +
push 4  +
call ds:COMCTL32_328  +
mov [esi+0Ch] eax +
cmp eax ebx +
jz loc_1007345  +
mov eax [ebp+8] +
push esi  +
push offset loc_1001DAA  +
mov [esi+8] eax +
push hWnd  +
push 6Eh  +
push hInstance  +
call ds:CreateDialogParamW  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_100BE5E  +
mov ecx esi +
call sub_100748A  +
test eax eax +
jl loc_100BE68  +
xor eax eax +
xor edi edi +
mov word_101F4B8 ax +
inc edi  +
mov ebx offset unk_101F538 +
push 40h  +
push ebx  +
lea eax [edi+9C87h] +
push eax  +
push hInstance  +
call ds:LoadStringW  +
inc edi  +
sub ebx 0FFFFFF80h +
cmp edi 4 +
jb loc_1007275  +
push 3F1h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_1007444  +
jmp loc_100BE79  +
***
mov ecx esi +
mov dword ptr [esi+278h] 1 +
call sub_10137A2  +
jmp loc_100735D  +
mov eax 8007000Eh +
jmp loc_1007363  +
cmp eax ebx +
jge loc_1007201  +
jmp loc_1007363  +
mov eax 80004005h +
jmp loc_1007363  +
test eax eax +
jl loc_1007363  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov ecx offset unk_101E47C +
jmp loc_1019E37  +
***
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_1007439  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push edi  +
push offset aSoftwareMicros  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1007423  +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset aUsrcolumnsetti  +
push [ebp+hKey]  +
mov [ebp+cbData] esi +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1007400  +
cmp [ebp+Type] 3 +
jnz loc_1007400  +
cmp [ebp+cbData] esi +
jnz loc_1007400  +
mov eax [ebx] +
mov [ebp+var_4] 1 +
xor ecx ecx +
cmp eax Data +
jnz loc_1007434  +
mov edx [ebx+4] +
cmp edx dword_101F354 +
jnz loc_1007434  +
inc ecx  +
cmp ecx 5 +
jb loc_10073E7  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+var_4] edi +
jz loc_1007423  +
mov eax [ebp+var_14] +
push 19h  +
pop ecx  +
mov esi ebx +
mov edi offset Data +
movs   +
and dword ptr [eax+8] 0 +
xor edi edi +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
jmp loc_100CBAE  +
pop edi  +
pop esi  +
leave   +
retn   +
mov [ebp+var_4] edi +
jmp loc_1007400  +
mov eax [ebp+var_4] +
pop ebx  +
jmp loc_1007430  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
push ebx  +
push edi  +
xor edi edi +
push 7Ch  +
lea eax [ebp+var_7C] +
push edi  +
push eax  +
xor ebx ebx +
mov [ebp+var_80] edi +
call memset  +
jmp loc_100B6AB  +
***
cmp eax ebx +
jz loc_100746F  +
jmp loc_100747E  +
lea eax [ebp+var_80] +
push eax  +
push ebx  +
push 1212h  +
push [ebp+hWnd]  +
call esi  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
mov eax ecx +
push 3F1h  +
push dword ptr [eax+4]  +
mov [ebp+var_214] eax +
call ds:GetDlgItem  +
mov ebx eax +
xor edi edi +
mov [ebp+hWnd] ebx +
cmp ebx edi +
jz loc_100B77A  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push edi  +
push 1009h  +
push ebx  +
call esi  +
push edi  +
push edi  +
push 101Ch  +
push ebx  +
call esi  +
test eax eax +
jnz loc_10074DA  +
xor ebx ebx +
cmp dword_101E178 edi +
jl loc_10075AC  +
mov eax offset dword_101E178 +
mov eax [eax] +
mov esi eax +
push 104h  +
mov [ebp+var_218] eax +
lea eax [ebp+Buffer] +
push eax  +
shl esi 3 +
push ds:dword_1005F40[esi]  +
push hInstance  +
call ds:LoadStringW  +
mov edi dword_101E1F8[edi] +
mov eax dword_101F8A0[esi] +
mov [ebp+lParam] 7 +
mov [ebp+var_240] eax +
cmp edi 0FFFFFFFFh +
jz loc_100B784  +
mov [ebp+var_23C] edi +
mov esi ds:SendMessageW +
lea eax [ebp+Buffer] +
mov [ebp+var_238] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 1061h  +
push [ebp+hWnd]  +
mov [ebp+var_230] ebx +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_100760B  +
mov eax [ebp+var_218] +
cmp eax dword_101E2FC +
jz loc_10075D0  +
inc ebx  +
mov edi ebx +
shl edi 2 +
lea eax dword_101E178[edi] +
cmp dword ptr [eax] 0 +
jge loc_10074FB  +
xor edi edi +
push edi  +
push off_101F898  +
push [ebp+hWnd]  +
call ds:SetWindowTheme  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
mov eax [ebp+var_214] +
xor edi edi +
push edi  +
push edi  +
push 101Fh  +
push [ebp+hWnd]  +
mov [eax+40h] ebx +
call esi  +
mov esi eax +
xor eax eax +
cmp dword_101E300 edi +
mov ecx 200h +
setnl al  +
dec eax  +
and eax ecx +
add eax ecx +
push eax  +
push ebx  +
push esi  +
call sub_1007617  +
jmp loc_1007595  +
mov eax 80004005h +
jmp loc_10075C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
mov esi ds:SendMessageW +
push 0  +
push 0  +
push 1200h  +
push [ebp+hWnd]  +
call esi  +
cmp [ebp+wParam] eax +
jnb loc_1007680  +
push 2Ch  +
lea eax [ebp+var_2C] +
push 0  +
push eax  +
mov [ebp+lParam] 4 +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
push 120Bh  +
push [ebp+hWnd]  +
call esi  +
mov eax [ebp+var_1C] +
and eax 0FFFFF9FFh +
or eax [ebp+arg_8] +
mov [ebp+var_1C] eax +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
push 120Ch  +
push [ebp+hWnd]  +
call esi  +
pop esi  +
leave   +
retn 0Ch  +
***
push eax  +
call sub_1001A1B  +
jmp loc_100B991  +
***
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
mov ebx ds:GetDlgItem +
push 0DB0h  +
push edi  +
call ebx  +
xor edi edi +
push edi  +
mov [esi+0Ch] eax +
push off_101F898  +
mov [ebp-0D0h] eax +
push eax  +
call ds:SetWindowTheme  +
jmp loc_100C3C7  +
***
push 14030h  +
push edi  +
push 1036h  +
push dword ptr [ebp-0D0h]  +
call esi  +
jmp loc_100C3E2  +
***
sub edx 6Dh +
jz loc_1007734  +
jmp loc_10046BC  +
***
cmp [ebp-0D8h] edi +
jnz loc_10077BC  +
jmp loc_10077D4  +
cmp ebx [ecx+0Ch] +
jz loc_100C425  +
jmp loc_10046BC  +
***
call sub_1017480  +
jmp loc_1007852  +
movzx eax bx +
push eax  +
call sub_1017D28  +
jmp loc_1007852  +
push 1  +
push edi  +
push 160Ch  +
push 0DAFh  +
push dword ptr [ebp-0D4h]  +
call ebx  +
push eax  +
call esi  +
mov dword ptr [ebp-104h] 7 +
mov [ebp-100h] edi +
xor ebx ebx +
mov eax dword_101E428[ebx*4] +
cmp eax 0FFFFFFFFh +
jz loc_100C3F6  +
push 64h  +
mov [ebp-0FCh] eax +
lea eax [ebp-0CCh] +
push eax  +
push ds:dword_100785C[ebx*8]  +
mov [ebp-0F8h] eax +
push edi  +
call ds:LoadStringW  +
lea eax [ebp-104h] +
push eax  +
push ebx  +
push 1061h  +
push dword ptr [ebp-0D0h]  +
call esi  +
inc ebx  +
cmp ebx 5 +
jb loc_10077E6  +
push offset dword_101E43C  +
push 5  +
push 1212h  +
push edi  +
push edi  +
push 101Fh  +
push dword ptr [ebp-0D0h]  +
call esi  +
push eax  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_10046BE  +
***
call ecx  +
jmp loc_10078A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_10078AC  +
test eax eax +
jnz loc_10078AC  +
mov ecx [esi] +
test ecx ecx +
jnz loc_1007884  +
add esi 4 +
jmp loc_1007898  +
pop esi  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
mov ecx esi +
mov [esi+10h] eax +
call sub_1007928  +
mov edi ds:LoadImageW +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 67h  +
push hInstance  +
call edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 7Dh  +
mov [esi+1Ch] eax +
push hInstance  +
call edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 68h  +
mov [esi+18h] eax +
push hInstance  +
call edi  +
push esi  +
push offset loc_100FCB5  +
mov [esi+14h] eax +
push hWnd  +
push 6Ch  +
push hInstance  +
call ds:CreateDialogParamW  +
pop edi  +
mov [esi+0Ch] eax +
pop esi  +
cmp eax ebx +
pop ebx  +
jz loc_100B228  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
lea esi [ecx+2Ch] +
push ds:dword_1007958[edi*4]  +
xor eax eax +
cmp edi 8 +
setz al  +
inc eax  +
push eax  +
push 0  +
call ds:CreatePen  +
mov [esi] eax +
test eax eax +
jnz loc_100797F  +
jmp loc_100A0CE  +
pop edi  +
pop esi  +
retn   +
inc edi  +
add esi 4 +
cmp edi 9 +
jnb loc_100797C  +
jmp loc_1007931  +
***
push dword ptr [ebp+14h]  +
mov esi ds:SetWindowLongW +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call esi  +
push 0FFFFFFF0h  +
push dword ptr [ebp+8]  +
call edi  +
or eax 2000000h +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [ebp+8]  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_100B5FB  +
***
sub esi 23h +
jz loc_1005206  +
jmp loc_100475F  +
***
mov ecx [ebp-4] +
call sub_1012C0C  +
jmp loc_10079AE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10064B4  +
mov eax [ebp+8] +
push esi  +
push offset loc_10046F9  +
mov [esi+20h] eax +
push hWnd  +
push 6Dh  +
push hInstance  +
call ds:CreateDialogParamW  +
mov [esi+1Ch] eax +
test eax eax +
jz loc_100B602  +
push edi  +
mov edi ds:GetDlgItem +
push 0A2Bh  +
push eax  +
call edi  +
mov [esi+7Ch] eax +
test eax eax +
jnz loc_100B60C  +
jmp loc_1007A40  +
mov ecx esi +
call sub_1006BD7  +
push dword ptr [esi+78h]  +
mov ecx esi +
call sub_1007A4C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 80004005h +
jmp loc_1007A3A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push esi  +
mov edx offset unk_101E3A8 +
lea eax [ebp+lParam] +
xor ecx ecx +
xor esi esi +
sub edx eax +
lea eax [edx+ecx*4] +
mov eax [ebp+eax+lParam] +
cmp eax 0FFFFFFFFh +
jz loc_1007A7A  +
mov [ebp+ecx*4+lParam] eax +
inc ecx  +
inc esi  +
cmp esi 1Ah +
jl loc_1007A63  +
test ecx ecx +
jle loc_1007AAF  +
mov esi ds:SendMessageW +
push edi  +
push 0  +
push 0  +
push 101Fh  +
push [ebp+hWnd]  +
call esi  +
mov edi eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 0  +
push 1200h  +
push edi  +
call esi  +
push eax  +
push 1212h  +
push edi  +
call esi  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
cmp eax 0C0000004h +
jz loc_1007AC0  +
jmp loc_100B693  +
mov eax [esi+10h] +
cmp eax ebx +
jz loc_1007AD5  +
push eax  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov [esi+10h] ebx +
mov eax [ebp+var_8] +
mov ecx eax +
shr ecx 4 +
lea eax [ecx+eax+1000h] +
push eax  +
push ebx  +
mov [esi+14h] eax +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [esi+10h] eax +
cmp eax ebx +
jnz loc_10025BA  +
jmp loc_100B69F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov [esi+8] eax +
lea eax [esi+14h] +
push eax  +
call ds:RtlInitializeCriticalSection  +
test eax eax +
jge loc_100C594  +
and dword ptr [esi+30h] 0 +
jmp loc_1007B6E  +
push 1  +
push offset loc_1017B76  +
push esi  +
push edi  +
push offset aSystemProvider  +
push offset aSystem  +
push edi  +
push edi  +
mov [esi+2Ch] eax +
call EvtSubscribe  +
push esi  +
push offset loc_1004650  +
mov [esi+34h] eax +
push hWnd  +
push 0DACh  +
push hInstance  +
call ds:CreateDialogParamW  +
mov [esi+4] eax +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push 0  +
push 32h  +
mov edi ecx +
call esi  +
push eax  +
push 31h  +
call esi  +
mov ebx ds:LoadImageW +
push eax  +
push 1  +
push 0BBCh  +
push hInstance  +
call ebx  +
mov [ebp+hIcon] eax +
test eax eax +
jnz loc_100CC63  +
call sub_100DD74  +
jmp loc_1007CAB  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [edi+18h]  +
call ds:ImageList_ReplaceIcon  +
push [ebp+hIcon]  +
mov [edi+20h] eax +
call ds:DestroyIcon  +
cmp dword ptr [edi+20h] 0FFFFFFFFh +
jz loc_100CC81  +
push 0  +
push 32h  +
call esi  +
push eax  +
push 31h  +
call esi  +
push eax  +
push 1  +
push 0BD0h  +
push hInstance  +
call ebx  +
mov esi eax +
test esi esi +
jz loc_1007C3F  +
push esi  +
push 0FFFFFFFFh  +
push dword ptr [edi+18h]  +
call ds:ImageList_ReplaceIcon  +
push esi  +
mov [edi+24h] eax +
call ds:DestroyIcon  +
cmp dword ptr [edi+24h] 0FFFFFFFFh +
jz loc_100CC81  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov ecx edi +
call sub_1007C02  +
mov [ebp-210h] eax +
test eax eax +
jl loc_1007CC5  +
xor ebx ebx +
jmp loc_1007CD5  +
mov eax [edi+4] +
test eax eax +
jnz loc_100D285  +
jmp loc_100D28C  +
***
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebx+0BCCh] +
push eax  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_100D266  +
lea eax [ebp-20Ch] +
push eax  +
call ds:lstrlenW  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
jmp loc_100D248  +
***
mov ecx offset unk_101E138 +
jmp sub_1007D35  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi 330h +
xor ebx ebx +
push edi  +
mov esi ecx +
push ebx  +
push esi  +
mov [ebp+pvParam] ebx +
call memset  +
add esp 0Ch +
push ebx  +
lea eax [ebp+pvParam] +
push eax  +
push ebx  +
push 46h  +
mov [esi] edi +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_10094F6  +
cmp [ebp+pvParam] ebx +
jnz loc_1009514  +
jmp loc_1009526  +
***
or dword ptr [esi+20h] 0FFFFFFFFh +
lea eax [esi+320h] +
mov ecx [eax] +
and ecx 0FFFFFFFBh +
or ecx 43h +
mov [eax] ecx +
push 0Ah  +
pop eax  +
mov [esi+14h] eax +
mov [esi+10h] eax +
mov [esi+8] edi +
mov eax dword_101E0BC +
add eax 0Ah +
mov [esi+1Ch] eax +
mov eax dword_101E0B8 +
add eax 0Ah +
mov [esi+18h] eax +
cmp dword_101E468 ebx +
jnz loc_1009538  +
xor edi edi +
jmp loc_1009551  +
mov edi [edx] +
mov [ecx] edi +
cmp dword ptr [edx] 0FFFFFFFFh +
jz loc_1007DD9  +
inc eax  +
add ecx 4 +
add edx 4 +
cmp eax 20h +
jl loc_1007DC4  +
or dword ptr [esi+1C8h] 0FFFFFFFFh +
mov [esi+1C4h] ebx +
mov ebx 80h +
push ebx  +
mov [esi+1C0h] eax +
lea edi [ebx+7Fh] +
lea eax [esi+0C0h] +
push edi  +
push eax  +
call memset  +
push ebx  +
lea eax [esi+140h] +
push edi  +
push eax  +
call memset  +
add esp 18h +
mov edx offset dword_1007EC4 +
xor ecx ecx +
lea eax [esi+1CCh] +
mov ebx [edx] +
mov [eax] ebx +
cmp dword ptr [edx] 0FFFFFFFFh +
jz loc_1007E35  +
inc ecx  +
add eax 4 +
add edx 4 +
cmp ecx 1Bh +
jl loc_1007E20  +
or dword ptr [esi+2E4h] 0FFFFFFFFh +
push 36h  +
lea eax [esi+238h] +
push edi  +
xor ebx ebx +
push eax  +
mov [esi+2DCh] ecx +
mov [esi+2E0h] ebx +
call memset  +
push 6Ch  +
lea eax [esi+270h] +
push edi  +
push eax  +
call memset  +
mov dword ptr [esi+2E8h] 4 +
or ecx 0FFFFFFFFh +
mov [esi+2ECh] ecx +
lea edi [esi+2F0h] +
mov eax ecx +
stos   +
stos   +
stos   +
stos   +
stos   +
lea edi [esi+304h] +
mov eax ecx +
stos   +
stos   +
stos   +
stos   +
stos   +
add esp 18h +
xor eax eax +
inc eax  +
pop edi  +
mov [esi+318h] ebx +
mov [esi+28h] ebx +
mov [esi+2Ch] ebx +
mov [esi+34h] ebx +
mov [esi+3Ch] ebx +
mov [esi+31Ch] ecx +
mov [esi+24h] eax +
mov [esi+30h] eax +
mov [esi+38h] eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax offset __imp_CachedGetUserFromSid +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset UTILDLL_dll_import_table  +
call sub_1006CDE  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 178h +
push esi  +
mov esi ds:NtQuerySystemInformation +
push 0  +
push 2Ch  +
lea eax [ebp+var_30] +
push eax  +
push 0  +
mov [ebp+var_1] 1 +
call esi  +
jmp loc_10092FA  +
***
test eax eax +
jl loc_1007F47  +
xor edx edx +
mov eax 100000h +
div  [ebp+var_28] +
mov ecx [ebp+var_144] +
sub ecx [ebp+var_148] +
xor edx edx +
mov esi eax +
mov eax ecx +
div  esi +
cmp eax 8 +
jbe loc_1007F47  +
mov [ebp+var_1] 0 +
mov al [ebp+var_1] +
pop esi  +
leave   +
retn   +
***
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
xor ecx ecx +
test eax eax +
jnz loc_100965A  +
jmp loc_1009662  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
push [ebp+hWnd]  +
call sub_1007F8F  +
jmp loc_100166D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 264h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+hWnd] +
lea eax [ebp+Rect] +
push eax  +
push edi  +
mov [ebp+hDlg] edi +
call ds:GetWindowRect  +
jmp loc_100972C  +
***
xor eax eax +
mov dword_101E158 eax +
jmp sub_1005C74  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
mov esi ds:GetDialogBaseUnits +
mov dword_101E0B8 eax +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov dword_101E0BC eax +
call esi  +
movzx eax ax +
imul eax eax +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
mov dword_101E0C0 eax +
call esi  +
movzx eax ax +
add eax eax +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
mov dword_101E0C4 eax +
call esi  +
shr eax 10h +
imul eax eax +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
mov dword_101E0C8 eax +
call esi  +
movzx eax ax +
imul eax eax +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
mov dword_101E0D0 eax +
call esi  +
shr eax 10h +
add eax eax +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
mov ecx offset unk_101E138 +
mov dword_101E0D4 eax +
call sub_10095DA  +
mov hWnd edi +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
test byte ptr dword_101E458 4 +
mov dword_101E09C eax +
jz loc_100809D  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
call ds:SetWindowPos  +
push 64h  +
push edi  +
push ebx  +
push 54000100h  +
call ds:CreateStatusWindowW  +
mov edi eax +
mov dword_101E0A0 edi +
cmp edi ebx +
jz loc_1009769  +
jmp loc_1009770  +
mov esi ds:GetDeviceCaps +
push 58h  +
push eax  +
call esi  +
push 5Ah  +
push [ebp+hDC]  +
mov nNumerator eax +
call esi  +
cmp nNumerator 60h +
mov dword_101F82C eax +
jz loc_1009748  +
jmp loc_100974D  +
mov ecx eax +
imul ecx ecx +
mov [ebp+var_214] eax +
mov [ebp+lParam] eax +
mov eax ecx +
cdq   +
or [ebp+var_22C] 0FFFFFFFFh +
and edx 3 +
add eax edx +
mov esi eax +
mov eax ecx +
cdq   +
sub eax edx +
sar esi 2 +
add esi [ebp+var_214] +
sar eax 1 +
add eax esi +
mov [ebp+var_230] eax +
lea eax [ebp+lParam] +
push eax  +
push 4  +
push 404h  +
mov [ebp+var_234] esi +
mov esi ds:SendMessageW +
push edi  +
call esi  +
push 6Bh  +
push hInstance  +
call ds:LoadIconW  +
cmp eax ebx +
jz loc_100816B  +
push eax  +
push 1  +
push 80h  +
push [ebp+hDlg]  +
call esi  +
push ebx  +
push ebx  +
push 404h  +
push idThread  +
call ds:PostThreadMessageW  +
push 1Bh  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push dword_101E0A0  +
mov dword_101E0CC eax +
call ds:SetWindowPos  +
push 3E8h  +
push [ebp+hDlg]  +
call ds:GetDlgItem  +
cmp dword_101E0D8 ebx +
mov [ebp+var_214] eax +
mov [ebp+hDC] ebx +
jle loc_1005437  +
jmp loc_100539C  +
***
cmp dword_101E468 ebx +
jz loc_100821A  +
cmp dword_101E46C ebx +
jnz loc_100821A  +
push 50h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_100A057  +
mov ecx eax +
call sub_10063C5  +
jmp loc_100A059  +
mov ecx eax +
call sub_1006335  +
jmp loc_1009FDF  +
***
mov [ebp-3A0h] ebx +
jmp loc_1009EA5  +
mov eax dword_101FDC8 +
cmp eax ebx +
jnz loc_1009F0E  +
jmp loc_1008F7D  +
***
push esi  +
push ebx  +
mov dword_101FAC8 eax +
mov dword_101FACC ebx +
call ds:CreateEventW  +
push offset idThread  +
push ebx  +
mov edi eax +
push edi  +
push offset sub_10017D5  +
push ebx  +
push ebx  +
mov [ebp-3A4h] edi +
call ds:CreateThread  +
mov hHandle eax +
cmp edi ebx +
jz loc_100826B  +
push 3E8h  +
push edi  +
call ds:WaitForSingleObject  +
push 4Ch  +
mov dword_101E0D8 6 +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_1009FBB  +
mov ecx eax +
call sub_1006385  +
jmp loc_1009FBD  +
***
call sub_1007EF5  +
test al al +
jnz loc_100A06B  +
push 8Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jnz loc_100A018  +
jmp loc_100A021  +
mov ecx eax +
call sub_100B3E5  +
jmp loc_100A045  +
***
test byte ptr [esi+1Ch] 8 +
jz loc_1005268  +
mov eax [esi+28h] +
xor ebx ebx +
push ebx  +
push ebx  +
push 1032h  +
push 41Dh  +
push dword ptr [edi+4]  +
mov [ebp+hWnd] eax +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
jmp loc_100C906  +
cmp eax [edi+18h] +
jz loc_1005268  +
mov ecx edi +
mov [edi+18h] eax +
call sub_1008321  +
jmp loc_1005268  +
test byte ptr [esi+0Ch] 1 +
jnz loc_100C9AE  +
jmp loc_1005268  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor eax eax +
mov esi ecx +
cmp eax [esi+18h] +
push edi  +
mov edi ds:GetDlgItem +
sbb eax eax +
neg eax  +
push eax  +
push 41Ah  +
push dword ptr [esi+4]  +
call edi  +
mov ebx ds:EnableWindow +
push eax  +
call ebx  +
xor eax eax +
cmp dword ptr [esi+18h] 1 +
setz al  +
push eax  +
push 418h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
cmp dword ptr [esi+18h] 0 +
jz loc_100C849  +
cmp dword_101E158 0 +
jz loc_100C879  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1008396  +
jmp ___tmainCRTStartup  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101E08C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_100D577  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jnz loc_100D58B  +
jmp loc_100D593  +
***
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
and [ebp+WndClass.style] 0 +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp+WndClass.lpfnWndProc] +
stos   +
lea eax [ebp+WndClass] +
push eax  +
push offset aButton  +
push hInstance  +
call ds:GetClassInfoW  +
pop edi  +
test eax eax +
jz locret_1008469  +
mov eax [ebp+WndClass.lpfnWndProc] +
mov dword_101E0E0 eax +
mov eax hInstance +
mov [ebp+WndClass.hInstance] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.lpfnWndProc] offset loc_10045FF +
mov [ebp+WndClass.lpszClassName] offset aDavesframeclas +
call ds:RegisterClassW  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_14] +
push eax  +
lea eax [ebp+wLanguage] +
push eax  +
push [ebp+wLanguage]  +
push [ebp+arg_4]  +
push [ebp+hModule]  +
call sub_100698D  +
mov ebx eax +
test ebx ebx +
jl loc_1008503  +
push esi  +
movzx esi word ptr [ebp+arg_14] +
lea eax [ebp+arg_14] +
push eax  +
add esi esi +
lea eax [esi+2] +
push eax  +
push [ebp+arg_10]  +
call [ebp+arg_C]  +
mov ebx eax +
test ebx ebx +
jl loc_1008502  +
push esi  +
push [ebp+wLanguage]  +
push [ebp+arg_14]  +
call memcpy  +
mov ecx [ebp+arg_14] +
add esp 0Ch +
xor eax eax +
mov [esi+ecx] ax +
mov eax [ebp+arg_14] +
mov [edi] eax +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100855F  +
mov esi [ebp+8] +
test eax eax +
jl loc_100854F  +
push dword ptr [ebp-4]  +
push esi  +
push 0DB8h  +
push 0  +
call ds:LoadStringW  +
test eax eax +
jz loc_100854F  +
pop esi  +
leave   +
retn 8  +
***
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100854A  +
jmp loc_100C3BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7FFFFFFFh +
ja loc_100C3AD  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
push dword ptr [ebp+14h]  +
push 0FFFFFFEBh  +
push ebx  +
call ds:SetWindowLongW  +
mov ecx [ebp+14h] +
push ebx  +
call sub_10085A7  +
jmp loc_10045F1  +
***
call ds:IsThemeActive  +
jmp loc_100D195  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hDlg] +
push esi  +
push edi  +
push 0BBAh  +
mov esi ecx +
push eax  +
mov [esi+4] eax +
call ds:GetDlgItem  +
push dword ptr [esi+18h]  +
mov esi ds:SendMessageW +
push 1  +
mov edi eax +
push 1003h  +
push edi  +
call esi  +
push 0FFFFFFF0h  +
push edi  +
call ds:GetWindowLongW  +
or eax 8 +
push eax  +
push 0FFFFFFF0h  +
push edi  +
call ds:SetWindowLongW  +
push 10020h  +
push 0  +
push 1036h  +
push edi  +
call esi  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1008635  +
push eax  +
call sub_100863F  +
test eax eax +
jz loc_1008635  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100D568  +
push 2  +
pop eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_100693B  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_100868E  +
cmp ecx 0FFFFFFFFh +
jz loc_100868E  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1008687  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1008687  +
cmp edx 10000000h +
jnb loc_1008687  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_100D55E  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10086B4  +
retn 4  +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
push dword ptr [ebp+8]  +
call sub_10086EB  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+dwBytes] 0FFFFFFFFh +
ja loc_100871B  +
push [ebp+dwBytes]  +
push [ebp+dwFlags]  +
push [ebp+hHeap]  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1008714  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 10h  +
mov eax 8007000Eh +
jmp loc_1008710  +
mov eax 80070216h +
jmp loc_1008710  +
***
mov eax idThread +
test eax eax +
jz loc_100166B  +
cmp dword_101E0CC 0 +
jz loc_100166B  +
push 0  +
push 0  +
push 403h  +
push eax  +
call esi  +
test eax eax +
jz loc_100166B  +
mov eax hHandle +
test eax eax +
jz loc_100166B  +
push 0BB8h  +
push eax  +
call ds:WaitForSingleObject  +
push hHandle  +
call ds:CloseHandle  +
jmp loc_100166B  +
***
mov eax [ebp+lpMem] +
not eax  +
mov [ebp+var_774] eax +
lea eax [ebp+var_77C] +
push eax  +
push 2  +
call esi  +
inc [ebp+lpMem]  +
mov eax [ebp+lpMem] +
cmp eax dword_101F6BC +
jb loc_100877A  +
push 80h  +
lea eax [ebp+var_764] +
push eax  +
push 2713h  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+var_77C] +
push eax  +
push 1  +
mov [ebp+var_774] ebx +
mov [ebp+var_770] 4 +
call esi  +
lea eax [ebp+var_77C] +
push eax  +
push 2  +
mov [ebp+var_770] ebx +
call esi  +
push ebx  +
mov idThread ebx +
call ds:PostQuitMessage  +
jmp loc_10018E4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
lea eax [esi+24Ch] +
mov ebx [eax] +
push edi  +
jmp loc_100BAB7  +
***
mov eax [esi+10h] +
cmp eax ebx +
jz loc_1008834  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi+10h] ebx +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1008845  +
push eax  +
call ds:DestroyWindow  +
mov [esi+4] ebx +
mov eax [esi+3Ch] +
cmp eax ebx +
jnz loc_100BAC1  +
jmp loc_100BAD3  +
***
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
push hWnd  +
call ds:DestroyWindow  +
jmp loc_100166B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push 0  +
push 0  +
push 101Fh  +
push [ebp+hWnd]  +
call esi  +
push 6Ch  +
push 0FFh  +
mov edi offset unk_101E3A8 +
push edi  +
mov [ebp+hWnd] eax +
call memset  +
add esp 0Ch +
push edi  +
push 0  +
push 0  +
push 1200h  +
push [ebp+hWnd]  +
call esi  +
push eax  +
push 1211h  +
push [ebp+hWnd]  +
call esi  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [esi+0Ch]  +
call ebx  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
push edi  +
lea eax [ebp+var_77C] +
push ebx  +
push eax  +
call memset  +
mov eax hWnd +
add esp 0Ch +
mov [ebp+var_77C] edi +
mov [ebp+var_778] eax +
mov [ebp+lpMem] ebx +
cmp dword_101F6BC ebx +
jbe loc_10087A7  +
jmp loc_100877A  +
***
mov eax dword_101E158 +
test eax eax +
jl loc_100895A  +
cmp eax dword_101E0D8 +
jge loc_100895A  +
mov eax dword_101E548[eax*4] +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+8]  +
xor esi esi +
cmp dword_101E0D8 esi +
jle loc_1008979  +
mov ecx dword_101E548[esi*4] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
inc esi  +
cmp esi dword_101E0D8 +
jl loc_1008964  +
mov ecx offset unk_101E138 +
call sub_1008995  +
push 0  +
call ds:PostQuitMessage  +
jmp loc_100166B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push 0  +
push 20006h  +
push 0  +
push offset Class  +
push 0  +
push offset aSoftwareMicros  +
push 80000001h  +
mov edi ecx +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_10094E4  +
push 330h  +
push edi  +
push 3  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
test eax eax +
jnz loc_10094EE  +
call ds:RegCloseKey  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx ecx +
push 0BBAh  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
mov [ebp-8] eax +
test eax eax +
jz loc_1008A87  +
and dword ptr [ebp-4] 0 +
push esi  +
mov esi ds:SendMessageW +
push edi  +
lea ecx [ebp-34h] +
push ecx  +
push 0  +
mov edi 105Fh +
push edi  +
mov dword ptr [ebp-34h] 0Ah +
push eax  +
call esi  +
test eax eax +
jz loc_1008A85  +
mov eax [ebp-20h] +
cmp eax 4 +
ja loc_1008A75  +
mov ecx [ebp-2Ch] +
imul eax eax +
mov dword_101F35C[eax] ecx +
inc dword ptr [ebp-4]  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-4]  +
push edi  +
push dword ptr [ebp-8]  +
jmp loc_1008A5B  +
***
pop edi  +
pop esi  +
mov ecx offset unk_101E47C +
call sub_1008AAD  +
mov eax [ebx+4] +
test eax eax +
jz loc_1008AA3  +
push eax  +
call ds:DestroyWindow  +
and dword ptr [ebx+4] 0 +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push esi  +
push esi  +
push offset aSoftwareMicros  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1008AFE  +
push 64h  +
push offset Data  +
push 3  +
push esi  +
push offset aUsrcolumnsetti  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_1008AF5  +
inc esi  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi [eax] +
jmp loc_1008B15  +
mov eax [esi+0Ch] +
xor ebx ebx +
cmp eax ebx +
jnz loc_1008B03  +
jmp loc_100881B  +
***
dec edi  +
js loc_1008B2E  +
mov eax [esi+0Ch] +
mov eax [eax+4] +
mov ecx [eax+edi*4] +
cmp ecx ebx +
jz loc_1008B15  +
push 1  +
call sub_1002538  +
jmp loc_1008B15  +
***
push dword ptr [esi+0Ch]  +
call ds:COMCTL32_329  +
mov [esi+0Ch] ebx +
jmp loc_100881B  +
***
mov [esi+0Ch] ebx +
jmp loc_100A1F0  +
***
mov ecx esi +
call sub_1004795  +
lea edi [esi+6Ch] +
mov esi [edi] +
jmp loc_100A243  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+34h] +
xor ebx ebx +
cmp eax ebx +
jz loc_1008B9D  +
push eax  +
call EvtClose  +
push dword ptr [esi+10h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100C386  +
***
cmp [esi+30h] ebx +
jz loc_1008BC2  +
lea eax [esi+14h] +
push eax  +
call ds:RtlDeleteCriticalSection  +
cmp [esi+4] ebx +
jz loc_1008C2A  +
push edi  +
mov edi ds:SendMessageW +
lea eax [ebp-2Ch] +
push eax  +
push ebx  +
push 105Fh  +
push dword ptr [esi+0Ch]  +
mov dword ptr [ebp-2Ch] 2 +
call edi  +
test eax eax +
jz loc_100C39D  +
mov eax [ebp-24h] +
mov dword_101E428[ebx*4] eax +
mov dword_101E43C[ebx*4] ebx +
inc ebx  +
cmp ebx 5 +
jl loc_1008BCE  +
push offset dword_101E43C  +
push 5  +
push 1211h  +
push 0  +
push 0  +
push 101Fh  +
push dword ptr [esi+0Ch]  +
call edi  +
push eax  +
call edi  +
push dword ptr [esi+4]  +
call ds:DestroyWindow  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_100C6D8  +
push eax  +
call ds:DestroyWindow  +
mov [esi+4] ebx +
jmp loc_100C6D8  +
***
push dword ptr [esi+38h]  +
mov dword ptr [esi+2Ch] 1 +
call ds:SetEvent  +
push 0FFFFFFFFh  +
push dword ptr [esi+3Ch]  +
call ds:WaitForSingleObject  +
push dword ptr [esi+40h]  +
call edi  +
mov [esi+40h] ebx +
mov eax [esi+38h] +
cmp eax ebx +
jz loc_1008C88  +
push eax  +
call edi  +
mov [esi+38h] ebx +
mov eax [esi+3Ch] +
cmp eax ebx +
jz loc_1008C95  +
push eax  +
call edi  +
mov [esi+3Ch] ebx +
pop edi  +
mov [esi+14h] ebx +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
test eax eax +
jz loc_1008CBA  +
push eax  +
call ds:DestroyWindow  +
and dword ptr [esi+1Ch] 0 +
mov ecx esi +
call sub_1008CCA  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+24h] +
test ecx ecx +
jnz loc_100B3AF  +
mov eax [esi+28h] +
test eax eax +
jnz loc_100B3D0  +
pop esi  +
retn   +
***
push 3F1h  +
push edi  +
call ds:GetDlgItem  +
mov ecx [ebp-4] +
push eax  +
call sub_1008D06  +
jmp loc_1003C41  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push 0  +
push 0  +
push 101Fh  +
push [ebp+hWnd]  +
call esi  +
push 80h  +
push 0FFh  +
mov edi offset dword_101E278 +
push edi  +
mov [ebp+hWnd] eax +
call memset  +
add esp 0Ch +
push edi  +
push 0  +
push 0  +
push 1200h  +
push [ebp+hWnd]  +
call esi  +
push eax  +
push 1211h  +
push [ebp+hWnd]  +
call esi  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10017B0 +
jz loc_1008D7C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
cmp [esi+68h] ebx +
ja loc_100B2B0  +
mov eax [esi+64h] +
xor edi edi +
cmp eax edi +
jnz loc_100B2D3  +
mov [esi+68h] edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 3  +
lea esi [ecx+30h] +
pop edi  +
mov eax [esi] +
test eax eax +
jz loc_1008DCF  +
push eax  +
call ds:DeleteObject  +
add esi 4 +
dec edi  +
jnz loc_1008DC2  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi [ecx+48h] +
test esi esi +
jnz sub_100C60B  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EE9B  +
test byte ptr [ebp+8] 1 +
jz loc_1008E0C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1008E3E  +
test byte ptr [ebp+8] 1 +
jz loc_1008E32  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001790 +
call sub_1008DDD  +
mov ecx esi +
call sub_1008E65  +
push dword ptr [esi+0Ch]  +
call ds:COMCTL32_329  +
pop esi  +
retn   +
***
mov edi edi +
push edi  +
mov edi ecx +
mov eax [edi+0Ch] +
test eax eax +
jz loc_1008E8E  +
push esi  +
mov esi [eax] +
dec esi  +
js loc_1008E8D  +
mov eax [edi+0Ch] +
mov eax [eax+4] +
mov ecx [eax+esi*4] +
test ecx ecx +
jz loc_1008E74  +
push 1  +
call sub_1009050  +
jmp loc_1008E74  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1008EBB  +
test byte ptr [ebp+8] 1 +
jz loc_1008EAF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001728 +
call sub_1008EDB  +
push dword ptr [esi+0Ch]  +
call ds:COMCTL32_329  +
pop esi  +
retn   +
***
mov edi edi +
push edi  +
mov edi ecx +
mov eax [edi+0Ch] +
test eax eax +
jz loc_1008F04  +
push esi  +
mov esi [eax] +
dec esi  +
js loc_1008F03  +
mov eax [edi+0Ch] +
mov eax [eax+4] +
mov ecx [eax+esi*4] +
test ecx ecx +
jz loc_1008EEA  +
push 1  +
call sub_100191F  +
jmp loc_1008EEA  +
pop esi  +
pop edi  +
retn   +
***
mov ecx dword_101E548 +
cmp ecx ebx +
jz loc_1008F17  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
mov ecx dword_101E54C +
cmp ecx ebx +
jz loc_1008F28  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
mov ecx dword_101E550 +
cmp ecx ebx +
jz loc_1008F39  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
mov ecx dword_101E554 +
cmp ecx ebx +
jz loc_1008F4A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
mov ecx dwInitParam +
cmp ecx ebx +
jz loc_1008F5B  +
push 1  +
call sub_1008FB5  +
mov ecx dword_101E55C +
cmp ecx ebx +
jz loc_1008F6C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
cmp [ebp-3A4h] ebx +
jnz loc_1009F01  +
jmp loc_1008208  +
cmp dword_101F820 ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1009F1A  +
push offset unk_101F808  +
call ds:RtlDeleteCriticalSection  +
jmp loc_1009F1A  +
mov ecx [ebp-4] +
mov eax [ebp-3A0h] +
xor ecx ebp +
call sub_1001679  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1008FDB  +
test [ebp+arg_0] 1 +
jz loc_1008FCF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001748 +
call sub_1008D8D  +
mov ecx esi +
call sub_1008DB8  +
mov ecx esi +
call sub_1009007  +
lea ecx [esi+4] +
pop esi  +
jmp loc_100B237  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+54h] +
test eax eax +
jnz loc_100B2F9  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009044  +
test byte ptr [ebp+8] 1 +
jz loc_1009038  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1001770 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009076  +
test [ebp+arg_0] 1 +
jz loc_100906A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jnz loc_100C5AE  +
pop esi  +
retn   +
***
mov eax [ecx+0Ch] +
test eax eax +
jz locret_100909D  +
push 0  +
push eax  +
call ds:ShowWindow  +
retn   +
***
mov eax [esp+arg_C] +
cmp cl 40h +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
cmp esi 14h +
jz loc_10091F0  +
cmp esi 134h +
jbe loc_1004630  +
cmp esi 136h +
jbe loc_10091D4  +
cmp esi 138h +
jnz loc_1004630  +
call ds:IsThemeActive  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
jmp loc_1004646  +
***
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:GetClientRect  +
call ds:IsThemeActive  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+10h]  +
call ds:FillRect  +
xor eax eax +
inc eax  +
jmp loc_1004646  +
***
lea eax [ebp+X] +
push eax  +
push hWnd  +
call ds:GetClientRect  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push 14h  +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-0Ch]  +
push [ebp+X]  +
push 0  +
push ebx  +
call ds:SetWindowPos  +
and esi 0FFB4FFFFh +
push esi  +
push 0FFFFFFF0h  +
push hWnd  +
call ds:SetWindowLongW  +
push 0  +
push hWnd  +
call ds:SetMenu  +
jmp loc_10049B6  +
mov ecx dwInitParam +
call sub_1012C0C  +
jmp locret_10049C5  +
***
cmp dword_101E158 0FFFFFFFFh +
jz loc_1004DDF  +
mov ecx [esi] +
mov eax [ecx] +
call dword ptr [eax+4]  +
push hWnd  +
call sub_10048D1  +
jmp loc_1004DDF  +
***
call ds:GetShellWindow  +
test eax eax +
jz loc_1005CF8  +
test byte ptr dword_101E458 20h +
jz loc_1005CF8  +
push edi  +
push [ebp+hWndTo]  +
call ds:ShowWindow  +
jmp loc_1005CF8  +
***
push [ebp+lParam]  +
push [ebp+wParam]  +
push eax  +
push hWnd  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
jmp loc_1001A12  +
***
test eax eax +
jl loc_1007F47  +
push 0  +
push 148h  +
lea eax [ebp+var_178] +
push eax  +
push 2  +
call esi  +
jmp loc_1007F1C  +
***
add edi eax +
inc edx  +
jmp loc_1005E8C  +
xor edx edx +
add esi ecx +
inc edx  +
jmp loc_1005E94  +
xor edx edx +
sub edi eax +
inc edx  +
jmp loc_1005EA8  +
xor edx edx +
sub esi ecx +
inc edx  +
jmp loc_1005EB2  +
push 15h  +
push eax  +
push eax  +
push esi  +
push edi  +
push eax  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
jmp loc_1005EBA  +
***
mov eax [eax+8] +
cmp eax 9 +
jz loc_1009365  +
cmp eax 0Dh +
jnz loc_1001B20  +
push esi  +
mov esi ds:GetKeyState +
push 11h  +
call esi  +
test ax ax +
jl loc_10094A9  +
push 12h  +
call esi  +
test ax ax +
jl loc_10094A9  +
push ebx  +
call ds:GetFocus  +
mov ebx eax +
push 32h  +
lea eax [ebp+ClassName] +
push eax  +
push ebx  +
call ds:GetClassNameW  +
test eax eax +
jz loc_10094A8  +
push edi  +
push 10h  +
call esi  +
xor ecx ecx +
test ax ax +
setnl cl  +
push offset aSyslistview32  +
lea eax [ebp+ClassName] +
push eax  +
mov [ebp+var_74] ecx +
call ds:StrCmpICW  +
mov edi ds:SendMessageW +
mov esi ds:GetParent +
test eax eax +
jnz loc_10093E5  +
push 0  +
push 0  +
push 101Fh  +
push ebx  +
call edi  +
mov ecx eax +
mov eax ebx +
jmp loc_10093FD  +
push offset aSysheader32  +
lea eax [ebp+ClassName] +
push eax  +
call ds:StrCmpICW  +
test eax eax +
jnz loc_1009445  +
push ebx  +
call esi  +
mov ecx ebx +
xor edx edx +
cmp eax edx +
jz loc_1009445  +
cmp ecx edx +
jz loc_1009445  +
mov edi [ebp+arg_0] +
cmp dword ptr [edi+8] 0Dh +
jnz loc_1009421  +
cmp ecx ebx +
jnz loc_10094A7  +
push ecx  +
push eax  +
call sub_100DA46  +
jmp loc_10094A0  +
cmp [ebp+var_74] edx +
jz loc_100942E  +
cmp eax ebx +
jnz loc_100942E  +
mov eax ecx +
jmp loc_1009495  +
cmp ecx ebx +
jnz loc_10094A7  +
cmp [ebp+var_74] edx +
jz loc_1009495  +
push edx  +
push eax  +
push eax  +
call esi  +
push eax  +
call ds:GetNextDlgTabItem  +
jmp loc_1009495  +
cmp [ebp+var_74] 0 +
jnz loc_10094A7  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 9 +
jnz loc_10094A7  +
push 1  +
push ebx  +
push ebx  +
call esi  +
push eax  +
call ds:GetNextDlgTabItem  +
mov esi eax +
test esi esi +
jz loc_10094A7  +
push 32h  +
lea eax [ebp+ClassName] +
push eax  +
push esi  +
call ds:GetClassNameW  +
test eax eax +
jz loc_10094A7  +
push offset aSyslistview32  +
lea eax [ebp+ClassName] +
push eax  +
call ds:StrCmpICW  +
test eax eax +
jnz loc_10094A7  +
push eax  +
push eax  +
push 101Fh  +
push esi  +
call edi  +
test eax eax +
jz loc_10094A7  +
push eax  +
call ds:SetFocus  +
mov [ebp+var_6C] 1 +
pop edi  +
pop ebx  +
pop esi  +
jmp loc_1001B20  +
***
call sub_100DD74  +
jmp loc_10089FA  +
call ds:RegCloseKey  +
jmp loc_10094E4  +
***
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100950C  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jge loc_1007D6D  +
jmp loc_1009526  +
xor edi edi +
mov [esi+4] ebx +
mov dword ptr [esi+0Ch] 3 +
inc edi  +
jmp loc_1007D7B  +
xor edi edi +
inc edi  +
mov dword ptr [esi+4] 3E8h +
mov [esi+0Ch] edi +
jmp loc_1007D7B  +
cmp dword_101E46C ebx +
jnz loc_1007DBD  +
call sub_100561E  +
test eax eax +
jz loc_1007DBD  +
mov [esi+32Ch] edi +
mov edx offset dword_1009568 +
xor eax eax +
lea ecx [esi+40h] +
jmp loc_1007DC4  +
***
cmp edx ebx +
jbe loc_1009589  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_10095C3  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_10095AD  +
cmp [eax] cx +
jz loc_10095A9  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100959F  +
cmp esi ecx +
jnz loc_10095B6  +
mov [ebp+arg_4] 80070057h +
jmp loc_10095BA  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_1003CF2  +
xor ecx ecx +
jmp loc_1003CF2  +
***
xor eax eax +
mov [edi+esi*2] ax +
jmp loc_10019B0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ds:GetKeyState +
xor ebx ebx +
push 10h  +
mov [ebp+lpData] ecx +
mov [ebp+hKey] ebx +
mov [ebp+cbData] 330h +
call esi  +
test ax ax +
jge loc_1006401  +
push 12h  +
call esi  +
test ax ax +
jge loc_1006401  +
push 11h  +
call esi  +
test ax ax +
jge loc_1006401  +
push ebx  +
push ebx  +
push 0C3B4h  +
push ebx  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
inc ebx  +
jmp loc_1009699  +
xor ecx ecx +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax ebx +
jz loc_100964E  +
jle loc_100964C  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
test ecx ecx +
jge loc_1007F4D  +
jmp loc_1009698  +
jle loc_1009660  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
test ecx ecx +
jl loc_1009698  +
cmp [ebp+Type] 3 +
jnz loc_1009693  +
cmp [ebp+cbData] 330h +
jnz loc_1009693  +
mov eax dword_101E0D8 +
lea ecx [eax-1] +
mov eax [ebp+lpData] +
cmp [eax+20h] ecx +
jg loc_1009693  +
cmp dword ptr [eax+4] 0 +
jnz loc_1009698  +
cmp dword ptr [eax+0Ch] 3 +
jz loc_1009698  +
mov ebx 80004005h +
pop edi  +
cmp [ebp+hKey] 0 +
jz loc_10096A8  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test ebx ebx +
jl loc_10096B5  +
cmp ebx 1 +
jnz loc_1007F77  +
mov ecx [ebp+lpData] +
call sub_1007D35  +
jmp loc_1007F77  +
***
cmp dword ptr dbl_101E118+4 eax +
jz loc_10024D6  +
fild  dbl_101E110 +
fild  dbl_101E118 +
fdivp st(1) st +
fmul  ds:dbl_100D5D0 +
call _ftol2  +
jmp loc_10024D6  +
***
call ds:GetForegroundWindow  +
jmp loc_1001EA6  +
lea ebx [ecx-1] +
jmp loc_1001B95  +
push edi  +
push eax  +
call esi  +
push eax  +
call ds:HeapFree  +
jmp loc_1001BE7  +
push edi  +
push edi  +
push 404h  +
push idThread  +
call ds:PostThreadMessageW  +
mov dword_101E0CC eax +
jmp loc_1001BE7  +
***
push eax  +
call ds:TerminateProcess  +
jmp loc_100541F  +
***
cmp ecx 3 +
jnz sub_1005C74  +
cmp eax 2 +
jz loc_1007FC3  +
jmp sub_1005C74  +
***
mov esi ds:SetTimer +
push ebx  +
push 0FA0h  +
push 22Bh  +
push hWnd  +
call esi  +
cmp dword_101FDAC ebx +
jz sub_1005658  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_10097E6  +
cmp al bl +
jnz sub_1005658  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz sub_1005658  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
cmp ebx dword_101FDA0 +
jnz sub_1005658  +
cmp eax ecx +
jnz sub_1005658  +
push offset dword_1009838  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100DD53  +
jmp sub_1005658  +
***
push 0  +
push 0  +
push 404h  +
push idThread  +
call esi  +
mov dword_101E0CC eax +
jmp loc_100161D  +
sub eax 5 +
jnz loc_1003C1E  +
push [ebp+lParam]  +
mov edi ds:SendMessageW +
push [ebp+wParam]  +
push ebx  +
push dword_101E0A0  +
call edi  +
xor esi esi +
cmp dword_101E0D8 esi +
jle loc_10098B2  +
push [ebp+lParam]  +
mov ecx dword_101E548[esi*4] +
push [ebp+wParam]  +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+14h]  +
push eax  +
call edi  +
inc esi  +
cmp esi dword_101E0D8 +
jl loc_1009893  +
cmp ebx 1Ah +
jnz loc_100166B  +
lea eax [ebp+X] +
push eax  +
push hWnd  +
call ds:GetClientRect  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+X] +
push eax  +
push 0  +
push hWnd  +
call sub_1005CE3  +
jmp loc_100166B  +
cmp [ebp+wParam] 0 +
jz loc_100166B  +
push hWnd  +
call sub_100D98F  +
mov ecx offset unk_101E138 +
call sub_1008995  +
jmp loc_100166B  +
mov eax [ebp+lParam] +
shr eax 10h +
cwde   +
push eax  +
movsx eax word ptr [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
push [ebp+hWnd]  +
jmp loc_10098E1  +
dec ebx  +
dec ebx  +
jz loc_100993E  +
sub ebx 1Dh +
jnz loc_100166B  +
test al 10h +
jz loc_100166B  +
jmp loc_10099C6  +
test byte ptr dword_101E458 4 +
jnz loc_100166B  +
xor eax eax +
cmp [ebp+wParam] eax +
jz loc_100995C  +
push 3  +
push eax  +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
jmp loc_1009964  +
push 13h  +
push eax  +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFEh  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
jmp loc_100166B  +
cmp eax 1 +
jnz loc_100166B  +
push hWnd  +
call ds:IsZoomed  +
test eax eax +
jnz loc_100166B  +
push 2  +
jmp loc_1009C22  +
mov ecx [ebp+lParam] +
mov eax [ecx+8] +
add eax 1FFh +
cmp eax 1 +
ja loc_100166B  +
push ecx  +
push [ebp+hWnd]  +
call sub_100E1F2  +
jmp loc_100166D  +
sub ebx 4 +
jnz loc_1003C04  +
jmp loc_1009ACE  +
mov ecx eax +
shl ecx 1Bh +
sar ecx 1Fh +
not ecx  +
shl ecx 4 +
xor ecx eax +
and ecx 10h +
xor eax ecx +
mov dword_101E458 eax +
lea eax [ebp+X] +
push eax  +
push hWnd  +
call edi  +
cmp dword_101E0D8 3 +
jle loc_1009A0A  +
mov ecx dword_101E554 +
call sub_1004DEC  +
mov ecx dword_101E554 +
mov eax [ecx] +
call dword ptr [eax+18h]  +
cmp dword_101E0D8 4 +
jle loc_1009A29  +
mov ecx dwInitParam +
call sub_10120FB  +
mov ecx dwInitParam +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push 1  +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-0Ch]  +
push [ebp+X]  +
push hWnd  +
call ds:MoveWindow  +
push 1  +
xor esi esi +
push esi  +
push esi  +
push hWnd  +
call ds:RedrawWindow  +
push [ebp+hWnd]  +
call sub_10048D1  +
mov eax dword_101E458 +
and al 10h +
movsx eax al +
neg eax  +
sbb eax eax +
and eax 160h +
add eax 0A3h +
jmp loc_1009B35  +
mov eax [ebp+wParam] +
shr eax 10h +
or ebx 0FFFFFFFFh +
cmp ax bx +
jz loc_1009A93  +
movzx ebx ax +
mov esi eax +
and esi 10h +
jz loc_1009AAA  +
movzx eax word ptr [ebp+wParam] +
push eax  +
push [ebp+lParam]  +
call ds:GetSubMenu  +
jmp loc_1009AAC  +
xor eax eax +
push ebx  +
movzx ecx si +
push eax  +
movzx eax word ptr [ebp+wParam] +
neg ecx  +
sbb ecx ecx +
not ecx  +
and ecx eax +
push ecx  +
push [ebp+lParam]  +
push [ebp+hWnd]  +
call sub_100E0DA  +
jmp loc_100166B  +
mov eax [ebp+lParam] +
shr eax 10h +
test ax ax +
jnz loc_100166B  +
xor esi esi +
push esi  +
push [ebp+wParam]  +
call ds:GetMenuItemID  +
sub eax 9C41h +
jz loc_1009B30  +
sub eax 5 +
jz loc_1009B29  +
sub eax 10h +
jz loc_1009B22  +
sub eax 14h +
jz loc_1009B1B  +
sub eax 7 +
jz loc_1009B14  +
sub eax 4 +
jnz loc_100166B  +
mov eax 0C352h +
jmp loc_1009B35  +
mov eax 0C354h +
jmp loc_1009B35  +
mov eax 0C353h +
jmp loc_1009B35  +
mov eax 0C355h +
jmp loc_1009B35  +
mov eax 0C351h +
jmp loc_1009B35  +
mov eax 0C350h +
push esi  +
push esi  +
push eax  +
push dword_101E158  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
jmp loc_100166B  +
cmp [ebp+wParam] 0 +
jnz loc_1009B63  +
push 0  +
push [ebp+hWnd]  +
call sub_1001B36  +
jmp loc_100166B  +
mov eax 22Ch +
cmp [ebp+wParam] eax +
jnz loc_1009BA4  +
push eax  +
push [ebp+hWnd]  +
call ds:KillTimer  +
push 1  +
push [ebp+hWnd]  +
call sub_1001B36  +
mov eax uElapse +
test eax eax +
jz loc_100166B  +
push 0  +
push eax  +
push 0  +
push hWnd  +
call ds:SetTimer  +
jmp loc_100166B  +
mov eax 22Bh +
cmp [ebp+wParam] eax +
jnz loc_100166B  +
push eax  +
push [ebp+hWnd]  +
call ds:KillTimer  +
movzx eax byte_101E080 +
push eax  +
push 0  +
push 64h  +
push dword ptr dbl_101E110+4  +
push dword ptr dbl_101E110  +
call sub_1002233  +
push dword ptr dbl_101E118+4  +
push dword ptr dbl_101E118  +
push edx  +
push eax  +
call sub_1001AAD  +
push eax  +
call sub_100561E  +
push eax  +
call sub_101ACFC  +
jmp loc_100166B  +
movzx eax word ptr [ebp+wParam] +
push eax  +
push [ebp+hWnd]  +
call sub_100E3DB  +
jmp loc_100166B  +
dec ebx  +
jnz loc_10048B7  +
jmp loc_1009C42  +
call sub_100DA05  +
push 40Bh  +
push 0  +
push [ebp+hWnd]  +
call ds:SetWindowLongW  +
jmp loc_10056E4  +
push [ebp+lParam]  +
push [ebp+hWnd]  +
call sub_1019396  +
jmp loc_100166B  +
mov eax dword_101FDCC +
test eax eax +
jz loc_100885B  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
push dword_101FDCC  +
call ds:CloseHandle  +
jmp loc_100885B  +
mov ebx ds:SendMessageW +
push eax  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1009D33  +
push esi  +
push [ebp+hWnd]  +
call edi  +
mov [ebp-0Ch] eax +
lea eax [ebp-0Ch] +
push eax  +
mov [ebp-8] esi +
mov dword ptr [ebp-4] 0FFFFFDD9h +
call sub_1004DCA  +
test eax eax +
jz loc_100166B  +
mov eax dword_101E158 +
cmp eax 0FFFFFFFFh +
jz loc_100166B  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 406h  +
jmp loc_1009D1D  +
mov edi ds:GetDlgItem +
push 0  +
push 1  +
push 130Ch  +
mov esi 3E8h +
push esi  +
push [ebp+hWnd]  +
call edi  +
mov ebx ds:SendMessageW +
push eax  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1009D33  +
push esi  +
push [ebp+hWnd]  +
call edi  +
mov [ebp-0Ch] eax +
lea eax [ebp-0Ch] +
push eax  +
mov [ebp-8] esi +
mov dword ptr [ebp-4] 0FFFFFDD9h +
call sub_1004DCA  +
test eax eax +
jz loc_100166B  +
mov eax dword_101E158 +
cmp eax 0FFFFFFFFh +
jz loc_100166B  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
mov eax dword_101E548[eax*4] +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+14h]  +
push eax  +
call ebx  +
jmp loc_100166B  +
push 0  +
call ds:MessageBeep  +
jmp loc_100166B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3D4h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push offset dword_101FD80  +
push offset unk_101FD88  +
xor esi esi +
push offset loc_100DC9F  +
xor ebx ebx +
inc esi  +
push offset dword_100A090  +
mov [ebp+var_3B4] edi +
mov [ebp+var_3A0] esi +
mov [ebp+var_3AC] ebx +
mov [ebp+var_3A4] ebx +
call sub_100DCF6  +
cmp dword_101FDAC ebx +
jz sub_1006421  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_1009DB3  +
cmp al bl +
jnz sub_1006421  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz sub_1006421  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_101FDA0 +
jnz sub_1006421  +
cmp eax ecx +
jnz sub_1006421  +
push offset dword_100A0A0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100DD53  +
jmp sub_1006421  +
***
cmp eax ebx +
jge loc_1005272  +
jmp loc_1009EA5  +
lea eax [ebp-3B0h] +
push eax  +
lea eax [ebp-3ACh] +
push eax  +
lea eax [ebp-3D4h] +
push eax  +
push ebx  +
push offset aDisabletaskmgr  +
push dword ptr [ebp-3A8h]  +
mov dword ptr [ebp-3B0h] 4 +
call ds:RegQueryValueExW  +
push dword ptr [ebp-3A8h]  +
call ds:RegCloseKey  +
cmp [ebp-3ACh] ebx +
jz loc_10052CD  +
mov esi ds:LoadStringW +
push 104h  +
lea eax [ebp-39Ch] +
push eax  +
push 2729h  +
push edi  +
call esi  +
push 0C8h  +
lea eax [ebp-194h] +
push eax  +
push 272Ah  +
push edi  +
call esi  +
push 10h  +
lea eax [ebp-39Ch] +
push eax  +
lea eax [ebp-194h] +
push eax  +
push ebx  +
call ds:MessageBoxW  +
jmp loc_10081FD  +
mov eax hMutex +
mov edi ds:CloseHandle +
or esi 0FFFFFFFFh +
cmp eax ebx +
jz loc_1009ED4  +
push eax  +
call ds:ReleaseMutex  +
mov eax hMutex +
cmp eax ebx +
jz loc_1009ED4  +
cmp eax esi +
jz loc_1009ED4  +
push eax  +
call edi  +
mov hMutex esi +
mov eax hObject +
test eax eax +
jz loc_1008F06  +
mov eax hObject +
cmp eax esi +
jz loc_1008F06  +
push hObject  +
call edi  +
mov hObject esi +
jmp loc_1008F06  +
push dword ptr [ebp-3A4h]  +
call edi  +
jmp loc_1008208  +
push eax  +
call ds:CloseThreadpoolCleanupGroup  +
jmp loc_1008F7D  +
push offset dword_101FD80  +
call sub_100DD22  +
jmp loc_1008F9C  +
call sub_100DA9D  +
call ds:GetErrorMode  +
or eax 8001h +
push eax  +
call ds:SetErrorMode  +
push offset unk_101F808  +
call ds:RtlInitializeCriticalSection  +
test eax eax +
jl loc_10081FD  +
mov dword_101F820 esi +
mov dword_101FAC0 3 +
mov dword_101FAC8 ebx +
mov dword_101FACC ebx +
mov dword_101FAD0 ebx +
mov dword_101FAD4 ebx +
mov dword_101FAD8 ebx +
mov dword_101FADC ebx +
mov dword_101FAE0 esi +
mov dword_101FAE4 28h +
mov dword_101FDC4 esi +
mov dword_101FAC4 ebx +
call ds:CreateThreadpoolCleanupGroup  +
mov dword_101FDC8 eax +
cmp eax ebx +
jnz sub_1008225  +
jmp loc_10081FD  +
***
push 40Bh  +
push eax  +
call ds:ChangeWindowMessageFilterEx  +
jmp loc_1005DC7  +
***
push 6  +
call ds:GetStockObject  +
mov [esi] eax +
jmp loc_100797F  +
***
cmp dword_101FDC0 0 +
jz loc_100434C  +
push 60h  +
push nNumerator  +
push esi  +
call ds:MulDiv  +
movsx esi ax +
jmp loc_100434C  +
mov eax [ebp+var_58] +
push dword ptr [eax+14h]  +
push [ebp+var_48]  +
call ds:SelectObject  +
mov esi edi +
sub esi [ebp+var_54] +
mov [ebp+var_60] eax +
xor edi edi +
jmp loc_10044FC  +
cmp dword_101FDC0 0 +
jz loc_100A13B  +
push 60h  +
push nNumerator  +
push 4  +
call ds:MulDiv  +
cwde   +
jmp loc_100A13E  +
push 4  +
pop eax  +
push 0CC0020h  +
push 0  +
push 0  +
push [ebp+var_48]  +
add eax edi +
push [ebp+var_4C]  +
push 21h  +
push eax  +
push [ebp+var_5C]  +
push dword ptr [ebx+18h]  +
call ds:BitBlt  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov ecx esi +
jl loc_10044F2  +
mov ecx eax +
jmp loc_10044F2  +
mov eax [ebp+var_58] +
push dword ptr [eax+1Ch]  +
push [ebp+var_48]  +
call ds:SelectObject  +
and [ebp+var_4C] 0 +
cmp [ebp+var_54] 0 +
mov [ebp+var_50] eax +
jle loc_10043B8  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov [ebp+var_58] eax +
jg loc_100A19F  +
mov [ebp+var_58] esi +
cmp dword_101FDC0 0 +
jz loc_100A1BB  +
push 60h  +
push nNumerator  +
push 4  +
call ds:MulDiv  +
cwde   +
jmp loc_100A1BE  +
push 4  +
pop eax  +
sub eax [ebp+var_54] +
push 0CC0020h  +
add eax [ebp+var_4C] +
push 0  +
push 0  +
push [ebp+var_48]  +
add eax edi +
push [ebp+var_58]  +
push 21h  +
push eax  +
push [ebp+var_5C]  +
push dword ptr [ebx+18h]  +
call ds:BitBlt  +
jmp loc_10044C6  +
mov ecx eax +
jmp loc_10044E2  +
***
mov eax [esi+1Ch] +
mov edi ds:DeleteObject +
cmp eax ebx +
jz loc_100A203  +
push eax  +
call edi  +
mov [esi+1Ch] ebx +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_100A210  +
push eax  +
call edi  +
mov [esi+14h] ebx +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_1008B6C  +
push eax  +
call edi  +
mov [esi+18h] ebx +
jmp loc_1008B6C  +
***
mov edx esi +
mov eax [edx] +
mov ecx [edx+4] +
mov esi [esi] +
push edx  +
mov [ecx] eax +
push ebx  +
mov [eax+4] ecx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp esi edi +
jnz loc_100A226  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
push edi  +
push dword ptr [esi+0Ch]  +
call ds:ReleaseDC  +
call sub_100DD74  +
jmp loc_1004C4F  +
call sub_100DD74  +
push dword ptr [esi+20h]  +
mov edi eax +
call ds:DeleteDC  +
and dword ptr [esi+20h] 0 +
mov eax edi +
jmp loc_1004C4F  +
***
push hWnd  +
call ds:GetClientRect  +
jmp loc_1004CAA  +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+Points] +
push eax  +
push 405h  +
mov ecx esi +
call sub_100EF56  +
mov esi ds:MulDiv +
cmp dword_101FDC0 edi +
jz loc_100A2BE  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
jmp loc_100A2C1  +
push 6  +
pop eax  +
push ebx  +
mov ebx [ebp-38h] +
add eax eax +
sub ebx eax +
sub ebx [ebp+var_28] +
mov [ebp+var_14] edi +
mov edi ds:DeferWindowPos +
mov ecx [ebp+var_8] +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+Points] +
push eax  +
mov eax [ebp+var_14] +
push ds:dword_1004B48[eax]  +
call sub_100EF56  +
mov ecx [ebp+Points.y] +
push 15h  +
xor eax eax +
push eax  +
push eax  +
add ecx ebx +
push ecx  +
push [ebp+Points.x]  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
jmp loc_1004D11  +
mov eax [ebp+Points.y] +
add ebx eax +
test byte ptr dword_101E458 10h +
jz loc_100A343  +
cmp dword_101FDC0 0 +
jz loc_100A331  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
jmp loc_100A334  +
push 6  +
pop eax  +
mov ebx [ebp-38h] +
add eax eax +
sub ebx eax +
sub ebx [ebp-40h] +
mov [ebp+var_14] ebx +
jmp loc_100A371  +
cmp dword_101FDC0 0 +
jz loc_100A35D  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
movsx ecx ax +
jmp loc_100A360  +
push 6  +
pop ecx  +
imul ecx ecx +
mov eax ebx +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_14] eax +
mov ebx eax +
cmp dword_101FDC0 0 +
jz loc_100A38C  +
push 60h  +
push nNumerator  +
push 10h  +
call esi  +
cwde   +
mov [ebp+cy] eax +
jmp loc_100A393  +
mov [ebp+cy] 10h +
cmp dword_101FDC0 0 +
jz loc_100A3AB  +
push 60h  +
push nNumerator  +
push 4  +
call esi  +
cwde   +
jmp loc_100A3AE  +
push 4  +
pop eax  +
add eax eax +
mov ecx eax +
mov eax ebx +
sub eax ecx +
sub eax [ebp+cy] +
mov ecx [ebp+var_8] +
mov [ebp+cy] eax +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push 3E9h  +
call sub_100EF56  +
cmp dword_101FDC0 0 +
jz loc_100A3E9  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
jmp loc_100A3EC  +
push 6  +
pop eax  +
mov ecx [ebp-3Ch] +
push 16h  +
add eax eax +
push ebx  +
sub ecx eax +
sub ecx [ebp+var_54] +
xor eax eax +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov ecx [ebp+var_8] +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+var_64] +
push eax  +
push 43Fh  +
call sub_100EF56  +
jmp loc_1004D39  +
cmp dword_101FDC0 0 +
jz loc_100A439  +
push 60h  +
push nNumerator  +
push 10h  +
call esi  +
cwde   +
jmp loc_100A43C  +
push 10h  +
pop eax  +
mov ecx [ebp+var_2C] +
sub ecx [ebp+Points.x] +
push 14h  +
push [ebp+cy]  +
push ecx  +
mov ecx [ebp+var_60] +
add eax ecx +
push eax  +
push [ebp+Points.x]  +
push 0  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov ecx [ebp+var_8] +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+Points] +
push eax  +
push 428h  +
call sub_100EF56  +
cmp dword_101FDC0 0 +
jz loc_100A488  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
jmp loc_100A48B  +
push 6  +
pop eax  +
mov ecx [ebp+var_2C] +
sub ecx [ebp+Points.x] +
push 14h  +
push ebx  +
push ecx  +
lea eax [ebx+eax*2] +
push eax  +
push [ebp+Points.x]  +
push 0  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov ecx [ebp+var_8] +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+Points] +
push eax  +
push 3EDh  +
call sub_100EF56  +
cmp dword_101FDC0 0 +
jz loc_100A4D6  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
mov [ebp+var_1C] eax +
jmp loc_100A4DD  +
mov [ebp+var_1C] 6 +
cmp dword_101FDC0 0 +
jz loc_100A4F5  +
push 60h  +
push nNumerator  +
push 10h  +
call esi  +
cwde   +
jmp loc_100A4F8  +
push 10h  +
pop eax  +
mov ecx [ebp+var_2C] +
sub ecx [ebp+Points.x] +
push 14h  +
push [ebp+cy]  +
push ecx  +
mov ecx [ebp+var_1C] +
lea eax [eax+ecx*2] +
add eax ebx +
push eax  +
push [ebp+Points.x]  +
push 0  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov ecx [ebp+var_8] +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+Points] +
push eax  +
push 3EAh  +
call sub_100EF56  +
cmp dword_101FDC0 0 +
jz loc_100A54A  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
mov [ebp+var_1C] eax +
jmp loc_100A551  +
mov [ebp+var_1C] 6 +
cmp dword_101FDC0 0 +
jz loc_100A569  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
jmp loc_100A56C  +
push 6  +
pop eax  +
mov ecx [ebp+var_1C] +
mov edx [ebp-3Ch] +
push 14h  +
push ebx  +
add ecx ecx +
sub edx ecx +
sub edx [ebp+var_54] +
lea eax [ebx+eax*2] +
push edx  +
push eax  +
push [ebp+Points.x]  +
push 0  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
cmp dword_101FDC0 0 +
jz loc_100A5A8  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
movsx ebx ax +
jmp loc_100A5AB  +
push 6  +
pop ebx  +
cmp dword_101FDC0 0 +
jz loc_100A5C3  +
push 60h  +
push nNumerator  +
push 4  +
call esi  +
cwde   +
jmp loc_100A5C6  +
push 4  +
pop eax  +
mov ecx [ebp+var_8] +
imul eax eax +
neg ebx  +
add ebx ebx +
sub ebx eax +
sub ebx [ebp+var_54] +
lea eax [ebp+hWnd] +
add ebx [ebp-3Ch] +
push eax  +
lea eax [ebp+Points] +
push eax  +
push 3EEh  +
call sub_100EF56  +
cmp dword_101FDC0 0 +
jz loc_100A605  +
push 60h  +
push nNumerator  +
push 4  +
call esi  +
cwde   +
mov [ebp+var_1C] eax +
jmp loc_100A60C  +
mov [ebp+var_1C] 4 +
cmp dword_101FDC0 0 +
jz loc_100A627  +
push 60h  +
push nNumerator  +
push 6  +
call esi  +
cwde   +
mov [ebp+var_24] eax +
jmp loc_100A62E  +
mov [ebp+var_24] 6 +
cmp dword_101FDC0 0 +
jz loc_100A649  +
push 60h  +
push nNumerator  +
push 10h  +
call esi  +
cwde   +
mov [ebp+var_20] eax +
jmp loc_100A650  +
mov [ebp+var_20] 10h +
cmp dword_101FDC0 0 +
jz loc_100A668  +
push 60h  +
push nNumerator  +
push 4  +
call esi  +
cwde   +
jmp loc_100A66B  +
push 4  +
pop eax  +
mov edx [ebp+var_24] +
push 14h  +
push [ebp+cy]  +
mov ecx ebx +
sub ecx [ebp+var_1C] +
push ecx  +
mov ecx [ebp+var_20] +
lea ecx [ecx+edx*2] +
add ecx [ebp+var_14] +
push ecx  +
mov ecx [ebp+var_54] +
lea eax [ecx+eax*2] +
push eax  +
push 0  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov eax [ebp+var_10] +
mov [ebp+var_24] eax +
cmp eax 10h +
jb loc_100A6A6  +
mov [ebp+var_24] 10h +
cmp dword_101FDC0 0 +
jz loc_100A6BE  +
push 60h  +
push nNumerator  +
push 4  +
call esi  +
cwde   +
jmp loc_100A6C1  +
push 4  +
pop eax  +
imul eax [ebp+var_24] +
push 10h  +
pop ecx  +
sub ebx eax +
cmp [ebp+var_10] ecx +
jnb loc_100A6D2  +
mov ecx [ebp+var_10] +
xor edx edx +
mov eax ebx +
div  ecx +
mov [ebp+cy] eax +
test eax eax +
jge loc_100A6E3  +
and [ebp+cy] 0 +
cmp dword_101FDC0 0 +
jz loc_100A6FD  +
push 60h  +
push nNumerator  +
push 4  +
call esi  +
movsx ebx ax +
jmp loc_100A700  +
push 4  +
pop ebx  +
cmp dword_101FDC0 0 +
jz loc_100A71A  +
push 60h  +
push nNumerator  +
push 10h  +
call esi  +
movsx ecx ax +
jmp loc_100A71D  +
push 10h  +
pop ecx  +
test byte ptr [ebp+var_10] 0Fh +
mov edx [ebp+var_10] +
push 0  +
pop eax  +
setnz al  +
shr edx 4 +
add eax edx +
mov [ebp+var_24] eax +
mov eax [ebp+var_14] +
lea edx [ebx+ebx] +
sub eax edx +
sub eax ecx +
mov ecx [ebp+var_24] +
xor edx edx +
div  ecx +
xor ebx ebx +
mov [ebp+var_24] eax +
cmp [ebp+var_10] ebx +
jbe loc_1004CBB  +
lea eax [ebx+1388h] +
push eax  +
mov eax [ebp+var_8] +
push dword ptr [eax+0Ch]  +
call ds:GetDlgItem  +
mov [ebp+var_1C] eax +
test eax eax +
jz loc_100A7DE  +
cmp dword_101FDC0 0 +
jz loc_100A785  +
push 60h  +
push nNumerator  +
push 4  +
call esi  +
movsx ecx ax +
jmp loc_100A788  +
push 4  +
pop ecx  +
mov eax ebx +
and eax 0Fh +
lea edx [eax+2] +
imul eax [ebp+cy] +
imul edx ecx +
add edx [ebp+var_54] +
add eax edx +
cmp dword_101FDC0 0 +
mov [ebp+var_20] eax +
jz loc_100A7B7  +
push 60h  +
push nNumerator  +
push 10h  +
call esi  +
cwde   +
jmp loc_100A7BA  +
push 10h  +
pop eax  +
mov ecx ebx +
shr ecx 4 +
imul ecx [ebp+var_24] +
push 0  +
push [ebp+var_24]  +
add ecx eax +
push [ebp+cy]  +
add ecx [ebp+var_50] +
push ecx  +
push [ebp+var_20]  +
push 0  +
push [ebp+var_1C]  +
push [ebp+hWinPosInfo]  +
call edi  +
inc ebx  +
cmp ebx [ebp+var_10] +
jnb loc_1004CBB  +
jmp loc_100A751  +
mov esi [ebp+var_8] +
lea eax [ebp+Points] +
push eax  +
push 3EEh  +
push dword ptr [esi+0Ch]  +
call ds:GetDlgItem  +
jmp loc_1004CCF  +
***
lea eax [ebp+arg_4] +
push eax  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100F614  +
test eax eax +
jge loc_10040D3  +
jmp loc_100410C  +
mov eax [ebp+var_4] +
test al 0Fh +
push 0  +
pop ecx  +
setnz cl  +
shr eax 4 +
xor edx edx +
add ecx eax +
mov eax [esi+5Ch] +
sub eax [esi+54h] +
dec eax  +
div  ecx +
test byte ptr dword_101E458 8 +
mov [ebp+var_4] eax +
jz loc_100A86B  +
mov ecx [ebp+arg_4] +
add ecx 7ECh +
push ecx  +
push eax  +
push ebx  +
push [ebp+arg_0]  +
mov ecx esi +
push 1  +
call sub_100EF93  +
mov eax [ebp+arg_4] +
add eax 1Ch +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push ebx  +
push [ebp+arg_0]  +
push 0  +
call sub_100EF93  +
jmp loc_10040DA  +
***
test eax eax +
jl loc_1004F58  +
push esi  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
push [ebp+uID]  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jg loc_100A8D8  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jz loc_100A8CB  +
jle loc_100A8D0  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100A8D0  +
mov eax 80004005h +
cmp eax ebx +
jl loc_100A97F  +
cmp dword_101E140 3 +
jl loc_100A91E  +
lea eax [ebp+String] +
push eax  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
call sub_1001A1B  +
test eax eax +
jl loc_100A97F  +
push dword ptr [ebp+var_420]  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+String] +
push esi  +
push eax  +
call sub_100196B  +
add esp 10h +
test eax eax +
jl loc_100A97F  +
mov esi ds:GetDlgItem +
lea eax [ebp+String] +
push eax  +
push 3E9h  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
cmp [edi+74h] ebx +
mov [ebp+uID] ebx +
mov ebx ds:ShowWindow +
ja loc_1004E28  +
jmp loc_1004E8B  +
cmp ecx [ebp+var_41C] +
sbb ecx ecx +
and ecx 5 +
push ecx  +
push eax  +
call ebx  +
inc [ebp+uID]  +
mov eax [ebp+uID] +
cmp eax [edi+74h] +
jnb loc_1004E8B  +
jmp loc_1004E28  +
pop esi  +
jmp loc_1004F58  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
jmp locret_1004F64  +
***
cmp dword_101FDC0 0 +
jz loc_100A9B7  +
push 60h  +
push nNumerator  +
push 4  +
call ds:MulDiv  +
movsx edi ax +
jmp loc_100418F  +
push 4  +
pop edi  +
jmp loc_100418F  +
movzx eax byte_101E108 +
imul eax ecx +
cdq   +
idiv  edi +
mov [ebp+var_30] eax +
jmp loc_10041D3  +
mov esi [ebp+var_38] +
mov edi ds:BitBlt +
cmp esi [ebp+var_2C] +
jnz loc_1004260  +
jmp loc_1004291  +
mov [ebp+var_20] eax +
cmp dword_101FDC0 0 +
jz loc_100AA0D  +
push 60h  +
push nNumerator  +
push 4  +
call ds:MulDiv  +
cwde   +
jmp loc_1004543  +
push 4  +
pop eax  +
jmp loc_1004543  +
mov ecx eax +
jmp loc_100456F  +
mov [ebp+var_18] esi +
cmp dword_101FDC0 0 +
jz loc_100AA3E  +
push 60h  +
push nNumerator  +
push 4  +
call ds:MulDiv  +
cwde   +
jmp loc_100430C  +
push 4  +
pop eax  +
jmp loc_100430C  +
mov ecx eax +
jmp loc_100433C  +
mov eax [ebp+var_28] +
push dword ptr [eax+18h]  +
push [ebp+var_1C]  +
call ds:SelectObject  +
and [ebp+var_28] 0 +
mov esi [ebp+var_30] +
mov [ebp+var_20] eax +
jmp loc_100AACD  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov [ebp+var_18] esi +
jl loc_100AA75  +
mov [ebp+var_18] eax +
cmp dword_101FDC0 0 +
jz loc_100AA91  +
push 60h  +
push nNumerator  +
push 4  +
call ds:MulDiv  +
cwde   +
jmp loc_100AA94  +
push 4  +
pop eax  +
sub eax [ebp+var_30] +
push 0CC0020h  +
add eax [ebp+var_28] +
push 0  +
add eax [ebp+var_38] +
push 0  +
push [ebp+var_1C]  +
push [ebp+var_18]  +
push 21h  +
push eax  +
push [ebp+var_34]  +
push dword ptr [ebx+18h]  +
call edi  +
push 4Bh  +
pop eax  +
cmp esi eax +
mov ecx esi +
jl loc_100AAC2  +
mov ecx eax +
add [ebp+var_28] ecx +
cmp esi eax +
jge loc_100AACB  +
mov eax esi +
sub esi eax +
test esi esi +
jg loc_100AA68  +
cmp [ebp+var_20] 0 +
jz loc_10042D3  +
push [ebp+var_20]  +
push [ebp+var_1C]  +
call ds:SelectObject  +
jmp loc_10042D3  +
***
mov ecx edi +
call sub_100FA3A  +
jmp loc_1002279  +
***
mov eax offset word_101ED50 +
movzx ecx byte_101E108 +
push ecx  +
movzx ecx byte_101E080 +
push ecx  +
push eax  +
lea eax [ebp-20Ch] +
push ebx  +
push eax  +
call sub_100196B  +
add esp 14h +
test eax eax +
jl loc_100AB3A  +
lea eax [ebp-20Ch] +
push eax  +
push 3ECh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
push 0  +
push 0  +
push 3EDh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:InvalidateRect  +
push 3EDh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:UpdateWindow  +
push ebx  +
lea eax [ebp-20Ch] +
push eax  +
push 0  +
push 400h  +
push dword ptr dbl_101E110+4  +
push dword ptr dbl_101E110  +
call sub_1002233  +
push edx  +
push eax  +
call ds:StrFormatByteSizeW  +
lea eax [ebp-20Ch] +
push eax  +
push 3EDh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea ecx [ebp-210h] +
push ecx  +
push eax  +
mov ecx edi +
call sub_100F614  +
test eax eax +
jl loc_100AF1C  +
and dword ptr [ebp-214h] 0 +
cmp dword ptr [ebp-210h] 0 +
ja loc_10022E9  +
jmp loc_1002162  +
***
lea eax [ebp-230h] +
push eax  +
push 0  +
push 0  +
lea eax [ebp-210h] +
push eax  +
push dword ptr [ebp-214h]  +
mov ecx edi +
call sub_100F614  +
test eax eax +
jl loc_100214A  +
test byte ptr dword_101E458 8 +
mov dword ptr [ebp-22Ch] offset unk_101F778 +
jnz loc_100AC19  +
mov dword ptr [ebp-22Ch] offset word_101ED50 +
mov ecx [ebp-230h] +
mov eax [edi+7Ch] +
add eax ecx +
mov [ebp-218h] eax +
movzx eax byte ptr [eax+7ECh] +
mov [ebp-220h] eax +
fild  dword ptr [ebp-220h] +
fld  ds:dbl_100D5D8 +
fdiv st(1) st +
fld  ds:dbl_100D5D0 +
fmul st(2) st +
fxch  st(2) +
call _ftol2  +
push eax  +
mov eax [ebp-218h] +
movzx eax byte ptr [eax+1Ch] +
mov [ebp-218h] eax +
fild  dword ptr [ebp-218h] +
fdivrp st(1) st +
fmulp st(1) st +
call _ftol2  +
push eax  +
push dword ptr [ebp-22Ch]  +
lea eax [ebp-20Ch] +
push ebx  +
push eax  +
call sub_100196B  +
add esp 14h +
test eax eax +
jl loc_100214A  +
lea eax [ebp-20Ch] +
push eax  +
push dword ptr [ebp-228h]  +
call ds:SetWindowTextW  +
jmp loc_100214A  +
***
add esp 10h +
test eax eax +
jl loc_100ACCA  +
lea eax [ebp-20Ch] +
push eax  +
push 3EEh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
push 0  +
push 400h  +
push dword_101FDD4  +
push dword_101FDD0  +
call sub_1001AAD  +
test edx edx +
jl loc_100AD43  +
jg loc_100ACEF  +
cmp eax 270Fh +
jbe loc_100AD43  +
push 0  +
push 400h  +
push edx  +
push eax  +
call sub_1001AAD  +
push edx  +
push eax  +
push 0  +
push 400h  +
push dword_101FDDC  +
push dword_101FDD8  +
call sub_1001AAD  +
push 0  +
push 400h  +
push edx  +
push eax  +
call sub_1001AAD  +
push edx  +
push eax  +
push offset unk_101ECD0  +
lea eax [ebp-20Ch] +
push ebx  +
push eax  +
call sub_100196B  +
add esp 1Ch +
push offset unk_101F9C0  +
jmp loc_100AD79  +
push edx  +
push eax  +
push 0  +
push 400h  +
push dword_101FDDC  +
push dword_101FDD8  +
call sub_1001AAD  +
push edx  +
push eax  +
push offset unk_101ECD0  +
lea eax [ebp-20Ch] +
push ebx  +
push eax  +
call sub_100196B  +
add esp 1Ch +
push offset unk_101FA40  +
push 7FBh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
lea eax [ebp-20Ch] +
push eax  +
push 7FDh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
lea eax [ebp-210h] +
push eax  +
mov ecx edi +
call sub_100F56F  +
test eax eax +
jz loc_100AE23  +
mov eax [ebp-210h] +
xor edx edx +
mov ecx 15180h +
div  ecx +
push 3Ch  +
pop ecx  +
mov [ebp-220h] eax +
mov eax [ebp-210h] +
mov [ebp-218h] edx +
xor edx edx +
div  ecx +
mov eax [ebp-210h] +
mov ecx 0E10h +
push edx  +
xor edx edx +
div  ecx +
push 3Ch  +
pop ecx  +
mov eax edx +
xor edx edx +
div  ecx +
xor edx edx +
mov ecx 0E10h +
push eax  +
mov eax [ebp-218h] +
div  ecx +
push eax  +
push dword ptr [ebp-220h]  +
lea eax [ebp-20Ch] +
push offset aU02u02u02u  +
push ebx  +
push eax  +
call sub_100196B  +
add esp 1Ch +
jmp loc_100AE35  +
push offset unk_101F9A0  +
push ebx  +
lea eax [ebp-20Ch] +
push eax  +
call sub_1001A1B  +
lea eax [ebp-20Ch] +
push eax  +
push 7FEh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
lea eax [ebp-224h] +
push eax  +
mov ecx edi +
call sub_100F094  +
test eax eax +
jl loc_100AF1C  +
push dword ptr [ebp-218h]  +
lea eax [ebp-20Ch] +
push dword ptr [ebp-21Ch]  +
push offset aI64u  +
push ebx  +
push eax  +
call sub_100196B  +
add esp 14h +
lea eax [ebp-20Ch] +
push eax  +
push 3F7h  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
push dword ptr [ebp-220h]  +
lea eax [ebp-20Ch] +
push dword ptr [ebp-224h]  +
push offset aI64u  +
push ebx  +
push eax  +
call sub_100196B  +
add esp 14h +
lea eax [ebp-20Ch] +
push eax  +
push 3F5h  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
push dword ptr [ebp-230h]  +
lea eax [ebp-20Ch] +
push dword ptr [ebp-234h]  +
push offset aI64u  +
push ebx  +
push eax  +
call sub_100196B  +
add esp 14h +
lea eax [ebp-20Ch] +
push eax  +
push 43Dh  +
push dword ptr [edi+0Ch]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
mov ecx edi +
call sub_100F726  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
jmp locret_10021A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 42Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp dword_101FDAC ebx +
jz loc_1004F6A  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_100AFA5  +
cmp al bl +
jnz loc_1004F6A  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1004F6A  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
cmp ebx dword_101FDA0 +
jnz loc_1004F6A  +
cmp eax ecx +
jnz loc_1004F6A  +
push 3  +
push offset dword_100D5B0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
jmp loc_1004F6A  +
***
push 3  +
call sub_100561E  +
push eax  +
call sub_101AD9E  +
jmp loc_1004FAE  +
***
push offset dword_1005648  +
call ds:SHLWAPI_618  +
test eax eax +
jz loc_100B026  +
push ebx  +
push 9C41h  +
push dword ptr [ebp-418h]  +
call edi  +
test byte ptr dword_101E458 10h +
mov eax [ebp-418h] +
mov hMenu eax +
jz loc_100502A  +
jmp loc_1005037  +
***
mov eax [esi+74h] +
cmp eax 1 +
jnz loc_100B06E  +
push ebx  +
push 0EA60h  +
push dword ptr [ebp-418h]  +
call edi  +
push 1  +
push 0EA61h  +
push dword ptr [ebp-418h]  +
call ds:EnableMenuItem  +
jmp loc_100B092  +
cmp eax 100h +
jbe loc_100B092  +
push ebx  +
push 0EA61h  +
push dword ptr [ebp-418h]  +
call edi  +
cmp dword_101E140 1 +
jnz loc_100B092  +
mov dword_101E140 ebx +
cmp dword ptr [esi+78h] 1 +
jnz loc_100B0AB  +
push ebx  +
push 0EA62h  +
push dword ptr [ebp-418h]  +
call edi  +
jmp loc_1005054  +
***
mov edi ds:GetSubMenu +
push 3  +
push 2  +
push dword ptr [ebp-418h]  +
call edi  +
push eax  +
call edi  +
push 104h  +
mov [ebp-41Ch] eax +
lea eax [ebp-414h] +
push eax  +
push 9D08h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jg loc_100B108  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jz loc_100B0FF  +
jle loc_100B104  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B104  +
mov eax 80004005h +
cmp eax ebx +
jl loc_100B16D  +
push ebx  +
push ebx  +
push 800h  +
push dword ptr [ebp-41Ch]  +
call ds:AppendMenuW  +
xor edi edi +
cmp [esi+78h] ebx +
jbe loc_1005054  +
push edi  +
lea eax [ebp-414h] +
push eax  +
lea eax [ebp-20Ch] +
push 104h  +
push eax  +
call sub_100196B  +
add esp 10h +
test eax eax +
jl loc_100B16D  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [edi+0EA63h] +
push eax  +
push ebx  +
push dword ptr [ebp-41Ch]  +
call ds:AppendMenuW  +
inc edi  +
cmp edi [esi+78h] +
jnb loc_1005054  +
jmp loc_100B126  +
***
pop edi  +
cmp dword_101FDAC ebx +
jz loc_100B1C4  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_100B183  +
cmp al bl +
jnz loc_100B1C4  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_100B1C4  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
cmp ebx dword_101FDA0 +
jnz loc_100B1C4  +
cmp eax ecx +
jnz loc_100B1C4  +
push 3  +
push offset loc_100D5C0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_1001679  +
jmp locret_1005062  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101E140 +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp dword ptr [esi+74h] 100h +
push edi  +
jbe loc_100B206  +
cmp eax 1 +
jnz loc_100B206  +
mov dword_101E140 ebx +
jmp loc_10078AF  +
***
push 3  +
pop ecx  +
cmp eax ecx +
jle loc_10078AF  +
add eax 0FFFFFFFDh +
cmp eax [esi+78h] +
jb loc_10078AF  +
mov dword_101E140 ecx +
jmp loc_10078AF  +
***
call sub_100DD74  +
jmp loc_100791F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
mov eax [ebx] +
push esi  +
mov esi ds:GetProcessHeap +
push edi  +
test eax eax +
jnz loc_100B253  +
xor eax eax +
jmp loc_100B25F  +
push eax  +
push 0  +
call esi  +
push eax  +
call ds:HeapSize  +
mov edi ds:HeapFree +
shr eax 2 +
mov [ebp-8] eax +
xor eax eax +
mov [ebp-4] eax +
cmp [ebp-8] eax +
jbe loc_100B294  +
mov ecx [ebx] +
lea eax [ecx+eax*4] +
cmp dword ptr [eax] 0 +
jz loc_100B288  +
push dword ptr [eax]  +
push 0  +
call esi  +
push eax  +
call edi  +
mov eax [ebp-4] +
inc eax  +
mov [ebp-4] eax +
cmp eax [ebp-8] +
jb loc_100B275  +
mov eax [ebx] +
test eax eax +
jz loc_100B2A2  +
push eax  +
push 0  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+10h]  +
call CoTaskMemFree  +
jmp loc_1008D83  +
***
mov edi ds:DestroyWindow +
mov eax [esi+64h] +
push dword ptr [eax+ebx*8+4]  +
call edi  +
mov eax [esi+64h] +
push dword ptr [eax+ebx*8]  +
call edi  +
inc ebx  +
cmp ebx [esi+68h] +
jnb loc_1008D9F  +
jmp loc_100B2B6  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi+64h] edi +
jmp loc_1008DAC  +
***
push 6  +
call ds:GetStockObject  +
mov [esi] eax +
jmp loc_10064D6  +
***
push eax  +
call ds:DeleteObject  +
and dword ptr [esi+54h] 0 +
jmp loc_1009017  +
***
cmp dword_101FDC0 0 +
jz loc_100B32D  +
movsx eax word_101F832[esi] +
push 60h  +
push nNumerator  +
push eax  +
call ds:MulDiv  +
movzx eax ax +
jmp loc_100B334  +
movzx eax word_101F832[esi] +
mov esi ds:SendMessageW +
cwde   +
mov [ebp+var_234] eax +
lea eax [ebp+Buffer] +
mov [ebp+var_230] eax +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1061h  +
push dword ptr [ebx+78h]  +
mov [ebp+var_228] edi +
call esi  +
jmp loc_1006C7D  +
mov eax [ebp+var_210] +
cmp eax dword_101E418 +
jnz loc_1006C8D  +
xor edx edx +
xor ecx ecx +
mov [ebx+60h] edi +
cmp dword_101E41C ecx +
mov eax 200h +
setnl dl  +
dec edx  +
and edx eax +
add edx eax +
push edx  +
push edi  +
push ecx  +
push ecx  +
push 101Fh  +
push dword ptr [ebx+78h]  +
call esi  +
push eax  +
call sub_1007617  +
jmp loc_1006C8D  +
***
mov eax [esi+2Ch] +
test eax eax +
jz loc_100B3BE  +
push eax  +
push ecx  +
call ds:SelectObject  +
push dword ptr [esi+24h]  +
call ds:DeleteDC  +
and dword ptr [esi+24h] 0 +
jmp loc_1008CDA  +
push eax  +
call ds:DeleteObject  +
and dword ptr [esi+28h] 0 +
jmp loc_1008CE5  +
***
mov edx ecx +
push edi  +
lea ecx [edx+4] +
mov dword ptr [edx] offset off_1001748 +
call sub_1010363  +
jmp loc_1006519  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp dword ptr [esi+8] 0FFFFFF94h +
push edi  +
mov edi ecx +
jnz loc_1005200  +
push ebx  +
push eax  +
push eax  +
push 101Fh  +
push dword ptr [esi]  +
call ds:SendMessageW  +
mov ecx dword_101E418 +
mov ebx eax +
mov eax [esi+10h] +
cmp ecx dword_101E304[eax*4] +
jnz loc_100B444  +
neg dword_101E41C  +
jmp loc_100B46B  +
push 0  +
push dword ptr [edi+60h]  +
push ebx  +
call sub_1007617  +
mov eax [esi+10h] +
mov [edi+60h] eax +
mov eax [esi+10h] +
mov eax dword_101E304[eax*4] +
or dword_101E41C 0FFFFFFFFh +
mov dword_101E418 eax +
xor ecx ecx +
cmp dword_101E41C ecx +
mov eax 200h +
setnl cl  +
dec ecx  +
and ecx eax +
add ecx eax +
push ecx  +
push dword ptr [esi+10h]  +
push ebx  +
call sub_1007617  +
mov ecx edi +
call sub_1012346  +
push dword_101E418  +
push 4  +
call sub_101AC8C  +
xor eax eax +
inc eax  +
pop ebx  +
jmp loc_1005200  +
***
mov eax ecx +
jmp loc_100B5FB  +
sub esi 3 +
jnz loc_1006552  +
jmp loc_10079C4  +
***
mov ecx [ebp-4] +
mov edx [ecx+68h] +
add edx eax +
cmp ebx edx +
ja loc_100475F  +
add ebx 0FFFFF63Ch +
push ebx  +
push dword ptr [ebp+14h]  +
call sub_10121B3  +
jmp loc_10079AE  +
***
push 4  +
push offset word_101E4CC  +
push 0Eh  +
push 400h  +
call ds:GetLocaleInfoW  +
jmp loc_100475F  +
***
mov eax 138h +
cmp esi eax +
ja loc_100B590  +
jnz loc_10046CF  +
jmp loc_100B51A  +
cmp esi 136h +
ja loc_100475F  +
push ecx  +
push ebx  +
call ds:SetBkMode  +
mov esi ds:IsThemeActive +
call esi  +
mov edi ds:GetSysColor +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call edi  +
push eax  +
push ebx  +
call ds:SetBkColor  +
push 8  +
call edi  +
push eax  +
push ebx  +
call ds:SetTextColor  +
call esi  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
jmp loc_100B5FB  +
push ebx  +
mov ecx [ebp-4] +
call sub_1012EB4  +
jmp loc_100475F  +
***
mov eax 966h +
cmp bx ax +
jnz loc_100475F  +
mov eax [ebp-4] +
mov [eax+4Ch] ecx +
jmp loc_100475F  +
***
cmp esi 201h +
jb loc_100475F  +
mov edi 202h +
cmp esi edi +
jbe loc_100B5BF  +
cmp esi 20Ah +
jnz loc_100475F  +
xor eax eax +
shr ebx 10h +
test bx bx +
setle al  +
push eax  +
jmp loc_100B56A  +
***
mov eax [ebp-4] +
push dword ptr [eax+74h]  +
call ds:SetFocus  +
test byte ptr dword_101E458 10h +
jz loc_100475F  +
push dword ptr [ebp+14h]  +
xor eax eax +
cmp esi edi +
setz al  +
push 2  +
add eax 0A1h +
push eax  +
push hWnd  +
call ds:SendMessageW  +
jmp loc_100475F  +
***
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
call sub_100DD74  +
jmp loc_1007A3B  +
***
push 0A2Eh  +
push dword ptr [esi+1Ch]  +
call edi  +
mov [esi+74h] eax +
test eax eax +
jz loc_1007A40  +
push 0A28h  +
push dword ptr [esi+1Ch]  +
call edi  +
mov [esi+78h] eax +
test eax eax +
jz loc_1007A40  +
push 0  +
push off_101F898  +
push eax  +
call ds:SetWindowTheme  +
jmp loc_1007A27  +
***
mov eax dword_1020600 +
add eax 2 +
push 0Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx esi +
mov dword_1020600 edx +
call sub_10131B8  +
push hWnd  +
call ds:IsIconic  +
test eax eax +
jnz loc_10021CB  +
mov ecx esi +
pop esi  +
jmp sub_10120FB  +
***
xor eax eax +
inc eax  +
xor ecx ecx +
jmp loc_100330F  +
push 63h  +
pop eax  +
jmp loc_1003339  +
***
mov [ebp+var_4] 80004005h +
jmp loc_10025DD  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10025DD  +
***
lea ecx [ebp+var_80] +
add esp 0Ch +
sub ecx offset dword_101E278 +
xor eax eax +
mov edx dword_101E278[eax] +
cmp edx 0FFFFFFFFh +
jz loc_100B6D6  +
mov dword_101E278[ecx+eax] edx +
add eax 4 +
inc ebx  +
cmp eax 80h +
jb loc_100B6B9  +
cmp ebx edi +
jz loc_100747F  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push edi  +
push 101Fh  +
push [ebp+hWnd]  +
call esi  +
push edi  +
push edi  +
push 1200h  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
jmp loc_1007469  +
***
push edi  +
mov esi ebx +
call ds:DestroyWindow  +
jmp loc_1005610  +
mov esi ds:DestroyWindow +
push ebx  +
call esi  +
push edi  +
call esi  +
xor esi esi +
jmp loc_1005610  +
***
xor ecx ecx +
mov [eax] cx +
jmp loc_1003D89  +
***
mov [ecx] edi +
jmp loc_1001A9C  +
***
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+0C0h] 0 +
mov eax [esi+98h] +
test eax eax +
jz loc_100B75D  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+98h] 0 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_100B770  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+0Ch] 0 +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp loc_10132B2  +
***
mov eax 8000FFFFh +
jmp loc_10075C2  +
cmp dword_101FDC0 0 +
jz loc_100B7A4  +
push 60h  +
push nNumerator  +
push dword_101F8A4[esi]  +
call ds:MulDiv  +
cwde   +
jmp loc_100B7AA  +
mov eax dword_101F8A4[esi] +
mov [ebp+var_23C] eax +
jmp loc_1007551  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ecx +
mov esi 80010000h +
cmp dword_101FDAC ebx +
jz loc_100B820  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_100B7E2  +
cmp al bl +
jnz loc_100B820  +
mov ecx dword_101FD9C +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_100B820  +
mov ecx dword_101FDA4 +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_101FDA0 +
jnz loc_100B820  +
cmp eax ecx +
jnz loc_100B820  +
push 1  +
push offset dword_100D5B0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
push 1  +
call sub_100561E  +
push eax  +
call sub_101AD9E  +
jmp loc_1005AE4  +
***
push ebx  +
push 9C41h  +
push dword ptr [ebp-4]  +
call ds:DeleteMenu  +
jmp loc_1005B36  +
***
push 3F1h  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
jmp loc_1005B7A  +
***
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_100B871  +
cmp al bl +
jnz loc_1005B73  +
mov ecx dword_101FD9C +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1005B73  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax esi +
cmp ebx dword_101FDA0 +
jnz loc_1005B73  +
cmp eax ecx +
jnz loc_1005B73  +
push 1  +
push offset loc_100D5C0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
jmp loc_1005B73  +
***
push ebx  +
push ebx  +
push 101Fh  +
push dword ptr [edi]  +
call ds:SendMessageW  +
mov ecx [edi+10h] +
mov edx dword_101E2FC +
mov [ebp+8] eax +
cmp edx dword_101E178[ecx*4] +
jnz loc_100B9D9  +
neg dword_101E300  +
jmp loc_100BA0B  +
push ebx  +
push dword ptr [esi+40h]  +
push eax  +
call sub_1007617  +
mov eax [edi+10h] +
mov [esi+40h] eax +
mov eax [edi+10h] +
mov eax dword_101E178[eax*4] +
push eax  +
mov dword_101E2FC eax +
call sub_10133E1  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
mov dword_101E300 eax +
lea ebx [esi+260h] +
push ebx  +
call ds:RtlEnterCriticalSection  +
push 0  +
push offset loc_10025EA  +
push dword ptr [esi+0Ch]  +
call ds:COMCTL32_338  +
push ebx  +
call ds:RtlLeaveCriticalSection  +
xor ecx ecx +
cmp dword_101E300 ecx +
mov eax 200h +
setnl cl  +
dec ecx  +
and ecx eax +
add ecx eax +
push ecx  +
push dword ptr [edi+10h]  +
push dword ptr [ebp+8]  +
call sub_1007617  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword_101E2FC  +
push 1  +
call sub_101AC8C  +
pop ebx  +
jmp loc_1001E9D  +
***
add edi 0Ch +
push edi  +
call sub_101497F  +
jmp loc_1001E9D  +
***
mov edi ebx +
mov eax [edi] +
mov ecx [edi+4] +
mov ebx [ebx] +
mov [ecx] eax +
mov [eax+4] ecx +
mov eax [edi+10h] +
test eax eax +
jz loc_100BAA1  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [edi+10h] 0 +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
lea eax [esi+24Ch] +
cmp ebx eax +
jz loc_1008B07  +
jmp loc_100BA78  +
***
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi+3Ch] ebx +
lea edi [esi+278h] +
cmp [edi] ebx +
jz loc_1008855  +
add esi 260h +
push esi  +
call ds:RtlDeleteCriticalSection  +
mov [edi] ebx +
jmp loc_1008855  +
***
or dword ptr [ebp-4Ch] 3 +
jmp loc_1003521  +
***
cmp [eax+0D0h] ebx +
jz loc_100BB12  +
push dword ptr [ebp-54h]  +
push eax  +
push dword ptr [ebp-4]  +
call sub_10165BF  +
inc dword ptr [ebp-8]  +
mov eax [ebp-8] +
inc dword ptr [ebp-0Ch]  +
cmp eax [ebp-10h] +
mov eax [ebp-10h] +
jge loc_10021CD  +
jmp loc_10034A4  +
***
push ebx  +
push 1  +
push 0Bh  +
push dword ptr [ebp-4]  +
call esi  +
mov eax 80004005h +
jmp loc_10035D4  +
***
inc dword ptr [ebp-8]  +
jmp loc_1003547  +
***
sub eax 28h +
jnz loc_1003C41  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
push hWnd  +
call ds:SendMessageW  +
jmp loc_1003C41  +
***
mov ecx [ebp-4] +
call sub_1002603  +
test eax eax +
jz loc_1003C41  +
cmp dword ptr [eax+8] 0 +
jz loc_1003C41  +
push 3F1h  +
push edi  +
call ds:GetDlgItem  +
cmp [ebp+10h] eax +
jnz loc_1003C41  +
mov eax [ebp+14h] +
mov ecx [ebp-4] +
shr eax 10h +
cwde   +
push eax  +
movsx eax word ptr [ebp+14h] +
push eax  +
call sub_1013E61  +
jmp loc_1005B90  +
***
mov edi ds:GetLocaleInfoW +
push 4  +
push offset LCData  +
push 1Eh  +
mov ebx 400h +
push ebx  +
call edi  +
push 4  +
push offset word_101E4CC  +
push 0Eh  +
push ebx  +
call edi  +
jmp loc_1005B90  +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 15h  +
push 3F1h  +
push edi  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
jmp loc_1005B90  +
***
xor eax eax +
cmp dword_101E464 ebx +
push ebx  +
setnz al  +
push eax  +
push 0F1h  +
push edi  +
call esi  +
jmp loc_1003C41  +
***
mov eax 202h +
cmp esi eax +
jbe loc_1003C5A  +
jmp loc_100BCC0  +
cmp esi 138h +
jnz loc_1003C41  +
push 1  +
push dword ptr [ebp+10h]  +
call ds:SetBkMode  +
mov esi ds:IsThemeActive +
call esi  +
mov ebx ds:GetSysColor +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ebx  +
push eax  +
push dword ptr [ebp+10h]  +
call ds:SetBkColor  +
push 8  +
call ebx  +
push eax  +
push dword ptr [ebp+10h]  +
call ds:SetTextColor  +
call esi  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
jmp loc_1001E2A  +
***
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
push dword ptr [ebp+10h]  +
call sub_10166DD  +
jmp loc_1003C41  +
***
test byte ptr dword_101E458 10h +
jz loc_1003C41  +
push dword ptr [ebp+14h]  +
xor ecx ecx +
cmp esi eax +
setz cl  +
push 2  +
add ecx 0A1h +
push ecx  +
jmp loc_100BB58  +
***
mov eax esi +
sub eax 203h +
jz loc_100BB51  +
sub eax 1FEh +
jz loc_100BCDD  +
sub eax 4 +
jnz loc_1003C41  +
mov eax [ebp-4] +
mov edx [eax+0Ch] +
mov ebx [edx] +
and dword ptr [ebp+8] 0 +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jbe loc_100BD14  +
mov eax [edx+4] +
cmp dword ptr [ebp+8] 0 +
mov esi [eax] +
mov ecx [esi+8] +
jnz loc_100BD04  +
cmp [ebp+10h] ecx +
jmp loc_100BD07  +
cmp [ebp+14h] ecx +
jz loc_100BD23  +
inc dword ptr [ebp-4]  +
add eax 4 +
cmp [ebp-4] ebx +
jb loc_100BCF4  +
inc dword ptr [ebp+8]  +
cmp dword ptr [ebp+8] 2 +
jge loc_1003C41  +
jmp loc_100BCE9  +
***
push 3F1h  +
push edi  +
call ds:GetDlgItem  +
mov edi ds:SendMessageW +
mov ebx eax +
lea eax [ebp-1Ch] +
push eax  +
push 0FFFFFFFFh  +
push 1053h  +
push ebx  +
mov dword ptr [ebp-1Ch] 1 +
mov [ebp-14h] esi +
call edi  +
mov [ebp+14h] eax +
test eax eax +
jl loc_100BD7D  +
lea ecx [ebp-58h] +
push ecx  +
push eax  +
push 102Bh  +
push ebx  +
mov dword ptr [ebp-48h] 0Fh +
mov dword ptr [ebp-4Ch] 3 +
call edi  +
push 0  +
push dword ptr [ebp+14h]  +
push 1013h  +
jmp loc_100BD93  +
and dword ptr [ebp-4Ch] 0 +
lea eax [ebp-58h] +
push eax  +
push 0FFFFFFFFh  +
mov dword ptr [ebp-48h] 3 +
push 102Bh  +
push ebx  +
call edi  +
cmp dword ptr [ebp+0Ch] 405h +
jnz loc_1003C41  +
mov eax [esi+9Ch] +
mov ecx [esi+28h] +
mov edx [esi+2Ch] +
test eax eax +
jz loc_100BDB8  +
mov eax [eax+8] +
jmp loc_100BDBB  +
mov eax [esi+8] +
push dword ptr [esi+98h]  +
push edx  +
push ecx  +
push eax  +
call sub_1015C3A  +
jmp loc_1003C41  +
***
xor eax eax +
cmp word ptr [ebp-414h] 22h +
mov [ebp-6] ax +
lea eax [ebp-414h] +
jnz loc_100BDFE  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100BDF4  +
cmp cx 22h +
jnz loc_100BDE4  +
cmp word ptr [eax] 22h +
jnz loc_100BE10  +
inc eax  +
inc eax  +
jmp loc_100BE10  +
cmp word ptr [ebp-414h] 20h +
jbe loc_100BE10  +
inc eax  +
inc eax  +
cmp word ptr [eax] 20h +
ja loc_100BE08  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp-414h] +
push eax  +
call ds:lstrlenW  +
mov edi eax +
cmp edi ebx +
jbe loc_1007201  +
inc edi  +
lea eax [edi+edi] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi+3Ch] eax +
cmp eax ebx +
jz loc_1007345  +
lea ecx [ebp-414h] +
push ecx  +
push edi  +
push eax  +
call sub_1001A1B  +
jmp loc_100734C  +
***
call sub_100DD74  +
jmp loc_1007363  +
***
push dword ptr [esi+4]  +
call ds:DestroyWindow  +
mov [esi+4] ebx +
jmp loc_1007356  +
***
lea eax [esi+260h] +
push eax  +
call ds:RtlInitializeCriticalSection  +
test eax eax +
jl loc_1007356  +
jmp loc_1007332  +
***
or dword ptr [esi+8] 0FFFFFFFFh +
mov eax 80004005h +
jmp loc_1002C45  +
or dword ptr [esi+0D0h] 8 +
mov eax [edi+50h] +
mov [esi+10h] eax +
jmp loc_1002A9C  +
or dword ptr [esi+0D0h] 40h +
mov eax [edi+68h] +
shr eax 0Ah +
mov [esi+30h] eax +
lea eax [ebp+var_218] +
push eax  +
push 0  +
mov ebx 400h +
push ebx  +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+8]  +
call sub_1001AAD  +
push edx  +
push eax  +
call sub_1013D41  +
mov eax [ebp+var_218] +
cmp [esi+38h] eax +
jnz loc_1002660  +
jmp loc_1002AE1  +
or [esi+0D0h] ecx +
mov eax [edi+78h] +
shr eax 0Ah +
mov [esi+4Ch] eax +
mov eax [esi+50h] +
cmp eax [edi+40h] +
jz loc_100BF1F  +
or dword ptr [esi+0D0h] 8000h +
mov eax [edi+40h] +
mov [esi+50h] eax +
mov eax [esi+54h] +
cmp eax [edi+4Ch] +
jz loc_100BF37  +
or dword ptr [esi+0D0h] 10000h +
mov eax [edi+4Ch] +
mov [esi+54h] eax +
mov eax [esi+58h] +
cmp eax [edi+4] +
jz loc_1002B37  +
or dword ptr [esi+0D0h] 20000h +
mov eax [edi+4] +
mov [esi+58h] eax +
jmp loc_1002B37  +
lea eax [esi+0C8h] +
xor edx edx +
cmp [eax] edx +
jz loc_100BF70  +
or dword ptr [esi+0D0h] 24000000h +
mov [eax] edx +
push dword ptr [esi+8]  +
mov [ebp+var_218] edx +
push edx  +
push ecx  +
call ds:OpenProcess  +
mov [ebp+hProcess] eax +
test eax eax +
jnz loc_10031DF  +
jmp loc_100BFBB  +
or dword ptr [esi+0D0h] 80000h +
mov [esi+5Ch] eax +
jmp loc_1006722  +
mov ecx esi +
call sub_1016D73  +
push [ebp+hProcess]  +
call ds:CloseHandle  +
mov ebx 400h +
cmp dword ptr [esi+0ACh] 0 +
jnz loc_100BFE8  +
cmp dword ptr [esi+8] 0 +
jnz loc_100BFE8  +
lea eax [esi+0C4h] +
push eax  +
call ds:GetProcessHeap  +
push eax  +
push 2735h  +
push hInstance  +
call sub_1006576  +
push dword ptr [esi+8]  +
push 0  +
push ebx  +
call ds:OpenProcess  +
mov [ebp+hProcess] eax +
test eax eax +
jnz loc_100322F  +
jmp loc_100C05F  +
mov dword ptr [esi+0B4h] 1 +
jmp loc_10032A5  +
test eax eax +
jl loc_100C038  +
mov al byte ptr [ebp+var_224] +
not al  +
movzx eax al +
and eax 2 +
or eax 4 +
shr eax 1 +
lea ecx [esi+0B8h] +
cmp [ecx] eax +
jz loc_100C051  +
mov [ecx] eax +
jmp loc_100C047  +
push 3  +
lea eax [esi+0B8h] +
pop ecx  +
cmp [eax] ecx +
jz loc_100C051  +
mov [eax] ecx +
or dword ptr [esi+0D0h] 40000000h +
push [ebp+hProcess]  +
call ds:CloseHandle  +
jmp loc_100C077  +
lea eax [esi+0B8h] +
cmp dword ptr [eax] 0 +
jz loc_100C077  +
or dword ptr [esi+0D0h] 40000000h +
and dword ptr [eax] 0 +
cmp dword ptr [esi+0ACh] 0 +
jz loc_10039A6  +
jmp loc_100C0AB  +
lea ecx [esi+0C0h] +
push ecx  +
lea ecx [ebp+Buffer] +
push ecx  +
push 0  +
push eax  +
call sub_1016307  +
jmp sub_1006716  +
mov dword ptr [esi+0ACh] 1 +
cmp [ebp+arg_18] 0 +
jnz loc_1002C20  +
lea eax [edi+20h] +
mov ecx [eax] +
mov [esi+28h] ecx +
mov [ebp+var_224] eax +
mov eax [eax+4] +
or dword ptr [esi+0D0h] 1 +
mov [esi+2Ch] eax +
cmp dword ptr [edi+3Ch] 0 +
jnz loc_10039E5  +
lea eax [esi+98h] +
push eax  +
call ds:GetProcessHeap  +
push eax  +
push 2715h  +
push hInstance  +
call sub_1006576  +
mov edi eax +
jmp loc_100C146  +
mov [ebp+TokenInformation] 4 +
jmp loc_1003A00  +
push eax  +
call ds:HeapAlloc  +
mov [esi+98h] eax +
test eax eax +
jnz loc_1003A18  +
jmp loc_100C141  +
mov eax [ebp+TokenInformation] +
inc eax  +
push offset Srch  +
push eax  +
mov eax [esi+98h] +
lea eax [eax+ebx*2-2] +
push eax  +
call sub_1001A1B  +
jmp loc_100C146  +
mov edi 8007000Eh +
test edi edi +
jl loc_1006734  +
cmp dword_101E468 0 +
jz loc_1002C20  +
push [ebp+var_224]  +
mov ecx esi +
call sub_1003AE7  +
jmp loc_1002C20  +
mov eax [esi+98h] +
cmp eax edi +
jnz loc_1003A3E  +
jmp loc_100C234  +
mov eax [ebp+arg_C] +
mov [ebp+lparam] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_250] eax +
mov eax [ebp+var_22C] +
mov [ebp+var_24C] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_244] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_240] eax +
mov eax [ebp+var_234] +
mov [ebp+var_23C] eax +
mov eax [ebp+var_230] +
mov [ebp+var_238] eax +
lea eax [ebp+lparam] +
push eax  +
push offset fp  +
push dword ptr [esi+8]  +
mov [ebp+var_248] esi +
call VDMEnumTaskWOWEx  +
test eax eax +
jz loc_100C21C  +
xor eax eax +
inc eax  +
cmp [esi+0A4h] edi +
jnz loc_100C1FD  +
mov [esi+0A4h] eax +
mov [esi+0A8h] eax +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
push [ebp+var_238]  +
push [ebp+var_23C]  +
call sub_10032E9  +
jmp loc_1002C43  +
cmp [esi+1Ch] edi +
jl loc_1002C43  +
jg loc_100C234  +
cmp dword ptr [esi+18h] 5F5E100h +
jbe loc_1002C43  +
mov dword ptr [esi+0A8h] 1 +
jmp loc_1002C43  +
***
mov eax 80004005h +
jmp loc_10037A1  +
mov eax 80004005h +
jmp loc_100C371  +
and [ebp+var_50] 0 +
mov esi [ebx+10h] +
add esi [ebp+var_50] +
mov eax [esi+44h] +
test eax eax +
jz loc_100274F  +
jmp loc_1002D26  +
mov ecx [esi+20h] +
cmp ecx [eax+28h] +
jnz loc_100C297  +
mov ecx [esi+24h] +
cmp ecx [eax+2Ch] +
jnz loc_100C297  +
cmp dword ptr [esi+44h] 0 +
jnz loc_100C2A0  +
mov ecx [esi+30h] +
or ecx [esi+34h] +
jnz loc_100C2A0  +
mov ecx [esi+28h] +
or ecx [esi+2Ch] +
jnz loc_100C2A0  +
or dword ptr [eax+8] 0FFFFFFFFh +
jmp loc_1002D5B  +
mov ecx [eax+18h] +
add [ebp+var_4C] ecx +
mov eax [eax+1Ch] +
adc [ebp+hObject] eax +
jmp loc_1002D37  +
shr [ebp+var_74] 0Ah +
shr [ebp+var_78] 0Ah +
shr [ebp+var_6C] 0Ah +
shr edi 0Ah +
shr [ebp+var_68] 0Ah +
mov [ebp+var_70] edi +
jmp loc_10038AF  +
and [ebp+var_50] 0 +
mov esi [ebx+10h] +
add esi [ebp+var_50] +
mov eax [esi+44h] +
test eax eax +
jnz loc_1002DA3  +
cmp [esi+4] eax +
jnz loc_1003785  +
jmp loc_100C321  +
mov dword ptr [esi+40h] 40h +
jmp loc_1002DE1  +
and [ebp+hObject] 0 +
mov ecx [ebp+hObject] +
test ecx ecx +
jnz loc_1003A9D  +
jmp loc_100C330  +
cmp [ebp+var_54] 0 +
jl loc_100C315  +
cmp [ebp+var_58] 0 +
jnz loc_100C321  +
mov ecx [ebp+hObject] +
push 1  +
call sub_1002538  +
jmp loc_100C353  +
mov esi [esi] +
add [ebp+var_50] esi +
test esi esi +
jz loc_1002994  +
jmp loc_100C2D0  +
mov [ebp+var_54] 8007000Eh +
jmp loc_100C353  +
lea esi [ebx+260h] +
push esi  +
call ds:RtlEnterCriticalSection  +
jmp loc_1002584  +
mov eax [ebp+hObject] +
jmp loc_1003792  +
lea esi [ebx+260h] +
push esi  +
call ds:RtlEnterCriticalSection  +
jmp loc_100375A  +
push esi  +
call ds:RtlLeaveCriticalSection  +
jmp loc_100376F  +
pop esi  +
jmp loc_10037A1  +
***
call sub_1002C5B  +
mov ecx esi +
pop esi  +
jmp loc_1003445  +
***
pop esi  +
retn   +
***
mov eax [esi+2Ch] +
cmp eax ebx +
jz loc_1008BB3  +
push eax  +
call ds:CloseHandle  +
jmp loc_1008BB3  +
***
mov dword_101E428[ebx*4] 64h +
jmp loc_1008BF6  +
***
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_1008579  +
***
xor eax eax +
mov [esi] ax +
jmp loc_100854A  +
***
mov esi ds:SendMessageW +
push edi  +
push 1  +
push 2005h  +
push dword ptr [ebp-0D0h]  +
call esi  +
jmp loc_100776A  +
***
lea eax [ebp-0D8h] +
push eax  +
push 1  +
push edi  +
call sub_101B9BD  +
jmp loc_100778C  +
***
cmp dword_101FDC0 edi +
jz loc_100C419  +
push 60h  +
push nNumerator  +
push ds:dword_1007860[ebx*8]  +
call ds:MulDiv  +
cwde   +
jmp loc_10077F6  +
***
mov eax ds:dword_1007860[ebx*8] +
jmp loc_10077F6  +
***
mov eax esi +
shr eax 10h +
cwde   +
push eax  +
movsx eax si +
push eax  +
call sub_1017327  +
jmp loc_1007852  +
***
mov eax dword_101E420 +
mov ebx ds:SendMessageW +
xor edi edi +
cmp eax [esi+10h] +
jnz loc_100C454  +
neg dword_101E424  +
jmp loc_100C479  +
push edi  +
push eax  +
push edi  +
push edi  +
push 101Fh  +
mov eax ecx +
push dword ptr [eax+0Ch]  +
call ebx  +
push eax  +
call sub_1007617  +
mov eax [esi+10h] +
or dword_101E424 0FFFFFFFFh +
mov dword_101E420 eax +
mov eax [ebp-0D0h] +
push offset loc_1016ECE  +
push eax  +
push 1030h  +
push dword ptr [eax+0Ch]  +
call ebx  +
xor ecx ecx +
cmp dword_101E424 edi +
mov eax 200h +
setnl cl  +
dec ecx  +
and ecx eax +
add ecx eax +
mov eax [ebp-0D0h] +
push ecx  +
push dword ptr [esi+10h]  +
push edi  +
push edi  +
push 101Fh  +
push dword ptr [eax+0Ch]  +
call ebx  +
push eax  +
call sub_1007617  +
push dword_101E420  +
push 2  +
call sub_101AC8C  +
jmp loc_1007852  +
***
cmp eax 135h +
jb loc_10046BC  +
cmp eax 136h +
ja loc_1004775  +
jmp loc_100C544  +
mov edx 202h +
cmp eax edx +
jbe loc_100C515  +
cmp eax 203h +
jz loc_100C510  +
cmp eax 406h +
jnz loc_10046BC  +
push esi  +
call sub_1017CD7  +
jmp loc_1007852  +
***
push esi  +
push ebx  +
push eax  +
jmp loc_100C533  +
test byte ptr dword_101E458 10h +
jz loc_1007852  +
xor ecx ecx +
cmp eax edx +
setz cl  +
push esi  +
push 2  +
add ecx 0A1h +
push ecx  +
push hWnd  +
call ds:SendMessageW  +
jmp loc_1007852  +
***
push 1  +
push ebx  +
call ds:SetBkMode  +
mov esi ds:IsThemeActive +
call esi  +
mov edi ds:GetSysColor +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call edi  +
push eax  +
push ebx  +
call ds:SetBkColor  +
push 8  +
call edi  +
push eax  +
push ebx  +
call ds:SetTextColor  +
call esi  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
jmp loc_10046BE  +
***
push edi  +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
mov dword ptr [esi+30h] 1 +
call ds:CreateEventW  +
jmp loc_1007B2D  +
***
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi+4] 0 +
jmp loc_1009086  +
***
mov edi edi +
push edi  +
mov edi esi +
mov eax [edi+4] +
mov esi [esi+8] +
test eax eax +
jz loc_100C62F  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
and dword ptr [edi+4] 0 +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
test esi esi +
jnz loc_100C613  +
pop edi  +
pop ebx  +
jmp loc_1008DEB  +
***
mov eax 8000FFFFh +
jmp loc_1007170  +
cmp dword_101FDC0 0 +
mov eax dword_101FB14[esi*8] +
mov [ebp+lParam] 7 +
mov [ebp+var_23C] eax +
jz loc_100C68B  +
push 60h  +
push nNumerator  +
push nNumber[esi*8]  +
call ds:MulDiv  +
cwde   +
jmp loc_100710F  +
mov eax nNumber[esi*8] +
jmp loc_100710F  +
mov eax [ebp+var_214] +
xor ecx ecx +
mov [eax+44h] esi +
xor eax eax +
cmp dword_101E454 eax +
setnl cl  +
dec ecx  +
and ecx ebx +
add ecx ebx +
push ecx  +
push esi  +
push eax  +
push eax  +
push 101Fh  +
push [ebp+wParam]  +
call edi  +
push eax  +
call sub_1007617  +
inc esi  +
cmp esi 2 +
jnb loc_1007159  +
jmp loc_10070EB  +
***
mov edi ds:CloseHandle +
cmp [esi+40h] ebx +
jz loc_1008C7B  +
jmp loc_1008C58  +
***
push esi  +
push 0FFFFFFFFh  +
push dword ptr [edi+14h]  +
call ds:ImageList_ReplaceIcon  +
cmp eax 0FFFFFFFFh +
jnz loc_100C702  +
mov ebx 80004005h +
push esi  +
call ds:DestroyIcon  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov eax [esi+4] +
push ebx  +
mov ebx ds:GetProcessHeap +
cmp eax edi +
jz loc_100C72B  +
push eax  +
push edi  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov [esi+4] edi +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [esi+4] eax +
pop ebx  +
test eax eax +
jnz loc_10067BD  +
mov eax 8007000Eh +
jmp loc_100298E  +
or dword ptr [esi+28h] 4 +
mov [esi+8] eax +
jmp loc_100297C  +
***
mov [ebp+var_210] eax +
test ebx ebx +
jnz sub_100280F  +
jmp loc_100C788  +
***
mov dword_101F7F8 1 +
push dword ptr [edi+0Ch]  +
call ds:COMCTL32_338  +
jmp sub_10036B2  +
***
mov eax [edi+4] +
mov [ebp-3Ch] eax +
mov [ebp-30h] edi +
mov eax [edi+18h] +
mov [ebp-34h] eax +
mov eax [edi+1Ch] +
mov [ebp-44h] eax +
lea eax [ebp-50h] +
push eax  +
push 0  +
push 104Ch  +
push dword ptr [ebp-4]  +
call esi  +
push ebx  +
push ebx  +
push 1015h  +
push dword ptr [ebp-4]  +
call esi  +
and dword ptr [edi+28h] 0 +
jmp loc_1003724  +
sub eax ebx +
mov [ebp-8] eax +
push 0  +
push ebx  +
push 1008h  +
push dword ptr [ebp-4]  +
call esi  +
dec dword ptr [ebp-8]  +
jz loc_1003737  +
jmp loc_100C831  +
***
push 41Dh  +
push dword ptr [esi+4]  +
call edi  +
mov ebx eax +
call ds:GetFocus  +
cmp eax ebx +
jz loc_1008370  +
push 41Dh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SetFocus  +
jmp loc_1008370  +
mov ecx esi +
call sub_1018770  +
mov ebx eax +
test ebx ebx +
jz loc_100837D  +
mov esi [ebx] +
push hWnd  +
dec esi  +
neg esi  +
sbb esi esi +
and esi 0FFFFFFFDh +
add esi 3 +
call ds:GetMenu  +
mov edi ds:EnableMenuItem +
push esi  +
push 9C69h  +
push eax  +
mov [ebp+hMenu] eax +
call edi  +
push esi  +
push 9C6Ah  +
push [ebp+hMenu]  +
call edi  +
push esi  +
push 755Bh  +
push [ebp+hMenu]  +
call edi  +
mov eax [ebx] +
dec eax  +
neg eax  +
sbb eax eax +
and eax 3 +
push eax  +
push 9C6Dh  +
push [ebp+hMenu]  +
call edi  +
push ebx  +
call ds:COMCTL32_329  +
jmp loc_100837D  +
***
push 0  +
push 418h  +
push 111h  +
push dword ptr [edi+4]  +
call ds:SendMessageW  +
jmp loc_1005268  +
cmp dword_101F7F8 ebx +
jnz loc_10082F5  +
mov ecx [esi+14h] +
mov edx [ebp+hWnd] +
mov [edx+1Ch] ecx +
jmp loc_10082F5  +
xor ebx ebx +
push ebx  +
push ebx  +
push 101Fh  +
push dword ptr [esi]  +
call ds:SendMessageW  +
mov ecx dword_101E450 +
mov [ebp+hWnd] eax +
cmp ecx [esi+10h] +
jnz loc_100C947  +
neg dword_101E454  +
jmp loc_100C966  +
push ebx  +
push dword ptr [edi+44h]  +
push eax  +
call sub_1007617  +
mov eax [esi+10h] +
mov [edi+44h] eax +
mov eax [esi+10h] +
or dword_101E454 0FFFFFFFFh +
mov dword_101E450 eax +
push ebx  +
push offset loc_101802E  +
push dword ptr [edi+0Ch]  +
call ds:COMCTL32_338  +
xor ecx ecx +
cmp dword_101E454 ebx +
mov eax 200h +
setnl cl  +
dec ecx  +
and ecx eax +
add ecx eax +
push ecx  +
push dword ptr [esi+10h]  +
push [ebp+hWnd]  +
call sub_1007617  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push dword_101E450  +
push ebx  +
call sub_101AC8C  +
jmp loc_1005268  +
mov ecx [esi+14h] +
mov eax [esi+2Ch] +
xor ebx ebx +
sub ecx ebx +
jz loc_100C9E2  +
dec ecx  +
jnz loc_1005268  +
cmp [eax+8] ebx +
jz loc_100C9CD  +
push offset unk_101EF50  +
jmp loc_100C9D2  +
push offset unk_101EED0  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1001A1B  +
jmp loc_1005268  +
push dword ptr [eax+4]  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1001A1B  +
or dword ptr [esi+0Ch] 1000h +
jmp loc_1005268  +
***
push [ebp+lpString]  +
mov ecx [edi+10h] +
push dword ptr [edi+4]  +
call sub_10189E4  +
jmp loc_1003406  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi 8007000Eh +
jmp loc_1007028  +
***
mov edi 2021h +
jmp loc_1007008  +
***
mov [esi+14h] eax +
test eax eax +
jnz loc_1007038  +
mov edi 80004005h +
jmp loc_1007028  +
***
call sub_100DD74  +
mov edi eax +
jmp loc_100706A  +
***
push eax  +
call ds:DestroyWindow  +
and dword ptr [esi+8] 0 +
jmp loc_100707B  +
***
push eax  +
call ds:EnumDesktopsW  +
jmp loc_1003346  +
***
mov [esi+38h] eax +
jmp loc_10037DB  +
mov ecx [esi+3Ch] +
cmp ecx edi +
jz loc_1003828  +
mov ebx [ebp+arg_0] +
lea eax [esi+1Ch] +
mov [eax] ebx +
mov ebx [ebp+arg_4] +
mov [esi+20h] ebx +
mov [esi+24h] edx +
mov [esi+28h] ecx +
mov [esi+2Ch] edi +
cmp [esi+40h] edi +
jnz loc_100380C  +
jmp loc_10037F2  +
***
cmp [esi+34h] ebx +
jz loc_10035F9  +
push ebx  +
push ebx  +
push 113h  +
push hWnd  +
call ds:PostMessageW  +
jmp loc_10035F5  +
***
mov edi [ecx+18h] +
push 1  +
call sub_1009050  +
push ebx  +
push dword ptr [esi+0Ch]  +
call ds:COMCTL32_336  +
test edi edi +
jle loc_100CAE3  +
push edi  +
push dword ptr [esi+14h]  +
call ds:ImageList_Remove  +
mov eax [esi+0Ch] +
xor ecx ecx +
cmp [eax] ecx +
jle loc_1003635  +
mov eax [eax+4] +
mov eax [eax+ecx*4] +
test edi edi +
jz loc_100CB09  +
mov edx [eax+18h] +
cmp edx edi +
jle loc_100CB09  +
dec edx  +
or dword ptr [eax+28h] 8 +
mov [eax+18h] edx +
mov eax [esi+0Ch] +
inc ecx  +
cmp ecx [eax] +
jge loc_1003635  +
jmp loc_100CAF0  +
***
push dword ptr [ebp-14h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-14h] ebx +
mov eax [esi+0Ch] +
add dword_101E128 1 +
mov eax [eax] +
mov dword_101E0F8 eax +
adc dword_101E12C ebx +
jmp loc_10035F5  +
***
mov [ebp+lpMem] ebx +
cmp dword_101F6BC ebx +
jbe loc_10054D0  +
jmp loc_1005495  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ds:GetKeyState +
push edi  +
xor edi edi +
push 10h  +
mov [ebp+var_14] ecx +
mov [ebp+var_4] edi +
call esi  +
test ax ax +
jge loc_100CB9D  +
push 12h  +
call esi  +
test ax ax +
jge loc_100CB9D  +
push 11h  +
call esi  +
test ax ax +
jge loc_100CB9D  +
xor eax eax +
jmp loc_1007430  +
push ebx  +
push 64h  +
pop esi  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
jmp loc_1007383  +
***
push eax  +
call ds:HeapFree  +
jmp loc_1007439  +
***
push eax  +
push 0  +
call ds:GetProcessHeap  +
jmp loc_1001940  +
***
mov eax 8000FFFFh +
jmp loc_1006BC4  +
mov eax [ebp+var_238] +
cmp eax 4 +
ja loc_1006AB9  +
mov ecx [ebp+var_244] +
imul eax eax +
mov dword_101F35C[eax] ecx +
mov dword_101E484 ebx +
jmp loc_1006AB9  +
mov eax [ebp+var_210] +
mov ecx [eax-4] +
mov [ebp+lParam] 0Fh +
mov [ebp+var_248] ecx +
cmp dword_101E484 ebx +
jz loc_100CC3A  +
cmp dword_101FDC0 ebx +
jz loc_100CC3A  +
push 60h  +
push nNumerator  +
push dword ptr [eax]  +
call ds:MulDiv  +
cwde   +
jmp loc_1006B17  +
mov eax [eax] +
jmp loc_1006B17  +
add [ebp+var_210] 14h +
inc [ebp+var_21C]  +
cmp [ebp+var_210] offset unk_101F3C0 +
jge loc_1006BAE  +
jmp loc_1006AE2  +
***
push eax  +
push 0FFFFFFFFh  +
push dword ptr [edi+18h]  +
call ds:ImageList_ReplaceIcon  +
push [ebp+hIcon]  +
mov [edi+1Ch] eax +
call ds:DestroyIcon  +
cmp dword ptr [edi+1Ch] 0FFFFFFFFh +
jnz loc_100CC8B  +
mov eax 80004005h +
jmp loc_1007CAB  +
push 0  +
push 32h  +
call esi  +
push eax  +
push 31h  +
call esi  +
push eax  +
push 1  +
push 0BBBh  +
push hInstance  +
call ebx  +
mov [ebp+hIcon] eax +
test eax eax +
jz loc_1007C3F  +
jmp loc_1007C46  +
***
test byte ptr dword_101E458 80h +
jz loc_100CCEC  +
add eax 32h +
push eax  +
push 27h  +
lea eax [ebp+var_A4] +
push eax  +
call sub_1001A1B  +
push offset dword_100D5AC  +
push 27h  +
lea eax [ebp+var_A4] +
push eax  +
call sub_1003CD4  +
mov eax [ebp+var_A8] +
jmp loc_100CCF5  +
xor ecx ecx +
mov word ptr [ebp+var_A4] cx +
add eax 8 +
push eax  +
push 27h  +
lea eax [ebp+var_A4] +
push eax  +
call sub_1003CD4  +
mov ecx dword_101E478 +
lea eax [ebp+var_A4] +
mov [ebp+var_118] eax +
mov eax [ebp+var_A8] +
mov [ebp+var_10C] eax +
cmp ecx [eax] +
jnz loc_100CD2E  +
mov eax [ebx+20h] +
jmp loc_100CD3F  +
cmp dword ptr [eax+84h] 4 +
jz loc_100CD3C  +
mov eax [ebx+1Ch] +
jmp loc_100CD3F  +
mov eax [ebx+24h] +
mov [ebp+var_110] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Ch  +
push [ebp+nVirtKey]  +
call esi  +
push edi  +
push edi  +
push 1015h  +
push [ebp+nVirtKey]  +
call esi  +
mov eax [ebp+var_A8] +
and dword ptr [eax+90h] 0 +
jmp loc_1002045  +
sub eax edi +
mov [ebp+var_B0] eax +
push 0  +
push edi  +
push 1008h  +
push [ebp+nVirtKey]  +
call esi  +
dec [ebp+var_B0]  +
jz loc_1002058  +
jmp loc_100CD84  +
add eax 32h +
push eax  +
push 27h  +
lea eax [ebp+var_54] +
push eax  +
call sub_1001A1B  +
push offset dword_100D5AC  +
push 27h  +
lea eax [ebp+var_54] +
push eax  +
call sub_1003CD4  +
mov eax [ebp+var_A8] +
jmp loc_1005BE9  +
mov eax [ebx+1Ch] +
jmp loc_100CDD4  +
mov eax [ebx+24h] +
mov [ebp+var_D4] eax +
test edi edi +
jz loc_1005C35  +
jmp loc_1005C4B  +
***
xor eax eax +
jmp loc_100591E  +
***
push 0  +
push 0  +
push 101Fh  +
push dword ptr [esi]  +
call ebx  +
mov [ebp+8] eax +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [esi+10h]  +
mov dword ptr [ebp-2Ch] 8 +
push 105Fh  +
push 0BBAh  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
push eax  +
call ebx  +
pop ebx  +
test eax eax +
jz loc_1005147  +
mov eax dword_101FAE8 +
cmp eax [ebp-18h] +
jnz loc_100CE80  +
neg dword_101F998  +
jmp loc_100CEA2  +
push 0  +
push dword ptr [edi+4Ch]  +
push dword ptr [ebp+8]  +
call sub_1007617  +
mov eax [esi+10h] +
mov [edi+4Ch] eax +
mov eax [ebp-18h] +
or dword_101F998 0FFFFFFFFh +
mov dword_101FAE8 eax +
push 0  +
push offset loc_1019BE6  +
push dword ptr [edi+0Ch]  +
call ds:COMCTL32_338  +
xor ecx ecx +
cmp dword_101F998 ecx +
mov eax 200h +
setnl cl  +
dec ecx  +
and ecx eax +
add ecx eax +
push ecx  +
push dword ptr [edi+4Ch]  +
push dword ptr [ebp+8]  +
call sub_1007617  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push dword_101FAE8  +
push 5  +
call sub_101AC8C  +
jmp loc_1005147  +
***
test byte ptr [esi+0Ch] 1 +
jz loc_1005147  +
lea eax [ebp+lParam] +
push eax  +
push dword ptr [esi+14h]  +
mov [ebp+lParam] 8 +
push 105Fh  +
push 0BBAh  +
push dword ptr [edi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
test eax eax +
jz loc_1005147  +
mov eax [ebp+var_18] +
sub eax 0 +
mov edi [esi+2Ch] +
jz loc_100CF9C  +
dec eax  +
jz loc_100CF82  +
dec eax  +
jz loc_100CF67  +
dec eax  +
jz loc_100CF59  +
dec eax  +
jnz loc_1005147  +
mov edi [edi+80h] +
test edi edi +
jnz loc_100CFE2  +
push offset WindowName  +
jmp loc_100CFE3  +
cmp dword ptr [edi+84h] 4 +
jz loc_100CF4F  +
add edi 56h +
jmp loc_100CFE2  +
mov eax [edi+84h] +
mov eax ds:dword_100D8CC[eax*4] +
mov eax lpString1[eax*4] +
test eax eax +
jz loc_100CF4F  +
push eax  +
jmp loc_100CFE3  +
push dword ptr [edi]  +
push offset aD_0  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_100196B  +
add esp 10h +
jmp loc_1005147  +
or dword ptr [esi+0Ch] 1000h +
test byte ptr dword_101E458 80h +
jz loc_100CFDF  +
lea eax [edi+32h] +
push eax  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1001A1B  +
push offset dword_100D5AC  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1003CD4  +
add edi 8 +
push edi  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1003CD4  +
jmp loc_1005147  +
add edi 8 +
push edi  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
call sub_1001A1B  +
jmp loc_1005147  +
***
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1002103  +
***
push [ebp+lpString2]  +
push 15h  +
push edi  +
call sub_1001A1B  +
or dword ptr [esi+90h] 8 +
jmp loc_100211F  +
or dword ptr [esi+90h] 1 +
mov [esi+4] eax +
jmp loc_1002141  +
***
cmp ecx 2 +
jle loc_10059AD  +
cmp ecx 4 +
jle loc_1002367  +
jmp loc_10059AD  +
***
mov eax [ebp-0Ch] +
cmp word ptr [eax] 0 +
mov dword ptr [ebp-20h] 1 +
jnz loc_10023A1  +
mov eax [ebp-4] +
mov dword ptr [esi+eax+8] 5 +
jmp loc_10023A1  +
***
mov ecx offset WindowName +
jmp loc_10023DD  +
***
mov eax [ebp-4] +
mov dword ptr [esi+eax+8] 5 +
jmp loc_10059AD  +
***
push 1  +
mov ecx ebx +
call sub_100191F  +
mov eax [ebp-1Ch] +
push edi  +
push dword ptr [eax+0Ch]  +
call ds:COMCTL32_336  +
jmp loc_1001C30  +
***
mov ecx offset WindowName +
jmp loc_1001CC1  +
***
push ebx  +
jmp loc_1001D3B  +
***
xor eax eax +
inc eax  +
jmp loc_10045F3  +
***
mov eax 110h +
cmp esi eax +
jbe loc_10050D9  +
jmp loc_100D149  +
cmp esi 7Bh +
jnz loc_10045F1  +
push 0BBAh  +
push ebx  +
call ds:GetDlgItem  +
cmp edi eax +
jnz loc_10045F1  +
mov eax [ebp+14h] +
mov ecx [ebp+8] +
shr eax 10h +
cwde   +
push eax  +
movsx eax word ptr [ebp+14h] +
push eax  +
call sub_101A049  +
jmp loc_100D0CE  +
***
mov ecx [ebp+8] +
call sub_101A215  +
test eax eax +
jz loc_100D0CE  +
push dword ptr [ebp+14h]  +
push edi  +
push esi  +
push 0BBAh  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
jmp loc_100D0CE  +
***
mov ecx [ebp+8] +
call sub_1019BFF  +
jmp loc_100D0CE  +
***
cmp esi 111h +
jnz loc_10045B9  +
jmp loc_100D1C8  +
mov eax 202h +
cmp esi eax +
ja loc_10045F1  +
test byte ptr dword_101E458 10h +
jz loc_10045F1  +
push dword ptr [ebp+14h]  +
xor ecx ecx +
cmp esi eax +
setz cl  +
push 2  +
add ecx 0A1h +
push ecx  +
push hWnd  +
call ds:SendMessageW  +
jmp loc_10045F1  +
***
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
jmp loc_10045F3  +
***
shr edi 10h +
mov eax 0FFFFh +
cmp di ax +
jnz loc_10045F1  +
mov eax [ebp+8] +
and dword ptr [eax+10h] 0 +
jmp loc_10045F1  +
***
mov eax 9CADh +
cmp di ax +
jnz loc_100D204  +
push ebx  +
mov ecx offset unk_101E47C +
call sub_101992A  +
cmp eax 1 +
jnz loc_10045F1  +
mov esi [ebp+8] +
mov ecx esi +
call sub_1006A47  +
test eax eax +
jl loc_10045F1  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
jmp loc_10045F1  +
***
mov ecx [ebp+8] +
movzx eax di +
push eax  +
call sub_101A626  +
jmp loc_10045F1  +
***
mov dword ptr [ebp-210h] 8007000Eh +
jmp loc_1007CC5  +
***
mov ebx 2021h +
jmp loc_10068D8  +
***
mov [edi+18h] eax +
test eax eax +
jnz loc_1007CB0  +
mov dword ptr [ebp-210h] 80004005h +
jmp loc_1007CC5  +
***
mov lpString1[ebx*4] eax +
test eax eax +
jnz loc_10054F8  +
mov dword ptr [ebp-210h] 8007000Eh +
jmp loc_1005506  +
***
mov dword ptr [ebp-210h] 80004005h +
jmp loc_1005510  +
***
call sub_100DD74  +
mov [ebp-210h] eax +
jmp loc_1005545  +
***
push eax  +
call ds:DestroyWindow  +
and dword ptr [edi+8] 0 +
jmp loc_1005567  +
***
mov eax [ebp+arg_8] +
or [eax] esi +
jmp loc_10038A7  +
call ds:GetTickCount  +
sub eax [ebp+arg_0] +
cmp eax esi +
jbe loc_100D2B3  +
xor edi edi +
jmp loc_10038A7  +
sub esi eax +
mov eax [ebp+arg_8] +
mov [eax] esi +
jmp loc_10038A7  +
***
mov ecx [ebp+arg_8] +
mov [ebp+var_C] eax +
xor eax eax +
xor edi edi +
cmp [ebp+arg_4] edi +
mov [ebp+var_4] ecx +
setnz al  +
mov [ebp+var_8] eax +
cmp [ebp+arg_4] edi +
jnz sub_100384E  +
lea eax [edi-1] +
cmp ecx eax +
jnz sub_100384E  +
jmp loc_10027C4  +
***
mov ebx esi +
cmp ebx [ebp-8] +
jz loc_100D35E  +
jmp loc_100D38B  +
cmp dword ptr [ebp-24h] 12h +
jz loc_100D377  +
lea eax [ebp-28h] +
push eax  +
call ds:TranslateMessage  +
cmp dword ptr [ebp-24h] 20h +
jnz loc_100D32E  +
movzx eax word ptr [ebp-1Ch] +
cmp eax 0FFFFFFFEh +
jz loc_100D32E  +
push 7F02h  +
push edi  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
jmp loc_100D338  +
lea eax [ebp-28h] +
push eax  +
call ds:DispatchMessageW  +
cmp [ebp+0Ch] edi +
jz loc_100D34B  +
push edi  +
push dword ptr [ebp+0Ch]  +
call ds:WaitForSingleObject  +
cmp eax esi +
jnz loc_100D3B5  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-0Ch]  +
call sub_100388C  +
test eax eax +
jz loc_100D380  +
push dword ptr [ebp+14h]  +
lea eax [ebp-28h] +
push 1  +
push edi  +
push edi  +
push dword ptr [ebp+8]  +
push eax  +
call sub_101AC17  +
test eax eax +
jz loc_100D382  +
jmp loc_100D2FA  +
push dword ptr [ebp-20h]  +
call ds:PostQuitMessage  +
mov ebx esi +
cmp ebx [ebp-8] +
jz loc_1003855  +
cmp ebx esi +
jnz loc_10027C0  +
cmp [ebp+0Ch] edi +
jz loc_10027C0  +
push edi  +
push dword ptr [ebp+0Ch]  +
call ds:WaitForSingleObject  +
cmp eax esi +
jz loc_10027C0  +
mov ebx eax +
jmp loc_10027C0  +
mov ebx eax +
jmp loc_100D382  +
***
movzx eax cx +
jmp loc_1006D29  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jnz loc_1006D45  +
jmp loc_100D3F3  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_1006D7D  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_1006D7D  +
call GetLastError  +
cmp eax 7Eh +
jz loc_100D404  +
cmp eax 0C1h +
jnz loc_100D43A  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_1006D83  +
mov [ebp+hModule] eax +
jmp loc_1006D7D  +
call GetLastError  +
cmp eax 7Fh +
jz loc_100D42F  +
cmp eax 0B6h +
jnz loc_100D436  +
mov [ebp+var_4] 1 +
test esi esi +
jnz loc_100D445  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_10055A9  +
mov eax [ebp+arg_4] +
mov [eax] esi +
jmp loc_10055A9  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_101F824 eax +
xor ebx ebx +
cmp dword_101F7FC ebx +
jnz loc_100D4EB  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_10086B4  +
retn   +
***
push (offset dword_1006980+5)  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_1006FA6  +
***
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
***
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_1008687  +
***
cmp ax 3 +
jnz loc_1008635  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_10083BF  +
not eax  +
mov dword_101E090 eax +
jmp loc_1008407  +
test dword_101E08C ebx +
jnz loc_100D598  +
mov esi 0BB40E64Fh +
mov dword_101E08C esi +
not esi  +
mov dword_101E090 esi +
pop esi  +
jmp loc_1008407  +
***
jmp loc_100D5C5  +
add ch dl +
add eax [eax] +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101FDC8 +
test eax eax +
jz loc_100D972  +
push 0  +
push 1  +
push eax  +
call ds:CloseThreadpoolCleanupGroupMembers  +
push 0  +
push 0  +
push 407h  +
push [ebp+hWnd]  +
call ds:PostMessageW  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push esi  +
push hWnd  +
call ds:ShowWindow  +
mov eax hMutex +
cmp eax esi +
jz loc_100D9D0  +
push eax  +
call ds:ReleaseMutex  +
mov eax hMutex +
cmp eax esi +
jz loc_100D9D0  +
cmp eax 0FFFFFFFFh +
jz loc_100D9D0  +
push eax  +
call ds:CloseHandle  +
or hMutex 0FFFFFFFFh +
cmp dword_101FDCC esi +
jnz loc_100D9FB  +
push esi  +
push esi  +
push [ebp+lpParameter]  +
push offset sub_100D959  +
push esi  +
push esi  +
call ds:CreateThread  +
mov dword_101FDCC eax +
cmp eax esi +
jnz loc_100D9FB  +
pop esi  +
pop ebp  +
jmp ds:DestroyWindow  +
pop esi  +
pop ebp  +
retn 4  +
***
push hWnd  +
call ds:SetForegroundWindow  +
xor eax eax +
push 3  +
push eax  +
push eax  +
push eax  +
push eax  +
mov eax dword_101E458 +
and al 4 +
movsx eax al +
neg eax  +
sbb eax eax +
push eax  +
push hWnd  +
call ds:SetWindowPos  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
push eax  +
push eax  +
lea edi [ebp+var_28] +
stos   +
mov edi [ebp+arg_0] +
or [ebp+var_20] 0FFFFFFFFh +
push 121Bh  +
push [ebp+hWnd]  +
mov [ebp+lParam] edi +
mov [ebp+var_24] 0FFFFFF94h +
call esi  +
mov [ebp+var_1C] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 4Eh  +
push edi  +
call ds:GetParent  +
push eax  +
call esi  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax hObject +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+hObject] ebx +
mov [ebp+lpMem] ebx +
test eax eax +
jz loc_100DAE6  +
push hObject  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_100DBD9  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100DADF  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_100DBD9  +
push 1Ch  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_100DB07  +
mov ebx 8007000Eh +
jmp loc_100DBD9  +
push edi  +
lea eax [ebp+hObject] +
push eax  +
push 2  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_100DB41  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100DB37  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_100DBD8  +
push offset hObject  +
push 2  +
push 2  +
push 0  +
push 2Ch  +
push [ebp+hObject]  +
call ds:DuplicateTokenEx  +
test eax eax +
jnz loc_100DB6F  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100DB69  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_100DBD8  +
mov eax [ebp+lpMem] +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 1 +
push eax  +
push ebx  +
mov dword ptr [eax+0Ch] 2 +
mov dword ptr [eax+4] 14h +
mov [eax+8] ebx +
push hObject  +
call ds:AdjustTokenPrivileges  +
test eax eax +
jnz loc_100DBB4  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100DBAE  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_100DBD8  +
push hObject  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jz loc_100DBC8  +
xor ebx ebx +
jmp loc_100DBD8  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100DBD6  +
and eax edi +
or eax esi +
mov ebx eax +
pop edi  +
xor esi esi +
cmp [ebp+hObject] esi +
jz loc_100DBF3  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_100DBF3  +
push [ebp+hObject]  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
cmp [ebp+lpMem] esi +
jz loc_100DC09  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push esi  +
push edi  +
push eax  +
push [ebp+hInstance]  +
xor edi edi +
call ds:LoadMenuW  +
mov esi eax +
test esi esi +
jz loc_100DC54  +
push edi  +
push esi  +
call ds:GetSubMenu  +
mov edi eax +
test edi edi +
jz loc_100DC4D  +
push 400h  +
push 0  +
push esi  +
call ds:RemoveMenu  +
push esi  +
call ds:DestroyMenu  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100DC75  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_100DC7A  +
mov ecx offset aNull +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_100DCED  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_100DCDB  +
dec edx  +
jnz loc_100DCED  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_100DCEA  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_100DD09  +
xor eax eax +
jmp loc_100DD19  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_100DD3A  +
xor eax eax +
jmp loc_100DD49  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_100DD88  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
push [ebp+arg_0]  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
call sub_100DC61  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push 38Fh  +
push 0  +
call WinSqmAddToStream  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push offset LibFileName  +
xor ebx ebx +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jz loc_100DDF4  +
cmp eax 0FFFFFFFFh +
jnz loc_100DE08  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100DE02  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_100DE49  +
push offset ProcName  +
push [ebp+hLibModule]  +
call ds:__imp_GetProcAddress  +
test eax eax +
jnz loc_100DE33  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100DE2C  +
jle loc_100DE47  +
and eax edi +
or eax esi +
jmp loc_100DE47  +
mov eax 80004005h +
jmp loc_100DE47  +
cmp [ebp+arg_4] 0 +
jnz loc_100DE49  +
mov ecx [ebp+arg_0] +
push dword ptr [ecx+18h]  +
push dword ptr [ecx+10h]  +
push dword ptr [ecx+0Ch]  +
call eax  +
mov ebx eax +
cmp [ebp+hLibModule] 0 +
jz loc_100DE58  +
push [ebp+hLibModule]  +
call ds:__imp_FreeLibrary  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push offset Name  +
push 1  +
push 0  +
call ds:CreateMutexW  +
mov ebx ds:__imp_GetLastError +
mov hMutex eax +
test eax eax +
jnz loc_100DEF0  +
call ebx  +
mov esi 0FFFFh +
mov edi 80070000h +
test eax eax +
jz loc_100DEE3  +
jle loc_100DEE8  +
and eax esi +
or eax edi +
jmp loc_100DEE8  +
mov eax 80004005h +
mov [ebp+var_210] eax +
jmp loc_100DF10  +
call ebx  +
xor ecx ecx +
mov esi 0FFFFh +
mov edi 80070000h +
test eax eax +
jz loc_100DF0A  +
jle loc_100DF08  +
and eax esi +
or eax edi +
mov ecx eax +
mov [ebp+var_210] ecx +
cmp [ebp+var_210] 0 +
jge loc_100E02F  +
mov eax [ebp+var_210] +
and eax esi +
cmp eax 0B7h +
jnz loc_100E02F  +
cmp [ebp+arg_0] 0 +
jnz loc_100DF51  +
push hMutex  +
call ds:ReleaseMutex  +
mov [ebp+var_210] 1 +
jmp loc_100E02F  +
push 2710h  +
push hMutex  +
call ds:WaitForSingleObject  +
push 104h  +
lea eax [ebp+WindowName] +
push eax  +
push 2713h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jle loc_100DF8C  +
and [ebp+var_210] 0 +
jmp loc_100DFAD  +
call ebx  +
test eax eax +
jz loc_100DF9A  +
jle loc_100DF9F  +
and eax esi +
or eax edi +
jmp loc_100DF9F  +
mov eax 80004005h +
mov [ebp+var_210] eax +
test eax eax +
jl loc_100E02F  +
lea eax [ebp+WindowName] +
push eax  +
push 8002h  +
call ds:FindWindowW  +
mov [ebp+hWnd] eax +
test eax eax +
jz loc_100E02F  +
lea ecx [ebp+dwProcessId] +
push ecx  +
push eax  +
call ds:GetWindowThreadProcessId  +
push [ebp+dwProcessId]  +
call ds:AllowSetForegroundWindow  +
lea eax [ebp+dwResult] +
push eax  +
push 2710h  +
push 2  +
push 0  +
push 0  +
push 40Bh  +
push [ebp+hWnd]  +
call ds:SendMessageTimeoutW  +
test eax eax +
jnz loc_100E018  +
call ebx  +
test eax eax +
jle loc_100E016  +
and eax esi +
or eax edi +
test eax eax +
jl loc_100E028  +
cmp [ebp+dwResult] 40Bh +
jz loc_100DF42  +
and [ebp+var_210] 0 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_10017B0 +
mov [eax+4] ecx +
mov [eax+10h] ecx +
mov [eax+30h] ecx +
mov [eax+34h] ecx +
mov [eax+38h] ecx +
mov [eax+3288h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx 0FFFFh +
push esi  +
cmp cx [ebp+arg_10] +
jnz loc_100E102  +
test eax eax +
jz loc_100E10B  +
test dword ptr [ebp+arg_10] 2800h +
jz loc_100E130  +
xor esi esi +
push esi  +
push esi  +
push 409h  +
push dword_101E0A0  +
call ds:SendMessageW  +
mov dword_101F6C4 esi +
call sub_1002432  +
jmp loc_100E1DE  +
test byte ptr [ebp+arg_10] 10h +
jz loc_100E170  +
and [ebp+var_23C.cch] 0 +
lea ecx [ebp+var_23C] +
push ecx  +
push 1  +
push [ebp+uID]  +
mov [ebp+var_23C.cbSize] 30h +
push eax  +
mov [ebp+var_23C.fMask] 2 +
call ds:GetMenuItemInfoW  +
test eax eax +
jz loc_100E1DE  +
mov eax [ebp+var_23C.wID] +
jmp loc_100E173  +
mov eax [ebp+uID] +
push edi  +
push 104h  +
lea ecx [ebp+lParam] +
push ecx  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
mov esi ds:SendMessageW +
lea eax [ebp+lParam] +
push eax  +
push 1FFh  +
mov edi 40Bh +
push edi  +
push dword_101E0A0  +
mov dword_101F6C4 1 +
call esi  +
push 0  +
push 1  +
push 409h  +
push dword_101E0A0  +
call esi  +
lea eax [ebp+lParam] +
push eax  +
push 100h  +
push edi  +
push dword_101E0A0  +
call esi  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001679  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
xor ecx ecx +
cmp dword ptr [eax+8] 0FFFFFE01h +
jnz loc_100E214  +
push ecx  +
push eax  +
call sub_100DDC8  +
xor ecx ecx +
test eax eax +
setl cl  +
inc ecx  +
push ecx  +
push 0  +
push [ebp+hWnd]  +
call ds:SetWindowLongW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 624h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push 40h  +
push 0  +
push 0  +
push 1  +
push 6Bh  +
push hInstance  +
call ds:LoadImageW  +
mov [ebp+hIcon] eax +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jz loc_100E272  +
cmp eax 0FFFFFFFFh +
jnz loc_100E288  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100E282  +
and eax edi +
or eax esi +
test eax eax +
jl loc_100E3AF  +
push ebx  +
mov ebx ds:LoadStringW +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 2711h  +
push hInstance  +
call ebx  +
test eax eax +
jg loc_100E2CB  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100E2BE  +
jle loc_100E2C3  +
and eax edi +
or eax esi +
jmp loc_100E2C3  +
mov eax 80004005h +
test eax eax +
jl loc_100E3AE  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push 2712h  +
push hInstance  +
call ebx  +
test eax eax +
jg loc_100E307  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100E2FA  +
jle loc_100E2FF  +
and eax edi +
or eax esi +
jmp loc_100E2FF  +
mov eax 80004005h +
test eax eax +
jl loc_100E3AE  +
lea eax [ebp+var_414] +
push eax  +
push 104h  +
call ds:GetCurrentDirectoryW  +
test eax eax +
ja loc_100E338  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100E32F  +
jle loc_100E334  +
and eax edi +
or eax esi +
jmp loc_100E334  +
mov eax 80004005h +
test eax eax +
jl loc_100E3AE  +
push 14h  +
pop ebx  +
push 1  +
push 0  +
call sub_100DDC8  +
test eax eax +
jl loc_100E34B  +
push 54h  +
pop ebx  +
test bl 40h +
jz loc_100E386  +
lea eax [ebp+var_624] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
test eax eax +
jnz loc_100E37A  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100E378  +
and eax edi +
or eax esi +
test eax eax +
jl loc_100E383  +
cmp [ebp+var_624] 0 +
jz loc_100E386  +
and ebx 0FFFFFFBFh +
push ebx  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+hIcon]  +
push hWnd  +
call ds:SHELL32_61  +
pop ebx  +
cmp [ebp+hIcon] 0 +
pop edi  +
pop esi  +
jz loc_100E3C6  +
push [ebp+hIcon]  +
call ds:DestroyIcon  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 268h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 40h  +
xor ecx ecx +
lea eax [edi-0EA63h] +
pop esi  +
mov [ebp+var_210] ecx +
mov edx 0EA63h +
cmp eax esi +
ja loc_100E41E  +
lea ecx [edi-0EA63h] +
mov edi edx +
mov [ebp+arg_4] edi +
mov eax 9C47h +
cmp edi eax +
jg loc_100E7FE  +
jz loc_100E7E3  +
mov eax 967h +
cmp edi eax +
jg loc_100E57C  +
jz loc_100E567  +
add eax 0FFFFFFFCh +
cmp edi eax +
jg loc_100E508  +
jz loc_100E4F6  +
cmp edi 2 +
jz loc_100E6C3  +
cmp edi 417h +
jle loc_100EB75  +
cmp edi 41Ah +
jle loc_100E4C2  +
cmp edi 961h +
jz loc_100E4A0  +
cmp edi 962h +
jnz loc_100EB75  +
xor eax eax +
cmp dword_101E164 eax +
setz al  +
mov dword_101E164 eax +
call sub_10049CE  +
jmp loc_100EB75  +
xor eax eax +
cmp dword_101E160 eax +
setz al  +
mov dword_101E160 eax +
call sub_10049CE  +
push 0  +
push ebx  +
call sub_1001B36  +
jmp loc_100EB75  +
mov eax dword_101E158 +
sub eax 0 +
jz loc_100E4E5  +
dec eax  +
jnz loc_100EB8F  +
mov ecx dword_101E54C +
push eax  +
push edi  +
call sub_10166DD  +
jmp loc_100EB8F  +
mov ecx dword_101E548 +
push edi  +
call sub_1018C76  +
jmp loc_100EB8F  +
xor eax eax +
cmp dword_101E168 eax +
setz al  +
mov dword_101E168 eax +
jmp loc_100E496  +
mov eax edi +
sub eax 964h +
jz loc_100E54A  +
dec eax  +
jz loc_100E535  +
dec eax  +
jnz loc_100EB75  +
cmp dword_101E0D8 4 +
jle loc_100EB75  +
mov ecx dwInitParam +
call sub_1010C47  +
jmp loc_100E4B5  +
xor eax eax +
cmp dword_101E16C eax +
setz al  +
mov dword_101E16C eax +
jmp loc_100E496  +
cmp dword_101E0D8 4 +
jle loc_100EB75  +
mov ecx dwInitParam +
call sub_1012BA2  +
jmp loc_100EB75  +
xor eax eax +
cmp dword_101E15C eax +
setz al  +
mov dword_101E15C eax +
jmp loc_100E496  +
mov eax 755Bh +
cmp edi eax +
jg loc_100E672  +
jz loc_100E8C2  +
cmp edi 968h +
jz loc_100E640  +
cmp edi 96Ah +
jz loc_100E62B  +
cmp edi 0C94h +
jz loc_100E5E6  +
cmp edi 0DB3h +
jle loc_100EB75  +
cmp edi 0DB7h +
jg loc_100EB75  +
mov ecx dword_101E550 +
mov eax [ecx] +
push 0  +
push edi  +
push 111h  +
call dword ptr [eax+14h]  +
push eax  +
call ds:SendMessageW  +
jmp loc_100EB8F  +
mov ecx dword_101E458 +
not ecx  +
mov eax 80h +
and ecx eax +
shr ecx 7 +
shl ecx 7 +
xor ecx dword_101E458 +
and ecx eax +
xor dword_101E458 ecx +
call sub_10049CE  +
cmp dword_101E0D8 5 +
jle loc_100EB75  +
mov ecx dword_101E55C +
mov eax [ecx] +
call dword ptr [eax+18h]  +
jmp loc_100EB75  +
xor eax eax +
cmp dword_101E174 eax +
setz al  +
mov dword_101E174 eax +
jmp loc_100E496  +
xor eax eax +
cmp dword_101E170 eax +
setz al  +
mov dword_101E170 eax +
call sub_10049CE  +
cmp dword_101E0D8 4 +
jle loc_100EB75  +
mov ecx dwInitParam +
call sub_1012C0C  +
jmp loc_100EB75  +
mov eax edi +
sub eax 9C41h +
jz loc_100E6CE  +
dec eax  +
jz loc_100E6C3  +
sub eax 4 +
jnz loc_100EB75  +
mov eax dword_101E458 +
mov ecx eax +
not ecx  +
and ecx 4 +
shr ecx 2 +
shl ecx 2 +
xor ecx eax +
push 3  +
and ecx 4 +
xor eax ecx +
xor ecx ecx +
push ecx  +
mov dword_101E458 eax +
push ecx  +
and eax 4 +
push ecx  +
shr eax 2 +
push ecx  +
or eax 0FFFFFFFEh +
push eax  +
push ebx  +
call ds:SetWindowPos  +
jmp loc_100E496  +
push ebx  +
call sub_100D98F  +
jmp loc_100EB75  +
push 11h  +
call ds:GetKeyState  +
test ax ax +
jl loc_100E708  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push offset sub_100E22C  +
push esi  +
push esi  +
call ds:CreateThread  +
cmp eax esi +
jnz loc_100E6FC  +
push esi  +
call sub_100E22C  +
jmp loc_100EB75  +
push eax  +
call ds:CloseHandle  +
jmp loc_100EB75  +
push esi  +
lea eax [ebp+StartupInfo.lpReserved] +
push 0  +
push eax  +
call memset  +
and [ebp+hObject] 0 +
xor eax eax +
lea edi [ebp-220h] +
stos   +
stos   +
stos   +
mov edi ds:ExpandEnvironmentStringsW +
xor eax eax +
inc eax  +
add esp 0Ch +
mov [ebp+StartupInfo.dwFlags] eax +
mov [ebp+StartupInfo.wShowWindow] ax +
mov esi 104h +
push esi  +
lea eax [ebp+szApp] +
push eax  +
push offset Src  +
mov [ebp+StartupInfo.cb] 44h +
call edi  +
test eax eax +
jnz loc_100E789  +
push esi  +
lea eax [ebp+szApp] +
push eax  +
push offset aWindirSystem32  +
call edi  +
test eax eax +
jnz loc_100E789  +
push offset aCmd_exe  +
push esi  +
lea eax [ebp+szApp] +
push eax  +
call sub_1001A1B  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
xor eax eax +
push eax  +
push eax  +
push 4000000h  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+szApp] +
push ecx  +
push eax  +
call ds:CreateProcessW  +
test eax eax +
jz loc_100E7CD  +
push dword ptr [ebp-220h]  +
mov esi ds:CloseHandle +
call esi  +
push [ebp+hObject]  +
call esi  +
jmp loc_100E7D9  +
call ds:__imp_GetLastError  +
mov [ebp+var_210] eax +
mov edi 0C3B5h +
jmp loc_100EB75  +
mov eax dword_101E458 +
not eax  +
xor eax dword_101E458 +
and eax 1 +
xor dword_101E458 eax +
jmp loc_100E496  +
mov eax 9C7Fh +
cmp edi eax +
jg loc_100E9BC  +
jz loc_100E9AE  +
lea eax [edi-9C55h] +
cmp eax 23h +
ja loc_100EB75  +
movzx eax ds:byte_100EBC0[eax] +
jmp ds:off_100EBA0[eax*4]  +
call sub_101ABDD  +
mov esi eax +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push 0  +
push offset rclsid  +
call CoCreateInstance  +
test eax eax +
jl loc_100E87B  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push offset aMshelpWindows?  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push offset aHelp_entry_id_  +
call sub_100DD8E  +
push esi  +
call sub_101ABFD  +
jmp loc_100EB75  +
mov eax dword_101E458 +
not eax  +
and eax 8 +
shr eax 3 +
shl eax 3 +
xor eax dword_101E458 +
and eax 8 +
xor dword_101E458 eax +
call sub_10049CE  +
cmp dword_101E0D8 3 +
jle loc_100EB75  +
mov ecx dword_101E554 +
jmp loc_100E621  +
mov ecx dword_101E548 +
jmp loc_100E5CD  +
cmp dword_101E0D8 1 +
jle loc_100EB75  +
mov ecx dword_101E54C +
call sub_101633D  +
jmp loc_100EB75  +
cmp dword_101E0D8 4 +
jle loc_100E4B5  +
cmp dword_101E158 4 +
jnz loc_100E4B5  +
mov ecx dwInitParam +
call sub_1012E9A  +
jmp loc_100E4B5  +
lea eax [edi-9C56h] +
mov esi ds:dword_100EBE4[eax*4] +
xor ebx ebx +
push ebx  +
push hWnd  +
mov dword_101E144 eax +
mov uElapse esi +
call ds:KillTimer  +
cmp esi ebx +
jz loc_100E496  +
push ebx  +
push uElapse  +
push ebx  +
push hWnd  +
call ds:SetTimer  +
jmp loc_100E496  +
push 6Bh  +
push hInstance  +
call ds:LoadIconW  +
mov esi eax +
test esi esi +
jz loc_100EB75  +
push 104h  +
lea eax [ebp+szApp] +
push eax  +
push 2713h  +
push hInstance  +
call ds:LoadStringW  +
push esi  +
push 0  +
lea eax [ebp+szApp] +
push eax  +
push ebx  +
call ds:ShellAboutW  +
push esi  +
call ds:DestroyIcon  +
jmp loc_100EB75  +
push 6  +
push ebx  +
call ds:ShowWindow  +
jmp loc_100EB75  +
mov eax 9CA3h +
cmp edi eax +
jg loc_100EA71  +
jz loc_100EA42  +
mov eax edi +
sub eax 9C80h +
jz loc_100EA38  +
dec eax  +
jz loc_100EA1A  +
sub eax 21h +
jnz loc_100EB75  +
mov eax dword_101E458 +
not eax  +
and eax esi +
shr eax 6 +
shl eax 6 +
xor eax dword_101E458 +
and eax esi +
xor dword_101E458 eax +
call sub_10049CE  +
cmp dword_101E0D8 1 +
jle loc_100EB75  +
mov ecx dword_101E54C +
jmp loc_100E621  +
mov eax dword_101E458 +
not eax  +
and eax 20h +
shr eax 5 +
shl eax 5 +
xor eax dword_101E458 +
and eax 20h +
jmp loc_100E7F3  +
call sub_100DA05  +
jmp loc_100EB75  +
mov eax dword_101E458 +
not eax  +
and eax 10h +
shr eax 4 +
shl eax 4 +
xor eax dword_101E458 +
and eax 10h +
xor dword_101E458 eax +
call sub_10049CE  +
push ebx  +
call sub_10048D1  +
jmp loc_100EB75  +
mov eax 9CA4h +
cmp edi eax +
jl loc_100EB75  +
cmp edi 9CA5h +
jle loc_100EAF8  +
add eax 9 +
cmp edi eax +
jz loc_100EACF  +
cmp edi 0EA5Fh +
jle loc_100EB75  +
cmp edi edx +
jg loc_100EB75  +
lea eax [ecx+edi-0EA60h] +
mov dword_101E140 eax +
call sub_10049CE  +
cmp dword_101E0D8 3 +
jle loc_100EB75  +
mov ecx dword_101E554 +
call sub_1004DEC  +
jmp loc_100E8B7  +
cmp dword_101E0D8 5 +
jle loc_100EB75  +
mov ecx dword_101E55C +
push 0  +
push eax  +
mov eax [ecx] +
push 111h  +
call dword ptr [eax+14h]  +
push eax  +
call ds:SendMessageW  +
jmp loc_100EB75  +
xor ebx ebx +
cmp [ebp+arg_4] eax +
mov eax dword_101E0D8 +
setz bl  +
lea ebx [ebx+ebx-1] +
add ebx dword_101E158 +
jns loc_100EB14  +
lea ebx [eax-1] +
cmp ebx eax +
jl loc_100EB1A  +
xor ebx ebx +
mov edi ds:GetDlgItem +
push 0  +
push ebx  +
push 130Ch  +
mov esi 3E8h +
push esi  +
push hWnd  +
call edi  +
push eax  +
call ds:SendMessageW  +
push esi  +
push hWnd  +
call edi  +
mov [ebp-220h] eax +
lea eax [ebp-220h] +
push eax  +
mov [ebp-21Ch] esi +
mov dword ptr [ebp-218h] 0FFFFFDD9h +
call sub_1004DCA  +
mov edi [ebp+arg_4] +
test eax eax +
jz loc_100EB75  +
mov dword_101E158 ebx +
push [ebp+var_210]  +
push 0  +
push edi  +
push dword_101E158  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 828h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi ds:LoadStringW +
mov [ebp+hWnd] eax +
mov esi 104h +
push esi  +
lea eax [ebp+Caption] +
push eax  +
push [ebp+uID]  +
push hInstance  +
call edi  +
test eax eax +
jz loc_100EDFD  +
push ebx  +
mov ebx 208h +
push ebx  +
lea eax [ebp+Text] +
push eax  +
push 2720h  +
push hInstance  +
call edi  +
test eax eax +
jz loc_100EDFC  +
cmp [ebp+dwMessageId] 57h +
lea eax [ebp+var_20C] +
jnz loc_100EDAF  +
push esi  +
push eax  +
push 2724h  +
push hInstance  +
call edi  +
jmp loc_100EDC8  +
push 0  +
push esi  +
push eax  +
push 400h  +
push [ebp+dwMessageId]  +
push 0  +
push 1000h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_100EDFC  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
lea eax [ebp+Text] +
push eax  +
call sub_1003CD4  +
push 10h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push [ebp+hWnd]  +
call ds:MessageBoxW  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
push [ebp+dwBytes]  +
test eax eax +
jnz loc_100EE41  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_100EE6C  +
jmp loc_100EE8A  +
mov esi ds:GetProcessHeap +
push eax  +
push 10h  +
call esi  +
push eax  +
call ds:HeapReAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100EE8A  +
push [ebp+dwBytes]  +
push eax  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100EE75  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100EE8C  +
mov eax [edi] +
test eax eax +
jz loc_100EE8A  +
push eax  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
and dword ptr [edi] 0 +
mov [edi] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi ds:HeapFree +
mov dword ptr [esi] offset off_1001688 +
test eax eax +
jz loc_100EEC7  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
mov eax [esi+60h] +
and dword ptr [esi+8] 0 +
test eax eax +
jz loc_100EED9  +
push eax  +
call ds:CloseHandle  +
mov eax lpMem +
test eax eax +
jz loc_100EEF1  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and lpMem 0 +
mov eax [esi+64h] +
test eax eax +
jz loc_100EF0C  +
cmp dword ptr [eax] 0 +
jz loc_100EF0C  +
push dword ptr [eax]  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi+64h] +
and dword ptr [eax] 0 +
mov eax [esi+64h] +
test eax eax +
jz loc_100EF1F  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+64h] 0 +
mov eax [esi+68h] +
test eax eax +
jz loc_100EF3A  +
cmp dword ptr [eax] 0 +
jz loc_100EF3A  +
push dword ptr [eax]  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi+68h] +
and dword ptr [eax] 0 +
mov eax [esi+68h] +
test eax eax +
jz loc_100EF4D  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+68h] 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+nIDDlgItem]  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
call ds:GetDlgItem  +
push [ebp+lpPoints]  +
mov ecx [ebp+arg_8] +
push eax  +
mov [ecx] eax +
call ds:GetWindowRect  +
push 2  +
push [ebp+lpPoints]  +
push dword ptr [esi+0Ch]  +
push 0  +
call ds:MapWindowPoints  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+eax*4+2Ch]  +
push dword ptr [esi+20h]  +
call ds:SelectObject  +
mov ebx [ebp+arg_10] +
mov [ebp+var_4] eax +
mov eax [esi+7Ch] +
movzx eax byte ptr [ebx+eax] +
mov [ebp+arg_0] eax +
push 0  +
fild  [ebp+arg_0] +
fdiv  ds:dbl_100D5D8 +
fmul  ds:dbl_100D5D0 +
call _ftol2  +
imul eax [ebp+arg_C] +
push 64h  +
pop ecx  +
xor edx edx +
div  ecx +
mov ecx [ebp+arg_C] +
sub ecx eax +
push ecx  +
push dword ptr [esi+58h]  +
push dword ptr [esi+20h]  +
call ds:MoveToEx  +
mov ecx [esi+7Ch] +
xor edx edx +
mov edi 7D0h +
lea eax [ecx+7CFh] +
div  edi +
mov edi edx +
cmp edi ecx +
jz loc_100F076  +
mov eax [ebp+arg_8] +
add eax 4 +
and [ebp+arg_0] 0 +
mov [ebp+arg_10] eax +
mov eax [ebp+arg_10] +
cmp [ebp+arg_0] eax +
jge loc_100F076  +
movzx eax byte ptr [edi+ebx] +
mov [ebp+arg_8] eax +
fild  [ebp+arg_8] +
fdiv  ds:dbl_100D5D8 +
fmul  ds:dbl_100D5D0 +
call _ftol2  +
imul eax [ebp+arg_C] +
push 64h  +
pop ecx  +
xor edx edx +
div  ecx +
mov ecx [ebp+arg_C] +
sub ecx eax +
mov eax [esi+58h] +
sub eax [ebp+arg_0] +
push ecx  +
push eax  +
push dword ptr [esi+20h]  +
call ds:LineTo  +
lea eax [edi+7CFh] +
xor edx edx +
mov ecx 7D0h +
div  ecx +
mov eax [ebp+arg_4] +
add [ebp+arg_0] eax +
mov edi edx +
cmp edi [esi+7Ch] +
jnz loc_100F016  +
cmp [ebp+var_4] 0 +
jz loc_100F088  +
push [ebp+var_4]  +
push dword ptr [esi+20h]  +
call ds:SelectObject  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_30] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi ds:GetProcessHeap +
push 40h  +
mov esi ecx +
mov [ebp+var_30] 2Dh +
mov [ebp+var_2C] 6B756843h +
mov [ebp+var_28] 10h +
pop ecx  +
mov [ebp+dwBytes] ecx +
cmp ecx [esi+8] +
jbe loc_100F106  +
mov eax [esi+4] +
xor ebx ebx +
cmp eax ebx +
jz loc_100F0EE  +
push eax  +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+dwBytes] +
mov [esi+4] ebx +
mov [esi+8] ebx +
push ecx  +
push ebx  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_100F161  +
mov ecx [ebp+dwBytes] +
mov [esi+8] ecx +
mov ebx [esi+4] +
lea eax [ebp+dwBytes] +
push eax  +
push 14h  +
lea eax [ebp+var_30] +
push eax  +
push 4Fh  +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ecx +
mov [ebp+var_C] ecx +
call ds:NtQuerySystemInformation  +
push eax  +
call ds:RtlNtStatusToDosError  +
xor edx edx +
cmp eax edx +
jle loc_100F13B  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edx +
mov [ebp+var_4] eax +
jge loc_100F16D  +
cmp eax 800700EAh +
jnz loc_100F23F  +
mov ecx [ebp+dwBytes] +
cmp ecx [ebp+var_C] +
ja loc_100F0CC  +
mov ecx [ebp+var_C] +
jmp loc_100F0C9  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100F23F  +
cmp dword ptr [ebx] 1 +
jz loc_100F17E  +
mov [ebp+var_4] 8007051Ah +
jmp loc_100F23F  +
mov ecx [ebx+8] +
xor esi esi +
xor edi edi +
mov [ebp+var_18] edx +
mov [ebp+var_14] edx +
mov [ebp+var_10] edx +
test ecx ecx +
jbe loc_100F1CC  +
lea eax [ebx+28h] +
mov [ebp+var_C] ecx +
mov ecx [eax+10h] +
mov ebx [eax-0Ch] +
add edx ecx +
mov ecx [eax+14h] +
adc [ebp+var_18] ecx +
mov ecx [eax-10h] +
add ecx [eax-8] +
adc ebx [eax-4] +
add ecx [eax] +
adc ebx [eax+4] +
add esi ecx +
mov ecx [eax+8] +
adc edi ebx +
add [ebp+var_14] ecx +
mov ecx [eax+0Ch] +
adc [ebp+var_10] ecx +
add eax 30h +
dec [ebp+var_C]  +
jnz loc_100F198  +
push 0  +
push dword_101E0E8  +
mov eax esi +
add eax edx +
mov ecx edi +
adc ecx [ebp+var_18] +
push ecx  +
push eax  +
call sub_1002233  +
push [ebp+var_10]  +
mov ecx eax +
push [ebp+var_14]  +
mov eax [ebp+arg_0] +
shrd ecx edx +
shr edx 14h +
push 0  +
mov [eax] ecx +
mov [eax+4] edx +
push dword_101E0E8  +
call sub_1002233  +
mov ecx eax +
mov eax [ebp+arg_4] +
shrd ecx edx +
shr edx 14h +
add esi [ebp+var_14] +
push 0  +
adc edi [ebp+var_10] +
mov [eax] ecx +
mov [eax+4] edx +
push dword_101E0E8  +
push edi  +
push esi  +
call sub_1002233  +
mov ecx eax +
mov eax [ebp+arg_8] +
shrd ecx edx +
shr edx 14h +
mov [eax] ecx +
mov [eax+4] edx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea edx [ecx+6Ch] +
mov ecx [edx] +
xor eax eax +
cmp ecx edx +
jz loc_100F275  +
push esi  +
mov esi [ecx+18h] +
cmp esi [ebp+arg_0] +
jnz loc_100F26E  +
cmp dword ptr [ecx+0Ch] 0FFFFFFFFh +
jz loc_100F26E  +
inc eax  +
mov ecx [ecx] +
cmp ecx edx +
jnz loc_100F25F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 6Ch +
mov eax [ecx] +
jmp loc_100F29C  +
mov edx [eax+0Ch] +
cmp edx [ebp+arg_4] +
jnz loc_100F29A  +
mov edx [eax+10h] +
cmp edx [ebp+arg_0] +
jz loc_100F2A7  +
mov eax [eax] +
cmp eax ecx +
jnz loc_100F28A  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100F2A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 6Ch +
mov eax [ecx] +
jmp loc_100F2CB  +
mov edx [eax+8] +
cmp edx [ebp+arg_0] +
jz loc_100F2D6  +
mov eax [eax] +
cmp eax ecx +
jnz loc_100F2C1  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
mov edx [eax] +
push esi  +
mov esi [eax+4] +
mov [esi] edx +
mov [edx+4] esi +
mov edx [ecx+4] +
mov [eax] ecx +
mov [eax+4] edx +
mov [edx] eax +
mov [ecx+4] eax +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop esi  +
jmp loc_100F2D2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 6Ch +
mov eax [ecx] +
jmp loc_100F313  +
mov edx [eax+14h] +
cmp edx [ebp+arg_0] +
jz loc_100F31E  +
mov eax [eax] +
cmp eax ecx +
jnz loc_100F309  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_100F31A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 6Ch +
mov eax [ecx] +
jmp loc_100F34A  +
mov edx [eax+18h] +
cmp edx [ebp+arg_0] +
jnz loc_100F348  +
mov edx [eax+0Ch] +
cmp edx [ebp+arg_4] +
jz loc_100F355  +
mov eax [eax] +
cmp eax ecx +
jnz loc_100F338  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100F351  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jnz loc_100F378  +
mov eax 80004005h +
jmp loc_100F393  +
mov edx [ecx] +
mov ecx [edx+4] +
add ecx edx +
mov edx [ecx+4] +
push esi  +
mov esi [ebp+arg_8] +
add edx ecx +
mov [esi] edx +
mov ecx [ecx+8] +
mov edx [ebp+arg_4] +
mov [edx] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push 0  +
push 2Ch  +
lea eax [ebp+var_2C] +
push eax  +
push 0  +
call ds:NtQuerySystemInformation  +
push eax  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_100F3CA  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jl loc_100F40D  +
mov eax [ebp+var_24] +
and dword ptr dbl_101E118+4 0 +
mov dword_101E0E8 eax +
shr eax 0Ah +
imul eax [ebp+var_20] +
push 7D0h  +
push 8  +
mov dword ptr dbl_101E118 eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov lpMem eax +
test eax eax +
jnz loc_100F40D  +
mov esi 8007000Eh +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 0  +
push 2  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_1001AAD  +
push 0FFFFFFFFh  +
push 0FFFFFFFEh  +
push dword ptr [esi+0Ch]  +
mov edi eax +
push dword ptr [esi+8]  +
mov ebx edx +
call sub_1001AAD  +
mov esi [ebp+arg_4] +
push 0  +
push 2  +
push dword ptr [esi+14h]  +
sub eax edi +
push dword ptr [esi+10h]  +
mov ecx edx +
sbb ecx ebx +
mov edi eax +
mov ebx ecx +
call sub_1001AAD  +
push 0  +
push 2  +
push dword ptr [esi+0Ch]  +
add edi eax +
push dword ptr [esi+8]  +
adc ebx edx +
call sub_1001AAD  +
add edi eax +
mov eax edi +
pop edi  +
adc ebx edx +
pop esi  +
mov edx ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 148h +
push edi  +
push 0  +
push 148h  +
lea eax [ebp+var_148] +
push eax  +
push 2  +
call ds:NtQuerySystemInformation  +
push eax  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_100F4BE  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_100F565  +
mov eax dword_101E0E8 +
shr eax 0Ah +
mov ecx eax +
imul ecx [ebp+var_118] +
and dword_101FDDC 0 +
and dword_101FDD4 0 +
mov edx dword ptr dbl_101E118 +
mov dword_101FDD8 ecx +
mov ecx eax +
imul eax [ebp+var_11C] +
imul ecx [ebp+var_114] +
mov dword_101FDD0 ecx +
xor ecx ecx +
sub edx eax +
mov eax dword ptr dbl_101E118+4 +
sbb eax ecx +
mov dword ptr dbl_101E110+4 eax +
mov eax lpMem +
push 7CFh  +
push eax  +
inc eax  +
push eax  +
mov dword ptr dbl_101E110 edx +
call ds:memmove  +
add esp 0Ch +
push 0  +
push 64h  +
push dword ptr dbl_101E110+4  +
push dword ptr dbl_101E110  +
call sub_1002233  +
push dword ptr dbl_101E118+4  +
push dword ptr dbl_101E118  +
push edx  +
push eax  +
call sub_1001AAD  +
mov ecx lpMem +
mov [ecx] al +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push 30h  +
lea eax [ebp+var_34] +
push eax  +
push 3  +
call ds:NtQuerySystemInformation  +
push eax  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_100F5A3  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jl loc_100F5C8  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_34] +
mov ecx [ebp+var_28] +
sbb ecx [ebp+var_30] +
push 0  +
push 989680h  +
push ecx  +
push eax  +
call __aulldiv  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
test esi esi +
setnl al  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_8] 4 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_101E140 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor ecx ecx +
xor ebx ebx +
cmp eax 3 +
mov [ebp+var_4] ecx +
jl loc_100F639  +
add eax 0FFFFFFFDh +
push 3  +
mov [ebp+var_4] eax +
pop eax  +
sub eax ecx +
jz loc_100F6C6  +
dec eax  +
jz loc_100F6A3  +
dec eax  +
jz loc_100F685  +
dec eax  +
jz loc_100F654  +
mov ebx 8000FFFFh +
jmp loc_100F718  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100F24E  +
mov esi [ebp+arg_4] +
mov [esi] eax +
mov [ebp+arg_4] 9D0Ch +
cmp [ebp+arg_10] ebx +
jz loc_100F6F4  +
push [ebp+arg_10]  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100F32C  +
jmp loc_100F6E9  +
mov esi [ebp+arg_4] +
mov eax [edi+78h] +
mov [esi] eax +
mov [ebp+arg_4] 9D0Bh +
cmp [ebp+arg_10] ecx +
jz loc_100F6F4  +
push [ebp+arg_10]  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
jmp loc_100F67C  +
mov esi [ebp+arg_4] +
mov eax [edi+74h] +
mov [esi] eax +
mov [ebp+arg_4] 9D0Ah +
cmp [ebp+arg_10] ecx +
jz loc_100F6F4  +
push [ebp+arg_10]  +
mov ecx edi +
push [ebp+arg_0]  +
call sub_100F2FD  +
jmp loc_100F6E9  +
mov esi [ebp+arg_4] +
mov dword ptr [esi] 1 +
mov [ebp+arg_4] 9D09h +
cmp [ebp+arg_10] ecx +
jz loc_100F700  +
push [ebp+arg_10]  +
mov ecx edi +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_100F27E  +
mov ebx eax +
test ebx ebx +
jl loc_100F718  +
cmp ebx 1 +
jz loc_100F718  +
xor ecx ecx +
cmp [esi] ecx +
jnz loc_100F700  +
mov dword ptr [esi] 1 +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_100F70C  +
mov edx [ebp+var_4] +
mov [eax] edx +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_100F718  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 5Ch  +
lea eax [ebp+var_74] +
push ebx  +
push eax  +
mov esi ecx +
mov [ebp+var_8] 1 +
mov [ebp+var_78] ebx +
call memset  +
xor eax eax +
mov [ebp+var_18] ebx +
lea edi [ebp+var_14] +
stos   +
stos   +
add esp 0Ch +
stos   +
cmp [esi+84h] ebx +
jz loc_100F951  +
cmp [esi+88h] ebx +
jnz loc_100F951  +
push ebx  +
push ebx  +
mov ebx 0C4E0h +
push ebx  +
push 3  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
mov edi 104h +
push edi  +
push offset Buffer  +
mov dword ptr [esi+88h] 1 +
mov esi ds:LoadStringW +
push 0C4E1h  +
push hInstance  +
call esi  +
test eax eax +
jg loc_100F7DA  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100F7CA  +
jle loc_100F7CF  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F7CF  +
mov eax 80004005h +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100F954  +
push edi  +
push offset word_10201F0  +
push ebx  +
push hInstance  +
call esi  +
test eax eax +
jg loc_100F815  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100F805  +
jle loc_100F80A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F80A  +
mov eax 80004005h +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100F954  +
push edi  +
mov ebx offset word_101FFE8 +
push ebx  +
push 0C4E3h  +
push hInstance  +
call esi  +
test eax eax +
jg loc_100F855  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100F845  +
jle loc_100F84A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F84A  +
mov eax 80004005h +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100F954  +
push edi  +
mov edi offset word_101FDE0 +
push edi  +
push 0C4E2h  +
push hInstance  +
call esi  +
test eax eax +
jg loc_100F895  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_100F885  +
jle loc_100F88A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F88A  +
mov eax 80004005h +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100F954  +
mov ecx hWnd +
push 2  +
pop eax  +
mov [ebp+var_74] ecx +
mov ecx hInstance +
mov [ebp+var_10] eax +
mov [ebp+var_54] eax +
mov [ebp+var_70] ecx +
xor ecx ecx +
push ecx  +
lea eax [ebp+var_18] +
mov [ebp+var_50] eax +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
xor esi esi +
lea eax [ebp+var_78] +
inc esi  +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_14] edi +
mov [ebp+var_C] ebx +
mov [ebp+var_78] 60h +
mov [ebp+var_68] ecx +
mov [ebp+var_60] 0FFFFh +
mov [ebp+var_4C] esi +
mov [ebp+var_5C] offset word_10201F0 +
mov [ebp+var_64] offset Buffer +
call ds:COMCTL32_345  +
xor edi edi +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_100F954  +
push eax  +
push edi  +
cmp [ebp+var_8] esi +
jnz loc_100F92D  +
push 0C4E2h  +
push 3  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
push edi  +
push hWnd  +
call sub_10142BF  +
cmp eax edi +
mov [ebp+var_4] eax +
jge loc_100F93F  +
jmp loc_100F954  +
push 0C4E3h  +
push 3  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
push edi  +
push edi  +
push 10h  +
push hWnd  +
call ds:PostMessageW  +
jmp loc_100F954  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
inc dword ptr [esi+7Ch]  +
cmp dword ptr [esi+7Ch] 7D0h +
jb loc_100F97C  +
mov [esi+7Ch] ebx +
mov eax [esi+64h] +
cmp eax ebx +
jnz loc_100F98D  +
mov eax 80004005h +
jmp loc_100FA31  +
mov ecx [esi+68h] +
mov [esi+64h] ecx +
mov [esi+68h] eax +
mov eax [esi+64h] +
add eax 8 +
mov ecx ds:7FFE0018h +
mov [eax+4] ecx +
mov ecx ds:7FFE0014h +
mov [eax] ecx +
mov ecx ds:7FFE001Ch +
cmp [eax+4] ecx +
jnz loc_100F99C  +
mov eax [esi+64h] +
lea ecx [ebp+dwBytes] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [esi+60h]  +
call PcwCollectData  +
push eax  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_100F9E1  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [esi+64h] +
add ecx 10h +
mov edx ds:7FFE0018h +
mov [ecx+4] edx +
mov edx ds:7FFE0014h +
mov [ecx] edx +
mov edx ds:7FFE001Ch +
cmp [ecx+4] edx +
jnz loc_100F9E7  +
cmp eax 800700EAh +
jnz loc_100FA31  +
push [ebp+dwBytes]  +
push dword ptr [esi+64h]  +
call sub_100EE12  +
test eax eax +
jl loc_100FA31  +
mov eax [esi+64h] +
mov ecx [ebp+dwBytes] +
inc ebx  +
mov [eax+4] ecx +
mov eax 800700EAh +
cmp ebx 0Ah +
jb loc_100F996  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
push ebx  +
mov ebx ecx +
mov [ebp+var_10] ebx +
call sub_100F961  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100FCAA  +
push edi  +
mov edi [ebx+64h] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
mov ecx ebx +
call sub_100F363  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100FCA9  +
push esi  +
mov esi [ebx+68h] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
mov ecx ebx +
call sub_100F363  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100FCA8  +
push edi  +
push esi  +
mov ecx ebx +
call sub_100F417  +
mov [ebp+var_24] eax +
mov eax [ebp+var_14] +
mov [ebp+var_20] edx +
test eax eax +
jbe loc_100FCA8  +
fld  ds:dbl_100D5D8 +
mov [ebp+var_14] eax +
fld  ds:dbl_100D5D0 +
mov edi [ebp+var_8] +
lea eax [ebp+var_18] +
push eax  +
push dword ptr [edi+4]  +
mov ecx ebx +
call sub_100F2B5  +
mov [ebp+var_4] eax +
xor eax eax +
inc eax  +
cmp [ebp+var_4] eax +
jnz loc_100FAE6  +
mov [ebx+84h] eax +
jmp loc_100FC9B  +
mov esi [edi+8] +
mov eax [ebp+var_C] +
add esi edi +
mov edi [eax+8] +
mov edx [esi+0Ch] +
add edi eax +
mov eax [edi+0Ch] +
mov ecx [edi+8] +
mov [ebp+var_68] eax +
mov eax [esi+8] +
mov [ebp+var_54] eax +
mov [ebp+var_50] edx +
cmp edx [ebp+var_68] +
jb loc_100FB1A  +
ja loc_100FB13  +
cmp eax ecx +
jb loc_100FB1A  +
sub eax ecx +
sbb edx [edi+0Ch] +
jmp loc_100FB30  +
mov eax [ebx+80h] +
or edx 0FFFFFFFFh +
mul  edx +
sub eax ecx +
sbb edx [edi+0Ch] +
add eax [ebp+var_54] +
adc edx [ebp+var_50] +
mov ecx [ebp+var_20] +
mov [ebp+var_2C] eax +
mov [ebp+var_28] edx +
cmp edx ecx +
jb loc_100FB4D  +
ja loc_100FB44  +
cmp eax [ebp+var_24] +
jbe loc_100FB4D  +
mov eax [ebp+var_24] +
mov [ebp+var_2C] eax +
mov [ebp+var_28] ecx +
mov eax [ebp+var_24] +
mov edx [ebp+var_2C] +
and dword ptr [ebp+var_34] 0 +
and dword ptr [ebp+var_44] 0 +
mov dword ptr [ebp+var_5C] eax +
mov eax ecx +
mov dword ptr [ebp+var_34+4] eax +
mov ecx 7FFFFFFFh +
and eax ecx +
mov dword ptr [ebp+var_5C+4] eax +
fild  [ebp+var_5C] +
mov eax 80000000h +
and dword ptr [ebp+var_34+4] eax +
fild  [ebp+var_34] +
mov dword ptr [ebp+var_3C] edx +
mov edx [ebp+var_28] +
mov dword ptr [ebp+var_3C+4] edx +
and dword ptr [ebp+var_3C+4] ecx +
fchs   +
faddp st(1) st +
mov dword ptr [ebp+var_44+4] edx +
and dword ptr [ebp+var_44+4] eax +
fild  [ebp+var_3C] +
fild  [ebp+var_44] +
fchs   +
faddp st(1) st +
fdiv st st(1) +
fld1   +
fsubrp st(1) st +
fmul st st(3) +
call _ftol2  +
mov ecx [ebx+7Ch] +
mov ebx [ebp+var_18] +
mov [ecx+ebx+1Ch] al +
cmp dword ptr [ebx+0Ch] 0FFFFFFFFh +
jnz loc_100FBD5  +
cmp dword ptr [ebx+10h] 0FFFFFFFFh +
jnz loc_100FBD5  +
movzx eax al +
mov [ebp+var_1C] eax +
fild  [ebp+var_1C] +
fdiv st st(3) +
fmul st st(2) +
call _ftol2  +
mov byte_101E080 al +
mov eax [edi] +
mov ecx [eax+edi+8] +
mov eax [eax+edi+0Ch] +
mov edx [esi] +
mov edi [edx+esi+8] +
mov esi [edx+esi+0Ch] +
mov [ebp+var_70] eax +
cmp esi eax +
jb loc_100FC00  +
ja loc_100FBF6  +
cmp edi ecx +
jb loc_100FC00  +
sub edi ecx +
sbb esi eax +
mov eax edi +
mov edx esi +
jmp loc_100FC17  +
mov eax [ebp+var_10] +
mov eax [eax+80h] +
or edx 0FFFFFFFFh +
mul  edx +
sub eax ecx +
sbb edx [ebp+var_70] +
add eax edi +
adc edx esi +
mov ecx edx +
cmp edx [ebp+var_20] +
jb loc_100FC2B  +
ja loc_100FC25  +
cmp eax [ebp+var_24] +
jbe loc_100FC2B  +
mov eax [ebp+var_24] +
mov ecx [ebp+var_20] +
and dword ptr [ebp+var_4C] 0 +
mov dword ptr [ebp+var_4C+4] ecx +
and dword ptr [ebp+var_4C+4] 80000000h +
and ecx 7FFFFFFFh +
mov dword ptr [ebp+var_64] eax +
mov dword ptr [ebp+var_64+4] ecx +
fild  [ebp+var_64] +
fild  [ebp+var_4C] +
fchs   +
faddp st(1) st +
fdivrp st(1) st +
fmul st st(2) +
call _ftol2  +
mov ecx [ebp+var_10] +
mov ecx [ecx+7Ch] +
mov [ecx+ebx+7ECh] al +
cmp dword ptr [ebx+0Ch] 0FFFFFFFFh +
jnz loc_100FC88  +
cmp dword ptr [ebx+10h] 0FFFFFFFFh +
jnz loc_100FC88  +
movzx eax al +
mov [ebp+var_1C] eax +
fild  [ebp+var_1C] +
fdiv st st(2) +
fmul st st(1) +
call _ftol2  +
mov byte_101E108 al +
mov eax [ebp+var_8] +
add eax [eax] +
mov ebx [ebp+var_10] +
mov [ebp+var_8] eax +
mov eax [ebp+var_C] +
add eax [eax] +
mov [ebp+var_C] eax +
dec [ebp+var_14]  +
jnz loc_100FABF  +
fstp  st(1) +
fstp  st +
pop esi  +
pop edi  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
mov esi ds:GetWindowLongW +
push edi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call esi  +
push dword ptr [ebp+14h]  +
mov ebx [ebp+10h] +
mov edi [ebp+0Ch] +
push ebx  +
push edi  +
mov [ebp-4] eax +
call sub_1001A01  +
cmp eax 1 +
jnz loc_100FCED  +
xor eax eax +
inc eax  +
jmp loc_100FFBB  +
mov eax 135h +
cmp edi eax +
ja loc_100FF07  +
jz loc_100FEBF  +
mov eax edi +
sub eax 5 +
jz loc_100FEB2  +
sub eax 26h +
jz loc_100FE42  +
sub eax 78h +
jz loc_100FF38  +
sub eax 6Dh +
jz loc_100FD9B  +
dec eax  +
jnz loc_100FE3B  +
mov esi 0DB2h +
mov eax esi +
cmp bx ax +
jnz loc_100FE3B  +
push 38h  +
xor edi edi +
lea eax [ebp-40h] +
push edi  +
push eax  +
call memset  +
mov eax hWnd +
mov [ebp-3Ch] eax +
add esp 0Ch +
lea eax [ebp-44h] +
push eax  +
mov dword ptr [ebp-44h] 3Ch +
mov dword ptr [ebp-40h] 600h +
mov dword ptr [ebp-38h] offset aRunas +
mov dword ptr [ebp-34h] offset aSystemrootSyst +
mov dword ptr [ebp-30h] offset aRes +
mov dword ptr [ebp-28h] 1 +
call ds:ShellExecuteExW  +
push edi  +
push edi  +
push esi  +
push 3  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
jmp loc_100FE3B  +
push dword ptr [ebp+14h]  +
mov edi ds:SetWindowLongW +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call edi  +
push 0FFFFFFF0h  +
push dword ptr [ebp+8]  +
call esi  +
or eax 2000000h +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [ebp+8]  +
call edi  +
lea eax [ebp-8] +
push eax  +
push 2  +
push 0  +
call sub_101B9BD  +
cmp dword ptr [ebp-8] 0 +
mov ebx ds:GetDlgItem +
jz loc_100FDF2  +
push 1  +
push 0  +
push 160Ch  +
push 0DB2h  +
push dword ptr [ebp+8]  +
call ebx  +
push eax  +
call ds:SendMessageW  +
push 0FFFFFFECh  +
push dword ptr [ebp+8]  +
call esi  +
test eax 400000h +
jz loc_100FE3B  +
push 3ECh  +
push dword ptr [ebp+8]  +
call ebx  +
push 0FFFFFFECh  +
push eax  +
mov [ebp+14h] eax +
call esi  +
and eax 0FFAFFFFFh +
push eax  +
push 0FFFFFFECh  +
push dword ptr [ebp+14h]  +
call edi  +
push 3EDh  +
push dword ptr [ebp+8]  +
call ebx  +
mov ebx eax +
push 0FFFFFFECh  +
push ebx  +
call esi  +
and eax 0FFAFFFFFh +
push eax  +
push 0FFFFFFECh  +
push ebx  +
call edi  +
xor eax eax +
jmp loc_100FFBB  +
mov eax [ebp-4] +
mov ecx 1388h +
cmp ebx ecx +
jb loc_100FE6D  +
mov edx [eax+74h] +
add edx ecx +
cmp ebx edx +
ja loc_100FE6D  +
add ebx 0FFFFEC78h +
push ebx  +
push dword ptr [ebp+14h]  +
mov ecx eax +
call sub_1004068  +
jmp loc_100FCE5  +
***
cmp ebx 3ECh +
jnz loc_100FE84  +
push dword ptr [ebp+14h]  +
mov ecx eax +
call sub_1004118  +
jmp loc_100FCE5  +
***
cmp ebx 3EDh +
jnz loc_100FE9B  +
push dword ptr [ebp+14h]  +
mov ecx eax +
call sub_10043DD  +
jmp loc_100FCE5  +
***
cmp ebx 3EEh +
jnz loc_100FE3B  +
push dword ptr [ebp+14h]  +
mov ecx eax +
call sub_1003EDF  +
jmp loc_100FCE5  +
***
mov ecx [ebp-4] +
call sub_1004C5A  +
jmp loc_100FE3B  +
***
push dword ptr [ebp+14h]  +
call ds:GetDlgCtrlID  +
xor ecx ecx +
cmp eax ds:dword_100FFC4[ecx] +
jz loc_100FEFA  +
add ecx 4 +
cmp ecx 0Ch +
jb loc_100FECA  +
mov ecx 1388h +
cmp eax ecx +
jb loc_100FEEF  +
mov edx [ebp-4] +
mov edx [edx+74h] +
add edx ecx +
cmp eax edx +
jbe loc_100FEFA  +
call ds:IsThemeActive  +
jmp loc_100FFAA  +
push 4  +
call ds:GetStockObject  +
jmp loc_100FFBB  +
cmp edi 136h +
jz loc_100FF70  +
cmp edi 138h +
jz loc_100FF70  +
cmp edi 200h +
jbe loc_100FE3B  +
mov eax 202h +
cmp edi eax +
jbe loc_100FF3F  +
cmp edi 203h +
jnz loc_100FE3B  +
push dword ptr [ebp+14h]  +
push ebx  +
push edi  +
jmp loc_100FF5F  +
test byte ptr dword_101E458 10h +
jz loc_100FE3B  +
push dword ptr [ebp+14h]  +
xor ecx ecx +
cmp edi eax +
setz cl  +
push 2  +
add ecx 0A1h +
push ecx  +
push hWnd  +
call ds:SendMessageW  +
jmp loc_100FE3B  +
***
push 1  +
push ebx  +
call ds:SetBkMode  +
mov esi ds:IsThemeActive +
call esi  +
mov edi ds:GetSysColor +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call edi  +
push eax  +
push ebx  +
call ds:SetBkColor  +
push 8  +
call edi  +
push eax  +
push ebx  +
call ds:SetTextColor  +
call esi  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov ebx ecx +
push 0  +
lea esi [ebx+60h] +
push esi  +
call PcwCreateQuery  +
push eax  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_1010057  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_1010269  +
push edi  +
mov edi ds:RtlInitUnicodeString +
push offset aProcessorInfor  +
lea eax [ebp+var_30] +
push eax  +
call edi  +
push offset asc_101027C  +
lea eax [ebp+var_28] +
push eax  +
call edi  +
xor edi edi +
push edi  +
push edi  +
push 5  +
push 0FFFFFFFFh  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push 1  +
push dword ptr [esi]  +
lea eax [ebp+var_18] +
push eax  +
call PcwAddQueryItem  +
push eax  +
call ds:RtlNtStatusToDosError  +
cmp eax edi +
jle loc_10100AE  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
jl loc_1010268  +
mov esi ds:GetProcessHeap +
push 18h  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov edx eax +
mov [ebx+64h] edx +
cmp edx edi +
jz loc_101020E  +
push 6  +
pop ecx  +
xor eax eax +
push 18h  +
mov edi edx +
push eax  +
stos   +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
xor esi esi +
mov [ebx+68h] edi +
cmp edi esi +
jz loc_101020E  +
push 6  +
pop ecx  +
xor eax eax +
stos   +
mov ecx ebx +
call sub_100F961  +
cmp eax esi +
jl loc_1010268  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push dword ptr [ebx+64h]  +
mov ecx ebx +
mov [ebx+7Ch] esi +
call sub_100F363  +
cmp eax esi +
jl loc_1010268  +
mov [ebp+var_10] esi +
cmp [ebp+var_14] esi +
jbe loc_10101DB  +
mov edi [ebp+var_C] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [edi+10h] +
push offset aUU  +
push eax  +
call swscanf_s  +
add esp 10h +
sub eax 0 +
jz loc_101016B  +
dec eax  +
jz loc_1010162  +
dec eax  +
jnz loc_1010173  +
inc dword ptr [ebx+74h]  +
jmp loc_1010173  +
or [ebp+var_8] 0FFFFFFFFh +
inc dword ptr [ebx+78h]  +
jmp loc_1010173  +
or [ebp+var_4] 0FFFFFFFFh +
or [ebp+var_8] 0FFFFFFFFh +
push 0FBCh  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+var_C] esi +
test esi esi +
jz loc_101020E  +
push 0FBCh  +
push 0  +
push esi  +
call memset  +
lea eax [ebx+6Ch] +
mov ecx [eax+4] +
mov [esi] eax +
mov [esi+4] ecx +
mov [ecx] esi +
mov [eax+4] esi +
mov eax [edi+4] +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+10h] eax +
mov eax [ebp+var_8] +
mov [esi+0Ch] eax +
or dword ptr [esi+14h] 0FFFFFFFFh +
or dword ptr [esi+18h] 0FFFFFFFFh +
add edi [edi] +
add esp 0Ch +
inc [ebp+var_10]  +
mov eax [ebp+var_10] +
cmp eax [ebp+var_14] +
jb loc_1010139  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] edi +
cmp [ebx+74h] edi +
jbe loc_1010241  +
lea eax [ebp+var_C] +
push eax  +
push 0FFFFFFFFh  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100F27E  +
cmp eax 1 +
jz loc_1010239  +
mov eax [ebp+var_C] +
mov [eax+18h] edi +
and [ebp+var_8] 0 +
lea eax [ebp+var_C] +
push eax  +
push 0  +
jmp loc_1010229  +
mov eax 8007000Eh +
jmp loc_1010268  +
mov eax [ebp+var_C] +
mov [eax+18h] edi +
mov [eax+14h] esi +
lea eax [ebp+var_C] +
inc esi  +
inc [ebp+var_8]  +
push eax  +
push [ebp+var_8]  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100F27E  +
cmp eax 1 +
jnz loc_1010215  +
inc edi  +
inc [ebp+var_4]  +
cmp esi [ebx+74h] +
jb loc_10101E7  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
sub ebx 0FFFFFF80h +
push ebx  +
call ds:NtQueryTimerResolution  +
push eax  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_1010268  +
and eax 0FFFFh +
or eax 80070000h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1001688 +
lea eax [esi+6Ch] +
mov [eax+4] eax +
mov [eax] eax +
xor eax eax +
push 9  +
pop ecx  +
lea edi [esi+2Ch] +
stos   +
mov ecx esi +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+60h] eax +
mov [esi+74h] eax +
mov [esi+78h] eax +
mov [esi+64h] eax +
mov [esi+7Ch] eax +
mov [esi+84h] eax +
mov [esi+88h] eax +
call sub_1010029  +
mov ecx esi +
call sub_100F39C  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_101031C  +
mov eax 80070057h +
jmp loc_101033F  +
mov eax [esi] +
push [ebp+dwBytes]  +
test eax eax +
jnz loc_1010344  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_101035A  +
mov eax 8007000Eh +
pop esi  +
pop ebp  +
retn 8  +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
test eax eax +
jz loc_101033A  +
mov [esi] eax +
xor eax eax +
jmp loc_101033F  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax] ecx +
mov [eax+8] cl +
mov [eax+0Ch] ecx +
mov [eax+14h] ecx +
mov [eax+10h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] ecx +
test esi esi +
jz loc_1010594  +
mov eax [esi+5280h] +
mov edx [esi+5284h] +
or eax edx +
jz loc_1010594  +
push ebx  +
mov bl [ecx+8] +
mov cl bl +
movzx eax cl +
imul eax eax +
add eax esi +
xor edx edx +
test cl cl +
setz dl  +
push edi  +
mov edi [eax+0A4Ch] +
push 0  +
push 1F40h  +
imul edx edx +
mov ecx edx +
mov edx [eax+0A48h] +
sub edx [ecx+esi+0A00h] +
sbb edi [ecx+esi+0A04h] +
xor ecx ecx +
test bl bl +
setz cl  +
imul ecx ecx +
sub edx [ecx+esi+0A48h] +
sbb edi [ecx+esi+0A4Ch] +
add edx [eax+0A00h] +
adc edi [eax+0A04h] +
push edi  +
push edx  +
call sub_1002233  +
push dword ptr [esi+5284h]  +
push dword ptr [esi+5280h]  +
push edx  +
push eax  +
call __aulldiv  +
mov edi [esi+4E5Ch] +
mov [ebp+var_8] edx +
mov edx [esi+4E58h] +
mov [ebp+var_C] eax +
cmp [ebp+var_8] edi +
jb loc_1010451  +
ja loc_1010449  +
cmp eax edx +
jbe loc_1010451  +
mov [ebp+var_14] eax +
mov eax [ebp+var_8] +
jmp loc_1010456  +
mov [ebp+var_14] edx +
mov eax edi +
movzx ecx bl +
imul ecx ecx +
lea ecx [ecx+esi+9F0h] +
cmp eax [ecx+4] +
jb loc_101048C  +
ja loc_1010474  +
mov eax [ecx] +
cmp [ebp+var_14] eax +
jbe loc_101048C  +
mov eax [ebp+var_8] +
cmp eax edi +
jb loc_1010487  +
ja loc_1010482  +
cmp [ebp+var_C] edx +
jbe loc_1010487  +
mov edx [ebp+var_C] +
jmp loc_1010491  +
mov [ebp+var_10] edi +
jmp loc_1010494  +
mov edx [ecx] +
mov eax [ecx+4] +
mov [ebp+var_10] eax +
mov [ecx] edx +
and dword ptr [ecx+4] 0 +
mov ecx [esi+4E58h] +
mov edi [esi+4E5Ch] +
mov eax ecx +
or eax edi +
jnz loc_10104B8  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+8] +
jmp loc_1010578  +
mov edx [ebp+var_4] +
movzx eax byte ptr [edx+8] +
imul eax eax +
cmp ecx [eax+esi+9F0h] +
jnz loc_10104DB  +
cmp edi [eax+esi+9F4h] +
jz loc_1010592  +
lea ebx [esi+2F18h] +
mov [ebp+arg_0] 7D0h +
mov eax [ebx] +
cmp eax 0FFFFFFFFh +
jz loc_1010568  +
push dword ptr [esi+4E5Ch]  +
movzx edi byte ptr [edx+8] +
push dword ptr [esi+4E58h]  +
imul edi edi +
push 0  +
push eax  +
call sub_1002233  +
push dword ptr [edi+esi+9F4h]  +
push dword ptr [edi+esi+9F0h]  +
push edx  +
push eax  +
call __aulldiv  +
mov [ebx] eax +
push dword ptr [esi+4E5Ch]  +
mov eax [ebp+var_4] +
push dword ptr [esi+4E58h]  +
movzx edi byte ptr [eax+8] +
push 0  +
imul edi edi +
push dword ptr [ebx-1F40h]  +
call sub_1002233  +
push dword ptr [edi+esi+9F4h]  +
push dword ptr [edi+esi+9F0h]  +
push edx  +
push eax  +
call __aulldiv  +
mov edx [ebp+var_4] +
mov [ebx-1F40h] eax +
add ebx 4 +
dec [ebp+arg_0]  +
jnz loc_10104E8  +
movzx eax byte ptr [edx+8] +
imul eax eax +
mov eax [eax+esi+9F0h] +
and dword ptr [esi+4E5Ch] 0 +
mov [esi+4E58h] eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0CCh +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
push 0Ah  +
push 64h  +
lea eax [ebp+Value] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call _ui64tow_s  +
add esp 14h +
push [ebp+cchNumber]  +
lea eax [ebp+Value] +
push ebx  +
push 0  +
push eax  +
push 0  +
mov edi 400h +
push edi  +
call ds:GetNumberFormatW  +
xor eax eax +
mov esi offset word_101E4CC +
cmp ax word_101E4CC +
jnz loc_1010609  +
push 4  +
push esi  +
push 0Eh  +
push edi  +
call ds:GetLocaleInfoW  +
push esi  +
push ebx  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jz loc_101061F  +
xor ecx ecx +
mov [eax] cx +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001679  +
leave   +
retn 10h  +
***
mov eax ecx +
xor edx edx +
cmp [eax+4] edx +
jbe loc_101068D  +
push ebx  +
push esi  +
push edi  +
movzx esi byte ptr [eax+8] +
mov ecx [eax] +
mov edi [ecx+edx*4] +
inc esi  +
imul esi esi +
add esi edi +
mov ecx 152h +
movs   +
mov cl [eax+8] +
mov esi [eax] +
mov edi [esi+edx*4] +
movzx esi cl +
inc esi  +
imul esi esi +
xor ebx ebx +
add esi edi +
test cl cl +
setz bl  +
mov ecx 152h +
inc ebx  +
imul ebx ebx +
add ebx edi +
mov edi ebx +
inc edx  +
movs   +
cmp edx [eax+4] +
jb loc_101063E  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10106A5  +
xor eax eax +
jmp loc_101070A  +
mov edx [ebp+arg_4] +
sub edx 0 +
jz loc_1010705  +
dec edx  +
jz loc_10106FE  +
sub edx 3 +
jnz loc_10106A1  +
movzx ecx byte ptr [ecx+8] +
imul ecx ecx +
mov eax [ecx+eax+9CCh] +
dec eax  +
jz loc_10106F7  +
dec eax  +
jz loc_10106F0  +
dec eax  +
jz loc_10106E9  +
dec eax  +
jz loc_10106E2  +
dec eax  +
jz loc_10106F0  +
dec eax  +
jz loc_10106F0  +
dec eax  +
jnz loc_10106E2  +
mov eax offset unk_101E890 +
jmp loc_101070A  +
mov eax offset unk_101E590 +
jmp loc_101070A  +
mov eax offset unk_101E710 +
jmp loc_101070A  +
mov eax offset unk_101E790 +
jmp loc_101070A  +
mov eax offset unk_101E690 +
jmp loc_101070A  +
add eax 4E62h +
jmp loc_101070A  +
add eax 5062h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_1010737  +
mov edx [ebp+arg_4] +
mov ecx [ecx] +
imul edx edx +
mov eax [ecx+eax*4] +
lea eax [eax+edx+0FD8h] +
jmp loc_1010739  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_101075C  +
mov ecx [ecx] +
mov eax [ecx+eax*4] +
mov eax [eax+5288h] +
jmp loc_101075E  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_1010782  +
mov ecx [ecx] +
mov eax [ecx+eax*4] +
mov ecx [ebp+arg_4] +
mov [eax+5288h] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10107A3  +
xor eax eax +
xor edx edx +
jmp loc_1010BDD  +
mov al [ecx+8] +
push ebx  +
xor ebx ebx +
test al al +
setz bl  +
mov edx [edi+4E5Ch] +
push esi  +
movzx esi al +
mov eax [edi+5280h] +
inc ebx  +
imul ebx ebx +
add ebx edi +
inc esi  +
imul esi esi +
mov [ebp+var_8] eax +
mov eax [edi+5284h] +
add esi edi +
cmp byte ptr [edi+4E60h] 0 +
mov [ebp+var_4] eax +
mov eax [edi+4E58h] +
jz loc_10107F7  +
mov eax [esi+4A8h] +
mov edx [esi+4ACh] +
mov ecx [ebp+arg_4] +
add ecx 0FFFFFFFEh +
cmp ecx 17h +
ja loc_1010BD7  +
jmp ds:off_1010BE2[ecx*4]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push edx  +
push eax  +
call sub_1002233  +
push 0  +
push 1F40h  +
push edx  +
push eax  +
call __aulldiv  +
mov edi eax +
or eax edx +
mov [ebp+var_4] edx +
jz loc_1010BD7  +
mov eax [ebp+arg_4] +
dec eax  +
dec eax  +
jz loc_1010881  +
sub eax 3 +
jz loc_1010867  +
dec eax  +
jz loc_101084D  +
dec eax  +
jz loc_1010881  +
xor eax eax +
xor ecx ecx +
jmp loc_10108B1  +
mov eax [esi+4B8h] +
sub eax [ebx+4B8h] +
mov ecx [esi+4BCh] +
sbb ecx [ebx+4BCh] +
jmp loc_10108B1  +
mov eax [esi+500h] +
sub eax [ebx+500h] +
mov ecx [esi+504h] +
sbb ecx [ebx+504h] +
jmp loc_10108B1  +
mov eax [esi+500h] +
sub eax [ebx+500h] +
mov ecx [esi+504h] +
sbb ecx [ebx+504h] +
sub eax [ebx+4B8h] +
sbb ecx [ebx+4BCh] +
add eax [esi+4B8h] +
adc ecx [esi+4BCh] +
push 0  +
mov esi 3B9ACA00h +
push esi  +
push ecx  +
push eax  +
call sub_1002233  +
push [ebp+var_4]  +
push edi  +
push edx  +
push eax  +
call __aulldiv  +
test edx edx +
ja loc_10108D7  +
cmp eax esi +
jbe loc_1010BDB  +
mov eax 3B023380h +
jmp loc_1010BD9  +
xor ecx ecx +
cmp [ebp+arg_8] ecx +
jz loc_10108F6  +
mov ecx [edi+500h] +
mov edi [edi+504h] +
jmp loc_10108F8  +
xor edi edi +
mov eax [esi+500h] +
mov edx [esi+504h] +
jmp loc_1010B27  +
xor ecx ecx +
cmp [ebp+arg_8] ecx +
jz loc_101091E  +
mov ecx [edi+4B8h] +
mov edi [edi+4BCh] +
jmp loc_1010920  +
xor edi edi +
mov eax [esi+4B8h] +
mov edx [esi+4BCh] +
jmp loc_1010B27  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jz loc_1010952  +
mov ecx [edi+500h] +
add ecx [edi+4B8h] +
mov ebx [edi+504h] +
adc ebx [edi+4BCh] +
jmp loc_1010954  +
xor ecx ecx +
mov eax [esi+500h] +
add eax [esi+4B8h] +
mov edx [esi+504h] +
adc edx [esi+4BCh] +
jmp loc_1010B6B  +
mov eax [esi+500h] +
sub eax [ebx+500h] +
mov edx [esi+504h] +
sbb edx [ebx+504h] +
jmp loc_1010BDB  +
mov eax [esi+4B8h] +
sub eax [ebx+4B8h] +
mov edx [esi+4BCh] +
sbb edx [ebx+4BCh] +
jmp loc_1010BDB  +
mov eax [esi+500h] +
sub eax [ebx+500h] +
mov edx [esi+504h] +
sbb edx [ebx+504h] +
sub eax [ebx+4B8h] +
sbb edx [ebx+4BCh] +
add eax [esi+4B8h] +
adc edx [esi+4BCh] +
jmp loc_1010BDB  +
xor ecx ecx +
cmp [ebp+arg_8] ecx +
jz loc_10109F5  +
mov ecx [edi+4C0h] +
mov edi [edi+4C4h] +
jmp loc_10109F7  +
xor edi edi +
mov eax [esi+4C0h] +
mov edx [esi+4C4h] +
jmp loc_1010B27  +
xor ecx ecx +
cmp [ebp+arg_8] ecx +
jz loc_1010A1D  +
mov ecx [edi+508h] +
mov edi [edi+50Ch] +
jmp loc_1010A1F  +
xor edi edi +
mov eax [esi+508h] +
mov edx [esi+50Ch] +
jmp loc_1010B27  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jz loc_1010A51  +
mov ecx [edi+508h] +
add ecx [edi+4C0h] +
mov ebx [edi+50Ch] +
adc ebx [edi+4C4h] +
jmp loc_1010A53  +
xor ecx ecx +
mov eax [esi+508h] +
add eax [esi+4C0h] +
mov edx [esi+50Ch] +
adc edx [esi+4C4h] +
jmp loc_1010B6B  +
mov eax [esi+508h] +
sub eax [ebx+508h] +
mov edx [esi+50Ch] +
sbb edx [ebx+50Ch] +
jmp loc_1010BDB  +
mov eax [esi+4C0h] +
sub eax [ebx+4C0h] +
mov edx [esi+4C4h] +
sbb edx [ebx+4C4h] +
jmp loc_1010BDB  +
mov eax [esi+508h] +
sub eax [ebx+508h] +
mov edx [esi+50Ch] +
sbb edx [ebx+50Ch] +
sub eax [ebx+4C0h] +
sbb edx [ebx+4C4h] +
add eax [esi+4C0h] +
adc edx [esi+4C4h] +
jmp loc_1010BDB  +
xor ecx ecx +
cmp [ebp+arg_8] ecx +
jz loc_1010AF4  +
mov ecx [edi+4C8h] +
mov edi [edi+4CCh] +
jmp loc_1010AF6  +
xor edi edi +
mov eax [esi+4C8h] +
mov edx [esi+4CCh] +
jmp loc_1010B27  +
xor ecx ecx +
cmp [ebp+arg_8] ecx +
jz loc_1010B19  +
mov ecx [edi+510h] +
mov edi [edi+514h] +
jmp loc_1010B1B  +
xor edi edi +
mov eax [esi+510h] +
mov edx [esi+514h] +
sub eax ecx +
sbb edx edi +
jmp loc_1010BDB  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jz loc_1010B51  +
mov ecx [edi+510h] +
add ecx [edi+4C8h] +
mov ebx [edi+514h] +
adc ebx [edi+4CCh] +
jmp loc_1010B53  +
xor ecx ecx +
mov eax [esi+510h] +
add eax [esi+4C8h] +
mov edx [esi+514h] +
adc edx [esi+4CCh] +
sub eax ecx +
sbb edx ebx +
jmp loc_1010BDB  +
mov eax [esi+510h] +
sub eax [ebx+510h] +
mov edx [esi+514h] +
sbb edx [ebx+514h] +
jmp loc_1010BDB  +
mov eax [esi+4C8h] +
sub eax [ebx+4C8h] +
mov edx [esi+4CCh] +
sbb edx [ebx+4CCh] +
jmp loc_1010BDB  +
mov eax [esi+510h] +
sub eax [ebx+510h] +
mov edx [esi+514h] +
sbb edx [ebx+514h] +
sub eax [ebx+4C8h] +
sbb edx [ebx+4CCh] +
add eax [esi+4C8h] +
adc edx [esi+4CCh] +
jmp loc_1010BDB  +
xor eax eax +
xor edx edx +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 0Ch  +
***
mov dword ptr [ecx+4Ch] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
xor esi esi +
cmp edi ebx +
jz loc_1010C95  +
cmp [edi] bx +
jz loc_1010C95  +
mov eax edi +
movzx eax word ptr [eax] +
and [ebp+arg_4] 0 +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
push eax  +
push [ebp+arg_0]  +
call ds:GetCharWidth32W  +
test eax eax +
jz loc_1010C9E  +
add esi [ebp+arg_4] +
inc ebx  +
lea eax [edi+ebx*2] +
cmp word ptr [eax] 0 +
jnz loc_1010C6E  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_1010C97  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor esi esi +
push 0Ah  +
xor eax eax +
cmp dword_101E304 0FFFFFFFFh +
pop ecx  +
lea edi [ebp+var_28] +
mov [ebp+lParam] esi +
stos   +
jz loc_1010D02  +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push 105Fh  +
push dword ptr [ebx+78h]  +
mov [ebp+lParam] 2 +
call ds:SendMessageW  +
test eax eax +
jz loc_1010CF7  +
mov ax [ebp+var_24] +
mov word_101E370[esi*2] ax +
inc esi  +
cmp dword_101E304[esi*4] 0FFFFFFFFh +
jnz loc_1010CCD  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1010CA8  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_1010D26  +
push 0  +
push eax  +
call ds:ShowWindow  +
mov ecx esi +
pop esi  +
jmp sub_1008CCA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+0Ch] +
push edi  +
mov edi [eax+8] +
push 54h  +
add esi ebx +
mov eax esi +
sub eax ebx +
push eax  +
add edi ecx +
mov eax edi +
sub eax ecx +
push eax  +
mov eax [ebp+arg_4] +
push ebx  +
push ecx  +
push 0  +
push dword ptr [eax]  +
mov [ebp+x] ecx +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
cmp dword_101FDC0 0 +
jz loc_1010D8D  +
push 60h  +
push nNumerator  +
push 6  +
call ds:MulDiv  +
cwde   +
jmp loc_1010D90  +
push 6  +
pop eax  +
add [ebp+x] eax +
cmp dword_101FDC0 0 +
jz loc_1010DAF  +
push 60h  +
push nNumerator  +
push 10h  +
call ds:MulDiv  +
cwde   +
jmp loc_1010DB2  +
push 10h  +
pop eax  +
add ebx eax +
cmp dword_101FDC0 0 +
mov [ebp+var_C] ebx +
jz loc_1010DD3  +
push 60h  +
push nNumerator  +
push 6  +
call ds:MulDiv  +
cwde   +
jmp loc_1010DD6  +
push 6  +
pop eax  +
sub edi eax +
cmp dword_101FDC0 0 +
mov [ebp+var_8] edi +
jz loc_1010DF7  +
push 60h  +
push nNumerator  +
push 6  +
call ds:MulDiv  +
cwde   +
jmp loc_1010DFA  +
push 6  +
pop eax  +
sub edi [ebp+x] +
push 54h  +
sub esi eax +
mov eax [ebp+arg_4] +
mov [ebp+var_4] esi +
sub esi ebx +
push esi  +
push edi  +
push ebx  +
push [ebp+x]  +
push 0  +
push dword ptr [eax+4]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_1010E2B  +
lea esi [ebp+x] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi ds:DeferWindowPos +
xor esi esi +
mov ebx 94h +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push dword ptr [eax]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push dword ptr [eax+4]  +
push [ebp+hWinPosInfo]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1010EA8  +
mov eax [ebp+arg_0] +
xor edx edx +
div  [ebp+arg_4] +
mov ecx eax +
cmp ecx 78h +
jnb loc_1010E97  +
push 78h  +
pop ecx  +
cmp [ebp+arg_0] ecx +
jbe loc_1010EA5  +
mov eax [ebp+arg_0] +
xor edx edx +
div  ecx +
jmp loc_1010EA8  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov eax [ecx+6Ch] +
mov edx [ecx+8] +
mov ecx [ecx+70h] +
push esi  +
lea esi [ecx+eax] +
cmp esi edx +
pop esi  +
jbe loc_1010EC7  +
mov eax edx +
sub eax ecx +
cmp eax edx +
jb locret_1010ECD  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
sub eax [ecx] +
mov ecx 7D0h +
mov [ebp+var_C] eax +
dec eax  +
cdq   +
idiv  ecx +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_1010F05  +
mov [ebp+arg_0] 2 +
push [ebp+arg_4]  +
push dword ptr [esi+24h]  +
call ds:SelectObject  +
mov ebx [esi+48h] +
mov [ebp+var_8] eax +
mov eax ebx +
sub eax [esi+40h] +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1010F42  +
mov ecx [ebp+arg_C] +
mov ecx [ecx] +
cmp ecx 0FFFFFFFFh +
jz loc_1010F3B  +
mov eax [eax] +
cmp eax 0FFFFFFFFh +
jz loc_1010F3B  +
add eax ecx +
jmp loc_1010F4C  +
xor eax eax +
jmp loc_10110DC  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax 0FFFFFFFFh +
jz loc_1010F3B  +
mov [ebp+var_18] eax +
xor eax eax +
ja loc_1010F5C  +
cmp [ebp+var_18] 3B9ACA00h +
jbe loc_1010F63  +
mov [ebp+var_18] 3B9ACA00h +
push edi  +
push 0  +
mov edi 989680h +
push edi  +
xor eax eax +
push eax  +
push [ebp+var_18]  +
call __aulldiv  +
test edx edx +
ja loc_1010F7F  +
test eax eax +
jbe loc_1010F82  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push 0  +
push [ebp+arg_8]  +
cdq   +
push edx  +
push eax  +
call sub_1002233  +
xor ecx ecx +
push ecx  +
push [ebp+var_18]  +
mov [ebp+var_20] eax +
push edx  +
push eax  +
mov [ebp+var_1C] edx +
call sub_1002233  +
push 0  +
push 64h  +
push edx  +
push eax  +
call __aulldiv  +
push 0  +
push edi  +
push edx  +
push eax  +
call __aulldiv  +
mov ecx eax +
or ecx edx +
jnz loc_1010FC6  +
xor eax eax +
inc eax  +
and [ebp+var_14] ecx +
push 0  +
sub ebx eax +
push ebx  +
push dword ptr [esi+44h]  +
push dword ptr [esi+24h]  +
call ds:MoveToEx  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_10] +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_C] +
lea ecx [eax+4] +
sub edx eax +
mov [ebp+arg_8] 1 +
mov [ebp+arg_C] ecx +
mov [ebp+var_10] edx +
jmp loc_1010FFA  +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_C] +
jge loc_10110C6  +
cmp [ebp+arg_10] 0 +
jz loc_101102A  +
mov eax [ecx] +
cmp eax 0FFFFFFFFh +
jz loc_10110D8  +
mov edx [ebp+var_10] +
mov ebx [edx+ecx] +
cmp ebx 0FFFFFFFFh +
jz loc_10110D8  +
add ebx eax +
jmp loc_1011037  +
mov ecx [ecx] +
cmp ecx 0FFFFFFFFh +
jz loc_10110D8  +
mov ebx ecx +
xor eax eax +
ja loc_1011043  +
cmp ebx 3B9ACA00h +
jbe loc_1011048  +
mov ebx 3B9ACA00h +
push 0  +
push edi  +
xor eax eax +
push eax  +
push ebx  +
call __aulldiv  +
xor ecx ecx +
cmp edx ecx +
jb loc_1011064  +
ja loc_1011061  +
cmp eax [ebp+var_4] +
jbe loc_1011064  +
mov [ebp+var_4] eax +
xor eax eax +
push eax  +
push ebx  +
push [ebp+var_1C]  +
push [ebp+var_20]  +
call sub_1002233  +
xor ebx ebx +
push ebx  +
push 64h  +
push edx  +
push eax  +
call __aulldiv  +
push ebx  +
push edi  +
push edx  +
push eax  +
call __aulldiv  +
mov ecx eax +
or ecx edx +
jnz loc_1011094  +
xor eax eax +
inc eax  +
mov [ebp+var_14] ebx +
mov ecx [esi+48h] +
mov ebx [ebp+arg_4] +
sub ecx eax +
mov eax [esi+44h] +
push ecx  +
sub eax ebx +
push eax  +
push dword ptr [esi+24h]  +
call ds:LineTo  +
add ebx [ebp+arg_0] +
inc [ebp+arg_8]  +
add [ebp+arg_C] 4 +
cmp [ebp+arg_8] 7D0h +
mov [ebp+arg_4] ebx +
jl loc_1010FF7  +
cmp [ebp+var_8] 0 +
jz loc_10110D8  +
push [ebp+var_8]  +
push dword ptr [esi+24h]  +
call ds:SelectObject  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi dword_101E418 +
xor ebx ebx +
cmp esi ebx +
jl loc_1011160  +
cmp esi 1 +
push edi  +
jle loc_1011168  +
cmp esi 3 +
jle loc_1011114  +
cmp esi 4 +
jz loc_1011168  +
lea eax [esi-5] +
cmp eax 14h +
ja loc_101115F  +
mov edi [ebp+10h] +
xor eax eax +
cmp dword_101E16C ebx +
setz al  +
add edi 4 +
mov ecx edi +
mov ebx eax +
push ebx  +
push esi  +
push dword ptr [ebp+8]  +
call sub_101078B  +
push ebx  +
push esi  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [ebp-8] eax +
mov [ebp-4] edx +
call sub_101078B  +
cmp [ebp-4] edx +
ja loc_1011153  +
jb loc_10111AA  +
cmp [ebp-8] eax +
jb loc_10111AA  +
jmp loc_1011156  +
cmp [ebp-8] eax +
jnz loc_10111BC  +
cmp [ebp-4] edx +
jnz loc_10111BC  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi [ebp+10h] +
push esi  +
push dword ptr [ebp+8]  +
add edi 4 +
mov ecx edi +
call sub_1010695  +
push esi  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [ebp+10h] eax +
call sub_1010695  +
cmp [ebp+10h] ebx +
jz loc_101115F  +
test eax eax +
jz loc_101115F  +
push 0FFFFFFFFh  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [ebp+10h]  +
push 1  +
push 400h  +
call ds:CompareStringW  +
cmp eax 1 +
jnz loc_10111B2  +
mov ebx dword_101E41C +
jmp loc_101115F  +
***
cmp eax 2 +
jz loc_101115D  +
cmp eax 3 +
jnz loc_101115D  +
mov ebx dword_101E41C +
neg ebx  +
jmp loc_101115F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C4h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hDlg] +
push ebx  +
push esi  +
push edi  +
push 0F5h  +
push eax  +
call ds:GetDlgItem  +
mov edi eax +
lea eax [ebp+Rect] +
push eax  +
xor ebx ebx +
push edi  +
mov [ebp+hWnd] edi +
mov [ebp+var_10C] ebx +
call ds:GetClientRect  +
push 2  +
call ds:GetSystemMetrics  +
mov esi ds:SendMessageW +
sub [ebp+Rect.right] eax +
push ebx  +
push ebx  +
push 0Bh  +
push edi  +
call esi  +
push ebx  +
push ebx  +
push 1009h  +
push edi  +
call esi  +
push ebx  +
push ebx  +
push 101Ch  +
push edi  +
call esi  +
test eax eax +
jnz loc_1011235  +
push 0Ah  +
pop ecx  +
lea edi [ebp+var_1C0] +
stos   +
mov eax [ebp+Rect.right] +
mov [ebp+var_1BC] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 1061h  +
push [ebp+hWnd]  +
mov [ebp+lParam] 2 +
call esi  +
xor edi edi +
cmp edi ebx +
jz loc_1011365  +
mov eax [ebp+var_10C] +
jmp loc_1011296  +
cmp ecx edi +
jge loc_10112A2  +
inc eax  +
mov [ebp+var_10C] eax +
mov ecx dword_101E304[eax*4] +
cmp ecx 0FFFFFFFFh +
jnz loc_101128B  +
cmp dword_101E304[eax*4] edi +
jnz loc_10112BE  +
inc eax  +
mov [ebp+var_110] 1 +
mov [ebp+var_10C] eax +
jmp loc_10112C4  +
mov [ebp+var_110] ebx +
push 80h  +
lea eax [ebp+Buffer] +
push eax  +
push ds:uID[edi*4]  +
push hInstance  +
call ds:LoadStringW  +
push 38h  +
lea eax [ebp+var_194] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+Buffer] +
mov [ebp+var_184] eax +
lea eax [ebp+var_198] +
push eax  +
push ebx  +
push 104Dh  +
push [ebp+hWnd]  +
mov [ebp+var_198] 5 +
mov [ebp+var_194] edi +
mov [ebp+var_178] edi +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1011365  +
xor ecx ecx +
cmp [ebp+var_110] ebx +
mov [ebp+var_14C] 0F000h +
setnz cl  +
inc ecx  +
shl ecx 0Ch +
mov [ebp+var_150] ecx +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
push 102Bh  +
push [ebp+hWnd]  +
call esi  +
inc edi  +
cmp edi 1Ah +
jl loc_101127B  +
push ebx  +
push 1  +
push 0Bh  +
push [ebp+hWnd]  +
call esi  +
push 3  +
pop eax  +
mov [ebp+var_14C] eax +
mov [ebp+var_150] eax +
lea eax [ebp+var_15C] +
push eax  +
push ebx  +
push 102Bh  +
push [ebp+hWnd]  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_10113CA  +
mov ecx [ecx] +
mov eax [ecx+eax*4] +
jmp loc_10113CC  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_10113B6  +
push eax  +
mov ecx esi +
call sub_1010695  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10113B6  +
push eax  +
mov ecx esi +
call sub_101078B  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+1Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+1Ch]  +
call ds:GetDC  +
mov edi eax +
push edi  +
call ds:CreateCompatibleDC  +
mov [esi+24h] eax +
test eax eax +
jnz loc_101145E  +
push edi  +
push dword ptr [esi+1Ch]  +
call ds:ReleaseDC  +
call sub_100DD74  +
jmp loc_10114B6  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
and dword ptr [esi+3Ch] 0 +
and dword ptr [esi+40h] 0 +
push ecx  +
push eax  +
push edi  +
mov [esi+44h] eax +
mov [esi+48h] ecx +
call ds:CreateCompatibleBitmap  +
push edi  +
push dword ptr [esi+1Ch]  +
mov [esi+28h] eax +
call ds:ReleaseDC  +
mov eax [esi+28h] +
test eax eax +
jnz loc_10114A7  +
call sub_100DD74  +
push dword ptr [esi+24h]  +
mov edi eax +
call ds:DeleteDC  +
and dword ptr [esi+24h] 0 +
mov eax edi +
jmp loc_10114B6  +
push eax  +
push dword ptr [esi+24h]  +
call ds:SelectObject  +
mov [esi+2Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
cmp dword_101E304 0FFFFFFFFh +
push edi  +
mov edi [ebp+arg_0] +
jz loc_10114ED  +
mov eax offset dword_101E304 +
cmp [eax] edi +
jge loc_10114ED  +
inc esi  +
lea eax dword_101E304[esi*4] +
cmp dword ptr [eax] 0FFFFFFFFh +
jnz loc_10114DC  +
cmp [ebp+arg_4] 0 +
lea ebx dword_101E304[esi*4] +
jz loc_1011584  +
cmp [ebx] edi +
jz loc_10115C3  +
lea ecx dword_101E1F8[esi*4] +
mov eax offset unk_101E274 +
sub eax ecx +
jz loc_1011525  +
push eax  +
push ecx  +
add ecx 4 +
push ecx  +
call ds:memmove  +
add esp 0Ch +
mov eax offset unk_101E36C +
sub eax ebx +
jz loc_101153D  +
push eax  +
lea eax [ebx+4] +
push ebx  +
push eax  +
call ds:memmove  +
add esp 0Ch +
cmp dword_101FDC0 0 +
jz loc_1011562  +
movsx eax word_101F832[edi*4] +
push 60h  +
push nNumerator  +
push eax  +
call ds:MulDiv  +
movzx eax ax +
jmp loc_101156A  +
movzx eax word_101F832[edi*4] +
mov word_101E370[esi*2] ax +
push edi  +
mov [ebx] edi +
inc dword_101E414  +
push 4  +
call sub_101ACC4  +
jmp loc_10115C3  +
cmp [ebx] edi +
jnz loc_10115C3  +
mov edi ds:memmove +
lea esi word_101E370[esi*2] +
mov eax offset unk_101E3A4 +
sub eax esi +
jz loc_10115A9  +
push eax  +
lea eax [esi+2] +
push eax  +
push esi  +
call edi  +
add esp 0Ch +
mov eax offset unk_101E36C +
sub eax ebx +
jz loc_10115BD  +
push eax  +
lea eax [ebx+4] +
push eax  +
push ebx  +
call edi  +
add esp 0Ch +
dec dword_101E414  +
mov eax dword_101E414 +
or dword_101E304[eax*4] 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
push 0F5h  +
push [ebp+hWnd]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
xor ebx ebx +
push ebx  +
push ebx  +
mov edi 1004h +
push edi  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
test eax eax +
jle loc_1011669  +
push 38h  +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push [ebp+hWnd]  +
mov [ebp+lParam] 4 +
mov [ebp+var_38] ebx +
call esi  +
test eax eax +
jz loc_101165A  +
push 0F000h  +
push ebx  +
push 102Ch  +
push [ebp+hWnd]  +
call esi  +
shr eax 0Ch +
dec eax  +
push eax  +
push [ebp+var_1C]  +
call sub_10114C1  +
push 0  +
push 0  +
push edi  +
push [ebp+hWnd]  +
inc ebx  +
call esi  +
cmp ebx eax +
jl loc_101160F  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
test eax eax +
jnz loc_101169C  +
mov eax 80070057h +
jmp loc_10116E0  +
xor ecx ecx +
push 1  +
push ecx  +
mov [ebp+var_8] cx +
lea ecx [ebp+var_20C] +
push ecx  +
lea ecx [ebp+var_208] +
push ecx  +
push eax  +
mov [ebp+var_20C] 200h +
call NhGetInterfaceNameFromDeviceGuid  +
test eax eax +
jnz loc_10116DB  +
lea eax [ebp+var_208] +
push eax  +
push [ebp+arg_8]  +
push esi  +
call sub_1001A1B  +
xor eax eax +
jmp loc_10116E0  +
mov eax 80004005h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_C] ecx +
mov [ebp+var_4] 8007000Eh +
cmp ebx edi +
jz loc_10118F2  +
cmp dword ptr [ebp+pv] edi +
jz loc_10118F2  +
cmp [ebx] edi +
jnz loc_1011740  +
push 5498h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx] eax +
cmp eax edi +
jz loc_10118ED  +
push esi  +
mov esi [ebx] +
push 548h  +
push edi  +
push esi  +
mov [ebp+arg_0] esi +
call memset  +
mov eax dword ptr [ebp+pv] +
mov eax [eax+4] +
add esp 0Ch +
push esi  +
mov [esi+8] eax +
call GetIfEntry2  +
test eax eax +
jnz loc_10118EC  +
mov eax [esi+468h] +
cmp eax 17h +
jz loc_101182F  +
cmp eax 1Ch +
jz loc_101182F  +
push 64h  +
lea eax [ebp+var_70] +
push edi  +
push eax  +
mov [ebp+var_74] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+pv] +
push eax  +
add esi 0Ch +
push esi  +
mov dword ptr [ebp+pv] edi +
call StringFromCLSID  +
test eax eax +
jl loc_1011838  +
push dword ptr [ebp+pv]  +
mov eax [ebx] +
push offset aDeviceS  +
mov esi 528Ch +
add eax esi +
push 104h  +
push eax  +
call sub_100196B  +
add esp 10h +
push dword ptr [ebp+pv]  +
call CoTaskMemFree  +
mov eax [ebx] +
add eax esi +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlInitUnicodeString  +
lea eax [ebp+var_74] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_74] 68h +
call sub_101B4B2  +
test eax eax +
jz loc_1011816  +
mov eax [ebp+var_60] +
push 64h  +
pop ecx  +
mul  ecx +
mov ecx [ebx] +
mov [ecx+4E58h] eax +
mov [ecx+4E5Ch] edx +
jmp loc_1011824  +
mov eax [ebx] +
mov [eax+4E58h] edi +
mov [eax+4E5Ch] edi +
mov eax [ebx] +
mov byte ptr [eax+4E60h] 0 +
jmp loc_1011838  +
mov eax [ebx] +
mov byte ptr [eax+4E60h] 1 +
mov esi [ebx] +
mov eax 152h +
lea edi [esi+548h] +
mov ecx eax +
movs   +
mov esi [ebx] +
mov ecx eax +
lea edi [esi+0A90h] +
movs   +
mov eax [ebx] +
mov esi 1F40h +
push esi  +
add eax 0FD8h +
push 0FFFFFFFFh  +
push eax  +
call memset  +
mov eax [ebx] +
push esi  +
add eax 2F18h +
push 0FFFFFFFFh  +
push eax  +
call memset  +
mov eax [ebx] +
add esp 18h +
lea ecx [eax+21Eh] +
push ecx  +
push 100h  +
add eax 4E62h +
push eax  +
call sub_1001A1B  +
mov edi [ebx] +
mov esi [ebp+arg_0] +
add esi 0Ch +
add edi 5264h +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx] +
mov byte ptr [eax+4E61h] 1 +
mov eax [ebx] +
lea ecx [eax+5062h] +
mov esi 100h +
push esi  +
push ecx  +
mov ecx [ebp+var_C] +
add eax 5264h +
push eax  +
call sub_1011675  +
test eax eax +
jge loc_10118E8  +
mov ebx [ebx] +
lea eax [ebx+4E62h] +
push eax  +
push esi  +
add ebx 5062h +
push ebx  +
call sub_1001A1B  +
and [ebp+var_4] 0 +
pop esi  +
mov eax [ebp+var_4] +
jmp loc_10118F7  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0CCh +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
xor ecx ecx +
push esi  +
mov esi [ebp+arg_8] +
inc ecx  +
push edi  +
mov edi offset WindowName +
mov eax 3B9ACA00h +
test edx edx +
ja loc_1011951  +
cmp ebx eax +
jb loc_1011958  +
mov edi offset unk_101E528 +
jmp loc_101197E  +
mov eax 0F4240h +
test edx edx +
ja loc_1011965  +
cmp ebx eax +
jb loc_101196C  +
mov edi offset unk_101E508 +
jmp loc_101197E  +
mov eax 3E8h +
test edx edx +
ja loc_1011979  +
cmp ebx eax +
jb loc_1011980  +
mov edi offset unk_101E4E8 +
mov ecx eax +
push 64h  +
lea eax [ebp+var_CC] +
push eax  +
push 0  +
push ecx  +
push edx  +
push ebx  +
call __aulldiv  +
push edx  +
push eax  +
call sub_101059E  +
lea eax [ebp+var_CC] +
push eax  +
push [ebp+arg_C]  +
push esi  +
call sub_1001A1B  +
push offset dword_1003C8C  +
push [ebp+arg_C]  +
push esi  +
call sub_1003CD4  +
push edi  +
push [ebp+arg_C]  +
push esi  +
call sub_1003CD4  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
push 0C8h  +
mov [ebp+lpNumberStr] eax +
xor ebx ebx +
lea eax [ebp+Value] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push ebx  +
mov esi 989680h +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call __aulldiv  +
push 0Ah  +
mov edi eax +
push 64h  +
lea eax [ebp+Value] +
push eax  +
push edx  +
push edi  +
mov [ebp+var_114] edx +
call _ui64tow_s  +
mov eax edi +
add esp 14h +
or eax [ebp+var_114] +
jz loc_1011A5F  +
push ebx  +
push esi  +
push [ebp+var_114]  +
push edi  +
call sub_1002233  +
sub [ebp+arg_0] eax +
sbb [ebp+arg_4] edx +
mov eax [ebp+arg_0] +
or eax [ebp+arg_4] +
jnz loc_1011A70  +
cmp [ebp+arg_10] bl +
jz loc_1011B04  +
push 40h  +
lea eax [ebp+var_44] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push ebx  +
push 64h  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002233  +
push ebx  +
push esi  +
push edx  +
push eax  +
call __aulldiv  +
mov esi edx +
mov edi eax +
or eax esi +
jz loc_1011B04  +
push 0Ah  +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
push esi  +
push edi  +
call _ui64tow_s  +
add esp 14h +
push offset dword_1011B50  +
push 64h  +
lea eax [ebp+Value] +
push eax  +
call sub_1003CD4  +
cmp esi ebx +
ja loc_1011AE1  +
jb loc_1011ACE  +
cmp edi 0Ah +
jnb loc_1011AE1  +
push offset unk_101E910  +
push 64h  +
lea eax [ebp+Value] +
push eax  +
call sub_1003CD4  +
cmp word ptr [ebp+var_44+2] 30h +
jnz loc_1011AEE  +
xor eax eax +
mov word ptr [ebp+var_44+2] ax +
lea eax [ebp+var_44] +
push eax  +
push 64h  +
lea eax [ebp+Value] +
push eax  +
call sub_1003CD4  +
mov [ebp+arg_10] 1 +
cmp [ebp+arg_10] 1 +
lea eax [ebp+Value] +
jnz loc_1011B29  +
push [ebp+cchNumber]  +
push [ebp+lpNumberStr]  +
push ebx  +
push eax  +
push ebx  +
push 400h  +
call ds:GetNumberFormatW  +
jmp loc_1011B38  +
push eax  +
push [ebp+cchNumber]  +
push [ebp+lpNumberStr]  +
call sub_1001A1B  +
mov ecx [ebp+var_4] +
mov eax [ebp+lpNumberStr] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [ebp+arg_0] +
mov eax [eax+edx*4] +
push esi  +
movzx esi byte ptr [ecx+8] +
imul esi esi +
mov eax [eax+esi+9CCh] +
dec eax  +
pop esi  +
jz loc_1011B8E  +
push offset unk_101F9A0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1001A1B  +
jmp loc_1011BBF  +
push [ebp+arg_8]  +
xor eax eax +
cmp dword_101E16C eax +
push [ebp+arg_4]  +
setz al  +
push eax  +
push 3  +
push edx  +
call sub_10113FA  +
push edx  +
push eax  +
call sub_101191B  +
push offset unk_101EA50  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1003CD4  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp eax [edi+4] +
jnb loc_1011C3D  +
mov ecx [edi] +
push ebx  +
mov ebx ds:memmove +
push esi  +
mov esi [ecx+eax*4] +
add esi 2F18h +
push 1F3Ch  +
lea eax [esi+4] +
push esi  +
push eax  +
call ebx  +
add esp 0Ch +
push 0  +
push 6  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10113FA  +
mov ecx [ebp+arg_0] +
mov [esi] eax +
mov eax [edi] +
mov esi [eax+ecx*4] +
add esi 0FD8h +
push 1F3Ch  +
lea eax [esi+4] +
push esi  +
push eax  +
call ebx  +
add esp 0Ch +
push 0  +
push 5  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10113FA  +
mov [esi] eax +
pop esi  +
mov al 1 +
pop ebx  +
jmp loc_1011C3F  +
xor al al +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 260h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx ecx +
xor esi esi +
mov [ebp+var_260] eax +
cmp [ebx+54h] esi +
jnz loc_1011D48  +
cmp eax esi +
jz loc_1011D48  +
push 1F4h  +
lea eax [ebp+var_254] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
push esi  +
lea eax [ebp+pvParam] +
push eax  +
push esi  +
push 29h  +
mov [ebp+var_25C] esi +
mov [ebp+pvParam] 1F8h +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_1011D48  +
push edi  +
push 17h  +
pop ecx  +
push offset unk_101EA10  +
push 20h  +
lea eax [ebp+var_60.lfFaceName] +
lea esi [ebp+var_C0] +
lea edi [ebp+var_60] +
movs   +
push eax  +
mov [ebp+var_60.lfWeight] 64h +
call sub_1001A1B  +
mov edi [ebp+var_260] +
push 5Ah  +
push edi  +
call ds:GetDeviceCaps  +
shl eax 3 +
push 0FFFFFFB8h  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp+var_60.lfHeight] eax +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
mov esi ds:SelectObject +
mov [ebx+54h] eax +
test eax eax +
jz loc_1011D1E  +
push eax  +
push edi  +
call esi  +
mov [ebp+var_25C] eax +
mov eax [ebp+var_60.lfHeight] +
push offset a22_5  +
add eax 0FFFFFFFEh +
push edi  +
mov [ebx+58h] eax +
call sub_1010C54  +
cmp [ebp+var_25C] 0 +
mov [ebx+5Ch] eax +
jz loc_1011D47  +
push [ebp+var_25C]  +
push edi  +
call esi  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ECh +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_D0] 0 +
cmp dword_101E170 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx ecx +
mov ecx [ebp+arg_0] +
push edi  +
mov edi [esi] +
mov [ebp+hDC] ecx +
jz loc_1011FF3  +
mov eax [ebx+54h] +
test eax eax +
jz loc_1011DC2  +
push eax  +
push ecx  +
call ds:SelectObject  +
mov [ebp+var_D0] eax +
push 1  +
push [ebp+hDC]  +
call ds:SetBkMode  +
push 0FFFFh  +
push [ebp+hDC]  +
call ds:SetTextColor  +
add edi [ebx+5Ch] +
mov eax [esi] +
mov [ebp+var_D8] edi +
add edi 0FFFFFFFDh +
mov [ebp+Rect.left] eax +
mov eax [esi+4] +
mov [ebp+Rect.right] edi +
mov edi [ebp+arg_8] +
mov [ebp+Rect.top] eax +
imul edi edi +
sub eax [ebx+58h] +
push 0  +
push 64h  +
mov [ebp+Rect.bottom] eax +
lea eax [ebp+String] +
push eax  +
push 0  +
push edi  +
mov ecx ebx +
call sub_10119DA  +
push offset dword_1003C8C  +
push 64h  +
lea eax [ebp+String] +
push eax  +
call sub_1003CD4  +
push offset unk_101E990  +
push 64h  +
lea eax [ebp+String] +
push eax  +
call sub_1003CD4  +
push 2  +
lea eax [ebp+Rect] +
push eax  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
push eax  +
lea eax [ebp+String] +
push eax  +
push [ebp+hDC]  +
call ds:DrawTextW  +
mov edx [esi+4] +
mov eax [esi+0Ch] +
mov ecx [ebx+58h] +
sub eax edx +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_EC] eax +
mov eax ecx +
mov ecx [ebp+var_EC] +
add ecx [esi+4] +
cdq   +
sub eax edx +
sar eax 1 +
add eax ecx +
mov [ebp+Rect.top] eax +
sub eax [ebx+58h] +
push 0  +
push 64h  +
mov [ebp+Rect.bottom] eax +
lea eax [ebp+String] +
push eax  +
push 0  +
shr edi 1 +
push edi  +
mov ecx ebx +
call sub_10119DA  +
push offset dword_1003C8C  +
push 64h  +
lea eax [ebp+String] +
push eax  +
call sub_1003CD4  +
push offset unk_101E990  +
push 64h  +
lea eax [ebp+String] +
push eax  +
call sub_1003CD4  +
mov edi ds:lstrlenW +
push 2  +
lea eax [ebp+Rect] +
push eax  +
lea eax [ebp+String] +
push eax  +
call edi  +
push eax  +
lea eax [ebp+String] +
push eax  +
push [ebp+hDC]  +
call ds:DrawTextW  +
mov ecx [ebx+58h] +
mov eax [esi+0Ch] +
add eax ecx +
mov [ebp+Rect.top] eax +
sub eax ecx +
push offset unk_101E910  +
mov [ebp+Rect.bottom] eax +
push 64h  +
lea eax [ebp+String] +
push eax  +
call sub_1001A1B  +
push offset dword_1003C8C  +
push 64h  +
lea eax [ebp+String] +
push eax  +
call sub_1003CD4  +
push offset unk_101E990  +
push 64h  +
lea eax [ebp+String] +
push eax  +
call sub_1003CD4  +
push 2  +
lea eax [ebp+Rect] +
push eax  +
lea eax [ebp+String] +
push eax  +
call edi  +
mov edi [ebp+hDC] +
push eax  +
lea eax [ebp+String] +
push eax  +
push edi  +
call ds:DrawTextW  +
cmp [ebp+var_D0] 0 +
jz loc_1011FA7  +
push [ebp+var_D0]  +
push edi  +
call ds:SelectObject  +
push dword ptr [ebx+34h]  +
mov ebx ds:SelectObject +
push edi  +
call ebx  +
push 0  +
push dword ptr [esi+4]  +
mov [ebp+var_D0] eax +
push [ebp+var_D8]  +
push edi  +
call ds:MoveToEx  +
push dword ptr [esi+0Ch]  +
push [ebp+var_D8]  +
push edi  +
call ds:LineTo  +
cmp [ebp+var_D0] 0 +
jz loc_1011FED  +
push [ebp+var_D0]  +
push edi  +
call ebx  +
mov edi [ebp+var_D8] +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 64h  +
pop eax  +
xor edx edx +
div  [ebp+arg_8] +
push 64h  +
xor edx edx +
mov esi eax +
pop eax  +
sub eax esi +
imul eax eax +
push 64h  +
pop edi  +
div  edi +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
mov edi eax +
add edi 0Ch +
call sub_1011D71  +
push 408000h  +
push 1  +
push 0  +
mov [ebp+arg_8] eax +
call ds:CreatePen  +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
call ds:SelectObject  +
mov [ebp+arg_4] eax +
lea ebx [edi+1] +
jmp loc_101208B  +
push 0  +
sub eax ebx +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call ds:MoveToEx  +
mov eax [esi+0Ch] +
sub eax ebx +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call ds:LineTo  +
add ebx edi +
mov eax [esi+0Ch] +
mov ecx eax +
sub ecx [esi+4] +
cmp ebx ecx +
jl loc_1012066  +
mov edi [esi+8] +
sub edi dword_1020600 +
jmp loc_10120C1  +
push 0  +
push dword ptr [esi+4]  +
push edi  +
push [ebp+arg_0]  +
call ds:MoveToEx  +
push dword ptr [esi+0Ch]  +
push edi  +
push [ebp+arg_0]  +
call ds:LineTo  +
sub edi 0Ch +
cmp edi [ebp+arg_8] +
jg loc_10120A2  +
cmp [ebp+arg_4] 0 +
jz loc_10120D8  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:SelectObject  +
cmp [ebp+var_4] 0 +
jz loc_10120E7  +
push [ebp+var_4]  +
call ds:DeleteObject  +
mov eax [ebp+arg_8] +
sub eax [esi] +
pop edi  +
pop esi  +
sub eax 3 +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+70h] ebx +
jbe loc_1012198  +
push edi  +
mov edi 104h +
mov eax [esi+64h] +
push 0  +
push 0  +
push dword ptr [eax+ebx*8+4]  +
call ds:InvalidateRect  +
mov eax [esi+64h] +
push dword ptr [eax+ebx*8+4]  +
call ds:UpdateWindow  +
push 0  +
push 2  +
push ebx  +
lea ecx [esi+4] +
call sub_10113FA  +
xor ecx ecx +
push ecx  +
mov word ptr [ebp+String] cx +
push edi  +
lea ecx [ebp+String] +
push ecx  +
push edx  +
push eax  +
mov ecx esi +
call sub_10119DA  +
push offset asc_10121A8  +
push edi  +
lea eax [ebp+String] +
push eax  +
call sub_1003CD4  +
test eax eax +
jl loc_1012191  +
lea eax [ebp+String] +
push eax  +
mov eax [esi+64h] +
push dword ptr [eax+ebx*8+4]  +
call ds:SetWindowTextW  +
inc ebx  +
cmp ebx [esi+70h] +
jb loc_1012121  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
mov [ebp+var_4] 1 +
cmp edi [esi+68h] +
ja loc_101233B  +
call sub_1010EB1  +
add eax edi +
mov [ebp+var_8] eax +
cmp eax [esi+8] +
jnb loc_101233B  +
push ebx  +
lea ecx [esi+4] +
push eax  +
call sub_1010742  +
xor ebx ebx +
push 4  +
pop ecx  +
cmp dword_101E15C ebx +
jz loc_101222E  +
cmp eax 1 +
jnb loc_101220A  +
mov [ebp+var_4] 64h +
jmp loc_101222E  +
cmp eax 5 +
jnb loc_1012218  +
mov [ebp+var_4] 14h +
jmp loc_101222E  +
cmp eax 19h +
jnb loc_1012222  +
mov [ebp+var_4] ecx +
jmp loc_101222E  +
xor edx edx +
cmp eax 32h +
setb dl  +
inc edx  +
mov [ebp+var_4] edx +
cmp [esi+24h] ebx +
jz loc_101233A  +
push ecx  +
lea edi [esi+3Ch] +
call ds:GetStockObject  +
push eax  +
push edi  +
push dword ptr [esi+24h]  +
call ds:FillRect  +
push [ebp+var_4]  +
mov ecx esi +
push edi  +
push dword ptr [esi+24h]  +
call sub_101200B  +
mov [ebp+arg_4] ebx +
mov ebx [ebp+arg_0] +
lea edi [ebx+1Ch] +
add [edi] eax +
mov [ebp+var_C] eax +
xor eax eax +
cmp dword_101E160 eax +
jz loc_1012295  +
push eax  +
push eax  +
push [ebp+var_8]  +
lea ecx [esi+4] +
call sub_1010713  +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push dword ptr [esi+30h]  +
push edi  +
call sub_1010ED3  +
test eax eax +
jbe loc_1012295  +
mov [ebp+arg_4] eax +
cmp dword_101E164 0 +
jz loc_10122C4  +
push 0  +
push 1  +
push [ebp+var_8]  +
lea ecx [esi+4] +
call sub_1010713  +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push dword ptr [esi+34h]  +
push edi  +
call sub_1010ED3  +
cmp eax [ebp+arg_4] +
jbe loc_10122C4  +
mov [ebp+arg_4] eax +
cmp dword_101E168 0 +
jz loc_10122FF  +
push 1  +
push [ebp+var_8]  +
lea ecx [esi+4] +
call sub_1010713  +
push eax  +
push 0  +
push [ebp+var_8]  +
lea ecx [esi+4] +
call sub_1010713  +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
push dword ptr [esi+38h]  +
push edi  +
call sub_1010ED3  +
cmp eax [ebp+arg_4] +
jbe loc_10122FF  +
mov [ebp+arg_4] eax +
push [ebp+arg_4]  +
mov eax [ebp+var_C] +
push [ebp+var_8]  +
sub [edi] eax +
lea ecx [esi+4] +
call sub_1010767  +
mov eax [ebx+20h] +
mov ecx [ebx+28h] +
mov edi [edi] +
push 0CC0020h  +
push 0  +
push 0  +
push dword ptr [esi+24h]  +
sub ecx eax +
push ecx  +
mov ecx [ebx+24h] +
sub ecx edi +
push ecx  +
push eax  +
push edi  +
push dword ptr [ebx+18h]  +
call ds:BitBlt  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 15Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+wParam] 0 +
and [ebp+var_DC] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendMessageW +
push 2  +
pop ebx  +
push ebx  +
push 0FFFFFFFFh  +
mov esi ecx +
mov eax [esi+8] +
push 100Ch  +
push dword ptr [esi+78h]  +
mov [ebp+var_E4] eax +
call edi  +
cmp eax 0FFFFFFFFh +
jz loc_10123C5  +
mov [ebp+var_11C] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push dword ptr [esi+78h]  +
mov [ebp+lParam] 4 +
call edi  +
test eax eax +
jz loc_10123C5  +
mov eax [ebp+var_100] +
mov [ebp+var_DC] eax +
push 0  +
push 0  +
push 1009h  +
push dword ptr [esi+78h]  +
call edi  +
push 0  +
push 0  +
push 1004h  +
push dword ptr [esi+78h]  +
call edi  +
and [ebp+var_D0] 0 +
cmp [ebp+var_E4] 0 +
mov [ebp+var_E0] eax +
jbe loc_1012627  +
and [ebp+var_D8] 0 +
cmp dword_101E304 0 +
jl loc_10125C7  +
mov ebx offset dword_101E304 +
mov eax [ebp+var_D8] +
push [ebp+var_D0]  +
mov [ebp+var_118] eax +
mov eax [ebp+wParam] +
lea ecx [esi+4] +
mov [ebp+lParam] 1 +
mov [ebp+var_11C] eax +
mov [ebp+var_10C] offset WindowName +
call sub_10113B6  +
mov [ebp+var_100] eax +
mov eax [ebx] +
cmp eax 4 +
jg loc_10124AC  +
jz loc_1012498  +
test eax eax +
jl loc_1012556  +
cmp eax 1 +
jle loc_1012498  +
cmp eax 2 +
jz loc_10124F5  +
cmp eax 3 +
jnz loc_1012556  +
push 64h  +
lea eax [ebp+var_CC] +
push eax  +
push [ebp+var_D0]  +
lea ecx [esi+4] +
call sub_1011B59  +
jmp loc_101254A  +
push eax  +
push [ebp+var_D0]  +
lea ecx [esi+4] +
call sub_10113D5  +
jmp loc_1012550  +
cmp eax 5 +
jl loc_1012556  +
cmp eax 7 +
jle loc_10124F5  +
cmp eax 0Dh +
jle loc_10124C8  +
cmp eax 19h +
jg loc_1012556  +
push 64h  +
lea ecx [ebp+var_CC] +
push ecx  +
xor ecx ecx +
cmp dword_101E16C ecx +
setz cl  +
push ecx  +
push eax  +
push [ebp+var_D0]  +
lea ecx [esi+4] +
call sub_10113FA  +
push edx  +
push eax  +
call sub_101059E  +
jmp loc_101254A  +
push 0  +
push 64h  +
lea ecx [ebp+var_CC] +
push ecx  +
xor ecx ecx +
cmp dword_101E16C ecx +
setz cl  +
push ecx  +
push eax  +
push [ebp+var_D0]  +
lea ecx [esi+4] +
call sub_10113FA  +
push edx  +
push eax  +
mov ecx esi +
call sub_10119DA  +
push offset dword_1003C8C  +
push 64h  +
lea eax [ebp+var_CC] +
push eax  +
call sub_1003CD4  +
push offset unk_101E990  +
push 64h  +
lea eax [ebp+var_CC] +
push eax  +
call sub_1003CD4  +
lea eax [ebp+var_CC] +
mov [ebp+var_10C] eax +
mov eax [ebp+var_E0] +
cmp [ebp+wParam] eax +
lea eax [ebp+lParam] +
push eax  +
jb loc_101259C  +
or [ebp+lParam] 4 +
xor ebx ebx +
push ebx  +
push 104Dh  +
push dword ptr [esi+78h]  +
call edi  +
cmp eax 0FFFFFFFFh +
jz loc_1012648  +
push ebx  +
push ebx  +
push 1004h  +
push dword ptr [esi+78h]  +
call edi  +
mov [ebp+var_E0] eax +
jmp loc_10125A8  +
push 0  +
push 104Ch  +
push dword ptr [esi+78h]  +
call edi  +
inc [ebp+var_D8]  +
mov ebx [ebp+var_D8] +
lea ebx dword_101E304[ebx*4] +
cmp dword ptr [ebx] 0 +
jge loc_1012414  +
push 2  +
pop ebx  +
cmp [ebp+var_DC] 0 +
jz loc_1012609  +
push [ebp+var_D0]  +
lea ecx [esi+4] +
call sub_10113B6  +
cmp [ebp+var_DC] eax +
jnz loc_1012609  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_14C] ebx +
push 102Bh  +
push dword ptr [esi+78h]  +
mov [ebp+var_150] ebx +
call edi  +
inc [ebp+wParam]  +
inc [ebp+var_D0]  +
mov eax [ebp+var_D0] +
cmp eax [ebp+var_E4] +
jb loc_10123FB  +
push offset loc_10110E7  +
push esi  +
push 1030h  +
push dword ptr [esi+78h]  +
call edi  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
mov eax 80004005h +
jmp loc_1012639  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+hWnd] +
push 8  +
push edi  +
call ds:GetWindowLongW  +
mov ecx [ebp+arg_4] +
mov esi eax +
mov eax 110h +
test esi esi +
jnz loc_101267D  +
cmp ecx eax +
jnz loc_1012709  +
sub ecx eax +
jz loc_10126C0  +
dec ecx  +
jnz loc_1012709  +
cmp [ebp+arg_8] 1 +
jnz loc_10126AE  +
mov ecx esi +
call sub_1010CA8  +
push edi  +
call sub_10115DC  +
mov ecx esi +
call sub_1006BD7  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push 1  +
jmp loc_10126B7  +
cmp [ebp+arg_8] 2 +
jnz loc_1012709  +
push 2  +
push edi  +
call ds:EndDialog  +
jmp loc_1012709  +
push [ebp+dwNewLong]  +
push 8  +
push edi  +
call ds:SetWindowLongW  +
push 0F5h  +
push edi  +
call ds:GetDlgItem  +
push 0  +
push off_101F898  +
mov esi eax +
push esi  +
call ds:SetWindowTheme  +
push 10024h  +
push 0  +
push 1036h  +
push esi  +
call ds:SendMessageW  +
push edi  +
call sub_10111CB  +
push esi  +
call ds:SetFocus  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
push edi  +
mov [ebp+cb] eax +
lea eax [ebp+cb] +
push eax  +
push dword ptr [esi+10h]  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
call GetAdaptersAddresses  +
xor ecx ecx +
mov edi 0FFFFh +
cmp eax ebx +
jz loc_1012750  +
jle loc_101274E  +
and eax edi +
or eax 80070000h +
mov ecx eax +
mov eax ecx +
and eax edi +
mov [ebp+var_4] ecx +
cmp eax 6Fh +
jnz loc_10127AB  +
push dword ptr [esi+10h]  +
call CoTaskMemFree  +
push [ebp+cb]  +
mov [esi+14h] ebx +
call CoTaskMemAlloc  +
mov [esi+10h] eax +
cmp eax ebx +
jnz loc_1012784  +
mov [ebp+var_4] 8007000Eh +
jmp loc_101289D  +
mov ecx [ebp+cb] +
mov [esi+14h] ecx +
lea ecx [ebp+cb] +
push ecx  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
call GetAdaptersAddresses  +
xor ecx ecx +
cmp eax ebx +
jz loc_10127A8  +
jle loc_10127A6  +
and eax edi +
or eax 80070000h +
mov ecx eax +
mov [ebp+var_4] ecx +
cmp ecx ebx +
jl loc_101289D  +
xor edi edi +
cmp [esi+4] ebx +
jbe loc_1012839  +
mov [ebp+var_8] 1 +
mov eax [esi+10h] +
jmp loc_10127E4  +
cmp dword ptr [eax+40h] 18h +
jz loc_10127E1  +
cmp [eax+0D8h] ebx +
jnz loc_10127E1  +
mov ecx [esi] +
mov ecx [ecx+edi*4] +
mov ecx [ecx+8] +
cmp ecx [eax+4] +
jz loc_101283E  +
mov eax [eax+8] +
cmp eax ebx +
jnz loc_10127C6  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [esi+4] +
cmp eax [ebp+var_8] +
jbe loc_1012820  +
mov ecx [esi] +
sub eax edi +
lea eax ds:0FFFFFFFCh[eax*4] +
lea ecx [ecx+edi*4] +
push eax  +
lea eax [ecx+4] +
push eax  +
push ecx  +
call ds:memmove  +
add esp 0Ch +
mov eax [esi+4] +
mov ecx [esi] +
mov [ecx+eax*4-4] ebx +
dec dword ptr [esi+4]  +
dec edi  +
dec [ebp+var_8]  +
inc edi  +
inc [ebp+var_8]  +
cmp edi [esi+4] +
jb loc_10127C1  +
mov edi [esi+10h] +
jmp loc_1012894  +
or dword ptr [eax+4] 0FFFFFFFFh +
jmp loc_1012830  +
cmp dword ptr [edi+40h] 18h +
jz loc_1012891  +
cmp [edi+0D8h] ebx +
jnz loc_1012891  +
cmp dword ptr [edi+4] 0FFFFFFFFh +
jz loc_1012891  +
mov eax [esi+4] +
cmp eax 20h +
jnb loc_1012891  +
lea eax ds:4[eax*4] +
push eax  +
push esi  +
call sub_1010308  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_101289D  +
mov eax [esi+4] +
mov ecx [esi] +
lea ecx [ecx+eax*4] +
push edi  +
inc eax  +
push ecx  +
mov ecx esi +
mov [esi+4] eax +
call sub_10116F4  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_101289D  +
mov edi [edi+8] +
cmp edi ebx +
jnz loc_1012844  +
cmp [ebp+var_4] ebx +
jge loc_10128A0  +
mov [esi+4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jbe loc_10128DE  +
mov eax [esi] +
mov eax [eax+edi*4] +
lea ecx [eax+5062h] +
push 100h  +
push ecx  +
add eax 5264h +
push eax  +
mov ecx esi +
call sub_1011675  +
inc edi  +
cmp edi [esi+4] +
jb loc_10128BA  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp dword ptr [esi+4] 20h +
mov [ebp+var_8] edi +
jnb loc_1012910  +
call sub_1012716  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_1012A5D  +
cmp byte ptr [esi+8] 0 +
mov [ebp+var_4] edi +
setz al  +
mov [esi+8] al +
cmp [esi+4] edi +
jbe loc_1012A5D  +
push ebx  +
movzx eax byte ptr [esi+8] +
mov edi [ebp+var_4] +
mov ecx [esi] +
shl edi 2 +
inc eax  +
imul eax eax +
add eax [edi+ecx] +
push eax  +
call GetIfEntry2  +
test eax eax +
jnz loc_1012A55  +
call ds:GetTickCount  +
and [ebp+var_C] 0 +
mov [ebp+var_10] eax +
mov eax [esi] +
mov ecx [edi+eax] +
mov eax [ecx+5278h] +
mov edx [ecx+527Ch] +
mov ebx eax +
or ebx edx +
jnz loc_1012975  +
mov eax [ebp+var_10] +
mov edx [ebp+var_C] +
mov ebx [ebp+var_10] +
sub ebx eax +
mov eax [ebp+var_C] +
mov [ecx+5280h] ebx +
sbb eax edx +
mov [ecx+5284h] eax +
mov eax [esi] +
mov eax [edi+eax] +
mov ecx [ebp+var_10] +
mov [eax+5278h] ecx +
xor ecx ecx +
mov [eax+527Ch] ecx +
movzx ecx byte ptr [esi+8] +
mov eax [esi] +
imul ecx ecx +
mov eax [edi+eax] +
mov edx [ecx+eax+9F0h] +
mov [eax+4A8h] edx +
mov ecx [ecx+eax+9F4h] +
mov [eax+4ACh] ecx +
mov eax [esi] +
lea ebx [edi+eax] +
mov eax [ebx] +
cmp byte ptr [eax+4E60h] 0 +
jz loc_10129E4  +
push eax  +
mov ecx esi +
call sub_101037E  +
jmp loc_1012A3B  +
and [ebp+var_80] 0 +
push 64h  +
lea eax [ebp+var_7C] +
push 0  +
push eax  +
call memset  +
mov eax [ebx] +
add esp 0Ch +
add eax 528Ch +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call ds:RtlInitUnicodeString  +
lea eax [ebp+var_80] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov [ebp+var_80] 68h +
call sub_101B4B2  +
test eax eax +
jz loc_1012A3B  +
mov eax [ebp+var_6C] +
push 64h  +
pop ecx  +
mul  ecx +
mov ecx [esi] +
mov edi [edi+ecx] +
mov [edi+4E58h] eax +
mov [edi+4E5Ch] edx +
push [ebp+var_4]  +
mov ecx esi +
call sub_1011BC8  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jnb loc_1012A5C  +
jmp loc_1012927  +
mov [ebp+var_8] 80004005h +
pop ebx  +
mov eax [ebp+arg_0] +
pop edi  +
mov byte ptr [eax] 1 +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
cmp eax [esi+68h] +
jbe loc_1012B7F  +
shl eax 3 +
push eax  +
lea edi [esi+64h] +
push edi  +
call sub_1010308  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_1012B7F  +
push ebx  +
push ebx  +
push 31h  +
push dword ptr [esi+1Ch]  +
call ds:SendMessageW  +
mov [ebp+wParam] eax +
jmp loc_1012B73  +
mov eax [esi+68h] +
push ebx  +
push ebx  +
add eax 9C4h +
push eax  +
push dword ptr [esi+1Ch]  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4800000Bh  +
push offset WindowName  +
push offset ClassName  +
push 200h  +
call ds:CreateWindowExW  +
mov ecx [esi+68h] +
mov edx [edi] +
mov [edx+ecx*8+4] eax +
mov eax [esi+68h] +
mov ecx [edi] +
mov ecx [ecx+eax*8+4] +
cmp ecx ebx +
jz loc_1012B96  +
cmp eax ebx +
jnz loc_1012B2E  +
push ecx  +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jz loc_1012B2E  +
push eax  +
mov ecx esi +
call sub_1011C49  +
push [ebp+hDC]  +
mov eax [esi+68h] +
mov ecx [edi] +
push dword ptr [ecx+eax*8+4]  +
call ds:ReleaseDC  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi+1Ch]  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 40000007h  +
push offset WindowName  +
push offset aDavesframeclas  +
push 4  +
call ds:CreateWindowExW  +
mov ecx [esi+68h] +
mov edx [edi] +
mov [edx+ecx*8] eax +
mov eax [esi+68h] +
mov ecx [edi] +
mov eax [ecx+eax*8] +
cmp eax ebx +
jz loc_1012B89  +
push ebx  +
push [ebp+wParam]  +
push 30h  +
push eax  +
call ds:SendMessageW  +
inc dword ptr [esi+68h]  +
mov eax [ebp+arg_0] +
cmp [esi+68h] eax +
jb loc_1012ABC  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax [esi+68h] +
push dword ptr [ecx+eax*8+4]  +
call ds:DestroyWindow  +
mov eax 8007000Eh +
jmp loc_1012B82  +
***
mov edi edi +
push ecx  +
push offset sub_1012654  +
push hWnd  +
push 969h  +
push hInstance  +
call ds:DialogBoxParamW  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_1010EB1  +
xor edi edi +
mov ebx eax +
cmp [esi+70h] edi +
jbe loc_1012BFD  +
push 0  +
lea eax [edi+ebx] +
push eax  +
lea ecx [esi+4] +
call sub_10113D5  +
push eax  +
mov eax [esi+64h] +
push dword ptr [eax+edi*8]  +
call ds:SetWindowTextW  +
inc edi  +
cmp edi [esi+70h] +
jb loc_1012BDC  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp sub_10120FB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
xor eax eax +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+x] ebx +
lea edi [ebp+var_2C] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-40h] ebx +
lea edi [ebp-3Ch] +
stos   +
stos   +
mov esi ecx +
stos   +
mov [esi+70h] ebx +
test byte ptr dword_101E458 10h +
lea eax [ebp+lParam] +
mov [ebp+var_1] bl +
push eax  +
jz loc_1012C5E  +
push hWnd  +
call ds:GetClientRect  +
mov edi [ebp-14h] +
sub edi dword_101E0C0 +
sub edi [ebp-1Ch] +
jmp loc_1012CA6  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
push 2  +
lea eax [ebp+lParam] +
push eax  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+20h]  +
call ds:MapWindowPoints  +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 1328h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
mov eax [ebp-14h] +
sub eax dword_101E0C0 +
sub eax [ebp-1Ch] +
imul eax eax +
cdq   +
and edx 3 +
add eax edx +
mov edi eax +
sar edi 2 +
mov ebx [esi+8] +
mov [ebp+var_10] ebx +
test ebx ebx +
jz loc_1012D11  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1010E79  +
push eax  +
mov ecx esi +
mov [esi+70h] eax +
call sub_1012A71  +
test eax eax +
jl loc_1012E90  +
mov ecx [esi+70h] +
mov eax dword_101E0C0 +
mov edx [ebp+lParam] +
cmp ebx ecx +
setnbe [ebp+var_1]  +
movzx ebx [ebp+var_1] +
add edx eax +
mov [ebp+x] edx +
lea edx [eax+11h] +
neg ebx  +
sbb ebx ebx +
and ebx edx +
mov edx eax +
neg edx  +
add edx edx +
sub edx ebx +
sub edx [ebp+lParam] +
add edx [ebp-18h] +
mov [ebp+var_28] edx +
mov edx [ebp-1Ch] +
add eax edx +
mov [ebp+var_2C] eax +
mov eax edi +
xor edx edx +
div  ecx +
mov [ebp+var_24] eax +
mov eax [esi+68h] +
lea eax [eax+eax+3] +
push eax  +
call ds:BeginDeferWindowPos  +
mov [ebp+hWinPosInfo] eax +
test eax eax +
jz loc_1012E90  +
xor eax eax +
cmp [ebp+var_1] al +
mov ecx [ebp-1Ch] +
setz al  +
mov ebx 80h +
mov edi ds:DeferWindowPos +
dec eax  +
and eax 0FFFFFFD4h +
add eax ebx +
push eax  +
mov eax [esi+70h] +
imul eax [ebp+var_24] +
push eax  +
mov eax dword_101E0C0 +
push 11h  +
add ecx eax +
push ecx  +
mov ecx [ebp-18h] +
sub ecx eax +
sub ecx 11h +
push ecx  +
push 0  +
push dword ptr [esi+74h]  +
push [ebp+hWinPosInfo]  +
call edi  +
xor eax eax +
mov [ebp+var_C] eax +
cmp [esi+68h] eax +
ja loc_1012D7B  +
jmp loc_1012DBD  +
mov eax [ebp+var_C] +
cmp eax [esi+70h] +
jnb loc_1012DA1  +
lea ecx [ebp-40h] +
push ecx  +
lea ecx [ebp+x] +
push ecx  +
mov ecx [esi+64h] +
lea eax [ecx+eax*8] +
push eax  +
push [ebp+hWinPosInfo]  +
mov ecx esi +
call sub_1010D33  +
mov eax [ebp+var_24] +
add [ebp+var_2C] eax +
jmp loc_1012DB2  +
mov ecx [esi+64h] +
lea eax [ecx+eax*8] +
push eax  +
push [ebp+hWinPosInfo]  +
mov ecx esi +
call sub_1010E37  +
inc [ebp+var_C]  +
mov eax [ebp+var_C] +
cmp eax [esi+68h] +
jb loc_1012D78  +
mov eax [ebp+var_10] +
mov edx [ebp-14h] +
mov ecx [ebp+var_2C] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFD4h +
add eax ebx +
push eax  +
mov eax dword_101E0C0 +
sub edx eax +
sub edx ecx +
push edx  +
mov edx [ebp-18h] +
sub edx eax +
sub edx [ebp+lParam] +
add eax ecx +
sub edx [ebp+x] +
push edx  +
push eax  +
push [ebp+x]  +
push 0  +
push dword ptr [esi+78h]  +
push [ebp+hWinPosInfo]  +
call edi  +
mov ecx [ebp-1Ch] +
mov eax [ebp-14h] +
mov ebx [ebp+var_10] +
sub eax ecx +
mov edx ebx +
neg edx  +
sbb edx edx +
and edx 2Ch +
add edx 54h +
push edx  +
mov edx [ebp-18h] +
sub edx [ebp+lParam] +
push eax  +
push edx  +
cdq   +
sub eax edx +
sar eax 1 +
lea eax [eax+ecx-28h] +
push eax  +
push [ebp+lParam]  +
push 0  +
push dword ptr [esi+7Ch]  +
push [ebp+hWinPosInfo]  +
call edi  +
push [ebp+hWinPosInfo]  +
call ds:EndDeferWindowPos  +
mov ecx esi +
call sub_1008CCA  +
mov eax [ebp-34h] +
sub eax [ebp-3Ch] +
mov ecx esi +
sub eax 4 +
push eax  +
mov eax [ebp-38h] +
sub eax [ebp-40h] +
push eax  +
call sub_101142B  +
mov ecx esi +
call sub_1012BC7  +
cmp [ebp+var_1] 0 +
jz loc_1012E90  +
sub ebx [esi+70h] +
and dword ptr [ebp-44h] 0 +
xor eax eax +
inc eax  +
push eax  +
mov [ebp-3Ch] eax +
lea eax [ebp+var_4C] +
push eax  +
push 2  +
push dword ptr [esi+74h]  +
mov [ebp+var_4C] 1Ch +
mov dword ptr [ebp-48h] 3 +
mov [ebp-40h] ebx +
call ds:SetScrollInfo  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_10128AD  +
mov ecx esi +
pop esi  +
jmp sub_1012C0C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
lea eax [ebp+nPos] +
push eax  +
mov esi ecx +
push 2  +
push dword ptr [esi+74h]  +
mov [ebp+nPos] 1Ch +
mov dword ptr [ebp-18h] 17h +
call ds:GetScrollInfo  +
test eax eax +
jz loc_1012F23  +
mov eax [ebp+arg_0] +
mov edx [ebp-10h] +
movzx ecx ax +
cmp ecx 7 +
ja loc_1012F48  +
jmp ds:off_1012F55[ecx*4]  +
mov [ebp-8] edx +
jmp loc_1012F48  +
mov eax [ebp-14h] +
mov [ebp-8] eax +
cmp [ebp-8] edx +
jle loc_1012F08  +
mov [ebp-8] edx +
mov eax [ebp-8] +
push 1  +
push eax  +
push 2  +
push dword ptr [esi+74h]  +
mov [esi+6Ch] eax +
call ds:SetScrollPos  +
mov ecx esi +
call sub_1012BC7  +
pop esi  +
leave   +
retn 4  +
inc dword ptr [ebp-8]  +
jmp loc_1012F48  +
dec dword ptr [ebp-8]  +
jmp loc_1012F48  +
mov eax [esi+70h] +
sub [ebp-8] eax +
jmp loc_1012F48  +
mov eax [esi+70h] +
add [ebp-8] eax +
jmp loc_1012F48  +
shr eax 10h +
mov [ebp-8] eax +
mov eax [ebp-14h] +
cmp [ebp-8] eax +
jge loc_1012F00  +
mov [ebp-8] eax +
jmp loc_1012F08  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp-4] edi +
cmp dword_101FDAC edi +
jz loc_1012FE4  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_1012FA1  +
test al al +
jnz loc_1012FE4  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1012FE4  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_101FDA0 +
jnz loc_1012FE4  +
cmp eax ecx +
jnz loc_1012FE4  +
push 4  +
push offset dword_100D5B0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
push 4  +
call sub_100561E  +
push eax  +
call sub_101AD9E  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
push 2  +
lea eax [ebp-18h] +
push eax  +
push hWnd  +
push dword ptr [esi+20h]  +
call ds:MapWindowPoints  +
lea eax [ebp-18h] +
push eax  +
push edi  +
push 1328h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
push edi  +
push eax  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
mov dword ptr [esi+50h] 1 +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push edi  +
push dword ptr [esi+1Ch]  +
call ds:SetWindowPos  +
push 5  +
push dword ptr [esi+1Ch]  +
call ds:ShowWindow  +
push dword ptr [esi+20h]  +
call ds:SetFocus  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push hWnd  +
call ds:GetMenu  +
push 960h  +
push hInstance  +
mov [ebp-8] eax +
call ds:LoadMenuW  +
mov ebx eax +
cmp ebx edi +
jnz loc_10130A9  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_10130A1  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-4] eax +
jmp loc_1013153  +
push offset dword_1005648  +
call ds:SHLWAPI_618  +
test eax eax +
jz loc_10130C5  +
push edi  +
push 9C41h  +
push ebx  +
call ds:DeleteMenu  +
mov eax dword_101E15C +
mov edi ds:CheckMenuItem +
neg eax  +
sbb eax eax +
and eax 8 +
push eax  +
push 961h  +
push ebx  +
call edi  +
mov eax dword_101E160 +
neg eax  +
sbb eax eax +
and eax 8 +
push eax  +
push 961h  +
push ebx  +
call edi  +
mov eax dword_101E164 +
neg eax  +
sbb eax eax +
and eax 8 +
push eax  +
push 962h  +
push ebx  +
call edi  +
mov eax dword_101E168 +
neg eax  +
sbb eax eax +
and eax 8 +
push eax  +
push 963h  +
push ebx  +
call edi  +
test byte ptr dword_101E458 10h +
mov hMenu ebx +
jnz loc_101313B  +
push ebx  +
push hWnd  +
call ds:SetMenu  +
cmp dword ptr [ebp-8] 0 +
jz loc_101314A  +
push dword ptr [ebp-8]  +
call ds:DestroyMenu  +
mov ecx esi +
call sub_1012C0C  +
xor edi edi +
cmp dword_101FDAC edi +
jz loc_10131AB  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_1013168  +
test al al +
jnz loc_10131AB  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_10131AB  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_101FDA0 +
jnz loc_10131AB  +
cmp eax ecx +
jnz loc_10131AB  +
push 4  +
push offset loc_100D5C0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
lea eax [ebp-1] +
lea edi [esi+4] +
push eax  +
mov ecx edi +
mov [ebp+var_1] 0 +
call sub_10128E6  +
test eax eax +
jl loc_10131FD  +
cmp dword ptr [esi+4Ch] 0 +
jz loc_10131E9  +
mov ecx edi +
call sub_1010632  +
and dword ptr [esi+4Ch] 0 +
cmp [ebp+var_1] 0 +
jz loc_10131F6  +
mov ecx esi +
call sub_1012E9A  +
mov ecx esi +
call sub_1012346  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_101321E  +
cmp [ebp+arg_4] 0 +
jz loc_1013227  +
pop ebp  +
jmp ds:lstrcmpiW  +
mov eax [ebp+arg_4] +
neg eax  +
sbb eax eax +
jmp loc_101322A  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 20h +
jz loc_101326F  +
sub eax 60h +
jz loc_101326B  +
sub eax 80h +
jz loc_1013267  +
sub eax 3F00h +
jz loc_1013262  +
sub eax 4000h +
jz loc_101325E  +
xor eax eax +
jmp loc_1013272  +
push 3  +
jmp loc_1013271  +
xor eax eax +
inc eax  +
jmp loc_1013272  +
push 5  +
jmp loc_1013271  +
push 4  +
jmp loc_1013271  +
push 2  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
jz loc_1013296  +
cmp dword ptr [ebp+0Ch] 8 +
jnz loc_10132A7  +
cmp [ebp+10h] eax +
jz loc_1013296  +
push 1  +
jmp loc_1013297  +
push eax  +
push 1  +
push 46Fh  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+0CCh] edi +
jz loc_1013346  +
push offset unk_101F808  +
call ds:RtlEnterCriticalSection  +
mov eax [esi+0CCh] +
mov dword ptr [eax] 1 +
mov eax [esi+0CCh] +
cmp [eax+4] edi +
jz loc_1013339  +
push ebx  +
mov ebx ds:GetProcessHeap +
cmp eax edi +
mov edi ds:HeapFree +
jz loc_1013308  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+0CCh] 0 +
mov eax [esi+0BCh] +
test eax eax +
jz loc_1013321  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi+0BCh] 0 +
add esi 0C4h +
mov eax [esi] +
test eax eax +
jz loc_1013338  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ebx  +
push offset unk_101F808  +
call ds:RtlLeaveCriticalSection  +
jmp loc_1013363  +
add esi 0C4h +
mov eax [esi] +
cmp eax edi +
jz loc_1013363  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push dword ptr [ecx+8]  +
push 0  +
push 400h  +
call ds:OpenProcess  +
mov esi eax +
test esi esi +
jz loc_1013391  +
cmp esi 0FFFFFFFFh +
jnz loc_10133A9  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10133A7  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_10133C1  +
push 0  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push 1Dh  +
push esi  +
call ds:NtQueryInformationProcess  +
push eax  +
call ds:RtlNtStatusToDosError  +
test esi esi +
jz loc_10133D1  +
cmp esi 0FFFFFFFFh +
jz loc_10133D1  +
push esi  +
call ds:CloseHandle  +
xor eax eax +
cmp byte ptr [ebp+var_4] al +
pop esi  +
setnz al  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1013406  +
cmp eax 3 +
jle loc_1013401  +
cmp eax 0Fh +
jz loc_1013401  +
cmp eax 19h +
jle loc_1013406  +
cmp eax 1Eh +
jg loc_1013406  +
xor eax eax +
inc eax  +
jmp loc_1013408  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+258h] +
push edi  +
add eax eax +
xor ebx ebx +
push eax  +
push ebx  +
mov [ebp+var_8] ebx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp+lpMem] edi +
cmp edi ebx +
jnz loc_101344F  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10134F9  +
mov eax [esi+258h] +
add eax eax +
push eax  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_8] +
push eax  +
mov eax [esi+258h] +
mov esi ds:NtQueryInformationProcess +
add eax eax +
push eax  +
push edi  +
push 2Fh  +
push [ebp+arg_0]  +
call esi  +
mov edi ds:RtlNtStatusToDosError +
push eax  +
call edi  +
xor ecx ecx +
cmp eax ecx +
mov ebx 80070000h +
jle loc_1013498  +
and eax 0FFFFh +
or eax ebx +
cmp eax ecx +
mov [ebp+var_4] eax +
jl loc_10134E7  +
mov eax [ebp+var_8] +
and eax 0FFFFFFFEh +
cmp eax 2 +
jbe loc_10134B3  +
mov [ebp+var_4] 80070005h +
jmp loc_10134E7  +
push ecx  +
push 18h  +
lea eax [ebp+var_24] +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call esi  +
push eax  +
call edi  +
test eax eax +
jle loc_10134CE  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10134E7  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
mov ecx [ebp+lpMem] +
mov cx [ecx] +
mov [eax+4] cx +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_10135A4  +
push ebx  +
push esi  +
push 3F1h  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push edi  +
push edi  +
mov ebx eax +
push 1004h  +
push ebx  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jle loc_10135A2  +
push 38h  +
lea eax [ebp+var_3C] +
push 0  +
push eax  +
mov [ebp+lParam] 4 +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push ebx  +
mov [ebp+var_3C] edi +
call esi  +
test eax eax +
jz loc_1013579  +
mov eax [ebp+arg_0] +
cmp [ebp+var_20] eax +
jz loc_1013581  +
inc edi  +
cmp edi [ebp+var_4] +
jge loc_10135A2  +
jmp loc_1013545  +
push 3  +
pop eax  +
mov [ebp+var_6C] eax +
mov [ebp+var_70] eax +
lea eax [ebp+var_7C] +
push eax  +
push edi  +
push 102Bh  +
push ebx  +
call esi  +
push 0  +
push edi  +
push 1013h  +
push ebx  +
call esi  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push 0Dh  +
push 1  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_1] 1 +
call ds:NtSetInformationFile  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
call sub_100DA9D  +
mov esi [ebp+arg_0] +
mov ebx eax +
xor edi edi +
cmp ebx edi +
jl loc_101362C  +
push edi  +
push edi  +
push edi  +
push 1826h  +
push dword ptr [esi+8]  +
push dword ptr [esi]  +
push dword ptr [esi+4]  +
call MiniDumpWriteDump  +
test eax eax +
jz loc_1013616  +
xor ebx ebx +
jmp loc_101362C  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_101362A  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
push dword ptr [esi+4]  +
mov edi ds:CloseHandle +
call edi  +
push dword ptr [esi+8]  +
call edi  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+nResult] +
sub eax 110h +
jz loc_10136F2  +
dec eax  +
jz loc_10136C1  +
dec eax  +
dec eax  +
jnz loc_10136BD  +
push eax  +
push dword_1020610  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_10136BD  +
push uIDEvent  +
push [ebp+hWnd]  +
call ds:KillTimer  +
lea eax [ebp+nResult] +
push eax  +
push dword_1020610  +
call ds:GetExitCodeThread  +
test eax eax +
jnz loc_10136B1  +
call ds:__imp_GetLastError  +
mov [ebp+nResult] eax +
push [ebp+nResult]  +
push [ebp+hWnd]  +
call ds:EndDialog  +
xor eax eax +
jmp loc_1013714  +
mov ecx [ebp+arg_8] +
movzx eax cx +
dec eax  +
dec eax  +
jnz loc_10136BD  +
shr ecx 10h +
cmp ax cx +
jnz loc_10136BD  +
push uIDEvent  +
push [ebp+hWnd]  +
call ds:KillTimer  +
push 4C7h  +
push [ebp+hWnd]  +
call ds:EndDialog  +
jmp loc_1013711  +
mov eax [ebp+arg_C] +
push 0  +
push 1F4h  +
push 64h  +
push [ebp+hWnd]  +
mov dword_1020610 eax +
call ds:SetTimer  +
mov uIDEvent eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 110h +
jz loc_1013753  +
dec eax  +
jnz loc_101374F  +
mov ecx [ebp+arg_8] +
movzx eax cx +
dec eax  +
cmp eax 1 +
ja loc_101374F  +
shr ecx 10h +
xor eax eax +
cmp ax cx +
jnz loc_101374F  +
push eax  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor eax eax +
jmp loc_1013767  +
push [ebp+lpString]  +
push 0C3CEh  +
push [ebp+hDlg]  +
call ds:SetDlgItemTextW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 24Ch +
mov eax [ecx] +
jmp loc_1013789  +
mov edx [eax+8] +
cmp edx [ebp+arg_0] +
jz loc_1013794  +
mov eax [eax] +
cmp eax ecx +
jnz loc_101377F  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_1013790  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx ds:GetLogicalProcessorInformationEx +
push esi  +
push edi  +
mov [ebp+var_10] ecx +
xor eax eax +
lea ecx [ebp+dwBytes] +
push ecx  +
push eax  +
mov esi 0FFFFh +
push esi  +
mov [ebp+lpMem] eax +
mov [ebp+dwBytes] eax +
call ebx  +
mov edi 80070000h +
test eax eax +
jnz loc_1013837  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10137E2  +
and eax esi +
or eax edi +
mov [ebp+var_4] eax +
cmp eax 8007007Ah +
jz loc_10137F5  +
test eax eax +
jge loc_1013837  +
jmp loc_1013A11  +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_1013950  +
lea ecx [ebp+dwBytes] +
push ecx  +
push eax  +
push esi  +
call ebx  +
test eax eax +
jnz loc_1013837  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101382C  +
and eax esi +
or eax edi +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10139F9  +
mov eax [ebp+var_10] +
add eax 25Ch +
push eax  +
call ds:GetNumaHighestNodeNumber  +
test eax eax +
jz loc_1013850  +
and [ebp+var_4] 0 +
jmp loc_1013869  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101385E  +
and eax esi +
or eax edi +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10139F9  +
mov esi [ebp+lpMem] +
mov edi [ebp+dwBytes] +
lea eax [edi+esi] +
mov ebx esi +
cmp esi eax +
jnb loc_101394B  +
cmp dword ptr [ebx] 4 +
jnz loc_101393A  +
movzx ecx word ptr [ebx+0Ah] +
mov eax [ebp+var_10] +
add [eax+258h] ecx +
and [ebp+var_14] 0 +
xor eax eax +
cmp ax [ebx+0Ah] +
jnb loc_101393A  +
push 14h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+var_18] esi +
test esi esi +
jz loc_1013950  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+var_10] +
lea eax [edi+24Ch] +
mov ecx [eax+4] +
mov [esi] eax +
mov [esi+4] ecx +
mov [ecx] esi +
mov [eax+4] esi +
movzx eax word ptr [ebp+var_14] +
mov [esi+8] eax +
imul eax eax +
movzx eax byte ptr [eax+ebx+21h] +
mov [esi+0Ch] eax +
shl eax 3 +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi+10h] eax +
test eax eax +
jz loc_1013950  +
mov ecx [esi+0Ch] +
shl ecx 3 +
push ecx  +
push 0  +
push eax  +
call memset  +
mov eax [esi+0Ch] +
add [edi+254h] eax +
add esp 0Ch +
inc [ebp+var_14]  +
mov ax word ptr [ebp+var_14] +
cmp ax [ebx+0Ah] +
jb loc_10138A2  +
mov edi [ebp+dwBytes] +
mov esi [ebp+lpMem] +
add ebx [ebx+4] +
lea eax [edi+esi] +
cmp ebx eax +
jb loc_101387C  +
lea eax [edi+esi] +
jmp loc_10139AE  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10139F9  +
cmp dword ptr [esi] 1 +
jnz loc_10139A6  +
mov ecx [ebp+var_10] +
lea eax [ebp+var_18] +
push eax  +
movzx eax word ptr [esi+24h] +
push eax  +
call sub_1013770  +
mov [ebp+var_4] eax +
cmp eax 1 +
jz loc_10139A6  +
mov eax [ebp+var_18] +
xor edx edx +
cmp [eax+0Ch] edx +
jbe loc_10139A6  +
xor ecx ecx +
xor edi edi +
inc edi  +
shl edi cl +
test [esi+20h] edi +
jz loc_101399A  +
mov edi [eax+10h] +
mov ebx [esi+8] +
mov [edi+ecx*8+4] ebx +
inc edx  +
movzx ecx dx +
cmp ecx [eax+0Ch] +
jb loc_1013986  +
mov edi [ebp+dwBytes] +
mov eax [ebp+lpMem] +
add esi [esi+4] +
add eax edi +
cmp esi eax +
jb loc_101395C  +
mov ecx [ebp+var_10] +
add ecx 24Ch +
mov eax [ecx] +
mov [ebp+var_18] ecx +
jmp loc_10139F5  +
xor esi esi +
or edi 0FFFFFFFFh +
xor ebx ebx +
cmp [eax+0Ch] esi +
jbe loc_10139F3  +
xor ecx ecx +
mov edx [eax+10h] +
lea ecx [edx+ecx*8] +
mov edx [ecx+4] +
cmp edx edi +
jz loc_10139E1  +
mov edi edx +
xor esi esi +
movzx edx si +
inc ebx  +
mov [ecx] edx +
movzx ecx bx +
inc esi  +
cmp ecx [eax+0Ch] +
jb loc_10139D0  +
mov ecx [ebp+var_18] +
mov eax [eax] +
cmp eax ecx +
jnz loc_10139C2  +
cmp [ebp+lpMem] 0 +
jz loc_1013A11  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:GetProcessHeap +
push edi  +
mov eax 47E0h +
push eax  +
push 0  +
mov ebx eax +
call esi  +
mov edi ds:HeapAlloc +
jmp loc_1013A86  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
push [ebp+lpMem]  +
push 5  +
call ds:NtQuerySystemInformation  +
mov ebx eax +
test ebx ebx +
jz loc_1013A6A  +
push [ebp+lpMem]  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
and [ebp+lpMem] 0 +
cmp ebx 0C0000004h +
jnz loc_1013A94  +
mov eax [ebp+var_8] +
mov ecx eax +
shr ecx 4 +
lea ebx [ecx+eax+2000h] +
push ebx  +
push 0  +
call esi  +
push eax  +
call edi  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_1013A42  +
xor eax eax +
jmp loc_1013A9B  +
test ebx ebx +
jl loc_1013A90  +
mov eax [ebp+lpMem] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C4h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hDlg] +
push ebx  +
push esi  +
push edi  +
push 0F5h  +
push eax  +
call ds:GetDlgItem  +
mov edi eax +
lea eax [ebp+Rect] +
push eax  +
xor ebx ebx +
push edi  +
mov [ebp+hWnd] edi +
mov [ebp+var_10C] ebx +
call ds:GetClientRect  +
push 2  +
call ds:GetSystemMetrics  +
mov esi ds:SendMessageW +
sub [ebp+Rect.right] eax +
push ebx  +
push ebx  +
push 0Bh  +
push edi  +
call esi  +
push ebx  +
push ebx  +
push 1009h  +
push edi  +
call esi  +
push ebx  +
push ebx  +
push 101Ch  +
push edi  +
call esi  +
test eax eax +
jnz loc_1013B0F  +
push 0Ah  +
pop ecx  +
lea edi [ebp+var_1C0] +
stos   +
mov eax [ebp+Rect.right] +
mov [ebp+var_1BC] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 1061h  +
push [ebp+hWnd]  +
mov [ebp+lParam] 2 +
call esi  +
xor edi edi +
cmp edi ebx +
jz loc_1013C59  +
cmp dword_101E468 ebx +
jnz loc_1013B77  +
cmp edi 2 +
jz loc_1013C59  +
cmp edi 3 +
jz loc_1013C59  +
mov eax [ebp+var_10C] +
jmp loc_1013B8A  +
cmp ecx edi +
jge loc_1013B96  +
inc eax  +
mov [ebp+var_10C] eax +
mov ecx dword_101E178[eax*4] +
cmp ecx 0FFFFFFFFh +
jnz loc_1013B7F  +
cmp dword_101E178[eax*4] edi +
jnz loc_1013BB2  +
inc eax  +
mov [ebp+var_110] 1 +
mov [ebp+var_10C] eax +
jmp loc_1013BB8  +
mov [ebp+var_110] ebx +
push 80h  +
lea eax [ebp+Buffer] +
push eax  +
push ds:dword_1005F44[edi*8]  +
push hInstance  +
call ds:LoadStringW  +
push 38h  +
lea eax [ebp+var_194] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+Buffer] +
mov [ebp+var_184] eax +
lea eax [ebp+var_198] +
push eax  +
push ebx  +
push 104Dh  +
push [ebp+hWnd]  +
mov [ebp+var_198] 5 +
mov [ebp+var_194] edi +
mov [ebp+var_178] edi +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1013C59  +
xor ecx ecx +
cmp [ebp+var_110] ebx +
mov [ebp+var_14C] 0F000h +
setnz cl  +
inc ecx  +
shl ecx 0Ch +
mov [ebp+var_150] ecx +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
push 102Bh  +
push [ebp+hWnd]  +
call esi  +
inc edi  +
cmp edi 1Fh +
jl loc_1013B55  +
push ebx  +
push 1  +
push 0Bh  +
push [ebp+hWnd]  +
call esi  +
push 3  +
pop eax  +
mov [ebp+var_14C] eax +
mov [ebp+var_150] eax +
lea eax [ebp+var_15C] +
push eax  +
push ebx  +
push 102Bh  +
push [ebp+hWnd]  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1013CD4  +
test [ebp+arg_8] 1000h +
jz loc_1013CD4  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1013D1C  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1013D04  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1013D1C  +
test esi esi +
jbe loc_1013D35  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1013D35  +
test [ebp+arg_8] 800h +
jz loc_1013D35  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1013D5F  +
mov eax [ebp+arg_0] +
jb loc_1013D56  +
cmp eax 0FFFFFFFFh +
ja loc_1013D5F  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1013D6A  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1013D8D  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1013D98  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push [ebp+dwFlags]  +
push [ebp+hHeap]  +
call ds:HeapAlloc  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+dwBytes] +
and dword ptr [esi] 0 +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+arg_8] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1013D41  +
test eax eax +
jl loc_1013E03  +
push esi  +
push [ebp+dwBytes]  +
push [ebp+dwFlags]  +
push [ebp+hHeap]  +
call sub_1013DA1  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_C] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+nSize]  +
mov eax 400h +
push [ebp+lpBuffer]  +
push eax  +
push 0  +
push [ebp+lpSource]  +
push eax  +
call ds:FormatMessageW  +
test eax eax +
jbe loc_1013E3D  +
xor eax eax +
leave   +
retn   +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_1013E55  +
jle locret_1013E5A  +
and eax 0FFFFh +
or eax 80070000h +
leave   +
retn   +
mov eax 80004005h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
push 3F1h  +
push dword ptr [edi+4]  +
mov [ebp+var_8] edi +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push 2  +
push 0FFFFFFFFh  +
mov ebx eax +
push 100Ch  +
push ebx  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1014057  +
mov ecx 0FFFFh +
mov edx ecx +
cmp dx word ptr [ebp+arg_0] +
jnz loc_1013EDE  +
cmp cx word ptr [ebp+arg_4] +
jnz loc_1013EDE  +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
push 100Eh  +
push ebx  +
mov [ebp+Points.x] 1 +
call esi  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push 0  +
push ebx  +
call ds:MapWindowPoints  +
mov eax [ebp+var_10] +
mov [ebp+arg_0] eax +
mov eax [ebp+var_C] +
mov [ebp+arg_4] eax +
mov ecx edi +
call sub_1002603  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1014057  +
push 6Fh  +
push hInstance  +
call sub_100DC14  +
mov ebx eax +
test ebx ebx +
jz loc_1014057  +
cmp dword ptr [edi+3Ch] 0 +
mov esi ds:EnableMenuItem +
jz loc_1013F1F  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+9Ch] 0 +
jz loc_1013F29  +
push 3  +
push 9C5Bh  +
push ebx  +
call esi  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+9Ch] 0 +
mov edi 9C62h +
jz loc_1013F72  +
push 3  +
push 9C5Dh  +
push ebx  +
call esi  +
push 3  +
push 9C5Eh  +
push ebx  +
call esi  +
push 3  +
push 9C60h  +
push ebx  +
call esi  +
push 3  +
push 9C61h  +
push ebx  +
call esi  +
push 3  +
push 9C5Fh  +
push ebx  +
call esi  +
push 3  +
push edi  +
push ebx  +
call esi  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+254h] 1 +
jz loc_1013F8A  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+9Ch] 0 +
jz loc_1013F98  +
push 0  +
push 9C77h  +
push ebx  +
call ds:DeleteMenu  +
mov eax [ebp+var_4] +
mov eax [eax+50h] +
cmp eax 40h +
jnz loc_1013FA7  +
mov eax edi +
jmp loc_1013FE2  +
cmp eax 4000h +
jnz loc_1013FB5  +
mov eax 9C61h +
jmp loc_1013FE2  +
cmp eax 20h +
jnz loc_1013FC1  +
mov eax 9C60h +
jmp loc_1013FE2  +
cmp eax 8000h +
jnz loc_1013FCF  +
mov eax 9C5Eh +
jmp loc_1013FE2  +
xor ecx ecx +
cmp eax 80h +
setz cl  +
lea ecx [ecx+ecx+9C5Dh] +
mov eax ecx +
push 0  +
push eax  +
push edi  +
push 9C5Dh  +
push ebx  +
call ds:CheckMenuRadioItem  +
mov eax [ebp+var_4] +
mov eax [eax+0B4h] +
xor edi edi +
inc edi  +
test eax eax +
jl loc_1014025  +
cmp eax edi +
jle loc_101401B  +
cmp eax 3 +
jnz loc_1014025  +
push 8  +
push 9C86h  +
push ebx  +
call ds:CheckMenuItem  +
jmp loc_1014025  +
push 3  +
push 9C86h  +
push ebx  +
call esi  +
mov esi [ebp+var_8] +
push 0  +
mov [esi+38h] edi +
mov dword_101FDBC edi +
push dword ptr [esi+4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
push ebx  +
call ds:TrackPopupMenuEx  +
and dword_101FDBC 0 +
and dword ptr [esi+38h] 0 +
push ebx  +
call ds:DestroyMenu  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
xor esi esi +
push edi  +
xor edi edi +
mov [ebp+var_4] esi +
cmp ebx esi +
jnz loc_1014083  +
mov [ebp+var_4] 80070057h +
jmp loc_10140C8  +
call sub_1013A1E  +
mov ecx eax +
mov edx [ecx+44h] +
cmp edx [ebp+arg_0] +
jnz loc_10140A2  +
mov edx [ebp+arg_4] +
cmp edx [ecx+20h] +
jnz loc_10140A2  +
mov edx [ebp+arg_8] +
cmp edx [ecx+24h] +
jz loc_10140AF  +
mov ecx [ecx] +
test ecx ecx +
jz loc_10140B2  +
add esi ecx +
lea ecx [esi+eax] +
jmp loc_101408A  +
xor edi edi +
inc edi  +
mov [ebx] edi +
test eax eax +
jz loc_10140C8  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push [ebp+dwProcessId]  +
mov esi [ebp+arg_C] +
xor eax eax +
and [ebp+arg_C] eax +
push eax  +
push 1000h  +
mov [esi] ax +
mov ebx 80004005h +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
test eax eax +
jz loc_101414F  +
mov eax [ebp+arg_10] +
mov [ebp+arg_10] eax +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+dwProcessId]  +
call sub_1014063  +
mov ebx eax +
test ebx ebx +
jl loc_1014141  +
cmp [ebp+arg_C] 0 +
jz loc_1014141  +
lea eax [ebp+arg_10] +
push eax  +
push esi  +
push 0  +
push [ebp+hObject]  +
call ds:QueryFullProcessImageNameW  +
test eax eax +
jz loc_1014146  +
xor ebx ebx +
jmp loc_1014146  +
mov ebx 80070006h +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
call sub_101ABDD  +
push 104h  +
mov ebx eax +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+dwProcessId]  +
call sub_10140D7  +
mov esi eax +
xor edi edi +
cmp esi edi +
jl loc_10141D5  +
push edi  +
push edi  +
lea eax [ebp+pv] +
push eax  +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
call ds:SHParseDisplayName  +
mov esi eax +
cmp esi edi +
jl loc_10141D5  +
push edi  +
push edi  +
push edi  +
push [ebp+pv]  +
call ds:SHOpenFolderAndSelectItems  +
push [ebp+pv]  +
call CoTaskMemFree  +
push ebx  +
call sub_101ABFD  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 248h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+dwProcessId]  +
call sub_10140D7  +
mov esi eax +
test esi esi +
jl loc_1014293  +
push 38h  +
lea eax [ebp+ExecInfo.fMask] +
push 0  +
push eax  +
call memset  +
lea eax [ebp+var_20C] +
mov [ebp+ExecInfo.lpFile] eax +
mov eax hWnd +
mov [ebp+ExecInfo.hwnd] eax +
add esp 0Ch +
lea eax [ebp+ExecInfo] +
push eax  +
mov [ebp+ExecInfo.cbSize] 3Ch +
mov [ebp+ExecInfo.fMask] 400Ch +
mov [ebp+ExecInfo.lpVerb] offset aProperties +
call ds:ShellExecuteExW  +
push 0  +
push 0  +
push 86h  +
push hWnd  +
call ds:SendMessageW  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 38h  +
mov [ebp+var_214] eax +
lea eax [ebp+ExecInfo.fMask] +
push edi  +
push eax  +
mov [ebp+ExecInfo.cbSize] edi +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+Caption] +
push eax  +
push edi  +
mov [ebp+hMem] edi +
call ds:GetModuleFileNameW  +
mov esi 0FFFFh +
mov ebx 80070000h +
test eax eax +
jnz loc_101433B  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_101432F  +
and eax esi +
or eax ebx +
mov edi eax +
test edi edi +
jl loc_1014438  +
xor edi edi +
mov [ebp+ExecInfo.cbSize] 3Ch +
mov [ebp+ExecInfo.fMask] 400h +
mov [ebp+ExecInfo.lpVerb] offset aRunas +
cmp [ebp+arg_4] edi +
jnz loc_1014368  +
mov [ebp+ExecInfo.lpVerb] offset aOpen +
lea eax [ebp+Caption] +
mov [ebp+ExecInfo.lpFile] eax +
mov eax [ebp+var_214] +
mov [ebp+ExecInfo.hwnd] eax +
mov eax hMutex +
mov [ebp+ExecInfo.lpParameters] offset a1 +
mov [ebp+ExecInfo.nShow] 1 +
cmp eax edi +
jz loc_10143AA  +
push eax  +
call ds:CloseHandle  +
mov hMutex edi +
lea eax [ebp+ExecInfo] +
push eax  +
call ds:ShellExecuteExW  +
test eax eax +
jnz loc_1014438  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_10143C9  +
and eax esi +
or eax ebx +
mov edi eax +
test edi edi +
jge loc_1014438  +
push 0  +
call sub_100DE95  +
mov ecx edi +
and ecx esi +
mov eax 4ECh +
cmp ecx eax +
jnz loc_1014438  +
xor edi edi +
push edi  +
push edi  +
lea ecx [ebp+hMem] +
push ecx  +
push edi  +
push eax  +
push edi  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
ja loc_101441D  +
call ds:__imp_GetLastError  +
cmp eax edi +
jz loc_1014412  +
jle loc_1014417  +
and eax esi +
or eax ebx +
jmp loc_1014417  +
mov eax 80004005h +
mov edi eax +
test eax eax +
jl loc_1014438  +
push 10h  +
lea eax [ebp+Caption] +
push eax  +
push [ebp+hMem]  +
push hWnd  +
call ds:MessageBoxW  +
cmp [ebp+hMem] 0 +
jz loc_101444D  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp dword_101E178 0FFFFFFFFh +
push edi  +
jz loc_1014499  +
mov ecx offset dword_101E178 +
cmp [ecx] esi +
jge loc_1014499  +
inc eax  +
lea ecx dword_101E178[eax*4] +
cmp dword ptr [ecx] 0FFFFFFFFh +
jnz loc_1014488  +
cmp [ebp+arg_4] 0 +
jz loc_1014528  +
mov ebx eax +
shl ebx 2 +
lea edi dword_101E178[ebx] +
cmp [edi] esi +
jz loc_101456F  +
lea ebx dword_101E1F8[ebx] +
mov eax offset unk_101E274 +
sub eax ebx +
jz loc_10144D4  +
push eax  +
lea eax [ebx+4] +
push ebx  +
push eax  +
call ds:memmove  +
add esp 0Ch +
mov eax offset unk_101E1F4 +
sub eax edi +
jz loc_10144EC  +
push eax  +
lea eax [edi+4] +
push edi  +
push eax  +
call ds:memmove  +
add esp 0Ch +
cmp dword_101FDC0 0 +
jz loc_101450D  +
push 60h  +
push nNumerator  +
push dword_101F8A4[esi*8]  +
call ds:MulDiv  +
cwde   +
jmp loc_1014514  +
mov eax dword_101F8A4[esi*8] +
mov [ebx] eax +
push esi  +
mov [edi] esi +
inc dword_101E2F8  +
push 1  +
call sub_101ACC4  +
jmp loc_101456F  +
shl eax 2 +
lea edi dword_101E178[eax] +
cmp [edi] esi +
jnz loc_101456F  +
mov esi ds:memmove +
lea eax dword_101E1F8[eax] +
mov ecx offset unk_101E274 +
sub ecx eax +
jz loc_1014555  +
push ecx  +
lea ecx [eax+4] +
push ecx  +
push eax  +
call esi  +
add esp 0Ch +
mov eax offset unk_101E1F4 +
sub eax edi +
jz loc_1014569  +
push eax  +
lea eax [edi+4] +
push eax  +
push edi  +
call esi  +
add esp 0Ch +
dec dword_101E2F8  +
mov eax dword_101E2F8 +
or dword_101E178[eax*4] 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
push 0F5h  +
push [ebp+hWnd]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
xor ebx ebx +
push ebx  +
push ebx  +
mov edi 1004h +
push edi  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
test eax eax +
jle loc_1014615  +
push 38h  +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push [ebp+hWnd]  +
mov [ebp+lParam] 4 +
mov [ebp+var_38] ebx +
call esi  +
test eax eax +
jz loc_1014606  +
push 0F000h  +
push ebx  +
push 102Ch  +
push [ebp+hWnd]  +
call esi  +
shr eax 0Ch +
dec eax  +
push eax  +
push [ebp+var_1C]  +
call sub_101446D  +
push 0  +
push 0  +
push edi  +
push [ebp+hWnd]  +
inc ebx  +
call esi  +
cmp ebx eax +
jl loc_10145BB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_18] +
xor ecx ecx +
and eax 100h +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_8] eax +
mov eax 7FFFFFFFh +
jz loc_101464C  +
cmp [ebp+arg_0] ecx +
jnz loc_1014652  +
test edi edi +
jz loc_1014652  +
jmp loc_1014656  +
xor ecx ecx +
test edi edi +
jz loc_1014656  +
cmp edi eax +
jbe loc_101465B  +
mov ecx 80070057h +
mov esi ecx +
test ecx ecx +
jl loc_10147A0  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_C] +
push ebx  +
mov [ebp+var_4] ecx +
mov ebx edi +
xor ecx ecx +
mov [ebp+arg_4] ebx +
cmp edx eax +
jb loc_1014681  +
mov ecx 80070057h +
jmp loc_1014694  +
cmp [ebp+var_8] ecx +
jz loc_1014694  +
cmp [ebp+arg_8] ecx +
jnz loc_1014694  +
mov [ebp+arg_8] offset WindowName +
xor edx edx +
xor eax eax +
cmp ecx eax +
mov esi ecx +
jl loc_1014746  +
test [ebp+arg_18] 0FFFFE000h +
jz loc_10146C1  +
mov esi 80070057h +
cmp edi eax +
jz loc_1014756  +
mov ecx [ebp+arg_0] +
mov [ecx] ax +
jmp loc_1014756  +
cmp edi eax +
jnz loc_10146E8  +
cmp edx eax +
jz loc_1014752  +
mov ecx [ebp+arg_8] +
cmp [ecx] ax +
jz loc_1014752  +
cmp [ebp+arg_0] eax +
jnz loc_10146E1  +
mov esi 80070057h +
jmp loc_1014756  +
mov esi 8007007Ah +
jmp loc_1014752  +
mov ebx [ebp+arg_0] +
mov [ebp+arg_4] eax +
push edx  +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
mov ecx ebx +
call sub_1001A57  +
mov esi eax +
mov eax [ebp+arg_4] +
lea ecx [ebx+eax*2] +
mov ebx edi +
sub ebx eax +
mov [ebp+var_4] ecx +
mov [ebp+arg_4] ebx +
test esi esi +
jl loc_1014756  +
test [ebp+arg_18] 200h +
jz loc_1014752  +
cmp ebx 1 +
jbe loc_1014752  +
lea eax [ebx+ebx] +
cmp eax 2 +
jbe loc_1014752  +
add eax 0FFFFFFFEh +
push eax  +
mov eax [ebp+arg_18] +
and eax 0FFh +
push eax  +
add ecx 2 +
push ecx  +
call memset  +
add esp 0Ch +
jmp loc_1014752  +
cmp edi eax +
jz loc_1014752  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
test esi esi +
jge loc_101478A  +
test [ebp+arg_18] 1C00h +
jz loc_101477E  +
test edi edi +
jz loc_101477E  +
push [ebp+arg_18]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [edi+edi] +
mov edi [ebp+arg_0] +
push eax  +
lea ebx [ebp+arg_4] +
xor ecx ecx +
call sub_1013CAA  +
mov ebx [ebp+arg_4] +
test esi esi +
jge loc_101478A  +
cmp esi 8007007Ah +
jnz loc_101479F  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1014796  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_101479F  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_14] +
and dword ptr [esi] 0 +
push edi  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1013D73  +
mov edi eax +
test edi edi +
jl loc_10147FD  +
push esi  +
push [ebp+arg_14]  +
push [ebp+dwFlags]  +
push [ebp+hHeap]  +
call sub_1013DD1  +
mov edi eax +
test edi edi +
jl loc_10147FD  +
push 300h  +
push 0  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_14]  +
push dword ptr [esi]  +
call sub_1014621  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A7Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 5Ch  +
lea eax [ebp+var_A78] +
push ebx  +
push eax  +
mov edi ecx +
mov [ebp+var_A10] ebx +
mov [ebp+var_A7C] ebx +
call memset  +
movzx eax [ebp+arg_C] +
add esp 0Ch +
push 104h  +
mov [ebp+var_A18] eax +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
xor esi esi +
push hInstance  +
inc esi  +
mov [ebp+var_A1C] esi +
mov [ebp+var_A14] ebx +
call ds:LoadStringW  +
test eax eax +
jnz loc_1014884  +
push 7  +
pop eax  +
jmp loc_1014969  +
lea eax [edi+44h] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_A0C] +
push 400h  +
push eax  +
call sub_100196B  +
add esp 10h +
test eax eax +
jl loc_101487C  +
mov eax hInstance +
mov [ebp+var_A74] eax +
mov eax [edi+4] +
mov [ebp+var_A78] eax +
movzx eax [ebp+arg_0] +
mov [ebp+var_A68] eax +
lea eax [ebp+var_A0C] +
mov [ebp+var_A60] eax +
movzx eax [ebp+arg_8] +
mov [ebp+var_A5C] eax +
lea eax [ebp+var_A1C] +
mov [ebp+var_A7C] 60h +
mov [ebp+var_A6C] 8 +
mov [ebp+var_A54] eax +
mov [ebp+var_A58] esi +
mov [ebp+var_A50] esi +
cmp [ebp+arg_10] ebx +
jz loc_1014920  +
movzx eax word ptr [ebp+arg_10] +
mov [ebp+var_A40] eax +
mov [ebp+var_A28] offset loc_101327B +
mov esi dword_101E458 +
or dword_101E458 4 +
lea eax [ebp+var_A14] +
push eax  +
push ebx  +
lea eax [ebp+var_A10] +
push eax  +
lea eax [ebp+var_A7C] +
shl esi 1Dh +
push eax  +
sar esi 1Fh +
call ds:COMCTL32_345  +
mov eax esi +
shl eax 2 +
xor eax dword_101E458 +
and eax 4 +
xor dword_101E458 eax +
mov eax [ebp+var_A10] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0F0h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_D0] ebx +
cmp esi ebx +
jnz loc_10149AF  +
mov eax 80004005h +
jmp loc_1014D36  +
test byte ptr [esi] 1 +
push edi  +
jz loc_1014D2F  +
mov ecx [esi+20h] +
mov eax [esi+8] +
mov eax dword_101E178[eax*4] +
cmp [ecx+9Ch] ebx +
jz loc_10149FD  +
cmp eax ebx +
jz loc_10149FD  +
cmp eax 0Fh +
jz loc_10149FD  +
cmp eax 11h +
jz loc_10149FD  +
cmp eax 5 +
jz loc_10149FD  +
cmp eax 2 +
jz loc_10149FD  +
cmp eax 3 +
jz loc_10149FD  +
cmp eax 4 +
jz loc_10149FD  +
mov eax [esi+14h] +
xor ecx ecx +
mov [eax] cx +
jmp loc_1014D2F  +
cmp eax 1Eh +
ja loc_1014D2F  +
jmp ds:off_1014D46[eax*4]  +
push dword ptr [ecx+8]  +
push offset aD_0  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
call sub_100196B  +
add esp 10h +
jmp loc_1014D29  +
mov ecx [ecx+0Ch] +
jmp loc_1014D19  +
push dword ptr [ecx+10h]  +
jmp loc_1014A10  +
movzx eax byte ptr [ecx+15h] +
push eax  +
push offset a02d  +
jmp loc_1014A15  +
push dword ptr [ecx+98h]  +
jmp loc_1014D1E  +
xor eax eax +
mov [ebp+Time.wYear] ax +
lea edi [ebp+Time.wMonth] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_E0] +
push eax  +
add ecx 20h +
push ecx  +
call ds:RtlTimeToElapsedTimeFields  +
mov ax [ebp+var_DA] +
push dword ptr [esi+18h]  +
mov [ebp+Time.wHour] ax +
mov ax [ebp+var_D8] +
push dword ptr [esi+14h]  +
mov [ebp+Time.wMinute] ax +
mov ax [ebp+var_D6] +
mov [ebp+Time.wSecond] ax +
mov ax [ebp+var_D4] +
push ebx  +
mov [ebp+Time.wMilliseconds] ax +
lea eax [ebp+Time] +
push eax  +
push 0Ch  +
mov ebx 400h +
push ebx  +
call ds:GetTimeFormatW  +
xor eax eax +
cmp ax [ebp+var_DC] +
jz loc_1014D2F  +
mov edi offset LCData +
cmp ax LCData +
jnz loc_1014AEE  +
push 4  +
push edi  +
push 1Eh  +
push ebx  +
call ds:GetLocaleInfoW  +
push edi  +
push dword ptr [esi+14h]  +
call ds:StrStrW  +
test eax eax +
jz loc_1014D2F  +
movsx ecx [ebp+var_DA] +
push eax  +
movsx eax [ebp+var_DC] +
imul eax eax +
add eax ecx +
push eax  +
push offset aUS  +
lea eax [ebp+var_CC] +
push 64h  +
push eax  +
call sub_100196B  +
add esp 14h +
mov [ebp+var_D0] eax +
test eax eax +
jl loc_1014D2F  +
lea eax [ebp+var_CC] +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
jmp loc_1014D24  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+30h]  +
call sub_1003C95  +
jmp loc_1014D2F  +
push dword ptr [esi+18h]  +
mov eax [ecx+34h] +
push dword ptr [esi+14h]  +
cdq   +
push edx  +
push eax  +
jmp loc_1014B55  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+0B0h]  +
jmp loc_1014B55  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+38h]  +
jmp loc_1014B55  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+3Ch]  +
call sub_1003D11  +
jmp loc_1014D2F  +
push dword ptr [esi+18h]  +
mov eax [ecx+40h] +
push dword ptr [esi+14h]  +
cdq   +
push edx  +
push eax  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+44h]  +
jmp loc_1014B55  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+48h]  +
jmp loc_1014B55  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+4Ch]  +
jmp loc_1014B55  +
mov ecx [ecx+50h] +
sub ecx 20h +
jz loc_1014C22  +
sub ecx 20h +
jz loc_1014C1B  +
sub ecx 40h +
jz loc_1014C14  +
sub ecx 80h +
jz loc_1014C0D  +
sub ecx 3F00h +
jz loc_1014C06  +
sub ecx 4000h +
jz loc_1014BFF  +
mov eax offset unk_101F0D0 +
jmp loc_1014C27  +
mov eax offset unk_101F050 +
jmp loc_1014C27  +
mov eax offset unk_101EFD0 +
jmp loc_1014C27  +
mov eax offset unk_101F2D0 +
jmp loc_1014C27  +
mov eax offset unk_101F1D0 +
jmp loc_1014C27  +
mov eax offset unk_101F150 +
jmp loc_1014C27  +
mov eax offset unk_101F250 +
push eax  +
jmp loc_1014D1E  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+54h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+58h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+60h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push ebx  +
push dword ptr [ecx+5Ch]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [ecx+6Ch]  +
push dword ptr [ecx+68h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [ecx+74h]  +
push dword ptr [ecx+70h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [ecx+7Ch]  +
push dword ptr [ecx+78h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [ecx+84h]  +
push dword ptr [ecx+80h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [ecx+8Ch]  +
push dword ptr [ecx+88h]  +
jmp loc_1014B92  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [ecx+94h]  +
push dword ptr [ecx+90h]  +
jmp loc_1014B92  +
mov ecx [ecx+0BCh] +
cmp ecx ebx +
jz loc_1014D2F  +
mov [esi+14h] ecx +
jmp loc_1014D2F  +
mov eax [ecx+0C0h] +
mov [esi+14h] eax +
jmp loc_1014D2F  +
mov eax [ecx+0B4h] +
shl eax 7 +
add eax offset word_101F4B8 +
jmp loc_1014CF6  +
mov eax [ecx+0B8h] +
jmp loc_1014D01  +
mov ecx [ecx+0C4h] +
cmp ecx ebx +
jz loc_1014D2F  +
push ecx  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
call sub_1001A1B  +
mov [ebp+var_D0] eax +
mov eax [ebp+var_D0] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 49Ch +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 3Ch  +
xor ebx ebx +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
mov [ebp+var_418] ecx +
call memset  +
add esp 0Ch +
mov edi 104h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 9CC5h  +
push hInstance  +
mov [ebp+lParam] 1 +
call ds:LoadStringW  +
push 43Bh  +
lea eax [ebp+Buffer] +
push esi  +
mov [ebp+var_45C] ebx +
mov [ebp+var_44C] eax +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push ebx  +
push ebx  +
push 1009h  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 104Dh  +
push [ebp+hWnd]  +
call esi  +
mov ecx [ebp+var_418] +
mov [ebp+wParam] eax +
lea eax [ebp+var_418] +
push eax  +
push [ebp+arg_8]  +
call sub_1013770  +
cmp eax ebx +
mov [ebp+var_424] eax +
jl loc_1015026  +
cmp eax 1 +
jz loc_1015026  +
mov eax [ebp+arg_4] +
movzx ecx word ptr [eax+4] +
mov ebx [ebp+var_418] +
cmp ecx [ebx+8] +
jnz loc_1014F0B  +
mov ecx [ebx+0Ch] +
xor edx edx +
inc edx  +
shl edx cl +
dec edx  +
cmp [eax] edx +
jnz loc_1014F0B  +
lea eax [ebp+var_49C] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_48C] 0F000h +
push 102Bh  +
push [ebp+hWnd]  +
mov [ebp+var_490] 2000h +
call esi  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+14h] 0 +
push edi  +
lea eax [ebp+Source] +
push eax  +
jz loc_1014F20  +
push 9D0Eh  +
jmp loc_1014F25  +
push 9CC4h  +
push hInstance  +
call ds:LoadStringW  +
xor edi edi +
cmp [ebx+0Ch] edi +
jbe loc_1015026  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+14h] 0 +
mov eax [ebx+10h] +
jz loc_1014F6D  +
lea eax [eax+edi*8] +
push dword ptr [eax]  +
push dword ptr [eax+4]  +
lea eax [ebp+Source] +
push eax  +
lea eax [ebp+Buffer] +
push 104h  +
push eax  +
call sub_1013E0D  +
add esp 14h +
jmp loc_1014F8B  +
push dword ptr [eax+edi*8]  +
lea eax [ebp+Source] +
push eax  +
lea eax [ebp+Buffer] +
push 104h  +
push eax  +
call sub_100196B  +
add esp 10h +
lea eax [edi+1] +
mov [ebp+var_418] eax +
mov [ebp+var_45C] eax +
lea eax [ebp+Buffer] +
mov [ebp+var_44C] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Dh  +
push [ebp+hWnd]  +
call esi  +
mov [ebp+wParam] eax +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax+4] +
cmp eax [ebx+8] +
jnz loc_1015017  +
xor eax eax +
inc eax  +
xor edx edx +
mov ecx edi +
call __allshl  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
xor edi edi +
and eax ecx +
and edx edi +
or eax edx +
jz loc_1015017  +
lea eax [ebp+var_49C] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_48C] 0F000h +
push 102Bh  +
push [ebp+hWnd]  +
mov [ebp+var_490] 2000h +
call esi  +
mov edi [ebp+var_418] +
cmp edi [ebx+0Ch] +
jb loc_1014F3C  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_424] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4A0h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
sub eax 4Eh +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+hDlg] +
push edi  +
mov [ebp+bEnable] esi +
jz loc_1015358  +
sub eax 0C2h +
jz loc_1015195  +
dec eax  +
jnz loc_101553A  +
movzx eax word ptr [ebp+arg_8] +
dec eax  +
mov edi ds:GetDlgItem +
jz loc_10150A6  +
dec eax  +
jnz loc_1015156  +
push 2  +
push esi  +
call ds:EndDialog  +
jmp loc_1015156  +
push 43Bh  +
push esi  +
call edi  +
push 0  +
push 0  +
push 147h  +
push 1BDh  +
push esi  +
mov [ebp+hWnd] eax +
call edi  +
push eax  +
call ds:SendMessageW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_10150D5  +
xor ebx ebx +
mov esi dword_1020618 +
mov ecx [esi+18h] +
lea eax [ebp+var_418] +
push eax  +
push ebx  +
call sub_1013770  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_10150F5  +
push ecx  +
jmp loc_1015144  +
and dword ptr [esi] 0 +
mov eax [ebp+var_418] +
mov [esi+4] bx +
mov esi ecx +
cmp [eax+0Ch] ecx +
jb loc_1015142  +
mov ebx 0F000h +
push ebx  +
push esi  +
push 102Ch  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
shr eax 0Ch +
dec eax  +
jz loc_1015136  +
mov eax dword_1020618 +
xor edx edx +
inc edx  +
lea ecx [esi-1] +
shl edx cl +
or [eax] edx +
mov eax [ebp+var_418] +
inc esi  +
cmp esi [eax+0Ch] +
jbe loc_101510E  +
push 1  +
push [ebp+bEnable]  +
call ds:EndDialog  +
mov esi [ebp+bEnable] +
mov eax [ebp+arg_8] +
shr eax 10h +
dec eax  +
jnz loc_101553A  +
push eax  +
push eax  +
push 147h  +
push 1BDh  +
push esi  +
call edi  +
push eax  +
call ds:SendMessageW  +
cmp eax 0FFFFFFFFh +
jnz loc_1015180  +
xor eax eax +
push eax  +
mov eax dword_1020618 +
push eax  +
push esi  +
mov ecx [eax+18h] +
call sub_1014DE3  +
jmp loc_101553A  +
mov dword_1020618 ebx +
mov ebx 104h +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
mov edi 43Ch +
push edi  +
push esi  +
mov esi ds:GetDlgItem +
call esi  +
push eax  +
call ds:GetWindowTextW  +
mov eax dword_1020618 +
push dword ptr [eax+0Ch]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_414] +
push ebx  +
push eax  +
call sub_100196B  +
add esp 10h +
lea eax [ebp+var_414] +
push eax  +
push edi  +
push [ebp+bEnable]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
push 43Bh  +
push [ebp+bEnable]  +
call esi  +
push 0  +
push off_101F898  +
mov [ebp+var_418] eax +
push eax  +
call ds:SetWindowTheme  +
mov edi ds:SendMessageW +
push 64h  +
push 0  +
push 1036h  +
push [ebp+var_418]  +
call edi  +
push 2Ch  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+Rect] +
push eax  +
push [ebp+var_418]  +
call ds:GetClientRect  +
push 2  +
pop eax  +
push eax  +
mov [ebp+lParam] eax +
call ds:GetSystemMetrics  +
mov ecx [ebp+Rect.right] +
sub ecx eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 1061h  +
push [ebp+var_418]  +
mov [ebp+var_498] ecx +
call edi  +
mov eax dword_1020618 +
cmp dword ptr [eax+10h] 0 +
jz loc_1015347  +
mov eax [eax+18h] +
add eax 24Ch +
push ebx  +
mov [ebp+hWnd] eax +
lea eax [ebp+Buffer] +
push eax  +
push 9D0Dh  +
push hInstance  +
call ds:LoadStringW  +
push 1BDh  +
push [ebp+bEnable]  +
call esi  +
mov [ebp+var_418] eax +
mov eax [ebp+hWnd] +
mov esi [eax] +
cmp esi eax +
jz loc_1015329  +
push dword ptr [esi+8]  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_414] +
push ebx  +
push eax  +
call sub_100196B  +
add esp 10h +
lea eax [ebp+var_414] +
push eax  +
push dword ptr [esi+8]  +
push 14Ah  +
push [ebp+var_418]  +
call edi  +
mov eax [esi+8] +
push eax  +
push eax  +
push 151h  +
push [ebp+var_418]  +
call edi  +
mov esi [esi] +
cmp esi [ebp+hWnd] +
jnz loc_10152DC  +
mov eax dword_1020618 +
movzx eax word ptr [eax+4] +
push 0  +
push eax  +
push 14Eh  +
push [ebp+var_418]  +
call edi  +
mov eax dword_1020618 +
movzx ecx word ptr [eax+4] +
push ecx  +
push eax  +
push [ebp+bEnable]  +
jmp loc_1015188  +
cmp dword ptr [ebx+8] 0FFFFFF9Bh +
jnz loc_101553A  +
mov edi ds:GetDlgItem +
push 43Bh  +
push esi  +
call edi  +
mov [ebp+hWnd] eax +
xor eax eax +
cmp dword_1020614 eax +
jnz loc_101553A  +
mov ecx [ebx+18h] +
xor ecx [ebx+14h] +
test ecx 1000h +
jz loc_101553A  +
push eax  +
push eax  +
push 147h  +
push 1BDh  +
push esi  +
mov dword_1020614 1 +
call edi  +
mov esi ds:SendMessageW +
push eax  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_10153BF  +
xor eax eax +
lea ecx [ebp+var_418] +
push ecx  +
push eax  +
mov eax dword_1020618 +
mov ecx [eax+18h] +
call sub_1013770  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_101553A  +
cmp dword ptr [ebx+0Ch] 0 +
mov ebx 0F000h +
jnz loc_101548B  +
push ebx  +
push 0  +
push 102Ch  +
push [ebp+hWnd]  +
call esi  +
mov ecx [ebp+var_418] +
mov edi eax +
xor eax eax +
shr edi 0Ch +
inc eax  +
dec edi  +
mov [ebp+wParam] eax +
cmp [ecx+0Ch] eax +
jb loc_1015470  +
xor eax eax +
test edi edi +
setnz al  +
inc eax  +
mov [ebp+var_428] eax +
shl [ebp+var_428] 0Ch +
mov eax [ebp+var_428] +
mov [ebp+var_468] eax +
lea eax [ebp+var_474] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_464] ebx +
push 102Bh  +
push [ebp+hWnd]  +
call esi  +
inc [ebp+wParam]  +
mov eax [ebp+var_418] +
mov ecx [ebp+wParam] +
cmp ecx [eax+0Ch] +
jbe loc_101542D  +
push edi  +
push 1  +
push [ebp+bEnable]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
jmp loc_1015533  +
mov eax [ebp+var_418] +
and [ebp+var_428] 0 +
cmp dword ptr [eax+0Ch] 1 +
mov [ebp+wParam] ecx +
jb loc_10154DB  +
push ebx  +
push [ebp+wParam]  +
push 102Ch  +
push [ebp+hWnd]  +
call esi  +
shr eax 0Ch +
dec eax  +
jz loc_10154C4  +
inc [ebp+var_428]  +
inc [ebp+wParam]  +
mov eax [ebp+var_418] +
mov ecx [ebp+wParam] +
cmp ecx [eax+0Ch] +
jbe loc_10154A4  +
xor eax eax +
cmp eax [ebp+var_428] +
sbb eax eax +
neg eax  +
push eax  +
push 1  +
push [ebp+bEnable]  +
call edi  +
push eax  +
call ds:EnableWindow  +
mov ecx [ebp+var_428] +
mov edx [ebp+var_418] +
xor eax eax +
mov [ebp+var_464] ebx +
cmp ecx [edx+0Ch] +
setz al  +
inc eax  +
shl eax 0Ch +
mov [ebp+var_468] eax +
lea eax [ebp+var_474] +
push eax  +
push 0  +
push 102Bh  +
push [ebp+hWnd]  +
call esi  +
and dword_1020614 0 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_1001679  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 6  +
mov esi ecx +
pop ecx  +
push [ebp+dwProcessId]  +
xor edx edx +
push edx  +
xor eax eax +
mov [ebp+dwInitParam] edx +
lea edi [ebp+var_1C] +
push 600h  +
mov [ebp+var_28] edx +
stos   +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
test eax eax +
jz loc_1015599  +
cmp eax 0FFFFFFFFh +
jnz loc_10155B7  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10155AD  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_101566E  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+dwProcessId]  +
call sub_1014063  +
cmp [ebp+var_28] 0 +
mov edi eax +
jnz loc_10155D6  +
mov edi 80070006h +
test edi edi +
jl loc_101566E  +
lea eax [ebp+dwInitParam] +
push eax  +
push [ebp+hObject]  +
mov ecx esi +
call sub_1013411  +
mov edi eax +
test edi edi +
jl loc_101566E  +
xor eax eax +
inc eax  +
cmp eax [esi+258h] +
mov [ebp+var_14] ebx +
sbb eax eax +
neg eax  +
xor ecx ecx +
cmp ecx [esi+25Ch] +
mov [ebp+var_10] eax +
sbb ecx ecx +
neg ecx  +
neg eax  +
sbb eax eax +
mov [ebp+var_C] ecx +
and eax 0Fh +
lea ecx [ebp+dwInitParam] +
push ecx  +
push offset sub_1015042  +
push dword ptr [esi+4]  +
add eax 7Ch +
movzx eax ax +
push eax  +
push hInstance  +
mov [ebp+var_8] esi +
call ds:DialogBoxParamW  +
cmp eax 1 +
jnz loc_101566A  +
push 0Ch  +
lea eax [ebp+dwInitParam] +
push eax  +
push 15h  +
push [ebp+hObject]  +
call ds:NtSetInformationProcess  +
push eax  +
call ds:RtlNtStatusToDosError  +
test eax eax +
jle loc_1015668  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jge loc_101567C  +
push edi  +
push 7568h  +
push dword ptr [esi+4]  +
call sub_100ED2D  +
cmp [ebp+hObject] 0 +
jz loc_101568B  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
mov [ebp+dwMessageId] esi +
mov [ebp+var_18] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+dwProcessId] esi +
mov dword ptr [ebp+htask] esi +
cmp [ebp+arg_C] esi +
jnz loc_1015783  +
lea ebx [edi+260h] +
push ebx  +
call ds:RtlEnterCriticalSection  +
push [ebp+arg_0]  +
push dword ptr [edi+0Ch]  +
call sub_1002E26  +
mov esi eax +
test esi esi +
jz loc_1015717  +
mov ecx esi +
call sub_101336B  +
mov [ebp+var_C] eax +
mov eax [esi+9Ch] +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1015707  +
mov eax [eax+8] +
jmp loc_101570A  +
mov eax [esi+8] +
mov [ebp+dwProcessId] eax +
movzx eax word ptr [esi+0A0h] +
mov dword ptr [ebp+htask] eax +
push ebx  +
call ds:RtlLeaveCriticalSection  +
xor ebx ebx +
cmp esi ebx +
jnz loc_101572C  +
push 57h  +
pop eax  +
jmp loc_10157FB  +
mov ecx edi +
cmp [ebp+var_C] ebx +
jz loc_1015749  +
push 273Bh  +
push 273Dh  +
push 273Ah  +
push 273Ch  +
jmp loc_1015759  +
push ebx  +
push 2731h  +
push 2730h  +
push 272Fh  +
push 2713h  +
call sub_101480A  +
cmp eax 1 +
jz loc_101576F  +
xor eax eax +
jmp loc_10157FB  +
cmp [ebp+var_10] ebx +
jz loc_1015781  +
push dword ptr [ebp+htask]  +
push [ebp+dwProcessId]  +
call VDMTerminateTaskWOW  +
jmp loc_10157FB  +
xor esi esi +
push [ebp+arg_0]  +
push esi  +
push 1  +
call ds:OpenProcess  +
mov ebx eax +
cmp ebx esi +
jz loc_10157CF  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1014063  +
test eax eax +
jl loc_10157C6  +
cmp [ebp+var_18] esi +
jz loc_10157C6  +
push 1  +
push ebx  +
call ds:TerminateProcess  +
test eax eax +
jz loc_10157CF  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
jmp loc_10157D8  +
mov [ebp+dwMessageId] 6 +
jmp loc_10157D8  +
call ds:__imp_GetLastError  +
mov [ebp+dwMessageId] eax +
cmp ebx esi +
jz loc_10157E3  +
push ebx  +
call ds:CloseHandle  +
cmp [ebp+dwMessageId] esi +
jz loc_10157F8  +
push [ebp+dwMessageId]  +
push 2721h  +
push dword ptr [edi+4]  +
call sub_100ED2D  +
mov eax [ebp+dwMessageId] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 474h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push 2739h  +
push 2738h  +
push 2737h  +
mov esi ecx +
push 2713h  +
mov [ebp+var_41C] esi +
mov [ebp+var_418] ebx +
call sub_101480A  +
cmp eax 1 +
jnz loc_101594B  +
push [ebp+dwProcessId]  +
push ebx  +
push 1000h  +
call ds:OpenProcess  +
mov [ebp+var_420] eax +
cmp eax ebx +
jz loc_101594B  +
push edi  +
lea eax [ebp+var_418] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+dwProcessId]  +
call sub_1014063  +
mov edi ds:CloseHandle +
test eax eax +
jl loc_1015921  +
cmp [ebp+var_418] ebx +
jz loc_1015921  +
push [ebp+dwProcessId]  +
lea eax [ebp+CommandLine] +
push dword ptr [esi+3Ch]  +
push offset aSPLd  +
push 208h  +
push eax  +
call sub_100196B  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jnz loc_1015926  +
push 40h  +
lea eax [ebp+StartupInfo.lpReserved] +
push ebx  +
push eax  +
mov [ebp+StartupInfo.cb] 44h +
call memset  +
add esp 0Ch +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push ebx  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+CommandLine] +
push eax  +
push ebx  +
call ds:CreateProcessW  +
test eax eax +
jnz loc_101590F  +
call sub_100DD74  +
mov esi eax +
jmp loc_1015926  +
push dword ptr [ebp-42Ch]  +
call edi  +
push [ebp+hObject]  +
call edi  +
jmp loc_1015926  +
mov esi 80070006h +
push [ebp+var_420]  +
call edi  +
pop edi  +
cmp esi ebx +
jz loc_101594B  +
mov eax [ebp+var_41C] +
push esi  +
push 2722h  +
push dword ptr [eax+4]  +
call sub_100ED2D  +
mov eax esi +
jmp loc_101594D  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 424h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
xor ebx ebx +
sub eax 9C5Dh +
push esi  +
push edi  +
mov [ebp+var_41C] ecx +
mov [ebp+dwMessageId] ebx +
mov [ebp+var_424] ebx +
mov edi 100h +
jz loc_10159DF  +
dec eax  +
jz loc_10159D8  +
dec eax  +
jz loc_10159D1  +
dec eax  +
dec eax  +
jz loc_10159CA  +
dec eax  +
jz loc_10159C5  +
push 20h  +
jmp loc_10159C7  +
push 40h  +
pop esi  +
jmp loc_10159E1  +
mov esi 4000h +
jmp loc_10159E1  +
mov esi 80h +
jmp loc_10159E1  +
mov esi 8000h +
jmp loc_10159E1  +
mov esi edi +
cmp [ebp+arg_10] esi +
jz loc_1015B36  +
push ebx  +
push 2734h  +
push 2733h  +
push 2732h  +
push 2713h  +
call sub_101480A  +
cmp eax 1 +
jnz loc_1015B36  +
push [ebp+dwProcessId]  +
push ebx  +
push 1200h  +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
mov ebx 2723h +
test eax eax +
jz loc_1015B04  +
lea eax [ebp+var_424] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+dwProcessId]  +
call sub_1014063  +
test eax eax +
jl loc_1015AEC  +
cmp [ebp+var_424] 0 +
jz loc_1015AEC  +
push esi  +
push [ebp+hObject]  +
call ds:SetPriorityClass  +
test eax eax +
jnz loc_1015A78  +
call ds:__imp_GetLastError  +
mov [ebp+dwMessageId] eax +
jmp loc_1015AF6  +
cmp esi edi +
jnz loc_1015ADF  +
push [ebp+hObject]  +
call ds:GetPriorityClass  +
cmp eax 80h +
jnz loc_1015ADF  +
mov esi ds:LoadStringW +
mov edi 104h +
push edi  +
lea eax [ebp+Caption] +
push eax  +
push ebx  +
push hInstance  +
call esi  +
push edi  +
lea eax [ebp+Text] +
push eax  +
push 2736h  +
push hInstance  +
call esi  +
push 30h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
mov eax [ebp+var_41C] +
push dword ptr [eax+4]  +
call ds:MessageBoxW  +
mov ecx [ebp+var_41C] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
jmp loc_1015AF6  +
mov [ebp+dwMessageId] 6 +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1015B10  +
call ds:__imp_GetLastError  +
mov [ebp+dwMessageId] eax +
cmp [ebp+dwMessageId] 0 +
jz loc_1015B36  +
push [ebp+dwMessageId]  +
mov eax [ebp+var_41C] +
push ebx  +
push dword ptr [eax+4]  +
call sub_100ED2D  +
mov eax [ebp+dwMessageId] +
jmp loc_1015B38  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor esi esi +
push esi  +
push 9C8Fh  +
push 9C8Eh  +
push 9C8Dh  +
push 2713h  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] esi +
call sub_101480A  +
cmp eax 1 +
jnz loc_1015C2E  +
push ebx  +
push [ebp+hObject]  +
push esi  +
push 400h  +
call ds:OpenProcess  +
mov ebx eax +
cmp ebx esi +
jz loc_1015C10  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+hObject]  +
call sub_1014063  +
mov edi ds:CloseHandle +
test eax eax +
jl loc_1015C07  +
cmp [ebp+var_4] esi +
jz loc_1015C07  +
lea eax [ebp+hObject] +
push eax  +
push 80h  +
push ebx  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1015BFD  +
xor eax eax +
cmp [ebp+TokenInformation] 2 +
push 4  +
setz al  +
mov [ebp+TokenInformation] eax +
lea eax [ebp+TokenInformation] +
push eax  +
push 18h  +
push [ebp+hObject]  +
call ds:SetTokenInformation  +
test eax eax +
jnz loc_1015BF6  +
call ds:__imp_GetLastError  +
mov esi eax +
push [ebp+hObject]  +
call edi  +
jmp loc_1015C0A  +
call ds:__imp_GetLastError  +
mov esi eax +
jmp loc_1015C0A  +
push 6  +
pop esi  +
push ebx  +
call edi  +
pop edi  +
jmp loc_1015C18  +
call ds:__imp_GetLastError  +
mov esi eax +
pop ebx  +
test esi esi +
jz loc_1015C2E  +
mov eax [ebp+var_8] +
push esi  +
push 9C8Bh  +
push dword ptr [eax+4]  +
call sub_100ED2D  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
mov [ebp+pMore] eax +
push 0Ch  +
xor ebx ebx +
xor eax eax +
push 8  +
mov [ebp+dwMessageId] 0Eh +
mov [ebp+var_21C] ebx +
mov [ebp+hObject] ebx +
mov word ptr [ebp+dwInitParam] ax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1015EC1  +
mov edi [ebp+dwProcessId] +
push edi  +
push ebx  +
push 410h  +
mov [esi] edi +
call ds:OpenProcess  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_1015E76  +
lea eax [ebp+hObject] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_1014063  +
test eax eax +
jl loc_1015E6A  +
cmp [ebp+hObject] ebx +
jz loc_1015E6A  +
lea eax [ebp+dwInitParam] +
push eax  +
push 104h  +
call ds:GetTempPathW  +
test eax eax +
jz loc_1015E8A  +
push [ebp+pMore]  +
lea eax [ebp+dwInitParam] +
push eax  +
call ds:PathAppendW  +
test eax eax +
jz loc_1015E8A  +
lea eax [ebp+pMore] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pMore] ebx +
call ds:IsWow64Process  +
test eax eax +
jz loc_1015D4D  +
cmp [ebp+pMore] ebx +
jz loc_1015D4D  +
push offset Srch  +
lea eax [ebp+dwInitParam] +
push eax  +
call ds:StrStrW  +
cmp eax ebx +
jz loc_1015D4D  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp+dwInitParam] +
push eax  +
call ds:PathRemoveExtensionW  +
mov edi offset pszExt +
push edi  +
lea eax [ebp+dwInitParam] +
push eax  +
call ds:PathAddExtensionW  +
test eax eax +
jnz loc_1015D83  +
push edi  +
push 104h  +
lea eax [ebp+dwInitParam] +
push eax  +
call sub_1003CD4  +
push ebx  +
push ebx  +
lea eax [ebp+dwInitParam] +
push eax  +
push eax  +
call ds:SHELL32_75  +
push ebx  +
push ebx  +
push 2  +
push ebx  +
push ebx  +
push 40010000h  +
lea eax [ebp+dwInitParam] +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_1015E5C  +
mov edi ds:GetCurrentProcess +
push 2  +
push ebx  +
push ebx  +
lea eax [esi+8] +
push eax  +
call edi  +
push eax  +
push [ebp+hObject]  +
call edi  +
push eax  +
call ds:DuplicateHandle  +
test eax eax +
jz loc_1015E42  +
lea eax [ebp+ThreadId] +
push eax  +
push ebx  +
push esi  +
push offset sub_10135E1  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov edi eax +
cmp edi ebx +
jz loc_1015E42  +
push edi  +
push offset sub_101365A  +
push hWnd  +
mov [ebp+var_21C] 1 +
push 1BBh  +
push hInstance  +
call ds:DialogBoxParamW  +
mov [ebp+dwMessageId] eax +
cmp eax 4C7h +
jnz loc_1015E39  +
push [ebp+hObject]  +
call sub_10135AE  +
push edi  +
call ds:CloseHandle  +
jmp loc_1015E4E  +
call ds:__imp_GetLastError  +
mov [ebp+dwMessageId] eax +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1015E82  +
call ds:__imp_GetLastError  +
mov [ebp+dwMessageId] eax +
jmp loc_1015E8A  +
mov [ebp+dwMessageId] 6 +
jmp loc_1015E82  +
call ds:__imp_GetLastError  +
mov [ebp+dwMessageId] eax +
cmp [ebp+var_21C] ebx +
jnz loc_1015EEE  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1015E98  +
push eax  +
call ds:CloseHandle  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1015EA6  +
push eax  +
call ds:CloseHandle  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+dwMessageId] 4C7h +
jz loc_1015ED7  +
push [ebp+dwMessageId]  +
push 9CC1h  +
push hWnd  +
call sub_100ED2D  +
mov ecx [ebp+var_4] +
mov eax [ebp+dwMessageId] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 10h  +
cmp [ebp+dwMessageId] ebx +
jnz loc_1015EB5  +
lea eax [ebp+dwInitParam] +
push eax  +
push offset sub_101371D  +
push hWnd  +
push 1BCh  +
push hInstance  +
call ds:DialogBoxParamW  +
jmp loc_1015ED7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_8] +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
mov [ebp+var_10] ecx +
mov [ebp+var_8] 1 +
mov [ebp+var_4] eax +
push edi  +
mov ecx [ebp+arg_4] +
cmp [eax+48h] ecx +
jnz loc_1015FBB  +
mov ebx [eax+44h] +
cmp ebx ecx +
jz loc_1015FBB  +
mov edi [eax+24h] +
cmp [ebp+arg_10] edi +
mov esi [eax+20h] +
jg loc_1015FBB  +
jl loc_1015F6B  +
cmp [ebp+arg_C] esi +
jnb loc_1015FBB  +
push [ebp+arg_18]  +
mov ecx [ebp+var_10] +
push [ebp+arg_14]  +
push edi  +
push esi  +
push [ebp+arg_8]  +
push ebx  +
push [ebp+arg_0]  +
call sub_1015F2B  +
mov [ebp+var_8] eax +
cmp ebx [ebp+arg_0] +
jz loc_1015FA7  +
mov ecx [ebp+var_10] +
push 1  +
push edi  +
push esi  +
push ebx  +
call sub_10156A3  +
neg eax  +
sbb eax eax +
inc eax  +
cmp [ebp+var_8] 1 +
jnz loc_1015FB8  +
mov [ebp+var_8] eax +
jmp loc_1015FB8  +
mov eax [ebp+arg_14] +
mov dword ptr [eax] 1 +
mov eax [ebp+arg_18] +
mov [eax] esi +
mov [eax+4] edi +
mov eax [ebp+var_4] +
mov eax [eax] +
test eax eax +
jz loc_1015FD4  +
add [ebp+var_C] eax +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_8] +
add eax ecx +
mov [ebp+var_4] eax +
jmp loc_1015F4A  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 434h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_428] edi +
call ds:GetCurrentProcessId  +
lea ebx [esi+260h] +
push ebx  +
mov [ebp+var_420] eax +
mov [ebp+lpMem] edi +
mov [ebp+var_42C] edi +
mov [ebp+var_434] edi +
mov [ebp+var_430] edi +
mov [ebp+var_418] edi +
call ds:RtlEnterCriticalSection  +
push [ebp+dwProcessId]  +
push dword ptr [esi+0Ch]  +
call sub_1002E26  +
cmp eax edi +
jz loc_1016058  +
mov ecx eax +
call sub_101336B  +
mov [ebp+var_418] eax +
push ebx  +
call ds:RtlLeaveCriticalSection  +
mov ecx esi +
cmp [ebp+var_418] edi +
jz loc_10160A2  +
push 273Bh  +
push 273Dh  +
push 273Ah  +
push 273Ch  +
push 2713h  +
call sub_101480A  +
cmp eax 1 +
jnz loc_10160C1  +
push eax  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+dwProcessId]  +
call sub_10156A3  +
jmp loc_1016215  +
push edi  +
push 9CAAh  +
push 9CA9h  +
push 9CA8h  +
push 2713h  +
call sub_101480A  +
cmp eax 1 +
jz loc_10160C8  +
xor eax eax +
jmp loc_1016215  +
mov ebx [ebp+dwProcessId] +
push ebx  +
push edi  +
push 1000h  +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
cmp eax edi +
jz loc_101616E  +
lea eax [ebp+var_428] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call sub_1014063  +
test eax eax +
jl loc_101616E  +
cmp [ebp+var_428] edi +
jz loc_101616E  +
call sub_1013A1E  +
lea ecx [ebp+var_434] +
push ecx  +
lea ecx [ebp+var_42C] +
push ecx  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
mov [ebp+lpMem] eax +
push eax  +
push ebx  +
push [ebp+var_420]  +
call sub_1015F2B  +
push 1  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
mov [ebp+var_418] eax +
push ebx  +
call sub_10156A3  +
cmp [ebp+var_42C] edi +
jz loc_1016174  +
push 1  +
push [ebp+var_430]  +
mov ecx esi +
push [ebp+var_434]  +
push [ebp+var_420]  +
call sub_10156A3  +
jmp loc_1016174  +
mov [ebp+var_418] edi +
cmp [ebp+hObject] edi +
jz loc_1016188  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+var_418] 1 +
jz loc_10161EC  +
mov ebx ds:LoadStringW +
push 104h  +
lea eax [ebp+Caption] +
push eax  +
push 9CABh  +
push hInstance  +
call ebx  +
test eax eax +
jz loc_10161F3  +
push 104h  +
lea eax [ebp+Text] +
push eax  +
push 9CACh  +
push hInstance  +
call ebx  +
test eax eax +
jz loc_10161F3  +
push 10h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push dword ptr [esi+4]  +
call ds:MessageBoxW  +
jmp loc_10161F3  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
cmp [ebp+lpMem] edi +
jz loc_101620F  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_418] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+hWnd] +
push 8  +
push edi  +
call ds:GetWindowLongW  +
mov ecx [ebp+arg_4] +
mov esi eax +
mov eax 110h +
test esi esi +
jnz loc_1016254  +
cmp ecx eax +
jnz loc_10162FA  +
sub ecx eax +
jz loc_10162B1  +
dec ecx  +
jnz loc_10162FA  +
cmp [ebp+arg_8] 1 +
jnz loc_101629F  +
push ebx  +
mov ecx esi +
call sub_10047EF  +
mov ecx esi +
call sub_1002603  +
push edi  +
mov ebx eax +
call sub_1014588  +
mov ecx esi +
call sub_100748A  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push ebx  +
mov ecx esi +
call sub_1013508  +
push 1  +
push edi  +
call ds:EndDialog  +
pop ebx  +
jmp loc_10162FA  +
cmp [ebp+arg_8] 2 +
jnz loc_10162FA  +
push 2  +
push edi  +
call ds:EndDialog  +
jmp loc_10162FA  +
push [ebp+dwNewLong]  +
push 8  +
push edi  +
call ds:SetWindowLongW  +
push 0F5h  +
push edi  +
call ds:GetDlgItem  +
push 0  +
push off_101F898  +
mov esi eax +
push esi  +
call ds:SetWindowTheme  +
push 10024h  +
push 0  +
push 1036h  +
push esi  +
call ds:SendMessageW  +
push edi  +
call sub_1013AA5  +
push esi  +
call ds:SetFocus  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1016312  +
push [ebp+arg_C]  +
sub eax ecx +
push 1  +
sar eax 1 +
push eax  +
push [ebp+arg_8]  +
push [ebp+dwFlags]  +
push [ebp+hHeap]  +
call sub_10147AD  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ecx  +
push offset sub_101622B  +
push hWnd  +
push 79h  +
push hInstance  +
call ds:DialogBoxParamW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_14] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
push edi  +
mov [ebp+var_10] eax +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
xor ebx ebx +
push 40h  +
lea eax [ebp+hThread] +
push eax  +
mov [ebp+var_4C] 18h +
mov [ebp+var_48] ebx +
mov [ebp+var_40] ebx +
mov [ebp+var_44] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_14] ebx +
call ds:NtOpenThread  +
mov edi [ebp+arg_18] +
test eax eax +
jl loc_10164A9  +
lea eax [ebp+UserTime] +
push eax  +
lea eax [ebp+KernelTime] +
push eax  +
lea eax [ebp+ExitTime] +
push eax  +
lea eax [ebp+CreationTime] +
push eax  +
push [ebp+hThread]  +
call ds:GetThreadTimes  +
test eax eax +
jz loc_10164A0  +
mov eax [ebp+KernelTime.dwLowDateTime] +
add eax [ebp+UserTime.dwLowDateTime] +
mov ecx [ebp+KernelTime.dwHighDateTime] +
adc ecx [ebp+UserTime.dwHighDateTime] +
mov ebx eax +
sub ebx [esi+18h] +
mov edx ecx +
sbb edx [esi+1Ch] +
mov [ebp+var_C] ebx +
mov [ebp+var_8] edx +
test edx edx +
jg loc_1016415  +
jl loc_10163FE  +
test ebx ebx +
jnb loc_1016415  +
push [ebp+hThread]  +
or dword ptr [esi+8] 0FFFFFFFFh +
call ds:NtClose  +
mov eax 80004005h +
jmp loc_10165B3  +
or ebx [ebp+var_8] +
jz loc_1016427  +
or dword ptr [esi+0D0h] 20h +
mov [esi+18h] eax +
mov [esi+1Ch] ecx +
mov eax [ebp+arg_1C] +
mov edx [eax+4] +
mov ebx [ebp+var_8] +
cmp ebx edx +
mov ecx [eax] +
jl loc_101644B  +
jg loc_101643D  +
cmp [ebp+var_C] ecx +
jbe loc_101644B  +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
mov [ebp+var_C] ecx +
mov ebx edx +
jmp loc_1016455  +
sub ecx [ebp+var_C] +
sbb edx ebx +
mov [eax] ecx +
mov [eax+4] edx +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
push ebx  +
push [ebp+var_C]  +
call sub_10032E9  +
mov eax [edi+24h] +
mov edx [esi+1Ch] +
cmp eax edx +
mov ecx [edi+20h] +
mov ebx [esi+18h] +
jl loc_101648A  +
jg loc_101647E  +
cmp ecx ebx +
jbe loc_101648A  +
sub ecx ebx +
sbb eax edx +
mov [edi+20h] ecx +
mov [edi+24h] eax +
jmp loc_1016492  +
and dword ptr [edi+20h] 0 +
and dword ptr [edi+24h] 0 +
mov eax [esi+18h] +
mov [esi+20h] eax +
mov eax [esi+1Ch] +
mov [esi+24h] eax +
xor ebx ebx +
push [ebp+hThread]  +
call ds:NtClose  +
mov eax [esi+50h] +
cmp eax [edi+50h] +
jz loc_10164C1  +
or dword ptr [esi+0D0h] 8000h +
mov eax [edi+50h] +
mov [esi+50h] eax +
mov eax [esi+10h] +
cmp eax [edi+10h] +
jz loc_10164D6  +
or dword ptr [esi+0D0h] 8 +
mov eax [edi+10h] +
mov [esi+10h] eax +
cmp [ebp+arg_24] ebx +
jnz loc_10165B1  +
mov ax word ptr [ebp+lpMultiByteStr] +
or dword ptr [esi+0D0h] 2000Fh +
mov [esi+0A0h] ax +
mov eax [ebp+arg_8] +
push 5Ch  +
push [ebp+arg_C]  +
mov [esi+8] eax +
mov dword ptr [esi+58h] 1 +
call ds:strrchr  +
pop ecx  +
pop ecx  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jnz loc_101651D  +
mov eax [ebp+arg_C] +
mov [ebp+lpMultiByteStr] eax +
jmp loc_1016520  +
inc [ebp+lpMultiByteStr]  +
push [ebp+lpMultiByteStr]  +
call ds:lstrlenA  +
mov ebx eax +
lea eax [ebx+ebx+6] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi+98h] eax +
test eax eax +
jnz loc_1016550  +
mov eax 8007000Eh +
jmp loc_10165B3  +
push 20h  +
pop ecx  +
mov [eax+2] cx +
mov eax [esi+98h] +
mov [eax] cx +
mov eax [esi+98h] +
push ebx  +
add eax 4 +
push eax  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
mov eax [esi+98h] +
xor ecx ecx +
mov [eax+ebx*2+4] cx +
mov eax [esi+98h] +
push ebx  +
add eax 4 +
push eax  +
call ds:CharLowerBuffW  +
mov [esi+9Ch] edi +
cmp dword_101E468 0 +
jz loc_10165B1  +
lea eax [ebp+CreationTime] +
push eax  +
mov ecx esi +
call sub_1003AE7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
cmp [ebp+hWnd] esi +
jz loc_101669E  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_101669E  +
push 38h  +
lea eax [ebp+var_3C] +
push esi  +
push eax  +
call memset  +
mov eax [ebp+wParam] +
add esp 0Ch +
cmp dword_101E2F8 esi +
mov [ebp+var_28] 104h +
mov [ebp+lParam] 1 +
mov [ebp+var_3C] eax +
jle loc_1016692  +
push ebx  +
mov ebx ds:SendMessageW +
mov ecx dword_101E178[esi*4] +
xor eax eax +
inc eax  +
shl eax cl +
test [edi+0D0h] eax +
jz loc_1016669  +
xor eax eax +
mov word_1020620 ax +
lea eax [ebp+lParam] +
push eax  +
mov [ebp+var_2C] offset word_1020620 +
mov [ebp+var_20] edi +
mov [ebp+var_38] esi +
call sub_101497F  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1016681  +
and [ebp+var_20] 0 +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Ch  +
push [ebp+hWnd]  +
call ebx  +
test eax eax +
jz loc_1016674  +
inc esi  +
cmp esi dword_101E2F8 +
jge loc_101667B  +
jmp loc_1016618  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jge loc_1016691  +
push [ebp+wParam]  +
push [ebp+wParam]  +
push 1015h  +
push [ebp+hWnd]  +
call ebx  +
pop ebx  +
and dword ptr [edi+0D0h] 0 +
mov eax [ebp+var_4] +
jmp loc_10166A3  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_10166C1  +
mov eax 80004005h +
jmp loc_10166D4  +
push [ebp+wParam]  +
or dword ptr [eax+0D0h] 0FFFFFFFFh +
push eax  +
push [ebp+hWnd]  +
call sub_10165BF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_C] 80070057h +
mov [ebp+dwProcessId] ebx +
mov [ebp+var_8] 57h +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+TokenInformation] ebx +
mov [ebp+var_10] ebx +
call sub_1002603  +
mov edi eax +
lea eax [esi+260h] +
push eax  +
call ds:RtlEnterCriticalSection  +
xor ecx ecx +
cmp edi ecx +
jz loc_101677B  +
mov eax [esi+0Ch] +
cmp [eax] ecx +
jle loc_1016740  +
mov eax [eax+4] +
cmp edi [eax] +
jz loc_1016806  +
mov edx [esi+0Ch] +
inc ecx  +
add eax 4 +
cmp ecx [edx] +
jl loc_101672D  +
xor edi edi +
test edi edi +
jz loc_101677B  +
mov eax [edi+8] +
push dword ptr [edi+98h]  +
mov [ebp+dwProcessId] eax +
mov eax [edi+28h] +
mov [ebp+var_1C] eax +
mov eax [edi+2Ch] +
mov [ebp+var_18] eax +
mov eax [edi+0B4h] +
mov [ebp+TokenInformation] eax +
mov eax [edi+50h] +
mov [ebp+var_10] eax +
push 104h  +
lea eax [esi+44h] +
push eax  +
call sub_1001A1B  +
lea edi [esi+260h] +
push edi  +
call ds:RtlLeaveCriticalSection  +
movzx eax [ebp+arg_0] +
cmp eax 9C62h +
jg loc_10168EB  +
cmp eax 9C5Dh +
jge loc_10168CB  +
sub eax 3F0h +
jz loc_10168A0  +
dec eax  +
dec eax  +
jz loc_10167D6  +
sub eax 28h +
jz loc_10167D6  +
sub eax 3DEh +
jz loc_101685B  +
sub eax 5BBh +
jz loc_1016835  +
sub eax 8EA8h +
jz loc_101680E  +
dec eax  +
jnz loc_1016A26  +
test ebx ebx +
jz loc_1016853  +
push 0  +
push [ebp+var_18]  +
mov ecx esi +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_10156A3  +
push 3F1h  +
push dword ptr [esi+4]  +
mov [ebp+var_8] eax +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
jmp loc_1016853  +
xor ebx ebx +
inc ebx  +
jmp loc_1016742  +
test ebx ebx +
jz loc_1016A0D  +
cmp dword ptr [esi+3Ch] 0 +
jz loc_1016A0D  +
push [ebp+var_18]  +
mov ecx esi +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_1015807  +
jmp loc_1016A0A  +
test ebx ebx +
jz loc_1016853  +
push [ebp+dwProcessId]  +
push 0  +
push 406h  +
push hWnd  +
call ds:PostMessageW  +
and [ebp+var_8] 0 +
push [ebp+var_8]  +
jmp loc_1016A10  +
xor ebx ebx +
inc ebx  +
push ebx  +
push hWnd  +
call sub_10142BF  +
mov edi eax +
test edi edi +
jl loc_1016892  +
mov ecx offset unk_101E138 +
mov dword_101E464 ebx +
call sub_1008995  +
push 0  +
push 0  +
push 10h  +
push hWnd  +
call ds:PostMessageW  +
movzx eax [ebp+arg_0] +
push edi  +
push 0  +
push eax  +
push ebx  +
jmp loc_1016A1B  +
xor ebx ebx +
push ebx  +
push ebx  +
push 0F0h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
mov dword_101E464 eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push ebx  +
push ebx  +
jmp loc_1016A14  +
test ebx ebx +
jz loc_1016853  +
push [ebp+var_10]  +
mov ecx esi +
push eax  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_1015979  +
mov [ebp+var_8] eax +
jmp loc_1016853  +
sub eax 9C77h +
jz loc_10169F2  +
sub eax 0Bh +
jz loc_10169DE  +
sub eax 4 +
jz loc_101697C  +
sub eax 20h +
jz loc_1016950  +
sub eax 1Dh +
jz loc_1016934  +
sub eax 270Ch +
jnz loc_1016A26  +
test ebx ebx +
jz loc_1016A0D  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_101415C  +
jmp loc_1016A0A  +
test ebx ebx +
jz loc_1016853  +
lea eax [esi+44h] +
push eax  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_1015C3A  +
jmp loc_10168E3  +
test ebx ebx +
jz loc_1016966  +
push [ebp+var_18]  +
mov ecx esi +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_1015FE3  +
mov ebx eax +
neg ebx  +
sbb ebx ebx +
and ebx 7FF8FFA9h +
add ebx 80070057h +
push ebx  +
jmp loc_1016A10  +
test ebx ebx +
jz loc_1016853  +
push [ebp+TokenInformation]  +
mov ecx esi +
push [ebp+var_18]  +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_1015B4E  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1016853  +
push edi  +
call ds:RtlEnterCriticalSection  +
push [ebp+dwProcessId]  +
push dword ptr [esi+0Ch]  +
call sub_1002E26  +
test eax eax +
jz loc_10169D2  +
mov ecx [eax+28h] +
cmp ecx [ebp+var_1C] +
jnz loc_10169D2  +
mov ecx [eax+2Ch] +
cmp ecx [ebp+var_18] +
jnz loc_10169D2  +
or dword ptr [eax+0D0h] 10000000h +
push edi  +
call ds:RtlLeaveCriticalSection  +
jmp loc_1016853  +
test ebx ebx +
jz loc_1016A0D  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
push [ebp+dwProcessId]  +
call sub_10141F3  +
jmp loc_1016A0A  +
test ebx ebx +
jz loc_1016A0D  +
push [ebp+var_18]  +
lea eax [esi+44h] +
push [ebp+var_1C]  +
mov ecx esi +
push [ebp+dwProcessId]  +
push eax  +
call sub_1015552  +
mov [ebp+var_C] eax +
push [ebp+var_C]  +
lea eax [esi+44h] +
push eax  +
movzx eax [ebp+arg_0] +
push eax  +
push 1  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
xor eax eax +
pop edi  +
mov [esi+44h] ax +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_14] +
mov eax [esi+8] +
push edi  +
push [ebp+arg_0]  +
push dword ptr [eax+0Ch]  +
call sub_1002E26  +
test eax eax +
jnz loc_1016AB7  +
push 0D8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1016A6E  +
mov ecx eax +
call sub_1003959  +
mov edi eax +
jmp loc_1016A70  +
xor edi edi +
test edi edi +
jz loc_1016ADB  +
push 0  +
push [ebp+lpMultiByteStr]  +
lea eax [esi+18h] +
push eax  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push [ebp+arg_10]  +
push [ebp+arg_0]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_101635F  +
test eax eax +
jl loc_1016AAC  +
mov eax [esi+8] +
mov ecx [eax+0Ch] +
push edi  +
call sub_1001F49  +
test eax eax +
jnz loc_1016ADB  +
push 1  +
mov ecx edi +
call sub_1002538  +
jmp loc_1016ADB  +
push 1  +
push [ebp+lpMultiByteStr]  +
lea ecx [esi+18h] +
push ecx  +
push dword ptr [esi+0Ch]  +
mov ecx eax +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push [ebp+arg_10]  +
push [ebp+arg_0]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_101635F  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-14h] 1 +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
mov [ebp-0Ch] ebx +
mov [ebp-10h] ebx +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
call ds:CallbackMayRunLong  +
mov esi offset unk_101F808 +
push esi  +
call ds:RtlEnterCriticalSection  +
mov edi [ebp+0Ch] +
cmp [edi] ebx +
jz loc_1016B2F  +
mov [ebp-14h] ebx +
jmp loc_1016B38  +
mov eax [edi+8] +
mov eax [eax+8] +
mov [ebp-18h] eax +
push esi  +
call ds:RtlLeaveCriticalSection  +
mov esi ds:GetProcessHeap +
cmp [ebp-14h] ebx +
jz loc_1016B97  +
push 800h  +
push ebx  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-4] eax +
cmp eax ebx +
jz loc_1016B8E  +
xor ecx ecx +
cmp dword ptr [ebp-18h] 4 +
mov [eax] cx +
jnz loc_1016BA9  +
mov ebx 400h +
push ebx  +
push eax  +
push offset aSystemrootSy_0  +
call ds:ExpandEnvironmentStringsW  +
mov [ebp+8] eax +
test eax eax +
jz loc_1016B8C  +
cmp eax ebx +
jbe loc_1016C26  +
xor ebx ebx +
cmp [ebp-14h] ebx +
jnz loc_1016CDC  +
push edi  +
push ebx  +
call esi  +
mov edi ds:HeapFree +
push eax  +
call edi  +
jmp loc_1016CE2  +
call sub_100DA9D  +
push dword ptr [ebp-18h]  +
mov dword ptr [ebp-1Ch] 1 +
push ebx  +
push 1000h  +
call ds:OpenProcess  +
mov [ebp-10h] eax +
cmp eax ebx +
jz loc_1016BD0  +
cmp eax 0FFFFFFFFh +
jnz loc_1016BEC  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1016BE6  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jl loc_1016CD1  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp-4]  +
mov ebx 400h +
push 0  +
push dword ptr [ebp-10h]  +
mov [ebp+8] ebx +
call ds:QueryFullProcessImageNameW  +
test eax eax +
jnz loc_1016C26  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1016C20  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_1016CCF  +
call esi  +
lea ecx [ebp-8] +
push ecx  +
push dword ptr [ebp-4]  +
push 0  +
push eax  +
call sub_1016307  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-4]  +
mov [ebp-20h] ebx +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [ebp-8]  +
call ds:SHLWAPI_348  +
test eax eax +
jnz loc_1016C6A  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1016C68  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jl loc_1016CC5  +
call esi  +
lea ecx [ebp-0Ch] +
push ecx  +
push dword ptr [ebp-4]  +
push ebx  +
push eax  +
call sub_1016307  +
mov ebx offset unk_101F808 +
push ebx  +
call ds:RtlEnterCriticalSection  +
xor eax eax +
cmp [edi] eax +
jz loc_1016C91  +
mov [ebp-14h] eax +
jmp loc_1016CBE  +
mov edx [ebp-8] +
mov ecx [edi+8] +
mov [ecx+0BCh] edx +
mov edx [ebp-0Ch] +
mov ecx [edi+8] +
mov [ebp-8] eax +
mov [ebp-0Ch] eax +
mov [ecx+0C4h] edx +
mov ecx [edi+8] +
xor eax eax +
inc eax  +
mov [ecx+0C8h] eax +
mov [edi+4] eax +
push ebx  +
call ds:RtlLeaveCriticalSection  +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1016B8C  +
xor ebx ebx +
call ds:RevertToSelf  +
jmp loc_1016B8E  +
***
mov edi ds:HeapFree +
cmp [ebp-4] ebx +
jz loc_1016CF0  +
push dword ptr [ebp-4]  +
push ebx  +
call esi  +
push eax  +
call edi  +
cmp [ebp-8] ebx +
jz loc_1016CFE  +
push dword ptr [ebp-8]  +
push ebx  +
call esi  +
push eax  +
call edi  +
cmp [ebp-0Ch] ebx +
jz loc_1016D0C  +
push dword ptr [ebp-0Ch]  +
push ebx  +
call esi  +
push eax  +
call edi  +
cmp [ebp-10h] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz locret_1016D23  +
cmp dword ptr [ebp-10h] 0FFFFFFFFh +
jz locret_1016D23  +
push dword ptr [ebp-10h]  +
call ds:CloseHandle  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push 0Ch  +
push 0  +
mov [ebp+var_4] ecx +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_1016DE7  +
push edi  +
xor eax eax +
mov edi esi +
stos   +
stos   +
push offset dword_101FAC0  +
stos   +
mov edi [ebp+var_4] +
push esi  +
push offset loc_1016AE8  +
mov [esi+8] edi +
call ds:TrySubmitThreadpoolCallback  +
test eax eax +
jnz loc_1016DD2  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1016DD0  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_1016DDA  +
mov [edi+0CCh] esi +
jmp loc_1016DE6  +
push esi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ds:EnumServicesStatusExW +
push esi  +
xor esi esi +
push edi  +
mov edi ds:GetProcessHeap +
mov [ebp+lpMem] esi +
mov [ebp+dwBytes] 400h +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+dwBytes] +
push eax  +
push esi  +
push esi  +
push 3  +
push 30h  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_C] esi +
call ebx  +
cmp eax esi +
jnz loc_1016E42  +
call ds:__imp_GetLastError  +
cmp eax 0EAh +
jnz loc_1016E92  +
push [ebp+lpMem]  +
push esi  +
call edi  +
push eax  +
call ds:HeapFree  +
push [ebp+dwBytes]  +
push esi  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax esi +
jz loc_1016EA9  +
push esi  +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
lea ecx [ebp+dwBytes] +
push ecx  +
push [ebp+dwBytes]  +
mov [ebp+var_C] esi +
push eax  +
push 3  +
push 30h  +
push esi  +
push [ebp+arg_0]  +
call ebx  +
cmp eax esi +
jnz loc_1016EAE  +
call ds:__imp_GetLastError  +
cmp eax 0EAh +
jz loc_1016E15  +
call ds:__imp_GetLastError  +
push [ebp+lpMem]  +
mov ebx eax +
push esi  +
call edi  +
push eax  +
call ds:HeapFree  +
jmp loc_1016EC0  +
push 0Eh  +
pop eax  +
jmp loc_1016EC2  +
mov eax [ebp+arg_4] +
mov ecx [ebp+lpMem] +
mov [eax] ecx +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_10] +
xor ebx ebx +
mov [eax] ecx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101E420 +
sub eax 0 +
jz loc_1016F3A  +
dec eax  +
jz loc_1016F1D  +
dec eax  +
jz loc_1016F09  +
dec eax  +
jz loc_1016EFB  +
dec eax  +
jz loc_1016EED  +
xor eax eax +
jmp loc_1016F52  +
mov eax [ebp+0Ch] +
push dword ptr [eax+4]  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
jmp loc_1016F4A  +
mov eax [ebp+0Ch] +
push dword ptr [eax+8]  +
mov eax [ebp+8] +
push dword ptr [eax+8]  +
jmp loc_1016F4A  +
mov eax [ebp+0Ch] +
mov eax [eax+0Ch] +
push dword ptr [eax+4]  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
push dword ptr [eax+4]  +
jmp loc_1016F4A  +
mov eax [ebp+0Ch] +
mov eax [eax+0Ch] +
push 0  +
push dword ptr [eax+24h]  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
push 0  +
push dword ptr [eax+24h]  +
call sub_1003196  +
jmp loc_1016F52  +
mov eax [ebp+0Ch] +
mov eax [eax+0Ch] +
push dword ptr [eax]  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
push dword ptr [eax]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
cmp dword_101E424 0 +
jle loc_1016F5D  +
neg eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
push 10h  +
push 0  +
mov edi ecx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_1017085  +
mov eax [ebp+hSCObject] +
mov [esi] eax +
mov eax [ebp+arg_8] +
mov [esi+0Ch] eax +
test dword ptr [eax+8] 20h +
jnz loc_1016FAE  +
add edi 3080h +
mov [esi+4] edi +
jmp loc_1017083  +
push 1  +
mov dword ptr [esi+4] offset WindowName +
push dword ptr [eax]  +
push [ebp+hSCManager]  +
call ds:OpenServiceW  +
mov [ebp+hSCObject] eax +
test eax eax +
jz loc_1017083  +
lea ecx [ebp+pcbBytesNeeded] +
push ecx  +
push 2000h  +
lea ecx [edi+40h] +
push ecx  +
push eax  +
call ds:QueryServiceConfigW  +
test eax eax +
jz loc_101707A  +
push ebx  +
lea eax [ebp+pNumArgs] +
push eax  +
push dword ptr [edi+4Ch]  +
call ds:CommandLineToArgvW  +
mov ebx eax +
test ebx ebx +
jz loc_1017079  +
push 5Ch  +
push dword ptr [ebx]  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1017011  +
mov eax [ebx] +
jmp loc_1017013  +
inc eax  +
inc eax  +
push eax  +
push offset aSvchost_exe  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1017072  +
xor edi edi +
inc edi  +
cmp [ebp+pNumArgs] edi +
jle loc_1017072  +
push dword ptr [ebx+edi*4]  +
push offset aK  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1017049  +
inc edi  +
cmp edi [ebp+pNumArgs] +
jge loc_1017072  +
jmp loc_101702D  +
lea eax [edi+1] +
cmp eax [ebp+pNumArgs] +
jge loc_1017072  +
mov edi [ebx+edi*4+4] +
xor eax eax +
cmp ax [edi] +
jz loc_1017072  +
push edi  +
call ds:_wcsdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_1017072  +
mov dword ptr [esi+4] offset WindowName +
push ebx  +
call ds:LocalFree  +
pop ebx  +
push [ebp+hSCObject]  +
call ds:CloseServiceHandle  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
mov esi ds:SendMessageW +
push 0  +
push 0  +
push 1032h  +
push [ebp+hWnd]  +
call esi  +
cmp eax 1 +
jz loc_10170D7  +
xor eax eax +
jmp loc_1017120  +
push edi  +
push 2  +
push 0FFFFFFFFh  +
push 100Ch  +
push [ebp+hWnd]  +
call esi  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101710F  +
and [ebp+var_34] 0 +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push [ebp+hWnd]  +
mov [ebp+lParam] 4 +
mov [ebp+var_38] edi +
call esi  +
test eax eax +
jnz loc_1017113  +
xor eax eax +
jmp loc_101711F  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_101711C  +
mov [eax] edi +
mov eax [ebp+var_1C] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
push 1  +
xor ebx ebx +
push ebx  +
push ebx  +
call ds:OpenSCManagerW  +
mov edi eax +
cmp edi ebx +
jnz loc_101714B  +
call ds:__imp_GetLastError  +
jmp loc_1017195  +
push esi  +
push 10h  +
push [ebp+lpServiceName]  +
push edi  +
call ds:OpenServiceW  +
mov esi eax +
cmp esi ebx +
jnz loc_1017171  +
call ds:__imp_GetLastError  +
push edi  +
mov esi eax +
call ds:CloseServiceHandle  +
mov eax esi +
jmp loc_1017194  +
push ebx  +
push ebx  +
push esi  +
call ds:StartServiceW  +
test eax eax +
jnz loc_1017186  +
call ds:__imp_GetLastError  +
mov ebx eax +
push esi  +
mov esi ds:CloseServiceHandle +
call esi  +
push edi  +
call esi  +
mov eax ebx +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push edi  +
push 1  +
xor ebx ebx +
push ebx  +
push ebx  +
call ds:OpenSCManagerW  +
mov edi eax +
cmp edi ebx +
jnz loc_10171C4  +
call ds:__imp_GetLastError  +
jmp loc_1017212  +
push esi  +
push 20h  +
push [ebp+lpServiceName]  +
push edi  +
call ds:OpenServiceW  +
mov esi eax +
cmp esi ebx +
jnz loc_10171EA  +
call ds:__imp_GetLastError  +
push edi  +
mov esi eax +
call ds:CloseServiceHandle  +
mov eax esi +
jmp loc_1017211  +
lea eax [ebp+ServiceStatus] +
push eax  +
push 1  +
push esi  +
call ds:ControlService  +
test eax eax +
jnz loc_1017203  +
call ds:__imp_GetLastError  +
mov ebx eax +
push esi  +
mov esi ds:CloseServiceHandle +
call esi  +
push edi  +
call esi  +
mov eax ebx +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax [ecx+4] +
test eax eax +
jz locret_101722D  +
push 0  +
push eax  +
call ds:ShowWindow  +
retn   +
***
mov eax [ecx+4] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:LoadStringW +
mov [ebp+var_C] ecx +
add ecx 2040h +
and [ebp+var_8] 0 +
push edi  +
mov [ebp+lpBuffer] ecx +
mov edi 104h +
mov ebx 0DC0h +
mov eax [ebp+var_8] +
push edi  +
push [ebp+lpBuffer]  +
push ds:dword_100D610[eax]  +
push 0  +
call esi  +
test eax eax +
jnz loc_101728E  +
push edi  +
push [ebp+lpBuffer]  +
push ebx  +
push eax  +
call esi  +
test eax eax +
jnz loc_101728E  +
mov ecx [ebp+lpBuffer] +
mov [ecx] ax +
add [ebp+var_8] 8 +
add [ebp+lpBuffer] 208h +
cmp [ebp+var_8] 38h +
jb loc_1017267  +
mov eax [ebp+var_C] +
push edi  +
add eax 2E78h +
push eax  +
push ebx  +
push 0  +
call esi  +
test eax eax +
jnz loc_10172BF  +
mov eax [ebp+var_C] +
xor ecx ecx +
add eax 2E78h +
mov [eax] cx +
mov ebx [ebp+var_C] +
push edi  +
add ebx 3080h +
push ebx  +
push 0DC8h  +
push 0  +
call esi  +
test eax eax +
jnz loc_10172DA  +
mov [ebx] ax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov edx [ebp+arg_0] +
cmp edx ds:dword_100D60C[eax*8] +
jz loc_101730E  +
inc eax  +
cmp eax 7 +
jb loc_10172EB  +
mov eax [ebp+arg_4] +
add ecx 2E78h +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
imul eax eax +
lea eax [eax+ecx+2040h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
jmp loc_1017308  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+14h] +
push esi  +
call ds:RtlTryEnterCriticalSection  +
mov ebx ds:SendMessageW +
test eax eax +
jz loc_101738F  +
lea eax [ebp+wParam] +
push eax  +
push dword ptr [edi+0Ch]  +
call sub_10170B1  +
test eax eax +
jnz loc_1017364  +
push esi  +
call ds:RtlLeaveCriticalSection  +
jmp loc_1017474  +
mov eax [eax+0Ch] +
cmp dword ptr [eax+0Ch] 1 +
push 3  +
jnz loc_101737A  +
pop eax  +
xor esi esi +
mov [ebp+uEnable] eax +
mov [ebp+var_8] eax +
jmp loc_1017383  +
and [ebp+uEnable] 0 +
and [ebp+var_8] 0 +
pop esi  +
lea eax [edi+14h] +
push eax  +
call ds:RtlLeaveCriticalSection  +
jmp loc_10173C6  +
xor esi esi +
push esi  +
push esi  +
push 1032h  +
push dword ptr [edi+0Ch]  +
call ebx  +
cmp eax 1 +
jnz loc_1017474  +
push 2  +
push 0FFFFFFFFh  +
push 100Ch  +
push dword ptr [edi+0Ch]  +
call ebx  +
mov [ebp+wParam] eax +
cmp eax 0FFFFFFFFh +
jz loc_1017474  +
mov [ebp+uEnable] esi +
mov [ebp+var_8] esi +
mov eax 0FFFFh +
mov ecx eax +
cmp cx word ptr [ebp+arg_0] +
jnz loc_101740E  +
cmp ax word ptr [ebp+arg_4] +
jnz loc_101740E  +
lea eax [ebp+Points] +
push eax  +
push [ebp+wParam]  +
mov [ebp+Points.x] 1 +
push 100Eh  +
push dword ptr [edi+0Ch]  +
call ebx  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push 0  +
push dword ptr [edi+0Ch]  +
call ds:MapWindowPoints  +
mov eax [ebp+var_14] +
mov [ebp+arg_0] eax +
mov eax [ebp+var_10] +
mov [ebp+arg_4] eax +
push 0DADh  +
push hInstance  +
call sub_100DC14  +
mov ebx eax +
test ebx ebx +
jz loc_1017474  +
push esi  +
mov esi ds:EnableMenuItem +
push 0DB5h  +
push ebx  +
call esi  +
push [ebp+uEnable]  +
push 0DB6h  +
push ebx  +
call esi  +
push [ebp+var_8]  +
push 0DB7h  +
push ebx  +
call esi  +
xor esi esi +
push esi  +
mov dword_101FDBC 1 +
push dword ptr [edi+4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push ebx  +
call ds:TrackPopupMenuEx  +
push ebx  +
mov dword_101FDBC esi +
call ds:DestroyMenu  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push esi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
push 2  +
call ds:BeginDeferWindowPos  +
mov [ebp+hWinPosInfo] eax +
test eax eax +
jz loc_1017565  +
push ebx  +
push edi  +
push 0DAFh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov eax dword_101E0C0 +
mov edi [ebp+Rect.right] +
mov ebx [ebp+Rect.bottom] +
mov ecx [ebp+Points.y] +
push 15h  +
add eax eax +
sub edi eax +
sub edi [ebp+var_10] +
sub ebx eax +
sub ebx [ebp+var_C] +
xor eax eax +
push eax  +
push eax  +
add ecx ebx +
push ecx  +
mov ecx [ebp+Points.x] +
add ecx edi +
push ecx  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
mov [ebp+hWinPosInfo] eax +
lea eax [ebp+var_28] +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+var_28] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov eax [ebp+Points.y] +
sub eax dword_101E0C0 +
push 16h  +
sub eax [ebp+var_24] +
add eax ebx +
push eax  +
mov eax [ebp+var_10] +
sub eax [ebp+var_28] +
add eax edi +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push dword ptr [esi+0Ch]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
push eax  +
call ds:EndDeferWindowPos  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
push ebx  +
push esi  +
push edi  +
push 3Ch  +
xor edi edi +
lea eax [ebp+lParam] +
push edi  +
push eax  +
mov esi ecx +
call memset  +
or [ebp+var_8] 0FFFFFFFFh +
add esp 0Ch +
push 2  +
pop ebx  +
lea eax [esi+14h] +
push eax  +
mov [ebp+lParam] 0Ch +
mov [ebp+var_40] ebx +
mov [ebp+var_14] eax +
call ds:RtlEnterCriticalSection  +
push edi  +
push edi  +
mov edi ds:SendMessageW +
push 1004h  +
push dword ptr [esi+0Ch]  +
call edi  +
and [ebp+wParam] 0 +
mov [ebp+var_10] eax +
test eax eax +
jle loc_1017651  +
mov eax [ebp+wParam] +
mov [ebp+var_4C] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push dword ptr [esi+0Ch]  +
call edi  +
test eax eax +
jz loc_1017631  +
mov eax [ebp+var_30] +
mov eax [eax+0Ch] +
mov eax [eax+24h] +
cmp eax [ebp+arg_0] +
jnz loc_10175FA  +
mov [ebp+var_C] ebx +
jmp loc_10175FE  +
and [ebp+var_C] 0 +
mov eax [ebp+var_C] +
cmp eax [ebp+var_44] +
jz loc_1017620  +
mov [ebp+var_80] eax +
lea eax [ebp+var_8C] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_7C] ebx +
push 102Bh  +
push dword ptr [esi+0Ch]  +
call edi  +
cmp [ebp+var_C] ebx +
jnz loc_1017631  +
cmp [ebp+var_8] 0FFFFFFFFh +
jnz loc_1017631  +
mov eax [ebp+wParam] +
mov [ebp+var_8] eax +
inc [ebp+wParam]  +
mov eax [ebp+wParam] +
cmp eax [ebp+var_10] +
jl loc_10175CD  +
cmp [ebp+var_8] 0FFFFFFFFh +
jz loc_1017651  +
push 0  +
push [ebp+var_8]  +
push 1013h  +
push dword ptr [esi+0Ch]  +
call edi  +
push [ebp+var_14]  +
call ds:RtlLeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
mov [ebp+var_14] eax +
lea eax [ebp+lParam] +
push eax  +
push 0FFFFFFFFh  +
push 1053h  +
push dword ptr [ecx+0Ch]  +
mov [ebp+lParam] 2 +
call ds:SendMessageW  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
test eax eax +
jz loc_10176B0  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101756D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:CallbackMayRunLong  +
push dword ptr [ebp+0Ch]  +
mov ecx dword_101E550 +
call sub_1017698  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea eax [esi+14h] +
push edi  +
xor ebx ebx +
push eax  +
mov [ebp+var_7C] ebx +
mov [ebp+var_90] eax +
call ds:RtlEnterCriticalSection  +
inc dword ptr [esi+38h]  +
push 4  +
push ebx  +
push ebx  +
call ds:OpenSCManagerW  +
mov edi eax +
mov [ebp+hSCManager] edi +
cmp edi ebx +
jnz loc_101773F  +
call ds:__imp_GetLastError  +
mov [ebp+var_74] eax +
jmp loc_1017B53  +
lea eax [ebp+var_88] +
push eax  +
lea eax [ebp+var_8C] +
push eax  +
push edi  +
call sub_1016DF2  +
mov [ebp+var_74] eax +
cmp eax ebx +
jz loc_1017766  +
push edi  +
call ds:CloseServiceHandle  +
jmp loc_1017B53  +
push 3Ch  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+lParam] 5 +
mov [ebp+var_C4] ebx +
mov [ebp+var_C8] ebx +
cmp [esi+10h] ebx +
jnz loc_101779D  +
push ebx  +
push dword ptr [esi+0Ch]  +
call ds:ShowWindow  +
mov edi ds:SendMessageW +
mov [ebp+var_78] ebx +
cmp [ebp+var_88] ebx +
jbe loc_10179F1  +
mov eax [ebp+var_8C] +
add eax 24h +
mov [ebp+var_70] eax +
mov eax [ebp+var_70] +
add eax 0FFFFFFDCh +
push dword ptr [eax]  +
mov ecx esi +
mov [ebp+lpMem] eax +
call sub_1017666  +
mov [ebp+wParam] eax +
cmp eax 0FFFFFFFFh +
jz loc_101784E  +
mov [ebp+var_C8] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 104Bh  +
push dword ptr [esi+0Ch]  +
mov [ebp+lParam] 4 +
call edi  +
test eax eax +
jz loc_10179DB  +
cmp dword_101E420 3 +
mov ebx [ebp+var_AC] +
jnz loc_1017821  +
mov eax [ebx+0Ch] +
mov ecx [eax+0Ch] +
mov eax [ebp+var_70] +
cmp ecx [eax-18h] +
jz loc_1017824  +
jmp loc_1017837  +
mov eax [ebp+var_70] +
cmp dword_101E420 1 +
jnz loc_101783E  +
mov ecx [ebx+0Ch] +
mov ecx [ecx+24h] +
cmp ecx [eax] +
jz loc_101783E  +
mov [ebp+var_7C] 1 +
lea ecx [eax-24h] +
mov [ebx+0Ch] ecx +
mov ecx [esi+38h] +
mov [ebx] ecx +
jmp loc_1017951  +
push [ebp+lpMem]  +
mov ecx esi +
push dword ptr [esi+38h]  +
push [ebp+hSCManager]  +
call sub_1016F66  +
mov ebx eax +
test ebx ebx +
jnz loc_1017873  +
mov [ebp+var_74] 8 +
jmp loc_10179D9  +
mov eax [ebp+var_70] +
add eax 0FFFFFFDCh +
mov [ebp+lParam] 5 +
mov eax [eax] +
mov [ebp+var_B8] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Dh  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_AC] ebx +
call edi  +
mov [ebp+wParam] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10178BE  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1017867  +
mov eax [ebp+var_78] +
cmp eax dword_101E420 +
jnz loc_10178F6  +
xor edx edx +
xor ecx ecx +
cmp dword_101E424 ecx +
mov eax 200h +
setnl dl  +
dec edx  +
and edx eax +
add edx eax +
push edx  +
push [ebp+var_78]  +
push ecx  +
push ecx  +
push 101Fh  +
push dword ptr [esi+0Ch]  +
call edi  +
push eax  +
call sub_1007617  +
mov eax [ebp+var_70] +
mov [ebp+var_100] 2 +
mov eax [eax-20h] +
mov [ebp+var_F4] eax +
lea eax [ebp+var_108] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_7C] 1 +
push 1074h  +
push dword ptr [esi+0Ch]  +
call edi  +
mov eax [ebx+4] +
mov [ebp+var_F4] eax +
lea eax [ebp+var_108] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_100] 4 +
push 1074h  +
push dword ptr [esi+0Ch]  +
call edi  +
mov eax [ebp+var_70] +
add ebx 8 +
push ebx  +
push dword ptr [eax-18h]  +
mov ecx esi +
call sub_10172E4  +
mov [ebp+var_74] eax +
test eax eax +
jz loc_101796C  +
mov dword ptr [ebx] offset WindowName +
mov eax [ebx] +
mov [ebp+var_F4] eax +
lea eax [ebp+var_108] +
push eax  +
push [ebp+wParam]  +
mov ebx 1074h +
push ebx  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_100] 3 +
call edi  +
mov eax [ebp+var_70] +
mov eax [eax] +
test eax eax +
jnz loc_10179A2  +
mov [ebp+var_68] ax +
jmp loc_10179B6  +
push eax  +
push offset aU  +
lea eax [ebp+var_68] +
push 32h  +
push eax  +
call sub_100196B  +
add esp 10h +
lea eax [ebp+var_68] +
mov [ebp+var_F4] eax +
lea eax [ebp+var_108] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_100] 1 +
push ebx  +
push dword ptr [esi+0Ch]  +
call edi  +
xor ebx ebx +
inc [ebp+var_78]  +
mov eax [ebp+var_78] +
add [ebp+var_70] 2Ch +
cmp eax [ebp+var_88] +
jb loc_10177BE  +
push [ebp+hSCManager]  +
call ds:CloseServiceHandle  +
push ebx  +
push ebx  +
push 1004h  +
push dword ptr [esi+0Ch]  +
mov [ebp+lParam] 4 +
mov [ebp+wParam] ebx +
call edi  +
test eax eax +
jle loc_1017AA3  +
mov eax [ebp+wParam] +
mov [ebp+var_C8] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 104Bh  +
push dword ptr [esi+0Ch]  +
call edi  +
test eax eax +
jz loc_1017A8B  +
mov eax [ebp+var_AC] +
mov ecx [eax] +
mov [ebp+lpMem] eax +
cmp ecx [esi+38h] +
jz loc_1017A8B  +
mov eax [eax+4] +
lea ecx [esi+3080h] +
cmp ecx eax +
jz loc_1017A69  +
xor ecx ecx +
cmp cx [eax] +
jz loc_1017A69  +
push eax  +
call ds:free  +
pop ecx  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push ebx  +
push [ebp+wParam]  +
push 1008h  +
push dword ptr [esi+0Ch]  +
call edi  +
dec [ebp+wParam]  +
inc [ebp+wParam]  +
push ebx  +
push ebx  +
push 1004h  +
push dword ptr [esi+0Ch]  +
call edi  +
cmp [ebp+wParam] eax +
jl loc_1017A1E  +
push dword ptr [esi+10h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_8C] +
mov [esi+10h] eax +
cmp [ebp+var_7C] ebx +
jz loc_1017AD2  +
push offset loc_1016ECE  +
push esi  +
push 1030h  +
push dword ptr [esi+0Ch]  +
call edi  +
push ebx  +
push 43Ah  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
mov edi ds:ShowWindow +
push eax  +
call edi  +
push 5  +
push dword ptr [esi+0Ch]  +
call edi  +
add esi 3288h +
cmp [esi] ebx +
jz loc_1017B53  +
mov [esi] ebx +
cmp dword_101FDAC ebx +
jz loc_1017B53  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_1017B12  +
test al al +
jnz loc_1017B53  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1017B53  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
cmp ebx dword_101FDA0 +
jnz loc_1017B53  +
cmp eax ecx +
jnz loc_1017B53  +
push 2  +
push offset loc_100D5C0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
push [ebp+var_90]  +
call ds:RtlLeaveCriticalSection  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_74] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1 +
jnz loc_1017B8F  +
mov ecx [ebp+0Ch] +
cmp dword ptr [ecx+10h] 0 +
jz loc_1017B8F  +
call sub_10176E9  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_210] 0 +
cmp [ebp+arg_0] 0DB4h +
push esi  +
mov esi ecx +
jnz loc_1017BDE  +
call sub_10176E9  +
mov esi [esi+2Ch] +
test esi esi +
jz loc_1017CC3  +
push esi  +
call ds:SetEvent  +
jmp loc_1017CC3  +
push edi  +
lea edi [esi+14h] +
push edi  +
call ds:RtlEnterCriticalSection  +
push 0  +
push dword ptr [esi+0Ch]  +
call sub_10170B1  +
test eax eax +
jnz loc_1017C03  +
push edi  +
call ds:RtlLeaveCriticalSection  +
jmp loc_1017CC2  +
mov eax [eax+0Ch] +
mov esi [eax+0Ch] +
push ebx  +
push dword ptr [eax]  +
mov ebx [eax+24h] +
push 104h  +
lea eax [ebp+ServiceName] +
push eax  +
call sub_1001A1B  +
test eax eax +
jge loc_1017C2D  +
xor eax eax +
mov [ebp+ServiceName] ax +
push edi  +
call ds:RtlLeaveCriticalSection  +
mov eax [ebp+arg_0] +
sub eax 0DB5h +
jz loc_1017C7D  +
dec eax  +
jz loc_1017C5F  +
dec eax  +
jnz loc_1017CA4  +
cmp esi 1 +
jz loc_1017CA4  +
push ebx  +
push 0FFFFFFFFh  +
push 401h  +
push hWnd  +
call ds:PostMessageW  +
jmp loc_1017CA4  +
lea eax [ebp+ServiceName] +
push eax  +
call sub_10171A0  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_1017CA4  +
push eax  +
push 0DC6h  +
jmp loc_1017C99  +
lea eax [ebp+ServiceName] +
push eax  +
call sub_101712A  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_1017CA4  +
push eax  +
push 0DC5h  +
push hWnd  +
call sub_100ED2D  +
push [ebp+var_210]  +
lea eax [ebp+ServiceName] +
push eax  +
push [ebp+arg_0]  +
push 2  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
pop ebx  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_101FAC0  +
push [ebp+arg_0]  +
push offset loc_10176C4  +
call ds:TrySubmitThreadpoolCallback  +
test eax eax +
jnz loc_1017CFA  +
push eax  +
call ds:MessageBeep  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:CallbackMayRunLong  +
push dword ptr [ebp+0Ch]  +
mov ecx dword_101E550 +
call sub_1017B9A  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 3Ch +
push esi  +
mov esi 0DAFh +
cmp eax esi +
jz loc_1017D69  +
cmp eax 0DB3h +
jbe loc_1017DC0  +
cmp eax 0DB7h +
ja loc_1017DC0  +
push offset dword_101FAC0  +
push eax  +
push offset loc_1017D03  +
call ds:TrySubmitThreadpoolCallback  +
test eax eax +
jnz loc_1017DC0  +
push eax  +
call ds:MessageBeep  +
jmp loc_1017DC0  +
push 38h  +
lea eax [ebp+ExecInfo.fMask] +
push 0  +
push eax  +
call memset  +
mov eax hWnd +
mov [ebp+ExecInfo.hwnd] eax +
add esp 0Ch +
lea eax [ebp+ExecInfo] +
push eax  +
mov [ebp+ExecInfo.cbSize] 3Ch +
mov [ebp+ExecInfo.fMask] 600h +
mov [ebp+ExecInfo.lpVerb] offset aOpen +
mov [ebp+ExecInfo.lpFile] offset aSystemrootSy_1 +
mov [ebp+ExecInfo.nShow] 1 +
call ds:ShellExecuteExW  +
push 0  +
push 0  +
push esi  +
push 2  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp dword_101FDAC ebx +
jz loc_1017E78  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_1017E35  +
cmp al bl +
jnz loc_1017E78  +
mov ecx dword_101FD9C +
mov edx 80010000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1017E78  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_101FDA0 +
jnz loc_1017E78  +
cmp eax ecx +
jnz loc_1017E78  +
push 2  +
push offset dword_100D5B0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
xor edi edi +
inc edi  +
push 2  +
mov [esi+3288h] edi +
call sub_100561E  +
push eax  +
call sub_101AD9E  +
mov eax [esi+4] +
cmp eax ebx +
jnz loc_1017E9F  +
mov eax 80004005h +
jmp loc_1017F77  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
call ds:SetWindowPos  +
push 5  +
push dword ptr [esi+4]  +
call ds:ShowWindow  +
cmp [esi+10h] ebx +
jnz loc_1017ED0  +
mov ecx esi +
call sub_101723C  +
push 0DB4h  +
mov ecx esi +
call sub_1017D28  +
call ds:GetFocus  +
cmp eax [esi+8] +
jz loc_1017EE4  +
push dword ptr [esi+0Ch]  +
call ds:SetFocus  +
push 0DAEh  +
push hInstance  +
call ds:LoadMenuW  +
mov esi eax +
cmp esi ebx +
jnz loc_1017F02  +
call sub_100DD74  +
jmp loc_1017F77  +
push edi  +
call ds:SHELL32_100  +
test eax eax +
jz loc_1017F30  +
push ebx  +
push 9C41h  +
push esi  +
call ds:DeleteMenu  +
test eax eax +
jnz loc_1017F30  +
call sub_100DD74  +
push esi  +
mov edi eax +
call ds:DestroyMenu  +
mov eax edi +
jmp loc_1017F77  +
push hWnd  +
call ds:GetMenu  +
test byte ptr dword_101E458 10h +
mov edi eax +
mov [ebp-4] ebx +
jnz loc_1017F63  +
push esi  +
push hWnd  +
call ds:SetMenu  +
test eax eax +
jnz loc_1017F63  +
call sub_100DD74  +
mov [ebp-4] eax +
mov hMenu esi +
cmp edi ebx +
jz loc_1017F74  +
push edi  +
call ds:DestroyMenu  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
call ds:CallbackMayRunLong  +
mov esi [ebp+0Ch] +
push dword ptr [esi+4]  +
push 0  +
call ds:DuplicateIcon  +
test eax eax +
jz loc_1017FB3  +
push eax  +
push dword ptr [esi+8]  +
push 40Ch  +
push dword ptr [esi]  +
call ds:PostMessageW  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101E450 +
sub eax 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
jz loc_1017FF9  +
dec eax  +
jnz loc_1018009  +
mov eax [edi+8] +
cdq   +
push edx  +
push eax  +
mov eax [esi+8] +
cdq   +
push edx  +
push eax  +
call sub_1003196  +
jmp loc_1018005  +
push dword ptr [edi+4]  +
push dword ptr [esi+4]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1018018  +
mov eax [edi] +
cdq   +
push edx  +
push eax  +
mov eax [esi] +
cdq   +
push edx  +
push eax  +
call sub_1003196  +
cmp dword_101E454 0 +
pop edi  +
pop esi  +
jle loc_1018025  +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1017FCD  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_1018078  +
push esi  +
mov eax [ebp+arg_0] +
lea esi [eax+edi*4] +
push dword ptr [esi]  +
call ds:IsIconic  +
test eax eax +
jz loc_1018071  +
push 9  +
push dword ptr [esi]  +
call ds:ShowWindowAsync  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_1018055  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push esi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
push 4  +
call ds:BeginDeferWindowPos  +
mov [ebp+hWinPosInfo] eax +
test eax eax +
jz loc_10181B1  +
push ebx  +
push edi  +
push 9C41h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov eax dword_101E0C0 +
mov edi [ebp+Rect.right] +
mov ebx [ebp+Rect.bottom] +
add eax eax +
push 41Dh  +
push dword ptr [esi+4]  +
sub edi eax +
sub edi [ebp+var_14] +
sub ebx eax +
sub ebx [ebp+var_10] +
call ds:GetDlgItem  +
lea ecx [ebp+var_2C] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov eax [ebp+Points.y] +
sub eax dword_101E0C0 +
push 16h  +
sub eax [ebp+var_28] +
add eax ebx +
push eax  +
mov eax [ebp+var_14] +
sub eax [ebp+var_2C] +
add eax edi +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
and [ebp+hWnd] 0 +
mov eax [ebp+hWnd] +
push ds:dword_10181B4[eax]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
lea ecx [ebp+var_3C] +
push ecx  +
push eax  +
mov [ebp+var_C] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+var_3C] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov ecx [ebp+var_38] +
push 15h  +
xor eax eax +
push eax  +
push eax  +
add ecx ebx +
push ecx  +
mov ecx [ebp+var_3C] +
add ecx edi +
push ecx  +
push eax  +
push [ebp+var_C]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
add [ebp+hWnd] 4 +
cmp [ebp+hWnd] 0Ch +
jb loc_101814C  +
push [ebp+hWinPosInfo]  +
call ds:EndDeferWindowPos  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 11B4h +
call __alloca_probe  +
mov eax [ebp+arg_4] +
or [ebp+hObject] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
push 0  +
push 0  +
mov dword ptr [eax] 1 +
call ds:OpenThreadWaitChainSession  +
mov [ebp+var_C] eax +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_1018217  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101820D  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_101835A  +
push [ebp+th32ProcessID]  +
push 4  +
call CreateToolhelp32Snapshot  +
mov [ebp+hSnapshot] eax +
test eax eax +
jz loc_101822D  +
cmp eax 0FFFFFFFFh +
jnz loc_1018245  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101823B  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_1018336  +
lea eax [ebp+te] +
push eax  +
push [ebp+hSnapshot]  +
mov [ebp+te.dwSize] 1Ch +
call Thread32First  +
test eax eax +
jz loc_1018260  +
xor ebx ebx +
jmp loc_1018278  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101826E  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jl loc_1018336  +
mov eax [ebp+th32ProcessID] +
cmp [ebp+te.th32OwnerProcessID] eax +
jnz loc_1018373  +
cmp [ebp+hObject] 0 +
jz loc_1018299  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1018299  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push [ebp+te.th32ThreadID]  +
push 0  +
push 40h  +
call ds:OpenThread  +
mov [ebp+hObject] eax +
test eax eax +
jz loc_1018363  +
cmp eax 0FFFFFFFFh +
jz loc_1018363  +
lea ecx [ebp+ExitCode] +
push ecx  +
push eax  +
call ds:GetExitCodeThread  +
cmp [ebp+ExitCode] 103h +
jnz loc_1018373  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_11B4] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+te.th32ThreadID]  +
xor ebx ebx +
push 7  +
push ebx  +
push [ebp+var_C]  +
mov [ebp+var_18] 10h +
call ds:GetThreadWaitChain  +
test eax eax +
jnz loc_1018315  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_101830B  +
and eax edi +
or eax esi +
mov ebx eax +
test ebx ebx +
jge loc_1018315  +
xor ebx ebx +
jmp loc_1018373  +
cmp [ebp+var_14] 0 +
jz loc_1018373  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
cmp [ebp+hObject] 0 +
jz loc_1018336  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1018336  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+hSnapshot] 0 +
jz loc_101834B  +
cmp [ebp+hSnapshot] 0FFFFFFFFh +
jz loc_101834B  +
push [ebp+hSnapshot]  +
call ds:CloseHandle  +
cmp [ebp+var_C] 0 +
jz loc_101835A  +
push [ebp+var_C]  +
call ds:CloseThreadWaitChainSession  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1018371  +
and eax edi +
or eax esi +
mov ebx eax +
lea eax [ebp+te] +
push eax  +
push [ebp+hSnapshot]  +
call Thread32Next  +
test eax eax +
jz loc_1018321  +
jmp loc_1018278  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_4] 9C6Eh +
test esi esi +
jnz loc_10183AF  +
mov edi 80004005h +
jmp loc_10184D0  +
mov eax [esi+10h] +
mov [ebp+var_4] eax +
mov eax [esi+0Ch] +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_10183F4  +
push dword ptr [esi+4]  +
call ds:IsHungAppWindow  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+var_8] eax +
jnz loc_10183F4  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+14h]  +
call sub_10181C5  +
xor eax eax +
cmp [ebp+var_8] eax +
setz al  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_10183F4  +
mov [ebp+var_4] 9D0Fh +
push ebx  +
push dword ptr [esi]  +
call ds:SetThreadDesktop  +
mov ebx 80070000h +
test eax eax +
jnz loc_1018421  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1018417  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
test edi edi +
jl loc_10184B9  +
xor eax eax +
cmp [ebp+arg_0] eax +
jnz loc_1018492  +
lea ecx [ebp+dwResult] +
push ecx  +
push 1F4h  +
push 3  +
push eax  +
push eax  +
push 10h  +
push dword ptr [esi+4]  +
call ds:SendMessageTimeoutW  +
test eax eax +
jz loc_1018448  +
xor edi edi +
jmp loc_101845F  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1018459  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
test edi edi +
jl loc_1018477  +
push 1F4h  +
call ds:Sleep  +
push dword ptr [esi+4]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_10184B9  +
xor edi edi +
push edi  +
push edi  +
push dword ptr [esi+4]  +
call ds:EndTask  +
test eax eax +
jnz loc_10184B9  +
call ds:__imp_GetLastError  +
cmp eax edi +
jmp loc_10184AE  +
push 1  +
push eax  +
push dword ptr [esi+4]  +
call ds:EndTask  +
test eax eax +
jz loc_10184A6  +
xor edi edi +
jmp loc_10184B9  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10184B7  +
and eax 0FFFFh +
or eax ebx +
mov edi eax +
cmp dword ptr [esi+18h] 0 +
pop ebx  +
jz loc_10184D0  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push edi  +
push 0  +
push [ebp+var_4]  +
push 0  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:SendMessageTimeoutW +
push edi  +
lea eax [ebp+dwResult] +
push eax  +
push 64h  +
push 3  +
xor ebx ebx +
push ebx  +
push ebx  +
push 7Fh  +
push [ebp+hWnd]  +
mov [ebp+var_8] ecx +
mov [ebp+dwResult] ebx +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1018524  +
cmp [ebp+dwResult] ebx +
jnz loc_1018532  +
push 0FFFFFFDEh  +
push [ebp+hWnd]  +
call ds:GetClassLongW  +
mov [ebp+dwResult] eax +
cmp edi ebx +
jz loc_101853B  +
cmp [ebp+dwResult] ebx +
jnz loc_101854F  +
lea eax [ebp+dwResult] +
push eax  +
push 64h  +
push 3  +
push ebx  +
push 1  +
push 7Fh  +
push [ebp+hWnd]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_101855A  +
mov ecx [ebp+dwResult] +
cmp ecx ebx +
jnz loc_101856E  +
push 0FFFFFFF2h  +
push [ebp+hWnd]  +
call ds:GetClassLongW  +
mov ecx eax +
mov [ebp+dwResult] ecx +
cmp ecx ebx +
jz loc_10185E9  +
mov eax [ebp+var_8] +
cmp [eax+20h] ecx +
jz loc_10185E9  +
push 0Ch  +
push ebx  +
mov [eax+20h] ecx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_10185E9  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
mov eax [ebp+var_8] +
mov ecx [eax+24h] +
push offset dword_101FAC0  +
mov [esi] ecx +
mov ecx [ebp+dwResult] +
push esi  +
push offset loc_1017F81  +
mov [esi+4] ecx +
mov [esi+8] eax +
call ds:TrySubmitThreadpoolCallback  +
test eax eax +
jnz loc_10185D4  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10185D2  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jl loc_10185D6  +
xor esi esi +
cmp esi ebx +
jz loc_10185E9  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov edi ecx +
mov [ebp-8] edi +
mov esi 80010000h +
cmp dword_101FDAC ebx +
jz loc_101865F  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_1018622  +
cmp al bl +
jnz loc_101865F  +
mov ecx dword_101FD9C +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_101865F  +
mov ecx dword_101FDA4 +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_101FDA0 +
jnz loc_101865F  +
cmp eax ecx +
jnz loc_101865F  +
push ebx  +
push offset dword_100D5B0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
push ebx  +
call sub_100561E  +
push eax  +
call sub_101AD9E  +
push 5  +
push dword ptr [edi+4]  +
call ds:ShowWindow  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [edi+4]  +
call ds:SetWindowPos  +
push hWnd  +
call ds:GetMenu  +
push 6Ah  +
push hInstance  +
mov [ebp-4] eax +
call ds:LoadMenuW  +
mov edi eax +
cmp edi ebx +
jz loc_10186C5  +
push offset dword_1005648  +
call ds:SHLWAPI_618  +
test eax eax +
jz loc_10186C5  +
push ebx  +
push 9C41h  +
push edi  +
call ds:DeleteMenu  +
test byte ptr dword_101E458 10h +
mov hMenu edi +
jnz loc_10186E1  +
push edi  +
push hWnd  +
call ds:SetMenu  +
cmp [ebp-4] ebx +
jz loc_10186EF  +
push dword ptr [ebp-4]  +
call ds:DestroyMenu  +
call ds:GetFocus  +
mov ecx [ebp-8] +
cmp eax [ecx+8] +
jz loc_1018712  +
push 41Dh  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
cmp dword_101FDAC ebx +
jz loc_1018764  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_1018727  +
cmp al bl +
jnz loc_1018764  +
mov ecx dword_101FD9C +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1018764  +
mov ecx dword_101FDA4 +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_101FDA0 +
jnz loc_1018764  +
cmp eax ecx +
jnz loc_1018764  +
push ebx  +
push offset loc_100D5C0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
push 41Dh  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
xor ebx ebx +
push ebx  +
push ebx  +
push 1032h  +
push eax  +
mov [ebp+hWnd] eax +
call esi  +
mov [ebp+var_14] eax +
cmp eax ebx +
jnz loc_10187A8  +
xor eax eax +
jmp loc_1018827  +
push 4  +
call ds:COMCTL32_328  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_10187A4  +
or [ebp+wParam] 0FFFFFFFFh +
cmp [ebp+var_14] ebx +
push edi  +
mov [ebp+var_4] ebx +
jle loc_1018823  +
push 2  +
push [ebp+wParam]  +
push 100Ch  +
push [ebp+hWnd]  +
call esi  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101882B  +
push 38h  +
lea eax [ebp+var_4C] +
push ebx  +
push eax  +
mov [ebp+wParam] edi +
mov [ebp+lParam] 4 +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 104Bh  +
push [ebp+hWnd]  +
mov [ebp+var_4C] edi +
call esi  +
test eax eax +
jz loc_101882B  +
push [ebp+var_30]  +
mov ecx [ebp+var_8] +
call sub_1001F49  +
test eax eax +
jz loc_101882B  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_14] +
jl loc_10187C4  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push [ebp+var_8]  +
call ds:COMCTL32_329  +
xor eax eax +
jmp loc_1018826  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 41Dh  +
push dword ptr [esi+4]  +
mov [ebp+var_8] esi +
call ds:GetDlgItem  +
mov ecx esi +
mov edi eax +
call sub_1018770  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101897E  +
mov eax 0FFFFh +
xor ebx ebx +
mov ecx eax +
inc ebx  +
cmp cx word ptr [ebp+arg_0] +
jnz loc_10188C2  +
cmp ax word ptr [ebp+arg_4] +
jnz loc_10188C2  +
mov esi ds:SendMessageW +
push 2  +
push 0FFFFFFFFh  +
push 100Ch  +
push edi  +
call esi  +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
push 100Eh  +
push edi  +
mov [ebp+Points.x] ebx +
call esi  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push 0  +
push edi  +
call ds:MapWindowPoints  +
mov eax [ebp+var_10] +
mov [ebp+arg_0] eax +
mov eax [ebp+var_C] +
mov [ebp+arg_4] eax +
push 75h  +
push hInstance  +
call sub_100DC14  +
mov edi eax +
test edi edi +
jz loc_1018973  +
push 0  +
push 9C6Ch  +
push edi  +
call ds:SetMenuDefaultItem  +
mov eax [ebp+var_4] +
mov eax [eax] +
cmp eax 2 +
jge loc_1018914  +
mov esi ds:EnableMenuItem +
push 3  +
push 9C69h  +
push edi  +
call esi  +
push 3  +
push 9C6Ah  +
push edi  +
call esi  +
push 3  +
push 755Bh  +
jmp loc_1018943  +
cmp eax ebx +
jz loc_1018946  +
mov esi ds:EnableMenuItem +
push 3  +
push 9C6Fh  +
push edi  +
call esi  +
push 3  +
push 9C6Dh  +
push edi  +
call esi  +
push 3  +
push 9CC3h  +
push edi  +
call esi  +
push 3  +
push 9C6Ch  +
push edi  +
call esi  +
mov eax [ebp+var_8] +
xor esi esi +
push esi  +
mov [eax+10h] ebx +
mov dword_101FDBC ebx +
push dword ptr [eax+4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call ds:TrackPopupMenuEx  +
push edi  +
mov dword_101FDBC esi +
call ds:DestroyMenu  +
push [ebp+var_4]  +
call ds:COMCTL32_329  +
jmp loc_10189D8  +
push 77h  +
push hInstance  +
call sub_100DC14  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_10189D8  +
push offset dword_1005648  +
call ds:SHLWAPI_618  +
test eax eax +
jz loc_10189AF  +
push ebx  +
push 9C41h  +
push edi  +
call ds:DeleteMenu  +
push ebx  +
mov dword_101FDBC 1 +
push dword ptr [esi+4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ebx  +
push edi  +
call ds:TrackPopupMenuEx  +
push edi  +
mov dword_101FDBC ebx +
call ds:DestroyMenu  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+lpString]  +
mov [ebp+var_4] ecx +
xor ebx ebx +
call ds:lstrlenW  +
mov edi ds:HeapAlloc +
mov esi eax +
inc esi  +
cmp [ebp+lpString] ebx +
jz loc_1018A1D  +
lea eax [esi+esi] +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_1018A63  +
push 0Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov edi eax +
test edi edi +
jz loc_1018A4F  +
mov [edi+4] ebx +
test ebx ebx +
jz loc_1018A41  +
push [ebp+lpString]  +
push esi  +
push ebx  +
call sub_1001A1B  +
mov eax [ebp+var_4] +
mov ecx [eax+48h] +
mov [edi+8] ecx +
mov [eax+48h] edi +
xor ebx ebx +
test ebx ebx +
jz loc_1018A63  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push 38h  +
lea eax [ebp+var_54] +
push esi  +
push eax  +
mov ebx ecx +
mov [ebp+var_58] esi +
call memset  +
add esp 0Ch +
push 41Dh  +
push dword ptr [ebx+4]  +
call ds:GetDlgItem  +
mov ecx [ebx+0Ch] +
mov [ebp+hWnd] eax +
xor eax eax +
mov [ebp+lParam] esi +
lea edi [ebp+var_18] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ecx] +
dec eax  +
js loc_1018B5D  +
mov ecx [ecx+4] +
mov esi [ebp+arg_0] +
lea ecx [ecx+eax*4] +
cmp esi [ecx] +
jz loc_1018AD5  +
dec eax  +
sub ecx 4 +
test eax eax +
jl loc_1018B5D  +
jmp loc_1018AC3  +
mov eax [esi+18h] +
push [ebp+hIcon]  +
xor edi edi +
inc edi  +
test eax eax +
jnz loc_1018AF6  +
push 0FFFFFFFFh  +
push dword ptr [ebx+14h]  +
call ds:ImageList_ReplaceIcon  +
test eax eax +
jl loc_1018B5D  +
mov [esi+18h] eax +
jmp loc_1018B03  +
push eax  +
push dword ptr [ebx+14h]  +
call ds:ImageList_ReplaceIcon  +
or [esi+28h] edi +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 1053h  +
push [ebp+hWnd]  +
mov [ebp+lParam] edi +
mov edi ds:SendMessageW +
mov [ebp+var_14] esi +
call edi  +
test eax eax +
jl loc_1018B47  +
mov ecx [esi+18h] +
mov [ebp+var_54] eax +
lea eax [ebp+var_58] +
push eax  +
push 0  +
push 104Ch  +
push [ebp+hWnd]  +
mov [ebp+var_58] 2 +
mov [ebp+var_3C] ecx +
call edi  +
test eax eax +
jnz loc_1018B5D  +
or dword ptr [esi+28h] 8 +
push 0  +
push 64h  +
push 22Dh  +
push dword ptr [ebx+4]  +
call ds:SetTimer  +
push [ebp+hIcon]  +
call ds:DestroyIcon  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+34h] edi +
jz loc_1018B90  +
push edi  +
push edi  +
push 1Ah  +
push dword ptr [esi+4]  +
call ds:PostMessageW  +
jmp loc_1018BE2  +
push ebx  +
mov ebx [esi+10h] +
mov dword ptr [esi+10h] 1 +
call sub_1008E65  +
push dword ptr [esi+0Ch]  +
call ds:COMCTL32_337  +
push 0FFFFFFFFh  +
push dword ptr [esi+14h]  +
call ds:ImageList_Remove  +
mov edi ds:GetSystemMetrics +
push 32h  +
call edi  +
push eax  +
push 31h  +
call edi  +
push eax  +
push dword ptr [esi+14h]  +
call ds:ImageList_SetIconSize  +
mov ecx esi +
call sub_1006781  +
mov eax [esi] +
mov ecx esi +
mov [esi+10h] ebx +
call dword ptr [eax+18h]  +
xor edi edi +
inc edi  +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push edi  +
cmp [ebp+arg_0] ebx +
jz loc_1018C0D  +
call sub_1018770  +
mov edi eax +
cmp edi ebx +
jnz loc_1018C25  +
xor eax eax +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
mov ecx [ecx+0Ch] +
push ebx  +
push ecx  +
call ds:COMCTL32_331  +
mov edi eax +
cmp edi ebx +
jnz loc_1018C25  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
jmp loc_1018C05  +
mov eax [edi] +
push esi  +
mov esi [ebp+arg_4] +
mov [esi] eax +
cmp eax ebx +
jnz loc_1018C3D  +
push edi  +
call ds:COMCTL32_329  +
mov eax ebx +
pop esi  +
jmp loc_1018C07  +
shl eax 2 +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
cmp eax ebx +
jnz loc_1018C57  +
mov [esi] ebx +
jmp loc_1018C6D  +
xor ecx ecx +
cmp [esi] ebx +
jbe loc_1018C6D  +
mov edx [edi+4] +
mov edx [edx+ecx*4] +
mov edx [edx] +
mov [eax+ecx*4] edx +
inc ecx  +
cmp ecx [esi] +
jb loc_1018C5D  +
mov ebx eax +
jmp loc_1018C31  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax [ebp+cKids] +
push ebx  +
push esi  +
push edi  +
mov esi 9C69h +
mov ebx ecx +
xor edi edi +
cmp eax esi +
mov [ebp+var_4] ebx +
jg loc_1018DFF  +
jz loc_1018DB3  +
cmp eax 418h +
jz loc_1019051  +
cmp eax 419h +
jz loc_1018FDC  +
cmp eax 41Ah +
jz loc_1018EAC  +
cmp eax 755Bh +
jz loc_1018D64  +
lea ecx [esi-28h] +
cmp eax ecx +
jz loc_1018D4F  +
cmp eax 9C66h +
jle loc_1018D45  +
cmp eax 9C68h +
jg loc_1018D45  +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [ebx+18h]  +
mov ecx ebx +
call sub_1018BEC  +
mov ebx eax +
cmp ebx edi +
jz loc_1018D31  +
xor esi esi +
cmp [ebp+var_10] edi +
jbe loc_1018D22  +
xor eax eax +
cmp [ebp+cKids] 9C67h +
setnz al  +
dec eax  +
and eax 3 +
add eax 3 +
mov [ebp+hWnd] eax +
push [ebp+hWnd]  +
push dword ptr [ebx+esi*4]  +
call ds:ShowWindowAsync  +
inc esi  +
cmp esi [ebp+var_10] +
jb loc_1018D10  +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push edi  +
push edi  +
push [ebp+cKids]  +
push edi  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
mov ebx [ebp+var_4] +
mov [ebx+10h] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push edi  +
push ecx  +
push 111h  +
push hWnd  +
call ds:SendMessageW  +
jmp loc_1018D45  +
lea eax [ebp+cKids] +
push eax  +
push dword ptr [ebx+18h]  +
call sub_1018BEC  +
mov esi eax +
cmp esi edi +
jz loc_1018D81  +
push [ebp+cKids]  +
mov ecx ebx +
push esi  +
call sub_1018047  +
push esi  +
push [ebp+cKids]  +
push edi  +
push edi  +
call ds:GetDesktopWindow  +
push eax  +
call ds:TileWindows  +
cmp esi edi +
jz loc_1018DA7  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push edi  +
push edi  +
push 755Bh  +
jmp loc_1018E9B  +
lea eax [ebp+cKids] +
push eax  +
push dword ptr [ebx+18h]  +
call sub_1018BEC  +
mov ebx eax +
cmp ebx edi +
jz loc_1018DD1  +
push [ebp+cKids]  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_1018047  +
push ebx  +
push [ebp+cKids]  +
push edi  +
push edi  +
call ds:GetDesktopWindow  +
push eax  +
call ds:CascadeWindows  +
cmp ebx edi +
jz loc_1018DF7  +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push edi  +
push edi  +
push esi  +
jmp loc_1018D36  +
sub eax 9C6Ah +
jz loc_10190F1  +
dec eax  +
dec eax  +
jz loc_1019051  +
dec eax  +
jz loc_1018FDC  +
dec eax  +
jz loc_1018EAC  +
dec eax  +
jz loc_1018E2C  +
sub eax 54h +
jnz loc_1018D45  +
lea eax [ebp+hWnd] +
push eax  +
push 1  +
call sub_1018BEC  +
mov [ebp+hWnd] eax +
cmp eax edi +
jz loc_1018E96  +
mov esi [eax] +
push esi  +
mov [ebp+dwProcessId] edi +
call ds:HungWindowFromGhostWindow  +
cmp eax edi +
jz loc_1018E50  +
mov esi eax +
lea eax [ebp+dwProcessId] +
push eax  +
push esi  +
call ds:GetWindowThreadProcessId  +
cmp [ebp+dwProcessId] edi +
jz loc_1018E85  +
cmp [ebp+cKids] 9CC3h +
push [ebp+dwProcessId]  +
push eax  +
jnz loc_1018E74  +
push 405h  +
jmp loc_1018E79  +
push 401h  +
push hWnd  +
call ds:PostMessageW  +
push [ebp+hWnd]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push edi  +
push edi  +
push [ebp+cKids]  +
push edi  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
jmp loc_1018D45  +
lea eax [ebp+hWnd] +
push eax  +
push 1  +
call sub_1018BEC  +
or [ebp+var_18] 0FFFFFFFFh +
push 11h  +
mov [ebp+var_10] eax +
call ds:GetKeyState  +
movsx ebx ax +
shr ebx 10h +
and ebx 1 +
cmp [ebp+var_10] edi +
jz loc_1018D42  +
cmp ebx edi +
jz loc_1018EE3  +
add [ebp+cKids] 10000h +
mov [ebp+var_C] edi +
cmp [ebp+hWnd] edi +
jbe loc_1018FC6  +
mov ecx [ebp+var_C] +
mov eax [ebp+var_10] +
mov eax [eax+ecx*4] +
mov esi ds:GetWindowThreadProcessId +
lea ecx [ebp+dwProcessId] +
push ecx  +
push eax  +
mov [ebp+var_14] eax +
mov [ebp+dwProcessId] edi +
call esi  +
push [ebp+var_14]  +
call ds:HungWindowFromGhostWindow  +
cmp eax edi +
jz loc_1018F1F  +
lea ecx [ebp+dwProcessId] +
push ecx  +
push eax  +
call esi  +
mov eax [ebp+var_18] +
cmp [ebp+dwProcessId] eax +
jz loc_1018FB7  +
push 1Ch  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_1018F4A  +
lea esi [ebp+var_38] +
mov [ebp+var_18] edi +
jmp loc_1018F51  +
mov [ebp+var_18] 1 +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
mov [esi] eax +
mov eax [ebp+var_14] +
mov [esi+4] eax +
mov eax [ebp+cKids] +
mov [esi+8] edi +
mov [esi+0Ch] ebx +
mov [esi+10h] eax +
mov eax [ebp+dwProcessId] +
mov [esi+14h] eax +
cmp [ebp+var_18] edi +
jz loc_1018FA8  +
push edi  +
push 11h  +
push esi  +
push offset sub_101838D  +
mov dword ptr [esi+18h] 1 +
call ds:SHCreateThread  +
test eax eax +
jnz loc_1018FB1  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1018FB1  +
push esi  +
mov [esi+18h] edi +
call sub_101838D  +
mov eax [ebp+dwProcessId] +
mov [ebp+var_18] eax +
inc [ebp+var_C]  +
mov eax [ebp+var_C] +
cmp eax [ebp+hWnd] +
jb loc_1018EEF  +
push [ebp+var_10]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1018D42  +
lea eax [ebp+hWnd] +
push eax  +
push 1  +
call sub_1018BEC  +
mov esi eax +
cmp esi edi +
jz loc_1018E96  +
mov ebx [ebp+hWnd] +
mov ecx [ebp+var_4] +
push ebx  +
push esi  +
call sub_1018047  +
dec ebx  +
cmp ebx edi +
jl loc_1019019  +
push 4003h  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [esi+ebx*4]  +
call ds:SetWindowPos  +
dec ebx  +
jns loc_1019003  +
lea eax [ebp+hWnd] +
push eax  +
push dword ptr [esi]  +
call ds:GetWindowThreadProcessId  +
test eax eax +
jz loc_1019032  +
push [ebp+hWnd]  +
call ds:AllowSetForegroundWindow  +
push dword ptr [esi]  +
call ds:SetForegroundWindow  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ebx [ebp+var_4] +
jmp loc_1018E96  +
lea eax [ebp+hWnd] +
push eax  +
push dword ptr [ebx+18h]  +
call sub_1018BEC  +
mov esi eax +
cmp esi edi +
jz loc_1018E96  +
push dword ptr [esi]  +
call ds:IsIconic  +
test eax eax +
jz loc_101907D  +
push 9  +
push dword ptr [esi]  +
call ds:ShowWindowAsync  +
push dword ptr [esi]  +
call ds:GetLastActivePopup  +
push eax  +
mov [ebp+hWnd] eax +
call ds:IsWindow  +
test eax eax +
jnz loc_10190AE  +
push edi  +
call ds:MessageBeep  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1018D45  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
test eax 8000000h +
jnz loc_10190E4  +
push 1  +
push [ebp+hWnd]  +
call ds:SwitchToThisWindow  +
test byte ptr dword_101E458 1 +
jz loc_10190EB  +
push 6  +
push hWnd  +
call ds:ShowWindow  +
jmp loc_10190EB  +
push edi  +
call ds:MessageBeep  +
push esi  +
jmp loc_1018E88  +
lea eax [ebp+cKids] +
push eax  +
push dword ptr [ebx+18h]  +
call sub_1018BEC  +
mov esi eax +
cmp esi edi +
jz loc_101910E  +
push [ebp+cKids]  +
mov ecx ebx +
push esi  +
call sub_1018047  +
push esi  +
push [ebp+cKids]  +
push edi  +
push 1  +
call ds:GetDesktopWindow  +
push eax  +
call ds:TileWindows  +
cmp esi edi +
jz loc_1019135  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push edi  +
push edi  +
push 9C6Ah  +
jmp loc_1018E9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
mov edi [ebp+14h] +
mov esi [ebp+0Ch] +
push edi  +
push dword ptr [ebp+10h]  +
mov [ebp-4] eax +
push esi  +
call sub_1001A01  +
cmp eax 1 +
jnz loc_101917B  +
xor eax eax +
inc eax  +
jmp loc_101938A  +
mov eax 111h +
cmp esi eax +
ja loc_10192B7  +
jz loc_10192A5  +
cmp esi 5 +
jz loc_1019298  +
cmp esi 15h +
jz loc_101927B  +
cmp esi 1Ah +
jz loc_101926B  +
cmp esi 4Eh +
jz loc_101925D  +
cmp esi 7Bh +
jz loc_1019230  +
cmp esi 110h +
jnz loc_1019388  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:SetWindowLongW  +
push 41Dh  +
mov [edi+4] ebx +
push ebx  +
mov ebx ds:GetDlgItem +
call ebx  +
mov esi ds:SendMessageW +
push 10020h  +
push 0  +
push 1036h  +
push eax  +
mov [ebp+10h] eax +
call esi  +
push dword ptr [edi+14h]  +
push 1  +
push 1003h  +
push dword ptr [ebp+10h]  +
call esi  +
push offset dword_1005648  +
call ds:SHLWAPI_618  +
test eax eax +
jz loc_1019388  +
push 0  +
push 9C41h  +
push dword ptr [ebp+8]  +
call ebx  +
push eax  +
call ds:EnableWindow  +
jmp loc_1019388  +
push 41Dh  +
push ebx  +
call ds:GetDlgItem  +
cmp [ebp+10h] eax +
jnz loc_1019388  +
mov ecx [ebp-4] +
mov eax edi +
shr eax 10h +
cwde   +
push eax  +
movsx eax di +
push eax  +
call sub_101883D  +
jmp loc_1019173  +
***
mov ecx [ebp-4] +
push edi  +
call sub_1005232  +
jmp loc_101938A  +
mov ecx [ebp-4] +
call sub_1018B74  +
test eax eax +
jz loc_1019173  +
push edi  +
push dword ptr [ebp+10h]  +
push esi  +
push 41Dh  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
jmp loc_1019173  +
***
mov ecx [ebp-4] +
call sub_1018082  +
jmp loc_1019173  +
***
movzx eax word ptr [ebp+10h] +
mov ecx [ebp-4] +
push eax  +
call sub_1018C76  +
jmp loc_1019388  +
mov eax 138h +
cmp esi eax +
ja loc_1019338  +
jz loc_10192EA  +
cmp esi 113h +
jz loc_101931F  +
cmp esi 11Fh +
jz loc_1019306  +
cmp esi 134h +
jbe loc_1019388  +
cmp esi 136h +
ja loc_1019388  +
call ds:IsThemeActive  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF6h +
add eax 0Fh +
push eax  +
call ds:GetSysColorBrush  +
jmp loc_101938A  +
mov eax [ebp+10h] +
shr eax 10h +
mov ecx 0FFFFh +
cmp ax cx +
jnz loc_1019388  +
mov eax [ebp-4] +
and dword ptr [eax+10h] 0 +
jmp loc_1019388  +
push 22Dh  +
push ebx  +
call ds:KillTimer  +
mov ecx [ebp-4] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
jmp loc_1019173  +
***
cmp esi 201h +
jb loc_1019388  +
mov eax 202h +
cmp esi eax +
jbe loc_1019362  +
cmp esi 40Ch +
jnz loc_1019388  +
mov ecx [ebp-4] +
push edi  +
push dword ptr [ebp+10h]  +
call sub_1018A6F  +
jmp loc_1019173  +
***
test byte ptr dword_101E458 10h +
jz loc_1019388  +
xor ecx ecx +
cmp esi eax +
setz cl  +
push edi  +
push 2  +
add ecx 0A1h +
push ecx  +
push hWnd  +
call ds:SendMessageW  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
sub eax 203h +
push esi  +
push edi  +
jz loc_1019446  +
dec eax  +
jnz loc_101944B  +
push 80h  +
push hInstance  +
call sub_100DC14  +
mov esi eax +
xor edi edi +
cmp esi edi +
jz loc_101944B  +
lea eax [ebp+Point] +
push eax  +
call ds:GetCursorPos  +
push hWnd  +
call ds:IsWindowVisible  +
push edi  +
push 9C80h  +
push esi  +
test eax eax +
jz loc_10193F5  +
call ds:DeleteMenu  +
jmp loc_10193FB  +
call ds:SetMenuDefaultItem  +
mov eax dword_101E458 +
and eax 4 +
add eax eax +
push eax  +
push 9C46h  +
push esi  +
call ds:CheckMenuItem  +
push [ebp+hWnd]  +
call ds:SetForegroundWindow  +
push edi  +
push [ebp+hWnd]  +
mov dword_101FDBC 1 +
push dword ptr [ebp-4]  +
push [ebp+Point]  +
push edi  +
push esi  +
call ds:TrackPopupMenuEx  +
push esi  +
mov dword_101FDBC edi +
call ds:DestroyMenu  +
jmp loc_101944B  +
call sub_100DA05  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+hWnd] +
push edi  +
push 0FFFFFFEBh  +
push esi  +
call ds:GetWindowLongW  +
mov ecx eax +
mov eax [ebp+arg_4] +
sub eax 110h +
jz loc_10194B4  +
dec eax  +
jnz loc_10194C8  +
mov edx [ebp+arg_8] +
xor edi edi +
inc edi  +
cmp dx di +
jnz loc_101949D  +
mov eax [ecx] +
push esi  +
call dword ptr [eax+4]  +
push edi  +
push esi  +
call ds:EndDialog  +
mov eax edi +
jmp loc_10194CA  +
cmp dx 2 +
jnz loc_10194A7  +
push 2  +
jmp loc_1019492  +
mov eax [ecx] +
push edx  +
shr edx 10h +
push edx  +
push esi  +
call dword ptr [eax+8]  +
jmp loc_10194C8  +
mov edi [ebp+dwNewLong] +
push edi  +
push 0FFFFFFEBh  +
push esi  +
call ds:SetWindowLongW  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax 0F0h +
mov [esi+4] ax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset aSoftwareMicros  +
push 80000001h  +
mov dword ptr [esi] offset off_100D8C0 +
mov dword ptr [esi+8] 6Ah +
mov dword ptr [esi+0Ch] 2 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1019588  +
push ebx  +
push edi  +
mov edi ds:RegQueryValueExW +
push 4  +
pop ebx  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push lpValueName  +
mov [ebp+cbData] ebx +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_1019552  +
cmp [ebp+Type] ebx +
jnz loc_1019552  +
mov eax dword ptr [ebp+Data] +
mov [esi+8] eax +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push off_101FD3C  +
mov [ebp+cbData] ebx +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_101957D  +
cmp [ebp+Type] ebx +
jnz loc_101957D  +
mov eax dword ptr [ebp+Data] +
mov [esi+0Ch] eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push offset Class  +
push esi  +
push offset aSoftwareMicros  +
mov edi ecx +
push 80000001h  +
mov dword ptr [edi] offset off_100D8C0 +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1019602  +
push 4  +
lea eax [edi+8] +
push eax  +
push 4  +
push esi  +
push lpValueName  +
mov esi ds:RegSetValueExW +
push [ebp+hKey]  +
call esi  +
push 4  +
add edi 0Ch +
push edi  +
push 4  +
push 0  +
push off_101FD3C  +
push [ebp+hKey]  +
call esi  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ds:GetDlgItem +
push edi  +
push 0  +
push 18Ch  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ecx +
call esi  +
mov edi ds:ShowWindow +
push eax  +
call edi  +
push 5  +
mov ebx 18Dh +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
or dword ptr [ebp-10h] 0FFFFFFFFh +
push 0F1h  +
push dword ptr [ebp+8]  +
call esi  +
xor ecx ecx +
mov [ebp-4] eax +
mov [ebp-8] ecx +
cmp off_101FB28 ecx +
jz loc_101971F  +
mov eax offset off_101FB28 +
mov [ebp-14h] ecx +
push dword ptr [eax]  +
push 0  +
push 143h  +
push dword ptr [ebp-4]  +
call ds:SendMessageW  +
mov [ebp-0Ch] eax +
test eax eax +
jl loc_1019719  +
mov eax [ebp-14h] +
lea eax dword_101FB2C[eax] +
push dword ptr [eax]  +
mov [ebp-14h] eax +
push dword ptr [ebp-0Ch]  +
push 151h  +
push dword ptr [ebp-4]  +
call ds:SendMessageW  +
test eax eax +
jl loc_1019706  +
mov eax [ebp-14h] +
mov eax [eax] +
mov ecx [ebp-18h] +
cmp [ecx+8] eax +
jnz loc_10196EA  +
mov ecx [ebp-0Ch] +
mov [ebp-10h] ecx +
cmp eax 6Ah +
jb loc_10196EA  +
cmp eax 6Bh +
jbe loc_10196D0  +
cmp eax 6Dh +
jnz loc_10196EA  +
push 0  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
push 5  +
push 18Ch  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
inc dword ptr [ebp-8]  +
mov eax [ebp-8] +
shl eax 3 +
mov [ebp-14h] eax +
lea eax off_101FB28[eax] +
cmp dword ptr [eax] 0 +
jz loc_1019719  +
jmp loc_101966E  +
***
push 0  +
push dword ptr [ebp-0Ch]  +
push 144h  +
push dword ptr [ebp-4]  +
call ds:SendMessageW  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1019732  +
push 0  +
push dword ptr [ebp-10h]  +
push 14Eh  +
push dword ptr [ebp-4]  +
call ds:SendMessageW  +
mov edi [ebp-18h] +
mov eax [edi+0Ch] +
mov esi ds:CheckDlgButton +
and eax 1 +
push eax  +
push 0F2h  +
push dword ptr [ebp+8]  +
call esi  +
mov eax [edi+0Ch] +
shr eax 1 +
and eax 1 +
push eax  +
push 0F3h  +
push dword ptr [ebp+8]  +
call esi  +
mov eax [edi+0Ch] +
shr eax 2 +
and eax 1 +
push eax  +
push 0F4h  +
push dword ptr [ebp+8]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0F1h  +
push ebx  +
mov esi ecx +
call ds:GetDlgItem  +
mov edi ds:SendMessageW +
mov [ebp+8] eax +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 147h  +
push dword ptr [ebp+8]  +
call edi  +
push eax  +
push 150h  +
push dword ptr [ebp+8]  +
call edi  +
mov edi ds:IsDlgButtonChecked +
and dword ptr [esi+0Ch] 0 +
push 0F2h  +
push ebx  +
mov [esi+8] eax +
call edi  +
neg eax  +
sbb eax eax +
push 0F3h  +
neg eax  +
or [esi+0Ch] eax +
push ebx  +
call edi  +
neg eax  +
sbb eax eax +
push 0F4h  +
and eax 2 +
or [esi+0Ch] eax +
push ebx  +
call edi  +
neg eax  +
sbb eax eax +
and eax 4 +
or [esi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset dword_101F354 +
xor eax eax +
cmp [esi+0Ch] eax +
setnz al  +
push eax  +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
call ds:CheckDlgButton  +
add esi 14h +
cmp esi offset word_101F3B8 +
jl loc_1019814  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
mov esi offset unk_101F374 +
push dword ptr [esi-0Ch]  +
push dword ptr [ebp+8]  +
call ds:IsDlgButtonChecked  +
cmp eax 1 +
jnz loc_1019872  +
cmp dword ptr [esi] 0 +
jnz loc_101986A  +
push ebx  +
push 5  +
call sub_101ACC4  +
mov dword ptr [esi] 1 +
jmp loc_1019875  +
and dword ptr [esi] 0 +
add esi 14h +
inc ebx  +
cmp esi offset unk_101F3C4 +
jl loc_101984C  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:GetDlgItem +
push edi  +
mov ebx ecx +
push 209h  +
lea eax [ebx+8Ah] +
push eax  +
push 0FCh  +
push dword ptr [ebp+8]  +
call esi  +
mov edi ds:GetWindowTextW +
push eax  +
call edi  +
push 41h  +
add ebx 8 +
push ebx  +
push 0FBh  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax 0FCh +
mov ecx eax +
cmp [ebp+10h] cx +
jnz loc_1019921  +
mov ecx 300h +
cmp [ebp+0Ch] cx +
jnz loc_1019921  +
push esi  +
mov esi ds:GetDlgItem +
push eax  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ds:GetWindowTextLengthW  +
neg eax  +
sbb eax eax +
neg eax  +
push eax  +
push 1  +
push dword ptr [ebp+8]  +
call esi  +
push eax  +
call ds:EnableWindow  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word ptr [ecx+4] +
push ecx  +
push offset sub_101945E  +
push [ebp+hWndParent]  +
push eax  +
push hInstance  +
call ds:DialogBoxParamW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 330h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea eax [ebp-320h] +
push eax  +
push edi  +
mov [ebp-310h] ecx +
call ds:GetParent  +
mov esi ds:GetWindowRect +
push eax  +
call esi  +
lea eax [ebp-330h] +
push eax  +
push edi  +
call esi  +
mov eax [ebp-32Ch] +
sub eax [ebp-324h] +
push 11h  +
add eax [ebp-31Ch] +
xor esi esi +
add eax [ebp-314h] +
push esi  +
cdq   +
sub eax edx +
sar eax 1 +
push esi  +
push eax  +
mov eax [ebp-330h] +
sub eax [ebp-328h] +
add eax [ebp-320h] +
add eax [ebp-318h] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push esi  +
push edi  +
call ds:SetWindowPos  +
push esi  +
mov esi ds:GetDlgItem +
push 208h  +
push 0C5h  +
push 0FCh  +
push edi  +
call esi  +
mov ebx ds:SendMessageW +
push eax  +
call ebx  +
push 0  +
push 1  +
push edi  +
call esi  +
push eax  +
call ds:EnableWindow  +
push 41h  +
lea eax [ebp-0FCh] +
push eax  +
push 9CBAh  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp-78h] +
push eax  +
call CurrentDateTimeString  +
lea eax [ebp-30Ch] +
push eax  +
lea eax [ebp-308h] +
push eax  +
push 3  +
mov dword ptr [ebp-30Ch] 105h +
call GetUserNameExW  +
test al al +
jnz loc_1019A80  +
lea eax [ebp-30Ch] +
push eax  +
lea eax [ebp-308h] +
push eax  +
push 2  +
mov dword ptr [ebp-30Ch] 105h +
call GetUserNameExW  +
test al al +
jnz loc_1019A80  +
xor eax eax +
mov [ebp-308h] ax +
mov eax [ebp-310h] +
lea ecx [ebp-78h] +
push ecx  +
lea ecx [ebp-308h] +
push ecx  +
lea ecx [ebp-0FCh] +
push ecx  +
add eax 8 +
push 41h  +
push eax  +
mov [ebp-310h] eax +
call sub_100196B  +
add esp 14h +
push dword ptr [ebp-310h]  +
push 0FBh  +
push edi  +
call ds:SetDlgItemTextW  +
push 0  +
push 40h  +
push 0C5h  +
push 0FBh  +
push edi  +
call esi  +
push eax  +
call ebx  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101FAE8 +
xor edx edx +
sub eax edx +
push esi  +
mov esi ecx +
jz loc_1019BA3  +
dec eax  +
jz loc_1019B93  +
dec eax  +
jz loc_1019B60  +
dec eax  +
jz loc_1019B3A  +
dec eax  +
jz loc_1019B16  +
xor eax eax +
jmp loc_1019BD1  +
mov eax [ebp+arg_0] +
mov ecx [eax+80h] +
mov eax offset WindowName +
cmp ecx edx +
jnz loc_1019B2A  +
mov ecx eax +
mov esi [esi+80h] +
cmp esi edx +
jz loc_1019B36  +
mov eax esi +
push ecx  +
push eax  +
jmp loc_1019B8B  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+84h] 4 +
mov eax offset WindowName +
jz loc_1019B50  +
add ecx 56h +
jmp loc_1019B52  +
mov ecx eax +
cmp dword ptr [esi+84h] 4 +
jz loc_1019B36  +
lea eax [esi+56h] +
jmp loc_1019B36  +
mov eax [ebp+arg_0] +
mov eax [eax+84h] +
mov eax ds:dword_100D8CC[eax*4] +
push lpString1[eax*4]  +
mov eax [esi+84h] +
mov eax ds:dword_100D8CC[eax*4] +
push lpString1[eax*4]  +
call ds:lstrcmpiW  +
jmp loc_1019BD1  +
mov eax [ebp+arg_0] +
push edx  +
push dword ptr [eax]  +
push edx  +
push dword ptr [esi]  +
call sub_1003196  +
jmp loc_1019BD1  +
test byte ptr dword_101E458 80h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ds:lstrcmpiW +
jz loc_1019BC5  +
lea eax [ebx+32h] +
push eax  +
lea eax [esi+32h] +
push eax  +
call edi  +
test eax eax +
jnz loc_1019BCF  +
add ebx 8 +
push ebx  +
add esi 8 +
push esi  +
call edi  +
pop edi  +
pop ebx  +
cmp dword_101F998 0 +
pop esi  +
jle loc_1019BDD  +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1019AE8  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
push 4  +
call ds:BeginDeferWindowPos  +
push 0C8Ah  +
push dword ptr [esi+4]  +
mov [ebp+hWinPosInfo] eax +
call ds:GetDlgItem  +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov eax dword_101E0C0 +
mov edi [ebp+Rect.right] +
mov ebx [ebp+Rect.bottom] +
add eax eax +
push 0BBAh  +
push dword ptr [esi+4]  +
sub edi eax +
sub edi [ebp+var_14] +
sub ebx eax +
sub ebx [ebp+var_10] +
call ds:GetDlgItem  +
lea ecx [ebp+var_2C] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov eax [ebp+Points.y] +
sub eax dword_101E0C0 +
push 16h  +
sub eax [ebp+var_28] +
add eax ebx +
push eax  +
mov eax [ebp+var_14] +
sub eax [ebp+var_2C] +
add eax edi +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+hWnd]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
and [ebp+hWnd] 0 +
mov eax [ebp+hWnd] +
push ds:dword_1019D2C[eax]  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
lea ecx [ebp+var_3C] +
push ecx  +
push eax  +
mov [ebp+var_C] eax +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+var_3C] +
push eax  +
push dword ptr [esi+4]  +
push 0  +
call ds:MapWindowPoints  +
mov ecx [ebp+var_38] +
push 15h  +
xor eax eax +
push eax  +
push eax  +
add ecx ebx +
push ecx  +
mov ecx [ebp+var_3C] +
add ecx edi +
push ecx  +
push eax  +
push [ebp+var_C]  +
push [ebp+hWinPosInfo]  +
call ds:DeferWindowPos  +
add [ebp+hWnd] 4 +
cmp [ebp+hWnd] 0Ch +
jb loc_1019CC1  +
push [ebp+hWinPosInfo]  +
call ds:EndDeferWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push 1  +
call esi  +
push eax  +
xor ebx ebx +
push ebx  +
call esi  +
push eax  +
push ebx  +
push ebx  +
lea eax [ebp+Rect] +
push eax  +
call ds:SetRect  +
mov esi ds:GetWindowRect +
cmp [ebp+hWnd] ebx +
jz loc_1019D79  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call esi  +
lea eax [ebp+X] +
push eax  +
push [ebp+arg_4]  +
call esi  +
mov ecx [ebp+Rect.right] +
mov eax [ebp+Rect.left] +
mov esi [ebp+var_8] +
sub esi [ebp+X] +
add eax ecx +
cdq   +
sub eax edx +
mov edi [ebp+var_4] +
sub edi [ebp+Y] +
mov ecx eax +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
sar ecx 1 +
sub ecx eax +
mov eax [ebp+Rect.top] +
mov [ebp+X] ecx +
mov ecx [ebp+Rect.bottom] +
add eax ecx +
cdq   +
sub eax edx +
mov ecx eax +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
sar ecx 1 +
sub ecx eax +
push ebx  +
lea eax [ebp+pvParam] +
push eax  +
push ebx  +
push 30h  +
mov [ebp+Y] ecx +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_1019E14  +
mov eax [ebp+var_18] +
mov edx [ebp+X] +
sub eax [ebp+pvParam] +
mov ecx [ebp+var_14] +
sub ecx [ebp+var_1C] +
add edx esi +
cmp edx eax +
jbe loc_1019DF0  +
sub eax esi +
mov [ebp+X] eax +
mov eax [ebp+Y] +
add eax edi +
cmp eax ecx +
jbe loc_1019DFE  +
sub ecx edi +
mov [ebp+Y] ecx +
mov eax [ebp+pvParam] +
cmp [ebp+X] eax +
jge loc_1019E09  +
mov [ebp+X] eax +
mov eax [ebp+var_1C] +
cmp [ebp+Y] eax +
jge loc_1019E14  +
mov [ebp+Y] eax +
push 125h  +
push ebx  +
push ebx  +
push [ebp+Y]  +
push [ebp+X]  +
push ebx  +
push [ebp+arg_4]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax 81h +
mov dword ptr [esi] offset off_1019E5C +
mov [esi+4] ax +
mov dword ptr [esi+8] 1 +
call sub_100CB63  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp+var_24] ebx +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
stos   +
mov [ebp+var_10] ebx +
mov [ebp+var_C] 140082h +
cmp [ebp+arg_14] ebx +
jz loc_1019E9C  +
mov [ebp+var_C] 140083h +
mov edi 208h +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_1019EC5  +
mov [ebp+arg_14] 8007000Eh +
jmp loc_1019FEF  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1019EE3  +
mov [ebp+arg_14] 8007000Eh +
jmp loc_1019FCC  +
mov esi ds:LoadStringW +
mov edi 104h +
push edi  +
push [ebp+lpMem]  +
push 2713h  +
push hInstance  +
call esi  +
mov ebx 0FFFFh +
test eax eax +
jg loc_1019F2D  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_1019F1D  +
jle loc_1019F22  +
and eax ebx +
or eax 80070000h +
jmp loc_1019F22  +
mov eax 80004005h +
mov [ebp+arg_14] eax +
test eax eax +
jl loc_1019FCA  +
push edi  +
push [ebp+var_4]  +
push 9CBCh  +
push hInstance  +
call esi  +
test eax eax +
jg loc_1019F63  +
call ds:__imp_GetLastError  +
test eax eax +
jz loc_1019F57  +
jle loc_1019F5C  +
and eax ebx +
or eax 80070000h +
jmp loc_1019F5C  +
mov eax 80004005h +
mov [ebp+arg_14] eax +
test eax eax +
jl loc_1019FCA  +
mov eax [ebp+arg_0] +
push [ebp+var_C]  +
mov [ebp+var_20] eax +
mov eax [ebp+lpMem] +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
mov [ebp+var_1C] eax +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+var_24] +
push [ebp+arg_C]  +
mov [ebp+var_24] 14h +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 52Eh  +
push 0  +
push offset WindowName  +
push eax  +
call ds:CredUIPromptForCredentialsW  +
xor ecx ecx +
test eax eax +
jz loc_1019FB6  +
jle loc_1019FB4  +
and eax ebx +
or eax 80070000h +
mov ecx eax +
mov [ebp+arg_14] ecx +
and ecx ebx +
cmp ecx 4C7h +
jnz loc_1019FCA  +
mov [ebp+arg_14] 1 +
xor ebx ebx +
push [ebp+lpMem]  +
mov edi ds:GetProcessHeap +
push ebx  +
call edi  +
mov esi ds:HeapFree +
push eax  +
call esi  +
cmp [ebp+var_4] ebx +
jz loc_1019FEF  +
push [ebp+var_4]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+arg_14] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_101A01A  +
push 0  +
push eax  +
call ds:ShowWindow  +
mov dword ptr [esi+10h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 110h +
jnz loc_101A03E  +
push [ebp+arg_0]  +
call ds:GetDesktopWindow  +
push eax  +
call sub_1019D3D  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov esi ecx +
push 0BBAh  +
push dword ptr [esi+4]  +
mov [ebp+var_10] esi +
call ds:GetDlgItem  +
mov ecx esi +
mov edi eax +
call sub_1005868  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101A20A  +
mov eax 0FFFFh +
mov ecx eax +
cmp cx word ptr [ebp+arg_0] +
jnz loc_101A0CE  +
cmp ax word ptr [ebp+arg_4] +
jnz loc_101A0CE  +
mov esi ds:SendMessageW +
push 2  +
push 0FFFFFFFFh  +
push 100Ch  +
push edi  +
call esi  +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
push 100Eh  +
push edi  +
mov [ebp+Points.x] 1 +
call esi  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push 0  +
push edi  +
call ds:MapWindowPoints  +
mov eax [ebp+var_18] +
mov [ebp+arg_0] eax +
mov eax [ebp+var_14] +
mov [ebp+arg_4] eax +
push 0C81h  +
push hInstance  +
call sub_100DC14  +
mov edi eax +
test edi edi +
jz loc_101A201  +
push ebx  +
push 0  +
push 0C8Ah  +
push edi  +
call ds:SetMenuDefaultItem  +
mov eax large fs:18h +
mov eax [eax+30h] +
mov ecx ds:7FFE02D8h +
mov esi ds:EnableMenuItem +
add eax 1D4h +
mov ebx 0C8Dh +
cmp ecx [eax] +
jnz loc_101A120  +
push 3  +
push ebx  +
push edi  +
call esi  +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 1 +
jle loc_101A138  +
push 3  +
push ebx  +
push edi  +
call esi  +
push 3  +
push 0C8Bh  +
push edi  +
call esi  +
mov eax [ebp+var_4] +
and [ebp+var_8] 0 +
cmp dword ptr [eax] 0 +
jle loc_101A1CF  +
mov ecx [ebp+var_8] +
mov eax [eax+4] +
mov eax [eax+ecx*4] +
mov ecx dword_101E478 +
mov [ebp+var_C] eax +
cmp ecx [eax] +
jnz loc_101A1A8  +
push 3  +
push ebx  +
push edi  +
call esi  +
push 3  +
push 0C8Bh  +
push edi  +
call esi  +
push 41000001h  +
call ds:SHELL32_100  +
test eax eax +
jnz loc_101A18C  +
push offset dword_100D8F4  +
call ds:SHLWAPI_618  +
test eax eax +
jz loc_101A196  +
push 3  +
push 0C8Ch  +
push edi  +
call esi  +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 1 +
jnz loc_101A1A8  +
push 3  +
push 0C8Ah  +
push edi  +
call esi  +
mov eax [ebp+var_C] +
cmp dword ptr [eax+84h] 4 +
jnz loc_101A1BE  +
push 3  +
push 0C8Ch  +
push edi  +
call esi  +
inc [ebp+var_8]  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
cmp ecx [eax] +
jl loc_101A148  +
mov eax [ebp+var_10] +
xor ecx ecx +
push 0  +
inc ecx  +
mov [eax+10h] ecx +
mov dword_101FDBC ecx +
push dword ptr [eax+4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
push edi  +
call ds:TrackPopupMenuEx  +
and dword_101FDBC 0 +
push edi  +
call ds:DestroyMenu  +
pop ebx  +
push [ebp+var_4]  +
call ds:COMCTL32_329  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+10h] +
mov dword ptr [esi+10h] 1 +
call sub_1008EDB  +
push dword ptr [esi+0Ch]  +
call ds:COMCTL32_337  +
mov eax [esi] +
mov ecx esi +
mov [esi+10h] edi +
call dword ptr [eax+18h]  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
mov edi 80010000h +
cmp dword_101FDAC ebx +
jz loc_101A2AE  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_101A270  +
cmp al bl +
jnz loc_101A2AE  +
mov ecx dword_101FD9C +
and ecx edi +
xor eax eax +
or eax ecx +
jz loc_101A2AE  +
mov ecx dword_101FDA4 +
mov eax ecx +
xor edx edx +
and eax edi +
cmp edx dword_101FDA0 +
jnz loc_101A2AE  +
cmp eax ecx +
jnz loc_101A2AE  +
push 5  +
push offset dword_100D5B0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
push 5  +
call sub_100561E  +
push eax  +
call sub_101AD9E  +
mov eax [esi] +
mov ecx esi +
mov [esi+10h] ebx +
call dword ptr [eax+18h]  +
push 5  +
push dword ptr [esi+4]  +
call ds:ShowWindow  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
push hWnd  +
call ds:GetMenu  +
push 0C80h  +
push hInstance  +
mov [ebp-8] eax +
call ds:LoadMenuW  +
mov [ebp-4] eax +
cmp eax ebx +
jz loc_101A325  +
push offset dword_1005648  +
call ds:SHLWAPI_618  +
test eax eax +
jz loc_101A325  +
push ebx  +
push 9C41h  +
push dword ptr [ebp-4]  +
call ds:DeleteMenu  +
test byte ptr dword_101E458 10h +
mov eax [ebp-4] +
mov hMenu eax +
jnz loc_101A343  +
push eax  +
push hWnd  +
call ds:SetMenu  +
cmp [ebp-8] ebx +
jz loc_101A351  +
push dword ptr [ebp-8]  +
call ds:DestroyMenu  +
mov ecx esi +
call sub_1005A10  +
call ds:GetFocus  +
cmp eax [esi+8] +
jz loc_101A378  +
push 0BBAh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
cmp dword_101FDAC ebx +
jz loc_101A3C9  +
mov al byte_101FDB0 +
cmp al 4 +
jnb loc_101A38D  +
cmp al bl +
jnz loc_101A3C9  +
mov ecx dword_101FD9C +
and ecx edi +
xor eax eax +
or eax ecx +
jz loc_101A3C9  +
mov ecx dword_101FDA4 +
mov eax ecx +
and eax edi +
cmp ebx dword_101FDA0 +
jnz loc_101A3C9  +
cmp eax ecx +
jnz loc_101A3C9  +
push 5  +
push offset loc_100D5C0  +
push dword_101FD84  +
push dword_101FD80  +
call sub_100F5D9  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10D8h +
call __alloca_probe  +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ds:LoadStringW +
mov [ebp+hWndParent] eax +
mov ebx 104h +
push ebx  +
lea eax [ebp+Caption] +
push eax  +
push 2713h  +
push hInstance  +
call edi  +
lea eax [ebp+var_10D8] +
push eax  +
push 0A68h  +
lea eax [ebp+var_10B0] +
push eax  +
push 1  +
push dword ptr [esi]  +
push 0  +
call WinStationQueryInformationW  +
test al al +
jz loc_101A610  +
cmp [ebp+var_B50] 0 +
jnz loc_101A49F  +
push ebx  +
lea eax [ebp+var_43C] +
push eax  +
push 9CBEh  +
push hInstance  +
call edi  +
push dword ptr [esi]  +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+Text] +
push 105h  +
push eax  +
call sub_100196B  +
add esp 10h +
push 30h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push [ebp+hWndParent]  +
call ds:MessageBoxW  +
jmp loc_101A610  +
cmp dword ptr [esi+84h] 4 +
jnz loc_101A4C9  +
cmp [ebp+var_B50] 1 +
jz loc_101A4BA  +
cmp [ebp+var_B50] 3 +
jnz loc_101A4C9  +
push ebx  +
lea eax [ebp+var_43C] +
push eax  +
push 9CBFh  +
jmp loc_101A459  +
lea ecx [ebp+dwInitParam] +
call sub_10194D5  +
push [ebp+hWndParent]  +
lea ecx [ebp+dwInitParam] +
call sub_101992A  +
cmp eax 1 +
jnz loc_101A605  +
push 0  +
push offset sub_101A021  +
push [ebp+hWndParent]  +
push 0D6h  +
push hInstance  +
call ds:CreateDialogParamW  +
mov [ebp+hWnd] eax +
test eax eax +
jz loc_101A52B  +
push 5  +
push eax  +
call ds:ShowWindow  +
push [ebp+hWnd]  +
call ds:UpdateWindow  +
push 7F02h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
push 384h  +
mov [ebp+hCursor] eax +
call ds:Sleep  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov [ebp+nSize] 10h +
call ds:GetComputerNameW  +
push [ebp+var_10C8]  +
lea eax [ebp+Buffer] +
push [ebp+var_10CC]  +
push dword ptr [esi]  +
push eax  +
push 0  +
call WinStationShadow  +
cmp [ebp+hWnd] 0 +
movzx eax al +
mov [ebp+var_10BC] eax +
jz loc_101A5A2  +
push [ebp+hWnd]  +
call ds:DestroyWindow  +
cmp [ebp+var_10BC] 0 +
jnz loc_101A5F9  +
push ebx  +
lea eax [ebp+var_43C] +
push eax  +
push 9CBDh  +
push hInstance  +
call edi  +
push dword ptr [esi]  +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+Text] +
push 105h  +
push eax  +
call sub_100196B  +
add esp 10h +
push 30h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push [ebp+hWndParent]  +
call ds:MessageBoxW  +
push [ebp+hCursor]  +
call ds:SetCursor  +
lea ecx [ebp+dwInitParam] +
call sub_1019592  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1560h +
call __alloca_probe  +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+var_14E4] 0FFFFFFFFh +
push ebx  +
push esi  +
push 104h  +
lea eax [ebp+Caption] +
push eax  +
push 2713h  +
push hInstance  +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_14D4] esi +
mov [ebp+var_14D0] ebx +
mov [ebp+var_14E0] ebx +
mov [ebp+dwMessageId] ebx +
call ds:LoadStringW  +
mov ecx esi +
call sub_1005868  +
mov [ebp+var_14E8] eax +
cmp eax ebx +
jz loc_101AB8C  +
cmp [ebp+arg_0] 0C8Ah +
push edi  +
jnz loc_101A6FF  +
push dword ptr [esi+8]  +
mov eax 0FAh +
lea ecx [ebp+dwInitParam] +
mov [ebp+dwInitParam] offset off_101ABCC +
mov [ebp+var_14C8] ax +
call sub_101992A  +
cmp eax 1 +
jnz loc_101AB7F  +
lea eax [ebp+var_14C4] +
push eax  +
mov esi 208h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1001A1B  +
lea eax [ebp+var_1442] +
push eax  +
push esi  +
lea eax [ebp+Text] +
push eax  +
call sub_1001A1B  +
jmp loc_101A7F1  +
mov esi 0C8Fh +
cmp [ebp+arg_0] esi +
jz loc_101A716  +
cmp [ebp+arg_0] 0C8Ch +
jnz loc_101A7F1  +
push 5Ch  +
lea eax [ebp+var_155C] +
push ebx  +
push eax  +
mov [ebp+var_14F4] ebx +
call memset  +
xor eax eax +
xor edi edi +
inc edi  +
add esp 0Ch +
cmp [ebp+arg_0] esi +
mov [ebp+var_1500] edi +
setnz al  +
mov [ebp+var_1560] 60h +
mov [ebp+var_1550] 8 +
dec eax  +
and eax 0FFFFFFFDh +
add eax 0CEFh +
mov [ebp+var_14FC] eax +
mov eax hInstance +
mov [ebp+var_1558] eax +
mov eax [ebp+var_14D4] +
mov eax [eax+8] +
mov [ebp+var_155C] eax +
lea eax [ebp+Caption] +
mov [ebp+var_154C] eax +
cmp [ebp+arg_0] esi +
jnz loc_101A7A3  +
mov [ebp+var_1544] 0CEAh +
mov [ebp+var_1540] 0CEBh +
jmp loc_101A7B7  +
mov [ebp+var_1544] 0CEDh +
mov [ebp+var_1540] offset WindowName +
push ebx  +
lea eax [ebp+var_1500] +
mov [ebp+var_1538] eax +
push ebx  +
lea eax [ebp+var_14F4] +
push eax  +
lea eax [ebp+var_1560] +
push eax  +
mov [ebp+var_153C] edi +
mov [ebp+var_1534] edi +
call ds:COMCTL32_345  +
cmp [ebp+var_14F4] edi +
jnz loc_101AB7F  +
mov [ebp+var_14D8] ebx +
mov eax [ebp+var_14D8] +
mov ecx [ebp+var_14E8] +
cmp eax [ecx] +
jl loc_101A832  +
mov eax [ebp+var_14E4] +
cmp eax 0FFFFFFFFh +
jz loc_101AB7F  +
cmp [ebp+var_14D0] ebx +
jnz loc_101AB7F  +
mov [ebp+var_14D0] 1 +
mov [ebp+var_14D8] eax +
mov eax [ebp+var_14E8] +
mov eax [eax+4] +
mov ecx [ebp+var_14D8] +
mov esi [eax+ecx*4] +
cmp esi ebx +
jnz loc_101A856  +
cmp [ebp+var_14D0] ebx +
jz loc_101AA8C  +
jmp loc_101A807  +
mov eax [ebp+arg_0] +
sub eax 0C8Ah +
jz loc_101AA34  +
dec eax  +
jz loc_101A8DE  +
dec eax  +
jz loc_101A8A9  +
dec eax  +
jz loc_101A895  +
dec eax  +
dec eax  +
jnz loc_101AA7A  +
mov eax [esi] +
cmp dword_101E478 eax +
jnz loc_101A88B  +
cmp [ebp+var_14D0] ebx +
jz loc_101AA98  +
push ebx  +
push eax  +
push ebx  +
call WTSLogoffSession  +
jmp loc_101A8C7  +
mov eax [ebp+var_14D4] +
push esi  +
push dword ptr [eax+8]  +
call sub_101A3D5  +
jmp loc_101AA7A  +
mov eax [esi] +
cmp dword_101E478 eax +
jnz loc_101A8BF  +
cmp [ebp+var_14D0] ebx +
jz loc_101AA98  +
push ebx  +
push eax  +
push ebx  +
call WTSDisconnectSession  +
cmp eax ebx +
jz loc_101AAA0  +
mov [ebp+var_14E0] 1 +
jmp loc_101AA76  +
xor eax eax +
mov [ebp+var_14F0] ebx +
mov word ptr [ebp+var_614] ax +
push 1  +
lea eax [ebp+var_614] +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
push ebx  +
call WinStationConnectW  +
test al al +
jnz loc_101AA21  +
call ds:__imp_GetLastError  +
mov edi eax +
cmp edi 52Eh +
jnz loc_101A988  +
lea eax [esi+8] +
push eax  +
mov edi 201h +
push edi  +
lea eax [ebp+var_1030] +
push eax  +
call sub_1001A1B  +
test eax eax +
jl loc_101AA21  +
push [ebp+var_14F0]  +
mov ecx [ebp+var_14D4] +
xor eax eax +
push 100h  +
mov word ptr [ebp+var_614] ax +
lea eax [ebp+var_614] +
push eax  +
push edi  +
lea eax [ebp+var_1030] +
push eax  +
push hWnd  +
call sub_1019E6D  +
cmp eax 1 +
jz loc_101AA21  +
cmp eax ebx +
mov [ebp+var_14F0] 1 +
jge loc_101A8ED  +
movzx edi ax +
push 104h  +
lea eax [ebp+Text] +
push eax  +
push 9CBBh  +
push hInstance  +
call ds:LoadStringW  +
push ebx  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
push edi  +
push ebx  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_101A9C6  +
mov [ebp+hMem] ebx +
push [ebp+hMem]  +
lea eax [ebp+Text] +
push edi  +
push eax  +
lea eax [ebp+Buffer] +
push 208h  +
push eax  +
call sub_100196B  +
add esp 14h +
push 30h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+var_14D4] +
push dword ptr [eax+8]  +
call ds:MessageBoxW  +
cmp [ebp+hMem] ebx +
jz loc_101AA21  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov [ebp+hMem] ebx +
mov ecx 200h +
lea eax [ebp+var_614] +
mov [eax] bl +
inc eax  +
dec ecx  +
jz loc_101AA7A  +
jmp loc_101AA2C  +
mov edi ds:lstrlenW +
push ebx  +
lea eax [ebp+var_14F8] +
push eax  +
push ebx  +
push 40040h  +
lea eax [ebp+Text] +
push eax  +
call edi  +
add eax eax +
push eax  +
lea eax [ebp+Text] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call edi  +
add eax eax +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [esi]  +
push ebx  +
call WTSSendMessageW  +
cmp eax ebx +
jz loc_101AAA0  +
cmp [ebp+var_14D0] ebx +
jnz loc_101A807  +
mov ecx [ebp+var_14D8] +
inc ecx  +
mov [ebp+var_14D8] ecx +
jmp loc_101A7F7  +
mov [ebp+var_14E4] ecx +
jmp loc_101AA8C  +
call ds:__imp_GetLastError  +
mov [ebp+dwMessageId] eax +
mov eax [ebp+arg_0] +
sub eax 0C8Ah +
jz loc_101AACD  +
dec eax  +
dec eax  +
jz loc_101AAC6  +
sub eax 3 +
jnz loc_101AB0B  +
mov eax 0CE5h +
jmp loc_101AAD2  +
mov eax 0CE6h +
jmp loc_101AAD2  +
mov eax 0CE4h +
mov edi 208h +
push edi  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
push dword ptr [esi]  +
add esi 8 +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+Text] +
push edi  +
push eax  +
call sub_100196B  +
add esp 14h +
jmp loc_101AB14  +
xor eax eax +
mov [ebp+Buffer] ax +
mov edi ds:lstrlenW +
lea eax [ebp+Text] +
push eax  +
call edi  +
lea esi [ebp+eax*2+Text] +
lea eax [ebp+Text] +
push eax  +
call edi  +
push ebx  +
mov ecx 207h +
sub ecx eax +
push ecx  +
push esi  +
push 400h  +
push [ebp+dwMessageId]  +
mov [ebp+var_14F8] ecx +
push ebx  +
push 1000h  +
call ds:FormatMessageW  +
xor eax eax +
mov [ebp+var_6] ax +
push 10h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
mov eax [ebp+var_14D4] +
push dword ptr [eax+8]  +
call ds:MessageBoxW  +
push [ebp+var_14E8]  +
call ds:COMCTL32_329  +
pop edi  +
mov ecx [ebp+var_14D4] +
mov [ecx+10h] ebx +
cmp [ebp+var_14E0] ebx +
jz loc_101ABA2  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push [ebp+dwMessageId]  +
push ebx  +
push [ebp+arg_0]  +
push 5  +
call sub_100561E  +
push eax  +
call sub_101AF5A  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi CoInitializeEx +
push 6  +
push 0  +
call esi  +
test eax eax +
jge loc_101ABF6  +
push 4  +
push 0  +
call esi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jl loc_101AC0E  +
call CoUninitialize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
xor eax eax +
xor ecx ecx +
cmp edx 4FFh +
jnz loc_101AC33  +
cmp [ebp+arg_10] eax +
setnz cl  +
jmp loc_101AC70  +
test edx 407h +
jz loc_101AC40  +
mov ecx 4070000h +
test edx 108h +
jz loc_101AC4E  +
or ecx 980000h +
test dl 20h +
jz loc_101AC59  +
or ecx 200000h +
test dl 40h +
jz loc_101AC64  +
or ecx 400000h +
cmp ecx eax +
jz loc_101AC83  +
cmp [ebp+arg_10] eax +
jz loc_101AC70  +
or ecx 1 +
push ecx  +
push [ebp+wMsgFilterMax]  +
push [ebp+wMsgFilterMin]  +
push [ebp+hWnd]  +
push [ebp+lpMsg]  +
call ds:PeekMessageW  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
imul ecx ecx +
add ecx [ebp+arg_4] +
xor eax eax +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_8] +
push ecx  +
inc eax  +
push eax  +
push 0DD4h  +
push 0  +
mov [ebp+var_8] eax +
call WinSqmAddToStream  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
imul ecx ecx +
add ecx [ebp+arg_4] +
xor eax eax +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_8] +
push ecx  +
inc eax  +
push eax  +
push 0DD5h  +
push 0  +
mov [ebp+var_8] eax +
call WinSqmAddToStream  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor esi esi +
inc esi  +
lea eax [ebp+pNumArgs] +
push eax  +
xor edi edi +
mov [ebp+var_28] esi +
mov [ebp+var_24] ebx +
mov [ebp+var_20] esi +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] esi +
mov [ebp+var_14] ebx +
mov [ebp+var_10] esi +
mov [ebp+var_C] ebx +
call ds:GetCommandLineW  +
push eax  +
call ds:CommandLineToArgvW  +
cmp [ebp+pNumArgs] esi +
mov [ebp+hMem] eax +
jle loc_101AD5C  +
mov eax [eax+4] +
cmp word ptr [eax] 2Fh +
jnz loc_101AD5C  +
add eax 2 +
push eax  +
call ds:_wtol  +
mov edi eax +
cmp edi 7 +
pop ecx  +
jl loc_101AD5C  +
xor edi edi +
mov eax [ebp+arg_0] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_14] eax +
lea eax [ebp+var_28] +
push eax  +
push 4  +
push 0DD7h  +
push ebx  +
mov [ebp+var_C] edi +
call WinSqmAddToStream  +
cmp [ebp+hMem] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_101AD93  +
push [ebp+hMem]  +
call ds:LocalFree  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
xor eax eax +
inc eax  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_30] eax +
mov [ebp+var_2C] esi +
mov [ebp+var_28] eax +
mov [ebp+var_24] esi +
mov [ebp+var_20] eax +
mov [ebp+var_1C] esi +
mov [ebp+var_18] eax +
mov [ebp+var_14] esi +
mov [ebp+var_10] eax +
mov [ebp+var_C] esi +
mov ebx ds:7FFE0018h +
mov eax ds:7FFE0014h +
mov [ebp+var_8] eax +
mov eax ds:7FFE001Ch +
cmp ebx eax +
jnz loc_101ADCC  +
mov eax dword_1020828 +
mov edi [ebp+arg_4] +
mov ecx dword_102082C +
cmp eax esi +
jnz loc_101ADF9  +
cmp ecx esi +
jz loc_101AE38  +
mov edx [ebp+arg_0] +
mov [ebp+var_2C] edx +
mov edx dword_101FD40 +
mov [ebp+var_24] edx +
mov edx [ebp+var_8] +
sub edx eax +
push esi  +
mov eax ebx +
push 989680h  +
sbb eax ecx +
push eax  +
push edx  +
call sub_1001AAD  +
mov [ebp+var_1C] eax +
lea eax [ebp+var_30] +
push eax  +
push 5  +
push 0DD8h  +
push esi  +
mov [ebp+var_14] edi +
mov [ebp+var_C] esi +
call WinSqmAddToStream  +
mov eax [ebp+var_8] +
mov dword_101FD40 edi +
pop edi  +
pop esi  +
mov dword_1020828 eax +
mov dword_102082C ebx +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_101AEA6  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_101AEA6  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_101AE8B  +
cmp [ecx] di +
jz loc_101AE87  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_101AE7D  +
test edx edx +
jnz loc_101AE90  +
mov edi 80070057h +
test esi esi +
jz loc_101AEA1  +
test edi edi +
jl loc_101AE9E  +
sub eax edx +
mov [esi] eax +
jmp loc_101AEA1  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_101AEAB  +
mov eax 80070057h +
test eax eax +
jge loc_101AEB6  +
test esi esi +
jz loc_101AEB6  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_101AF47  +
lea eax [ebp+arg_0] +
push eax  +
push 104h  +
push esi  +
call sub_101AE5A  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
cmp eax 2 +
jnb loc_101AEF7  +
mov [ebp+var_4] 80070057h +
jmp loc_101AF47  +
dec eax  +
push edi  +
movzx edi ax +
test di di +
jbe loc_101AF27  +
movzx eax di +
lea esi [esi+eax*2] +
movzx eax word ptr [esi] +
push eax  +
call ds:towlower  +
imul ebx ebx +
movzx eax ax +
add ebx eax +
add edi 0FFFFh +
dec esi  +
dec esi  +
pop ecx  +
test di di +
ja loc_101AF07  +
mov eax ebx +
imul ebx ebx +
imul eax eax +
add eax 3039h +
shr eax 10h +
inc ebx  +
and ebx 0FFFF0000h +
or ebx eax +
pop edi  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
xor eax eax +
inc eax  +
push esi  +
mov [ebp+var_2C] eax +
mov [ebp+var_24] eax +
mov [ebp+var_1C] eax +
mov [ebp+var_14] eax +
mov [ebp+var_C] eax +
xor esi esi +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_C]  +
mov [ebp+var_28] esi +
mov [ebp+var_20] esi +
mov [ebp+var_18] esi +
mov [ebp+var_10] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
call sub_101AEC0  +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_8] eax +
lea eax [ebp+var_2C] +
push eax  +
push 5  +
push 0DD6h  +
push esi  +
call WinSqmAddToStream  +
xor eax eax +
pop esi  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_101B09F  +
cmp dword ptr [eax+10h] 3 +
jnz loc_101B09F  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_101B099  +
cmp eax 19930521h +
jz loc_101B099  +
cmp eax 19930522h +
jz loc_101B099  +
cmp eax 1994000h +
jnz loc_101B09F  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_101B060+2)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_101B0DE  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_101B0DA  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101B13F  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_101B137  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101B141  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_101B127  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_100693B  +
and dword ptr [ebp-4] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_101B0C8  +
pop ecx  +
test eax eax +
jz loc_101B1A8  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_101B102  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101B1A8  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_101B1B1  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_10086B4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001679  +
push offset dword_101E08C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1020938 eax +
mov dword_1020934 ecx +
mov dword_1020930 edx +
mov dword_102092C ebx +
mov dword_1020928 esi +
mov dword_1020924 edi +
mov word_1020950 ss +
mov word_1020944 cs +
mov word_1020920 ds +
mov word_102091C es +
mov word_1020918 fs +
mov word_1020914 gs +
pushf   +
pop dword_1020948  +
mov eax [ebp+0] +
mov dword_102093C eax +
mov eax [ebp+4] +
mov dword_1020940 eax +
lea eax [ebp+8] +
mov dword_102094C eax +
mov eax [ebp-320h] +
mov dword_1020888 10001h +
mov eax dword_1020940 +
mov dword_1020844 eax +
mov dword_1020838 0C0000409h +
mov dword_102083C 1 +
mov eax dword_101E08C +
mov [ebp-328h] eax +
mov eax dword_101E090 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov eax offset LookupAccountSidLocalW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dword_101B9FC  +
call sub_1006CDE  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push offset loc_10086CD  +
push [ebp+wLanguage]  +
push [ebp+arg_4]  +
push [ebp+hModule]  +
call sub_10084A1  +
pop ebp  +
retn 14h  +
***
call ds:__imp_GetLastError  +
test eax eax +
jnz locret_101B38C  +
inc eax  +
retn   +
***
call sub_101B381  +
test eax eax +
jle locret_101B3A5  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov eax offset __imp_WTSSendMessageW +
jmp loc_100557E  +
***
mov eax offset __imp_WTSDisconnectSession +
jmp loc_100557E  +
***
mov eax offset __imp_WTSLogoffSession +
jmp loc_100557E  +
***
mov eax offset __imp_WinStationShadow +
jmp loc_1006CC8  +
***
mov eax offset __imp_WinStationQueryInformationW +
jmp loc_1006CC8  +
***
mov eax offset __imp_WinStationConnectW +
jmp loc_1006CC8  +
***
mov eax offset __imp_CurrentDateTimeString +
jmp loc_1007EDF  +
***
mov eax offset __imp_MiniDumpWriteDump +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dbghelp_dll_import_table  +
call sub_1006CDE  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CoCreateInstance +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset ole32_dll_import_table  +
call sub_1006CDE  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CoTaskMemFree +
jmp loc_101B479  +
***
mov eax offset StringFromCLSID +
jmp loc_101B479  +
***
mov eax offset CoTaskMemAlloc +
jmp loc_101B479  +
***
mov eax offset CoInitializeEx +
jmp loc_101B479  +
***
mov eax offset CoUninitialize +
jmp loc_101B479  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2F0h +
mov eax dword_101E08C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp dword ptr [ebx] 68h +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_2E0] esi +
jz loc_101B4EC  +
push 7Ah  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101B740  +
push 68h  +
push esi  +
push ebx  +
call memset  +
or dword ptr [ebx+0Ch] 0FFFFFFFFh +
add esp 0Ch +
push edi  +
mov [ebx+4] esi +
call sub_101B767  +
mov edi eax +
cmp edi esi +
jz loc_101B722  +
xor eax eax +
inc eax  +
push esi  +
mov [ebx+0Ch] eax +
mov [ebx+4] eax +
lea eax [ebp+BytesReturned] +
push eax  +
push 2D0h  +
lea eax [ebp+OutBuffer] +
push eax  +
push 3Ch  +
push offset unk_101FD44  +
push 17003Eh  +
push edi  +
call ds:DeviceIoControl  +
mov esi ds:__imp_GetLastError +
mov [ebp+var_2E0] eax +
call esi  +
push edi  +
call ds:CloseHandle  +
xor eax eax +
cmp [ebp+var_2E0] eax +
jz loc_101B71E  +
lea edi [ebp+OutBuffer] +
mov [ebp+dwErrCode] eax +
mov [ebp+var_2D8] eax +
mov [ebp+var_2E8] edi +
cmp [ebp+BytesReturned] eax +
ja loc_101B58D  +
jmp loc_101B72E  +
mov edi [ebp+var_2E8] +
mov eax [ebp+BytesReturned] +
sub eax [ebp+var_2D8] +
cmp eax 0Ch +
jb loc_101B72E  +
mov eax [edi+4] +
xor edx edx +
mov [ebp+var_2F0] edx +
mov [ebp+var_2EC] edx +
cmp eax 8 +
jnz loc_101B5D7  +
lea esi [edi+8] +
lea edi [ebp+var_2F0] +
movs   +
movs   +
mov edx [ebp+var_2EC] +
mov ecx [ebp+var_2F0] +
mov edi [ebp+var_2E8] +
jmp loc_101B5DA  +
mov ecx [edi+8] +
mov esi [ebp+var_2D8] +
lea esi [esi+eax+8] +
mov [ebp+var_2D8] esi +
mov esi [edi] +
lea eax [edi+eax+8] +
mov [ebp+var_2E8] eax +
and esi 7FFFFFFFh +
mov eax 20203h +
cmp esi eax +
ja loc_101B69D  +
jz loc_101B680  +
mov eax 20101h +
cmp esi eax +
ja loc_101B666  +
jz loc_101B65B  +
sub esi 10104h +
jz loc_101B653  +
sub esi 3 +
jz loc_101B64B  +
sub esi 0Dh +
jz loc_101B63C  +
sub esi 0EEh +
jnz loc_101B70B  +
mov [ebx+10h] ecx +
jmp loc_101B70B  +
xor eax eax +
test ecx ecx +
setz al  +
mov [ebx+0Ch] eax +
jmp loc_101B70B  +
mov [ebx+14h] ecx +
jmp loc_101B70B  +
mov [ebx+8] ecx +
jmp loc_101B70B  +
mov [ebx+18h] ecx +
mov [ebx+1Ch] edx +
jmp loc_101B70B  +
sub esi 20102h +
jz loc_101B695  +
dec esi  +
jz loc_101B690  +
dec esi  +
jz loc_101B68B  +
sub esi 0FDh +
jnz loc_101B70B  +
add [ebx+30h] ecx +
adc [ebx+34h] edx +
jmp loc_101B70B  +
mov [ebx+50h] ecx +
jmp loc_101B70B  +
mov [ebx+54h] ecx +
jmp loc_101B70B  +
mov [ebx+20h] ecx +
mov [ebx+24h] edx +
jmp loc_101B70B  +
mov eax 2020Bh +
cmp esi eax +
ja loc_101B6D8  +
jz loc_101B6BA  +
sub esi 20205h +
jz loc_101B680  +
dec esi  +
dec esi  +
jz loc_101B6CA  +
dec esi  +
jz loc_101B6C2  +
dec esi  +
jnz loc_101B70B  +
add [ebx+38h] ecx +
adc [ebx+3Ch] edx +
jmp loc_101B70B  +
mov [ebx+48h] ecx +
mov [ebx+4Ch] edx +
jmp loc_101B70B  +
add [ebx+38h] ecx +
mov [ebx+40h] ecx +
mov [ebx+44h] edx +
adc [ebx+3Ch] edx +
jmp loc_101B70B  +
sub esi 20213h +
jz loc_101B708  +
dec esi  +
jz loc_101B703  +
dec esi  +
jz loc_101B6F3  +
sub esi 0FDFDEAh +
jnz loc_101B70B  +
mov [ebx+2Ch] ecx +
jmp loc_101B70B  +
mov eax ecx +
shr eax 10h +
mov [ebx+5Ch] eax +
movzx eax cx +
mov [ebx+60h] eax +
jmp loc_101B70B  +
mov [ebx+58h] ecx +
jmp loc_101B70B  +
mov [ebx+28h] ecx +
mov eax [ebp+var_2D8] +
cmp eax [ebp+BytesReturned] +
jnb loc_101B72E  +
jmp loc_101B587  +
call esi  +
jmp loc_101B728  +
call ds:__imp_GetLastError  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_2E0] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001679  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetLastError  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
and [ebp+var_20] 0 +
and [ebp+var_14] 0 +
and [ebp+var_10] 0 +
push 20h  +
mov [ebp+var_1C] eax +
push 7  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 12019Fh  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_24] 18h +
mov [ebp+var_18] 40h +
call ds:NtOpenFile  +
test eax eax +
jz loc_101B7BF  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call sub_101B756  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi ds:NtQueryInformationToken +
xor esi esi +
inc esi  +
mov [ebx] esi +
and dword ptr [eax] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push 12h  +
push [ebp+arg_0]  +
mov [ebp+var_4] esi +
call edi  +
test eax eax +
jl loc_101B82F  +
cmp [ebp+var_4] 2 +
jz loc_101B82A  +
cmp [ebp+var_4] esi +
jnz loc_101B82F  +
and dword ptr [ebx] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
push 14h  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jl loc_101B82F  +
cmp [ebp+var_8] 0 +
jz loc_101B82F  +
mov ecx [ebp+arg_4] +
mov [ecx] esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push 4  +
pop eax  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1Ah  +
push [ebp+arg_0]  +
call ds:NtQueryInformationToken  +
test eax eax +
jl loc_101B86F  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
setnz cl  +
mov [esi] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_101B8C0  +
lea eax [ebp+arg_0] +
push eax  +
push ebx  +
push 8  +
push 0FFFFFFFEh  +
call ds:NtOpenThreadToken  +
mov edi eax +
cmp edi 0C000007Ch +
jnz loc_101B8B6  +
lea eax [ebp+arg_0] +
push eax  +
push 8  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
mov edi eax +
cmp edi ebx +
jl loc_101B925  +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_101B7CB  +
mov edi eax +
cmp edi ebx +
jl loc_101B917  +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+var_8] ebx +
jz loc_101B8E3  +
mov [esi] ebx +
jmp loc_101B8EE  +
xor eax eax +
cmp [ebp+var_C] ebx +
setz al  +
inc eax  +
mov [esi] eax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_101B83B  +
mov edi eax +
cmp edi ebx +
jl loc_101B916  +
cmp [ebp+arg_4] ebx +
jz loc_101B916  +
mov eax [esi] +
cmp eax 10h +
jb loc_101B911  +
cmp eax 13h +
jb loc_101B914  +
add eax 10h +
mov [esi] eax +
pop esi  +
cmp [ebp+var_4] ebx +
jz loc_101B925  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 2  +
pop eax  +
lea ecx [edi-10h] +
mov edx eax +
cmp edx ecx +
sbb ecx ecx +
inc ecx  +
lea edx [esi-10h] +
mov ebx eax +
cmp ebx edx +
sbb edx edx +
inc edx  +
cmp edi 3 +
jb loc_101B964  +
sub edi 10h +
cmp esi 3 +
jb loc_101B96C  +
sub esi 10h +
mov ebx esi +
sub ebx 0 +
mov esi [ebp+arg_8] +
jz loc_101B99D  +
dec ebx  +
jz loc_101B98E  +
dec ebx  +
jz loc_101B985  +
mov [ebp+var_4] 0C00000BBh +
jmp loc_101B9A0  +
xor ebx ebx +
cmp edi eax +
setz bl  +
jmp loc_101B999  +
xor ebx ebx +
inc ebx  +
cmp edi ebx +
jz loc_101B999  +
cmp edi eax +
jnz loc_101B99D  +
mov [esi] ebx +
jmp loc_101B9A0  +
and dword ptr [esi] 0 +
test ecx ecx +
jz loc_101B9AE  +
test edx edx +
jnz loc_101B9AE  +
mov dword ptr [esi] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_101B879  +
test eax eax +
jl loc_101B9E0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101B932  +
pop ebp  +
retn 0Ch  +
***
retn 5302h  +
***
retn   +
***
