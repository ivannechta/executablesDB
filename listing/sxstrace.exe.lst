mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea eax [ebp+8] +
push eax  +
call ??0exception@@QAE@ABQBD@Z  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_100119C +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_100119C +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ??1exception@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_100119C +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push [ebp+arg_0]  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_100177F  +
push eax  +
push eax  +
push eax  +
push 0Eh  +
call ds:RaiseException  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10017AB  +
push [ebp+arg_0]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_10017C7  +
mov edx [eax] +
jmp loc_10017C9  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_10017E3  +
cmp esi 10h +
jb loc_10017D5  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_10017E3  +
mov al 1 +
jmp loc_10017E5  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_100180B  +
xor ecx ecx +
push ecx  +
call sub_1001751  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1 +
jnb loc_1001800  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_10016BB  +
push offset dword_10056A4  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001675  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001698  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_100171B  +
push offset dword_10056A4  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10016F2  +
test byte ptr [ebp+8] 1 +
jz loc_10018B8  +
push esi  +
call sub_1001789  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10018DA  +
cmp ecx 7FFFFFFFh +
jbe loc_10018DF  +
mov eax 80070057h +
test eax eax +
jl loc_100191B  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100190B  +
cmp eax esi +
ja loc_100190B  +
jnz loc_1001916  +
jmp loc_1001910  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 280Ch +
call __alloca_probe  +
mov eax dword_10070A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
call ds:GetConsoleOutputCP  +
xor ebx ebx +
cmp hFile 0FFFFFFFFh +
mov [ebp+CodePage] eax +
mov [ebp+NumberOfBytesWritten] ebx +
jnz loc_100196A  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
mov hFile eax +
mov esi 2800h +
push esi  +
mov edi offset Buffer +
push edi  +
push [ebp+uID]  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_1001A0D  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
push esi  +
mov edi offset word_100C0C8 +
push edi  +
call sub_10018C4  +
mov eax hFile +
cmp eax ebx +
jz loc_10019FF  +
cmp eax 0FFFFFFFFh +
jz loc_10019FF  +
push ebx  +
push ebx  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push [ebp+CodePage]  +
call ds:WideCharToMultiByte  +
mov esi ds:WriteFile +
push ebx  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
dec eax  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push hFile  +
call esi  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
push lpBuffer  +
push hFile  +
call esi  +
jmp loc_1001A0D  +
push edi  +
push offset aS  +
call ds:printf  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004DD3  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi 2710h +
push esi  +
call sub_1001924  +
inc esi  +
pop ecx  +
cmp esi 271Dh +
jbe loc_1001A29  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_1001A56  +
mov ecx [ecx+4] +
jmp loc_1001A59  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_10017EF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001835  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001857  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1001AF6  +
cmp dword ptr [esi+18h] 10h +
jb loc_1001AF6  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_1001AEE  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_1001A7E  +
push edi  +
call sub_1001789  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_1001A40  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_1001B27  +
call loc_1004A8C  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_1001B34  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_1001B77  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_1001B4A  +
mov ebx [edx] +
jmp loc_1001B4C  +
mov ebx edx +
cmp ecx 10h +
jb loc_1001B53  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_1001AA0  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_1001A40  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-1Ch] edi +
mov esi [ebp+8] +
or esi 0Fh +
cmp esi 0FFFFFFFEh +
jbe loc_1001BA5  +
mov esi [ebp+8] +
jmp loc_1001BCA  +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov eax esi +
xor edx edx +
push 3  +
pop ebx  +
div  ebx +
mov edx [ebp-14h] +
cmp eax edx +
jnb loc_1001BCA  +
push 0FFFFFFFEh  +
pop eax  +
sub eax edx +
cmp ecx eax +
ja loc_1001BCA  +
lea esi [edx+ecx] +
and dword ptr [ebp-4] 0 +
lea eax [esi+1] +
push eax  +
mov ecx edi +
call sub_1001A66  +
mov [ebp-18h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1001C0F  +
mov [ebp-10h] esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
mov byte ptr [ebp-4] 2 +
inc eax  +
push eax  +
mov ecx [ebp-1Ch] +
call sub_1001A66  +
mov [ebp-18h] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1001C09 +
retn   +
mov edi [ebp-1Ch] +
mov esi [ebp+8] +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1001C33  +
cmp dword ptr [edi+18h] 10h +
jb loc_1001C20  +
mov eax [edi+4] +
jmp loc_1001C23  +
lea eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push dword ptr [ebp-18h]  +
call sub_1001A7E  +
push 0  +
push 1  +
mov ecx edi +
call sub_1001AC2  +
mov eax [ebp-18h] +
mov [edi+4] eax +
mov [edi+18h] esi +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1001A40  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_1001C98  +
call loc_1004A4F  +
cmp [esi+18h] edi +
jnb loc_1001CAA  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_1001B84  +
jmp loc_1001CD6  +
cmp [ebp+arg_4] 0 +
jz loc_1001CCA  +
cmp edi 10h +
jnb loc_1001CCA  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_1001CBE  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_1001AC2  +
jmp loc_1001CD6  +
test edi edi +
jnz loc_1001CD6  +
push edi  +
mov ecx esi +
call sub_1001A40  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10011B4 +
and dword ptr [ebp-4] 0 +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
call sub_1001AC2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1exception@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_1001D30  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001CE9  +
test byte ptr [ebp+8] 1 +
jz loc_1001D53  +
push esi  +
call sub_1001789  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1001D79  +
call loc_1004A8C  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_1001D89  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_1001DA7  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_1001B11  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_1001B11  +
jmp loc_1001DE7  +
push 0  +
push esi  +
call sub_1001C82  +
test al al +
jz loc_1001DE7  +
cmp dword ptr [edi+18h] 10h +
jb loc_1001DBE  +
mov edi [edi+4] +
jmp loc_1001DC1  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_1001DCE  +
mov eax [ebx+4] +
jmp loc_1001DD1  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_1001A7E  +
push esi  +
mov ecx ebx +
call sub_1001A40  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10017B2  +
test al al +
jz loc_1001E29  +
cmp dword ptr [esi+18h] 10h +
jb loc_1001E16  +
mov eax [esi+4] +
jmp loc_1001E19  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_1001D5F  +
jmp loc_1001E60  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1001C82  +
test al al +
jz loc_1001E5E  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_1001E46  +
mov eax [esi+4] +
jmp loc_1001E49  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_1001A7E  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1001A40  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1001A40  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1001D5F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_1001EA7  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_1001DF5  +
pop ebx  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10011B4 +
call sub_1001E6B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10011B4 +
call sub_1001E6B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1001EC3  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_10011C0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_10011C0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1001CE9  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001F7A  +
test byte ptr [ebp+8] 1 +
jz loc_1001FBD  +
push esi  +
call sub_1001789  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1001F01  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_10011C0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1001A40  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1001E9B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1001F01  +
push offset dword_10057E4  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1001FC9  +
push offset dword_100581C  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push 0  +
call sub_1003750  +
and dword ptr [ebp-4] 0 +
mov eax [ebp+8] +
mov [esi+10h] eax +
mov eax [ebp+0Ch] +
mov [esi+14h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:HeapSetInformation  +
push ebx  +
push ebx  +
mov esi 100h +
push esi  +
call ds:SetThreadPreferredUILanguages  +
push ebx  +
call ds:GetModuleHandleW  +
cmp dword ptr [ebp+8] 2 +
mov hInstance eax +
jl loc_1002128  +
mov edi ds:_wcsicmp +
mov [ebp-34h] esi +
mov esi [ebp+0Ch] +
push offset aTrace  +
push dword ptr [esi+4]  +
mov [ebp-10h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-18h] ebx +
mov byte ptr [ebp-24h] 4 +
mov [ebp-28h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-20h] ebx +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002136  +
cmp dword ptr [ebp+8] 3 +
mov dword ptr [ebp-1Ch] 1 +
jge loc_100216B  +
call sub_1001A21  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
push offset aParse  +
push dword ptr [esi+4]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002165  +
push offset aStoptrace  +
push dword ptr [esi+4]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002128  +
cmp dword ptr [ebp+8] 2 +
mov dword ptr [ebp-28h] 1 +
jz loc_100216B  +
jmp loc_1002128  +
cmp dword ptr [ebp+8] 4 +
jl loc_1002128  +
push 2  +
pop eax  +
cmp [ebp+8] eax +
mov [ebp-14h] eax +
jle loc_100226E  +
mov ebx ds:_wcsnicmp +
jmp loc_1002185  +
mov esi [ebp+0Ch] +
mov eax [ebp-14h] +
push 9  +
lea esi [esi+eax*4] +
push offset aLogfile  +
push dword ptr [esi]  +
call ebx  +
add esp 0Ch +
test eax eax +
jnz loc_10021AA  +
mov esi [esi] +
add esi 12h +
mov [ebp-10h] esi +
jmp loc_100225D  +
push 9  +
push offset aOutfile  +
push dword ptr [esi]  +
call ebx  +
add esp 0Ch +
test eax eax +
jnz loc_10021C9  +
mov esi [esi] +
add esi 12h +
mov [ebp-18h] esi +
jmp loc_100225D  +
push offset aVerbose  +
push dword ptr [esi]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10021DE  +
mov byte ptr [ebp-24h] 5 +
jmp loc_100225D  +
push 9  +
push offset aKeyword  +
push dword ptr [esi]  +
call ebx  +
add esp 0Ch +
test eax eax +
jnz loc_1002227  +
mov esi [esi] +
add esi 12h +
push offset aActctx  +
push esi  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100220C  +
mov dword ptr [ebp-34h] 100h +
jmp loc_100225D  +
push offset aStore  +
push esi  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002128  +
mov dword ptr [ebp-34h] 200h +
jmp loc_100225D  +
push 8  +
push offset aFilter  +
push dword ptr [esi]  +
call ebx  +
add esp 0Ch +
test eax eax +
jnz loc_1002243  +
mov esi [esi] +
add esi 10h +
mov [ebp-2Ch] esi +
jmp loc_100225D  +
push offset aNostop  +
push dword ptr [esi]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002128  +
mov dword ptr [ebp-20h] 1 +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp+8] +
jl loc_1002182  +
xor ebx ebx +
cmp [ebp-1Ch] ebx +
jz loc_1002295  +
cmp [ebp-10h] ebx +
jz loc_1002128  +
push dword ptr [ebp-20h]  +
xor eax eax +
push dword ptr [ebp-10h]  +
push eax  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-24h]  +
call sub_10035BA  +
jmp loc_1002399  +
cmp [ebp-28h] ebx +
jz loc_10022A4  +
call sub_1002A7D  +
jmp loc_1002399  +
cmp [ebp-10h] ebx +
jz loc_1002128  +
cmp [ebp-18h] ebx +
jz loc_1002128  +
push dword ptr [ebp-10h]  +
push 2725h  +
call sub_1001924  +
mov esi 5000h +
push esi  +
call sub_1001751  +
push esi  +
mov dword_1011554 eax +
call sub_1001751  +
push esi  +
mov dword_1011560 eax +
call sub_1001751  +
push esi  +
mov dword_1011564 eax +
call sub_1001751  +
push 2800h  +
mov lpWideCharStr eax +
call sub_1001751  +
xor esi esi +
add esp 1Ch +
mov lpMultiByteStr eax +
cmp dword_1011554 esi +
jz loc_100235F  +
cmp dword_1011560 esi +
jz loc_100235F  +
cmp dword_1011564 esi +
jz loc_100235F  +
cmp lpWideCharStr esi +
jz loc_100235F  +
cmp eax esi +
jz loc_100235F  +
push 128h  +
call sub_1001751  +
pop ecx  +
mov [ebp+8] eax +
mov [ebp-4] esi +
cmp eax esi +
jz loc_1002350  +
push dword ptr [ebp-2Ch]  +
mov ecx eax +
push dword ptr [ebp-18h]  +
call sub_1002075  +
jmp loc_1002352  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword_100C0C0 eax +
cmp eax esi +
jnz loc_100236F  +
push 2726h  +
call sub_1001924  +
pop ecx  +
jmp loc_100212D  +
push dword ptr [ebp-10h]  +
call sub_1004901  +
test eax eax +
jz loc_100212D  +
mov ecx dword_100C0C0 +
call sub_1002B05  +
push dword ptr [ebp-18h]  +
push 2727h  +
call sub_1001924  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1002130  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10023C0  +
cmp [esi] ax +
jz loc_10023BC  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_10023B2  +
test edx edx +
jnz loc_10023C5  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10023D6  +
test eax eax +
jl loc_10023D3  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1002411  +
cmp [ebp+arg_4] eax +
jz loc_100240D  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100240D  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10023F0  +
test esi esi +
jnz loc_1002419  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002427  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 5000h +
push esi  +
mov esi dword_1011554 +
jb loc_1002464  +
mov eax [ebp+arg_4] +
xor ecx ecx +
push 2  +
shr eax 1 +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001751  +
pop ecx  +
mov esi eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call memcpy  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax dword_1011554 +
jz loc_1002496  +
push eax  +
call sub_1001789  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_10070A8 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
push eax  +
mov [ebp+Buffer] ax +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetUserDefaultLangID  +
movzx eax ax +
push eax  +
push [ebp+dwMessageId]  +
push 0  +
push 1200h  +
call ds:FormatMessageW  +
cmp [ebp+Buffer] 0 +
jz loc_1002503  +
lea eax [ebp+Buffer] +
push eax  +
push offset aWs  +
call ds:printf  +
pop ecx  +
jmp loc_100250D  +
push 272Eh  +
call sub_1001924  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1004DD3  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 1  +
push dword_101155C  +
push dword_1011558  +
push esi  +
push offset dword_100118C  +
call ds:EnableTraceEx  +
mov edi eax +
cmp edi esi +
jz loc_1002570  +
push offset aEnabletraceex  +
push 2728h  +
call sub_1001924  +
pop ecx  +
pop ecx  +
push edi  +
call sub_100249F  +
jmp loc_1002573  +
xor esi esi +
inc esi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push dword_101155C  +
push dword_1011558  +
push esi  +
push offset dword_100118C  +
call ds:EnableTraceEx  +
mov edi eax +
cmp edi esi +
jz loc_10025C7  +
push offset aEnabletraceex  +
push 2728h  +
call sub_1001924  +
pop ecx  +
pop ecx  +
push edi  +
call sub_100249F  +
xor eax eax +
jmp loc_10025CA  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+lpString] edi +
jz loc_100261A  +
push esi  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
inc esi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001751  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_1002619  +
lea eax [esi+esi] +
push eax  +
push [ebp+lpString]  +
push edi  +
call memcpy  +
add esp 0Ch +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:WriteFile +
push edi  +
xor edi edi +
xor ebx ebx +
mov [ebp+NumberOfBytesWritten] edi +
mov [ebp+var_C] edi +
mov byte ptr [ebp+Buffer] 9 +
cmp [ebp+arg_8] edi +
jbe loc_1002664  +
push edi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 1  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call esi  +
test eax eax +
jz loc_10026A6  +
inc ebx  +
cmp ebx [ebp+arg_8] +
jb loc_100264A  +
push edi  +
push edi  +
push 2800h  +
push lpMultiByteStr  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push edi  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
cmp eax edi +
jz loc_10026A6  +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jbe loc_10026A3  +
push edi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
dec eax  +
push eax  +
push lpMultiByteStr  +
push [ebp+hFile]  +
call esi  +
test eax eax +
jz loc_10026A6  +
mov [ebp+var_C] ebx +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+NumberOfBytesWritten] 0 +
push esi  +
push [ebp+arg_8]  +
push [ebp+lpWideCharStr]  +
push [ebp+hFile]  +
call sub_1002626  +
mov esi eax +
test esi esi +
jz loc_10026F0  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
push offset asc_10011B0  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jnz loc_10026F0  +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ebp+arg_0] +
test ax ax +
jnz loc_1002711  +
mov eax offset aX86 +
jmp loc_1002748  +
cmp ax 6 +
jnz loc_100271E  +
mov eax offset aIa64 +
jmp loc_1002748  +
cmp ax 8 +
jnz loc_100272B  +
mov eax offset aMsil +
jmp loc_1002748  +
cmp ax 9 +
jnz loc_1002738  +
mov eax offset aAmd64 +
jmp loc_1002748  +
cmp ax 0Ah +
mov eax offset aWow32 +
jz loc_1002748  +
mov eax offset String +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100275B  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_1002773  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_10027A2  +
xor ecx ecx +
mov eax ecx +
shl eax 2 +
push eax  +
call sub_1001751  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4 +
jnb loc_1002792  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_10016BB  +
push offset dword_10056A4  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_10027E0  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
add eax 4 +
cmp eax [ebp+arg_4] +
jnz loc_10027D6  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
sub esi ecx +
test eax eax +
jle loc_1002817  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
push esi  +
lea esi [ecx+edx] +
test eax eax +
jbe loc_100284D  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_100287A  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
dec [ebp+arg_4]  +
mov [eax] ecx +
add eax 4 +
cmp [ebp+arg_4] 0 +
ja loc_1002867  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1002897  +
cmp edx 7FFFFFFFh +
jbe loc_100289C  +
mov eax 80070057h +
test eax eax +
jl loc_10028B2  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_10023DC  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_10028D4  +
cmp edx esi +
jbe loc_10028D9  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_10028F1  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_10023A5  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_10028F3  +
xor ecx ecx +
test eax eax +
jl loc_100290A  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_10023DC  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100292B  +
cmp ecx 7FFFFFFFh +
jbe loc_1002930  +
mov eax 80070057h +
test eax eax +
jl loc_100296D  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100295D  +
cmp eax esi +
ja loc_100295D  +
jnz loc_1002968  +
jmp loc_1002962  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi 488h +
push esi  +
push 0  +
mov ebx offset dword_10110C8 +
push ebx  +
call memset  +
mov dword_10110C8 esi +
mov dword_10110F4 20000h +
mov dword_10110F0 1 +
mov esi offset dword_100129C +
mov edi offset unk_10110E0 +
movs   +
movs   +
movs   +
add esp 0Ch +
movs   +
and dword_1011108 0 +
push offset aWinsxsTraceSes  +
mov esi 104h +
push esi  +
push offset unk_1011140  +
mov dword_1011138 78h +
call sub_1002881  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1002A03  +
cmp word ptr [eax] 0 +
jz loc_1002A03  +
push eax  +
push esi  +
push offset unk_101116A  +
mov dword_1011134 0A2h +
call sub_1002881  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_4] edi +
call sub_1002974  +
test eax eax +
jz loc_1002A71  +
push esi  +
push [ebp+var_4]  +
push offset aWinsxsTraceSes  +
push offset dword_1011558  +
call ds:StartTraceW  +
mov esi eax +
cmp esi edi +
jz loc_1002A66  +
push offset aStarttrace  +
push 2728h  +
call sub_1001924  +
pop ecx  +
pop ecx  +
push esi  +
call sub_100249F  +
jmp loc_1002A70  +
xor eax eax +
inc eax  +
mov dword_1011550 eax +
mov edi eax +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
lea eax [ebp+var_4] +
xor edi edi +
push eax  +
push edi  +
mov [ebp+var_4] edi +
call sub_1002974  +
test eax eax +
jz loc_1002AD7  +
push esi  +
push 1  +
push [ebp+var_4]  +
push offset aWinsxsTraceSes  +
push dword_101155C  +
push dword_1011558  +
call ds:ControlTraceW  +
mov esi eax +
cmp esi edi +
jz loc_1002AD3  +
push offset aControltrace  +
push 2728h  +
call sub_1001924  +
pop ecx  +
pop ecx  +
push esi  +
call sub_100249F  +
jmp loc_1002AD6  +
xor edi edi +
inc edi  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2 +
ja loc_1002AFA  +
cmp dword_1011550 0 +
jz loc_1002AFA  +
call sub_1002A7D  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 2  +
push edi  +
push 4  +
mov esi ecx +
push 40000000h  +
push dword ptr [esi+10h]  +
mov [ebp+NumberOfBytesWritten] edi +
call ds:CreateFileW  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002B53  +
push dword ptr [esi+10h]  +
push 272Dh  +
call sub_1001924  +
pop ecx  +
pop ecx  +
call ds:GetLastError  +
push eax  +
call sub_100249F  +
jmp loc_100352C  +
push edi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push 3  +
push offset dword_10012AC  +
push eax  +
call ds:WriteFile  +
test eax eax +
jz loc_1003523  +
mov ecx esi +
mov [ebp+var_24] edi +
call sub_1002751  +
test eax eax +
jbe loc_1003523  +
push ebx  +
mov ebx 2800h +
cmp dword ptr [esi+14h] 0 +
jz loc_1002BBA  +
mov eax [esi+4] +
add eax edi +
mov eax [eax] +
push 5Ch  +
push dword ptr [eax+34h]  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002BA6  +
inc eax  +
inc eax  +
push dword ptr [esi+14h]  +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100350C  +
push 0  +
push offset WideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
push ebx  +
push dword_1011564  +
push 64h  +
push hInstance  +
call ds:LoadStringW  +
push 0  +
push dword_1011564  +
push [ebp+hFile]  +
call sub_10026B5  +
push ebx  +
push dword_1011564  +
push 66h  +
push hInstance  +
call ds:LoadStringW  +
push 0  +
push dword_1011564  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
push dword ptr [eax+24h]  +
push offset aFlagsD  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
movzx eax word ptr [eax+28h] +
push eax  +
call sub_10026FC  +
push eax  +
push offset aProcessorarchi  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
push offset aCulturefallbac  +
push ebx  +
push lpWideCharStr  +
call sub_1002881  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+3Ch] +
mov [ebp+var_20] eax +
test eax eax +
jz loc_1002CE5  +
mov eax [ebp+var_20] +
cmp word ptr [eax] 0 +
jz loc_1002CE5  +
push eax  +
push ebx  +
push lpWideCharStr  +
call sub_10028BB  +
mov ecx [ebp+var_20] +
mov eax ecx +
lea edx [eax+2] +
mov [ebp+var_20] edx +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1002CB7  +
sub eax [ebp+var_20] +
sar eax 1 +
lea eax [ecx+eax*2+2] +
mov [ebp+var_20] eax +
cmp [eax] dx +
jz loc_1002C96  +
push offset asc_1001464  +
push ebx  +
push lpWideCharStr  +
call sub_10028BB  +
jmp loc_1002C96  +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+34h] +
test eax eax +
jz loc_1002D27  +
push eax  +
push offset aManifestpathWs  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+30h] +
test eax eax +
jz loc_1002D59  +
push eax  +
push offset aTextualidentit  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
push dword ptr [eax+2Ch]  +
push offset aAssemblydirect  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+38h] +
test eax eax +
jnz loc_1002D98  +
mov eax offset dword_10013DC +
push eax  +
push offset aApplicationCon  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
push 0  +
push offset asc_100137C  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [edi+eax] +
and [ebp+var_10] 0 +
lea ecx [eax+44h] +
mov [ebp+var_1C] eax +
call sub_1002751  +
test eax eax +
jbe loc_1002E19  +
mov eax [ebp+var_1C] +
jmp loc_1002DED  +
mov eax [ebp+var_20] +
mov eax [eax+48h] +
mov ecx [ebp+var_10] +
push 0  +
push dword ptr [eax+ecx*4]  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [edi+eax] +
inc [ebp+var_10]  +
lea ecx [eax+44h] +
mov [ebp+var_20] eax +
call sub_1002751  +
cmp [ebp+var_10] eax +
jb loc_1002DEA  +
mov eax [esi+4] +
mov eax [eax+edi] +
cmp dword ptr [eax+38h] 0 +
jz loc_1002EC2  +
push ebx  +
push dword_1011564  +
push 73h  +
push hInstance  +
call ds:LoadStringW  +
mov eax [esi+4] +
mov eax [eax+edi] +
push dword ptr [eax+68h]  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 0  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [edi+eax] +
and [ebp+var_10] 0 +
lea ecx [eax+80h] +
mov [ebp+var_1C] eax +
call sub_1002751  +
test eax eax +
jbe loc_1002EC2  +
mov eax [ebp+var_1C] +
jmp loc_1002E90  +
mov eax [ebp+var_20] +
mov eax [eax+84h] +
mov ecx [ebp+var_10] +
push 1  +
push dword ptr [eax+ecx*4]  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [edi+eax] +
inc [ebp+var_10]  +
lea ecx [eax+80h] +
mov [ebp+var_20] eax +
call sub_1002751  +
cmp [ebp+var_10] eax +
jb loc_1002E8D  +
mov eax [esi+4] +
mov eax [edi+eax] +
and [ebp+var_10] 0 +
lea ecx [eax+90h] +
mov [ebp+var_1C] eax +
call sub_1002751  +
test eax eax +
jbe loc_100346C  +
mov eax [ebp+var_1C] +
mov eax [eax+94h] +
and [ebp+var_8] 0 +
jmp loc_1002EF4  +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_8] +
mov eax [ecx+eax] +
cmp byte ptr [eax] 0 +
push ebx  +
push dword_1011564  +
jz loc_10030A9  +
push 6Eh  +
push hInstance  +
call ds:LoadStringW  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
push dword ptr [eax+18h]  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 0  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
push ebx  +
push dword_1011564  +
push 71h  +
push hInstance  +
call ds:LoadStringW  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
push dword ptr [eax+1Ch]  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov ecx [eax+ecx] +
and [ebp+var_C] 0 +
add ecx 20h +
call sub_1002751  +
test eax eax +
jbe loc_100303A  +
push ebx  +
push dword_1011564  +
push 72h  +
push hInstance  +
call ds:LoadStringW  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+24h] +
mov ecx [ebp+var_C] +
push dword ptr [eax+ecx*4]  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov ecx [eax+ecx] +
inc [ebp+var_C]  +
add ecx 20h +
call sub_1002751  +
cmp [ebp+var_C] eax +
jb loc_1002FC3  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
and [ebp+var_C] 0 +
mov [ebp+var_1C] eax +
mov eax [eax+ecx] +
lea ecx [eax+30h] +
mov [ebp+var_20] eax +
call sub_1002751  +
test eax eax +
jbe loc_100344B  +
mov eax [ebp+var_20] +
mov eax [eax+34h] +
mov ecx [ebp+var_C] +
push 1  +
push dword ptr [eax+ecx*4]  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
inc [ebp+var_C]  +
mov [ebp+var_1C] eax +
mov eax [eax+ecx] +
lea ecx [eax+30h] +
mov [ebp+var_20] eax +
call sub_1002751  +
cmp [ebp+var_C] eax +
jb loc_1003066  +
jmp loc_100344B  +
push 0C8h  +
push hInstance  +
call ds:LoadStringW  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
push dword ptr [eax+50h]  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 0  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov ecx [eax+ecx] +
and [ebp+var_14] 0 +
add ecx 58h +
call sub_1002751  +
test eax eax +
jbe loc_10033E5  +
push ebx  +
push dword_1011564  +
push 0D0h  +
push hInstance  +
call ds:LoadStringW  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov eax [eax+ecx*4] +
push dword ptr [eax+10h]  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 1  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov ecx [eax+ecx*4] +
and [ebp+var_C] 0 +
add ecx 18h +
call sub_1002751  +
test eax eax +
jbe loc_10033BF  +
and [ebp+var_1C] 0 +
push ebx  +
push dword_1011564  +
push 0CAh  +
push hInstance  +
call ds:LoadStringW  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov eax [eax+ecx*4] +
mov eax [eax+1Ch] +
mov ecx [ebp+var_1C] +
mov eax [eax+ecx] +
push dword ptr [eax+10h]  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push 2  +
push lpWideCharStr  +
push [ebp+hFile]  +
call sub_10026B5  +
push ebx  +
push dword_1011564  +
push 0CCh  +
push hInstance  +
call ds:LoadStringW  +
push 3  +
push dword_1011564  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov eax [eax+ecx*4] +
mov eax [eax+1Ch] +
mov ecx [ebp+var_1C] +
mov eax [ecx+eax] +
and [ebp+var_18] 0 +
lea ecx [eax+28h] +
mov [ebp+var_20] eax +
call sub_1002751  +
test eax eax +
jbe loc_10032B8  +
mov eax [ebp+var_20] +
mov eax [eax+2Ch] +
mov ecx [ebp+var_18] +
push 4  +
push dword ptr [eax+ecx*4]  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov eax [eax+ecx*4] +
mov eax [eax+1Ch] +
mov ecx [ebp+var_1C] +
mov eax [ecx+eax] +
inc [ebp+var_18]  +
lea ecx [eax+28h] +
mov [ebp+var_20] eax +
call sub_1002751  +
cmp [ebp+var_18] eax +
jb loc_100326B  +
push ebx  +
push dword_1011564  +
push 0CEh  +
push hInstance  +
call ds:LoadStringW  +
push 3  +
push dword_1011564  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov eax [eax+ecx*4] +
mov eax [eax+1Ch] +
mov ecx [ebp+var_1C] +
mov eax [ecx+eax] +
and [ebp+var_18] 0 +
lea ecx [eax+48h] +
mov [ebp+var_20] eax +
call sub_1002751  +
test eax eax +
jbe loc_1003364  +
mov eax [ebp+var_20] +
mov eax [eax+4Ch] +
mov ecx [ebp+var_18] +
push 4  +
push dword ptr [eax+ecx*4]  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov eax [eax+ecx*4] +
mov eax [eax+1Ch] +
mov ecx [ebp+var_1C] +
mov eax [ecx+eax] +
inc [ebp+var_18]  +
lea ecx [eax+48h] +
mov [ebp+var_20] eax +
call sub_1002751  +
cmp [ebp+var_18] eax +
jb loc_1003317  +
push ebx  +
push dword_1011564  +
push 0CFh  +
push hInstance  +
call ds:LoadStringW  +
push 3  +
push dword_1011564  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx] +
mov eax [eax+5Ch] +
mov ecx [ebp+var_14] +
mov ecx [eax+ecx*4] +
inc [ebp+var_C]  +
add [ebp+var_1C] 4 +
add ecx 18h +
call sub_1002751  +
cmp [ebp+var_C] eax +
jb loc_10031A8  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
mov ecx [eax+ecx] +
inc [ebp+var_14]  +
add ecx 58h +
call sub_1002751  +
cmp [ebp+var_14] eax +
jb loc_100311A  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
and [ebp+var_C] 0 +
mov [ebp+var_1C] eax +
mov eax [eax+ecx] +
lea ecx [eax+68h] +
mov [ebp+var_20] eax +
call sub_1002751  +
test eax eax +
jbe loc_100344B  +
mov eax [ebp+var_20] +
mov eax [eax+6Ch] +
mov ecx [ebp+var_C] +
push 1  +
push dword ptr [eax+ecx*4]  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [eax+edi] +
mov eax [eax+94h] +
mov ecx [ebp+var_8] +
inc [ebp+var_C]  +
mov [ebp+var_1C] eax +
mov eax [eax+ecx] +
lea ecx [eax+68h] +
mov [ebp+var_20] eax +
call sub_1002751  +
cmp [ebp+var_C] eax +
jb loc_100340D  +
mov eax [esi+4] +
mov ecx [eax+edi] +
inc [ebp+var_10]  +
add [ebp+var_8] 4 +
add ecx 90h +
call sub_1002751  +
cmp [ebp+var_10] eax +
jb loc_1002EF1  +
mov eax [esi+4] +
mov eax [edi+eax] +
and [ebp+var_10] 0 +
lea ecx [eax+0A0h] +
mov [ebp+var_1C] eax +
call sub_1002751  +
test eax eax +
jbe loc_10034C2  +
mov eax [ebp+var_1C] +
jmp loc_1003490  +
mov eax [ebp+var_20] +
mov eax [eax+0A4h] +
mov ecx [ebp+var_10] +
push 0  +
push dword ptr [eax+ecx*4]  +
push [ebp+hFile]  +
call sub_10026B5  +
mov eax [esi+4] +
mov eax [edi+eax] +
inc [ebp+var_10]  +
lea ecx [eax+0A0h] +
mov [ebp+var_20] eax +
call sub_1002751  +
cmp [ebp+var_10] eax +
jb loc_100348D  +
mov eax [esi+4] +
mov eax [eax+edi] +
push 0  +
push dword ptr [eax+0B0h]  +
push [ebp+hFile]  +
call sub_10026B5  +
push ebx  +
push dword_1011564  +
push 65h  +
push hInstance  +
call ds:LoadStringW  +
push 0  +
push dword_1011564  +
push [ebp+hFile]  +
call sub_10026B5  +
push 0  +
push offset dword_10013DC  +
push [ebp+hFile]  +
call sub_10026B5  +
inc [ebp+var_24]  +
mov ecx esi +
add edi 4 +
call sub_1002751  +
cmp [ebp+var_24] eax +
jb loc_1002B86  +
pop ebx  +
push [ebp+hFile]  +
call ds:CloseHandle  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10027EC  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002821  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002859  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push offset HandlerRoutine  +
call ds:SetConsoleCtrlHandler  +
test eax eax +
jnz loc_10035EF  +
push offset aSetconsolectrl  +
push 2728h  +
call sub_1001924  +
pop ecx  +
pop ecx  +
call ds:GetLastError  +
push eax  +
call sub_100249F  +
jmp loc_1003642  +
push dword ptr [ebp+arg_C]  +
call sub_1002A17  +
test eax eax +
jz loc_1003642  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002521  +
test eax eax +
jz loc_1003642  +
push dword ptr [ebp+arg_C]  +
push 2724h  +
call sub_1001924  +
cmp [ebp+arg_10] 0 +
pop ecx  +
pop ecx  +
jnz loc_1003642  +
push 272Ah  +
call sub_1001924  +
pop ecx  +
call ds:getchar  +
cmp eax 0Ah +
jnz loc_100362D  +
call sub_1002580  +
call sub_1002A7D  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003563  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003591  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1003690  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push 44h  +
mov eax offset loc_100549C +
call __EH_prolog3  +
push offset aVectorTTooLong  +
lea ecx [ebp-28h] +
call sub_1001FFF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1001F44  +
push offset dword_100581C  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_100376F  +
xor al al +
jmp loc_1003791  +
cmp edi 3FFFFFFFh +
jbe loc_100377C  +
call loc_1003713  +
push eax  +
push edi  +
call loc_1002781  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*4] +
mov [esi+0Ch] eax +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov eax [ebp+10h] +
mov eax [eax] +
mov [ebp-14h] eax +
call sub_1002769  +
mov ebx eax +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1003936  +
mov ecx esi +
call sub_1002751  +
mov ecx 3FFFFFFFh +
sub ecx eax +
cmp ecx edi +
jnb loc_10037DB  +
call loc_1003713  +
mov ecx esi +
call sub_1002751  +
add eax edi +
cmp ebx eax +
jnb loc_100389B  +
mov eax ebx +
shr eax 1 +
mov ecx 3FFFFFFFh +
sub ecx eax +
cmp ecx ebx +
jnb loc_10037FF  +
xor ebx ebx +
jmp loc_1003801  +
add ebx eax +
mov ecx esi +
call sub_1002751  +
add eax edi +
cmp ebx eax +
jnb loc_1003819  +
mov ecx esi +
call sub_1002751  +
mov ebx eax +
add ebx edi +
push 0  +
push ebx  +
call loc_1002781  +
mov [ebp+10h] eax +
and dword ptr [ebp-4] 0 +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [esi+4]  +
mov ecx esi +
call sub_100364D  +
mov [ebp-18h] eax +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_10036B9  +
mov [ebp-18h] eax +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100364D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1002751  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1003872  +
push eax  +
call sub_1001789  +
pop ecx  +
mov eax [ebp+10h] +
lea ecx [eax+ebx*4] +
mov [esi+0Ch] ecx +
lea ecx [eax+edi*4] +
mov [esi+8] ecx +
mov [esi+4] eax +
jmp loc_1003936  +
push dword ptr [ebp+10h]  +
call sub_1001789  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ebx [esi+8] +
mov eax ebx +
mov ecx [ebp+8] +
sub eax ecx +
sar eax 2 +
push esi  +
cmp eax edi +
jnb loc_1003901  +
mov eax edi +
shl eax 2 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_1003563  +
mov dword ptr [ebp-4] 2 +
mov eax [esi+8] +
lea ecx [ebp-14h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_10036B9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
lea ecx [ebp-14h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_10027CC  +
add esp 0Ch +
jmp loc_1003936  +
shl edi 2 +
mov [ebp+10h] ebx +
sub [ebp+10h] edi +
push ebx  +
push ebx  +
push dword ptr [ebp+10h]  +
call sub_1003563  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1003537  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10027CC  +
add esp 18h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1002751  +
test eax eax +
jnz loc_1003959  +
xor esi esi +
jmp loc_1003962  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_100379C  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+18h] +
push 0  +
call sub_1003750  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+28h] +
push 0  +
call sub_1003750  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+48h] +
push 0  +
call sub_1003750  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+18h] +
push 0  +
call sub_1003750  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+28h] +
push 0  +
call sub_1003750  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+44h] +
push 0  +
call sub_1003750  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+58h] +
call sub_10039ED  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+90h] +
push 0  +
call sub_1003750  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+0A0h] +
push 0  +
call sub_1003750  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1002751  +
mov ecx esi +
mov edi eax +
call sub_1002769  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_1003AB1  +
push 1  +
push eax  +
call sub_10036B9  +
mov [esi+8] eax +
jmp loc_1003ABB  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1003943  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_8] ebx +
jz loc_1003AED  +
movzx eax word ptr [edi+56h] +
sub eax 4 +
push eax  +
mov eax [edi+5Ch] +
add eax 4 +
push eax  +
call sub_1002433  +
mov ebx eax +
cmp [ebp+arg_4] 0 +
push esi  +
jz loc_1003B48  +
movzx eax word ptr [edi+28h] +
mov esi 2800h +
push esi  +
push dword_1011564  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
cmp [ebp+arg_8] 0 +
jz loc_1003B35  +
push ebx  +
push dword_1011564  +
push esi  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push lpWideCharStr  +
jmp loc_1003B49  +
cmp [ebp+arg_C] 0 +
jz loc_1003B40  +
push [ebp+arg_C]  +
jmp loc_1003B18  +
push dword_1011564  +
jmp loc_1003B49  +
push ebx  +
call sub_10025D2  +
mov ecx [ebp+arg_10] +
mov [ebp+arg_8] eax +
lea eax [ebp+arg_8] +
push eax  +
call sub_1003A81  +
pop esi  +
test ebx ebx +
jz loc_1003B68  +
push ebx  +
call sub_100247F  +
pop edi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi dword ptr [ebp+arg_0] +
mov eax [edi+5Ch] +
mov eax [eax+4] +
mov esi 2800h +
push esi  +
push dword_1011564  +
mov dword ptr [ebp+arg_0] eax +
movzx eax word ptr [edi+28h] +
push eax  +
push hInstance  +
xor ebx ebx +
mov [ebp+var_4] ebx +
call ds:LoadStringW  +
cmp [ebp+arg_4] ebx +
jz loc_1003BCE  +
movzx eax word ptr [edi+56h] +
sub eax 8 +
push eax  +
mov eax [edi+5Ch] +
add eax 8 +
push eax  +
call sub_1002433  +
dec [ebp+arg_4]  +
mov [ebp+var_4] eax +
mov edi eax +
jmp loc_1003BE8  +
push dword ptr [ebp+arg_0]  +
push dword_1011564  +
push esi  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
mov edi ebx +
cmp [ebp+arg_4] ebx +
jz loc_1003C09  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003BF2  +
sub eax edx +
sar eax 1 +
dec [ebp+arg_4]  +
lea ebx [edi+eax*2+2] +
jmp loc_1003C22  +
push edi  +
push dword ptr [ebp+arg_0]  +
push dword_1011564  +
push esi  +
push lpWideCharStr  +
call sub_1002915  +
add esp 14h +
cmp [ebp+arg_4] 0 +
jz loc_1003C67  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003C2D  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_8] 0 +
lea eax [ebx+eax*2+2] +
jnz loc_1003C4A  +
push eax  +
push ebx  +
push edi  +
jmp loc_1003C4D  +
push edi  +
push ebx  +
push eax  +
push dword ptr [ebp+arg_0]  +
push dword_1011564  +
push esi  +
push lpWideCharStr  +
call sub_1002915  +
add esp 1Ch +
jmp loc_1003C8B  +
cmp [ebp+arg_8] 0 +
jnz loc_1003C71  +
push ebx  +
push edi  +
jmp loc_1003C73  +
push edi  +
push ebx  +
push dword ptr [ebp+arg_0]  +
push dword_1011564  +
push esi  +
push lpWideCharStr  +
call sub_1002915  +
add esp 18h +
mov esi [ebp+arg_C] +
mov eax [esi+40h] +
test eax eax +
jnz loc_1003CA8  +
push lpWideCharStr  +
call sub_10025D2  +
lea ecx [esi+80h] +
jmp loc_1003CE3  +
cmp eax 3 +
jnz loc_1003CCD  +
push lpWideCharStr  +
call sub_10025D2  +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
push eax  +
mov eax [esi+20h] +
mov eax [eax+54h] +
mov ecx [eax+14h] +
add ecx 28h +
jmp loc_1003CEA  +
cmp eax 1 +
jnz loc_1003CEF  +
push lpWideCharStr  +
call sub_10025D2  +
mov ecx [esi+20h] +
add ecx 30h +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
push eax  +
call sub_1003A81  +
cmp [ebp+var_4] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz locret_1003D00  +
push [ebp+var_4]  +
call sub_100247F  +
leave   +
retn 10h  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+8] +
call sub_10039ED  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+40h] +
call sub_10039ED  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov ebx ecx +
call sub_1002751  +
mov edi [ebp+8] +
test eax eax +
jbe loc_1003D6E  +
mov ecx [ebx+4] +
lea edx [ecx+eax*4-4] +
mov esi [edx] +
cmp [esi] edi +
jz loc_1003DD9  +
dec eax  +
sub edx 4 +
test eax eax +
ja loc_1003D60  +
push 0B8h  +
call sub_1001751  +
pop ecx  +
mov [ebp+8] eax +
xor esi esi +
mov [ebp-4] esi +
cmp eax esi +
jz loc_1003D8E  +
mov ecx eax +
call sub_1003A27  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp+8] esi +
test esi esi +
jz loc_1003DCF  +
mov [esi] edi +
xor eax eax +
lea edi [esi+8] +
stos   +
stos   +
xor eax eax +
lea edi [esi+10h] +
stos   +
stos   +
xor edx edx +
mov [esi+18h] edx +
push 7  +
mov [esi+1Ch] edx +
pop ecx  +
xor eax eax +
mov [esi+20h] edx +
lea edi [esi+24h] +
stos   +
lea eax [ebp+8] +
push eax  +
mov ecx ebx +
mov [esi+0B0h] edx +
call sub_1003A81  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
mov eax [ecx+eax*4-4] +
jmp loc_1003DD1  +
***
call __EH_prolog3  +
mov esi [ebp+8] +
mov eax [esi+5Ch] +
push dword ptr [eax]  +
mov ecx dword_100C0C0 +
call sub_1003D3F  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1004744  +
movzx eax word ptr [esi+28h] +
lea ecx [eax-64h] +
cmp ecx 0B5h +
ja loc_100473F  +
movzx ecx ds:byte_10047E8[ecx] +
jmp ds:off_1004750[ecx*4]  +
mov eax [esi+10h] +
mov [edi+8] eax +
mov eax [esi+14h] +
mov [edi+0Ch] eax +
mov eax [esi+0Ch] +
mov [edi+18h] eax +
mov eax [esi+8] +
mov [edi+1Ch] eax +
jmp loc_100473F  +
mov eax [esi+10h] +
mov [edi+10h] eax +
mov eax [esi+14h] +
mov [edi+14h] eax +
jmp loc_100473F  +
movzx eax word ptr [esi+56h] +
lea ecx [eax-0Ah] +
mov eax [esi+5Ch] +
mov edx [eax+4] +
mov [ebp-18h] edx +
movzx edx word ptr [eax+8] +
push ecx  +
add eax 0Ah +
push eax  +
mov [ebp-10h] ecx +
mov [ebp-14h] edx +
call sub_1002433  +
mov ecx [ebp-18h] +
mov [edi+24h] ecx +
mov cx [ebp-14h] +
mov [edi+28h] cx +
mov [ebp+8] eax +
cmp [eax] bx +
jz loc_1003EA3  +
push eax  +
call sub_10025D2  +
mov [edi+2Ch] eax +
jmp loc_1003EA6  +
mov [edi+2Ch] ebx +
mov eax [ebp+8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003EAC  +
sub eax edx +
sar eax 1 +
add eax eax +
push 0FFFFFFFEh  +
pop ecx  +
sub ecx eax +
mov eax [ebp+8] +
add [ebp-10h] ecx +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1003ECA  +
sub eax ecx +
mov ecx [ebp+8] +
sar eax 1 +
lea eax [ecx+eax*2+2] +
mov [ebp-18h] eax +
cmp [eax] bx +
jz loc_1004029  +
push eax  +
call sub_10025D2  +
push 78h  +
mov [edi+30h] eax +
mov dword ptr [edi+40h] 2 +
call sub_1001751  +
pop ecx  +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_1003F16  +
mov ecx eax +
call sub_1003D09  +
jmp loc_1003F18  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ebx [edi+20h] +
mov [ebx] eax +
test eax eax +
jz loc_100402C  +
push dword ptr [ebp-18h]  +
mov byte ptr [eax] 0 +
mov ecx [esi+10h] +
mov eax [ebx] +
mov [eax+40h] ecx +
mov ecx [esi+14h] +
mov [eax+44h] ecx +
call sub_10025D2  +
mov ecx [ebx] +
mov [ecx+50h] eax +
push ebx  +
lea ecx [edi+90h] +
call sub_1003A81  +
push 28h  +
call sub_1001751  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov dword ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1003F75  +
call sub_1003987  +
mov [ebp-14h] eax +
jmp loc_1003F79  +
and dword ptr [ebp-14h] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-14h] 0 +
jz loc_100402C  +
mov ecx [esi+10h] +
mov eax [ebp-14h] +
mov [eax] ecx +
mov ecx [esi+14h] +
push offset String  +
mov [eax+4] ecx +
call sub_10025D2  +
mov ecx [ebp-14h] +
and dword ptr [ecx+14h] 0 +
mov [ecx+10h] eax +
mov eax [ebx] +
mov [eax+54h] ecx +
mov eax [ebx] +
lea ecx [eax+54h] +
push ecx  +
lea ecx [eax+58h] +
call sub_1003A81  +
push 58h  +
call sub_1001751  +
pop ecx  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 2 +
test eax eax +
jz loc_1003FDE  +
mov ecx eax +
call sub_10039B3  +
mov [ebp-14h] eax +
jmp loc_1003FE2  +
and dword ptr [ebp-14h] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-14h] 0 +
jz loc_100402C  +
mov eax [ebp-14h] +
and dword ptr [eax+10h] 0 +
mov ecx [esi+10h] +
mov [eax] ecx +
mov ecx [esi+14h] +
push offset String  +
mov [eax+4] ecx +
call sub_10025D2  +
mov ecx [ebp-14h] +
mov [ecx+10h] eax +
mov eax [ebx] +
mov eax [eax+54h] +
mov [eax+14h] ecx +
mov eax [ebx] +
mov eax [eax+54h] +
lea ecx [eax+14h] +
push ecx  +
lea ecx [eax+18h] +
call sub_1003A81  +
jmp loc_100402C  +
mov [edi+30h] ebx +
mov edx [ebp-18h] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1004034  +
sub eax esi +
sar eax 1 +
add eax eax +
push 0FFFFFFFEh  +
pop ecx  +
sub ecx eax +
add [ebp-10h] ecx +
mov eax edx +
lea ecx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1004051  +
sub eax ecx +
sar eax 1 +
lea esi [edx+eax*2+2] +
cmp word ptr [esi] 0 +
jz loc_1004074  +
push esi  +
call sub_10025D2  +
mov [edi+34h] eax +
jmp loc_1004078  +
and dword ptr [edi+34h] 0 +
mov eax esi +
push 2  +
lea edx [eax+2] +
pop ebx  +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_1004080  +
sub eax edx +
sar eax 1 +
add eax eax +
push 0FFFFFFFEh  +
pop ecx  +
sub ecx eax +
add [ebp-10h] ecx +
mov eax esi +
lea ecx [eax+2] +
mov dx [eax] +
add eax ebx +
test dx dx +
jnz loc_100409D  +
sub eax ecx +
sar eax 1 +
lea esi [esi+eax*2+2] +
cmp [esi] dx +
jz loc_10040BF  +
push esi  +
call sub_10025D2  +
mov [edi+38h] eax +
jmp loc_10040C3  +
and dword ptr [edi+38h] 0 +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_10040C8  +
sub eax edx +
sar eax 1 +
add eax eax +
push 0FFFFFFFEh  +
pop ecx  +
sub ecx eax +
add [ebp-10h] ecx +
mov eax esi +
lea ecx [eax+2] +
mov dx [eax] +
add eax ebx +
test dx dx +
jnz loc_10040E5  +
sub eax ecx +
sar eax 1 +
mov ebx eax +
mov eax [ebp-10h] +
xor ecx ecx +
push 2  +
shr eax 1 +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1001751  +
pop ecx  +
mov [edi+3Ch] eax +
test eax eax +
jz loc_1004127  +
push dword ptr [ebp-10h]  +
lea ecx [esi+ebx*2+2] +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
push dword ptr [ebp+8]  +
call sub_100247F  +
jmp loc_100473F  +
movzx eax word ptr [esi+56h] +
sub eax 4 +
push eax  +
mov eax [esi+5Ch] +
add eax 4 +
push eax  +
call sub_1002433  +
push 78h  +
mov [ebp+8] eax +
mov dword ptr [edi+40h] 1 +
call sub_1001751  +
pop ecx  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_1004171  +
mov ecx eax +
call sub_1003D09  +
jmp loc_1004173  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [edi+20h] eax +
cmp eax ebx +
jz loc_1004127  +
push dword ptr [ebp+8]  +
mov byte ptr [eax] 1 +
mov ecx [esi+10h] +
mov eax [edi+20h] +
mov [eax+8] ecx +
mov ecx [esi+14h] +
mov [eax+0Ch] ecx +
call sub_10025D2  +
lea ecx [edi+20h] +
mov edx [ecx] +
mov [edx+18h] eax +
mov eax [ecx] +
push ecx  +
lea ecx [edi+90h] +
mov [eax+1Ch] ebx +
call sub_1003A81  +
jmp loc_1004127  +
movzx eax word ptr [esi+56h] +
sub eax 4 +
push eax  +
mov eax [esi+5Ch] +
add eax 4 +
push eax  +
call sub_1002433  +
mov esi eax +
cmp [edi+20h] ebx +
jz loc_10041DD  +
push esi  +
call sub_10025D2  +
mov ecx [edi+20h] +
mov [ecx+1Ch] eax +
push esi  +
jmp loc_100412A  +
mov edi [edi+20h] +
cmp edi ebx +
jz loc_100473F  +
add edi 20h +
push edi  +
push ebx  +
push 1  +
push ebx  +
jmp loc_1004739  +
mov eax [edi+20h] +
cmp eax ebx +
jz loc_100473F  +
mov ecx [esi+10h] +
mov [eax+10h] ecx +
mov ecx [esi+14h] +
mov [eax+14h] ecx +
mov [edi+20h] ebx +
jmp loc_100473F  +
push 78h  +
mov dword ptr [edi+40h] 2 +
call sub_1001751  +
pop ecx  +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1004240  +
mov ecx eax +
call sub_1003D09  +
jmp loc_1004242  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [edi+20h] +
mov [ecx] eax +
cmp eax ebx +
jz loc_100473F  +
mov byte ptr [eax] 0 +
mov eax [ecx] +
mov edx [esi+10h] +
mov [eax+40h] edx +
mov edx [esi+14h] +
mov [eax+44h] edx +
mov eax [ecx] +
push ecx  +
lea ecx [edi+90h] +
mov [eax+50h] ebx +
call sub_1003A81  +
jmp loc_100473F  +
movzx eax word ptr [esi+56h] +
sub eax 4 +
push eax  +
mov eax [esi+5Ch] +
add eax 4 +
push eax  +
call sub_1002433  +
mov esi eax +
cmp [edi+20h] ebx +
jz loc_10041DD  +
push esi  +
call sub_10025D2  +
mov ecx [edi+20h] +
mov [ecx+50h] eax +
jmp loc_10041DD  +
mov eax [edi+20h] +
cmp eax ebx +
jz loc_100473F  +
mov ecx [esi+10h] +
mov [eax+48h] ecx +
mov ecx [esi+14h] +
mov [eax+4Ch] ecx +
jmp loc_1004212  +
movzx eax word ptr [esi+56h] +
sub eax 4 +
push eax  +
mov eax [esi+5Ch] +
add eax 4 +
push eax  +
call sub_1002433  +
push 28h  +
mov [ebp+8] eax +
call sub_1001751  +
pop ecx  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_10042FF  +
mov ecx eax +
call sub_1003987  +
mov [ebp-14h] eax +
jmp loc_1004302  +
mov [ebp-14h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-14h] ebx +
jz loc_1004127  +
mov ecx [esi+10h] +
mov eax [ebp-14h] +
push dword ptr [ebp+8]  +
mov [eax] ecx +
mov ecx [esi+14h] +
mov [eax+4] ecx +
call sub_10025D2  +
mov ecx [ebp-14h] +
mov [ecx+10h] eax +
mov [ecx+14h] ebx +
mov eax [edi+20h] +
mov [eax+54h] ecx +
mov edi [edi+20h] +
lea eax [edi+54h] +
push eax  +
lea ecx [edi+58h] +
call sub_1003A81  +
jmp loc_1004127  +
mov edi [edi+20h] +
cmp [edi+54h] ebx +
jz loc_100473F  +
mov [edi+54h] ebx +
jmp loc_100473F  +
movzx eax word ptr [esi+56h] +
sub eax 4 +
push eax  +
mov eax [esi+5Ch] +
add eax 4 +
push eax  +
call sub_1002433  +
push 58h  +
mov [ebp+8] eax +
call sub_1001751  +
pop ecx  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 6 +
cmp eax ebx +
jz loc_1004395  +
mov ecx eax +
call sub_10039B3  +
mov [ebp-10h] eax +
jmp loc_1004398  +
mov [ebp-10h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-10h] ebx +
jz loc_1004127  +
mov eax [ebp-10h] +
mov [eax+10h] ebx +
mov ecx [esi+10h] +
mov [eax] ecx +
mov ecx [esi+14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
cmp [eax] bx +
jz loc_10043C1  +
push eax  +
jmp loc_10043C6  +
push offset aNeutral  +
call sub_10025D2  +
mov ecx [ebp-10h] +
mov [ecx+10h] eax +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov [eax+14h] ecx +
mov eax [edi+20h] +
mov eax [eax+54h] +
lea ecx [eax+14h] +
push ecx  +
lea ecx [eax+18h] +
call sub_1003A81  +
jmp loc_1004127  +
mov eax [edi+20h] +
mov eax [eax+54h] +
cmp [eax+14h] ebx +
jz loc_100473F  +
mov [eax+14h] ebx +
jmp loc_100473F  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
mov ecx [esi+10h] +
mov [eax+18h] ecx +
mov ecx [esi+14h] +
mov [eax+1Ch] ecx +
jmp loc_100473F  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
add eax 28h +
push eax  +
jmp loc_1004734  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
mov ecx [esi+10h] +
mov [eax+20h] ecx +
mov ecx [esi+14h] +
mov [eax+24h] ecx +
jmp loc_100473F  +
mov eax [edi+20h] +
mov dword ptr [edi+40h] 4 +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
mov ecx [esi+10h] +
mov [eax+38h] ecx +
mov ecx [esi+14h] +
mov [eax+3Ch] ecx +
jmp loc_100473F  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
mov ecx [esi+10h] +
mov [eax+40h] ecx +
mov ecx [esi+14h] +
mov [eax+44h] ecx +
jmp loc_100473F  +
mov edi [edi+20h] +
mov eax [edi+54h] +
cmp [eax+14h] ebx +
jz loc_100473F  +
mov eax [eax+14h] +
lea ecx [eax+48h] +
push ecx  +
push dword ptr [eax+10h]  +
push ebx  +
jmp loc_1004737  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
add eax 48h +
jmp loc_100443E  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
add eax 28h +
push eax  +
push ebx  +
jmp loc_10044CA  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov eax [eax+14h] +
cmp eax ebx +
jz loc_100473F  +
add eax 48h +
jmp loc_10044FD  +
mov edi [edi+20h] +
cmp edi ebx +
jz loc_100473F  +
lea eax [edi+68h] +
push eax  +
push dword ptr [edi+50h]  +
jmp loc_10044CA  +
push 2800h  +
push dword_1011564  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
push dword_1011564  +
call sub_10025D2  +
mov [edi+0B0h] eax +
jmp loc_100473F  +
add edi 44h +
push edi  +
jmp loc_10044FE  +
movzx eax word ptr [esi+56h] +
sub eax 4 +
push eax  +
mov eax [esi+5Ch] +
add eax 4 +
push eax  +
push dword_1011554  +
call memcpy  +
mov [edi+40h] ebx +
mov eax [esi+10h] +
mov [edi+58h] eax +
mov eax [esi+14h] +
add esp 0Ch +
mov [edi+5Ch] eax +
push dword_1011554  +
call sub_10025D2  +
mov [edi+68h] eax +
jmp loc_100473F  +
mov eax [esi+10h] +
mov [edi+60h] eax +
mov eax [esi+14h] +
mov [edi+64h] eax +
jmp loc_100473F  +
mov dword ptr [edi+40h] 3 +
jmp loc_100473F  +
cmp [edi+20h] ebx +
jz loc_100473F  +
mov eax [esi+5Ch] +
add eax 8 +
push eax  +
mov ebx 2800h +
push ebx  +
push dword_1011554  +
call sub_1002881  +
mov eax dword_1011554 +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10045E4  +
mov ecx [esi+5Ch] +
sub eax edx +
sar eax 1 +
lea eax [ecx+eax*2+0Ah] +
push eax  +
push ebx  +
push dword_1011560  +
call sub_1002881  +
movzx eax word ptr [esi+28h] +
push ebx  +
push dword_1011564  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
push dword_1011560  +
push dword_1011554  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 14h +
push lpWideCharStr  +
call sub_10025D2  +
mov [ebp+8] eax +
test eax eax +
jz loc_100473F  +
mov ecx [edi+20h] +
add ecx 30h +
lea eax [ebp+8] +
push eax  +
call sub_1003A81  +
jmp loc_100473F  +
push edi  +
push 1  +
push 3  +
push esi  +
call sub_1003B73  +
jmp loc_100473F  +
push edi  +
push ebx  +
push 2  +
jmp loc_100466E  +
push edi  +
push 1  +
jmp loc_100467B  +
push edi  +
push 1  +
push 1  +
jmp loc_100466E  +
push edi  +
push ebx  +
push ebx  +
jmp loc_100466E  +
movzx eax word ptr [esi+56h] +
sub eax 4 +
push eax  +
mov eax [esi+5Ch] +
add eax 4 +
push eax  +
push dword_1011554  +
call memcpy  +
movzx eax word ptr [esi+28h] +
add esp 0Ch +
mov ebx 2800h +
push ebx  +
push dword_1011564  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
push dword_1011554  +
push dword_1011564  +
push ebx  +
push lpWideCharStr  +
call sub_1002915  +
add esp 10h +
push lpWideCharStr  +
call sub_10025D2  +
mov [ebp+8] eax +
test eax eax +
jz loc_100473F  +
mov eax [edi+40h] +
test eax eax +
jnz loc_1004709  +
lea ecx [edi+80h] +
jmp loc_100465B  +
cmp eax 3 +
jnz loc_1004723  +
lea eax [ebp+8] +
push eax  +
mov eax [edi+20h] +
mov eax [eax+54h] +
mov ecx [eax+14h] +
add ecx 28h +
jmp loc_100465F  +
cmp eax 1 +
jnz loc_100473F  +
jmp loc_1004655  +
add edi 0A0h +
push edi  +
push ebx  +
push 1  +
push 1  +
push esi  +
call sub_1003AC6  +
xor eax eax +
inc eax  +
jmp loc_1004746  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push ebx  +
push esi  +
push edi  +
lea edx [eax+18h] +
push 4  +
pop ecx  +
mov edi offset dword_100117C +
mov esi edx +
xor ebx ebx +
cmps   +
jnz loc_10048D9  +
cmp [eax+2Dh] bl +
jnz loc_10048D9  +
mov edi dword_100C0C0 +
mov esi [eax+5Ch] +
push 44h  +
add edi 18h +
pop ecx  +
movs   +
jmp loc_10048F5  +
push 4  +
mov esi edx +
pop ecx  +
mov edi offset dword_100118C +
xor edx edx +
cmps   +
jnz loc_10048F5  +
mov ecx dword_100C0C0 +
push eax  +
call sub_1003DE4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1ACh +
mov eax dword_10070A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push 1A0h  +
lea eax [ebp+var_1A4] +
push edi  +
push eax  +
mov [ebp+var_1AC] edi +
mov [ebp+var_1A8] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_1A4] +
push eax  +
mov [ebp+var_1A4] esi +
mov [ebp+var_190] 10000000h +
mov [ebp+var_14] offset loc_10048A3 +
call ds:OpenTraceW  +
mov [ebp+var_1AC] eax +
or eax edx +
mov [ebp+var_1A8] edx +
jnz loc_100498D  +
push esi  +
push 272Bh  +
call sub_1001924  +
pop ecx  +
pop ecx  +
call ds:GetLastError  +
push eax  +
call sub_100249F  +
jmp loc_10049BA  +
push edi  +
push edi  +
push 1  +
lea eax [ebp+var_1AC] +
push eax  +
call ds:ProcessTrace  +
cmp eax edi +
jz loc_10049B7  +
push eax  +
push offset aProcesstrace  +
push 2728h  +
call sub_1001924  +
add esp 0Ch +
jmp loc_10049BA  +
xor edi edi +
inc edi  +
mov eax [ebp+var_1AC] +
or eax [ebp+var_1A8] +
jz loc_10049DA  +
push [ebp+var_1A8]  +
push [ebp+var_1AC]  +
call ds:CloseTrace  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1004DD3  +
leave   +
retn 4  +
***
jmp sub_1001CE9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001568 +
call sub_1001CE9  +
test byte ptr [ebp+8] 1 +
jz loc_1004A21  +
push esi  +
call sub_1001789  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001F01  +
mov dword ptr [esi] offset off_1001568 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax (offset loc_100565C+1) +
call __EH_prolog3  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_1001FFF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1001F44  +
push offset dword_100581C  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
push 44h  +
mov eax (offset loc_100565C+1) +
call __EH_prolog3  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_1001FFF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1001EC3  +
push offset dword_1005AFC  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_1001568 +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1004A2D  +
push offset dword_1005AFC  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1004B11  +
test eax eax +
jnz loc_1004B16  +
mov ecx [esi] +
test ecx ecx +
jz loc_1004B0E  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1004B02  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1011594 +
push offset dword_1011584  +
push dword_1011590  +
mov dword_1011584 eax +
push offset dword_1011574  +
push offset dword_1011578  +
push offset dword_1011570  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1011580 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1004B9E  +
cmp eax esi +
jnz loc_1004B91  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1004BA1  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1004B78  +
xor esi esi +
inc esi  +
mov eax dword_10118C4 +
cmp eax esi +
jnz loc_1004BB4  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1004BEF  +
mov eax dword_10118C4 +
test eax eax +
jnz loc_1004BE9  +
mov dword_10118C4 esi +
push offset dword_1001144  +
push offset dword_1001138  +
call sub_1004AF5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004BEF  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1004CB9  +
mov dword_101158C esi +
mov eax dword_10118C4 +
cmp eax esi +
jnz loc_1004C13  +
push offset dword_1001134  +
push offset dword_100112C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10118C4 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1004C20  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10118CC ebx +
jz loc_1004C41  +
push offset dword_10118CC  +
call sub_1005009  +
pop ecx  +
test eax eax +
jz loc_1004C41  +
push ebx  +
push 2  +
push ebx  +
call dword_10118CC  +
push dword_1011574  +
push dword_1011578  +
push dword_1011570  +
call sub_10020B0  +
add esp 0Ch +
mov dword_1011588 eax +
cmp dword_101157C ebx +
jnz loc_1004C9F  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1011588 eax +
xor ebx ebx +
cmp dword_101157C ebx +
jnz loc_1004C9F  +
push eax  +
call ds:_exit  +
cmp dword_101158C ebx +
jnz loc_1004CAD  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1011588 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1004CD6  +
xor eax eax +
jmp loc_1004D23  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1004CD2  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1004D10  +
cmp ecx 20Bh +
jnz loc_1004CD2  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1004CD2  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1004D1E  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1004CD2  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_101157C eax +
call sub_10051A2  +
push eax  +
call ds:__set_app_type  +
or dword_10118BC 0FFFFFFFFh +
or dword_10118C0 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_101159C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1011598 +
mov [eax] ecx +
call sub_1005134  +
cmp dword_10070B8 0 +
jnz loc_1004D7C  +
push offset sub_1005134  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100511C  +
xor eax eax +
retn   +
***
call sub_10051E1  +
jmp sub_1004B56  +
***
jmp ds:__CxxFrameHandler3  +
***
cmp ecx dword_10070A8 +
jnz loc_1004DDE  +
retn 0  +
jmp loc_1005277  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10070A8 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10070A8 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1004EB2  +
push esi  +
call sub_1001789  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1004F50  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1004F50  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1004F4A  +
cmp eax 19930521h +
jz loc_1004F4A  +
cmp eax 19930522h +
jz loc_1004F4A  +
cmp eax 1994000h +
jnz loc_1004F50  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1004F10+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1004F96  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1004F92  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1004FFD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1004FF5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1004FFF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1004FE5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1004F80  +
pop ecx  +
test eax eax +
jz loc_1005066  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1004FC0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005066  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100506F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1004DD3  +
push offset dword_10070A8  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1005195  +
cmp ecx 0FFFFFFFFh +
jz loc_1005195  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100518E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100518E  +
cmp edx 10000000h +
jnb loc_100518E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100518E  +
jmp loc_1005189  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10051D7  +
push eax  +
call sub_100513C  +
test eax eax +
jz loc_10051D7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10051CC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10051D7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10070A8 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1005213  +
test eax ebx +
jz loc_1005213  +
not eax  +
mov dword_10070AC eax +
jmp loc_100526E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100525A  +
test dword_10070A8 ebx +
jnz loc_100525F  +
mov esi 0BB40E64Fh +
mov dword_10070A8 esi +
not esi  +
mov dword_10070AC esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10116A0 eax +
mov dword_101169C ecx +
mov dword_1011698 edx +
mov dword_1011694 ebx +
mov dword_1011690 esi +
mov dword_101168C edi +
mov word_10116B8 ss +
mov word_10116AC cs +
mov word_1011688 ds +
mov word_1011684 es +
mov word_1011680 fs +
mov word_101167C gs +
pushf   +
pop dword_10116B0  +
mov eax [ebp+0] +
mov dword_10116A4 eax +
mov eax [ebp+4] +
mov dword_10116A8 eax +
lea eax [ebp+8] +
mov dword_10116B4 eax +
mov eax [ebp-320h] +
mov dword_10115F0 10001h +
mov eax dword_10116A8 +
mov dword_10115AC eax +
mov dword_10115A0 0C0000409h +
mov dword_10115A4 1 +
mov eax dword_10070A8 +
mov [ebp-328h] eax +
mov eax dword_10070AC +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005680 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005738 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005794 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_10057C0 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005860 +
jmp loc_1004DC8  +
***
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_100588C +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_10058C0 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_10058EC +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005950 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_10059A4 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_10059D8 +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005A1C +
jmp loc_1004DC8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005A50 +
jmp loc_1004DC8  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005A7C +
jmp loc_1004DC8  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005AA0 +
jmp loc_1004DC8  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_1004DD3  +
mov eax offset dword_1005B14 +
jmp loc_1004DC8  +
***
popa   +
outs   +
add gs:[bp+si+5304h] dh +
ins  dx +
jo $+4  +
jmp near ptr 756EAA87h  +
***
