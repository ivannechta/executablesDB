mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jnz loc_10015D7  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1001603  +
push offset ProcName  +
push edi  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_10015EF  +
call ds:GetLastError  +
jmp loc_10015FA  +
push 64h  +
push [ebp+arg_0]  +
push 0  +
push 0  +
call eax  +
push edi  +
mov esi eax +
call ds:FreeLibrary  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jnz loc_1001637  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1001682  +
push offset aPdidofinishins  +
push edi  +
call ds:GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_1001651  +
call ds:GetLastError  +
jmp loc_1001679  +
lea eax [ebp+var_4] +
push eax  +
push offset aLx  +
push [ebp+arg_0]  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_100166F  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push 0  +
call esi  +
push edi  +
mov esi eax +
call ds:FreeLibrary  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+MemberIndex] eax +
mov eax [ebp+arg_8] +
xor ebx ebx +
push offset LibFileName  +
mov [ebp+var_24] eax +
mov [ebp+var_30] ebx +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jnz loc_10016D6  +
call ds:GetLastError  +
mov esi eax +
jmp loc_100184E  +
push offset aSetinternetpol  +
push eax  +
call ds:GetProcAddress  +
mov [ebp+var_2C] eax +
cmp eax ebx +
jnz loc_10016F6  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1001845  +
push edi  +
lea eax [ebp+var_44] +
push eax  +
mov edi offset aLx +
push edi  +
push esi  +
mov esi ds:swscanf +
call esi  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1001736  +
lea eax [ebp+var_48] +
push eax  +
push edi  +
push [ebp+MemberIndex]  +
call esi  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1001736  +
lea eax [ebp+var_40] +
push eax  +
push edi  +
push [ebp+var_24]  +
call esi  +
add esp 0Ch +
cmp eax 1 +
jz loc_100173E  +
push 0Dh  +
pop esi  +
jmp loc_1001844  +
push [ebp+var_48]  +
push [ebp+var_44]  +
call [ebp+var_2C]  +
cmp [ebp+var_40] ebx +
jz loc_1001842  +
lea eax [ebp+var_30] +
push eax  +
push ebx  +
call ds:CM_Connect_MachineW  +
test eax eax +
jnz loc_1001842  +
push [ebp+var_30]  +
lea eax [ebp+var_38] +
push ebx  +
push ebx  +
push eax  +
call ds:CM_Locate_DevNode_ExW  +
test eax eax +
jnz loc_1001842  +
push 4  +
push ebx  +
push ebx  +
push ebx  +
mov [ebp+MemberIndex] ebx +
mov [ebp+var_24] ebx +
call ds:SetupDiGetClassDevsW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_100179F  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1001844  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push ebx  +
push edi  +
mov [ebp+DeviceInfoData.cbSize] 1Ch +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jz loc_100182D  +
mov esi offset dword_100117C +
inc [ebp+MemberIndex]  +
push ebx  +
push ebx  +
push 4  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
push esi  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push edi  +
call ds:SetupDiGetDevicePropertyW  +
test eax eax +
jz loc_100181B  +
cmp [ebp+var_2C] 7 +
jnz loc_100181B  +
test byte ptr [ebp+var_24] 40h +
jz loc_100181B  +
push ebx  +
push [ebp+DeviceInfoData.DevInst]  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
call ds:CM_Get_DevNode_Status  +
cmp eax 0Dh +
jz loc_1001802  +
cmp eax 25h +
jnz loc_100181B  +
or [ebp+var_24] 20h +
push ebx  +
push 4  +
lea eax [ebp+var_24] +
push eax  +
push 7  +
push esi  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push edi  +
call ds:SetupDiSetDevicePropertyW  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+MemberIndex]  +
push edi  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jnz loc_10017BB  +
push edi  +
call ds:SetupDiDestroyDeviceInfoList  +
push [ebp+var_30]  +
push 2  +
push [ebp+var_38]  +
call ds:CM_Reenumerate_DevNode_Ex  +
mov esi ebx +
pop edi  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001CFE  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_100188D  +
lea eax [ebp-1Ch] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp-1Ch] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
call esi  +
test eax eax +
jnz loc_1001879  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push 1Ch  +
push offset dword_1002E30  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-24h] edi +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:HeapSetInformation  +
call sub_1002528  +
test eax eax +
jnz loc_10018D6  +
call ds:GetLastError  +
mov [ebp-1Ch] eax +
jmp loc_10019D1  +
call sub_10025A1  +
test eax eax +
jnz loc_10018EB  +
mov dword ptr [ebp-1Ch] 5 +
jmp loc_10019D1  +
call ds:GetCommandLineW  +
cmp eax edi +
jnz loc_1001901  +
mov dword ptr [ebp-1Ch] 57h +
jmp loc_10019D1  +
lea ecx [ebp-20h] +
push ecx  +
push eax  +
call ds:CommandLineToArgvW  +
mov esi eax +
cmp dword ptr [ebp-20h] 2 +
jl loc_10018F5  +
lea eax [ebp-24h] +
push eax  +
push offset aLx  +
push dword ptr [esi+4]  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_10018F5  +
mov [ebp-4] edi +
mov eax [ebp-24h] +
dec eax  +
jz loc_100199D  +
dec eax  +
dec eax  +
jz loc_100198A  +
dec eax  +
dec eax  +
jnz loc_1001945  +
cmp dword ptr [ebp-20h] 5 +
jz loc_100194E  +
mov dword ptr [ebp-1Ch] 57h +
jmp loc_10019CA  +
lea eax [ebp-2Ch] +
push eax  +
push edi  +
push edi  +
push offset loc_1001865  +
push edi  +
push edi  +
call ds:CreateThread  +
cmp eax edi +
jz loc_100196C  +
push eax  +
call ds:CloseHandle  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call sub_100168F  +
mov [ebp-1Ch] eax +
push edi  +
push edi  +
push 12h  +
push edi  +
call ds:PostMessageW  +
jmp loc_10019CA  +
cmp dword ptr [ebp-20h] 4 +
jnz loc_1001945  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call sub_1001610  +
jmp loc_10019C7  +
cmp dword ptr [ebp-20h] 4 +
jnz loc_1001945  +
push dword ptr [esi+8]  +
call sub_10015B5  +
jmp loc_10019C7  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-28h] eax +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
push dword ptr [ebp-28h]  +
call ds:RtlNtStatusToDosError  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002229  +
push dword ptr [ebp-1Ch]  +
call ds:ExitProcess  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1001A01  +
test eax eax +
jnz loc_1001A06  +
mov ecx [esi] +
test ecx ecx +
jz loc_10019FE  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10019F2  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1004044 +
push offset dword_1004034  +
push dword_1004040  +
mov dword_1004034 eax +
push offset unk_1004024  +
push offset unk_1004028  +
push offset unk_1004020  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1004030 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1001AA6  +
cmp eax esi +
jnz loc_1001A99  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1001AA9  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1001A80  +
xor esi esi +
inc esi  +
mov eax dword_100441C +
cmp eax esi +
jnz loc_1001ABC  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1001AEB  +
mov eax dword_100441C +
test eax eax +
jnz loc_1001AE5  +
mov dword_100441C esi +
push offset dword_100115C  +
push offset dword_1001150  +
call sub_10019E5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001AEB  +
jmp loc_1001C13  +
mov dword_100403C esi +
mov eax dword_100441C +
cmp eax esi +
jnz loc_1001B0F  +
push offset dword_100114C  +
push offset dword_1001144  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100441C 2 +
test ebx ebx +
jnz loc_1001B1B  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1004424 0 +
jz loc_1001B3F  +
push offset dword_1004424  +
call sub_1001E99  +
pop ecx  +
test eax eax +
jz loc_1001B3F  +
push 0  +
push 2  +
push 0  +
call dword_1004424  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1001B59  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1001B69  +
cmp al 20h +
ja loc_1001B69  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1001B59  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1001B75  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1001B78  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_1004038 eax +
cmp dword_100402C 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1001BAA  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1001BBD  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1001B46  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_1004038 eax +
cmp dword_100402C 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100403C 0 +
jnz loc_1001BFE  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1004038 +
jmp loc_1001C1F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1001C3C  +
xor eax eax +
jmp loc_1001C89  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1001C38  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1001C76  +
cmp ecx 20Bh +
jnz loc_1001C38  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1001C38  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1001C84  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1001C38  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100402C eax +
call sub_1001FA7  +
push eax  +
call ds:__set_app_type  +
or dword_1004414 0FFFFFFFFh +
or dword_1004418 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100404C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1004048 +
mov [eax] ecx +
call sub_1001F39  +
cmp dword_1004010 0 +
jnz loc_1001CE2  +
push offset sub_1001F39  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1001F21  +
xor eax eax +
retn   +
***
call sub_1001FE6  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1004000 +
jnz loc_1001D09  +
retn 0  +
jmp loc_100207C  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001CFE  +
push offset dword_1004000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1001DD9  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1001DD9  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1001DD3  +
cmp eax 19930521h +
jz loc_1001DD3  +
cmp eax 19930522h +
jz loc_1001DD3  +
cmp eax 1994000h +
jnz loc_1001DD9  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_1001D9C  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1001E26  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1001E22  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1001E8D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1001E85  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1001E8F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1001E75  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1001E10  +
pop ecx  +
test eax eax +
jz loc_1001EF6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1001E50  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001EF6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1001EFF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001F9A  +
cmp ecx 0FFFFFFFFh +
jz loc_1001F9A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1001F93  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1001F93  +
cmp edx 10000000h +
jnb loc_1001F93  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1001F93  +
jmp loc_1001F8E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1001FDC  +
push eax  +
call sub_1001F41  +
test eax eax +
jz loc_1001FDC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1001FD1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1001FDC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1004000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002018  +
test eax ebx +
jz loc_1002018  +
not eax  +
mov dword_1004004 eax +
jmp loc_1002073  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100205F  +
test dword_1004000 ebx +
jnz loc_1002064  +
mov esi 0BB40E64Fh +
mov dword_1004000 esi +
not esi  +
mov dword_1004004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1004150 eax +
mov dword_100414C ecx +
mov dword_1004148 edx +
mov dword_1004144 ebx +
mov dword_1004140 esi +
mov dword_100413C edi +
mov word_1004168 ss +
mov word_100415C cs +
mov word_1004138 ds +
mov word_1004134 es +
mov word_1004130 fs +
mov word_100412C gs +
pushf   +
pop dword_1004160  +
mov eax [ebp+0] +
mov dword_1004154 eax +
mov eax [ebp+4] +
mov dword_1004158 eax +
lea eax [ebp+8] +
mov dword_1004164 eax +
mov eax [ebp-320h] +
mov dword_10040A0 10001h +
mov eax dword_1004158 +
mov dword_100405C eax +
mov dword_1004050 0C0000409h +
mov dword_1004054 1 +
mov eax dword_1004000 +
mov [ebp-328h] eax +
mov eax dword_1004004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push esi  +
push offset dword_1004384  +
mov [esi+8] ebx +
mov [esi+4] ebx +
mov [esi] ebx +
call ds:InterlockedCompareExchange  +
test eax eax +
jnz loc_1002190  +
inc eax  +
pop ebx  +
retn   +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call ds:CreateEventW  +
mov [esi] eax +
cmp eax ebx +
jnz loc_10021A4  +
xor eax eax +
pop ebx  +
retn   +
push edi  +
mov edi dword_1004384 +
push edi  +
push esi  +
push offset dword_1004384  +
mov [esi+4] edi +
call ds:InterlockedCompareExchange  +
cmp edi eax +
jnz loc_10021A5  +
cmp edi ebx +
jz loc_10021D2  +
push ebx  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call ds:WaitForSingleObjectEx  +
mov edi eax +
jmp loc_10021D4  +
xor edi edi +
push dword ptr [esi]  +
call ds:CloseHandle  +
xor eax eax +
cmp edi ebx +
pop edi  +
mov [esi] ebx +
setz al  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push offset dword_1004384  +
call ds:InterlockedCompareExchange  +
cmp eax esi +
jz locret_1002223  +
cmp dword ptr [esi+8] 0 +
jnz loc_1002214  +
mov ecx [eax+4] +
mov [ecx+8] eax +
mov eax [eax+4] +
cmp eax esi +
jnz loc_1002207  +
mov eax [esi+8] +
push dword ptr [eax]  +
and dword ptr [eax+4] 0 +
call ds:SetEvent  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
cmp dword_1004378 edi +
jnz loc_1002240  +
xor eax eax +
jmp loc_1002299  +
push esi  +
lea esi [ebp+var_C] +
call sub_100216F  +
test eax eax +
jz loc_1002298  +
dec dword_1004374  +
jnz loc_100228D  +
cmp dword_1004380 edi +
jz loc_100226D  +
call sub_10027C8  +
call sub_10026F6  +
mov dword_1004380 edi +
mov eax lpMem +
cmp eax edi +
jz loc_1002282  +
push eax  +
call sub_100263F  +
mov lpMem edi +
call sub_100267C  +
mov dword_1004378 edi +
lea esi [ebp+var_C] +
call sub_10021ED  +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0E0000300h +
jz loc_10022BD  +
cmp dword ptr [ebp+8] 0C0000194h +
jz loc_10022BD  +
xor eax eax +
inc eax  +
jmp loc_10022BF  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp eax 0C00000FDh +
jnz loc_10022FF  +
call _resetstkoflw  +
test eax eax +
jz loc_10022E7  +
mov eax 3E9h +
jmp loc_100232A  +
push 0  +
push 0  +
push 1  +
push 0E0000300h  +
call ds:RaiseException  +
mov eax 0E0000300h +
jmp loc_100232A  +
cmp eax 0C0000005h +
jz loc_1002327  +
cmp eax 0C0000006h +
jz loc_1002322  +
push eax  +
call ds:RtlNtStatusToDosError  +
cmp eax 13Dh +
jnz loc_100232A  +
mov eax 0E0000239h +
jmp loc_100232A  +
push 1Eh  +
pop eax  +
jmp loc_100232A  +
mov eax [ebp+0Ch] +
mov ecx [ebp+10h] +
test ecx ecx +
jz loc_1002333  +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002352  +
cmp ecx 7FFFFFFFh +
jbe loc_1002357  +
mov eax 80070057h +
test eax eax +
jl loc_10023A2  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1002392  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100238D  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100238D  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002375  +
pop edi  +
test esi esi +
jnz loc_1002399  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jnz loc_10023CD  +
push 57h  +
pop edi  +
jmp loc_1002433  +
push esi  +
push [ebp+arg_0]  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_100233C  +
test eax eax +
jge loc_10023EC  +
push 57h  +
pop edi  +
jmp loc_1002432  +
push 0  +
push esi  +
push offset aInf  +
lea eax [ebp+String] +
push eax  +
call sub_100290D  +
test eax eax +
jz loc_100242A  +
push [ebp+arg_4]  +
lea eax [ebp+String] +
push eax  +
call sub_100272B  +
test eax eax +
jz loc_100242A  +
push [ebp+arg_4]  +
lea eax [ebp+String] +
push eax  +
call sub_1002813  +
test eax eax +
jnz loc_1002432  +
call ds:GetLastError  +
mov edi eax +
pop esi  +
push edi  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
xor eax eax +
test edi edi +
setz al  +
xor ecx ebp +
pop edi  +
call sub_1001CFE  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax lpMem +
and [ebp+var_250] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test eax eax +
jz loc_100248C  +
push eax  +
call sub_100263F  +
and lpMem 0 +
xor edi edi +
inc edi  +
test esi esi +
jz loc_10024B8  +
and dword_1004014 0 +
push esi  +
call sub_10029E0  +
push esi  +
push 124h  +
lea eax [ebp+var_24C] +
push eax  +
call sub_100233C  +
test eax eax +
jl loc_100250D  +
jmp loc_10024D9  +
mov esi 104h +
push esi  +
lea eax [ebp+var_24C] +
push eax  +
mov dword_1004014 edi +
call ds:GetSystemWindowsDirectoryW  +
test eax eax +
jz loc_100250D  +
cmp eax esi +
ja loc_100250D  +
lea eax [ebp+var_24C] +
push eax  +
call sub_10028B4  +
mov lpMem eax +
test eax eax +
jz loc_100250D  +
cmp dword_1004380 0 +
jz loc_1002507  +
push dword_1004014  +
push eax  +
call sub_10023AB  +
test eax eax +
jz loc_100250D  +
mov [ebp+var_250] edi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_250] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001CFE  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea esi [ebp+var_C] +
call sub_100216F  +
test eax eax +
jz loc_1002599  +
inc dword_1004374  +
xor esi esi +
inc esi  +
cmp dword_1004374 esi +
jnz loc_100258C  +
call sub_100265E  +
test eax eax +
jz loc_1002568  +
push 0  +
call sub_1002455  +
test eax eax +
jz loc_1002568  +
mov dword_1004378 esi +
cmp dword_1004378 0 +
jnz loc_100258C  +
mov eax lpMem +
test eax eax +
jz loc_1002587  +
push eax  +
call sub_100263F  +
and lpMem 0 +
call sub_100267C  +
lea esi [ebp+var_C] +
call sub_10021ED  +
mov eax dword_1004378 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_100260B  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_1002602  +
mov [ebp+var_10] ebx +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
xor ecx ebp +
pop ebx  +
call sub_1001CFE  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 0  +
push hHeap  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
call ds:GetProcessHeap  +
mov hHeap eax +
test eax eax +
jnz loc_100266E  +
retn   +
xor eax eax +
inc eax  +
mov dword_1004388 eax +
retn   +
***
cmp dword_1004388 0 +
jz loc_100268C  +
and dword_1004388 0 +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_10026B3  +
mov eax [ebp+arg_0] +
jb loc_10026AA  +
cmp eax 0FFFFFFFFh +
ja loc_10026B3  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_10026BE  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+dwBytes] +
mul  [ebp+arg_4] +
push edx  +
push eax  +
call sub_1002695  +
test eax eax +
jge loc_10026E5  +
xor eax eax +
jmp loc_10026ED  +
push [ebp+dwBytes]  +
call sub_1002620  +
pop ebp  +
retn 8  +
***
mov eax dword_10043A0 +
test eax eax +
jz loc_100270C  +
push eax  +
call sub_100263F  +
and dword_10043A0 0 +
mov eax dword_10043C8 +
test eax eax +
jz loc_1002722  +
push eax  +
call sub_100263F  +
and dword_10043C8 0 +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jz loc_1002746  +
mov eax offset aSetupapi_app_l +
mov edi offset aSetupapi_dev_l +
jmp loc_100274D  +
mov eax offset aSetupapi_offli +
mov edi eax +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call sub_1002BD9  +
test eax eax +
jz loc_1002778  +
mov eax dword_10043C8 +
mov esi [ebp+var_4] +
test eax eax +
jz loc_1002770  +
push eax  +
call sub_100263F  +
mov eax [ebp+var_4] +
mov dword_10043C8 eax +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_1002BD9  +
test eax eax +
jz loc_10027A3  +
mov eax dword_10043A0 +
mov esi [ebp+var_4] +
test eax eax +
jz loc_100279B  +
push eax  +
call sub_100263F  +
mov eax [ebp+var_4] +
mov dword_10043A0 eax +
test esi esi +
jz loc_10027AD  +
push esi  +
call sub_10029E0  +
xor eax eax +
cmp [ebp+arg_4] eax +
pop edi  +
setz al  +
pop esi  +
mov dword_10043E4 eax +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov eax dword_10043E8 +
test eax eax +
jz loc_10027DE  +
push eax  +
call sub_100263F  +
and dword_10043E8 0 +
mov eax dword_10043EC +
test eax eax +
jz loc_10027F4  +
push eax  +
call sub_100263F  +
and dword_10043EC 0 +
mov eax dword_10043F0 +
test eax eax +
jz loc_100280A  +
push eax  +
call sub_100263F  +
and dword_10043F0 0 +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10043E8 +
test eax eax +
jz loc_100282E  +
push eax  +
call sub_100263F  +
and dword_10043E8 0 +
push esi  +
push offset dword_10043E8  +
push offset aSetupapi_ev1  +
push [ebp+arg_0]  +
call sub_1002BD9  +
mov esi eax +
test esi esi +
jz loc_10028A3  +
mov eax dword_10043EC +
test eax eax +
jz loc_100285D  +
push eax  +
call sub_100263F  +
and dword_10043EC 0 +
push offset dword_10043EC  +
push offset aSetupapi_ev2  +
push [ebp+arg_0]  +
call sub_1002BD9  +
mov esi eax +
test esi esi +
jz loc_10028A3  +
mov eax dword_10043F0 +
test eax eax +
jz loc_100288B  +
push eax  +
call sub_100263F  +
and dword_10043F0 0 +
push offset dword_10043F0  +
push offset aSetupapi_ev3  +
push [ebp+arg_0]  +
call sub_1002BD9  +
mov esi eax +
test esi esi +
jnz loc_10028A8  +
call sub_10027C8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10028C3  +
xor eax eax +
jmp loc_1002904  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10028C9  +
push esi  +
sub eax edx +
push edi  +
sar eax 1 +
lea esi [eax+1] +
push 2  +
push esi  +
call sub_10026C7  +
mov edi eax +
test edi edi +
jz loc_1002900  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_100233C  +
test eax eax +
jge loc_1002900  +
push edi  +
call sub_100263F  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+dwErrCode] 0 +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
push edi  +
mov edi ds:lstrlenW +
push ebx  +
call edi  +
push [ebp+arg_4]  +
mov esi eax +
call edi  +
test esi esi +
jbe loc_1002943  +
movzx ecx word ptr [ebx+esi*2-2] +
cmp cx 5Ch +
jz loc_1002942  +
cmp cx 2Fh +
jnz loc_1002943  +
dec esi  +
mov ecx [ebp+arg_4] +
movzx ecx word ptr [ecx] +
cmp cx 5Ch +
jz loc_1002959  +
cmp cx 2Fh +
jz loc_1002959  +
xor edx edx +
jmp loc_100295D  +
xor edx edx +
inc edx  +
dec eax  +
mov ecx [ebp+arg_C] +
lea eax [eax+esi+2] +
test ecx ecx +
jz loc_100296A  +
mov [ecx] eax +
mov edi [ebp+arg_8] +
cmp eax edi +
ja loc_10029B6  +
test edx edx +
jnz loc_1002981  +
cmp esi edi +
jnb loc_1002985  +
push 5Ch  +
pop eax  +
mov [ebx+esi*2] ax +
inc esi  +
cmp esi edi +
jb loc_100298E  +
mov [ebp+dwErrCode] 0CEh +
jmp loc_10029A9  +
push [ebp+arg_4]  +
mov eax edi +
sub eax esi +
push eax  +
lea eax [ebx+esi*2] +
push eax  +
call sub_100233C  +
test eax eax +
jge loc_10029A9  +
movzx eax ax +
mov [ebp+dwErrCode] eax +
test edi edi +
jz loc_10029BD  +
xor eax eax +
mov [ebx+edi*2-2] ax +
jmp loc_10029BD  +
mov [ebp+dwErrCode] 0CEh +
cmp [ebp+dwErrCode] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10029CF  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
xor eax eax +
cmp [ebp+dwErrCode] eax +
setz al  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
push ebx  +
push esi  +
push edi  +
lea ecx [ebp+FilePart] +
push ecx  +
lea ecx [ebp+FileName] +
push ecx  +
mov esi 104h +
push esi  +
push eax  +
call ds:GetFullPathNameW  +
cmp eax esi +
jnb loc_1002BC0  +
test eax eax +
jnz loc_1002A2D  +
call ds:GetLastError  +
jmp loc_1002BC3  +
mov eax [ebp+FilePart] +
test eax eax +
jz loc_1002BC0  +
lea ecx [ebp+FileName] +
cmp eax ecx +
jz loc_1002BC0  +
xor ecx ecx +
mov [eax] cx +
mov eax dword ptr [ebp+FileName] +
cmp ax 41h +
jb loc_1002A60  +
cmp ax 5Ah +
jbe loc_1002A69  +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_1002A8D  +
cmp word ptr [ebp-20Eh] 3Ah +
jnz loc_1002A8D  +
cmp [ebp+var_20C] 5Ch +
jnz loc_1002BC0  +
lea ecx [ebp+var_20C] +
mov [ebp+var_214] ecx +
push 5Ch  +
pop edi  +
cmp ax di +
jnz loc_1002ACF  +
cmp [ebp-20Eh] di +
jnz loc_1002ACF  +
lea eax [ebp+var_20C] +
push edi  +
push eax  +
call wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002BC0  +
add eax 2 +
push edi  +
push eax  +
call wcschr  +
pop ecx  +
pop ecx  +
mov [ebp+var_214] eax +
test eax eax +
jz loc_1002BC0  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1002AF9  +
and al 10h +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 0FFFFFEF5h +
add eax 10Bh +
jmp loc_1002BC3  +
mov esi [ebp+FilePart] +
lea eax [ebp+FileName] +
cmp esi eax +
jnz loc_1002B0D  +
mov esi eax +
jmp loc_1002B10  +
add esi 0FFFFFFFEh +
cmp esi [ebp+var_214] +
jz loc_1002BC0  +
cmp [esi] di +
jnz loc_1002BC0  +
cmp esi [ebp+var_214] +
jbe loc_1002BC0  +
xor eax eax +
mov [esi] ax +
lea eax [ebp+FileName] +
push 5Ch  +
push eax  +
call wcsrchr  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1002BC0  +
movzx ebx word ptr [edi+2] +
xor eax eax +
mov [edi+2] ax +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesW  +
mov [edi+2] bx +
cmp eax 0FFFFFFFFh +
jnz loc_1002B88  +
mov esi edi +
cmp edi [ebp+var_214] +
ja loc_1002B31  +
cmp esi [ebp+var_214] +
jbe loc_1002BC0  +
mov edi ds:CreateDirectoryW +
xor ebx ebx +
jmp loc_1002BA9  +
test al 10h +
jnz loc_1002B76  +
mov eax 10Bh +
jmp loc_1002BC3  +
cmp [esi+2] bx +
jz loc_1002BBC  +
push 5Ch  +
pop eax  +
push esi  +
mov [esi] ax +
call ds:lstrlenW  +
lea esi [esi+eax*2] +
push ebx  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1002B93  +
jmp loc_1002A22  +
xor eax eax +
jmp loc_1002BC3  +
push 7Bh  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001CFE  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_1002C2D  +
cmp [ebp+lpString] ebx +
jnz loc_1002C0E  +
push 2  +
call sub_1002620  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
test eax eax +
jz loc_1002C5D  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
inc eax  +
jmp loc_1002CC9  +
test ebx ebx +
jnz loc_1002C2D  +
push [ebp+lpString]  +
call sub_10028B4  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
jmp loc_1002CC9  +
push ebx  +
cmp [ebp+lpString] 0 +
jz loc_1002C15  +
mov esi ds:lstrlenW +
call esi  +
mov edi eax +
push [ebp+lpString]  +
call esi  +
lea esi [edi+eax+2] +
push 2  +
push esi  +
call sub_10026C7  +
mov edi eax +
mov [ebp+arg_0] edi +
test edi edi +
jnz loc_1002C61  +
mov eax [ebp+arg_8] +
and [eax] edi +
xor eax eax +
jmp loc_1002CC9  +
and [ebp+ms_exc.disabled] 0 +
push ebx  +
push esi  +
push edi  +
call sub_100233C  +
push 0  +
push esi  +
push [ebp+lpString]  +
push edi  +
call sub_100290D  +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1002CB3  +
mov edi [ebp+8] +
cmp [ebp+var_1C] 0 +
jnz loc_1002CC1  +
push edi  +
call sub_100263F  +
xor edi edi +
mov eax [ebp+arg_8] +
mov [eax] edi +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 0Ch  +
***
push offset loc_1001D72  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1004000 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1001CFE  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
cmp cl 40h +
jnb loc_1002D9A  +
cmp cl 20h +
jnb loc_1002D90  +
shrd eax edx +
shr edx cl +
retn   +
***
mov eax edx +
xor edx edx +
and cl 1Fh +
shr eax cl +
retn   +
***
xor eax eax +
xor edx edx +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1002DC9  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
retf   +
***
