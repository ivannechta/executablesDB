mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_10039C3  +
mov eax [ebp+arg_0] +
jb loc_10039BA  +
cmp eax 0FFFFFFFFh +
ja loc_10039C3  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_10039CE  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10039F1  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_10039FC  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jb loc_1003A1E  +
sub eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1003A29  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jz loc_1003A45  +
mov ecx [ebp+arg_0] +
mov eax [eax+ecx*4] +
jmp loc_1003A47  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+0Ch] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jz loc_1003A87  +
mov [esi+0Ch] eax +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp edi ebx +
jnz loc_1003AA2  +
push dword ptr [esi]  +
call CmFree  +
mov [esi+8] ebx +
mov [esi+4] ebx +
jmp loc_1003B5F  +
cmp [esi] ebx +
jnz loc_1003AF5  +
lea eax [ebp+arg_4] +
push eax  +
push 4  +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_10039A5  +
cmp eax ebx +
jge loc_1003AD5  +
push eax  +
push offset WideCharStr  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
jmp loc_1003B61  +
push [ebp+arg_4]  +
call CmMalloc  +
mov [esi] eax +
cmp eax ebx +
jz loc_1003B61  +
push [ebp+arg_4]  +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov [esi+8] edi +
jmp loc_1003AFC  +
mov eax [esi+8] +
cmp edi eax +
jg loc_1003B01  +
mov [esi+4] edi +
jmp loc_1003B61  +
mov ecx [esi+0Ch] +
add eax ecx +
cmp edi eax +
mov [ebp+arg_4] eax +
jl loc_1003B10  +
mov [ebp+arg_4] edi +
mov eax [ebp+arg_4] +
shl eax 2 +
push eax  +
call CmMalloc  +
mov ebx eax +
test ebx ebx +
jz loc_1003B61  +
mov eax [esi] +
test eax eax +
jz loc_1003B61  +
mov ecx [esi+4] +
shl ecx 2 +
push ecx  +
push eax  +
push ebx  +
call memcpy  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
shl ecx 2 +
push ecx  +
lea eax [ebx+eax*4] +
push 0  +
push eax  +
call memset  +
add esp 18h +
push dword ptr [esi]  +
call CmFree  +
mov eax [ebp+arg_4] +
mov [esi+4] edi +
mov [esi+8] eax +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi [esi+4] +
jl loc_1003B89  +
push 0FFFFFFFFh  +
lea eax [edi+1] +
push eax  +
call sub_1003A72  +
mov esi [esi] +
test esi esi +
jz loc_1003B95  +
mov eax [ebp+arg_4] +
mov [esi+edi*4] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
cmp esi edi +
jz loc_1003C47  +
cmp [ebp+arg_4] edi +
jl loc_1003C47  +
cmp [ebp+arg_0] edi +
jl loc_1003C47  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10039D7  +
cmp eax edi +
jge loc_1003BF5  +
push eax  +
push offset aCptrarrayRemov  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
jmp loc_1003C47  +
mov eax [ebx+4] +
mov edi [ebp+var_8] +
cmp edi eax +
ja loc_1003C47  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
call sub_1003A05  +
test eax eax +
jl loc_1003BDF  +
mov eax [ebp+var_4] +
push 4  +
pop ecx  +
mul  ecx +
lea ecx [ebp+var_4] +
push ecx  +
push edx  +
push eax  +
call sub_10039A5  +
test eax eax +
jl loc_1003BDF  +
cmp [ebp+var_4] 0 +
jz loc_1003C41  +
push [ebp+var_4]  +
lea eax [esi+edi*4] +
push eax  +
mov eax [ebp+arg_0] +
lea eax [esi+eax*4] +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+arg_4] +
sub [ebx+4] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_1003C6E  +
cmp [ebp+arg_0] eax +
jnz loc_1003C72  +
cmp ecx eax +
jnz loc_1003C77  +
jmp loc_1003C72  +
cmp ecx eax +
jz loc_1003C77  +
cmp ecx [ebp+arg_4] +
jbe loc_1003C7C  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1003CAF  +
test [ebp+arg_8] 1000h +
jz loc_1003CAF  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1003CF7  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1003CDF  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1003CF7  +
test esi esi +
jbe loc_1003D10  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1003D10  +
test [ebp+arg_8] 800h +
jz loc_1003D10  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+lpLibFileName]  +
mov esi ecx +
push offset aCdynamiclibrar  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
push 0  +
push 0  +
push dword ptr [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1003D71  +
push eax  +
call ds:FreeLibrary  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jz loc_1003D8F  +
push [ebp+lpProcName]  +
push eax  +
call ds:GetProcAddress  +
jmp loc_1003D91  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1003DE1  +
push offset aRasapi32_dll  +
call sub_1003D1C  +
test eax eax +
jnz loc_1003DB4  +
pop esi  +
retn   +
push offset aRasgetconnects  +
mov ecx esi +
call sub_1003D78  +
push offset aRasconnectionn  +
mov ecx esi +
mov [esi+4] eax +
call sub_1003D78  +
push offset aRasgetconnecti  +
mov ecx esi +
mov [esi+8] eax +
call sub_1003D78  +
mov [esi+0Ch] eax +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
inc edi  +
call sub_1003D9A  +
cmp dword ptr [esi] 0 +
jz loc_1003E12  +
mov esi [esi+4] +
test esi esi +
jz loc_1003E12  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003D9A  +
cmp dword ptr [esi] 0 +
jz loc_1003E45  +
mov esi [esi+8] +
test esi esi +
jz loc_1003E45  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
jmp loc_1003E48  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1003E74  +
cmp dword ptr [esi+8] 0 +
jz loc_1003E74  +
call ds:GetTickCount  +
sub eax [esi+8] +
cmp eax [esi] +
jbe loc_1003E74  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi [ecx+4] +
push esi  +
call sub_1003B6D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+4] +
jmp loc_1003EB1  +
mov eax [edi] +
push dword ptr [eax+esi*4]  +
call ds:CloseHandle  +
dec esi  +
jns loc_1003EA6  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1003A65  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_1003ED5  +
xor eax eax +
jmp loc_1003F21  +
push edi  +
mov edi [esi+4] +
dec edi  +
js loc_1003F18  +
push ebx  +
mov eax [esi] +
mov ebx edi +
lea ecx [ebp+ExitCode] +
shl ebx 2 +
add eax ebx +
push ecx  +
push dword ptr [eax]  +
call ds:GetExitCodeProcess  +
test eax eax +
jz loc_1003EFF  +
cmp [ebp+ExitCode] 103h +
jz loc_1003F14  +
mov eax [esi] +
push dword ptr [ebx+eax]  +
call ds:CloseHandle  +
push 1  +
push edi  +
mov ecx esi +
call sub_1003BA0  +
dec edi  +
jns loc_1003EDD  +
pop ebx  +
xor eax eax +
cmp [esi+4] eax +
pop edi  +
setz al  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
mov dword ptr [ecx+10h] 1 +
jz loc_1003F41  +
pop ebp  +
jmp sub_1003E7D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
lea ecx [esi+4] +
call sub_1005BEE  +
mov dword ptr [esi] offset off_10016F4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
inc eax  +
retn   +
***
push 1  +
push dword ptr [ecx+4]  +
call ds:EndDialog  +
retn   +
***
push 2  +
push dword ptr [ecx+4]  +
call ds:EndDialog  +
retn   +
***
xor eax eax +
retn 8  +
***
xor eax eax +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 5  +
push dword ptr [esi+4]  +
call ds:ShowWindow  +
push 1  +
push dword ptr [esi+4]  +
call ds:EnableWindow  +
push dword ptr [esi+4]  +
call ds:GetLastActivePopup  +
push eax  +
call ds:SetForegroundWindow  +
pop esi  +
retn   +
***
mov eax dword_100A32C +
cmp dword ptr [eax] 0 +
jz locret_1003FFF  +
push 60000h  +
push 20000h  +
push dword ptr [eax]  +
call ds:SetProcessWorkingSetSize  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx dword_100A32C +
push [ebp+arg_4]  +
add ecx 4 +
push [ebp+arg_0]  +
call sub_1008484  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp [ebp+arg_0] 0 +
mov [ebp+var_4] ecx +
jz locret_100411F  +
mov eax hInstance +
push ebx  +
push esi  +
mov esi ds:?Clear@CIniW@@QAEXXZ +
lea ebx [ecx+634h] +
push edi  +
mov ecx ebx +
mov dword_100A320 eax +
mov [ebp+var_10] ebx +
call esi  +
push hInstance  +
mov edi ds:?SetHInst@CIniW@@QAEXPAUHINSTANCE__@@@Z +
mov ecx ebx +
call edi  +
push [ebp+arg_0]  +
mov ecx ebx +
call ds:?SetFile@CIniW@@QAEXPBG@Z  +
mov ecx [ebp+var_4] +
add ecx 65Ch +
mov [ebp+arg_0] ecx +
call esi  +
push hInstance  +
mov ecx [ebp+arg_0] +
call edi  +
push 0  +
push offset aCmsfile  +
push offset aConnectionMana  +
mov ecx ebx +
call ds:?GPPS@CIniW@@QBEPAGPBG00@Z  +
mov ecx ebx +
mov ebx ds:?GetFile@CIniW@@QBEPBGXZ +
push eax  +
mov [ebp+var_C] eax +
call ebx  +
push eax  +
call CmBuildFullPathFromRelativeW  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10040D5  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:?SetFile@CIniW@@QAEXPBG@Z  +
push [ebp+var_8]  +
call CmFree  +
push [ebp+var_C]  +
call CmFree  +
mov ecx [ebp+var_4] +
add ecx 684h +
mov [ebp+var_4] ecx +
call esi  +
push hInstance  +
mov ecx [ebp+var_4] +
call edi  +
mov ecx [ebp+arg_0] +
call ebx  +
mov ecx [ebp+var_4] +
push eax  +
call ds:?SetFile@CIniW@@QAEXPBG@Z  +
mov ecx [ebp+var_10] +
call ebx  +
mov ecx [ebp+var_4] +
push eax  +
call ds:?SetPrimaryFile@CIniW@@QAEXPBG@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
call IsLogonAsSystem  +
test eax eax +
jnz loc_1004152  +
push edi  +
push offset aAutoreconnect  +
push offset aConnectionMana  +
lea ecx [esi+65Ch] +
call ds:?GPPB@CIniW@@QBEHPBG0H@Z  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+54h] +
call sub_100576C  +
cmp [ebp+arg_0] 0 +
jnz loc_1004189  +
lea ecx [esi+1E0h] +
call nullsub_1  +
push dword ptr [esi+1E4h]  +
call ds:DestroyWindow  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
push offset aNopromptreconn  +
push offset aConnectionMana  +
lea ecx [esi+65Ch] +
call ds:?GPPB@CIniW@@QBEHPBG0H@Z  +
test eax eax +
jnz loc_10041C9  +
test byte ptr [esi+220h] 4 +
jnz loc_10041C9  +
call IsLogonAsSystem  +
test eax eax +
jnz loc_10041C9  +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+7B8h] edi +
jnz loc_10041E9  +
xor eax eax +
jmp loc_1004236  +
push ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
call ds:CreateEventW  +
mov ebx eax +
cmp [ebp+arg_0] edi +
jz loc_100420F  +
push 2  +
push ebx  +
push 0FFFFFFFFh  +
lea ecx [esi+7B0h] +
call sub_1003E1F  +
test eax eax +
jnz loc_1004228  +
cmp [ebp+arg_4] edi +
jz loc_1004233  +
push 2  +
push ebx  +
push 0FFFFFFFFh  +
lea ecx [esi+7B0h] +
call sub_1003E1F  +
test eax eax +
jz loc_1004233  +
push ebx  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_1004235  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push 402h  +
push dword ptr [ecx+48h]  +
call ds:PostThreadMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ebp+var_23C] ecx +
cmp [esi+4Ch] eax +
jnz loc_1004291  +
cmp [esi+50h] eax +
jnz loc_1004291  +
mov dword ptr [ecx] 1 +
jmp loc_1004356  +
push ebx  +
mov ebx [esi+50h] +
push edi  +
mov edi 234h +
cmp ebx eax +
jz loc_10042D9  +
push edi  +
push eax  +
lea eax [ebp+var_238] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_238] +
push eax  +
push ebx  +
lea ecx [esi+7B0h] +
mov [ebp+var_238] edi +
call sub_1003DEB  +
test eax eax +
jnz loc_100432C  +
cmp [ebp+var_234] 2001h +
jz loc_100430B  +
mov ebx [esi+4Ch] +
test ebx ebx +
jz loc_100430F  +
push edi  +
lea eax [ebp+var_238] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_238] +
push eax  +
push ebx  +
lea ecx [esi+7B0h] +
mov [ebp+var_238] edi +
call sub_1003DEB  +
test eax eax +
jnz loc_100432C  +
cmp [ebp+var_234] 2001h +
jnz loc_1004327  +
cmp [ebp+var_230] 258h +
jnz loc_100432C  +
xor eax eax +
inc eax  +
jmp loc_1004354  +
push [ebp+var_230]  +
push [ebp+var_234]  +
push eax  +
push offset aOntimerRasgetc  +
call sub_1005E54  +
mov eax [ebp+var_23C] +
add esp 10h +
mov dword ptr [eax] 1 +
xor eax eax +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1007105  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
mov esi ecx +
push offset aHelpfile  +
push offset aConnectionMana  +
lea ecx [esi+65Ch] +
call ds:?GPPS@CIniW@@QBEPAGPBG00@Z  +
mov edi eax +
cmp edi ebx +
jz loc_10043AA  +
cmp [edi] bx +
jz loc_10043AA  +
push edi  +
lea ecx [esi+634h] +
call ds:?GetFile@CIniW@@QBEPBGXZ  +
push eax  +
call CmBuildFullPathFromRelativeW  +
mov ebx eax +
push edi  +
call CmFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:?GPPS@CIniW@@QBEPAGPBG00@Z +
push 0  +
mov esi ecx +
push offset aIcon  +
lea ecx [esi+65Ch] +
push offset aConnectionMana  +
call edi  +
mov ebx eax +
cmp word ptr [ebx] 0 +
jz loc_1004418  +
push ebx  +
lea ecx [esi+634h] +
call ds:?GetFile@CIniW@@QBEPBGXZ  +
push eax  +
call CmBuildFullPathFromRelativeW  +
push eax  +
push hInstance  +
mov [ebp+var_4] eax +
call CmLoadIconW  +
push [ebp+var_4]  +
mov [esi+1BCh] eax +
call CmFree  +
push ebx  +
call CmFree  +
lea ebx [esi+1BCh] +
cmp dword ptr [ebx] 0 +
jnz loc_1004438  +
push 65h  +
push hInstance  +
call CmLoadIconW  +
mov [ebx] eax +
push 0  +
push offset aSmallicon  +
push offset aConnectionMana  +
lea ecx [esi+65Ch] +
call edi  +
mov edi eax +
cmp word ptr [edi] 0 +
jz loc_1004481  +
push edi  +
lea ecx [esi+634h] +
call ds:?GetFile@CIniW@@QBEPBGXZ  +
push eax  +
call CmBuildFullPathFromRelativeW  +
mov ebx eax +
push ebx  +
push hInstance  +
call CmLoadSmallIconW  +
push ebx  +
mov [esi+1C0h] eax +
call CmFree  +
push edi  +
call CmFree  +
add esi 1C0h +
cmp dword ptr [esi] 0 +
jnz loc_10044A1  +
push 65h  +
push hInstance  +
call CmLoadSmallIconW  +
mov [esi] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
xor ecx ecx +
xor eax eax +
mov [ebp+pvParam] ecx +
lea edi [ebp+var_10] +
stos   +
stos   +
push ecx  +
stos   +
lea eax [ebp+pvParam] +
push eax  +
push ecx  +
push 30h  +
call ds:SystemParametersInfoW  +
mov edi [ebp+pvParam] +
mov eax [ebp+var_C] +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
add eax edi +
cdq   +
sub eax edx +
mov esi eax +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
sar esi 1 +
sub esi eax +
mov eax [ebp+arg_4] +
cdq   +
mov [ebp+var_4] ecx +
push 3  +
pop ecx  +
idiv  ecx +
mov ebx [ebp+Rect.bottom] +
sub ebx [ebp+Rect.top] +
mov eax [ebp+var_8] +
mov ecx edx +
mov edx [ebp+var_10] +
dec ecx  +
add eax edx +
imul ecx ebx +
cdq   +
sub eax edx +
sar eax 1 +
add ecx eax +
mov eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
sub ecx eax +
cmp esi edi +
jge loc_1004534  +
mov esi edi +
jmp loc_1004547  +
mov eax [ebp+var_4] +
add eax esi +
cmp eax [ebp+var_C] +
jle loc_1004547  +
mov esi [ebp+Rect.left] +
sub esi [ebp+Rect.right] +
add esi [ebp+var_C] +
cmp ecx [ebp+var_10] +
jge loc_1004551  +
mov ecx [ebp+var_10] +
jmp loc_1004561  +
add ebx ecx +
cmp ebx [ebp+var_8] +
jle loc_1004561  +
mov ecx [ebp+Rect.top] +
sub ecx [ebp+Rect.bottom] +
add ecx [ebp+var_8] +
push 15h  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
push 0  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0F0h  +
lea eax [esi+4] +
push 0  +
push eax  +
call memset  +
and dword ptr [esi] 0 +
add esp 0Ch +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+arg_4] +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_1003C53  +
xor edx edx +
cmp eax edx +
mov [ebp+var_4] eax +
jl loc_10046FD  +
test [ebp+arg_10] 100h +
push esi  +
mov esi ecx +
mov [ebp+var_8] edi +
mov [ebp+var_10] esi +
jz loc_10045EA  +
cmp [ebp+arg_14] edx +
jnz loc_10045EA  +
mov [ebp+arg_14] offset WindowName +
test [ebp+arg_10] 0FFFFE000h +
push ebx  +
mov [ebp+var_4] edx +
jz loc_1004610  +
mov [ebp+var_4] 80070057h +
cmp ecx edx +
jz loc_10046B2  +
xor eax eax +
mov [edi] ax +
jmp loc_10046B2  +
cmp ecx edx +
jnz loc_1004633  +
mov eax [ebp+arg_14] +
cmp [eax] dx +
jz loc_10046E6  +
mov eax edi +
neg eax  +
sbb eax eax +
and eax 23h +
add eax 80070057h +
mov [ebp+var_4] eax +
jmp loc_10046B2  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea ebx [ecx-1] +
push ebx  +
push edi  +
mov [ebp+var_C] edx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1004659  +
cmp eax ebx +
ja loc_1004659  +
jz loc_1004660  +
mov ebx eax +
jmp loc_1004666  +
mov [ebp+var_C] 8007007Ah +
xor eax eax +
mov [edi+ebx*2] ax +
mov eax [ebp+var_C] +
mov [ebp+var_4] eax +
sub esi ebx +
cmp [ebp+var_C] 0 +
lea eax [edi+ebx*2] +
mov [ebp+var_8] eax +
mov [ebp+var_10] esi +
jl loc_10046AF  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_10046E6  +
cmp esi 1 +
jbe loc_10046E6  +
lea ecx [esi+esi] +
cmp ecx 2 +
jbe loc_10046E6  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+var_8] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_10046E6  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_10046D7  +
test ecx ecx +
jz loc_10046D7  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_10] +
xor ecx ecx +
call sub_1003C85  +
mov esi [ebp+var_10] +
cmp [ebp+var_4] 0 +
jge loc_10046E6  +
cmp [ebp+var_4] 8007007Ah +
jnz loc_10046FB  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10046F2  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10046FB  +
mov [eax] esi +
pop ebx  +
pop esi  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1003F4A  +
mov dword ptr [esi] offset off_100179C +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push dword ptr [ecx+4]  +
call ds:DestroyWindow  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 0  +
mov esi ecx +
call sub_1004708  +
mov dword ptr [esi] offset off_10017B0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1BCh] +
push edi  +
mov edi ds:DeleteObject +
test eax eax +
jz loc_1004772  +
push eax  +
call edi  +
mov eax [esi+1C0h] +
test eax eax +
jz loc_100477F  +
push eax  +
call edi  +
mov eax [esi+7ACh] +
test eax eax +
jz loc_1004790  +
push eax  +
call ds:CloseHandle  +
mov ecx esi +
call ds:?DeInit@CmLogFile@@QAEJXZ  +
lea ecx [esi+7B0h] +
call sub_1003D5C  +
mov edi ds:??1CIniW@@QAE@XZ +
lea ecx [esi+684h] +
call edi  +
lea ecx [esi+65Ch] +
call edi  +
lea ecx [esi+634h] +
call edi  +
lea ecx [esi+20Ch] +
call sub_10059BC  +
lea ecx [esi+1E4h] +
call sub_10059BC  +
lea ecx [esi+1C4h] +
call sub_1003E9B  +
lea ecx [esi+54h] +
call sub_10057DB  +
pop edi  +
mov ecx esi +
pop esi  +
jmp ds:??1CmLogFile@@QAE@XZ  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:GetTickCount  +
mov ecx esi +
mov [esi+1D8h] eax +
call sub_10043BB  +
push dword ptr [esi+1BCh]  +
lea eax [esi+224h] +
push eax  +
mov eax dword_100A32C +
push dword ptr [eax+14h]  +
lea edi [esi+1E0h] +
push hInstance  +
mov ecx edi +
call sub_100676E  +
mov ecx edi +
call sub_1006864  +
push dword ptr [esi+7C4h]  +
lea edi [esi+1E4h] +
push dword ptr [edi]  +
call sub_10044AB  +
push dword ptr [esi+1BCh]  +
mov ebx ds:SendMessageW +
push 1  +
push 80h  +
push dword ptr [edi]  +
call ebx  +
push dword ptr [esi+1C0h]  +
push 0  +
push 80h  +
push dword ptr [edi]  +
call ebx  +
mov ecx esi +
call sub_100436A  +
mov ebx eax +
test ebx ebx +
jz loc_100488D  +
push ebx  +
jmp loc_10048AD  +
call GetOSVersion  +
cmp eax 2 +
jnz loc_10048A8  +
call GetOSMajorVersion  +
cmp eax 6 +
jb loc_10048A8  +
push offset aConnmgr_chm  +
jmp loc_10048AD  +
push offset aCmmgr32_hlp  +
mov ecx edi +
call sub_10059CA  +
push ebx  +
call CmFree  +
lea edi [esi+7B0h] +
mov ecx edi +
call sub_1003D9A  +
push dword ptr [esi+50h]  +
mov ecx esi +
push dword ptr [esi+4Ch]  +
call sub_10041D2  +
mov [esi+7ACh] eax +
test eax eax +
jz loc_10048E8  +
mov ecx edi +
pop edi  +
pop esi  +
pop ebx  +
jmp sub_1003D5C  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+44h] +
xor ebx ebx +
cmp eax ebx +
jz loc_1004911  +
cmp eax 1 +
jz loc_1004911  +
push 6  +
pop eax  +
jmp loc_1004AEA  +
push edi  +
cmp [esi+7ACh] ebx +
jnz loc_1004952  +
lea eax [ebp+var_4] +
push eax  +
call sub_1004259  +
push [ebp+var_4]  +
mov edi eax +
push edi  +
push offset aCcmconnectionS  +
push dword_100A31C  +
call sub_1008041  +
add esp 10h +
cmp edi ebx +
jnz loc_1004952  +
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
jmp loc_1004AE9  +
lea edi [esi+54h] +
cmp [edi+3Ch] ebx +
jz loc_1004988  +
cmp [edi+58h] ebx +
jz loc_1004988  +
mov ecx edi +
call sub_1005812  +
lea ecx [esi+0BCh] +
cmp [ecx] ebx +
jz loc_1004988  +
mov eax [edi] +
push 3  +
xor edx edx +
pop ebx  +
dec eax  +
div  ebx +
imul edx edx +
push dword ptr [edx+edi+4]  +
call sub_100596E  +
xor ebx ebx +
cmp [esi+44h] ebx +
jnz loc_1004A57  +
lea ecx [esi+0BCh] +
call sub_1003E52  +
test eax eax +
jz loc_10049A7  +
push offset aCcmconnectio_0  +
jmp loc_10049BB  +
lea ecx [esi+1C4h] +
call sub_1003EC2  +
test eax eax +
jz loc_10049D0  +
push offset aCcmconnectio_1  +
push dword_100A31C  +
call sub_1008041  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1004AE9  +
push dword ptr [esi+1E4h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_1004AE6  +
cmp [edi+3Ch] ebx +
jz loc_1004A27  +
cmp [edi+58h] ebx +
jz loc_1004A27  +
push dword ptr [esi+80h]  +
mov eax [edi] +
push dword ptr [esi+7Ch]  +
xor edx edx +
push 3  +
pop ecx  +
dec eax  +
div  ecx +
mov eax [edi] +
imul edx edx +
push dword ptr [edx+edi+8]  +
xor edx edx +
dec eax  +
div  ecx +
lea ecx [esi+1E0h] +
imul edx edx +
push dword ptr [edx+edi+4]  +
push dword ptr [esi+84h]  +
call sub_100699D  +
mov eax [esi+88h] +
cmp eax ebx +
jnz loc_1004A3D  +
call ds:GetTickCount  +
sub eax [esi+1D8h] +
xor edx edx +
mov ecx 3E8h +
div  ecx +
lea ecx [esi+1E0h] +
push eax  +
call sub_1006933  +
jmp loc_1004AE6  +
lea ecx [esi+1C4h] +
call sub_1003EC2  +
test eax eax +
jnz loc_1004A85  +
lea eax [esi+0BCh] +
cmp [eax] ebx +
jz loc_1004A75  +
cmp [eax+8] ebx +
jnz loc_1004A85  +
lea ecx [esi+1E0h] +
call sub_1006B19  +
mov [esi+44h] ebx +
jmp loc_1004AE6  +
mov ebx ds:GetTickCount +
call ebx  +
mov ecx eax +
sub ecx [esi+1DCh] +
mov eax 7530h +
cmp ecx eax +
jbe loc_1004AB4  +
push offset aCcmconnectio_2  +
push dword_100A31C  +
call sub_1008041  +
pop ecx  +
pop ecx  +
push 2  +
jmp loc_1004AE8  +
sub eax ecx +
mov edi 3E8h +
xor edx edx +
mov ecx edi +
div  ecx +
mov ecx eax +
mov eax [esi+88h] +
push ecx  +
test eax eax +
jnz loc_1004AD6  +
call ebx  +
sub eax [esi+1D8h] +
xor edx edx +
div  edi +
lea ecx [esi+1E0h] +
push eax  +
call sub_1006B57  +
push 6  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
push dword ptr [ebp+arg_0]  +
push offset aCcmconnectionC  +
push dword_100A31C  +
call sub_1008041  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100415C  +
lea eax [ebp+var_230] +
push eax  +
push dword ptr [esi+428h]  +
lea edi [esi+224h] +
push edi  +
call sub_1004005  +
test eax eax +
jz loc_1004BD3  +
cmp [ebp+var_228] 4 +
jnz loc_1004BD3  +
and [ebp+var_234] 0 +
push offset aCmdial32_dll  +
lea ecx [ebp+var_234] +
call sub_1003D1C  +
lea ecx [ebp+var_234] +
test eax eax +
jnz loc_1004B83  +
call sub_1003D5C  +
xor eax eax +
jmp loc_1004BE8  +
push offset aCmcustomhangup  +
call sub_1003D78  +
test eax eax +
jz loc_1004BCB  +
push dword ptr [ebp+arg_0]  +
push 1  +
push dword ptr [esi+428h]  +
push edi  +
push 0  +
call eax  +
mov esi eax +
push esi  +
push offset aCcmconnectio_3  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
lea ecx [ebp+var_234] +
call sub_1003D5C  +
xor eax eax +
test esi esi +
setz al  +
jmp loc_1004BE8  +
lea ecx [ebp+var_234] +
jmp loc_1004B7A  +
push offset aCcmconnectio_4  +
push dword_100A31C  +
call sub_1008041  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1007105  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
push offset aEnterStateprom  +
mov esi ecx +
call sub_1005E54  +
lea eax [esi+224h] +
push eax  +
push 2B56h  +
push hInstance  +
call CmFmtMsgW  +
add esp 10h +
push dword ptr [esi+1BCh]  +
mov edi eax +
push edi  +
push 0  +
push hInstance  +
lea ecx [esi+208h] +
call sub_10066B6  +
push edi  +
call CmFree  +
push dword ptr [esi+7C4h]  +
push dword ptr [esi+20Ch]  +
call sub_10044AB  +
push dword ptr [esi+1BCh]  +
mov edi ds:SendMessageW +
push 1  +
mov ebx 80h +
push ebx  +
push dword ptr [esi+20Ch]  +
call edi  +
push dword ptr [esi+1C0h]  +
push 0  +
push ebx  +
push dword ptr [esi+20Ch]  +
call edi  +
call sub_1003FE3  +
mov edi ds:GetMessageW +
xor ebx ebx +
jmp loc_1004CD6  +
cmp [ebp+Msg.hwnd] ebx +
jnz loc_1004CAD  +
cmp [ebp+Msg.message] 402h +
jz loc_1004CE3  +
jmp loc_1004CD6  +
mov eax [esi+20Ch] +
lea ecx [ebp+Msg] +
push ecx  +
push eax  +
call ds:IsDialogMessageW  +
test eax eax +
jnz loc_1004CD6  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_1004C9D  +
push dword ptr [esi+20Ch]  +
call ds:IsWindow  +
test eax eax +
jz loc_1004CFF  +
push dword ptr [esi+20Ch]  +
call ds:DestroyWindow  +
cmp [ebp+Msg.wParam] 5 +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_1004D17  +
push offset aStatepromptAtt  +
call sub_1005E54  +
pop ecx  +
push 3  +
jmp loc_1004D24  +
push offset aStatepromptCon  +
call sub_1005E54  +
pop ecx  +
push 4  +
pop eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push offset aEnterReconnect  +
mov esi ecx +
call sub_1005E54  +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
mov [esp+0Ch+var_C] offset aCmdial32_dll +
call sub_1003D1C  +
lea ecx [ebp+var_4] +
test eax eax +
jnz loc_1004DB2  +
call sub_1003D5C  +
xor eax eax +
pop esi  +
leave   +
retn   +
push edi  +
push offset aCmreconnect  +
call sub_1003D78  +
mov edi eax +
test edi edi +
jnz loc_1004DD2  +
xor esi esi +
lea ecx [ebp+var_4] +
call sub_1003D5C  +
mov eax esi +
pop edi  +
jmp loc_1004DAF  +
push 0Eh  +
push esi  +
call ds:?Log@CmLogFile@@QAAXW4_CMLOG_ITEM@@ZZ  +
lea eax [esi+42Ch] +
cmp word ptr [eax] 0 +
pop ecx  +
pop ecx  +
jz loc_1004DFE  +
lea ecx [esi+220h] +
push ecx  +
add esi 224h +
push esi  +
push eax  +
call edi  +
mov esi eax +
jmp loc_1004DC5  +
lea eax [esi+220h] +
push eax  +
add esi 224h +
push esi  +
push 0  +
jmp loc_1004DF8  +
***
mov edi edi +
push esi  +
push offset aCcmconnectionO  +
mov esi ecx +
call sub_1005E54  +
mov eax [esi+44h] +
pop ecx  +
test eax eax +
jz loc_1004E36  +
cmp eax 1 +
jz loc_1004E36  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
push 1  +
push 0  +
mov ecx esi +
call sub_1004AF3  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:??0CmLogFile@@QAE@XZ  +
lea ecx [esi+54h] +
call sub_10058DA  +
lea eax [esi+0BCh] +
xor edi edi +
mov [eax+0Ch] edi +
lea ebx [esi+1C4h] +
mov ecx ebx +
mov [eax+8] edi +
mov [eax+4] edi +
mov [eax] edi +
call sub_1003A50  +
push esi  +
lea ecx [esi+1E0h] +
mov [ebx+10h] edi +
call sub_1006B23  +
lea ecx [esi+208h] +
call sub_100473C  +
mov ebx ds:??0CIniW@@QAE@PAUHINSTANCE__@@PBG111@Z +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea ecx [esi+634h] +
call ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
lea ecx [esi+65Ch] +
push edi  +
call ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
lea ecx [esi+684h] +
push edi  +
call ebx  +
lea eax [esi+7B0h] +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
mov [esi+44h] edi +
mov [esi+1C0h] edi +
mov [esi+1BCh] edi +
call ds:GetTickCount  +
mov ebx [ebp+arg_0] +
sub eax 1F4h +
mov [esi+1D8h] eax +
push 900h  +
mov [esi+1DCh] edi +
mov [esi+48h] edi +
mov dword ptr [esi+7C0h] 1 +
mov eax [ebx+61Ch] +
push edi  +
or eax 8 +
push edi  +
mov [esi+220h] eax +
mov eax [ebx+618h] +
push ebx  +
mov [esi+428h] eax +
lea eax [esi+224h] +
push 101h  +
push eax  +
call sub_1008845  +
mov eax [ebp+arg_4] +
cmp [eax+4] edi +
jz loc_1004F58  +
test byte ptr [ebx+61Ch] 80h +
jz loc_1004F58  +
xor eax eax +
inc eax  +
jmp loc_1004F5A  +
xor eax eax +
push eax  +
push offset aCcmconnectio_5  +
mov [esi+40h] eax +
call sub_1005E54  +
pop ecx  +
pop ecx  +
push 900h  +
push edi  +
push edi  +
lea eax [ebx+40Ch] +
push eax  +
push 104h  +
lea eax [esi+42Ch] +
push eax  +
call sub_1008845  +
add ebx 202h +
push ebx  +
mov ecx esi +
call sub_1004033  +
mov eax [ebp+arg_4] +
mov dword ptr [ebp+lpString] offset aSoftwareMicros +
cmp [eax+4] edi +
jnz loc_1004FAD  +
mov dword ptr [ebp+lpString] offset aSoftwareMicr_0 +
lea ecx [esi+684h] +
call ds:?GetPrimaryRegPath@CIniW@@QBEPBGXZ  +
push eax  +
call CmStrCpyAllocW  +
mov ebx ds:lstrlenW +
mov [ebp+var_4] eax +
lea eax [esi+224h] +
push eax  +
call ebx  +
push dword ptr [ebp+lpString]  +
mov [ebp+var_C] eax +
call ebx  +
mov ecx [ebp+var_C] +
lea ebx [ecx+eax+1] +
lea eax [ebx+ebx] +
push eax  +
call CmMalloc  +
mov [ebp+var_C] eax +
cmp eax edi +
jz loc_100502E  +
cmp [ebp+var_4] edi +
jz loc_100502E  +
lea eax [esi+224h] +
push eax  +
push dword ptr [ebp+lpString]  +
push offset aSS  +
push 900h  +
push edi  +
push edi  +
push ebx  +
push [ebp+var_C]  +
call sub_10045A2  +
add esp 20h +
push [ebp+var_C]  +
lea ecx [esi+684h] +
call ds:?SetPrimaryRegPath@CIniW@@QAEXPBG@Z  +
push [ebp+var_C]  +
call CmFree  +
lea eax [esi+224h] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
mov ecx esi +
push dword_100A320  +
call ds:?Init@CmLogFile@@QAEJPAUHINSTANCE__@@HPBG@Z  +
push 1  +
push offset aEnablelogging  +
push offset aConnectionMana  +
lea ecx [esi+684h] +
call ds:?GPPB@CIniW@@QBEHPBG0H@Z  +
push 64h  +
push offset aMaxfilesize  +
mov ebx offset aLogging +
push ebx  +
lea ecx [esi+65Ch] +
mov dword ptr [ebp+lpString] eax +
call ds:?GPPI@CIniW@@QBEKPBG0K@Z  +
push offset aTemp  +
push offset aFiledirectory  +
push ebx  +
lea ecx [esi+65Ch] +
mov [ebp+var_C] eax +
call ds:?GPPS@CIniW@@QBEPAGPBG00@Z  +
mov ebx eax +
push ebx  +
push [ebp+var_C]  +
mov ecx esi +
push dword ptr [ebp+lpString]  +
call ds:?SetParams@CmLogFile@@QAEJHKPBG@Z  +
mov ecx esi +
cmp [esi+3Ch] edi +
jz loc_10050B8  +
push edi  +
call ds:?Start@CmLogFile@@QAEJH@Z  +
jmp loc_10050BE  +
call ds:?Stop@CmLogFile@@QAEJXZ  +
push ebx  +
call CmFree  +
push 0Ah  +
push offset aIdletimeout  +
lea ebx [esi+684h] +
push offset aConnectionMana  +
mov ecx ebx +
call ds:?GPPI@CIniW@@QBEKPBG0K@Z  +
mov [ebp+var_C] eax +
cmp [ebp+var_4] edi +
jz loc_10050F9  +
push [ebp+var_4]  +
mov ecx ebx +
call ds:?SetPrimaryRegPath@CIniW@@QAEXPBG@Z  +
push [ebp+var_4]  +
call CmFree  +
cmp [ebp+var_C] edi +
jz loc_100513A  +
mov eax [ebp+arg_0] +
add eax 628h +
mov ecx [eax] +
cmp ecx edi +
jz loc_100513A  +
mov dword ptr [ebp+lpString] eax +
mov ebx eax +
push ecx  +
lea ecx [esi+1C4h] +
call sub_1003F29  +
mov eax dword ptr [ebp+lpString] +
push dword ptr [eax]  +
push offset aProcess0xXAdde  +
call sub_1005E54  +
add ebx 4 +
pop ecx  +
pop ecx  +
mov ecx [ebx] +
mov dword ptr [ebp+lpString] ebx +
cmp ecx edi +
jnz loc_1005111  +
mov ebx [ebp+arg_4] +
push dword ptr [ebx+220h]  +
mov eax [ebp+arg_0] +
push dword ptr [ebx+228h]  +
lea ecx [esi+54h] +
push dword ptr [eax+624h]  +
push dword ptr [eax+620h]  +
push hInstance  +
call sub_10057F3  +
cmp [ebp+var_C] edi +
jz loc_1005198  +
push edi  +
push offset aIdlethreshold  +
push offset aConnectionMana  +
lea ecx [esi+65Ch] +
call ds:?GPPI@CIniW@@QBEKPBG0K@Z  +
mov ecx [ebp+var_C] +
imul ecx ecx +
push ecx  +
push eax  +
lea ecx [esi+0BCh] +
call sub_1005949  +
mov eax [ebx+228h] +
mov [esi+4Ch] eax +
mov eax [ebx+220h] +
mov [esi+50h] eax +
mov eax [esi+4Ch] +
cmp eax edi +
jz loc_10051BE  +
push eax  +
push offset aStoringDialUpH  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
cmp [esi+50h] edi +
jz loc_10051D2  +
push dword ptr [esi+4Ch]  +
push offset aStoringTunnelH  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
xor eax eax +
mov [esi+6ACh] ax +
mov eax dword_100A324 +
mov [esi+7C4h] eax +
inc dword_100A324  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ebx ds:PeekMessageW +
xor esi esi +
inc esi  +
jmp loc_1005256  +
cmp dword ptr [ebp+Msg] 0 +
jnz loc_100522D  +
cmp dword ptr [ebp-2Ch] 402h +
jnz loc_1005256  +
mov eax [ebp-28h] +
jmp loc_1005372  +
mov eax [edi+1E4h] +
lea ecx [ebp+Msg] +
push ecx  +
push eax  +
call ds:IsDialogMessageW  +
test eax eax +
jnz loc_1005256  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Msg] +
push eax  +
call ebx  +
test eax eax +
jnz loc_1005216  +
cmp [edi+7ACh] eax +
jz loc_100528F  +
cmp [edi+0BCh] eax +
jnz loc_100528F  +
cmp [edi+44h] esi +
jz loc_100528F  +
push dword ptr [edi+1E4h]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_100528F  +
xor esi esi +
jmp loc_10052B6  +
mov ebx ds:GetTickCount +
call ebx  +
sub eax [ebp+var_4] +
cmp eax 3E8h +
jb loc_10052B6  +
call ebx  +
mov ecx edi +
mov [ebp+var_4] eax +
call sub_10048F1  +
cmp eax 6 +
jnz loc_1005372  +
mov eax [edi+7ACh] +
xor ebx ebx +
test eax eax +
jz loc_10052C6  +
mov [ebp+pHandles] eax +
inc ebx  +
cmp dword ptr [edi+1C8h] 0 +
jz loc_10052DC  +
mov eax [edi+1C4h] +
mov eax [eax] +
mov [ebp+ebx*4+pHandles] eax +
inc ebx  +
test ebx ebx +
jz loc_10052E9  +
mov eax [ebp+ebx*4-18h] +
mov [ebp+ebx*4+pHandles] eax +
inc ebx  +
cmp dword ptr [edi+7C0h] 0 +
jz loc_10052FE  +
call sub_1003FE3  +
and dword ptr [edi+7C0h] 0 +
neg esi  +
sbb esi esi +
push 0FFh  +
and esi 3E9h +
dec esi  +
push esi  +
push 0  +
lea eax [ebp+pHandles] +
push eax  +
push ebx  +
call ds:MsgWaitForMultipleObjects  +
cmp eax 102h +
jz loc_100520B  +
cmp eax ebx +
jnb loc_1005377  +
mov ecx [edi+7ACh] +
test ecx ecx +
jz loc_100534A  +
cmp [ebp+eax*4+pHandles] ecx +
jnz loc_100534A  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call sub_1004259  +
test eax eax +
jz loc_10053A9  +
lea ecx [edi+1C4h] +
call sub_1003EC2  +
test eax eax +
jz loc_100520B  +
push offset aCcmconnectio_6  +
push dword_100A31C  +
call sub_1008041  +
xor eax eax +
inc eax  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
jz loc_100520B  +
cmp eax 0FFFFFFFFh +
jnz loc_1005390  +
call ds:GetLastError  +
push eax  +
push offset aMsgwaitformult  +
jmp loc_1005396  +
push eax  +
push offset aMsgwaitformu_0  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
jmp loc_100520B  +
push offset aCcmconnectio_7  +
push dword_100A31C  +
call sub_1008041  +
xor eax eax +
jmp loc_1005370  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 230h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov eax ebx +
xor edi edi +
sub eax edi +
mov esi ecx +
jz loc_100549C  +
dec eax  +
jz loc_100542C  +
dec eax  +
jz loc_100549C  +
dec eax  +
jz loc_100554A  +
dec eax  +
jnz loc_1005568  +
push offset aStateconnected  +
push dword_100A31C  +
call sub_1008041  +
push 17h  +
push esi  +
call ds:?Log@CmLogFile@@QAAXW4_CMLOG_ITEM@@ZZ  +
add esp 10h +
push edi  +
mov ecx esi +
call sub_100415C  +
jmp loc_100556F  +
push offset aStateconnect_0  +
push dword_100A31C  +
call sub_1008041  +
cmp dword ptr [esi+44h] 1 +
pop ecx  +
pop ecx  +
jz loc_1005494  +
mov edi ds:GetTickCount +
call edi  +
lea ebx [esi+1E0h] +
mov ecx ebx +
mov [esi+1DCh] eax +
call sub_1006BF0  +
mov eax [esi+88h] +
push 1Eh  +
test eax eax +
jnz loc_1005473  +
call edi  +
sub eax [esi+1D8h] +
xor edx edx +
mov ecx 3E8h +
div  ecx +
mov ecx ebx +
push eax  +
call sub_1006B57  +
call IsLogonAsSystem  +
test eax eax +
jnz loc_1005494  +
mov ecx ebx +
call sub_1003FB1  +
xor eax eax +
inc eax  +
jmp loc_1005572  +
push offset aStateconnect_1  +
push dword_100A31C  +
call sub_1008041  +
pop ecx  +
pop ecx  +
mov ecx esi +
call sub_1004193  +
test eax eax +
jz loc_10054C8  +
lea ecx [esi+1C4h] +
call sub_1003EC2  +
test eax eax +
jz loc_10054D7  +
cmp ebx edi +
jnz loc_100554A  +
mov ecx esi +
call sub_1004128  +
test eax eax +
jz loc_100554A  +
push edi  +
push 1  +
mov ecx esi +
call sub_1004AF3  +
lea eax [ebp+var_230] +
push eax  +
push dword ptr [esi+428h]  +
lea eax [esi+224h] +
push eax  +
call sub_1004005  +
test eax eax +
jz loc_100556F  +
push ebx  +
push dword ptr [ebp+var_228]  +
push offset aCmentry_cmstat  +
push dword_100A31C  +
call sub_1008041  +
add esp 10h +
cmp ebx edi +
jnz loc_1005536  +
push 1Ah  +
push esi  +
call ds:?Log@CmLogFile@@QAAXW4_CMLOG_ITEM@@ZZ  +
pop ecx  +
pop ecx  +
mov ecx esi +
call sub_1004128  +
test eax eax +
jz loc_1005546  +
push 3  +
jmp loc_1005571  +
cmp ebx 2 +
jnz loc_1005546  +
push 19h  +
push esi  +
call ds:?Log@CmLogFile@@QAAXW4_CMLOG_ITEM@@ZZ  +
pop ecx  +
pop ecx  +
push 2  +
jmp loc_1005571  +
push offset aStateconnect_2  +
push dword_100A31C  +
call sub_1008041  +
push 18h  +
push esi  +
call ds:?Log@CmLogFile@@QAAXW4_CMLOG_ITEM@@ZZ  +
add esp 10h +
mov ecx esi +
push edi  +
push edi  +
call sub_1004AF3  +
push 4  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1007105  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push offset aEnterStateconn  +
mov esi ecx +
call sub_1005E54  +
pop ecx  +
mov ecx esi +
call sub_10047F9  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1004259  +
cmp [ebp+var_4] 0 +
jz loc_10055D2  +
push offset aStateconnect_3  +
call sub_1005E54  +
pop ecx  +
push 4  +
mov ecx esi +
call sub_10053C2  +
mov [esi+44h] eax +
pop esi  +
leave   +
retn   +
mov eax [esi+44h] +
test eax eax +
jz loc_10055DE  +
cmp eax 1 +
jnz loc_10055CF  +
mov ecx esi +
call sub_10051FA  +
cmp eax 6 +
jge loc_10055D2  +
push eax  +
mov ecx esi +
call sub_10053C2  +
mov [esi+44h] eax +
jmp loc_10055D2  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:GetCurrentThreadId +
mov esi ecx +
call edi  +
and dword ptr [esi+44h] 0 +
mov [esi+48h] eax +
call edi  +
push eax  +
lea eax [esi+224h] +
push eax  +
push offset aConnectionThre  +
call sub_1005E54  +
add esp 0Ch +
mov ecx esi +
call sub_1005588  +
mov eax [esi+44h] +
xor edi edi +
cmp eax 4 +
jz loc_1005660  +
cmp eax 3 +
jz loc_1005648  +
mov ecx esi +
call sub_1004BFD  +
mov [esi+44h] eax +
cmp dword ptr [esi+44h] 3 +
jz loc_1005653  +
xor edi edi +
inc edi  +
jmp loc_1005660  +
push esi  +
call sub_100603A  +
mov ecx esi +
call sub_1004D7B  +
push offset aTheConnectionT  +
call sub_1005E54  +
pop ecx  +
push edi  +
push esi  +
call sub_1005FF0  +
call sub_1003FE3  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_10055FC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
lea eax [ebp+ThreadId] +
push eax  +
push 0  +
push ecx  +
push offset StartAddress  +
push 0  +
push 0  +
call ds:CreateThread  +
mov edi eax +
test edi edi +
jnz loc_10056D1  +
call ds:GetLastError  +
push eax  +
push offset aCcmconnectio_8  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_10056E6  +
push offset aCcmconnectio_9  +
call sub_1005E54  +
pop ecx  +
push edi  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003D9A  +
cmp dword ptr [esi] 0 +
jz loc_1005711  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_1005711  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
jmp loc_1005714  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+58h] +
call sub_1003D9A  +
push [ebp+arg_8]  +
push dword ptr [ebp+arg_C]  +
push offset aCconnstatistic  +
push dword_100A31C  +
call sub_1008041  +
mov eax dword ptr [ebp+arg_C] +
add esp 10h +
cmp dword ptr [ebp+arg_C] 0 +
jnz loc_1005753  +
mov eax [ebp+arg_8] +
mov [esi+3Ch] eax +
mov eax [ebp+arg_0] +
mov [esi+40h] eax +
mov eax [ebp+arg_4] +
mov [esi+44h] eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+38h] +
test eax eax +
jz loc_1005783  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+38h] 0 +
push dword ptr [esi+4Ch]  +
call CmFree  +
push dword ptr [esi+50h]  +
call CmFree  +
push dword ptr [esi+54h]  +
call CmFree  +
and dword ptr [esi+54h] 0 +
and dword ptr [esi+50h] 0 +
and dword ptr [esi+4Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
imul eax eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [eax+ecx+4] +
movs   +
movs   +
movs   +
mov eax [ecx] +
push 3  +
pop esi  +
inc eax  +
xor edx edx +
div  esi +
pop edi  +
pop esi  +
mov [ecx] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100576C  +
lea ecx [esi+58h] +
pop esi  +
jmp sub_1003D5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100571E  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push esi  +
mov esi ecx +
xor eax eax +
cmp [esi+3Ch] eax +
jz loc_10058D2  +
push ebx  +
lea ebx [esi+58h] +
cmp [ebx] eax +
jz loc_10058D1  +
push edi  +
mov [ebp+var_C] eax +
lea edi [ebp+var_8] +
stos   +
stos   +
call ds:GetTickCount  +
mov edi eax +
mov eax [esi] +
inc eax  +
imul eax eax +
mov [ebp+var_4] edi +
cmp edi [eax+esi] +
jz loc_10058D0  +
push 3Ch  +
lea eax [ebp+var_48] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_48] +
push eax  +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
mov [ebp+var_48] 3Ch +
call sub_10056EE  +
test eax eax +
jnz loc_1005894  +
mov eax [ebp+var_40] +
mov [ebp+var_C] eax +
mov eax [ebp+var_44] +
mov [ebp+var_8] eax +
mov eax [ebp+var_14] +
mov [esi+30h] eax +
mov eax [ebp+var_10] +
mov [esi+34h] eax +
mov eax [esi] +
imul eax eax +
lea ecx [eax+esi+4] +
mov eax [ebp+var_C] +
sub eax [ecx] +
sub edi [ecx+8] +
imul eax eax +
xor edx edx +
div  edi +
xor edx edx +
mov [esi+28h] eax +
mov eax [ebp+var_8] +
sub eax [ecx+4] +
mov ecx esi +
imul eax eax +
div  edi +
mov [esi+2Ch] eax +
lea eax [ebp+var_C] +
push eax  +
call sub_10057AE  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edx ecx +
push esi  +
xor esi esi +
mov [edx+58h] esi +
mov [edx+5Ch] esi +
mov [edx+60h] esi +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [edx+4] +
stos   +
or dword ptr [edx+44h] 0FFFFFFFFh +
or dword ptr [edx+40h] 0FFFFFFFFh +
pop edi  +
mov [edx] esi +
mov [edx+34h] esi +
mov [edx+30h] esi +
mov [edx+2Ch] esi +
mov [edx+28h] esi +
mov [edx+38h] esi +
mov [edx+48h] esi +
mov [edx+54h] esi +
mov [edx+50h] esi +
mov [edx+4Ch] esi +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [ebp+arg_0] +
mov edx [edx] +
mov [ecx+eax*4+4] edx +
mov eax [ecx] +
push esi  +
push 3Ch  +
pop esi  +
inc eax  +
xor edx edx +
div  esi +
pop esi  +
mov [ecx] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [ecx+8] 0 +
mov [ecx+4] eax +
mov eax [ebp+arg_4] +
mov [ecx] eax +
add ecx 0Ch +
call sub_1004580  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push edi  +
mov edi [ecx+eax*4+4] +
lea eax [ebp+arg_0] +
push eax  +
call sub_1005922  +
test edi edi +
jz loc_10059B1  +
mov eax [ebp+arg_0] +
sub eax edi +
cmp eax [esi+4] +
jbe loc_100599D  +
and dword ptr [esi+8] 0 +
jmp loc_10059B1  +
cmp dword ptr [esi+8] 0 +
jnz loc_10059B1  +
call ds:GetTickCount  +
sub eax 0EA60h +
mov [esi+8] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
call CmFree  +
mov eax [ebp+arg_0] +
and dword ptr [esi+8] 0 +
test eax eax +
jz loc_10059F4  +
cmp word ptr [eax] 0 +
jz loc_10059F4  +
push eax  +
call CmStrCpyAllocW  +
mov [esi+8] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
cmp dword ptr [ebp+hWnd] edi +
jz loc_1005A55  +
mov eax [ebx+4] +
cmp eax edi +
jz loc_1005A55  +
mov [ebp+var_4] edi +
cmp [eax] edi +
jz loc_1005A3F  +
push dword ptr [ebp+hWnd]  +
mov esi [ebx+4] +
call ds:GetDlgCtrlID  +
cmp [edi+esi] eax +
jz loc_1005A5E  +
add [ebp+var_4] 2 +
mov edi [ebp+var_4] +
shl edi 2 +
cmp dword ptr [edi+esi] 0 +
jnz loc_1005A1E  +
push dword ptr [ebp+hWnd]  +
push offset aHascontexthelp  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax [ebx+4] +
mov ecx [ebp+var_4] +
lea eax [eax+ecx*4] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [ebp+hWnd]  +
push offset aHascontexthe_0  +
push dword_100A31C  +
call sub_1008041  +
xor eax eax +
add esp 14h +
inc eax  +
jmp loc_1005A57  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+lpPoint] +
mov esi ecx +
push edi  +
push dword ptr [esi]  +
call ds:ScreenToClient  +
push 1  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
push dword ptr [esi]  +
call ds:ChildWindowFromPointEx  +
mov edi eax +
mov eax [esi+8] +
test eax eax +
jz loc_1005B13  +
cmp word ptr [eax] 0 +
jz loc_1005B13  +
test edi edi +
jz loc_1005B13  +
push edi  +
mov ecx esi +
call sub_10059FE  +
test eax eax +
jz loc_1005B13  +
push dword ptr [esi]  +
push dword ptr [ebp+arg_0]  +
push offset aOncontextmenuC  +
push dword_100A31C  +
call sub_1008041  +
add esp 10h +
cmp dword ptr [esi+10h] 0 +
jz loc_1005AFD  +
push 0  +
push 0  +
push dword ptr [esi+8]  +
push edi  +
push dword ptr [ebp+arg_0]  +
call CmWinHelp  +
push dword ptr [esi+4]  +
push 0Ah  +
push dword ptr [esi+8]  +
push edi  +
push dword ptr [ebp+arg_0]  +
call CmWinHelp  +
xor eax eax +
inc eax  +
jmp loc_1005B15  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push offset LibFileName  +
mov esi ecx +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jz loc_1005B76  +
push offset ProcName  +
push edi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1005B6F  +
mov ecx [esi+4] +
or [ebp+var_8] 0FFFFFFFFh +
and [ebp+var_4] 0 +
mov [ebp+var_10] ecx +
lea ecx [ebp+var_14] +
push ecx  +
mov [ebp+var_14] 14h +
mov [ebp+var_C] 0Eh +
call eax  +
push edi  +
call ds:FreeLibrary  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1005B95  +
cmp ecx 7FFFFFFFh +
jbe loc_1005B9A  +
mov eax 80070057h +
test eax eax +
jl loc_1005BE5  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1005BD5  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1005BD0  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1005BD0  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1005BB8  +
pop edi  +
test esi esi +
jnz loc_1005BDC  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
and dword ptr [esi] 0 +
mov [esi+4] eax +
call GetOSVersion  +
cmp eax 2 +
jnz loc_1005C1C  +
call GetOSMajorVersion  +
cmp eax 6 +
jb loc_1005C1C  +
xor eax eax +
inc eax  +
jmp loc_1005C1E  +
xor eax eax +
cmp [ebp+arg_4] 0 +
mov [esi+10h] eax +
jz loc_1005C31  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10059CA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push 17h  +
pop ecx  +
mov esi offset aHtmlA9bd50f154 +
lea edi [ebp+var_64] +
movs   +
movs   +
xor esi esi +
mov [ebp+var_68] eax +
cmp [ebx+10h] esi +
jz loc_1005CB4  +
mov eax [ebx+0Ch] +
cmp eax 9Ah +
jnz loc_1005C81  +
push offset aHtmlF1bc39abAd  +
jmp loc_1005CA9  +
cmp eax 93h +
jnz loc_1005C8F  +
push offset aHtml517c1028Bc  +
jmp loc_1005CA9  +
cmp eax 96h +
jnz loc_1005C9D  +
push offset aHtml095acd5b31  +
jmp loc_1005CA9  +
cmp eax 9Bh +
jnz loc_1005CB4  +
push offset aHtml940f744a5b  +
push 2Fh  +
lea eax [ebp+var_64] +
push eax  +
call sub_1005B7F  +
mov eax [ebx+8] +
cmp eax esi +
jz loc_1005CF2  +
cmp [eax] si +
jz loc_1005CF2  +
mov eax [ebp+var_68] +
push dword ptr [eax+0Ch]  +
mov ecx ebx +
call sub_10059FE  +
test eax eax +
jz loc_1005CF2  +
mov eax [ebp+var_68] +
mov eax [eax+0Ch] +
cmp [ebx+10h] esi +
jz loc_1005CE3  +
lea ecx [ebp+var_64] +
push ecx  +
push esi  +
jmp loc_1005CE8  +
push dword ptr [ebx+4]  +
push 0Ch  +
push dword ptr [ebx+8]  +
push eax  +
push eax  +
call CmWinHelp  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1007105  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_4] 110h +
push esi  +
push edi  +
mov edi [ebp+dwNewLong] +
jnz loc_1005D58  +
push ebx  +
mov ebx [ebp+hWnd] +
push edi  +
push 8  +
push ebx  +
mov esi edi +
call ds:SetWindowLongW  +
mov [edi+4] ebx +
pop ebx  +
mov eax [ebp+arg_4] +
sub eax 53h +
jz loc_1005DB1  +
sub eax 28h +
jz loc_1005D94  +
sub eax 95h +
mov ecx esi +
jz loc_1005D8E  +
dec eax  +
jz loc_1005D6D  +
mov eax [esi] +
push edi  +
push dword ptr [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax+10h]  +
jmp loc_1005DBD  +
push 8  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov esi eax +
test esi esi +
jnz loc_1005D31  +
xor eax eax +
jmp loc_1005DBD  +
movzx eax word ptr [ebp+arg_8] +
dec eax  +
jz loc_1005D87  +
dec eax  +
mov eax [esi] +
jz loc_1005D82  +
push edi  +
push dword ptr [ebp+arg_8]  +
call dword ptr [eax+0Ch]  +
jmp loc_1005DBD  +
call dword ptr [eax+8]  +
jmp loc_1005D69  +
mov eax [esi] +
call dword ptr [eax+4]  +
jmp loc_1005D69  +
mov eax [esi] +
call dword ptr [eax]  +
jmp loc_1005DBD  +
movzx eax di +
mov [ebp+Point.x] eax +
lea eax [ebp+Point] +
push eax  +
push dword ptr [ebp+arg_8]  +
shr edi 10h +
lea ecx [esi+4] +
mov [ebp+Point.y] edi +
call sub_1005A8C  +
jmp loc_1005DBD  +
push edi  +
lea ecx [esi+4] +
call sub_1005C3D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push esi  +
push offset DialogFunc  +
push [ebp+hWndParent]  +
push [ebp+lpTemplateName]  +
push [ebp+hInstance]  +
call ds:CreateDialogParamW  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax dword_100A32C +
xor ecx ecx +
cmp [eax] ecx +
jz locret_1005E07  +
push ecx  +
push ecx  +
push dword ptr [eax]  +
call ds:SetProcessWorkingSetSize  +
retn   +
***
cmp dword_100A000 0FFFFFFFFh +
jnz locret_1005E3E  +
push offset dword_100A000  +
push off_100A004  +
call sub_1007B6E  +
test eax eax +
jz locret_1005E3E  +
push eax  +
push offset aCmmon32Logging  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+lpWideCharStr]  +
push dword_100A000  +
call sub_10080B3  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+38h] +
call sub_1003D5C  +
and dword ptr [esi+3Ch] 0 +
lea edi [esi+4] +
push 0  +
mov ecx edi +
call sub_1008436  +
mov ecx edi +
call sub_10083E2  +
push dword ptr [esi]  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 230h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset aCmonitorOnconn  +
mov edi ecx +
call sub_1005E54  +
pop ecx  +
call sub_1005DF2  +
push esi  +
push offset aLookingForSInT  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_230] +
push eax  +
push dword ptr [esi+618h]  +
lea ecx [edi+4] +
push esi  +
call sub_1008484  +
test eax eax +
jl loc_1005F4B  +
push offset aFoundTheEntryI  +
call sub_1005E54  +
mov [esp+23Ch+var_23C] 7C8h +
call CmMalloc  +
test eax eax +
jz loc_1005F2A  +
lea ecx [ebp+var_230] +
push ecx  +
push esi  +
mov ecx eax +
call sub_1004E48  +
mov esi eax +
jmp loc_1005F2C  +
xor esi esi +
test esi esi +
jz loc_1005F4B  +
push offset aAddedEntryInto  +
call sub_1005E54  +
pop ecx  +
push esi  +
lea ecx [edi+18h] +
call sub_1003E7D  +
mov ecx esi +
call sub_1005697  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1007105  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp [edi+4] ebx +
jle loc_1005FA5  +
push ebx  +
mov ecx edi +
call sub_1003A32  +
mov esi eax +
test esi esi +
jz loc_1005F9F  +
lea eax [esi+224h] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1005F9F  +
mov eax [ebp+arg_4] +
cmp eax [esi+428h] +
jz loc_1005FAE  +
inc ebx  +
cmp ebx [edi+4] +
jl loc_1005F72  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax esi +
jmp loc_1005FA7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
xor ebx ebx +
test esi esi +
jle loc_1005FDD  +
push ebx  +
mov ecx edi +
call sub_1003A32  +
cmp eax [ebp+arg_4] +
jz loc_1005FE7  +
inc ebx  +
cmp ebx esi +
jl loc_1005FCB  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax ebx +
jmp loc_1005FE0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
jz loc_100601A  +
push dword ptr [esi+428h]  +
mov ecx dword_100A32C +
lea eax [esi+224h] +
push eax  +
add ecx 4 +
call sub_1008524  +
mov eax dword_100A32C +
push esi  +
push 0  +
push 401h  +
push dword ptr [eax+14h]  +
call ds:PostMessageW  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
mov eax dword_100A32C +
push 1  +
push 401h  +
push dword ptr [eax+14h]  +
call ds:PostMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004759  +
test [ebp+arg_0] 1 +
jz loc_1006079  +
push esi  +
call CmFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1Ch] 0 +
jz loc_10060FA  +
and dword ptr [esi+3Ch] 0 +
push ebx  +
push 2BC9h  +
push hInstance  +
call CmLoadStringW  +
push offset aShutdownblockr  +
lea ecx [esi+38h] +
mov ebx eax +
call sub_1003D78  +
test eax eax +
jz loc_10060F3  +
test ebx ebx +
jz loc_10060F3  +
push ebx  +
push [ebp+arg_0]  +
call eax  +
test eax eax +
jz loc_10060DC  +
push offset aBlockingSystem  +
call sub_1005E54  +
mov dword ptr [esi+3Ch] 1 +
jmp loc_10060F2  +
call ds:GetLastError  +
push eax  +
push offset aFailedToBlockS  +
call sub_1005E54  +
and dword ptr [esi+3Ch] 0 +
pop ecx  +
pop ecx  +
push ebx  +
call CmFree  +
pop ebx  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+3Ch] 0 +
jz loc_100614D  +
push edi  +
xor edi edi +
cmp [esi+1Ch] edi +
jle loc_1006132  +
mov eax [esi+18h] +
mov ecx [eax+edi*4] +
test ecx ecx +
jz loc_100612C  +
call sub_1004E15  +
inc edi  +
cmp edi [esi+1Ch] +
jl loc_100611D  +
push offset aShutdownbloc_0  +
lea ecx [esi+38h] +
call sub_1003D78  +
pop edi  +
test eax eax +
jz loc_100614D  +
push [ebp+arg_0]  +
call eax  +
and dword ptr [esi+3Ch] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1008101  +
lea ecx [esi+18h] +
call sub_1003A50  +
lea ecx [esi+28h] +
call sub_1003A50  +
and dword ptr [esi+38h] 0 +
mov dword_100A32C esi +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+38h] +
call sub_1003D5C  +
lea ecx [esi+28h] +
call sub_1003A65  +
lea ecx [esi+18h] +
call sub_1003A65  +
lea ecx [esi+4] +
pop esi  +
jmp loc_100812E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1005DF2  +
push offset aReceivedHangup  +
call sub_1005E54  +
mov esi dword ptr [ebp+arg_0] +
push esi  +
push offset aLooupconnectio  +
call sub_1005E54  +
add esp 0Ch +
push esi  +
push dword ptr [esi+204h]  +
lea eax [edi+18h] +
push eax  +
mov ecx edi +
call sub_1005F60  +
test eax eax +
jnz loc_1006206  +
push esi  +
push offset aLooupconnect_0  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
jmp loc_100620D  +
mov ecx eax +
call sub_1004241  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push offset aOnremoveconnec  +
mov esi ecx +
call sub_1005E54  +
mov eax [ebp+arg_0] +
sub eax 0 +
pop ecx  +
jz loc_100628D  +
dec eax  +
jnz loc_10062F2  +
mov ebx [ebp+arg_4] +
push ebx  +
lea edi [esi+18h] +
push edi  +
mov ecx esi +
call sub_1005FB7  +
push offset aReceivedMoveCo  +
mov [ebp+arg_4] eax +
call sub_1005E54  +
cmp [ebp+arg_4] 0FFFFFFFFh +
pop ecx  +
jz loc_10062F2  +
push 1  +
push [ebp+arg_4]  +
mov ecx edi +
call sub_1003BA0  +
push ebx  +
lea ecx [esi+28h] +
call sub_1003E7D  +
add ebx 224h +
push ebx  +
push offset aTheEntrySRemov  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
jmp loc_10062F2  +
mov ebx [ebp+arg_4] +
push ebx  +
lea edi [esi+18h] +
push edi  +
mov ecx esi +
call sub_1005FB7  +
push offset aReceivedRemove  +
mov [ebp+arg_4] eax +
call sub_1005E54  +
cmp [ebp+arg_4] 0FFFFFFFFh +
pop ecx  +
jz loc_10062B7  +
push 1  +
push [ebp+arg_4]  +
jmp loc_10062CB  +
push ebx  +
lea edi [esi+28h] +
push edi  +
mov ecx esi +
call sub_1005FB7  +
cmp eax 0FFFFFFFFh +
jz loc_10062F2  +
push 1  +
push eax  +
mov ecx edi +
call sub_1003BA0  +
lea eax [ebx+224h] +
push eax  +
push offset aTheEntrySRemov  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_10062F2  +
push 1  +
mov ecx ebx +
call sub_1006060  +
xor eax eax +
cmp [esi+2Ch] eax +
jnz loc_1006305  +
cmp [esi+1Ch] eax +
jnz loc_1006305  +
push eax  +
call ds:PostQuitMessage  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
cmp eax 11h +
jz loc_100639D  +
cmp eax 16h +
jz loc_1006382  +
cmp eax 4Ah +
jz loc_100634E  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
cmp eax 401h +
jz loc_1006341  +
push eax  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
jmp loc_10063B6  +
mov ecx dword_100A32C +
call sub_1006218  +
jmp loc_100637D  +
mov ecx [ebp+14h] +
mov eax [ecx] +
sub eax 0 +
jz loc_100636F  +
dec eax  +
jz loc_100635F  +
xor eax eax +
jmp loc_10063B6  +
push dword ptr [ecx+8]  +
mov ecx dword_100A32C +
call sub_10061B8  +
jmp loc_100637D  +
push dword ptr [ecx+8]  +
mov ecx dword_100A32C +
call sub_1005EAA  +
xor eax eax +
inc eax  +
jmp loc_10063B6  +
push offset aCmonitorMonito  +
call sub_1005E54  +
pop ecx  +
push dword ptr [ebp+8]  +
mov ecx dword_100A32C +
call sub_1006107  +
jmp loc_10063B6  +
push offset aCmonitorMoni_0  +
call sub_1005E54  +
pop ecx  +
push dword ptr [ebp+8]  +
mov ecx dword_100A32C +
call sub_1006085  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
push edi  +
push 30h  +
xor esi esi +
lea eax [ebp+var_30] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_30] +
mov edi offset aCmMonitorWindo +
push eax  +
mov [ebp+var_30.lpszClassName] edi +
mov [ebp+var_30.lpfnWndProc] offset loc_1006311 +
mov [ebp+var_30.cbSize] 30h +
call ds:RegisterClassExW  +
test ax ax +
jnz loc_100640E  +
push offset aRegisterclasse  +
call sub_1005E54  +
pop ecx  +
xor eax eax +
jmp loc_1006429  +
push esi  +
push hInstance  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push offset WindowName  +
push edi  +
push esi  +
call ds:CreateWindowExW  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call ds:GetCurrentProcessId  +
push eax  +
push 0  +
push 1F0FFFh  +
call ds:OpenProcess  +
mov [esi] eax +
call sub_1008888  +
lea edi [esi+4] +
mov ecx edi +
call sub_1008302  +
test eax eax +
jge loc_1006468  +
xor eax eax +
jmp loc_10064F1  +
mov ecx esi +
call sub_10063BF  +
mov [esi+14h] eax +
test eax eax +
jnz loc_1006483  +
push offset aCreatemonitorw  +
call sub_1005E54  +
pop ecx  +
jmp loc_1006461  +
push ebx  +
push eax  +
mov ecx edi +
call sub_1008436  +
push offset Name  +
push 0  +
push 1F0003h  +
call ds:OpenEventW  +
mov ebx ds:GetLastError +
mov edi eax +
test edi edi +
jz loc_10064BA  +
push edi  +
call ds:SetEvent  +
push edi  +
call ds:CloseHandle  +
jmp loc_10064C9  +
call ebx  +
push eax  +
push offset aCreatemonito_0  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
push offset aUser32_dll  +
lea ecx [esi+38h] +
call sub_1003D1C  +
test eax eax +
jnz loc_10064E9  +
call ebx  +
push eax  +
push offset aCreatemonito_1  +
call sub_1005E54  +
pop ecx  +
pop ecx  +
and dword ptr [esi+3Ch] 0 +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 5Ch +
lea ecx [ebp+var_5C] +
mov hInstance eax +
call sub_100615A  +
lea ecx [ebp+var_5C] +
call sub_1006432  +
test eax eax +
jnz loc_1006532  +
push offset aThemonitor_ini  +
call sub_1005E54  +
pop ecx  +
lea ecx [ebp+var_5C] +
call sub_100618D  +
jmp loc_100657C  +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_1006552  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_100653E  +
lea ecx [ebp+var_5C] +
call sub_1005E72  +
push offset aTheMonitorIsTe  +
call sub_1005E54  +
pop ecx  +
lea ecx [ebp+var_5C] +
call sub_100618D  +
pop edi  +
pop esi  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+nLengthNeeded] ebx +
call ds:GetProcessWindowStation  +
mov [ebp+var_41C] eax +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
mov [ebp+hObj] eax +
xor eax eax +
mov esi 206h +
push esi  +
mov word ptr [ebp+var_414] ax +
lea eax [ebp+var_414+2] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+pvInfo] ax +
lea eax [ebp+pvInfo+2] +
push ebx  +
push eax  +
call memset  +
add esp 18h +
lea eax [ebp+nLengthNeeded] +
push eax  +
lea edi [esi+2] +
mov esi ds:GetUserObjectInformationW +
push edi  +
lea eax [ebp+pvInfo] +
push eax  +
push 2  +
push [ebp+hObj]  +
call esi  +
lea eax [ebp+nLengthNeeded] +
push eax  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
push 2  +
push [ebp+var_41C]  +
call esi  +
call sub_1005E0D  +
mov esi offset asc_1003210 +
push esi  +
call sub_1005E54  +
mov edi ds:GetCurrentProcessId +
pop ecx  +
call edi  +
push eax  +
push offset aCmmon32_exeLoa  +
call sub_1005E54  +
push esi  +
call sub_1005E54  +
add esp 0Ch +
push [ebp+nShowCmd]  +
push [ebp+lpCmdLine]  +
push [ebp+hPrevInstance]  +
push ebx  +
call ds:GetModuleHandleA  +
push eax  +
call sub_10064F9  +
push esi  +
mov ebx eax +
call sub_1005E54  +
pop ecx  +
call edi  +
push eax  +
push offset aCmmon32_exeUnl  +
call sub_1005E54  +
push esi  +
call sub_1005E54  +
add esp 0Ch +
call sub_1005E44  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1007105  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hWndParent]  +
mov esi ecx +
push 7Bh  +
push [ebp+hInstance]  +
call sub_1005DC8  +
test eax eax +
jz loc_100670E  +
push [ebp+lpString]  +
push 422h  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push [ebp+lParam]  +
push 1  +
push 172h  +
push 40Eh  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
push 3  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
mov eax [esi+4] +
pop esi  +
pop ebp  +
retn 10h  +
***
push 0  +
push 5  +
push 402h  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:PostThreadMessageW  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:SetForegroundWindow  +
mov ecx esi +
call sub_1005B20  +
xor eax eax +
pop esi  +
retn   +
***
push 0  +
push 3  +
push 402h  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:PostThreadMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hWndParent]  +
mov esi ecx +
push 68h  +
push [ebp+hInstance]  +
call sub_1005DC8  +
test eax eax +
jz loc_10067DD  +
push 0  +
push dword ptr [esi+4]  +
call ds:EnableWindow  +
push [ebp+lpString]  +
push dword ptr [esi+4]  +
call ds:SetWindowTextW  +
push [ebp+lParam]  +
push 1  +
push 172h  +
push 40Eh  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
push 0  +
push 414h  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call MakeBold  +
push offset String  +
call ds:RegisterWindowMessageW  +
mov [esi+24h] eax +
mov eax [esi+4] +
pop esi  +
pop ebp  +
retn 10h  +
***
push dword ptr [ecx+4]  +
call ds:SetForegroundWindow  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 18h +
jnz loc_1006811  +
cmp [ebp+arg_4] 0 +
jz loc_1006811  +
mov ecx [ecx+1Ch] +
call sub_10048F1  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
push edi  +
push dword ptr [esi+4]  +
call ds:EnableWindow  +
push dword ptr [esi+4]  +
call ds:IsWindowVisible  +
pop edi  +
pop esi  +
test eax eax +
jnz locret_100685E  +
jmp sub_1003FE3  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:SetDlgItemTextW +
push offset WindowName  +
mov esi ecx +
push 414h  +
push dword ptr [esi+4]  +
xor ebx ebx +
inc ebx  +
mov [esi+18h] ebx +
call edi  +
push 2B37h  +
push hInstance  +
call CmLoadStringW  +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
mov [ebp+var_4] eax +
call edi  +
push [ebp+var_4]  +
call CmFree  +
push 2B38h  +
push hInstance  +
call CmLoadStringW  +
mov ebx eax +
push ebx  +
push 413h  +
push dword ptr [esi+4]  +
call edi  +
push ebx  +
call CmFree  +
mov edi ds:GetDlgItem +
push 0  +
push 415h  +
push dword ptr [esi+4]  +
call edi  +
mov ebx ds:ShowWindow +
push eax  +
call ebx  +
push 5  +
push 410h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 5  +
push 411h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 5  +
push 412h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 3  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_1006993  +
mov eax [ebp+arg_0] +
push edi  +
push 3Ch  +
pop ecx  +
xor edx edx +
div  ecx +
push 3Ch  +
pop edi  +
mov ecx edx +
xor edx edx +
div  edi +
movzx ecx cx +
push ecx  +
movzx ecx dx +
push ecx  +
movzx eax ax +
push eax  +
push 2B2Fh  +
push hInstance  +
call CmFmtMsgW  +
add esp 14h +
mov edi eax +
push edi  +
push 40Fh  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push edi  +
call CmFree  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_4]  +
mov ebx ecx +
call sub_1006CC9  +
cmp [ebp+arg_C] 0 +
jz loc_1006A05  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+arg_C]  +
call sub_1006CC9  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push 2B31h  +
push hInstance  +
call CmFmtMsgW  +
add esp 10h +
jmp loc_1006A1F  +
lea eax [ebp+var_20C] +
push eax  +
push 2B30h  +
push hInstance  +
call CmFmtMsgW  +
add esp 0Ch +
mov edi ds:SetDlgItemTextW +
push eax  +
push 411h  +
push dword ptr [ebx+4]  +
mov [ebp+var_418] eax +
call edi  +
push [ebp+var_418]  +
call CmFree  +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_8]  +
call sub_1006CC9  +
cmp [ebp+arg_10] 0 +
jz loc_1006A8A  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+arg_10]  +
call sub_1006CC9  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push 2B31h  +
push hInstance  +
call CmFmtMsgW  +
add esp 10h +
jmp loc_1006AA4  +
lea eax [ebp+var_20C] +
push eax  +
push 2B30h  +
push hInstance  +
call CmFmtMsgW  +
add esp 0Ch +
push eax  +
push 412h  +
push dword ptr [ebx+4]  +
mov [ebp+var_418] eax +
call edi  +
push [ebp+var_418]  +
call CmFree  +
cmp [ebp+arg_0] 0 +
jz loc_1006B03  +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_0]  +
call sub_1006CC9  +
lea eax [ebp+var_20C] +
push eax  +
push 2B2Eh  +
push hInstance  +
call CmFmtMsgW  +
add esp 0Ch +
mov esi eax +
push esi  +
push 410h  +
push dword ptr [ebx+4]  +
call edi  +
push esi  +
call CmFree  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1007105  +
leave   +
retn 14h  +
***
jmp dword ptr [eax+4]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push offset dword_1003284  +
mov esi ecx +
call sub_1004708  +
mov eax [ebp+arg_0] +
and dword ptr [esi+18h] 0 +
and dword ptr [esi+20h] 0 +
mov [esi+1Ch] eax +
mov dword ptr [esi] offset off_10032C4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006933  +
push [ebp+arg_4]  +
push 2B34h  +
push hInstance  +
call CmFmtMsgW  +
add esp 0Ch +
mov edi eax +
push edi  +
push 414h  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
push edi  +
call CmFree  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
dec eax  +
dec eax  +
jz loc_1006BD1  +
sub eax 411h +
jnz loc_1006BE5  +
push eax  +
push 3  +
push 402h  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:PostThreadMessageW  +
jmp loc_1006BE5  +
push 414h  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
push eax  +
call ReleaseBold  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
and dword ptr [esi+18h] 0 +
push edi  +
push dword ptr [esi+4]  +
call ds:IsWindowVisible  +
neg eax  +
sbb eax eax +
neg eax  +
push 2B35h  +
mov [esi+20h] eax +
push hInstance  +
call CmLoadStringW  +
mov edi ds:SetDlgItemTextW +
mov ebx eax +
push ebx  +
push 1  +
push dword ptr [esi+4]  +
call edi  +
push ebx  +
call CmFree  +
push 2B36h  +
push hInstance  +
call CmLoadStringW  +
mov ebx eax +
push ebx  +
push 413h  +
push dword ptr [esi+4]  +
call edi  +
push ebx  +
call CmFree  +
mov edi ds:GetDlgItem +
push 0  +
push 410h  +
push dword ptr [esi+4]  +
call edi  +
mov ebx ds:ShowWindow +
push eax  +
call ebx  +
push 0  +
push 411h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 0  +
push 412h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 5  +
push 415h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push dword ptr [esi+4]  +
call ds:SetForegroundWindow  +
push 3  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp sub_1005B20  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov edi 400h +
cmp dword_100A334 ebx +
jnz loc_1006D23  +
push 103h  +
lea eax [ebp+Value] +
push eax  +
push 11h  +
push edi  +
mov dword_100A334 1 +
call ds:GetLocaleInfoW  +
lea eax [ebp+Value] +
push eax  +
call CmAtolW  +
mov dword_100A330 eax +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+Value] +
push offset aU  +
push 100h  +
push ebx  +
push ebx  +
push 104h  +
push eax  +
call sub_10045A2  +
add esp 1Ch +
test eax eax +
jl loc_1006DAD  +
mov eax [ebp+arg_8] +
dec eax  +
push eax  +
push esi  +
push ebx  +
lea eax [ebp+Value] +
push eax  +
push ebx  +
push edi  +
call ds:GetNumberFormatW  +
push esi  +
call ds:lstrlenW  +
mov edi eax +
mov eax dword_100A330 +
cmp eax ebx +
jz loc_1006D95  +
cmp edi eax +
jbe loc_1006D95  +
mov ecx edi +
sub ecx eax +
lea eax [esi+ecx*2-2] +
push eax  +
call CmIsDigitW  +
test eax eax +
jnz loc_1006D95  +
sub edi dword_100A330 +
mov [esi+edi*2-2] ax +
jmp loc_1006DBF  +
push offset aFmtnumUnexpect  +
push dword_100A31C  +
call sub_1008041  +
mov dword_100A334 ebx +
jmp loc_1006DBD  +
push offset aFmtnumStringcc  +
push dword_100A31C  +
call sub_1008041  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1007105  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1006DF1  +
test eax eax +
jnz loc_1006DF6  +
mov ecx [esi] +
test ecx ecx +
jz loc_1006DEE  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1006DE2  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100A35C +
push offset dword_100A34C  +
push dword_100A358  +
mov dword_100A34C eax +
push offset unk_100A33C  +
push offset unk_100A340  +
push offset unk_100A338  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100A348 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1006E96  +
cmp eax esi +
jnz loc_1006E89  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1006E99  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1006E70  +
xor esi esi +
inc esi  +
mov eax dword_100AAB0 +
cmp eax esi +
jnz loc_1006EAC  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1006EDB  +
mov eax dword_100AAB0 +
test eax eax +
jnz loc_1006ED5  +
mov dword_100AAB0 esi +
push offset dword_1001258  +
push offset dword_100124C  +
call sub_1006DD5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006EDB  +
jmp loc_1007003  +
mov dword_100A354 esi +
mov eax dword_100AAB0 +
cmp eax esi +
jnz loc_1006EFF  +
push offset dword_1001248  +
push offset dword_1001240  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100AAB0 2 +
test ebx ebx +
jnz loc_1006F0B  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100AABC 0 +
jz loc_1006F2F  +
push offset dword_100AABC  +
call sub_1007549  +
pop ecx  +
test eax eax +
jz loc_1006F2F  +
push 0  +
push 2  +
push 0  +
call dword_100AABC  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1006F49  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1006F59  +
cmp al 20h +
ja loc_1006F59  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1006F49  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1006F65  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1006F68  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_100A350 eax +
cmp dword_100A344 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1006F9A  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1006FAD  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1006F36  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_100A350 eax +
cmp dword_100A344 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100A354 0 +
jnz loc_1006FEE  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100A350 +
jmp loc_100700F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100702C  +
xor eax eax +
jmp loc_1007079  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1007028  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1007066  +
cmp ecx 20Bh +
jnz loc_1007028  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1007028  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1007074  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1007028  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100A344 eax +
call sub_10076E2  +
push eax  +
call ds:__set_app_type  +
or dword_100AAA8 0FFFFFFFFh +
or dword_100AAAC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100A364 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100A360 +
mov [eax] ecx +
call sub_1007674  +
cmp dword_100A018 0 +
jnz loc_10070D2  +
push offset sub_1007674  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100765C  +
xor eax eax +
retn   +
***
call sub_1007721  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100A008 +
jnz loc_1007110  +
retn 0  +
jmp loc_10077B7  +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1007306  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1007433  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1007398  +
jmp loc_1007340  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100736B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_10073A2  +
jg loc_10073AB  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1007340  +
cmp [ebp+var_1] 0 +
jz loc_1007398  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100738A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1007378  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10073DF  +
cmp dword_100AAB8 0 +
jz loc_10073DF  +
push offset dword_100AAB8  +
call sub_1007549  +
add esp 4 +
test eax eax +
jz loc_10073DF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_100AAB8  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1007400  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1007418  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1007398  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1007378  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1007494  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1007494  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100748E  +
cmp eax 19930521h +
jz loc_100748E  +
cmp eax 19930522h +
jz loc_100748E  +
cmp eax 1994000h +
jnz loc_1007494  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1007454+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10074D6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10074D2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100753D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1007535  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100753F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1007525  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10074C0  +
pop ecx  +
test eax eax +
jz loc_10075A6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1007500  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10075A6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10075AF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1007105  +
push offset dword_100A008  +
call sub_10072D0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10076D5  +
cmp ecx 0FFFFFFFFh +
jz loc_10076D5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10076CE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10076CE  +
cmp edx 10000000h +
jnb loc_10076CE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10076CE  +
jmp loc_10076C9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1007717  +
push eax  +
call sub_100767C  +
test eax eax +
jz loc_1007717  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100770C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1007717  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100A008 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1007753  +
test eax ebx +
jz loc_1007753  +
not eax  +
mov dword_100A00C eax +
jmp loc_10077AE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100779A  +
test dword_100A008 ebx +
jnz loc_100779F  +
mov esi 0BB40E64Fh +
mov dword_100A008 esi +
not esi  +
mov dword_100A00C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100A468 eax +
mov dword_100A464 ecx +
mov dword_100A460 edx +
mov dword_100A45C ebx +
mov dword_100A458 esi +
mov dword_100A454 edi +
mov word_100A480 ss +
mov word_100A474 cs +
mov word_100A450 ds +
mov word_100A44C es +
mov word_100A448 fs +
mov word_100A444 gs +
pushf   +
pop dword_100A478  +
mov eax [ebp+0] +
mov dword_100A46C eax +
mov eax [ebp+4] +
mov dword_100A470 eax +
lea eax [ebp+8] +
mov dword_100A47C eax +
mov eax [ebp-320h] +
mov dword_100A3B8 10001h +
mov eax dword_100A470 +
mov dword_100A374 eax +
mov dword_100A368 0C0000409h +
mov dword_100A36C 1 +
mov eax dword_100A008 +
mov [ebp-328h] eax +
mov eax dword_100A00C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_10078D1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1007918  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10078DF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_100790D  +
cmp edx [esp+0Ch] +
ja loc_100790D  +
jb loc_1007916  +
cmp eax [esp+8] +
jbe loc_1007916  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_100A020 +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1007989  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_10079CE  +
cmp [ebp+arg_0] eax +
jnz loc_10079C2  +
cmp ecx eax +
jnz loc_10079C7  +
cmp ecx [ebp+arg_4] +
jbe loc_10079D6  +
mov eax 80070057h +
jmp loc_10079D6  +
push [ebp+arg_4]  +
call sub_1008681  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1007A0A  +
cmp eax esi +
ja loc_1007A0A  +
jnz loc_1007A14  +
mov [esi+edi] bl +
jmp loc_1007A12  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007A1D  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
test edi edi +
jbe loc_1007A4E  +
test [ebp+arg_4] 1000h +
jz loc_1007A4E  +
mov edx [ebp+arg_0] +
lea eax [esi+ecx] +
mov [edx] eax +
mov edx edi +
sub edx ecx +
mov [ebx] edx +
mov byte ptr [eax] 0 +
test [ebp+arg_4] 400h +
jz loc_1007A92  +
mov eax [ebp+arg_4] +
and eax 0FFh +
push edi  +
push eax  +
push esi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1007A7C  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
jmp loc_1007A92  +
test edi edi +
jbe loc_1007AA9  +
mov ecx [ebp+arg_0] +
lea eax [esi+edi-1] +
mov [ecx] eax +
mov dword ptr [ebx] 1 +
mov byte ptr [eax] 0 +
test edi edi +
jbe loc_1007AA9  +
test [ebp+arg_4] 800h +
jz loc_1007AA9  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
mov byte ptr [esi] 0 +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebx  +
push edi  +
mov edi offset Addend +
push edi  +
xor ebx ebx +
call ds:InterlockedIncrement  +
push offset aRtutils_dll  +
call ds:LoadLibraryA  +
mov hModule eax +
test eax eax +
jnz loc_1007AE4  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1007B5D  +
push esi  +
mov esi ds:GetProcAddress +
push offset aTraceregistere  +
push eax  +
call esi  +
mov dword_100A690 eax +
test eax eax +
jz loc_1007B54  +
push offset aTracederegiste  +
push hModule  +
call esi  +
mov dword_100A694 eax +
test eax eax +
jz loc_1007B54  +
push offset aTraceprintfa  +
push hModule  +
call esi  +
mov dword_100A698 eax +
test eax eax +
jz loc_1007B54  +
push offset aTraceprintfexa  +
push hModule  +
call esi  +
mov dword_100A69C eax +
test eax eax +
jz loc_1007B54  +
push offset aTracedumpexa  +
push hModule  +
call esi  +
mov dword_100A6A0 eax +
test eax eax +
jnz loc_1007B5C  +
call ds:GetLastError  +
mov ebx eax +
pop esi  +
push edi  +
call ds:InterlockedDecrement  +
pop edi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
test esi esi +
jnz loc_1007B81  +
push 57h  +
pop edi  +
jmp loc_1007BC2  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_1007B8D  +
mov edi 0B7h +
jmp loc_1007BC2  +
call sub_1007AB4  +
mov edi eax +
test edi edi +
jnz loc_1007BC2  +
mov eax dword_100A690 +
test eax eax +
jz loc_1007BB8  +
push edi  +
push [ebp+arg_0]  +
call eax  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007BB8  +
call ds:GetLastError  +
mov edi eax +
jmp loc_1007BC2  +
mov dword_100A68C 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
test edi edi +
jnz loc_1007BE2  +
push 57h  +
pop eax  +
mov edx [edi] +
mov esi ds:GetLastError +
cmp edx 0FFFFFFFFh +
jz loc_1007C00  +
mov ecx dword_100A694 +
test ecx ecx +
jz loc_1007C00  +
push 4  +
push edx  +
call ecx  +
call esi  +
test eax eax +
jnz loc_1007C27  +
or dword ptr [edi] 0FFFFFFFFh +
mov eax hModule +
test eax eax +
jz loc_1007C17  +
push eax  +
call ds:FreeLibrary  +
and hModule 0 +
call esi  +
and dword_100A68C 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1007C96  +
xor edx edx +
cmp [eax] dl +
jz loc_1007C96  +
mov cl [eax] +
cmp cl 25h +
jz loc_1007C87  +
cmp cl 43h +
jz loc_1007C7E  +
cmp cl 53h +
jz loc_1007C75  +
cmp cl 63h +
jz loc_1007C6C  +
cmp cl 73h +
jz loc_1007C63  +
xor edx edx +
jmp loc_1007C90  +
test edx edx +
jz loc_1007C90  +
mov byte ptr [eax] 53h +
jmp loc_1007C90  +
test edx edx +
jz loc_1007C90  +
mov byte ptr [eax] 43h +
jmp loc_1007C90  +
test edx edx +
jz loc_1007C90  +
mov byte ptr [eax] 73h +
jmp loc_1007C90  +
test edx edx +
jz loc_1007C90  +
mov byte ptr [eax] 63h +
jmp loc_1007C90  +
xor ecx ecx +
test edx edx +
setz cl  +
mov edx ecx +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_1007C44  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1007CB5  +
cmp ecx 7FFFFFFFh +
jbe loc_1007CBA  +
mov eax 80070057h +
test eax eax +
jl loc_1007CFE  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1007CF1  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1007CEC  +
mov cl [edx+eax] +
test cl cl +
jz loc_1007CEC  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1007CD8  +
pop edi  +
test esi esi +
jnz loc_1007CF7  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1007D1C  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1007D21  +
mov eax 80070057h +
test eax eax +
jl loc_1007D3A  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_10079DF  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push [ebp+arg_10]  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
mov ecx ebx +
call sub_10079A9  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+arg_0] eax +
jl loc_1007DEF  +
test [ebp+arg_10] 100h +
push edi  +
mov edi ebx +
mov [ebp+var_4] esi +
mov [ebp+var_8] edi +
jz loc_1007D8D  +
cmp [ebp+arg_14] ecx +
jnz loc_1007D8D  +
mov [ebp+arg_14] offset byte_1003429 +
test [ebp+arg_10] 0FFFFE000h +
mov [ebp+arg_0] ecx +
jz loc_1007DF8  +
mov [ebp+arg_0] 80070057h +
cmp ebx ecx +
jz loc_1007DA6  +
mov [esi] cl +
test [ebp+arg_10] 1C00h +
jz loc_1007DCA  +
test ebx ebx +
jz loc_1007DCA  +
push [ebp+arg_10]  +
mov edi [ebp+arg_4] +
lea eax [ebp+var_4] +
push eax  +
lea ebx [ebp+var_8] +
xor ecx ecx +
call sub_1007A2A  +
mov edi [ebp+var_8] +
cmp [ebp+arg_0] 0 +
jge loc_1007DD9  +
cmp [ebp+arg_0] 8007007Ah +
jnz loc_1007DEE  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1007DE5  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1007DEE  +
mov [eax] edi +
pop edi  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
cmp ebx ecx +
jnz loc_1007E16  +
mov eax [ebp+arg_14] +
cmp [eax] cl +
jz loc_1007DD9  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 23h +
add eax 80070057h +
mov [ebp+arg_0] eax +
jmp loc_1007DA6  +
push [ebp+arg_18]  +
lea eax [ebp+var_8] +
push [ebp+arg_14]  +
mov edi esi +
push eax  +
mov eax ebx +
mov [ebp+var_8] ecx +
call sub_10079DF  +
mov [ebp+arg_0] eax +
mov eax [ebp+var_8] +
mov edi ebx +
sub edi eax +
cmp [ebp+arg_0] 0 +
lea ecx [eax+esi] +
mov [ebp+var_4] ecx +
mov [ebp+var_8] edi +
jl loc_1007DA6  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_1007DD9  +
cmp edi 1 +
jbe loc_1007DD9  +
lea ecx [edi-1] +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+var_4] +
inc eax  +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_1007DD9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 608h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov eax 600h +
push edi  +
mov edi eax +
cmp ebx eax +
ja loc_1007F09  +
test esi esi +
jz loc_1007F09  +
and [ebp+var_608] 0 +
mov byte ptr [esi+ebx-1] 0 +
cmp byte ptr [esi] 0 +
mov ecx esi +
lea eax [ebp+var_604] +
jz loc_1007EEF  +
cmp edi 1 +
jbe loc_1007EEF  +
mov dl [ecx] +
mov [eax] dl +
inc eax  +
dec edi  +
cmp dl 25h +
jnz loc_1007EE9  +
mov [eax] dl +
inc eax  +
lea edx [ecx+1] +
dec edi  +
cmp byte ptr [edx] 25h +
jnz loc_1007EDF  +
mov ecx edx +
jmp loc_1007EE9  +
mov [ebp+var_608] 1 +
inc ecx  +
cmp byte ptr [ecx] 0 +
jnz loc_1007EBF  +
cmp [ebp+var_608] 0 +
mov byte ptr [eax] 0 +
jz loc_1007F09  +
lea eax [ebp+var_604] +
push eax  +
push ebx  +
push esi  +
call sub_1007C9F  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1007105  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
mov esi 200h +
push 900h  +
push 0  +
push 0  +
push esi  +
lea eax [ebp+var_204] +
push eax  +
call sub_1007D43  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_1007F88  +
cmp dword_100A69C 0 +
jz loc_1007F88  +
push esi  +
lea eax [ebp+var_204] +
push eax  +
call sub_1007E79  +
lea eax [ebp+var_204] +
push eax  +
push 0Ch  +
push [ebp+arg_0]  +
call dword_100A69C  +
add esp 0Ch +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1007105  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
mov [ebp+var_8] esi +
mov [ebp+hMem] esi +
cmp [ebp+lpString] esi +
jz loc_100802B  +
mov eax [ebp+lpWideCharStr] +
cmp eax esi +
jz loc_100802B  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100802B  +
push ebx  +
push edi  +
mov edi ds:WideCharToMultiByte +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push eax  +
mov ebx 400h +
push ebx  +
push esi  +
call edi  +
mov [ebp+cchMultiByte] eax +
cmp eax esi +
jz loc_1008029  +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax esi +
jz loc_1008029  +
push esi  +
push esi  +
push [ebp+cchMultiByte]  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push esi  +
call edi  +
test eax eax +
jz loc_1008029  +
push [ebp+hMem]  +
call sub_1007C32  +
push [ebp+arg_C]  +
push [ebp+hMem]  +
push [ebp+arg_4]  +
push [ebp+lpString]  +
call sub_1007D07  +
test eax eax +
jl loc_1008029  +
push [ebp+lpString]  +
call ds:lstrlenA  +
mov [ebp+var_8] eax +
pop edi  +
pop ebx  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 604h +
mov eax dword_100A008 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+lpWideCharStr]  +
mov esi 600h +
push esi  +
lea eax [ebp+lpString] +
push eax  +
call sub_1007F9A  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_10080A1  +
cmp dword_100A69C 0 +
jz loc_10080A1  +
push esi  +
lea eax [ebp+lpString] +
push eax  +
call sub_1007E79  +
lea eax [ebp+lpString] +
push eax  +
push 0Ch  +
push [ebp+arg_0]  +
call dword_100A69C  +
add esp 0Ch +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1007105  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov edi 400h +
push [ebp+lpWideCharStr]  +
mov esi offset unk_100A6A8 +
push edi  +
push esi  +
call sub_1007F9A  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_10080F6  +
cmp dword_100A69C 0 +
jz loc_10080F6  +
push edi  +
push esi  +
call sub_1007E79  +
push esi  +
push 0Ch  +
push [ebp+arg_0]  +
call dword_100A69C  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push offset aCconnectiontab  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
xor eax eax +
pop ecx  +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset aCconnectiont_0  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
mov eax [esi+4] +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008158  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+4] 0 +
mov eax [esi] +
mov edi ds:CloseHandle +
test eax eax +
jz loc_100816A  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1008178  +
push eax  +
call edi  +
and dword ptr [esi+0Ch] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset aCconnectiont_8  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
mov eax [esi+0Ch] +
pop ecx  +
xor edi edi +
pop ecx  +
test eax eax +
jnz loc_10081A8  +
mov eax 80070005h +
jmp loc_10081FD  +
push 3E8h  +
push eax  +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_10081E5  +
cmp eax 80h +
jz loc_10081E5  +
cmp eax 102h +
jnz loc_10081CD  +
mov edi 800705B4h +
jmp loc_10081FB  +
call ds:GetLastError  +
test eax eax +
jle loc_10081E1  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_10081FB  +
xor eax eax +
inc eax  +
cmp [esi+8] eax +
jnz loc_10081F8  +
push dword ptr [esi+0Ch]  +
call ds:SetEvent  +
jmp loc_10081A1  +
mov [esi+8] eax +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset aCconnectiont_9  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
xor edi edi +
pop ecx  +
pop ecx  +
cmp [esi+8] edi +
jz loc_1008257  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1008257  +
push eax  +
call ds:SetEvent  +
test eax eax +
jz loc_100823B  +
and [esi+8] edi +
jmp loc_1008253  +
call ds:GetLastError  +
mov edi eax +
test edi edi +
jle loc_1008253  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
jmp loc_100825C  +
mov eax 80070005h +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx dword ptr [ebp+lpString1] +
push esi  +
push edi  +
push ebx  +
push offset aCconnectiont_1  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
xor edi edi +
add esp 0Ch +
cmp [esi+8] edi +
jz loc_10082F1  +
cmp [esi+4] edi +
jz loc_10082F1  +
cmp ebx edi +
jz loc_10082EA  +
cmp [ebp+arg_8] edi +
jz loc_10082EA  +
xor eax eax +
cmp ax [ebx] +
jnz loc_10082A8  +
mov eax 80070057h +
jmp loc_10082F6  +
xor ebx ebx +
mov eax [esi+4] +
lea eax [edi+eax+14h] +
push eax  +
push dword ptr [ebp+lpString1]  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_10082CB  +
mov eax [esi+4] +
mov eax [edi+eax+0Ch] +
cmp eax [ebp+arg_4] +
jz loc_10082E1  +
add edi 22Ch +
inc ebx  +
cmp edi 4580h +
jl loc_10082AA  +
mov eax 80070490h +
jmp loc_10082F6  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
xor eax eax +
jmp loc_10082F6  +
mov eax 80004003h +
jmp loc_10082F6  +
mov eax 80070005h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push offset aCconnectiont_2  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
xor ebx ebx +
pop ecx  +
pop ecx  +
cmp [esi] ebx +
jnz loc_10083C3  +
cmp [esi+4] ebx +
jnz loc_10083C3  +
push edi  +
push offset aLocalCmconnect  +
push ebx  +
push 6  +
xor edi edi +
call ds:OpenFileMappingW  +
mov [esi] eax +
cmp eax ebx +
jnz loc_1008354  +
call ds:GetLastError  +
mov edi eax +
push edi  +
push offset aCconnectiont_3  +
jmp loc_10083A0  +
push 4588h  +
push ebx  +
push ebx  +
push 6  +
push eax  +
call ds:MapViewOfFile  +
mov [esi+4] eax +
cmp eax ebx +
jnz loc_100837A  +
push dword ptr [esi]  +
call ds:CloseHandle  +
push 6Eh  +
mov [esi] ebx +
pop edi  +
jmp loc_10083B2  +
push offset aLocalCmconne_0  +
push ebx  +
push 0E0000000h  +
call ds:OpenEventW  +
mov [esi+0Ch] eax +
cmp eax ebx +
jnz loc_10083BE  +
call ds:GetLastError  +
mov edi eax +
push edi  +
push offset aCconnectiont_4  +
push dword_100A31C  +
call sub_1008041  +
add esp 0Ch +
cmp edi ebx +
jle loc_10083BE  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
pop edi  +
jmp loc_10083DA  +
push offset aCconnectiont_5  +
push dword_100A31C  +
call sub_1008041  +
pop ecx  +
pop ecx  +
mov eax 80070005h +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset aCconnectiont_6  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
mov eax [esi+4] +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100840C  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+4] 0 +
mov eax [esi] +
mov edi ds:CloseHandle +
test eax eax +
jz loc_100841E  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_100842C  +
push eax  +
call edi  +
and dword ptr [esi+0Ch] 0 +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aCconnectiont_7  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
cmp dword ptr [esi+4] 0 +
pop ecx  +
pop ecx  +
jnz loc_100845D  +
mov eax 80070005h +
jmp loc_100847A  +
mov ecx esi +
call sub_1008180  +
test eax eax +
jl loc_100847A  +
mov eax [esi+4] +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx esi +
call sub_1008205  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
push offset aCconnection_10  +
push dword_100A31C  +
mov ebx ecx +
call sub_1008041  +
add esp 0Ch +
cmp dword ptr [ebx+4] 0 +
jnz loc_10084B1  +
mov eax 80070005h +
jmp loc_1008519  +
test esi esi +
jnz loc_10084BC  +
mov eax 80004003h +
jmp loc_1008519  +
xor eax eax +
cmp ax [esi] +
jnz loc_10084CA  +
mov eax 80070057h +
jmp loc_1008519  +
mov ecx ebx +
call sub_1008180  +
test eax eax +
jl loc_1008519  +
or [ebp+arg_0] 0FFFFFFFFh +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
mov ecx ebx +
push esi  +
call sub_1008264  +
mov [ebp+arg_4] eax +
test eax eax +
jl loc_100850F  +
push edi  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_100850E  +
mov eax [ebp+arg_0] +
mov ecx [ebx+4] +
imul eax eax +
lea esi [eax+ecx+8] +
mov ecx 8Bh +
movs   +
pop edi  +
mov ecx ebx +
call sub_1008205  +
mov eax [ebp+arg_4] +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
push offset aCconnection_11  +
push dword_100A31C  +
mov esi ecx +
call sub_1008041  +
add esp 0Ch +
cmp dword ptr [esi+4] 0 +
jnz loc_1008551  +
mov eax 80070005h +
jmp loc_10085B7  +
test edi edi +
jnz loc_100855C  +
mov eax 80004003h +
jmp loc_10085B7  +
xor eax eax +
cmp ax [edi] +
jnz loc_100856A  +
mov eax 80070057h +
jmp loc_10085B7  +
mov ecx esi +
call sub_1008180  +
test eax eax +
jl loc_10085B7  +
or [ebp+arg_0] 0FFFFFFFFh +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_1008264  +
mov edi eax +
test edi edi +
jl loc_10085AE  +
mov eax [ebp+arg_0] +
mov ecx [esi+4] +
imul eax eax +
push 22Ch  +
lea eax [eax+ecx+8] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov ecx esi +
call sub_1008205  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_1008691  +
cmp ecx [ebp+arg_0] +
jbe loc_1008696  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10086D4  +
cmp [ebp+arg_4] eax +
jz loc_10086D0  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10086D0  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10086B3  +
test esi esi +
jnz loc_10086DC  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10086EA  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_1008719  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_10079A9  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_1008838  +
test [ebp+arg_14] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
jz loc_100876A  +
cmp [ebp+arg_8] eax +
jnz loc_100876A  +
mov [ebp+arg_8] offset WindowName +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1008785  +
mov esi 80070057h +
cmp ecx eax +
jz loc_10087F1  +
xor eax eax +
mov [edi] ax +
jmp loc_10087F1  +
cmp ecx eax +
jnz loc_10087A6  +
mov edx [ebp+arg_8] +
cmp [edx] ax +
jz loc_1008822  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_10087F1  +
mov [ebp+arg_0] eax +
push 7FFFFFFEh  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_8] +
mov edx ecx +
mov ecx edi +
call sub_100869F  +
mov esi eax +
mov eax [ebp+arg_0] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_10087EE  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_1008822  +
cmp ebx 1 +
jbe loc_1008822  +
push [ebp+arg_0]  +
lea ecx [ebx+ebx] +
call sub_10086F6  +
jmp loc_1008822  +
mov ecx [ebp+arg_4] +
test [ebp+arg_14] 1C00h +
jz loc_1008816  +
test ecx ecx +
jz loc_1008816  +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_1003C85  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_1008822  +
cmp esi 8007007Ah +
jnz loc_1008837  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100882E  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1008837  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008724  +
mov esi eax +
test esi esi +
jge loc_100887C  +
push esi  +
push offset aStringcchcopye  +
push dword_100A31C  +
call sub_1007F1F  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebx  +
push edi  +
push offset aKernel32_dll  +
xor ebx ebx +
call ds:LoadLibraryA  +
mov edi eax +
cmp edi ebx +
jz loc_10088D5  +
push esi  +
push offset aHeapsetinforma  +
push edi  +
call ds:GetProcAddress  +
mov esi eax +
cmp esi ebx +
jz loc_10088CB  +
push ebx  +
push ebx  +
push 1  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
test eax eax +
jnz loc_10088CB  +
call ds:GetLastError  +
mov ebx eax +
push edi  +
call ds:FreeLibrary  +
pop esi  +
jmp loc_10088DD  +
call ds:GetLastError  +
mov ebx eax +
pop edi  +
mov eax ebx +
pop ebx  +
retn   +
***
retf   +
***
