cmp ecx dword_1017004 +
jnz loc_100D0B2  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedDecrement  +
test eax eax +
jz loc_1005C39  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_10015B7  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jz loc_1009A4B  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset riid +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_1002DA1  +
mov ecx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFF4h +
mov eax [ecx] +
call dword ptr [eax+4]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+28h]  +
mov eax [ebp+8] +
push dword ptr [ebp+24h]  +
add eax 8 +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100167F  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001804 +
xor eax eax +
cmps   +
jnz loc_1009AC9  +
mov esi [ebp+arg_0] +
mov eax [esi] +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_C]  +
xor edi edi +
push edi  +
push esi  +
call dword ptr [eax+18h]  +
cmp eax edi +
jl loc_10016E5  +
push edi  +
push edi  +
call ds:SetErrorInfo  +
push [ebp+arg_20]  +
mov eax [ebp+arg_8] +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push dword ptr [esi+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 24h  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10016FC  +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
add eax 8 +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100171F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
cmp [ebp+pptlib] 0 +
jnz loc_1009A6B  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+14h] +
mov ebx offset CriticalSection +
push ebx  +
call ds:EnterCriticalSection  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1009A75  +
mov eax [esi+1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi+1Ch] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor edi edi +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
test edi edi +
jl loc_1001766  +
jmp loc_1001753  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov eax [ebp+8] +
push dword ptr [ebp+18h]  +
add eax 8 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10017AA  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001804 +
xor eax eax +
cmps   +
jnz loc_1009ABF  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push [ebp+arg_10]  +
push 0  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_10017FB  +
push [ebp+arg_14]  +
mov eax [ebp+arg_4] +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
xor dword ptr [edx-454B4E6Ah] 1Ah +
adc [esi+0AA009Ch] dh +
xor al 1Dh +
pop es  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 4  +
mov eax ecx +
pop ecx  +
mov edi offset dword_1001638 +
xor edx edx +
cmps   +
pop edi  +
pop esi  +
jz loc_100280B  +
mov ecx eax +
pop ebp  +
jmp sub_1001621  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:GetProcessHeap +
test eax eax +
jnz loc_10092A1  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
add eax eax +
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
and dword ptr [esi+4] 0 +
pop edi  +
mov [esi] eax +
pop esi  +
test eax eax +
jz loc_10092B2  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1001948  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1001948  +
cmp eax edx +
ja loc_1001948  +
mov [ecx+8] eax +
mov [ecx] eax +
mov [ecx+4] edx +
xor eax eax +
pop ebp  +
retn 8  +
mov eax 80070057h +
jmp loc_1001944  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [esi+8] +
push edi  +
mov edi [ebp+arg_4] +
lea eax [edi+eax+1] +
cmp eax ecx +
jnb loc_1002DB0  +
mov eax [esi] +
test eax eax +
jz loc_10019A1  +
cmp edi 1 +
jb loc_1001996  +
lea ecx [edi+edi] +
push ecx  +
mov ecx [esi+4] +
push [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call memcpy  +
add esp 0Ch +
add [esi+4] edi +
mov eax [esi+4] +
mov ecx [esi] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+Mode] +
push eax  +
push [ebp+Mode]  +
call ds:GetConsoleMode  +
test eax eax +
setnz al  +
pop ebp  +
retn 4  +
***
mov edx [ecx] +
movzx eax word ptr [edx] +
add edx 2 +
mov [ecx] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push eax  +
mov ecx esi +
call sub_1001A03  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_21C] ecx +
push edi  +
lea ecx [ebp+var_234] +
mov [ebp+Mode] eax +
call sub_1001911  +
lea ecx [ebp+var_228] +
call sub_10018B2  +
and [ebp+var_218] 0 +
test esi esi +
jz loc_10076A2  +
push esi  +
call ds:lstrlenW  +
mov edi eax +
lea eax [esi+edi*2] +
push eax  +
push esi  +
lea ecx [ebp+var_234] +
call sub_1001923  +
mov [ebp+var_208] eax +
test eax eax +
jl loc_1001C12  +
add edi 0Ah +
push edi  +
lea ecx [ebp+var_228] +
call sub_10018C4  +
mov [ebp+var_208] eax +
test eax eax +
jl loc_1001C12  +
push ebx  +
push 0Dh  +
xor edi edi +
pop esi  +
mov eax [ebp+var_234] +
cmp eax [ebp+var_230] +
jnb loc_1001AEE  +
lea ecx [ebp+var_234] +
call sub_10019CE  +
mov ebx eax +
cmp ebx 0Ah +
jz loc_1002BC3  +
movzx eax bx +
mov [ebp+lpBuffer] eax +
push 1  +
lea eax [ebp+lpBuffer] +
push eax  +
lea ecx [ebp+var_228] +
call sub_1001954  +
mov [ebp+var_208] eax +
test eax eax +
jl loc_1001C11  +
mov edi ebx +
jmp loc_1001A9B  +
push 1  +
lea eax [ebp+lpBuffer] +
push eax  +
lea ecx [ebp+var_228] +
mov [ebp+lpBuffer] esi +
call sub_1001954  +
mov [ebp+var_208] eax +
test eax eax +
jl loc_1001C11  +
push 1  +
lea eax [ebp+lpBuffer] +
push eax  +
lea ecx [ebp+var_228] +
mov [ebp+lpBuffer] 0Ah +
call sub_1001954  +
mov [ebp+var_208] eax +
test eax eax +
jl loc_1001C11  +
cmp byte_1017001 0 +
mov edi [ebp+var_228] +
mov ebx [ebp+var_224] +
jz loc_1001B7A  +
mov eax [ebp+var_21C] +
cmp byte ptr [eax+25h] 0 +
jnz loc_1002DE8  +
push [ebp+Mode]  +
call sub_10019AE  +
test al al +
jnz loc_1002DE8  +
mov esi ds:WideCharToMultiByte +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push ebx  +
push edi  +
push eax  +
push 1  +
call esi  +
mov [ebp+var_21C] eax +
test eax eax +
jbe loc_100770D  +
cmp eax 200h +
jnb loc_10070C8  +
lea ecx [ebp+var_204] +
mov [ebp+lpBuffer] ecx +
xor ecx ecx +
push ecx  +
push ecx  +
push eax  +
push [ebp+lpBuffer]  +
push ebx  +
push edi  +
push ecx  +
push 1  +
call esi  +
mov esi eax +
test esi esi +
jz loc_100710A  +
jbe loc_1001C04  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+Mode]  +
call ds:WriteFile  +
test eax eax +
jz loc_100710A  +
mov eax [ebp+NumberOfBytesWritten] +
add [ebp+lpBuffer] eax +
sub esi eax +
jnz loc_1001BD0  +
cmp [ebp+var_218] 0 +
jnz loc_10070F9  +
pop ebx  +
lea ecx [ebp+var_228] +
call sub_10015A1  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_208] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+20h] al +
jnz loc_10077BA  +
pop ebp  +
jmp sub_10019DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jz loc_1009032  +
push esi  +
push edi  +
lea ecx [ebp-14h] +
call sub_10018B2  +
xor eax eax +
push 400h  +
lea ecx [ebp-14h] +
mov [ebp-34h] ax +
mov [ebp-24h] ax +
call sub_10018C4  +
mov edi ds:VariantClear +
mov esi eax +
test esi esi +
jl loc_1001D26  +
mov ebx [ebx+10h] +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jle loc_1001D10  +
lea eax [ebp-34h] +
push eax  +
call edi  +
lea eax [ebp-24h] +
push eax  +
call edi  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:SafeArrayGetElement  +
mov esi eax +
test esi esi +
jl loc_1001D26  +
xor eax eax +
inc eax  +
push 8  +
cmp ax [ebp-34h] +
jz loc_1009039  +
push 0  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
test esi esi +
jl loc_1001D26  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-14h] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1001D26  +
lea eax [ebx-1] +
cmp [ebp-4] eax +
jnz loc_100905E  +
inc dword ptr [ebp-4]  +
cmp [ebp-4] ebx +
jl loc_1001CA3  +
mov eax [ebp+8] +
mov ecx [eax+40h] +
push dword ptr [ebp-14h]  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov esi eax +
test esi esi +
jl loc_1001D26  +
xor esi esi +
lea eax [ebp-34h] +
push eax  +
call edi  +
lea eax [ebp-24h] +
push eax  +
call edi  +
lea ecx [ebp-14h] +
call sub_10015A1  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov esi eax +
test esi esi +
jge loc_1001D08  +
jmp loc_1001D26  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_1001954  +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 4 +
push ecx  +
call ds:InterlockedCompareExchange  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
call ds:GetWindowLongA  +
cmp dword ptr [ebp+0Ch] 81h +
mov ebx [ebp+14h] +
mov esi eax +
jz loc_100398C  +
push ebx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
test esi esi +
jz loc_100399F  +
mov ecx esi +
call sub_1001DDB  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+Msg] +
dec eax  +
dec eax  +
push esi  +
mov esi ecx +
jz loc_1005B96  +
sub eax 0Fh +
jz loc_1008527  +
sub eax 5 +
jz loc_1005B83  +
sub eax 6Ch +
jz loc_1005B91  +
sub eax 91h +
jz loc_1005B8A  +
sub eax 2EEh +
jz loc_10084CA  +
dec eax  +
jz loc_1005B78  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [esi]  +
call ds:DefWindowProcA  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+10h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+ppmk] 0 +
and [ebp+var_210] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_21C] ecx +
mov ecx [ebp+arg_14] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_218] ecx +
mov ecx esi +
call sub_10044E0  +
test eax eax +
jl loc_10088FB  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push 104h  +
push edi  +
call sub_1003B1E  +
test eax eax +
jl loc_10088FB  +
mov edi ds:SysAllocString +
lea eax [ebp+Buffer] +
push eax  +
call edi  +
mov [esi+238h] eax +
test eax eax +
jz loc_1008912  +
push [ebp+FilePart]  +
call edi  +
mov [esi+23Ch] eax +
test eax eax +
jz loc_1008912  +
push ebx  +
mov ecx esi +
call sub_10028D9  +
mov edi eax +
test edi edi +
jl loc_1006DA7  +
cmp [ebp+var_218] 0 +
lea eax [ebp+var_210] +
mov ecx esi +
push eax  +
jnz loc_100891C  +
call sub_1005497  +
test eax eax +
jl loc_100892C  +
cmp byte ptr [esi+26h] 0 +
push [ebp+var_210]  +
mov ecx esi +
jz loc_100894F  +
call sub_1004BA1  +
mov edi eax +
cmp edi 1 +
jz loc_1008947  +
test edi edi +
jl loc_1006BE0  +
push [ebp+var_210]  +
mov ecx esi +
call sub_100267D  +
mov edi eax +
test edi edi +
jl loc_1006BE0  +
xor edi edi +
test edi edi +
jl loc_1006BE0  +
mov eax [ebp+ppmk] +
test eax eax +
jnz loc_1006BD5  +
push [ebp+var_210]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 18h  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 284h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
lea ecx [ebp+var_284] +
inc edi  +
call sub_1003521  +
push 0  +
mov [ebp+var_284] offset off_100220C +
call ds:CoInitialize  +
test eax eax +
jl loc_10021F1  +
lea ecx [ebp+var_284] +
call sub_100346D  +
test eax eax +
jz loc_10021E0  +
call sub_1003351  +
test eax eax +
jl loc_10021E0  +
push 0  +
push esi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_284] +
push hModule  +
call sub_1002299  +
mov edi eax +
lea ecx [ebp+var_284] +
call sub_100600A  +
call ds:CoUninitialize  +
lea ecx [ebp+var_284] +
call sub_1005FD9  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 578h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_8] +
lea ecx [ebp+var_34C] +
mov [ebp+var_574] eax +
call sub_100437C  +
dec [ebp+arg_4]  +
add edi 4 +
mov [ebp+var_578] edi +
call sub_10037F5  +
test eax eax +
jz loc_1007F66  +
lea edi [esi+260h] +
push edi  +
call sub_100461D  +
test eax eax +
jl loc_10022F9  +
mov ecx [edi] +
call sub_10039B0  +
cmp byte_1017001 0 +
push ebx  +
jz loc_1007F8C  +
push 105h  +
xor eax eax +
lea edi [esi+2Ch] +
push edi  +
mov [esi+234h] ax +
push hModule  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_1007F79  +
xor eax eax +
cmp ax [esi+234h] +
jnz loc_1007F79  +
xor ebx ebx +
lea eax [esi+10h] +
push eax  +
lea eax [esi+0Ch] +
push eax  +
push edi  +
call sub_100442A  +
cmp eax ebx +
mov ecx esi +
jl loc_1007FD4  +
call sub_1003FF7  +
cmp [ebp+arg_4] ebx +
jz loc_1007FEF  +
push [ebp+var_578]  +
lea ecx [ebp+var_34C] +
push [ebp+arg_4]  +
call sub_1003732  +
push 80000002h  +
lea ecx [ebp+var_34C] +
call sub_1003D3E  +
cmp eax ebx +
jl loc_1007FFD  +
mov edi 80000001h +
push edi  +
lea ecx [ebp+var_34C] +
call sub_1003D3E  +
cmp eax ebx +
jl loc_1007FFD  +
mov al [ebp+var_33B] +
lea ecx [ebp+var_34C] +
mov [esi+20h] al +
call sub_1003C66  +
cmp eax ebx +
jl loc_1008007  +
mov al [ebp+var_33B] +
mov cl [ebp+var_335] +
mov [esi+20h] al +
mov eax [ebp+var_34C] +
mov [esi+8] eax +
mov al [ebp+var_348] +
mov [esi+21h] al +
mov al [ebp+var_339] +
mov [esi+23h] al +
mov al [ebp+var_337] +
mov [esi+24h] al +
mov [esi+25h] cl +
test al al +
jnz loc_1008016  +
mov al [esi+27h] +
test al al +
jnz loc_100802C  +
cmp [ebp+var_11E] 0 +
jnz loc_1008035  +
cmp [ebp+var_346] 0 +
jz loc_100242B  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
cmp [ebp+var_11F] 0 +
jnz loc_1008059  +
xor al al +
cmp [ebp+var_120] al +
jnz loc_10080AE  +
cmp [ebp+var_11D] 0 +
jnz loc_10080D4  +
mov ecx [ebp+var_128] +
cmp ecx ebx +
jz loc_1008125  +
cmp word ptr [ebp+var_330] bx +
jz loc_100812D  +
cmp [ebp+var_114] ebx +
jnz loc_1008171  +
push [ebp+var_574]  +
mov eax [ebp+var_124] +
push ebx  +
push [ebp+var_11C]  +
add eax 4 +
push eax  +
dec ecx  +
push ecx  +
lea eax [ebp+var_330] +
push eax  +
mov ecx esi +
call sub_1001F26  +
cmp eax ebx +
jl loc_100813F  +
mov esi [esi+1Ch] +
lea ecx [ebp+var_34C] +
call sub_1005D1E  +
mov eax esi +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:MsgWaitForMultipleObjects +
push edi  +
push [ebp+dwWakeMask]  +
lea eax [ebp+pHandles] +
push [ebp+dwMilliseconds]  +
push [ebp+fWaitAll]  +
push eax  +
push 1  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1002504  +
mov edi ds:PeekMessageA +
cmp eax 1 +
jz loc_1008469  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
cmp eax 0FFFFFFFFh +
jz loc_1002504  +
jmp loc_10024FB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_100252C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push esi  +
push edi  +
lea edx [ebp+lpClassName] +
mov eax offset ClassName +
push edx  +
mov esi ecx +
mov ecx hModule +
push eax  +
push ecx  +
mov [ebp-34h] ecx +
mov [ebp-20h] eax +
call ds:GetClassInfoA  +
xor edi edi +
test eax eax +
jnz loc_100258A  +
lea eax [ebp+lpClassName] +
push eax  +
mov [ebp+lpClassName] edi +
mov dword ptr [ebp-40h] offset loc_1001D93 +
mov [ebp-3Ch] edi +
mov [ebp-38h] edi +
mov [ebp-30h] edi +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
call ds:RegisterClassA  +
test ax ax +
jz loc_1008542  +
push esi  +
push hModule  +
push edi  +
push edi  +
push 1  +
push 1  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-20h]  +
push edi  +
call ds:CreateWindowExA  +
mov [esi] eax +
cmp eax edi +
jz loc_1008542  +
push ebx  +
push dword ptr [esi+1Ch]  +
mov [esi+0Ch] edi +
call ds:SetEvent  +
mov ebx ds:GetMessageA +
push edi  +
push edi  +
push dword ptr [esi]  +
lea eax [ebp+Msg] +
push eax  +
call ebx  +
cmp eax edi +
jnz loc_1004ABA  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+23h] 0 +
push edi  +
jnz loc_10088C2  +
xor eax eax +
lea edi [esi+248h] +
push edi  +
push eax  +
push dword ptr [esi+238h]  +
call sub_1004F92  +
test eax eax +
jl loc_10088CD  +
push [ebp+arg_0]  +
mov ecx [edi] +
call sub_1004E7E  +
test eax eax +
jl loc_1002719  +
cmp byte ptr [esi+21h] 0 +
jnz loc_10088DC  +
mov eax [edi] +
push dword ptr [eax+40h]  +
lea edi [esi+244h] +
mov ecx [edi] +
push eax  +
call sub_1005084  +
mov ebx eax +
test ebx ebx +
jl loc_10026EE  +
mov ecx [edi] +
call sub_100272D  +
mov ebx eax +
test ebx ebx +
jl loc_10026EE  +
xor ebx ebx +
mov ecx [esi+244h] +
call sub_100612A  +
mov ecx [esi+24Ch] +
test ecx ecx +
jz loc_1002708  +
call sub_1005FA8  +
mov ecx esi +
call sub_1005BBF  +
test eax eax +
jnz loc_10088EF  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ebx eax +
test ebx ebx +
jge loc_10026C6  +
jmp loc_10026EE  +
***
mov eax [ecx+24h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax 80020101h +
jz loc_1008AD5  +
retn   +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jnz loc_100277D  +
push [ebp+lpString]  +
mov esi ds:lstrlenW +
call esi  +
push [ebp+arg_4]  +
mov edi eax +
call esi  +
mov [ebp+arg_8] edi +
cmp edi eax +
ja loc_100277D  +
mov [ebp+arg_8] eax +
cmp [ebp+arg_8] 1 +
jb loc_10027D4  +
mov eax [ebp+lpString] +
movzx esi word ptr [eax] +
mov eax [ebp+arg_4] +
movzx edi word ptr [eax] +
dec [ebp+arg_8]  +
add [ebp+lpString] 2 +
add [ebp+arg_4] 2 +
xor eax eax +
cmp si di +
jz loc_10027CF  +
cmp ax si +
jz loc_10027D8  +
cmp ax di +
jz loc_10027DD  +
push edi  +
call sub_1002858  +
push esi  +
mov bx ax +
call sub_1002858  +
cmp ax bx +
jz loc_100277D  +
cmp di si +
sbb eax eax +
and eax 2 +
dec eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
cmp ax si +
jnz loc_100277D  +
xor eax eax +
jmp loc_10027C8  +
or eax 0FFFFFFFFh +
jmp loc_10027C8  +
xor eax eax +
inc eax  +
jmp loc_10027C8  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001587  +
***
mov ecx [eax+8] +
mov edx [ebp+arg_4] +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax-41h] +
cmp cx 19h +
jbe loc_100286D  +
pop ebp  +
retn 4  +
add eax 20h +
jmp loc_1002869  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
lea eax [esi+0Ch] +
mov dword ptr [esi] offset off_1001518 +
mov dword ptr [eax] offset off_10028C8 +
mov dword ptr [eax+4] 1 +
jnz loc_1009A55  +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
push offset Addend  +
mov [esi+8] eax +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov esi ecx +
test eax eax +
jnz loc_1008863  +
push 2Eh  +
push dword ptr [esi+23Ch]  +
call sub_1003D0D  +
test eax eax +
jz loc_100886A  +
push 100h  +
push eax  +
lea ecx [ebp+var_204] +
call sub_10041AC  +
test eax eax +
jl loc_1002945  +
lea edi [ebp+var_204] +
lea eax [esi+244h] +
push eax  +
push esi  +
push edi  +
call sub_10051E5  +
test eax eax +
jl loc_100888A  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jz loc_1009197  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10029D8 +
xor ebx ebx +
cmps   +
jz loc_10039EE  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset sub_10029E8 +
xor ebx ebx +
cmps   +
jz loc_10039EE  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset dword_1005AD0 +
xor ebx ebx +
cmps   +
jz loc_10091A1  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_1001814 +
xor ebx ebx +
cmps   +
jz loc_10091A6  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1001885  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
shr dword ptr [ecx-4E1AD33Bh] 1 +
rcl dword ptr [ecx] cl +
mov ds:4B100086h al +
rcl dword ptr [eax-70h] cl +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1008ECE  +
mov eax [ebp+arg_4] +
mov edx [eax+30h] +
mov [ecx] edx +
mov eax [eax+30h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp-10h] +
push eax  +
call ds:VariantInit  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
call ds:SafeArrayGetElement  +
test eax eax +
jl locret_1002A5D  +
mov eax [ebp+10h] +
mov ecx [ebp-8] +
mov [eax] ecx +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+28h]  +
mov eax [ebp+8] +
push dword ptr [ebp+24h]  +
add eax 0Ch +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100167F  +
pop ebp  +
retn 24h  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1002AA4  +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
add eax 0Ch +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100171F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push esi  +
mov esi [ebp+14h] +
xor ecx ecx +
push edi  +
mov edi [ebp+10h] +
cmp esi ecx +
jz loc_1008FE7  +
push ebx  +
mov [ebp-1Ch] ecx +
mov [ebp-18h] ecx +
mov [esi] ecx +
cmp eax ecx +
jz loc_1002B6A  +
xor edx edx +
cmp dx [eax] +
jz loc_1002B6A  +
cmp edi ecx +
jz loc_1002B0D  +
cmp [edi] cx +
jnz loc_1002B0D  +
xor edi edi +
lea ecx [ebp-1Ch] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
call sub_1002B81  +
mov ebx eax +
test ebx ebx +
jl loc_1002B6F  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push offset dword_1001638  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_1002B6F  +
xor ebx ebx +
cmp edi ebx +
jnz loc_1008FF1  +
mov eax [ebp-18h] +
mov [esi] eax +
mov [ebp-18h] ebx +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_1002B57  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
pop ebx  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 10h  +
***
mov ebx 80070057h +
mov eax [ebp-18h] +
test eax eax +
jnz loc_1009027  +
jmp loc_1002B4A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+rclsid]  +
push [ebp+lpWideCharStr]  +
call ds:CLSIDFromProgID  +
mov esi eax +
test esi esi +
jl loc_1008F7E  +
push [ebp+ppv]  +
push offset riid  +
push 15h  +
push 0  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1008FC8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
cmp edi esi +
jz loc_1001ABF  +
push 1  +
lea eax [ebp+lpBuffer] +
push eax  +
lea ecx [ebp+var_228] +
mov [ebp+lpBuffer] esi +
call sub_1001954  +
mov [ebp+var_208] eax +
test eax eax +
jge loc_1001ABF  +
jmp loc_1001C11  +
***
cmp byte ptr [ecx+20h] 0 +
jnz locret_1002C1D  +
movzx edx word ptr [ecx+0Ch] +
mov eax [ecx] +
push edx  +
movzx edx word ptr [ecx+0Eh] +
push edx  +
push 834h  +
push 0  +
push ecx  +
call dword ptr [eax+10h]  +
add esp 14h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp-10h] ebx +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
cmp [eax+20h] bl +
jnz loc_1002CA2  +
push dword ptr [ebp+10h]  +
lea eax [ebp-10h] +
push eax  +
call sub_1003A91  +
test eax eax +
jz loc_1002C8D  +
lea eax [ebp+14h] +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1002CB9  +
cmp eax ebx +
mov [ebp-14h] ebx +
jl loc_1002C8D  +
cmp [ebp+0Ch] ebx +
jnz loc_100774C  +
mov ebx [ebp-8] +
mov ecx [ebp+8] +
push ebx  +
call sub_10019DE  +
push dword ptr [ebp-10h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-0Ch]  +
call esi  +
push dword ptr [ebp-8]  +
call esi  +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+hMem] ebx +
mov [ebp+CodePage] ebx +
cmp byte_1017001 bl +
jz loc_1007DAF  +
push [ebp+Arguments]  +
lea eax [ebp+hMem] +
push ebx  +
push eax  +
push ebx  +
push ebx  +
push [ebp+lpWideCharStr]  +
push 500h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_1007D93  +
push [ebp+hMem]  +
call ds:SysAllocString  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax ebx +
jz loc_1007E44  +
mov esi ds:LocalFree +
cmp [ebp+CodePage] ebx +
jnz loc_1007E50  +
cmp [ebp+hMem] ebx +
jz loc_1002D34  +
push [ebp+hMem]  +
call esi  +
mov eax [ebp+var_8] +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1017010 +
mov al [eax+20h] +
mov ecx [ebp+arg_0] +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax [ebp+8] +
mov [edx] eax +
inc dword ptr [eax+4]  +
xor eax eax +
jmp loc_1001605  +
***
add ecx edi +
mov eax ecx +
imul eax eax +
push ebx  +
push 64h  +
pop ebx  +
xor edx edx +
div  ebx +
add eax ecx +
mov [esi+8] eax +
add eax eax +
push eax  +
push dword ptr [esi]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
pop ebx  +
test eax eax +
jz loc_10092BC  +
mov [esi] eax +
jmp loc_1001972  +
***
test ebx ebx +
jbe loc_1001C11  +
mov esi ds:GetLastError +
mov eax 3FFFh +
cmp ebx eax +
ja loc_1002E01  +
mov eax ebx +
push 0  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push eax  +
push edi  +
push [ebp+Mode]  +
call ds:WriteConsoleW  +
test eax eax +
jz loc_10076AC  +
mov eax [ebp+NumberOfBytesWritten] +
lea edi [edi+eax*2] +
sub ebx eax +
test ebx ebx +
jbe loc_1001C11  +
jmp loc_1002DF6  +
***
call sub_1003099  +
mov esi [ebp+0Ch] +
mov dword_101702C esi +
mov eax [ebp+8] +
mov hModule eax +
xor edi edi +
mov [ebp-4] edi +
push offset CriticalSection  +
call ds:InitializeCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-0B0h] 94h +
lea eax [ebp-0B0h] +
push eax  +
call ds:GetVersionExA  +
test eax eax +
jz loc_1002F04  +
cmp dword ptr [ebp-0ACh] 6 +
sbb al al +
inc al  +
mov byte_1017000 al +
call sub_1003030  +
mov hInstance eax +
cmp dword ptr [ebp-0A0h] 2 +
jnz loc_1002EE6  +
mov byte_1017001 1 +
cmp dword ptr [ebp-0ACh] 5 +
jb loc_1002EC8  +
mov byte_1017002 1 +
jz loc_1002EF9  +
cmp dword ptr [ebp-0ACh] 6 +
jb loc_1002EE6  +
cmp esi 7D0h +
jnz loc_1002EDF  +
push edi  +
call sub_1002F29  +
mov byte_1017028 1 +
xor eax eax +
cmp hModule edi +
setnz al  +
call sub_1003481  +
retn 8  +
cmp dword ptr [ebp-0A8h] 1 +
jb loc_1002EC8  +
jmp loc_1002ED1  +
xor eax eax +
jmp loc_1002EF1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_1002F62  +
push offset ProcName  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1002F5B  +
push [ebp+arg_0]  +
call eax  +
movzx eax ax +
mov [ebp+arg_0] eax +
push esi  +
call ds:FreeLibrary  +
mov ax word ptr [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1017004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1007806  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1003024  +
test dword_1017004 ebx +
jz loc_1003024  +
mov dword_1017004 esi +
not esi  +
mov dword_1017008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1003011  +
***
mov edi edi +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1017004 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
call sub_1002FA1  +
push offset dword_1003104  +
mov eax offset dword_1003100 +
call sub_100310D  +
pop ecx  +
jmp loc_10020CF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
cmp esi [ebp+arg_0] +
jnb loc_1003129  +
mov eax [esi] +
test eax eax +
jnz loc_10077BE  +
add esi 4 +
jmp loc_1003115  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
sub ecx eax +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_10036BC  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi [ebp+hKey] +
setz byte ptr [ebp+var_2+1]  +
mov byte ptr [ebp+var_2] 1 +
mov [ebp+var_3] 1 +
test esi esi +
jz loc_100327C  +
cmp [ebp+arg_4] 0 +
jz loc_100327C  +
lea eax [ebp-1] +
push eax  +
push offset ValueName  +
push esi  +
call sub_10032BE  +
cmp byte ptr [ebp+var_2+1] 0 +
jnz loc_1003299  +
lea eax [ebp+var_2] +
push eax  +
push [ebp+lpValueName]  +
push [ebp+arg_4]  +
call sub_10032BE  +
test eax eax +
jge loc_10081F1  +
test esi esi +
jz loc_10032B1  +
lea eax [ebp-3] +
push eax  +
push [ebp+lpValueName]  +
push esi  +
call sub_10032BE  +
test eax eax +
mov al [ebp+var_3] +
jge loc_10032B4  +
mov al [ebp+arg_C] +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C1Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hKey] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
xor ebx ebx +
push edi  +
mov edi [ebp+lpValueName] +
mov [ebp+var_C14] eax +
mov [ebp+var_C1C] esi +
cmp byte_1017001 bl +
jz loc_1009852  +
lea ecx [ebp+cbData] +
push ecx  +
lea ecx [ebp+String] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
push ebx  +
push edi  +
push eax  +
mov [ebp+cbData] 400h +
call ds:RegQueryValueExW  +
cmp eax ebx +
jz loc_1004A28  +
jle loc_1003335  +
and eax 0FFFFh +
or eax 80070000h +
lea esp [ebp-0C28h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 20019h +
push edi  +
mov esi offset WideCharStr +
xor ebx ebx +
push esi  +
push 80000001h  +
mov [ebp+var_C] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+hKey] ebx +
call sub_1003415  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
push 80000002h  +
call sub_1003415  +
push 1  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aEnabled  +
call sub_1003249  +
test al al +
jz loc_10083FC  +
cmp byte_1017001 bl +
jz loc_10033C7  +
push ebx  +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
call ds:CoInitializeSecurity  +
mov [ebp+var_C] eax +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_10033D7  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_10033E1  +
push [ebp+phkResult]  +
call esi  +
cmp [ebp+var_C] ebx +
jl loc_100841A  +
push 0BEEh  +
push ebx  +
call sub_100386A  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1017001 bl +
jz loc_100961B  +
push [ebp+phkResult]  +
push [ebp+samDesired]  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jnz loc_1006D92  +
xor eax eax +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 10h  +
***
xor eax eax +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1001335  +
jmp sub_100262B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
mov [ebp+var_4] ecx +
cmp [esi] cx +
jz loc_1003502  +
push ebx  +
push edi  +
movzx eax word ptr [esi] +
cmp ax 20h +
jz loc_100361C  +
cmp ax 9 +
jz loc_100361C  +
cmp [esi] cx +
jz loc_1003500  +
xor bl bl +
mov edi esi +
movzx eax word ptr [esi] +
cmp ax 20h +
jz loc_100350A  +
cmp ax 9 +
jz loc_100350A  +
cmp ax 22h +
jz loc_1004AD2  +
inc esi  +
inc esi  +
cmp [esi] cx +
jnz loc_10034CB  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_10034F8  +
mov edx [ebp+var_4] +
mov [eax+edx*4] edi +
inc [ebp+var_4]  +
cmp [esi] cx +
jnz loc_10034AB  +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
test bl bl +
jnz loc_10034E4  +
cmp [ebp+arg_4] ecx +
jz loc_1003518  +
xor eax eax +
mov [esi] ax +
inc esi  +
inc esi  +
jmp loc_10034EB  +
***
xor eax eax +
push esi  +
mov esi ecx +
lea ecx [esi+264h] +
mov dword ptr [esi] offset off_1002230 +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] al +
mov [esi+21h] al +
mov [esi+22h] al +
mov [esi+23h] al +
mov [esi+24h] al +
mov [esi+25h] al +
mov [esi+26h] al +
mov [esi+27h] al +
mov [esi+28h] eax +
mov [esi+238h] eax +
mov [esi+23Ch] eax +
mov [esi+240h] eax +
mov [esi+244h] eax +
mov [esi+248h] eax +
mov [esi+24Ch] eax +
mov [esi+250h] eax +
mov [esi+254h] eax +
mov [esi+258h] eax +
mov [esi+25Ch] eax +
mov [esi+260h] eax +
call sub_10035C4  +
xor eax eax +
mov [esi+2Ch] ax +
call ds:GetCurrentThreadId  +
mov [esi+14h] eax +
mov dword_1017010 esi +
mov eax esi +
pop esi  +
retn   +
***
call sub_10025E6  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor eax eax +
mov [esi+18h] al +
mov [esi+19h] al +
mov [ebp-4] eax +
push esi  +
call ds:InitializeCriticalSection  +
mov byte ptr [esi+19h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax esi +
call sub_100262B  +
retn   +
***
inc esi  +
inc esi  +
jmp loc_10034AB  +
***
sub eax 1000h +
test [eax] eax +
jmp loc_1003232  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_100784C  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jbe loc_100784C  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_100786A  +
mov ecx edx +
cmp [ecx] di +
jz loc_1003704  +
inc ecx  +
inc ecx  +
dec ebx  +
jnz loc_10036FA  +
cmp ebx edi +
jz loc_100786A  +
movzx eax word ptr [esi] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
cmp ax di +
jz loc_100371E  +
dec ebx  +
jnz loc_100370C  +
xor eax eax +
cmp ebx edi +
jz loc_1007871  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+224h] eax +
mov eax [ebp+arg_4] +
mov [ecx+228h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
xor eax eax +
push esi  +
mov esi ecx +
mov edx [esi+224h] +
mov ecx [esi+228h] +
push edi  +
mov [ebp+lpString] eax +
mov [ebp+var_14] eax +
mov [ebp+var_24] ecx +
mov [ebp+var_20] eax +
mov [ebp+var_3] al +
mov [ebp+var_2] al +
mov [ebp+var_4] al +
mov [ebp+var_1] al +
mov [ebp+var_5] 1 +
mov [ebp+var_10] edx +
mov [ebp+var_18] ecx +
cmp edx 1 +
jb loc_10037E0  +
mov ecx [ebp+var_18] +
dec [ebp+var_10]  +
add [ebp+var_18] 4 +
mov edi [ecx] +
cmp [ebp+var_3] al +
jnz loc_10037CB  +
movzx ecx word ptr [edi] +
cmp cx 2Fh +
jz loc_10059D4  +
cmp [ebp+var_5] al +
jz loc_10037CB  +
cmp cx 2Fh +
jz loc_1005ABE  +
cmp cx 2Dh +
jz loc_10079C9  +
mov ecx [ebp+var_24] +
add [ebp+var_24] 4 +
inc [ebp+var_14]  +
mov [ecx] edi +
mov [ebp+var_5] al +
cmp [ebp+var_10] 1 +
jnb loc_1003794  +
mov eax [ebp+var_14] +
mov [esi+224h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
cmp byte_1017000 bl +
jz loc_1007F4D  +
push esi  +
push offset aKernel32_dll  +
call ds:LoadLibraryA  +
mov esi eax +
cmp esi ebx +
jz loc_1007F52  +
push offset aHeapsetinforma  +
push esi  +
call ds:GetProcAddress  +
cmp eax ebx +
jz loc_1003835  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call eax  +
mov ebx eax +
push esi  +
call ds:FreeLibrary  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
cmp byte_1017001 bl +
jz loc_1003950  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 20019h +
push edi  +
mov esi offset WideCharStr +
push esi  +
push 80000001h  +
mov [ebp+nSize] 100h +
mov [ebp+var_224] ebx +
mov [ebp+lpUserSid] ebx +
mov [ebp+cbReferencedDomainName] ebx +
mov [ebp+cbSid] ebx +
mov [ebp+var_220] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+hKey] ebx +
call sub_1003415  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
push 80000002h  +
call sub_1003415  +
cmp [ebp+arg_0] bl +
jnz loc_10081F9  +
push ebx  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aLogsecuritysuc  +
call sub_1003249  +
test al al +
jnz loc_100822F  +
push [ebp+var_220]  +
call ds:SysFreeString  +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_100393E  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_100394E  +
push [ebp+phkResult]  +
call esi  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 8  +
***
mov esi [ebx] +
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongA  +
mov [esi] edi +
jmp loc_1001DB9  +
***
push edi  +
call ds:DefWindowProcA  +
jmp loc_1001DCF  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+8] +
push eax  +
push esi  +
call ds:CoRegisterMessageFilter  +
test eax eax +
jl loc_10039C8  +
mov byte ptr [esi+4] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_4] ebx +
cmp [esi+23h] bl +
jnz loc_1008771  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
lea ecx [eax-0Ch] +
add eax 0FFFFFFF4h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_10029CE  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push offset off_101706C  +
push esi  +
lea ebx [esi+0Ch] +
xor edi edi +
push edi  +
mov ecx ebx +
mov dword ptr [esi+4] offset off_1003A68 +
call sub_1004902  +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov [esi+38h] edi +
mov [esi+34h] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
mov [esi+3Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_1001E68 +
mov dword ptr [esi+4] offset off_1002274 +
mov dword ptr [esi+8] offset off_1002264 +
mov dword ptr [esi+48h] 1 +
mov eax esi +
pop esi  +
mov dword ptr [ebx] offset off_1001EBC +
pop ebx  +
retn   +
***
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1808h +
call sub_100321E  +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [esi] ebx +
push edi  +
mov [ebp+var_1808] ebx +
cmp byte_1017001 bl +
jz loc_100950C  +
push 800h  +
lea eax [ebp+WideCharStr] +
push eax  +
push [ebp+uID]  +
push hInstance  +
call ds:LoadStringW  +
mov [ebp+var_1808] eax +
cmp eax ebx +
jz loc_1003B02  +
lea eax [ebp+WideCharStr] +
push eax  +
call ds:SysAllocString  +
mov [esi] eax +
cmp eax ebx +
jz loc_100954E  +
mov eax [ebp+var_1808] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
xor esi esi +
push edi  +
cmp byte_1017001 bl +
jz loc_1009570  +
push [ebp+lpFilePart]  +
push [ebp+lpBuffer]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_1009555  +
mov eax esi +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
cmp byte_1017001 bl +
jz loc_1009698  +
push [ebp+phkResult]  +
push ebx  +
push [ebp+samDesired]  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
cmp eax ebx +
jnz loc_1009683  +
xor eax eax +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
movzx eax word ptr [edx] +
push esi  +
push edi  +
mov ecx edx +
mov esi edx +
test ax ax +
jz loc_1003C19  +
movzx eax ax +
cmp ax 2Fh +
jz loc_1003C5D  +
cmp ax 5Ch +
jz loc_1003C5D  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1003C03  +
cmp [ebp+arg_8] 0 +
mov edi [ebp+arg_4] +
jz loc_1003C27  +
xor eax eax +
mov [edi] ax +
cmp ecx edx +
jz loc_1007D70  +
sub ecx edx +
shr ecx 1 +
mov eax ecx +
jz loc_1007D8B  +
lea ecx [eax+1] +
cmp ecx [ebp+arg_8] +
jnb loc_1003C57  +
lea esi [eax+eax] +
push esi  +
push edx  +
push edi  +
call memcpy  +
add esp 0Ch +
xor eax eax +
mov [esi+edi] ax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov ecx esi +
jmp loc_1003C0F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
xor eax eax +
lea ebx [esi+1Ch] +
mov [ebx] ax +
call sub_1003752  +
test eax eax +
jl loc_1003CF2  +
cmp dword ptr [esi+224h] 0 +
jz loc_1007C64  +
mov eax [esi+228h] +
push edi  +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edi 104h +
cmp eax edi +
jge loc_1007C6B  +
mov eax [esi+228h] +
push dword ptr [eax]  +
push edi  +
push ebx  +
call sub_10031BD  +
add esp 0Ch +
push 2Eh  +
push ebx  +
call sub_1003D0D  +
test eax eax +
jz loc_1003CEF  +
push 0FFFFFFFFh  +
push offset aWsh  +
add eax 2 +
push eax  +
call sub_1002753  +
test eax eax +
jz loc_1007C76  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
test edx edx +
jz loc_1003A88  +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_1003A88  +
cmp cx [ebp+arg_4] +
jz loc_1003D35  +
inc edx  +
inc edx  +
jmp loc_1003D1F  +
mov eax edx +
jmp loc_1003D31  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push offset WideCharStr  +
push [ebp+hKey]  +
mov esi ecx +
call sub_1003B78  +
test eax eax +
jl loc_1003DBC  +
push ebx  +
push edi  +
lea eax [ebp+Data] +
push eax  +
push offset aTimeout  +
push [ebp+hKey]  +
call sub_100413D  +
mov edi eax +
mov ebx 80070002h +
test edi edi +
jge loc_1007D56  +
cmp edi ebx +
jnz loc_1003DAF  +
mov byte ptr [esi+4] 0 +
and dword ptr [esi] 0 +
lea eax [esi+6] +
push eax  +
push offset aDisplaylogo  +
push [ebp+hKey]  +
call sub_10032BE  +
mov edi eax +
test edi edi +
jge loc_1003DC1  +
cmp edi ebx +
jnz loc_1003DAF  +
mov byte ptr [esi+7] 0 +
xor edi edi +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov byte ptr [esi+7] 1 +
jmp loc_1003DAF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_218] eax +
mov eax [ebp+arg_C] +
xor ebx ebx +
push 44h  +
mov [ebp+var_21C] eax +
mov [ebp+pptlib] ebx +
mov [ebp+var_210] ebx +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_1003F3D  +
push ebx  +
mov ecx eax +
call sub_10048AC  +
mov esi eax +
cmp esi ebx +
jz loc_1008EA5  +
lea ebx [edi+2Ch] +
mov [esi+40h] edi +
mov edi ds:SysAllocString +
push ebx  +
call edi  +
mov [esi+28h] eax +
test eax eax +
jz loc_1008EA5  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
call sub_1003BEA  +
lea eax [ebp+var_20C] +
push eax  +
call edi  +
mov [esi+2Ch] eax +
test eax eax +
jz loc_1008EA5  +
mov eax dword_101702C +
inc eax  +
push eax  +
lea edi [esi+24h] +
push edi  +
call sub_1003A91  +
cmp dword ptr [edi] 0 +
jz loc_1008EA5  +
lea eax [ebp+pptlib] +
push eax  +
push ebx  +
call ds:LoadTypeLib  +
mov edi eax +
test edi edi +
jl loc_1003F02  +
push [ebp+pptlib]  +
lea ecx [esi+8] +
call sub_1003F8A  +
mov edi eax +
test edi edi +
jl loc_1003F02  +
lea eax [ebp+var_210] +
push eax  +
push [ebp+var_218]  +
push [ebp+arg_4]  +
call sub_1004689  +
mov edi eax +
test edi edi +
jl loc_1003F02  +
push [ebp+pptlib]  +
mov ecx [ebp+var_210] +
call sub_1003F49  +
mov edi eax +
test edi edi +
jl loc_1003F02  +
mov eax [ebp+var_210] +
mov ecx [eax] +
lea edx [esi+30h] +
push edx  +
push offset sub_10029E8  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_1003F02  +
mov eax [ebp+var_21C] +
mov [eax] esi +
xor esi esi +
xor edi edi +
mov eax [ebp+pptlib] +
test eax eax +
jz loc_1003F12  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_210] +
test eax eax +
jz loc_1003F22  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jnz loc_1008EAF  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 10h  +
xor esi esi +
jmp loc_1003E21  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi+2Ch] +
add ecx 8 +
call sub_1003F8A  +
test eax eax +
jl loc_1003F80  +
mov ecx [esi+30h] +
push [ebp+arg_0]  +
add ecx 8 +
call sub_1003F8A  +
test eax eax +
jl loc_1003F80  +
push [ebp+arg_0]  +
lea ecx [esi+0Ch] +
call sub_1003F8A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
mov edx [esi+14h] +
push dword ptr [edx+14h]  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_1003FED  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_1009A5D  +
mov eax [esi+14h] +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
add eax 1Ch +
push eax  +
push [ebp+var_4]  +
push ecx  +
call dword ptr [edx+38h]  +
mov edi eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test edi edi +
jl loc_1003FEA  +
mov byte ptr [esi+18h] 1 +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 20019h +
push edi  +
xor ebx ebx +
mov esi offset WideCharStr +
push esi  +
push 80000002h  +
mov [ebp+var_14] ecx +
mov [ebp+hKey] ebx +
mov [ebp+phkResult] ebx +
mov byte ptr [ebp+var_3] bl +
mov byte ptr [ebp+var_3+2] bl +
mov byte ptr [ebp+var_3+1] bl +
call sub_1003415  +
cmp [ebp+phkResult] ebx +
jz loc_1004046  +
lea eax [ebp+var_3] +
push eax  +
push offset ValueName  +
push [ebp+phkResult]  +
call sub_10032BE  +
cmp byte ptr [ebp+var_3] bl +
jnz loc_100405B  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
push 80000001h  +
call sub_1003415  +
mov esi offset aTrustpolicy +
mov edi offset aUsewinsafer +
cmp [ebp+hKey] ebx +
jz loc_1004099  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push [ebp+hKey]  +
call sub_100413D  +
test eax eax +
jge loc_1008426  +
lea eax [ebp-4] +
push eax  +
push edi  +
push [ebp+hKey]  +
call sub_10032BE  +
test eax eax +
jge loc_100842F  +
cmp byte ptr [ebp+var_3+2] bl +
jnz loc_10040B3  +
cmp [ebp+phkResult] ebx +
jz loc_10040B3  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push [ebp+phkResult]  +
call sub_100413D  +
test eax eax +
jge loc_1008438  +
cmp byte ptr [ebp+var_3+1] bl +
jnz loc_10040D2  +
cmp [ebp+phkResult] ebx +
jz loc_10040D2  +
lea eax [ebp-4] +
push eax  +
push edi  +
push [ebp+phkResult]  +
call sub_10032BE  +
test eax eax +
jl loc_10040D2  +
mov byte ptr [ebp+var_3+1] 1 +
mov ecx [ebp+var_14] +
cmp byte ptr [ebp+var_3+2] bl +
jnz loc_1008441  +
cmp byte ptr [ebp+var_3+1] bl +
jz loc_10040E9  +
mov al [ebp+var_4] +
mov [ecx+26h] al +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_10040F9  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_1004103  +
push [ebp+phkResult]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+cbData] 4 +
cmp byte_1017001 bl +
jz loc_10097CD  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jz loc_1009835  +
jle loc_1004193  +
and eax 0FFFFh +
or eax 80070000h +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 82Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
push esi  +
push edi  +
mov [ebp+lpData] ecx +
lea ecx [ebp+hKey] +
push ecx  +
mov edi 20019h +
push edi  +
push eax  +
mov esi 80000000h +
push esi  +
call sub_1003415  +
test eax eax +
jl loc_1004282  +
push ebx  +
push 400h  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0  +
push [ebp+hKey]  +
call sub_10042B5  +
push [ebp+hKey]  +
mov ebx ds:RegCloseKey +
mov [ebp+var_828] eax +
call ebx  +
mov eax [ebp+var_828] +
test eax eax +
jl loc_1004281  +
push offset aScriptengine  +
lea eax [ebp+WideCharStr] +
push 40Eh  +
push eax  +
call sub_10036CD  +
add esp 0Ch +
lea eax [ebp+hKey] +
push eax  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
push esi  +
call sub_1003415  +
test eax eax +
jl loc_1004281  +
push [ebp+cchWideChar]  +
push [ebp+lpData]  +
push 0  +
push [ebp+hKey]  +
call sub_10042B5  +
push [ebp+hKey]  +
mov esi eax +
call ebx  +
test esi esi +
jl loc_100885C  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1017001 bl +
jz loc_100971C  +
lea eax [ebp+lpValueName] +
push eax  +
mov eax [ebp+cchWideChar] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_100434F  +
test eax eax +
jl loc_10096F1  +
mov eax [ebp+lpValueName] +
mov esi [ebp+lpData] +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push esi  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jnz loc_10096FB  +
cmp [ebp+Type] 1 +
jnz loc_1009710  +
mov eax [ebp+cbData] +
shr eax 1 +
cmp [esi+eax*2-2] bx +
jnz loc_10096F1  +
xor eax eax +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100960B  +
mov eax [ebp+arg_0] +
jb loc_100436C  +
cmp eax 0FFFFFFFFh +
ja loc_100960B  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10043C9  +
xor ecx ecx +
lea eax [esi+234h] +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [esi+224h] ecx +
mov [esi+228h] ecx +
mov [esi+22Ch] cl +
mov [esi+22Dh] cl +
mov [esi+22Eh] cl +
mov [esi+22Fh] cl +
mov [esi+230h] ecx +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [esi] ebx +
mov byte ptr [esi+6] 1 +
call ds:GetACP  +
mov [esi+0Ch] eax +
xor eax eax +
mov ecx esi +
mov [esi+11h] bl +
mov [esi+13h] bl +
mov [esi+15h] bl +
mov [esi+17h] bl +
mov dword ptr [esi+18h] 57h +
mov [esi+1Ch] ax +
call sub_100440A  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
xor al al +
mov [ecx+4] al +
mov [ecx+5] al +
mov [ecx+7] al +
mov [ecx+8] al +
mov [ecx+10h] al +
mov [ecx+12h] al +
mov [ecx+14h] al +
mov [ecx+16h] al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
mov [eax] ebx +
mov eax [ebp+arg_8] +
push esi  +
mov [eax] ebx +
push edi  +
cmp byte_1017001 bl +
jz loc_1007EB9  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lpWideCharStr]  +
call GetFileVersionInfoSizeW  +
mov esi eax +
cmp esi ebx +
jz loc_10044C1  +
call sub_100320B  +
mov edi esp +
push edi  +
push esi  +
push [ebp+dwHandle]  +
push [ebp+lpWideCharStr]  +
call GetFileVersionInfoW  +
test eax eax +
jz loc_10044C1  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push edi  +
call VerQueryValueW  +
test eax eax +
jz loc_10044C1  +
mov eax [ebp+lpBuffer] +
mov ecx [eax+10h] +
mov edx [ebp+arg_4] +
mov [edx] ecx +
mov eax [eax+14h] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 0Ch  +
call ds:GetLastError  +
jmp loc_1007EA2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+27Dh] 0 +
jz loc_1004532  +
cmp byte ptr [esi+27Ch] 0 +
jnz loc_1004532  +
call sub_10039CF  +
test eax eax +
jl loc_100452D  +
lea eax [esi+240h] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1003DCC  +
test eax eax +
jl loc_100452D  +
lea eax [esi+24Ch] +
push eax  +
push esi  +
call sub_100453E  +
test eax eax +
jl loc_100452D  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax 8007000Eh +
jmp loc_100452D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 20h  +
call ??2@YAPAXI@Z  +
xor ebx ebx +
pop ecx  +
cmp eax ebx +
jz loc_10045E9  +
mov ecx eax +
call sub_10045F5  +
mov esi eax +
cmp esi ebx +
jz loc_1008561  +
mov eax [ebp+arg_0] +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [esi+8] eax +
call ds:CreateEventA  +
mov [esi+1Ch] eax +
cmp eax ebx +
jz loc_100856B  +
lea eax [esi+14h] +
push eax  +
push ebx  +
push esi  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov [esi+10h] eax +
cmp eax ebx +
jz loc_100856B  +
push 0FFh  +
push 0FFFFFFFFh  +
push ebx  +
push dword ptr [esi+1Ch]  +
call sub_10024CF  +
push dword ptr [esi+1Ch]  +
call ds:CloseHandle  +
mov eax [esi+0Ch] +
cmp eax ebx +
mov [esi+1Ch] ebx +
jg loc_1008586  +
mov edi eax +
cmp edi ebx +
jl loc_10045D8  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor esi esi +
xor edi edi +
cmp esi ebx +
jnz loc_1008595  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor esi esi +
jmp loc_1004561  +
***
xor eax eax +
push esi  +
mov esi ecx +
mov [esi+10h] eax +
mov [esi] eax +
mov [esi+1Ch] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
call ds:GetCurrentThreadId  +
mov [esi+18h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1004648  +
mov ecx eax +
call sub_1004651  +
test eax eax +
jz loc_10085B0  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1004635  +
***
mov eax ecx +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_100466C +
mov byte ptr [eax+4] 0 +
mov dword ptr [eax+0Ch] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
push 4Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1004769  +
mov ecx eax +
call sub_1003A08  +
mov esi eax +
test esi esi +
jz loc_100925B  +
mov edi [ebp+arg_0] +
and [ebp+rgsabound.lLbound] 0 +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
mov [ebp+rgsabound.cElements] edi +
call ds:SafeArrayCreate  +
mov [esi+28h] eax +
test eax eax +
jz loc_1009265  +
and [ebp+rgIndices] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
test edi edi +
jle loc_1004729  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+rgIndices] +
push dword ptr [ebx+eax*4]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_1004770  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [esi+28h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_1004758  +
inc [ebp+rgIndices]  +
mov eax [ebp+rgIndices] +
cmp eax [ebp+arg_0] +
jl loc_10046E3  +
lea eax [esi+2Ch] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
call sub_1004931  +
mov edi eax +
test edi edi +
jl loc_1004758  +
lea eax [esi+30h] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
call sub_100477C  +
mov edi eax +
test edi edi +
jl loc_1004758  +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor esi esi +
xor edi edi +
pop ebx  +
test esi esi +
jnz loc_100926F  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_10046AC  +
mov edi 8007000Eh +
jmp loc_1004758  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
push 28h  +
call ??2@YAPAXI@Z  +
xor ebx ebx +
pop ecx  +
cmp eax ebx +
jz loc_1004860  +
mov ecx eax +
call sub_1004873  +
mov esi eax +
cmp esi ebx +
jz loc_1009246  +
xor eax eax +
cmp [ebp+arg_0] ebx +
mov [ebp+var_4] ebx +
jle loc_10047CB  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
push 2Fh  +
pop edx  +
cmp dx [ecx] +
jz loc_10047C5  +
inc [ebp+var_4]  +
inc eax  +
cmp eax [ebp+arg_0] +
jl loc_10047B4  +
mov eax [ebp+var_4] +
mov [ebp+rgsabound.cElements] eax +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
mov [ebp+rgsabound.lLbound] ebx +
call ds:SafeArrayCreate  +
mov [esi+24h] eax +
cmp eax ebx +
jz loc_1004867  +
cmp [ebp+arg_0] ebx +
mov [ebp+rgIndices] ebx +
jle loc_1004846  +
mov eax [ebp+var_4] +
cmp [ebp+rgIndices] eax +
jge loc_1004846  +
mov eax [ebp+arg_4] +
mov eax [eax+ebx*4] +
push 2Fh  +
pop ecx  +
cmp cx [eax] +
jz loc_1004840  +
push 8  +
pop ecx  +
push eax  +
mov word ptr [ebp+pvarg.anonymous_0] cx +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_1004867  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [esi+24h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_100484F  +
inc [ebp+rgIndices]  +
inc ebx  +
cmp ebx [ebp+arg_0] +
jl loc_10047F1  +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor esi esi +
xor edi edi +
test esi esi +
jnz loc_1009250  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_10047A2  +
mov edi 8007000Eh +
jmp loc_100484F  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push offset off_10170AC  +
push esi  +
lea edi [esi+8] +
push 0  +
mov ecx edi +
call sub_1004902  +
and dword ptr [esi+24h] 0 +
mov dword ptr [edi] offset off_1001494 +
pop edi  +
mov dword ptr [esi] offset off_100139C +
mov dword ptr [esi+4] offset off_1002254 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push offset off_101704C  +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
call sub_1004902  +
xor eax eax +
mov dword ptr [edi] offset off_10014C0 +
mov [esi+28h] eax +
mov [esi+24h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
pop edi  +
mov dword ptr [esi] offset off_10013C8 +
mov dword ptr [esi+4] offset off_1002254 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1002882  +
mov eax [ebp+arg_8] +
mov [esi+14h] eax +
mov dword ptr [esi] offset off_10014EC +
mov byte ptr [esi+18h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push edi  +
push 2Ch  +
call ??2@YAPAXI@Z  +
xor edi edi +
pop ecx  +
cmp eax edi +
jz loc_1007251  +
mov ecx eax +
call sub_10049F0  +
mov ebx eax +
cmp ebx edi +
jz loc_10091DF  +
xor eax eax +
cmp [ebp+arg_0] edi +
mov [ebp+var_8] edi +
jle loc_1004980  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
push 2Fh  +
pop edx  +
cmp dx [ecx] +
jz loc_1007249  +
inc eax  +
cmp eax [ebp+arg_0] +
jl loc_1004968  +
mov eax [ebp+var_8] +
push esi  +
mov esi ds:SafeArrayCreate +
mov [ebp+rgsabound.cElements] eax +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
mov [ebp+rgsabound.lLbound] edi +
call esi  +
mov [ebx+24h] eax +
cmp eax edi +
jz loc_1007261  +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
call esi  +
mov [ebx+28h] eax +
cmp eax edi +
jz loc_1007261  +
xor eax eax +
cmp [ebp+arg_0] edi +
mov [ebp+rgIndices] edi +
mov [ebp+var_14] eax +
jle loc_10049D3  +
mov ecx [ebp+var_8] +
cmp [ebp+rgIndices] ecx +
jl loc_100726B  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
xor ebx ebx +
pop esi  +
test ebx ebx +
jnz loc_100923B  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push offset off_101708C  +
push esi  +
lea edi [esi+8] +
push 0  +
mov ecx edi +
call sub_1004902  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
mov dword ptr [edi] offset off_1001468 +
pop edi  +
mov dword ptr [esi] offset off_100136C +
mov dword ptr [esi+4] offset off_1002254 +
mov eax esi +
pop esi  +
retn   +
***
lea eax [ebp+String] +
cmp [ebp+Type] ebx +
jbe loc_1004A99  +
cmp [ebp+Type] 2 +
ja loc_1009953  +
push 0FFFFFFFFh  +
push offset a0  +
lea eax [ebp+String] +
push eax  +
mov byte ptr [esi] 1 +
call sub_1002753  +
test eax eax +
jz loc_1004A95  +
push 0FFFFFFFFh  +
push offset aNo  +
lea eax [ebp+String] +
push eax  +
call sub_1002753  +
test eax eax +
jz loc_1004A95  +
push 0FFFFFFFFh  +
push offset aFalse  +
lea eax [ebp+String] +
push eax  +
call sub_1002753  +
test eax eax +
jz loc_1004A95  +
mov byte ptr [esi] 1 +
xor eax eax +
jmp loc_1003335  +
mov [esi] bl +
jmp loc_1004A8E  +
mov eax 80040153h +
jmp loc_1003335  +
***
cmp eax 0FFFFFFFFh +
jz loc_10025D4  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
jmp loc_10025C2  +
***
test bl bl +
setz bl  +
cmp [ebp+arg_4] ecx +
jz loc_10034E4  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1004AE5  +
sub eax edx +
sar eax 1 +
lea ecx [esi+2] +
push ecx  +
inc eax  +
push eax  +
push esi  +
call sub_10031BD  +
add esp 0Ch +
dec esi  +
dec esi  +
xor ecx ecx +
jmp loc_10034E4  +
***
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1005394  +
push 4  +
pop ecx  +
mov edi offset dword_1004B7C +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1008AA6  +
push dword ptr [ebp+0Ch]  +
mov ecx edx +
push eax  +
call sub_1001621  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [ebp+lpBuffer] eax +
mov eax [esi+238h] +
mov [ebp+hLibModule] ebx +
mov [ebp+hObject] ebx +
mov [ebp+var_84] ebx +
mov [ebp+var_94] ebx +
mov [ebp+var_88] ebx +
mov [ebp+var_8C] eax +
mov [ebp+var_90] ebx +
cmp [esi+26h] bl +
jz loc_1008D93  +
lea eax [ebp+hLibModule] +
push eax  +
push offset dword_1004DC4  +
call sub_10055CA  +
test eax eax +
jl loc_1008D9B  +
push edi  +
mov edi ds:GetProcAddress +
push offset aSaferidentifyl  +
push [ebp+hLibModule]  +
call edi  +
mov [ebp+var_98] eax +
cmp eax ebx +
jz loc_1008DA7  +
push offset aSafercomputeto  +
push [ebp+hLibModule]  +
call edi  +
mov [ebp+var_9C] eax +
cmp eax ebx +
jz loc_1008DA7  +
push offset aSafercloseleve  +
push [ebp+hLibModule]  +
call edi  +
mov [ebp+var_90] eax +
cmp eax ebx +
jz loc_1008DA7  +
cmp [esi+27h] bl +
jnz loc_1008DB3  +
push 70h  +
lea eax [ebp+var_74] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp+var_8C] +
mov [ebp+var_6C] eax +
mov eax [ebp+var_94] +
push 40h  +
mov [ebp+var_68] eax +
lea eax [ebp+var_60] +
push ebx  +
push eax  +
mov [ebp+var_74] 70h +
mov [ebp+var_70] 0Dh +
mov [ebp+var_64] ebx +
call memset  +
xor eax eax +
inc eax  +
add esp 18h +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
cmp [esi+28h] eax +
jz loc_1004D60  +
mov [ebp+var_8] 2 +
push offset aScript  +
lea ecx [ebp+var_84] +
push ecx  +
lea ecx [ebp+var_74] +
push ecx  +
push eax  +
call [ebp+var_98]  +
test eax eax +
jz loc_1008DFF  +
push ebx  +
push 1  +
lea eax [ebp+hObject] +
push eax  +
push ebx  +
push [ebp+var_84]  +
call [ebp+var_9C]  +
test eax eax +
jz loc_1008E1B  +
cmp [ebp+hObject] ebx +
jnz loc_1008E58  +
mov [ebp+lpBuffer] ebx +
cmp [ebp+var_88] ebx +
jnz loc_1008E6B  +
pop edi  +
cmp [ebp+hObject] ebx +
jnz loc_1008E7C  +
cmp [ebp+var_84] ebx +
jz loc_1004D3F  +
cmp [ebp+var_90] ebx +
jz loc_1004D3F  +
push [ebp+var_84]  +
call [ebp+var_90]  +
cmp [ebp+hLibModule] ebx +
jz loc_1004D4D  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 4  +
mov [ebp+var_8] eax +
cmp [esi+20h] bl +
jz loc_1004CC6  +
jmp loc_1004CBF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor edi edi +
cmp [ebp+0Ch] edi +
jz loc_1008AF3  +
push ebx  +
push esi  +
push 0FFFFFFFFh  +
push offset aWscript  +
push dword ptr [ebp+0Ch]  +
mov [ebp-8] edi +
xor ebx ebx +
mov [ebp-4] edi +
call sub_1002753  +
test eax eax +
jnz loc_1008AFD  +
test byte ptr [ebp+10h] 2 +
mov eax [ebp+8] +
mov eax [eax+2Ch] +
mov esi [eax+240h] +
jnz loc_1008B16  +
test byte ptr [ebp+10h] 1 +
jz loc_1004E31  +
mov eax [esi] +
push esi  +
mov ebx esi +
call dword ptr [eax+4]  +
or edi 1 +
cmp [ebp+10h] edi +
jnz loc_1008B4D  +
mov eax [ebp+18h] +
xor edi edi +
cmp eax edi +
jnz loc_1008B57  +
mov eax [ebp+14h] +
cmp eax edi +
jz loc_1004E52  +
mov [eax] ebx +
xor ebx ebx +
mov eax [ebp-8] +
test eax eax +
jnz loc_1008B6E  +
mov eax [ebp-4] +
test eax eax +
jnz loc_1008B79  +
test ebx ebx +
jnz loc_1008B84  +
pop esi  +
mov eax edi +
pop ebx  +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SysAllocString  +
mov [esi+2Ch] eax +
test eax eax +
jz loc_10089D5  +
push edi  +
push eax  +
call ds:SysStringLen  +
and dword ptr [esi+28h] 0 +
mov edi eax +
mov eax [esi+2Ch] +
lea ecx [eax+edi*2] +
push ecx  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001923  +
test eax eax +
jl loc_1004EDB  +
mov [esi+40h] edi +
test edi edi +
jz loc_10089DF  +
mov eax [esi] +
push 0  +
lea ecx [esi+44h] +
push ecx  +
dec edi  +
push edi  +
push esi  +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_1004EDB  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
mov eax [ebp+8] +
cmp ecx [eax+40h] +
jnb loc_10089E7  +
mov eax [eax+24h] +
push esi  +
lea ecx [eax+ecx*2] +
xor esi esi +
xor edx edx +
cmp eax ecx +
ja loc_1004F21  +
push edi  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov di [eax] +
inc edx  +
inc eax  +
inc eax  +
cmp di 0Ah +
jz loc_1004F3C  +
cmp eax ecx +
jbe loc_1004F10  +
pop edi  +
mov eax [ebp+10h] +
test eax eax +
jz loc_1004F2A  +
mov [eax] esi +
mov eax [ebp+14h] +
pop esi  +
test eax eax +
jnz loc_10089F1  +
xor eax eax +
pop ebp  +
retn 10h  +
***
xor edx edx +
inc esi  +
jmp loc_1004F1C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push esi  +
mov ebx ecx +
call sub_1001954  +
test eax eax +
jl loc_1004F86  +
cmp edi 1 +
jb loc_1004F84  +
lea eax [esi+edi*2] +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
cmp esi eax +
jnb loc_1004F84  +
mov cx [esi] +
inc esi  +
inc esi  +
cmp cx 0Ah +
jnz loc_1004F70  +
inc dword ptr [ebx+0Ch]  +
jmp loc_1004F70  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_10089F8  +
cmp [ebp+arg_8] edi +
jz loc_10089F8  +
push ebx  +
push esi  +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1005006  +
push edi  +
mov ecx eax +
call sub_1005015  +
mov esi eax +
cmp esi edi +
jz loc_1008A02  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi+30h] eax +
cmp eax edi +
jz loc_1008A0C  +
mov eax [ebp+arg_4] +
cmp eax edi +
jnz loc_1008A16  +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor esi esi +
xor ebx ebx +
test esi esi +
jnz loc_1008A72  +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_1004FC5  +
***
test ebx ebx +
jge loc_1004FEC  +
jmp loc_1004FF5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+1Ch] +
call sub_100506D  +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
call sub_1002882  +
or dword ptr [esi+40h] 0FFFFFFFFh +
xor eax eax +
or dword ptr [esi+44h] 0FFFFFFFFh +
mov dword ptr [edi] offset off_1002640 +
mov [esi+2Ch] eax +
mov [esi+28h] eax +
mov [esi+30h] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
pop edi  +
mov dword ptr [esi] offset off_1001534 +
mov dword ptr [esi+4] offset off_1002648 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1001911  +
and dword ptr [esi+0Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_4] edi +
jz loc_10050CA  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov eax [eax+24h] +
push eax  +
lea ecx [esi+30h] +
call sub_1004F46  +
cmp eax edi +
jl loc_10050F5  +
lea ebx [esi+40h] +
push ebx  +
push [ebp+arg_4]  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_100511B  +
cmp eax edi +
jl loc_10050F5  +
push dword ptr [ebx]  +
mov ecx [ebp+arg_0] +
call sub_1005101  +
cmp [esi+34h] edi +
jz loc_10050F3  +
mov ecx [esi+30h] +
mov eax [esi+28h] +
mov edx [eax] +
push edi  +
push edi  +
push 82h  +
push 1  +
push dword ptr [esi+20h]  +
push edi  +
push edi  +
push edi  +
push ecx  +
push eax  +
call dword ptr [edx+14h]  +
cmp eax edi +
jl loc_1008AC0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+38h] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_100916F  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1009179  +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1009183  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1005183  +
push 0  +
mov ecx eax +
call sub_100518C  +
test eax eax +
jz loc_100918D  +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_C] +
mov [eax+24h] ecx +
add ecx edx +
mov [eax+1Ch] ebx +
mov [eax+20h] edi +
mov [eax+28h] edx +
mov [eax+2Ch] ecx +
mov [esi] eax +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 14h  +
xor eax eax +
jmp loc_1005159  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
mov dword ptr [esi+4] offset off_10051D0 +
call sub_1002882  +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+20h] 0 +
mov dword ptr [edi] offset off_1002660 +
pop edi  +
mov dword ptr [esi] offset off_1001520 +
mov dword ptr [esi+4] offset off_1002668 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
push 54h  +
mov [ebp+var_20] eax +
mov [ebp+var_1C] edi +
mov [ebp+ppv] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1005365  +
push edi  +
mov ecx eax +
call sub_100541A  +
mov esi eax +
cmp esi edi +
jz loc_1008BA8  +
push 1000h  +
lea ecx [esi+30h] +
call sub_10018C4  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebp+arg_4] +
mov [esi+2Ch] eax +
lea eax [ebp+rclsid] +
push eax  +
push ebx  +
call ds:CLSIDFromString  +
mov edi eax +
test edi edi +
jl loc_100533D  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 17h  +
push 0  +
lea eax [ebp+rclsid] +
push eax  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea ebx [esi+24h] +
push ebx  +
push offset dword_1005374  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebp+ppv] +
mov edx [eax] +
lea ecx [esi+28h] +
push ecx  +
push offset dword_1005384  +
push eax  +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebx] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [esi+28h] +
mov ecx [eax] +
push eax  +
mov [ebp+var_1C] 1 +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebx] +
mov ecx [eax] +
push 2  +
push offset aWscript  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebx] +
mov ecx [eax] +
push 2  +
push offset aWsh_0  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebx] +
mov ecx [eax] +
push 5  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_100533D  +
mov eax [ebp+arg_4] +
mov al [eax+23h] +
mov [esi+50h] al +
test al al +
jnz loc_1008BB2  +
inc dword_1017018  +
mov eax dword_1017018 +
mov [esi+20h] eax +
mov eax [ebp+var_20] +
mov [eax] esi +
xor esi esi +
xor edi edi +
mov eax [ebp+ppv] +
test eax eax +
jz loc_100534A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jnz loc_1008BC7  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_1005225  +
***
mov edi eax +
test edi edi +
jl loc_100533D  +
jmp loc_1005326  +
***
lea ecx [edx-8] +
lea eax [edx-0Ch] +
neg eax  +
sbb eax eax +
and eax ecx +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
lea eax [edx-0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1004B64  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_1008ADF  +
call ds:GetUserDefaultLCID  +
cmp eax 0FFFFFFFFh +
jz loc_1008AE9  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_1008B8F  +
mov eax [ebp+8] +
mov eax [eax+28h] +
mov eax [eax+254h] +
test eax eax +
jnz loc_1008B99  +
mov eax 80004001h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1002882  +
lea ecx [esi+30h] +
mov dword ptr [esi] offset off_1001E3C +
mov dword ptr [esi+4] offset off_1002090 +
mov dword ptr [esi+8] offset off_10020AC +
mov dword ptr [edi] offset off_1002088 +
call sub_1005480  +
xor eax eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov [esi+40h] eax +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] eax +
mov [esi+50h] al +
mov [esi+51h] al +
mov [esi+20h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10018B2  +
and dword ptr [esi+0Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_10] +
call sub_10055A4  +
push 2  +
push 8000000h  +
push 3  +
push 1  +
push 80000000h  +
push dword ptr [esi+238h]  +
lea ecx [ebp+var_10] +
call sub_1005539  +
mov edi eax +
test edi edi +
jl loc_10088AC  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push dword ptr [esi+18h]  +
call sub_100574B  +
test eax eax +
jl loc_10088BB  +
xor esi esi +
lea ecx [ebp+var_10] +
call sub_1005503  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
test eax eax +
jz loc_1005517  +
push eax  +
call ds:UnmapViewOfFile  +
mov eax [esi+4] +
mov edi ds:CloseHandle +
test eax eax +
jz loc_1005527  +
push eax  +
call edi  +
mov esi [esi] +
cmp esi 0FFFFFFFFh +
jz loc_1005531  +
push esi  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_C] ecx +
push ebx  +
cmp byte_1017001 bl +
jz loc_10099D1  +
push [ebp+dwFlagsAndAttributes]  +
push [ebp+dwCreationDisposition]  +
push ebx  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpWideCharStr]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_10099E9  +
push [ebp+flProtect]  +
mov ecx [ebp+var_C] +
push eax  +
call sub_10056C1  +
lea esp [ebp-18h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 18h  +
***
mov eax ecx +
or dword ptr [eax] 0FFFFFFFFh +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push esi  +
push 0  +
lea eax [ebp-1] +
push eax  +
call ds:GetSystemDirectoryA  +
mov esi eax +
test esi esi +
jz loc_1008D51  +
mov eax [ebp+arg_0] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10055F3  +
push ebx  +
sub eax ecx +
push edi  +
lea edi [eax+esi+2] +
push edi  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1008D6E  +
inc esi  +
push esi  +
push ebx  +
call ds:GetSystemDirectoryA  +
test eax eax +
jz loc_1008D78  +
sub edi eax +
push offset asc_10055B8  +
lea esi [eax+ebx] +
push edi  +
push esi  +
call sub_1005673  +
push [ebp+arg_0]  +
dec edi  +
push edi  +
inc esi  +
push esi  +
call sub_1005673  +
add esp 18h +
push ebx  +
call ds:LoadLibraryA  +
test eax eax +
jz loc_1008D78  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor esi esi +
test ebx ebx +
jz loc_1005665  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_100781A  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jbe loc_100781A  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jz loc_1007838  +
mov edx ecx +
mov al [esi] +
mov [edx] al +
inc edx  +
inc esi  +
cmp al bl +
jz loc_10056AD  +
dec edi  +
jnz loc_10056A0  +
cmp edi ebx +
jz loc_100783C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hFile] +
push esi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jz loc_1009979  +
push edi  +
xor edi edi +
push edi  +
push eax  +
mov [esi] eax +
call ds:GetFileSize  +
mov [esi+0Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_1009983  +
cmp eax edi +
jz loc_10099A0  +
push ebx  +
mov ebx [ebp+flProtect] +
push edi  +
push eax  +
push edi  +
push ebx  +
push edi  +
push dword ptr [esi]  +
call ds:CreateFileMappingA  +
mov [esi+4] eax +
cmp eax edi +
jz loc_10099B4  +
push 2  +
pop ecx  +
cmp ebx ecx +
jnz loc_100573B  +
push 4  +
pop ecx  +
push edi  +
push edi  +
push edi  +
push ecx  +
push eax  +
call ds:MapViewOfFile  +
mov [esi+8] eax +
cmp eax edi +
jz loc_10099B4  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
cmp ebx 4 +
jnz loc_10099A7  +
jmp loc_100571C  +
***
call sub_10025E6  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10057A1  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100262B  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
and dword ptr [esi] 0 +
cmp [ebp+cchMultiByte] 0 +
push edi  +
jz loc_1008606  +
xor ebx ebx +
inc ebx  +
test byte ptr [ebp+cchMultiByte] bl +
jnz loc_10057F4  +
call sub_100587A  +
test al al +
jz loc_1008680  +
lea eax [ebp+i] +
push eax  +
push [ebp+cchMultiByte]  +
mov [ebp+i] 1EEh +
push [ebp+lpMultiByteStr]  +
call ds:IsTextUnicode  +
mov eax [ebp+i] +
test eax 100h +
jz loc_1008625  +
xor eax eax +
push eax  +
push eax  +
push [ebp+cchMultiByte]  +
xor ebx ebx +
push [ebp+lpMultiByteStr]  +
push eax  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
mov esi eax +
test esi esi +
jz loc_100866F  +
push esi  +
push 0  +
call ds:SysAllocStringLen  +
mov edi eax +
test edi edi +
jz loc_100863B  +
test ebx ebx +
jnz loc_10086DE  +
push esi  +
push edi  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
mov esi eax +
test esi esi +
jz loc_10086C3  +
push 1Ah  +
lea esi [edi+esi*2-2] +
pop eax  +
cmp ax [esi] +
jz loc_1008711  +
mov eax [ebp+arg_C] +
mov [eax] edi +
xor edi edi +
xor esi esi +
test edi edi +
jnz loc_100871C  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_10085FF  +
xor eax eax +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
setz al  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi+8] +
mov eax [eax+240h] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_10059AC  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_10059AC  +
push offset dword_10059D0  +
call ds:SysAllocString  +
mov ecx [ebp-8] +
mov edx [ecx] +
lea esi [ebp+8] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+28h]  +
mov esi eax +
test esi esi +
jl loc_10059AC  +
cmp word ptr [ebp+8] 0 +
jz loc_10059AC  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jl loc_10059AC  +
mov eax [edi+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jl loc_10059AC  +
xor esi esi +
inc esi  +
mov eax [ebp-4] +
test eax eax +
jz loc_10059B9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_10059C6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
cmp [edi+2] cx +
jnz loc_10037B2  +
lea ebx [edi+4] +
cmp [ebx] ax +
jz loc_100796E  +
lea eax [ebp+lpString] +
push eax  +
call sub_1005A5D  +
cmp eax 4Ah +
jle loc_1007977  +
sub eax 53h +
jz loc_1007BB4  +
dec eax  +
jz loc_1007B76  +
dec eax  +
jz loc_1007B60  +
sub eax 3 +
jz loc_1007B4B  +
sub eax 0Bh +
jz loc_1007B08  +
sub eax 9 +
jz loc_1007AE3  +
dec eax  +
dec eax  +
jnz loc_1007C0A  +
cmp [ebp+var_4] al +
jnz loc_1007AD5  +
mov [ebp+var_4] 1 +
mov byte ptr [esi+7] 1 +
mov byte ptr [esi+8] 1 +
mov [esi+6] al +
inc [ebp+var_20]  +
xor eax eax +
jmp loc_10037DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp ax [ebx] +
jz loc_1005AB6  +
push esi  +
push edi  +
mov edi offset off_10173F0 +
cmp off_10173F0 eax +
jz loc_1005ABA  +
push dword ptr [edi]  +
call ds:lstrlenW  +
mov esi eax +
push esi  +
push ebx  +
push dword ptr [edi]  +
call sub_1002753  +
test eax eax +
jz loc_1005A9A  +
add edi 0Ch +
xor ecx ecx +
cmp [edi] ecx +
jnz loc_1005A78  +
jmp loc_1005ABA  +
mov eax [edi+8] +
xor ecx ecx +
sub eax ecx +
jnz loc_10078F6  +
cmp [ebx+esi*2] cx +
jnz loc_1007938  +
mov eax [edi+4] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1005AB4  +
***
lea ebx [edi+2] +
jmp loc_10059EA  +
test eax eax +
jge loc_1005A4E  +
jmp loc_10037EB  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1001EED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_10091B7  +
and dword ptr [esi] 0 +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push 1  +
push dword ptr [eax+28h]  +
call ds:SafeArrayGetUBound  +
test eax eax +
jl loc_1005B26  +
mov eax [ebp+0Ch] +
inc eax  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov eax [ebp+8] +
push dword ptr [ebp+18h]  +
add eax 0Ch +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10017AA  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10091C1  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 8  +
***
mov eax [esi+4] +
test eax eax +
jnz loc_10084A2  +
xor eax eax +
jmp loc_1001E37  +
call sub_100FCE9  +
jmp loc_1005B83  +
and dword ptr [esi] 0 +
jmp loc_1005B83  +
push 0  +
call ds:PostQuitMessage  +
jmp loc_1005B83  +
***
mov eax dword_1017014 +
and dword_1017014 0 +
test eax eax +
jnz loc_10085BA  +
retn   +
***
add ecx 4 +
push ecx  +
call ds:InterlockedCompareExchange  +
sub eax 8004FFFEh +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+254h] +
test eax eax +
jnz loc_1008830  +
add esi 250h +
mov eax [esi] +
test eax eax +
jnz loc_100884E  +
pop esi  +
retn   +
***
mov eax hInstance +
push esi  +
mov esi ds:FreeLibrary +
cmp eax hModule +
jnz loc_10092C6  +
mov eax dword_1017024 +
test eax eax +
jnz loc_1006C0E  +
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
lea ecx [esi-0Ch] +
test ecx ecx +
jz loc_1005C46  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor eax eax +
jmp loc_1001365  +
***
sub ecx 8 +
jmp loc_1005C5C  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005C82  +
test byte ptr [ebp+8] 1 +
jz loc_1005C76  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
call ds:InterlockedDecrement  +
retn   +
***
add ecx 234h +
jmp loc_1005D2B  +
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1007940  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+0Ch] +
push esi  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1005D67  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi] +
jmp loc_1005D61  +
***
sub ecx 8 +
jmp loc_1005D7A  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005DA0  +
test byte ptr [ebp+8] 1 +
jz loc_1005D94  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+8] +
mov dword ptr [ecx] offset off_100139C +
mov dword ptr [ecx+4] offset off_1002254 +
mov ecx [ecx+24h] +
mov dword ptr [esi] offset off_1001494 +
test ecx ecx +
jz loc_1005DC7  +
push ecx  +
call ds:SafeArrayDestroy  +
mov ecx esi +
pop esi  +
jmp sub_1005CC3  +
***
sub ecx 0Ch +
jmp loc_1005DDE  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005E04  +
test byte ptr [ebp+8] 1 +
jz loc_1005DF8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
lea ebx [esi+0Ch] +
push edi  +
mov dword ptr [esi] offset off_1001E68 +
mov dword ptr [esi+4] offset off_1002274 +
mov dword ptr [esi+8] offset off_1002264 +
mov dword ptr [ebx] offset off_1001EBC +
test eax eax +
jz loc_1005E36  +
push eax  +
call ds:SafeArrayDestroy  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1005E43  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+30h] +
test eax eax +
jz loc_1005E50  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi+40h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [esi+44h]  +
call edi  +
push dword ptr [esi+3Ch]  +
call edi  +
lea edi [esi+34h] +
cmp dword ptr [edi] 0 +
jnz loc_10091CB  +
pop edi  +
pop esi  +
mov ecx ebx +
pop ebx  +
jmp sub_1005CC3  +
***
sub ecx 8 +
jmp loc_1005E8A  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005EB0  +
test byte ptr [ebp+8] 1 +
jz loc_1005EA4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
lea ebx [esi+8] +
push edi  +
mov edi ds:SysFreeString +
mov dword ptr [esi] offset off_10013C8 +
mov dword ptr [esi+4] offset off_1002254 +
mov dword ptr [ebx] offset off_10014C0 +
test eax eax +
jz loc_1005EDD  +
push eax  +
call edi  +
mov eax [esi+24h] +
test eax eax +
jz loc_1005EE7  +
push eax  +
call edi  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1005EF1  +
push eax  +
call edi  +
mov eax [esi+30h] +
test eax eax +
jz loc_1005EFE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+34h] +
test eax eax +
jnz loc_10070A7  +
mov eax [esi+38h] +
test eax eax +
jnz loc_10070B2  +
mov esi [esi+3Ch] +
test esi esi +
jnz loc_10070BD  +
pop edi  +
pop esi  +
mov ecx ebx +
pop ebx  +
jmp sub_1005CC3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005F54  +
test [ebp+arg_0] 1 +
jz loc_1005F48  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
mov edi ds:CloseHandle +
test eax eax +
jnz loc_1008559  +
mov ecx esi +
call sub_1005FA8  +
mov eax [esi] +
test eax eax +
jz loc_1005F96  +
push 0  +
push 0  +
push 12h  +
push eax  +
call ds:PostMessageA  +
push 0FFh  +
push 0FFFFFFFFh  +
push 0  +
push dword ptr [esi+10h]  +
call sub_10024CF  +
mov esi [esi+10h] +
test esi esi +
jz loc_1005FA0  +
push esi  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1008490  +
push 0  +
push 0  +
push 402h  +
push eax  +
call ds:SendMessageA  +
mov eax [esi+0Ch] +
test eax eax +
jg loc_1008493  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002230 +
call sub_100600A  +
and dword_1017010 0 +
lea eax [esi+264h] +
cmp byte ptr [eax+19h] 0 +
pop esi  +
jz locret_1006004  +
push eax  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+25Ch] +
mov eax [edi] +
xor ebx ebx +
cmp eax ebx +
jnz loc_1006BC8  +
lea edi [esi+24Ch] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_1006038  +
push 1  +
call sub_1005F2E  +
mov [edi] ebx +
lea edi [esi+240h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100604C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
lea edi [esi+258h] +
mov eax [edi] +
cmp eax ebx +
jnz loc_1007F59  +
lea edi [esi+248h] +
mov ecx [edi] +
cmp ecx ebx +
jnz loc_100629F  +
mov ecx esi +
call sub_1005BDD  +
lea edi [esi+244h] +
mov eax [edi] +
cmp eax ebx +
jnz loc_1006118  +
call sub_1005BA5  +
lea edi [esi+238h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100609D  +
push eax  +
call ds:SysFreeString  +
mov [edi] ebx +
lea edi [esi+23Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_10060B2  +
push eax  +
call ds:SysFreeString  +
mov [edi] ebx +
add esi 260h +
mov ecx [esi] +
cmp ecx ebx +
jz loc_10060CD  +
call sub_10060D6  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
cmp byte ptr [edi+4] 0 +
jz loc_100610F  +
push esi  +
mov esi ds:CoRegisterMessageFilter +
lea eax [ebp+lpMessageFilter] +
push eax  +
push dword ptr [edi+8]  +
call esi  +
test eax eax +
jl loc_10085A3  +
mov eax [ebp+lpMessageFilter] +
test eax eax +
jz loc_100610A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov byte ptr [edi+4] 0 +
pop esi  +
pop edi  +
leave   +
retn   +
***
test eax eax +
jge loc_10060FD  +
jmp loc_100610E  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
jmp loc_1006083  +
***
mov eax [ecx+24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001EA5  +
***
sub ecx 8 +
jmp loc_1006152  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006178  +
test byte ptr [ebp+8] 1 +
jz loc_100616C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+8] +
mov dword ptr [ecx] offset off_1001534 +
mov dword ptr [ecx+4] offset off_1002648 +
mov dword ptr [esi] offset off_1002640 +
call sub_10062B8  +
mov ecx esi +
pop esi  +
jmp sub_1005D07  +
***
sub ecx 0Ch +
jmp loc_10061AD  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10061D3  +
test byte ptr [ebp+8] 1 +
jz loc_10061C7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+44h] +
push edi  +
lea edi [esi+0Ch] +
mov dword ptr [esi] offset off_1001E3C +
mov dword ptr [esi+4] offset off_1002090 +
mov dword ptr [esi+8] offset off_10020AC +
mov dword ptr [edi] offset off_1002088 +
test eax eax +
jnz loc_1008A7D  +
mov eax [esi+48h] +
test eax eax +
jnz loc_1008A88  +
mov eax [esi+4Ch] +
test eax eax +
jnz loc_1008A93  +
mov eax [esi+28h] +
test eax eax +
jz loc_1006224  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+24h] +
test eax eax +
jz loc_1006231  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+40h] +
test eax eax +
jz loc_100623E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+30h] +
call sub_10015A1  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1005D07  +
***
sub ecx 8 +
jmp loc_100625E  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006284  +
test byte ptr [ebp+8] 1 +
jz loc_1006278  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1001520 +
mov dword ptr [ecx+4] offset off_1002668 +
add ecx 8 +
mov dword ptr [ecx] offset off_1002660 +
jmp sub_1005D07  +
***
call sub_10062B8  +
mov eax [edi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
jmp loc_100606C  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:SysFreeString +
mov esi ecx +
push dword ptr [esi+2Ch]  +
call edi  +
push dword ptr [esi+30h]  +
and dword ptr [esi+2Ch] 0 +
call edi  +
mov eax [esi+38h] +
and dword ptr [esi+30h] 0 +
test eax eax +
jz loc_10062E7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+38h] 0 +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_10089BD  +
pop edi  +
pop esi  +
retn   +
***
call sub_10025E6  +
mov [ebp-1Ch] ecx +
lea esi [ecx+18h] +
cmp byte ptr [esi] 0 +
jnz loc_10085D0  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:EnterCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
cmp [esi] al +
setz al  +
call sub_100262B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+24h] +
mov ecx [eax] +
push 2  +
push [ebp+arg_0]  +
push 0FFFFFFFDh  +
push eax  +
call dword ptr [ecx+38h]  +
test eax eax +
jl loc_1006374  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+40h] +
mov edx [ebp+0Ch] +
mov [ecx+1Ch] edx +
mov ecx [eax+40h] +
mov byte ptr [ecx+22h] 1 +
mov ecx [eax+40h] +
push 8004FFFDh  +
call sub_10063B1  +
test eax eax +
jl loc_10063A8  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx [ebp+Value] +
push esi  +
push edi  +
mov esi ecx +
push ebx  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedExchange  +
xor edi edi +
mov [ebp+var_4] ebx +
xor eax eax +
lea ebx [esi+264h] +
mov ecx ebx +
mov [ebp+Value] 80004005h +
mov word ptr [ebp+var_20] ax +
mov word ptr [ebp+var_20+2] ax +
mov [ebp+var_1C] edi +
mov [ebp+var_18] edi +
mov [ebp+var_14] edi +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
call sub_10062FA  +
test eax eax +
jz loc_1008748  +
mov ecx [esi+244h] +
cmp ecx edi +
jz loc_1008752  +
lea eax [ebp+var_20] +
push eax  +
call sub_1006359  +
mov [ebp+Value] eax +
mov ecx ebx +
call sub_1006439  +
mov eax [ebp+Value] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_10025E6  +
mov [ebp-1Ch] ecx +
cmp byte ptr [ecx+18h] 0 +
jnz loc_1006460  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:LeaveCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100262B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push edi  +
mov edi [ebp+0Ch] +
mov eax [edi] +
lea ecx [ebp-50h] +
xor ebx ebx +
push ecx  +
push edi  +
mov [ebp-0Ch] ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
call dword ptr [eax+0Ch]  +
cmp eax ebx +
jl loc_1006509  +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+2Ch] +
call sub_1006531  +
test eax eax +
jz loc_1008BF4  +
mov ecx [ebp-34h] +
cmp ecx 8004FFFCh +
jz loc_100650F  +
cmp ecx 8004FFFDh +
jnz loc_1008BFE  +
xor edi edi +
push dword ptr [ebp-4Ch]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-48h]  +
call esi  +
push dword ptr [ebp-44h]  +
call esi  +
push dword ptr [ebp-4]  +
call esi  +
push dword ptr [ebp-10h]  +
call esi  +
mov eax [ebp-0Ch] +
cmp eax ebx +
jnz loc_1008D46  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
cmp [esi+51h] bl +
jz loc_1008CBD  +
jmp loc_10064DA  +
***
cmp edi 80020006h +
jz loc_10064DA  +
jmp loc_10064DC  +
***
mov edi eax +
cmp edi ebx +
jge loc_10064DA  +
jmp loc_10064DC  +
***
push ecx  +
call ds:InterlockedExchange  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+0Ch] +
call sub_1001D76  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jz loc_1009096  +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
push edi  +
push 4  +
pop ecx  +
mov edi offset riid +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1006B01  +
push 4  +
pop ecx  +
mov edi offset dword_1006600 +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1006B01  +
push 4  +
pop ecx  +
mov edi offset dword_1006610 +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1006AAA  +
push 4  +
mov esi eax +
pop ecx  +
mov edi offset loc_1006620 +
xor eax eax +
cmps   +
jnz loc_1006D38  +
mov eax [ebp+8] +
lea esi [eax+8] +
mov ecx eax +
neg ecx  +
sbb ecx ecx +
and ecx esi +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
or [ecx+ebp] cl +
push es  +
stos   +
dec eax  +
rcl byte ptr [ecx] cl +
test [edx] dh +
add [eax+8] ah +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+14h] +
test edx edx +
jz loc_100908C  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1006684 +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_1006AB5  +
mov eax [ebp+8] +
mov eax [eax+4] +
mov ecx [eax] +
push edx  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
lea edi [ecx+25Ch] +
mov eax [edi] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
mov [ebp+ppv] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_14] ebx +
mov [ebp+ppbc] ebx +
cmp eax ebx +
jnz loc_10090E1  +
mov esi ds:CoCreateInstance +
push edi  +
push offset stru_10069F8  +
push 1  +
push ebx  +
push offset rclsid  +
call esi  +
test eax eax +
jge loc_1006735  +
push edi  +
push offset stru_10069F8  +
push 1  +
push ebx  +
push offset stru_10069C8  +
call esi  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
push 3  +
pop eax  +
mov word ptr [ebp+var_44] ax +
call ds:GetUserDefaultLCID  +
lea edx [ebp+var_44] +
push edx  +
push ebx  +
mov [ebp+var_3C] eax +
mov eax [edi] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
lea eax [ebp+var_18] +
push eax  +
push dword ptr [edi]  +
call sub_1006D49  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
lea eax [ebp+var_1C] +
push eax  +
push dword ptr [edi]  +
push [ebp+var_8]  +
call sub_1006EE4  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [edi] +
push [ebp+var_1C]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1006A28  +
push ebx  +
push 1  +
push offset stru_10069E8  +
call ds:CoGetClassObject  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset loc_1006A08  +
push ebx  +
push [ebp+var_18]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+var_8] +
push 2  +
pop edx  +
cmp [eax+23h] bl +
jnz loc_10090EE  +
mov ecx [eax+28h] +
cmp ecx ebx +
jnz loc_10090F6  +
cmp ecx 1 +
jz loc_10069AA  +
or edx 80h +
cmp [eax+26h] bl +
jz loc_1006815  +
or edx 100h +
cmp [eax+27h] bl +
jnz loc_10090FE  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push offset loc_1006A18  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+var_10] +
mov ecx [eax] +
push 2  +
push offset aWscript  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+var_10] +
mov ecx [eax] +
push 2  +
push offset aWsh_0  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push offset dword_1006A38  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
lea eax [ebp+ppbc] +
push eax  +
push ebx  +
call ds:CreateBindCtx  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+ppbc] +
lea edx [ebp+var_34] +
push edx  +
mov [ebp+var_34] 10h +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
mov eax [ebp+var_14] +
mov ecx [eax] +
push ebx  +
push [ebp+ppbc]  +
push [ebp+arg_0]  +
push 1  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1009109  +
mov eax [ebp+var_8] +
cmp [eax+21h] bl +
jnz loc_1009124  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_24] +
push edx  +
push offset riid  +
push ebx  +
push dword ptr [edi]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_1009137  +
xor esi esi +
mov eax [ebp+ppbc] +
cmp eax ebx +
jz loc_1006929  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_14] +
cmp eax ebx +
jz loc_1006936  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_24] +
cmp eax ebx +
jz loc_1006943  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1006950  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_10] +
cmp eax ebx +
jz loc_100695D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_100696A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_1C] +
cmp eax ebx +
jz loc_1006977  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1006984  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi [ebp+var_8] +
mov ecx [edi+24Ch] +
call sub_1005FA8  +
mov ecx edi +
call sub_1005BBF  +
test eax eax +
jnz loc_1009163  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp [eax+20h] bl +
jnz loc_1006804  +
jmp loc_100680A  +
***
mov esi eax +
cmp esi ebx +
jl loc_100691C  +
jmp loc_10068F8  +
***
jmp locret_1006A15  +
sub [esi] eax +
stos   +
dec eax  +
rcl byte ptr [ecx] cl +
test [edx] dh +
add [eax+8] ah +
retn   +
***
sti   +
cld   +
or [ecx+ebp] ecx +
push es  +
stos   +
dec eax  +
rcl byte ptr [ecx] cl +
test [edx] dh +
add [eax+8] ah +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1006C16  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1006C6B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006A78  +
***
mov eax [ebp+8] +
lea esi [eax+4] +
jmp loc_10065E4  +
***
and [edx] eax +
mov eax 80004002h +
jmp loc_100667D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx+258h] +
mov eax [esi] +
test eax eax +
jz loc_1006ADE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop esi  +
test eax eax +
jz loc_1006AEE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1006A78  +
***
mov eax [ebp+8] +
mov [edx] eax +
jmp loc_10065EE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
dec eax  +
push esi  +
jz loc_10090AA  +
dec eax  +
jnz loc_10090A0  +
mov esi [ebp+14h] +
test esi esi +
jz loc_1006B81  +
push 8  +
pop eax  +
cmp ax [esi] +
jnz loc_1006B81  +
push 0FFFFFFFFh  +
push offset aWscript  +
push dword ptr [esi+8]  +
call sub_1002753  +
test eax eax +
jz loc_1006B5C  +
push 0FFFFFFFFh  +
push offset aWsh_0  +
push dword ptr [esi+8]  +
call sub_1002753  +
test eax eax +
jnz loc_1006B81  +
mov ecx [ebp+18h] +
push 9  +
pop eax  +
mov [ecx] ax +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov eax [eax+240h] +
mov [ecx+8] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov eax 80004005h +
jmp loc_1006B7C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push offset dword_1001638  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10090C3  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
mov ecx [eax+8] +
call sub_1006AC6  +
mov eax [ebp+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
jmp loc_1006023  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100205E  +
cmp edi 8004FFFFh +
jnz loc_1008994  +
jmp loc_1002050  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+8] +
push 0  +
call sub_1006AC6  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
push eax  +
call esi  +
jmp loc_1005C2C  +
***
test esi esi +
jz loc_1006A6B  +
push 1  +
mov ecx esi +
call sub_1006C31  +
jmp loc_1006A6B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006C57  +
test [ebp+arg_0] 1 +
jz loc_1006C4B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1006630 +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1006C6A  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
test esi esi +
jz loc_1006A96  +
push 1  +
mov ecx esi +
call sub_1006C86  +
jmp loc_1006A96  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002820 +
mov dword ptr [esi+4] offset off_1006544 +
mov dword ptr [esi+8] offset off_1006694 +
jz loc_1006CAF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jz loc_1009082  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset riid +
xor eax eax +
cmps   +
jz loc_1006D0A  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1006D28 +
xor eax eax +
cmps   +
jnz loc_1006D1D  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
and [edx] eax +
mov eax 80004002h +
jmp loc_1006D17  +
***
and [edx] eax +
mov eax 80004002h +
jmp loc_10065F6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1006D8E  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1006630 +
mov dword ptr [eax+8] 1 +
mov esi eax +
test esi esi +
jz loc_10090CD  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
xor esi esi +
jmp loc_1006D6E  +
***
jle loc_1003454  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1003454  +
***
cmp edi 8004FFFFh +
jz loc_1002048  +
push 2Eh  +
push dword ptr [esi+238h]  +
call sub_1003D0D  +
mov edi eax +
test edi edi +
jz loc_100896C  +
push 0FFFFFFFFh  +
push offset a_wsf  +
push edi  +
call sub_1002753  +
test eax eax +
jnz loc_1008979  +
mov eax [ebp+var_218] +
test eax eax +
jnz loc_100895B  +
lea eax [ebp+ppmk] +
push eax  +
push dword ptr [esi+238h]  +
push 0  +
call sub_1006E33  +
mov edi eax +
test edi edi +
jl loc_1006BE0  +
push [ebp+var_21C]  +
mov ecx esi +
push [ebp+ppmk]  +
call sub_10066C9  +
jmp loc_100203C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_10174A4 0 +
jnz loc_1007E7E  +
push [ebp+ppmk]  +
push [ebp+lpszPathName]  +
push [ebp+arg_0]  +
call sub_1006E64  +
test eax eax +
jl loc_1007E7E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101700C +
test eax eax +
jnz loc_1006EAC  +
mov eax dword_1017024 +
test eax eax +
jnz loc_1006E93  +
push offset aUrlmon_dll  +
call ds:LoadLibraryA  +
mov dword_1017024 eax +
test eax eax +
jz loc_1007E5A  +
push offset aCreateurlmonik  +
push eax  +
call ds:GetProcAddress  +
mov dword_101700C eax +
test eax eax +
jz loc_1007E5A  +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1006F1B  +
mov ecx eax +
call sub_1006F24  +
test eax eax +
jz loc_10090D7  +
mov ecx [ebp+arg_0] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1006EFC  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1002820 +
mov dword ptr [eax+4] offset off_1006544 +
mov dword ptr [eax+8] offset off_1006694 +
mov dword ptr [eax+0Ch] 1 +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
xor esi esi +
cmp [ebp+0Ch] esi +
jl loc_1008F0D  +
push ebx  +
mov ebx ds:GetTickCount +
call ebx  +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
test eax eax +
jl loc_1008F17  +
fst  qword ptr [ebp-10h] +
fild  dword ptr [ebp+0Ch] +
fadd st st(1) +
fstp  qword ptr [ebp-8] +
fld  st +
fld  qword ptr [ebp-8] +
fcomp  st(2) +
fnstsw  ax +
fstp  st(1) +
test ah 41h +
jnz loc_100700A  +
fsubr  qword ptr [ebp-8] +
call sub_1007019  +
cmp eax 3E8h +
ja loc_100709D  +
push 1FFh  +
push eax  +
push 1  +
push esi  +
push esi  +
call ds:MsgWaitForMultipleObjects  +
push 1  +
push esi  +
push esi  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call ds:PeekMessageA  +
test eax eax +
jnz loc_1008F22  +
mov eax [ebp+8] +
mov ecx [eax+40h] +
call sub_1001D76  +
test eax eax +
jnz loc_100700C  +
call ebx  +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
test eax eax +
jl loc_1008F31  +
fld  qword ptr [ebp-10h] +
fcomp  st(1) +
fnstsw  ax +
test ah 41h +
jz loc_1008F3C  +
fld  qword ptr [ebp-8] +
fcomp  st(1) +
fnstsw  ax +
jmp loc_1006F93  +
***
fstp  st +
xor eax eax +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov eax eax +
push ebp  +
mov ebp esp +
sub esp 20h +
and esp 0FFFFFFF0h +
fld  st +
fst  [esp+20h+var_8] +
fistp  [esp+20h+var_10] +
fild  [esp+20h+var_10] +
mov edx [esp+20h+var_8] +
mov eax dword ptr [esp+20h+var_10] +
test eax eax +
jz loc_10078D9  +
fsubp st(1) st +
test edx edx +
js loc_10078B8  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
add ecx 7FFFFFFFh +
sbb eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
sbb edx 0 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_1008ED8  +
mov eax [ebp+8] +
mov eax [eax+40h] +
push dword ptr [eax+238h]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jz loc_1008EE2  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax 3E8h +
jmp loc_1006FAB  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005F09  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005F14  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1005F1F  +
***
lea ecx [eax+1] +
cmp ecx eax +
jb loc_1007715  +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_218] eax +
test eax eax +
jz loc_1007724  +
mov [ebp+lpBuffer] eax +
mov eax [ebp+var_21C] +
jmp loc_1001BB2  +
push [ebp+var_218]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1001C11  +
call ds:GetLastError  +
jmp loc_1007733  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_1008EBA  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jz loc_1008EC4  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1008EEC  +
mov eax [ebp+8] +
mov eax [eax+40h] +
push esi  +
mov esi [eax+238h] +
push 5Ch  +
push esi  +
call sub_1003D0D  +
test eax eax +
jz loc_1008EF6  +
lea esi [eax+2] +
push esi  +
call ds:SysAllocString  +
mov [edi] eax +
pop esi  +
test eax eax +
jz loc_1008F03  +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
test eax eax +
jnz loc_100717B  +
jmp loc_100717E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jz loc_1008F74  +
push esi  +
mov esi [ebp+8] +
add esi 3Ch +
mov [eax] ebx +
push edi  +
cmp [esi] ebx +
jnz loc_100722B  +
lea eax [ebp-4] +
push eax  +
push offset loc_10074A4  +
push 1  +
push ebx  +
push offset loc_10073E8  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_1007245  +
cmp byte_1017001 bl +
jz loc_1007209  +
mov eax [ebp+8] +
mov eax [eax+40h] +
cmp [eax+25h] bl +
jnz loc_1007240  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push eax  +
call sub_10019AE  +
test al al +
jnz loc_1007240  +
push esi  +
push ebx  +
mov eax [ebp-4] +
mov ecx [eax] +
push 2  +
push eax  +
call dword ptr [ecx+80h]  +
mov edi eax +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jl loc_1007245  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
mov [eax] ecx +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push esi  +
push 1  +
jmp loc_100720B  +
***
mov eax edi +
jmp loc_1007239  +
***
inc [ebp+var_8]  +
jmp loc_100497A  +
xor ebx ebx +
jmp loc_1004956  +
mov [ebp+var_10] 2 +
jmp loc_10072BF  +
mov edi 8007000Eh +
jmp loc_10049DA  +
mov ecx [ebp+arg_4] +
mov eax [ecx+eax*4] +
push 2Fh  +
pop ecx  +
cmp cx [eax] +
jnz loc_1007336  +
lea ecx [eax+2] +
mov esi ecx +
mov [ebp+var_C] edi +
mov [ebp+var_10] edi +
movzx eax word ptr [esi] +
xor edx edx +
cmp dx ax +
jz loc_10072BF  +
push 3Ah  +
pop edx  +
cmp dx ax +
jz loc_10091E9  +
lea edx [esi+2] +
xor edi edi +
cmp di [edx] +
jnz loc_10072B8  +
push 2Bh  +
pop edi  +
cmp di ax +
jz loc_1007258  +
push 2Dh  +
pop edi  +
cmp di ax +
jz loc_1007258  +
inc [ebp+var_C]  +
mov esi edx +
jmp loc_1007288  +
push 8  +
pop eax  +
push [ebp+var_C]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push ecx  +
call ds:SysAllocStringLen  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_1007261  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [ebx+24h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_10049DA  +
mov eax [ebp+var_10] +
sub eax 0 +
jnz loc_10091F7  +
xor eax eax +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [ebx+28h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_10049DA  +
inc [ebp+rgIndices]  +
mov eax [ebp+var_14] +
inc eax  +
xor edi edi +
cmp eax [ebp+arg_0] +
mov [ebp+var_14] eax +
jge loc_10049D3  +
jmp loc_10049C7  +
***
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_10073E1  +
cmp byte_1017001 bl +
jz loc_10073AB  +
mov eax [ebp+8] +
mov eax [eax+40h] +
cmp [eax+25h] bl +
jnz loc_1008F62  +
push esi  +
push ebx  +
mov eax [ebp-4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+80h]  +
mov edi eax +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jl loc_10073E1  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
mov [eax] ecx +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax edi +
jmp loc_10073DA  +
***
push 1  +
push ebx  +
push offset loc_10073E8  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_10074A0  +
cmp byte_1017001 bl +
jz loc_1007464  +
mov eax [ebp+8] +
mov eax [eax+40h] +
cmp [eax+25h] bl +
jnz loc_100749B  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push eax  +
call sub_10019AE  +
test al al +
jnz loc_100749B  +
push esi  +
push ebx  +
mov eax [ebp-4] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+80h]  +
mov edi eax +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jl loc_10074A0  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
mov [eax] ecx +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push esi  +
push 1  +
jmp loc_1007466  +
***
mov eax edi +
jmp loc_1007494  +
***
push edi  +
mov ecx [esp+arg_0] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
or eax eax +
mov ebx offset unk_10174B0 +
retn   +
***
mov esi offset word_1009AD4 +
jmp loc_1001A51  +
call esi  +
cmp eax 6 +
jnz loc_10076F4  +
test ebx ebx +
jbe loc_1001C11  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
lea eax [ebx+ebx] +
push eax  +
push edi  +
push [ebp+Mode]  +
call ds:WriteFile  +
test eax eax +
jz loc_10076F2  +
shr [ebp+NumberOfBytesWritten] 1 +
mov eax [ebp+NumberOfBytesWritten] +
sub ebx eax +
lea edi [edi+eax*2] +
jz loc_1002E2B  +
jmp loc_10076BB  +
call esi  +
test eax eax +
jle loc_1007702  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_208] eax +
jmp loc_1001C11  +
call ds:GetLastError  +
jmp loc_10076F4  +
mov [ebp+var_208] 8007000Eh +
jmp loc_1001C11  +
mov [ebp+var_208] 8007000Eh +
jmp loc_1001C04  +
test eax eax +
jle loc_1007741  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_208] eax +
jmp loc_1001C04  +
***
push dword ptr [ebp+0Ch]  +
lea eax [ebp-0Ch] +
push eax  +
call sub_1003A91  +
test eax eax +
jz loc_1002C81  +
push dword ptr [ebp-8]  +
mov esi ds:SysStringLen +
call esi  +
push dword ptr [ebp-0Ch]  +
mov edi eax +
call esi  +
lea esi [edi+eax] +
mov edi offset asc_10077B4 +
push edi  +
call ds:lstrlenW  +
lea esi [eax+esi+1] +
lea eax [esi+esi] +
call sub_100320B  +
mov ebx esp +
push dword ptr [ebp-0Ch]  +
push esi  +
push ebx  +
call sub_10031BD  +
push edi  +
push esi  +
push ebx  +
call sub_10036CD  +
push dword ptr [ebp-8]  +
push esi  +
push ebx  +
call sub_10036CD  +
add esp 24h +
jmp loc_1002C84  +
***
pop ebp  +
retn 4  +
***
call eax  +
jmp loc_1003124  +
***
push 1  +
jmp loc_1002166  +
call ds:GetCommandLineA  +
mov esi ds:MultiByteToWideChar +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push eax  +
push ebx  +
push ebx  +
mov [ebp-0Ch] eax +
call esi  +
mov edi eax +
lea eax [edi+edi] +
call sub_100320B  +
mov [ebp-8] esp +
push edi  +
push dword ptr [ebp-8]  +
push 0FFFFFFFFh  +
push dword ptr [ebp-0Ch]  +
push ebx  +
push ebx  +
call esi  +
mov edi [ebp-8] +
jmp loc_1002136  +
***
test eax ebx +
jz loc_1002FCA  +
not eax  +
mov dword_1017008 eax +
jmp loc_1003020  +
***
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_100CDEE  +
add esp 14h +
mov eax esi +
jmp loc_10056B7  +
mov [ecx] bl +
jmp loc_100781A  +
mov [ecx] bl +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1007824  +
***
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_100CDEE  +
add esp 14h +
mov eax esi +
jmp loc_1003728  +
xor eax eax +
mov [edx] ax +
jmp loc_100784C  +
mov [edx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1007856  +
***
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_100CDEE  +
add esp 14h +
mov eax esi +
jmp loc_1003206  +
xor eax eax +
mov [edx] ax +
jmp loc_1007882  +
mov [edx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_100788C  +
***
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
xor ecx 80000000h +
add ecx 7FFFFFFFh +
adc eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
adc edx 0 +
jmp locret_1007062  +
mov edx dword ptr [esp+20h+var_10+4] +
test edx 7FFFFFFFh +
jnz loc_1007042  +
fstp  [esp+20h+var_8] +
fstp  [esp+20h+var_8] +
jmp locret_1007062  +
***
dec eax  +
jnz loc_1005ABA  +
movzx eax word ptr [ebx+esi*2] +
cmp ax 3Ah +
jnz loc_1007913  +
cmp [ebx+esi*2+2] cx +
jnz loc_1007920  +
cmp ax ax +
jz loc_100792E  +
cmp ax cx +
jz loc_100792E  +
add edi 0Ch +
jmp loc_1005A94  +
mov ecx [ebp+arg_0] +
lea eax [ebx+esi*2+2] +
mov [ecx] eax +
jmp loc_1005AB1  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1005AB1  +
push 3Ah  +
pop eax  +
jmp loc_1005AB4  +
***
push edi  +
xor edi edi +
cmp [esi+4] edi +
jle loc_1007960  +
mov eax [esi] +
lea eax [eax+edi*4] +
cmp dword ptr [eax] 0 +
jz loc_100795A  +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
pop ecx  +
inc edi  +
cmp edi [esi+4] +
jl loc_1007948  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
jmp loc_1005D39  +
***
jmp loc_1007C2F  +
***
jmp loc_1007C2F  +
***
push 0  +
push 0CF1h  +
jmp loc_1007C2F  +
push eax  +
push 0CE9h  +
jmp loc_1007C2F  +
push 0  +
push 0CF5h  +
jmp loc_1007C2F  +
push edi  +
push 0CE6h  +
jmp loc_1007C2F  +
push 0CF3h  +
jmp loc_1007C2F  +
push edi  +
push 0CF4h  +
jmp loc_1007C2F  +
push 0  +
push 0CF6h  +
jmp loc_1007C2F  +
push 0CE4h  +
mov ecx esi +
call sub_100EF6D  +
jmp loc_10037EB  +
push edi  +
push 0CE5h  +
jmp loc_1007C2F  +
***
xor eax eax +
jmp loc_1003CF2  +
push ebx  +
push 0CEFh  +
jmp loc_1007D34  +
push ebx  +
lea eax [ebp+WideCharStr] +
push edi  +
push eax  +
call sub_10031BD  +
add esp 0Ch +
lea eax [ebp+WideCharStr] +
push eax  +
mov ecx esi +
call sub_100F1F1  +
mov edi eax +
test edi edi +
jge loc_1007D0E  +
cmp byte ptr [esi+6] 0 +
jz loc_1007CAC  +
mov ecx dword_1017010 +
mov eax [ecx] +
call dword ptr [eax+8]  +
cmp edi 80070002h +
jnz loc_1007CC2  +
lea edx [ebp+WideCharStr] +
push edx  +
push 0CEEh  +
jmp loc_1007D34  +
and [ebp+var_210] 0 +
lea eax [ebp+var_210] +
push eax  +
push edi  +
call sub_100F3F8  +
push [ebp+var_210]  +
mov eax dword_1017010 +
mov ecx [eax] +
lea edx [ebp+WideCharStr] +
push edx  +
mov edx dword_101702C +
push 0C84h  +
add edx 14h +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
add esp 14h +
push [ebp+var_210]  +
call ds:SysFreeString  +
jmp loc_1007D4C  +
cmp edi 1 +
jnz loc_1003CEF  +
cmp byte ptr [esi+6] 0 +
jz loc_1007D28  +
mov ecx dword_1017010 +
mov eax [ecx] +
call dword ptr [eax+8]  +
lea edx [ebp+WideCharStr] +
push edx  +
push 0D48h  +
mov edx dword_101702C +
mov eax dword_1017010 +
mov ecx [eax] +
add edx 15h +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
add esp 10h +
mov eax 8004FFFFh +
jmp loc_1003CF1  +
***
mov eax dword ptr [ebp+Data] +
test eax eax +
setnz cl  +
mov [esi+4] cl +
mov [esi] eax +
test eax eax +
jz loc_1003D8B  +
jmp loc_1003D8E  +
***
cmp [ebp+arg_8] 2 +
jb loc_1003C57  +
push 2Eh  +
pop eax  +
mov [edi] ax +
xor eax eax +
mov [edi+2] ax +
jmp loc_1003C57  +
xor eax eax +
inc eax  +
jmp loc_1003C3B  +
***
call ds:GetLastError  +
cmp eax ebx +
jle loc_1007DA7  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_8] eax +
jmp loc_1002D1B  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1007D93  +
call sub_100320B  +
mov [ebp+lpSource] esp +
cmp esp ebx +
jz loc_1007E44  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSource]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1007D93  +
push [ebp+Arguments]  +
lea eax [ebp+CodePage] +
push ebx  +
push eax  +
push ebx  +
push ebx  +
push [ebp+lpSource]  +
push 500h  +
call ds:FormatMessageA  +
test eax eax +
jz loc_1007D93  +
mov esi ds:MultiByteToWideChar +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+CodePage]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1007D93  +
lea eax [edi+edi] +
push eax  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_1007D93  +
push edi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+CodePage]  +
push ebx  +
push ebx  +
call esi  +
jmp loc_1002CFD  +
mov [ebp+var_8] 8007000Eh +
jmp loc_1002D1B  +
push [ebp+CodePage]  +
call esi  +
jmp loc_1002D2A  +
***
mov byte_10174A4 1 +
call ds:GetLastError  +
test eax eax +
jle loc_1006EB9  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1006EB9  +
***
mov esp [ebp-18h] +
mov esi [ebp-1Ch] +
mov byte ptr [esi+18h] 1 +
jmp loc_10035EB  +
***
cmp eax ebx +
jle loc_10044AD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10044AD  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_10044C1  +
call sub_100320B  +
mov [ebp+lptstrFilename] esp +
cmp esp ebx +
jnz loc_1007EEC  +
mov eax 8007000Eh +
jmp loc_10044AD  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lptstrFilename]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10044C1  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoSizeA  +
mov esi eax +
cmp esi ebx +
jz loc_10044C1  +
call sub_100320B  +
mov edi esp +
push edi  +
push esi  +
push [ebp+dwHandle]  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoA  +
test eax eax +
jz loc_10044C1  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset asc_10055B8  +
push edi  +
call VerQueryValueA  +
jmp loc_1004494  +
***
xor eax eax +
inc eax  +
pop ebx  +
retn   +
xor eax eax +
jmp loc_100383E  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
jmp loc_100605C  +
***
lea ecx [ebp+var_34C] +
call sub_1005D1E  +
xor eax eax +
inc eax  +
jmp loc_10024BA  +
lea ecx [ebp+var_34C] +
call sub_1005D1E  +
xor eax eax +
inc eax  +
jmp loc_10024B9  +
mov ebx 105h +
push ebx  +
lea eax [ebp+MultiByteStr] +
push eax  +
push hModule  +
mov [ebp+var_8] 0 +
call ds:GetModuleFileNameA  +
test eax eax +
jz loc_1007F79  +
cmp [ebp+var_8] 0 +
jnz loc_1007F79  +
push ebx  +
lea edi [esi+2Ch] +
push edi  +
push 0FFFFFFFFh  +
lea eax [ebp+MultiByteStr] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_1007F79  +
jmp loc_100233E  +
push eax  +
push 0C80h  +
mov eax dword_101702C +
mov edx [esi] +
add eax 14h +
push eax  +
call dword ptr [edx]  +
xor esi esi +
inc esi  +
jmp loc_10024AC  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov esi eax +
jmp loc_10024AC  +
push eax  +
push 0C85h  +
mov ecx esi +
jmp loc_1007FDA  +
cmp eax 8004FFFFh +
jz loc_1007FE7  +
push eax  +
push 0C87h  +
jmp loc_1008003  +
cmp [ebp+var_336] 0 +
jz loc_1002403  +
mov byte ptr [esi+23h] 1 +
jmp loc_1002403  +
mov byte ptr [esi+20h] 1 +
jmp loc_100240E  +
test al al +
jnz loc_1008052  +
mov [esi+20h] al +
cmp [ebp+var_346] al +
jz loc_100804B  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
xor esi esi +
jmp loc_10024AC  +
lea ecx [ebp+var_570] +
call sub_10043C9  +
push edi  +
lea ecx [ebp+var_570] +
call sub_100F06E  +
cmp eax ebx +
jl loc_1008083  +
push [ebp+var_558]  +
call sub_100FA2A  +
cmp eax ebx +
jge loc_100809D  +
push 0C83h  +
mov eax dword_101702C +
add eax 14h +
push eax  +
mov ecx esi +
call sub_100F34A  +
jmp loc_1007FE7  +
mov eax [esi] +
push 0BEAh  +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
add esp 0Ch +
jmp loc_1008052  +
push edi  +
lea ecx [ebp+var_34C] +
call sub_100F06E  +
test eax eax +
jl loc_1008083  +
mov eax [esi] +
push 0BEBh  +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
add esp 0Ch +
mov al 1 +
jmp loc_1002446  +
push [ebp+var_334]  +
call sub_100FA2A  +
test eax eax +
jge loc_10080EA  +
push 0C82h  +
jmp loc_1008088  +
cmp [ebp+var_128] ebx +
jnz loc_100811E  +
cmp [ebp+var_334] 43h +
jz loc_100810F  +
cmp [ebp+var_334] 57h +
jnz loc_1007FE7  +
push 0BECh  +
jmp loc_1008114  +
push 0BEDh  +
mov eax [esi] +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
add esp 0Ch +
mov al 1 +
jmp loc_1002453  +
test al al +
jnz loc_1008052  +
mov eax dword_101702C +
push 0CE8h  +
add eax 15h +
jmp loc_1008090  +
cmp byte ptr [esi+22h] 0 +
jnz loc_100814C  +
mov dword ptr [esi+1Ch] 1 +
cmp eax 8004FFFFh +
jz loc_10024A9  +
mov edx [esi] +
push eax  +
mov eax dword_101702C +
push 0C87h  +
add eax 14h +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_10024A9  +
xor edi edi +
cmp [ebp+var_114] ebx +
jle loc_10024A9  +
push [ebp+var_574]  +
mov eax [ebp+var_118] +
mov eax [eax+edi*4] +
push eax  +
push [ebp+var_11C]  +
mov eax [ebp+var_124] +
add eax 4 +
push eax  +
mov eax [ebp+var_128] +
dec eax  +
push eax  +
lea eax [ebp+var_330] +
push eax  +
mov ecx esi +
call sub_1001F26  +
cmp eax ebx +
jge loc_10081E2  +
cmp byte ptr [esi+22h] 0 +
jnz loc_10081C6  +
mov dword ptr [esi+1Ch] 1 +
cmp eax 8004FFFFh +
jz loc_10081E2  +
mov edx [esi] +
push eax  +
mov eax dword_101702C +
push 0C87h  +
add eax 14h +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
inc edi  +
cmp edi [ebp+var_114] +
jge loc_10024A9  +
jmp loc_100817F  +
***
mov al byte ptr [ebp+var_2] +
jmp loc_10032B4  +
***
push 1  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aLogsecurityfai  +
call sub_1003249  +
test al al +
jz loc_100391C  +
mov [ebp+dwEventID] 0C0FF03E8h +
mov dword ptr [ebp+wType] 10h +
jmp loc_1008243  +
mov [ebp+dwEventID] 0FF03E9h +
mov dword ptr [ebp+wType] 8 +
push offset SourceName  +
push ebx  +
call ds:RegisterEventSourceW  +
mov edi eax +
cmp edi ebx +
jz loc_100391C  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+AccountName] +
push eax  +
call ds:GetUserNameW  +
test eax eax +
jz loc_100831B  +
mov esi ds:LookupAccountNameW +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+cbReferencedDomainName] +
push eax  +
push ebx  +
lea eax [ebp+cbSid] +
push eax  +
push ebx  +
lea eax [ebp+AccountName] +
push eax  +
push ebx  +
call esi  +
cmp [ebp+cbSid] ebx +
jbe loc_100831B  +
cmp [ebp+cbReferencedDomainName] ebx +
jbe loc_100831B  +
push [ebp+cbSid]  +
call ??2@YAPAXI@Z  +
mov [ebp+lpUserSid] eax +
mov eax [ebp+cbReferencedDomainName] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop ecx  +
lea ecx [ebp+peUse] +
push ecx  +
lea ecx [ebp+cbReferencedDomainName] +
push ecx  +
push eax  +
mov [ebp+var_224] eax +
lea eax [ebp+cbSid] +
push eax  +
push [ebp+lpUserSid]  +
lea eax [ebp+AccountName] +
push eax  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100831B  +
push [ebp+lpUserSid]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebp+lpUserSid] ebx +
push [ebp+uID]  +
lea eax [ebp+var_220] +
push eax  +
call sub_1003A91  +
mov eax [ebp+var_220] +
cmp eax ebx +
jnz loc_100833E  +
mov [ebp+Strings] ebx +
xor eax eax +
jmp loc_100834D  +
mov [ebp+Strings] eax +
xor eax eax +
mov [ebp+var_234] ebx +
inc eax  +
push ebx  +
lea ecx [ebp+Strings] +
push ecx  +
push ebx  +
push eax  +
push [ebp+lpUserSid]  +
push [ebp+dwEventID]  +
push ebx  +
push dword ptr [ebp+wType]  +
push edi  +
call ds:ReportEventW  +
push edi  +
call ds:DeregisterEventSource  +
cmp [ebp+lpUserSid] ebx +
jz loc_100838C  +
push [ebp+lpUserSid]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+var_224] ebx +
jz loc_100391C  +
push [ebp+var_224]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100391C  +
***
mov eax dword_101702C +
mov ecx dword_1017010 +
push 0C88h  +
add eax 14h +
push eax  +
call sub_100F34A  +
jmp loc_10033C4  +
push 0C89h  +
push 1  +
jmp loc_10033F0  +
***
mov byte ptr [ebp+var_3+2] 1 +
jmp loc_100407F  +
mov byte ptr [ebp+var_3+1] 1 +
jmp loc_1004094  +
mov byte ptr [ebp+var_3+2] 1 +
jmp loc_10040B3  +
mov eax dword ptr [ebp+Data] +
cmp eax [ecx+28h] +
jle loc_10040DE  +
mov [ecx+28h] eax +
jmp loc_10040DE  +
***
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push 1  +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_1008455  +
push [ebp+dwWakeMask]  +
lea eax [ebp+pHandles] +
push [ebp+dwMilliseconds]  +
push [ebp+fWaitAll]  +
push eax  +
push 1  +
call esi  +
jmp loc_100250A  +
***
inc eax  +
pop esi  +
retn   +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1005FD2  +
***
push eax  +
push dword ptr [esi]  +
call ds:KillTimer  +
test eax eax +
jnz loc_10084BD  +
call ds:GetLastError  +
mov [esi+0Ch] eax +
jmp loc_1005B83  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
jmp loc_1005B83  +
mov eax [esi+4] +
push edi  +
mov edi ds:GetLastError +
test eax eax +
jz loc_10084F0  +
push eax  +
push dword ptr [esi]  +
call ds:KillTimer  +
test eax eax +
jnz loc_10084EC  +
call edi  +
mov [esi+0Ch] eax +
jmp loc_10084F0  +
and dword ptr [esi+0Ch] 0 +
cmp [ebp+wParam] 1 +
jb loc_1008521  +
mov eax [ebp+wParam] +
imul eax eax +
push 0  +
push eax  +
push 19771215h  +
push dword ptr [esi]  +
call ds:SetTimer  +
mov [esi+4] eax +
test eax eax +
jnz loc_100851D  +
call edi  +
mov [esi+0Ch] eax +
jmp loc_1008521  +
and dword ptr [esi+0Ch] 0 +
pop edi  +
jmp loc_1001E26  +
cmp [ebp+lParam] 0 +
jnz loc_100853A  +
mov ecx [esi+8] +
push 8004FFFCh  +
call sub_10063B1  +
xor eax eax +
inc eax  +
jmp loc_1001E37  +
***
push dword ptr [esi+1Ch]  +
call ds:SetEvent  +
call ds:GetLastError  +
mov [esi+0Ch] eax +
jmp loc_10025D7  +
***
push eax  +
call edi  +
jmp loc_1005F6B  +
***
mov edi 8007000Eh +
jmp loc_10045E0  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100857F  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_10045D8  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10045C9  +
push 1  +
mov ecx esi +
call sub_1005F2E  +
jmp loc_10045E0  +
***
lea eax [ebp+lpMessageFilter] +
push eax  +
push 0  +
call esi  +
jmp loc_1006112  +
***
mov eax 8007000Eh +
jmp loc_1004644  +
***
push esi  +
mov ecx [eax] +
mov esi [eax+18h] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
test esi esi +
jnz loc_10085BB  +
pop esi  +
jmp locret_1005BB9  +
***
mov esp [ebp-18h] +
mov esp [ebp-18h] +
mov eax [ebp-1Ch] +
mov byte ptr [eax+18h] 1 +
jmp loc_1006459  +
***
xor al al +
jmp loc_10058BA  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
jmp loc_1005773  +
***
mov eax 80004005h +
jmp loc_100642D  +
lea eax [esi+25Ch] +
cmp [eax] edi +
jz loc_1006423  +
mov eax [eax] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_1006420  +
***
push edi  +
lea edi [esi+250h] +
push edi  +
push offset stru_1008810  +
push 17h  +
push ebx  +
push offset stru_1008820  +
call ds:CoCreateInstance  +
mov ecx eax +
cmp ecx ebx +
jge loc_100879F  +
sub eax 80040154h +
neg eax  +
sbb eax eax +
and eax ecx +
jmp loc_1008807  +
mov eax [edi] +
mov ecx [eax] +
lea edi [esi+254h] +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jl loc_1008807  +
xor eax eax +
cmp [esi+23h] bl +
setz al  +
lea eax [eax+eax+1] +
add eax dword_101702C +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1003A91  +
cmp [ebp+var_4] ebx +
jnz loc_10087DA  +
mov eax 80004005h +
jmp loc_1008807  +
mov eax [edi] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
push [ebp+var_4]  +
mov [ebp+var_8] eax +
call ds:SysFreeString  +
mov eax [ebp+var_8] +
cmp eax ebx +
jl loc_1008807  +
cmp [esi+24h] bl +
jz loc_1008805  +
mov edi [edi] +
mov eax [edi] +
push edi  +
call dword ptr [eax+10h]  +
xor eax eax +
pop edi  +
jmp loc_10039EA  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [esi+254h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+254h] 0 +
jmp loc_1005BF0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
jmp loc_1005C00  +
***
mov eax esi +
jmp loc_1004281  +
***
mov edi eax +
jmp loc_100292D  +
push dword ptr [esi+238h]  +
mov eax dword_101702C +
push 0CEAh  +
add eax 15h +
push eax  +
mov ecx esi +
call sub_100F329  +
jmp loc_1002945  +
mov ecx dword_101702C +
mov eax [esi] +
push edi  +
push dword ptr [esi+238h]  +
add ecx 14h +
push 0C81h  +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
jmp loc_1002945  +
***
lea ecx [ebp+var_10] +
call sub_1005503  +
mov eax edi +
jmp loc_10054F8  +
mov esi eax +
jmp loc_10054EE  +
***
mov eax [esi+254h] +
jmp loc_1002693  +
push eax  +
mov ecx esi +
call sub_100F36A  +
mov ebx eax +
jmp loc_10026EE  +
push dword ptr [esi+8]  +
mov ecx [esi+24Ch] +
call sub_100FC4C  +
jmp loc_1002720  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+20h]  +
jmp loc_1002717  +
***
mov edx [esi] +
push eax  +
mov eax dword_101702C +
push 0C80h  +
add eax 14h +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_1008940  +
mov edi 8007000Eh +
jmp loc_10089A0  +
push [ebp+var_218]  +
call sub_1010426  +
jmp loc_1001FFD  +
cmp eax 800C0005h +
jnz loc_1008938  +
mov eax 80070002h +
push eax  +
mov ecx esi +
call sub_100F36A  +
mov edi eax +
jmp loc_1002048  +
push [ebp+var_210]  +
mov ecx esi +
call sub_10105A3  +
mov edi eax +
jmp loc_1002027  +
mov ecx [eax] +
push eax  +
mov [ebp+ppmk] eax +
call dword ptr [ecx+4]  +
jmp loc_1006E0B  +
push dword ptr [esi+238h]  +
push 0CEAh  +
jmp loc_100897F  +
push edi  +
push 0CEDh  +
mov eax dword_101702C +
add eax 15h +
push eax  +
mov ecx esi +
call sub_100F329  +
jmp loc_100203C  +
cmp edi 80020101h +
jz loc_1002050  +
mov ecx dword_101702C +
mov eax [esi] +
push edi  +
add ecx 14h +
push 0C86h  +
push ecx  +
mov ecx esi +
call dword ptr [eax]  +
mov edi eax +
jmp loc_1002050  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [esi+3Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+3Ch] 0 +
jmp loc_10062F2  +
***
mov eax 8007000Eh +
jmp loc_1004EDC  +
and [esi+44h] edi +
jmp loc_1004ED9  +
***
mov eax 80070057h +
jmp loc_1004F38  +
***
mov [eax] edx +
jmp loc_1004F36  +
***
mov eax 80004003h +
jmp loc_1005001  +
mov ebx 8007000Eh +
jmp loc_1004FFD  +
mov ebx 8007000Eh +
jmp loc_1004FF5  +
mov ecx [eax] +
lea edi [esi+3Ch] +
push edi  +
push eax  +
call dword ptr [ecx+6Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_1004FF5  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+4] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov ebx eax +
test ebx ebx +
jl loc_1004FF5  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov ebx eax +
test ebx ebx +
jl loc_1004FF5  +
mov edi [edi] +
push [ebp+var_4]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+28h]  +
mov ebx eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100500A  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1004FFD  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1006201  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100620C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1006217  +
***
lea eax [edx-0Ch] +
jmp loc_10053A0  +
***
mov eax [edx+20h] +
cmp [eax+20h] bl +
jz loc_1008AB8  +
mov eax 80004002h +
jmp loc_1004B64  +
***
lea ecx [edx-4] +
jmp loc_1005397  +
***
cmp eax 80020101h +
jnz loc_10050F5  +
mov eax 8004FFFFh +
jmp loc_10050F5  +
***
mov eax 8004FFFFh +
jmp locret_1002743  +
***
mov eax 80004003h +
jmp loc_10053DE  +
***
mov eax 409h +
jmp loc_10053DA  +
***
mov eax 80004003h +
jmp loc_1004E74  +
***
push 0FFFFFFFFh  +
push offset aWsh_0  +
push dword ptr [ebp+0Ch]  +
call sub_1002753  +
test eax eax +
jz loc_1004E0A  +
jmp loc_1008B64  +
mov eax [esi] +
lea ecx [ebp-8] +
push ecx  +
push offset loc_1001814  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_1004E52  +
mov eax [ebp-8] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_1004E52  +
push 2  +
pop edi  +
jmp loc_1004E20  +
***
mov edi 80070057h +
jmp loc_1004E52  +
***
mov ecx [ebp-4] +
mov [eax] ecx +
mov [ebp-4] edi +
jmp loc_1004E47  +
***
mov edi 80004005h +
jmp loc_1004E52  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1004E5D  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1004E68  +
***
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_1004E70  +
***
mov eax 80004003h +
jmp loc_1005411  +
***
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1005411  +
***
mov edi 8007000Eh +
jmp loc_100533D  +
mov ebx [ebx] +
mov eax [ebx] +
lea ecx [esi+4Ch] +
push ecx  +
push offset loc_1008BE4  +
push ebx  +
call dword ptr [eax]  +
jmp loc_100536C  +
cmp [ebp+var_1C] 0 +
jz loc_1008BD6  +
mov eax [esi+24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1005352  +
***
adc [edi+edx*4] bh +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
mov eax 80004005h +
jmp loc_1006508  +
***
cmp ecx 8004FFFEh +
jz loc_1008CAE  +
mov eax [ebp-48h] +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_1008C19  +
cmp [eax] bx +
jnz loc_1008C36  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
call sub_100F3F8  +
mov edi eax +
cmp edi ebx +
jl loc_10064DC  +
mov eax [ebp-10h] +
mov edi [ebp+0Ch] +
mov [ebp+8] eax +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-8] +
push ecx  +
lea ecx [ebp-20h] +
push ecx  +
push edi  +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_1008C58  +
mov eax [edi] +
lea ecx [ebp-4] +
push ecx  +
push edi  +
call dword ptr [eax+14h]  +
jmp loc_1008C5F  +
or dword ptr [ebp-14h] 0FFFFFFFFh +
mov [ebp-8] ebx +
cmp [ebp-4] ebx +
jnz loc_1008C72  +
push dword ptr [ebp-8]  +
mov ecx [esi+40h] +
call sub_1012227  +
mov [ebp-4] eax +
mov edx [ebp-14h] +
mov ecx [esi+2Ch] +
mov eax [ecx] +
push ebx  +
push dword ptr [ebp-34h]  +
inc edx  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-4Ch]  +
push edx  +
push dword ptr [ebp-8]  +
call dword ptr [eax+14h]  +
mov eax [esi+2Ch] +
cmp [eax+23h] bl +
jz loc_10064DA  +
push dword ptr [ebp-8]  +
mov ecx esi +
push dword ptr [esi+40h]  +
push edi  +
call sub_1010AE7  +
jmp loc_10064DA  +
***
mov ecx [esi+2Ch] +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov edi eax +
jmp loc_10064DC  +
***
mov ecx esi +
mov byte ptr [esi+51h] 1 +
call sub_1010A37  +
mov edi eax +
cmp edi ebx +
jl loc_10064DC  +
lea eax [ebp-0Ch] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1010A77  +
mov edi eax +
cmp edi ebx +
jl loc_10064DC  +
mov eax [ebp-0Ch] +
lea edx [ebp-18h] +
push edx  +
push 400h  +
push 1  +
lea edx [ebp-1Ch] +
push edx  +
mov esi offset dword_1001804 +
push esi  +
mov [ebp-18h] ebx +
mov dword ptr [ebp-1Ch] offset aWscript_onscri +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_100651A  +
mov eax [ebp-0Ch] +
push ebx  +
push ebx  +
push ebx  +
lea edx [ebp-30h] +
push edx  +
push 1  +
push 400h  +
push esi  +
push dword ptr [ebp-18h]  +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_1006524  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1006506  +
***
call ds:GetLastError  +
test eax eax +
jg loc_1008D62  +
mov esi eax +
jmp loc_1005667  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1008D5B  +
mov esi 8007000Eh +
jmp loc_100565A  +
call ds:GetLastError  +
test eax eax +
jle loc_1008D8C  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100565A  +
***
xor eax eax +
inc eax  +
jmp loc_1004D50  +
mov [ebp+lpBuffer] 1 +
jmp loc_1004D1A  +
mov [ebp+lpBuffer] 1 +
jmp loc_1004D19  +
lea eax [ebp+var_88] +
push eax  +
lea eax [ebp+var_94] +
push eax  +
push [ebp+lpBuffer]  +
call ds:SysStringLen  +
push eax  +
push [ebp+lpBuffer]  +
push 2Eh  +
push dword ptr [esi+238h]  +
call wcsrchr  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1010E32  +
cmp eax ebx +
mov [ebp+lpBuffer] eax +
jl loc_1004D0D  +
mov eax [ebp+var_88] +
mov [ebp+var_8C] eax +
jmp loc_1004C63  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1008E13  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+lpBuffer] eax +
jmp loc_1004D0D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1008E2F  +
and eax 0FFFFh +
or eax 80070000h +
push offset aSaferrecordeve  +
push [ebp+hLibModule]  +
mov [ebp+lpBuffer] eax +
call edi  +
cmp eax ebx +
jz loc_1004D0D  +
push ebx  +
push [ebp+var_8C]  +
push [ebp+var_84]  +
call eax  +
jmp loc_1004D0D  +
push [ebp+hObject]  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_1004D0A  +
jmp loc_1008DFF  +
push [ebp+var_88]  +
call ds:SysFreeString  +
jmp loc_1004D19  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1004D23  +
***
mov edi 8007000Eh +
jmp loc_1003F02  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1003F2A  +
***
mov eax 80004003h +
jmp loc_1007143  +
***
mov eax 8007000Eh +
jmp loc_1007143  +
***
mov eax 80004003h +
jmp loc_1002A20  +
***
mov eax 80004003h +
jmp loc_1007098  +
***
mov eax 8007000Eh +
jmp loc_1007098  +
***
mov eax 80004003h +
jmp loc_1007192  +
***
push 2Fh  +
push esi  +
call sub_1003D0D  +
jmp loc_1007197  +
***
mov eax 8007000Eh +
jmp loc_1007192  +
***
mov eax 80070057h +
jmp loc_100700F  +
***
fadd  ds:dbl_1008F50 +
jmp loc_1006F7D  +
***
lea eax [ebp-2Ch] +
push eax  +
call ds:DispatchMessageA  +
jmp loc_1006FD2  +
***
fadd  ds:dbl_1008F50 +
jmp loc_1006FF1  +
***
fadd  ds:dbl_1008F48 +
jmp loc_1007001  +
***
mov eax 80004003h +
jmp loc_10073DC  +
***
push esi  +
push 1  +
jmp loc_10073AD  +
***
mov eax 80004003h +
jmp loc_1007496  +
***
mov eax 80004003h +
jmp loc_100723B  +
***
cmp esi 800401F3h +
jnz loc_1008FA4  +
push [ebp+lpWideCharStr]  +
push 0C1Dh  +
push offset aWscript_create  +
push offset dword_100160C  +
call sub_100F567  +
mov esi 80020009h +
jmp loc_1008FDF  +
lea eax [ebp+lpWideCharStr] +
push eax  +
push esi  +
call sub_100F3F8  +
push [ebp+lpWideCharStr]  +
push offset aWscript_create  +
push offset dword_100160C  +
call sub_100F67F  +
add esp 0Ch +
jmp loc_1002BBC  +
push [ebp+lpWideCharStr]  +
push 0C1Fh  +
push offset aWscript_create  +
push offset dword_100160C  +
call sub_100F567  +
add esp 10h +
jmp loc_1002BBC  +
***
mov eax 80004003h +
jmp loc_1002B5A  +
***
push edi  +
mov edi [ebp-18h] +
lea eax [ebp-14h] +
push eax  +
call sub_1011961  +
test eax eax +
jge loc_1002B42  +
push 0C1Eh  +
push offset aWscript_create  +
push offset dword_100160C  +
call sub_100F567  +
add esp 0Ch +
mov ebx 80020009h +
jmp loc_1002B6F  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1002B4A  +
***
xor eax eax +
jmp loc_1001D3E  +
***
pop eax  +
push offset aNull  +
mov [ebp-24h] ax +
call ds:SysAllocString  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1001CEB  +
mov esi 8007000Eh +
jmp loc_1001D26  +
***
push 1  +
lea eax [ebp-8] +
push eax  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-8] 20h +
call sub_1001954  +
jmp loc_1001D43  +
***
mov eax 80004003h +
jmp loc_1006D19  +
***
mov eax 80004003h +
jmp loc_100667D  +
***
mov eax 80004003h +
jmp loc_10065F9  +
***
mov eax 80004001h +
jmp loc_1006B7C  +
***
call ds:GetActiveWindow  +
mov ecx [ebp+18h] +
mov [ecx+8] eax +
mov eax 4000h +
mov [ecx] ax +
jmp loc_1006B7A  +
***
mov eax 80004005h +
jmp loc_1006BC4  +
***
mov eax 8007000Eh +
jmp loc_1006D89  +
***
mov eax 8007000Eh +
jmp loc_1006F17  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
jmp loc_1006701  +
push 22h  +
pop edx  +
jmp loc_10067F0  +
or edx 40h +
jmp loc_10067FB  +
or edx 200h +
jmp loc_100681E  +
cmp esi 80020101h +
jz loc_100691C  +
mov ecx [ebp+var_8] +
push 80070002h  +
call sub_100F36A  +
jmp loc_100915C  +
push dword ptr [eax+8]  +
mov ecx [eax+24Ch] +
call sub_100FC4C  +
jmp loc_10069B8  +
cmp esi 80070057h +
jnz loc_100691C  +
push [ebp+arg_4]  +
mov eax dword_101702C +
mov ecx [ebp+var_8] +
push 0CF7h  +
add eax 15h +
push eax  +
call sub_100F329  +
mov esi eax +
jmp loc_100691C  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+20h]  +
jmp loc_10069A1  +
***
mov eax 80004003h +
jmp loc_100517E  +
mov eax 80004003h +
jmp loc_100517D  +
mov eax 80004003h +
jmp loc_100517C  +
mov eax 8007000Eh +
jmp loc_100517C  +
***
mov eax 80004003h +
jmp loc_10029D1  +
***
lea esi [eax-8] +
jmp loc_10091A9  +
lea esi [eax-4] +
lea ecx [eax-0Ch] +
neg ecx  +
sbb ecx ecx +
and ecx esi +
jmp loc_10039F1  +
***
mov eax 80004003h +
jmp loc_1005B26  +
***
mov eax 80004003h +
jmp loc_1005B74  +
***
mov eax [edi] +
mov ecx [eax+4] +
mov [edi] ecx +
push eax  +
mov ecx esi +
call sub_1012E54  +
jmp loc_1005E68  +
***
mov edi 8007000Eh +
jmp loc_10049E3  +
inc esi  +
mov [ebp+var_10] 1 +
inc esi  +
jmp loc_10072BF  +
dec eax  +
jz loc_100921D  +
dec eax  +
jnz loc_100730E  +
push 0Bh  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push 2Bh  +
xor ecx ecx +
pop eax  +
cmp ax [esi] +
setnz cl  +
dec ecx  +
mov word ptr [ebp+pvarg.anonymous_0+8] cx +
jmp loc_100730E  +
push 8  +
pop eax  +
push esi  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_1007261  +
jmp loc_100730E  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_10049E3  +
***
mov edi 8007000Eh +
jmp loc_1004857  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1004857  +
***
mov edi 8007000Eh +
jmp loc_1004761  +
mov edi 8007000Eh +
jmp loc_1004759  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1004761  +
***
lea ecx [eax-8] +
jmp loc_100928B  +
lea ecx [eax-8] +
neg ecx  +
lea edx [eax-4] +
sbb ecx ecx +
and ecx edx +
mov edx [ebp+0Ch] +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
jmp loc_10018DD  +
mov eax 8007000Eh +
jmp loc_1001908  +
***
mov eax 8007000Eh +
jmp loc_10019A3  +
***
cmp byte_10174C0 0 +
push eax  +
jz loc_10092DA  +
call sub_1014606  +
jmp loc_1005C1F  +
call esi  +
jmp loc_1005C1F  +
***
cmp dword_101702C 7D0h +
jz loc_1003087  +
mov dword_10174C4 180000h +
jmp loc_100307A  +
push 9  +
pop eax  +
cmp ax cx +
jz loc_1003087  +
push ebx  +
push edi  +
push esi  +
push hModule  +
call sub_1013480  +
cmp eax hModule +
jnz loc_100932A  +
push eax  +
call sub_1014606  +
jmp loc_1009332  +
test eax eax +
jnz loc_10094E7  +
push 5  +
lea eax [ebp+LCData] +
push eax  +
push 3  +
push esi  +
call ds:GetLocaleInfoA  +
test eax eax +
jnz loc_100934F  +
mov eax hInstance +
jmp loc_10094DE  +
mov esi 104h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 3E9h  +
push hModule  +
call ds:LoadStringA  +
test eax eax +
jz loc_1009345  +
lea eax [ebp+LCData] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov ebx offset dword_10094F0 +
push ebx  +
lea eax [ebp+var_110] +
push esi  +
push eax  +
call sub_100F869  +
add esp 14h +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push hModule  +
call ds:GetModuleFileNameA  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_110] +
push eax  +
mov eax esi +
lea ecx [ebp+Filename] +
call sub_10134DB  +
mov edi ds:LoadLibraryExA +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_10094E7  +
push 2  +
push eax  +
lea eax [ebp+var_110] +
push eax  +
call edi  +
test eax eax +
jnz loc_10094E7  +
lea eax [ebp+LCData] +
push eax  +
call ds:lstrlenA  +
cmp eax 2 +
jle loc_1009463  +
lea eax [ebp+LCData] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
lea eax [ebp+var_110] +
push esi  +
push eax  +
mov byte ptr [ebp-0Ah] 0 +
call sub_100CE89  +
add esp 14h +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_110] +
push eax  +
mov eax esi +
lea ecx [ebp+Filename] +
call sub_10134DB  +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_10094E7  +
push 2  +
push eax  +
lea eax [ebp+var_110] +
push eax  +
call edi  +
test eax eax +
jnz loc_10094E7  +
call ds:GetUserDefaultLCID  +
push 5  +
lea ecx [ebp+LCData] +
push ecx  +
and eax 3FFh +
or eax 400h +
push 3  +
push eax  +
call ds:GetLocaleInfoA  +
test eax eax +
jz loc_1009345  +
lea eax [ebp+LCData] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
lea eax [ebp+var_110] +
push esi  +
push eax  +
call sub_100CE89  +
add esp 14h +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_110] +
push eax  +
mov eax esi +
lea ecx [ebp+Filename] +
call sub_10134DB  +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_10094E7  +
push 2  +
push eax  +
lea eax [ebp+var_110] +
push eax  +
call edi  +
test eax eax +
jnz loc_10094E7  +
mov eax hModule +
pop edi  +
pop ebx  +
jmp loc_100308C  +
***
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1002F04  +
***
mov edi 800h +
push edi  +
lea eax [ebp+MultiByteStr] +
push eax  +
push [ebp+uID]  +
push hInstance  +
call ds:LoadStringA  +
test eax eax +
jz loc_1003B02  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+MultiByteStr] +
push eax  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
jmp loc_1003AE1  +
xor eax eax +
jmp loc_1003B08  +
***
call ds:GetLastError  +
cmp eax ebx +
jle loc_1009569  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1003B5D  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1009555  +
call sub_100320B  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_100959F  +
mov esi 8007000Eh +
jmp loc_1003B5D  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpFileName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1009555  +
mov eax [ebp+cchWideChar] +
call sub_100320B  +
mov edi esp +
lea eax [ebp+FilePart] +
push eax  +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpFileName]  +
call ds:GetFullPathNameA  +
test eax eax +
jz loc_1009555  +
push [ebp+cchWideChar]  +
mov esi ds:MultiByteToWideChar +
push [ebp+lpBuffer]  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1009555  +
mov eax [ebp+FilePart] +
push ebx  +
push ebx  +
sub eax edi +
push eax  +
push edi  +
push ebx  +
push ebx  +
call esi  +
mov ecx [ebp+lpBuffer] +
lea eax [ecx+eax*2] +
mov ecx [ebp+lpFilePart] +
mov [ecx] eax +
mov esi ebx +
jmp loc_1003B5D  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_1004373  +
***
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_1009668  +
cmp [eax] bx +
jz loc_1009668  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push eax  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100964B  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_1006D92  +
call sub_100320B  +
mov [ebp+lpSubKey] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSubKey]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_100963E  +
jmp loc_100966B  +
mov [ebp+lpSubKey] ebx +
push [ebp+phkResult]  +
push [ebp+samDesired]  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
jmp loc_100344A  +
***
jle loc_1003BBB  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1003BBB  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_10096BA  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_1009683  +
call sub_100320B  +
mov [ebp+lpSubKey] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSubKey]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10096B0  +
push ebx  +
push [ebp+phkResult]  +
push ebx  +
push [ebp+samDesired]  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExA  +
jmp loc_1003BB1  +
***
mov eax 80040153h +
jmp loc_1004336  +
jle loc_1004336  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1004336  +
cmp [ebp+Type] 2 +
jz loc_1004324  +
jmp loc_10096F1  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_1009761  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1009744  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_10096FB  +
call sub_100320B  +
mov [ebp+lpValueName] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpValueName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_100973A  +
jmp loc_1009764  +
mov [ebp+lpValueName] ebx +
mov esi [ebp+cchWideChar] +
inc esi  +
mov eax esi +
call sub_100320B  +
mov edi esp +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
mov [ebp+cbData] esi +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
cmp eax ebx +
jnz loc_10096FB  +
cmp [ebp+Type] 1 +
jz loc_10097A2  +
cmp [ebp+Type] 2 +
jnz loc_10096F1  +
mov eax [ebp+cbData] +
cmp [edi+eax-1] bl +
jnz loc_10096F1  +
push [ebp+cchWideChar]  +
push [ebp+lpData]  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_1004334  +
jmp loc_100973A  +
***
cmp [ebp+lpWideCharStr] ebx +
jz loc_1009815  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_10097F8  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_1004187  +
call sub_100320B  +
mov [ebp+lpValueName] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpValueName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10097EB  +
jmp loc_1009818  +
mov [ebp+lpValueName] ebx +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
jmp loc_100417F  +
cmp [ebp+Type] 4 +
jnz loc_1009848  +
cmp [ebp+cbData] 4 +
jnz loc_1009848  +
xor eax eax +
jmp loc_1004193  +
mov eax 80040153h +
jmp loc_1004193  +
***
cmp edi ebx +
jz loc_10098FB  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax ebx +
jnz loc_1009882  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_1003329  +
call sub_100320B  +
mov [ebp+lpMultiByteStr] esp +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1009875  +
mov esi [ebp+var_C1C] +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+MultiByteStr] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpMultiByteStr]  +
mov edi 400h +
push [ebp+var_C14]  +
mov [ebp+cbData] edi +
call ds:RegQueryValueExA  +
cmp eax ebx +
jnz loc_1003329  +
mov eax [ebp+cbData] +
cmp eax ebx +
jnz loc_1009903  +
mov eax 80004005h +
jmp loc_1003335  +
mov [ebp+lpMultiByteStr] ebx +
jmp loc_10098AC  +
cmp [ebp+Type] 1 +
mov [ebp+eax+var_405] bl +
jz loc_1009927  +
cmp [ebp+Type] 2 +
jz loc_1009927  +
lea eax [ebp+MultiByteStr] +
jmp loc_1004A2E  +
push edi  +
lea eax [ebp+String] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+MultiByteStr] +
push eax  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_1009875  +
mov eax [ebp+var_C14] +
jmp loc_1004A2E  +
cmp [ebp+Type] 4 +
jnz loc_1004A99  +
cmp [ebp+cbData] 4 +
jnz loc_1004A99  +
cmp [eax] ebx +
setnz al  +
mov [esi] al +
jmp loc_1004A8E  +
***
mov eax 8000FFFFh +
jmp loc_1005736  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1005735  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1005735  +
xor eax eax +
jmp loc_1005735  +
xor ecx ecx +
cmp ebx 8 +
setz cl  +
jmp loc_100571C  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1005734  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1005734  +
***
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1009A06  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100558B  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100558B  +
call sub_100320B  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_1009A1C  +
mov eax 8007000Eh +
jmp loc_100558B  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpFileName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10099E9  +
push ebx  +
push [ebp+dwFlagsAndAttributes]  +
push [ebp+dwCreationDisposition]  +
push ebx  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call ds:CreateFileA  +
jmp loc_1005576  +
***
mov eax 80004003h +
jmp loc_1001605  +
***
mov eax [ebp+arg_0] +
jmp loc_10028AA  +
***
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1003FEA  +
***
mov eax 8002000Bh +
jmp loc_1001772  +
mov eax [edi+14h] +
lea ecx [ebp+pptlib] +
push ecx  +
push [ebp+lcid]  +
movzx ecx word ptr [eax+18h] +
push 0  +
push ecx  +
push dword ptr [eax+10h]  +
call ds:LoadRegTypeLib  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_1009AA5  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_0] +
jmp loc_100176F  +
push [ebp+pptlib]  +
mov ecx edi +
call sub_1003F8A  +
mov edi eax +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1001776  +
***
mov eax 80020001h +
jmp loc_10017FB  +
***
mov eax 80020001h +
jmp loc_10016E5  +
***
retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov eax [ecx] +
xor edx edx +
cmp byte_1017001 dl +
push esi  +
mov esi dword_101702C +
setz dl  +
lea edx [edx+esi+0Ah] +
push edx  +
push 0  +
push ecx  +
call dword ptr [eax+10h]  +
add esp 0Ch +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [ebp-244h] +
call sub_100437C  +
push 80000001h  +
lea ecx [ebp-244h] +
call sub_1003D3E  +
xor ebx ebx +
cmp eax ebx +
jge loc_100CB81  +
mov edx [esi] +
push eax  +
mov eax dword_101702C +
push 0C85h  +
add eax 14h +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
inc ebx  +
lea ecx [ebp-244h] +
call sub_1005D1E  +
mov ecx [ebp-4] +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn   +
***
mov [esi+20h] bl +
cmp [ebp-23Eh] bl +
jz loc_100CB93  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
mov edx dword_101702C +
mov eax [esi] +
xor ecx ecx +
cmp byte_1017001 bl +
setz cl  +
lea ecx [ecx+edx+0Ah] +
push ecx  +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
add esp 0Ch +
jmp loc_100CB66  +
***
push dword ptr [ecx+238h]  +
push 0C1Ch  +
push 0  +
call sub_100F329  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov eax [ecx] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ecx  +
call dword ptr [eax+10h]  +
add esp 14h +
mov eax 8004FFFFh +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
push esi  +
push edi  +
mov edi 8004FFFFh +
mov esi ecx +
cmp [ebp+10h] edi +
jz loc_100CC6B  +
cmp dword ptr [ebp+10h] 80020101h +
jz loc_100CC6B  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-4] +
push eax  +
call sub_1003A91  +
cmp dword ptr [ebp-4] 0 +
jz loc_100CC5B  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_100F3F8  +
test eax eax +
jl loc_100CC5B  +
push dword ptr [ebp-8]  +
mov eax [esi] +
push dword ptr [ebp-4]  +
push 0DADh  +
push dword ptr [ebp+8]  +
push esi  +
call dword ptr [eax+10h]  +
add esp 14h +
push dword ptr [ebp-4]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-8]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
push esi  +
mov esi ecx +
cmp byte ptr [esi+20h] 0 +
jz loc_100CC94  +
xor eax eax +
jmp loc_100CD05  +
push edi  +
push 7E7h  +
lea eax [ebp-4] +
push eax  +
call sub_1003A91  +
cmp dword ptr [ebp-4] 0 +
jnz loc_100CCB0  +
mov edi 8007000Eh +
jmp loc_100CCF2  +
push dword ptr [ebp+14h]  +
lea eax [ebp-8] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [esi+238h]  +
push eax  +
push dword ptr [ebp-4]  +
call sub_100F545  +
mov edi eax +
add esp 1Ch +
test edi edi +
jl loc_100CCF2  +
push dword ptr [ebp-8]  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push eax  +
mov ecx esi +
call sub_1001A03  +
mov edi eax +
test edi edi +
jl loc_100CCF2  +
xor edi edi +
push dword ptr [ebp-4]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-8]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100CD17  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jz loc_100CE34  +
cmp [ebp+arg_4] ebx +
ja loc_100CE54  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_100CDEE  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp [ebp+arg_8] ebx +
jz loc_100CE34  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_100DEFB  +
add esp 10h +
cmp eax ebx +
jge loc_100CE50  +
mov [esi] bl +
cmp eax 0FFFFFFFEh +
jnz loc_100CE4D  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_100CE40  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CE1F  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_100CEBF  +
cmp [ebp+arg_4] esi +
ja loc_100CEDF  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_100CDEE  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
cmp [ebp+arg_8] esi +
jz loc_100CEBF  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_100EB83  +
add esp 10h +
cmp eax esi +
jge loc_100CEDB  +
xor ecx ecx +
mov [edi] cx +
cmp eax 0FFFFFFFEh +
jnz loc_100CED8  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_100CECB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CEAA  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_100CF6E  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_100D093  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_100CFF8  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100CFCB  +
mov edx edi +
call sub_100758A  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_100D002  +
jg loc_100D00B  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_100CFA0  +
cmp [ebp+var_1] 0 +
jz loc_100CFF8  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100CFEA  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_100CFD8  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100D03F  +
cmp dword_10174D4 0 +
jz loc_100D03F  +
push offset dword_10174D4  +
call sub_100ECE6  +
add esp 4 +
test eax eax +
jz loc_100D03F  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_10174D4  +
add esp 8 +
mov ecx [ebp+arg_C] +
call sub_10075BA  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_100D060  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call sub_10075D4  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100D078  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call sub_10075A1  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_100CFF8  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call sub_10075D4  +
jmp loc_100CFD8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10171D0 eax +
mov dword_10171CC ecx +
mov dword_10171C8 edx +
mov dword_10171C4 ebx +
mov dword_10171C0 esi +
mov dword_10171BC edi +
mov word_10171E8 ss +
mov word_10171DC cs +
mov word_10171B8 ds +
mov word_10171B4 es +
mov word_10171B0 fs +
mov word_10171AC gs +
pushf   +
pop dword_10171E0  +
mov eax [ebp+0] +
mov dword_10171D4 eax +
mov eax [ebp+4] +
mov dword_10171D8 eax +
lea eax [ebp+8] +
mov dword_10171E4 eax +
mov eax [ebp-320h] +
mov dword_1017120 10001h +
mov eax dword_10171D8 +
mov dword_10170DC eax +
mov dword_10170D0 0C0000409h +
mov dword_10170D4 1 +
mov eax dword_1017004 +
mov [ebp-328h] eax +
mov eax dword_1017008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
test byte ptr [ecx+0Ch] 40h +
jz loc_100D1B4  +
cmp dword ptr [ecx+8] 0 +
jz loc_100D1D8  +
dec dword ptr [ecx+4]  +
js loc_100D1C4  +
mov edx [ecx] +
mov [edx] al +
inc dword ptr [ecx]  +
movzx eax al +
jmp loc_100D1D0  +
movsx eax al +
push ecx  +
push eax  +
call sub_100EDB9  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_100D1D8  +
or [esi] eax +
retn   +
inc dword ptr [esi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_100D1FD  +
mov ecx [ebp+arg_8] +
mov al [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_100D1A8  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_100D203  +
cmp [ebp+arg_4] 0 +
jg loc_100D1EA  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [edi+0Ch] 40h +
push ebx  +
push esi  +
mov esi eax +
mov ebx ecx +
jz loc_100D24F  +
cmp dword ptr [edi+8] 0 +
jnz loc_100D24F  +
mov eax [ebp+arg_0] +
add [esi] eax +
jmp loc_100D255  +
mov al [ebx] +
dec [ebp+arg_0]  +
mov ecx edi +
call sub_100D1A8  +
inc ebx  +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_100D24F  +
call ds:__imp__errno  +
cmp dword ptr [eax] 2Ah +
jnz loc_100D255  +
mov ecx edi +
mov al 3Fh +
call sub_100D1A8  +
cmp [ebp+arg_0] 0 +
jg loc_100D229  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
xor eax eax +
inc eax  +
push edi  +
mov edi [ebp+arg_4] +
test [ebp+arg_14] al +
jz loc_100D286  +
sub [ebp+arg_C] 20h +
test [ebp+arg_14] 80h +
mov [ebp+var_24] 25h +
jz loc_100D297  +
push 2  +
mov byte ptr [ebp-23h] 23h +
pop eax  +
push esi  +
mov [ebp+eax+var_24] 2Eh +
push 0Ah  +
lea eax [ebp+eax-23h] +
push eax  +
push [ebp+arg_10]  +
call ds:_itoa  +
lea eax [ebp+var_24] +
add esp 0Ch +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100D2B6  +
mov cl byte ptr [ebp+arg_C] +
sub eax esi +
mov [ebp+eax+var_24] cl +
mov byte ptr [ebp+eax-23h] 0 +
mov eax [ebp+arg_8] +
lea esi [edi+eax-1] +
mov byte ptr [esi] 0 +
push ecx  +
push ecx  +
mov ecx [ebp+var_28] +
fld  qword ptr [ecx] +
lea ecx [ebp+var_24] +
fstp  [esp+38h+var_38] +
push ecx  +
push eax  +
push edi  +
call ds:_snprintf  +
add esp 14h +
cmp byte ptr [esi] 0 +
pop esi  +
jnz loc_100D2FC  +
test eax eax +
jle loc_100D2FC  +
xor eax eax +
jmp loc_100D302  +
push 16h  +
mov byte ptr [edi] 0 +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
cmp edi ebx +
jnz loc_100D349  +
cmp [ebp+arg_8] ebx +
jbe loc_100D349  +
cmp esi ebx +
jz loc_100D3EC  +
mov [esi] ebx +
jmp loc_100D3EC  +
cmp esi ebx +
jz loc_100D350  +
or dword ptr [esi] 0FFFFFFFFh +
cmp [ebp+arg_8] 7FFFFFFFh +
jbe loc_100D377  +
call ds:__imp__errno  +
push 16h  +
pop ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov esi ecx +
mov [eax] ecx +
call sub_100CDEE  +
add esp 14h +
mov eax esi +
jmp loc_100D3EE  +
push dword ptr [ebp+arg_C]  +
lea eax [ebp+var_C] +
push eax  +
call ds:wctomb  +
cmp eax ebx +
pop ecx  +
pop ecx  +
jge loc_100D3AF  +
cmp edi ebx +
jz loc_100D3A0  +
cmp [ebp+arg_8] ebx +
jbe loc_100D3A0  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
call ds:__imp__errno  +
push 2Ah  +
pop ecx  +
mov [eax] ecx +
mov eax ecx +
jmp loc_100D3EE  +
cmp esi ebx +
jz loc_100D3B5  +
mov [esi] eax +
cmp [ebp+arg_8] eax +
jge loc_100D3DA  +
cmp edi ebx +
jz loc_100D3D0  +
cmp [ebp+arg_8] ebx +
jbe loc_100D3D0  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
call ds:__imp__errno  +
push 22h  +
jmp loc_100D361  +
cmp edi ebx +
jz loc_100D3EC  +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
call memcpy  +
add esp 0Ch +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 268h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_24C] eax +
mov [ebp+var_224] edi +
mov [ebp+var_248] esi +
mov [ebp+var_210] esi +
mov [ebp+var_234] esi +
mov [ebp+var_218] esi +
mov [ebp+var_230] esi +
mov dword ptr [ebp+var_23C] esi +
mov [ebp+var_250] esi +
mov [ebp+var_238] esi +
cmp eax esi +
jnz loc_100D486  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_100CDEE  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100DEC7  +
cmp ebx esi +
jz loc_100D465  +
mov cl [ebx] +
mov [ebp+var_228] esi +
mov [ebp+var_220] esi +
mov [ebp+var_240] esi +
mov [ebp+var_244] esi +
mov [ebp+var_211] cl +
test cl cl +
jz loc_100DEC1  +
inc ebx  +
cmp [ebp+var_228] esi +
mov [ebp+var_260] ebx +
jl loc_100DEAC  +
mov al cl +
sub al 20h +
cmp al 58h +
ja loc_100D4DC  +
movsx eax cl +
movzx eax byte ptr ds:(loc_1009ACE+2)[eax] +
and eax 0Fh +
jmp loc_100D4DE  +
xor eax eax +
mov edx [ebp+var_240] +
imul eax eax +
movzx eax ds:byte_1009AF0[eax+edx] +
shr eax 4 +
mov [ebp+var_240] eax +
cmp eax 8 +
jz loc_100D465  +
push 7  +
pop edx  +
cmp eax edx +
ja loc_100DE63  +
jmp ds:off_100DED6[eax*4]  +
or [ebp+var_218] 0FFFFFFFFh +
mov dword ptr [ebp+var_23C] esi +
mov [ebp+var_250] esi +
mov [ebp+var_234] esi +
mov [ebp+var_230] esi +
mov [ebp+var_210] esi +
mov [ebp+var_238] esi +
jmp loc_100DE71  +
movsx eax cl +
sub eax 20h +
jz loc_100D595  +
sub eax 3 +
jz loc_100D586  +
sub eax 8 +
jz loc_100D57A  +
dec eax  +
dec eax  +
jz loc_100D56E  +
sub eax 3 +
jnz loc_100DE63  +
or [ebp+var_210] 8 +
jmp loc_100DE71  +
or [ebp+var_210] 4 +
jmp loc_100DE71  +
or [ebp+var_210] 1 +
jmp loc_100DE71  +
or [ebp+var_210] 80h +
jmp loc_100DE71  +
or [ebp+var_210] 2 +
jmp loc_100DE71  +
cmp cl 2Ah +
jnz loc_100D5D1  +
mov eax [edi] +
add edi 4 +
cmp eax esi +
mov [ebp+var_224] edi +
mov [ebp+var_234] eax +
jge loc_100DE71  +
or [ebp+var_210] 4 +
neg [ebp+var_234]  +
jmp loc_100DE71  +
mov eax [ebp+var_234] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_234] eax +
jmp loc_100DE71  +
mov [ebp+var_218] esi +
jmp loc_100DE71  +
cmp cl 2Ah +
jnz loc_100D621  +
mov eax [edi] +
add edi 4 +
cmp eax esi +
mov [ebp+var_224] edi +
mov [ebp+var_218] eax +
jge loc_100DE71  +
or [ebp+var_218] 0FFFFFFFFh +
jmp loc_100DE71  +
mov eax [ebp+var_218] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_218] eax +
jmp loc_100DE71  +
cmp cl 49h +
jz loc_100D690  +
cmp cl 68h +
jz loc_100D684  +
cmp cl 6Ch +
jz loc_100D663  +
cmp cl 77h +
jnz loc_100DE71  +
or [ebp+var_210] 800h +
jmp loc_100DE71  +
cmp byte ptr [ebx] 6Ch +
jnz loc_100D678  +
inc ebx  +
or [ebp+var_210] 1000h +
jmp loc_100DE71  +
or [ebp+var_210] 10h +
jmp loc_100DE71  +
or [ebp+var_210] 20h +
jmp loc_100DE71  +
mov al [ebx] +
cmp al 36h +
jnz loc_100D6AD  +
cmp byte ptr [ebx+1] 34h +
jnz loc_100D6AD  +
inc ebx  +
inc ebx  +
or [ebp+var_210] 8000h +
jmp loc_100DE71  +
cmp al 33h +
jnz loc_100D6C8  +
cmp byte ptr [ebx+1] 32h +
jnz loc_100D6C8  +
inc ebx  +
inc ebx  +
and [ebp+var_210] 0FFFF7FFFh +
jmp loc_100DE71  +
cmp al 64h +
jz loc_100DE71  +
cmp al 69h +
jz loc_100DE71  +
cmp al 6Fh +
jz loc_100DE71  +
cmp al 75h +
jz loc_100DE71  +
cmp al 78h +
jz loc_100DE71  +
cmp al 58h +
jz loc_100DE71  +
mov [ebp+var_240] esi +
movzx eax cl +
push eax  +
mov [ebp+var_238] esi +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_100D73B  +
mov ecx [ebp+var_24C] +
mov al [ebp+var_211] +
lea esi [ebp+var_228] +
call sub_100D1A8  +
mov al [ebx] +
inc ebx  +
mov [ebp+var_211] al +
test al al +
jz loc_100DE84  +
mov ecx [ebp+var_24C] +
mov al [ebp+var_211] +
lea esi [ebp+var_228] +
call sub_100D1A8  +
jmp loc_100DE6F  +
movsx eax cl +
cmp eax 64h +
jg loc_100D979  +
jz loc_100D9D0  +
cmp eax 53h +
jg loc_100D864  +
jz loc_100D7F8  +
sub eax 41h +
jz loc_100D78D  +
dec eax  +
dec eax  +
jz loc_100D7D9  +
dec eax  +
dec eax  +
jz loc_100D78D  +
dec eax  +
dec eax  +
jnz loc_100DCD3  +
add cl 20h +
mov dword ptr [ebp+var_23C] 1 +
mov [ebp+var_211] cl +
or [ebp+var_210] 40h +
cmp [ebp+var_218] esi +
lea eax [ebp+var_20C] +
mov [ebp+var_21C] eax +
mov eax 200h +
mov [ebp+var_254] eax +
jge loc_100D9FF  +
mov [ebp+var_218] 6 +
jmp loc_100DA6D  +
test [ebp+var_210] 830h +
jnz loc_100D881  +
or [ebp+var_210] 800h +
jmp loc_100D881  +
test [ebp+var_210] 830h +
jnz loc_100D80E  +
or [ebp+var_210] 800h +
mov ecx [ebp+var_218] +
cmp ecx 0FFFFFFFFh +
jnz loc_100D81E  +
mov ecx 7FFFFFFFh +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_21C] edi +
jz loc_100DCA5  +
cmp edi esi +
jnz loc_100D84F  +
mov eax off_10174AC +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
mov [ebp+var_238] 1 +
jmp loc_100DC97  +
sub eax 58h +
jz loc_100DAFB  +
dec eax  +
dec eax  +
jz loc_100D8EA  +
sub eax edx +
jz loc_100D7A0  +
dec eax  +
dec eax  +
jnz loc_100DCD3  +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
jz loc_100D8C6  +
movzx eax word ptr [edi-4] +
push eax  +
push 200h  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_220] +
push eax  +
call sub_100D314  +
add esp 10h +
test eax eax +
jz loc_100D8D9  +
mov [ebp+var_250] 1 +
jmp loc_100D8D9  +
mov al [edi-4] +
mov byte ptr [ebp+var_20C] al +
mov [ebp+var_220] 1 +
lea eax [ebp+var_20C] +
mov [ebp+var_21C] eax +
jmp loc_100DCD3  +
mov eax [edi] +
add edi 4 +
mov [ebp+var_224] edi +
cmp eax esi +
jz loc_100D95D  +
mov esi [eax+4] +
xor edi edi +
cmp esi edi +
jz loc_100D95D  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_100DE9C  +
test [ebp+var_210] 800h +
movzx eax cx +
jz loc_100D94C  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_100DE9C  +
mov edx esi +
not edx  +
test dl cl +
jz loc_100DE9C  +
mov [ebp+var_21C] esi +
shr eax 1 +
mov [ebp+var_238] ecx +
jmp loc_100DCCD  +
mov [ebp+var_238] edi +
mov [ebp+var_21C] esi +
jmp loc_100DCCD  +
mov eax off_10174A8 +
mov [ebp+var_21C] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100D96B  +
sub eax edx +
jmp loc_100DCCD  +
cmp eax 70h +
jg loc_100DB03  +
jz loc_100DAF1  +
cmp eax 65h +
jl loc_100DCD3  +
cmp eax 67h +
jle loc_100D7A0  +
cmp eax 69h +
jz loc_100D9D0  +
cmp eax 6Eh +
jz loc_100D465  +
cmp eax 6Fh +
jnz loc_100DCD3  +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 8 +
jz loc_100D9E1  +
or [ebp+var_210] 200h +
jmp loc_100D9E1  +
or [ebp+var_210] 40h +
mov [ebp+var_220] 0Ah +
mov eax [ebp+var_210] +
test eax 8000h +
jz loc_100DB62  +
mov eax [edi] +
mov edx [edi+4] +
add edi 8 +
jmp loc_100DB97  +
jnz loc_100DA12  +
cmp cl 67h +
jnz loc_100DA6D  +
mov [ebp+var_218] 1 +
jmp loc_100DA6D  +
cmp [ebp+var_218] eax +
jle loc_100DA20  +
mov [ebp+var_218] eax +
mov ebx 0A3h +
cmp [ebp+var_218] ebx +
jle loc_100DA67  +
mov esi [ebp+var_218] +
add esi 15Dh +
push esi  +
call ds:__imp_malloc  +
pop ecx  +
mov cl [ebp+var_211] +
mov [ebp+var_244] eax +
test eax eax +
jz loc_100DA5F  +
mov [ebp+var_21C] eax +
mov [ebp+var_254] esi +
jmp loc_100DA6D  +
mov [ebp+var_218] ebx +
jmp loc_100DA6D  +
mov cl [ebp+var_211] +
test byte ptr [ebp+var_210] 80h +
jz loc_100DA80  +
or dword ptr [ebp+var_23C] 80h +
mov eax [edi] +
push dword ptr [ebp+var_23C]  +
mov esi [ebp+var_21C] +
push [ebp+var_218]  +
add edi 8 +
mov [ebp+var_268] eax +
mov eax [edi-4] +
mov [ebp+var_264] eax +
movsx eax cl +
push eax  +
push [ebp+var_254]  +
lea eax [ebp+var_268] +
push esi  +
push eax  +
mov [ebp+var_224] edi +
call sub_100D25E  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_100DADB  +
or [ebp+var_210] 100h +
inc [ebp+var_21C]  +
mov eax [ebp+var_21C] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jz loc_100D972  +
jmp loc_100DAE4  +
mov [ebp+var_218] 8 +
mov [ebp+var_248] edx +
jmp loc_100DB27  +
sub eax 73h +
jz loc_100D80E  +
dec eax  +
dec eax  +
jz loc_100D9D7  +
sub eax 3 +
jnz loc_100DCD3  +
mov [ebp+var_248] 27h +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 10h +
jz loc_100D9E1  +
mov al byte ptr [ebp+var_248] +
add al 51h +
mov byte ptr [ebp+var_22C] 30h +
mov byte ptr [ebp+var_22C+1] al +
mov [ebp+var_230] 2 +
jmp loc_100D9E1  +
test eax 1000h +
jnz loc_100D9F2  +
add edi 4 +
test al 20h +
jz loc_100DB8B  +
mov [ebp+var_224] edi +
test al 40h +
jz loc_100DB84  +
movsx eax word ptr [edi-4] +
jmp loc_100DB88  +
movzx eax word ptr [edi-4] +
cdq   +
jmp loc_100DB9D  +
test al 40h +
mov eax [edi-4] +
jz loc_100DB95  +
cdq   +
jmp loc_100DB97  +
xor edx edx +
mov [ebp+var_224] edi +
test byte ptr [ebp+var_210] 40h +
jz loc_100DBC1  +
cmp edx esi +
jg loc_100DBC1  +
jl loc_100DBB0  +
cmp eax esi +
jnb loc_100DBC1  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_210] 100h +
test [ebp+var_210] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_100DBD3  +
xor ebx ebx +
cmp [ebp+var_218] 0 +
jge loc_100DBE8  +
mov [ebp+var_218] 1 +
jmp loc_100DC02  +
and [ebp+var_210] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_218] eax +
jle loc_100DC02  +
mov [ebp+var_218] eax +
mov eax edi +
or eax ebx +
jnz loc_100DC0E  +
and [ebp+var_230] eax +
lea esi [ebp+var_D] +
mov eax [ebp+var_218] +
dec [ebp+var_218]  +
test eax eax +
jg loc_100DC27  +
mov eax edi +
or eax ebx +
jz loc_100DC54  +
mov eax [ebp+var_220] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_10075EB  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_254] ebx +
mov edi eax +
mov ebx edx +
jle loc_100DC4F  +
add ecx [ebp+var_248] +
mov [esi] cl +
dec esi  +
jmp loc_100DC11  +
lea eax [ebp+var_D] +
sub eax esi +
inc esi  +
test [ebp+var_210] 200h +
mov [ebp+var_220] eax +
mov [ebp+var_21C] esi +
jz loc_100DCD3  +
test eax eax +
jz loc_100DC7D  +
mov ecx esi +
cmp byte ptr [ecx] 30h +
jz loc_100DCD3  +
dec [ebp+var_21C]  +
mov ecx [ebp+var_21C] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_100DCCD  +
dec ecx  +
cmp [eax] si +
jz loc_100DC9B  +
inc eax  +
inc eax  +
cmp ecx esi +
jnz loc_100DC8F  +
sub eax [ebp+var_21C] +
sar eax 1 +
jmp loc_100DCCD  +
cmp edi esi +
jnz loc_100DCB4  +
mov eax off_10174A8 +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
jmp loc_100DCC3  +
dec ecx  +
cmp byte ptr [eax] 0 +
jz loc_100DCC7  +
inc eax  +
cmp ecx esi +
jnz loc_100DCBC  +
sub eax [ebp+var_21C] +
mov [ebp+var_220] eax +
cmp [ebp+var_250] 0 +
jnz loc_100DE46  +
mov eax [ebp+var_210] +
test al 40h +
jz loc_100DD1C  +
test eax 100h +
jz loc_100DCFA  +
mov byte ptr [ebp+var_22C] 2Dh +
jmp loc_100DD12  +
test al 1 +
jz loc_100DD07  +
mov byte ptr [ebp+var_22C] 2Bh +
jmp loc_100DD12  +
test al 2 +
jz loc_100DD1C  +
mov byte ptr [ebp+var_22C] 20h +
mov [ebp+var_230] 1 +
mov ebx [ebp+var_234] +
sub ebx [ebp+var_220] +
sub ebx [ebp+var_230] +
test byte ptr [ebp+var_210] 0Ch +
jnz loc_100DD4E  +
push [ebp+var_24C]  +
lea eax [ebp+var_228] +
push ebx  +
push 20h  +
call sub_100D1E0  +
add esp 0Ch +
push [ebp+var_230]  +
mov edi [ebp+var_24C] +
lea eax [ebp+var_228] +
lea ecx [ebp+var_22C] +
call sub_100D20B  +
test byte ptr [ebp+var_210] 8 +
pop ecx  +
jz loc_100DD90  +
test byte ptr [ebp+var_210] 4 +
jnz loc_100DD90  +
push edi  +
push ebx  +
push 30h  +
lea eax [ebp+var_228] +
call sub_100D1E0  +
add esp 0Ch +
cmp [ebp+var_238] 0 +
jz loc_100DE0A  +
cmp [ebp+var_220] 0 +
jle loc_100DE0A  +
mov eax [ebp+var_220] +
mov esi [ebp+var_21C] +
mov [ebp+var_254] eax +
movzx eax word ptr [esi] +
dec [ebp+var_254]  +
push eax  +
push 6  +
lea eax [ebp+var_D+1] +
push eax  +
lea eax [ebp+var_25C] +
inc esi  +
push eax  +
inc esi  +
call sub_100D314  +
add esp 10h +
test eax eax +
jnz loc_100DE01  +
cmp [ebp+var_25C] eax +
jz loc_100DE01  +
push [ebp+var_25C]  +
lea eax [ebp+var_228] +
lea ecx [ebp+var_D+1] +
call sub_100D20B  +
cmp [ebp+var_254] 0 +
pop ecx  +
jz loc_100DE22  +
jmp loc_100DDB4  +
or [ebp+var_228] 0FFFFFFFFh +
jmp loc_100DE22  +
push [ebp+var_220]  +
mov ecx [ebp+var_21C] +
lea eax [ebp+var_228] +
call sub_100D20B  +
pop ecx  +
cmp [ebp+var_228] 0 +
jl loc_100DE46  +
test byte ptr [ebp+var_210] 4 +
jz loc_100DE46  +
push edi  +
push ebx  +
push 20h  +
lea eax [ebp+var_228] +
call sub_100D1E0  +
add esp 0Ch +
cmp [ebp+var_244] 0 +
jz loc_100DE63  +
push [ebp+var_244]  +
call ds:__imp_free  +
and [ebp+var_244] 0 +
pop ecx  +
mov ebx [ebp+var_260] +
mov edi [ebp+var_224] +
xor esi esi +
mov al [ebx] +
mov [ebp+var_211] al +
test al al +
jz loc_100DEAC  +
mov cl al +
jmp loc_100D4B2  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
jmp loc_100D476  +
call ds:__imp__errno  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
jmp loc_100D470  +
cmp [ebp+var_240] esi +
jz loc_100DEC1  +
cmp [ebp+var_240] 7 +
jnz loc_100D465  +
mov eax [ebp+var_228] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_100DF15  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_100DF40  +
cmp edi 7FFFFFFFh +
jbe loc_100DF3D  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_100CDEE  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100DFA7  +
mov [ebp+var_1C] edi +
push ebx  +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_100D402  +
mov ebx eax +
xor eax eax +
add esp 0Ch +
cmp ebx eax +
mov [esi+edi-1] al +
jge loc_100DF81  +
cmp [ebp+var_1C] eax +
jl loc_100DFA2  +
cmp esi eax +
jz loc_100DF9E  +
cmp edi eax +
jbe loc_100DF9E  +
mov [esi] al +
jmp loc_100DF9E  +
dec [ebp+var_1C]  +
js loc_100DF8D  +
mov ecx [ebp+var_20] +
mov [ecx] al +
jmp loc_100DF9E  +
lea ecx [ebp+var_20] +
push ecx  +
push eax  +
call sub_100EDB9  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_100DFA2  +
mov eax ebx +
jmp loc_100DFA5  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov ecx [eax+0Ch] +
test cl 40h +
jz loc_100DFBD  +
cmp dword ptr [eax+8] 0 +
jz loc_100DFF2  +
add dword ptr [eax+4] 0FFFFFFFEh +
mov edx 0FFFFh +
js loc_100DFD5  +
mov ecx [eax] +
mov [ecx] si +
add dword ptr [eax] 2 +
movzx ecx si +
jmp loc_100DFDD  +
or ecx 20h +
mov [eax+0Ch] ecx +
mov ecx edx +
cmp cx dx +
jnz loc_100DFF2  +
push eax  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_100DFF2  +
or dword ptr [edi] 0FFFFFFFFh +
retn   +
inc dword ptr [edi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_100E023  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_100DFAF  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_100E022  +
cmp [ebp+arg_4] 0 +
jg loc_100E009  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebx+0Ch] 40h +
push edi  +
mov edi eax +
jz loc_100E046  +
cmp dword ptr [ebx+8] 0 +
jnz loc_100E046  +
mov eax [ebp+arg_4] +
add [edi] eax +
jmp loc_100E082  +
cmp [ebp+arg_4] 0 +
jle loc_100E082  +
push esi  +
mov eax [ebp+arg_0] +
movzx esi word ptr [eax] +
dec [ebp+arg_4]  +
mov eax ebx +
call sub_100DFAF  +
add [ebp+arg_0] 2 +
cmp dword ptr [edi] 0FFFFFFFFh +
jnz loc_100E07B  +
call ds:__imp__errno  +
cmp dword ptr [eax] 2Ah +
jnz loc_100E081  +
push 3Fh  +
mov eax ebx +
pop esi  +
call sub_100DFAF  +
cmp [ebp+arg_4] 0 +
jg loc_100E04D  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_428] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_44C] edi +
mov [ebp+var_408] edi +
mov [ebp+var_430] edi +
mov [ebp+var_40C] edi +
mov [ebp+var_424] edi +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_42C] edi +
cmp eax edi +
jnz loc_100E10E  +
call ds:__imp__errno  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_100CDEE  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100EB4F  +
cmp esi edi +
jz loc_100E0ED  +
movzx ecx word ptr [esi] +
mov [ebp+var_420] edi +
mov [ebp+var_414] edi +
mov [ebp+var_440] edi +
mov [ebp+var_448] edi +
mov [ebp+var_41C] ecx +
cmp cx di +
jz loc_100EB49  +
inc esi  +
inc esi  +
cmp [ebp+var_420] edi +
mov [ebp+var_450] esi +
jl loc_100EB34  +
lea eax [ecx-20h] +
cmp ax 58h +
ja loc_100E168  +
movzx eax cx +
movzx eax byte ptr ds:(loc_1009ACE+2)[eax] +
and eax 0Fh +
jmp loc_100E16A  +
xor eax eax +
mov edx [ebp+var_440] +
imul eax eax +
movzx eax ds:byte_1009AF0[eax+edx] +
push 8  +
shr eax 4 +
pop edx  +
mov [ebp+var_440] eax +
cmp eax edx +
jz loc_100E0ED  +
cmp eax 7 +
ja loc_100EB11  +
jmp ds:off_100EB5E[eax*4]  +
or [ebp+var_40C] 0FFFFFFFFh +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_430] edi +
mov [ebp+var_424] edi +
mov [ebp+var_408] edi +
mov [ebp+var_42C] edi +
jmp loc_100EB1F  +
movzx eax cx +
sub eax 20h +
jz loc_100E21F  +
sub eax 3 +
jz loc_100E210  +
sub eax edx +
jz loc_100E204  +
dec eax  +
dec eax  +
jz loc_100E1F8  +
sub eax 3 +
jnz loc_100EB11  +
or [ebp+var_408] edx +
jmp loc_100EB1F  +
or [ebp+var_408] 4 +
jmp loc_100EB1F  +
or [ebp+var_408] 1 +
jmp loc_100EB1F  +
or [ebp+var_408] 80h +
jmp loc_100EB1F  +
or [ebp+var_408] 2 +
jmp loc_100EB1F  +
cmp cx 2Ah +
jnz loc_100E25C  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_430] eax +
jge loc_100EB1F  +
or [ebp+var_408] 4 +
neg [ebp+var_430]  +
jmp loc_100EB1F  +
mov eax [ebp+var_430] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_430] eax +
jmp loc_100EB1F  +
mov [ebp+var_40C] edi +
jmp loc_100EB1F  +
cmp cx 2Ah +
jnz loc_100E2AD  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_40C] eax +
jge loc_100EB1F  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_100EB1F  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_100EB1F  +
movzx eax cx +
cmp eax 49h +
jz loc_100E321  +
cmp eax 68h +
jz loc_100E315  +
cmp eax 6Ch +
jz loc_100E2F2  +
cmp eax 77h +
jnz loc_100EB1F  +
or [ebp+var_408] 800h +
jmp loc_100EB1F  +
cmp word ptr [esi] 6Ch +
jnz loc_100E309  +
inc esi  +
inc esi  +
or [ebp+var_408] 1000h +
jmp loc_100EB1F  +
or [ebp+var_408] 10h +
jmp loc_100EB1F  +
or [ebp+var_408] 20h +
jmp loc_100EB1F  +
movzx eax word ptr [esi] +
cmp ax 36h +
jnz loc_100E343  +
cmp word ptr [esi+2] 34h +
jnz loc_100E343  +
add esi 4 +
or [ebp+var_408] 8000h +
jmp loc_100EB1F  +
cmp ax 33h +
jnz loc_100E362  +
cmp word ptr [esi+2] 32h +
jnz loc_100E362  +
add esi 4 +
and [ebp+var_408] 0FFFF7FFFh +
jmp loc_100EB1F  +
cmp ax 64h +
jz loc_100EB1F  +
cmp ax 69h +
jz loc_100EB1F  +
cmp ax 6Fh +
jz loc_100EB1F  +
cmp ax 75h +
jz loc_100EB1F  +
cmp ax 78h +
jz loc_100EB1F  +
cmp ax 58h +
jz loc_100EB1F  +
mov [ebp+var_440] edi +
mov eax [ebp+var_428] +
lea edi [ebp+var_420] +
mov esi ecx +
mov [ebp+var_42C] 1 +
call sub_100DFAF  +
jmp loc_100EB17  +
movzx eax cx +
cmp eax 64h +
jg loc_100E61D  +
jz loc_100E670  +
cmp eax 53h +
jg loc_100E4F5  +
jz loc_100E460  +
sub eax 41h +
jz loc_100E3F8  +
dec eax  +
dec eax  +
jz loc_100E444  +
dec eax  +
dec eax  +
jz loc_100E3F8  +
dec eax  +
dec eax  +
jnz loc_100E974  +
add ecx 20h +
mov dword ptr [ebp+var_438] 1 +
mov [ebp+var_41C] ecx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] edi +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov eax 200h +
mov [ebp+var_434] eax +
jge loc_100E69F  +
mov [ebp+var_40C] 6 +
jmp loc_100E706  +
test [ebp+var_408] 830h +
jnz loc_100E517  +
or [ebp+var_408] 20h +
jmp loc_100E517  +
test [ebp+var_408] 830h +
jnz loc_100E473  +
or [ebp+var_408] 20h +
mov edi [ebp+var_40C] +
cmp edi 0FFFFFFFFh +
jnz loc_100E483  +
mov edi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_100E938  +
test ebx ebx +
jnz loc_100E4B1  +
mov eax off_10174A8 +
mov [ebp+var_410] eax +
and [ebp+var_414] 0 +
mov esi [ebp+var_410] +
test edi edi +
jle loc_100E974  +
mov al [esi] +
test al al +
jz loc_100E974  +
movzx eax al +
push eax  +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_100E4E0  +
inc esi  +
inc esi  +
inc [ebp+var_414]  +
cmp [ebp+var_414] edi +
jge loc_100E974  +
jmp loc_100E4C6  +
sub eax 58h +
jz loc_100E790  +
dec eax  +
dec eax  +
jz loc_100E590  +
sub eax 7 +
jz loc_100E40B  +
dec eax  +
dec eax  +
jnz loc_100E974  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor esi esi +
inc esi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_42C] esi +
mov [ebp+var_418] ebx +
mov dword ptr [ebp+var_458] eax +
jz loc_100E572  +
mov [ebp+var_444] al +
mov eax ds:__mb_cur_max +
mov byte ptr [ebp-443h] 0 +
push dword ptr [eax]  +
lea eax [ebp+var_444] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
call ds:mbtowc  +
add esp 0Ch +
test eax eax +
jge loc_100E579  +
mov [ebp+var_454] esi +
jmp loc_100E579  +
mov [ebp+var_404] ax +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov [ebp+var_414] esi +
jmp loc_100E974  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
cmp eax edi +
jz loc_100E601  +
mov esi [eax+4] +
cmp esi edi +
jz loc_100E601  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_100E0ED  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_100E5F0  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_100E0ED  +
mov edx esi +
not edx  +
test dl cl +
jz loc_100E0ED  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_42C] ecx +
jmp loc_100E96E  +
mov [ebp+var_42C] edi +
mov [ebp+var_410] esi +
jmp loc_100E96E  +
mov eax off_10174A8 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100E60F  +
sub eax edx +
jmp loc_100E96E  +
cmp eax 70h +
jg loc_100E79C  +
jz loc_100E78A  +
cmp eax 65h +
jl loc_100E974  +
cmp eax 67h +
jle loc_100E40B  +
cmp eax 69h +
jz loc_100E670  +
cmp eax 6Eh +
jz loc_100E0ED  +
cmp eax 6Fh +
jnz loc_100E974  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] edx +
jz loc_100E681  +
or [ebp+var_408] 200h +
jmp loc_100E681  +
or [ebp+var_408] 40h +
mov [ebp+var_41C] 0Ah +
mov eax [ebp+var_408] +
test eax 8000h +
jz loc_100E800  +
add ebx edx +
mov eax [ebx-8] +
mov edx [ebx-4] +
jmp loc_100E835  +
jnz loc_100E6B3  +
cmp cx 67h +
jnz loc_100E706  +
mov [ebp+var_40C] 1 +
jmp loc_100E706  +
cmp [ebp+var_40C] eax +
jle loc_100E6C1  +
mov [ebp+var_40C] eax +
mov edi 0A3h +
cmp [ebp+var_40C] edi +
jle loc_100E706  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call ds:__imp_malloc  +
pop ecx  +
mov ecx [ebp+var_41C] +
mov [ebp+var_448] eax +
test eax eax +
jz loc_100E700  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
jmp loc_100E706  +
mov [ebp+var_40C] edi +
test byte ptr [ebp+var_408] 80h +
jz loc_100E719  +
or dword ptr [ebp+var_438] 80h +
mov eax [ebx] +
push dword ptr [ebp+var_438]  +
mov esi [ebp+var_410] +
push [ebp+var_40C]  +
add ebx 8 +
mov [ebp+var_468] eax +
mov eax [ebx-4] +
mov [ebp+var_464] eax +
movsx eax cl +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_468] +
push esi  +
push eax  +
mov [ebp+var_418] ebx +
call sub_100D25E  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_100E774  +
or [ebp+var_408] 100h +
inc [ebp+var_410]  +
mov eax [ebp+var_410] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jz loc_100E616  +
jmp loc_100E77D  +
mov [ebp+var_40C] edx +
mov [ebp+var_44C] 7 +
jmp loc_100E7C0  +
sub eax 73h +
jz loc_100E473  +
dec eax  +
dec eax  +
jz loc_100E677  +
sub eax 3 +
jnz loc_100E974  +
mov [ebp+var_44C] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] 10h +
jz loc_100E681  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_43C] ax +
mov eax [ebp+var_44C] +
add eax 51h +
mov word ptr [ebp+var_43C+2] ax +
mov [ebp+var_424] 2 +
jmp loc_100E681  +
test eax 1000h +
jnz loc_100E692  +
add ebx 4 +
test al 20h +
jz loc_100E829  +
mov [ebp+var_418] ebx +
test al 40h +
jz loc_100E822  +
movsx eax word ptr [ebx-4] +
jmp loc_100E826  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_100E83B  +
test al 40h +
mov eax [ebx-4] +
jz loc_100E833  +
cdq   +
jmp loc_100E835  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_100E85F  +
cmp edx edi +
jg loc_100E85F  +
jl loc_100E84E  +
cmp eax edi +
jnb loc_100E85F  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_100E871  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_100E886  +
mov [ebp+var_40C] 1 +
jmp loc_100E8A0  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_100E8A0  +
mov [ebp+var_40C] eax +
mov eax edi +
or eax ebx +
jnz loc_100E8AC  +
and [ebp+var_424] eax +
lea esi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_100E8C8  +
mov eax edi +
or eax ebx +
jz loc_100E8F5  +
mov eax [ebp+var_41C] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_10075EB  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_45C] ebx +
mov edi eax +
mov ebx edx +
jle loc_100E8F0  +
add ecx [ebp+var_44C] +
mov [esi] cl +
dec esi  +
jmp loc_100E8B2  +
lea eax [ebp+var_205] +
sub eax esi +
inc esi  +
test [ebp+var_408] 200h +
mov [ebp+var_414] eax +
mov [ebp+var_410] esi +
jz loc_100E974  +
test eax eax +
jz loc_100E921  +
mov eax esi +
cmp byte ptr [eax] 30h +
jz loc_100E974  +
dec [ebp+var_410]  +
mov eax [ebp+var_410] +
inc [ebp+var_414]  +
mov byte ptr [eax] 30h +
jmp loc_100E974  +
test ebx ebx +
jnz loc_100E947  +
mov eax off_10174AC +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_42C] 1 +
jmp loc_100E962  +
dec edi  +
cmp word ptr [eax] 0 +
jz loc_100E966  +
inc eax  +
inc eax  +
test edi edi +
jnz loc_100E959  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_414] eax +
cmp [ebp+var_454] 0 +
jnz loc_100EAF4  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_100E9B6  +
test eax 100h +
jz loc_100E996  +
push 2Dh  +
jmp loc_100E9A4  +
test al 1 +
jz loc_100E99E  +
push 2Bh  +
jmp loc_100E9A4  +
test al 2 +
jz loc_100E9B6  +
push 20h  +
pop ecx  +
mov word ptr [ebp+var_43C] cx +
mov [ebp+var_424] 1 +
mov esi [ebp+var_430] +
sub esi [ebp+var_414] +
sub esi [ebp+var_424] +
mov [ebp+var_45C] esi +
test al 0Ch +
jnz loc_100E9E9  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_100DFFA  +
add esp 0Ch +
push [ebp+var_424]  +
mov ebx [ebp+var_428] +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+var_420] +
call sub_100E02B  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
pop ecx  +
jz loc_100EA2D  +
test byte ptr [ebp+var_408] 4 +
jnz loc_100EA2D  +
push ebx  +
push esi  +
push 30h  +
lea eax [ebp+var_420] +
call sub_100DFFA  +
add esp 0Ch +
cmp [ebp+var_42C] 0 +
jnz loc_100EAB2  +
mov eax [ebp+var_414] +
test eax eax +
jle loc_100EAB2  +
mov ecx [ebp+var_410] +
mov [ebp+var_41C] ecx +
mov [ebp+var_434] eax +
mov eax ds:__mb_cur_max +
push dword ptr [eax]  +
dec [ebp+var_434]  +
push [ebp+var_41C]  +
lea eax [ebp+var_458] +
push eax  +
call ds:mbtowc  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jle loc_100EAA9  +
mov eax [ebp+var_428] +
mov esi dword ptr [ebp+var_458] +
lea edi [ebp+var_420] +
call sub_100DFAF  +
add [ebp+var_41C] ebx +
cmp [ebp+var_434] 0 +
mov esi [ebp+var_45C] +
jle loc_100EACB  +
jmp loc_100EA52  +
or [ebp+var_420] 0FFFFFFFFh +
jmp loc_100EACB  +
push [ebp+var_414]  +
lea eax [ebp+var_420] +
push [ebp+var_410]  +
call sub_100E02B  +
pop ecx  +
pop ecx  +
cmp [ebp+var_420] 0 +
jl loc_100EAF4  +
test byte ptr [ebp+var_408] 4 +
jz loc_100EAF4  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_100DFFA  +
add esp 0Ch +
cmp [ebp+var_448] 0 +
jz loc_100EB11  +
push [ebp+var_448]  +
call ds:__imp_free  +
and [ebp+var_448] 0 +
pop ecx  +
mov ebx [ebp+var_418] +
mov esi [ebp+var_450] +
xor edi edi +
movzx eax word ptr [esi] +
mov [ebp+var_41C] eax +
cmp ax di +
jz loc_100EB34  +
mov ecx eax +
jmp loc_100E13C  +
cmp [ebp+var_440] edi +
jz loc_100EB49  +
cmp [ebp+var_440] 7 +
jnz loc_100E0ED  +
mov eax [ebp+var_420] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_100EB9E  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_100EBCF  +
cmp edi 3FFFFFFFh +
jbe loc_100EBC9  +
call ds:__imp__errno  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_100CDEE  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100EC5A  +
lea eax [edi+edi] +
mov [ebp+var_1C] eax +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_100E08A  +
xor ecx ecx +
xor ebx ebx +
add esp 0Ch +
cmp eax ebx +
mov [ebp+arg_4] eax +
mov [esi+edi*2-2] cx +
jge loc_100EC14  +
cmp [ebp+var_1C] ebx +
jl loc_100EC56  +
cmp esi ebx +
jz loc_100EC59  +
cmp edi ebx +
jbe loc_100EC59  +
mov [esi] cx +
jmp loc_100EC59  +
dec [ebp+var_1C]  +
js loc_100EC23  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_100EC34  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_100EDB9  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_100EC56  +
dec [ebp+var_1C]  +
js loc_100EC40  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_100EC51  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_100EDB9  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_100EC56  +
mov eax [ebp+arg_4] +
jmp loc_100EC59  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100EC79  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100EC75  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100ECDA  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100ECD2  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100ECDC  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100ECC2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10025E6  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_100EC63  +
pop ecx  +
test eax eax +
jz loc_100ED43  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_100EC9D  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100ED43  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100ED4C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_100262B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001335  +
push offset dword_1017004  +
call sub_100CF38  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call ds:_fileno  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_100EDED  +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_100EF2D  +
test al 40h +
jz loc_100EDFF  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_100EDE1  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_100EE18  +
mov [esi+4] ebx +
test al 10h +
jz loc_100EE73  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_100EE7B  +
mov eax ds:_iob +
lea ecx [eax+20h] +
cmp esi ecx +
jz loc_100EE44  +
add eax 40h +
cmp esi eax +
jnz loc_100EE52  +
push [ebp+arg_4]  +
call ds:_isatty  +
pop ecx  +
test eax eax +
jnz loc_100EE7B  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_100CDEE  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100EF2C  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_100EE6B  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_100EEFE  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_100EEAF  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_100EEF4  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_100EED2  +
cmp eax 0FFFFFFFEh +
jz loc_100EED2  +
mov edx ds:__pioinfo +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax [edx+ecx*4] +
jmp loc_100EED7  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 20h +
jz loc_100EEF4  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call ds:_lseeki64  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_100EF1A  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_100EF15  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_100EF23  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_100EF2B  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+CPInfo] +
push eax  +
push [ebp+CodePage]  +
call ds:GetCPInfo  +
mov ecx [ebp+var_4] +
neg eax  +
sbb eax eax +
xor ecx ebp +
neg eax  +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+6] 0 +
jz loc_100EF83  +
mov ecx dword_1017010 +
mov eax [ecx] +
call dword ptr [eax+8]  +
push [ebp+arg_4]  +
mov edx dword_101702C +
push [ebp+arg_0]  +
mov eax dword_1017010 +
mov ecx [eax] +
add edx 15h +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
add esp 10h +
mov eax 8004FFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
cmp [esi+4] eax +
jnz loc_100F017  +
xor ecx ecx +
push 4  +
add eax 0Ah +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_100EFE5  +
mov eax 8007000Eh +
jmp loc_100F063  +
add dword ptr [esi+8] 0Ah +
xor eax eax +
cmp [esi+4] eax +
jle loc_100EFFE  +
mov ecx [esi] +
mov ecx [ecx+eax*4] +
mov [edi+eax*4] ecx +
inc eax  +
cmp eax [esi+4] +
jl loc_100EFF0  +
mov eax [esi+4] +
jmp loc_100F008  +
and dword ptr [edi+eax*4] 0 +
inc eax  +
cmp eax [esi+8] +
jl loc_100F003  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
push ebx  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov edi eax +
inc edi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_100F048  +
mov eax 8007000Eh +
jmp loc_100F062  +
push [ebp+lpString]  +
push edi  +
push ebx  +
call sub_10031BD  +
mov eax [esi+4] +
mov ecx [esi] +
add esp 0Ch +
mov [ecx+eax*4] ebx +
inc dword ptr [esi+4]  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push offset WideCharStr  +
push [ebp+hKey]  +
mov esi ecx +
call sub_1003B78  +
test eax eax +
jl loc_100F0D1  +
cmp byte ptr [esi+4] 0 +
jz loc_100F09A  +
mov eax [esi] +
jmp loc_100F09C  +
xor eax eax +
push edi  +
push eax  +
push offset aTimeout  +
push [ebp+hKey]  +
call sub_1013670  +
mov edi eax +
test edi edi +
jl loc_100F0C5  +
movzx eax byte ptr [esi+6] +
push eax  +
push offset aDisplaylogo  +
push [ebp+hKey]  +
call sub_1013727  +
mov edi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 39Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+lpFileName] +
xor ebx ebx +
push edi  +
mov [ebp+lpWideCharStr] esi +
cmp byte_1017001 bl +
jz loc_100F138  +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_100F1CC  +
call ds:GetLastError  +
cmp eax 20h +
jnz loc_100F1D0  +
lea eax [ebp+FindFileData] +
push eax  +
push esi  +
call ds:FindFirstFileW  +
jmp loc_100F1B8  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push esi  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100F165  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100F1D5  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F1D5  +
call sub_100320B  +
mov [ebp+lpMultiByteStr] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_100F14F  +
push [ebp+lpMultiByteStr]  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jnz loc_100F1CC  +
call ds:GetLastError  +
cmp eax 20h +
jnz loc_100F1D0  +
lea eax [ebp+var_144] +
push eax  +
push [ebp+lpMultiByteStr]  +
call ds:FindFirstFileA  +
cmp eax ebx +
jz loc_100F1D0  +
cmp eax 0FFFFFFFFh +
jz loc_100F1D0  +
push eax  +
call ds:FindClose  +
xor eax eax +
jmp loc_100F1D5  +
test al 10h +
jz loc_100F1C8  +
mov eax 80070002h +
lea esp [ebp-3A8h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea ecx [ebp+FilePart] +
push ecx  +
lea ecx [ebp+WideCharStr] +
push ecx  +
mov edi 104h +
push edi  +
push eax  +
call sub_1003B1E  +
xor ebx ebx +
cmp eax ebx +
jl loc_100F2DD  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_100F0DB  +
cmp eax ebx +
jl loc_100F2DD  +
push offset word_1009AD4  +
push edi  +
lea eax [esi+1Ch] +
push eax  +
push offset KeyName  +
push offset AppName  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_101374C  +
cmp eax ebx +
jl loc_100F2DD  +
mov edi offset aOptions +
cmp [esi+5] bl +
jnz loc_100F2A5  +
push ebx  +
lea eax [ebp+var_214] +
push eax  +
push offset aTimeout  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_101391D  +
cmp eax ebx +
jl loc_100F2A0  +
mov ecx [ebp+var_214] +
mov byte ptr [esi+4] 1 +
mov [esi] ecx +
jmp loc_100F2A5  +
mov [esi+4] bl +
xor eax eax +
cmp [esi+8] bl +
jnz loc_100F2DD  +
push 1  +
lea eax [ebp-20Dh] +
push eax  +
push offset aDisplaylogo  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_1013A56  +
cmp eax ebx +
jl loc_100F2D8  +
mov cl [ebp+var_20D] +
mov byte ptr [esi+7] 1 +
mov [esi+6] cl +
jmp loc_100F2DD  +
mov [esi+7] bl +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push offset word_1009AD4  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+4]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax offset word_1009AD4 +
push eax  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [edx+4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov eax 8004FFFFh +
cmp ecx eax +
jz loc_100F3EE  +
cmp ecx 80020101h +
jz loc_100F3EE  +
cmp ecx 80070002h +
jl loc_100F3B8  +
cmp ecx 80070003h +
jg loc_100F3B8  +
push dword ptr [esi+238h]  +
mov eax dword_101702C +
push 0CEEh  +
add eax 15h +
push eax  +
mov ecx esi +
call sub_100F329  +
jmp loc_100F3E1  +
lea eax [ebp+var_4] +
push eax  +
push ecx  +
call sub_100F3F8  +
push [ebp+var_4]  +
mov ecx dword_101702C +
push dword ptr [esi+238h]  +
mov eax [esi] +
add ecx 14h +
push 0C84h  +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
push [ebp+var_4]  +
mov esi eax +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+Buffer] ebx +
mov [ebp+lpMultiByteStr] ebx +
push ebx  +
cmp byte_1017001 bl +
jz loc_100F4A2  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push ebx  +
push 11FFh  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_100F470  +
push 16h  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+Buffer] eax +
cmp eax ebx +
jnz loc_100F45D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100F458  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_100F47E  +
push [ebp+dwMessageId]  +
push offset a0x8x  +
push 0Bh  +
push eax  +
call sub_100CF17  +
add esp 10h +
push [ebp+Buffer]  +
call ds:SysAllocString  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov esi ds:LocalFree +
cmp [ebp+lpMultiByteStr] ebx +
jz loc_100F48E  +
push [ebp+lpMultiByteStr]  +
call esi  +
cmp [ebp+Buffer] ebx +
jz loc_100F498  +
push [ebp+Buffer]  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push ebx  +
push 11FFh  +
call ds:FormatMessageA  +
test eax eax +
jnz loc_100F4E1  +
push 0Bh  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_100F444  +
push [ebp+dwMessageId]  +
push offset dword_100F52C  +
push 0Bh  +
push eax  +
call sub_100CE89  +
add esp 10h +
mov esi ds:MultiByteToWideChar +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_100F444  +
lea eax [edi+edi] +
push eax  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+Buffer] eax +
cmp eax ebx +
jz loc_100F444  +
push edi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100F470  +
jmp loc_100F444  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+arg_4]  +
push [ebp+lpWideCharStr]  +
call sub_1002CB9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp+pperrinfo] +
push eax  +
mov [ebp+perrinfo] edi +
mov [ebp+pperrinfo] edi +
mov [ebp+lpWideCharStr] edi +
mov [ebp+var_10] edi +
call ds:CreateErrorInfo  +
mov esi eax +
cmp esi edi +
jl loc_100F64A  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_100F64A  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_100F64A  +
push [ebp+uID]  +
lea eax [ebp+lpWideCharStr] +
push eax  +
call sub_1003A91  +
test eax eax +
jnz loc_100F5D6  +
mov esi 8007000Eh +
jmp loc_100F64A  +
lea eax [ebp+arg_C] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+lpWideCharStr]  +
call sub_1002CB9  +
mov esi eax +
cmp esi edi +
mov [ebp+Arguments] edi +
jl loc_100F64A  +
mov eax [ebp+pperrinfo] +
push [ebp+var_10]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi edi +
jl loc_100F64A  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi edi +
jl loc_100F64A  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jl loc_100F64A  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
lea edx [ebp+perrinfo] +
push edx  +
push offset dword_1009C20  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_100F64A  +
push [ebp+perrinfo]  +
push edi  +
call ds:SetErrorInfo  +
mov esi eax +
mov eax [ebp+pperrinfo] +
cmp eax edi +
jz loc_100F657  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+perrinfo] +
cmp eax edi +
jz loc_100F664  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+lpWideCharStr]  +
mov edi ds:SysFreeString +
call edi  +
push [ebp+var_10]  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp+pperrinfo] +
push eax  +
mov [ebp+perrinfo] edi +
mov [ebp+pperrinfo] edi +
mov [ebp+var_C] edi +
call ds:CreateErrorInfo  +
mov esi eax +
cmp esi edi +
jl loc_100F73E  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_100F73E  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_100F73E  +
lea eax [ebp+arg_C] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+lpWideCharStr]  +
call sub_1002CB9  +
mov eax [ebp+pperrinfo] +
push [ebp+var_C]  +
mov [ebp+Arguments] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi edi +
jl loc_100F73E  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi edi +
jl loc_100F73E  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jl loc_100F73E  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
lea edx [ebp+perrinfo] +
push edx  +
push offset dword_1009C20  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_100F73E  +
push [ebp+perrinfo]  +
push edi  +
call ds:SetErrorInfo  +
mov esi eax +
mov eax [ebp+pperrinfo] +
cmp eax edi +
jz loc_100F74B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+perrinfo] +
cmp eax edi +
jz loc_100F758  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_C]  +
call ds:SysFreeString  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push 20006h  +
push 0  +
push [ebp+phkResult]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
mov esi eax +
test esi esi +
jnz loc_100F7B9  +
push [ebp+lpData]  +
call ds:lstrlenA  +
inc eax  +
push eax  +
push [ebp+lpData]  +
push 1  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegSetValueExA  +
push [ebp+phkResult]  +
mov esi eax +
call ds:RegCloseKey  +
test esi esi +
jle loc_100F7C7  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push 0  +
push [ebp+phkResult]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
mov esi eax +
test esi esi +
jnz loc_100F801  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
test esi esi +
jle loc_100F80F  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+phkResult]  +
xor esi esi +
push 20006h  +
push esi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
cmp eax esi +
jz loc_100F85D  +
push [ebp+phkResult]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyA  +
cmp eax esi +
jz loc_100F85D  +
jle loc_100F85B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100F87F  +
cmp ecx 7FFFFFFFh +
jbe loc_100F884  +
mov eax 80070057h +
test eax eax +
jl loc_100F8C0  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call _vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100F8B3  +
cmp eax esi +
ja loc_100F8B3  +
jnz loc_100F8BB  +
mov [esi+edi] bl +
jmp loc_100F8BB  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword ptr [ebp+arg_0] +
push esi  +
push offset stru_1009B50  +
push eax  +
push offset aSoftwareClasse  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call sub_100F869  +
mov esi eax +
add esp 14h +
test esi esi +
jl loc_100F944  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call sub_100F81B  +
mov esi eax +
test esi esi +
jl loc_100F944  +
push edi  +
mov eax offset phkResult +
push eax  +
push eax  +
push [ebp+hKey]  +
call sub_100F76C  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi eax +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
xor esi esi +
push esi  +
push [ebp+lpSubKey]  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_100F9F8  +
cmp [ebp+arg_4] esi +
jz loc_100F9B9  +
push offset stru_100FA18  +
push [ebp+hKey]  +
call sub_100F7D3  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
jmp loc_100F9BC  +
xor eax eax +
inc eax  +
test eax eax +
jz loc_100F9ED  +
push edi  +
push offset phkResult  +
push offset stru_1009B50  +
push [ebp+hKey]  +
call sub_100F76C  +
mov esi eax +
test esi esi +
jge loc_100F9ED  +
and eax 0FFFFh +
cmp eax 5 +
jnz loc_100F9ED  +
push [ebp+lpSubKey]  +
call sub_100F8C7  +
mov esi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100FA0D  +
cmp [ebp+arg_4] esi +
jnz loc_100FA0D  +
test eax eax +
jle loc_100FA0B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] 43h +
jz loc_100FA61  +
cmp [ebp+arg_0] 57h +
jz loc_100FA55  +
mov eax 80070057h +
jmp loc_100FBAD  +
mov [ebp+var_214] offset aOpen +
jmp loc_100FA6B  +
mov [ebp+var_214] offset aOpen2 +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
mov [ebp+dwIndex] ebx +
mov edi 104h +
push ebx  +
mov esi 80000000h +
jmp loc_100FB58  +
cmp eax ebx +
jnz loc_100FB9E  +
cmp [ebp+Name] 2Eh +
jnz loc_100FB3A  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
lea eax [ebp+Name] +
push eax  +
push esi  +
call ds:RegOpenKeyExA  +
cmp eax ebx +
jnz loc_100FB9E  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push ebx  +
push ebx  +
push offset phkResult  +
push [ebp+hKey]  +
mov [ebp+cbName] edi +
call ds:RegQueryValueExA  +
push [ebp+hKey]  +
mov [ebp+var_220] eax +
call ds:RegCloseKey  +
cmp [ebp+var_220] ebx +
jnz loc_100FB3A  +
mov eax [ebp+cbName] +
cmp eax ebx +
jz loc_100FB3A  +
mov [ebp+eax+var_109] bl +
push 1  +
lea eax [ebp+SubKey] +
push eax  +
mov eax [ebp+var_214] +
call sub_100F974  +
cmp eax ebx +
jl loc_100FBAA  +
inc [ebp+dwIndex]  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
push esi  +
mov [ebp+cbName] edi +
call ds:RegEnumKeyExA  +
cmp eax 103h +
jnz loc_100FA98  +
mov eax [ebp+var_214] +
push ebx  +
push offset aWsffile  +
call sub_100F974  +
cmp eax ebx +
jl loc_100FBAA  +
mov eax [ebp+var_214] +
push ebx  +
push offset aWshfile  +
call sub_100F974  +
cmp eax ebx +
jl loc_100FBAA  +
xor eax eax +
jmp loc_100FBAA  +
jle loc_100FBAA  +
and eax 0FFFFh +
or eax 80070000h +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push 5  +
lea ecx [ebp+ClassName] +
push ecx  +
push eax  +
call ds:GetClassNameA  +
cmp eax 3 +
jnz loc_100FC37  +
cmp byte ptr [ebp-9] 0 +
jnz loc_100FC37  +
cmp [ebp+ClassName] 49h +
jz loc_100FC1A  +
cmp [ebp+ClassName] 69h +
jnz loc_100FC37  +
cmp byte ptr [ebp-0Bh] 4Dh +
jz loc_100FC26  +
cmp byte ptr [ebp-0Bh] 6Dh +
jnz loc_100FC37  +
cmp byte ptr [ebp-0Ah] 45h +
jz loc_100FC32  +
cmp byte ptr [ebp-0Ah] 65h +
jnz loc_100FC37  +
xor eax eax +
inc eax  +
jmp loc_100FC39  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_100FC5D  +
inc eax  +
jmp loc_100FC7F  +
push 0  +
push [ebp+wParam]  +
push 401h  +
push eax  +
call ds:SendMessageA  +
mov eax [esi+0Ch] +
test eax eax +
jle loc_100FC7F  +
and eax 0FFFFh +
or eax 80070000h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+hWnd] +
push edi  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_100FCDC  +
push esi  +
mov esi edi +
test edi edi +
jz loc_100FCBB  +
push esi  +
call sub_100FBE1  +
test al al +
jnz loc_100FCDB  +
push esi  +
call ds:GetParent  +
mov esi eax +
test esi esi +
jnz loc_100FCA4  +
mov esi ds:PostMessageA +
push 0  +
push 0  +
push 10h  +
push edi  +
call esi  +
push 0  +
push 0Dh  +
push 100h  +
push edi  +
call esi  +
mov eax [ebp+arg_4] +
inc dword ptr [eax]  +
pop esi  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:KillTimer  +
mov ecx [esi+8] +
and dword ptr [esi+4] 0 +
push 8004FFFEh  +
call sub_10063B1  +
and [ebp+lParam] 0 +
lea eax [ebp+lParam] +
push eax  +
push offset fn  +
push dword ptr [esi+18h]  +
call ds:EnumThreadWindows  +
cmp [ebp+lParam] 0 +
jnz loc_100FD0E  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_100FD45  +
mov eax 80004003h +
jmp loc_100FD81  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset riid +
xor eax eax +
cmps   +
jz loc_100FD72  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100FD88 +
xor eax eax +
cmps   +
jz loc_100FD72  +
and [edx] eax +
mov eax 80004002h +
jmp loc_100FD7F  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 2710h +
sbb eax eax +
and eax 1F5h +
dec eax  +
pop ebp  +
retn 10h  +
***
xor eax eax +
inc eax  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
xor esi esi +
lea edx [ebp+var_8] +
push edx  +
mov [eax] esi +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edi offset riid +
push edi  +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jl loc_100FE45  +
mov esi dword_1017014 +
jmp loc_100FE35  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100FE17  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov eax [esi+4] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_100FE45  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jz loc_100FE39  +
mov esi [esi+18h] +
test esi esi +
jnz loc_100FE06  +
mov eax [ebp+arg_4] +
xor ebx ebx +
test esi esi +
mov [eax] esi +
setz bl  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_100FE52  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100FE5F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
test [edx-454B4E6Ah] dh +
sbb dl [eax] +
mov dh 9Ch +
add [edx+71D3400h] ch +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_C] +
test edx edx +
jnz loc_100FF8C  +
mov eax 80004003h +
jmp loc_100FFDF  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001638 +
xor eax eax +
cmps   +
jnz loc_100FFA4  +
mov eax [ebp+arg_4] +
jmp loc_100FFC9  +
mov esi [ebp+arg_8] +
push 4  +
xor eax eax +
mov eax [ebp+arg_4] +
pop ecx  +
mov edi offset riid +
cmps   +
jz loc_100FFC9  +
mov esi [ebp+arg_8] +
push ebx  +
push 4  +
pop ecx  +
xor ebx ebx +
lea edi [eax+20h] +
cmps   +
pop ebx  +
jnz loc_100FFD5  +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100FFDD  +
and dword ptr [edx] 0 +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+1Ch]  +
mov eax [eax+1Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
mov eax 8002000Bh +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
jnz loc_1010040  +
mov eax 80004003h +
jmp loc_1010067  +
cmp dword ptr [ebp+1Ch] 0 +
jz loc_1010039  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
xor eax eax +
pop ecx  +
mov edi offset dword_1001804 +
cmps   +
setz al  +
pop edi  +
pop esi  +
dec eax  +
and eax 6C056h +
add eax 80004001h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+10h] +
xor ebx ebx +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001804 +
xor eax eax +
cmps   +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
mov [ebp-0Ch] ebx +
jz loc_10100AD  +
mov edi 80070057h +
jmp loc_101030A  +
mov esi [ebp+8] +
mov eax [esi+0Ch] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push 1  +
lea edx [ebp-4] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_10102A7  +
cmp [ebp-10h] ebx +
jnz loc_10100DF  +
mov edi 8000FFFFh +
jmp loc_10102A7  +
push dword ptr [esi+8]  +
mov ebx ds:lstrlenW +
call ebx  +
push dword ptr [ebp-4]  +
mov edi eax +
call ebx  +
add edi eax +
push edi  +
push 0  +
call ds:SysAllocStringLen  +
mov [ebp-8] eax +
test eax eax +
jz loc_1010250  +
push dword ptr [esi+8]  +
inc edi  +
push edi  +
push eax  +
call sub_10031BD  +
push dword ptr [ebp-4]  +
push edi  +
push dword ptr [ebp-8]  +
call sub_10036CD  +
mov ecx dword_1017010 +
add esp 18h +
lea eax [ebp-0Ch] +
push eax  +
call sub_1010555  +
mov edi eax +
test edi edi +
jl loc_10102A7  +
mov eax [ebp-0Ch] +
and dword ptr [ebp+0Ch] 0 +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+14h]  +
lea edx [ebp-8] +
push 1  +
push edx  +
push offset dword_1001804  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jge loc_1010172  +
cmp edi 80020006h +
jnz loc_10102A7  +
xor edi edi +
jmp loc_10102A7  +
mov ebx [ebp+1Ch] +
mov ecx [ebx+0Ch] +
test ecx ecx +
jbe loc_101018F  +
mov eax [ebx+4] +
cmp dword ptr [eax] 0FFFFFD9Bh +
jnz loc_101018F  +
mov [ebp+8] ebx +
jmp loc_1010278  +
lea eax [ebp-20h] +
mov [ebp+8] eax +
mov eax [ebx+8] +
inc eax  +
inc ecx  +
mov [ebp-14h] ecx +
xor ecx ecx +
push 10h  +
pop edx  +
mov [ebp-18h] eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-20h] eax +
test eax eax +
jz loc_1010250  +
push 9  +
pop ecx  +
mov [eax] cx +
mov eax [esi+4] +
mov ecx [ebp-20h] +
mov [ecx+8] eax +
mov esi [esi+4] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor edi edi +
inc edi  +
cmp [ebp-18h] edi +
jbe loc_10101F8  +
push 10h  +
pop esi  +
mov eax [ebp-20h] +
add eax esi +
push eax  +
call ds:VariantInit  +
inc edi  +
add esi 10h +
cmp edi [ebp-18h] +
jb loc_10101E3  +
xor eax eax +
inc eax  +
mov [ebp+10h] eax +
cmp [ebp-18h] eax +
jbe loc_1010231  +
push 10h  +
pop esi  +
mov eax [ebx] +
lea eax [eax+esi-10h] +
push eax  +
mov eax [ebp-20h] +
add eax esi +
push eax  +
call ds:VariantCopy  +
mov edi eax +
test edi edi +
jl loc_10102A7  +
inc dword ptr [ebp+10h]  +
mov eax [ebp+10h] +
add esi 10h +
cmp eax [ebp-18h] +
jb loc_1010206  +
mov eax [ebp-14h] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1010257  +
mov edi 8007000Eh +
jmp loc_10102A7  +
mov dword ptr [eax] 0FFFFFD9Bh +
xor eax eax +
inc eax  +
cmp [ebp-14h] eax +
jbe loc_1010278  +
mov ecx [ebx+4] +
mov ecx [ecx+eax*4-4] +
mov edx [ebp-1Ch] +
mov [edx+eax*4] ecx +
inc eax  +
cmp eax [ebp-14h] +
jb loc_1010265  +
push 0  +
push 0  +
call ds:SetErrorInfo  +
push dword ptr [ebp+28h]  +
mov eax [ebp-0Ch] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push offset dword_1001804  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
xor ebx ebx +
cmp [ebp-20h] ebx +
jz loc_10102D3  +
xor esi esi +
cmp [ebp-18h] esi +
jbe loc_10102CA  +
mov eax [ebp-20h] +
add eax esi +
push eax  +
call ds:VariantClear  +
inc ebx  +
add esi 10h +
cmp ebx [ebp-18h] +
jb loc_10102B5  +
push dword ptr [ebp-20h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor ebx ebx +
cmp [ebp-1Ch] ebx +
jz loc_10102E3  +
push dword ptr [ebp-1Ch]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi ds:SysFreeString +
cmp [ebp-4] ebx +
jz loc_10102F3  +
push dword ptr [ebp-4]  +
call esi  +
cmp [ebp-8] ebx +
jz loc_10102FD  +
push dword ptr [ebp-8]  +
call esi  +
mov eax [ebp-0Ch] +
cmp eax ebx +
jz loc_101030A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009B58 +
mov eax dword_1017014 +
mov ecx offset dword_1017014 +
jmp loc_1010338  +
cmp eax esi +
jz loc_101033E  +
lea ecx [eax+18h] +
mov eax [ecx] +
test eax eax +
jz loc_1010343  +
jmp loc_101032F  +
mov eax [eax+18h] +
mov [ecx] eax +
mov eax [esi+10h] +
test eax eax +
jz loc_101035C  +
push dword ptr [esi+14h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1010369  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+4] +
test eax eax +
jz loc_1010376  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi+8]  +
call ds:SysFreeString  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010318  +
test [ebp+arg_0] 1 +
jz loc_10103A0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+1Ch]  +
mov eax [ecx+1Ch] +
cmp eax 1 +
jnb loc_10103C8  +
push 1  +
call sub_1010386  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
or dword ptr [eax+14h] 0FFFFFFFFh +
xor ecx ecx +
mov dword ptr [eax] offset off_1009B58 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov dword ptr [eax+1Ch] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+21h] 0 +
jz loc_101040B  +
xor eax eax +
inc eax  +
jmp loc_101041D  +
mov eax [ebp+wParam] +
mov [ecx+8] eax +
mov ecx [ecx+24Ch] +
push eax  +
call sub_100FC4C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_5C] eax +
xor edi edi +
lea eax [ebp+ppbc] +
push eax  +
push edi  +
mov [ebp+var_60] ecx +
mov [ebp+ppbc] edi +
mov [ebp+var_50] edi +
mov [ebp+lpMultiByteStr] edi +
call ds:CreateBindCtx  +
mov esi eax +
cmp esi edi +
jl loc_1010507  +
mov eax [ebp+ppbc] +
lea edx [ebp+var_70] +
push edx  +
mov [ebp+var_70] 10h +
mov [ebp+var_6C] edi +
mov [ebp+var_68] edi +
mov [ebp+var_64] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi edi +
jl loc_1010507  +
mov eax [ebx] +
lea ecx [ebp+var_50] +
push ecx  +
push offset dword_1010540  +
push edi  +
push [ebp+ppbc]  +
push ebx  +
call dword ptr [eax+24h]  +
mov esi eax +
cmp esi edi +
jl loc_1010507  +
mov eax [ebp+var_50] +
mov ecx [eax] +
push 1  +
lea edx [ebp+var_4C] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi edi +
jl loc_1010507  +
cmp [ebp+var_40] edi +
jnz loc_10104CF  +
mov ebx [ebp+len] +
push ebx  +
push edi  +
call ds:SysAllocStringByteLen  +
mov [ebp+lpMultiByteStr] eax +
cmp eax edi +
jnz loc_10104D6  +
mov esi 8007000Eh +
jmp loc_1010507  +
mov eax [ebp+var_50] +
mov ecx [eax] +
push edi  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1010507  +
jz loc_10104F3  +
mov esi 80004005h +
jmp loc_1010507  +
push [ebp+var_5C]  +
mov eax [ebp+var_60] +
push ebx  +
push [ebp+lpMultiByteStr]  +
push dword ptr [eax+18h]  +
call sub_10057A1  +
mov esi eax +
push [ebp+lpMultiByteStr]  +
call ds:SysFreeString  +
mov eax [ebp+var_50] +
cmp eax edi +
jz loc_101051D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppbc] +
cmp eax edi +
jz loc_101052A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
lea esi [ecx+258h] +
cmp dword ptr [esi] 0 +
jnz loc_1010583  +
mov ecx [ecx+244h] +
test ecx ecx +
jz loc_1010597  +
push esi  +
push 0  +
call sub_1010A77  +
test eax eax +
jl loc_1010591  +
mov eax [esi] +
mov [edi] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax 80004005h +
jmp loc_1010591  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [esi+28h] ebx +
jnz loc_10105C8  +
xor eax eax +
jmp loc_1010604  +
mov ecx [esi+244h] +
lea eax [ebp+var_14] +
push eax  +
call sub_1010DA2  +
test eax eax +
jl loc_10105DE  +
lea ebx [ebp+var_14] +
xor eax eax +
inc eax  +
cmp [esi+28h] eax +
jnz loc_10105EC  +
cmp byte ptr [esi+20h] 0 +
jz loc_10105EE  +
xor eax eax +
push eax  +
push ebx  +
push edi  +
call ds:SysStringLen  +
push eax  +
push edi  +
push dword ptr [esi+238h]  +
call sub_101147F  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jnz loc_101062F  +
mov eax 80004003h +
jmp loc_10106A4  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1009C30 +
xor ebx ebx +
cmps   +
jnz loc_1010648  +
lea ecx [eax-8] +
jmp loc_1010687  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_10106A8 +
xor ebx ebx +
cmps   +
jz loc_1010643  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_10106C8 +
xor ebx ebx +
cmps   +
jz loc_1010643  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_10106B8 +
xor ebx ebx +
cmps   +
jnz loc_1010696  +
lea ecx [eax-8] +
neg ecx  +
lea esi [eax-4] +
sbb ecx ecx +
and ecx esi +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_10106A1  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1001621  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
pop ds  +
cmp al 97h +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
and [edi+edx*4] bh +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
and bh [edi+edx*4] +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_10106EF  +
mov eax 80004003h +
jmp loc_10106FE  +
xor eax eax +
cmp [ebp+10h] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_101071A  +
mov eax 80004003h +
jmp loc_101071F  +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 0FFFFFFFCh +
mov ecx [eax] +
push offset dword_1009C30  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_101075D  +
mov eax 80004003h +
jmp loc_10107AF  +
cmp dword ptr [ebp+0Ch] 0 +
jl loc_10107AA  +
cmp dword ptr [ebp+0Ch] 3 +
jg loc_10107AA  +
push esi  +
mov esi [ebp+8] +
push 5Ch  +
push dword ptr [esi+30h]  +
call sub_1003D0D  +
test eax eax +
jnz loc_101078E  +
push 2Fh  +
push dword ptr [esi+30h]  +
call sub_1003D0D  +
test eax eax +
jnz loc_101078E  +
mov eax [esi+30h] +
jmp loc_1010790  +
inc eax  +
inc eax  +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
pop esi  +
jmp loc_10107AF  +
mov eax 80070057h +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+44h] +
cmp ecx 0FFFFFFFFh +
jnz loc_10107ED  +
mov eax 80004005h +
jmp loc_101080A  +
cmp dword ptr [eax+40h] 0FFFFFFFFh +
jz loc_10107E6  +
mov edx [ebp+0Ch] +
test edx edx +
jz loc_10107FC  +
mov [edx] ecx +
mov ecx [ebp+10h] +
test ecx ecx +
jz loc_1010808  +
mov eax [eax+40h] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_1010827  +
mov eax 80004003h +
jmp loc_101086B  +
mov edx [ebp+8] +
push esi  +
mov esi [ebp+0Ch] +
cmp esi [edx+44h] +
jbe loc_101083A  +
mov eax 80070057h +
jmp loc_101086A  +
mov ecx [edx+24h] +
mov edx [edx+40h] +
mov eax ecx +
lea edx [ecx+edx*2] +
cmp esi 1 +
jb loc_1010862  +
cmp ecx edx +
jnb loc_1010862  +
push ebx  +
mov bx [eax] +
inc eax  +
inc eax  +
cmp bx 0Ah +
jnz loc_101085D  +
dec esi  +
jz loc_1010861  +
cmp eax edx +
jb loc_101084F  +
pop ebx  +
sub eax ecx +
sar eax 1 +
mov [edi] eax +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebp+8] +
lea ecx [ebx+eax] +
mov eax [esi+40h] +
push edi  +
mov [ebp+1Ch] ecx +
cmp ecx eax +
jb loc_1010896  +
mov [ebp+1Ch] eax +
mov edi [ebp+1Ch] +
mov eax [ebp+18h] +
sub edi ebx +
test eax eax +
jz loc_10108A4  +
mov [eax] edi +
lea eax [ebp+8] +
push eax  +
push 2  +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_100434F  +
test eax eax +
jl loc_1010948  +
cmp dword ptr [ebp+10h] 0 +
jz loc_10108D9  +
mov eax [esi+24h] +
push dword ptr [ebp+8]  +
lea eax [eax+ebx*2] +
push eax  +
push dword ptr [ebp+10h]  +
call memcpy  +
add esp 0Ch +
mov ebx [ebp+14h] +
test ebx ebx +
jz loc_1010946  +
lea ecx [ebx+edi*2] +
cmp ebx ecx +
jnb loc_1010905  +
sub ecx ebx +
push 4  +
dec ecx  +
pop eax  +
movzx edx ax +
shr ecx 1 +
inc ecx  +
mov eax edx +
shl edx 10h +
or eax edx +
shr ecx 1 +
mov edi ebx +
stos   +
adc ecx ecx +
stos   +
mov eax [esi+38h] +
mov ecx [ebp+0Ch] +
mov edi ecx +
test eax eax +
jz loc_1010946  +
cmp ecx [eax+2Ch] +
ja loc_1010946  +
mov ecx [eax+24h] +
cmp ecx [ebp+1Ch] +
jnb loc_1010946  +
mov eax [esi+24h] +
lea edx [eax+ecx*2] +
mov eax [esi+38h] +
mov esi ecx +
sub esi edi +
lea esi [ebx+esi*2] +
push esi  +
mov esi [eax+2Ch] +
push 0  +
push 0  +
sub esi ecx +
mov ecx [eax+20h] +
push esi  +
push edx  +
call sub_1010D59  +
test eax eax +
jl loc_1010948  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_1010968  +
mov eax 80004003h +
jmp loc_10109B4  +
push esi  +
mov esi [ebp+14h] +
test esi esi +
jnz loc_1010977  +
mov eax 80004003h +
jmp loc_10109B3  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push offset dword_1009BA8  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_1010993  +
mov eax 80004001h +
jmp loc_10109B3  +
mov eax [ebp+10h] +
mov ecx [eax] +
lea edx [ebp+14h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_10109B3  +
mov eax [ebp+14h] +
mov ecx [eax+24h] +
mov [edi] ecx +
mov eax [eax+28h] +
mov [esi] eax +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+38h] +
test eax eax +
jz loc_1010A0A  +
mov ecx [ebp+0Ch] +
cmp ecx [eax+24h] +
jb loc_1010A0A  +
mov edx [ebp+10h] +
push edi  +
lea edi [ecx+edx] +
cmp edi [eax+2Ch] +
pop edi  +
ja loc_1010A0A  +
lea esi [ebp+8] +
push esi  +
push edx  +
push ecx  +
push dword ptr [eax+20h]  +
push dword ptr [eax+1Ch]  +
call sub_100511B  +
test eax eax +
jl loc_1010A0A  +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
mov ecx [eax] +
push offset dword_1009C40  +
push eax  +
call dword ptr [ecx]  +
jmp loc_1010A0F  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 10h  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10107B9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1010749  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_1010A63  +
mov eax [esi+24h] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1010A63  +
xor eax eax +
pop esi  +
cmp eax 80020101h +
jnz locret_1010A70  +
mov eax 8004FFFFh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ecx+24h] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1010AA8  +
mov eax 80004003h +
jmp loc_1010AB2  +
call ds:GetActiveWindow  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+24h] +
movzx eax byte ptr [eax+20h] +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop ebp  +
retn 8  +
***
xor eax eax +
retn 0Ch  +
***
mov edi edi +
adc bh [edi+edx*4] +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
sub edi [edi+edx*4] +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
jnz loc_1010C83  +
mov eax 80004003h +
jmp loc_1010CE3  +
mov eax [ebp+arg_4] +
mov ecx [eax+1Ch] +
cmp ecx [ebp+arg_8] +
jz loc_1010C95  +
mov eax 80070057h +
jmp loc_1010CE3  +
mov edx [eax+3Ch] +
push esi  +
push edi  +
test edx edx +
jz loc_1010CDC  +
mov esi [ebp+arg_C] +
cmp esi [edx+24h] +
jb loc_1010CDC  +
mov ecx edx +
mov edi [ecx+28h] +
add edi [ecx+24h] +
mov ecx [ebp+arg_10] +
push ebx  +
lea ebx [esi+ecx] +
cmp ebx edi +
pop ebx  +
ja loc_1010CDC  +
lea edi [ebp+arg_4] +
push edi  +
push ecx  +
push esi  +
add eax 0FFFFFFFCh +
push eax  +
push dword ptr [edx+1Ch]  +
call sub_100511B  +
test eax eax +
jl loc_1010CE1  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
xor eax eax +
jmp loc_1010CE1  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1010CFE  +
mov eax 80004003h +
jmp loc_1010D1E  +
mov eax [ebp+8] +
mov eax [eax+28h] +
mov eax [eax+254h] +
test eax eax +
jnz loc_1010D15  +
mov eax 80004001h +
jmp loc_1010D1E  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
jnz loc_1010D3A  +
mov eax 80004003h +
jmp loc_1010D50  +
cmp [ebp+10h] eax +
jz loc_1010D33  +
xor ecx ecx +
cmp [ebp+14h] eax +
setz cl  +
lea ecx [ecx+ecx-7FFFBFFFh] +
mov eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
mov eax [ecx+4Ch] +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ecx+4Ch] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+14h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+24h] +
and [ebp+var_4] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1010DEC  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1010DD8  +
mov eax [ebp+var_4] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_1010DD8  +
xor esi esi +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1010DE5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001EA5  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001EED  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001F07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_C] +
push ebx  +
xor ebx ebx +
mov [eax] ebx +
mov eax [ebp+arg_10] +
push esi  +
push edi  +
mov [ebp+lpMultiByteStr] ebx +
mov [ebp+hObject] ebx +
mov [ebp+Buffer] 0FEFFh +
cmp eax ebx +
jz loc_1010E5A  +
mov [eax] ebx +
mov edi ds:WideCharToMultiByte +
cmp [ebp+lpWideCharStr] ebx +
jz loc_1010E96  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jnz loc_1010E96  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_1010E8A  +
mov esi eax +
jmp loc_10110A8  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010E83  +
mov esi ds:GetTempPathA +
push ebx  +
push ebx  +
call esi  +
cmp eax ebx +
jz loc_1010E79  +
inc eax  +
push eax  +
mov [ebp+var_14] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+lpPathName] eax +
cmp eax ebx +
jnz loc_1010EC0  +
mov esi 8007000Eh +
jmp loc_101108C  +
push eax  +
push [ebp+var_14]  +
call esi  +
cmp eax ebx +
jnz loc_1010EE7  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_1010EDB  +
mov esi eax +
jmp loc_101108C  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010ED4  +
mov ecx [ebp+lpMultiByteStr] +
lea esi [eax+ecx+0Fh] +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jnz loc_1010F06  +
mov esi 8007000Eh +
jmp loc_101107E  +
push eax  +
push ebx  +
push offset PrefixString  +
push [ebp+lpPathName]  +
call ds:GetTempFileNameA  +
test eax eax +
jnz loc_1010F37  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_1010F2B  +
mov esi eax +
jmp loc_101107E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010F24  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_1010F66  +
mov ecx [ebp+lpMultiByteStr] +
mov eax ecx +
lea edx [eax+1] +
mov [ebp+var_14] edx +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1010F47  +
sub eax [ebp+var_14] +
push ebx  +
push ebx  +
sub esi eax +
push esi  +
add eax ecx +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
test eax eax +
jz loc_1010F1A  +
push ebx  +
push 4002100h  +
push 2  +
push ebx  +
push ebx  +
push 0C0000000h  +
push [ebp+lpMultiByteStr]  +
call ds:CreateFileA  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1010F89  +
mov [ebp+hObject] ebx +
cmp [ebp+hObject] ebx +
jz loc_1010F1A  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jle loc_1010FE9  +
mov eax [ebp+lpBuffer] +
mov ax [eax] +
mov esi ds:WriteFile +
cmp ax word ptr [ebp+Buffer] +
jz loc_1010FBF  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hObject]  +
call esi  +
test eax eax +
jz loc_1010F1A  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
lea eax [edi+edi] +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call esi  +
test eax eax +
jz loc_1010F1A  +
push [ebp+hObject]  +
call ds:FlushFileBuffers  +
test eax eax +
jz loc_1010F1A  +
cmp [ebp+arg_10] ebx +
jz loc_1011060  +
mov eax [ebp+lpMultiByteStr] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_1010FF4  +
push ebx  +
push ebx  +
sub eax esi +
mov esi ds:MultiByteToWideChar +
push eax  +
push [ebp+lpMultiByteStr]  +
mov [ebp+lpBuffer] eax +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1010F1A  +
push edi  +
push ebx  +
call ds:SysAllocStringLen  +
mov [ebp+lpWideCharStr] eax +
cmp eax ebx +
jnz loc_1011030  +
mov esi 8007000Eh +
jmp loc_1011070  +
push edi  +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1011058  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011054  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1011070  +
mov eax [ebp+lpWideCharStr] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
mov ecx [ebp+hObject] +
mov eax [ebp+arg_C] +
mov [ebp+lpWideCharStr] ebx +
mov [eax] ecx +
mov [ebp+hObject] ebx +
xor esi esi +
cmp [ebp+lpWideCharStr] ebx +
jz loc_101107E  +
push [ebp+lpWideCharStr]  +
call ds:SysFreeString  +
cmp [ebp+lpMultiByteStr] ebx +
jz loc_101108C  +
push [ebp+lpMultiByteStr]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+lpPathName] ebx +
jz loc_101109A  +
push [ebp+lpPathName]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+hObject] ebx +
jz loc_10110A8  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov [ebp+var_44] eax +
push esi  +
push edi  +
mov eax 0CD44h +
mov [ebp+var_10] ax +
mov eax 11D0h +
mov esi ecx +
xor ebx ebx +
push 0Ah  +
mov [ebp+var_E] ax +
xor eax eax +
pop ecx  +
lea edi [ebp+var_3C] +
stos   +
mov [ebp+var_48] esi +
mov [ebp+var_14] 0AAC56Bh +
mov [ebp+var_C] 8Ch +
mov [ebp+var_B] 0C2h +
mov [ebp+var_A] bl +
mov [ebp+var_9] 0C0h +
mov [ebp+var_8] 4Fh +
mov [ebp+var_7] 0C2h +
mov [ebp+var_6] 95h +
mov [ebp+var_5] 0EEh +
mov [ebp+hLibModule] ebx +
mov [ebp+var_3C] 28h +
cmp [ebp+var_44] ebx +
jz loc_101113D  +
mov esi [ebp+var_44] +
lea edi [ebp+var_38] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_48] +
mov eax [ebp+arg_0] +
add eax eax +
mov ecx offset word_1009AD4 +
mov [ebp+var_28] edx +
mov [ebp+var_24] eax +
mov [ebp+var_20] ecx +
cmp esi ebx +
jz loc_1011157  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] eax +
mov [ebp+var_18] ecx +
cmp esi ebx +
jz loc_1011164  +
mov [ebp+var_18] esi +
push 30h  +
pop esi  +
push esi  +
lea eax [ebp+var_78] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
add esp 0Ch +
cmp [ebp+arg_8] ebx +
mov [ebp+var_78] esi +
setz al  +
mov [ebp+var_68] ebx +
mov [ebp+var_5C] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_54] ebx +
mov [ebp+var_64] 3 +
inc eax  +
mov [ebp+var_6C] eax +
mov eax [ebp+arg_8] +
neg eax  +
sbb eax eax +
and eax 0FFFFFF00h +
add eax 100h +
mov [ebp+var_50] eax +
lea eax [ebp+var_3C] +
mov [ebp+var_60] eax +
lea eax [ebp+hLibModule] +
push eax  +
push offset dword_1009BC8  +
call sub_10055CA  +
mov esi eax +
cmp esi ebx +
jl loc_101123A  +
push offset aWinverifytrust  +
push [ebp+hLibModule]  +
call ds:GetProcAddress  +
cmp eax ebx +
jnz loc_10111EF  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10111EB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_101123A  +
lea ecx [ebp+var_78] +
push ecx  +
lea ecx [ebp+var_14] +
push ecx  +
push ebx  +
call eax  +
mov edi 80070000h +
cmp eax ebx +
jz loc_1011216  +
jbe loc_1011210  +
cmp eax ebx +
jle loc_1011210  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jl loc_101123A  +
cmp [ebp+arg_8] ebx +
jnz loc_1011238  +
call ds:GetLastError  +
cmp eax ebx +
jz loc_1011238  +
jbe loc_1011232  +
cmp eax ebx +
jle loc_1011232  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jl loc_101123A  +
xor esi esi +
cmp [ebp+hLibModule] ebx +
jz loc_1011248  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+lpBuffer] eax +
push ebx  +
mov eax 0CD44h +
mov [ebp+var_10] ax +
push esi  +
mov eax 11D0h +
push edi  +
mov [ebp+var_E] ax +
xor ebx ebx +
lea eax [ebp+hLibModule] +
push eax  +
mov edi ecx +
push offset dword_1009BC8  +
mov [ebp+var_30] edi +
mov [ebp+var_14] 0AAC56Bh +
mov [ebp+var_C] 8Ch +
mov [ebp+var_B] 0C2h +
mov [ebp+var_A] bl +
mov [ebp+var_9] 0C0h +
mov [ebp+var_8] 4Fh +
mov [ebp+var_7] 0C2h +
mov [ebp+var_6] 95h +
mov [ebp+var_5] 0EEh +
mov [ebp+hObject] ebx +
mov [ebp+hLibModule] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_28] ebx +
call sub_10055CA  +
mov esi eax +
cmp esi ebx +
jl loc_1011408  +
mov esi ds:GetProcAddress +
push offset aWinverifytrust  +
push [ebp+hLibModule]  +
call esi  +
mov [ebp+var_38] eax +
cmp eax ebx +
jnz loc_1011310  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011309  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1011408  +
push offset aWintrustgetreg  +
push [ebp+hLibModule]  +
call esi  +
mov [ebp+var_34] eax +
cmp eax ebx +
jz loc_10112F5  +
push offset aWintrustsetreg  +
push [ebp+hLibModule]  +
call esi  +
mov [ebp+var_24] eax +
cmp eax ebx +
jz loc_10112F5  +
push ebx  +
lea eax [ebp+hObject] +
push eax  +
push [ebp+arg_4]  +
push [ebp+lpBuffer]  +
push 2Eh  +
push edi  +
call wcsrchr  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1010E32  +
mov esi eax +
cmp esi ebx +
jl loc_1011408  +
push 30h  +
pop esi  +
push esi  +
lea eax [ebp+var_78] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
add esp 0Ch +
cmp [ebp+arg_C] ebx +
lea edi [ebp+var_48] +
setz al  +
mov [ebp+var_78] esi +
mov [ebp+var_68] ebx +
mov [ebp+var_5C] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_54] ebx +
mov [ebp+var_50] ebx +
inc eax  +
mov [ebp+var_6C] eax +
lea eax [ebp+var_48] +
mov [ebp+var_60] eax +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+var_30] +
mov [ebp+var_44] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_3C] eax +
mov eax [ebp+hObject] +
mov [ebp+var_64] 1 +
mov [ebp+var_48] 10h +
mov [ebp+var_40] eax +
cmp [ebp+arg_C] ebx +
jnz loc_10113E0  +
lea eax [ebp+var_20] +
push eax  +
call [ebp+var_34]  +
mov eax [ebp+var_20] +
or eax 40000h +
mov [ebp+var_28] eax +
cmp eax [ebp+var_20] +
jz loc_10113E0  +
push eax  +
call [ebp+var_24]  +
test eax eax +
jnz loc_10113E0  +
mov esi 80004005h +
jmp loc_1011408  +
lea eax [ebp+var_78] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call [ebp+var_38]  +
cmp eax ebx +
jz loc_1011406  +
jbe loc_1011400  +
cmp eax ebx +
jle loc_1011400  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_1011408  +
xor esi esi +
mov eax [ebp+var_20] +
cmp eax [ebp+var_28] +
jz loc_1011414  +
push eax  +
call [ebp+var_24]  +
cmp [ebp+hObject] ebx +
jz loc_1011422  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+hLibModule] ebx +
jz loc_1011430  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_1017028 0 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jz loc_10114A3  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
call sub_10110BD  +
jmp loc_10114AE  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1011260  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
test ecx ecx +
jnz loc_10114CA  +
mov eax 80004003h +
jmp loc_10114D7  +
mov eax [ebp+8] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10114F4  +
mov eax 80004003h +
jmp loc_101150F  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_101150D  +
mov eax 8007000Eh +
jmp loc_101150F  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_101152D  +
mov eax 80004003h +
jmp loc_1011548  +
mov eax [ebp+8] +
push dword ptr [eax+2Ch]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1011546  +
mov eax 8007000Eh +
jmp loc_1011548  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1011565  +
mov eax 80004003h +
jmp loc_1011578  +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
xor edx edx +
cmp [ecx+20h] dl +
setz dl  +
mov [eax] dx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp word ptr [ebp+0Ch] 0 +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
setz al  +
mov [ecx+20h] al +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_10115C7  +
mov eax 80004003h +
jmp loc_1011623  +
push ebx  +
push 0Ah  +
lea eax [ebp-44h] +
push eax  +
mov eax [esi+40h] +
movzx eax word ptr [eax+0Eh] +
push eax  +
call _itow  +
mov ebx eax +
add esp 0Ch +
lea eax [ebp-44h] +
push eax  +
call ds:lstrlenW  +
push 2Eh  +
lea eax [ebx+eax*2] +
pop ecx  +
mov [eax] cx +
add eax 2 +
push 0Ah  +
push eax  +
mov eax [esi+40h] +
movzx eax word ptr [eax+0Ch] +
push eax  +
call _itow  +
add esp 0Ch +
lea eax [ebp-44h] +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
pop ebx  +
test eax eax +
jnz loc_1011621  +
mov eax 8007000Eh +
jmp loc_1011623  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_101164B  +
mov eax 80004003h +
jmp loc_1011659  +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
movzx ecx word ptr [ecx+10h] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1011675  +
mov eax 80004003h +
jmp loc_1011682  +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
mov ecx [ecx+8] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jge loc_101169D  +
mov eax 80070057h +
jmp loc_10116AB  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax+40h] +
call sub_10103FB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
xor ebx ebx +
lea ecx [ebp+var_4] +
push ecx  +
mov [eax] ebx +
mov eax [esi] +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
call dword ptr [eax+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_1011756  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+28h] 5 +
movzx ecx word ptr [eax+30h] +
mov [ebp+var_C] ecx +
jz loc_10116F2  +
mov edi 8000FFFFh +
jmp loc_1011756  +
test ecx ecx +
jbe loc_101173D  +
mov eax [esi] +
lea ecx [ebp+var_10] +
push ecx  +
push ebx  +
push esi  +
call dword ptr [eax+24h]  +
mov edi eax +
test edi edi +
jl loc_1011756  +
mov eax [ebp+var_10] +
and eax 3 +
cmp al 3 +
jz loc_1011719  +
inc ebx  +
cmp ebx [ebp+var_C] +
jnb loc_101173D  +
jmp loc_10116F6  +
mov eax [esi] +
lea ecx [ebp+var_14] +
push ecx  +
push ebx  +
push esi  +
call dword ptr [eax+20h]  +
mov edi eax +
test edi edi +
jl loc_1011756  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push [ebp+var_14]  +
push esi  +
call dword ptr [eax+38h]  +
mov edi eax +
test edi edi +
jl loc_1011756  +
cmp ebx [ebp+var_C] +
jnz loc_1011749  +
mov edi 80004005h +
jmp loc_1011756  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_0] +
xor edi edi +
mov [ecx] eax +
mov [ebp+var_8] edi +
cmp [ebp+var_4] 0 +
jz loc_1011765  +
push [ebp+var_4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1011772  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10117A2  +
mov ecx eax +
call sub_10103D1  +
mov edi eax +
jmp loc_10117A4  +
xor edi edi +
test edi edi +
jnz loc_10117AF  +
mov esi 8007000Eh +
jmp loc_10117F2  +
mov esi [ebp+arg_4] +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
call sub_10116B4  +
mov ebx [ebp+var_4] +
mov esi eax +
test esi esi +
jl loc_10117DD  +
push [ebp+arg_8]  +
mov ecx edi +
push ebx  +
push [ebp+arg_0]  +
call sub_100FE6D  +
mov esi eax +
test esi esi +
jl loc_10117DD  +
xor edi edi +
xor esi esi +
test ebx ebx +
jz loc_10117E7  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
pop ebx  +
test edi edi +
jz loc_10117F2  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [esi] +
push ebx  +
push edi  +
lea ecx [ebp+var_C] +
push ecx  +
xor ebx ebx +
push esi  +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ebx +
call dword ptr [eax+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_101188E  +
cmp [ebp+var_C] ebx +
jnz loc_101182D  +
mov edi 80004002h +
jmp loc_101188E  +
mov [ebp+var_8] ebx +
cmp [ebp+var_C] ebx +
jbe loc_101188E  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1011845  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [esi] +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp+var_14] +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
push 1  +
push [ebp+var_8]  +
push esi  +
call dword ptr [eax+18h]  +
mov edi eax +
cmp edi ebx +
jl loc_101187C  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call sub_101177F  +
mov edi eax +
cmp edi ebx +
jl loc_101187C  +
mov [ebp+var_10] 1 +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_C] +
jb loc_1011835  +
cmp [ebp+var_10] ebx +
jz loc_101188E  +
xor edi edi +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_101189B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
shr dword ptr [ecx-767C5855h] 0CFh +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push [ebp+arg_4]  +
xor ebx ebx +
mov eax edi +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
call sub_10118A8  +
mov esi eax +
cmp esi ebx +
jge loc_10119F9  +
mov eax [edi] +
lea ecx [ebp+var_10] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10119F9  +
cmp [ebp+var_10] ebx +
jnz loc_10119A2  +
mov esi 80004005h +
jmp loc_10119F9  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push 800h  +
push ebx  +
push edi  +
call dword ptr [eax+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_10119F9  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+48h]  +
mov esi eax +
cmp esi ebx +
jl loc_10119F9  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_10119F9  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push edi  +
call sub_101177F  +
mov esi eax +
cmp esi ebx +
jl loc_10119F9  +
xor esi esi +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1011A06  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_1011A13  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_1011A20  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1011A4B  +
mov eax 80004003h +
jmp locret_1011A5F  +
jnz loc_1011A5D  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100FDCF  +
test eax eax +
jl locret_1011A5F  +
jmp loc_1011A40  +
***
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1011AB0  +
mov eax [ebp+10h] +
test eax eax +
jz loc_1011AB0  +
xor ecx ecx +
cmp cx [eax] +
jz loc_1011AB0  +
push eax  +
mov eax [ebp+0Ch] +
call sub_10118A8  +
test eax eax +
jge loc_1011AAC  +
push 0C1Eh  +
push offset aWscript_create  +
push offset dword_100160C  +
call sub_100F567  +
add esp 0Ch +
mov eax 80020009h +
jmp loc_1011AB5  +
xor eax eax +
jmp loc_1011AB5  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+18h] +
mov edx [ebp+14h] +
mov eax [ebp+10h] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+0Ch] +
mov [ebp-22Ch] edx +
mov [ebp-230h] ecx +
cmp ecx ebx +
jnz loc_1011AFD  +
mov eax 80004003h +
jmp loc_1011D6A  +
cmp esi ebx +
jz loc_1011B08  +
cmp [esi] bx +
jnz loc_1011B08  +
xor esi esi +
cmp edx ebx +
jz loc_1011B17  +
cmp [edx] bx +
jnz loc_1011B17  +
mov [ebp-22Ch] ebx +
push edi  +
cmp eax ebx +
jz loc_1011BC7  +
cmp [eax] bx +
jnz loc_1011B27  +
xor eax eax +
cmp eax ebx +
jz loc_1011BC7  +
lea ecx [ebp-220h] +
push ecx  +
lea ecx [ebp-21Ch] +
push ecx  +
push eax  +
call sub_1002B81  +
cmp eax ebx +
jl loc_1011D69  +
cmp esi ebx +
jz loc_1011BA3  +
mov eax [ebp-220h] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push offset dword_1011D7C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jge loc_1011B77  +
mov eax [ebp-220h] +
jmp loc_1011BF9  +
mov eax [ebp-224h] +
mov ecx [eax] +
push 2  +
push esi  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp-224h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jge loc_1011BA3  +
mov eax [ebp-220h] +
jmp loc_1011CCC  +
mov eax [ebp-220h] +
mov ecx [eax] +
lea edx [ebp-228h] +
push edx  +
push offset dword_1001638  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp-220h] +
jmp loc_1011CFD  +
cmp esi ebx +
jnz loc_1011BD5  +
mov eax 80070057h +
jmp loc_1011D69  +
lea eax [ebp-220h] +
push eax  +
push ebx  +
mov [ebp-220h] ebx +
call ds:CreateBindCtx  +
mov edi eax +
cmp edi ebx +
jge loc_1011C06  +
mov eax [ebp-220h] +
cmp eax ebx +
jz loc_1011BFF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_1011D69  +
push 3Ah  +
push esi  +
mov [ebp-224h] ebx +
call sub_1013558  +
cmp eax ebx +
jz loc_1011C32  +
sub eax esi +
and eax 0FFFFFFFEh +
cmp eax 2 +
jz loc_1011C32  +
lea eax [ebp-224h] +
push eax  +
push esi  +
push ebx  +
call sub_1006E33  +
jmp loc_1011C7A  +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
push 104h  +
push esi  +
call sub_1003B1E  +
mov esi eax +
cmp esi ebx +
jge loc_1011C59  +
mov eax [ebp-224h] +
jmp loc_1011CB8  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-238h] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
push dword ptr [ebp-220h]  +
call ds:MkParseDisplayName  +
mov esi eax +
cmp esi ebx +
mov eax [ebp-224h] +
jl loc_1011CB8  +
mov ecx [eax] +
lea edx [ebp-228h] +
push edx  +
push offset dword_1001638  +
push ebx  +
push dword ptr [ebp-220h]  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi 800C0005h +
jnz loc_1011CAE  +
mov esi 800401EAh +
cmp esi ebx +
mov eax [ebp-224h] +
jge loc_1011CD4  +
cmp eax ebx +
jz loc_1011CC2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-220h] +
cmp eax ebx +
jz loc_1011D07  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1011D07  +
mov ecx [eax] +
lea edx [ebp-21Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp-224h] +
cmp eax ebx +
jz loc_1011CF3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-220h] +
cmp eax ebx +
jz loc_1011D03  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jge loc_1011D0B  +
mov eax esi +
jmp loc_1011D69  +
cmp [ebp-22Ch] ebx +
jz loc_1011D59  +
push dword ptr [ebp-22Ch]  +
mov edi [ebp-228h] +
lea eax [ebp-21Ch] +
push eax  +
call sub_1011961  +
test eax eax +
jge loc_1011D59  +
mov eax [ebp-228h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 0C1Eh  +
push offset aWscript_create  +
push offset dword_100160C  +
call sub_100F567  +
add esp 0Ch +
mov eax 80020009h +
jmp loc_1011D69  +
mov eax [ebp-228h] +
mov ecx [ebp-230h] +
mov [ecx] eax +
xor eax eax +
pop edi  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
movzx eax byte ptr [eax+20h] +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
mov ebx [ebp+10h] +
mov eax [ebx] +
push esi  +
lea ecx [ebp-48h] +
xor esi esi +
push ecx  +
push ebx  +
mov [ebp-4] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] esi +
call dword ptr [eax+0Ch]  +
cmp eax esi +
jl loc_1011F7B  +
push edi  +
mov edi [ebp+8] +
mov ecx [edi+10h] +
call sub_1006531  +
test eax eax +
jnz loc_1011DF6  +
mov eax 80004005h +
jmp loc_1011F7A  +
mov ecx [ebp-2Ch] +
cmp ecx 80004004h +
jz loc_1011F3A  +
cmp ecx 8004FFFCh +
jz loc_1011EA4  +
cmp ecx 8004FFFDh +
jz loc_1011F4C  +
cmp ecx 8004FFFEh +
jz loc_1011F3A  +
mov eax [ebp-40h] +
cmp eax esi +
jz loc_1011E3B  +
xor edx edx +
cmp dx [eax] +
jz loc_1011E3B  +
mov esi eax +
jmp loc_1011E52  +
lea eax [ebp-0Ch] +
push eax  +
push ecx  +
call sub_100F3F8  +
mov esi eax +
test esi esi +
jl loc_1011F4C  +
mov esi [ebp-0Ch] +
mov eax [ebx] +
lea ecx [ebp+10h] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
push ebx  +
call dword ptr [eax+10h]  +
test eax eax +
jge loc_1011E6C  +
and dword ptr [ebp-10h] 0 +
or dword ptr [ebp+10h] 0FFFFFFFFh +
mov eax [ebx] +
lea ecx [ebp-4] +
push ecx  +
push ebx  +
call dword ptr [eax+14h]  +
test eax eax +
jge loc_1011E7E  +
and dword ptr [ebp-4] 0 +
mov edx [ebp+0Ch] +
mov ecx [edi+10h] +
mov eax [ecx] +
and edx 1 +
push edx  +
push dword ptr [ebp-2Ch]  +
mov edx [ebp+10h] +
push dword ptr [ebp-4]  +
inc edx  +
push esi  +
push dword ptr [ebp-44h]  +
push edx  +
push dword ptr [ebp-10h]  +
call dword ptr [eax+14h]  +
jmp loc_1011F44  +
cmp [edi+18h] esi +
jnz loc_1011F4C  +
mov eax [edi+14h] +
mov dword ptr [edi+18h] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jl loc_1011F4C  +
mov ecx [edi+10h] +
lea eax [ebp-8] +
push eax  +
call sub_1010555  +
mov esi eax +
test esi esi +
jl loc_1011F4C  +
mov eax [ebp-8] +
and dword ptr [ebp-14h] 0 +
lea edx [ebp-14h] +
push edx  +
mov ebx 400h +
push ebx  +
push 1  +
lea edx [ebp-18h] +
push edx  +
mov edi offset dword_1001804 +
push edi  +
mov dword ptr [ebp-18h] offset aWscript_onscri +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
xor eax eax +
cmp esi eax +
jge loc_1011F15  +
cmp esi 80020006h +
jz loc_1011F4A  +
jmp loc_1011F4C  +
mov ecx [ebp-8] +
push eax  +
push eax  +
push eax  +
mov [ebp-28h] eax +
mov [ebp-24h] eax +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
mov edx [ecx] +
lea eax [ebp-28h] +
push eax  +
push 1  +
push ebx  +
push edi  +
push dword ptr [ebp-14h]  +
push ecx  +
call dword ptr [edx+18h]  +
jmp loc_1011F44  +
mov edi [edi+10h] +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+20h]  +
mov esi eax +
test esi esi +
jl loc_1011F4C  +
xor esi esi +
push dword ptr [ebp-40h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [ebp-44h]  +
call edi  +
push dword ptr [ebp-3Ch]  +
call edi  +
push dword ptr [ebp-4]  +
call edi  +
push dword ptr [ebp-0Ch]  +
call edi  +
mov eax [ebp-8] +
test eax eax +
jz loc_1011F78  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1011FE0  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset dword_1005AD0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1011FE0  +
push dword ptr [ebp+18h]  +
mov eax [ebp-8] +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1011FED  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_1011FFA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1012060  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset dword_1005AD0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1012060  +
push dword ptr [ebp+18h]  +
mov eax [ebp-8] +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_101206D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_101207A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_10120D7  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset dword_1005AD0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10120D7  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_10120E4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_10120F1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_101214E  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset dword_1005AD0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_101214E  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_101215B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_1012168  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_10121C5  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset dword_1005AD0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10121C5  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_10121D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_10121DF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100283D  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100283D  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006578  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1006578  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+1Ch] +
mov ecx [edi+24h] +
mov eax [eax+24h] +
lea esi [eax+ecx*2] +
lea ecx [ebp+var_C] +
call sub_1001911  +
mov edi [edi+28h] +
lea eax [esi+edi*2] +
push eax  +
push esi  +
lea ecx [ebp+var_C] +
call sub_1001923  +
test eax eax +
jge loc_101225F  +
xor eax eax +
jmp loc_101229E  +
push ebx  +
or ebx 0FFFFFFFFh +
xor edi edi +
jmp loc_1012285  +
lea ecx [ebp+var_C] +
call sub_10019CE  +
cmp eax 0Ah +
jnz loc_1012282  +
cmp [ebp+arg_0] 0 +
jz loc_101228F  +
dec [ebp+arg_0]  +
lea esi [esi+edi*2] +
xor edi edi +
inc edi  +
mov ebx eax +
mov eax [ebp+var_C] +
cmp eax [ebp+var_8] +
jnb loc_1012295  +
jmp loc_1012267  +
cmp ebx 0Dh +
jnz loc_1012295  +
dec edi  +
push edi  +
push esi  +
call ds:SysAllocStringLen  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
test ecx ecx +
jnz loc_10122BC  +
mov eax 80004003h +
jmp loc_10122CF  +
mov eax [ebp+8] +
mov edx [eax+1Ch] +
mov [ecx] edx +
mov eax [eax+1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
mov ecx [eax+20h] +
push dword ptr [eax+24h]  +
mov edx [ecx+20h] +
push edx  +
call sub_1010D7F  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1012311  +
mov eax 80004003h +
jmp loc_101231B  +
mov ecx [ebp+8] +
add ecx 0FFFFFFFCh +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1012338  +
mov eax 80004003h +
jmp loc_1012377  +
and dword ptr [ebp+0Ch] 0 +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
call sub_1013DEC  +
mov edi eax +
test edi edi +
jl loc_1012364  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push esi  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
jmp loc_1012367  +
and dword ptr [esi] 0 +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1012374  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
mov eax [eax+2Ch] +
mov ecx [eax] +
push offset dword_100366C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
mov eax [eax+30h] +
mov ecx [eax] +
push offset dword_100367C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+var_4C] ecx +
push edi  +
lea ecx [ebp+var_38] +
mov [ebp+var_54] eax +
call sub_10018B2  +
xor edi edi +
push 1Eh  +
lea eax [ebp+lpString] +
push eax  +
mov [ebp+lpString] edi +
mov [ebp+var_44] edi +
mov [ebp+var_40] edi +
mov [ebp+var_50] edi +
mov [ebp+var_3C] edi +
call sub_1003A91  +
cmp [ebp+lpString] edi +
jnz loc_1012413  +
mov esi 8007000Eh +
jmp loc_1012BA6  +
push 1Fh  +
lea eax [ebp+var_44] +
push eax  +
call sub_1003A91  +
cmp [ebp+var_44] edi +
jz loc_1012409  +
push 20h  +
lea eax [ebp+var_40] +
push eax  +
call sub_1003A91  +
cmp [ebp+var_40] edi +
jz loc_1012409  +
mov eax dword_1017010 +
mov esi [eax+238h] +
push 5Ch  +
push esi  +
call sub_1003D0D  +
cmp eax edi +
jnz loc_1012456  +
push 2Fh  +
push esi  +
call sub_1003D0D  +
cmp eax edi +
jz loc_1012459  +
lea esi [eax+2] +
push esi  +
call ds:SysAllocString  +
push 1000h  +
lea ecx [ebp+var_38] +
mov [ebp+var_50] eax +
call sub_10018C4  +
mov esi eax +
cmp esi edi +
jl loc_1012BA6  +
mov esi [ebp+var_4C] +
push dword ptr [esi+40h]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_10124B6  +
push dword ptr [esi+40h]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA6  +
push offset String  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA6  +
push [ebp+lpString]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA6  +
push [ebp+var_50]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA6  +
push ebx  +
mov ebx [ebp+var_4C] +
mov edi [ebx+34h] +
test edi edi +
jz loc_1012B70  +
mov eax [edi] +
sub eax 0 +
jz loc_1012943  +
dec eax  +
jnz loc_1012A27  +
push dword ptr [edi+8]  +
mov esi ds:SysStringLen +
call esi  +
cmp [ebp+var_3C] eax +
jnb loc_1012519  +
push dword ptr [edi+8]  +
call esi  +
mov [ebp+var_3C] eax +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
mov eax [edi+10h] +
xor ebx ebx +
lea ecx [ebp+var_38] +
cmp [edi+14h] ebx +
jz loc_1012827  +
sub eax ebx +
jz loc_10127D1  +
dec eax  +
push dword ptr [edi+8]  +
jz loc_101274F  +
dec eax  +
jz loc_101265E  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
mov ebx offset a___ +
push ebx  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [edi+10h]  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012BF4  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
mov eax [edi+10h] +
inc eax  +
push eax  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push ebx  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jge loc_1012A10  +
jmp loc_1012BA5  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 2  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012BF4  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 3  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset a___  +
jmp loc_1012647  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012BF4  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 2  +
jmp loc_101272A  +
push offset asc_1012BF4  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012C00  +
jmp loc_101279D  +
sub eax ebx +
jz loc_1012927  +
dec eax  +
push dword ptr [edi+8]  +
jz loc_1012919  +
dec eax  +
jz loc_10128B1  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset a___  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [edi+10h]  +
call _itow  +
add esp 0Ch +
push eax  +
jmp loc_1012A15  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 2  +
jmp loc_10128A3  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jmp loc_1012A21  +
push offset asc_1012BF4  +
call sub_1001D50  +
mov esi eax +
cmp esi ebx +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
jmp loc_1012647  +
push dword ptr [edi+8]  +
mov esi ds:SysStringLen +
call esi  +
cmp [ebp+var_3C] eax +
jnb loc_101295B  +
push dword ptr [edi+8]  +
call esi  +
mov [ebp+var_3C] eax +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
cmp dword ptr [edi+10h] 0 +
jnz loc_101298F  +
push offset asc_1012BF4  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012BF0  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
cmp dword ptr [edi+14h] 1 +
jnz loc_10129ED  +
push offset asc_1012BEC  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push [ebp+var_40]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
cmp dword ptr [edi+14h] 2 +
jnz loc_1012A0A  +
push offset asc_1012BE0  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
cmp dword ptr [edi+10h] 0 +
jnz loc_1012A27  +
push offset dword_1012BDC  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
mov edi [edi+4] +
test edi edi +
jnz loc_10124EF  +
push [ebp+var_44]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
mov ebx [ebp+var_4C] +
mov edi [ebx+34h] +
test edi edi +
jz loc_1012B70  +
mov eax [edi] +
sub eax 0 +
jz loc_1012AC8  +
dec eax  +
jnz loc_1012B62  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
call ds:SysStringLen  +
mov ebx eax +
jmp loc_1012A8E  +
test esi esi +
jl loc_1012BA5  +
inc ebx  +
push offset asc_1012C00  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
cmp ebx [ebp+var_3C] +
jb loc_1012A85  +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012BEC  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012C00  +
jmp loc_1012B30  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+8]  +
call ds:SysStringLen  +
mov ebx eax +
jmp loc_1012AFF  +
push offset asc_1012C00  +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
inc ebx  +
lea ecx [ebp+var_38] +
cmp ebx [ebp+var_3C] +
jb loc_1012AEA  +
mov ebx offset asc_1012C00 +
push ebx  +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset asc_1012BEC  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push ebx  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push dword ptr [edi+0Ch]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push offset String  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
mov edi [edi+4] +
test edi edi +
jnz loc_1012A55  +
mov ebx [ebp+var_4C] +
push dword ptr [ebx+44h]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1012B8E  +
push dword ptr [ebx+44h]  +
lea ecx [ebp+var_38] +
call sub_1001D50  +
mov esi eax +
test esi esi +
jl loc_1012BA5  +
push [ebp+var_38]  +
call ds:SysAllocString  +
mov ecx [ebp+var_54] +
mov [ecx] eax +
test eax eax +
jnz loc_1012BA5  +
mov esi 8007000Eh +
pop ebx  +
push [ebp+lpString]  +
mov edi ds:SysFreeString +
call edi  +
push [ebp+var_44]  +
call edi  +
push [ebp+var_40]  +
call edi  +
push [ebp+var_50]  +
call edi  +
lea ecx [ebp+var_38] +
call sub_10015A1  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ecx+48h] 0 +
push esi  +
jz loc_1012C40  +
lea eax [ebp-4] +
push eax  +
call sub_10123C3  +
mov esi eax +
test esi esi +
jl loc_1012C51  +
mov ecx dword_1017010 +
push dword ptr [ebp-4]  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
jmp loc_1012C4F  +
mov eax dword_1017010 +
push dword ptr [ecx+3Ch]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+18h]  +
mov esi eax +
push dword ptr [ebp-4]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+38h] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1012C80  +
push eax  +
call ds:SysFreeString  +
push dword ptr [ebp+0Ch]  +
call ds:SysAllocString  +
mov [esi+38h] eax +
test eax eax +
jnz loc_1012C95  +
mov edi 8007000Eh +
xor eax eax +
test edi edi +
setl al  +
mov [esi+44h] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+3Ch] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1012CC6  +
push eax  +
call ds:SysFreeString  +
push dword ptr [ebp+0Ch]  +
call ds:SysAllocString  +
mov [esi+3Ch] eax +
test eax eax +
jnz loc_1012CDB  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+40h] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1012D02  +
push eax  +
call ds:SysFreeString  +
push dword ptr [ebp+0Ch]  +
call ds:SysAllocString  +
mov [esi+40h] eax +
test eax eax +
jnz loc_1012D17  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 18h  +
call malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
test esi esi +
jz loc_1012DB0  +
push ebx  +
mov ebx ds:SysStringLen +
push edi  +
push 6  +
pop ecx  +
push [ebp+arg_0]  +
mov edi esi +
stos   +
and [esi] eax +
call ebx  +
mov edi ds:SysAllocString +
test eax eax +
jbe loc_1012D66  +
push [ebp+arg_0]  +
call edi  +
mov [esi+8] eax +
test eax eax +
jz loc_1012D7B  +
push [ebp+arg_4]  +
call ebx  +
test eax eax +
jbe loc_1012DA0  +
push [ebp+arg_4]  +
call edi  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_1012DA0  +
mov eax [esi+8] +
mov edi ds:SysFreeString +
test eax eax +
jz loc_1012D8B  +
push eax  +
call edi  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1012D95  +
push eax  +
call edi  +
push esi  +
call free  +
pop ecx  +
xor eax eax +
jmp loc_1012DAE  +
mov eax [ebp+arg_8] +
mov [esi+14h] eax +
mov eax [ebp+arg_C] +
mov [esi+10h] eax +
mov eax esi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 18h  +
call malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
test esi esi +
jz loc_1012E4A  +
push ebx  +
mov ebx ds:SysStringLen +
push edi  +
push 6  +
pop ecx  +
push [ebp+arg_0]  +
mov edi esi +
stos   +
mov dword ptr [esi] 1 +
call ebx  +
mov edi ds:SysAllocString +
test eax eax +
jbe loc_1012E00  +
push [ebp+arg_0]  +
call edi  +
mov [esi+8] eax +
test eax eax +
jz loc_1012E15  +
push [ebp+arg_4]  +
call ebx  +
test eax eax +
jbe loc_1012E3A  +
push [ebp+arg_4]  +
call edi  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_1012E3A  +
mov eax [esi+8] +
mov edi ds:SysFreeString +
test eax eax +
jz loc_1012E25  +
push eax  +
call edi  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1012E2F  +
push eax  +
call edi  +
push esi  +
call free  +
pop ecx  +
xor eax eax +
jmp loc_1012E48  +
mov eax [ebp+arg_8] +
mov [esi+14h] eax +
mov eax [ebp+arg_C] +
mov [esi+10h] eax +
mov eax esi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1012E8E  +
mov eax [esi] +
sub eax 0 +
push edi  +
jz loc_1012E6C  +
dec eax  +
jnz loc_1012E86  +
mov eax [esi+8] +
mov edi ds:SysFreeString +
test eax eax +
jz loc_1012E7C  +
push eax  +
call edi  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1012E86  +
push eax  +
call edi  +
push esi  +
call free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call sub_1013B51  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call sub_1013B92  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jnz loc_1012EE7  +
mov eax 80004003h +
jmp loc_1012F3A  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100366C +
xor ebx ebx +
cmps   +
jnz loc_1012F00  +
lea ecx [eax-8] +
jmp loc_1012F1D  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_1001814 +
xor ebx ebx +
cmps   +
jnz loc_1012F2C  +
lea ecx [eax-8] +
neg ecx  +
lea esi [eax-4] +
sbb ecx ecx +
and ecx esi +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1012F37  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1001885  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1012F57  +
mov eax 80004003h +
jmp loc_1012F96  +
and dword ptr [ebp+0Ch] 0 +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call sub_1013DEC  +
mov edi eax +
test edi edi +
jl loc_1012F83  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push esi  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
jmp loc_1012F86  +
and dword ptr [esi] 0 +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1012F93  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1012FB4  +
mov eax 80004003h +
jmp loc_1012FD5  +
and dword ptr [esi] 0 +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push 1  +
push dword ptr [eax+24h]  +
call ds:SafeArrayGetUBound  +
test eax eax +
jl loc_1012FD5  +
mov eax [ebp+0Ch] +
inc eax  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+lpString] +
push eax  +
mov esi ecx +
call ds:VariantInit  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
call dword ptr [eax+20h]  +
mov ebx ds:VariantClear +
mov edi eax +
test edi edi +
jl loc_1013063  +
and [ebp+rgIndices] 0 +
cmp [ebp+var_8] 0 +
jle loc_101304D  +
lea eax [ebp+lpString] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [esi+24h]  +
call ds:SafeArrayGetElement  +
mov edi eax +
test edi edi +
jl loc_1013063  +
push [ebp+arg_0]  +
push dword ptr [ebp-10h]  +
call sub_1013A91  +
test eax eax +
jnz loc_101304D  +
lea eax [ebp+lpString] +
push eax  +
call ebx  +
inc [ebp+rgIndices]  +
mov eax [ebp+rgIndices] +
cmp eax [ebp+var_8] +
jl loc_1013016  +
mov ecx [ebp+rgIndices] +
xor eax eax +
cmp ecx [ebp+var_8] +
setz al  +
mov edi eax +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1013063  +
mov [eax] ecx +
lea eax [ebp+lpString] +
push eax  +
call ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jnz loc_101308C  +
mov eax 80004003h +
jmp loc_10130DF  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100367C +
xor ebx ebx +
cmps   +
jnz loc_10130A5  +
lea ecx [eax-8] +
jmp loc_10130C2  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_1001814 +
xor ebx ebx +
cmps   +
jnz loc_10130D1  +
lea ecx [eax-8] +
neg ecx  +
lea esi [eax-4] +
sbb ecx ecx +
and ecx esi +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_10130DC  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1001885  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_10130FB  +
mov eax 80004003h +
jmp locret_1013137  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call sub_1013DEC  +
mov esi eax +
test esi esi +
jl loc_1013127  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-4] +
mov ecx [eax] +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1013134  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
jnz loc_1013152  +
mov eax 80004003h +
jmp loc_101316E  +
push dword ptr [ebp+10h]  +
call ds:VariantInit  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call ds:SafeArrayGetElement  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_101318B  +
mov eax 80004003h +
jmp loc_10131AC  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push 1  +
push dword ptr [eax+24h]  +
call ds:SafeArrayGetUBound  +
test eax eax +
jl loc_10131A9  +
mov ecx [ebp+0Ch] +
inc ecx  +
mov [esi] ecx +
jmp loc_10131AC  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 8  +
***
sub [esp+arg_0] 4 +
jmp loc_1012EB5  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1012E98  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100164D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call sub_1013B51  +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1002A66  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1001EA5  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001EED  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001F07  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1005B30  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_10131FD  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1001F07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+18h]  +
mov esi [ebp+8] +
cmp dword ptr [esi+30h] 0 +
push dword ptr [ebp+14h]  +
lea ecx [esi-4] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
jnz loc_10132B4  +
call sub_1012D24  +
mov [esi+34h] eax +
mov [esi+30h] eax +
test eax eax +
jnz loc_10132CC  +
mov eax 8007000Eh +
jmp loc_10132CE  +
call sub_1012D24  +
mov ecx [esi+34h] +
mov [ecx+4] eax +
mov eax [esi+34h] +
mov eax [eax+4] +
test eax eax +
jz loc_10132AD  +
mov [esi+34h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+18h]  +
mov esi [ebp+8] +
cmp dword ptr [esi+30h] 0 +
push dword ptr [ebp+14h]  +
lea ecx [esi-4] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
jnz loc_101330C  +
call sub_1012DBA  +
mov [esi+34h] eax +
mov [esi+30h] eax +
test eax eax +
jnz loc_1013324  +
mov eax 8007000Eh +
jmp loc_1013326  +
call sub_1012DBA  +
mov ecx [esi+34h] +
mov [ecx+4] eax +
mov eax [esi+34h] +
mov eax [eax+4] +
test eax eax +
jz loc_1013305  +
mov [esi+34h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ebp+10h] 0 +
jnz loc_1013343  +
mov eax 80004003h +
jmp locret_101337C  +
push esi  +
push dword ptr [ebp+10h]  +
call ds:VariantInit  +
mov esi [ebp+8] +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1012FDF  +
test eax eax +
jl loc_101337B  +
cmp eax 1 +
jnz loc_101336B  +
xor eax eax +
jmp loc_101337B  +
push dword ptr [ebp+10h]  +
lea eax [ebp-4] +
push eax  +
push dword ptr [esi+28h]  +
call ds:SafeArrayGetElement  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
test esi esi +
jnz loc_1013399  +
mov eax 80004003h +
jmp loc_10133BB  +
mov ecx [ebp+8] +
xor eax eax +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [esi] ax +
call sub_1012FDF  +
test eax eax +
jl loc_10133BB  +
xor ecx ecx +
test eax eax +
setnz cl  +
dec ecx  +
mov [esi] cx +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001781  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001829  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100156D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edx ecx +
push 4  +
pop ecx  +
mov edi offset dword_1009C40 +
xor eax eax +
cmps   +
jnz loc_1013411  +
lea eax [edx-8] +
jmp loc_101342E  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset dword_1009BA8 +
xor eax eax +
cmps   +
jnz loc_1013444  +
lea eax [edx-8] +
neg eax  +
lea ecx [edx-4] +
sbb eax eax +
and eax ecx +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
lea eax [edx-8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
pop edi  +
pop esi  +
mov ecx edx +
pop ebp  +
jmp sub_1001621  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100156D  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001587  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001829  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push esi  +
push 104h  +
lea ecx [ebp+Filename] +
push ecx  +
push eax  +
xor esi esi +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_10134C5  +
push dword ptr [ebp+wLanguage]  +
lea eax [ebp+Filename] +
push 8  +
push eax  +
call sub_10147EF  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ebx eax +
test edi edi +
jz loc_101354A  +
cmp [ebp+arg_0] 0 +
jz loc_101354A  +
cmp byte ptr [edi] 0 +
mov esi edi +
mov eax edi +
jz loc_1013510  +
cmp byte ptr [eax] 5Ch +
jnz loc_1013504  +
inc eax  +
mov esi eax +
jmp loc_101350B  +
push eax  +
call ds:CharNextA  +
cmp byte ptr [eax] 0 +
jnz loc_10134FA  +
mov eax [ebp+arg_0] +
sub esi edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1013518  +
sub eax ecx +
lea eax [eax+esi+1] +
cmp ebx eax +
jb loc_101354A  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
call memcpy  +
push [ebp+arg_0]  +
sub ebx esi +
push ebx  +
add esi edi +
push esi  +
call sub_1005673  +
xor eax eax +
add esp 18h +
inc eax  +
jmp loc_101354C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101356E  +
jmp loc_1013576  +
cmp cx [ebp+arg_4] +
jz loc_1013578  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1013566  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
lea eax [edi-2] +
cmp eax 23h +
ja loc_1013664  +
cmp byte ptr [ebp+arg_C] 0 +
mov eax [ebp+arg_4] +
jnz loc_10135AF  +
jmp loc_10135B7  +
cmp cx 20h +
jz loc_10135AD  +
cmp cx 9 +
jnz loc_10135B7  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_10135A1  +
movzx ecx word ptr [eax] +
sub ecx 2Bh +
jz loc_10135CB  +
dec ecx  +
dec ecx  +
jnz loc_10135CD  +
or [ebp+arg_C] 0FFFFFFFFh +
inc eax  +
inc eax  +
jmp loc_10135D4  +
inc eax  +
inc eax  +
mov [ebp+arg_C] 1 +
push ebx  +
xor edx edx +
xor ebx ebx +
push esi  +
cmp edi 0Ah +
ja loc_1013626  +
lea esi [edi+2Fh] +
jmp loc_10135F5  +
movzx ecx cx +
cmp ecx esi +
jg loc_10135FE  +
imul edx edi +
inc eax  +
inc eax  +
lea edx [edx+ecx-30h] +
inc ebx  +
movzx ecx word ptr [eax] +
cmp cx 30h +
jnb loc_10135E4  +
mov ecx [ebp+arg_14] +
test ecx ecx +
jz loc_1013607  +
mov [ecx] eax +
pop esi  +
test ebx ebx +
pop ebx  +
jz loc_1013664  +
imul edx [ebp+arg_C] +
cmp [ebp+arg_10] 0 +
mov ecx [ebp+arg_8] +
mov [ecx] edx +
jnz loc_101365F  +
cmp word ptr [eax] 0 +
jz loc_101365F  +
xor eax eax +
jmp loc_1013666  +
movzx ecx word ptr [eax] +
lea esi [ecx-30h] +
cmp esi 9 +
ja loc_1013635  +
mov ecx esi +
jmp loc_1013655  +
cmp ecx 41h +
jl loc_1013646  +
lea esi [edi+37h] +
cmp ecx esi +
jg loc_1013646  +
sub ecx 4Bh +
jmp loc_1013655  +
cmp ecx 61h +
jl loc_10135FE  +
lea esi [edi+57h] +
cmp ecx esi +
jg loc_10135FE  +
sub ecx 6Bh +
imul edx edi +
add edx ecx +
inc eax  +
inc eax  +
inc ebx  +
jmp loc_1013626  +
xor eax eax +
inc eax  +
jmp loc_1013666  +
xor al al +
pop edi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1017001 bl +
jz loc_10136A5  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
jmp loc_1013700  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_10136E8  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_10136CB  +
call ds:GetLastError  +
jmp loc_1013700  +
call sub_100320B  +
mov [ebp+lpValueName] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpValueName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10136C3  +
jmp loc_10136EB  +
mov [ebp+lpValueName] ebx +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExA  +
cmp eax ebx +
jle loc_101370E  +
and eax 0FFFFh +
or eax 80070000h +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jz loc_1013736  +
push 1  +
jmp loc_1013738  +
push 0  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call sub_1013670  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1017001 bl +
jz loc_1013788  +
push [ebp+lpWideCharStr]  +
push [ebp+nSize]  +
push [ebp+lpReturnedString]  +
push [ebp+lpString]  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringW  +
jmp loc_1013902  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
or edi 0FFFFFFFFh +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jnz loc_10137C1  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1013904  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1013904  +
call sub_100320B  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_10137D7  +
mov eax 8007000Eh +
jmp loc_1013904  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpFileName]  +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10137A4  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_10137A4  +
call sub_100320B  +
mov [ebp+var_14] esp +
cmp esp ebx +
jz loc_10137CD  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+var_14]  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10137A4  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_10137A4  +
call sub_100320B  +
mov [ebp+var_10] esp +
cmp esp ebx +
jz loc_10137CD  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+var_10]  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10137A4  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jle loc_10138A7  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpString]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_10137A4  +
call sub_100320B  +
mov [ebp+lpDefault] esp +
cmp esp ebx +
jz loc_10137CD  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpDefault]  +
push edi  +
push [ebp+lpString]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10137A4  +
jmp loc_10138BE  +
push 4  +
pop eax  +
call sub_100321E  +
mov eax esp +
mov [ebp+lpDefault] eax +
cmp eax ebx +
jz loc_10137CD  +
mov [eax] bl +
mov esi [ebp+nSize] +
lea eax [esi+1] +
call sub_100320B  +
mov [ebp+lpMultiByteStr] esp +
cmp esp ebx +
jz loc_10137CD  +
push [ebp+lpFileName]  +
push esi  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpDefault]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call ds:GetPrivateProfileStringA  +
push esi  +
push [ebp+lpReturnedString]  +
push edi  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_10137A4  +
xor eax eax +
lea esp [ebp-24h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1017001 bl +
jz loc_1013953  +
push [ebp+lpWideCharStr]  +
push [ebp+nDefault]  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileIntW  +
jmp loc_1013A36  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
or edi 0FFFFFFFFh +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax ebx +
jnz loc_101398C  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1013A3D  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1013A3D  +
call sub_100320B  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_10139A2  +
mov eax 8007000Eh +
jmp loc_1013A3D  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpFileName]  +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_101396F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_101396F  +
call sub_100320B  +
mov [ebp+cchMultiByte] esp +
cmp esp ebx +
jz loc_1013998  +
push ebx  +
push ebx  +
push [ebp+var_8]  +
push [ebp+cchMultiByte]  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_101396F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+var_14] eax +
cmp eax ebx +
jz loc_101396F  +
call sub_100320B  +
mov [ebp+var_8] esp +
cmp esp ebx +
jz loc_1013998  +
push ebx  +
push ebx  +
push [ebp+var_14]  +
push [ebp+var_8]  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_101396F  +
push [ebp+lpFileName]  +
push [ebp+nDefault]  +
push [ebp+var_8]  +
push [ebp+cchMultiByte]  +
call ds:GetPrivateProfileIntA  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001335  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp byte ptr [ebp+arg_10] al +
setnz al  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
push [ebp+lpWideCharStr]  +
call sub_101391D  +
test eax eax +
jl loc_1013A88  +
cmp [ebp+arg_10] 0 +
mov ecx [ebp+arg_C] +
setnle al  +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SysStringLen +
push edi  +
push [ebp+lpString]  +
call esi  +
push [ebp+arg_4]  +
mov edi eax +
call esi  +
cmp edi eax +
jz loc_1013AB2  +
xor eax eax +
jmp loc_1013ACD  +
test edi edi +
jnz loc_1013ABB  +
xor eax eax +
inc eax  +
jmp loc_1013ACD  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push [ebp+lpString]  +
call sub_1002753  +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005D07  +
test byte ptr [ebp+8] 1 +
jz loc_1013AF2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [eax+14h] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
setnz al  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_1013BA4  +
mov eax 80004003h +
jmp loc_1013BE5  +
push esi  +
mov esi [ebp+pptlib] +
mov eax [esi+14h] +
lea ecx [ebp+pptlib] +
push ecx  +
movzx ecx word ptr [eax+18h] +
push 0  +
push 0  +
push ecx  +
push dword ptr [eax+10h]  +
call ds:LoadRegTypeLib  +
test eax eax +
jl loc_1013BE4  +
mov eax [esi+14h] +
push [ebp+arg_4]  +
mov eax [eax] +
mov ecx [ebp+pptlib] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+18h]  +
mov esi eax +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005CC3  +
test byte ptr [ebp+8] 1 +
jz loc_1013C08  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_1013C27  +
mov eax 80004003h +
jmp loc_1013C63  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1013C68 +
xor eax eax +
cmps   +
jz loc_1013C4B  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset riid +
xor eax eax +
cmps   +
jnz loc_1013C5A  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1013C61  +
and [edx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jbe loc_1013CB4  +
mov esi [ebp+10h] +
push esi  +
call ds:VariantInit  +
add esi 10h +
dec edi  +
jnz loc_1013CA7  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1013CF0  +
mov edi [ebp+8] +
mov ebx [ebp+10h] +
lea esi [edi+8] +
mov eax [esi] +
cmp eax [edi+10h] +
jg loc_1013CF0  +
push ebx  +
push esi  +
push dword ptr [edi+14h]  +
call ds:SafeArrayGetElement  +
mov [ebp+8] eax +
test eax eax +
jl loc_1013D0B  +
inc dword ptr [esi]  +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
add ebx 10h +
cmp eax [ebp+0Ch] +
jb loc_1013CC7  +
mov eax [ebp+14h] +
mov ecx [ebp-4] +
test eax eax +
jz loc_1013CFC  +
mov [eax] ecx +
xor eax eax +
cmp ecx [ebp+0Ch] +
setnz al  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov esi [ebp+10h] +
mov edi [ebp+0Ch] +
push esi  +
call ds:VariantClear  +
add esi 10h +
dec edi  +
jnz loc_1013D11  +
mov eax [ebp+8] +
jmp loc_1013D04  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+0Ch] +
mov [eax+8] ecx +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
add [eax+8] ecx +
mov edx [eax+8] +
mov ecx [eax+10h] +
cmp edx ecx +
jle loc_1013D62  +
inc ecx  +
mov [eax+8] ecx +
xor eax eax +
inc eax  +
jmp loc_1013D64  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov dword ptr [ecx] offset off_1009C04 +
mov ecx [ecx+14h] +
test ecx ecx +
jz locret_1013D81  +
push ecx  +
call ds:SafeArrayDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013D6D  +
test [ebp+arg_0] 1 +
jz loc_1013DA1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jnz loc_1013DC6  +
push 1  +
call sub_1013D87  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
or dword ptr [eax+8] 0FFFFFFFFh +
and dword ptr [eax+14h] 0 +
mov dword ptr [eax] offset off_1009C04 +
mov dword ptr [eax+4] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1013E0A  +
mov ecx eax +
call sub_1013DCF  +
mov esi eax +
jmp loc_1013E0C  +
xor esi esi +
test esi esi +
jnz loc_1013E17  +
mov edi 8007000Eh +
jmp loc_1013E6E  +
push ebx  +
lea ebx [esi+0Ch] +
push ebx  +
push 1  +
push [ebp+psa]  +
call ds:SafeArrayGetLBound  +
mov edi eax +
test edi edi +
jl loc_1013E63  +
lea eax [esi+10h] +
push eax  +
push 1  +
push [ebp+psa]  +
call ds:SafeArrayGetUBound  +
mov edi eax +
test edi edi +
jl loc_1013E63  +
mov eax [ebx] +
mov [esi+8] eax +
lea eax [esi+14h] +
push eax  +
push [ebp+psa]  +
call ds:SafeArrayCopy  +
mov edi eax +
test edi edi +
jl loc_1013E63  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor esi esi +
xor edi edi +
pop ebx  +
test esi esi +
jz loc_1013E6E  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+8] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+14h]  +
call sub_1013DEC  +
test eax eax +
jl loc_1013E9D  +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1013F1B  +
cmp eax esi +
ja loc_1013F1B  +
jnz loc_1013F28  +
jmp loc_1013F20  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1013F31  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_1013F3E  +
test eax eax +
jz loc_1013F86  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_1013FE4  +
cmp [ebp+arg_4] 0 +
jz loc_1013FE4  +
push [ebp+hModule]  +
call sub_1013F69  +
push [ebp+arg_4]  +
mov esi eax +
call sub_1013F69  +
test esi esi +
jz loc_1013FDC  +
test eax eax +
jz loc_1013FDC  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_1013FE4  +
cmp [eax] ecx +
jnz loc_1013FE4  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_1013FE4  +
inc eax  +
jmp loc_1013FE6  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_1014003  +
xor eax eax +
jmp loc_1014071  +
cmp [ebp+arg_4] esi +
jz loc_101405E  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1013FFF  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_1013FFF  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_1013FFF  +
or eax 1 +
jmp loc_1014071  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_10174C8 edi +
jnz loc_1014199  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_10140E4  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_10174C8 edi +
pop esi  +
jz loc_101416C  +
dec eax  +
jnz loc_1014199  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_1014159  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_101414D  +
dec eax  +
jz loc_101413A  +
dec eax  +
jz loc_1014120  +
mov dword_10174C8 14h +
jmp loc_1014199  +
cmp [ebp+var_C] 1 +
jb loc_1014131  +
mov dword_10174C8 10h +
or dword_10174C8 4 +
jmp loc_1014199  +
cmp [ebp+var_C] 2 +
jb loc_1014131  +
mov dword_10174C8 8 +
jmp loc_1014131  +
mov dword_10174C8 4 +
jmp loc_1014199  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_10141AB  +
mov dword_10174C8 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_1014199  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_101418F  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_101418F  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_1014199  +
mov dword_10174C8 1 +
mov ecx [ebp+var_4] +
mov eax dword_10174C8 +
xor ecx ebp +
pop edi  +
call sub_1001335  +
leave   +
retn   +
mov dword_10174C8 20h +
jmp loc_1014199  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_1014210  +
push 3  +
lea eax [ebp+LCData] +
push offset word_1014220  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_10174CC +
jnz loc_10142C6  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10142C5  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aLocale  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_10142C5  +
push 3  +
push ds:off_10142D8[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10142B7  +
inc esi  +
cmp esi 1Ch +
jnb loc_10142C5  +
jmp loc_1014296  +
mov ax ds:word_10142DC[esi*8] +
mov word_10174CC ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_10174CC +
xor ecx ebp +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1014541  +
cmp [ebp+arg_0] ebx +
jz loc_1014541  +
cmp [ebp+arg_4] ebx +
jz loc_1014541  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_10144BD  +
movzx eax ax +
sub eax 61h +
jmp loc_10144CC  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_10144F6  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_10144F6  +
mov esi ds:dword_1014548[eax*4] +
test esi esi +
jnz loc_10144EE  +
jmp loc_10144F6  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014501  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_10144DE  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jge loc_1014540  +
jmp loc_10144A9  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1014509  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_1014540  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1014521  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_10145FB  +
cmp [ebp+arg_4] 0 +
jz loc_10145FB  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_1015116  +
test eax eax +
jz loc_10145FB  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_10151BC  +
test edi edi +
jz loc_10145F6  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_1014483  +
xor eax eax +
inc eax  +
jmp loc_10145FD  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101462C  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1014631  +
mov eax 80070057h +
test eax eax +
jl loc_101464A  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1013EF3  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1014668  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101466D  +
mov eax 80070057h +
test eax eax +
jl loc_1014687  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1013EF3  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10146AF  +
xor eax eax +
jmp loc_101471A  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_1014617  +
test eax eax +
jl loc_1014717  +
push esi  +
call sub_101407D  +
mov esi eax +
and esi 26h +
call sub_101407D  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1013FF0  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_1014717  +
push ebx  +
push edi  +
call sub_1013F8F  +
test eax eax +
jnz loc_1014717  +
push ebx  +
test bl 1 +
jz loc_101470F  +
call ds:UnmapViewOfFile  +
jmp loc_1014715  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1001335  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_1014787  +
test ecx ecx +
jz loc_1014787  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_101476B  +
test edx edx +
jz loc_1014758  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_101468E  +
add esp 14h +
jmp loc_1014789  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_101468E  +
add esp 10h +
jmp loc_1014789  +
test edx edx +
jz loc_1014777  +
push edx  +
push offset a_SS_mui  +
jmp loc_1014760  +
push offset a_S_mui  +
push ecx  +
call sub_101468E  +
add esp 0Ch +
jmp loc_1014789  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1017004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_1014822  +
xor eax eax +
jmp loc_1014F7B  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_101481B  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_101483E  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_1014EA8  +
call sub_101407D  +
mov dword_10174D0 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_1014EA8  +
test byte ptr dword_10174D0 20h +
jnz loc_1014F7A  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_1014E9C  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_10148BA  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_10148CC  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_1013F3E  +
test eax eax +
jz loc_1014E84  +
test di di +
jnz loc_1014E5C  +
mov al byte ptr dword_10174D0 +
test al 4 +
jz loc_1014C6B  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_101491E  +
call sub_10141BC  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_10149F4  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10145B5  +
test eax eax +
jz loc_1014EE8  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
cmp word ptr [ebp+var_208] ax +
jz loc_10149D3  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_1014B9F  +
mov [ebp+var_420] 404h +
jmp loc_101492A  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1014653  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10145B5  +
test eax eax +
jz loc_1014AA6  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101502B  +
movzx eax ax +
test ax ax +
jz loc_1014AA6  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1014653  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_10149E5  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_1014B83  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1014653  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10145B5  +
test eax eax +
jz loc_1014B7D  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101502B  +
movzx eax ax +
test ax ax +
jz loc_1014B7D  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1014653  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1014E34  +
cmp ax si +
jmp loc_1014E0C  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_1014C52  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10145B5  +
test eax eax +
jz loc_1014E84  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
cmp word ptr [ebp+var_208] ax +
jz loc_1014C52  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jnz loc_1014D29  +
jmp loc_1014E34  +
test al 3 +
jz loc_1014E84  +
call sub_101422B  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_1014D52  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_10145B5  +
test eax eax +
jz loc_1014E84  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
cmp word ptr [ebp+var_208] ax +
jz loc_1014D22  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_1014E34  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10145B5  +
mov edx esi +
jmp loc_1014E13  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1014653  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10145B5  +
test eax eax +
jz loc_1014E00  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101502B  +
movzx eax ax +
test ax ax +
jz loc_1014E00  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1014653  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_1014E34  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jnz loc_1014EEC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jz loc_1014EE8  +
jmp loc_1014EEC  +
test byte ptr dword_10174D0 7 +
jz loc_1014E84  +
test byte ptr [ebp+arg_4] 8 +
jz loc_1014EAF  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_10145B5  +
test eax eax +
jnz loc_1014EC9  +
test byte ptr [ebp+arg_4] 10h +
jz loc_1014EFC  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_1013F3E  +
test eax eax +
jnz loc_1014EFC  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_1014F7A  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1014653  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_101472C  +
mov ebx eax +
test ebx ebx +
jz loc_1014E84  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_1014F7A  +
test byte ptr [ebp+hModule] 1 +
jz loc_1014F74  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_101407D  +
test al 38h +
jz loc_1014F51  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_1014653  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1013FF0  +
jmp loc_1014F6E  +
call sub_101407D  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001335  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_1014FDF  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_1015020  +
cmp word ptr [eax] 7Fh +
jz loc_1015020  +
xor eax eax +
inc eax  +
jmp loc_1015022  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1015080  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_1015080  +
push offset sub_1014FEC  +
push 8  +
push 163h  +
push offset off_100BF80  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_1015080  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_100AEC8 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_101507B  +
push ecx  +
call sub_1015007  +
test eax eax +
jnz loc_1015080  +
mov ax [ecx] +
jmp loc_101508A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_10150AE  +
cmp ecx 7FFFFFFFh +
jbe loc_10150B0  +
mov eax edx +
test eax eax +
jl loc_101510D  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_10150CC  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_101510C  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10150FC  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10150F8  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_10150F8  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10150E0  +
test esi esi +
jnz loc_1015103  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_10151A7  +
cmp [ebp+arg_4] 0 +
jnz loc_1015133  +
cmp [ebp+arg_8] 0 +
jnz loc_10151A7  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_10151A7  +
push offset sub_1014FC5  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_100AEC8  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_10151A7  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101516F  +
push ecx  +
call sub_1015007  +
test eax eax +
jnz loc_10151A7  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1015177  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_10151A3  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1015093  +
test eax eax +
jge loc_10151A3  +
push 7Ah  +
jmp loc_10151A9  +
mov eax esi +
jmp loc_10151B1  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_101526A  +
cmp [ebp+arg_8] edi +
jle loc_10151DF  +
cmp [ebp+arg_4] edi +
jz loc_101526A  +
cmp [ebp+arg_8] edi +
jl loc_101526A  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_101526A  +
push offset sub_1014FEC  +
push 8  +
push 163h  +
push offset off_100BF80  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_101526A  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_100AEC8 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101522B  +
push ecx  +
call sub_1015007  +
test eax eax +
jnz loc_101526A  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_101523B  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_1015266  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1015093  +
test eax eax +
jge loc_1015266  +
push 7Ah  +
jmp loc_101526C  +
mov eax esi +
jmp loc_1015274  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
retf 0  +
***
mov al ds:0B000015Eh +
pop esi  +
add [eax] eax +
retn 15Eh  +
***
add gs:[eax] al +
retf   +
***
retn 6904h  +
***
bound eax [eax] +
add [esp+eax+72726566h] dl +
outs   +
jb $+2  +
add [ebp+625F5F00h] al +
popa   +
imul ebp fs:[edi+69h] +
iret   +
***
push esp  +
push 64616572h  +
push edi  +
imul ebp [esi+64h] +
retn   +
***
