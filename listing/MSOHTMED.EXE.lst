call ds:_Mtx_init_in_situ  +
mov eax dword_460DF0 +
push offset loc_434079  +
mov dword_460108 eax +
mov dword_460DF0 offset dword_460108 +
call sub_430DB2  +
pop ecx  +
retn   +
***
call ds:_Mtx_init_in_situ  +
retn   +
***
call sub_412AB4  +
push offset loc_4340B8  +
call sub_430DB2  +
pop ecx  +
retn   +
***
retn   +
***
push offset sub_4340DA  +
call sub_430DB2  +
pop ecx  +
retn   +
***
push offset sub_4340E4  +
call sub_430DB2  +
pop ecx  +
retn   +
***
push offset sub_4340FC  +
call sub_430DB2  +
pop ecx  +
retn   +
***
inc dword_461008  +
mov ecx dword ptr oword_460090 +
mov eax ecx +
mov edx dword ptr oword_460090+4 +
or eax edx +
jnz loc_401128  +
mov eax offset oword_460090 +
push eax  +
push eax  +
call sub_41B6EB  +
mov edx dword ptr oword_460090+4 +
mov ecx dword ptr oword_460090 +
push edx  +
push ecx  +
call sub_41B73D  +
push offset loc_434114  +
call sub_430DB2  +
pop ecx  +
retn   +
***
push offset sub_434136  +
call sub_430DB2  +
pop ecx  +
retn   +
***
mov eax dword_460DF0 +
mov eax dword_460DF0 +
mov eax dword_460DF0 +
mov dword_46031C eax +
mov dword_460DF0 offset dword_46031C +
retn   +
***
mov eax dword_460DF0 +
mov dword_46033C eax +
mov dword_460DF0 offset dword_46033C +
retn   +
***
pop ecx  +
pop ecx  +
call ds:_Mtx_init_in_situ  +
call ds:_Mtx_init_in_situ  +
mov ecx offset dword_462D70 +
mov ecx offset dword_462D78 +
mov eax dword_460DF0 +
mov eax dword_460DF0 +
call ds:_Mtx_init_in_situ  +
call loc_42DBD6  +
call ds:_Mtx_init_in_situ  +
call sub_42F09B  +
call sub_42FFDB  +
push offset loc_4342AF  +
call sub_430DB2  +
pop ecx  +
retn   +
***
mov ebx ecx +
test esi esi +
call sub_40148B  +
push esi  +
sub esp 10h +
sub esp 1Ch +
push ecx  +
cmp dword_460D7C 0 +
sub esp 2Ch +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+4] 0 +
mov eax [ebp+arg_8] +
push ecx  +
mov eax 80004001h +
push [ebp+dwMoveMethod]  +
mov eax 80004001h +
mov eax 80004001h +
mov eax 80004001h +
mov eax 80004001h +
mov esi ecx +
mov ecx [esi+8] +
push ebx  +
mov ecx [ebp+arg_0] +
push esi  +
push esi  +
mov eax [ebp+arg_4] +
push esi  +
mov eax [ebp+arg_8] +
mov eax [ebp+arg_C] +
mov eax 8000FFFFh +
mov eax [ebp+arg_0] +
test [ebp+arg_0] 1 +
sub esp 0Ch +
push ecx  +
push esi  +
push ecx  +
lea eax [esi+14h] +
test ecx ecx +
push ecx  +
push esi  +
push 0FFFFFFFFh  +
test esi esi +
sub esp 228h +
push ecx  +
jz loc_402B4D  +
push ecx  +
call sub_431CD6  +
sub esp 21Ch +
sub esp 10h +
call sub_431CA3  +
sub esp 0Ch +
sub esp 5Ch +
sub esp 210h +
call sub_431CD6  +
sub esp 74h +
sub esp 214h +
sub esp 38h +
sub esp 24h +
sub esp 2F0h +
sub esp 0A74h +
push ecx  +
call sub_431CD6  +
xor edx edx +
sub esp 10h +
sub esp 24h +
push esi  +
push 0FFFFFFFFh  +
push 22h  +
sub esp 508h +
push 0FFFFFFFFh  +
sub esp 0Ch +
push ecx  +
sub esp 22Ch +
mov edi ecx +
call sub_431CD6  +
sub esp 668h +
call sub_431CA3  +
call sub_431CD6  +
call sub_431CD6  +
call sub_431CA3  +
push 0FFFFFFFFh  +
call sub_431CD6  +
call sub_431CA3  +
call sub_431CD6  +
sub esp 0ECh +
call sub_431CD6  +
push 0FFFFFFFFh  +
call sub_431CD6  +
sub esp 0Ch +
push 0FFFFFFFFh  +
sub esp 0Ch +
sub esp 14h +
test esi esi +
push edi  +
push 2Eh  +
test ecx ecx +
cmp [ebp+arg_0] 1 +
push ecx  +
sub esp 7E8h +
push ecx  +
push esi  +
mov esi ecx +
or eax 0FFFFFFFFh +
xadd [esi+4] eax +
dec eax  +
jnz loc_40A4DD  +
mov eax [esi] +
push 0  +
call dword ptr [eax+8]  +
push esi  +
call ds:free  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov eax [ebp+arg_0] +
mov ecx [ecx] +
and dword ptr [ecx] 0 +
sub esp 0Ch +
push esi  +
mov edx [ebp+arg_0] +
or ecx 7 +
push ecx  +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
push esi  +
mov edx [esi+14h] +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
int 3  +
***
and dword ptr [ecx+4] 0 +
lea eax [ecx+4] +
push esi  +
push esi  +
push esi  +
sub esp 0Ch +
cmp ecx 1000h +
cmp edx 1000h +
push esi  +
cmp dword ptr [ecx+4] 0 +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
sub esp 14h +
push edi  +
mov ecx [esi] +
mov di dx +
call sub_40142D  +
cmp cx 20h +
sub esp 14h +
sub esp 0Ch +
mov esi edx +
push ecx  +
sub esp 10h +
push ecx  +
cmp ecx 0Ah +
push edi  +
push ecx  +
test ecx ecx +
mov eax ecx +
push edi  +
push edi  +
mov esi edx +
push edi  +
push ecx  +
sub esp 0Ch +
push ebx  +
push esi  +
push esi  +
push ecx  +
push ecx  +
lea eax [ecx-41h] +
push esi  +
push ecx  +
push ecx  +
test ecx ecx +
call sub_40BF59  +
mov esi ecx +
push edi  +
push ecx  +
sub esp 220h +
mov eax dword_460DA4 +
push ebx  +
test ecx ecx +
push esi  +
mov eax [ebp+lpData] +
push ecx  +
mov eax dword_460DE0 +
mov edx dword_460DE0 +
mov eax dword_460DE0 +
push ecx  +
mov eax dword_460DDC +
mov eax dword_460DE4 +
mov esi dword_460DD8 +
push ebx  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 50h +
sub esp 14h +
mov ecx [esi] +
mov edx [ebp+arg_4] +
push esi  +
push ecx  +
mov eax [ebp+arg_C] +
int 3  +
***
push ebx  +
push ecx  +
test esi esi +
sub esp 0Ch +
xor eax eax +
push ebx  +
int 3  +
***
call sub_431D42  +
mov edx [ebp-230h] +
mov eax dword_460D74 +
mov eax dword_460D9C +
mov eax dword_460DA0 +
push ebx  +
mov eax [ebp+arg_0] +
call sub_40EC81  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push ecx  +
mov edx ecx +
push ebx  +
and dword ptr [ecx+204h] 0 +
mov eax [ebp+arg_4] +
sub esp 38Ch +
sub esp 398h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax large fs:2Ch +
test [ebp+arg_0] 1 +
sub esp 0Ch +
push ecx  +
mov eax dword_460DF0 +
call sub_431CA3  +
push 0FFFFFFFFh  +
mov eax [ecx] +
inc dword ptr [ecx+4]  +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ecx] +
push esi  +
mov esi [ebp+arg_8] +
mov [esi+4] eax +
cmp eax ebx +
jnz loc_40E71B  +
mov [ebx] esi +
mov [ebx+4] esi +
mov [ebx+8] esi +
mov byte ptr [esi+0Ch] 1 +
jmp loc_40E7E1  +
cmp [ebp+arg_4] 0 +
jnz loc_40E72E  +
mov [eax+8] esi +
cmp eax [ebx+8] +
jnz loc_40E736  +
mov [ebx+8] esi +
jmp loc_40E736  +
mov [eax] esi +
cmp eax [ebx] +
jnz loc_40E736  +
mov [ebx] esi +
mov eax [esi+4] +
push edi  +
mov edi esi +
jmp loc_40E7CF  +
mov eax [edi+4] +
mov edx [eax+4] +
mov edx [edx] +
cmp eax edx +
jnz loc_40E784  +
mov edx [eax+4] +
mov edx [edx+8] +
cmp byte ptr [edx+0Ch] 0 +
jz loc_40E78A  +
cmp edi [eax+8] +
jnz loc_40E766  +
mov edi eax +
push edi  +
call sub_40E840  +
mov eax [edi+4] +
mov byte ptr [eax+0Ch] 1 +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+0Ch] 0 +
mov eax [edi+4] +
push dword ptr [eax+4]  +
call sub_40E7FA  +
jmp loc_40E7CC  +
cmp byte ptr [edx+0Ch] 0 +
jnz loc_40E7A4  +
mov byte ptr [eax+0Ch] 1 +
mov byte ptr [edx+0Ch] 1 +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+0Ch] 0 +
mov eax [edi+4] +
mov edi [eax+4] +
jmp loc_40E7CC  +
cmp edi [eax] +
jnz loc_40E7B0  +
mov edi eax +
push edi  +
call sub_40E7FA  +
mov eax [edi+4] +
mov byte ptr [eax+0Ch] 1 +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+0Ch] 0 +
mov eax [edi+4] +
push dword ptr [eax+4]  +
call sub_40E840  +
mov eax [edi+4] +
cmp byte ptr [eax+0Ch] 0 +
jz loc_40E741  +
mov eax [ebx+4] +
pop edi  +
mov byte ptr [eax+0Ch] 1 +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov eax [ecx] +
int 3  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push esi  +
push 0FFFFFFFEh  +
call sub_40E9F5  +
mov eax dword_460DF4 +
test ecx ecx +
push ecx  +
and esp 0FFFFFFF8h +
push ecx  +
push esi  +
mov eax [ebp+arg_0] +
push ecx  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
call dword ptr [eax+7Ch]  +
pop ebp  +
retn 4  +
***
cmp dword_460DF8 0 +
push ecx  +
sub esp 10h +
call sub_431CA3  +
push edi  +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
mov edx [ebp+arg_4] +
call sub_431CA3  +
push ecx  +
mov eax [ecx+18h] +
call sub_431CA3  +
push ecx  +
sub esp 14h +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
movzx eax word ptr [ecx+6] +
and esp 0FFFFFFF8h +
cmp dword_460E00 0 +
push 0FFFFFFFFh  +
push esi  +
sub esp 0Ch +
push ecx  +
push esi  +
push ecx  +
push ebx  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
mov eax [ecx+1Ch] +
test eax eax +
jz loc_40FB96  +
retn   +
push 0  +
push 312119Fh  +
call sub_40E9F5  +
int 3  +
push esi  +
mov esi [ecx] +
test esi esi +
jz loc_40FBB9  +
mov ecx esi +
call sub_40FBDC  +
push esi  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
lea eax [esi+28h] +
push eax  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
lea ecx [esi+20h] +
call sub_40FC5D  +
lea ecx [esi+0Ch] +
call sub_40FC11  +
lea ecx [esi+4] +
pop esi  +
jmp sub_40FC2F  +
***
mov edx [esi+4] +
mov edx [ebx] +
push ecx  +
call sub_431CA3  +
call sub_431CA3  +
push ebx  +
push ecx  +
movzx eax dl +
cmp ecx 3F2h +
and eax 1Fh +
sub esp 2Ch +
cmp ecx 8 +
push 0FFFFFFFFh  +
push ecx  +
mov eax dword_460F98 +
test cl cl +
mov esi edx +
push 0FFFFFFFFh  +
sub esp 34h +
sub esp 2Ch +
and esp 0FFFFFFF8h +
push ecx  +
sub esp 1Ch +
sub esp 28h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push edi  +
mov eax [ebp+arg_0] +
sub esp 0Ch +
mov ecx [ebp+arg_0] +
sub esp 14h +
sub esp 1Ch +
push ecx  +
sub esp 20h +
push esi  +
sub esp 18h +
sub esp 14h +
push ecx  +
push ecx  +
or dword ptr [esi] 0FFFFFFFFh +
cmp byte ptr [ecx+4] 0 +
cmp byte ptr [ecx+4] 0 +
cmp byte ptr [ecx+4] 0 +
mov eax ecx +
mov edi ecx +
push esi  +
and esp 0FFFFFFF8h +
sub esp 0A4h +
sub esp 9Ch +
push ecx  +
call sub_431CA3  +
call sub_431CD6  +
mov esi ecx +
mov edi [ebp+8] +
push edi  +
call sub_4123AF  +
test al al +
jz loc_412348  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-44h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [edi]  +
call sub_418A65  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-50h] +
push eax  +
mov ecx esi +
call sub_41265D  +
mov byte ptr [ebp-4] 1 +
mov esi [ebp-50h] +
jmp loc_412333  +
mov ecx esi +
call sub_4127C1  +
push edi  +
mov ecx [eax] +
mov edx [ecx+0Ch] +
mov ecx eax +
call edx  +
test al al +
jz loc_412330  +
mov ecx esi +
call sub_4127C1  +
lea ecx [ebp-44h] +
push ecx  +
push edi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+1Ch]  +
add esi 4 +
cmp esi [ebp-4Ch] +
jnz loc_412308  +
lea ecx [ebp-50h] +
call sub_4127D5  +
lea ecx [ebp-28h] +
call sub_40A80D  +
call sub_431C97  +
retn 0Ch  +
***
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
push esi  +
mov edi ecx +
push edi  +
call sub_431CA3  +
call sub_431CA3  +
sub esp 0Ch +
push 0FFFFFFFFh  +
push offset loc_4324BA  +
mov eax large fs:0 +
push eax  +
push esi  +
push edi  +
mov eax dword_460070 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
lea edi [esi+4] +
push edi  +
call sub_4315AB  +
pop ecx  +
mov ecx [ebp+arg_0] +
lea eax [esi+8] +
push eax  +
call sub_412747  +
push edi  +
call sub_4315C7  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
cmp byte ptr [ecx+4] 0 +
jz locret_4126C2  +
push dword ptr [ecx]  +
call sub_4315C7  +
pop ecx  +
retn   +
***
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
mov edx ecx +
push ebx  +
push esi  +
push edi  +
mov esi [edx+4] +
lea edi [eax+4] +
mov [ebp+var_8] eax +
mov ebx eax +
mov [ebp+var_4] edx +
mov eax esi +
cmp edi esi +
jz loc_412717  +
mov eax [edi] +
and dword ptr [edi] 0 +
mov ecx [ebx] +
mov [ebx] eax +
test ecx ecx +
jz loc_412705  +
mov eax [ecx] +
call dword ptr [eax+4]  +
add edi 4 +
add ebx 4 +
cmp edi esi +
jnz loc_4126F3  +
mov edx [ebp+var_4] +
mov esi [edx+4] +
mov eax esi +
mov ecx [esi-4] +
test ecx ecx +
jz loc_41272D  +
and dword ptr [esi-4] 0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov edx [ebp+var_4] +
mov eax [edx+4] +
mov ecx [ebp+var_8] +
add eax 0FFFFFFFCh +
mov [edx+4] eax +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
mov [eax] ecx +
leave   +
retn 8  +
***
push ecx  +
mov eax [ecx] +
cmp dword ptr [esi] 0 +
push esi  +
push ecx  +
sub esp 0Ch +
push edi  +
push esi  +
push esi  +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_432A3E  +
mov eax large fs:0 +
push eax  +
mov eax dword_460070 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov ecx [ecx+18h] +
call sub_414FF0  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn   +
***
push esi  +
push 0FFFFFFFFh  +
mov ecx 71E40Ch +
lea eax [ebp+arg_10] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 10h +
push 0FFFFFFFFh  +
sub esp 10h +
mov edi ecx +
mov esi [edi] +
test esi esi +
jz loc_41324C  +
push ebx  +
mov ebx [edi+4] +
cmp esi ebx +
jz loc_413232  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_413229  +
call sub_4132A7  +
add esi 8 +
cmp esi ebx +
jnz loc_41321D  +
mov esi [edi] +
mov edx [edi+8] +
mov ecx esi +
sub edx esi +
and edx 0FFFFFFF8h +
call sub_40A9BE  +
xor eax eax +
mov [edi] eax +
mov [edi+4] eax +
mov [edi+8] eax +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
sub esp 0Ch +
or edi 0FFFFFFFFh +
mov eax [ecx] +
push ebx  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CD6  +
mov edx [ebp+arg_0] +
add ecx 34h +
add ecx 34h +
call sub_431CD6  +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
add ecx 20h +
add ecx 20h +
call sub_431CD6  +
mov edx [ebp+arg_0] +
call sub_431CD6  +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
test ecx ecx +
jz loc_4148BA  +
call sub_4132A7  +
test [ebp+arg_0] 1 +
jz loc_4148C8  +
push esi  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push edi  +
sub esp 0Ch +
push 0FFFFFFFFh  +
sub esp 10h +
push 0FFFFFFFFh  +
sub esp 14h +
sub esp 10h +
sub esp 10h +
push ecx  +
call sub_431CA3  +
push ecx  +
call sub_431CA3  +
push ecx  +
call sub_431CA3  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push ecx  +
call sub_431CA3  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_431CD6  +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
mov edx [esi+10h] +
mov ecx [esi+8] +
lea eax [edx+1] +
cmp ecx eax +
ja loc_4151CE  +
push ecx  +
mov ecx esi +
call sub_415F5B  +
mov ecx [esi+8] +
mov edx [esi+10h] +
lea eax [ecx-1] +
and [esi+0Ch] eax +
lea eax [ecx-1] +
mov edi [esi+0Ch] +
add edi edx +
mov edx [esi+4] +
and edi eax +
cmp dword ptr [edx+edi*4] 0 +
jnz loc_415205  +
push 2Ch  +
call ds:malloc  +
pop ecx  +
mov ecx eax +
test ecx ecx +
jnz loc_4151FC  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov eax [esi+4] +
mov [eax+edi*4] ecx +
mov edx [esi+4] +
push [ebp+arg_0]  +
mov edx [edx+edi*4] +
call sub_417A22  +
inc dword ptr [esi+10h]  +
mov ecx [esi+0Ch] +
add ecx [esi+10h] +
mov edx [esi+8] +
mov eax [esi+4] +
dec edx  +
dec ecx  +
and edx ecx +
pop edi  +
pop esi  +
mov eax [eax+edx*4] +
leave   +
retn 4  +
***
lea ecx [esi+8] +
call sub_431CD6  +
sub esp 34h +
lea ecx [esi+10h] +
push 0FFFFFFFFh  +
test esi esi +
mov edx [ebp+arg_0] +
mov edi ecx +
mov ecx [esi+10h] +
push esi  +
push esi  +
imul edx [ebp+arg_4] +
call sub_431D0C  +
call sub_415BCE  +
call sub_431D0C  +
call sub_415BCE  +
call sub_431CA3  +
push ecx  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
call sub_431CA3  +
call sub_431CA3  +
call sub_431CA3  +
call sub_431D0C  +
mov ecx [ebp-14h] +
call sub_431D0C  +
mov ecx [ebp-14h] +
call sub_431D0C  +
mov ecx [ebp-14h] +
call sub_431D0C  +
mov ecx [ebp-14h] +
mov ecx [ebp+arg_0] +
call sub_431CA3  +
sub esp 1Ch +
push 0  +
add ecx 0Ch +
mov ecx [ebp+arg_0] +
add ecx 4Ch +
mov edx [ebp+arg_0] +
add ecx 40h +
mov edx [ebp+arg_0] +
add ecx 38h +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
add ecx 44h +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
add ecx 3Ch +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
add ecx 28h +
add ecx 28h +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
add ecx 2Ch +
add ecx 2Ch +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
add ecx 24h +
add ecx 24h +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
sub esp 10h +
int 3  +
***
call sub_431D0C  +
call sub_417B08  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417B1A  +
call sub_431D0C  +
call sub_415BCE  +
call sub_431D0C  +
call sub_417AC0  +
call sub_431D0C  +
call sub_417B08  +
call sub_431D0C  +
call sub_417B08  +
call sub_431D0C  +
call sub_415BCE  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_415BCE  +
call sub_431D0C  +
call sub_417AC0  +
call sub_431D0C  +
call sub_417AF6  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417B08  +
call sub_431D0C  +
call sub_417B08  +
call sub_431D0C  +
call sub_415BCE  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417AF6  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417AAE  +
call sub_431D0C  +
call sub_417AE4  +
call sub_431D0C  +
call sub_417AC0  +
call sub_431D0C  +
call sub_417AD2  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417AC0  +
call sub_431D0C  +
call sub_417AAE  +
call sub_431D0C  +
call sub_417AC0  +
call sub_431D0C  +
call sub_417AD2  +
call sub_431D0C  +
call sub_417A91  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
call sub_417AC0  +
call sub_431D0C  +
call sub_417AAE  +
call sub_431D0C  +
call sub_417A91  +
call sub_431D0C  +
call sub_417A7F  +
call sub_431D0C  +
mov ecx [ebp-14h] +
call sub_431D0C  +
mov ecx [ebp-14h] +
call sub_431D0C  +
mov ecx [ebp-14h] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
add ecx 10h +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
test [ebp+arg_0] 1 +
cmp byte_461018 0 +
push esi  +
mov eax [ebp+arg_0] +
mov eax 80004005h +
call sub_431CA3  +
call sub_431CA3  +
push esi  +
lea ecx [esi+54h] +
push esi  +
lea ecx [esi+54h] +
push esi  +
lea ecx [esi+3Ch] +
push esi  +
lea ecx [esi+3Ch] +
push esi  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push esi  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push ecx  +
push esi  +
mov edx [ebp+arg_0] +
mov edx [esi+14h] +
cmp edx 10h +
jb loc_418244  +
mov ecx [esi] +
inc edx  +
call sub_40A9BE  +
and dword ptr [esi+10h] 0 +
mov dword ptr [esi+14h] 0Fh +
mov byte ptr [esi] 0 +
pop esi  +
retn   +
***
push esi  +
push esi  +
mov eax [ecx+8] +
push edi  +
push 0FFFFFFFFh  +
push ebx  +
mov eax [ecx+8] +
call sub_431CA3  +
push 0FFFFFFFFh  +
sub esp 0Ch +
push ecx  +
sub esp 0Ch +
push esi  +
test [ebp+arg_0] 1 +
sub esp 0Ch +
push edi  +
push dword ptr [ecx]  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
pop ebp  +
sub esp 30h +
mov eax dword_460070 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ecx+4] +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_418948  +
push dword ptr [esi+8]  +
xor eax eax +
push offset a0x08x  +
push 0FFFFFFFFh  +
mov word ptr [ebp+var_24] ax +
lea eax [ebp+var_24] +
push 10h  +
push eax  +
call sub_412CC7  +
add esp 14h +
mov ecx edi +
call sub_4127C1  +
mov ecx [eax] +
mov edx [ecx+1Ch] +
lea ecx [ebp+var_24] +
push ecx  +
mov ecx eax +
call edx  +
pop edi  +
pop esi  +
test al al +
jnz loc_41893A  +
push offset aStructuredtr_1  +
jmp loc_41894D  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_43062F  +
leave   +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_30] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_30] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push esi  +
mov esi ecx +
mov ecx [esi+4] +
test ecx ecx +
jz loc_418A3D  +
and dword ptr [esi+4] 0 +
mov eax [ecx] +
call dword ptr [eax+4]  +
test [ebp+arg_0] 1 +
jz loc_418A4B  +
push esi  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_431CA3  +
push esi  +
sub esp 10h +
and esp 0FFFFFFF8h +
cmp dword ptr [ecx+8] 0 +
call sub_431CD6  +
mov ebx ecx +
call sub_418AE8  +
test al al +
jnz loc_418C16  +
lea eax [ebx+1Ch] +
cmp dword ptr [eax+14h] 8 +
jb loc_418E05  +
mov eax [eax] +
jmp loc_418E05  +
xor edx edx +
cmp [ebx+2Ch] edx +
jnz loc_418C02  +
mov ecx [ebx+8] +
test ecx ecx +
jz loc_418C30  +
cmp [ecx] dx +
jz loc_418C30  +
mov al 1 +
mov [ebp-4Dh] al +
jmp loc_418C35  +
mov al dl +
mov [ebp-4Dh] dl +
mov esi [ebx+18h] +
mov [ebp-34h] edx +
mov [ebp-24h] edx +
xor edx edx +
mov dword ptr [ebp-20h] 7 +
mov [ebp-34h] dx +
xor edi edi +
mov [ebp-4] edi +
test al al +
jz loc_418C68  +
lea edx [ecx+2] +
mov ax [ecx] +
add ecx 2 +
cmp ax di +
jnz loc_418C57  +
sub ecx edx +
sar ecx 1 +
jmp loc_418C6A  +
mov ecx edi +
imul eax esi +
add eax ecx +
lea ecx [ebp-34h] +
push eax  +
call sub_40DD4F  +
cmp byte ptr [ebp-4Dh] 0 +
jz loc_418C89  +
push dword ptr [ebx+8]  +
lea ecx [ebp-34h] +
call sub_40A6A8  +
test esi esi +
jz loc_418D57  +
lea ecx [ebp-64h] +
call sub_41C36D  +
mov byte ptr [ebp-4] 1 +
mov esi [ebp-64h] +
test esi esi +
jnz loc_418CAC  +
lea esi [ebx+1Ch] +
jmp loc_418DC5  +
mov dword ptr [ebp-18h] offset off_43943C +
mov ecx esi +
mov [ebp-14h] esi +
mov eax [esi] +
call dword ptr [eax]  +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_418E26  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test al al +
jz loc_418E0B  +
mov ecx [ebx+0Ch] +
lea edx [ebp-18h] +
push edx  +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_418E26  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
test al al +
jnz loc_418D01  +
push offset aStructuredtr_6  +
jmp loc_418E10  +
cmp byte ptr [ebp-4Dh] 0 +
jz loc_418D14  +
push offset asc_436450  +
lea ecx [ebp-34h] +
call sub_40A6A8  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_41A74F  +
mov byte ptr [ebp-4] 3 +
cmp dword ptr [eax+14h] 8 +
mov ecx [eax+10h] +
jb loc_418D2F  +
mov eax [eax] +
push ecx  +
push eax  +
lea ecx [ebp-34h] +
call sub_40A64A  +
lea ecx [ebp-4Ch] +
call sub_40A80D  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_418D50  +
mov [ebp-14h] edi +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
lea eax [ebp-34h] +
lea esi [ebx+1Ch] +
push eax  +
mov ecx esi +
call sub_40DC31  +
cmp dword ptr [ebx+2Ch] 0E000h +
jbe loc_418DC5  +
xor eax eax +
lea edi [ebp-1Ch] +
stos   +
lea edx [ebp-1Ch] +
push ecx  +
mov ecx [ebx+4] +
stos   +
stos   +
call sub_412090  +
mov eax [ebx+2Ch] +
lea ecx [ebp-1Ch] +
mov [ebp-3Ch] eax +
xor eax eax +
mov [ebp-38h] ax +
lea eax [ebp-60h] +
push eax  +
lea eax [ebp-44h] +
mov [ebp-58h] ecx +
xor ecx ecx +
mov dword ptr [ebp-60h] offset off_435780 +
push eax  +
push ecx  +
push ecx  +
mov dword ptr [ebp-5Ch] offset aTag +
mov [ebp-54h] cx +
mov dword ptr [ebp-44h] offset off_435850 +
mov dword ptr [ebp-40h] offset aLength +
call sub_411E95  +
cmp dword ptr [esi+14h] 8 +
jb loc_418DCD  +
mov esi [esi] +
mov eax [ebp-20h] +
cmp eax 8 +
jb loc_418E03  +
mov ecx [ebp-34h] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_418DFB  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_418DFB  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
mov eax esi +
call sub_431C97  +
retn   +
push offset aStructuredtr_7  +
lea ecx [ebp-5Ch] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp-5Ch] +
push eax  +
call j__CxxThrowException  +
push edi  +
push 152139Ah  +
call sub_40E9F5  +
int 3  +
mov eax [ecx+0Ch] +
retn   +
***
cmp dword ptr [ecx] 0 +
jz locret_418E44  +
push dword ptr [ecx]  +
call ds:free  +
pop ecx  +
retn   +
***
mov eax ecx +
mov ecx [eax] +
test ecx ecx +
jz locret_418E55  +
and dword ptr [eax] 0 +
mov eax [ecx] +
jmp dword ptr [eax+4]  +
retn   +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov esi [ebp+arg_0] +
lea edi [ecx+4] +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_418ED5  +
mov ecx edi +
call sub_4127C1  +
mov ecx [eax] +
mov edx [ecx+20h] +
mov cl [esi+8] +
push ecx  +
mov ecx eax +
call edx  +
test al al +
jnz loc_418ECD  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_418EEA  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov esi [ebp+arg_0] +
lea edi [ecx+4] +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_418F78  +
mov ecx edi +
call sub_4127C1  +
movsd xmm0 qword ptr [esi+8] +
mov ecx [eax] +
push ecx  +
push ecx  +
movsd [esp+0Ch+var_C] xmm0 +
mov edx [ecx+2Ch] +
mov ecx eax +
call edx  +
test al al +
jnz loc_418F70  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_418F8D  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41900A  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41A7BA  +
test al al +
jnz loc_419002  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_41901F  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov esi [ebp+arg_0] +
lea edi [ecx+4] +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_4190AC  +
mov ecx edi +
call sub_4127C1  +
movss xmm0 dword ptr [esi+8] +
mov ecx [eax] +
push ecx  +
movss [esp+8+var_8] xmm0 +
mov edx [ecx+30h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_4190A4  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_4190C1  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41913E  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41A807  +
test al al +
jnz loc_419136  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_419153  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_4191D0  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41A8AF  +
test al al +
jnz loc_4191C8  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_4191E5  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419262  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41A8D6  +
test al al +
jnz loc_41925A  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_419277  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_4192F4  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41A8FD  +
test al al +
jnz loc_4192EC  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_419309  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov esi [ebp+arg_0] +
lea edi [ecx+4] +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419391  +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
mov ecx [eax] +
mov edx [ecx+24h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_419389  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_4193A6  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419423  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41A923  +
test al al +
jnz loc_41941B  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_419438  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_4194B5  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41A974  +
test al al +
jnz loc_4194AD  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_4194CA  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 50h  +
mov eax offset loc_433384 +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419555  +
lea eax [esi+8] +
cmp dword ptr [eax+14h] 10h +
jb loc_419505  +
mov eax [eax] +
mov [ebp+cchWideChar] eax +
mov ecx edi +
lea eax [ebp+cchWideChar] +
push eax  +
call sub_41AA1D  +
test al al +
jnz loc_41954D  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_5C] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_5C] +
jmp loc_41956A  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_50] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_50] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_4195E7  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41AA1D  +
test al al +
jnz loc_4195DF  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_4195FC  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419679  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41AAD1  +
test al al +
jnz loc_419671  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_41968E  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41970B  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41AAF8  +
test al al +
jnz loc_419703  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_419720  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov esi [ebp+arg_0] +
lea edi [ecx+4] +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_4197A7  +
mov ecx edi +
call sub_4127C1  +
push 0  +
push dword ptr [esi+8]  +
mov ecx [eax] +
mov edx [ecx+28h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_41979F  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_4197BC  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov esi [ebp+arg_0] +
lea edi [ecx+4] +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419844  +
mov ecx edi +
call sub_4127C1  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
mov ecx [eax] +
mov edx [ecx+28h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_41983C  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_419859  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_4198D6  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41AB1F  +
test al al +
jnz loc_4198CE  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_4198EB  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 4Ch  +
mov eax offset loc_43334F +
call sub_431CD6  +
mov edi ecx +
mov esi [ebp+arg_0] +
lea ecx [edi+4] +
call sub_4127C1  +
push dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419968  +
lea eax [esi+8] +
mov ecx edi +
push eax  +
call sub_41AB43  +
test al al +
jnz loc_419960  +
mov edx [esi+4] +
push ecx  +
lea ecx [ebp+var_28] +
call sub_41D9CC  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_40] +
call sub_41A66A  +
lea eax [ebp+var_40] +
mov byte ptr [ebp+var_4] 1 +
push eax  +
lea ecx [ebp+var_58] +
call sub_41A72B  +
push offset unk_45DFC8  +
lea eax [ebp+var_58] +
jmp loc_41997D  +
call sub_431C97  +
retn 4  +
push offset aStructuredtr_2  +
lea ecx [ebp+var_4C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_4C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_4199AA  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41999F  +
sub esi ecx +
jmp loc_4199AC  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419A13  +
lea ecx [ebx+4] +
call sub_4127C1  +
mov ecx [eax] +
mov edx [ecx+20h] +
mov cl [edi+8] +
push ecx  +
mov ecx eax +
call edx  +
test al al +
jnz loc_4199FF  +
push offset aStructuredtr_3  +
jmp loc_419A18  +
test esi esi +
jz loc_419A0B  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419A55  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419A4A  +
sub esi ecx +
jmp loc_419A57  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419AC6  +
lea ecx [ebx+4] +
call sub_4127C1  +
movsd xmm0 qword ptr [edi+8] +
mov ecx [eax] +
push ecx  +
push ecx  +
movsd [esp+0Ch+var_C] xmm0 +
mov edx [ecx+2Ch] +
mov ecx eax +
call edx  +
test al al +
jnz loc_419AB2  +
push offset aStructuredtr_3  +
jmp loc_419ACB  +
test esi esi +
jz loc_419ABE  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419B08  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419AFD  +
sub esi ecx +
jmp loc_419B0A  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419B67  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41A7BA  +
test al al +
jnz loc_419B53  +
push offset aStructuredtr_3  +
jmp loc_419B6C  +
test esi esi +
jz loc_419B5F  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419BA9  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419B9E  +
sub esi ecx +
jmp loc_419BAB  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419C19  +
lea ecx [ebx+4] +
call sub_4127C1  +
movss xmm0 dword ptr [edi+8] +
mov ecx [eax] +
push ecx  +
movss [esp+8+var_8] xmm0 +
mov edx [ecx+30h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_419C05  +
push offset aStructuredtr_3  +
jmp loc_419C1E  +
test esi esi +
jz loc_419C11  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419C5B  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419C50  +
sub esi ecx +
jmp loc_419C5D  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419CBA  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41A807  +
test al al +
jnz loc_419CA6  +
push offset aStructuredtr_3  +
jmp loc_419CBF  +
test esi esi +
jz loc_419CB2  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419CFC  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419CF1  +
sub esi ecx +
jmp loc_419CFE  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419D5B  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41A8AF  +
test al al +
jnz loc_419D47  +
push offset aStructuredtr_3  +
jmp loc_419D60  +
test esi esi +
jz loc_419D53  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419D9D  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419D92  +
sub esi ecx +
jmp loc_419D9F  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419DFC  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41A8D6  +
test al al +
jnz loc_419DE8  +
push offset aStructuredtr_3  +
jmp loc_419E01  +
test esi esi +
jz loc_419DF4  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419E3E  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419E33  +
sub esi ecx +
jmp loc_419E40  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419E9D  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41A8FD  +
test al al +
jnz loc_419E89  +
push offset aStructuredtr_3  +
jmp loc_419EA2  +
test esi esi +
jz loc_419E95  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419EDF  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419ED4  +
sub esi ecx +
jmp loc_419EE1  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419F4A  +
lea ecx [ebx+4] +
call sub_4127C1  +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+8]  +
mov ecx [eax] +
mov edx [ecx+24h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_419F36  +
push offset aStructuredtr_3  +
jmp loc_419F4F  +
test esi esi +
jz loc_419F42  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_419F8C  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_419F81  +
sub esi ecx +
jmp loc_419F8E  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_419FEB  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41A923  +
test al al +
jnz loc_419FD7  +
push offset aStructuredtr_3  +
jmp loc_419FF0  +
test esi esi +
jz loc_419FE3  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A02D  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A022  +
sub esi ecx +
jmp loc_41A02F  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A08C  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41A974  +
test al al +
jnz loc_41A078  +
push offset aStructuredtr_3  +
jmp loc_41A091  +
test esi esi +
jz loc_41A084  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 10h  +
mov eax offset loc_4333D4 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A0CE  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A0C3  +
sub esi ecx +
jmp loc_41A0D0  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A13B  +
lea eax [edi+8] +
cmp dword ptr [eax+14h] 10h +
jb loc_41A10E  +
mov eax [eax] +
mov [ebp+cchWideChar] eax +
mov ecx ebx +
lea eax [ebp+cchWideChar] +
push eax  +
call sub_41AA1D  +
test al al +
jnz loc_41A127  +
push offset aStructuredtr_3  +
jmp loc_41A140  +
test esi esi +
jz loc_41A133  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_1C] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_1C] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A17D  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A172  +
sub esi ecx +
jmp loc_41A17F  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A1DC  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41AA1D  +
test al al +
jnz loc_41A1C8  +
push offset aStructuredtr_3  +
jmp loc_41A1E1  +
test esi esi +
jz loc_41A1D4  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A21E  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A213  +
sub esi ecx +
jmp loc_41A220  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A27D  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41AAD1  +
test al al +
jnz loc_41A269  +
push offset aStructuredtr_3  +
jmp loc_41A282  +
test esi esi +
jz loc_41A275  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A2BF  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A2B4  +
sub esi ecx +
jmp loc_41A2C1  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A31E  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41AAF8  +
test al al +
jnz loc_41A30A  +
push offset aStructuredtr_3  +
jmp loc_41A323  +
test esi esi +
jz loc_41A316  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A360  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A355  +
sub esi ecx +
jmp loc_41A362  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A3CA  +
lea ecx [ebx+4] +
call sub_4127C1  +
push 0  +
push dword ptr [edi+8]  +
mov ecx [eax] +
mov edx [ecx+28h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_41A3B6  +
push offset aStructuredtr_3  +
jmp loc_41A3CF  +
test esi esi +
jz loc_41A3C2  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A40C  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A401  +
sub esi ecx +
jmp loc_41A40E  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A477  +
lea ecx [ebx+4] +
call sub_4127C1  +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+8]  +
mov ecx [eax] +
mov edx [ecx+28h] +
mov ecx eax +
call edx  +
test al al +
jnz loc_41A463  +
push offset aStructuredtr_3  +
jmp loc_41A47C  +
test esi esi +
jz loc_41A46F  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push 0Ch  +
mov eax offset loc_4333B1 +
call sub_431CA3  +
mov ebx ecx +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
test esi esi +
jz loc_41A4B9  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_41A4AE  +
sub esi ecx +
jmp loc_41A4BB  +
xor esi esi +
inc esi  +
lea ecx [ebp+arg_0] +
mov edx esi +
call sub_41A5D5  +
and [ebp+var_4] 0 +
mov ecx [edi+4] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
call sub_41D955  +
lea ecx [ebx+4] +
call sub_4127C1  +
push esi  +
mov ecx [eax] +
mov edx [ecx+18h] +
mov ecx eax +
call edx  +
test al al +
jz loc_41A518  +
lea eax [edi+8] +
mov ecx ebx +
push eax  +
call sub_41AB1F  +
test al al +
jnz loc_41A504  +
push offset aStructuredtr_3  +
jmp loc_41A51D  +
test esi esi +
jz loc_41A510  +
push esi  +
call ds:free  +
pop ecx  +
call sub_431C83  +
retn 4  +
push offset aStructuredtr_4  +
lea ecx [ebp+var_18] +
call sub_418058  +
push offset unk_45DFC8  +
lea eax [ebp+var_18] +
push eax  +
call j__CxxThrowException  +
int 3  +
***
push ecx  +
sub esp 0Ch +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
call sub_431CA3  +
sub esp 14h +
sub esp 34h +
push esi  +
push esi  +
push esi  +
sub esp 44h +
sub esp 34h +
push ebx  +
push esi  +
push esi  +
add ecx 4 +
push esi  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push esi  +
push 0FFFFFFFFh  +
mov eax [esi] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ebx  +
sub esp 10h +
mov eax [esi+4] +
call sub_431CA3  +
cmp dword ptr [edx+14h] 8 +
push ebx  +
mov eax [esi] +
and esp 0FFFFFFF8h +
push [ebp+arg_C]  +
push edi  +
mov ecx offset dword_4600C8 +
push esi  +
movzx eax cl +
push esi  +
and esp 0FFFFFFF8h +
lea eax [ecx+4] +
test [ebp+arg_0] 1 +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
or eax [ecx+4] +
jz loc_41B6FC  +
xor eax eax +
jmp loc_41B710  +
push ecx  +
push [ebp+arg_0]  +
push offset sub_41B07C  +
push offset unk_438730  +
call ds:EventRegister  +
pop ebp  +
retn 8  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_431CA3  +
push esi  +
lea ecx [esi+24h] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
cmp esi 2 +
push ebx  +
mov eax [ecx+18h] +
push 0FFFFFFFFh  +
push ecx  +
mov ecx [esi+10h] +
jmp loc_41C434  +
lea eax [ecx-1] +
mov [esi+10h] eax +
mov ecx eax +
test eax eax +
jnz loc_41C434  +
and [esi+0Ch] eax +
test ecx ecx +
jnz loc_41C425  +
push edi  +
mov edi [esi+8] +
jmp loc_41C452  +
mov eax [esi+4] +
dec edi  +
cmp dword ptr [eax+edi*4] 0 +
jz loc_41C452  +
push dword ptr [eax+edi*4]  +
call ds:free  +
pop ecx  +
test edi edi +
jnz loc_41C43E  +
mov ecx [esi+4] +
pop edi  +
test ecx ecx +
jz loc_41C469  +
mov edx [esi+8] +
shl edx 2 +
call sub_40A9BE  +
mov eax [esi] +
xor ecx ecx +
push eax  +
mov [esi+8] ecx +
mov [esi+4] ecx +
mov [esi] ecx +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_456E70 +
retn   +
***
add al 83h +
retf 0F0FFh  +
***
mov eax [ebp+arg_0] +
test [ebp+arg_0] 1 +
push ebx  +
sub esp 14h +
sub esp 34h +
push ecx  +
sub esp 34h +
sub esp 14h +
and esp 0FFFFFFF8h +
mov edi [ecx+1Ch] +
mov edx ecx +
push ecx  +
mov dword ptr [esi] offset off_456F0C +
mov eax [esi-68h] +
call sub_431CA3  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
call sub_431CA3  +
test byte ptr [esi+3Ch] 1 +
call sub_431CA3  +
push 0FFFFFFFFh  +
call sub_431D0C  +
sub ecx [ecx-4] +
push ecx  +
push ebx  +
cmp [ebp+arg_0] 0 +
push ebx  +
push ebx  +
sub esp 18h +
sub esp 0Ch +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
pop eax  +
and esp 0FFFFFFF8h +
push ecx  +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
mov ecx [edi+4] +
call sub_431CA3  +
mov esi ecx +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_41E19E  +
lea ebx [esi+48h] +
mov byte ptr [ebp-20h] 1 +
push ebx  +
mov [ebp-24h] ebx +
call sub_4315AB  +
pop ecx  +
and dword ptr [ebp-4] 0 +
cmp byte ptr [esi+4Ch] 0 +
jz loc_41E11F  +
push ebx  +
call sub_4315C7  +
jmp loc_41E19D  +
lea eax [esi+18h] +
mov byte ptr [ebp-18h] 0 +
push eax  +
mov [ebp-1Ch] eax +
call ds:_Mtx_lock  +
pop ecx  +
test eax eax +
jz loc_41E13C  +
push eax  +
call ds:?_Throw_C_error@std@@YAXH@Z  +
mov byte ptr [ebp-18h] 1 +
mov byte ptr [ebp-4] 1 +
lea eax [esi+0Ch] +
mov edi [esi+10h] +
mov [ebp-10h] eax +
cmp edi [esi+14h] +
jz loc_41E17D  +
and dword ptr [edi] 0 +
and dword ptr [edi+4] 0 +
mov [ebp-14h] edi +
mov byte ptr [ebp-4] 2 +
lea ecx [edi+8] +
push dword ptr [ebp+0Ch]  +
call sub_40A7EA  +
mov esi [ebp+8] +
add edi 20h +
mov eax [ebp-10h] +
movs   +
movs   +
movs   +
add dword ptr [eax+4] 2Ch +
jmp loc_41E18D  +
push ecx  +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [ebp+8]  +
mov ecx eax +
push edi  +
call sub_41E52C  +
push dword ptr [ebp-1Ch]  +
call ds:_Mtx_unlock  +
push ebx  +
call sub_4315C7  +
pop ecx  +
pop ecx  +
call sub_431C83  +
retn 8  +
***
mov ecx [ecx+8] +
mov ecx [ecx+8] +
mov ecx [ecx+8] +
mov ecx [ecx+8] +
mov ecx [ecx+8] +
push edi  +
call sub_431CA3  +
mov al [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_4336DE  +
mov eax large fs:0 +
push eax  +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov eax dword_460070 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
lea eax [esi+50h] +
push eax  +
lea ecx [ebp+var_14] +
call sub_40E97D  +
lea edi [esi+80h] +
jmp loc_41E488  +
push [ebp+var_14]  +
push edi  +
call ds:_Cnd_wait  +
pop ecx  +
pop ecx  +
cmp byte ptr [esi+4Ch] 0 +
jnz loc_41E47C  +
cmp [ebp+var_10] 0 +
jz loc_41E49E  +
push [ebp+var_14]  +
call ds:_Mtx_unlock  +
pop ecx  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push ecx  +
push esi  +
call sub_431D0C  +
call sub_431D0C  +
push ecx  +
mov eax [ecx+8] +
mov eax large fs:2Ch +
and dword ptr [ecx+4] 0 +
sub esp 0Ch +
cmp word_461020 0 +
call sub_41EA87  +
sub esp 108h +
mov eax large fs:2Ch +
movzx eax byte_461060 +
sub esp 10h +
mov edi ecx +
cmp byte ptr [ecx+4] 0 +
lea ecx [esi+1Ch] +
mov edi ecx +
push esi  +
sub esp 10h +
push ecx  +
push ecx  +
push esi  +
cmp byte ptr [ecx+0Ch] 0 +
mov eax large fs:2Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
cmp dword ptr [esi] 0 +
test esi esi +
mov eax [ebp+arg_0] +
mov ecx [esi] +
call sub_431324  +
cmp dword_460D70 0 +
push [ebp+arg_4]  +
push 0  +
push [ebp+arg_0]  +
push edx  +
push ecx  +
call sub_412CF9  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call ds:__stdio_common_vswprintf_s  +
or ecx 0FFFFFFFFh +
add esp 1Ch +
test eax eax +
cmovs eax ecx +
pop ebp  +
retn   +
***
mov eax off_460350 +
mov edx [ebp+arg_0] +
call sub_41F365  +
push esi  +
sub esp 10h +
call sub_431CD6  +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
push ecx  +
sub esp 0ACh +
push ecx  +
push ecx  +
sub esp 0Ch +
push ecx  +
and esp 0FFFFFFF8h +
push ecx  +
mov esi ecx +
mov ecx esi +
mov eax [esi-50h] +
call sub_431CA3  +
mov ecx [esi] +
push esi  +
push ecx  +
mov eax [ecx+4] +
mov eax [edx+10h] +
call sub_431CA3  +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov eax [ecx+18h] +
call sub_431D0C  +
call sub_431CA3  +
sub ecx [ecx-4] +
mov eax [ebp+arg_0] +
push ecx  +
mov edi ecx +
mov esi [edi] +
test esi esi +
jz loc_420664  +
push ebx  +
mov ebx [edi+4] +
cmp esi ebx +
jz loc_42064A  +
lea ecx [esi+4] +
call sub_40A80D  +
add esi 20h +
cmp esi ebx +
jnz loc_420639  +
mov esi [edi] +
mov edx [edi+8] +
mov ecx esi +
sub edx esi +
and edx 0FFFFFFE0h +
call sub_40A9BE  +
xor eax eax +
mov [edi] eax +
mov [edi+4] eax +
mov [edi+8] eax +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
lea ecx [esi+30h] +
sub esp 0Ch +
push esi  +
sub esp 0B8h +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
test esi esi +
push esi  +
and esp 0FFFFFFF8h +
push ecx  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov edx [ecx+4] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_4] +
movzx eax word ptr [ebp+arg_4] +
push [ebp+arg_0]  +
push ebx  +
sub esp 1Ch +
push esi  +
push ebx  +
mov ecx [ecx] +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
mov edx [ebp+arg_20] +
push esi  +
push dword ptr [esi+1Ch]  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 40h +
call sub_431CA3  +
push ecx  +
sub esp 14h +
sub esp 1Ch +
mov edx offset unk_4630D4 +
push ebx  +
push esi  +
call sub_431CA3  +
mov eax [ecx] +
mov eax [ebp+arg_0] +
push ebx  +
mov eax [esi+4] +
call sub_431CA3  +
mov al [esi+6] +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
push ecx  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
sub esp 20h +
mov eax [ecx] +
push offset unk_4630E8  +
lea ecx [esi+30h] +
push esi  +
lea ecx [esi+60h] +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov esi ecx +
mov esi ecx +
mov esi ecx +
mov esi ecx +
push esi  +
and esp 0FFFFFFF8h +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
push ecx  +
sub esp 0Ch +
and esp 0FFFFFFF8h +
push ecx  +
push ecx  +
mov ecx offset off_4587A0 +
call sub_40F68E  +
test al al +
jnz loc_423174  +
mov edx offset aSoftwarePoli_0 +
lea ecx [esp+8+var_8] +
call sub_4252B2  +
mov al [esp+8+var_4] +
test al al +
jnz loc_423174  +
mov edx offset aSoftwarePoli_1 +
lea ecx [esp+8+var_8] +
call sub_4252B2  +
mov al [esp+8+var_4] +
test al al +
jz loc_423176  +
mov al 1 +
mov esp ebp +
pop ebp  +
retn   +
***
jmp fword ptr [eax+2]  +
***
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
movzx eax cl +
sub esp 24h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
xor bl bl +
push ecx  +
lea ecx [esp+24h+var_C] +
lea eax [esi+48h] +
push eax  +
call sub_411980  +
push ecx  +
lea eax [esi+58h] +
push eax  +
lea ecx [esp+28h+var_18] +
call sub_411980  +
cmp [esi+0ABh] bl +
jnz loc_423A79  +
mov ecx [esi+50h] +
xor ebx ebx +
inc ebx  +
mov [esi+0ABh] bl +
test ecx ecx +
jz loc_423A79  +
movzx eax byte ptr [esi+0A8h] +
mov edx [ecx] +
push eax  +
lea eax [esi+60h] +
push eax  +
call dword ptr [edx+1Ch]  +
lea ecx [esp+28h+var_20] +
call sub_411956  +
lea ecx [esp+28h+var_14] +
call sub_411956  +
test bl bl +
jz loc_423A96  +
mov ecx esi +
call sub_422CE5  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 14h +
and dword ptr [esp+0Ch] 0 +
push esi  +
mov esi ecx +
lea eax [esi+5Ch] +
mov [esp+0Ch] eax +
push dword ptr [eax]  +
call ds:AcquireSRWLockShared  +
inc dword ptr [esp+10h]  +
mov al [esi+0AAh] +
mov [esp+0Bh] al +
mov eax [esp+10h] +
test eax eax +
jz loc_423AF0  +
dec dword ptr [esp+10h]  +
mov ecx [esp+0Ch] +
push dword ptr [ecx]  +
call ds:ReleaseSRWLockShared  +
mov ecx [esp+10h] +
test ecx ecx +
jnz loc_423AD3  +
movzx eax [ebp+arg_4] +
cmp [ebp+arg_0] 0 +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
sub esp 0Ch +
push esi  +
mov esi ecx +
push ecx  +
lea ecx [esp+14h+var_C] +
lea eax [esi+48h] +
push eax  +
call sub_411980  +
push ecx  +
mov ecx esi +
call sub_423B81  +
mov ecx [esi+50h] +
and dword ptr [esi+50h] 0 +
test ecx ecx +
jz loc_423F76  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
lea ecx [esp+14h+var_10] +
call sub_411956  +
pop esi  +
mov esp ebp +
pop ebp  +
retn   +
***
mov al ds:8DFFFFFEh +
test [eax+50FFFFFEh] ebp +
lea ecx [esi+60h] +
call sub_4240DB  +
lea eax [ebp-168h] +
mov dword ptr [ebp-168h] offset aSetPrivacyopti +
push eax  +
mov ecx esi +
call sub_424440  +
jmp loc_42407A  +
dec dword ptr [ebp-160h]  +
mov eax [ebp-164h] +
push dword ptr [eax]  +
call ds:ReleaseSRWLockShared  +
mov eax [ebp-160h] +
test eax eax +
jnz loc_424065  +
lea ecx [ebp-158h] +
call sub_4228C5  +
lea ecx [ebp-174h] +
call sub_411956  +
mov ecx esi +
call sub_422CE5  +
mov ecx [ebx+8] +
test ecx ecx +
jz loc_4240AE  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_43062F  +
mov esp ebp +
pop ebp  +
mov esp ebx +
pop ebx  +
retn 4  +
***
push ecx  +
retn   +
***
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
sub esp 60h +
mov eax large fs:2Ch +
mov ecx [esi+24h] +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
sub esp 0Ch +
sub esp 0Ch +
sub esp 10h +
mov al [ebp+arg_0] +
push esi  +
test [ebp+arg_0] 1 +
cmp [ebp+arg_0] 0 +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
call sub_431CA3  +
mov eax [ebp+arg_0] +
push ebx  +
mov ecx [ecx+0Ch] +
mov eax [ebp+arg_0] +
sub ecx 4 +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
cmp dword ptr [edx+14h] 8 +
push ecx  +
mov edx [ebp+arg_4] +
mov eax [ecx+8] +
imul edx [ebp+arg_4] +
push ecx  +
push esi  +
mov eax [ebp+arg_0] +
call sub_431D0C  +
mov eax [ecx+8] +
push esi  +
push esi  +
push ebx  +
sub esp 0Ch +
lea ecx [esi+20h] +
mov eax [esi] +
mov eax [esi] +
push ecx  +
sub esp 0Ch +
push ecx  +
push esi  +
mov ecx [ebp+arg_0] +
push ebx  +
push ecx  +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_4596EC +
jz loc_425A31  +
push esi  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebx  +
mov ebx esp +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
add esp 4 +
push ebp  +
mov ebp [ebx+4] +
mov [esp+4] ebp +
mov ebp esp +
sub esp 48h +
mov al byte ptr word_462FDC+1 +
and dword ptr [ebp-20h] 0 +
push esi  +
mov esi ecx +
mov [ebp-1] al +
push edi  +
lea eax [esi+0Ch] +
mov [ebp-24h] eax +
push dword ptr [eax]  +
call ds:AcquireSRWLockShared  +
inc dword ptr [ebp-20h]  +
mov eax [esi+14h] +
mov esi [esi+10h] +
mov [ebp-0Ch] eax +
mov [ebp-8] esi +
cmp esi eax +
jz loc_425B2A  +
mov edi [ebx+8] +
xorps xmm0 xmm0 +
mov dword ptr [ebp-48h] offset off_4596CC +
lea ecx [ebp-38h] +
movlpd oword ptr [ebp-40h] xmm0 +
call sub_40A859  +
mov ecx [esi] +
mov byte ptr [ebp-30h] 1 +
mov dword ptr [ebp-48h] offset off_4596CC +
mov eax [ecx] +
call dword ptr [eax+14h]  +
push edi  +
mov ecx [eax] +
mov edx [ecx+4] +
mov ecx eax +
call edx  +
test al al +
jz loc_425AC8  +
mov ecx [esi] +
push edi  +
mov eax [ecx] +
call dword ptr [eax+4]  +
lea ecx [ebp-48h] +
call sub_425DFF  +
cmp byte ptr [ebp-1] 0 +
jz loc_425B0A  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-48h] +
call sub_425DA0  +
mov ecx [ebp-8] +
mov edi [eax] +
mov ecx [ecx] +
mov esi [eax+4] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
push esi  +
push edi  +
mov edi [ebx+8] +
mov ecx offset dword_462F30 +
push eax  +
mov eax [edi+0Ch] +
push dword ptr [eax+8]  +
call sub_42ABD9  +
mov esi [ebp-8] +
add esi 4 +
mov [ebp-8] esi +
cmp esi [ebp-0Ch] +
jnz loc_425A89  +
jmp loc_425B2A  +
dec dword ptr [ebp-20h]  +
mov eax [ebp-24h] +
push dword ptr [eax]  +
call ds:ReleaseSRWLockShared  +
mov eax [ebp-20h] +
test eax eax +
jnz loc_425B1B  +
push ecx  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
sub esp 1Ch +
sub esp 0Ch +
push ecx  +
sub esp 0Ch +
push ecx  +
push ecx  +
xor eax eax +
mov edi ecx +
sub esp 0Ch +
push ecx  +
push ecx  +
push 3E8h  +
push esi  +
sub esp 0Ch +
push edi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
mov edi ecx +
sub esp 0Ch +
push edi  +
mov eax [ebp+arg_0] +
push ecx  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [ecx] +
add ecx 4 +
push ecx  +
push ecx  +
add ecx 0Ch +
push esi  +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ebx  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
test ecx ecx +
push esi  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 18h +
sub esp 18h +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 14h +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push ecx  +
lea ecx [esi+18h] +
call sub_418231  +
lea ecx [esi+0Ch] +
call sub_41F26C  +
mov ecx esi +
pop esi  +
jmp loc_4253A4  +
***
mov ecx [esi+28h] +
mov eax [edx] +
push 0FFFFFFFFh  +
lea eax [esi+4] +
push esi  +
push esi  +
lea ecx [edi+0B4h] +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
mov dl 1 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
add ecx 0FFFFFFFCh +
push esi  +
test esi esi +
test esi esi +
cmp [ebp+arg_0] 0 +
sub esp 38h +
mov eax [ebp+arg_8] +
sub esp 0Ch +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push esi  +
push esi  +
sub esp 5FCh +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
sub esp 10h +
sub esp 10h +
push ecx  +
cmp byte ptr [ecx+60h] 0 +
sub esp 130h +
sub esp 130h +
cmp byte ptr [ecx+50h] 0 +
sub esp 100h +
cmp byte ptr [ecx+4Ch] 0 +
sub esp 0F4h +
cmp byte ptr [ecx+54h] 0 +
sub esp 108h +
cmp byte ptr [ecx+68h] 0 +
sub esp 148h +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
sub esp 0Ch +
add ecx 18h +
test [ebp+arg_0] 1 +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
and esp 0FFFFFFF8h +
push esi  +
push 0FFFFFFFFh  +
push esi  +
sub esp 10h +
sub esp 10h +
push 0FFFFFFFFh  +
mov ecx [esi+5Ch] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_433C02  +
mov eax large fs:0 +
push eax  +
sub esp 5Ch +
mov eax dword_460070 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov edi ecx +
mov eax [ebp+arg_4] +
lea ecx [ebp+var_34] +
mov esi [ebp+arg_0] +
mov [ebp+var_44] eax +
xor eax eax +
mov [ebp+var_29] al +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
call sub_42B423  +
mov ecx [edi+58h] +
lea edx [ebp+var_40] +
push edx  +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx [edi+54h] +
cmp ecx [eax+4] +
jg loc_42ACEE  +
jl loc_42AC46  +
mov ecx [edi+50h] +
cmp ecx [eax] +
jnb loc_42ACEE  +
push ecx  +
lea ebx [edi+18h] +
push ebx  +
lea ecx [ebp+var_58] +
call sub_40EF00  +
push esi  +
push offset aPerftrackingda  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_42ACD3  +
lea eax [ebp+var_40] +
mov ecx edi +
push eax  +
call sub_42AE9F  +
lea ecx [ebp+var_34] +
mov [ebp+var_48] eax +
cmp ecx eax +
jz loc_42ACAD  +
mov esi [ebp+var_34] +
mov eax ecx +
push dword ptr [esi+4]  +
push eax  +
call sub_41AEBB  +
mov edx [ebp+var_48] +
mov [esi+4] esi +
mov [esi] esi +
mov [esi+8] esi +
and [ebp+var_30] 0 +
mov ecx [ebp+var_34] +
mov eax [edx] +
mov [ebp+var_34] eax +
mov eax [edx+4] +
mov [edx] ecx +
mov ecx [ebp+var_30] +
mov [ebp+var_30] eax +
mov [edx+4] ecx +
mov eax [ebp+var_40] +
push dword ptr [eax+4]  +
lea eax [ebp+var_40] +
push eax  +
mov ecx eax +
call sub_41AEBB  +
push [ebp+var_40]  +
call ds:free  +
pop ecx  +
mov ecx edi +
mov [ebp+var_29] 1 +
call sub_42AE31  +
lea ecx [ebp+var_58] +
call sub_40EED7  +
cmp [ebp+var_29] 0 +
jz loc_42ACF1  +
mov eax [edi] +
lea ecx [ebp+var_34] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
jmp loc_42ACF1  +
lea ebx [edi+18h] +
push ecx  +
push ebx  +
lea ecx [ebp+var_64] +
call sub_40EF00  +
mov edx [ebp+var_44] +
xor ebx ebx +
mov ecx edx +
mov [ebp+var_28] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] 7 +
lea esi [ecx+2] +
mov ax [ecx] +
add ecx 2 +
cmp ax bx +
jnz loc_42AD12  +
sub ecx esi +
sar ecx 1 +
push ecx  +
push edx  +
lea ecx [ebp+var_28] +
call sub_40A775  +
lea eax [ebp+var_28] +
add edi 10h +
push eax  +
lea eax [ebp+var_40] +
mov ecx edi +
push eax  +
call sub_42B613  +
mov ecx edi +
mov eax [eax] +
inc dword ptr [eax+44h]  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
call sub_42B613  +
mov esi [ebp+arg_C] +
mov eax [eax] +
cmp [eax+4Ch] esi +
jg loc_42AD6B  +
mov edx [ebp+arg_8] +
jl loc_42AD65  +
cmp [eax+48h] edx +
jnb loc_42AD6B  +
mov [eax+48h] edx +
mov [eax+4Ch] esi +
lea eax [ebp+var_28] +
mov ecx edi +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
call sub_42B613  +
mov esi [ebp+arg_C] +
mov ecx ebx +
mov edi [ebp+arg_8] +
mov edx [eax] +
mov eax ebx +
cmp ds:dword_459FA4[eax] esi +
jg loc_42ADA3  +
jl loc_42AD98  +
cmp ds:dword_459FA0[eax] edi +
jnb loc_42ADA3  +
add eax 8 +
inc ecx  +
cmp eax 38h +
jb loc_42AD86  +
jmp loc_42ADA7  +
inc dword ptr [edx+ecx*4+28h]  +
mov eax [ebp+var_14] +
cmp eax 8 +
jb loc_42ADDD  +
mov ecx [ebp+var_28] +
lea eax ds:2[eax*2] +
mov edx ecx +
cmp eax 1000h +
jb loc_42ADD5  +
mov ecx [ecx-4] +
sub edx ecx +
lea eax [edx-4] +
cmp eax 1Fh +
jbe loc_42ADD5  +
call ds:_invalid_parameter_noinfo_noreturn  +
push ecx  +
call ds:free  +
pop ecx  +
xor eax eax +
mov [ebp+var_18] ebx +
lea ecx [ebp+var_64] +
mov [ebp+var_14] 7 +
mov word ptr [ebp+var_28] ax +
call sub_40EED7  +
mov eax [ebp+var_34] +
push dword ptr [eax+4]  +
lea eax [ebp+var_34] +
push eax  +
mov ecx eax +
call sub_41AEBB  +
push [ebp+var_34]  +
call ds:free  +
pop ecx  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_43062F  +
leave   +
retn 10h  +
***
sub esp 0Ch +
call sub_431CA3  +
mov esi ecx +
push ecx  +
push ecx  +
and esp 0FFFFFFF8h +
sub esp 0Ch +
sub esp 14h +
sub esp 44h +
push ecx  +
call sub_431CA3  +
mov ecx [esi+18h] +
mov ecx offset dword_462DC8 +
push 0FFFFFFFFh  +
push offset loc_432C0D  +
mov eax large fs:0 +
push eax  +
push esi  +
mov eax dword_460070 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi ecx +
push [ebp+arg_0]  +
mov ecx [esi+4] +
call sub_42EFEE  +
mov ecx [ebp+arg_0] +
push 1  +
push offset a__0  +
call sub_41D149  +
mov ecx [esi+8] +
lea edx [ecx+1] +
mov al [ecx] +
inc ecx  +
test al al +
jnz loc_42B91C  +
sub ecx edx +
push ecx  +
push dword ptr [esi+8]  +
mov ecx [ebp+arg_0] +
call sub_41D149  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
leave   +
retn 4  +
***
lea ecx [esi+0Ch] +
sub esp 1Ch +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
call sub_431CA3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi] 0 +
xor edi edi +
push 24h  +
mov [esi+4] edi +
mov [esi+8] edi +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_42BD6F  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov [eax] eax +
mov [eax+4] eax +
mov [esi+4] eax +
lea ecx [esi+0Ch] +
mov [ebp-4] edi +
mov [ecx] edi +
mov [ecx+4] edi +
mov [ecx+8] edi +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi+18h] 7 +
mov dword ptr [esi+1Ch] 8 +
mov dword ptr [esi] 3F800000h +
push dword ptr [esi+4]  +
push 10h  +
call sub_40F531  +
mov eax esi +
call sub_431C83  +
retn   +
***
mov ecx [esi] +
call sub_431CA3  +
call sub_431CA3  +
call sub_431D0C  +
mov eax offset loc_42BF63 +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
mov edx esi +
push edi  +
mov edi ecx +
cmp dword ptr [esi+14h] 10h +
jb loc_42BF7D  +
mov edx [esi] +
push dword ptr [esi+10h]  +
call sub_40F606  +
push eax  +
push esi  +
lea eax [ebp+var_8] +
mov ecx edi +
push eax  +
call sub_42C3AE  +
mov ecx [eax+4] +
test ecx ecx +
jnz loc_42BF9C  +
mov ecx [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ecx +
leave   +
retn 8  +
***
call sub_431CA3  +
sub esp 34h +
mov eax [edx+4] +
push edi  +
and dword ptr [eax] 0 +
mov edi [edx] +
test edi edi +
jz loc_42C1A8  +
push esi  +
mov esi [edi] +
lea ecx [edi+8] +
call sub_418231  +
push edi  +
call ds:free  +
mov edi esi +
pop ecx  +
test esi esi +
jnz loc_42C18F  +
pop esi  +
pop edi  +
retn   +
***
push ecx  +
sub esp 18h +
mov eax [ecx+18h] +
push ecx  +
test [ebp+arg_0] 1 +
cmp dword ptr [edx+14h] 10h +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov dword ptr [eax] offset off_45A0A0 +
pop ebp  +
retn 4  +
***
push edi  +
mov eax [ebp+arg_0] +
push esi  +
lea ecx [esi+0E0h] +
push 0FFFFFFFFh  +
sub esp 14h +
sub esp 24h +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push ebx  +
push edi  +
sub esp 0Ch +
push edi  +
push ebx  +
add ecx 4 +
add ecx 4 +
push 0FFFFFFFFh  +
sub esp 24h +
test esi esi +
mov edi ecx +
call sub_42D1E7  +
push edi  +
call sub_431CA3  +
push ebx  +
sub esp 0Ch +
push 0FFFFFFFFh  +
push esi  +
mov ecx [esi+24h] +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
call sub_431CD6  +
push ebx  +
call sub_431CD6  +
mov dword ptr [ecx] offset off_45A4EC +
push esi  +
lea ecx [esi+0D8h] +
push ebx  +
call sub_431D0C  +
lea ecx [esi+60h] +
push esi  +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_428D4B  +
test [ebp+arg_0] 1 +
jz loc_42DE72  +
push esi  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
mov esi ecx +
mov al byte_462EB4 +
test esi esi +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
call sub_431CA3  +
push ecx  +
push esi  +
mov ecx [esi+60h] +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
lea ecx [esi+34h] +
push esi  +
test esi esi +
push ecx  +
and esp 0FFFFFFF8h +
mov eax dword_462DCC +
mov eax [ebp+arg_0] +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
mov eax large fs:2Ch +
mov eax large fs:2Ch +
mov eax [ebp+arg_0] +
sub esp 0Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 0Ch +
mov eax [ebp+arg_4] +
mov eax [ecx] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
call sub_431CD6  +
call sub_431CA3  +
mov edi ecx +
mov ebx [ebp+0Ch] +
mov edx ebx +
cmp dword ptr [ebx+14h] 10h +
jb loc_42FE27  +
mov edx [ebx] +
push dword ptr [ebx+10h]  +
call sub_40F606  +
push eax  +
mov [ebp+0Ch] eax +
mov ecx edi +
push ebx  +
lea eax [ebp-18h] +
push eax  +
call sub_42C3AE  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_42FE54  +
mov eax [ebp+8] +
mov [eax] ecx +
mov byte ptr [eax+4] 0 +
jmp loc_42FF51  +
cmp dword ptr [edi+8] 71C71C7h +
jnz loc_42FE68  +
push offset aUnordered_mapS  +
call ds:?_Xlength_error@std@@YAXPBD@Z  +
lea eax [edi+4] +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-1Ch] 0 +
push 24h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_42FE8B  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
lea ecx [esi+8] +
mov [ebp-1Ch] esi +
push ebx  +
call sub_4180DC  +
and dword ptr [esi+20h] 0 +
mov dword ptr [ebp-4] 1 +
mov eax [edi+8] +
inc eax  +
movd xmm0 eax +
cvtdq2pd xmm0 xmm0 +
shr eax 1Fh +
addsd xmm0 ds:qword_45AAD0[eax*8] +
mov eax [edi+1Ch] +
cvtpd2ps xmm1 xmm0 +
movd xmm0 eax +
cvtdq2pd xmm0 xmm0 +
shr eax 1Fh +
addsd xmm0 ds:qword_45AAD0[eax*8] +
cvtpd2ps xmm0 xmm0 +
divss xmm1 xmm0 +
comiss xmm1 dword ptr [edi] +
jbe loc_42FF00  +
mov ecx edi +
call sub_42C1CD  +
mov ebx [ebp+0Ch] +
lea eax [esi+8] +
push ebx  +
push eax  +
lea eax [ebp-20h] +
mov ecx edi +
push eax  +
call sub_42C3AE  +
mov edx [eax] +
jmp loc_42FF06  +
mov edx [ebp-18h] +
mov ebx [ebp+0Ch] +
mov eax [edi+8] +
mov ecx [edx+4] +
inc eax  +
mov [edi+8] eax +
mov [esi] edx +
mov [esi+4] ecx +
mov [ecx] esi +
mov [edx+4] esi +
mov eax [edi+18h] +
mov [ebp+0Ch] ecx +
and eax ebx +
mov ecx [edi+0Ch] +
mov ebx [ecx+eax*8] +
cmp ebx [edi+4] +
jnz loc_42FF32  +
mov [ecx+eax*8] esi +
jmp loc_42FF44  +
cmp ebx edx +
jnz loc_42FF3B  +
mov [ecx+eax*8] esi +
jmp loc_42FF48  +
mov edx [ebp+0Ch] +
cmp [ecx+eax*8+4] edx +
jnz loc_42FF48  +
mov [ecx+eax*8+4] esi +
mov eax [ebp+8] +
mov [eax] esi +
mov byte ptr [eax+4] 1 +
call sub_431C83  +
retn 8  +
***
push esi  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] offset off_45AA74 +
pop ebp  +
retn 4  +
***
push ecx  +
push esi  +
mov eax [esi] +
push ebx  +
and esp 0FFFFFFF8h +
push 0FFFFFFFFh  +
sub esp 14h +
mov eax [esi+4] +
call sub_431CA3  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [esi] eax +
xor ebx ebx +
mov [ebp-4] ebx +
push 14h  +
mov [esi+4] ebx +
call ds:malloc  +
mov edx eax +
pop ecx  +
test edx edx +
jnz loc_4302DA  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov eax [ebp+10h] +
mov [esi+4] edx +
mov ecx [eax] +
mov [eax] ebx +
mov [edx+10h] ecx +
mov eax [esi+4] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
mov [eax+8] ecx +
mov eax [esi+4] +
mov [eax+0Ch] bl +
mov eax [esi+4] +
mov [eax+0Dh] bl +
mov eax esi +
call sub_431C83  +
retn 0Ch  +
***
mov eax offset SHGetSpecialFolderPathW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_43199C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset SHGetKnownFolderPath +
jmp loc_430318  +
***
mov eax offset ShellExecuteExW +
jmp loc_430318  +
***
mov eax offset GetDesktopWindow +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset USER32_dll_import_table  +
call sub_43199C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset DdeConnectList +
jmp loc_43033E  +
***
mov eax offset DdeQueryNextServer +
jmp loc_43033E  +
***
mov eax offset DdeQueryConvInfo +
jmp loc_43033E  +
***
mov eax offset GetParent +
jmp loc_43033E  +
***
mov eax offset IsIconic +
jmp loc_43033E  +
***
mov eax offset ShowWindow +
jmp loc_43033E  +
***
mov eax offset SetForegroundWindow +
jmp loc_43033E  +
***
mov eax offset DdeFreeDataHandle +
jmp loc_43033E  +
***
mov eax offset DdeFreeStringHandle +
jmp loc_43033E  +
***
mov eax offset DdeDisconnectList +
jmp loc_43033E  +
***
mov eax offset DdeUninitialize +
jmp loc_43033E  +
***
mov eax offset DdeAccessData +
jmp loc_43033E  +
***
mov eax offset DdeUnaccessData +
jmp loc_43033E  +
***
mov eax offset DdeDisconnect +
jmp loc_43033E  +
***
mov eax offset SendNotifyMessageW +
jmp loc_43033E  +
***
mov eax offset DdeClientTransaction +
jmp loc_43033E  +
***
mov eax offset DdeCreateStringHandleW +
jmp loc_43033E  +
***
mov eax offset DdeInitializeW +
jmp loc_43033E  +
***
call j__set_app_type  +
call sub_431262  +
call sub_401CC9  +
push eax  +
call j__set_new_mode  +
pop ecx  +
retn   +
***
mov ecx [ebp-14h] +
mov esp [ebp-18h] +
call sub_43121F  +
test al al +
jz loc_43061C  +
cmp byte ptr [ebp-19h] 0 +
jnz loc_4305F3  +
call j__c_exit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 7  +
call sub_4310D4  +
jmp $+2  +
push esi  +
call j_exit  +
***
push dword ptr [ebp-20h]  +
call j__exit  +
***
call sub_43101D  +
cmp ecx dword_460070 +
call sub_430663  +
push 0FA0h  +
push esi  +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
jnz loc_43076D  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_430789  +
push 64h  +
call sub_4307CA  +
pop ecx  +
jmp loc_430759  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_430763  +
mov eax large fs:2Ch +
mov ecx TlsIndex +
mov ecx [eax+ecx*4] +
mov eax dword_460064 +
mov [ecx+8] eax +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
push 0  +
sub esp 324h +
push 8  +
sub esp 31Ch +
test [ebp+arg_0] 1 +
push esi  +
call sub_431324  +
mov edi [ebp+10h] +
test al al +
call sub_431324  +
xor esi esi +
mov [ebp-4] esi +
mov edi [ebp+8] +
mov [ebp-24h] esi +
cmp esi [ebp+10h] +
jz loc_430B40  +
sub edi [ebp+0Ch] +
mov [ebp+8] edi +
mov ecx [ebp+14h] +
call ds:off_435354  +
mov ecx edi +
call dword ptr [ebp+14h]  +
inc esi  +
jmp loc_430AFA  +
mov eax [ebp-14h] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_430B59  +
mov dword ptr [ebp-28h] 0 +
mov eax [ebp-28h] +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax [ebp+arg_0] +
test eax eax +
cmp [ebp+arg_0] 0 +
cmp byte_460D15 0 +
call sub_431324  +
call sub_431548  +
cmp byte_460D14 0 +
cmp dword_460D18 0FFFFFFFFh +
push [ebp+arg_0]  +
pop eax  +
call sub_431324  +
test al al +
push 0FFFFFFFFh  +
push 0  +
push ecx  +
push ecx  +
cmp [ebp+arg_4] 3 +
jz loc_430F0A  +
cmp [ebp+arg_4] 0 +
jnz locret_430F6C  +
mov ecx TlsIndex +
mov eax large fs:2Ch +
push ebx  +
push esi  +
mov ebx [eax+ecx*4] +
mov [ebp+var_8] ebx +
mov esi [ebx+10h] +
test esi esi +
jz loc_430F6A  +
push edi  +
mov edi [esi] +
sub edi 1 +
js loc_430F52  +
lea ebx [edi+2] +
lea ebx [esi+ebx*4] +
mov eax [ebx] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_430F47  +
mov ecx eax +
call ds:off_435354  +
call [ebp+var_4]  +
sub ebx 4 +
sub edi 1 +
jns loc_430F33  +
mov ebx [ebp+var_8] +
mov edi [esi+4] +
test edi edi +
jz loc_430F60  +
push esi  +
call j_free  +
pop ecx  +
mov [ebx+10h] edi +
mov esi edi +
test edi edi +
jnz loc_430F26  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
sub esp 14h +
mov ecx dword_460070 +
retn   +
***
push 0  +
call sub_412CF9  +
xor eax eax +
sub esp 324h +
sub esp 44h +
push 44h  +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
call j_memset  +
add esp 0Ch +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_431215  +
movzx eax [ebp+StartupInfo.wShowWindow] +
leave   +
retn   +
push 0Ah  +
pop eax  +
leave   +
retn   +
***
test eax eax +
retn   +
***
push esi  +
and dword_460D38 0 +
mov esi offset unk_45B5B8 +
mov esi offset unk_45B5C0 +
mov eax [esp+8+arg_4] +
push [ebp+arg_0]  +
call sub_401923  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
and dword_460D44 0 +
sub esp 24h +
or dword_460074 1 +
push 0Ah  +
call ds:IsProcessorFeaturePresent  +
test eax eax +
jz loc_431544  +
and dword ptr [ebp-10h] 0 +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
lea edi [ebp-24h] +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
mov [edi] eax +
mov [edi+4] esi +
mov [edi+8] ecx +
xor ecx ecx +
mov [edi+0Ch] edx +
mov eax [ebp-24h] +
mov edi [ebp-1Ch] +
mov [ebp-0Ch] eax +
xor edi 6C65746Eh +
mov eax [ebp-18h] +
xor eax 49656E69h +
mov [ebp-8] eax +
mov eax [ebp-20h] +
xor eax 756E6547h +
mov [ebp-4] eax +
xor eax eax +
inc eax  +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov eax [ebp-4] +
mov [ebx+4] esi +
or eax edi +
or eax [ebp-8] +
mov [ebx+8] ecx +
mov [ebx+0Ch] edx +
jnz loc_431445  +
mov eax [ebp-24h] +
and eax 0FFF3FF0h +
cmp eax 106C0h +
jz loc_431434  +
cmp eax 20660h +
jz loc_431434  +
cmp eax 20670h +
jz loc_431434  +
cmp eax 30650h +
jz loc_431434  +
cmp eax 30660h +
jz loc_431434  +
cmp eax 30670h +
jnz loc_431445  +
mov edi dword_460D48 +
or edi 1 +
mov dword_460D48 edi +
jmp loc_43144B  +
mov edi dword_460D48 +
mov ecx [ebp-1Ch] +
push 7  +
pop eax  +
mov [ebp-4] ecx +
cmp [ebp-0Ch] eax +
jl loc_431488  +
xor ecx ecx +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov [ebx+4] esi +
mov [ebx+8] ecx +
mov ecx [ebp-4] +
mov [ebx+0Ch] edx +
mov ebx [ebp-20h] +
test ebx 200h +
jz loc_43148B  +
or edi 2 +
mov dword_460D48 edi +
jmp loc_43148B  +
mov ebx [ebp-10h] +
mov eax dword_460074 +
or eax 2 +
mov dword_460D44 1 +
mov dword_460074 eax +
test ecx 100000h +
jz loc_431541  +
or eax 4 +
mov dword_460D44 2 +
mov dword_460074 eax +
test ecx 8000000h +
jz loc_431541  +
test ecx 10000000h +
jz loc_431541  +
xor ecx ecx +
xor eax eax +
cmp dword_460078 eax +
setnz al  +
retn   +
***
call sub_412CF9  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
mov edi [ecx+4] +
mov eax [edi] +
mov esi [eax+8] +
mov ecx esi +
call ds:off_435354  +
mov ecx edi +
call esi  +
mov edi eax +
test edi edi +
jz loc_431639  +
mov ecx [edi] +
push 1  +
mov esi [ecx] +
mov ecx esi +
call ds:off_435354  +
mov ecx edi +
call esi  +
pop edi  +
pop esi  +
retn   +
***
test ds:dword_435578 1000h +
mov eax dword_460D54 +
call sub_431730  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
call sub_431730  +
mov edi edi +
push ecx  +
mov ecx [ebp-0Ch] +
mov ecx [ebp-10h] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
mov eax [esp+8+arg_4] +
push ebx  +
push ebp  +
mov eax [esp+arg_4] +
or eax eax +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_431FFE  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_431FF0  +
***
cmp dword_460D44 6 +
jl loc_432017  +
js loc_431FD6  +
retn   +
***
movd eax xmm0 +
shl eax 1 +
jb loc_43203A  +
cmp eax 9E000000h +
jnb loc_43202B  +
cvttss2si eax xmm0 +
retn   +
***
cmp eax 9F000000h +
jnb loc_432041  +
shl eax 7 +
bts eax 1Fh +
retn   +
***
cmp eax 7F000000h +
jb loc_432026  +
cvttss2si ecx ds:dword_45AAF0 +
cmc   +
sbb eax eax +
retn   +
***
cmp dword_460D44 6 +
jl loc_43205D  +
retn   +
***
cvttsd2si eax xmm0 +
retn   +
***
test eax 1FFFFFh +
jz loc_43209D  +
cvttss2si ecx ds:dword_45AAF4 +
shrd eax edx +
bts eax 1Fh +
retn   +
***
cvttsd2si eax xmm0 +
xor eax eax +
retn   +
***
push esi  +
mov edx [esp+arg_4] +
mov edx [esp+arg_4] +
lea ecx [ebp-10Ch] +
lea ecx [ebp-0D4h] +
lea ecx [ebp-94h] +
lea ecx [ebp-0D0h] +
jmp loc_40A54B  +
***
lea ecx [ebp-60h] +
jmp sub_41FF2F  +
***
lea ecx [ebp-92Ch] +
lea ecx [ebp-940h] +
lea ecx [ebp-924h] +
jmp loc_40A54B  +
***
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-224h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B73C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-43Ch] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
lea ecx [ebp-0D60h] +
lea ecx [ebp-0DBCh] +
lea ecx [ebp-0DB8h] +
lea ecx [ebp-0D68h] +
lea ecx [ebp-0D5Ch] +
lea ecx [ebp-0D70h] +
lea ecx [ebp-0D6Ch] +
lea ecx [ebp-0D94h] +
lea ecx [ebp-0D98h] +
lea ecx [ebp-0D9Ch] +
lea ecx [ebp-0DACh] +
lea ecx [ebp-0D78h] +
jmp loc_40A54B  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-24h] +
lea ecx [ebp-14h] +
lea ecx [ebp-10h] +
lea ecx [ebp-20h] +
lea ecx [ebp-1Ch] +
jmp loc_40A54B  +
***
lea ecx [ebp-310h] +
lea ecx [ebp-30Ch] +
lea ecx [ebp-308h] +
lea ecx [ebp-2ECh] +
lea ecx [ebp-304h] +
lea ecx [ebp-2E8h] +
lea ecx [ebp-300h] +
lea ecx [ebp-2FCh] +
lea ecx [ebp-2F8h] +
lea ecx [ebp-2F4h] +
jmp loc_40A54B  +
***
lea ecx [ebp-118h] +
lea ecx [ebp-114h] +
jmp loc_40A54B  +
***
lea ecx [ebp-10h] +
jmp loc_40A54B  +
***
mov eax offset unk_45B8F4 +
jmp loc_431554  +
***
lea ecx [ebp-828h] +
lea ecx [ebp-838h] +
lea ecx [ebp-834h] +
lea ecx [ebp-824h] +
lea ecx [ebp-81Ch] +
lea ecx [ebp-820h] +
jmp loc_40A54B  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-10h] +
jmp loc_40A54B  +
***
lea ecx [ebp-664h] +
lea ecx [ebp-634h] +
lea ecx [ebp-63Ch] +
lea ecx [ebp-660h] +
lea ecx [ebp-65Ch] +
lea ecx [ebp-658h] +
lea ecx [ebp-654h] +
lea ecx [ebp-650h] +
lea ecx [ebp-638h] +
lea ecx [ebp-64Ch] +
lea ecx [ebp-648h] +
lea ecx [ebp-644h] +
jmp loc_40A54B  +
***
lea ecx [ebp-0B48h] +
lea ecx [ebp-0B78h] +
lea ecx [ebp-0B74h] +
lea ecx [ebp-0B4Ch] +
lea ecx [ebp-0B70h] +
jmp loc_40A54B  +
***
lea ecx [ebp-2020h] +
lea ecx [ebp-201Ch] +
lea ecx [ebp-2018h] +
jmp loc_40A54B  +
***
lea ecx [ebp-814h] +
jmp loc_40A54B  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-84Ch] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BAB8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-124h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
lea ecx [ebp-10C4h] +
lea ecx [ebp-1088h] +
lea ecx [ebp-1070h] +
jmp sub_40A80D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10ECh] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BAE4 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-5Ch] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov ecx [ebp-10h] +
lea ecx [ebp-18h] +
jmp loc_40E7E9  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB3C +
jmp loc_431554  +
***
lea ecx [ebp-1Ch] +
jmp sub_40EED7  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BBBC +
jmp loc_431554  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-1Ch] +
jmp loc_40E7E9  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_40E7E9  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BC1C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
mov ecx [ebp-10h] +
jmp loc_40FC00  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_40FC11  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BC8C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-924h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BCC0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D4h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
lea ecx [ebp-18h] +
jmp sub_4127D5  +
***
lea ecx [ebp-44h] +
lea ecx [ebp-50h] +
jmp sub_4127D5  +
***
lea ecx [ebp-14h] +
jmp loc_4126C3  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BD54 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BD80 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov ecx [ebp-10h] +
add ecx 4 +
jmp loc_41324F  +
***
lea ecx [ebp-1Ch] +
lea ecx [ebp-14h] +
jmp loc_41324F  +
***
mov ecx [ebp-4Ch] +
add ecx 4 +
jmp sub_40A80D  +
***
mov ecx [ebp-4Ch] +
add ecx 4 +
jmp sub_418231  +
***
mov ecx [ebp-50h] +
add ecx 4 +
jmp sub_418231  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BE90 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB70 +
jmp loc_431554  +
***
lea ecx [ebp-18h] +
jmp sub_41204E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BEBC +
jmp loc_431554  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-58h] +
jmp sub_41522E  +
***
lea ecx [ebp-0A0h] +
lea ecx [ebp-54h] +
lea ecx [ebp-54h] +
lea ecx [ebp-28h] +
lea ecx [ebp-70h] +
lea ecx [ebp-28h] +
jmp sub_40A80D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A4h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BF1C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BF70 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BFC8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C020 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C04C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C0A4 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C0FC +
jmp loc_431554  +
***
mov ecx [ebp-10h] +
jmp loc_40E8D4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C1AC +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C1D8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C230 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C288 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C2E0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C338 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C390 +
jmp loc_431554  +
***
mov eax offset unk_45C3E8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C440 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C498 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C4F0 +
jmp loc_431554  +
***
mov ecx [ebp-1Ch] +
mov ecx [ebp-1Ch] +
add ecx 1Ch +
jmp sub_418231  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C5A0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C608 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C660 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C6B8 +
jmp loc_431554  +
***
mov eax offset unk_45C710 +
jmp loc_431554  +
***
mov ecx [ebp-1Ch] +
mov ecx [ebp-1Ch] +
add ecx 1Ch +
jmp sub_40A80D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C7C0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C828 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C880 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C8D8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C930 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C988 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45C9E0 +
jmp loc_431554  +
***
mov eax offset unk_45CA38 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CA90 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CAE8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CB40 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CB98 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CBF0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CC48 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CCA0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CCF8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CD50 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CDA8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CE00 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CE58 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CEB0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CF08 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45CF60 +
jmp loc_431554  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 1Ch +
jmp sub_40A80D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D010 +
jmp loc_431554  +
***
lea ecx [ebp-14h] +
jmp loc_41324F  +
***
lea ecx [ebp-34h] +
jmp loc_418E36  +
***
mov ecx [ebp-10h] +
add ecx 1Ch +
jmp sub_40A80D  +
***
lea ecx [ebp-34h] +
lea ecx [ebp-64h] +
lea ecx [ebp-18h] +
lea ecx [ebp-4Ch] +
jmp sub_40A80D  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
jmp sub_418231  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-40h] +
jmp sub_418231  +
***
lea ecx [ebp+8] +
jmp loc_418E36  +
***
lea ecx [ebp+8] +
jmp loc_418E36  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_433403  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_40A80D  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D1D4 +
jmp loc_431554  +
***
mov ecx [ebp-10h] +
jmp loc_40E7E9  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 8 +
jmp sub_40A80D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D22C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D260 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D2B8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D310 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D368 +
jmp loc_431554  +
***
mov eax offset unk_45D3C0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D418 +
jmp loc_431554  +
***
lea ecx [ebp-2Ch] +
jmp sub_40A80D  +
***
lea ecx [ebp-2Ch] +
jmp sub_40A80D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D528 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D588 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D5E0 +
jmp loc_431554  +
***
mov ecx [ebp-18h] +
jmp loc_40E8D4  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
add ecx 20h +
jmp ds:??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ  +
***
mov ecx [ebp-10h] +
jmp sub_41CEDE  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_43369F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_418231  +
retn   +
***
lea ecx [ebp-30h] +
jmp sub_41CD3F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D77C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
lea ecx [ebp-24h] +
lea ecx [ebp-1Ch] +
mov ecx [ebp-14h] +
jmp loc_41324F  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-1Ch] +
lea ecx [ebp-38h] +
lea ecx [ebp-24h] +
lea ecx [ebp-14h] +
jmp loc_41324F  +
***
lea ecx [ebp-14h] +
jmp loc_4126B4  +
***
mov ecx [ebp-2Ch] +
jmp loc_41324F  +
***
mov ecx [ebp-10h] +
jmp loc_41324F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D8F0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D91C +
jmp loc_431554  +
***
lea ecx [ebp-6E4h] +
jmp loc_41F357  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-6F0h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45D994 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-70h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C8h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
add ecx 8 +
jmp ds:??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ  +
***
lea ecx [ebp-18h] +
jmp loc_40E7E9  +
***
lea ecx [ebp-24h] +
jmp sub_41CD3F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DA20 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB70 +
jmp loc_431554  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 1Ch +
jmp sub_40D41E  +
***
lea ecx [ebp-18h] +
jmp sub_422255  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DAB4 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C8h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB70 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-178h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
lea ecx [ebp-30h] +
jmp sub_41CD3F  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DAE0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB70 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB70 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB70 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45BB70 +
jmp loc_431554  +
***
mov eax [ebp-20h] +
lea ecx [ebp-3Ch] +
lea ecx [ebp-3Ch] +
jmp loc_40E7E9  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DB40 +
jmp loc_431554  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
jmp loc_40E7E9  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DB7C +
jmp loc_431554  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_40FC11  +
***
mov eax offset unk_45DBB0 +
jmp loc_431554  +
***
lea ecx [ebp-30h] +
jmp sub_42B946  +
***
lea ecx [ebp-1Ch] +
lea ecx [ebp-1Ch] +
jmp loc_42C1AA  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DC44 +
jmp loc_431554  +
***
mov ecx [ebp-10h] +
jmp loc_40E8D4  +
***
lea ecx [ebp-0A0h] +
jmp loc_4253A4  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-8Ch] +
jmp sub_428B72  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DCD8 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DD0C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DD64 +
jmp loc_431554  +
***
lea ecx [ebp-90h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
lea ecx [ebp-58h] +
mov eax [ebp-10h] +
mov eax [ebp-10h] +
and eax 8 +
jz locret_433F0D  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-3Ch] +
jmp loc_41E01B  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DDA0 +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-15Ch] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E8h] +
xor ecx eax +
call sub_43062F  +
mov ecx [edx-8] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45B66C +
jmp loc_431554  +
***
lea ecx [ebp-38h] +
jmp sub_424585  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-20h] +
jmp loc_42C1AA  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_43062F  +
mov eax offset unk_45DE20 +
jmp loc_431554  +
***
push offset unk_46196C  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
retn   +
***
push 18h  +
pop ecx  +
retn   +
***
mov ecx offset dword_460280 +
jmp sub_411FB8  +
***
mov ecx dword_46199C +
mov ecx offset unk_460294 +
mov ecx dword_462CF0 +
mov ecx dword_462CF4 +
test ecx ecx +
jz locret_434113  +
and dword_462CF4 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
mov ecx offset unk_462CF8 +
jmp loc_41B714  +
***
mov ecx offset dword_4602B0 +
mov ecx offset dword_4602D0 +
jmp sub_40A80D  +
***
mov ecx dword_462CFC +
mov eax dword_462D00 +
mov eax dword_462D08 +
pop ecx  +
pop ecx  +
mov eax dword_462D70 +
mov eax dword_462D78 +
mov ecx offset unk_461304 +
mov ecx offset unk_4612E8 +
mov ecx offset unk_4612B0 +
jmp sub_418231  +
***
mov ecx offset unk_4612CC +
jmp sub_418231  +
***
mov ecx offset unk_461294 +
jmp sub_418231  +
***
mov ecx offset dword_4630E0 +
jmp sub_422900  +
***
mov ecx offset dword_4603AC +
call sub_41F26C  +
mov ecx dword_46039C +
test ecx ecx +
jnz sub_4132A7  +
retn   +
***
push offset unk_462D80  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
retn   +
***
mov ecx offset dword_462DB0 +
jmp loc_42DE79  +
***
push offset unk_462FF0  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
retn   +
***
mov ecx offset unk_46328C +
jmp sub_41F26C  +
***
push offset unk_46329C  +
call ds:_Mtx_destroy_in_situ  +
pop ecx  +
retn   +
***
mov ecx offset unk_463020 +
jmp sub_4257A8  +
***
mov ecx offset dword_463078 +
jmp sub_43007D  +
***
mov ecx offset unk_460D50 +
jmp loc_43163C  +
***
