mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101EA85  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101EB07  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_101EB7F  +
mov dword ptr [esi] offset off_100133C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_101EC4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100133C +
call sub_101EC4D  +
test byte ptr [ebp+8] 1 +
jz loc_100A31E  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101EBE0  +
mov dword ptr [esi] offset off_100133C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100A367  +
cmp [esi] ax +
jz loc_100A363  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_100A359  +
test edx edx +
jnz loc_100A36C  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_100A37D  +
test eax eax +
jl loc_100A37A  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+dwDisposition] +
push eax  +
xor esi esi +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 2  +
push esi  +
push esi  +
push esi  +
push [ebp+dwDisposition]  +
mov [ebp+hKey] esi +
push 80000000h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_100A3DE  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push 1  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
jmp loc_100A3E3  +
mov eax 80004005h +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+dwDisposition] +
push eax  +
xor esi esi +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 2  +
push esi  +
push esi  +
push esi  +
push [ebp+dwDisposition]  +
mov [ebp+hKey] esi +
push 80000000h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_100A446  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push 1  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
jmp loc_100A44B  +
mov eax 80004005h +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx offset aDxdiagclassobj +
push ebx  +
mov edi offset aDxdiag_dxdiagc +
push edi  +
mov esi ecx +
call sub_100A383  +
push offset aEeb1cae3D0b244  +
push offset aDxdiag_dxdia_0  +
mov ecx esi +
call sub_100A383  +
push ebx  +
push offset aDxdiag_dxdia_1  +
mov ecx esi +
call sub_100A383  +
push offset aEeb1cae3D0b244  +
push offset aDxdiag_dxdia_2  +
mov ecx esi +
call sub_100A383  +
push edi  +
push offset aDxdiag_dxdia_3  +
mov ecx esi +
call sub_100A383  +
push ebx  +
push offset aClsidEeb1cae3D  +
mov ecx esi +
call sub_100A383  +
push edi  +
push offset aClsidEeb1cae_0  +
mov ecx esi +
call sub_100A383  +
push offset aDxdiag_dxdia_1  +
push offset aClsidEeb1cae_1  +
mov ecx esi +
call sub_100A383  +
push offset aProgrammable  +
push offset aClsidEeb1cae_2  +
mov ecx esi +
call sub_100A383  +
push [ebp+lpData]  +
mov ebx offset aClsidEeb1cae_3 +
push ebx  +
mov ecx esi +
call sub_100A383  +
push offset aApartment  +
push offset aThreadingmodel  +
push ebx  +
mov ecx esi +
call sub_100A3ED  +
mov ebx offset aDxdiagprovider +
push ebx  +
push offset aDxdiag_dxdiagp  +
mov ecx esi +
call sub_100A383  +
push offset aA65b80713bfe42  +
push offset aDxdiag_dxdia_4  +
mov ecx esi +
call sub_100A383  +
push ebx  +
push offset aDxdiag_dxdia_5  +
mov ecx esi +
call sub_100A383  +
push offset aA65b80713bfe42  +
push offset aDxdiag_dxdia_6  +
mov ecx esi +
call sub_100A383  +
push edi  +
push offset aDxdiag_dxdia_7  +
mov ecx esi +
call sub_100A383  +
push ebx  +
push offset aClsidA65b80713  +
mov ecx esi +
call sub_100A383  +
push offset aDxdiag_dxdiagp  +
push offset aClsidA65b807_0  +
mov ecx esi +
call sub_100A383  +
push offset aDxdiag_dxdia_5  +
push offset aClsidA65b807_1  +
mov ecx esi +
call sub_100A383  +
push [ebp+lpData]  +
mov edi offset aClsidA65b807_2 +
push edi  +
mov ecx esi +
call sub_100A383  +
push offset aApartment  +
push offset aThreadingmodel  +
push edi  +
mov ecx esi +
call sub_100A3ED  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A5E0  +
lea eax [esi+3Ch] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+5Ch] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+0Ch] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A612  +
lea eax [esi+3Ch] +
push eax  +
call ds:InterlockedDecrement  +
add esi 5Ch +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A646  +
lea eax [esi+40h] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+74h] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+10h] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A678  +
lea eax [esi+40h] +
push eax  +
call ds:InterlockedDecrement  +
add esi 74h +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A6AF  +
lea eax [esi+44h] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+8Ch] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+14h] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A6E4  +
lea eax [esi+44h] +
push eax  +
call ds:InterlockedDecrement  +
add esi 8Ch +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A71B  +
lea eax [esi+48h] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+0A4h] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+18h] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A750  +
lea eax [esi+48h] +
push eax  +
call ds:InterlockedDecrement  +
add esi 0A4h +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A787  +
lea eax [esi+4Ch] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+0BCh] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+1Ch] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A7BC  +
lea eax [esi+4Ch] +
push eax  +
call ds:InterlockedDecrement  +
add esi 0BCh +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A7F3  +
lea eax [esi+50h] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+0D4h] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+20h] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A828  +
lea eax [esi+50h] +
push eax  +
call ds:InterlockedDecrement  +
add esi 0D4h +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A85F  +
lea eax [esi+54h] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+0ECh] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+24h] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A894  +
lea eax [esi+54h] +
push eax  +
call ds:InterlockedDecrement  +
add esi 0ECh +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A8CB  +
lea eax [esi+54h] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+0ECh] +
push eax  +
call ds:EnterCriticalSection  +
add esi 28h +
mov [edi] esi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A902  +
lea eax [esi+58h] +
push eax  +
call ds:InterlockedIncrement  +
lea eax [esi+104h] +
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+38h] +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_100A937  +
lea eax [esi+58h] +
push eax  +
call ds:InterlockedDecrement  +
add esi 104h +
push esi  +
call ds:LeaveCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ecx  +
call dword ptr [edx+0Ch]  +
dec eax  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
xor eax eax +
retn   +
***
push eax  +
push offset aIsd3dhwaccelen  +
push ecx  +
call dword ptr [edx+0Ch]  +
dec eax  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
xor eax eax +
retn   +
***
push ecx  +
call dword ptr [edx+0Ch]  +
dec eax  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+pvarg] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl locret_100AA08  +
cmp word ptr [ebp+pvarg.anonymous_0] 13h +
jz loc_100A9F4  +
mov eax 80070057h +
jmp locret_100AA08  +
mov eax [ebp+arg_8] +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov [eax] ecx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
sub esp 10h +
lea edx [ebp+pvarg] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl locret_100AA4F  +
cmp word ptr [ebp+pvarg.anonymous_0] 3 +
jz loc_100AA3B  +
mov eax 80070057h +
jmp locret_100AA4F  +
mov eax [ebp+arg_8] +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov [eax] ecx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
sub esp 10h +
lea edx [ebp+pvarg] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl locret_100AA9C  +
cmp word ptr [ebp+pvarg.anonymous_0] 0Bh +
jz loc_100AA82  +
mov eax 80070057h +
jmp locret_100AA9C  +
mov ecx [ebp+arg_8] +
xor eax eax +
cmp word ptr [ebp+pvarg.anonymous_0+8] ax +
setnz al  +
mov [ecx] eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
sub esp 10h +
lea edx [ebp+pvarg] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl locret_100AAEC  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jz loc_100AACF  +
mov eax 80070057h +
jmp locret_100AAEC  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
call sub_101ECD7  +
pop ecx  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
lea eax [ebp+pvarg] +
push eax  +
mov [ecx+4] edx +
call ds:VariantClear  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
call loc_101E6B1  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_100AB18  +
push [ebp+arg_0]  +
push 0  +
push esi  +
call sub_101EDB0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A5B7  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100AB73  +
push esi  +
lea esi [edi+8] +
jmp loc_100AB6D  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A5EB  +
cmp dword ptr [esi] 0 +
jg loc_100AB5D  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A683  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100ABCB  +
push esi  +
lea esi [edi+8] +
jmp loc_100ABC5  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A6BA  +
cmp dword ptr [esi] 0 +
jg loc_100ABB5  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A6EF  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100AC23  +
push esi  +
lea esi [edi+8] +
jmp loc_100AC1D  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A726  +
cmp dword ptr [esi] 0 +
jg loc_100AC0D  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A75B  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100AC7B  +
push esi  +
lea esi [edi+8] +
jmp loc_100AC75  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A792  +
cmp dword ptr [esi] 0 +
jg loc_100AC65  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A7C7  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100ACD3  +
push esi  +
lea esi [edi+8] +
jmp loc_100ACCD  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A7FE  +
cmp dword ptr [esi] 0 +
jg loc_100ACBD  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A61D  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100AD2B  +
push esi  +
lea esi [edi+8] +
jmp loc_100AD25  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A651  +
cmp dword ptr [esi] 0 +
jg loc_100AD15  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A833  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100AD83  +
push esi  +
lea esi [edi+8] +
jmp loc_100AD7D  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A86A  +
cmp dword ptr [esi] 0 +
jg loc_100AD6D  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A8D6  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
cmp dword ptr [edi+4] 0 +
jz loc_100ADDB  +
push esi  +
lea esi [edi+8] +
jmp loc_100ADD5  +
push esi  +
call ds:InterlockedDecrement  +
mov ecx [edi+4] +
push edi  +
call sub_100A90D  +
cmp dword ptr [esi] 0 +
jg loc_100ADC5  +
pop esi  +
pop edi  +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100ADEC  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100AE04  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_100AE27  +
mov edx [eax] +
jmp loc_100AE29  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_100AE43  +
cmp esi 10h +
jb loc_100AE35  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_100AE43  +
mov al 1 +
jmp loc_100AE45  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
push edi  +
cmp eax ecx +
jb loc_100AE6B  +
xor eax eax +
jmp loc_100AF05  +
cmp ecx 186A0h +
jnb loc_100AF00  +
lea ebx [eax+eax+1] +
jmp loc_100AE7F  +
add ebx ebx +
cmp ebx ecx +
jb loc_100AE7D  +
mov eax [esi+4] +
xor ecx ecx +
test eax eax +
setz cl  +
lea edi [ebx+ebx] +
push edi  +
push eax  +
mov [ebp+arg_0] ecx +
call sub_101EE2F  +
pop ecx  +
pop ecx  +
xor ecx ecx +
mov [ebp+var_4] eax +
cmp eax ecx +
jnz loc_100AEAC  +
mov eax 8007000Eh +
jmp loc_100AF05  +
cmp [ebp+arg_4] ecx +
jz loc_100AEB6  +
cmp [ebp+arg_0] ecx +
jz loc_100AEC4  +
push edi  +
push ecx  +
push eax  +
call sub_101EDB0  +
mov eax [ebp+var_4] +
add esp 0Ch +
mov edx [esi+0Ch] +
test edx edx +
jz loc_100AEF2  +
cmp [ebp+arg_4] 0 +
jz loc_100AEF2  +
cmp [ebp+arg_0] 0 +
jz loc_100AEF2  +
mov ecx [esi+10h] +
lea ecx [ecx+ecx+2] +
cmp edi ecx +
jb loc_100AEE4  +
mov edi ecx +
push edi  +
push edx  +
push eax  +
call loc_101F0A0  +
mov eax [ebp+var_4] +
add esp 0Ch +
mov [esi+4] eax +
mov [esi+8] ebx +
mov [esi+0Ch] eax +
jmp loc_100AE64  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_4] +
inc edx  +
cmp eax edx +
jbe loc_100AF26  +
or eax 0FFFFFFFFh +
jmp loc_100AF42  +
mov ecx [ecx+0Ch] +
lea eax [ecx+eax*2-2] +
jmp loc_100AF3A  +
mov dx [eax] +
cmp dx [ebp+arg_0] +
jz loc_100AF3E  +
dec eax  +
dec eax  +
cmp eax ecx +
jnb loc_100AF2F  +
sub eax ecx +
sar eax 1 +
pop ebp  +
retn 8  +
***
jmp sub_101889F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100AF6F  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
add eax 4 +
cmp eax [ebp+arg_4] +
jnz loc_100AF65  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_100AF9A  +
xor ecx ecx +
mov eax ecx +
shl eax 2 +
push eax  +
call loc_101E637  +
pop ecx  +
leave   +
retn   +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4 +
jnb loc_100AF8C  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100A2CB  +
push offset dword_1033738  +
lea eax [ebp-0Ch] +
push eax  +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_100AFDE  +
xor ecx ecx +
push ecx  +
call loc_101E637  +
pop ecx  +
leave   +
retn   +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1 +
jnb loc_100AFD5  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100A2CB  +
push offset dword_1033738  +
lea eax [ebp-0Ch] +
push eax  +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 1  +
lea eax [edi+1] +
push eax  +
mov esi ecx +
call sub_100AE4F  +
test eax eax +
jge loc_100B02A  +
mov eax 80004005h +
jmp loc_100B053  +
cmp [ebp+arg_4] 0 +
jz loc_100B045  +
mov eax [esi+10h] +
jmp loc_100B041  +
mov ecx [esi+0Ch] +
mov dx [ebp+arg_8] +
mov [ecx+eax*2] dx +
inc eax  +
cmp eax edi +
jb loc_100B035  +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [eax+edi*2] cx +
mov [esi+10h] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 0  +
lea eax [edi+1] +
push eax  +
mov esi ecx +
call sub_100AE4F  +
test eax eax +
jge loc_100B080  +
mov eax 8007000Eh +
jmp loc_100B0A2  +
push ebx  +
lea ebx [edi+edi] +
push ebx  +
push [ebp+arg_0]  +
push dword ptr [esi+0Ch]  +
call loc_101F0A0  +
mov eax [esi+0Ch] +
xor ecx ecx +
add esp 0Ch +
mov [esi+10h] edi +
mov [ebx+eax] cx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
mov eax [esi+10h] +
push 1  +
lea eax [edi+eax+1] +
push eax  +
call sub_100AE4F  +
test eax eax +
jge loc_100B0D3  +
mov eax 8007000Eh +
jmp loc_100B0FD  +
mov ecx [esi+0Ch] +
lea eax [edi+edi] +
push eax  +
mov eax [esi+10h] +
push [ebp+arg_0]  +
lea eax [ecx+eax*2] +
push eax  +
call loc_101F0A0  +
add [esi+10h] edi +
mov eax [esi+10h] +
mov ecx [esi+0Ch] +
xor edx edx +
add esp 0Ch +
mov [ecx+eax*2] dx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A285  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A2A8  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
sub esi ecx +
test eax eax +
jle loc_100B173  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call sub_101EB07  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
and dword ptr [esi+4] 0 +
mov [esi+8] eax +
add eax eax +
push eax  +
push 0  +
push ecx  +
mov [esi+0Ch] ecx +
call sub_101EDB0  +
add esp 0Ch +
and dword ptr [esi+10h] 0 +
mov byte ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
push esi  +
lea esi [ecx+edx] +
test eax eax +
jbe loc_100B1E1  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call sub_101EB07  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_100B20C  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
dec [ebp+arg_4]  +
mov [eax] ecx +
add eax 4 +
cmp [ebp+arg_4] 0 +
ja loc_100B1F9  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_100A32A  +
push offset dword_1033738  +
lea eax [ebp-0Ch] +
push eax  +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_100B25A  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_100B25A  +
call sub_100A34C  +
jmp loc_100B25F  +
mov eax 80070057h +
test eax eax +
jge loc_100B26A  +
test edi edi +
jz loc_100B26A  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
call sub_101F9C7  +
mov ebx ecx +
xor esi esi +
cmp [ebx] esi +
jnz loc_100B292  +
mov eax 80004003h +
jmp loc_100B385  +
mov [ebp-5Ch] esi +
mov [ebp-58h] esi +
push ebx  +
lea ecx [ebp-60h] +
mov [ebp-4] esi +
call sub_100AB22  +
mov [ebp-50h] esi +
mov [ebp-4Ch] esi +
push ebx  +
lea ecx [ebp-54h] +
call sub_100AB7A  +
mov [ebp-44h] esi +
mov [ebp-40h] esi +
push ebx  +
lea ecx [ebp-48h] +
call sub_100ABD2  +
mov [ebp-38h] esi +
mov [ebp-34h] esi +
push ebx  +
lea ecx [ebp-3Ch] +
call sub_100AC2A  +
mov [ebp-2Ch] esi +
mov [ebp-28h] esi +
push ebx  +
lea ecx [ebp-30h] +
call sub_100AC82  +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
push ebx  +
lea ecx [ebp-24h] +
call sub_100ACDA  +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
push ebx  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 6 +
call sub_100AD32  +
xor eax eax +
lea edi [ebp-70h] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp-80h] +
push eax  +
call ds:VariantInit  +
mov ebx [ebx] +
push 0Bh  +
pop eax  +
mov [ebp-80h] ax +
xor eax eax +
inc eax  +
mov [ebp-78h] ax +
mov eax [ebp+8] +
mov [ebp-68h] eax +
lea ecx [ebp-70h] +
lea eax [ebp-80h] +
push ecx  +
mov dword ptr [ebp-70h] 10h +
mov dword ptr [ebp-6Ch] 6Fh +
mov [ebp-64h] eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+0Ch]  +
lea ecx [ebp-18h] +
mov esi eax +
call sub_100AD5C  +
lea ecx [ebp-24h] +
call sub_100AD04  +
lea ecx [ebp-30h] +
call sub_100ACAC  +
lea ecx [ebp-3Ch] +
call sub_100AC54  +
lea ecx [ebp-48h] +
call sub_100ABFC  +
lea ecx [ebp-54h] +
call sub_100ABA4  +
lea ecx [ebp-60h] +
call sub_100AB4C  +
mov eax esi +
call sub_101FA75  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+1254h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+11BCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1124h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+108Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0FF4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0F5Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0EC4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0E2Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0D94h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0CFCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0C64h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0BCCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0B34h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0A9Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0A04h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+96Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+8D4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+83Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+7A4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+70Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+674h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+5DCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+544h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+4ACh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+414h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+37Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2E4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+24Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1B4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+11Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+18h] +
pop edi  +
mov [ecx] esi +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+430h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+398h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+300h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+260h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1C8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+130h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+98h] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+1C8h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+130h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+98h] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+4C0h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+428h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+390h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2F8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+260h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1C8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+130h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+98h] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+2240h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+21A8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2110h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2078h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1FE0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1F48h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1EB0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1E18h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1D80h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1CE8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1C50h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1BB8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1B20h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1A88h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+19F0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1958h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+18C0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1824h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1770h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+16D8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+163Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+15A4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+150Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1474h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+13D8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1340h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1290h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+11F8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1160h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+10C8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1030h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0F98h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0F00h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0E64h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0DCCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0D34h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0C98h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0C00h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0B68h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0AD0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0A38h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+9A0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+908h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+870h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+7D8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+740h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+688h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+5F0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+558h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+4C0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+428h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+390h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2F8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+260h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1C8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+130h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+98h] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+0D10h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0C78h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0BE0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0B48h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0AB0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+984h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+8ECh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+854h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+7BCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+724h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+68Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+5F4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+55Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+4C4h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+42Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+394h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2FCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+264h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1CCh] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+134h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+9Ch] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+4] +
pop edi  +
mov [ecx] esi +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+558h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+4C0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+428h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+390h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2F8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+260h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1C8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+130h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+98h] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+1DCh] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+144h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0ACh] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+390h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+2F8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+260h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1C8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+130h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+98h] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_100BBED  +
mov ecx [ecx+4] +
jmp loc_100BBF0  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_100AF7B  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_100AFC4  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
push esi  +
mov esi ecx +
jnz loc_100BC4E  +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [eax] cx +
and [esi+10h] ecx +
xor eax eax +
jmp loc_100BC62  +
push [ebp+lpString]  +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_100B05E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
push esi  +
mov esi ecx +
jnz loc_100BC7E  +
xor eax eax +
jmp loc_100BC92  +
push [ebp+lpString]  +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_100B0AD  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+10h] +
jbe loc_100BCB0  +
mov eax 80070057h +
jmp loc_100BCBA  +
push 20h  +
push 0  +
push eax  +
call sub_100B008  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B108  +
add esp 14h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B128  +
add esp 14h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B148  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_1004B90 +
call sub_100B17D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_100BD74  +
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
add [ebp+arg_C] 4 +
add eax 4 +
cmp eax [ebp+arg_8] +
jnz loc_100BD66  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B1B5  +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B1EB  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor eax eax +
lea edi [ebp+lpString] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+lpString] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+lpString] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
pop edi  +
test eax eax +
jl locret_100BE36  +
cmp word ptr [ebp+lpString] 8 +
jz loc_100BE1F  +
mov eax 80070057h +
jmp locret_100BE36  +
push dword ptr [ebp-8]  +
mov ecx [ebp+arg_8] +
call sub_100BC31  +
lea eax [ebp+lpString] +
push eax  +
call ds:VariantClear  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B392  +
test [ebp+arg_0] 1 +
jz loc_100BE59  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B534  +
test [ebp+arg_0] 1 +
jz loc_100BE7F  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B5AA  +
test [ebp+arg_0] 1 +
jz loc_100BEA5  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B5EC  +
test [ebp+arg_0] 1 +
jz loc_100BECB  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B66F  +
test [ebp+arg_0] 1 +
jz loc_100BEF1  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B96F  +
test [ebp+arg_0] 1 +
jz loc_100BF17  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BA9C  +
test [ebp+arg_0] 1 +
jz loc_100BF3D  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BB2C  +
test [ebp+arg_0] 1 +
jz loc_100BF63  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BB6E  +
test [ebp+arg_0] 1 +
jz loc_100BF89  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_100BFCC  +
cmp dword ptr [esi+18h] 10h +
jb loc_100BFCC  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_100BFC4  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_100BCC3  +
add esp 10h +
push edi  +
call sub_101E6A1  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_100BBD7  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_100BFFD  +
call loc_101E7B6  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_100C00A  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_100C050  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_100C020  +
mov ebx [edx] +
jmp loc_100C022  +
mov ebx edx +
cmp ecx 10h +
jb loc_100C029  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_100BCE7  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
add esp 10h +
push eax  +
mov ecx esi +
call sub_100BBD7  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_101F9FF  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 0Fh +
cmp esi 0FFFFFFFEh +
jbe loc_100C07E  +
mov esi [ebp+8] +
jmp loc_100C0A3  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jnb loc_100C0A3  +
push 0FFFFFFFEh  +
pop eax  +
sub eax edx +
cmp ecx eax +
ja loc_100C0A3  +
lea esi [edx+ecx] +
and dword ptr [ebp-4] 0 +
lea eax [esi+1] +
push eax  +
mov ecx edi +
call sub_100BC17  +
mov ebx eax +
jmp loc_100C0DF  +
mov eax [ebp+8] +
mov ecx [ebp-18h] +
mov [ebp+8] eax +
inc eax  +
mov [ebp-10h] esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100BC17  +
mov [ebp-14h] eax +
mov eax offset loc_100C0D6 +
retn   +
mov edi [ebp-18h] +
mov esi [ebp+8] +
mov ebx [ebp-14h] +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_100C104  +
cmp dword ptr [edi+18h] 10h +
jb loc_100C0F0  +
mov eax [edi+4] +
jmp loc_100C0F3  +
lea eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_100BCC3  +
add esp 10h +
push 0  +
push 1  +
mov ecx edi +
call sub_100BF95  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_100BBD7  +
call sub_101FA75  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 40h  +
lea eax [esi+18h] +
push eax  +
call sub_100BD37  +
mov dword ptr [esi] offset off_1004B94 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BD5C  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BD88  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
push edi  +
xor edx edx +
mov [ecx+eax*2-2] dx +
mov edi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] edi +
call sub_100B238  +
test eax eax +
jl loc_100C1E3  +
mov edi [ebp+var_4] +
mov [esi+10h] edi +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_100C141  +
lea ecx [esi+11Ch] +
call sub_100C141  +
lea ecx [esi+1B4h] +
call sub_100C141  +
lea ecx [esi+24Ch] +
call sub_100C141  +
lea ecx [esi+2E4h] +
call sub_100C141  +
lea ecx [esi+37Ch] +
call sub_100C141  +
lea ecx [esi+414h] +
call sub_100C141  +
lea ecx [esi+4ACh] +
call sub_100C141  +
lea ecx [esi+544h] +
call sub_100C141  +
lea ecx [esi+5DCh] +
call sub_100C141  +
lea ecx [esi+674h] +
call sub_100C141  +
lea ecx [esi+70Ch] +
call sub_100C141  +
lea ecx [esi+7A4h] +
call sub_100C141  +
lea ecx [esi+83Ch] +
call sub_100C141  +
lea ecx [esi+8D4h] +
call sub_100C141  +
lea ecx [esi+96Ch] +
call sub_100C141  +
lea ecx [esi+0A04h] +
call sub_100C141  +
lea ecx [esi+0A9Ch] +
call sub_100C141  +
lea ecx [esi+0B34h] +
call sub_100C141  +
lea ecx [esi+0BCCh] +
call sub_100C141  +
lea ecx [esi+0C64h] +
call sub_100C141  +
lea ecx [esi+0CFCh] +
call sub_100C141  +
lea ecx [esi+0D94h] +
call sub_100C141  +
lea ecx [esi+0E2Ch] +
call sub_100C141  +
lea ecx [esi+0EC4h] +
call sub_100C141  +
lea ecx [esi+0F5Ch] +
call sub_100C141  +
lea ecx [esi+0FF4h] +
call sub_100C141  +
lea ecx [esi+108Ch] +
call sub_100C141  +
lea ecx [esi+1124h] +
call sub_100C141  +
lea ecx [esi+11BCh] +
call sub_100C141  +
lea ecx [esi+1254h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C141  +
lea ecx [esi+98h] +
call sub_100C141  +
lea ecx [esi+130h] +
call sub_100C141  +
lea ecx [esi+1C8h] +
call sub_100C141  +
lea ecx [esi+260h] +
call sub_100C141  +
lea ecx [esi+300h] +
call sub_100C141  +
lea ecx [esi+398h] +
call sub_100C141  +
lea ecx [esi+430h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+98h] +
push eax  +
push offset aSzpath  +
push ebx  +
mov edi ecx +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
push esi  +
push offset aSzname  +
push ebx  +
mov ecx edi +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+130h] +
push eax  +
push offset aSzversion  +
push ebx  +
mov ecx edi +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+1C8h] +
push eax  +
push offset aSzlanguageengl  +
push ebx  +
mov ecx edi +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+260h] +
push eax  +
push offset aSzlanguageloca  +
push ebx  +
mov ecx edi +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+2F8h] +
push eax  +
push offset aDwfiletimelow  +
push ebx  +
mov ecx edi +
call sub_100A9C0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+2FCh] +
push eax  +
push offset aDwfiletimehigh  +
push ebx  +
mov ecx edi +
call sub_100A9C0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+300h] +
push eax  +
push offset aSzdatestampeng  +
push ebx  +
mov ecx edi +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+398h] +
push eax  +
push offset aSzdatestamploc  +
push ebx  +
mov ecx edi +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+430h] +
push eax  +
push offset aSzattributes  +
push ebx  +
mov ecx edi +
call sub_100BDE0  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+4C8h] +
push eax  +
push offset aLnumbytes  +
push ebx  +
mov ecx edi +
call sub_100AA11  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+4CCh] +
push eax  +
push offset aBexists  +
push ebx  +
mov ecx edi +
call sub_100AA58  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+4D0h] +
push eax  +
push offset aBbeta  +
push ebx  +
mov ecx edi +
call sub_100AA58  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+4D4h] +
push eax  +
push offset aBdebug  +
push ebx  +
mov ecx edi +
call sub_100AA58  +
test eax eax +
jl loc_100C55D  +
lea eax [esi+4D8h] +
push eax  +
push offset aBobsolete  +
push ebx  +
mov ecx edi +
call sub_100AA58  +
test eax eax +
jl loc_100C55D  +
add esi 4DCh +
push esi  +
push offset aBproblem  +
push ebx  +
mov ecx edi +
call sub_100AA58  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C141  +
lea ecx [esi+98h] +
call sub_100C141  +
lea ecx [esi+130h] +
call sub_100C141  +
lea ecx [esi+1C8h] +
call sub_100C141  +
lea ecx [esi+260h] +
call sub_100C141  +
lea ecx [esi+2F8h] +
call sub_100C141  +
lea ecx [esi+390h] +
call sub_100C141  +
lea ecx [esi+428h] +
call sub_100C141  +
lea ecx [esi+4C0h] +
call sub_100C141  +
lea ecx [esi+558h] +
call sub_100C141  +
lea ecx [esi+5F0h] +
call sub_100C141  +
lea ecx [esi+688h] +
call sub_100C141  +
lea ecx [esi+740h] +
call sub_100C141  +
lea ecx [esi+7D8h] +
call sub_100C141  +
lea ecx [esi+870h] +
call sub_100C141  +
lea ecx [esi+908h] +
call sub_100C141  +
lea ecx [esi+9A0h] +
call sub_100C141  +
lea ecx [esi+0A38h] +
call sub_100C141  +
lea ecx [esi+0AD0h] +
call sub_100C141  +
lea ecx [esi+0B68h] +
call sub_100C141  +
lea ecx [esi+0C00h] +
call sub_100C141  +
lea ecx [esi+0C98h] +
call sub_100C141  +
lea ecx [esi+0D34h] +
call sub_100C141  +
lea ecx [esi+0DCCh] +
call sub_100C141  +
lea ecx [esi+0E64h] +
call sub_100C141  +
lea ecx [esi+0F00h] +
call sub_100C141  +
lea ecx [esi+0F98h] +
call sub_100C141  +
lea ecx [esi+1030h] +
call sub_100C141  +
lea ecx [esi+10C8h] +
call sub_100C141  +
lea ecx [esi+1160h] +
call sub_100C141  +
lea ecx [esi+11F8h] +
call sub_100C141  +
lea ecx [esi+1290h] +
call sub_100C141  +
lea ecx [esi+1340h] +
call sub_100C141  +
lea ecx [esi+13D8h] +
call sub_100C141  +
lea ecx [esi+1474h] +
call sub_100C141  +
lea ecx [esi+150Ch] +
call sub_100C141  +
lea ecx [esi+15A4h] +
call sub_100C141  +
lea ecx [esi+163Ch] +
call sub_100C141  +
lea ecx [esi+16D8h] +
call sub_100C141  +
lea ecx [esi+1770h] +
call sub_100C141  +
lea ecx [esi+1824h] +
call sub_100C141  +
lea ecx [esi+18C0h] +
call sub_100C141  +
lea ecx [esi+1958h] +
call sub_100C141  +
lea ecx [esi+19F0h] +
call sub_100C141  +
lea ecx [esi+1A88h] +
call sub_100C141  +
lea ecx [esi+1B20h] +
call sub_100C141  +
lea ecx [esi+1BB8h] +
call sub_100C141  +
lea ecx [esi+1C50h] +
call sub_100C141  +
lea ecx [esi+1CE8h] +
call sub_100C141  +
lea ecx [esi+1D80h] +
call sub_100C141  +
lea ecx [esi+1E18h] +
call sub_100C141  +
lea ecx [esi+1EB0h] +
call sub_100C141  +
lea ecx [esi+1F48h] +
call sub_100C141  +
lea ecx [esi+1FE0h] +
call sub_100C141  +
lea ecx [esi+2078h] +
call sub_100C141  +
lea ecx [esi+2110h] +
call sub_100C141  +
lea ecx [esi+21A8h] +
call sub_100C141  +
lea ecx [esi+2240h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C141  +
lea ecx [esi+98h] +
call sub_100C141  +
lea ecx [esi+130h] +
call sub_100C141  +
lea ecx [esi+1C8h] +
call sub_100C141  +
lea ecx [esi+260h] +
call sub_100C141  +
lea ecx [esi+2F8h] +
call sub_100C141  +
lea ecx [esi+390h] +
call sub_100C141  +
lea ecx [esi+428h] +
call sub_100C141  +
lea ecx [esi+4C0h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C141  +
lea ecx [esi+98h] +
call sub_100C141  +
lea ecx [esi+130h] +
call sub_100C141  +
lea ecx [esi+1C8h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_100C141  +
lea ecx [esi+9Ch] +
call sub_100C141  +
lea ecx [esi+134h] +
call sub_100C141  +
lea ecx [esi+1CCh] +
call sub_100C141  +
lea ecx [esi+264h] +
call sub_100C141  +
lea ecx [esi+2FCh] +
call sub_100C141  +
lea ecx [esi+394h] +
call sub_100C141  +
lea ecx [esi+42Ch] +
call sub_100C141  +
lea ecx [esi+4C4h] +
call sub_100C141  +
lea ecx [esi+55Ch] +
call sub_100C141  +
lea ecx [esi+5F4h] +
call sub_100C141  +
lea ecx [esi+68Ch] +
call sub_100C141  +
lea ecx [esi+724h] +
call sub_100C141  +
lea ecx [esi+7BCh] +
call sub_100C141  +
lea ecx [esi+854h] +
call sub_100C141  +
lea ecx [esi+8ECh] +
call sub_100C141  +
lea ecx [esi+984h] +
call sub_100C141  +
lea ecx [esi+0AB0h] +
call sub_100C141  +
lea ecx [esi+0B48h] +
call sub_100C141  +
lea ecx [esi+0BE0h] +
call sub_100C141  +
lea ecx [esi+0C78h] +
call sub_100C141  +
lea ecx [esi+0D10h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C141  +
lea ecx [esi+98h] +
call sub_100C141  +
lea ecx [esi+130h] +
call sub_100C141  +
lea ecx [esi+1C8h] +
call sub_100C141  +
lea ecx [esi+260h] +
call sub_100C141  +
lea ecx [esi+2F8h] +
call sub_100C141  +
lea ecx [esi+390h] +
call sub_100C141  +
lea ecx [esi+428h] +
call sub_100C141  +
lea ecx [esi+4C0h] +
call sub_100C141  +
lea ecx [esi+558h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C141  +
lea ecx [esi+0ACh] +
call sub_100C141  +
lea ecx [esi+144h] +
call sub_100C141  +
lea ecx [esi+1DCh] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C141  +
lea ecx [esi+98h] +
call sub_100C141  +
lea ecx [esi+130h] +
call sub_100C141  +
lea ecx [esi+1C8h] +
call sub_100C141  +
lea ecx [esi+260h] +
call sub_100C141  +
lea ecx [esi+2F8h] +
call sub_100C141  +
lea ecx [esi+390h] +
call sub_100C141  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
push esi  +
lea ecx [ebp+var_C] +
call sub_100AB22  +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_100CAB8  +
push 1  +
call sub_100BE3F  +
and dword ptr [esi+0Ch] 0 +
lea ecx [ebp+var_C] +
call sub_100AB4C  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
push esi  +
lea ecx [ebp+var_C] +
call sub_100AD8A  +
mov ecx [esi+38h] +
test ecx ecx +
jz loc_100CAF6  +
push 1  +
call sub_100BE8B  +
and dword ptr [esi+38h] 0 +
lea ecx [ebp+var_C] +
call sub_100ADB4  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
push esi  +
mov esi ecx +
push edi  +
push esi  +
lea ecx [ebp+var_10] +
mov [ebp+var_4] esi +
call sub_100AB7A  +
mov edi [esi+14h] +
test edi edi +
jz loc_100CB79  +
mov esi [edi+18BCh] +
jmp loc_100CB44  +
mov ecx esi +
mov esi [esi+270h] +
push 1  +
call sub_100BE8B  +
test esi esi +
jnz loc_100CB35  +
mov esi [edi+73Ch] +
jmp loc_100CB5D  +
mov ecx esi +
mov esi [esi+558h] +
call sub_100BEB1  +
push 1  +
test esi esi +
jnz loc_100CB50  +
mov esi [edi+22E0h] +
mov ecx edi +
call sub_100BED7  +
mov edi esi +
test esi esi +
jnz loc_100CB2D  +
mov esi [ebp+var_4] +
and dword ptr [esi+14h] 0 +
lea ecx [ebp+var_10] +
call sub_100ABA4  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
push edi  +
push esi  +
lea ecx [ebp+var_C] +
call sub_100ABD2  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_100CBC5  +
mov edi [ecx+0DB0h] +
push 1  +
call sub_100BEFD  +
mov ecx edi +
test edi edi +
jnz loc_100CBB2  +
mov ecx [esi+1Ch] +
and dword ptr [esi+18h] 0 +
test ecx ecx +
jz loc_100CBE3  +
mov edi [ecx+610h] +
push 1  +
call sub_100BF23  +
mov ecx edi +
test edi edi +
jnz loc_100CBD0  +
and dword ptr [esi+1Ch] 0 +
lea ecx [ebp+var_C] +
call sub_100ABFC  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
push esi  +
lea ecx [ebp+var_C] +
call sub_100AD32  +
mov eax [esi+24h] +
test eax eax +
jz loc_100CC48  +
mov ecx [eax] +
test ecx ecx +
jz loc_100CC36  +
push edi  +
mov edi [ecx+438h] +
push 1  +
call sub_100BF6F  +
mov ecx edi +
test edi edi +
jnz loc_100CC22  +
pop edi  +
mov eax [esi+24h] +
test eax eax +
jz loc_100CC48  +
push eax  +
call sub_101E6A1  +
and dword ptr [esi+24h] 0 +
pop ecx  +
lea ecx [ebp+var_C] +
call sub_100AD5C  +
pop esi  +
leave   +
retn   +
***
push 0  +
push 1  +
call sub_100BF95  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100CC7A  +
push eax  +
call sub_101E6A1  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_100CCB9  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_100C160  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_100CCDE  +
call loc_101E779  +
cmp [esi+18h] edi +
jnb loc_100CCF0  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_100C05D  +
jmp loc_100CD1C  +
cmp [ebp+arg_4] 0 +
jz loc_100CD10  +
cmp edi 10h +
jnb loc_100CD10  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_100CD04  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_100BF95  +
jmp loc_100CD1C  +
test edi edi +
jnz loc_100CD1C  +
push edi  +
mov ecx esi +
call sub_100BBD7  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 0  +
push 105h  +
mov esi ecx +
call sub_100AE4F  +
test eax eax +
jge loc_100CD52  +
mov ecx [esi+0Ch] +
xor edx edx +
mov [ecx] dx +
and dword ptr [esi+10h] 0 +
pop esi  +
retn   +
push dword ptr [esi+8]  +
push dword ptr [esi+0Ch]  +
call ds:GetSystemDirectoryW  +
test eax eax +
jnz loc_100CD71  +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [eax] cx +
mov eax 80004005h +
jmp loc_100CD4C  +
mov ecx esi +
call sub_100C1B2  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 105h  +
mov esi ecx +
call sub_100AE4F  +
test eax eax +
jge loc_100CDA4  +
mov ecx [esi+0Ch] +
xor edx edx +
mov [ecx] dx +
and dword ptr [esi+10h] 0 +
pop esi  +
retn   +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jge loc_100CDC3  +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [eax] cx +
mov eax 80004005h +
jmp loc_100CD9E  +
mov ecx esi +
call sub_100C1B2  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1001CFC +
call sub_100BF95  +
mov ecx esi +
pop esi  +
jmp sub_101EC4D  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_100CE01  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100CDD3  +
test byte ptr [ebp+8] 1 +
jz loc_100CE24  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_101FA3A  +
mov esi ecx +
xor ebx ebx +
lea eax [esi+4] +
mov [esi] ebx +
mov [eax] ebx +
mov [esi+8] ebx +
mov [ebp-0ACh] eax +
cmp dword_10360BC ebx +
jnz loc_100CE7A  +
push esi  +
push offset riid  +
push 1  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
cmp eax ebx +
jge loc_100D046  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
push 1  +
push 105h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
call sub_100AE4F  +
push dword ptr [ebp-0A0h]  +
mov edi ds:GetModuleFileNameW +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push ebx  +
call edi  +
lea ecx [ebp-0A8h] +
mov [ebp-94h] bl +
call sub_100C1B2  +
mov eax [ebp-98h] +
inc eax  +
push eax  +
push 5Ch  +
lea ecx [ebp-0A8h] +
call sub_100AF11  +
cmp eax 0FFFFFFFFh +
jle loc_100CEED  +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC9C  +
push offset aDxdiagn_dll  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push dword ptr [ebp-9Ch]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_100CFF1  +
push dword ptr [ebp-0A0h]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-9Ch]  +
push ebx  +
call edi  +
lea ecx [ebp-0A8h] +
mov [ebp-94h] bl +
call sub_100C1B2  +
mov eax [ebp-98h] +
inc eax  +
push eax  +
push 5Ch  +
lea ecx [ebp-0A8h] +
call sub_100AF11  +
cmp eax 0FFFFFFFFh +
jle loc_100CF5F  +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC9C  +
push offset a____DllDebuguD  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push dword ptr [ebp-9Ch]  +
mov edi ds:GetFileAttributesW +
call edi  +
cmp eax 0FFFFFFFFh +
jnz loc_100CFF1  +
lea ecx [ebp-0A8h] +
call sub_100CD81  +
push offset aDxdiagn_dll  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push dword ptr [ebp-9Ch]  +
call edi  +
cmp eax 0FFFFFFFFh +
jnz loc_100CFF1  +
lea ecx [ebp-0A8h] +
call sub_100CD2F  +
push offset aDxdiagn_dll  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push dword ptr [ebp-9Ch]  +
call edi  +
cmp eax 0FFFFFFFFh +
jnz loc_100CFF1  +
mov edi 800401F8h +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
jmp loc_100D0E5  +
push dword ptr [ebp-9Ch]  +
mov ecx esi +
call sub_100A455  +
push esi  +
push offset riid  +
push 1  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
cmp eax ebx +
jge loc_100D02D  +
push eax  +
push offset aDxdiag_dllFail  +
push 1  +
call nullsub_1  +
add esp 0Ch +
mov edi 80080001h +
jmp loc_100CFD7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
cmp [esi] ebx +
jnz loc_100D054  +
mov edi 800401F8h +
jmp loc_100D0E5  +
xor eax eax +
lea edi [ebp-0BCh] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp-0CCh] +
push eax  +
call ds:VariantInit  +
push 0Bh  +
pop eax  +
mov [ebp-0CCh] ax +
xor eax eax +
inc eax  +
mov [ebp-0C4h] ax +
mov eax [ebp+8] +
mov [ebp-0B4h] eax +
lea eax [ebp-0CCh] +
mov [ebp-0B0h] eax +
mov eax [esi] +
lea edx [ebp-0BCh] +
push edx  +
mov dword ptr [ebp-0BCh] 10h +
mov dword ptr [ebp-0B8h] 6Fh +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_100D0E5  +
mov eax [esi] +
mov edx [eax] +
lea ecx [esi+8] +
push ecx  +
push eax  +
call dword ptr [edx+10h]  +
mov edi eax +
cmp edi ebx +
jl loc_100D0E5  +
push dword ptr [ebp-0ACh]  +
mov esi [esi] +
mov eax [esi] +
push offset dword_100132C  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
mov eax edi +
call sub_101FA8E  +
retn 4  +
***
call sub_101F9C7  +
mov ebx ecx +
xor edi edi +
mov [ebp-10h] edi +
cmp [ebx] edi +
jz loc_100D8FC  +
cmp [ebx+4] edi +
jz loc_100D8FC  +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
push ebx  +
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call sub_100AB22  +
cmp [ebx+0Ch] edi +
jnz loc_100D162  +
push 12F0h  +
call sub_100AAF5  +
pop ecx  +
cmp eax edi +
jz loc_100D147  +
mov ecx eax +
call sub_100C1F1  +
jmp loc_100D149  +
xor eax eax +
mov [ebx+0Ch] eax +
cmp eax edi +
jnz loc_100D162  +
lea ecx [ebp-1Ch] +
call sub_100AB4C  +
mov eax 8007000Eh +
jmp loc_100D901  +
mov eax [ebx+8] +
mov ecx [eax] +
mov esi [ebx+0Ch] +
lea edx [ebp-10h] +
push edx  +
push offset aDxdiag_systemi  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_100D8DA  +
cmp [ebp-10h] edi +
jz loc_100D8DA  +
push esi  +
push offset aDwosmajorversi  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+4] +
push eax  +
push offset aDwosminorversi  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+8] +
push eax  +
push offset aDwosbuildnumbe  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0Ch] +
push eax  +
push offset aDwosplatformid  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+10h] +
push eax  +
push offset aDwdirectxversi  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+14h] +
push eax  +
push offset aDwdirectxver_0  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+18h] +
push eax  +
push offset aSzdirectxversi  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0B0h] +
push eax  +
push offset aBdebug  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0B4h] +
push eax  +
push offset aBnecpc98  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0B8h] +
push eax  +
push offset aUllphysicalmem  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AAA5  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0C0h] +
push eax  +
push offset aUllphysicalm_0  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AAA5  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0C8h] +
push eax  +
push offset aUllusedpagefil  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AAA5  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0D0h] +
push eax  +
push offset aUllavailpagefi  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AAA5  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0D8h] +
push eax  +
push offset aBnetmeetingrun  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0DCh] +
push eax  +
push offset aBisd3d8debugru  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0E0h] +
push eax  +
push offset aBisd3ddebugrun  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0E4h] +
push eax  +
push offset aBisdinput8debu  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0E8h] +
push eax  +
push offset aBisdinput8de_0  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0ECh] +
push eax  +
push offset aBisdmusicdebug  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0F0h] +
push eax  +
push offset aBisdmusicdeb_0  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0F4h] +
push eax  +
push offset aBisddrawdebugr  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0F8h] +
push eax  +
push offset aBisdplaydebugr  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0FCh] +
push eax  +
push offset aBisdsounddebug  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+100h] +
push eax  +
push offset aNd3ddebuglevel  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+104h] +
push eax  +
push offset aNddrawdebuglev  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+108h] +
push eax  +
push offset aNdidebuglevel  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+10Ch] +
push eax  +
push offset aNdmusicdebugle  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+110h] +
push eax  +
push offset aNdplaydebuglev  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+114h] +
push eax  +
push offset aNdsounddebugle  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+118h] +
push eax  +
push offset aNdshowdebuglev  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+11Ch] +
push eax  +
push offset aSzwindowsdir  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+1B4h] +
push eax  +
push offset aSzbuildlab  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+24Ch] +
push eax  +
push offset aSzdxdiagversio  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+2E4h] +
push eax  +
push offset aSzsetupparamen  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+37Ch] +
push eax  +
push offset aSzprocessoreng  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+414h] +
push eax  +
push offset aSzsystemmanufa  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+4ACh] +
push eax  +
push offset aSzsystemmodele  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+544h] +
push eax  +
push offset aSzbiosenglish  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+5DCh] +
push eax  +
push offset aSzphysicalmemo  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+674h] +
push eax  +
push offset aSzphysicalme_0  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+70Ch] +
push eax  +
push offset aSzcsdversion  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+96Ch] +
push eax  +
push offset aSzuserdpi  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+8D4h] +
push eax  +
push offset aSzsystemdpi  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0A04h] +
push eax  +
push offset aSzdwmscalingdp  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+7A4h] +
push eax  +
push offset aSzdirectxver_0  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+83Ch] +
push eax  +
push offset aSzdirectxver_1  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0A9Ch] +
push eax  +
push offset aSzmachinenamel  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0B34h] +
push eax  +
push offset aSzoslocalized  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0BCCh] +
push eax  +
push offset aSzosexlocalize  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0C64h] +
push eax  +
push offset aSzosexlongloca  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0CFCh] +
push eax  +
push offset aSzlanguagesloc  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0D94h] +
push eax  +
push offset aSzpagefileloca  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0E2Ch] +
push eax  +
push offset aSztimelocalize  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0EC4h] +
push eax  +
push offset aSzmachinenamee  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0F5Ch] +
push eax  +
push offset aSzosenglish  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+0FF4h] +
push eax  +
push offset aSzosexenglish  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+108Ch] +
push eax  +
push offset aSzosexlongengl  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+1124h] +
push eax  +
push offset aSzlanguageseng  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
lea eax [esi+11BCh] +
push eax  +
push offset aSzpagefileengl  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100D8DF  +
add esi 1254h +
push esi  +
push offset aSztimeenglish  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
jmp loc_100D8DF  +
mov edi 80004005h +
mov eax [ebp-10h] +
test eax eax +
jz loc_100D8F0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-1Ch] +
call sub_100AB4C  +
mov eax edi +
jmp loc_100D901  +
mov eax 80070057h +
call sub_101FA75  +
retn   +
***
call sub_101FA3A  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov [ebp-0B0h] ecx +
lea ecx [ebp-0A8h] +
mov [ebp-0C0h] eax +
mov edi 80070057h +
call sub_100C141  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-0B4h] ebx +
mov [ebp-0ACh] ebx +
mov [ebp-0BCh] ebx +
mov [ebp-0C8h] ebx +
mov [ebp-0C4h] ebx +
push dword ptr [ebp-0B0h]  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 1 +
call sub_100AB7A  +
cmp [ebp-0C0h] ebx +
jz loc_100DC30  +
mov eax [esi] +
lea ecx [ebp-0B4h] +
push ecx  +
push offset aDisplayinfomon  +
push esi  +
call dword ptr [eax+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov eax [ebp-0B4h] +
mov ecx [eax] +
lea edx [ebp-0BCh] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov [ebp-0B8h] ebx +
cmp [ebp-0BCh] ebx +
jbe loc_100DC30  +
push 55Ch  +
call sub_100AAF5  +
pop ecx  +
cmp eax ebx +
jz loc_100D9E6  +
mov ecx eax +
call sub_100C7EF  +
mov esi eax +
jmp loc_100D9E8  +
xor esi esi +
cmp esi ebx +
jz loc_100DBF4  +
mov eax [ebp-0C0h] +
mov ecx [eax] +
mov [esi+558h] ecx +
push dword ptr [ebp-0A0h]  +
mov [eax] esi +
push dword ptr [ebp-9Ch]  +
mov eax [ebp-0B4h] +
push dword ptr [ebp-0B8h]  +
mov byte ptr [ebp-94h] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov [ebp-94h] bl +
call sub_100C1B2  +
cmp edi ebx +
jl loc_100DC30  +
mov eax [ebp-0B4h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_100DC23  +
cmp [ebp-0ACh] ebx +
jz loc_100DC2B  +
mov ecx [ebp-0B0h] +
lea eax [esi+98h] +
push eax  +
push offset aSzedddeviceid  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
lea eax [esi+130h] +
push eax  +
push offset aSzedddevicekey  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
lea eax [esi+1C8h] +
push eax  +
push offset aSzedddevicenam  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
push esi  +
push offset aSzedddevicestr  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
lea eax [esi+2F8h] +
push eax  +
push offset aSzwmimanufactu  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
lea eax [esi+4C0h] +
push eax  +
push offset aSzwmiperferred  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
lea eax [esi+390h] +
push eax  +
push offset aSzwmiproductco  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
lea eax [esi+260h] +
push eax  +
push offset aSzwmiuserfrien  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov ecx [ebp-0B0h] +
add esi 428h +
push esi  +
push offset aSzwmivideooutp  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DC30  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_100DBDA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
inc dword ptr [ebp-0B8h]  +
mov eax [ebp-0B8h] +
cmp eax [ebp-0BCh] +
jb loc_100D9CC  +
jmp loc_100DC30  +
mov edi 8007000Eh +
lea ecx [ebp-0CCh] +
call sub_100ABA4  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
call sub_101FA8E  +
retn 8  +
cmp [ebp-0ACh] ebx +
jnz loc_100DC38  +
mov edi 80004005h +
cmp [ebp-0ACh] ebx +
jz loc_100DC4F  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
mov [ebp-0ACh] ebx +
mov eax [ebp-0B4h] +
cmp eax ebx +
jz loc_100DBF9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B4h] ebx +
jmp loc_100DBF9  +
***
call sub_101FA3A  +
mov edi [ebp+0Ch] +
mov esi [ebp+8] +
mov [ebp-0B0h] ecx +
lea ecx [ebp-0A8h] +
mov [ebp-0C0h] edi +
call sub_100C141  +
xor ebx ebx +
push ebx  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
mov [ebp-0B4h] ebx +
mov [ebp-0ACh] ebx +
mov [ebp-0BCh] ebx +
call sub_100AE4F  +
mov [ebp-0C8h] ebx +
mov [ebp-0C4h] ebx +
push dword ptr [ebp-0B0h]  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 1 +
call sub_100AB7A  +
cmp edi ebx +
jnz loc_100DD14  +
mov edi 80070057h +
lea ecx [ebp-0CCh] +
call sub_100ABA4  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
call sub_101FA8E  +
retn 8  +
mov eax [esi] +
lea ecx [ebp-0B4h] +
push ecx  +
push offset aDxvadeinterlac  +
push esi  +
call dword ptr [eax+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov eax [ebp-0B4h] +
mov ecx [eax] +
lea edx [ebp-0BCh] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov [ebp-0B8h] ebx +
cmp [ebp-0BCh] ebx +
jbe loc_100DF4C  +
push 274h  +
call sub_100AAF5  +
pop ecx  +
cmp eax ebx +
jz loc_100DD79  +
mov ecx eax +
call sub_100C85A  +
mov esi eax +
jmp loc_100DD7B  +
xor esi esi +
cmp esi ebx +
jz loc_100DF35  +
mov eax [ebp-0C0h] +
mov ecx [eax] +
mov [esi+270h] ecx +
push dword ptr [ebp-0A0h]  +
mov [eax] esi +
push dword ptr [ebp-9Ch]  +
mov eax [ebp-0B4h] +
push dword ptr [ebp-0B8h]  +
mov byte ptr [ebp-94h] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov [ebp-94h] bl +
call sub_100C1B2  +
cmp edi ebx +
jl loc_100DF4C  +
mov eax [ebp-0B4h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_100DF3F  +
cmp [ebp-0ACh] ebx +
jz loc_100DF47  +
mov ecx [ebp-0B0h] +
push esi  +
push offset aSzd3dinputform  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov ecx [ebp-0B0h] +
lea eax [esi+98h] +
push eax  +
push offset aSzd3doutputfor  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov ecx [ebp-0B0h] +
lea eax [esi+130h] +
push eax  +
push offset aSzguid  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov ecx [ebp-0B0h] +
lea eax [esi+1C8h] +
push eax  +
push offset aSzcaps  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov ecx [ebp-0B0h] +
lea eax [esi+260h] +
push eax  +
push offset aDwnumpreviouso  +
push dword ptr [ebp-0ACh]  +
call sub_100A9C0  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov ecx [ebp-0B0h] +
lea eax [esi+264h] +
push eax  +
push offset aDwnumforwardre  +
push dword ptr [ebp-0ACh]  +
call sub_100A9C0  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov ecx [ebp-0B0h] +
add esi 268h +
push esi  +
push offset aDwnumbackwardr  +
push dword ptr [ebp-0ACh]  +
call sub_100A9C0  +
mov edi eax +
cmp edi ebx +
jl loc_100DF4C  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_100DF1B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
inc dword ptr [ebp-0B8h]  +
mov eax [ebp-0B8h] +
cmp eax [ebp-0BCh] +
jb loc_100DD5F  +
jmp loc_100DF4C  +
mov edi 8007000Eh +
jmp loc_100DCEA  +
cmp [ebp-0ACh] ebx +
jnz loc_100DF54  +
mov edi 80004005h +
cmp [ebp-0ACh] ebx +
jz loc_100DF6B  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
mov [ebp-0ACh] ebx +
mov eax [ebp-0B4h] +
cmp eax ebx +
jz loc_100DCEA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B4h] ebx +
jmp loc_100DCEA  +
***
call sub_101FA3A  +
mov ebx ecx +
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor esi esi +
push esi  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] esi +
mov [ebp-0B0h] esi +
mov [ebp-0ACh] esi +
mov [ebp-0B8h] esi +
call sub_100AE4F  +
mov [ebp-0C0h] esi +
mov [ebp-0BCh] esi +
push ebx  +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 1 +
call sub_100ABD2  +
cmp [ebx+18h] esi +
jnz loc_100DFF9  +
cmp [ebx+1Ch] esi +
jz loc_100E000  +
mov ecx ebx +
call sub_100CB8E  +
mov eax [ebx+8] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push offset aDxdiag_directs  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi esi +
jl loc_100ED30  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0B8h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_100ED30  +
mov [ebp-0B4h] esi +
cmp [ebp-0B8h] esi +
jbe loc_100E938  +
push 0DB4h  +
call sub_100AAF5  +
pop ecx  +
test eax eax +
jz loc_100E068  +
mov ecx eax +
call sub_100C88E  +
mov esi eax +
jmp loc_100E06A  +
xor esi esi +
test esi esi +
jz loc_100E9B8  +
mov eax [ebx+18h] +
test eax eax +
jnz loc_100E080  +
mov [ebx+18h] esi +
jmp loc_100E090  +
mov eax ecx +
mov ecx [eax+0DB0h] +
test ecx ecx +
jnz loc_100E07E  +
mov [eax+0DB0h] esi +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B0h] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
test edi edi +
jl loc_100ED30  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_100ED22  +
cmp dword ptr [ebp-0ACh] 0 +
jz loc_100ED2B  +
push esi  +
push offset aDwdevnode  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+4] +
push eax  +
push offset aSzguiddeviceid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+9Ch] +
push eax  +
push offset aSzhardwareid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+134h] +
push eax  +
push offset aSzregkey  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+1CCh] +
push eax  +
push offset aSzmanufactur_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+264h] +
push eax  +
push offset aSzproductid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+2FCh] +
push eax  +
push offset aSzdescription  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+394h] +
push eax  +
push offset aSzdrivername  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+42Ch] +
push eax  +
push offset aSzdriverpath  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+4C4h] +
push eax  +
push offset aSzdriverversio  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+55Ch] +
push eax  +
push offset aSzdriverlangua  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+5F4h] +
push eax  +
push offset aSzdriverlang_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+68Ch] +
push eax  +
push offset aSzdriverattrib  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+724h] +
push eax  +
push offset aSzdriverdateen  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+7BCh] +
push eax  +
push offset aSzdriverdatelo  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+854h] +
push eax  +
push offset aSzotherdrivers  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+8ECh] +
push eax  +
push offset aSzprovider  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+984h] +
push eax  +
push offset aSztype  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A1Ch] +
push eax  +
push offset aLnumbytes  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A20h] +
push eax  +
push offset aBdriverbeta  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A24h] +
push eax  +
push offset aBdriverdebug  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A28h] +
push eax  +
push offset aBdriversigned  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A2Ch] +
push eax  +
push offset aBdriversignedv  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A30h] +
push eax  +
push offset aLaccelerationl  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A38h] +
push eax  +
push offset aBaudiodisabled  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A3Ch] +
push eax  +
push offset aBdefaultsoundp  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A40h] +
push eax  +
push offset aBdefaultvoicep  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A44h] +
push eax  +
push offset aBvoicemanager  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A48h] +
push eax  +
push offset aBeax20listener  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A4Ch] +
push eax  +
push offset aBeax20source  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A50h] +
push eax  +
push offset aBi3dl2listener  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A54h] +
push eax  +
push offset aBi3dl2source  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A58h] +
push eax  +
push offset aBzoomfx  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A5Ch] +
push eax  +
push offset aDwflags  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A60h] +
push eax  +
push offset aDwminsecondary  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A64h] +
push eax  +
push offset aDwmaxsecondary  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A68h] +
push eax  +
push offset aDwprimarybuffe  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A6Ch] +
push eax  +
push offset aDwmaxhwmixinga  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A70h] +
push eax  +
push offset aDwmaxhwmixings  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A74h] +
push eax  +
push offset aDwmaxhwmixin_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A78h] +
push eax  +
push offset aDwfreehwmixing  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A7Ch] +
push eax  +
push offset aDwfreehwmixi_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A80h] +
push eax  +
push offset aDwfreehwmixi_1  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A84h] +
push eax  +
push offset aDwmaxhw3dallbu  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A88h] +
push eax  +
push offset aDwmaxhw3dstati  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A8Ch] +
push eax  +
push offset aDwmaxhw3dstrea  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A90h] +
push eax  +
push offset aDwfreehw3dallb  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A94h] +
push eax  +
push offset aDwfreehw3dstat  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A98h] +
push eax  +
push offset aDwfreehw3dstre  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0A9Ch] +
push eax  +
push offset aDwtotalhwmemby  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0AA0h] +
push eax  +
push offset aDwfreehwmembyt  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0AA4h] +
push eax  +
push offset aDwmaxcontigfre  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0AA8h] +
push eax  +
push offset aDwunlocktransf  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0AACh] +
push eax  +
push offset aDwplaycpuoverh  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0AB0h] +
push eax  +
push offset aSznoteslocaliz  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0B48h] +
push eax  +
push offset aSznotesenglish  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0BE0h] +
push eax  +
push offset aSzreghelptext  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+0C78h] +
push eax  +
push offset aSztestresultlo  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
add esi 0D10h +
push esi  +
push offset aSztestresulten  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
mov eax [ebp-0ACh] +
test eax eax +
jz loc_100E920  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0ACh] 0 +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0B8h] +
jb loc_100E04E  +
mov eax [ebp-0B0h] +
xor esi esi +
cmp eax esi +
jz loc_100E950  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B0h] esi +
mov eax [ebx+8] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push offset aDxdiag_direc_0  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi esi +
jl loc_100ED30  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0B8h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_100ED30  +
mov [ebp-0B4h] esi +
cmp [ebp-0B8h] esi +
jbe loc_100ED30  +
push 614h  +
call sub_100AAF5  +
pop ecx  +
test eax eax +
jz loc_100E9E3  +
mov ecx eax +
call sub_100C98B  +
mov esi eax +
jmp loc_100E9E5  +
lea ecx [ebp-0C4h] +
call sub_100ABFC  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax 8007000Eh +
call sub_101FA8E  +
retn   +
xor esi esi +
test esi esi +
jz loc_100ECF6  +
mov eax [ebx+1Ch] +
test eax eax +
jnz loc_100E9FB  +
mov [ebx+1Ch] esi +
jmp loc_100EA0B  +
mov eax ecx +
mov ecx [eax+610h] +
test ecx ecx +
jnz loc_100E9F9  +
mov [eax+610h] esi +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B0h] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
test edi edi +
jl loc_100ED30  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_100ED22  +
cmp dword ptr [ebp-0ACh] 0 +
jz loc_100ED2B  +
push esi  +
push offset aSzdescription  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+98h] +
push eax  +
push offset aSzguiddeviceid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+130h] +
push eax  +
push offset aSzdrivername  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+1C8h] +
push eax  +
push offset aSzdriverpath  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+260h] +
push eax  +
push offset aSzdriverversio  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+2F8h] +
push eax  +
push offset aSzdriverlangua  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+390h] +
push eax  +
push offset aSzdriverlang_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+428h] +
push eax  +
push offset aSzdriverattrib  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+4C0h] +
push eax  +
push offset aSzdriverdateen  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+558h] +
push eax  +
push offset aSzdriverdatelo  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+5F0h] +
push eax  +
push offset aLnumbytes  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+5F4h] +
push eax  +
push offset aBdriverbeta  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+5F8h] +
push eax  +
push offset aBdriverdebug  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+5FCh] +
push eax  +
push offset aBdefaultsoundr  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+600h] +
push eax  +
push offset aBdefaultvoicer  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
lea eax [esi+604h] +
push eax  +
push offset aDwflags  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
add esi 608h +
push esi  +
push offset aDwformats  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100ED30  +
mov eax [ebp-0ACh] +
test eax eax +
jz loc_100ECDC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0ACh] 0 +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0B8h] +
jb loc_100E99E  +
jmp loc_100ED30  +
mov edi 8007000Eh +
lea ecx [ebp-0C4h] +
call sub_100ABFC  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
jmp loc_100E9DD  +
cmp dword ptr [ebp-0ACh] 0 +
jnz loc_100ED39  +
mov edi 80004005h +
cmp dword ptr [ebp-0ACh] 0 +
jz loc_100ED51  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
and dword ptr [ebp-0ACh] 0 +
mov eax [ebp-0B0h] +
test eax eax +
jz loc_100ECFB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0B0h] 0 +
jmp loc_100ECFB  +
***
call sub_101FA3A  +
mov ebx ecx +
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor esi esi +
push esi  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] esi +
mov [ebp-0B0h] esi +
mov [ebp-0ACh] esi +
mov [ebp-0B8h] esi +
call sub_100AE4F  +
mov [ebp-0C0h] esi +
mov [ebp-0BCh] esi +
push ebx  +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 1 +
call sub_100AD32  +
cmp [ebx+24h] esi +
jz loc_100EDDB  +
mov ecx ebx +
call sub_100CBF8  +
push 4  +
call sub_100AAF5  +
pop ecx  +
mov [ebx+24h] eax +
cmp eax esi +
jnz loc_100EE15  +
lea ecx [ebp-0C4h] +
call sub_100AD5C  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax 8007000Eh +
call sub_101FA8E  +
retn   +
mov eax [ebx+8] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push offset aDxdiag_direc_1  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi esi +
jl loc_100F0D9  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0B8h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_100F0D9  +
mov [ebp-0B4h] esi +
cmp [ebp-0B8h] esi +
jbe loc_100F0D9  +
push 43Ch  +
call sub_100AAF5  +
pop ecx  +
cmp eax esi +
jz loc_100EE7B  +
mov ecx eax +
call sub_100CA35  +
mov esi eax +
test esi esi +
jz loc_100F09D  +
mov eax [ebx+24h] +
cmp dword ptr [eax] 0 +
jnz loc_100EE8F  +
mov [eax] esi +
jmp loc_100EEA5  +
mov eax [eax] +
jmp loc_100EE95  +
mov eax ecx +
mov ecx [eax+438h] +
test ecx ecx +
jnz loc_100EE93  +
mov [eax+438h] esi +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B0h] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
test edi edi +
jl loc_100F0D7  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_100F0C9  +
cmp dword ptr [ebp-0ACh] 0 +
jz loc_100F0D2  +
push esi  +
push offset aSzname  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+98h] +
push eax  +
push offset aSzversion  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+130h] +
push eax  +
push offset aClsidfilter  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+1C8h] +
push eax  +
push offset aSzfilename  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+260h] +
push eax  +
push offset aSzfileversion  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+2F8h] +
push eax  +
push offset aSzcatname  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+390h] +
push eax  +
push offset aClsidcat  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+428h] +
push eax  +
push offset aDwinputs  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
lea eax [esi+42Ch] +
push eax  +
push offset aDwoutputs  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
add esi 430h +
push esi  +
push offset aDwmerit  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_100F0D7  +
mov eax [ebp-0ACh] +
test eax eax +
jz loc_100F081  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0ACh] 0 +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
xor esi esi +
cmp eax [ebp-0B8h] +
jb loc_100EE63  +
jmp loc_100F0D9  +
mov edi 8007000Eh +
lea ecx [ebp-0C4h] +
call sub_100AD5C  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
jmp loc_100EE0F  +
cmp dword ptr [ebp-0ACh] 0 +
jnz loc_100F0E3  +
mov edi 80004005h +
xor esi esi +
cmp [ebp-0ACh] esi +
jz loc_100F0FC  +
jmp loc_100F0E5  +
xor esi esi +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
mov [ebp-0ACh] esi +
mov eax [ebp-0B0h] +
cmp eax esi +
jz loc_100F0A2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B0h] esi +
jmp loc_100F0A2  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
push esi  +
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call sub_100AD8A  +
cmp [esi+38h] edi +
jz loc_100F14A  +
mov ecx esi +
call sub_100CAC8  +
push 278h  +
call sub_100AAF5  +
pop ecx  +
cmp eax edi +
jz loc_100F162  +
mov ecx eax +
call sub_100C85A  +
jmp loc_100F164  +
xor eax eax +
mov [esi+38h] eax +
cmp eax edi +
jnz loc_100F180  +
mov esi 8007000Eh +
lea ecx [ebp-1Ch] +
call sub_100ADB4  +
mov eax esi +
call sub_101FA75  +
retn   +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push offset aDxdiag_evrinfo  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 130h +
push eax  +
push offset aSzbalancedflag  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100BDE0  +
test eax eax +
jl loc_100F2BC  +
push dword ptr [esi+38h]  +
mov ecx esi +
push offset aSzcurrentsetti  +
push dword ptr [ebp-10h]  +
call sub_100BDE0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 1C8h +
push eax  +
push offset aSzpowerflags  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100BDE0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 98h +
push eax  +
push offset aSzqualityflags  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100BDE0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 260h +
push eax  +
push offset aDwqualityflags  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100A9C0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 264h +
push eax  +
push offset aDwbalancedflag  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100A9C0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 268h +
push eax  +
push offset aDwpowerflags  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100A9C0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 270h +
push eax  +
push offset aDwbalanceddeco  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100A9C0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 274h +
push eax  +
push offset aDwpowerdecodep  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100A9C0  +
test eax eax +
jl loc_100F2BC  +
mov eax [esi+38h] +
add eax 26Ch +
push eax  +
push offset aDwqualitydecod  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100A9C0  +
xor esi esi +
jmp loc_100F170  +
***
jmp sub_100CC67  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_100CC8D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_100F30A  +
call loc_101E7B6  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_100F31A  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_100F338  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_100BFE7  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_100BFE7  +
jmp loc_100F37B  +
push 0  +
push esi  +
call sub_100CCC8  +
test al al +
jz loc_100F37B  +
cmp dword ptr [edi+18h] 10h +
jb loc_100F34F  +
mov edi [edi+4] +
jmp loc_100F352  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_100F35F  +
mov eax [ebx+4] +
jmp loc_100F362  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_100BCC3  +
add esp 10h +
push esi  +
mov ecx ebx +
call sub_100BBD7  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_0] +
push esi  +
push edi  +
call sub_100BDB7  +
add esp 0Ch +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_100AE12  +
test al al +
jz loc_100F3E5  +
cmp dword ptr [esi+18h] 10h +
jb loc_100F3D2  +
mov eax [esi+4] +
jmp loc_100F3D5  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_100F2F0  +
jmp loc_100F41F  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100CCC8  +
test al al +
jz loc_100F41D  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_100F402  +
mov eax [esi+4] +
jmp loc_100F405  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_100BCC3  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100BBD7  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_100F48F  +
cmp [esi+4] edi +
jz loc_100F48F  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100AB22  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetsysteminfo  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_100F483  +
mov ecx esi +
call sub_100D0F4  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100AB4C  +
mov eax ebx +
jmp loc_100F494  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_100F506  +
cmp [esi+4] edi +
jz loc_100F506  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100AD8A  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetevrinfo  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_100F4FA  +
mov ecx esi +
call sub_100F119  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100ADB4  +
mov eax ebx +
jmp loc_100F50B  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_100F57D  +
cmp [esi+4] edi +
jz loc_100F57D  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100ABD2  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetsoundinfo  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_100F571  +
mov ecx esi +
call sub_100DF8F  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100ABFC  +
mov eax ebx +
jmp loc_100F582  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_100F5F4  +
cmp [esi+4] edi +
jz loc_100F5F4  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100AD32  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetdirectshowi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_100F5E8  +
mov ecx esi +
call sub_100ED6F  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100AD5C  +
mov eax ebx +
jmp loc_100F5F9  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
call sub_101FA3A  +
mov ebx ecx +
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor esi esi +
push esi  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] esi +
mov [ebp-0B0h] esi +
mov [ebp-0ACh] esi +
mov [ebp-0B8h] esi +
call sub_100AE4F  +
mov [ebp-0C0h] esi +
mov [ebp-0BCh] esi +
push ebx  +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 1 +
call sub_100AB7A  +
cmp [ebx+14h] esi +
jz loc_100F672  +
mov ecx ebx +
call sub_100CB06  +
mov eax [ebx+8] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push offset aDxdiag_display  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi esi +
jl loc_1010339  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0B8h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_1010339  +
mov [ebp-0B4h] esi +
cmp [ebp-0B8h] esi +
jbe loc_1010339  +
push 22E4h  +
call sub_100AAF5  +
pop ecx  +
test eax eax +
jz loc_100F6DA  +
mov ecx eax +
call sub_100C569  +
mov esi eax +
jmp loc_100F6DC  +
xor esi esi +
test esi esi +
jz loc_10102FC  +
mov eax [ebx+14h] +
test eax eax +
jnz loc_100F6F2  +
mov [ebx+14h] esi +
jmp loc_100F702  +
mov eax ecx +
mov ecx [eax+22E0h] +
test ecx ecx +
jnz loc_100F6F0  +
mov [eax+22E0h] esi +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B0h] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
test edi edi +
jl loc_1010337  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_1010329  +
cmp dword ptr [ebp-0ACh] 0 +
jz loc_1010332  +
push esi  +
push offset aSzdevicename  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+98h] +
push eax  +
push offset aSzdescription  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+130h] +
push eax  +
push offset aSzkeydeviceid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1C8h] +
push eax  +
push offset aSzkeydevicekey  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+260h] +
push eax  +
push offset aSzmanufacturer  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+2F8h] +
push eax  +
push offset aSzchiptype  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+390h] +
push eax  +
push offset aSzdactype  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+428h] +
push eax  +
push offset aSzrevision  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+4C0h] +
push eax  +
push offset aSzdisplaymemor  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+558h] +
push eax  +
push offset aSzdisplaymem_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+5F0h] +
push eax  +
push offset aSzdisplaymodel  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+688h] +
push eax  +
push offset aSzdisplaymodee  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0F98h] +
push eax  +
push offset aSzoverlayengli  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1030h] +
push eax  +
push offset aSzdxvahdenglis  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+720h] +
push eax  +
push offset aDwwidth  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+724h] +
push eax  +
push offset aDwheight  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+728h] +
push eax  +
push offset aDwbpp  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+72Ch] +
push eax  +
push offset aDwrefreshrate  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+730h] +
push eax  +
push offset aDwgotdxgimemor  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+734h] +
push eax  +
push offset aDwdedicatedvid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+738h] +
push eax  +
push offset aDwsharedvideom  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+740h] +
push eax  +
push offset aSzmonitorname  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+7D8h] +
push eax  +
push offset aSzmonitormaxre  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+870h] +
push eax  +
push offset aSzdrivername  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+9A0h] +
push eax  +
push offset aSzdriverassemb  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+908h] +
push eax  +
push offset aSzdriverversio  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0A38h] +
push eax  +
push offset aSzdriverattrib  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0AD0h] +
push eax  +
push offset aSzdriverlangua  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0B68h] +
push eax  +
push offset aSzdriverlang_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0C00h] +
push eax  +
push offset aSzdriverdateen  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0C98h] +
push eax  +
push offset aSzdriverdatelo  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0D30h] +
push eax  +
push offset aLdriversize  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0D34h] +
push eax  +
push offset aSzminivdd  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0DCCh] +
push eax  +
push offset aSzminivdddatel  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0E64h] +
push eax  +
push offset aSzminivdddatee  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0EFCh] +
push eax  +
push offset aLminivddsize  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA11  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+0F00h] +
push eax  +
push offset aSzvdd  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1160h] +
push eax  +
push offset aSzdrivermodele  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+10C8h] +
push eax  +
push offset aSzdrivermodell  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+11F8h] +
push eax  +
push offset aSzdrivernodest  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1290h] +
push eax  +
push offset aSzrankofinstal  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1328h] +
push eax  +
push offset aBcanrenderwind  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+132Ch] +
push eax  +
push offset aBdriverbeta  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1330h] +
push eax  +
push offset aBdriverdebug  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1334h] +
push eax  +
push offset aBdriversigned  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1338h] +
push eax  +
push offset aBdriversignedv  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+16D8h] +
push eax  +
push offset aSzdeviceidenti  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1770h] +
push eax  +
push offset aSzdriversignda  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+133Ch] +
push eax  +
push offset aDwddiversion  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1340h] +
push eax  +
push offset aSzddiversionen  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+13D8h] +
push eax  +
push offset aSzddiversionlo  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1470h] +
push eax  +
push offset aIadapter  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1474h] +
push eax  +
push offset aSzvendorid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+150Ch] +
push eax  +
push offset aSzdeviceid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+15A4h] +
push eax  +
push offset aSzsubsysid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+163Ch] +
push eax  +
push offset aSzrevisionid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+16D4h] +
push eax  +
push offset aDwwhqllevel  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1808h] +
push eax  +
push offset aBnohardware  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+180Ch] +
push eax  +
push offset aBddacceleratio  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1810h] +
push eax  +
push offset aB3dacceleratio  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1814h] +
push eax  +
push offset aB3daccelerat_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1818h] +
push eax  +
push offset aBagpenabled  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+181Ch] +
push eax  +
push offset aBagpexists  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1820h] +
push eax  +
push offset aBagpexistencev  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100AA58  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1824h] +
push eax  +
push offset aSzdxvamodes  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+18C0h] +
push eax  +
push offset aSzddstatusloca  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1958h] +
push eax  +
push offset aSzddstatusengl  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+19F0h] +
push eax  +
push offset aSzd3dstatusloc  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1A88h] +
push eax  +
push offset aSzd3dstatuseng  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1B20h] +
push eax  +
push offset aSzagpstatusloc  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1BB8h] +
push eax  +
push offset aSzagpstatuseng  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1C50h] +
push eax  +
push offset aSznoteslocaliz  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1CE8h] +
push eax  +
push offset aSznotesenglish  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1D80h] +
push eax  +
push offset aSzreghelptext  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1E18h] +
push eax  +
push offset aSztestresultdd  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1EB0h] +
push eax  +
push offset aSztestresult_0  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1F48h] +
push eax  +
push offset aSztestresultd3  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+1FE0h] +
push eax  +
push offset aSztestresult_1  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+2078h] +
push eax  +
push offset aSztestresult_2  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+2110h] +
push eax  +
push offset aSztestresult_3  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+21A8h] +
push eax  +
push offset aSztestresult_4  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+2240h] +
push eax  +
push offset aSztestresult_5  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_1010337  +
lea eax [esi+18BCh] +
push eax  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100DC6C  +
add esi 73Ch +
push esi  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100D90C  +
mov eax [ebp-0ACh] +
test eax eax +
jz loc_10102E2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0ACh] 0 +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0B8h] +
jb loc_100F6C0  +
jmp loc_1010337  +
mov edi 8007000Eh +
lea ecx [ebp-0C4h] +
call sub_100ABA4  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
call sub_101FA8E  +
retn   +
cmp dword ptr [ebp-0ACh] 0 +
jnz loc_1010341  +
mov edi 80004005h +
xor esi esi +
cmp [ebp-0ACh] esi +
jz loc_1010359  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
and dword ptr [ebp-0ACh] 0 +
mov eax [ebp-0B0h] +
test eax eax +
jz loc_1010301  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0B0h] 0 +
jmp loc_1010301  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
jmp loc_1010396  +
mov ecx [esi] +
test ecx ecx +
jz loc_1010393  +
push 1  +
call sub_100BE65  +
add esi 4 +
cmp esi [edi+8] +
jnz loc_1010386  +
mov ecx edi +
call sub_100F2D2  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+130h] +
call sub_100CC67  +
lea ecx [esi+98h] +
mov edi offset off_1004B94 +
mov [ecx] edi +
call sub_101889F  +
mov [esi] edi +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+570h] +
call sub_100CC67  +
lea ecx [edi+560h] +
call sub_100CC67  +
lea ecx [edi+4C8h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+430h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+398h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+300h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+268h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1D0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+138h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+0A0h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+8] +
pop edi  +
mov [ecx] esi +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+1FCh] +
call sub_100CC67  +
lea ecx [esi+1ECh] +
call sub_100CC67  +
lea ecx [esi+1DCh] +
call sub_100CC67  +
lea ecx [esi+1CCh] +
call sub_100CC67  +
lea ecx [esi+134h] +
mov edi offset off_1004B94 +
mov [ecx] edi +
call sub_101889F  +
lea ecx [esi+9Ch] +
mov [ecx] edi +
call sub_101889F  +
lea ecx [esi+4] +
mov [ecx] edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+394h] +
call sub_100CC67  +
lea ecx [edi+2F8h] +
mov esi offset off_1004B94 +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+260h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+1C8h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+130h] +
mov [ecx] esi +
call sub_101889F  +
lea ecx [edi+98h] +
mov [ecx] esi +
call sub_101889F  +
mov [edi] esi +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_101889F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_100BBD7  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100F2F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_101057F  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_100F3B1  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101EB69  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1001CFC +
call sub_1010543  +
mov eax esi +
call sub_101FA75  +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_101EBE0  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1001CFC +
call sub_1010543  +
mov eax esi +
call sub_101FA75  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101059B  +
mov dword ptr [esi] offset off_1003F8C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_100CDD3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003F8C +
call sub_100CDD3  +
test byte ptr [ebp+8] 1 +
jz loc_1010666  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10105D5  +
mov dword ptr [esi] offset off_1003F8C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_10106F9  +
cmp [esi+4] edi +
jz loc_10106F9  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100AB7A  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetdisplayinfo  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_10106ED  +
mov ecx esi +
call sub_100F606  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100ABA4  +
mov eax ebx +
jmp loc_10106FE  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10103AD  +
test [ebp+arg_0] 1 +
jz loc_1010725  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10103E0  +
test [ebp+arg_0] 1 +
jz loc_101074B  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101047A  +
test [ebp+arg_0] 1 +
jz loc_1010771  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10104DC  +
test [ebp+arg_0] 1 +
jz loc_1010797  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_100BBD7  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1010573  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_10105D5  +
push offset dword_1033AD0  +
lea eax [ebp-28h] +
push eax  +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1010672  +
push offset dword_1033B08  +
lea eax [ebp-28h] +
push eax  +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi ecx +
push edi  +
lea ecx [ebp+var_C] +
call sub_100ACDA  +
mov esi [edi+10h] +
test esi esi +
jz loc_1010862  +
push ebx  +
lea eax [esi+130h] +
push eax  +
mov ecx edi +
call sub_1010377  +
mov ebx [esi+148h] +
push 1  +
mov ecx esi +
call sub_101070B  +
mov esi ebx +
test ebx ebx +
jnz loc_101083E  +
pop ebx  +
and dword ptr [edi+10h] 0 +
lea ecx [ebp+var_C] +
call sub_100AD04  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebx+4] +
mov [ebp+var_4] ecx +
cmp esi [ebx+8] +
jz loc_10108D3  +
push edi  +
mov edi [esi] +
lea ecx [edi+570h] +
call sub_100ADE2  +
test eax eax +
jz loc_10108AE  +
mov ecx [ebp+var_4] +
lea eax [edi+570h] +
push eax  +
call sub_1010877  +
mov ecx [ebp+var_4] +
lea eax [edi+560h] +
push eax  +
call sub_1010377  +
test edi edi +
jz loc_10108CA  +
push 1  +
mov ecx edi +
call sub_1010731  +
add esi 4 +
cmp esi [ebx+8] +
jnz loc_101088E  +
pop edi  +
mov ecx ebx +
call sub_100F2D2  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-18h] +
call sub_100AC82  +
mov eax [esi+20h] +
test eax eax +
jz loc_1010982  +
mov edi [eax+200h] +
jmp loc_101092A  +
mov ecx [edi] +
test ecx ecx +
jz loc_1010924  +
push 1  +
call sub_100BF49  +
mov eax [esi+20h] +
add edi 4 +
cmp edi [eax+204h] +
jnz loc_1010917  +
mov ecx [esi+20h] +
add ecx 1FCh +
call sub_100F2D2  +
mov eax [esi+20h] +
add eax 1CCh +
push eax  +
mov ecx esi +
call sub_1010877  +
mov eax [esi+20h] +
add eax 1DCh +
push eax  +
mov ecx esi +
call sub_1010877  +
mov eax [esi+20h] +
add eax 1ECh +
push eax  +
mov ecx esi +
call sub_1010877  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1010982  +
push 1  +
call sub_1010757  +
and dword ptr [esi+20h] 0 +
lea ecx [ebp-18h] +
call sub_100ACAC  +
call sub_101FA75  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+4] +
jmp loc_10109B4  +
mov ecx [esi] +
test ecx ecx +
jz loc_10109B1  +
push 1  +
call sub_101077D  +
add esi 4 +
cmp esi [edi+8] +
jnz loc_10109A4  +
mov ecx edi +
call sub_100F2D2  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax (offset loc_103291D+1) +
call sub_101F9C7  +
push offset aVectorTTooLong  +
lea ecx [ebp-28h] +
call sub_10107A3  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1010614  +
push offset dword_1033B08  +
lea eax [ebp-50h] +
push eax  +
call sub_101F49D  +
push 4  +
mov eax offset loc_1032949 +
call sub_101F9C7  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi] +
xor edi edi +
mov [ebp-4] edi +
cmp eax edi +
jz loc_1010A2C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax [esi+8] +
cmp eax edi +
jz loc_1010A3C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+8] edi +
mov eax [esi+4] +
cmp eax edi +
jz loc_1010A4C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+4] edi +
mov ecx esi +
call sub_100CA8A  +
mov ecx esi +
call sub_1010819  +
mov ecx esi +
call sub_100CB06  +
mov ecx esi +
call sub_100CB8E  +
mov ecx esi +
call sub_10108E5  +
mov ecx esi +
call sub_100CBF8  +
cmp [esi+11Ch] edi +
jz loc_1010A84  +
call ds:CoUninitialize  +
mov edi ds:DeleteCriticalSection +
lea eax [esi+5Ch] +
push eax  +
call edi  +
lea eax [esi+74h] +
push eax  +
call edi  +
lea eax [esi+8Ch] +
push eax  +
call edi  +
lea eax [esi+0A4h] +
push eax  +
call edi  +
lea eax [esi+0BCh] +
push eax  +
call edi  +
lea eax [esi+0D4h] +
push eax  +
call edi  +
lea eax [esi+0ECh] +
push eax  +
call edi  +
lea ecx [esi+28h] +
call sub_100CC67  +
call sub_101FA75  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1010AF5  +
xor al al +
jmp loc_1010B16  +
cmp edi 3FFFFFFFh +
jbe loc_1010B02  +
call loc_10109CB  +
push edi  +
call sub_100BBFD  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*4] +
mov [esi+0Ch] eax +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov eax [eax] +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_4] eax +
call sub_100ADFA  +
mov edi [ebp+arg_4] +
mov [ebp+arg_8] eax +
test edi edi +
jz loc_1010C79  +
mov ecx esi +
call sub_100ADE2  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_1010B5F  +
call loc_10109CB  +
add eax edi +
push ebx  +
cmp [ebp+arg_8] eax +
jnb loc_1010BEB  +
mov edx [ebp+arg_8] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+arg_8] +
jnb loc_1010B7D  +
and [ebp+arg_8] 0 +
jmp loc_1010B80  +
add [ebp+arg_8] edx +
cmp [ebp+arg_8] eax +
jnb loc_1010B88  +
mov [ebp+arg_8] eax +
push [ebp+arg_8]  +
mov ecx esi +
call sub_100BBFD  +
mov ebx eax +
push ebx  +
push [ebp+arg_0]  +
mov ecx esi +
push dword ptr [esi+4]  +
call sub_100C192  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_100F389  +
push eax  +
push dword ptr [esi+8]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_100C192  +
mov ecx esi +
call sub_100ADE2  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1010BD4  +
push eax  +
call sub_101E6A1  +
pop ecx  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_1010C78  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 2 +
mov [ebp+arg_8] eax +
cmp edx edi +
jnb loc_1010C45  +
mov ebx edi +
shl ebx 2 +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
mov ecx esi +
call sub_100C192  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_100F389  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_100AF5B  +
add esp 0Ch +
jmp loc_1010C78  +
push eax  +
mov ebx eax +
shl edi 2 +
push eax  +
sub ebx edi +
push ebx  +
mov ecx esi +
call sub_100C192  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_100BD0B  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_100AF5B  +
add esp 18h +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100ADE2  +
test eax eax +
jnz loc_1010C9A  +
xor esi esi +
jmp loc_1010CA3  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1010B21  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
lea eax [esi+5Ch] +
push eax  +
mov [esi] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [esi+20h] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
mov [esi+50h] ebx +
mov [esi+54h] ebx +
mov [esi+58h] ebx +
call edi  +
lea eax [esi+74h] +
push eax  +
call edi  +
lea eax [esi+8Ch] +
push eax  +
call edi  +
lea eax [esi+0A4h] +
push eax  +
call edi  +
lea eax [esi+0BCh] +
push eax  +
call edi  +
lea eax [esi+0D4h] +
push eax  +
call edi  +
lea eax [esi+0ECh] +
push eax  +
call edi  +
lea eax [esi+104h] +
push eax  +
call edi  +
push ebx  +
call ds:CoInitialize  +
push ebx  +
push ebx  +
push ebx  +
push 3  +
xor ecx ecx +
push 1  +
test eax eax +
push ebx  +
setnl cl  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
mov [esi+11Ch] ecx +
call ds:CoInitializeSecurity  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call sub_101F9C7  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100C141  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+98h] +
call sub_100C141  +
push 0  +
lea ecx [esi+130h] +
mov byte ptr [ebp-4] 1 +
call sub_1010AD6  +
mov eax esi +
call sub_101FA75  +
retn   +
***
call sub_101F9C7  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100C141  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+98h] +
call sub_100C141  +
lea ecx [esi+130h] +
call sub_100C141  +
lea ecx [esi+1C8h] +
call sub_100C141  +
lea ecx [esi+260h] +
call sub_100C141  +
lea ecx [esi+2F8h] +
call sub_100C141  +
push 0  +
lea ecx [esi+394h] +
mov byte ptr [ebp-4] 5 +
call sub_1010AD6  +
mov eax esi +
call sub_101FA75  +
retn   +
***
call sub_101F9C7  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4] +
call sub_100C141  +
xor edi edi +
lea ecx [esi+9Ch] +
mov [ebp-4] edi +
call sub_100C141  +
lea ecx [esi+134h] +
call sub_100C141  +
lea ecx [esi+1CCh] +
push edi  +
mov byte ptr [ebp-4] 2 +
call sub_1010AD6  +
lea ecx [esi+1DCh] +
push edi  +
mov byte ptr [ebp-4] 3 +
call sub_1010AD6  +
lea ecx [esi+1ECh] +
push edi  +
mov byte ptr [ebp-4] 4 +
call sub_1010AD6  +
push edi  +
lea ecx [esi+1FCh] +
mov byte ptr [ebp-4] 5 +
call sub_1010AD6  +
mov eax esi +
call sub_101FA75  +
retn   +
***
call sub_101F9C7  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+8] +
call sub_100C141  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0A0h] +
call sub_100C141  +
lea ecx [esi+138h] +
call sub_100C141  +
lea ecx [esi+1D0h] +
call sub_100C141  +
lea ecx [esi+268h] +
call sub_100C141  +
lea ecx [esi+300h] +
call sub_100C141  +
lea ecx [esi+398h] +
call sub_100C141  +
lea ecx [esi+430h] +
call sub_100C141  +
lea ecx [esi+4C8h] +
call sub_100C141  +
lea ecx [esi+560h] +
push 0  +
mov byte ptr [ebp-4] 8 +
call sub_1010AD6  +
push 0  +
lea ecx [esi+570h] +
mov byte ptr [ebp-4] 9 +
call sub_1010AD6  +
mov eax esi +
call sub_101FA75  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100ADE2  +
mov ecx esi +
mov edi eax +
call sub_100ADFA  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_1010F8C  +
push 1  +
push eax  +
call sub_100F389  +
mov [esi+8] eax +
jmp loc_1010F96  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1010C84  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_101FA3A  +
mov edi [ebp+0Ch] +
mov esi [ebp+8] +
mov [ebp-0BCh] ecx +
lea ecx [ebp-0A8h] +
mov [ebp-0C4h] edi +
call sub_100C141  +
xor ebx ebx +
push ebx  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
mov [ebp-0B0h] ebx +
mov [ebp-0ACh] ebx +
mov [ebp-0B8h] ebx +
call sub_100AE4F  +
mov [ebp-0CCh] ebx +
mov [ebp-0C8h] ebx +
push dword ptr [ebp-0BCh]  +
lea ecx [ebp-0D0h] +
mov byte ptr [ebp-4] 1 +
call sub_100ACDA  +
mov ecx edi +
call sub_100F2D2  +
mov eax [esi] +
lea ecx [ebp-0B0h] +
push ecx  +
push offset aDrivers  +
push esi  +
call dword ptr [eax+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_101118F  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0B8h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_101118F  +
mov [ebp-0B4h] ebx +
cmp [ebp-0B8h] ebx +
jbe loc_101118F  +
push 4E4h  +
call sub_100AAF5  +
pop ecx  +
cmp eax ebx +
jz loc_1011082  +
mov ecx eax +
call sub_100C351  +
mov edi eax +
jmp loc_1011084  +
xor edi edi +
mov [ebp-0C0h] edi +
cmp edi ebx +
jz loc_1011153  +
mov ecx [ebp-0C4h] +
lea eax [ebp-0C0h] +
push eax  +
call sub_1010F5C  +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B0h] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov esi eax +
mov [ebp-94h] bl +
call sub_100C1B2  +
cmp esi ebx +
jl loc_101118F  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1011182  +
cmp [ebp-0ACh] ebx +
jz loc_101118A  +
push dword ptr [ebp-0ACh]  +
mov ecx [ebp-0BCh] +
push edi  +
call sub_100C3B1  +
mov esi eax +
cmp esi ebx +
jl loc_101118F  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_1011139  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0B8h] +
jb loc_1011068  +
jmp loc_101118F  +
mov esi 8007000Eh +
lea ecx [ebp-0D0h] +
call sub_100AD04  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn 8  +
cmp [ebp-0ACh] ebx +
jnz loc_1011197  +
mov esi 80004005h +
cmp [ebp-0ACh] ebx +
jz loc_10111AE  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
mov [ebp-0ACh] ebx +
mov eax [ebp-0B0h] +
cmp eax ebx +
jz loc_1011158  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B0h] ebx +
jmp loc_1011158  +
***
call sub_101FA3A  +
mov [ebp-0BCh] ecx +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
lea ecx [ebp-0A8h] +
mov [ebp-0C0h] eax +
call sub_100C141  +
xor ebx ebx +
push ebx  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
mov [ebp-0ACh] ebx +
mov [ebp-0B4h] ebx +
call sub_100AE4F  +
mov eax [esi] +
lea ecx [ebp-0B4h] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_101135C  +
mov [ebp-0B0h] ebx +
cmp [ebp-0B4h] ebx +
jbe loc_101135C  +
push dword ptr [ebp-0A0h]  +
mov eax [esi] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B0h]  +
push esi  +
call dword ptr [eax+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov [ebp-94h] bl +
call sub_100C1B2  +
cmp edi ebx +
jl loc_101135C  +
mov eax [esi] +
lea ecx [ebp-0ACh] +
push ecx  +
push dword ptr [ebp-9Ch]  +
push esi  +
call dword ptr [eax+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_101134F  +
cmp [ebp-0ACh] ebx +
jz loc_1011357  +
push 4E4h  +
call sub_100AAF5  +
pop ecx  +
cmp eax ebx +
jz loc_10112BF  +
mov ecx eax +
call sub_100C351  +
mov edi eax +
jmp loc_10112C1  +
xor edi edi +
mov [ebp-0B8h] edi +
cmp edi ebx +
jz loc_101132B  +
mov ecx [ebp-0C0h] +
lea eax [ebp-0B8h] +
push eax  +
add ecx 560h +
call sub_1010F5C  +
push dword ptr [ebp-0ACh]  +
mov ecx [ebp-0BCh] +
push edi  +
call sub_100C3B1  +
mov edi eax +
cmp edi ebx +
jl loc_101135C  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_1011311  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
inc dword ptr [ebp-0B0h]  +
mov eax [ebp-0B0h] +
cmp eax [ebp-0B4h] +
jb loc_1011242  +
jmp loc_101135C  +
mov edi 8007000Eh +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
call sub_101FA8E  +
retn 8  +
cmp [ebp-0ACh] ebx +
jnz loc_1011364  +
mov edi 80004005h +
cmp [ebp-0ACh] ebx +
jz loc_1011330  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
mov [ebp-0ACh] ebx +
jmp loc_1011330  +
***
call sub_101FA3A  +
mov esi ecx +
lea ecx [ebp-0A8h] +
mov [ebp-0B8h] esi +
call sub_100C141  +
xor ebx ebx +
push ebx  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
mov [ebp-0B0h] ebx +
mov [ebp-0ACh] ebx +
mov [ebp-0BCh] ebx +
call sub_100AE4F  +
mov [ebp-0C4h] ebx +
mov [ebp-0C0h] ebx +
push esi  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebp-4] 1 +
call sub_100ACDA  +
cmp [esi+10h] ebx +
jz loc_10113F4  +
mov ecx esi +
call sub_1010819  +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push offset aDxdiag_systemd  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_10115D7  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0BCh] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10115D7  +
mov [ebp-0B4h] ebx +
cmp [ebp-0BCh] ebx +
jbe loc_10115D7  +
push 14Ch  +
call sub_100AAF5  +
pop ecx  +
mov ecx eax +
mov [ebp-0CCh] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_1011466  +
call sub_1010D85  +
mov edi eax +
jmp loc_1011468  +
xor edi edi +
mov byte ptr [ebp-4] 1 +
cmp edi ebx +
jz loc_101159D  +
mov ecx [ebp-0B8h] +
mov eax [ecx+10h] +
cmp eax ebx +
jnz loc_1011488  +
mov [ecx+10h] edi +
jmp loc_1011498  +
mov eax ecx +
mov ecx [eax+148h] +
cmp ecx ebx +
jnz loc_1011486  +
mov [eax+148h] edi +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B0h] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov esi eax +
mov [ebp-94h] bl +
call sub_100C1B2  +
cmp esi ebx +
jl loc_10115D7  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_10115CA  +
cmp [ebp-0ACh] ebx +
jz loc_10115D2  +
mov ecx [ebp-0B8h] +
push edi  +
push offset aSzdescription  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov esi eax +
cmp esi ebx +
jl loc_10115D7  +
mov ecx [ebp-0B8h] +
lea eax [edi+98h] +
push eax  +
push offset aSzdeviceid_0  +
push dword ptr [ebp-0ACh]  +
call sub_100BDE0  +
mov esi eax +
cmp esi ebx +
jl loc_10115D7  +
mov ecx [ebp-0B8h] +
add edi 130h +
push edi  +
push dword ptr [ebp-0ACh]  +
call sub_1010FA1  +
mov esi eax +
cmp esi ebx +
jl loc_10115D7  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_1011583  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0BCh] +
jb loc_1011442  +
jmp loc_10115D7  +
mov esi 8007000Eh +
lea ecx [ebp-0C8h] +
call sub_100AD04  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn   +
cmp [ebp-0ACh] ebx +
jnz loc_10115DF  +
mov esi 80004005h +
cmp [ebp-0ACh] ebx +
jz loc_10115F6  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
mov [ebp-0ACh] ebx +
mov eax [ebp-0B0h] +
cmp eax ebx +
jz loc_10115A2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B0h] ebx +
jmp loc_10115A2  +
***
call sub_101FA3A  +
mov ebx ecx +
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor esi esi +
push esi  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] esi +
mov [ebp-0B0h] esi +
mov [ebp-0ACh] esi +
mov [ebp-0B8h] esi +
call sub_100AE4F  +
mov [ebp-0C4h] esi +
mov [ebp-0C0h] esi +
push ebx  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebp-4] 1 +
call sub_100ACDA  +
lea eax [ebx+28h] +
push eax  +
mov ecx ebx +
call sub_1010995  +
mov eax [ebx+8] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push offset aDxdiag_logical  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi esi +
jl loc_10118F9  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0B8h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_10118F9  +
mov [ebp-0B4h] esi +
cmp [ebp-0B8h] esi +
jbe loc_10118F9  +
push 3A8h  +
call sub_100AAF5  +
pop ecx  +
mov [ebp-0BCh] eax +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10116F0  +
mov ecx eax +
call sub_1010DC8  +
mov esi eax +
jmp loc_10116F2  +
xor esi esi +
mov byte ptr [ebp-4] 1 +
mov [ebp-0BCh] esi +
test esi esi +
jz loc_10118BE  +
lea eax [ebp-0BCh] +
push eax  +
lea ecx [ebx+28h] +
call sub_1010F5C  +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B0h] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
test edi edi +
jl loc_10118F9  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_10118EB  +
cmp dword ptr [ebp-0ACh] 0 +
jz loc_10118F4  +
push esi  +
push offset aSzdriveletter  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
lea eax [esi+98h] +
push eax  +
push offset aSzfreespace  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
lea eax [esi+130h] +
push eax  +
push offset aSzmaxspace  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
lea eax [esi+1C8h] +
push eax  +
push offset aSzfilesystem  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
lea eax [esi+260h] +
push eax  +
push offset aSzmodel  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
lea eax [esi+2F8h] +
push eax  +
push offset aSzpnpdeviceid  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100BDE0  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
lea eax [esi+390h] +
push eax  +
push offset aDwharddriveind  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_100A9C0  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
add esi 394h +
push esi  +
push dword ptr [ebp-0ACh]  +
mov ecx ebx +
call sub_1010FA1  +
mov edi eax +
test edi edi +
jl loc_10118F9  +
mov eax [ebp-0ACh] +
test eax eax +
jz loc_10118A4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0ACh] 0 +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0B8h] +
jb loc_10116CC  +
jmp loc_10118F9  +
mov edi 8007000Eh +
lea ecx [ebp-0C8h] +
call sub_100AD04  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
call sub_101FA8E  +
retn   +
cmp dword ptr [ebp-0ACh] 0 +
jnz loc_1011902  +
mov edi 80004005h +
cmp dword ptr [ebp-0ACh] 0 +
jz loc_101191A  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-0ACh]  +
mov eax [eax] +
call dword ptr [eax+8]  +
and dword ptr [ebp-0ACh] 0 +
mov eax [ebp-0B0h] +
test eax eax +
jz loc_10118C3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0B0h] 0 +
jmp loc_10118C3  +
***
call sub_101FA3A  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov [ebp-0ACh] ecx +
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor eax eax +
push eax  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] eax +
mov [ebp-0B0h] eax +
mov [ebp-0B8h] eax +
call sub_100AE4F  +
mov ecx [ebp-0ACh] +
push edi  +
push offset aDwvendorid  +
push ebx  +
call sub_100A9C0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+4] +
push eax  +
push offset aDwproductid  +
push ebx  +
call sub_100A9C0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+8] +
push eax  +
push offset aSzdescription  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+0A0h] +
push eax  +
push offset aSzlocation  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+138h] +
push eax  +
push offset aSzmatchingdevi  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+1D0h] +
push eax  +
push offset aSzupperfilters  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+268h] +
push eax  +
push offset aSzservice  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+300h] +
push eax  +
push offset aSzlowerfilters  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+398h] +
push eax  +
push offset aSzoemdata  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+430h] +
push eax  +
push offset aSzflags1  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov ecx [ebp-0ACh] +
lea eax [edi+4C8h] +
push eax  +
push offset aSzflags2  +
push ebx  +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov eax [ebx] +
lea ecx [ebp-0B8h] +
push ecx  +
push ebx  +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
and dword ptr [ebp-0B4h] 0 +
cmp dword ptr [ebp-0B8h] 0 +
jbe loc_1011C6C  +
push dword ptr [ebp-0A0h]  +
mov eax [ebx] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B4h]  +
push ebx  +
call dword ptr [eax+10h]  +
lea ecx [ebp-0A8h] +
mov esi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
test esi esi +
jl loc_1011C6C  +
mov eax [ebx] +
lea ecx [ebp-0B0h] +
push ecx  +
push dword ptr [ebp-9Ch]  +
push ebx  +
call dword ptr [eax+14h]  +
mov esi eax +
test esi esi +
jl loc_1011C5E  +
cmp dword ptr [ebp-0B0h] 0 +
jz loc_1011C67  +
mov eax [ebp-9Ch] +
mov ecx offset aDrivers +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1011BAB  +
test dx dx +
jz loc_1011BA7  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1011BAB  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1011B85  +
xor eax eax +
jmp loc_1011BB0  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1011BC8  +
push dword ptr [ebp-0B0h]  +
mov ecx [ebp-0ACh] +
push edi  +
call sub_10111CB  +
jmp loc_1011C20  +
push 584h  +
call sub_100AAF5  +
pop ecx  +
mov [ebp-0BCh] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1011BEC  +
mov ecx eax +
call sub_1010EB8  +
mov esi eax +
jmp loc_1011BEE  +
xor esi esi +
mov byte ptr [ebp-4] 0 +
mov [ebp-0BCh] esi +
test esi esi +
jz loc_1011C57  +
lea eax [ebp-0BCh] +
push eax  +
lea ecx [edi+570h] +
call sub_1010F5C  +
push dword ptr [ebp-0B0h]  +
mov ecx [ebp-0ACh] +
push esi  +
call sub_1011938  +
mov esi eax +
test esi esi +
jl loc_1011C6C  +
mov eax [ebp-0B0h] +
test eax eax +
jz loc_1011C3D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0B0h] 0 +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0B8h] +
jb loc_1011B15  +
jmp loc_1011C6C  +
mov esi 8007000Eh +
jmp loc_1011C6C  +
cmp dword ptr [ebp-0B0h] 0 +
jnz loc_1011C75  +
mov esi 80004005h +
cmp dword ptr [ebp-0B0h] 0 +
jz loc_1011C88  +
mov eax [ebp-0B0h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0B0h] 0 +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn 8  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_1011D11  +
cmp [esi+4] edi +
jz loc_1011D11  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100ACDA  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetsystemdevic  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_1011D05  +
mov ecx esi +
call sub_1011382  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100AD04  +
mov eax ebx +
jmp loc_1011D16  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_1011D88  +
cmp [esi+4] edi +
jz loc_1011D88  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100ACDA  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetlogicaldisk  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_1011D7C  +
mov ecx esi +
call sub_1011613  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100AD04  +
mov eax ebx +
jmp loc_1011D8D  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
call sub_101FA3A  +
mov edi ecx +
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor ebx ebx +
push ebx  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
mov [ebp-0ACh] ebx +
mov [ebp-0B0h] ebx +
mov [ebp-0B4h] ebx +
mov [ebp-0BCh] ebx +
call sub_100AE4F  +
mov [ebp-0CCh] ebx +
mov [ebp-0C8h] ebx +
push edi  +
lea ecx [ebp-0D0h] +
mov byte ptr [ebp-4] 1 +
call sub_100AC82  +
cmp [edi+20h] ebx +
jz loc_1011E0C  +
mov ecx edi +
call sub_10108E5  +
push 210h  +
call sub_100AAF5  +
pop ecx  +
mov [ebp-0C4h] eax +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1011E2E  +
mov ecx eax +
call sub_1010E37  +
jmp loc_1011E30  +
xor eax eax +
mov byte ptr [ebp-4] 1 +
mov [edi+20h] eax +
cmp eax ebx +
jnz loc_1011E66  +
lea ecx [ebp-0D0h] +
call sub_100ACAC  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax 8007000Eh +
call sub_101FA8E  +
retn   +
mov eax [edi+8] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push offset aDxdiag_directi  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1012403  +
cmp [ebp-0B0h] ebx +
jz loc_1012403  +
push dword ptr [edi+20h]  +
mov ecx edi +
push offset aBpollflags  +
push dword ptr [ebp-0B0h]  +
call sub_100AA58  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [edi+20h] +
add eax 4 +
push eax  +
push offset aSzinputnoteslo  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100BDE0  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [edi+20h] +
add eax 9Ch +
push eax  +
push offset aSzinputnotesen  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100BDE0  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [edi+20h] +
add eax 134h +
push eax  +
push offset aSzreghelptext  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100BDE0  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0B0h] +
cmp eax ebx +
jz loc_1011F31  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B0h] ebx +
mov eax [edi+8] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push offset aDxdiag_direc_2  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0BCh] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov [ebp-0B8h] ebx +
cmp [ebp-0BCh] ebx +
jbe loc_10121B8  +
push 27Ch  +
call sub_100AAF5  +
pop ecx  +
test eax eax +
jz loc_1011F99  +
mov ecx eax +
call sub_100CA01  +
mov ebx eax +
jmp loc_1011F9B  +
xor ebx ebx +
mov [ebp-0C0h] ebx +
test ebx ebx +
jz loc_1011E3B  +
mov ecx [edi+20h] +
lea eax [ebp-0C0h] +
push eax  +
add ecx 1FCh +
call sub_1010F5C  +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B8h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov esi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
test esi esi +
jl loc_1012244  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0B0h] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jl loc_1012236  +
cmp dword ptr [ebp-0B0h] 0 +
jz loc_101223F  +
push ebx  +
push offset aSzinstancename  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+98h] +
push eax  +
push offset aBattached  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100AA58  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+9Ch] +
push eax  +
push offset aDwjoystickid  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100A9C0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+0A0h] +
push eax  +
push offset aDwvendorid  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100A9C0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+0A4h] +
push eax  +
push offset aDwproductid  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100A9C0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+0A8h] +
push eax  +
push offset aDwdevtype  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100A9C0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+0ACh] +
push eax  +
push offset aSzffdrivername  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+144h] +
push eax  +
push offset aSzffdriverdate  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
lea eax [ebx+1DCh] +
push eax  +
push offset aSzffdriververs  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100BDE0  +
mov esi eax +
test esi esi +
jl loc_1012244  +
add ebx 274h +
push ebx  +
push offset aLffdriversize  +
push dword ptr [ebp-0B0h]  +
mov ecx edi +
call sub_100AA11  +
mov esi eax +
test esi esi +
jl loc_1012244  +
mov eax [ebp-0B0h] +
test eax eax +
jz loc_101219E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0B0h] 0 +
inc dword ptr [ebp-0B8h]  +
mov eax [ebp-0B8h] +
cmp eax [ebp-0BCh] +
jb loc_1011F7F  +
xor ebx ebx +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_10121CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
mov eax [edi+8] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push offset aDxdiag_direc_3  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0BCh] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov [ebp-0B8h] ebx +
cmp [ebp-0BCh] ebx +
jbe loc_1012371  +
push 584h  +
call sub_100AAF5  +
pop ecx  +
mov [ebp-0C4h] eax +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_1012291  +
mov ecx eax +
call sub_1010EB8  +
jmp loc_1012293  +
cmp dword ptr [ebp-0B0h] 0 +
jnz loc_1012244  +
mov esi 80004005h +
xor ebx ebx +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_101225C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
mov eax [ebp-0B4h] +
cmp eax ebx +
jz loc_1012272  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B4h] ebx +
mov eax [ebp-0B0h] +
cmp eax ebx +
jz loc_101265D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B0h] ebx +
jmp loc_101265D  +
xor eax eax +
mov [ebp-0C0h] eax +
mov byte ptr [ebp-4] 1 +
mov [ebp-0C4h] eax +
cmp eax ebx +
jz loc_1011E3B  +
mov ecx [edi+20h] +
lea eax [ebp-0C4h] +
push eax  +
add ecx 1CCh +
call sub_1010F5C  +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B8h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov esi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0B4h] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_10123F7  +
cmp [ebp-0B4h] ebx +
jz loc_1012403  +
push dword ptr [ebp-0B4h]  +
mov ecx edi +
push dword ptr [ebp-0C0h]  +
call sub_1011938  +
mov eax [ebp-0B4h] +
cmp eax ebx +
jz loc_1012359  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B4h] ebx +
inc dword ptr [ebp-0B8h]  +
mov eax [ebp-0B8h] +
cmp eax [ebp-0BCh] +
jb loc_1012214  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_1012387  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
mov eax [edi+8] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push offset aDxdiag_direc_4  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0BCh] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov [ebp-0B8h] ebx +
cmp [ebp-0BCh] ebx +
jbe loc_10124ED  +
push 584h  +
call sub_100AAF5  +
pop ecx  +
mov [ebp-0C4h] eax +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_101240D  +
mov ecx eax +
call sub_1010EB8  +
jmp loc_101240F  +
cmp [ebp-0B4h] ebx +
jnz loc_1012246  +
mov esi 80004005h +
jmp loc_1012246  +
xor eax eax +
mov [ebp-0C0h] eax +
mov byte ptr [ebp-4] 1 +
mov [ebp-0C4h] eax +
cmp eax ebx +
jz loc_1011E3B  +
mov ecx [edi+20h] +
lea eax [ebp-0C4h] +
push eax  +
add ecx 1DCh +
call sub_1010F5C  +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B8h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov esi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0B4h] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_10123F7  +
cmp [ebp-0B4h] ebx +
jz loc_1012403  +
push dword ptr [ebp-0B4h]  +
mov ecx edi +
push dword ptr [ebp-0C0h]  +
call sub_1011938  +
mov eax [ebp-0B4h] +
cmp eax ebx +
jz loc_10124D5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B4h] ebx +
inc dword ptr [ebp-0B8h]  +
mov eax [ebp-0B8h] +
cmp eax [ebp-0BCh] +
jb loc_10123D5  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_1012503  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
mov eax [edi+8] +
mov ecx [eax] +
lea edx [ebp-0ACh] +
push edx  +
push offset aDxdiag_direc_5  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0BCh] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1012246  +
mov [ebp-0B8h] ebx +
cmp [ebp-0BCh] ebx +
jbe loc_1012246  +
push 584h  +
call sub_100AAF5  +
pop ecx  +
mov [ebp-0C4h] eax +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_1012573  +
mov ecx eax +
call sub_1010EB8  +
jmp loc_1012575  +
xor eax eax +
mov [ebp-0C0h] eax +
mov byte ptr [ebp-4] 1 +
mov [ebp-0C4h] eax +
cmp eax ebx +
jz loc_1012658  +
mov ecx [edi+20h] +
lea eax [ebp-0C4h] +
push eax  +
add ecx 1ECh +
call sub_1010F5C  +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0ACh] +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0B8h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
lea ecx [ebp-0A8h] +
mov esi eax +
mov byte ptr [ebp-94h] 0 +
call sub_100C1B2  +
cmp esi ebx +
jl loc_1012246  +
mov eax [ebp-0ACh] +
mov ecx [eax] +
lea edx [ebp-0B4h] +
push edx  +
push dword ptr [ebp-9Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_10123F7  +
cmp [ebp-0B4h] ebx +
jz loc_1012403  +
push dword ptr [ebp-0B4h]  +
mov ecx edi +
push dword ptr [ebp-0C0h]  +
call sub_1011938  +
mov eax [ebp-0B4h] +
cmp eax ebx +
jz loc_101263B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0B4h] ebx +
inc dword ptr [ebp-0B8h]  +
mov eax [ebp-0B8h] +
cmp eax [ebp-0BCh] +
jb loc_1012551  +
jmp loc_1012246  +
mov esi 8007000Eh +
lea ecx [ebp-0D0h] +
call sub_100ACAC  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
jmp loc_1011E60  +
***
call sub_101F9C7  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jz loc_10126EE  +
cmp [esi+4] edi +
jz loc_10126EE  +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push esi  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100AC82  +
push 3  +
pop eax  +
mov [ebp-28h] ax +
mov eax [ebp+8] +
lea edx [ebp-28h] +
push edx  +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov ecx [eax] +
push offset aGetinputinfo  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_10126E2  +
mov ecx esi +
call sub_1011D9A  +
mov ebx eax +
lea ecx [ebp-18h] +
call sub_100ACAC  +
mov eax ebx +
jmp loc_10126F3  +
mov eax 80070057h +
call sub_101FA75  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+10h] +
xor ebx ebx +
cmp esi ebx +
jz loc_1012770  +
cmp dword ptr [esi+4] 100h +
jnz loc_1012770  +
cmp dword ptr [esi+8] 9 +
jnz loc_1012770  +
push edi  +
mov edi ds:GetKeyState +
push 11h  +
call edi  +
test ax ax +
jge loc_101276F  +
push hWnd  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_1012766  +
push 10h  +
call edi  +
push ebx  +
test ax ax +
jge loc_1012750  +
push 140Ch  +
jmp loc_1012755  +
push 140Bh  +
push 111h  +
push hWnd  +
call ds:PostMessageW  +
mov [esi+4] ebx +
mov [esi+0Ch] ebx +
mov [esi+8] ebx +
pop edi  +
push esi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword_1037588  +
call ds:CallNextHookEx  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+Msg] +
sub eax 4Eh +
jz loc_10127AE  +
sub eax 0C2h +
jz loc_10127AA  +
dec eax  +
jz loc_10127AE  +
sub eax 3 +
jz loc_10127AE  +
xor eax eax +
jmp loc_10127C6  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push hWnd  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
push 9Ch  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call sub_101EDB0  +
xor eax eax +
add esp 0Ch +
inc eax  +
mov [ebp+var_94] ax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 447h  +
push 1390h  +
push hDlg  +
mov [ebp+lParam] 9Ch +
mov [ebp+var_98] 24h +
mov [ebp+var_88] 168h +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
push 9Ch  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call sub_101EDB0  +
add esp 0Ch +
xor eax eax +
mov [ebp+var_94] ax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 447h  +
push 1390h  +
push hDlg  +
mov [ebp+lParam] 9Ch +
mov [ebp+var_98] 20h +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+dwDisposition] +
push eax  +
xor esi esi +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 3  +
push esi  +
push esi  +
push esi  +
push [ebp+lpSubKey]  +
mov [ebp+hKey] esi +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1012937  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push [ebp+lpValueName]  +
mov [ebp+Type] esi +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] esi +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1012910  +
mov eax [ebp+arg_8] +
cmp eax dword ptr [ebp+Data] +
jbe loc_101292E  +
push 4  +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
call ds:RegFlushKey  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 3  +
xor esi esi +
push esi  +
push [ebp+lpSubKey]  +
mov [ebp+hKey] esi +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10129AD  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push [ebp+lpValueName]  +
mov [ebp+Type] esi +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] esi +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10129A4  +
mov eax [ebp+arg_8] +
cmp eax dword ptr [ebp+Data] +
jb loc_10129A4  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
mov esi eax +
xor ebx ebx +
call ds:EnterCriticalSection  +
cmp esi 6 +
jnz loc_10129EE  +
mov eax dword_10375B4 +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+var_4] ecx +
jmp loc_10129E8  +
mov eax [eax+4] +
inc ebx  +
test eax eax +
jnz loc_10129E4  +
jmp loc_1012A34  +
mov ecx dword_10375B4 +
xor edx edx +
mov [ebp+var_4] 1 +
mov eax ecx +
cmp dword_10375D0 esi +
jz loc_1012A0A  +
xor ebx ebx +
inc ebx  +
test ecx ecx +
jz loc_1012A34  +
cmp [eax] esi +
jz loc_1012A1D  +
mov edx eax +
mov eax [eax+4] +
test eax eax +
jnz loc_1012A0E  +
jmp loc_1012A34  +
test edx edx +
jz loc_1012A2F  +
mov esi [eax+4] +
mov [edx+4] esi +
mov [eax+4] ecx +
mov dword_10375B4 eax +
inc ebx  +
and [ebp+var_4] 0 +
push edi  +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1012A44  +
mov [eax] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor ebx ebx +
push ebx  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1012BA2  +
push esi  +
mov esi ds:RegQueryValueExW +
push edi  +
push 4  +
pop edi  +
lea eax [ebp+cbData] +
push eax  +
push offset Data  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aNeverSkip  +
push [ebp+hKey]  +
mov [ebp+Type] ebx +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_1037828  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressScan  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_1037838  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressSkipStag  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_103782C  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressPageChan  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_1037834  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressSaveFile  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_1037830  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressCancelGa  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_10360C8  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressPageCh_0  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
mov [ebp+cbData] edi +
push offset dword_10360D0  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressCancel_0  +
push [ebp+hKey]  +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_10360CC  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressSaveFi_0  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_10360C4  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aStressSkipSt_0  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call esi  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
test eax eax +
jz loc_1012BC7  +
push edi  +
lea edi [esi+eax] +
cmp edi [edx+10h] +
pop edi  +
jbe loc_1012BCC  +
mov eax [edx+10h] +
sub eax esi +
mov edx [edx+0Ch] +
push eax  +
lea eax [edx+esi*2] +
push eax  +
call sub_100B0AD  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1012BF9  +
cmp ecx 7FFFFFFFh +
jbe loc_1012BFE  +
mov eax 80070057h +
test eax eax +
jl loc_1012C39  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call sub_101FC55  +
add esp 10h +
test eax eax +
jl loc_1012C29  +
cmp eax esi +
ja loc_1012C29  +
jnz loc_1012C34  +
jmp loc_1012C2E  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1012C58  +
cmp ecx 7FFFFFFFh +
jbe loc_1012C5D  +
mov eax 80070057h +
test eax eax +
jl loc_1012C99  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call sub_101FB5A  +
add esp 10h +
test eax eax +
jl loc_1012C8C  +
cmp eax esi +
ja loc_1012C8C  +
jnz loc_1012C94  +
mov [esi+edi] bl +
jmp loc_1012C94  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov edx [ecx+8] +
push eax  +
push 0  +
push 1132h  +
push [ebp+hWnd]  +
mov [eax+1Ch] edx +
mov ecx [ecx+0Ch] +
mov [eax+18h] ecx +
call ds:SendMessageW  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 2  +
push esi  +
push esi  +
push esi  +
push offset SubKey  +
push 80000001h  +
mov [ebp+hKey] esi +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1012D24  +
mov eax [edi+10h] +
lea eax [eax+eax+2] +
push eax  +
push dword ptr [edi+0Ch]  +
push 1  +
push esi  +
push offset aTxtpath  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jnz loc_1012D3E  +
xor eax eax +
jmp loc_1012D6D  +
push esi  +
mov esi [ebp+arg_4] +
lea eax [ebp+arg_4] +
push eax  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+arg_4] esi +
call sub_100B238  +
test eax eax +
jge loc_1012D59  +
mov [ebp+arg_4] esi +
cmp [ebp+arg_4] esi +
jnb loc_1012D61  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100B0AD  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_1004B90 +
call sub_100B17D  +
push [ebp+lpString]  +
mov ecx esi +
call sub_100BC31  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_1004B90 +
call sub_100B17D  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_1018C97  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_8] ebx +
mov esi eax +
cmp [eax] bx +
jz loc_1013100  +
push edi  +
cmp word ptr [esi] 25h +
jz loc_1012E01  +
inc [ebp+var_8]  +
jmp loc_10130F4  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
mov [ebp+arg_0] esi +
cmp ax 25h +
jz loc_1012DF9  +
mov [ebp+var_4] ebx +
cmp ax bx +
jz loc_1012E62  +
cmp ax 23h +
jnz loc_1012E23  +
add [ebp+var_8] 2 +
jmp loc_1012E50  +
cmp ax 2Ah +
jnz loc_1012E38  +
add [ebp+arg_4] 4 +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov [ebp+var_4] eax +
jmp loc_1012E50  +
cmp ax 2Dh +
jz loc_1012E50  +
cmp ax 2Bh +
jz loc_1012E50  +
cmp ax 30h +
jz loc_1012E50  +
cmp ax 20h +
jnz loc_1012E5D  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
mov [ebp+arg_0] esi +
cmp ax bx +
jnz loc_1012E17  +
cmp [ebp+var_4] ebx +
jnz loc_1012E86  +
push esi  +
call sub_101ECC7  +
pop ecx  +
mov [ebp+var_4] eax +
jmp loc_1012E7E  +
push eax  +
call sub_101FDAE  +
pop ecx  +
test eax eax +
jz loc_1012E86  +
inc esi  +
inc esi  +
mov [ebp+arg_0] esi +
movzx eax word ptr [esi] +
cmp ax bx +
jnz loc_1012E6E  +
xor edi edi +
cmp word ptr [esi] 2Eh +
mov [ebp+var_10] edi +
jnz loc_1012ED6  +
inc esi  +
inc esi  +
cmp word ptr [esi] 2Ah +
mov [ebp+arg_0] esi +
jnz loc_1012EB0  +
add [ebp+arg_4] 4 +
mov eax [ebp+arg_4] +
mov edi [eax-4] +
inc esi  +
inc esi  +
mov [ebp+var_10] edi +
mov [ebp+arg_0] esi +
jmp loc_1012ED6  +
push esi  +
call sub_101ECC7  +
mov edi eax +
pop ecx  +
mov [ebp+var_10] edi +
jmp loc_1012ECE  +
push eax  +
call sub_101FDAE  +
pop ecx  +
test eax eax +
jz loc_1012ED6  +
inc esi  +
inc esi  +
mov [ebp+arg_0] esi +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1012EBE  +
and [ebp+var_C] 0 +
push 3  +
push offset aI64  +
push esi  +
call sub_101FC77  +
add esp 0Ch +
test eax eax +
jnz loc_1012EFA  +
add esi 6 +
mov [ebp+var_C] 40000h +
jmp loc_1012F27  +
movzx eax word ptr [esi] +
sub eax 46h +
jz loc_1012F25  +
sub eax 6 +
jz loc_1012F25  +
dec eax  +
dec eax  +
jz loc_1012F25  +
sub eax 1Ah +
jz loc_1012F1E  +
sub eax 4 +
jnz loc_1012F2A  +
mov [ebp+var_C] 20000h +
jmp loc_1012F25  +
mov [ebp+var_C] 10000h +
inc esi  +
inc esi  +
mov [ebp+arg_0] esi +
movzx eax word ptr [esi] +
or eax [ebp+var_C] +
mov ecx 10063h +
cmp eax ecx +
jg loc_101300D  +
jz loc_1013004  +
sub eax 43h +
jz loc_1013004  +
push 10h  +
pop ecx  +
sub eax ecx +
jz loc_1012FE7  +
sub eax ecx +
jz loc_1013004  +
sub eax ecx +
jz loc_1012FBE  +
sub eax 0FFD0h +
jz loc_1013004  +
sub eax ecx +
jz loc_101304B  +
movzx eax word ptr [esi] +
cmp eax 69h +
jg loc_1013107  +
jz loc_101311C  +
sub eax 47h +
jz loc_1012FB0  +
sub eax 11h +
jz loc_101311C  +
sub eax 0Ch +
jz loc_101311C  +
dec eax  +
jz loc_1012FB0  +
dec eax  +
jz loc_101308A  +
dec eax  +
jnz loc_10130EF  +
add [ebp+arg_4] 8 +
mov ebx 80h +
jmp loc_1013132  +
add [ebp+arg_4] 4 +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
test eax eax +
jnz loc_1012FD4  +
push 6  +
pop ebx  +
jmp loc_1013076  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1012FD7  +
sub eax edx +
sar eax 1 +
jmp loc_1013064  +
add [ebp+arg_4] 4 +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
test eax eax +
jz loc_1012FCC  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1012FF8  +
jmp loc_1012FE1  +
add [ebp+arg_4] 4 +
push 2  +
pop ebx  +
jmp loc_1013076  +
sub eax 10073h +
jz loc_101304B  +
sub eax 0FFD0h +
jz loc_1013004  +
sub eax 10h +
jz loc_101302E  +
sub eax 10h +
jz loc_1013004  +
sub eax 10h +
jnz loc_1012F76  +
add [ebp+arg_4] 4 +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
test eax eax +
jz loc_1012FCC  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101303F  +
jmp loc_1012FE1  +
add [ebp+arg_4] 4 +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
test eax eax +
jz loc_1012FCC  +
push eax  +
call ds:lstrlenA  +
mov ebx eax +
cmp ebx 1 +
jge loc_101306E  +
xor ebx ebx +
inc ebx  +
test ebx ebx +
jz loc_1012F76  +
test edi edi +
jz loc_1013080  +
cmp ebx edi +
jl loc_1013080  +
mov ebx edi +
cmp ebx [ebp+var_4] +
jg loc_10130EF  +
mov ebx [ebp+var_4] +
jmp loc_10130EF  +
lea eax [edi+13Eh] +
mov edi [ebp+var_4] +
cmp edi eax +
jg loc_1013099  +
mov edi eax +
push edi  +
call loc_101E6B1  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10130EC  +
add [ebp+arg_4] 8 +
mov eax [ebp+arg_4] +
fld  qword ptr [eax-8] +
mov eax [ebp+var_10] +
push ecx  +
push ecx  +
fstp  [esp+24h+var_24] +
add eax 6 +
push eax  +
push [ebp+var_4]  +
push offset a_F  +
push edi  +
push esi  +
call sub_1012C42  +
add esp 1Ch +
test eax eax +
jge loc_10130D5  +
mov byte ptr [esi] 0 +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10130DA  +
sub eax edx +
push esi  +
mov ebx eax +
call sub_101E6A1  +
pop ecx  +
mov esi [ebp+arg_0] +
add [ebp+var_8] ebx +
xor ebx ebx +
inc esi  +
inc esi  +
cmp [esi] bx +
jnz loc_1012DF3  +
pop edi  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
leave   +
retn   +
sub eax 6Eh +
jz loc_101313F  +
dec eax  +
jz loc_101311C  +
dec eax  +
jz loc_101312B  +
sub eax 5 +
jz loc_101311C  +
sub eax 3 +
jnz loc_10130EF  +
test [ebp+var_C] 40000h +
jz loc_101312B  +
add [ebp+arg_4] 8 +
jmp loc_101312F  +
add [ebp+arg_4] 4 +
push 20h  +
pop ebx  +
mov eax [ebp+var_4] +
add eax edi +
cmp eax ebx +
jl loc_10130EF  +
mov ebx eax +
jmp loc_10130EF  +
add [ebp+arg_4] 4 +
jmp loc_10130EF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_100B05E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jnz loc_101318D  +
mov eax [edi+0Ch] +
xor ecx ecx +
mov [eax] cx +
and [edi+10h] ecx +
xor eax eax +
jmp loc_10131BC  +
push esi  +
mov esi [ebp+arg_4] +
lea eax [ebp+arg_4] +
push eax  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+arg_4] esi +
call sub_100B238  +
test eax eax +
jge loc_10131A8  +
mov [ebp+arg_4] esi +
cmp [ebp+arg_4] esi +
jnb loc_10131B0  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100B05E  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
push 40h  +
lea eax [esi+18h] +
push eax  +
call sub_1012D77  +
mov dword ptr [esi] offset off_1004B94 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 40h  +
lea eax [esi+18h] +
push eax  +
call sub_1012DA6  +
mov dword ptr [esi] offset off_1004B94 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_101FA3A  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
mov esi offset unk_10375F8 +
xor edi edi +
push 4  +
mov ecx esi +
mov [ebp-4] edi +
call sub_1010694  +
mov [ebp-148h] edi +
mov [ebp-144h] edi +
push esi  +
lea ecx [ebp-14Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100AB7A  +
cmp eax edi +
jnz loc_1013281  +
lea ecx [ebp-14Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100ABA4  +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
jmp loc_1013529  +
mov ebx eax +
jmp loc_101328E  +
mov ebx [ebx+22E0h] +
dec dword ptr [ebp+8]  +
cmp [ebp+8] edi +
jg loc_1013285  +
lea ecx [ebp-140h] +
call sub_100C141  +
push 104h  +
lea eax [ebp-140h] +
push eax  +
push 25Bh  +
push edi  +
mov byte ptr [ebp-4] 2 +
call sub_10184FF  +
mov esi ds:GetDlgItem +
add esp 10h +
push dword ptr [ebx+0A4h]  +
push 1397h  +
push hDlg  +
call esi  +
mov edi ds:SetWindowTextW +
push eax  +
call edi  +
cmp dword ptr [ebx+270h] 0 +
jbe loc_10132EF  +
push dword ptr [ebx+26Ch]  +
jmp loc_10132F5  +
push dword ptr [ebp-134h]  +
push 1398h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
cmp dword ptr [ebx+308h] 0 +
jbe loc_1013316  +
push dword ptr [ebx+304h]  +
jmp loc_101331C  +
push dword ptr [ebp-134h]  +
push 1399h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
cmp dword ptr [ebx+3A0h] 0 +
jbe loc_101333D  +
push dword ptr [ebx+39Ch]  +
jmp loc_1013343  +
push dword ptr [ebp-134h]  +
push 139Ah  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+4CCh]  +
push 139Bh  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+5FCh]  +
push 139Eh  +
push hDlg  +
call esi  +
push eax  +
call edi  +
mov eax [ebx+73Ch] +
test eax eax +
jz loc_101339C  +
push dword ptr [eax+0Ch]  +
push 13E4h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+87Ch]  +
push 13B2h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+9ACh]  +
push 13B1h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+0CA4h]  +
push 1423h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
xor eax eax +
push 104h  +
lea ecx [ebp-0A8h] +
push ecx  +
cmp [ebx+1338h] eax +
jz loc_101340A  +
cmp [ebx+1334h] eax +
jz loc_1013403  +
push 259h  +
jmp loc_101340F  +
push 25Ah  +
jmp loc_101340F  +
push 25Bh  +
push eax  +
call sub_10184FF  +
add esp 10h +
push dword ptr [ebp-9Ch]  +
push 13C4h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+13E4h]  +
push 1417h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+18CCh]  +
push 13A0h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+19FCh]  +
push 13A1h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+1B2Ch]  +
push 1401h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+10D4h]  +
push 1425h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push 0FFFFFFFFh  +
push 0  +
push 0B1h  +
push 1390h  +
push hDlg  +
call esi  +
mov edi ds:SendMessageW +
push eax  +
call edi  +
push offset dword_1004768  +
push 0  +
push 0C2h  +
push 1390h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
call sub_10127CF  +
push dword ptr [ebx+1C5Ch]  +
push 0  +
push 0C2h  +
push 1390h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
call sub_1012845  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-14Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100ABA4  +
mov [ebp-0A8h] esi +
lea ecx [ebp-0A8h] +
call sub_101889F  +
xor eax eax +
call sub_101FA8E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
lea ecx [ebp+var_9C] +
mov [ebp+var_A4] edi +
mov [ebp+var_A0] eax +
call sub_100C141  +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_10135E9  +
xor esi esi +
lea ecx [ebp+var_9C] +
mov [ebp+var_9C] offset off_1004B94 +
call sub_101889F  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn 8  +
mov eax ebx +
sub eax edi +
sar eax 1 +
push eax  +
push edi  +
lea ecx [ebp+var_9C] +
call sub_1012D2C  +
test eax eax +
jl loc_1013622  +
lea eax [ebp+var_9C] +
cmp [ebp+var_A0] eax +
jz loc_101361D  +
push 0  +
push 0  +
push [ebp+var_A0]  +
mov ecx eax +
call sub_1012BAA  +
test eax eax +
jl loc_1013622  +
mov eax [esi+10h] +
lea edi [ebx+eax*2] +
push dword ptr [esi+0Ch]  +
push edi  +
call sub_101FE49  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_10135A9  +
push edi  +
lea ecx [ebp+var_9C] +
call sub_100BC6C  +
test eax eax +
jl loc_1013622  +
push [ebp+lpString]  +
mov ecx [ebp+var_A4] +
call sub_101314A  +
jmp loc_1013622  +
mov eax 80070057h +
mov esi eax +
jmp loc_1013581  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_1012DD5  +
mov esi [ebp+arg_0] +
pop ecx  +
pop ecx  +
push 1  +
inc eax  +
push eax  +
mov ecx esi +
call sub_100AE4F  +
test eax eax +
jl loc_1013686  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
push edi  +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
push eax  +
push ecx  +
call sub_1012BE3  +
mov edi eax +
test edi edi +
jl loc_1013678  +
mov ecx esi +
call sub_100C1B2  +
jmp loc_1013683  +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [eax] cx +
and [esi+10h] ecx +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ecx +
test ebx ebx +
jnz loc_10136AB  +
mov eax [edi+0Ch] +
xor ecx ecx +
mov [eax] cx +
and [edi+10h] ecx +
jmp loc_10136E5  +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10136D2  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
push ebx  +
mov [ebp+arg_0] esi +
call sub_100B238  +
test eax eax +
jge loc_10136C8  +
mov [ebp+arg_0] esi +
cmp [ebp+arg_0] esi +
jnb loc_10136DB  +
mov esi [ebp+arg_0] +
jmp loc_10136DB  +
push ebx  +
call ds:lstrlenW  +
mov esi eax +
push esi  +
push ebx  +
mov ecx edi +
call sub_1013170  +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_101FA3A  +
lea ecx [ebp-1D8h] +
call sub_100C141  +
xor edi edi +
lea ecx [ebp-0A8h] +
mov [ebp-4] edi +
call sub_100C141  +
lea ecx [ebp-3A0h] +
call sub_100C141  +
lea ecx [ebp-140h] +
call sub_100C141  +
lea ecx [ebp-270h] +
call sub_100C141  +
lea ecx [ebp-308h] +
call sub_100C141  +
mov esi 104h +
push esi  +
lea eax [ebp-1D8h] +
push eax  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 5 +
push edi  +
call sub_10184FF  +
push esi  +
lea eax [ebp-140h] +
push eax  +
push 191h  +
push edi  +
call sub_10184FF  +
push esi  +
lea eax [ebp-270h] +
push eax  +
push 192h  +
push edi  +
call sub_10184FF  +
push dword ptr [ebp-1CCh]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
add esp 3Ch +
cmp dword_103607C edi +
jz loc_10137C6  +
push edi  +
push dword ptr [ebp-264h]  +
push dword ptr [ebp-9Ch]  +
push hWnd  +
call ds:MessageBoxW  +
jmp loc_10137D2  +
push dword ptr [ebp-9Ch]  +
call sub_101FEAF  +
pop ecx  +
mov esi offset off_1004B94 +
lea ecx [ebp-308h] +
mov [ebp-308h] esi +
call sub_101889F  +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-3A0h] +
mov [ebp-3A0h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
mov esi ecx +
lea ecx [ebp-0A8h] +
mov [ebp-14Ch] esi +
call sub_100C141  +
xor edi edi +
lea ecx [ebp-140h] +
mov [ebp-4] edi +
call sub_100C141  +
push edi  +
push edi  +
push 1309h  +
push esi  +
mov esi ds:SendMessageW +
mov byte ptr [ebp-4] 1 +
call esi  +
or dword ptr [ebp-170h] 0FFFFFFFFh +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 320h  +
push edi  +
mov dword ptr [ebp-184h] 3 +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
mov [ebp-178h] eax +
lea eax [ebp-184h] +
push eax  +
push edi  +
mov ebx 133Eh +
push ebx  +
push dword ptr [ebp-14Ch]  +
call esi  +
mov dword ptr [ebp-148h] 1 +
cmp eax 0FFFFFFFFh +
jnz loc_101391B  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax 80004005h +
jmp loc_1013BC5  +
mov [ebp-158h] edi +
mov [ebp-154h] edi +
push offset unk_10375F8  +
lea ecx [ebp-15Ch] +
mov byte ptr [ebp-4] 2 +
call sub_100AB7A  +
mov [ebp-150h] eax +
mov dword_1036084 1 +
jmp loc_10139F8  +
mov eax [ebp-144h] +
cmp eax [ebp-150h] +
jnz loc_1013982  +
cmp [eax+22E0h] edi +
jnz loc_1013982  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 322h  +
push edi  +
call sub_10184FF  +
add esp 10h +
jmp loc_10139B5  +
push 104h  +
lea eax [ebp-140h] +
push eax  +
push 323h  +
push edi  +
call sub_10184FF  +
mov eax dword_1037590 +
inc eax  +
push eax  +
push dword ptr [ebp-134h]  +
lea eax [ebp-0A8h] +
push eax  +
call sub_101362E  +
add esp 1Ch +
mov eax [ebp-9Ch] +
mov [ebp-178h] eax +
lea eax [ebp-184h] +
push eax  +
push dword ptr [ebp-148h]  +
push ebx  +
push dword ptr [ebp-14Ch]  +
call esi  +
inc dword ptr [ebp-148h]  +
cmp eax 0FFFFFFFFh +
jz loc_1013B12  +
mov eax [ebp-144h] +
inc dword_1037590  +
mov eax [eax+22E0h] +
mov [ebp-144h] eax +
cmp eax edi +
jnz loc_1013950  +
mov [ebp-164h] edi +
mov [ebp-160h] edi +
push offset unk_10375F8  +
lea ecx [ebp-168h] +
mov byte ptr [ebp-4] 3 +
call sub_100ABD2  +
mov ecx dword_1036084 +
mov edx dword_1037590 +
add edx ecx +
mov [ebp-150h] eax +
mov dword_1036088 edx +
jmp loc_1013AE9  +
mov eax [ebp-144h] +
cmp eax [ebp-150h] +
jnz loc_1013A77  +
cmp [eax+0DB0h] edi +
jnz loc_1013A77  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 324h  +
push edi  +
call sub_10184FF  +
add esp 10h +
jmp loc_1013AAA  +
push 104h  +
lea eax [ebp-140h] +
push eax  +
push 325h  +
push edi  +
call sub_10184FF  +
mov eax dword_1037594 +
inc eax  +
push eax  +
push dword ptr [ebp-134h]  +
lea eax [ebp-0A8h] +
push eax  +
call sub_101362E  +
add esp 1Ch +
mov eax [ebp-9Ch] +
mov [ebp-178h] eax +
lea eax [ebp-184h] +
push eax  +
push dword ptr [ebp-148h]  +
push ebx  +
push dword ptr [ebp-14Ch]  +
call esi  +
inc dword ptr [ebp-148h]  +
cmp eax 0FFFFFFFFh +
jz loc_1013B03  +
mov eax [ebp-144h] +
inc dword_1037594  +
mov eax [eax+0DB0h] +
mov [ebp-144h] eax +
cmp eax edi +
jnz loc_1013A45  +
mov eax dword_103608C +
cmp eax edi +
jle loc_1013B26  +
inc eax  +
jmp loc_1013B33  +
lea ecx [ebp-168h] +
mov byte ptr [ebp-4] 2 +
call sub_100ABFC  +
lea ecx [ebp-15Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100ABA4  +
jmp loc_10138EA  +
mov eax dword_1037594 +
mov ecx dword_1036088 +
add eax ecx +
mov dword_1036090 eax +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 326h  +
push edi  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
mov [ebp-178h] eax +
lea eax [ebp-184h] +
push eax  +
push dword ptr [ebp-148h]  +
push ebx  +
push dword ptr [ebp-14Ch]  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_1013B7E  +
mov edi 80004005h +
lea ecx [ebp-168h] +
mov byte ptr [ebp-4] 2 +
call sub_100ABFC  +
lea ecx [ebp-15Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100ABA4  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax edi +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
xor edi edi +
mov [ebp-440h] edi +
mov [ebp-43Ch] edi +
push offset unk_10375F8  +
lea ecx [ebp-444h] +
mov [ebp-4] edi +
call sub_100AB22  +
mov ebx eax +
cmp ebx edi +
jz loc_1013FDE  +
lea ecx [ebp-438h] +
call sub_100C141  +
lea ecx [ebp-3A0h] +
call sub_100C141  +
lea ecx [ebp-308h] +
call sub_100C141  +
lea ecx [ebp-270h] +
call sub_100C141  +
lea eax [ebx+414h] +
push eax  +
lea ecx [ebp-0A8h] +
call sub_10131EE  +
mov eax [ebp-9Ch] +
mov byte ptr [ebp-4] 5 +
mov ecx offset aNA +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1013C7D  +
cmp dx di +
jz loc_1013C79  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1013C7D  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1013C57  +
xor eax eax +
jmp loc_1013C82  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
mov esi 104h +
cmp eax edi +
jnz loc_1013CA1  +
push esi  +
lea eax [ebp-0A8h] +
push eax  +
push 25Bh  +
push edi  +
call sub_10184FF  +
add esp 10h +
lea eax [ebx+544h] +
push eax  +
lea ecx [ebp-1D8h] +
call sub_10131EE  +
mov eax [ebp-1CCh] +
mov byte ptr [ebp-4] 6 +
mov ecx offset aNA +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1013CE8  +
cmp dx di +
jz loc_1013CE4  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1013CE8  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1013CC2  +
xor eax eax +
jmp loc_1013CED  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1013D07  +
push esi  +
lea eax [ebp-1D8h] +
push eax  +
push 25Bh  +
push edi  +
call sub_10184FF  +
add esp 10h +
lea eax [ebx+4ACh] +
push eax  +
lea ecx [ebp-140h] +
call sub_10131EE  +
mov eax [ebp-134h] +
mov byte ptr [ebp-4] 7 +
mov ecx offset aNA +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1013D4E  +
cmp dx di +
jz loc_1013D4A  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1013D4E  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1013D28  +
xor eax eax +
jmp loc_1013D53  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1013D6D  +
push esi  +
lea eax [ebp-140h] +
push eax  +
push 25Bh  +
push edi  +
call sub_10184FF  +
add esp 10h +
push esi  +
lea eax [ebp-438h] +
push eax  +
push 384h  +
push edi  +
call sub_10184FF  +
push esi  +
lea eax [ebp-3A0h] +
push eax  +
push 385h  +
push edi  +
call sub_10184FF  +
push esi  +
lea eax [ebp-308h] +
push eax  +
push 387h  +
push edi  +
call sub_10184FF  +
push dword ptr [ebp-394h]  +
mov eax [ebx+258h] +
push dword ptr [ebp-2FCh]  +
push eax  +
push dword ptr [ebp-42Ch]  +
lea eax [ebp-270h] +
push eax  +
call sub_101362E  +
mov esi ds:GetDlgItem +
add esp 44h +
push dword ptr [ebx+0E38h]  +
push 13A6h  +
push hDlg  +
call esi  +
mov edi ds:SetWindowTextW +
push eax  +
call edi  +
push dword ptr [ebx+0AA8h]  +
push 13A7h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+0BD8h]  +
push 13A8h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+0D08h]  +
push 13ACh  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebp-9Ch]  +
push 1420h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebp-134h]  +
push 1421h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebp-1CCh]  +
push 1422h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+388h]  +
push 13A9h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+5E8h]  +
push 13AAh  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+0DA0h]  +
push 13ABh  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebx+848h]  +
push 13ADh  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push dword ptr [ebp-264h]  +
push 13C0h  +
push hDlg  +
call esi  +
push eax  +
call edi  +
push 1415h  +
push hDlg  +
call esi  +
mov esi ds:SendMessageW +
push 6E0000h  +
xor edi edi +
push edi  +
mov ebx eax +
push 401h  +
push ebx  +
call esi  +
xor eax eax +
cmp dword_10360B4 edi +
setnz al  +
push eax  +
push 141Fh  +
push hDlg  +
call ds:CheckDlgButton  +
push edi  +
push wParam  +
push 402h  +
push ebx  +
call esi  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
xor eax eax +
cmp dword_10375B4 eax +
push edi  +
setnz al  +
mov esi eax +
call ds:LeaveCriticalSection  +
neg esi  +
sbb esi esi +
and esi 5 +
push esi  +
push ebx  +
call ds:ShowWindow  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-308h] +
mov [ebp-308h] esi +
call sub_101889F  +
lea ecx [ebp-3A0h] +
mov [ebp-3A0h] esi +
call sub_101889F  +
lea ecx [ebp-438h] +
mov [ebp-438h] esi +
call sub_101889F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-444h] +
call sub_100AB4C  +
xor eax eax +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
mov esi offset unk_10375F8 +
xor ebx ebx +
push 4  +
mov ecx esi +
mov [ebp-4] ebx +
call sub_100F518  +
mov [ebp-278h] ebx +
mov [ebp-274h] ebx +
push esi  +
lea ecx [ebp-27Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100ABD2  +
cmp eax ebx +
jnz loc_1014064  +
lea ecx [ebp-27Ch] +
mov [ebp-4] bl +
call sub_100ABFC  +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
jmp loc_1014389  +
mov edi eax +
jmp loc_1014071  +
mov edi [edi+0DB0h] +
dec dword ptr [ebp+8]  +
cmp [ebp+8] ebx +
jg loc_1014068  +
push dword ptr [edi+308h]  +
mov esi ds:GetDlgItem +
push 13B4h  +
push hDlg  +
call esi  +
mov ebx ds:SetWindowTextW +
push eax  +
call ebx  +
push dword ptr [edi+3A0h]  +
push 13B2h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
xor eax eax +
cmp [edi+3A4h] eax +
jbe loc_10140E4  +
cmp [edi+43Ch] eax +
jbe loc_10140E4  +
mov eax [edi+600h] +
mov ecx [edi+4D0h] +
push eax  +
push ecx  +
lea eax [ebp-0A8h] +
push offset aSS  +
push eax  +
call sub_101362E  +
add esp 10h +
jmp loc_10140F5  +
mov edx [ebp-9Ch] +
xor ecx ecx +
mov [edx] cx +
mov [ebp-98h] eax +
push dword ptr [edi+7C8h]  +
push 1423h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
push dword ptr [ebp-9Ch]  +
push 13B1h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
mov eax [edi+3A4h] +
xor ecx ecx +
cmp eax ecx +
jbe loc_101416F  +
cmp [edi+43Ch] ecx +
jbe loc_101416F  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
cmp [edi+0A2Ch] ecx +
jz loc_101415F  +
cmp [edi+0A28h] ecx +
jz loc_1014158  +
push 259h  +
jmp loc_1014164  +
push 25Ah  +
jmp loc_1014164  +
push 25Bh  +
push ecx  +
call sub_10184FF  +
add esp 10h +
jmp loc_1014180  +
mov edx [ebp-9Ch] +
xor eax eax +
mov [edx] ax +
mov [ebp-98h] ecx +
push dword ptr [ebp-9Ch]  +
push 13C4h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
push dword ptr [edi+990h]  +
push 13E6h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
lea eax [edi+9Ch] +
push eax  +
lea ecx [ebp-140h] +
call sub_10131EE  +
push offset asc_100477C  +
lea ecx [ebp-270h] +
call sub_10131C6  +
push offset asc_1004774  +
lea ecx [ebp-1D8h] +
call sub_10131C6  +
lea eax [ebp-1D8h] +
push eax  +
lea eax [ebp-270h] +
push eax  +
lea ecx [ebp-140h] +
mov byte ptr [ebp-4] 4 +
call sub_1013541  +
test eax eax +
jl loc_1014207  +
push dword ptr [ebp-134h]  +
jmp loc_101420D  +
push dword ptr [edi+0A8h]  +
push 13E5h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
push dword ptr [edi+1D8h]  +
push 13E7h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
push dword ptr [edi+270h]  +
push 13E8h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
push dword ptr [edi+860h]  +
push 13E9h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
push dword ptr [edi+8F8h]  +
push 13EAh  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
mov ecx [ebp-9Ch] +
xor eax eax +
mov [ecx] ax +
mov [ebp-98h] eax +
cmp [edi+30Ch] eax +
jnz loc_1014296  +
cmp [edi+0ACh] eax +
jz loc_10142BF  +
push 104h  +
lea ecx [ebp-0A8h] +
push ecx  +
cmp [edi+0A3Ch] eax +
jz loc_10142B1  +
push 259h  +
jmp loc_10142B6  +
push 25Ah  +
push eax  +
call sub_10184FF  +
add esp 10h +
push dword ptr [ebp-9Ch]  +
push 1418h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
call sub_10127CF  +
push 0FFFFFFFFh  +
push 0  +
push 0B1h  +
push 1390h  +
push hDlg  +
call esi  +
mov ebx ds:SendMessageW +
push eax  +
call ebx  +
push offset dword_1004768  +
push 0  +
push 0C2h  +
push 1390h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
call sub_10127CF  +
push dword ptr [edi+0ABCh]  +
push 0  +
push 0C2h  +
push 1390h  +
push hDlg  +
call esi  +
push eax  +
call ebx  +
call sub_1012845  +
mov esi offset off_1004B94 +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-27Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100ABFC  +
mov [ebp-0A8h] esi +
lea ecx [ebp-0A8h] +
call sub_101889F  +
xor eax eax +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
push 138Bh  +
push hDlg  +
call ds:GetDlgItem  +
lea ecx [ebp-0A8h] +
mov [ebp-0ACh] eax +
call sub_100C141  +
push lParam  +
mov esi ds:SendMessageW +
push 2  +
push 1003h  +
push dword ptr [ebp-0ACh]  +
xor ebx ebx +
mov [ebp-4] ebx +
call esi  +
push 64h  +
pop edi  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 640h  +
push ebx  +
mov dword ptr [ebp-0E4h] 0Fh +
mov [ebp-0E0h] ebx +
mov [ebp-0DCh] edi +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
mov [ebp-0D8h] eax +
lea eax [ebp-0E4h] +
push eax  +
mov [ebp-0D4h] edi +
push ebx  +
mov edi 1061h +
push edi  +
push dword ptr [ebp-0ACh]  +
mov [ebp-0D0h] ebx +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_1014478  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax 80004005h +
call sub_101FA8E  +
retn   +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 642h  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
mov [ebp-0D8h] eax +
xor eax eax +
lea ecx [ebp-0E4h] +
push ecx  +
inc eax  +
push eax  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov [ebp-0D0h] eax +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1014458  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 643h  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
push 2  +
mov [ebp-0D8h] eax +
pop eax  +
lea ecx [ebp-0E4h] +
push ecx  +
push eax  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov [ebp-0D0h] eax +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1014458  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 641h  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
push 3  +
mov [ebp-0D8h] eax +
pop eax  +
lea ecx [ebp-0E4h] +
push ecx  +
push eax  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov [ebp-0D0h] eax +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1014458  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 646h  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
push 4  +
mov [ebp-0D8h] eax +
pop eax  +
lea ecx [ebp-0E4h] +
push ecx  +
push eax  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov [ebp-0D0h] eax +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1014458  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 647h  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
push 5  +
mov [ebp-0D8h] eax +
pop eax  +
lea ecx [ebp-0E4h] +
push ecx  +
push eax  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov [ebp-0D0h] eax +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1014458  +
push 6  +
pop eax  +
lea ecx [ebp-0E4h] +
push ecx  +
push eax  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov dword ptr [ebp-0E0h] 1 +
mov dword ptr [ebp-0D8h] offset ValueName +
mov [ebp-0D0h] eax +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_1014635  +
mov ebx 80004005h +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax ebx +
jmp loc_1014472  +
mov [ebp-0BCh] ebx +
mov [ebp-0B8h] ebx +
push offset unk_10375F8  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 1 +
call sub_100AC82  +
mov [ebp-120h] eax +
cmp eax ebx +
jnz loc_101466F  +
lea ecx [ebp-0C0h] +
mov [ebp-4] bl +
call sub_100ACAC  +
jmp loc_1014619  +
mov ecx [eax+200h] +
mov eax [eax+204h] +
mov [ebp-0B4h] ecx +
cmp ecx eax +
jz loc_101495F  +
mov edi 104Ch +
jmp loc_1014696  +
mov ecx [ebp-0B4h] +
mov eax [ecx] +
push ebx  +
push ebx  +
push 1004h  +
push dword ptr [ebp-0ACh]  +
mov [ebp-0B0h] eax +
mov dword ptr [ebp-11Ch] 9 +
call esi  +
mov [ebp-118h] eax +
mov eax [ebp-0B0h] +
mov dword ptr [ebp-10Ch] 0FFFFh +
mov dword ptr [ebp-104h] 64h +
mov [ebp-110h] ebx +
mov [ebp-114h] ebx +
mov eax [eax+0Ch] +
mov [ebp-108h] eax +
lea eax [ebp-11Ch] +
push eax  +
push ebx  +
push 104Dh  +
push dword ptr [ebp-0ACh]  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_101483F  +
xor eax eax +
inc eax  +
mov [ebp-11Ch] eax +
mov [ebp-114h] eax +
mov eax [ebp-0B0h] +
cmp [eax+98h] ebx +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
jz loc_101473A  +
push 644h  +
jmp loc_101473F  +
push 645h  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
mov [ebp-108h] eax +
lea eax [ebp-11Ch] +
push eax  +
push ebx  +
push edi  +
push dword ptr [ebp-0ACh]  +
call esi  +
test eax eax +
jz loc_101483F  +
mov ecx [ebp-0B0h] +
mov al [ecx+0A8h] +
cmp al 12h +
jz loc_101479D  +
cmp al 13h +
jz loc_101479D  +
push dword ptr [ecx+9Ch]  +
lea eax [ebp-0A8h] +
push offset aD  +
push eax  +
call sub_101362E  +
add esp 0Ch +
jmp loc_10147B7  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 25Bh  +
push ebx  +
call sub_10184FF  +
add esp 10h +
mov eax [ebp-9Ch] +
mov [ebp-108h] eax +
lea eax [ebp-11Ch] +
push eax  +
push ebx  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov dword ptr [ebp-114h] 2 +
call esi  +
test eax eax +
jz loc_101483F  +
mov ecx [ebp-0B0h] +
mov eax [ecx+0A0h] +
cmp eax ebx +
jnz loc_1014852  +
cmp [ecx+0A4h] ebx +
jnz loc_1014852  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 25Bh  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
mov [ebp-108h] eax +
lea eax [ebp-11Ch] +
push eax  +
push ebx  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov dword ptr [ebp-114h] 3 +
call esi  +
test eax eax +
jnz loc_10148B2  +
lea ecx [ebp-0C0h] +
mov [ebp-4] bl +
call sub_100ACAC  +
jmp loc_1014614  +
push eax  +
lea eax [ebp-0A8h] +
push offset a0x04x  +
push eax  +
call sub_101362E  +
mov eax [ebp-9Ch] +
add esp 0Ch +
mov [ebp-108h] eax +
lea eax [ebp-11Ch] +
push eax  +
push ebx  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov dword ptr [ebp-114h] 3 +
call esi  +
test eax eax +
jz loc_101483F  +
mov eax [ebp-0B0h] +
push dword ptr [eax+0A4h]  +
lea eax [ebp-0A8h] +
push offset a0x04x  +
push eax  +
call sub_101362E  +
add esp 0Ch +
mov eax [ebp-9Ch] +
mov [ebp-108h] eax +
lea eax [ebp-11Ch] +
push eax  +
push ebx  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov dword ptr [ebp-114h] 4 +
call esi  +
test eax eax +
jz loc_101483F  +
mov eax [ebp-0B0h] +
cmp [eax+0BCh] ebx +
jbe loc_10148F7  +
mov eax [eax+0B8h] +
jmp loc_1014917  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 25Bh  +
push ebx  +
call sub_10184FF  +
mov eax [ebp-9Ch] +
add esp 10h +
mov [ebp-108h] eax +
lea eax [ebp-11Ch] +
push eax  +
push ebx  +
push edi  +
push dword ptr [ebp-0ACh]  +
mov dword ptr [ebp-114h] 5 +
call esi  +
test eax eax +
jz loc_101483F  +
add dword ptr [ebp-0B4h] 4 +
mov eax [ebp-120h] +
mov ecx [ebp-0B4h] +
cmp ecx [eax+204h] +
jnz loc_1014690  +
push 0FFFEh  +
mov [ebp-0B0h] ebx +
push ebx  +
mov edi 101Eh +
jmp loc_10149E3  +
push dword ptr [ebp-0B0h]  +
push 101Dh  +
push dword ptr [ebp-0ACh]  +
call esi  +
push 0FFFFh  +
push dword ptr [ebp-0B0h]  +
mov [ebp-0B4h] eax +
push edi  +
push dword ptr [ebp-0ACh]  +
call esi  +
push ebx  +
push dword ptr [ebp-0B0h]  +
push 101Dh  +
push dword ptr [ebp-0ACh]  +
call esi  +
cmp eax [ebp-0B4h] +
jge loc_10149D2  +
movzx eax word ptr [ebp-0B4h] +
push eax  +
push dword ptr [ebp-0B0h]  +
push edi  +
push dword ptr [ebp-0ACh]  +
call esi  +
inc dword ptr [ebp-0B0h]  +
push 0FFFEh  +
push dword ptr [ebp-0B0h]  +
push edi  +
push dword ptr [ebp-0ACh]  +
call esi  +
push ebx  +
test eax eax +
jnz loc_1014972  +
mov eax [ebp-0B0h] +
dec eax  +
push eax  +
push 101Ch  +
push dword ptr [ebp-0ACh]  +
call esi  +
jmp loc_101465F  +
***
call sub_101FA3A  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
mov [ebp-154h] eax +
mov eax [ebp+10h] +
mov [ebp-144h] eax +
mov eax [ebp+14h] +
lea ecx [ebp-0A8h] +
mov [ebp-158h] esi +
mov [ebp-148h] eax +
call sub_100C141  +
xor ebx ebx +
lea ecx [ebp-140h] +
mov [ebp-4] ebx +
call sub_100C141  +
mov eax [esi+4] +
mov byte ptr [ebp-4] 1 +
mov [ebp-150h] eax +
cmp eax [esi+8] +
jz loc_1014D0B  +
mov edi 104h +
jmp loc_1014A81  +
mov eax [ebp-150h] +
push dword ptr [ebp-148h]  +
mov esi [eax] +
push dword ptr [ebp-144h]  +
lea eax [esi+8] +
push eax  +
push dword ptr [ebp-154h]  +
call sub_1012CA0  +
add esp 10h +
mov [ebp-14Ch] eax +
cmp [esi] ebx +
jnz loc_1014AB0  +
cmp [esi+4] ebx +
jz loc_1014AFB  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 649h  +
push ebx  +
call sub_10184FF  +
push dword ptr [esi+4]  +
lea eax [ebp-0A8h] +
push dword ptr [esi]  +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-148h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-144h]  +
push eax  +
push dword ptr [ebp-14Ch]  +
call sub_1012CA0  +
add esp 30h +
cmp [esi+148h] ebx +
jbe loc_1014B4F  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 651h  +
push ebx  +
call sub_10184FF  +
push dword ptr [esi+144h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-148h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-144h]  +
push eax  +
push dword ptr [ebp-14Ch]  +
call sub_1012CA0  +
add esp 2Ch +
cmp [esi+278h] ebx +
jbe loc_1014BA3  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 64Ah  +
push ebx  +
call sub_10184FF  +
push dword ptr [esi+274h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-148h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-144h]  +
push eax  +
push dword ptr [ebp-14Ch]  +
call sub_1012CA0  +
add esp 2Ch +
cmp [esi+1E0h] ebx +
jbe loc_1014BF7  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 64Bh  +
push ebx  +
call sub_10184FF  +
push dword ptr [esi+1DCh]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-148h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-144h]  +
push eax  +
push dword ptr [ebp-14Ch]  +
call sub_1012CA0  +
add esp 2Ch +
cmp [esi+310h] ebx +
jbe loc_1014C4B  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 64Ch  +
push ebx  +
call sub_10184FF  +
push dword ptr [esi+30Ch]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-148h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-144h]  +
push eax  +
push dword ptr [ebp-14Ch]  +
call sub_1012CA0  +
add esp 2Ch +
lea ecx [esi+560h] +
call sub_100ADE2  +
test eax eax +
jz loc_1014CC3  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 64Dh  +
push ebx  +
call sub_10184FF  +
mov ebx [esi+564h] +
add esp 10h +
cmp ebx [esi+568h] +
jz loc_1014CC1  +
mov eax [ebx] +
push dword ptr [eax+3A4h]  +
push dword ptr [eax+0Ch]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-148h]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-144h]  +
push eax  +
push dword ptr [ebp-14Ch]  +
call sub_1012CA0  +
add esp 20h +
add ebx 4 +
jmp loc_1014C76  +
xor ebx ebx +
add esi 570h +
mov ecx esi +
call sub_100ADE2  +
test eax eax +
jz loc_1014CEF  +
push dword ptr [ebp-148h]  +
push dword ptr [ebp-144h]  +
push esi  +
push dword ptr [ebp-14Ch]  +
call sub_1014A10  +
add esp 10h +
add dword ptr [ebp-150h] 4 +
mov eax [ebp-158h] +
mov ecx [ebp-150h] +
cmp ecx [eax+8] +
jnz loc_1014A7B  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
push 138Ch  +
push hDlg  +
call ds:GetDlgItem  +
lea ecx [ebp-0A8h] +
mov [ebp-0ACh] eax +
call sub_100C141  +
xor ebx ebx +
push ebx  +
push 64h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
call sub_100AE4F  +
push 30h  +
xor esi esi +
lea eax [ebp-0F0h] +
push ebx  +
inc esi  +
push eax  +
mov [ebp-0B4h] esi +
call sub_101EDB0  +
add esp 0Ch +
mov dword ptr [ebp-0ECh] 0FFFF0002h +
mov [ebp-0E8h] esi +
mov [ebp-0BCh] ebx +
mov [ebp-0B8h] ebx +
push offset unk_10375F8  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 1 +
call sub_100AC82  +
lea ecx [eax+1DCh] +
mov [ebp-0B0h] eax +
call sub_100ADE2  +
mov edi 104h +
mov esi 0FFFF0000h +
test eax eax +
jz loc_1014E41  +
push edi  +
lea eax [ebp-0A8h] +
push eax  +
push 64Eh  +
push ebx  +
mov [ebp-0B4h] ebx +
call sub_10184FF  +
lea eax [ebp-0F0h] +
push eax  +
push dword ptr [ebp-0ACh]  +
lea eax [ebp-0A8h] +
push eax  +
push esi  +
call sub_1012CA0  +
lea ecx [ebp-0F0h] +
push ecx  +
push dword ptr [ebp-0ACh]  +
mov ecx [ebp-0B0h] +
add ecx 1DCh +
push ecx  +
push eax  +
call sub_1014A10  +
add esp 30h +
mov ecx [ebp-0B0h] +
add ecx 1ECh +
call sub_100ADE2  +
test eax eax +
jz loc_1014EAC  +
push edi  +
lea eax [ebp-0A8h] +
push eax  +
push 64Fh  +
push ebx  +
mov [ebp-0B4h] ebx +
call sub_10184FF  +
lea eax [ebp-0F0h] +
push eax  +
push dword ptr [ebp-0ACh]  +
lea eax [ebp-0A8h] +
push eax  +
push esi  +
call sub_1012CA0  +
lea ecx [ebp-0F0h] +
push ecx  +
push dword ptr [ebp-0ACh]  +
mov ecx [ebp-0B0h] +
add ecx 1ECh +
push ecx  +
push eax  +
call sub_1014A10  +
add esp 30h +
mov ecx [ebp-0B0h] +
add ecx 1CCh +
mov [ebp-0B0h] ecx +
call sub_100ADE2  +
test eax eax +
jz loc_1014F16  +
push edi  +
lea eax [ebp-0A8h] +
push eax  +
push 650h  +
push ebx  +
mov [ebp-0B4h] ebx +
call sub_10184FF  +
lea eax [ebp-0F0h] +
push eax  +
push dword ptr [ebp-0ACh]  +
lea eax [ebp-0A8h] +
push eax  +
push esi  +
call sub_1012CA0  +
lea ecx [ebp-0F0h] +
push ecx  +
push dword ptr [ebp-0ACh]  +
push dword ptr [ebp-0B0h]  +
push eax  +
call sub_1014A10  +
add esp 30h +
cmp [ebp-0B4h] ebx +
jz loc_1014F4E  +
push edi  +
lea eax [ebp-0A8h] +
push eax  +
push 25Bh  +
push ebx  +
call sub_10184FF  +
lea eax [ebp-0F0h] +
push eax  +
push dword ptr [ebp-0ACh]  +
lea eax [ebp-0A8h] +
push eax  +
push esi  +
call sub_1012CA0  +
add esp 20h +
lea ecx [ebp-0C0h] +
mov [ebp-4] bl +
call sub_100ACAC  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
xor eax eax +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
mov eax [ebp+8] +
xor edi edi +
mov esi edx +
xor ebx ebx +
inc edi  +
mov [ebp-27Ch] esi +
mov [ebp-284h] ecx +
mov [ebp-274h] ebx +
cmp esi ebx +
jz loc_1014FAF  +
mov [esi] ebx +
cmp dword_1037838 ebx +
jz loc_1014FF2  +
cmp [ebp+10h] edi +
jnz loc_1014FD6  +
cmp dword ptr [ebp+0Ch] 2BCh +
jz loc_1015209  +
cmp dword ptr [ebp+0Ch] 2BDh +
jz loc_1015209  +
call sub_101FF73  +
xor edx edx +
div  dword_10360C4 +
test edx edx +
jnz loc_1015209  +
xor edi edi +
jmp loc_1015209  +
lea ecx [ebp-274h] +
push ecx  +
push edi  +
push ebx  +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1015209  +
lea eax [ebp-288h] +
push eax  +
lea eax [ebp-278h] +
push eax  +
lea eax [ebp-28Ch] +
push eax  +
push ebx  +
push dword ptr [ebp-284h]  +
mov [ebp-28Ch] ebx +
push dword ptr [ebp-274h]  +
mov [ebp-278h] ebx +
mov dword ptr [ebp-288h] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10151FD  +
mov eax [ebp-278h] +
cmp esi ebx +
jz loc_1015061  +
mov [esi] eax +
cmp [ebp+10h] eax +
jb loc_10151FD  +
cmp Data ebx +
jz loc_101507A  +
cmp dword_10360C0 ebx +
jnz loc_1015082  +
cmp dword_1037578 ebx +
jz loc_101508A  +
xor edi edi +
inc edi  +
jmp loc_10151FD  +
cmp dword_103607C ebx +
jnz loc_1015099  +
xor edi edi +
jmp loc_10151FD  +
mov eax hWnd +
cmp eax ebx +
jz loc_1015101  +
cmp hHandle ebx +
jz loc_1015101  +
cmp [ebp+14h] ebx +
jnz loc_1015101  +
mov ecx [ebp+0Ch] +
push ebx  +
push ebx  +
push 8003h  +
push eax  +
mov dword_10375C8 ecx +
call ds:PostMessageW  +
mov eax hObject +
mov [ebp-280h] eax +
mov eax hHandle +
push 0FFFFFFFFh  +
mov [ebp-27Ch] eax +
push ebx  +
lea eax [ebp-280h] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
mov edi eax +
neg edi  +
sbb edi edi +
not edi  +
and edi dword_10375CC +
jmp loc_10151FD  +
lea ecx [ebp-1D8h] +
call sub_100C141  +
lea ecx [ebp-140h] +
mov [ebp-4] ebx +
call sub_100C141  +
lea ecx [ebp-270h] +
call sub_100C141  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
mov esi 104h +
push esi  +
lea eax [ebp-1D8h] +
push eax  +
push 64h  +
push ebx  +
mov byte ptr [ebp-4] 3 +
call sub_10184FF  +
push esi  +
lea eax [ebp-270h] +
push eax  +
push 258h  +
push ebx  +
call sub_10184FF  +
push esi  +
lea eax [ebp-0A8h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call sub_10184FF  +
push dword ptr [ebp-9Ch]  +
lea eax [ebp-140h] +
push dword ptr [ebp-9Ch]  +
push dword ptr [ebp-264h]  +
push eax  +
call sub_101362E  +
add esp 40h +
push esi  +
push dword ptr [ebp-1CCh]  +
push dword ptr [ebp-134h]  +
push hWnd  +
call ds:MessageBoxW  +
cmp eax 6 +
jnz loc_10151AE  +
xor edi edi +
mov esi offset off_1004B94 +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
mov esi [ebp-27Ch] +
push dword ptr [ebp-274h]  +
call ds:RegCloseKey  +
cmp esi ebx +
jz loc_1015213  +
cmp edi ebx +
jz loc_1015213  +
mov [esi] ebx +
mov eax edi +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
mov eax [ebp+0Ch] +
sub eax 12h +
mov esi [ebp+8] +
mov [ebp-1E0h] esi +
jz loc_1015562  +
sub eax 0FEh +
jz loc_1015576  +
dec eax  +
jz loc_101555A  +
dec eax  +
dec eax  +
jnz loc_1015556  +
mov eax [ebp+10h] +
xor ebx ebx +
sub eax ebx +
jz loc_101527B  +
dec eax  +
jnz loc_1015556  +
push ebx  +
push esi  +
call ds:EndDialog  +
jmp loc_1015556  +
lea eax [ebp-1DCh] +
push eax  +
mov eax dword_10375D4 +
mov [ebp-1DCh] ebx +
call sub_10129B5  +
mov edi dword_10375E8 +
sub edi [ebp-1DCh] +
pop ecx  +
dec edi  +
mov [ebp-1E4h] edi +
cmp eax ebx +
jz loc_10152E6  +
push 1415h  +
push esi  +
call ds:GetDlgItem  +
mov ecx dword_10375E8 +
imul ecx ecx +
push ebx  +
push ecx  +
push 402h  +
push eax  +
call ds:SendMessageW  +
push ebx  +
push 64h  +
push 1  +
push esi  +
call ds:SetTimer  +
push ebx  +
push esi  +
call ds:KillTimer  +
jmp loc_1015556  +
mov esi dword_10375D8 +
mov [ebp-1DCh] ebx +
jmp loc_10153A0  +
mov eax [esi] +
sub eax 8003h +
jz loc_1015311  +
sub eax 4 +
jnz loc_1015397  +
mov dword ptr [esi] 8008h +
jmp loc_1015317  +
mov dword ptr [esi] 8004h +
push ebx  +
push dword ptr [ebp-1E0h]  +
call ds:KillTimer  +
push ebx  +
push dword ptr [ebp-1E0h]  +
call ds:ShowWindow  +
mov eax [ebp-1DCh] +
cmp eax ebx +
jnz loc_1015345  +
mov eax [esi+0Ch] +
mov dword_10375D8 eax +
jmp loc_101534B  +
mov ecx [esi+0Ch] +
mov [eax+0Ch] ecx +
mov edi esi +
push dword ptr [edi+8]  +
mov [ebp-1DCh] esi +
push dword ptr [edi+4]  +
mov esi [esi+0Ch] +
push dword ptr [edi]  +
push hWnd  +
call ds:SendMessageW  +
push edi  +
call sub_101E6A1  +
pop ecx  +
push 5  +
push dword ptr [ebp-1E0h]  +
call ds:ShowWindow  +
push ebx  +
push 64h  +
push ebx  +
push dword ptr [ebp-1E0h]  +
call ds:SetTimer  +
mov edi [ebp-1E4h] +
jmp loc_10153A0  +
mov [ebp-1DCh] esi +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_10152F7  +
cmp dword_1037830 ebx +
jz loc_10153DE  +
call sub_101FF73  +
xor edx edx +
div  dword_10360D0 +
push 64h  +
pop ecx  +
mov eax edx +
xor edx edx +
div  ecx +
test eax eax +
jnz loc_10153DE  +
push ebx  +
push 2  +
push 111h  +
push dword ptr [ebp-1E0h]  +
call ds:PostMessageW  +
mov esi offset CriticalSection +
push esi  +
call ds:EnterCriticalSection  +
mov eax dword_10375D0 +
dec eax  +
mov dword ptr [ebp-1DCh] 2C2h +
jz loc_1015438  +
dec eax  +
jz loc_101542C  +
dec eax  +
jz loc_1015420  +
dec eax  +
jz loc_1015414  +
dec eax  +
jnz loc_1015442  +
mov dword ptr [ebp-1DCh] 2C4h +
jmp loc_1015442  +
mov dword ptr [ebp-1DCh] 2C3h +
jmp loc_1015442  +
mov dword ptr [ebp-1DCh] 2BFh +
jmp loc_1015442  +
mov dword ptr [ebp-1DCh] 2BDh +
jmp loc_1015442  +
mov dword ptr [ebp-1DCh] 2BCh +
push esi  +
call ds:LeaveCriticalSection  +
lea ecx [ebp-1D8h] +
call sub_100C141  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
call sub_100C141  +
lea ecx [ebp-140h] +
call sub_100C141  +
mov esi 190h +
push esi  +
lea eax [ebp-0A8h] +
push eax  +
push 1F9h  +
push ebx  +
mov byte ptr [ebp-4] 2 +
call sub_10184FF  +
push esi  +
lea eax [ebp-140h] +
push eax  +
push dword ptr [ebp-1DCh]  +
push ebx  +
call sub_10184FF  +
push dword ptr [ebp-134h]  +
lea eax [ebp-1D8h] +
push dword ptr [ebp-9Ch]  +
push eax  +
call sub_101362E  +
mov esi ds:GetDlgItem +
add esp 2Ch +
push dword ptr [ebp-1CCh]  +
push 1416h  +
push dword ptr [ebp-1E0h]  +
call esi  +
push eax  +
call ds:SetWindowTextW  +
mov eax edi +
imul eax eax +
lea ecx [eax+32h] +
cmp dword_10375EC ecx +
jnb loc_101551E  +
cmp dword_10375EC eax +
jnb loc_10154F7  +
mov dword_10375EC eax +
jmp loc_10154FE  +
add dword_10375EC 5 +
push 1415h  +
push dword ptr [ebp-1E0h]  +
call esi  +
push ebx  +
push dword_10375EC  +
push 402h  +
push eax  +
call ds:SendMessageW  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
xor eax eax +
jmp loc_101556E  +
movzx eax word ptr [ebp+10h] +
dec eax  +
dec eax  +
jnz loc_101556B  +
push 1  +
push esi  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
call sub_101FA8E  +
retn 10h  +
push esi  +
call ds:SetForegroundWindow  +
push 1B58h  +
push hInstance  +
call ds:LoadIconW  +
mov ebx eax +
push ebx  +
push 1  +
mov edi 80h +
push edi  +
push esi  +
mov esi ds:SendMessageW +
call esi  +
push ebx  +
xor ebx ebx +
push ebx  +
push edi  +
mov edi [ebp-1E0h] +
push edi  +
call esi  +
mov eax dword_10375D4 +
push offset dword_10375E8  +
mov dword_10375E8 ebx +
call sub_10129B5  +
pop ecx  +
test eax eax +
jz loc_10155D2  +
push ebx  +
push edi  +
call ds:EndDialog  +
inc dword_10375E8  +
push 1415h  +
push edi  +
mov dword_10375EC ebx +
call ds:GetDlgItem  +
mov ecx dword_10375E8 +
imul ecx ecx +
movzx ecx cx +
shl ecx 10h +
push ecx  +
push ebx  +
push 401h  +
push eax  +
mov [ebp-1E4h] eax +
call esi  +
push ebx  +
push dword_10375EC  +
push 402h  +
push dword ptr [ebp-1E4h]  +
call esi  +
push ebx  +
push 64h  +
push ebx  +
push edi  +
call ds:SetTimer  +
push ebx  +
push ebx  +
push 113h  +
push edi  +
call esi  +
jmp loc_101556B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov [ebp+lpType] eax +
mov eax [ebp+arg_10] +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_9C] +
mov [ebp+lpcbData] eax +
call sub_100C141  +
push 0  +
push ebx  +
lea ecx [ebp+var_9C] +
call sub_101368E  +
push [ebp+lpcbData]  +
push dword ptr [esi+0Ch]  +
push [ebp+lpType]  +
push 0  +
push [ebp+lpValueName]  +
push edi  +
call ds:RegQueryValueExW  +
lea ecx [ebp+var_9C] +
mov esi eax +
mov [ebp+var_9C] offset off_1004B94 +
call sub_101889F  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax hWnd +
test eax eax +
jz loc_10156F5  +
push 0  +
push [ebp+wParam]  +
push 8007h  +
push eax  +
call ds:PostMessageW  +
pop ebp  +
retn   +
pop ebp  +
jmp sub_10136F2  +
***
call sub_101FA3A  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-0B4h] esi +
mov [ebp-0B0h] esi +
push offset unk_10375F8  +
lea ecx [ebp-0B8h] +
mov byte ptr [ebp-4] 1 +
call sub_100AC82  +
mov [ebp-0ACh] eax +
cmp eax esi +
jnz loc_1015775  +
lea ecx [ebp-0B8h] +
mov byte ptr [ebp-4] 0 +
call sub_100ACAC  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn   +
push 0FFFFFFFFh  +
push esi  +
mov esi ds:GetDlgItem +
push 0B1h  +
mov ebx 1390h +
push ebx  +
push hDlg  +
call esi  +
mov edi ds:SendMessageW +
push eax  +
call edi  +
push offset dword_1004768  +
push 0  +
push 0C2h  +
push ebx  +
push hDlg  +
call esi  +
push eax  +
call edi  +
call sub_10127CF  +
mov eax [ebp-0ACh] +
push dword ptr [eax+10h]  +
push 0  +
push 0C2h  +
push ebx  +
push hDlg  +
call esi  +
push eax  +
call edi  +
call sub_1012845  +
call sub_10143A1  +
test eax eax +
jge loc_10157E8  +
mov esi eax +
jmp loc_1015749  +
call sub_1014D3D  +
test eax eax +
jl loc_10157E1  +
xor esi esi +
jmp loc_1015749  +
***
mov edi edi +
dec eax  +
push ebx  +
push esi  +
push edi  +
jz loc_1015AAC  +
dec eax  +
jz loc_10159C4  +
dec eax  +
jz loc_101594C  +
dec eax  +
jz loc_10158E2  +
dec eax  +
jnz loc_1015C0A  +
cmp dword_1036098 eax +
jz loc_1015BF5  +
push eax  +
push 3  +
push 2C2h  +
mov esi offset SubKey +
mov edi offset aDxdiagInSystem +
push esi  +
mov ecx edi +
mov edx offset dword_103759C +
call sub_1014F7E  +
add esp 10h +
mov dword_1036098 eax +
mov ebx offset unk_10375F8 +
test eax eax +
jz loc_1015891  +
push 3  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx ebx +
call sub_1011CAC  +
test eax eax +
jge loc_1015885  +
push 136h  +
call sub_10156D4  +
pop ecx  +
push 3  +
push edi  +
push esi  +
call sub_101293F  +
add esp 0Ch +
push 0  +
push 4  +
push 2C2h  +
push esi  +
mov ecx edi +
mov edx offset dword_103759C +
call sub_1014F7E  +
add esp 10h +
mov dword_1036098 eax +
test eax eax +
jz loc_1015BF5  +
push 4  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx ebx +
call sub_1011D23  +
test eax eax +
jge loc_10158DB  +
push 136h  +
call sub_10156D4  +
pop ecx  +
push 4  +
jmp loc_1015BEB  +
cmp dword_10360A8 0 +
jz loc_1015BF5  +
push 0  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 2C3h  +
mov esi offset SubKey +
mov edi offset aDxdiagInDire_1 +
push esi  +
mov ecx edi +
mov edx offset dword_10375AC +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A8 eax +
test eax eax +
jz loc_1015BF5  +
push ebx  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push ebx  +
mov ecx offset unk_10375F8 +
call sub_100F58F  +
test eax eax +
jge loc_1015946  +
push 135h  +
call sub_10156D4  +
pop ecx  +
push ebx  +
jmp loc_1015BEB  +
cmp dword_10360A4 0 +
mov ebx offset unk_10375F8 +
jz loc_10159B6  +
push 0  +
push 1  +
push 2BFh  +
mov esi offset SubKey +
mov edi offset aDxdiagInDire_2 +
push esi  +
mov ecx edi +
mov edx offset dword_10375A8 +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A4 eax +
test eax eax +
jz loc_10159B6  +
push 1  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx ebx +
call sub_1012689  +
test eax eax +
jge loc_10159AA  +
push 130h  +
call sub_10156D4  +
pop ecx  +
push 1  +
push edi  +
push esi  +
call sub_101293F  +
add esp 0Ch +
push 3  +
mov ecx ebx +
call sub_1012689  +
jmp loc_1015BF5  +
cmp dword_10360A0 0 +
mov ebx offset unk_10375F8 +
mov esi offset SubKey +
mov edi offset aDxdiagInDire_0 +
jz loc_1015A2E  +
push 0  +
push 2  +
push 2BDh  +
push esi  +
mov ecx edi +
mov edx offset dword_10375A4 +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A0 eax +
test eax eax +
jz loc_1015A2E  +
push 2  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 2  +
mov ecx ebx +
call sub_100F518  +
test eax eax +
jge loc_1015A22  +
push 12Fh  +
call sub_10156D4  +
pop ecx  +
push 2  +
push edi  +
push esi  +
call sub_101293F  +
add esp 0Ch +
push 0  +
push 0  +
push 800Ah  +
push hWnd  +
call ds:PostMessageW  +
cmp dword_10360A0 0 +
jz loc_1015A9E  +
push 0  +
push 3  +
push 2BDh  +
push esi  +
mov ecx edi +
mov edx offset dword_10375A4 +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A0 eax +
test eax eax +
jz loc_1015A9E  +
push 3  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 3  +
mov ecx ebx +
call sub_100F518  +
test eax eax +
jge loc_1015A92  +
push 12Fh  +
call sub_10156D4  +
pop ecx  +
push 3  +
push edi  +
push esi  +
call sub_101293F  +
add esp 0Ch +
push 4  +
mov ecx ebx +
call sub_100F518  +
jmp loc_1015BF5  +
cmp dword_103609C 0 +
mov ebx offset unk_10375F8 +
mov esi offset SubKey +
mov edi offset aDxdiagInDirect +
jz loc_1015B16  +
push 0  +
push 2  +
push 2BCh  +
push esi  +
mov ecx edi +
mov edx offset dword_10375A0 +
call sub_1014F7E  +
add esp 10h +
mov dword_103609C eax +
test eax eax +
jz loc_1015B16  +
push 2  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 2  +
mov ecx ebx +
call sub_1010694  +
test eax eax +
jge loc_1015B0A  +
push 12Eh  +
call sub_10156D4  +
pop ecx  +
push 2  +
push edi  +
push esi  +
call sub_101293F  +
add esp 0Ch +
push 0  +
push 0  +
push 800Ah  +
push hWnd  +
call ds:PostMessageW  +
cmp dword_103609C 0 +
jz loc_1015B86  +
push 0  +
push 3  +
push 2BCh  +
push esi  +
mov ecx edi +
mov edx offset dword_10375A0 +
call sub_1014F7E  +
add esp 10h +
mov dword_103609C eax +
test eax eax +
jz loc_1015B86  +
push 3  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 3  +
mov ecx ebx +
call sub_1010694  +
test eax eax +
jge loc_1015B7A  +
push 12Eh  +
call sub_10156D4  +
pop ecx  +
push 3  +
push edi  +
push esi  +
call sub_101293F  +
add esp 0Ch +
push 4  +
mov ecx ebx +
call sub_1010694  +
cmp dword_1036098 0 +
jz loc_1015BF5  +
push 0  +
push 1  +
push 2C2h  +
mov edi offset aDxdiagInSystem +
push esi  +
mov ecx edi +
mov edx offset dword_103759C +
call sub_1014F7E  +
add esp 10h +
mov dword_1036098 eax +
test eax eax +
jz loc_1015BF5  +
push 1  +
push edi  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 2  +
mov ecx ebx +
call sub_100F42A  +
push 0  +
push 0  +
push 8009h  +
push hWnd  +
call ds:PostMessageW  +
push 1  +
push edi  +
push esi  +
call sub_101293F  +
add esp 0Ch +
push 0  +
push 0  +
push 800Ah  +
push hWnd  +
call ds:PostMessageW  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_1015CE6  +
push ebx  +
push esi  +
push edi  +
push 1  +
push 2  +
push 2BCh  +
mov edi offset SubKey +
mov esi offset aDxdiagInDirect +
mov ebx offset dword_10375A0 +
push edi  +
mov ecx esi +
mov edx ebx +
call sub_1014F7E  +
add esp 10h +
mov dword_103609C eax +
test eax eax +
jz loc_1015CE3  +
push 2  +
push esi  +
push edi  +
call sub_10128B0  +
add esp 0Ch +
push 2  +
mov ecx offset unk_10375F8 +
call sub_1010694  +
test eax eax +
jge loc_1015C7C  +
push 12Eh  +
call sub_10156D4  +
pop ecx  +
push 2  +
push esi  +
push edi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_103609C 0 +
jz loc_1015CE3  +
push 1  +
push 3  +
push 2BCh  +
push edi  +
mov ecx esi +
mov edx ebx +
call sub_1014F7E  +
add esp 10h +
mov dword_103609C eax +
test eax eax +
jz loc_1015CE3  +
push 3  +
push esi  +
push edi  +
call sub_10128B0  +
add esp 0Ch +
push 3  +
mov ecx offset unk_10375F8 +
call sub_1010694  +
test eax eax +
jge loc_1015CD7  +
push 12Eh  +
call sub_10156D4  +
pop ecx  +
push 3  +
push esi  +
push edi  +
call sub_101293F  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov eax dword_1036080 +
mov ecx dword_1036084 +
cmp eax ecx +
jl locret_1015D0A  +
mov edx dword_1037590 +
add edx ecx +
cmp eax edx +
jge locret_1015D0A  +
sub eax ecx +
push eax  +
call sub_1013216  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100490C  +
push 1  +
push 0  +
push offset stru_10048FC  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1015D44  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push offset aMshelpWindows?  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jge locret_1015D4F  +
push 0C8h  +
call sub_10156D4  +
pop ecx  +
leave   +
retn   +
***
call sub_10129B5  +
pop ecx  +
cmp eax 1 +
jnz loc_1015D6B  +
xor eax eax +
retn   +
push 0  +
push offset DialogFunc  +
push hWnd  +
push 1774h  +
push hInstance  +
call ds:DialogBoxParamW  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi+0Ch] +
xor ecx ecx +
xor edi edi +
push edi  +
push [ebp+arg_8]  +
mov [eax] cx +
jmp loc_1015DF6  +
mov eax [esi+8] +
add eax eax +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
push dword ptr [esi+0Ch]  +
call sub_101563C  +
cmp eax edi +
jz loc_1015E06  +
cmp eax 0EAh +
jnz loc_1015E11  +
mov eax [ebp+var_4] +
mov ecx [esi+8] +
shr eax 1 +
cmp eax ecx +
ja loc_1015DE9  +
mov eax ecx +
mov ecx [esi+0Ch] +
xor edx edx +
push edi  +
add eax 20h +
mov [ecx] dx +
push eax  +
mov ecx esi +
mov [esi+10h] edi +
call sub_100AE4F  +
cmp eax edi +
jge loc_1015DB0  +
jmp loc_1015E21  +
mov ecx esi +
call sub_100C1B2  +
xor eax eax +
jmp loc_1015E21  +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [eax] cx +
mov [esi+10h] edi +
mov eax 80004005h +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
push edi  +
push 1388h  +
push hWnd  +
mov esi eax +
mov dword_1036080 esi +
call ds:GetDlgItem  +
mov ebx ds:SendMessageW +
xor edi edi +
push edi  +
push edi  +
push 1304h  +
push [ebp+hWnd]  +
mov [ebp+dwStyle] eax +
call ebx  +
dec eax  +
cmp esi eax +
jnz loc_1015E6F  +
push edi  +
jmp loc_1015E71  +
push 1  +
push [ebp+dwStyle]  +
call ds:EnableWindow  +
lea eax [ebp+lParam] +
push eax  +
push [ebp+hWnd]  +
call ds:GetClientRect  +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 1328h  +
push [ebp+hWnd]  +
call ebx  +
mov ecx dword_1036084 +
xor eax eax +
cmp esi ecx +
jl loc_1015EB1  +
mov edx dword_1037590 +
add edx ecx +
cmp esi edx +
jge loc_1015EB1  +
inc eax  +
jmp loc_1015ED6  +
mov ecx dword_1036088 +
cmp esi ecx +
jl loc_1015ECB  +
mov edx dword_1037594 +
add edx ecx +
cmp esi edx +
jge loc_1015ECB  +
push 2  +
jmp loc_1015ED5  +
cmp esi dword_1036090 +
jnz loc_1015ED6  +
push 3  +
pop eax  +
call sub_1015D56  +
cmp eax 1 +
jnz loc_1015EF1  +
push edi  +
push edi  +
push 1330h  +
push [ebp+hWnd]  +
call ebx  +
jmp loc_1016094  +
cmp dword_10360B0 edi +
jz loc_1015F55  +
cmp esi edi +
jnz loc_1015F07  +
mov edi 17D5h +
jmp loc_1015FA9  +
mov eax dword_1036084 +
cmp esi eax +
jl loc_1015F26  +
mov ecx dword_1037590 +
add ecx eax +
cmp esi ecx +
jge loc_1015F26  +
mov edi 17D7h +
jmp loc_1015FA9  +
mov eax dword_1036088 +
cmp esi eax +
jl loc_1015F42  +
mov ecx dword_1037594 +
add ecx eax +
cmp esi ecx +
jge loc_1015F42  +
mov edi 17D8h +
jmp loc_1015FA9  +
cmp esi dword_1036090 +
jnz loc_1016094  +
mov edi 17DAh +
jmp loc_1015FA9  +
cmp esi edi +
jnz loc_1015F60  +
mov edi 1839h +
jmp loc_1015FA9  +
mov eax dword_1036084 +
cmp esi eax +
jl loc_1015F7C  +
mov ecx dword_1037590 +
add ecx eax +
cmp esi ecx +
jge loc_1015F7C  +
mov edi 183Bh +
jmp loc_1015FA9  +
mov eax dword_1036088 +
cmp esi eax +
jl loc_1015F98  +
mov ecx dword_1037594 +
add ecx eax +
cmp esi ecx +
jge loc_1015F98  +
mov edi 183Ch +
jmp loc_1015FA9  +
cmp esi dword_1036090 +
jnz loc_1016094  +
mov edi 183Eh +
mov ebx ds:GetWindowLongW +
push 0FFFFFFFAh  +
push [ebp+hWnd]  +
call ebx  +
push 0  +
push offset sub_101278E  +
push hWnd  +
movzx ecx di +
push ecx  +
push eax  +
call ds:CreateDialogParamW  +
mov hDlg eax +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
stos   +
stos   +
push 0FFFFFFECh  +
push hWnd  +
stos   +
call ebx  +
push 0FFFFFFF0h  +
push hWnd  +
mov edi eax +
call ebx  +
mov ebx ds:GetWindowRect +
mov [ebp+dwStyle] eax +
lea eax [ebp+Rect] +
push eax  +
push hWnd  +
call ebx  +
push edi  +
xor edi edi +
push edi  +
push [ebp+dwStyle]  +
lea eax [ebp+var_24] +
push eax  +
call ds:AdjustWindowRectEx  +
lea eax [ebp+var_44] +
push eax  +
push [ebp+hWnd]  +
call ebx  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push edi  +
push eax  +
mov eax [ebp-0Ch] +
sub eax [ebp+lParam] +
push eax  +
mov eax [ebp+var_20] +
sub eax [ebp+Rect.top] +
add eax [ebp+var_40] +
add eax [ebp-10h] +
push eax  +
mov eax [ebp+var_24] +
sub eax [ebp+Rect.left] +
add eax [ebp+var_44] +
add eax [ebp+lParam] +
push eax  +
push edi  +
push hDlg  +
call ds:SetWindowPos  +
cmp esi edi +
jnz loc_101609B  +
call sub_1013BD0  +
cmp eax edi +
jl loc_1016096  +
call ds:GetFocus  +
test eax eax +
jnz loc_1016086  +
push 1389h  +
push hWnd  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
push 5  +
push hDlg  +
call ds:ShowWindow  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax dword_1036084 +
cmp esi eax +
jl loc_10160BB  +
mov ecx dword_1037590 +
add ecx eax +
cmp esi ecx +
jge loc_10160BB  +
sub esi eax +
push esi  +
call sub_1013216  +
pop ecx  +
jmp loc_1016060  +
mov eax dword_1036088 +
cmp esi eax +
jl loc_10160DA  +
mov ecx dword_1037594 +
add ecx eax +
cmp esi ecx +
jge loc_10160DA  +
sub esi eax +
push esi  +
call sub_1013FFA  +
jmp loc_10160B8  +
cmp esi dword_1036090 +
jnz loc_1016064  +
call sub_1015700  +
jmp loc_1016060  +
***
xor eax eax +
inc eax  +
call sub_10157FD  +
push 2  +
pop eax  +
call sub_10157FD  +
push 3  +
pop eax  +
call sub_10157FD  +
push 4  +
pop eax  +
call sub_10157FD  +
push 5  +
pop eax  +
jmp sub_10157FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExW +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor ebx ebx +
push ebx  +
push offset SubKey  +
mov edi 80000001h +
push edi  +
mov [ebp+hKey] ebx +
mov [ebp+var_4] ebx +
call esi  +
test eax eax +
jnz loc_101617D  +
mov ecx [ebp+arg_0] +
push 104h  +
push offset aTxtpath  +
push [ebp+hKey]  +
call sub_1015D95  +
test eax eax +
jl loc_101616F  +
mov [ebp+var_4] 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+var_4] ebx +
jnz loc_10161B9  +
lea eax [ebp+phkResult] +
push eax  +
push 1  +
push ebx  +
push offset aSoftwareMicr_0  +
push edi  +
call esi  +
test eax eax +
jnz loc_10161B9  +
mov ecx [ebp+arg_0] +
push 104h  +
push offset aDesktop  +
push [ebp+phkResult]  +
call sub_1015D95  +
test eax eax +
jl loc_10161B0  +
mov [ebp+var_4] 1 +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_101FA3A  +
lea ecx [ebp-708h] +
call sub_100C141  +
xor edi edi +
lea ecx [ebp-7A0h] +
mov [ebp-4] edi +
call sub_100C141  +
push 6  +
pop eax  +
mov byte ptr [ebp-4] 1 +
call sub_1015D56  +
cmp eax 1 +
jnz loc_101620B  +
mov ebx offset off_1004B94 +
jmp loc_10165C9  +
push 200h  +
lea eax [ebp-410h] +
push eax  +
push 1F4h  +
push edi  +
call ds:LoadStringW  +
xor eax eax +
mov [ebp-12h] ax +
lea eax [ebp-410h] +
cmp [ebp-410h] di +
jz loc_101624A  +
cmp word ptr [eax] 23h +
jnz loc_1016243  +
xor ecx ecx +
mov [eax] cx +
inc eax  +
inc eax  +
cmp [eax] di +
jnz loc_1016238  +
push edi  +
mov esi 104h +
push esi  +
lea ecx [ebp-708h] +
call sub_100AE4F  +
push esi  +
lea eax [ebp-708h] +
push eax  +
push 1F5h  +
push edi  +
call sub_10184FF  +
push esi  +
lea eax [ebp-7A0h] +
push eax  +
push 1F6h  +
push edi  +
call sub_10184FF  +
push 58h  +
pop ebx  +
push ebx  +
lea eax [ebp-800h] +
push edi  +
push eax  +
call sub_101EDB0  +
mov eax hWnd +
mov [ebp-7FCh] eax +
lea eax [ebp-410h] +
mov [ebp-7F4h] eax +
mov eax [ebp-6FCh] +
mov [ebp-7E4h] eax +
mov eax [ebp-700h] +
mov [ebp-7E0h] eax +
mov eax [ebp-794h] +
add esp 2Ch +
lea ecx [ebp-670h] +
mov [ebp-800h] ebx +
mov dword ptr [ebp-7CCh] 6 +
mov [ebp-7C4h] eax +
call sub_100C141  +
lea eax [ebp-670h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101611E  +
neg eax  +
sbb eax eax +
and eax [ebp-664h] +
pop ecx  +
mov [ebp-7D4h] eax +
mov ebx offset off_1004B94 +
cmp dword_1037834 edi +
jz loc_1016436  +
lea ecx [ebp-4A8h] +
call sub_100C141  +
mov byte ptr [ebp-4] 3 +
call sub_101FF73  +
and eax 80000001h +
jns loc_101633E  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
lea ecx [ebp-4A8h] +
jnz loc_10163EF  +
push offset String  +
call sub_100BC31  +
push offset unk_10375F8  +
lea eax [ebp-4A8h] +
push eax  +
push edi  +
call sub_101E117  +
add esp 0Ch +
cmp eax edi +
jge loc_10165A7  +
lea ecx [ebp-5D8h] +
call sub_100C141  +
lea ecx [ebp-540h] +
call sub_100C141  +
push esi  +
lea eax [ebp-5D8h] +
push eax  +
push 1F8h  +
push edi  +
mov byte ptr [ebp-4] 5 +
call sub_10184FF  +
push esi  +
lea eax [ebp-540h] +
push eax  +
push 192h  +
push edi  +
call sub_10184FF  +
add esp 20h +
push edi  +
push dword ptr [ebp-534h]  +
push dword ptr [ebp-5CCh]  +
push hWnd  +
call ds:MessageBoxW  +
lea ecx [ebp-540h] +
mov [ebp-540h] ebx +
call sub_101889F  +
mov [ebp-5D8h] ebx +
lea ecx [ebp-5D8h] +
jmp loc_10165A2  +
push offset aDxdiag_xml  +
call sub_100BC31  +
push offset unk_10375F8  +
lea eax [ebp-4A8h] +
push eax  +
push 1  +
call sub_101E117  +
add esp 0Ch +
cmp eax edi +
jge loc_10165A7  +
lea ecx [ebp-540h] +
call sub_100C141  +
lea ecx [ebp-5D8h] +
call sub_100C141  +
mov byte ptr [ebp-4] 7 +
jmp loc_1016543  +
lea eax [ebp-800h] +
push eax  +
call ds:GetSaveFileNameW  +
test eax eax +
jz loc_10165B8  +
lea ecx [ebp-4A8h] +
call sub_100C141  +
push dword ptr [ebp-7E4h]  +
lea ecx [ebp-670h] +
mov byte ptr [ebp-4] 8 +
call sub_100BC31  +
push dword ptr [ebp-7E4h]  +
lea ecx [ebp-4A8h] +
call sub_100BC31  +
mov eax [ebp-660h] +
inc eax  +
push eax  +
push 5Ch  +
lea ecx [ebp-670h] +
call sub_100AF11  +
cmp eax 0FFFFFFFFh +
jle loc_10164AF  +
push eax  +
lea ecx [ebp-670h] +
call sub_100BC9C  +
lea edi [ebp-670h] +
call sub_1012CD4  +
xor edi edi +
push 2Eh  +
push dword ptr [ebp-49Ch]  +
mov byte ptr [ebp-494h] 1 +
call sub_101FF9A  +
pop ecx  +
pop ecx  +
lea ecx [ebp-4A8h] +
mov [ebp-7A4h] eax +
mov byte ptr [ebp-494h] 0 +
call sub_100C1B2  +
mov [ebp-7A8h] edi +
cmp [ebp-7A4h] edi +
jz loc_101650B  +
push offset a_xml  +
push dword ptr [ebp-7A4h]  +
call sub_101FE49  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101650B  +
mov dword ptr [ebp-7A8h] 1 +
push offset unk_10375F8  +
lea eax [ebp-4A8h] +
push eax  +
push dword ptr [ebp-7A8h]  +
call sub_101E117  +
add esp 0Ch +
cmp eax edi +
jge loc_10165A7  +
lea ecx [ebp-540h] +
call sub_100C141  +
lea ecx [ebp-5D8h] +
call sub_100C141  +
mov byte ptr [ebp-4] 0Ah +
push esi  +
lea eax [ebp-5D8h] +
push eax  +
push 192h  +
push edi  +
call sub_10184FF  +
push esi  +
lea eax [ebp-540h] +
push eax  +
push 1F8h  +
push edi  +
call sub_10184FF  +
add esp 20h +
push edi  +
push dword ptr [ebp-5CCh]  +
push dword ptr [ebp-534h]  +
push hWnd  +
call ds:MessageBoxW  +
lea ecx [ebp-5D8h] +
mov [ebp-5D8h] ebx +
call sub_101889F  +
lea ecx [ebp-540h] +
mov [ebp-540h] ebx +
call sub_101889F  +
lea ecx [ebp-4A8h] +
mov [ebp-4A8h] ebx +
call sub_101889F  +
lea ecx [ebp-670h] +
mov [ebp-670h] ebx +
call sub_101889F  +
lea ecx [ebp-7A0h] +
mov [ebp-7A0h] ebx +
call sub_101889F  +
lea ecx [ebp-708h] +
mov [ebp-708h] ebx +
call sub_101889F  +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
mov edi [ebp+8] +
mov ebx ds:GetDlgItem +
push 138Ah  +
push edi  +
call ebx  +
mov ecx [ebp+0Ch] +
mov [ebp-3A4h] eax +
mov eax 8004h +
cmp ecx eax +
ja loc_1016DF2  +
jz loc_1016CC7  +
mov eax 111h +
cmp ecx eax +
ja loc_1016822  +
jz loc_101683D  +
dec ecx  +
dec ecx  +
jz loc_1016811  +
sub ecx 0Eh +
jz loc_10168BD  +
sub ecx 3Eh +
jz loc_10167A0  +
sub ecx 0C2h +
jnz loc_1016F85  +
push edi  +
call ds:SetForegroundWindow  +
mov hWnd edi +
call ds:GetCurrentThreadId  +
push eax  +
xor esi esi +
push esi  +
push offset loc_1012700  +
push 3  +
call ds:SetWindowsHookExW  +
push 0FFFFFFFAh  +
push edi  +
mov dword_1037588 eax +
call ds:GetWindowLongW  +
push 1B58h  +
push eax  +
call ds:LoadIconW  +
push eax  +
push 1  +
push 80h  +
push edi  +
mov [ebp-3A8h] eax +
call ds:SendMessageW  +
push dword ptr [ebp-3A8h]  +
push esi  +
push 80h  +
push edi  +
call ds:SendMessageW  +
call sub_1018488  +
test eax eax +
jnz loc_10166E7  +
call sub_10183A1  +
test eax eax +
jz loc_10166E7  +
push 5  +
jmp loc_10166E8  +
push esi  +
push 1424h  +
push edi  +
call ebx  +
push eax  +
call ds:ShowWindow  +
mov ecx [ebp-3A4h] +
call sub_1013848  +
push dword ptr [ebp-3A4h]  +
xor eax eax +
call sub_1015E2C  +
mov ebx ds:PostMessageW +
pop ecx  +
push esi  +
push esi  +
push 800Ah  +
push hWnd  +
call ebx  +
mov [ebp-3B0h] esi +
mov [ebp-3ACh] esi +
push offset unk_10375F8  +
lea ecx [ebp-3B4h] +
mov [ebp-4] esi +
call sub_100AB22  +
cmp eax esi +
jz loc_101675F  +
cmp [eax+0D8h] esi +
jz loc_101675F  +
push esi  +
push esi  +
push 8005h  +
push hWnd  +
call ebx  +
mov ebx ds:SetTimer +
cmp dword_103782C esi +
jz loc_1016778  +
push esi  +
push dword_10360C8  +
push esi  +
push edi  +
call ebx  +
cmp dword_1037834 esi +
jz loc_101678C  +
push esi  +
push dword_10360CC  +
push 1  +
push edi  +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3B4h] +
call sub_100AB4C  +
jmp loc_10170A1  +
mov eax [ebp+14h] +
mov eax [eax+8] +
mov edi ds:SendMessageW +
xor esi esi +
mov [ebp-3A8h] eax +
mov ebx 132Fh +
cmp eax 0FFFFFDD8h +
jnz loc_10167E5  +
push esi  +
push esi  +
push ebx  +
push dword ptr [ebp-3A4h]  +
call edi  +
mov eax hDlg +
cmp eax esi +
jz loc_10170A1  +
push eax  +
call ds:DestroyWindow  +
mov hDlg esi +
cmp dword ptr [ebp-3A8h] 0FFFFFDD9h +
jnz loc_10170A1  +
push esi  +
push esi  +
push ebx  +
push dword ptr [ebp-3A4h]  +
call edi  +
push dword ptr [ebp-3A4h]  +
call sub_1015E2C  +
pop ecx  +
jmp loc_10170A1  +
push dword_1037588  +
call ds:UnhookWindowsHookEx  +
jmp loc_10170A1  +
sub ecx 113h +
jz loc_1016C37  +
sub ecx 7EEFh +
jz loc_1016890  +
dec ecx  +
jnz loc_1016F85  +
push 10h  +
call loc_101E637  +
pop ecx  +
mov ecx eax +
xor esi esi +
xor eax eax +
cmp ecx esi +
jz loc_10170A3  +
mov edi ecx +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+0Ch] +
mov [ecx] eax +
mov eax [ebp+14h] +
mov [ecx+8] eax +
mov eax [ebp+10h] +
mov [ecx+4] eax +
mov eax dword_10375D8 +
cmp eax esi +
jz loc_101708F  +
mov edx eax +
mov eax [eax+0Ch] +
cmp eax esi +
jnz loc_1016877  +
cmp edx esi +
jz loc_101708F  +
mov [edx+0Ch] ecx +
jmp loc_1017095  +
movzx eax word ptr [ebp+10h] +
mov ebx 140Ch +
lea ecx [ebx-2Fh] +
cmp eax ecx +
jg loc_10168D4  +
jz loc_10168CA  +
sub eax 1388h +
jz loc_1016BDD  +
dec eax  +
jz loc_1016C67  +
sub eax 36h +
jnz loc_10170A1  +
push 0  +
call ds:PostQuitMessage  +
jmp loc_10170A1  +
call sub_1015D10  +
jmp loc_10170A1  +
cmp eax 140Bh +
jl loc_10170A1  +
cmp eax ebx +
jle loc_1016BDD  +
cmp eax 141Fh +
jz loc_1016AF1  +
cmp eax 1424h +
jnz loc_10170A1  +
lea ecx [ebp-308h] +
call sub_100C141  +
lea ecx [ebp-1D8h] +
mov dword ptr [ebp-4] 7 +
call sub_100C141  +
lea ecx [ebp-3A0h] +
call sub_100C141  +
lea ecx [ebp-140h] +
call sub_100C141  +
mov byte ptr [ebp-4] 0Ah +
call ds:GetCommandLineW  +
movzx ecx word ptr [eax] +
xor esi esi +
cmp cx 22h +
jz loc_1016A86  +
cmp cx 20h +
jbe loc_1016957  +
inc eax  +
inc eax  +
cmp word ptr [eax] 20h +
ja loc_101694F  +
push eax  +
lea ecx [ebp-1D8h] +
call sub_100BC31  +
push offset a64bit_0  +
lea ecx [ebp-1D8h] +
call sub_100BC6C  +
push esi  +
call sub_1018490  +
pop ecx  +
lea ecx [ebp-308h] +
call sub_100CD2F  +
push offset a__System32  +
lea ecx [ebp-308h] +
call sub_100BC6C  +
lea eax [ebp-308h] +
push eax  +
lea ecx [ebp-3A0h] +
call sub_1018C97  +
push offset aDxdiag_exe  +
lea ecx [ebp-3A0h] +
call sub_100BC6C  +
lea eax [ebp-308h] +
push eax  +
lea ecx [ebp-140h] +
call sub_1018C97  +
push 1  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-1CCh]  +
push dword ptr [ebp-394h]  +
push esi  +
push hWnd  +
call ds:ShellExecuteW  +
push 1  +
mov ebx eax +
call sub_1018490  +
cmp ebx 20h +
pop ecx  +
mov edi offset off_1004B94 +
jge loc_1016AA1  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
lea ecx [ebp-270h] +
call sub_100C141  +
push 104h  +
lea eax [ebp-0A8h] +
push eax  +
push 64h  +
push esi  +
mov byte ptr [ebp-4] 0Ch +
call sub_10184FF  +
push 200h  +
lea eax [ebp-270h] +
push eax  +
push 76h  +
push esi  +
call sub_10184FF  +
add esp 20h +
push 10h  +
push dword ptr [ebp-9Ch]  +
push dword ptr [ebp-264h]  +
push esi  +
call ds:MessageBoxW  +
lea ecx [ebp-270h] +
mov [ebp-270h] edi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] edi +
call sub_101889F  +
jmp loc_1016AA8  +
cmp cx 22h +
jz loc_1016A9A  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
cmp cx si +
jnz loc_1016A80  +
cmp word ptr [eax] 22h +
jnz loc_1016957  +
inc eax  +
inc eax  +
jmp loc_1016957  +
***
push esi  +
call ds:PostQuitMessage  +
lea ecx [ebp-140h] +
mov [ebp-140h] edi +
call sub_101889F  +
lea ecx [ebp-3A0h] +
mov [ebp-3A0h] edi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] edi +
call sub_101889F  +
mov [ebp-308h] edi +
lea ecx [ebp-308h] +
call sub_101889F  +
jmp loc_10170A1  +
xor esi esi +
xor eax eax +
cmp dword_10360B4 esi +
push esi  +
setz al  +
mov edi offset SubKey +
mov dword_10360B4 eax +
lea eax [ebp-3A4h] +
push eax  +
push esi  +
push 2  +
push esi  +
push esi  +
push esi  +
push edi  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1016B4D  +
push 4  +
push offset dword_10360B4  +
push 4  +
push esi  +
push offset aAllowWhqlCheck  +
push dword ptr [ebp-3A4h]  +
call ds:RegSetValueExW  +
push dword ptr [ebp-3A4h]  +
call ds:RegCloseKey  +
push dword_10360B4  +
mov ecx offset unk_10375F8 +
call sub_100B274  +
cmp dword_10360B4 esi +
jz loc_10170A1  +
call near ptr dword_1015C10+3  +
cmp dword_10360A0 esi +
jz loc_10170A1  +
push 1  +
push 3  +
push 2BDh  +
mov ebx offset aDxdiagInDire_0 +
push edi  +
mov ecx ebx +
mov edx offset dword_10375A4 +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A0 eax +
cmp eax esi +
jz loc_10170A1  +
push 3  +
push ebx  +
push edi  +
call sub_10128B0  +
add esp 0Ch +
push 3  +
mov ecx offset unk_10375F8 +
call sub_100F518  +
test eax eax +
jge loc_1016BCC  +
push 12Fh  +
call sub_10156D4  +
pop ecx  +
push 3  +
push ebx  +
push edi  +
call sub_101293F  +
add esp 0Ch +
jmp loc_10170A1  +
mov edi ds:SendMessageW +
xor esi esi +
push esi  +
push esi  +
push 1304h  +
push dword ptr [ebp-3A4h]  +
call edi  +
push esi  +
push esi  +
push 132Fh  +
push dword ptr [ebp-3A4h]  +
mov [ebp-3A8h] eax +
call edi  +
cmp [ebp+10h] bx +
jnz loc_1016C1B  +
mov ecx [ebp-3A8h] +
lea eax [eax+ecx-1] +
jmp loc_1016C1C  +
inc eax  +
cdq   +
idiv  dword ptr [ebp-3A8h] +
push esi  +
push edx  +
push 1330h  +
push dword ptr [ebp-3A4h]  +
call edi  +
jmp loc_10170A1  +
mov eax [ebp+10h] +
xor esi esi +
sub eax esi +
jz loc_1016C71  +
dec eax  +
jnz loc_10170A1  +
cmp dword_1037834 esi +
jz loc_10170A1  +
push hWnd  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10170A1  +
call sub_10161C6  +
jmp loc_10170A1  +
cmp dword_103782C esi +
jz loc_10170A1  +
push hWnd  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10170A1  +
call sub_101FF73  +
and eax 80000001h +
jns loc_1016CA2  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
push esi  +
jnz loc_1016CAC  +
push 140Bh  +
jmp loc_1016CB1  +
push 140Ch  +
push 111h  +
push hWnd  +
call ds:PostMessageW  +
jmp loc_10170A1  +
mov ebx ds:EnableWindow +
xor esi esi +
push esi  +
push hWnd  +
call ebx  +
lea ecx [ebp-270h] +
call sub_100C141  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-4] 3 +
call sub_100C141  +
lea ecx [ebp-140h] +
call sub_100C141  +
lea ecx [ebp-1D8h] +
call sub_100C141  +
mov edi 104h +
push edi  +
lea eax [ebp-270h] +
push eax  +
push 64h  +
push esi  +
mov byte ptr [ebp-4] 6 +
call sub_10184FF  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 258h  +
push esi  +
call sub_10184FF  +
push edi  +
lea eax [ebp-1D8h] +
push eax  +
push dword_10375C8  +
push esi  +
call sub_10184FF  +
push dword ptr [ebp-1CCh]  +
lea eax [ebp-0A8h] +
push dword ptr [ebp-1CCh]  +
push dword ptr [ebp-134h]  +
push eax  +
call sub_101362E  +
add esp 40h +
push edi  +
push dword ptr [ebp-264h]  +
push dword ptr [ebp-9Ch]  +
push hWnd  +
call ds:MessageBoxW  +
xor ecx ecx +
cmp eax 6 +
setnz cl  +
push 1  +
push hWnd  +
mov dword_10375CC ecx +
call ebx  +
push hObject  +
call ds:SetEvent  +
mov edi offset off_1004B94 +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] edi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] edi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] edi +
call sub_101889F  +
mov [ebp-270h] edi +
lea ecx [ebp-270h] +
jmp loc_1016AE7  +
***
sub ecx 8005h +
jz loc_101683D  +
dec ecx  +
jz loc_1016FF8  +
dec ecx  +
jz loc_101683D  +
dec ecx  +
jz loc_1016FEB  +
dec ecx  +
jz loc_1016F8C  +
dec ecx  +
jz loc_1016EFD  +
dec ecx  +
jnz loc_1016F85  +
xor esi esi +
mov [ebp-3BCh] esi +
mov [ebp-3B8h] esi +
mov edi offset unk_10375F8 +
push edi  +
lea ecx [ebp-3C0h] +
mov dword ptr [ebp-4] 0Eh +
call sub_100AB7A  +
mov ebx eax +
cmp ebx esi +
jz loc_1016E8E  +
cmp dword_10375B4 esi +
jnz loc_1016E8E  +
mov ecx edi +
call near ptr dword_100A940+2  +
cmp eax [ebx+180Ch] +
jnz loc_1016E89  +
mov ecx edi +
call near ptr dword_100A968+4  +
cmp eax [ebx+1814h] +
jnz loc_1016E89  +
mov ecx edi +
call near ptr dword_100A994+2  +
cmp eax [ebx+1818h] +
jz loc_1016E8E  +
call near ptr dword_1015C10+3  +
mov edi ds:RegNotifyChangeKeyValue +
push 1  +
push dword_10375E0  +
mov [ebp-3A4h] esi +
push 0Fh  +
push 1  +
push dword_10375E4  +
call edi  +
mov ebx ds:WaitForSingleObject +
jmp loc_1016ED9  +
cmp dword ptr [ebp-3A4h] 0Ah +
jg loc_1016EE9  +
inc dword ptr [ebp-3A4h]  +
push 1  +
push dword_10375E0  +
push 0Fh  +
push 1  +
push dword_10375E4  +
call edi  +
push esi  +
push dword_10375E0  +
call ebx  +
cmp eax 102h +
jnz loc_1016EB6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3C0h] +
call sub_100ABA4  +
jmp loc_10170A1  +
add wParam 0Ah +
xor esi esi +
cmp dword_1036080 esi +
jnz loc_1016F85  +
push 1415h  +
push hDlg  +
call ebx  +
mov edi offset CriticalSection +
push edi  +
mov ebx eax +
call ds:EnterCriticalSection  +
xor eax eax +
cmp dword_10375B4 esi +
push edi  +
setnz al  +
mov [ebp-3A8h] eax +
call ds:LeaveCriticalSection  +
cmp [ebp-3A8h] esi +
jz loc_1016F7D  +
push 5  +
push ebx  +
call ds:ShowWindow  +
push esi  +
push wParam  +
push 402h  +
push ebx  +
call ds:SendMessageW  +
push hWnd  +
mov esi ds:UpdateWindow +
call esi  +
push hDlg  +
call esi  +
jmp loc_1016F85  +
push esi  +
push ebx  +
call ds:ShowWindow  +
xor eax eax +
jmp loc_10170A4  +
xor esi esi +
push esi  +
push esi  +
push 132Fh  +
push dword ptr [ebp-3A4h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_10170A1  +
mov [ebp-3B0h] esi +
mov [ebp-3ACh] esi +
push offset unk_10375F8  +
lea ecx [ebp-3B4h] +
mov dword ptr [ebp-4] 0Dh +
call sub_100AB22  +
push dword ptr [eax+388h]  +
push 13A9h  +
push hDlg  +
call ebx  +
push eax  +
call ds:SetWindowTextW  +
jmp loc_101678C  +
***
push dword ptr [ebp+10h]  +
call sub_10136F2  +
jmp loc_101680B  +
***
lea ecx [ebp-0A8h] +
call sub_100C141  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-140h] +
mov [ebp-4] ebx +
call sub_100C141  +
mov edi 104h +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 64h  +
xor esi esi +
push esi  +
mov byte ptr [ebp-4] 2 +
call sub_10184FF  +
push edi  +
lea eax [ebp-0A8h] +
push eax  +
push 69h  +
push esi  +
call sub_10184FF  +
add esp 20h +
cmp dword_1037820 esi +
jnz loc_1017064  +
push 30h  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-9Ch]  +
push hWnd  +
call ds:MessageBoxW  +
mov edi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] edi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] edi +
call sub_101889F  +
mov eax ebx +
jmp loc_10170A4  +
mov dword_10375D8 ecx +
push dword_10375DC  +
call ds:SetEvent  +
xor eax eax +
inc eax  +
call sub_101FA8E  +
retn 10h  +
***
push 64h  +
mov eax offset loc_1033248 +
call sub_101F9C7  +
push offset aMsftedit_dll  +
call ds:LoadLibraryW  +
xor esi esi +
mov [ebp-30h] eax +
cmp eax esi +
jnz loc_10170E0  +
push 0C9h  +
call sub_10156D4  +
jmp loc_10173B4  +
call ds:InitCommonControls  +
push esi  +
push 1  +
push 5  +
push 10h  +
push 10h  +
call ds:ImageList_Create  +
mov lParam eax +
cmp eax esi +
jnz loc_1017105  +
push 0CAh  +
jmp loc_10170D6  +
***
push 1B59h  +
push hInstance  +
call ds:LoadIconW  +
cmp eax esi +
jnz loc_1017121  +
push 0CBh  +
jmp loc_10170D6  +
***
push eax  +
push 0FFFFFFFFh  +
push lParam  +
call ds:ImageList_ReplaceIcon  +
mov [ebp-40h] esi +
mov [ebp-3Ch] esi +
push offset unk_10375F8  +
lea ecx [ebp-44h] +
mov [ebp-4] esi +
call sub_100AB22  +
mov ebx eax +
call sub_101834B  +
test eax eax +
jnz loc_10171D8  +
cmp ebx esi +
jz loc_10171D8  +
mov eax [ebx+7B0h] +
lea ecx [ebp-1Ch] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
mov edi offset aD_D_D_D +
push edi  +
push eax  +
mov [ebp-10h] esi +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
mov [ebp-20h] esi +
mov [ebp-24h] esi +
mov [ebp-28h] esi +
mov [ebp-2Ch] esi +
call sub_101ED81  +
add esp 18h +
cmp eax 4 +
jz loc_10171A7  +
mov [ebp-10h] esi +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
mov ebx [ebx+258h] +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push edi  +
push ebx  +
call sub_101ED81  +
add esp 18h +
cmp eax 4 +
jz loc_10171D8  +
mov [ebp-20h] esi +
mov [ebp-24h] esi +
mov [ebp-28h] esi +
mov [ebp-2Ch] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-44h] +
call sub_100AB4C  +
call ds:GetDesktopWindow  +
lea ecx [ebp-54h] +
push ecx  +
push eax  +
call ds:GetClientRect  +
mov eax [ebp-4Ch] +
sub eax [ebp-54h] +
cmp eax 320h +
jl loc_10172AD  +
mov eax [ebp-48h] +
sub eax [ebp-50h] +
cmp eax 258h +
jl loc_10172AD  +
mov dword_10360B0 esi +
mov eax 1838h +
push esi  +
push (offset dword_10165F4+2)  +
movzx eax ax +
push esi  +
push eax  +
push hInstance  +
call ds:CreateDialogParamW  +
push offset dword_10375E4  +
push 10h  +
push esi  +
push offset aSoftwareMicros  +
push 80000002h  +
mov [ebp-10h] eax +
mov [ebp-2Ch] esi +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1017273  +
push 1  +
push dword_10375E0  +
push 0Fh  +
push 1  +
push dword_10375E4  +
call ds:RegNotifyChangeKeyValue  +
mov eax dword_10375DC +
mov [ebp-38h] eax +
mov eax dword_10375E0 +
mov [ebp-34h] eax +
push 5FFh  +
push 0FFFFFFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
push 2  +
call ds:MsgWaitForMultipleObjects  +
sub eax esi +
jz loc_1017319  +
dec eax  +
jz loc_1017307  +
dec eax  +
jnz loc_1017391  +
mov edi ds:PeekMessageW +
jmp loc_10172F3  +
mov dword_10360B0 1 +
mov eax 17D4h +
jmp loc_1017222  +
***
cmp dword ptr [ebp-6Ch] 12h +
jnz loc_10172CE  +
mov dword ptr [ebp-2Ch] 1 +
lea eax [ebp-70h] +
push eax  +
push dword ptr [ebp-10h]  +
call ds:IsDialogMessageW  +
test eax eax +
jnz loc_10172F3  +
lea eax [ebp-70h] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp-70h] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
push esi  +
push esi  +
push esi  +
lea eax [ebp-70h] +
push eax  +
call edi  +
test eax eax +
jnz loc_10172C1  +
jmp loc_1017391  +
push esi  +
push esi  +
push 800Bh  +
push dword ptr [ebp-10h]  +
call ds:PostMessageW  +
jmp loc_1017391  +
mov eax dword_10375D8 +
cmp eax esi +
jz loc_1017391  +
mov ecx [eax+8] +
mov edi [eax] +
mov ebx [eax+4] +
mov [ebp-28h] ecx +
mov ecx [eax+0Ch] +
push eax  +
mov dword_10375D8 ecx +
call sub_101E6A1  +
pop ecx  +
cmp dword_10375D8 esi +
jz loc_1017351  +
push dword_10375DC  +
call ds:SetEvent  +
mov eax edi +
sub eax 111h +
jz loc_101737E  +
sub eax 7EF2h +
jz loc_1017377  +
dec eax  +
dec eax  +
jz loc_1017370  +
dec eax  +
dec eax  +
jnz loc_1017383  +
mov edi 8008h +
jmp loc_1017383  +
mov edi 8006h +
jmp loc_1017383  +
mov edi 8004h +
jmp loc_1017383  +
mov edi 8002h +
push dword ptr [ebp-28h]  +
push ebx  +
push edi  +
push dword ptr [ebp-10h]  +
call ds:SendMessageW  +
cmp [ebp-2Ch] esi +
jz loc_1017283  +
push dword ptr [ebp-10h]  +
call ds:DestroyWindow  +
jmp loc_10173B5  +
mov ecx [eax+0Ch] +
push eax  +
mov dword_10375D8 ecx +
call sub_101E6A1  +
pop ecx  +
mov eax dword_10375D8 +
cmp eax esi +
jnz loc_10173A5  +
mov eax dword_10375E4 +
cmp eax esi +
jz loc_10173D4  +
push eax  +
call ds:RegCloseKey  +
mov dword_10375E4 esi +
mov eax lParam +
cmp eax esi +
jz loc_10173E4  +
push eax  +
call ds:ImageList_Destroy  +
cmp [ebp-30h] esi +
jz loc_10173F2  +
push dword ptr [ebp-30h]  +
call ds:FreeLibrary  +
xor eax eax +
call sub_101FA75  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3A4h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ds:CreateEventW +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov hInstance eax +
call esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov hObject eax +
call esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword_10375DC eax +
call esi  +
push offset CriticalSection  +
mov dword_10375E0 eax +
call ds:InitializeCriticalSection  +
push ebx  +
push offset ValueName  +
call ds:RegisterApplicationRestart  +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
call ds:HeapSetInformation  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push ebx  +
mov esi offset SubKey +
push esi  +
push 80000001h  +
mov dword_10360B4 edi +
mov [ebp+var_39C] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10174E5  +
lea eax [ebp+cbData] +
push eax  +
push offset dword_10360B4  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aAllowWhqlCheck  +
push [ebp+hKey]  +
mov [ebp+Type] ebx +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10174D9  +
mov [ebp+var_39C] edi +
push [ebp+hKey]  +
call ds:RegCloseKey  +
call ds:GetCommandLineW  +
lea ecx [ebp+var_1CC] +
mov edi eax +
call sub_100C141  +
movzx eax word ptr [edi] +
cmp ax 22h +
jz loc_1017517  +
cmp ax 20h +
jbe loc_1017531  +
inc edi  +
inc edi  +
cmp word ptr [edi] 20h +
ja loc_1017507  +
jmp loc_1017531  +
cmp ax 22h +
jz loc_101752F  +
inc edi  +
inc edi  +
movzx eax word ptr [edi] +
cmp ax bx +
jnz loc_1017511  +
cmp word ptr [edi] 22h +
jnz loc_1017531  +
jmp loc_101752F  +
cmp ax 20h +
ja loc_1017539  +
inc edi  +
inc edi  +
movzx eax word ptr [edi] +
cmp ax bx +
jnz loc_1017529  +
movzx eax word ptr [edi] +
cmp ax 2Fh +
jz loc_101754C  +
cmp ax 2Dh +
jnz loc_101773D  +
lea ecx [ebp+var_9C] +
call sub_100C141  +
inc edi  +
push offset aDontskip  +
lea ecx [ebp+var_9C] +
inc edi  +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jnz loc_10175AC  +
mov dword_1037578 1 +
mov eax [ebp+var_8C] +
lea ecx [ebp+var_9C] +
lea edi [edi+eax*2] +
mov [ebp+var_9C] offset off_1004B94 +
call sub_101889F  +
jmp loc_1017531  +
push offset asc_1004B0C  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jnz loc_10175E7  +
mov dword_103607C ebx +
mov dword_10375B0 1 +
jmp loc_101758C  +
push offset aSaveonly  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jnz loc_1017620  +
inc eax  +
mov dword_103607C eax +
mov dword_103757C eax +
jmp loc_101758C  +
push offset aT  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jz loc_1017672  +
push offset aP  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jnz loc_101767D  +
mov dword_103607C ebx +
jmp loc_101758C  +
push offset aWhqlOff  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jnz loc_10176BB  +
mov dword_10360B4 ebx +
mov dword_10375F0 1 +
jmp loc_101758C  +
push offset aWhqlOn  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jnz loc_10176F4  +
inc eax  +
mov dword_10360B4 eax +
mov dword_10375F0 eax +
jmp loc_101758C  +
push offset a64bit  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push edi  +
call sub_1020274  +
add esp 0Ch +
test eax eax +
jnz loc_1018251  +
call sub_1018488  +
test eax eax +
jz loc_101758C  +
mov dword_10375F4 1 +
jmp loc_101758C  +
push edi  +
call ds:lstrlenW  +
test eax eax +
jle loc_1017792  +
push edi  +
lea ecx [ebp+var_1CC] +
mov dword_103607C ebx +
call sub_100BC31  +
mov eax [ebp+var_1BC] +
inc eax  +
push eax  +
push 2Eh  +
lea ecx [ebp+var_1CC] +
call sub_100AF11  +
test eax eax +
jge loc_1017792  +
lea ecx [ebp+var_1CC] +
cmp dword_10375B0 ebx +
jz loc_1017788  +
push offset a_xml  +
jmp loc_101778D  +
push offset a_txt  +
call sub_100BC6C  +
cmp [ebp+var_1BC] ebx +
jnz loc_10177B9  +
lea ecx [ebp+var_1CC] +
cmp dword_10375B0 ebx +
jz loc_10177AF  +
push offset aDxdiag_xml  +
jmp loc_10177B4  +
push offset String  +
call sub_100BC31  +
call sub_1018488  +
test eax eax +
jz loc_1017993  +
cmp dword_10375F4 ebx +
jnz loc_1017993  +
lea ecx [ebp+var_9C] +
call sub_100C141  +
lea ecx [ebp+var_2FC] +
call sub_100C141  +
lea ecx [ebp+var_134] +
call sub_100C141  +
push ebx  +
push 105h  +
lea ecx [ebp+var_9C] +
call sub_100AE4F  +
push [ebp+var_94]  +
mov [ebp+var_88] 1 +
push [ebp+var_90]  +
call sub_1018442  +
pop ecx  +
pop ecx  +
lea ecx [ebp+var_9C] +
mov [ebp+var_88] bl +
call sub_100C1B2  +
lea eax [ebp+var_9C] +
push eax  +
lea ecx [ebp+var_2FC] +
call sub_1018C97  +
push offset aDxdiag_exe  +
lea ecx [ebp+var_2FC] +
call sub_100BC6C  +
lea eax [ebp+var_9C] +
push eax  +
lea ecx [ebp+var_134] +
call sub_1018C97  +
call ds:GetCommandLineW  +
movzx ecx word ptr [eax] +
cmp cx 22h +
jz loc_1017978  +
cmp cx 20h +
jbe loc_1017884  +
inc eax  +
inc eax  +
cmp word ptr [eax] 20h +
ja loc_101787C  +
push 1  +
push [ebp+lpDirectory]  +
push eax  +
push [ebp+lpFile]  +
push ebx  +
push hWnd  +
call ds:ShellExecuteW  +
cmp eax 20h +
jge loc_1017922  +
lea ecx [ebp+var_264] +
call sub_100C141  +
lea ecx [ebp+var_394] +
call sub_100C141  +
push 104h  +
lea eax [ebp+var_264] +
push eax  +
push 64h  +
push ebx  +
call sub_10184FF  +
push 200h  +
lea eax [ebp+var_394] +
push eax  +
push 76h  +
push ebx  +
call sub_10184FF  +
add esp 20h +
push 10h  +
push [ebp+lpCaption]  +
push [ebp+lpText]  +
push ebx  +
call ds:MessageBoxW  +
mov esi offset off_1004B94 +
lea ecx [ebp+var_394] +
mov [ebp+var_394] esi +
call sub_101889F  +
lea ecx [ebp+var_264] +
mov [ebp+var_264] esi +
call sub_101889F  +
mov esi offset off_1004B94 +
lea ecx [ebp+var_134] +
mov [ebp+var_134] esi +
call sub_101889F  +
lea ecx [ebp+var_2FC] +
mov [ebp+var_2FC] esi +
call sub_101889F  +
lea ecx [ebp+var_9C] +
mov [ebp+var_9C] esi +
call sub_101889F  +
lea ecx [ebp+var_1CC] +
mov [ebp+var_1CC] esi +
call sub_101889F  +
mov eax ebx +
jmp loc_1018335  +
cmp cx 22h +
jz loc_101798C  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
cmp cx bx +
jnz loc_1017972  +
cmp word ptr [eax] 22h +
jnz loc_1017884  +
inc eax  +
inc eax  +
jmp loc_1017884  +
cmp [ebp+var_39C] ebx +
jnz loc_1017A92  +
cmp dword_10375F0 ebx +
jnz loc_1017A92  +
cmp dword_103607C ebx +
jz loc_1017A92  +
cmp dword_1037820 ebx +
jnz loc_1017A92  +
lea ecx [ebp+var_264] +
call sub_100C141  +
lea ecx [ebp+var_134] +
call sub_100C141  +
push 104h  +
lea eax [ebp+var_264] +
push eax  +
push 64h  +
push ebx  +
call sub_10184FF  +
push 200h  +
lea eax [ebp+var_134] +
push eax  +
push 73h  +
push ebx  +
call sub_10184FF  +
add esp 20h +
push 4  +
push [ebp+lpCaption]  +
push [ebp+lpDirectory]  +
push ebx  +
call ds:MessageBoxW  +
sub eax 6 +
neg eax  +
push ebx  +
sbb eax eax +
inc eax  +
mov dword_10360B4 eax +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 2  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1017A6B  +
push 4  +
push offset dword_10360B4  +
push 4  +
push ebx  +
push offset aAllowWhqlCheck  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov edi offset off_1004B94 +
lea ecx [ebp+var_134] +
mov [ebp+var_134] edi +
call sub_101889F  +
lea ecx [ebp+var_264] +
mov [ebp+var_264] edi +
call sub_101889F  +
push dword_10360B4  +
mov edi offset unk_10375F8 +
mov ecx edi +
call sub_100CE33  +
cmp eax ebx +
jge loc_1017AD3  +
cmp eax 80080001h +
jnz loc_1017AB3  +
push 70h  +
jmp loc_1017AC0  +
cmp eax 800401F8h +
jnz loc_1017ABE  +
push 6Fh  +
jmp loc_1017AC0  +
push 71h  +
call sub_10156D4  +
xor ebx ebx +
pop ecx  +
inc ebx  +
mov esi offset off_1004B94 +
jmp loc_101795A  +
call sub_1012A51  +
cmp dword_103757C ebx +
jz loc_1017CBB  +
cmp dword_1036098 ebx +
jz loc_1017B48  +
push ebx  +
push 1  +
push 2C2h  +
push esi  +
mov ecx offset aDxdiagInSystem +
mov edx offset dword_103759C +
call sub_1014F7E  +
add esp 10h +
mov dword_1036098 eax +
cmp eax ebx +
jz loc_1017B48  +
push 1  +
push offset aDxdiagInSystem  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx edi +
call sub_100F42A  +
test eax eax +
jge loc_1017B38  +
push 12Ch  +
call sub_10156D4  +
pop ecx  +
push 1  +
push offset aDxdiagInSystem  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_103609C ebx +
jz loc_1017BAC  +
push ebx  +
push 1  +
push 2BCh  +
push esi  +
mov ecx offset aDxdiagInDirect +
mov edx offset dword_10375A0 +
call sub_1014F7E  +
add esp 10h +
mov dword_103609C eax +
cmp eax ebx +
jz loc_1017BAC  +
push 1  +
push offset aDxdiagInDirect  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx edi +
call sub_1010694  +
test eax eax +
jge loc_1017B9C  +
push 12Ch  +
call sub_10156D4  +
pop ecx  +
push 1  +
push offset aDxdiagInDirect  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_10360A0 ebx +
jz loc_1017C10  +
push ebx  +
push 1  +
push 2BDh  +
push esi  +
mov ecx offset aDxdiagInDire_0 +
mov edx offset dword_10375A4 +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A0 eax +
cmp eax ebx +
jz loc_1017C10  +
push 1  +
push offset aDxdiagInDire_0  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx edi +
call sub_100F518  +
test eax eax +
jge loc_1017C00  +
push 12Dh  +
call sub_10156D4  +
pop ecx  +
push 1  +
push offset aDxdiagInDire_0  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_10360AC ebx +
jz loc_1017C30  +
push 1  +
mov ecx edi +
call sub_100F4A1  +
test eax eax +
jge loc_1017C30  +
push 137h  +
call sub_10156D4  +
pop ecx  +
call sub_10160F1  +
call sub_10161C6  +
lea ecx [ebp+var_264] +
call sub_100C141  +
lea ecx [ebp+var_134] +
call sub_100C141  +
mov esi 104h +
push esi  +
lea eax [ebp+var_264] +
push eax  +
push 64h  +
push ebx  +
call sub_10184FF  +
push esi  +
lea eax [ebp+var_134] +
push eax  +
push 1F7h  +
push ebx  +
call sub_10184FF  +
add esp 20h +
push ebx  +
push [ebp+lpCaption]  +
push [ebp+lpDirectory]  +
push ebx  +
call ds:MessageBoxW  +
mov esi offset off_1004B94 +
lea ecx [ebp+var_134] +
mov [ebp+var_134] esi +
call sub_101889F  +
lea ecx [ebp+var_264] +
mov [ebp+var_264] esi +
call sub_101889F  +
jmp loc_10181F1  +
cmp dword_103607C ebx +
jnz loc_1017E24  +
cmp dword_1036098 ebx +
jz loc_1017D1C  +
push ebx  +
push 1  +
push 2C2h  +
push esi  +
mov ecx offset aDxdiagInSystem +
mov edx offset dword_103759C +
call sub_1014F7E  +
add esp 10h +
mov dword_1036098 eax +
cmp eax ebx +
jz loc_1017D1C  +
push 1  +
push offset aDxdiagInSystem  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx edi +
call sub_100F42A  +
push 1  +
push offset aDxdiagInSystem  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_103609C ebx +
jz loc_1017D80  +
push ebx  +
push 1  +
push 2BCh  +
push esi  +
mov ecx offset aDxdiagInDirect +
mov edx offset dword_10375A0 +
call sub_1014F7E  +
add esp 10h +
mov dword_103609C eax +
cmp eax ebx +
jz loc_1017D80  +
push 1  +
push offset aDxdiagInDirect  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx edi +
call sub_1010694  +
test eax eax +
jge loc_1017D70  +
push 12Ch  +
call sub_10156D4  +
pop ecx  +
push 1  +
push offset aDxdiagInDirect  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_10360A0 ebx +
jz loc_1017DE4  +
push ebx  +
push 1  +
push 2BDh  +
push esi  +
mov ecx offset aDxdiagInDire_0 +
mov edx offset dword_10375A4 +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A0 eax +
cmp eax ebx +
jz loc_1017DE4  +
push 1  +
push offset aDxdiagInDire_0  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push 1  +
mov ecx edi +
call sub_100F518  +
test eax eax +
jge loc_1017DD4  +
push 12Dh  +
call sub_10156D4  +
pop ecx  +
push 1  +
push offset aDxdiagInDire_0  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_10360AC ebx +
jz loc_1017E04  +
push 1  +
mov ecx edi +
call sub_100F4A1  +
test eax eax +
jge loc_1017E04  +
push 137h  +
call sub_10156D4  +
pop ecx  +
call sub_10160F1  +
push edi  +
lea eax [ebp+var_1CC] +
push eax  +
push dword_10375B0  +
call sub_101E117  +
add esp 0Ch +
jmp loc_10181F1  +
call ds:GetCurrentThreadId  +
mov dword_10375B8 eax +
cmp dword_1037828 ebx +
jz loc_1017EA3  +
call sub_1012A51  +
mov edi offset unk_10375F8 +
mov ecx edi +
call sub_100CA8A  +
mov ecx edi +
call sub_1010819  +
mov ecx edi +
call sub_100CB06  +
mov ecx edi +
call sub_100CB8E  +
mov ecx edi +
call sub_10108E5  +
mov ecx edi +
call sub_100CBF8  +
mov ecx edi +
call sub_100CAC8  +
cmp dword_1037838 ebx +
jz loc_1017EA3  +
xor edi edi +
inc edi  +
mov dword_1036098 edi +
mov dword_103609C edi +
mov dword_10360A0 edi +
mov dword_10360A4 edi +
mov dword_10360A8 edi +
mov dword_10360AC edi +
jmp loc_1017EA6  +
xor edi edi +
inc edi  +
cmp dword_1036098 ebx +
jz loc_1017EFA  +
push ebx  +
push edi  +
push 2C2h  +
push esi  +
mov ecx offset aDxdiagInSystem +
mov edx offset dword_103759C +
call sub_1014F7E  +
add esp 10h +
mov dword_1036098 eax +
cmp eax ebx +
jz loc_1017EFA  +
push edi  +
push offset aDxdiagInSystem  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push edi  +
mov ecx offset unk_10375F8 +
call sub_100F42A  +
push edi  +
push offset aDxdiagInSystem  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_103609C ebx +
jz loc_1017F5D  +
push ebx  +
push edi  +
push 2BCh  +
push esi  +
mov ecx offset aDxdiagInDirect +
mov edx offset dword_10375A0 +
call sub_1014F7E  +
add esp 10h +
mov dword_103609C eax +
cmp eax ebx +
jz loc_1017F5D  +
push edi  +
push offset aDxdiagInDirect  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push edi  +
mov ecx offset unk_10375F8 +
call sub_1010694  +
test eax eax +
jge loc_1017F4E  +
push 12Ch  +
call sub_10156D4  +
pop ecx  +
push edi  +
push offset aDxdiagInDirect  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_10360A0 ebx +
jz loc_1017FC0  +
push ebx  +
push edi  +
push 2BDh  +
push esi  +
mov ecx offset aDxdiagInDire_0 +
mov edx offset dword_10375A4 +
call sub_1014F7E  +
add esp 10h +
mov dword_10360A0 eax +
cmp eax ebx +
jz loc_1017FC0  +
push edi  +
push offset aDxdiagInDire_0  +
push esi  +
call sub_10128B0  +
add esp 0Ch +
push edi  +
mov ecx offset unk_10375F8 +
call sub_100F518  +
test eax eax +
jge loc_1017FB1  +
push 12Dh  +
call sub_10156D4  +
pop ecx  +
push edi  +
push offset aDxdiagInDire_0  +
push esi  +
call sub_101293F  +
add esp 0Ch +
cmp dword_10360AC ebx +
jz loc_1017FE2  +
push edi  +
mov ecx offset unk_10375F8 +
call sub_100F4A1  +
test eax eax +
jge loc_1017FE2  +
push 137h  +
call sub_10156D4  +
pop ecx  +
push 8  +
mov wParam ebx +
mov dword_10375B4 ebx +
call loc_101E637  +
pop ecx  +
cmp eax ebx +
jz loc_10181F1  +
mov ecx dword_10375B4 +
push 8  +
mov dword ptr [eax] 5 +
mov [eax+4] ecx +
mov dword_10375B4 eax +
call loc_101E637  +
pop ecx  +
cmp eax ebx +
jz loc_10181F1  +
mov ecx dword_10375B4 +
push 8  +
mov dword ptr [eax] 4 +
mov [eax+4] ecx +
mov dword_10375B4 eax +
call loc_101E637  +
pop ecx  +
cmp eax ebx +
jz loc_10181F1  +
mov ecx dword_10375B4 +
push 8  +
mov dword ptr [eax] 3 +
mov [eax+4] ecx +
mov dword_10375B4 eax +
call loc_101E637  +
pop ecx  +
cmp eax ebx +
jz loc_10181F1  +
mov ecx dword_10375B4 +
push 8  +
mov dword ptr [eax] 2 +
mov [eax+4] ecx +
mov dword_10375B4 eax +
call loc_101E637  +
pop ecx  +
cmp eax ebx +
jz loc_10181F1  +
mov ecx dword_10375B4 +
mov [eax] edi +
mov [eax+4] ecx +
mov dword_10375B4 eax +
mov dword_10375D0 edi +
cmp hHandle ebx +
jnz loc_10180EF  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push ebx  +
push offset loc_10170B1  +
push ebx  +
push ebx  +
call sub_10200CF  +
add esp 18h +
mov hHandle eax +
jmp loc_10180E7  +
push ebx  +
push hHandle  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jnz loc_10180EF  +
push 32h  +
call ds:Sleep  +
cmp hWnd ebx +
jz loc_10180CB  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
mov eax dword_10375B4 +
mov dword_10375D0 ebx +
cmp eax ebx +
jz loc_1018111  +
mov eax [eax] +
mov dword_10375D0 eax +
push edi  +
call ds:LeaveCriticalSection  +
cmp dword_10375D0 ebx +
jz loc_101818B  +
push ebx  +
push hHandle  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jnz loc_101818B  +
mov eax dword_10375D0 +
call sub_10157FD  +
push edi  +
call ds:EnterCriticalSection  +
mov eax dword_10375B4 +
xor ecx ecx +
jmp loc_101815D  +
mov edx [eax] +
cmp edx dword_10375D0 +
jz loc_1018163  +
mov ecx eax +
mov eax [eax+4] +
cmp eax ebx +
jnz loc_101814E  +
jmp loc_101817F  +
cmp ecx ebx +
jz loc_101816F  +
mov edx [eax+4] +
mov [ecx+4] edx +
jmp loc_1018178  +
mov ecx [eax+4] +
mov dword_10375B4 ecx +
push eax  +
call sub_101E6A1  +
pop ecx  +
push edi  +
call ds:LeaveCriticalSection  +
jmp loc_10180F4  +
cmp dword_1037828 ebx +
jz loc_10181B6  +
push 1F4h  +
call ds:Sleep  +
push ebx  +
push hHandle  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jz loc_1017E2F  +
cmp dword_1036080 ebx +
jnz loc_10181D7  +
push 1415h  +
push hDlg  +
call ds:GetDlgItem  +
push ebx  +
push eax  +
call ds:ShowWindow  +
push 0FFFFFFFFh  +
push hHandle  +
call ds:WaitForSingleObject  +
push hHandle  +
call ds:CloseHandle  +
push hObject  +
mov esi ds:CloseHandle +
call esi  +
push dword_10375DC  +
call esi  +
push dword_10375E0  +
call esi  +
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
jmp loc_101822C  +
mov ecx [eax+4] +
push eax  +
mov dword_10375B4 ecx +
call sub_101E6A1  +
pop ecx  +
mov eax dword_10375B4 +
cmp eax ebx +
jnz loc_101821C  +
lea ecx [ebp+var_1CC] +
mov [ebp+var_1CC] offset off_1004B94 +
call sub_101889F  +
xor eax eax +
jmp loc_1018335  +
push edi  +
lea ecx [ebp+var_9C] +
call sub_100BC31  +
mov eax [ebp+var_8C] +
inc eax  +
push eax  +
push 20h  +
lea ecx [ebp+var_9C] +
call sub_100AF11  +
cmp eax 0FFFFFFFFh +
jle loc_1018283  +
push eax  +
lea ecx [ebp+var_9C] +
call sub_100BC9C  +
lea ecx [ebp+var_134] +
call sub_100C141  +
lea ecx [ebp+var_2FC] +
call sub_100C141  +
push 104h  +
lea eax [ebp+var_134] +
push eax  +
push 64h  +
push ebx  +
call sub_10184FF  +
add esp 10h +
call sub_1018488  +
test eax eax +
push 200h  +
lea eax [ebp+var_2FC] +
push eax  +
jz loc_10182C9  +
push 75h  +
jmp loc_10182CB  +
push 66h  +
push ebx  +
call sub_10184FF  +
add esp 10h +
push 30h  +
push [ebp+lpDirectory]  +
push [ebp+lpFile]  +
push ebx  +
call ds:MessageBoxW  +
mov esi offset off_1004B94 +
lea ecx [ebp+var_2FC] +
mov [ebp+var_2FC] esi +
call sub_101889F  +
lea ecx [ebp+var_134] +
mov [ebp+var_134] esi +
call sub_101889F  +
lea ecx [ebp+var_9C] +
mov [ebp+var_9C] esi +
call sub_101889F  +
lea ecx [ebp+var_1CC] +
mov [ebp+var_1CC] esi +
call sub_101889F  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_101838E  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_101838E  +
xor eax eax +
inc eax  +
jmp loc_1018390  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 13Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_101840C  +
push offset aGetnativesyste  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1018405  +
lea ecx [ebp+SystemInfo] +
push ecx  +
call eax  +
push esi  +
call ds:FreeLibrary  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
pop esi  +
jnz loc_101842F  +
cmp word ptr [ebp+SystemInfo.anonymous_0] 6 +
jz loc_101842A  +
cmp word ptr [ebp+SystemInfo.anonymous_0] 9 +
jnz loc_101842F  +
xor eax eax +
inc eax  +
jmp loc_1018431  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset LibFileName  +
xor edi edi +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_101847D  +
push offset ProcName  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1018476  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call eax  +
mov edi eax +
push esi  +
call ds:FreeLibrary  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push offset LibFileName  +
xor bl bl +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_10184C8  +
push offset aWow64enablewow  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10184C1  +
push [ebp+arg_0]  +
call eax  +
mov bl al +
push esi  +
call ds:FreeLibrary  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
mov edx [ecx+0Ch] +
push esi  +
xor esi esi +
push 20h  +
push esi  +
push [ebp+arg_0]  +
mov byte ptr [ecx+14h] 0 +
mov [edx+eax*2-2] si +
call sub_100B008  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 1 +
jge loc_1018511  +
mov eax 80h +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor ebx ebx +
push ebx  +
jmp loc_1018553  +
mov edi [esi+8] +
mov eax [esi+0Ch] +
push edi  +
push eax  +
push [ebp+uID]  +
mov byte ptr [esi+14h] 1 +
push [ebp+hInstance]  +
call ds:LoadStringW  +
mov ebx eax +
cmp ebx 1 +
jge loc_1018540  +
cmp edi 1 +
jg loc_101856C  +
lea eax [edi-1] +
cmp ebx eax +
jl loc_101855F  +
lea eax [edi+edi] +
cmp eax 10000h +
push 0  +
jg loc_101856E  +
push eax  +
mov ecx esi +
call sub_100AE4F  +
test eax eax +
jge loc_101851C  +
push ebx  +
mov ecx esi +
call sub_10184D3  +
mov eax [esi+10h] +
jmp loc_1018577  +
push 0  +
mov ecx esi +
call sub_10184D3  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_101859A  +
cmp [esi] al +
jz loc_1018596  +
inc esi  +
dec edx  +
jnz loc_101858E  +
test edx edx +
jnz loc_101859F  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10185B0  +
test eax eax +
jl loc_10185AD  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jz loc_1018683  +
cmp [ebp+arg_0] esi +
jz loc_1018683  +
cmp [ebp+arg_8] esi +
jz loc_1018683  +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call ds:VariantInit  +
push 16h  +
pop eax  +
push [ebp+arg_4]  +
mov dword ptr [ebp+pvarg.anonymous_0+8] 1 +
mov word ptr [ebp+pvarg.anonymous_0] ax +
call ds:SysAllocString  +
mov ebx eax +
cmp ebx esi +
jnz loc_1018612  +
mov eax 8007000Eh +
jmp loc_1018688  +
mov eax ppv +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push esi  +
push ebx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0E0h]  +
push ebx  +
mov esi eax +
call ds:SysFreeString  +
test esi esi +
jge loc_1018643  +
mov eax esi +
jmp loc_1018688  +
cmp [ebp+var_4] 0 +
jnz loc_1018650  +
mov eax 80004005h +
jmp loc_1018688  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+var_4]  +
push eax  +
call dword ptr [ecx+54h]  +
test eax eax +
jl loc_1018688  +
cmp [ebp+var_8] 0 +
jz loc_1018649  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1018677  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
xor eax eax +
jmp loc_1018688  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jz loc_101875F  +
cmp [ebp+arg_0] esi +
jz loc_101875F  +
cmp [ebp+arg_8] esi +
jz loc_101875F  +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call ds:VariantInit  +
push 16h  +
pop eax  +
push [ebp+arg_4]  +
mov dword ptr [ebp+pvarg.anonymous_0+8] 3 +
mov word ptr [ebp+pvarg.anonymous_0] ax +
call ds:SysAllocString  +
mov ebx eax +
cmp ebx esi +
jnz loc_10186EE  +
mov eax 8007000Eh +
jmp loc_1018764  +
mov eax ppv +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push esi  +
push ebx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0E0h]  +
push ebx  +
mov esi eax +
call ds:SysFreeString  +
test esi esi +
jge loc_101871F  +
mov eax esi +
jmp loc_1018764  +
cmp [ebp+var_4] 0 +
jnz loc_101872C  +
mov eax 80004005h +
jmp loc_1018764  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+var_4]  +
push eax  +
call dword ptr [ecx+54h]  +
test eax eax +
jl loc_1018764  +
cmp [ebp+var_8] 0 +
jz loc_1018725  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1018753  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
xor eax eax +
jmp loc_1018764  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax dword_1037724 +
test eax eax +
jz loc_1018784  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword_1037724 0 +
mov eax dword_1037720 +
test eax eax +
jz loc_101879A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword_1037720 0 +
mov eax ppv +
test eax eax +
jz loc_10187B0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and ppv 0 +
cmp dword_1037728 0 +
jz locret_10187BF  +
jmp ds:CoUninitialize  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [esi+4] ecx +
call sub_100A89F  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
push edi  +
cmp eax ecx +
jb loc_101880A  +
xor eax eax +
jmp loc_1018893  +
cmp ecx 186A0h +
jnb loc_101888E  +
lea edi [eax+eax+1] +
jmp loc_101881A  +
add edi edi +
cmp edi ecx +
jb loc_1018818  +
mov eax [esi+4] +
xor ecx ecx +
test eax eax +
setz cl  +
push edi  +
push eax  +
mov [ebp+arg_0] ecx +
call sub_101EE2F  +
mov ebx eax +
xor eax eax +
pop ecx  +
pop ecx  +
cmp ebx eax +
jnz loc_1018843  +
mov eax 8007000Eh +
jmp loc_1018893  +
cmp [ebp+arg_4] eax +
jz loc_101884D  +
cmp [ebp+arg_0] eax +
jz loc_101885A  +
push edi  +
push eax  +
push ebx  +
call sub_101EDB0  +
add esp 0Ch +
xor eax eax +
mov ecx [esi+0Ch] +
cmp ecx eax +
jz loc_1018880  +
cmp [ebp+arg_4] eax +
jz loc_1018880  +
cmp [ebp+arg_0] eax +
jz loc_1018880  +
mov eax [esi+10h] +
inc eax  +
cmp edi eax +
jnb loc_1018875  +
mov eax edi +
push eax  +
push ecx  +
push ebx  +
call loc_101F0A0  +
add esp 0Ch +
mov [esi+4] ebx +
mov [esi+8] edi +
mov [esi+0Ch] ebx +
jmp loc_1018803  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov dword ptr [esi] offset off_1004B90 +
test eax eax +
jz loc_10188BC  +
push eax  +
call sub_101F40A  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101889F  +
test byte ptr [ebp+8] 1 +
jz loc_10188DD  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004B94 +
call sub_101889F  +
test byte ptr [ebp+8] 1 +
jz loc_1018909  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
and dword ptr [esi+4] 0 +
push eax  +
push 0  +
push ecx  +
mov [esi+8] eax +
mov [esi+0Ch] ecx +
call sub_101EDB0  +
add esp 0Ch +
and dword ptr [esi+10h] 0 +
mov byte ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_101896D  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_101896D  +
call sub_1018581  +
jmp loc_1018972  +
mov eax 80070057h +
test eax eax +
jge loc_101897D  +
test edi edi +
jz loc_101897D  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
call ds:CoInitialize  +
xor ecx ecx +
push offset ppv  +
test eax eax +
push offset stru_100A0EC  +
setnl cl  +
push 1  +
push ebx  +
push offset stru_100A0FC  +
mov dword_1037728 ecx +
call ds:CoCreateInstance  +
cmp eax ebx +
jl loc_1018AB8  +
cmp ppv ebx +
jnz loc_10189DA  +
mov eax 80004005h +
jmp loc_1018AB8  +
mov esi ds:SysAllocString +
push offset aXml  +
call esi  +
push offset aVersion1_0  +
mov [ebp+var_C] eax +
call esi  +
lea edx [ebp+var_4] +
push edx  +
mov [ebp+var_10] eax +
push [ebp+var_10]  +
mov eax ppv +
push [ebp+var_C]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0D0h]  +
test eax eax +
jl loc_1018A60  +
cmp [ebp+var_4] ebx +
jz loc_1018A60  +
lea eax [ebp+pvarg] +
push eax  +
mov [ebp+var_8] ebx +
call ds:VariantInit  +
mov eax ppv +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
sub esp 10h +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+48h]  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_1018A50  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8] ebx +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1018A60  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov esi ds:SysFreeString +
cmp [ebp+var_C] ebx +
jz loc_1018A70  +
push [ebp+var_C]  +
call esi  +
cmp [ebp+var_10] ebx +
jz loc_1018A7A  +
push [ebp+var_10]  +
call esi  +
mov eax ppv +
mov ecx [eax] +
push offset dword_1037720  +
push offset dword_100A0DC  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
jl loc_1018AB8  +
mov eax dword_1037720 +
cmp eax ebx +
jz loc_10189D0  +
push offset dword_1037724  +
push offset aDxdiag  +
push eax  +
call sub_10185B6  +
add esp 0Ch +
cmp eax ebx +
jl loc_1018AB8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jnz loc_1018AED  +
mov eax 8007000Eh +
jmp loc_1018B1D  +
mov eax ppv +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+108h]  +
mov esi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test esi esi +
jge loc_1018B1B  +
mov eax esi +
jmp loc_1018B1D  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jnz loc_1018B51  +
mov eax 8007000Eh +
jmp loc_1018B79  +
mov eax [ebx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+7Ch]  +
mov esi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test esi esi +
jge loc_1018B77  +
mov eax esi +
jmp loc_1018B79  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl locret_1018BFE  +
push esi  +
mov esi [ebp+var_4] +
test esi esi +
jnz loc_1018BB6  +
mov eax 80004005h +
jmp loc_1018BFD  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_1018692  +
add esp 0Ch +
test eax eax +
jl loc_1018BFD  +
push ebx  +
mov ebx [ebp+var_8] +
test ebx ebx +
jnz loc_1018BD9  +
mov eax 80004005h +
jmp loc_1018BFC  +
push edi  +
push [ebp+arg_8]  +
call sub_1018B26  +
pop ecx  +
mov edi eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
test edi edi +
jge loc_1018BF9  +
mov eax edi +
jmp loc_1018BFB  +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push ebx  +
mov ebx ecx +
jnz loc_1018C1A  +
mov eax 80070057h +
jmp loc_1018C8D  +
cmp [ebp+arg_8] ebx +
jz loc_1018C13  +
mov eax [ebx+10h] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jnb loc_1018C86  +
mov esi [ebp+arg_4] +
lea ecx [edi+esi] +
cmp ecx edi +
jb loc_1018C86  +
test esi esi +
jz loc_1018C3D  +
cmp ecx eax +
jbe loc_1018C41  +
sub eax edi +
mov esi eax +
mov ecx [ebp+arg_8] +
push 20h  +
push 0  +
push esi  +
call sub_100B008  +
test eax eax +
jge loc_1018C59  +
mov eax 8007000Eh +
jmp loc_1018C8B  +
test esi esi +
jz loc_1018C76  +
lea eax [esi+esi] +
push eax  +
mov eax [ebx+0Ch] +
lea eax [eax+edi*2] +
push eax  +
mov eax [ebp+arg_8] +
push dword ptr [eax+0Ch]  +
call loc_101F0A0  +
add esp 0Ch +
mov eax [ebp+arg_8] +
mov eax [eax+0Ch] +
xor ecx ecx +
mov [eax+esi*2] cx +
xor eax eax +
jmp loc_1018C8B  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+10h] +
mov eax [eax+0Ch] +
push edx  +
push eax  +
call sub_100B05E  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
mov dword ptr [esi] offset off_1004B90 +
call sub_1018915  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
push edi  +
mov byte ptr [eax+ecx-1] 0 +
mov edi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] edi +
call sub_101894B  +
test eax eax +
jl loc_1018D28  +
mov edi [ebp+var_4] +
mov [esi+10h] edi +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 138h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_9C] +
call sub_100C141  +
push edi  +
lea ecx [ebp+var_9C] +
call sub_1018C97  +
mov ebx [ebp+var_90] +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [eax] cx +
and [esi+10h] ecx +
mov [ebp+var_A0] 1 +
test ebx ebx +
jnz loc_1018DB5  +
mov esi 80070057h +
lea ecx [ebp+var_9C] +
mov [ebp+var_9C] offset off_1004B94 +
call sub_101889F  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
push 0Dh  +
push ebx  +
call sub_102047B  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jnz loc_1018E52  +
push ebx  +
lea ecx [ebp+var_138] +
call sub_10131C6  +
lea eax [ebp+var_138] +
push eax  +
mov ecx esi +
call sub_1018C97  +
lea ecx [ebp+var_138] +
mov [ebp+var_138] offset off_1004B94 +
call sub_101889F  +
jmp loc_1018E5E  +
xor eax eax +
push offset aToTest  +
mov [edi] ax +
push ebx  +
add edi 4 +
call sub_101FE49  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1018E36  +
cmp [ebp+var_A0] eax +
jnz loc_1018E27  +
push offset asc_1004BD0  +
mov ecx esi +
call sub_100BC6C  +
and [ebp+var_A0] 0 +
push ebx  +
mov ecx esi +
call sub_100BC6C  +
mov ebx edi +
test edi edi +
jz loc_1018E5E  +
cmp word ptr [edi] 0 +
jz loc_1018E5E  +
push 0Dh  +
push edi  +
call sub_102047B  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1018E5E  +
push edi  +
call ds:lstrlenW  +
cmp eax 2 +
jge loc_1018DFA  +
push offset asc_1004BCC  +
mov ecx esi +
call sub_100BC6C  +
xor esi esi +
jmp loc_1018D8F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
inc eax  +
push eax  +
mov esi ecx +
call sub_10187EF  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_1018F19  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edi ds:WideCharToMultiByte +
push ebx  +
mov [eax+ecx-1] bl +
mov eax [esi+8] +
push ebx  +
dec eax  +
push eax  +
push dword ptr [esi+0Ch]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
mov [esi+10h] eax +
cmp eax ebx +
jnz loc_1018F0D  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi+0Ch]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
push ebx  +
inc eax  +
push eax  +
mov ecx esi +
call sub_10187EF  +
mov eax [esi+8] +
push ebx  +
push ebx  +
dec eax  +
push eax  +
push dword ptr [esi+0Ch]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
mov [esi+10h] eax +
cmp eax ebx +
jnz loc_1018F0D  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
mov [eax+ecx-1] bl +
mov ecx esi +
call sub_1018CF9  +
mov eax 80004005h +
jmp loc_1018F1C  +
mov ecx [esi+10h] +
mov eax [esi+0Ch] +
mov [eax+ecx] bl +
dec dword ptr [esi+10h]  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call sub_101FA3A  +
mov esi ecx +
lea ecx [ebp-0A8h] +
call sub_100C141  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-0A8h] +
push offset aD  +
push eax  +
call sub_101362E  +
lea eax [ebp-0A8h] +
push eax  +
push edi  +
push esi  +
call sub_1018B82  +
add esp 18h +
lea ecx [ebp-0A8h] +
mov esi eax +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ecx +
test ebx ebx +
jnz loc_1018FAB  +
mov eax [edi+0Ch] +
mov [eax] bl +
and [edi+10h] ebx +
jmp loc_1018FE8  +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1018FD2  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
push ebx  +
mov [ebp+arg_0] esi +
call sub_100B238  +
test eax eax +
jge loc_1018FC8  +
mov [ebp+arg_0] esi +
cmp [ebp+arg_0] esi +
jnb loc_1018FDB  +
mov esi [ebp+arg_0] +
jmp loc_1018FDB  +
push ebx  +
call ds:lstrlenW  +
mov esi eax +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push esi  +
push ebx  +
call sub_1018E76  +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov ecx [ebp+arg_4] +
xor eax eax +
push ebx  +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_4] eax +
mov eax [ecx+4] +
push esi  +
push edi  +
mov [ebp+var_14] eax +
cmp eax [ecx+8] +
jz loc_101932B  +
jmp loc_1019022  +
mov eax [ebp+var_14] +
mov esi [eax] +
lea eax [ebp+var_10] +
push eax  +
push offset aInputrelatedde  +
push [ebp+arg_0]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
mov ebx [ebp+var_10] +
lea eax [esi+8] +
push eax  +
push offset aDescription  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
push dword ptr [esi]  +
mov edi offset aVendorid +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101932D  +
push dword ptr [esi+4]  +
mov edi offset aProductid +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101932D  +
lea eax [esi+0A0h] +
push eax  +
push offset aLocation  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [esi+138h] +
push eax  +
push offset aMatchingdevice  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [esi+1D0h] +
push eax  +
push offset aUpperfilters  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [esi+300h] +
push eax  +
push offset aLowerfilters  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [esi+268h] +
push eax  +
push offset aService  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [esi+398h] +
push eax  +
push offset aOemdata  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [esi+430h] +
push eax  +
push offset aFlags1  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [esi+4C8h] +
push eax  +
push offset aFlags2  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea ecx [esi+560h] +
call sub_100ADE2  +
test eax eax +
jz loc_10192F0  +
lea eax [ebp+var_C] +
push eax  +
push offset aDrivers  +
push ebx  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
mov eax [esi+564h] +
mov [ebp+var_8] eax +
cmp eax [esi+568h] +
jz loc_10192DF  +
jmp loc_10191BB  +
mov eax [ebp+var_8] +
mov ebx [eax] +
lea eax [ebp+var_4] +
push eax  +
push offset aDriver  +
push [ebp+var_C]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
mov edi [ebp+var_4] +
push ebx  +
push offset aName  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [ebx+98h] +
push eax  +
push offset aPath  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [ebx+130h] +
push eax  +
push offset aVersion  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
lea eax [ebx+1C8h] +
push eax  +
push offset aLanguage  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
push dword ptr [ebx+4D0h]  +
mov ecx [ebp+var_4] +
mov edi offset aBeta +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101932D  +
push dword ptr [ebx+4D4h]  +
mov ecx [ebp+var_4] +
mov edi offset aDebug +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101932D  +
lea eax [ebx+300h] +
push eax  +
push offset aDate  +
push [ebp+var_4]  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101932D  +
push dword ptr [ebx+4C8h]  +
mov ebx [ebp+var_4] +
mov edi offset aSize +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101932D  +
test ebx ebx +
jz loc_10192C9  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and [ebp+var_4] 0 +
add [ebp+var_8] 4 +
mov eax [ebp+var_8] +
cmp eax [esi+568h] +
jnz loc_10191B8  +
mov ebx [ebp+var_10] +
mov eax [ebp+var_C] +
test eax eax +
jz loc_10192F0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_C] 0 +
add esi 570h +
mov ecx esi +
call sub_100ADE2  +
test eax eax +
jz loc_101930A  +
push esi  +
push ebx  +
call sub_1018FF5  +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_1019318  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and [ebp+var_10] 0 +
add [ebp+var_14] 4 +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_14] +
cmp ecx [eax+8] +
jnz loc_101901F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
mov edi 800h +
mov esi offset dword_1037730 +
push edi  +
mov ecx esi +
call sub_100AE4F  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
mov byte_1037744 1 +
push dword_1037738  +
push dword_103773C  +
call sub_1012BE3  +
mov ecx esi +
mov byte_1037744 0 +
call sub_100C1B2  +
push 0  +
mov esi offset dword_10377C8 +
push edi  +
mov ecx esi +
call sub_10187EF  +
push 0  +
push dword_103773C  +
mov ecx esi +
call sub_1018F91  +
push dword_10377D4  +
push [ebp+arg_0]  +
call sub_10204A6  +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
call sub_101FA3A  +
mov eax [ebp+8] +
mov esi ecx +
lea ecx [ebp-270h] +
mov [ebp-30Ch] eax +
call sub_100C141  +
xor edi edi +
lea ecx [ebp-308h] +
mov [ebp-4] edi +
call sub_100C141  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
lea ecx [ebp-1D8h] +
call sub_100C141  +
lea ecx [ebp-140h] +
call sub_100C141  +
push offset a32bit  +
lea ecx [ebp-308h] +
mov byte ptr [ebp-4] 4 +
call sub_100BC31  +
push offset aUnicode  +
lea ecx [ebp-270h] +
call sub_100BC31  +
cmp dword_1037718 edi +
jz loc_101970E  +
cmp esi edi +
jnz loc_10194A4  +
xor esi esi +
mov edi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] edi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] edi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] edi +
call sub_101889F  +
lea ecx [ebp-308h] +
mov [ebp-308h] edi +
call sub_101889F  +
lea ecx [ebp-270h] +
mov [ebp-270h] edi +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn   +
lea eax [ebp-30Ch] +
push eax  +
push offset aSysteminformat  +
push dword_1037724  +
mov [ebp-30Ch] edi +
call sub_10185B6  +
add esp 0Ch +
cmp eax edi +
jge loc_10194CF  +
mov esi eax +
jmp loc_1019442  +
mov ebx [ebp-30Ch] +
lea eax [esi+1254h] +
push eax  +
push offset aTime  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+0EC4h] +
push eax  +
push offset aMachinename  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+108Ch] +
push eax  +
push offset aOperatingsyste  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+1124h] +
push eax  +
push offset aLanguage  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+414h] +
push eax  +
push offset aSystemmanufact  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+4ACh] +
push eax  +
push offset aSystemmodel  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+544h] +
push eax  +
push offset aBios  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+37Ch] +
push eax  +
push offset aProcessor  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+5DCh] +
push eax  +
push offset aMemory  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+674h] +
push eax  +
push offset aAvaliableosmem  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+11BCh] +
push eax  +
push offset aPagefile  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+11Ch] +
push eax  +
push offset aWindowsdir  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+83Ch] +
push eax  +
push offset aDirectxversion  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+2E4h] +
push eax  +
push offset aDxsetupparamet  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+96Ch] +
push eax  +
push offset aUserdpisetting  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+8D4h] +
push eax  +
push offset aSystemdpisetti  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
lea eax [esi+0A04h] +
push eax  +
push offset aDwmdpiscaling  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
add esi 24Ch +
push esi  +
push offset aDxdiagversion  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
cmp eax edi +
jl loc_10194C8  +
push 1  +
mov edi offset aDxdiagunicode +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_10194C8  +
push 0  +
mov edi offset aDxdiag64bit +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_10194C8  +
test ebx ebx +
jz loc_1019707  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
xor edi edi +
jmp loc_1019440  +
mov ebx offset asc_1005400 +
push ebx  +
push dword ptr [ebp-30Ch]  +
call sub_1019337  +
push offset aSystemInform_0  +
push dword ptr [ebp-30Ch]  +
call sub_1019337  +
push ebx  +
mov ebx [ebp-30Ch] +
push ebx  +
call sub_1019337  +
add esp 18h +
cmp esi edi +
jz loc_101988E  +
push dword ptr [esi+1260h]  +
push offset aTimeOfThisRepo  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+0ED0h]  +
push offset aMachineNameS  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+1098h]  +
push offset aOperatingSyste  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+1130h]  +
push offset aLanguageS  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+420h]  +
push offset aSystemManufact  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+4B8h]  +
push offset aSystemModelS  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [esi+550h]  +
push offset aBiosS  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+388h]  +
push offset aProcessorS  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+5E8h]  +
push offset aMemoryS  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+680h]  +
push offset aAvailableOsMem  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+11C8h]  +
push offset aPageFileS  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+128h]  +
push offset aWindowsDirS  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [esi+848h]  +
push offset aDirectxVersion  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+2F0h]  +
push offset aDxSetupParamet  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+978h]  +
push offset aUserDpiSetting  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+8E0h]  +
push offset aSystemDpiSetti  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+0A10h]  +
push offset aDwmDpiScalingS  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-264h]  +
push dword ptr [ebp-2FCh]  +
push dword ptr [esi+258h]  +
push offset aDxdiagVersionS  +
push ebx  +
call sub_1019337  +
add esp 50h +
mov ecx [ebp-9Ch] +
xor eax eax +
mov [ecx] ax +
mov eax dword_103759C +
mov [ebp-98h] edi +
mov esi offset asc_1005020 +
cmp eax edi +
jz loc_10198EA  +
push eax  +
lea eax [ebp-140h] +
push offset aSystemInformat  +
push eax  +
call sub_101362E  +
add esp 0Ch +
cmp [ebp-98h] edi +
jbe loc_10198D6  +
push esi  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push edi  +
push edi  +
lea eax [ebp-140h] +
push eax  +
lea ecx [ebp-0A8h] +
call sub_1012BAA  +
mov eax dword_10375A0 +
cmp eax edi +
jz loc_1019930  +
push eax  +
lea eax [ebp-140h] +
push offset aDirect3dStageD  +
push eax  +
call sub_101362E  +
add esp 0Ch +
cmp [ebp-98h] edi +
jbe loc_101991C  +
push esi  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push edi  +
push edi  +
lea eax [ebp-140h] +
push eax  +
lea ecx [ebp-0A8h] +
call sub_1012BAA  +
mov eax dword_10375A4 +
cmp eax edi +
jz loc_1019976  +
push eax  +
lea eax [ebp-140h] +
push offset aDirectsoundSta  +
push eax  +
call sub_101362E  +
add esp 0Ch +
cmp [ebp-98h] edi +
jbe loc_1019962  +
push esi  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push edi  +
push edi  +
lea eax [ebp-140h] +
push eax  +
lea ecx [ebp-0A8h] +
call sub_1012BAA  +
mov eax dword_10375A8 +
cmp eax edi +
jz loc_10199BC  +
push eax  +
lea eax [ebp-140h] +
push offset aDirectinputSta  +
push eax  +
call sub_101362E  +
add esp 0Ch +
cmp [ebp-98h] edi +
jbe loc_10199A8  +
push esi  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push edi  +
push edi  +
lea eax [ebp-140h] +
push eax  +
lea ecx [ebp-0A8h] +
call sub_1012BAA  +
mov eax dword_10375AC +
cmp eax edi +
jz loc_1019A02  +
push eax  +
lea eax [ebp-140h] +
push offset aDirectshowStag  +
push eax  +
call sub_101362E  +
add esp 0Ch +
cmp [ebp-98h] edi +
jbe loc_10199EE  +
push esi  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
push edi  +
push edi  +
lea eax [ebp-140h] +
push eax  +
lea ecx [ebp-0A8h] +
call sub_1012BAA  +
cmp [ebp-98h] edi +
jz loc_1019A69  +
push offset aCrashedIn  +
lea ecx [ebp-3A4h] +
call sub_10131C6  +
lea eax [ebp-3A4h] +
push eax  +
lea ecx [ebp-1D8h] +
call sub_1018C97  +
lea ecx [ebp-3A4h] +
mov dword ptr [ebp-3A4h] offset off_1004B94 +
call sub_101889F  +
push edi  +
push edi  +
lea eax [ebp-0A8h] +
push eax  +
lea ecx [ebp-1D8h] +
call sub_1012BAA  +
push dword ptr [ebp-1CCh]  +
push offset aDxdiagPrevious  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
push offset asc_1004BCC  +
push ebx  +
call sub_1019337  +
pop ecx  +
pop ecx  +
jmp loc_1019440  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
test esi esi +
jnz loc_1019AA0  +
mov eax 80070057h +
jmp loc_1019AE3  +
lea ecx [ebp+var_9C] +
call sub_100C141  +
lea eax [ebp+var_9C] +
push eax  +
push edi  +
call sub_1018D36  +
push [ebp+var_90]  +
push offset aS  +
push esi  +
call sub_1019337  +
add esp 14h +
lea ecx [ebp+var_9C] +
mov [ebp+var_9C] offset off_1004B94 +
call sub_101889F  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
call sub_101FA3A  +
mov eax [ebp+8] +
mov edi ecx +
xor ebx ebx +
mov [ebp-0B0h] eax +
cmp edi ebx +
jnz loc_1019B1F  +
mov eax 80070057h +
call sub_101FA8E  +
retn   +
mov [ebp-0D0h] ebx +
mov [ebp-0CCh] ebx +
push edi  +
lea ecx [ebp-0D4h] +
mov [ebp-4] ebx +
call sub_100AB7A  +
mov esi eax +
mov [ebp-0C4h] ebx +
mov [ebp-0C0h] ebx +
push edi  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebp-4] 1 +
call sub_100ABD2  +
mov [ebp-0BCh] eax +
mov [ebp-0DCh] ebx +
mov [ebp-0D8h] ebx +
push edi  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 2 +
call sub_100AC82  +
mov [ebp-0B8h] eax +
cmp dword_1037718 ebx +
jz loc_1019D46  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
lea eax [ebp-0ACh] +
push eax  +
push offset aDxdiagnotes  +
push dword_1037724  +
mov byte ptr [ebp-4] 3 +
mov [ebp-0ACh] ebx +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
cmp edi ebx +
jge loc_1019C09  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 1 +
call sub_100ACAC  +
lea ecx [ebp-0C8h] +
mov [ebp-4] bl +
call sub_100ABFC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0D4h] +
call sub_100ABA4  +
mov eax edi +
jmp loc_1019B19  +
mov edi esi +
cmp esi ebx +
jz loc_1019C4C  +
lea eax [ebp-0A8h] +
push eax  +
lea eax [edi+1CE8h] +
push eax  +
call sub_1018D36  +
lea eax [ebp-0A8h] +
push eax  +
push offset aDisplaytab  +
push dword ptr [ebp-0ACh]  +
call sub_1018B82  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_1019C57  +
mov edi [edi+22E0h] +
cmp edi ebx +
jnz loc_1019C0F  +
mov edi [ebp-0BCh] +
jmp loc_1019CD8  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 1 +
call sub_100ACAC  +
lea ecx [ebp-0C8h] +
mov [ebp-4] bl +
call sub_100ABFC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0D4h] +
call sub_100ABA4  +
mov eax esi +
jmp loc_1019B19  +
lea eax [ebp-0A8h] +
push eax  +
lea eax [edi+0B48h] +
push eax  +
call sub_1018D36  +
lea eax [ebp-0A8h] +
push eax  +
push offset aSoundtab  +
push dword ptr [ebp-0ACh]  +
call sub_1018B82  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_1019C57  +
mov edi [edi+0DB0h] +
cmp edi ebx +
jnz loc_1019C9F  +
mov eax [ebp-0B8h] +
cmp eax ebx +
jz loc_1019D1C  +
lea ecx [ebp-0A8h] +
push ecx  +
add eax 9Ch +
push eax  +
call sub_1018D36  +
lea eax [ebp-0A8h] +
push eax  +
push offset aInputtab  +
push dword ptr [ebp-0ACh]  +
call sub_1018B82  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jl loc_1019C57  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_1019D2C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
jmp loc_1019E97  +
mov edi offset asc_1005714 +
push edi  +
push dword ptr [ebp-0B0h]  +
call sub_1019337  +
push offset aDxdiagNotes  +
push dword ptr [ebp-0B0h]  +
call sub_1019337  +
push edi  +
push dword ptr [ebp-0B0h]  +
call sub_1019337  +
add esp 18h +
mov dword ptr [ebp-0ACh] 1 +
mov edi esi +
mov [ebp-0B4h] esi +
cmp esi ebx +
jz loc_1019DE1  +
jmp loc_1019D94  +
mov edi [ebp-0B4h] +
push dword ptr [ebp-0ACh]  +
mov esi [ebp-0B0h] +
push offset aDisplayTabD  +
push esi  +
call sub_1019337  +
add esp 0Ch +
cmp edi ebx +
jz loc_1019DCB  +
cmp [edi+1CF4h] ebx +
jz loc_1019DCB  +
add edi 1CE8h +
call sub_1019A80  +
mov edi [ebp-0B4h] +
mov edi [edi+22E0h] +
inc dword ptr [ebp-0ACh]  +
mov [ebp-0B4h] edi +
cmp edi ebx +
jnz loc_1019D8E  +
mov edi [ebp-0BCh] +
mov dword ptr [ebp-0ACh] 1 +
mov [ebp-0B4h] edi +
cmp edi ebx +
jz loc_1019E50  +
jmp loc_1019E03  +
mov edi [ebp-0B4h] +
push dword ptr [ebp-0ACh]  +
mov esi [ebp-0B0h] +
push offset aSoundTabD  +
push esi  +
call sub_1019337  +
add esp 0Ch +
cmp edi ebx +
jz loc_1019E3A  +
cmp [edi+0B54h] ebx +
jz loc_1019E3A  +
add edi 0B48h +
call sub_1019A80  +
mov edi [ebp-0B4h] +
mov edi [edi+0DB0h] +
inc dword ptr [ebp-0ACh]  +
mov [ebp-0B4h] edi +
cmp edi ebx +
jnz loc_1019DFD  +
mov esi [ebp-0B8h] +
cmp esi ebx +
jz loc_1019E85  +
push offset aInputTab  +
push dword ptr [ebp-0B0h]  +
call sub_1019337  +
pop ecx  +
pop ecx  +
cmp [esi+0A8h] ebx +
jz loc_1019E85  +
lea edi [esi+9Ch] +
mov esi [ebp-0B0h] +
call sub_1019A80  +
push offset asc_1004BCC  +
push dword ptr [ebp-0B0h]  +
call sub_1019337  +
pop ecx  +
pop ecx  +
xor esi esi +
jmp loc_1019C6C  +
***
call sub_101FA3A  +
mov ebx ecx +
mov edi edx +
lea ecx [ebp-0A8h] +
mov [ebp-0ACh] ebx +
mov [ebp-0D0h] edi +
call sub_100C141  +
xor esi esi +
mov ecx edi +
mov [ebp-4] esi +
call sub_100ADE2  +
test eax eax +
jnz loc_1019EFA  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn   +
cmp dword_1037718 esi +
jz loc_101A21E  +
lea eax [ebp-0B4h] +
push eax  +
push offset aLogicaldisks  +
push dword_1037724  +
mov [ebp-0B4h] esi +
mov [ebp-0B8h] esi +
mov [ebp-0C0h] esi +
mov [ebp-0ACh] esi +
call sub_10185B6  +
add esp 0Ch +
cmp eax esi +
jge loc_1019F40  +
mov esi eax +
jmp loc_1019EDD  +
mov eax [edi+4] +
mov [ebp-0B0h] eax +
cmp eax [edi+8] +
jz loc_101A205  +
jmp loc_1019F5A  +
mov eax [ebp-0B0h] +
mov ebx [eax] +
lea eax [ebp-0B8h] +
push eax  +
push offset aLogicaldisk  +
push dword ptr [ebp-0B4h]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
mov esi [ebp-0B8h] +
push ebx  +
push offset aDriveletter  +
push esi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [ebx+98h] +
push eax  +
push offset aFreespace  +
push esi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [ebx+130h] +
push eax  +
push offset aMaxspace  +
push esi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [ebx+1C8h] +
push eax  +
push offset aFilesystem  +
push esi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [ebx+260h] +
push eax  +
push offset aModel  +
push esi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [ebx+2F8h] +
push eax  +
push offset aPnpdeviceid  +
push esi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
push dword ptr [ebx+390h]  +
mov edi offset aHarddriveindex +
mov ecx esi +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_1019F3C  +
lea eax [ebp-0C0h] +
push eax  +
push offset aDrivers  +
push esi  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
mov eax [ebx+398h] +
mov [ebp-0C8h] eax +
cmp eax [ebx+39Ch] +
jz loc_101A1C1  +
jmp loc_101A078  +
mov eax [ebp-0C8h] +
mov esi [eax] +
lea eax [ebp-0ACh] +
push eax  +
push offset aDriver  +
push dword ptr [ebp-0C0h]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
mov edi [ebp-0ACh] +
push esi  +
push offset aName  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [esi+98h] +
push eax  +
push offset aPath  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [esi+130h] +
push eax  +
push offset aVersion  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
lea eax [esi+1C8h] +
push eax  +
push offset aLanguage  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
push dword ptr [esi+4D0h]  +
mov ecx [ebp-0ACh] +
mov edi offset aBeta +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_1019F3C  +
push dword ptr [esi+4D4h]  +
mov ecx [ebp-0ACh] +
mov edi offset aDebug +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_1019F3C  +
lea eax [esi+300h] +
push eax  +
push offset aDate  +
push dword ptr [ebp-0ACh]  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_1019F3C  +
push dword ptr [esi+4C8h]  +
mov esi [ebp-0ACh] +
mov edi offset aSize +
mov ecx esi +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_1019F3C  +
test esi esi +
jz loc_101A1A2  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-0ACh] 0 +
add dword ptr [ebp-0C8h] 4 +
mov eax [ebp-0C8h] +
cmp eax [ebx+39Ch] +
jnz loc_101A072  +
mov esi [ebp-0B8h] +
mov eax [ebp-0C0h] +
test eax eax +
jz loc_101A1D8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0C0h] 0 +
test esi esi +
jz loc_101A1E9  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-0B8h] 0 +
add dword ptr [ebp-0B0h] 4 +
mov eax [ebp-0D0h] +
mov ecx [ebp-0B0h] +
cmp ecx [eax+8] +
jnz loc_1019F54  +
mov eax [ebp-0B4h] +
test eax eax +
jz loc_101A4B3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101A4B3  +
mov esi offset asc_1005940 +
push esi  +
push ebx  +
call sub_1019337  +
push offset aDiskDvdCdRomDr  +
push ebx  +
call sub_1019337  +
push esi  +
push ebx  +
call sub_1019337  +
mov eax [edi+4] +
add esp 18h +
mov [ebp-0B0h] eax +
cmp eax [edi+8] +
jz loc_101A4B3  +
jmp loc_101A25F  +
mov ebx [ebp-0ACh] +
mov eax [ebp-0B0h] +
mov esi [eax] +
push dword ptr [esi+0Ch]  +
push offset aDriveS  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+0A4h]  +
call sub_101ECD7  +
mov ecx [esi+13Ch] +
shrd eax edx +
shr edx 14h +
push ecx  +
mov [ebp-0BCh] eax +
mov [ebp-0B8h] edx +
call sub_101ECD7  +
mov ebx eax +
mov edi edx +
shrd ebx edi +
mov eax ebx +
and eax 1 +
shr edi 14h +
add esp 14h +
add ebx eax +
adc edi 0 +
mov eax ebx +
or eax edi +
jz loc_101A3AB  +
mov ecx [ebp-0BCh] +
xor eax eax +
and ecx 1 +
add ecx [ebp-0BCh] +
adc eax [ebp-0B8h] +
and dword ptr [ebp-0C4h] 0 +
mov [ebp-0C0h] eax +
and dword ptr [ebp-0C0h] 80000000h +
and eax 7FFFFFFFh +
mov [ebp-0D8h] ecx +
mov [ebp-0D4h] eax +
fild  qword ptr [ebp-0D8h] +
push ecx  +
fild  qword ptr [ebp-0C4h] +
push ecx  +
fchs   +
faddp st(1) st +
fdiv  ds:dbl_10058E0 +
fstp  dword ptr [ebp-0B4h] +
fld  dword ptr [ebp-0B4h] +
fstp  [esp+0Ch+var_C] +
push offset aFreeSpace0_1fG  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
and dword ptr [ebp-0CCh] 0 +
mov [ebp-0C8h] edi +
and dword ptr [ebp-0C8h] 80000000h +
and edi 7FFFFFFFh +
mov [ebp-0E0h] ebx +
mov [ebp-0DCh] edi +
fild  qword ptr [ebp-0E0h] +
add esp 8 +
fild  qword ptr [ebp-0CCh] +
fchs   +
faddp st(1) st +
fdiv  ds:dbl_10058E0 +
fstp  dword ptr [ebp-0B4h] +
fld  dword ptr [ebp-0B4h] +
fstp  [esp+0Ch+var_C] +
push offset aTotalSpace0_1f  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
push dword ptr [esi+1D4h]  +
push offset aFileSystemS  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
add esp 1Ch +
cmp dword ptr [esi+270h] 0 +
jnz loc_101A3C8  +
push offset aModelNA  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
pop ecx  +
pop ecx  +
jmp loc_101A3E1  +
push dword ptr [esi+26Ch]  +
push offset aModelS  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
add esp 0Ch +
lea ecx [esi+394h] +
call sub_100ADE2  +
test eax eax +
jz loc_101A485  +
mov ebx [esi+398h] +
jmp loc_101A479  +
mov edi [ebx] +
cmp dword ptr [edi+140h] 0 +
jbe loc_101A451  +
push dword ptr [edi+1D4h]  +
lea eax [ebp-0A8h] +
push dword ptr [edi+13Ch]  +
push offset aSS  +
push eax  +
call sub_101362E  +
push dword ptr [edi+4C8h]  +
push dword ptr [edi+30Ch]  +
push dword ptr [ebp-9Ch]  +
push dword ptr [edi+0A4h]  +
push offset aDriverSSSDByte  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
add esp 28h +
jmp loc_101A476  +
push dword ptr [edi+4C8h]  +
push dword ptr [edi+30Ch]  +
push dword ptr [edi+0A4h]  +
push offset aDriverSSDBytes  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
add esp 14h +
add ebx 4 +
cmp ebx [esi+39Ch] +
jnz loc_101A3FC  +
push offset asc_1004BCC  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
add dword ptr [ebp-0B0h] 4 +
mov eax [ebp-0D0h] +
pop ecx  +
pop ecx  +
mov ecx [ebp-0B0h] +
cmp ecx [eax+8] +
jnz loc_101A253  +
xor esi esi +
jmp loc_1019EDD  +
***
call sub_101FA3A  +
mov ebx ecx +
lea ecx [ebp-0A8h] +
mov [ebp-0ACh] ebx +
mov edi edx +
call sub_100C141  +
xor esi esi +
mov [ebp-4] esi +
cmp edi esi +
jnz loc_101A509  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn   +
cmp dword_1037718 esi +
jz loc_101A779  +
lea eax [ebp-0C0h] +
push eax  +
push offset aSystemdevices  +
push dword_1037724  +
mov [ebp-0C0h] esi +
mov [ebp-0B8h] esi +
mov [ebp-0B4h] esi +
mov [ebp-0BCh] esi +
call sub_10185B6  +
add esp 0Ch +
cmp eax esi +
jge loc_101A54F  +
mov esi eax +
jmp loc_101A4EC  +
mov [ebp-0ACh] edi +
jmp loc_101A55D  +
mov edi [ebp-0ACh] +
lea eax [ebp-0B8h] +
push eax  +
push offset aSystemdevice  +
push dword ptr [ebp-0C0h]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
mov ebx [ebp-0B8h] +
push edi  +
push offset aName  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
lea eax [edi+98h] +
push eax  +
push offset aDevicekey  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
lea eax [ebp-0B4h] +
push eax  +
push offset aDrivers  +
push ebx  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
mov eax [edi+134h] +
mov [ebp-0B0h] eax +
cmp eax [edi+138h] +
jz loc_101A724  +
jmp loc_101A5E6  +
mov eax [ebp-0B0h] +
mov esi [eax] +
lea eax [ebp-0BCh] +
push eax  +
push offset aDriver  +
push dword ptr [ebp-0B4h]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
mov ebx [ebp-0BCh] +
push esi  +
push offset aName  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
lea eax [esi+98h] +
push eax  +
push offset aPath  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
lea eax [esi+130h] +
push eax  +
push offset aVersion  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
lea eax [esi+1C8h] +
push eax  +
push offset aLanguage  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
push dword ptr [esi+4D0h]  +
mov edi offset aBeta +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101A54B  +
push dword ptr [esi+4D4h]  +
mov edi offset aDebug +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101A54B  +
lea eax [esi+300h] +
push eax  +
push offset aDate  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101A54B  +
push dword ptr [esi+4C8h]  +
mov edi offset aSize +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101A54B  +
test ebx ebx +
jz loc_101A6FD  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and dword ptr [ebp-0BCh] 0 +
add dword ptr [ebp-0B0h] 4 +
mov eax [ebp-0ACh] +
mov ecx [ebp-0B0h] +
cmp ecx [eax+138h] +
jnz loc_101A5E0  +
mov ebx [ebp-0B8h] +
mov edi eax +
mov eax [ebp-0B4h] +
test eax eax +
jz loc_101A73B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-0B4h] 0 +
test ebx ebx +
jz loc_101A74C  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and dword ptr [ebp-0B8h] 0 +
mov edi [edi+148h] +
mov [ebp-0ACh] edi +
test edi edi +
jnz loc_101A557  +
mov eax [ebp-0C0h] +
test eax eax +
jz loc_101A89F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101A89F  +
mov esi offset asc_1005B44 +
push esi  +
push ebx  +
call sub_1019337  +
push offset aSystemDevices  +
push ebx  +
call sub_1019337  +
push esi  +
push ebx  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [edi+140h] 0 +
jnz loc_101A891  +
push dword ptr [edi+0Ch]  +
push offset aNameS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+0A4h]  +
push offset aDeviceIdS_0  +
push ebx  +
call sub_1019337  +
add esp 18h +
lea ecx [edi+130h] +
call sub_100ADE2  +
test eax eax +
jnz loc_101A7EA  +
push offset aDriverNA  +
push ebx  +
call sub_1019337  +
pop ecx  +
pop ecx  +
jmp loc_101A884  +
mov ebx [edi+134h] +
cmp ebx [edi+138h] +
jz loc_101A87E  +
mov esi [ebx] +
cmp dword ptr [esi+140h] 0 +
jbe loc_101A851  +
push dword ptr [esi+1D4h]  +
lea eax [ebp-0A8h] +
push dword ptr [esi+13Ch]  +
push offset aSS  +
push eax  +
call sub_101362E  +
push dword ptr [esi+4C8h]  +
push dword ptr [esi+30Ch]  +
push dword ptr [ebp-9Ch]  +
push dword ptr [esi+0A4h]  +
push offset aDriverSSSDBy_0  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
add esp 28h +
jmp loc_101A876  +
push dword ptr [esi+4C8h]  +
push dword ptr [esi+30Ch]  +
push dword ptr [esi+0A4h]  +
push offset aDriverSSDByt_0  +
push dword ptr [ebp-0ACh]  +
call sub_1019337  +
add esp 14h +
add ebx 4 +
jmp loc_101A7F0  +
mov ebx [ebp-0ACh] +
push offset asc_1004BCC  +
push ebx  +
call sub_1019337  +
pop ecx  +
pop ecx  +
mov edi [edi+148h] +
test edi edi +
jnz loc_101A79A  +
xor esi esi +
jmp loc_101A4EC  +
***
mov edi edi +
push esi  +
mov esi [eax+18BCh] +
test esi esi +
jnz loc_101A8C7  +
push offset aDeinterlaceCap  +
push ebx  +
call sub_1019337  +
pop ecx  +
pop ecx  +
jmp loc_101A925  +
push edi  +
xor edi edi +
inc edi  +
test edi edi +
jz loc_101A8D6  +
push offset aDeinterlaceC_0  +
jmp loc_101A8DB  +
push offset asc_1005C3C  +
push ebx  +
call sub_1019337  +
pop ecx  +
pop ecx  +
push dword ptr [esi+1D4h]  +
xor edi edi +
push dword ptr [esi+268h]  +
push dword ptr [esi+264h]  +
push dword ptr [esi+260h]  +
push dword ptr [esi+0A4h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+13Ch]  +
push offset aSFormatInOutSS  +
push ebx  +
call sub_1019337  +
mov esi [esi+270h] +
add esp 24h +
test esi esi +
jnz loc_101A8CB  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call sub_101FA3A  +
mov eax [ebp+8] +
mov ebx ecx +
mov edi edx +
lea ecx [ebp-0A8h] +
mov [ebp-3ACh] edi +
mov [ebp-3B4h] eax +
call sub_100C141  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1D8h] +
call sub_100C141  +
lea ecx [ebp-140h] +
call sub_100C141  +
lea ecx [ebp-308h] +
call sub_100C141  +
lea ecx [ebp-270h] +
call sub_100C141  +
cmp dword_1037718 0 +
mov byte ptr [ebp-4] 4 +
mov esi offset off_1004B94 +
jz loc_101B44B  +
xor eax eax +
mov [ebp-3ACh] eax +
mov [ebp-3B0h] eax +
mov [ebp-3A4h] eax +
lea eax [ebp-3ACh] +
push eax  +
push offset aDirectsound  +
push dword_1037724  +
call sub_10185B6  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jge loc_101AA37  +
mov esi offset off_1004B94 +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-308h] +
mov [ebp-308h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax ebx +
call sub_101FA8E  +
retn   +
lea eax [ebp-3B0h] +
push eax  +
push offset aSounddevices  +
push dword ptr [ebp-3ACh]  +
call sub_10185B6  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jl loc_101A9D5  +
mov ebx edi +
test edi edi +
jz loc_101B135  +
lea eax [ebp-3A4h] +
push eax  +
push offset aSounddevice  +
push dword ptr [ebp-3B0h]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1E8  +
mov eax [ebx+0A30h] +
sub eax 0 +
jz loc_101AABF  +
dec eax  +
jz loc_101AAB8  +
dec eax  +
jz loc_101AAB1  +
dec eax  +
lea ecx [ebp-0A8h] +
jz loc_101AAAA  +
push offset aUnknown  +
jmp loc_101AACA  +
push offset aFull  +
jmp loc_101AACA  +
push offset aStandard  +
jmp loc_101AAC4  +
push offset aBasic  +
jmp loc_101AAC4  +
push offset aEmulationOnly  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-3A4h] +
lea eax [ebx+2FCh] +
push eax  +
push offset aDescription  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+9Ch] +
push eax  +
push offset aHardwareid  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+1CCh] +
push eax  +
push offset aManufacturerid  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+264h] +
push eax  +
push offset aProductid  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+984h] +
push eax  +
push offset aType  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+394h] +
push eax  +
push offset aDrivername  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+4C4h] +
push eax  +
push offset aDriverversion  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+55Ch] +
push eax  +
push offset aDriverlanguage  +
push edi  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+0A20h]  +
mov ecx [ebp-3A4h] +
mov edi offset aDriverbeta +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+0A24h]  +
mov ecx [ebp-3A4h] +
mov edi offset aDriverdebug +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
lea ecx [ebp-3A0h] +
call sub_100C141  +
cmp dword ptr [ebx+0A2Ch] 0 +
mov byte ptr [ebp-4] 5 +
jz loc_101AC59  +
cmp dword ptr [ebx+0A28h] 0 +
mov eax offset aYes +
jnz loc_101AC56  +
mov eax offset aNo +
push eax  +
jmp loc_101AC5E  +
push offset aNA  +
lea ecx [ebp-3A0h] +
call sub_100BC31  +
lea eax [ebp-3A0h] +
push eax  +
push offset aDriverwhqllogo  +
push dword ptr [ebp-3A4h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1D7  +
lea eax [ebx+724h] +
push eax  +
push offset aDriverdate  +
push dword ptr [ebp-3A4h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A1Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aDriversize +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
lea eax [ebx+854h] +
push eax  +
push offset aOtherfiles  +
push dword ptr [ebp-3A4h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1D7  +
lea eax [ebx+8ECh] +
push eax  +
push offset aDriverprovider  +
push dword ptr [ebp-3A4h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1D7  +
lea eax [ebp-0A8h] +
push eax  +
push offset aHwaccellevel  +
push dword ptr [ebp-3A4h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A3Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aDefaultsoundpl +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A40h]  +
mov ecx [ebp-3A4h] +
mov edi offset aDefaultvoicepl +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A44h]  +
mov ecx [ebp-3A4h] +
mov edi offset aVoicemanager +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A48h]  +
mov ecx [ebp-3A4h] +
mov edi offset aEax20listener +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A4Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aEax20source +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A50h]  +
mov ecx [ebp-3A4h] +
mov edi offset aI3dl2listener +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A54h]  +
mov ecx [ebp-3A4h] +
mov edi offset aI3dl2source +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A58h]  +
mov ecx [ebp-3A4h] +
mov edi offset aZoomfx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A5Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aFlags +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A60h]  +
mov ecx [ebp-3A4h] +
mov edi offset aMinsecondarysa +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A64h]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxsecondarysa +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A68h]  +
mov ecx [ebp-3A4h] +
mov edi offset aPrimarybuffers +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A6Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxhwmixingall +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A70h]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxhwmixingsta +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A74h]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxhwmixingstr +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A78h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFreehwmixingal +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A7Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aFreehwmixingst +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A80h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFreehwmixing_0 +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A84h]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxhw3dallbuff +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A88h]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxhw3dstaticb +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A8Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxhw3dstreami +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A90h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFreehw3dallbuf +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A94h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFreehw3dstatic +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A98h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFreehw3dstream +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0A9Ch]  +
mov ecx [ebp-3A4h] +
mov edi offset aTotalhwmembyte +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0AA0h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFreehwmembytes +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0AA4h]  +
mov ecx [ebp-3A4h] +
mov edi offset aMaxcontigfreeh +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0AA8h]  +
mov ecx [ebp-3A4h] +
mov edi offset aUnlocktransfer +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
push dword ptr [ebx+0AACh]  +
mov ecx [ebp-3A4h] +
mov edi offset aPlaycpuoverhea +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1D7  +
mov eax [ebp-3A4h] +
test eax eax +
jz loc_101B112  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-3A4h] 0 +
lea ecx [ebp-3A0h] +
mov byte ptr [ebp-4] 4 +
mov [ebp-3A0h] esi +
call sub_101889F  +
mov ebx [ebx+0DB0h] +
test ebx ebx +
jnz loc_101AA65  +
mov eax [ebp-3B0h] +
test eax eax +
jz loc_101B14C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-3B0h] 0 +
lea eax [ebp-3B0h] +
push eax  +
push offset aSoundcapturede  +
push dword ptr [ebp-3ACh]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1E8  +
mov ebx [ebp-3B4h] +
jmp loc_101B40E  +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-308h] +
mov [ebp-308h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax [ebp-3A8h] +
jmp loc_101AA31  +
lea ecx [ebp-3A0h] +
mov [ebp-3A0h] esi +
call sub_101889F  +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-308h] +
mov [ebp-308h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax edi +
jmp loc_101AA31  +
lea eax [ebp-3A4h] +
push eax  +
push offset aSoundcapture_0  +
push dword ptr [ebp-3B0h]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1E8  +
mov edi [ebp-3A4h] +
push ebx  +
push offset aDescription  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+130h] +
push eax  +
push offset aDrivername  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+260h] +
push eax  +
push offset aDriverversion  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-3A8h] eax +
test eax eax +
jl loc_101B177  +
lea eax [ebx+2F8h] +
push eax  +
push offset aDriverlanguage  +
push edi  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+5F4h]  +
mov ecx [ebp-3A4h] +
mov edi offset aDriverbeta +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+5F8h]  +
mov ecx [ebp-3A4h] +
mov edi offset aDriverdebug +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
lea eax [ebx+4C0h] +
push eax  +
push offset aDriverdate  +
push dword ptr [ebp-3A4h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+5F0h]  +
mov ecx [ebp-3A4h] +
mov edi offset aDriversize +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+5FCh]  +
mov ecx [ebp-3A4h] +
mov edi offset aDefaultsoundre +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+600h]  +
mov ecx [ebp-3A4h] +
mov edi offset aDefaultvoicere +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+604h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFlags +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101B1E8  +
push dword ptr [ebx+608h]  +
mov ecx [ebp-3A4h] +
mov edi offset aFormats +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101B444  +
mov eax [ebp-3A4h] +
test eax eax +
jz loc_101B408  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-3A4h] 0 +
mov ebx [ebx+610h] +
test ebx ebx +
jnz loc_101B244  +
mov eax [ebp-3B0h] +
test eax eax +
jz loc_101B426  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-3ACh] 0 +
jz loc_101B9CC  +
mov eax [ebp-3ACh] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101B9CC  +
mov edi eax +
jmp loc_101B1E8  +
mov edi offset asc_100642C +
push edi  +
push ebx  +
call sub_1019337  +
push offset aSoundDevices  +
push ebx  +
call sub_1019337  +
push edi  +
push ebx  +
call sub_1019337  +
mov edi [ebp-3ACh] +
add esp 18h +
jmp loc_101B80D  +
mov eax [edi+0A30h] +
sub eax 0 +
jz loc_101B4AD  +
dec eax  +
jz loc_101B4A6  +
dec eax  +
jz loc_101B49F  +
dec eax  +
lea ecx [ebp-0A8h] +
jz loc_101B498  +
push offset aUnknown  +
jmp loc_101B4B8  +
push offset aFull  +
jmp loc_101B4B8  +
push offset aStandard  +
jmp loc_101B4B2  +
push offset aBasic  +
jmp loc_101B4B2  +
push offset aEmulationOnly  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
xor eax eax +
cmp [edi+3A4h] eax +
jbe loc_101B57A  +
push dword ptr [edi+568h]  +
lea eax [ebp-1D8h] +
push dword ptr [edi+4D0h]  +
push offset aSS  +
push eax  +
call sub_101362E  +
add esp 10h +
cmp dword ptr [edi+0A24h] 0 +
mov ecx offset aDebug +
jnz loc_101B4FE  +
mov ecx offset aRetail_0 +
cmp dword ptr [edi+0A20h] 0 +
mov eax offset aBeta +
jnz loc_101B511  +
mov eax offset aFinal +
push ecx  +
push eax  +
lea eax [ebp-140h] +
push offset aSS_0  +
push eax  +
call sub_101362E  +
add esp 10h +
cmp dword ptr [edi+0A2Ch] 0 +
jz loc_101B547  +
cmp dword ptr [edi+0A28h] 0 +
jz loc_101B540  +
mov eax offset aYes +
jmp loc_101B54C  +
mov eax offset aNo +
jmp loc_101B54C  +
mov eax offset aNA +
push eax  +
lea ecx [ebp-308h] +
call sub_100BC31  +
push dword ptr [edi+0A1Ch]  +
lea eax [ebp-270h] +
push dword ptr [edi+730h]  +
push offset aSDBytes  +
push eax  +
call sub_101362E  +
add esp 10h +
jmp loc_101B5B8  +
mov edx [ebp-1CCh] +
xor ecx ecx +
mov [edx] cx +
mov edx [ebp-134h] +
mov [ebp-1C8h] eax +
mov [edx] cx +
mov edx [ebp-2FCh] +
mov [ebp-130h] eax +
mov [edx] cx +
mov edx [ebp-264h] +
mov [ebp-2F8h] eax +
mov [edx] cx +
mov [ebp-260h] eax +
push dword ptr [edi+308h]  +
push offset aDescriptionS  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
cmp dword ptr [edi+0A3Ch] 0 +
mov eax offset aYes +
jnz loc_101B5DF  +
mov eax offset aNo +
push eax  +
push offset aDefaultSoundPl  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
cmp dword ptr [edi+0A40h] 0 +
mov eax offset aYes +
jnz loc_101B601  +
mov eax offset aNo +
push eax  +
push offset aDefaultVoicePl  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+0A8h]  +
push offset aHardwareIdS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1D8h]  +
push offset aManufacturerId  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+270h]  +
push offset aProductIdS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+990h]  +
push offset aTypeS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+3A0h]  +
push offset aDriverNameS_0  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [ebp-1CCh]  +
push offset aDriverVersio_0  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-134h]  +
push offset aDriverAttrib_0  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-2FCh]  +
push offset aWhqlLogoDS_0  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-264h]  +
push offset aDateAndSizeS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+860h]  +
push offset aOtherFilesS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+8F8h]  +
push offset aDriverProvider  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [ebp-9Ch]  +
push offset aHwAccelLevelS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+0A5Ch]  +
push offset aCapFlags0xX  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+0A64h]  +
push dword ptr [edi+0A60h]  +
push offset aMinMaxSampleRa  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+0A80h]  +
push dword ptr [edi+0A70h]  +
push offset aStaticStrmHwMi  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+0A98h]  +
push dword ptr [edi+0A88h]  +
push offset aStaticStrmHw3d  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [edi+0A9Ch]  +
push offset aHwMemoryD  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
cmp dword ptr [edi+0A44h] 0 +
mov eax offset aYes +
jnz loc_101B75F  +
mov eax offset aNo +
push eax  +
push offset aVoiceManagemen  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
cmp dword ptr [edi+0A4Ch] 0 +
mov ecx offset aYes +
jnz loc_101B781  +
mov ecx offset aNo +
cmp dword ptr [edi+0A48h] 0 +
mov eax offset aYes +
jnz loc_101B794  +
mov eax offset aNo +
push ecx  +
push eax  +
push offset aEaxTm2_0Listen  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [edi+0A54h] 0 +
mov ecx offset aYes +
jnz loc_101B7B7  +
mov ecx offset aNo +
cmp dword ptr [edi+0A50h] 0 +
mov eax offset aYes +
jnz loc_101B7CA  +
mov eax offset aNo +
push ecx  +
push eax  +
push offset aI3dl2TmListenS  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [edi+0A58h] 0 +
mov eax offset aYes +
jnz loc_101B7ED  +
mov eax offset aNo +
push eax  +
push offset aSensauraTmZoom  +
push ebx  +
call sub_1019337  +
push offset asc_1004BCC  +
push ebx  +
call sub_1019337  +
mov edi [edi+0DB0h] +
add esp 14h +
test edi edi +
jnz loc_101B477  +
mov edi offset asc_1005DB8 +
push edi  +
push ebx  +
call sub_1019337  +
push offset aSoundCaptureDe  +
push ebx  +
call sub_1019337  +
push edi  +
push ebx  +
call sub_1019337  +
mov edi [ebp-3B4h] +
add esp 18h +
jmp loc_101B9C4  +
xor eax eax +
cmp [edi+140h] eax +
jbe loc_101B8C6  +
push dword ptr [edi+304h]  +
lea eax [ebp-1D8h] +
push dword ptr [edi+26Ch]  +
push offset aSS  +
push eax  +
call sub_101362E  +
add esp 10h +
cmp dword ptr [edi+5F8h] 0 +
mov ecx offset aDebug +
jnz loc_101B87E  +
mov ecx offset aRetail_0 +
cmp dword ptr [edi+5F4h] 0 +
mov eax offset aBeta +
jnz loc_101B891  +
mov eax offset aFinal +
push ecx  +
push eax  +
lea eax [ebp-140h] +
push offset aSS_0  +
push eax  +
call sub_101362E  +
push dword ptr [edi+5F0h]  +
lea eax [ebp-270h] +
push dword ptr [edi+4CCh]  +
push offset aSDBytes  +
push eax  +
call sub_101362E  +
add esp 20h +
jmp loc_101B8F5  +
mov edx [ebp-1CCh] +
xor ecx ecx +
mov [edx] cx +
mov edx [ebp-134h] +
mov [ebp-1C8h] eax +
mov [edx] cx +
mov edx [ebp-264h] +
mov [ebp-130h] eax +
mov [edx] cx +
mov [ebp-260h] eax +
push dword ptr [edi+0Ch]  +
push offset aDescriptionS  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
cmp dword ptr [edi+5FCh] 0 +
mov eax offset aYes +
jnz loc_101B919  +
mov eax offset aNo +
push eax  +
push offset aDefaultSoundCa  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
cmp dword ptr [edi+600h] 0 +
mov eax offset aYes +
jnz loc_101B93B  +
mov eax offset aNo +
push eax  +
push offset aDefaultVoiceCa  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+13Ch]  +
push offset aDriverNameS_0  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-1CCh]  +
push offset aDriverVersio_0  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-134h]  +
push offset aDriverAttrib_0  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-264h]  +
push offset aDateAndSizeS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+604h]  +
push offset aCapFlags0xX  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [edi+608h]  +
push offset aFormatFlags0xX  +
push ebx  +
call sub_1019337  +
push offset asc_1004BCC  +
push ebx  +
call sub_1019337  +
mov edi [edi+610h] +
add esp 14h +
test edi edi +
jnz loc_101B841  +
xor edi edi +
jmp loc_101B1E8  +
***
call sub_101FA3A  +
mov eax [ebp+0Ch] +
mov ebx [ebp+8] +
mov [ebp-14Ch] eax +
mov eax [ebp+14h] +
lea ecx [ebp-0A8h] +
mov [ebp-144h] eax +
call sub_100C141  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-140h] +
call sub_100C141  +
mov eax [ebp+10h] +
dec eax  +
mov byte ptr [ebp-4] 1 +
mov esi offset asc_1006D94 +
test eax eax +
jle loc_101BA38  +
mov edi eax +
push esi  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
dec edi  +
jnz loc_101BA29  +
lea eax [ebp-0A8h] +
push eax  +
lea ecx [ebp-140h] +
call sub_1018C97  +
mov eax [ebp-130h] +
lea ecx [ebp-140h] +
cmp eax 1 +
jbe loc_101BA75  +
push 20h  +
push 1  +
add eax 0FFFFFFFEh +
push eax  +
call sub_100B008  +
push offset asc_1006D88  +
lea ecx [ebp-140h] +
jmp loc_101BA7A  +
push offset asc_1006D80  +
call sub_100BC6C  +
push esi  +
lea ecx [ebp-0A8h] +
call sub_100BC6C  +
mov eax [ebp-144h] +
mov edi [eax+4] +
jmp loc_101BCA9  +
mov ecx [ebp-14Ch] +
mov eax [ecx+10h] +
mov esi [edi] +
test eax eax +
jbe loc_101BAC9  +
cmp eax [ebp-98h] +
jnb loc_101BAB5  +
push dword ptr [ecx+0Ch]  +
jmp loc_101BABB  +
push dword ptr [ebp-9Ch]  +
push offset aS_0  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
push dword ptr [esi+14h]  +
push dword ptr [ebp-134h]  +
push offset aSS_1  +
push ebx  +
call sub_1019337  +
mov eax [esi] +
add esp 10h +
test eax eax +
jnz loc_101BAEB  +
cmp [esi+4] eax +
jz loc_101BB03  +
push dword ptr [esi+4]  +
push eax  +
push dword ptr [ebp-9Ch]  +
push offset aSvendorProduct  +
push ebx  +
call sub_1019337  +
add esp 14h +
cmp dword ptr [esi+0B0h] 0 +
jbe loc_101BB26  +
push dword ptr [esi+0ACh]  +
push dword ptr [ebp-9Ch]  +
push offset aSlocationS  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [esi+148h] 0 +
jbe loc_101BB49  +
push dword ptr [esi+144h]  +
push dword ptr [ebp-9Ch]  +
push offset aSmatchingDevic  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [esi+1E0h] 0 +
jbe loc_101BB6C  +
push dword ptr [esi+1DCh]  +
push dword ptr [ebp-9Ch]  +
push offset aSupperFiltersS  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [esi+310h] 0 +
jbe loc_101BB8F  +
push dword ptr [esi+30Ch]  +
push dword ptr [ebp-9Ch]  +
push offset aSlowerFiltersS  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [esi+278h] 0 +
jbe loc_101BBB2  +
push dword ptr [esi+274h]  +
push dword ptr [ebp-9Ch]  +
push offset aSserviceS  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [esi+3A8h] 0 +
jbe loc_101BBD5  +
push dword ptr [esi+3A4h]  +
push dword ptr [ebp-9Ch]  +
push offset aSoemdataS  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [esi+440h] 0 +
jbe loc_101BBF8  +
push dword ptr [esi+43Ch]  +
push dword ptr [ebp-9Ch]  +
push offset aSflags1S  +
push ebx  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [esi+4D8h] 0 +
jbe loc_101BC1B  +
push dword ptr [esi+4D4h]  +
push dword ptr [ebp-9Ch]  +
push offset aSflags2S  +
push ebx  +
call sub_1019337  +
add esp 10h +
lea ecx [esi+560h] +
call sub_100ADE2  +
test eax eax +
jz loc_101BC68  +
mov edi [esi+564h] +
cmp edi [esi+568h] +
jz loc_101BC62  +
mov eax [edi] +
push dword ptr [eax+4C8h]  +
push dword ptr [eax+30Ch]  +
push dword ptr [eax+0Ch]  +
push dword ptr [ebp-9Ch]  +
push offset aSdriverSSDByte  +
push ebx  +
call sub_1019337  +
add esp 18h +
add edi 4 +
jmp loc_101BC30  +
mov edi [ebp-148h] +
mov ecx [ebp-14Ch] +
lea eax [ebp-0A8h] +
push eax  +
call sub_1018C97  +
add esi 570h +
mov ecx esi +
call sub_100ADE2  +
test eax eax +
jz loc_101BCA0  +
mov eax [ebp+10h] +
push esi  +
inc eax  +
push eax  +
push dword ptr [ebp-14Ch]  +
push ebx  +
call sub_101B9D8  +
add esp 10h +
mov eax [ebp-144h] +
add edi 4 +
mov [ebp-148h] edi +
cmp edi [eax+8] +
jnz loc_101BA99  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
xor eax eax +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
mov edi edx +
xor esi esi +
mov ebx ecx +
cmp edi esi +
jz loc_101C0BB  +
cmp dword_1037718 esi +
jz loc_101BF38  +
lea ecx [ebp-0A8h] +
mov [ebp-144h] esi +
mov [ebp-148h] esi +
call sub_100C141  +
lea eax [ebp-144h] +
push eax  +
push offset aDirectshow  +
push dword_1037724  +
mov [ebp-4] esi +
call sub_10185B6  +
mov ebx eax +
add esp 0Ch +
cmp ebx esi +
jge loc_101BD6D  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax ebx +
jmp loc_101C0BD  +
mov esi [edi] +
jmp loc_101BED1  +
lea eax [ebp-148h] +
push eax  +
push offset aFilter  +
push dword ptr [ebp-144h]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101BEFE  +
mov ebx [ebp-148h] +
push esi  +
push offset aName  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101BEFE  +
lea eax [esi+2F8h] +
push eax  +
push offset aFiltercatagory  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101BEFE  +
push dword ptr [esi+430h]  +
mov edi offset aMerit +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101BEFE  +
push dword ptr [esi+428h]  +
mov edi offset aInputs +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101BEFE  +
push dword ptr [esi+42Ch]  +
mov edi offset aOutputs +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101BEFE  +
lea ecx [ebp-140h] +
call sub_100C141  +
lea edi [esi+1C8h] +
mov eax [edi+10h] +
inc eax  +
push eax  +
push 5Ch  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_100AF11  +
cmp eax 0FFFFFFFFh +
jle loc_101BE67  +
lea ecx [ebp-140h] +
push ecx  +
push 0  +
inc eax  +
push eax  +
mov ecx edi +
call sub_1018C05  +
lea eax [ebp-140h] +
push eax  +
push offset aFile  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101BF1A  +
lea eax [esi+260h] +
push eax  +
push offset aFileversion  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101BF1A  +
mov esi [esi+438h] +
test ebx ebx +
jz loc_101BEB8  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and dword ptr [ebp-148h] 0 +
lea ecx [ebp-140h] +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ebp-140h] offset off_1004B94 +
call sub_101889F  +
test esi esi +
jnz loc_101BD74  +
mov eax [ebp-144h] +
test eax eax +
jz loc_101BEE9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
lea ecx [ebp-0A8h] +
jmp loc_101C0B6  +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
lea ecx [ebp-0A8h] +
call sub_101889F  +
mov eax edi +
jmp loc_101C0BD  +
mov esi offset off_1004B94 +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
mov [ebp-0A8h] esi +
jmp loc_101BF08  +
mov esi offset asc_1005400 +
push esi  +
push ebx  +
call sub_1019337  +
push offset aDirectshowFilt  +
push ebx  +
call sub_1019337  +
push esi  +
push ebx  +
call sub_1019337  +
add esp 18h +
lea ecx [ebp-140h] +
call sub_100C141  +
mov ecx [ebp-134h] +
xor eax eax +
mov [ecx] ax +
and [ebp-130h] eax +
mov esi [edi] +
jmp loc_101C091  +
mov edi [esi+304h] +
mov eax [ebp-134h] +
mov ecx edi +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_101BFB0  +
test dx dx +
jz loc_101BFAC  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_101BFB0  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_101BF8A  +
xor eax eax +
jmp loc_101BFB5  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_101BFDA  +
push edi  +
push offset aS_1  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
lea eax [esi+2F8h] +
push eax  +
lea ecx [ebp-140h] +
call sub_1018C97  +
push dword ptr [esi+0Ch]  +
push offset aS_2  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+430h]  +
push offset a0x08x  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+428h]  +
mov edi offset aD_0 +
push edi  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+42Ch]  +
push edi  +
push ebx  +
call sub_1019337  +
add esp 30h +
lea ecx [ebp-0A8h] +
call sub_100C141  +
lea edi [esi+1C8h] +
mov eax [edi+10h] +
inc eax  +
push eax  +
push 5Ch  +
mov ecx edi +
call sub_100AF11  +
cmp eax 0FFFFFFFFh +
jle loc_101C051  +
lea ecx [ebp-0A8h] +
push ecx  +
push 0  +
inc eax  +
push eax  +
mov ecx edi +
call sub_1018C05  +
push dword ptr [ebp-9Ch]  +
push offset aS_2  +
push ebx  +
call sub_1019337  +
push dword ptr [esi+26Ch]  +
push offset aS_0  +
push ebx  +
call sub_1019337  +
mov esi [esi+438h] +
add esp 18h +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
test esi esi +
jnz loc_101BF7C  +
push offset asc_1004BCC  +
push ebx  +
call sub_1019337  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-140h] offset off_1004B94 +
lea ecx [ebp-140h] +
call sub_101889F  +
xor eax eax +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
mov eax [ebp+8] +
mov esi ecx +
lea ecx [ebp-140h] +
mov [ebp-148h] eax +
call sub_100C141  +
xor edi edi +
mov [ebp-4] edi +
mov ebx offset off_1004B94 +
cmp esi edi +
jnz loc_101C116  +
xor esi esi +
lea ecx [ebp-140h] +
mov [ebp-140h] ebx +
call sub_101889F  +
mov eax esi +
call sub_101FA8E  +
retn   +
cmp dword_1037718 edi +
jz loc_101C706  +
lea ecx [ebp-0A8h] +
mov [ebp-14Ch] edi +
mov [ebp-144h] edi +
call sub_100C141  +
lea eax [ebp-14Ch] +
push eax  +
push offset aDirectxdebugle  +
push dword_1037724  +
mov byte ptr [ebp-4] 1 +
call sub_10185B6  +
add esp 0Ch +
cmp eax edi +
mov [ebp-148h] eax +
jge loc_101C17A  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] ebx +
call sub_101889F  +
mov esi [ebp-148h] +
jmp loc_101C0FD  +
lea eax [ebp-144h] +
push eax  +
push offset aDirect3d  +
push dword ptr [ebp-14Ch]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jge loc_101C1B2  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] ebx +
call sub_101889F  +
mov esi edi +
jmp loc_101C0FD  +
push dword ptr [esi+100h]  +
mov ecx [ebp-144h] +
mov edi offset aCurrent +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
mov ecx [ebp-144h] +
push 4  +
mov edi offset aMax +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
cmp dword ptr [esi+0DCh] 0 +
jz loc_101C208  +
cmp dword ptr [esi+0E0h] 0 +
jz loc_101C201  +
mov eax offset aDebug_0 +
jmp loc_101C20D  +
mov eax offset aRetail +
jmp loc_101C20D  +
mov eax offset aNA +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-144h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aRuntime  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-148h] eax +
test eax eax +
jl loc_101C161  +
test edi edi +
jz loc_101C253  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-144h] 0 +
lea eax [ebp-144h] +
push eax  +
push offset aDirectdraw  +
push dword ptr [ebp-14Ch]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101C19A  +
push dword ptr [esi+104h]  +
mov ecx [ebp-144h] +
mov edi offset aCurrent +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
mov ecx [ebp-144h] +
push 4  +
mov edi offset aMax +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
cmp dword ptr [esi+0F4h] 0 +
mov eax offset aDebug_0 +
jnz loc_101C2C8  +
mov eax offset aRetail +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-144h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aRuntime  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-148h] eax +
test eax eax +
jl loc_101C161  +
test edi edi +
jz loc_101C30E  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-144h] 0 +
lea eax [ebp-144h] +
push eax  +
push offset aDirectinput  +
push dword ptr [ebp-14Ch]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101C19A  +
push dword ptr [esi+108h]  +
mov ecx [ebp-144h] +
mov edi offset aCurrent +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
mov ecx [ebp-144h] +
push 5  +
mov edi offset aMax +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
cmp dword ptr [esi+0E4h] 0 +
jz loc_101C390  +
cmp dword ptr [esi+0E8h] 0 +
jz loc_101C389  +
mov eax offset aDebug_0 +
jmp loc_101C395  +
mov eax offset aRetail +
jmp loc_101C395  +
mov eax offset aNA +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-144h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aRuntime  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-148h] eax +
test eax eax +
jl loc_101C161  +
test edi edi +
jz loc_101C3DB  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-144h] 0 +
lea eax [ebp-144h] +
push eax  +
push offset aDirectmusic  +
push dword ptr [ebp-14Ch]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101C19A  +
push dword ptr [esi+10Ch]  +
mov ecx [ebp-144h] +
mov edi offset aCurrent +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
mov ecx [ebp-144h] +
push 5  +
mov edi offset aMax +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
cmp dword ptr [esi+0ECh] 0 +
jz loc_101C45D  +
cmp dword ptr [esi+0F0h] 0 +
jz loc_101C456  +
mov eax offset aDebug_0 +
jmp loc_101C462  +
mov eax offset aRetail +
jmp loc_101C462  +
mov eax offset aNA +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-144h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aRuntime  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-148h] eax +
test eax eax +
jl loc_101C161  +
test edi edi +
jz loc_101C4A8  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-144h] 0 +
lea eax [ebp-144h] +
push eax  +
push offset aDirectplay  +
push dword ptr [ebp-14Ch]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101C19A  +
push dword ptr [esi+110h]  +
mov ecx [ebp-144h] +
mov edi offset aCurrent +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
mov ecx [ebp-144h] +
push 9  +
mov edi offset aMax +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
cmp dword ptr [esi+0F8h] 0 +
mov eax offset aDebug_0 +
jnz loc_101C51D  +
mov eax offset aRetail +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-144h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aRuntime  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-148h] eax +
test eax eax +
jl loc_101C161  +
test edi edi +
jz loc_101C563  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-144h] 0 +
lea eax [ebp-144h] +
push eax  +
push offset aDirectsound  +
push dword ptr [ebp-14Ch]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101C19A  +
push dword ptr [esi+114h]  +
mov ecx [ebp-144h] +
mov edi offset aCurrent +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
mov ecx [ebp-144h] +
push 5  +
mov edi offset aMax +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
cmp dword ptr [esi+0FCh] 0 +
mov eax offset aDebug_0 +
jnz loc_101C5D8  +
mov eax offset aRetail +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-144h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aRuntime  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-148h] eax +
test eax eax +
jl loc_101C161  +
test edi edi +
jz loc_101C61E  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-144h] 0 +
lea eax [ebp-144h] +
push eax  +
push offset aDirectshow  +
push dword ptr [ebp-14Ch]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101C19A  +
push dword ptr [esi+118h]  +
mov ecx [ebp-144h] +
mov edi offset aCurrent +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
mov ecx [ebp-144h] +
push 6  +
mov edi offset aMax +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101C19A  +
cmp dword ptr [esi+0F4h] 0 +
mov eax offset aDebug_0 +
jnz loc_101C693  +
mov eax offset aRetail +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov edi [ebp-144h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aRuntime  +
push edi  +
call sub_1018B82  +
mov esi eax +
add esp 0Ch +
test esi esi +
jge loc_101C6D6  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] ebx +
call sub_101889F  +
jmp loc_101C0FD  +
test edi edi +
jz loc_101C6E0  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp-14Ch] +
test eax eax +
jz loc_101C6F0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] ebx +
call sub_101889F  +
jmp loc_101C0FB  +
mov edi offset asc_1007004 +
push edi  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
push offset aDirectxDebugLe  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
push edi  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [esi+0E0h] 0 +
mov edi offset aRetail +
mov eax offset aDebug_0 +
jnz loc_101C74B  +
mov eax edi +
push eax  +
push dword ptr [esi+100h]  +
lea eax [ebp-140h] +
push offset aDirect3dD4S  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [esi+0F4h] 0 +
mov eax offset aDebug_0 +
jnz loc_101C787  +
mov eax edi +
push eax  +
push dword ptr [esi+104h]  +
lea eax [ebp-140h] +
push offset aDirectdrawD4S  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [esi+0E8h] 0 +
mov eax offset aDebug_0 +
jnz loc_101C7C3  +
mov eax edi +
push eax  +
push dword ptr [esi+108h]  +
lea eax [ebp-140h] +
push offset aDirectinputD5S  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [esi+0F0h] 0 +
mov eax offset aDebug_0 +
jnz loc_101C7FF  +
mov eax edi +
push eax  +
push dword ptr [esi+10Ch]  +
lea eax [ebp-140h] +
push offset aDirectmusicD5S  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [esi+0F8h] 0 +
mov eax offset aDebug_0 +
jnz loc_101C83B  +
mov eax edi +
push eax  +
push dword ptr [esi+110h]  +
lea eax [ebp-140h] +
push offset aDirectplayD9S  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [esi+0FCh] 0 +
mov eax offset aDebug_0 +
jnz loc_101C877  +
mov eax edi +
push eax  +
push dword ptr [esi+114h]  +
lea eax [ebp-140h] +
push offset aDirectsoundD5S  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 18h +
cmp dword ptr [esi+0F4h] 0 +
jz loc_101C8B1  +
mov edi offset aDebug_0 +
push edi  +
push dword ptr [esi+118h]  +
lea eax [ebp-140h] +
push offset aDirectshowD6S  +
push eax  +
call sub_101362E  +
push dword ptr [ebp-134h]  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
push offset asc_1004BCC  +
push dword ptr [ebp-148h]  +
call sub_1019337  +
add esp 20h +
jmp loc_101C0FB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push edi  +
mov edi eax +
cmp esi ebx +
jz loc_101CBD9  +
cmp dword_1037718 ebx +
jz loc_101CB00  +
lea eax [ebp+var_8] +
push eax  +
push offset aEvrpowerinform  +
push dword_1037724  +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
call sub_10185B6  +
add esp 0Ch +
cmp eax ebx +
jl loc_101CBDB  +
lea eax [ebp+var_4] +
push eax  +
push offset aCurrentsetting  +
push [ebp+var_8]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101CADD  +
mov ebx [ebp+var_4] +
push esi  +
push offset aGuid  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101CAE0  +
test ebx ebx +
jz loc_101C981  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push offset aQualityflags  +
push [ebp+var_8]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101CADD  +
mov ebx [ebp+var_4] +
push dword ptr [esi+260h]  +
mov edi offset aFlags +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101CAE0  +
lea eax [esi+98h] +
push eax  +
push offset aEnabled  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101CAE0  +
push dword ptr [esi+26Ch]  +
mov edi offset aDecodepowerusa +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101CAE0  +
test ebx ebx +
jz loc_101CA01  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push offset aBalancedflags  +
push [ebp+var_8]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101CADD  +
mov ebx [ebp+var_4] +
push dword ptr [esi+264h]  +
mov edi offset aFlags +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101CAE0  +
lea eax [esi+130h] +
push eax  +
push offset aEnabled  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101CAE0  +
push dword ptr [esi+270h]  +
mov edi offset aDecodepowerusa +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101CAE0  +
test ebx ebx +
jz loc_101CA7D  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push offset aPowerflags  +
push [ebp+var_8]  +
call sub_10185B6  +
add esp 0Ch +
test eax eax +
jl loc_101CADD  +
mov ebx [ebp+var_4] +
push dword ptr [esi+268h]  +
mov edi offset aFlags +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
test eax eax +
jl loc_101CAE0  +
lea eax [esi+1C8h] +
push eax  +
push offset aEnabled  +
push ebx  +
call sub_1018B82  +
add esp 0Ch +
test eax eax +
jl loc_101CAE0  +
push dword ptr [esi+274h]  +
mov edi offset aDecodepowerusa +
mov ecx ebx +
call sub_1018F28  +
pop ecx  +
jmp loc_101CAE0  +
mov ebx [ebp+var_4] +
test ebx ebx +
jz loc_101CAEA  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_101CBD9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101CBD9  +
mov ebx offset asc_1007238 +
push ebx  +
push edi  +
call sub_1019337  +
push offset aEvrPowerInform  +
push edi  +
call sub_1019337  +
push ebx  +
push edi  +
call sub_1019337  +
push dword ptr [esi+0Ch]  +
push offset aCurrentSetting  +
push edi  +
call sub_1019337  +
push dword ptr [esi+260h]  +
push offset aQualityFlagsD  +
push edi  +
call sub_1019337  +
push offset aEnabled_0  +
push edi  +
call sub_1019337  +
push dword ptr [esi+0A4h]  +
push edi  +
call sub_1019337  +
add esp 40h +
push dword ptr [esi+26Ch]  +
mov ebx offset aDecodePowerUsa +
push ebx  +
push edi  +
call sub_1019337  +
push dword ptr [esi+264h]  +
push offset aBalancedFlagsD  +
push edi  +
call sub_1019337  +
push offset aEnabled_0  +
push edi  +
call sub_1019337  +
push dword ptr [esi+13Ch]  +
push edi  +
call sub_1019337  +
push dword ptr [esi+270h]  +
push ebx  +
push edi  +
call sub_1019337  +
push dword ptr [esi+268h]  +
push offset aPowerflagsD  +
push edi  +
call sub_1019337  +
add esp 40h +
push offset aEnabled_0  +
push edi  +
call sub_1019337  +
push dword ptr [esi+1D4h]  +
push edi  +
call sub_1019337  +
push dword ptr [esi+274h]  +
push ebx  +
push edi  +
call sub_1019337  +
add esp 1Ch +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn   +
***
call sub_101FA3A  +
mov ebx ecx +
mov edi edx +
lea ecx [ebp-0A8h] +
mov [ebp-284h] edi +
call sub_100C141  +
xor eax eax +
mov [ebp-4] eax +
mov esi offset off_1004B94 +
cmp dword_1037718 eax +
jz loc_101D63A  +
mov [ebp-284h] eax +
mov [ebp-278h] eax +
mov [ebp-288h] eax +
mov [ebp-280h] eax +
lea eax [ebp-284h] +
push eax  +
push offset aDisplaydevices  +
push dword_1037724  +
call sub_10185B6  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jge loc_101CC6F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax ebx +
call sub_101FA8E  +
retn   +
mov ebx edi +
test edi edi +
jz loc_101D598  +
lea eax [ebp-278h] +
push eax  +
push offset aDisplaydevice  +
push dword ptr [ebp-284h]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D5AF  +
mov edi [ebp-278h] +
lea eax [ebx+98h] +
push eax  +
push offset aCardname  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+260h] +
push eax  +
push offset aManufacturer  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+2F8h] +
push eax  +
push offset aChiptype  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+390h] +
push eax  +
push offset aDactype  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+130h] +
push eax  +
push offset aDevicekey  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+558h] +
push eax  +
push offset aDisplaymemory  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+688h] +
push eax  +
push offset aCurrentmode  +
push edi  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D5AF  +
mov edi [ebx+73Ch] +
jmp loc_101CEB7  +
lea ecx [ebp-270h] +
call sub_100C141  +
lea eax [edi+2F8h] +
push eax  +
lea ecx [ebp-270h] +
mov byte ptr [ebp-4] 1 +
call sub_1018C97  +
lea eax [edi+390h] +
lea ecx [ebp-270h] +
cmp eax ecx +
jz loc_101CDDA  +
push 0  +
push 0  +
push eax  +
call sub_1012BAA  +
push edi  +
push offset aMonitorname  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5C7  +
lea eax [edi+260h] +
push eax  +
push offset aMonitormodel  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5C7  +
lea eax [ebp-270h] +
push eax  +
push offset aMonitorid  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5C7  +
lea eax [edi+4C0h] +
push eax  +
push offset aNativemode  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5C7  +
lea eax [edi+428h] +
push eax  +
push offset aOutputtype  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
mov [ebp-270h] esi +
lea ecx [ebp-270h] +
test eax eax +
jl loc_101D5D3  +
mov byte ptr [ebp-4] 0 +
call sub_101889F  +
mov edi [edi+558h] +
test edi edi +
jnz loc_101CD9F  +
mov edi [ebp-278h] +
lea eax [ebx+7D8h] +
push eax  +
push offset aMonitormaxres  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+870h] +
push eax  +
push offset aDrivername  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+908h] +
push eax  +
push offset aDriverfilevers  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+9A0h] +
push eax  +
push offset aDriverversion  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+0AD0h] +
push eax  +
push offset aDriverlanguage  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+1340h] +
push eax  +
push offset aDdiversion  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5D8  +
lea eax [ebx+1160h] +
push eax  +
push offset aDrivermodel  +
push edi  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D5AF  +
push dword ptr [ebx+132Ch]  +
mov ecx [ebp-278h] +
mov edi offset aDriverbeta +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101D5AF  +
push dword ptr [ebx+1330h]  +
mov ecx [ebp-278h] +
mov edi offset aDriverdebug +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101D5AF  +
lea eax [ebx+0C00h] +
push eax  +
push offset aDriverdate  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D5AF  +
push dword ptr [ebx+0D30h]  +
mov ecx [ebp-278h] +
mov edi offset aDriversize +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101D5AF  +
lea ecx [ebp-140h] +
call sub_100C141  +
cmp dword ptr [ebx+1338h] 0 +
mov byte ptr [ebp-4] 2 +
jz loc_101D06C  +
cmp dword ptr [ebx+1334h] 0 +
jz loc_101D065  +
mov eax offset aYes +
jmp loc_101D071  +
mov eax offset aNo +
jmp loc_101D071  +
mov eax offset aNA +
push eax  +
lea ecx [ebp-140h] +
call sub_100BC31  +
lea eax [ebp-140h] +
push eax  +
push offset aDriverwhqllogo  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D624  +
cmp dword ptr [ebx+1338h] 0 +
jz loc_101D0C2  +
cmp dword ptr [ebx+1334h] 0 +
jz loc_101D0BB  +
mov eax [ebx+177Ch] +
jmp loc_101D0C7  +
mov eax offset aNone +
jmp loc_101D0C7  +
mov eax offset aNA +
push eax  +
lea ecx [ebp-140h] +
call sub_100BC31  +
lea eax [ebp-140h] +
push eax  +
push offset aWhqldatestamp  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D624  +
lea eax [ebx+0F00h] +
push eax  +
push offset aVdd  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D624  +
lea eax [ebx+0D34h] +
push eax  +
push offset aMinivdd  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D624  +
lea eax [ebx+0E64h] +
push eax  +
push offset aMinivdddate  +
push dword ptr [ebp-278h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D624  +
push dword ptr [ebx+0EFCh]  +
mov ecx [ebp-278h] +
mov edi offset aMinivddsize +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101D624  +
mov edi [ebp-278h] +
lea eax [ebx+16D8h] +
push eax  +
push offset aDeviceidentifi  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebx+1474h] +
push eax  +
push offset aVendorid  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebx+150Ch] +
push eax  +
push offset aDeviceid  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebx+15A4h] +
push eax  +
push offset aSubsysid  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebx+163Ch] +
push eax  +
push offset aRevisionid  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebx+11F8h] +
push eax  +
push offset aDrivernodestro  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebx+1290h] +
push eax  +
push offset aRankofinstalle  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebx+1824h] +
push eax  +
push offset aDxvamodes  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea eax [ebp-288h] +
push eax  +
push offset aDxvadeinterlac  +
push edi  +
call sub_10185B6  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D605  +
lea ecx [ebp-1D8h] +
call sub_100C141  +
mov eax [ebx+18BCh] +
mov byte ptr [ebp-4] 3 +
mov [ebp-27Ch] eax +
test eax eax +
jz loc_101D458  +
mov edi [ebp-27Ch] +
lea eax [ebp-280h] +
push eax  +
push offset aDxvadeinterl_0  +
push dword ptr [ebp-288h]  +
call sub_10185B6  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
lea eax [edi+130h] +
push eax  +
push offset aGuid  +
push dword ptr [ebp-280h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
push edi  +
push offset aD3dinputformat  +
push dword ptr [ebp-280h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
lea eax [edi+98h] +
push eax  +
push offset aD3doutputforma  +
push dword ptr [ebp-280h]  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
add edi 1C8h +
push edi  +
push offset aCaps  +
push dword ptr [ebp-280h]  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101D613  +
mov eax [ebp-27Ch] +
push dword ptr [eax+260h]  +
mov ecx [ebp-280h] +
mov edi offset aNumpreviousout +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101D613  +
mov eax [ebp-27Ch] +
push dword ptr [eax+264h]  +
mov ecx [ebp-280h] +
mov edi offset aNumforwardrefs +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101D613  +
mov eax [ebp-27Ch] +
push dword ptr [eax+268h]  +
mov ecx [ebp-280h] +
mov edi offset aNumbackwardref +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101D613  +
mov eax [ebp-280h] +
test eax eax +
jz loc_101D438  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-280h] 0 +
mov eax [ebp-27Ch] +
mov eax [eax+270h] +
mov [ebp-27Ch] eax +
test eax eax +
jnz loc_101D2E8  +
mov edi [ebp-278h] +
mov eax [ebp-288h] +
test eax eax +
jz loc_101D46F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-288h] 0 +
cmp dword ptr [ebx+1D90h] 0 +
jnz loc_101D48A  +
push offset aOk  +
lea ecx [ebp-140h] +
call sub_100BC31  +
jmp loc_101D4A4  +
push dword ptr [ebx+1D8Ch]  +
lea eax [ebp-140h] +
push offset aErrorsFoundS  +
push eax  +
call sub_101362E  +
add esp 0Ch +
lea eax [ebx+0F98h] +
push eax  +
push offset aD3d9overlay  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
lea eax [ebx+1030h] +
push eax  +
push offset aDxvahd  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
lea eax [ebx+1958h] +
push eax  +
push offset aDdrawstatus  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
lea eax [ebx+1A88h] +
push eax  +
push offset aD3dstatus  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
lea eax [ebx+1958h] +
push eax  +
push offset aAgpstatus  +
push edi  +
call sub_1018B82  +
add esp 0Ch +
mov [ebp-274h] eax +
test eax eax +
jl loc_101D5F4  +
test edi edi +
jz loc_101D564  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-278h] 0 +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov byte ptr [ebp-4] 0 +
mov [ebp-140h] esi +
call sub_101889F  +
mov ebx [ebx+22E0h] +
test ebx ebx +
jnz loc_101CC79  +
cmp dword ptr [ebp-284h] 0 +
jz loc_101D5AD  +
mov eax [ebp-284h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor edi edi +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax edi +
jmp loc_101CC69  +
mov [ebp-270h] esi +
lea ecx [ebp-270h] +
call sub_101889F  +
lea ecx [ebp-0A8h] +
mov [ebp-0A8h] esi +
call sub_101889F  +
mov eax [ebp-274h] +
jmp loc_101CC69  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
mov [ebp-140h] esi +
lea ecx [ebp-140h] +
jmp loc_101D5D3  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
lea ecx [ebp-140h] +
mov [ebp-140h] esi +
call sub_101889F  +
jmp loc_101D5AF  +
mov edi offset asc_1007238 +
push edi  +
push ebx  +
call sub_1019337  +
push offset aDisplayDevices  +
push ebx  +
call sub_1019337  +
push edi  +
push ebx  +
call sub_1019337  +
mov edi [ebp-284h] +
add esp 18h +
jmp loc_101DA83  +
mov eax [edi+0ADCh] +
mov ecx [edi+914h] +
push eax  +
push ecx  +
lea eax [ebp-0A8h] +
push offset aSS  +
push eax  +
call sub_101362E  +
add esp 10h +
lea ecx [ebp-1D8h] +
call sub_100C141  +
lea ecx [ebp-270h] +
call sub_100C141  +
cmp dword ptr [edi+730h] 0 +
mov byte ptr [ebp-4] 5 +
jbe loc_101D6E6  +
mov eax [edi+734h] +
shr eax 14h +
push eax  +
lea eax [ebp-1D8h] +
push offset aDMb  +
push eax  +
call sub_101362E  +
mov eax [edi+738h] +
shr eax 14h +
push eax  +
lea eax [ebp-270h] +
push offset aDMb  +
push eax  +
call sub_101362E  +
add esp 18h +
jmp loc_101D706  +
push offset aNA  +
lea ecx [ebp-1D8h] +
call sub_100BC31  +
push offset aNA  +
lea ecx [ebp-270h] +
call sub_100BC31  +
push dword ptr [edi+0A4h]  +
push offset aCardNameS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+26Ch]  +
push offset aManufacturerS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+304h]  +
push offset aChipTypeS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+39Ch]  +
push offset aDacTypeS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+13Ch]  +
push offset aDeviceKeyS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+564h]  +
push offset aDisplayMemoryS  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [ebp-1CCh]  +
push offset aDedicatedMemor  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-264h]  +
push offset aSharedMemoryS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+694h]  +
push offset aCurrentModeS  +
push ebx  +
call sub_1019337  +
mov eax [edi+73Ch] +
add esp 24h +
jmp loc_101D837  +
mov eax [ebp-27Ch] +
push dword ptr [eax+0Ch]  +
push offset aMonitorNameS  +
push ebx  +
call sub_1019337  +
mov eax [ebp-27Ch] +
push dword ptr [eax+26Ch]  +
push offset aMonitorModelS  +
push ebx  +
call sub_1019337  +
mov ecx [ebp-27Ch] +
mov eax [ecx+39Ch] +
mov ecx [ecx+304h] +
push eax  +
push ecx  +
push offset aMonitorIdSS  +
push ebx  +
call sub_1019337  +
mov eax [ebp-27Ch] +
push dword ptr [eax+4CCh]  +
push offset aNativeModeS  +
push ebx  +
call sub_1019337  +
mov eax [ebp-27Ch] +
push dword ptr [eax+434h]  +
push offset aOutputTypeS  +
push ebx  +
call sub_1019337  +
mov eax [ebp-27Ch] +
mov eax [eax+558h] +
add esp 40h +
mov [ebp-27Ch] eax +
test eax eax +
jnz loc_101D7B0  +
push dword ptr [edi+87Ch]  +
push offset aDriverNameS  +
push ebx  +
call sub_1019337  +
push dword ptr [ebp-9Ch]  +
push offset aDriverFileVers  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+9ACh]  +
push offset aDriverVersionS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+134Ch]  +
push offset aDdiVersionS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+116Ch]  +
push offset aDriverModelS  +
push ebx  +
call sub_1019337  +
add esp 3Ch +
cmp dword ptr [edi+1330h] 0 +
mov ecx offset aDebug +
jnz loc_101D8B0  +
mov ecx offset aRetail_0 +
cmp dword ptr [edi+132Ch] 0 +
mov eax offset aBeta +
jnz loc_101D8C3  +
mov eax offset aFinal +
push ecx  +
push eax  +
push offset aDriverAttribut  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+0D30h]  +
mov eax [edi+0C0Ch] +
push eax  +
push offset aDriverDateSize  +
push ebx  +
call sub_1019337  +
add esp 20h +
cmp dword ptr [edi+1338h] 0 +
jz loc_101D90B  +
cmp dword ptr [edi+1334h] 0 +
jz loc_101D904  +
mov eax offset aYes +
jmp loc_101D910  +
mov eax offset aNo +
jmp loc_101D910  +
mov eax offset aNA +
push eax  +
push offset aWhqlLogoDS  +
push ebx  +
call sub_1019337  +
add esp 0Ch +
cmp dword ptr [edi+1338h] 0 +
jz loc_101D940  +
cmp dword ptr [edi+1334h] 0 +
jz loc_101D939  +
mov eax [edi+177Ch] +
jmp loc_101D945  +
mov eax offset aNone +
jmp loc_101D945  +
mov eax offset aNA +
push eax  +
push offset aWhqlDateStampS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+16E4h]  +
push offset aDeviceIdentifi  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1480h]  +
push offset aVendorIdS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1518h]  +
push offset aDeviceIdS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+15B0h]  +
push offset aSubsysIdS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1648h]  +
push offset aRevisionIdS  +
push ebx  +
call sub_1019337  +
add esp 48h +
push dword ptr [edi+1204h]  +
push offset aDriverStrongNa  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+129Ch]  +
push offset aRankOfDriverS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1830h]  +
push offset aVideoAccelS  +
push ebx  +
call sub_1019337  +
add esp 24h +
mov eax edi +
call sub_101A8AB  +
mov [ebp-274h] eax +
test eax eax +
jl loc_101DA90  +
push dword ptr [edi+0FA4h]  +
push offset aD3d9OverlayS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+103Ch]  +
push offset aDxvaHdS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1964h]  +
push offset aDdrawStatusS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1A94h]  +
push offset aD3dStatusS  +
push ebx  +
call sub_1019337  +
push dword ptr [edi+1BC4h]  +
push offset aAgpStatusS  +
push ebx  +
call sub_1019337  +
push offset asc_1004BCC  +
push ebx  +
call sub_1019337  +
add esp 44h +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov byte ptr [ebp-4] 0 +
mov [ebp-1D8h] esi +
call sub_101889F  +
mov edi [edi+22E0h] +
test edi edi +
jnz loc_101D666  +
jmp loc_101D5AD  +
lea ecx [ebp-270h] +
mov [ebp-270h] esi +
call sub_101889F  +
lea ecx [ebp-1D8h] +
mov [ebp-1D8h] esi +
call sub_101889F  +
mov edi [ebp-274h] +
jmp loc_101D5AF  +
***
call sub_101FA3A  +
mov edi edx +
xor ebx ebx +
mov esi ecx +
mov [ebp-0B8h] edi +
cmp edi ebx +
jz loc_101E10A  +
cmp dword_1037718 ebx +
jz loc_101DE65  +
lea ecx [ebp-0A8h] +
mov [ebp-0B4h] ebx +
mov [ebp-0ACh] ebx +
mov [ebp-0BCh] ebx +
call sub_100C141  +
lea eax [ebp-0B4h] +
push eax  +
push offset aDirectinput  +
push dword_1037724  +
mov [ebp-4] ebx +
call sub_10185B6  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jge loc_101DB4D  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax esi +
jmp loc_101E10C  +
lea eax [ebp-0ACh] +
push eax  +
push offset aDirectinputdev  +
push dword ptr [ebp-0B4h]  +
call sub_10185B6  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jl loc_101DB31  +
mov eax [edi+200h] +
mov [ebp-0B0h] eax +
cmp eax [edi+204h] +
jnz loc_101DCC8  +
mov eax [ebp-0ACh] +
cmp eax ebx +
jz loc_101DB9B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-0ACh] ebx +
lea eax [ebp-0ACh] +
push eax  +
push offset aUsbroot  +
push dword ptr [ebp-0B4h]  +
call sub_10185B6  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jl loc_101DB31  +
mov esi [ebp-0ACh] +
lea eax [edi+1DCh] +
push eax  +
push esi  +
call sub_1018FF5  +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_101DBE4  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov [ebp-0ACh] ebx +
lea eax [ebp-0ACh] +
push eax  +
push offset aGameportdevice  +
push dword ptr [ebp-0B4h]  +
call sub_10185B6  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jl loc_101DB31  +
mov esi [ebp-0ACh] +
lea eax [edi+1CCh] +
push eax  +
push esi  +
call sub_1018FF5  +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_101DC2D  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov [ebp-0ACh] ebx +
lea eax [ebp-0ACh] +
push eax  +
push offset aPs2devices  +
push dword ptr [ebp-0B4h]  +
call sub_10185B6  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jl loc_101DB31  +
mov esi [ebp-0ACh] +
lea eax [edi+1ECh] +
push eax  +
push esi  +
call sub_1018FF5  +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_101DC70  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax offset aYes +
cmp [edi] ebx +
jnz loc_101DC7E  +
mov eax offset aNo +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100BC31  +
mov esi [ebp-0B4h] +
lea eax [ebp-0A8h] +
push eax  +
push offset aPollwithinterr  +
push esi  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
cmp edi ebx +
jl loc_101DE49  +
cmp esi ebx +
jz loc_101E0F5  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_101E0F5  +
mov eax [ebp-0B0h] +
mov esi [eax] +
lea eax [ebp-0BCh] +
push eax  +
push offset aDirectinputd_0  +
push dword ptr [ebp-0ACh]  +
call sub_10185B6  +
mov edi eax +
add esp 0Ch +
cmp edi ebx +
jl loc_101DE49  +
mov ebx [ebp-0BCh] +
push esi  +
push offset aDevicename  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101DE49  +
push dword ptr [esi+98h]  +
mov edi offset aAttached +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101DE49  +
push dword ptr [esi+9Ch]  +
mov edi offset aJoystickid +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101DE49  +
push dword ptr [esi+0A0h]  +
mov edi offset aVendorid +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101DE49  +
push dword ptr [esi+0A4h]  +
mov edi offset aProductid +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101DE49  +
push dword ptr [esi+0A8h]  +
mov edi offset aDevtype +
mov ecx ebx +
call sub_1018F28  +
mov edi eax +
pop ecx  +
test edi edi +
jl loc_101DE49  +
lea eax [esi+0ACh] +
push eax  +
push offset aFfdrivername  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101DE49  +
lea eax [esi+144h] +
push eax  +
push offset aFfdriverdateen  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101DE49  +
lea eax [esi+1DCh] +
push eax  +
push offset aFfdriverversio  +
push ebx  +
call sub_1018B82  +
mov edi eax +
add esp 0Ch +
test edi edi +
jl loc_101DE49  +
push dword ptr [esi+274h]  +
mov edi offset aFfdriversize +
mov ecx ebx +
call sub_1018F28  +
mov esi eax +
pop ecx  +
test esi esi +
jl loc_101DB31  +
test ebx ebx +
jz loc_101DE21  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
and dword ptr [ebp-0BCh] 0 +
add dword ptr [ebp-0B0h] 4 +
mov eax [ebp-0B8h] +
mov ecx [ebp-0B0h] +
xor ebx ebx +
cmp ecx [eax+204h] +
jnz loc_101DCC2  +
mov edi eax +
jmp loc_101DB85  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
jmp loc_101E10C  +
mov ebx offset asc_1008288 +
push ebx  +
push esi  +
call sub_1019337  +
push offset aDirectinputDev  +
push esi  +
call sub_1019337  +
push ebx  +
push esi  +
call sub_1019337  +
mov eax [edi+200h] +
mov ecx [edi+204h] +
add esp 18h +
mov [ebp-0B0h] eax +
mov ebx offset asc_1004BCC +
cmp eax ecx +
jz loc_101DFC1  +
jmp loc_101DEAD  +
mov eax [ebp-0B0h] +
mov edi [eax] +
push dword ptr [edi+0Ch]  +
push offset aDeviceNameS  +
push esi  +
call sub_1019337  +
push dword ptr [edi+98h]  +
push offset aAttachedD  +
push esi  +
call sub_1019337  +
mov al [edi+0A8h] +
add esp 18h +
cmp al 12h +
jz loc_101DEF5  +
cmp al 13h +
jz loc_101DEF5  +
push dword ptr [edi+9Ch]  +
push offset aControllerId0x  +
push esi  +
call sub_1019337  +
add esp 0Ch +
jmp loc_101DF02  +
push offset aControllerIdNA  +
push esi  +
call sub_1019337  +
pop ecx  +
pop ecx  +
mov eax [edi+0A0h] +
test eax eax +
jnz loc_101DF23  +
cmp [edi+0A4h] eax +
jnz loc_101DF23  +
push offset aVendorProductI  +
push esi  +
call sub_1019337  +
pop ecx  +
pop ecx  +
jmp loc_101DF38  +
push dword ptr [edi+0A4h]  +
push eax  +
push offset aVendorProduc_0  +
push esi  +
call sub_1019337  +
add esp 10h +
cmp dword ptr [edi+0BCh] 0 +
jbe loc_101DF8A  +
push dword ptr [edi+0B8h]  +
push offset aFfDriverS  +
push esi  +
call sub_1019337  +
push dword ptr [edi+150h]  +
push offset aFfDriverDateS  +
push esi  +
call sub_1019337  +
push dword ptr [edi+1E8h]  +
push offset aFfDriverVersio  +
push esi  +
call sub_1019337  +
push dword ptr [edi+274h]  +
push offset aFfDriverSizeDB  +
push esi  +
call sub_1019337  +
add esp 30h +
jmp loc_101DF97  +
push offset aFfDriverNA  +
push esi  +
call sub_1019337  +
pop ecx  +
pop ecx  +
push ebx  +
push esi  +
call sub_1019337  +
add dword ptr [ebp-0B0h] 4 +
mov eax [ebp-0B8h] +
pop ecx  +
pop ecx  +
mov ecx [ebp-0B0h] +
cmp ecx [eax+204h] +
jnz loc_101DEA7  +
mov edi eax +
push offset aPollWInterrupt  +
push esi  +
call sub_1019337  +
cmp dword ptr [edi] 0 +
pop ecx  +
pop ecx  +
mov eax offset aYes_0 +
jnz loc_101DFDD  +
mov eax offset aNo_0 +
push eax  +
push esi  +
call sub_1019337  +
pop ecx  +
pop ecx  +
lea ecx [ebp-0A8h] +
call sub_100C141  +
push ebx  +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_1019337  +
push offset asc_1007FCC  +
push esi  +
call sub_1019337  +
push offset aUsbDevices  +
push esi  +
call sub_1019337  +
push offset asc_1007FCC  +
push esi  +
call sub_1019337  +
mov ecx [ebp-9Ch] +
xor eax eax +
mov [ecx] ax +
and [ebp-98h] eax +
lea eax [edi+1DCh] +
push eax  +
push 1  +
lea eax [ebp-0A8h] +
push eax  +
push esi  +
call sub_101B9D8  +
push ebx  +
push esi  +
call sub_1019337  +
push offset asc_1007F8C  +
push esi  +
call sub_1019337  +
add esp 40h +
push offset aGameportDevice  +
push esi  +
call sub_1019337  +
push offset asc_1007F8C  +
push esi  +
call sub_1019337  +
mov ecx [ebp-9Ch] +
xor eax eax +
mov [ecx] ax +
and [ebp-98h] eax +
lea eax [edi+1CCh] +
push eax  +
push 1  +
lea eax [ebp-0A8h] +
push eax  +
push esi  +
call sub_101B9D8  +
push ebx  +
push esi  +
call sub_1019337  +
push offset asc_1005714  +
push esi  +
call sub_1019337  +
push offset aPs2Devices  +
push esi  +
call sub_1019337  +
push offset asc_1005714  +
push esi  +
call sub_1019337  +
mov ecx [ebp-9Ch] +
add esp 40h +
xor eax eax +
add edi 1ECh +
mov [ecx] ax +
and [ebp-98h] eax +
push edi  +
push 1  +
lea eax [ebp-0A8h] +
push eax  +
push esi  +
call sub_101B9D8  +
push ebx  +
push esi  +
call sub_1019337  +
add esp 18h +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
xor eax eax +
call sub_101FA8E  +
retn   +
***
call sub_101FA3A  +
mov esi [ebp+10h] +
mov edi [ebp+0Ch] +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-0B4h] edi +
mov dword_1037718 eax +
mov [ebp-0ACh] ebx +
cmp esi ebx +
jnz loc_101E151  +
mov eax 80070057h +
call sub_101FA8E  +
retn   +
lea ecx [ebp-0A8h] +
call sub_100C141  +
push ebx  +
push 104h  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
call sub_100AE4F  +
mov eax [edi+0Ch] +
lea ecx [ebp-144h] +
push ecx  +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-94h] 1 +
push dword ptr [ebp-0A0h]  +
push eax  +
call ds:GetFullPathNameW  +
lea ecx [ebp-0A8h] +
mov [ebp-0B0h] eax +
mov [ebp-94h] bl +
call sub_100C1B2  +
cmp dword ptr [ebp-0B0h] 103h +
jle loc_101E1D8  +
mov edi 8007006Fh +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-0A8h] offset off_1004B94 +
call sub_101889F  +
mov eax edi +
jmp loc_101E14B  +
mov [ebp-13Ch] ebx +
mov [ebp-138h] ebx +
push esi  +
lea ecx [ebp-140h] +
mov byte ptr [ebp-4] 1 +
call sub_100AB22  +
mov [ebp-0B0h] eax +
mov [ebp-12Ch] ebx +
mov [ebp-128h] ebx +
push esi  +
lea ecx [ebp-130h] +
mov byte ptr [ebp-4] 2 +
call sub_100AB7A  +
mov [ebp-134h] eax +
mov [ebp-11Ch] ebx +
mov [ebp-118h] ebx +
push esi  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 3 +
call sub_100ABD2  +
mov [ebp-100h] eax +
mov [ebp-10Ch] ebx +
mov [ebp-108h] ebx +
push esi  +
lea ecx [ebp-110h] +
mov byte ptr [ebp-4] 4 +
call sub_100AC2A  +
mov [ebp-104h] eax +
mov [ebp-0F8h] ebx +
mov [ebp-0F4h] ebx +
push esi  +
lea ecx [ebp-0FCh] +
mov byte ptr [ebp-4] 5 +
call sub_100AC82  +
mov [ebp-0D0h] eax +
mov [ebp-0E8h] ebx +
mov [ebp-0E4h] ebx +
push esi  +
lea ecx [ebp-0ECh] +
mov byte ptr [ebp-4] 6 +
call sub_100ACDA  +
mov [ebp-0E0h] eax +
mov [ebp-0D8h] ebx +
mov [ebp-0D4h] ebx +
push esi  +
lea ecx [ebp-0DCh] +
mov byte ptr [ebp-4] 7 +
call sub_100AD32  +
mov [ebp-114h] eax +
mov [ebp-0C8h] ebx +
mov [ebp-0C4h] ebx +
push esi  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 8 +
call sub_100AD8A  +
mov [ebp-0F0h] eax +
mov [ebp-0BCh] ebx +
mov [ebp-0B8h] ebx +
push esi  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 9 +
call sub_10187C5  +
mov [ebp-124h] eax +
cmp dword_1037718 ebx +
jz loc_101E3B8  +
call sub_1018987  +
cmp eax ebx +
jge loc_101E466  +
call sub_101876E  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 8 +
call sub_100AD5C  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 7 +
call sub_100ADB4  +
lea ecx [ebp-0DCh] +
mov byte ptr [ebp-4] 6 +
call sub_100AD5C  +
lea ecx [ebp-0ECh] +
mov byte ptr [ebp-4] 5 +
call sub_100AD04  +
lea ecx [ebp-0FCh] +
mov byte ptr [ebp-4] 4 +
call sub_100ACAC  +
lea ecx [ebp-110h] +
mov byte ptr [ebp-4] 3 +
call sub_100AC54  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 2 +
call sub_100ABFC  +
lea ecx [ebp-130h] +
mov byte ptr [ebp-4] 1 +
call sub_100ABA4  +
lea ecx [ebp-140h] +
mov [ebp-4] bl +
call sub_100AB4C  +
mov edi 80004002h +
jmp loc_101E1BC  +
mov edi [edi+0Ch] +
push offset aWt  +
push edi  +
call sub_10207D2  +
pop ecx  +
pop ecx  +
mov [ebp-0ACh] eax +
cmp eax ebx +
jnz loc_101E466  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 8 +
call sub_100AD5C  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 7 +
call sub_100ADB4  +
lea ecx [ebp-0DCh] +
mov byte ptr [ebp-4] 6 +
call sub_100AD5C  +
lea ecx [ebp-0ECh] +
mov byte ptr [ebp-4] 5 +
call sub_100AD04  +
lea ecx [ebp-0FCh] +
mov byte ptr [ebp-4] 4 +
call sub_100ACAC  +
lea ecx [ebp-110h] +
mov byte ptr [ebp-4] 3 +
call sub_100AC54  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 2 +
call sub_100ABFC  +
lea ecx [ebp-130h] +
mov byte ptr [ebp-4] 1 +
call sub_100ABA4  +
lea ecx [ebp-140h] +
mov [ebp-4] bl +
call sub_100AB4C  +
mov edi 80070005h +
jmp loc_101E1BC  +
push dword ptr [ebp-0ACh]  +
mov ecx [ebp-0B0h] +
call sub_10193B6  +
mov edi eax +
cmp edi ebx +
pop ecx  +
jl loc_101E566  +
push dword ptr [ebp-0ACh]  +
mov ecx esi +
call sub_1019AF4  +
mov edi eax +
cmp edi ebx +
pop ecx  +
jl loc_101E566  +
mov esi [ebp-0ACh] +
mov ecx [ebp-0B0h] +
push esi  +
call sub_101C0C8  +
mov edi eax +
cmp edi ebx +
pop ecx  +
jl loc_101E566  +
mov edx [ebp-134h] +
mov ecx esi +
call sub_101CBE4  +
mov edi eax +
cmp edi ebx +
jl loc_101E566  +
push dword ptr [ebp-104h]  +
mov edx [ebp-100h] +
mov ecx esi +
call sub_101A92E  +
mov edi eax +
cmp edi ebx +
pop ecx  +
jl loc_101E566  +
mov edx [ebp-0D0h] +
mov ecx esi +
call sub_101DAC2  +
mov edi eax +
cmp edi ebx +
jl loc_101E566  +
mov edx [ebp-124h] +
mov ecx esi +
call sub_1019EA3  +
mov edi eax +
cmp edi ebx +
jl loc_101E566  +
mov edx [ebp-0E0h] +
mov ecx esi +
call sub_101A4BF  +
mov edi eax +
cmp edi ebx +
jl loc_101E566  +
mov edx [ebp-114h] +
mov ecx esi +
call sub_101BCEE  +
mov edi eax +
cmp edi ebx +
jl loc_101E566  +
mov esi [ebp-0F0h] +
mov eax [ebp-0ACh] +
call sub_101C8F7  +
mov edi eax +
cmp edi ebx +
jl loc_101E566  +
cmp dword_1037718 ebx +
jz loc_101E566  +
push dword ptr [ebp-0B4h]  +
call sub_1018AC2  +
pop ecx  +
mov edi eax +
call sub_101876E  +
cmp [ebp-0ACh] ebx +
jz loc_101E57A  +
push dword ptr [ebp-0ACh]  +
call sub_1020676  +
pop ecx  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 8 +
call sub_100AD5C  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 7 +
call sub_100ADB4  +
lea ecx [ebp-0DCh] +
mov byte ptr [ebp-4] 6 +
call sub_100AD5C  +
lea ecx [ebp-0ECh] +
mov byte ptr [ebp-4] 5 +
call sub_100AD04  +
lea ecx [ebp-0FCh] +
mov byte ptr [ebp-4] 4 +
call sub_100ACAC  +
lea ecx [ebp-110h] +
mov byte ptr [ebp-4] 3 +
call sub_100AC54  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 2 +
call sub_100ABFC  +
lea ecx [ebp-130h] +
mov byte ptr [ebp-4] 1 +
call sub_100ABA4  +
lea ecx [ebp-140h] +
mov [ebp-4] bl +
call sub_100AB4C  +
jmp loc_101E1BC  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101EB69  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_100133C +
jnz loc_101E62E  +
cmp dword ptr [esi+8] 0 +
jnz loc_101E62E  +
mov eax off_10360D4 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
jmp loc_101E64E  +
push dword ptr [ebp+8]  +
call sub_1020925  +
pop ecx  +
test eax eax +
jz loc_101E65D  +
push dword ptr [ebp+8]  +
call sub_1020842  +
pop ecx  +
test eax eax +
jz loc_101E641  +
leave   +
retn   +
***
test byte ptr dword_1037848 1 +
mov esi offset dword_103783C +
jnz loc_101E684  +
or dword_1037848 1 +
mov ecx esi +
call sub_101E60A  +
push offset loc_1033704  +
call sub_102045F  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_100A32A  +
push offset dword_1033738  +
lea eax [ebp-0Ch] +
push eax  +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101F40A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
jmp loc_101E6C8  +
push dword ptr [ebp+8]  +
call sub_1020925  +
pop ecx  +
test eax eax +
jz loc_101E6D7  +
push dword ptr [ebp+8]  +
call sub_1020842  +
pop ecx  +
test eax eax +
jz loc_101E6BB  +
leave   +
retn   +
***
test byte ptr dword_1037858 1 +
mov esi offset dword_103784C +
jnz loc_101E6FE  +
or dword_1037858 1 +
mov ecx esi +
call sub_101E60A  +
push offset loc_103371D  +
call sub_102045F  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_100A32A  +
push offset dword_1033738  +
lea eax [ebp-0Ch] +
push eax  +
call sub_101F49D  +
add [eax-7Ch] edx +
add [ecx] al +
jmp sub_100CDD3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1008450 +
call sub_100CDD3  +
test byte ptr [ebp+8] 1 +
jz loc_101E74B  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10105D5  +
mov dword ptr [esi] offset off_1008450 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax (offset loc_103291D+1) +
call sub_101F9C7  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_10107A3  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1010614  +
push offset dword_1033B08  +
lea eax [ebp-50h] +
push eax  +
call sub_101F49D  +
push 44h  +
mov eax (offset loc_103291D+1) +
call sub_101F9C7  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_10107A3  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_101059B  +
push offset dword_10345BC  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_1008450 +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_101E757  +
push offset dword_10345BC  +
lea eax [ebp-28h] +
push eax  +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1037864 1 +
jnz loc_101E832  +
call sub_1020EA4  +
push [ebp+arg_0]  +
call sub_1020D1A  +
push 0FFh  +
call loc_1020A33  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jnz loc_101E891  +
mov eax ds:100003Ch +
cmp dword ptr [eax+1000000h] 4550h +
jnz loc_101E891  +
mov ecx 10Bh +
cmp [eax+1000018h] cx +
jnz loc_101E891  +
cmp dword ptr [eax+1000074h] 0Eh +
jbe loc_101E891  +
xor ecx ecx +
cmp [eax+10000E8h] ecx +
setnz cl  +
mov eax ecx +
retn   +
xor eax eax +
retn   +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-0BCh] +
mov [ebp-0B4h] eax +
cmp dword ptr [ebp-0B8h] 0 +
jnz loc_101EA44  +
push eax  +
call sub_1020C90  +
call sub_1020CBF  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
***
mov eax 0FFh +
call sub_102206C  +
retn   +
***
call sub_1022211  +
jmp loc_101E899  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_101EA99  +
xor eax eax +
jmp loc_101EAFE  +
cmp [ebp+arg_0] edi +
jnz loc_101EAB9  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_101EAFE  +
cmp [ebp+arg_8] edi +
jz loc_101EAD4  +
cmp [ebp+arg_4] esi +
jb loc_101EAD4  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call loc_101F0A0  +
add esp 0Ch +
jmp loc_101EA95  +
push [ebp+arg_4]  +
push edi  +
push [ebp+arg_0]  +
call sub_101EDB0  +
add esp 0Ch +
cmp [ebp+arg_8] edi +
jz loc_101EA9E  +
cmp [ebp+arg_4] esi +
jnb loc_101EAFB  +
call sub_10223A9  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_101EAA8  +
push 16h  +
pop eax  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_101EB5E  +
cmp [ebp+arg_0] edi +
jnz loc_101EB37  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_101EB60  +
cmp [ebp+arg_8] edi +
jz loc_101EB1C  +
cmp [ebp+arg_4] eax +
jnb loc_101EB4F  +
call sub_10223A9  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_101EB26  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call loc_1022410  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_1008484 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
mov dword ptr [esi] offset off_1008484 +
mov eax [ebx] +
push edi  +
test eax eax +
jz loc_101EBCE  +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101EB9F  +
sub eax ecx +
lea edi [eax+1] +
push edi  +
call sub_1020842  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_101EBD2  +
push dword ptr [ebx]  +
push edi  +
push eax  +
call sub_102277A  +
add esp 0Ch +
mov dword ptr [esi+8] 1 +
jmp loc_101EBD2  +
and dword ptr [esi+4] 0 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
xor ecx ecx +
mov dword ptr [esi] offset off_1008484 +
mov [esi+8] ecx +
mov eax [ebx+4] +
push edi  +
cmp [ebx+8] ecx +
jz loc_101EC3C  +
cmp eax ecx +
jz loc_101EC37  +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101EC07  +
sub eax edi +
lea edi [eax+1] +
push edi  +
call sub_1020842  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_101EC3F  +
push dword ptr [ebx+4]  +
push edi  +
push eax  +
call sub_102277A  +
add esp 0Ch +
mov dword ptr [esi+8] 1 +
jmp loc_101EC3F  +
mov [esi+4] ecx +
jmp loc_101EC3F  +
mov [esi+4] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1008484 +
jz locret_101EC62  +
push dword ptr [ecx+4]  +
call sub_101F40A  +
pop ecx  +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jnz locret_101EC74  +
mov eax offset aUnknownExcepti +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101EC4D  +
test byte ptr [ebp+8] 1 +
jz loc_101EC94  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_101ECAF  +
xor eax eax +
pop ebp  +
retn   +
push 1  +
push 0Ah  +
push 0  +
push [ebp+arg_0]  +
call sub_10229F5  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101ECA0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_101ECE8  +
xor eax eax +
xor edx edx +
pop ebp  +
retn   +
push 0Ah  +
push 0  +
push [ebp+arg_0]  +
call sub_1022CF0  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov eax edx +
lea ecx [eax+2] +
xor esi esi +
push edi  +
mov di [eax] +
inc eax  +
inc eax  +
cmp di si +
jnz loc_101ED0F  +
sub eax ecx +
sar eax 1 +
pop edi  +
cmp edx esi +
jnz loc_101ED3F  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101ED79  +
cmp [ebp+arg_4] esi +
jz loc_101ED22  +
mov [ebp+var_14] 49h +
mov [ebp+var_18] edx +
mov [ebp+var_20] edx +
cmp eax 3FFFFFFFh +
jbe loc_101ED61  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_101ED66  +
add eax eax +
mov [ebp+var_1C] eax +
push [ebp+arg_C]  +
lea eax [ebp+var_20] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call [ebp+arg_0]  +
add esp 10h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push 0  +
push [ebp+arg_4]  +
push offset loc_1023146  +
call sub_101ECFE  +
add esp 10h +
pop ebp  +
retn   +
***
mov edx [esp+arg_8] +
mov ecx [esp+arg_0] +
test edx edx +
jz loc_101EE25  +
xor eax eax +
mov al [esp+arg_4] +
test al al +
jnz loc_101EDDC  +
cmp edx 100h +
jb loc_101EDDC  +
cmp dword_103933C 0 +
jz loc_101EDDC  +
jmp sub_102400D  +
push edi  +
mov edi ecx +
cmp edx 4 +
jb loc_101EE15  +
neg ecx  +
and ecx 3 +
jz loc_101EDF7  +
sub edx ecx +
mov [edi] al +
add edi 1 +
sub ecx 1 +
jnz loc_101EDED  +
mov ecx eax +
shl eax 8 +
add eax ecx +
mov ecx eax +
shl eax 10h +
add eax ecx +
mov ecx edx +
and edx 3 +
shr ecx 2 +
jz loc_101EE15  +
stos   +
test edx edx +
jz loc_101EE1F  +
mov [edi] al +
add edi 1 +
sub edx 1 +
jnz loc_101EE15  +
mov eax [esp+4+arg_0] +
pop edi  +
retn   +
mov eax [esp+arg_0] +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi [ebp-1Ch] +
test edi edi +
jnz loc_101F046  +
cmp dword_1037CF0 edi +
jz loc_101EFBB  +
push esi  +
call sub_1020925  +
pop ecx  +
test eax eax +
jnz loc_101EE70  +
call sub_10223A9  +
cmp [ebp-20h] edi +
jnz loc_101F014  +
mov esi eax +
call ds:GetLastError  +
push eax  +
call sub_1022362  +
pop ecx  +
mov [esi] eax +
jmp loc_101F01A  +
test edi edi +
jnz loc_101F046  +
call sub_10223A9  +
cmp [ebp-20h] edi +
jz loc_101F035  +
mov dword ptr [eax] 0Ch +
jmp loc_101F046  +
test esi esi +
jnz loc_101EFDA  +
inc esi  +
push esi  +
push ebx  +
push 0  +
push hHeap  +
call ds:HeapReAlloc  +
mov edi eax +
test edi edi +
jnz loc_101F046  +
cmp dword_1037CF0 eax +
jz loc_101F02C  +
push esi  +
call sub_1020925  +
pop ecx  +
test eax eax +
jz loc_101F022  +
cmp esi 0FFFFFFE0h +
jbe loc_101EFD5  +
push esi  +
call sub_1020925  +
pop ecx  +
call sub_10223A9  +
mov dword ptr [eax] 0Ch +
xor eax eax +
call sub_1024EB9  +
retn   +
call sub_10223A9  +
jmp loc_101EFA8  +
test edi edi +
jnz loc_101F046  +
call sub_10223A9  +
mov esi eax +
call ds:GetLastError  +
push eax  +
call sub_1022362  +
mov [esi] eax +
pop ecx  +
mov eax edi +
jmp loc_101F01C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_101F086  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_101F086  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1022352  +
add esp 14h +
xor eax eax +
jmp loc_101F095  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call sub_101EE2F  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
mov esi [ebp+0Ch] +
mov ecx [ebp+10h] +
mov edi [ebp+8] +
mov eax ecx +
mov edx ecx +
add eax esi +
cmp edi esi +
jbe loc_101F0C0  +
cmp edi eax +
jb loc_101F264  +
cmp ecx 100h +
jb loc_101F0E7  +
cmp dword_103933C 0 +
jz loc_101F0E7  +
push edi  +
push esi  +
and edi 0Fh +
and esi 0Fh +
cmp edi esi +
pop esi  +
pop edi  +
jnz loc_101F0E7  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_1024F5E  +
***
test edi 3 +
jnz loc_101F104  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_101F124  +
movs   +
jmp ds:off_101F214[edx*4]  +
mov eax edi +
mov edx 3 +
sub ecx 4 +
jb loc_101F11C  +
and eax 3 +
add ecx eax +
jmp dword ptr ds:(loc_101F124+4)[eax*4]  +
***
jmp ds:dword_101F224[ecx*4]  +
***
jmp ds:off_101F1A8[ecx*4]  +
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
add esi 3 +
add edi 3 +
cmp ecx 8 +
jb loc_101F124  +
movs   +
jmp ds:off_101F214[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
add esi 2 +
add edi 2 +
cmp ecx 8 +
jb loc_101F124  +
movs   +
jmp ds:off_101F214[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
add esi 1 +
shr ecx 2 +
add edi 1 +
cmp ecx 8 +
jb loc_101F124  +
movs   +
jmp ds:off_101F214[edx*4]  +
***
mov eax [esi+ecx*4-1Ch] +
mov [edi+ecx*4-1Ch] eax +
mov eax [esi+ecx*4-18h] +
mov [edi+ecx*4-18h] eax +
mov eax [esi+ecx*4-14h] +
mov [edi+ecx*4-14h] eax +
mov eax [esi+ecx*4-10h] +
mov [edi+ecx*4-10h] eax +
mov eax [esi+ecx*4-0Ch] +
mov [edi+ecx*4-0Ch] eax +
mov eax [esi+ecx*4-8] +
mov [edi+ecx*4-8] eax +
mov eax [esi+ecx*4-4] +
mov [edi+ecx*4-4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_101F214[edx*4]  +
***
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
lea esi [ecx+esi-4] +
lea edi [ecx+edi-4] +
test edi 3 +
jnz loc_101F298  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_101F28C  +
std   +
movs   +
cld   +
jmp ds:off_101F3B0[edx*4]  +
neg ecx  +
jmp ds:off_101F360[ecx*4]  +
mov eax edi +
mov edx 3 +
cmp ecx 4 +
jb loc_101F2B0  +
and eax 3 +
sub ecx eax +
jmp dword ptr ds:(loc_101F2B0+4)[eax*4]  +
***
jmp ds:off_101F3B0[ecx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
sub esi 1 +
shr ecx 2 +
sub edi 1 +
cmp ecx 8 +
jb loc_101F28C  +
std   +
movs   +
cld   +
jmp ds:off_101F3B0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
sub esi 2 +
sub edi 2 +
cmp ecx 8 +
jb loc_101F28C  +
std   +
movs   +
cld   +
jmp ds:off_101F3B0[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
sub esi 3 +
sub edi 3 +
cmp ecx 8 +
jb loc_101F28C  +
std   +
movs   +
cld   +
jmp ds:off_101F3B0[edx*4]  +
mov eax [esi+ecx*4+1Ch] +
mov [edi+ecx*4+1Ch] eax +
mov eax [esi+ecx*4+18h] +
mov [edi+ecx*4+18h] eax +
mov eax [esi+ecx*4+14h] +
mov [edi+ecx*4+14h] eax +
mov eax [esi+ecx*4+10h] +
mov [edi+ecx*4+10h] eax +
mov eax [esi+ecx*4+0Ch] +
mov [edi+ecx*4+0Ch] eax +
mov eax [esi+ecx*4+8] +
mov [edi+ecx*4+8] eax +
mov eax [esi+ecx*4+4] +
mov [edi+ecx*4+4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_101F3B0[edx*4]  +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
push esi  +
push 0  +
push hHeap  +
call ds:HeapFree  +
test eax eax +
jnz loc_101F492  +
call sub_10223A9  +
mov esi eax +
call ds:GetLastError  +
push eax  +
call sub_1022362  +
mov [esi] eax +
pop ecx  +
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 8  +
pop ecx  +
mov esi offset dword_10084A0 +
lea edi [ebp+dwExceptionCode] +
movs   +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
pop edi  +
mov [ebp+var_4] eax +
pop esi  +
test eax eax +
jz loc_101F4D2  +
test byte ptr [eax] 8 +
jz loc_101F4D2  +
mov [ebp+Arguments] 1994000h +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+nNumberOfArguments]  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10084C0 +
jz loc_101F509  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add ecx 9 +
add eax 9 +
mov dl [eax] +
cmp dl [ecx] +
jnz loc_101F541  +
test dl dl +
jz loc_101F53D  +
mov dl [eax+1] +
cmp dl [ecx+1] +
jnz loc_101F541  +
inc eax  +
inc eax  +
inc ecx  +
inc ecx  +
test dl dl +
jnz loc_101F523  +
xor eax eax +
jmp loc_101F546  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov eax [ebp+arg_4] +
add eax 0Ch +
mov [ebp+var_4] eax +
mov ebx large fs:0 +
mov eax [ebx] +
mov large fs:0 eax +
mov eax [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov ebp [ebp+var_4] +
mov esp [ebx-4] +
jmp eax  +
***
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call [ebp+arg_4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
call [ebp+arg_4]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi large fs:0 +
mov [ebp+var_4] esi +
mov [ebp+var_8] offset loc_101F600 +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call ds:__imp_RtlUnwind  +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
and eax 0FFFFFFFDh +
mov ecx [ebp+arg_4] +
mov [ecx+4] eax +
mov edi large fs:0 +
mov ebx [ebp+var_4] +
mov [ebx] edi +
mov large fs:0 ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
push edi  +
cld   +
mov [ebp-4] eax +
xor eax eax +
push eax  +
push eax  +
push eax  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1025CE4  +
add esp 20h +
mov [ebp-8] eax +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp-8] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
cld   +
mov esi [ebp+0Ch] +
mov ecx [esi+8] +
xor ecx esi +
call sub_101F9B2  +
push 0  +
push esi  +
push dword ptr [esi+14h]  +
push dword ptr [esi+0Ch]  +
push 0  +
push dword ptr [ebp+10h]  +
push dword ptr [esi+10h]  +
push dword ptr [ebp+8]  +
call sub_1025CE4  +
add esp 20h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
cmp [ebp+arg_0] 123h +
jnz loc_101F6C5  +
mov eax offset loc_101F766 +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_101F78F  +
and [ebp+var_28] 0 +
mov [ebp+var_24] offset loc_101F797 +
mov eax dword_1036118 +
lea ecx [ebp+var_28] +
xor eax ecx +
mov [ebp+var_20] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_10] eax +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
mov [ebp+var_C] esp +
mov [ebp+var_8] ebp +
mov eax large fs:0 +
mov [ebp+var_28] eax +
lea eax [ebp+var_28] +
mov large fs:0 eax +
mov [ebp+var_3C] 1 +
mov eax [ebp+arg_0] +
mov [ebp+var_38] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_34] eax +
and [ebp+var_2C] 0 +
jz loc_101F73A  +
mov eax [ebp+var_2C] +
mov [ebp+var_40] eax +
jmp loc_101F748  +
call sub_1021B55  +
mov [ebp+var_2C] eax +
mov eax [ebp+var_2C] +
mov [ebp+var_40] eax +
mov eax [ebp+var_40] +
mov eax [eax+80h] +
mov [ebp+var_30] eax +
lea eax [ebp+var_38] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call [ebp+var_30]  +
pop ecx  +
pop ecx  +
and [ebp+var_3C] 0 +
cmp [ebp+var_4] 0 +
jz loc_101F783  +
mov ebx large fs:0 +
mov eax [ebx] +
mov ebx [ebp+var_28] +
mov [ebx] eax +
mov large fs:0 ebx +
jmp loc_101F78C  +
mov eax [ebp+var_28] +
mov large fs:0 eax +
mov eax [ebp+var_3C] +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
cld   +
mov eax [ebp+0Ch] +
mov ecx [eax+8] +
xor ecx [ebp+0Ch] +
call sub_101F9B2  +
mov eax [ebp+8] +
mov eax [eax+4] +
and eax 66h +
jz loc_101F7C9  +
mov eax [ebp+0Ch] +
mov dword ptr [eax+24h] 1 +
xor eax eax +
inc eax  +
jmp loc_101F833  +
jmp loc_101F833  +
push 1  +
mov eax [ebp+0Ch] +
push dword ptr [eax+18h]  +
mov eax [ebp+0Ch] +
push dword ptr [eax+14h]  +
mov eax [ebp+0Ch] +
push dword ptr [eax+0Ch]  +
push 0  +
push dword ptr [ebp+10h]  +
mov eax [ebp+0Ch] +
push dword ptr [eax+10h]  +
push dword ptr [ebp+8]  +
call sub_1025CE4  +
add esp 20h +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+24h] 0 +
jnz loc_101F807  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
call sub_101F5D4  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
lea eax [ebp-4] +
push eax  +
push 123h  +
call sub_101F6A1  +
add esp 1Ch +
mov eax [ebp-4] +
mov ebx [ebp+0Ch] +
mov esp [ebx+1Ch] +
mov ebp [ebx+20h] +
jmp eax  +
***
xor eax eax +
inc eax  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+10h] +
mov esi [edi+0Ch] +
mov [ebp+var_4] eax +
mov ebx esi +
jmp loc_101F881  +
cmp esi 0FFFFFFFFh +
jnz loc_101F85E  +
call loc_1025E25  +
mov ecx [ebp+var_4] +
dec esi  +
mov eax esi +
imul eax eax +
add eax ecx +
mov ecx [ebp+arg_8] +
cmp [eax+4] ecx +
jge loc_101F876  +
cmp ecx [eax+8] +
jle loc_101F87B  +
cmp esi 0FFFFFFFFh +
jnz loc_101F884  +
dec [ebp+arg_4]  +
mov ebx [ebp+arg_0] +
mov [ebp+arg_0] esi +
cmp [ebp+arg_4] 0 +
jge loc_101F854  +
mov eax [ebp+arg_C] +
inc esi  +
mov [eax] esi +
mov eax [ebp+arg_10] +
mov [eax] ebx +
cmp ebx [edi+0Ch] +
ja loc_101F89E  +
cmp esi ebx +
jbe loc_101F8A3  +
call loc_1025E25  +
mov eax esi +
imul eax eax +
add eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi] eax +
call sub_1021B55  +
add eax 98h +
mov ecx [eax] +
mov [esi+4] ecx +
mov [eax] esi +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1021B55  +
mov eax [eax+98h] +
jmp loc_101F8FA  +
mov ecx [eax] +
cmp ecx [ebp+arg_0] +
jz loc_101F901  +
mov eax [eax+4] +
test eax eax +
jnz loc_101F8F0  +
inc eax  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1021B55  +
mov ecx [ebp+arg_0] +
add eax 98h +
cmp ecx [eax] +
jnz loc_101F927  +
mov ecx [ecx+4] +
mov [eax] ecx +
pop ebp  +
retn   +
mov eax [eax] +
jmp loc_101F934  +
mov edx [eax+4] +
cmp ecx edx +
jz loc_101F940  +
mov eax edx +
cmp dword ptr [eax+4] 0 +
jnz loc_101F92B  +
pop ebp  +
jmp loc_1025E25  +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1036118 +
and [ebp+var_18] 0 +
lea ecx [ebp+var_18] +
xor eax ecx +
mov ecx [ebp+arg_0] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_C] +
inc eax  +
mov [ebp+var_14] offset loc_101F669 +
mov [ebp+var_8] ecx +
mov [ebp+var_4] eax +
mov eax large fs:0 +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
mov large fs:0 eax +
push [ebp+arg_10]  +
push ecx  +
push [ebp+arg_8]  +
call sub_1025E80  +
mov ecx eax +
mov eax [ebp+var_18] +
mov large fs:0 eax +
mov eax ecx +
leave   +
retn   +
***
cmp ecx dword_1036118 +
jnz loc_101F9BD  +
retn 0  +
jmp loc_1025ED1  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1036118 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1036118 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1036118 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_101F9B2  +
jmp sub_101FA75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jnz loc_101FAD2  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101FB52  +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp ecx ebx +
jz loc_101FAFE  +
cmp esi ebx +
jnz loc_101FAFE  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101FB51  +
mov eax 7FFFFFFFh +
mov [ebp+var_1C] eax +
cmp ecx eax +
ja loc_101FB0D  +
mov [ebp+var_1C] ecx +
push edi  +
push [ebp+arg_10]  +
lea eax [ebp+var_20] +
push [ebp+arg_C]  +
mov [ebp+var_14] 42h +
push [ebp+arg_8]  +
mov [ebp+var_18] esi +
push eax  +
mov [ebp+var_20] esi +
call sub_10261BF  +
add esp 10h +
mov edi eax +
cmp esi ebx +
jz loc_101FB50  +
dec [ebp+var_1C]  +
js loc_101FB42  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_101FB4E  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1025FB8  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101FAA2  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
jnz loc_101FBAC  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101FC4D  +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp eax ebx +
jz loc_101FBD8  +
cmp esi ebx +
jnz loc_101FBD8  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_101FC4C  +
mov [ebp+var_14] 42h +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
cmp eax 3FFFFFFFh +
jbe loc_101FBF5  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_101FBFA  +
add eax eax +
mov [ebp+var_1C] eax +
push edi  +
push [ebp+arg_10]  +
lea eax [ebp+var_20] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call sub_1026EC8  +
add esp 10h +
mov edi eax +
cmp esi ebx +
jz loc_101FC4B  +
dec [ebp+var_1C]  +
js loc_101FC25  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_101FC31  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1025FB8  +
pop ecx  +
pop ecx  +
dec [ebp+var_1C]  +
js loc_101FC3D  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_101FC49  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_1025FB8  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101FB7C  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jnz loc_101FC86  +
xor eax eax +
pop ebp  +
retn   +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
dec [ebp+arg_8]  +
jz loc_101FCA4  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_101FCA4  +
cmp ax [edx] +
jnz loc_101FCA4  +
inc ecx  +
inc ecx  +
inc edx  +
inc edx  +
jmp loc_101FC8C  +
movzx eax word ptr [ecx] +
movzx ecx word ptr [edx] +
sub eax ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov byte ptr [esi+0Ch] 0 +
test eax eax +
jnz loc_101FD43  +
call sub_1021AD4  +
mov [esi+8] eax +
test eax eax +
jz loc_101FD35  +
mov ecx [eax+6Ch] +
mov [esi] ecx +
mov ecx [eax+68h] +
mov [esi+4] ecx +
mov ecx [esi] +
cmp ecx off_1036B60 +
jz loc_101FCFD  +
test byte ptr [eax+70h] 2 +
jnz loc_101FCFD  +
test byte_1036A7C 1 +
jz loc_101FCFD  +
call sub_102846C  +
mov [esi] eax +
mov eax [esi+4] +
cmp eax lpAddend +
jz loc_101FD22  +
mov eax [esi+8] +
test byte ptr [eax+70h] 2 +
jnz loc_101FD22  +
test byte_1036A7C 1 +
jz loc_101FD22  +
call sub_1027CFA  +
mov [esi+4] eax +
mov eax [esi+8] +
test byte ptr [eax+70h] 2 +
jnz loc_101FD4D  +
or dword ptr [eax+70h] 2 +
mov byte ptr [esi+0Ch] 1 +
jmp loc_101FD4D  +
mov eax off_1036B60 +
mov [esi] eax +
mov eax lpAddend +
jmp loc_101FD4A  +
mov ecx [eax] +
mov [esi] ecx +
mov eax [eax+4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
movzx eax [ebp+arg_0] +
mov ecx [ebp+var_10] +
mov ecx [ecx+0C8h] +
movzx eax word ptr [ecx+eax*2] +
and eax 8000h +
cmp [ebp+var_4] 0 +
jz locret_101FD8F  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_101FD59  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
push [ebp+arg_0]  +
call sub_102857B  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax offset loc_10290FE +
mov off_1036B70 eax +
mov off_1036B74 offset loc_10287B8 +
mov off_1036B78 offset loc_102875D +
mov off_1036B7C offset loc_10287A0 +
mov off_1036B80 offset loc_10286F5 +
mov off_1036B84 eax +
mov off_1036B88 offset sub_1029071 +
mov off_1036B8C offset sub_1028716 +
mov off_1036B90 offset sub_102866E +
mov off_1036B94 offset sub_10285F6 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_101FDC6  +
cmp [ebp+arg_0] 0 +
jz loc_101FE40  +
call sub_102914C  +
fnclex   +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
cmp word ptr [ebx] 0 +
push edi  +
mov edi eax +
jz loc_101FEA2  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_101FEA0  +
movzx edx cx +
sub eax ebx +
mov ecx [ebp+arg_4] +
test dx dx +
jz loc_101FE8E  +
movzx edx word ptr [ecx] +
test dx dx +
jz loc_101FEA6  +
movzx ebx word ptr [eax+ecx] +
movzx edx dx +
sub ebx edx +
jnz loc_101FE8E  +
inc ecx  +
inc ecx  +
cmp [eax+ecx] bx +
jnz loc_101FE73  +
cmp word ptr [ecx] 0 +
jz loc_101FEA6  +
inc edi  +
inc edi  +
movzx edx word ptr [edi] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101FE6B  +
xor eax eax +
pop edi  +
pop ebx  +
pop ebp  +
retn   +
mov eax edi +
jmp loc_101FEA2  +
***
call sub_1024E74  +
call sub_10292DF  +
pop ecx  +
pop ecx  +
retn   +
***
call sub_1021B55  +
mov ecx [eax+14h] +
imul ecx ecx +
add ecx 269EC3h +
mov [eax+14h] ecx +
mov eax ecx +
shr eax 10h +
and eax 7FFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx eax +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101FFA4  +
mov cx [ebp+arg_4] +
dec eax  +
dec eax  +
cmp eax edx +
jz loc_101FFBD  +
cmp [eax] cx +
jnz loc_101FFB2  +
cmp [eax] cx +
jz loc_101FFC4  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ds:off_10084CC 0 +
jz loc_101FFEE  +
push offset off_10084CC  +
call sub_1029659  +
pop ecx  +
test eax eax +
jz loc_101FFEE  +
call ds:off_10084CC  +
call sub_1021AD4  +
test eax eax +
jz loc_101FFFE  +
push eax  +
call sub_1021CC4  +
pop ecx  +
push dword ptr [ebp+8]  +
call ds:ExitThread  +
call sub_1024E74  +
call sub_1021B55  +
and dword ptr [ebp-4] 0 +
push dword ptr [eax+58h]  +
call dword ptr [eax+54h]  +
push eax  +
call loc_101FFCB  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-1Ch] ecx +
push eax  +
push ecx  +
call sub_1020EE8  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1021974  +
call sub_1021969  +
push eax  +
call sub_102194A  +
test eax eax +
jnz loc_102008B  +
push dword ptr [ebp+8]  +
call sub_1021969  +
push eax  +
call sub_10219A3  +
test eax eax +
jnz loc_10200A6  +
call ds:GetLastError  +
push eax  +
call ds:ExitThread  +
mov ecx [ebp+8] +
mov edx [ecx+54h] +
mov [eax+54h] edx +
mov edx [ecx+58h] +
mov [eax+58h] edx +
mov edx [ecx+4] +
push ecx  +
mov [eax+4] edx +
call sub_1021B74  +
cmp ds:off_10084C8 0 +
jz loc_10200C4  +
push offset off_10084C8  +
call sub_1029659  +
pop ecx  +
test eax eax +
jz loc_10200C4  +
call ds:off_10084C8  +
call sub_102000D  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+ThreadId] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp edi ebx +
jnz loc_1020100  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_102017C  +
push esi  +
call sub_1021974  +
push 214h  +
push 1  +
call sub_10297ED  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_1020164  +
call sub_1021B55  +
push dword ptr [eax+6Ch]  +
push esi  +
call sub_1021A07  +
mov eax [ebp+arg_C] +
or dword ptr [esi+4] 0FFFFFFFFh +
mov [esi+58h] eax +
mov eax [ebp+arg_14] +
pop ecx  +
pop ecx  +
mov [esi+54h] edi +
cmp eax ebx +
jnz loc_1020141  +
lea eax [ebp+ThreadId] +
push eax  +
push [ebp+dwCreationFlags]  +
push esi  +
push offset loc_1020053  +
push [ebp+dwStackSize]  +
push [ebp+lpThreadAttributes]  +
call ds:CreateThread  +
cmp eax ebx +
jnz loc_102017B  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
push esi  +
call sub_101F40A  +
pop ecx  +
cmp [ebp+var_4] ebx +
jz loc_1020179  +
push [ebp+var_4]  +
call sub_10223D9  +
pop ecx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor esi esi +
xor eax eax +
push edi  +
cmp [ebp+arg_8] esi +
jz loc_102026A  +
mov ebx [ebp+arg_0] +
cmp ebx esi +
jnz loc_10201C6  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_102026A  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_10201A4  +
push [ebp+arg_C]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov eax [ebp+var_10] +
cmp [eax+14h] esi +
jnz loc_102021F  +
movzx eax word ptr [ebx] +
cmp ax 41h +
jb loc_10201F2  +
cmp ax 5Ah +
ja loc_10201F2  +
add eax 20h +
movzx esi ax +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_1020207  +
cmp ax 5Ah +
ja loc_1020207  +
add eax 20h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_1020255  +
test si si +
jz loc_1020255  +
cmp si ax +
jz loc_10201E0  +
jmp loc_1020255  +
lea eax [ebp+var_10] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
call sub_1029833  +
movzx esi ax +
lea eax [ebp+var_10] +
push eax  +
movzx eax word ptr [edi] +
push eax  +
call sub_1029833  +
add esp 10h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_1020255  +
test si si +
jz loc_1020255  +
cmp si ax +
jz loc_102021F  +
movzx ecx ax +
movzx eax si +
sub eax ecx +
cmp [ebp+var_4] 0 +
jz loc_102026A  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp dword_1038188 esi +
jnz loc_1020304  +
xor eax eax +
cmp [ebp+arg_8] esi +
jz loc_1020316  +
mov edi [ebp+arg_0] +
cmp edi esi +
jnz loc_10202B6  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_1020316  +
mov edx [ebp+arg_4] +
cmp edx esi +
jz loc_1020297  +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_10202CF  +
cmp ax 5Ah +
ja loc_10202CF  +
add eax 20h +
movzx ecx ax +
movzx eax word ptr [edx] +
cmp ax 41h +
jb loc_10202E4  +
cmp ax 5Ah +
ja loc_10202E4  +
add eax 20h +
inc edi  +
inc edi  +
inc edx  +
inc edx  +
dec [ebp+arg_8]  +
movzx eax ax +
jz loc_10202FA  +
cmp cx si +
jz loc_10202FA  +
cmp cx ax +
jz loc_10202BD  +
movzx edx ax +
movzx eax cx +
sub eax edx +
jmp loc_1020316  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1020185  +
add esp 10h +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_1039468 +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_10203DC  +
cmp dword_1039464 0 +
jz loc_10203DC  +
push eax  +
call sub_10218C4  +
push dword_1039464  +
mov ebx eax +
mov [ebp+var_4] ebx +
call sub_10218C4  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jb loc_10203DC  +
mov edi esi +
sub edi ebx +
lea eax [edi+4] +
cmp eax 4 +
jb loc_10203DC  +
push ebx  +
call sub_10298ED  +
mov ebx eax +
lea eax [edi+4] +
pop ecx  +
cmp ebx eax +
jnb loc_10203C4  +
mov eax 800h +
cmp ebx eax +
jnb loc_1020387  +
mov eax ebx +
add eax ebx +
cmp eax ebx +
jb loc_102039C  +
push eax  +
push [ebp+var_4]  +
call sub_101EE2F  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10203B2  +
lea eax [ebx+10h] +
cmp eax ebx +
jb loc_10203DC  +
push eax  +
push [ebp+var_4]  +
call sub_101EE2F  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10203DC  +
sar edi 2 +
push eax  +
lea esi [eax+edi*4] +
call sub_102183E  +
pop ecx  +
mov dword_1039468 eax +
mov edi [ebp+arg_0] +
mov [esi] edi +
add esi 4 +
push esi  +
call sub_102183E  +
mov dword_1039464 eax +
pop ecx  +
mov eax edi +
jmp loc_10203DE  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push 4  +
push 20h  +
call sub_10297ED  +
mov esi eax +
push esi  +
call sub_102183E  +
add esp 0Ch +
mov dword_1039468 eax +
mov dword_1039464 eax +
test esi esi +
jnz loc_1020412  +
push 18h  +
pop eax  +
pop esi  +
retn   +
***
and dword ptr [esi] 0 +
xor eax eax +
pop esi  +
retn   +
***
call sub_1024E74  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_102041E  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dx [ebp+arg_4] +
jmp loc_1020490  +
cmp cx dx +
jz loc_102049F  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1020489  +
cmp [eax] dx +
jz loc_102049F  +
xor eax eax +
pop ebp  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
or ebx 0FFFFFFFFh +
cmp esi edi +
jnz loc_102062A  +
call sub_10223A9  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax ebx +
jmp loc_102066C  +
test byte ptr [esi+0Ch] 83h +
jz loc_1020667  +
push esi  +
call sub_1029BB1  +
push esi  +
mov ebx eax +
call sub_1029B7B  +
push esi  +
call sub_1029995  +
push eax  +
call sub_1029A6A  +
add esp 10h +
test eax eax +
jge loc_1020656  +
or ebx 0FFFFFFFFh +
jmp loc_1020667  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_1020667  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov [esi+1Ch] edi +
mov [esi+0Ch] edi +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 40h  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10206F7  +
add esp 0Ch +
pop ebp  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi 0FFFFFFE0h +
ja loc_10208F5  +
push ebx  +
push edi  +
mov edi ds:HeapAlloc +
cmp hHeap 0 +
jnz loc_102087D  +
call sub_1020EA4  +
push 1Eh  +
call sub_1020D1A  +
push 0FFh  +
call loc_1020A33  +
pop ecx  +
pop ecx  +
mov eax dword_1039340 +
cmp eax 1 +
jnz loc_1020895  +
test esi esi +
jz loc_102088F  +
mov eax esi +
jmp loc_1020892  +
xor eax eax +
inc eax  +
push eax  +
jmp loc_10208B1  +
cmp eax 3 +
jnz loc_10208A5  +
push esi  +
call sub_10207EE  +
pop ecx  +
test eax eax +
jnz loc_10208BB  +
test esi esi +
jnz loc_10208AA  +
inc esi  +
add esi 0Fh +
and esi 0FFFFFFF0h +
push esi  +
push 0  +
push hHeap  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_10208EF  +
push 0Ch  +
pop esi  +
cmp dword_1037CF0 eax +
jz loc_10208E1  +
push [ebp+arg_0]  +
call sub_1020925  +
pop ecx  +
test eax eax +
jz loc_10208E8  +
mov esi [ebp+arg_0] +
jmp loc_102085C  +
call sub_10223A9  +
mov [eax] esi +
call sub_10223A9  +
mov [eax] esi +
pop edi  +
mov eax ebx +
pop ebx  +
jmp loc_1020909  +
push esi  +
call sub_1020925  +
pop ecx  +
call sub_10223A9  +
mov dword ptr [eax] 0Ch +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_103786C eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword_103786C  +
call sub_10218C4  +
pop ecx  +
test eax eax +
jz loc_1020949  +
push [ebp+arg_0]  +
call eax  +
pop ecx  +
test eax eax +
jz loc_1020949  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_102098E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_102098E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1020989  +
cmp eax 19930521h +
jz loc_1020989  +
cmp eax 19930522h +
jz loc_1020989  +
cmp eax 1994000h +
jnz loc_102098E  +
call sub_1025DCF  +
xor eax eax +
pop ebp  +
retn 4  +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10209C8  +
test eax eax +
jnz loc_10209CD  +
mov ecx [esi] +
test ecx ecx +
jz loc_10209C5  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10209B9  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1020EA4  +
push [ebp+arg_0]  +
call sub_1020D1A  +
push off_1036120  +
call sub_10218C4  +
push 0FFh  +
call eax  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset ModuleName  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1020A2C  +
push offset aCorexitprocess  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1020A2C  +
push [ebp+arg_0]  +
call eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1020A03  +
pop ecx  +
push dword ptr [ebp+8]  +
call ds:ExitProcess  +
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_1020A81  +
mov eax [esi] +
test eax eax +
jz loc_1020A7E  +
call eax  +
add esi 4 +
cmp esi [ebp+arg_0] +
jb loc_1020A76  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ecx esi +
jnz loc_1020ABA  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_1020AC7  +
mov eax dword_1037874 +
cmp eax esi +
jz loc_1020A9D  +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1020AFB  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_1020B0D  +
cmp dword_1037874 esi +
jz loc_1020ADE  +
mov ecx dword_1037880 +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ds:off_10084C4 0 +
jz loc_1020B3C  +
push offset off_10084C4  +
call sub_1029659  +
pop ecx  +
test eax eax +
jz loc_1020B3C  +
push [ebp+arg_0]  +
call ds:off_10084C4  +
pop ecx  +
call sub_1029126  +
call sub_10218B6  +
push offset dword_10012B8  +
push offset dword_10012A0  +
mov dword_1039464 eax +
mov dword_1039468 eax +
call sub_10209AC  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1020B9B  +
push offset dword_100129C  +
mov eax offset dword_100128C +
call sub_1020A6C  +
cmp dword_1039474 0 +
pop ecx  +
jz loc_1020B99  +
push offset dword_1039474  +
call sub_1029659  +
pop ecx  +
test eax eax +
jz loc_1020B99  +
push 0  +
push 2  +
push 0  +
call dword_1039474  +
xor eax eax +
pop ebp  +
retn   +
***
call sub_1024E74  +
cmp dword ptr [ebp+10h] 0 +
jz locret_1020C69  +
push 8  +
call sub_1024221  +
pop ecx  +
retn   +
***
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_1020BA2  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 1  +
push [ebp+arg_0]  +
call sub_1020BA2  +
add esp 0Ch +
pop ebp  +
retn   +
***
push 0  +
call sub_1020BA2  +
add esp 0Ch +
retn   +
***
push 0  +
call sub_1020BA2  +
add esp 0Ch +
retn   +
***
mov edi edi +
push esi  +
call sub_10218B6  +
mov esi eax +
push esi  +
call sub_1020911  +
push esi  +
call sub_102A4A6  +
push esi  +
call sub_102A492  +
push esi  +
call sub_102A26C  +
push esi  +
call nullsub_1  +
push esi  +
call sub_1025E62  +
push offset sub_1020C90  +
call sub_102183E  +
add esp 1Ch +
mov off_1036120 eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] esi +
cmp edi dword_1036128[esi*8] +
jz loc_1020D40  +
inc esi  +
mov [ebp+var_4] esi +
cmp esi 17h +
jb loc_1020D2E  +
cmp esi 17h +
jnb loc_1020E9A  +
push 3  +
call sub_102A7E6  +
pop ecx  +
cmp eax 1 +
jz loc_1020E64  +
push 3  +
call sub_102A7E6  +
pop ecx  +
test eax eax +
jnz loc_1020D73  +
cmp dword_1036100 1 +
jz loc_1020E64  +
cmp edi 0FCh +
jz loc_1020E9A  +
push offset aRuntimeErrorPr  +
mov edi 314h +
push edi  +
mov esi offset unk_10378B8 +
push esi  +
call sub_102277A  +
add esp 0Ch +
test eax eax +
jz loc_1020DA9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
mov byte_10379D5 bl +
push 104h  +
mov ebx offset Filename +
push ebx  +
push 0  +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_1020DEC  +
push offset aProgramNameUnk  +
push 2FBh  +
push ebx  +
call sub_102277A  +
add esp 0Ch +
test eax eax +
jz loc_1020DEC  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_10222A7  +
add esp 14h +
push ebx  +
push edi  +
push esi  +
call sub_102A76D  +
add esp 0Ch +
xor ebx ebx +
test eax eax +
jz loc_1020E0A  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
push offset asc_1008A70  +
push edi  +
push esi  +
call sub_102A76D  +
add esp 0Ch +
test eax eax +
jz loc_1020E2A  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
mov eax [ebp+var_4] +
push lpBuffer[eax*8]  +
push edi  +
push esi  +
call sub_102A76D  +
add esp 0Ch +
test eax eax +
jz loc_1020E4F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
push 12010h  +
push offset aMicrosoftVisua  +
push esi  +
call sub_102A5C6  +
add esp 0Ch +
jmp loc_1020E9A  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
mov edi eax +
cmp edi ebx +
jz loc_1020E9A  +
cmp edi 0FFFFFFFFh +
jz loc_1020E9A  +
mov edx lpBuffer[esi*8] +
mov ecx edx +
lea esi [ecx+1] +
mov al [ecx] +
inc ecx  +
test al al +
jnz loc_1020E83  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
sub ecx esi +
push ecx  +
push edx  +
push edi  +
call ds:WriteFile  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
pop ecx  +
cmp eax 1 +
jz loc_1020EC6  +
push 3  +
call sub_102A7E6  +
pop ecx  +
test eax eax +
jnz locret_1020EDC  +
cmp dword_1036100 1 +
jnz locret_1020EDC  +
push 0FCh  +
call sub_1020D1A  +
push 0FFh  +
call sub_1020D1A  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
call sub_1021AD4  +
mov esi eax +
test esi esi +
jz loc_1021045  +
mov edx [esi+5Ch] +
mov eax dword_1036264 +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edx +
push ebx  +
cmp [ecx] edi +
jz loc_1020F20  +
mov ebx eax +
imul ebx ebx +
add ecx 0Ch +
add ebx edx +
cmp ecx ebx +
jb loc_1020F0E  +
imul eax eax +
add eax edx +
cmp ecx eax +
jnb loc_1020F31  +
cmp [ecx] edi +
jnz loc_1020F31  +
mov eax ecx +
jmp loc_1020F33  +
xor eax eax +
test eax eax +
jz loc_1020F41  +
mov ebx [eax+8] +
mov [ebp+var_4] ebx +
test ebx ebx +
jnz loc_1020F48  +
xor eax eax +
jmp loc_1021043  +
cmp ebx 5 +
jnz loc_1020F59  +
and dword ptr [eax+8] 0 +
xor eax eax +
inc eax  +
jmp loc_1021043  +
cmp ebx 1 +
jz loc_1021040  +
mov ecx [esi+60h] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_4] +
mov [esi+60h] ecx +
mov ecx [eax+4] +
cmp ecx 8 +
jnz loc_1021032  +
mov ecx dword_1036258 +
mov edi dword_103625C +
mov edx ecx +
add edi ecx +
cmp edx edi +
jge loc_1020FB2  +
imul ecx ecx +
mov edi [esi+5Ch] +
and dword ptr [ecx+edi+8] 0 +
mov edi dword_1036258 +
mov ebx dword_103625C +
inc edx  +
add ebx edi +
add ecx 0Ch +
cmp edx ebx +
jl loc_1020F91  +
mov ebx [ebp+var_4] +
mov eax [eax] +
mov edi [esi+64h] +
cmp eax 0C000008Eh +
jnz loc_1020FC7  +
mov dword ptr [esi+64h] 83h +
jmp loc_1021025  +
cmp eax 0C0000090h +
jnz loc_1020FD7  +
mov dword ptr [esi+64h] 81h +
jmp loc_1021025  +
cmp eax 0C0000091h +
jnz loc_1020FE7  +
mov dword ptr [esi+64h] 84h +
jmp loc_1021025  +
cmp eax 0C0000093h +
jnz loc_1020FF7  +
mov dword ptr [esi+64h] 85h +
jmp loc_1021025  +
cmp eax 0C000008Dh +
jnz loc_1021007  +
mov dword ptr [esi+64h] 82h +
jmp loc_1021025  +
cmp eax 0C000008Fh +
jnz loc_1021017  +
mov dword ptr [esi+64h] 86h +
jmp loc_1021025  +
cmp eax 0C0000092h +
jnz loc_1021025  +
mov dword ptr [esi+64h] 8Ah +
push dword ptr [esi+64h]  +
push 8  +
call ebx  +
pop ecx  +
mov [esi+64h] edi +
jmp loc_1021039  +
and dword ptr [eax+8] 0 +
push ecx  +
call ebx  +
mov eax [ebp+var_8] +
pop ecx  +
mov [esi+60h] eax +
or eax 0FFFFFFFFh +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
cmp dword_103946C edi +
jnz loc_1021060  +
call sub_1028186  +
mov esi dword_1039478 +
test esi esi +
jnz loc_102106F  +
mov esi offset dword_1004768 +
mov al [esi] +
cmp al 20h +
ja loc_102107D  +
test al al +
jz loc_10210A7  +
test edi edi +
jz loc_10210A1  +
cmp al 22h +
jnz loc_102108A  +
xor ecx ecx +
test edi edi +
setz cl  +
mov edi ecx +
movzx eax al +
push eax  +
call sub_102A88E  +
pop ecx  +
test eax eax +
jz loc_1021099  +
inc esi  +
inc esi  +
jmp loc_102106F  +
cmp al 20h +
ja loc_10210A7  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_102109C  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
cmp dword_103946C edi +
jnz loc_10210C9  +
call sub_1028186  +
mov esi dword_103785C +
cmp esi edi +
jnz loc_10210DB  +
or eax 0FFFFFFFFh +
jmp loc_10211B3  +
push ebx  +
xor edx edx +
jmp loc_10210FD  +
mov eax esi +
lea ebx [eax+1] +
mov [ebp+var_4] ebx +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_10210E8  +
sub eax [ebp+var_4] +
inc eax  +
cmp cl 3Dh +
jz loc_10210FB  +
inc edi  +
add edx eax +
add esi eax +
mov cl [esi] +
test cl cl +
jnz loc_10210E0  +
shl edi 2 +
lea ebx [edi+edx+4] +
push 1  +
push ebx  +
call sub_10297ED  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_1021122  +
or eax 0FFFFFFFFh +
jmp loc_10211B2  +
lea edx [edi+esi+4] +
mov edi dword_103785C +
lea eax [esi+ebx] +
mov dword_1037898 esi +
mov dword_1039470 eax +
mov dword_1037894 esi +
mov [ebp+var_4] edx +
jmp loc_102118A  +
mov eax edi +
lea ebx [eax+1] +
mov [ebp+var_8] ebx +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_102114D  +
sub eax [ebp+var_8] +
lea ebx [eax+1] +
cmp cl 3Dh +
jz loc_1021188  +
push edi  +
push ebx  +
push edx  +
mov [esi] edx +
call sub_102277A  +
add esp 0Ch +
test eax eax +
jz loc_102117F  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_10222A7  +
add esp 14h +
add [ebp+var_4] ebx +
mov edx [ebp+var_4] +
add esi 4 +
add edi ebx +
mov cl [edi] +
test cl cl +
jnz loc_1021145  +
push dword_103785C  +
call sub_101F40A  +
and dword_103785C 0 +
and dword ptr [esi] 0 +
pop ecx  +
mov dword_1039460 1 +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10211D6  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [esi] +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
and dword ptr [esi] 0 +
mov [ebp+var_4] eax +
xor eax eax +
push ebx  +
inc eax  +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_8] edx +
mov [ecx] eax +
jz loc_102121F  +
cmp edx eax +
jl loc_102121F  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
add [ebp+arg_4] 4 +
mov [edx] eax +
and [ebp+arg_0] 0 +
cmp byte ptr [edi] 22h +
jnz loc_1021238  +
xor eax eax +
cmp [ebp+arg_0] eax +
mov bl 22h +
setz al  +
inc edi  +
mov [ebp+arg_0] eax +
jmp loc_1021283  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_1021251  +
cmp eax [ebp+var_4] +
jg loc_1021251  +
mov ecx [ebp+arg_8] +
mov al [edi] +
inc [ebp+arg_8]  +
mov [ecx] al +
mov bl [edi] +
movzx eax bl +
push eax  +
inc edi  +
call sub_102A88E  +
pop ecx  +
test eax eax +
jz loc_102127C  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_102127B  +
cmp eax [ebp+var_4] +
jg loc_102127B  +
mov ecx [ebp+arg_8] +
mov al [edi] +
inc [ebp+arg_8]  +
mov [ecx] al +
inc edi  +
mov ecx [ebp+arg_C] +
test bl bl +
jz loc_10212B6  +
cmp [ebp+arg_0] 0 +
jnz loc_1021223  +
cmp bl 20h +
jz loc_1021293  +
cmp bl 9 +
jnz loc_1021223  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_102129E  +
mov byte ptr [eax-1] 0 +
xor ebx ebx +
cmp byte ptr [edi] 0 +
jz loc_10213B3  +
mov al [edi] +
cmp al 20h +
jz loc_10212B3  +
cmp al 9 +
jnz loc_10212B9  +
inc edi  +
jmp loc_10212A9  +
dec edi  +
jmp loc_102129E  +
cmp byte ptr [edi] 0 +
jz loc_10213B3  +
inc dword ptr [ecx]  +
cmp [ebp+arg_4] 0 +
mov eax [ecx] +
jz loc_10212DD  +
cmp eax [ebp+var_8] +
jg loc_10212DD  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
add [ebp+arg_4] 4 +
mov [edx] eax +
mov [ebp+arg_0] 1 +
xor edx edx +
jmp loc_10212EA  +
inc edi  +
inc edx  +
cmp byte ptr [edi] 5Ch +
jz loc_10212E8  +
cmp byte ptr [edi] 22h +
jnz loc_1021333  +
test dl 1 +
jnz loc_1021316  +
test ebx ebx +
jz loc_1021309  +
lea eax [edi+1] +
cmp byte ptr [eax] 22h +
jnz loc_1021309  +
mov edi eax +
jmp loc_102130D  +
and [ebp+arg_0] 0 +
xor eax eax +
test ebx ebx +
setz al  +
mov ebx eax +
shr edx 1 +
jmp loc_1021333  +
dec edx  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_1021333  +
cmp eax [ebp+var_4] +
jg loc_1021333  +
mov eax [ebp+arg_8] +
inc [ebp+arg_8]  +
mov byte ptr [eax] 5Ch +
test edx edx +
jnz loc_102131A  +
mov al [edi] +
test al al +
jz loc_102138E  +
test ebx ebx +
jnz loc_1021349  +
cmp al 20h +
jz loc_102138E  +
cmp al 9 +
jz loc_102138E  +
cmp [ebp+arg_0] 0 +
jz loc_1021388  +
inc dword ptr [esi]  +
movsx eax byte ptr [edi] +
push eax  +
call sub_102A88E  +
cmp [ebp+arg_8] 0 +
pop ecx  +
jz loc_102137E  +
test eax eax +
jz loc_1021372  +
mov al [edi] +
mov ecx [ebp+arg_8] +
inc [ebp+arg_8]  +
mov [ecx] al +
inc edi  +
inc dword ptr [esi]  +
mov ecx [ebp+arg_8] +
mov al [edi] +
inc [ebp+arg_8]  +
mov [ecx] al +
jmp loc_1021385  +
test eax eax +
jz loc_1021385  +
inc edi  +
inc dword ptr [esi]  +
mov ecx [ebp+arg_C] +
inc edi  +
jmp loc_10212DD  +
inc dword ptr [esi]  +
cmp [ebp+arg_8] 0 +
mov eax [esi] +
jz loc_10212A0  +
cmp eax [ebp+var_4] +
jg loc_10212A0  +
mov eax [ebp+arg_8] +
inc [ebp+arg_8]  +
mov byte ptr [eax] 0 +
jmp loc_10212A0  +
inc dword ptr [ecx]  +
mov eax [ecx] +
mov ecx [ebp+arg_4] +
pop edi  +
pop ebx  +
test ecx ecx +
jz locret_10213C8  +
cmp eax [ebp+var_8] +
jg locret_10213C8  +
and dword ptr [ecx] 0 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
cmp dword_103946C ebx +
jnz loc_10213EF  +
call sub_1028186  +
push 104h  +
mov esi offset byte_1037BD0 +
push esi  +
push ebx  +
mov byte_1037CD4 bl +
call ds:GetModuleFileNameA  +
mov eax dword_1039478 +
mov dword_10378A4 esi +
cmp eax ebx +
jz loc_102141D  +
mov [ebp+var_8] eax +
cmp [eax] bl +
jnz loc_1021420  +
mov [ebp+var_8] esi +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push ebx  +
push [ebp+var_8]  +
lea esi [ebp+var_C] +
call sub_10211E8  +
mov esi [ebp+var_4] +
lea eax [ebp+var_14] +
push eax  +
push 4  +
pop ecx  +
mov eax esi +
mul  ecx +
push edx  +
push eax  +
call sub_1022D20  +
add esp 1Ch +
test eax eax +
jl loc_10214B6  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_C] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1022D20  +
add esp 0Ch +
test eax eax +
jl loc_10214B6  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call sub_10211BC  +
add esp 0Ch +
test eax eax +
jl loc_10214B6  +
push [ebp+var_14]  +
call sub_1020842  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_10214B6  +
lea eax [ebp+var_4] +
push eax  +
lea eax [edi+esi*4] +
push eax  +
push edi  +
push [ebp+var_8]  +
lea esi [ebp+var_C] +
call sub_10211E8  +
mov eax [ebp+var_4] +
add esp 10h +
dec eax  +
mov dword_1037888 eax +
mov dword_103788C edi +
xor eax eax +
jmp loc_10214B9  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1037CD8 +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:GetEnvironmentStringsW +
push edi  +
xor ebx ebx +
xor edi edi +
cmp eax ebx +
jnz loc_102150F  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_10214F5  +
mov dword_1037CD8 1 +
jmp loc_1021518  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102150A  +
push 2  +
pop eax  +
mov dword_1037CD8 eax +
jmp loc_102150F  +
mov eax dword_1037CD8 +
cmp eax 1 +
jnz loc_1021599  +
cmp edi ebx +
jnz loc_102152B  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_102152B  +
xor eax eax +
jmp loc_10215F5  +
mov eax edi +
cmp [edi] bx +
jz loc_1021540  +
inc eax  +
inc eax  +
cmp [eax] bx +
jnz loc_1021532  +
inc eax  +
inc eax  +
cmp [eax] bx +
jnz loc_1021532  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
sub eax edi +
push ebx  +
sar eax 1 +
inc eax  +
push eax  +
push edi  +
push ebx  +
push ebx  +
mov [ebp+cchWideChar] eax +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax ebx +
jz loc_102158E  +
push eax  +
call sub_1020842  +
pop ecx  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_102158E  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push eax  +
push [ebp+cchWideChar]  +
push edi  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jnz loc_102158B  +
push [ebp+var_4]  +
call sub_101F40A  +
pop ecx  +
mov [ebp+var_4] ebx +
mov ebx [ebp+var_4] +
push edi  +
call ds:FreeEnvironmentStringsW  +
mov eax ebx +
jmp loc_10215F5  +
cmp eax 2 +
jz loc_10215A2  +
cmp eax ebx +
jnz loc_1021524  +
call ds:GetEnvironmentStrings  +
mov esi eax +
cmp esi ebx +
jz loc_1021524  +
cmp [esi] bl +
jz loc_10215C0  +
inc eax  +
cmp [eax] bl +
jnz loc_10215B6  +
inc eax  +
cmp [eax] bl +
jnz loc_10215B6  +
sub eax esi +
inc eax  +
push eax  +
mov [ebp+cchMultiByte] eax +
call sub_1020842  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jnz loc_10215DF  +
push esi  +
call ds:FreeEnvironmentStringsA  +
jmp loc_1021524  +
push [ebp+cchMultiByte]  +
push esi  +
push edi  +
call loc_101F0A0  +
add esp 0Ch +
push esi  +
call ds:FreeEnvironmentStringsA  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1024E74  +
xor esi esi +
mov [ebp-4] esi +
lea eax [ebp-64h] +
push eax  +
call ds:GetStartupInfoA  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push 24h  +
push 20h  +
pop edi  +
push edi  +
call sub_10297ED  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_1021830  +
mov dword_1039360 eax +
mov uNumber edi +
lea ecx [eax+480h] +
jmp loc_102166E  +
mov byte ptr [eax+4] 0 +
or dword ptr [eax] 0FFFFFFFFh +
mov byte ptr [eax+5] 0Ah +
mov [eax+8] esi +
mov byte ptr [eax+6] 0Ah +
mov byte ptr [eax+7] 0Ah +
add eax 24h +
mov ecx dword_1039360 +
add ecx 480h +
cmp eax ecx +
jb loc_1021649  +
cmp [ebp-32h] si +
jz loc_1021776  +
mov eax [ebp-30h] +
cmp eax esi +
jz loc_1021776  +
mov edi [eax] +
lea ebx [eax+4] +
lea eax [ebx+edi] +
mov [ebp-1Ch] eax +
mov eax 800h +
cmp edi eax +
jl loc_102169D  +
mov edi eax +
xor esi esi +
inc esi  +
jmp loc_10216F0  +
push 24h  +
push 20h  +
call sub_10297ED  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10216FA  +
lea ecx dword_1039360[esi*4] +
mov [ecx] eax +
add uNumber 20h +
lea edx [eax+480h] +
jmp loc_10216EB  +
mov byte ptr [eax+4] 0 +
or dword ptr [eax] 0FFFFFFFFh +
mov byte ptr [eax+5] 0Ah +
and dword ptr [eax+8] 0 +
mov byte ptr [eax+6] 0Ah +
mov byte ptr [eax+7] 0Ah +
add eax 24h +
mov edx [ecx] +
add edx 480h +
cmp eax edx +
jb loc_10216C9  +
inc esi  +
cmp uNumber edi +
jl loc_10216A2  +
jmp loc_1021700  +
mov edi uNumber +
and dword ptr [ebp-20h] 0 +
test edi edi +
jle loc_1021776  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
cmp ecx 0FFFFFFFFh +
jz loc_1021769  +
cmp ecx 0FFFFFFFEh +
jz loc_1021769  +
mov al [ebx] +
test al 1 +
jz loc_1021769  +
test al 8 +
jnz loc_102172C  +
push ecx  +
call ds:GetFileType  +
test eax eax +
jz loc_1021769  +
mov esi [ebp-20h] +
mov eax esi +
sar eax 5 +
and esi 1Fh +
imul esi esi +
add esi dword_1039360[eax*4] +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [esi] eax +
mov al [ebx] +
mov [esi+4] al +
push 0FA0h  +
lea eax [esi+0Ch] +
push eax  +
call sub_102A4D4  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1021830  +
or dword ptr [esi+8] 4 +
inc dword ptr [ebp-20h]  +
inc ebx  +
add dword ptr [ebp-1Ch] 4 +
cmp [ebp-20h] edi +
jl loc_1021708  +
xor ebx ebx +
mov esi ebx +
imul esi esi +
add esi dword_1039360 +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_1021795  +
cmp eax 0FFFFFFFEh +
jz loc_1021795  +
or byte ptr [esi+4] 80h +
jmp loc_1021808  +
mov byte ptr [esi+4] 81h +
test ebx ebx +
jnz loc_10217A2  +
push 0FFFFFFF6h  +
pop eax  +
jmp loc_10217AC  +
mov eax ebx +
dec eax  +
neg eax  +
sbb eax eax +
add eax 0FFFFFFF5h +
push eax  +
call ds:GetStdHandle  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10217FE  +
test edi edi +
jz loc_10217FE  +
push edi  +
call ds:GetFileType  +
test eax eax +
jz loc_10217FE  +
mov [esi] edi +
and eax 0FFh +
cmp eax 2 +
jnz loc_10217DB  +
or byte ptr [esi+4] 40h +
jmp loc_10217E4  +
cmp eax 3 +
jnz loc_10217E4  +
or byte ptr [esi+4] 8 +
push 0FA0h  +
lea eax [esi+0Ch] +
push eax  +
call sub_102A4D4  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1021830  +
or dword ptr [esi+8] 4 +
jmp loc_1021808  +
or byte ptr [esi+4] 40h +
mov dword ptr [esi] 0FFFFFFFEh +
inc ebx  +
cmp ebx 3 +
jl loc_1021778  +
push uNumber  +
call ds:SetHandleCount  +
xor eax eax +
jmp loc_1021833  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
or eax 0FFFFFFFFh +
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
mov esi ds:TlsGetValue +
call esi  +
test eax eax +
jz loc_1021877  +
mov eax dword_1036290 +
cmp eax 0FFFFFFFFh +
jz loc_1021877  +
push eax  +
push dwTlsIndex  +
call esi  +
call eax  +
test eax eax +
jz loc_1021877  +
mov eax [eax+1F8h] +
jmp loc_102189F  +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_dll  +
call esi  +
test eax eax +
jnz loc_1021893  +
push offset aKernel32_dll_0  +
call esi  +
test eax eax +
jz loc_10218AB  +
push offset aEncodepointer  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10218AB  +
push [ebp+arg_0]  +
call eax  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn   +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
mov esi ds:TlsGetValue +
call esi  +
test eax eax +
jz loc_10218FD  +
mov eax dword_1036290 +
cmp eax 0FFFFFFFFh +
jz loc_10218FD  +
push eax  +
push dwTlsIndex  +
call esi  +
call eax  +
test eax eax +
jz loc_10218FD  +
mov eax [eax+1FCh] +
jmp loc_1021925  +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_dll  +
call esi  +
test eax eax +
jnz loc_1021919  +
push offset aKernel32_dll_0  +
call esi  +
test eax eax +
jz loc_1021931  +
push offset aDecodepointer  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1021931  +
push [ebp+arg_0]  +
call eax  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn   +
***
call ds:TlsAlloc  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dwTlsIndex  +
call ds:TlsGetValue  +
call eax  +
pop ebp  +
retn 4  +
***
retn   +
***
test eax eax +
jnz locret_102199D  +
push lpTlsValue  +
call sub_10218C4  +
pop ecx  +
push eax  +
push dwTlsIndex  +
call ds:TlsSetValue  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword_1037CE4  +
call sub_10218C4  +
pop ecx  +
call eax  +
pop ebp  +
retn 8  +
***
mov eax dword_1036290 +
cmp eax 0FFFFFFFFh +
jz loc_10219E5  +
push eax  +
push dword_1037CE8  +
call sub_10218C4  +
pop ecx  +
call eax  +
or dword_1036290 0FFFFFFFFh +
mov eax dwTlsIndex +
cmp eax 0FFFFFFFFh +
jz loc_10219FD  +
push eax  +
call ds:TlsFree  +
or dwTlsIndex 0FFFFFFFFh +
jmp loc_10241C5  +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
call ds:GetLastError  +
mov edi eax +
call sub_1021974  +
push dword_1036290  +
push dwTlsIndex  +
call ds:TlsGetValue  +
call eax  +
mov esi eax +
test esi esi +
jnz loc_1021B44  +
push 214h  +
push 1  +
call sub_102A8AB  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1021B44  +
push esi  +
push dword_1036290  +
push dword_1037CE4  +
call sub_10218C4  +
pop ecx  +
call eax  +
test eax eax +
jz loc_1021B3B  +
push 0  +
push esi  +
call sub_1021A07  +
or dword ptr [esi+4] 0FFFFFFFFh +
pop ecx  +
jmp loc_1021B43  +
push esi  +
call sub_101F40A  +
xor esi esi +
pop ecx  +
push edi  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
call sub_1021AD4  +
mov esi eax +
test esi esi +
jnz loc_1021B6B  +
push 10h  +
call sub_10209D5  +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1024E74  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1036290 0FFFFFFFFh +
jz loc_1021D1D  +
cmp [ebp+arg_0] 0 +
jnz loc_1021CFF  +
push esi  +
push dwTlsIndex  +
mov esi ds:TlsGetValue +
call esi  +
test eax eax +
jz loc_1021CFE  +
push dword_1036290  +
push dwTlsIndex  +
call esi  +
call eax  +
mov [ebp+arg_0] eax +
pop esi  +
push 0  +
push dword_1036290  +
push dword_1037CE4  +
call sub_10218C4  +
pop ecx  +
call eax  +
push [ebp+arg_0]  +
call sub_1021B74  +
mov eax dwTlsIndex +
cmp eax 0FFFFFFFFh +
jz loc_1021D30  +
push 0  +
push eax  +
call ds:TlsSetValue  +
pop ebp  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push offset aKernel32_dll_0  +
call ds:GetModuleHandleW  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1021D89  +
mov esi ds:GetProcAddress +
push offset aFlsalloc  +
push edi  +
call esi  +
push offset aFlsgetvalue  +
push edi  +
mov dword_1037CDC eax +
call esi  +
push offset aFlssetvalue  +
push edi  +
mov lpTlsValue eax +
call esi  +
push offset aFlsfree  +
push edi  +
mov dword_1037CE4 eax +
call esi  +
mov dword_1037CE8 eax +
mov esi ds:TlsSetValue +
cmp dword_1037CDC ebx +
jz loc_1021DAF  +
cmp lpTlsValue ebx +
jz loc_1021DAF  +
cmp dword_1037CE4 ebx +
jz loc_1021DAF  +
cmp dword_1037CE8 ebx +
jnz loc_1021DD3  +
mov eax ds:TlsGetValue +
mov lpTlsValue eax +
mov eax ds:TlsFree +
mov dword_1037CDC offset loc_102193C +
mov dword_1037CE4 esi +
mov dword_1037CE8 eax +
call ds:TlsAlloc  +
mov dwTlsIndex eax +
cmp eax 0FFFFFFFFh +
jz loc_1021E46  +
push lpTlsValue  +
push eax  +
call esi  +
test eax eax +
jz loc_1021E46  +
call sub_1020CD3  +
push dword_1037CDC  +
call sub_102183E  +
push lpTlsValue  +
mov dword_1037CDC eax +
call sub_102183E  +
push dword_1037CE4  +
mov lpTlsValue eax +
call sub_102183E  +
push dword_1037CE8  +
mov dword_1037CE4 eax +
call sub_102183E  +
add esp 10h +
mov dword_1037CE8 eax +
call sub_102416F  +
test eax eax +
jnz loc_1021E4C  +
call sub_10219C5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
push offset sub_1021B74  +
push dword_1037CDC  +
call sub_10218C4  +
pop ecx  +
call eax  +
mov dword_1036290 eax +
cmp eax 0FFFFFFFFh +
jz loc_1021E41  +
push 214h  +
push 1  +
call sub_102A8AB  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_1021E41  +
push esi  +
push dword_1036290  +
push dword_1037CE4  +
call sub_10218C4  +
pop ecx  +
call eax  +
test eax eax +
jnz loc_1021E9F  +
push esi  +
call sub_101F40A  +
pop ecx  +
jmp loc_1021E41  +
push ebx  +
push esi  +
call sub_1021A07  +
or dword ptr [esi+4] 0FFFFFFFFh +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1021E48  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
xor esi esi +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call sub_1020A8E  +
pop ecx  +
test eax eax +
jz loc_1021EE1  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10222A7  +
add esp 14h +
lea eax [ebp+var_8] +
push eax  +
call sub_1020ACF  +
pop ecx  +
test eax eax +
jz loc_1021EFC  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10222A7  +
add esp 14h +
cmp [ebp+var_4] 2 +
pop esi  +
jnz loc_1021F0E  +
cmp [ebp+var_8] 5 +
jb loc_1021F0E  +
xor eax eax +
inc eax  +
leave   +
retn   +
push 3  +
pop eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
push 0  +
setz al  +
push 1000h  +
push eax  +
call ds:HeapCreate  +
mov hHeap eax +
test eax eax +
jnz loc_1021F40  +
xor eax eax +
pop ebp  +
retn   +
call sub_1021EB6  +
mov dword_1039340 eax +
cmp eax 3 +
jnz loc_1021F73  +
push 3F8h  +
call sub_102433D  +
pop ecx  +
test eax eax +
jnz loc_1021F73  +
push hHeap  +
call ds:HeapDestroy  +
and hHeap 0 +
jmp loc_1021F3C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
call sub_1024E74  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1021FD6  +
cmp ecx 0FFFFFFFFh +
jz loc_1021FD6  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1021FCF  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1021FCF  +
cmp edx 10000000h +
jnb loc_1021FCF  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jz loc_1021FCF  +
jmp loc_1021FCA  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1024EB9  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1022018  +
push eax  +
call sub_1021F7D  +
test eax eax +
jz loc_1022018  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_102200D  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1022018  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_101F9B2  +
jmp sub_1024EB9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebx+8] +
xor esi dword_1036118 +
push edi  +
mov eax [esi] +
mov byte ptr [ebp-1] 0 +
mov dword ptr [ebp-0Ch] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_10220B9  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_101F9B2  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
add ecx edi +
xor ecx [eax+edi] +
call sub_101F9B2  +
mov eax [ebp+8] +
test byte ptr [eax+4] 66h +
jnz loc_10221EC  +
mov ecx [ebp+10h] +
lea edx [ebp-18h] +
mov [ebx-4] edx +
mov ebx [ebx+0Ch] +
mov [ebp-18h] eax +
mov [ebp-14h] ecx +
cmp ebx 0FFFFFFFEh +
jz loc_102214C  +
lea ecx [ecx+0] +
lea eax [ebx+ebx*2] +
mov ecx [esi+eax*4+14h] +
lea eax [esi+eax*4+10h] +
mov [ebp-10h] eax +
mov eax [eax] +
mov [ebp-8] eax +
test ecx ecx +
jz loc_102211B  +
mov edx edi +
call sub_102A206  +
mov byte ptr [ebp-1] 1 +
test eax eax +
jl loc_1022156  +
jg loc_102215F  +
mov eax [ebp-8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_10220F0  +
cmp byte ptr [ebp-1] 0 +
jz loc_102214C  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_102213C  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_101F9B2  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call sub_101F9B2  +
mov eax [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov dword ptr [ebp-0Ch] 0 +
jmp loc_1022128  +
***
mov ecx [ebp+8] +
cmp dword ptr [ecx] 0E06D7363h +
jnz loc_1022193  +
cmp ds:off_1008B64 0 +
jz loc_1022193  +
push offset off_1008B64  +
call sub_1029659  +
add esp 4 +
test eax eax +
jz loc_1022193  +
mov edx [ebp+8] +
push 1  +
push edx  +
call ds:off_1008B64  +
add esp 8 +
mov ecx [ebp+0Ch] +
call sub_102A236  +
mov eax [ebp+0Ch] +
cmp [eax+0Ch] ebx +
jz loc_10221B5  +
push offset dword_1036118  +
push edi  +
mov edx ebx +
mov ecx eax +
call sub_102A250  +
mov eax [ebp+0Ch] +
mov ecx [ebp-8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_10221CF  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call sub_101F9B2  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call sub_101F9B2  +
mov eax [ebp-10h] +
mov ecx [eax+8] +
mov edx edi +
call sub_102A21D  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_102214C  +
push offset dword_1036118  +
push edi  +
mov ecx ebx +
call sub_102A250  +
jmp loc_1022128  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1036118 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1022243  +
test eax ebx +
jz loc_1022243  +
not eax  +
mov dword_103611C eax +
jmp loc_102229E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_102228A  +
test dword_1036118 ebx +
jnz loc_102228F  +
mov esi 0BB40E64Fh +
mov dword_1036118 esi +
not esi  +
mov dword_103611C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10222A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax dword_1036298[ecx*8] +
jz loc_1022388  +
inc ecx  +
cmp ecx 2Dh +
jb loc_102236C  +
lea ecx [eax-13h] +
cmp ecx 11h +
ja loc_1022391  +
push 0Dh  +
pop eax  +
pop ebp  +
retn   +
mov eax dword_103629C[ecx*8] +
pop ebp  +
retn   +
add eax 0FFFFFF44h +
push 0Eh  +
pop ecx  +
cmp ecx eax +
sbb eax eax +
and eax ecx +
add eax 8 +
pop ebp  +
retn   +
***
call sub_1021AD4  +
test eax eax +
jnz loc_10223B8  +
mov eax offset unk_1036400 +
retn   +
add eax 8 +
retn   +
***
call sub_1021AD4  +
test eax eax +
jnz loc_10223D0  +
mov eax offset unk_1036404 +
retn   +
add eax 0Ch +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call sub_10223C1  +
mov ecx [ebp+arg_0] +
push ecx  +
mov [eax] ecx +
call sub_1022362  +
pop ecx  +
mov esi eax +
call sub_10223A9  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
mov esi [ebp+0Ch] +
mov ecx [ebp+10h] +
mov edi [ebp+8] +
mov eax ecx +
mov edx ecx +
add eax esi +
cmp edi esi +
jbe loc_1022430  +
cmp edi eax +
jb loc_10225D4  +
cmp ecx 100h +
jb loc_1022457  +
cmp dword_103933C 0 +
jz loc_1022457  +
push edi  +
push esi  +
and edi 0Fh +
and esi 0Fh +
cmp edi esi +
pop esi  +
pop edi  +
jnz loc_1022457  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_1024F5E  +
***
test edi 3 +
jnz loc_1022474  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_1022494  +
movs   +
jmp ds:off_1022584[edx*4]  +
mov eax edi +
mov edx 3 +
sub ecx 4 +
jb loc_102248C  +
and eax 3 +
add ecx eax +
jmp dword ptr ds:(loc_1022494+4)[eax*4]  +
***
jmp ds:dword_1022594[ecx*4]  +
***
jmp ds:off_1022518[ecx*4]  +
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
add esi 3 +
add edi 3 +
cmp ecx 8 +
jb loc_1022494  +
movs   +
jmp ds:off_1022584[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
add esi 2 +
add edi 2 +
cmp ecx 8 +
jb loc_1022494  +
movs   +
jmp ds:off_1022584[edx*4]  +
***
and edx ecx +
mov al [esi] +
mov [edi] al +
add esi 1 +
shr ecx 2 +
add edi 1 +
cmp ecx 8 +
jb loc_1022494  +
movs   +
jmp ds:off_1022584[edx*4]  +
***
mov eax [esi+ecx*4-1Ch] +
mov [edi+ecx*4-1Ch] eax +
mov eax [esi+ecx*4-18h] +
mov [edi+ecx*4-18h] eax +
mov eax [esi+ecx*4-14h] +
mov [edi+ecx*4-14h] eax +
mov eax [esi+ecx*4-10h] +
mov [edi+ecx*4-10h] eax +
mov eax [esi+ecx*4-0Ch] +
mov [edi+ecx*4-0Ch] eax +
mov eax [esi+ecx*4-8] +
mov [edi+ecx*4-8] eax +
mov eax [esi+ecx*4-4] +
mov [edi+ecx*4-4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1022584[edx*4]  +
***
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi] +
mov [edi] al +
mov al [esi+1] +
mov [edi+1] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
lea esi [ecx+esi-4] +
lea edi [ecx+edi-4] +
test edi 3 +
jnz loc_1022608  +
shr ecx 2 +
and edx 3 +
cmp ecx 8 +
jb loc_10225FC  +
std   +
movs   +
cld   +
jmp ds:off_1022720[edx*4]  +
neg ecx  +
jmp ds:off_10226D0[ecx*4]  +
mov eax edi +
mov edx 3 +
cmp ecx 4 +
jb loc_1022620  +
and eax 3 +
sub ecx eax +
jmp dword ptr ds:(loc_1022620+4)[eax*4]  +
***
jmp ds:off_1022720[ecx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
sub esi 1 +
shr ecx 2 +
sub edi 1 +
cmp ecx 8 +
jb loc_10225FC  +
std   +
movs   +
cld   +
jmp ds:off_1022720[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
shr ecx 2 +
mov [edi+2] al +
sub esi 2 +
sub edi 2 +
cmp ecx 8 +
jb loc_10225FC  +
std   +
movs   +
cld   +
jmp ds:off_1022720[edx*4]  +
mov al [esi+3] +
and edx ecx +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
shr ecx 2 +
mov [edi+1] al +
sub esi 3 +
sub edi 3 +
cmp ecx 8 +
jb loc_10225FC  +
std   +
movs   +
cld   +
jmp ds:off_1022720[edx*4]  +
mov eax [esi+ecx*4+1Ch] +
mov [edi+ecx*4+1Ch] eax +
mov eax [esi+ecx*4+18h] +
mov [edi+ecx*4+18h] eax +
mov eax [esi+ecx*4+14h] +
mov [edi+ecx*4+14h] eax +
mov eax [esi+ecx*4+10h] +
mov [edi+ecx*4+10h] eax +
mov eax [esi+ecx*4+0Ch] +
mov [edi+ecx*4+0Ch] eax +
mov eax [esi+ecx*4+8] +
mov [edi+ecx*4+8] eax +
mov eax [esi+ecx*4+4] +
mov [edi+ecx*4+4] eax +
lea eax ds:0[ecx*4] +
add esi eax +
add edi eax +
jmp ds:off_1022720[edx*4]  +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov al [esi+3] +
mov [edi+3] al +
mov al [esi+2] +
mov [edi+2] al +
mov al [esi+1] +
mov [edi+1] al +
mov eax [ebp+8] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_1022792  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_10227AD  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_10227DD  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_10227B8  +
mov [ecx] bl +
jmp loc_1022792  +
mov edx ecx +
mov al [esi] +
mov [edx] al +
inc edx  +
inc esi  +
cmp al bl +
jz loc_10227C7  +
dec edi  +
jnz loc_10227BA  +
cmp edi ebx +
jnz loc_10227DB  +
mov [ecx] bl +
call sub_10223A9  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102279C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push edi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_18] +
call sub_101FCB3  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_4] +
xor ebx ebx +
cmp eax ebx +
jz loc_102280A  +
mov [eax] edi +
cmp edi ebx +
jnz loc_1022839  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_C] bl +
jz loc_1022832  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_10229EC  +
cmp [ebp+arg_C] ebx +
jz loc_102284A  +
cmp [ebp+arg_C] 2 +
jl loc_102280E  +
cmp [ebp+arg_C] 24h +
jg loc_102280E  +
push esi  +
movzx esi word ptr [edi] +
mov [ebp+var_4] ebx +
add edi 2 +
jmp loc_102285B  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
lea eax [ebp+var_18] +
push eax  +
push 8  +
push esi  +
call sub_10284EC  +
add esp 0Ch +
test eax eax +
jnz loc_1022856  +
cmp si 2Dh +
jnz loc_102287A  +
or [ebp+arg_10] 2 +
jmp loc_1022880  +
cmp si 2Bh +
jnz loc_1022885  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
cmp [ebp+arg_C] ebx +
jnz loc_10228BD  +
push esi  +
call sub_102A8FC  +
pop ecx  +
test eax eax +
jz loc_102289E  +
mov [ebp+arg_C] 0Ah +
jmp loc_10228E4  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_10228B6  +
cmp ax 58h +
jz loc_10228B6  +
mov [ebp+arg_C] 8 +
jmp loc_10228E4  +
mov [ebp+arg_C] 10h +
cmp [ebp+arg_C] 10h +
jnz loc_10228E4  +
push esi  +
call sub_102A8FC  +
pop ecx  +
test eax eax +
jnz loc_10228E4  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_10228DD  +
cmp ax 58h +
jnz loc_10228E4  +
inc edi  +
inc edi  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
or eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+arg_C] +
mov [ebp+var_8] edx +
mov ebx eax +
push esi  +
call sub_102A8FC  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1022926  +
push 41h  +
pop eax  +
cmp ax si +
ja loc_102290B  +
cmp si 5Ah +
jbe loc_1022914  +
lea eax [esi-61h] +
cmp ax 19h +
ja loc_102294B  +
lea eax [esi-61h] +
cmp ax 19h +
movzx eax si +
ja loc_1022923  +
sub eax 20h +
add eax 0FFFFFFC9h +
cmp eax [ebp+arg_C] +
jnb loc_102294B  +
or [ebp+arg_10] 8 +
cmp [ebp+arg_14] 0 +
jnz loc_1022963  +
cmp [ebp+var_4] ebx +
jb loc_1022963  +
jnz loc_1022941  +
cmp eax [ebp+var_8] +
jbe loc_1022963  +
or [ebp+arg_10] 4 +
cmp [ebp+arg_8] 0 +
jnz loc_102296F  +
mov eax [ebp+arg_10] +
dec edi  +
dec edi  +
test al 8 +
jnz loc_1022979  +
cmp [ebp+arg_8] 0 +
jz loc_102295D  +
mov edi [ebp+arg_4] +
and [ebp+var_4] 0 +
jmp loc_10229C9  +
mov ecx [ebp+var_4] +
imul ecx [ebp+arg_C] +
add ecx eax +
mov [ebp+var_4] ecx +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
jmp loc_10228F1  +
mov esi 7FFFFFFFh +
test al 4 +
jnz loc_102299D  +
test al 1 +
jnz loc_10229C9  +
and eax 2 +
jz loc_1022994  +
cmp [ebp+var_4] 80000000h +
ja loc_102299D  +
test eax eax +
jnz loc_10229C9  +
cmp [ebp+var_4] esi +
jbe loc_10229C9  +
cmp [ebp+arg_14] 0 +
jnz loc_10229C9  +
call sub_10223A9  +
test byte ptr [ebp+arg_10] 1 +
mov dword ptr [eax] 22h +
jz loc_10229BA  +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_10229C9  +
test byte ptr [ebp+arg_10] 2 +
push 0  +
pop eax  +
setnz al  +
add eax esi +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
pop esi  +
test eax eax +
jz loc_10229D3  +
mov [eax] edi +
test byte ptr [ebp+arg_10] 2 +
jz loc_10229DC  +
neg [ebp+var_4]  +
cmp [ebp+var_C] 0 +
jz loc_10229E9  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
cmp dword_1038188 eax +
jnz loc_1022A18  +
push offset off_1036B68  +
jmp loc_1022A19  +
push eax  +
call sub_10227E7  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_30] +
call sub_101FCB3  +
mov eax [ebp+arg_8] +
mov ebx [ebp+arg_4] +
xor esi esi +
cmp eax esi +
jz loc_1022A4B  +
mov [eax] ebx +
cmp ebx esi +
jnz loc_1022A7D  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_24] 0 +
jz loc_1022A74  +
mov eax [ebp+var_28] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
xor edx edx +
jmp loc_1022CE7  +
cmp [ebp+arg_C] esi +
jz loc_1022A8E  +
cmp [ebp+arg_C] 2 +
jl loc_1022A4F  +
cmp [ebp+arg_C] 24h +
jg loc_1022A4F  +
push edi  +
lea eax [ebp+var_30] +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
movzx esi word ptr [ebx] +
push eax  +
push 8  +
lea edi [ebx+2] +
push esi  +
jmp loc_1022AB8  +
movzx eax word ptr [edi] +
inc edi  +
inc edi  +
cmp ax si +
jz loc_1022AA4  +
lea ecx [ebp+var_30] +
push ecx  +
push 8  +
movzx esi ax +
push eax  +
call sub_10284EC  +
add esp 0Ch +
test eax eax +
jnz loc_1022AA4  +
cmp si 2Dh +
jnz loc_1022AD0  +
or [ebp+arg_10] 2 +
jmp loc_1022AD6  +
cmp si 2Bh +
jnz loc_1022ADB  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
mov eax [ebp+arg_C] +
test eax eax +
jl loc_1022CCC  +
cmp eax 1 +
jz loc_1022CCC  +
cmp eax 24h +
jg loc_1022CCC  +
push 10h  +
pop ebx  +
test eax eax +
jnz loc_1022B2E  +
push esi  +
call sub_102A8FC  +
pop ecx  +
test eax eax +
jz loc_1022B13  +
mov [ebp+arg_C] 0Ah +
jmp loc_1022B54  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_1022B2B  +
cmp ax 58h +
jz loc_1022B2B  +
mov [ebp+arg_C] 8 +
jmp loc_1022B54  +
mov [ebp+arg_C] ebx +
cmp [ebp+arg_C] ebx +
jnz loc_1022B54  +
push esi  +
call sub_102A8FC  +
pop ecx  +
test eax eax +
jnz loc_1022B54  +
movzx eax word ptr [edi] +
cmp ax 78h +
jz loc_1022B4D  +
cmp ax 58h +
jnz loc_1022B54  +
inc edi  +
inc edi  +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
mov eax [ebp+arg_C] +
cdq   +
push edx  +
push eax  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov [ebp+var_20] eax +
mov [ebp+var_1C] edx +
call sub_102AB20  +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
push esi  +
call sub_102A8FC  +
mov ebx eax +
pop ecx  +
cmp ebx 0FFFFFFFFh +
jnz loc_1022BAC  +
push 41h  +
pop eax  +
cmp ax si +
ja loc_1022B91  +
cmp si 5Ah +
jbe loc_1022B9A  +
lea eax [esi-61h] +
cmp ax 19h +
ja loc_1022BEC  +
lea eax [esi-61h] +
cmp ax 19h +
movzx eax si +
ja loc_1022BA9  +
sub eax 20h +
lea ebx [eax-37h] +
cmp ebx [ebp+arg_C] +
jnb loc_1022BEC  +
mov ecx [ebp+var_4] +
or [ebp+arg_10] 8 +
cmp ecx [ebp+var_C] +
jb loc_1022C0A  +
ja loc_1022BC7  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_10] +
jb loc_1022C0A  +
mov eax [ebp+var_10] +
cmp [ebp+var_8] eax +
jnz loc_1022BE2  +
cmp ecx [ebp+var_C] +
jnz loc_1022BE2  +
xor eax eax +
cmp eax [ebp+var_14] +
jb loc_1022C0A  +
ja loc_1022BE2  +
cmp ebx [ebp+var_18] +
jbe loc_1022C0A  +
or [ebp+arg_10] 4 +
cmp [ebp+arg_8] 0 +
jnz loc_1022C25  +
mov eax [ebp+arg_10] +
dec edi  +
dec edi  +
test al 8 +
jnz loc_1022C2F  +
xor eax eax +
cmp [ebp+arg_8] eax +
jz loc_1022BFF  +
mov edi [ebp+arg_4] +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
jmp loc_1022C95  +
push ecx  +
push [ebp+var_8]  +
push [ebp+var_1C]  +
push [ebp+var_20]  +
call sub_102AAE0  +
xor ecx ecx +
add eax ebx +
adc edx ecx +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
movzx esi word ptr [edi] +
inc edi  +
inc edi  +
jmp loc_1022B75  +
mov esi 7FFFFFFFh +
mov ebx 80000000h +
test al 4 +
jnz loc_1022C64  +
test al 1 +
jnz loc_1022C95  +
and eax 2 +
jz loc_1022C53  +
cmp [ebp+var_4] ebx +
ja loc_1022C64  +
jb loc_1022C53  +
cmp [ebp+var_8] 0 +
ja loc_1022C64  +
test eax eax +
jnz loc_1022C95  +
cmp [ebp+var_4] esi +
jb loc_1022C95  +
ja loc_1022C64  +
cmp [ebp+var_8] 0FFFFFFFFh +
jbe loc_1022C95  +
call sub_10223A9  +
test byte ptr [ebp+arg_10] 1 +
mov dword ptr [eax] 22h +
jz loc_1022C7F  +
or [ebp+var_8] 0FFFFFFFFh +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_1022C95  +
test byte ptr [ebp+arg_10] 2 +
jz loc_1022C8E  +
and [ebp+var_8] 0 +
mov [ebp+var_4] ebx +
jmp loc_1022C95  +
or [ebp+var_8] 0FFFFFFFFh +
mov [ebp+var_4] esi +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1022C9E  +
mov [eax] edi +
test byte ptr [ebp+arg_10] 2 +
jz loc_1022CB7  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
neg eax  +
adc ecx 0 +
neg ecx  +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
cmp [ebp+var_24] 0 +
jz loc_1022CC4  +
mov eax [ebp+var_28] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
jmp loc_1022CE6  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1022CD5  +
mov [eax] ebx +
cmp [ebp+var_24] 0 +
jz loc_1022CE2  +
mov eax [ebp+var_28] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
xor edx edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
cmp dword_1038188 eax +
jnz loc_1022D10  +
push offset off_1036B68  +
jmp loc_1022D11  +
push eax  +
call sub_1022A28  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1022D3E  +
mov eax [ebp+arg_0] +
jb loc_1022D35  +
cmp eax 0FFFFFFFFh +
ja loc_1022D3E  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mul  [ebp+arg_4] +
push [ebp+arg_8]  +
push edx  +
push eax  +
call sub_1022D20  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [esi] +
cmp [ebp+arg_0] ebx +
jnz loc_1022DFA  +
mov eax [edi] +
cmp eax [ebp+arg_4] +
jnz loc_1022DE6  +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
pop ecx  +
mov eax ebx +
mul  ecx +
push edx  +
push eax  +
call sub_1022D20  +
add esp 0Ch +
test eax eax +
jge loc_1022DA0  +
xor eax eax +
jmp loc_1022DFD  +
push 4  +
push ebx  +
call sub_10297ED  +
pop ecx  +
pop ecx  +
mov [edi] eax +
test eax eax +
jz loc_1022D9C  +
push [ebp+arg_0]  +
mov eax [ebp+arg_8] +
push [ebp+arg_4]  +
mov dword ptr [eax] 1 +
push dword ptr [edi]  +
call loc_101F0A0  +
mov eax [esi] +
push esi  +
add eax eax +
push 2  +
push eax  +
mov [esi] eax +
call sub_1022D50  +
add esp 18h +
test eax eax +
jge loc_1022DFA  +
push dword ptr [edi]  +
call sub_101F40A  +
pop ecx  +
jmp loc_1022D9C  +
push 4  +
push ebx  +
push eax  +
call sub_101F04F  +
add esp 0Ch +
test eax eax +
jz loc_1022D9C  +
mov [edi] eax +
shl dword ptr [esi] 1 +
xor eax eax +
inc eax  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 0FF00h +
push esi  +
jnz loc_1022E2E  +
movzx esi word ptr [ebp+arg_0] +
mov eax esi +
and eax 0FFh +
push eax  +
call sub_102AC10  +
pop ecx  +
test eax eax +
jz loc_1022E2E  +
mov eax esi +
jmp loc_1022E38  +
movzx eax word ptr [ebp+arg_0] +
and eax 0FFFFFFDFh +
sub eax 7 +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
cmp ax [ebp+WideCharStr] +
jz loc_1022E56  +
pop ebp  +
jmp loc_102AE95  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_0]  +
inc dword ptr [esi]  +
call sub_102ACE5  +
movzx edi ax +
mov eax 0FFFFh +
pop ecx  +
cmp di ax +
jz loc_1022E89  +
push 8  +
push edi  +
call sub_102857B  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1022E63  +
mov ax di +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebx] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and al 8 +
push esi  +
push [ebp+arg_10]  +
movsx esi al +
mov eax [ebp+arg_8] +
neg esi  +
sbb esi esi +
dec dword ptr [edi]  +
movzx eax word ptr [eax] +
push eax  +
call sub_1022E40  +
mov eax [ebp+arg_0] +
pop ecx  +
and eax 1 +
pop ecx  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jz loc_1022EDE  +
mov eax [ebp+arg_C] +
dec [ebp+arg_C]  +
test eax eax +
jz loc_1022FD3  +
push [ebp+arg_10]  +
inc dword ptr [edi]  +
call sub_102ACE5  +
pop ecx  +
mov ecx [ebp+arg_8] +
mov [ecx] ax +
mov ecx 0FFFFh +
mov [ebp+WideCharStr] ax +
cmp cx ax +
jz loc_1022FC0  +
test byte ptr [ebp+arg_0] 10h +
jnz loc_1022F59  +
test byte ptr [ebp+arg_0] 20h +
jz loc_1022F1F  +
cmp ax 9 +
jb loc_1022F19  +
cmp ax 0Dh +
jbe loc_1022F1F  +
cmp ax 20h +
jnz loc_1022F59  +
test byte ptr [ebp+arg_0] 40h +
jz loc_1022FC0  +
mov cx ax +
shr cx 3 +
movzx edx cx +
cmp ax dx +
jb loc_1022FC0  +
mov ecx eax +
and ecx 7 +
xor eax eax +
inc eax  +
shl eax cl +
movzx ecx dx +
mov edx [ebp+arg_4] +
movsx ecx byte ptr [ecx+edx] +
xor ecx esi +
test eax ecx +
jz loc_1022FC0  +
mov eax dword ptr [ebp+WideCharStr] +
test byte ptr [ebp+arg_0] 4 +
jnz loc_1022FB7  +
test byte ptr [ebp+arg_0] 2 +
jz loc_1022F72  +
mov ecx [ebx] +
mov [ecx] ax +
add dword ptr [ebx] 2 +
jmp loc_1022ECA  +
and [ebp+var_8] 0 +
push eax  +
push 5  +
push dword ptr [ebx]  +
lea eax [ebp+var_8] +
push eax  +
call sub_102B1C5  +
xor ecx ecx +
add esp 10h +
cmp eax ecx +
jz loc_1022FAD  +
cmp eax 16h +
jz loc_1022F9B  +
cmp eax 22h +
jnz loc_1022ECA  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
call sub_10222A7  +
add esp 14h +
jmp loc_1022ECA  +
mov eax [ebp+var_8] +
add [ebx] eax +
jmp loc_1022ECA  +
add [ebp+var_4] 2 +
jmp loc_1022ECA  +
dec dword ptr [edi]  +
mov eax [ebp+arg_8] +
movzx eax word ptr [eax] +
push [ebp+arg_10]  +
push eax  +
call sub_1022E40  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_4] +
pop esi  +
cmp eax [ebx] +
jz loc_1023002  +
test byte ptr [ebp+arg_0] 4 +
jnz loc_1022FFE  +
mov eax [ebp+arg_14] +
inc dword ptr [eax]  +
test byte ptr [ebp+arg_0] 10h +
jnz loc_1022FFE  +
test byte ptr [ebp+arg_0] 2 +
mov eax [ebx] +
jz loc_1022FFB  +
xor ecx ecx +
mov [eax] cx +
jmp loc_1022FFE  +
mov byte ptr [eax] 0 +
xor eax eax +
leave   +
retn   +
or eax 0FFFFFFFFh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi 2000h +
push edi  +
xor ebx ebx +
call sub_1020842  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_102303A  +
call sub_10223A9  +
push 0Ch  +
pop ecx  +
mov [eax] ecx +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push edi  +
push 0  +
push esi  +
call sub_101EDB0  +
mov edx [ebp+arg_4] +
add dword ptr [edx] 2 +
mov eax [edx] +
add esp 0Ch +
push 5Eh  +
pop ecx  +
cmp cx [eax] +
jnz loc_102305C  +
inc eax  +
inc eax  +
or [ebp+arg_0] 8 +
push 5Dh  +
pop ecx  +
cmp cx [eax] +
jnz loc_10230F7  +
push ecx  +
inc eax  +
pop ebx  +
inc eax  +
mov byte ptr [esi+0Bh] 20h +
jmp loc_10230F7  +
movzx ecx cx +
inc eax  +
push 2Dh  +
pop edi  +
inc eax  +
mov [ebp+var_4] ecx +
cmp di cx +
jnz loc_10230DB  +
test bx bx +
jz loc_10230DB  +
movzx ecx word ptr [eax] +
push 5Dh  +
pop edi  +
cmp di cx +
jz loc_10230DB  +
movzx edi cx +
inc eax  +
inc eax  +
cmp bx di +
jnb loc_10230A4  +
movzx ecx di +
jmp loc_10230AA  +
movzx ecx bx +
movzx ebx di +
cmp bx cx +
ja loc_10230D7  +
sub ecx ebx +
inc ecx  +
movzx ecx cx +
movzx edx bx +
mov [ebp+var_4] ecx +
mov ecx edx +
shr ecx 3 +
lea edi [ecx+esi] +
mov ecx edx +
and ecx 7 +
mov bl 1 +
shl bl cl +
or [edi] bl +
inc edx  +
dec [ebp+var_4]  +
jnz loc_10230BB  +
mov edx [ebp+arg_4] +
xor ebx ebx +
jmp loc_10230F7  +
movzx ecx word ptr [ebp+var_4] +
movzx ebx word ptr [ebp+var_4] +
mov edx ecx +
shr edx 3 +
lea edi [edx+esi] +
and ecx 7 +
mov dl 1 +
shl dl cl +
or [edi] dl +
mov edx [ebp+arg_4] +
movzx ecx word ptr [eax] +
push 5Dh  +
pop edi  +
cmp di cx +
jnz loc_1023075  +
cmp word ptr [eax] 0 +
jnz loc_102311D  +
or edi 0FFFFFFFFh +
push esi  +
call sub_101F40A  +
pop ecx  +
mov eax edi +
jmp loc_1023035  +
push [ebp+arg_1C]  +
mov ebx [ebp+arg_10] +
push [ebp+arg_18]  +
mov edi [ebp+arg_C] +
push [ebp+arg_14]  +
mov [edx] eax +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_1022E94  +
add esp 18h +
mov edi eax +
jmp loc_102310F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 324h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+14h] +
mov eax [ebp+8] +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
xor esi esi +
mov [ebp-310h] ecx +
lea ecx [ebp-2C0h] +
mov [ebp-2D8h] eax +
mov [ebp-2E0h] ecx +
mov dword ptr [ebp-2FCh] 15Eh +
mov [ebp-300h] esi +
mov [ebp-2C4h] esi +
cmp ebx esi +
jnz loc_10231BA  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1023F9E  +
cmp eax esi +
jz loc_102319A  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-324h] +
call sub_101FCB3  +
movzx eax word ptr [ebx] +
mov byte ptr [ebp-2D9h] 0 +
mov [ebp-2CCh] esi +
mov [ebp-2F8h] esi +
cmp ax si +
jz loc_1023F85  +
push edi  +
xor edi edi +
push 8  +
push eax  +
call sub_102857B  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102323D  +
push dword ptr [ebp-2D8h]  +
dec dword ptr [ebp-2CCh]  +
push dword ptr [ebp-2D8h]  +
lea esi [ebp-2CCh] +
call sub_1022E5D  +
movzx eax ax +
pop ecx  +
push eax  +
call sub_1022E40  +
pop ecx  +
pop ecx  +
inc ebx  +
inc ebx  +
movzx eax word ptr [ebx] +
push 8  +
push eax  +
call sub_102857B  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1023225  +
jmp loc_1023F19  +
push 25h  +
pop eax  +
cmp ax [ebx] +
jnz loc_1023ED7  +
mov [ebp-308h] edi +
mov [ebp-2E4h] edi +
mov [ebp-30Ch] edi +
mov [ebp-2D0h] edi +
mov byte ptr [ebp-2DAh] 0 +
mov byte ptr [ebp-2D3h] 0 +
mov byte ptr [ebp-2C5h] 0 +
mov byte ptr [ebp-2D2h] 0 +
mov byte ptr [ebp-2D1h] 1 +
mov [ebp-304h] edi +
inc ebx  +
inc ebx  +
movzx eax word ptr [ebx] +
mov [ebp-2F4h] ebx +
mov [ebp-2F0h] eax +
test eax 0FF00h +
jnz loc_10232DA  +
movzx eax al +
push eax  +
call sub_102AC10  +
pop ecx  +
test eax eax +
jz loc_10232D4  +
mov eax [ebp-2D0h] +
inc dword ptr [ebp-30Ch]  +
imul eax eax +
mov ecx [ebp-2F0h] +
lea eax [eax+ecx-30h] +
mov [ebp-2D0h] eax +
jmp loc_10233B4  +
mov eax [ebp-2F0h] +
cmp eax 4Eh +
jg loc_102337A  +
jz loc_10233B4  +
cmp eax 2Ah +
jz loc_1023372  +
cmp eax 46h +
jz loc_10233B4  +
cmp eax 49h +
jz loc_1023314  +
cmp eax 4Ch +
jnz loc_1023389  +
inc byte ptr [ebp-2D1h]  +
jmp loc_10233B4  +
movzx ecx word ptr [ebx+2] +
cmp cx 36h +
jnz loc_1023343  +
lea eax [ebx+4] +
cmp word ptr [eax] 34h +
jnz loc_1023343  +
inc dword ptr [ebp-304h]  +
mov [ebp-2ECh] edi +
mov [ebp-2E8h] edi +
mov [ebp-2F4h] eax +
mov ebx eax +
jmp loc_10233B4  +
cmp cx 33h +
jnz loc_1023352  +
lea eax [ebx+4] +
cmp word ptr [eax] 32h +
jz loc_1023339  +
cmp cx 64h +
jz loc_10233B4  +
cmp cx 69h +
jz loc_10233B4  +
cmp cx 6Fh +
jz loc_10233B4  +
cmp cx 78h +
jz loc_10233B4  +
cmp cx 58h +
jnz loc_1023389  +
jmp loc_10233B4  +
inc byte ptr [ebp-2D3h]  +
jmp loc_10233B4  +
cmp eax 68h +
jz loc_10233A8  +
cmp eax 6Ch +
jz loc_1023391  +
cmp eax 77h +
jz loc_10233A0  +
inc byte ptr [ebp-2C5h]  +
jmp loc_10233B4  +
lea eax [ebx+2] +
cmp word ptr [eax] 6Ch +
jz loc_1023327  +
inc byte ptr [ebp-2D1h]  +
inc byte ptr [ebp-2D2h]  +
jmp loc_10233B4  +
dec byte ptr [ebp-2D1h]  +
dec byte ptr [ebp-2D2h]  +
cmp byte ptr [ebp-2C5h] 0 +
jz loc_102328A  +
cmp byte ptr [ebp-2D3h] 0 +
jnz loc_10233EA  +
mov eax [ebp-310h] +
mov [ebp-314h] eax +
add eax 4 +
mov [ebp-310h] eax +
mov eax [eax-4] +
mov [ebp-2F0h] eax +
jmp loc_10233F0  +
mov [ebp-2F0h] edi +
cmp byte ptr [ebp-2D2h] 0 +
mov byte ptr [ebp-2C5h] 0 +
jnz loc_102341D  +
movzx eax word ptr [ebx] +
cmp ax 53h +
jz loc_1023416  +
mov byte ptr [ebp-2D2h] 1 +
cmp ax 43h +
jnz loc_102341D  +
mov byte ptr [ebp-2D2h] 0FFh +
movzx edi word ptr [ebx] +
or edi 20h +
cmp edi 6Eh +
jz loc_1023472  +
cmp edi 63h +
jz loc_1023445  +
cmp edi 7Bh +
jz loc_1023445  +
push dword ptr [ebp-2D8h]  +
lea esi [ebp-2CCh] +
call sub_1022E5D  +
jmp loc_1023456  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
mov [ebp-2C4h] eax +
mov eax 0FFFFh +
pop ecx  +
cmp ax [ebp-2C4h] +
jz loc_1023F3A  +
mov esi [ebp-30Ch] +
test esi esi +
jz loc_1023489  +
cmp dword ptr [ebp-2D0h] 0 +
jz loc_1023F27  +
cmp edi 6Fh +
jg loc_1023987  +
jz loc_1023B7A  +
cmp edi 63h +
jz loc_1023971  +
cmp edi 64h +
jz loc_1023B7A  +
jle loc_10239B1  +
cmp edi 67h +
jle loc_10234FA  +
cmp edi 69h +
jz loc_10234DB  +
cmp edi 6Eh +
jnz loc_10239B1  +
cmp byte ptr [ebp-2D3h] 0 +
mov eax [ebp-2CCh] +
jz loc_1023E8D  +
jmp loc_1023EC5  +
push 64h  +
pop edi  +
push 2Dh  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_10239EC  +
mov byte ptr [ebp-2DAh] 1 +
jmp loc_10239F8  +
push 2Dh  +
pop eax  +
xor ebx ebx +
cmp ax [ebp-2C4h] +
jnz loc_1023514  +
mov ecx [ebp-2E0h] +
mov [ecx] ax +
inc ebx  +
jmp loc_1023520  +
push 2Bh  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_1023541  +
dec dword ptr [ebp-2D0h]  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
test esi esi +
jnz loc_102354C  +
or dword ptr [ebp-2D0h] 0FFFFFFFFh +
test dword ptr [ebp-2C4h] 0FF00h +
jnz loc_10235E8  +
movzx eax byte ptr [ebp-2C4h] +
push eax  +
call sub_102AC10  +
pop ecx  +
test eax eax +
jz loc_10235E8  +
mov eax [ebp-2D0h] +
dec dword ptr [ebp-2D0h]  +
test eax eax +
jz loc_10235E8  +
movsx ax byte ptr [ebp-2C4h] +
mov ecx [ebp-2E0h] +
inc dword ptr [ebp-2E4h]  +
mov [ecx+ebx*2] ax +
lea eax [ebp-300h] +
push eax  +
lea eax [ebp-2C0h] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp-2E0h] +
lea esi [ebp-2FCh] +
call sub_1022D6F  +
add esp 0Ch +
test eax eax +
jz loc_1023F3A  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
test eax 0FF00h +
jz loc_102355C  +
mov eax [ebp-324h] +
mov eax [eax+0BCh] +
mov eax [eax+30h] +
movzx esi word ptr [eax] +
movsx ecx byte ptr [ebp-2C4h] +
movzx eax si +
cmp eax ecx +
jnz loc_102370B  +
mov eax [ebp-2D0h] +
dec dword ptr [ebp-2D0h]  +
test eax eax +
jz loc_102370B  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
mov [ebp-2C4h] eax +
mov eax [ebp-2E0h] +
mov [eax+ebx*2] si +
lea eax [ebp-300h] +
push eax  +
lea eax [ebp-2C0h] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp-2E0h] +
lea esi [ebp-2FCh] +
call sub_1022D6F  +
add esp 10h +
test eax eax +
jz loc_1023F3A  +
test dword ptr [ebp-2C4h] 0FF00h +
jnz loc_102370B  +
movzx eax byte ptr [ebp-2C4h] +
push eax  +
call sub_102AC10  +
pop ecx  +
test eax eax +
jz loc_102370B  +
mov eax [ebp-2D0h] +
dec dword ptr [ebp-2D0h]  +
test eax eax +
jz loc_102370B  +
mov eax [ebp-2E0h] +
mov cx [ebp-2C4h] +
inc dword ptr [ebp-2E4h]  +
mov [eax+ebx*2] cx +
lea eax [ebp-300h] +
push eax  +
lea eax [ebp-2C0h] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp-2E0h] +
lea esi [ebp-2FCh] +
call sub_1022D6F  +
add esp 0Ch +
test eax eax +
jz loc_1023F3A  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
test eax 0FF00h +
jz loc_1023680  +
cmp dword ptr [ebp-2E4h] 0 +
jz loc_10238AC  +
push 65h  +
pop eax  +
cmp ax [ebp-2C4h] +
jz loc_1023734  +
push 45h  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_10238AC  +
mov eax [ebp-2D0h] +
dec dword ptr [ebp-2D0h]  +
test eax eax +
jz loc_10238AC  +
mov ecx [ebp-2E0h] +
push 65h  +
pop eax  +
mov [ecx+ebx*2] ax +
lea eax [ebp-300h] +
push eax  +
lea eax [ebp-2C0h] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp-2E0h] +
lea esi [ebp-2FCh] +
call sub_1022D6F  +
add esp 0Ch +
test eax eax +
jz loc_1023F3A  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
pop ecx  +
movzx eax ax +
push 2Dh  +
pop ecx  +
mov [ebp-2C4h] eax +
cmp cx ax +
jnz loc_10237D2  +
push ecx  +
mov ecx [ebp-2E0h] +
pop eax  +
mov [ecx+ebx*2] ax +
lea eax [ebp-300h] +
push eax  +
lea eax [ebp-2C0h] +
push eax  +
inc ebx  +
push ebx  +
call sub_1022D6F  +
add esp 0Ch +
test eax eax +
jz loc_1023F3A  +
jmp loc_10237DE  +
push 2Bh  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_1023811  +
mov eax [ebp-2D0h] +
dec dword ptr [ebp-2D0h]  +
test eax eax +
jnz loc_10237F6  +
and [ebp-2D0h] eax +
jmp loc_1023811  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
test dword ptr [ebp-2C4h] 0FF00h +
jnz loc_10238AC  +
movzx eax byte ptr [ebp-2C4h] +
push eax  +
call sub_102AC10  +
pop ecx  +
test eax eax +
jz loc_10238AC  +
mov eax [ebp-2D0h] +
dec dword ptr [ebp-2D0h]  +
test eax eax +
jz loc_10238AC  +
mov eax [ebp-2E0h] +
mov cx [ebp-2C4h] +
inc dword ptr [ebp-2E4h]  +
mov [eax+ebx*2] cx +
lea eax [ebp-300h] +
push eax  +
lea eax [ebp-2C0h] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp-2E0h] +
lea esi [ebp-2FCh] +
call sub_1022D6F  +
add esp 0Ch +
test eax eax +
jz loc_1023F3A  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
test eax 0FF00h +
jz loc_1023821  +
push dword ptr [ebp-2D8h]  +
dec dword ptr [ebp-2CCh]  +
push dword ptr [ebp-2C4h]  +
call sub_1022E40  +
cmp dword ptr [ebp-2E4h] 0 +
pop ecx  +
pop ecx  +
jz loc_1023F3A  +
cmp byte ptr [ebp-2D3h] 0 +
jnz loc_1023EC5  +
mov esi [ebp-2FCh] +
mov ecx [ebp-2E0h] +
inc dword ptr [ebp-2F8h]  +
xor eax eax +
lea esi [esi+esi+2] +
push esi  +
mov [ecx+ebx*2] ax +
call sub_1020842  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_1023F3A  +
lea eax [esi-1] +
push eax  +
push dword ptr [ebp-2E0h]  +
push esi  +
push edi  +
xor esi esi +
push esi  +
call sub_102B4E0  +
add esp 14h +
cmp eax esi +
jz loc_102393E  +
cmp eax 16h +
jz loc_1023931  +
cmp eax 22h +
jnz loc_102393E  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10222A7  +
add esp 14h +
lea eax [ebp-324h] +
push eax  +
movsx eax byte ptr [ebp-2D1h] +
push edi  +
push dword ptr [ebp-2F0h]  +
dec eax  +
push eax  +
push off_1036B8C  +
call sub_10218C4  +
pop ecx  +
call eax  +
push edi  +
call sub_101F40A  +
add esp 14h +
jmp loc_1023EC5  +
push 10h  +
pop eax  +
test esi esi +
jnz loc_1023AEE  +
inc dword ptr [ebp-2D0h]  +
jmp loc_1023AEE  +
mov eax edi +
sub eax 70h +
jz loc_1023B73  +
sub eax 3 +
jz loc_1023AE7  +
dec eax  +
dec eax  +
jz loc_1023B7A  +
sub eax 3 +
jz loc_10234DE  +
sub eax 3 +
jz loc_10239E5  +
mov ax [ebp-2C4h] +
cmp [ebx] ax +
jnz loc_1023F27  +
dec byte ptr [ebp-2D9h]  +
cmp byte ptr [ebp-2D3h] 0 +
jnz loc_1023EC5  +
mov eax [ebp-314h] +
mov [ebp-310h] eax +
jmp loc_1023EC5  +
push 40h  +
jmp loc_1023AE9  +
push 2Bh  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_1023A28  +
dec dword ptr [ebp-2D0h]  +
jnz loc_1023A0D  +
test esi esi +
jz loc_1023A0D  +
mov byte ptr [ebp-2C5h] 1 +
jmp loc_1023A28  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
push 30h  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_1023BCB  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
pop ecx  +
movzx eax ax +
push 78h  +
pop ecx  +
mov [ebp-2C4h] eax +
cmp cx ax +
jz loc_1023AAA  +
push 58h  +
pop ecx  +
cmp cx ax +
jz loc_1023AAA  +
mov dword ptr [ebp-2E4h] 1 +
cmp edi 78h +
jz loc_1023A88  +
test esi esi +
jz loc_1023A84  +
dec dword ptr [ebp-2D0h]  +
jnz loc_1023A84  +
inc byte ptr [ebp-2C5h]  +
push 6Fh  +
jmp loc_1023AE1  +
push dword ptr [ebp-2D8h]  +
dec dword ptr [ebp-2CCh]  +
push eax  +
call sub_1022E40  +
pop ecx  +
mov dword ptr [ebp-2C4h] 30h +
jmp loc_1023BCA  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
test esi esi +
jz loc_1023ADF  +
sub dword ptr [ebp-2D0h] 2 +
cmp dword ptr [ebp-2D0h] 1 +
jge loc_1023ADF  +
inc byte ptr [ebp-2C5h]  +
push 78h  +
pop edi  +
jmp loc_1023BCB  +
push 20h  +
pop eax  +
test esi esi +
jz loc_1023AF1  +
or eax 1 +
cmp byte ptr [ebp-2D2h] 0 +
jle loc_1023AFD  +
or eax 2 +
cmp byte ptr [ebp-2D3h] 0 +
jz loc_1023B09  +
or eax 4 +
lea ecx [ebp-2F8h] +
push ecx  +
push dword ptr [ebp-2D8h]  +
push dword ptr [ebp-2D0h]  +
cmp edi 7Bh +
jnz loc_1023B48  +
lea ecx [ebp-2F0h] +
push ecx  +
lea ecx [ebp-2CCh] +
push ecx  +
lea ecx [ebp-2C4h] +
push ecx  +
lea ecx [ebp-2F4h] +
push ecx  +
push eax  +
call sub_102300C  +
add esp 20h +
jmp loc_1023B66  +
lea ecx [ebp-2C4h] +
push ecx  +
push 0  +
push eax  +
lea ebx [ebp-2F0h] +
lea edi [ebp-2CCh] +
call sub_1022E94  +
add esp 18h +
test eax eax +
jnz loc_1023F3A  +
jmp loc_1023EC5  +
mov byte ptr [ebp-2D1h] 1 +
push 2Dh  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_1023B8F  +
mov byte ptr [ebp-2DAh] 1 +
jmp loc_1023B9B  +
push 2Bh  +
pop eax  +
cmp ax [ebp-2C4h] +
jnz loc_1023BCB  +
dec dword ptr [ebp-2D0h]  +
jnz loc_1023BB0  +
test esi esi +
jz loc_1023BB0  +
mov byte ptr [ebp-2C5h] 1 +
jmp loc_1023BCB  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
mov [ebp-2C4h] eax +
pop ecx  +
cmp dword ptr [ebp-304h] 0 +
jz loc_1023D58  +
cmp byte ptr [ebp-2C5h] 0 +
jnz loc_1023D27  +
mov ebx 0FF00h +
cmp edi 78h +
jz loc_1023C73  +
cmp edi 70h +
jz loc_1023C73  +
test [ebp-2C4h] ebx +
jnz loc_1023D0E  +
movzx eax byte ptr [ebp-2C4h] +
push eax  +
call sub_102AC10  +
pop ecx  +
test eax eax +
jz loc_1023D0E  +
cmp edi 6Fh +
jnz loc_1023C50  +
push 38h  +
pop eax  +
cmp ax [ebp-2C4h] +
jbe loc_1023D0E  +
mov eax [ebp-2ECh] +
mov ecx [ebp-2E8h] +
shld ecx eax +
shl eax 3 +
mov [ebp-2ECh] eax +
mov [ebp-2E8h] ecx +
jmp loc_1023CC5  +
push 0  +
push 0Ah  +
push dword ptr [ebp-2E8h]  +
push dword ptr [ebp-2ECh]  +
call sub_102AAE0  +
mov [ebp-2ECh] eax +
mov [ebp-2E8h] edx +
jmp loc_1023CC5  +
test [ebp-2C4h] ebx +
jnz loc_1023D0E  +
movzx eax byte ptr [ebp-2C4h] +
push eax  +
call sub_102ACA7  +
pop ecx  +
test eax eax +
jz loc_1023D0E  +
mov eax [ebp-2ECh] +
mov ecx [ebp-2E8h] +
push dword ptr [ebp-2C4h]  +
shld ecx eax +
shl eax 4 +
mov [ebp-2ECh] eax +
mov [ebp-2E8h] ecx +
call sub_1022E05  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
movzx eax word ptr [ebp-2C4h] +
inc dword ptr [ebp-2E4h]  +
sub eax 30h +
cdq   +
add [ebp-2ECh] eax +
adc [ebp-2E8h] edx +
test esi esi +
jz loc_1023CEE  +
dec dword ptr [ebp-2D0h]  +
jz loc_1023D27  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
jmp loc_1023BEA  +
***
push dword ptr [ebp-2D8h]  +
dec dword ptr [ebp-2CCh]  +
push dword ptr [ebp-2C4h]  +
call sub_1022E40  +
pop ecx  +
pop ecx  +
cmp byte ptr [ebp-2DAh] 0 +
jz loc_1023E5F  +
mov eax [ebp-2ECh] +
mov ecx [ebp-2E8h] +
neg eax  +
adc ecx 0 +
neg ecx  +
mov [ebp-2ECh] eax +
mov [ebp-2E8h] ecx +
jmp loc_1023E5F  +
cmp byte ptr [ebp-2C5h] 0 +
mov ebx [ebp-308h] +
jnz loc_1023E4E  +
mov esi 0FF00h +
cmp edi 78h +
jz loc_1023DBB  +
cmp edi 70h +
jz loc_1023DBB  +
test [ebp-2C4h] esi +
jnz loc_1023E35  +
movzx eax byte ptr [ebp-2C4h] +
push eax  +
call sub_102AC10  +
pop ecx  +
test eax eax +
jz loc_1023E35  +
cmp edi 6Fh +
jnz loc_1023DB6  +
push 38h  +
pop eax  +
cmp ax [ebp-2C4h] +
jbe loc_1023E35  +
shl ebx 3 +
jmp loc_1023DED  +
imul ebx ebx +
jmp loc_1023DED  +
test [ebp-2C4h] esi +
jnz loc_1023E35  +
movzx eax byte ptr [ebp-2C4h] +
push eax  +
call sub_102ACA7  +
pop ecx  +
test eax eax +
jz loc_1023E35  +
push dword ptr [ebp-2C4h]  +
shl ebx 4 +
call sub_1022E05  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
movzx eax word ptr [ebp-2C4h] +
inc dword ptr [ebp-2E4h]  +
cmp dword ptr [ebp-30Ch] 0 +
lea ebx [ebx+eax-30h] +
mov [ebp-308h] ebx +
jz loc_1023E15  +
dec dword ptr [ebp-2D0h]  +
jz loc_1023E4E  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
movzx eax ax +
pop ecx  +
mov [ebp-2C4h] eax +
jmp loc_1023D70  +
***
push dword ptr [ebp-2D8h]  +
dec dword ptr [ebp-2CCh]  +
push dword ptr [ebp-2C4h]  +
call sub_1022E40  +
pop ecx  +
pop ecx  +
cmp byte ptr [ebp-2DAh] 0 +
jz loc_1023E5F  +
neg ebx  +
mov [ebp-308h] ebx +
cmp edi 46h +
jnz loc_1023E6B  +
and dword ptr [ebp-2E4h] 0 +
cmp dword ptr [ebp-2E4h] 0 +
jz loc_1023F3A  +
cmp byte ptr [ebp-2D3h] 0 +
jnz loc_1023EC5  +
inc dword ptr [ebp-2F8h]  +
mov eax [ebp-308h] +
cmp dword ptr [ebp-304h] 0 +
jz loc_1023EAF  +
mov eax [ebp-2F0h] +
mov ecx [ebp-2ECh] +
mov [eax] ecx +
mov ecx [ebp-2E8h] +
mov [eax+4] ecx +
jmp loc_1023EC5  +
cmp byte ptr [ebp-2D1h] 0 +
mov ecx [ebp-2F0h] +
jz loc_1023EC2  +
mov [ecx] eax +
jmp loc_1023EC5  +
mov [ecx] ax +
inc byte ptr [ebp-2D9h]  +
mov ebx [ebp-2F4h] +
inc ebx  +
inc ebx  +
xor edi edi +
jmp loc_1023EFC  +
push dword ptr [ebp-2D8h]  +
inc dword ptr [ebp-2CCh]  +
call sub_102ACE5  +
pop ecx  +
mov cx [ebx] +
movzx eax ax +
inc ebx  +
inc ebx  +
mov [ebp-2C4h] eax +
cmp cx ax +
jnz loc_1023F27  +
mov eax 0FFFFh +
cmp ax [ebp-2C4h] +
jnz loc_1023F19  +
cmp word ptr [ebx] 25h +
jnz loc_1023F3A  +
cmp word ptr [ebx+2] 6Eh +
jnz loc_1023F3A  +
xor edi edi +
movzx eax word ptr [ebx] +
cmp ax di +
jnz loc_10231EE  +
jmp loc_1023F3A  +
push dword ptr [ebp-2D8h]  +
push dword ptr [ebp-2C4h]  +
call sub_1022E40  +
pop ecx  +
pop ecx  +
cmp dword ptr [ebp-300h] 1 +
pop edi  +
jnz loc_1023F50  +
push dword ptr [ebp-2E0h]  +
call sub_101F40A  +
pop ecx  +
mov eax 0FFFFh +
cmp ax [ebp-2C4h] +
jnz loc_1023F85  +
mov eax [ebp-2F8h] +
test eax eax +
jnz loc_1023F70  +
cmp [ebp-2D9h] al +
jnz $+2  +
cmp byte ptr [ebp-318h] 0 +
jz loc_1023F9E  +
mov ecx [ebp-31Ch] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_1023F9E  +
cmp byte ptr [ebp-318h] 0 +
jz loc_1023F98  +
mov eax [ebp-31Ch] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp-2F8h] +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
sub esp 4 +
mov [ebp+var_4] edi +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_4] +
shr ecx 7 +
pxor xmm0 xmm0 +
jmp loc_1023FD1  +
lea esp [esp+0] +
nop   +
movdqa oword ptr [edi] xmm0 +
movdqa oword ptr [edi+10h] xmm0 +
movdqa oword ptr [edi+20h] xmm0 +
movdqa oword ptr [edi+30h] xmm0 +
movdqa oword ptr [edi+40h] xmm0 +
movdqa oword ptr [edi+50h] xmm0 +
movdqa oword ptr [edi+60h] xmm0 +
movdqa oword ptr [edi+70h] xmm0 +
lea edi [edi+80h] +
dec ecx  +
jnz loc_1023FD1  +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 10h +
mov [ebp+var_4] edi +
mov eax [ebp+arg_0] +
cdq   +
mov edi eax +
xor edi edx +
sub edi edx +
and edi 0Fh +
xor edi edx +
sub edi edx +
test edi edi +
jnz loc_1024067  +
mov ecx [ebp+arg_8] +
mov edx ecx +
and edx 7Fh +
mov [ebp+var_C] edx +
cmp ecx edx +
jz loc_102404C  +
sub ecx edx +
push ecx  +
push eax  +
call sub_1023FB1  +
add esp 8 +
mov eax [ebp+arg_0] +
mov edx [ebp+var_C] +
test edx edx +
jz loc_1024095  +
add eax [ebp+arg_8] +
sub eax edx +
mov [ebp+var_8] eax +
xor eax eax +
mov edi [ebp+var_8] +
mov ecx [ebp+var_C] +
stos   +
mov eax [ebp+arg_0] +
jmp loc_1024095  +
neg edi  +
add edi 10h +
mov [ebp+var_10] edi +
xor eax eax +
mov edi [ebp+arg_0] +
mov ecx [ebp+var_10] +
stos   +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
add ecx eax +
sub edx eax +
push edx  +
push 0  +
push ecx  +
call sub_102400D  +
add esp 0Ch +
mov eax [ebp+arg_0] +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
call sub_1024E74  +
and dword ptr [ebp-4] 0 +
movapd xmm0 xmm1 +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_10240E1  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0C0000005h +
jz loc_10240D6  +
cmp eax 0C000001Dh +
jz loc_10240D6  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_1024EB9  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
push ebx  +
mov [ebp-4] eax +
mov [ebp-0Ch] eax +
mov [ebp-8] eax +
push ebx  +
pushf   +
pop eax  +
mov ecx eax +
xor eax 200000h +
push eax  +
popf   +
pushf   +
pop edx  +
sub edx ecx +
jz loc_102413B  +
push ecx  +
popf   +
xor eax eax +
cpuid   +
mov [ebp-0Ch] eax +
mov [ebp-18h] ebx +
mov [ebp-14h] edx +
mov [ebp-10h] ecx +
mov eax 1 +
cpuid   +
mov [ebp-4] edx +
mov [ebp-8] eax +
pop ebx  +
test dword ptr [ebp-4] 4000000h +
jz loc_1024153  +
call sub_10240A1  +
test eax eax +
jz loc_1024153  +
xor eax eax +
inc eax  +
jmp loc_1024155  +
xor eax eax +
pop ebx  +
leave   +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor esi esi +
mov edi offset unk_1037CF8 +
cmp dword_1036414[esi*8] 1 +
jnz loc_10241A8  +
lea eax lpCriticalSection[esi*8] +
push 4000000h  +
mov [eax] edi +
push 0FA0h  +
push dword ptr [eax]  +
add edi 18h +
call sub_102A5AD  +
add esp 0Ch +
test eax eax +
jz loc_10241B4  +
inc esi  +
cmp esi 24h +
jl loc_102417A  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
and lpCriticalSection[esi*8] 0 +
xor eax eax +
jmp loc_10241B1  +
***
mov edi edi +
push ebx  +
mov ebx ds:DeleteCriticalSection +
push esi  +
mov esi offset lpCriticalSection +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_10241EE  +
cmp dword ptr [esi+4] 1 +
jz loc_10241EE  +
push edi  +
call ebx  +
push edi  +
call sub_101F40A  +
and dword ptr [esi] 0 +
pop ecx  +
add esi 8 +
cmp esi offset off_1036530 +
jl loc_10241D5  +
mov esi offset lpCriticalSection +
pop edi  +
mov eax [esi] +
test eax eax +
jz loc_102420E  +
cmp dword ptr [esi+4] 1 +
jnz loc_102420E  +
push eax  +
call ebx  +
add esi 8 +
cmp esi offset off_1036530 +
jl loc_10241FF  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push lpCriticalSection[eax*8]  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi lpCriticalSection[eax*8] +
cmp dword ptr [esi] 0 +
jnz loc_102432D  +
push eax  +
call sub_102423D  +
pop ecx  +
test eax eax +
jnz loc_102432D  +
push 11h  +
call sub_10209D5  +
pop ecx  +
push dword ptr [esi]  +
call ds:EnterCriticalSection  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 140h  +
push 0  +
push hHeap  +
call ds:HeapAlloc  +
mov lpMem eax +
test eax eax +
jnz loc_1024360  +
pop ebp  +
retn   +
mov ecx [ebp+arg_0] +
and dword_1037E48 0 +
and dword_1039324 0 +
mov dword_1039330 eax +
xor eax eax +
mov dword_103932C ecx +
mov dword_1039334 10h +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1039324 +
mov eax lpMem +
imul ecx ecx +
add ecx eax +
jmp loc_10243B8  +
mov edx [ebp+arg_0] +
sub edx [eax+0Ch] +
cmp edx 100000h +
jb loc_10243BE  +
add eax 14h +
cmp eax ecx +
jb loc_10243A7  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+arg_0] +
mov eax [ecx+10h] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi esi +
sub edi [ecx+0Ch] +
add esi 0FFFFFFFCh +
shr edi 0Fh +
mov ecx edi +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_10] ecx +
mov ecx [esi] +
dec ecx  +
mov [ebp+var_4] ecx +
test cl 1 +
jnz loc_10246D7  +
push ebx  +
lea ebx [ecx+esi] +
mov edx [ebx] +
mov [ebp+var_C] edx +
mov edx [esi-4] +
mov [ebp+var_8] edx +
mov edx [ebp+var_C] +
mov [ebp+arg_4] ebx +
test dl 1 +
jnz loc_1024492  +
sar edx 4 +
dec edx  +
cmp edx 3Fh +
jbe loc_102442A  +
push 3Fh  +
pop edx  +
mov ecx [ebx+4] +
cmp ecx [ebx+8] +
jnz loc_1024474  +
mov ebx 80000000h +
cmp edx 20h +
jnb loc_1024455  +
mov ecx edx +
shr ebx cl +
lea ecx [edx+eax+4] +
not ebx  +
and [eax+edi*4+44h] ebx +
dec byte ptr [ecx]  +
jnz loc_1024471  +
mov ecx [ebp+arg_0] +
and [ecx] ebx +
jmp loc_1024471  +
lea ecx [edx-20h] +
shr ebx cl +
lea ecx [edx+eax+4] +
not ebx  +
and [eax+edi*4+0C4h] ebx +
dec byte ptr [ecx]  +
jnz loc_1024471  +
mov ecx [ebp+arg_0] +
and [ecx+4] ebx +
mov ebx [ebp+arg_4] +
mov edx [ebx+8] +
mov ebx [ebx+4] +
mov ecx [ebp+var_4] +
add ecx [ebp+var_C] +
mov [edx+4] ebx +
mov edx [ebp+arg_4] +
mov ebx [edx+4] +
mov edx [edx+8] +
mov [ebx+8] edx +
mov [ebp+var_4] ecx +
mov edx ecx +
sar edx 4 +
dec edx  +
cmp edx 3Fh +
jbe loc_10244A0  +
push 3Fh  +
pop edx  +
mov ebx [ebp+var_8] +
and ebx 1 +
mov [ebp+var_C] ebx +
jnz loc_102453E  +
sub esi [ebp+var_8] +
mov ebx [ebp+var_8] +
sar ebx 4 +
push 3Fh  +
mov [ebp+arg_4] esi +
dec ebx  +
pop esi  +
cmp ebx esi +
jbe loc_10244C5  +
mov ebx esi +
add ecx [ebp+var_8] +
mov edx ecx +
sar edx 4 +
dec edx  +
mov [ebp+var_4] ecx +
cmp edx esi +
jbe loc_10244D7  +
mov edx esi +
cmp ebx edx +
jz loc_1024539  +
mov ecx [ebp+arg_4] +
mov esi [ecx+4] +
cmp esi [ecx+8] +
jnz loc_1024521  +
mov esi 80000000h +
cmp ebx 20h +
jnb loc_1024507  +
mov ecx ebx +
shr esi cl +
not esi  +
and [eax+edi*4+44h] esi +
dec byte ptr [ebx+eax+4]  +
jnz loc_1024521  +
mov ecx [ebp+arg_0] +
and [ecx] esi +
jmp loc_1024521  +
lea ecx [ebx-20h] +
shr esi cl +
not esi  +
and [eax+edi*4+0C4h] esi +
dec byte ptr [ebx+eax+4]  +
jnz loc_1024521  +
mov ecx [ebp+arg_0] +
and [ecx+4] esi +
mov ecx [ebp+arg_4] +
mov esi [ecx+8] +
mov ecx [ecx+4] +
mov [esi+4] ecx +
mov ecx [ebp+arg_4] +
mov esi [ecx+4] +
mov ecx [ecx+8] +
mov [esi+8] ecx +
mov esi [ebp+arg_4] +
jmp loc_1024541  +
mov ebx [ebp+arg_0] +
cmp [ebp+var_C] 0 +
jnz loc_102454F  +
cmp ebx edx +
jz loc_10245CF  +
mov ecx [ebp+var_10] +
lea ecx [ecx+edx*8] +
mov ebx [ecx+4] +
mov [esi+8] ecx +
mov [esi+4] ebx +
mov [ecx+4] esi +
mov ecx [esi+4] +
mov [ecx+8] esi +
mov ecx [esi+4] +
cmp ecx [esi+8] +
jnz loc_10245CF  +
mov cl [edx+eax+4] +
mov byte ptr [ebp+arg_4+3] cl +
inc cl  +
mov [edx+eax+4] cl +
cmp edx 20h +
jnb loc_10245A6  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1024595  +
mov ecx edx +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx] ebx +
mov ebx 80000000h +
mov ecx edx +
shr ebx cl +
lea eax [eax+edi*4+44h] +
or [eax] ebx +
jmp loc_10245CF  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_10245BC  +
lea ecx [edx-20h] +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx+4] ebx +
lea ecx [edx-20h] +
mov edx 80000000h +
shr edx cl +
lea eax [eax+edi*4+0C4h] +
or [eax] edx +
mov eax [ebp+var_4] +
mov [esi] eax +
mov [eax+esi-4] eax +
mov eax [ebp+var_10] +
dec dword ptr [eax]  +
jnz loc_10246D6  +
mov eax dword_1037E48 +
test eax eax +
jz loc_10246C8  +
mov ecx dword_1039338 +
mov esi ds:VirtualFree +
push 4000h  +
shl ecx 0Fh +
add ecx [eax+0Ch] +
mov ebx 8000h +
push ebx  +
push ecx  +
call esi  +
mov ecx dword_1039338 +
mov eax dword_1037E48 +
mov edx 80000000h +
shr edx cl +
or [eax+8] edx +
mov eax dword_1037E48 +
mov eax [eax+10h] +
mov ecx dword_1039338 +
and dword ptr [eax+ecx*4+0C4h] 0 +
mov eax dword_1037E48 +
mov eax [eax+10h] +
dec byte ptr [eax+43h]  +
mov eax dword_1037E48 +
mov ecx [eax+10h] +
cmp byte ptr [ecx+43h] 0 +
jnz loc_102465D  +
and dword ptr [eax+4] 0FFFFFFFEh +
mov eax dword_1037E48 +
cmp dword ptr [eax+8] 0FFFFFFFFh +
jnz loc_10246C8  +
push ebx  +
push 0  +
push dword ptr [eax+0Ch]  +
call esi  +
mov eax dword_1037E48 +
push dword ptr [eax+10h]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
mov ecx dword_1039324 +
mov eax dword_1037E48 +
imul ecx ecx +
mov edx lpMem +
sub ecx eax +
lea ecx [ecx+edx-14h] +
push ecx  +
lea ecx [eax+14h] +
push ecx  +
push eax  +
call loc_1022410  +
mov eax [ebp+arg_0] +
add esp 0Ch +
dec dword_1039324  +
cmp eax dword_1037E48 +
jbe loc_10246BE  +
sub [ebp+arg_0] 14h +
mov eax lpMem +
mov dword_1039330 eax +
mov eax [ebp+arg_0] +
mov dword_1037E48 eax +
mov dword_1039338 edi +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax dword_1039334 +
push esi  +
mov esi dword_1039324 +
push edi  +
xor edi edi +
cmp esi eax +
jnz loc_1024727  +
add eax 10h +
imul eax eax +
push eax  +
push lpMem  +
push edi  +
push hHeap  +
call ds:HeapReAlloc  +
cmp eax edi +
jnz loc_1024715  +
xor eax eax +
jmp loc_102478D  +
add dword_1039334 10h +
mov esi dword_1039324 +
mov lpMem eax +
imul esi esi +
add esi lpMem +
push 41C4h  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
mov [esi+10h] eax +
cmp eax edi +
jz loc_1024711  +
push 4  +
push 2000h  +
push 100000h  +
push edi  +
call ds:VirtualAlloc  +
mov [esi+0Ch] eax +
cmp eax edi +
jnz loc_1024776  +
push dword ptr [esi+10h]  +
push edi  +
push hHeap  +
call ds:HeapFree  +
jmp loc_1024711  +
or dword ptr [esi+8] 0FFFFFFFFh +
mov [esi] edi +
mov [esi+4] edi +
inc dword_1039324  +
mov eax [esi+10h] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax esi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
push ebx  +
push esi  +
mov esi [ecx+10h] +
push edi  +
xor ebx ebx +
jmp loc_10247AF  +
add eax eax +
inc ebx  +
test eax eax +
jge loc_10247AC  +
mov eax ebx +
imul eax eax +
lea eax [eax+esi+144h] +
push 3Fh  +
mov [ebp+var_8] eax +
pop edx  +
mov [eax+8] eax +
mov [eax+4] eax +
add eax 8 +
dec edx  +
jnz loc_10247C8  +
push 4  +
mov edi ebx +
push 1000h  +
shl edi 0Fh +
add edi [ecx+0Ch] +
push 8000h  +
push edi  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_10247FB  +
or eax 0FFFFFFFFh +
jmp loc_1024898  +
lea edx [edi+7000h] +
mov [ebp+var_4] edx +
cmp edi edx +
ja loc_102484B  +
mov ecx edx +
sub ecx edi +
shr ecx 0Ch +
lea eax [edi+10h] +
inc ecx  +
or dword ptr [eax-8] 0FFFFFFFFh +
or dword ptr [eax+0FECh] 0FFFFFFFFh +
lea edx [eax+0FFCh] +
mov [eax] edx +
lea edx [eax-1004h] +
mov dword ptr [eax-4] 0FF0h +
mov [eax+4] edx +
mov dword ptr [eax+0FE8h] 0FF0h +
add eax 1000h +
dec ecx  +
jnz loc_1024813  +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
add eax 1F8h +
lea ecx [edi+0Ch] +
mov [eax+4] ecx +
mov [ecx+8] eax +
lea ecx [edx+0Ch] +
mov [eax+8] ecx +
mov [ecx+4] eax +
and dword ptr [esi+ebx*4+44h] 0 +
xor edi edi +
inc edi  +
mov [esi+ebx*4+0C4h] edi +
mov al [esi+43h] +
mov cl al +
inc cl  +
test al al +
mov eax [ebp+arg_0] +
mov [esi+43h] cl +
jnz loc_1024888  +
or [eax+4] edi +
mov edx 80000000h +
mov ecx ebx +
shr edx cl +
not edx  +
and [eax+8] edx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+arg_0] +
mov eax [ecx+10h] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov edx edi +
sub edx [ecx+0Ch] +
add esi 17h +
shr edx 0Fh +
mov ecx edx +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_C] ecx +
mov ecx [edi-4] +
and esi 0FFFFFFF0h +
dec ecx  +
cmp esi ecx +
lea edi [ecx+edi-4] +
mov ebx [edi] +
mov [ebp+arg_8] ecx +
mov [ebp+var_4] ebx +
jle loc_1024A46  +
test bl 1 +
jnz loc_1024A3F  +
add ebx ecx +
cmp esi ebx +
jg loc_1024A3F  +
mov ecx [ebp+var_4] +
sar ecx 4 +
dec ecx  +
mov [ebp+var_8] ecx +
cmp ecx 3Fh +
jbe loc_1024919  +
push 3Fh  +
pop ecx  +
mov [ebp+var_8] ecx +
mov ebx [edi+4] +
cmp ebx [edi+8] +
jnz loc_1024964  +
mov ebx 80000000h +
cmp ecx 20h +
jnb loc_1024945  +
shr ebx cl +
mov ecx [ebp+var_8] +
lea ecx [ecx+eax+4] +
not ebx  +
and [eax+edx*4+44h] ebx +
dec byte ptr [ecx]  +
jnz loc_1024964  +
mov ecx [ebp+arg_0] +
and [ecx] ebx +
jmp loc_1024964  +
add ecx 0FFFFFFE0h +
shr ebx cl +
mov ecx [ebp+var_8] +
lea ecx [ecx+eax+4] +
not ebx  +
and [eax+edx*4+0C4h] ebx +
dec byte ptr [ecx]  +
jnz loc_1024964  +
mov ecx [ebp+arg_0] +
and [ecx+4] ebx +
mov ecx [edi+8] +
mov ebx [edi+4] +
mov [ecx+4] ebx +
mov ecx [edi+4] +
mov edi [edi+8] +
mov [ecx+8] edi +
mov ecx [ebp+arg_8] +
sub ecx esi +
add [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jle loc_1024A2D  +
mov edi [ebp+var_4] +
mov ecx [ebp+arg_4] +
sar edi 4 +
dec edi  +
lea ecx [ecx+esi-4] +
cmp edi 3Fh +
jbe loc_102499E  +
push 3Fh  +
pop edi  +
mov ebx [ebp+var_C] +
lea ebx [ebx+edi*8] +
mov [ebp+arg_8] ebx +
mov ebx [ebx+4] +
mov [ecx+4] ebx +
mov ebx [ebp+arg_8] +
mov [ecx+8] ebx +
mov [ebx+4] ecx +
mov ebx [ecx+4] +
mov [ebx+8] ecx +
mov ebx [ecx+4] +
cmp ebx [ecx+8] +
jnz loc_1024A1B  +
mov cl [edi+eax+4] +
mov byte ptr [ebp+arg_8+3] cl +
inc cl  +
mov [edi+eax+4] cl +
cmp edi 20h +
jnb loc_10249F2  +
cmp byte ptr [ebp+arg_8+3] 0 +
jnz loc_10249EA  +
mov ecx edi +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx] ebx +
lea eax [eax+edx*4+44h] +
mov ecx edi +
jmp loc_1024A12  +
cmp byte ptr [ebp+arg_8+3] 0 +
jnz loc_1024A08  +
lea ecx [edi-20h] +
mov ebx 80000000h +
shr ebx cl +
mov ecx [ebp+arg_0] +
or [ecx+4] ebx +
lea eax [eax+edx*4+0C4h] +
lea ecx [edi-20h] +
mov edx 80000000h +
shr edx cl +
or [eax] edx +
mov edx [ebp+arg_4] +
mov ecx [ebp+var_4] +
lea eax [edx+esi-4] +
mov [eax] ecx +
mov [ecx+eax-4] ecx +
jmp loc_1024A30  +
mov edx [ebp+arg_4] +
lea eax [esi+1] +
mov [edx-4] eax +
mov [edx+esi-8] eax +
jmp loc_1024B7B  +
xor eax eax +
jmp loc_1024B7E  +
jge loc_1024B7B  +
mov ebx [ebp+arg_4] +
sub [ebp+arg_8] esi +
lea ecx [esi+1] +
mov [ebx-4] ecx +
lea ebx [ebx+esi-4] +
mov esi [ebp+arg_8] +
sar esi 4 +
dec esi  +
mov [ebp+arg_4] ebx +
mov [ebx-4] ecx +
cmp esi 3Fh +
jbe loc_1024A71  +
push 3Fh  +
pop esi  +
test byte ptr [ebp+var_4] 1 +
jnz loc_1024AFB  +
mov esi [ebp+var_4] +
sar esi 4 +
dec esi  +
cmp esi 3Fh +
jbe loc_1024A8A  +
push 3Fh  +
pop esi  +
mov ecx [edi+4] +
cmp ecx [edi+8] +
jnz loc_1024AD4  +
mov ebx 80000000h +
cmp esi 20h +
jnb loc_1024AB5  +
mov ecx esi +
shr ebx cl +
lea esi [esi+eax+4] +
not ebx  +
and [eax+edx*4+44h] ebx +
dec byte ptr [esi]  +
jnz loc_1024AD1  +
mov ecx [ebp+arg_0] +
and [ecx] ebx +
jmp loc_1024AD1  +
lea ecx [esi-20h] +
shr ebx cl +
lea ecx [esi+eax+4] +
not ebx  +
and [eax+edx*4+0C4h] ebx +
dec byte ptr [ecx]  +
jnz loc_1024AD1  +
mov ecx [ebp+arg_0] +
and [ecx+4] ebx +
mov ebx [ebp+arg_4] +
mov ecx [edi+8] +
mov esi [edi+4] +
mov [ecx+4] esi +
mov esi [edi+8] +
mov ecx [edi+4] +
mov [ecx+8] esi +
mov esi [ebp+arg_8] +
add esi [ebp+var_4] +
mov [ebp+arg_8] esi +
sar esi 4 +
dec esi  +
cmp esi 3Fh +
jbe loc_1024AFB  +
push 3Fh  +
pop esi  +
mov ecx [ebp+var_C] +
lea ecx [ecx+esi*8] +
mov edi [ecx+4] +
mov [ebx+8] ecx +
mov [ebx+4] edi +
mov [ecx+4] ebx +
mov ecx [ebx+4] +
mov [ecx+8] ebx +
mov ecx [ebx+4] +
cmp ecx [ebx+8] +
jnz loc_1024B72  +
mov cl [esi+eax+4] +
mov byte ptr [ebp+arg_4+3] cl +
inc cl  +
mov [esi+eax+4] cl +
cmp esi 20h +
jnb loc_1024B49  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1024B41  +
mov ecx esi +
mov edi 80000000h +
shr edi cl +
mov ecx [ebp+arg_0] +
or [ecx] edi +
lea eax [eax+edx*4+44h] +
mov ecx esi +
jmp loc_1024B69  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1024B5F  +
lea ecx [esi-20h] +
mov edi 80000000h +
shr edi cl +
mov ecx [ebp+arg_0] +
or [ecx+4] edi +
lea eax [eax+edx*4+0C4h] +
lea ecx [esi-20h] +
mov edx 80000000h +
shr edx cl +
or [eax] edx +
mov eax [ebp+arg_8] +
mov [ebx] eax +
mov [eax+ebx-4] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1039324 +
mov ecx [ebp+arg_0] +
imul eax eax +
add eax lpMem +
add ecx 17h +
and ecx 0FFFFFFF0h +
mov [ebp+var_10] ecx +
sar ecx 4 +
push ebx  +
dec ecx  +
cmp ecx 20h +
push esi  +
push edi  +
jge loc_1024BC1  +
or esi 0FFFFFFFFh +
shr esi cl +
or [ebp+var_8] 0FFFFFFFFh +
jmp loc_1024BCE  +
add ecx 0FFFFFFE0h +
or edx 0FFFFFFFFh +
xor esi esi +
shr edx cl +
mov [ebp+var_8] edx +
mov ecx dword_1039330 +
mov ebx ecx +
jmp loc_1024BE9  +
mov edx [ebx+4] +
mov edi [ebx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1024BF0  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx eax +
jb loc_1024BD8  +
cmp ebx eax +
jnz loc_1024C73  +
mov ebx lpMem +
jmp loc_1024C0D  +
mov edx [ebx+4] +
mov edi [ebx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1024C14  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx ecx +
jb loc_1024BFC  +
cmp ebx ecx +
jnz loc_1024C73  +
jmp loc_1024C26  +
cmp dword ptr [ebx+8] 0 +
jnz loc_1024C2A  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx eax +
jb loc_1024C1A  +
cmp ebx eax +
jnz loc_1024C5F  +
mov ebx lpMem +
jmp loc_1024C3F  +
cmp dword ptr [ebx+8] 0 +
jnz loc_1024C46  +
add ebx 14h +
mov [ebp+arg_0] ebx +
cmp ebx ecx +
jb loc_1024C36  +
cmp ebx ecx +
jnz loc_1024C5F  +
call sub_10246E0  +
mov ebx eax +
mov [ebp+arg_0] ebx +
test ebx ebx +
jnz loc_1024C5F  +
xor eax eax +
jmp loc_1024E68  +
push ebx  +
call sub_1024795  +
pop ecx  +
mov ecx [ebx+10h] +
mov [ecx] eax +
mov eax [ebx+10h] +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_1024C58  +
mov dword_1039330 ebx +
mov eax [ebx+10h] +
mov edx [eax] +
mov [ebp+var_4] edx +
cmp edx 0FFFFFFFFh +
jz loc_1024C9A  +
mov ecx [eax+edx*4+0C4h] +
mov edi [eax+edx*4+44h] +
and ecx [ebp+var_8] +
and edi esi +
or ecx edi +
jnz loc_1024CC3  +
and [ebp+var_4] 0 +
mov edx [eax+0C4h] +
lea ecx [eax+44h] +
mov edi [ecx] +
and edx [ebp+var_8] +
and edi esi +
or edx edi +
jnz loc_1024CC0  +
inc [ebp+var_4]  +
mov edx [ecx+84h] +
add ecx 4 +
jmp loc_1024CA7  +
mov edx [ebp+var_4] +
mov ecx edx +
imul ecx ecx +
lea ecx [ecx+eax+144h] +
mov [ebp+var_C] ecx +
mov ecx [eax+edx*4+44h] +
xor edi edi +
and ecx esi +
jnz loc_1024CF1  +
mov ecx [eax+edx*4+0C4h] +
and ecx [ebp+var_8] +
push 20h  +
pop edi  +
jmp loc_1024CF1  +
add ecx ecx +
inc edi  +
test ecx ecx +
jge loc_1024CEE  +
mov ecx [ebp+var_C] +
mov edx [ecx+edi*8+4] +
mov ecx [edx] +
sub ecx [ebp+var_10] +
mov esi ecx +
sar esi 4 +
dec esi  +
cmp esi 3Fh +
mov [ebp+var_8] ecx +
jle loc_1024D12  +
push 3Fh  +
pop esi  +
cmp esi edi +
jz loc_1024E1B  +
mov ecx [edx+4] +
cmp ecx [edx+8] +
jnz loc_1024D7E  +
cmp edi 20h +
mov ebx 80000000h +
jge loc_1024D52  +
mov ecx edi +
shr ebx cl +
mov ecx [ebp+var_4] +
lea edi [eax+edi+4] +
not ebx  +
mov [ebp+var_14] ebx +
and ebx [eax+ecx*4+44h] +
mov [eax+ecx*4+44h] ebx +
dec byte ptr [edi]  +
jnz loc_1024D7B  +
mov ecx [ebp+var_14] +
mov ebx [ebp+arg_0] +
and [ebx] ecx +
jmp loc_1024D7E  +
lea ecx [edi-20h] +
shr ebx cl +
mov ecx [ebp+var_4] +
lea ecx [eax+ecx*4+0C4h] +
lea edi [eax+edi+4] +
not ebx  +
and [ecx] ebx +
dec byte ptr [edi]  +
mov [ebp+var_14] ebx +
jnz loc_1024D7B  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+var_14] +
and [ebx+4] ecx +
jmp loc_1024D7E  +
mov ebx [ebp+arg_0] +
cmp [ebp+var_8] 0 +
mov ecx [edx+8] +
mov edi [edx+4] +
mov [ecx+4] edi +
mov ecx [edx+4] +
mov edi [edx+8] +
mov [ecx+8] edi +
jz loc_1024E27  +
mov ecx [ebp+var_C] +
lea ecx [ecx+esi*8] +
mov edi [ecx+4] +
mov [edx+8] ecx +
mov [edx+4] edi +
mov [ecx+4] edx +
mov ecx [edx+4] +
mov [ecx+8] edx +
mov ecx [edx+4] +
cmp ecx [edx+8] +
jnz loc_1024E18  +
mov cl [esi+eax+4] +
mov byte ptr [ebp+arg_0+3] cl +
inc cl  +
cmp esi 20h +
mov [esi+eax+4] cl +
jge loc_1024DEF  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1024DDD  +
mov edi 80000000h +
mov ecx esi +
shr edi cl +
or [ebx] edi +
mov ecx esi +
mov edi 80000000h +
shr edi cl +
mov ecx [ebp+var_4] +
or [eax+ecx*4+44h] edi +
jmp loc_1024E18  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1024E02  +
lea ecx [esi-20h] +
mov edi 80000000h +
shr edi cl +
or [ebx+4] edi +
mov ecx [ebp+var_4] +
lea edi [eax+ecx*4+0C4h] +
lea ecx [esi-20h] +
mov esi 80000000h +
shr esi cl +
or [edi] esi +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_1024E2A  +
mov [edx] ecx +
mov [ecx+edx-4] ecx +
jmp loc_1024E2A  +
mov ecx [ebp+var_8] +
mov esi [ebp+var_10] +
add edx ecx +
lea ecx [esi+1] +
mov [edx] ecx +
mov [edx+esi-4] ecx +
mov esi [ebp+var_C] +
mov ecx [esi] +
lea edi [ecx+1] +
mov [esi] edi +
test ecx ecx +
jnz loc_1024E60  +
cmp ebx dword_1037E48 +
jnz loc_1024E60  +
mov ecx [ebp+var_4] +
cmp ecx dword_1039338 +
jnz loc_1024E60  +
and dword_1037E48 0 +
mov ecx [ebp+var_4] +
mov [eax] ecx +
lea eax [edx+4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
sub esp 8 +
mov [ebp+var_4] edi +
mov [ebp+var_8] esi +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
shr ecx 7 +
jmp loc_1024EF2  +
lea ebx [ebx+0] +
movdqa xmm0 oword ptr [esi] +
movdqa xmm1 oword ptr [esi+10h] +
movdqa xmm2 oword ptr [esi+20h] +
movdqa xmm3 oword ptr [esi+30h] +
movdqa oword ptr [edi] xmm0 +
movdqa oword ptr [edi+10h] xmm1 +
movdqa oword ptr [edi+20h] xmm2 +
movdqa oword ptr [edi+30h] xmm3 +
movdqa xmm4 oword ptr [esi+40h] +
movdqa xmm5 oword ptr [esi+50h] +
movdqa xmm6 oword ptr [esi+60h] +
movdqa xmm7 oword ptr [esi+70h] +
movdqa oword ptr [edi+40h] xmm4 +
movdqa oword ptr [edi+50h] xmm5 +
movdqa oword ptr [edi+60h] xmm6 +
movdqa oword ptr [edi+70h] xmm7 +
lea esi [esi+80h] +
lea edi [edi+80h] +
dec ecx  +
jnz loc_1024EF2  +
mov esi [ebp+var_8] +
mov edi [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov [ebp+var_C] edi +
mov [ebp+var_8] esi +
mov [ebp+var_4] ebx +
mov ebx [ebp+arg_4] +
mov eax ebx +
cdq   +
mov ecx eax +
mov eax [ebp+arg_0] +
xor ecx edx +
sub ecx edx +
and ecx 0Fh +
xor ecx edx +
sub ecx edx +
cdq   +
mov edi eax +
xor edi edx +
sub edi edx +
and edi 0Fh +
xor edi edx +
sub edi edx +
mov edx ecx +
or edx edi +
jnz loc_1024FE1  +
mov esi [ebp+arg_8] +
mov ecx esi +
and ecx 7Fh +
mov [ebp+var_18] ecx +
cmp esi ecx +
jz loc_1024FB9  +
sub esi ecx +
push esi  +
push ebx  +
push eax  +
call sub_1024ED2  +
add esp 0Ch +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_1025034  +
mov ebx [ebp+arg_8] +
mov edx [ebp+arg_4] +
add edx ebx +
sub edx ecx +
mov [ebp+var_14] edx +
add ebx eax +
sub ebx ecx +
mov [ebp+var_10] ebx +
mov esi [ebp+var_14] +
mov edi [ebp+var_10] +
mov ecx [ebp+var_18] +
movs   +
mov eax [ebp+arg_0] +
jmp loc_1025034  +
cmp ecx edi +
jnz loc_102501A  +
neg ecx  +
add ecx 10h +
mov [ebp+var_1C] ecx +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+var_1C] +
movs   +
mov ecx [ebp+arg_0] +
add ecx [ebp+var_1C] +
mov edx [ebp+arg_4] +
add edx [ebp+var_1C] +
mov eax [ebp+arg_8] +
sub eax [ebp+var_1C] +
push eax  +
push edx  +
push ecx  +
call sub_1024F5E  +
add esp 0Ch +
mov eax [ebp+arg_0] +
jmp loc_1025034  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov edx ecx +
shr ecx 2 +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
mov eax [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov esi [ebp+var_8] +
mov edi [ebp+var_C] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_101EB7F  +
mov dword ptr [esi] offset off_1008B68 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_101EC4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1008B68 +
call sub_101EC4D  +
test byte ptr [ebp+8] 1 +
jz loc_1025099  +
push esi  +
call sub_101E6A1  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101EBE0  +
mov dword ptr [esi] offset off_1008B68 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov edx [edi+4] +
test edx edx +
jz loc_1025139  +
lea ecx [edx+8] +
cmp byte ptr [ecx] 0 +
jz loc_1025139  +
mov esi [ebp+arg_4] +
mov eax [esi+4] +
cmp edx eax +
jz loc_1025118  +
add eax 8 +
mov dl [ecx] +
cmp dl [eax] +
jnz loc_102510B  +
test dl dl +
jz loc_1025107  +
mov dl [ecx+1] +
cmp dl [eax+1] +
jnz loc_102510B  +
inc ecx  +
inc ecx  +
inc eax  +
inc eax  +
test dl dl +
jnz loc_10250ED  +
xor eax eax +
jmp loc_1025110  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1025118  +
xor eax eax +
jmp loc_102513C  +
test byte ptr [esi] 2 +
jz loc_1025122  +
test byte ptr [edi] 8 +
jz loc_1025114  +
mov eax [ebp+arg_8] +
mov eax [eax] +
test al 1 +
jz loc_1025130  +
test byte ptr [edi] 1 +
jz loc_1025114  +
test al 2 +
jz loc_1025139  +
test byte ptr [edi] 2 +
jz loc_1025114  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0E0434F4Dh +
jz loc_1025170  +
cmp eax 0E06D7363h +
jnz loc_1025181  +
call sub_1021B55  +
and dword ptr [eax+90h] 0 +
jmp sub_1025DCF  +
***
call sub_1021B55  +
add eax 90h +
cmp dword ptr [eax] 0 +
jle loc_1025181  +
dec dword ptr [eax]  +
xor eax eax +
pop ebp  +
retn   +
***
call sub_1024E74  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_1025260  +
call sub_1021B55  +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
add eax 90h +
cmp dword ptr [eax] 0 +
jle locret_102526F  +
dec dword ptr [eax]  +
retn   +
***
call sub_1024E74  +
xor eax eax +
cmp [ebp+0Ch] al +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
push esi  +
mov esi [ebp+arg_0] +
add eax esi +
cmp dword ptr [ecx+4] 0 +
jl loc_102533F  +
mov edx [ecx+4] +
mov ecx [ecx+8] +
mov esi [edx+esi] +
mov ecx [esi+ecx] +
add ecx edx +
add eax ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
sub esp 1Ch +
test edx edx +
jnz loc_1025360  +
call loc_1025E25  +
call sub_1025DCF  +
mov ecx [edx] +
mov [ebp+var_1] 0 +
test ecx ecx +
jle loc_10253D5  +
mov eax [esi+1Ch] +
mov eax [eax+0Ch] +
and [ebp+var_10] 0 +
push ebx  +
push edi  +
lea edi [eax+4] +
mov eax [eax] +
mov [ebp+var_18] edi +
mov [ebp+var_1C] eax +
mov [ebp+var_14] ecx +
jmp loc_1025389  +
mov edx [ebp+arg_0] +
mov eax [ebp+var_18] +
mov [ebp+var_8] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_C] eax +
test eax eax +
jle loc_10253CA  +
mov eax [edx+4] +
mov ecx [ebp+var_10] +
mov edi [esi+1Ch] +
lea ebx [eax+ecx] +
mov eax [ebp+var_8] +
push edi  +
push dword ptr [eax]  +
push ebx  +
call sub_10250C7  +
add esp 0Ch +
test eax eax +
jnz loc_10253C6  +
dec [ebp+var_C]  +
add [ebp+var_8] 4 +
cmp [ebp+var_C] eax +
jg loc_10253A5  +
jmp loc_10253CA  +
mov [ebp+var_1] 1 +
add [ebp+var_10] 10h +
dec [ebp+var_14]  +
jnz loc_1025386  +
pop edi  +
pop ebx  +
mov al [ebp+var_1] +
leave   +
retn   +
***
push 8  +
mov eax offset loc_1033652 +
call sub_101F9FF  +
call sub_1021B55  +
cmp dword ptr [eax+94h] 0 +
mov [ebp-14h] eax +
jz loc_1025401  +
call loc_1025E25  +
and dword ptr [ebp-4] 0 +
call sub_1025E0D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1025DCF  +
mov eax [ebp-14h] +
test eax eax +
jnz loc_102541F  +
call sub_1021B55  +
mov ecx [ebp+8] +
push 0  +
push 0  +
mov [eax+94h] ecx +
call sub_101F49D  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_10250A5  +
push offset dword_10348C4  +
lea eax [ebp-0Ch] +
push eax  +
call sub_101F49D  +
call sub_1024E74  +
mov ebx [ebp+0Ch] +
mov edi [ebp+8] +
mov eax [ebp+18h] +
mov [ebp-24h] eax +
and dword ptr [ebp-38h] 0 +
mov eax [ebx-4] +
mov [ebp-28h] eax +
push dword ptr [edi+18h]  +
lea eax [ebp-40h] +
push eax  +
call sub_101F8B5  +
pop ecx  +
pop ecx  +
mov [ebp-2Ch] eax +
call sub_1021B55  +
mov esi eax +
mov [ebp-20h] esi +
lea eax [esi+88h] +
mov ecx [eax] +
mov [ebp-30h] ecx +
lea ecx [esi+8Ch] +
mov edx [ecx] +
mov [ebp-34h] edx +
mov [eax] edi +
mov eax [ebp+10h] +
mov [ecx] eax +
and dword ptr [ebp-4] 0 +
xor eax eax +
inc eax  +
mov [ebp+10h] eax +
mov [ebp-4] eax +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ebx  +
call sub_101F94D  +
add esp 14h +
mov [ebp-24h] eax +
and dword ptr [ebp-4] 0 +
jmp loc_1025567  +
mov edi [ebp+8] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp+10h] 0 +
call sub_1025591  +
mov eax [ebp-24h] +
call sub_1024EB9  +
retn   +
***
mov eax [ebp-28h] +
mov [ebx-4] eax +
push dword ptr [ebp-2Ch]  +
call sub_101F90A  +
pop ecx  +
test esi esi +
jnz loc_10255AE  +
call sub_1021B55  +
mov esi eax +
mov [ebp-20h] esi +
mov eax [ebp-30h] +
mov [esi+88h] eax +
mov eax [ebp-34h] +
mov [esi+8Ch] eax +
cmp dword ptr [edi] 0E06D7363h +
jnz locret_102560A  +
cmp dword ptr [edi+10h] 3 +
jnz locret_102560A  +
mov eax [edi+14h] +
cmp eax 19930520h +
jz loc_10255E6  +
cmp eax 19930521h +
jz loc_10255E6  +
cmp eax 19930522h +
jnz locret_102560A  +
cmp dword ptr [ebp-38h] 0 +
jnz locret_102560A  +
cmp dword ptr [ebp-24h] 0 +
jz locret_102560A  +
push dword ptr [edi+18h]  +
call sub_101F8DE  +
pop ecx  +
test eax eax +
jz locret_102560A  +
push dword ptr [ebp+10h]  +
push edi  +
call sub_10252BF  +
pop ecx  +
pop ecx  +
retn   +
***
call sub_1024E74  +
xor edx edx +
mov [ebp-1Ch] edx +
mov eax [ebp+10h] +
mov ecx [eax+4] +
cmp ecx edx +
jz loc_1025787  +
cmp [ecx+8] dl +
jz loc_1025787  +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_102564B  +
test dword ptr [eax] 80000000h +
jz loc_1025787  +
mov eax [eax] +
mov esi [ebp+0Ch] +
test eax eax +
js loc_1025658  +
lea esi [ecx+esi+0Ch] +
mov [ebp-4] edx +
xor ebx ebx +
inc ebx  +
push ebx  +
test al 8 +
jz loc_10256A4  +
mov edi [ebp+8] +
push dword ptr [edi+18h]  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
push ebx  +
push esi  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
mov eax [edi+18h] +
mov [esi] eax +
mov ecx [ebp+14h] +
add ecx 8 +
push ecx  +
push eax  +
call sub_1025319  +
pop ecx  +
pop ecx  +
mov [esi] eax +
jmp loc_102576F  +
mov edi [ebp+14h] +
mov eax [ebp+8] +
push dword ptr [eax+18h]  +
test [edi] bl +
jz loc_10256F9  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
push ebx  +
push esi  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
push dword ptr [edi+14h]  +
mov eax [ebp+8] +
push dword ptr [eax+18h]  +
push esi  +
call loc_1022410  +
add esp 0Ch +
cmp dword ptr [edi+14h] 4 +
jnz loc_102576F  +
mov eax [esi] +
test eax eax +
jz loc_102576F  +
add edi 8 +
push edi  +
jmp loc_1025695  +
cmp [edi+18h] edx +
jnz loc_1025736  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
push ebx  +
push esi  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
push dword ptr [edi+14h]  +
add edi 8 +
push edi  +
mov eax [ebp+8] +
push dword ptr [eax+18h]  +
call sub_1025319  +
pop ecx  +
pop ecx  +
push eax  +
push esi  +
call loc_1022410  +
add esp 0Ch +
jmp loc_102576F  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
push ebx  +
push esi  +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102576A  +
push dword ptr [edi+18h]  +
call sub_102B505  +
pop ecx  +
test eax eax +
jz loc_102576A  +
test byte ptr [edi] 4 +
push 0  +
pop eax  +
setnz al  +
inc eax  +
mov [ebp-1Ch] eax +
jmp loc_102576F  +
call loc_1025E25  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
jmp loc_1025789  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_1025DCF  +
xor eax eax +
call sub_1024EB9  +
retn   +
***
call sub_1024E74  +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_10] 0 +
jz loc_1025846  +
push [ebp+arg_10]  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
call sub_1025794  +
add esp 10h +
cmp [ebp+arg_18] 0 +
push [ebp+arg_0]  +
jnz loc_1025852  +
push esi  +
jmp loc_1025855  +
push [ebp+arg_18]  +
call sub_101F5D4  +
push dword ptr [edi]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
call sub_102518A  +
mov eax [edi+4] +
push 100h  +
push [ebp+arg_14]  +
inc eax  +
mov [esi+8] eax +
push dword ptr [ebx+0Ch]  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
push esi  +
push [ebp+arg_0]  +
call sub_102545C  +
add esp 2Ch +
test eax eax +
jz loc_1025897  +
push esi  +
push eax  +
call sub_101F558  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 80000003h +
jz loc_1025986  +
push edi  +
call sub_1021B55  +
lea edi [eax+80h] +
cmp dword ptr [edi] 0 +
jz loc_10258FA  +
call sub_10218B6  +
cmp [edi] eax +
jz loc_10258FA  +
cmp dword ptr [esi] 0E0434F4Dh +
jz loc_10258FA  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_101F6A1  +
add esp 1Ch +
test eax eax +
jnz loc_1025985  +
mov edi [ebp+arg_10] +
cmp dword ptr [edi+0Ch] 0 +
jnz loc_1025908  +
call loc_1025E25  +
mov esi [ebp+arg_14] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push [ebp+arg_18]  +
push edi  +
call sub_101F83B  +
mov edi eax +
mov eax [ebp+var_4] +
add esp 14h +
cmp eax [ebp+var_8] +
jnb loc_1025985  +
push ebx  +
cmp esi [edi] +
jl loc_1025976  +
cmp esi [edi+4] +
jg loc_1025976  +
mov eax [edi+0Ch] +
mov ecx [edi+10h] +
shl eax 4 +
add eax ecx +
mov ecx [eax-0Ch] +
test ecx ecx +
jz loc_102594C  +
cmp byte ptr [ecx+8] 0 +
jnz loc_1025976  +
lea ebx [eax-10h] +
test byte ptr [ebx] 40h +
jnz loc_1025976  +
push [ebp+arg_1C]  +
mov esi [ebp+arg_4] +
push [ebp+arg_18]  +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_102582B  +
mov esi [ebp+arg_14] +
add esp 1Ch +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add edi 14h +
cmp eax [ebp+var_8] +
jb loc_102592B  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
and [ebp+var_8] 0 +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov eax [edi+4] +
cmp eax 80h +
mov [ebp+var_1] 0 +
jg loc_10259B7  +
movsx ecx byte ptr [ecx+8] +
jmp loc_10259BA  +
mov ecx [ecx+8] +
cmp ecx 0FFFFFFFFh +
mov [ebp+var_C] ecx +
jl loc_10259C6  +
cmp ecx eax +
jl loc_10259CB  +
call loc_1025E25  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0E06D7363h +
jnz loc_1025C94  +
cmp dword ptr [esi+10h] 3 +
mov ebx 19930520h +
jnz loc_1025ADF  +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_1025A02  +
cmp eax 19930521h +
jz loc_1025A02  +
cmp eax 19930522h +
jnz loc_1025ADF  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_1025ADF  +
call sub_1021B55  +
mov edi eax +
mov esi [edi+88h] +
mov [ebp+var_8] edi +
test esi esi +
jz loc_1025CDA  +
mov eax [edi+8Ch] +
push 1  +
push esi  +
mov [ebp+arg_0] esi +
mov [ebp+arg_8] eax +
call sub_102B505  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1025A43  +
call loc_1025E25  +
cmp dword ptr [esi] 0E06D7363h +
jnz loc_1025A71  +
cmp dword ptr [esi+10h] 3 +
jnz loc_1025A71  +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_1025A66  +
cmp eax 19930521h +
jz loc_1025A66  +
cmp eax 19930522h +
jnz loc_1025A71  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_1025A71  +
call loc_1025E25  +
lea eax [edi+94h] +
mov edi [eax] +
test edi edi +
jz loc_1025ADC  +
and dword ptr [eax] 0 +
push edi  +
call sub_1025347  +
pop ecx  +
test al al +
jnz loc_1025ADC  +
xor ebx ebx +
xor esi esi +
cmp [edi] ebx +
jle loc_1025AB0  +
mov eax [edi+4] +
mov ecx [eax+ebx+4] +
push offset off_1036530  +
call sub_101F515  +
test eax eax +
jnz loc_1025AB5  +
inc esi  +
add ebx 10h +
cmp esi [edi] +
jl loc_1025A93  +
call sub_1025DCF  +
push 1  +
push [ebp+arg_0]  +
call sub_10252BF  +
pop ecx  +
pop ecx  +
push offset dword_1008B74  +
lea ecx [ebp+var_38] +
call sub_1025046  +
push offset dword_10348C4  +
lea eax [ebp+var_38] +
push eax  +
call sub_101F49D  +
mov edi [ebp+arg_10] +
cmp dword ptr [esi] 0E06D7363h +
jnz loc_1025C94  +
cmp dword ptr [esi+10h] 3 +
jnz loc_1025C94  +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_1025B0E  +
cmp eax 19930521h +
jz loc_1025B0E  +
cmp eax 19930522h +
jnz loc_1025C94  +
cmp dword ptr [edi+0Ch] 0 +
jbe loc_1025BE9  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_C]  +
push [ebp+arg_18]  +
push edi  +
call sub_101F83B  +
add esp 14h +
mov edi eax +
mov eax [ebp+var_14] +
cmp eax [ebp+var_24] +
jnb loc_1025BE6  +
mov eax [ebp+var_C] +
cmp [edi] eax +
jg loc_1025BDB  +
cmp eax [edi+4] +
jg loc_1025BDB  +
mov eax [edi+10h] +
mov [ebp+var_10] eax +
mov eax [edi+0Ch] +
mov [ebp+var_20] eax +
test eax eax +
jle loc_1025BDB  +
mov eax [esi+1Ch] +
mov eax [eax+0Ch] +
lea ecx [eax+4] +
mov eax [eax] +
mov [ebp+var_28] ecx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_28] +
mov [ebp+var_18] eax +
mov eax [ebp+var_2C] +
mov [ebp+var_1C] eax +
test eax eax +
jle loc_1025BA6  +
mov eax [ebp+var_18] +
push dword ptr [esi+1Ch]  +
mov ebx [eax] +
push ebx  +
push [ebp+var_10]  +
call sub_10250C7  +
add esp 0Ch +
test eax eax +
jnz loc_1025BB5  +
dec [ebp+var_1C]  +
add [ebp+var_18] 4 +
cmp [ebp+var_1C] eax +
jg loc_1025B82  +
dec [ebp+var_20]  +
add [ebp+var_10] 10h +
cmp [ebp+var_20] 0 +
jg loc_1025B72  +
jmp loc_1025BDB  +
push [ebp+arg_1C]  +
mov [ebp+var_1] 1 +
push [ebp+arg_18]  +
push ebx  +
push [ebp+arg_10]  +
mov ebx [ebp+var_10] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
mov esi [ebp+arg_4] +
call sub_102582B  +
mov esi [ebp+arg_0] +
add esp 1Ch +
inc [ebp+var_14]  +
add edi 14h +
jmp loc_1025B31  +
mov edi [ebp+arg_10] +
cmp [ebp+arg_14] 0 +
jz loc_1025BF9  +
push 1  +
push esi  +
call sub_10252BF  +
pop ecx  +
pop ecx  +
cmp [ebp+var_1] 0 +
jnz loc_1025CC0  +
mov eax [edi] +
and eax 1FFFFFFFh +
cmp eax 19930521h +
jb loc_1025CC0  +
mov eax [edi+1Ch] +
test eax eax +
jz loc_1025CC0  +
push eax  +
call sub_1025347  +
pop ecx  +
test al al +
jnz loc_1025CC0  +
cmp [ebp+var_8] 0 +
jnz loc_1025C55  +
call sub_1021B55  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1025C55  +
call sub_1021B55  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1025C55  +
call sub_1021B55  +
mov [ebp+var_8] eax +
cmp [ebp+arg_1C] 0 +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_8] +
mov [eax+88h] esi +
mov [eax+8Ch] ecx +
push esi  +
jnz loc_1025C73  +
push [ebp+arg_4]  +
jmp loc_1025C76  +
push [ebp+arg_1C]  +
call sub_101F5D4  +
push 0FFFFFFFFh  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call sub_102518A  +
add esp 10h +
push dword ptr [edi+1Ch]  +
call loc_10253DF  +
cmp dword ptr [edi+0Ch] 0 +
jbe loc_1025CC0  +
cmp [ebp+arg_14] 0 +
jnz loc_1025AB0  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+var_C]  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_102589E  +
add esp 20h +
mov eax [ebp+var_8] +
test eax eax +
jnz loc_1025CCC  +
call sub_1021B55  +
cmp dword ptr [eax+94h] 0 +
jz loc_1025CDA  +
call loc_1025E25  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
call sub_1021B55  +
cmp dword ptr [eax+20Ch] 0 +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov edi 0E06D7363h +
mov esi 1FFFFFFFh +
mov ebx 19930522h +
jnz loc_1025D2F  +
mov edx [ecx] +
cmp edx edi +
jz loc_1025D2F  +
cmp edx 80000026h +
jz loc_1025D2F  +
mov edx [eax] +
and edx esi +
cmp edx ebx +
jb loc_1025D2F  +
test byte ptr [eax+20h] 1 +
jnz loc_1025DC2  +
test byte ptr [ecx+4] 66h +
jz loc_1025D58  +
cmp dword ptr [eax+4] 0 +
jz loc_1025DC2  +
cmp [ebp+arg_14] 0 +
jnz loc_1025DC2  +
push 0FFFFFFFFh  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call sub_102518A  +
add esp 10h +
jmp loc_1025DC2  +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_1025D70  +
mov edx [eax] +
and edx esi +
cmp edx 19930521h +
jb loc_1025DC2  +
cmp dword ptr [eax+1Ch] 0 +
jz loc_1025DC2  +
cmp [ecx] edi +
jnz loc_1025DA6  +
cmp dword ptr [ecx+10h] 3 +
jb loc_1025DA6  +
cmp [ecx+14h] ebx +
jbe loc_1025DA6  +
mov edx [ecx+1Ch] +
mov edx [edx+8] +
test edx edx +
jz loc_1025DA6  +
movzx esi [ebp+arg_1C] +
push esi  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call edx  +
add esp 20h +
jmp loc_1025DC5  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push dword ptr [ebp+arg_1C]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call sub_102598E  +
add esp 20h +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1024E74  +
call sub_1021B55  +
mov eax [eax+78h] +
test eax eax +
jz loc_1025DFD  +
and dword ptr [ebp-4] 0 +
call eax  +
jmp loc_1025DF6  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call loc_102B51C  +
call sub_1024EB9  +
retn   +
***
call sub_1021B55  +
mov eax [eax+7Ch] +
test eax eax +
jz loc_1025E1B  +
call eax  +
jmp sub_1025DCF  +
***
push 8  +
push offset dword_1034988  +
call sub_1024E74  +
push dword_1037E4C  +
call sub_10218C4  +
pop ecx  +
test eax eax +
jz loc_1025E57  +
and dword ptr [ebp-4] 0 +
call eax  +
jmp loc_1025E50  +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1025DCF  +
pop ecx  +
mov dword_1037E4C eax +
retn   +
***
sub esp 4 +
push ebx  +
push ecx  +
mov eax [ebp+arg_4] +
add eax 0Ch +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebp  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_8] +
mov ebp [ebp+var_4] +
call sub_102B744  +
push esi  +
push edi  +
call eax  +
pop edi  +
pop esi  +
mov ebx ebp +
pop ebp  +
mov ecx [ebp+arg_8] +
push ebp  +
mov ebp ebx +
cmp ecx 100h +
jnz loc_1025EBF  +
mov ecx 2 +
push ecx  +
call sub_102B744  +
pop ebp  +
pop ecx  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1037F50 eax +
mov dword_1037F4C ecx +
mov dword_1037F48 edx +
mov dword_1037F44 ebx +
mov dword_1037F40 esi +
mov dword_1037F3C edi +
mov word_1037F68 ss +
mov word_1037F5C cs +
mov word_1037F38 ds +
mov word_1037F34 es +
mov word_1037F30 fs +
mov word_1037F2C gs +
pushf   +
pop dword_1037F60  +
mov eax [ebp+0] +
mov dword_1037F54 eax +
mov eax [ebp+4] +
mov dword_1037F58 eax +
lea eax [ebp+8] +
mov dword_1037F64 eax +
mov eax [ebp-320h] +
mov dword_1037EA0 10001h +
mov eax dword_1037F58 +
mov dword_1037E5C eax +
mov dword_1037E50 0C0000409h +
mov dword_1037E54 1 +
mov eax dword_1036118 +
mov [ebp-328h] eax +
mov eax dword_103611C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call sub_1029995  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_1025FE9  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1026102  +
test al 40h +
jz loc_1025FFA  +
call sub_10223A9  +
mov dword ptr [eax] 22h +
jmp loc_1025FDD  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_1026013  +
mov [esi+4] ebx +
test al 10h +
jz loc_102607F  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
test eax 10Ch +
jnz loc_102604D  +
cmp esi offset unk_1036BB8 +
jz loc_1026039  +
cmp esi offset unk_1036BD8 +
jnz loc_1026046  +
push [ebp+arg_4]  +
call sub_102C132  +
pop ecx  +
test eax eax +
jnz loc_102604D  +
push esi  +
call sub_102C0DE  +
pop ecx  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_10260D6  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_102608A  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call sub_102BFFD  +
add esp 0Ch +
mov ebx eax +
jmp loc_10260CC  +
or eax 20h +
mov [esi+0Ch] eax +
or eax 0FFFFFFFFh +
jmp loc_1026101  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_10260AB  +
cmp eax 0FFFFFFFEh +
jz loc_10260AB  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax dword_1039360[ecx*4] +
jmp loc_10260B0  +
mov eax offset unk_1036268 +
test byte ptr [eax+4] 20h +
jz loc_10260CC  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call sub_102B7FE  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_10260EF  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_10260EB  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call sub_102BFFD  +
add esp 0Ch +
mov ebx eax +
cmp ebx edi +
jz loc_10260F8  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1026100  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
test byte ptr [ecx+0Ch] 40h +
jz loc_1026116  +
cmp dword ptr [ecx+8] 0 +
jz loc_102613A  +
dec dword ptr [ecx+4]  +
js loc_1026126  +
mov edx [ecx] +
mov [edx] al +
inc dword ptr [ecx]  +
movzx eax al +
jmp loc_1026132  +
movsx eax al +
push ecx  +
push eax  +
call sub_1025FB8  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102613A  +
or [esi] eax +
retn   +
inc dword ptr [esi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_102615F  +
mov ecx [ebp+arg_8] +
mov al [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_102610A  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_1026165  +
cmp [ebp+arg_4] 0 +
jg loc_102614C  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [edi+0Ch] 40h +
push ebx  +
push esi  +
mov esi eax +
mov ebx ecx +
jz loc_10261B0  +
cmp dword ptr [edi+8] 0 +
jnz loc_10261B0  +
mov eax [ebp+arg_0] +
add [esi] eax +
jmp loc_10261B6  +
mov al [ebx] +
dec [ebp+arg_0]  +
mov ecx edi +
call sub_102610A  +
inc ebx  +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_10261B0  +
call sub_10223A9  +
cmp dword ptr [eax] 2Ah +
jnz loc_10261B6  +
mov ecx edi +
mov al 3Fh +
call sub_102610A  +
cmp [ebp+arg_0] 0 +
jg loc_102618B  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 278h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
push [ebp+arg_8]  +
lea ecx [ebp+var_24C] +
mov [ebp+var_25C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_224] edi +
mov [ebp+var_258] eax +
mov [ebp+var_210] eax +
mov [ebp+var_238] eax +
mov [ebp+var_218] eax +
mov [ebp+var_234] eax +
mov [ebp+var_260] eax +
mov [ebp+var_250] eax +
mov [ebp+var_23C] eax +
call sub_101FCB3  +
test ebx ebx +
jnz loc_102626B  +
call sub_10223A9  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_240] 0 +
jz loc_1026263  +
mov eax [ebp+var_244] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_1026DCB  +
test byte ptr [ebx+0Ch] 40h +
jnz loc_1026313  +
push ebx  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10262B5  +
push ebx  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_10262B5  +
push ebx  +
call sub_1029995  +
sar eax 5 +
push ebx  +
lea esi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [esi] +
mov esi [ebp+var_230] +
pop ecx  +
pop ecx  +
jmp loc_10262BA  +
mov eax offset unk_1036268 +
test byte ptr [eax+8] 3 +
jnz loc_1026236  +
push ebx  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1026304  +
push ebx  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_1026304  +
push ebx  +
call sub_1029995  +
sar eax 5 +
push ebx  +
lea esi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [esi] +
mov esi [ebp+var_230] +
pop ecx  +
pop ecx  +
jmp loc_1026309  +
mov eax offset unk_1036268 +
test byte ptr [eax+8] 8 +
jnz loc_1026236  +
test esi esi +
jz loc_1026236  +
mov cl [esi] +
xor edx edx +
mov [ebp+var_228] edx +
mov [ebp+var_220] edx +
mov [ebp+var_254] edx +
mov [ebp+var_211] cl +
test cl cl +
jz loc_1026DB2  +
inc esi  +
cmp [ebp+var_228] 0 +
mov [ebp+var_230] esi +
jl loc_1026DB2  +
mov al cl +
sub al 20h +
cmp al 58h +
ja loc_102636A  +
movsx eax cl +
movsx eax byte ptr ds:ExceptionInfo.ContextRecord[eax] +
and eax 0Fh +
jmp loc_102636C  +
xor eax eax +
movsx eax ds:byte_1008BA8[edx+eax*8] +
push 7  +
sar eax 4 +
pop edx  +
mov [ebp+var_270] eax +
cmp eax edx +
ja loc_1026D72  +
jmp ds:off_1026DDB[eax*4]  +
xor eax eax +
or [ebp+var_218] 0FFFFFFFFh +
mov [ebp+var_260] eax +
mov [ebp+var_250] eax +
mov [ebp+var_238] eax +
mov [ebp+var_234] eax +
mov [ebp+var_210] eax +
mov [ebp+var_23C] eax +
jmp loc_1026D72  +
movsx eax cl +
sub eax 20h +
jz loc_1026413  +
sub eax 3 +
jz loc_1026404  +
sub eax 8 +
jz loc_10263F8  +
dec eax  +
dec eax  +
jz loc_10263EC  +
sub eax 3 +
jnz loc_1026D72  +
or [ebp+var_210] 8 +
jmp loc_1026D72  +
or [ebp+var_210] 4 +
jmp loc_1026D72  +
or [ebp+var_210] 1 +
jmp loc_1026D72  +
or [ebp+var_210] 80h +
jmp loc_1026D72  +
or [ebp+var_210] 2 +
jmp loc_1026D72  +
cmp cl 2Ah +
jnz loc_1026450  +
add edi 4 +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_238] edi +
test edi edi +
jge loc_1026D72  +
or [ebp+var_210] 4 +
neg [ebp+var_238]  +
jmp loc_1026D72  +
mov eax [ebp+var_238] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_238] eax +
jmp loc_1026D72  +
and [ebp+var_218] 0 +
jmp loc_1026D72  +
cmp cl 2Ah +
jnz loc_10264A2  +
add edi 4 +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_218] edi +
test edi edi +
jge loc_1026D72  +
or [ebp+var_218] 0FFFFFFFFh +
jmp loc_1026D72  +
mov eax [ebp+var_218] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_218] eax +
jmp loc_1026D72  +
cmp cl 49h +
jz loc_1026517  +
cmp cl 68h +
jz loc_102650B  +
cmp cl 6Ch +
jz loc_10264E4  +
cmp cl 77h +
jnz loc_1026D72  +
or [ebp+var_210] 800h +
jmp loc_1026D72  +
cmp byte ptr [esi] 6Ch +
jnz loc_10264FF  +
inc esi  +
or [ebp+var_210] 1000h +
mov [ebp+var_230] esi +
jmp loc_1026D72  +
or [ebp+var_210] 10h +
jmp loc_1026D72  +
or [ebp+var_210] 20h +
jmp loc_1026D72  +
mov al [esi] +
cmp al 36h +
jnz loc_102653A  +
cmp byte ptr [esi+1] 34h +
jnz loc_102653A  +
inc esi  +
inc esi  +
or [ebp+var_210] 8000h +
mov [ebp+var_230] esi +
jmp loc_1026D72  +
cmp al 33h +
jnz loc_102655B  +
cmp byte ptr [esi+1] 32h +
jnz loc_102655B  +
inc esi  +
inc esi  +
and [ebp+var_210] 0FFFF7FFFh +
mov [ebp+var_230] esi +
jmp loc_1026D72  +
cmp al 64h +
jz loc_1026D72  +
cmp al 69h +
jz loc_1026D72  +
cmp al 6Fh +
jz loc_1026D72  +
cmp al 75h +
jz loc_1026D72  +
cmp al 78h +
jz loc_1026D72  +
cmp al 58h +
jz loc_1026D72  +
and [ebp+var_270] 0 +
and [ebp+var_23C] 0 +
lea eax [ebp+var_24C] +
push eax  +
movzx eax cl +
push eax  +
call sub_101FD59  +
pop ecx  +
test eax eax +
mov al [ebp+var_211] +
pop ecx  +
jz loc_10265D8  +
lea esi [ebp+var_228] +
mov ecx ebx +
call sub_102610A  +
mov eax [ebp+var_230] +
mov al [eax] +
inc [ebp+var_230]  +
test al al +
jz loc_1026236  +
lea esi [ebp+var_228] +
mov ecx ebx +
call sub_102610A  +
jmp loc_1026D72  +
movsx eax cl +
cmp eax 64h +
jg loc_102680D  +
jz loc_10268A4  +
cmp eax 53h +
jg loc_10266F8  +
jz loc_102668C  +
sub eax 41h +
jz loc_1026620  +
dec eax  +
dec eax  +
jz loc_102666D  +
dec eax  +
dec eax  +
jz loc_1026620  +
dec eax  +
dec eax  +
jnz loc_1026BED  +
add cl 20h +
mov [ebp+var_260] 1 +
mov [ebp+var_211] cl +
or [ebp+var_210] 40h +
cmp [ebp+var_218] 0 +
lea eax [ebp+UsedDefaultChar] +
mov [ebp+var_21C] eax +
mov eax 200h +
mov [ebp+var_264] eax +
jge loc_10268D4  +
mov [ebp+var_218] 6 +
jmp loc_1026939  +
test [ebp+var_210] 830h +
jnz loc_1026715  +
or [ebp+var_210] 800h +
jmp loc_1026715  +
test [ebp+var_210] 830h +
jnz loc_10266A2  +
or [ebp+var_210] 800h +
mov edx [ebp+var_218] +
cmp edx 0FFFFFFFFh +
jnz loc_10266B2  +
mov edx 7FFFFFFFh +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_21C] edi +
jz loc_1026BBF  +
test edi edi +
jnz loc_10266E3  +
mov eax off_1036554 +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
mov [ebp+var_23C] 1 +
jmp loc_1026BB1  +
sub eax 58h +
jz loc_1026A14  +
dec eax  +
dec eax  +
jz loc_102677E  +
sub eax edx +
jz loc_1026633  +
dec eax  +
dec eax  +
jnz loc_1026BED  +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
jz loc_102675A  +
movzx eax word ptr [edi-4] +
push eax  +
push 200h  +
lea eax [ebp+UsedDefaultChar] +
push eax  +
lea eax [ebp+var_220] +
push eax  +
call sub_102B1C5  +
add esp 10h +
test eax eax +
jz loc_102676D  +
mov [ebp+var_250] 1 +
jmp loc_102676D  +
mov al [edi-4] +
mov byte ptr [ebp+UsedDefaultChar] al +
mov [ebp+var_220] 1 +
lea eax [ebp+UsedDefaultChar] +
mov [ebp+var_21C] eax +
jmp loc_1026BED  +
mov eax [edi] +
add edi 4 +
mov [ebp+var_224] edi +
test eax eax +
jz loc_10267F1  +
mov esi [eax+4] +
xor edi edi +
cmp esi edi +
jz loc_10267F1  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_1026D9D  +
test [ebp+var_210] 800h +
movzx eax cx +
jz loc_10267E0  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_1026D9D  +
mov edx esi +
not edx  +
test dl cl +
jz loc_1026D9D  +
mov [ebp+var_21C] esi +
shr eax 1 +
mov [ebp+var_23C] ecx +
jmp loc_1026BE7  +
mov [ebp+var_23C] edi +
mov [ebp+var_21C] esi +
jmp loc_1026BE7  +
mov eax off_1036550 +
mov [ebp+var_21C] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10267FF  +
sub eax edx +
jmp loc_1026BE7  +
cmp eax 70h +
jg loc_1026A1C  +
jz loc_1026A0A  +
cmp eax 65h +
jl loc_1026BED  +
cmp eax 67h +
jle loc_1026633  +
cmp eax 69h +
jz loc_10268A4  +
cmp eax 6Eh +
jz loc_1026860  +
cmp eax 6Fh +
jnz loc_1026BED  +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 8 +
jz loc_10268B5  +
or [ebp+var_210] 200h +
jmp loc_10268B5  +
mov esi [edi] +
add edi 4 +
mov [ebp+var_224] edi +
call sub_102C19B  +
test eax eax +
jz loc_1026236  +
test byte ptr [ebp+var_210] 20h +
jz loc_102688D  +
mov ax word ptr [ebp+var_228] +
mov [esi] ax +
jmp loc_1026895  +
mov eax [ebp+var_228] +
mov [esi] eax +
mov [ebp+var_250] 1 +
jmp loc_1026D56  +
or [ebp+var_210] 40h +
mov [ebp+var_220] 0Ah +
mov ecx [ebp+var_210] +
test ecx 8000h +
jz loc_1026A7B  +
mov eax [edi] +
mov edx [edi+4] +
add edi 8 +
jmp loc_1026AB4  +
jnz loc_10268E7  +
cmp cl 67h +
jnz loc_1026939  +
mov [ebp+var_218] 1 +
jmp loc_1026939  +
cmp [ebp+var_218] eax +
jle loc_10268F5  +
mov [ebp+var_218] eax +
mov ebx 0A3h +
cmp [ebp+var_218] ebx +
jle loc_1026939  +
mov esi [ebp+var_218] +
add esi 15Dh +
push esi  +
call sub_1020842  +
pop ecx  +
mov cl [ebp+var_211] +
mov [ebp+var_254] eax +
test eax eax +
jz loc_1026933  +
mov [ebp+var_21C] eax +
mov [ebp+var_264] esi +
jmp loc_1026939  +
mov [ebp+var_218] ebx +
mov eax [edi] +
add edi 8 +
mov [ebp+var_278] eax +
mov eax [edi-4] +
mov [ebp+var_274] eax +
lea eax [ebp+var_24C] +
push eax  +
push [ebp+var_260]  +
movsx eax cl +
push [ebp+var_218]  +
mov [ebp+var_224] edi +
mov edi [ebp+var_21C] +
push eax  +
push [ebp+var_264]  +
lea eax [ebp+var_278] +
push edi  +
push eax  +
push off_1036B88  +
call sub_10218C4  +
pop ecx  +
call eax  +
mov esi [ebp+var_210] +
add esp 1Ch +
and esi 80h +
jz loc_10269BE  +
cmp [ebp+var_218] 0 +
jnz loc_10269BE  +
lea eax [ebp+var_24C] +
push eax  +
push edi  +
push off_1036B94  +
call sub_10218C4  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp [ebp+var_211] 67h +
jnz loc_10269E3  +
test esi esi +
jnz loc_10269E3  +
lea eax [ebp+var_24C] +
push eax  +
push edi  +
push off_1036B90  +
call sub_10218C4  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp byte ptr [edi] 2Dh +
jnz loc_10269F9  +
or [ebp+var_210] 100h +
inc edi  +
mov [ebp+var_21C] edi +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10269FE  +
jmp loc_1026806  +
mov [ebp+var_218] 8 +
mov [ebp+var_258] edx +
jmp loc_1026A40  +
sub eax 73h +
jz loc_10266A2  +
dec eax  +
dec eax  +
jz loc_10268AB  +
sub eax 3 +
jnz loc_1026BED  +
mov [ebp+var_258] 27h +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 10h +
jz loc_10268B5  +
mov al byte ptr [ebp+var_258] +
add al 51h +
mov byte ptr [ebp+var_22C] 30h +
mov byte ptr [ebp+var_22C+1] al +
mov [ebp+var_234] 2 +
jmp loc_10268B5  +
test ecx 1000h +
jnz loc_10268C7  +
add edi 4 +
test cl 20h +
jz loc_1026AA7  +
mov [ebp+var_224] edi +
test cl 40h +
jz loc_1026AA0  +
movsx eax word ptr [edi-4] +
jmp loc_1026AA4  +
movzx eax word ptr [edi-4] +
cdq   +
jmp loc_1026ABA  +
mov eax [edi-4] +
test cl 40h +
jz loc_1026AB2  +
cdq   +
jmp loc_1026AB4  +
xor edx edx +
mov [ebp+var_224] edi +
test cl 40h +
jz loc_1026ADA  +
test edx edx +
jg loc_1026ADA  +
jl loc_1026AC9  +
test eax eax +
jnb loc_1026ADA  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_210] 100h +
test [ebp+var_210] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_1026AEC  +
xor ebx ebx +
cmp [ebp+var_218] 0 +
jge loc_1026B01  +
mov [ebp+var_218] 1 +
jmp loc_1026B1B  +
and [ebp+var_210] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_218] eax +
jle loc_1026B1B  +
mov [ebp+var_218] eax +
mov eax edi +
or eax ebx +
jnz loc_1026B27  +
and [ebp+var_234] eax +
lea esi [ebp+var_D] +
mov eax [ebp+var_218] +
dec [ebp+var_218]  +
test eax eax +
jg loc_1026B40  +
mov eax edi +
or eax ebx +
jz loc_1026B6D  +
mov eax [ebp+var_220] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_102AB20  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_264] ebx +
mov edi eax +
mov ebx edx +
jle loc_1026B68  +
add ecx [ebp+var_258] +
mov [esi] cl +
dec esi  +
jmp loc_1026B2A  +
lea eax [ebp+var_D] +
sub eax esi +
inc esi  +
test [ebp+var_210] 200h +
mov [ebp+var_220] eax +
mov [ebp+var_21C] esi +
jz loc_1026BED  +
test eax eax +
jz loc_1026B96  +
mov ecx esi +
cmp byte ptr [ecx] 30h +
jz loc_1026BED  +
dec [ebp+var_21C]  +
mov ecx [ebp+var_21C] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_1026BE7  +
dec edx  +
cmp word ptr [eax] 0 +
jz loc_1026BB5  +
inc eax  +
inc eax  +
test edx edx +
jnz loc_1026BA8  +
sub eax [ebp+var_21C] +
sar eax 1 +
jmp loc_1026BE7  +
test edi edi +
jnz loc_1026BCE  +
mov eax off_1036550 +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
jmp loc_1026BDD  +
dec edx  +
cmp byte ptr [eax] 0 +
jz loc_1026BE1  +
inc eax  +
test edx edx +
jnz loc_1026BD6  +
sub eax [ebp+var_21C] +
mov [ebp+var_220] eax +
cmp [ebp+var_250] 0 +
jnz loc_1026D56  +
mov eax [ebp+var_210] +
test al 40h +
jz loc_1026C36  +
test eax 100h +
jz loc_1026C14  +
mov byte ptr [ebp+var_22C] 2Dh +
jmp loc_1026C2C  +
test al 1 +
jz loc_1026C21  +
mov byte ptr [ebp+var_22C] 2Bh +
jmp loc_1026C2C  +
test al 2 +
jz loc_1026C36  +
mov byte ptr [ebp+var_22C] 20h +
mov [ebp+var_234] 1 +
mov ebx [ebp+var_238] +
sub ebx [ebp+var_220] +
sub ebx [ebp+var_234] +
test byte ptr [ebp+var_210] 0Ch +
jnz loc_1026C68  +
push [ebp+var_25C]  +
lea eax [ebp+var_228] +
push ebx  +
push 20h  +
call sub_1026142  +
add esp 0Ch +
push [ebp+var_234]  +
mov edi [ebp+var_25C] +
lea eax [ebp+var_228] +
lea ecx [ebp+var_22C] +
call sub_102616D  +
test byte ptr [ebp+var_210] 8 +
pop ecx  +
jz loc_1026CAA  +
test byte ptr [ebp+var_210] 4 +
jnz loc_1026CAA  +
push edi  +
push ebx  +
push 30h  +
lea eax [ebp+var_228] +
call sub_1026142  +
add esp 0Ch +
cmp [ebp+var_23C] 0 +
mov eax [ebp+var_220] +
jz loc_1026D1F  +
test eax eax +
jle loc_1026D1F  +
mov esi [ebp+var_21C] +
mov [ebp+var_264] eax +
movzx eax word ptr [esi] +
dec [ebp+var_264]  +
push eax  +
push 6  +
lea eax [ebp+var_D+1] +
push eax  +
lea eax [ebp+var_26C] +
inc esi  +
push eax  +
inc esi  +
call sub_102B1C5  +
add esp 10h +
test eax eax +
jnz loc_1026D16  +
cmp [ebp+var_26C] eax +
jz loc_1026D16  +
push [ebp+var_26C]  +
lea eax [ebp+var_228] +
lea ecx [ebp+var_D+1] +
call sub_102616D  +
cmp [ebp+var_264] 0 +
pop ecx  +
jnz loc_1026CC9  +
jmp loc_1026D32  +
or [ebp+var_228] 0FFFFFFFFh +
jmp loc_1026D32  +
mov ecx [ebp+var_21C] +
push eax  +
lea eax [ebp+var_228] +
call sub_102616D  +
pop ecx  +
cmp [ebp+var_228] 0 +
jl loc_1026D56  +
test byte ptr [ebp+var_210] 4 +
jz loc_1026D56  +
push edi  +
push ebx  +
push 20h  +
lea eax [ebp+var_228] +
call sub_1026142  +
add esp 0Ch +
cmp [ebp+var_254] 0 +
jz loc_1026D72  +
push [ebp+var_254]  +
call sub_101F40A  +
and [ebp+var_254] 0 +
pop ecx  +
mov esi [ebp+var_230] +
mov al [esi] +
mov [ebp+var_211] al +
test al al +
jz loc_1026DB2  +
mov edx [ebp+var_270] +
mov ebx [ebp+var_25C] +
mov edi [ebp+var_224] +
mov cl al +
jmp loc_102633F  +
call sub_10223A9  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
push edi  +
jmp loc_1026248  +
cmp [ebp+var_240] 0 +
jz loc_1026DC5  +
mov eax [ebp+var_244] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_228] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [esi+0Ch] 40h +
jz loc_1026E11  +
cmp dword ptr [esi+8] 0 +
jz loc_1026E36  +
push esi  +
push [ebp+arg_0]  +
call sub_10293DE  +
pop ecx  +
pop ecx  +
mov ecx 0FFFFh +
cmp ax cx +
jnz loc_1026E36  +
push esi  +
call sub_102C1B6  +
pop ecx  +
test eax eax +
jz loc_1026E36  +
or dword ptr [edi] 0FFFFFFFFh +
pop ebp  +
retn   +
inc dword ptr [edi]  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_1026E69  +
push esi  +
push [ebp+arg_0]  +
mov esi [ebp+arg_8] +
dec [ebp+arg_4]  +
call sub_1026E00  +
cmp dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jz loc_1026E68  +
cmp [ebp+arg_4] 0 +
jg loc_1026E4E  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
test byte ptr [esi+0Ch] 40h +
push edi  +
mov edi eax +
mov ebx edx +
jz loc_1026EB8  +
cmp dword ptr [esi+8] 0 +
jnz loc_1026EB8  +
mov eax [ebp+arg_0] +
add [edi] eax +
jmp loc_1026EBE  +
movzx eax word ptr [ebx] +
dec [ebp+arg_0]  +
push eax  +
call sub_1026E00  +
inc ebx  +
inc ebx  +
cmp dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jnz loc_1026EB8  +
call sub_10223A9  +
cmp dword ptr [eax] 2Ah +
jnz loc_1026EBE  +
push 3Fh  +
call sub_1026E00  +
pop ecx  +
cmp [ebp+arg_0] 0 +
jg loc_1026E92  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 478h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
xor esi esi +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_44C] +
mov [ebp+var_424] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_458] esi +
mov [ebp+var_408] esi +
mov [ebp+var_42C] esi +
mov [ebp+var_40C] esi +
mov [ebp+var_428] esi +
mov [ebp+var_460] esi +
mov [ebp+var_45C] esi +
mov [ebp+var_430] esi +
call sub_101FCB3  +
cmp [ebp+var_424] esi +
jnz loc_1026F70  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
push esi  +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_440] 0 +
jz loc_1026F68  +
mov eax [ebp+var_444] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_1027A91  +
cmp edi esi +
jz loc_1026F3D  +
movzx edx word ptr [edi] +
xor ecx ecx +
mov [ebp+var_41C] esi +
mov [ebp+var_420] esi +
mov [ebp+var_454] esi +
mov [ebp+var_414] edx +
cmp dx si +
jz loc_1027A78  +
push 2  +
pop esi  +
add edi esi +
cmp [ebp+var_41C] 0 +
mov [ebp+var_450] edi +
jl loc_1027A78  +
lea eax [edx-20h] +
cmp ax 58h +
ja loc_1026FCA  +
movzx eax dx +
movsx eax byte ptr ds:ExceptionInfo.ContextRecord[eax] +
and eax 0Fh +
jmp loc_1026FCC  +
xor eax eax +
movsx eax ds:byte_1008BA8[ecx+eax*8] +
push 7  +
sar eax 4 +
pop ecx  +
mov [ebp+var_468] eax +
cmp eax ecx +
ja loc_1027A3A  +
jmp ds:off_1027AA0[eax*4]  +
xor eax eax +
or [ebp+var_40C] 0FFFFFFFFh +
mov [ebp+var_460] eax +
mov [ebp+var_45C] eax +
mov [ebp+var_42C] eax +
mov [ebp+var_428] eax +
mov [ebp+var_408] eax +
mov [ebp+var_430] eax +
jmp loc_1027A3A  +
movzx eax dx +
sub eax 20h +
jz loc_1027073  +
sub eax 3 +
jz loc_1027064  +
sub eax 8 +
jz loc_1027058  +
sub eax esi +
jz loc_102704C  +
sub eax 3 +
jnz loc_1027A3A  +
or [ebp+var_408] 8 +
jmp loc_1027A3A  +
or [ebp+var_408] 4 +
jmp loc_1027A3A  +
or [ebp+var_408] 1 +
jmp loc_1027A3A  +
or [ebp+var_408] 80h +
jmp loc_1027A3A  +
or [ebp+var_408] esi +
jmp loc_1027A3A  +
cmp dx 2Ah +
jnz loc_10270B0  +
add ebx 4 +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_42C] ebx +
test ebx ebx +
jge loc_1027A3A  +
or [ebp+var_408] 4 +
neg [ebp+var_42C]  +
jmp loc_1027A3A  +
mov eax [ebp+var_42C] +
imul eax eax +
movzx ecx dx +
lea eax [eax+ecx-30h] +
mov [ebp+var_42C] eax +
jmp loc_1027A3A  +
and [ebp+var_40C] 0 +
jmp loc_1027A3A  +
cmp dx 2Ah +
jnz loc_1027103  +
add ebx 4 +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_40C] ebx +
test ebx ebx +
jge loc_1027A3A  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_1027A3A  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx dx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_1027A3A  +
movzx eax dx +
cmp eax 49h +
jz loc_102717D  +
cmp eax 68h +
jz loc_1027171  +
cmp eax 6Ch +
jz loc_1027148  +
cmp eax 77h +
jnz loc_1027A3A  +
or [ebp+var_408] 800h +
jmp loc_1027A3A  +
cmp word ptr [edi] 6Ch +
jnz loc_1027165  +
add edi esi +
or [ebp+var_408] 1000h +
mov [ebp+var_450] edi +
jmp loc_1027A3A  +
or [ebp+var_408] 10h +
jmp loc_1027A3A  +
or [ebp+var_408] 20h +
jmp loc_1027A3A  +
movzx eax word ptr [edi] +
cmp ax 36h +
jnz loc_10271A5  +
cmp word ptr [edi+2] 34h +
jnz loc_10271A5  +
add edi 4 +
or [ebp+var_408] 8000h +
mov [ebp+var_450] edi +
jmp loc_1027A3A  +
cmp ax 33h +
jnz loc_10271CA  +
cmp word ptr [edi+2] 32h +
jnz loc_10271CA  +
add edi 4 +
and [ebp+var_408] 0FFFF7FFFh +
mov [ebp+var_450] edi +
jmp loc_1027A3A  +
cmp ax 64h +
jz loc_1027A3A  +
cmp ax 69h +
jz loc_1027A3A  +
cmp ax 6Fh +
jz loc_1027A3A  +
cmp ax 75h +
jz loc_1027A3A  +
cmp ax 78h +
jz loc_1027A3A  +
cmp ax 58h +
jz loc_1027A3A  +
and [ebp+var_468] 0 +
mov esi [ebp+var_424] +
push edx  +
lea edi [ebp+var_41C] +
mov [ebp+var_430] 1 +
call sub_1026E00  +
jmp loc_1027A39  +
movzx eax dx +
cmp eax 64h +
jg loc_1027497  +
jz loc_102752E  +
cmp eax 53h +
jg loc_1027364  +
jz loc_10272C9  +
sub eax 41h +
jz loc_1027260  +
sub eax esi +
jz loc_10272AD  +
sub eax esi +
jz loc_1027260  +
sub eax esi +
jnz loc_1027888  +
add edx 20h +
mov [ebp+var_460] 1 +
mov [ebp+var_414] edx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] 0 +
lea edi [ebp+WideCharStr] +
mov eax 200h +
mov [ebp+var_410] edi +
mov [ebp+var_434] eax +
jge loc_102755C  +
mov [ebp+var_40C] 6 +
jmp loc_10275C7  +
test [ebp+var_408] 830h +
jnz loc_1027385  +
or [ebp+var_408] 20h +
jmp loc_1027385  +
test [ebp+var_408] 830h +
jnz loc_10272DC  +
or [ebp+var_408] 20h +
mov esi [ebp+var_40C] +
cmp esi 0FFFFFFFFh +
jnz loc_10272EC  +
mov esi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_102784C  +
test ebx ebx +
jnz loc_102731A  +
mov eax off_1036550 +
mov [ebp+var_410] eax +
and [ebp+var_420] 0 +
mov edi [ebp+var_410] +
test esi esi +
jle loc_1027888  +
mov al [edi] +
test al al +
jz loc_1027888  +
lea ecx [ebp+var_44C] +
movzx eax al +
push ecx  +
push eax  +
call sub_101FD59  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1027350  +
inc edi  +
inc edi  +
inc [ebp+var_420]  +
cmp [ebp+var_420] esi +
jl loc_102732F  +
jmp loc_1027888  +
sub eax 58h +
jz loc_102769D  +
sub eax esi +
jz loc_1027409  +
sub eax ecx +
jz loc_1027273  +
sub eax esi +
jnz loc_1027888  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor edi edi +
inc edi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_430] edi +
mov [ebp+var_418] ebx +
mov [ebp+var_464] eax +
jz loc_10273EB  +
mov byte ptr [ebp+var_43C] al +
lea eax [ebp+var_44C] +
push eax  +
mov eax [ebp+var_44C] +
mov byte ptr [ebp+var_43C+1] 0 +
push dword ptr [eax+0ACh]  +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_102C1EF  +
add esp 10h +
test eax eax +
jge loc_10273F2  +
mov [ebp+var_45C] edi +
jmp loc_10273F2  +
mov [ebp+WideCharStr] ax +
lea eax [ebp+WideCharStr] +
mov [ebp+var_410] eax +
mov [ebp+var_420] edi +
jmp loc_1027888  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
test eax eax +
jz loc_102747B  +
mov esi [eax+4] +
test esi esi +
jz loc_102747B  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_1027A61  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_1027469  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_1027A61  +
mov edx esi +
not edx  +
test dl cl +
jz loc_1027A61  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_430] ecx +
jmp loc_1027882  +
and [ebp+var_430] 0 +
mov [ebp+var_410] esi +
jmp loc_1027882  +
mov eax off_1036550 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1027489  +
sub eax edx +
jmp loc_1027882  +
cmp eax 70h +
jg loc_10276A5  +
jz loc_1027693  +
cmp eax 65h +
jl loc_1027888  +
cmp eax 67h +
jle loc_1027273  +
cmp eax 69h +
jz loc_102752E  +
cmp eax 6Eh +
jz loc_10274EA  +
cmp eax 6Fh +
jnz loc_1027888  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_414] 8 +
jz loc_102753F  +
or [ebp+var_408] 200h +
jmp loc_102753F  +
mov esi [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
call sub_102C19B  +
test eax eax +
jz loc_1027A61  +
test byte ptr [ebp+var_408] 20h +
jz loc_1027517  +
mov ax word ptr [ebp+var_41C] +
mov [esi] ax +
jmp loc_102751F  +
mov eax [ebp+var_41C] +
mov [esi] eax +
mov [ebp+var_45C] 1 +
jmp loc_1027A1E  +
or [ebp+var_408] 40h +
mov [ebp+var_414] 0Ah +
test [ebp+var_408] 8000h +
jz loc_1027705  +
mov eax [ebx] +
mov edx [ebx+4] +
add ebx 8 +
jmp loc_102774E  +
jnz loc_1027570  +
cmp dx 67h +
jnz loc_10275C7  +
mov [ebp+var_40C] 1 +
jmp loc_10275C7  +
cmp [ebp+var_40C] eax +
jle loc_102757E  +
mov [ebp+var_40C] eax +
cmp [ebp+var_40C] 0A3h +
jle loc_10275C7  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call sub_1020842  +
mov edx [ebp+var_414] +
pop ecx  +
mov [ebp+var_454] eax +
test eax eax +
jz loc_10275BD  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
mov edi eax +
jmp loc_10275C7  +
mov [ebp+var_40C] 0A3h +
mov eax [ebx] +
add ebx 8 +
mov [ebp+var_470] eax +
mov eax [ebx-4] +
mov [ebp+var_46C] eax +
lea eax [ebp+var_44C] +
push eax  +
push [ebp+var_460]  +
movsx eax dl +
push [ebp+var_40C]  +
mov [ebp+var_418] ebx +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_470] +
push edi  +
push eax  +
push off_1036B88  +
call sub_10218C4  +
pop ecx  +
call eax  +
mov esi [ebp+var_408] +
add esp 1Ch +
and esi 80h +
jz loc_1027646  +
cmp [ebp+var_40C] 0 +
jnz loc_1027646  +
lea eax [ebp+var_44C] +
push eax  +
push edi  +
push off_1036B94  +
call sub_10218C4  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp word ptr [ebp+var_414] 67h +
jnz loc_102766C  +
test esi esi +
jnz loc_102766C  +
lea eax [ebp+var_44C] +
push eax  +
push edi  +
push off_1036B90  +
call sub_10218C4  +
pop ecx  +
call eax  +
pop ecx  +
pop ecx  +
cmp byte ptr [edi] 2Dh +
jnz loc_1027682  +
or [ebp+var_408] 100h +
inc edi  +
mov [ebp+var_410] edi +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1027687  +
jmp loc_1027490  +
mov [ebp+var_40C] 8 +
mov [ebp+var_458] ecx +
jmp loc_10276C9  +
sub eax 73h +
jz loc_10272DC  +
sub eax esi +
jz loc_1027535  +
sub eax 3 +
jnz loc_1027888  +
mov [ebp+var_458] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_414] 10h +
jz loc_102753F  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_438] ax +
mov eax [ebp+var_458] +
add eax 51h +
mov word ptr [ebp+var_438+2] ax +
mov [ebp+var_428] esi +
jmp loc_102753F  +
test [ebp+var_408] 1000h +
jnz loc_102754F  +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
jz loc_102773D  +
test byte ptr [ebp+var_408] 40h +
mov [ebp+var_418] ebx +
jz loc_1027736  +
movsx eax word ptr [ebx-4] +
jmp loc_102773A  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_1027754  +
test byte ptr [ebp+var_408] 40h +
mov eax [ebx-4] +
jz loc_102774C  +
cdq   +
jmp loc_102774E  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_1027778  +
test edx edx +
jg loc_1027778  +
jl loc_1027767  +
test eax eax +
jnb loc_1027778  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov esi eax +
jnz loc_102778A  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_102779F  +
mov [ebp+var_40C] 1 +
jmp loc_10277B9  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_10277B9  +
mov [ebp+var_40C] eax +
mov eax esi +
or eax ebx +
jnz loc_10277C5  +
and [ebp+var_428] eax +
lea edi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_10277E1  +
mov eax esi +
or eax ebx +
jz loc_102780E  +
mov eax [ebp+var_414] +
cdq   +
push edx  +
push eax  +
push ebx  +
push esi  +
call sub_102AB20  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_474] ebx +
mov esi eax +
mov ebx edx +
jle loc_1027809  +
add ecx [ebp+var_458] +
mov [edi] cl +
dec edi  +
jmp loc_10277CB  +
lea eax [ebp+var_205] +
sub eax edi +
inc edi  +
test [ebp+var_408] 200h +
mov [ebp+var_420] eax +
mov [ebp+var_410] edi +
jz loc_1027888  +
test eax eax +
jz loc_102783A  +
mov ecx edi +
cmp byte ptr [ecx] 30h +
jz loc_1027888  +
dec [ebp+var_410]  +
mov ecx [ebp+var_410] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_1027882  +
test ebx ebx +
jnz loc_102785B  +
mov eax off_1036554 +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_430] 1 +
jmp loc_1027876  +
dec esi  +
cmp word ptr [eax] 0 +
jz loc_102787A  +
inc eax  +
inc eax  +
test esi esi +
jnz loc_102786D  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_420] eax +
cmp [ebp+var_45C] 0 +
jnz loc_1027A1E  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_10278CA  +
test eax 100h +
jz loc_10278AA  +
push 2Dh  +
jmp loc_10278B8  +
test al 1 +
jz loc_10278B2  +
push 2Bh  +
jmp loc_10278B8  +
test al 2 +
jz loc_10278CA  +
push 20h  +
pop eax  +
mov word ptr [ebp+var_438] ax +
mov [ebp+var_428] 1 +
mov ebx [ebp+var_42C] +
mov esi [ebp+var_420] +
sub ebx esi +
sub ebx [ebp+var_428] +
test byte ptr [ebp+var_408] 0Ch +
jnz loc_10278FE  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 20h  +
call sub_1026E3F  +
add esp 0Ch +
push [ebp+var_428]  +
mov ecx [ebp+var_424] +
lea eax [ebp+var_41C] +
lea edx [ebp+var_438] +
call sub_1026E71  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
jz loc_1027945  +
test byte ptr [ebp+var_408] 4 +
jnz loc_1027945  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 30h  +
call sub_1026E3F  +
add esp 0Ch +
cmp [ebp+var_430] 0 +
jnz loc_10279DC  +
test esi esi +
jle loc_10279DC  +
mov eax [ebp+var_410] +
mov [ebp+var_414] eax +
mov [ebp+var_434] esi +
dec [ebp+var_434]  +
lea eax [ebp+var_44C] +
push eax  +
mov eax [ebp+var_44C] +
push dword ptr [eax+0ACh]  +
lea eax [ebp+var_464] +
push [ebp+var_414]  +
push eax  +
call sub_102C1EF  +
add esp 10h +
mov [ebp+var_474] eax +
test eax eax +
jle loc_10279D3  +
push [ebp+var_464]  +
mov esi [ebp+var_424] +
lea edi [ebp+var_41C] +
call sub_1026E00  +
mov eax [ebp+var_474] +
add [ebp+var_414] eax +
cmp [ebp+var_434] 0 +
pop ecx  +
jg loc_102796C  +
jmp loc_10279F5  +
or [ebp+var_41C] 0FFFFFFFFh +
jmp loc_10279F5  +
mov ecx [ebp+var_424] +
mov edx [ebp+var_410] +
push esi  +
lea eax [ebp+var_41C] +
call sub_1026E71  +
pop ecx  +
cmp [ebp+var_41C] 0 +
jl loc_1027A1E  +
test byte ptr [ebp+var_408] 4 +
jz loc_1027A1E  +
push [ebp+var_424]  +
lea eax [ebp+var_41C] +
push ebx  +
push 20h  +
call sub_1026E3F  +
add esp 0Ch +
cmp [ebp+var_454] 0 +
jz loc_1027A3A  +
push [ebp+var_454]  +
call sub_101F40A  +
and [ebp+var_454] 0 +
pop ecx  +
mov edi [ebp+var_450] +
movzx eax word ptr [edi] +
mov [ebp+var_414] eax +
test ax ax +
jz loc_1027A78  +
mov ecx [ebp+var_468] +
mov ebx [ebp+var_418] +
mov edx eax +
jmp loc_1026F9A  +
call sub_10223A9  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
jmp loc_1026F4D  +
cmp [ebp+var_440] 0 +
jz loc_1027A8B  +
mov eax [ebp+var_444] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_41C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
sub eax 3A4h +
jz loc_1027AEE  +
sub eax 4 +
jz loc_1027AE8  +
sub eax 0Dh +
jz loc_1027AE2  +
dec eax  +
jz loc_1027ADC  +
xor eax eax +
retn   +
mov eax 404h +
retn   +
mov eax 412h +
retn   +
mov eax 804h +
retn   +
mov eax 411h +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi eax +
push 101h  +
xor edi edi +
lea eax [esi+1Ch] +
push edi  +
push eax  +
call sub_101EDB0  +
xor eax eax +
movzx ecx ax +
mov eax ecx +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
shl ecx 10h +
or eax ecx +
lea edi [esi+10h] +
stos   +
stos   +
stos   +
mov ecx offset Addend +
add esp 0Ch +
lea eax [esi+1Ch] +
sub ecx esi +
mov edi 101h +
mov dl [ecx+eax] +
mov [eax] dl +
inc eax  +
dec edi  +
jnz loc_1027B3D  +
lea eax [esi+11Dh] +
mov esi 100h +
mov dl [eax+ecx] +
mov [eax] dl +
inc eax  +
dec esi  +
jnz loc_1027B51  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 51Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
lea eax [ebp+CPInfo] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetCPInfo  +
mov edi 100h +
test eax eax +
jz loc_1027C91  +
xor eax eax +
mov [ebp+eax+SrcStr] al +
inc eax  +
cmp eax edi +
jb loc_1027B98  +
mov al [ebp+CPInfo.LeadByte] +
mov [ebp+SrcStr] 20h +
test al al +
jz loc_1027BE3  +
lea ebx [ebp+CPInfo.LeadByte+1] +
movzx ecx al +
movzx eax byte ptr [ebx] +
cmp ecx eax +
ja loc_1027BDB  +
sub eax ecx +
inc eax  +
push eax  +
lea edx [ebp+ecx+SrcStr] +
push 20h  +
push edx  +
call sub_101EDB0  +
add esp 0Ch +
inc ebx  +
mov al [ebx] +
inc ebx  +
test al al +
jnz loc_1027BBB  +
push 0  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+CharType] +
push dword ptr [esi+4]  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push 1  +
push 0  +
call sub_102CA2D  +
xor ebx ebx +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_204] +
push edi  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_102C823  +
add esp 44h +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_304] +
push edi  +
push eax  +
push edi  +
lea eax [ebp+SrcStr] +
push eax  +
push 200h  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_102C823  +
add esp 24h +
xor eax eax +
movzx ecx [ebp+eax*2+CharType] +
test cl 1 +
jz loc_1027C68  +
or byte ptr [esi+eax+1Dh] 10h +
mov cl byte ptr [ebp+eax+var_204] +
jmp loc_1027C79  +
test cl 2 +
jz loc_1027C82  +
or byte ptr [esi+eax+1Dh] 20h +
mov cl byte ptr [ebp+eax+var_304] +
mov [esi+eax+11Dh] cl +
jmp loc_1027C8A  +
mov byte ptr [esi+eax+11Dh] 0 +
inc eax  +
cmp eax edi +
jb loc_1027C4D  +
jmp loc_1027CE7  +
lea eax [esi+11Dh] +
mov [ebp+var_51C] 0FFFFFF9Fh +
xor ecx ecx +
sub [ebp+var_51C] eax +
mov edx [ebp+var_51C] +
lea eax [esi+ecx+11Dh] +
add edx eax +
lea ebx [edx+20h] +
cmp ebx 19h +
ja loc_1027CCC  +
or byte ptr [esi+ecx+1Dh] 10h +
mov dl cl +
add dl 20h +
jmp loc_1027CDB  +
cmp edx 19h +
ja loc_1027CDF  +
or byte ptr [esi+ecx+1Dh] 20h +
mov dl cl +
sub dl 20h +
mov [eax] dl +
jmp loc_1027CE2  +
mov byte ptr [eax] 0 +
inc ecx  +
cmp ecx edi +
jb loc_1027CA9  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
jmp loc_1027D91  +
***
mov esi [edi+68h] +
test esi esi +
jnz loc_1027D9D  +
push 20h  +
call sub_10209D5  +
pop ecx  +
mov eax esi +
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push ebx  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov dword_103816C ebx +
cmp esi 0FFFFFFFEh +
jnz loc_1027DE7  +
mov dword_103816C 1 +
call ds:GetOEMCP  +
cmp [ebp+var_4] bl +
jz loc_1027E23  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_1027E23  +
cmp esi 0FFFFFFFDh +
jnz loc_1027DFE  +
mov dword_103816C 1 +
call ds:GetACP  +
jmp loc_1027DD9  +
cmp esi 0FFFFFFFCh +
jnz loc_1027E15  +
mov eax [ebp+var_10] +
mov eax [eax+4] +
mov dword_103816C 1 +
jmp loc_1027DD9  +
cmp [ebp+var_4] bl +
jz loc_1027E21  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax esi +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
call sub_1027DAA  +
mov edi eax +
xor esi esi +
mov [ebp+arg_0] edi +
cmp edi esi +
jnz loc_1027E64  +
mov eax ebx +
call sub_1027AF9  +
xor eax eax +
jmp loc_1027FD3  +
mov [ebp+var_1C] esi +
xor eax eax +
cmp dword_1036988[eax] edi +
jz loc_1027ED8  +
inc [ebp+var_1C]  +
add eax 30h +
cmp eax 0F0h +
jb loc_1027E69  +
lea eax [ebp+CPInfo] +
push eax  +
push edi  +
call ds:GetCPInfo  +
test eax eax +
jz loc_1027FC4  +
push 101h  +
lea eax [ebx+1Ch] +
push esi  +
push eax  +
call sub_101EDB0  +
xor edx edx +
inc edx  +
add esp 0Ch +
mov [ebx+4] edi +
mov [ebx+0Ch] esi +
cmp [ebp+CPInfo.MaxCharSize] edx +
jbe loc_1027FAD  +
cmp [ebp+CPInfo.LeadByte] 0 +
jz loc_1027F8E  +
lea esi [ebp+CPInfo.LeadByte+1] +
mov cl [esi] +
test cl cl +
jz loc_1027F8E  +
movzx eax byte ptr [esi-1] +
movzx ecx cl +
jmp loc_1027F7E  +
push 101h  +
lea eax [ebx+1Ch] +
push esi  +
push eax  +
call sub_101EDB0  +
mov ecx [ebp+var_1C] +
add esp 0Ch +
imul ecx ecx +
mov [ebp+var_20] esi +
lea esi dword_1036998[ecx] +
mov [ebp+var_1C] esi +
jmp loc_1027F28  +
mov al [esi+1] +
test al al +
jz loc_1027F2D  +
movzx edi byte ptr [esi] +
movzx eax al +
jmp loc_1027F1F  +
mov eax [ebp+var_20] +
mov al byte_1036984[eax] +
or [ebx+edi+1Dh] al +
movzx eax byte ptr [esi+1] +
inc edi  +
cmp edi eax +
jbe loc_1027F0D  +
mov edi [ebp+arg_0] +
inc esi  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1027EFE  +
mov esi [ebp+var_1C] +
inc [ebp+var_20]  +
add esi 8 +
cmp [ebp+var_20] 4 +
mov [ebp+var_1C] esi +
jb loc_1027F28  +
mov eax edi +
mov [ebx+4] edi +
mov dword ptr [ebx+8] 1 +
call sub_1027AC5  +
push 6  +
mov [ebx+0Ch] eax +
lea eax [ebx+10h] +
lea ecx dword_103698C[ecx] +
pop edx  +
mov si [ecx] +
inc ecx  +
mov [eax] si +
inc ecx  +
inc eax  +
inc eax  +
dec edx  +
jnz loc_1027F5F  +
mov esi ebx +
call sub_1027B62  +
jmp loc_1027E5D  +
or byte ptr [ebx+eax+1Dh] 4 +
inc eax  +
cmp eax ecx +
jbe loc_1027F78  +
inc esi  +
inc esi  +
cmp byte ptr [esi-1] 0 +
jnz loc_1027EC2  +
lea eax [ebx+1Eh] +
mov ecx 0FEh +
or byte ptr [eax] 8 +
inc eax  +
dec ecx  +
jnz loc_1027F96  +
mov eax [ebx+4] +
call sub_1027AC5  +
mov [ebx+0Ch] eax +
mov [ebx+8] edx +
jmp loc_1027FB0  +
mov [ebx+8] esi +
xor eax eax +
movzx ecx ax +
mov eax ecx +
shl ecx 10h +
or eax ecx +
lea edi [ebx+10h] +
stos   +
stos   +
stos   +
jmp loc_1027F6C  +
cmp dword_103816C esi +
jnz loc_1027E56  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
jmp loc_1028178  +
***
cmp eax 0FFFFFFFFh +
jnz loc_1028178  +
cmp ebx offset Addend +
jz loc_1028167  +
push ebx  +
call sub_101F40A  +
pop ecx  +
call sub_10223A9  +
mov dword ptr [eax] 16h +
jmp loc_1028178  +
and dword ptr [ebp-20h] 0 +
mov eax [ebp-20h] +
call sub_1024EB9  +
retn   +
***
cmp dword_103946C 0 +
jnz loc_10281A1  +
push 0FFFFFFFDh  +
call sub_1027FE7  +
pop ecx  +
mov dword_103946C 1 +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0BCh] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_102822F  +
cmp eax offset off_1036FB0 +
jz loc_102822F  +
mov eax [esi+0B0h] +
cmp eax ebx +
jz loc_102822F  +
cmp [eax] ebx +
jnz loc_102822F  +
mov eax [esi+0B8h] +
cmp eax ebx +
jz loc_10281F6  +
cmp [eax] ebx +
jnz loc_10281F6  +
push eax  +
call sub_101F40A  +
push dword ptr [esi+0BCh]  +
call sub_102CE5E  +
pop ecx  +
pop ecx  +
mov eax [esi+0B4h] +
cmp eax ebx +
jz loc_1028217  +
cmp [eax] ebx +
jnz loc_1028217  +
push eax  +
call sub_101F40A  +
push dword ptr [esi+0BCh]  +
call sub_102CDF0  +
pop ecx  +
pop ecx  +
push dword ptr [esi+0B0h]  +
call sub_101F40A  +
push dword ptr [esi+0BCh]  +
call sub_101F40A  +
pop ecx  +
pop ecx  +
mov eax [esi+0C0h] +
cmp eax ebx +
jz loc_102827D  +
cmp [eax] ebx +
jnz loc_102827D  +
mov eax [esi+0C4h] +
sub eax 0FEh +
push eax  +
call sub_101F40A  +
mov eax [esi+0CCh] +
mov edi 80h +
sub eax edi +
push eax  +
call sub_101F40A  +
mov eax [esi+0D0h] +
sub eax edi +
push eax  +
call sub_101F40A  +
push dword ptr [esi+0C0h]  +
call sub_101F40A  +
add esp 10h +
lea edi [esi+0D4h] +
mov eax [edi] +
cmp eax offset off_1036E40 +
jz loc_10282A3  +
cmp [eax+0B4h] ebx +
jnz loc_10282A3  +
push eax  +
call sub_102CA74  +
push dword ptr [edi]  +
call sub_101F40A  +
pop ecx  +
pop ecx  +
lea edi [esi+50h] +
mov [ebp+arg_0] 6 +
cmp dword ptr [edi-8] offset unk_1036A80 +
jz loc_10282C7  +
mov eax [edi] +
cmp eax ebx +
jz loc_10282C7  +
cmp [eax] ebx +
jnz loc_10282C7  +
push eax  +
call sub_101F40A  +
pop ecx  +
cmp [edi-4] ebx +
jz loc_10282DE  +
mov eax [edi+4] +
cmp eax ebx +
jz loc_10282DE  +
cmp [eax] ebx +
jnz loc_10282DE  +
push eax  +
call sub_101F40A  +
pop ecx  +
add edi 10h +
dec [ebp+arg_0]  +
jnz loc_10282AD  +
push esi  +
call sub_101F40A  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:InterlockedIncrement +
push edi  +
mov edi [ebp+lpAddend] +
push edi  +
call esi  +
mov eax [edi+0B0h] +
test eax eax +
jz loc_1028318  +
push eax  +
call esi  +
mov eax [edi+0B8h] +
test eax eax +
jz loc_1028325  +
push eax  +
call esi  +
mov eax [edi+0B4h] +
test eax eax +
jz loc_1028332  +
push eax  +
call esi  +
mov eax [edi+0C0h] +
test eax eax +
jz loc_102833F  +
push eax  +
call esi  +
lea ebx [edi+50h] +
mov [ebp+lpAddend] 6 +
cmp dword ptr [ebx-8] offset unk_1036A80 +
jz loc_102835B  +
mov eax [ebx] +
test eax eax +
jz loc_102835B  +
push eax  +
call esi  +
cmp dword ptr [ebx-4] 0 +
jz loc_102836B  +
mov eax [ebx+4] +
test eax eax +
jz loc_102836B  +
push eax  +
call esi  +
add ebx 10h +
dec [ebp+lpAddend]  +
jnz loc_1028349  +
mov eax [edi+0D4h] +
add eax 0B4h +
push eax  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpAddend] +
test edi edi +
jz loc_102841F  +
push ebx  +
push esi  +
mov esi ds:InterlockedDecrement +
push edi  +
call esi  +
mov eax [edi+0B0h] +
test eax eax +
jz loc_10283B4  +
push eax  +
call esi  +
mov eax [edi+0B8h] +
test eax eax +
jz loc_10283C1  +
push eax  +
call esi  +
mov eax [edi+0B4h] +
test eax eax +
jz loc_10283CE  +
push eax  +
call esi  +
mov eax [edi+0C0h] +
test eax eax +
jz loc_10283DB  +
push eax  +
call esi  +
lea ebx [edi+50h] +
mov [ebp+lpAddend] 6 +
cmp dword ptr [ebx-8] offset unk_1036A80 +
jz loc_10283F7  +
mov eax [ebx] +
test eax eax +
jz loc_10283F7  +
push eax  +
call esi  +
cmp dword ptr [ebx-4] 0 +
jz loc_1028407  +
mov eax [ebx+4] +
test eax eax +
jz loc_1028407  +
push eax  +
call esi  +
add ebx 10h +
dec [ebp+lpAddend]  +
jnz loc_10283E5  +
mov eax [edi+0D4h] +
add eax 0B4h +
push eax  +
call esi  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
pop ebp  +
retn   +
***
test edi edi +
jz loc_1028464  +
test eax eax +
jz loc_1028464  +
push esi  +
mov esi [eax] +
cmp esi edi +
jz loc_1028460  +
push edi  +
mov [eax] edi +
call sub_10282F7  +
pop ecx  +
test esi esi +
jz loc_1028460  +
push esi  +
call sub_102838B  +
cmp dword ptr [esi] 0 +
pop ecx  +
jnz loc_1028460  +
cmp esi offset unk_1036A88 +
jz loc_1028460  +
push esi  +
call sub_10281A9  +
pop ecx  +
mov eax edi +
pop esi  +
retn   +
xor eax eax +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
call sub_1021B55  +
mov esi [eax+6Ch] +
test esi esi +
jnz loc_10284DF  +
push 20h  +
call sub_10209D5  +
pop ecx  +
mov eax esi +
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
sub esp 14h +
cmp [ebp+WideCharStr] ax +
jnz loc_1028505  +
and dword ptr [ebp+CharType] 0 +
jmp loc_102856A  +
mov eax 100h +
cmp [ebp+WideCharStr] ax +
jnb loc_102852A  +
movzx eax [ebp+WideCharStr] +
mov ecx off_1036E38 +
mov ax [ecx+eax*2] +
and ax [ebp+arg_4] +
movzx eax ax +
mov dword ptr [ebp+CharType] eax +
jmp loc_102856A  +
push [ebp+arg_8]  +
lea ecx [ebp+var_14] +
call sub_101FCB3  +
mov eax [ebp+var_14] +
push dword ptr [eax+14h]  +
push dword ptr [eax+4]  +
lea eax [ebp+CharType] +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
lea eax [ebp+var_14] +
push 1  +
push eax  +
call sub_102D2F3  +
add esp 1Ch +
test eax eax +
jnz loc_102855D  +
and dword ptr [ebp+CharType] eax +
cmp [ebp+var_8] 0 +
jz loc_102856A  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
movzx eax [ebp+CharType] +
movzx ecx [ebp+arg_4] +
and eax ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax 0FFFFh +
cmp [ebp+WideCharStr] ax +
jnz loc_1028590  +
xor eax eax +
leave   +
retn   +
mov eax 100h +
cmp [ebp+WideCharStr] ax +
jnb loc_10285B1  +
movzx eax [ebp+WideCharStr] +
mov ecx off_1036E38 +
movzx eax word ptr [ecx+eax*2] +
movzx ecx [ebp+arg_4] +
and eax ecx +
leave   +
retn   +
cmp dword_1038188 0 +
jnz loc_10285DF  +
push Locale  +
lea eax [ebp+CharType] +
push CodePage  +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
push 1  +
push offset off_1036B68  +
call sub_102D2F3  +
add esp 1Ch +
push 0  +
push dword ptr [ebp+arg_4]  +
push dword ptr [ebp+WideCharStr]  +
call sub_10284EC  +
add esp 0Ch +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov esi [ebp+arg_0] +
movsx eax byte ptr [esi] +
push eax  +
call sub_102D452  +
cmp eax 65h +
jmp loc_1028627  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call sub_102AC10  +
test eax eax +
pop ecx  +
jnz loc_102861B  +
movsx eax byte ptr [esi] +
push eax  +
call sub_102D452  +
pop ecx  +
cmp eax 78h +
jnz loc_102863B  +
inc esi  +
inc esi  +
mov ecx [ebp+var_10] +
mov ecx [ecx+0BCh] +
mov ecx [ecx] +
mov al [esi] +
mov cl [ecx] +
mov [esi] cl +
inc esi  +
mov cl [esi] +
mov [esi] al +
mov al cl +
mov cl [esi] +
inc esi  +
test cl cl +
jnz loc_102864D  +
pop esi  +
cmp [ebp+var_4] cl +
jz locret_1028667  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov eax [ebp+arg_0] +
mov cl [eax] +
mov esi [ebp+var_10] +
test cl cl +
jz loc_10286A3  +
mov edx [esi+0BCh] +
mov edx [edx] +
mov dl [edx] +
cmp cl dl +
jz loc_10286A3  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_1028698  +
mov cl [eax] +
inc eax  +
test cl cl +
jz loc_10286E0  +
jmp loc_10286B7  +
cmp cl 65h +
jz loc_10286BD  +
cmp cl 45h +
jz loc_10286BD  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_10286AC  +
mov edx eax +
dec eax  +
cmp byte ptr [eax] 30h +
jz loc_10286BF  +
mov ecx [esi+0BCh] +
mov ecx [ecx] +
push ebx  +
mov bl [eax] +
cmp bl [ecx] +
pop ebx  +
jnz loc_10286D6  +
dec eax  +
mov cl [edx] +
inc eax  +
inc edx  +
mov [eax] cl +
test cl cl +
jnz loc_10286D6  +
cmp [ebp+var_4] 0 +
pop esi  +
jz locret_10286EE  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fldz   +
mov eax [ebp+8] +
fcomp  qword ptr [eax] +
fnstsw  ax +
test ah 41h +
jp loc_102870D  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jz loc_1028742  +
lea eax [ebp+var_8] +
push eax  +
call sub_102D483  +
mov ecx [ebp+var_8] +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
mov [eax+4] ecx +
jmp loc_1028753  +
lea eax [ebp+arg_0] +
push eax  +
call sub_102D530  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
add esp 0Ch +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1028716  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
test edi edi +
jz loc_1028799  +
push esi  +
call sub_102D5E0  +
inc eax  +
push eax  +
push esi  +
add esi edi +
push esi  +
call loc_1022410  +
add esp 10h +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_10285F6  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_102866E  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_14]  +
lea ecx [ebp+var_10] +
mov ebx eax +
call sub_101FCB3  +
xor esi esi +
cmp ebx esi +
jnz loc_1028819  +
call sub_10223A9  +
push 16h  +
pop edi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov [eax] edi +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_1028812  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax edi +
jmp loc_102893A  +
cmp [ebp+arg_0] esi +
jbe loc_10287EE  +
cmp [ebp+arg_4] esi +
jle loc_1028828  +
mov eax [ebp+arg_4] +
jmp loc_102882A  +
xor eax eax +
add eax 9 +
cmp [ebp+arg_0] eax +
ja loc_102883B  +
call sub_10223A9  +
push 22h  +
jmp loc_10287F5  +
cmp [ebp+arg_10] 0 +
jz loc_102885F  +
mov edx [ebp+arg_C] +
xor eax eax +
cmp [ebp+arg_4] esi +
setnle al  +
xor ecx ecx +
cmp dword ptr [edx] 2Dh +
setz cl  +
mov edi eax +
add ecx ebx +
mov eax ecx +
call sub_102877C  +
mov edi [ebp+arg_C] +
cmp dword ptr [edi] 2Dh +
mov esi ebx +
jnz loc_102886F  +
mov byte ptr [ebx] 2Dh +
lea esi [ebx+1] +
cmp [ebp+arg_4] 0 +
jle loc_102888D  +
lea eax [esi+1] +
mov cl [eax] +
mov [esi] cl +
mov esi eax +
mov eax [ebp+var_10] +
mov eax [eax+0BCh] +
mov eax [eax] +
mov al [eax] +
mov [esi] al +
xor eax eax +
cmp [ebp+arg_10] al +
setz al  +
add eax [ebp+arg_4] +
add esi eax +
cmp [ebp+arg_0] 0FFFFFFFFh +
jnz loc_10288A5  +
or ebx 0FFFFFFFFh +
jmp loc_10288AA  +
sub ebx esi +
add ebx [ebp+arg_0] +
push offset dword_1008C8C  +
push ebx  +
push esi  +
call sub_102277A  +
add esp 0Ch +
xor ebx ebx +
test eax eax +
jz loc_10288CC  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
lea ecx [esi+2] +
cmp [ebp+arg_8] ebx +
jz loc_10288D7  +
mov byte ptr [esi] 45h +
mov eax [edi+0Ch] +
inc esi  +
cmp byte ptr [eax] 30h +
jz loc_102890E  +
mov eax [edi+4] +
dec eax  +
jns loc_10288EB  +
neg eax  +
mov byte ptr [esi] 2Dh +
inc esi  +
cmp eax 64h +
jl loc_10288FB  +
cdq   +
push 64h  +
pop edi  +
idiv  edi +
add [esi] al +
mov eax edx +
inc esi  +
cmp eax 0Ah +
jl loc_102890B  +
cdq   +
push 0Ah  +
pop edi  +
idiv  edi +
add [esi] al +
mov eax edx +
add [esi+1] al +
test byte_1038240 1 +
jz loc_102892B  +
cmp byte ptr [ecx] 30h +
jnz loc_102892B  +
push 3  +
lea eax [ecx+1] +
push eax  +
push ecx  +
call loc_1022410  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jz loc_1028938  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 16h  +
pop esi  +
push esi  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_2C] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_102D80B  +
xor ebx ebx +
add esp 14h +
cmp edi ebx +
jnz loc_1028996  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_1028A05  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jbe loc_102897E  +
mov esi [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_10289AA  +
or eax 0FFFFFFFFh +
jmp loc_10289BE  +
xor ecx ecx +
cmp [ebp+var_2C] 2Dh +
setz cl  +
sub eax ecx +
xor ecx ecx +
cmp esi ebx +
setnle cl  +
sub eax ecx +
lea ecx [ebp+var_2C] +
push ecx  +
lea ecx [esi+1] +
push ecx  +
push eax  +
xor eax eax +
cmp [ebp+var_2C] 2Dh +
setz al  +
xor ecx ecx +
cmp esi ebx +
setnle cl  +
add eax edi +
add ecx eax +
push ecx  +
call sub_102D670  +
add esp 10h +
cmp eax ebx +
jz loc_10289EC  +
mov [edi] bl +
jmp loc_1028A05  +
push [ebp+arg_14]  +
lea eax [ebp+var_2C] +
push ebx  +
push eax  +
push [ebp+arg_10]  +
mov eax edi +
push esi  +
push [ebp+arg_8]  +
call sub_10287D0  +
add esp 18h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1028944  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
push [ebp+arg_14]  +
lea ecx [ebp+var_24] +
mov [ebp+var_14] 3FFh +
xor edi edi +
mov [ebp+var_4] 30h +
call sub_101FCB3  +
cmp [ebp+arg_C] edi +
jge loc_1028A6B  +
mov [ebp+arg_C] edi +
mov esi [ebp+arg_4] +
cmp esi edi +
jnz loc_1028A9D  +
call sub_10223A9  +
push 16h  +
pop esi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov [eax] esi +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_18] 0 +
jz loc_1028A96  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax esi +
jmp loc_1028DAD  +
cmp [ebp+arg_8] edi +
jbe loc_1028A72  +
mov eax [ebp+arg_C] +
add eax 0Bh +
mov byte ptr [esi] 0 +
cmp [ebp+arg_8] eax +
ja loc_1028AB9  +
call sub_10223A9  +
push 22h  +
jmp loc_1028A79  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov [ebp+var_C] eax +
mov eax [edi+4] +
mov ecx eax +
shr ecx 14h +
mov edx 7FFh +
push ebx  +
and ecx edx +
xor ebx ebx +
cmp ecx edx +
jnz loc_1028B6B  +
test ebx ebx +
jnz loc_1028B6B  +
mov eax [ebp+arg_8] +
cmp eax 0FFFFFFFFh +
jnz loc_1028AEF  +
or eax eax +
jmp loc_1028AF2  +
add eax 0FFFFFFFEh +
push 0  +
push [ebp+arg_C]  +
lea ebx [esi+2] +
push eax  +
push ebx  +
push edi  +
call sub_1028A19  +
add esp 14h +
test eax eax +
jz loc_1028B22  +
cmp [ebp+var_18] 0 +
mov byte ptr [esi] 0 +
jz loc_1028DAC  +
mov ecx [ebp+var_1C] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_1028DAC  +
cmp byte ptr [ebx] 2Dh +
jnz loc_1028B2B  +
mov byte ptr [esi] 2Dh +
inc esi  +
mov byte ptr [esi] 30h +
inc esi  +
cmp [ebp+arg_10] 0 +
push 65h  +
setz al  +
dec al  +
and al 0E0h +
add al 78h +
mov [esi] al +
inc esi  +
push esi  +
call sub_102D8A0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1028D9D  +
cmp [ebp+arg_10] 0 +
setz cl  +
dec cl  +
and cl 0E0h +
add cl 70h +
mov [eax] cl +
mov byte ptr [eax+3] 0 +
jmp loc_1028D9D  +
and eax 80000000h +
xor ecx ecx +
or ecx eax +
jz loc_1028B7A  +
mov byte ptr [esi] 2Dh +
inc esi  +
mov ebx [ebp+arg_10] +
mov byte ptr [esi] 30h +
inc esi  +
test ebx ebx +
setz al  +
dec al  +
and al 0E0h +
add al 78h +
mov [esi] al +
mov ecx [edi+4] +
inc esi  +
neg ebx  +
sbb ebx ebx +
and ebx 0FFFFFFE0h +
and ecx 7FF00000h +
xor eax eax +
add ebx 27h +
xor edx edx +
or eax ecx +
jnz loc_1028BCB  +
mov byte ptr [esi] 30h +
mov ecx [edi+4] +
mov eax [edi] +
and ecx 0FFFFFh +
inc esi  +
or eax ecx +
jnz loc_1028BC2  +
mov [ebp+var_14] edx +
jmp loc_1028BCF  +
mov [ebp+var_14] 3FEh +
jmp loc_1028BCF  +
mov byte ptr [esi] 31h +
inc esi  +
mov eax esi +
inc esi  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_C] edx +
jnz loc_1028BDE  +
mov [eax] dl +
jmp loc_1028BED  +
mov ecx [ebp+var_24] +
mov ecx [ecx+0BCh] +
mov ecx [ecx] +
mov cl [ecx] +
mov [eax] cl +
mov ecx [edi+4] +
mov eax [edi] +
and ecx 0FFFFFh +
mov [ebp+var_8] ecx +
ja loc_1028C05  +
cmp eax edx +
jbe loc_1028CBA  +
mov [ebp+var_C] edx +
mov [ebp+var_8] 0F0000h +
cmp [ebp+arg_C] 0 +
jle loc_1028C62  +
mov edx [edi+4] +
and edx [ebp+var_8] +
mov eax [edi] +
movsx ecx word ptr [ebp+var_4] +
and eax [ebp+var_C] +
and edx 0FFFFFh +
call sub_102D9D0  +
add ax 30h +
movzx eax ax +
cmp ax 39h +
jbe loc_1028C3E  +
add eax ebx +
mov ecx [ebp+var_8] +
sub [ebp+var_4] 4 +
mov [esi] al +
mov eax [ebp+var_C] +
shrd eax ecx +
shr ecx 4 +
inc esi  +
dec [ebp+arg_C]  +
cmp word ptr [ebp+var_4] 0 +
mov [ebp+var_C] eax +
mov [ebp+var_8] ecx +
jge loc_1028C0F  +
cmp word ptr [ebp+var_4] 0 +
jl loc_1028CBA  +
mov edx [edi+4] +
and edx [ebp+var_8] +
mov eax [edi] +
movsx ecx word ptr [ebp+var_4] +
and eax [ebp+var_C] +
and edx 0FFFFFh +
call sub_102D9D0  +
cmp ax 8 +
jbe loc_1028CBA  +
lea eax [esi-1] +
mov cl [eax] +
cmp cl 66h +
jz loc_1028C98  +
cmp cl 46h +
jnz loc_1028C9E  +
mov byte ptr [eax] 30h +
dec eax  +
jmp loc_1028C8C  +
cmp eax [ebp+arg_4] +
jz loc_1028CB7  +
mov cl [eax] +
cmp cl 39h +
jnz loc_1028CB1  +
add bl 3Ah +
mov [eax] bl +
jmp loc_1028CBA  +
inc cl  +
mov [eax] cl +
jmp loc_1028CBA  +
inc byte ptr [eax-1]  +
cmp [ebp+arg_C] 0 +
jle loc_1028CD1  +
push [ebp+arg_C]  +
push 30h  +
push esi  +
call sub_101EDB0  +
add esp 0Ch +
add esi [ebp+arg_C] +
mov eax [ebp+arg_4] +
cmp byte ptr [eax] 0 +
jnz loc_1028CDB  +
mov esi eax +
cmp [ebp+arg_10] 0 +
mov cl 34h +
setz al  +
dec al  +
and al 0E0h +
add al 70h +
mov [esi] al +
mov eax [edi] +
mov edx [edi+4] +
inc esi  +
call sub_102D9D0  +
xor ebx ebx +
and eax 7FFh +
and edx ebx +
sub eax [ebp+var_14] +
push ebx  +
pop ecx  +
sbb edx ecx +
js loc_1028D15  +
jg loc_1028D0F  +
cmp eax ebx +
jb loc_1028D15  +
mov byte ptr [esi] 2Bh +
inc esi  +
jmp loc_1028D1F  +
mov byte ptr [esi] 2Dh +
inc esi  +
neg eax  +
adc edx ebx +
neg edx  +
cmp edx ebx +
mov edi esi +
mov byte ptr [esi] 30h +
jl loc_1028D4C  +
mov ecx 3E8h +
jg loc_1028D33  +
cmp eax ecx +
jb loc_1028D4C  +
push ebx  +
push ecx  +
push edx  +
push eax  +
call sub_102D8E0  +
add al 30h +
mov [esi] al +
inc esi  +
mov [ebp+var_10] edx +
mov eax ecx +
mov edx ebx +
cmp esi edi +
jnz loc_1028D57  +
test edx edx +
jl loc_1028D6E  +
jg loc_1028D57  +
cmp eax 64h +
jb loc_1028D6E  +
push 0  +
push 64h  +
push edx  +
push eax  +
call sub_102D8E0  +
add al 30h +
mov [esi] al +
mov [ebp+var_10] edx +
inc esi  +
mov eax ecx +
mov edx ebx +
cmp esi edi +
jnz loc_1028D7D  +
test edx edx +
jl loc_1028D95  +
jg loc_1028D7D  +
cmp eax 0Ah +
jb loc_1028D95  +
push 0  +
push 0Ah  +
push edx  +
push eax  +
call sub_102D8E0  +
add al 30h +
mov [esi] al +
mov [ebp+var_10] edx +
inc esi  +
mov eax ecx +
mov [ebp+var_10] ebx +
add al 30h +
mov [esi] al +
mov byte ptr [esi+1] 0 +
cmp [ebp+var_18] 0 +
jz loc_1028DAA  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov ebx eax +
mov esi [ebx+4] +
mov edi ecx +
lea ecx [ebp+var_10] +
dec esi  +
call sub_101FCB3  +
test edi edi +
jnz loc_1028E05  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_1028DFE  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax esi +
jmp loc_1028EA8  +
cmp [ebp+arg_0] 0 +
jbe loc_1028DD8  +
cmp [ebp+arg_8] 0 +
jz loc_1028E29  +
cmp esi [ebp+arg_4] +
jnz loc_1028E29  +
xor eax eax +
cmp dword ptr [ebx] 2Dh +
setz al  +
add eax esi +
add eax edi +
mov byte ptr [eax] 30h +
mov byte ptr [eax+1] 0 +
cmp dword ptr [ebx] 2Dh +
mov esi edi +
jnz loc_1028E36  +
mov byte ptr [edi] 2Dh +
lea esi [edi+1] +
mov eax [ebx+4] +
xor edi edi +
inc edi  +
test eax eax +
jg loc_1028E4D  +
mov eax esi +
call sub_102877C  +
mov byte ptr [esi] 30h +
inc esi  +
jmp loc_1028E4F  +
add esi eax +
cmp [ebp+arg_4] 0 +
jle loc_1028E99  +
mov eax esi +
call sub_102877C  +
mov eax [ebp+var_10] +
mov eax [eax+0BCh] +
mov eax [eax] +
mov al [eax] +
mov [esi] al +
mov ebx [ebx+4] +
inc esi  +
test ebx ebx +
jge loc_1028E99  +
neg ebx  +
cmp [ebp+arg_8] 0 +
jnz loc_1028E80  +
cmp [ebp+arg_4] ebx +
jl loc_1028E83  +
mov [ebp+arg_4] ebx +
mov edi [ebp+arg_4] +
mov eax esi +
call sub_102877C  +
push edi  +
push 30h  +
push esi  +
call sub_101EDB0  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jz loc_1028EA6  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 16h  +
pop esi  +
push esi  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_2C] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_102D80B  +
xor ebx ebx +
add esp 14h +
cmp edi ebx +
jnz loc_1028F04  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_1028F5E  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jbe loc_1028EEC  +
cmp eax 0FFFFFFFFh +
jnz loc_1028F14  +
or eax eax +
jmp loc_1028F1F  +
xor ecx ecx +
cmp [ebp+var_2C] 2Dh +
setz cl  +
sub eax ecx +
mov esi [ebp+arg_C] +
lea ecx [ebp+var_2C] +
push ecx  +
mov ecx [ebp+var_28] +
add ecx esi +
push ecx  +
push eax  +
xor eax eax +
cmp [ebp+var_2C] 2Dh +
setz al  +
add eax edi +
push eax  +
call sub_102D670  +
add esp 10h +
cmp eax ebx +
jz loc_1028F49  +
mov [edi] bl +
jmp loc_1028F5E  +
push [ebp+arg_10]  +
lea eax [ebp+var_2C] +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov ecx edi +
call sub_1028DB6  +
add esp 10h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 16h  +
pop edi  +
push edi  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_30] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_102D80B  +
xor ebx ebx +
add esp 14h +
cmp esi ebx +
jnz loc_1028FC7  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] edi +
call sub_1022352  +
add esp 14h +
mov eax edi +
jmp loc_102905D  +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jbe loc_1028FAC  +
mov eax [ebp+var_2C] +
dec eax  +
mov [ebp+var_20] eax +
xor eax eax +
cmp [ebp+var_30] 2Dh +
setz al  +
lea edi [eax+esi] +
cmp ecx 0FFFFFFFFh +
jnz loc_1028FEA  +
or ecx ecx +
jmp loc_1028FEC  +
sub ecx eax +
lea eax [ebp+var_30] +
push eax  +
push [ebp+arg_C]  +
push ecx  +
push edi  +
call sub_102D670  +
add esp 10h +
cmp eax ebx +
jz loc_1029005  +
mov [esi] bl +
jmp loc_102905D  +
mov eax [ebp+var_2C] +
dec eax  +
cmp [ebp+var_20] eax +
setl cl  +
cmp eax 0FFFFFFFCh +
jl loc_1029041  +
cmp eax [ebp+arg_C] +
jge loc_1029041  +
cmp cl bl +
jz loc_1029027  +
mov al [edi] +
inc edi  +
test al al +
jnz loc_102901D  +
mov [edi-2] bl +
push [ebp+arg_14]  +
lea eax [ebp+var_30] +
push 1  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_8]  +
call sub_1028DB6  +
add esp 10h +
jmp loc_102905D  +
push [ebp+arg_14]  +
lea eax [ebp+var_30] +
push 1  +
push eax  +
push [ebp+arg_10]  +
mov eax esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_10287D0  +
add esp 18h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 65h +
jz loc_10290DD  +
cmp eax 45h +
jz loc_10290DD  +
cmp eax 66h +
jnz loc_10290A1  +
push [ebp+arg_18]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1028EB2  +
add esp 14h +
pop ebp  +
retn   +
cmp eax 61h +
jz loc_10290C4  +
cmp eax 41h +
jz loc_10290C4  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1028F72  +
jmp loc_10290F4  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1028A3E  +
jmp loc_10290F4  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1028944  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1029071  +
add esp 1Ch +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
lea esi off_1036B70[edi] +
push dword ptr [esi]  +
call sub_102183E  +
add edi 4 +
pop ecx  +
mov [esi] eax +
cmp edi 28h +
jb loc_102912C  +
pop edi  +
pop esi  +
retn   +
***
call sub_102DB3A  +
pop ecx  +
pop ecx  +
retn   +
***
mov eax dword_1039320 +
push esi  +
push 14h  +
pop esi  +
test eax eax +
jnz loc_1029177  +
mov eax 200h +
jmp loc_102917D  +
cmp eax esi +
jge loc_1029182  +
mov eax esi +
mov dword_1039320 eax +
push 4  +
push eax  +
call sub_10297ED  +
pop ecx  +
pop ecx  +
mov dword_103830C eax +
test eax eax +
jnz loc_10291B3  +
push 4  +
push esi  +
mov dword_1039320 esi +
call sub_10297ED  +
pop ecx  +
pop ecx  +
mov dword_103830C eax +
test eax eax +
jnz loc_10291B3  +
push 1Ah  +
pop eax  +
pop esi  +
retn   +
xor edx edx +
mov ecx offset off_1036B98 +
jmp loc_10291C1  +
mov eax dword_103830C +
mov [edx+eax] ecx +
add ecx 20h +
add edx 4 +
cmp ecx offset unk_1036E18 +
jl loc_10291BC  +
push 0FFFFFFFEh  +
pop esi  +
xor edx edx +
mov ecx offset unk_1036BA8 +
push edi  +
mov edi edx +
and edi 1Fh +
imul edi edi +
mov eax edx +
sar eax 5 +
mov eax dword_1039360[eax*4] +
mov eax [edi+eax] +
cmp eax 0FFFFFFFFh +
jz loc_1029201  +
cmp eax esi +
jz loc_1029201  +
test eax eax +
jnz loc_1029203  +
mov [ecx] esi +
add ecx 20h +
inc edx  +
cmp ecx offset unk_1036C08 +
jl loc_10291DD  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call sub_1029D4A  +
cmp byte_10378AC 0 +
jz loc_102922C  +
call sub_102DE51  +
push dword_103830C  +
call sub_101F40A  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx offset off_1036B98 +
cmp eax ecx +
jb loc_1029267  +
cmp eax offset unk_1036DF8 +
ja loc_1029267  +
sub eax ecx +
sar eax 5 +
add eax 10h +
push eax  +
call sub_1024305  +
pop ecx  +
pop ebp  +
retn   +
add eax 20h +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 14h +
jge loc_1029291  +
add eax 10h +
push eax  +
call sub_1024305  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
add eax 20h +
push eax  +
call ds:EnterCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx offset off_1036B98 +
cmp eax ecx +
jb loc_10292CE  +
cmp eax offset unk_1036DF8 +
ja loc_10292CE  +
sub eax ecx +
sar eax 5 +
add eax 10h +
push eax  +
call sub_1024221  +
pop ecx  +
pop ebp  +
retn   +
add eax 20h +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 14h +
jge loc_10292F8  +
add eax 10h +
push eax  +
call sub_1024221  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+arg_4] +
add eax 20h +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_1029995  +
push eax  +
call sub_102C132  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102939B  +
cmp esi offset unk_1036BB8 +
jnz loc_1029333  +
xor eax eax +
jmp loc_102933E  +
cmp esi offset unk_1036BD8 +
jnz loc_102939B  +
xor eax eax +
inc eax  +
inc dword_10381AC  +
test dword ptr [esi+0Ch] 10Ch +
jnz loc_102939B  +
push ebx  +
push edi  +
lea edi unk_10381B0[eax*4] +
cmp dword ptr [edi] 0 +
mov ebx 1000h +
jnz loc_1029380  +
push ebx  +
call sub_1020842  +
pop ecx  +
mov [edi] eax +
test eax eax +
jnz loc_1029380  +
lea eax [esi+14h] +
push 2  +
mov [esi+8] eax +
mov [esi] eax +
pop eax  +
mov [esi+18h] eax +
mov [esi+4] eax +
jmp loc_102938D  +
mov edi [edi] +
mov [esi+8] edi +
mov [esi] edi +
mov [esi+18h] ebx +
mov [esi+4] ebx +
or dword ptr [esi+0Ch] 1102h +
xor eax eax +
pop edi  +
inc eax  +
pop ebx  +
jmp loc_102939D  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10293D7  +
push esi  +
mov esi [ebp+arg_4] +
test dword ptr [esi+0Ch] 1000h +
jz loc_10293D6  +
push esi  +
call sub_1029BB1  +
and dword ptr [esi+0Ch] 0FFFFEEFFh +
and dword ptr [esi+18h] 0 +
and dword ptr [esi] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
test byte ptr [esi+0Ch] 40h +
push edi  +
jnz loc_1029590  +
push esi  +
call sub_1029995  +
pop ecx  +
mov edi offset unk_1036268 +
cmp eax 0FFFFFFFFh +
jz loc_102943F  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102943F  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea ebx dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_1029441  +
mov eax edi +
mov eax [eax+8] +
and al 3 +
cmp al 2 +
jz loc_1029590  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1029488  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_1029488  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea ebx dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_102948A  +
mov eax edi +
mov eax [eax+8] +
and al 3 +
cmp al 1 +
jnz loc_10294F0  +
dec dword ptr [esi+4]  +
mov ebx dword ptr [ebp+WideCharStr] +
js loc_10294A9  +
mov eax [esi] +
mov [eax] bl +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_10294B5  +
movsx eax bl +
push esi  +
push eax  +
call sub_1025FB8  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10294C4  +
mov eax 0FFFFh +
jmp loc_10295B0  +
dec dword ptr [esi+4]  +
js loc_10294D7  +
mov eax [esi] +
mov [eax] bh +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_10294E3  +
movsx eax bh +
push esi  +
push eax  +
call sub_1025FB8  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10294BA  +
mov ax bx +
jmp loc_10295B0  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102952A  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102952A  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea ebx dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_102952C  +
mov eax edi +
test byte ptr [eax+4] 80h +
jz loc_1029590  +
push dword ptr [ebp+WideCharStr]  +
lea eax [ebp+UsedDefaultChar] +
push 5  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_102B1C5  +
add esp 10h +
test eax eax +
jnz loc_10294BA  +
xor ebx ebx +
cmp [ebp+var_10] ebx +
jle loc_102958A  +
dec dword ptr [esi+4]  +
js loc_102956D  +
mov eax [esi] +
mov cl byte ptr [ebp+ebx+UsedDefaultChar] +
mov [eax] cl +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102957B  +
movsx eax byte ptr [ebp+ebx+UsedDefaultChar] +
push esi  +
push eax  +
call sub_1025FB8  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10294BA  +
inc ebx  +
cmp ebx [ebp+var_10] +
jl loc_1029556  +
mov ax [ebp+WideCharStr] +
jmp loc_10295B0  +
add dword ptr [esi+4] 0FFFFFFFEh +
js loc_10295A3  +
mov ecx [esi] +
mov eax dword ptr [ebp+WideCharStr] +
mov [ecx] ax +
add dword ptr [esi] 2 +
jmp loc_10295B0  +
movzx eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_102DEF5  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10295E6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10295E2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_102964D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1029645  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_102964F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1029635  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1024E74  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_10295D0  +
pop ecx  +
test eax eax +
jz loc_10296B6  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1029610  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10296B6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10296BF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1024EB9  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
cmp ebx edi +
jnz loc_10297E0  +
mov eax [ebp+10h] +
cmp eax edi +
jz loc_10297E0  +
mov dword ptr [eax] 0Ch +
mov eax ebx +
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10296CA  +
mov edi eax +
add esp 0Ch +
test edi edi +
jnz loc_1029829  +
push esi  +
mov esi [ebp+var_4] +
test esi esi +
jz loc_1029828  +
call sub_10223A9  +
test eax eax +
jz loc_1029828  +
call sub_10223A9  +
mov [eax] esi +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
mov ecx eax +
sub esp 14h +
cmp [ebp+WideCharStr] cx +
jz locret_10298E6  +
push ebx  +
push [ebp+arg_4]  +
lea ecx [ebp+var_14] +
call sub_101FCB3  +
mov ecx [ebp+var_14] +
mov edx [ecx+14h] +
xor ebx ebx +
cmp edx ebx +
jnz loc_1029878  +
mov eax dword ptr [ebp+WideCharStr] +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_1029873  +
add eax 20h +
movzx eax ax +
jmp loc_10298D9  +
push esi  +
mov eax 100h +
mov esi eax +
cmp [ebp+WideCharStr] si +
pop esi  +
jnb loc_10298B0  +
lea eax [ebp+var_14] +
push eax  +
push 1  +
push dword ptr [ebp+WideCharStr]  +
call sub_10284EC  +
add esp 0Ch +
test eax eax +
movzx eax [ebp+WideCharStr] +
jz loc_10298D9  +
mov ecx [ebp+var_14] +
mov ecx [ecx+0CCh] +
movzx ax byte ptr [ecx+eax] +
jmp loc_1029873  +
push dword ptr [ecx+4]  +
lea ecx [ebp+DestStr] +
push 1  +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
push edx  +
lea eax [ebp+var_14] +
push eax  +
call sub_102E2C3  +
add esp 20h +
test eax eax +
movzx eax [ebp+WideCharStr] +
jz loc_10298D9  +
movzx eax [ebp+DestStr] +
cmp [ebp+var_8] bl +
jz loc_10298E5  +
mov ecx [ebp+var_C] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop ebx  +
leave   +
retn   +
***
call sub_1024E74  +
xor edi edi +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_10299C1  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10299C4  +
mov eax [eax+10h] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call sub_102E41B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1029A2F  +
mov eax dword_1039360 +
cmp esi 1 +
jnz loc_10299F2  +
test byte ptr [eax+4Ch] 1 +
jnz loc_10299FD  +
cmp esi 2 +
jnz loc_1029A13  +
test byte ptr [eax+28h] 1 +
jz loc_1029A13  +
push 2  +
call sub_102E41B  +
push 1  +
mov edi eax +
call sub_102E41B  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_1029A2F  +
push esi  +
call sub_102E41B  +
pop ecx  +
push eax  +
call ds:CloseHandle  +
test eax eax +
jnz loc_1029A2F  +
call ds:GetLastError  +
mov edi eax +
jmp loc_1029A31  +
xor edi edi +
push esi  +
call sub_102E390  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1039360[eax*4] +
pop ecx  +
mov byte ptr [eax+esi+4] 0 +
test edi edi +
jz loc_1029A5F  +
push edi  +
call sub_10223D9  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1029A61  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
test al 83h +
jz loc_1029BA9  +
test al 8 +
jz loc_1029BA9  +
push dword ptr [esi+8]  +
call sub_101F40A  +
and dword ptr [esi+0Ch] 0FFFFFBF7h +
xor eax eax +
pop ecx  +
mov [esi] eax +
mov [esi+8] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0Ch] +
mov ecx eax +
and cl 3 +
xor ebx ebx +
cmp cl 2 +
jnz loc_1029C0A  +
test eax 108h +
jz loc_1029C0A  +
mov eax [esi+8] +
push edi  +
mov edi [esi] +
sub edi eax +
test edi edi +
jle loc_1029C09  +
push edi  +
push eax  +
push esi  +
call sub_1029995  +
pop ecx  +
push eax  +
call sub_102BFFD  +
add esp 0Ch +
cmp eax edi +
jnz loc_1029C02  +
mov eax [esi+0Ch] +
test al al +
jns loc_1029C09  +
and eax 0FFFFFFFDh +
mov [esi+0Ch] eax +
jmp loc_1029C09  +
or dword ptr [esi+0Ch] 20h +
or ebx 0FFFFFFFFh +
pop edi  +
mov eax [esi+8] +
and dword ptr [esi+4] 0 +
mov [esi] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1029C34  +
push esi  +
call sub_1029C6B  +
pop ecx  +
jmp loc_1029C63  +
push esi  +
call sub_1029BB1  +
pop ecx  +
test eax eax +
jz loc_1029C44  +
or eax 0FFFFFFFFh +
jmp loc_1029C63  +
test dword ptr [esi+0Ch] 4000h +
jz loc_1029C61  +
push esi  +
call sub_1029995  +
push eax  +
call sub_102E72D  +
pop ecx  +
neg eax  +
pop ecx  +
sbb eax eax +
jmp loc_1029C63  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
call sub_1024E74  +
mov eax dword_103830C +
push dword ptr [eax+esi*4]  +
push esi  +
call sub_10292DF  +
pop ecx  +
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1038248 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_4] eax +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
mov [ebp+var_10] edi +
jmp loc_1029D7D  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_1029D7B  +
movzx eax word ptr [esi] +
cmp eax 61h +
jz loc_1029DC3  +
cmp eax 72h +
jz loc_1029DBB  +
cmp eax 77h +
jz loc_1029DB4  +
call sub_10223A9  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
xor eax eax +
jmp loc_1029FDD  +
mov ebx 301h +
jmp loc_1029DC8  +
xor ebx ebx +
or [ebp+var_4] 1 +
jmp loc_1029DCC  +
mov ebx 109h +
or [ebp+var_4] 2 +
xor ecx ecx +
inc ecx  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax di +
jz loc_1029F8E  +
mov edx 4000h +
cmp ecx edi +
jz loc_1029F0A  +
movzx eax ax +
cmp eax 53h +
jg loc_1029E90  +
jz loc_1029E7F  +
sub eax 20h +
jz loc_1029EFC  +
sub eax 0Bh +
jz loc_1029E60  +
dec eax  +
jz loc_1029E54  +
sub eax 18h +
jz loc_1029E43  +
sub eax 0Ah +
jz loc_1029E38  +
sub eax 4 +
jnz loc_1029D95  +
cmp [ebp+var_8] edi +
jnz loc_1029EF6  +
mov [ebp+var_8] 1 +
or ebx 10h +
jmp loc_1029EFC  +
or ebx 80h +
jmp loc_1029EFC  +
test bl 40h +
jnz loc_1029EF6  +
or ebx 40h +
jmp loc_1029EFC  +
mov [ebp+var_10] 1 +
jmp loc_1029EF6  +
test bl 2 +
jnz loc_1029EF6  +
mov eax [ebp+var_4] +
and ebx 0FFFFFFFEh +
and eax 0FFFFFFFCh +
or ebx 2 +
or eax 80h +
mov [ebp+var_4] eax +
jmp loc_1029EFC  +
cmp [ebp+var_8] edi +
jnz loc_1029EF6  +
mov [ebp+var_8] 1 +
or ebx 20h +
jmp loc_1029EFC  +
sub eax 54h +
jz loc_1029EED  +
sub eax 0Eh +
jz loc_1029EDD  +
dec eax  +
jz loc_1029ECC  +
sub eax 0Bh +
jz loc_1029EB7  +
sub eax 6 +
jnz loc_1029D95  +
test ebx 0C000h +
jnz loc_1029EF6  +
or ebx edx +
jmp loc_1029EFC  +
cmp [ebp+var_C] edi +
jnz loc_1029EF6  +
and [ebp+var_4] 0FFFFBFFFh +
mov [ebp+var_C] 1 +
jmp loc_1029EFC  +
cmp [ebp+var_C] edi +
jnz loc_1029EF6  +
or [ebp+var_4] edx +
mov [ebp+var_C] 1 +
jmp loc_1029EFC  +
test ebx 0C000h +
jnz loc_1029EF6  +
or ebx 8000h +
jmp loc_1029EFC  +
mov eax 1000h +
test ebx eax +
jz loc_1029EFA  +
xor ecx ecx +
jmp loc_1029EFC  +
or ebx eax +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax di +
jnz loc_1029DE2  +
cmp [ebp+var_10] edi +
jz loc_1029F8E  +
jmp loc_1029F13  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_1029F11  +
push 4  +
push esi  +
push offset aCcs  +
call sub_101FC77  +
add esp 0Ch +
test eax eax +
jnz loc_1029D95  +
add esi 8 +
push offset aUtf8  +
push esi  +
call sub_102F05B  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1029F50  +
add esi 0Ah +
or ebx 40000h +
jmp loc_1029F8E  +
push offset aUtf16le  +
push esi  +
call sub_102F05B  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1029F6C  +
add esi 10h +
or ebx 20000h +
jmp loc_1029F8E  +
push offset aUnicode_0  +
push esi  +
call sub_102F05B  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1029D95  +
add esi 0Eh +
or ebx 10000h +
jmp loc_1029F8E  +
inc esi  +
inc esi  +
cmp word ptr [esi] 20h +
jz loc_1029F8C  +
cmp [esi] di +
jnz loc_1029D95  +
push 180h  +
push [ebp+arg_8]  +
lea eax [ebp+arg_4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_102EF20  +
add esp 14h +
test eax eax +
jnz loc_1029DAD  +
mov eax [ebp+arg_C] +
inc dword_10381AC  +
mov ecx [ebp+var_4] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] edi +
mov [eax] edi +
mov [eax+8] edi +
mov [eax+1Ch] edi +
mov [eax+10h] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
push edi  +
mov ecx [esp+arg_0] +
test dword ptr [ecx+4] 6 +
mov eax 1 +
jz locret_102A1E9  +
mov eax [esp+arg_4] +
mov ecx [eax+8] +
xor ecx eax +
call sub_101F9B2  +
push ebp  +
mov ebp [eax+18h] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+10h]  +
push dword ptr [eax+14h]  +
call sub_102A114  +
add esp 0Ch +
pop ebp  +
mov eax [esp+arg_4] +
mov edx [esp+arg_C] +
mov [edx] eax +
mov eax 3 +
retn   +
***
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call sub_102A114  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_10381B8 eax +
mov dword_10381BC eax +
mov dword_10381C0 eax +
mov dword_10381C4 eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx dword_1036264 +
push esi  +
cmp [eax+4] edx +
jz loc_102A2B2  +
mov esi ecx +
imul esi esi +
add esi [ebp+arg_0] +
add eax 0Ch +
cmp eax esi +
jb loc_102A29E  +
imul ecx ecx +
add ecx [ebp+arg_0] +
pop esi  +
cmp eax ecx +
jnb loc_102A2C2  +
cmp [eax+4] edx +
jz loc_102A2C4  +
xor eax eax +
pop ebp  +
retn   +
***
pop ecx  +
retn   +
***
call sub_1024E74  +
cmp dword ptr [ebp-1Ch] 0 +
pop ecx  +
cmp ebx 8 +
jz loc_102A474  +
cmp ebx 0Bh +
jz loc_102A474  +
cmp ebx 4 +
jnz loc_102A485  +
mov eax [ebp-2Ch] +
mov [edi+60h] eax +
cmp ebx 8 +
jnz loc_102A485  +
mov eax [ebp-30h] +
mov [edi+64h] eax +
xor eax eax +
***
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_10381CC eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_10381D0 eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:InitializeCriticalSection  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
call sub_1024E74  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
push dword_10381D0  +
call sub_10218C4  +
pop ecx  +
mov esi eax +
cmp esi ebx +
jnz loc_102A559  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1020A8E  +
pop ecx  +
cmp eax ebx +
jz loc_102A512  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
cmp dword ptr [ebp-1Ch] 1 +
jz loc_102A548  +
push offset aKernelbase_d_0  +
mov esi ds:GetModuleHandleW +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_102A536  +
push offset LibFileName  +
call esi  +
cmp edi ebx +
jz loc_102A548  +
push offset aInitializecrit  +
push edi  +
call ds:GetProcAddress  +
mov esi eax +
cmp esi ebx +
jnz loc_102A54D  +
mov esi offset sub_102A4BA +
push esi  +
call sub_102183E  +
pop ecx  +
mov dword_10381D0 eax +
mov [ebp-4] ebx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-20h] eax +
jmp loc_102A598  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-24h] eax +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-24h] 0C0000017h +
jnz loc_102A594  +
push 8  +
call ds:SetLastError  +
and dword ptr [ebp-20h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102A4D4  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
call sub_10218B6  +
xor ebx ebx +
mov [ebp+var_10] eax +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
cmp dword_10381D4 ebx +
jnz loc_102A69F  +
push ebx  +
push ebx  +
push offset aUser32_dll  +
call ds:LoadLibraryExA  +
mov edi eax +
cmp edi ebx +
jnz loc_102A60A  +
xor eax eax +
jmp loc_102A763  +
mov esi ds:GetProcAddress +
push offset aMessageboxa  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_102A603  +
push eax  +
call sub_102183E  +
mov [esp+30h+var_30] offset aGetactivewindo +
push edi  +
mov dword_10381D4 eax +
call esi  +
push eax  +
call sub_102183E  +
mov [esp+30h+var_30] offset aGetlastactivep +
push edi  +
mov dword_10381D8 eax +
call esi  +
push eax  +
call sub_102183E  +
mov dword_10381DC eax +
lea eax [ebp+var_8] +
push eax  +
call sub_1020A8E  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102A66D  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
cmp [ebp+var_8] 2 +
jnz loc_102A69F  +
push offset aGetuserobjecti  +
push edi  +
call esi  +
push eax  +
call sub_102183E  +
pop ecx  +
mov dword_10381E4 eax +
cmp eax ebx +
jz loc_102A69F  +
push offset aGetprocesswind  +
push edi  +
call esi  +
push eax  +
call sub_102183E  +
pop ecx  +
mov dword_10381E0 eax +
mov eax dword_10381E0 +
mov esi [ebp+var_10] +
cmp eax esi +
jz loc_102A718  +
cmp dword_10381E4 esi +
jz loc_102A718  +
push eax  +
call sub_10218C4  +
pop ecx  +
call eax  +
cmp eax ebx +
jz loc_102A6E5  +
lea ecx [ebp+var_14] +
push ecx  +
push 0Ch  +
lea ecx [ebp+var_20] +
push ecx  +
push 1  +
push eax  +
push dword_10381E4  +
call sub_10218C4  +
pop ecx  +
call eax  +
test eax eax +
jz loc_102A6E5  +
test [ebp+var_18] 1 +
jnz loc_102A718  +
lea eax [ebp+var_C] +
push eax  +
call sub_1020ACF  +
pop ecx  +
test eax eax +
jz loc_102A700  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
cmp [ebp+var_C] 4 +
jb loc_102A70F  +
or [ebp+arg_8] 200000h +
jmp loc_102A749  +
or [ebp+arg_8] 40000h +
jmp loc_102A749  +
mov eax dword_10381D8 +
cmp eax esi +
jz loc_102A749  +
push eax  +
call sub_10218C4  +
pop ecx  +
call eax  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_102A749  +
mov eax dword_10381DC +
cmp eax esi +
jz loc_102A749  +
push [ebp+var_4]  +
push eax  +
call sub_10218C4  +
pop ecx  +
call eax  +
mov [ebp+var_4] eax +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
push dword_10381D4  +
call sub_10218C4  +
pop ecx  +
call eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp eax ebx +
jz loc_102A785  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_102A7A0  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_102A7DC  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_102A7AB  +
mov [eax] bl +
jmp loc_102A785  +
mov edx eax +
cmp [edx] bl +
jz loc_102A7B5  +
inc edx  +
dec edi  +
jnz loc_102A7AD  +
cmp edi ebx +
jz loc_102A7A7  +
mov cl [esi] +
mov [edx] cl +
inc edx  +
inc esi  +
cmp cl bl +
jz loc_102A7C6  +
dec edi  +
jnz loc_102A7B9  +
cmp edi ebx +
jnz loc_102A7DA  +
mov [eax] bl +
call sub_10223A9  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102A78F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ecx esi +
jl loc_102A813  +
cmp ecx 2 +
jle loc_102A806  +
cmp ecx 3 +
jnz loc_102A813  +
mov eax dword_1037864 +
jmp loc_102A82E  +
mov eax dword_1037864 +
mov dword_1037864 ecx +
jmp loc_102A82E  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
movzx eax [ebp+arg_4] +
mov ecx [ebp+var_C] +
mov dl [ebp+arg_C] +
test [ecx+eax+1Dh] dl +
jnz loc_102A877  +
cmp [ebp+arg_8] 0 +
jz loc_102A871  +
mov ecx [ebp+var_10] +
mov ecx [ecx+0C8h] +
movzx eax word ptr [ecx+eax*2] +
and eax [ebp+arg_8] +
jmp loc_102A873  +
xor eax eax +
test eax eax +
jz loc_102A87A  +
xor eax eax +
inc eax  +
cmp [ebp+var_4] 0 +
jz locret_102A887  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
push 0  +
push [ebp+arg_0]  +
push 0  +
call sub_102A836  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor esi esi +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10296CA  +
mov edi eax +
add esp 0Ch +
test edi edi +
jnz loc_102A8F1  +
cmp dword_10381E8 eax +
jbe loc_102A8F1  +
push esi  +
call ds:Sleep  +
lea eax [esi+3E8h] +
cmp eax dword_10381E8 +
jbe loc_102A8EA  +
or eax 0FFFFFFFFh +
mov esi eax +
cmp eax 0FFFFFFFFh +
jnz loc_102A8B4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ebp+arg_0] +
cmp ax 30h +
jnb loc_102A912  +
mov eax 0FFFFFFFFh +
pop ebp  +
retn   +
cmp ax 3Ah +
jnb loc_102A920  +
movzx eax ax +
sub eax 30h +
pop ebp  +
retn   +
mov ecx 0FF10h +
mov edx ecx +
cmp ax dx +
jnb loc_102AAC4  +
mov ecx 660h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jnb loc_102A94F  +
movzx eax ax +
sub eax ecx +
pop ebp  +
retn   +
mov ecx 6F0h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 966h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 9E6h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0A66h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0AE6h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0B66h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0C66h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0CE6h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0D66h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0E50h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 0ED0h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
add ecx 50h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
mov edx 0F2Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 1040h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
mov ecx 17E0h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
add edx 0Ah +
cmp ax dx +
jb loc_102A948  +
add ecx 30h +
mov edx ecx +
cmp ax dx +
jb loc_102AAD2  +
mov edx 181Ah +
jmp loc_102AAC9  +
mov edx 0FF1Ah +
cmp ax dx +
jb loc_102A948  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_102AAF9  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
or eax eax +
jnz loc_102AB51  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_102AB98  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_102AB5F  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_102AB8D  +
cmp edx [esp+arg_4] +
ja loc_102AB8D  +
jb loc_102AB96  +
cmp eax [esp+arg_0] +
jbe loc_102AB96  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov eax [ebp+var_10] +
cmp dword ptr [eax+0ACh] 1 +
jle loc_102ABEC  +
lea eax [ebp+var_10] +
push eax  +
push 4  +
push [ebp+arg_0]  +
call sub_102F0F3  +
add esp 0Ch +
jmp loc_102ABFC  +
mov eax [eax+0C8h] +
mov ecx [ebp+arg_0] +
movzx eax word ptr [eax+ecx*2] +
and eax 4 +
cmp [ebp+var_4] 0 +
jz locret_102AC09  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1038188 0 +
jnz loc_102AC39  +
or eax 0FFFFFFFFh +
cmp [ebp+arg_0] eax +
jz loc_102AC2A  +
movzx eax byte ptr [ebp+arg_0] +
mov ecx off_1036B50 +
movzx eax word ptr [ecx+eax*2] +
and eax 4 +
pop ebp  +
retn   +
push 0  +
push [ebp+arg_0]  +
call sub_102ABBA  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov eax [ebp+var_10] +
cmp dword ptr [eax+0ACh] 1 +
jle loc_102AC81  +
lea eax [ebp+var_10] +
push eax  +
push 80h  +
push [ebp+arg_0]  +
call sub_102F0F3  +
add esp 0Ch +
jmp loc_102AC93  +
mov eax [eax+0C8h] +
mov ecx [ebp+arg_0] +
movzx eax word ptr [eax+ecx*2] +
and eax 80h +
cmp [ebp+var_4] 0 +
jz locret_102ACA0  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1038188 0 +
jnz loc_102ACD2  +
or eax 0FFFFFFFFh +
cmp [ebp+arg_0] eax +
jz loc_102ACC1  +
movzx eax byte ptr [ebp+arg_0] +
mov ecx off_1036B50 +
movzx eax word ptr [ecx+eax*2] +
and eax 80h +
pop ebp  +
retn   +
push 0  +
push [ebp+arg_0]  +
call sub_102AC4C  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi dword ptr [ebp+WideCharStr] +
test byte ptr [esi+0Ch] 40h +
push edi  +
mov ebx offset unk_1036268 +
jnz loc_102AE72  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102AD3A  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102AD3A  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
jmp loc_102AD3C  +
mov eax ebx +
test byte ptr [eax+8] 3 +
jz loc_102AD91  +
dec dword ptr [esi+4]  +
js loc_102AD51  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102AD58  +
push esi  +
call sub_102F48B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102AD67  +
mov eax 0FFFFh +
jmp loc_102AE8B  +
dec dword ptr [esi+4]  +
mov byte ptr [ebp+WideCharStr] al +
js loc_102AD79  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102AD80  +
push esi  +
call sub_102F48B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102AD5D  +
mov byte ptr [ebp+WideCharStr+1] al +
mov ax [ebp+WideCharStr] +
jmp loc_102AE8B  +
test byte ptr [esi+0Ch] 40h +
jnz loc_102AE72  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102ADD5  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102ADD5  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
jmp loc_102ADD7  +
mov eax ebx +
test byte ptr [eax+4] 80h +
jz loc_102AE72  +
xor edi edi +
inc edi  +
dec dword ptr [esi+4]  +
js loc_102ADF3  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102ADFA  +
push esi  +
call sub_102F48B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102AD5D  +
mov byte ptr [ebp+var_4] al +
movzx eax al +
push eax  +
call sub_101FD96  +
pop ecx  +
test eax eax +
jz loc_102AE48  +
dec dword ptr [esi+4]  +
js loc_102AE23  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102AE2A  +
push esi  +
call sub_102F48B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102AE42  +
movsx eax byte ptr [ebp+var_4] +
push esi  +
push eax  +
call sub_102F414  +
pop ecx  +
mov eax 0FFFFh +
jmp loc_102AE8A  +
push 2  +
mov byte ptr [ebp+var_4+1] al +
pop edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_102C30B  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_102AD88  +
call sub_10223A9  +
mov dword ptr [eax] 2Ah +
jmp loc_102AD5D  +
add dword ptr [esi+4] 0FFFFFFFEh +
js loc_102AE84  +
mov ecx [esi] +
movzx eax word ptr [ecx] +
add ecx 2 +
mov [esi] ecx +
jmp loc_102AE8B  +
push esi  +
call sub_102F1B0  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx dword ptr [ebp+WideCharStr] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi 0FFFFh +
mov eax edi +
cmp bx ax +
jz loc_102B026  +
mov eax [esi+0Ch] +
test al 1 +
jnz loc_102AED7  +
test al al +
jns loc_102B026  +
test al 2 +
jnz loc_102B026  +
cmp dword ptr [esi+8] 0 +
jnz loc_102AEE4  +
push esi  +
call sub_102C0DE  +
pop ecx  +
test byte ptr [esi+0Ch] 40h +
jnz loc_102AFF9  +
push esi  +
call sub_1029995  +
pop ecx  +
mov ebx offset unk_1036268 +
cmp eax 0FFFFFFFFh +
jz loc_102AF32  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102AF32  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
mov edi 0FFFFh +
jmp loc_102AF34  +
mov eax ebx +
test byte ptr [eax+4] 80h +
jz loc_102AFF6  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102AF7D  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102AF7D  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
mov edi 0FFFFh +
jmp loc_102AF7F  +
mov eax ebx +
test byte ptr [eax+8] 3 +
jz loc_102AF96  +
mov edx dword ptr [ebp+WideCharStr] +
push 2  +
pop eax  +
mov byte ptr [ebp+UsedDefaultChar] dl +
mov byte ptr [ebp+UsedDefaultChar+1] dh +
mov [ebp+var_10] eax +
jmp loc_102AFB5  +
push dword ptr [ebp+WideCharStr]  +
lea eax [ebp+UsedDefaultChar] +
push 5  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_102B1C5  +
add esp 10h +
test eax eax +
jnz loc_102B026  +
mov eax [ebp+var_10] +
mov edx dword ptr [ebp+WideCharStr] +
mov ecx [esi+8] +
add ecx eax +
cmp [esi] ecx +
jnb loc_102AFCB  +
cmp dword ptr [esi+4] 0 +
jnz loc_102B026  +
cmp eax [esi+18h] +
jg loc_102B026  +
mov [esi] ecx +
lea ecx [eax-1] +
test ecx ecx +
jl loc_102AFE2  +
dec dword ptr [esi]  +
dec ecx  +
mov bl byte ptr [ebp+ecx+UsedDefaultChar+1] +
mov eax [esi] +
mov [eax] bl +
jns loc_102AFD2  +
mov eax [ebp+var_10] +
add [esi+4] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 1 +
mov [esi+0Ch] eax +
mov ax dx +
jmp loc_102B028  +
mov ebx dword ptr [ebp+WideCharStr] +
mov eax [esi+8] +
add eax 2 +
cmp [esi] eax +
jnb loc_102B011  +
cmp dword ptr [esi+4] 0 +
jnz loc_102B026  +
cmp dword ptr [esi+18h] 2 +
jb loc_102B026  +
mov [esi] eax +
add dword ptr [esi] 0FFFFFFFEh +
test byte ptr [esi+0Ch] 40h +
mov eax [esi] +
jz loc_102B037  +
cmp [eax] bx +
jz loc_102B03A  +
add eax 2 +
mov [esi] eax +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
mov [eax] bx +
mov eax [esi+0Ch] +
add dword ptr [esi+4] 2 +
and eax 0FFFFFFEFh +
or eax 1 +
mov [esi+0Ch] eax +
mov ax bx +
jmp loc_102B028  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+UsedDefaultChar] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_8] +
cmp esi ebx +
jnz loc_102B07F  +
cmp edi ebx +
jbe loc_102B07F  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_102B078  +
mov [eax] ebx +
xor eax eax +
jmp loc_102B102  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_102B089  +
or dword ptr [eax] 0FFFFFFFFh +
cmp edi 7FFFFFFFh +
jbe loc_102B0AC  +
call sub_10223A9  +
push 16h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_102B102  +
push [ebp+arg_10]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov eax [ebp+var_10] +
cmp [eax+14h] ebx +
jnz loc_102B15F  +
mov ax [ebp+WideCharStr] +
mov ecx 0FFh +
cmp ax cx +
jbe loc_102B107  +
cmp esi ebx +
jz loc_102B0E4  +
cmp edi ebx +
jbe loc_102B0E4  +
push edi  +
push ebx  +
push esi  +
call sub_101EDB0  +
add esp 0Ch +
call sub_10223A9  +
mov dword ptr [eax] 2Ah +
call sub_10223A9  +
mov eax [eax] +
cmp [ebp+var_4] bl +
jz loc_102B102  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp esi ebx +
jz loc_102B13D  +
cmp edi ebx +
ja loc_102B13B  +
call sub_10223A9  +
push 22h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_4] bl +
jz loc_102B0A8  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
jmp loc_102B0A8  +
mov [esi] al +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_102B14A  +
mov dword ptr [eax] 1 +
cmp [ebp+var_4] bl +
jz loc_102B078  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
jmp loc_102B078  +
lea ecx [ebp+UsedDefaultChar] +
push ecx  +
push ebx  +
push edi  +
push esi  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push ebx  +
mov [ebp+UsedDefaultChar] ebx +
push dword ptr [eax+4]  +
call ds:WideCharToMultiByte  +
cmp eax ebx +
jz loc_102B191  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_102B0E4  +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jz loc_102B14A  +
mov [ecx] eax +
jmp loc_102B14A  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_102B0E4  +
cmp esi ebx +
jz loc_102B10F  +
cmp edi ebx +
jbe loc_102B10F  +
push edi  +
push ebx  +
push esi  +
call sub_101EDB0  +
add esp 0Ch +
jmp loc_102B10F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+WideCharStr]  +
push [ebp+arg_8]  +
push [ebp+UsedDefaultChar]  +
push [ebp+arg_0]  +
call sub_102B054  +
add esp 14h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+lpMultiByteStr] esi +
mov [ebp+lpWideCharStr] edi +
mov [ebp+UsedDefaultChar] ebx +
cmp esi ebx +
jz loc_102B21D  +
cmp [ebp+cchMultiByte] ebx +
jnz loc_102B21D  +
xor eax eax +
jmp loc_102B35A  +
cmp edi ebx +
jnz loc_102B23E  +
call sub_10223A9  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
jmp loc_102B357  +
cmp [ebp+cchMultiByte] 7FFFFFFFh +
ja loc_102B221  +
push [ebp+arg_C]  +
lea ecx [ebp+var_20] +
call sub_101FCB3  +
cmp esi ebx +
jz loc_102B3D8  +
mov esi [ebp+var_20] +
cmp [esi+14h] ebx +
jnz loc_102B2A4  +
mov eax ebx +
cmp [ebp+cchMultiByte] ebx +
jbe loc_102B28F  +
mov ecx 0FFh +
cmp [edi] cx +
ja loc_102B340  +
mov cl [edi] +
mov edx [ebp+lpMultiByteStr] +
mov [edx+eax] cl +
mov cx [edi] +
inc edi  +
inc edi  +
test cx cx +
jz loc_102B28F  +
inc eax  +
cmp eax [ebp+cchMultiByte] +
jb loc_102B269  +
cmp [ebp+var_14] bl +
jz loc_102B35A  +
mov ecx [ebp+var_18] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_102B35A  +
cmp dword ptr [esi+0ACh] 1 +
jnz loc_102B301  +
mov ecx [ebp+cchMultiByte] +
cmp ecx ebx +
jbe loc_102B2D1  +
mov eax edi +
cmp [eax] bx +
jz loc_102B2C0  +
inc eax  +
inc eax  +
dec ecx  +
jnz loc_102B2B6  +
cmp ecx ebx +
jz loc_102B2D1  +
cmp [eax] bx +
jnz loc_102B2D1  +
sub eax edi +
sar eax 1 +
inc eax  +
mov [ebp+cchMultiByte] eax +
lea eax [ebp+UsedDefaultChar] +
push eax  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push [ebp+cchMultiByte]  +
push edi  +
push ebx  +
push dword ptr [esi+4]  +
call ds:WideCharToMultiByte  +
cmp eax ebx +
jz loc_102B340  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_102B340  +
mov ecx [ebp+lpMultiByteStr] +
cmp [ecx+eax-1] bl +
jnz loc_102B28F  +
jmp loc_102B41D  +
lea eax [ebp+UsedDefaultChar] +
push eax  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push dword ptr [esi+4]  +
call ds:WideCharToMultiByte  +
mov edi eax +
cmp edi ebx +
jz loc_102B32C  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_102B340  +
lea eax [edi-1] +
jmp loc_102B28F  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_102B340  +
call ds:GetLastError  +
cmp eax 7Ah +
jz loc_102B3C3  +
call sub_10223A9  +
mov dword ptr [eax] 2Ah +
cmp [ebp+var_14] bl +
jz loc_102B357  +
mov eax [ebp+var_18] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
lea eax [ebp+UsedDefaultChar] +
push eax  +
push ebx  +
push dword ptr [esi+0ACh]  +
lea eax [ebp+MultiByteStr] +
push eax  +
push 1  +
push [ebp+lpWideCharStr]  +
push ebx  +
push dword ptr [esi+4]  +
call ds:WideCharToMultiByte  +
mov [ebp+var_2C] eax +
cmp eax ebx +
jz loc_102B340  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_102B340  +
cmp eax ebx +
jl loc_102B340  +
cmp eax 5 +
ja loc_102B340  +
lea ecx [eax+edi] +
cmp ecx [ebp+cchMultiByte] +
ja loc_102B3C8  +
xor edx edx +
cmp eax ebx +
jle loc_102B3BF  +
mov cl [ebp+edx+MultiByteStr] +
mov eax [ebp+lpMultiByteStr] +
mov [eax+edi] cl +
cmp cl bl +
jz loc_102B3C8  +
inc edx  +
inc edi  +
cmp edx [ebp+var_2C] +
jl loc_102B3AA  +
add [ebp+lpWideCharStr] 2 +
cmp edi [ebp+cchMultiByte] +
jb loc_102B369  +
cmp [ebp+var_14] bl +
jz loc_102B3D4  +
mov eax [ebp+var_18] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax edi +
jmp loc_102B35A  +
mov eax [ebp+var_20] +
cmp [eax+14h] ebx +
jnz loc_102B3F8  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_102B3E5  +
sub eax edx +
sar eax 1 +
jmp loc_102B28F  +
lea ecx [ebp+UsedDefaultChar] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push dword ptr [eax+4]  +
call ds:WideCharToMultiByte  +
cmp eax ebx +
jz loc_102B340  +
cmp [ebp+UsedDefaultChar] ebx +
jnz loc_102B340  +
dec eax  +
jmp loc_102B28F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_4] ebx +
cmp esi ebx +
jz loc_102B462  +
cmp edi ebx +
ja loc_102B466  +
call sub_10223A9  +
push 16h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1022352  +
mov eax esi +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp edi ebx +
jnz loc_102B444  +
cmp esi ebx +
jz loc_102B46C  +
mov [esi] bl +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_102B475  +
mov [eax] ebx +
mov eax [ebp+arg_10] +
cmp eax edi +
jbe loc_102B47E  +
mov eax edi +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_C]  +
push esi  +
call sub_102B1E7  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jnz loc_102B4A2  +
cmp esi ebx +
jz loc_102B499  +
mov [esi] bl +
call sub_10223A9  +
mov eax [eax] +
jmp loc_102B45D  +
inc eax  +
cmp esi ebx +
jz loc_102B4CD  +
cmp eax edi +
jbe loc_102B4C9  +
cmp [ebp+arg_10] 0FFFFFFFFh +
jz loc_102B4C0  +
mov [esi] bl +
cmp edi eax +
ja loc_102B4C0  +
call sub_10223A9  +
push 22h  +
jmp loc_102B44B  +
mov eax edi +
mov [ebp+var_4] 50h +
mov [eax+esi-1] bl +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jz loc_102B4D6  +
mov [ecx] eax +
mov eax [ebp+var_4] +
jmp loc_102B45D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102B428  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
cmp [ebp+arg_0] 0 +
jnz loc_102B515  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp-4] eax +
test byte_1036E20 1 +
push esi  +
jz loc_102B543  +
push 0Ah  +
call sub_1020D1A  +
pop ecx  +
call sub_102A2CB  +
test eax eax +
jz loc_102B554  +
push 16h  +
call sub_102A2DD  +
pop ecx  +
test byte_1036E20 2 +
jz loc_102B62B  +
mov [ebp-220h] eax +
mov [ebp-224h] ecx +
mov [ebp-228h] edx +
mov [ebp-22Ch] ebx +
mov [ebp-230h] esi +
mov [ebp-234h] edi +
mov word ptr [ebp-208h] ss +
mov word ptr [ebp-214h] cs +
mov word ptr [ebp-238h] ds +
mov word ptr [ebp-23Ch] es +
mov word ptr [ebp-240h] fs +
mov [ebp-244h] gs +
pushf   +
pop dword ptr [ebp-210h]  +
mov esi [ebp+4] +
lea eax [ebp+4] +
mov [ebp-20Ch] eax +
mov dword ptr [ebp-2D0h] 10001h +
mov [ebp-218h] esi +
mov eax [eax-4] +
push 50h  +
mov [ebp-21Ch] eax +
lea eax [ebp-328h] +
push 0  +
push eax  +
call sub_101EDB0  +
lea eax [ebp-328h] +
add esp 0Ch +
mov [ebp-2D8h] eax +
lea eax [ebp-2D0h] +
push 0  +
mov dword ptr [ebp-328h] 40000015h +
mov [ebp-31Ch] esi +
mov [ebp-2D4h] eax +
call ds:SetUnhandledExceptionFilter  +
lea eax [ebp-2D8h] +
push eax  +
call ds:UnhandledExceptionFilter  +
push 3  +
call sub_1020C90  +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push ebp  +
push 0  +
push 0  +
push offset loc_102B650  +
push dword ptr [ebp+8]  +
call RtlUnwind  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov eax [esp+arg_0] +
push ebp  +
push eax  +
push 0FFFFFFFEh  +
push offset loc_102B658  +
push large dword ptr fs:0  +
mov eax dword_1036118 +
xor eax esp +
push eax  +
lea eax [esp+18h+var_14] +
mov large fs:0 eax +
mov eax [esp+18h+arg_0] +
mov ebx [eax+8] +
mov esi [eax+0Ch] +
cmp esi 0FFFFFFFFh +
jz loc_102B70F  +
cmp [esp+18h+arg_4] 0FFFFFFFFh +
jz loc_102B6E2  +
cmp esi [esp+18h+arg_4] +
jbe loc_102B70F  +
lea esi [esi+esi*2] +
mov ecx [ebx+esi*4] +
mov [esp+18h+var_C] ecx +
mov [eax+0Ch] ecx +
cmp dword ptr [ebx+esi*4+4] 0 +
jnz loc_102B70D  +
push 101h  +
mov eax [ebx+esi*4+8] +
call sub_102B74D  +
mov eax [ebx+esi*4+8] +
call sub_102B76C  +
jmp loc_102B6C6  +
mov ecx [esp+18h+var_14] +
mov large fs:0 ecx +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx offset unk_1036E24 +
mov ebx offset unk_1036E24 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+lDistanceToMove] eax +
mov eax [ebp+arg_8] +
push edi  +
push esi  +
mov [ebp+DistanceToMoveHigh] eax +
call sub_102E41B  +
or edi 0FFFFFFFFh +
pop ecx  +
cmp eax edi +
jnz loc_102B7AB  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
mov eax edi +
mov edx edi +
jmp loc_102B7F5  +
push [ebp+dwMoveMethod]  +
lea ecx [ebp+DistanceToMoveHigh] +
push ecx  +
push [ebp+lDistanceToMove]  +
push eax  +
call ds:SetFilePointer  +
mov [ebp+lDistanceToMove] eax +
cmp eax edi +
jnz loc_102B7D6  +
call ds:GetLastError  +
test eax eax +
jz loc_102B7D6  +
push eax  +
call sub_10223D9  +
pop ecx  +
jmp loc_102B7A5  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1039360[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FDh +
mov eax [ebp+lDistanceToMove] +
mov edx [ebp+DistanceToMoveHigh] +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 594h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
xor esi esi +
mov [ebp+lpBuffer] eax +
mov [ebp+var_570] esi +
mov [ebp+var_578] esi +
cmp [ebp+nNumberOfBytesToWrite] esi +
jnz loc_102B955  +
xor eax eax +
jmp loc_102BFEB  +
cmp eax esi +
jnz loc_102B980  +
call sub_10223C1  +
mov [eax] esi +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_102BFEB  +
mov esi [ebp+arg_0] +
push ebx  +
mov ebx esi +
and ebx 1Fh +
imul ebx ebx +
mov eax esi +
sar eax 5 +
push edi  +
lea edi dword_1039360[eax*4] +
mov eax [edi] +
add eax ebx +
mov ecx [eax+8] +
and ecx 3 +
mov [ebp+var_580] edi +
mov [ebp+CodePage] ebx +
mov [ebp+var_588] ecx +
cmp ecx 2 +
jz loc_102B9BF  +
cmp ecx 1 +
jnz loc_102B9EF  +
mov ecx [ebp+nNumberOfBytesToWrite] +
not ecx  +
test cl 1 +
jnz loc_102B9EF  +
call sub_10223C1  +
xor esi esi +
mov [eax] esi +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
jmp loc_102BFDE  +
test byte ptr [eax+4] 20h +
jz loc_102BA04  +
push 2  +
push 0  +
push 0  +
push esi  +
call sub_102B774  +
add esp 10h +
push esi  +
call sub_102C132  +
pop ecx  +
test eax eax +
jz loc_102BC70  +
mov eax [edi] +
test byte ptr [ebx+eax+4] 80h +
jz loc_102BC70  +
call sub_1021B55  +
mov eax [eax+6Ch] +
xor ecx ecx +
cmp [eax+14h] ecx +
lea eax [ebp+Mode] +
setz cl  +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
mov esi ecx +
call ds:GetConsoleMode  +
test eax eax +
jz loc_102BC70  +
test esi esi +
jz loc_102BA5D  +
cmp [ebp+var_588] 0 +
jz loc_102BC70  +
call ds:GetConsoleCP  +
and [ebp+NumberOfBytesWritten] 0 +
cmp [ebp+nNumberOfBytesToWrite] 0 +
mov esi [ebp+lpBuffer] +
mov [ebp+CodePage] eax +
mov [ebp+var_590] esi +
jbe loc_102BF77  +
and [ebp+var_568] 0 +
jmp loc_102BA95  +
mov esi [ebp+var_590] +
mov eax [ebp+var_588] +
test eax eax +
jnz loc_102BBD0  +
mov al [esi] +
xor ecx ecx +
cmp al 0Ah +
setz cl  +
movsx eax al +
push eax  +
mov [ebp+Mode] ecx +
call sub_101FD96  +
pop ecx  +
test eax eax +
jnz loc_102BADD  +
push 1  +
lea eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_102C30B  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102BF6D  +
jmp loc_102BB13  +
mov eax [ebp+lpBuffer] +
sub eax esi +
add eax [ebp+nNumberOfBytesToWrite] +
cmp eax 1 +
jbe loc_102BF6D  +
push 2  +
lea eax [ebp+WideCharStr] +
push esi  +
push eax  +
call sub_102C30B  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102BF6D  +
inc esi  +
inc [ebp+var_568]  +
xor eax eax +
push eax  +
push eax  +
push 5  +
lea ecx [ebp+Buffer] +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
push [ebp+CodePage]  +
inc esi  +
inc [ebp+var_568]  +
mov [ebp+var_590] esi +
call ds:WideCharToMultiByte  +
mov esi eax +
test esi esi +
jz loc_102BF6D  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102BF61  +
mov eax [ebp+NumberOfBytesWritten] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_102BF6D  +
cmp [ebp+Mode] 0 +
jz loc_102BC5C  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 1  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [edi] +
mov [ebp+Buffer] 0Dh +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102BF61  +
cmp [ebp+NumberOfBytesWritten] 1 +
jl loc_102BF6D  +
inc [ebp+var_578]  +
inc [ebp+var_570]  +
jmp loc_102BC5C  +
cmp eax 1 +
jz loc_102BBDA  +
cmp eax 2 +
jnz loc_102BC01  +
movzx ecx word ptr [esi] +
xor edx edx +
cmp cx 0Ah +
setz dl  +
inc esi  +
inc esi  +
add [ebp+var_568] 2 +
mov dword ptr [ebp+WideCharStr] ecx +
mov [ebp+var_590] esi +
mov [ebp+Mode] edx +
cmp eax 1 +
jz loc_102BC0B  +
cmp eax 2 +
jnz loc_102BC5C  +
push dword ptr [ebp+WideCharStr]  +
call sub_102F5E2  +
pop ecx  +
cmp ax [ebp+WideCharStr] +
jnz loc_102BF61  +
inc [ebp+var_570]  +
cmp [ebp+Mode] 0 +
jz loc_102BC5C  +
push 0Dh  +
pop eax  +
push eax  +
mov dword ptr [ebp+WideCharStr] eax +
call sub_102F5E2  +
pop ecx  +
cmp ax [ebp+WideCharStr] +
jnz loc_102BF61  +
inc [ebp+var_570]  +
inc [ebp+var_578]  +
mov eax [ebp+nNumberOfBytesToWrite] +
cmp [ebp+var_568] eax +
jb loc_102BA8F  +
jmp loc_102BF6D  +
mov eax [edi] +
add eax ebx +
test byte ptr [eax+4] 80h +
jz loc_102BF2E  +
xor eax eax +
mov dword ptr [ebp+WideCharStr] eax +
cmp [ebp+var_588] eax +
jnz loc_102BD4D  +
mov ecx [ebp+lpBuffer] +
mov [ebp+var_568] ecx +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_102BFAD  +
mov ecx [ebp+var_568] +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_564] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_102BCF1  +
mov edx [ebp+var_568] +
inc [ebp+var_568]  +
mov dl [edx] +
inc ecx  +
cmp dl 0Ah +
jnz loc_102BCDF  +
inc [ebp+var_578]  +
mov byte ptr [eax] 0Dh +
inc eax  +
inc esi  +
mov edi [ebp+var_580] +
mov [eax] dl +
inc eax  +
inc esi  +
cmp esi 400h +
jb loc_102BCBB  +
mov esi eax +
lea eax [ebp+var_564] +
sub esi eax +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
push esi  +
lea eax [ebp+var_564] +
push eax  +
mov eax [edi] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102BF61  +
mov eax [ebp+var_57C] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_102BF6D  +
mov eax [ebp+var_568] +
sub eax [ebp+lpBuffer] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_102BCA7  +
jmp loc_102BF6D  +
cmp [ebp+var_588] 2 +
jnz loc_102BE23  +
mov edi [ebp+lpBuffer] +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_102BFAD  +
mov ecx edi +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_564] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_102BDBD  +
movzx edx word ptr [edi] +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
cmp dx 0Ah +
jnz loc_102BDAA  +
cmp esi 3FDh +
ja loc_102BDBB  +
add [ebp+var_578] 2 +
push 0Dh  +
pop ebx  +
mov [eax] bx +
mov ebx [ebp+CodePage] +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
mov [eax] dx +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
cmp esi 3FFh +
jb loc_102BD79  +
jmp loc_102BDBD  +
dec edi  +
dec edi  +
mov esi eax +
lea eax [ebp+var_564] +
sub esi eax +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
push esi  +
lea eax [ebp+var_564] +
push eax  +
mov eax [ebp+var_580] +
mov eax [eax] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102BF61  +
mov eax [ebp+var_57C] +
add [ebp+var_570] eax +
cmp eax esi +
jl loc_102BF6D  +
test eax eax +
jz loc_102BF6D  +
mov eax edi +
sub eax [ebp+lpBuffer] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_102BD69  +
jmp loc_102BF6D  +
mov ecx [ebp+lpBuffer] +
mov [ebp+var_568] ecx +
cmp [ebp+nNumberOfBytesToWrite] eax +
jbe loc_102BFAD  +
mov ecx [ebp+var_568] +
xor esi esi +
sub ecx [ebp+lpBuffer] +
lea eax [ebp+var_160] +
cmp ecx [ebp+nNumberOfBytesToWrite] +
jnb loc_102BE93  +
mov edx [ebp+var_568] +
add [ebp+var_568] 2 +
movzx edx word ptr [edx] +
inc ecx  +
inc ecx  +
cmp dx 0Ah +
jnz loc_102BE7B  +
cmp esi 150h +
ja loc_102BE8C  +
push 0Dh  +
pop edi  +
mov [eax] di +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
mov [eax] dx +
inc eax  +
inc eax  +
inc esi  +
inc esi  +
cmp esi 152h +
jb loc_102BE4C  +
jmp loc_102BE93  +
sub [ebp+var_568] 2 +
xor esi esi +
push esi  +
push esi  +
push 2ABh  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
lea ecx [ebp+var_160] +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
mov eax ecx +
push eax  +
push esi  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
mov edi eax +
cmp edi esi +
jz loc_102BF61  +
push 0  +
lea eax [ebp+var_57C] +
push eax  +
mov eax edi +
sub eax esi +
push eax  +
lea eax [ebp+esi+MultiByteStr] +
push eax  +
mov eax [ebp+var_580] +
mov eax [eax] +
push dword ptr [ebx+eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102BF01  +
add esi [ebp+var_57C] +
cmp edi esi +
jg loc_102BECA  +
jmp loc_102BF0D  +
call ds:GetLastError  +
mov dword ptr [ebp+WideCharStr] eax +
cmp edi esi +
jg loc_102BF6D  +
mov eax [ebp+var_568] +
sub eax [ebp+lpBuffer] +
mov [ebp+var_570] eax +
cmp eax [ebp+nNumberOfBytesToWrite] +
jb loc_102BE38  +
jmp loc_102BF6D  +
push 0  +
lea ecx [ebp+var_57C] +
push ecx  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push dword ptr [eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_102BF61  +
mov eax [ebp+var_57C] +
and dword ptr [ebp+WideCharStr] 0 +
mov [ebp+var_570] eax +
jmp loc_102BF6D  +
call ds:GetLastError  +
mov dword ptr [ebp+WideCharStr] eax +
mov eax [ebp+var_570] +
test eax eax +
jnz loc_102BFE3  +
cmp dword ptr [ebp+WideCharStr] 0 +
jz loc_102BFAD  +
push 5  +
pop esi  +
cmp dword ptr [ebp+WideCharStr] esi +
jnz loc_102BF9F  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
call sub_10223C1  +
mov [eax] esi +
jmp loc_102BFDE  +
push dword ptr [ebp+WideCharStr]  +
call sub_10223D9  +
pop ecx  +
jmp loc_102BFDE  +
mov eax [ebp+var_580] +
mov eax [eax] +
test byte ptr [ebx+eax+4] 40h +
jz loc_102BFCB  +
mov eax [ebp+lpBuffer] +
cmp byte ptr [eax] 1Ah +
jnz loc_102BFCB  +
xor eax eax +
jmp loc_102BFE9  +
call sub_10223A9  +
mov dword ptr [eax] 1Ch +
call sub_10223C1  +
and dword ptr [eax] 0 +
or eax 0FFFFFFFFh +
jmp loc_102BFE9  +
sub eax [ebp+var_578] +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101F9B2  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword_10381AC  +
push 1000h  +
push 1  +
call sub_10297ED  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
test eax eax +
jz loc_102C10E  +
or dword ptr [ecx+0Ch] 8 +
mov dword ptr [ecx+18h] 1000h +
jmp loc_102C122  +
or dword ptr [ecx+0Ch] 4 +
lea eax [ecx+14h] +
and dword ptr [eax] 0 +
mov [ecx+8] eax +
mov dword ptr [ecx+18h] 2 +
mov eax [ecx+8] +
and dword ptr [ecx+4] 0 +
mov [ecx] eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFEh +
jnz loc_102C14E  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
xor eax eax +
pop ebp  +
retn   +
push esi  +
xor esi esi +
cmp eax esi +
jl loc_102C15D  +
cmp eax uNumber +
jb loc_102C179  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 9 +
call sub_1022352  +
add esp 14h +
xor eax eax +
jmp loc_102C193  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1039360[ecx*4] +
movsx eax byte ptr [ecx+eax+4] +
and eax 40h +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1036118 +
or eax 1 +
xor ecx ecx +
cmp dword_1038228 eax +
setz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_102C1E1  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
xor eax eax +
jmp loc_102C1E7  +
mov eax [eax+0Ch] +
and eax 20h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
cmp esi ebx +
jz loc_102C217  +
cmp [ebp+arg_8] ebx +
jz loc_102C217  +
cmp [esi] bl +
jnz loc_102C21D  +
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_102C217  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
push [ebp+arg_C]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov eax [ebp+var_10] +
cmp [eax+14h] ebx +
jnz loc_102C24F  +
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_102C23E  +
movzx cx byte ptr [esi] +
mov [eax] cx +
cmp [ebp+var_4] bl +
jz loc_102C24A  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
inc eax  +
jmp loc_102C219  +
lea eax [ebp+var_10] +
push eax  +
movzx eax byte ptr [esi] +
push eax  +
call sub_101FD59  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102C2DF  +
mov eax [ebp+var_10] +
mov ecx [eax+0ACh] +
cmp ecx 1 +
jle loc_102C295  +
cmp [ebp+arg_8] ecx +
jl loc_102C295  +
xor edx edx +
cmp [ebp+lpWideCharStr] ebx +
setnz dl  +
push edx  +
push [ebp+lpWideCharStr]  +
push ecx  +
push esi  +
push 9  +
push dword ptr [eax+4]  +
call ds:MultiByteToWideChar  +
test eax eax +
mov eax [ebp+var_10] +
jnz loc_102C2A5  +
mov ecx [ebp+arg_8] +
cmp ecx [eax+0ACh] +
jb loc_102C2C0  +
cmp [esi+1] bl +
jz loc_102C2C0  +
mov eax [eax+0ACh] +
cmp [ebp+var_4] bl +
jz loc_102C219  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
jmp loc_102C219  +
call sub_10223A9  +
mov dword ptr [eax] 2Ah +
cmp [ebp+var_4] bl +
jz loc_102C2D7  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
or eax 0FFFFFFFFh +
jmp loc_102C219  +
xor eax eax +
cmp [ebp+lpWideCharStr] ebx +
setnz al  +
push eax  +
push [ebp+lpWideCharStr]  +
mov eax [ebp+var_10] +
push 1  +
push esi  +
push 9  +
push dword ptr [eax+4]  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_102C23E  +
jmp loc_102C2C0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+lpWideCharStr]  +
call sub_102C1EF  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C33E  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
add eax 8 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_102C363  +
sub eax 8 +
cmp dword ptr [eax] 0DDDDh +
jnz loc_102C363  +
push eax  +
call sub_101F40A  +
pop ecx  +
pop ebp  +
retn   +
***
call sub_1022024  +
mov esi [ebp+24h] +
xor ebx ebx +
cmp dword_103822C ebx +
jnz loc_102C3BB  +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push offset SrcStr  +
push 100h  +
push ebx  +
call ds:LCMapStringW  +
test eax eax +
jz loc_102C3A6  +
mov dword_103822C edi +
jmp loc_102C3BB  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102C3BB  +
mov dword_103822C 2 +
cmp [ebp+18h] ebx +
jle loc_102C3E2  +
mov ecx [ebp+18h] +
mov eax [ebp+14h] +
dec ecx  +
cmp [eax] bl +
jz loc_102C3D3  +
inc eax  +
cmp ecx ebx +
jnz loc_102C3C6  +
or ecx 0FFFFFFFFh +
mov eax [ebp+18h] +
sub eax ecx +
dec eax  +
cmp eax [ebp+18h] +
jge loc_102C3DF  +
inc eax  +
mov [ebp+18h] eax +
mov eax dword_103822C +
cmp eax 2 +
jz loc_102C65D  +
cmp eax ebx +
jz loc_102C65D  +
cmp eax 1 +
jnz loc_102C698  +
mov [ebp-2Ch] ebx +
mov [ebp-24h] ebx +
mov [ebp-34h] ebx +
mov [ebp-28h] ebx +
cmp esi ebx +
jnz loc_102C41C  +
mov eax [ebp+8] +
mov eax [eax] +
mov esi [eax+4] +
mov [ebp+24h] esi +
push ebx  +
push ebx  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
xor eax eax +
cmp [ebp+28h] ebx +
setnz al  +
lea eax ds:1[eax*8] +
push eax  +
push esi  +
call ds:MultiByteToWideChar  +
mov edi eax +
mov [ebp-30h] edi +
cmp edi ebx +
jz loc_102C698  +
mov dword ptr [ebp-4] 1 +
jle loc_102C48F  +
push 0FFFFFFE0h  +
pop eax  +
xor edx edx +
div  edi +
cmp eax 2 +
jb loc_102C48F  +
lea eax [edi+edi+8] +
cmp eax 400h +
ja loc_102C479  +
call sub_102FA30  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_102C485  +
push 0DDDDh  +
push eax  +
call sub_1020842  +
pop ecx  +
push eax  +
call sub_102C32A  +
pop ecx  +
pop ecx  +
jmp loc_102C491  +
xor eax eax +
mov [ebp-20h] eax +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
jmp loc_102C4B8  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_102F8B9  +
and dword ptr [ebp-20h] 0 +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov ebx [ebp-2Ch] +
mov edi [ebp-30h] +
cmp dword ptr [ebp-20h] 0 +
jnz loc_102C4DA  +
lea eax [edi+edi] +
push eax  +
call sub_1020842  +
pop ecx  +
mov [ebp-20h] eax +
test eax eax +
jz loc_102C698  +
mov dword ptr [ebp-34h] 1 +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push 1  +
push dword ptr [ebp+24h]  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_102C61A  +
push 0  +
push 0  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
mov ebx eax +
mov [ebp-2Ch] ebx +
test ebx ebx +
jz loc_102C61A  +
mov ecx 400h +
test [ebp+10h] ecx +
jz loc_102C550  +
cmp dword ptr [ebp+20h] 0 +
jz loc_102C61A  +
cmp ebx [ebp+20h] +
jg loc_102C61A  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
jmp loc_102C61A  +
mov dword ptr [ebp-4] 2 +
test ebx ebx +
jle loc_102C596  +
push 0FFFFFFE0h  +
pop eax  +
xor edx edx +
div  ebx +
cmp eax 2 +
jb loc_102C596  +
lea eax [ebx+ebx+8] +
cmp eax ecx +
ja loc_102C580  +
call sub_102FA30  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_102C58C  +
push 0DDDDh  +
push eax  +
call sub_1020842  +
pop ecx  +
push eax  +
call sub_102C32A  +
pop ecx  +
pop ecx  +
jmp loc_102C598  +
xor eax eax +
mov [ebp-24h] eax +
mov [ebp-4] esi +
jmp loc_102C5BD  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_102F8B9  +
and dword ptr [ebp-24h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ebx [ebp-2Ch] +
mov edi [ebp-30h] +
cmp dword ptr [ebp-24h] 0 +
jnz loc_102C5DF  +
lea eax [ebx+ebx] +
push eax  +
call sub_1020842  +
pop ecx  +
mov [ebp-24h] eax +
xor esi esi +
cmp eax esi +
jz loc_102C61A  +
mov dword ptr [ebp-28h] 1 +
jmp loc_102C5E1  +
xor esi esi +
push ebx  +
push dword ptr [ebp-24h]  +
push edi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringW  +
test eax eax +
jz loc_102C61A  +
push esi  +
push esi  +
cmp [ebp+20h] esi +
jnz loc_102C604  +
push esi  +
push esi  +
jmp loc_102C60A  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push ebx  +
push dword ptr [ebp-24h]  +
push esi  +
push dword ptr [ebp+24h]  +
call ds:WideCharToMultiByte  +
mov ebx eax +
xor esi esi +
cmp [ebp-28h] esi +
jz loc_102C62B  +
push dword ptr [ebp-24h]  +
call sub_101F40A  +
jmp loc_102C638  +
cmp [ebp-24h] esi +
jz loc_102C639  +
push dword ptr [ebp-24h]  +
call sub_102C345  +
pop ecx  +
cmp [ebp-34h] esi +
jz loc_102C648  +
push dword ptr [ebp-20h]  +
call sub_101F40A  +
jmp loc_102C655  +
cmp [ebp-20h] esi +
jz loc_102C656  +
push dword ptr [ebp-20h]  +
call sub_102C345  +
pop ecx  +
mov eax ebx +
jmp loc_102C815  +
mov [ebp-2Ch] ebx +
xor edi edi +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
cmp [ebp+0Ch] ebx +
jnz loc_102C678  +
mov eax [ebp+8] +
mov eax [eax] +
mov eax [eax+14h] +
mov [ebp+0Ch] eax +
cmp esi ebx +
jnz loc_102C687  +
mov eax [ebp+8] +
mov eax [eax] +
mov esi [eax+4] +
mov [ebp+24h] esi +
push dword ptr [ebp+0Ch]  +
call sub_102F6AC  +
pop ecx  +
mov [ebp-30h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102C69F  +
xor eax eax +
jmp loc_102C815  +
cmp [ebp-30h] esi +
jz loc_102C7D7  +
push ebx  +
push ebx  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-30h]  +
push esi  +
call sub_102F6FA  +
add esp 18h +
mov [ebp-2Ch] eax +
cmp eax ebx +
jz loc_102C698  +
push ebx  +
push ebx  +
push dword ptr [ebp+18h]  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov [ebp-28h] eax +
cmp eax ebx +
jnz loc_102C6E4  +
xor esi esi +
jmp loc_102C7BC  +
mov [ebp-4] ebx +
cmp eax ebx +
jle loc_102C721  +
cmp eax 0FFFFFFE0h +
ja loc_102C721  +
add eax 8 +
cmp eax 400h +
ja loc_102C70B  +
call sub_102FA30  +
mov [ebp-18h] esp +
mov eax esp +
push 0CCCCh  +
jmp loc_102C717  +
push 0DDDDh  +
push eax  +
call sub_1020842  +
pop ecx  +
push eax  +
call sub_102C32A  +
pop ecx  +
pop ecx  +
jmp loc_102C723  +
xor eax eax +
mov edi eax +
mov [ebp-3Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_102C74B  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_102F8B9  +
xor edi edi +
mov [ebp-3Ch] edi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
cmp edi ebx +
jnz loc_102C776  +
push dword ptr [ebp-28h]  +
call sub_1020842  +
pop ecx  +
mov edi eax +
cmp edi ebx +
jz loc_102C6DD  +
push dword ptr [ebp-28h]  +
push ebx  +
push edi  +
call sub_101EDB0  +
add esp 0Ch +
mov dword ptr [ebp-34h] 1 +
push dword ptr [ebp-28h]  +
push edi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov [ebp-28h] eax +
cmp eax ebx +
jz loc_102C6DD  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-28h] +
push eax  +
push edi  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp-30h]  +
call sub_102F6FA  +
add esp 18h +
mov esi eax +
mov [ebp-38h] esi +
neg esi  +
sbb esi esi +
and esi [ebp-28h] +
cmp dword ptr [ebp-34h] 0 +
jz loc_102C7CA  +
push edi  +
call sub_101F40A  +
jmp loc_102C7D4  +
test edi edi +
jz loc_102C7F1  +
push edi  +
call sub_102C345  +
pop ecx  +
jmp loc_102C7F1  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call ds:LCMapStringA  +
mov esi eax +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_102C800  +
push dword ptr [ebp-2Ch]  +
call sub_101F40A  +
pop ecx  +
mov eax [ebp-38h] +
test eax eax +
jz loc_102C813  +
cmp [ebp+1Ch] eax +
jz loc_102C813  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax esi +
lea esp [ebp-4Ch] +
call sub_102206C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
push [ebp+arg_20]  +
lea eax [ebp+var_10] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_102C36A  +
add esp 24h +
cmp [ebp+var_4] 0 +
jz locret_102C867  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_1038230 +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp eax ebx +
jnz loc_102C8C9  +
lea eax [ebp+CharType] +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push offset SrcStr  +
push esi  +
call ds:GetStringTypeW  +
test eax eax +
jz loc_102C8AF  +
mov dword_1038230 esi +
jmp loc_102C8E3  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102C8C4  +
push 2  +
pop eax  +
mov dword_1038230 eax +
jmp loc_102C8C9  +
mov eax dword_1038230 +
cmp eax 2 +
jz loc_102C9A1  +
cmp eax ebx +
jz loc_102C9A1  +
cmp eax 1 +
jnz loc_102C9CB  +
mov dword ptr [ebp+CharType] ebx +
cmp [ebp+CodePage] ebx +
jnz loc_102C8F3  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
mov esi ds:MultiByteToWideChar +
xor eax eax +
cmp [ebp+arg_18] ebx +
push ebx  +
push ebx  +
push [ebp+cchSrc]  +
setnz al  +
push [ebp+lpSrcStr]  +
lea eax ds:1[eax*8] +
push eax  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_102C9CB  +
jle loc_102C95E  +
cmp edi 7FFFFFF0h +
ja loc_102C95E  +
lea eax [edi+edi+8] +
cmp eax 400h +
ja loc_102C948  +
call sub_102FA30  +
mov eax esp +
cmp eax ebx +
jz loc_102C95C  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102C959  +
push eax  +
call sub_1020842  +
pop ecx  +
cmp eax ebx +
jz loc_102C95C  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ebx eax +
test ebx ebx +
jz loc_102C9CB  +
lea eax [edi+edi] +
push eax  +
push 0  +
push ebx  +
call sub_101EDB0  +
add esp 0Ch +
push edi  +
push ebx  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push 1  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jz loc_102C995  +
push [ebp+lpCharType]  +
push eax  +
push ebx  +
push [ebp+dwInfoType]  +
call ds:GetStringTypeW  +
mov dword ptr [ebp+CharType] eax +
push ebx  +
call sub_102C345  +
mov eax dword ptr [ebp+CharType] +
pop ecx  +
jmp loc_102CA16  +
xor esi esi +
cmp [ebp+Locale] ebx +
jnz loc_102C9B0  +
mov eax [edi] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_102C9BD  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_102F6AC  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102C9CF  +
xor eax eax +
jmp loc_102CA16  +
cmp eax [ebp+CodePage] +
jz loc_102C9F2  +
push ebx  +
push ebx  +
lea ecx [ebp+cchSrc] +
push ecx  +
push [ebp+lpSrcStr]  +
push eax  +
push [ebp+CodePage]  +
call sub_102F6FA  +
mov esi eax +
add esp 18h +
cmp esi ebx +
jz loc_102C9CB  +
mov [ebp+lpSrcStr] esi +
push [ebp+lpCharType]  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwInfoType]  +
push [ebp+Locale]  +
call ds:GetStringTypeA  +
mov edi eax +
cmp esi ebx +
jz loc_102CA14  +
push esi  +
call sub_101F40A  +
pop ecx  +
mov eax edi +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
push [ebp+arg_1C]  +
lea ecx [ebp+var_10] +
push [ebp+Locale]  +
push [ebp+CodePage]  +
push [ebp+lpCharType]  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwInfoType]  +
call sub_102C86E  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_102CA6D  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102CDE8  +
push dword ptr [esi+4]  +
call sub_101F40A  +
push dword ptr [esi+8]  +
call sub_101F40A  +
push dword ptr [esi+0Ch]  +
call sub_101F40A  +
push dword ptr [esi+10h]  +
call sub_101F40A  +
push dword ptr [esi+14h]  +
call sub_101F40A  +
push dword ptr [esi+18h]  +
call sub_101F40A  +
push dword ptr [esi]  +
call sub_101F40A  +
push dword ptr [esi+20h]  +
call sub_101F40A  +
push dword ptr [esi+24h]  +
call sub_101F40A  +
push dword ptr [esi+28h]  +
call sub_101F40A  +
push dword ptr [esi+2Ch]  +
call sub_101F40A  +
push dword ptr [esi+30h]  +
call sub_101F40A  +
push dword ptr [esi+34h]  +
call sub_101F40A  +
push dword ptr [esi+1Ch]  +
call sub_101F40A  +
push dword ptr [esi+38h]  +
call sub_101F40A  +
push dword ptr [esi+3Ch]  +
call sub_101F40A  +
add esp 40h +
push dword ptr [esi+40h]  +
call sub_101F40A  +
push dword ptr [esi+44h]  +
call sub_101F40A  +
push dword ptr [esi+48h]  +
call sub_101F40A  +
push dword ptr [esi+4Ch]  +
call sub_101F40A  +
push dword ptr [esi+50h]  +
call sub_101F40A  +
push dword ptr [esi+54h]  +
call sub_101F40A  +
push dword ptr [esi+58h]  +
call sub_101F40A  +
push dword ptr [esi+5Ch]  +
call sub_101F40A  +
push dword ptr [esi+60h]  +
call sub_101F40A  +
push dword ptr [esi+64h]  +
call sub_101F40A  +
push dword ptr [esi+68h]  +
call sub_101F40A  +
push dword ptr [esi+6Ch]  +
call sub_101F40A  +
push dword ptr [esi+70h]  +
call sub_101F40A  +
push dword ptr [esi+74h]  +
call sub_101F40A  +
push dword ptr [esi+78h]  +
call sub_101F40A  +
push dword ptr [esi+7Ch]  +
call sub_101F40A  +
add esp 40h +
push dword ptr [esi+80h]  +
call sub_101F40A  +
push dword ptr [esi+84h]  +
call sub_101F40A  +
push dword ptr [esi+88h]  +
call sub_101F40A  +
push dword ptr [esi+8Ch]  +
call sub_101F40A  +
push dword ptr [esi+90h]  +
call sub_101F40A  +
push dword ptr [esi+94h]  +
call sub_101F40A  +
push dword ptr [esi+98h]  +
call sub_101F40A  +
push dword ptr [esi+9Ch]  +
call sub_101F40A  +
push dword ptr [esi+0A0h]  +
call sub_101F40A  +
push dword ptr [esi+0A4h]  +
call sub_101F40A  +
push dword ptr [esi+0A8h]  +
call sub_101F40A  +
push dword ptr [esi+0BCh]  +
call sub_101F40A  +
push dword ptr [esi+0C0h]  +
call sub_101F40A  +
push dword ptr [esi+0C4h]  +
call sub_101F40A  +
push dword ptr [esi+0C8h]  +
call sub_101F40A  +
push dword ptr [esi+0CCh]  +
call sub_101F40A  +
add esp 40h +
push dword ptr [esi+0D0h]  +
call sub_101F40A  +
push dword ptr [esi+0B8h]  +
call sub_101F40A  +
push dword ptr [esi+0D8h]  +
call sub_101F40A  +
push dword ptr [esi+0DCh]  +
call sub_101F40A  +
push dword ptr [esi+0E0h]  +
call sub_101F40A  +
push dword ptr [esi+0E4h]  +
call sub_101F40A  +
push dword ptr [esi+0E8h]  +
call sub_101F40A  +
push dword ptr [esi+0ECh]  +
call sub_101F40A  +
push dword ptr [esi+0D4h]  +
call sub_101F40A  +
push dword ptr [esi+0F0h]  +
call sub_101F40A  +
push dword ptr [esi+0F4h]  +
call sub_101F40A  +
push dword ptr [esi+0F8h]  +
call sub_101F40A  +
push dword ptr [esi+0FCh]  +
call sub_101F40A  +
push dword ptr [esi+100h]  +
call sub_101F40A  +
push dword ptr [esi+104h]  +
call sub_101F40A  +
push dword ptr [esi+108h]  +
call sub_101F40A  +
add esp 40h +
push dword ptr [esi+10Ch]  +
call sub_101F40A  +
push dword ptr [esi+110h]  +
call sub_101F40A  +
push dword ptr [esi+114h]  +
call sub_101F40A  +
push dword ptr [esi+118h]  +
call sub_101F40A  +
push dword ptr [esi+11Ch]  +
call sub_101F40A  +
push dword ptr [esi+120h]  +
call sub_101F40A  +
push dword ptr [esi+124h]  +
call sub_101F40A  +
push dword ptr [esi+128h]  +
call sub_101F40A  +
push dword ptr [esi+12Ch]  +
call sub_101F40A  +
push dword ptr [esi+130h]  +
call sub_101F40A  +
push dword ptr [esi+134h]  +
call sub_101F40A  +
push dword ptr [esi+138h]  +
call sub_101F40A  +
push dword ptr [esi+13Ch]  +
call sub_101F40A  +
push dword ptr [esi+140h]  +
call sub_101F40A  +
push dword ptr [esi+144h]  +
call sub_101F40A  +
push dword ptr [esi+148h]  +
call sub_101F40A  +
add esp 40h +
push dword ptr [esi+14Ch]  +
call sub_101F40A  +
push dword ptr [esi+150h]  +
call sub_101F40A  +
push dword ptr [esi+154h]  +
call sub_101F40A  +
push dword ptr [esi+158h]  +
call sub_101F40A  +
push dword ptr [esi+15Ch]  +
call sub_101F40A  +
push dword ptr [esi+160h]  +
call sub_101F40A  +
add esp 18h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102CE56  +
mov eax [esi] +
cmp eax off_1036FB0 +
jz loc_102CE0E  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+4] +
cmp eax off_1036FB4 +
jz loc_102CE20  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+8] +
cmp eax off_1036FB8 +
jz loc_102CE32  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+30h] +
cmp eax off_1036FE0 +
jz loc_102CE44  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov esi [esi+34h] +
cmp esi off_1036FE4 +
jz loc_102CE56  +
push esi  +
call sub_101F40A  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102CF59  +
mov eax [esi+0Ch] +
cmp eax off_1036FBC +
jz loc_102CE81  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+10h] +
cmp eax off_1036FC0 +
jz loc_102CE93  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+14h] +
cmp eax off_1036FC4 +
jz loc_102CEA5  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+18h] +
cmp eax off_1036FC8 +
jz loc_102CEB7  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+1Ch] +
cmp eax off_1036FCC +
jz loc_102CEC9  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+20h] +
cmp eax off_1036FD0 +
jz loc_102CEDB  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+24h] +
cmp eax off_1036FD4 +
jz loc_102CEED  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+38h] +
cmp eax off_1036FE8 +
jz loc_102CEFF  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+3Ch] +
cmp eax off_1036FEC +
jz loc_102CF11  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+40h] +
cmp eax off_1036FF0 +
jz loc_102CF23  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+44h] +
cmp eax off_1036FF4 +
jz loc_102CF35  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [esi+48h] +
cmp eax off_1036FF8 +
jz loc_102CF47  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov esi [esi+4Ch] +
cmp esi off_1036FFC +
jz loc_102CF59  +
push esi  +
call sub_101F40A  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
mov edx [ebp+0Ch] +
lea ecx [ecx+0] +
mov al [edx] +
or al al +
jz loc_102CF93  +
add edx 1 +
bts [esp] eax +
jmp loc_102CF84  +
***
mov esi [ebp+8] +
or ecx 0FFFFFFFFh +
lea ecx [ecx+0] +
add ecx 1 +
mov al [esi] +
or al al +
jz loc_102CFAE  +
add esi 1 +
bt [esp] eax +
jnb loc_102CF9C  +
mov eax ecx +
add esp 20h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp [ebp+arg_C] ebx +
jnz loc_102CFDD  +
cmp esi ebx +
jnz loc_102CFE1  +
cmp [ebp+arg_4] ebx +
jnz loc_102CFE8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp esi ebx +
jz loc_102CFE8  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_102D003  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_102CFD8  +
cmp [ebp+arg_C] ebx +
jnz loc_102D00C  +
mov [esi] bl +
jmp loc_102CFD6  +
mov edx [ebp+arg_8] +
cmp edx ebx +
jnz loc_102D017  +
mov [esi] bl +
jmp loc_102CFE8  +
cmp [ebp+arg_C] 0FFFFFFFFh +
mov eax esi +
jnz loc_102D02E  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_102D047  +
dec edi  +
jnz loc_102D01F  +
jmp loc_102D047  +
mov cl [edx] +
mov [eax] cl +
inc eax  +
inc edx  +
cmp cl bl +
jz loc_102D040  +
dec edi  +
jz loc_102D040  +
dec [ebp+arg_C]  +
jnz loc_102D02E  +
cmp [ebp+arg_C] ebx +
jnz loc_102D047  +
mov [eax] bl +
cmp edi ebx +
jnz loc_102CFD6  +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_102D060  +
mov eax [ebp+arg_4] +
push 50h  +
mov [esi+eax-1] bl +
pop eax  +
jmp loc_102CFD8  +
mov [esi] bl +
call sub_10223A9  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102CFF2  +
***
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
mov edx [ebp+0Ch] +
lea ecx [ecx+0] +
mov al [edx] +
or al al +
jz loc_102D0A3  +
add edx 1 +
bts [esp] eax +
jmp loc_102D094  +
***
mov esi [ebp+8] +
mov edi edi +
mov al [esi] +
or al al +
jz loc_102D0BA  +
add esi 1 +
bt [esp] eax +
jnb loc_102D0A8  +
lea eax [esi-1] +
add esp 20h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+cchWideChar] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jge loc_102D0E7  +
xor eax eax +
jmp loc_102D2DC  +
mov eax dword_103823C +
mov esi ds:GetStringTypeW +
xor edi edi +
xor ebx ebx +
inc edi  +
cmp eax ebx +
jnz loc_102D12E  +
lea eax [ebp+lpSrcStr] +
push eax  +
push edi  +
push offset SrcStr  +
push edi  +
call esi  +
test eax eax +
jz loc_102D114  +
mov dword_103823C edi +
jmp loc_102D132  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102D129  +
push 2  +
pop eax  +
mov dword_103823C eax +
jmp loc_102D12E  +
mov eax dword_103823C +
cmp eax edi +
jnz loc_102D145  +
push [ebp+lpCharType]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwInfoType]  +
call esi  +
jmp loc_102D2DC  +
cmp eax 2 +
jz loc_102D14E  +
cmp eax ebx +
jnz loc_102D0E0  +
mov [ebp+var_10] ebx +
cmp [ebp+Locale] ebx +
jnz loc_102D161  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_102D171  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_102F6AC  +
pop ecx  +
cmp [ebp+CodePage] eax +
jz loc_102D187  +
cmp eax 0FFFFFFFFh +
jz loc_102D187  +
mov [ebp+CodePage] eax +
mov edi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call edi  +
mov esi eax +
mov [ebp+cchSrc] esi +
cmp esi ebx +
jz loc_102D0E0  +
jle loc_102D1E7  +
cmp esi 0FFFFFFE0h +
ja loc_102D1E7  +
lea eax [esi+8] +
cmp eax 400h +
ja loc_102D1CE  +
call sub_102FA30  +
mov eax esp +
cmp eax ebx +
jz loc_102D1E2  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102D1DF  +
push eax  +
call sub_1020842  +
pop ecx  +
cmp eax ebx +
jz loc_102D1E2  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpSrcStr] eax +
jmp loc_102D1EA  +
mov [ebp+lpSrcStr] ebx +
cmp [ebp+lpSrcStr] ebx +
jz loc_102D0E0  +
push esi  +
push ebx  +
push [ebp+lpSrcStr]  +
call sub_101EDB0  +
add esp 0Ch +
push ebx  +
push ebx  +
push esi  +
push [ebp+lpSrcStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call edi  +
test eax eax +
jz loc_102D2D0  +
lea eax [esi+1] +
cmp eax ebx +
jle loc_102D25F  +
cmp eax 7FFFFFF0h +
ja loc_102D25F  +
lea eax [esi+esi+0Ah] +
cmp eax 400h +
ja loc_102D246  +
call sub_102FA30  +
mov eax esp +
cmp eax ebx +
jz loc_102D25A  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102D257  +
push eax  +
call sub_1020842  +
pop ecx  +
cmp eax ebx +
jz loc_102D25A  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+var_C] eax +
jmp loc_102D262  +
mov [ebp+var_C] ebx +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_102D2D0  +
cmp [ebp+Locale] ebx +
jnz loc_102D279  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov ecx [ecx+14h] +
mov [ebp+Locale] ecx +
mov ebx [ebp+cchWideChar] +
push eax  +
push [ebp+cchSrc]  +
add ebx ebx +
push [ebp+lpSrcStr]  +
lea esi [ebx+eax] +
push [ebp+dwInfoType]  +
mov edi 0FFFFh +
push [ebp+Locale]  +
mov ecx edi +
mov [esi] cx +
mov [esi-2] cx +
call ds:GetStringTypeA  +
mov [ebp+var_10] eax +
mov eax edi +
cmp [esi-2] ax +
jz loc_102D2C3  +
cmp [esi] di +
jnz loc_102D2C3  +
push ebx  +
push [ebp+var_C]  +
push [ebp+lpCharType]  +
call loc_1022410  +
add esp 0Ch +
jmp loc_102D2C7  +
and [ebp+var_10] 0 +
push [ebp+var_C]  +
call sub_102C345  +
pop ecx  +
push [ebp+lpSrcStr]  +
call sub_102C345  +
mov eax [ebp+var_10] +
pop ecx  +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
push [ebp+Locale]  +
lea eax [ebp+var_10] +
push [ebp+CodePage]  +
push [ebp+lpCharType]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwInfoType]  +
push eax  +
call sub_102D0C5  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_102D331  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push [ebp+arg_4]  +
lea ecx [ebp+var_18] +
call sub_101FCB3  +
mov ebx [ebp+arg_0] +
mov esi 100h +
cmp ebx esi +
jnb loc_102D3AD  +
mov ecx [ebp+var_18] +
cmp dword ptr [ecx+0ACh] 1 +
jle loc_102D379  +
lea eax [ebp+var_18] +
push eax  +
push 1  +
push ebx  +
call sub_102F0F3  +
mov ecx [ebp+var_18] +
add esp 0Ch +
jmp loc_102D386  +
mov eax [ecx+0C8h] +
movzx eax word ptr [eax+ebx*2] +
and eax 1 +
test eax eax +
jz loc_102D399  +
mov eax [ecx+0CCh] +
movzx eax byte ptr [eax+ebx] +
jmp loc_102D43C  +
cmp [ebp+var_C] 0 +
jz loc_102D3A6  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax ebx +
jmp loc_102D449  +
mov eax [ebp+var_18] +
cmp dword ptr [eax+0ACh] 1 +
jle loc_102D3EA  +
mov [ebp+arg_0] ebx +
sar [ebp+arg_0] 8 +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
and eax 0FFh +
push eax  +
call sub_101FD59  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102D3EA  +
mov al byte ptr [ebp+arg_0] +
push 2  +
mov [ebp+var_4] al +
mov [ebp-3] bl +
mov [ebp+var_2] 0 +
pop ecx  +
jmp loc_102D3FF  +
call sub_10223A9  +
mov dword ptr [eax] 2Ah +
xor ecx ecx +
mov [ebp+var_4] bl +
mov byte ptr [ebp-3] 0 +
inc ecx  +
mov eax [ebp+var_18] +
push 1  +
push dword ptr [eax+4]  +
lea edx [ebp+var_8] +
push 3  +
push edx  +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
push esi  +
push dword ptr [eax+14h]  +
lea eax [ebp+var_18] +
push eax  +
call sub_102C823  +
add esp 24h +
test eax eax +
jz loc_102D399  +
cmp eax 1 +
movzx eax byte ptr [ebp+var_8] +
jz loc_102D43C  +
movzx ecx byte ptr [ebp+var_8+1] +
shl eax 8 +
or eax ecx +
cmp [ebp+var_C] 0 +
jz loc_102D449  +
mov ecx [ebp+var_10] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1038188 0 +
jnz loc_102D470  +
mov eax [ebp+arg_0] +
lea ecx [eax-41h] +
cmp ecx 19h +
ja loc_102D47C  +
add eax 20h +
pop ebp  +
retn   +
push 0  +
push [ebp+arg_0]  +
call sub_102D338  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_24] +
call sub_101FCB3  +
lea eax [ebp+var_24] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_1030DBD  +
mov [ebp+var_14] eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_102FAC3  +
add esp 28h +
test byte ptr [ebp+var_14] 3 +
jnz loc_102D502  +
cmp eax 1 +
jnz loc_102D4ED  +
cmp [ebp+var_18] bl +
jz loc_102D4E8  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 3  +
pop eax  +
jmp loc_102D51C  +
cmp eax 2 +
jnz loc_102D50E  +
cmp [ebp+var_18] bl +
jz loc_102D4FE  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 4  +
jmp loc_102D4EA  +
test byte ptr [ebp+var_14] 1 +
jnz loc_102D4F2  +
test byte ptr [ebp+var_14] 2 +
jnz loc_102D4DC  +
cmp [ebp+var_18] bl +
jz loc_102D51A  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea ecx [ebp+var_24] +
call sub_101FCB3  +
lea eax [ebp+var_24] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_1030DBD  +
mov [ebp+var_14] eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_103000C  +
add esp 28h +
test byte ptr [ebp+var_14] 3 +
jnz loc_102D5AF  +
cmp eax 1 +
jnz loc_102D59A  +
cmp [ebp+var_18] bl +
jz loc_102D595  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 3  +
pop eax  +
jmp loc_102D5C9  +
cmp eax 2 +
jnz loc_102D5BB  +
cmp [ebp+var_18] bl +
jz loc_102D5AB  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
push 4  +
jmp loc_102D597  +
test byte ptr [ebp+var_14] 1 +
jnz loc_102D59F  +
test byte ptr [ebp+var_14] 2 +
jnz loc_102D589  +
cmp [ebp+var_18] bl +
jz loc_102D5C7  +
mov eax [ebp+var_1C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov ecx [esp+arg_0] +
test ecx 3 +
jz loc_102D610  +
mov al [ecx] +
add ecx 1 +
test al al +
jz loc_102D643  +
test ecx 3 +
jnz loc_102D5EC  +
add eax 0 +
lea esp [esp+0] +
lea esp [esp+0] +
mov eax [ecx] +
mov edx 7EFEFEFFh +
add edx eax +
xor eax 0FFFFFFFFh +
xor eax edx +
add ecx 4 +
test eax 81010100h +
jz loc_102D610  +
mov eax [ecx-4] +
test al al +
jz loc_102D661  +
test ah ah +
jz loc_102D657  +
test eax 0FF0000h +
jz loc_102D64D  +
test eax 0FF000000h +
jz loc_102D643  +
jmp loc_102D610  +
lea eax [ecx-1] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-2] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-3] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-4] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_0] +
mov eax [ecx+0Ch] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_4] eax +
cmp edx ebx +
jnz loc_102D6A8  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1022352  +
add esp 14h +
mov eax esi +
jmp loc_102D740  +
cmp [ebp+arg_4] ebx +
jbe loc_102D68A  +
mov esi [ebp+arg_8] +
cmp esi ebx +
mov [edx] bl +
jle loc_102D6BA  +
mov eax esi +
jmp loc_102D6BC  +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] eax +
ja loc_102D6D0  +
call sub_10223A9  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_102D694  +
cmp esi ebx +
push edi  +
lea edi [edx+1] +
mov byte ptr [edx] 30h +
mov eax edi +
jle loc_102D6FE  +
mov ecx [ebp+var_4] +
mov cl [ecx] +
cmp cl bl +
jz loc_102D6F0  +
inc [ebp+var_4]  +
movsx ecx cl +
xor ebx ebx +
jmp loc_102D6F3  +
push 30h  +
pop ecx  +
mov [eax] cl +
inc eax  +
dec esi  +
cmp esi ebx +
jg loc_102D6DD  +
mov ecx [ebp+arg_C] +
cmp esi ebx +
mov [eax] bl +
jl loc_102D719  +
mov esi [ebp+var_4] +
cmp byte ptr [esi] 35h +
jl loc_102D719  +
jmp loc_102D711  +
mov byte ptr [eax] 30h +
dec eax  +
cmp byte ptr [eax] 39h +
jz loc_102D70E  +
inc byte ptr [eax]  +
cmp byte ptr [edx] 31h +
jnz loc_102D723  +
inc dword ptr [ecx+4]  +
jmp loc_102D73D  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_102D728  +
sub eax esi +
inc eax  +
push eax  +
push edi  +
push edx  +
call loc_1022410  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_4] +
movzx eax word ptr [edx+6] +
push ebx  +
mov ecx eax +
push esi  +
push edi  +
shr ecx 4 +
and eax 8000h +
mov edi 7FFh +
and ecx edi +
mov [ebp+arg_4] eax +
mov eax [edx+4] +
mov edx [edx] +
movzx ebx cx +
mov esi 80000000h +
and eax 0FFFFFh +
mov [ebp+var_4] esi +
test ebx ebx +
jz loc_102D799  +
cmp ebx edi +
jz loc_102D792  +
add ecx 3C00h +
jmp loc_102D7BA  +
mov edi 7FFFh +
jmp loc_102D7BD  +
xor ebx ebx +
cmp eax ebx +
jnz loc_102D7B1  +
cmp edx ebx +
jnz loc_102D7B1  +
mov eax [ebp+arg_0] +
mov cx word ptr [ebp+arg_4] +
mov [eax+4] ebx +
mov [eax] ebx +
jmp loc_102D7FD  +
add ecx 3C01h +
mov [ebp+var_4] ebx +
movzx edi cx +
mov ecx edx +
shr ecx 15h +
shl eax 0Bh +
or ecx eax +
or ecx [ebp+var_4] +
mov eax [ebp+arg_0] +
shl edx 0Bh +
mov [eax+4] ecx +
mov [eax] edx +
test ecx esi +
jnz loc_102D7F8  +
mov ecx [eax] +
mov edx [eax+4] +
mov ebx ecx +
add edx edx +
shr ebx 1Fh +
or edx ebx +
add ecx ecx +
add edi 0FFFFh +
mov [eax+4] edx +
mov [eax] ecx +
test edx esi +
jz loc_102D7D9  +
mov ecx [ebp+arg_4] +
or ecx edi +
pop edi  +
pop esi  +
mov [eax+8] cx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov [ebp+var_30] eax +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_102D749  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_2C] +
push eax  +
push 0  +
push 11h  +
sub esp 0Ch +
lea esi [ebp+var_10] +
mov edi esp +
movs   +
movs   +
movs   +
call sub_1030E1B  +
mov esi [ebp+var_30] +
mov [ebx+8] eax +
movsx eax byte ptr [ebp+var_2C+2] +
mov [ebx] eax +
movsx eax word ptr [ebp+var_2C] +
mov [ebx+4] eax +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_10]  +
push esi  +
call sub_102277A  +
add esp 24h +
test eax eax +
jz loc_102D887  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_10222A7  +
add esp 14h +
mov ecx [ebp+var_4] +
pop edi  +
mov [ebx+0Ch] esi +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
or ecx 0FFFFFFFFh +
scas   +
add ecx 1 +
neg ecx  +
sub edi 1 +
mov al [ebp+arg_4] +
std   +
scas   +
add edi 1 +
cmp [edi] al +
jz loc_102D8C7  +
xor eax eax +
jmp loc_102D8C9  +
mov eax edi +
cld   +
pop edi  +
leave   +
retn   +
***
push ebp  +
xor edi edi +
xor ebp ebp +
mov eax [esp+arg_4] +
or eax eax +
jge loc_102D904  +
inc edi  +
inc ebp  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_102D920  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_102D94C  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_102D993  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_102D95A  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_102D988  +
cmp edx [esp+arg_4] +
ja loc_102D988  +
jb loc_102D991  +
cmp eax [esp+arg_0] +
jbe loc_102D991  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
dec ebp  +
jns loc_102D9A5  +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
dec edi  +
jnz loc_102D9B9  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebp  +
pop esi  +
pop edi  +
retn 10h  +
***
cmp cl 40h +
jnb loc_102D9EA  +
cmp cl 20h +
jnb loc_102D9E0  +
shrd eax edx +
shr edx cl +
retn   +
mov eax edx +
xor edx edx +
and cl 1Fh +
shr eax cl +
retn   +
xor eax eax +
xor edx edx +
retn   +
***
pop ecx  +
retn   +
***
xor eax eax +
test bl 10h +
jz loc_102DA0A  +
inc eax  +
test bl 8 +
jz loc_102DA12  +
or eax 4 +
test bl 4 +
jz loc_102DA1A  +
or eax 8 +
test bl 2 +
jz loc_102DA22  +
or eax 10h +
test bl 1 +
jz loc_102DA2A  +
or eax 20h +
test ebx 80000h +
jz loc_102DA35  +
or eax 2 +
mov ecx ebx +
mov edx 300h +
and ecx edx +
push esi  +
mov esi 200h +
jz loc_102DA69  +
cmp ecx 100h +
jz loc_102DA64  +
cmp ecx esi +
jz loc_102DA5D  +
cmp ecx edx +
jnz loc_102DA69  +
or eax 0C00h +
jmp loc_102DA69  +
or eax 800h +
jmp loc_102DA69  +
or eax 400h +
mov ecx ebx +
and ecx 30000h +
jz loc_102DA7F  +
cmp ecx 10000h +
jnz loc_102DA81  +
or eax esi +
jmp loc_102DA81  +
or eax edx +
pop esi  +
test ebx 40000h +
jz locret_102DA8F  +
or eax 1000h +
retn   +
***
xor eax eax +
test dl 10h +
jz loc_102DAA1  +
mov eax 80h +
push ebx  +
push esi  +
push edi  +
mov ebx 200h +
test dl 8 +
jz loc_102DAB0  +
or eax ebx +
test dl 4 +
jz loc_102DABA  +
or eax 400h +
test dl 2 +
jz loc_102DAC4  +
or eax 800h +
test dl 1 +
jz loc_102DACE  +
or eax 1000h +
mov edi 100h +
test edx 80000h +
jz loc_102DADD  +
or eax edi +
mov ecx edx +
mov esi 300h +
and ecx esi +
jz loc_102DB07  +
cmp ecx edi +
jz loc_102DB02  +
cmp ecx ebx +
jz loc_102DAFB  +
cmp ecx esi +
jnz loc_102DB07  +
or eax 6000h +
jmp loc_102DB07  +
or eax 4000h +
jmp loc_102DB07  +
or eax 2000h +
mov ecx 3000000h +
pop edi  +
and edx ecx +
pop esi  +
pop ebx  +
cmp edx 1000000h +
jz loc_102DB2F  +
cmp edx 2000000h +
jz loc_102DB2B  +
cmp edx ecx +
jnz locret_102DB34  +
or eax 8000h +
retn   +
or eax 40h +
retn   +
or eax 8040h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
and edi 0FFF7FFFFh +
fstcw  word ptr [ebp+var_4] +
mov ebx [ebp+var_4] +
xor edx edx +
test bl 1 +
jz loc_102DB5F  +
push 10h  +
pop edx  +
test bl 4 +
jz loc_102DB67  +
or edx 8 +
test bl 8 +
jz loc_102DB6F  +
or edx 4 +
test bl 10h +
jz loc_102DB77  +
or edx 2 +
test bl 20h +
jz loc_102DB7F  +
or edx 1 +
test bl 2 +
jz loc_102DB8A  +
or edx 80000h +
movzx ecx bx +
mov eax ecx +
mov esi 0C00h +
and eax esi +
jz loc_102DBC0  +
cmp eax 400h +
jz loc_102DBBA  +
cmp eax 800h +
jz loc_102DBB2  +
cmp eax esi +
jnz loc_102DBC0  +
or edx 300h +
jmp loc_102DBC0  +
or edx 200h +
jmp loc_102DBC0  +
or edx 100h +
and ecx 300h +
jz loc_102DBD8  +
cmp ecx 200h +
jnz loc_102DBDE  +
or edx 10000h +
jmp loc_102DBDE  +
or edx 20000h +
test ebx 1000h +
jz loc_102DBEC  +
or edx 40000h +
mov eax edi +
not eax  +
mov ecx edi +
and ecx [ebp+arg_0] +
and eax edx +
or eax ecx +
mov [ebp+var_10] eax +
cmp eax edx +
jz loc_102DCB2  +
mov ebx eax +
call sub_102DA02  +
movzx eax ax +
mov [ebp+arg_4] eax +
fldcw  word ptr [ebp+arg_4] +
fstcw  word ptr [ebp+arg_4] +
mov ebx [ebp+arg_4] +
xor edx edx +
test bl 1 +
jz loc_102DC25  +
push 10h  +
pop edx  +
test bl 4 +
jz loc_102DC2D  +
or edx 8 +
test bl 8 +
jz loc_102DC35  +
or edx 4 +
test bl 10h +
jz loc_102DC3D  +
or edx 2 +
test bl 20h +
jz loc_102DC45  +
or edx 1 +
test bl 2 +
jz loc_102DC50  +
or edx 80000h +
movzx ecx bx +
mov eax ecx +
and eax esi +
jz loc_102DC81  +
cmp eax 400h +
jz loc_102DC7B  +
cmp eax 800h +
jz loc_102DC73  +
cmp eax esi +
jnz loc_102DC81  +
or edx 300h +
jmp loc_102DC81  +
or edx 200h +
jmp loc_102DC81  +
or edx 100h +
and ecx 300h +
jz loc_102DC99  +
cmp ecx 200h +
jnz loc_102DC9F  +
or edx 10000h +
jmp loc_102DC9F  +
or edx 20000h +
test ebx 1000h +
jz loc_102DCAD  +
or edx 40000h +
mov eax edx +
mov [ebp+var_10] edx +
xor esi esi +
cmp dword_103933C esi +
jz loc_102DE47  +
and edi 308031Fh +
mov [ebp+var_14] edi +
stmxcsr [ebp+var_C]  +
mov eax [ebp+var_C] +
test al al +
jns loc_102DCD7  +
push 10h  +
pop esi  +
test eax 200h +
jz loc_102DCE1  +
or esi 8 +
test eax 400h +
jz loc_102DCEB  +
or esi 4 +
test eax 800h +
jz loc_102DCF5  +
or esi 2 +
test eax 1000h +
jz loc_102DCFF  +
or esi 1 +
test eax 100h +
jz loc_102DD0C  +
or esi 80000h +
mov ecx eax +
mov edi 6000h +
and ecx edi +
jz loc_102DD41  +
cmp ecx 2000h +
jz loc_102DD3B  +
cmp ecx 4000h +
jz loc_102DD33  +
cmp ecx edi +
jnz loc_102DD41  +
or esi 300h +
jmp loc_102DD41  +
or esi 200h +
jmp loc_102DD41  +
or esi 100h +
mov ebx 8040h +
and eax ebx +
sub eax 40h +
jz loc_102DD69  +
sub eax 7FC0h +
jz loc_102DD61  +
sub eax 40h +
jnz loc_102DD6F  +
or esi 1000000h +
jmp loc_102DD6F  +
or esi 3000000h +
jmp loc_102DD6F  +
or esi 2000000h +
mov eax [ebp+var_14] +
mov edx eax +
and eax [ebp+arg_0] +
not edx  +
and edx esi +
or edx eax +
cmp edx esi +
jnz loc_102DD88  +
mov eax esi +
jmp loc_102DE32  +
call sub_102DA95  +
push eax  +
mov [ebp+var_8] eax +
call sub_1031744  +
pop ecx  +
stmxcsr [ebp+var_8]  +
mov edx [ebp+var_8] +
xor eax eax +
test dl dl +
jns loc_102DDA7  +
push 10h  +
pop eax  +
test edx 200h +
jz loc_102DDB2  +
or eax 8 +
test edx 400h +
jz loc_102DDBD  +
or eax 4 +
test edx 800h +
jz loc_102DDC8  +
or eax 2 +
test edx 1000h +
jz loc_102DDD3  +
or eax 1 +
mov esi 100h +
test edx esi +
jz loc_102DDE1  +
or eax 80000h +
mov ecx edx +
and ecx edi +
jz loc_102DE0B  +
cmp ecx 2000h +
jz loc_102DE09  +
cmp ecx 4000h +
jz loc_102DE02  +
cmp ecx edi +
jnz loc_102DE0B  +
or eax 300h +
jmp loc_102DE0B  +
or eax 200h +
jmp loc_102DE0B  +
or eax esi +
and edx ebx +
sub edx 40h +
jz loc_102DE2D  +
sub edx 7FC0h +
jz loc_102DE26  +
sub edx 40h +
jnz loc_102DE32  +
or eax 1000000h +
jmp loc_102DE32  +
or eax 3000000h +
jmp loc_102DE32  +
or eax 2000000h +
mov ecx eax +
xor ecx [ebp+var_10] +
or eax [ebp+var_10] +
test ecx 8031Fh +
jz loc_102DE47  +
or eax 80000000h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call sub_1029995  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_102DF29  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
mov eax 0FFFFh +
jmp loc_102E05F  +
test al 40h +
jz loc_102DF3A  +
call sub_10223A9  +
mov dword ptr [eax] 22h +
jmp loc_102DF1B  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_102DF57  +
mov [esi+4] ebx +
test al 10h +
jz loc_102DFCC  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_102DF94  +
cmp esi offset unk_1036BB8 +
jz loc_102DF80  +
cmp esi offset unk_1036BD8 +
jnz loc_102DF8D  +
push [ebp+arg_4]  +
call sub_102C132  +
pop ecx  +
test eax eax +
jnz loc_102DF94  +
push esi  +
call sub_102C0DE  +
pop ecx  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_102E029  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+2] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_102DFDC  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call sub_102BFFD  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_102E01E  +
or eax 20h +
mov [esi+0Ch] eax +
mov eax 0FFFFh +
jmp loc_102E05E  +
mov ecx [ebp+arg_4] +
cmp ecx 0FFFFFFFFh +
jz loc_102DFFF  +
cmp ecx 0FFFFFFFEh +
jz loc_102DFFF  +
mov eax ecx +
and eax 1Fh +
imul eax eax +
mov edx ecx +
sar edx 5 +
add eax dword_1039360[edx*4] +
jmp loc_102E004  +
mov eax offset unk_1036268 +
test byte ptr [eax+4] 20h +
jz loc_102E01E  +
push 2  +
push ebx  +
push ebx  +
push ecx  +
call sub_102B7FE  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_102E04B  +
mov eax [esi+8] +
mov ebx [ebp+arg_0] +
mov [eax] bx +
jmp loc_102E046  +
mov ebx [ebp+arg_0] +
push 2  +
pop edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov word ptr [ebp+var_4] bx +
call sub_102BFFD  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_102E056  +
or dword ptr [esi+0Ch] 20h +
mov eax 0FFFFh +
jmp loc_102E05D  +
mov eax ebx +
and eax 0FFFFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:LCMapStringW +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp dword_1038244 ebx +
jnz loc_102E0C4  +
push ebx  +
push ebx  +
push 1  +
push offset SrcStr  +
push 100h  +
push ebx  +
call esi  +
test eax eax +
jz loc_102E0AF  +
mov dword_1038244 1 +
jmp loc_102E0C4  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102E0C4  +
mov dword_1038244 2 +
cmp [ebp+cchWideChar] ebx +
jle loc_102E0D9  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
call sub_10317BB  +
pop ecx  +
pop ecx  +
mov [ebp+cchWideChar] eax +
mov eax dword_1038244 +
cmp eax 1 +
jnz loc_102E0FC  +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call esi  +
jmp loc_102E2AC  +
cmp eax 2 +
jz loc_102E105  +
cmp eax ebx +
jnz loc_102E157  +
mov [ebp+var_C] ebx +
cmp [ebp+Locale] ebx +
jnz loc_102E115  +
mov eax [edi] +
mov eax [eax+14h] +
mov [ebp+Locale] eax +
cmp [ebp+CodePage] ebx +
jnz loc_102E122  +
mov eax [edi] +
mov eax [eax+4] +
mov [ebp+CodePage] eax +
push [ebp+Locale]  +
call sub_102F6AC  +
pop ecx  +
cmp [ebp+CodePage] eax +
jz loc_102E138  +
cmp eax 0FFFFFFFFh +
jz loc_102E138  +
mov [ebp+CodePage] eax +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
mov [ebp+cchSrc] edi +
cmp edi ebx +
jnz loc_102E15E  +
xor eax eax +
jmp loc_102E2AC  +
jle loc_102E1A2  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  edi +
cmp eax 1 +
jb loc_102E1A2  +
lea eax [edi+8] +
cmp eax 400h +
ja loc_102E189  +
call sub_102FA30  +
mov eax esp +
cmp eax ebx +
jz loc_102E19D  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102E19A  +
push eax  +
call sub_1020842  +
pop ecx  +
cmp eax ebx +
jz loc_102E19D  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpSrcStr] eax +
jmp loc_102E1A5  +
mov [ebp+lpSrcStr] ebx +
cmp [ebp+lpSrcStr] ebx +
jz loc_102E157  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSrcStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jz loc_102E2A0  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSrcStr]  +
mov edi ds:LCMapStringA +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_102E2A0  +
jle loc_102E223  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  esi +
cmp eax 1 +
jb loc_102E223  +
lea eax [esi+8] +
cmp eax 400h +
ja loc_102E20D  +
call sub_102FA30  +
mov eax esp +
cmp eax ebx +
jz loc_102E221  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102E21E  +
push eax  +
call sub_1020842  +
pop ecx  +
cmp eax ebx +
jz loc_102E221  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov ebx eax +
test ebx ebx +
jz loc_102E2A0  +
push esi  +
push ebx  +
push [ebp+cchSrc]  +
push [ebp+lpSrcStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call edi  +
test eax eax +
jz loc_102E299  +
test [ebp+dwMapFlags] 400h +
jz loc_102E278  +
mov eax [ebp+cchDest] +
xor edi edi +
mov [ebp+var_C] esi +
cmp eax edi +
jz loc_102E299  +
cmp eax esi +
jg loc_102E257  +
lea esi [eax-1] +
push esi  +
push ebx  +
push eax  +
push [ebp+lpDestStr]  +
call sub_102CFBB  +
add esp 10h +
test eax eax +
jz loc_102E299  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_10222A7  +
add esp 14h +
jmp loc_102E299  +
xor eax eax +
cmp [ebp+cchDest] eax +
jnz loc_102E283  +
push eax  +
push eax  +
jmp loc_102E289  +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push esi  +
push ebx  +
push 1  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
mov [ebp+var_C] eax +
push ebx  +
call sub_102C345  +
pop ecx  +
push [ebp+lpSrcStr]  +
call sub_102C345  +
mov eax [ebp+var_C] +
pop ecx  +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
push [ebp+CodePage]  +
lea ecx [ebp+var_10] +
push [ebp+cchDest]  +
push [ebp+lpDestStr]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+dwMapFlags]  +
push [ebp+Locale]  +
call sub_102E067  +
add esp 1Ch +
cmp [ebp+var_4] 0 +
jz locret_102E303  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
test eax eax +
jl loc_102E371  +
cmp eax uNumber +
jnb loc_102E371  +
mov esi eax +
and esi 1Fh +
imul esi esi +
mov ecx eax +
sar ecx 5 +
lea edi dword_1039360[ecx*4] +
mov ecx [edi] +
cmp dword ptr [esi+ecx] 0FFFFFFFFh +
jnz loc_102E371  +
cmp dword_1036100 1 +
push ebx  +
mov ebx [ebp+hHandle] +
jnz loc_102E367  +
sub eax 0 +
jz loc_102E35E  +
dec eax  +
jz loc_102E359  +
dec eax  +
jnz loc_102E367  +
push ebx  +
push 0FFFFFFF4h  +
jmp loc_102E361  +
push ebx  +
push 0FFFFFFF5h  +
jmp loc_102E361  +
push ebx  +
push 0FFFFFFF6h  +
call ds:SetStdHandle  +
mov eax [edi] +
mov [esi+eax] ebx +
xor eax eax +
pop ebx  +
jmp loc_102E387  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
call sub_10223C1  +
and dword ptr [eax] 0 +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
cmp ecx ebx +
push esi  +
push edi  +
jl loc_102E3FC  +
cmp ecx uNumber +
jnb loc_102E3FC  +
mov esi ecx +
and esi 1Fh +
imul esi esi +
mov eax ecx +
sar eax 5 +
lea edi dword_1039360[eax*4] +
mov eax [edi] +
add eax esi +
test byte ptr [eax+4] 1 +
jz loc_102E3FC  +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_102E3FC  +
cmp dword_1036100 1 +
jnz loc_102E3F2  +
sub ecx ebx +
jz loc_102E3E9  +
dec ecx  +
jz loc_102E3E4  +
dec ecx  +
jnz loc_102E3F2  +
push ebx  +
push 0FFFFFFF4h  +
jmp loc_102E3EC  +
push ebx  +
push 0FFFFFFF5h  +
jmp loc_102E3EC  +
push ebx  +
push 0FFFFFFF6h  +
call ds:SetStdHandle  +
mov eax [edi] +
or dword ptr [esi+eax] 0FFFFFFFFh +
xor eax eax +
jmp loc_102E411  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
call sub_10223C1  +
mov [eax] ebx +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jnz loc_102E438  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
cmp eax 0FFFFFFFEh +
jnz loc_102E447  +
call sub_10223C1  +
and dword ptr [eax] 0 +
jmp loc_102E428  +
push esi  +
xor esi esi +
cmp eax esi +
jl loc_102E495  +
cmp eax uNumber +
jnb loc_102E495  +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1039360[ecx*4] +
add eax ecx +
test byte ptr [eax+4] 1 +
jnz loc_102E491  +
call sub_10223C1  +
mov [eax] esi +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 9 +
call sub_1022352  +
add esp 14h +
jmp loc_102E4A7  +
mov eax [eax] +
jmp loc_102E4AA  +
call sub_10223C1  +
mov [eax] esi +
call sub_10223A9  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1039360[ecx*4] +
lea eax [ecx+eax+0Ch] +
push eax  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
xor ebx ebx +
test byte ptr [ebp+arg_8] 80h +
push edi  +
push 10h  +
mov esi eax +
mov [ebp+var_14] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_2] bl +
mov [ebp+SecurityAttributes.nLength] 0Ch +
mov [ebp+SecurityAttributes.lpSecurityDescriptor] ebx +
pop edi  +
jz loc_102E847  +
mov [ebp+SecurityAttributes.bInheritHandle] ebx +
mov [ebp+var_1] 10h +
jmp loc_102E851  +
mov [ebp+SecurityAttributes.bInheritHandle] 1 +
mov [ebp+var_1] bl +
lea eax [ebp+var_14] +
push eax  +
call sub_10323D3  +
pop ecx  +
test eax eax +
jz loc_102E86C  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
lea eax [ebp+var_18] +
push eax  +
call sub_1020A8E  +
pop ecx  +
test eax eax +
jz loc_102E887  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_10222A7  +
add esp 14h +
mov eax 8000h +
test [ebp+arg_8] eax +
jnz loc_102E8A3  +
test [ebp+arg_8] 74000h +
jnz loc_102E89F  +
cmp [ebp+var_14] eax +
jz loc_102E8A3  +
or [ebp+var_1] 80h +
mov eax [ebp+arg_8] +
push 3  +
pop edx  +
and eax edx +
sub eax ebx +
mov ecx 80000000h +
jz loc_102E8F2  +
dec eax  +
jz loc_102E8E9  +
dec eax  +
jz loc_102E8E0  +
call sub_10223C1  +
mov [eax] ebx +
or dword ptr [esi] 0FFFFFFFFh +
call sub_10223A9  +
push 16h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_1022352  +
add esp 14h +
jmp loc_102ED7E  +
mov [ebp+dwDesiredAccess] 0C0000000h +
jmp loc_102E8F5  +
mov [ebp+dwDesiredAccess] 40000000h +
jmp loc_102E8F5  +
mov [ebp+dwDesiredAccess] ecx +
mov eax [ebp+arg_C] +
sub eax edi +
jz loc_102E92F  +
sub eax edi +
jz loc_102E926  +
sub eax edi +
jz loc_102E91D  +
sub eax edi +
jz loc_102E918  +
sub eax 40h +
jnz loc_102E8BA  +
cmp [ebp+dwDesiredAccess] ecx +
setz al  +
mov [ebp+dwShareMode] eax +
jmp loc_102E932  +
mov [ebp+dwShareMode] edx +
jmp loc_102E932  +
mov [ebp+dwShareMode] 2 +
jmp loc_102E932  +
mov [ebp+dwShareMode] 1 +
jmp loc_102E932  +
mov [ebp+dwShareMode] ebx +
mov eax [ebp+arg_8] +
mov edx 700h +
and eax edx +
mov ecx 400h +
cmp eax ecx +
jg loc_102E983  +
jz loc_102E97A  +
cmp eax ebx +
jz loc_102E97A  +
cmp eax 100h +
jz loc_102E971  +
cmp eax 200h +
jz loc_102E9F6  +
cmp eax 300h +
jnz loc_102E8BA  +
mov [ebp+dwCreationDisposition] 2 +
jmp loc_102E9A0  +
mov [ebp+dwCreationDisposition] 4 +
jmp loc_102E9A0  +
mov [ebp+dwCreationDisposition] 3 +
jmp loc_102E9A0  +
cmp eax 500h +
jz loc_102E999  +
cmp eax 600h +
jz loc_102E9F6  +
cmp eax edx +
jnz loc_102E8BA  +
mov [ebp+dwCreationDisposition] 1 +
mov ecx [ebp+arg_8] +
mov eax 100h +
mov edi 80h +
test ecx eax +
jz loc_102E9C3  +
mov edx dword_1037870 +
not edx  +
and edx [ebp+arg_10] +
test dl dl +
js loc_102E9C3  +
xor edi edi +
inc edi  +
test cl 40h +
jz loc_102E9DF  +
or [ebp+dwDesiredAccess] 10000h +
or edi 4000000h +
cmp [ebp+var_18] 2 +
jnz loc_102E9DF  +
or [ebp+dwShareMode] 4 +
test ecx 1000h +
jz loc_102E9E9  +
or edi eax +
test cl 20h +
jz loc_102E9FF  +
or edi 8000000h +
jmp loc_102EA0A  +
mov [ebp+dwCreationDisposition] 5 +
jmp loc_102E9A0  +
test cl 10h +
jz loc_102EA0A  +
or edi 10000000h +
call sub_102E584  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102EA2D  +
call sub_10223C1  +
mov [eax] ebx +
or dword ptr [esi] 0FFFFFFFFh +
call sub_10223A9  +
mov dword ptr [eax] 18h +
jmp loc_102EA7D  +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
push [ebp+dwCreationDisposition]  +
mov dword ptr [eax] 1 +
lea eax [ebp+SecurityAttributes] +
push eax  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_102EA89  +
mov esi [esi] +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1039360[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FEh +
call ds:GetLastError  +
push eax  +
call sub_10223D9  +
pop ecx  +
call sub_10223A9  +
mov eax [eax] +
jmp loc_102EE59  +
push edi  +
call ds:GetFileType  +
cmp eax ebx +
jnz loc_102EAB8  +
mov esi [esi] +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1039360[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FEh +
push edi  +
call ds:CloseHandle  +
jmp loc_102EA70  +
cmp eax 2 +
jnz loc_102EAC3  +
or [ebp+var_1] 40h +
jmp loc_102EACC  +
cmp eax 3 +
jnz loc_102EACC  +
or [ebp+var_1] 8 +
push edi  +
push dword ptr [esi]  +
call sub_102E30A  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_102EAEA  +
push edi  +
call ds:CloseHandle  +
or eax 0FFFFFFFFh +
jmp loc_102EE59  +
mov eax [esi] +
or [ebp+var_1] 1 +
mov dl [ebp+var_1] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1039360[ecx*4] +
mov [ecx+eax+4] dl +
mov eax [esi] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1039360[ecx*4] +
lea eax [ecx+eax+8] +
and dword ptr [eax] 0FFFFFFFCh +
mov al dl +
and al 48h +
mov [ebp+var_3] al +
jnz loc_102EBB2  +
test dl 80h +
jz loc_102EDE9  +
test byte ptr [ebp+arg_8] 2 +
jz loc_102EBB2  +
push 2  +
or edi 0FFFFFFFFh +
push edi  +
push dword ptr [esi]  +
call sub_103229C  +
add esp 0Ch +
mov [ebp+dwShareMode] eax +
cmp eax edi +
jnz loc_102EB70  +
call sub_10223C1  +
cmp dword ptr [eax] 83h +
jz loc_102EBB2  +
push dword ptr [esi]  +
call sub_10299CC  +
jmp loc_102EA7C  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
push dword ptr [esi]  +
mov dword ptr [ebp+WideCharStr] ebx +
call sub_1031C0D  +
add esp 0Ch +
test eax eax +
jnz loc_102EBA2  +
cmp [ebp+WideCharStr] 1Ah +
jnz loc_102EBA2  +
mov eax [ebp+dwShareMode] +
cdq   +
push edx  +
push eax  +
push dword ptr [esi]  +
call sub_1031A52  +
add esp 0Ch +
cmp eax edi +
jz loc_102EB64  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_103229C  +
add esp 0Ch +
cmp eax edi +
jz loc_102EB64  +
test [ebp+var_1] 80h +
jz loc_102EDE9  +
mov ecx 74000h +
mov edi 4000h +
test [ebp+arg_8] ecx +
jnz loc_102EBDA  +
mov eax [ebp+var_14] +
and eax ecx +
jnz loc_102EBD7  +
or [ebp+arg_8] edi +
jmp loc_102EBDA  +
or [ebp+arg_8] eax +
mov eax [ebp+arg_8] +
and eax ecx +
cmp eax edi +
jz loc_102EC27  +
cmp eax 10000h +
jz loc_102EC13  +
cmp eax 14000h +
jz loc_102EC13  +
cmp eax 20000h +
jz loc_102EC21  +
cmp eax 24000h +
jz loc_102EC21  +
cmp eax 40000h +
jz loc_102EC0D  +
cmp eax 44000h +
jnz loc_102EC2A  +
mov [ebp+var_2] 1 +
jmp loc_102EC2A  +
mov ecx [ebp+arg_8] +
mov eax 301h +
and ecx eax +
cmp ecx eax +
jnz loc_102EC2A  +
mov [ebp+var_2] 2 +
jmp loc_102EC2A  +
mov [ebp+var_2] bl +
test [ebp+arg_8] 70000h +
jz loc_102EDE9  +
test [ebp+var_1] 40h +
mov [ebp+dwShareMode] ebx +
jnz loc_102EDE9  +
mov eax [ebp+dwDesiredAccess] +
mov ecx 0C0000000h +
and eax ecx +
cmp eax 40000000h +
jz loc_102ECE8  +
cmp eax 80000000h +
jz loc_102ECAB  +
cmp eax ecx +
jnz loc_102EDE9  +
cmp [ebp+dwCreationDisposition] ebx +
jbe loc_102EDE9  +
cmp [ebp+dwCreationDisposition] 2 +
jbe loc_102ED07  +
cmp [ebp+dwCreationDisposition] 4 +
ja loc_102ECFD  +
push 2  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102B774  +
add esp 10h +
or eax edx +
jz loc_102ED07  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102B774  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_102EB64  +
push 3  +
lea eax [ebp+dwShareMode] +
push eax  +
push dword ptr [esi]  +
call sub_1031C0D  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102EB64  +
cmp eax 2 +
jz loc_102ED5D  +
cmp eax 3 +
jnz loc_102EDA8  +
cmp [ebp+dwShareMode] 0BFBBEFh +
jnz loc_102ED5D  +
mov [ebp+var_2] 1 +
jmp loc_102EDE9  +
cmp [ebp+dwCreationDisposition] ebx +
jbe loc_102EDE9  +
cmp [ebp+dwCreationDisposition] 2 +
jbe loc_102ED07  +
cmp [ebp+dwCreationDisposition] 4 +
jbe loc_102ED2E  +
cmp [ebp+dwCreationDisposition] 5 +
jnz loc_102EDE9  +
movsx eax [ebp+var_2] +
xor edi edi +
dec eax  +
jz loc_102EDB6  +
dec eax  +
jnz loc_102EDE9  +
mov [ebp+dwShareMode] 0FEFFh +
mov [ebp+dwDesiredAccess] 2 +
jmp loc_102EDC4  +
push 2  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102B774  +
add esp 10h +
or eax edx +
jz loc_102ED07  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_102B774  +
add esp 10h +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_102EDE9  +
jmp loc_102EB64  +
mov eax [ebp+dwShareMode] +
and eax 0FFFFh +
cmp eax 0FFFEh +
jnz loc_102ED85  +
push dword ptr [esi]  +
call sub_10299CC  +
pop ecx  +
call sub_10223A9  +
push 16h  +
pop esi  +
mov [eax] esi +
mov eax esi +
jmp loc_102EE59  +
cmp eax 0FEFFh +
jnz loc_102EDA8  +
push ebx  +
push 2  +
push dword ptr [esi]  +
call sub_103229C  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102EB64  +
mov [ebp+var_2] 2 +
jmp loc_102EDE9  +
push ebx  +
push ebx  +
push dword ptr [esi]  +
call sub_103229C  +
add esp 0Ch +
jmp loc_102ED4F  +
mov [ebp+dwShareMode] 0BFBBEFh +
mov [ebp+dwDesiredAccess] 3 +
mov eax [ebp+dwDesiredAccess] +
sub eax edi +
push eax  +
lea eax [ebp+edi+dwShareMode] +
push eax  +
push dword ptr [esi]  +
call sub_102BFFD  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_102EB64  +
add edi eax +
cmp [ebp+dwDesiredAccess] edi +
jg loc_102EDC4  +
mov eax [esi] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1039360[ecx*4] +
lea eax [ecx+eax+8] +
movsx ecx [ebp+var_2] +
xor ecx [eax] +
and ecx 3 +
xor [eax] ecx +
mov eax [esi] +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
mov ecx dword_1039360[ecx*4] +
lea eax [ecx+eax+8] +
mov ecx [ebp+arg_8] +
shr ecx 0Dh +
xor ecx [eax] +
and ecx 8 +
xor [eax] ecx +
cmp [ebp+var_3] bl +
jnz loc_102EE57  +
test byte ptr [ebp+arg_8] 8 +
jz loc_102EE57  +
mov esi [esi] +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1039360[eax*4] +
lea eax [eax+esi+4] +
or byte ptr [eax] 20h +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1024E74  +
cmp [ebp-1Ch] esi +
jz locret_102EF1A  +
cmp [ebp-20h] esi +
jz loc_102EF12  +
mov eax [edi] +
mov ecx eax +
sar ecx 5 +
and eax 1Fh +
imul eax eax +
mov ecx dword_1039360[ecx*4] +
lea eax [ecx+eax+4] +
and byte ptr [eax] 0FEh +
push dword ptr [edi]  +
call sub_102E558  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_0]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102EE63  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push [ebp+arg_8]  +
lea ecx [ebp+var_10] +
call sub_101FCB3  +
mov ebx [ebp+arg_0] +
xor esi esi +
cmp ebx esi +
jnz loc_102EF92  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_102EF88  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax 7FFFFFFFh +
jmp loc_102F052  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi esi +
jnz loc_102EFC9  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_102EFBF  +
mov eax [ebp+var_8] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax 7FFFFFFFh +
jmp loc_102F051  +
mov eax [ebp+var_10] +
cmp [eax+14h] esi +
jnz loc_102F00B  +
movzx eax word ptr [ebx] +
cmp ax 41h +
jb loc_102EFE3  +
cmp ax 5Ah +
ja loc_102EFE3  +
add eax 20h +
movzx esi ax +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_102EFF8  +
cmp ax 5Ah +
ja loc_102EFF8  +
add eax 20h +
inc ebx  +
inc ebx  +
inc edi  +
inc edi  +
movzx eax ax +
test si si +
jz loc_102F03C  +
cmp si ax +
jz loc_102EFD1  +
jmp loc_102F03C  +
movzx eax word ptr [ebx] +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call sub_1029833  +
movzx esi ax +
movzx eax word ptr [edi] +
lea ecx [ebp+var_10] +
push ecx  +
inc ebx  +
push eax  +
inc ebx  +
call sub_1029833  +
add esp 10h +
inc edi  +
inc edi  +
movzx eax ax +
test si si +
jz loc_102F03C  +
cmp si ax +
jz loc_102F00B  +
movzx ecx ax +
movzx eax si +
sub eax ecx +
cmp [ebp+var_4] 0 +
jz loc_102F051  +
mov ecx [ebp+var_8] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
cmp dword_1038188 esi +
jnz loc_102F0DB  +
mov edi [ebp+arg_0] +
cmp edi esi +
jnz loc_102F092  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
mov eax 7FFFFFFFh +
jmp loc_102F0EA  +
mov edx [ebp+arg_4] +
cmp edx esi +
jz loc_102F073  +
movzx eax word ptr [edi] +
cmp ax 41h +
jb loc_102F0AB  +
cmp ax 5Ah +
ja loc_102F0AB  +
add eax 20h +
movzx ecx ax +
movzx eax word ptr [edx] +
cmp ax 41h +
jb loc_102F0C0  +
cmp ax 5Ah +
ja loc_102F0C0  +
add eax 20h +
inc edi  +
inc edi  +
inc edx  +
inc edx  +
movzx eax ax +
cmp cx si +
jz loc_102F0D1  +
cmp cx ax +
jz loc_102F099  +
movzx edx ax +
movzx eax cx +
sub eax edx +
jmp loc_102F0EA  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102EF45  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push [ebp+arg_8]  +
lea ecx [ebp+var_18] +
call sub_101FCB3  +
mov ebx [ebp+arg_0] +
lea eax [ebx+1] +
cmp eax 100h +
ja loc_102F123  +
mov eax [ebp+var_18] +
mov eax [eax+0C8h] +
movzx eax word ptr [eax+ebx*2] +
jmp loc_102F198  +
mov [ebp+arg_0] ebx +
sar [ebp+arg_0] 8 +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
and eax 0FFh +
push eax  +
call sub_101FD59  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102F154  +
mov al byte ptr [ebp+arg_0] +
push 2  +
mov [ebp+SrcStr] al +
mov [ebp-7] bl +
mov [ebp+var_6] 0 +
pop ecx  +
jmp loc_102F15E  +
xor ecx ecx +
mov [ebp+SrcStr] bl +
mov byte ptr [ebp-7] 0 +
inc ecx  +
mov eax [ebp+var_18] +
push 1  +
push dword ptr [eax+14h]  +
push dword ptr [eax+4]  +
lea eax [ebp+CharType] +
push eax  +
push ecx  +
lea eax [ebp+SrcStr] +
push eax  +
lea eax [ebp+var_18] +
push 1  +
push eax  +
call sub_102CA2D  +
add esp 20h +
test eax eax +
jnz loc_102F194  +
cmp [ebp+var_C] al +
jz loc_102F190  +
mov eax [ebp+var_10] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_102F1A8  +
movzx eax [ebp+CharType] +
and eax [ebp+arg_4] +
cmp [ebp+var_C] 0 +
jz loc_102F1A8  +
mov ecx [ebp+var_10] +
and dword ptr [ecx+70h] 0FFFFFFFDh +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102F1DD  +
call sub_10223A9  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
jmp loc_102F2E0  +
mov eax [esi+0Ch] +
test al 83h +
jz loc_102F2E0  +
test al 40h +
jnz loc_102F2E0  +
test al 2 +
jz loc_102F1FF  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_102F2E0  +
or eax 1 +
mov [esi+0Ch] eax +
test eax 10Ch +
jnz loc_102F215  +
push esi  +
call sub_102C0DE  +
pop ecx  +
jmp loc_102F21A  +
mov eax [esi+8] +
mov [esi] eax +
push dword ptr [esi+18h]  +
push dword ptr [esi+8]  +
push esi  +
call sub_1029995  +
pop ecx  +
push eax  +
call sub_10321BB  +
add esp 0Ch +
mov [esi+4] eax +
cmp eax edi +
jz loc_102F2D0  +
cmp eax 1 +
jz loc_102F2D0  +
cmp eax 0FFFFFFFFh +
jz loc_102F2D0  +
test byte ptr [esi+0Ch] 82h +
jnz loc_102F2A2  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102F28D  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102F28D  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
jmp loc_102F292  +
mov eax offset unk_1036268 +
mov al [eax+4] +
and al 82h +
cmp al 82h +
jnz loc_102F2A2  +
or dword ptr [esi+0Ch] 2000h +
cmp dword ptr [esi+18h] 200h +
jnz loc_102F2C0  +
mov eax [esi+0Ch] +
test al 8 +
jz loc_102F2C0  +
test eax 400h +
jnz loc_102F2C0  +
mov dword ptr [esi+18h] 1000h +
mov ecx [esi] +
add dword ptr [esi+4] 0FFFFFFFEh +
movzx eax word ptr [ecx] +
add ecx 2 +
mov [esi] ecx +
jmp loc_102F2E5  +
neg eax  +
sbb eax eax +
and eax 10h +
add eax 10h +
or [esi+0Ch] eax +
mov [esi+4] edi +
mov eax 0FFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
test byte ptr [esi+0Ch] 40h +
push edi  +
jnz loc_102F3AE  +
push esi  +
call sub_1029995  +
pop ecx  +
mov ebx offset unk_1036268 +
cmp eax 0FFFFFFFFh +
jz loc_102F342  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102F342  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
jmp loc_102F344  +
mov eax ebx +
test byte ptr [eax+8] 3 +
jnz loc_102F38C  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102F384  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102F384  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
jmp loc_102F386  +
mov eax ebx +
test byte ptr [eax+8] 8 +
jz loc_102F3AE  +
call sub_10223A9  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov ebx [ebp+arg_0] +
cmp ebx 0FFFFFFFFh +
jz loc_102F3A6  +
mov eax [esi+0Ch] +
test al 1 +
jnz loc_102F3C5  +
test al al +
jns loc_102F3A6  +
test al 2 +
jnz loc_102F3A6  +
xor edi edi +
cmp [esi+8] edi +
jnz loc_102F3D3  +
push esi  +
call sub_102C0DE  +
pop ecx  +
mov eax [esi] +
cmp eax [esi+8] +
jnz loc_102F3E2  +
cmp [esi+4] edi +
jnz loc_102F3A6  +
inc eax  +
mov [esi] eax +
dec dword ptr [esi]  +
test byte ptr [esi+0Ch] 40h +
mov eax [esi] +
jz loc_102F3F5  +
cmp [eax] bl +
jz loc_102F3F7  +
inc eax  +
mov [esi] eax +
jmp loc_102F3A6  +
mov [eax] bl +
mov eax [esi+0Ch] +
inc dword ptr [esi+4]  +
and eax 0FFFFFFEFh +
or eax 1 +
mov [esi+0Ch] eax +
mov eax ebx +
and eax 0FFh +
jmp loc_102F3A9  +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102F4B8  +
call sub_10223A9  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
jmp loc_102F5AF  +
mov eax [esi+0Ch] +
test al 83h +
jz loc_102F5AF  +
test al 40h +
jnz loc_102F5AF  +
test al 2 +
jz loc_102F4DA  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_102F5AF  +
or eax 1 +
mov [esi+0Ch] eax +
test eax 10Ch +
jnz loc_102F4F0  +
push esi  +
call sub_102C0DE  +
pop ecx  +
jmp loc_102F4F5  +
mov eax [esi+8] +
mov [esi] eax +
push dword ptr [esi+18h]  +
push dword ptr [esi+8]  +
push esi  +
call sub_1029995  +
pop ecx  +
push eax  +
call sub_10321BB  +
add esp 0Ch +
mov [esi+4] eax +
cmp eax edi +
jz loc_102F59F  +
cmp eax 0FFFFFFFFh +
jz loc_102F59F  +
test byte ptr [esi+0Ch] 82h +
jnz loc_102F574  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_102F55F  +
push esi  +
call sub_1029995  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_102F55F  +
push esi  +
call sub_1029995  +
sar eax 5 +
push esi  +
lea edi dword_1039360[eax*4] +
call sub_1029995  +
and eax 1Fh +
imul eax eax +
add eax [edi] +
pop ecx  +
pop ecx  +
jmp loc_102F564  +
mov eax offset unk_1036268 +
mov al [eax+4] +
and al 82h +
cmp al 82h +
jnz loc_102F574  +
or dword ptr [esi+0Ch] 2000h +
cmp dword ptr [esi+18h] 200h +
jnz loc_102F592  +
mov eax [esi+0Ch] +
test al 8 +
jz loc_102F592  +
test eax 400h +
jnz loc_102F592  +
mov dword ptr [esi+18h] 1000h +
mov ecx [esi] +
dec dword ptr [esi+4]  +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_102F5B2  +
neg eax  +
sbb eax eax +
and eax 10h +
add eax 10h +
or [esi+0Ch] eax +
mov [esi+4] edi +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_102F5CA  +
xor eax eax +
pop ebp  +
retn   +
push 1  +
push 0Ah  +
push 0  +
push [ebp+arg_0]  +
call sub_1031A1F  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
cmp dword_1037010 esi +
jz loc_102F64E  +
cmp hConsoleOutput 0FFFFFFFEh +
jnz loc_102F60D  +
call sub_1032411  +
mov eax hConsoleOutput +
cmp eax 0FFFFFFFFh +
jnz loc_102F61E  +
mov eax 0FFFFh +
jmp loc_102F68E  +
push esi  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push 1  +
lea ecx [ebp+WideCharStr] +
push ecx  +
push eax  +
call ds:WriteConsoleW  +
test eax eax +
jnz loc_102F69B  +
cmp dword_1037010 2 +
jnz loc_102F617  +
call ds:GetLastError  +
cmp eax 78h +
jnz loc_102F617  +
mov dword_1037010 esi +
push esi  +
push esi  +
push 5  +
lea eax [ebp+Buffer] +
push eax  +
push 1  +
lea eax [ebp+WideCharStr] +
push eax  +
push esi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov ecx hConsoleOutput +
cmp ecx 0FFFFFFFFh +
jz loc_102F617  +
push esi  +
lea edx [ebp+NumberOfCharsWritten] +
push edx  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ecx  +
call ds:WriteConsoleA  +
test eax eax +
jz loc_102F617  +
mov ax [ebp+WideCharStr] +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101F9B2  +
leave   +
retn   +
mov dword_1037010 1 +
jmp loc_102F68A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push 6  +
lea eax [ebp+LCData] +
push eax  +
push 1004h  +
push [ebp+Locale]  +
mov [ebp+var_6] 0 +
call ds:GetLocaleInfoA  +
test eax eax +
jnz loc_102F6DF  +
or eax 0FFFFFFFFh +
jmp loc_102F6E9  +
lea eax [ebp+LCData] +
push eax  +
call sub_102F5BB  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_10] +
mov [ebp+lpMultiByteStr] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_30] eax +
mov eax [eax] +
push ebx  +
xor ebx ebx +
mov [ebp+cchMultiByte] eax +
mov eax [ebp+CodePage] +
push esi  +
push edi  +
mov [ebp+var_34] ecx +
mov [ebp+var_20] ebx +
mov [ebp+var_2C] ebx +
cmp eax [ebp+arg_4] +
jz loc_102F89F  +
mov esi ds:GetCPInfo +
lea ecx [ebp+CPInfo] +
push ecx  +
push eax  +
call esi  +
mov edi ds:MultiByteToWideChar +
test eax eax +
jz loc_102F7B5  +
cmp [ebp+CPInfo.MaxCharSize] 1 +
jnz loc_102F7B5  +
lea eax [ebp+CPInfo] +
push eax  +
push [ebp+arg_4]  +
call esi  +
test eax eax +
jz loc_102F7B5  +
cmp [ebp+CPInfo.MaxCharSize] 1 +
jnz loc_102F7B5  +
mov esi [ebp+cchMultiByte] +
mov [ebp+var_2C] 1 +
cmp esi 0FFFFFFFFh +
jnz loc_102F78B  +
mov eax [ebp+lpMultiByteStr] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_102F77F  +
sub eax edx +
lea esi [eax+1] +
cmp esi ebx +
jle loc_102F7EA  +
cmp esi 7FFFFFF0h +
ja loc_102F7EA  +
lea eax [esi+esi+8] +
cmp eax 400h +
ja loc_102F7D1  +
call sub_102FA30  +
mov eax esp +
cmp eax ebx +
jz loc_102F7E5  +
mov dword ptr [eax] 0CCCCh +
jmp loc_102F7E2  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 1  +
push [ebp+CodePage]  +
call edi  +
mov esi eax +
cmp esi ebx +
jnz loc_102F78D  +
xor eax eax +
jmp loc_102F8A2  +
push eax  +
call sub_1020842  +
pop ecx  +
cmp eax ebx +
jz loc_102F7E5  +
mov dword ptr [eax] 0DDDDh +
add eax 8 +
mov [ebp+lpWideCharStr] eax +
jmp loc_102F7ED  +
mov [ebp+lpWideCharStr] ebx +
cmp [ebp+lpWideCharStr] ebx +
jz loc_102F7CA  +
lea eax [esi+esi] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
call sub_101EDB0  +
add esp 0Ch +
push esi  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 1  +
push [ebp+CodePage]  +
call edi  +
test eax eax +
jz loc_102F896  +
mov edi [ebp+var_34] +
cmp edi ebx +
jz loc_102F83B  +
push ebx  +
push ebx  +
push [ebp+arg_14]  +
push edi  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_102F896  +
mov [ebp+var_20] edi +
jmp loc_102F896  +
mov edi ds:WideCharToMultiByte +
cmp [ebp+var_2C] ebx +
jnz loc_102F85A  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_102F896  +
push esi  +
push 1  +
call sub_10297ED  +
pop ecx  +
pop ecx  +
mov [ebp+var_20] eax +
cmp eax ebx +
jz loc_102F896  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push esi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push [ebp+arg_4]  +
call edi  +
cmp eax ebx +
jnz loc_102F88B  +
push [ebp+var_20]  +
call sub_101F40A  +
pop ecx  +
mov [ebp+var_20] ebx +
jmp loc_102F896  +
cmp [ebp+cchMultiByte] 0FFFFFFFFh +
jz loc_102F896  +
mov ecx [ebp+var_30] +
mov [ecx] eax +
push [ebp+lpWideCharStr]  +
call sub_102C345  +
pop ecx  +
mov eax [ebp+var_20] +
lea esp [ebp-40h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
lea eax [ebp+var_C] +
push edi  +
xor esi esi +
push eax  +
mov [ebp+var_C] esi +
call sub_1020A8E  +
pop ecx  +
test eax eax +
jz loc_102F8EE  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10222A7  +
add esp 14h +
push 4  +
pop eax  +
call sub_1032470  +
mov [ebp+lpAddress] esp +
push 1Ch  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpAddress]  +
call ds:VirtualQuery  +
test eax eax +
jz loc_102FA0A  +
mov eax [ebp+Buffer.AllocationBase] +
mov [ebp+var_18] eax +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
mov edi [ebp+var_C] +
mov ebx [ebp+SystemInfo.dwPageSize] +
dec edi  +
neg edi  +
sbb edi edi +
and edi 103h +
inc edi  +
cmp [ebp+var_C] 2 +
mov [ebp+dwSize] esi +
jnz loc_102F983  +
mov [ebp+var_10] esi +
mov esi ds:GetModuleHandleW +
push offset aKernelbase_d_0  +
call esi  +
test eax eax +
jnz loc_102F95A  +
push offset LibFileName  +
call esi  +
test eax eax +
jz loc_102F983  +
push offset aSetthreadstack  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_102F983  +
and [ebp+var_10] 0 +
lea ecx [ebp+var_10] +
push ecx  +
call eax  +
cmp eax 1 +
jnz loc_102F983  +
mov eax [ebp+var_10] +
test eax eax +
jbe loc_102F983  +
mov [ebp+dwSize] eax +
lea eax [ebp+dwSize] +
push eax  +
lea esi [ebx-1] +
push esi  +
push [ebp+dwSize]  +
call sub_10211BC  +
add esp 0Ch +
test eax eax +
jl loc_102FA0A  +
not esi  +
and [ebp+dwSize] esi +
jz loc_102F9B5  +
lea eax [ebp+dwSize] +
push eax  +
push ebx  +
push [ebp+dwSize]  +
call sub_10211BC  +
add esp 0Ch +
test eax eax +
jl loc_102FA0A  +
lea eax [ebx+ebx] +
cmp [ebp+dwSize] eax +
jnb loc_102F9C0  +
mov [ebp+dwSize] eax +
lea esi [ebx-1] +
not esi  +
and esi [ebp+lpAddress] +
sub esi [ebp+dwSize] +
cmp [ebp+var_C] 1 +
jnz loc_102F9D4  +
push 11h  +
pop ebx  +
mov eax [ebp+var_18] +
add ebx eax +
cmp esi ebx +
jb loc_102FA0A  +
push 4  +
push 1000h  +
push [ebp+dwSize]  +
push esi  +
call ds:VirtualAlloc  +
test eax eax +
jz loc_102FA0A  +
lea eax [ebp+flOldProtect] +
push eax  +
push edi  +
push [ebp+dwSize]  +
push esi  +
call ds:VirtualProtect  +
test eax eax +
jz loc_102FA0A  +
xor eax eax +
inc eax  +
jmp loc_102FA0C  +
xor eax eax +
lea esp [ebp-68h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101F9B2  +
leave   +
retn   +
***
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_1032470  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_1032470  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
mov esi [ebp+0Ch] +
mov edi [ebp+8] +
mov al 0FFh +
mov edi edi +
or al al +
jz loc_102FAB6  +
mov al [esi] +
add esi 1 +
mov ah [edi] +
add edi 1 +
cmp ah al +
jz loc_102FA80  +
sub al 41h +
cmp al 1Ah +
sbb cl cl +
and cl 20h +
add al cl +
add al 41h +
xchg ah al +
sub al 41h +
cmp al 1Ah +
sbb cl cl +
and cl 20h +
add al cl +
add al 41h +
cmp al ah +
jz loc_102FA80  +
sbb al al +
sbb al 0FFh +
movsx eax al +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_102FB2F  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_102FB1F  +
inc eax  +
cmp eax 3 +
jl loc_102FB0C  +
xor eax eax +
jmp loc_102FFC4  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_102FFC4  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_10370D8 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_102FB67  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_102FC0D  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_102FB95  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_102FB9F  +
inc eax  +
cmp eax 3 +
jl loc_102FB90  +
jmp loc_102FC0D  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_102FBB9  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_102FBF8  +
cmp [ebp+arg_0] edx +
jmp loc_102FBF6  +
test ecx ecx +
jz loc_102FC0A  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_102FBF8  +
cmp esi 1 +
jnb loc_102FBFF  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_102FBDB  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_102FC2D  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_102FC34  +
inc ebx  +
mov eax dword_10370D4 +
mov ecx eax +
sub ecx dword_10370D8 +
cmp ebx ecx +
jge loc_102FC52  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_102FE5F  +
cmp ebx eax +
jg loc_102FE69  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_102FC80  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_102FC9B  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_102FCE1  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_102FCE6  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_102FCD5  +
mov esi dword_10370D8 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_102FD15  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_102FDB0  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_102FD40  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_102FD4A  +
inc eax  +
cmp eax 3 +
jl loc_102FD3B  +
jmp loc_102FDB0  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_102FD64  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_102FD80  +
cmp edi edx +
jnb loc_102FD87  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_102FDAD  +
test ecx ecx +
jz loc_102FDB0  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_102FDA6  +
cmp esi 1 +
jnb loc_102FDA9  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_102FD8E  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_102FDD0  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_10370DC +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_102FDF1  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_102FE0C  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_102FE52  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_102FE57  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_102FE46  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_102FFC3  +
cmp ebx dword_10370D0 +
mov ecx dword_10370DC +
jl loc_102FF28  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_102FEA4  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_102FEBF  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_102FF05  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_102FF0A  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_102FEF9  +
mov eax dword_10370D0 +
mov ecx dword_10370E4 +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_102FFC3  +
mov eax dword_10370E4 +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_102FF50  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_102FF6B  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_102FFB4  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_102FFB9  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_102FFA8  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_10370DC +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_10370E0 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_102FFF9  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_1030003  +
cmp ecx 20h +
jnz loc_1030003  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_1030078  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_1030068  +
inc eax  +
cmp eax 3 +
jl loc_1030055  +
xor eax eax +
jmp loc_103050D  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_103050D  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_10370F0 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_10300B0  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_1030156  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_10300DE  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_10300E8  +
inc eax  +
cmp eax 3 +
jl loc_10300D9  +
jmp loc_1030156  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_1030102  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_1030141  +
cmp [ebp+arg_0] edx +
jmp loc_103013F  +
test ecx ecx +
jz loc_1030153  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_1030141  +
cmp esi 1 +
jnb loc_1030148  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_1030124  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1030176  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_103017D  +
inc ebx  +
mov eax dword_10370EC +
mov ecx eax +
sub ecx dword_10370F0 +
cmp ebx ecx +
jge loc_103019B  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_10303A8  +
cmp ebx eax +
jg loc_10303B2  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_10301C9  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_10301E4  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_103022A  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_103022F  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_103021E  +
mov esi dword_10370F0 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_103025E  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_10302F9  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_1030289  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_1030293  +
inc eax  +
cmp eax 3 +
jl loc_1030284  +
jmp loc_10302F9  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_10302AD  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_10302C9  +
cmp edi edx +
jnb loc_10302D0  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_10302F6  +
test ecx ecx +
jz loc_10302F9  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_10302EF  +
cmp esi 1 +
jnb loc_10302F2  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_10302D7  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1030319  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_10370F4 +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_103033A  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1030355  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_103039B  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_10303A0  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_103038F  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_103050C  +
cmp ebx dword_10370E8 +
mov ecx dword_10370F4 +
jl loc_1030471  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_10303ED  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1030408  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_103044E  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1030453  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1030442  +
mov eax dword_10370E8 +
mov ecx dword_10370FC +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_103050C  +
mov eax dword_10370FC +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1030499  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_10304B4  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_10304FD  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1030502  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10304F1  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_10370F4 +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_10370F8 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_1030542  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_103054C  +
cmp ecx 20h +
jnz loc_103054C  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_18] 404Eh +
mov [eax] esi +
mov [eax+4] esi +
mov [eax+8] esi +
cmp [ebp+arg_4] esi +
jbe loc_10306CD  +
mov edx [eax] +
mov ebx [eax+4] +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
mov ecx edx +
shr ecx 1Fh +
lea edi [edx+edx] +
lea edx [ebx+ebx] +
or edx ecx +
mov ecx [eax+8] +
mov esi ebx +
shr esi 1Fh +
add ecx ecx +
or ecx esi +
mov [ebp+var_14] edi +
mov esi edi +
and [ebp+var_14] 0 +
mov ebx edx +
shr ebx 1Fh +
add ecx ecx +
shr edi 1Fh +
or ecx ebx +
mov ebx [ebp+var_10] +
add esi esi +
add edx edx +
or edx edi +
lea edi [esi+ebx] +
mov [eax] esi +
mov [eax+4] edx +
mov [eax+8] ecx +
cmp edi esi +
jb loc_10305DE  +
cmp edi ebx +
jnb loc_10305E5  +
mov [ebp+var_14] 1 +
xor ebx ebx +
mov [eax] edi +
cmp [ebp+var_14] ebx +
jz loc_1030608  +
lea esi [edx+1] +
cmp esi edx +
jb loc_10305FA  +
cmp esi 1 +
jnb loc_10305FD  +
xor ebx ebx +
inc ebx  +
mov [eax+4] esi +
test ebx ebx +
jz loc_1030608  +
inc ecx  +
mov [eax+8] ecx +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
lea ebx [ecx+edx] +
xor esi esi +
cmp ebx ecx +
jb loc_103061B  +
cmp ebx edx +
jnb loc_103061E  +
xor esi esi +
inc esi  +
mov [eax+4] ebx +
test esi esi +
jz loc_1030628  +
inc dword ptr [eax+8]  +
mov ecx [ebp+var_8] +
add [eax+8] ecx +
and [ebp+var_14] 0 +
lea ecx [edi+edi] +
mov edx edi +
shr edx 1Fh +
lea edi [ebx+ebx] +
or edi edx +
mov edx [eax+8] +
mov esi ebx +
shr esi 1Fh +
lea ebx [edx+edx] +
mov edx [ebp+arg_0] +
or ebx esi +
mov [eax] ecx +
mov [eax+4] edi +
mov [eax+8] ebx +
movsx edx byte ptr [edx] +
lea esi [ecx+edx] +
mov [ebp+var_10] edx +
cmp esi ecx +
jb loc_1030668  +
cmp esi edx +
jnb loc_103066F  +
mov [ebp+var_14] 1 +
cmp [ebp+var_14] 0 +
mov [eax] esi +
jz loc_1030693  +
lea ecx [edi+1] +
xor edx edx +
cmp ecx edi +
jb loc_1030685  +
cmp ecx 1 +
jnb loc_1030688  +
xor edx edx +
inc edx  +
mov [eax+4] ecx +
test edx edx +
jz loc_1030693  +
inc ebx  +
mov [eax+8] ebx +
dec [ebp+arg_4]  +
inc [ebp+arg_0]  +
cmp [ebp+arg_4] 0 +
ja loc_1030587  +
xor esi esi +
jmp loc_10306CD  +
mov ecx [eax+4] +
mov edx ecx +
shr edx 10h +
mov [eax+8] edx +
mov edx [eax] +
mov edi edx +
shl ecx 10h +
shr edi 10h +
or ecx edi +
shl edx 10h +
add [ebp+var_18] 0FFF0h +
mov [eax+4] ecx +
mov [eax] edx +
cmp [eax+8] esi +
jz loc_10306A7  +
mov ebx 8000h +
test [eax+8] ebx +
jnz loc_103070C  +
mov esi [eax] +
mov edi [eax+4] +
add [ebp+var_18] 0FFFFh +
mov ecx esi +
add esi esi +
shr ecx 1Fh +
mov [eax] esi +
lea esi [edi+edi] +
or esi ecx +
mov ecx [eax+8] +
mov edx edi +
shr edx 1Fh +
add ecx ecx +
or ecx edx +
mov [eax+4] esi +
mov [eax+8] ecx +
test ecx ebx +
jz loc_10306DC  +
mov cx word ptr [ebp+var_18] +
mov [eax+0Ah] cx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
xor ecx ecx +
push ebx  +
push esi  +
xor esi esi +
mov [ebp+var_78] eax +
mov eax [ebp+arg_4] +
inc esi  +
push edi  +
mov [ebp+var_70] eax +
lea edi [ebp+var_20] +
mov [ebp+var_74] ecx +
mov [ebp+var_68] esi +
mov [ebp+var_4C] ecx +
mov [ebp+var_58] ecx +
mov [ebp+var_5C] ecx +
mov [ebp+var_60] ecx +
mov [ebp+var_64] ecx +
mov [ebp+var_50] ecx +
mov [ebp+var_6C] ecx +
mov [ebp+var_54] edx +
mov al [edx] +
cmp al 20h +
jz loc_1030784  +
cmp al 9 +
jz loc_1030784  +
cmp al 0Ah +
jz loc_1030784  +
cmp al 0Dh +
jnz loc_1030787  +
inc edx  +
jmp loc_1030772  +
mov bl 30h +
mov al [edx] +
inc edx  +
cmp ecx 0Bh +
ja loc_1030982  +
jmp ds:off_1030D88[ecx*4]  +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_10307AC  +
push 3  +
pop ecx  +
dec edx  +
jmp loc_1030789  +
cmp al [ebp+arg_1C] +
jnz loc_10307B6  +
push 5  +
pop ecx  +
jmp loc_1030789  +
movsx eax al +
sub eax 2Bh +
jz loc_10307DB  +
dec eax  +
dec eax  +
jz loc_10307CF  +
sub eax 3 +
jnz loc_1030920  +
mov ecx esi +
jmp loc_1030789  +
push 2  +
pop ecx  +
mov [ebp+var_74] 8000h +
jmp loc_1030789  +
and [ebp+var_74] 0 +
push 2  +
pop ecx  +
jmp loc_1030789  +
mov cl al +
sub cl 31h +
mov [ebp+var_58] esi +
cmp cl 8 +
jbe loc_10307A6  +
cmp al [ebp+arg_1C] +
jnz loc_10307FA  +
push 4  +
jmp loc_10307B3  +
cmp al 2Bh +
jz loc_1030826  +
cmp al 2Dh +
jz loc_1030826  +
cmp al bl +
jz loc_10307CB  +
cmp al 43h +
jle loc_1030920  +
cmp al 45h +
jle loc_1030822  +
cmp al 63h +
jle loc_1030920  +
cmp al 65h +
jg loc_1030920  +
push 6  +
jmp loc_10307B3  +
dec edx  +
push 0Bh  +
jmp loc_10307B3  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_10307A6  +
cmp al [ebp+arg_1C] +
jz loc_10307B1  +
cmp al bl +
jz loc_10307CB  +
mov edx [ebp+var_54] +
jmp loc_103094B  +
mov [ebp+var_58] esi +
jmp loc_103086D  +
cmp al 39h +
jg loc_1030871  +
cmp [ebp+var_4C] 19h +
jnb loc_1030867  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
jmp loc_103086A  +
inc [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1030853  +
cmp al [ebp+arg_1C] +
jz loc_10307F6  +
cmp al 2Bh +
jz loc_1030826  +
cmp al 2Dh +
jz loc_1030826  +
jmp loc_1030806  +
cmp [ebp+var_4C] 0 +
mov [ebp+var_58] esi +
mov [ebp+var_5C] esi +
jnz loc_10308B2  +
jmp loc_1030894  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_103088E  +
jmp loc_10308B2  +
cmp al 39h +
jg loc_1030876  +
cmp [ebp+var_4C] 19h +
jnb loc_10308AF  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_103089A  +
jmp loc_1030876  +
sub al bl +
mov [ebp+var_5C] esi +
cmp al 9 +
ja loc_1030846  +
push 4  +
jmp loc_10307A8  +
lea ecx [edx-2] +
mov [ebp+var_54] ecx +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_10308DF  +
push 9  +
jmp loc_10307A8  +
movsx eax al +
sub eax 2Bh +
jz loc_1030907  +
dec eax  +
dec eax  +
jz loc_10308FB  +
sub eax 3 +
jnz loc_1030846  +
push 8  +
jmp loc_10307B3  +
or [ebp+var_68] 0FFFFFFFFh +
push 7  +
pop ecx  +
jmp loc_1030789  +
push 7  +
jmp loc_10307B3  +
mov [ebp+var_60] esi +
jmp loc_1030916  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_1030913  +
sub al 31h +
cmp al 8 +
jbe loc_10308D8  +
dec edx  +
jmp loc_103094B  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_10308D8  +
cmp al bl +
jmp loc_10308EE  +
cmp [ebp+arg_18] 0 +
jz loc_103097E  +
movsx eax al +
sub eax 2Bh +
lea ecx [edx-1] +
mov [ebp+var_54] ecx +
jz loc_1030907  +
dec eax  +
dec eax  +
jz loc_10308FB  +
mov edx ecx +
cmp [ebp+var_58] 0 +
mov eax [ebp+var_70] +
mov [eax] edx +
jz loc_1030D33  +
push 18h  +
pop eax  +
cmp [ebp+var_4C] eax +
jbe loc_1030972  +
cmp [ebp+var_9] 5 +
jl loc_103096B  +
inc [ebp+var_9]  +
dec edi  +
inc [ebp+var_50]  +
mov [ebp+var_4C] eax +
cmp [ebp+var_4C] 0 +
jbe loc_1030D5A  +
jmp loc_10309D7  +
push 0Ah  +
pop ecx  +
dec edx  +
cmp ecx 0Ah +
jnz loc_1030789  +
jmp loc_103094B  +
mov [ebp+var_60] esi +
xor ecx ecx +
jmp loc_10309AD  +
cmp al 39h +
jg loc_10309B8  +
imul ecx ecx +
movsx esi al +
lea ecx [ecx+esi-30h] +
cmp ecx 1450h +
jg loc_10309B3  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1030994  +
jmp loc_10309B8  +
mov ecx 1451h +
mov [ebp+var_64] ecx +
jmp loc_10309C8  +
cmp al 39h +
jg loc_1030920  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_10309BD  +
jmp loc_1030920  +
dec [ebp+var_4C]  +
inc [ebp+var_50]  +
dec edi  +
cmp byte ptr [edi] 0 +
jz loc_10309D1  +
lea eax [ebp+var_3C] +
push eax  +
push [ebp+var_4C]  +
lea eax [ebp+var_20] +
push eax  +
call sub_1030555  +
mov eax [ebp+var_64] +
xor edx edx +
add esp 0Ch +
cmp [ebp+var_68] edx +
jge loc_10309FC  +
neg eax  +
add eax [ebp+var_50] +
cmp [ebp+var_60] edx +
jnz loc_1030A07  +
add eax [ebp+arg_10] +
cmp [ebp+var_5C] edx +
jnz loc_1030A0F  +
sub eax [ebp+arg_14] +
cmp eax 1450h +
jg loc_1030D3C  +
cmp eax 0FFFFEBB0h +
jl loc_1030D53  +
mov ecx offset unk_1037100 +
sub ecx 60h +
mov [ebp+var_54] eax +
cmp eax edx +
jz loc_1030D21  +
jge loc_1030A47  +
neg eax  +
mov ecx offset unk_1037260 +
mov [ebp+var_54] eax +
sub ecx 60h +
cmp [ebp+arg_C] edx +
jnz loc_1030A52  +
xor eax eax +
mov word ptr [ebp+var_3C] ax +
cmp [ebp+var_54] edx +
jz loc_1030D21  +
jmp loc_1030A62  +
mov ecx [ebp+var_7C] +
xor edx edx +
mov eax [ebp+var_54] +
sar [ebp+var_54] 3 +
add ecx 54h +
and eax 7 +
mov [ebp+var_7C] ecx +
cmp eax edx +
jz loc_1030D17  +
imul eax eax +
add eax ecx +
mov ebx eax +
mov eax 8000h +
cmp [ebx] ax +
jb loc_1030A99  +
mov esi ebx +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
dec [ebp+var_48+2]  +
lea ebx [ebp+var_48] +
movzx ecx word ptr [ebx+0Ah] +
xor eax eax +
mov [ebp+var_50] eax +
mov [ebp+var_2C] eax +
mov [ebp+var_28] eax +
mov [ebp+var_24] eax +
mov eax [ebp+var_32] +
mov esi ecx +
mov edx 7FFFh +
xor esi eax +
and eax edx +
and ecx edx +
and esi 8000h +
mov edi 7FFFh +
lea edx [ecx+eax] +
mov [ebp+var_70] esi +
movzx edx dx +
cmp ax di +
jnb loc_1030CF9  +
cmp cx di +
jnb loc_1030CF9  +
mov edi 0BFFDh +
cmp dx di +
ja loc_1030CF9  +
mov esi 3FBFh +
cmp dx si +
ja loc_1030B06  +
xor eax eax +
mov [ebp+var_38] eax +
mov [ebp+var_3C] eax +
jmp loc_1030D14  +
xor esi esi +
cmp ax si +
jnz loc_1030B2C  +
inc edx  +
test dword ptr [ebp-34h] 7FFFFFFFh +
jnz loc_1030B2C  +
cmp [ebp+var_38] esi +
jnz loc_1030B2C  +
cmp [ebp+var_3C] esi +
jnz loc_1030B2C  +
xor eax eax +
mov word ptr [ebp+var_32] ax +
jmp loc_1030D17  +
cmp cx si +
jnz loc_1030B52  +
inc edx  +
test dword ptr [ebx+8] 7FFFFFFFh +
jnz loc_1030B52  +
cmp [ebx+4] esi +
jnz loc_1030B52  +
cmp [ebx] esi +
jnz loc_1030B52  +
mov [ebp-34h] esi +
mov [ebp+var_38] esi +
mov [ebp+var_3C] esi +
jmp loc_1030D17  +
mov [ebp+var_68] esi +
lea edi [ebp+var_28] +
mov [ebp+var_58] 5 +
mov eax [ebp+var_68] +
mov ecx [ebp+var_58] +
add eax eax +
mov [ebp+var_64] ecx +
test ecx ecx +
jle loc_1030BC0  +
lea eax [ebp+eax+var_3C] +
mov [ebp+var_5C] eax +
lea eax [ebx+8] +
mov [ebp+var_60] eax +
mov eax [ebp+var_5C] +
mov ecx [ebp+var_60] +
movzx ecx word ptr [ecx] +
movzx eax word ptr [eax] +
and [ebp+var_4C] 0 +
imul eax ecx +
mov ecx [edi-4] +
lea esi [ecx+eax] +
cmp esi ecx +
jb loc_1030B9C  +
cmp esi eax +
jnb loc_1030BA3  +
mov [ebp+var_4C] 1 +
cmp [ebp+var_4C] 0 +
mov [edi-4] esi +
jz loc_1030BAF  +
inc word ptr [edi]  +
add [ebp+var_5C] 2 +
sub [ebp+var_60] 2 +
dec [ebp+var_64]  +
cmp [ebp+var_64] 0 +
jg loc_1030B7B  +
inc edi  +
inc edi  +
inc [ebp+var_68]  +
dec [ebp+var_58]  +
cmp [ebp+var_58] 0 +
jg loc_1030B5F  +
add edx 0C002h +
test dx dx +
jle loc_1030C10  +
mov edi [ebp+var_24] +
test edi edi +
js loc_1030C0B  +
mov esi [ebp+var_28] +
mov eax [ebp+var_2C] +
shl [ebp+var_2C] 1 +
shr eax 1Fh +
mov ecx esi +
add esi esi +
or esi eax +
shr ecx 1Fh +
lea eax [edi+edi] +
or eax ecx +
add edx 0FFFFh +
mov [ebp+var_28] esi +
mov [ebp+var_24] eax +
test dx dx +
jg loc_1030BD9  +
test dx dx +
jg loc_1030C5D  +
add edx 0FFFFh +
test dx dx +
jge loc_1030C5D  +
mov eax edx +
neg eax  +
movzx esi ax +
add edx esi +
test byte ptr [ebp+var_2C] 1 +
jz loc_1030C2D  +
inc [ebp+var_50]  +
mov eax [ebp+var_24] +
mov edi [ebp+var_28] +
mov ecx [ebp+var_28] +
shr [ebp+var_24] 1 +
shl eax 1Fh +
shr edi 1 +
or edi eax +
mov eax [ebp+var_2C] +
shl ecx 1Fh +
shr eax 1 +
or eax ecx +
dec esi  +
mov [ebp+var_28] edi +
mov [ebp+var_2C] eax +
jnz loc_1030C24  +
cmp [ebp+var_50] esi +
jz loc_1030C5D  +
or word ptr [ebp+var_2C] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_2C] cx +
ja loc_1030C7B  +
mov ecx [ebp+var_2C] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_1030CAF  +
cmp [ebp+var_2C+2] 0FFFFFFFFh +
jnz loc_1030CAC  +
and [ebp+var_2C+2] 0 +
cmp [ebp+var_28+2] 0FFFFFFFFh +
jnz loc_1030CA7  +
and [ebp+var_28+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_24+2] cx +
jnz loc_1030CA1  +
mov word ptr [ebp+var_24+2] ax +
inc edx  +
jmp loc_1030CAF  +
inc word ptr [ebp+var_24+2]  +
jmp loc_1030CAF  +
inc [ebp+var_28+2]  +
jmp loc_1030CAF  +
inc [ebp+var_2C+2]  +
mov eax 7FFFh +
cmp dx ax +
jb loc_1030CDC  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_70] ax +
mov [ebp+var_38] eax +
setz cl  +
mov [ebp+var_3C] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp-34h] ecx +
jmp loc_1030D17  +
mov ax word ptr [ebp+var_2C+2] +
or edx [ebp+var_70] +
mov word ptr [ebp+var_3C] ax +
mov eax [ebp+var_28] +
mov [ebp+var_3C+2] eax +
mov eax [ebp+var_24] +
mov [ebp+var_38+2] eax +
mov word ptr [ebp+var_32] dx +
jmp loc_1030D17  +
xor eax eax +
test si si +
setz al  +
and [ebp+var_38] 0 +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
and [ebp+var_3C] 0 +
mov [ebp-34h] eax +
cmp [ebp+var_54] 0 +
jnz loc_1030A5D  +
mov eax [ebp-34h] +
movzx ecx word ptr [ebp+var_3C] +
mov esi [ebp+var_3C+2] +
mov edx [ebp+var_38+2] +
shr eax 10h +
jmp loc_1030D62  +
mov [ebp+var_6C] 4 +
jmp loc_1030D5A  +
xor esi esi +
mov eax 7FFFh +
mov edx 80000000h +
xor ecx ecx +
mov [ebp+var_6C] 2 +
jmp loc_1030D62  +
mov [ebp+var_6C] 1 +
xor ecx ecx +
xor eax eax +
xor edx edx +
xor esi esi +
mov edi [ebp+var_78] +
or eax [ebp+var_74] +
mov [edi] cx +
mov ecx [ebp+var_4] +
mov [edi+2] esi +
mov [edi+0Ah] ax +
mov eax [ebp+var_6C] +
mov [edi+6] edx +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1030DE8  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
xor eax eax +
jmp loc_1030E13  +
mov eax [eax] +
mov eax [eax+0BCh] +
mov eax [eax] +
movzx eax byte ptr [eax] +
push eax  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1030728  +
add esp 20h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_1036118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
mov edx [ebp+var_8] +
mov ecx edx +
mov eax 8000h +
and ecx eax +
and edx 7FFFh +
mov [ebp+var_60] ebx +
mov [ebp+var_30] 0CCh +
mov byte ptr [ebp-2Fh] 0CCh +
mov [ebp+var_2E] 0CCh +
mov [ebp+var_2D] 0CCh +
mov [ebp+var_2C] 0CCh +
mov byte ptr [ebp-2Bh] 0CCh +
mov [ebp+var_2A] 0CCh +
mov [ebp+var_29] 0CCh +
mov byte ptr [ebp+var_28] 0CCh +
mov byte ptr [ebp+var_28+1] 0CCh +
mov byte ptr [ebp+var_28+2] 0FBh +
mov byte ptr [ebp+var_28+3] 3Fh +
mov [ebp+var_74] 1 +
mov [ebp+var_70] ecx +
test cx cx +
jz loc_1030E97  +
mov byte ptr [ebx+2] 2Dh +
jmp loc_1030E9B  +
mov byte ptr [ebx+2] 20h +
mov esi [ebp+var_C] +
mov edi [ebp+var_10] +
test dx dx +
jnz loc_1030ED5  +
test esi esi +
jnz loc_1030ED5  +
test edi edi +
jnz loc_1030ED5  +
xor edx edx +
cmp cx ax +
setnz al  +
dec al  +
and al 0Dh +
add al 20h +
mov [ebx] dx +
mov [ebx+2] al +
mov byte ptr [ebx+3] 1 +
mov byte ptr [ebx+4] 30h +
mov [ebx+5] dl +
xor eax eax +
inc eax  +
jmp loc_10316F3  +
mov eax 7FFFh +
cmp dx ax +
jnz loc_1030F82  +
xor eax eax +
inc eax  +
mov [ebx] ax +
mov eax 80000000h +
cmp esi eax +
jnz loc_1030EF6  +
test edi edi +
jz loc_1030F05  +
test esi 40000000h +
jnz loc_1030F05  +
push offset a1Snan  +
jmp loc_1030F56  +
test cx cx +
jz loc_1030F1D  +
cmp esi 0C0000000h +
jnz loc_1030F1D  +
test edi edi +
jnz loc_1030F51  +
push offset a1Ind  +
jmp loc_1030F2A  +
cmp esi eax +
jnz loc_1030F51  +
test edi edi +
jnz loc_1030F51  +
push offset a1Inf  +
lea eax [ebx+4] +
push 16h  +
push eax  +
call sub_102277A  +
add esp 0Ch +
xor esi esi +
test eax eax +
jz loc_1030F4B  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10222A7  +
add esp 14h +
mov byte ptr [ebx+3] 5 +
jmp loc_1030F7B  +
push offset a1Qnan  +
lea eax [ebx+4] +
push 16h  +
push eax  +
call sub_102277A  +
add esp 0Ch +
xor esi esi +
test eax eax +
jz loc_1030F77  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10222A7  +
add esp 14h +
mov byte ptr [ebx+3] 6 +
xor eax eax +
jmp loc_10316F3  +
movzx ecx dx +
mov ebx ecx +
imul ecx ecx +
shr ebx 8 +
mov eax esi +
shr eax 18h +
lea eax [ebx+eax*2] +
imul eax eax +
lea eax [eax+ecx-134312F4h] +
sar eax 10h +
movzx eax ax +
xor ecx ecx +
movsx ebx ax +
mov word ptr [ebp+var_20] cx +
mov ecx offset unk_1037100 +
neg ebx  +
sub ecx 60h +
mov [ebp+var_4C] eax +
mov word ptr [ebp+var_16] dx +
mov [ebp+var_1A] esi +
mov [ebp+var_20+2] edi +
mov [ebp+var_64] ecx +
test ebx ebx +
jz loc_103126F  +
jge loc_1030FE2  +
mov eax offset unk_1037260 +
neg ebx  +
sub eax 60h +
mov [ebp+var_64] eax +
test ebx ebx +
jz loc_103126F  +
add [ebp+var_64] 54h +
mov ecx ebx +
and ecx 7 +
sar ebx 3 +
test ecx ecx +
jz loc_1031265  +
imul ecx ecx +
add ecx [ebp+var_64] +
mov eax ecx +
mov [ebp+var_44] ecx +
mov ecx 8000h +
cmp [eax] cx +
jb loc_1031024  +
mov esi eax +
lea edi [ebp+var_3C] +
movs   +
movs   +
lea eax [ebp+var_3C] +
movs   +
dec [ebp+var_3C+2]  +
mov [ebp+var_44] eax +
movzx edx word ptr [eax+0Ah] +
xor ecx ecx +
mov [ebp+var_54] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_16] +
mov esi edx +
xor esi ecx +
and esi 8000h +
mov [ebp+var_48] esi +
mov esi 7FFFh +
and ecx esi +
and edx esi +
lea esi [edx+ecx] +
movzx edi si +
mov esi 7FFFh +
cmp cx si +
jnb loc_103130F  +
cmp dx si +
jnb loc_103130F  +
mov esi 0BFFDh +
cmp di si +
ja loc_103130F  +
mov esi 3FBFh +
cmp di si +
ja loc_1031094  +
xor esi esi +
mov [ebp+var_1A+2] esi +
mov [ebp-1Ch] esi +
mov [ebp+var_20] esi +
jmp loc_1031267  +
xor esi esi +
cmp cx si +
jnz loc_10310BA  +
inc edi  +
test [ebp+var_1A+2] 7FFFFFFFh +
jnz loc_10310BA  +
cmp [ebp-1Ch] esi +
jnz loc_10310BA  +
cmp [ebp+var_20] esi +
jnz loc_10310BA  +
xor eax eax +
mov word ptr [ebp+var_16] ax +
jmp loc_1031267  +
cmp dx si +
jnz loc_10310D2  +
inc edi  +
test dword ptr [eax+8] 7FFFFFFFh +
jnz loc_10310D2  +
cmp [eax+4] esi +
jnz loc_10310D2  +
cmp [eax] esi +
jz loc_1031086  +
and [ebp+var_58] esi +
lea esi [ebp+var_C] +
mov [ebp+var_40] 5 +
mov ecx [ebp+var_58] +
mov edx [ebp+var_40] +
add ecx ecx +
mov [ebp+var_50] edx +
test edx edx +
jle loc_1031143  +
lea ecx [ebp+ecx+var_20] +
add eax 8 +
mov [ebp+var_6C] ecx +
mov [ebp+var_68] eax +
mov eax [ebp+var_6C] +
movzx ecx word ptr [eax] +
mov eax [ebp+var_68] +
movzx eax word ptr [eax] +
mov edx [esi-4] +
imul ecx eax +
and [ebp+var_5C] 0 +
lea eax [edx+ecx] +
cmp eax edx +
jb loc_103111C  +
cmp eax ecx +
jnb loc_1031123  +
mov [ebp+var_5C] 1 +
cmp [ebp+var_5C] 0 +
mov [esi-4] eax +
jz loc_103112F  +
inc word ptr [esi]  +
add [ebp+var_6C] 2 +
sub [ebp+var_68] 2 +
dec [ebp+var_50]  +
cmp [ebp+var_50] 0 +
jg loc_10310FB  +
mov eax [ebp+var_44] +
inc esi  +
inc esi  +
inc [ebp+var_58]  +
dec [ebp+var_40]  +
cmp [ebp+var_40] 0 +
jg loc_10310DF  +
add edi 0C002h +
test di di +
jle loc_1031197  +
test [ebp+var_8] 80000000h +
jnz loc_1031192  +
mov eax [ebp+var_C] +
mov ecx [ebp+var_10] +
shl [ebp+var_10] 1 +
mov edx eax +
add eax eax +
shr ecx 1Fh +
or eax ecx +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
shr edx 1Fh +
add eax eax +
or eax edx +
add edi 0FFFFh +
mov [ebp+var_8] eax +
test di di +
jg loc_103115C  +
test di di +
jg loc_10311E4  +
add edi 0FFFFh +
test di di +
jge loc_10311E4  +
mov eax edi +
neg eax  +
movzx eax ax +
add edi eax +
test byte ptr [ebp+var_10] 1 +
jz loc_10311B4  +
inc [ebp+var_54]  +
mov ecx [ebp+var_8] +
mov esi [ebp+var_C] +
mov edx [ebp+var_C] +
shr [ebp+var_8] 1 +
shl ecx 1Fh +
shr esi 1 +
or esi ecx +
mov ecx [ebp+var_10] +
shl edx 1Fh +
shr ecx 1 +
or ecx edx +
dec eax  +
mov [ebp+var_C] esi +
mov [ebp+var_10] ecx +
jnz loc_10311AB  +
cmp [ebp+var_54] eax +
jz loc_10311E4  +
or word ptr [ebp+var_10] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_10] cx +
ja loc_1031202  +
mov ecx [ebp+var_10] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_1031236  +
cmp [ebp+var_10+2] 0FFFFFFFFh +
jnz loc_1031233  +
and [ebp+var_10+2] 0 +
cmp [ebp+var_C+2] 0FFFFFFFFh +
jnz loc_103122E  +
and [ebp+var_C+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_8+2] cx +
jnz loc_1031228  +
mov word ptr [ebp+var_8+2] ax +
inc edi  +
jmp loc_1031236  +
inc word ptr [ebp+var_8+2]  +
jmp loc_1031236  +
inc [ebp+var_C+2]  +
jmp loc_1031236  +
inc [ebp+var_10+2]  +
mov eax 7FFFh +
cmp di ax +
jb loc_10312EF  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_48] ax +
mov [ebp-1Ch] eax +
setz cl  +
mov [ebp+var_20] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp+var_1A+2] ecx +
xor esi esi +
cmp ebx esi +
jnz loc_1030FEA  +
mov ecx [ebp+var_1A+2] +
shr ecx 10h +
mov edx 3FFFh +
mov eax 7FFFh +
cmp cx dx +
jb loc_103152B  +
inc [ebp+var_4C]  +
xor edx edx +
mov [ebp+var_50] edx +
mov [ebp+var_10] edx +
mov [ebp+var_C] edx +
mov [ebp+var_8] edx +
mov edx [ebp+var_28+2] +
movzx ecx cx +
mov ebx edx +
xor ebx ecx +
and ecx eax +
and edx eax +
and ebx 8000h +
mov edi eax +
lea esi [edx+ecx] +
mov [ebp+var_5C] ebx +
movzx esi si +
cmp cx di +
jnb loc_103150D  +
cmp dx ax +
jnb loc_103150D  +
mov eax 0BFFDh +
cmp si ax +
ja loc_103150D  +
mov eax 3FBFh +
cmp si ax +
ja loc_103132D  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp+var_20] eax +
jmp loc_1031528  +
mov ax word ptr [ebp+var_10+2] +
or edi [ebp+var_48] +
mov word ptr [ebp+var_20] ax +
mov eax [ebp+var_C] +
mov [ebp+var_20+2] eax +
mov eax [ebp+var_8] +
mov [ebp+var_1A] eax +
mov word ptr [ebp+var_16] di +
jmp loc_1031265  +
xor eax eax +
xor esi esi +
cmp word ptr [ebp+var_48] si +
setz al  +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
mov [ebp+var_1A+2] eax +
jmp loc_1031089  +
xor eax eax +
cmp cx ax +
jnz loc_1031351  +
inc esi  +
test [ebp+var_1A+2] 7FFFFFFFh +
jnz loc_1031351  +
cmp [ebp-1Ch] eax +
jnz loc_1031351  +
cmp [ebp+var_20] eax +
jnz loc_1031351  +
mov word ptr [ebp+var_16] ax +
jmp loc_103152B  +
cmp dx ax +
jnz loc_103136E  +
inc esi  +
test [ebp+var_28] 7FFFFFFFh +
jnz loc_103136E  +
cmp dword ptr [ebp+var_2C] eax +
jnz loc_103136E  +
cmp dword ptr [ebp+var_30] eax +
jz loc_10312E4  +
mov [ebp+var_58] eax +
lea edi [ebp+var_C] +
mov [ebp+var_40] 5 +
mov eax [ebp+var_58] +
mov ecx [ebp+var_40] +
add eax eax +
mov [ebp+var_54] ecx +
test ecx ecx +
jle loc_10313D4  +
lea ecx [ebp+var_28] +
mov [ebp+var_48] ecx +
lea eax [ebp+eax+var_20] +
mov ecx [ebp+var_48] +
movzx edx word ptr [eax] +
movzx ecx word ptr [ecx] +
and [ebp+var_44] 0 +
imul ecx edx +
mov edx [edi-4] +
lea ebx [edx+ecx] +
cmp ebx edx +
jb loc_10313B2  +
cmp ebx ecx +
jnb loc_10313B9  +
mov [ebp+var_44] 1 +
cmp [ebp+var_44] 0 +
mov [edi-4] ebx +
jz loc_10313C5  +
inc word ptr [edi]  +
sub [ebp+var_48] 2 +
inc eax  +
inc eax  +
dec [ebp+var_54]  +
cmp [ebp+var_54] 0 +
jg loc_1031394  +
inc edi  +
inc edi  +
inc [ebp+var_58]  +
dec [ebp+var_40]  +
cmp [ebp+var_40] 0 +
jg loc_103137B  +
add esi 0C002h +
test si si +
jle loc_1031424  +
mov edi [ebp+var_8] +
test edi edi +
js loc_103141F  +
mov eax [ebp+var_C] +
mov ecx [ebp+var_10] +
shl [ebp+var_10] 1 +
mov edx eax +
add eax eax +
shr ecx 1Fh +
or eax ecx +
mov [ebp+var_C] eax +
shr edx 1Fh +
lea eax [edi+edi] +
or eax edx +
add esi 0FFFFh +
mov [ebp+var_8] eax +
test si si +
jg loc_10313ED  +
test si si +
jg loc_1031471  +
add esi 0FFFFh +
test si si +
jge loc_1031471  +
mov eax esi +
neg eax  +
movzx eax ax +
add esi eax +
test byte ptr [ebp+var_10] 1 +
jz loc_1031441  +
inc [ebp+var_50]  +
mov ecx [ebp+var_8] +
mov edi [ebp+var_C] +
mov edx [ebp+var_C] +
shr [ebp+var_8] 1 +
shl ecx 1Fh +
shr edi 1 +
or edi ecx +
mov ecx [ebp+var_10] +
shl edx 1Fh +
shr ecx 1 +
or ecx edx +
dec eax  +
mov [ebp+var_C] edi +
mov [ebp+var_10] ecx +
jnz loc_1031438  +
cmp [ebp+var_50] eax +
jz loc_1031471  +
or word ptr [ebp+var_10] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_10] cx +
ja loc_103148F  +
mov ecx [ebp+var_10] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_10314C3  +
cmp [ebp+var_10+2] 0FFFFFFFFh +
jnz loc_10314C0  +
and [ebp+var_10+2] 0 +
cmp [ebp+var_C+2] 0FFFFFFFFh +
jnz loc_10314BB  +
and [ebp+var_C+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_8+2] cx +
jnz loc_10314B5  +
mov word ptr [ebp+var_8+2] ax +
inc esi  +
jmp loc_10314C3  +
inc word ptr [ebp+var_8+2]  +
jmp loc_10314C3  +
inc [ebp+var_C+2]  +
jmp loc_10314C3  +
inc [ebp+var_10+2]  +
mov eax 7FFFh +
cmp si ax +
jb loc_10314F0  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_5C] ax +
mov [ebp-1Ch] eax +
setz cl  +
mov [ebp+var_20] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp+var_1A+2] ecx +
jmp loc_103152B  +
mov ax word ptr [ebp+var_10+2] +
or esi [ebp+var_5C] +
mov word ptr [ebp+var_20] ax +
mov eax [ebp+var_C] +
mov [ebp+var_20+2] eax +
mov eax [ebp+var_8] +
mov [ebp+var_1A] eax +
mov word ptr [ebp+var_16] si +
jmp loc_103152B  +
xor eax eax +
test bx bx +
setz al  +
and dword ptr [ebp-1Ch] 0 +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
and [ebp+var_20] 0 +
mov [ebp+var_1A+2] eax +
test [ebp+arg_10] 1 +
mov edx [ebp+var_60] +
mov eax [ebp+var_4C] +
mov edi [ebp+arg_C] +
mov [edx] ax +
jz loc_103156F  +
cwde   +
add edi eax +
test edi edi +
jg loc_103156F  +
xor eax eax +
mov [edx] ax +
mov eax 8000h +
cmp word ptr [ebp+var_70] ax +
mov byte ptr [edx+3] 1 +
setnz al  +
dec al  +
and al 0Dh +
add al 20h +
mov [edx+2] al +
mov byte ptr [edx+4] 30h +
mov byte ptr [edx+5] 0 +
jmp loc_1030ECD  +
cmp edi 15h +
jle loc_1031577  +
push 15h  +
pop edi  +
mov esi [ebp+var_1A+2] +
shr esi 10h +
sub esi 3FFEh +
xor eax eax +
mov word ptr [ebp+var_16] ax +
mov [ebp+var_44] 8 +
mov eax [ebp+var_20] +
mov ebx [ebp-1Ch] +
mov ecx [ebp-1Ch] +
shl [ebp+var_20] 1 +
shr eax 1Fh +
add ebx ebx +
or ebx eax +
mov eax [ebp+var_1A+2] +
shr ecx 1Fh +
add eax eax +
or eax ecx +
dec [ebp+var_44]  +
mov [ebp-1Ch] ebx +
mov [ebp+var_1A+2] eax +
jnz loc_1031590  +
test esi esi +
jge loc_10315EE  +
neg esi  +
and esi 0FFh +
jle loc_10315EE  +
mov eax [ebp+var_1A+2] +
mov ebx [ebp-1Ch] +
mov ecx [ebp-1Ch] +
shr [ebp+var_1A+2] 1 +
shl eax 1Fh +
shr ebx 1 +
or ebx eax +
mov eax [ebp+var_20] +
shl ecx 1Fh +
shr eax 1 +
or eax ecx +
dec esi  +
mov [ebp-1Ch] ebx +
mov [ebp+var_20] eax +
test esi esi +
jg loc_10315C6  +
lea eax [edi+1] +
lea ebx [edx+4] +
mov [ebp+var_40] ebx +
mov [ebp+var_4C] eax +
test eax eax +
jle loc_10316B7  +
mov edx [ebp+var_20] +
mov eax [ebp-1Ch] +
lea esi [ebp+var_20] +
lea edi [ebp+var_3C] +
movs   +
movs   +
movs   +
shl [ebp+var_20] 1 +
mov edi [ebp+var_20] +
shl [ebp+var_20] 1 +
shr edx 1Fh +
lea ecx [eax+eax] +
or ecx edx +
mov edx [ebp+var_1A+2] +
mov esi eax +
shr esi 1Fh +
add edx edx +
or edx esi +
mov eax ecx +
lea esi [ecx+ecx] +
shr eax 1Fh +
lea ecx [edx+edx] +
mov edx [ebp+var_3C] +
shr edi 1Fh +
or ecx eax +
mov eax [ebp+var_20] +
or esi edi +
lea edi [edx+eax] +
cmp edi eax +
jb loc_1031651  +
cmp edi edx +
jnb loc_1031669  +
lea eax [esi+1] +
xor edx edx +
cmp eax esi +
jb loc_103165F  +
cmp eax 1 +
jnb loc_1031662  +
xor edx edx +
inc edx  +
mov esi eax +
test edx edx +
jz loc_1031669  +
inc ecx  +
mov eax [ebp+var_38] +
lea edx [eax+esi] +
mov [ebp+var_44] edx +
cmp edx esi +
jb loc_103167A  +
cmp edx eax +
jnb loc_103167B  +
inc ecx  +
add ecx [ebp+var_34] +
shr edx 1Fh +
add ecx ecx +
or ecx edx +
lea esi [edi+edi] +
mov [ebp+var_20] esi +
mov esi [ebp+var_44] +
mov [ebp+var_1A+2] ecx +
shr ecx 18h +
add esi esi +
add cl 30h +
mov eax edi +
shr eax 1Fh +
or esi eax +
mov [ebx] cl +
inc ebx  +
dec [ebp+var_4C]  +
cmp [ebp+var_4C] 0 +
mov [ebp-1Ch] esi +
mov byte ptr [ebp+var_16+1] 0 +
jg loc_1031602  +
dec ebx  +
mov al [ebx] +
dec ebx  +
cmp al 35h +
jge loc_10316CD  +
mov ecx [ebp+var_40] +
jmp loc_1031708  +
cmp byte ptr [ebx] 39h +
jnz loc_10316D2  +
mov byte ptr [ebx] 30h +
dec ebx  +
cmp ebx [ebp+var_40] +
jnb loc_10316C4  +
mov eax [ebp+var_60] +
cmp ebx [ebp+var_40] +
jnb loc_10316DE  +
inc ebx  +
inc word ptr [eax]  +
inc byte ptr [ebx]  +
sub bl al +
sub bl 3 +
movsx ecx bl +
mov [eax+3] bl +
mov byte ptr [ecx+eax+4] 0 +
mov eax [ebp+var_74] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101F9B2  +
leave   +
retn   +
cmp byte ptr [ebx] 30h +
jnz loc_103170C  +
dec ebx  +
cmp ebx ecx +
jnb loc_1031702  +
mov eax [ebp+var_60] +
cmp ebx ecx +
jnb loc_10316E0  +
xor edx edx +
mov [eax] dx +
mov edx 8000h +
cmp word ptr [ebp+var_70] dx +
mov byte ptr [eax+3] 1 +
setnz dl  +
dec dl  +
and dl 0Dh +
add dl 20h +
mov [eax+2] dl +
mov byte ptr [ecx] 30h +
mov byte ptr [eax+5] 0 +
jmp loc_1030ECD  +
***
call sub_1024E74  +
xor eax eax +
cmp dword_103933C eax +
jz loc_10317B0  +
test byte ptr [ebp+8] 40h +
jz loc_10317A8  +
cmp dword_10373D4 eax +
jz loc_10317A8  +
mov [ebp-4] eax +
ldmxcsr dword ptr [ebp+8]  +
jmp loc_103179F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
cmp eax 0C0000005h +
jz loc_1031789  +
cmp eax 0C000001Dh +
jz loc_1031789  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword_10373D4 0 +
and dword ptr [ebp+8] 0FFFFFFBFh +
ldmxcsr dword ptr [ebp+8]  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10317B0  +
and dword ptr [ebp+8] 0FFFFFFBFh +
ldmxcsr dword ptr [ebp+8]  +
call sub_1024EB9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jbe loc_10317D8  +
mov ecx [ebp+arg_0] +
cmp word ptr [ecx] 0 +
jz loc_10317D8  +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax [ebp+arg_4] +
jb loc_10317CA  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_14] +
call sub_101FCB3  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
xor edi edi +
cmp eax edi +
jz loc_1031802  +
mov [eax] esi +
cmp esi edi +
jnz loc_1031832  +
call sub_10223A9  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
cmp [ebp+var_8] 0 +
jz loc_103182B  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
jmp loc_1031A16  +
cmp [ebp+arg_C] edi +
jz loc_1031843  +
cmp [ebp+arg_C] 2 +
jl loc_1031806  +
cmp [ebp+arg_C] 24h +
jg loc_1031806  +
mov ecx [ebp+var_14] +
push ebx  +
mov bl [esi] +
mov [ebp+var_4] edi +
lea edi [esi+1] +
cmp dword ptr [ecx+0ACh] 1 +
jle loc_103186F  +
lea eax [ebp+var_14] +
push eax  +
movzx eax bl +
push 8  +
push eax  +
call sub_102F0F3  +
mov ecx [ebp+var_14] +
add esp 0Ch +
jmp loc_103187F  +
mov edx [ecx+0C8h] +
movzx eax bl +
movzx eax word ptr [edx+eax*2] +
and eax 8 +
test eax eax +
jz loc_1031888  +
mov bl [edi] +
inc edi  +
jmp loc_103184F  +
cmp bl 2Dh +
jnz loc_1031893  +
or [ebp+arg_10] 2 +
jmp loc_1031898  +
cmp bl 2Bh +
jnz loc_103189B  +
mov bl [edi] +
inc edi  +
mov eax [ebp+arg_C] +
test eax eax +
jl loc_10319FD  +
cmp eax 1 +
jz loc_10319FD  +
cmp eax 24h +
jg loc_10319FD  +
test eax eax +
jnz loc_10318E6  +
cmp bl 30h +
jz loc_10318CA  +
mov [ebp+arg_C] 0Ah +
jmp loc_10318FE  +
mov al [edi] +
cmp al 78h +
jz loc_10318DD  +
cmp al 58h +
jz loc_10318DD  +
mov [ebp+arg_C] 8 +
jmp loc_10318FE  +
mov [ebp+arg_C] 10h +
jmp loc_10318F0  +
cmp eax 10h +
jnz loc_10318FE  +
cmp bl 30h +
jnz loc_10318FE  +
mov al [edi] +
cmp al 78h +
jz loc_10318FA  +
cmp al 58h +
jnz loc_10318FE  +
inc edi  +
mov bl [edi] +
inc edi  +
mov esi [ecx+0C8h] +
mov eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+arg_C] +
movzx ecx bl +
movzx ecx word ptr [esi+ecx*2] +
test cl 4 +
jz loc_1031922  +
movsx ecx bl +
sub ecx 30h +
jmp loc_103193D  +
test ecx 103h +
jz loc_1031961  +
mov cl bl +
sub cl 61h +
cmp cl 19h +
movsx ecx bl +
ja loc_103193A  +
sub ecx 20h +
add ecx 0FFFFFFC9h +
cmp ecx [ebp+arg_C] +
jnb loc_1031961  +
or [ebp+arg_10] 8 +
cmp [ebp+arg_14] 0 +
jnz loc_1031978  +
cmp [ebp+var_4] eax +
jb loc_1031978  +
jnz loc_1031957  +
cmp ecx edx +
jbe loc_1031978  +
or [ebp+arg_10] 4 +
cmp [ebp+arg_8] 0 +
jnz loc_1031984  +
mov eax [ebp+arg_10] +
dec edi  +
test al 8 +
jnz loc_1031989  +
cmp [ebp+arg_8] 0 +
jz loc_1031972  +
mov edi [ebp+arg_4] +
and [ebp+var_4] 0 +
jmp loc_10319D9  +
mov ebx [ebp+var_4] +
imul ebx [ebp+arg_C] +
add ebx ecx +
mov [ebp+var_4] ebx +
mov bl [edi] +
inc edi  +
jmp loc_103190E  +
mov esi 7FFFFFFFh +
test al 4 +
jnz loc_10319AD  +
test al 1 +
jnz loc_10319D9  +
and eax 2 +
jz loc_10319A4  +
cmp [ebp+var_4] 80000000h +
ja loc_10319AD  +
test eax eax +
jnz loc_10319D9  +
cmp [ebp+var_4] esi +
jbe loc_10319D9  +
cmp [ebp+arg_14] 0 +
jnz loc_10319D9  +
call sub_10223A9  +
test byte ptr [ebp+arg_10] 1 +
mov dword ptr [eax] 22h +
jz loc_10319CA  +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_10319D9  +
test byte ptr [ebp+arg_10] 2 +
push 0  +
pop eax  +
setnz al  +
add eax esi +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10319E2  +
mov [eax] edi +
test byte ptr [ebp+arg_10] 2 +
jz loc_10319EB  +
neg [ebp+var_4]  +
cmp [ebp+var_8] 0 +
jz loc_10319F8  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
mov eax [ebp+var_4] +
jmp loc_1031A15  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1031A06  +
mov [eax] esi +
cmp [ebp+var_8] 0 +
jz loc_1031A13  +
mov eax [ebp+var_C] +
and dword ptr [eax+70h] 0FFFFFFFDh +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
cmp dword_1038188 eax +
jnz loc_1031A42  +
push offset off_1036B68  +
jmp loc_1031A43  +
push eax  +
call sub_10317DF  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 1  +
push ebx  +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
call sub_102B774  +
mov [ebp+var_18] eax +
and eax edx +
add esp 10h +
mov [ebp+var_14] edx +
cmp eax 0FFFFFFFFh +
jz loc_1031ADA  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_0]  +
call sub_102B774  +
mov ecx eax +
and ecx edx +
add esp 10h +
cmp ecx 0FFFFFFFFh +
jz loc_1031ADA  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_8] +
sub esi eax +
sbb edi edx +
js loc_1031B6F  +
jg loc_1031AB3  +
cmp esi ebx +
jbe loc_1031B6F  +
mov ebx 1000h +
push ebx  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_1031AE6  +
call sub_10223A9  +
mov dword ptr [eax] 0Ch +
call sub_10223A9  +
mov eax [eax] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 8000h  +
push [ebp+arg_0]  +
call sub_1032316  +
pop ecx  +
pop ecx  +
mov [ebp+var_8] eax +
test edi edi +
jl loc_1031B06  +
jg loc_1031B02  +
cmp esi ebx +
jb loc_1031B06  +
mov eax ebx +
jmp loc_1031B08  +
mov eax esi +
push eax  +
push [ebp+lpMem]  +
push [ebp+arg_0]  +
call sub_102B91C  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1031B52  +
cdq   +
sub esi eax +
sbb edi edx +
js loc_1031B29  +
jg loc_1031AF8  +
test esi esi +
ja loc_1031AF8  +
mov esi [ebp+var_10] +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1032316  +
pop ecx  +
pop ecx  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor ebx ebx +
jmp loc_1031BD8  +
call sub_10223C1  +
cmp dword ptr [eax] 5 +
jnz loc_1031B67  +
call sub_10223A9  +
mov dword ptr [eax] 0Dh +
or esi 0FFFFFFFFh +
mov [ebp+var_C] esi +
jmp loc_1031B2C  +
cmp edi ebx +
jg loc_1031BE4  +
jl loc_1031B79  +
cmp esi ebx +
jnb loc_1031BE4  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102B774  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_1031ADA  +
push [ebp+arg_0]  +
call sub_102E41B  +
pop ecx  +
push eax  +
call ds:SetEndOfFile  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
cdq   +
mov [ebp+var_10] eax +
and eax edx +
mov [ebp+var_C] edx +
cmp eax 0FFFFFFFFh +
jnz loc_1031BE4  +
call sub_10223A9  +
mov dword ptr [eax] 0Dh +
call sub_10223C1  +
mov esi eax +
call ds:GetLastError  +
mov [esi] eax +
mov esi [ebp+var_10] +
and esi [ebp+var_C] +
cmp esi 0FFFFFFFFh +
jz loc_1031ADA  +
push ebx  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push [ebp+arg_0]  +
call sub_102B774  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_1031ADA  +
xor eax eax +
jmp loc_1031AE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov edx [ebp+nNumberOfBytesToRead] +
push esi  +
mov esi [ebp+arg_0] +
push 0FFFFFFFEh  +
pop eax  +
mov [ebp+var_14] eax +
mov [ebp+var_20] edx +
cmp esi eax +
jnz loc_1031C44  +
call sub_10223C1  +
and dword ptr [eax] 0 +
call sub_10223A9  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
jmp loc_10321B3  +
push edi  +
xor edi edi +
cmp esi edi +
jl loc_1031C53  +
cmp esi uNumber +
jb loc_1031C7A  +
call sub_10223C1  +
mov [eax] edi +
call sub_10223A9  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 9 +
call sub_1022352  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10321B2  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
push ebx  +
lea ebx dword_1039360[eax*4] +
mov eax [ebx] +
add eax esi +
mov cl [eax+4] +
test cl 1 +
jnz loc_1031CB0  +
call sub_10223C1  +
mov [eax] edi +
call sub_10223A9  +
mov dword ptr [eax] 9 +
jmp loc_1031DF3  +
mov [ebp+var_10] edi +
cmp edx edi +
jz loc_10321AF  +
test cl 2 +
jnz loc_10321AF  +
mov ecx [ebp+lpWideCharStr] +
cmp ecx edi +
jz loc_1031DE1  +
mov eax [eax+8] +
and eax 3 +
mov [ebp+var_1C] eax +
dec eax  +
jz loc_1031DD9  +
dec eax  +
jnz loc_1031CF4  +
mov eax edx +
not eax  +
test al 1 +
jz loc_1031DE1  +
and edx 0FFFFFFFEh +
mov [ebp+nNumberOfBytesToRead] edx +
mov [ebp+lpMultiByteStr] ecx +
mov ecx [ebx] +
mov eax [ebp+lpMultiByteStr] +
lea edi [esi+ecx] +
test byte ptr [edi+4] 48h +
jz loc_1031D7B  +
mov cl [edi+5] +
cmp cl 0Ah +
jz loc_1031D7B  +
cmp [ebp+nNumberOfBytesToRead] 0 +
jz loc_1031D7B  +
xor edx edx +
mov [eax] cl +
mov ecx [ebx] +
inc edx  +
inc eax  +
dec [ebp+nNumberOfBytesToRead]  +
cmp [ebp+var_1C] 0 +
mov [ebp+var_10] edx +
mov byte ptr [esi+ecx+5] 0Ah +
jz loc_1031D7B  +
mov ecx [ebx] +
mov cl [esi+ecx+6] +
cmp cl 0Ah +
jz loc_1031D7B  +
cmp [ebp+nNumberOfBytesToRead] 0 +
jz loc_1031D7B  +
mov [eax] cl +
mov ecx [ebx] +
inc eax  +
dec [ebp+nNumberOfBytesToRead]  +
mov [ebp+var_10] 2 +
mov byte ptr [esi+ecx+6] 0Ah +
cmp [ebp+var_1C] edx +
jnz loc_1031D7B  +
mov ecx [ebx] +
mov cl [esi+ecx+7] +
cmp cl 0Ah +
jz loc_1031D7B  +
cmp [ebp+nNumberOfBytesToRead] 0 +
jz loc_1031D7B  +
mov [eax] cl +
mov ecx [ebx] +
inc eax  +
dec [ebp+nNumberOfBytesToRead]  +
mov [ebp+var_10] 3 +
mov byte ptr [esi+ecx+7] 0Ah +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push [ebp+nNumberOfBytesToRead]  +
push eax  +
mov eax [ebx] +
push dword ptr [esi+eax]  +
call ds:ReadFile  +
test eax eax +
jz loc_1032179  +
mov ecx [ebp+NumberOfBytesRead] +
test ecx ecx +
jl loc_1032179  +
cmp ecx [ebp+nNumberOfBytesToRead] +
ja loc_1032179  +
mov eax [ebx] +
add [ebp+var_10] ecx +
lea eax [esi+eax+4] +
test byte ptr [eax] 80h +
jz loc_103201F  +
cmp [ebp+var_1C] 2 +
jz loc_1032042  +
test ecx ecx +
jz loc_1031E45  +
mov ecx [ebp+lpMultiByteStr] +
cmp byte ptr [ecx] 0Ah +
jnz loc_1031E45  +
or byte ptr [eax] 4 +
jmp loc_1031E48  +
mov eax edx +
not eax  +
test al 1 +
jnz loc_1031E02  +
call sub_10223C1  +
mov [eax] edi +
call sub_10223A9  +
mov dword ptr [eax] 16h +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1022352  +
add esp 14h +
jmp loc_1031E3D  +
mov eax edx +
push 4  +
pop ecx  +
shr eax 1 +
mov [ebp+nNumberOfBytesToRead] ecx +
cmp eax ecx +
jb loc_1031E13  +
mov [ebp+nNumberOfBytesToRead] eax +
push [ebp+nNumberOfBytesToRead]  +
call sub_1020842  +
pop ecx  +
mov [ebp+lpMultiByteStr] eax +
cmp eax edi +
jnz loc_1031CF7  +
call sub_10223A9  +
mov dword ptr [eax] 0Ch +
call sub_10223C1  +
mov dword ptr [eax] 8 +
or eax 0FFFFFFFFh +
jmp loc_10321B1  +
and byte ptr [eax] 0FBh +
mov edi [ebp+lpMultiByteStr] +
mov eax [ebp+var_10] +
add eax edi +
mov [ebp+nNumberOfBytesToRead] edi +
mov [ebp+var_10] eax +
cmp edi eax +
jnb loc_1031F2E  +
mov ecx [ebp+nNumberOfBytesToRead] +
mov al [ecx] +
cmp al 1Ah +
jz loc_1031F19  +
cmp al 0Dh +
jz loc_1031E7B  +
mov [edi] al +
inc edi  +
inc ecx  +
mov [ebp+nNumberOfBytesToRead] ecx +
jmp loc_1031F0B  +
mov eax [ebp+var_10] +
dec eax  +
cmp ecx eax +
jnb loc_1031E9A  +
lea eax [ecx+1] +
cmp byte ptr [eax] 0Ah +
jnz loc_1031E95  +
inc ecx  +
inc ecx  +
mov [ebp+nNumberOfBytesToRead] ecx +
mov byte ptr [edi] 0Ah +
jmp loc_1031F0A  +
mov [ebp+nNumberOfBytesToRead] eax +
jmp loc_1031F07  +
inc [ebp+nNumberOfBytesToRead]  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 1  +
lea eax [ebp-1] +
push eax  +
mov eax [ebx] +
push dword ptr [esi+eax]  +
call ds:ReadFile  +
test eax eax +
jnz loc_1031EC2  +
call ds:GetLastError  +
test eax eax +
jnz loc_1031F07  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_1031F07  +
mov eax [ebx] +
test byte ptr [esi+eax+4] 48h +
jz loc_1031EE5  +
cmp [ebp+var_1] 0Ah +
jz loc_1031E90  +
mov byte ptr [edi] 0Dh +
mov eax [ebx] +
mov cl [ebp+var_1] +
mov [esi+eax+5] cl +
jmp loc_1031F0A  +
cmp edi [ebp+lpMultiByteStr] +
jnz loc_1031EF0  +
cmp [ebp+var_1] 0Ah +
jz loc_1031E90  +
push 1  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
call sub_102B774  +
add esp 10h +
cmp [ebp+var_1] 0Ah +
jz loc_1031F0B  +
mov byte ptr [edi] 0Dh +
inc edi  +
mov eax [ebp+var_10] +
cmp [ebp+nNumberOfBytesToRead] eax +
jb loc_1031E5E  +
jmp loc_1031F2E  +
mov eax [ebx] +
lea eax [esi+eax+4] +
test byte ptr [eax] 40h +
jnz loc_1031F29  +
or byte ptr [eax] 2 +
jmp loc_1031F2E  +
mov al [ecx] +
mov [edi] al +
inc edi  +
mov eax edi +
sub eax [ebp+lpMultiByteStr] +
cmp [ebp+var_1C] 1 +
mov [ebp+var_10] eax +
jnz loc_103201F  +
test eax eax +
jz loc_103201F  +
dec edi  +
mov cl [edi] +
test cl cl +
js loc_1031F55  +
inc edi  +
jmp loc_1031FDE  +
xor eax eax +
inc eax  +
movzx ecx cl +
jmp loc_1031F6C  +
cmp eax 4 +
jg loc_1031F75  +
cmp edi [ebp+lpMultiByteStr] +
jb loc_1031F75  +
dec edi  +
movzx ecx byte ptr [edi] +
inc eax  +
cmp byte_10373D8[ecx] 0 +
jz loc_1031F5D  +
mov dl [edi] +
movzx ecx dl +
movsx ecx byte_10373D8[ecx] +
test ecx ecx +
jnz loc_1031F95  +
call sub_10223A9  +
mov dword ptr [eax] 2Ah +
jmp loc_103201B  +
inc ecx  +
cmp ecx eax +
jnz loc_1031F9E  +
add edi eax +
jmp loc_1031FDE  +
mov ecx [ebx] +
add ecx esi +
test byte ptr [ecx+4] 48h +
jz loc_1031FCC  +
inc edi  +
cmp eax 2 +
mov [ecx+5] dl +
jl loc_1031FBA  +
mov dl [edi] +
mov ecx [ebx] +
mov [esi+ecx+6] dl +
inc edi  +
cmp eax 3 +
jnz loc_1031FC8  +
mov dl [edi] +
mov ecx [ebx] +
mov [esi+ecx+7] dl +
inc edi  +
sub edi eax +
jmp loc_1031FDE  +
neg eax  +
cdq   +
push 1  +
push edx  +
push eax  +
push [ebp+arg_0]  +
call sub_102B774  +
add esp 10h +
mov eax [ebp+var_20] +
sub edi [ebp+lpMultiByteStr] +
shr eax 1 +
push eax  +
push [ebp+lpWideCharStr]  +
mov [ebp+var_10] edi +
push edi  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 0FDE9h  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_103200E  +
add eax eax +
cmp eax [ebp+var_20] +
ja loc_103200E  +
mov [ebp+var_10] eax +
jmp loc_103201F  +
call ds:GetLastError  +
push eax  +
call sub_10223D9  +
pop ecx  +
or [ebp+var_14] 0FFFFFFFFh +
mov eax [ebp+lpMultiByteStr] +
cmp eax [ebp+lpWideCharStr] +
jz loc_103202E  +
push eax  +
call sub_101F40A  +
pop ecx  +
mov eax [ebp+var_14] +
cmp eax 0FFFFFFFEh +
jnz loc_10321B1  +
mov eax [ebp+var_10] +
jmp loc_10321B1  +
test ecx ecx +
jz loc_1032054  +
mov ecx [ebp+lpMultiByteStr] +
cmp word ptr [ecx] 0Ah +
jnz loc_1032054  +
or byte ptr [eax] 4 +
jmp loc_1032057  +
and byte ptr [eax] 0FBh +
mov edi [ebp+lpMultiByteStr] +
mov eax [ebp+var_10] +
add eax edi +
mov [ebp+var_10] eax +
dec eax  +
mov [ebp+nNumberOfBytesToRead] edi +
cmp edi eax +
jnb loc_103216E  +
mov eax [ebp+nNumberOfBytesToRead] +
movzx ecx word ptr [eax] +
cmp cx 1Ah +
jz loc_1032156  +
cmp cx 0Dh +
jz loc_1032093  +
mov [edi] cx +
inc edi  +
inc edi  +
inc eax  +
inc eax  +
mov [ebp+nNumberOfBytesToRead] eax +
jmp loc_1032147  +
mov ecx [ebp+var_10] +
add ecx 0FFFFFFFEh +
cmp eax ecx +
jnb loc_10320BB  +
lea ecx [eax+2] +
cmp word ptr [ecx] 0Ah +
jnz loc_10320B3  +
add eax 4 +
mov [ebp+nNumberOfBytesToRead] eax +
push 0Ah  +
jmp loc_1032141  +
mov [ebp+nNumberOfBytesToRead] ecx +
jmp loc_103213F  +
add [ebp+nNumberOfBytesToRead] 2 +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebx] +
push dword ptr [esi+eax]  +
call ds:ReadFile  +
test eax eax +
jnz loc_10320E4  +
call ds:GetLastError  +
test eax eax +
jnz loc_103213F  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_103213F  +
mov eax [ebx] +
test byte ptr [esi+eax+4] 48h +
jz loc_103211B  +
cmp word ptr [ebp+Buffer] 0Ah +
jz loc_10320AC  +
push 0Dh  +
pop eax  +
mov [edi] ax +
mov eax [ebx] +
mov cl byte ptr [ebp+Buffer] +
mov [esi+eax+5] cl +
mov eax [ebx] +
mov cl byte ptr [ebp+Buffer+1] +
mov [esi+eax+6] cl +
mov eax [ebx] +
mov byte ptr [esi+eax+7] 0Ah +
jmp loc_1032145  +
cmp edi [ebp+lpMultiByteStr] +
jnz loc_1032127  +
cmp word ptr [ebp+Buffer] 0Ah +
jz loc_10320AC  +
push 1  +
push 0FFFFFFFFh  +
push 0FFFFFFFEh  +
push [ebp+arg_0]  +
call sub_102B774  +
add esp 10h +
cmp word ptr [ebp+Buffer] 0Ah +
jz loc_1032147  +
push 0Dh  +
pop eax  +
mov [edi] ax +
inc edi  +
inc edi  +
mov eax [ebp+var_10] +
dec eax  +
cmp [ebp+nNumberOfBytesToRead] eax +
jb loc_103206E  +
jmp loc_103216E  +
mov ecx [ebx] +
lea esi [esi+ecx+4] +
test byte ptr [esi] 40h +
jnz loc_1032166  +
or byte ptr [esi] 2 +
jmp loc_103216E  +
mov ax [eax] +
mov [edi] ax +
inc edi  +
inc edi  +
sub edi [ebp+lpMultiByteStr] +
mov [ebp+var_10] edi +
jmp loc_103201F  +
call ds:GetLastError  +
push 5  +
pop esi  +
cmp eax esi +
jnz loc_103219D  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
call sub_10223C1  +
mov [eax] esi +
jmp loc_103201B  +
cmp eax 6Dh +
jnz loc_1032014  +
and [ebp+var_14] 0 +
jmp loc_103201F  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1024E74  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_102E41B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10322C1  +
call sub_10223A9  +
mov dword ptr [eax] 9 +
or eax 0FFFFFFFFh +
jmp loc_103230E  +
push edi  +
push [ebp+dwMoveMethod]  +
push 0  +
push [ebp+lDistanceToMove]  +
push eax  +
call ds:SetFilePointer  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_10322E0  +
call ds:GetLastError  +
jmp loc_10322E2  +
xor eax eax +
test eax eax +
jz loc_10322F2  +
push eax  +
call sub_10223D9  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_103230D  +
mov eax esi +
and esi 1Fh +
imul esi esi +
sar eax 5 +
mov eax dword_1039360[eax*4] +
lea eax [eax+esi+4] +
and byte ptr [eax] 0FDh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax edx +
and edx 1Fh +
imul edx edx +
sar eax 5 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
lea esi dword_1039360[eax*4] +
mov eax [esi] +
lea ecx [eax+edx] +
mov eax [ecx+8] +
push edi  +
movzx edi byte ptr [ecx+4] +
and edi 80h +
and eax 3 +
cmp ebx 4000h +
jz loc_10323A3  +
cmp ebx 8000h +
jz loc_103239D  +
cmp ebx 10000h +
jz loc_1032389  +
cmp ebx 20000h +
jz loc_1032389  +
cmp ebx 40000h +
jnz loc_10323B0  +
or byte ptr [ecx+4] 80h +
mov ecx [esi] +
lea ecx [ecx+edx+8] +
mov edx [ecx] +
and edx 0FFFFFFFDh +
or edx 1 +
mov [ecx] edx +
jmp loc_10323B0  +
or byte ptr [ecx+4] 80h +
mov ecx [esi] +
lea ecx [ecx+edx+8] +
mov edx [ecx] +
and edx 0FFFFFFFEh +
or edx 2 +
jmp loc_1032385  +
and byte ptr [ecx+4] 7Fh +
jmp loc_10323B0  +
or byte ptr [ecx+4] 80h +
mov ecx [esi] +
lea ecx [ecx+edx+8] +
and dword ptr [ecx] 0FFFFFFFCh +
test edi edi +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_10323BE  +
mov eax 8000h +
pop ebp  +
retn   +
neg eax  +
sbb eax eax +
and eax 0C000h +
add eax 4000h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_10323FF  +
call sub_10223A9  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_1022352  +
add esp 14h +
push 16h  +
pop eax  +
jmp loc_1032409  +
mov ecx dword_1038308 +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
xor eax eax +
push eax  +
push eax  +
push 3  +
push eax  +
push 3  +
push 40000000h  +
push offset FileName  +
call ds:CreateFileA  +
mov hConsoleOutput eax +
retn   +
***
mov eax hConsoleOutput +
push esi  +
mov esi ds:CloseHandle +
cmp eax 0FFFFFFFFh +
jz loc_103244E  +
cmp eax 0FFFFFFFEh +
jz loc_103244E  +
push eax  +
call esi  +
mov eax dword_10374D8 +
cmp eax 0FFFFFFFFh +
jz loc_1032460  +
cmp eax 0FFFFFFFEh +
jz loc_1032460  +
push eax  +
call esi  +
pop esi  +
retn   +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_1032492  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_1032484  +
***
push ebp  +
mov ebp esp +
push edi  +
push esi  +
push ebx  +
mov ecx [ebp+10h] +
or ecx ecx +
jz loc_10324FA  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov bh 41h +
mov bl 5Ah +
mov dh 20h +
lea ecx [ecx+0] +
mov ah [esi] +
or ah ah +
mov al [edi] +
jz loc_10324EB  +
or al al +
jz loc_10324EB  +
add esi 1 +
add edi 1 +
cmp ah bh +
jb loc_10324D8  +
cmp ah bl +
ja loc_10324D8  +
add ah dh +
cmp al bh +
jb loc_10324E2  +
cmp al bl +
ja loc_10324E2  +
add al dh +
cmp ah al +
jnz loc_10324F1  +
sub ecx 1 +
jnz loc_10324BC  +
xor ecx ecx +
cmp ah al +
jz loc_10324FA  +
mov ecx 0FFFFFFFFh +
jb loc_10324FA  +
neg ecx  +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
lea eax [edx-1] +
pop ebx  +
retn   +
***
xor eax eax +
mov al [esp+8] +
push ebx  +
mov ebx eax +
shl eax 8 +
mov edx [esp+8] +
test edx 3 +
jz loc_103254D  +
mov cl [edx] +
add edx 1 +
cmp cl bl +
jz loc_1032510  +
test cl cl +
jz loc_1032596  +
test edx 3 +
jnz loc_1032538  +
or ebx eax +
push edi  +
mov eax ebx +
shl ebx 10h +
push esi  +
or ebx eax +
mov ecx [edx] +
mov edi 7EFEFEFFh +
mov eax ecx +
mov esi edi +
xor ecx ebx +
add esi eax +
add edi ecx +
xor ecx 0FFFFFFFFh +
xor eax 0FFFFFFFFh +
xor ecx edi +
xor eax esi +
add edx 4 +
and ecx 81010100h +
jnz loc_103259A  +
and eax 81010100h +
jz loc_1032558  +
and eax 1010100h +
jnz loc_1032594  +
and esi 80000000h +
jnz loc_1032558  +
pop esi  +
pop edi  +
pop ebx  +
xor eax eax +
retn   +
***
mov eax [edx-4] +
cmp al bl +
jz loc_10325D7  +
test al al +
jz loc_1032594  +
cmp ah bl +
jz loc_10325D0  +
test ah ah +
jz loc_1032594  +
shr eax 10h +
cmp al bl +
jz loc_10325C9  +
test al al +
jz loc_1032594  +
cmp ah bl +
jz loc_10325C2  +
test ah ah +
jz loc_1032594  +
jmp loc_1032558  +
***
pop esi  +
pop edi  +
lea eax [edx-1] +
pop ebx  +
retn   +
***
lea eax [edx-2] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
lea eax [edx-3] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
lea eax [edx-4] +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-84h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_103378C +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033828 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_103387C +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10338A8 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10338DC +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C8h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033910 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C8h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033944 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033970 +
jmp loc_101F62E  +
***
cmp ebp 0FFFFFFFFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_103399C +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10339C8 +
jmp loc_101F62E  +
***
cmp ebp 0FFFFFFFFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10339F4 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033A20 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C8h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033A54 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033A80 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033AAC +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033B4C +
jmp loc_101F62E  +
***
std   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033B78 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033BA4 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033BD8 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033BFC +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033C50 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033CA4 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033D28 +
jmp loc_101F62E  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033D64 +
jmp loc_101F62E  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0CCh] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033DA0 +
jmp loc_101F62E  +
***
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C0h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033DD4 +
jmp loc_101F62E  +
***
cmp ch 0FFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033E00 +
jmp loc_101F62E  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033E24 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033E80 +
jmp loc_101F62E  +
***
cmp ch 0FFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-150h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033EBC +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3A4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033EE0 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-188h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033F54 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-448h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033F78 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-280h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1033FDC +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-124h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034038 +
jmp loc_101F62E  +
***
std   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov ah [esi+edi*8-37CC0001h] +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_103406C +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10340A0 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-290h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10340E4 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1E8h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034120 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0BCh] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034154 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-804h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034178 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3C4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10341F4 +
jmp loc_101F62E  +
***
lea ecx [ebp-44h] +
jmp sub_100AB4C  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034298 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0ACh] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10342C4 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3A8h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10342E8 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034354 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034380 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C4h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10343AC +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3B8h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10343D0 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-150h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034434 +
jmp loc_101F62E  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov dh [esi+edi*8-37CC0001h] +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034468 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-150h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_103449C +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28Ch] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10344C0 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C0h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034524 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-148h] +
xor ecx eax +
call sub_101F9B2  +
mov ecx [edx-4] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_1034548 +
jmp loc_101F62E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_101F9B2  +
mov eax offset dword_10348A0 +
jmp loc_101F62E  +
***
push offset loc_10336C3  +
call sub_102045F  +
pop ecx  +
retn   +
***
mov ecx offset dword_1037730 +
call sub_100C141  +
push offset loc_10336D2  +
call sub_102045F  +
pop ecx  +
retn   +
***
call sub_102045F  +
pop ecx  +
retn   +
***
mov ecx offset unk_10375F8 +
jmp loc_1010A08  +
***
mov dword_1037730 offset off_1004B94 +
mov ecx offset dword_1037730 +
jmp sub_101889F  +
***
mov dword_10377C8 offset off_1004B94 +
mov ecx offset dword_10377C8 +
jmp sub_101889F  +
***
mov dword_103783C offset off_100133C +
mov ecx offset dword_103783C +
jmp sub_101EC4D  +
***
mov dword_103784C offset off_100133C +
mov ecx offset dword_103784C +
jmp sub_101EC4D  +
***
setalc   +
push ebp  +
add eax [eax] +
call loc_1035316  +
push esi  +
add eax [eax] +
retn 355h  +
***
popa   +
add gs:[bx+si] al +
add edx [ebp+6Eh] +
push 576B6F6Fh  +
imul ebp [esi+64h] +
outs   +
outs   +
imul eax [ebp+78h] +
iret   +
***
inc ecx  +
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
retf   +
***
