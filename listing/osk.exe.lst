retf 0  +
***
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 1  +
push offset __ImageBase  +
push [ebp+arg_0]  +
call InitProcessPriv  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1004413  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1004401  +
dec edx  +
jnz loc_1004413  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1004410  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_100442F  +
xor eax eax +
jmp loc_100443F  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_1004460  +
xor eax eax +
jmp loc_100446F  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_10044F1  +
dec eax  +
jz loc_10044E8  +
push 57h  +
pop eax  +
jmp loc_100455F  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1004517  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1004540  +
cmp dword ptr [esi+10h] 0 +
jz loc_1004540  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_100455D  +
test cl 2 +
jz loc_100454E  +
mov esi [esi+10h] +
test esi esi +
jz loc_100454E  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1026000 +
push edi  +
mov edi offset dword_1026A54 +
jmp loc_10045AA  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_10044C2  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1004581  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1026000 +
push edi  +
mov edi offset off_1026000 +
cmp esi edi +
jz loc_10045F6  +
jmp loc_10045EC  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_10045EA  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_10045CE  +
mov off_1026000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 270h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_218] eax +
mov esi offset unk_1026A58 +
push esi  +
call sub_100449A  +
push offset aMicrosoftOnscr  +
mov dword_1026A54 offset dword_1001698 +
mov off_1026000 esi +
call sub_100456B  +
push offset dword_1026AB0  +
push offset unk_1026AB8  +
push offset loc_10043C5  +
push offset dword_1001614  +
call sub_100441C  +
xor ebx ebx +
mov edi 80000000h +
cmp dword_1026ADC ebx +
jz loc_10046C2  +
mov al byte_1026AE0 +
cmp al 4 +
jnb loc_1004679  +
cmp al bl +
jnz loc_10046C2  +
mov eax dword_1026AC8 +
mov ecx dword_1026ACC +
mov edx 10000h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_10046C2  +
mov eax dword_1026AD0 +
mov esi dword_1026AD4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_10046C2  +
cmp edx esi +
jnz loc_10046C2  +
push offset dword_1001628  +
push dword_1026AB4  +
push dword_1026AB0  +
call sub_1004479  +
mov eax [ebp+var_218] +
push offset Name  +
xor esi esi +
inc esi  +
push esi  +
push ebx  +
mov [ebp+var_210] ebx +
mov [ebp+var_220] ebx +
mov hInstance eax +
call ds:CreateMutexW  +
mov hObject eax +
cmp eax ebx +
jz loc_1004AD1  +
call ds:__imp_GetLastError  +
cmp eax 0B7h +
jnz loc_100475C  +
push 104h  +
lea eax [ebp+WindowName] +
push eax  +
push 3E8h  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+WindowName] +
push eax  +
push offset ClassName  +
call ds:FindWindowW  +
mov esi eax +
cmp esi ebx +
jz loc_1004ABD  +
push esi  +
call ds:IsIconic  +
test eax eax +
jz loc_1004750  +
push 9  +
push esi  +
call ds:ShowWindow  +
push esi  +
call ds:SetForegroundWindow  +
jmp loc_1004ABD  +
call sub_100C2D8  +
test al al +
jnz loc_1004ABD  +
push ebx  +
push ebx  +
push esi  +
push ebx  +
call ds:HeapSetInformation  +
push esi  +
push 64h  +
call ds:SetProcessShutdownParameters  +
push ebx  +
push ebx  +
call ds:RegisterApplicationRestart  +
call ds:GetTickCount64  +
push esi  +
push 1AB2h  +
push ebx  +
mov [ebp+var_234] eax +
mov [ebp+var_230] edx +
call WinSqmIncrementDWORD  +
push ebx  +
call ds:CoInitialize  +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_1004A84  +
push ebx  +
lea eax [ebp+var_254] +
push eax  +
lea eax [ebp+var_21C] +
push eax  +
mov [ebp+var_21C] ebx +
mov [ebp+var_254] esi +
mov [ebp+var_250] ebx +
mov [ebp+var_24C] ebx +
mov [ebp+var_248] esi +
call GdiplusStartup  +
test eax eax +
jnz loc_1004A7E  +
push esi  +
push 8  +
call sub_10043A5  +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_1004A6D  +
push 2  +
call InitThread  +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_1004A63  +
lea eax [ebp+var_214] +
push eax  +
mov [ebp+var_214] ebx +
call sub_1008B06  +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_1004A5E  +
lea eax [ebp+var_224] +
push eax  +
push ebx  +
push ebx  +
push [ebp+var_218]  +
lea eax [ebp+var_228] +
push eax  +
push [ebp+var_214]  +
mov [ebp+var_224] ebx +
call sub_100534E  +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_1004A36  +
push [ebp+var_224]  +
mov ecx [ebp+var_228] +
call ?EndDefer@Element@DirectUI@@QAEXK@Z  +
call sub_100755F  +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_1004A5E  +
lea eax [ebp+var_218] +
push eax  +
mov [ebp+var_218] ebx +
call sub_100950D  +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_1004A5E  +
mov ecx [ebp+var_218] +
push offset loc_1007A61  +
call sub_10094A4  +
mov ecx [ebp+var_218] +
push offset loc_10081E6  +
call sub_10094A4  +
mov ecx [ebp+var_218] +
push offset loc_100BADD  +
call sub_10094A4  +
or eax 0FFFFFFFFh +
mov [ebp+var_244] eax +
mov [ebp+var_240] eax +
mov [ebp+var_23C] eax +
mov [ebp+var_238] eax +
lea eax [ebp+var_244] +
push eax  +
mov eax [ebp+var_214] +
push dword ptr [eax+4]  +
call ds:DwmExtendFrameIntoClientArea  +
push 4  +
lea eax [ebp+var_22C] +
push eax  +
mov eax [ebp+var_214] +
push 0Ch  +
mov [ebp+var_22C] esi +
push dword ptr [eax+4]  +
call ds:DwmSetWindowAttribute  +
mov eax [ebp+var_214] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_100494C  +
push esi  +
push eax  +
call ds:ShowWindow  +
cmp dword_1026ADC ebx +
jz loc_10049AC  +
mov al byte_1026AE0 +
cmp al 4 +
jnb loc_1004961  +
cmp al bl +
jnz loc_10049AC  +
mov eax dword_1026AC8 +
mov ecx dword_1026ACC +
mov edx 10000h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_10049AC  +
mov eax dword_1026AD0 +
mov ecx eax +
and ecx edx +
mov edx dword_1026AD4 +
and edx edi +
cmp ecx eax +
jnz loc_10049AC  +
cmp edx dword_1026AD4 +
jnz loc_10049AC  +
push offset dword_1001638  +
push dword_1026AB4  +
push dword_1026AB0  +
call sub_1004479  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
mov [ebp+var_220] esi +
mov esi ds:GetMessageW +
push eax  +
call esi  +
test eax eax +
jz loc_1004A5E  +
mov edi ds:IsDialogMessageW +
call sub_10098C9  +
test eax eax +
jz loc_10049EE  +
lea eax [ebp+Msg] +
push eax  +
call sub_10098C9  +
push eax  +
call edi  +
test eax eax +
jnz loc_1004A24  +
call sub_100BE72  +
test eax eax +
jz loc_1004A0A  +
lea eax [ebp+Msg] +
push eax  +
call sub_100BE72  +
push eax  +
call edi  +
test eax eax +
jnz loc_1004A24  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_10049D2  +
jmp loc_1004A5E  +
mov eax [ebp+var_214] +
push dword ptr [eax+4]  +
call ds:DestroyWindow  +
push esi  +
push 12h  +
push 12h  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
mov [ebp+var_214] ebx +
call ds:PeekMessageW  +
call UnInitThread  +
push offset __ImageBase  +
call UnInitProcessPriv  +
push [ebp+var_21C]  +
call GdiplusShutdown  +
mov [ebp+var_21C] ebx +
call ds:CoUninitialize  +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_1004AB8  +
call ds:GetTickCount64  +
sub eax [ebp+var_234] +
push ebx  +
sbb edx [ebp+var_230] +
push 3E8h  +
push edx  +
push eax  +
call __aulldiv  +
push eax  +
push 0EB1h  +
push ebx  +
call WinSqmIncrementDWORD  +
call sub_100C310  +
push hObject  +
call ds:CloseHandle  +
cmp [ebp+var_210] ebx +
jge loc_1004ADC  +
push ebx  +
push 3ECh  +
call sub_100C31D  +
call sub_10045B9  +
push offset dword_1026AB0  +
call sub_1004448  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_220] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
call dword ptr [eax]  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
sub eax [ecx] +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [esi+4] +
and dword ptr [eax] 0 +
push eax  +
mov [esi] ecx +
call ?StartDefer@Element@DirectUI@@QAEXPAK@Z  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1004B89  +
mov ecx [esi] +
push eax  +
call ?EndDefer@Element@DirectUI@@QAEXK@Z  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:SystemParametersInfoW +
push edi  +
push 3  +
pop edi  +
push 1Fh  +
pop ebx  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 16h  +
mov [ebp+var_C] ecx +
mov [ebp+pvParam] edi +
mov [ebp+var_4] ebx +
call esi  +
test eax eax +
jnz loc_1004BC3  +
mov [ebp+pvParam] edi +
xor edi edi +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push 0Ah  +
call esi  +
test eax eax +
jnz loc_1004BD6  +
mov [ebp+var_4] ebx +
mov eax [ebp+pvParam] +
mov esi [ebp+var_C] +
inc eax  +
imul eax eax +
mov [esi+0A4h] eax +
cmp [ebp+var_4] edi +
jnz loc_1004BF6  +
fld  ds:dbl_1001748 +
jmp loc_1004C06  +
mov eax [ebp+var_4] +
fild  [ebp+var_4] +
test eax eax +
jge loc_1004C06  +
fadd  ds:dbl_1001740 +
fdivr  ds:dbl_1001738 +
call _ftol2  +
pop edi  +
mov [esi+0A8h] eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ds:KillTimer +
push edi  +
mov edi ecx +
mov eax [edi+94h] +
mov ebx [eax+4] +
push 7D5h  +
push ebx  +
call esi  +
push 7D6h  +
push ebx  +
call esi  +
lea esi [edi+0B4h] +
mov ecx [esi] +
test ecx ecx +
jz loc_1004C5D  +
push 0  +
call sub_100DBD3  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push 0  +
push 0  +
push 0  +
push 0  +
lea eax [ebp-4] +
push eax  +
mov edi ecx +
call ?Create@DUIXmlParser@DirectUI@@SGJPAPAV12@P6GPAVValue@2@PBGPAX@Z2P6GX11H2@Z2@Z  +
mov esi eax +
test esi esi +
jl loc_1004CB7  +
mov ecx [ebp-4] +
push offset __ImageBase  +
push dword ptr [edi+98h]  +
push 0C8h  +
call ?SetXMLFromResource@DUIXmlParser@DirectUI@@QAEJIPAUHINSTANCE__@@0@Z  +
mov ecx [ebp-4] +
mov esi eax +
test esi esi +
jl loc_1004CB1  +
mov eax [ebp+8] +
mov [eax] ecx +
jmp loc_1004CB7  +
call ?Destroy@DUIXmlParser@DirectUI@@QAEXXZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+9Ch] +
cmp dword ptr [esi] 0 +
jz loc_1004CDD  +
call sub_1007437  +
and dword ptr [esi] 0 +
mov ecx edi +
pop edi  +
pop esi  +
jmp ?OnDestroy@HWNDElement@DirectUI@@UAEXXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
mov esi ecx +
cmp dword ptr [esi+9Ch] 0 +
jz loc_1004D2E  +
mov eax ?ThemeChange@HWNDElement@DirectUI@@SG?AVUID@@XZ +
mov [ebp+8] eax +
lea eax [ebx+4] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1004B27  +
test al al +
jz loc_1004D2E  +
mov ecx [esi+9Ch] +
push 0  +
push 0  +
push 31Ah  +
call sub_10056E6  +
push ebx  +
mov ecx esi +
call ?OnEvent@HWNDElement@DirectUI@@UAEXPAUEvent@2@@Z  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
test byte ptr [edi+60h] 20h +
push 8  +
pop eax  +
jz loc_1004D58  +
mov eax 400008h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push 80000003h  +
push esi  +
push offset aTooltips_class  +
push eax  +
call ds:CreateWindowExW  +
mov [edi+7Ch] eax +
cmp eax esi +
jz loc_1004D9B  +
push 13h  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push eax  +
call ds:SetWindowPos  +
push esi  +
push 3  +
push 403h  +
push dword ptr [edi+7Ch]  +
call ds:SendMessageW  +
jmp loc_1004DB1  +
call ds:__imp_GetLastError  +
cmp eax esi +
jle loc_1004DAF  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi ecx +
cmp esi 311h +
jz loc_1004DEE  +
cmp esi 30Fh +
jz loc_1004DEE  +
cmp esi 7Eh +
jz loc_1004DEE  +
cmp esi 1Ah +
jz loc_1004DEE  +
cmp esi 15h +
jz loc_1004DEE  +
cmp esi 31Ah +
jnz loc_1004DF3  +
call sub_10077EC  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+8]  +
call ?WndProc@HWNDElement@DirectUI@@UAEJPAUHWND__@@IIJ@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+9Ch] +
push edi  +
mov edi [ebp+8] +
test ecx ecx +
jz loc_1004EDA  +
cmp dword ptr [edi+0Ch] 0 +
jnz loc_1004EDA  +
cmp byte ptr [edi+20h] 1 +
jnz loc_1004EDA  +
call sub_1005D7C  +
test al al +
jz loc_1004E52  +
mov byte ptr [edi+4] 1 +
jmp loc_1004EDA  +
mov eax [edi+10h] +
cmp eax 1 +
jnz loc_1004EC7  +
mov ecx esi +
call sub_1004C21  +
lea eax [ebp-8] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp-8] +
push eax  +
mov eax [esi+94h] +
push dword ptr [eax+4]  +
call ds:ScreenToClient  +
lea eax [ebp-8] +
push eax  +
mov ecx esi +
call ?ElementFromPoint@HWNDElement@DirectUI@@QAEPAVElement@2@PAUtagPOINT@@@Z  +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
call sub_1014BD0  +
mov [esi+0ACh] al +
test al al +
jz loc_1004EDA  +
mov eax [ebp+8] +
push 0  +
push dword ptr [esi+0A4h]  +
mov [esi+0B0h] eax +
mov eax [esi+94h] +
push 7D5h  +
push dword ptr [eax+4]  +
call ds:SetTimer  +
jmp loc_1004EDA  +
cmp eax 2 +
jnz loc_1004EDA  +
mov ecx esi +
call sub_1004C21  +
mov byte ptr [esi+0ACh] 0 +
cmp byte ptr [edi+4] 0 +
jnz loc_1004EE9  +
push edi  +
mov ecx esi +
call ?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
mov ebx ecx +
mov eax [ebx+0B0h] +
test eax eax +
jz loc_1004F85  +
push esi  +
mov esi [eax+28h] +
test esi esi +
jz loc_1004F84  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
cmp dword_10270EC eax +
jz loc_1004F2A  +
mov esi [esi+28h] +
test esi esi +
jnz loc_1004F11  +
test esi esi +
jz loc_1004F84  +
lea eax [ebp+Point] +
push eax  +
call ds:GetCursorPos  +
mov eax [ebx+0B0h] +
and [ebp+var_20] 0 +
and [ebp+var_18] 0 +
lea ecx [ebp+var_2C] +
xor ebx ebx +
inc ebx  +
mov [ebp+var_2C] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
mov [ebp+var_28] 0 +
mov [ebp+var_24] ebx +
mov [ebp+var_C] bl +
mov [ebp+var_8] 8 +
mov [ebp+var_1C] 2 +
mov [ebp+var_4] ebx +
call dword ptr [eax+24h]  +
mov eax [esi] +
and [ebp+var_4] 0 +
lea ecx [ebp+var_2C] +
push ecx  +
mov ecx esi +
mov [ebp+var_1C] ebx +
call dword ptr [eax+24h]  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push edi  +
mov edi ecx +
cmp byte ptr [edi+0ACh] 0 +
jz loc_100503F  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
lea esi [edi+0B0h] +
mov ebx [esi] +
call ?ElementFromPoint@HWNDElement@DirectUI@@QAEPAVElement@2@PAUtagPOINT@@@Z  +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
call sub_1014BD0  +
mov eax [ebp+arg_0] +
mov [esi] eax +
cmp ebx eax +
jz loc_100503D  +
mov ecx edi +
mov byte ptr [edi+0ACh] 0 +
call sub_1004C21  +
xor edi edi +
cmp ebx edi +
jz loc_100503D  +
mov esi [ebx+28h] +
cmp esi edi +
jz loc_100503D  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
cmp dword_10270EC eax +
jz loc_1005001  +
mov esi [esi+28h] +
cmp esi edi +
jnz loc_1004FE8  +
cmp esi edi +
jz loc_100503D  +
xor eax eax +
inc eax  +
mov [ebp+var_24] eax +
mov [ebp+var_C] al +
mov [ebp+var_4] eax +
lea eax [ebp+Point] +
push eax  +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] 0 +
mov [ebp+var_20] edi +
mov [ebp+var_1C] 2 +
mov [ebp+var_18] edi +
mov [ebp+var_8] edi +
call ds:GetCursorPos  +
mov eax [esi] +
lea ecx [ebp+var_2C] +
push ecx  +
mov ecx esi +
call dword ptr [eax+24h]  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0HWNDElement@DirectUI@@QAE@XZ  +
xor eax eax +
mov ecx esi +
mov dword ptr [esi] offset off_1001778 +
mov [esi+94h] eax +
mov [esi+98h] eax +
mov [esi+9Ch] eax +
mov [esi+0A0h] eax +
mov [esi+0ACh] al +
mov [esi+0B0h] eax +
mov [esi+0B4h] eax +
call sub_1004B90  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001778 +
call sub_1004C21  +
mov ecx [esi+0A0h] +
test ecx ecx +
jz loc_10050C0  +
call ?Destroy@DUIXmlParser@DirectUI@@QAEXXZ  +
mov ecx esi +
pop esi  +
jmp ??1HWNDElement@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
mov [esi+94h] eax +
mov eax [ebp+arg_4] +
push edi  +
mov [esi+98h] eax +
call ?Register@HWNDElement@DirectUI@@SGJXZ  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_1005116  +
push [ebp+arg_10]  +
mov eax [esi+94h] +
push [ebp+arg_C]  +
mov eax [eax+4] +
push ebx  +
push ebx  +
push eax  +
mov ecx esi +
call ?Initialize@HWNDElement@DirectUI@@QAEJPAUHWND__@@_NIPAVElement@2@PAK@Z  +
mov edi eax +
push esi  +
lea ecx [ebp+var_8] +
call sub_1004B4A  +
cmp edi ebx +
jl loc_1005136  +
mov eax [esi] +
lea ecx [esi+0A0h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+0BCh]  +
mov edi eax +
cmp edi ebx +
mov [ebp+arg_0] ebx +
jl loc_1005229  +
lea eax [ebp+arg_0] +
push eax  +
call ?Create@FillLayout@DirectUI@@SGJPAPAVLayout@2@@Z  +
mov edi eax +
cmp edi ebx +
jl loc_100521C  +
push [ebp+arg_0]  +
mov ecx esi +
call ?SetLayout@Element@DirectUI@@QAEJPAVLayout@2@@Z  +
mov edi eax +
cmp edi ebx +
jl loc_100521C  +
mov ecx [esi+0A0h] +
lea eax [ebp+arg_4] +
push eax  +
push ebx  +
push ebx  +
push esi  +
push offset aMain  +
mov [ebp+arg_0] ebx +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
mov edi eax +
cmp edi ebx +
jl loc_100521C  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 7D0h  +
push dword ptr [esi+98h]  +
call ds:LoadImageW  +
cmp eax ebx +
jz loc_10051BE  +
lea ecx [esi+9Ch] +
push ecx  +
push eax  +
push esi  +
push dword ptr [esi+94h]  +
call sub_1007AC0  +
jmp loc_10051D2  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10051D2  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp edi ebx +
jl loc_100521C  +
push 1  +
mov ecx esi +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
cmp edi ebx +
jl loc_100521C  +
push 1  +
mov ecx esi +
call ?SetAccessible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
cmp edi ebx +
jl loc_100521C  +
mov ecx [esi+94h] +
push esi  +
call ?Host@NativeHWNDHost@DirectUI@@QAEXPAVElement@2@@Z  +
push 1  +
mov ecx esi +
call ?DoubleBuffered@Element@DirectUI@@QAEX_N@Z  +
mov ecx esi +
call sub_1004D42  +
mov edi eax +
cmp edi ebx +
jge loc_1005229  +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jz loc_1005229  +
call ?Destroy@Layout@DirectUI@@QAEXXZ  +
lea ecx [ebp+var_8] +
call sub_1004B70  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
xor ebx ebx +
push eax  +
mov esi ecx +
mov [ebp+var_1] bl +
call sub_1004F8D  +
cmp [esi+0ACh] bl +
jz loc_10052F7  +
mov eax 7D5h +
push edi  +
cmp [ebp+arg_0] eax +
jnz loc_1005292  +
mov ecx [esi+94h] +
mov edi [ecx+4] +
push eax  +
push edi  +
call ds:KillTimer  +
push ebx  +
push dword ptr [esi+0A8h]  +
push 7D6h  +
push edi  +
call ds:SetTimer  +
mov edi [esi+0B4h] +
cmp edi ebx +
jnz loc_10052C4  +
mov eax [esi+0B0h] +
cmp eax ebx +
jz loc_10052C4  +
mov edi [eax+28h] +
jmp loc_10052C0  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+80h]  +
cmp dword_10270EC eax +
jz loc_10052C4  +
mov edi [edi+28h] +
cmp edi ebx +
jnz loc_10052AB  +
mov [ebp+arg_0] ebx +
cmp edi ebx +
jz loc_10052E5  +
mov [ebp+arg_0] edi +
cmp [esi+0B4h] ebx +
jnz loc_10052DC  +
mov [esi+0B4h] edi +
push 1  +
mov ecx edi +
call sub_100DBD3  +
pop edi  +
cmp [esi+0B0h] ebx +
jz loc_10052F7  +
cmp [ebp+arg_0] ebx +
jz loc_10052F7  +
mov [ebp+var_1] 1 +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 0B8h  +
call sub_1004B07  +
mov esi eax +
test esi esi +
jz loc_100531F  +
mov ecx esi +
call sub_1005053  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10050A0  +
test byte ptr [ebp+8] 1 +
jz loc_1005342  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
mov [ebx] edi +
cmp dword_1026B20 edi +
jnz loc_10053A3  +
call sub_1005305  +
mov esi eax +
cmp esi edi +
jnz loc_1005377  +
mov edi 8007000Eh +
jmp loc_10053A3  +
push [ebp+arg_14]  +
mov ecx esi +
push [ebp+arg_10]  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_10050CE  +
mov edi eax +
test edi edi +
jge loc_100539D  +
push 1  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_10053A3  +
mov dword_1026B20 esi +
mov eax dword_1026B20 +
mov [ebx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10053D3  +
cmp [esi] ax +
jz loc_10053CF  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_10053C5  +
test edx edx +
jnz loc_10053D8  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10053E9  +
test eax eax +
jl loc_10053E6  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_10053EF  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100546D  +
cmp eax 0Ch +
jz loc_1005466  +
cmp eax 16h +
jz loc_100545F  +
cmp eax 22h +
jz loc_100545F  +
cmp eax 50h +
jz loc_100546D  +
push 80004005h  +
call loc_100540D  +
push 80070057h  +
jmp loc_100545A  +
push 8007000Eh  +
jmp loc_100545A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_1005435  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10054AD  +
xor eax eax +
jmp loc_10054CC  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10054BB  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_10054C7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_0] esi +
jz loc_1005566  +
mov eax [edi] +
cmp eax esi +
jz loc_10054F3  +
cmp [ebp+arg_4] esi +
jz loc_1005566  +
push eax  +
call ds:SysStringLen  +
mov ecx [ebp+arg_4] +
lea ebx [eax+ecx] +
cmp ebx eax +
mov [ebp+var_4] eax +
jge loc_100550E  +
mov eax 8007000Eh +
jmp loc_1005568  +
push ebx  +
push esi  +
call ds:SysAllocStringLen  +
mov esi eax +
test esi esi +
jz loc_1005507  +
push dword ptr [edi]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_100553D  +
mov eax [ebp+var_4] +
add eax eax +
push eax  +
push dword ptr [edi]  +
lea eax [ebx+ebx] +
push eax  +
push esi  +
call sub_1005476  +
add esp 10h +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
push eax  +
mov eax [ebp+var_4] +
lea eax [esi+eax*2] +
push eax  +
call sub_1005476  +
xor eax eax +
add esp 10h +
mov [esi+ebx*2] ax +
push dword ptr [edi]  +
call ds:SysFreeString  +
mov [edi] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1014C57  +
test [ebp+arg_0] 1 +
jz loc_100559C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100AA97  +
test [ebp+arg_0] 1 +
jz loc_10055C2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpDst] +
push esi  +
push [ebp+nSize]  +
xor ecx ecx +
push eax  +
push offset Src  +
xor esi esi +
mov [eax] cx +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_1005607  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1005605  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push edi  +
lea edi [esi+44h] +
push edi  +
call sub_101454C  +
mov ebx eax +
test ebx ebx +
jl loc_1005677  +
mov ecx [esi+0Ch] +
push edi  +
call sub_101454C  +
mov ebx eax +
test ebx ebx +
jl loc_1005677  +
mov ecx [esi+10h] +
push edi  +
call sub_101454C  +
mov ebx eax +
test ebx ebx +
jl loc_1005677  +
mov ecx [esi+18h] +
push edi  +
call sub_101454C  +
mov ebx eax +
test ebx ebx +
jl loc_1005677  +
cmp dword ptr [esi+70h] 0 +
jz loc_100566A  +
mov ecx [esi+14h] +
push edi  +
call sub_101454C  +
mov ebx eax +
test ebx ebx +
jl loc_1005677  +
mov ecx [esi+38h] +
push edi  +
call sub_100ADB2  +
cmp dword_1026ADC 0 +
jz loc_10056DB  +
mov al byte_1026AE0 +
cmp al 4 +
jnb loc_100568D  +
test al al +
jnz loc_10056DB  +
mov eax dword_1026AC8 +
mov ecx dword_1026ACC +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10056DB  +
mov eax dword_1026AD0 +
mov edi dword_1026AD4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10056DB  +
cmp edx edi +
jnz loc_10056DB  +
push offset dword_1001668  +
push dword_1026AB4  +
push dword_1026AB0  +
call sub_1004479  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
push ebx  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi+8] +
call sub_10156FE  +
test eax eax +
jl loc_100574D  +
mov ecx [esi+0Ch] +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call sub_10156FE  +
test eax eax +
jl loc_100574D  +
mov ecx [esi+10h] +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call sub_10156FE  +
test eax eax +
jl loc_100574D  +
mov ecx [esi+18h] +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call sub_10156FE  +
test eax eax +
jl loc_100574D  +
cmp dword ptr [esi+70h] 0 +
jz loc_100574D  +
mov ecx [esi+14h] +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call sub_10156FE  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+44h] 0 +
jz loc_100577A  +
movzx eax [ebp+arg_0] +
push 40005h  +
push hInstance  +
push eax  +
call PlaySoundW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
call sub_100C1E3  +
test al al +
jz loc_10057DA  +
lea eax [ebp+8] +
push eax  +
mov [ebp+8] esi +
call ds:GetCurrentProcessId  +
push eax  +
call ds:ProcessIdToSessionId  +
test eax eax +
jz loc_10057F4  +
lea eax [ebp-4] +
push eax  +
push esi  +
push 208h  +
push dword ptr [ebp+8]  +
call WmsgSendMessage  +
cmp eax esi +
jz loc_10057F4  +
cmp eax 5 +
jz loc_10057F4  +
cmp eax esi +
jle loc_10057D6  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10057F4  +
mov eax [ebp+8] +
mov eax [eax+34h] +
push esi  +
push 13F0h  +
push 111h  +
push dword ptr [eax+4]  +
call ds:PostMessageW  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
push edi  +
mov esi ecx +
cmp [ebp+arg_0] ebx +
jnz loc_10058F3  +
xor eax eax +
lea edi [ebp+arg_0+2] +
mov word ptr [ebp+arg_0] ax +
stos   +
cmp [esi+6Fh] al +
jz loc_10058D3  +
cmp [ebp+arg_4] ebx +
jnz loc_10058D3  +
mov eax [ebp+arg_8] +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jz loc_10058D3  +
mov edi [ebp+arg_10] +
push edi  +
call ds:SysStringLen  +
cmp eax ebx +
jnz loc_100585A  +
mov bx [edi] +
jmp loc_100586D  +
push dword ptr [esi+3Ch]  +
movzx eax word ptr [ebp+arg_8+2] +
push 2  +
push eax  +
call ds:MapVirtualKeyExW  +
mov bx ax +
cmp dword_1026ADC 0 +
jz loc_10058D7  +
mov al byte_1026AE0 +
cmp al 4 +
jnb loc_1005883  +
test al al +
jnz loc_10058D7  +
mov eax dword_1026AC8 +
mov ecx dword_1026ACC +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10058D7  +
mov eax dword_1026AD0 +
mov edi dword_1026AD4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10058D7  +
cmp edx edi +
jnz loc_10058D7  +
push offset dword_1001678  +
push dword_1026AB4  +
push dword_1026AB0  +
call sub_1004479  +
jmp loc_10058D7  +
mov bx word ptr [ebp+arg_0] +
movzx eax bx +
push eax  +
push 113EFh  +
push 111h  +
push [ebp+hWnd]  +
call ds:PostMessageW  +
jmp loc_100598C  +
xor edi edi +
cmp [ebp+arg_0] edi +
jnz loc_100598C  +
cmp dword ptr [esi+48h] 2 +
jnz loc_100598C  +
lea eax [ebp+pgui] +
push eax  +
push edi  +
mov [ebp+pgui.cbSize] 30h +
call ds:GetGUIThreadInfo  +
test eax eax +
jz loc_100598C  +
cmp [ebp+pgui.hwndCapture] edi +
jz loc_100598C  +
cmp [ebp+arg_4] ebx +
jnz loc_100598C  +
mov eax [ebp+arg_8] +
mov ecx 0CBh +
cmp cx ax +
jz loc_100594F  +
add ecx 2 +
cmp cx ax +
jz loc_100594F  +
mov ecx 0C8h +
cmp cx ax +
jz loc_100594F  +
add ecx 8 +
cmp cx ax +
jnz loc_100598C  +
lea eax [ebp+pci] +
push eax  +
mov [ebp+pci.cbSize] 14h +
call ds:GetCursorInfo  +
test eax eax +
jz loc_100598C  +
push 7F86h  +
push edi  +
call ds:LoadCursorW  +
cmp [ebp+pci.hCursor] eax +
jnz loc_100598C  +
mov eax [esi+34h] +
push edi  +
push 2710h  +
push 7D4h  +
push dword ptr [eax+4]  +
call ds:SetTimer  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+10h] +
mov dword ptr [ebp-4] 80004002h +
test edx edx +
jnz loc_10059BD  +
mov eax 80004003h +
jmp locret_10059FF  +
and dword ptr [edx] 0 +
push ebx  +
mov ebx [ebp+8] +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10021D0 +
xor eax eax +
cmps   +
jz loc_10059E8  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100408C +
xor eax eax +
cmps   +
jnz loc_10059EA  +
mov [edx] ebx +
cmp dword ptr [edx] 0 +
jz loc_10059F9  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi+38h] +
xor ebx ebx +
mov [ebp+var_4] ebx +
call sub_100ACB2  +
test al al +
jz loc_1005A54  +
mov eax [esi+34h] +
push ebx  +
push ebx  +
push 401h  +
push dword ptr [eax+4]  +
call ds:PostMessageW  +
cmp [ebp+arg_4] bl +
jz loc_1005A68  +
cmp [ebp+var_4] ebx +
jz loc_1005A68  +
push [ebp+var_4]  +
mov ecx esi +
call sub_1005759  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+38h] +
pop ebp  +
jmp sub_100ADA2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_48] 0 +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:WindowFromPhysicalPoint  +
mov edi eax +
test edi edi +
jz loc_1005B57  +
push esi  +
mov esi ds:GetClassNameW +
push 20h  +
lea eax [ebp+ClassName] +
push eax  +
push edi  +
call esi  +
test eax eax +
jle loc_1005B56  +
mov edx offset aDirectuihwnd +
lea eax [ebp+ClassName] +
mov cx [eax] +
cmp cx [edx] +
jnz loc_1005AF9  +
test cx cx +
jz loc_1005AF5  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_1005AF9  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_1005AD3  +
xor eax eax +
jmp loc_1005AFE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1005B56  +
push edi  +
call ds:GetParent  +
mov edi eax +
test edi edi +
jz loc_1005B56  +
push 20h  +
lea eax [ebp+ClassName] +
push eax  +
push edi  +
call esi  +
test eax eax +
jle loc_1005B56  +
mov ecx offset ClassName +
lea eax [ebp+ClassName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1005B4A  +
test dx dx +
jz loc_1005B46  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1005B4A  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1005B24  +
xor eax eax +
jmp loc_1005B4F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1005B56  +
mov [ebp+var_48] edi +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_48] +
xor ecx ebp +
pop edi  +
call sub_100C84F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+34h] +
sub esp 10h +
push ebx  +
push esi  +
mov esi [eax+4] +
xor bl bl +
test esi esi +
jz loc_1005BB4  +
push esi  +
call ds:IsIconic  +
test eax eax +
jz loc_1005BB4  +
lea eax [ebp+rc] +
push eax  +
push esi  +
call ds:GetWindowMinimizeRect  +
test eax eax +
jz loc_1005BB4  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_1005BB4  +
inc bl  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
push 0  +
mov [ebp+var_1] 0 +
call ds:GetDC  +
mov ebx eax +
test ebx ebx +
jz loc_1005C11  +
push esi  +
push 60h  +
push 58h  +
push ebx  +
call ds:GetDeviceCaps  +
push eax  +
mov esi 8Ch +
push esi  +
call ds:MulDiv  +
add eax esi +
cdq   +
sub eax edx +
push ebx  +
sar eax 1 +
push 0  +
mov [edi] eax +
mov [ebp+var_1] 1 +
call ds:ReleaseDC  +
pop esi  +
mov al [ebp+var_1] +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+dwProcessId] +
push esi  +
push 0FFFFFFECh  +
push ebx  +
mov esi ecx +
call ds:GetWindowLongW  +
test al 8 +
jz loc_1005C85  +
lea eax [ebp+dwProcessId] +
push eax  +
push ebx  +
call ds:GetWindowThreadProcessId  +
call ds:GetCurrentProcessId  +
cmp [ebp+dwProcessId] eax +
jz loc_1005C85  +
push edi  +
mov edi ds:GetTickCount +
cmp ebx [esi+64h] +
jnz loc_1005C66  +
call edi  +
sub eax [esi+68h] +
cmp eax 3E8h +
jbe loc_1005C84  +
push 13h  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
mov eax [esi+34h] +
push 0FFFFFFFFh  +
push dword ptr [eax+4]  +
call ds:SetWindowPos  +
mov [esi+64h] ebx +
call edi  +
mov [esi+68h] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push ebx  +
push 40h  +
lea ecx [ebp+ClassName] +
push ecx  +
push eax  +
xor bl bl +
call ds:GetClassNameW  +
test eax eax +
jle loc_1005D01  +
xor eax eax +
mov [ebp+var_6] ax +
mov edx offset aConsolewindowc +
lea eax [ebp+ClassName] +
mov cx [eax] +
cmp cx [edx] +
jnz loc_1005CF6  +
test cx cx +
jz loc_1005CF2  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_1005CF6  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_1005CD0  +
xor eax eax +
jmp loc_1005CFB  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1005D01  +
mov bl 1 +
mov ecx [ebp+var_4] +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
mov bl 1 +
call ds:GetForegroundWindow  +
test eax eax +
jz loc_1005D38  +
push offset String  +
push eax  +
call ds:GetPropW  +
test eax eax +
jz loc_1005D38  +
xor bl bl +
mov al bl +
pop ebx  +
retn   +
***
mov ecx [ecx+70h] +
test ecx ecx +
jz locret_1005D4D  +
jmp loc_100B7F9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor al al +
xor ecx ecx +
mov edx Data[ecx] +
cmp edx [ebp+arg_0] +
jz loc_1005D71  +
add ecx 8 +
cmp ecx 58h +
jb loc_1005D5C  +
jmp loc_1005D73  +
mov al 1 +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp dword ptr [ecx+48h] 3 +
jnz locret_1005D8A  +
cmp [ecx+55h] al +
jz locret_1005D8A  +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx] +
mov ecx [eax] +
push offset dword_1001A7C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1005DC3  +
cmp ecx 7FFFFFFFh +
jbe loc_1005DC8  +
mov eax 80070057h +
test eax eax +
jl loc_1005E05  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1005DF5  +
cmp eax esi +
ja loc_1005DF5  +
jnz loc_1005E00  +
jmp loc_1005DFA  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1005E2E  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_1005E2E  +
call sub_10053B8  +
jmp loc_1005E33  +
mov eax 80070057h +
test eax eax +
jge loc_1005E3E  +
test edi edi +
jz loc_1005E3E  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
mov esi ecx +
jnz loc_1005E60  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+8]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1005E59  +
push 8007000Eh  +
call loc_100540D  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_10054D6  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
mov eax [esi+24h] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_1005EFC  +
mov eax [esi+1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_1005EFC  +
mov ecx [esi+24h] +
mov eax [esi+1Ch] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+0Ch]  +
test eax eax +
jl loc_1005EFC  +
mov ecx [esi+1Ch] +
mov eax [esi+28h] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+0Ch]  +
test eax eax +
jl loc_1005EFC  +
mov eax [esi+2Ch] +
mov esi [esi+1Ch] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+38h] +
push 0  +
call sub_100ADA2  +
mov ecx [esi+8] +
push 4  +
call sub_10155E9  +
test eax eax +
jl loc_1005F63  +
mov ecx [esi+0Ch] +
push 1  +
call sub_10155E9  +
test eax eax +
jl loc_1005F63  +
cmp byte ptr [esi+6Dh] 0 +
jz loc_1005F41  +
mov ecx [esi+18h] +
push 1  +
call sub_10155E9  +
test eax eax +
jl loc_1005F63  +
mov ecx [esi+10h] +
push 1  +
call sub_10155E9  +
test eax eax +
jl loc_1005F63  +
cmp byte ptr [esi+6Fh] 0 +
jz loc_1005F63  +
mov ecx [esi+70h] +
push 2  +
call sub_100B8C7  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
push edi  +
mov [ebp+var_21C] eax +
mov eax 3E8h +
xor ebx ebx +
push ecx  +
mov byte ptr [ebp+var_230] bl +
mov [ebp+var_22C] eax +
mov [ebp+var_228] eax +
mov [ebp+var_224] 0Fh +
call StrToID  +
mov ecx [esi+30h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp+var_218] eax +
push 104h  +
lea eax [ebp+Dst] +
push eax  +
mov ecx esi +
call sub_10055CE  +
mov edi eax +
cmp edi ebx +
jl loc_10060B8  +
lea eax [ebp+Dst] +
push eax  +
lea ecx [ebp+lpLibFileName] +
call loc_1005E48  +
lea eax [ebp+Dst] +
push eax  +
lea ecx [ebp+var_214] +
call loc_1005E48  +
push offset aTabskb_dll  +
lea ecx [ebp+lpLibFileName] +
call sub_1005E7F  +
mov edi eax +
cmp edi ebx +
jl loc_10060A2  +
push offset aTipresx_dll  +
lea ecx [ebp+var_214] +
call sub_1005E7F  +
mov edi eax +
cmp edi ebx +
jl loc_10060A2  +
mov edi ds:LoadLibraryExW +
push ebx  +
push ebx  +
push [ebp+lpLibFileName]  +
call edi  +
push 2  +
push ebx  +
push [ebp+var_214]  +
mov [ebp+var_220] eax +
call edi  +
mov ecx [esi+40h] +
mov ebx [esi+1Ch] +
push 1Eh  +
pop edx  +
mov [ebp+var_234] dx +
push dword ptr [ebp+var_234]  +
mov edx [esi+20h] +
push ecx  +
mov ecx [ebp+var_21C] +
sub esp 10h +
mov [esi+7Ch] eax +
mov edi esp +
lea esi [ebp+var_230] +
movs   +
push eax  +
push [ebp+var_220]  +
movs   +
push [ebp+var_218]  +
movs   +
push edx  +
push ebx  +
movs   +
call sub_1014490  +
mov edi eax +
push [ebp+var_214]  +
mov esi ds:SysFreeString +
call esi  +
push [ebp+lpLibFileName]  +
call esi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
lea eax [ebp+var_8] +
xor ebx ebx +
push eax  +
mov esi ecx +
mov [ebp+var_8] ebx +
call sub_100950D  +
cmp eax ebx +
jl loc_1006263  +
mov ecx [ebp+var_8] +
lea eax [ebp+Data] +
push eax  +
push 4  +
mov dword ptr [ebp+Data] ebx +
mov byte ptr [esi+44h] 1 +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006263  +
cmp dword ptr [ebp+Data] ebx +
mov ecx [ebp+var_8] +
setnz al  +
mov [esi+44h] al +
lea eax [ebp+Data] +
push eax  +
push 5  +
mov dword ptr [esi+48h] 1 +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006263  +
mov eax dword ptr [ebp+Data] +
mov ecx [ebp+var_8] +
push edi  +
mov [esi+48h] eax +
lea eax [ebp+Data] +
push eax  +
mov edi 3E8h +
push 6  +
mov [esi+4Ch] edi +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
mov eax dword ptr [ebp+Data] +
mov ecx [ebp+var_8] +
mov [esi+4Ch] eax +
lea eax [ebp+Data] +
push eax  +
push 7  +
mov [esi+50h] edi +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
mov eax dword ptr [ebp+Data] +
mov ecx [ebp+var_8] +
mov [esi+50h] eax +
lea eax [ebp+Data] +
push eax  +
push 8  +
mov byte ptr [esi+54h] 1 +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
cmp dword ptr [ebp+Data] ebx +
mov ecx [ebp+var_8] +
setnz al  +
mov [esi+54h] al +
lea eax [ebp+Data] +
push eax  +
push 9  +
mov [esi+55h] bl +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
cmp dword ptr [ebp+Data] ebx +
mov ecx [ebp+var_8] +
setnz al  +
mov [esi+55h] al +
lea eax [ebp+Data] +
push eax  +
push 0Ah  +
mov byte ptr [esi+56h] 1 +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
cmp dword ptr [ebp+Data] ebx +
mov ecx [ebp+var_8] +
setnz al  +
push 20h  +
pop edi  +
mov [esi+56h] al +
lea eax [ebp+Data] +
push eax  +
push 0Bh  +
mov [esi+58h] edi +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
push dword ptr [ebp+Data]  +
mov ecx esi +
call sub_1005D53  +
test al al +
jnz loc_1006210  +
mov dword ptr [ebp+Data] edi +
mov eax dword ptr [ebp+Data] +
mov ecx [ebp+var_8] +
mov [esi+58h] eax +
lea eax [ebp+var_C] +
push eax  +
push 0Eh  +
mov [ebp+var_C] ebx +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
cmp [ebp+var_C] ebx +
setnz al  +
mov [esi+6Dh] al +
cmp [esi+70h] ebx +
jz loc_100625B  +
mov ecx [ebp+var_8] +
lea eax [ebp+var_C] +
push eax  +
push 0Ch  +
mov [ebp+var_C] 1 +
call sub_10090DA  +
cmp eax ebx +
jl loc_1006262  +
cmp [ebp+var_C] ebx +
setnz al  +
mov [esi+6Fh] al +
mov ecx esi +
call sub_1005613  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov ebx ecx +
push eax  +
mov eax [ebx+34h] +
push dword ptr [eax+4]  +
call ds:GetClientRect  +
movzx eax byte ptr [ebx+6Fh] +
mov esi [ebp+Rect.right] +
sub esi [ebp+Rect.left] +
mov edi [ebp+Rect.bottom] +
sub edi [ebp+Rect.top] +
neg eax  +
sbb eax eax +
and eax 11h +
imul eax edi +
push 64h  +
cdq   +
pop ecx  +
idiv  ecx +
and [ebp+var_30] 0 +
and [ebp+var_2C] 0 +
mov [ebp+var_1C] edi +
mov [ebp+var_18] esi +
sub edi eax +
cmp byte ptr [ebx+6Fh] 0 +
mov [ebp+var_4] eax +
mov [ebp+var_8] edi +
jz loc_100632D  +
push offset aSoftkeyboardpr  +
call StrToID  +
mov ecx [ebx+30h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov edi eax +
test edi edi +
jz loc_100630A  +
push 0  +
mov ecx edi +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
push 0  +
mov ecx edi +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
push esi  +
mov ecx edi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_4]  +
mov ecx edi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov eax [ebp+var_4] +
mov ecx [ebx+14h] +
mov [ebp+var_28] esi +
mov [ebp+var_24] eax +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
call sub_1015A90  +
mov edi [ebp+var_8] +
mov esi [ebp+var_18] +
and [ebp+var_10] 0 +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
call sub_1005BC1  +
test al al +
jnz loc_1006347  +
mov [ebp+var_10] 8Ch +
and [ebp+var_C] 0 +
cmp byte ptr [ebx+6Dh] 0 +
jz loc_1006363  +
mov eax [ebp+var_10] +
imul eax eax +
push 64h  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp+var_C] eax +
sub esi [ebp+var_C] +
push offset aSoftkeyboardma  +
mov [ebp+var_20] esi +
sub esi [ebp+var_10] +
mov [ebp+var_14] esi +
call StrToID  +
mov ecx [ebx+30h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov ecx eax +
mov [ebp+var_10] ecx +
test ecx ecx +
jz loc_10063B7  +
push 0  +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_4]  +
mov ecx [ebp+var_10] +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
mov ecx [ebp+var_10] +
push esi  +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
mov ecx [ebp+var_10] +
push edi  +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov ecx [ebx+8] +
mov [ebp+var_28] esi +
mov [ebp+var_24] edi +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
call sub_1015A90  +
mov ecx [ebp+var_14] +
mov eax [ebp+var_18] +
sub eax ecx +
sub eax [ebp+var_C] +
push offset aSoftkeyboardau  +
mov edi eax +
mov [ebp+var_10] ecx +
mov [ebp+var_14] edi +
call StrToID  +
mov ecx [ebx+30h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
test esi esi +
jz loc_100642B  +
push [ebp+var_10]  +
mov ecx esi +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_4]  +
mov ecx esi +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
push edi  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_8]  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov eax [ebp+var_8] +
mov ecx [ebx+0Ch] +
mov [ebp+var_28] edi +
mov [ebp+var_24] eax +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
call sub_1015A90  +
mov eax [ebp+var_8] +
imul eax eax +
cdq   +
push 64h  +
pop ecx  +
idiv  ecx +
mov ecx [ebp+var_4] +
push offset aSoftkeyboardme  +
lea esi [eax+ecx+1] +
mov eax [ebp+var_1C] +
sub eax esi +
mov [ebp+var_18] eax +
call StrToID  +
mov ecx [ebx+30h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov edi eax +
test edi edi +
jz loc_10064AA  +
push [ebp+var_10]  +
mov ecx edi +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
push esi  +
mov ecx edi +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_14]  +
mov ecx edi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_18]  +
mov ecx edi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov eax [ebp+var_18] +
mov ecx [ebx+10h] +
mov [ebp+var_24] eax +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
call sub_1015A90  +
push offset aSoftkeyboardnu  +
call StrToID  +
mov ecx [ebx+30h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
test esi esi +
jz loc_100650D  +
push [ebp+var_20]  +
mov ecx esi +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_4]  +
mov ecx esi +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_C]  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push [ebp+var_8]  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov eax [ebp+var_C] +
mov ecx [ebx+18h] +
mov [ebp+var_28] eax +
mov eax [ebp+var_8] +
mov [ebp+var_24] eax +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
call sub_1015A90  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+70h] 0 +
jz loc_1006553  +
movzx eax byte ptr [esi+6Fh] +
mov ecx [esi+14h] +
push eax  +
call sub_1015802  +
test eax eax +
jl loc_1006579  +
movzx eax byte ptr [esi+6Dh] +
mov ecx [esi+18h] +
push eax  +
call sub_1015802  +
test eax eax +
jl loc_1006579  +
movzx eax byte ptr [esi+6Dh] +
mov ecx [esi+38h] +
push eax  +
call sub_100AA27  +
mov ecx esi +
pop esi  +
jmp sub_100626C  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
mov eax [ebx+34h] +
mov ecx [eax+4] +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov eax 10600h +
xor edi edi +
cmp esi eax +
jz loc_10065EC  +
cmp esi 10601h +
jz loc_10065EC  +
lea eax [esi-10620h] +
cmp eax 7 +
ja loc_10065C8  +
cmp [ebp+14h] edi +
jnz loc_100660D  +
add esi 0FFFFF9E0h +
movzx eax si +
push eax  +
push 13F2h  +
jmp loc_1006601  +
cmp dword ptr [ebp+10h] 1 +
jnz loc_10065E7  +
push ecx  +
push dword ptr [ebp+24h]  +
lea esi [ebp+18h] +
sub esp 0Ch +
mov edi esp +
push dword ptr [ebp+14h]  +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_1005800  +
xor edi edi +
inc edi  +
jmp loc_100660D  +
cmp [ebp+14h] edi +
jnz loc_100660D  +
xor edx edx +
cmp esi eax +
setnz dl  +
push edi  +
lea edx [edx+edx+13ECh] +
push edx  +
push 111h  +
push ecx  +
call ds:PostMessageW  +
cmp dword ptr [ebp+14h] 1 +
jnz loc_1006627  +
push 834h  +
mov ecx ebx +
call sub_1005759  +
mov eax [ebp+10h] +
mov [ebx+78h] eax +
jmp loc_1006645  +
cmp dword ptr [ebp+14h] 0 +
jnz loc_1006645  +
cmp dword ptr [ebp+10h] 4 +
jnz loc_1006645  +
cmp dword ptr [ebx+78h] 4 +
jnz loc_1006645  +
push 834h  +
mov ecx ebx +
call sub_1005759  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 178h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
mov esi ds:FindResourceExW +
push edi  +
push dword ptr [ebp+wLanguage]  +
movzx edi [ebp+arg_4] +
push edi  +
push 6  +
push eax  +
mov [ebp+var_174] eax +
call esi  +
xor ebx ebx +
mov [ebp+var_160] eax +
cmp eax ebx +
jnz loc_100683D  +
push ebx  +
push 55h  +
lea eax [ebp+var_B0] +
push eax  +
movzx eax [ebp+wLanguage] +
push eax  +
call ds:LCIDToLocaleName  +
test eax eax +
jz loc_100670E  +
push 55h  +
lea eax [ebp+var_15C] +
push eax  +
push 6Dh  +
lea eax [ebp+var_B0] +
push eax  +
call ds:GetLocaleInfoEx  +
test eax eax +
jz loc_100670E  +
push 55h  +
lea eax [ebp+var_B0] +
push eax  +
lea eax [ebp+var_15C] +
push eax  +
call ds:ResolveLocaleName  +
push ebx  +
lea eax [ebp+var_B0] +
push eax  +
call ds:LocaleNameToLCID  +
cmp eax ebx +
jz loc_100670E  +
push eax  +
push edi  +
push 6  +
push [ebp+var_174]  +
call esi  +
mov [ebp+var_160] eax +
cmp eax ebx +
jnz loc_100683D  +
mov edi ds:GetUserPreferredUILanguages +
lea eax [ebp+var_164] +
push eax  +
push ebx  +
lea eax [ebp+var_168] +
push eax  +
push 4  +
mov [ebp+var_168] ebx +
mov [ebp+var_164] ebx +
call edi  +
test eax eax +
jz loc_1006827  +
mov eax [ebp+var_164] +
cmp eax ebx +
jbe loc_1006827  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_16C] eax +
cmp eax ebx +
jz loc_1006827  +
lea ecx [ebp+var_164] +
push ecx  +
push eax  +
lea eax [ebp+var_168] +
push eax  +
push 4  +
call edi  +
test eax eax +
jz loc_1006813  +
mov edi [ebp+var_16C] +
mov [ebp+var_170] ebx +
cmp [ebp+var_168] ebx +
jbe loc_1006813  +
push 10h  +
push ebx  +
push edi  +
call ds:wcstoul  +
add esp 0Ch +
movzx eax ax +
push eax  +
movzx eax [ebp+arg_4] +
push eax  +
push 6  +
push [ebp+var_174]  +
call esi  +
mov [ebp+var_160] eax +
cmp eax ebx +
jnz loc_1006813  +
lea eax [ebp+var_178] +
push eax  +
push [ebp+var_164]  +
mov [ebp+var_178] ebx +
push edi  +
call sub_1005E0C  +
test eax eax +
jl loc_1006813  +
mov eax [ebp+var_178] +
mov ecx [ebp+var_164] +
lea edi [edi+eax*2+2] +
mov eax [ebp+var_16C] +
lea eax [eax+ecx*2] +
cmp edi eax +
jnb loc_1006813  +
inc [ebp+var_170]  +
mov eax [ebp+var_170] +
cmp eax [ebp+var_168] +
jb loc_100679B  +
push [ebp+var_16C]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
cmp [ebp+var_160] ebx +
jnz loc_100683D  +
movzx eax [ebp+arg_4] +
push ebx  +
push eax  +
push 6  +
push [ebp+var_174]  +
call esi  +
mov [ebp+var_160] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+var_160] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 0Ch  +
***
mov eax dword_1026B58 +
test eax eax +
jz locret_100686A  +
mov ecx [eax+38h] +
call sub_100AC9F  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
xor eax eax +
test ecx ecx +
jz loc_100688C  +
mov ecx [ecx+38h] +
pop ebp  +
jmp loc_100A986  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
pop ebp  +
jmp sub_1005A1F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
test ecx ecx +
jz loc_10068C0  +
pop ebp  +
jmp loc_1005A73  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp [esi] ebx +
push edi  +
mov edi ecx +
mov [ebp+var_8] ebx +
jl loc_10069BC  +
cmp [esi+4] ebx +
jl loc_10069BC  +
lea eax [ebp+Rect] +
push eax  +
mov eax [edi+34h] +
push dword ptr [eax+4]  +
call ds:GetClientRect  +
mov edx [esi] +
mov eax [ebp+Rect.right] +
cmp edx eax +
jge loc_10069BC  +
mov ecx [esi+4] +
cmp ecx [ebp+Rect.bottom] +
jge loc_10069BC  +
cmp [edi+74h] bl +
jz loc_1006921  +
sub eax edx +
mov [esi] eax +
mov eax [ebp+Rect.bottom] +
mov [ebp+var_4] eax +
cmp [edi+6Fh] bl +
jz loc_100694E  +
imul eax eax +
push 64h  +
cdq   +
pop ebx  +
idiv  ebx +
cmp ecx eax +
jge loc_100693E  +
mov ebx [edi+14h] +
jmp loc_10069BC  +
mov edx [ebp+Rect.bottom] +
mov ebx [ebp+var_8] +
sub edx eax +
sub ecx eax +
mov [ebp+var_4] edx +
mov [esi+4] ecx +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_1005BC1  +
test al al +
jz loc_10069BC  +
mov ebx [ebp+arg_0] +
xor eax eax +
cmp [edi+6Dh] al +
jz loc_1006979  +
mov eax ebx +
imul eax eax +
push 64h  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [ebp+Rect.right] +
sub ecx eax +
mov eax [esi] +
sub ecx ebx +
cmp eax ecx +
jge loc_100698B  +
mov ebx [edi+8] +
jmp loc_10069BC  +
sub eax ecx +
cmp eax ebx +
mov [esi] eax +
jge loc_10069B5  +
mov eax [ebp+var_4] +
imul eax eax +
push 64h  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [esi+4] +
cmp ecx eax +
jge loc_10069AB  +
mov ebx [edi+0Ch] +
jmp loc_10069BC  +
sub ecx eax +
mov [esi+4] ecx +
mov ebx [edi+10h] +
jmp loc_10069BC  +
sub eax ebx +
mov [esi] eax +
mov ebx [edi+18h] +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10068C9  +
test eax eax +
jz loc_10069E9  +
push [ebp+arg_0]  +
mov ecx [esi+8] +
call sub_101482C  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+1Ch] +
mov ecx [eax] +
push 1  +
push 4  +
push eax  +
call dword ptr [ecx+18h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+1Ch] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 3 +
jz loc_1006A4E  +
cmp [ebp+arg_4] 8005h +
jnz loc_1006A56  +
mov eax [ecx+34h] +
push 0  +
push 1F4h  +
push 7D3h  +
push dword ptr [eax+4]  +
call ds:SetTimer  +
jmp loc_1006A56  +
push [ebp+dwProcessId]  +
call sub_1005C1F  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+1Ch] edi +
jz loc_1006ACA  +
push [ebp+arg_4]  +
and [ebp+var_4] edi +
call ds:SysAllocString  +
lea edx [ebp+var_4] +
push edx  +
push dword ptr [esi+3Ch]  +
mov [ebp+arg_4] eax +
mov eax [esi+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_1006ABA  +
mov ecx [ebp+arg_0] +
push 0  +
push dword ptr [esi+3Ch]  +
push [ebp+var_4]  +
call sub_1014518  +
mov edi eax +
test edi edi +
jl loc_1006ABA  +
mov ecx [ebp+arg_0] +
push 1  +
call sub_1015802  +
mov edi eax +
push [ebp+var_4]  +
mov esi ds:SysFreeString +
call esi  +
push [ebp+arg_4]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov ecx dword_1026B58 +
test ecx ecx +
jz locret_1006AE6  +
jmp loc_1005D41  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+Point] +
push eax  +
mov esi ecx +
call ds:GetCursorPos  +
lea eax [ebp+Point] +
push eax  +
mov eax [esi+34h] +
push dword ptr [eax+4]  +
call ds:ScreenToClient  +
mov eax [ebp+Point.x] +
mov [ebp+var_10] eax +
mov eax [ebp+Point.y] +
mov [ebp+var_C] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_10068C9  +
cmp eax [esi+8] +
jz loc_1006B37  +
cmp eax [esi+0Ch] +
jz loc_1006B37  +
cmp eax [esi+18h] +
jnz loc_1006B55  +
push [ebp+Point.y]  +
mov esi [esi+30h] +
push [ebp+Point.x]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_100523F  +
test al al +
jz loc_1006B55  +
mov ecx esi +
call sub_1004EF4  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor eax eax +
mov [ecx+8] eax +
mov [ecx+0Ch] eax +
mov [ecx+10h] eax +
mov [ecx+14h] eax +
mov [ecx+18h] eax +
mov dword ptr [ecx] offset off_1001B70 +
mov dword ptr [ecx+4] 1 +
mov [ecx+1Ch] eax +
mov [ecx+20h] eax +
mov [ecx+24h] eax +
mov [ecx+28h] eax +
mov [ecx+2Ch] eax +
mov [ecx+38h] eax +
mov [ecx+3Ch] eax +
mov [ecx+64h] eax +
mov [ecx+68h] eax +
mov [ecx+6Ch] al +
mov [ecx+6Dh] al +
mov [ecx+6Eh] al +
mov [ecx+6Fh] al +
mov [ecx+70h] eax +
mov [ecx+74h] al +
mov [ecx+78h] eax +
mov [ecx+7Ch] eax +
mov eax [ebp+arg_0] +
mov [ecx+34h] eax +
mov eax [ebp+arg_4] +
mov [ecx+30h] eax +
mov eax [ebp+arg_8] +
mov [ecx+40h] eax +
xor eax eax +
lea edi [ecx+5Ch] +
stos   +
stos   +
mov eax ecx +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
push 0A0h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1006C06  +
mov ecx eax +
call sub_1014443  +
mov ebx eax +
jmp loc_1006C08  +
xor ebx ebx +
test ebx ebx +
jz loc_1006CA1  +
push [ebp+arg_0]  +
mov ecx esi +
push ebx  +
call sub_1005F6A  +
mov edi eax +
test edi edi +
jl loc_1006CED  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
call ds:SysAllocString  +
lea edx [ebp+var_4] +
push edx  +
push dword ptr [esi+3Ch]  +
mov [ebp+arg_4] eax +
mov eax [esi+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_1006C8D  +
push 0  +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
push [ebp+var_4]  +
call sub_1014518  +
mov edi eax +
test edi edi +
jl loc_1006C8D  +
push 1  +
mov ecx ebx +
call sub_1015802  +
mov edi eax +
test edi edi +
jl loc_1006C8D  +
call sub_100C1E3  +
movzx eax al +
push eax  +
mov ecx ebx +
call sub_101599E  +
mov edi eax +
test edi edi +
jl loc_1006C8D  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
push [ebp+var_4]  +
call ds:SysFreeString  +
push [ebp+arg_4]  +
call ds:SysFreeString  +
jmp loc_1006CA6  +
mov edi 8007000Eh +
test edi edi +
jl loc_1006CED  +
push [ebp+arg_0]  +
call StrToID  +
mov ecx [esi+30h] +
mov esi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
call esi  +
push offset aKbcontrol  +
mov ebx eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call esi  +
mov esi eax +
push 64h  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push 64h  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
jmp loc_1006CFA  +
test ebx ebx +
jz loc_1006CFA  +
push 1  +
mov ecx ebx +
call sub_1005582  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push eax  +
push offset aOskmenu  +
mov esi offset aSoftkeyboardme +
push esi  +
mov edi ecx +
call sub_1006BDB  +
mov ebx eax +
test ebx ebx +
jl loc_1006D98  +
call sub_100C1E3  +
test al al +
jz loc_1006D98  +
push esi  +
call StrToID  +
mov ecx [edi+30h] +
mov esi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
call esi  +
push 10601h  +
push offset asc_1001BA0  +
mov edi eax +
lea eax [ebp+var_24] +
push 10h  +
push eax  +
call sub_1005DAD  +
add esp 10h +
test eax eax +
jl loc_1006D98  +
lea eax [ebp+var_24] +
push eax  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
test eax eax +
jz loc_1006D98  +
mov ecx [eax+28h] +
test ecx ecx +
jz loc_1006D98  +
push eax  +
call ?Remove@Element@DirectUI@@QAEJPAV12@@Z  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+hResData] +
and dword ptr [ebx] 0 +
push esi  +
mov esi eax +
and esi 8000000Fh +
push edi  +
mov edi [ecx+7Ch] +
mov [ebp+var_4] 80004005h +
jns loc_1006DDB  +
dec esi  +
or esi 0FFFFFFF0h +
inc esi  +
push dword ptr [ebp+wLanguage]  +
cdq   +
and edx 0Fh +
add eax edx +
sar eax 4 +
inc eax  +
push eax  +
push edi  +
call sub_1006653  +
test eax eax +
jz loc_1006E51  +
push eax  +
push edi  +
call ds:LoadResource  +
mov [ebp+hResData] eax +
test eax eax +
jz loc_1006E51  +
push eax  +
call ds:LockResource  +
test eax eax +
jz loc_1006E48  +
xor edx edx +
movzx ecx word ptr [eax] +
xor edi edi +
inc eax  +
inc eax  +
cmp di cx +
jz loc_1006E25  +
movzx ecx cx +
cmp edx esi +
jz loc_1006E2D  +
lea eax [eax+ecx*2] +
inc edx  +
cmp edx 10h +
jl loc_1006E0F  +
jmp loc_1006E48  +
push ecx  +
push eax  +
call ds:SysAllocStringLen  +
mov [ebx] eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
mov [ebp+var_4] eax +
push [ebp+hResData]  +
call ds:FreeResource  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov eax [esi+48h] +
cmp eax 1 +
jz loc_1006F78  +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
mov edi 201h +
cmp ebx edi +
jz loc_1006EB6  +
cmp ebx 202h +
jnz loc_1006EF1  +
lea eax [ebp+pgui] +
push eax  +
push 0  +
mov [ebp+pgui.cbSize] 30h +
call ds:GetGUIThreadInfo  +
test eax eax +
jz loc_1006F76  +
cmp [ebp+pgui.hwndCapture] 0 +
jnz loc_1006F76  +
push [ebp+pt.y]  +
mov ecx esi +
push [ebp+pt.x]  +
call sub_1005A86  +
test eax eax +
jz loc_1006F76  +
mov [ebp+var_4] 1 +
cmp ebx edi +
jnz loc_1006F76  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push 40Ah  +
push eax  +
call ds:PostMessageW  +
jmp loc_1006F76  +
cmp ebx 200h +
jnz loc_1006F76  +
cmp eax 2 +
jnz loc_1006F76  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
call sub_1005B6E  +
test al al +
jz loc_1006F1D  +
mov eax [esi+34h] +
push 9  +
push dword ptr [eax+4]  +
call ds:ShowWindow  +
jmp loc_1006F76  +
lea eax [ebp+pgui] +
push eax  +
xor edi edi +
push edi  +
mov [ebp+pgui.cbSize] 30h +
call ds:GetGUIThreadInfo  +
test eax eax +
jz loc_1006F76  +
cmp [ebp+pgui.hwndCapture] edi +
jz loc_1006F76  +
push [ebp+pt.y]  +
mov ecx esi +
push [ebp+pt.x]  +
call sub_1005A86  +
cmp eax edi +
jz loc_1006F76  +
mov ecx [ebp+arg_C] +
cmp ecx edi +
jz loc_1006F76  +
mov edx [ecx] +
mov ecx [ecx+4] +
push 1  +
mov [ebp+Points.y] ecx +
lea ecx [ebp+Points] +
push ecx  +
push eax  +
push edi  +
mov [ebp+Points.x] edx +
call ds:MapWindowPoints  +
lea eax [ebp+Points] +
push eax  +
mov ecx esi +
call sub_10069CA  +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10068C9  +
mov edx eax +
test edx edx +
jz loc_1006FB4  +
mov ecx esi +
call sub_1005D7C  +
test al al +
jz loc_1006FB9  +
cmp edx [esi+8] +
jnz loc_1006FB9  +
push 1  +
push 0  +
call sub_1005A1F  +
pop esi  +
pop ebp  +
retn 4  +
pop esi  +
mov ecx edx +
pop ebp  +
jmp loc_1015295  +
***
mov ecx dword_1026B58 +
jmp loc_10069F3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
pop ebp  +
jmp loc_1006A06  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
test ecx ecx +
jz loc_1007002  +
pop ebp  +
jmp loc_1006A20  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
test ecx ecx +
jz loc_1007020  +
pop ebp  +
jmp loc_1006AEC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_100703E  +
push [ebp+arg_0]  +
push ecx  +
call sub_100549C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+5Ch] +
mov [ebp+var_4] 2 +
xor ebx ebx +
mov eax [edi] +
cmp eax ebx +
jz loc_100706F  +
push eax  +
call ds:UnhookWinEvent  +
mov [edi] ebx +
add edi 4 +
dec [ebp+var_4]  +
jnz loc_1007060  +
mov eax [esi+20h] +
cmp eax ebx +
jz loc_1007085  +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
lea eax [esi+8] +
mov [ebp+var_18] eax +
lea eax [esi+0Ch] +
mov [ebp+var_14] eax +
lea eax [esi+10h] +
mov [ebp+var_10] eax +
lea eax [esi+18h] +
mov [ebp+var_C] eax +
lea eax [esi+14h] +
mov [ebp+var_8] eax +
xor edi edi +
mov eax [ebp+edi*4+var_18] +
cmp [eax] ebx +
jz loc_10070B4  +
mov ecx [eax] +
call sub_1015F6B  +
inc edi  +
cmp edi 5 +
jb loc_10070A5  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
mov edi [ebp+eax*4+var_18] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_10070D1  +
push 1  +
call sub_1005582  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 5 +
mov [edi] ebx +
jb loc_10070BD  +
push ebx  +
lea ecx [esi+1Ch] +
call sub_1007029  +
push ebx  +
lea ecx [esi+20h] +
call sub_1007029  +
push ebx  +
lea ecx [esi+24h] +
call sub_1007029  +
push ebx  +
lea ecx [esi+28h] +
call sub_1007029  +
lea edi [esi+2Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_1007117  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
push ebx  +
mov ecx edi +
call sub_1007029  +
mov ecx [esi+38h] +
cmp ecx ebx +
jz loc_1007128  +
push 1  +
call sub_10055A8  +
mov [esi+38h] ebx +
mov eax hhk +
cmp eax ebx +
jz loc_100713E  +
push eax  +
call ds:UnhookWindowsHookEx  +
mov hhk ebx +
cmp [esi+70h] ebx +
jz loc_100714B  +
call sub_100BDC2  +
mov [esi+70h] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:CoCreateInstance +
mov esi ecx +
lea eax [esi+1Ch] +
push eax  +
push offset riid  +
push 17h  +
push 0  +
push offset rclsid  +
call edi  +
mov ebx eax +
test ebx ebx +
jl loc_10071DC  +
lea eax [esi+20h] +
push eax  +
lea ecx [esi+1Ch] +
call sub_1005D90  +
mov ebx eax +
test ebx ebx +
jl loc_10071DC  +
lea eax [esi+24h] +
push eax  +
push offset stru_1001A4C  +
push 17h  +
push 0  +
push offset stru_100414C  +
call edi  +
mov ebx eax +
test ebx ebx +
jl loc_10071DC  +
lea eax [esi+28h] +
push eax  +
push offset stru_1001A5C  +
push 17h  +
push 0  +
push offset stru_100410C  +
call edi  +
mov ebx eax +
test ebx ebx +
jl loc_10071DC  +
lea eax [esi+2Ch] +
push eax  +
push offset stru_1001A6C  +
push 17h  +
push 0  +
push offset stru_10040CC  +
call edi  +
mov ebx eax +
test ebx ebx +
jge loc_100720C  +
push 0  +
lea ecx [esi+1Ch] +
call sub_1007029  +
xor edi edi +
push edi  +
lea ecx [esi+20h] +
call sub_1007029  +
push edi  +
lea ecx [esi+24h] +
call sub_1007029  +
push edi  +
lea ecx [esi+28h] +
call sub_1007029  +
push edi  +
lea ecx [esi+2Ch] +
call sub_1007029  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+6Dh] bl +
jz loc_10072AE  +
mov [ebp+var_C] ebx +
mov eax offset dword_1001904 +
push edi  +
mov [ebp+var_8] ebx +
mov edi eax +
cmp [esi+6Eh] bl +
jz loc_1007246  +
mov eax [edi-4] +
jmp loc_1007248  +
mov eax [edi] +
cmp eax ebx +
jz loc_1007294  +
movzx ecx word ptr [esi+3Ch] +
lea edx [ebp+hResData] +
push edx  +
push ecx  +
push eax  +
mov ecx esi +
mov [ebp+hResData] ebx +
call sub_1006DB0  +
test eax eax +
jl loc_1007294  +
mov eax [ebp+hResData] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100726A  +
push [ebp+var_8]  +
sub eax ecx +
mov ecx [esi+18h] +
push ebx  +
push [ebp+var_C]  +
sar eax 1 +
push eax  +
push [ebp+hResData]  +
call sub_1014DAE  +
push [ebp+hResData]  +
call ds:SysFreeString  +
inc [ebp+var_8]  +
add edi 8 +
cmp [ebp+var_8] 4 +
jl loc_100723C  +
inc [ebp+var_C]  +
cmp edi (offset Src+4) +
mov eax edi +
jl loc_1007237  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+nCode] 0 +
push esi  +
mov esi [ebp+arg_8] +
jnz loc_10072E2  +
mov ecx dword_1026B58 +
test ecx ecx +
jz loc_10072E2  +
push esi  +
push [ebp+wParam]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_1006E60  +
test eax eax +
jnz loc_10072F5  +
push esi  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push hhk  +
call ds:CallNextHookEx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
pop ebp  +
jmp loc_1006F85  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset aMain_0  +
push dword ptr [esi+8]  +
call sub_1006A5F  +
test eax eax +
jl loc_100737C  +
push offset aAuxpad  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
call sub_1006A5F  +
test eax eax +
jl loc_100737C  +
push offset aOsknumpad  +
push dword ptr [esi+18h]  +
mov ecx esi +
call sub_1006A5F  +
test eax eax +
jl loc_100737C  +
mov ecx esi +
call sub_1007217  +
push offset aOskmenu  +
push dword ptr [esi+10h]  +
mov ecx esi +
call sub_1006A5F  +
cmp dword ptr [esi+70h] 0 +
jz loc_100737C  +
push offset aOskpred  +
push dword ptr [esi+14h]  +
mov ecx esi +
call sub_1006A5F  +
mov eax [esi+30h] +
push dword ptr [eax+4]  +
call ds:InvalidateGadget  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jz loc_100742E  +
lea eax [ebp+var_8] +
push eax  +
call ds:DwmIsCompositionEnabled  +
test eax eax +
jl loc_1007427  +
cmp [ebp+var_8] edi +
jnz loc_10073C9  +
push 2  +
call ds:GetSysColor  +
mov edi eax +
mov byte ptr [ebp+var_4] 0FFh +
jmp loc_10073EC  +
or eax 0FFFFFFFFh +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
lea eax [ebp+var_18] +
push eax  +
mov eax [esi+34h] +
push dword ptr [eax+4]  +
mov byte ptr [ebp+var_4] 0 +
call ds:DwmExtendFrameIntoClientArea  +
mov ecx [esi+8] +
push ebx  +
mov ebx [ebp+var_4] +
push ebx  +
push edi  +
call sub_1014BB0  +
mov ecx [esi+0Ch] +
push ebx  +
push edi  +
call sub_1014BB0  +
mov ecx [esi+18h] +
push ebx  +
push edi  +
call sub_1014BB0  +
mov ecx [esi+10h] +
push ebx  +
push edi  +
call sub_1014BB0  +
mov ecx [esi+14h] +
test ecx ecx +
jz loc_1007426  +
push ebx  +
push edi  +
call sub_1014BB0  +
pop ebx  +
mov ecx esi +
call sub_1007315  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov ecx dword_1026B58 +
call sub_1007047  +
mov eax dword_1026B58 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001B70 +
call sub_1007047  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1007470  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+28h] +
test eax eax +
jz loc_100747D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+24h] +
test eax eax +
jz loc_100748A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+20h] +
test eax eax +
jz loc_1007497  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+1Ch] +
test esi esi +
jz loc_10074A4  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
mov esi ecx +
call ds:GetKeyboardLayout  +
mov [esi+3Ch] eax +
lea eax [esi+8] +
push eax  +
push offset aMain_0  +
push offset aSoftkeyboardma  +
mov ecx esi +
call sub_1006BDB  +
mov edi eax +
test edi edi +
jl loc_1007555  +
lea eax [esi+0Ch] +
push eax  +
push offset aAuxpad  +
push offset aSoftkeyboardau  +
mov ecx esi +
call sub_1006BDB  +
mov edi eax +
test edi edi +
jl loc_1007555  +
lea eax [esi+18h] +
push eax  +
push offset aOsknumpad  +
push offset aSoftkeyboardnu  +
mov ecx esi +
call sub_1006BDB  +
mov edi eax +
test edi edi +
jl loc_1007555  +
lea eax [esi+10h] +
push eax  +
mov ecx esi +
call sub_1006D08  +
mov edi eax +
test edi edi +
jl loc_1007555  +
cmp dword ptr [esi+70h] 0 +
push ebx  +
jz loc_100754D  +
lea ebx [esi+14h] +
push ebx  +
push offset aOskpred  +
push offset aSoftkeyboardpr  +
mov ecx esi +
call sub_1006BDB  +
mov edi eax +
test edi edi +
jl loc_1007554  +
push dword ptr [ebx]  +
mov ecx [esi+70h] +
push dword ptr [esi+3Ch]  +
call sub_100B4B8  +
mov ecx esi +
call sub_100738F  +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov ecx dword_1026B58 +
push esi  +
call sub_1005F06  +
mov esi eax +
test esi esi +
jl loc_100757C  +
mov ecx dword_1026B58 +
call sub_1007217  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
cmp eax 2 +
jz loc_100767C  +
cmp eax 3 +
jz loc_100767C  +
cmp eax 0Ch +
jnz loc_10075E2  +
cmp dword ptr [esi+70h] 0 +
jz loc_1007681  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
cmp [esi+6Fh] al +
jz loc_1007681  +
mov [esi+6Fh] al +
call sub_1006537  +
cmp byte ptr [esi+6Fh] 0 +
jz loc_1007681  +
mov ecx [esi+70h] +
push 2  +
call sub_100B8C7  +
jmp loc_1007681  +
cmp eax 0Eh +
jnz loc_1007618  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
cmp [esi+6Dh] al +
jz loc_1007681  +
mov [esi+6Dh] al +
call sub_1006537  +
cmp byte ptr [esi+6Dh] 0 +
jz loc_1007681  +
mov ecx [esi+18h] +
push 1  +
call sub_10155E9  +
mov ecx esi +
call sub_1007217  +
jmp loc_1007681  +
add eax 0FFFFFFFCh +
cmp eax 7 +
ja loc_1007675  +
jmp ds:off_1007689[eax*4]  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
mov [esi+44h] al +
jmp loc_1007675  +
mov eax [ebp+0Ch] +
mov [esi+48h] eax +
jmp loc_1007675  +
mov eax [ebp+0Ch] +
mov [esi+4Ch] eax +
jmp loc_1007675  +
mov eax [ebp+0Ch] +
mov [esi+50h] eax +
jmp loc_1007675  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
mov [esi+54h] al +
jmp loc_1007675  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
mov [esi+55h] al +
jmp loc_1007675  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
mov [esi+56h] al +
jmp loc_1007675  +
mov eax [ebp+0Ch] +
mov [esi+58h] eax +
call sub_1005613  +
jmp loc_1007681  +
call sub_100626C  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
cmp ebx 3Ah +
jz loc_10076C6  +
cmp ebx 46h +
jz loc_10076C6  +
cmp ebx 45h +
jnz loc_1007711  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+14h] +
cmp [ebp+10h] edi +
jnz loc_10076F4  +
cmp edi 3 +
jz loc_10076DD  +
cmp edi 2 +
jnz loc_10076F4  +
mov eax [esi+34h] +
push ebx  +
push 13F1h  +
push 111h  +
push dword ptr [eax+4]  +
call ds:PostMessageW  +
cmp ebx 45h +
jnz loc_100770F  +
cmp edi 5 +
setz al  +
cmp dword ptr [esi+18h] 0 +
mov [esi+6Eh] al +
jz loc_100770F  +
mov ecx esi +
call sub_1007217  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi+34h] +
mov edi [eax+4] +
push 7D3h  +
push edi  +
call ds:KillTimer  +
call ds:GetForegroundWindow  +
cmp edi eax +
jz loc_10077E1  +
push ebx  +
xor ebx ebx +
cmp [esi+6Ch] bl +
jnz loc_10077E0  +
lea eax [ebp+hWnd] +
push eax  +
push ebx  +
mov byte ptr [esi+6Ch] 1 +
mov [ebp+hWnd] 30h +
call ds:GetGUIThreadInfo  +
test eax eax +
jz loc_10077C5  +
cmp [ebp-24h] ebx +
jz loc_10077C5  +
push dword ptr [ebp-24h]  +
mov ecx esi +
call sub_1005C90  +
test al al +
jnz loc_100779B  +
push ebx  +
push dword ptr [ebp-24h]  +
call ds:GetWindowThreadProcessId  +
cmp eax ebx +
jz loc_100779B  +
push eax  +
call ds:GetKeyboardLayout  +
mov edi eax +
jmp loc_100779E  +
mov edi [ebp+arg_0] +
cmp edi ebx +
jz loc_10077C5  +
cmp [esi+3Ch] edi +
jz loc_10077C5  +
mov ecx esi +
mov [esi+3Ch] edi +
call sub_1007315  +
mov ecx esi +
call sub_1005F06  +
mov ecx [esi+70h] +
cmp ecx ebx +
jz loc_10077C5  +
push edi  +
call sub_100B7DB  +
cmp [esi+6Fh] bl +
jz loc_10077DD  +
mov ecx esi +
call sub_1005D17  +
test al al +
jz loc_10077DD  +
mov ecx [esi+70h] +
call sub_100BAFB  +
mov [esi+6Ch] bl +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov ecx dword_1026B58 +
test ecx ecx +
jz locret_10077FB  +
jmp sub_100738F  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007453  +
test [ebp+arg_0] 1 +
jz loc_100781B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push 104h  +
lea eax [ebp+Dst] +
push eax  +
mov esi ecx +
call sub_10055CE  +
mov edi eax +
test edi edi +
jl loc_1007A4C  +
push ebx  +
lea eax [ebp+Dst] +
push eax  +
lea ecx [ebp+var_210] +
call loc_1005E48  +
lea eax [ebp+Dst] +
push eax  +
lea ecx [ebp+var_214] +
call loc_1005E48  +
cmp [ebp+var_210] 0 +
jz loc_10078EF  +
cmp [ebp+var_214] 0 +
jz loc_10078EF  +
mov ebx offset aFsdefinitions +
push ebx  +
lea ecx [ebp+var_210] +
call sub_1005E7F  +
mov edi eax +
test edi edi +
jl loc_10078F4  +
push ebx  +
lea ecx [ebp+var_214] +
call sub_1005E7F  +
mov edi eax +
test edi edi +
jl loc_10078F4  +
mov ecx esi +
call sub_1007155  +
mov edi eax +
test edi edi +
jl loc_10078F4  +
push [ebp+var_214]  +
mov ecx esi +
push [ebp+var_210]  +
call sub_1005EA5  +
mov edi eax +
test edi edi +
jl loc_10078F4  +
mov eax [esi+20h] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
jmp loc_10078F4  +
mov edi 8007000Eh +
push [ebp+var_214]  +
mov ebx ds:SysFreeString +
call ebx  +
push [ebp+var_210]  +
call ebx  +
test edi edi +
jl loc_1007A4B  +
lea eax [esi+70h] +
push eax  +
lea eax [ebp-215h] +
push eax  +
push 8  +
call sub_100BDFE  +
mov edi eax +
test edi edi +
jl loc_1007A4B  +
mov ecx esi +
call sub_10074AB  +
mov edi eax +
test edi edi +
jl loc_1007A4B  +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1007964  +
push dword ptr [esi+14h]  +
mov ecx eax +
push dword ptr [esi+18h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push esi  +
call sub_100AA3B  +
jmp loc_1007966  +
xor eax eax +
mov [esi+38h] eax +
test eax eax +
jz loc_100797E  +
mov ecx [esi+34h] +
push dword ptr [ecx+4]  +
mov ecx eax +
call sub_100A7CA  +
mov edi eax +
jmp loc_1007983  +
mov edi 8007000Eh +
test edi edi +
jl loc_1007A4B  +
mov ecx esi +
call sub_10060D0  +
mov edi eax +
test edi edi +
jl loc_1007A4B  +
push 0  +
push hInstance  +
push offset fn  +
push 0Eh  +
call ds:SetWindowsHookExW  +
mov hhk eax +
test eax eax +
jnz loc_10079D0  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10079CE  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_1007A4B  +
mov [ebp+var_210] offset dword_10018E0 +
lea ebx [esi+5Ch] +
mov eax [ebp+var_210] +
mov eax [eax] +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push offset pfnWinEventProc  +
push ecx  +
push eax  +
push eax  +
call ds:SetWinEventHook  +
mov [ebx] eax +
test eax eax +
jz loc_1007A1A  +
add [ebp+var_210] 4 +
add ebx 4 +
cmp [ebp+var_210] offset off_10018E8 +
jl loc_10079E1  +
jmp loc_1007A30  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1007A2E  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_1007A4B  +
mov ecx esi +
call sub_1006537  +
mov eax [esi+30h] +
mov eax [eax+60h] +
and al 20h +
cmp al 20h +
setz al  +
mov [esi+74h] al +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
pop ebp  +
jmp loc_1007585  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1007A96  +
and dword_1026B58 0 +
push 1  +
call sub_1007801  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B58 +
test ecx ecx +
jz loc_1007AB7  +
pop ebp  +
jmp loc_100771D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 80h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1007AEA  +
push [ebp+arg_8]  +
mov ecx eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1006B5F  +
mov esi eax +
jmp loc_1007AEC  +
xor esi esi +
test esi esi +
jz loc_1007B15  +
mov ecx esi +
call sub_1007827  +
mov edi eax +
test edi edi +
jl loc_1007B0A  +
mov eax [ebp+arg_C] +
mov dword_1026B58 esi +
mov [eax] esi +
jmp loc_1007B1A  +
push 1  +
mov ecx esi +
call sub_1007801  +
jmp loc_1007B1A  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1007B3E  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1007B80  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1007B90  +
mov ecx esi +
call sub_1007B27  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_1007BB2  +
push 80004005h  +
call loc_100540D  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0NativeHWNDHost@DirectUI@@QAE@XZ  +
xor eax eax +
mov [esi+20h] eax +
mov [esi+24h] al +
xor ecx ecx +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov dword ptr [esi] offset off_1001C64 +
mov byte ptr [esi+38h] 1 +
mov [esi+3Ah] cx +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
mov dword ptr [esi] offset off_1001C64 +
test eax eax +
jz loc_1007C64  +
push eax  +
call ds:DestroyWindow  +
and dword ptr [esi+20h] 0 +
mov ecx esi +
pop esi  +
jmp ??1NativeHWNDHost@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ds:GetWindowLongW +
push edi  +
mov edi ecx +
mov ebx [edi+4] +
push 0FFFFFFF0h  +
push ebx  +
call esi  +
push 0FFFFFFECh  +
push ebx  +
mov [ebp+dwStyle] eax +
call esi  +
mov edx [ebp+arg_4] +
push eax  +
xor ecx ecx +
push ecx  +
push [ebp+dwStyle]  +
mov [ebp+Rect.right] edx +
mov edx [ebp+arg_8] +
lea eax [ebp+Rect] +
push eax  +
mov [ebp+Rect.left] ecx +
mov [ebp+Rect.top] ecx +
mov [ebp+Rect.bottom] edx +
call ds:AdjustWindowRectEx  +
mov eax [ebp+Rect.right] +
mov ecx [ebp+Rect.bottom] +
sub eax [ebp+Rect.left] +
sub ecx [ebp+Rect.top] +
cmp [ebp+arg_C] 0 +
mov esi [ebp+arg_0] +
mov [esi] eax +
mov [esi+4] ecx +
jz loc_1007CFE  +
mov ebx ds:MulDiv +
push 60h  +
push dword ptr [edi+28h]  +
push eax  +
call ebx  +
add eax [esi] +
push 60h  +
push dword ptr [edi+2Ch]  +
cdq   +
push dword ptr [esi+4]  +
sub eax edx +
sar eax 1 +
mov [esi] eax +
call ebx  +
add eax [esi+4] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi+4] eax +
push 4Eh  +
call ds:GetSystemMetrics  +
test eax eax +
jle loc_1007D10  +
cmp [esi] eax +
jle loc_1007D10  +
mov [esi] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
push 0  +
mov edi ecx +
mov [ebp+var_1] 0 +
call ds:GetDC  +
mov ebx eax +
test ebx ebx +
jz loc_1007D5F  +
push esi  +
mov esi ds:GetDeviceCaps +
push 58h  +
push ebx  +
call esi  +
push 5Ah  +
push ebx  +
mov [edi+28h] eax +
call esi  +
push ebx  +
push 0  +
mov [edi+2Ch] eax +
call ds:ReleaseDC  +
mov [ebp+var_1] 1 +
pop esi  +
mov al [ebp+var_1] +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
lea edi [eax+edx] +
lea ebx [esi+ecx] +
cmp edi ebx +
jle loc_1007D8D  +
sub ecx edx +
mov eax ecx +
cmp esi eax +
jle loc_1007D93  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov [ebp+Point.x] eax +
mov eax [ebp+arg_4] +
mov [ebp+Point.y] eax +
lea eax [ebp+Point] +
push eax  +
push dword ptr [ecx+4]  +
call ds:ScreenToClient  +
lea eax [ebp+Point] +
push eax  +
call sub_10072FF  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push edi  +
mov edi ecx +
mov eax [edi+4] +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
test eax eax +
jz loc_1007E55  +
mov eax [ebp+Rect.left] +
mov ecx [ebp+Rect.top] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx eax +
sub eax [ebp+Rect.right] +
push esi  +
mov [ebp+var_8] eax +
mov eax ecx +
sub eax [ebp+Rect.bottom] +
mov dword ptr [ebp+Data] ecx +
cdq   +
mov esi eax +
lea eax [ebp+var_4] +
xor esi edx +
push eax  +
sub esi edx +
call sub_100950D  +
test eax eax +
jl loc_1007E53  +
cmp ebx [edi+3Ch] +
jz loc_1007E3B  +
mov eax [ebp+var_8] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax [edi+30h] +
jb loc_1007E3B  +
mov ecx [ebp+var_4] +
push ebx  +
push 0  +
call sub_100905C  +
mov eax dword ptr [ebp+Data] +
cmp eax [edi+40h] +
jz loc_1007E53  +
cmp esi [edi+34h] +
jb loc_1007E53  +
mov ecx [ebp+var_4] +
push eax  +
push 1  +
call sub_100905C  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
test eax eax +
jz loc_1007F03  +
push 0  +
call sub_10068AB  +
cmp [ebp+arg_0] 1 +
jz loc_1007EFE  +
mov eax [ebp+Rect.left] +
sub eax [ebp+Rect.right] +
and [ebp+arg_0] 0 +
cdq   +
mov edi eax +
mov eax [ebp+Rect.top] +
sub eax [ebp+Rect.bottom] +
xor edi edx +
sub edi edx +
cdq   +
xor eax edx +
sub eax edx +
mov [ebp+nNumber] eax +
lea eax [ebp+arg_0] +
push eax  +
call sub_100950D  +
test eax eax +
jl loc_1007F03  +
mov ebx ds:MulDiv +
cmp edi [esi+44h] +
jz loc_1007EDC  +
cmp edi [esi+30h] +
jb loc_1007EDC  +
push dword ptr [esi+28h]  +
push 60h  +
push edi  +
call ebx  +
mov ecx [ebp+arg_0] +
push eax  +
push 2  +
call sub_100905C  +
mov eax [ebp+nNumber] +
cmp eax [esi+48h] +
jz loc_1007F03  +
cmp eax [esi+34h] +
jb loc_1007F03  +
push dword ptr [esi+2Ch]  +
push 60h  +
push eax  +
call ebx  +
mov ecx [ebp+arg_0] +
push eax  +
push 3  +
call sub_100905C  +
jmp loc_1007F03  +
call sub_1006FC7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1007F27  +
mov edx [ecx+30h] +
mov [eax+18h] edx +
mov ecx [ecx+34h] +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 260h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+arg_0] bl +
jnz loc_1007F59  +
cmp [esi+24h] bl +
jz loc_10080FE  +
push edi  +
push 2Ch  +
lea eax [ebp+var_25C] +
push ebx  +
push eax  +
call memset  +
mov eax [esi+4] +
mov edi ds:SendMessageW +
add esp 0Ch +
mov [ebp+var_258] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 435h  +
push dword ptr [esi+20h]  +
mov [ebp+lParam] 30h +
mov [ebp+var_254] ebx +
call edi  +
test eax eax +
jz loc_10080FD  +
mov eax [esi+4] +
mov [ebp+hWnd] eax +
cmp [ebp+arg_0] bl +
jz loc_10080D7  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
mov [ebp+var_23C] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 439h  +
push dword ptr [esi+20h]  +
call edi  +
lea eax [ebp+lParam] +
push eax  +
push 1  +
push 411h  +
push dword ptr [esi+20h]  +
call edi  +
lea eax [ebp+var_218] +
push eax  +
mov [ebp+var_218] ebx +
call sub_100950D  +
test eax eax +
jl loc_1008055  +
mov ecx [ebp+var_218] +
lea eax [ebp+Data] +
push eax  +
push 5  +
call sub_10090DA  +
cmp dword ptr [ebp+Data] 3 +
jz loc_1008055  +
lea eax [ebp+Point] +
push eax  +
call ds:GetCursorPos  +
mov eax [ebp+Point.y] +
add [ebp+Point.x] 0Ah +
add eax 0Ah +
jmp loc_1008094  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
mov ecx [ebp+Rect.right] +
mov eax [ebp+Rect.left] +
add eax ecx +
mov ecx [ebp+Rect.top] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+Point.x] eax +
mov eax [ebp+Rect.bottom] +
add eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
movzx ecx word ptr [ebp+Point.x] +
mov [ebp+Point.y] eax +
movzx eax ax +
shl eax 10h +
or eax ecx +
push eax  +
push ebx  +
push 412h  +
push dword ptr [esi+20h]  +
call edi  +
call ds:GetDoubleClickTime  +
imul eax eax +
push ebx  +
push eax  +
push 7D2h  +
push [ebp+hWnd]  +
call ds:SetTimer  +
mov byte ptr [esi+24h] 1 +
jmp loc_10080FD  +
cmp [esi+24h] bl +
jz loc_10080FD  +
push 7D2h  +
push eax  +
call ds:KillTimer  +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 411h  +
push dword ptr [esi+20h]  +
call edi  +
mov [esi+24h] bl +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2 +
push esi  +
push edi  +
mov esi ecx +
jz loc_100813B  +
cmp [ebp+arg_0] 3 +
jnz loc_1008140  +
mov eax [esi+2Ch] +
push 60h  +
push eax  +
push [ebp+cy]  +
call ds:MulDiv  +
mov edi eax +
jmp loc_1008143  +
mov eax [esi+28h] +
jmp loc_100812B  +
mov edi [ebp+cy] +
mov ecx [ebp+arg_0] +
xor eax eax +
sub ecx eax +
jz loc_10081BC  +
dec ecx  +
jz loc_100819B  +
dec ecx  +
jz loc_100817A  +
dec ecx  +
jnz loc_10081DB  +
cmp [esi+48h] edi +
jz loc_10081DB  +
cmp [ebp+arg_8] al +
jz loc_1008175  +
push 6  +
push edi  +
push dword ptr [esi+44h]  +
push eax  +
push eax  +
push eax  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
mov [esi+48h] edi +
jmp loc_10081DB  +
cmp [esi+44h] edi +
jz loc_10081DB  +
cmp [ebp+arg_8] al +
jz loc_1008196  +
push 6  +
push dword ptr [esi+48h]  +
push edi  +
push eax  +
push eax  +
push eax  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
mov [esi+44h] edi +
jmp loc_10081DB  +
cmp [esi+40h] edi +
jz loc_10081DB  +
cmp [ebp+arg_8] al +
jz loc_10081B7  +
push 5  +
push eax  +
push eax  +
push edi  +
push dword ptr [esi+3Ch]  +
push eax  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
mov [esi+40h] edi +
jmp loc_10081DB  +
cmp [esi+3Ch] edi +
jz loc_10081DB  +
cmp [ebp+arg_8] al +
jz loc_10081D8  +
push 5  +
push eax  +
push eax  +
push dword ptr [esi+40h]  +
push edi  +
push eax  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
mov [esi+3Ch] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026B94 +
push 1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008113  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1026B94 +
mov eax [eax+4] +
sub esp 54h +
push esi  +
mov esi ds:GetWindowRect +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call esi  +
test eax eax +
jz loc_1008316  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+hWnd]  +
call esi  +
test eax eax +
jz loc_1008316  +
mov ecx [ebp+var_1C] +
push ebx  +
mov ebx [ebp+Rect.left] +
push edi  +
mov edi [ebp+var_24] +
mov eax ecx +
sub eax edi +
cdq   +
mov esi eax +
xor eax eax +
mov [ebp+wndpl.flags] eax +
mov [ebp+wndpl.ptMaxPosition.x] eax +
mov [ebp+wndpl.ptMaxPosition.y] eax +
mov [ebp+wndpl.ptMinPosition.x] eax +
mov [ebp+wndpl.ptMinPosition.y] eax +
mov eax [ebp+var_20] +
sub eax [ebp+var_28] +
xor esi edx +
sub esi edx +
cdq   +
xor eax edx +
sub eax edx +
add eax ebx +
mov [ebp+wndpl.rcNormalPosition.right] eax +
mov eax [ebp+Rect.bottom] +
mov [ebp+wndpl.rcNormalPosition.top] edi +
mov edi [ebp+Rect.top] +
mov [ebp+wndpl.rcNormalPosition.left] ebx +
mov ebx ds:GetSystemMetrics +
add eax esi +
push 4Dh  +
mov [ebp+wndpl.length] 2Ch +
mov [ebp+wndpl.showCmd] 1 +
mov [ebp+wndpl.rcNormalPosition.bottom] ecx +
sub edi esi +
mov [ebp+var_8] eax +
call ebx  +
push 4Fh  +
mov [ebp+var_4] eax +
call ebx  +
add eax [ebp+var_4] +
cmp edi [ebp+var_4] +
jle loc_10082BD  +
mov eax [ebp+Rect.top] +
mov [ebp+wndpl.rcNormalPosition.bottom] eax +
mov [ebp+wndpl.rcNormalPosition.top] edi +
jmp loc_10082CD  +
mov ecx [ebp+var_8] +
cmp ecx eax +
jge loc_10082CD  +
mov eax [ebp+Rect.bottom] +
mov [ebp+wndpl.rcNormalPosition.top] eax +
mov [ebp+wndpl.rcNormalPosition.bottom] ecx +
mov eax [ebp+wndpl.rcNormalPosition.left] +
mov edi ds:MonitorFromPoint +
push 0  +
push [ebp+wndpl.rcNormalPosition.bottom]  +
push eax  +
call edi  +
test eax eax +
jnz loc_10082ED  +
mov eax [ebp+Rect.bottom] +
mov [ebp+wndpl.rcNormalPosition.bottom] eax +
sub eax esi +
mov [ebp+wndpl.rcNormalPosition.top] eax +
mov eax [ebp+wndpl.rcNormalPosition.left] +
push 0  +
push [ebp+wndpl.rcNormalPosition.top]  +
push eax  +
call edi  +
pop edi  +
pop ebx  +
test eax eax +
jnz loc_1008309  +
mov eax [ebp+Rect.top] +
mov [ebp+wndpl.rcNormalPosition.top] eax +
add eax esi +
mov [ebp+wndpl.rcNormalPosition.bottom] eax +
lea eax [ebp+wndpl] +
push eax  +
push [ebp+hWnd]  +
call ds:SetWindowPlacement  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call ds:GetForegroundWindow  +
mov edi eax +
test edi edi +
jz loc_1008347  +
cmp edi [esi+4] +
jz loc_1008347  +
push edi  +
call ds:IsWindow  +
test eax eax +
jz loc_1008347  +
mov [esi+18h] edi +
jmp loc_100834B  +
and dword ptr [esi+18h] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jz loc_100837B  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_100837B  +
push dword ptr [esi+18h]  +
call ds:SetForegroundWindow  +
push 0FFFFFFFFh  +
call ds:AllowSetForegroundWindow  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 4Ch  +
call sub_1004B07  +
mov esi eax +
test esi esi +
jz loc_1008399  +
mov ecx esi +
call sub_1007C0F  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007C47  +
test byte ptr [ebp+8] 1 +
jz loc_10083C6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 64h  +
pop eax  +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
xor ebx ebx +
lea eax [ebp+var_4] +
push eax  +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
mov [ebp+var_4] ebx +
call sub_100950D  +
mov edi eax +
cmp edi ebx +
jl loc_1008556  +
mov ecx [ebp+var_4] +
lea eax [ebp+cy] +
push eax  +
push 2  +
call sub_10090DA  +
mov edi eax +
cmp edi ebx +
jl loc_1008556  +
push ebx  +
push [ebp+cy]  +
mov ecx esi +
push 2  +
call sub_1008113  +
mov ecx [ebp+var_4] +
lea eax [ebp+Data] +
push eax  +
push 3  +
call sub_10090DA  +
mov edi eax +
cmp edi ebx +
jl loc_1008556  +
push ebx  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push 3  +
call sub_1008113  +
push 6  +
push dword ptr [esi+48h]  +
push dword ptr [esi+44h]  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
mov edi ds:GetSystemMetrics +
push 4Eh  +
call edi  +
push 4Fh  +
mov [ebp+pt.y] eax +
call edi  +
push 4Ch  +
mov [ebp+var_24] eax +
call edi  +
push 4Dh  +
mov [ebp+var_14] eax +
call edi  +
mov ecx [ebp+var_4] +
mov [ebp+var_18] eax +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
mov [ebp+var_8] ebx +
call sub_10090DA  +
mov edi eax +
cmp edi ebx +
jl loc_1008556  +
push [ebp+pt.y]  +
mov ecx esi +
push [ebp+var_14]  +
push [ebp+cy]  +
push [ebp+var_8]  +
call sub_1007D6B  +
mov ecx [ebp+var_4] +
mov [ebp+pt.x] eax +
lea eax [ebp+var_8] +
push eax  +
push 1  +
call sub_10090DA  +
mov edi eax +
cmp edi ebx +
jl loc_1008556  +
push [ebp+var_24]  +
mov ecx esi +
push [ebp+var_18]  +
push dword ptr [ebp+Data]  +
push [ebp+var_8]  +
call sub_1007D6B  +
push ebx  +
push eax  +
push [ebp+pt.x]  +
mov [ebp+pt.y] eax +
call ds:MonitorFromPoint  +
test eax eax +
jnz loc_1008528  +
mov eax off_1026000 +
cmp eax offset off_1026000 +
jz loc_100851D  +
test byte ptr [eax+1Ch] 10h +
jz loc_100851D  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push offset dword_1001BEC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1007BDD  +
mov ecx [ebp+var_18] +
mov eax [ebp+var_14] +
mov [ebp+pt.y] ecx +
jmp loc_100852B  +
mov eax [ebp+pt.x] +
push ebx  +
push eax  +
push ebx  +
mov ecx esi +
call sub_1008113  +
push ebx  +
push [ebp+pt.y]  +
mov ecx esi +
push 1  +
call sub_1008113  +
push 5  +
push ebx  +
push ebx  +
push dword ptr [esi+40h]  +
push dword ptr [esi+3Ch]  +
push ebx  +
push dword ptr [esi+4]  +
call ds:SetWindowPos  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 0  +
mov esi ecx +
call sub_1007F30  +
mov esi [esi+4] +
push esi  +
call ds:IsIconic  +
test eax eax +
jz loc_100858A  +
push 9  +
push esi  +
call ds:ShowWindow  +
push 1  +
push [ebp+arg_0]  +
call sub_1006895  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
xor ecx ecx +
inc ecx  +
cmp cx ax +
jz loc_10085E5  +
shr eax 10h +
mov ecx 201h +
cmp ax cx +
jz loc_10085C6  +
add ecx 3 +
cmp ax cx +
jnz loc_10085F6  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_10085DA  +
mov ecx esi +
call sub_1008320  +
mov dword ptr [esi+1Ch] 1 +
push dword ptr [esi+4]  +
call ds:SetForegroundWindow  +
jmp loc_10085F6  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_10085F6  +
and dword ptr [esi+1Ch] 0 +
mov ecx esi +
call sub_1008353  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 13ECh +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
push eax  +
jnz loc_100861D  +
call sub_100A710  +
jmp loc_1008622  +
call sub_100BF42  +
mov edi eax +
test edi edi +
jz loc_100863A  +
and dword ptr [esi+1Ch] 0 +
mov ecx esi +
call sub_1008320  +
push edi  +
call ds:SetForegroundWindow  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
sub esp 70h +
push ebx  +
cmp edx 7D2h +
jz loc_1008746  +
cmp edx 7D3h +
jz loc_100873D  +
mov eax 7D4h +
cmp edx eax +
jz loc_100868F  +
jbe loc_100874F  +
cmp edx 7D6h +
ja loc_100874F  +
push edx  +
call sub_100700B  +
jmp loc_100874F  +
push eax  +
push dword ptr [ecx+4]  +
call ds:KillTimer  +
lea eax [ebp+pgui] +
push eax  +
xor ebx ebx +
push ebx  +
mov [ebp+pgui.cbSize] 30h +
call ds:GetGUIThreadInfo  +
test eax eax +
jz loc_100874F  +
cmp [ebp+pgui.hwndCapture] ebx +
jz loc_100874F  +
push esi  +
push edi  +
lea eax [ebp+Point] +
push eax  +
call ds:GetCursorPos  +
push 34h  +
lea eax [ebp+pInputs.anonymous_0] +
push ebx  +
push eax  +
mov [ebp+pInputs.type] ebx +
call memset  +
add esp 0Ch +
xor edi edi +
lea esi [ebp+pInputs.anonymous_0+0Ch] +
xor eax eax +
cmp edi 1 +
setnl al  +
mov [esi-10h] ebx +
lea eax [eax+eax+2] +
or eax 8000h +
mov [esi] eax +
call ds:GetMessageExtraInfo  +
mov [esi+8] eax +
mov eax [ebp+Point.x] +
mov [esi-0Ch] eax +
mov eax [ebp+Point.y] +
mov [esi-8] eax +
inc edi  +
add esi 1Ch +
cmp edi 2 +
jl loc_10086E1  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 2  +
call ds:SendInput  +
push 40005h  +
push hInstance  +
push 834h  +
call PlaySoundW  +
pop edi  +
pop esi  +
jmp loc_100874F  +
push 0  +
call sub_1007AA2  +
jmp loc_100874F  +
xor ebx ebx +
push ebx  +
push ebx  +
call sub_1007F30  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push offset SubKey  +
mov edi ecx +
push 80000001h  +
lea ecx [ebp+var_218] +
mov [ebp+var_218] esi +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
call sub_1007B45  +
test eax eax +
jnz loc_10087F3  +
push 104h  +
lea eax [ebp+pszPath] +
push eax  +
push esi  +
call ds:GetModuleFileNameW  +
test eax eax +
jbe loc_10087E8  +
xor eax eax +
mov [ebp+var_6] ax +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathFindFileNameW  +
lea ecx [ebp+pszPath] +
cmp eax ecx +
jz loc_10087E8  +
push 1  +
push eax  +
push eax  +
lea ecx [ebp+var_218] +
call sub_1007B9A  +
lea ecx [ebp+var_218] +
call sub_1007B27  +
push esi  +
push esi  +
push 2  +
push dword ptr [edi+4]  +
call ds:SendMessageW  +
lea ecx [ebp+var_218] +
call sub_1007B27  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
mov [ebp+var_4] 80004005h +
mov [esi+1Ch] edi +
call sub_1007D1E  +
test al al +
jz loc_1008983  +
mov ecx esi +
call sub_1008320  +
push [ebp+arg_2C]  +
mov ecx esi +
push [ebp+arg_28]  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@NativeHWNDHost@DirectUI@@QAEJPBG0PAUHWND__@@PAUHICON__@@HHHHHHPAUHINSTANCE__@@I@Z  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_1008983  +
push edi  +
push 0C6h  +
push 32Ch  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1007C72  +
push [ebp+var_8]  +
push 2  +
call sub_1008F9B  +
push [ebp+var_4]  +
push 3  +
call sub_1008F9B  +
push 1  +
push 86h  +
push 311h  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1007C72  +
mov ecx [eax] +
mov [esi+30h] ecx +
mov eax [eax+4] +
mov ecx esi +
mov [esi+34h] eax +
call sub_10083D2  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_1008983  +
push ebx  +
mov ebx [esi+4] +
push 5  +
call ds:GetStockObject  +
push eax  +
push 0FFFFFFF6h  +
push ebx  +
call ds:SetClassLongW  +
push offset aAccessibility_  +
call ds:GlobalAddAtomW  +
xor ecx ecx +
mov [esi+3Ah] ax +
cmp cx ax +
jz loc_1008918  +
movzx eax ax +
push 1  +
push eax  +
push ebx  +
call ds:SetPropW  +
push edi  +
push hInstance  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push 80000042h  +
push edi  +
push offset aTooltips_class  +
push 8  +
call sub_100D189  +
mov ebx eax +
mov [esi+20h] ebx +
cmp ebx edi +
jz loc_1008982  +
push 2Ch  +
lea eax [ebp+var_34] +
push edi  +
push eax  +
call memset  +
mov eax [esi+4] +
mov [ebp+var_30] eax +
mov eax hInstance +
add esp 0Ch +
mov [ebp+var_18] eax +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 432h  +
push ebx  +
mov [ebp+lParam] 30h +
mov [ebp+var_34] 122h +
mov [ebp+var_2C] edi +
mov [ebp+var_14] edi +
call ds:SendMessageW  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx dword ptr [ebp+arg_4] +
movzx eax cx +
mov ebx 13ECh +
sub eax ebx +
mov [ebp+var_4] edi +
jz loc_1008A8D  +
dec eax  +
dec eax  +
jz loc_1008A47  +
dec eax  +
jz loc_10089FA  +
dec eax  +
jz loc_10089EE  +
dec eax  +
jz loc_10089D7  +
dec eax  +
jnz loc_1008AFA  +
push dword ptr [ebp+SrcStr]  +
call sub_100BAC7  +
jmp loc_1008AFA  +
cmp dword ptr [ebp+SrcStr] 0 +
jz loc_1008AFA  +
push dword ptr [ebp+SrcStr]  +
call sub_1006FD7  +
jmp loc_1008AFA  +
push 13F0h  +
mov ecx edi +
jmp loc_1008AF5  +
xor eax eax +
shr ecx 10h +
inc eax  +
cmp ax cx +
jnz loc_1008AFA  +
mov esi [edi+4] +
call ds:GetForegroundWindow  +
cmp esi eax +
setz [ebp+arg_4]  +
movzx eax [ebp+arg_4] +
neg eax  +
sbb eax eax +
and eax 410h +
push eax  +
push dword ptr [ebp+arg_4]  +
mov ecx edi +
call sub_1007F30  +
cmp [ebp+arg_4] 0 +
jnz loc_1008AFA  +
push dword ptr [ebp+SrcStr]  +
call sub_100BDE0  +
jmp loc_1008AFA  +
call sub_100C1E3  +
test al al +
jnz loc_1008AFA  +
lea eax [ebp+SrcStr] +
push eax  +
push offset stru_1001D1C  +
push 1  +
push 0  +
push offset stru_1001D0C  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1008AFA  +
mov eax dword ptr [ebp+SrcStr] +
mov ecx [eax] +
push offset aMshelpWindows?  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax dword ptr [ebp+SrcStr] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1008AFA  +
cmp dword_1026ADC 0 +
jz loc_1008AF1  +
mov al byte_1026AE0 +
cmp al 4 +
jnb loc_1008AA3  +
test al al +
jnz loc_1008AF1  +
mov eax dword_1026AC8 +
mov ecx dword_1026ACC +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1008AF1  +
mov eax dword_1026AD0 +
mov edi dword_1026AD4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1008AF1  +
cmp edx edi +
jnz loc_1008AF1  +
push offset dword_1001648  +
push dword_1026AB4  +
push dword_1026AB0  +
call sub_1004479  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_1008600  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_210] eax +
cmp dword_1026B94 esi +
jnz loc_1008BBB  +
call sub_1008382  +
mov edi eax +
cmp edi esi +
jz loc_1008BB4  +
xor eax eax +
push 104h  +
mov [ebp+Buffer] ax +
lea eax [ebp+Buffer] +
push eax  +
push 3E8h  +
push hInstance  +
call ds:LoadStringW  +
push 11h  +
push esi  +
push 0CE0000h  +
push 8040008h  +
push esi  +
push esi  +
push 64h  +
push 64h  +
push 1  +
push hInstance  +
call ds:LoadIconW  +
push eax  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push offset ClassName  +
mov ecx edi +
call sub_100881E  +
mov ebx eax +
cmp ebx esi +
jl loc_1008BAA  +
mov dword_1026B94 edi +
jmp loc_1008BBD  +
mov ecx edi +
call ?Destroy@NativeHWNDHost@DirectUI@@QAEXXZ  +
jmp loc_1008BBD  +
mov ebx 8007000Eh +
jmp loc_1008BBD  +
xor ebx ebx +
mov eax [ebp+var_210] +
mov ecx dword_1026B94 +
mov [eax] ecx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
mov ecx [ebp+8] +
push edi  +
mov edi [ebp+14h] +
inc ebx  +
xor edx edx +
mov eax 111h +
mov [ebp-4] ebx +
mov [edi] edx +
cmp ecx eax +
ja loc_1008DA8  +
jz loc_1008D95  +
cmp ecx 1Ah +
ja loc_1008CFB  +
jz loc_1008DEE  +
sub ecx 3 +
jz loc_1008CEF  +
dec ecx  +
dec ecx  +
jz loc_1008CE0  +
dec ecx  +
jz loc_1008C8A  +
sub ecx 0Ah +
jz loc_1008C5A  +
dec ecx  +
jz loc_1008D47  +
sub ecx 5 +
jnz loc_1008D8D  +
mov ecx esi +
call sub_1008759  +
and dword ptr [edi] 0 +
jmp loc_1008EEB  +
movzx eax word ptr [esi+3Ah] +
mov edi [esi+4] +
xor ecx ecx +
cmp cx ax +
jz loc_1008C7E  +
movzx eax ax +
push eax  +
push edi  +
call ds:RemovePropW  +
movzx eax word ptr [esi+3Ah] +
push eax  +
call ds:GlobalDeleteAtom  +
push edi  +
call ds:DestroyWindow  +
jmp loc_1008E42  +
cmp [ebp+0Ch] ebx +
jz loc_1008C99  +
cmp dword ptr [ebp+0Ch] 2 +
jnz loc_1008EEB  +
cmp [ebp+10h] edx +
jz loc_1008CBE  +
call sub_10098C9  +
cmp [ebp+10h] eax +
jz loc_1008CB2  +
call sub_100BE72  +
cmp [ebp+10h] eax +
jnz loc_1008CBE  +
mov ecx esi +
call sub_1008353  +
jmp loc_1008E37  +
call sub_100BE72  +
test eax eax +
jnz loc_1008CD4  +
call sub_10098C9  +
test eax eax +
jz loc_1008EEB  +
push eax  +
call ds:SetForegroundWindow  +
jmp loc_1008EEB  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1007E5D  +
jmp loc_1008EEB  +
mov ecx esi +
call sub_1007DD1  +
jmp loc_1008EEB  +
sub ecx 1Ch +
jz loc_1008D5D  +
sub ecx 4 +
jz loc_1008D4E  +
dec ecx  +
jz loc_1008D33  +
sub ecx 3 +
jz loc_1008D24  +
sub ecx 0BDh +
jnz loc_1008D8D  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1008562  +
jmp loc_1008EEB  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1007F0F  +
jmp loc_1008EEB  +
cmp [ebp+10h] bx +
jnz loc_1008D47  +
mov dword ptr [edi] 3 +
mov [ebp-4] edx +
jmp loc_1008EEB  +
mov [edi] ebx +
jmp loc_1008EEB  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_100859E  +
jmp loc_1008EEB  +
cmp [ebp+0Ch] edx +
jnz loc_1008EEB  +
push edx  +
push edx  +
mov ecx esi +
call sub_1007F30  +
xor ebx ebx +
cmp [esi+18h] ebx +
jz loc_1008D8B  +
call sub_10098C9  +
test eax eax +
jnz loc_1008D88  +
call sub_100BE72  +
test eax eax +
jz loc_1008D8B  +
mov [esi+18h] ebx +
mov [edi] ebx +
mov [ebp-4] ebx +
jmp loc_1008EEB  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1008991  +
jmp loc_1008EEB  +
mov eax 401h +
cmp ecx eax +
ja loc_1008E4B  +
jz loc_1008E3C  +
sub ecx 113h +
jz loc_1008E2D  +
sub ecx 3 +
jz loc_1008E25  +
sub ecx 11Bh +
jz loc_1008E1B  +
dec ecx  +
jz loc_1008E69  +
sub ecx 0E8h +
jz loc_1008DEE  +
sub ecx 4 +
jnz loc_1008D8D  +
call sub_10077EC  +
jmp loc_1008EEB  +
mov ecx esi +
call sub_1007D1E  +
push ebx  +
push 86h  +
push 311h  +
lea eax [ebp-0Ch] +
push eax  +
mov ecx esi +
call sub_1007C72  +
mov ecx [eax] +
mov [esi+30h] ecx +
mov eax [eax+4] +
mov [esi+34h] eax +
jmp loc_1008EEB  +
call sub_1006AD7  +
jmp loc_1008EEB  +
mov [esi+1Ch] edx +
jmp loc_1008EEB  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1008645  +
and dword ptr [edi] 0 +
jmp loc_1008E42  +
push ebx  +
call sub_10068AB  +
and dword ptr [ebp-4] 0 +
jmp loc_1008EEB  +
sub ecx 403h +
jz loc_1008EE3  +
dec ecx  +
jz loc_1008E87  +
sub ecx 6 +
jz loc_1008E78  +
dec ecx  +
jz loc_1008E72  +
dec ecx  +
jnz loc_1008D8D  +
mov ecx esi +
call sub_1008353  +
jmp loc_1008EEB  +
push edx  +
jmp loc_1008D18  +
***
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_1007D9F  +
jmp loc_1008EEB  +
mov ebx [ebp+0Ch] +
cmp ebx 101h +
jz loc_1008E9A  +
cmp ebx 105h +
jnz loc_1008E9E  +
mov byte ptr [esi+38h] 1 +
push dword ptr [ebp+10h]  +
push ebx  +
call sub_1006872  +
mov [edi] eax +
cmp eax 1 +
jnz loc_1008E42  +
cmp ebx 100h +
jz loc_1008EBE  +
cmp ebx 104h +
jnz loc_1008E42  +
cmp byte ptr [esi+38h] 0 +
jz loc_1008E42  +
push 0  +
push 0  +
push 40Bh  +
push dword ptr [esi+4]  +
mov byte ptr [esi+38h] 0 +
call ds:PostMessageW  +
jmp loc_1008E42  +
***
push dword ptr [ebp+10h]  +
call sub_1007AA2  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
push eax  +
call sub_1005435  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1008F52  +
mov ecx esi +
call sub_1007B27  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz locret_1008F92  +
mov eax [ebp+lpData] +
sub eax 4 +
neg eax  +
sbb eax eax +
and eax 0Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0Fh +
jnb loc_1008FB4  +
mov ecx [ebp+arg_4] +
imul eax eax +
mov dword_1026064[eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx 0Fh +
jnb loc_1008FD5  +
imul ecx ecx +
mov eax dword_1026064[ecx] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jb loc_1008FF5  +
push 80070057h  +
call loc_100540D  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1008EFA  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ecx+10h] +
xor esi esi +
test edi edi +
jle loc_1009051  +
push ebx  +
lea ebx [ecx+0Ch] +
push esi  +
mov ecx ebx +
call sub_1008FDE  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax]  +
inc esi  +
cmp esi edi +
jl loc_100903B  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0Fh +
push esi  +
push edi  +
mov esi ecx +
jnb loc_10090C8  +
xor edi edi +
push edi  +
push edi  +
push 2001Fh  +
push edi  +
push edi  +
push offset aSoftwareMicros  +
push 80000001h  +
call sub_1007B45  +
test eax eax +
jnz loc_10090C8  +
mov eax [ebp+arg_0] +
imul eax eax +
mov eax off_1026060[eax] +
push 4  +
lea ecx [ebp+Data] +
push ecx  +
push 4  +
push edi  +
push eax  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_10090BA  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1009027  +
jmp loc_10090BF  +
mov edi 80004005h +
mov ecx esi +
call sub_1007B27  +
jmp loc_10090CD  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi dword ptr [ebp+Data] +
and dword ptr [edi] 0 +
mov ebx ecx +
cmp esi 0Fh +
jnb loc_1009171  +
push 2001Fh  +
push offset aSoftwareMicros  +
push 80000001h  +
call sub_1008F20  +
test eax eax +
jnz loc_1009171  +
and dword ptr [ebp+Data] eax +
imul esi esi +
lea eax [ebp+Data] +
push eax  +
push off_1026060[esi]  +
mov ecx ebx +
call sub_1008F5C  +
test eax eax +
jnz loc_1009163  +
cmp dword_1026068[esi] eax +
jz loc_100915A  +
mov ecx dword ptr [ebp+Data] +
mov eax dword_102606C[esi] +
cmp ecx eax +
jnb loc_100913E  +
mov esi eax +
jmp loc_1009148  +
mov esi dword_1026070[esi] +
cmp ecx esi +
jbe loc_100915A  +
mov dword ptr [ebp+Data] esi +
cmp esi ecx +
jz loc_100915A  +
push esi  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_100905C  +
mov eax dword ptr [ebp+Data] +
mov [edi] eax +
xor esi esi +
jmp loc_1009168  +
mov esi 80004005h +
mov ecx ebx +
call sub_1007B27  +
jmp loc_1009176  +
mov esi 80004005h +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
test eax eax +
jz locret_1009192  +
push eax  +
call ds:__imp_free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_1009227  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jnz loc_10091D4  +
cmp eax edi +
jbe loc_10091BA  +
mov edi eax +
push 4  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_10091CF  +
xor al al +
jmp loc_1009229  +
mov [esi+8] edi +
jmp loc_1009227  +
test eax eax +
jnz loc_10091F3  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_10091E8  +
push 4  +
pop eax  +
jmp loc_10091F3  +
mov ecx 400h +
cmp eax ecx +
jbe loc_10091F3  +
mov eax ecx +
add eax edx +
mov ebx eax +
cmp edi eax +
jb loc_10091FD  +
mov ebx edi +
push 4  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_10091CB  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_1009003  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
mov [esi] edi +
mov [esi+8] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_1009383  +
push edi  +
lea eax [ebp+Data] +
push eax  +
xor edi edi +
push 4  +
mov ecx ebx +
mov dword ptr [ebp+Data] edi +
call sub_10090DA  +
test eax eax +
jl loc_1009271  +
push dword ptr [ebp+Data]  +
push 0EACh  +
push edi  +
call WinSqmSetDWORD  +
lea eax [ebp+Data] +
push eax  +
push 0Eh  +
mov ecx ebx +
call sub_10090DA  +
test eax eax +
jl loc_1009290  +
push dword ptr [ebp+Data]  +
push 1ACCh  +
push edi  +
call WinSqmSetDWORD  +
lea eax [ebp+var_8] +
push eax  +
push 5  +
mov ecx ebx +
call sub_10090DA  +
test eax eax +
jl loc_1009363  +
push [ebp+var_8]  +
push 0EB2h  +
push edi  +
call WinSqmSetDWORD  +
cmp [ebp+var_8] 2 +
jnz loc_10092E1  +
lea eax [ebp+Data] +
push eax  +
push 6  +
mov ecx ebx +
call sub_10090DA  +
test eax eax +
jl loc_1009363  +
push dword ptr [ebp+Data]  +
push 0EADh  +
push edi  +
call WinSqmSetDWORD  +
jmp loc_1009363  +
cmp [ebp+var_8] 3 +
jnz loc_1009363  +
lea eax [ebp+Data] +
push eax  +
push 7  +
mov ecx ebx +
call sub_10090DA  +
test eax eax +
jl loc_1009306  +
push dword ptr [ebp+Data]  +
push 0EAEh  +
push edi  +
call WinSqmSetDWORD  +
push esi  +
lea eax [ebp+Data] +
push eax  +
push 0Ah  +
mov ecx ebx +
xor esi esi +
call sub_10090DA  +
test eax eax +
jl loc_100933C  +
mov esi dword ptr [ebp+Data] +
lea eax [ebp+Data] +
push eax  +
push 0Bh  +
mov ecx ebx +
call sub_10090DA  +
test eax eax +
jl loc_100933C  +
push dword ptr [ebp+Data]  +
push 0EAFh  +
push edi  +
call WinSqmSetDWORD  +
lea eax [ebp+Data] +
push eax  +
push 8  +
mov ecx ebx +
call sub_10090DA  +
test eax eax +
jl loc_1009356  +
cmp dword ptr [ebp+Data] 1 +
jnz loc_1009356  +
or esi 2 +
push esi  +
push 0EB0h  +
push edi  +
call WinSqmSetDWORD  +
pop esi  +
lea eax [ebp+Data] +
push eax  +
push 0Ch  +
mov ecx ebx +
call sub_10090DA  +
test eax eax +
jl loc_1009382  +
push dword ptr [ebp+Data]  +
push 1114h  +
push edi  +
call WinSqmSetDWORD  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
cmp edi [esi+8] +
jb loc_10093B3  +
lea eax [edi+1] +
push eax  +
call sub_1009198  +
test al al +
jnz loc_10093B3  +
push 8007000Eh  +
call loc_100540D  +
mov eax [esi] +
lea eax [eax+edi*4] +
test eax eax +
jz loc_10093C3  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov [eax] ecx +
inc dword ptr [esi+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx eax +
test edx edx +
jz loc_10093E7  +
mov ecx edx +
call sub_1009572  +
mov eax edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jz loc_1009403  +
mov [esi+0Ch] eax +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1009424  +
mov eax [esi] +
test eax eax +
jz loc_100941A  +
push eax  +
call ds:__imp_free  +
and [esi] edi +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
jmp loc_1009436  +
cmp edi [esi+8] +
jbe loc_1009433  +
push edi  +
call sub_1009198  +
test al al +
jz loc_1009438  +
mov [esi+4] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] ecx +
xor ebx ebx +
mov esi offset dword_1026064 +
mov ecx [ebp+var_4] +
lea eax [ebp+Data] +
push eax  +
push ebx  +
call sub_10090DA  +
test eax eax +
jge loc_100947B  +
push dword ptr [esi]  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_100905C  +
mov edi eax +
test edi edi +
jl loc_1009490  +
add esi 14h +
inc ebx  +
cmp esi offset unk_1026190 +
jl loc_1009459  +
test edi edi +
jl loc_1009490  +
call sub_1009680  +
mov ecx [ebp+var_4] +
call sub_1009235  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
add ecx 0Ch +
call sub_100938B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 0FFFFFFFFh  +
lea edi [esi+0Ch] +
push 0  +
mov ecx edi +
call sub_10093EF  +
mov ecx edi +
call sub_1009184  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_1007B27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10094BE  +
test [ebp+arg_0] 1 +
jz loc_1009501  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1026BCC +
push esi  +
test eax eax +
jnz loc_1009558  +
call sub_10093D3  +
mov dword_1026BCC eax +
test eax eax +
jz loc_1009551  +
mov ecx eax +
call sub_1009443  +
mov esi eax +
test esi esi +
jge loc_100955C  +
mov ecx dword_1026BCC +
test ecx ecx +
jz loc_1009548  +
push 1  +
call sub_10094E7  +
xor eax eax +
mov dword_1026BCC eax +
jmp loc_1009561  +
mov esi 8007000Eh +
jmp loc_1009561  +
xor esi esi +
jmp loc_1009561  +
mov eax dword_1026BCC +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+2Ch] +
mov [ecx] edx +
mov edx [eax+3Ch] +
mov [ecx+4] edx +
mov edx [eax+100h] +
mov [ecx+8] edx +
mov edx [eax+1ECh] +
mov [ecx+0Ch] edx +
mov edx [eax+104h] +
mov [ecx+10h] edx +
mov edx [eax+108h] +
mov [ecx+14h] edx +
cmp dword ptr [eax+1E8h] 0 +
jz loc_10095D5  +
push 3  +
pop eax  +
jmp loc_10095E0  +
xor edx edx +
cmp [eax+38h] edx +
setnz dl  +
inc edx  +
mov eax edx +
mov [ecx+18h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_100950D  +
test eax eax +
jl loc_1009678  +
push dword ptr [esi]  +
mov ecx [ebp+var_4] +
push 4  +
call sub_100905C  +
test eax eax +
jl loc_1009678  +
push dword ptr [esi+4]  +
mov ecx [ebp+var_4] +
push 6  +
call sub_100905C  +
test eax eax +
jl loc_1009678  +
push dword ptr [esi+8]  +
mov ecx [ebp+var_4] +
push 0Bh  +
call sub_100905C  +
test eax eax +
jl loc_1009678  +
push dword ptr [esi+0Ch]  +
mov ecx [ebp+var_4] +
push 7  +
call sub_100905C  +
test eax eax +
jl loc_1009678  +
push dword ptr [esi+10h]  +
mov ecx [ebp+var_4] +
push 0Ah  +
call sub_100905C  +
test eax eax +
jl loc_1009678  +
push dword ptr [esi+14h]  +
mov ecx [ebp+var_4] +
push 8  +
call sub_100905C  +
test eax eax +
jl loc_1009678  +
push dword ptr [esi+18h]  +
mov ecx [ebp+var_4] +
push 5  +
call sub_100905C  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ds:RegGetValueW +
push esi  +
push edi  +
lea eax [ebp+var_214] +
push eax  +
lea eax [ebp+var_218] +
push eax  +
push 0  +
push 10h  +
push offset ValueName  +
mov edi offset aSoftwareMicr_1 +
push edi  +
mov esi 80000001h +
push esi  +
mov [ebp+var_210] 1F8h +
mov [ebp+var_214] 4 +
mov [ebp+var_1FE] 0 +
mov [ebp+var_1FD] 0 +
call ebx  +
test eax eax +
jnz loc_1009734  +
push 20006h  +
push edi  +
push esi  +
lea ecx [ebp+hKey] +
mov [ebp+var_1FE] 1 +
mov [ebp+hKey] eax +
mov [ebp+var_208] eax +
mov [ebp+var_204] eax +
call sub_1008F20  +
test eax eax +
jnz loc_1009729  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
lea ecx [ebp+hKey] +
call sub_1007B27  +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+var_1FC] +
push eax  +
push 0  +
push 8  +
push offset aSetting  +
push edi  +
push esi  +
call ebx  +
test eax eax +
jnz loc_100979E  +
push 20006h  +
push edi  +
push esi  +
lea ecx [ebp+hKey] +
mov [ebp+var_1FD] 1 +
mov [ebp+hKey] eax +
mov [ebp+var_208] eax +
mov [ebp+var_204] eax +
call sub_1008F20  +
test eax eax +
jnz loc_1009793  +
push offset aSetting  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
lea ecx [ebp+hKey] +
call sub_1007B27  +
cmp [ebp+var_1FE] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10097F3  +
cmp [ebp+var_214] 4 +
jnz loc_10097F3  +
cmp [ebp+var_218] 3 +
jnz loc_10097F3  +
cmp [ebp+var_1FD] 0 +
jz loc_10097F3  +
cmp [ebp+var_210] 1F8h +
jnz loc_10097F3  +
lea ecx [ebp+var_234] +
call sub_1009572  +
lea eax [ebp+var_1FC] +
push eax  +
lea ecx [ebp+var_234] +
call sub_1009590  +
call sub_10095EC  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ecx +
mov eax [ebx+4] +
test eax eax +
jz loc_1009891  +
mov ecx [ebx] +
test ecx ecx +
jz loc_1009884  +
push esi  +
push edi  +
mov esi offset dword_10015E0 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push 1  +
movs   +
mov esi [eax] +
lea eax [ebp+var_14] +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push 1399h  +
push ecx  +
call ds:GetDlgItem  +
push eax  +
push dword ptr [ebx+4]  +
call dword ptr [esi+24h]  +
mov eax [ebx+4] +
mov esi offset dword_10015E0 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push 1  +
movs   +
mov esi [eax] +
lea eax [ebp+var_14] +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push 139Ch  +
push dword ptr [ebx]  +
call ds:GetDlgItem  +
push eax  +
push dword ptr [ebx+4]  +
call dword ptr [esi+24h]  +
pop edi  +
pop esi  +
mov eax [ebx+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebx+4] 0 +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009804  +
test [ebp+arg_0] 1 +
jz loc_10098BD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx dword_1026C38 +
xor eax eax +
test ecx ecx +
jz locret_10098D7  +
mov eax [ecx] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp [ebp+nIDButton] 1395h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jnz loc_1009916  +
mov esi 1397h +
mov [ebp+nIDDlgItem] 1399h +
mov [ebp+var_8] 1398h +
mov [ebp+var_C] 3EFh +
mov [ebp+var_10] 3F0h +
jmp loc_1009937  +
mov esi 139Ah +
mov [ebp+nIDDlgItem] 139Ch +
mov [ebp+var_8] 139Bh +
mov [ebp+var_C] 3F1h +
mov [ebp+var_10] 3F2h +
xor eax eax +
cmp [ebp+bEnable] eax +
setnz al  +
push eax  +
push [ebp+nIDButton]  +
push dword ptr [ebx]  +
call ds:CheckDlgButton  +
push [ebp+bEnable]  +
push esi  +
push dword ptr [ebx]  +
mov esi ds:GetDlgItem +
call esi  +
mov edi ds:EnableWindow +
push eax  +
call edi  +
push [ebp+bEnable]  +
push [ebp+nIDDlgItem]  +
push dword ptr [ebx]  +
call esi  +
push eax  +
call edi  +
push [ebp+bEnable]  +
push [ebp+var_8]  +
push dword ptr [ebx]  +
call esi  +
push eax  +
call edi  +
push [ebp+bEnable]  +
push [ebp+var_C]  +
push dword ptr [ebx]  +
call esi  +
push eax  +
call edi  +
push [ebp+bEnable]  +
push [ebp+var_10]  +
push dword ptr [ebx]  +
call esi  +
push eax  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 6  +
pop eax  +
xor ecx ecx +
mov edx [ebp+arg_0] +
cmp edx dword_102618C[ecx*4] +
jbe loc_10099C0  +
inc ecx  +
cmp ecx 7 +
jl loc_10099AC  +
jmp loc_10099C2  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 400h  +
push [ebp+nIDDlgItem]  +
push dword ptr [ecx]  +
call ds:SendDlgItemMessageW  +
cmp eax 7 +
jb loc_10099EC  +
push 6  +
pop eax  +
mov eax dword_102618C[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jnz loc_1009A40  +
push ecx  +
push ecx  +
push 0F0h  +
push 13A0h  +
push dword ptr [esi]  +
call ds:SendDlgItemMessageW  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
push 139Eh  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
push 0  +
push 0  +
mov ebx 0F0h +
push ebx  +
mov esi ecx +
push 139Fh  +
push dword ptr [esi]  +
mov [ebp+var_405] 1 +
call edi  +
cmp eax 1 +
jz loc_1009B19  +
push 0  +
push 0  +
push ebx  +
push 13A6h  +
push dword ptr [esi]  +
call edi  +
cmp eax 1 +
jz loc_1009B19  +
push 0  +
push 0  +
push ebx  +
push 13A0h  +
push dword ptr [esi]  +
call edi  +
cmp eax 1 +
jz loc_1009B19  +
mov edi ds:LoadStringW +
add ebx 10h +
push ebx  +
lea eax [ebp+Caption] +
push eax  +
push 3E8h  +
push hInstance  +
call edi  +
push ebx  +
lea eax [ebp+Text] +
push eax  +
push 3F4h  +
push hInstance  +
call edi  +
push 0  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push dword ptr [esi]  +
call ds:MessageBoxW  +
push 139Fh  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
mov [ebp+var_405] 0 +
mov ecx [ebp+var_4] +
mov al [ebp+var_405] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100950D  +
test eax eax +
jl loc_1009B6C  +
mov ecx [ebp+var_4] +
and dword ptr [ebp+Data] 0 +
lea eax [ebp+Data] +
push eax  +
push [ebp+arg_0]  +
call sub_10090DA  +
test eax eax +
jl loc_1009B6C  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
jmp locret_1009B79  +
push [ebp+arg_0]  +
call sub_1008FBD  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100950D  +
test eax eax +
jl locret_1009BA7  +
push dword ptr [ebp+Data]  +
mov ecx [ebp+var_4] +
push [ebp+arg_0]  +
call sub_100905C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] 111h +
jnz loc_1009BD9  +
cmp [ebp+arg_8] 1 +
jz loc_1009BCC  +
cmp [ebp+arg_8] 2 +
jnz loc_1009BD9  +
push eax  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+wParam] +
push eax  +
push 7  +
mov esi ecx +
call sub_1009B33  +
push 139Ch  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
mov ebx ds:SendMessageW +
push 60000h  +
push 1  +
mov edi eax +
push 406h  +
push edi  +
call ebx  +
push [ebp+wParam]  +
mov ecx esi +
call sub_10099A2  +
push eax  +
push 1  +
push 405h  +
push edi  +
call ebx  +
lea eax [ebp+wParam] +
push eax  +
push 8  +
mov ecx esi +
call sub_1009B33  +
mov edi ds:CheckDlgButton +
xor eax eax +
cmp [ebp+wParam] eax +
setnz al  +
push eax  +
push 139Fh  +
push dword ptr [esi]  +
call edi  +
lea eax [ebp+wParam] +
push eax  +
push 9  +
mov ecx esi +
call sub_1009B33  +
xor eax eax +
cmp [ebp+wParam] eax +
setnz al  +
push eax  +
push 13A6h  +
push dword ptr [esi]  +
call edi  +
lea eax [ebp+wParam] +
push eax  +
push 0Ah  +
mov ecx esi +
call sub_1009B33  +
xor eax eax +
cmp [ebp+wParam] eax +
setnz al  +
push eax  +
push 13A0h  +
push dword ptr [esi]  +
call edi  +
lea eax [ebp+var_20C] +
push eax  +
push 0Bh  +
mov ecx esi +
call sub_1009B33  +
push 139Eh  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
xor esi esi +
mov edi eax +
mov [ebp+wParam] esi +
push 100h  +
lea eax [ebp+lParam] +
push eax  +
push uID[esi*8]  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push 143h  +
push edi  +
call ebx  +
mov eax [ebp+var_20C] +
cmp eax Data[esi*8] +
jnz loc_1009D26  +
mov [ebp+wParam] esi +
inc esi  +
cmp esi 0Bh +
jb loc_1009CE2  +
push 0  +
push [ebp+wParam]  +
push 14Eh  +
push edi  +
call ebx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+4] +
push edi  +
push offset stru_1001F7C  +
push 15h  +
push 0  +
push offset stru_10015D0  +
mov [ebp+var_20C] esi +
mov [ebp+var_208] edi +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1009E1F  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 3F5h  +
push hInstance  +
call ds:LoadStringW  +
mov ebx ds:GetDlgItem +
push 1399h  +
push dword ptr [esi]  +
call ebx  +
mov ecx [edi] +
mov edx [ecx] +
lea esi [ebp+Buffer] +
push esi  +
sub esp 10h +
mov edi esp +
mov esi offset dword_10015E0 +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
movs   +
push eax  +
push ecx  +
movs   +
call dword ptr [edx+1Ch]  +
test eax eax +
jl loc_1009E1F  +
mov eax [ebp+var_20C] +
push 139Ch  +
push dword ptr [eax]  +
call ebx  +
mov ecx [ebp+var_208] +
mov ecx [ecx] +
mov edx [ecx] +
lea esi [ebp+Buffer] +
push esi  +
sub esp 10h +
mov edi esp +
mov esi offset dword_10015E0 +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
movs   +
push eax  +
push ecx  +
movs   +
call dword ptr [edx+1Ch]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ?__uncaught_exception@@YA_NXZ  +
test al al +
jz loc_1009EAD  +
lea eax [ebp+hWnd] +
push eax  +
push 0Ch  +
mov ecx esi +
call sub_1009B33  +
cmp [ebp+hWnd] 0 +
mov edi ds:CheckDlgButton +
setnz bl  +
xor eax eax +
test bl bl +
setnz al  +
push eax  +
push 13A3h  +
push dword ptr [esi]  +
call edi  +
movzx eax bl +
push eax  +
mov ebx 13A4h +
push ebx  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
lea eax [ebp+hWnd] +
push eax  +
push 0Dh  +
mov ecx esi +
call sub_1009B33  +
xor eax eax +
cmp [ebp+hWnd] eax +
setnz al  +
push eax  +
push ebx  +
push dword ptr [esi]  +
call edi  +
jmp loc_1009FB4  +
mov edi ds:GetDlgItem +
mov ebx 13A5h +
lea eax [ebx+2] +
push eax  +
push dword ptr [esi]  +
mov [ebp+nIDDlgItem] ebx +
mov [ebp+var_10] 13A3h +
mov [ebp+var_C] 13A4h +
mov [ebp+var_34] eax +
mov [ebp+var_30] 13A1h +
mov [ebp+var_2C] 1 +
mov [ebp+var_28] 2 +
call edi  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
push ebx  +
push dword ptr [esi]  +
call edi  +
lea ecx [ebp+var_44] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
mov ebx [ebp+Rect.top] +
sub ebx [ebp+var_40] +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
push [ebp+eax*4+nIDDlgItem]  +
push dword ptr [esi]  +
call edi  +
push 0  +
push eax  +
mov [ebp+hWnd] eax +
call ds:EnableWindow  +
push 0  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 3 +
jb loc_1009F0E  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
push [ebp+eax*4+var_34]  +
push dword ptr [esi]  +
call edi  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetClientRect  +
push 1  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi]  +
push [ebp+hWnd]  +
call ds:MapWindowPoints  +
mov ecx [ebp+Rect.top] +
push 5  +
xor eax eax +
push eax  +
push eax  +
sub ecx ebx +
push ecx  +
push [ebp+Rect.left]  +
push eax  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 4 +
jb loc_1009F3D  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push 6  +
sub eax ebx +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push dword ptr [esi]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
xor eax eax +
push eax  +
push eax  +
mov ebx 0F0h +
push ebx  +
mov esi ecx +
push 1395h  +
push dword ptr [esi]  +
mov [ebp+var_8] eax +
mov [ebp+bEnable] eax +
call edi  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_1009FF5  +
mov [ebp+var_8] ecx +
jmp loc_100A00D  +
push 0  +
push 0  +
push ebx  +
push 1396h  +
push dword ptr [esi]  +
call edi  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_100A00D  +
mov [ebp+bEnable] ecx +
push [ebp+var_8]  +
mov ecx esi +
push 1395h  +
call sub_10098DD  +
push [ebp+bEnable]  +
mov ecx esi +
push 1396h  +
call sub_10098DD  +
push [ebp+bEnable]  +
mov edi ds:GetDlgItem +
push 139Fh  +
push dword ptr [esi]  +
call edi  +
mov ebx ds:EnableWindow +
push eax  +
call ebx  +
push [ebp+bEnable]  +
push 13A6h  +
push dword ptr [esi]  +
call edi  +
push eax  +
call ebx  +
push [ebp+bEnable]  +
push 13A0h  +
push dword ptr [esi]  +
call edi  +
push eax  +
call ebx  +
push [ebp+bEnable]  +
push 139Eh  +
push dword ptr [esi]  +
call edi  +
push eax  +
call ebx  +
push [ebp+bEnable]  +
push 3F3h  +
push dword ptr [esi]  +
call edi  +
push eax  +
call ebx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
push [ebp+nIDDlgItem]  +
mov ebx ecx +
push dword ptr [ebx]  +
call ds:GetDlgItem  +
lea ecx [ebp+ppvObject] +
push ecx  +
push offset stru_1001F8C  +
push 0FFFFFFFCh  +
push eax  +
call AccessibleObjectFromWindow  +
test eax eax +
jl loc_100A114  +
and [ebp+var_10] 0 +
push 3  +
pop eax  +
lea edx [ebp+lpString] +
push edx  +
mov word ptr [ebp+var_18] ax +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_100A10B  +
push [ebp+lpString]  +
xor eax eax +
cmp [ebp+nIDDlgItem] 1399h +
setnz al  +
dec eax  +
and eax 0FFFFFFFDh +
add eax 139Bh +
push eax  +
push dword ptr [ebx]  +
call ds:SetDlgItemTextW  +
push [ebp+lpString]  +
call ds:SysFreeString  +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor bl bl +
call sub_1009A4A  +
test al al +
jz loc_100A2C5  +
push edi  +
mov edi ds:SendDlgItemMessageW +
push 0  +
push 0  +
mov ebx 0F0h +
push ebx  +
push 1393h  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
push 4  +
mov ecx esi +
call sub_1009B82  +
push 0  +
push 0  +
push ebx  +
push 1395h  +
push dword ptr [esi]  +
call edi  +
cmp eax 1 +
jnz loc_100A177  +
push 2  +
pop eax  +
jmp loc_100A190  +
push 0  +
push 0  +
push ebx  +
push 1396h  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFEh +
add eax 3 +
push eax  +
push 5  +
mov ecx esi +
call sub_1009B82  +
push 1399h  +
mov ecx esi +
call sub_10099CB  +
push eax  +
push 6  +
mov ecx esi +
call sub_1009B82  +
push 139Ch  +
mov ecx esi +
call sub_10099CB  +
push eax  +
push 7  +
mov ecx esi +
call sub_1009B82  +
push 0  +
push 0  +
push ebx  +
push 139Fh  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push 8  +
mov ecx esi +
call sub_1009B82  +
push 0  +
push 0  +
push ebx  +
push 13A6h  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push 9  +
mov ecx esi +
call sub_1009B82  +
push 0  +
push 0  +
push ebx  +
push 13A0h  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push 0Ah  +
mov ecx esi +
call sub_1009B82  +
push 0  +
push 0  +
push 147h  +
push 139Eh  +
push dword ptr [esi]  +
call edi  +
cmp eax 0FFFFFFFFh +
jz loc_100A253  +
push Data[eax*8]  +
mov ecx esi +
push 0Bh  +
call sub_1009B82  +
push 0  +
push 0  +
push ebx  +
push 13A9h  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push 0Eh  +
mov ecx esi +
call sub_1009B82  +
call ?__uncaught_exception@@YA_NXZ  +
test al al +
jz loc_100A2C2  +
push 0  +
push 0  +
push ebx  +
push 13A3h  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push 0Ch  +
mov ecx esi +
call sub_1009B82  +
push 0  +
push 0  +
push ebx  +
push 13A4h  +
push dword ptr [esi]  +
call edi  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push 0Dh  +
mov ecx esi +
call sub_1009B82  +
mov bl 1 +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+nIDButton] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [esi] eax +
lea eax [ebp+nIDButton] +
push eax  +
xor ebx ebx +
push 4  +
mov [ebp+nIDButton] ebx +
call sub_1009B33  +
mov edi ds:CheckDlgButton +
xor eax eax +
cmp [ebp+nIDButton] ebx +
setnz al  +
push eax  +
push 1393h  +
push dword ptr [esi]  +
call edi  +
lea eax [ebp+nIDButton] +
push eax  +
push 5  +
mov ecx esi +
call sub_1009B33  +
push ebx  +
push 1394h  +
push dword ptr [esi]  +
call edi  +
push ebx  +
push 1395h  +
push dword ptr [esi]  +
call edi  +
push ebx  +
push 1396h  +
push dword ptr [esi]  +
call edi  +
cmp [ebp+nIDButton] 2 +
jnz loc_100A427  +
mov [ebp+nIDButton] 1395h +
push ebx  +
push 10002h  +
push 127h  +
push dword ptr [esi]  +
call ds:PostMessageW  +
push ebx  +
push 20002h  +
push 127h  +
push dword ptr [esi]  +
call ds:PostMessageW  +
push 1  +
push [ebp+nIDButton]  +
push dword ptr [esi]  +
call edi  +
lea eax [ebp+nIDButton] +
push eax  +
push 6  +
mov ecx esi +
call sub_1009B33  +
push 1399h  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
mov ebx ds:SendMessageW +
push 60000h  +
push 1  +
push 406h  +
push eax  +
mov [ebp+hWnd] eax +
call ebx  +
push [ebp+nIDButton]  +
mov ecx esi +
call sub_10099A2  +
push eax  +
push 1  +
push 405h  +
push [ebp+hWnd]  +
call ebx  +
lea eax [ebp+nIDButton] +
push eax  +
push 0Eh  +
mov ecx esi +
call sub_1009B33  +
xor eax eax +
xor ebx ebx +
cmp [ebp+nIDButton] ebx +
setnz al  +
push eax  +
push 13A9h  +
push dword ptr [esi]  +
call edi  +
call sub_100C1E3  +
test al al +
jz loc_100A404  +
push 13A7h  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
mov edi eax +
push ebx  +
push edi  +
call ds:EnableWindow  +
push ebx  +
push edi  +
call ds:ShowWindow  +
mov ecx esi +
call sub_1009BE2  +
mov ecx esi +
call sub_1009D50  +
mov ecx esi +
call sub_1009FBE  +
mov ecx esi +
call sub_1009E33  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
cmp [ebp+nIDButton] 3 +
jnz loc_100A439  +
mov [ebp+nIDButton] 1396h +
jmp loc_100A343  +
mov [ebp+nIDButton] 1394h +
jmp loc_100A369  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jnz loc_100A4ED  +
movzx ecx word ptr [ebp+arg_0] +
cmp ecx 1 +
jz loc_100A4DA  +
cmp ecx 2 +
jz loc_100A4E5  +
cmp ecx 1393h +
jle loc_100A4ED  +
cmp ecx 1396h +
jle loc_100A4D1  +
cmp ecx 13A0h +
jz loc_100A4C5  +
mov eax 13A3h +
cmp ecx eax +
jnz loc_100A4ED  +
push 0  +
push 0  +
push 0F0h  +
push eax  +
push dword ptr [esi]  +
call ds:SendDlgItemMessageW  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push 13A4h  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
jmp loc_100A4ED  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10099FC  +
jmp loc_100A4ED  +
mov ecx esi +
call sub_1009FBE  +
jmp loc_100A4ED  +
mov ecx esi +
call sub_100A120  +
test al al +
jz loc_100A4ED  +
push dword ptr [esi]  +
call ds:DestroyWindow  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax word ptr [ebp+ppv] +
mov edx eax +
sub edx 1399h +
jz loc_100A5A8  +
sub edx 3 +
jz loc_100A5A8  +
sub edx 5 +
jz loc_100A525  +
sub edx 6 +
jnz loc_100A5B4  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100A5B4  +
mov eax [eax+8] +
cmp eax 0FFFFFFFEh +
jz loc_100A53D  +
cmp eax 0FFFFFFFCh +
jnz loc_100A5B4  +
mov eax 13A1h +
cmp word ptr [ebp+ppv] ax +
jnz loc_100A564  +
push 0  +
push offset DialogFunc  +
push dword ptr [ecx]  +
push 1389h  +
push hInstance  +
call ds:DialogBoxParamW  +
jmp loc_100A5B4  +
and [ebp+ppv] 0 +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001F6C  +
push 17h  +
push 0  +
push offset stru_10021E0  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_100A599  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0  +
push offset aPagenomouseork  +
push offset aMicrosoft_ease  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_100A5B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100A5B4  +
cmp [ebp+arg_4] 0 +
jz loc_100A5B4  +
push eax  +
call sub_100A08C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+hWnd] +
push edi  +
push 8  +
xor ebx ebx +
push esi  +
mov [ebp+var_4] ebx +
call ds:GetWindowLongW  +
mov edx [ebp+arg_4] +
dec edx  +
dec edx  +
mov ecx eax +
jz loc_100A6D1  +
sub edx 0Eh +
jz loc_100A6C8  +
sub edx 3Eh +
jz loc_100A6B4  +
sub edx 0C2h +
jz loc_100A621  +
dec edx  +
jnz loc_100A701  +
cmp ecx ebx +
jz loc_100A701  +
push [ebp+ppv]  +
call sub_100A44A  +
mov [ebp+var_4] 1 +
jmp loc_100A701  +
push [ebp+dwNewLong]  +
push 8  +
push esi  +
call ds:SetWindowLongW  +
mov ecx [ebp+dwNewLong] +
push esi  +
call sub_100A2CF  +
push esi  +
call sub_1008207  +
mov [ebp+var_4] 1 +
cmp dword_1026ADC ebx +
jz loc_100A701  +
mov al byte_1026AE0 +
cmp al 4 +
jnb loc_100A660  +
cmp al bl +
jnz loc_100A701  +
mov eax dword_1026AC8 +
mov ecx dword_1026ACC +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_100A701  +
mov eax dword_1026AD0 +
mov edi dword_1026AD4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100A701  +
cmp edx edi +
jnz loc_100A701  +
push offset dword_1001658  +
push dword_1026AB4  +
push dword_1026AB0  +
call sub_1004479  +
jmp loc_100A701  +
cmp ecx ebx +
jz loc_100A701  +
push [ebp+dwNewLong]  +
push [ebp+ppv]  +
call sub_100A4F7  +
jmp loc_100A615  +
push esi  +
call ds:DestroyWindow  +
jmp loc_100A701  +
cmp ecx ebx +
jz loc_100A6FB  +
push 1  +
call sub_10098A3  +
push ebx  +
push 8  +
push esi  +
call ds:SetWindowLongW  +
push esi  +
call ds:GetParent  +
push ebx  +
push ebx  +
push 40Ch  +
push eax  +
call ds:PostMessageW  +
mov dword_1026C38 ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp dword_1026C38 edi +
jnz loc_100A775  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100A733  +
and [eax] edi +
and [eax+4] edi +
jmp loc_100A735  +
xor eax eax +
mov dword_1026C38 eax +
test eax eax +
jz loc_100A775  +
push eax  +
push offset sub_100A5BD  +
push [ebp+hWndParent]  +
push 1388h  +
push hInstance  +
call sub_100D1E6  +
mov edi eax +
test edi edi +
jnz loc_100A775  +
mov ecx dword_1026C38 +
test ecx ecx +
jz loc_100A76E  +
push 1  +
call sub_10098A3  +
and dword_1026C38 0 +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100AE02  +
test [ebp+arg_0] 1 +
jz loc_100A79B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
or dword ptr [ecx+4Ch] 0FFFFFFFFh +
or dword ptr [ecx+50h] 0FFFFFFFFh +
or dword ptr [ecx+54h] 0FFFFFFFFh +
xor eax eax +
mov [ecx+24h] eax +
mov [ecx+1Ch] eax +
mov [ecx+40h] eax +
mov [ecx+44h] eax +
mov [ecx+48h] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 10h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100A7EA  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_100ADDF  +
jmp loc_100A7EC  +
xor eax eax +
mov [esi+18h] eax +
pop esi  +
test eax eax +
jz loc_100A7FD  +
mov ecx eax +
call sub_100B3B9  +
jmp loc_100A802  +
mov eax 8007000Eh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+50h] +
xor ebx ebx +
cmp eax 0FFFFFFFFh +
jz loc_100A83D  +
mov ecx [esi+20h] +
push ebx  +
cmp ecx [esi+0Ch] +
jz loc_100A835  +
push eax  +
push dword ptr [esi+40h]  +
push ebx  +
push ebx  +
call sub_10150B1  +
jmp loc_100A83D  +
push ebx  +
push ebx  +
push ebx  +
call sub_1014FFE  +
mov eax [esi+1Ch] +
cmp eax ebx +
jz loc_100A84A  +
mov [esi+20h] eax +
mov [esi+1Ch] ebx +
mov eax [esi+20h] +
mov ecx [esi+14h] +
cmp eax ecx +
jnz loc_100A858  +
cmp ecx ebx +
jnz loc_100A85D  +
cmp eax [esi+4] +
jnz loc_100A8A9  +
lea ecx [ebp-1] +
push ecx  +
push dword ptr [esi+44h]  +
mov ecx eax +
push dword ptr [esi+40h]  +
mov [ebp-1] bl +
push 0Fh  +
push 1  +
call sub_10150B1  +
mov eax [esi+44h] +
mov [esi+50h] eax +
cmp [ebp-1] bl +
jnz loc_100A886  +
inc eax  +
mov [esi+44h] eax +
jmp loc_100A8C9  +
mov eax [esi+20h] +
mov [esi+44h] ebx +
cmp eax [esi+4] +
jnz loc_100A8A1  +
cmp dword ptr [esi+40h] 4 +
jge loc_100A89C  +
mov eax [esi+8] +
jmp loc_100A8C6  +
mov eax [esi+0Ch] +
jmp loc_100A8C6  +
inc dword ptr [esi+38h]  +
mov [esi+1Ch] ebx +
jmp loc_100A8C9  +
mov ecx [esi+10h] +
push ebx  +
cmp eax ecx +
jnz loc_100A8CD  +
push dword ptr [esi+40h]  +
push 0Fh  +
push 1  +
call sub_1014FFE  +
mov [esi+50h] ebx +
mov eax [esi+4] +
inc dword ptr [esi+38h]  +
mov [esi+1Ch] eax +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax [esi+40h] +
cmp eax 4 +
jge loc_100A8E7  +
mov ecx [esi+8] +
push eax  +
push 0Fh  +
push 1  +
call sub_1014FFE  +
mov eax [esi+8] +
jmp loc_100A8F7  +
mov ecx [esi+0Ch] +
push ebx  +
push 0Fh  +
push 1  +
call sub_1014FFE  +
mov eax [esi+0Ch] +
mov [esi+20h] eax +
mov [esi+50h] ebx +
cmp [esi+58h] bl +
jz loc_100A8C0  +
mov eax [esi+10h] +
jmp loc_100A8C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+54h] +
xor ebx ebx +
mov [ebp-1] bl +
cmp eax 0FFFFFFFFh +
jz loc_100A936  +
mov ecx [esi+20h] +
push ebx  +
push eax  +
push dword ptr [esi+44h]  +
push dword ptr [esi+40h]  +
push 1  +
push ebx  +
call sub_1014D29  +
mov eax [esi+1Ch] +
cmp eax ebx +
jz loc_100A943  +
mov [esi+20h] eax +
mov [esi+1Ch] ebx +
mov ecx [esi+20h] +
cmp ecx [esi+0Ch] +
jz loc_100A950  +
mov eax [esi+40h] +
jmp loc_100A952  +
xor eax eax +
lea edx [ebp-1] +
push edx  +
push dword ptr [esi+48h]  +
push dword ptr [esi+44h]  +
push eax  +
push 1  +
push 1  +
call sub_1014D29  +
mov eax [esi+48h] +
mov [esi+54h] eax +
cmp [ebp-1] bl +
jnz loc_100A977  +
inc eax  +
mov [esi+48h] eax +
jmp loc_100A97D  +
inc dword ptr [esi+38h]  +
mov [esi+48h] ebx +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+18h] +
pop ebp  +
jmp loc_100AECD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4Ch] +
cmp eax 0FFFFFFFFh +
jz loc_100A9FC  +
mov ecx [esi+14h] +
push ebx  +
xor ebx ebx +
cmp [esi+20h] ecx +
jnz loc_100A9BD  +
cmp ecx ebx +
jz loc_100A9BD  +
push ebx  +
push eax  +
jmp loc_100A9F4  +
lea ecx [ebp-1] +
push ecx  +
mov ecx [esi+4] +
push eax  +
push ebx  +
push ebx  +
mov [ebp+var_1] bl +
call sub_1014FFE  +
push ebx  +
cmp [ebp+var_1] bl +
jnz loc_100A9DD  +
push dword ptr [esi+4Ch]  +
mov ecx [esi+8] +
jmp loc_100A9E1  +
mov ecx [esi+0Ch] +
push ebx  +
push ebx  +
push ebx  +
call sub_1014FFE  +
cmp [esi+58h] bl +
jz loc_100A9FB  +
mov ecx [esi+10h] +
push ebx  +
push dword ptr [esi+4Ch]  +
push ebx  +
push ebx  +
call sub_1014FFE  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov eax ecx +
mov ecx [eax+20h] +
cmp ecx [eax+0Ch] +
jz loc_100AA13  +
mov edx [eax+40h] +
jmp loc_100AA15  +
xor edx edx +
push dword ptr [eax+54h]  +
push dword ptr [eax+44h]  +
push edx  +
call sub_1015100  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
mov [ecx+58h] al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov edx [ebp+arg_4] +
mov [ecx+4] edx +
mov edx [ebp+arg_8] +
mov [ecx+8] edx +
mov edx [ebp+arg_C] +
xor eax eax +
mov [ecx+0Ch] edx +
mov edx [ebp+arg_10] +
mov [ecx+10h] edx +
mov edx [ebp+arg_14] +
mov [ecx+18h] eax +
mov [ecx+1Ch] eax +
mov [ecx+28h] al +
mov [ecx+2Ch] eax +
mov [ecx+30h] eax +
mov [ecx+34h] al +
mov [ecx+38h] eax +
mov dword ptr [ecx+3Ch] 2 +
mov [ecx+58h] al +
mov [ecx+14h] edx +
mov [ecx+20h] eax +
call sub_100A7A7  +
mov eax ecx +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_100AAAE  +
push 1  +
call sub_100A781  +
and dword ptr [esi+18h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp dword ptr [esi+4Ch] 0FFFFFFFFh +
mov [ebp-1] bl +
jz loc_100AACF  +
call sub_100A999  +
mov eax [esi+40h] +
mov [esi+4Ch] eax +
cmp [esi+1Ch] ebx +
jnz loc_100AB06  +
cmp [esi+14h] ebx +
jz loc_100AB06  +
call sub_100B62E  +
test eax eax +
jle loc_100AB06  +
mov ecx [esi+14h] +
push ebx  +
push dword ptr [esi+40h]  +
push 0Fh  +
push 1  +
call sub_1014FFE  +
mov eax [esi+14h] +
mov [esi+20h] eax +
mov eax [esi+4] +
mov [esi+1Ch] eax +
jmp loc_100AB62  +
mov ecx [esi+4] +
lea eax [ebp-1] +
push eax  +
push dword ptr [esi+40h]  +
mov [esi+20h] ecx +
push 0Fh  +
push 1  +
mov [esi+1Ch] ecx +
call sub_1014FFE  +
push ebx  +
cmp [ebp-1] bl +
jnz loc_100AB2D  +
push dword ptr [esi+40h]  +
mov ecx [esi+8] +
jmp loc_100AB31  +
mov ecx [esi+0Ch] +
push ebx  +
push 0Fh  +
push 1  +
call sub_1014FFE  +
cmp [esi+58h] bl +
jz loc_100AB4F  +
mov ecx [esi+10h] +
push ebx  +
push dword ptr [esi+40h]  +
push 0Fh  +
push 1  +
call sub_1014FFE  +
cmp [ebp-1] bl +
jnz loc_100AB59  +
inc dword ptr [esi+40h]  +
jmp loc_100AB62  +
inc dword ptr [esi+38h]  +
mov [esi+40h] ebx +
mov [esi+1Ch] ebx +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax [ecx+24h] +
sub eax 0 +
jz loc_100AB83  +
dec eax  +
jz loc_100AB7E  +
dec eax  +
jnz locret_100AB88  +
jmp loc_100A90C  +
jmp loc_100A80B  +
jmp loc_100AAB5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+34h] 0 +
jnz loc_100AC24  +
mov eax [esi+38h] +
mov byte ptr [esi+34h] 1 +
mov [ebp+var_1] 0 +
cmp eax [esi+3Ch] +
jnz loc_100AC07  +
mov eax [esi+24h] +
cmp eax 1 +
jnz loc_100ABC0  +
and dword ptr [esi+24h] 0 +
jmp loc_100ABFD  +
cmp eax 2 +
jnz loc_100ABE7  +
mov ecx [esi+20h] +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
call sub_1014A9E  +
test eax eax +
jl loc_100ABDE  +
cmp [ebp+var_8] 1 +
jz loc_100ABBA  +
mov dword ptr [esi+24h] 1 +
jmp loc_100ABFD  +
call sub_100A999  +
or dword ptr [esi+4Ch] 0FFFFFFFFh +
push 0  +
mov ecx esi +
call sub_100AC2E  +
mov [ebp+var_1] 1 +
and dword ptr [esi+38h] 0 +
cmp [ebp+var_1] 0 +
jnz loc_100AC20  +
mov ecx esi +
call sub_100AB6B  +
cmp [ebp+arg_0] 0 +
jz loc_100AC20  +
mov ecx [esi] +
push 835h  +
call sub_1005759  +
mov byte ptr [esi+34h] 0 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
xor ebx ebx +
cmp eax ebx +
jz loc_100AC4B  +
push eax  +
push ebx  +
call ds:KillTimer  +
mov [esi+30h] ebx +
cmp [ebp+arg_0] bl +
jnz loc_100AC59  +
mov ecx esi +
call sub_100A999  +
jmp loc_100AC65  +
cmp [esi+28h] bl +
jnz loc_100AC65  +
mov ecx esi +
call sub_100A7A7  +
mov al [ebp+arg_0] +
mov [esi+1Ch] ebx +
mov [esi+38h] ebx +
mov [esi+28h] al +
cmp al bl +
jz loc_100AC94  +
push ebx  +
mov ecx esi +
call sub_100AB8E  +
push offset TimerFunc  +
push dword ptr [esi+2Ch]  +
push 7D1h  +
push ebx  +
call ds:SetTimer  +
mov [esi+30h] eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+28h] 0 +
jz locret_100ACAC  +
push 1  +
call sub_100AB8E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
mov esi ecx +
mov dword ptr [edi] 836h +
mov [ebp+var_1] bl +
cmp [esi+28h] bl +
jz loc_100AD81  +
call sub_100A999  +
mov eax [esi+24h] +
mov [ebp+arg_4] ebx +
mov [ebp+var_8] ebx +
cmp eax 2 +
jz loc_100AD37  +
cmp eax ebx +
jnz loc_100AD08  +
mov ecx [esi+20h] +
lea eax [ebp+arg_4] +
push eax  +
push dword ptr [esi+4Ch]  +
call sub_1014A9E  +
test eax eax +
jl loc_100AD5B  +
cmp [ebp+arg_4] 1 +
jnz loc_100AD5B  +
mov [esi+50h] ebx +
mov ecx [esi+20h] +
cmp ecx [esi+0Ch] +
jz loc_100AD15  +
mov eax [esi+4Ch] +
jmp loc_100AD17  +
xor eax eax +
lea edx [ebp+var_8] +
push edx  +
push dword ptr [esi+50h]  +
push eax  +
call sub_1014AD9  +
test eax eax +
jl loc_100AD6E  +
cmp [ebp+var_8] 1 +
jnz loc_100AD6E  +
mov eax [esi+50h] +
mov [esi+54h] ebx +
mov [esi+44h] eax +
push ebx  +
mov ecx esi +
call sub_100AC2E  +
mov ecx [esi+18h] +
push ebx  +
call sub_100AEB1  +
mov ecx esi +
call sub_100AA04  +
mov [ebp+var_1] 1 +
mov dword ptr [edi] 837h +
jmp loc_100AD88  +
mov eax [esi+4Ch] +
or dword ptr [esi+50h] 0FFFFFFFFh +
mov dword ptr [esi+24h] 1 +
mov [esi+40h] eax +
jmp loc_100AD7F  +
mov eax [esi+50h] +
or dword ptr [esi+54h] 0FFFFFFFFh +
mov dword ptr [esi+24h] 2 +
mov [esi+44h] eax +
mov ecx esi +
push 1  +
call sub_100AC2E  +
push [ebp+arg_0]  +
mov ecx [esi+18h] +
call sub_100B07B  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_100AC2E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax+0Ch] +
mov [esi+2Ch] ecx +
mov ecx [esi+18h] +
push eax  +
call sub_100B26E  +
push 0  +
mov ecx esi +
call sub_100AC2E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] cl +
mov [eax+0Dh] cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
mov esi ecx +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_100AE78  +
push edi  +
push 1  +
push 1  +
push dword ptr [esi+4]  +
call MSSWCH_12  +
mov edi eax +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_10  +
cmp eax 1 +
jnz loc_100AE77  +
lea eax [ebp+var_30] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
mov [ebp+var_30] 30h +
call MSSWCH_11  +
test [ebp+var_24] 1 +
jz loc_100AE77  +
xor eax eax +
cmp [esi+0Ch] al +
setnz al  +
push eax  +
push 1115h  +
push 0  +
call WinSqmSetDWORD  +
xor eax eax +
cmp [esi+0Dh] al +
setnz al  +
push eax  +
push 1116h  +
push 0  +
call WinSqmSetDWORD  +
pop edi  +
mov eax [esi+4] +
test eax eax +
jz loc_100AE89  +
push eax  +
call MSSWCH_9  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_100AEA9  +
push 3E8h  +
push eax  +
call ds:WaitForSingleObject  +
push dword ptr [esi+8]  +
call ds:CloseHandle  +
and dword ptr [esi+8] 0 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] al +
setnz al  +
push eax  +
call MSSWCH_8  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call MSSWCH_7  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
push 30h  +
pop edi  +
xor ebx ebx +
inc ebx  +
push ebx  +
mov esi ecx +
push ebx  +
push dword ptr [esi+4]  +
mov [ebp+var_34] edi +
call MSSWCH_12  +
lea ecx [ebp+var_34] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_4] eax +
call MSSWCH_11  +
push [ebp+var_4]  +
push dword ptr [esi+4]  +
call MSSWCH_10  +
cmp eax ebx +
jnz loc_100AF32  +
xor eax eax +
cmp [ebp+arg_0] al +
setnz al  +
mov [ebp+var_28] eax +
lea eax [ebp+var_34] +
push eax  +
push [ebp+var_4]  +
push dword ptr [esi+4]  +
call MSSWCH_14  +
push ebx  +
push 2  +
push dword ptr [esi+4]  +
mov [ebp+var_34] edi +
call MSSWCH_12  +
lea ecx [ebp+var_34] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_4] eax +
call MSSWCH_11  +
push [ebp+var_4]  +
push dword ptr [esi+4]  +
call MSSWCH_10  +
cmp eax 2 +
jnz loc_100AF7A  +
xor eax eax +
cmp [ebp+arg_0] al +
setnz al  +
mov [ebp+var_28] eax +
lea eax [ebp+var_34] +
push eax  +
push [ebp+var_4]  +
push dword ptr [esi+4]  +
call MSSWCH_14  +
push ebx  +
push 3  +
push dword ptr [esi+4]  +
mov [ebp+var_34] edi +
call MSSWCH_12  +
mov edi eax +
lea eax [ebp+var_34] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_11  +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_10  +
cmp eax 3 +
jnz loc_100AFD3  +
xor eax eax +
cmp [ebp+arg_0] al +
mov [ebp+var_1C] ebx +
setnz al  +
mov [ebp+var_28] eax +
xor eax eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_34] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_14  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
inc ebx  +
push ebx  +
mov esi ecx +
push 4  +
push dword ptr [esi+4]  +
mov [ebp+var_30] 30h +
call MSSWCH_12  +
mov edi eax +
lea eax [ebp+var_30] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_11  +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_10  +
cmp eax 4 +
jnz loc_100B03D  +
xor eax eax +
cmp [ebp+arg_0] al +
setnz al  +
mov [ebp+var_24] eax +
movzx eax [ebp+arg_4] +
mov [ebp+var_18] eax +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_10  +
cmp eax 3 +
jnz loc_100B062  +
xor eax eax +
mov [ebp+var_24] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
lea eax [ebp+var_30] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
call MSSWCH_14  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_100B0B0  +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_100B0B0  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call MSSWCH_10  +
cmp eax 1 +
jnz loc_100B0A7  +
mov [esi+0Ch] al +
jmp loc_100B0B0  +
cmp eax 2 +
jnz loc_100B0B0  +
mov byte ptr [esi+0Dh] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
lea eax [ebp+Param] +
push eax  +
push hInstance  +
mov eax offset aMsswchx +
push esi  +
push esi  +
push 0Ah  +
push 0Ah  +
push esi  +
push esi  +
push 0CF0000h  +
push eax  +
push eax  +
mov [ebp+Param] esi +
mov [ebp+var_28] esi +
mov [ebp+var_24] esi +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
call sub_100D12D  +
push esi  +
push eax  +
call ds:ShowWindow  +
push dword ptr [edi]  +
call ds:SetEvent  +
mov edi ds:GetMessageW +
jmp loc_100B134  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_100B120  +
mov ecx [ebp+var_4] +
mov eax [ebp+Msg.wParam] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset LibFileName  +
mov esi ecx +
call ds:LoadLibraryW  +
mov edi ds:__imp_GetProcAddress +
push 4  +
push eax  +
mov [esi+14h] eax +
call edi  +
push 6  +
push dword ptr [esi+14h]  +
mov [esi] eax +
call edi  +
push 5  +
push dword ptr [esi+14h]  +
mov [esi+4] eax +
call edi  +
push 2  +
push dword ptr [esi+14h]  +
mov [esi+8] eax +
call edi  +
lea ecx [esi+18h] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_0] +
push ecx  +
push eax  +
mov [esi+10h] eax +
call dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 3F7h  +
push dword ptr [esi+10h]  +
call ds:KillTimer  +
mov eax [esi+0Ch] +
xor edi edi +
cmp eax edi +
jz loc_100B1D5  +
call eax  +
mov [esi+0Ch] edi +
mov eax [esi+14h] +
cmp eax edi +
jz loc_100B1F1  +
push eax  +
call ds:__imp_FreeLibrary  +
mov [esi+14h] edi +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
cmp dword ptr [ecx+14h] 0 +
jz locret_100B205  +
push dword ptr [ecx+10h]  +
call dword ptr [ecx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_100B264  +
push 1  +
push 3  +
push [ebp+arg_0]  +
mov [ebp+var_30] 30h +
call MSSWCH_12  +
lea ecx [ebp+var_30] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call MSSWCH_11  +
test [ebp+var_24] 1 +
jz loc_100B256  +
push 0  +
push 0  +
push 3F7h  +
push dword ptr [esi+10h]  +
call ds:SetTimer  +
jmp loc_100B264  +
push 3F7h  +
push dword ptr [esi+10h]  +
call ds:KillTimer  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 3 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_8] 0 +
mov byte ptr [ebp+var_4] 0 +
jnz loc_100B296  +
mov al [esi+10h] +
mov byte ptr [ebp+var_8] al +
mov al [esi+12h] +
mov byte ptr [ebp+var_4] al +
push [ebp+var_8]  +
call sub_100AEE8  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_100B2A9  +
mov esi [esi+14h] +
jmp loc_100B2AB  +
xor esi esi +
push esi  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100AFEC  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor bl bl +
cmp dword ptr [esi+14h] 0 +
jz loc_100B2EF  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [esi+8]  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
jz loc_100B2EF  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100B20B  +
xor eax eax +
test bl bl +
pop esi  +
setnz al  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
xor ebx ebx +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
jz loc_100B394  +
dec eax  +
jz loc_100B380  +
sub eax 0Eh +
jz loc_100B377  +
dec eax  +
jz loc_100B372  +
sub eax 5 +
jz loc_100B387  +
sub eax 34h +
jz loc_100B35C  +
sub eax 0C9h +
jz loc_100B34F  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:DefWindowProcW  +
mov ebx eax +
jmp loc_100B3AB  +
cmp esi ebx +
jz loc_100B3AB  +
mov ecx esi +
call sub_100B1F9  +
jmp loc_100B3AB  +
cmp esi ebx +
jz loc_100B3AB  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
call sub_100B2C1  +
movzx ebx al +
jmp loc_100B3AB  +
xor ebx ebx +
inc ebx  +
jmp loc_100B3AB  +
push edi  +
call ds:DestroyWindow  +
jmp loc_100B3AB  +
push ebx  +
call ds:PostQuitMessage  +
cmp esi ebx +
jz loc_100B3AB  +
mov ecx esi +
call sub_100B1B3  +
jmp loc_100B3AB  +
mov eax [ebp+14h] +
mov esi [eax] +
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
push edi  +
mov ecx esi +
call sub_100B159  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_8] 80004005h +
xor edi edi +
push 2  +
push dword ptr [esi]  +
call MSSWCH_13  +
mov [esi+4] eax +
cmp eax ebx +
jnz loc_100B3F2  +
push 1F4h  +
call ds:Sleep  +
inc edi  +
cmp edi 3Ch +
jl loc_100B3D1  +
cmp [esi+4] ebx +
jz loc_100B4AB  +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
lea eax [ebp+var_14] +
push eax  +
push 1  +
push 403h  +
push dword ptr [esi]  +
mov [ebp+var_14] 8 +
call ds:ChangeWindowMessageFilterEx  +
push ebx  +
push dword ptr [esi]  +
call MSSWCH_1  +
mov eax hInstance +
push ebx  +
mov [ebp+WndClass.style] 0Bh +
mov [ebp+WndClass.lpfnWndProc] offset loc_100B301 +
mov [ebp+WndClass.cbClsExtra] ebx +
mov [ebp+WndClass.cbWndExtra] ebx +
mov [ebp+WndClass.hInstance] eax +
mov [ebp+WndClass.hIcon] ebx +
mov [ebp+WndClass.hCursor] ebx +
call ds:GetStockObject  +
mov [ebp+WndClass.hbrBackground] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.lpszMenuName] ebx +
mov [ebp+WndClass.lpszClassName] offset aMsswchx +
call ds:RegisterClassW  +
test ax ax +
jz loc_100B4AB  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov [ebp+ThreadId] ebx +
call ds:CreateEventW  +
mov [ebp+hHandle] eax +
cmp eax ebx +
jz loc_100B4AB  +
lea eax [ebp+ThreadId] +
push eax  +
push ebx  +
lea eax [ebp+hHandle] +
push eax  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov [esi+8] eax +
cmp eax ebx +
jz loc_100B4AB  +
push 0BB8h  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
mov [ebp+var_8] ebx +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+10h] eax +
mov eax [ebp+arg_4] +
mov [ecx+24h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+24h] +
push edi  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_1014A30  +
xor edi edi +
cmp [esi] edi +
jle loc_100B508  +
mov ecx [esi+4] +
mov eax edi +
cdq   +
idiv  ecx +
mov ecx [esi+24h] +
push edx  +
push eax  +
push 0  +
push 0  +
push 0  +
call sub_1014DAE  +
inc edi  +
cmp edi [esi] +
jl loc_100B4EB  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx dword ptr [ebp+CharType] +
test ebx ebx +
jz loc_100B565  +
mov eax dword ptr [ebp+SrcStr] +
push esi  +
lea esi [eax-1] +
push edi  +
movzx edi word ptr [ecx+10h] +
mov [ebp+var_4] eax +
test esi esi +
jl loc_100B563  +
movzx eax word ptr [ebx+esi*2] +
and dword ptr [ebp+CharType] 0 +
mov dword ptr [ebp+SrcStr] eax +
lea eax [ebp+CharType] +
push eax  +
push 1  +
lea eax [ebp+SrcStr] +
push eax  +
push 1  +
push edi  +
call ds:GetStringTypeExW  +
test eax eax +
jz loc_100B563  +
test byte ptr [ebp+CharType] 10h +
jnz loc_100B563  +
dec [ebp+var_4]  +
dec esi  +
jns loc_100B535  +
pop edi  +
pop esi  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push esi  +
push edi  +
xor edi edi +
lea esi [ebp+pInputs.anonymous_0] +
xor eax eax +
mov [esi] ax +
mov ax [ebp+arg_0] +
mov [esi+2] ax +
mov eax edi +
neg eax  +
sbb eax eax +
and dword ptr [esi+8] 0 +
and eax 2 +
or eax 4 +
mov dword ptr [esi-4] 1 +
mov [esi+4] eax +
call ds:GetMessageExtraInfo  +
mov [esi+0Ch] eax +
inc edi  +
add esi 1Ch +
cmp edi 2 +
jl loc_100B581  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 2  +
call ds:SendInput  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_100950D  +
test eax eax +
jl loc_100B626  +
mov ecx [ebp+var_4] +
lea eax [ebp+Data] +
push eax  +
push 0Ch  +
call sub_10090DA  +
test eax eax +
jl loc_100B626  +
cmp dword ptr [ebp+Data] 0 +
mov ecx [ebp+var_4] +
setnz al  +
mov [esi+0Ch] al +
lea eax [ebp+Data] +
push eax  +
push 0Dh  +
call sub_10090DA  +
test eax eax +
jl loc_100B626  +
cmp dword ptr [ebp+Data] 0 +
setnz cl  +
mov [esi+0Dh] cl +
pop esi  +
leave   +
retn   +
***
mov ecx dword_1026CA4 +
xor eax eax +
test ecx ecx +
jz locret_100B63D  +
mov eax [ecx+20h] +
retn   +
***
xor eax eax +
cmp dword_1026CA4 eax +
setnz al  +
retn   +
***
xor eax eax +
cmp [ecx+4] eax +
jle locret_100B670  +
mov edx [ecx+1Ch] +
push esi  +
xor esi esi +
mov [ecx+18h] eax +
mov [edx] si +
mov [ecx+20h] eax +
pop esi  +
jmp sub_100B4D2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
cmp dword ptr [esi+18h] 0 +
jle loc_100B792  +
movzx eax [ebp+arg_0] +
cmp eax [esi+8] +
jle loc_100B6AD  +
mov ax [esi+8] +
sub ax [esi+4] +
add [ebp+arg_0] ax +
movzx eax [ebp+arg_0] +
mov ecx [esi+8] +
cdq   +
idiv  ecx +
push 80h  +
lea ecx [ebp+CharType] +
push ecx  +
mov ecx [esi+24h] +
push edx  +
push eax  +
push 0  +
call sub_1014F0B  +
test eax eax +
jl loc_100B792  +
xor eax eax +
mov [ebp+var_6] ax +
lea eax [ebp+CharType] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B6E6  +
push ebx  +
sub eax edx +
sar eax 1 +
push edi  +
push dword ptr [esi+1Ch]  +
mov ebx eax +
lea eax [ebp+CharType] +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
lea ecx [ebp+CharType] +
cmp eax ecx +
jnz loc_100B71B  +
mov eax ebx +
sub eax [esi+18h] +
jmp loc_100B742  +
push dword ptr [esi+18h]  +
mov ecx esi +
push dword ptr [esi+1Ch]  +
call sub_100B510  +
mov edi eax +
push ebx  +
lea eax [ebp+CharType] +
push eax  +
mov ecx esi +
call sub_100B510  +
sub edi eax +
sub edi [esi+18h] +
add edi ebx +
mov eax edi +
test eax eax +
jle loc_100B765  +
cmp eax ebx +
jge loc_100B765  +
mov edi ebx +
sub edi eax +
jmp loc_100B761  +
movzx eax [ebp+edi*2+CharType] +
push eax  +
mov ecx esi +
call sub_100B572  +
inc edi  +
cmp edi ebx +
jl loc_100B750  +
cmp byte ptr [esi+0Dh] 0 +
pop edi  +
pop ebx  +
jz loc_100B776  +
push 20h  +
mov ecx esi +
call sub_100B572  +
mov eax [esi+34h] +
mov ecx [eax] +
lea edx [ebp+CharType] +
push edx  +
movzx edx word ptr [esi+10h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ecx esi +
call sub_100B654  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0Ch +
jnz loc_100B7C2  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
mov [ecx+0Ch] al +
call sub_100B654  +
jmp loc_100B7D2  +
cmp dword ptr [ebp+8] 0Dh +
jnz loc_100B7D2  +
cmp dword ptr [ebp+0Ch] 0 +
setnz al  +
mov [ecx+0Dh] al +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp [ecx+10h] eax +
jz loc_100B7F0  +
mov [ecx+10h] eax +
call sub_100B654  +
pop ebp  +
retn 4  +
***
jmp sub_100B654  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] cl +
mov [eax+0Dh] cl +
mov [eax+10h] ecx +
mov byte ptr [eax+14h] 1 +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
mov [eax+30h] ecx +
mov [eax+34h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor bl bl +
call ds:GetSystemDefaultLangID  +
and [ebp+ppv] 0 +
movzx esi ax +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1002078  +
push 1  +
push 0  +
push offset stru_1002088  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_100B8AF  +
mov eax [ebp+ppv] +
and [ebp+var_4] 0 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
movzx edx si +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100B8A2  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100B8A2  +
mov ebx [ebp+var_C] +
shr ebx 0Fh +
and bl 1 +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100B8AF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_100B8BC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jnz loc_100B8F9  +
movzx ecx [ebp+arg_0] +
mov eax [esi] +
cdq   +
idiv  ecx +
push ecx  +
mov ecx [esi+24h] +
mov [esi+4] eax +
call sub_10155E9  +
mov edi eax +
test edi edi +
jl loc_100B8F9  +
mov ecx esi +
call sub_100B654  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
push dword ptr [esi+1Ch]  +
lea ecx [ebp+var_10] +
call loc_1005E48  +
xor ebx ebx +
cmp [ebp+var_10] ebx +
jz loc_100BA51  +
movzx ecx word ptr [esi+10h] +
mov eax [esi+30h] +
lea edi [ebp+var_8] +
push edi  +
push ecx  +
push [ebp+var_10]  +
mov [ebp+var_8] ebx +
mov edx [eax] +
push eax  +
call dword ptr [edx+24h]  +
test eax eax +
jl loc_100BA44  +
mov ecx esi +
mov [ebp+var_4] ebx +
xor edi edi +
mov [ebp+var_C] ebx +
call sub_100B4D2  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_4] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jnz loc_100B9A0  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100B97F  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp [esi] edi +
jz loc_100B99B  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_4] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jz loc_100B96F  +
cmp edi 5 +
jge loc_100B9A5  +
mov [esi+8] edi +
jmp loc_100B9B9  +
cmp edi 7 +
jge loc_100B9B3  +
mov dword ptr [esi+8] 3 +
jmp loc_100B9B9  +
mov eax [esi+4] +
mov [esi+8] eax +
push dword ptr [esi+8]  +
mov ecx [esi+24h] +
push edi  +
call sub_1014A30  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
xor edi edi +
jmp loc_100BA1D  +
cmp [esi] edi +
jz loc_100BA34  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100B9F6  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_18] ebx +
jl loc_100BA34  +
mov ecx [esi+8] +
mov eax edi +
cdq   +
idiv  ecx +
mov ecx [esi+24h] +
push edx  +
push eax  +
push ebx  +
push 0Ah  +
push [ebp+var_14]  +
call sub_1014DAE  +
push [ebp+var_14]  +
call ds:SysFreeString  +
inc edi  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_4] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jz loc_100B9D2  +
mov eax [ebp+var_4] +
mov [esi+20h] edi +
cmp eax ebx +
jz loc_100BA44  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_100BA51  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword_1026ADC ebx +
jz loc_100BAB4  +
mov al byte_1026AE0 +
cmp al 4 +
jnb loc_100BA66  +
cmp al bl +
jnz loc_100BAB4  +
mov eax dword_1026AC8 +
mov ecx dword_1026ACC +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_100BAB4  +
mov eax dword_1026AD0 +
mov edi dword_1026AD4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100BAB4  +
cmp edx edi +
jnz loc_100BAB4  +
push offset dword_1001688  +
push dword_1026AB4  +
push dword_1026AB0  +
call sub_1004479  +
push [ebp+var_10]  +
call ds:SysFreeString  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026CA4 +
pop ebp  +
jmp loc_100B676  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026CA4 +
test ecx ecx +
jz loc_100BAF2  +
pop ebp  +
jmp loc_100B7A6  +
***
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
call sub_100B654  +
mov eax [esi+28h] +
and [ebp+var_4] 0 +
lea edx [ebp+var_4] +
push edx  +
mov byte ptr [esi+14h] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl loc_100BB4B  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100BB58  +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push 7543h  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
jl loc_100BB4B  +
or eax 0FFFFFFFFh +
cmp ax [ebp+var_C] +
setz al  +
mov [esi+14h] al +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100BB58  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
test eax eax +
jz loc_100BB7B  +
push eax  +
call ??_V@YAXPAX@Z  +
and dword ptr [esi+1Ch] 0 +
pop ecx  +
push ebx  +
push edi  +
lea edi [esi+34h] +
push 0  +
mov ecx edi +
call sub_1007029  +
lea ebx [esi+30h] +
push 0  +
mov ecx ebx +
call sub_1007029  +
lea ecx [esi+2Ch] +
push 0  +
mov [ebp+var_4] ecx +
call sub_1007029  +
add esi 28h +
push 0  +
mov ecx esi +
call sub_1007029  +
mov edi [edi] +
test edi edi +
jz loc_100BBBA  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov ebx [ebx] +
test ebx ebx +
jz loc_100BBC6  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp+var_4] +
mov eax [eax] +
pop edi  +
pop ebx  +
test eax eax +
jz loc_100BBD7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
test esi esi +
jz loc_100BBE3  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov byte ptr [eax] 0 +
call sub_100C1E3  +
test al al +
jnz loc_100BCD8  +
mov ecx esi +
call sub_100B83A  +
test al al +
jz loc_100BCD8  +
push ebx  +
mov ebx ds:CoCreateInstance +
push edi  +
lea edi [esi+2Ch] +
push edi  +
push offset stru_10020C8  +
push 17h  +
push 0  +
push offset stru_1002058  +
call ebx  +
test eax eax +
jl loc_100BCD6  +
mov eax [edi] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_100BCD6  +
mov eax [edi] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl loc_100BCD6  +
mov edi [edi] +
mov eax [edi] +
lea ecx [esi+30h] +
push ecx  +
push edi  +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_100BCD6  +
lea eax [esi+34h] +
push eax  +
push offset stru_10020D8  +
push 17h  +
push 0  +
push offset stru_1002068  +
call ebx  +
test eax eax +
jl loc_100BCD6  +
lea eax [esi+28h] +
push eax  +
push offset stru_10020B8  +
push 17h  +
push 0  +
push offset stru_10021F0  +
call ebx  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100BCD6  +
mov ecx esi +
call sub_100B5D3  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100BCD6  +
push 100h  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi+1Ch] eax +
test eax eax +
jz loc_100BCCF  +
mov eax [ebp+arg_4] +
mov byte ptr [eax] 1 +
mov eax [ebp+arg_0] +
mov [esi] eax +
jmp loc_100BCD6  +
mov [ebp+var_4] 8007000Eh +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
xor eax eax +
cmp [esi+0Ch] al +
jz loc_100BD2B  +
cmp [esi+14h] al +
jnz loc_100BD2B  +
xor ecx ecx +
cmp cx [ebp+SrcStr] +
jz loc_100BD8E  +
push 8  +
pop ecx  +
cmp cx [ebp+SrcStr] +
jnz loc_100BD30  +
mov eax [esi+18h] +
cmp eax 1 +
jle loc_100BD8E  +
mov ecx [esi+1Ch] +
dec eax  +
xor edx edx +
mov [esi+18h] eax +
mov [ecx+eax*2] dx +
mov ecx esi +
call sub_100B906  +
pop esi  +
leave   +
retn 4  +
lea ecx [ebp+CharType] +
push ecx  +
push 1  +
lea ecx [ebp+SrcStr] +
mov dword ptr [ebp+CharType] eax +
movzx eax word ptr [esi+10h] +
push ecx  +
push 1  +
push eax  +
call ds:GetStringTypeExW  +
test eax eax +
jz loc_100BD8E  +
mov ecx dword ptr [ebp+CharType] +
mov eax 100h +
and ecx eax +
cmp cx ax +
jz loc_100BD63  +
test byte ptr [ebp+CharType] 14h +
jz loc_100BD8E  +
mov eax [esi+18h] +
lea ecx [eax+1] +
cmp ecx 80h +
jge loc_100BD8E  +
mov ecx [esi+1Ch] +
mov dx [ebp+SrcStr] +
mov [ecx+eax*2] dx +
mov eax [esi+18h] +
mov ecx [esi+1Ch] +
xor edx edx +
mov [ecx+eax*2+2] dx +
inc dword ptr [esi+18h]  +
jmp loc_100BD24  +
mov ecx esi +
call sub_100B654  +
jmp loc_100BD2B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BB60  +
test [ebp+arg_0] 1 +
jz loc_100BDB6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx dword_1026CA4 +
test ecx ecx +
jz loc_100BDD3  +
push 1  +
call sub_100BD9C  +
and dword_1026CA4 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1026CA4 +
test ecx ecx +
jz loc_100BDF5  +
pop ebp  +
jmp loc_100BCE5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov byte ptr [edi] 0 +
and dword ptr [eax] 0 +
push 38h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100BE28  +
mov ecx eax +
call sub_100B803  +
mov esi eax +
jmp loc_100BE2A  +
xor esi esi +
test esi esi +
jz loc_100BE5D  +
push edi  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100BBEB  +
mov [ebp+arg_4] eax +
test eax eax +
jl loc_100BE52  +
cmp byte ptr [edi] 0 +
jz loc_100BE52  +
mov eax [ebp+arg_8] +
mov dword_1026CA4 esi +
mov [eax] esi +
jmp loc_100BE64  +
push 1  +
mov ecx esi +
call sub_100BD9C  +
jmp loc_100BE64  +
mov [ebp+arg_4] 8007000Eh +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov ecx dword_1026CDC +
xor eax eax +
test ecx ecx +
jz locret_100BE80  +
mov eax [ecx] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
dec eax  +
cmp eax 1 +
ja loc_100BE9D  +
push dword ptr [ecx]  +
call ds:DestroyWindow  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+hWnd] +
push edi  +
push 8  +
push esi  +
xor edi edi +
call ds:GetWindowLongW  +
mov edx [ebp+arg_4] +
dec edx  +
dec edx  +
jz loc_100BF05  +
sub edx 0Eh +
jz loc_100BEFC  +
sub edx 100h +
jz loc_100BEE2  +
dec edx  +
jnz loc_100BF35  +
cmp eax edi +
jz loc_100BF35  +
push [ebp+arg_8]  +
mov ecx eax +
call sub_100BE86  +
jmp loc_100BEF7  +
mov edi [ebp+dwNewLong] +
push edi  +
push 8  +
push esi  +
call ds:SetWindowLongW  +
push esi  +
mov [edi] esi +
call sub_1008207  +
xor edi edi +
inc edi  +
jmp loc_100BF35  +
push esi  +
call ds:DestroyWindow  +
jmp loc_100BF35  +
cmp eax edi +
jz loc_100BF2F  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
push edi  +
push 8  +
push esi  +
call ds:SetWindowLongW  +
push esi  +
call ds:GetParent  +
push edi  +
push edi  +
push 40Ch  +
push eax  +
call ds:PostMessageW  +
mov dword_1026CDC edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp dword_1026CDC edi +
jnz loc_100BFAC  +
push 4  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100BF62  +
and [eax] edi +
jmp loc_100BF64  +
xor eax eax +
mov dword_1026CDC eax +
test eax eax +
jz loc_100BFBA  +
push eax  +
push offset sub_100BEA6  +
push [ebp+hWndParent]  +
push 138Ah  +
push hInstance  +
call sub_100D1E6  +
mov edi eax +
test edi edi +
jz loc_100BF97  +
push 1  +
push edi  +
call ds:ShowWindow  +
jmp loc_100BFBA  +
push dword_1026CDC  +
call ??3@YAXPAX@Z  +
and dword_1026CDC 0 +
pop ecx  +
jmp loc_100BFBA  +
call sub_100BE72  +
mov edi eax +
push edi  +
call ds:SetForegroundWindow  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C4h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:GetKeyState +
push edi  +
push 0A2h  +
call esi  +
mov edi 8000h +
xor ebx ebx +
mov ecx edi +
inc ebx  +
test ax cx +
jz loc_100C01A  +
mov [ebp+var_4] ebx +
push 0A3h  +
call esi  +
push 2  +
test ax di +
pop edi  +
jz loc_100C02C  +
or [ebp+var_4] edi +
push 0A4h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100C041  +
or [ebp+var_4] 4 +
push 0A5h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100C056  +
or [ebp+var_4] 8 +
push 0A0h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100C06B  +
or [ebp+var_4] 10h +
push 0A1h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100C080  +
or [ebp+var_4] 20h +
and [ebp+pInputs.type] 0 +
push 1BCh  +
lea eax [ebp+pInputs.anonymous_0] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
test byte ptr [ebp+var_4] bl +
jz loc_100C0BE  +
mov eax 0A2h +
mov word ptr [ebp+pInputs.anonymous_0] ax +
mov [ebp+pInputs.type] ebx +
mov dword ptr [ebp+pInputs.anonymous_0+4] edi +
mov eax ebx +
test byte ptr [ebp+var_4] 2 +
push 3  +
pop esi  +
jz loc_100C0E2  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A3h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 4 +
jz loc_100C103  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A4h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 8 +
jz loc_100C124  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A5h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 10h +
jz loc_100C145  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A0h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 20h +
jz loc_100C166  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A1h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 5Bh  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 55h  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov [ecx+4] dx +
mov [ecx] ebx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
push 5Bh  +
lea ecx [ebp+ecx+pInputs] +
pop edx  +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
push 1Ch  +
lea ecx [ebp+pInputs] +
push ecx  +
inc eax  +
push eax  +
call ds:SendInput  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+var_D] 1 +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_100C24F  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_100C246  +
cmp [ebp+var_18] 1 +
setz [ebp+var_D]  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov al [ebp+var_D] +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
call sub_100C1E3  +
test al al +
jnz loc_100C2CC  +
push ebx  +
push ebx  +
push 2001Fh  +
push 1  +
push ebx  +
push offset aSoftwareMicr_2  +
push 80000001h  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
call sub_1007B45  +
test eax eax +
jnz loc_100C2C4  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_C] +
push offset aOsk  +
call sub_100BFC6  +
test eax eax +
jnz loc_100C2BC  +
call sub_100BFE9  +
mov bl 1 +
lea ecx [ebp+var_C] +
call sub_1007B27  +
lea ecx [ebp+var_C] +
call sub_1007B27  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
xor ebx ebx +
push ebx  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsProcessInJob  +
cmp eax 1 +
jnz loc_100C2FD  +
cmp [ebp+var_4] eax +
jz loc_100C306  +
push 3  +
call sub_100C264  +
mov bl al +
mov al bl +
pop ebx  +
leave   +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ds:LoadStringW +
push edi  +
xor eax eax +
mov [ebp+Caption] ax +
mov [ebp+Text] ax +
mov edi 104h +
push edi  +
lea eax [ebp+Caption] +
push eax  +
push 3E8h  +
push hInstance  +
call esi  +
push edi  +
lea eax [ebp+Text] +
push eax  +
push [ebp+uID]  +
push hInstance  +
call esi  +
push 10h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push ebx  +
call ds:MessageBoxW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
jns loc_100C3F2  +
movzx eax cx +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_100C471  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_100C44F  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_100C444  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_10021C4 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jz loc_100C471  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_100C471  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_100C471  +
call GetLastError  +
cmp eax 7Eh +
jz loc_100C460  +
cmp eax 0C1h +
jnz loc_100C4B3  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_100C477  +
mov [ebp+hModule] eax +
cmp [ebp+hModule] 0FFFFFFFFh +
jnz loc_100C480  +
mov [ebp+var_4] 1 +
jmp loc_100C4B3  +
cmp [ebp+hModule] 0 +
jz loc_100C4B3  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_100C4A8  +
call GetLastError  +
cmp eax 7Fh +
jz loc_100C4A8  +
cmp eax 0B6h +
jnz loc_100C4AF  +
mov [ebp+var_4] 1 +
test esi esi +
jnz loc_100C4BE  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_100C4C9  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100C547  +
test eax eax +
jnz loc_100C54C  +
mov ecx [esi] +
test ecx ecx +
jz loc_100C544  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100C538  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1026D04 +
push offset dword_1026CF4  +
push dword_1026D00  +
mov dword_1026CF4 eax +
push offset unk_1026CE4  +
push offset unk_1026CE8  +
push offset unk_1026CE0  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1026CF0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100C5EF  +
cmp eax esi +
jnz loc_100C5E2  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100C5F2  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100C5C9  +
xor esi esi +
inc esi  +
mov eax dword_10276F4 +
cmp eax esi +
jnz loc_100C605  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100C634  +
mov eax dword_10276F4 +
test eax eax +
jnz loc_100C62E  +
mov dword_10276F4 esi +
push offset dword_100154C  +
push offset dword_1001540  +
call sub_100C52B  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C634  +
jmp loc_100C758  +
mov dword_1026CFC esi +
mov eax dword_10276F4 +
cmp eax esi +
jnz loc_100C658  +
push offset dword_100153C  +
push offset dword_1001504  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10276F4 2 +
cmp [ebp+var_20] ebx +
jnz loc_100C665  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10276FC ebx +
jz loc_100C686  +
push offset dword_10276FC  +
call sub_100CA39  +
pop ecx  +
test eax eax +
jz loc_100C686  +
push ebx  +
push 2  +
push ebx  +
call dword_10276FC  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_100C758  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_100C6AB  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100C6C0  +
cmp cx 20h +
ja loc_100C6C0  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_100C6AB  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100C6CC  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_100C6CF  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push offset __ImageBase  +
call _wWinMain@16  +
mov dword_1026CF8 eax +
cmp dword_1026CEC ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_100C701  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_100C695  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1026CF8 eax +
xor ebx ebx +
cmp dword_1026CEC ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1026CFC ebx +
jnz loc_100C743  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1026CF8 +
jmp loc_100C764  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jz loc_100C781  +
xor eax eax +
jmp loc_100C7CE  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_100C77D  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100C7BB  +
cmp ecx 20Bh +
jnz loc_100C77D  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100C77D  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100C7C9  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100C77D  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1026CEC eax +
call sub_100CC78  +
push eax  +
call ds:__set_app_type  +
or dword_10276EC 0FFFFFFFFh +
or dword_10276F0 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1026D0C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1026D08 +
mov [eax] ecx +
call sub_100CB64  +
cmp dword_10261B8 0 +
jnz loc_100C827  +
push offset sub_100CB64  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100CB4C  +
xor eax eax +
retn   +
***
call sub_100CCB7  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_10261A8 +
jnz loc_100C85A  +
retn 0  +
jmp loc_100CD4D  +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_100C892  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_100C8D3  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_100C8A0  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_100C8CE  +
cmp edx [esp+arg_4] +
ja loc_100C8CE  +
jb loc_100C8CF  +
cmp eax [esp+arg_0] +
jbe loc_100C8CF  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100C982  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100C982  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100C97C  +
cmp eax 19930521h +
jz loc_100C97C  +
cmp eax 19930522h +
jz loc_100C97C  +
cmp eax 1994000h +
jnz loc_100C982  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100C944+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100C9C6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100C9C2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100CA2D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100CA25  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100CA2F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100CA15  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_100C9B0  +
pop ecx  +
test eax eax +
jz loc_100CA96  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100C9F0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100CA96  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100CA9F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100C84F  +
push offset dword_10261A8  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_100CB6C  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100CC6B  +
cmp ecx 0FFFFFFFFh +
jz loc_100CC6B  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100CC64  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100CC64  +
cmp edx 10000000h +
jnb loc_100CC64  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100CC64  +
jmp loc_100CC5F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100CCAD  +
push eax  +
call sub_100CC12  +
test eax eax +
jz loc_100CCAD  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100CCA2  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100CCAD  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10261A8 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100CCE9  +
test eax ebx +
jz loc_100CCE9  +
not eax  +
mov dword_10261AC eax +
jmp loc_100CD44  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100CD30  +
test dword_10261A8 ebx +
jnz loc_100CD35  +
mov esi 0BB40E64Fh +
mov dword_10261A8 esi +
not esi  +
mov dword_10261AC esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1026E10 eax +
mov dword_1026E0C ecx +
mov dword_1026E08 edx +
mov dword_1026E04 ebx +
mov dword_1026E00 esi +
mov dword_1026DFC edi +
mov word_1026E28 ss +
mov word_1026E1C cs +
mov word_1026DF8 ds +
mov word_1026DF4 es +
mov word_1026DF0 fs +
mov word_1026DEC gs +
pushf   +
pop dword_1026E20  +
mov eax [ebp+0] +
mov dword_1026E14 eax +
mov eax [ebp+4] +
mov dword_1026E18 eax +
lea eax [ebp+8] +
mov dword_1026E24 eax +
mov eax [ebp-320h] +
mov dword_1026D60 10001h +
mov eax dword_1026E18 +
mov dword_1026D1C eax +
mov dword_1026D10 0C0000409h +
mov dword_1026D14 1 +
mov eax dword_10261A8 +
mov [ebp-328h] eax +
mov eax dword_10261AC +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov eax offset PlaySoundW +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset WINMM_dll_import_table  +
call sub_100C3A8  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseActCtx  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push eax  +
push [ebp+arg_0]  +
call ds:ActivateActCtx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0  +
call ds:DeactivateActCtx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100CF8B  +
pop ebp  +
jmp loc_100CF61  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_10261BC 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
jnz loc_100D052  +
and [ebp+var_22C] 0 +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_228] +
stos   +
pop edi  +
test esi esi +
jnz loc_100CFDD  +
push eax  +
call ds:GetModuleHandleW  +
mov esi eax +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push esi  +
call ds:GetModuleFileNameW  +
lea eax [ebp+Filename] +
mov [ebp+var_224] eax +
movzx eax [ebp+arg_4] +
mov [ebp+var_218] eax +
lea eax [ebp+var_22C] +
push eax  +
mov [ebp+var_22C] 20h +
mov [ebp+var_228] 88h +
mov [ebp+var_210] esi +
call ds:CreateActCtxW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100D052  +
push 0FFFFFFFFh  +
push esi  +
push offset dword_10261BC  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax 0FFFFFFFFh +
jz loc_100D04D  +
push esi  +
call sub_100CF32  +
call sub_100D22E  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp dword_10261BC 0FFFFFFFFh +
pop esi  +
setnz al  +
xor ecx ebp +
call sub_100C84F  +
leave   +
retn 8  +
***
mov eax dword_10261BC +
cmp eax 0FFFFFFFFh +
jz loc_100D089  +
push eax  +
call sub_100CF32  +
or dword_10261BC 0FFFFFFFFh +
cmp dword_1027034 0 +
jz locret_100D099  +
or dword_1027034 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
cmp dword_10261BC 0FFFFFFFFh +
jnz loc_100D0DB  +
mov eax dword_1027034 +
test eax eax +
jz loc_100D0E9  +
cmp eax 0FFFFFFFFh +
jnz loc_100D0C6  +
xor eax eax +
jmp loc_100D0EC  +
push dword_1027030  +
push eax  +
call sub_100CF94  +
cmp dword_10261BC 0FFFFFFFFh +
jz loc_100D0E9  +
push esi  +
push dword_10261BC  +
call sub_100CF43  +
jmp loc_100D0EC  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100D09F  +
test eax eax +
jz locret_100D124  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryW  +
push [ebp+var_4]  +
mov esi eax +
call sub_100CF7A  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100D09F  +
test eax eax +
jz locret_100D180  +
push esi  +
call sub_100D22E  +
push [ebp+lpParam]  +
push [ebp+hInstance]  +
push [ebp+hMenu]  +
push [ebp+hWndParent]  +
push [ebp+nHeight]  +
push [ebp+nWidth]  +
push [ebp+Y]  +
push [ebp+X]  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push [ebp+lpClassName]  +
push 0  +
call ds:CreateWindowExW  +
push [ebp+var_4]  +
mov esi eax +
call sub_100CF7A  +
mov eax esi +
pop esi  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100D09F  +
test eax eax +
jz locret_100D1DD  +
push esi  +
call sub_100D22E  +
push [ebp+lpParam]  +
push [ebp+hInstance]  +
push [ebp+hMenu]  +
push [ebp+hWndParent]  +
push [ebp+nHeight]  +
push [ebp+nWidth]  +
push [ebp+Y]  +
push [ebp+X]  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push [ebp+lpClassName]  +
push [ebp+dwExStyle]  +
call ds:CreateWindowExW  +
push [ebp+var_4]  +
mov esi eax +
call sub_100CF7A  +
mov eax esi +
pop esi  +
leave   +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100D09F  +
test eax eax +
jz locret_100D225  +
push esi  +
call sub_100D22E  +
push [ebp+dwInitParam]  +
push [ebp+lpDialogFunc]  +
push [ebp+hWndParent]  +
push [ebp+lpTemplateName]  +
push [ebp+hInstance]  +
call ds:CreateDialogParamW  +
push [ebp+var_4]  +
mov esi eax +
call sub_100CF7A  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov eax dword_1027050 +
test eax eax +
jnz loc_100D25E  +
push esi  +
mov esi offset aComctl32_dll +
push esi  +
call sub_100D0F6  +
mov dword_1027050 eax +
test eax eax +
jnz loc_100D25D  +
call sub_100D072  +
push esi  +
call ds:LoadLibraryW  +
mov dword_1027050 eax +
pop esi  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
mov eax offset __imp_InitProcessPriv +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset DUI70_dll_import_table  +
call sub_100C3A8  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset __imp_UnInitProcessPriv +
jmp loc_100D27E  +
***
mov eax offset __imp_UnInitThread +
jmp loc_100D27E  +
***
mov eax offset ?EndDefer@Element@DirectUI@@QAEXK@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_InitThread +
jmp loc_100D27E  +
***
mov eax offset ?StartDefer@Element@DirectUI@@QAEXPAK@Z +
jmp loc_100D27E  +
***
mov eax offset ?Destroy@DUIXmlParser@DirectUI@@QAEXXZ +
jmp loc_100D27E  +
***
mov eax offset ?SetXMLFromResource@DUIXmlParser@DirectUI@@QAEJIPAUHINSTANCE__@@0@Z +
jmp loc_100D27E  +
***
mov eax offset ?Create@DUIXmlParser@DirectUI@@SGJPAPAV12@P6GPAVValue@2@PBGPAX@Z2P6GX11H2@Z2@Z +
jmp loc_100D27E  +
***
mov eax offset ?OnDestroy@HWNDElement@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
mov eax offset ?OnEvent@HWNDElement@DirectUI@@UAEXPAUEvent@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?ThemeChange@HWNDElement@DirectUI@@SG?AVUID@@XZ +
jmp loc_100D27E  +
***
mov eax offset ?WndProc@HWNDElement@DirectUI@@UAEJPAUHWND__@@IIJ@Z +
jmp loc_100D27E  +
***
mov eax offset ?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?ElementFromPoint@HWNDElement@DirectUI@@QAEPAVElement@2@PAUtagPOINT@@@Z +
jmp loc_100D27E  +
***
mov eax offset ??0HWNDElement@DirectUI@@QAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?IsRTLReading@Element@DirectUI@@UAE_NXZ +
jmp loc_100D27E  +
***
jmp ?IsRTLReading@Element@DirectUI@@UAE_NXZ  +
***
mov eax offset ?IsContentProtected@Element@DirectUI@@UAE_NXZ +
jmp loc_100D27E  +
***
jmp ?IsContentProtected@Element@DirectUI@@UAE_NXZ  +
***
mov eax offset ?GetContentStringAsDisplayed@Element@DirectUI@@UAEPBGPAPAVValue@2@@Z +
jmp loc_100D27E  +
***
jmp ?GetContentStringAsDisplayed@Element@DirectUI@@UAEPBGPAPAVValue@2@@Z  +
***
mov eax offset ?OnPropertyChanging@Element@DirectUI@@UAE_NPBUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
jmp ?OnPropertyChanging@Element@DirectUI@@UAE_NPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
mov eax offset ?OnPropertyChanging@Element@DirectUI@@UAE_NPAUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
jmp ?OnPropertyChanging@Element@DirectUI@@UAE_NPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
mov eax offset ?OnPropertyChanged@HWNDElement@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
jmp ?OnPropertyChanged@HWNDElement@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
mov eax offset ?OnPropertyChanged@Element@DirectUI@@UAEXPAUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
jmp ?OnPropertyChanged@Element@DirectUI@@UAEXPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
mov eax offset ?OnGroupChanged@HWNDElement@DirectUI@@UAEXH_N@Z +
jmp loc_100D27E  +
***
jmp ?OnGroupChanged@HWNDElement@DirectUI@@UAEXH_N@Z  +
***
mov eax offset ?OnKeyFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z +
jmp loc_100D27E  +
***
jmp ?OnKeyFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
mov eax offset ?OnMouseFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z +
jmp loc_100D27E  +
***
jmp ?OnMouseFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
mov eax offset ?Paint@Element@DirectUI@@UAEXPAUHDC__@@PBUtagRECT@@1PAU4@2@Z +
jmp loc_100D27E  +
***
jmp ?Paint@Element@DirectUI@@UAEXPAUHDC__@@PBUtagRECT@@1PAU4@2@Z  +
***
mov eax offset __imp_?GetContentSize@Element@DirectUI@@UAE?AUtagSIZE@@HHPAVSurface@2@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?Add@Element@DirectUI@@UAEJPAPAV12@I@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?Insert@Element@DirectUI@@UAEJPAPAV12@II@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?Remove@Element@DirectUI@@UAEJPAPAV12@I@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?GetAdjacent@Element@DirectUI@@UAEPAV12@PAV12@HPBUNavReference@2@K@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?EnsureVisible@Element@DirectUI@@UAE_NHHHH@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?SetKeyFocus@Element@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
mov eax offset __imp_?MessageCallback@Element@DirectUI@@UAEIPAUtagGMSG@@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?QueryInterface@Element@DirectUI@@UAGJABU_GUID@@PAPAX@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?_SelfLayoutDoLayout@Element@DirectUI@@MAEXHH@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?_SelfLayoutUpdateDesiredSize@Element@DirectUI@@MAE?AUtagSIZE@@HHPAVSurface@2@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?OnHosted@Element@DirectUI@@MAEXPAV12@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?OnUnHosted@Element@DirectUI@@MAEXPAV12@@Z +
jmp loc_100D27E  +
***
mov eax offset ?UpdateTooltip@HWNDElement@DirectUI@@UAEXPAVElement@2@@Z +
jmp loc_100D27E  +
***
jmp ?UpdateTooltip@HWNDElement@DirectUI@@UAEXPAVElement@2@@Z  +
***
mov eax offset ?ActivateTooltip@HWNDElement@DirectUI@@UAEXPAVElement@2@K@Z +
jmp loc_100D27E  +
***
jmp ?ActivateTooltip@HWNDElement@DirectUI@@UAEXPAVElement@2@K@Z  +
***
mov eax offset ?RemoveTooltip@HWNDElement@DirectUI@@UAEXPAVElement@2@@Z +
jmp loc_100D27E  +
***
jmp ?RemoveTooltip@HWNDElement@DirectUI@@UAEXPAVElement@2@@Z  +
***
mov eax offset __imp_?GetKeyFocused@Element@DirectUI@@UAE_NXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetClassInfoW@HWNDElement@DirectUI@@UAEPAUIClassInfo@2@XZ +
jmp loc_100D27E  +
***
jmp ?GetClassInfoW@HWNDElement@DirectUI@@UAEPAUIClassInfo@2@XZ  +
***
mov eax offset ?GetAccessibleImpl@HWNDElement@DirectUI@@UAEJPAPAUIAccessible@@@Z +
jmp loc_100D27E  +
***
jmp ?GetAccessibleImpl@HWNDElement@DirectUI@@UAEJPAPAUIAccessible@@@Z  +
***
mov eax offset __imp_?DefaultAction@Element@DirectUI@@UAEJXZ +
jmp loc_100D27E  +
***
mov eax offset __imp_?GetElementProviderImpl@Element@DirectUI@@UAEJPAVInvokeHelper@2@PAPAVElementProvider@2@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?HandleUiaDestroyListener@Element@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
mov eax offset __imp_?HandleUiaPropertyListener@Element@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?HandleUiaPropertyChangingListener@Element@DirectUI@@UAEXPBUPropertyInfo@2@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?HandleUiaEventListener@Element@DirectUI@@UAEXPAUEvent@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetHWND@HWNDElement@DirectUI@@UAEPAUHWND__@@XZ +
jmp loc_100D27E  +
***
jmp ?GetHWND@HWNDElement@DirectUI@@UAEPAUHWND__@@XZ  +
***
mov eax offset ?OnThemeChanged@HWNDElement@DirectUI@@UAEXPAUThemeChangedEvent@2@@Z +
jmp loc_100D27E  +
***
jmp ?OnThemeChanged@HWNDElement@DirectUI@@UAEXPAUThemeChangedEvent@2@@Z  +
***
mov eax offset ?OnNoChildWithShortcutFound@HWNDElement@DirectUI@@UAEXPAUKeyboardEvent@2@@Z +
jmp loc_100D27E  +
***
jmp ?OnNoChildWithShortcutFound@HWNDElement@DirectUI@@UAEXPAUKeyboardEvent@2@@Z  +
***
mov eax offset ?OnGetDlgCode@HWNDElement@DirectUI@@UAEXPAUtagMSG@@PAJ@Z +
jmp loc_100D27E  +
***
jmp ?OnGetDlgCode@HWNDElement@DirectUI@@UAEXPAUtagMSG@@PAJ@Z  +
***
mov eax offset ?OnWmThemeChanged@HWNDElement@DirectUI@@UAEXIJ@Z +
jmp loc_100D27E  +
***
jmp ?OnWmThemeChanged@HWNDElement@DirectUI@@UAEXIJ@Z  +
***
mov eax offset ?OnCompositionChanged@HWNDElement@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
jmp ?OnCompositionChanged@HWNDElement@DirectUI@@UAEXXZ  +
***
mov eax offset ?CanSetFocus@HWNDElement@DirectUI@@UAE_NXZ +
jmp loc_100D27E  +
***
jmp ?CanSetFocus@HWNDElement@DirectUI@@UAE_NXZ  +
***
mov eax offset ??1HWNDElement@DirectUI@@UAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?Destroy@Layout@DirectUI@@QAEXXZ +
jmp loc_100D27E  +
***
mov eax offset ?DoubleBuffered@Element@DirectUI@@QAEX_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?Host@NativeHWNDHost@DirectUI@@QAEXPAVElement@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetAccessible@Element@DirectUI@@QAEJ_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetVisible@Element@DirectUI@@QAEJ_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetLayout@Element@DirectUI@@QAEJPAVLayout@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?Create@FillLayout@DirectUI@@SGJPAPAVLayout@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?Initialize@HWNDElement@DirectUI@@QAEJPAUHWND__@@_NIPAVElement@2@PAK@Z +
jmp loc_100D27E  +
***
mov eax offset ?Register@HWNDElement@DirectUI@@SGJXZ +
jmp loc_100D27E  +
***
mov eax offset ?Destroy@Element@DirectUI@@QAEJ_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_StrToID +
jmp loc_100D27E  +
***
mov eax offset ?SetHeight@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetWidth@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetY@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetX@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?Remove@Element@DirectUI@@QAEJPAV12@@Z +
jmp loc_100D27E  +
***
mov eax offset ??0NativeHWNDHost@DirectUI@@QAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ??1NativeHWNDHost@DirectUI@@UAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?Initialize@NativeHWNDHost@DirectUI@@QAEJPBG0PAUHWND__@@PAUHICON__@@HHHHHHPAUHINSTANCE__@@I@Z +
jmp loc_100D27E  +
***
mov eax offset ?Destroy@NativeHWNDHost@DirectUI@@QAEXXZ +
jmp loc_100D27E  +
***
test ecx ecx +
jz locret_100D7EA  +
push esi  +
mov esi [ecx] +
push ecx  +
call ds:__imp_free  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_100D7D9  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_100D804  +
cmp eax 0FFFFFFFFh +
jbe loc_100D80B  +
mov eax 80070057h +
jmp loc_100D812  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E5F2  +
add esp 10h +
push eax  +
call sub_1005435  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_100D89A  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_100D88C  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_100D888  +
cmp esi eax +
jnb loc_100D88C  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_100D87A  +
cmp esi eax +
jb loc_100D890  +
xor eax eax +
jmp loc_100D899  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_100D8CE  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_100D841  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_100D905  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_100D841  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_1027624 +
push 0  +
mov ecx esi +
call sub_101EB3A  +
xor ebx ebx +
inc ebx  +
jmp loc_100D942  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_100D8D7  +
test eax eax +
jnz loc_100D94F  +
push ebx  +
mov ecx esi +
call sub_101EB3A  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_100D929  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_100D948  +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_100D971  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100D9A8  +
test dx dx +
jz loc_100D9A4  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100D9A8  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100D982  +
xor eax eax +
jmp loc_100D9AD  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:SysStringLen +
mov esi ecx +
push dword ptr [esi]  +
call edi  +
test eax eax +
jbe loc_100D9D7  +
push dword ptr [esi]  +
call edi  +
push eax  +
push dword ptr [esi]  +
call ds:CharUpperBuffW  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 0  +
push 400h  +
push dword ptr [eax]  +
push dword ptr [ecx]  +
call OLEAUT32_314  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_100DA1F  +
push [ebp+lpString]  +
call ds:lstrlenW  +
inc eax  +
push eax  +
push [ebp+lpString]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100D81B  +
add esp 10h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpcbData]  +
lea eax [ebp+lpcbData] +
push [ebp+lpData]  +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100DA87  +
mov eax [ebp+lpcbData] +
sub eax 3 +
neg eax  +
sbb eax eax +
and eax 0Dh +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+Type] +
mov eax [esi] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+lpData] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100DAFB  +
cmp [ebp+Type] 1 +
jz loc_100DAD3  +
cmp [ebp+Type] 2 +
jz loc_100DAD3  +
push 0Dh  +
pop eax  +
jmp loc_100DAFB  +
mov eax [ebp+cbData] +
test edi edi +
jz loc_100DAF5  +
test eax eax +
jz loc_100DAF0  +
test al 1 +
jnz loc_100DACE  +
mov ecx eax +
shr ecx 1 +
cmp word ptr [edi+ecx*2-2] 0 +
jz loc_100DAF5  +
jmp loc_100DACE  +
xor ecx ecx +
mov [edi] cx +
shr eax 1 +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edx [ecx] +
mov eax edx +
shr eax 8 +
movzx ecx dl +
movzx eax al +
shl ecx 8 +
or eax ecx +
shr edx 10h +
movzx ecx dl +
shl eax 8 +
or eax ecx +
retn   +
***
call ds:SysFreeString  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10176D3  +
test [ebp+arg_0] 1 +
jz loc_100DB52  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
xor ecx ecx +
mov [ebp+var_1] 0 +
cmp eax ecx +
jz loc_100DB73  +
mov [eax] ecx +
push ebx  +
mov ebx [ebp+arg_8] +
cmp ebx ecx +
jz loc_100DB7D  +
mov [ebx] ecx +
cmp [ebp+arg_0] ecx +
jle loc_100DBC6  +
push esi  +
push edi  +
mov edi ds:SysAllocString +
mov esi offset dword_10029A8 +
mov eax [esi] +
test eax eax +
jz loc_100DBC4  +
cmp eax [ebp+arg_0] +
jg loc_100DBC4  +
jnz loc_100DBBB  +
cmp [ebp+arg_4] 0 +
mov [ebp+var_1] 1 +
jz loc_100DBB0  +
push dword ptr [esi+4]  +
call edi  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
test ebx ebx +
jz loc_100DBBB  +
push dword ptr [esi+8]  +
call edi  +
mov [ebx] eax +
add esi 0Ch +
cmp [ebp+var_1] 0 +
jz loc_100DB8F  +
pop edi  +
pop esi  +
mov al [ebp+var_1] +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0CCh] +
pop ebp  +
jmp loc_1017EC1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov ecx [ecx+0C8h] +
test ecx ecx +
jz loc_100DC07  +
push eax  +
push [ebp+arg_0]  +
call sub_1017630  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset aKbcontrol  +
mov esi ecx +
xor edi edi +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_100DC6F  +
cmp [ebp+arg_0] edi +
jz loc_100DC58  +
mov byte_1027338 1 +
mov byte_10272E0 1 +
mov byte ptr [esi+172h] 1 +
mov byte ptr [esi+1C4h] 1 +
jmp loc_100DC74  +
mov byte_1027338 0 +
mov byte_10272E0 0 +
mov byte ptr [esi+1C4h] 0 +
jmp loc_100DC74  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset aKbcontrol  +
mov esi ecx +
xor edi edi +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_100DCD1  +
mov ecx [eax+44h] +
push 64h  +
pop edx  +
test ecx ecx +
jz loc_100DCB7  +
mov esi [ebp+arg_4] +
mov [esi] ecx +
jmp loc_100DCBC  +
mov ecx [ebp+arg_4] +
mov [ecx] edx +
mov eax [eax+48h] +
test eax eax +
jz loc_100DCCA  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_100DCD6  +
mov eax [ebp+arg_0] +
mov [eax] edx +
jmp loc_100DCD6  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+17Ch] 0 +
jle loc_100DD3C  +
cmp byte_10266B7 0 +
jz loc_100DD3C  +
mov eax [ecx+17Ch] +
inc eax  +
cdq   +
sub eax edx +
sar eax 1 +
push esi  +
mov esi [ebp+arg_0] +
add [esi+4] eax +
mov eax [ecx+17Ch] +
inc eax  +
cdq   +
sub eax edx +
sar eax 1 +
add [esi] eax +
mov eax [ecx+17Ch] +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
add [esi+8] eax +
mov eax [ecx+17Ch] +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
add [esi+0Ch] eax +
pop esi  +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+16Bh] 0 +
jz loc_100DD71  +
lea eax [ecx+1BCh] +
mov ecx 404h +
cmp [eax] cx +
jnz loc_100DD71  +
mov eax [eax] +
cmp eax 4040404h +
jz loc_100DD71  +
cmp eax 0E0050404h +
jz loc_100DD71  +
mov al 1 +
retn   +
xor al al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov ebx offset unk_10264BC +
mov [ebp+var_4] edi +
cmp [ebp+var_4] 0Ch +
jnb loc_100DE28  +
mov eax [ebx-4] +
cmp eax [esi+1BCh] +
jnz loc_100DE19  +
mov ecx [esi+0C8h] +
push 2Ah  +
call sub_10175ED  +
cmp eax [esi+10Ch] +
jnz loc_100DDBD  +
mov eax [ebx+4] +
jmp loc_100DDBF  +
mov eax [ebx] +
cmp eax 1 +
jnz loc_100DDD6  +
mov eax [ebp+arg_0] +
mov ecx [esi+108h] +
imul eax eax +
mov edi [ecx+eax+4] +
jmp loc_100DE19  +
cmp eax 2 +
jnz loc_100DDED  +
mov eax [ebp+arg_0] +
mov ecx [esi+108h] +
imul eax eax +
mov edi [ecx+eax+8] +
jmp loc_100DE19  +
cmp eax 3 +
jnz loc_100DE04  +
mov eax [ebp+arg_0] +
mov ecx [esi+108h] +
imul eax eax +
mov edi [ecx+eax+0Ch] +
jmp loc_100DE19  +
cmp eax 4 +
jnz loc_100DE19  +
mov eax [ebp+arg_0] +
mov ecx [esi+108h] +
imul eax eax +
mov edi [ecx+eax+10h] +
add [ebp+var_4] 0Ch +
add ebx 0Ch +
test edi edi +
jz loc_100DD8E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 4  +
mov ecx offset aInnerkey +
mov eax edi +
pop esi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100DE73  +
test dx dx +
jz loc_100DE6F  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100DE73  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100DE4F  +
xor eax eax +
jmp loc_100DE78  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100DF6B  +
mov ecx offset aInnerquad_1 +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100DEAB  +
test dx dx +
jz loc_100DEA7  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100DEAB  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100DE87  +
xor eax eax +
jmp loc_100DEB0  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100DF6B  +
mov ecx offset aInnerquad_2 +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100DEE3  +
test dx dx +
jz loc_100DEDF  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100DEE3  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100DEBF  +
xor eax eax +
jmp loc_100DEE8  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100DEF5  +
mov [ebp+var_4] 2 +
jmp loc_100DF72  +
mov ecx offset aInnerquad_3 +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100DF20  +
test dx dx +
jz loc_100DF1C  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100DF20  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100DEFC  +
xor eax eax +
jmp loc_100DF25  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100DF32  +
mov [ebp+var_4] 3 +
jmp loc_100DF72  +
mov ecx offset aInnerquad_4 +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100DF5D  +
test dx dx +
jz loc_100DF59  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100DF5D  +
add eax esi +
add ecx esi +
test dx dx +
jnz loc_100DF39  +
xor eax eax +
jmp loc_100DF62  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100DF72  +
mov [ebp+var_4] esi +
jmp loc_100DF72  +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
dec eax  +
pop edi  +
pop esi  +
jz loc_100DFE8  +
dec eax  +
jz loc_100DFCB  +
dec eax  +
jz loc_100DFAE  +
dec eax  +
jz loc_100DF91  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 0 +
jmp locret_100E006  +
mov eax [ebp+arg_4] +
mov ecx eax +
shr ecx 10h +
test ecx 800h +
jz loc_100DFA7  +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
and eax 0F000h +
jmp loc_100E001  +
mov eax [ebp+arg_4] +
mov ecx eax +
shr ecx 10h +
test ecx 400h +
jz loc_100DFC4  +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
and eax 0F00h +
jmp loc_100E001  +
mov eax [ebp+arg_4] +
mov ecx eax +
shr ecx 10h +
test ecx 200h +
jz loc_100DFE1  +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
and eax 0F0h +
jmp loc_100E001  +
mov eax [ebp+arg_4] +
mov ecx eax +
shr ecx 10h +
test ecx 100h +
jz loc_100DFFE  +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
and eax 0Fh +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov byte ptr [ebp+var_1] bl +
cmp [ebp+arg_C] ebx +
jz loc_100E037  +
lea eax [ebp+var_1] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call sub_100DE36  +
cmp [ebp+arg_0] ebx +
jz loc_100E085  +
push esi  +
push [ebp+arg_4]  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
cmp esi ebx +
jz loc_100E084  +
cmp [ebp+var_8] ebx +
jz loc_100E067  +
push [ebp+var_8]  +
mov ecx esi +
call sub_1017F82  +
cmp byte ptr [ebp+var_1] bl +
jz loc_100E079  +
push 2BCh  +
mov ecx esi +
call ?SetFontWeight@Element@DirectUI@@QAEJH@Z  +
push [ebp+arg_8]  +
mov ecx esi +
call ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100E10F  +
push esi  +
push [ebp+arg_4]  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp [ebp+arg_8] 1 +
mov esi eax +
jnz loc_100E0EA  +
test esi esi +
jz loc_100E10E  +
mov eax dword_10266A8 +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
movzx eax al +
shl eax 8 +
or ecx eax +
movzx eax byte ptr dword_10266A8+2 +
shl ecx 8 +
or ecx eax +
push ecx  +
mov ecx esi +
call ?SetForegroundColor@Element@DirectUI@@QAEJK@Z  +
push 0  +
jmp loc_100E107  +
test esi esi +
jz loc_100E10E  +
call ?GetUnset@Value@DirectUI@@SGPAV12@XZ  +
push eax  +
push 1  +
push ?ForegroundProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx esi +
call ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z  +
push 1  +
mov ecx esi +
call sub_1017F99  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jz loc_100E197  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jl loc_100E18E  +
mov eax [ebx+0D8h] +
imul esi esi +
push edi  +
push dword ptr [eax+esi+4]  +
mov edi ds:SysStringLen +
call edi  +
test eax eax +
jbe loc_100E154  +
mov [ebp+var_4] 1 +
mov eax [ebx+0D8h] +
push dword ptr [eax+esi+8]  +
call edi  +
test eax eax +
jbe loc_100E167  +
inc [ebp+var_4]  +
mov eax [ebx+0D8h] +
push dword ptr [eax+esi+0Ch]  +
call edi  +
test eax eax +
jbe loc_100E17A  +
inc [ebp+var_4]  +
mov eax [ebx+0D8h] +
push dword ptr [eax+esi+10h]  +
call edi  +
pop edi  +
test eax eax +
jbe loc_100E18E  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100E23A  +
push esi  +
push offset aInnerquad_1  +
call StrToID  +
mov esi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
test eax eax +
jz loc_100E1D9  +
push 0  +
mov ecx eax +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push offset aInnerquad_2  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
test eax eax +
jz loc_100E1F9  +
push 0  +
mov ecx eax +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push offset aInnerquad_3  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
test eax eax +
jz loc_100E219  +
push 0  +
mov ecx eax +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push offset aInnerquad_4  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
pop esi  +
test eax eax +
jz loc_100E23A  +
push 0  +
mov ecx eax +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100E334  +
push esi  +
push edi  +
push offset aInnerkey  +
call StrToID  +
mov ecx [ebp+arg_0] +
mov esi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
call esi  +
mov edi offset dword_10026B8 +
test eax eax +
jz loc_100E280  +
push edi  +
mov ecx eax +
call ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
push ebx  +
push offset aInnerquad_1  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_100E2AD  +
push 1  +
mov ecx ebx +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push edi  +
mov ecx ebx +
call ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
push offset aInnerquad_2  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_100E2D9  +
push 1  +
mov ecx ebx +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push edi  +
mov ecx ebx +
call ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
push offset aInnerquad_3  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_100E305  +
push 1  +
mov ecx ebx +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push edi  +
mov ecx ebx +
call ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
push offset aInnerquad_4  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call esi  +
mov esi eax +
pop ebx  +
test esi esi +
jz loc_100E332  +
push 1  +
mov ecx esi +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push edi  +
mov ecx esi +
call ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
test esi esi +
jz loc_100E38E  +
cmp [ebp+arg_C] 0 +
jnz loc_100E36B  +
push offset aParentkey  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
test esi esi +
jz loc_100E387  +
push [ebp+arg_4]  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push [ebp+arg_8]  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
jmp loc_100E393  +
mov edi 80004005h +
jmp loc_100E393  +
mov edi 80070057h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_100E422  +
push ebx  +
push edi  +
push offset aParentkey  +
call StrToID  +
mov ecx [ebp+arg_0] +
mov edi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_100E420  +
push dword ptr [esi+174h]  +
mov ecx ebx +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push dword ptr [esi+178h]  +
mov ecx ebx +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push offset aInnerkey  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call edi  +
mov edi eax +
test edi edi +
jz loc_100E420  +
push dword ptr [esi+174h]  +
mov ecx edi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push dword ptr [esi+178h]  +
mov ecx edi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ecx+10h]  +
call ds:SysFreeString  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ecx+100h] +
cmp esi eax +
jnz loc_100E47F  +
mov eax [esi+8] +
cmp eax [ecx+0E4h] +
jz loc_100E4FA  +
cmp eax [ecx+0D8h] +
jz loc_100E4FA  +
cmp eax [ecx+0F0h] +
jz loc_100E4FA  +
cmp eax [ecx+0FCh] +
jz loc_100E4FA  +
mov eax [esi] +
test eax eax +
jle loc_100E4F1  +
push ebx  +
mov ebx ds:SysFreeString +
push edi  +
xor edi edi +
mov [ebp+arg_0] eax +
mov eax [esi+8] +
push dword ptr [eax+edi+4]  +
call ebx  +
mov eax [esi+8] +
and dword ptr [eax+edi+4] 0 +
mov eax [esi+8] +
push dword ptr [eax+edi+8]  +
call ebx  +
mov eax [esi+8] +
and dword ptr [eax+edi+8] 0 +
mov eax [esi+8] +
push dword ptr [eax+edi+0Ch]  +
call ebx  +
mov eax [esi+8] +
and dword ptr [eax+edi+0Ch] 0 +
mov eax [esi+8] +
push dword ptr [eax+edi+10h]  +
call ebx  +
mov eax [esi+8] +
and dword ptr [eax+edi+10h] 0 +
mov eax [esi+8] +
push dword ptr [eax+edi+14h]  +
call ebx  +
mov eax [esi+8] +
and dword ptr [eax+edi+14h] 0 +
add edi 1Ch +
dec [ebp+arg_0]  +
jnz loc_100E492  +
pop edi  +
pop ebx  +
push dword ptr [esi+8]  +
call ds:CoTaskMemFree  +
xor eax eax +
mov [esi+8] eax +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
movzx eax dx +
cmp eax 411h +
jz loc_100E53E  +
cmp eax 412h +
jz loc_100E53E  +
cmp eax 804h +
jz loc_100E53E  +
cmp eax 404h +
jz loc_100E53E  +
mov byte ptr [ecx+16Bh] 0 +
jmp loc_100E545  +
mov byte ptr [ecx+16Bh] 1 +
mov [ecx+1BCh] edx +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A7DB  +
test [ebp+arg_0] 1 +
jz loc_100E578  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100E5A6  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_100E5A6  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_100540D  +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_100E5EA  +
cmp [ecx+0Ch] eax +
jge loc_100E5D9  +
push eax  +
mov ecx esi +
call loc_100E584  +
jmp loc_100E5EA  +
call sub_100D958  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_100E65A  +
cmp [ecx] ax +
jz loc_100E65A  +
inc eax  +
inc ecx  +
inc ecx  +
cmp word ptr [ecx] 0 +
jnz loc_100E651  +
pop ebp  +
retn   +
***
push 8007000Eh  +
call loc_100540D  +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_100D90E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_100E6B3  +
test edx edx +
jle loc_100E6B3  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_100E6B8  +
call loc_100E661  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100E6F3  +
mov dx [ebp+arg_4] +
jmp loc_100E6E0  +
cmp cx dx +
jz loc_100E6F3  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_100E6D9  +
xor ecx ecx +
cmp [eax] dx +
setnz cl  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100E712  +
push 80004005h  +
call loc_100540D  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+4] 0 +
jnz loc_100E724  +
xor eax eax +
retn   +
mov eax [ecx+8] +
push esi  +
xor esi esi +
test eax eax +
jbe loc_100E73F  +
mov ecx [ecx] +
mov edx ecx +
cmp dword ptr [edx] 0 +
jnz loc_100E743  +
inc esi  +
add edx 4 +
cmp esi eax +
jb loc_100E732  +
xor eax eax +
pop esi  +
retn   +
mov eax [ecx+esi*4] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1002E78 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fild  [ebp+arg_0] +
test eax eax +
jge loc_100E77C  +
fadd  ds:flt_1002EC4 +
fdiv  dword ptr [ecx+0Ch] +
call _ftol2  +
cmp eax 0FFFFFFFFh +
jbe loc_100E78C  +
or eax 0FFFFFFFFh +
xor ecx ecx +
cmp eax 11h +
jbe loc_100E79D  +
inc ecx  +
cmp eax ds:dword_1002EC8[ecx*4] +
ja loc_100E793  +
mov ecx ds:dword_1002EC8[ecx*4] +
cmp ecx 0FFFFFFFFh +
jz loc_100E7AB  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov edx 7FFFFFFFh +
sub edx eax +
cmp edx ecx +
jge loc_100E7D1  +
mov eax 80070057h +
jmp loc_100E7DA  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_100E7F9  +
push 80004005h  +
call loc_100540D  +
mov edx ecx +
movzx ecx word ptr [ecx] +
xor eax eax +
test cx cx +
jz loc_100E81A  +
movzx ecx cx +
imul eax eax +
movzx ecx cx +
add eax ecx +
inc edx  +
inc edx  +
movzx ecx word ptr [edx] +
test cx cx +
jnz loc_100E808  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
and dword ptr [esi+2Ch] 0 +
test ecx ecx +
jz loc_100E83A  +
call sub_100D7D4  +
and dword ptr [esi+28h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
fild  dword ptr [esi+8] +
test eax eax +
jge loc_100E85A  +
fadd  ds:flt_1002EC4 +
fstp  [ebp+var_4] +
fld  dword ptr [esi+14h] +
fmul  [ebp+var_4] +
call _ftol2  +
fld  dword ptr [esi+10h] +
fmul  [ebp+var_4] +
mov [esi+18h] eax +
call _ftol2  +
mov [esi+1Ch] eax +
cmp eax 11h +
jnb loc_100E882  +
and dword ptr [esi+1Ch] 0 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_100D7F0  +
test eax eax +
jl loc_100E8D2  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_101EE0D  +
test eax eax +
jl loc_100E8D2  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_100E8D2  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
jmp locret_100E8D4  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp [ebp+arg_0] eax +
jz loc_100E915  +
push eax  +
call ds:SysFreeString  +
cmp [ebp+arg_0] 0 +
jz loc_100E912  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_100E915  +
push 8007000Eh  +
call loc_100540D  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_100E92E  +
pop esi  +
retn   +
push eax  +
call ds:SysStringByteLen  +
push eax  +
push dword ptr [esi]  +
call ds:SysAllocStringByteLen  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+arg_0] +
call loc_1005E48  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_100D9E1  +
push [ebp+arg_0]  +
mov bl al +
call ds:SysFreeString  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+10h] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] cl +
mov [eax] ecx +
mov [eax+4] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
cmp eax 1 +
jnz loc_100E9AE  +
push eax  +
call sub_100DB38  +
xor eax eax +
jmp loc_100E9B2  +
dec eax  +
mov [ecx+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100E9D1  +
cmp ecx 7FFFFFFFh +
jbe loc_100E9D6  +
mov eax 80070057h +
test eax eax +
jl loc_100EA21  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100EA11  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100EA0C  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100EA0C  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100E9F4  +
pop edi  +
test esi esi +
jnz loc_100EA18  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov edx [ebp+8] +
and dword ptr [ebp-10h] 0 +
test edx edx +
jz loc_100EB27  +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_100EB27  +
mov esi [ebp+10h] +
mov [ecx+11Ch] edx +
mov [ecx+120h] eax +
test esi esi +
jz loc_100EB12  +
mov edi [ebp+14h] +
test edi edi +
jz loc_100EB12  +
mov edx [ebp+18h] +
test edx edx +
jz loc_100EB12  +
mov [ecx+88h] edx +
mov eax [edx] +
mov ebx eax +
and ebx 0FFFFFF80h +
cmp ebx 0FFFFFF80h +
jz loc_100EA9E  +
mov ebx eax +
and ebx 0FFFFFF80h +
sub ebx 0FFFFFF80h +
and eax 7Fh +
xor ebx eax +
mov [edx] ebx +
mov al [ebp+1Ch] +
mov [ecx+0C8h] esi +
inc dword ptr [esi+8]  +
mov [ecx+0CCh] edi +
mov [ecx+1C5h] al +
call ?GetRoot@Element@DirectUI@@QAEPAV12@XZ  +
mov esi eax +
test esi esi +
jz loc_100EB22  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
mov edi eax +
call ?GetClassInfoPtr@HWNDElement@DirectUI@@SGPAUIClassInfo@2@XZ  +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+28h]  +
test al al +
jz loc_100EB22  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A0h]  +
cmp dword_10274B8 0 +
mov esi eax +
jnz loc_100EB22  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+1Ch] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100EB1B  +
push esi  +
call sub_101A7A9  +
jmp loc_100EB1D  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_100EB22  +
xor eax eax +
mov dword_10274B8 eax +
mov eax [ebp-10h] +
jmp loc_100EB2C  +
mov eax 80070057h +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 178h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
movzx eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ds:FindResourceExW +
push edi  +
push dword ptr [ebp+wLanguage]  +
mov edi [ebp+hModule] +
push eax  +
push 6  +
push edi  +
mov [ebp+var_174] edi +
call esi  +
xor ebx ebx +
mov [ebp+var_160] eax +
cmp eax ebx +
jnz loc_100ED1A  +
push ebx  +
push 55h  +
lea eax [ebp+var_B0] +
push eax  +
movzx eax [ebp+wLanguage] +
push eax  +
call ds:LCIDToLocaleName  +
test eax eax +
jz loc_100EBF3  +
push 55h  +
lea eax [ebp+var_15C] +
push eax  +
push 6Dh  +
lea eax [ebp+var_B0] +
push eax  +
call ds:GetLocaleInfoEx  +
test eax eax +
jz loc_100EBF3  +
push 55h  +
lea eax [ebp+var_B0] +
push eax  +
lea eax [ebp+var_15C] +
push eax  +
call ds:ResolveLocaleName  +
push ebx  +
lea eax [ebp+var_B0] +
push eax  +
call ds:LocaleNameToLCID  +
cmp eax ebx +
jz loc_100EBF3  +
push eax  +
movzx eax [ebp+arg_4] +
push eax  +
push 6  +
push edi  +
call esi  +
mov [ebp+var_160] eax +
cmp eax ebx +
jnz loc_100ED1A  +
mov edi ds:GetUserPreferredUILanguages +
lea eax [ebp+var_164] +
push eax  +
push ebx  +
lea eax [ebp+var_168] +
push eax  +
push 4  +
mov [ebp+var_168] ebx +
mov [ebp+var_164] ebx +
call edi  +
test eax eax +
jz loc_100ED04  +
mov eax [ebp+var_164] +
cmp eax ebx +
jbe loc_100ED04  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_16C] eax +
cmp eax ebx +
jz loc_100ED04  +
lea ecx [ebp+var_164] +
push ecx  +
push eax  +
lea eax [ebp+var_168] +
push eax  +
push 4  +
call edi  +
mov edi [ebp+var_16C] +
mov [ebp+var_170] ebx +
cmp [ebp+var_168] ebx +
jbe loc_100ECF0  +
push 10h  +
push ebx  +
push edi  +
call ds:wcstoul  +
add esp 0Ch +
movzx eax ax +
push eax  +
movzx eax [ebp+arg_4] +
push eax  +
push 6  +
push [ebp+var_174]  +
call esi  +
mov [ebp+var_160] eax +
cmp eax ebx +
jnz loc_100ECF0  +
lea eax [ebp+var_178] +
push eax  +
push [ebp+var_164]  +
mov [ebp+var_178] ebx +
push edi  +
call sub_1005E0C  +
test eax eax +
jl loc_100ECF0  +
mov eax [ebp+var_178] +
mov ecx [ebp+var_16C] +
lea edi [edi+eax*2+2] +
mov eax [ebp+var_164] +
lea eax [ecx+eax*2] +
cmp edi eax +
jnb loc_100ECF0  +
inc [ebp+var_170]  +
mov eax [ebp+var_170] +
cmp eax [ebp+var_168] +
jb loc_100EC78  +
push [ebp+var_16C]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
cmp [ebp+var_160] ebx +
jnz loc_100ED1A  +
movzx eax [ebp+arg_4] +
push ebx  +
push eax  +
push 6  +
push [ebp+var_174]  +
call esi  +
mov [ebp+var_160] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+var_160] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_100EDB4  +
cmp [ebp+arg_0] 0 +
jz loc_100EDB4  +
push ebx  +
push dword ptr [ebp+wLanguage]  +
mov ebx eax +
shr eax 4 +
and ebx 0Fh +
inc eax  +
push eax  +
push dword ptr [esi+11Ch]  +
call sub_100EB39  +
test eax eax +
jz loc_100EDB3  +
push eax  +
push dword ptr [esi+11Ch]  +
call ds:LoadResource  +
test eax eax +
jz loc_100EDB3  +
mov esi eax +
xor ecx ecx +
push edi  +
movzx eax word ptr [esi] +
inc esi  +
inc esi  +
test ax ax +
jz loc_100ED92  +
movzx edi ax +
cmp ecx ebx +
jz loc_100ED9A  +
lea esi [esi+edi*2] +
inc ecx  +
cmp ecx 10h +
jl loc_100ED7E  +
jmp loc_100EDB2  +
mov ebx [ebp+arg_0] +
push dword ptr [ebx]  +
call ds:SysFreeString  +
and dword ptr [ebx] 0 +
push edi  +
push esi  +
call ds:SysAllocStringLen  +
mov [ebx] eax +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
mov edi ecx +
cmp byte ptr [edi+171h] 0 +
jz loc_100EE9D  +
push esi  +
call ?GetRoot@Element@DirectUI@@QAEPAV12@XZ  +
mov esi eax +
test esi esi +
jz loc_100EE9C  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+80h]  +
mov ebx eax +
call ?GetClassInfoPtr@HWNDElement@DirectUI@@SGPAUIClassInfo@2@XZ  +
mov edx [ebx] +
push eax  +
mov ecx ebx +
call dword ptr [edx+28h]  +
test al al +
jz loc_100EE9B  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A0h]  +
push offset aKbcontrol  +
mov [ebp+hWnd] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
xor eax eax +
cmp esi eax +
jz loc_100EE9B  +
cmp [edi+170h] al +
jz loc_100EE42  +
push eax  +
push eax  +
push eax  +
jmp loc_100EE95  +
mov ecx esi +
call ?GetX@Element@DirectUI@@QAEHXZ  +
mov ecx edi +
mov ebx eax +
call ?GetX@Element@DirectUI@@QAEHXZ  +
add ebx eax +
mov ecx esi +
mov [ebp+Rect.left] ebx +
call ?GetWidth@Element@DirectUI@@QAEHXZ  +
add eax [ebp+Rect.left] +
mov ecx esi +
mov [ebp+Rect.right] eax +
call ?GetY@Element@DirectUI@@QAEHXZ  +
mov ecx edi +
mov ebx eax +
call ?GetY@Element@DirectUI@@QAEHXZ  +
add ebx eax +
mov ecx esi +
mov [ebp+Rect.top] ebx +
call ?GetHeight@Element@DirectUI@@QAEHXZ  +
add eax [ebp+Rect.top] +
push 0  +
mov [ebp+Rect.bottom] eax +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:InvalidateRect  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_100F1BC  +
cmp [ebp+10h] edi +
jl loc_100F1BC  +
cmp [ebp+0Ch] edi +
jbe loc_100F1BC  +
push offset aParentkey  +
call StrToID  +
mov ecx [ebp+8] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax edi +
jz loc_100EEF8  +
cmp dword ptr [ebp+0Ch] 2 +
setz cl  +
mov [eax+84h] cl +
mov [ebp-1Ch] edi +
mov [ebp-4] edi +
mov [ebp-20h] edi +
mov [ebp-14h] edi +
mov [ebp-18h] edi +
mov ecx [esi+0C8h] +
push 2Ah  +
mov byte ptr [ebp-4] 3 +
call sub_10175ED  +
mov ecx [esi+10Ch] +
mov edi [ebp+10h] +
mov ebx ds:SysStringLen +
and ecx eax +
cmp ecx eax +
mov eax [esi+108h] +
setz byte ptr [ebp-0Dh]  +
imul edi edi +
push dword ptr [eax+edi+4]  +
call ebx  +
test eax eax +
jbe loc_100EFE3  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_100EF50  +
push 0  +
jmp loc_100EF9D  +
mov eax [esi+108h] +
push dword ptr [eax+edi+8]  +
call ebx  +
test eax eax +
ja loc_100EF9B  +
mov ecx esi +
call sub_100DD45  +
test al al +
jnz loc_100EF9B  +
mov eax [esi+108h] +
push dword ptr [eax+edi+8]  +
call ebx  +
test eax eax +
jnz loc_100EFAC  +
mov eax [esi+108h] +
push dword ptr [eax+edi+10h]  +
call ebx  +
test eax eax +
jbe loc_100EFAC  +
mov eax [esi+108h] +
push dword ptr [eax+edi+0Ch]  +
call ebx  +
test eax eax +
jnz loc_100EFAC  +
push 1  +
push offset aInnerquad_1  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100E08F  +
mov eax [esi+108h] +
add eax edi +
push dword ptr [eax+18h]  +
mov ecx esi +
push dword ptr [eax+4]  +
push offset aInnerquad_1  +
push dword ptr [ebp+8]  +
call sub_100E00F  +
mov eax [esi+108h] +
push dword ptr [eax+edi+4]  +
lea ecx [ebp-1Ch] +
call sub_100E8DD  +
lea ecx [ebp-1Ch] +
call sub_100D9B6  +
mov eax [esi+108h] +
push dword ptr [eax+edi+8]  +
call ebx  +
test eax eax +
jbe loc_100F058  +
mov eax [esi+108h] +
push dword ptr [eax+edi+8]  +
lea ecx [ebp-20h] +
call sub_100E8DD  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100D9E1  +
test al al +
jnz loc_100F058  +
mov ecx esi +
call sub_100DD45  +
test al al +
jz loc_100F024  +
push 1  +
jmp loc_100F02C  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_100F020  +
push 0  +
push offset aInnerquad_2  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100E08F  +
mov eax [esi+108h] +
add eax edi +
push dword ptr [eax+18h]  +
mov ecx esi +
push dword ptr [eax+8]  +
push offset aInnerquad_2  +
push dword ptr [ebp+8]  +
call sub_100E00F  +
mov eax [esi+108h] +
push dword ptr [eax+edi+0Ch]  +
call ebx  +
test eax eax +
jbe loc_100F082  +
mov eax [esi+108h] +
push dword ptr [eax+edi+0Ch]  +
lea ecx [ebp-14h] +
call sub_100E8DD  +
lea ecx [ebp-14h] +
call sub_100D9B6  +
mov eax [esi+108h] +
push dword ptr [eax+edi+10h]  +
call ebx  +
test eax eax +
jbe loc_100F0A4  +
mov eax [esi+108h] +
push dword ptr [eax+edi+10h]  +
lea ecx [ebp-18h] +
call sub_100E8DD  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-14h] +
call sub_100D9E1  +
xor ebx ebx +
test al al +
jnz loc_100F0BB  +
cmp [ebp-18h] ebx +
jnz loc_100F0E1  +
cmp [ebp-14h] ebx +
jz loc_100F11C  +
push ebx  +
mov ebx offset aInnerquad_3 +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100E08F  +
mov eax [esi+108h] +
add edi eax +
push dword ptr [edi+18h]  +
push dword ptr [edi+0Ch]  +
jmp loc_100F14A  +
cmp [ebp-14h] ebx +
jz loc_100F11C  +
mov ecx esi +
cmp [ebp-0Dh] bl +
jnz loc_100F0F0  +
push ebx  +
jmp loc_100F0F2  +
push 1  +
push offset aInnerquad_4  +
push dword ptr [ebp+8]  +
call sub_100E08F  +
mov eax [esi+108h] +
add eax edi +
push dword ptr [eax+18h]  +
mov ecx esi +
push dword ptr [eax+0Ch]  +
push offset aInnerquad_4  +
push dword ptr [ebp+8]  +
call sub_100E00F  +
cmp [ebp-18h] ebx +
jz loc_100F157  +
cmp byte ptr [ebp-0Dh] 0 +
mov ecx esi +
jnz loc_100F12D  +
push 1  +
jmp loc_100F12E  +
push ebx  +
mov ebx offset aInnerquad_3 +
push ebx  +
push dword ptr [ebp+8]  +
call sub_100E08F  +
mov eax [esi+108h] +
add edi eax +
push dword ptr [edi+18h]  +
push dword ptr [edi+10h]  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100E00F  +
xor ebx ebx +
cmp dword ptr [ebp+0Ch] 2 +
jnz loc_100F182  +
cmp [ebp-1Ch] ebx +
jz loc_100F1A2  +
cmp [ebp-14h] ebx +
jz loc_100F1A2  +
mov ecx esi +
call sub_100DD45  +
test al al +
jnz loc_100F1A2  +
push ebx  +
push offset aInnerquad_1  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100E08F  +
cmp dword ptr [ebp+0Ch] 3 +
jnz loc_100F1A2  +
cmp [ebp-18h] ebx +
jnz loc_100F1A2  +
cmp [ebp-14h] ebx +
jz loc_100F1A2  +
push ebx  +
push offset aInnerquad_4  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100E08F  +
push dword ptr [ebp-18h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-14h]  +
call esi  +
push dword ptr [ebp-20h]  +
call esi  +
push dword ptr [ebp-1Ch]  +
call esi  +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp [ebp+arg_0] ebx +
jz loc_100F2C9  +
push esi  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jl loc_100F2C8  +
cmp [ebp+arg_4] ebx +
jbe loc_100F2C8  +
push offset aParentkey  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp+arg_8] eax +
cmp eax ebx +
jz loc_100F216  +
mov [eax+84h] bl +
mov eax [edi+108h] +
imul esi esi +
cmp [eax+esi+4] ebx +
jz loc_100F23C  +
add eax esi +
push dword ptr [eax+18h]  +
mov ecx edi +
push dword ptr [eax+4]  +
push offset aInnerquad_1  +
push [ebp+arg_0]  +
call sub_100E00F  +
mov eax [edi+108h] +
cmp dword ptr [eax+esi+8] 0 +
mov ebx offset aInnerquad_3 +
jz loc_100F284  +
add eax esi +
cmp [ebp+arg_4] 2 +
push dword ptr [eax+18h]  +
mov ecx edi +
push dword ptr [eax+8]  +
jnz loc_100F277  +
push ebx  +
push [ebp+arg_0]  +
call sub_100E00F  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100F284  +
mov byte ptr [eax+84h] 1 +
jmp loc_100F284  +
push offset aInnerquad_2  +
push [ebp+arg_0]  +
call sub_100E00F  +
mov eax [edi+108h] +
cmp dword ptr [eax+esi+0Ch] 0 +
jz loc_100F2A4  +
add eax esi +
push dword ptr [eax+18h]  +
mov ecx edi +
push dword ptr [eax+0Ch]  +
push ebx  +
push [ebp+arg_0]  +
call sub_100E00F  +
mov eax [edi+108h] +
cmp dword ptr [eax+esi+10h] 0 +
jz loc_100F2C8  +
add esi eax +
push dword ptr [esi+18h]  +
mov ecx edi +
push dword ptr [esi+10h]  +
push offset aInnerquad_4  +
push [ebp+arg_0]  +
call sub_100E00F  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jz loc_100F3A3  +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jl loc_100F3A2  +
push offset aParentkey  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_100F314  +
mov byte ptr [eax+84h] 0 +
push ebx  +
mov ecx edi +
call sub_100DD79  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_100F383  +
mov eax [edi+108h] +
mov ecx [edi+0C8h] +
push esi  +
mov esi ebx +
imul esi esi +
mov eax [eax+esi+4] +
push 2Ah  +
mov [ebp+arg_4] eax +
call sub_10175ED  +
cmp eax [edi+10Ch] +
jnz loc_100F382  +
mov ecx edi +
call sub_100DD45  +
test al al +
mov eax [edi+108h] +
jnz loc_100F36A  +
add eax esi +
mov ecx [eax+8] +
test ecx ecx +
jnz loc_100F373  +
mov eax [eax+10h] +
jmp loc_100F37B  +
add eax esi +
mov ecx [eax+10h] +
test ecx ecx +
jz loc_100F378  +
mov [ebp+arg_4] ecx +
jmp loc_100F382  +
mov eax [eax+0Ch] +
test eax eax +
jz loc_100F382  +
mov [ebp+arg_4] eax +
pop esi  +
mov eax [edi+108h] +
imul ebx ebx +
push dword ptr [eax+ebx+18h]  +
mov ecx edi +
push [ebp+arg_4]  +
push offset aInnerkey  +
push [ebp+arg_0]  +
call sub_100E00F  +
pop ebx  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_210] ecx +
mov [ebp+var_214] esi +
mov [ebp+var_20C] eax +
cmp eax edi +
jz loc_100F58C  +
cmp esi edi +
jz loc_100F58C  +
lea eax [ebp+var_208] +
push eax  +
mov ecx esi +
mov [ebp+var_208] edi +
call ?GetContentString@Element@DirectUI@@QAEPBGPAPAVValue@2@@Z  +
mov ecx [ebp+var_208] +
mov [ebp+var_218] eax +
cmp ecx edi +
jz loc_100F419  +
call ?Release@Value@DirectUI@@QAEXXZ  +
push ebx  +
xor eax eax +
push 1FCh  +
mov [ebp+LCData] ax +
lea eax [ebp-202h] +
push edi  +
push eax  +
call memset  +
mov ebx ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
add esp 0Ch +
push edi  +
push 2  +
push ebx  +
mov ecx esi +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov [ebp+var_208] eax +
mov edx [eax+4] +
mov esi offset aWebgeo +
mov di [esi] +
cmp di [edx] +
jnz loc_100F47E  +
test di di +
jz loc_100F47A  +
mov di [esi+2] +
cmp di [edx+2] +
jnz loc_100F47E  +
add esi 4 +
add edx 4 +
test di di +
jnz loc_100F458  +
xor edx edx +
jmp loc_100F483  +
sbb edx edx +
sbb edx 0FFFFFFFFh +
test edx edx +
jnz loc_100F49B  +
mov ecx [ebp+var_210] +
mov byte ptr [ecx+16Ch] 1 +
mov ecx eax +
jmp loc_100F585  +
mov ecx [ebp+var_218] +
xor esi esi +
mov eax offset aLocale_sdecima +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100F4CE  +
test dx dx +
jz loc_100F4CA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100F4CE  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100F4A8  +
xor eax eax +
jmp loc_100F4D3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100F4DA  +
push 0Eh  +
pop esi  +
push 0FFh  +
lea eax [ebp+LCData] +
push eax  +
push esi  +
push 400h  +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_100F58B  +
mov ecx [ebp+var_214] +
push 0  +
push 2  +
push ebx  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov [ebp+var_208] eax +
mov eax [eax+4] +
mov ecx offset aGeo +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_100F53F  +
test dx dx +
jz loc_100F53B  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_100F53F  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_100F519  +
xor eax eax +
jmp loc_100F544  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100F58B  +
push [ebp+arg_8]  +
mov ecx [ebp+var_210] +
lea eax [ebp+LCData] +
push eax  +
push offset aInnerkey  +
push [ebp+var_20C]  +
call sub_100E00F  +
mov ecx [ebp+var_20C] +
lea eax [ebp+LCData] +
push eax  +
call ?SetAccName@Element@DirectUI@@QAEJPBG@Z  +
mov ecx [ebp+var_208] +
test ecx ecx +
jz loc_100F58B  +
call ?Release@Value@DirectUI@@QAEXXZ  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_0] 1 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100F5D0  +
mov eax [ebp+arg_C] +
mov [esi+174h] eax +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_10] +
mov [esi+178h] eax +
jmp loc_100F735  +
cmp [ebp+arg_0] 2 +
jnz loc_100F72E  +
mov eax [ebp+arg_14] +
cdq   +
idiv  [ebp+arg_8] +
test edx edx +
jle loc_100F5E6  +
inc eax  +
push offset a2b  +
mov [ebp+arg_0] eax +
call StrToID  +
mov ecx [esi+8Ch] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov edi [ebp+arg_4] +
mov ebx eax +
mov [ebp+arg_14] ebx +
test ebx ebx +
jz loc_100F660  +
push [ebp+arg_10]  +
mov ecx ebx +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
mov eax [esi+174h] +
add eax [ebp+arg_0] +
mov ecx ebx +
push eax  +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
mov eax [esi+17Ch] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
mov [ebp+arg_4] ecx +
jl loc_100F63F  +
mov [ebp+arg_4] eax +
push 0  +
mov eax edi +
sub eax [ebp+arg_10] +
push 5  +
add eax eax +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx esi +
sub eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
push ebx  +
call sub_100E33D  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
add [esi+174h] eax +
push offset a1c  +
call StrToID  +
mov ecx [esi+8Ch] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov ebx eax +
test ebx ebx +
jz loc_100F735  +
sub edi [esi+178h] +
mov ecx ebx +
push edi  +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
push [ebp+arg_0]  +
mov ecx ebx +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
push ebx  +
mov ecx esi +
call sub_100E3A0  +
cmp [ebp+arg_14] 0 +
mov [ebp+var_4] eax +
jz loc_100F735  +
push offset aParentkey  +
call StrToID  +
mov ecx [ebp+arg_14] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp+arg_10] eax +
test eax eax +
jz loc_100F735  +
mov eax [esi+17Ch] +
xor edi edi +
mov [ebp+arg_C] eax +
dec eax  +
inc edi  +
cmp eax edi +
jl loc_100F6E9  +
mov edi eax +
mov ecx ebx +
call ?GetX@Element@DirectUI@@QAEHXZ  +
mov ecx eax +
mov eax edi +
cdq   +
sub eax edx +
mov edi eax +
sar edi 1 +
sub edi ecx +
mov ecx [ebp+arg_10] +
call ?GetWidth@Element@DirectUI@@QAEHXZ  +
mov ecx [ebp+arg_14] +
add edi eax +
mov eax [esi+174h] +
inc eax  +
cdq   +
sub eax edx +
sar eax 1 +
sub eax [ebp+arg_C] +
push eax  +
call ?GetX@Element@DirectUI@@QAEHXZ  +
add eax edi +
push eax  +
mov ecx ebx +
call sub_101B3C6  +
jmp loc_100F735  +
mov [ebp+var_4] 80070057h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_100F777  +
push edi  +
push offset loc_100E42E  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 14h  +
push esi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_100F772  +
push edi  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_100F78F  +
push dword ptr [esi+10h]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_100F78D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea eax [esi+100h] +
push eax  +
call sub_100E43D  +
cmp [ebp+arg_0] 0 +
jnz loc_100F7EB  +
lea eax [esi+0D0h] +
push eax  +
mov ecx esi +
call sub_100E43D  +
lea eax [esi+0DCh] +
push eax  +
mov ecx esi +
call sub_100E43D  +
lea eax [esi+0E8h] +
push eax  +
mov ecx esi +
call sub_100E43D  +
lea eax [esi+0F4h] +
push eax  +
mov ecx esi +
call sub_100E43D  +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ?GetClassInfoPtr@Element@DirectUI@@SGPAUIClassInfo@2@XZ  +
***
mov edi edi +
push ecx  +
call sub_101840B  +
and dword_10270EC 0 +
retn   +
***
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_100F825  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
jmp loc_100F827  +
xor eax eax +
test eax eax +
jnz locret_100F838  +
mov ecx offset dword_1027698 +
mov eax dword_1027698 +
jmp dword ptr [eax+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_100F857  +
push 80004005h  +
call loc_100540D  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test dword ptr [ecx] 10000000h +
jz loc_100F87F  +
mov eax [ecx+4] +
jmp loc_100F882  +
lea eax [ecx+4] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jnz loc_100F8AB  +
push 80004005h  +
call loc_100540D  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jnz loc_100F8BF  +
test edi edi +
jz loc_100F8BF  +
push 80070057h  +
jmp loc_100F8A6  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_100F8CF  +
call loc_100E661  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call loc_100E584  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_100E5F2  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_100F92D  +
call loc_100E661  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_100F936  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_100E5F2  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_100D958  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_100F98F  +
cmp eax [esi] +
jnz loc_100F98F  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_100F9C1  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_100F9A5  +
call loc_100E661  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_100E5F2  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_100F9E3  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_100F9F1  +
push esi  +
call sub_100F8F8  +
jmp loc_100FA15  +
mov eax [eax+8] +
cmp eax esi +
jge loc_100FA15  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_100FA07  +
add edx eax +
jmp loc_100FA09  +
add edx edx +
cmp edx esi +
jge loc_100FA0F  +
mov edx esi +
push edx  +
call sub_100E689  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
mov esi ds:lstrlenW +
push ebx  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100FA3F  +
mov eax [ebp+arg_0] +
jmp loc_100FA7F  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
call esi  +
movzx ebx word ptr [ebx] +
lea eax [edi+eax*2] +
push ebx  +
mov [ebp+arg_0] eax +
push edi  +
jmp loc_100FA73  +
mov edx [ebp+arg_0] +
mov ecx [ebp+var_4] +
sub edx eax +
sar edx 1 +
cmp edx ecx +
jb loc_100FA7C  +
mov edi [ebp+lpString] +
add ecx ecx +
mov esi eax +
xor edx edx +
cmps   +
jz loc_100FA7E  +
push ebx  +
add eax 2 +
push eax  +
call sub_100E6C7  +
test eax eax +
jnz loc_100FA53  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_100E7B4  +
test eax eax +
jge loc_100FAA8  +
push eax  +
call loc_100540D  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
push 8  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_100FADE  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_100E74D  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov [esi] edi +
xor edx edx +
mov eax edi +
div  dword ptr [ecx+8] +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov [eax] edx +
cmp [ecx] ebx +
jz loc_100FB31  +
mov edx [ebp+arg_C] +
and [edx] ebx +
mov eax [eax] +
mov ecx [ecx] +
mov eax [ecx+eax*4] +
test eax eax +
jz loc_100FB31  +
mov esi [esi] +
cmp [eax+14h] esi +
jnz loc_100FB28  +
cmp [eax] edi +
jz loc_100FB3A  +
mov ebx eax +
mov eax [eax+10h] +
test eax eax +
jnz loc_100FB1F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov [edx] ebx +
jmp loc_100FB33  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100FB82  +
mov edx [eax+10h] +
push edi  +
test edx edx +
jz loc_100FB5B  +
mov edi edx +
jmp loc_100FB7F  +
mov eax [eax+14h] +
push esi  +
mov esi [ecx+8] +
xor edx edx +
div  esi +
xor edi edi +
inc edx  +
cmp edx esi +
jnb loc_100FB7E  +
mov eax [ecx] +
lea eax [eax+edx*4] +
cmp dword ptr [eax] 0 +
jz loc_100FB79  +
mov edi [eax] +
inc edx  +
test edi edi +
jz loc_100FB69  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100E7E3  +
pop ecx  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor edx edx +
div  dword ptr [esi+8] +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov [eax] edx +
cmp [esi] ebx +
jnz loc_100FBB6  +
xor eax eax +
jmp loc_100FBEE  +
push edi  +
mov edi [ebp+arg_C] +
mov [edi] ebx +
mov eax [eax] +
mov edx [esi] +
mov esi [edx+eax*4] +
cmp esi ebx +
jz loc_100FBEB  +
mov eax [ecx] +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_8] +
cmp [esi+0Ch] eax +
jnz loc_100FBE2  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call sub_100D977  +
test eax eax +
jz loc_100FBF4  +
mov ebx esi +
mov esi [esi+8] +
test esi esi +
jnz loc_100FBCC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov [edi] ebx +
mov eax esi +
jmp loc_100FBED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100FC3E  +
mov edx [eax+8] +
push edi  +
test edx edx +
jz loc_100FC17  +
mov edi edx +
jmp loc_100FC3B  +
mov eax [eax+0Ch] +
push esi  +
mov esi [ecx+8] +
xor edx edx +
div  esi +
xor edi edi +
inc edx  +
cmp edx esi +
jnb loc_100FC3A  +
mov eax [ecx] +
lea eax [eax+edx*4] +
cmp dword ptr [eax] 0 +
jz loc_100FC35  +
mov edi [eax] +
inc edx  +
test edi edi +
jz loc_100FC25  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov bx [ebp+arg_0] +
movzx eax bx +
push esi  +
mov esi [ebp+arg_8] +
mov [esi] eax +
xor edx edx +
div  dword ptr [ecx+8] +
mov eax [ebp+arg_4] +
push edi  +
xor edi edi +
mov [eax] edx +
cmp [ecx] edi +
jz loc_100FC90  +
mov edx [ebp+arg_C] +
and [edx] edi +
mov eax [eax] +
mov ecx [ecx] +
mov eax [ecx+eax*4] +
test eax eax +
jz loc_100FC90  +
mov esi [esi] +
cmp [eax+0Ch] esi +
jnz loc_100FC87  +
cmp [eax] bx +
jz loc_100FC99  +
mov edi eax +
mov eax [eax+8] +
test eax eax +
jnz loc_100FC7D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov [edx] edi +
jmp loc_100FC92  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-18h] esi +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-14h] ebx +
cmp edi ebx +
jnz loc_100FCCC  +
push dword ptr [esi+4]  +
call sub_100E767  +
mov edi eax +
mov [ebp+8] edi +
cmp edi [esi+8] +
jz loc_100FD90  +
cmp [esi] ebx +
jnz loc_100FCE7  +
push ebx  +
push edi  +
mov ecx esi +
call sub_100FE98  +
jmp loc_100FD90  +
xor ecx ecx +
push 4  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
mov [ebp-4] ebx +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [ebp-14h] eax +
jmp loc_100FD1C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100FD14 +
retn   +
mov esi [ebp-18h] +
mov edi [ebp+8] +
xor ebx ebx +
cmp [ebp-14h] ebx +
jnz loc_100FD2B  +
push 8007000Eh  +
call loc_100540D  +
mov eax edi +
shl eax 2 +
push eax  +
push ebx  +
push dword ptr [ebp-14h]  +
call memset  +
add esp 0Ch +
mov [ebp+8] ebx +
cmp [esi+8] ebx +
jbe loc_100FD79  +
mov eax [esi] +
mov ecx [ebp+8] +
mov ecx [eax+ecx*4] +
cmp ecx ebx +
jz loc_100FD6E  +
mov eax [ecx+14h] +
xor edx edx +
div  edi +
mov eax [ebp-14h] +
mov ebx [ecx+10h] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ecx+10h] edx +
mov [eax] ecx +
mov ecx ebx +
test ebx ebx +
jnz loc_100FD51  +
inc dword ptr [ebp+8]  +
mov eax [ebp+8] +
cmp eax [esi+8] +
jb loc_100FD45  +
push dword ptr [esi]  +
call ??_V@YAXPAX@Z  +
mov eax [ebp-14h] +
pop ecx  +
mov ecx esi +
mov [esi] eax +
mov [esi+8] edi +
call sub_100E841  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-18h] esi +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-14h] ebx +
cmp edi ebx +
jnz loc_100FDC7  +
push dword ptr [esi+4]  +
call sub_100E767  +
mov edi eax +
mov [ebp+8] edi +
cmp edi [esi+8] +
jz loc_100FE8B  +
cmp [esi] ebx +
jnz loc_100FDE2  +
push ebx  +
push edi  +
mov ecx esi +
call sub_100FE98  +
jmp loc_100FE8B  +
xor ecx ecx +
push 4  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
mov [ebp-4] ebx +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [ebp-14h] eax +
jmp loc_100FE17  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100FE0F +
retn   +
mov esi [ebp-18h] +
mov edi [ebp+8] +
xor ebx ebx +
cmp [ebp-14h] ebx +
jnz loc_100FE26  +
push 8007000Eh  +
call loc_100540D  +
mov eax edi +
shl eax 2 +
push eax  +
push ebx  +
push dword ptr [ebp-14h]  +
call memset  +
add esp 0Ch +
mov [ebp+8] ebx +
cmp [esi+8] ebx +
jbe loc_100FE74  +
mov eax [esi] +
mov ecx [ebp+8] +
mov ecx [eax+ecx*4] +
cmp ecx ebx +
jz loc_100FE69  +
mov eax [ecx+0Ch] +
xor edx edx +
div  edi +
mov eax [ebp-14h] +
mov ebx [ecx+8] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ecx+8] edx +
mov [eax] ecx +
mov ecx ebx +
test ebx ebx +
jnz loc_100FE4C  +
inc dword ptr [ebp+8]  +
mov eax [ebp+8] +
cmp eax [esi+8] +
jb loc_100FE40  +
push dword ptr [esi]  +
call ??_V@YAXPAX@Z  +
mov eax [ebp-14h] +
pop ecx  +
mov ecx esi +
mov [esi] eax +
mov [esi+8] edi +
call sub_100E841  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_100FEBA  +
push eax  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
cmp [ebp+0Ch] bl +
jz loc_100FF0A  +
mov eax [ebp+8] +
cmp eax 3FFFFFFFh +
jbe loc_100FECD  +
xor al al +
jmp loc_100FF19  +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
mov [ebp-4] ebx +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
jmp loc_100FEF2  +
mov eax offset loc_100FEEF +
retn   +
mov esi [ebp-14h] +
mov eax [esi] +
test eax eax +
jz loc_100FEC9  +
mov ecx [ebp+8] +
shl ecx 2 +
push ecx  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov eax [ebp+8] +
mov ecx esi +
mov [esi+8] eax +
call sub_100E841  +
mov al 1 +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jnz loc_100FF3F  +
push 80004005h  +
call loc_100540D  +
mov ecx [esi+2Ch] +
mov [eax+8] ecx +
dec dword ptr [esi+4]  +
mov [esi+2Ch] eax +
mov eax [esi+4] +
cmp eax [esi+1Ch] +
jnb loc_100FF69  +
cmp dword ptr [esi+20h] 0 +
jnz loc_100FF69  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FD9D  +
cmp dword ptr [esi+4] 0 +
jnz loc_100FF76  +
mov ecx esi +
call sub_100E821  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov [eax+4] ecx +
mov [eax+8] cl +
mov ecx [ebp+arg_4] +
mov [eax+14h] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx esi +
call sub_100E921  +
mov [edi] eax +
cmp dword ptr [esi] 0 +
jz loc_100FFCE  +
test eax eax +
jnz loc_100FFCE  +
push 8007000Eh  +
call loc_100540D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi] +
cmp eax [esi] +
jz loc_1010010  +
push eax  +
call ds:SysFreeString  +
mov ecx esi +
call sub_100E921  +
mov [edi] eax +
cmp dword ptr [esi] 0 +
jz loc_1010010  +
test eax eax +
jnz loc_1010010  +
push 8007000Eh  +
call loc_100540D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+0C8h] +
push 2Ah  +
xor ebx ebx +
call sub_10175ED  +
mov ecx [esi+0C8h] +
push 3Ah  +
mov [ebp+var_4] eax +
call sub_10175ED  +
mov edi [ebp+arg_0] +
mov [ebp+var_8] eax +
lea eax [esi+1C0h] +
mov ecx esi +
cmp edi [eax] +
jz loc_10100EE  +
push ebx  +
mov [eax] edi +
call sub_100F799  +
mov ecx [esi+0C8h] +
lea eax [esi+0D0h] +
push eax  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_1017534  +
mov ebx eax +
test ebx ebx +
jl loc_10100FA  +
mov ecx [esi+0C8h] +
lea eax [esi+0DCh] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_1017534  +
mov ebx eax +
test ebx ebx +
jl loc_10100FA  +
mov ecx [esi+0C8h] +
lea eax [esi+0E8h] +
push eax  +
push [ebp+var_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_1017534  +
mov ebx eax +
test ebx ebx +
jl loc_10100FA  +
mov ecx [esi+0C8h] +
lea eax [esi+0F4h] +
push eax  +
mov eax [ebp+var_8] +
or eax [ebp+var_4] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_1017534  +
mov ebx eax +
jmp loc_10100FA  +
lea eax [esi+100h] +
push eax  +
call sub_100E43D  +
mov ecx [ebp+arg_C] +
test ecx ecx +
jnz loc_1010121  +
mov eax [esi+0D0h] +
mov [esi+100h] eax +
mov eax [esi+0D4h] +
mov [esi+104h] eax +
mov eax [esi+0D8h] +
jmp loc_1010192  +
cmp [ebp+var_4] ecx +
jnz loc_1010146  +
mov eax [esi+0DCh] +
mov [esi+100h] eax +
mov eax [esi+0E0h] +
mov [esi+104h] eax +
mov eax [esi+0E4h] +
jmp loc_1010192  +
mov eax [ebp+var_8] +
cmp eax ecx +
jnz loc_101016D  +
mov eax [esi+0E8h] +
mov [esi+100h] eax +
mov eax [esi+0ECh] +
mov [esi+104h] eax +
mov eax [esi+0F0h] +
jmp loc_1010192  +
or eax [ebp+var_4] +
cmp eax ecx +
jnz loc_101019A  +
mov eax [esi+0F4h] +
mov [esi+100h] eax +
mov eax [esi+0F8h] +
mov [esi+104h] eax +
mov eax [esi+0FCh] +
mov [esi+108h] eax +
jmp loc_10101BA  +
test ebx ebx +
jl loc_10101BA  +
lea eax [esi+100h] +
push eax  +
push ecx  +
push [ebp+arg_8]  +
mov ecx [esi+0C8h] +
push [ebp+arg_4]  +
push edi  +
call sub_1017534  +
mov ebx eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
cmp [ebp+arg_0] 0 +
mov [ebp+var_C] ecx +
jz locret_101036C  +
mov eax [ebp+arg_4] +
imul eax eax +
push ebx  +
mov ebx [ecx+108h] +
push esi  +
mov esi [ecx+0D8h] +
push edi  +
mov edi [ecx+0E4h] +
add ebx eax +
push dword ptr [ebx+4]  +
mov [ebp+var_1] 0 +
mov [ebp+var_18] eax +
add esi eax +
add edi eax +
call ds:SysStringLen  +
push dword ptr [esi+4]  +
mov [ebp+var_10] eax +
call ds:SysStringLen  +
push dword ptr [edi+4]  +
mov [ebp+var_8] eax +
call ds:SysStringLen  +
cmp [ebp+var_8] 0 +
mov [ebp+var_14] eax +
jbe loc_1010257  +
test eax eax +
jbe loc_1010257  +
cmp [ebp+var_8] eax +
jnz loc_1010253  +
push 1  +
push eax  +
push dword ptr [edi+4]  +
push [ebp+var_8]  +
push dword ptr [esi+4]  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
setnz [ebp+var_1]  +
jmp loc_1010257  +
mov [ebp+var_1] 1 +
cmp [ebp+var_1] 0 +
mov [ebp+var_3] 0 +
mov [ebp+var_2] 0 +
jz loc_10102AD  +
mov eax [ebp+var_10] +
cmp eax [ebp+var_8] +
jnz loc_101028C  +
push 0  +
push [ebp+var_8]  +
push dword ptr [esi+4]  +
push eax  +
push dword ptr [ebx+4]  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
setz [ebp+var_2]  +
cmp [ebp+var_2] 0 +
jnz loc_10102AD  +
mov eax [ebp+var_10] +
cmp eax [ebp+var_14] +
jnz loc_10102AD  +
push 0  +
push [ebp+var_14]  +
push dword ptr [edi+4]  +
push eax  +
push dword ptr [ebx+4]  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
setz [ebp+var_3]  +
mov al [ebp+var_2] +
or al [ebp+var_3] +
jz loc_10102BF  +
cmp [ebp+var_3] 0 +
mov byte ptr [ebp+var_8] 1 +
jnz loc_10102C3  +
mov byte ptr [ebp+var_8] 0 +
test al al +
jz loc_101033F  +
push offset aParentkey  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_10102E9  +
mov byte ptr [eax+84h] 1 +
push [ebp+var_8]  +
mov ecx [ebp+var_C] +
mov ebx offset aInnerquad_1 +
push ebx  +
push [ebp+arg_0]  +
call sub_100E08F  +
push dword ptr [esi+18h]  +
mov ecx [ebp+var_C] +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_0]  +
call sub_100E00F  +
cmp byte ptr [ebp+var_8] 0 +
mov ecx [ebp+var_C] +
setz al  +
movzx eax al +
push eax  +
mov esi offset aInnerquad_3 +
push esi  +
push [ebp+arg_0]  +
call sub_100E08F  +
push dword ptr [edi+18h]  +
mov ecx [ebp+var_C] +
push dword ptr [edi+4]  +
push esi  +
push [ebp+arg_0]  +
call sub_100E00F  +
jmp loc_1010369  +
mov esi [ebp+var_C] +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100E1A1  +
mov eax [esi+108h] +
mov ecx [ebp+var_18] +
cmp dword ptr [eax+ecx+4] 0 +
jz loc_1010369  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_100F2D4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi] ecx +
mov cl [eax+4] +
add eax 8 +
mov [esi+4] cl +
push eax  +
lea ecx [esi+8] +
call sub_100FFDB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi] ecx +
mov cl [eax+4] +
add eax 8 +
mov [esi+4] cl +
push eax  +
lea ecx [esi+8] +
call sub_100FFA6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
add ecx 1B4h +
push ecx  +
mov ecx [ebp+8] +
call sub_100FFDB  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
add ecx 1B4h +
call sub_100FFDB  +
push dword ptr [ebp+8]  +
call ds:SysFreeString  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
push esi  +
mov esi ecx +
jz loc_1010462  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1010462  +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jg loc_1010462  +
push [ebp+lpString]  +
lea eax [eax+ecx*2] +
push eax  +
call sub_100FA1F  +
test eax eax +
jz loc_1010462  +
sub eax [esi] +
sar eax 1 +
jmp loc_1010465  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100F891  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_100F967  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jle loc_10104D1  +
push dword ptr [eax+4]  +
call sub_100F8F8  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_1010501  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100F9CC  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_100FAB4  +
mov esi eax +
test esi esi +
jz loc_101054F  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_1010547  +
mov [edi] esi +
jmp loc_1010554  +
push esi  +
call sub_101840B  +
jmp loc_1010554  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_100FAEB  +
test eax eax +
jnz loc_1010585  +
xor al al +
jmp locret_1010593  +
mov ecx [ebp+arg_4] +
add eax 4 +
push eax  +
call sub_1010375  +
mov al 1 +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
push edi  +
call sub_100FB43  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
test edi edi +
jnz loc_10105D7  +
push 80004005h  +
call loc_100540D  +
push edi  +
call sub_100FB43  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_100FB8B  +
test eax eax +
jnz loc_101060F  +
xor al al +
jmp locret_1010619  +
mov eax [eax+4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov al 1 +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_100FC47  +
test eax eax +
jnz loc_1010645  +
xor al al +
jmp locret_101064F  +
mov eax [eax+4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov al 1 +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_100FC47  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
test esi esi +
jnz loc_1010696  +
push 80004005h  +
call loc_100540D  +
push esi  +
call sub_100FBFF  +
mov [edi] eax +
pop edi  +
lea eax [esi+4] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_10106E2  +
cmp [esi+8] ebx +
jbe loc_10106E2  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_10106D5  +
mov eax edi +
mov edi [edi+8] +
push eax  +
mov ecx esi +
call sub_100FF26  +
test edi edi +
jnz loc_10106C8  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_10106C1  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_1010705  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FE98  +
mov ecx esi +
call sub_100E821  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2Ch] 0 +
push edi  +
jnz loc_101075F  +
push 18h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_100E88A  +
test eax eax +
jnz loc_1010742  +
push 8007000Eh  +
call loc_100540D  +
mov ecx [esi+24h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-14h] +
jmp loc_101075C  +
mov edx [esi+2Ch] +
mov [eax+10h] edx +
mov [esi+2Ch] eax +
sub eax 18h +
dec ecx  +
jns loc_1010750  +
mov edi [esi+2Ch] +
xor eax eax +
test edi edi +
setnz al  +
test eax eax +
jnz loc_1010774  +
push 80004005h  +
jmp loc_101073D  +
push [ebp+arg_8]  +
mov eax [edi+10h] +
push [ebp+arg_0]  +
mov ecx edi +
mov [esi+2Ch] eax +
call sub_100FF80  +
inc dword ptr [esi+4]  +
mov eax [ebp+arg_4] +
mov ecx [esi] +
shl eax 2 +
mov ecx [eax+ecx] +
mov [edi+10h] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_10107BB  +
cmp dword ptr [esi+20h] 0 +
jnz loc_10107BB  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FCA2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2Ch] 0 +
push edi  +
jnz loc_1010810  +
push 10h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_100E88A  +
test eax eax +
jnz loc_10107F3  +
push 8007000Eh  +
call loc_100540D  +
mov ecx [esi+24h] +
mov edx ecx +
shl edx 4 +
lea eax [edx+eax-0Ch] +
jmp loc_101080D  +
mov edx [esi+2Ch] +
mov [eax+8] edx +
mov [esi+2Ch] eax +
sub eax 10h +
dec ecx  +
jns loc_1010801  +
mov edi [esi+2Ch] +
xor eax eax +
test edi edi +
setnz al  +
test eax eax +
jnz loc_1010825  +
push 80004005h  +
jmp loc_10107EE  +
mov eax [edi+8] +
mov [esi+2Ch] eax +
mov ax [ebp+arg_0] +
mov [edi] ax +
mov eax [ebp+arg_8] +
mov [edi+0Ch] eax +
inc dword ptr [esi+4]  +
mov eax [ebp+arg_4] +
mov ecx [esi] +
shl eax 2 +
mov ecx [eax+ecx] +
mov [edi+8] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_101086C  +
cmp dword ptr [esi+20h] 0 +
jnz loc_101086C  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FD9D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_1010897  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi 10000h +
cmp dword_102711C ebx +
jz loc_1010924  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10108E7  +
test al al +
jnz loc_1010924  +
mov ecx dword_102710C +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1010924  +
mov eax dword_1027114 +
xor ecx ecx +
and eax esi +
cmp ecx dword_1027110 +
jnz loc_1010924  +
cmp eax dword_1027114 +
jnz loc_1010924  +
push offset dword_1002DB0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [edi+184h] +
call sub_1010622  +
test al al +
jz loc_101096C  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+8] +
call loc_1005E48  +
push dword ptr [ebp+8]  +
mov ecx [edi+0CCh] +
push dword ptr [ebp-10h]  +
and dword ptr [ebp-4] 0 +
call sub_1017E7F  +
push dword ptr [ebp+8]  +
mov ebx eax +
mov byte ptr [edi+16Eh] 1 +
call ds:SysFreeString  +
cmp dword_102711C 0 +
jz loc_10109CC  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1010982  +
test al al +
jnz loc_10109CC  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edx 80000000h +
and eax esi +
and ecx edx +
or eax ecx +
jz loc_10109CC  +
mov edi dword_1027110 +
mov eax edi +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx edx +
cmp eax edi +
jnz loc_10109CC  +
cmp ecx esi +
jnz loc_10109CC  +
push offset dword_1002DC0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
mov [ebp+var_10] ecx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1010BAD  +
cmp [ebp+arg_4] ebx +
jz loc_1010BAD  +
push [ebp+arg_4]  +
call sub_100E1A1  +
push offset aParentkey  +
call StrToID  +
mov ecx [ebp+arg_4] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax ebx +
jz loc_1010BA4  +
lea ecx [ebp+var_14] +
push ecx  +
mov ecx eax +
mov [ebp+var_14] ebx +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov [ebp+var_18] eax +
cmp eax ebx +
jz loc_1010B8E  +
test dword ptr [eax] 0FFFFFFFh +
mov [ebp+var_8] ebx +
jbe loc_1010B95  +
push esi  +
push edi  +
push [ebp+var_8]  +
mov ecx eax +
call sub_100F86D  +
mov esi [eax] +
cmp esi ebx +
jz loc_1010B73  +
movzx edi word ptr [esi+58h] +
push offset aInnerkeyimager  +
call StrToID  +
cmp di ax +
jz loc_1010B73  +
movzx edi word ptr [esi+58h] +
push offset aParentkey20  +
call StrToID  +
cmp di ax +
jnz loc_1010AA8  +
push offset aInnerkey  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
jmp loc_1010B00  +
movzx edi word ptr [esi+58h] +
push offset aInnerkeyimage  +
call StrToID  +
cmp di ax +
jnz loc_1010B00  +
push offset aInnerkeyimager  +
call StrToID  +
mov ecx [ebp+arg_4] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax ebx +
jz loc_1010B00  +
lea ecx [ebp+var_C] +
push ecx  +
mov ecx eax +
mov [ebp+var_C] ebx +
call ?GetContentString@Element@DirectUI@@QAEPBGPAPAVValue@2@@Z  +
push eax  +
call ds:_wtoi  +
pop ecx  +
mov ecx [ebp+var_C] +
mov [ebp+arg_0] eax +
cmp ecx ebx +
jz loc_1010B00  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov [ebp+var_C] ebx +
mov eax [ebp+arg_0] +
lea ecx [eax-3A9Ah] +
cmp ecx 61h +
ja loc_1010B2E  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_10] +
imul eax eax +
mov ecx [ecx+180h] +
push dword ptr [ecx+eax+10h]  +
mov ecx esi +
call ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
mov [ebp+var_4] eax +
jmp loc_1010B73  +
add eax 0FFFFC373h +
cmp eax 7 +
ja loc_1010B73  +
mov eax [ebp+var_10] +
push 1  +
push ebx  +
push dword ptr [eax+11Ch]  +
movzx eax word ptr [ebp+arg_0] +
push ebx  +
push ebx  +
push eax  +
call ?CreateGraphic@Value@DirectUI@@SGPAV12@PBGGGPAUHINSTANCE__@@_N2@Z  +
mov edi eax +
cmp edi ebx +
jz loc_1010B73  +
push edi  +
push 1  +
push ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx esi +
call ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z  +
mov ecx edi +
mov [ebp+var_4] eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax [ebp+var_18] +
mov ecx [eax] +
inc [ebp+var_8]  +
and ecx 0FFFFFFFh +
cmp [ebp+var_8] ecx +
jb loc_1010A50  +
pop edi  +
pop esi  +
jmp loc_1010B95  +
mov [ebp+var_4] 80004005h +
mov ecx [ebp+var_14] +
cmp ecx ebx +
jz loc_1010BB4  +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_1010BB4  +
mov [ebp+var_4] 80004005h +
jmp loc_1010BB4  +
mov [ebp+var_4] 80070057h +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+9Ch] +
test edi edi +
jz loc_1010C39  +
jle loc_1010C40  +
mov eax edi +
shl eax 2 +
push eax  +
call ds:CoTaskMemAlloc  +
mov [ebp+var_C] eax +
test eax eax +
jnz loc_1010BF9  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1010C40  +
push ebx  +
lea ebx [esi+98h] +
mov ecx ebx +
call sub_100E71B  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1010C29  +
mov esi [ebp+var_C] +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_10105BD  +
mov eax [eax] +
mov [esi] eax +
add esi 4 +
cmp [ebp+var_8] 0 +
jnz loc_1010C11  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_C] +
mov [eax] edi +
mov eax [ebp+arg_4] +
mov [eax] ecx +
pop ebx  +
jmp loc_1010C40  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_0] +
xor eax eax +
push esi  +
xor esi esi +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
cmp [edx-0Ch] eax +
jz loc_1010CB2  +
cmp [ecx+13Ch] eax +
jz loc_1010CAB  +
lea eax [ebp+var_4] +
push eax  +
push edx  +
add ecx 138h +
call sub_10105EC  +
cmp al 1 +
jnz loc_1010CAB  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
call sub_1010622  +
test al al +
jz loc_1010CAB  +
mov eax [ebp+var_8] +
mov ecx [eax] +
mov edx [ebp+arg_8] +
mov [edx] ecx +
mov eax [eax+4] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
jmp loc_1010CB7  +
mov esi 80004005h +
jmp loc_1010CB7  +
mov esi 80070057h +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1010491  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp+var_4] esi +
jge loc_1010D02  +
and [ebp+arg_0] 0 +
mov ebx [ebp+arg_4] +
test ebx ebx +
jge loc_1010D0B  +
xor ebx ebx +
push [ebp+arg_0]  +
mov eax [esi] +
mov edi [eax-0Ch] +
push ebx  +
call sub_100FA8A  +
cmp eax edi +
jle loc_1010D22  +
mov ebx edi +
sub ebx [ebp+arg_0] +
test ebx ebx +
jle loc_1010D5E  +
mov ecx [ebp+var_4] +
mov esi edi +
sub esi [ebp+arg_0] +
sub esi ebx +
inc esi  +
call sub_10104B9  +
mov ecx [ebp+arg_0] +
add esi esi +
lea edx [ecx+ebx] +
push esi  +
lea edx [eax+edx*2] +
push edx  +
lea eax [eax+ecx*2] +
push esi  +
push eax  +
call sub_1008EFA  +
mov ecx [ebp+var_4] +
add esp 10h +
sub edi ebx +
push edi  +
call loc_100E584  +
mov esi [ebp+var_4] +
mov eax [esi] +
mov eax [eax-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jge loc_1010D84  +
xor edi edi +
mov esi [ecx] +
cmp edi [esi-0Ch] +
jl loc_1010D96  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1010CCE  +
jmp loc_1010DA6  +
call sub_100F815  +
mov ecx [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
call sub_101046F  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call __EH_prolog3  +
mov esi ?GetClassInfoPtr@Element@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jnz loc_1010DD8  +
call ?Register@Element@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_1010DE0  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_1010E78  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
mov ebx eax +
push ebx  +
mov [ebp-14h] ebx +
call ds:EnterCriticalSection  +
xor edi edi +
mov [ebp-4] edi +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_1010E65  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
mov dword_10270EC edi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101050D  +
mov edi eax +
test edi edi +
jl loc_1010E6D  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_1010E5C  +
mov dword_10270EC esi +
jmp loc_1010E6D  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_1010E6D  +
mov eax [ebp-10h] +
mov dword_10270EC eax +
test ebx ebx +
jz loc_1010E78  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax edi +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10104DA  +
push [ebp+arg_0]  +
mov ecx esi +
call loc_100E584  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_1010EC0  +
call sub_100E5B6  +
jmp loc_1010F15  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1010ED2  +
push 80070057h  +
call loc_100540D  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_10104DA  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_1010EFB  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_100E618  +
jmp loc_1010F07  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_100E5F2  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_100E584  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_100D8A3  +
mov esi eax +
test esi esi +
jz loc_1010F60  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_10104DA  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_100DA08  +
push edi  +
mov ecx ebx +
call loc_100E584  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
fstp  dword ptr [esi+0Ch] +
fld  [ebp+arg_8] +
or dword ptr [esi+18h] 0FFFFFFFFh +
xor eax eax +
fstp  dword ptr [esi+10h] +
fld  [ebp+arg_C] +
mov [esi+8] ecx +
mov ecx [ebp+arg_10] +
fstp  dword ptr [esi+14h] +
mov [esi+24h] ecx +
mov ecx esi +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
call sub_100E841  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1010FEA  +
push 1  +
push dword ptr [esi+8]  +
call sub_100FE98  +
test al al +
jnz loc_1010FEA  +
push 8007000Eh  +
call loc_100540D  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1010717  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1011029  +
push 1  +
push dword ptr [esi+8]  +
call sub_100FE98  +
test al al +
jnz loc_1011029  +
push 8007000Eh  +
call loc_100540D  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10107C8  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_101105D  +
push 80004005h  +
call loc_100540D  +
push 0  +
mov ecx edi +
call sub_1010879  +
mov eax [esi+2Ch] +
mov [edi+10h] eax +
dec dword ptr [esi+4]  +
mov eax [esi+4] +
mov [esi+2Ch] edi +
cmp eax [esi+1Ch] +
jnb loc_1011090  +
cmp dword ptr [esi+20h] 0 +
jnz loc_1011090  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FCA2  +
cmp dword ptr [esi+4] 0 +
jnz loc_101109D  +
mov ecx esi +
call sub_100E821  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp [esi+1B8h] bx +
jz loc_101110E  +
push edi  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+arg_0] +
xor edi edi +
push eax  +
mov [ebp+arg_0] edi +
mov [ebp+pv] edi +
call sub_1010BC1  +
mov eax [ebp+arg_0] +
cmp eax edi +
jbe loc_10110FD  +
mov [ebp+arg_0] eax +
mov eax [esi+180h] +
add eax edi +
push ebx  +
push dword ptr [eax+8]  +
add eax 10h +
push eax  +
mov ecx esi +
call sub_100ED36  +
add edi 14h +
dec [ebp+arg_0]  +
jnz loc_10110DE  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov [esi+1B8h] bx +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi+100h] +
xor ebx ebx +
push offset aKbcontrol  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] edi +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_101118E  +
cmp edi ebx +
jle loc_1011195  +
xor edi edi +
mov eax [esi+180h] +
add eax edi +
mov ecx [eax+4] +
test ecx ecx +
jz loc_1011183  +
mov eax [eax+8] +
test eax eax +
jz loc_1011183  +
lea edx [eax-3C8Dh] +
cmp edx 7 +
ja loc_1011183  +
push ebx  +
push ecx  +
push eax  +
mov ecx esi +
call sub_10109DB  +
mov [ebp+var_4] eax +
inc ebx  +
add edi 14h +
cmp ebx [ebp+var_8] +
jl loc_1011155  +
jmp loc_1011195  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10106AC  +
test [ebp+arg_0] 1 +
jz loc_10111BE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ecx] +
push esi  +
mov esi [eax-0Ch] +
push edi  +
push esi  +
mov [ebp+var_10] ecx +
call sub_10104DA  +
lea edx [eax+esi*2] +
mov ecx eax +
mov [ebp+var_C] edx +
cmp eax edx +
jnb loc_101122A  +
push ebx  +
mov di [eax] +
lea edx [eax+2] +
mov [ebp+var_8] edx +
cmp di [ebp+arg_0] +
jz loc_1011221  +
sub edx eax +
sar edx 1 +
and [ebp+var_4] 0 +
lea edi [ecx+edx*2] +
jmp loc_101121D  +
cmp [ebp+var_4] edx +
jnb loc_1011221  +
mov bx [eax] +
inc eax  +
mov [ecx] bx +
inc eax  +
inc ecx  +
inc ecx  +
inc [ebp+var_4]  +
cmp ecx edi +
jnz loc_101120B  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_C] +
jb loc_10111EF  +
pop ebx  +
sub eax ecx +
sar eax 1 +
mov edi eax +
xor edx edx +
sub esi edi +
mov [ecx] dx +
mov ecx [ebp+var_10] +
push esi  +
call loc_100E584  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi] +
mov edx edi +
movzx eax word ptr [edx] +
xor ecx ecx +
test ax ax +
jz loc_101128E  +
cmp ax [ebp+arg_0] +
jnz loc_1011272  +
test ecx ecx +
jnz loc_1011274  +
mov ecx edx +
jmp loc_1011274  +
xor ecx ecx +
inc edx  +
inc edx  +
movzx eax word ptr [edx] +
test ax ax +
jnz loc_1011264  +
test ecx ecx +
jz loc_101128E  +
sub ecx edi +
sar ecx 1 +
push ecx  +
mov ecx esi +
call sub_1010E87  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov dx [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx [edi] +
mov eax ecx +
jmp loc_10112AF  +
inc eax  +
inc eax  +
cmp dx [eax] +
jz loc_10112AD  +
cmp eax ecx +
jz loc_10112EE  +
push ebx  +
sub eax ecx +
push esi  +
push dword ptr [ecx-0Ch]  +
sar eax 1 +
mov ecx edi +
mov ebx eax +
call sub_10104DA  +
mov ecx [edi] +
mov esi [ecx-0Ch] +
sub esi ebx +
lea ecx [esi+esi+2] +
push ecx  +
lea edx [eax+ebx*2] +
push edx  +
push ecx  +
push eax  +
call sub_1008EFA  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100E584  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_1011344  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_1011339  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_1011339  +
push ebx  +
push ecx  +
call sub_100F967  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_100D958  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_1011344  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_1010EAB  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1011363  +
push 1  +
call sub_10111A4  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100E671  +
test eax eax +
jz loc_101138C  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_1010F1F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100E63E  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1010EAB  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100FAEB  +
test eax eax +
jnz loc_10113EF  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1010FC5  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100FC47  +
test eax eax +
jnz loc_101142F  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1011004  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100FC47  +
test eax eax +
jnz loc_101146F  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1011004  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax+4] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_10114B7  +
cmp [esi+8] ebx +
jbe loc_10114B7  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_10114AA  +
mov eax edi +
mov edi [edi+10h] +
push eax  +
mov ecx esi +
call sub_1011043  +
test edi edi +
jnz loc_101149D  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_1011496  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_10114DA  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FE98  +
mov ecx esi +
call sub_100E821  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
call sub_100D958  +
test [ebp+arg_0] 1 +
jz loc_101150B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov [ebp-4] ebx +
call sub_1010BC1  +
mov eax [ebp+8] +
mov [eax] ebx +
or dword ptr [edi+110h] 0FFFFFFFFh +
cmp [ebp-10h] ebx +
jz loc_10115D3  +
cmp [ebp-18h] ebx +
jz loc_10115D3  +
mov [ebp-1Ch] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] bl +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] ebx +
jbe loc_10115AE  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
lea esi [eax+ecx*4] +
push dword ptr [esi]  +
lea ecx [edi+98h] +
call sub_10113BC  +
mov edx [ebp-14h] +
xor ecx ecx +
cmp [eax+4] bl +
mov eax [edi+114h] +
setnz cl  +
mov [eax+edx*4] ecx +
push dword ptr [esi]  +
lea ecx [edi+98h] +
call sub_10113BC  +
inc dword ptr [ebp-14h]  +
mov [eax+4] bl +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jb loc_1011569  +
mov eax [ebp-18h] +
mov ecx [ebp+8] +
mov [ecx] eax +
mov eax [ebp-10h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov eax [edi+114h] +
mov ecx [ebp+10h] +
push ebx  +
mov [ebp-10h] ebx +
mov [ecx] eax +
call ds:SysFreeString  +
push dword ptr [ebp-10h]  +
call ds:CoTaskMemFree  +
call __EH_epilog3  +
retn 0Ch  +
***
xor eax eax +
push eax  +
push eax  +
push eax  +
push offset aCkeyboardlayou  +
push offset __ImageBase  +
call sub_1010DB4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push offset aKbcontrol  +
mov edi ecx +
call StrToID  +
mov esi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_1011703  +
cmp dword ptr [edi+9Ch] 0 +
jz loc_1011703  +
xor eax eax +
push 1FCh  +
push eax  +
mov [ebp+var_204] ax +
lea eax [ebp-202h] +
push eax  +
call memset  +
push 10h  +
lea eax [ebp+var_204] +
push eax  +
push [ebp+arg_0]  +
call ds:_itow  +
add esp 18h +
lea eax [ebp+var_204] +
push eax  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_1011703  +
push offset aParentkey  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call esi  +
test eax eax +
jz loc_10116FC  +
cmp [ebp+arg_8] 0 +
mov ecx eax +
jnz loc_10116DE  +
push 0  +
call ?SetPressed@Button@DirectUI@@QAEJ_N@Z  +
push [ebp+arg_0]  +
lea ecx [edi+98h] +
mov esi eax +
call sub_10113BC  +
mov byte ptr [eax+4] 0 +
mov eax [ebx+28h] +
push dword ptr [eax+4]  +
call ds:InvalidateGadget  +
jmp loc_1011708  +
push 1  +
call ?SetPressed@Button@DirectUI@@QAEJ_N@Z  +
push [ebp+arg_0]  +
lea ecx [edi+98h] +
mov esi eax +
call sub_10113BC  +
mov byte ptr [eax+4] 1 +
jmp loc_1011708  +
mov esi 80070057h +
jmp loc_1011708  +
mov esi 80004005h +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101111B  +
***
call __EH_prolog3  +
mov edi ecx +
lea esi [edi+98h] +
mov ecx esi +
call sub_100E71B  +
mov [ebp-10h] eax +
test eax eax +
jz loc_10117AA  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_1015ECF  +
push eax  +
lea ecx [ebp-20h] +
call sub_10103A2  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp-10h]  +
xor eax eax +
cmp [ebp-1Ch] al +
mov ecx esi +
setnz al  +
mov [ebp-14h] eax +
call sub_100E6FC  +
push dword ptr [ebp-14h]  +
mov ecx edi +
push 0  +
push dword ptr [eax]  +
call sub_1011603  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_101059C  +
push dword ptr [ebp-18h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:SysFreeString  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_1011752  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_GS  +
mov esi [ebp+8] +
and dword ptr [ebp-218h] 0 +
push offset aKbcontrol  +
mov edi ecx +
mov [ebp-21Ch] esi +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp-220h] eax +
test eax eax +
jnz loc_1011807  +
mov dword ptr [ebp-218h] 80004005h +
jmp loc_101195D  +
test esi esi +
jnz loc_101181A  +
mov dword ptr [ebp-218h] 80004003h +
jmp loc_101195D  +
mov ebx [ebp+0Ch] +
xor ecx ecx +
push 14h  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp-214h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_101186A  +
push offset loc_100E42E  +
push offset loc_100E97C  +
push dword ptr [ebp+0Ch]  +
mov [eax] ebx +
lea ebx [eax+4] +
push 14h  +
push ebx  +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
jmp loc_101186C  +
xor ebx ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [edi+180h] ebx +
test ebx ebx +
jz loc_1011953  +
and dword ptr [ebp-214h] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_101195D  +
xor ebx ebx +
jmp loc_1011899  +
mov esi [ebp-21Ch] +
mov eax [ebp-214h] +
lea esi [esi+eax*4] +
mov eax [edi+180h] +
mov ecx [esi] +
mov [ebx+eax] ecx +
xor eax eax +
push 1FCh  +
push eax  +
mov [ebp-210h] ax +
lea eax [ebp-20Eh] +
push eax  +
call memset  +
push 10h  +
lea eax [ebp-210h] +
push eax  +
push dword ptr [esi]  +
call ds:_itow  +
add esp 18h +
lea eax [ebp-210h] +
push eax  +
call StrToID  +
mov ecx [ebp-220h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov ecx [edi+180h] +
mov [ecx+ebx+4] eax +
mov eax [edi+180h] +
lea eax [eax+ebx+8] +
push eax  +
push dword ptr [esi]  +
lea ecx [edi+98h] +
call sub_1010562  +
lea eax [ebp-210h] +
push eax  +
call StrToID  +
movzx eax ax +
push eax  +
lea ecx [edi+184h] +
call sub_10113FC  +
mov ecx [esi] +
inc dword ptr [ebp-214h]  +
mov [eax] ecx +
mov eax [ebp-214h] +
add ebx 14h +
cmp eax [ebp+0Ch] +
jb loc_1011893  +
jmp loc_101195D  +
mov dword ptr [ebp-218h] 8007000Eh +
mov eax [ebp-218h] +
call sub_101F014  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 184h +
call sub_10113FC  +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
call sub_101124D  +
mov ecx eax +
call sub_101129B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_10119D9  +
test [ebp+arg_0] 0FFFF0000h +
jnz loc_10119D9  +
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_101136D  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1011396  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_1011A22  +
push 80004005h  +
call loc_100540D  +
push 0  +
mov ecx edi +
call sub_10114EC  +
mov eax [esi+2Ch] +
mov [edi+8] eax +
dec dword ptr [esi+4]  +
mov eax [esi+4] +
mov [esi+2Ch] edi +
cmp eax [esi+1Ch] +
jnb loc_1011A55  +
cmp dword ptr [esi+20h] 0 +
jnz loc_1011A55  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FD9D  +
cmp dword ptr [esi+4] 0 +
jnz loc_1011A62  +
mov ecx esi +
call sub_100E821  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-28h] esi +
xor ebx ebx +
xor edi edi +
cmp [ebp+8] ebx +
jz loc_1011B83  +
mov [ebp-18h] ebx +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov [ebp-4] ebx +
mov [ebp-20h] ebx +
call sub_1010BC1  +
mov edi eax +
cmp edi ebx +
jl loc_1011B7A  +
cmp [ebp-18h] ebx +
jz loc_1011B7A  +
mov [ebp-14h] ebx +
mov eax [ebp-14h] +
cmp eax [ebp-20h] +
jnb loc_1011B4A  +
mov [ebp-1Ch] ebx +
mov eax [ebp-1Ch] +
cmp eax [ebp+0Ch] +
jnb loc_1011B23  +
mov eax [ebp-18h] +
mov ecx [ebp-14h] +
mov edx [ebp+10h] +
lea ecx [eax+ecx*4] +
mov eax [ebp-1Ch] +
mov [ebp-24h] ecx +
mov ecx [ecx] +
shl eax 2 +
mov byte ptr [ebp-4] 1 +
cmp ecx [eax+edx] +
jnz loc_1011B3F  +
mov edx [ebp+8] +
mov eax [eax+edx] +
mov edx [ebp-14h] +
lea edi [esi+114h] +
mov ecx [edi] +
mov [ecx+edx*4] eax +
mov eax [ebp-24h] +
push dword ptr [eax]  +
lea ecx [esi+98h] +
call sub_10113BC  +
mov ecx [edi] +
mov edx [ebp-14h] +
cmp [ecx+edx*4] ebx +
mov [ebp-4] bl +
setnz cl  +
mov [eax+4] cl +
inc dword ptr [ebp-14h]  +
jmp loc_1011AB7  +
call ds:DebugBreak  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1011B38 +
retn   +
mov esi [ebp-28h] +
xor ebx ebx +
jmp loc_1011B42  +
mov [ebp-4] ebx +
inc dword ptr [ebp-1Ch]  +
jmp loc_1011AC6  +
mov ecx esi +
call sub_1011730  +
mov ecx [esi+0C8h] +
lea edi [esi+10Ch] +
push edi  +
call sub_10175C8  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-20h]  +
push dword ptr [esi+1BCh]  +
call sub_101001D  +
mov edi eax +
push dword ptr [ebp-18h]  +
call ds:CoTaskMemFree  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
mov edi 80004005h +
call sub_1011970  +
test eax eax +
jz loc_1011BC1  +
mov ecx [esi+0CCh] +
push eax  +
call sub_1017E9D  +
mov edi eax +
mov byte ptr [esi+16Eh] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1011BFA  +
mov eax [ebp+8] +
test eax eax +
jz loc_1011BFA  +
mov eax [eax+28h] +
test eax eax +
jz loc_1011BFA  +
cmp byte ptr [ecx+16Eh] 0 +
jz loc_1011BFA  +
movzx eax word ptr [eax+58h] +
push eax  +
call sub_1011B92  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10119E2  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_1011C55  +
cmp [esi+8] ebx +
jbe loc_1011C55  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_1011C48  +
mov eax edi +
mov edi [edi+8] +
push eax  +
mov ecx esi +
call sub_1011A08  +
test edi edi +
jnz loc_1011C3B  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_1011C34  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_1011C78  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FE98  +
mov ecx esi +
call sub_100E821  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [ebp+8] +
mov [ebp-0Ch] ecx +
test ebx ebx +
jz loc_1011EB4  +
push esi  +
mov esi [ebx] +
mov [ebp-14h] esi +
test esi esi +
jz loc_1011CBF  +
mov eax [esi+28h] +
mov [ebp-4] eax +
mov eax [ebx+8] +
test eax eax +
jz loc_1011CCF  +
cmp eax 1 +
jnz loc_1011EA9  +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_1011EA9  +
mov eax [ebp-4] +
test eax eax +
jz loc_1011EA9  +
push edi  +
mov edi [eax+28h] +
mov eax [ebx+10h] +
mov [ebp-18h] edi +
cmp eax 1 +
jnz loc_1011E1F  +
cmp [ebx+20h] al +
jnz loc_1011E1F  +
test edi edi +
jz loc_1011EA8  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
push dword_1027334  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+28h]  +
test al al +
jnz loc_1011D42  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
push dword_10274FC  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+28h]  +
test al al +
jz loc_1011EA8  +
movzx eax word ptr [edi+58h] +
and dword ptr [ebp-8] 0 +
mov [ebp-10h] eax +
test ax ax +
jz loc_1011DE8  +
mov esi ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
push 0  +
push 1  +
push esi  +
push offset aInnerkey  +
call StrToID  +
mov ecx [ebp-4] +
mov edi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
call edi  +
mov ebx ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z +
mov ecx eax +
call ebx  +
mov [ebp-8] eax +
test eax eax +
jnz loc_1011DB1  +
push eax  +
push 1  +
push esi  +
push offset aInnerquad_1  +
call StrToID  +
mov ecx [ebp-4] +
movzx eax ax +
push eax  +
call edi  +
mov ecx eax +
call ebx  +
mov [ebp-8] eax +
test eax eax +
jz loc_1011EA5  +
mov ecx [ebp-14h] +
mov byte ptr [ecx+85h] 1 +
mov ecx [eax] +
and ecx 3Fh +
cmp cl 5 +
mov ecx [ebp-0Ch] +
jnz loc_1011DCD  +
push dword ptr [eax+4]  +
jmp loc_1011DCF  +
push 0  +
push dword ptr [ebp-10h]  +
call sub_10108BA  +
mov eax [ebp-18h] +
push dword ptr [eax+4]  +
call ds:InvalidateGadget  +
mov ebx [ebp+8] +
jmp loc_1011E09  +
mov ecx [ebp-4] +
mov eax [ecx] +
call dword ptr [eax+80h]  +
cmp dword_10270EC eax +
jz loc_1011EA8  +
mov ecx [ebx] +
mov eax [ecx] +
call dword ptr [eax+80h]  +
mov ecx [ebp-8] +
test ecx ecx +
jz loc_1011EA8  +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_1011EA8  +
cmp eax 2 +
jnz loc_1011EA8  +
cmp byte ptr [ebx+20h] 1 +
jnz loc_1011EA8  +
test edi edi +
jz loc_1011EA8  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
push dword_1027334  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+28h]  +
test al al +
jnz loc_1011E68  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
push dword_10274FC  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+28h]  +
test al al +
jz loc_1011EA8  +
mov ecx [ebp-0Ch] +
lea eax [esi+85h] +
mov bl [eax] +
mov byte ptr [eax] 0 +
movzx eax word ptr [edi+58h] +
push eax  +
call sub_1011B92  +
test eax eax +
jnz loc_1011EA5  +
cmp bl 1 +
jnz loc_1011EA5  +
mov ecx dword_10274B8 +
test ecx ecx +
jz loc_1011EA5  +
mov eax [ebp+8] +
test dword ptr [eax+24h] 8 +
jnz loc_1011EA5  +
push esi  +
call sub_101AA21  +
mov ebx [ebp+8] +
pop edi  +
mov ecx [ebp-0Ch] +
push ebx  +
call ?OnInput@Element@DirectUI@@UAEXPAUInputEvent@2@@Z  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
mov [ebp-14h] edi +
mov esi [ebp+0Ch] +
xor ebx ebx +
mov [ebp-20h] ebx +
cmp esi ebx +
jz loc_1012448  +
lea eax [ebp-48h] +
push eax  +
mov ecx esi +
mov [ebp-48h] ebx +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov ecx esi +
mov [ebp-38h] eax +
call ?GetHeight@Element@DirectUI@@QAEHXZ  +
mov ecx esi +
mov [ebp-3Ch] eax +
call ?GetWidth@Element@DirectUI@@QAEHXZ  +
mov [ebp-24h] eax +
cmp [ebp-38h] ebx +
jz loc_1012439  +
mov eax [ebp-38h] +
mov ebx [eax] +
and ebx 0FFFFFFFh +
push 0  +
mov [ebp-54h] ebx +
mov [ebp-1Ch] ebx +
pop esi  +
jle loc_101208D  +
mov ecx [ebp-38h] +
push esi  +
call sub_100F86D  +
mov eax [eax] +
cmp dword ptr [eax+4Ch] 0FFFFFFFDh +
jnz loc_1011F3E  +
dec dword ptr [ebp-1Ch]  +
inc esi  +
cmp esi ebx +
jl loc_1011F2A  +
cmp dword ptr [ebp-1Ch] 0 +
jle loc_101208D  +
mov eax [ebp-3Ch] +
cdq   +
idiv  dword ptr [ebp-1Ch] +
mov ecx eax +
cmp ecx 14h +
jl loc_1011F74  +
lea eax [ecx-14h] +
cdq   +
push 6  +
pop esi  +
idiv  esi +
inc eax  +
cmp eax 4 +
jle loc_1011F6F  +
push 4  +
pop eax  +
jmp loc_1011F83  +
cmp ecx 14h +
jge loc_1011F79  +
xor eax eax +
inc eax  +
jmp loc_1011F83  +
lea eax [ecx-14h] +
cdq   +
push 6  +
pop ecx  +
idiv  ecx +
inc eax  +
cmp byte ptr [edi+169h] 0 +
mov [edi+17Ch] eax +
jnz loc_101208D  +
push offset dword_1027698  +
lea ecx [ebp+0Ch] +
call sub_100F83E  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 0  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov esi eax +
push dword ptr [esi+4]  +
lea ecx [ebp+0Ch] +
call sub_1011396  +
mov edi [ebp+0Ch] +
mov ecx offset aKbcontrolaux +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1011FF7  +
test dx dx +
jz loc_1011FF3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1011FF7  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1011FD1  +
xor eax eax +
jmp loc_1011FFC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1012079  +
mov ecx offset aKbcontroloskme +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101202D  +
test dx dx +
jz loc_1012029  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101202D  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1012007  +
xor eax eax +
jmp loc_1012032  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1012079  +
mov ecx offset aKbcontroloskpr +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1012063  +
test dx dx +
jz loc_101205F  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1012063  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101203D  +
xor eax eax +
jmp loc_1012068  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1012079  +
mov eax [ebp-14h] +
mov dword ptr [eax+17Ch] 1 +
mov ecx esi +
call ?Release@Value@DirectUI@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [edi-10h] +
call sub_100D958  +
and dword ptr [ebp-18h] 0 +
test ebx ebx +
jle loc_1012439  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-38h] +
call sub_100F86D  +
mov esi [eax] +
cmp dword ptr [esi+4Ch] 0FFFFFFFDh +
jnz loc_10120BB  +
push 0  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
jmp loc_101242D  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_10120C6  +
push dword ptr [ebp-3Ch]  +
jmp loc_10120D4  +
mov eax [ebp-3Ch] +
cdq   +
idiv  dword ptr [ebp-1Ch] +
cmp edx [ebp-18h] +
jle loc_10120D3  +
inc eax  +
push eax  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push dword ptr [ebp-24h]  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
mov ecx esi +
call ?GetHeight@Element@DirectUI@@QAEHXZ  +
and dword ptr [ebp-44h] 0 +
mov [ebp-40h] eax +
lea eax [ebp-44h] +
push eax  +
mov ecx esi +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov [ebp-30h] eax +
test eax eax +
jz loc_101241C  +
mov ebx [eax] +
and dword ptr [ebp-2Ch] 0 +
and dword ptr [ebp-28h] 0 +
push offset dword_1027698  +
lea ecx [ebp+8] +
and ebx 0FFFFFFFh +
call sub_100F83E  +
movzx edi word ptr [esi+58h] +
push 0  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx esi +
mov dword ptr [ebp-4] 1 +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
push dword ptr [eax+4]  +
lea ecx [ebp+8] +
mov [ebp-50h] eax +
call sub_1011396  +
mov eax [ebp+8] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_101216B  +
push offset aDefault  +
lea ecx [ebp+8] +
call sub_1011396  +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
push edi  +
push ecx  +
lea eax [ebp+8] +
mov [ebp-34h] esp +
mov ecx esp +
push eax  +
call sub_1010491  +
mov ecx [ebp-14h] +
call sub_1010C4E  +
mov [ebp-20h] eax +
test eax eax +
jl loc_1012401  +
and dword ptr [ebp-10h] 0 +
test ebx ebx +
jle loc_1012401  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-30h] +
and dword ptr [ebp-34h] 0 +
call sub_100F86D  +
mov esi [eax] +
push offset aParentkey  +
call StrToID  +
mov edi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
mov esi eax +
test esi esi +
jz loc_1012344  +
push 0  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx esi +
mov byte ptr [ebp+0Fh] 0 +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov edi eax +
push dword ptr [edi+4]  +
lea ecx [ebp+8] +
call sub_1011396  +
mov eax [ebp+8] +
cmp dword ptr [eax-0Ch] 0 +
movzx esi word ptr [esi+58h] +
jnz loc_1012214  +
push offset aDefault  +
lea ecx [ebp+8] +
call sub_1011396  +
jmp loc_1012259  +
mov ecx offset aBasekeyoverlap +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101223F  +
test dx dx +
jz loc_101223B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101223F  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1012219  +
xor eax eax +
jmp loc_1012244  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1012259  +
push offset aBasekey  +
lea ecx [ebp+8] +
call sub_1011396  +
mov byte ptr [ebp+0Fh] 1 +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push esi  +
push ecx  +
lea eax [ebp+8] +
mov [ebp-58h] esp +
mov ecx esp +
push eax  +
call sub_1010491  +
mov ecx [ebp-14h] +
call sub_1010C4E  +
cmp byte ptr [ebp+0Fh] 0 +
mov ecx [ebp-14h] +
mov [ebp-20h] eax +
jz loc_1012292  +
cmp byte ptr [ecx+1C5h] 0 +
jnz loc_1012292  +
and dword ptr [ebp-34h] 0 +
test eax eax +
jl loc_1012337  +
mov eax [ebp-34h] +
imul eax [ebp-24h] +
cdq   +
idiv  dword ptr [ebp-4Ch] +
cmp byte ptr [ebp+0Fh] 0 +
mov esi eax +
jz loc_10122B2  +
add [ebp-28h] esi +
jmp loc_10122BF  +
cmp dword ptr [ebp-28h] 0 +
jz loc_10122BF  +
sub esi [ebp-28h] +
and dword ptr [ebp-28h] 0 +
add [ebp-2Ch] esi +
lea eax [ebx-1] +
cmp [ebp-10h] eax +
jnz loc_1012318  +
cmp byte ptr [ecx+168h] 1 +
jnz loc_1012304  +
cmp dword ptr [ebp-18h] 1 +
jz loc_10122DF  +
cmp dword ptr [ebp-18h] 2 +
jnz loc_1012304  +
cmp byte ptr [ecx+16Ah] 1 +
jnz loc_1012304  +
push dword ptr [ebp-3Ch]  +
mov ecx [ebp-14h] +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-40h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-18h]  +
call sub_100F5A1  +
jmp loc_1012318  +
cmp [ebp-10h] eax +
jnz loc_1012318  +
mov eax [ebp-2Ch] +
cmp eax [ebp-24h] +
jz loc_1012318  +
mov ecx [ebp-24h] +
sub ecx eax +
add esi ecx +
push dword ptr [ebp-10h]  +
mov ecx [ebp-30h] +
call sub_100F86D  +
mov eax [eax] +
mov ecx [ebp-14h] +
push 0  +
push esi  +
push dword ptr [ebp-40h]  +
push eax  +
call sub_100E33D  +
mov [ebp-20h] eax +
mov ecx edi +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_10123F5  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-30h] +
call sub_100F86D  +
mov esi [eax] +
push offset aBlankremainder  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
mov esi eax +
test esi esi +
jz loc_101237D  +
push dword ptr [ebp-40h]  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push eax  +
jmp loc_10123E4  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-30h] +
call sub_100F86D  +
mov esi [eax] +
push offset aEmptycolsym  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
mov esi eax +
test esi esi +
jz loc_10123EE  +
movzx edi word ptr [esi+58h] +
push offset aKbcontrolsym  +
lea ecx [ebp+8] +
call sub_1011396  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push edi  +
push ecx  +
lea eax [ebp+8] +
mov [ebp+0Ch] esp +
mov ecx esp +
push eax  +
call sub_1010491  +
mov ecx [ebp-14h] +
call sub_1010C4E  +
push dword ptr [ebp-40h]  +
mov ecx esi +
mov [ebp-20h] eax +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push dword ptr [ebp-34h]  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
jmp loc_10123F5  +
mov dword ptr [ebp-20h] 80004005h +
inc dword ptr [ebp-10h]  +
cmp [ebp-10h] ebx +
jl loc_10121A2  +
mov ecx [ebp-50h] +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov ebx [ebp-54h] +
mov ecx [ebp-44h] +
test ecx ecx +
jz loc_101242D  +
call ?Release@Value@DirectUI@@QAEXXZ  +
and dword ptr [ebp-44h] 0 +
inc dword ptr [ebp-18h]  +
cmp [ebp-18h] ebx +
jl loc_1012099  +
mov ecx [ebp-48h] +
test ecx ecx +
jz loc_101244F  +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_101244F  +
mov dword ptr [ebp-20h] 80070057h +
mov eax [ebp-20h] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_GS  +
push 10h  +
mov [ebp-23Ch] ecx +
call ds:GetUserGeoID  +
and dword ptr [ebp-224h] 0 +
and dword ptr [ebp-220h] 0 +
mov edi eax +
lea eax [ebp-220h] +
push eax  +
lea eax [ebp-224h] +
push eax  +
push edi  +
call sub_100DB5E  +
mov [ebp-219h] al +
mov ebx 0F4h +
test al al +
jnz loc_10124CB  +
lea eax [ebp-220h] +
push eax  +
lea eax [ebp-224h] +
push eax  +
push ebx  +
mov edi ebx +
call sub_100DB5E  +
mov [ebp-219h] al +
mov eax [ebp-23Ch] +
cmp byte ptr [eax+169h] 0 +
mov esi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
mov [eax+1C8h] edi +
mov byte ptr [ebp-225h] 0 +
jnz loc_1012621  +
push offset aRow4  +
call StrToID  +
mov ecx [ebp-23Ch] +
movzx eax ax +
push eax  +
call esi  +
push offset aRow5  +
mov [ebp-230h] eax +
call StrToID  +
mov ecx [ebp-23Ch] +
movzx eax ax +
push eax  +
call esi  +
cmp dword ptr [ebp-230h] 0 +
mov [ebp-234h] eax +
jz loc_1012621  +
test eax eax +
jz loc_1012621  +
push offset dword_1027698  +
lea ecx [ebp-22Ch] +
call sub_100F83E  +
mov ecx [ebp-230h] +
and dword ptr [ebp-4] 0 +
push 0  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
push dword ptr [eax+4]  +
lea ecx [ebp-22Ch] +
mov [ebp-238h] eax +
call sub_1011396  +
mov eax [ebp-22Ch] +
mov ecx offset aRowweb +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10125AD  +
test dx dx +
jz loc_10125A9  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10125AD  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1012587  +
xor eax eax +
jmp loc_10125B2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1012603  +
cmp edi ebx +
setz bl  +
mov byte ptr [ebp-225h] 1 +
cmp [ebp-219h] al +
jz loc_10125D1  +
test bl bl +
jnz loc_10125D1  +
inc eax  +
jmp loc_10125D4  +
push 0FFFFFFFDh  +
pop eax  +
mov ecx [ebp-230h] +
push eax  +
call ?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
cmp byte ptr [ebp-219h] 0 +
jz loc_10125F3  +
test bl bl +
jnz loc_10125F3  +
push 0FFFFFFFDh  +
pop eax  +
jmp loc_10125F6  +
xor eax eax +
inc eax  +
mov ecx [ebp-234h] +
push eax  +
call ?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
mov ecx [ebp-238h] +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx [ebp-22Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_100D958  +
push offset a10306  +
call StrToID  +
mov edi [ebp-23Ch] +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset a10307  +
mov [ebp-22Ch] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
cmp byte ptr [ebp-219h] 0 +
mov [ebp-230h] eax +
jz loc_1012A7F  +
xor ebx ebx +
cmp [ebp-22Ch] ebx +
jnz loc_1012676  +
cmp eax ebx +
jz loc_1012A7F  +
mov [ebp-24Ch] ebx +
mov [ebp-248h] ebx +
mov [ebp-244h] ebx +
push 20019h  +
push offset aSoftwareMicr_3  +
push 80000001h  +
lea ecx [ebp-24Ch] +
mov dword ptr [ebp-4] 1 +
xor esi esi +
mov dword ptr [ebp-234h] 7Ch +
mov [ebp-240h] ebx +
call sub_1008F20  +
test eax eax +
jnz loc_10126FF  +
lea eax [ebp-238h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
push off_1026490  +
lea ecx [ebp-24Ch] +
mov dword ptr [ebp-238h] 104h +
call sub_100DA90  +
test eax eax +
jz loc_10126F9  +
lea ecx [ebp-24Ch] +
call sub_1007B27  +
jmp loc_10126FF  +
mov esi [ebp-238h] +
cmp byte ptr [edi+169h] 0 +
jz loc_1012834  +
cmp esi ebx +
jz loc_1012A09  +
lea eax [ebp-238h] +
push eax  +
lea eax [ebp-27Ch] +
push eax  +
push lpValueName  +
lea ecx [ebp-24Ch] +
mov dword ptr [ebp-238h] 30h +
call sub_100DA5A  +
test eax eax +
jnz loc_1012822  +
lea eax [ebp-240h] +
push eax  +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
xor bl bl +
call wcstok_s  +
mov edi eax +
add esp 0Ch +
test edi edi +
jz loc_1012822  +
cmp dword ptr [ebp-27Ch] 0Ah +
mov esi ds:SysAllocString +
jb loc_10127E5  +
mov ecx [ebp-224h] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10127A9  +
test dx dx +
jz loc_10127A5  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10127A9  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1012783  +
xor eax eax +
jmp loc_10127AE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_10127C9  +
push dword ptr [ebp-220h]  +
call ds:SysFreeString  +
push edi  +
call esi  +
mov [ebp-220h] eax +
jmp loc_10127CB  +
mov bl 1 +
lea eax [ebp-240h] +
push eax  +
lea eax [ebp-234h] +
push eax  +
push 0  +
call wcstok_s  +
add esp 0Ch +
mov edi eax +
test edi edi +
jz loc_1012822  +
cmp dword ptr [ebp-278h] 0Ah +
jb loc_1012822  +
test bl bl +
jz loc_101280D  +
push dword ptr [ebp-220h]  +
call ds:SysFreeString  +
push edi  +
call esi  +
mov [ebp-220h] eax +
jmp loc_1012822  +
push dword ptr [ebp-224h]  +
call ds:SysFreeString  +
push edi  +
call esi  +
mov [ebp-224h] eax +
lea ecx [ebp-24Ch] +
call sub_1007B27  +
xor ebx ebx +
jmp loc_1012A09  +
cmp byte ptr [ebp-225h] 0 +
jz loc_1012A09  +
cmp [ebp-230h] ebx +
jz loc_1012A09  +
mov ecx [ebp-224h] +
push 4  +
mov eax offset a_com +
pop edi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101287F  +
cmp dx bx +
jz loc_101287B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101287F  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_101285B  +
xor eax eax +
jmp loc_1012884  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_10128FC  +
mov ecx [ebp-224h] +
mov eax offset a_net +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10128B7  +
cmp dx bx +
jz loc_10128B3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10128B7  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_1012893  +
xor eax eax +
jmp loc_10128BC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_10128FC  +
mov ecx [ebp-224h] +
mov eax offset a_org +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10128EF  +
cmp dx bx +
jz loc_10128EB  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10128EF  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_10128CB  +
xor eax eax +
jmp loc_10128F4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_1012A09  +
cmp esi ebx +
jnz loc_1012917  +
push off_10264B0  +
lea eax [ebp-218h] +
push 104h  +
push eax  +
call sub_100E9BB  +
lea eax [ebp-240h] +
push eax  +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
jmp loc_10129DC  +
mov ecx esi +
mov eax offset a_com +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101295C  +
cmp dx bx +
jz loc_1012958  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101295C  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_1012938  +
xor eax eax +
jmp loc_1012961  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_10129CD  +
mov ecx esi +
mov eax offset a_net +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1012990  +
cmp dx bx +
jz loc_101298C  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1012990  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_101296C  +
xor eax eax +
jmp loc_1012995  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_10129CD  +
mov ecx esi +
mov eax offset a_org +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10129C4  +
cmp dx bx +
jz loc_10129C0  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10129C4  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_10129A0  +
xor eax eax +
jmp loc_10129C9  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_10129F0  +
lea eax [ebp-240h] +
push eax  +
lea eax [ebp-234h] +
push eax  +
push ebx  +
call wcstok_s  +
mov esi eax +
add esp 0Ch +
cmp esi ebx +
jnz loc_1012931  +
jmp loc_1012A09  +
push dword ptr [ebp-220h]  +
call ds:SysFreeString  +
push esi  +
call ds:SysAllocString  +
mov [ebp-220h] eax +
mov esi offset aInnerkey +
cmp [ebp-22Ch] ebx +
jz loc_1012A41  +
mov ecx [ebp-23Ch] +
push ebx  +
push dword ptr [ebp-224h]  +
push esi  +
push dword ptr [ebp-22Ch]  +
call sub_100E00F  +
push dword ptr [ebp-224h]  +
mov ecx [ebp-22Ch] +
call ?SetAccName@Element@DirectUI@@QAEJPBG@Z  +
cmp [ebp-230h] ebx +
jz loc_1012A74  +
mov ecx [ebp-23Ch] +
push ebx  +
push dword ptr [ebp-220h]  +
push esi  +
push dword ptr [ebp-230h]  +
call sub_100E00F  +
push dword ptr [ebp-220h]  +
mov ecx [ebp-230h] +
call ?SetAccName@Element@DirectUI@@QAEJPBG@Z  +
lea ecx [ebp-24Ch] +
call sub_1007B27  +
push dword ptr [ebp-224h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-220h]  +
call esi  +
call sub_101F014  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
call ??0Element@DirectUI@@QAE@XZ  +
fld  ds:flt_10032B4 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+10h+var_8] +
xor ebx ebx +
fld  ds:flt_10032B0 +
lea ecx [esi+98h] +
fstp  [esp+10h+var_C] +
mov dword ptr [esi] offset off_1003210 +
fld  ds:flt_100320C +
mov [esi+78h] ebx +
fstp  [esp+10h+var_10] +
push 11h  +
mov [esi+7Ch] ebx +
mov [esi+80h] ebx +
mov [esi+84h] ebx +
mov [esi+8Ch] ebx +
mov dword ptr [esi+94h] 1 +
call sub_1010F6B  +
fld  ds:flt_10032B4 +
or dword ptr [esi+110h] 0FFFFFFFFh +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+10h+var_8] +
lea ecx [esi+138h] +
fld  ds:flt_10032B0 +
mov [esi+114h] ebx +
fstp  [esp+10h+var_C] +
mov [esi+11Ch] ebx +
fld  ds:flt_100320C +
mov [esi+120h] ebx +
fstp  [esp+10h+var_10] +
push 11h  +
mov [esi+130h] ebx +
mov [esi+134h] ebx +
call sub_1010F6B  +
fld  ds:flt_10032B4 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+10h+var_8] +
lea ecx [esi+184h] +
fld  ds:flt_10032B0 +
mov [esi+168h] bl +
fstp  [esp+10h+var_C] +
mov [esi+169h] bl +
fld  ds:flt_100320C +
mov [esi+16Ah] bl +
fstp  [esp+10h+var_10] +
push 11h  +
mov [esi+16Bh] bl +
mov [esi+16Ch] bl +
mov [esi+16Eh] bl +
mov byte ptr [esi+16Fh] 1 +
mov [esi+170h] bl +
mov [esi+171h] bl +
mov [esi+172h] bl +
mov [esi+174h] ebx +
mov [esi+178h] ebx +
mov [esi+17Ch] ebx +
mov [esi+180h] ebx +
call sub_1010F6B  +
mov [esi+1B4h] ebx +
mov [esi+1BCh] ebx +
mov [esi+1C0h] ebx +
mov [esi+1C4h] bl +
mov [esi+1C5h] bl +
mov [esi+1C8h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-18h] esi +
mov dword ptr [esi] offset off_1003210 +
lea ecx [esi+138h] +
mov dword ptr [ebp-4] 4 +
call sub_100E71B  +
xor ebx ebx +
mov [ebp-14h] eax +
cmp eax ebx +
jz loc_1012C9D  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+138h] +
call sub_101067C  +
mov edi [eax] +
cmp edi ebx +
jz loc_1012C98  +
mov ecx edi +
call sub_100E71B  +
mov [ebp-10h] eax +
cmp eax ebx +
jz loc_1012C88  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_101067C  +
mov eax [eax] +
cmp eax ebx +
jz loc_1012C83  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp-10h] ebx +
jnz loc_1012C6B  +
mov ecx edi +
call sub_10106AC  +
push 1  +
mov ecx edi +
call sub_10111A4  +
cmp [ebp-14h] ebx +
jnz loc_1012C48  +
lea ecx [esi+138h] +
call sub_1011C1F  +
lea edi [esi+180h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_1012CBB  +
push 3  +
call sub_100F744  +
push ebx  +
mov ecx esi +
mov [edi] ebx +
call sub_100F799  +
lea edi [esi+0C8h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012CD9  +
push eax  +
call sub_100E994  +
mov [edi] ebx +
lea edi [esi+114h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012CEE  +
push eax  +
call ds:CoTaskMemFree  +
mov [edi] ebx +
mov ecx [esi+88h] +
cmp ecx ebx +
jz loc_1012CFE  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx dword_10274B8 +
cmp ecx ebx +
jz loc_1012D15  +
push 1  +
call sub_100E55E  +
mov dword_10274B8 ebx +
push dword ptr [esi+1B4h]  +
call ds:SysFreeString  +
lea ecx [esi+184h] +
call sub_10106AC  +
lea ecx [esi+138h] +
call sub_1011C1F  +
lea ecx [esi+98h] +
call sub_1011481  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1Element@DirectUI@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push offset dword_1027698  +
call sub_100F83E  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10119B8  +
test al al +
jnz loc_1012D90  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1011C03  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
push 1CCh  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_1012DCC  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1012AA0  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1012D59  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
call sub_1012D9F  +
mov ebx [ebp+10h] +
mov esi eax +
test ebx ebx +
jz loc_1012E3C  +
test esi esi +
jz loc_1012E35  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
push 0  +
call ?Initialize@Element@DirectUI@@QAEJIPAV12@PAK@Z  +
mov edi eax +
test edi edi +
jl loc_1012E29  +
mov [ebx] esi +
jmp loc_1012E41  +
push 1  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_1012E41  +
mov edi 80004005h +
jmp loc_1012E41  +
mov edi 80004003h +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_14] 0 +
cmp dword_102711C 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jz loc_1012EC5  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1012E76  +
test al al +
jnz loc_1012EC5  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edi 10000h +
mov ebx 80000000h +
and eax edi +
and ecx ebx +
or eax ecx +
jz loc_1012EC5  +
mov edx dword_1027110 +
mov eax edx +
and eax edi +
mov edi dword_1027114 +
mov ecx edi +
and ecx ebx +
cmp eax edx +
jnz loc_1012EC5  +
cmp ecx edi +
jnz loc_1012EC5  +
push offset dword_1002DD0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov eax [esi+10Ch] +
cmp eax [esi+110h] +
jz loc_10130B7  +
mov eax [esi+100h] +
xor edi edi +
cmp eax edi +
mov [ebp+var_18] eax +
mov [ebp+var_8] edi +
jle loc_101309B  +
mov [ebp+var_10] edi +
mov eax [esi+180h] +
mov ecx [ebp+var_10] +
mov eax [ecx+eax+4] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1013085  +
mov eax [esi+108h] +
add eax edi +
test dword ptr [eax+18h] 80000000h +
jz loc_1012F8A  +
mov eax [eax+14h] +
test eax eax +
jz loc_1012F7A  +
push 0Ah  +
push 0  +
push eax  +
call ds:wcstoul  +
mov ebx eax +
mov eax [esi+108h] +
add esp 0Ch +
push dword ptr [edi+eax+14h]  +
call ds:SysFreeString  +
mov eax [esi+108h] +
and dword ptr [edi+eax+14h] 0 +
mov eax [esi+108h] +
and dword ptr [edi+eax+14h] 0 +
cmp ebx 0FFFFFFFFh +
jz loc_1012F7A  +
test ebx ebx +
jz loc_1012F7A  +
movzx eax word ptr [esi+1B8h] +
push eax  +
mov eax [esi+108h] +
push ebx  +
lea eax [edi+eax+14h] +
push eax  +
mov ecx esi +
call sub_100ED36  +
mov eax [esi+108h] +
lea eax [edi+eax+18h] +
and dword ptr [eax] 7FFFFFFFh +
mov eax [esi+108h] +
add eax edi +
mov ecx [eax+14h] +
test ecx ecx +
jz loc_1012F9C  +
push ecx  +
jmp loc_1012FA4  +
mov eax [eax+4] +
test eax eax +
jz loc_1012FAD  +
push eax  +
mov ecx [ebp+var_4] +
call ?SetAccName@Element@DirectUI@@QAEJPBG@Z  +
mov eax [esi+180h] +
mov ecx [ebp+var_10] +
mov ebx [ecx+eax+8] +
push offset aHiddenlctype  +
call StrToID  +
mov ecx [ebp+var_4] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test ebx ebx +
jz loc_1012FEB  +
push [ebp+var_8]  +
mov ecx esi +
push [ebp+var_4]  +
push ebx  +
call sub_10109DB  +
mov [ebp+var_14] eax +
jmp loc_1013085  +
test eax eax +
jz loc_1013010  +
test byte ptr [eax+5Dh] 40h +
jz loc_1013085  +
mov ecx [esi+108h] +
push dword ptr [edi+ecx+18h]  +
mov ecx esi +
push [ebp+var_4]  +
push eax  +
call sub_100F3AD  +
jmp loc_1013085  +
mov eax [esi+108h] +
cmp dword ptr [edi+eax+4] 0 +
jz loc_1013085  +
cmp dword ptr [esi+94h] 0 +
push [ebp+var_4]  +
mov ecx esi +
jz loc_1013073  +
call sub_100E244  +
mov ebx [ebp+var_8] +
and [ebp+var_C] 0 +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
mov ecx esi +
call sub_100E118  +
cmp [ebp+var_C] 1 +
push ebx  +
mov ecx esi +
jbe loc_1013069  +
cmp byte ptr [esi+16Bh] 0 +
push [ebp+var_C]  +
push [ebp+var_4]  +
jz loc_1013062  +
call sub_100EEA5  +
jmp loc_1013085  +
call sub_100F1C9  +
jmp loc_1013085  +
push [ebp+var_4]  +
call sub_10101C8  +
jmp loc_1013085  +
call sub_100E1A1  +
push [ebp+var_8]  +
mov ecx esi +
push [ebp+var_4]  +
call sub_100F2D4  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+var_10] 14h +
add edi 1Ch +
cmp eax [ebp+var_18] +
jl loc_1012EF0  +
cmp byte ptr [esi+16Ch] 0 +
jz loc_10130AB  +
mov ecx esi +
call sub_101245F  +
mov eax [esi+10Ch] +
mov [esi+110h] eax +
cmp dword_102711C 0 +
jz loc_101311C  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10130CD  +
test al al +
jnz loc_101311C  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
mov edi 80000000h +
and eax esi +
and ecx edi +
or eax ecx +
jz loc_101311C  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx edi +
cmp eax edx +
jnz loc_101311C  +
cmp ecx esi +
jnz loc_101311C  +
push offset dword_1002DE0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov eax [ebp+var_14] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
cmp [edi+8Ch] ebx +
jz loc_1013258  +
push offset dword_1027698  +
lea ecx [ebp-14h] +
call sub_100F83E  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
mov [ebp-4] ebx +
call ?GetContentString@Element@DirectUI@@QAEPBGPAPAVValue@2@@Z  +
push eax  +
lea ecx [ebp-10h] +
call sub_1012D59  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp [eax-0Ch] ebx +
jz loc_1013227  +
push 20h  +
lea ecx [ebp-10h] +
call sub_10111CA  +
jmp loc_1013227  +
push ebx  +
push offset asc_10032D4  +
lea ecx [ebp-10h] +
call sub_1010430  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_10131AB  +
mov eax [ebp-10h] +
mov esi [eax-0Ch] +
push esi  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-10h] +
call sub_1010D6F  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_10112FA  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_100D958  +
inc esi  +
push esi  +
push ebx  +
lea ecx [ebp-10h] +
call sub_1010CEA  +
mov [ebp-20h] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] bl +
push 10h  +
push ebx  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 3 +
call ds:wcstol  +
add esp 0Ch +
cmp eax ebx +
jbe loc_101321C  +
lea ecx [ebp-28h] +
push ecx  +
push eax  +
lea ecx [edi+98h] +
mov [ebp-28h] ebx +
mov [ebp-24h] bl +
call sub_10113BC  +
mov ecx eax +
call sub_1010375  +
push ebx  +
mov byte ptr [ebp-4] 1 +
call ds:SysFreeString  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jnz loc_1013190  +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1013240  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
jmp loc_101325F  +
mov dword ptr [ebp-1Ch] 80004005h +
mov eax [ebp-1Ch] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
xor ebx ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
cmp [edi+8Ch] ebx +
jz loc_1013426  +
mov esi offset dword_1027698 +
push esi  +
lea ecx [ebp-18h] +
call sub_100F83E  +
push esi  +
lea ecx [ebp-14h] +
mov [ebp-4] ebx +
call sub_100F83E  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-4] 1 +
call ?GetContentString@Element@DirectUI@@QAEPBGPAPAVValue@2@@Z  +
push eax  +
lea ecx [ebp-10h] +
call sub_1012D59  +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_10133DC  +
push 20h  +
lea ecx [ebp-10h] +
call sub_10111CA  +
jmp loc_10133DC  +
push ebx  +
push offset asc_10032D8  +
lea ecx [ebp-10h] +
call sub_1010430  +
mov esi eax +
lea ecx [ebp-10h] +
cmp esi 0FFFFFFFFh +
jz loc_10133EA  +
push esi  +
lea eax [ebp+8] +
push eax  +
call sub_1010D6F  +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 3 +
call sub_10112FA  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_100D958  +
inc esi  +
push esi  +
push ebx  +
lea ecx [ebp-10h] +
call sub_1010CEA  +
push ebx  +
push offset asc_10032D4  +
lea ecx [ebp-10h] +
call sub_1010430  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_101334E  +
mov eax [ebp-14h] +
mov esi [eax-0Ch] +
push esi  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1010D6F  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 4 +
call sub_10112FA  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_100D958  +
inc esi  +
push esi  +
push ebx  +
lea ecx [ebp-10h] +
call sub_1010CEA  +
mov [ebp-28h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] bl +
push 20h  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_101198E  +
push dword ptr [eax]  +
call ds:_wtoi  +
push 10h  +
push ebx  +
push dword ptr [ebp-18h]  +
mov [ebp-30h] eax +
call ds:wcstol  +
add esp 10h +
cmp eax ebx +
jbe loc_10133D1  +
lea ecx [ebp-30h] +
push ecx  +
push eax  +
lea ecx [edi+98h] +
mov [ebp-2Ch] bl +
call sub_10113BC  +
mov ecx eax +
call sub_1010375  +
push ebx  +
mov byte ptr [ebp-4] 2 +
call ds:SysFreeString  +
mov eax [ebp-10h] +
cmp [eax-0Ch] ebx +
jnz loc_10132E6  +
jmp loc_10133F6  +
mov eax [ebp-10h] +
push dword ptr [eax-0Ch]  +
push ebx  +
call sub_1010CEA  +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1013403  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
jmp loc_101342D  +
mov dword ptr [ebp-20h] 80004005h +
mov eax [ebp-20h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-18h] ecx +
mov esi [ebp+8] +
and dword ptr [ebp-24h] 0 +
mov byte ptr [ecx+16Ah] 1 +
test esi esi +
jz loc_1013754  +
and dword ptr [ebp-1Ch] 0 +
mov ecx esi +
call ?GetWidth@Element@DirectUI@@QAEHXZ  +
mov ecx esi +
mov edi eax +
call ?GetHeight@Element@DirectUI@@QAEHXZ  +
mov ecx [ebp+10h] +
add edi ecx +
mov ecx [ebp+0Ch] +
add eax ecx +
push eax  +
mov ecx esi +
mov [ebp-14h] edi +
mov [ebp-20h] eax +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push edi  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov eax [eax] +
mov ebx 0FFFFFFFh +
and eax ebx +
cmp eax 2 +
jnz loc_1013500  +
push 60h  +
push nNumerator  +
push 4  +
call ds:MulDiv  +
sub edi eax +
push offset aEmptycol  +
mov [ebp+10h] eax +
mov [ebp-14h] edi +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov ecx eax +
mov [ebp+0Ch] ecx +
test ecx ecx +
jz loc_1013500  +
push dword ptr [ebp+10h]  +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push dword ptr [ebp-20h]  +
mov ecx [ebp+0Ch] +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov ecx [ebp-1Ch] +
test ecx ecx +
jz loc_1013511  +
call ?Release@Value@DirectUI@@QAEXXZ  +
and dword ptr [ebp-1Ch] 0 +
push offset aBoard  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
mov [ebp-30h] esi +
test esi esi +
jz loc_101375B  +
push dword ptr [ebp-20h]  +
mov ecx esi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push edi  +
mov ecx esi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
and dword ptr [ebp-2Ch] 0 +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
xor edi edi +
mov esi eax +
mov [ebp-10h] edi +
cmp esi edi +
jz loc_1013745  +
test [esi] ebx +
jbe loc_1013745  +
and dword ptr [ebp+0Ch] 0 +
push edi  +
mov ecx esi +
call sub_100F86D  +
cmp dword ptr [eax] 0 +
jz loc_10136D7  +
push edi  +
mov ecx esi +
call sub_100F86D  +
mov eax [eax] +
push dword ptr [ebp-20h]  +
mov ecx eax +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
push offset dword_1027698  +
lea ecx [ebp+10h] +
call sub_100F83E  +
mov ecx [ebp-30h] +
movzx edx word ptr [ecx+58h] +
mov ebx ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z +
xor eax eax +
push eax  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov [ebp-4] eax +
mov [ebp-28h] eax +
mov [ebp-24h] edx +
call ebx  +
push dword ptr [eax+4]  +
lea ecx [ebp+10h] +
mov [ebp-34h] eax +
call sub_1011396  +
mov eax [ebp+10h] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_10135ED  +
push offset aDefault  +
lea ecx [ebp+10h] +
call sub_1011396  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp-24h]  +
lea eax [ebp+10h] +
push ecx  +
mov [ebp-38h] esp +
mov ecx esp +
push eax  +
call sub_1010491  +
mov ecx [ebp-18h] +
call sub_1010C4E  +
test eax eax +
jl loc_10136BA  +
push edi  +
mov ecx esi +
call sub_100F86D  +
mov eax [eax] +
movzx eax word ptr [eax+58h] +
push edi  +
mov ecx esi +
mov [ebp-24h] eax +
call sub_100F86D  +
mov eax [eax] +
push 0  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx eax +
call ebx  +
mov ebx eax +
push dword ptr [ebx+4]  +
lea ecx [ebp+10h] +
call sub_1011396  +
mov eax [ebp+10h] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_1013663  +
push offset aDefault  +
lea ecx [ebp+10h] +
call sub_1011396  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-38h] +
push eax  +
push dword ptr [ebp-24h]  +
lea eax [ebp+10h] +
push ecx  +
mov [ebp-24h] esp +
mov ecx esp +
push eax  +
call sub_1010491  +
mov ecx [ebp-18h] +
call sub_1010C4E  +
test eax eax +
jl loc_10136B2  +
mov eax [ebp+0Ch] +
imul eax [ebp-14h] +
cdq   +
idiv  dword ptr [ebp-28h] +
push edi  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_100F86D  +
mov eax [eax] +
push dword ptr [ebp+0Ch]  +
mov ecx eax +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
mov eax [ebp+0Ch] +
add [ebp-10h] eax +
mov ecx ebx +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx [ebp-34h] +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx [ebp+10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov ebx 0FFFFFFFh +
mov eax [esi] +
and eax ebx +
dec eax  +
cmp edi eax +
jnz loc_1013716  +
mov eax [ebp-14h] +
cmp [ebp-10h] eax +
jz loc_1013716  +
push edi  +
mov ecx esi +
call sub_100F86D  +
mov ecx [eax] +
call ?GetWidth@Element@DirectUI@@QAEHXZ  +
push edi  +
mov ecx esi +
mov ebx eax +
call sub_100F86D  +
sub ebx [ebp-10h] +
mov ecx [eax] +
add ebx [ebp-14h] +
push ebx  +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
mov ebx 0FFFFFFFh +
push edi  +
mov ecx esi +
call sub_100F86D  +
push dword ptr [eax]  +
mov ecx [ebp-18h] +
push dword ptr [ebp+8]  +
call sub_1011EBE  +
mov [ebp-24h] eax +
mov eax [ebp-18h] +
mov byte ptr [eax+16Ah] 0 +
mov eax [esi] +
inc edi  +
and eax ebx +
cmp edi eax +
jb loc_101356F  +
mov ecx [ebp-2Ch] +
test ecx ecx +
jz loc_101375B  +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_101375B  +
mov dword ptr [ebp-24h] 80070057h +
mov eax [ebp-24h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012C16  +
test byte ptr [ebp+8] 1 +
jz loc_1013785  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1012DD9  +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov edi [ebp+8] +
xor ebx ebx +
cmp [esi+10Ch] edi +
jz loc_101384B  +
push esi  +
lea ecx [ebp-18h] +
call sub_1004B4A  +
xor eax eax +
mov [ebp-4] eax +
mov [ebp-10h] eax +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_1010BC1  +
mov ebx eax +
test ebx ebx +
jl loc_1013829  +
push edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebp-10h]  +
push dword ptr [esi+1BCh]  +
call sub_101001D  +
mov ebx eax +
test ebx ebx +
jl loc_1013829  +
cmp byte ptr [esi+171h] 0 +
mov [esi+10Ch] edi +
jz loc_1013829  +
mov ecx esi +
call sub_1012E4F  +
mov ebx eax +
cmp dword ptr [ebp+8] 0 +
jz loc_1013838  +
push dword ptr [ebp+8]  +
call ds:CoTaskMemFree  +
mov ecx esi +
call sub_100EDBE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1004B70  +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp al [esi+171h] +
jnz loc_1013871  +
xor eax eax +
jmp loc_10138EC  +
mov ecx [esi+0C8h] +
push edi  +
test al al +
jz loc_10138A5  +
mov byte ptr [esi+171h] 1 +
call sub_1017673  +
push 1  +
mov ecx esi +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push 5  +
mov ecx esi +
call ?SetActive@Element@DirectUI@@QAEJH@Z  +
mov ecx esi +
call sub_1012E4F  +
jmp loc_10138E7  +
push 1  +
push 4  +
call sub_1017569  +
cmp byte ptr [esi+16Eh] 0 +
mov edi eax +
jz loc_10138C8  +
mov ecx [esi+0C8h] +
push 1  +
push 1  +
call sub_1017569  +
test edi edi +
jl loc_10138E9  +
push 0  +
mov ecx esi +
mov byte ptr [esi+171h] 0 +
call ?SetActive@Element@DirectUI@@QAEJH@Z  +
push 0  +
mov ecx esi +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 410h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
mov [ebp+var_408] edi +
cmp [ebx+8Ch] edi +
jz loc_1013A20  +
xor eax eax +
mov esi 1FCh +
push esi  +
mov [ebp+var_204] ax +
lea eax [ebp-202h] +
push edi  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov [ebp+var_404] ax +
lea eax [ebp-402h] +
push edi  +
push eax  +
call memset  +
mov esi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
add esp 18h +
mov dword ptr [ebp+var_40C] 1 +
mov edi 0FFh +
push dword ptr [ebp+var_40C]  +
lea eax [ebp+var_204] +
push offset aHiddenrowforre  +
push edi  +
push eax  +
call sub_1005DAD  +
push dword ptr [ebp+var_40C]  +
lea eax [ebp+var_404] +
push offset aHiddenrowforsc  +
push edi  +
push eax  +
call sub_1005DAD  +
add esp 20h +
inc dword ptr [ebp+var_40C]  +
lea eax [ebp+var_204] +
push eax  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call esi  +
mov [ebp+var_410] eax +
lea eax [ebp+var_404] +
push eax  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call esi  +
test eax eax +
jz loc_1013A11  +
push eax  +
mov ecx ebx +
call sub_1013129  +
mov [ebp+var_408] eax +
test eax eax +
jl loc_101396F  +
cmp [ebp+var_410] 0 +
jz loc_101396F  +
push [ebp+var_410]  +
mov ecx ebx +
call sub_101326F  +
mov [ebp+var_408] eax +
jmp loc_101396F  +
cmp [ebp+var_410] 0 +
jnz loc_101396F  +
jmp loc_1013A2A  +
mov [ebp+var_408] 80004005h +
mov ecx [ebp+var_4] +
mov eax [ebp+var_408] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push offset aKbcontrol  +
mov esi ecx +
call StrToID  +
mov ecx [esi+8Ch] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1013AB0  +
cmp [ebp+arg_0] ebx +
jnz loc_1013A7A  +
cmp [ebp+arg_4] ebx +
jz loc_1013A91  +
call sub_101C8B0  +
mov [esi+78h] ebx +
mov [esi+7Ch] ebx +
mov [esi+80h] ebx +
mov [esi+84h] ebx +
cmp [esi+169h] bl +
jnz loc_1013AA0  +
mov ecx esi +
call sub_101245F  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
push edi  +
call sub_101343D  +
jmp loc_1013AB5  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1012DF5  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
cmp [esi+2Ch] ebx +
jnz loc_1013B25  +
push 10h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_100E88A  +
cmp eax ebx +
jnz loc_1013B05  +
push 8007000Eh  +
call loc_100540D  +
mov ecx [esi+24h] +
mov edx ecx +
shl edx 4 +
dec ecx  +
cmp ecx ebx +
lea eax [edx+eax-0Ch] +
jl loc_1013B25  +
mov edx [esi+2Ch] +
mov [eax+8] edx +
mov [esi+2Ch] eax +
sub eax 10h +
dec ecx  +
jns loc_1013B16  +
mov edi [esi+2Ch] +
xor eax eax +
cmp edi ebx +
setnz al  +
cmp eax ebx +
jnz loc_1013B3A  +
push 80004005h  +
jmp loc_1013B00  +
mov eax [edi+8] +
mov [ebp-18h] edi +
mov [esi+2Ch] eax +
mov [ebp-4] ebx +
mov [ebp-1Ch] edi +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
call sub_1013791  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
inc dword ptr [esi+4]  +
shl eax 2 +
mov ecx [eax+ecx] +
mov [edi+8] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_1013B91  +
cmp [esi+20h] ebx +
jnz loc_1013B91  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FD9D  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_1013C07  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_1013BFE  +
mov eax [esi+4] +
cmp eax off_10264C4 +
jnz loc_1013BEA  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+1Ch]  +
call sub_1011603  +
jmp loc_1013BFA  +
cmp eax off_10264C8 +
jnz loc_1013BFE  +
push dword ptr [esi+20h]  +
call sub_10137B3  +
mov byte ptr [esi+8] 1 +
push esi  +
mov ecx edi +
call __imp_?OnEvent@Element@DirectUI@@UAEXPAUEvent@2@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+1C5h] +
mov dl [eax] +
push ebx  +
mov bl [ebp+arg_0] +
mov [eax] bl +
cmp bl dl +
pop ebx  +
jz loc_1013C33  +
push 0  +
push 0  +
call sub_1013A44  +
xor eax eax +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov edi ecx +
call DisableAnimations  +
push edi  +
lea ecx [ebp-18h] +
call sub_1004B4A  +
mov esi [ebp+8] +
push dword ptr [esi]  +
xor ebx ebx +
mov ecx edi +
mov [ebp-4] ebx +
call ?SetX@Element@DirectUI@@QAEJH@Z  +
push dword ptr [esi+4]  +
mov ecx edi +
call ?SetY@Element@DirectUI@@QAEJH@Z  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
mov [ebp+8] ebx +
call sub_100DC81  +
mov ebx eax +
test ebx ebx +
jl loc_1013D16  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
cdq   +
mov ecx eax +
mov eax [esi+8] +
sub eax [esi] +
xor ecx edx +
sub ecx edx +
cdq   +
xor eax edx +
sub eax edx +
mov esi ecx +
sub esi [ebp+8] +
mov ebx eax +
sub ebx [ebp-10h] +
cmp byte ptr [edi+16Bh] 0 +
jz loc_1013D06  +
cmp byte ptr [edi+169h] 0 +
jz loc_1013D06  +
add ecx 0FFFFFFFDh +
cmp ecx [edi+130h] +
jb loc_1013CE1  +
cmp eax [edi+134h] +
jb loc_1013CE1  +
xor ecx ecx +
inc ecx  +
jmp loc_1013CE3  +
xor ecx ecx +
cmp byte ptr [edi+171h] 0 +
jz loc_1013D06  +
lea eax [edi+94h] +
cmp [eax] ecx +
jz loc_1013D06  +
or dword ptr [edi+110h] 0FFFFFFFFh +
mov [eax] ecx +
mov ecx edi +
call sub_1012E4F  +
push ebx  +
push esi  +
mov ecx edi +
call sub_1013A44  +
mov ebx eax +
call EnableAnimations  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1004B70  +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1013D56  +
push 1  +
push dword ptr [esi+8]  +
call sub_100FE98  +
test al al +
jnz loc_1013D56  +
push 8007000Eh  +
call loc_100540D  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013AD1  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100FB8B  +
test eax eax +
jnz loc_1013DA3  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1013D31  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
cmp [eax-0Ch] ebx +
jz loc_1013EB2  +
lea edi [ecx+138h] +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
mov ecx edi +
mov [ebp-14h] ebx +
call sub_10105EC  +
test al al +
jz loc_1013E3A  +
cmp [ebp+10h] bx +
jz loc_1013E31  +
mov esi [ebp-14h] +
cmp esi ebx +
jz loc_1013E31  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1010658  +
test eax eax +
jnz loc_1013E23  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_101143C  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1013D70  +
mov [eax] esi +
jmp loc_1013EB9  +
push dword ptr [ebp+0Ch]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1013EB9  +
mov dword ptr [ebp-10h] 80004005h +
jmp loc_1013EB9  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_1013E75  +
fld  ds:flt_10032B4 +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+14h+var_C] +
mov ecx eax +
fld  ds:flt_10032B0 +
fstp  [esp+14h+var_10] +
fld  ds:flt_100320C +
fstp  [esp+14h+var_14] +
push 11h  +
call sub_1010F6B  +
mov esi eax +
jmp loc_1013E77  +
xor esi esi +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] esi +
cmp esi ebx +
jnz loc_1013E8B  +
mov dword ptr [ebp-10h] 8007000Eh +
jmp loc_1013EA8  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_101143C  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov [ebp-14h] ebx +
call sub_1013D70  +
mov [eax] esi +
lea ecx [ebp-14h] +
call sub_1011351  +
jmp loc_1013EB9  +
mov dword ptr [ebp-10h] 80070057h +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov [ebp-14h] ecx +
push offset dword_1027698  +
lea ecx [ebp-10h] +
call sub_100F83E  +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_1013F87  +
push 8  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1013F14  +
mov esi 8007000Eh +
jmp loc_1013F8C  +
movzx ebx word ptr [edi+58h] +
mov ecx edi +
call ?GetWidth@Element@DirectUI@@QAEHXZ  +
mov ecx edi +
mov [esi+4] eax +
call ?GetHeight@Element@DirectUI@@QAEHXZ  +
push 0  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx edi +
mov [esi] eax +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov edi eax +
push dword ptr [edi+4]  +
lea ecx [ebp-10h] +
call sub_1011396  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 0 +
jnz loc_1013F62  +
push offset aDefault  +
lea ecx [ebp-10h] +
call sub_1011396  +
push ebx  +
push esi  +
push ecx  +
lea eax [ebp-10h] +
mov [ebp+8] esp +
mov ecx esp +
push eax  +
call sub_1010491  +
mov ecx [ebp-14h] +
call sub_1013DB0  +
mov ecx edi +
mov esi eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_1013F8C  +
mov esi 80070057h +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov [ebp-18h] ecx +
xor ebx ebx +
push offset dword_1027698  +
lea ecx [ebp-34h] +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
call sub_100F83E  +
mov [ebp-4] ebx +
cmp [ebp+8] ebx +
jz loc_101415B  +
push offset aBoard  +
call StrToID  +
mov ecx [ebp+8] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
cmp esi ebx +
jz loc_1014152  +
mov ecx [ebp-18h] +
push esi  +
call sub_1013ED4  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov edi eax +
mov [ebp-30h] edi +
cmp edi ebx +
jz loc_1014162  +
mov esi 0FFFFFFFh +
mov [ebp-14h] ebx +
test [edi] esi +
jbe loc_1014162  +
push dword ptr [ebp-14h]  +
mov ecx edi +
mov [ebp-28h] ebx +
call sub_100F86D  +
push dword ptr [eax]  +
mov ecx [ebp-18h] +
call sub_1013ED4  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_100F86D  +
mov eax [eax] +
lea ecx [ebp-28h] +
push ecx  +
mov ecx eax +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov ebx eax +
test ebx ebx +
jz loc_1014131  +
and dword ptr [ebp-10h] 0 +
test [ebx] esi +
jbe loc_1014131  +
push dword ptr [ebp-10h]  +
and dword ptr [ebp-24h] 0 +
mov ecx ebx +
call sub_100F86D  +
push dword ptr [eax]  +
mov ecx [ebp-18h] +
call sub_1013ED4  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100F86D  +
mov eax [eax] +
lea ecx [ebp-24h] +
push ecx  +
mov ecx eax +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
and dword ptr [ebp+8] 0 +
mov edi eax +
test [edi] esi +
jbe loc_1014111  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_100F86D  +
mov eax [eax] +
push offset aParentkey  +
mov [ebp-2Ch] eax +
call StrToID  +
mov ecx [ebp-2Ch] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jnz loc_10140FC  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_100F86D  +
mov eax [eax] +
push offset aEmptycolsym  +
mov [ebp-2Ch] eax +
call StrToID  +
mov ecx [ebp-2Ch] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_1014105  +
mov ecx [ebp-18h] +
push eax  +
call sub_1013ED4  +
mov eax [edi] +
inc dword ptr [ebp+8]  +
and eax esi +
cmp [ebp+8] eax +
jb loc_10140A8  +
mov ecx [ebp-24h] +
test ecx ecx +
jz loc_101411E  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax [ebx] +
inc dword ptr [ebp-10h]  +
and eax esi +
cmp [ebp-10h] eax +
jb loc_101406E  +
mov edi [ebp-30h] +
mov ecx [ebp-28h] +
test ecx ecx +
jz loc_101413E  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax [edi] +
inc dword ptr [ebp-14h]  +
and eax esi +
xor ebx ebx +
cmp [ebp-14h] eax +
jb loc_1014029  +
jmp loc_1014162  +
mov dword ptr [ebp-20h] 80004005h +
jmp loc_1014162  +
mov dword ptr [ebp-20h] 80070057h +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1014172  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov [ebp-1Ch] ebx +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
mov eax [ebp-20h] +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov eax [ebp+10h] +
or dword ptr [esi+110h] 0FFFFFFFFh +
mov [esi+1BCh] eax +
mov eax [ebp+8] +
test eax eax +
jz loc_10141B8  +
mov [esi+8Ch] eax +
call sub_10138F6  +
mov ebx eax +
lea eax [esi+134h] +
push eax  +
lea eax [esi+130h] +
push eax  +
mov ecx esi +
call sub_100DC81  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call loc_1005E48  +
and dword ptr [ebp-4] 0 +
push offset a101  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
mov edi offset a101l +
test al al +
jnz loc_101426C  +
push edi  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_101426C  +
push offset a102  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_101426C  +
push offset a102l  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_101426C  +
push offset a103  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_101426C  +
push offset a103l  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_101426C  +
push offset a103lalt  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_101426C  +
push offset a106  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jz loc_10142D2  +
push edi  +
lea ecx [ebp+0Ch] +
mov byte ptr [esi+169h] 1 +
mov byte ptr [esi+16Ch] 1 +
call sub_100E945  +
test al al +
jnz loc_10142CB  +
push offset a102l  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_10142CB  +
push offset a103l  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_10142CB  +
push offset a103lalt  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jnz loc_10142CB  +
push offset a106  +
lea ecx [ebp+0Ch] +
call sub_100E945  +
test al al +
jz loc_10142D2  +
mov byte ptr [esi+168h] 1 +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_100E50E  +
push offset aKbcontrol  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_1014319  +
mov ecx [eax+64h] +
lea edx [esi+128h] +
mov [edx] ecx +
mov [esi+124h] ecx +
dec ecx  +
dec ecx  +
mov [esi+12Ch] ecx +
push eax  +
mov ecx esi +
call sub_1013FA6  +
jmp loc_101431E  +
mov ebx 80004005h +
test ebx ebx +
jl loc_10143FE  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-14h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1010BC1  +
mov ebx eax +
test ebx ebx +
jl loc_10143EF  +
lea edi [esi+114h] +
mov eax [edi] +
test eax eax +
jz loc_101435D  +
push eax  +
call ds:CoTaskMemFree  +
and dword ptr [edi] 0 +
mov ecx [esi+0C8h] +
push edi  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
call sub_1017590  +
mov ebx eax +
test ebx ebx +
jl loc_10143EF  +
xor ebx ebx +
cmp [ebp-14h] ebx +
jbe loc_10143A3  +
mov eax [edi] +
cmp dword ptr [eax+ebx*4] 0 +
mov eax [ebp-10h] +
push dword ptr [eax+ebx*4]  +
lea ecx [esi+98h] +
setnz byte ptr [ebp+0Bh]  +
call sub_10113BC  +
mov cl [ebp+0Bh] +
inc ebx  +
mov [eax+4] cl +
cmp ebx [ebp-14h] +
jb loc_101437C  +
mov ecx esi +
call sub_1011730  +
mov ebx eax +
test ebx ebx +
jl loc_10143EF  +
mov ecx [esi+0C8h] +
lea edi [esi+10Ch] +
push edi  +
call sub_10175C8  +
mov ebx eax +
test ebx ebx +
jl loc_10143EF  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+10h]  +
call sub_101001D  +
mov ebx eax +
test ebx ebx +
jl loc_10143EF  +
push dword ptr [ebp-14h]  +
mov ecx esi +
push dword ptr [ebp-10h]  +
call sub_10117B7  +
mov ebx eax +
cmp dword ptr [ebp-10h] 0 +
jz loc_10143FE  +
push dword ptr [ebp-10h]  +
call ds:CoTaskMemFree  +
push dword ptr [ebp+0Ch]  +
call ds:SysFreeString  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
movzx ecx [ebp+arg_4] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+arg_8] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+arg_C] +
shl eax 8 +
or eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1016C87  +
xor eax eax +
mov [esi+84h] eax +
mov [esi+88h] eax +
mov [esi+8Ch] eax +
mov [esi+90h] eax +
mov [esi+94h] eax +
mov [esi+98h] eax +
mov [esi+9Ch] al +
mov dword ptr [esi] offset off_10033A8 +
mov eax esi +
pop esi  +
retn   +
***
xor al al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_10]  +
lea esi [ebp+arg_14] +
push [ebp+arg_C]  +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+arg_8] +
push edi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+arg_0]  +
mov dword_102733C offset loc_101DD5C +
mov dword_10274F0 offset loc_101DD7A +
mov byte_10266B5 1 +
mov byte_10266B6 1 +
mov byte_10266B7 1 +
call sub_1016485  +
mov esi eax +
test esi esi +
jl loc_10144F7  +
push dword ptr [ebp+arg_28]  +
push [ebp+arg_24]  +
call sub_101D211  +
mov esi eax +
mov ecx ebx +
mov [ebx+84h] edi +
call sub_1015BA4  +
push eax  +
call sub_101D160  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_10266B8 0 +
jnz loc_1014541  +
or dword_10266A4 0FFFFFFFFh +
mov dword_10266A8 0FFC8C8C8h +
mov dword_10266AC 0FF000000h +
pop ebp  +
jmp loc_1016E09  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+74h] +
xor eax eax +
push esi  +
mov esi [ebp+arg_0] +
cmp ecx eax +
jz loc_1014574  +
cmp dword ptr [esi+4] 3 +
jnz loc_1014569  +
cmp [esi+12h] al +
jnz loc_101456B  +
mov al 1 +
movzx eax al +
push eax  +
call sub_1017654  +
cmp dword ptr [esi+4] 1 +
push esi  +
setz al  +
mov byte_10266B5 al +
cmp dword ptr [esi+4] 1 +
setz al  +
mov byte_10266B6 al +
call sub_101CE8F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1015BA4  +
push eax  +
call sub_101D160  +
cmp byte_10266B8 0 +
jnz loc_10145D0  +
or dword_10266A4 0FFFFFFFFh +
mov dword_10266A8 0FFC8C8C8h +
mov dword_10266AC 0FF000000h +
mov ecx esi +
pop esi  +
jmp loc_10167AB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
push edi  +
mov edi ecx +
cmp edx [edi+88h] +
jge loc_101466D  +
mov eax [edi+8Ch] +
mov ecx [ebp+arg_C] +
lea eax [eax+edx*8] +
cmp ecx [eax] +
jge loc_101466D  +
mov eax [eax+4] +
lea eax [eax+ecx*8] +
mov ecx [ebp+arg_10] +
cmp ecx [eax] +
jge loc_101466D  +
cmp edx 1 +
jnz loc_1014616  +
or [ebp+arg_4] 10h +
mov eax [eax+4] +
push esi  +
push [ebp+arg_4]  +
mov esi [eax+ecx*8+4] +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101CEDC  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
push dword ptr [eax+4]  +
call ds:InvalidateGadget  +
mov ecx [edi+90h] +
test ecx ecx +
jz loc_1014652  +
mov eax [ecx] +
push 0  +
call dword ptr [eax+4]  +
and dword ptr [edi+90h] 0 +
cmp [ebp+arg_14] 0 +
jz loc_1014668  +
push dword ptr [ebp+arg_14]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
mov [edi+90h] esi +
xor eax eax +
pop esi  +
jmp loc_1014672  +
mov eax 80070057h +
pop edi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8Ch] +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
shl edi 3 +
mov eax [edi+eax+4] +
shl ebx 3 +
mov edx [ebx+eax] +
xor eax eax +
mov [ebp+var_4] ecx +
mov [ebp+arg_8] edx +
mov [ebp+arg_4] eax +
test edx edx +
jle loc_10146EF  +
push esi  +
cmp eax [ebp+arg_C] +
jz loc_10146E2  +
mov ecx [ecx+8Ch] +
mov ecx [edi+ecx+4] +
mov ecx [ecx+ebx+4] +
mov esi [ecx+eax*8+4] +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101CEDC  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
push dword ptr [eax+4]  +
call ds:InvalidateGadget  +
mov ecx [ebp+var_4] +
mov eax [ebp+arg_4] +
inc eax  +
cmp eax [ebp+arg_8] +
mov [ebp+arg_4] eax +
jl loc_10146AD  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
cmp [ebx] eax +
mov [ebp+var_C] eax +
jl loc_101481E  +
cmp [ebx+4] eax +
jl loc_101481E  +
mov ecx [esi+84h] +
push edi  +
push eax  +
push 1  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov ecx [eax+8] +
mov edi [eax+4] +
mov [ebp+var_8] ecx +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
cmp [ebx] edi +
jge loc_101481D  +
mov ebx [ebx+4] +
cmp ebx [ebp+var_8] +
jge loc_101481D  +
mov eax [esi+88h] +
imul eax ebx +
cdq   +
idiv  [ebp+var_8] +
xor edi edi +
mov [ebp+var_4] edi +
mov ecx eax +
mov eax [esi+8Ch] +
lea eax [eax+ecx*8] +
cmp [eax] edi +
mov [ebp+var_8] ecx +
jle loc_101481D  +
mov eax [eax+4] +
mov edx [ebp+var_4] +
xor ebx ebx +
lea eax [eax+edx*8] +
cmp [eax] ebx +
jle loc_10147ED  +
mov eax [eax+4] +
mov ecx [eax+ebx*8+4] +
mov eax [ecx] +
call dword ptr [eax]  +
push 0  +
push 1  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx eax +
mov [ebp+var_10] ecx +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
add edi [eax+4] +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax [ebp+arg_0] +
cmp [eax] edi +
jl loc_1014802  +
mov ecx [ebp+var_8] +
mov eax [esi+8Ch] +
mov eax [eax+ecx*8+4] +
mov ecx [ebp+var_4] +
inc ebx  +
lea eax [eax+ecx*8] +
cmp ebx [eax] +
jl loc_10147A0  +
mov ecx [ebp+var_8] +
inc [ebp+var_4]  +
mov eax [esi+8Ch] +
mov edx [ebp+var_4] +
lea eax [eax+ecx*8] +
cmp edx [eax] +
jl loc_1014791  +
jmp loc_101481D  +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov eax [ebp+arg_C] +
mov [eax] ebx +
pop edi  +
mov eax [ebp+var_C] +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jnz loc_1014843  +
mov eax 80004003h +
jmp loc_10148B2  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_10146FA  +
test eax eax +
jz loc_10148B0  +
cmp [esi+94h] eax +
jz loc_10148B0  +
mov eax [esi+8Ch] +
mov ecx [ebp+arg_0] +
mov eax [eax+ecx*8+4] +
mov ecx [ebp+var_4] +
mov eax [eax+ecx*8+4] +
mov ecx [ebp+var_8] +
push ebx  +
push edi  +
mov edi [eax+ecx*8+4] +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax]  +
mov ebx eax +
mov eax [esi+94h] +
test eax eax +
jz loc_101489D  +
push 0  +
push eax  +
push ebx  +
mov ecx edi +
call sub_101CDAC  +
push ebx  +
push 0  +
push ebx  +
mov ecx edi +
call sub_101CDAC  +
pop edi  +
mov [esi+94h] ebx +
pop ebx  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
test byte ptr [ebx+5Ch] 4 +
mov [ebp+var_4] ecx +
jz loc_101498A  +
push esi  +
mov esi ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z +
push edi  +
push 0  +
push 1  +
push ?LocationProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx ebx +
call esi  +
mov edi [eax+4] +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
push 0  +
push 1  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx ebx +
call esi  +
mov esi [eax+4] +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
test esi esi +
jle loc_1014988  +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
add eax edi +
cmp eax [ebp+arg_C] +
jl loc_1014988  +
cmp eax [ebp+arg_10] +
jge loc_1014988  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_8] +
mov eax [edi+4] +
mov ecx [ebp+var_4] +
mov ecx [ecx+78h] +
shl esi 3 +
mov eax [esi+eax] +
mov [ebp+arg_0] eax +
movzx eax word ptr [ebx+58h] +
push eax  +
call sub_1011970  +
mov [ebp+arg_C] eax +
test eax eax +
jz loc_1014988  +
push offset aParentkey  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_1014988  +
mov ecx [edi+4] +
mov ecx [ecx+esi+4] +
mov edx [ebp+arg_0] +
add eax 88h +
lea ecx [ecx+edx*8] +
mov [ecx+4] eax +
mov eax [ebp+arg_C] +
mov [ecx] eax +
mov eax [edi+4] +
add eax esi +
inc dword ptr [eax]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push edi  +
mov ebx ecx +
xor edi edi +
cmp [ebx+8Ch] edi +
jz loc_1014A27  +
cmp [ebx+88h] edi +
mov [ebp+var_8] edi +
jle loc_1014A0F  +
push esi  +
mov eax [ebx+8Ch] +
mov ecx [ebp+var_8] +
lea esi [eax+ecx*8] +
cmp [esi+4] edi +
jz loc_1014A00  +
cmp [esi] edi +
mov [ebp+var_4] edi +
jle loc_10149F4  +
mov eax [esi+4] +
mov ecx [ebp+var_4] +
lea edi [eax+ecx*8] +
mov eax [edi+4] +
test eax eax +
jz loc_10149E8  +
push eax  +
call ??_V@YAXPAX@Z  +
and dword ptr [edi+4] 0 +
pop ecx  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [esi] +
jl loc_10149CD  +
xor edi edi +
push dword ptr [esi+4]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [esi+4] edi +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebx+88h] +
jl loc_10149B5  +
pop esi  +
push dword ptr [ebx+8Ch]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [ebx+8Ch] edi +
mov [ebx+88h] edi +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
test eax eax +
jle loc_1014A8F  +
mov esi [ebp+arg_4] +
test esi esi +
jle loc_1014A8F  +
cmp dword ptr [ecx+88h] 1 +
jnz loc_1014A88  +
mov edx [ecx+8Ch] +
cmp dword ptr [edx] 2 +
jg loc_1014A88  +
mov edx [edx+4] +
mov [edx] esi +
xor edx edx +
cmp eax esi +
setnz dl  +
push edi  +
mov edi [ecx+8Ch] +
inc edx  +
mov [edi] edx +
mov edx [ecx+8Ch] +
cmp dword ptr [edx] 1 +
pop edi  +
jle loc_1014A84  +
mov ecx edx +
mov ecx [ecx+4] +
sub eax esi +
mov [ecx+8] eax +
xor eax eax +
jmp loc_1014A94  +
mov eax 80004005h +
jmp loc_1014A94  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jnz loc_1014AB1  +
mov eax 80004003h +
jmp loc_1014AD0  +
mov eax [ebp+arg_0] +
cmp eax [ecx+88h] +
jl loc_1014AC3  +
mov eax 80070057h +
jmp loc_1014AD0  +
mov ecx [ecx+8Ch] +
mov eax [ecx+eax*8] +
mov [edx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
test edx edx +
jnz loc_1014AEC  +
mov eax 80004003h +
jmp loc_1014B18  +
mov eax [ebp+arg_0] +
cmp eax [ecx+88h] +
jge loc_1014B13  +
mov ecx [ecx+8Ch] +
lea eax [ecx+eax*8] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jge loc_1014B13  +
mov eax [eax+4] +
mov eax [eax+ecx*8] +
mov [edx] eax +
xor eax eax +
jmp loc_1014B18  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+0Ch] +
xor al al +
mov edx offset aLonghorn +
mov si [edx] +
cmp si [ecx] +
jnz loc_1014B5A  +
test si si +
jz loc_1014B56  +
mov si [edx+2] +
cmp si [ecx+2] +
jnz loc_1014B5A  +
add edx 4 +
add ecx 4 +
test si si +
jnz loc_1014B34  +
xor ecx ecx +
jmp loc_1014B5F  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jnz loc_1014BA5  +
mov eax [edi+98h] +
push ecx  +
push eax  +
push eax  +
call ?CreateColor@Value@DirectUI@@SGPAV12@KKE@Z  +
mov esi eax +
test esi esi +
jz loc_1014B92  +
mov ecx [ebp+8] +
push esi  +
push 1  +
push ?BackgroundProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z  +
mov ecx esi +
call ?Release@Value@DirectUI@@QAEXXZ  +
movzx eax byte ptr [edi+9Ch] +
mov ecx [ebp+8] +
push eax  +
call ?SetAlpha@Element@DirectUI@@QAEJH@Z  +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+98h] eax +
mov al [ebp+arg_4] +
mov [ecx+9Ch] al +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebx] +
mov [ebp+var_1] 0 +
test esi esi +
jz loc_1014C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
cmp dword_10272DC eax +
jnz loc_1014C0F  +
push edi  +
mov edi [esi+84h] +
mov ecx esi +
call sub_101869D  +
cmp edi 1 +
pop edi  +
jz loc_1014C49  +
test al 4 +
jmp loc_1014C26  +
mov esi [esi+28h] +
test esi esi +
jz loc_1014C49  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
cmp dword_10274FC eax +
jnz loc_1014C49  +
mov [ebp+var_1] 1 +
jmp loc_1014C40  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
cmp dword_10272DC eax +
jnz loc_1014C47  +
mov esi [esi+28h] +
test esi esi +
jnz loc_1014C2E  +
mov [ebx] esi +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10033A8 +
and dword ptr [ebp-4] 0 +
call sub_1014994  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1016D0D  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_8] +
mov eax [ebx+8Ch] +
mov eax [eax+ecx*8+4] +
mov ecx [ebp+arg_C] +
push esi  +
push edi  +
mov edi [eax+ecx*8] +
xor esi esi +
test edi edi +
jle loc_1014D1B  +
mov eax [ebp+arg_4] +
mov [ebp+arg_4] eax +
and [ebp+arg_4] 1 +
mov [ebp+var_4] eax +
and [ebp+var_4] 2 +
mov [ebp+var_8] eax +
and [ebp+var_8] 0Ch +
xor edx edx +
cmp [ebp+arg_4] edx +
jz loc_1014CD9  +
cmp esi edx +
jnz loc_1014CD9  +
mov cl 1 +
jmp loc_1014CDB  +
xor cl cl +
cmp [ebp+var_4] edx +
jz loc_1014CEB  +
lea eax [edi-1] +
cmp esi eax +
jnz loc_1014CEB  +
mov al 1 +
jmp loc_1014CED  +
xor al al +
movzx eax al +
neg eax  +
push edx  +
sbb eax eax +
and eax 2 +
xor edx edx +
test cl cl +
setnz dl  +
push esi  +
push [ebp+arg_C]  +
mov ecx ebx +
push [ebp+arg_8]  +
or eax edx +
or eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10145DD  +
inc esi  +
cmp esi edi +
jl loc_1014CCA  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi ecx +
cmp ebx [edi+88h] +
jge loc_1014D9D  +
mov eax [edi+8Ch] +
mov esi [ebp+arg_C] +
lea eax [eax+ebx*8] +
cmp esi [eax] +
jge loc_1014D9D  +
mov eax [eax+4] +
mov eax [eax+esi*8] +
cmp [ebp+arg_10] eax +
jge loc_1014D9D  +
mov ecx [ebp+arg_14] +
test ecx ecx +
jz loc_1014D69  +
dec eax  +
cmp [ebp+arg_10] eax +
setz al  +
mov [ecx] al +
push 1  +
push [ebp+arg_10]  +
mov ecx edi +
push esi  +
push ebx  +
push 0Fh  +
push [ebp+arg_0]  +
call sub_10145DD  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1014D98  +
cmp [ebp+arg_4] 0 +
jz loc_1014D98  +
push [ebp+arg_10]  +
mov ecx edi +
push esi  +
push ebx  +
push [ebp+arg_0]  +
call sub_101467C  +
mov eax [ebp+arg_8] +
jmp loc_1014DA2  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi ecx +
cmp eax [esi+88h] +
push edi  +
mov edi [ebp+arg_0] +
jge loc_1014EF0  +
mov ecx [esi+8Ch] +
lea eax [ecx+eax*8] +
mov ecx [ebp+arg_C] +
cmp ecx [eax] +
jge loc_1014EF0  +
mov ebx [eax+4] +
mov edx [ebp+arg_10] +
shl ecx 3 +
cmp edx [ecx+ebx] +
jge loc_1014EF0  +
mov eax ebx +
mov eax [ecx+eax+4] +
lea eax [eax+edx*8] +
mov ebx [eax+4] +
test edi edi +
jz loc_1014E13  +
and [ebp+var_2C] 0 +
jmp loc_1014E1F  +
mov edi offset dword_10026B8 +
mov [ebp+var_2C] 0FFFFFFFDh +
push dword ptr [eax]  +
lea eax [ebp+var_24] +
push offset asc_1001BA0  +
push 10h  +
push eax  +
call sub_1005DAD  +
add esp 10h +
test eax eax +
jl loc_1014EF5  +
lea eax [ebp+var_24] +
push eax  +
call StrToID  +
mov ecx [esi+84h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
push edi  +
mov ecx eax +
call ?SetAccName@Element@DirectUI@@QAEJPBG@Z  +
test eax eax +
jl loc_1014EF5  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1014E6B  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
jle loc_1014E88  +
cmp [ebp+arg_4] eax +
mov byte ptr [ebp+var_28] 1 +
jl loc_1014E8C  +
mov byte ptr [ebp+var_28] 0 +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax]  +
push [ebp+var_28]  +
mov esi eax +
mov ecx esi +
call ?SetTooltip@Element@DirectUI@@QAEJ_N@Z  +
test eax eax +
jl loc_1014EF5  +
cmp byte ptr [ebp+var_28] 0 +
mov eax edi +
jnz loc_1014EB0  +
mov eax offset dword_10026B8 +
push eax  +
mov ecx esi +
call ?SetAccDesc@Element@DirectUI@@QAEJPBG@Z  +
test eax eax +
jl loc_1014EF5  +
cmp byte ptr [ebp+var_28] 0 +
jz loc_1014ED7  +
mov eax [ebp+arg_4] +
lea eax [edi+eax*2] +
mov ecx 2026h +
mov [eax] cx +
xor ecx ecx +
mov [eax+2] cx +
mov eax [ebx] +
push edi  +
mov ecx ebx +
call dword ptr [eax+8]  +
test eax eax +
jl loc_1014EF5  +
push [ebp+var_2C]  +
mov ecx esi +
call ?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
jmp loc_1014EF5  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov esi ecx +
test edi edi +
jnz loc_1014F32  +
mov eax 80004003h +
jmp loc_1014FE9  +
cmp [ebp+arg_10] 0 +
push ebx  +
jle loc_1014FE3  +
mov eax [ebp+arg_0] +
cmp eax [esi+88h] +
jge loc_1014FE3  +
mov ecx [esi+8Ch] +
lea eax [ecx+eax*8] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jge loc_1014FE3  +
mov ebx [eax+4] +
mov edx [ebp+arg_8] +
shl ecx 3 +
cmp edx [ecx+ebx] +
jge loc_1014FE3  +
mov eax ebx +
mov eax [eax+ecx+4] +
lea eax [eax+edx*8] +
xor ecx ecx +
mov [edi] cx +
push dword ptr [eax]  +
lea eax [ebp+var_24] +
push offset asc_1001BA0  +
push 10h  +
push eax  +
call sub_1005DAD  +
mov ebx eax +
add esp 10h +
test ebx ebx +
jl loc_1014FDF  +
lea eax [ebp+var_24] +
push eax  +
call StrToID  +
mov ecx [esi+84h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
push 0  +
push 2  +
push ?AccNameProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx eax +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov esi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1014FD7  +
push eax  +
push [ebp+arg_10]  +
push edi  +
call sub_100E9BB  +
mov ebx eax +
mov ecx esi +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax ebx +
jmp loc_1014FE8  +
mov eax 80070057h +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ecx +
mov eax [ebx+88h] +
push esi  +
mov esi [ebp+arg_8] +
cmp esi eax +
jl loc_101501F  +
mov eax 80070057h +
jmp loc_10150A6  +
mov ecx [ebp+arg_C] +
test ecx ecx +
jz loc_101502E  +
dec eax  +
cmp esi eax +
setz al  +
mov [ecx] al +
mov eax [ebx+8Ch] +
push edi  +
mov edi [eax+esi*8] +
xor esi esi +
test edi edi +
jle loc_10150A3  +
mov eax [ebp+arg_4] +
mov [ebp+arg_C] eax +
and [ebp+arg_C] 1 +
mov [ebp+arg_4] eax +
and [ebp+arg_4] 2 +
mov [ebp+var_4] eax +
and [ebp+var_4] 0Ch +
cmp [ebp+arg_C] 0 +
jz loc_1015064  +
test esi esi +
jnz loc_1015064  +
mov cl 1 +
jmp loc_1015066  +
xor cl cl +
cmp [ebp+arg_4] 0 +
jz loc_1015077  +
lea eax [edi-1] +
cmp esi eax +
jnz loc_1015077  +
mov al 1 +
jmp loc_1015079  +
xor al al +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 2 +
xor edx edx +
test cl cl +
setnz dl  +
push esi  +
push [ebp+arg_8]  +
mov ecx ebx +
or eax edx +
or eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1014C8D  +
inc esi  +
cmp esi edi +
jl loc_1015056  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
cmp edx [ecx+88h] +
jge loc_10150F2  +
mov eax [ecx+8Ch] +
mov eax [eax+edx*8] +
cmp [ebp+arg_C] eax +
jge loc_10150F2  +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_10150E0  +
dec eax  +
cmp [ebp+arg_C] eax +
setz al  +
mov [esi] al +
push [ebp+arg_C]  +
push edx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1014C8D  +
pop esi  +
jmp loc_10150F7  +
mov eax 80070057h +
pop ebp  +
retn 14h  +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov esi ecx +
cmp eax [esi+88h] +
jge loc_1015283  +
mov ecx [esi+8Ch] +
mov edx [ebp+0Ch] +
shl eax 3 +
mov [ebp-124h] eax +
add eax ecx +
cmp edx [eax] +
jge loc_1015283  +
mov eax [eax+4] +
mov ecx edx +
shl ecx 3 +
add eax ecx +
mov [ebp-120h] ecx +
mov ecx [ebp+10h] +
cmp ecx [eax] +
jge loc_1015283  +
mov eax [eax+4] +
mov ebx ecx +
push 80h  +
shl ebx 3 +
mov edi [ebx+eax] +
lea eax [ebp-110h] +
push eax  +
push ecx  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1014F0B  +
test eax eax +
jge loc_1015187  +
xor eax eax +
mov [ebp-110h] ax +
lea eax [ebp-110h] +
push eax  +
lea ecx [ebp-11Ch] +
call loc_1005E48  +
push dword ptr [ebp-11Ch]  +
mov ecx [esi+74h] +
and dword ptr [ebp-4] 0 +
push 0  +
push edi  +
call sub_1017477  +
mov [ebp-118h] eax +
test eax eax +
jl loc_101526F  +
cmp edi 3Ah +
jz loc_1015232  +
cmp edi 46h +
jz loc_1015232  +
cmp edi 45h +
jz loc_1015232  +
mov byte ptr [ebp-111h] 0 +
cmp edi 0CBh +
jz loc_10151F2  +
cmp edi 0CDh +
jz loc_10151F2  +
cmp edi 0C8h +
jz loc_10151F2  +
cmp edi 0D0h +
jnz loc_1015210  +
push 10h  +
call ds:GetKeyState  +
test ax ax +
jge loc_1015210  +
mov ecx [esi+74h] +
push 1  +
mov byte ptr [ebp-111h] 1 +
call sub_10174AE  +
mov ecx [esi+74h] +
push edi  +
call sub_101744C  +
cmp byte ptr [ebp-111h] 0 +
mov [ebp-118h] eax +
jz loc_1015232  +
mov ecx [esi+74h] +
push 0  +
call sub_10174AE  +
cmp dword ptr [ebp-118h] 0 +
jl loc_101526F  +
mov eax [esi+8Ch] +
mov ecx [ebp-124h] +
mov eax [ecx+eax+4] +
mov ecx [ebp-120h] +
mov eax [eax+ecx+4] +
mov esi [eax+ebx+4] +
mov ecx esi +
call sub_101CD8E  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
push dword ptr [eax+4]  +
call ds:InvalidateGadget  +
push dword ptr [ebp-11Ch]  +
call ds:SysFreeString  +
mov eax [ebp-118h] +
jmp loc_1015288  +
mov eax 80070057h +
call sub_101F014  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jnz loc_10152AE  +
mov eax 80004003h +
jmp loc_10152DA  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10146FA  +
test eax eax +
jz loc_10152D8  +
push [ebp+arg_0]  +
mov ecx esi +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_1015100  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
push offset aKbcontrol  +
mov edi ecx +
call StrToID  +
mov ecx [edi+84h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
and [ebp+var_18] 0 +
lea ecx [ebp+var_18] +
push ecx  +
mov ecx eax +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov esi [eax] +
mov [ebp+var_1C] eax +
mov eax [edi+8Ch] +
mov eax [eax+4] +
mov eax [eax+4] +
mov ecx [eax+4] +
mov eax [ecx] +
and esi 0FFFFFFFh +
call dword ptr [eax]  +
mov ebx ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z +
push 0  +
push 1  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx eax +
call ebx  +
mov ecx [eax+8] +
mov [ebp+var_C] ecx +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
and [ebp+var_8] 0 +
mov eax [edi+78h] +
dec esi  +
mov [ebp+var_20] eax +
mov [ebp+var_10] esi +
js loc_1015499  +
push [ebp+var_10]  +
mov ecx [ebp+var_1C] +
call sub_100F86D  +
mov esi [eax] +
mov ecx esi +
mov [ebp+var_24] esi +
call ?GetAccRole@Element@DirectUI@@QAEHXZ  +
cmp eax 2Bh +
jnz loc_1015490  +
movzx eax word ptr [esi+58h] +
mov ecx [ebp+var_20] +
push eax  +
call sub_1011970  +
mov [ebp+var_28] eax +
test eax eax +
jz loc_1015490  +
inc [ebp+var_8]  +
cmp [ebp+var_8] 2 +
jg loc_1015499  +
push offset aParentkey  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov ecx dword_10274FC +
mov edx [eax] +
mov [ebp+var_14] ecx +
mov ecx eax +
mov [ebp+var_4] eax +
call dword ptr [edx+80h]  +
cmp eax [ebp+var_14] +
mov eax [ebp+var_4] +
push 0  +
push 1  +
push ?LocationProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
add eax 88h +
mov ecx esi +
mov [ebp+var_14] eax +
call ebx  +
mov esi [eax+8] +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov ecx [ebp+var_24] +
push 0  +
push 1  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ebx  +
mov ecx [eax+8] +
mov [ebp+var_24] ecx +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax [ebp+var_C] +
cdq   +
sub eax edx +
mov ecx eax +
sar ecx 1 +
lea eax [ecx+esi] +
cdq   +
idiv  [ebp+var_C] +
mov esi eax +
mov eax [ebp+var_24] +
add eax ecx +
cdq   +
idiv  [ebp+var_C] +
mov [ebp+var_4] esi +
lea ecx [eax+esi] +
cmp esi ecx +
jge loc_1015490  +
mov edx [ebp+arg_0] +
shl edx 3 +
mov eax [edi+8Ch] +
mov esi [ebp+var_4] +
mov eax [eax+esi*8+4] +
add eax edx +
mov esi [eax-8] +
mov eax [eax-4] +
lea eax [eax+esi*8] +
mov esi [ebp+var_14] +
mov [eax+4] esi +
mov esi [ebp+var_28] +
mov [eax] esi +
mov eax [edi+8Ch] +
mov esi [ebp+var_4] +
mov eax [eax+esi*8+4] +
lea eax [eax+edx-8] +
inc dword ptr [eax]  +
inc [ebp+var_4]  +
cmp [ebp+var_4] ecx +
jl loc_1015452  +
dec [ebp+var_10]  +
jns loc_1015370  +
mov ecx [ebp+var_18] +
call ?Release@Value@DirectUI@@QAEXXZ  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov [ebp+var_14] ebx +
call sub_100F86D  +
mov eax [eax] +
and [ebp+var_8] 0 +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx eax +
mov [ebp+var_C] eax +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov edi [eax] +
mov [ebp+var_10] eax +
mov eax [ebx+8Ch] +
lea esi [eax+esi*8] +
mov eax [ebp+arg_8] +
xor ecx ecx +
push 8  +
pop edx  +
mov [esi] eax +
and edi 0FFFFFFFh +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
xor ebx ebx +
pop ecx  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_10155CA  +
cmp [esi] ebx +
mov [ebp+arg_8] ebx +
jle loc_10155D1  +
mov eax [esi+4] +
and dword ptr [eax+ebx*8] 0 +
xor ecx ecx +
push 8  +
pop edx  +
lea eax [edi+2] +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov ecx [esi+4] +
mov [ecx+ebx*8+4] eax +
mov eax [esi+4] +
cmp dword ptr [eax+ebx*8+4] 0 +
jz loc_10155CA  +
mov ecx [ebp+var_C] +
push 0  +
push 1  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov ecx [eax+4] +
mov [ebp+arg_4] ecx +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
lea eax [ebx+1] +
mov [ebp+var_18] eax +
imul eax [ebp+arg_4] +
cdq   +
idiv  dword ptr [esi] +
and [ebp+arg_4] 0 +
mov [ebp+arg_0] eax +
test edi edi +
jle loc_10155B7  +
push [ebp+arg_4]  +
mov ecx [ebp+var_10] +
call sub_100F86D  +
push [ebp+arg_0]  +
mov ecx [ebp+var_14] +
push [ebp+arg_8]  +
push ebx  +
push esi  +
push dword ptr [eax]  +
call sub_10148BC  +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] edi +
jl loc_1015592  +
mov ebx [ebp+var_18] +
cmp ebx [esi] +
mov eax [ebp+arg_0] +
mov [ebp+arg_8] eax +
jl loc_1015529  +
jmp loc_10155D1  +
mov [ebp+var_4] 8007000Eh +
mov ecx [ebp+var_8] +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_1014994  +
push offset aBoard  +
call StrToID  +
mov ecx [esi+84h] +
mov edi ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
call edi  +
push offset aBlock  +
mov ebx eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call edi  +
lea ecx [ebp+var_8] +
push ecx  +
xor ebx ebx +
mov ecx eax +
mov [ebp+var_8] ebx +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov edi eax +
mov eax [edi] +
and eax 0FFFFFFFh +
xor ecx ecx +
push 8  +
pop edx  +
mov [esi+88h] eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi+8Ch] eax +
cmp eax ebx +
jz loc_1015693  +
cmp [esi+88h] ebx +
jle loc_101569A  +
push [ebp+arg_0]  +
mov ecx esi +
push ebx  +
push edi  +
call sub_10154AE  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101569A  +
inc ebx  +
cmp ebx [esi+88h] +
jl loc_1015675  +
jmp loc_101569A  +
mov [ebp+var_4] 8007000Eh +
mov ecx [ebp+var_8] +
call ?Release@Value@DirectUI@@QAEXXZ  +
and [ebp+var_8] 0 +
cmp [ebp+var_4] 0 +
jl loc_10156B7  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10152E5  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
push [ebp+hModule]  +
call sub_100D8A3  +
mov esi [ebp+arg_8] +
test eax eax +
jz loc_10156EE  +
movzx ecx word ptr [eax] +
push ecx  +
add eax 2 +
push eax  +
call ds:SysAllocStringLen  +
mov [esi] eax +
cmp dword ptr [esi] 0 +
pop esi  +
setnz al  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] 15h +
mov [ebp+var_4] ecx +
jz loc_1015723  +
cmp [ebp+arg_0] 1Ah +
jz loc_1015723  +
cmp [ebp+arg_0] 31Ah +
jnz loc_10157F6  +
cmp [ecx+78h] ebx +
jz loc_10157F6  +
push esi  +
push edi  +
mov edi 10000h +
mov esi 80000000h +
cmp dword_102711C ebx +
jz loc_1015791  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101574D  +
test al al +
jnz loc_1015791  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1015791  +
mov eax dword_1027110 +
mov ebx dword_1027114 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1015791  +
cmp edx ebx +
jnz loc_1015791  +
push offset dword_1003538  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov ecx [ebp+var_4] +
mov eax [ecx] +
call dword ptr [eax]  +
cmp dword_102711C 0 +
mov ebx eax +
jz loc_10157F4  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10157B0  +
test al al +
jnz loc_10157F4  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10157F4  +
mov eax dword_1027110 +
mov ecx eax +
and ecx edi +
mov edi dword_1027114 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10157F4  +
cmp edx edi +
jnz loc_10157F4  +
push offset dword_1003548  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+var_4] ecx +
cmp [ecx+78h] ebx +
jz loc_1015992  +
push esi  +
push edi  +
mov esi 10000h +
mov edi 80000000h +
cmp [ebp+arg_0] bl +
jz loc_101587A  +
cmp dword_102711C ebx +
jz loc_10158D3  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1015845  +
test al al +
jnz loc_10158D3  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx edi +
or eax ecx +
jz loc_10158D3  +
mov eax dword_1027110 +
mov ebx dword_1027114 +
mov ecx eax +
mov edx ebx +
and ecx esi +
and edx edi +
cmp ecx eax +
jnz loc_10158D3  +
cmp edx ebx +
jnz loc_10158D3  +
push offset dword_1003558  +
jmp loc_10158C2  +
cmp dword_102711C ebx +
jz loc_10158D3  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101588F  +
test al al +
jnz loc_10158D3  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx edi +
or eax ecx +
jz loc_10158D3  +
mov eax dword_1027110 +
mov ebx dword_1027114 +
mov ecx eax +
mov edx ebx +
and ecx esi +
and edx edi +
cmp ecx eax +
jnz loc_10158D3  +
cmp edx ebx +
jnz loc_10158D3  +
push offset dword_1003578  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov eax [ebp+var_4] +
movzx ecx byte ptr [eax+15h] +
push ecx  +
push dword ptr [ebp+arg_0]  +
mov ecx [eax+78h] +
call sub_101385A  +
cmp [ebp+arg_0] 0 +
mov ebx eax +
jz loc_1015936  +
xor edx edx +
cmp dword_102711C edx +
jz loc_1015990  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101590D  +
test al al +
jnz loc_1015990  +
mov eax dword_1027108 +
and eax esi +
xor ecx ecx +
or eax ecx +
jz loc_1015990  +
mov eax dword_1027110 +
mov ecx eax +
and ecx esi +
cmp ecx eax +
jnz loc_1015990  +
cmp edx dword_1027114 +
jnz loc_1015990  +
push offset dword_1003568  +
jmp loc_101597F  +
cmp dword_102711C 0 +
jz loc_1015990  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101594C  +
test al al +
jnz loc_1015990  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx edi +
or eax ecx +
jz loc_1015990  +
mov eax dword_1027110 +
mov ecx eax +
and ecx esi +
mov esi dword_1027114 +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_1015990  +
cmp edx esi +
jnz loc_1015990  +
push offset dword_1003588  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_102711C 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi 10000h +
mov esi 80000000h +
jz loc_1015A0E  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10159CA  +
test al al +
jnz loc_1015A0E  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1015A0E  +
mov eax dword_1027110 +
mov ebx dword_1027114 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1015A0E  +
cmp edx ebx +
jnz loc_1015A0E  +
push offset dword_1003598  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
cmp [ebp+arg_0] 0 +
mov eax [ebp+var_4] +
push [ebp+arg_0]  +
setnz cl  +
mov [eax+16h] cl +
mov ecx [eax+78h] +
call sub_100DC10  +
cmp dword_102711C 0 +
mov ebx eax +
jz loc_1015A82  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1015A3E  +
test al al +
jnz loc_1015A82  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1015A82  +
mov eax dword_1027110 +
mov ecx eax +
and ecx edi +
mov edi dword_1027114 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1015A82  +
cmp edx edi +
jnz loc_1015A82  +
push offset dword_10035A8  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_102711C 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov ebx 80000000h +
jz loc_1015B02  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1015AB7  +
test al al +
jnz loc_1015B02  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1015B07  +
mov eax dword_1027110 +
mov edi dword_1027114 +
mov ecx eax +
mov edx edi +
and ecx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1015B07  +
cmp edx edi +
jnz loc_1015B07  +
push offset dword_10035B8  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
jmp loc_1015B07  +
mov esi 10000h +
lea eax [ebp+rc] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_1015B36  +
mov eax [ebp+var_4] +
mov ecx [eax+78h] +
test ecx ecx +
jz loc_1015B36  +
add eax 24h +
mov edi eax +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call sub_1013C3E  +
mov esi 10000h +
cmp dword_102711C 0 +
jz loc_1015B90  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1015B4C  +
test al al +
jnz loc_1015B90  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1015B90  +
mov eax dword_1027110 +
mov ecx eax +
and ecx esi +
mov esi dword_1027114 +
mov edx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1015B90  +
cmp edx esi +
jnz loc_1015B90  +
push offset dword_10035C8  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
mov esi ecx +
mov [ebp+var_4] ebx +
call ds:IsThemeActive  +
test eax eax +
jz loc_1015BC5  +
push 4  +
pop eax  +
jmp loc_1015C43  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_1015BFF  +
xor ecx ecx +
xor eax eax +
mov [ebp+pvParam] 0Ch +
mov [ebp+var_10] ecx +
lea edi [ebp+var_C] +
push ecx  +
stos   +
lea eax [ebp+pvParam] +
push eax  +
push ecx  +
push 42h  +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_1015BFF  +
test byte ptr [ebp+var_10] bl +
jnz loc_1015BFF  +
push 4  +
pop eax  +
jmp loc_1015C42  +
mov esi ds:GetSysColor +
push 5  +
call esi  +
push 2  +
mov edi eax +
call esi  +
push 5  +
mov ebx eax +
call esi  +
push 8  +
mov [ebp+var_8] eax +
call esi  +
test edi edi +
jz loc_1015C24  +
test ebx ebx +
jnz loc_1015C3F  +
cmp [ebp+var_8] 0FFFFFFh +
jnz loc_1015C38  +
mov [ebp+var_4] 3 +
test eax eax +
jz loc_1015C3F  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
mov [ebp+var_1] 1 +
cmp [esi+78h] edi +
jz loc_1015C7F  +
push offset aKbcontrol  +
call StrToID  +
mov ecx [esi+78h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp+var_8] eax +
jmp loc_1015C82  +
mov [ebp+var_8] edi +
cmp [ebp+var_8] edi +
jz loc_1015EB2  +
push [ebp+arg_4]  +
mov ebx [ebp+arg_0] +
mov eax [esi] +
push ebx  +
push [ebp+var_8]  +
mov ecx esi +
call dword ptr [eax+4]  +
test al al +
jnz loc_1015EB6  +
push 4  +
mov ecx ebx +
mov eax offset aLonghorn +
pop esi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1015CD2  +
cmp dx di +
jz loc_1015CCE  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1015CD2  +
add eax esi +
add ecx esi +
cmp dx di +
jnz loc_1015CAE  +
xor eax eax +
jmp loc_1015CD7  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1015CF4  +
mov ecx [ebp+var_8] +
push edi  +
call ?SetBackgroundColor@Element@DirectUI@@QAEJK@Z  +
mov ecx [ebp+var_8] +
push edi  +
call ?SetAlpha@Element@DirectUI@@QAEJH@Z  +
jmp loc_1015EB6  +
mov ecx ebx +
mov eax offset aHighcontrastbl +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1015D1F  +
cmp dx di +
jz loc_1015D1B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1015D1F  +
add eax esi +
add ecx esi +
cmp dx di +
jnz loc_1015CFB  +
xor eax eax +
jmp loc_1015D24  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1015D77  +
mov esi ds:GetSysColor +
push 8  +
call esi  +
shr eax 10h +
movzx ebx al +
push 8  +
shl ebx 8 +
call esi  +
shr eax 8 +
movzx edi al +
or edi ebx +
push 8  +
shl edi 8 +
call esi  +
movzx ebx al +
push 8  +
or ebx edi +
call esi  +
shr eax 10h +
movzx eax al +
shl eax 8 +
push 8  +
mov [ebp+arg_4] eax +
call esi  +
shr eax 8 +
movzx edi al +
or edi [ebp+arg_4] +
push 8  +
jmp loc_1015E7C  +
mov ecx ebx +
mov eax offset aHighcontrastwh +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1015DA2  +
cmp dx di +
jz loc_1015D9E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1015DA2  +
add eax esi +
add ecx esi +
cmp dx di +
jnz loc_1015D7E  +
xor eax eax +
jmp loc_1015DA7  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1015DFA  +
mov esi ds:GetSysColor +
push 5  +
call esi  +
shr eax 10h +
movzx ebx al +
push 5  +
shl ebx 8 +
call esi  +
shr eax 8 +
movzx edi al +
or edi ebx +
push 5  +
shl edi 8 +
call esi  +
movzx ebx al +
push 5  +
or ebx edi +
call esi  +
shr eax 10h +
movzx eax al +
shl eax 8 +
push 5  +
mov [ebp+arg_4] eax +
call esi  +
shr eax 8 +
movzx edi al +
or edi [ebp+arg_4] +
push 5  +
jmp loc_1015E7C  +
mov ecx ebx +
mov eax offset aClassic +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1015E25  +
cmp dx di +
jz loc_1015E21  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1015E25  +
add eax esi +
add ecx esi +
cmp dx di +
jnz loc_1015E01  +
xor eax eax +
jmp loc_1015E2A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1015EB6  +
mov esi ds:GetSysColor +
push 0Ah  +
call esi  +
shr eax 10h +
movzx ebx al +
push 0Ah  +
shl ebx 8 +
call esi  +
shr eax 8 +
movzx edi al +
or edi ebx +
push 0Ah  +
shl edi 8 +
call esi  +
movzx ebx al +
push 0Ah  +
or ebx edi +
call esi  +
shr eax 10h +
movzx eax al +
shl eax 8 +
push 0Ah  +
mov [ebp+arg_4] eax +
call esi  +
shr eax 8 +
movzx edi al +
or edi [ebp+arg_4] +
push 0Ah  +
shl edi 8 +
call esi  +
movzx eax al +
push 1  +
or eax edi +
push ebx  +
push eax  +
call ?CreateColor@Value@DirectUI@@SGPAV12@KKE@Z  +
mov esi eax +
test esi esi +
jz loc_1015EB6  +
mov ecx [ebp+var_8] +
push esi  +
push 1  +
push ?BackgroundProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z  +
mov ecx esi +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_1015EB6  +
mov [ebp+var_1] 0 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
xor al al +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1015EE5  +
push 80004005h  +
call loc_100540D  +
add eax 4 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx] +
push offset dword_10035D8  +
push ecx  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
push edi  +
push esi  +
xor edi edi +
call ds:SysStringLen  +
xor ecx ecx +
test eax eax +
jbe loc_1015F35  +
movzx edx word ptr [esi+ecx*2] +
imul edi edi +
add edi edx +
inc ecx  +
cmp ecx eax +
jb loc_1015F27  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
and dword ptr [esi] 0 +
push esi  +
push [ebp+arg_4]  +
push [ebp+hModule]  +
call sub_10156C6  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edx [ecx+74h] +
xor eax eax +
test edx edx +
jz locret_1015F7E  +
push dword ptr [ecx+8]  +
mov ecx edx +
call sub_1017502  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
inc ebx  +
mov esi ecx +
test edi edi +
jz loc_1015FF2  +
push offset aKbcontrol  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_1015FDD  +
push [ebp+arg_4]  +
mov ecx eax +
push ebx  +
push ?SheetProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z  +
test eax eax +
jl loc_1015FD8  +
movzx eax byte ptr [esi+15h] +
push eax  +
mov ecx edi +
call sub_1011720  +
mov ebx eax +
jmp loc_1015FDD  +
mov ebx 80004005h +
push ecx  +
mov ecx esp +
mov [ebp+arg_0] esp +
push [ebp+arg_8]  +
call loc_1005E48  +
mov ecx edi +
call sub_10103EC  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
cmp edi 8 +
jbe loc_1016021  +
push offset aLonghorn  +
push edi  +
push ebx  +
call sub_100E9BB  +
mov ecx esi +
mov byte ptr [esi+15h] 0 +
call sub_1015BA4  +
cmp eax 4 +
jz loc_101606F  +
cmp eax 1 +
jnz loc_1016042  +
cmp edi 7 +
jbe loc_1016058  +
push offset aClassic  +
jmp loc_1016051  +
cmp eax 3 +
jnz loc_101605E  +
cmp edi 11h +
jbe loc_1016058  +
push offset aHighcontrastwh  +
push edi  +
push ebx  +
call sub_100E9BB  +
mov byte ptr [esi+15h] 1 +
jmp loc_101606F  +
cmp edi 11h +
jbe loc_101606F  +
push offset aHighcontrastbl  +
push edi  +
push ebx  +
call sub_100E9BB  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1015F0C  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor edx edx +
div  dword ptr [esi+8] +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov [eax] edx +
cmp [esi] ebx +
jnz loc_10160B7  +
xor eax eax +
jmp loc_10160EC  +
push edi  +
mov edi [ebp+arg_C] +
mov [edi] ebx +
mov eax [eax] +
mov ecx [esi] +
mov esi [ecx+eax*4] +
cmp esi ebx +
jz loc_10160E9  +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_8] +
cmp eax [ecx] +
jnz loc_10160E0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100D9E1  +
test al al +
jnz loc_10160F2  +
mov ebx esi +
mov esi [esi+8] +
test esi esi +
jnz loc_10160C8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov [edi] ebx +
mov eax esi +
jmp loc_10160EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100E945  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov eax [edi+80h] +
mov [ebp+var_20C] eax +
xor eax eax +
push 1FEh  +
mov [ebp+var_204] ax +
xor ebx ebx +
lea eax [ebp-202h] +
push ebx  +
push eax  +
mov [ebp+var_210] esi +
mov [ebp+var_208] edi +
call memset  +
add esp 0Ch +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
mov ecx edi +
call sub_1016000  +
mov ecx offset aKeyboardstyle +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10161B2  +
cmp dx bx +
jz loc_10161AE  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10161B2  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_101618C  +
xor eax eax +
jmp loc_10161B7  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_1016267  +
xor edi edi +
cmp off_10264F8 ebx +
jz loc_10163BC  +
xor eax eax +
mov ecx off_10264FC[eax] +
cmp ecx ebx +
jz loc_10163BC  +
mov eax off_10264F8[eax] +
mov edx offset aKeyboard +
mov si [eax] +
cmp si [edx] +
jnz loc_101620E  +
cmp si bx +
jz loc_101620A  +
mov si [eax+2] +
cmp si [edx+2] +
jnz loc_101620E  +
add eax 4 +
add edx 4 +
cmp si bx +
jnz loc_10161E8  +
xor eax eax +
jmp loc_1016213  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_1016250  +
lea eax [ebp+var_204] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_1016243  +
cmp dx bx +
jz loc_101623F  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_1016243  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_101621D  +
xor eax eax +
jmp loc_1016248  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_1016342  +
inc edi  +
mov eax edi +
imul eax eax +
cmp off_10264F8[eax] ebx +
jnz loc_10161CF  +
jmp loc_10163BC  +
mov ecx offset aKeypadstyle +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1016294  +
cmp dx bx +
jz loc_1016290  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1016294  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_101626E  +
xor eax eax +
jmp loc_1016299  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_10163BC  +
xor edi edi +
cmp off_10264F8 ebx +
jz loc_10163BC  +
xor eax eax +
mov ecx off_10264FC[eax] +
cmp ecx ebx +
jz loc_10163BC  +
mov eax off_10264F8[eax] +
mov edx offset aKeypad +
mov si [eax] +
cmp si [edx] +
jnz loc_10162F0  +
cmp si bx +
jz loc_10162EC  +
mov si [eax+2] +
cmp si [edx+2] +
jnz loc_10162F0  +
add eax 4 +
add edx 4 +
cmp si bx +
jnz loc_10162CA  +
xor eax eax +
jmp loc_10162F5  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101632E  +
lea eax [ebp+var_204] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_1016325  +
cmp dx bx +
jz loc_1016321  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_1016325  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_10162FF  +
xor eax eax +
jmp loc_101632A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_1016342  +
inc edi  +
mov eax edi +
imul eax eax +
cmp off_10264F8[eax] ebx +
jnz loc_10162B1  +
jmp loc_10163BC  +
imul edi edi +
mov eax dword_1026500[edi] +
cmp eax ebx +
jz loc_10163BC  +
mov esi [ebp+var_208] +
mov ecx [ebp+var_20C] +
push offset __ImageBase  +
push dword ptr [esi+6Ch]  +
push eax  +
call ?SetXMLFromResource@DUIXmlParser@DirectUI@@QAEJIPAUHINSTANCE__@@0@Z  +
cmp eax ebx +
jl loc_10163CF  +
add esi 20h +
mov ecx [esi] +
cmp ecx ebx +
jz loc_101637F  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov [esi] ebx +
mov ecx [ebp+var_20C] +
push esi  +
push [ebp+var_210]  +
call ?GetSheet@DUIXmlParser@DirectUI@@QAEJPBGPAPAVValue@2@@Z  +
mov esi eax +
lea eax [ebp+var_204] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_101639D  +
sub eax ecx +
sar eax 1 +
push eax  +
lea eax [ebp+var_204] +
push eax  +
call sub_101934F  +
cmp esi ebx +
jl loc_10163CF  +
mov eax [ebp+var_208] +
mov esi [eax+20h] +
mov ecx esi +
call ?AddRef@Value@DirectUI@@QAEXXZ  +
jmp loc_10163D1  +
xor esi esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_101608D  +
test eax eax +
jnz loc_101640C  +
xor al al +
jmp locret_1016416  +
mov eax [eax+4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov al 1 +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
push edi  +
call sub_100FBFF  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_101645D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100FFA6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
cmp dword_102711C 0 +
jz loc_10164F7  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10164A9  +
test al al +
jnz loc_10164F7  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edx 10000h +
mov ebx 80000000h +
and eax edx +
and ecx ebx +
or eax ecx +
jz loc_10164F7  +
mov eax dword_1027110 +
mov edi dword_1027114 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx ebx +
cmp ecx eax +
jnz loc_10164F7  +
cmp edx edi +
jnz loc_10164F7  +
push offset a1  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
call sub_101770C  +
cmp dword ptr [ebp+8] 0 +
jz loc_10165E7  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10165E7  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_10165E7  +
mov eax [ebp+14h] +
test eax eax +
jz loc_10165E7  +
mov edi [ebp+18h] +
test edi edi +
jz loc_10165E7  +
push eax  +
mov [esi+6Ch] eax +
mov [esi+70h] edi +
call sub_101C0EA  +
mov [esi+4] ebx +
call sub_101BBAC  +
mov ebx eax +
test ebx ebx +
jl loc_1016738  +
call sub_101A657  +
mov ebx eax +
test ebx ebx +
jl loc_1016738  +
call sub_1018953  +
mov ebx eax +
test ebx ebx +
jl loc_1016738  +
mov dword_1026698 edi +
call sub_10115E9  +
mov ebx eax +
test ebx ebx +
jl loc_1016738  +
mov edi ds:EncodePointer +
push offset sub_101611C  +
call edi  +
push offset nullsub_1  +
mov dword_1027194 eax +
call edi  +
mov edi ds:DecodePointer +
push esi  +
push eax  +
mov dword_1027198 eax +
call edi  +
push eax  +
push esi  +
push dword_1027194  +
call edi  +
push eax  +
lea eax [esi+7Ch] +
push eax  +
call ?Create@DUIXmlParser@DirectUI@@SGJPAPAV12@P6GPAVValue@2@PBGPAX@Z2P6GX11H2@Z2@Z  +
mov ebx eax +
test ebx ebx +
jl loc_1016738  +
push esi  +
push dword_1027198  +
call edi  +
push eax  +
push esi  +
push 0  +
lea eax [esi+80h] +
push eax  +
call ?Create@DUIXmlParser@DirectUI@@SGJPAPAV12@P6GPAVValue@2@PBGPAX@Z2P6GX11H2@Z2@Z  +
mov ebx eax +
jmp loc_10165EC  +
mov ebx 80004003h +
test ebx ebx +
jl loc_1016738  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+10h] eax +
xor edi edi +
mov [ebp-4] edi +
cmp eax edi +
jz loc_1016611  +
mov ecx eax +
call sub_101DEA1  +
mov edi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jnz loc_1016623  +
mov eax 80004005h +
jmp loc_101679E  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
lea ebx [esi+8] +
cmp dword ptr [ebx] 0 +
jz loc_1016640  +
mov eax [ebx] +
test eax eax +
jz loc_1016640  +
and dword ptr [ebx] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
mov ecx edi +
call sub_1015EF1  +
mov ebx eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
test ebx ebx +
jl loc_1016738  +
mov ecx [esi+74h] +
xor edi edi +
inc edi  +
test ecx ecx +
jz loc_101666C  +
push edi  +
call sub_100DB38  +
and dword ptr [esi+74h] 0 +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+10h] eax +
mov [ebp-4] edi +
test eax eax +
jz loc_101668D  +
push dword ptr [ebp+0Ch]  +
mov ecx eax +
push dword ptr [ebp+8]  +
call sub_101769D  +
jmp loc_101668F  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+74h] eax +
test eax eax +
jz loc_1016733  +
lea edi [esi+8] +
push dword ptr [edi]  +
mov ecx eax +
call sub_10174D0  +
mov ebx eax +
test ebx ebx +
jl loc_1016738  +
cmp dword_1027190 0 +
jnz loc_1016707  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 2 +
test eax eax +
jz loc_10166DC  +
mov ecx eax +
call sub_1017EF4  +
jmp loc_10166DE  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword_1027190 eax +
test eax eax +
jz loc_1016702  +
push dword ptr [ebp+24h]  +
mov ecx eax +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [esi+74h]  +
call sub_1017E51  +
mov ebx eax +
jmp loc_1016707  +
mov ebx 8007000Eh +
test ebx ebx +
jl loc_1016738  +
add esi 0Ch +
cmp dword ptr [esi] 0 +
jz loc_1016722  +
mov eax [esi] +
test eax eax +
jz loc_1016722  +
and dword ptr [esi] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [edi] +
mov ecx [eax] +
push esi  +
push offset dword_10041AC  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
jmp loc_1016738  +
mov ebx 8007000Eh +
cmp dword_102711C 0 +
jz loc_101679C  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101674E  +
test al al +
jnz loc_101679C  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edx 10000h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_101679C  +
mov eax dword_1027110 +
mov esi dword_1027114 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_101679C  +
cmp edx esi +
jnz loc_101679C  +
push offset dword_10034E8  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov eax ebx +
call __EH_epilog3  +
retn 24h  +
***
push 414h  +
mov eax offset dword_101FEC0 +
call __EH_prolog3_GS  +
and dword ptr [ebp-420h] 0 +
mov edi ecx +
call sub_101770C  +
xor eax eax +
mov ebx 1FEh +
push ebx  +
push eax  +
mov [ebp-210h] ax +
lea eax [ebp-20Eh] +
push eax  +
call memset  +
add esp 0Ch +
mov esi 100h +
push esi  +
lea eax [ebp-210h] +
push eax  +
mov ecx edi +
call sub_1016000  +
and dword ptr [ebp-414h] 0 +
mov ecx [edi+78h] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-414h] +
push eax  +
call near ptr dword_10103CC+3  +
lea eax [ebp-210h] +
push eax  +
lea ecx [ebp-414h] +
call sub_100E945  +
test al al +
jnz loc_1016956  +
xor eax eax +
push ebx  +
push eax  +
mov [ebp-410h] ax +
lea eax [ebp-40Eh] +
push eax  +
call memset  +
add esp 0Ch +
lea ebx [edi+10h] +
push offset aQuick  +
mov ecx ebx +
call sub_100E945  +
test al al +
jnz loc_10168A3  +
push offset aQuickea  +
mov ecx ebx +
call sub_100E945  +
test al al +
jnz loc_10168A3  +
push offset aNum  +
mov ecx ebx +
call sub_100E945  +
test al al +
jnz loc_10168A3  +
push offset aSym  +
mov ecx ebx +
call sub_100E945  +
test al al +
jnz loc_10168A3  +
push offset aWeb  +
mov ecx ebx +
call sub_100E945  +
test al al +
jnz loc_10168A3  +
push offset aKeyboardstyle  +
jmp loc_10168A8  +
push offset aKeypadstyle  +
push esi  +
lea eax [ebp-410h] +
push eax  +
call sub_100E9BB  +
push edi  +
lea eax [ebp-410h] +
push eax  +
call sub_101611C  +
mov ecx eax +
mov eax [edi+78h] +
mov [ebp-418h] ecx +
test eax eax +
jz loc_101693C  +
test ecx ecx +
jz loc_101693C  +
mov edx [ecx] +
and edx 3Fh +
cmp dl 0Ch +
jnz loc_101693C  +
push esi  +
lea edx [ebp-210h] +
push edx  +
push ecx  +
push eax  +
mov ecx edi +
call sub_1015F84  +
lea ebx [edi+3Ch] +
mov ecx ebx +
call sub_100E71B  +
mov [ebp-41Ch] eax +
jmp loc_1016936  +
push eax  +
mov ecx ebx +
call sub_1015ECF  +
mov eax [eax] +
push esi  +
lea ecx [ebp-210h] +
push ecx  +
push dword ptr [ebp-418h]  +
mov ecx edi +
push eax  +
call sub_1015F84  +
lea eax [ebp-41Ch] +
push eax  +
mov ecx ebx +
call sub_101641F  +
mov eax [ebp-41Ch] +
test eax eax +
jnz loc_1016902  +
jmp loc_1016946  +
mov dword ptr [ebp-420h] 80004005h +
mov ecx [ebp-418h] +
test ecx ecx +
jz loc_1016956  +
call ?Release@Value@DirectUI@@QAEXXZ  +
lea eax [ebp-210h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101695F  +
sub eax edx +
sar eax 1 +
push eax  +
lea eax [ebp-210h] +
push eax  +
call sub_101934F  +
lea eax [ebp-210h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1016983  +
sub eax edx +
sar eax 1 +
push eax  +
lea eax [ebp-210h] +
push eax  +
mov ecx edi +
call sub_1015C4C  +
push dword ptr [edi+78h]  +
call sub_1018481  +
test al al +
jz loc_1016A30  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
test al al +
jz loc_1016A30  +
mov edx offset aLonghorn +
lea eax [ebp-210h] +
mov cx [eax] +
cmp cx [edx] +
jnz loc_10169EC  +
test cx cx +
jz loc_10169E8  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_10169EC  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_10169C6  +
xor eax eax +
jmp loc_10169F1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1016A30  +
mov eax dword_10266A4 +
mov ecx eax +
shr ecx 8 +
movzx eax al +
movzx ecx cl +
shl eax 8 +
or ecx eax +
movzx eax byte ptr dword_10266A4+2 +
shl ecx 8 +
or ecx eax +
jnz loc_1016A30  +
mov esi ds:GetSysColor +
push 5  +
call esi  +
push 11h  +
mov dword_10266A4 eax +
call esi  +
mov dword_10266A8 eax +
lea esi [edi+24h] +
push esi  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_1016A47  +
mov ecx [edi+78h] +
push esi  +
call sub_1013C3E  +
push dword ptr [ebp-414h]  +
call ds:SysFreeString  +
mov eax [ebp-420h] +
call sub_101F014  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_1016A7E  +
push 80004005h  +
call loc_100540D  +
push 0  +
mov ecx edi +
call sub_1016440  +
mov eax [esi+2Ch] +
mov [edi+8] eax +
dec dword ptr [esi+4]  +
mov eax [esi+4] +
mov [esi+2Ch] edi +
cmp eax [esi+1Ch] +
jnb loc_1016AB1  +
cmp dword ptr [esi+20h] 0 +
jnz loc_1016AB1  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FD9D  +
cmp dword ptr [esi+4] 0 +
jnz loc_1016ABE  +
mov ecx esi +
call sub_100E821  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1016469  +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
inc dword ptr [esi+20h]  +
xor ebx ebx +
cmp [esi] ebx +
jz loc_1016B21  +
cmp [esi+8] ebx +
jbe loc_1016B21  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
jmp loc_1016B14  +
mov eax edi +
mov edi [edi+8] +
push eax  +
mov ecx esi +
call sub_1016A64  +
test edi edi +
jnz loc_1016B07  +
inc ebx  +
cmp ebx [esi+8] +
jb loc_1016B00  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [esi+20h] ebx +
jnz loc_1016B44  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FE98  +
mov ecx esi +
call sub_100E821  +
dec dword ptr [esi+20h]  +
pop esi  +
pop ebx  +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
cmp [esi+2Ch] ebx +
jnz loc_1016BAA  +
push 10h  +
push dword ptr [esi+24h]  +
lea eax [esi+28h] +
push eax  +
call sub_100E88A  +
cmp eax ebx +
jnz loc_1016B8A  +
push 8007000Eh  +
call loc_100540D  +
mov ecx [esi+24h] +
mov edx ecx +
shl edx 4 +
dec ecx  +
cmp ecx ebx +
lea eax [edx+eax-0Ch] +
jl loc_1016BAA  +
mov edx [esi+2Ch] +
mov [eax+8] edx +
mov [esi+2Ch] eax +
sub eax 10h +
dec ecx  +
jns loc_1016B9B  +
mov edi [esi+2Ch] +
xor eax eax +
cmp edi ebx +
setnz al  +
cmp eax ebx +
jnz loc_1016BBF  +
push 80004005h  +
jmp loc_1016B85  +
mov eax [edi+8] +
mov [ebp-18h] edi +
mov [esi+2Ch] eax +
mov [ebp-4] ebx +
mov [ebp-1Ch] edi +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
call sub_1016AC9  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
inc dword ptr [esi+4]  +
shl eax 2 +
mov ecx [eax+ecx] +
mov [edi+8] ecx +
mov ecx [esi] +
mov [eax+ecx] edi +
mov eax [esi+4] +
cmp eax [esi+18h] +
jbe loc_1016C16  +
cmp [esi+20h] ebx +
jnz loc_1016C16  +
push eax  +
mov ecx esi +
call sub_100E767  +
push eax  +
mov ecx esi +
call sub_100FD9D  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1016C6D  +
push 1  +
push dword ptr [esi+8]  +
call sub_100FE98  +
test al al +
jnz loc_1016C6D  +
push 8007000Eh  +
call loc_100540D  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1016B56  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
fld  ds:flt_10032B4 +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push 0Ah  +
sub esp 0Ch +
fstp  [esp+18h+var_10] +
mov dword ptr [esi] offset off_100361C +
fld  ds:flt_10032B0 +
mov [esi+4] ebx +
mov [esi+8] ebx +
fstp  [esp+18h+var_14] +
fld  ds:flt_100320C +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
fstp  [esp+18h+var_18] +
push 11h  +
lea ecx [esi+3Ch] +
mov byte ptr [esi+14h] 1 +
mov [esi+15h] bl +
mov [esi+16h] bl +
mov [esi+17h] bl +
mov [esi+18h] ebx +
mov [esi+20h] ebx +
mov [esi+34h] ebx +
mov [esi+38h] ebx +
call sub_1010F6B  +
lea eax [esi+24h] +
push eax  +
mov [esi+6Ch] ebx +
mov [esi+70h] ebx +
mov [esi+74h] ebx +
mov [esi+78h] ebx +
mov [esi+7Ch] ebx +
mov [esi+80h] ebx +
call ds:SetRectEmpty  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100361C +
xor edi edi +
mov dword ptr [ebp-4] 3 +
mov [esi+78h] edi +
cmp [esi+74h] edi +
jz loc_1016D4A  +
call sub_1015F6B  +
cmp eax edi +
jl loc_1016D4A  +
mov ecx [esi+74h] +
push 1  +
push 4  +
call sub_1017569  +
mov ecx [esi+7Ch] +
mov ebx ?Destroy@DUIXmlParser@DirectUI@@QAEXXZ +
cmp ecx edi +
jz loc_1016D5C  +
call ebx  +
mov [esi+7Ch] edi +
lea edi [esi+80h] +
mov ecx [edi] +
test ecx ecx +
jz loc_1016D6D  +
call ebx  +
and dword ptr [edi] 0 +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1016D7A  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax [esi+74h] +
test eax eax +
jz loc_1016D8B  +
push eax  +
call sub_100E994  +
and dword ptr [esi+74h] 0 +
lea ecx [esi+3Ch] +
call sub_1016AEB  +
push dword ptr [esi+10h]  +
call ds:SysFreeString  +
mov eax [esi+0Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1016DAD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1016DBE  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101608D  +
test eax eax +
jnz loc_1016DFC  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1016C48  +
add eax 4 +
pop esi  +
leave   +
retn 4  +
***
push 230h  +
mov eax offset word_101FF72 +
call __EH_prolog3_GS  +
cmp dword_102711C 0 +
mov eax [ebp+arg_0] +
mov [ebp+var_21C] eax +
mov eax [ebp+arg_4] +
mov edi ecx +
mov [ebp+var_22C] eax +
jz loc_1016E90  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1016E42  +
test al al +
jnz loc_1016E90  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edx 10000h +
mov ebx 80000000h +
and eax edx +
and ecx ebx +
or eax ecx +
jz loc_1016E90  +
mov eax dword_1027110 +
mov esi dword_1027114 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1016E90  +
cmp edx esi +
jnz loc_1016E90  +
push offset dword_10034F8  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
push [ebp+var_21C]  +
lea ebx [edi+10h] +
xor esi esi +
mov ecx ebx +
mov [ebp+var_218] esi +
mov [ebp+var_211] 0 +
call sub_10160FD  +
mov [ebp+var_230] esi +
mov [ebp+var_234] esi +
mov [ebp+pv] esi +
lea esi [edi+78h] +
mov ecx [esi] +
mov [ebp+var_212] al +
test ecx ecx +
jz loc_1016EEA  +
lea eax [ebp+var_230] +
push eax  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+var_234] +
push eax  +
call sub_1011517  +
cmp [ebp+var_212] 0 +
jz loc_1016F59  +
mov eax [edi+0Ch] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ecx [esi] +
test ecx ecx +
jz loc_1016F26  +
push 0  +
call sub_1013C12  +
push ebx  +
lea ecx [edi+3Ch] +
call sub_1016DC9  +
mov ecx [esi] +
mov [eax] ecx +
push dword ptr [esi]  +
mov ecx [edi+4] +
call ?Remove@Element@DirectUI@@QAEJPAV12@@Z  +
and dword ptr [esi] 0 +
push [ebp+var_21C]  +
lea ecx [ebp+var_228] +
call loc_1005E48  +
push esi  +
lea eax [ebp+var_228] +
push eax  +
lea ecx [edi+3Ch] +
call sub_10163E9  +
push [ebp+var_228]  +
mov [ebp+var_211] al +
call ds:SysFreeString  +
mov eax [esi] +
test eax eax +
jz loc_1016F72  +
cmp [ebp+var_211] 0 +
jz loc_1016F72  +
mov ecx [edi+4] +
push eax  +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
and [ebp+var_224] 0 +
cmp [ebp+var_212] 0 +
jz loc_10172A5  +
cmp [ebp+var_211] 0 +
jnz loc_1017275  +
cmp dword ptr [edi+4] 0 +
jz loc_1017213  +
mov ecx off_1026568 +
xor eax eax +
jmp loc_1016FE8  +
mov edx [ebp+var_21C] +
mov bx [ecx] +
cmp bx [edx] +
jnz loc_1016FD3  +
test bx bx +
jz loc_1016FCF  +
mov bx [ecx+2] +
cmp bx [edx+2] +
jnz loc_1016FD3  +
add ecx 4 +
add edx 4 +
test bx bx +
jnz loc_1016FAD  +
xor ecx ecx +
jmp loc_1016FD8  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jz loc_1016FF1  +
inc eax  +
mov ecx eax +
shl ecx 4 +
mov ecx off_1026568[ecx] +
test ecx ecx +
jnz loc_1016FA7  +
jmp loc_1017213  +
shl eax 4 +
mov ecx dword_102656C[eax] +
mov edx dword_1026570[eax] +
mov eax dword_1026574[eax] +
mov [ebp+var_228] ecx +
mov [ebp+var_23C] edx +
mov [ebp+var_238] eax +
test ecx ecx +
jz loc_1017213  +
cmp dword_102711C 0 +
jz loc_1017087  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1017036  +
test al al +
jnz loc_1017087  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edx 10000h +
and eax edx +
and ecx 80000000h +
or eax ecx +
jz loc_1017087  +
mov eax dword_1027110 +
mov ebx dword_1027114 +
mov ecx eax +
and ecx edx +
mov edx ebx +
and edx 80000000h +
cmp ecx eax +
jnz loc_1017087  +
cmp edx ebx +
jnz loc_1017087  +
push offset dword_1003518  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov ecx [edi+7Ch] +
push offset __ImageBase  +
push dword ptr [edi+6Ch]  +
push [ebp+var_228]  +
call ?SetXMLFromResource@DUIXmlParser@DirectUI@@QAEJIPAUHINSTANCE__@@0@Z  +
test eax eax +
jl loc_1017213  +
mov ecx [edi+7Ch] +
lea eax [ebp+var_224] +
push eax  +
xor ebx ebx +
push ebx  +
push dword ptr [edi+4]  +
push ebx  +
push offset aMain  +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
mov [ebp+var_218] eax +
cmp dword_102711C ebx +
jz loc_1017132  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10170DD  +
test al al +
jnz loc_1017132  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edx 10000h +
and eax edx +
and ecx 80000000h +
or eax ecx +
jz loc_1017132  +
mov eax dword_1027110 +
mov ecx dword_1027114 +
and eax edx +
and ecx 80000000h +
cmp eax dword_1027110 +
jnz loc_1017132  +
cmp ecx dword_1027114 +
jnz loc_1017132  +
push offset dword_1003528  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
cmp [ebp+var_218] ebx +
jl loc_1017213  +
push [ebp+var_224]  +
mov ecx [edi+4] +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
cmp eax ebx +
jl loc_1017213  +
mov eax [ebp+var_224] +
mov [esi] eax +
mov [ebp+var_218] ebx +
push [ebp+var_23C]  +
lea ecx [ebp+var_218] +
push dword ptr [edi+6Ch]  +
mov [ebp+var_4] ebx +
call sub_1015F42  +
push [ebp+var_218]  +
mov ecx [esi] +
call ?SetAccName@Element@DirectUI@@QAEJPBG@Z  +
mov ecx [esi] +
push 0Ah  +
call ?SetAccRole@Element@DirectUI@@QAEJH@Z  +
mov eax [ebp+var_238] +
push off_10264D0[eax*4]  +
mov ecx [esi] +
call ?SetID@Element@DirectUI@@QAEJPBG@Z  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
mov ecx [esi] +
mov [ecx+170h] al +
xor eax eax +
push 1FEh  +
mov word ptr [ebp+var_210] ax +
lea eax [ebp+var_210+2] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push 100h  +
lea eax [ebp+var_210] +
push eax  +
mov ecx edi +
call sub_1016000  +
push ecx  +
lea eax [ebp+var_210] +
mov ecx esp +
mov [ebp+var_238] esp +
push eax  +
call loc_1005E48  +
mov ecx [esi] +
call sub_10103EC  +
push [ebp+var_218]  +
or [ebp+var_4] 0FFFFFFFFh +
call ds:SysFreeString  +
mov ecx [esi] +
test ecx ecx +
jz loc_1017262  +
push [ebp+arg_8]  +
push dword ptr [edi+20h]  +
push dword_1027190  +
push dword ptr [edi+74h]  +
push dword ptr [edi+6Ch]  +
push dword ptr [edi+70h]  +
call sub_100EA2A  +
mov [ebp+var_218] eax +
test eax eax +
jl loc_10172DA  +
push [ebp+var_22C]  +
mov ecx [esi] +
push [ebp+var_21C]  +
push [ebp+var_224]  +
call sub_101418D  +
mov [ebp+var_218] eax +
jmp loc_101726C  +
mov [ebp+var_218] 8007000Eh +
cmp [ebp+var_218] 0 +
jl loc_10172DA  +
cmp dword ptr [edi+8] 0 +
jz loc_1017292  +
mov eax [edi+0Ch] +
test eax eax +
jz loc_1017292  +
push dword ptr [esi]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+var_218] eax +
jmp loc_101729C  +
mov [ebp+var_218] 80004005h +
cmp [ebp+var_218] 0 +
jl loc_10172DA  +
push [ebp+var_21C]  +
lea ecx [edi+10h] +
call sub_100E8DD  +
mov ecx [esi] +
test ecx ecx +
jz loc_10172DA  +
push [ebp+var_22C]  +
call sub_10110A8  +
mov byte_102668C 1 +
cmp byte ptr [edi+16h] 0 +
jz loc_10172DA  +
push 1  +
mov ecx edi +
call sub_101599E  +
mov ecx [esi] +
test ecx ecx +
jz loc_101735F  +
push [ebp+var_22C]  +
call sub_100E50E  +
xor eax eax +
push 1FEh  +
push eax  +
mov word ptr [ebp+var_210] ax +
lea eax [ebp+var_210+2] +
push eax  +
call memset  +
add esp 0Ch +
push 100h  +
lea eax [ebp+var_210] +
push eax  +
mov ecx edi +
call sub_1016000  +
lea eax [ebp+var_210] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1017325  +
sub eax ecx +
sar eax 1 +
push eax  +
lea eax [ebp+var_210] +
push eax  +
mov ecx edi +
call sub_1015C4C  +
push dword ptr [esi]  +
call sub_1018481  +
add edi 24h +
push edi  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_101735F  +
mov ecx [esi] +
push edi  +
call sub_1013C3E  +
cmp [ebp+var_212] 0 +
jz loc_1017371  +
cmp [ebp+var_211] 0 +
jz loc_1017395  +
mov ecx [esi] +
test ecx ecx +
jz loc_1017395  +
push [ebp+pv]  +
push [ebp+var_234]  +
push [ebp+var_230]  +
call sub_1011A6D  +
mov ecx [esi] +
call sub_1012E4F  +
cmp [ebp+pv] 0 +
jz loc_10173B1  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
and [ebp+pv] 0 +
cmp dword_102711C 0 +
jz loc_1017416  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10173C7  +
test al al +
jnz loc_1017416  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
mov edi 80000000h +
and eax esi +
and ecx edi +
or eax ecx +
jz loc_1017416  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx edi +
cmp eax edx +
jnz loc_1017416  +
cmp ecx esi +
jnz loc_1017416  +
push offset dword_1003508  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov eax [ebp+var_218] +
call sub_101F014  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1017440  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
xor eax eax +
cmp ecx eax +
jz loc_1017469  +
cmp [ebp+arg_0] eax +
jbe loc_101746E  +
push [ebp+arg_0]  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+20h]  +
jmp loc_101746E  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jz loc_10174A0  +
cmp [ebp+arg_0] 0 +
jbe loc_1017499  +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+1Ch]  +
jmp loc_10174A5  +
mov eax 80070057h +
jmp loc_10174A5  +
mov eax 80004005h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
mov eax 80004005h +
test ecx ecx +
jz loc_10174C7  +
push [ebp+arg_0]  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+3Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_10174F4  +
cmp [ebp+arg_0] 0 +
jz loc_10174ED  +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
jmp loc_10174F9  +
mov eax 80070057h +
jmp loc_10174F9  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_1017526  +
cmp [ebp+arg_0] 0 +
jz loc_101751F  +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_101752B  +
mov eax 80070057h +
jmp loc_101752B  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax 80004005h +
test ecx ecx +
jz loc_1017560  +
cmp [ebp+arg_4] 0 +
jbe loc_1017560  +
push [ebp+arg_10]  +
mov eax [ecx] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ecx  +
call dword ptr [eax+20h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jz loc_1017582  +
push [ebp+arg_4]  +
mov ecx [eax] +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_1017587  +
mov eax 80004005h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_10175BA  +
cmp [ebp+arg_0] 0 +
jbe loc_10175B3  +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_10175BF  +
mov eax 80070057h +
jmp loc_10175BF  +
mov eax 80004005h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_10175DF  +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
jmp loc_10175E4  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] 2Ah +
jz loc_101760E  +
cmp [ebp+arg_0] 3Ah +
jnz loc_1017624  +
lea esi [ecx+10h] +
cmp dword ptr [esi] 0 +
jnz loc_1017622  +
push esi  +
push 3Ah  +
jmp loc_1017619  +
lea esi [ecx+0Ch] +
cmp dword ptr [esi] 0 +
jnz loc_1017622  +
push esi  +
push 2Ah  +
mov ecx [ecx+4] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+24h]  +
mov esi [esi] +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
and dword ptr [edx] 0 +
mov eax [ecx] +
test eax eax +
jz loc_101764B  +
mov ecx [eax] +
push edx  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+38h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
xor eax eax +
test ecx ecx +
jz loc_101766A  +
push [ebp+arg_0]  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+44h]  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1017429  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1017681  +
push [ebp+arg_4]  +
lea ecx [esi+4] +
call sub_1017681  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
mov dword ptr [esi+8] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
mov esi ecx +
call sub_1007029  +
lea edi [esi+4] +
push 0  +
mov ecx edi +
call sub_1007029  +
mov edi [edi] +
test edi edi +
jz loc_10176F8  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov esi [esi] +
test esi esi +
jz loc_1017704  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1FCh +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push 0  +
call ds:GetDC  +
mov esi eax +
test esi esi +
jz loc_1017748  +
push 5Ah  +
push esi  +
call ds:GetDeviceCaps  +
push esi  +
push 0  +
mov nNumerator eax +
call ds:ReleaseDC  +
mov esi ds:MulDiv +
push 48h  +
push 60h  +
pop edi  +
push edi  +
push 9  +
call esi  +
cmp nNumerator 90h +
push 48h  +
mov dword_10271D4 eax +
push edi  +
jnb loc_1017777  +
push 13h  +
call esi  +
push 48h  +
push edi  +
push 0Eh  +
jmp loc_1017780  +
push 17h  +
call esi  +
push 48h  +
push edi  +
push 11h  +
mov dword_10271DC eax +
call esi  +
mov esi 1F8h +
push esi  +
mov dword_10271D8 eax +
xor edi edi +
lea eax [ebp+pvParam] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 29h  +
mov [ebp+pvParam] esi +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_10177CC  +
push 17h  +
pop ecx  +
lea esi [ebp+var_64] +
mov edi offset unk_1027218 +
movs   +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_C] +
shr eax 8 +
mov [ebp+var_1] al +
mov eax [ebp+arg_0] +
shr eax 10h +
mov [ebp+var_2] al +
mov eax 3E8h +
push esi  +
mov esi [ebp+arg_4] +
mov [esi] eax +
mov [esi+4] eax +
xor eax eax +
cmp edx eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [ebp+var_8] eax +
jle loc_10178F2  +
mov ecx [ebp+arg_8] +
imul ecx ecx +
lea edx ds:0FFFFFFFCh[edx*4] +
imul edx [ebp+arg_8] +
push ebx  +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
push edi  +
mov ecx dword_1027548 +
xor edi edi +
add ecx edx +
cmp [ebp+arg_8] edi +
mov byte ptr [ebp+arg_4+3] 0 +
mov [ebp+var_C] edi +
jle loc_10178DD  +
test dword ptr [ecx] 0FFFFFFh +
jz loc_10178BB  +
cmp edi [esi] +
mov byte ptr [ebp+arg_4+3] 1 +
jge loc_1017862  +
mov [esi] edi +
cmp edi [esi+8] +
jle loc_101786A  +
mov [esi+8] edi +
movzx ebx byte ptr [ecx+2] +
movzx eax byte ptr [ecx+1] +
lea eax [ebx+eax*2] +
movzx ebx byte ptr [ecx] +
add eax ebx +
sar eax 2 +
test al al +
jbe loc_10178B8  +
movzx ebx al +
movzx eax byte ptr [ebp+arg_0] +
imul eax ebx +
cdq   +
mov edi 0FFh +
idiv  edi +
mov [ecx+3] bl +
mov [ecx+2] al +
movzx eax [ebp+var_1] +
imul eax ebx +
cdq   +
idiv  edi +
mov [ecx+1] al +
movzx eax [ebp+var_2] +
imul eax ebx +
cdq   +
idiv  edi +
mov edi [ebp+var_C] +
mov edx [ebp+var_10] +
mov [ecx] al +
mov eax [ebp+var_8] +
add ecx 4 +
inc edi  +
cmp edi [ebp+arg_8] +
mov [ebp+var_C] edi +
jl loc_1017850  +
cmp byte ptr [ebp+arg_4+3] 0 +
jz loc_10178DD  +
cmp eax [esi+4] +
jge loc_10178D5  +
mov [esi+4] eax +
cmp eax [esi+0Ch] +
jle loc_10178DD  +
mov [esi+0Ch] eax +
add edx [ebp+var_14] +
inc eax  +
cmp eax [ebp+arg_C] +
mov [ebp+var_8] eax +
mov [ebp+var_10] edx +
jl loc_1017836  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 10h  +
***
mov eax ecx +
mov dword ptr [eax] offset off_1003AF0 +
retn   +
***
mov dword ptr [ecx] offset off_1003AF0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B0h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_34] +
mov eax [ebp+arg_18] +
test ecx ecx +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_B0] eax +
mov eax [ebp+arg_20] +
setnz [ebp+var_61]  +
cmp [ebp+arg_1C] 0 +
mov [ebp+var_A4] ebx +
mov [ebp+var_A8] eax +
mov [ebp+var_AC] ecx +
jnz loc_1017966  +
cmp [ebp+var_61] 0 +
jz loc_1017DD4  +
cmp [ebp+var_61] 0 +
push esi  +
push edi  +
push 17h  +
pop ecx  +
mov esi offset unk_1027218 +
lea edi [ebp+var_60] +
movs   +
jnz loc_10179FA  +
mov eax [eax] +
cdq   +
mov ecx eax +
xor ecx edx +
sub ecx edx +
neg ecx  +
mov eax ecx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax [ebp+arg_28] +
mov [ebp+var_60.lfHeight] ecx +
jle loc_101799D  +
mov ecx [ebp+arg_28] +
neg ecx  +
mov [ebp+var_60.lfHeight] ecx +
mov eax ecx +
mov ecx dword_10271D4 +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jl loc_10179CE  +
cmp [ebp+arg_1C] 1 +
jbe loc_10179C2  +
mov ecx dword_10271D8 +
cmp eax ecx +
jg loc_10179CE  +
cmp [ebp+arg_1C] 1 +
jnz loc_10179D3  +
mov ecx dword_10271DC +
cmp eax ecx +
jle loc_10179D3  +
neg ecx  +
mov [ebp+var_60.lfHeight] ecx +
xor eax eax +
cmp [ebp+arg_24] al +
setz al  +
dec eax  +
and eax 12Ch +
add eax 190h +
cmp byte_102668C 0 +
mov [ebp+var_60.lfWeight] eax +
setnz al  +
lea eax [eax+eax+3] +
mov [ebp+var_60.lfQuality] al +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
add eax 0Ah +
mov [ebp+var_80] eax +
mov eax [ebp+arg_10] +
sub eax [ebp+arg_8] +
add eax 0Ah +
mov [ebp+var_7C] eax +
lea eax [ebp+var_80] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
push ebx  +
call sub_101C4B1  +
and [ebp+var_9C] 0 +
mov ecx [ebp+arg_4] +
lea esi [ebp+arg_4] +
lea edi [ebp+var_90] +
movs   +
movs   +
test eax eax +
movs   +
setnz [ebp+var_62]  +
and [ebp+var_68] 0 +
mov [ebp+var_98] eax +
movs   +
test ecx ecx +
jnz loc_1017A54  +
mov [ebp+var_68] 6 +
jmp loc_1017A61  +
cmp [ebp+arg_2C] 2 +
jz loc_1017A61  +
mov [ebp+var_68] 5 +
mov eax [ebp+arg_C] +
sub eax ecx +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
cmp [ebp+var_68] eax +
jl loc_1017A77  +
mov [ebp+var_68] eax +
cmp [ebp+var_62] 0 +
jnz loc_1017AB5  +
push 0FFFFFFh  +
push ebx  +
call ds:SetTextColor  +
push 18h  +
push ebx  +
call ds:SetTextAlign  +
push 1  +
push ebx  +
call ds:SetBkMode  +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_4] +
sub eax ecx +
mov [ebp+var_80] eax +
mov eax [ebp+arg_10] +
sub eax [ebp+arg_8] +
mov [ebp+var_98] ebx +
mov [ebp+var_7C] eax +
and [ebp+var_A0] 0 +
and [ebp+var_94] 0 +
mov ebx ds:MulDiv +
cmp [ebp+var_62] 0 +
lea esi [ebp+arg_4] +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
jz loc_1017AEC  +
mov eax [ebp+arg_8] +
neg eax  +
push eax  +
neg ecx  +
push ecx  +
lea eax [ebp+rc] +
push eax  +
call ds:OffsetRect  +
mov edi [ebp+var_98] +
push 42h  +
push [ebp+var_7C]  +
push [ebp+var_80]  +
push dword ptr [ebp-74h]  +
push [ebp+rc]  +
push edi  +
call ds:PatBlt  +
cmp [ebp+var_61] 0 +
jnz loc_1017B5E  +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
push eax  +
push edi  +
mov [ebp+var_A0] eax +
call ds:SelectObject  +
cmp [ebp+var_94] 0 +
jnz loc_1017B36  +
mov [ebp+var_94] eax +
jmp loc_1017B3D  +
push eax  +
call ds:DeleteObject  +
mov eax [ebp+var_60.lfHeight] +
push [ebp+arg_1C]  +
cdq   +
push [ebp+var_B0]  +
xor eax edx +
sub eax edx +
add eax [ebp-74h] +
push eax  +
push [ebp+rc]  +
push edi  +
call ds:TextOutW  +
jmp loc_1017B9B  +
cmp [ebp+var_62] 0 +
jz loc_1017B8A  +
mov ecx [ebp-70h] +
mov eax [ebp+rc] +
sub ecx eax +
cmp ecx 10h +
jge loc_1017B77  +
add eax 10h +
mov [ebp-70h] eax +
mov ecx [ebp-6Ch] +
mov eax [ebp-74h] +
sub ecx eax +
cmp ecx 10h +
jge loc_1017B8A  +
add eax 10h +
mov [ebp-6Ch] eax +
mov ecx [ebp+var_AC] +
lea eax [ebp+rc] +
push eax  +
push edi  +
call ?PaintContent@Element@DirectUI@@QAEXPAUHDC__@@PBUtagRECT@@@Z  +
cmp [ebp+var_62] 0 +
jz loc_1017BB9  +
push [ebp+var_7C]  +
mov ecx [ebp+arg_14] +
push [ebp+var_80]  +
lea eax [ebp+rc] +
push eax  +
call sub_100DB06  +
push eax  +
call sub_10177DF  +
inc dword ptr [ebp-6Ch]  +
inc dword ptr [ebp-70h]  +
cmp [ebp+var_61] 0 +
jnz loc_1017C76  +
mov eax [ebp+var_60.lfHeight] +
cdq   +
xor eax edx +
push 0Ah  +
sub eax edx +
push eax  +
push 2  +
call ebx  +
cmp [ebp-74h] eax +
jl loc_1017BEF  +
mov eax [ebp+var_60.lfHeight] +
cdq   +
xor eax edx +
push 0Ah  +
sub eax edx +
push eax  +
push 2  +
call ebx  +
mov [ebp-74h] eax +
cmp [ebp+var_9C] 2 +
mov esi [ebp+var_60.lfHeight] +
mov ecx [ebp+var_84] +
jz loc_1017C65  +
mov eax esi +
cdq   +
xor eax edx +
sub eax edx +
cmp eax dword_10271D4 +
jle loc_1017C65  +
mov eax [ebp+var_88] +
xor edx edx +
cmp [ebp+arg_1C] 1 +
setnz dl  +
inc edx  +
imul edx [ebp+var_68] +
sub eax edx +
mov edx [ebp-70h] +
sub eax [ebp+var_90] +
sub edx [ebp+rc] +
cmp edx eax +
jg loc_1017C48  +
mov edx [ebp-6Ch] +
sub edx [ebp-74h] +
mov eax ecx +
sub eax [ebp+var_8C] +
cmp edx eax +
jle loc_1017C5F  +
push edx  +
push eax  +
inc esi  +
push esi  +
call ebx  +
inc [ebp+var_9C]  +
mov ecx [ebp+arg_4] +
mov [ebp+var_60.lfHeight] eax +
jmp loc_1017AC9  +
mov edi [ebp+var_98] +
mov eax esi +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ebp+var_A8] +
mov [edx] eax +
jmp loc_1017C7C  +
mov ecx [ebp+var_84] +
mov eax [ebp+var_68] +
add [ebp+var_90] eax +
cmp [ebp+arg_30] 0 +
jnz loc_1017CDF  +
cmp [ebp+arg_1C] 2 +
jbe loc_1017CAA  +
mov eax dword_10271D8 +
cmp [ebp+arg_28] eax +
jle loc_1017CAA  +
mov ecx [ebp-74h] +
sub ecx [ebp-6Ch] +
add eax ecx +
cmp eax 3 +
jge loc_1017CD4  +
jmp loc_1017CC7  +
mov eax ecx +
sub eax [ebp+var_8C] +
sub eax [ebp-6Ch] +
add eax [ebp-74h] +
cdq   +
sub eax edx +
sar eax 1 +
cmp eax 1 +
jl loc_1017CD1  +
cmp eax 3 +
jle loc_1017CCC  +
push 3  +
pop eax  +
jmp loc_1017CD4  +
cmp eax 1 +
jge loc_1017CD4  +
xor eax eax +
inc eax  +
add [ebp+var_8C] eax +
jmp loc_1017D6B  +
cmp [ebp+arg_30] 1 +
jnz loc_1017D38  +
mov eax [ebp-70h] +
sub eax [ebp+rc] +
inc eax  +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
sar ecx 1 +
cdq   +
sub eax edx +
sar eax 1 +
sub eax ecx +
add eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ebp+var_90] eax +
mov eax [ebp-6Ch] +
sub eax [ebp-74h] +
inc eax  +
cdq   +
sub eax edx +
mov esi eax +
mov eax [ebp+arg_10] +
sub eax ecx +
cdq   +
sub eax edx +
sar esi 1 +
sar eax 1 +
sub eax esi +
cmp eax 2 +
jge loc_1017D2E  +
push 2  +
pop eax  +
add eax ecx +
mov [ebp+var_8C] eax +
jmp loc_1017D6B  +
mov eax [ebp+var_8C] +
sub eax [ebp-74h] +
lea edx [ecx-1] +
add eax [ebp-6Ch] +
cmp eax edx +
jle loc_1017D6B  +
sub ecx [ebp+var_8C] +
mov eax [ebp-74h] +
sub ecx [ebp-6Ch] +
lea eax [ecx+eax-1] +
push eax  +
push 0  +
lea eax [ebp+var_90] +
push eax  +
call ds:OffsetRect  +
cmp [ebp+arg_38] 0 +
jnz loc_1017DB3  +
mov eax [ebp-6Ch] +
sub eax [ebp-74h] +
mov ecx [ebp-70h] +
sub ecx [ebp+rc] +
mov byte ptr [ebp+var_68] 0 +
mov byte ptr [ebp+var_68+1] 0 +
mov byte ptr [ebp+var_68+2] 0FFh +
mov byte ptr [ebp+var_68+3] 1 +
push [ebp+var_68]  +
push eax  +
push ecx  +
push dword ptr [ebp-74h]  +
push [ebp+rc]  +
push edi  +
push eax  +
push ecx  +
push [ebp+var_8C]  +
push [ebp+var_90]  +
push [ebp+var_A4]  +
call ds:GdiAlphaBlend  +
cmp [ebp+var_61] 0 +
jnz loc_1017DD2  +
push [ebp+var_94]  +
push edi  +
call ds:SelectObject  +
push [ebp+var_A0]  +
call ds:DeleteObject  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_100C84F  +
leave   +
retn 3Ch  +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1017E3C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx] al +
jz loc_1017E5F  +
inc eax  +
jmp loc_1017E76  +
mov edx [ebp+arg_0] +
mov byte ptr [ecx] 1 +
test edx edx +
jz loc_1017E6E  +
mov [ecx+1Ch] edx +
jmp loc_1017E76  +
mov eax 80070057h +
mov byte ptr [ecx] 0 +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ecx+1Ch] +
push 1  +
push [ebp+arg_0]  +
call sub_1017477  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
cmp [ebp+arg_0] 0 +
jz loc_1017EB8  +
push [ebp+arg_0]  +
mov ecx [ecx+1Ch] +
call sub_101744C  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+1Ch] +
pop ebp  +
jmp sub_10174AE  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov ecx esi +
call sub_1017E01  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1017ED4  +
and dword ptr [esi+1Ch] 0 +
mov byte ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
push ecx  +
push ecx  +
fstp  [esp+8+var_8] +
call floor  +
fstp  [ebp+arg_0] +
pop ecx  +
fld  [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
push 2  +
push off_10266BC  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@PBUPropertyInfo@2@HPAUUpdateCache@2@@Z  +
mov esi [eax+4] +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 2  +
push off_10266A0  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@PBUPropertyInfo@2@HPAUUpdateCache@2@@Z  +
mov esi [eax+4] +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+88h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
mov [ecx+80h] al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov bl [esi+5Ch] +
shr bl 6 +
and bl 1 +
call ?GetPressed@Button@DirectUI@@QAE_NXZ  +
cmp dword ptr [esi+84h] 1 +
mov [ebp+var_1] al +
jnz loc_1017FFA  +
push edi  +
mov edi [esi+28h] +
mov ecx edi +
call ?GetCaptured@Button@DirectUI@@QAE_NXZ  +
test al al +
jz loc_1017FF9  +
cmp [ebp+var_1] 0 +
jnz loc_1017FF5  +
push 0  +
mov ecx edi +
call ?SetCaptured@Button@DirectUI@@QAEJ_N@Z  +
mov [ebp+var_1] 1 +
pop edi  +
cmp byte_10272E0 0 +
jz loc_1018016  +
mov eax [esi+90h] +
test eax eax +
jz loc_1018016  +
cmp byte ptr [eax+172h] 0 +
jnz loc_1018030  +
cmp byte_102669C 0 +
jnz loc_10180A6  +
test bl bl +
jz loc_10180A6  +
cmp dword ptr [esi+84h] 1 +
jnz loc_101809B  +
mov eax [esi+84h] +
cmp eax 2 +
jnz loc_1018076  +
cmp byte ptr [esi+80h] 0 +
jz loc_101805D  +
mov eax dword_10266A4 +
movzx ecx al +
shr eax 8 +
push ecx  +
push eax  +
movzx eax byte ptr dword_10266A4+2 +
jmp loc_1018107  +
mov eax dword_10266A8 +
movzx ecx al +
shr eax 8 +
push ecx  +
push eax  +
movzx eax byte ptr dword_10266A8+2 +
jmp loc_1018107  +
cmp eax 1 +
jnz loc_1018117  +
cmp [ebp+var_1] 0 +
jz loc_1018044  +
mov eax dword_10266AC +
movzx ecx al +
shr eax 8 +
push ecx  +
push eax  +
movzx eax byte ptr dword_10266AC+2 +
jmp loc_1018107  +
cmp byte ptr [esi+80h] 0 +
jz loc_101805D  +
jmp loc_101807F  +
mov al [esi+80h] +
test al al +
jz loc_10180D9  +
cmp [ebp+var_1] 0 +
jnz loc_1018085  +
test al al +
jz loc_10180D9  +
mov ecx dword_10266A4 +
mov eax ecx +
shr eax 8 +
movzx ecx cl +
movzx eax al +
shl ecx 8 +
or eax ecx +
movzx ecx byte ptr dword_10266A4+2 +
jmp loc_10180F6  +
mov ecx dword_10266A8 +
mov eax ecx +
shr eax 8 +
movzx ecx cl +
movzx eax al +
shl ecx 8 +
or eax ecx +
movzx ecx byte ptr dword_10266A8+2 +
shl eax 8 +
or eax ecx +
mov ecx eax +
shr ecx 10h +
push ecx  +
mov ecx eax +
shr ecx 8 +
push ecx  +
push eax  +
push 0FFh  +
call sub_1014416  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov al [esi+8Eh] +
not al  +
test al 1 +
jz loc_1018141  +
mov dword ptr [esi+84h] 2 +
pop esi  +
retn   +
push edi  +
mov edi [esi+28h] +
test edi edi +
jz loc_1018179  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+80h]  +
cmp dword_10274FC eax +
jz loc_101816F  +
mov ecx edi +
call sub_1017F34  +
cmp eax 1 +
jnz loc_101816F  +
mov [esi+84h] eax +
jmp loc_1018179  +
mov dword ptr [esi+84h] 2 +
pop edi  +
pop esi  +
retn   +
***
xor eax eax +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10181A4  +
push edi  +
mov esi [esi+28h] +
movzx edi word ptr [esi+58h] +
push offset aParentkey  +
call StrToID  +
cmp di ax +
jnz loc_101818B  +
mov eax esi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov [ebp+var_1] 0 +
test esi esi +
jz loc_1018212  +
cmp byte ptr [esi+86h] 0 +
jz loc_1018212  +
push ebx  +
mov ebx [esi+80h] +
call ds:GetTickCount  +
sub eax ebx +
pop ebx  +
cmp eax 50h +
jnb loc_1018212  +
push esi  +
push 2  +
lea eax [ebp+arg_4] +
push eax  +
call sub_101C6C7  +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
test eax eax +
jz loc_1018212  +
mov ecx [edi+8Ch] +
mov esi [eax+14h] +
and esi ecx +
mov edx 1F0000h +
test esi edx +
jnz loc_101820E  +
and ecx edx +
or [eax+14h] ecx +
jmp loc_1018212  +
mov [ebp+var_1] 1 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi edi +
test edi edi +
jz loc_1018271  +
push ebx  +
mov esi [esi+28h] +
movzx ebx word ptr [esi+58h] +
push offset aKbcontrol  +
call StrToID  +
cmp bx ax +
jnz loc_101822D  +
lea ebx [edi+94h] +
push offset aBlock  +
mov [ebx] esi +
call StrToID  +
mov ecx [ebx] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [edi+98h] eax +
mov eax [esi+28h] +
mov [edi+90h] eax +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
lea eax [edi+1] +
cdq   +
sub eax edx +
mov esi eax +
mov eax edi +
mov edi [ebp+arg_4] +
cdq   +
sub eax edx +
mov edx [ebp+arg_8] +
xor ebx ebx +
mov [edx] ebx +
mov [edi] ebx +
mov ecx [ecx+8Ch] +
sar esi 1 +
sar eax 1 +
test ecx 10000h +
jz loc_10182DD  +
mov ecx dword_1027340 +
lea edx [ecx+esi] +
mov ecx [ebp+arg_0] +
add [ecx] edx +
mov edx dword_1027344 +
add edx esi +
add [ecx+4] edx +
or edx 0FFFFFFFFh +
sub edx eax +
add [ecx+8] edx +
or edx 0FFFFFFFFh +
sub edx eax +
add [ecx+0Ch] edx +
jmp loc_1018398  +
test ecx 20000h +
jz loc_10182FC  +
push 2  +
pop ecx  +
mov [edx] ecx +
or edx 0FFFFFFFFh +
mov [edi] ecx +
mov ecx [ebp+arg_0] +
sub edx eax +
add [ecx+8] edx +
jmp loc_1018387  +
test ecx 40000h +
jz loc_1018333  +
mov ecx [ebp+arg_0] +
mov [edx] ebx +
or edx 0FFFFFFFFh +
sub edx eax +
mov dword ptr [edi] 2 +
add [ecx+8] edx +
mov eax dword_1027344 +
add eax esi +
add [ecx+4] eax +
mov eax [ecx+4] +
cmp [ebp+arg_C] ebx +
jz loc_1018398  +
inc eax  +
add dword ptr [ecx+0Ch] 3 +
mov [ecx+4] eax +
jmp loc_1018398  +
test ecx 80000h +
jz loc_1018369  +
mov [edx] ebx +
mov [edi] ebx +
mov eax dword_1027340 +
lea ecx [eax+esi] +
mov eax [ebp+arg_0] +
add [eax] ecx +
mov ecx dword_1027344 +
add ecx esi +
add [eax+4] ecx +
mov ecx [eax+4] +
cmp [ebp+arg_C] ebx +
jz loc_1018398  +
inc ecx  +
add dword ptr [eax+0Ch] 3 +
mov [eax+4] ecx +
jmp loc_1018398  +
test ecx 100000h +
jz loc_1018398  +
mov dword ptr [edx] 2 +
mov [edi] ebx +
mov ecx dword_1027340 +
lea edx [ecx+esi] +
mov ecx [ebp+arg_0] +
add [ecx] edx +
or edx 0FFFFFFFFh +
sub edx eax +
add [ecx+0Ch] edx +
cmp [ebp+arg_C] ebx +
jz loc_1018398  +
add dword ptr [ecx+4] 0FFFFFFFDh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0Button@DirectUI@@QAE@XZ  +
or dword ptr [esi+8Ch] 0FFFFFFFFh +
xor eax eax +
mov [esi+7Ch] eax +
mov [esi+84h] eax +
mov [esi+88h] eax +
mov [esi+90h] eax +
mov [esi+94h] eax +
mov [esi+98h] eax +
mov dword ptr [esi] offset off_1003870 +
mov byte ptr [esi+80h] 1 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
mov dword ptr [ecx] offset off_1003870 +
jmp ??1Button@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax+48h]  +
push esi  +
call sub_100DA3A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1003918 +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
push 9Ch  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_1018474  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10183A4  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
xor al al +
cmp [ebp+arg_0] ebx +
jz loc_1018558  +
cmp byte_10266B8 bl +
jz loc_1018558  +
push esi  +
mov [ebp+var_C] offset aPrimarylabelco +
mov [ebp+var_8] offset aSecondarylabel +
mov [ebp+var_4] offset aToggleprimaryl +
push edi  +
push [ebp+ebx*4+var_C]  +
call StrToID  +
mov ecx [ebp+arg_0] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
xor edi edi +
cmp eax edi +
jz loc_101854A  +
push edi  +
push 2  +
push ?ForegroundProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx eax +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov esi eax +
mov eax [esi] +
shl eax 1Ah +
sar eax 1Ah +
cmp eax 1 +
jnz loc_1018502  +
push dword ptr [esi+4]  +
call ColorFromEnumI  +
mov edi eax +
jmp loc_1018510  +
cmp eax 9 +
jnz loc_1018510  +
cmp byte ptr [esi+4] 2 +
jnz loc_1018510  +
mov edi [esi+8] +
mov ecx esi +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax edi +
shr eax 10h +
push eax  +
mov eax edi +
shr eax 8 +
push eax  +
push edi  +
push 0FFh  +
call sub_1014416  +
mov ecx ebx +
dec ecx  +
jz loc_1018545  +
dec ecx  +
jz loc_101853E  +
mov dword_10266A4 eax +
jmp loc_101854A  +
mov dword_10266AC eax +
jmp loc_101854A  +
mov dword_10266A8 eax +
inc ebx  +
cmp ebx 3 +
jl loc_10184BA  +
pop edi  +
mov al 1 +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
lea edi [esi+8Ch] +
mov [edi] ebx +
cmp [esi+90h] ebx +
jnz loc_101859B  +
call sub_1018220  +
cmp [esi+90h] ebx +
jz loc_1018614  +
mov ebx esi +
mov ecx ebx +
call ?GetAccRole@Element@DirectUI@@QAEHXZ  +
cmp eax 2Bh +
jz loc_10185B1  +
mov ebx [ebx+28h] +
test ebx ebx +
jnz loc_101859D  +
test ebx ebx +
jz loc_1018614  +
movzx ebx word ptr [ebx+58h] +
test bx bx +
jz loc_1018614  +
xor eax eax +
push 1FEh  +
push eax  +
mov [ebp+Buffer] ax +
lea eax [ebp-202h] +
push eax  +
call memset  +
add esp 0Ch +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call ds:GetAtomNameW  +
push 10h  +
lea eax [ebp+Buffer] +
push 0  +
push eax  +
call ds:wcstoul  +
add esp 0Ch +
test eax eax +
jz loc_1018614  +
mov ecx [esi+90h] +
push edi  +
push eax  +
call sub_100DBE9  +
movzx esi word ptr [esi+58h] +
push offset aInnerkey  +
call StrToID  +
cmp ax si +
jnz loc_101862F  +
or dword ptr [edi] 10000h +
jmp loc_1018689  +
push offset aInnerquad_1  +
call StrToID  +
cmp ax si +
jnz loc_1018646  +
or dword ptr [edi] 20000h +
jmp loc_1018689  +
push offset aInnerquad_2  +
call StrToID  +
cmp ax si +
jnz loc_101865D  +
or dword ptr [edi] 40000h +
jmp loc_1018689  +
push offset aInnerquad_3  +
call StrToID  +
cmp ax si +
jnz loc_1018674  +
or dword ptr [edi] 80000h +
jmp loc_1018689  +
push offset aInnerquad_4  +
call StrToID  +
cmp ax si +
jnz loc_1018689  +
or dword ptr [edi] 100000h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C84F  +
leave   +
retn   +
***
mov edi edi +
push esi  +
lea esi [ecx+8Ch] +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_10186B0  +
call sub_1018562  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10183FA  +
test byte ptr [ebp+8] 1 +
jz loc_10186D3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ecx  +
call sub_101840B  +
and dword_10272DC 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
call sub_1018447  +
mov esi eax +
test esi esi +
jz loc_1018734  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@Button@DirectUI@@QAEJIPAVElement@2@PAK@Z  +
mov ebx eax +
test ebx ebx +
jl loc_1018728  +
mov [edi] esi +
jmp loc_1018739  +
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_1018739  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
call __EH_prolog3  +
push 8  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_1018771  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101842D  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1ClassInfoBase@DirectUI@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1018799  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call sub_10186F4  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_1018747  +
mov esi eax +
test esi esi +
jz loc_1018805  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_10187FD  +
mov [edi] esi +
jmp loc_101880A  +
push esi  +
call sub_101840B  +
jmp loc_101880A  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10187A5  +
***
call __EH_prolog3  +
mov esi ?GetClassInfoPtr@Button@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jnz loc_101884C  +
call ?Register@Button@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_1018854  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_10188EC  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
mov ebx eax +
push ebx  +
mov [ebp-14h] ebx +
call ds:EnterCriticalSection  +
xor edi edi +
mov [ebp-4] edi +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_10188D9  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
mov dword_10272DC edi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10187C3  +
mov edi eax +
test edi edi +
jl loc_10188E1  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_10188D0  +
mov dword_10272DC esi +
jmp loc_10188E1  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_10188E1  +
mov eax [ebp-10h] +
mov dword_10272DC eax +
test ebx ebx +
jz loc_10188EC  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax edi +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_10104DA  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_101892A  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_100E5F2  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call loc_100E584  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push offset dword_10272F8  +
push offset aCkeyboardinner  +
push offset __ImageBase  +
call sub_1018828  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100E63E  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10188FB  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov ebx ecx +
mov esi [ebp+0Ch] +
and dword ptr [ebp-40h] 0 +
lea edi [ebp-60h] +
movs   +
movs   +
movs   +
movs   +
call sub_1018181  +
lea ecx [ebp-40h] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-60h] +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
mov [ebp-2Ch] eax +
movs   +
call sub_10181AB  +
test al al +
jnz loc_1019112  +
lea ecx [ebp-38h] +
call sub_10178FC  +
and dword ptr [ebp-4] 0 +
mov ecx ebx +
call ?GetFontWeight@Element@DirectUI@@QAEHXZ  +
fldz   +
mov edi eax +
fstp  dword ptr [ebp-14h] +
xor eax eax +
inc eax  +
mov esi offset dword_1027698 +
push esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-30h] 0 +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
call sub_100F83E  +
mov al [ebx+8Eh] +
and dword ptr [ebp-44h] 0 +
and dword ptr [ebp-18h] 0 +
not al  +
and al 1 +
cmp byte ptr [ebp+14h] 0 +
mov byte ptr [ebp-4] 1 +
mov [ebp-0Dh] al +
mov byte ptr [ebp-0Eh] 0 +
mov byte ptr [ebp-10h] 0 +
jnz loc_1018A5E  +
lea eax [ebp-44h] +
push eax  +
mov ecx ebx +
call ?GetContentString@Element@DirectUI@@QAEPBGPAPAVValue@2@@Z  +
push eax  +
lea ecx [ebp-28h] +
call sub_1011396  +
mov eax [ebp-28h] +
mov eax [eax-0Ch] +
mov [ebp-18h] eax +
test eax eax +
jz loc_10190AA  +
cmp edi 2BCh +
jnz loc_1018A6A  +
mov byte ptr [ebp-30h] 1 +
push esi  +
lea ecx [ebp-24h] +
call sub_100F83E  +
cmp dword ptr [ebx+94h] 0 +
mov byte ptr [ebp-4] 2 +
jz loc_1018CDA  +
mov ecx [ebx+98h] +
test ecx ecx +
jz loc_1018CDA  +
and dword ptr [ebp-3Ch] 0 +
lea eax [ebp-3Ch] +
push eax  +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
test eax eax +
jz loc_1018CC9  +
mov esi [eax] +
mov ecx [ebx+94h] +
push 0  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
and esi 0FFFFFFFh +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
push dword ptr [eax+4]  +
lea ecx [ebp-24h] +
mov [ebp+0Ch] eax +
call sub_1011396  +
mov edi [ebp-24h] +
mov ecx offset aKbcontrol +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018B04  +
test dx dx +
jz loc_1018B00  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018B04  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1018ADE  +
xor eax eax +
jmp loc_1018B09  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1018B11  +
mov byte ptr [ebp-0Eh] 1 +
mov ecx offset aKbcontrolweb +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018B3E  +
test dx dx +
jz loc_1018B3A  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018B3E  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1018B18  +
xor eax eax +
jmp loc_1018B43  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1018B4D  +
dec esi  +
jmp loc_1018C6C  +
mov ecx offset aKbcontrolqui +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018B7A  +
test dx dx +
jz loc_1018B76  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018B7A  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1018B54  +
xor eax eax +
jmp loc_1018B7F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1018B8C  +
mov byte ptr [ebp-10h] 1 +
jmp loc_1018C6C  +
mov ecx offset aKbcontrolaux +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018BB9  +
test dx dx +
jz loc_1018BB5  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018BB9  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1018B93  +
xor eax eax +
jmp loc_1018BBE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1018C68  +
mov ecx offset aKbcontroloskpr +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018BF3  +
test dx dx +
jz loc_1018BEF  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018BF3  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1018BCD  +
xor eax eax +
jmp loc_1018BF8  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1018C68  +
mov ecx offset aKbcontroloskme +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018C29  +
test dx dx +
jz loc_1018C25  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018C29  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1018C03  +
xor eax eax +
jmp loc_1018C2E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1018C68  +
mov ecx offset aKbcontrolosknu +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018C5F  +
test dx dx +
jz loc_1018C5B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018C5F  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1018C39  +
xor eax eax +
jmp loc_1018C64  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1018C6C  +
mov byte ptr [ebp-0Eh] 1 +
mov ecx [ebp+0Ch] +
call ?Release@Value@DirectUI@@QAEXXZ  +
test esi esi +
jz loc_1018CC9  +
mov ecx [ebx+94h] +
call ?GetHeight@Element@DirectUI@@QAEHXZ  +
cdq   +
idiv  esi +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_1018C9D  +
dec eax  +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
fmul  ds:dbl_1003A28 +
jmp loc_1018CC6  +
cmp byte ptr [ebp-0Eh] 0 +
jnz loc_1018CB4  +
cmp dword ptr [ebp-18h] 2 +
jle loc_1018CB4  +
add eax 0FFFFFFF8h +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
jmp loc_1018CC6  +
push 5  +
push 3  +
dec eax  +
push eax  +
call ds:MulDiv  +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
fstp  dword ptr [ebp-14h] +
mov ecx [ebp-3Ch] +
test ecx ecx +
jz loc_1018CDA  +
call ?Release@Value@DirectUI@@QAEXXZ  +
and dword ptr [ebp-3Ch] 0 +
xor edi edi +
cmp [ebp-40h] edi +
mov ecx ebx +
setnz al  +
movzx eax al +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov dword ptr [ebp-34h] 0FF000000h +
call sub_1017FB0  +
xor esi esi +
inc esi  +
cmp byte ptr [ebp+14h] 0 +
jnz loc_1018D28  +
cmp [ebp-18h] esi +
jnz loc_1018D28  +
cmp [ebx+94h] edi +
jz loc_1018D28  +
cmp byte ptr [ebp-10h] 0 +
jz loc_1018D28  +
push offset dword_1003A20  +
lea ecx [ebp-28h] +
call sub_1018971  +
mov dword ptr [ebp-18h] 2 +
cmp byte ptr [ebp+14h] 0 +
mov byte ptr [ebp-0Fh] 0 +
mov byte ptr [ebp+0Fh] 0 +
jnz loc_1018E33  +
cmp [ebp-18h] esi +
jnz loc_1018DAF  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_1018D9A  +
mov ecx ebx +
call sub_1017F5B  +
test eax eax +
setnz byte ptr [ebp+0Fh]  +
cmp [ebp-2Ch] edi +
jz loc_1018D63  +
mov eax [ebp-2Ch] +
mov al [eax+84h] +
mov [ebp-0Fh] al +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_1018D88  +
fld  dword ptr [ebp-14h] +
sub dword ptr [ebp-54h] 2 +
push 4  +
push 3  +
call _ftol2_sse  +
push eax  +
call ds:MulDiv  +
mov [ebp-14h] eax +
fild  dword ptr [ebp-14h] +
jmp loc_1018DAC  +
cmp byte ptr [ebp-0Fh] 0 +
jz loc_1018D9A  +
fld  dword ptr [ebp-14h] +
fadd  ds:dbl_1003A18 +
fstp  dword ptr [ebp-14h] +
cmp byte ptr [ebx+80h] 0 +
jnz loc_1018DAF  +
fld  dword ptr [ebp-14h] +
fsub  ds:dbl_1003A10 +
fstp  dword ptr [ebp-14h] +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_1018DDC  +
cmp byte ptr [ebp+0Fh] 0 +
mov eax [ebx+90h] +
jz loc_1018DC9  +
mov eax [eax+80h] +
jmp loc_1018DEE  +
cmp byte ptr [ebx+80h] 0 +
jz loc_1018DD7  +
mov eax [eax+78h] +
jmp loc_1018DEE  +
mov eax [eax+7Ch] +
jmp loc_1018DEE  +
cmp dword ptr [ebp-18h] 2 +
jg loc_1018DF1  +
mov eax [ebx+90h] +
mov eax [eax+84h] +
mov [ebx+7Ch] eax +
mov eax [ebx+7Ch] +
cmp eax edi +
jz loc_1018E1F  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_1018E5A  +
fld  dword ptr [ebp-14h] +
push 4  +
push 5  +
fstp  qword ptr [ebp-50h] +
push eax  +
call ds:MulDiv  +
mov [ebp-48h] eax +
fild  dword ptr [ebp-48h] +
fcomp  qword ptr [ebp-50h] +
fnstsw  ax +
test ah 5 +
jp loc_1018E5A  +
cmp [ebp-18h] esi +
mov eax dword_10271D8 +
jg loc_1018E2E  +
mov eax dword_10271DC +
mov [ebx+7Ch] eax +
jmp loc_1018E5A  +
mov eax [ebp-54h] +
sub eax [ebp-5Ch] +
push 3  +
pop ecx  +
add [ebp-60h] ecx +
sub [ebp-58h] ecx +
add eax 0FFFFFFF2h +
cmp eax edi +
jl loc_1018E55  +
cmp eax ecx +
jle loc_1018E51  +
mov eax ecx +
jmp loc_1018E57  +
cmp eax edi +
jge loc_1018E57  +
xor eax eax +
add [ebp-5Ch] eax +
cmp [ebp-2Ch] edi +
jz loc_1018E72  +
mov ecx [ebp-2Ch] +
mov eax [ecx] +
call dword ptr [eax+80h]  +
cmp eax dword_10274FC +
jz loc_1018E90  +
cmp byte ptr [ebp-0Eh] 0 +
jnz loc_1018E84  +
cmp byte ptr [ebp-0Fh] 0 +
jnz loc_1018E84  +
cmp dword ptr [ebp-18h] 2 +
jg loc_1018E90  +
cmp byte ptr [ebp+14h] 0 +
jz loc_1018E98  +
cmp byte ptr [ebp-10h] 0 +
jz loc_1018E98  +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
jmp loc_1018EC1  +
cmp byte ptr [ebp-0Fh] 0 +
jz loc_1018EA8  +
cmp byte ptr [ebp+0Fh] 0 +
jnz loc_1018EA8  +
mov eax esi +
jmp loc_1018EAA  +
xor eax eax +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
call sub_1018279  +
cmp byte ptr [ebp+14h] 0 +
jnz loc_1018F98  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_1018F98  +
cmp byte ptr [ebp+0Fh] 0 +
jnz loc_1018F08  +
mov al [ebx+80h] +
test al al +
jz loc_1018EF8  +
mov ecx [ebx+90h] +
cmp [ecx+78h] edi +
jz loc_1018F1A  +
test al al +
jnz loc_1019042  +
mov eax [ebx+90h] +
cmp [eax+7Ch] edi +
jz loc_1018F1A  +
jmp loc_1019042  +
mov eax [ebx+90h] +
cmp [eax+80h] edi +
jnz loc_1019042  +
fld  dword ptr [ebp-14h] +
push ecx  +
fstp  [esp+4+var_4] +
call sub_1017F11  +
push 1  +
fstp  dword ptr [ebp+10h] +
fld  dword ptr [ebp+10h] +
push 0  +
push dword ptr [ebp-1Ch]  +
lea esi [ebx+7Ch] +
push dword ptr [ebp-20h]  +
call _ftol2_sse  +
push eax  +
push dword ptr [ebp-30h]  +
lea eax [ebp-34h] +
push esi  +
push 1  +
push offset aM  +
push eax  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp-60h] +
movs   +
movs   +
movs   +
lea ecx [ebp-38h] +
movs   +
call sub_1017916  +
cmp byte ptr [ebp+0Fh] 0 +
mov eax [ebx+90h] +
mov ecx [ebx+7Ch] +
jz loc_1018F7F  +
mov [eax+80h] ecx +
jmp loc_1019042  +
cmp byte ptr [ebx+80h] 0 +
jz loc_1018F90  +
mov [eax+78h] ecx +
jmp loc_1019042  +
mov [eax+7Ch] ecx +
jmp loc_1019042  +
push edi  +
push 2  +
push ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx ebx +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
push dword ptr [eax+4]  +
lea ecx [ebp-24h] +
mov [ebp+0Ch] eax +
call sub_1011396  +
mov eax [ebp-24h] +
mov ecx offset aBasekeyoverlap +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1018FE5  +
cmp dx di +
jz loc_1018FE1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1018FE5  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1018FBF  +
xor eax eax +
jmp loc_1018FEA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1019039  +
fld  dword ptr [ebp-14h] +
push ecx  +
fstp  [esp+4+var_4] +
call sub_1017F11  +
push 1  +
fstp  dword ptr [ebp+10h] +
fld  dword ptr [ebp+10h] +
push 0  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
call _ftol2_sse  +
push eax  +
push dword ptr [ebp-30h]  +
lea eax [ebx+7Ch] +
push eax  +
push 4  +
push offset a_mmm  +
lea eax [ebp-34h] +
push eax  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp-60h] +
movs   +
movs   +
movs   +
lea ecx [ebp-38h] +
movs   +
call sub_1017916  +
mov ecx [ebp+0Ch] +
call ?Release@Value@DirectUI@@QAEXXZ  +
fld  dword ptr [ebp-14h] +
push ecx  +
fstp  dword ptr [esp+0] +
call sub_1017F11  +
movzx eax byte ptr [ebp+14h] +
fstp  dword ptr [ebp+0Ch] +
fld  dword ptr [ebp+0Ch] +
neg eax  +
sbb eax eax +
push 0  +
and eax ebx +
push eax  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
call _ftol2_sse  +
push eax  +
push dword ptr [ebp-30h]  +
lea eax [ebx+7Ch] +
push eax  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-28h] +
call sub_10104B9  +
push eax  +
lea eax [ebp-34h] +
push eax  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp-60h] +
movs   +
movs   +
movs   +
lea ecx [ebp-38h] +
movs   +
call sub_1017916  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_100D958  +
mov edx [ebp-40h] +
xor esi esi +
cmp edx esi +
jz loc_10190EB  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_10190C5  +
test dword ptr [ebx+8Ch] 20000h +
jz loc_10190EB  +
mov eax [edx+4] +
mov ecx [edx] +
mov edi [edx+0Ch] +
push 0CC0020h  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
sub edi eax +
mov eax [edx+8] +
push edi  +
sub eax ecx +
push eax  +
push esi  +
push esi  +
push dword ptr [edx+18h]  +
call ds:BitBlt  +
mov ecx [ebp-44h] +
cmp ecx esi +
jz loc_10190FB  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov [ebp-44h] esi +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_100D958  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call sub_101790A  +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp dword_102711C 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov edi 10000h +
mov esi 80000000h +
jz loc_1019191  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101914B  +
test al al +
jnz loc_1019191  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1019191  +
mov eax dword_1027110 +
mov edx dword_1027114 +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1019191  +
cmp edx dword_1027114 +
jnz loc_1019191  +
push offset dword_1003770  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
and dword ptr [ebp-8] 0 +
push 0  +
push 1  +
push ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx ebx +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov ecx [eax] +
shl ecx 1Ah +
sar ecx 1Ah +
movzx ecx cx +
mov [ebp-4] ecx +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
cmp dword ptr [ebx+8Ch] 0FFFFFFFFh +
jnz loc_10191CD  +
mov ecx ebx +
call sub_1018562  +
cmp dword ptr [ebx+90h] 0 +
jnz loc_10191DD  +
mov ecx ebx +
call sub_1018220  +
cmp dword ptr [ebx+84h] 0 +
jnz loc_10191ED  +
mov ecx ebx +
call sub_1018124  +
push 5  +
pop eax  +
cmp ax [ebp-4] +
jnz loc_1019208  +
mov eax [ebx+90h] +
test eax eax +
jz loc_1019208  +
mov eax [eax+17Ch] +
jmp loc_101920B  +
mov eax [ebp-8] +
push 0Bh  +
pop ecx  +
cmp cx [ebp-4] +
setz cl  +
movzx ecx cl +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
call sub_1018997  +
cmp dword_102711C 0 +
jz loc_1019281  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101923D  +
test al al +
jnz loc_1019281  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1019281  +
mov eax dword_1027110 +
mov ecx eax +
and ecx edi +
mov edi dword_1027114 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1019281  +
cmp edx edi +
jnz loc_1019281  +
push offset dword_1003780  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101929E  +
mov [ecx+8] eax +
jmp loc_10192A0  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push dword ptr [esi+4]  +
call GdipSetSolidFillColor  +
push eax  +
mov ecx esi +
call sub_101928D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fld  [ebp+arg_4] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
mov eax [eax] +
push esi  +
push 0  +
push ecx  +
fstp  [esp+10h+var_10] +
push eax  +
call GdipCreatePen1  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101931D  +
mov [ecx+4] eax +
jmp loc_101931F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003AF0 +
jz loc_1019343  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx offset unk_1027370 +
push [ebp+arg_0]  +
call sub_101E2B0  +
call sub_101C8B0  +
push offset aLonghorn  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
neg eax  +
sbb eax eax +
pop ecx  +
and eax 4 +
pop ecx  +
mov dword_10266B0 eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_10273F8 +
pop ebp  +
jmp loc_101CB4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_102711C 0 +
push esi  +
push edi  +
mov [ebp-4] ecx +
mov edi 10000h +
mov esi 80000000h +
jz loc_1019414  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10193CE  +
test al al +
jnz loc_1019414  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1019414  +
mov eax dword_1027110 +
push ebx  +
mov ebx dword_1027114 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1019413  +
cmp edx ebx +
jnz loc_1019413  +
push offset dword_10036D0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop ebx  +
push dword ptr [ebp+8]  +
mov ecx [ebp-4] +
call ?OnInput@Button@DirectUI@@UAEXPAUInputEvent@2@@Z  +
cmp dword_102711C 0 +
jz loc_101947A  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1019436  +
test al al +
jnz loc_101947A  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101947A  +
mov eax dword_1027110 +
mov ecx eax +
and ecx edi +
mov edi dword_1027114 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101947A  +
cmp edx edi +
jnz loc_101947A  +
push offset dword_10036E0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ?GetCaptured@Button@DirectUI@@QAE_NXZ  +
test al al +
jz loc_10194AB  +
push 0  +
mov ecx esi +
call ?SetCaptured@Button@DirectUI@@QAEJ_N@Z  +
push 0  +
mov ecx esi +
call ?SetPressed@Button@DirectUI@@QAEJ_N@Z  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call ?OnMouseFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi edi +
test edi edi +
jz loc_10194ED  +
push ebx  +
mov esi [esi+28h] +
movzx ebx word ptr [esi+58h] +
push offset aKbcontrol  +
call StrToID  +
cmp bx ax +
jnz loc_10194D0  +
mov eax [esi+28h] +
mov [edi+7Ch] eax +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
xor eax eax +
mov esi ecx +
mov [edi] al +
cmp [esi+86h] al +
jz loc_1019546  +
cmp byte_1027338 al +
jnz loc_1019546  +
cmp byte_10266B6 al +
jz loc_1019546  +
push esi  +
push 2  +
push [ebp+arg_4]  +
call sub_101C6C7  +
test eax eax +
jnz loc_1019546  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101CC96  +
push esi  +
push 2  +
push [ebp+arg_4]  +
call sub_101C6C7  +
mov byte ptr [edi] 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+86h] 0 +
jz loc_1019655  +
cmp byte_1027338 0 +
jnz loc_1019655  +
push esi  +
mov esi [ebp+arg_C] +
test esi esi +
jz loc_1019654  +
cmp [ebp+arg_8] 0 +
jz loc_101958C  +
cmp [ebp+arg_8] 1 +
jnz loc_1019654  +
push ebx  +
mov ebx ds:GetTickCount +
push edi  +
lea edi [ecx+80h] +
call ebx  +
mov ecx eax +
sub ecx [edi] +
mov eax 438h +
cmp ecx eax +
jnb loc_10195AD  +
call ebx  +
sub eax [edi] +
mov bl 0C8h +
cmp eax 50h +
jbe loc_10195D1  +
push 3E8h  +
mov ecx 438h +
sub ecx eax +
push ecx  +
push 0AFh  +
call ds:MulDiv  +
mov ebx eax +
add bl 19h +
test dword ptr [esi+14h] 1F0000h +
mov edi [esi+10h] +
jnz loc_1019619  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+80h]  +
push dword_10274FC  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+28h]  +
test al al +
jnz loc_1019619  +
mov edi [edi+28h] +
test edi edi +
jz loc_1019652  +
mov edi [edi+28h] +
test edi edi +
jz loc_1019652  +
movzx edi word ptr [edi+58h] +
push offset a39  +
call StrToID  +
cmp ax di +
jnz loc_1019652  +
mov ecx [esi+0Ch] +
sub ecx [esi+4] +
mov eax [esi+8] +
sub eax [esi] +
mov byte ptr [ebp+arg_8] 0 +
mov byte ptr [ebp+arg_8+1] 0 +
mov byte ptr [ebp+arg_8+2] bl +
mov byte ptr [ebp+arg_8+3] 1 +
push [ebp+arg_8]  +
push ecx  +
push eax  +
push 0  +
push 0  +
push dword ptr [esi+18h]  +
push ecx  +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call ds:GdiAlphaBlend  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeletePen  +
test [ebp+arg_0] 1 +
jz loc_1019679  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1003B00 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
lea ecx [ebp+var_4] +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_1003D5C +
mov eax [eax] +
push ecx  +
push eax  +
call GdipCreateSolidFill  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1003D5C +
call GdipDeleteBrush  +
test byte ptr [ebp+8] 1 +
jz loc_10196FF  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetPenColor  +
push eax  +
mov ecx esi +
call sub_101930C  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call GdipCreateFromHDC  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipDrawLineI  +
push eax  +
mov ecx esi +
call sub_101930C  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push dword ptr [esi]  +
call GdipFillRectangleI  +
push eax  +
mov ecx esi +
call sub_101930C  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
and [ebp+var_10] 0 +
cmp dword_102711C 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
mov esi 10000h +
mov ebx 80000000h +
jz loc_1019839  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10197F5  +
test al al +
jnz loc_1019839  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019839  +
mov eax dword_1027110 +
mov edi dword_1027114 +
mov ecx eax +
mov edx edi +
and ecx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1019839  +
cmp edx edi +
jnz loc_1019839  +
push offset dword_1003650  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov edi [ebp+var_C] +
mov ecx edi +
call ?GetPressed@Button@DirectUI@@QAE_NXZ  +
mov [ebp+var_1] al +
mov al [edi+5Ch] +
shr al 6 +
and al 1 +
mov [ebp+var_2] al +
call ds:GetTickCount  +
mov ecx [ebp+var_C] +
mov edi eax +
sub edi [ecx+80h] +
call sub_1017F34  +
cmp [ebp+var_1] 0 +
mov [ebp+var_14] eax +
jnz loc_101987A  +
cmp edi 50h +
jnb loc_101987A  +
mov [ebp+var_1] 1 +
mov eax [ebp+var_C] +
cmp dword ptr [eax+7Ch] 0 +
jnz loc_101988D  +
mov ecx eax +
call sub_10194C3  +
mov eax [ebp+var_C] +
cmp byte_1027338 0 +
jz loc_10198BD  +
mov ecx [eax+7Ch] +
test ecx ecx +
jz loc_10198B4  +
cmp byte ptr [ecx+172h] 0 +
jz loc_10198B4  +
cmp [ebp+var_14] 1 +
jz loc_10198B0  +
mov [ebp+var_1] 0 +
mov [ebp+var_2] 0 +
and dword ptr [eax+80h] 0 +
jmp loc_10198CA  +
cmp byte_10266B4 0 +
jnz loc_10198CA  +
mov [ebp+var_2] 0 +
mov edi [ebp+var_C] +
mov ecx edi +
call ?GetCaptured@Button@DirectUI@@QAE_NXZ  +
push 2  +
pop ecx  +
test al al +
jz loc_10198EA  +
cmp [ebp+var_14] 1 +
jnz loc_10198EA  +
mov [ebp+var_8] ecx +
jmp loc_1019A2D  +
cmp [ebp+var_2] 1 +
jz loc_10198FF  +
cmp [ebp+var_1] 1 +
jz loc_1019972  +
and [ebp+var_8] 0 +
jmp loc_1019A2D  +
cmp [ebp+var_1] 1 +
jz loc_10199CC  +
cmp dword_102711C 0 +
mov [ebp+var_8] 1 +
jz loc_1019A2D  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101992E  +
test al al +
jnz loc_1019A2D  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019A2D  +
mov eax dword_1027110 +
mov ecx eax +
and ecx esi +
mov esi dword_1027114 +
mov edx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1019A2D  +
cmp edx esi +
jnz loc_1019A2D  +
push offset dword_1003670  +
jmp loc_1019A1C  +
cmp dword_102711C 0 +
mov [ebp+var_8] ecx +
jz loc_1019A2D  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1019993  +
test al al +
jnz loc_1019A2D  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019A2D  +
mov eax dword_1027110 +
mov ecx eax +
and ecx esi +
mov esi dword_1027114 +
mov edx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1019A2D  +
cmp edx esi +
jnz loc_1019A2D  +
push offset dword_1003690  +
jmp loc_1019A1C  +
cmp dword_102711C 0 +
mov [ebp+var_8] 3 +
jz loc_1019A2D  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_10199E9  +
test al al +
jnz loc_1019A2D  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019A2D  +
mov eax dword_1027110 +
mov ecx eax +
and ecx esi +
mov esi dword_1027114 +
mov edx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1019A2D  +
cmp edx esi +
jnz loc_1019A2D  +
push offset dword_10036B0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov ecx edi +
call ?GetCaptured@Button@DirectUI@@QAE_NXZ  +
test al al +
jz loc_1019A4F  +
cmp [ebp+var_8] 0 +
jz loc_1019A45  +
cmp [ebp+var_8] 1 +
jnz loc_1019A4F  +
push 0  +
mov ecx edi +
call ?SetCaptured@Button@DirectUI@@QAEJ_N@Z  +
cmp byte_1027480 0 +
jnz loc_1019A6C  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_101938E  +
mov [ebp+var_10] eax +
mov byte_1027480 1 +
mov esi [ebp+arg_4] +
mov eax [ebp+var_C] +
mov ecx [eax+7Ch] +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
test ecx ecx +
jz loc_1019A92  +
cmp byte_10266B7 0 +
jz loc_1019A92  +
lea eax [ebp+var_28] +
push eax  +
call sub_100DCE3  +
and [ebp+var_14] 0 +
and [ebp+var_18] 0 +
cmp byte_10266B5 0 +
jz loc_1019AB4  +
push 0  +
push [ebp+var_8]  +
lea eax [ebp+var_28] +
push eax  +
call sub_101C6C7  +
mov [ebp+var_14] eax +
cmp [ebp+var_10] 0 +
lea esi [ebp+var_28] +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
mov byte ptr [ebp+arg_4+3] 0 +
jl loc_1019ADE  +
mov ecx [ebp+var_C] +
lea eax [ebp+arg_4+3] +
push eax  +
lea eax [ebp+rc] +
push eax  +
push [ebp+arg_0]  +
call sub_10194F5  +
mov [ebp+var_18] eax +
cmp [ebp+var_14] 0 +
jnz loc_1019B8A  +
cmp [ebp+var_10] 0 +
mov esi [ebp+arg_0] +
jl loc_1019B38  +
cmp [ebp+var_8] 0 +
jnz loc_1019B38  +
cmp byte_10266B5 0 +
jz loc_1019B38  +
xor edi edi +
push edi  +
lea eax [ebp+rc] +
push eax  +
push esi  +
call sub_101CC96  +
test eax eax +
jl loc_1019B38  +
push edi  +
push edi  +
lea eax [ebp+rc] +
push eax  +
call sub_101C6C7  +
mov esi [eax+18h] +
mov [ebp+var_14] eax +
mov eax [ebp-34h] +
neg eax  +
push eax  +
mov eax [ebp+rc] +
neg eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:OffsetRect  +
push esi  +
call ds:GetStretchBltMode  +
cmp eax 3 +
jz loc_1019B4D  +
push 3  +
push esi  +
call ds:SetStretchBltMode  +
cmp [ebp+var_10] 0 +
mov edi [ebp+var_C] +
jl loc_1019B84  +
push [ebp+var_8]  +
mov eax [edi] +
push esi  +
lea ecx [ebp+rc] +
push ecx  +
mov ecx edi +
call dword ptr [eax+0ACh]  +
mov [ebp+var_10] eax +
test eax eax +
jl loc_1019B84  +
push [ebp+var_8]  +
mov eax [edi] +
push esi  +
lea ecx [ebp+rc] +
push ecx  +
mov ecx edi +
call dword ptr [eax+0A8h]  +
mov [ebp+var_10] eax +
cmp [ebp+var_14] 0 +
jz loc_1019BC8  +
mov eax [ebp+var_14] +
mov edx [eax+0Ch] +
sub edx [eax+4] +
mov ecx [eax+8] +
sub ecx [eax] +
mov byte ptr [ebp+var_14] 0 +
mov byte ptr [ebp+var_14+1] 0 +
mov byte ptr [ebp+var_14+2] 0FFh +
mov byte ptr [ebp+var_14+3] 1 +
push [ebp+var_14]  +
push edx  +
push ecx  +
push 0  +
push 0  +
push dword ptr [eax+18h]  +
push edx  +
push ecx  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push [ebp+arg_0]  +
call ds:GdiAlphaBlend  +
mov edi [ebp+var_C] +
cmp [ebp+var_10] 0 +
jl loc_1019C9E  +
mov esi [ebp+var_18] +
test esi esi +
jz loc_1019C9E  +
cmp byte ptr [ebp+arg_4+3] 0 +
jz loc_1019C10  +
mov eax [esi+4] +
mov ecx [esi] +
mov edx [esi+0Ch] +
push 0CC0020h  +
push eax  +
push ecx  +
push [ebp+arg_0]  +
sub edx eax +
mov eax [esi+8] +
push edx  +
sub eax ecx +
push eax  +
push 0  +
push 0  +
push dword ptr [esi+18h]  +
call ds:BitBlt  +
jmp loc_1019C9E  +
and [ebp+arg_4] 0 +
cmp dword_10266B0 0 +
jnz loc_1019C6C  +
mov eax [ebp+var_1C] +
push 0Ah  +
push 0Ah  +
inc eax  +
push eax  +
mov eax [ebp+var_20] +
inc eax  +
push eax  +
push [ebp+var_24]  +
push [ebp+var_28]  +
call ds:CreateRoundRectRgn  +
mov ecx [edi+7Ch] +
mov [ebp+arg_4] eax +
call ?GetY@Element@DirectUI@@QAEHXZ  +
mov ecx [edi+7Ch] +
push eax  +
call ?GetX@Element@DirectUI@@QAEHXZ  +
push eax  +
push [ebp+arg_4]  +
call ds:OffsetRgn  +
push [ebp+arg_0]  +
call ds:SaveDC  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:SelectClipRgn  +
mov eax [edi] +
push esi  +
push [ebp+var_8]  +
lea ecx [ebp+var_28] +
push ecx  +
push [ebp+arg_0]  +
mov ecx edi +
call dword ptr [eax+0B0h]  +
cmp dword_10266B0 0 +
jnz loc_1019C9E  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
call ds:RestoreDC  +
push [ebp+arg_4]  +
call ds:DeleteObject  +
cmp [ebp+var_8] 1 +
jnz loc_1019D0C  +
cmp dword_102711C 0 +
jz loc_1019E39  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1019CC2  +
test al al +
jnz loc_1019DD9  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019DD9  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_1019DD9  +
cmp ecx esi +
jnz loc_1019DD9  +
push offset dword_1003680  +
jmp loc_1019DC8  +
cmp [ebp+var_8] 2 +
jnz loc_1019D6F  +
cmp dword_102711C 0 +
jz loc_1019E39  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1019D30  +
test al al +
jnz loc_1019DD9  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019DD9  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_1019DD9  +
cmp ecx esi +
jnz loc_1019DD9  +
push offset dword_10036A0  +
jmp loc_1019DC8  +
cmp [ebp+var_8] 3 +
jnz loc_1019DD9  +
cmp dword_102711C 0 +
jz loc_1019E39  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1019D8F  +
test al al +
jnz loc_1019DD9  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019DD9  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_1019DD9  +
cmp ecx esi +
jnz loc_1019DD9  +
push offset dword_10036C0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
cmp dword_102711C 0 +
jz loc_1019E39  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_1019DEF  +
test al al +
jnz loc_1019E39  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_1019E39  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_1019E39  +
cmp ecx esi +
jnz loc_1019E39  +
push offset dword_1003660  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword_1027350 0 +
push 8  +
call GdipAlloc  +
test eax eax +
jz loc_1019E79  +
mov ecx dword_1027350 +
fld1   +
push ecx  +
fstp  [esp+0Ch+var_C] +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
call sub_10192D0  +
jmp loc_1019E7B  +
xor eax eax +
and dword_1027358 0 +
push 0Ch  +
mov dword_102734C eax +
call GdipAlloc  +
test eax eax +
jz loc_1019EA8  +
mov ecx dword_1027358 +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
call sub_101969F  +
jmp loc_1019EAA  +
xor eax eax +
mov dword_1027354 eax +
leave   +
retn   +
***
mov ecx dword_102734C +
test ecx ecx +
jz loc_1019EC7  +
push 1  +
call sub_101965E  +
mov ecx dword_1027354 +
and dword_102734C 0 +
test ecx ecx +
jz loc_1019EDE  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword_1027354 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_102734C 0 +
jnz loc_1019EFE  +
call sub_1019E45  +
push esi  +
mov esi [ebp+arg_0] +
cmp esi dword_1027350 +
jz loc_1019F22  +
mov ecx dword_102734C +
lea eax [ebp+arg_0] +
push eax  +
mov [ebp+arg_0] esi +
call sub_101970B  +
mov dword_1027350 esi +
mov eax dword_102734C +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1027354 0 +
jnz loc_1019F44  +
call sub_1019E45  +
push esi  +
mov esi [ebp+arg_0] +
cmp esi dword_1027358 +
jz loc_1019F68  +
mov ecx dword_1027354 +
lea eax [ebp+arg_0] +
push eax  +
mov [ebp+arg_0] esi +
call sub_10192A9  +
mov dword_1027358 esi +
mov eax dword_1027354 +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ?GetClassInfoPtr@Button@DirectUI@@SGPAUIClassInfo@2@XZ  +
***
mov edi edi +
push ecx  +
call sub_101840B  +
and dword_1027334 0 +
retn   +
***
call __EH_prolog3  +
push 8  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_1019FC1  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1019685  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneBrush  +
push eax  +
mov ecx esi +
call sub_101928D  +
push 0Ch  +
call GdipAlloc  +
test eax eax +
jz loc_101A010  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_1003D5C +
mov [eax+8] ecx +
mov [eax+4] edx +
mov esi eax +
jmp loc_101A012  +
xor esi esi +
test esi esi +
jnz loc_101A01E  +
push dword ptr [ebp-4]  +
call GdipDeleteBrush  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
xor edi edi +
call sub_1019EEB  +
mov ecx [eax+4] +
mov [eax+4] edi +
cmp ecx edi +
jnz loc_101A065  +
push esi  +
push [ebp+arg_14]  +
mov esi [ebp+arg_0] +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call sub_101975E  +
mov eax [esi+4] +
mov [esi+4] edi +
pop esi  +
cmp eax edi +
jz loc_101A06A  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
xor edi edi +
call sub_1019F31  +
mov ecx [eax+8] +
mov [eax+8] edi +
cmp ecx edi +
jnz loc_101A0B3  +
push esi  +
push [ebp+arg_14]  +
mov esi [ebp+arg_0] +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call sub_1019790  +
mov eax [esi+4] +
mov [esi+4] edi +
pop esi  +
cmp eax edi +
jz loc_101A0B8  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop ebp  +
retn 18h  +
***
dec dword_1027348  +
jnz locret_101A0D1  +
jmp loc_1019EB6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_1019F97  +
mov esi eax +
test esi esi +
jz loc_101A119  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101A111  +
mov [edi] esi +
jmp loc_101A11E  +
push esi  +
call sub_101840B  +
jmp loc_101A11E  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
call __EH_prolog3  +
mov [ebp-14h] ecx +
mov esi [ebp+8] +
xor edi edi +
mov [ebp-10h] edi +
cmp esi edi +
jnz loc_101A153  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_101A24A  +
cmp dword_10266B0 edi +
jz loc_101A24A  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_1019731  +
mov eax [ebp-18h] +
mov [ebp-4] edi +
mov [ebp-18h] edi +
cmp eax edi +
jz loc_101A17E  +
mov dword ptr [ebp-10h] 80004005h +
push 1Ch  +
mov ecx offset unk_1027370 +
call sub_101E294  +
mov edi ds:SetPixel +
mov ecx eax +
shr ecx 8 +
movzx ebx cl +
movzx ecx al +
shl ecx 8 +
shr eax 10h +
or ebx ecx +
movzx eax al +
shl ebx 8 +
or ebx eax +
push ebx  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [esi+0Ch] +
push ebx  +
dec eax  +
dec eax  +
push eax  +
push dword ptr [esi]  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [esi+8] +
push ebx  +
push dword ptr [esi+4]  +
dec eax  +
dec eax  +
push eax  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [esi+0Ch] +
dec eax  +
dec eax  +
push ebx  +
push eax  +
mov eax [esi+8] +
dec eax  +
dec eax  +
push eax  +
push dword ptr [ebp+0Ch]  +
call edi  +
cmp dword ptr [ebp-10h] 0 +
jl loc_101A242  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
dec eax  +
dec ecx  +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov edi offset unk_1027370 +
push eax  +
push 1Ch  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101A242  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
dec eax  +
push eax  +
dec ecx  +
dec ecx  +
push ecx  +
push eax  +
push dword ptr [esi]  +
mov ecx edi +
push 1Ch  +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
push dword ptr [ebp-1Ch]  +
call GdipDeleteGraphics  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov [ebp-14h] ecx +
mov esi [ebp+8] +
xor edi edi +
mov [ebp-10h] edi +
cmp esi edi +
jnz loc_101A281  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_101A43C  +
cmp dword_10266B0 edi +
jz loc_101A429  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_1019731  +
mov eax [ebp-18h] +
mov [ebp-4] edi +
mov [ebp-18h] edi +
cmp eax edi +
jz loc_101A2B1  +
mov dword ptr [ebp-10h] 80004005h +
jmp loc_101A41F  +
mov eax [esi+4] +
mov edx [esi+0Ch] +
mov edi [ebp+10h] +
mov ecx [esi] +
imul edi edi +
sub edx eax +
dec edx  +
dec edx  +
push edx  +
mov edx [esi+8] +
sub edx ecx +
dec edx  +
dec edx  +
push edx  +
push eax  +
push ecx  +
lea eax [edi+6] +
mov ebx offset unk_1027370 +
push eax  +
mov ecx ebx +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A076  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101A41F  +
mov ecx [esi+0Ch] +
mov eax [esi] +
sub ecx 3 +
push ecx  +
mov ecx [esi+4] +
push eax  +
inc ecx  +
push ecx  +
push eax  +
push edi  +
mov ecx ebx +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101A41F  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
sub ecx eax +
dec ecx  +
push ecx  +
inc eax  +
push 1  +
push eax  +
mov eax [esi] +
inc eax  +
push eax  +
lea eax [edi+1] +
push eax  +
mov ecx ebx +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A076  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101A41F  +
mov eax [esi+4] +
mov ecx [esi+8] +
push eax  +
sub ecx 3 +
push ecx  +
push eax  +
mov eax [esi] +
inc eax  +
push eax  +
lea eax [edi+2] +
push eax  +
mov ecx ebx +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101A41F  +
mov eax [esi+4] +
mov ecx [esi+8] +
inc eax  +
push eax  +
dec ecx  +
dec ecx  +
push ecx  +
push eax  +
mov eax [esi] +
inc eax  +
inc eax  +
push eax  +
lea eax [edi+3] +
push eax  +
mov ecx ebx +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101A41F  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
sub ecx 3 +
push ecx  +
mov ecx [esi+4] +
add eax 0FFFFFFFEh +
push eax  +
inc ecx  +
push ecx  +
push eax  +
lea eax [edi+4] +
push eax  +
mov ecx ebx +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101A41F  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
add eax 0FFFFFFFEh +
push eax  +
sub ecx 3 +
push ecx  +
push eax  +
mov eax [esi] +
inc eax  +
push eax  +
add edi 5 +
push edi  +
mov ecx ebx +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
push dword ptr [ebp-1Ch]  +
call GdipDeleteGraphics  +
jmp loc_101A43C  +
push 1  +
push dword ptr [ebp+10h]  +
mov ecx offset unk_10273F8 +
push esi  +
push dword ptr [ebp+0Ch]  +
call sub_101CC16  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0Button@DirectUI@@QAE@XZ  +
xor eax eax +
mov [esi+7Ch] eax +
mov [esi+80h] eax +
mov [esi+84h] al +
mov [esi+85h] al +
mov [esi+86h] al +
mov dword ptr [esi] offset off_1003B50 +
inc dword_1027348  +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003B50 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+87h] +
call sub_101A0C4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1Button@DirectUI@@UAE@XZ  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ?GetClassInfoPtr@Button@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jnz loc_101A4F5  +
call ?Register@Button@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_101A4FD  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_101A595  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
mov ebx eax +
push ebx  +
mov [ebp-14h] ebx +
call ds:EnterCriticalSection  +
xor edi edi +
mov [ebp-4] edi +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_101A582  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
mov dword_1027334 edi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101A0D7  +
mov edi eax +
test edi edi +
jl loc_101A58A  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_101A579  +
mov dword_1027334 esi +
jmp loc_101A58A  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_101A58A  +
mov eax [ebp-10h] +
mov dword_1027334 eax +
test ebx ebx +
jz loc_101A595  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax edi +
call __EH_epilog3  +
retn 14h  +
***
call __EH_prolog3  +
push 88h  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101A5D1  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101A44C  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A494  +
test byte ptr [ebp+8] 1 +
jz loc_101A5F8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
call sub_101A5A4  +
mov esi eax +
test esi esi +
jz loc_101A644  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@Button@DirectUI@@QAEJIPAVElement@2@PAK@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101A638  +
mov [edi] esi +
jmp loc_101A649  +
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_101A649  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
push offset dword_102747C  +
push offset aCkeyboardkey  +
push offset __ImageBase  +
call sub_101A4D1  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_102733C +
test eax eax +
jz loc_101A686  +
pop ebp  +
jmp eax  +
***
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call sub_101A604  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101A675  +
***
call ds:KillTimer  +
call sub_101C751  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_101A709  +
mov eax [esi] +
cmp eax edi +
jz loc_101A728  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_101A818  +
cmp [esi+8] edi +
ja loc_101A6F7  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_101A725  +
call sub_100D7D4  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_100540D  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101A74E  +
push 80004005h  +
call loc_100540D  +
cmp eax [ecx] +
jz loc_101A77E  +
mov edx [eax] +
push esi  +
test edx edx +
jnz loc_101A761  +
mov edx [eax+4] +
mov [ecx+4] edx +
jmp loc_101A767  +
mov esi [eax+4] +
mov [edx+4] esi +
mov edx [eax+4] +
mov esi [eax] +
mov [edx] esi +
mov edx [ecx] +
mov [edx+4] eax +
mov edx [ecx] +
and dword ptr [eax+4] 0 +
mov [eax] edx +
mov [ecx] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetTickCount  +
mov [esi+80h] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0Ah  +
lea ecx [esi+4] +
call sub_101A6C7  +
cmp dword_10274B8 0 +
jnz loc_101A7CF  +
mov eax [ebp+arg_0] +
mov dword_10274B8 esi +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_101A6AF  +
add esi 4 +
mov ecx esi +
call loc_101A6ED  +
and dword_10274B8 0 +
mov ecx esi +
call loc_101A6ED  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_0] +
mov [eax] edx +
dec dword ptr [ecx+8]  +
mov [ecx+10h] eax +
jnz loc_101A832  +
call loc_101A6ED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101A851  +
push 80004005h  +
call loc_100540D  +
push esi  +
cmp eax [ecx] +
jnz loc_101A85C  +
mov edx [eax] +
mov [ecx] edx +
jmp loc_101A863  +
mov edx [eax+4] +
mov esi [eax] +
mov [edx] esi +
cmp eax [ecx+4] +
jnz loc_101A870  +
mov edx [eax+4] +
mov [ecx+4] edx +
jmp loc_101A878  +
mov edx [eax] +
mov esi [eax+4] +
mov [edx+4] esi +
push eax  +
call sub_101A818  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_101A8AE  +
push [ebp+arg_0]  +
lea ecx [esi+4] +
call sub_101A83B  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_101A8AE  +
mov ecx esi +
call sub_101A6AF  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea edi [ebx+4] +
mov eax [edi] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101A9B1  +
push [ebp+var_4]  +
mov ecx edi +
call sub_101C3D2  +
mov esi [eax] +
mov edi [esi+80h] +
call ds:GetTickCount  +
sub eax edi +
cmp eax 3E8h +
jbe loc_101A962  +
mov byte ptr [esi+86h] 0 +
cmp dword_102711C 0 +
jz loc_101A962  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101A911  +
test al al +
jnz loc_101A962  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov edx 10000h +
and eax edx +
and ecx 80000000h +
or eax ecx +
jz loc_101A962  +
mov eax dword_1027110 +
mov edi dword_1027114 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx 80000000h +
cmp ecx eax +
jnz loc_101A962  +
cmp edx edi +
jnz loc_101A962  +
push offset dword_10037A0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
push dword ptr [esi+4]  +
call ds:InvalidateGadget  +
push 180h  +
push 0  +
push 0  +
push dword ptr [ebx]  +
call ds:RedrawWindow  +
lea eax [ebp+var_4] +
lea edi [ebx+4] +
push eax  +
mov ecx edi +
call sub_101C3AA  +
cmp [ebp+var_4] 0 +
jnz loc_101A8D3  +
jmp loc_101A9B1  +
push esi  +
mov ecx edi +
call sub_101C3D2  +
mov eax [eax] +
cmp byte ptr [eax+86h] 0 +
jnz loc_101A9B8  +
push esi  +
mov ecx ebx +
call sub_101A888  +
mov esi [ebx+8] +
test esi esi +
jnz loc_101A996  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_10274B8 +
pop ebp  +
jmp sub_101A8B8  +
***
mov edi edi +
push esi  +
push edi  +
push offset sub_101A9C6  +
push 32h  +
xor edi edi +
push edi  +
push edi  +
mov esi ecx +
call ds:SetTimer  +
mov [esi+1Ch] eax +
call ds:GetTickCount  +
push eax  +
push edi  +
push 113h  +
push edi  +
mov ecx esi +
call sub_101A8B8  +
cmp [esi+1Ch] edi +
jz loc_101AA14  +
xor eax eax +
jmp loc_101AA19  +
mov eax 80004005h +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ebx ecx +
mov ecx esi +
mov [ebp+var_C] ebx +
call dword ptr [eax+80h]  +
cmp dword_10274FC eax +
jz loc_101AA55  +
mov ecx esi +
call sub_1017F34  +
cmp eax 1 +
jz loc_101ABCE  +
add ebx 4 +
push edi  +
mov edi [ebx] +
mov [ebp+var_4] edi +
jmp loc_101AA7F  +
push edi  +
mov ecx ebx +
call sub_101C3D2  +
mov ecx [eax] +
mov [ebp+var_8] ecx +
cmp ecx esi +
jz loc_101AA85  +
lea eax [ebp+var_4] +
push eax  +
mov ecx ebx +
call sub_101C3AA  +
mov edi [ebp+var_4] +
test edi edi +
jnz loc_101AA60  +
jmp loc_101AA9C  +
call sub_101A791  +
push edi  +
mov ecx ebx +
call sub_101A738  +
cmp [ebp+var_8] 0 +
jnz loc_101ABCD  +
mov ecx esi +
call sub_101A791  +
mov byte ptr [esi+86h] 1 +
cmp dword_102711C 0 +
mov edi 10000h +
mov esi 80000000h +
jz loc_101AB10  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101AACA  +
test al al +
jnz loc_101AB10  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101AB10  +
mov eax dword_1027110 +
mov edx dword_1027114 +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_101AB10  +
cmp edx dword_1027114 +
jnz loc_101AB10  +
push offset dword_1003790  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx ebx +
call sub_101CBC2  +
mov ecx [ebp+var_C] +
mov eax [ecx+0Ch] +
cmp eax 1 +
jnz loc_101AB30  +
call sub_101A9DC  +
jmp loc_101ABCD  +
cmp eax 3 +
jbe loc_101ABCD  +
mov eax [ebx] +
and [ebp+arg_0] 0 +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101AB73  +
cmp [ebp+arg_0] 3 +
jb loc_101AB5F  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_101C3D2  +
mov eax [eax] +
and dword ptr [eax+80h] 0 +
inc [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
mov ecx ebx +
call sub_101C3AA  +
cmp [ebp+var_4] 0 +
jnz loc_101AB46  +
cmp dword_102711C 0 +
jz loc_101ABCD  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101AB89  +
test al al +
jnz loc_101ABCD  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101ABCD  +
mov eax dword_1027110 +
mov ecx eax +
and ecx edi +
mov edi dword_1027114 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101ABCD  +
cmp edx edi +
jnz loc_101ABCD  +
push offset dword_10037B0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp dword_102711C 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_C] edi +
mov esi 10000h +
mov ebx 80000000h +
jz loc_101AC50  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101AC09  +
test al al +
jnz loc_101AC50  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101AC50  +
mov eax dword_1027110 +
mov edi dword_1027114 +
mov ecx eax +
mov edx edi +
and ecx esi +
and edx ebx +
cmp ecx eax +
jnz loc_101AC4D  +
cmp edx edi +
jnz loc_101AC4D  +
push offset dword_10036F0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov edi [ebp+var_C] +
mov ecx edi +
call ?GetPressed@Button@DirectUI@@QAE_NXZ  +
mov [ebp+var_1] al +
mov al [edi+5Ch] +
shr al 6 +
and al 1 +
mov [ebp+var_2] al +
call ds:GetTickCount  +
sub eax [edi+80h] +
cmp [ebp+var_1] 0 +
jnz loc_101AC81  +
cmp eax 50h +
jnb loc_101AC81  +
mov [ebp+var_1] 1 +
cmp dword ptr [edi+7Ch] 0 +
jnz loc_101AC8E  +
mov ecx edi +
call sub_10194C3  +
cmp byte_1027338 0 +
jnz loc_101ACB4  +
cmp byte_10266B4 0 +
jnz loc_101ACA4  +
mov [ebp+var_2] 0 +
cmp [ebp+var_2] 1 +
jz loc_101ACBD  +
cmp [ebp+var_1] 1 +
jz loc_101AD96  +
and [ebp+var_8] 0 +
jmp loc_101AF2C  +
cmp [ebp+var_1] 1 +
jz loc_101AE65  +
cmp dword_102711C 0 +
mov [ebp+var_8] 1 +
jz loc_101AF2C  +
mov dl byte_1027120 +
cmp dl 4 +
jnb loc_101ACEA  +
test dl dl +
jnz loc_101AD37  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101AD37  +
mov edi dword_1027110 +
mov ecx dword_1027114 +
mov eax edi +
and eax esi +
and ecx ebx +
cmp eax edi +
jnz loc_101AD37  +
cmp ecx dword_1027114 +
jnz loc_101AD37  +
push offset dword_1003710  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov dl byte_1027120 +
cmp dword_102711C 0 +
jz loc_101AF2C  +
cmp dl 4 +
jnb loc_101AD51  +
test dl dl +
jnz loc_101AF2C  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101AF2C  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_101AF2C  +
cmp ecx esi +
jnz loc_101AF2C  +
push offset dword_1003670  +
jmp loc_101AF1B  +
cmp dword_102711C 0 +
mov [ebp+var_8] 2 +
jz loc_101AF2C  +
mov dl byte_1027120 +
cmp dl 4 +
jnb loc_101ADB9  +
test dl dl +
jnz loc_101AE06  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101AE06  +
mov edi dword_1027110 +
mov ecx dword_1027114 +
mov eax edi +
and eax esi +
and ecx ebx +
cmp eax edi +
jnz loc_101AE06  +
cmp ecx dword_1027114 +
jnz loc_101AE06  +
push offset dword_1003730  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov dl byte_1027120 +
cmp dword_102711C 0 +
jz loc_101AF2C  +
cmp dl 4 +
jnb loc_101AE20  +
test dl dl +
jnz loc_101AF2C  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101AF2C  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_101AF2C  +
cmp ecx esi +
jnz loc_101AF2C  +
push offset dword_1003690  +
jmp loc_101AF1B  +
cmp dword_102711C 0 +
mov [ebp+var_8] 3 +
jz loc_101AF2C  +
mov dl byte_1027120 +
cmp dl 4 +
jnb loc_101AE88  +
test dl dl +
jnz loc_101AED5  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101AED5  +
mov edi dword_1027110 +
mov ecx dword_1027114 +
mov eax edi +
and eax esi +
and ecx ebx +
cmp eax edi +
jnz loc_101AED5  +
cmp ecx dword_1027114 +
jnz loc_101AED5  +
push offset dword_1003750  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov dl byte_1027120 +
cmp dword_102711C 0 +
jz loc_101AF2C  +
cmp dl 4 +
jnb loc_101AEE7  +
test dl dl +
jnz loc_101AF2C  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101AF2C  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_101AF2C  +
cmp ecx esi +
jnz loc_101AF2C  +
push offset dword_10036B0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
mov esi [ebp+arg_4] +
mov eax [ebp+var_C] +
mov ecx [eax+7Ch] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
test ecx ecx +
jz loc_101AF52  +
cmp byte_10266B7 0 +
jz loc_101AF52  +
lea eax [ebp+var_20] +
push eax  +
call sub_100DCE3  +
mov edi [ebp+var_C] +
lea eax [ebp-3] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_0]  +
mov ecx edi +
mov [ebp+var_3] 0 +
call sub_10194F5  +
push [ebp+arg_0]  +
mov esi eax +
mov [ebp+var_10] esi +
call ds:GetStretchBltMode  +
cmp eax 3 +
jz loc_101AF89  +
push 3  +
push [ebp+arg_0]  +
call ds:SetStretchBltMode  +
push [ebp+var_8]  +
mov eax [edi] +
push [ebp+arg_0]  +
lea ecx [ebp+var_20] +
push ecx  +
mov ecx edi +
call dword ptr [eax+0A8h]  +
test eax eax +
jl loc_101B0D1  +
push [ebp+var_8]  +
mov eax [edi] +
push [ebp+arg_0]  +
lea ecx [ebp+var_20] +
push ecx  +
mov ecx edi +
call dword ptr [eax+0ACh]  +
test eax eax +
jl loc_101B0D1  +
xor eax eax +
cmp esi eax +
jz loc_101B0D1  +
cmp [ebp+var_3] al +
jz loc_101AFFD  +
mov eax [esi+4] +
mov ecx [esi] +
mov edx [esi+0Ch] +
push 0CC0020h  +
push eax  +
push ecx  +
push [ebp+arg_0]  +
sub edx eax +
mov eax [esi+8] +
push edx  +
sub eax ecx +
push eax  +
push 0  +
push 0  +
push dword ptr [esi+18h]  +
call ds:BitBlt  +
jmp loc_101B0D1  +
mov [ebp+arg_4] eax +
mov [ebp+var_C] eax +
cmp dword_10266B0 eax +
jnz loc_101B098  +
mov eax [ebp+var_1C] +
mov ecx dword_10274F8 +
mov esi ds:CreateRoundRectRgn +
push 0Ah  +
push 0Ah  +
lea ecx [ecx+eax+1] +
push ecx  +
mov ecx [ebp+var_18] +
inc ecx  +
push ecx  +
push eax  +
push [ebp+var_20]  +
call esi  +
mov ecx dword_10274F4 +
mov [ebp+arg_4] eax +
mov eax [ebp+var_14] +
push 0Ah  +
push 0Ah  +
inc eax  +
push eax  +
mov eax [ebp+var_18] +
inc eax  +
push eax  +
mov eax [ebp+var_20] +
push [ebp+var_1C]  +
add ecx eax +
push ecx  +
call esi  +
push [ebp+arg_0]  +
mov [ebp+var_C] eax +
call ds:SaveDC  +
mov esi [ebp+arg_4] +
push 2  +
push [ebp+var_C]  +
push esi  +
push esi  +
call ds:CombineRgn  +
mov ecx [edi+7Ch] +
call ?GetY@Element@DirectUI@@QAEHXZ  +
mov ecx [edi+7Ch] +
push eax  +
call ?GetX@Element@DirectUI@@QAEHXZ  +
push eax  +
push esi  +
call ds:OffsetRgn  +
push esi  +
push [ebp+arg_0]  +
call ds:SelectClipRgn  +
mov esi [ebp+var_10] +
mov eax [edi] +
push esi  +
push [ebp+var_8]  +
lea ecx [ebp+var_20] +
push ecx  +
push [ebp+arg_0]  +
mov ecx edi +
call dword ptr [eax+0B0h]  +
cmp dword_10266B0 0 +
jnz loc_101B0D1  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
call ds:RestoreDC  +
push [ebp+arg_4]  +
mov esi ds:DeleteObject +
call esi  +
push [ebp+var_C]  +
call esi  +
cmp [ebp+var_8] 1 +
jnz loc_101B1A9  +
cmp dword_102711C 0 +
jz loc_101B3BA  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101B0F5  +
test al al +
jnz loc_101B141  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101B146  +
mov edx dword_1027110 +
mov edi dword_1027114 +
mov eax edx +
mov ecx edi +
and eax esi +
and ecx ebx +
cmp eax edx +
jnz loc_101B146  +
cmp ecx edi +
jnz loc_101B146  +
push offset dword_1003680  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
jmp loc_101B146  +
mov esi 10000h +
cmp dword_102711C 0 +
jz loc_101B3BA  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101B164  +
test al al +
jnz loc_101B35F  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101B35F  +
mov edx dword_1027110 +
mov edi dword_1027114 +
mov eax edx +
mov ecx edi +
and eax esi +
and ecx ebx +
cmp eax edx +
jnz loc_101B35F  +
cmp ecx edi +
jnz loc_101B35F  +
push offset dword_1003720  +
jmp loc_101B27C  +
cmp [ebp+var_8] 2 +
jnz loc_101B292  +
cmp dword_102711C 0 +
jz loc_101B3BA  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101B1CD  +
test al al +
jnz loc_101B219  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101B21E  +
mov edx dword_1027110 +
mov edi dword_1027114 +
mov eax edx +
mov ecx edi +
and eax esi +
and ecx ebx +
cmp eax edx +
jnz loc_101B21E  +
cmp ecx edi +
jnz loc_101B21E  +
push offset dword_10036A0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
jmp loc_101B21E  +
mov esi 10000h +
cmp dword_102711C 0 +
jz loc_101B3BA  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101B23C  +
test al al +
jnz loc_101B35F  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101B35F  +
mov edx dword_1027110 +
mov edi dword_1027114 +
mov eax edx +
mov ecx edi +
and eax esi +
and ecx ebx +
cmp eax edx +
jnz loc_101B35F  +
cmp ecx edi +
jnz loc_101B35F  +
push offset dword_1003740  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
jmp loc_101B35F  +
cmp [ebp+var_8] 3 +
jnz loc_101B35A  +
cmp dword_102711C 0 +
jz loc_101B3BA  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101B2B6  +
test al al +
jnz loc_101B302  +
mov eax dword_1027108 +
mov ecx dword_102710C +
mov esi 10000h +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101B307  +
mov edx dword_1027110 +
mov edi dword_1027114 +
mov eax edx +
mov ecx edi +
and eax esi +
and ecx ebx +
cmp eax edx +
jnz loc_101B307  +
cmp ecx edi +
jnz loc_101B307  +
push offset dword_10036C0  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
jmp loc_101B307  +
mov esi 10000h +
cmp dword_102711C 0 +
jz loc_101B3BA  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101B321  +
test al al +
jnz loc_101B35F  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101B35F  +
mov edx dword_1027110 +
mov edi dword_1027114 +
mov eax edx +
mov ecx edi +
and eax esi +
and ecx ebx +
cmp eax edx +
jnz loc_101B35F  +
cmp ecx edi +
jnz loc_101B35F  +
push offset dword_1003760  +
jmp loc_101B27C  +
mov esi 10000h +
cmp dword_102711C 0 +
jz loc_101B3BA  +
mov al byte_1027120 +
cmp al 4 +
jnb loc_101B375  +
test al al +
jnz loc_101B3BA  +
mov eax dword_1027108 +
mov ecx dword_102710C +
and eax esi +
and ecx ebx +
or eax ecx +
jz loc_101B3BA  +
mov edx dword_1027110 +
mov eax edx +
and eax esi +
mov esi dword_1027114 +
mov ecx esi +
and ecx ebx +
cmp eax edx +
jnz loc_101B3BA  +
cmp ecx esi +
jnz loc_101B3BA  +
push offset dword_1003700  +
push dword_10270F4  +
push dword_10270F0  +
call sub_1004479  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_10274F4 eax +
mov eax [ebp+arg_4] +
mov dword_10274F8 eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101A44C  +
mov dword ptr [esi] offset off_1003C20 +
and dword_10274F4 0 +
and dword_10274F8 0 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
mov dword ptr [ecx] offset off_1003C20 +
jmp sub_101A494  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1003CD8 +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
push 88h  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101B46D  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101B3E4  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov [ebp-14h] ecx +
mov esi [ebp+8] +
xor edi edi +
mov [ebp-10h] edi +
cmp esi edi +
jnz loc_101B4A1  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_101B612  +
cmp dword_10266B0 edi +
jz loc_101B5FC  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_1019731  +
mov eax [ebp-18h] +
mov [ebp-4] edi +
mov [ebp-18h] edi +
cmp eax edi +
jz loc_101B4CC  +
mov dword ptr [ebp-10h] 80004005h +
push 1Ch  +
mov ecx offset unk_1027370 +
call sub_101E294  +
mov edi ds:SetPixel +
mov ecx eax +
shr ecx 8 +
movzx ebx cl +
movzx ecx al +
shl ecx 8 +
shr eax 10h +
or ebx ecx +
movzx eax al +
shl ebx 8 +
or ebx eax +
push ebx  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [esi+4] +
mov ecx dword_10274F8 +
push ebx  +
lea eax [eax+ecx-2] +
push eax  +
push dword ptr [esi]  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [esi+0Ch] +
dec eax  +
push ebx  +
dec eax  +
push eax  +
mov eax [esi] +
add eax dword_10274F4 +
push eax  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [esi+8] +
push ebx  +
push dword ptr [esi+4]  +
dec eax  +
dec eax  +
push eax  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [esi+0Ch] +
dec eax  +
dec eax  +
push ebx  +
push eax  +
mov eax [esi+8] +
dec eax  +
dec eax  +
push eax  +
push dword ptr [ebp+0Ch]  +
call edi  +
cmp dword ptr [ebp-10h] 0 +
jl loc_101B5F2  +
mov eax [esi+4] +
mov ecx dword_10274F8 +
mov edx dword_10274F4 +
lea ecx [eax+ecx-1] +
mov eax [esi] +
push ecx  +
lea edx [eax+edx-2] +
push edx  +
push ecx  +
push eax  +
mov edi offset unk_1027370 +
push 1Ch  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B5F2  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
dec eax  +
push eax  +
dec ecx  +
dec ecx  +
push ecx  +
push eax  +
mov eax [esi] +
add eax dword_10274F4 +
mov ecx edi +
push eax  +
push 1Ch  +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B5F2  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
dec eax  +
dec ecx  +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov ecx edi +
push eax  +
push 1Ch  +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
push dword ptr [ebp-1Ch]  +
call GdipDeleteGraphics  +
jmp loc_101B612  +
push dword_10274F8  +
mov ecx offset unk_10273F8 +
push dword_10274F4  +
call sub_101C0CD  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov [ebp-14h] ecx +
mov esi [ebp+8] +
xor edi edi +
mov [ebp-10h] edi +
cmp esi edi +
jnz loc_101B649  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_101B96F  +
cmp dword_10266B0 edi +
jz loc_101B95D  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_1019731  +
mov eax [ebp-18h] +
mov [ebp-4] edi +
mov [ebp-18h] edi +
cmp eax edi +
jz loc_101B679  +
mov dword ptr [ebp-10h] 80004005h +
jmp loc_101B953  +
mov edx dword_10274F8 +
mov eax [esi] +
mov ebx [ebp+10h] +
add edx 0FFFFFFFDh +
imul ebx ebx +
push edx  +
mov edx [esi+8] +
sub edx eax +
sub edx 3 +
push edx  +
mov edx [esi+4] +
inc edx  +
push edx  +
inc eax  +
lea ecx [ebx+6] +
push eax  +
push ecx  +
mov edi offset unk_1027370 +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A076  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov eax [esi+4] +
mov edx [esi+0Ch] +
mov ecx [esi] +
sub edx eax +
mov eax dword_10274F8 +
sub edx eax +
push edx  +
mov edx [esi+8] +
sub edx ecx +
mov ecx dword_10274F4 +
sub edx ecx +
sub edx 3 +
push edx  +
mov edx [esi+4] +
lea eax [edx+eax-2] +
push eax  +
mov eax [esi] +
lea eax [eax+ecx+1] +
push eax  +
lea eax [ebx+6] +
push eax  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A076  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov ecx dword_10274F8 +
mov eax [esi+4] +
push 2  +
lea eax [ecx+eax-2] +
mov ecx dword_10274F4 +
push 2  +
push eax  +
mov eax [esi] +
lea eax [eax+ecx-1] +
push eax  +
lea eax [ebx+6] +
push eax  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A076  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov eax [esi+4] +
mov edx dword_10274F8 +
mov ecx [esi] +
lea edx [eax+edx-3] +
push edx  +
push ecx  +
inc eax  +
push eax  +
push ecx  +
push ebx  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov ecx dword_10274F4 +
mov eax [esi] +
add eax ecx +
mov ecx [esi+0Ch] +
sub ecx 3 +
push ecx  +
mov ecx [esi+4] +
add ecx dword_10274F8 +
push eax  +
push ecx  +
push eax  +
push ebx  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov edx [esi+0Ch] +
mov ecx dword_10274F4 +
mov eax [esi] +
sub edx 3 +
push edx  +
mov edx [esi+4] +
add edx dword_10274F8 +
lea eax [eax+ecx+1] +
push eax  +
push edx  +
lea ecx [ebx+1] +
push eax  +
push ecx  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov eax [esi+4] +
mov edx dword_10274F8 +
mov ecx [esi] +
lea edx [eax+edx-3] +
inc ecx  +
push edx  +
push ecx  +
inc eax  +
push eax  +
push ecx  +
lea eax [ebx+1] +
push eax  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov eax [esi+4] +
mov ecx dword_10274F8 +
mov edx dword_10274F4 +
lea ecx [ecx+eax-2] +
mov eax [esi] +
push ecx  +
lea edx [eax+edx-2] +
push edx  +
push ecx  +
inc eax  +
push eax  +
lea eax [ebx+5] +
push eax  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
add eax 0FFFFFFFEh +
push eax  +
sub ecx 3 +
push ecx  +
mov ecx dword_10274F4 +
push eax  +
mov eax [esi] +
lea eax [eax+ecx+1] +
push eax  +
lea eax [ebx+5] +
push eax  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov eax [esi+4] +
mov ecx [esi+8] +
push eax  +
sub ecx 3 +
push ecx  +
push eax  +
mov eax [esi] +
inc eax  +
push eax  +
lea eax [ebx+2] +
push eax  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov eax [esi+4] +
mov ecx [esi+8] +
inc eax  +
push eax  +
dec ecx  +
dec ecx  +
push ecx  +
push eax  +
mov eax [esi] +
inc eax  +
inc eax  +
push eax  +
lea eax [ebx+3] +
push eax  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101B953  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
sub ecx 3 +
push ecx  +
mov ecx [esi+4] +
add eax 0FFFFFFFEh +
push eax  +
inc ecx  +
push ecx  +
push eax  +
add ebx 4 +
push ebx  +
mov ecx edi +
call sub_101E294  +
mov ecx [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_101A028  +
mov [ebp-10h] eax +
push dword ptr [ebp-1Ch]  +
call GdipDeleteGraphics  +
jmp loc_101B96F  +
push edi  +
push dword ptr [ebp+10h]  +
mov ecx offset unk_10273F8 +
push esi  +
push dword ptr [ebp+0Ch]  +
call sub_101CC16  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003C20 +
call sub_101A494  +
test byte ptr [ebp+8] 1 +
jz loc_101B99F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ecx  +
call sub_101840B  +
and dword_10274FC 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
call sub_101B440  +
mov esi eax +
test esi esi +
jz loc_101BA00  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@Button@DirectUI@@QAEJIPAVElement@2@PAK@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101B9F4  +
mov [edi] esi +
jmp loc_101BA05  +
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_101BA05  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
call __EH_prolog3  +
push 8  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101BA3D  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101B426  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10274F0 +
test eax eax +
jz loc_101BA5B  +
pop ebp  +
jmp eax  +
***
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call sub_101B9C0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_101BA13  +
mov esi eax +
test esi esi +
jz loc_101BAB6  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101BAAE  +
mov [edi] esi +
jmp loc_101BABB  +
push esi  +
call sub_101840B  +
jmp loc_101BABB  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101BA4A  +
***
call __EH_prolog3  +
mov esi ?GetClassInfoPtr@Button@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jnz loc_101BAFD  +
call ?Register@Button@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_101BB05  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_101BB9D  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
mov ebx eax +
push ebx  +
mov [ebp-14h] ebx +
call ds:EnterCriticalSection  +
xor edi edi +
mov [ebp-4] edi +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_101BB8A  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
mov dword_10274FC edi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101BA74  +
mov edi eax +
test edi edi +
jl loc_101BB92  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_101BB81  +
mov dword_10274FC esi +
jmp loc_101BB92  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_101BB92  +
mov eax [ebp-10h] +
mov dword_10274FC eax +
test ebx ebx +
jz loc_101BB9D  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax edi +
call __EH_epilog3  +
retn 14h  +
***
xor eax eax +
push eax  +
push eax  +
push eax  +
push offset aCkeyboardlkey  +
push offset __ImageBase  +
call sub_101BAD9  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_1003D40 +
jz loc_101BBED  +
call GdipCreateBitmapFromStreamICM  +
jmp loc_101BBF2  +
call GdipCreateBitmapFromStream  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_101BC1F  +
mov ecx eax +
pop ebp  +
jmp loc_101BBC6  +
xor eax eax +
pop ebp  +
retn 8  +
***
add eax edi +
add [eax+3Dh] cl +
add [ecx] al +
mov [eax+7Ch] ecx +
mov [eax+80h] ecx +
lea edx [eax+10h] +
pop esi  +
mov [edx-0Ch] ecx +
mov [edx] ecx +
mov [edx+0Ch] ecx +
mov [edx+18h] ecx +
mov [edx+24h] ecx +
mov [edx+30h] ecx +
mov [edx+3Ch] ecx +
mov [edx+48h] ecx +
mov [edx+54h] ecx +
mov [edx+60h] ecx +
add edx 4 +
dec esi  +
jnz loc_101BC44  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
cmp [ebp+arg_24] eax +
jz loc_101BCB0  +
mov [ebp+var_4] al +
mov [ebp-3] al +
mov [ebp+var_2] 0FFh +
mov [ebp+var_1] 1 +
push dword ptr [ebp+var_4]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_24]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:GdiAlphaBlend  +
xor eax eax +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
mov esi ds:CreateCompatibleDC +
xor ebx ebx +
push edi  +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
lea edi [ecx+1Ch] +
cmp [ebp+var_8] 2 +
ja loc_101BD3A  +
push [ebp+arg_0]  +
call esi  +
cmp [ebp+arg_4] bl +
jz loc_101BCEF  +
mov [edi-18h] eax +
jmp loc_101BD09  +
push [ebp+arg_0]  +
mov [edi] eax +
call esi  +
push [ebp+arg_0]  +
mov [edi+18h] eax +
call esi  +
push [ebp+arg_0]  +
mov [edi+30h] eax +
call esi  +
mov [edi+48h] eax +
cmp [ebp+arg_4] bl +
jz loc_101BD15  +
cmp [edi-18h] ebx +
jz loc_101BD28  +
jmp loc_101BD2F  +
cmp [edi] ebx +
jz loc_101BD28  +
cmp [edi+18h] ebx +
jz loc_101BD28  +
cmp [edi+30h] ebx +
jz loc_101BD28  +
cmp [edi+48h] ebx +
jnz loc_101BD2F  +
mov [ebp+var_4] 80004005h +
inc [ebp+var_8]  +
add edi 4 +
cmp [ebp+var_4] ebx +
jge loc_101BCDA  +
push 2Ch  +
lea eax [ebp+var_38] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
add esp 0Ch +
inc eax  +
cmp [ebp+var_4] ebx +
push 20h  +
mov [ebp+var_38.bmiHeader.biPlanes] ax +
pop eax  +
mov [ebp+var_38.bmiHeader.biSize] 28h +
mov [ebp+var_38.bmiHeader.biBitCount] ax +
mov [ebp+var_38.bmiHeader.biCompression] ebx +
jl loc_101BE8C  +
mov esi [ebp+var_C] +
mov edi ds:CreateDIBSection +
mov [ebp+var_8] ebx +
add esi 4 +
cmp [ebp+var_8] 2 +
ja loc_101BE8C  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_38.bmiHeader.biWidth] 0Bh +
mov [ebp+var_38.bmiHeader.biHeight] 1Eh +
call edi  +
cmp [ebp+arg_4] bl +
jz loc_101BDB6  +
mov [esi+0Ch] eax +
cmp eax ebx +
jz loc_101BE76  +
push eax  +
push dword ptr [esi]  +
jmp loc_101BE6E  +
mov [esi+24h] eax +
cmp eax ebx +
jz loc_101BDC9  +
push eax  +
push dword ptr [esi+18h]  +
call ds:SelectObject  +
jmp loc_101BDD0  +
mov [ebp+var_4] 8007000Eh +
cmp [ebp+var_4] ebx +
jl loc_101BE7D  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_38.bmiHeader.biWidth] 0Bh +
mov [ebp+var_38.bmiHeader.biHeight] 1Eh +
call edi  +
mov [esi+3Ch] eax +
cmp eax ebx +
jz loc_101BE07  +
push eax  +
push dword ptr [esi+30h]  +
call ds:SelectObject  +
jmp loc_101BE0E  +
mov [ebp+var_4] 8007000Eh +
cmp [ebp+var_4] ebx +
jl loc_101BE7D  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_38.bmiHeader.biWidth] 0Bh +
mov [ebp+var_38.bmiHeader.biHeight] 1Eh +
call edi  +
mov [esi+54h] eax +
cmp eax ebx +
jz loc_101BE41  +
push eax  +
push dword ptr [esi+48h]  +
call ds:SelectObject  +
jmp loc_101BE48  +
mov [ebp+var_4] 8007000Eh +
cmp [ebp+var_4] ebx +
jl loc_101BE7D  +
push ebx  +
push ebx  +
xor eax eax +
inc eax  +
push ebx  +
mov [ebp+var_38.bmiHeader.biWidth] eax +
mov [ebp+var_38.bmiHeader.biHeight] eax +
push ebx  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+arg_0]  +
call edi  +
mov [esi+6Ch] eax +
cmp eax ebx +
jz loc_101BE76  +
push eax  +
push dword ptr [esi+60h]  +
call ds:SelectObject  +
jmp loc_101BE7D  +
mov [ebp+var_4] 8007000Eh +
inc [ebp+var_8]  +
add esi 4 +
cmp [ebp+var_4] ebx +
jge loc_101BD79  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_10] +
mov edx [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+4] +
push edi  +
add ecx 0FFFFFFF6h +
mov ebx 0CC0020h +
push ebx  +
push ecx  +
push 5  +
mov edi ds:StretchBlt +
mov [ebp+var_4] ecx +
pop ecx  +
push ecx  +
push ecx  +
add edx 0FFFFFFFBh +
push edx  +
push [ebp+arg_8]  +
mov edx [esi+0Ch] +
sub edx eax +
sub edx 0Ah +
push edx  +
push ecx  +
add eax ecx +
push eax  +
mov eax [esi+8] +
sub eax ecx +
push eax  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_101BFB1  +
mov ecx [ebp+arg_C] +
mov eax [esi] +
push ebx  +
push 5  +
pop edx  +
add ecx 0FFFFFFF6h +
push edx  +
push ecx  +
mov [ebp+arg_C] ecx +
mov ecx [ebp+arg_10] +
add ecx 0FFFFFFFBh +
push ecx  +
mov ecx [esi+8] +
push edx  +
push [ebp+arg_8]  +
sub ecx eax +
push edx  +
sub ecx 0Ah +
push ecx  +
mov ecx [esi+0Ch] +
sub ecx edx +
push ecx  +
add eax edx +
push eax  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_101BFB1  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
push ebx  +
push [ebp+var_4]  +
sub ecx eax +
push 5  +
push 5  +
push 0  +
push [ebp+arg_8]  +
sub ecx 0Ah +
push ecx  +
push 5  +
add eax 5 +
push eax  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_101BFB1  +
mov eax [esi] +
mov ecx [esi+8] +
push ebx  +
push 5  +
push [ebp+arg_C]  +
sub ecx eax +
push 0  +
push 5  +
push [ebp+arg_8]  +
sub ecx 0Ah +
push 5  +
push ecx  +
push dword ptr [esi+4]  +
add eax 5 +
push eax  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_101BFB1  +
mov eax [esi+4] +
mov edx [esi+0Ch] +
mov ecx [esi] +
push ebx  +
push [ebp+var_4]  +
sub edx eax +
push [ebp+arg_C]  +
sub edx 0Ah +
push 5  +
push 5  +
push [ebp+arg_8]  +
add eax 5 +
push edx  +
mov edx [esi+8] +
sub edx ecx +
sub edx 0Ah +
push edx  +
push eax  +
add ecx 5 +
push ecx  +
push [ebp+arg_0]  +
call edi  +
neg eax  +
sbb eax eax +
pop edi  +
and eax 7FFFBFFBh +
pop esi  +
add eax 80004005h +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push [ebp+arg_8]  +
xor ebx ebx +
push 5  +
pop edi  +
push edi  +
push edi  +
push ebx  +
push ebx  +
push edi  +
push edi  +
push dword ptr [esi+4]  +
mov [ebp+var_4] ecx +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_101BC6E  +
cmp eax ebx +
jl loc_101C06C  +
push [ebp+arg_8]  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_4] +
push edi  +
push edi  +
push ebx  +
add eax 0FFFFFFFBh +
push eax  +
push edi  +
push edi  +
push dword ptr [esi+4]  +
mov [ebp+arg_4] eax +
mov eax [esi+8] +
sub eax edi +
push eax  +
push [ebp+arg_0]  +
call sub_101BC6E  +
cmp eax ebx +
jl loc_101C06C  +
push [ebp+arg_8]  +
mov ebx [ebp+arg_10] +
mov eax [esi+0Ch] +
mov ecx [ebp+var_4] +
push edi  +
push edi  +
add ebx 0FFFFFFFBh +
push ebx  +
push [ebp+arg_4]  +
sub eax edi +
push edi  +
push edi  +
push eax  +
mov eax [esi+8] +
sub eax edi +
push eax  +
push [ebp+arg_0]  +
call sub_101BC6E  +
test eax eax +
jl loc_101C06C  +
push [ebp+arg_8]  +
mov eax [esi+0Ch] +
mov ecx [ebp+var_4] +
push edi  +
push edi  +
push ebx  +
push 0  +
push edi  +
push edi  +
sub eax edi +
push eax  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_101BC6E  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov eax dword_1027544 +
push esi  +
mov esi ds:DeleteObject +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_101C09B  +
push eax  +
push dword_1027540  +
call ds:SelectObject  +
push eax  +
call esi  +
mov eax dword_1027540 +
cmp eax edi +
jz loc_101C0A7  +
push eax  +
call esi  +
mov dword_1027540 edi +
mov dword_1027544 edi +
mov dword_1027538 edi +
mov dword_102753C edi +
mov dword_1027548 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+7Ch] eax +
mov eax [ebp+arg_4] +
mov [ecx+80h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and hModule 0 +
test eax eax +
jz loc_101C102  +
mov hModule eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor eax eax +
push edi  +
xor edi edi +
mov [ebp+var_8] eax +
mov [ebp+ppstm] eax +
mov ebx 80004005h +
cmp [ebp+arg_8] eax +
jnz loc_101C12A  +
mov edi ebx +
cmp [ebp+hModule] eax +
jnz loc_101C131  +
mov edi ebx +
cmp edi eax +
jl loc_101C265  +
movzx eax word ptr [ebp+dwBytes] +
push esi  +
push offset Type  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
mov esi eax +
test esi esi +
jnz loc_101C155  +
mov edi ebx +
test edi edi +
jl loc_101C264  +
push esi  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov [ebp+dwBytes] eax +
test eax eax +
jnz loc_101C170  +
mov edi ebx +
test edi edi +
jl loc_101C264  +
cmp [ebp+hModule] 0 +
jz loc_101C1AA  +
test esi esi +
jz loc_101C1AA  +
push esi  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jnz loc_101C192  +
mov edi ebx +
test edi edi +
jl loc_101C264  +
push eax  +
call ds:LockResource  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_101C1AA  +
mov edi ebx +
test edi edi +
jl loc_101C264  +
push [ebp+dwBytes]  +
push 2  +
call ds:GlobalAlloc  +
mov esi eax +
test esi esi +
jnz loc_101C1C5  +
mov edi ebx +
mov ebx ds:GlobalUnlock +
test edi edi +
jl loc_101C256  +
push esi  +
call ds:GlobalLock  +
test eax eax +
jnz loc_101C1E3  +
mov edi 80004005h +
test edi edi +
jl loc_101C256  +
push [ebp+dwBytes]  +
push [ebp+var_8]  +
push eax  +
call memcpy  +
add esp 0Ch +
lea eax [ebp+ppstm] +
push eax  +
push 1  +
push esi  +
call ds:CreateStreamOnHGlobal  +
mov edi eax +
test edi edi +
jl loc_101C256  +
push esi  +
call ebx  +
xor esi esi +
push esi  +
push [ebp+ppstm]  +
call sub_101BC07  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov eax [ebp+ppstm] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edx [ebp+arg_8] +
mov eax [edx] +
test eax eax +
jz loc_101C251  +
mov ecx [eax+8] +
and [eax+8] esi +
test ecx ecx +
jz loc_101C264  +
mov ecx [edx] +
test ecx ecx +
jz loc_101C247  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov edx [ebp+arg_8] +
and dword ptr [edx] 0 +
mov edi 80004005h +
jmp loc_101C264  +
mov edi 80004005h +
test esi esi +
jz loc_101C264  +
push esi  +
call ebx  +
push esi  +
call ds:GlobalFree  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push 20h  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_101C360  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and dword ptr [ebx+14h] 0 +
mov [ebx+10h] eax +
call ds:CreateCompatibleDC  +
mov [ebx+18h] eax +
test eax eax +
jz loc_101C332  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
push 2Ch  +
xor esi esi +
lea eax [ebp+var_2C] +
push esi  +
push eax  +
call memset  +
mov eax [ebx+8] +
sub eax [ebx] +
add esp 0Ch +
mov [ebp+var_2C.bmiHeader.biWidth] eax +
mov eax [ebx+0Ch] +
sub eax [ebx+4] +
push 20h  +
mov [ebp+var_2C.bmiHeader.biHeight] eax +
xor eax eax +
inc eax  +
mov [ebp+var_2C.bmiHeader.biPlanes] ax +
pop eax  +
push esi  +
push esi  +
push esi  +
mov [ebp+var_2C.bmiHeader.biBitCount] ax +
push esi  +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_2C.bmiHeader.biSize] 28h +
mov [ebp+var_2C.bmiHeader.biCompression] esi +
call ds:CreateDIBSection  +
pop edi  +
cmp eax esi +
pop esi  +
jz loc_101C332  +
push eax  +
push dword ptr [ebx+18h]  +
call ds:SelectObject  +
mov [ebx+1Ch] eax +
mov eax [ebx+0Ch] +
sub eax [ebx+4] +
push 42h  +
push eax  +
mov eax [ebx+8] +
sub eax [ebx] +
push eax  +
push 0  +
push 0  +
push dword ptr [ebx+18h]  +
call ds:PatBlt  +
jmp loc_101C360  +
mov eax [ebx+18h] +
test eax eax +
jz loc_101C357  +
push dword ptr [ebx+1Ch]  +
push eax  +
call ds:SelectObject  +
push eax  +
call ds:DeleteObject  +
push dword ptr [ebx+18h]  +
call ds:DeleteDC  +
and dword ptr [ebx+1Ch] 0 +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_101C3A0  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+18h]  +
call ds:SelectObject  +
push eax  +
call ds:DeleteObject  +
push dword ptr [esi+18h]  +
call ds:DeleteDC  +
and dword ptr [esi+1Ch] 0 +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jnz loc_101C3C2  +
push 80004005h  +
call loc_100540D  +
mov edx [eax] +
mov [ecx] edx +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101C3E8  +
push 80004005h  +
call loc_100540D  +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1003D40 +
call GdipDisposeImage  +
test byte ptr [ebp+8] 1 +
jz loc_101C416  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_101C436  +
mov eax [eax+4] +
jmp loc_101C438  +
xor eax eax +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push dword ptr [esi]  +
call GdipDrawImageRectI  +
push eax  +
mov ecx esi +
call sub_101930C  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov esi ecx +
cmp [ebp+arg_4] eax +
jnz loc_101C473  +
mov eax 80004005h +
mov ecx [ebp+arg_8] +
mov edi [esi+ecx*4+4] +
test eax eax +
jl loc_101C4A6  +
push 1Eh  +
push 0Bh  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_101BE9B  +
test eax eax +
jl loc_101C4A6  +
push 1Eh  +
push 0Bh  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_101BFCB  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] ebx +
cmp dword_1027540 ebx +
jz loc_101C508  +
mov edx [edi] +
cmp edx dword_1027538 +
jg loc_101C4F6  +
mov eax [esi] +
mov ecx dword_102753C +
cmp eax ecx +
jg loc_101C4F6  +
add edx edx +
cmp dword_1027538 edx +
jg loc_101C4F6  +
imul eax eax +
cmp ecx eax +
jle loc_101C4FB  +
call sub_101C078  +
mov eax dword_1027540 +
cmp eax ebx +
jnz loc_101C5D2  +
push [ebp+arg_0]  +
call ds:CreateCompatibleDC  +
mov dword_1027540 eax +
cmp eax ebx +
jz loc_101C5E3  +
push 2Ch  +
lea eax [ebp+var_30] +
push ebx  +
push eax  +
call memset  +
mov eax [esi] +
mov [ebp+var_30.bmiHeader.biWidth] eax +
mov eax [edi] +
add esp 0Ch +
mov [ebp+var_30.bmiHeader.biHeight] eax +
push 20h  +
xor eax eax +
inc eax  +
mov [ebp+var_30.bmiHeader.biPlanes] ax +
pop eax  +
push ebx  +
push ebx  +
push offset dword_1027548  +
mov [ebp+var_30.bmiHeader.biBitCount] ax +
push ebx  +
lea eax [ebp+var_30] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_30.bmiHeader.biSize] 28h +
mov [ebp+var_30.bmiHeader.biCompression] ebx +
call ds:CreateDIBSection  +
mov dword_1027544 eax +
cmp eax ebx +
jz loc_101C5C4  +
push eax  +
push dword_1027540  +
call ds:SelectObject  +
push ebx  +
push dword_1027540  +
call ds:SelectClipRgn  +
push 0FFFFFFh  +
push dword_1027540  +
call ds:SetTextColor  +
push 18h  +
push dword_1027540  +
call ds:SetTextAlign  +
push 1  +
push dword_1027540  +
call ds:SetBkMode  +
mov eax [edi] +
mov dword_1027538 eax +
mov eax [esi] +
mov dword_102753C eax +
jmp loc_101C5C9  +
call sub_101C078  +
mov eax dword_1027540 +
cmp eax ebx +
jz loc_101C5E3  +
mov [ebp+var_4] eax +
mov eax dword_1027538 +
mov [edi] eax +
mov eax dword_102753C +
mov [esi] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+dwBytes] +
lea eax [ebp+var_8] +
push eax  +
push hModule  +
xor ebx ebx +
push edi  +
mov [ebp+var_4] 1 +
mov [ebp+var_8] ebx +
call sub_101C10B  +
cmp eax ebx +
mov esi [ebp+var_8] +
mov [ebp+dwBytes] eax +
jl loc_101C6A0  +
cmp esi ebx +
jz loc_101C6B1  +
mov eax [esi+8] +
mov [esi+8] ebx +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_101C642  +
mov [ebp+dwBytes] 80004005h +
cmp [ebp+dwBytes] ebx +
jl loc_101C6A0  +
push [ebp+arg_0]  +
lea ecx [ebp+var_C] +
call sub_1019731  +
push 2  +
lea ecx [edi-3CF0h] +
pop eax  +
cmp ecx eax +
ja loc_101C665  +
push 1Eh  +
push 0Bh  +
jmp loc_101C687  +
lea ecx [edi-3CF4h] +
cmp ecx eax +
jbe loc_101C65F  +
lea ecx [edi-3CF8h] +
cmp ecx eax +
jbe loc_101C65F  +
add edi 0FFFFC304h +
cmp edi eax +
jbe loc_101C65F  +
push 1  +
push 1  +
push ebx  +
push ebx  +
push esi  +
lea ecx [ebp+var_C] +
call sub_101C422  +
mov eax [ebp+var_8] +
push [ebp+var_C]  +
mov [ebp+var_4] eax +
call GdipDeleteGraphics  +
cmp esi ebx +
jz loc_101C6AC  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
cmp [ebp+var_4] ebx +
jz loc_101C6B8  +
mov [ebp+dwBytes] 80004005h +
mov eax [ebp+dwBytes] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
cmp [ebp+arg_4] ecx +
jz loc_101C6DB  +
cmp [ebp+arg_8] ecx +
jz loc_101C73C  +
mov eax [ebp+arg_0] +
mov esi [eax+8] +
mov edi [eax+0Ch] +
sub esi [eax] +
sub edi [eax+4] +
mov ebx offset dword_10266D8 +
cmp [ebp+arg_8] ecx +
jnz loc_101C6F8  +
mov ebx offset dword_10266C0 +
mov eax [ebx] +
mov [ebp+arg_4] eax +
cmp eax ecx +
jz loc_101C73C  +
push [ebp+arg_4]  +
mov ecx ebx +
call sub_101C3D2  +
mov ecx [ebp+arg_8] +
mov eax [eax] +
test ecx ecx +
jnz loc_101C745  +
mov ecx [eax+8] +
sub ecx [eax] +
cmp ecx esi +
jnz loc_101C729  +
mov edx [eax+0Ch] +
sub edx [eax+4] +
cmp edx edi +
jz loc_101C73E  +
cmp ecx esi +
jg loc_101C73C  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx ebx +
call sub_101C3AA  +
cmp [ebp+arg_4] 0 +
jnz loc_101C701  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
cmp ecx [eax+10h] +
jz loc_101C73E  +
jmp loc_101C72B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_10266D8 +
push esi  +
mov [ebp+var_4] eax +
mov esi offset dword_10266D8 +
test eax eax +
jz loc_101C78B  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101C3D2  +
push dword ptr [eax]  +
call sub_101C36C  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101C3AA  +
cmp [ebp+var_4] 0 +
jnz loc_101C769  +
mov ecx esi +
call loc_101A6ED  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_101C7DD  +
push 0Ch  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_100E88A  +
test eax eax +
jnz loc_101C7C1  +
push 8007000Eh  +
call loc_100540D  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-8] +
jmp loc_101C7DA  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 0Ch +
dec ecx  +
jns loc_101C7CF  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneImage  +
push eax  +
mov ecx esi +
call sub_101928D  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_101C824  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_1003D40 +
mov [eax+4] edx +
mov [eax+8] ecx +
jmp loc_101C826  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
xor eax eax +
mov edi 3CF4h +
lea esi [ebx+1Ch] +
lea ecx [edi-3CF4h] +
cmp ecx 2 +
ja loc_101C8A4  +
cmp [ebp+arg_0] 0 +
mov ecx ebx +
jz loc_101C85E  +
lea eax [edi-4] +
push eax  +
push dword ptr [esi-18h]  +
jmp loc_101C897  +
push edi  +
push dword ptr [esi]  +
call sub_101C5F2  +
test eax eax +
jl loc_101C89C  +
lea eax [edi+4] +
push eax  +
push dword ptr [esi+18h]  +
mov ecx ebx +
call sub_101C5F2  +
test eax eax +
jl loc_101C89C  +
lea eax [edi+8] +
push eax  +
push dword ptr [esi+30h]  +
mov ecx ebx +
call sub_101C5F2  +
test eax eax +
jl loc_101C89C  +
lea eax [edi+0Ch] +
push eax  +
push dword ptr [esi+48h]  +
mov ecx ebx +
call sub_101C5F2  +
add esi 4 +
inc edi  +
test eax eax +
jge loc_101C842  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_10266C0 +
push esi  +
mov [ebp+var_4] eax +
mov esi offset dword_10266C0 +
test eax eax +
jz loc_101C8EA  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101C3D2  +
push dword ptr [eax]  +
call sub_101C36C  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101C3AA  +
cmp [ebp+var_4] 0 +
jnz loc_101C8C8  +
mov ecx esi +
call loc_101A6ED  +
call sub_101C751  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C79A  +
mov eax [esi+10h] +
mov ecx [eax] +
test eax eax +
jz loc_101C91C  +
mov edx [ebp+arg_0] +
mov edx [edx] +
mov [eax+8] edx +
mov [esi+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
inc dword ptr [esi+8]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ds:DeleteDC +
push esi  +
push edi  +
mov edi ds:DeleteObject +
mov dword ptr [ecx] offset off_1003D48 +
lea esi [ecx+4] +
mov [ebp+var_4] 3 +
push dword ptr [esi+0Ch]  +
call edi  +
push dword ptr [esi]  +
call ebx  +
push dword ptr [esi+24h]  +
call edi  +
push dword ptr [esi+18h]  +
call ebx  +
push dword ptr [esi+3Ch]  +
call edi  +
push dword ptr [esi+30h]  +
call ebx  +
push dword ptr [esi+54h]  +
call edi  +
push dword ptr [esi+48h]  +
call ebx  +
push dword ptr [esi+6Ch]  +
call edi  +
push dword ptr [esi+60h]  +
call ebx  +
add esi 4 +
dec [ebp+var_4]  +
jnz loc_101C95C  +
call sub_101C8B0  +
call sub_101C078  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov ebx ecx +
cmp [ebp+arg_4] edi +
jnz loc_101C9C6  +
mov esi 80004005h +
jmp loc_101C9E2  +
cmp [ebx+1Ch] edi +
jnz loc_101C9E2  +
push edi  +
push dword ptr [ebx+4]  +
call sub_101BCBB  +
test eax eax +
jl loc_101C9E2  +
push edi  +
mov ecx ebx +
call sub_101C82E  +
mov esi eax +
cmp esi edi +
mov eax [ebp+arg_8] +
mov eax [ebx+eax*4+1Ch] +
mov [ebp+var_4] eax +
jl loc_101CB3F  +
mov esi [ebp+arg_4] +
mov ecx [ebx+80h] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
add ecx [ebp+var_10] +
push 1Eh  +
push 0Bh  +
mov [ebp+var_8] ecx +
mov ecx [ebx+7Ch] +
add ecx [ebp+var_14] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_C] ecx +
mov ecx ebx +
call sub_101BE9B  +
mov esi eax +
test esi esi +
jl loc_101CB3F  +
push 1Eh  +
push 0Bh  +
push [ebp+var_4]  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_101BFCB  +
mov esi eax +
test esi esi +
jl loc_101CB3F  +
mov esi [ebp+arg_4] +
mov ecx [ebx+7Ch] +
mov eax [ebp+arg_8] +
mov eax [ebx+eax*4+34h] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push 1Eh  +
movs   +
add [ebp+var_14] ecx +
mov ecx [ebx+80h] +
add ecx [ebp+var_10] +
push 0Bh  +
push eax  +
mov [ebp+var_4] eax +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_8] ecx +
mov ecx ebx +
call sub_101BE9B  +
mov esi eax +
test esi esi +
jl loc_101CB3F  +
push 1Eh  +
push 0Bh  +
push [ebp+var_4]  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_101BFCB  +
mov esi eax +
test esi esi +
jl loc_101CB3F  +
mov esi [ebp+arg_4] +
mov eax [ebp+arg_8] +
mov eax [ebx+eax*4+4Ch] +
mov ecx [ebx+7Ch] +
lea edi [ebp+var_14] +
movs   +
movs   +
push 1Eh  +
movs   +
push 0Bh  +
push eax  +
mov [ebp+var_4] eax +
movs   +
add [ebp+var_14] ecx +
mov ecx [ebx+80h] +
add [ebp+var_10] ecx +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_101BE9B  +
mov esi eax +
test esi esi +
jl loc_101CB3F  +
push 1Eh  +
push 0Bh  +
push [ebp+var_4]  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_101BFCB  +
mov esi eax +
test esi esi +
jl loc_101CB3F  +
mov eax [ebp+arg_8] +
mov eax [ebx+eax*4+64h] +
push 0CC0020h  +
push 0  +
push 0  +
push eax  +
mov eax [ebp+arg_4] +
mov ecx [eax+4] +
add ecx [ebx+80h] +
mov eax [eax] +
push 1  +
push 1  +
push ecx  +
mov ecx [ebx+7Ch] +
lea eax [eax+ecx-1] +
push eax  +
push [ebp+arg_0]  +
call ds:BitBlt  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 4  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SetStretchBltMode  +
cmp hModule 0 +
jnz loc_101CB70  +
mov eax 80004005h +
jmp loc_101CB89  +
push 1  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101BCBB  +
test eax eax +
jl loc_101CB89  +
push 1  +
mov ecx esi +
call sub_101C82E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_101C8FE  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_101CBB3  +
mov [ecx] eax +
jmp loc_101CBB5  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
push 0  +
push [ebp+arg_0]  +
call sub_101C8FE  +
mov ecx [esi] +
test ecx ecx +
jz loc_101CBE1  +
mov [ecx+4] eax +
jmp loc_101CBE4  +
mov [esi+4] eax +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C937  +
test byte ptr [ebp+8] 1 +
jz loc_101CC0A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_101CC28  +
mov eax 80004005h +
jmp loc_101CC4C  +
mov eax [ebp+arg_8] +
cmp eax 3 +
jnz loc_101CC33  +
push 2  +
pop eax  +
cmp [ebp+arg_C] 0 +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
jz loc_101CC47  +
call sub_101C45E  +
jmp loc_101CC4C  +
call sub_101C9A9  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_101CC6F  +
push [ebp+arg_4]  +
call sub_101CBC2  +
jmp loc_101CC8B  +
push esi  +
push dword ptr [esi+4]  +
push [ebp+arg_4]  +
call sub_101C8FE  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_101CC86  +
mov [ecx] eax +
jmp loc_101CC88  +
mov [edi] eax +
mov [esi+4] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov edi 8007000Eh +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101C272  +
mov esi eax +
mov [ebp+arg_4] esi +
test esi esi +
jz loc_101CD1D  +
cmp [ebp+arg_8] 0 +
push ebx  +
mov ebx offset dword_10266D8 +
jnz loc_101CCCA  +
mov ebx offset dword_10266C0 +
mov edi [ebx] +
mov [ebp+arg_8] edi +
test edi edi +
jz loc_101CD0F  +
push edi  +
mov ecx ebx +
call sub_101C3D2  +
mov eax [eax] +
mov ecx [eax+8] +
sub ecx [eax] +
mov eax [esi+8] +
sub eax [esi] +
cmp ecx eax +
jg loc_101CCFD  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx ebx +
call sub_101C3AA  +
mov edi [ebp+arg_8] +
test edi edi +
jnz loc_101CCD3  +
test edi edi +
jz loc_101CD0F  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
mov ecx ebx +
call sub_101CC55  +
jmp loc_101CD1A  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx ebx +
call sub_101CB93  +
xor edi edi +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call ?CreateInt@Value@DirectUI@@SGPAV12@H@Z  +
mov esi eax +
test esi esi +
jnz loc_101CD49  +
mov eax 8007000Eh +
jmp loc_101CD66  +
push esi  +
push 1  +
push off_102670C  +
mov ecx edi +
call ?SetValue@Element@DirectUI@@QAEJPBUPropertyInfo@2@HPAVValue@2@@Z  +
mov ecx esi +
mov edi eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx dword_1027594 +
test ecx ecx +
jz locret_101CD88  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword_1027594 0 +
retn   +
***
cmp dword_10266F8 2 +
jnz locret_101CDA6  +
mov ecx dword_1027598 +
test ecx ecx +
jz locret_101CDA6  +
jmp sub_101E56C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10266F8 2 +
jnz loc_101CDF0  +
mov ecx dword_1027598 +
test ecx ecx +
jz loc_101CDF0  +
push esi  +
mov esi [ebp+arg_0] +
cmp [ebp+arg_4] esi +
jnz loc_101CDD4  +
call sub_101E56C  +
jmp loc_101CDEF  +
cmp [ebp+arg_8] esi +
jnz loc_101CDEF  +
cmp [ecx+28h] esi +
jnz loc_101CDE9  +
call sub_101E56C  +
mov ecx dword_1027598 +
push esi  +
call sub_101E4F0  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp dword_10266F8 2 +
jnz locret_101CE57  +
push ebx  +
push esi  +
push edi  +
push 17h  +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_101CE20  +
push 8  +
pop edx  +
push 10h  +
jmp loc_101CE25  +
push 2  +
pop edx  +
push 4  +
and [ebp+pInputs.type] 0 +
mov esi ds:SendInput +
pop ebx  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp+pInputs.anonymous_0] +
stos   +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 1  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] edx +
call esi  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 1  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] ebx +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1027598 +
test ecx ecx +
jz loc_101CE81  +
mov eax [ebp+arg_0] +
xor edx edx +
div  dword_102759C +
push eax  +
call ?SetFrameDuration@AnimationStrip@DirectUI@@QAEJH@Z  +
jmp loc_101CE86  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_101CECD  +
mov al [esi] +
mov byte_10266F4 al +
mov eax [esi+4] +
mov dword_10266F8 eax +
mov eax [esi+8] +
cmp dword_10266FC eax +
jz loc_101CEC1  +
push eax  +
mov dword_10266FC eax +
call sub_101CE5E  +
mov eax [esi+0Ch] +
mov dword_1026700 eax +
xor eax eax +
jmp loc_101CED2  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
mov [ecx+4] al +
mov eax [ebp+arg_4] +
mov [ecx+8] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jnz loc_101CF2A  +
cmp [ebp+arg_4] ebx +
jz loc_101CF2A  +
push offset aKbcontrol  +
call StrToID  +
mov ecx [ebp+arg_4] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax ebx +
jz loc_101CF2A  +
cmp [eax+54h] ebx +
jnz loc_101CF2A  +
mov bl 1 +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+7Ch]  +
lea ecx [esi+88h] +
push dword_10266B0  +
call sub_101CEF6  +
test al al +
jz loc_101CF74  +
push 0  +
push [ebp+arg_0]  +
call ds:SelectClipRgn  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1019551  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [esi+88h] +
push esi  +
call sub_101CDAC  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1019485  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+88h] +
call sub_101CDF9  +
mov ecx esi +
pop esi  +
jmp __imp_?DefaultAction@Button@DirectUI@@UAEJXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aInnerkey  +
mov esi ecx +
call StrToID  +
movzx eax ax +
push eax  +
lea ecx [esi-88h] +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
pop esi  +
mov ecx eax +
pop ebp  +
jmp ?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor edx edx +
add ecx 0FFFFFF78h +
cmp [ebp+8] dl +
mov eax [ecx] +
setnz dl  +
push edx  +
push ecx  +
call dword ptr [eax+74h]  +
pop ebp  +
retn 4  +
***
lea eax [ecx-88h] +
retn   +
***
mov eax 80004001h +
retn 4  +
***
mov eax 80004001h +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_1003D5C +
mov eax [eax] +
mov ecx [ecx] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call GdipCreateHatchBrush  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:GetSysColor +
push edi  +
push 8  +
call esi  +
mov ecx eax +
shr ecx 10h +
push ecx  +
mov ecx eax +
shr ecx 8 +
push ecx  +
push eax  +
mov edi 0FFh +
push edi  +
call sub_1014416  +
push 0Dh  +
mov dword_1027580 eax +
call esi  +
mov ebx eax +
mov [ebp+var_4] ebx +
shr [ebp+var_4] 10h +
push [ebp+var_4]  +
mov word ptr [ebp+var_8] bx +
shr word ptr [ebp+var_8] 8 +
push [ebp+var_8]  +
push ebx  +
push 20h  +
call sub_1014416  +
push [ebp+var_4]  +
mov dword_1027584 eax +
push [ebp+var_8]  +
push ebx  +
push 0C0h  +
call sub_1014416  +
mov dword_1027588 eax +
call sub_101CD71  +
push 5  +
call esi  +
push 0Ch  +
mov ebx eax +
call GdipAlloc  +
mov esi eax +
test esi esi +
jz loc_101D14F  +
mov eax dword_1027580 +
mov [ebp+var_8] eax +
mov eax ebx +
shr eax 10h +
push eax  +
mov eax ebx +
shr eax 8 +
push eax  +
push ebx  +
push edi  +
call sub_1014416  +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 17h  +
mov ecx esi +
call sub_101D04F  +
jmp loc_101D151  +
xor eax eax +
pop edi  +
pop esi  +
mov dword_1027594 eax +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_10266F0 eax +
call sub_101D096  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1027598 +
sub esp 18h +
push esi  +
push [ebp+arg_0]  +
call sub_101E486  +
mov esi eax +
test esi esi +
jl loc_101D1FC  +
movzx eax [ebp+arg_4] +
mov ecx dword_1027598 +
push 1  +
mov dword_102759C eax +
call sub_101CD2A  +
mov esi eax +
test esi esi +
jl loc_101D205  +
lea eax [ebp+var_18] +
push eax  +
push 18h  +
push [ebp+arg_0]  +
call ds:GetObjectW  +
cmp eax 18h +
jnz loc_101D1F5  +
mov eax [ebp+var_14] +
xor edx edx +
div  dword_102759C +
mov ecx dword_1027598 +
push eax  +
call ?SetFrameWidth@AnimationStrip@DirectUI@@QAEJH@Z  +
mov esi eax +
test esi esi +
jl loc_101D205  +
push dword_10266FC  +
call sub_101CE5E  +
mov esi eax +
jmp loc_101D205  +
mov esi 80004005h +
jmp loc_101D205  +
push [ebp+arg_0]  +
call ds:DeleteObject  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
call sub_101E9A1  +
and [ebp+var_4] 0 +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
call sub_101E889  +
mov esi eax +
test esi esi +
jl loc_101D265  +
push dword ptr [ebp+arg_4]  +
mov eax [ebp+var_8] +
push [ebp+arg_0]  +
mov dword_1027598 eax +
call sub_101D17B  +
mov esi eax +
test esi esi +
jge loc_101D265  +
mov ecx dword_1027598 +
push 1  +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
and dword_1027598 0 +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_1027594 0 +
mov [ebp+var_4] ecx +
jz locret_101D32D  +
test byte ptr [ecx+8] 4 +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
jz loc_101D2B6  +
mov eax [esi] +
mov ecx [esi+8] +
sub ecx eax +
add ecx [ebp+arg_8] +
push 3  +
push ecx  +
push dword ptr [esi+4]  +
mov ecx edi +
push eax  +
push dword_1027594  +
call sub_1019790  +
mov ecx [ebp+var_4] +
test byte ptr [ecx+8] 8 +
jz loc_101D2E1  +
mov eax [esi] +
mov ecx [esi+8] +
sub ecx eax +
add ecx [ebp+arg_8] +
push 3  +
push ecx  +
mov ecx [esi+0Ch] +
sub ecx 4 +
push ecx  +
push eax  +
push dword_1027594  +
mov ecx edi +
call sub_1019790  +
mov ecx [ebp+var_4] +
test byte ptr [ecx+8] 1 +
jz loc_101D305  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
sub ecx eax +
push ecx  +
push 3  +
push eax  +
push dword ptr [esi]  +
mov ecx edi +
push dword_1027594  +
call sub_1019790  +
mov ecx [ebp+var_4] +
test byte ptr [ecx+8] 2 +
jz loc_101D32B  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
sub ecx eax +
push ecx  +
push 3  +
push eax  +
mov eax [esi+8] +
sub eax 4 +
push eax  +
push dword_1027594  +
mov ecx edi +
call sub_1019790  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov edi ecx +
mov esi [ebp+8] +
test esi esi +
jnz loc_101D357  +
mov dword ptr [ebp+8] 80070057h +
jmp loc_101D603  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_101A25A  +
cmp byte ptr [edi+8Ch] 0 +
mov [ebp+8] eax +
jz loc_101D603  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-14h] +
call sub_1019731  +
and dword ptr [ebp-4] 0 +
cmp dword_10266F0 3 +
mov edx dword_1027584 +
jz loc_101D397  +
mov edx dword_1027588 +
mov eax [esi+4] +
mov ebx [esi+0Ch] +
mov ecx [esi] +
sub ebx eax +
dec ebx  +
dec ebx  +
push ebx  +
mov ebx [esi+8] +
sub ebx ecx +
dec ebx  +
push ebx  +
push eax  +
push ecx  +
push edx  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A076  +
mov [ebp+8] eax +
mov eax [edi+90h] +
test eax eax +
jz loc_101D5FB  +
push 5  +
pop ebx  +
test al 2 +
jz loc_101D3D3  +
xor ebx ebx +
mov ecx dword_10266F0 +
cmp ecx 4 +
jnz loc_101D52E  +
test al cl +
jz loc_101D431  +
mov eax [esi+4] +
mov ecx [esi+8] +
push eax  +
lea ecx [ecx+ebx-1] +
push ecx  +
push eax  +
push dword ptr [esi]  +
lea eax [ebp-14h] +
push dword_1027590  +
mov ecx edi +
push eax  +
call sub_101A028  +
mov eax [esi+4] +
mov ecx [esi+8] +
inc eax  +
push eax  +
lea ecx [ecx+ebx-2] +
push ecx  +
push eax  +
mov eax [edi+90h] +
and eax 1 +
add eax [esi] +
mov ecx edi +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
call sub_101A028  +
test byte ptr [edi+90h] 8 +
jz loc_101D488  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
dec eax  +
push eax  +
lea ecx [ecx+ebx-1] +
push ecx  +
push eax  +
push dword ptr [esi]  +
lea eax [ebp-14h] +
push dword_1027590  +
mov ecx edi +
push eax  +
call sub_101A028  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
add eax 0FFFFFFFEh +
push eax  +
lea ecx [ecx+ebx-2] +
push ecx  +
push eax  +
mov eax [edi+90h] +
and eax 1 +
add eax [esi] +
mov ecx edi +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
call sub_101A028  +
test byte ptr [edi+90h] 1 +
jz loc_101D4D4  +
mov ecx [esi+0Ch] +
mov eax [esi] +
dec ecx  +
dec ecx  +
push ecx  +
mov ecx [esi+4] +
push eax  +
inc ecx  +
push ecx  +
push eax  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov ecx [esi+0Ch] +
mov eax [esi] +
sub ecx 3 +
push ecx  +
mov ecx [esi+4] +
inc eax  +
push eax  +
inc ecx  +
inc ecx  +
push ecx  +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
test byte ptr [edi+90h] 2 +
jz loc_101D5FB  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
dec eax  +
dec ecx  +
dec ecx  +
push ecx  +
mov ecx [esi+4] +
push eax  +
inc ecx  +
push ecx  +
push eax  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov ecx [esi+0Ch] +
mov eax [esi+8] +
sub ecx 3 +
push ecx  +
mov ecx [esi+4] +
add eax 0FFFFFFFEh +
push eax  +
inc ecx  +
inc ecx  +
push ecx  +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
jmp loc_101D5FB  +
cmp ecx 3 +
jz loc_101D5EA  +
cmp ecx 2 +
jz loc_101D5EA  +
test al 4 +
jz loc_101D565  +
mov eax [esi] +
mov ecx [esi+8] +
push 3  +
sub ecx eax +
add ecx ebx +
push ecx  +
push dword ptr [esi+4]  +
mov ecx edi +
push eax  +
push dword_1027580  +
lea eax [ebp-14h] +
push eax  +
call sub_101A076  +
test byte ptr [edi+90h] 8 +
jz loc_101D593  +
mov eax [esi] +
mov ecx [esi+8] +
sub ecx eax +
push 3  +
add ecx ebx +
push ecx  +
mov ecx [esi+0Ch] +
sub ecx 4 +
push ecx  +
push eax  +
push dword_1027580  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A076  +
test byte ptr [edi+90h] 1 +
jz loc_101D5BB  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
sub ecx eax +
push ecx  +
push 3  +
push eax  +
push dword ptr [esi]  +
lea eax [ebp-14h] +
push dword_1027580  +
mov ecx edi +
push eax  +
call sub_101A076  +
test byte ptr [edi+90h] 2 +
jz loc_101D5FB  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
sub ecx eax +
push ecx  +
push 3  +
push eax  +
mov eax [esi+8] +
sub eax 4 +
push eax  +
push dword_1027580  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A076  +
jmp loc_101D5FB  +
push ebx  +
push esi  +
lea eax [ebp-14h] +
push eax  +
lea ecx [edi+88h] +
call sub_101D271  +
push dword ptr [ebp-14h]  +
call GdipDeleteGraphics  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push offset aInnerkey  +
mov esi ecx +
mov edi 80004005h +
call StrToID  +
movzx eax ax +
push eax  +
lea ecx [esi-88h] +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-4] +
push ecx  +
mov ecx eax +
call ?GetContentString@Element@DirectUI@@QAEPBGPAPAVValue@2@@Z  +
cmp dword ptr [ebp-4] 0 +
jz loc_101D679  +
test eax eax +
jz loc_101D666  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100E9BB  +
mov edi eax +
jmp loc_101D670  +
mov ecx [ebp+8] +
xor eax eax +
mov [ecx] ax +
xor edi edi +
mov ecx [ebp-4] +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call __EH_prolog3  +
mov edi ecx +
mov esi [ebp+8] +
test esi esi +
jnz loc_101D6A7  +
mov dword ptr [ebp+8] 80070057h +
jmp loc_101DAC0  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_101B622  +
cmp byte ptr [edi+8Ch] 0 +
mov [ebp+8] eax +
jz loc_101DAC0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-14h] +
call sub_1019731  +
and dword ptr [ebp-4] 0 +
cmp dword_10266F0 3 +
mov ecx dword_1027584 +
jz loc_101D6E7  +
mov ecx dword_1027588 +
mov edx dword_10274F8 +
mov eax [esi] +
add edx 0FFFFFFFEh +
push edx  +
mov edx [esi+8] +
sub edx eax +
dec edx  +
push edx  +
mov edx [esi+4] +
inc edx  +
push edx  +
push eax  +
push ecx  +
lea eax [ebp-14h] +
mov [ebp+0Ch] ecx +
push eax  +
mov ecx edi +
call sub_101A076  +
mov edx [esi+4] +
mov ebx [esi+0Ch] +
mov eax dword_10274F8 +
mov ecx [esi] +
sub ebx edx +
sub ebx eax +
push ebx  +
mov ebx [esi+8] +
sub ebx ecx +
mov ecx dword_10274F4 +
sub ebx ecx +
push ebx  +
lea eax [edx+eax-1] +
push eax  +
mov eax [esi] +
add eax ecx +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A076  +
mov eax [edi+90h] +
test eax eax +
jz loc_101DAB8  +
mov ecx dword_10266F0 +
cmp ecx 4 +
jnz loc_101D9F0  +
test al cl +
jz loc_101D7A3  +
mov eax [esi+4] +
mov ecx [esi+8] +
push eax  +
dec ecx  +
push ecx  +
push eax  +
push dword ptr [esi]  +
lea eax [ebp-14h] +
push dword_1027590  +
mov ecx edi +
push eax  +
call sub_101A028  +
mov eax [esi+4] +
mov ecx [esi+8] +
inc eax  +
push eax  +
dec ecx  +
push ecx  +
push eax  +
push dword ptr [esi]  +
lea eax [ebp-14h] +
push dword_102758C  +
mov ecx edi +
push eax  +
call sub_101A028  +
mov eax [edi+90h] +
test al 11h +
jz loc_101D808  +
mov eax [esi+4] +
mov ecx dword_10274F8 +
mov edx dword_10274F4 +
lea ecx [eax+ecx-1] +
mov eax [esi] +
push ecx  +
lea edx [eax+edx-1] +
push edx  +
push ecx  +
push eax  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [esi+4] +
mov ecx dword_10274F8 +
mov edx dword_10274F4 +
lea ecx [eax+ecx-2] +
mov eax [esi] +
push ecx  +
add edx eax +
push edx  +
push ecx  +
inc eax  +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [edi+90h] +
test al 1 +
jnz loc_101D816  +
test al 10h +
jnz loc_101D861  +
mov eax [esi+4] +
mov edx dword_10274F8 +
mov ecx [esi] +
lea edx [eax+edx-1] +
push edx  +
push ecx  +
inc eax  +
push eax  +
push ecx  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [esi+4] +
mov edx dword_10274F8 +
mov ecx [esi] +
lea edx [eax+edx-2] +
push edx  +
inc ecx  +
push ecx  +
inc eax  +
push eax  +
push ecx  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
test byte ptr [edi+90h] 11h +
jz loc_101D8CC  +
mov ecx dword_10274F4 +
mov eax [esi] +
mov edx dword_10274F8 +
lea eax [eax+ecx-1] +
mov ecx [esi+0Ch] +
dec ecx  +
push ecx  +
mov ecx [esi+4] +
push eax  +
lea ecx [ecx+edx-1] +
push ecx  +
push eax  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov ecx dword_10274F4 +
mov eax [esi] +
mov edx dword_10274F8 +
add eax ecx +
mov ecx [esi+0Ch] +
dec ecx  +
push ecx  +
mov ecx [esi+4] +
push eax  +
lea ecx [ecx+edx-1] +
push ecx  +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [edi+90h] +
test al 2 +
jnz loc_101D8DA  +
test al 10h +
jnz loc_101D92A  +
mov eax [esi+4] +
mov edx dword_10274F8 +
mov ecx [esi+8] +
lea edx [eax+edx+1] +
push edx  +
dec ecx  +
push ecx  +
inc eax  +
push eax  +
push ecx  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [esi+4] +
mov edx dword_10274F8 +
mov ecx [esi+8] +
lea edx [eax+edx+1] +
push edx  +
add ecx 0FFFFFFFEh +
push ecx  +
inc eax  +
push eax  +
push ecx  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
test byte ptr [edi+90h] 12h +
jz loc_101D98A  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx dword_10274F8 +
dec eax  +
dec ecx  +
push ecx  +
mov ecx [esi+4] +
push eax  +
lea ecx [ecx+edx-1] +
push ecx  +
push eax  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx dword_10274F8 +
add eax 0FFFFFFFEh +
dec ecx  +
dec ecx  +
push ecx  +
mov ecx [esi+4] +
push eax  +
lea ecx [ecx+edx-1] +
push ecx  +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [edi+90h] +
test al 8 +
jz loc_101DAB8  +
mov ecx [esi+8] +
test al 10h +
mov eax [esi+0Ch] +
dec eax  +
push eax  +
dec ecx  +
push ecx  +
mov ecx dword_10274F4 +
push eax  +
mov eax [esi] +
lea eax [eax+ecx-1] +
push eax  +
push dword_1027590  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A028  +
mov eax [esi+0Ch] +
mov ecx [esi+8] +
add eax 0FFFFFFFEh +
push eax  +
dec ecx  +
dec ecx  +
push ecx  +
push eax  +
mov eax [esi] +
add eax dword_10274F4 +
mov ecx edi +
push eax  +
push dword_102758C  +
lea eax [ebp-14h] +
push eax  +
call sub_101A028  +
jmp loc_101DAB8  +
push 3  +
pop ebx  +
cmp ecx ebx +
jz loc_101DAA6  +
cmp ecx 2 +
jz loc_101DAA6  +
test al 4 +
jz loc_101DA26  +
mov eax [esi] +
mov ecx [esi+8] +
push ebx  +
sub ecx eax +
push ecx  +
push dword ptr [esi+4]  +
mov ecx edi +
push eax  +
push dword_1027580  +
lea eax [ebp-14h] +
push eax  +
call sub_101A076  +
test byte ptr [edi+90h] 8 +
jz loc_101DA51  +
mov eax [esi] +
mov ecx [esi+8] +
push ebx  +
sub ecx eax +
push ecx  +
mov ecx [esi+0Ch] +
sub ecx 4 +
push ecx  +
push eax  +
push dword_1027580  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A076  +
test byte ptr [edi+90h] 1 +
jz loc_101DA78  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
sub ecx eax +
push ecx  +
push ebx  +
push eax  +
push dword ptr [esi]  +
lea eax [ebp-14h] +
push dword_1027580  +
mov ecx edi +
push eax  +
call sub_101A076  +
test byte ptr [edi+90h] 2 +
jz loc_101DAB8  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
sub ecx eax +
push ecx  +
push ebx  +
push eax  +
mov eax [esi+8] +
sub eax 4 +
push eax  +
push dword_1027580  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_101A076  +
jmp loc_101DAB8  +
push 0  +
push esi  +
lea eax [ebp-14h] +
push eax  +
lea ecx [edi+88h] +
call sub_101D271  +
push dword ptr [ebp-14h]  +
call GdipDeleteGraphics  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
mov dword ptr [esi] offset off_1003D64 +
mov byte ptr [esi+4] 0 +
or dword_102758C 0FFFFFFFFh +
mov dword_1027590 0FF000000h +
call sub_101D096  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101A44C  +
and dword ptr [ebp-4] 0 +
lea edi [esi+88h] +
mov ecx edi +
call sub_101DAD0  +
mov dword ptr [esi] offset off_1003D88 +
mov dword ptr [edi] offset off_1003D74 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+88h] offset off_1003D64 +
call sub_101CD71  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101A494  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101B3E4  +
and dword ptr [ebp-4] 0 +
lea edi [esi+88h] +
mov ecx edi +
call sub_101DAD0  +
mov dword ptr [esi] offset off_1003E50 +
mov dword ptr [edi] offset off_1003E3C +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+88h] offset off_1003D64 +
call sub_101CD71  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101B416  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101DB42  +
test byte ptr [ebp+8] 1 +
jz loc_101DC10  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101DBBC  +
test byte ptr [ebp+8] 1 +
jz loc_101DC36  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
push 94h  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101DC6F  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101DB02  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
push 94h  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101DCA9  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101DB7C  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
call sub_101DC42  +
mov esi eax +
test esi esi +
jz loc_101DCF6  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@Button@DirectUI@@QAEJIPAVElement@2@PAK@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101DCEA  +
mov [edi] esi +
jmp loc_101DCFB  +
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_101DCFB  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
call sub_101DC7C  +
mov esi eax +
test esi esi +
jz loc_101DD49  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@Button@DirectUI@@QAEJIPAVElement@2@PAK@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101DD3D  +
mov [edi] esi +
jmp loc_101DD4E  +
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_101DD4E  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call sub_101DCB6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call sub_101DD09  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+10h] +
lea edx [eax+1] +
mov [ecx+10h] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+10h]  +
mov eax [ecx+10h] +
jnz loc_101DDCB  +
push ecx  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
mov eax 80004002h +
test edx edx +
jnz loc_101DDE8  +
inc eax  +
jmp loc_101DE43  +
and dword ptr [edx] 0 +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10021D0 +
xor ebx ebx +
cmps   +
jz loc_101DE33  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_10041AC +
xor ebx ebx +
cmps   +
jz loc_101DE33  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100408C +
xor ebx ebx +
cmps   +
jnz loc_101DE40  +
mov eax [ebp+8] +
mov ecx eax +
neg ecx  +
lea esi [eax+4] +
sbb ecx ecx +
and ecx esi +
mov [edx] ecx +
jmp loc_101DE38  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
retn 4  +
***
xor eax eax +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov ecx [ecx+4] +
xor eax eax +
test ecx ecx +
jz loc_101DE7F  +
test byte ptr [ecx+5Fh] 4 +
jnz loc_101DE7F  +
push dword ptr [ebp+0Ch]  +
call sub_10137B3  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax+8] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax ecx +
and dword ptr [eax+10h] 0 +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_1003F20 +
mov dword ptr [eax+4] offset off_1003F04 +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_101DDB2  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101DD98  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101DDD4  +
***
xor ecx ecx +
cmp eax ecx +
jz locret_101DF07  +
mov [eax+4] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+4] +
push edi  +
xor edi edi +
test eax eax +
jz loc_101DF5B  +
test byte ptr [eax+5Fh] 4 +
jnz loc_101DF5B  +
call sub_101DEEB  +
test eax eax +
jz loc_101DF56  +
mov ecx off_10264C4 +
mov [eax+4] ecx +
mov ecx [ebp+10h] +
mov [eax+14h] ecx +
mov ecx [ebp+14h] +
mov [eax+18h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+1Ch] ecx +
mov ecx [esi+4] +
push eax  +
call ?PostEvent@Element@DirectUI@@QAEXPAUEvent@2@@Z  +
jmp loc_101DF5B  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax 0FFFFFFh +
mov edx 33000000h +
mov [ecx+10h] eax +
mov [ecx+14h] eax +
mov [ecx+18h] eax +
mov [ecx+1Ch] eax +
mov [ecx+28h] eax +
mov [ecx+2Ch] eax +
mov [ecx+30h] eax +
mov [ecx+34h] eax +
mov [ecx+38h] eax +
mov eax 99000000h +
push esi  +
mov esi 4E000000h +
mov [ecx+50h] eax +
mov [ecx+58h] eax +
mov eax 80000000h +
mov [ecx+4Ch] esi +
mov [ecx+54h] esi +
mov [ecx+74h] esi +
mov [ecx+20h] edx +
mov [ecx+24h] edx +
mov [ecx+3Ch] edx +
mov [ecx+40h] edx +
mov dword ptr [ecx+44h] 0CC10EAEDh +
mov dword ptr [ecx+48h] 99FFFFh +
mov [ecx+5Ch] edx +
mov dword ptr [ecx+60h] 55000000h +
mov [ecx+64h] eax +
mov [ecx+68h] eax +
mov [ecx+6Ch] eax +
mov [ecx+70h] eax +
mov [ecx+78h] edx +
mov [ecx+7Ch] edx +
mov dword ptr [ecx+80h] 66FFFFFFh +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
or ecx 0FFFFFFFFh +
mov eax 0FF353535h +
mov [esi+10h] ecx +
mov [esi+14h] ecx +
mov [esi+18h] ecx +
mov [esi+1Ch] ecx +
mov [esi+28h] ecx +
mov ecx 0FFDDDDDDh +
push edi  +
mov edi ds:GetSysColor +
mov edx 0FF474747h +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov [esi+2Ch] ecx +
mov [esi+30h] ecx +
mov [esi+34h] ecx +
mov [esi+38h] ecx +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
mov [esi+44h] ecx +
mov ecx 66000000h +
mov [esi+48h] eax +
mov [esi+50h] eax +
mov [esi+64h] eax +
mov [esi+6Ch] eax +
mov eax 0FF868686h +
push 0Ah  +
mov [esi+4Ch] ecx +
mov [esi+54h] ecx +
mov [esi+58h] edx +
mov [esi+5Ch] edx +
mov [esi+60h] edx +
mov [esi+68h] ecx +
mov [esi+70h] ecx +
mov [esi+74h] eax +
mov [esi+78h] eax +
mov [esi+7Ch] eax +
call edi  +
shr eax 10h +
push eax  +
push 0Ah  +
call edi  +
shr eax 8 +
push eax  +
push 0Ah  +
call edi  +
push eax  +
push 0FFh  +
call sub_1014416  +
pop edi  +
mov [esi+80h] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
movzx eax byte ptr [esi+6] +
push edi  +
push eax  +
movzx eax byte ptr [esi+5] +
push eax  +
movzx eax byte ptr [esi+4] +
push eax  +
mov ebx 0FFh +
push ebx  +
call sub_1014416  +
mov edi eax +
movzx eax byte ptr [esi+9] +
push eax  +
movzx eax byte ptr [esi+8] +
push eax  +
movzx eax byte ptr [esi+7] +
push eax  +
push ebx  +
mov [esi+10h] edi +
call sub_1014416  +
movzx ecx byte ptr [esi+0Bh] +
movzx edx byte ptr [esi+0Ah] +
mov [ebp+var_10] eax +
mov [esi+14h] eax +
mov [esi+1Ch] eax +
mov [esi+28h] eax +
movzx eax byte ptr [esi+0Ch] +
push eax  +
push ecx  +
push edx  +
push ebx  +
mov [esi+18h] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov byte ptr [ebp+var_C] 0C0h +
mov byte ptr [ebp+var_8] 0C0h +
mov byte ptr [ebp+var_4] 0C0h +
call sub_1014416  +
cmp eax [ebp+var_10] +
jz loc_101E12E  +
cmp eax edi +
jz loc_101E12E  +
mov al [esi+0Ah] +
mov byte ptr [ebp+var_C] al +
mov al [esi+0Bh] +
mov byte ptr [ebp+var_8] al +
mov al [esi+0Ch] +
mov byte ptr [ebp+var_4] al +
push [ebp+var_4]  +
mov [esi+2Ch] edi +
push [ebp+var_8]  +
push [ebp+var_C]  +
push ebx  +
call sub_1014416  +
mov [esi+30h] eax +
mov [esi+38h] eax +
mov [esi+44h] eax +
mov eax [ebp+var_10] +
mov [esi+34h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+48h] edi +
mov [esi+4Ch] edi +
mov [esi+50h] edi +
mov [esi+54h] edi +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+60h] edi +
mov [esi+64h] edi +
mov [esi+68h] edi +
mov [esi+6Ch] edi +
mov [esi+70h] edi +
mov [esi+74h] edi +
mov [esi+78h] edi +
mov [esi+7Ch] edi +
pop edi  +
mov [esi+80h] eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
movzx eax byte ptr [esi+9] +
push edi  +
push eax  +
movzx eax byte ptr [esi+8] +
push eax  +
movzx eax byte ptr [esi+7] +
push eax  +
mov ebx 0FFh +
push ebx  +
call sub_1014416  +
movzx ecx byte ptr [esi+0Bh] +
movzx edx byte ptr [esi+0Ah] +
mov edi eax +
movzx eax byte ptr [esi+0Ch] +
push eax  +
push ecx  +
push edx  +
push ebx  +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov byte ptr [ebp+var_C] 0C0h +
mov byte ptr [ebp+var_8] 0C0h +
mov byte ptr [ebp+var_4] 0C0h +
call sub_1014416  +
mov [ebp+var_10] eax +
cmp eax edi +
jz loc_101E221  +
movzx eax byte ptr [esi+6] +
push eax  +
movzx eax byte ptr [esi+5] +
push eax  +
movzx eax byte ptr [esi+4] +
push eax  +
push ebx  +
call sub_1014416  +
cmp [ebp+var_10] eax +
jz loc_101E221  +
mov al [esi+0Ah] +
mov byte ptr [ebp+var_C] al +
mov al [esi+0Bh] +
mov byte ptr [ebp+var_8] al +
mov al [esi+0Ch] +
mov byte ptr [ebp+var_4] al +
push [ebp+var_4]  +
mov [esi+2Ch] edi +
push [ebp+var_8]  +
push [ebp+var_C]  +
push ebx  +
call sub_1014416  +
mov [esi+30h] eax +
mov [esi+38h] eax +
mov [esi+44h] eax +
movzx eax byte ptr [esi+6] +
push eax  +
movzx eax byte ptr [esi+5] +
push eax  +
movzx eax byte ptr [esi+4] +
push eax  +
push ebx  +
mov [esi+34h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+48h] edi +
call sub_1014416  +
mov [esi+50h] edi +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+64h] edi +
mov [esi+6Ch] edi +
mov [esi+74h] edi +
mov [esi+78h] edi +
pop edi  +
mov [esi+4Ch] eax +
mov [esi+54h] eax +
mov [esi+60h] eax +
mov [esi+68h] eax +
mov [esi+70h] eax +
mov [esi+7Ch] eax +
mov [esi+80h] eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
cmp edx 1Ch +
ja loc_101E2A7  +
mov eax [ecx+edx*4+10h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetSysColor +
push 5  +
mov esi ecx +
call edi  +
push 8  +
mov ebx eax +
call edi  +
push 0Dh  +
mov [ebp+var_4] eax +
call edi  +
mov ecx ebx +
shr ecx 8 +
mov [esi+8] cl +
mov ecx [ebp+var_4] +
mov edx ecx +
mov [esi+4] cl +
shr ecx 10h +
mov [esi+6] cl +
mov ecx eax +
mov [esi+7] bl +
shr ebx 10h +
shr ecx 8 +
shr edx 8 +
mov [esi+0Ah] al +
shr eax 10h +
mov [esi+9] bl +
mov ebx [ebp+arg_0] +
push 4  +
mov [esi+0Bh] cl +
mov [esi+0Ch] al +
mov [esi+5] dl +
mov ecx ebx +
mov eax offset aLonghorn +
pop edi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101E339  +
test dx dx +
jz loc_101E335  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101E339  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101E315  +
xor eax eax +
jmp loc_101E33E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101E34E  +
mov ecx esi +
call sub_101DF68  +
jmp loc_101E403  +
mov ecx ebx +
mov eax offset aHighcontrastbl +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101E379  +
test dx dx +
jz loc_101E375  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101E379  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101E355  +
xor eax eax +
jmp loc_101E37E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101E38B  +
mov ecx esi +
call sub_101E18F  +
jmp loc_101E403  +
mov ecx ebx +
mov eax offset aClassic +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101E3B6  +
test dx dx +
jz loc_101E3B2  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101E3B6  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101E392  +
xor eax eax +
jmp loc_101E3BB  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101E3C8  +
mov ecx esi +
call sub_101DFF3  +
jmp loc_101E403  +
mov ecx ebx +
mov eax offset aHighcontrastwh +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101E3F3  +
test dx dx +
jz loc_101E3EF  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101E3F3  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101E3CF  +
xor eax eax +
jmp loc_101E3F8  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101E403  +
mov ecx esi +
call sub_101E09C  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push 1Dh  +
pop ecx  +
push dword ptr [ebp+0Ch]  +
xor eax eax +
push dword ptr [ebp+8]  +
mov dword ptr [esi] offset off_1003AF0 +
lea edi [esi+10h] +
stos   +
mov ecx esi +
call sub_101E2B0  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call [ebp+arg_4]  +
xor ecx ecx +
cmp [ebp+arg_0] eax +
setz cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 0  +
push 2  +
push off_102670C  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@PBUPropertyInfo@2@HPAUUpdateCache@2@@Z  +
mov esi [eax+4] +
mov ecx eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov ebx ecx +
cmp esi edi +
jz loc_101E4DD  +
push esi  +
call ProcessAlphaBitmapI  +
cmp eax edi +
jz loc_101E4A5  +
mov esi eax +
push edi  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push 3  +
push esi  +
call ?CreateGraphic@Value@DirectUI@@SGPAV12@PAUHBITMAP__@@EI_N11@Z  +
mov esi eax +
cmp esi edi +
jz loc_101E4D6  +
push esi  +
push 1  +
push ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx ebx +
call ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z  +
mov ecx esi +
mov edi eax +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_101E4E2  +
mov edi 80004005h +
jmp loc_101E4E2  +
mov edi 80070057h +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_101E560  +
test byte ptr [esi+5Fh] 4 +
jnz loc_101E560  +
push edi  +
mov ecx esi +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
test eax eax +
jl loc_101E553  +
push 0  +
push 1  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
mov ecx esi +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov esi eax +
test esi esi +
jz loc_101E559  +
push dword ptr [esi+4]  +
mov ecx edi +
call ?SetWidth@Element@DirectUI@@QAEJH@Z  +
push dword ptr [esi+8]  +
mov ecx edi +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
mov ecx esi +
call ?Release@Value@DirectUI@@QAEXXZ  +
push 1  +
mov ecx edi +
call ?SetPlay@AnimationStrip@DirectUI@@QAEJ_N@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax 80004005h +
jmp loc_101E553  +
mov eax 80070057h +
jmp loc_101E553  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call ?SetPlay@AnimationStrip@DirectUI@@QAEJ_N@Z  +
push 0  +
mov ecx esi +
call ?SetFrameIndex@AnimationStrip@DirectUI@@QAEJH@Z  +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_101E597  +
test byte ptr [ecx+5Fh] 4 +
jnz loc_101E597  +
push esi  +
call ?Remove@Element@DirectUI@@QAEJPAV12@@Z  +
pop esi  +
retn   +
***
mov eax offset dword_1003F6C +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1003F80 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0AnimationStrip@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1003FD0 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi+4] +
mov esi ecx +
cmp eax off_1026710 +
jnz loc_101E61B  +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_101E60E  +
mov eax [ecx] +
call dword ptr [eax+88h]  +
mov ecx esi +
call sub_101E56C  +
mov byte ptr [edi+8] 1 +
jmp loc_101E622  +
push edi  +
call __imp_?OnEvent@Element@DirectUI@@UAEXPAUEvent@2@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ?GetClassInfoPtr@AnimationStrip@DirectUI@@SGPAUIClassInfo@2@XZ  +
***
mov edi edi +
push ecx  +
call sub_101840B  +
and dword_1027620 0 +
retn   +
***
call __EH_prolog3  +
push 8  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101E677  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101E5A9  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
push 9Ch  +
call sub_1004B07  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101E6B1  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101E5C3  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1AnimationStrip@DirectUI@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101E6D9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push edi  +
mov edi [ebp+8] +
mov ebx ecx +
cmp edi off_102670C +
jnz loc_101E70B  +
mov eax [edi+4] +
and eax 3 +
cmp eax [ebp+0Ch] +
jz loc_101E7BD  +
push ?FrameIndexProp@AnimationStrip@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push edi  +
call sub_101E444  +
test al al +
jz loc_101E78E  +
mov eax [edi+4] +
and eax 3 +
cmp eax [ebp+0Ch] +
jnz loc_101E78E  +
mov ecx ebx +
call ?GetPlay@AnimationStrip@DirectUI@@QAE_NXZ  +
test al al +
jz loc_101E7C4  +
mov ecx ebx +
call ?GetFrameIndex@AnimationStrip@DirectUI@@QAEHXZ  +
mov ecx [ebx+8Ch] +
dec ecx  +
cmp eax ecx +
jnz loc_101E7C4  +
and dword ptr [ebp-14h] 0 +
push esi  +
lea esi [ebx+98h] +
inc dword ptr [esi]  +
mov ecx ebx +
call sub_101E45F  +
cmp [esi] eax +
pop esi  +
setl byte ptr [ebp-4]  +
cmp byte ptr [ebp-4] 0 +
jnz loc_101E774  +
push 0  +
mov ecx ebx +
call ?SetPlay@AnimationStrip@DirectUI@@QAEJ_N@Z  +
mov eax off_1026710 +
push 0  +
mov [ebp-14h] eax +
push 1  +
lea eax [ebp-18h] +
push eax  +
mov ecx ebx +
call ?FireEvent@Element@DirectUI@@QAEXPAUEvent@2@_N1@Z  +
jmp loc_101E7C4  +
push ?PlayProp@AnimationStrip@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push edi  +
call sub_101E444  +
test al al +
jz loc_101E7C4  +
mov eax [edi+4] +
and eax 3 +
cmp eax [ebp+0Ch] +
jnz loc_101E7C4  +
call ?GetBoolTrue@Value@DirectUI@@SGPAV12@XZ  +
mov ecx [ebp+14h] +
push eax  +
call ?IsEqual@Value@DirectUI@@QAE_NPAV12@@Z  +
test al al +
jz loc_101E7C4  +
and dword ptr [ebx+98h] 0 +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnPropertyChanged@AnimationStrip@DirectUI@@MAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_101E64D  +
mov esi eax +
test esi esi +
jz loc_101E823  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101E81B  +
mov [edi] esi +
jmp loc_101E828  +
push esi  +
call sub_101840B  +
jmp loc_101E828  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
call sub_101E684  +
mov esi eax +
test esi esi +
jz loc_101E876  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@AnimationStrip@DirectUI@@QAEJIPAVElement@2@PAK@Z  +
mov ebx eax +
test ebx ebx +
jl loc_101E86A  +
mov [edi] esi +
jmp loc_101E87B  +
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_101E87B  +
mov ebx 8007000Eh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call sub_101E836  +
mov edi eax +
test edi edi +
jl loc_101E8B1  +
mov ecx [esi] +
push 0FFFFFFFEh  +
call ?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ?GetClassInfoPtr@AnimationStrip@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jnz loc_101E8E2  +
call ?Register@AnimationStrip@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_101E8EA  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_101E982  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
mov ebx eax +
push ebx  +
mov [ebp-14h] ebx +
call ds:EnterCriticalSection  +
xor edi edi +
mov [ebp-4] edi +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_101E96F  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
mov dword_1027620 edi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101E7E1  +
mov edi eax +
test edi edi +
jl loc_101E977  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_101E966  +
mov dword_1027620 esi +
jmp loc_101E977  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_101E977  +
mov eax [ebp-10h] +
mov dword_1027620 eax +
test ebx ebx +
jz loc_101E982  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax edi +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101E889  +
***
push offset off_1003F68  +
push offset aCkeyanimation  +
push offset __ImageBase  +
call sub_101E8BE  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_101E9D2  +
mov eax 80070057h +
jmp loc_101E9E3  +
cmp dword ptr [eax] 2Ch +
jnz loc_101E9CB  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1017E01  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101EA01  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_101EA2A  +
cmp eax [ecx+4] +
jge loc_101EA2A  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_101EA5B  +
cmp eax [ecx+4] +
jge loc_101EA5B  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_101EAAA  +
mov eax 80070057h +
jmp loc_101EAF1  +
mov eax [esi] +
cmp eax edi +
jz loc_101EAEF  +
cmp eax 2Ch +
jnz loc_101EAA3  +
cmp [esi+24h] edi +
jle loc_101EADA  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_101EA10  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_101EABE  +
pop ebx  +
lea ecx [esi+20h] +
call sub_101E9EC  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1017DEA  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
lea ecx [esi+30h] +
pop esi  +
jmp sub_101E9EC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_101EB7A  +
test ecx ecx +
jl loc_101EB7A  +
cmp ecx eax +
jnz loc_101EB6D  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_101EB83  +
push ecx  +
lea ecx [esi+30h] +
call loc_101EA41  +
mov esi [eax] +
jmp loc_101EB62  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov byte_1026AE8 1 +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_10261A8 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_101EAFC  +
mov eax offset __ImageBase +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_101EC2E  +
cmp dword ptr [ebp-94h] 5 +
jb loc_101EC4F  +
jmp loc_101EC4B  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_101EC4F  +
cmp dword ptr [ebp-94h] 4 +
ja loc_101EC4B  +
jnz loc_101EC4F  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_101EC4F  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_10041EC +
call sub_1017E01  +
test eax eax +
jge loc_101EC70  +
mov byte_1026AE8 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100C84F  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_10041FC +
jz locret_101ECBD  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_101ECBD  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_101ECF8  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_101ED16  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_101ED37  +
cmp [ebp+0Ch] eax +
jnz loc_101ED27  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_101ED37  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101ECA3  +
test byte ptr [ebp+8] 1 +
jz loc_101ED76  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1004210 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
ror byte ptr [ebp-0FBDEBBFh] cl +
xadd [eax] edx +
lea eax [ecx+8] +
retn   +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004210 +
jz loc_101EE01  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_101EE28  +
mov eax 80070057h +
jmp loc_101EE31  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_101EE56  +
mov eax [ebp+arg_8] +
jmp loc_101EE5C  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_101EE3A  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_100D7F0  +
test eax eax +
jl loc_101EEC5  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_101EE0D  +
test eax eax +
jl loc_101EEC5  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_101EEC5  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_101EEC7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_101EE3A  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100D7F0  +
test eax eax +
jl loc_101EF29  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_101EE0D  +
test eax eax +
jl loc_101EF29  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_101EF29  +
dec edi  +
mov [eax+8] edi +
jmp loc_101EF2B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10261A8 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10261A8 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10261A8 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_100C84F  +
jmp __EH_epilog3  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_101F078  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_101F038  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_101F06F  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101F028  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101F028  +
retn   +
***
jmp ds:_purecall  +
***
push offset loc_100CB22  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10261A8 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_100C84F  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov eax offset ?SetContentString@Element@DirectUI@@QAEJPBG@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetFontWeight@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?ForegroundProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?GetUnset@Value@DirectUI@@SGPAV12@XZ +
jmp loc_100D27E  +
***
mov eax offset ?SetForegroundColor@Element@DirectUI@@QAEJK@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetClassInfoPtr@HWNDElement@DirectUI@@SGPAUIClassInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?GetClassInfoPtr@Element@DirectUI@@SGPAUIClassInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ??0ClassInfoBase@DirectUI@@QAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?AddRef@ClassInfoBase@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
jmp ?AddRef@ClassInfoBase@DirectUI@@UAEXXZ  +
***
mov eax offset ?Release@ClassInfoBase@DirectUI@@UAEHXZ +
jmp loc_100D27E  +
***
jmp ?Release@ClassInfoBase@DirectUI@@UAEHXZ  +
***
mov eax offset ?EnumPropertyInfo@ClassInfoBase@DirectUI@@UAEPBUPropertyInfo@2@I@Z +
jmp loc_100D27E  +
***
jmp ?EnumPropertyInfo@ClassInfoBase@DirectUI@@UAEPBUPropertyInfo@2@I@Z  +
***
mov eax offset ?GetByClassIndex@ClassInfoBase@DirectUI@@UAEPBUPropertyInfo@2@I@Z +
jmp loc_100D27E  +
***
jmp ?GetByClassIndex@ClassInfoBase@DirectUI@@UAEPBUPropertyInfo@2@I@Z  +
***
mov eax offset ?GetPICount@ClassInfoBase@DirectUI@@UBEIXZ +
jmp loc_100D27E  +
***
jmp ?GetPICount@ClassInfoBase@DirectUI@@UBEIXZ  +
***
mov eax offset ?GetGlobalIndex@ClassInfoBase@DirectUI@@UBEIXZ +
jmp loc_100D27E  +
***
jmp ?GetGlobalIndex@ClassInfoBase@DirectUI@@UBEIXZ  +
***
mov eax offset ?GetName@ClassInfoBase@DirectUI@@UBEPBGXZ +
jmp loc_100D27E  +
***
jmp ?GetName@ClassInfoBase@DirectUI@@UBEPBGXZ  +
***
mov eax offset ?IsValidProperty@ClassInfoBase@DirectUI@@UBE_NPBUPropertyInfo@2@@Z +
jmp loc_100D27E  +
***
jmp ?IsValidProperty@ClassInfoBase@DirectUI@@UBE_NPBUPropertyInfo@2@@Z  +
***
mov eax offset ?IsSubclassOf@ClassInfoBase@DirectUI@@UBE_NPAUIClassInfo@2@@Z +
jmp loc_100D27E  +
***
jmp ?IsSubclassOf@ClassInfoBase@DirectUI@@UBE_NPAUIClassInfo@2@@Z  +
***
mov eax offset ?GetModule@ClassInfoBase@DirectUI@@UBEPAUHINSTANCE__@@XZ +
jmp loc_100D27E  +
***
jmp ?GetModule@ClassInfoBase@DirectUI@@UBEPAUHINSTANCE__@@XZ  +
***
mov eax offset ?IsGlobal@ClassInfoBase@DirectUI@@UBE_NXZ +
jmp loc_100D27E  +
***
jmp ?IsGlobal@ClassInfoBase@DirectUI@@UBE_NXZ  +
***
mov eax offset ?AddChild@ClassInfoBase@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
jmp ?AddChild@ClassInfoBase@DirectUI@@UAEXXZ  +
***
mov eax offset ?RemoveChild@ClassInfoBase@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
jmp ?RemoveChild@ClassInfoBase@DirectUI@@UAEXXZ  +
***
mov eax offset ?GetChildren@ClassInfoBase@DirectUI@@UBEHXZ +
jmp loc_100D27E  +
***
jmp ?GetChildren@ClassInfoBase@DirectUI@@UBEHXZ  +
***
mov eax offset ?AssertPIZeroRef@ClassInfoBase@DirectUI@@UBEXXZ +
jmp loc_100D27E  +
***
jmp ?AssertPIZeroRef@ClassInfoBase@DirectUI@@UBEXXZ  +
***
mov eax offset ??1ClassInfoBase@DirectUI@@UAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?GetRoot@Element@DirectUI@@QAEPAV12@XZ +
jmp loc_100D27E  +
***
mov eax offset ?GetHeight@Element@DirectUI@@QAEHXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetY@Element@DirectUI@@QAEHXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetWidth@Element@DirectUI@@QAEHXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetX@Element@DirectUI@@QAEHXZ +
jmp loc_100D27E  +
***
mov eax offset ?SetAccName@Element@DirectUI@@QAEJPBG@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?ClassProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?Release@Value@DirectUI@@QAEXXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetContentString@Element@DirectUI@@QAEPBGPAPAVValue@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z +
jmp loc_100D27E  +
***
mov eax offset ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?CreateGraphic@Value@DirectUI@@SGPAV12@PBGGGPAUHINSTANCE__@@_N2@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ??1CritSecLock@DirectUI@@QAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?Register@ClassInfoBase@DirectUI@@QAEJXZ +
jmp loc_100D27E  +
***
mov eax offset ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ +
jmp loc_100D27E  +
***
mov eax offset ?Register@Element@DirectUI@@SGJXZ +
jmp loc_100D27E  +
***
mov eax offset ?SetPressed@Button@DirectUI@@QAEJ_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?OnInput@Element@DirectUI@@UAEXPAUInputEvent@2@@Z +
jmp loc_100D27E  +
***
jmp ?OnInput@Element@DirectUI@@UAEXPAUInputEvent@2@@Z  +
***
mov eax offset ?SetLayoutPos@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ??0Element@DirectUI@@QAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?OnPropertyChanged@Element@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
jmp ?OnPropertyChanged@Element@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
mov eax offset ?OnGroupChanged@Element@DirectUI@@UAEXH_N@Z +
jmp loc_100D27E  +
***
jmp ?OnGroupChanged@Element@DirectUI@@UAEXH_N@Z  +
***
mov eax offset __imp_?OnDestroy@Element@DirectUI@@UAEXXZ +
jmp loc_100D27E  +
***
mov eax offset __imp_?UpdateTooltip@Element@DirectUI@@MAEXPAV12@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?ActivateTooltip@Element@DirectUI@@MAEXPAV12@K@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?RemoveTooltip@Element@DirectUI@@MAEXPAV12@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?GetAccessibleImpl@Element@DirectUI@@UAEJPAPAUIAccessible@@@Z +
jmp loc_100D27E  +
***
mov eax offset ??1Element@DirectUI@@UAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?Initialize@Element@DirectUI@@QAEJIPAV12@PAK@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetActive@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?OnEvent@Element@DirectUI@@UAEXPAUEvent@2@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_EnableAnimations +
jmp loc_100D27E  +
***
mov eax offset __imp_DisableAnimations +
jmp loc_100D27E  +
***
mov eax offset ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?LocationProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?SetAlpha@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?BackgroundProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?CreateColor@Value@DirectUI@@SGPAV12@KKE@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetAccDesc@Element@DirectUI@@QAEJPBG@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetTooltip@Element@DirectUI@@QAEJ_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?AccNameProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?GetAccRole@Element@DirectUI@@QAEHXZ +
jmp loc_100D27E  +
***
mov eax offset ?SetBackgroundColor@Element@DirectUI@@QAEJK@Z +
jmp loc_100D27E  +
***
mov eax offset ?SheetProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?AddRef@Value@DirectUI@@QAEXXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetSheet@DUIXmlParser@DirectUI@@QAEJPBGPAPAVValue@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetID@Element@DirectUI@@QAEJPBG@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetAccRole@Element@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?Add@Element@DirectUI@@QAEJPAV12@@Z +
jmp loc_100D27E  +
***
mov eax offset ?PaintContent@Element@DirectUI@@QAEXPAUHDC__@@PBUtagRECT@@@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetIntZero@Value@DirectUI@@SGPAV12@XZ +
jmp loc_100D27E  +
***
jmp ?GetIntZero@Value@DirectUI@@SGPAV12@XZ  +
***
mov eax offset ?GetValue@Element@DirectUI@@QAEPAVValue@2@PBUPropertyInfo@2@HPAUUpdateCache@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetCaptured@Button@DirectUI@@QAEJ_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetCaptured@Button@DirectUI@@QAE_NXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetPressed@Button@DirectUI@@QAE_NXZ +
jmp loc_100D27E  +
***
mov eax offset ??0Button@DirectUI@@QAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?OnPropertyChanged@Button@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
jmp ?OnPropertyChanged@Button@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
mov eax offset ?OnInput@Button@DirectUI@@UAEXPAUInputEvent@2@@Z +
jmp loc_100D27E  +
***
jmp ?OnInput@Button@DirectUI@@UAEXPAUInputEvent@2@@Z  +
***
mov eax offset __imp_?DefaultAction@Button@DirectUI@@UAEJXZ +
jmp loc_100D27E  +
***
mov eax offset __imp_?OnLostDialogFocus@Button@DirectUI@@UAE_NPAVDialogElement@2@@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_?OnReceivedDialogFocus@Button@DirectUI@@UAE_NPAVDialogElement@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ??1Button@DirectUI@@UAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?GetClassInfoPtr@Button@DirectUI@@SGPAUIClassInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset __imp_ColorFromEnumI +
jmp loc_100D27E  +
***
mov eax offset ?Initialize@Button@DirectUI@@QAEJIPAVElement@2@PAK@Z +
jmp loc_100D27E  +
***
mov eax offset ?Register@Button@DirectUI@@SGJXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetFontWeight@Element@DirectUI@@QAEHXZ +
jmp loc_100D27E  +
***
mov eax offset ?SetValue@Element@DirectUI@@QAEJPBUPropertyInfo@2@HPAVValue@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?CreateInt@Value@DirectUI@@SGPAV12@H@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetFrameDuration@AnimationStrip@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetFrameWidth@AnimationStrip@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?PostEvent@Element@DirectUI@@QAEXPAUEvent@2@@Z +
jmp loc_100D27E  +
***
mov eax offset ?CreateGraphic@Value@DirectUI@@SGPAV12@PAUHBITMAP__@@EI_N11@Z +
jmp loc_100D27E  +
***
mov eax offset __imp_ProcessAlphaBitmapI +
jmp loc_100D27E  +
***
mov eax offset ?SetPlay@AnimationStrip@DirectUI@@QAEJ_N@Z +
jmp loc_100D27E  +
***
mov eax offset ?SetFrameIndex@AnimationStrip@DirectUI@@QAEJH@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetClassInfoPtr@AnimationStrip@DirectUI@@SGPAUIClassInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ??0AnimationStrip@DirectUI@@QAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?OnDestroy@AnimationStrip@DirectUI@@MAEXXZ +
jmp loc_100D27E  +
***
jmp ?OnDestroy@AnimationStrip@DirectUI@@MAEXXZ  +
***
mov eax offset ?Paint@AnimationStrip@DirectUI@@MAEXPAUHDC__@@PBUtagRECT@@1PAU4@2@Z +
jmp loc_100D27E  +
***
jmp ?Paint@AnimationStrip@DirectUI@@MAEXPAUHDC__@@PBUtagRECT@@1PAU4@2@Z  +
***
mov eax offset ??1AnimationStrip@DirectUI@@UAE@XZ +
jmp loc_100D27E  +
***
mov eax offset ?OnPropertyChanged@AnimationStrip@DirectUI@@MAEXPBUPropertyInfo@2@HPAVValue@2@1@Z +
jmp loc_100D27E  +
***
mov eax offset ?IsEqual@Value@DirectUI@@QAE_NPAV12@@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetBoolTrue@Value@DirectUI@@SGPAV12@XZ +
jmp loc_100D27E  +
***
mov eax offset ?PlayProp@AnimationStrip@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?FireEvent@Element@DirectUI@@QAEXPAUEvent@2@_N1@Z +
jmp loc_100D27E  +
***
mov eax offset ?GetFrameIndex@AnimationStrip@DirectUI@@QAEHXZ +
jmp loc_100D27E  +
***
mov eax offset ?GetPlay@AnimationStrip@DirectUI@@QAE_NXZ +
jmp loc_100D27E  +
***
mov eax offset ?FrameIndexProp@AnimationStrip@DirectUI@@SGPBUPropertyInfo@2@XZ +
jmp loc_100D27E  +
***
mov eax offset ?Initialize@AnimationStrip@DirectUI@@QAEJIPAVElement@2@PAK@Z +
jmp loc_100D27E  +
***
mov eax offset ?Register@AnimationStrip@DirectUI@@SGJXZ +
jmp loc_100D27E  +
***
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
pop ecx  +
pop ecx  +
retn   +
***
pop ecx  +
pop ecx  +
retn   +
***
push 0  +
call ds:EncodePointer  +
mov dword_1027194 eax +
retn   +
***
push 0  +
call ds:EncodePointer  +
mov dword_1027198 eax +
retn   +
***
mov eax off_10266A0 +
mov dword_10272F8 eax +
retn   +
***
jmp fword ptr [eax+4Ah]  +
***
cmps   +
mov edx 5A68FFFFh +
add al [edx] +
add eax ebp +
push 59FFFECAh  +
retn   +
***
mov eax off_10266BC +
mov dword_102747C eax +
retn   +
***
retf 0FFFEh  +
***
pop ecx  +
retn   +
***
jmp fword ptr (byte_10257FF-1025878h)[eax]  +
***
jmp fword ptr (byte_10257FF-102584Bh)[eax]  +
***
retn   +
***
jmp sub_101C937  +
***
mov ecx offset dword_10266C0 +
jmp loc_101A6ED  +
***
mov ecx offset dword_10266D8 +
jmp loc_101A6ED  +
***
mov ecx offset dword_102768C +
jmp sub_101ECA3  +
***
mov dword_1027698 offset off_1004210 +
retn   +
***
retf   +
***
retf   +
***
jmp far ptr 7063h:6D656D04h  +
***
