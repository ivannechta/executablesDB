sub esp 1Ch +
xor eax eax +
cmp word ptr ds:400000h 5A4Dh +
mov ds:dword_51430C 1 +
mov ds:dword_514308 1 +
mov ds:dword_514304 1 +
mov ds:dword_514314 1 +
jz loc_4010B0  +
mov ds:dword_50F008 eax +
mov eax ds:dword_514318 +
test eax eax +
jz loc_4010A0  +
mov dword ptr [esp] 2 +
call __set_app_type  +
mov dword ptr [esp] 0FFFFFFFFh +
call sub_4BA070  +
mov edx ds:dword_51431C +
mov ds:dword_514930 eax +
mov ds:dword_514934 eax +
mov eax ds:_fmode +
mov [eax] edx +
call sub_4BA2B0  +
cmp dword_4C01DC 1 +
jz loc_401100  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov dword ptr [esp] 1 +
call __set_app_type  +
jmp loc_401062  +
***
mov edx ds:40003Ch +
cmp dword ptr [edx+400000h] 4550h +
lea ecx [edx+400000h] +
jnz loc_401048  +
movzx edx word ptr [ecx+18h] +
cmp dx 10Bh +
jz loc_401112  +
cmp dx 20Bh +
jnz loc_401048  +
cmp dword ptr [ecx+84h] 0Eh +
jbe loc_401048  +
mov edx [ecx+0F8h] +
xor eax eax +
test edx edx +
setnz al  +
jmp loc_401048  +
***
mov dword ptr [esp] offset sub_4BA320 +
call sub_4BA310  +
xor eax eax +
add esp 1Ch +
retn   +
***
cmp dword ptr [ecx+74h] 0Eh +
jbe loc_401048  +
mov ecx [ecx+0E8h] +
xor eax eax +
test ecx ecx +
setnz al  +
jmp loc_401048  +
***
sub esp 2Ch +
mov eax ds:dword_514320 +
mov dword ptr [esp+10h] offset dword_50F000 +
mov dword ptr [esp+8] offset dword_50F014 +
mov dword ptr [esp+4] offset dword_50F018 +
mov ds:dword_50F000 eax +
mov eax ds:dword_514324 +
mov dword ptr [esp] offset dword_50F01C +
mov [esp+0Ch] eax +
call __getmainargs  +
mov ds:dword_50F010 eax +
add esp 2Ch +
retn   +
***
mov ebp esp +
mov ecx 11h +
push edi  +
push esi  +
lea edx [ebp+var_5C] +
push ebx  +
mov edi edx +
sub esp 7Ch +
stos   +
mov al 30h +
call sub_4BB070  +
sub esp eax +
lea eax [esp+88h+var_6E+1] +
and eax 0FFFFFFF0h +
mov dword ptr [eax] 0CCCCCCCCh +
mov dword ptr [eax+4] 0CCCCCCCCh +
mov dword ptr [eax+8] 0CCCCCCCCh +
mov dword ptr [eax+0Ch] 0CCCCCCCCh +
mov dword ptr [eax+10h] 0CCCCCCCCh +
mov dword ptr [eax+14h] 0CCCCCCCCh +
mov dword ptr [eax+18h] 0CCCCCCCCh +
mov dword ptr [eax+1Ch] 0CCCCCCCCh +
and esp 0FFFFFFF0h +
mov esi ds:dword_514318 +
test esi esi +
jnz loc_401470  +
mov eax large fs:18h +
xor esi esi +
mov ebx [eax+4] +
mov edi ds:Sleep +
jmp loc_401216  +
cmp eax ebx +
jz loc_401410  +
mov [esp+88h+var_88] 3E8h +
call edi  +
sub esp 4 +
mov eax esi +
cmpxchg ds:dword_514938 ebx +
test eax eax +
jnz loc_401202  +
mov eax ds:dword_51493C +
xor ebx ebx +
cmp eax 1 +
jz loc_401423  +
mov eax ds:dword_51493C +
test eax eax +
jz loc_401481  +
mov ds:dword_50F004 1 +
mov eax ds:dword_51493C +
cmp eax 1 +
jz loc_40143D  +
test ebx ebx +
jz loc_401463  +
mov eax ds:off_50D470 +
test eax eax +
jz loc_401286  +
mov [esp+88h+var_80] 0 +
mov [esp+88h+var_84] 2 +
mov [esp+88h+var_88] 0 +
call eax  +
sub esp 0Ch +
call sub_4BA620  +
mov [esp+88h+var_88] offset sub_4BA160 +
call ds:SetUnhandledExceptionFilter  +
sub esp 4 +
mov ds:dword_514328 eax +
mov [esp+88h+var_88] offset dword_401000 +
call near ptr off_4C01E4  +
call sub_4BA8F0  +
mov eax ds:_acmdln +
mov ds:dword_5146AC 400000h +
mov eax [eax] +
test eax eax +
jz loc_401309  +
xor ecx ecx +
jmp loc_4012E0  +
test dl dl +
jz loc_401304  +
test ecx ecx +
jz loc_4012F9  +
mov ecx 1 +
add eax 1 +
movzx edx byte ptr [eax] +
cmp dl 20h +
jle loc_4012D0  +
mov ebx ecx +
xor ebx 1 +
cmp dl 22h +
cmovz ecx ebx +
jmp loc_4012DD  +
test dl dl +
jz loc_401304  +
add eax 1 +
movzx edx byte ptr [eax] +
cmp dl 20h +
jle loc_4012F5  +
mov ds:dword_5146A8 eax +
mov ebx ds:dword_514318 +
test ebx ebx +
jz loc_401328  +
movzx edx [ebp+var_2C] +
mov eax 0Ah +
test [ebp+var_30] 1 +
cmovnz eax edx +
mov dword_4BE000 eax +
mov eax ds:dword_50F01C +
mov [ebp-70h] eax +
mov esi eax +
lea eax ds:4[eax*4] +
mov [ebp+var_74] eax +
mov [esp+88h+var_88] eax +
call malloc  +
test esi esi +
mov edi ds:dword_50F018 +
mov [ebp+var_6E+2] eax +
jle loc_4014A4  +
xor ebx ebx +
mov esi edi +
lea esi [esi+0] +
mov eax [esi+ebx*4] +
mov [esp+88h+var_88] eax +
call strlen  +
lea edi [eax+1] +
mov [esp+88h+var_88] edi +
call malloc  +
mov ecx [ebp+var_6E+2] +
mov [ecx+ebx*4] eax +
mov ecx [esi+ebx*4] +
add ebx 1 +
mov [esp+88h+var_80] edi +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_84] ecx +
call memcpy  +
cmp ebx [ebp-70h] +
jnz loc_401360  +
mov eax [ebp+var_74] +
sub eax 4 +
mov esi [ebp+var_6E+2] +
mov dword ptr [esi+eax] 0 +
mov ds:dword_50F018 esi +
call sub_4BA980  +
mov edx ds:dword_50F014 +
mov eax ds:__initenv +
mov [eax] edx +
mov eax ds:dword_50F01C +
mov ecx ds:dword_50F014 +
mov edx ds:dword_50F018 +
mov [esp+88h+var_88] eax +
mov [esp+88h+var_80] ecx +
mov [esp+88h+var_84] edx +
call sub_4BC770  +
mov ecx ds:dword_50F008 +
test ecx ecx +
mov ds:dword_50F00C eax +
jz loc_4014AB  +
mov edx ds:dword_50F004 +
test edx edx +
jnz loc_401407  +
call _cexit  +
mov eax ds:dword_50F00C +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_51493C +
mov ebx 1 +
cmp eax 1 +
jnz loc_401234  +
mov [esp+88h+var_88] 1Fh +
call _amsg_exit  +
mov eax ds:dword_51493C +
cmp eax 1 +
jnz loc_401259  +
mov [esp+88h+var_84] offset unk_516008 +
mov [esp+88h+var_88] offset unk_516000 +
call _initterm  +
test ebx ebx +
mov ds:dword_51493C 2 +
jnz loc_401261  +
xchg ebx ds:dword_514938 +
jmp loc_401261  +
mov [esp+88h+var_88] edx +
call ds:GetStartupInfoA  +
sub esp 4 +
jmp loc_4011EF  +
mov ds:dword_51493C 1 +
mov [esp+88h+var_84] offset unk_516018 +
mov [esp+88h+var_88] offset unk_51600C +
call _initterm  +
jmp loc_40124B  +
xor eax eax +
jmp loc_40139D  +
mov [esp+88h+var_88] eax +
nop   +
call exit  +
***
sub esp 0Ch +
mov ds:dword_514318 1 +
call sub_4BA9A0  +
add esp 0Ch +
jmp sub_401180  +
***
sub esp 0Ch +
mov ds:dword_514318 0 +
call sub_4BA9A0  +
add esp 0Ch +
jmp sub_401180  +
***
mov eax dword_4C01F0 +
test eax eax +
jz locret_40154C  +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [esp+1Ch+var_1C] offset aLibgcj13_dll +
call ds:GetModuleHandleA  +
mov edx 0 +
sub esp 4 +
test eax eax +
jz loc_40153E  +
mov [esp+1Ch+var_18] offset a_jv_registercl +
mov [esp+1Ch+var_1C] eax +
call ds:GetProcAddress  +
sub esp 8 +
mov edx eax +
test edx edx +
jz locret_40154B  +
mov [esp+1Ch+var_1C] offset dword_4C01F0 +
call edx  +
leave   +
retn   +
***
mov ebp esp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 14h +
mov eax ds:_iob +
mov [esp+18h+var_10] 9 +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset aStackNow +
add eax 40h +
mov [esp+18h+var_C] eax +
call fwrite  +
cmp ebx esi +
ja loc_4015BB  +
movsx eax word ptr [ebx] +
add ebx 2 +
mov [esp+18h+var_14] offset aD +
mov [esp+18h+var_10] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+18h+var_18] eax +
call fprintf  +
cmp esi ebx +
jnb loc_401595  +
mov eax ds:_iob +
mov [esp+18h+var_18] 0Ah +
add eax 40h +
mov [esp+18h+var_14] eax +
call fputc  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 18h +
mov eax ds:off_4C5B80[edx*4] +
cmp edx 99h +
mov ecx offset aToken +
mov edx offset aNterm +
cmovg ecx edx +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_C] eax +
mov [esp+18h+var_14] offset aSS_2 +
call fprintf  +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] 29h +
call fputc  +
add esp 18h +
pop ebx  +
retn   +
***
test eax eax +
mov ecx offset aDeleting +
cmovz eax ecx +
mov ecx ds:dword_5146C8 +
test ecx ecx +
jnz loc_401645  +
retn   +
sub esp 1Ch +
mov [esp+1Ch+var_14] eax +
mov eax ds:_iob +
mov [esp+1Ch+var_18] offset aS_6 +
mov [esp+1Ch+var_10] edx +
add eax 40h +
mov [esp+1Ch+var_1C] eax +
call fprintf  +
mov eax ds:_iob +
mov edx [esp+1Ch+var_10] +
add eax 40h +
call sub_4015E0  +
mov eax ds:_iob +
mov [esp+1Ch+var_1C] 0Ah +
add eax 40h +
mov [esp+1Ch+var_18] eax +
call fputc  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_50F44C +
test eax eax +
jnz loc_401710  +
mov eax ds:dword_50F028 +
sub eax 1 +
cmp eax 12h +
jbe loc_4016E0  +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] offset aPFSS +
mov [esp+1Ch+var_14] eax +
call sub_418450  +
add esp 1Ch +
retn   +
mov eax ds:dword_50F040[eax*4] +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] offset aPFSSInS +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] eax +
call sub_418450  +
add esp 1Ch +
retn   +
call sub_405E40  +
mov [esp+1Ch+var_1C] offset aPSFileFormatNo +
mov [esp+1Ch+var_18] eax +
call sub_418450  +
jmp loc_4016AC  +
***
push esi  +
push ebx  +
sub esp 0E7Ch +
mov eax ds:dword_5146C8 +
test eax eax +
jnz loc_401EE4  +
lea ebp [esp+0E7Ch+var_C8C] +
xor edi edi +
lea ebx [esp+0E7Ch+var_E1C] +
mov esi edi +
mov ds:dword_5146B4 0 +
mov ds:dword_5146B0 0FFFFFFFEh +
mov [esp+0E7Ch+var_E58] 0C8h +
mov [esp+0E7Ch+var_E50] ebp +
mov [esp+0E7Ch+var_E5C] ebx +
mov [esp+0E7Ch+var_E4C] 0 +
mov eax [esp+0E7Ch+var_E58] +
mov ecx [esp+0E7Ch+var_E5C] +
mov [ebx] si +
lea eax [eax+eax-2] +
lea edx [ecx+eax] +
cmp ebx edx +
jb loc_40187B  +
mov ebp ebx +
sub ebp ecx +
sar ebp 1 +
add ebp 1 +
cmp [esp+0E7Ch+var_E58] 270Fh +
ja loc_403D20  +
add eax 2 +
mov edi 2710h +
cmp eax 2710h +
cmova eax edi +
mov [esp+0E7Ch+var_E58] eax +
lea eax [eax+eax*8] +
lea eax [eax+eax+0Fh] +
mov [esp+0E7Ch+var_E7C] eax +
call malloc  +
test eax eax +
mov edi eax +
jz loc_403D20  +
mov ecx [esp+0E7Ch+var_E5C] +
lea ebx [ebp+ebp+0] +
mov [esp+0E7Ch+var_E74] ebx +
shl ebp 4 +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E78] ecx +
call memcpy  +
mov eax [esp+0E7Ch+var_E58] +
mov [esp+0E7Ch+var_E44] ebp +
add eax eax +
mov edx eax +
mov [esp+0E7Ch+var_E48] eax +
mov eax ebp +
mov [esp+0E7Ch+var_E74] eax +
mov eax [esp+0E7Ch+var_E50] +
lea ebp [edx+0Fh] +
and ebp 0FFFFFFF0h +
lea edx [edi+ebp] +
mov [esp+0E7Ch+var_E7C] edx +
mov [esp+0E7Ch+var_E78] eax +
mov [esp+0E7Ch+var_E54] edx +
call memcpy  +
mov ecx [esp+0E7Ch+var_E5C] +
lea eax [esp+0E7Ch+var_E1C] +
cmp ecx eax +
jz loc_401842  +
mov [esp+0E7Ch+var_E7C] ecx +
call free  +
mov eax [esp+0E7Ch+var_E54] +
lea ebx [edi+ebx-2] +
mov ecx [esp+0E7Ch+var_E44] +
lea ebp [eax+ecx-10h] +
mov eax ds:dword_5146C8 +
test eax eax +
jnz loc_401D86  +
mov eax [esp+0E7Ch+var_E48] +
lea eax [edi+eax-2] +
cmp ebx eax +
jnb loc_403D8B  +
mov eax [esp+0E7Ch+var_E54] +
mov [esp+0E7Ch+var_E5C] edi +
mov [esp+0E7Ch+var_E50] eax +
mov eax ds:dword_5146C8 +
test eax eax +
jnz loc_401C32  +
cmp esi 11h +
jz loc_403D84  +
movzx edi ds:word_4C4AC0[esi+esi] +
movsx ecx di +
cmp ecx 0FFFFFD78h +
jz loc_401902  +
mov eax ds:dword_5146B0 +
cmp eax 0FFFFFFFEh +
jz loc_401CB0  +
test eax eax +
jle loc_401CD7  +
cmp eax 181h +
mov [esp+0E7Ch+var_E54] 2 +
ja loc_4018D4  +
movzx eax ds:byte_4C6300[eax] +
mov [esp+0E7Ch+var_E54] eax +
mov eax ds:dword_5146C8 +
test eax eax +
jnz loc_401D30  +
mov eax [esp+0E7Ch+var_E54] +
lea edx [ecx+eax] +
cmp edx 77Bh +
ja loc_401902  +
movsx eax ds:word_4C2420[edx+edx] +
cmp eax [esp+0E7Ch+var_E54] +
jz loc_401F21  +
movzx eax ds:word_4C4460[esi+esi] +
test eax eax +
mov [esp+0E7Ch+var_E54] eax +
jz loc_401A77  +
mov eax [esp+0E7Ch+var_E54] +
mov esi ds:dword_5146C8 +
movzx eax ds:byte_4C1940[eax] +
mov ecx eax +
mov [esp+0E7Ch+var_E48] eax +
mov eax 1 +
sub eax ecx +
shl eax 4 +
add eax ebp +
test esi esi +
mov edx [eax] +
mov [esp+0E7Ch+var_E3C] edx +
mov edx [eax+4] +
mov [esp+0E7Ch+var_E38] edx +
mov edx [eax+8] +
mov [esp+0E7Ch+var_E34] edx +
mov eax [eax+0Ch] +
mov [esp+0E7Ch+var_E30] eax +
jnz loc_401DB0  +
mov eax [esp+0E7Ch+var_E54] +
sub eax 8 +
cmp eax 169h +
ja loc_4019F0  +
jmp ds:off_4C131C[eax*4]  +
mov eax [ebp+0] +
mov edi offset aFilehdr +
mov ecx 8 +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp+4] +
mov [esp+0E7Ch+var_E38] eax +
mov eax [ebp+8] +
mov [esp+0E7Ch+var_E34] eax +
mov eax [ebp+0Ch] +
mov [esp+0E7Ch+var_E30] eax +
mov eax [ebp-20h] +
mov esi eax +
cmps   +
jnz loc_4019AF  +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_403DD8  +
mov edi offset aPhdrs +
mov ecx 6 +
mov esi eax +
cmps   +
jnz loc_4019CA  +
mov edx [ebp-10h] +
test edx edx +
jz loc_403DE5  +
mov edi offset aFlags +
mov ecx 6 +
mov esi eax +
cmps   +
jnz loc_403D99  +
mov edx [ebp-10h] +
test edx edx +
jz loc_403D99  +
mov [esp+0E7Ch+var_E30] edx +
lea esi [esi+0] +
mov eax ds:dword_5146C8 +
test eax eax +
jnz loc_401E60  +
mov ecx [esp+0E7Ch+var_E48] +
mov esi ebp +
mov eax ecx +
shl eax 4 +
sub esi eax +
mov eax ecx +
add eax eax +
sub ebx eax +
mov eax [esp+0E7Ch+var_E54] +
movzx edi ds:word_4C1AC0[eax+eax] +
mov eax [esp+0E7Ch+var_E3C] +
lea ebp [esi+10h] +
movzx ecx word ptr [ebx] +
mov [esi+10h] eax +
mov eax [esp+0E7Ch+var_E38] +
movsx edx cx +
mov [esi+14h] eax +
mov eax [esp+0E7Ch+var_E34] +
mov [esi+18h] eax +
mov eax [esp+0E7Ch+var_E30] +
mov [esi+1Ch] eax +
lea eax [edi-9Ah] +
movsx esi ds:word_4C4340[eax+eax] +
add edx esi +
cmp edx 77Bh +
ja loc_401A67  +
cmp cx ds:word_4C2420[edx+edx] +
jz loc_401F77  +
movsx esi ds:word_4C4220[eax+eax] +
add ebx 2 +
jmp loc_401782  +
mov eax ds:dword_5146B0 +
mov edx 0FFFFFFFEh +
cmp eax 0FFFFFFFEh +
jz loc_401A96  +
cmp eax 181h +
mov edx 2 +
jbe loc_401C80  +
mov ecx [esp+0E7Ch+var_E4C] +
test ecx ecx +
jz loc_401C93  +
cmp [esp+0E7Ch+var_E4C] 3 +
jz loc_401C53  +
movsx eax di +
mov edi [esp+0E7Ch+var_E5C] +
jmp loc_401ABE  +
movsx eax ds:word_4C4AC0[esi+esi] +
cmp eax 0FFFFFD78h +
jz loc_401ADA  +
add eax 1 +
cmp eax 77Bh +
ja loc_401ADA  +
cmp ds:word_4C2420[eax+eax] 1 +
jz loc_401B12  +
cmp ebx edi +
jz loc_401BB3  +
movzx edx ds:word_4C1DC0[esi+esi] +
mov eax offset aErrorPopping +
sub ebx 2 +
sub ebp 10h +
call sub_401630  +
mov ecx ds:dword_5146C8 +
movsx esi word ptr [ebx] +
test ecx ecx +
jz loc_401AB6  +
mov edx ebx +
mov eax edi +
call sub_401560  +
jmp loc_401AB6  +
movsx eax ds:word_4C3320[eax+eax] +
test eax eax +
jle loc_401ADA  +
mov edx ds:dword_5146B8 +
mov edi eax +
mov eax ebp +
add ebp 10h +
mov esi edi +
mov [esp+0E7Ch+var_E4C] 3 +
mov [eax+10h] edx +
mov edx ds:dword_5146BC +
mov [eax+14h] edx +
mov edx ds:dword_5146C0 +
mov [eax+18h] edx +
mov edx ds:dword_5146C4 +
mov [eax+1Ch] edx +
mov edx ds:dword_5146C8 +
test edx edx +
jz loc_401A6F  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E74] offset aShifting +
mov [esp+0E7Ch+var_E78] offset aS_6 +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
mov eax ds:_iob +
movzx edx ds:word_4C1DC0[edi+edi] +
add eax 40h +
call sub_4015E0  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E7C] 0Ah +
add eax 40h +
mov [esp+0E7Ch+var_E78] eax +
call fputc  +
jmp loc_401A6F  +
mov esi 1 +
mov eax ds:dword_5146B0 +
cmp eax 0FFFFFFFEh +
jz loc_401BDC  +
cmp eax 181h +
mov edx 2 +
jbe loc_401C70  +
mov eax offset aCleanupDiscard +
call sub_401630  +
mov eax ds:dword_5146C8 +
test eax eax +
jnz loc_401F11  +
cmp [esp+0E7Ch+var_E5C] ebx +
mov edi [esp+0E7Ch+var_E5C] +
jz loc_401C0F  +
movsx eax word ptr [ebx] +
sub ebx 2 +
movzx edx ds:word_4C1DC0[eax+eax] +
mov eax offset aCleanupPopping +
call sub_401630  +
cmp edi ebx +
jnz loc_401BF3  +
lea eax [esp+0E7Ch+var_E1C] +
cmp [esp+0E7Ch+var_E5C] eax +
jz loc_401C25  +
mov eax [esp+0E7Ch+var_E5C] +
mov [esp+0E7Ch+var_E7C] eax +
call free  +
add esp 0E7Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E74] esi +
mov [esp+0E7Ch+var_E78] offset aEnteringStateD +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
jmp loc_401888  +
cmp eax 0 +
jg loc_401F84  +
lea esi [esi+0] +
jnz loc_401AAD  +
mov esi 1 +
nop   +
lea esi [esi+0] +
movzx edx ds:byte_4C6300[eax] +
jmp loc_401BD2  +
mov ecx [esp+0E7Ch+var_E4C] +
movzx edx ds:byte_4C6300[eax] +
test ecx ecx +
jnz loc_401AA2  +
mov [esp+0E7Ch+var_E7C] offset aSyntaxError +
add ds:dword_5146B4 1 +
call sub_4016A0  +
jmp loc_401AAD  +
mov eax ds:dword_5146C8 +
test eax eax +
jnz loc_401FA8  +
mov [esp+0E7Ch+var_E54] ecx +
call sub_4041F0  +
mov ecx [esp+0E7Ch+var_E54] +
test eax eax +
mov ds:dword_5146B0 eax +
jg loc_4018BA  +
mov eax ds:dword_5146C8 +
mov ds:dword_5146B0 0 +
mov [esp+0E7Ch+var_E54] 0 +
test eax eax +
jz loc_4018E1  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E74] 15h +
mov [esp+0E7Ch+var_E78] 1 +
mov [esp+0E7Ch+var_E7C] offset aNowAtEndOfInpu +
add eax 40h +
mov [esp+0E7Ch+var_E70] eax +
mov [esp+0E7Ch+var_E48] ecx +
call fwrite  +
mov ecx [esp+0E7Ch+var_E48] +
jmp loc_4018E1  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E74] offset aNextTokenIs +
mov [esp+0E7Ch+var_E78] offset aS_6 +
mov [esp+0E7Ch+var_E48] ecx +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
mov eax ds:_iob +
mov edx [esp+0E7Ch+var_E54] +
add eax 40h +
call sub_4015E0  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E7C] 0Ah +
add eax 40h +
mov [esp+0E7Ch+var_E78] eax +
call fputc  +
mov ecx [esp+0E7Ch+var_E48] +
jmp loc_4018E1  +
mov eax [esp+0E7Ch+var_E58] +
mov [esp+0E7Ch+var_E78] offset aStackSizeIncre +
mov [esp+0E7Ch+var_E74] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
jmp loc_40185F  +
mov ecx [esp+0E7Ch+var_E54] +
mov [esp+0E7Ch+var_E78] offset aReducingStackB +
movzx eax ds:word_4C6000[ecx+ecx] +
mov [esp+0E7Ch+var_E70] eax +
mov eax ecx +
sub eax 1 +
mov [esp+0E7Ch+var_E74] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
mov ecx [esp+0E7Ch+var_E48] +
test ecx ecx +
jz loc_40195C  +
mov eax ecx +
mov edi ebx +
xor esi esi +
add eax eax +
mov [esp+0E7Ch+var_E44] ebx +
sub edi eax +
mov ebx esi +
mov esi ecx +
nop   +
mov eax ds:_iob +
add ebx 1 +
mov [esp+0E7Ch+var_E74] ebx +
mov [esp+0E7Ch+var_E78] offset aD_0 +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
movsx eax word ptr [edi+ebx*2] +
movzx edx ds:word_4C1DC0[eax+eax] +
mov eax ds:_iob +
add eax 40h +
call sub_4015E0  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E7C] 0Ah +
add eax 40h +
mov [esp+0E7Ch+var_E78] eax +
call fputc  +
cmp esi ebx +
jg loc_401E00  +
mov ebx [esp+0E7Ch+var_E44] +
jmp loc_40195C  +
mov eax ds:_iob +
mov esi ebp +
mov [esp+0E7Ch+var_E74] offset asc_4C1295 +
mov [esp+0E7Ch+var_E78] offset aS_6 +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
mov eax [esp+0E7Ch+var_E54] +
movzx edi ds:word_4C1AC0[eax+eax] +
mov eax ds:_iob +
mov edx edi +
add eax 40h +
call sub_4015E0  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E7C] 0Ah +
add eax 40h +
mov [esp+0E7Ch+var_E78] eax +
call fputc  +
mov ecx [esp+0E7Ch+var_E48] +
mov ebp ds:dword_5146C8 +
mov eax ecx +
shl eax 4 +
sub esi eax +
mov eax ecx +
add eax eax +
sub ebx eax +
test ebp ebp +
jz loc_401A1C  +
mov eax [esp+0E7Ch+var_E5C] +
mov edx ebx +
call sub_401560  +
jmp loc_401A1C  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E74] 0Fh +
mov [esp+0E7Ch+var_E78] 1 +
mov [esp+0E7Ch+var_E7C] offset aStartingParse +
add eax 40h +
mov [esp+0E7Ch+var_E70] eax +
call fwrite  +
jmp loc_401747  +
mov eax [esp+0E7Ch+var_E5C] +
mov edx ebx +
call sub_401560  +
jmp loc_401BE9  +
movsx esi ds:word_4C3320[edx+edx] +
test esi esi +
jle loc_401F9D  +
mov edi ds:dword_5146C8 +
cmp [esp+0E7Ch+var_E4C] 1 +
adc [esp+0E7Ch+var_E4C] 0FFFFFFFFh +
test edi edi +
jnz loc_403D36  +
mov eax ds:dword_5146B8 +
add ebp 10h +
mov ds:dword_5146B0 0FFFFFFFEh +
mov [ebp+0] eax +
mov eax ds:dword_5146BC +
mov [ebp+4] eax +
mov eax ds:dword_5146C0 +
mov [ebp+8] eax +
mov eax ds:dword_5146C4 +
mov [ebp+0Ch] eax +
jmp loc_401A6F  +
movsx esi ds:word_4C3320[edx+edx] +
jmp loc_401A6F  +
mov eax offset aErrorDiscardin +
call sub_401630  +
mov ds:dword_5146B0 0FFFFFFFEh +
jmp loc_401AAD  +
neg esi  +
mov [esp+0E7Ch+var_E54] esi +
jmp loc_401916  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E74] 11h +
mov [esp+0E7Ch+var_E78] 1 +
mov [esp+0E7Ch+var_E7C] offset aReadingAToken +
add eax 40h +
mov [esp+0E7Ch+var_E70] eax +
mov [esp+0E7Ch+var_E54] ecx +
call fwrite  +
mov ecx [esp+0E7Ch+var_E54] +
jmp loc_401CBD  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 110h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 10Fh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 114h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 113h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 2Dh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 2Bh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 25h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 2Fh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 2Ah +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] 7Eh +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] 21h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] eax +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] 2Dh +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
call sub_405E20  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
call sub_405DC0  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 8 +
call sub_4A05F0  +
mov edx [ebp-20h] +
mov [eax+4] edx +
mov edx [ebp+0] +
mov [eax] edx +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 8 +
call sub_4A05F0  +
mov edx [ebp-10h] +
mov [eax+4] edx +
mov edx [ebp+0] +
mov [eax] edx +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 0 +
call sub_40F480  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 1 +
call sub_40F480  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_417490  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_417480  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_417480  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 0 +
call sub_417480  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F440  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 1 +
mov [esp+0E7Ch+var_E78] eax +
mov eax ds:dword_50F090 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40D910  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] eax +
mov eax ds:dword_50F090 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40D910  +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov edx ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E78] offset aExtern +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E74] edx +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax ds:dword_50F090 +
mov [eax+18h] edx +
jmp loc_4019F0  +
mov eax ds:dword_50F090 +
mov edx [ebp+0] +
mov [eax+0Ch] edx +
mov edx [eax+10h] +
mov [eax+1Ch] edx +
jmp loc_4019F0  +
call sub_405E20  +
jmp loc_4019F0  +
lea esi [esi+0] +
call sub_405CA0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_419100  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 1 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40B160  +
mov ds:dword_50F090 eax +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E74] 1 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416D50  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416D50  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E74] 1 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416CB0  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov esi [ebp+0] +
mov [esp+0E7Ch+var_E7C] 103h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov edx [ebp-10h] +
mov [esp+0E7Ch+var_E74] esi +
mov [esp+0E7Ch+var_E7C] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov edx [ebp-20h] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E7C] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_416CB0  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416CB0  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 7Ch +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 26h +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 114h +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 113h +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 2Fh +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 2Ah +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 2Dh +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 2Bh +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] offset aFillValue +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_417210  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
call sub_405E20  +
jmp loc_4019F0  +
call sub_405CA0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_419100  +
jmp loc_4019F0  +
call sub_405E20  +
mov edx [ebp-20h] +
mov eax [ebp-40h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416DA0  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
nop   +
call sub_405DC0  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F2E0  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] eax +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F320  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 0Fh +
mov ds:dword_51470C 1 +
call sub_40F410  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 0Fh +
call sub_40F410  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 6 +
call sub_40F410  +
jmp loc_4019F0  +
mov ds:dword_50F024 0 +
jmp loc_4019F0  +
mov ds:dword_50F024 1 +
jmp loc_4019F0  +
mov eax [ebp-40h] +
mov [ebp-24h] eax +
mov eax [ebp-10h] +
mov edx ds:dword_50F024 +
mov [esp+0E7Ch+var_E78] eax +
lea eax [ebp-30h] +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40EE80  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov edx ds:dword_50F024 +
mov [esp+0E7Ch+var_E78] eax +
lea eax [ebp-30h] +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40EE80  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E2C] 0 +
mov edx ds:dword_50F024 +
mov [esp+0E7Ch+var_E28] 0 +
mov [esp+0E7Ch+var_E24] 0 +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E20] eax +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
lea eax [esp+0E7Ch+var_E2C] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40EE80  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov edx ds:dword_50F024 +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E78] eax +
mov [esp+0E7Ch+var_E74] edx +
call sub_40EE80  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E28] 0 +
mov [esp+0E7Ch+var_E24] 0 +
mov [esp+0E7Ch+var_E2C] eax +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E20] eax +
mov eax ds:dword_50F024 +
mov [esp+0E7Ch+var_E74] eax +
lea eax [esp+0E7Ch+var_E2C] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40EE80  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E28] 0 +
mov [esp+0E7Ch+var_E24] 0 +
mov [esp+0E7Ch+var_E2C] eax +
mov eax ds:dword_50F024 +
mov [esp+0E7Ch+var_E20] 0 +
mov [esp+0E7Ch+var_E74] eax +
lea eax [esp+0E7Ch+var_E2C] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40EE80  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 14h +
call sub_4A05F0  +
mov dword ptr [eax] 0 +
mov edx [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
mov [eax+4] edx +
mov edx [ebp+4] +
mov [eax+8] edx +
mov edx [ebp+8] +
mov [eax+0Ch] edx +
mov edx [ebp+0Ch] +
mov [eax+10h] edx +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 14h +
call sub_4A05F0  +
mov edx [ebp-20h] +
mov [eax] edx +
mov edx [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
mov [eax+4] edx +
mov edx [ebp+4] +
mov [eax+8] edx +
mov edx [ebp+8] +
mov [eax+0Ch] edx +
mov edx [ebp+0Ch] +
mov [eax+10h] edx +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 8 +
call sub_4A05F0  +
mov edx [ebp+0] +
mov dword ptr [eax+4] 0 +
mov [eax] edx +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 8 +
call sub_4A05F0  +
mov edx [ebp+0] +
mov [eax] edx +
mov edx [ebp-10h] +
mov [esp+0E7Ch+var_E3C] eax +
mov [eax+4] edx +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 10h +
call sub_4A05F0  +
mov edx [ebp-10h] +
mov dword ptr [eax] 0 +
mov [eax+8] edx +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+4] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 10h +
call sub_4A05F0  +
mov edx [ebp+0] +
cmp byte ptr [edx] 21h +
jz loc_403DB6  +
mov dword ptr [eax] 0 +
mov [eax+4] edx +
mov dword ptr [eax+8] 0 +
mov edx [ebp-20h] +
mov [esp+0E7Ch+var_E3C] eax +
mov [eax+0Ch] edx +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 10h +
call sub_4A05F0  +
mov edx [ebp+0] +
cmp byte ptr [edx] 21h +
jz loc_403DC7  +
mov dword ptr [eax] 0 +
mov [eax+4] edx +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E34] 6 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E34] 1 +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E38] eax +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E34] 2 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E34] 4 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E34] 1 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E34] 3 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E34] 5 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E34] 2 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E34] 1 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E34] 0 +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E38] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E34] 0 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E30] 0 +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] offset a?_1 +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] offset asc_4C11CB +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
call sub_405E20  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416DA0  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
call sub_405DC0  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F220  +
jmp loc_4019F0  +
movzx edx byte ptr [ebp-20h] +
movzx eax byte ptr ds:dword_5146EC +
shl edx 7 +
and eax 7Fh +
or eax edx +
mov byte ptr ds:dword_5146EC al +
jmp loc_4019F0  +
movzx eax byte ptr ds:dword_5146EC +
mov edx eax +
or eax 0FFFFFF80h +
shr dl 7 +
movzx edx dl +
mov [esp+0E7Ch+var_E3C] edx +
mov byte ptr ds:dword_5146EC al +
jmp loc_4019F0  +
movzx edx byte ptr [ebp-20h] +
movzx eax byte ptr ds:dword_5146EC +
shl edx 7 +
and eax 7Fh +
or eax edx +
mov byte ptr ds:dword_5146EC al +
jmp loc_4019F0  +
movzx eax byte ptr ds:dword_5146EC +
mov edx eax +
or eax 0FFFFFF80h +
shr dl 7 +
movzx edx dl +
mov [esp+0E7Ch+var_E3C] edx +
mov byte ptr ds:dword_5146EC al +
jmp loc_4019F0  +
movzx edx byte ptr [ebp-20h] +
movzx eax byte ptr ds:dword_5146EC +
shl edx 7 +
and eax 7Fh +
or eax edx +
mov byte ptr ds:dword_5146EC al +
jmp loc_4019F0  +
movzx eax byte ptr ds:dword_5146EC +
mov edx eax +
or eax 0FFFFFF80h +
shr dl 7 +
movzx edx dl +
mov [esp+0E7Ch+var_E3C] edx +
mov byte ptr ds:dword_5146EC al +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40B090  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40B090  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40B090  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] 4 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40B090  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] 4 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40B090  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] 4 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40B090  +
jmp loc_4019F0  +
call sub_405E20  +
nop   +
jmp loc_4019F0  +
call sub_405CD0  +
lea esi [esi+0] +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_411E20  +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40BF80  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 1 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FAF0  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FAF0  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FC80  +
jmp loc_4019F0  +
call sub_405E20  +
jmp loc_4019F0  +
call sub_405CA0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_419100  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F2B0  +
jmp loc_4019F0  +
call sub_40FB90  +
jmp loc_4019F0  +
call sub_40FB40  +
lea esi [esi+0] +
jmp loc_4019F0  +
mov ds:dword_5147A4 1 +
jmp loc_4019F0  +
mov ds:dword_5147A0 1 +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_419180  +
jmp loc_4019F0  +
mov ecx [ebp-10h] +
mov edx [ebp-30h] +
mov eax [ebp-50h] +
mov [esp+0E7Ch+var_E70] 1 +
mov [esp+0E7Ch+var_E74] ecx +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FAA0  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E70] 1 +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FAA0  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] 1 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40E870  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_418740  +
jmp loc_4019F0  +
mov ds:dword_50F094 3 +
jmp loc_4019F0  +
mov ds:dword_50F094 2 +
jmp loc_4019F0  +
call sub_405E20  +
jmp loc_4019F0  +
call sub_405CA0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_419100  +
jmp loc_4019F0  +
call sub_405E20  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E7C] offset a__1 +
mov [esp+0E7Ch+var_E78] eax +
call sub_416CB0  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
call sub_405DC0  +
nop   +
lea esi [esi+0] +
jmp loc_4019F0  +
call sub_405E20  +
mov edx [ebp+0] +
mov edi [ebp-20h] +
mov esi [ebp-10h] +
mov ecx [ebp-30h] +
mov eax [ebp-0B0h] +
mov [esp+0E7Ch+var_E68] edi +
mov [esp+0E7Ch+var_E6C] esi +
mov [esp+0E7Ch+var_E70] ecx +
mov [esp+0E7Ch+var_E74] edx +
mov edx [ebp-0C0h] +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E78] edx +
call sub_40FF40  +
jmp loc_4019F0  +
call sub_405E20  +
nop   +
lea esi [esi+0] +
call sub_405DC0  +
jmp loc_4019F0  +
mov edx [ebp-20h] +
mov eax [ebp-50h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FCB0  +
jmp loc_4019F0  +
call sub_405E20  +
call sub_405CA0  +
nop   +
lea esi [esi+0] +
jmp loc_4019F0  +
call sub_405DC0  +
lea esi [esi+0] +
jmp loc_4019F0  +
mov eax ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E78] offset aExtern +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E74] eax +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
call sub_405E20  +
mov esi [ebp-20h] +
mov ecx [ebp-10h] +
mov edx [ebp-30h] +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E70] esi +
mov [esp+0E7Ch+var_E74] ecx +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F490  +
jmp loc_4019F0  +
call sub_405E20  +
call sub_405DC0  +
jmp loc_4019F0  +
mov eax [ebp-50h] +
mov edi [ebp-10h] +
mov ecx [ebp-30h] +
mov edx [ebp-40h] +
mov [esp+0E7Ch+var_E44] eax +
mov eax [ebp-70h] +
mov esi [ebp-60h] +
mov [esp+0E7Ch+var_E40] eax +
mov eax [ebp-90h] +
mov [esp+0E7Ch+var_E60] edx +
mov edx ds:dword_50F094 +
mov [esp+0E7Ch+var_E64] edi +
mov edi [esp+0E7Ch+var_E44] +
mov [esp+0E7Ch+var_E6C] ecx +
mov ecx [esp+0E7Ch+var_E40] +
mov [esp+0E7Ch+var_E68] esi +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E70] edi +
mov [esp+0E7Ch+var_E78] ecx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40E8A0  +
jmp loc_4019F0  +
call sub_405E20  +
nop   +
lea esi [esi+0] +
call sub_405CA0  +
jmp loc_4019F0  +
lea esi [esi+0] +
call sub_405DC0  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 17Ch +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 17Bh +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 17Ah +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 17Eh +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 165h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 14Eh +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 14Ch +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416DA0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E7C] 145h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E7C] 144h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] 103h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 117h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E7C] 103h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov edx [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 130h +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E74] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 126h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp-30h] +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 125h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E7C] 124h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E7C] 117h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 117h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 15Eh +
mov [esp+0E7Ch+var_E78] eax +
call sub_416B40  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 180h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 143h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 142h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 140h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 141h +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] 12Bh +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+4] +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4168A0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 13Ah +
mov [esp+0E7Ch+var_E78] eax +
call sub_416BF0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 10Dh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 10Eh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov ecx [ebp+0] +
mov edx [ebp-20h] +
mov eax [ebp-40h] +
mov [esp+0E7Ch+var_E7C] 3Fh +
mov [esp+0E7Ch+var_E70] ecx +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_416A70  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 7Ch +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 5Eh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 26h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 3Eh +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 3Ch +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 112h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E7C] 111h +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] eax +
call sub_4169B0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_411D10  +
jmp loc_4019F0  +
call sub_405E20  +
sub ds:dword_50F028 1 +
jmp loc_4019F0  +
call sub_405D60  +
mov eax ds:dword_50F028 +
cmp eax 13h +
jg loc_403449  +
mov ds:dword_50F040[eax*4] offset aDynamicList +
add eax 1 +
mov ds:dword_50F028 eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp+4] +
mov [esp+0E7Ch+var_E38] eax +
mov eax [ebp+8] +
mov [esp+0E7Ch+var_E34] eax +
mov eax [ebp+0Ch] +
mov [esp+0E7Ch+var_E30] eax +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E34] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
mov [esp+0E7Ch+var_E38] 0 +
mov [esp+0E7Ch+var_E34] 0 +
mov [esp+0E7Ch+var_E30] 0 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp+0] +
cmp dword ptr [eax+0Ch] 3 +
jnz loc_4019F0  +
cmp dword ptr [eax] 103h +
jnz loc_4019F0  +
mov edx [eax+10h] +
xor esi esi +
mov edi edx +
jmp loc_4034F1  +
add esi 1 +
cmp esi 8 +
jz loc_403DF2  +
mov eax ds:off_4C1920[esi*4] +
mov [esp+0E7Ch+var_E7C] edi +
mov [esp+0E7Ch+var_E78] eax +
call strcmp  +
test eax eax +
jnz loc_4034E5  +
mov [esp+0E7Ch+var_E7C] esi +
call sub_416850  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-50h] +
mov edi [ebp-18h] +
mov esi [ebp-1Ch] +
mov ecx [ebp-20h] +
mov [esp+0E7Ch+var_E44] eax +
mov eax [ebp-14h] +
mov edx [ebp-30h] +
mov [esp+0E7Ch+var_E6C] edi +
mov [esp+0E7Ch+var_E70] esi +
mov [esp+0E7Ch+var_E68] eax +
mov eax [esp+0E7Ch+var_E44] +
mov [esp+0E7Ch+var_E74] ecx +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FBA0  +
jmp loc_4019F0  +
call sub_405E20  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] offset aDefault_0 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 1 +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-70h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-30h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov ds:dword_50F094 0 +
jmp loc_4019F0  +
mov ds:dword_50F094 0 +
jmp loc_4019F0  +
mov ds:dword_50F094 3 +
jmp loc_4019F0  +
mov ds:dword_50F094 3 +
jmp loc_4019F0  +
mov ds:dword_50F094 3 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov edx ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 1 +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E78] eax +
mov [esp+0E7Ch+var_E74] edx +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
call sub_405E20  +
call sub_405DC0  +
jmp loc_4019F0  +
lea esi [esi+0] +
call sub_405CA0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FD00  +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 0Ch +
call sub_4A05F0  +
mov edx [ebp+0] +
mov dword ptr [eax+8] 0 +
mov [eax+4] edx +
mov edx [ebp-20h] +
mov [eax] edx +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
call sub_405DC0  +
jmp loc_4019F0  +
call sub_405E20  +
mov edx [ebp-10h] +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40FDD0  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov edx ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E78] eax +
mov [esp+0E7Ch+var_E74] edx +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp-10h] +
mov eax [ebp-50h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_410280  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E78] eax +
call sub_410280  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_410280  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_410280  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] 0 +
call sub_410280  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_411C30  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E78] eax +
call sub_411C30  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov ecx [ebp-10h] +
mov edx [ebp-30h] +
mov eax [ebp-50h] +
mov [esp+0E7Ch+var_E74] ecx +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4102C0  +
jmp loc_4019F0  +
mov edx [ebp-20h] +
mov eax [ebp-40h] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4102C0  +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E78] eax +
call sub_4102C0  +
jmp loc_4019F0  +
call sub_405E20  +
jmp loc_4019F0  +
call sub_405D30  +
lea esi [esi+0] +
jmp loc_4019F0  +
call sub_405E20  +
sub ds:dword_50F028 1 +
jmp loc_4019F0  +
call sub_405D60  +
mov eax ds:dword_50F028 +
cmp eax 13h +
jg loc_403870  +
mov ds:dword_50F040[eax*4] offset aVersionScript +
add eax 1 +
mov ds:dword_50F028 eax +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov edx ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E78] offset aGlobal +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E74] edx +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E78] offset aGlobal +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E74] eax +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp-30h] +
mov ds:dword_50F020 eax +
jmp loc_4019F0  +
mov eax ds:dword_50F020 +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp-10h] +
mov ds:dword_50F020 eax +
jmp loc_4019F0  +
mov ecx [ebp-20h] +
mov eax ecx +
jmp loc_40390C  +
mov eax edx +
mov edx [eax] +
test edx edx +
jnz loc_40390A  +
mov edx [ebp-80h] +
mov [eax] edx +
mov [esp+0E7Ch+var_E3C] ecx +
mov eax [ebp-30h] +
mov ds:dword_50F020 eax +
jmp loc_4019F0  +
mov eax ds:dword_50F020 +
mov [esp+0E7Ch+var_E3C] eax +
mov eax [ebp-10h] +
mov ds:dword_50F020 eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov ecx ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 1 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E74] ecx +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov ecx ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E74] ecx +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412550  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412550  +
jmp loc_4019F0  +
mov ds:dword_51476C offset asc_4C11C9 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] offset aPFUnrecognised +
mov [esp+0E7Ch+var_E78] eax +
call sub_418450  +
jmp loc_4019F0  +
call sub_405E20  +
call sub_412060  +
sub ds:dword_50F028 1 +
jmp loc_4019F0  +
call sub_405D00  +
mov eax ds:dword_50F028 +
cmp eax 13h +
jg loc_403A1D  +
mov ds:dword_50F040[eax*4] offset aMriStyleScript +
add eax 1 +
mov ds:dword_50F028 eax +
jmp loc_4019F0  +
call sub_405E20  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_416D00  +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F3D0  +
jmp loc_4019F0  +
nop   +
call sub_405D90  +
jmp loc_4019F0  +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F270  +
jmp loc_4019F0  +
call sub_405E20  +
nop   +
jmp loc_4019F0  +
call sub_405DF0  +
lea esi [esi+0] +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40D550  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40D550  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40D550  +
jmp loc_4019F0  +
call sub_405E20  +
jmp loc_4019F0  +
call sub_405DC0  +
lea esi [esi+0] +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E3C] 0 +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412020  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412020  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412370  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412370  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4123A0  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4123A0  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
call sub_40F220  +
jmp loc_4019F0  +
call sub_405E20  +
nop   +
jmp loc_4019F0  +
call sub_405CA0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_419100  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4125E0  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412050  +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov edx [ebp+0] +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E74] edx +
call sub_4123D0  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E74] 0 +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4123D0  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412450  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4125B0  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_4125B0  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412580  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412580  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_411FF0  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_411FF0  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-20h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_411FF0  +
jmp loc_4019F0  +
mov eax [ebp+0] +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412470  +
jmp loc_4019F0  +
mov edx [ebp+0] +
mov eax [ebp-10h] +
mov [esp+0E7Ch+var_E78] edx +
mov [esp+0E7Ch+var_E7C] eax +
call sub_412550  +
jmp loc_4019F0  +
mov eax ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E78] offset aLocal +
mov [esp+0E7Ch+var_E7C] 0 +
mov [esp+0E7Ch+var_E74] eax +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov eax [ebp-20h] +
mov edx ds:dword_50F020 +
mov [esp+0E7Ch+var_E70] 0 +
mov [esp+0E7Ch+var_E78] offset aLocal +
mov [esp+0E7Ch+var_E7C] eax +
mov [esp+0E7Ch+var_E74] edx +
call sub_4100D0  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] offset aMemoryExhaus_0 +
mov esi 2 +
call sub_4016A0  +
jmp loc_401BB8  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E74] offset aShifting +
mov [esp+0E7Ch+var_E78] offset aS_6 +
add eax 40h +
mov [esp+0E7Ch+var_E7C] eax +
call fprintf  +
mov eax ds:_iob +
mov edx [esp+0E7Ch+var_E54] +
add eax 40h +
call sub_4015E0  +
mov eax ds:_iob +
mov [esp+0E7Ch+var_E7C] 0Ah +
add eax 40h +
mov [esp+0E7Ch+var_E78] eax +
call fputc  +
jmp loc_401F45  +
xor esi esi +
jmp loc_401BB8  +
mov [esp+0E7Ch+var_E5C] edi +
mov esi 1 +
jmp loc_401BB8  +
mov [esp+0E7Ch+var_E74] eax +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] offset aXPSPhdrsSyntax +
call sub_418450  +
jmp loc_4019F0  +
add edx 1 +
mov dword ptr [eax] 1 +
mov [eax+4] edx +
jmp loc_40280E  +
add edx 1 +
mov dword ptr [eax] 1 +
mov [eax+4] edx +
jmp loc_402845  +
mov [esp+0E7Ch+var_E3C] 1 +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E38] 1 +
jmp loc_4019F0  +
mov edx edi +
mov ecx 10h +
mov edi offset aPt_gnu_eh_fram +
mov esi edx +
cmps   +
jz loc_403E56  +
mov edi offset aPt_gnu_stack +
mov ecx 0Dh +
mov esi edx +
cmps   +
jnz loc_403E29  +
mov [esp+0E7Ch+var_E7C] 6474E551h +
call sub_416850  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E74] edx +
mov [esp+0E7Ch+var_E78] 0 +
mov [esp+0E7Ch+var_E7C] offset aXPSUnknownPhdr +
call sub_418450  +
mov [esp+0E7Ch+var_E7C] 0 +
call sub_416850  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
mov [esp+0E7Ch+var_E7C] 6474E550h +
call sub_416850  +
mov [esp+0E7Ch+var_E3C] eax +
jmp loc_4019F0  +
***
mov eax ds:dword_50F228 +
mov edx ds:dword_50F230 +
lea edx [eax+edx*4] +
mov eax [edx] +
mov ecx [eax+10h] +
mov eax [eax+8] +
mov ds:dword_50F220 ecx +
mov ds:dword_5146D4 eax +
mov edx [edx] +
mov ds:dword_50F21C eax +
mov edx [edx] +
mov ds:dword_50F0AC edx +
movzx eax byte ptr [eax] +
mov ds:byte_50F224 al +
retn   +
***
sub esp 14h +
mov eax ds:dword_50F228 +
test eax eax +
jz loc_403F11  +
mov edx ds:dword_50F22C +
lea ecx [edx-1] +
cmp ecx ds:dword_50F230 +
jbe loc_403ED5  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
lea ebx [edx+8] +
lea esi ds:0[ebx*4] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call realloc  +
test eax eax +
mov ds:dword_50F228 eax +
jz loc_403F42  +
lea edx [eax+esi-20h] +
xor eax eax +
mov dword ptr [edx+eax] 0 +
add eax 4 +
cmp eax 20h +
jb loc_403EFA  +
mov ds:dword_50F22C ebx +
jmp loc_403ECF  +
mov [esp+14h+var_14] 4 +
call malloc  +
test eax eax +
mov ds:dword_50F228 eax +
jz loc_403F42  +
mov dword ptr [eax] 0 +
mov ds:dword_50F22C 1 +
mov ds:dword_50F230 0 +
jmp loc_403ECF  +
mov eax offset aOutOfDynamicMe +
call sub_4BC400  +
lea esi [esi+0] +
mov eax 1 +
retn   +
***
mov ebx [esp+8+arg_0] +
call sub_403EB0  +
mov eax ds:dword_50F228 +
test eax eax +
jz loc_403FBE  +
mov edx ds:dword_50F230 +
lea eax [eax+edx*4] +
mov edx [eax] +
cmp edx ebx +
jz loc_403FB9  +
test edx edx +
jz loc_403FA8  +
mov edx ds:dword_50F21C +
movzx ecx ds:byte_50F224 +
mov [edx] cl +
mov ecx [eax] +
mov [ecx+8] edx +
mov ecx ds:dword_50F220 +
mov edx [eax] +
mov [edx+10h] ecx +
mov [eax] ebx +
call sub_403E70  +
mov ds:dword_50F210 1 +
add esp 8 +
pop ebx  +
retn   +
test ebx ebx +
jz loc_403FB9  +
mov eax ds:dword_50F230 +
shl eax 2 +
jmp loc_403FA8  +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_404028  +
mov eax ds:dword_50F228 +
test eax eax +
jz loc_403FF2  +
mov edx ds:dword_50F230 +
lea eax [eax+edx*4] +
cmp ebx [eax] +
jz loc_404020  +
mov eax [ebx+14h] +
test eax eax +
jnz loc_404006  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
mov eax [ebx+4] +
mov [esp+18h+var_18] eax +
call free  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
mov dword ptr [eax] 0 +
jmp loc_403FF2  +
add esp 18h +
pop ebx  +
retn   +
***
mov eax [esp+arg_0] +
test eax eax +
jz locret_404075  +
mov edx [eax+4] +
mov dword ptr [eax+10h] 0 +
mov byte ptr [edx] 0 +
mov edx [eax+4] +
mov byte ptr [edx+1] 0 +
mov edx [eax+4] +
mov dword ptr [eax+1Ch] 1 +
mov dword ptr [eax+2Ch] 0 +
mov [eax+8] edx +
mov edx ds:dword_50F228 +
test edx edx +
jz locret_404075  +
mov ecx ds:dword_50F230 +
cmp eax [edx+ecx*4] +
jz loc_404077  +
retn   +
jmp sub_403E70  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov edi ds:__imp__errno +
call edi  +
mov ebp [eax] +
mov [esp+20h+var_20] ebx +
call sub_404030  +
mov eax ds:dword_50F228 +
mov [ebx] esi +
mov dword ptr [ebx+28h] 1 +
test eax eax +
jz loc_4040BA  +
mov edx ds:dword_50F230 +
cmp ebx [eax+edx*4] +
jz loc_4040C8  +
mov dword ptr [ebx+20h] 1 +
mov dword ptr [ebx+24h] 0 +
xor eax eax +
test esi esi +
jz loc_4040E6  +
mov [esp+20h+var_20] esi +
call _fileno_0  +
mov [esp+20h+var_20] eax +
call _isatty  +
test eax eax +
setnle al  +
movzx eax al +
mov [ebx+18h] eax +
call edi  +
mov [eax] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
mov eax ds:dword_50F228 +
mov edx [esp+18h+arg_0] +
test eax eax +
jz loc_404190  +
mov ecx ds:dword_50F230 +
mov eax [eax+ecx*4] +
test eax eax +
jz loc_404190  +
call sub_404080  +
add esp 18h +
pop ebx  +
jmp sub_403E70  +
mov [esp+18h+var_C] edx +
call sub_403EB0  +
mov eax ds:dword_50F228 +
mov ecx ds:dword_50F230 +
mov [esp+18h+var_14] 4000h +
lea ebx [eax+ecx*4] +
mov eax ds:dword_50F0AC +
mov [esp+18h+var_18] eax +
call sub_404100  +
mov ecx ds:dword_50F228 +
mov edx [esp+18h+var_C] +
mov [ebx] eax +
xor eax eax +
test ecx ecx +
jz loc_40417E  +
mov eax ds:dword_50F230 +
mov eax [ecx+eax*4] +
call sub_404080  +
add esp 18h +
pop ebx  +
jmp sub_403E70  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_5146D0 +
test eax eax +
jz loc_40421A  +
cmp eax 5 +
mov ds:dword_5146D0 0 +
ja loc_4043A8  +
jmp ds:off_4C667C[eax*4]  +
mov ebp ds:dword_50F218 +
test ebp ebp +
jz loc_404321  +
mov eax ds:dword_50F21C +
movzx ecx ds:byte_50F224 +
mov esi eax +
mov [esp+2Ch+var_10] eax +
mov [eax] cl +
mov eax ds:dword_50F214 +
movsx edx ds:word_4CA700[eax+eax] +
mov ebp ds:dword_50F20C +
mov edi ds:dword_50F208 +
cmp ds:word_4CBA80[eax+eax] 0 +
movzx ecx byte ptr ds:dword_4CB680[ecx*4] +
cmovnz edi esi +
cmovnz ebp eax +
jmp loc_40428F  +
movsx eax ds:word_4C98E0[eax+eax] +
cmp eax 6E5h +
jle loc_404287  +
movzx ecx byte ptr ds:dword_4CB520[ecx*4] +
movsx edx ds:word_4CA700[eax+eax] +
add edx ecx +
movsx ebx ds:word_4C6AE0[edx+edx] +
cmp ebx eax +
jnz loc_404270  +
movsx eax ds:word_4C81E0[edx+edx] +
add esi 1 +
movsx edx ds:word_4CA700[eax+eax] +
cmp dx 0B20h +
jz loc_4042BC  +
movzx ecx byte ptr [esi] +
jmp loc_404255  +
mov ds:dword_50F208 edi +
movsx eax ds:word_4CBA80[eax+eax] +
mov edi [esp+2Ch+var_10] +
mov ds:dword_50F20C ebp +
test eax eax +
jz loc_40430C  +
mov edx esi +
sub edx edi +
mov ds:dword_5146D4 edi +
mov ds:dword_5146CC edx +
movzx edx byte ptr [esi] +
mov ds:dword_50F21C esi +
mov byte ptr [esi] 0 +
mov ds:byte_50F224 dl +
cmp eax 0D1h +
ja loc_4055FE  +
jmp ds:off_4C6694[eax*4]  +
mov eax ds:dword_50F20C +
mov esi ds:dword_50F208 +
movsx eax ds:word_4CBA80[eax+eax] +
jmp loc_4042D8  +
mov edi ds:dword_50F214 +
mov ds:dword_50F218 1 +
test edi edi +
jz loc_404371  +
mov esi ds:dword_50F0AC +
test esi esi +
jz loc_404400  +
mov ebx ds:dword_50F0A8 +
test ebx ebx +
jz loc_40440F  +
mov eax ds:dword_50F228 +
test eax eax +
jz loc_4043C4  +
mov edx ds:dword_50F230 +
mov ecx [eax+edx*4] +
test ecx ecx +
jz loc_4043C4  +
call sub_403E70  +
jmp loc_404228  +
mov ds:dword_50F214 1 +
jmp loc_404335  +
mov ebx 16Eh +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx 178h +
jmp loc_404382  +
mov ebx 16Fh +
jmp loc_404382  +
mov ebx 181h +
jmp loc_404382  +
mov ebx 16Dh +
jmp loc_404382  +
mov [esp+2Ch+var_24] offset aYylex +
mov [esp+2Ch+var_28] 87h +
mov [esp+2Ch+var_2C] offset aLdlex_l +
call sub_4185A0  +
call sub_403EB0  +
mov eax ds:dword_50F228 +
mov edx ds:dword_50F230 +
mov [esp+2Ch+var_28] 4000h +
lea ebx [eax+edx*4] +
mov eax ds:dword_50F0AC +
mov [esp+2Ch+var_2C] eax +
call sub_404100  +
mov [ebx] eax +
jmp loc_404367  +
add dword_4BE008 1 +
jmp loc_404228  +
mov eax ds:_iob +
mov ds:dword_50F0AC eax +
jmp loc_404343  +
mov eax ds:_iob +
add eax 20h +
mov ds:dword_50F0A8 eax +
jmp loc_404351  +
mov ds:dword_5146B8 143h +
mov ebx 143h +
jmp loc_404382  +
mov edx ds:dword_5146D4 +
mov eax offset aInScript +
call sub_4BC36E  +
jmp loc_404228  +
mov ds:dword_5146B8 156h +
mov ebx 156h +
jmp loc_404382  +
mov ds:dword_5146B8 17Eh +
mov ebx 17Eh +
jmp loc_404382  +
mov ds:dword_5146B8 155h +
mov ebx 155h +
jmp loc_404382  +
sub ds:dword_50F110 1 +
jns loc_404499  +
mov ds:dword_50F214 11h +
mov eax ds:dword_5146D4 +
movsx ebx byte ptr [eax] +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
add ds:dword_50F110 1 +
movsx ebx byte ptr [eax] +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
movsx ebx byte ptr [eax] +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ds:dword_50F214 13h +
mov ds:dword_50F110 0 +
movsx ebx byte ptr [eax] +
jmp loc_404382  +
mov ds:dword_5146B8 2Bh +
mov ebx 2Bh +
jmp loc_404382  +
mov ds:dword_5146B8 2Dh +
mov ebx 2Dh +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
cmp byte ptr [eax] 2Fh +
jnz loc_40528C  +
cmp byte ptr [eax+1] 2Ah +
jnz loc_40528C  +
movzx eax ds:byte_50F224 +
mov [esi] al +
mov eax edi +
add eax 2 +
mov ds:dword_50F21C eax +
sub eax edi +
mov ds:dword_5146D4 edi +
mov ds:dword_5146CC eax +
movzx eax byte ptr [edi+2] +
mov byte ptr [edi+2] 0 +
mov ds:byte_50F224 al +
call sub_4BC718  +
jmp loc_404228  +
movzx eax ds:byte_50F224 +
mov [esi] al +
mov eax ds:dword_50F20C +
mov esi ds:dword_50F208 +
movsx eax ds:word_4CBA80[eax+eax] +
jmp loc_4042D4  +
mov ds:dword_5146B8 109h +
mov ebx 109h +
jmp loc_404382  +
mov ds:dword_5146B8 5Bh +
mov ebx 5Bh +
jmp loc_404382  +
mov ds:dword_5146B8 5Dh +
mov ebx 5Dh +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
xor edx edx +
cmp byte ptr [eax] 24h +
jnz loc_4045CD  +
add eax 1 +
mov dl 10h +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call j_strtoul  +
mov edx ds:dword_5146D4 +
mov ecx ds:dword_5146CC +
mov ds:dword_5146BC 0 +
mov ds:dword_5146B8 eax +
movzx ecx byte ptr [edx+ecx-1] +
and ecx 0FFFFFFDFh +
cmp cl 4Dh +
jnz loc_40466F  +
shl eax 14h +
mov ebx 102h +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov edx ds:dword_5146CC +
mov eax ds:dword_5146D4 +
movzx ecx byte ptr [eax+edx-1] +
mov edx 0Ah +
sub ecx 42h +
cmp cl 36h +
ja loc_404642  +
movzx ecx cl +
movsx edx ds:byte_4C6AA0[ecx] +
mov [esp+2Ch+var_24] edx +
mov ebx 102h +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call j_strtoul  +
mov ds:dword_5146BC 0 +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
cmp cl 4Bh +
jnz loc_4047F7  +
shl eax 0Ah +
mov ebx 102h +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 102h +
mov [esp+2Ch+var_24] 10h +
mov [esp+2Ch+var_28] 0 +
add eax 1 +
mov [esp+2Ch+var_2C] eax +
call j_strtoul  +
mov ds:dword_5146BC 0 +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov ds:dword_5146B8 107h +
mov ebx 107h +
jmp loc_404382  +
mov ds:dword_5146B8 106h +
mov ebx 106h +
jmp loc_404382  +
mov ds:dword_5146B8 105h +
mov ebx 105h +
jmp loc_404382  +
mov ds:dword_5146B8 114h +
mov ebx 114h +
jmp loc_404382  +
mov ds:dword_5146B8 113h +
mov ebx 113h +
jmp loc_404382  +
mov ds:dword_5146B8 111h +
mov ebx 111h +
jmp loc_404382  +
mov ds:dword_5146B8 112h +
mov ebx 112h +
jmp loc_404382  +
mov ds:dword_5146B8 110h +
mov ebx 110h +
jmp loc_404382  +
mov ds:dword_5146B8 10Eh +
mov ebx 10Eh +
jmp loc_404382  +
mov ds:dword_5146B8 10Ch +
mov ebx 10Ch +
jmp loc_404382  +
mov ds:dword_5146B8 10Bh +
mov ebx 10Bh +
jmp loc_404382  +
mov ds:dword_5146B8 108h +
mov ebx 108h +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 103h +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov ds:dword_5146B8 3Eh +
mov ebx 3Eh +
jmp loc_404382  +
mov ds:dword_5146B8 3Dh +
mov ebx 3Dh +
jmp loc_404382  +
cmp byte ptr [edx] 30h +
mov ebx 102h +
jnz loc_404382  +
movzx eax byte ptr [edx+1] +
and eax 0FFFFFFDFh +
cmp al 58h +
jnz loc_404382  +
add edx 2 +
mov [esp+2Ch+var_2C] edx +
call sub_4A06C0  +
mov ds:dword_5146BC eax +
jmp loc_404382  +
mov ds:dword_5146B8 10Fh +
mov ebx 10Fh +
jmp loc_404382  +
mov ds:dword_5146B8 10Dh +
mov ebx 10Dh +
jmp loc_404382  +
mov ds:dword_5146B8 10Ah +
mov ebx 10Ah +
jmp loc_404382  +
mov ds:dword_5146B8 142h +
mov ebx 142h +
jmp loc_404382  +
mov ds:dword_5146B8 126h +
mov ebx 126h +
jmp loc_404382  +
mov ds:dword_5146B8 125h +
mov ebx 125h +
jmp loc_404382  +
mov ds:dword_5146B8 124h +
mov ebx 124h +
jmp loc_404382  +
mov ds:dword_5146B8 117h +
mov ebx 117h +
jmp loc_404382  +
mov ds:dword_5146B8 14Eh +
mov ebx 14Eh +
jmp loc_404382  +
mov ds:dword_5146B8 119h +
mov ebx 119h +
jmp loc_404382  +
mov ds:dword_5146B8 118h +
mov ebx 118h +
jmp loc_404382  +
mov ds:dword_5146B8 177h +
mov ebx 177h +
jmp loc_404382  +
mov ds:dword_5146B8 14Ch +
mov ebx 14Ch +
jmp loc_404382  +
mov ds:dword_5146B8 134h +
mov ebx 134h +
jmp loc_404382  +
mov ds:dword_5146B8 133h +
mov ebx 133h +
jmp loc_404382  +
mov ds:dword_5146B8 132h +
mov ebx 132h +
jmp loc_404382  +
mov ds:dword_5146B8 3Bh +
mov ebx 3Bh +
jmp loc_404382  +
mov ds:dword_5146B8 3Ah +
mov ebx 3Ah +
jmp loc_404382  +
mov ds:dword_5146B8 28h +
mov ebx 28h +
jmp loc_404382  +
mov ds:dword_5146B8 29h +
mov ebx 29h +
jmp loc_404382  +
mov ds:dword_5146B8 7Bh +
mov ebx 7Bh +
jmp loc_404382  +
mov ds:dword_5146B8 7Dh +
mov ebx 7Dh +
jmp loc_404382  +
mov ds:dword_5146B8 3Dh +
mov ebx 3Dh +
jmp loc_404382  +
mov ds:dword_5146B8 3Ch +
mov ebx 3Ch +
jmp loc_404382  +
mov ds:dword_5146B8 25h +
mov ebx 25h +
jmp loc_404382  +
mov ds:dword_5146B8 2Fh +
mov ebx 2Fh +
jmp loc_404382  +
mov ds:dword_5146B8 2Dh +
mov ebx 2Dh +
jmp loc_404382  +
mov ds:dword_5146B8 2Bh +
mov ebx 2Bh +
jmp loc_404382  +
mov ds:dword_5146B8 162h +
mov ebx 162h +
jmp loc_404382  +
mov ds:dword_5146B8 167h +
mov ebx 167h +
jmp loc_404382  +
mov ds:dword_5146B8 15Fh +
mov ebx 15Fh +
jmp loc_404382  +
mov ds:dword_5146B8 16Bh +
mov ebx 16Bh +
jmp loc_404382  +
mov ds:dword_5146B8 179h +
mov ebx 179h +
jmp loc_404382  +
mov ds:dword_5146B8 159h +
mov ebx 159h +
jmp loc_404382  +
mov ds:dword_5146B8 158h +
mov ebx 158h +
jmp loc_404382  +
mov ds:dword_5146B8 157h +
mov ebx 157h +
jmp loc_404382  +
mov ds:dword_5146B8 12Bh +
mov ebx 12Bh +
jmp loc_404382  +
mov ds:dword_5146B8 12Bh +
mov ebx 12Bh +
jmp loc_404382  +
mov ds:dword_5146B8 13Fh +
mov ebx 13Fh +
jmp loc_404382  +
mov ds:dword_5146B8 171h +
mov ebx 171h +
jmp loc_404382  +
mov ds:dword_5146B8 151h +
mov ebx 151h +
jmp loc_404382  +
mov ds:dword_5146B8 150h +
mov ebx 150h +
jmp loc_404382  +
mov ds:dword_5146B8 152h +
mov ebx 152h +
jmp loc_404382  +
mov ds:dword_5146B8 13Ch +
mov ebx 13Ch +
jmp loc_404382  +
mov ds:dword_5146B8 13Bh +
mov ebx 13Bh +
jmp loc_404382  +
mov ds:dword_5146B8 140h +
mov ebx 140h +
jmp loc_404382  +
mov ds:dword_5146B8 13Dh +
mov ebx 13Dh +
jmp loc_404382  +
mov ds:dword_5146B8 130h +
mov ebx 130h +
jmp loc_404382  +
mov ds:dword_5146B8 148h +
mov ebx 148h +
jmp loc_404382  +
mov ds:dword_5146B8 147h +
mov ebx 147h +
jmp loc_404382  +
mov ds:dword_5146B8 12Eh +
mov ebx 12Eh +
jmp loc_404382  +
mov ds:dword_5146B8 12Ch +
mov ebx 12Ch +
jmp loc_404382  +
mov ds:dword_5146B8 146h +
mov ebx 146h +
jmp loc_404382  +
mov ds:dword_5146B8 14Dh +
mov ebx 14Dh +
jmp loc_404382  +
mov ds:dword_5146B8 123h +
mov ebx 123h +
jmp loc_404382  +
mov ds:dword_5146B8 122h +
mov ebx 122h +
jmp loc_404382  +
mov ds:dword_5146B8 121h +
mov ebx 121h +
jmp loc_404382  +
mov ds:dword_5146B8 11Fh +
mov ebx 11Fh +
jmp loc_404382  +
mov ds:dword_5146B8 12Fh +
mov ebx 12Fh +
jmp loc_404382  +
mov ds:dword_5146B8 12Dh +
mov ebx 12Dh +
jmp loc_404382  +
mov ds:dword_5146B8 153h +
mov ebx 153h +
jmp loc_404382  +
mov ds:dword_5146B8 14Fh +
mov ebx 14Fh +
jmp loc_404382  +
mov ds:dword_5146B8 13Ah +
mov ebx 13Ah +
jmp loc_404382  +
mov ds:dword_5146B8 15Ah +
mov ebx 15Ah +
jmp loc_404382  +
mov ds:dword_5146B8 7Ch +
mov ebx 7Ch +
jmp loc_404382  +
mov ds:dword_5146B8 26h +
mov ebx 26h +
jmp loc_404382  +
mov ds:dword_5146B8 2Ch +
mov ebx 2Ch +
jmp loc_404382  +
mov ds:dword_5146B8 120h +
mov ebx 120h +
jmp loc_404382  +
mov ds:dword_5146B8 131h +
mov ebx 131h +
jmp loc_404382  +
mov ds:dword_5146B8 17Dh +
mov ebx 17Dh +
jmp loc_404382  +
mov ds:dword_5146B8 14Eh +
mov ebx 14Eh +
jmp loc_404382  +
mov ds:dword_5146B8 14Eh +
mov ebx 14Eh +
jmp loc_404382  +
mov ds:dword_5146B8 14Ch +
mov ebx 14Ch +
jmp loc_404382  +
mov ds:dword_5146B8 14Ch +
mov ebx 14Ch +
jmp loc_404382  +
mov ds:dword_5146B8 17Ch +
mov ebx 17Ch +
jmp loc_404382  +
mov ds:dword_5146B8 17Bh +
mov ebx 17Bh +
jmp loc_404382  +
mov ds:dword_5146B8 17Ah +
mov ebx 17Ah +
jmp loc_404382  +
mov ds:dword_5146B8 139h +
mov ebx 139h +
jmp loc_404382  +
mov ds:dword_5146B8 138h +
mov ebx 138h +
jmp loc_404382  +
mov ds:dword_5146B8 137h +
mov ebx 137h +
jmp loc_404382  +
mov ds:dword_5146B8 136h +
mov ebx 136h +
jmp loc_404382  +
mov ds:dword_5146B8 135h +
mov ebx 135h +
jmp loc_404382  +
mov ds:dword_5146B8 129h +
mov ebx 129h +
jmp loc_404382  +
mov ds:dword_5146B8 12Ah +
mov ebx 12Ah +
jmp loc_404382  +
mov ds:dword_5146B8 127h +
mov ebx 127h +
jmp loc_404382  +
mov ds:dword_5146B8 128h +
mov ebx 128h +
jmp loc_404382  +
mov ds:dword_5146B8 127h +
mov ebx 127h +
jmp loc_404382  +
mov ds:dword_5146B8 139h +
mov ebx 139h +
jmp loc_404382  +
mov ds:dword_5146B8 14Bh +
mov ebx 14Bh +
jmp loc_404382  +
mov ds:dword_5146B8 14Ah +
mov ebx 14Ah +
jmp loc_404382  +
mov ds:dword_5146B8 11Eh +
mov ebx 11Eh +
jmp loc_404382  +
mov ds:dword_5146B8 11Dh +
mov ebx 11Dh +
jmp loc_404382  +
mov ds:dword_5146B8 11Ch +
mov ebx 11Ch +
jmp loc_404382  +
mov ds:dword_5146B8 11Bh +
mov ebx 11Bh +
jmp loc_404382  +
mov ds:dword_5146B8 11Ah +
mov ebx 11Ah +
jmp loc_404382  +
mov ds:dword_5146B8 149h +
mov ebx 149h +
jmp loc_404382  +
mov ds:dword_5146B8 16Ah +
mov ebx 16Ah +
jmp loc_404382  +
mov ds:dword_5146B8 169h +
mov ebx 169h +
jmp loc_404382  +
mov ds:dword_5146B8 15Bh +
mov ebx 15Bh +
jmp loc_404382  +
mov ds:dword_5146B8 117h +
mov ebx 117h +
jmp loc_404382  +
mov ds:dword_5146B8 154h +
mov ebx 154h +
jmp loc_404382  +
mov ds:dword_5146B8 161h +
mov ebx 161h +
jmp loc_404382  +
mov ds:dword_5146B8 15Eh +
mov ebx 15Eh +
jmp loc_404382  +
mov ds:dword_5146B8 15Dh +
mov ebx 15Dh +
jmp loc_404382  +
mov ds:dword_5146B8 15Ch +
mov ebx 15Ch +
jmp loc_404382  +
mov ds:dword_5146B8 172h +
mov ebx 172h +
jmp loc_404382  +
mov ds:dword_5146B8 170h +
mov ebx 170h +
jmp loc_404382  +
mov ds:dword_5146B8 166h +
mov ebx 166h +
jmp loc_404382  +
mov ds:dword_5146B8 163h +
mov ebx 163h +
jmp loc_404382  +
mov ds:dword_5146B8 162h +
mov ebx 162h +
jmp loc_404382  +
mov ds:dword_5146B8 167h +
mov ebx 167h +
jmp loc_404382  +
mov ds:dword_5146B8 15Fh +
mov ebx 15Fh +
jmp loc_404382  +
mov ds:dword_5146B8 16Bh +
mov ebx 16Bh +
jmp loc_404382  +
mov ds:dword_5146B8 16Ah +
mov ebx 16Ah +
jmp loc_404382  +
mov ds:dword_5146B8 169h +
mov ebx 169h +
jmp loc_404382  +
mov ds:dword_5146B8 15Bh +
mov ebx 15Bh +
jmp loc_404382  +
mov ds:dword_5146B8 117h +
mov ebx 117h +
jmp loc_404382  +
mov ds:dword_5146B8 154h +
mov ebx 154h +
jmp loc_404382  +
mov ds:dword_5146B8 161h +
mov ebx 161h +
jmp loc_404382  +
mov eax ds:dword_50F114 +
xor ebx ebx +
lea esi [eax-1] +
test esi esi +
mov ds:dword_50F114 esi +
jz loc_404382  +
mov eax ds:dword_50F1E0[esi*4] +
mov bx 116h +
mov [esp+2Ch+var_2C] eax +
call sub_403F60  +
mov eax ds:dword_50F160[esi*4] +
mov edx ds:dword_50F120[esi*4] +
mov dword_4BE008 eax +
movzx eax byte ptr ds:dword_5146EC +
and edx 1 +
shl edx 3 +
and eax 0FFFFFFF7h +
or eax edx +
mov byte ptr ds:dword_5146EC al +
jmp loc_404382  +
add dword_4BE008 1 +
mov ebx 160h +
mov ds:dword_5146B8 160h +
jmp loc_404382  +
mov edx ds:dword_5146D4 +
mov eax offset aInExpression +
call sub_4BC36E  +
jmp loc_404228  +
mov ds:dword_5146B8 180h +
mov ebx 180h +
jmp loc_404382  +
mov ds:dword_5146B8 17Fh +
mov ebx 17Fh +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 103h +
add eax 1 +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov edx ds:dword_5146CC +
mov ds:dword_5146B8 eax +
mov byte ptr [eax+edx-2] 0 +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 104h +
add eax 2 +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 103h +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov [esp+2Ch+var_2C] eax +
mov ebx 103h +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 104h +
add eax 2 +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 103h +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 103h +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 103h +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov ds:dword_5146B8 15Eh +
mov ebx 15Eh +
jmp loc_404382  +
mov ds:dword_5146B8 15Dh +
mov ebx 15Dh +
jmp loc_404382  +
mov ds:dword_5146B8 15Ch +
mov ebx 15Ch +
jmp loc_404382  +
mov ds:dword_5146B8 172h +
mov ebx 172h +
jmp loc_404382  +
mov ds:dword_5146B8 171h +
mov ebx 171h +
jmp loc_404382  +
mov ds:dword_5146B8 170h +
mov ebx 170h +
jmp loc_404382  +
mov ds:dword_5146B8 166h +
mov ebx 166h +
jmp loc_404382  +
mov ds:dword_5146B8 163h +
mov ebx 163h +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 173h +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
mov ebx 174h +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov ds:dword_5146B8 eax +
jmp loc_404382  +
mov ds:dword_5146B8 171h +
mov ebx 171h +
jmp loc_404382  +
mov ds:dword_5146B8 176h +
mov ebx 176h +
jmp loc_404382  +
mov ds:dword_5146B8 175h +
mov ebx 175h +
jmp loc_404382  +
mov eax ds:dword_5146D4 +
movsx ebx byte ptr [eax] +
jmp loc_404382  +
movzx eax ds:byte_50F224 +
mov ebx esi +
mov edx ds:dword_50F230 +
sub ebx ds:dword_5146D4 +
mov [esi] al +
mov eax ds:dword_50F228 +
sub ebx 1 +
lea ecx [eax+edx*4] +
mov eax [ecx] +
mov edx [eax+2Ch] +
test edx edx +
jz loc_4055DF  +
mov edx ds:dword_50F220 +
add edx [eax+4] +
cmp ds:dword_50F21C edx +
jbe loc_40554B  +
call sub_4BC42B  +
cmp eax 1 +
jz loc_40551C  +
cmp eax 2 +
jz loc_4054E7  +
test eax eax +
jnz loc_404228  +
mov esi ds:dword_5146D4 +
add esi ebx +
mov ds:dword_50F21C esi +
call sub_4BC2C0  +
mov edi ds:dword_5146D4 +
mov [esp+2Ch+var_10] edi +
movzx ecx byte ptr [esi] +
jmp loc_404241  +
mov eax ds:dword_50F0A8 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_20] eax +
mov eax ds:dword_5146CC +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_5146D4 +
mov [esp+2Ch+var_2C] eax +
call fwrite  +
jmp loc_404228  +
mov eax ds:dword_50F228 +
mov edx ds:dword_50F230 +
mov eax [eax+edx*4] +
mov esi [eax+4] +
add esi ds:dword_50F220 +
mov ds:dword_50F21C esi +
call sub_4BC2C0  +
mov edi ds:dword_5146D4 +
movsx eax ds:word_4CBA80[eax+eax] +
jmp loc_4042D4  +
mov eax ds:dword_5146D4 +
mov ds:dword_50F210 0 +
mov ds:dword_50F21C eax +
mov eax ds:dword_50F214 +
sub eax 1 +
mov edx eax +
shr edx 1Fh +
add eax edx +
sar eax 1 +
add eax 0C8h +
jmp loc_4042FA  +
mov esi ds:dword_5146D4 +
add esi ebx +
mov ds:dword_50F21C esi +
call sub_4BC2C0  +
mov edx eax +
movsx eax ds:word_4CBA80[eax+eax] +
test ax ax +
jz loc_405579  +
mov ds:dword_50F20C edx +
mov ds:dword_50F208 esi +
movsx ecx ds:word_4CA700[edx+edx] +
movsx ebx ds:word_4C6AE2[ecx+ecx] +
cmp ebx edx +
jz loc_4055A9  +
movsx edx ds:word_4C98E0[edx+edx] +
movsx ecx ds:word_4CA700[edx+edx] +
movsx ebx ds:word_4C6AE2[ecx+ecx] +
cmp edx ebx +
jnz loc_40558D  +
movsx edx ds:word_4C81E2[ecx+ecx] +
mov edi ds:dword_5146D4 +
cmp edx 6E5h +
jz loc_4042D4  +
test edx edx +
jz loc_4042D4  +
add esi 1 +
mov eax edx +
mov [esp+2Ch+var_10] edi +
mov ds:dword_50F21C esi +
jmp loc_4054B3  +
mov ebp ds:dword_50F0AC +
mov edx [eax+10h] +
mov [eax] ebp +
mov eax [ecx] +
mov ds:dword_50F220 edx +
mov dword ptr [eax+2Ch] 1 +
jmp loc_40546C  +
mov eax offset aFatalFlexScann +
call sub_4BC400  +
mov eax ds:dword_5146D4 +
mov ds:dword_50F214 11h +
movsx ebx byte ptr [eax] +
jmp loc_404382  +
mov ds:dword_5146B8 144h +
mov ebx 144h +
jmp loc_404382  +
mov ds:dword_5146B8 141h +
mov ebx 141h +
jmp loc_404382  +
mov ds:dword_5146B8 13Eh +
mov ebx 13Eh +
jmp loc_404382  +
mov ds:dword_5146B8 164h +
mov ebx 164h +
jmp loc_404382  +
mov ds:dword_5146B8 165h +
mov ebx 165h +
jmp loc_404382  +
mov ds:dword_5146B8 145h +
mov ebx 145h +
jmp loc_404382  +
mov ds:dword_5146B8 2Ah +
mov ebx 2Ah +
jmp loc_404382  +
mov ds:dword_5146B8 3Fh +
mov ebx 3Fh +
jmp loc_404382  +
mov ds:dword_5146B8 21h +
mov ebx 21h +
jmp loc_404382  +
mov ds:dword_5146B8 7Eh +
mov ebx 7Eh +
jmp loc_404382  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0Ch +
mov ebx [esp+20h] +
test ebx ebx +
jz loc_40576A  +
call sub_403EB0  +
mov edx ds:dword_50F228 +
mov eax ds:dword_50F230 +
shl eax 2 +
test edx edx +
jz loc_405759  +
mov edi ds:dword_50F230 +
lea esi ds:0[edi*4] +
lea eax [edx+esi] +
mov ecx [eax] +
test ecx ecx +
jz loc_405759  +
mov ebp ds:dword_50F21C +
add edi 1 +
movzx ecx ds:byte_50F224 +
mov ds:dword_50F230 edi +
mov [ebp+0] cl +
mov ecx [eax] +
mov [ecx+8] ebp +
mov ecx ds:dword_50F220 +
mov eax [eax] +
mov [eax+10h] ecx +
lea eax [edx+esi+4] +
mov [eax] ebx +
call sub_403E70  +
mov ds:dword_50F210 1 +
add esp 0Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [eax+2Ch] 0 +
mov [esp] eax +
call sub_403F60  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_4] +
mov esi [esp+10h+arg_0] +
lea edi [ebx+2] +
mov [esp+10h+var_10] edi +
call malloc  +
test eax eax +
jz loc_4058E8  +
xor edx edx +
test ebx ebx +
jz loc_4058C1  +
movzx ecx byte ptr [esi+edx] +
mov [eax+edx] cl +
add edx 1 +
cmp edx ebx +
jnz loc_4058B3  +
mov byte ptr [eax+ebx+1] 0 +
mov byte ptr [eax+ebx] 0 +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] eax +
call near ptr dword_405780+70h  +
test eax eax +
jz loc_4058F2  +
mov dword ptr [eax+14h] 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax offset aOutOfDynamic_3 +
call sub_4BC400  +
mov eax offset aBadBufferInYy_ +
call sub_4BC400  +
lea esi [esi+0] +
push ebx  +
sub esp 18h +
mov ebx [esp+2Ch+var_C] +
mov [esp+2Ch+var_2C] ebx +
call strlen  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] eax +
call sub_405890  +
add esp 18h +
pop ebx  +
retn   +
***
jmp loc_405930  +
mov eax dword_4BE00C +
retn   +
***
mov eax ds:dword_50F0AC +
retn   +
***
mov eax ds:dword_50F0A8 +
retn   +
***
mov eax ds:dword_5146CC +
retn   +
***
mov eax ds:dword_5146D4 +
retn   +
***
mov eax [esp+4] +
mov dword_4BE00C eax +
retn   +
***
mov eax [esp+4] +
mov ds:dword_50F0AC eax +
retn   +
***
mov eax [esp+4] +
mov ds:dword_50F0A8 eax +
retn   +
***
mov eax ds:dword_50F0A4 +
retn   +
***
mov eax [esp+4] +
mov ds:dword_50F0A4 eax +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_50F228 +
test eax eax +
jnz loc_405A09  +
jmp loc_405A74  +
mov [esp] edx +
call sub_403FD0  +
mov eax ds:dword_50F228 +
mov edx ds:dword_50F230 +
mov dword ptr [eax+edx*4] 0 +
call near ptr dword_405780  +
mov eax ds:dword_50F228 +
test eax eax +
jz loc_405A74  +
mov edx ds:dword_50F230 +
mov edx [eax+edx*4] +
test edx edx +
jnz loc_4059E1  +
mov [esp] eax +
call free  +
xor eax eax +
mov ds:dword_50F228 0 +
mov ds:dword_50F230 0 +
mov ds:dword_50F22C 0 +
mov ds:dword_50F21C 0 +
mov ds:dword_50F218 0 +
mov ds:dword_50F214 0 +
mov ds:dword_50F0AC 0 +
mov ds:dword_50F0A8 0 +
add esp 1Ch +
retn   +
***
xor eax eax +
jmp loc_405A16  +
***
jmp malloc  +
***
jmp realloc  +
***
jmp free  +
***
push ebx  +
sub esp 10h +
mov eax ds:dword_50F114 +
mov ebx [esp+10h+arg_0] +
mov edi [esp+10h+arg_4] +
mov esi [esp+10h+arg_8] +
cmp eax 9 +
ja loc_405B62  +
mov edx dword_4BE008 +
mov ds:dword_50F1A0[eax*4] edi +
mov ds:dword_50F160[eax*4] edx +
movzx edx byte ptr ds:dword_5146EC +
shr dl 3 +
and edx 1 +
mov ds:dword_50F120[eax*4] edx +
mov edx ds:dword_50F228 +
test edx edx +
jz loc_405B78  +
mov ecx ds:dword_50F230 +
mov edx [edx+ecx*4] +
mov ds:dword_50F1E0[eax*4] edx +
add eax 1 +
mov edx esi +
mov ds:dword_50F114 eax +
movzx eax byte ptr ds:dword_5146EC +
and edx 1 +
shl edx 3 +
mov [esp+10h+var_10] ebx +
mov [esp+10h+var_C] 4000h +
and eax 0FFFFFFF7h +
or eax edx +
mov ds:dword_50F0AC ebx +
mov dword_4BE008 1 +
mov byte ptr ds:dword_5146EC al +
call sub_404100  +
mov [esp+10h+arg_0] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp sub_403F60  +
mov [esp+10h+var_10] offset aFIncludesNeste +
call sub_418450  +
mov eax ds:dword_50F114 +
jmp loc_405AD0  +
xor edx edx +
jmp loc_405B0B  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax ds:dword_50F114 +
mov ebp [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_4] +
mov ebx [esp+1Ch+arg_8] +
cmp eax 9 +
mov ds:dword_50F218 0 +
ja loc_405C80  +
mov edx dword_4BE008 +
mov ds:dword_50F1A0[eax*4] esi +
mov ds:dword_50F160[eax*4] edx +
mov edx ds:dword_50F228 +
test edx edx +
jz loc_405C96  +
mov ecx ds:dword_50F230 +
mov edx [edx+ecx*4] +
mov ds:dword_50F1E0[eax*4] edx +
add eax 1 +
mov [esp+1Ch+var_1C] ebp +
mov dword_4BE008 ebx +
mov ds:dword_50F114 eax +
call strlen  +
mov [esp+1Ch+var_1C] 30h +
mov esi eax +
call malloc  +
mov ebx eax +
mov [eax+0Ch] esi +
mov dword ptr [eax] 0 +
lea eax [esi+3] +
mov [esp+1Ch+var_1C] eax +
call malloc  +
mov [ebx+4] eax +
mov edi eax +
mov byte ptr [eax] 0Ah +
lea eax [eax+1] +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] eax +
call strcpy  +
lea eax [esi+1] +
mov byte ptr [edi+esi+2] 0 +
mov [ebx+10h] eax +
mov eax [ebx+4] +
mov dword ptr [ebx+14h] 1 +
mov dword ptr [ebx+18h] 0 +
mov dword ptr [ebx+1Ch] 1 +
add eax 1 +
mov [ebx+8] eax +
mov dword ptr [ebx+28h] 0 +
mov dword ptr [ebx+2Ch] 0 +
mov byte ptr [edi+esi+1] 0 +
mov [esp+1Ch+arg_0] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_403F60  +
mov [esp+1Ch+var_1C] offset aFMacrosNestedT +
call sub_418450  +
mov eax ds:dword_50F114 +
jmp loc_405BAB  +
xor edx edx +
jmp loc_405BD6  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 3 +
mov [eax] edx +
retn   +
***
jmp sub_405CD0  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 5 +
mov [eax] edx +
retn   +
***
jmp sub_405D00  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 0Dh +
mov [eax] edx +
retn   +
***
jmp sub_405D30  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 0Fh +
mov [eax] edx +
retn   +
***
jmp sub_405D60  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 11h +
mov [eax] edx +
retn   +
***
jmp sub_405D90  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 0Bh +
mov [eax] edx +
retn   +
***
jmp sub_405DC0  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 7 +
mov [eax] edx +
retn   +
***
jmp sub_405DF0  +
***
mov eax off_4BE004 +
lea edx [eax+4] +
mov off_4BE004 edx +
mov edx ds:dword_50F214 +
mov ds:dword_50F214 9 +
mov [eax] edx +
retn   +
***
jmp sub_405E20  +
***
mov eax off_4BE004 +
lea edx [eax-4] +
mov eax [eax-4] +
mov off_4BE004 edx +
mov ds:dword_50F214 eax +
retn   +
***
mov eax ds:dword_50F114 +
xor edx edx +
test eax eax +
setnz dl  +
sub eax edx +
mov eax ds:dword_50F1A0[eax*4] +
retn   +
***
mov edi eax +
push esi  +
push ebx  +
mov ebx edx +
sub esp 2Ch +
lea eax [esp+34h+var_18] +
mov [esp+34h+var_2C] 10h +
mov [esp+34h+var_30] eax +
mov [esp+34h+var_34] edx +
call j_strtoul  +
mov ebp eax +
mov eax [esp+34h+var_18] +
cmp byte ptr [eax] 0 +
jnz loc_405F08  +
mov ebx ds:dword_514914 +
lea esi [edi+1] +
test ebx ebx +
jnz loc_405EA6  +
jmp loc_405EC0  +
mov ebx [ebx] +
test ebx ebx +
jz loc_405EC0  +
mov [esp+34h+var_30] esi +
mov eax [ebx+4] +
mov [esp+34h+var_34] eax +
call strcmp  +
test eax eax +
jnz loc_405EA0  +
mov [ebx+8] ebp +
jmp loc_405EE8  +
mov [esp+34h+var_34] 10h +
call sub_40AAA0  +
mov ebx eax +
mov [eax+4] esi +
mov [eax+8] ebp +
mov dword ptr [eax+0Ch] 0 +
mov eax ds:dword_514914 +
mov [ebx] eax +
mov ds:dword_514914 ebx +
mov [esp+34h+var_34] ebp +
call sub_416850  +
mov [esp+34h+var_2C] ebx +
mov [esp+34h+var_34] edi +
mov [esp+34h+var_30] eax +
call sub_40F1D0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+34h+var_30] ebx +
mov [esp+34h+var_34] offset aPFInvalidHexNu +
call sub_418450  +
jmp loc_405E8E  +
***
xor edi edi +
push esi  +
push ebx  +
sub esp 7Ch +
mov [esp+84h+var_84] 1FDh +
mov ebp [esp+84h+arg_4] +
call sub_4A05F0  +
mov [esp+84h+var_84] 0AA0h +
mov [esp+84h+var_54] eax +
call sub_4A05F0  +
mov [esp+84h+var_84] 0AA0h +
mov [esp+84h+var_50] eax +
call malloc  +
xor ecx ecx +
mov edx 1 +
mov [esp+84h+arg_4] ebp +
mov ebp edi +
mov [esp+84h+var_4C] eax +
mov eax [esp+84h+var_54] +
mov byte ptr [eax] 2Dh +
mov eax offset unk_4CF600 +
jmp loc_405FAC  +
mov esi [eax] +
mov ebx ecx +
add ecx 1 +
shl ebx 4 +
add ebx [esp+84h+var_50] +
mov [ebx] esi +
mov esi [eax+4] +
mov [ebx+4] esi +
mov esi [eax+8] +
mov [ebx+8] esi +
mov esi [eax+0Ch] +
mov [ebx+0Ch] esi +
add eax 20h +
cmp eax offset off_4D0B20 +
jz loc_406007  +
movzx ebx byte ptr [eax+10h] +
test bl bl +
jz loc_405FCF  +
mov esi [esp+84h+var_54] +
lea edi [edx+1] +
mov [esi+edx] bl +
mov ebx [eax+4] +
lea esi [ebx-1] +
cmp esi 1 +
jbe loc_4061D7  +
mov edx edi +
mov edi [eax] +
test edi edi +
jz loc_405FA2  +
cmp dword ptr [eax+1Ch] 3 +
jnz loc_405F80  +
mov esi [eax] +
mov ebx ebp +
add eax 20h +
shl ebx 4 +
add ebp 1 +
add ebx [esp+84h+var_4C] +
mov [ebx] esi +
mov esi [eax-1Ch] +
mov [ebx+4] esi +
mov esi [eax-18h] +
mov [ebx+8] esi +
mov esi [eax-14h] +
cmp eax offset off_4D0B20 +
mov [ebx+0Ch] esi +
jnz loc_405FAC  +
mov eax [esp+84h+var_54] +
mov edi ebp +
mov ebp [esp+84h+arg_4] +
mov byte ptr [eax+edx] 0 +
mov eax ecx +
shl eax 4 +
add eax [esp+84h+var_50] +
mov dword ptr [eax] 0 +
mov eax edi +
shl eax 4 +
add eax [esp+84h+var_4C] +
mov dword ptr [eax] 0 +
lea eax [esp+84h+var_4C] +
mov [esp+84h+var_70] eax +
lea eax [esp+84h+var_50] +
mov [esp+84h+var_78] eax +
lea eax [esp+84h+var_54] +
mov [esp+84h+var_74] edi +
mov [esp+84h+var_7C] ecx +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] edx +
call sub_4175A0  +
cmp [esp+84h+arg_0] 1 +
jbe loc_406127  +
mov esi [ebp+4] +
mov eax 2 +
mov ebx 3 +
jmp loc_406087  +
mov esi [ebp+eax*4+0] +
add eax 1 +
mov edi offset aG +
mov ecx ebx +
cmps   +
jnz loc_4060B4  +
cmp [esp+84h+arg_0] eax +
jbe loc_4060AC  +
mov esi [ebp+eax*4+0] +
movzx ecx byte ptr [esi] +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jnz loc_406084  +
mov dword ptr [ebp+eax*4-4] offset aShared_1 +
cmp [esp+84h+arg_0] eax +
ja loc_406080  +
mov ebx 1 +
mov esi [esp+84h+arg_0] +
jmp loc_4060D7  +
add ebx 1 +
cmp ebx esi +
jz loc_406127  +
mov eax [ebp+ebx*4+0] +
cmp byte ptr [eax] 2Dh +
jnz loc_4060D0  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4060D0  +
cmp byte ptr [eax+2] 0 +
jz loc_4060D0  +
mov [esp+84h+var_84] eax +
call strlen  +
add eax 14h +
mov [esp+84h+var_84] eax +
call sub_4A05F0  +
mov edi eax +
mov eax [ebp+ebx*4+0] +
mov [esp+84h+var_80] offset aLibraryS +
mov [esp+84h+var_84] edi +
add eax 2 +
mov [esp+84h+var_7C] eax +
call sprintf  +
mov [ebp+ebx*4+0] edi +
add ebx 1 +
cmp ebx esi +
jnz loc_4060D7  +
mov [esp+84h+var_60] 3 +
mov [esp+84h+var_6C] 0FFFFFFFFh +
mov [esp+84h+var_68] 0 +
mov [esp+84h+var_64] 0 +
mov eax [esp+84h+var_6C] +
cmp dword_4C01AC eax +
jz loc_406173  +
mov eax [esp+84h+arg_0] +
mov [esp+84h+var_80] ebp +
mov [esp+84h+var_84] eax +
call sub_4175E0  +
test eax eax +
jnz loc_406147  +
mov eax dword_4C01AC +
mov [esp+84h+var_6C] eax +
lea eax [esp+84h+var_48] +
mov [esp+84h+var_74] eax +
mov eax [esp+84h+var_50] +
mov [esp+84h+var_80] ebp +
mov dword_4C01A8 0 +
mov [esp+84h+var_78] eax +
mov eax [esp+84h+var_54] +
mov [esp+84h+var_7C] eax +
mov eax [esp+84h+arg_0] +
mov [esp+84h+var_84] eax +
call sub_4A15A0  +
cmp eax 3Fh +
mov ebx eax +
jz loc_406201  +
mov [esp+84h+var_84] ebx +
call sub_4175C0  +
test eax eax +
jnz loc_406147  +
cmp ebx 0FFFFFFFFh +
jz loc_406410  +
cmp ebx 108h +
ja loc_406290  +
jmp ds:off_4CD1D0[ebx*4]  +
mov esi [esp+84h+var_54] +
cmp ebx 2 +
mov byte ptr [esi+edx+1] 3Ah +
lea esi [edx+2] +
jz loc_4061F0  +
mov edx esi +
jmp loc_405FCF  +
mov ebx [esp+84h+var_54] +
mov byte ptr [ebx+edx+2] 3Ah +
add edx 3 +
jmp loc_405FCF  +
mov eax [esp+84h+var_6C] +
mov [esp+84h+var_7C] offset asc_4CC87F +
mov [esp+84h+var_80] ebp +
mov dword_4C01AC eax +
lea eax [esp+84h+var_48] +
mov [esp+84h+var_74] eax +
mov eax [esp+84h+var_4C] +
mov [esp+84h+var_78] eax +
mov eax [esp+84h+arg_0] +
mov [esp+84h+var_84] eax +
call sub_4A1560  +
mov ebx eax +
jmp loc_4061AF  +
mov eax [esp+84h+var_6C] +
mov ebx offset unk_4D0B04 +
mov esi [ebp+eax*4+0] +
jmp loc_40625F  +
sub ebx 20h +
cmp ebx offset aOnsAreHandled_ +
jz loc_407C32  +
cmp dword ptr [ebx] 1 +
jnz loc_406250  +
mov eax [ebx-4] +
test eax eax +
jz loc_406250  +
mov [esp+84h+var_80] eax +
mov eax [ebx+18h] +
add eax esi +
mov [esp+84h+var_84] eax +
call strcmp  +
test eax eax +
jnz loc_406250  +
mov [esp+84h+var_80] esi +
mov [esp+84h+var_84] offset aPSMissingArgum +
call sub_418450  +
mov [esp+84h+var_84] offset aPFUseTheHelpOp +
call sub_418450  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 5 +
mov [esp+84h+var_84] eax +
call sub_40B090  +
jmp loc_406147  +
or ds:byte_514824 20h +
movzx eax byte ptr ds:word_514820 +
test al 1 +
jz loc_4062F2  +
and eax 3 +
mov edx offset aShared_2 +
cmp al 3 +
mov eax offset aPie +
cmovnz edx eax +
mov [esp+84h+var_80] edx +
mov [esp+84h+var_84] offset aPFRAndSMayNotB +
call sub_418450  +
movzx eax byte ptr ds:word_514820 +
mov ds:dword_51472C 1 +
mov ds:dword_514720 0 +
mov ds:dword_514750 0 +
and eax 0FFFFFFFCh +
or eax 2 +
mov byte ptr ds:word_514820 al +
and byte ptr ds:dword_5146EC 0DFh +
jmp loc_406147  +
mov edi ds:dword_5147E0 +
test edi edi +
jz loc_407E70  +
mov [esp+84h+var_84] edi +
call strlen  +
mov esi ds:dword_5141E8 +
mov [esp+84h+var_84] esi +
mov [esp+84h+var_58] eax +
call strlen  +
mov [esp+84h+arg_4] ebp +
mov ebp edi +
mov ebx eax +
movsx eax ds:byte_514768 +
mov byte ptr [esp+84h+var_5C] al +
mov edi eax +
jmp loc_406377  +
add eax 1 +
mov ebp eax +
jz loc_4063B2  +
mov [esp+84h+var_7C] ebx +
mov [esp+84h+var_80] ebp +
mov [esp+84h+var_84] esi +
call strncmp  +
test eax eax +
jnz loc_4063A2  +
movzx eax byte ptr [ebp+ebx+0] +
test al al +
jz loc_407B41  +
cmp al byte ptr [esp+84h+var_5C] +
jz loc_407B41  +
mov [esp+84h+var_80] edi +
mov [esp+84h+var_84] ebp +
call strchr  +
test eax eax +
jnz loc_406370  +
mov ebp [esp+84h+arg_4] +
mov eax [esp+84h+var_58] +
lea eax [eax+ebx+2] +
mov [esp+84h+var_84] eax +
call sub_4A05F0  +
mov [esp+84h+var_80] offset aSCS +
mov ebx eax +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] ebx +
mov [esp+84h+var_74] eax +
movsx eax ds:byte_514768 +
mov [esp+84h+var_78] eax +
mov eax ds:dword_5147E0 +
mov [esp+84h+var_7C] eax +
call sprintf  +
mov eax ds:dword_5147E0 +
mov [esp+84h+var_84] eax +
call free  +
mov ds:dword_5147E0 ebx +
jmp loc_406147  +
mov eax ds:dword_5147DC +
mov ebx [esp+84h+var_68] +
test eax eax +
jz loc_406426  +
cmp byte ptr [eax] 0 +
jz loc_407B57  +
mov esi [esp+84h+var_64] +
test esi esi +
jz loc_40643C  +
mov esi [esp+84h+var_64] +
call sub_40FB90  +
sub esi 1 +
jnz loc_406432  +
mov ecx [esp+84h+var_68] +
mov esi [esp+84h+var_68] +
test ecx ecx +
jnz loc_406457  +
jmp loc_406497  +
test eax eax +
jz loc_40648F  +
lea esi [eax+1] +
mov [esp+84h+var_80] 3Bh +
mov [esp+84h+var_84] esi +
call strchr  +
test eax eax +
jz loc_40646E  +
mov byte ptr [eax] 0 +
cmp byte ptr [esi] 0 +
jz loc_406450  +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] esi +
mov [esp+84h+var_6C] eax +
call sub_418740  +
mov eax [esp+84h+var_6C] +
test eax eax +
jnz loc_406454  +
mov [esp+84h+var_84] ebx +
call free  +
movzx eax ds:byte_514822 +
test al 6 +
jnz loc_4064B4  +
movzx ecx byte ptr [esp+84h+var_60] +
and eax 0FFFFFFF9h +
lea edx [ecx+ecx] +
or eax edx +
mov ds:byte_514822 al +
test al 18h +
jnz loc_4064D1  +
movzx eax ds:byte_514822 +
movzx edx byte ptr [esp+84h+var_60] +
and eax 0FFFFFFE7h +
shl edx 3 +
or eax edx +
mov ds:byte_514822 al +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_407B28  +
mov edx ds:dword_5147D0 +
cmp edx 1 +
jz loc_407AF5  +
cmp edx 2 +
jnz loc_40655F  +
cmp al 3 +
jnz loc_40655F  +
mov ds:dword_5147D4 1 +
or byte ptr ds:word_514820+1 4 +
or ds:byte_514825 1 +
cmp al 3 +
jz loc_406542  +
mov edx ds:dword_5147E8 +
test edx edx +
jz loc_40652D  +
mov [esp+84h+var_84] offset aPFFMayNotBeUse +
call sub_418450  +
mov eax ds:dword_5147EC +
test eax eax +
jz loc_406542  +
mov [esp+84h+var_84] offset aPFFMayNotBeU_0 +
call sub_418450  +
movzx eax ds:word_514820 +
and ax 1803h +
cmp ax 1802h +
jz loc_407AC7  +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx ds:dword_5147D4 +
cmp edx 1 +
jz loc_406505  +
cmp edx 2 +
jz loc_40650C  +
jmp loc_406513  +
mov ds:dword_514720 0 +
and byte ptr ds:dword_5146EC 0DFh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call sub_40E870  +
jmp loc_406147  +
or ds:byte_514822 80h +
jmp loc_406147  +
or byte ptr ds:word_514820+1 18h +
jmp loc_406147  +
mov ds:dword_514800 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] eax +
call sub_40D550  +
jmp loc_406147  +
mov [esp+84h+var_84] 0 +
call sub_417A10  +
mov ds:dword_5148A0 1 +
jmp loc_406147  +
or byte ptr ds:word_514820+1 60h +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_413B80  +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov edi offset aDefinitions +
mov ecx 0Ch +
mov esi eax +
cmps   +
jz loc_406147  +
mov edi offset aNodefinitions +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_406147  +
mov edi offset aNosymbolic +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_406147  +
mov edi offset aPureText +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_406147  +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] offset aPFUnrecognized +
call sub_418450  +
jmp loc_406147  +
or byte ptr ds:dword_5146EC 20h +
jmp loc_406147  +
mov ds:dword_5147B0 1 +
or byte ptr ds:word_514820 80h +
jmp loc_406147  +
mov ecx ds:dword_50F240 +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] offset aDefsym +
lea edx [ecx+1] +
mov [esp+84h+var_7C] edx +
mov [esp+84h+var_84] eax +
mov ds:dword_50F0A0 eax +
mov ds:dword_50F240 edx +
call sub_405B80  +
mov ds:dword_5146D0 5 +
call sub_401730  +
mov ds:dword_50F0A0 0 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ds:dword_514794 1 +
test eax eax +
jz loc_406147  +
mov [esp+84h+var_84] eax +
call sub_4A2180  +
test eax eax +
mov ebx eax +
jnz loc_40672C  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] offset aFPUnknownDeman +
mov [esp+84h+var_80] eax +
call sub_418450  +
mov [esp+84h+var_84] ebx +
call sub_4A2150  +
jmp loc_406147  +
or ds:byte_514826 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] offset aPlace +
mov [esp+84h+var_84] eax +
call ds:_stricmp  +
test eax eax +
jnz loc_407C95  +
mov ds:dword_51473C 0 +
jmp loc_406147  +
mov ds:dword_5147CC 1 +
jmp loc_406147  +
mov ds:dword_5147CC 2 +
jmp loc_406147  +
mov ds:dword_5147A8 1 +
jmp loc_406147  +
and byte ptr ds:word_514820 0EFh +
jmp loc_406147  +
mov eax ds:dword_51478C +
mov [esp+84h+var_84] offset aUsageSOptionsF +
mov [esp+84h+var_80] eax +
call printf  +
mov [esp+84h+var_84] offset aOptions +
call puts  +
mov [esp+84h+var_60] offset off_4CF618 +
mov [esp+84h+var_64] 0 +
lea esi [esi+0] +
mov edi [esp+84h+var_60] +
mov eax [edi] +
test eax eax +
mov [esp+84h+var_5C] eax +
jz loc_407860  +
mov [esp+84h+var_84] offset asc_4CC9FE +
lea esi [edi-8] +
mov ebx 2 +
call printf  +
mov edi [esp+84h+var_64] +
xor eax eax +
jmp loc_406883  +
mov [esp+84h+var_7C] edx +
mov [esp+84h+var_80] offset asc_4CD1C2 +
mov [esp+84h+var_84] offset aSC +
call printf  +
mov ebp [esi+4] +
mov eax 4 +
add ebx eax +
test ebp ebp +
jz loc_4068C2  +
cmp dword ptr [esi-0Ch] 2 +
jz loc_40684F  +
mov [esp+84h+var_84] 20h +
add ebx 1 +
call putchar  +
mov [esp+84h+var_80] ebp +
mov [esp+84h+var_84] offset aS_7 +
call printf  +
mov [esp+84h+var_84] ebp +
call strlen  +
add ebx eax +
mov eax 1 +
add edi 1 +
cmp edi 0A8h +
ja loc_4068D2  +
add esi 20h +
mov ecx [esi+8] +
test ecx ecx +
jnz loc_4068D2  +
movsx edx byte ptr [esi] +
test dl dl +
jz loc_40686E  +
cmp dword ptr [esi+0Ch] 4 +
jz loc_40686E  +
test eax eax +
jnz loc_406810  +
mov [esp+84h+var_7C] edx +
mov [esp+84h+var_80] offset unk_4CC881 +
mov [esp+84h+var_84] offset aSC +
call printf  +
mov ebp [esi+4] +
mov eax 2 +
add ebx eax +
test ebp ebp +
jnz loc_40683A  +
add edi 1 +
mov eax 1 +
cmp edi 0A8h +
jbe loc_406879  +
mov ecx [esp+84h+var_60] +
mov esi [esp+84h+var_64] +
lea ebp [ecx+4] +
mov [esp+84h+var_6C] esi +
mov esi ebp +
mov ebp ebx +
jmp loc_406970  +
mov [esp+84h+var_78] ecx +
mov [esp+84h+var_7C] edi +
mov edi 3 +
mov [esp+84h+var_80] offset asc_4CD1C2 +
mov [esp+84h+var_84] offset aSSS +
mov [esp+84h+var_68] ecx +
call printf  +
mov ecx [esp+84h+var_68] +
mov [esp+84h+var_84] ecx +
add edi ebx +
call strlen  +
mov ebx [esi-8] +
add ebp eax +
add ebp edi +
test ebx ebx +
jz loc_40694A  +
mov [esp+84h+var_80] ebx +
mov [esp+84h+var_84] offset aS_8 +
call printf  +
mov [esp+84h+var_84] ebx +
call strlen  +
lea ebp [ebp+eax+1] +
mov eax 1 +
add [esp+84h+var_6C] 1 +
cmp [esp+84h+var_6C] 0A9h +
jz loc_407830  +
add esi 20h +
mov edx [esi-4] +
test edx edx +
jnz loc_407830  +
mov ecx [esi-1Ch] +
test ecx ecx +
jz loc_40694F  +
mov ebx [esi] +
cmp ebx 4 +
jz loc_40694F  +
sub ebx 2 +
mov edi offset asc_4CC87F +
cmp ebx 1 +
mov edx offset unk_4CC881 +
setbe bl  +
cmova edi edx +
test eax eax +
movzx ebx bl +
jnz loc_4068F0  +
mov [esp+84h+var_78] ecx +
mov [esp+84h+var_7C] edi +
mov edi 1 +
mov [esp+84h+var_80] offset unk_4CC881 +
mov [esp+84h+var_84] offset aSSS +
mov [esp+84h+var_68] ecx +
call printf  +
mov ecx [esp+84h+var_68] +
jmp loc_406919  +
mov eax ds:dword_5141E8 +
mov ds:dword_51476C eax +
jmp loc_406147  +
mov ds:dword_514794 0 +
jmp loc_406147  +
and ds:byte_514822 0BFh +
jmp loc_406147  +
mov ds:dword_5147B4 0 +
jmp loc_406147  +
mov ds:dword_5147B8 0 +
jmp loc_406147  +
mov ds:dword_50F404 1 +
jmp loc_406147  +
and byte ptr ds:dword_5146EC 0DFh +
jmp loc_406147  +
and byte ptr ds:dword_5146EC+1 0FEh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_78] 0 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call sub_40FAA0  +
jmp loc_406147  +
mov ds:dword_514834 0 +
jmp loc_406147  +
mov ds:dword_514834 2 +
jmp loc_406147  +
movzx eax byte ptr ds:word_514820+1 +
and eax 0FFFFFFE7h +
or eax 8 +
mov byte ptr ds:word_514820+1 al +
jmp loc_406147  +
mov eax ds:dword_50F40C +
mov ds:dword_50F408 eax +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_419100  +
mov ds:dword_5146D0 1 +
call sub_401730  +
mov ds:dword_50F408 0 +
jmp loc_406147  +
mov [esp+84h+var_84] 1 +
call sub_417A10  +
mov ds:dword_5148A0 1 +
jmp loc_406147  +
movzx eax byte ptr ds:word_514820+1 +
and eax 0FFFFFF9Fh +
or eax 40h +
mov byte ptr ds:word_514820+1 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ecx 2 +
mov edi offset aP +
mov esi eax +
mov ebx eax +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
jnz loc_406B2A  +
add ebx 2 +
mov ds:dword_5141E8 ebx +
mov eax [esp+84h+var_68] +
test eax eax +
jz loc_406B3A  +
mov [esp+84h+var_84] eax +
call free  +
mov [esp+84h+var_84] ebx +
call sub_4A06C0  +
mov [esp+84h+var_68] eax +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov edi offset aArchive +
mov ecx 8 +
mov esi eax +
cmps   +
jnz loc_407BA4  +
and byte ptr ds:dword_5146EC 0DFh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_40F270  +
jmp loc_406147  +
mov eax [esp+84h+var_6C] +
cmp dword_4C01AC eax +
jz loc_407DC5  +
movzx eax byte ptr ds:word_514820 +
test al 1 +
jz loc_406BC2  +
and eax 3 +
mov edx eax +
mov eax offset aShared_2 +
cmp dl 3 +
mov edx offset aPie +
cmovnz eax edx +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] offset aPFRAndSMayNotB +
call sub_418450  +
movzx eax byte ptr ds:word_514820 +
mov ds:dword_51472C 0 +
mov ds:dword_514720 0 +
mov ds:dword_514750 0 +
and eax 0FFFFFFFCh +
or eax 2 +
mov byte ptr ds:word_514820 al +
and byte ptr ds:dword_5146EC 0DFh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call sub_40B090  +
jmp loc_406147  +
mov ds:dword_5147C8 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ds:dword_5147E8 eax +
jmp loc_406147  +
lea eax [esp+84h+var_44] +
mov [esp+84h+var_80] eax +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_84] eax +
call strtoul  +
mov dword_4BE09C eax +
mov eax [esp+84h+var_44] +
cmp byte ptr [eax] 0 +
jz loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] offset aPFInvalidNumbe +
mov [esp+84h+var_80] eax +
call sub_418450  +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
and ds:byte_514826 0FEh +
mov ds:dword_5147D8 eax +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] eax +
call sub_418740  +
jmp loc_406147  +
mov ds:dword_51476C offset asc_4CC87F +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] eax +
call sub_40F220  +
jmp loc_406147  +
mov edx ds:dword_5147EC +
test edx edx +
jz loc_407E23  +
mov esi [edx] +
xor eax eax +
test esi esi +
jz loc_407E15  +
lea esi [esi+0] +
add eax 1 +
mov ebx [edx+eax*4] +
test ebx ebx +
jnz loc_406D00  +
lea eax ds:8[eax*4] +
lea esi [eax-8] +
lea ebx [eax-4] +
mov [esp+84h+var_84] edx +
mov [esp+84h+var_80] eax +
call sub_4A0670  +
mov edx ds:dword_5141E8 +
mov ds:dword_5147EC eax +
mov [eax+esi] edx +
mov eax ds:dword_5147EC +
mov dword ptr [eax+ebx] 0 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_40D5B0  +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_419100  +
mov ds:dword_5146D0 2 +
call sub_401730  +
jmp loc_406147  +
mov ds:dword_5147A0 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
cmp byte ptr [eax] 0 +
jnz loc_406DA1  +
mov edx ds:dword_5147DC +
test edx edx +
jz loc_406DA1  +
cmp byte ptr [edx] 0 +
jnz loc_407E04  +
mov ds:dword_5147DC eax +
jmp loc_406147  +
mov ds:dword_514750 0 +
mov ds:dword_514720 0 +
and byte ptr ds:dword_5146EC 0DFh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call strtoul  +
test eax eax +
movzx eax ds:byte_514825 +
setnz dl  +
shl edx 3 +
and eax 0FFFFFFF7h +
or eax edx +
mov ds:byte_514825 al +
jmp loc_406147  +
lea eax [esp+84h+var_44] +
mov [esp+84h+var_80] eax +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call ds:_stati64  +
test eax eax +
js loc_40632E  +
movzx eax [esp+84h+var_3E] +
and ax 0F000h +
cmp ax 4000h +
jz loc_40632E  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] eax +
call sub_40B090  +
jmp loc_406147  +
mov eax [esp+84h+var_64] +
test eax eax +
jz loc_407CC2  +
call sub_40FB90  +
sub [esp+84h+var_64] 1 +
jmp loc_406147  +
or byte ptr ds:word_514820 10h +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_419120  +
jmp loc_406147  +
call sub_40FB40  +
add [esp+84h+var_64] 1 +
jmp loc_406147  +
mov eax ds:dword_5146F0 +
test eax eax +
jz loc_407DF3  +
mov edx [eax] +
mov ds:dword_5146EC edx +
mov edx [eax+4] +
mov [esp+84h+var_84] eax +
mov ds:dword_5146F0 edx +
call free  +
jmp loc_406147  +
mov ds:dword_514744 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_407CF3  +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call strtoul  +
mov ds:dword_514774 eax +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_407CE4  +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call j_strtoul  +
mov ds:dword_514778 eax +
jmp loc_406147  +
or byte ptr ds:dword_5146EC+1 1 +
jmp loc_406147  +
and byte ptr ds:dword_5146EC 7Fh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_413ED0  +
jmp loc_406147  +
mov ds:dword_5147AC 1 +
jmp loc_406147  +
or byte ptr ds:word_514820 40h +
jmp loc_406147  +
and byte ptr ds:word_514820 0BFh +
jmp loc_406147  +
or ds:byte_514825 10h +
jmp loc_406147  +
and ds:byte_514825 0EFh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call strtoul  +
test eax eax +
jz loc_407CD3  +
mov ds:dword_514780 eax +
jmp loc_406147  +
mov ds:byte_5147BC 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ds:dword_51486C eax +
jmp loc_406147  +
mov esi ds:dword_5141E8 +
mov [esp+84h+var_80] 3Dh +
mov [esp+84h+var_84] esi +
call strchr  +
mov edx esi +
test eax eax +
mov ebx eax +
jz loc_407E59  +
cmp byte ptr [edx] 0 +
lea esi [ebx+1] +
jz loc_40701C  +
cmp byte ptr [ebx+1] 0 +
jnz loc_40702E  +
mov [esp+84h+var_84] offset aPFMissingArgum +
call sub_418450  +
mov edx ds:dword_5141E8 +
mov edi esi +
sub edi edx +
mov [esp+84h+var_84] edi +
call sub_4A05F0  +
mov ebx eax +
lea eax [edi-1] +
mov [esp+84h+var_7C] eax +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] ebx +
mov [esp+84h+var_80] eax +
call memcpy  +
lea eax [esp+84h+var_44] +
mov byte ptr [ebx+edi-1] 0 +
mov [esp+84h+var_7C] 10h +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] esi +
call j_strtoul  +
mov edi eax +
mov eax [esp+84h+var_44] +
cmp byte ptr [eax] 0 +
jz loc_40708C  +
mov [esp+84h+var_80] esi +
mov [esp+84h+var_84] offset aPFInvalidHexNu +
call sub_418450  +
mov [esp+84h+var_84] edi +
call sub_416850  +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_84] ebx +
mov [esp+84h+var_80] eax +
call sub_40F1D0  +
jmp loc_406147  +
movzx eax byte ptr [esp+84h+var_60] +
lea edx [eax+eax] +
movzx eax ds:byte_514822 +
and eax 0FFFFFFF9h +
or eax edx +
mov ds:byte_514822 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ds:dword_514868 eax +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_407D02  +
mov [esp+84h+var_84] eax +
call sub_411CB0  +
jmp loc_406147  +
mov eax ds:_iob +
add eax 20h +
mov [esp+84h+var_84] eax +
call sub_417920  +
mov [esp+84h+var_84] 0 +
call exit  +
mov ds:byte_5147BC 0 +
jmp loc_406147  +
and byte ptr ds:dword_5146EC 0BFh +
jmp loc_406147  +
or byte ptr ds:dword_5146EC 80h +
jmp loc_406147  +
or byte ptr ds:dword_5146EC 40h +
jmp loc_406147  +
movzx eax ds:byte_514822 +
and eax 0FFFFFFE7h +
or eax 8 +
mov ds:byte_514822 al +
jmp loc_406147  +
movzx eax byte ptr [esp+84h+var_60] +
lea edx ds:0[eax*8] +
movzx eax ds:byte_514822 +
and eax 0FFFFFFE7h +
or eax edx +
mov ds:byte_514822 al +
jmp loc_406147  +
or ds:byte_514824 40h +
jmp loc_406147  +
and ds:byte_514824 7Fh +
jmp loc_406147  +
or byte ptr ds:word_514820 20h +
jmp loc_406147  +
or ds:byte_514824 4 +
jmp loc_406147  +
movzx eax byte ptr ds:word_514820+1 +
and eax 0FFFFFF9Fh +
or eax 20h +
mov byte ptr ds:word_514820+1 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_84] eax +
call strtoul  +
mov ds:dword_514884 eax +
jmp loc_406147  +
mov ds:dword_5147A4 1 +
jmp loc_406147  +
call sub_411D60  +
cmp ds:dword_5147D4 1 +
jz loc_40720E  +
mov ds:dword_5147D4 2 +
cmp ds:dword_5147D0 1 +
jnz loc_406147  +
mov ds:dword_5147D0 0 +
jmp loc_406147  +
cmp ds:dword_5147D0 1 +
mov ds:dword_5147D4 1 +
jnz loc_406147  +
mov ds:dword_5147D0 0 +
jmp loc_406147  +
mov ds:dword_514734 1 +
jmp loc_406147  +
mov ds:dword_514730 1 +
jmp loc_406147  +
mov ds:dword_514748 1 +
jmp loc_406147  +
mov ds:dword_514748 0 +
jmp loc_406147  +
mov ds:dword_514740 1 +
jmp loc_406147  +
mov ds:dword_514738 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ebx ds:dword_50F40C +
mov [esp+84h+var_84] eax +
call sub_419100  +
mov ds:dword_50F40C ebx +
mov ds:dword_5146D0 3 +
call sub_401730  +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ds:dword_5147F0 eax +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ebx ds:dword_50F40C +
mov [esp+84h+var_84] eax +
call sub_419100  +
mov ds:dword_50F40C ebx +
mov ds:dword_5146D0 4 +
call sub_401730  +
cmp ds:dword_5147D4 1 +
jz loc_407321  +
mov ds:dword_5147D4 2 +
cmp ds:dword_5147D0 1 +
jnz loc_406147  +
mov ds:dword_5147D0 0 +
jmp loc_406147  +
call sub_411DC0  +
cmp ds:dword_5147D4 1 +
jz loc_407355  +
mov ds:dword_5147D4 2 +
cmp ds:dword_5147D0 1 +
jnz loc_406147  +
mov ds:dword_5147D0 0 +
jmp loc_406147  +
mov ds:dword_5147C4 1 +
jmp loc_406147  +
mov eax ds:dword_514804 +
cmp byte ptr [eax] 0 +
jnz loc_407C86  +
mov [esp+84h+var_84] 0 +
call sub_4A7250  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] offset word_514820 +
mov [esp+84h+var_80] eax +
call sub_413C20  +
jmp loc_406147  +
mov [esp+84h+var_7C] 8 +
mov [esp+84h+var_80] 8 +
mov [esp+84h+var_84] offset dword_5146EC +
call sub_4A7270  +
mov ds:dword_5146F0 eax +
jmp loc_406147  +
mov ds:dword_5147D0 2 +
jmp loc_406147  +
mov edx ds:dword_5141E8 +
mov eax offset a_bss +
call sub_405E60  +
jmp loc_406147  +
mov edx ds:dword_5141E8 +
mov eax offset a_data +
call sub_405E60  +
jmp loc_406147  +
mov edx ds:dword_5141E8 +
mov eax offset a_text_0 +
call sub_405E60  +
jmp loc_406147  +
mov edx ds:dword_5141E8 +
mov eax offset a_textSegment +
call sub_405E60  +
jmp loc_406147  +
mov edx ds:dword_5141E8 +
mov eax offset a_rodataSegment +
call sub_405E60  +
jmp loc_406147  +
mov edx ds:dword_5141E8 +
mov eax offset a_ldataSegment +
call sub_405E60  +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_407B72  +
mov edi offset aDescending +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_407B72  +
mov edi offset aAscending +
mov ecx 0Ah +
mov esi eax +
cmps   +
jnz loc_407DDE  +
mov ds:dword_51474C 1 +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov edi offset aName +
mov ecx 5 +
mov esi eax +
cmps   +
jnz loc_407B81  +
mov ds:dword_5147F8 1 +
jmp loc_406147  +
mov ds:dword_514754 1 +
jmp loc_406147  +
mov ds:dword_5147D0 1 +
jmp loc_406147  +
mov eax ds:dword_5147E4 +
test eax eax +
jz loc_407D99  +
mov [esp+84h+var_84] eax +
call strlen  +
mov ebx eax +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call strlen  +
lea eax [ebx+eax+2] +
mov [esp+84h+var_84] eax +
call sub_4A05F0  +
mov [esp+84h+var_80] offset aSCS +
mov ebx eax +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] ebx +
mov [esp+84h+var_74] eax +
movsx eax ds:byte_514768 +
mov [esp+84h+var_78] eax +
mov eax ds:dword_5147E4 +
mov [esp+84h+var_7C] eax +
call sprintf  +
mov eax ds:dword_5147E4 +
mov [esp+84h+var_84] eax +
call free  +
mov ds:dword_5147E4 ebx +
jmp loc_406147  +
mov eax ds:dword_514728 +
test eax eax +
jz loc_407C75  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_407E87  +
movzx eax ds:byte_514822 +
or byte ptr ds:word_514820 3 +
test al 6 +
jnz loc_4075A4  +
and eax 0FFFFFFF9h +
or eax 2 +
mov ds:byte_514822 al +
test al 18h +
jnz loc_406147  +
movzx eax ds:byte_514822 +
and eax 0FFFFFFE7h +
or eax 8 +
mov ds:byte_514822 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_413F70  +
jmp loc_406147  +
or ds:byte_514824 1 +
jmp loc_406147  +
mov ds:dword_51475C 1 +
jmp loc_406147  +
mov ds:dword_514750 1 +
mov ds:dword_514720 1 +
jmp loc_406147  +
or byte ptr ds:word_514820+1 2 +
jmp loc_406147  +
and byte ptr ds:word_514820+1 0FDh +
jmp loc_406147  +
mov ds:dword_5147C0 1 +
jmp loc_406147  +
mov ds:dword_5147C0 0 +
jmp loc_406147  +
mov eax ds:dword_514728 +
test eax eax +
jz loc_407C54  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_407E48  +
movzx eax byte ptr ds:word_514820 +
and eax 0FFFFFFFCh +
or eax 1 +
mov byte ptr ds:word_514820 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov edi offset aIgnoreAll +
mov ecx 0Bh +
mov esi eax +
cmps   +
jnz loc_407BE5  +
movzx eax ds:byte_514822 +
and eax 0FFFFFFE1h +
or eax 0Ah +
mov ds:byte_514822 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov ds:dword_5147F4 eax +
jmp loc_406147  +
or ds:byte_514825 20h +
jmp loc_406147  +
mov edi ds:dword_514780 +
or ds:byte_514823 80h +
test edi edi +
jnz loc_406147  +
mov ds:dword_514780 3FDh +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_41B1A0  +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_41B280  +
test eax eax +
jz loc_406147  +
mov [esp+84h+var_84] offset aPFBadPluginOpt +
call sub_418450  +
jmp loc_406147  +
movzx eax ds:byte_514822 +
mov edx eax +
and edx 6 +
cmp dl 4 +
jz loc_407C47  +
and eax 18h +
cmp al 10h +
mov [esp+84h+var_60] 3 +
jnz loc_406147  +
or ds:byte_514822 18h +
jmp loc_406147  +
or ds:byte_514823 8 +
jmp loc_406147  +
movzx eax ds:byte_514822 +
mov edx eax +
and edx 6 +
cmp dl 6 +
jz loc_407C65  +
and eax 18h +
cmp al 18h +
mov [esp+84h+var_60] 2 +
jnz loc_406147  +
movzx eax ds:byte_514822 +
and eax 0FFFFFFE7h +
or eax 10h +
mov ds:byte_514822 al +
jmp loc_406147  +
mov [esp+84h+var_84] 2 +
call sub_417A10  +
jmp loc_40738E  +
mov [esp+84h+var_84] 1 +
call sub_417A10  +
mov eax ds:dword_5141E8 +
mov ds:dword_5148A0 1 +
mov ds:dword_514798 1 +
mov dword_4BE040 0FFFFFFFEh +
test eax eax +
jz loc_406147  +
lea ecx [esp+84h+var_44] +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_80] ecx +
mov [esp+84h+var_84] eax +
call strtoul  +
mov ebx eax +
mov eax [esp+84h+var_44] +
cmp byte ptr [eax] 0 +
jz loc_40781B  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] offset aPFInvalidNumbe +
mov [esp+84h+var_80] eax +
call sub_418450  +
xor eax eax +
cmp ebx 1 +
setnle al  +
mov ds:dword_514924 eax +
jmp loc_406147  +
cmp ebp 1Dh +
mov ebx ebp +
jg loc_407AB4  +
nop   +
lea esi [esi+0] +
mov [esp+84h+var_84] 20h +
add ebx 1 +
call putchar  +
cmp ebx 1Eh +
jnz loc_407840  +
mov eax [esp+84h+var_5C] +
mov [esp+84h+var_84] eax +
call puts  +
add [esp+84h+var_64] 1 +
add [esp+84h+var_60] 20h +
cmp [esp+84h+var_64] 0A9h +
jnz loc_4067E0  +
mov [esp+84h+var_84] offset a@file +
mov ebx 17h +
call printf  +
lea esi [esi+0] +
mov [esp+84h+var_84] 20h +
call putchar  +
sub ebx 1 +
jnz loc_407890  +
mov [esp+84h+var_84] offset aReadOptionsFro +
call puts  +
mov eax ds:dword_51478C +
mov [esp+84h+var_84] offset aSSupportedTarg +
mov [esp+84h+var_80] eax +
call printf  +
call sub_44D0C0  +
mov edx [eax] +
mov esi eax +
mov ebx eax +
test edx edx +
jz loc_4078EA  +
mov [esp+84h+var_80] edx +
add ebx 4 +
mov [esp+84h+var_84] offset aS_8 +
call printf  +
mov edx [ebx] +
test edx edx +
jnz loc_4078D1  +
mov [esp+84h+var_84] esi +
call free  +
mov [esp+84h+var_84] 0Ah +
call putchar  +
mov eax ds:dword_51478C +
mov [esp+84h+var_84] offset aSSupportedEmul +
mov [esp+84h+var_80] eax +
call printf  +
mov eax ds:_iob +
add eax 20h +
mov [esp+84h+var_84] eax +
call sub_417820  +
mov [esp+84h+var_84] 0Ah +
call putchar  +
mov eax ds:dword_51478C +
mov [esp+84h+var_84] offset aSEmulationSpec +
mov [esp+84h+var_80] eax +
call printf  +
mov eax ds:_iob +
mov [esp+84h+var_84] offset aElfEmulations +
lea ebx [eax+20h] +
call puts  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 35h +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aBuildIdStyleGe +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 82h +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aCompressDebugS +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 2Dh +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aDefaultNone +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 3Bh +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aZCommonPageSiz +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 3Ch +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aZMaxPageSizeSi +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 49h +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aZDefsReportUnr +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 39h +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aZMuldefsAllowM +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 4Ch +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aZExecstackMark +
call fwrite  +
mov [esp+84h+var_78] ebx +
mov [esp+84h+var_7C] 50h +
mov [esp+84h+var_80] 1 +
mov [esp+84h+var_84] offset aZNoexecstackMa +
call fwrite  +
mov eax ds:_iob +
add eax 20h +
mov [esp+84h+var_84] eax +
call sub_417920  +
mov [esp+84h+var_84] 0Ah +
call putchar  +
mov [esp+84h+var_80] offset aHttpWww_source +
mov [esp+84h+var_84] offset aReportBugsToS +
call printf  +
mov [esp+84h+var_84] 0 +
call sub_4A7250  +
mov [esp+84h+var_84] 0Ah +
xor ebx ebx +
call putchar  +
jmp loc_407840  +
movzx eax byte ptr ds:word_514820+1 +
and eax 0FFFFFFE7h +
mov edx eax +
or edx 8 +
mov byte ptr ds:word_514820+1 dl +
and edx 60h +
jnz loc_406557  +
or eax 68h +
mov byte ptr ds:word_514820+1 al +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 3 +
jnz loc_40655F  +
movzx eax byte ptr ds:word_514820 +
mov ds:dword_514898 0 +
mov ds:dword_5147D4 0 +
or eax 4 +
mov byte ptr ds:word_514820 al +
and eax 3 +
jmp loc_406513  +
cmp ds:byte_5147BC 0 +
jns loc_4064E3  +
mov ds:byte_5147BC 0 +
jmp loc_4064E3  +
mov edi ebp +
mov ebp [esp+84h+arg_4] +
test edi edi +
jnz loc_406147  +
jmp loc_4063B9  +
mov [esp+84h+var_84] offset aPSonameMustNot +
call sub_418450  +
mov ds:dword_5147DC 0 +
jmp loc_406426  +
mov ds:dword_51474C 2 +
jmp loc_406147  +
mov edi offset aAlignment +
mov ecx 0Ah +
mov esi eax +
cmps   +
jnz loc_407DB0  +
mov ds:dword_5147F8 2 +
jmp loc_406147  +
mov edi offset aShared_3 +
mov ecx 7 +
mov esi eax +
cmps   +
jz loc_407BD9  +
mov edi offset aDefault_1 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_407BD9  +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] offset aPFUnrecogniz_0 +
call sub_418450  +
jmp loc_406147  +
or byte ptr ds:dword_5146EC 20h +
jmp loc_406147  +
mov edi offset aReportAll +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_407D11  +
mov edi offset aIgnoreInObject +
mov ecx 17h +
mov esi eax +
cmps   +
jnz loc_407D64  +
movzx eax ds:byte_514822 +
movzx ecx byte ptr [esp+84h+var_60] +
and eax 0FFFFFFE1h +
lea edx ds:0[ecx*8] +
or eax 2 +
or eax edx +
mov ds:byte_514822 al +
jmp loc_406147  +
mov [esp+84h+var_80] esi +
mov [esp+84h+var_84] offset aPUnrecognizedO +
call sub_418450  +
jmp loc_406290  +
or eax 6 +
mov ds:byte_514822 al +
jmp loc_407731  +
mov [esp+84h+var_84] offset aPFPieNotSuppor +
call sub_418450  +
jmp loc_406147  +
and eax 0FFFFFFF9h +
or eax 4 +
mov ds:byte_514822 al +
jmp loc_407771  +
mov [esp+84h+var_84] offset aPFSharedNotSup +
call sub_418450  +
jmp loc_406147  +
mov [esp+84h+var_84] eax +
call puts  +
nop   +
jmp loc_40738E  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] offset aWarn +
mov [esp+84h+var_84] eax +
call ds:_stricmp  +
test eax eax +
jnz loc_407D37  +
mov ds:dword_51473C 2 +
jmp loc_406147  +
mov [esp+84h+var_84] offset aPFGroupEndedBe +
call sub_418450  +
jmp loc_406E65  +
mov [esp+84h+var_84] offset aPXHashSizeNeed +
call sub_418450  +
jmp loc_406147  +
mov ds:dword_514778 1 +
jmp loc_406147  +
mov ds:dword_514774 8000h +
jmp loc_406147  +
mov ds:dword_514758 1 +
jmp loc_406147  +
movzx edx byte ptr [esp+84h+var_60] +
movzx eax ds:byte_514822 +
and edx 3 +
lea ecx [edx+edx] +
and eax 0FFFFFFE1h +
shl edx 3 +
or eax ecx +
or eax edx +
mov ds:byte_514822 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] offset aError_0 +
mov [esp+84h+var_84] eax +
call ds:_stricmp  +
test eax eax +
jnz loc_407E98  +
mov ds:dword_51473C 3 +
jmp loc_406147  +
mov edi offset aIgnoreInShared +
mov ecx 16h +
mov esi eax +
cmps   +
jnz loc_407EC1  +
movzx eax byte ptr [esp+84h+var_60] +
lea edx [eax+eax] +
movzx eax ds:byte_514822 +
and eax 0FFFFFFE1h +
or eax edx +
or eax 8 +
mov ds:byte_514822 al +
jmp loc_406147  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_4A06C0  +
mov ds:dword_5147E4 eax +
jmp loc_406147  +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] offset aPFInvalidSecti +
call sub_418450  +
jmp loc_406147  +
mov eax [ebp+eax*4+0] +
mov [esp+84h+var_84] offset aPFUnrecognis_0 +
mov [esp+84h+var_80] eax +
call sub_418450  +
jmp loc_406B92  +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] offset aPFInvalidCommo +
call sub_418450  +
jmp loc_406147  +
mov [esp+84h+var_84] offset aPFNoStatePushe +
call sub_418450  +
jmp loc_406147  +
mov [esp+84h+var_84] offset aPSonameMustN_0 +
call sub_418450  +
jmp loc_406147  +
mov ebx 4 +
xor esi esi +
mov al 8 +
jmp loc_406D17  +
mov [esp+84h+var_84] 8 +
call sub_4A05F0  +
mov edx ds:dword_5141E8 +
mov ds:dword_5147EC eax +
mov [eax] edx +
mov dword ptr [eax+4] 0 +
jmp loc_406147  +
mov [esp+84h+var_84] offset aPFRAndPieMayNo +
call sub_418450  +
jmp loc_40765E  +
mov [esp+84h+var_84] offset aPFInvalidArgum +
call sub_418450  +
mov edx ds:dword_5141E8 +
jmp loc_40700E  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_84] eax +
call sub_4A06C0  +
mov ds:dword_5147E0 eax +
jmp loc_406147  +
mov [esp+84h+var_84] offset aPFRAndSharedMa +
call sub_418450  +
jmp loc_407587  +
mov eax ds:dword_5141E8 +
mov [esp+84h+var_80] offset aDiscard +
mov [esp+84h+var_84] eax +
call ds:_stricmp  +
test eax eax +
jnz loc_407ED6  +
mov ds:dword_51473C 1 +
jmp loc_406147  +
mov [esp+84h+var_80] eax +
mov [esp+84h+var_84] offset aPFBadUnresolve +
call sub_418450  +
jmp loc_406147  +
mov [esp+84h+var_84] offset aPFInvalidArg_0 +
call sub_418450  +
jmp loc_406147  +
***
mov eax [esp+arg_8] +
mov edx [eax] +
xor ecx ecx +
cmp ds:dword_5146F8 eax +
setz cl  +
test edx edx +
jz locret_407F62  +
push esi  +
push ebx  +
xor ebx ebx +
cmp dword ptr [edx+4] 0Fh +
ja loc_407F60  +
mov esi [edx+4] +
jmp ds:off_4D0B20[esi*4]  +
test ebx ebx +
jnz loc_407F90  +
mov esi [edx+8] +
cmp dword ptr [esi+0Ch] 8 +
jz loc_407F90  +
mov esi [esi+10h] +
cmp byte ptr [esi] 2Eh +
jnz loc_407F90  +
cmp byte ptr [esi+1] 0 +
jnz loc_407F90  +
test ecx ecx +
jnz loc_407F90  +
mov ebx eax +
mov eax edx +
mov edx [edx] +
test edx edx +
jnz loc_407F25  +
nop   +
pop ebx  +
pop esi  +
retn   +
test ebx ebx +
jz loc_407F60  +
mov edx [edx+1Ch] +
test edx edx +
jz loc_407FA0  +
mov ecx [edx+0A0h] +
test ecx ecx +
jz loc_407FA0  +
test byte ptr [edx+14h] 1 +
cmovnz eax ebx +
pop ebx  +
pop esi  +
jmp locret_407F62  +
mov eax edx +
mov edx [edx] +
xor ebx ebx +
test edx edx +
jnz loc_407F25  +
jmp loc_407F60  +
mov eax edx +
mov edx [edx] +
xor ecx ecx +
test edx edx +
jnz loc_407F25  +
jmp loc_407F60  +
mov eax ebx +
pop ebx  +
pop esi  +
jmp locret_407F62  +
***
xor ebx ebx +
mov ecx [eax] +
mov eax [esp+arg_4] +
mov edx [eax] +
mov eax [edx+18h] +
cmp [ecx+18h] eax +
mov eax 0FFFFFFFFh +
setnbe bl  +
cmovnb eax ebx +
pop ebx  +
retn   +
***
mov ecx [eax] +
mov eax [esp+arg_4] +
mov edx [eax] +
mov eax [edx+20h] +
cmp [ecx+20h] eax +
jb loc_408011  +
mov eax 1 +
ja loc_40800F  +
mov eax [edx+4] +
xor ebx ebx +
cmp [ecx+4] eax +
mov eax 0FFFFFFFFh +
setnbe bl  +
cmovnb eax ebx +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
push ebx  +
mov ebx edx +
sub esp 14h +
mov eax [eax] +
cmp [edx] eax +
jz loc_408073  +
mov [esp+18h+var_14] 1A26h +
mov [esp+18h+var_18] offset a____Binutils_0 +
call sub_4184A0  +
mov eax [ebx+4] +
mov edx [eax] +
mov [ebx] edx +
mov edx [esi+4] +
mov [ebx+4] edx +
mov [esi+4] eax +
mov dword ptr [eax] 0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 10h +
mov eax [esp+10h+arg_0] +
mov ebx [esp+10h+arg_4] +
test eax eax +
jz loc_408170  +
mov edx [esp+10h+arg_8] +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] eax +
mov [esp+10h+var_8] edx +
call sub_44E4A0  +
test eax eax +
mov edx eax +
jz loc_408188  +
lea ebx [eax+0Ch] +
mov esi 58h +
test bl 1 +
mov edi ebx +
jnz loc_408191  +
test edi 2 +
jnz loc_4081A1  +
mov ecx esi +
xor eax eax +
shr ecx 2 +
test esi 2 +
stos   +
jnz loc_408160  +
and esi 1 +
jnz loc_408157  +
lea eax [edx+14h] +
mov [edx+18h] eax +
mov eax off_4BE018 +
mov dword ptr [edx+10h] 0 +
mov dword ptr [edx+4Ch] 0FFFFFFFFh +
mov dword ptr [edx+50h] 0FFFFFFFFh +
mov dword ptr [edx+48h] 1 +
mov ecx [eax+4] +
mov dword ptr [edx+14h] 0 +
mov [ecx] ebx +
mov ecx ds:dword_5146F8 +
mov [eax+4] ebx +
mov eax ds:dword_5146FC +
test ecx ecx +
jz loc_408144  +
lea ecx [eax-10h] +
mov [edx+20h] ecx +
mov [eax] ebx +
lea eax [edx+1Ch] +
mov ds:dword_5146FC eax +
add esp 10h +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov byte ptr [edi] 0 +
jmp loc_4080F9  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and esi 1 +
jz loc_4080F9  +
jmp loc_408157  +
mov [esp+10h+var_C] 64h +
mov [esp+10h+var_10] ebx +
call sub_44E3F0  +
test eax eax +
jnz loc_4080A6  +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov byte ptr [eax+0Ch] 0 +
lea edi [eax+0Dh] +
mov si 57h +
jmp loc_4080D7  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
sub esi 2 +
jmp loc_4080E3  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov eax [eax] +
mov [esp+1Ch+var_1C] eax +
call strcmp  +
test eax eax +
setz al  +
add esp 1Ch +
movzx eax al +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov eax [eax+4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov eax [eax+4] +
mov [esp+1Ch+var_1C] eax +
call strcmp  +
test eax eax +
setz al  +
add esp 1Ch +
movzx eax al +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov eax ds:dword_5147F8 +
test eax eax +
jz loc_408295  +
cmp eax 2 +
ja loc_4082A0  +
test ebx ebx +
mov ebp 6 +
jnz loc_40825C  +
jmp loc_408295  +
cmp eax 0Dh +
jz loc_408287  +
cmp eax 0Fh +
jnz loc_408256  +
mov eax ds:dword_514710 +
call sub_408220  +
mov ebx [ebx] +
test ebx ebx +
jz loc_408295  +
mov eax [ebx+4] +
cmp eax 4 +
jz loc_4082C0  +
ja loc_408242  +
test eax eax +
jnz loc_408256  +
mov eax [ebx+18h] +
mov edi offset a_init_0 +
mov ecx ebp +
mov esi eax +
cmps   +
jz loc_408256  +
mov edi offset a_fini_0 +
mov esi eax +
mov ecx ebp +
cmps   +
jz loc_408256  +
mov eax [ebx+8] +
call sub_408220  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40825C  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_18] 0DC4h +
mov [esp+1Ch+var_1C] offset a____Binutils_0 +
call sub_4184A0  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+10h] +
mov ecx ds:dword_5147F8 +
test eax eax +
jnz loc_4082EA  +
jmp loc_408256  +
jb loc_408300  +
cmp edx 2 +
jnz loc_4082E0  +
cmp ecx 1 +
jz loc_408305  +
lea esi [esi+0] +
mov eax [eax] +
test eax eax +
jz loc_408256  +
mov edx [eax+0Ch] +
cmp edx 1 +
jnz loc_4082D0  +
cmp ecx 2 +
jnz loc_4082E0  +
mov dword ptr [eax+0Ch] 3 +
jmp loc_4082E0  +
mov [eax+0Ch] ecx +
jmp loc_4082E0  +
mov dword ptr [eax+0Ch] 4 +
jmp loc_4082E0  +
***
sub esp 18h +
test al 1 +
jnz loc_408370  +
test bl 10h +
jnz loc_408360  +
test bl 8 +
jnz loc_408350  +
test bl 20h +
jnz loc_408340  +
and ebx 2 +
jz loc_40833A  +
mov [esp+18h+var_18] offset asc_4D0B8F +
call sub_4184D0  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] offset aW_18 +
call sub_4184D0  +
jmp loc_408329  +
mov [esp+18h+var_18] offset aR_2 +
call sub_4184D0  +
jmp loc_408324  +
mov [esp+18h+var_18] offset asc_4D0B89 +
call sub_4184D0  +
jmp loc_40831F  +
mov [esp+18h+var_18] offset aA +
call sub_4184D0  +
jmp loc_40831A  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
test eax eax +
mov [esp+38h+var_20] ecx +
jz loc_408460  +
cmp dword ptr [ebx+4] 0Fh +
ja loc_408656  +
mov eax [ebx+4] +
jmp ds:off_4D0BD4[eax*4]  +
mov eax [esp+38h+arg_4] +
mov eax [eax] +
mov [esp+38h+var_1C] eax +
movzx edx byte ptr [esp+38h+var_1C] +
movzx eax byte ptr [ebx+54h] +
and edx 1 +
shl edx 5 +
and eax 0FFFFFFDFh +
or eax edx +
mov edx [ebx+1Ch] +
mov [ebx+54h] al +
test edx edx +
jz loc_408455  +
test al 8 +
jnz loc_408455  +
test byte ptr [edx+14h] 1 +
jz loc_4083F2  +
mov ds:dword_50F2AC ebx +
mov ds:dword_50F2A4 0 +
mov edx [edx+1Ch] +
mov edi [esp+38h+arg_4] +
mov ecx [ebx+28h] +
mov eax [ebx+8] +
mov [esp+38h+arg_0] edx +
mov [esp+38h+var_38] edx +
mov edx ebx +
mov [esp+38h+var_34] edi +
call sub_408380  +
mov edx [ebx+1Ch] +
mov eax [edx+14h] +
and eax 500h +
cmp eax 400h +
jz loc_408711  +
mov eax [edx+24h] +
mov ecx ds:dword_50F2B8 +
shr eax cl +
add [esp+38h+arg_0] eax +
mov eax [ebx+34h] +
test eax eax +
jz loc_408455  +
lea edi [esp+38h+arg_0] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset off_4BFB90 +
mov [esp+38h+var_38] eax +
call sub_416940  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
nop   +
mov eax [esp+38h+arg_0] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
test byte ptr [eax+15h] 80h +
jnz loc_408455  +
mov eax [eax+24h] +
mov ecx ds:dword_50F2B8 +
shr eax cl +
add [esp+38h+arg_0] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov eax [ebx+18h] +
mov edx [esp+38h+arg_0] +
mov edi [esp+38h+arg_4] +
mov ecx [esp+38h+var_20] +
mov [esp+38h+var_38] edx +
mov edx ebp +
mov [esp+38h+var_34] edi +
call sub_408380  +
mov [esp+38h+arg_0] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov eax [ebx+8] +
jmp loc_408497  +
mov eax [esp+38h+arg_4] +
mov edx ebp +
mov ecx [esp+38h+var_20] +
mov [esp+38h+var_34] eax +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
mov eax ds:dword_514710 +
call sub_408380  +
mov [esp+38h+arg_0] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov eax [ebx+8] +
mov ds:dword_50F2A8 ebx +
cmp dword ptr [eax+0Ch] 8 +
jz loc_408543  +
mov esi [eax+10h] +
cmp ebp ds:dword_5146D8 +
movzx edx byte ptr [esi] +
jz loc_408728  +
cmp dl 5Fh +
jnz loc_408528  +
nop   +
add esi 1 +
cmp byte ptr [esi] 5Fh +
jz loc_408520  +
mov edi offset aEnd +
mov ecx 4 +
cmps   +
jnz loc_408543  +
mov eax [esp+38h+arg_4] +
mov dword ptr [eax] 1 +
mov eax [ebx+8] +
mov edx [ebp+1Ch] +
lea edi [esp+38h+arg_0] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_38] eax +
mov [esp+38h+var_34] edx +
call sub_416940  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov eax [ebx+0Ch] +
mov ecx ds:dword_50F2B8 +
shr eax cl +
add [esp+38h+arg_0] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov eax [ebx+18h] +
lea edi [esp+38h+arg_0] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset off_4BFB90 +
mov [esp+38h+var_38] eax +
call sub_416940  +
mov eax ds:dword_5148DC +
test eax eax +
jz loc_408700  +
mov eax ds:dword_5148D0 +
mov [ebx+1Ch] eax +
mov eax [ebx+0Ch] +
mov [esp+38h+var_38] eax +
call sub_44E820  +
mov ecx ds:dword_50F2B8 +
shr eax cl +
add [esp+38h+arg_0] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov eax [ebx+0Ch] +
lea edi [esp+38h+arg_0] +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] offset off_4BFB90 +
mov [esp+38h+var_38] eax +
call sub_416940  +
mov edx ds:dword_5148DC +
test edx edx +
jz loc_4086C7  +
mov edx ds:dword_5148D0 +
mov [ebx+10h] edx +
mov eax ds:dword_5148D8 +
test eax eax +
jz loc_408627  +
add edx [eax+1Ch] +
mov [ebx+10h] edx +
mov eax [ebx+8] +
sub eax 11Ah +
cmp eax 4 +
ja loc_4086E4  +
jmp ds:off_4D0C14[eax*4]  +
mov eax [ebx+8] +
mov ebx [ebx] +
mov [esp+38h+var_20] eax +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov [esp+38h+var_34] 1635h +
mov [esp+38h+var_38] offset a____Binutils_0 +
call sub_4184A0  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov edx 4 +
mov ecx ds:dword_50F2B8 +
mov eax 1 +
shl eax cl +
cmp edx eax +
cmovnb eax edx +
shr eax cl +
add [esp+38h+arg_0] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408397  +
jmp loc_408460  +
mov edx 8 +
jmp loc_408685  +
mov edx 2 +
jmp loc_408685  +
mov edx 1 +
jmp loc_408685  +
mov [esp+38h+var_38] offset aFPInvalidDataS +
call sub_418450  +
mov eax [ebx+8] +
sub eax 11Ah +
cmp eax 4 +
jbe loc_408638  +
mov [esp+38h+var_30] offset aLang_do_assign +
mov [esp+38h+var_34] 15E3h +
mov [esp+38h+var_38] offset a____Binutils_0 +
call sub_44BA70  +
mov [esp+38h+var_38] offset aFPInvalidReloc +
call sub_418450  +
jmp loc_4085C0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jnz loc_408436  +
jmp loc_408427  +
cmp dl 2Eh +
jnz loc_408519  +
cmp byte ptr [esi+1] 0 +
jnz loc_408528  +
mov ds:dword_50F2A4 1 +
jmp loc_408528  +
***
sub esp 2Ch +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_51483C +
mov [esp+2Ch+var_1C] 1 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_2C] eax +
call sub_4500A0  +
test eax eax +
jz loc_4087A6  +
cmp byte ptr [eax+0Ch] 0 +
jnz loc_4087A2  +
mov byte ptr [eax+0Ch] 1 +
mov dword ptr [eax+14h] 0 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_51483C +
mov [esp+2Ch+var_2C] eax +
call sub_4508A0  +
add esp 2Ch +
retn   +
mov [esp+2Ch+var_2C] offset aPFBfd_link_has +
mov [esp+2Ch+var_10] eax +
call sub_418450  +
mov eax [esp+2Ch+var_10] +
jmp loc_408780  +
***
push ebx  +
sub esp 14h +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call strstr  +
test eax eax +
mov ebx eax +
jz loc_408803  +
mov [esp+18h+var_18] esi +
call strlen  +
add eax ebx +
movzx edx byte ptr [eax] +
test dl dl +
jz loc_408800  +
lea esi [esi+0] +
add ebx 1 +
add eax 1 +
mov [ebx-1] dl +
movzx edx byte ptr [eax] +
test dl dl +
jnz loc_4087F0  +
mov byte ptr [ebx] 0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov ebx edx +
sub esp 1Ch +
mov [esp+28h+var_28] eax +
call strlen  +
add eax 1 +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov [esp+28h+var_28] ebx +
mov edi eax +
call strlen  +
add eax 1 +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
movzx ecx byte ptr [ebp+0] +
lea edx [ebp+1] +
test cl cl +
mov esi eax +
mov eax edi +
jz loc_40886A  +
movzx ecx ds:byte_509B60[ecx] +
add eax 1 +
add edx 1 +
mov [eax-1] cl +
movzx ecx byte ptr [edx-1] +
test cl cl +
jnz loc_408852  +
mov byte ptr [eax] 0 +
movzx edx byte ptr [ebx] +
lea ecx [ebx+1] +
mov eax esi +
test dl dl +
jz loc_408898  +
lea esi [esi+0] +
movzx edx ds:byte_509B60[edx] +
add eax 1 +
add ecx 1 +
mov [eax-1] dl +
movzx edx byte ptr [ecx-1] +
test dl dl +
jnz loc_408880  +
mov byte ptr [eax] 0 +
mov edx offset aBig +
mov eax edi +
call sub_4087C0  +
mov edx offset aLittle +
mov eax edi +
call sub_4087C0  +
mov edx offset aBig +
mov eax esi +
call sub_4087C0  +
mov eax esi +
mov edx offset aLittle +
call sub_4087C0  +
movzx eax byte ptr [edi] +
cmp al [esi] +
jnz loc_408917  +
xor ebx ebx +
test al al +
jnz loc_4088E4  +
jmp loc_408917  +
test al al +
jz loc_408910  +
add ebx 1 +
movzx eax byte ptr [edi+ebx] +
cmp al [esi+ebx] +
jz loc_4088E0  +
mov [esp+28h+var_28] edi +
call free  +
mov [esp+28h+var_28] esi +
call free  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebx [ebx+ebx*4] +
add ebx ebx +
jmp loc_4088F0  +
xor ebx ebx +
jmp loc_4088F0  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax] +
test esi esi +
jz loc_40896C  +
xor ecx ecx +
mov ebx [eax+0Ch] +
mov eax esi +
mov [esp+38h+var_28] ecx +
lea esi [esi+0] +
movzx edx byte ptr [eax+8] +
mov eax [eax] +
mov edi edx +
and edi 1 +
mov ecx edi +
cmp cl 1 +
sbb [esp+38h+var_28] 0FFFFFFFFh +
shr dl 3 +
and edx 7 +
or ebx edx +
test eax eax +
jnz loc_408940  +
mov ecx [esp+38h+var_28] +
mov [ebp+0Ch] ebx +
test ecx ecx +
jnz loc_408977  +
mov [ebp+8] esi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ecx ecx +
mov [esp+38h+var_2C] 0 +
mov [esp+38h+var_30] offset sub_4081F0 +
mov [esp+38h+var_34] offset loc_408A90 +
mov [esp+38h+var_38] ecx +
call sub_4A77D0  +
mov esi [ebp+0] +
mov [esp+38h+var_1C] ebp +
test esi esi +
mov [ebp+4] eax +
lea eax [ebp+8] +
mov [esp+38h+var_28] eax +
jz loc_408A44  +
mov [esp+38h+var_20] ebp +
jmp loc_4089C8  +
mov eax [esp+38h+var_28] +
mov [esp+38h+var_28] esi +
mov [eax] esi +
test ebp ebp +
jz loc_408A40  +
mov esi ebp +
test byte ptr [esi+8] 1 +
mov ebp [esi] +
jz loc_4089B8  +
mov eax [esp+38h+var_20] +
mov eax [eax+4] +
mov [esp+38h+var_30] 1 +
mov [esp+38h+var_34] esi +
mov [esp+38h+var_38] eax +
call sub_4A7D20  +
mov edi [eax] +
test edi edi +
jz loc_408A70  +
movzx eax byte ptr [esi+8] +
mov [esp+38h+var_24] ebp +
mov ebp esi +
mov esi eax +
jmp loc_408A1E  +
mov ebx [edi] +
test ebx ebx +
jz loc_408A60  +
mov eax [ebp+4] +
mov [esp+38h+var_34] eax +
mov eax [ebx+4] +
mov [esp+38h+var_38] eax +
call strcmp  +
test eax eax +
jnz loc_408A60  +
mov edi ebx +
mov eax esi +
xor al [edi+8] +
test al 38h +
jnz loc_408A00  +
mov esi ebp +
mov ebp [esp+38h+var_24] +
mov [esp+38h+var_38] esi +
call free  +
test ebp ebp +
jnz loc_4089C6  +
lea esi [esi+0] +
mov ebp [esp+38h+var_20] +
mov eax [esp+38h+var_28] +
mov ecx [esp+38h+var_1C] +
mov dword ptr [eax] 0 +
mov eax [ebp+8] +
mov [ecx] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi ebp +
mov ebp [esp+38h+var_24] +
mov [esi] ebx +
mov [edi] esi +
jmp loc_4089C2  +
mov [eax] esi +
mov eax [esp+38h+var_1C] +
mov [esp+38h+var_1C] esi +
mov [eax] esi +
jmp loc_4089C2  +
***
push ebx  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx dword_4C01B4 +
mov [esp+2Ch+var_2C] 0FFFFFFFFh +
call sub_4A2150  +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_2C] eax +
call sub_44C5F0  +
mov [esp+2Ch+var_2C] ebx +
test eax eax +
mov edi eax +
cmovz edi [esp+2Ch+arg_8] +
call sub_4A2150  +
mov eax [esp+2Ch+arg_0] +
mov ebp [esp+2Ch+arg_8] +
mov eax [eax+0Ch] +
test al 2 +
jnz loc_408C60  +
test al 4 +
jnz loc_408C93  +
mov esi [esp+2Ch+arg_8] +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+4] +
test eax eax +
jz loc_408BAE  +
mov edx [esp+2Ch+arg_4] +
test edx edx +
jz loc_408CC0  +
mov ecx [esp+2Ch+arg_4] +
movzx edx byte ptr [ecx+8] +
test dl 1 +
jz loc_408C50  +
shr dl 3 +
and edx 7 +
cmp edx 1 +
jz loc_408DCB  +
cmp edx 2 +
jz loc_408D20  +
test edx edx +
jz loc_408CC0  +
mov eax [esp+2Ch+arg_4] +
test eax eax +
jz loc_408BC4  +
mov eax [esp+2Ch+arg_4] +
test byte ptr [eax+8] 1 +
jz loc_408C50  +
mov eax [esp+2Ch+arg_0] +
mov ebx [eax+8] +
test ebx ebx +
jz loc_408C0E  +
nop   +
mov edx [ebx+4] +
test edx edx +
jz loc_408C08  +
cmp byte ptr [edx] 2Ah +
jz loc_408C44  +
movzx eax byte ptr [ebx+8] +
mov ecx esi +
and eax 38h +
cmp al 20h +
jz loc_408BF0  +
cmp al 10h +
mov ecx ebp +
cmovnz ecx edi +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] edx +
call sub_4A81C0  +
test eax eax +
jz loc_408C10  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_408BD0  +
xor ebx ebx +
cmp edi [esp+2Ch+arg_8] +
jz loc_408C1E  +
mov [esp+2Ch+var_2C] edi +
call free  +
cmp ebp [esp+2Ch+arg_8] +
jz loc_408C2C  +
mov [esp+2Ch+var_2C] ebp +
call free  +
cmp esi [esp+2Ch+arg_8] +
jz loc_408C3A  +
mov [esp+2Ch+var_2C] esi +
call free  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [edx+1] 0 +
jnz loc_408BDC  +
jmp loc_408C10  +
mov eax [esp+2Ch+arg_4] +
mov ebx [eax] +
jmp loc_408BCB  +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_24] 3 +
mov [esp+2Ch+var_2C] eax +
call sub_44C5F0  +
mov ebp eax +
mov eax [esp+2Ch+arg_0] +
test ebp ebp +
mov eax [eax+0Ch] +
jnz loc_408B5A  +
mov ebp [esp+2Ch+arg_8] +
jmp loc_408B5A  +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] 4 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_2C] eax +
call sub_44C5F0  +
test eax eax +
mov esi eax +
jnz loc_408B66  +
jmp loc_408B62  +
mov ecx [esp+2Ch+arg_0] +
mov edx [ecx+0Ch] +
test dl 1 +
jnz loc_408D87  +
test dl 2 +
jz loc_408D27  +
mov eax [esp+2Ch+arg_0] +
lea edx [esp+2Ch+var_18] +
mov [esp+2Ch+var_14] ebp +
mov eax [eax+4] +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
call sub_4A7B20  +
test eax eax +
mov ebx eax +
jnz loc_408D0D  +
jmp loc_408D20  +
movzx eax byte ptr [ebx+8] +
and eax 38h +
cmp al 10h +
jz loc_408C10  +
mov ebx [ebx] +
test ebx ebx +
jz loc_408D20  +
mov [esp+2Ch+var_28] ebp +
mov eax [ebx+4] +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jz loc_408CF8  +
mov eax [esp+2Ch+arg_0] +
mov edx [eax+0Ch] +
and edx 4 +
jz loc_408BAE  +
mov eax [esp+2Ch+arg_0] +
lea edx [esp+2Ch+var_18] +
mov [esp+2Ch+var_14] esi +
mov eax [eax+4] +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
call sub_4A7B20  +
test eax eax +
mov ebx eax +
jnz loc_408D6F  +
jmp loc_408BAE  +
movzx eax byte ptr [ebx+8] +
and eax 38h +
cmp al 20h +
jz loc_408C10  +
mov ebx [ebx] +
test ebx ebx +
jz loc_408BAE  +
mov [esp+2Ch+var_28] esi +
mov eax [ebx+4] +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jz loc_408D56  +
jmp loc_408BAE  +
lea edx [esp+2Ch+var_18] +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_14] edi +
call sub_4A7B20  +
test eax eax +
mov ebx eax +
jnz loc_408DB8  +
jmp loc_408DCB  +
movzx eax byte ptr [ebx+8] +
and eax 38h +
cmp al 8 +
jz loc_408C10  +
mov ebx [ebx] +
test ebx ebx +
jz loc_408DCB  +
mov [esp+2Ch+var_28] edi +
mov eax [ebx+4] +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jz loc_408DA3  +
mov eax [esp+2Ch+arg_0] +
mov edx [eax+0Ch] +
jmp loc_408CD0  +
***
mov ecx eax +
movzx eax byte ptr [edx] +
cmp [ecx] al +
jz loc_408DF0  +
xor eax eax +
retn   +
push edi  +
xor eax eax +
push esi  +
push ebx  +
movzx ebx byte ptr [edx+1] +
cmp [ecx+1] bl +
jz loc_408E02  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx ebx byte ptr [edx+2] +
cmp [ecx+2] bl +
jnz loc_408DFE  +
movzx ebx byte ptr [edx+3] +
xor edi edi +
cmp [ecx+3] bl +
jnz loc_408DFE  +
jmp loc_408E26  +
movzx esi byte ptr [edx+edi+4] +
add edi 1 +
mov eax esi +
cmp al bl +
jnz loc_408E37  +
movzx ebx byte ptr [ecx+edi+4] +
cmp bl 2Ah +
jnz loc_408E18  +
mov eax 1 +
jmp loc_408DFE  +
xor eax eax +
jmp loc_408DFE  +
***
mov edx [eax+4] +
mov edx [edx+190h] +
mov dword ptr [esp+0Ch] offset word_514820 +
mov [esp+8] ecx +
mov [esp+4] eax +
jmp edx  +
***
mov eax [eax+4] +
mov eax [eax+16Ch] +
mov dword ptr [esp+8] offset word_514820 +
mov [esp+4] ecx +
jmp eax  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [edx+1Ch] +
mov esi [edx+10h] +
mov edi [edx+14h] +
cmp ebx esi +
jb loc_408F0C  +
mov ebp ebx +
sub ebp esi +
cmp ebp edi +
jbe loc_408F3E  +
add esi edi +
cmp ebx esi +
jz loc_408F80  +
test ecx ecx +
jz loc_408F46  +
mov eax [eax] +
mov ecx [edx] +
mov edx [eax] +
mov eax [eax+94h] +
mov [esp+2Ch+var_1C] ecx +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_2C] offset aXPAddress0xVOf +
call sub_418450  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [edx+2Ch] +
test ecx ecx +
jnz loc_408F3E  +
mov eax [eax] +
mov dword ptr [edx+2Ch] 1 +
mov ecx [edx] +
mov edx [eax] +
mov eax [eax+94h] +
mov [esp+2Ch+var_20] ecx +
mov [esp+2Ch+var_2C] offset aXPBSectionSWil +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+2Ch+arg_0] +
test esi esi +
jz loc_408F12  +
jmp loc_408F3E  +
***
push ebx  +
mov ebx 10h +
sub esp 14h +
lea esi [esi+0] +
call sub_418560  +
sub ebx 1 +
jnz loc_408FA0  +
mov eax [esi+14h] +
mov edx [eax+38h] +
mov eax [eax+3Ch] +
add edx [esi+18h] +
add edx [eax+1Ch] +
mov [esp+18h+var_18] offset a0xV +
mov [esp+18h+var_14] edx +
call sub_4184D0  +
mov eax [esi+4] +
mov [esp+18h+var_18] offset aT_0 +
mov [esp+18h+var_14] eax +
call sub_4184D0  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 0Ch +
sub esp 1Ch +
mov eax ds:dword_514918 +
mov [esp+1Ch+var_18] eax +
mov eax ds:dword_51491C +
mov [esp+1Ch+var_1C] eax +
call sub_453810  +
mov ds:dword_50F2B8 0 +
cmp eax 1 +
jbe loc_409064  +
test al 1 +
mov edx 1 +
jz loc_409055  +
jmp loc_409069  +
mov edx ecx +
shr eax 1 +
test al 1 +
lea ecx [edx+1] +
jz loc_409053  +
mov ds:dword_50F2B8 edx +
cmp eax 1 +
jz loc_40907D  +
mov [esp+1Ch+var_18] 0CA0h +
mov [esp+1Ch+var_1C] offset a____Binutils_0 +
call sub_4184A0  +
add esp 1Ch +
retn   +
***
jmp sub_409090  +
***
mov edi edx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
mov esi [eax+24h] +
call sub_409020  +
call sub_418560  +
mov eax [ebx] +
mov [esp+34h+var_34] offset aS_13 +
mov [esp+34h+var_30] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp+34h+var_34] eax +
call strlen  +
lea ebp [eax+1] +
cmp ebp 0Eh +
jg loc_409180  +
add ebp 1 +
call sub_418560  +
cmp ebp 0Fh +
jle loc_4090D0  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_4090F6  +
mov edx ds:dword_514850 +
cmp [eax+94h] edx +
jz loc_4091D2  +
mov ebp ds:dword_50F338 +
test edi edi +
mov eax 0 +
cmovz esi eax +
mov eax [ebx+94h] +
mov ecx ds:dword_50F2B8 +
mov [esp+34h+var_30] ebp +
mov [esp+34h+var_34] offset a0xVWB +
mov [esp+34h+var_28] eax +
mov eax esi +
shr eax cl +
mov [esp+34h+var_2C] eax +
call sub_4184D0  +
mov eax [ebx+28h] +
cmp eax esi +
jz loc_409139  +
test eax eax +
jnz loc_409156  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_40914E  +
mov edx ds:dword_514850 +
cmp [eax+94h] edx +
jz loc_409190  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi 1Bh +
nop   +
lea esi [esi+0] +
call sub_418560  +
sub edi 1 +
jnz loc_409160  +
mov eax [ebx+28h] +
mov [esp+34h+var_34] offset aWSizeBeforeRel +
mov [esp+34h+var_30] eax +
call sub_4184D0  +
jmp loc_409139  +
call sub_418580  +
xor ebp ebp +
jmp loc_4090D0  +
cmp ds:byte_514823 0 +
jns loc_4091DD  +
mov eax ds:dword_51483C +
mov [esp+34h+var_2C] ebx +
mov [esp+34h+var_30] offset sub_408FF0 +
mov [esp+34h+var_34] eax +
call sub_450810  +
mov ecx ds:dword_50F2B8 +
shr esi cl +
add ebp esi +
cmp ebp ds:dword_50F338 +
jbe loc_40914E  +
mov ds:dword_50F338 ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [ebx+38h] +
add ebp [eax+1Ch] +
jmp loc_409106  +
mov eax [ebx+68h] +
test eax eax +
mov edx eax +
mov [esp+34h+var_24] eax +
jz loc_4091B2  +
mov eax [eax+4] +
mov dword ptr [eax] 0 +
mov eax [edx+8] +
lea edi ds:0[eax*4] +
mov [esp+34h+var_1C] eax +
mov eax ds:dword_50F370 +
mov edx eax +
mov [esp+34h+var_20] eax +
mov eax ds:dword_50F36C +
sub edx eax +
cmp edi edx +
ja loc_409333  +
mov edx ds:dword_50F368 +
add eax edi +
cmp eax edx +
jz loc_409362  +
mov ecx ds:dword_50F378 +
add eax ecx +
not ecx  +
and eax ecx +
mov ecx ds:dword_50F364 +
mov edi eax +
mov ds:dword_50F36C eax +
sub edi ecx +
mov [esp+34h+var_18] edi +
mov edi [esp+34h+var_20] +
sub edi ecx +
cmp [esp+34h+var_18] edi +
ja loc_409314  +
mov ds:dword_50F368 eax +
mov eax [esp+34h+var_24] +
mov ecx edx +
mov eax [eax] +
test eax eax +
jz loc_40927F  +
nop   +
lea esi [esi+0] +
mov edi [eax] +
add ecx 4 +
mov [ecx-4] edi +
mov eax [eax+4] +
test eax eax +
jnz loc_409270  +
mov eax [esp+34h+var_1C] +
xor edi edi +
mov [esp+34h+var_34] edx +
mov [esp+34h+var_28] offset sub_407FB0 +
mov [esp+34h+var_2C] 4 +
mov [esp+34h+var_30] eax +
mov [esp+34h+var_20] edx +
call qsort  +
mov eax [esp+34h+var_24] +
mov edx [esp+34h+var_20] +
mov eax [eax+8] +
test eax eax +
jz loc_4092EF  +
mov [esp+34h+var_20] esi +
mov esi [esp+34h+var_24] +
jmp loc_4092C8  +
add edi 1 +
cmp edi [esi+8] +
jnb loc_4092EB  +
mov eax [edx+edi*4] +
movzx ecx byte ptr [eax+0Ch] +
sub ecx 3 +
cmp cl 1 +
ja loc_4092C0  +
cmp ebx [eax+14h] +
jnz loc_4092C0  +
mov [esp+34h+var_24] edx +
call sub_408F90  +
mov edx [esp+34h+var_24] +
jmp loc_4092C0  +
mov esi [esp+34h+var_20] +
cmp edx ds:dword_50F364 +
jbe loc_4092FF  +
cmp edx ds:dword_50F370 +
jb loc_409322  +
mov [esp+34h+var_30] edx +
mov [esp+34h+var_34] offset unk_50F360 +
call sub_4A88D0  +
jmp loc_4091B2  +
mov eax [esp+34h+var_20] +
mov ds:dword_50F36C eax +
jmp loc_40925A  +
mov ds:dword_50F368 edx +
mov ds:dword_50F36C edx +
jmp loc_4091B2  +
mov [esp+34h+var_30] edi +
mov [esp+34h+var_34] offset unk_50F360 +
call sub_4A87C0  +
mov edx ds:dword_50F370 +
mov eax ds:dword_50F36C +
mov [esp+34h+var_20] edx +
mov edx [esp+34h+var_24] +
mov edx [edx+8] +
mov [esp+34h+var_1C] edx +
jmp loc_40921B  +
or ds:byte_50F388 2 +
jmp loc_40922B  +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 2Ch +
mov eax [eax+4] +
cmp eax 0Fh +
ja loc_409A38  +
mov ebp edx +
jmp ds:off_4D0EC0[eax*4]  +
mov ecx [esi+0Ch] +
mov eax offset aBefore +
mov edx [esi+8] +
mov [esp+30h+var_30] offset aInsertSS +
test ecx ecx +
mov ecx offset aAfter +
cmovz eax ecx +
mov [esp+30h+var_28] edx +
mov [esp+30h+var_2C] eax +
call sub_4184D0  +
lea esi [esi+0] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx ds:dword_514710 +
test edx edx +
jz loc_4093C0  +
mov eax ds:dword_51470C +
test eax eax +
jnz loc_409A6A  +
mov [esp+30h+var_30] offset aConstructors +
call sub_4184D0  +
mov ebx ds:dword_514710 +
test ebx ebx +
jz loc_4093C0  +
mov eax ebx +
mov edx ebp +
call sub_409370  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4093F5  +
jmp loc_4093C0  +
cmp esi ds:dword_5146D8 +
mov edi [esi+1Ch] +
jz loc_4094B3  +
mov eax [esi+18h] +
mov [esp+30h+var_30] offset aS_19 +
mov [esp+30h+var_2C] eax +
call sub_4184D0  +
test edi edi +
jz loc_4094AE  +
mov eax [edi+1Ch] +
mov ds:dword_50F338 eax +
mov eax [esi+18h] +
mov [esp+30h+var_30] eax +
call strlen  +
cmp eax 0Eh +
mov ebx eax +
jg loc_409B7B  +
nop   +
add ebx 1 +
call sub_418560  +
cmp ebx 0Fh +
jle loc_409450  +
mov eax [edi+1Ch] +
mov edx [edi+24h] +
mov [esp+30h+var_30] offset a0xVW +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_28] edx +
call sub_4184D0  +
mov eax [edi+20h] +
cmp [edi+1Ch] eax +
jz loc_40948F  +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] offset aLoadAddress0xV +
call sub_4184D0  +
mov eax [esi+34h] +
test eax eax +
jz loc_4094AE  +
mov [esp+30h+var_28] offset dword_50F338 +
mov [esp+30h+var_2C] offset off_4BFB90 +
mov [esp+30h+var_30] eax +
call sub_416940  +
call sub_418580  +
mov ebx [esi+8] +
test ebx ebx +
jz loc_4093C0  +
nop   +
mov eax ebx +
mov edx esi +
call sub_409370  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4094C0  +
jmp loc_4093C0  +
mov ebx 10h +
lea esi [esi+0] +
call sub_418560  +
sub ebx 1 +
jnz loc_4094E0  +
mov eax [esi+8] +
mov edx [eax+0Ch] +
cmp edx 8 +
jz loc_409A9D  +
mov ecx [eax+10h] +
cmp byte ptr [ecx] 2Eh +
jz loc_409B67  +
mov ds:dword_5148CC ecx +
xor ebx ebx +
mov edi [eax+14h] +
mov eax [ebp+1Ch] +
mov ecx offset off_4BFB90 +
test eax eax +
cmovz eax ecx +
cmp edx 5 +
jz loc_409B43  +
mov [esp+30h+var_28] offset dword_50F338 +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] edi +
call sub_416940  +
mov ebp ds:dword_5148DC +
test ebp ebp +
jz loc_409B4D  +
mov eax [esi+8] +
cmp dword ptr [eax+0Ch] 8 +
jz loc_409563  +
test ebx ebx +
jnz loc_409563  +
mov edi ds:dword_5148CC +
test edi edi +
jz loc_409BA9  +
mov eax ds:dword_5148D8 +
mov edi ds:dword_5148D0 +
test eax eax +
jz loc_409575  +
add edi [eax+1Ch] +
mov [esp+30h+var_2C] edi +
mov [esp+30h+var_30] offset a0xV_0 +
call sub_4184D0  +
test ebx ebx +
jz loc_40958F  +
mov ds:dword_50F338 edi +
mov [esp+30h+var_30] offset asc_4D0E64 +
mov ds:dword_5148CC 0 +
call sub_4184D0  +
mov eax [esi+8] +
jmp loc_409606  +
mov edx [esi+8] +
test edx edx +
jz loc_4093C0  +
mov eax [esi+10h] +
test eax eax +
jz loc_4095CC  +
test byte ptr [eax+2Ah] 2 +
jnz loc_4093C0  +
mov eax ds:dword_514770 +
mov [esp+30h+var_28] edx +
mov [esp+30h+var_2C] offset aLoadS +
mov [esp+30h+var_30] eax +
call fprintf  +
jmp loc_4093C0  +
mov eax [esi+8] +
mov [esp+30h+var_30] offset aAddressOfSecti +
mov [esp+30h+var_2C] eax +
call sub_4184D0  +
mov eax [esi+0Ch] +
mov [esp+30h+var_30] eax +
call sub_416DE0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_418580  +
call sub_418560  +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_409A8C  +
mov eax [esi+8] +
test eax eax +
jz loc_409B87  +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] offset aS_13 +
call sub_4184D0  +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_409A7B  +
mov [esp+30h+var_30] offset asc_4D0D7B +
call sub_4184D0  +
mov edi [esi+10h] +
test edi edi +
jz loc_409707  +
lea esi [esi+0] +
mov eax [edi+0Ch] +
test eax eax +
jnz loc_409A05  +
mov eax [edi+8] +
test eax eax +
jz loc_4096C5  +
mov eax [eax] +
mov [esp+30h+var_30] offset aExclude_fileS +
mov [esp+30h+var_2C] eax +
call sub_4184D0  +
mov eax [edi+8] +
mov ebx [eax+4] +
test ebx ebx +
jz loc_4096B9  +
nop   +
mov eax [ebx] +
mov [esp+30h+var_30] offset aS_14 +
mov [esp+30h+var_2C] eax +
call sub_4184D0  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4096A0  +
mov [esp+30h+var_30] offset asc_4D0D8D +
call sub_4184D0  +
mov eax [edi+4] +
test eax eax +
jz loc_409A27  +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] offset aS_13 +
call sub_4184D0  +
mov eax [edi+0Ch] +
test eax eax +
jnz loc_409A16  +
mov eax [edi] +
test eax eax +
jz loc_409707  +
mov [esp+30h+var_30] offset asc_4D0D94 +
call sub_4184D0  +
mov edi [edi] +
test edi edi +
jnz loc_409670  +
mov [esp+30h+var_30] offset asc_4D0D79 +
call sub_4184D0  +
call sub_418580  +
mov ebx [esi+18h] +
test ebx ebx +
jz loc_4093C0  +
mov eax ebx +
mov edx ebp +
call sub_409370  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_409723  +
jmp loc_4093C0  +
mov eax [esi+8] +
add esp 2Ch +
xor edx edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_409090  +
mov [esp+30h+var_30] offset aCreate_object_ +
call sub_4184D0  +
jmp loc_4093C0  +
mov eax ds:dword_514770 +
mov [esp+30h+var_28] 0Dh +
mov [esp+30h+var_2C] 1 +
mov [esp+30h+var_30] offset aFillMask0x +
mov [esp+30h+var_24] eax +
call fwrite  +
mov eax [esi+8] +
mov ebx [eax] +
lea esi [eax+4] +
test ebx ebx +
jz loc_4097B5  +
movzx eax byte ptr [esi] +
add esi 1 +
mov [esp+30h+var_2C] offset a02x +
mov [esp+30h+var_28] eax +
mov eax ds:dword_514770 +
mov [esp+30h+var_30] eax +
call fprintf  +
sub ebx 1 +
jnz loc_409791  +
mov eax ds:dword_514770 +
mov [esp+30h+var_30] 0Ah +
mov [esp+30h+var_2C] eax +
call fputc  +
jmp loc_4093C0  +
call sub_409020  +
mov ebx 10h +
lea esi [esi+0] +
call sub_418560  +
sub ebx 1 +
jnz loc_4097E0  +
mov eax [esi+14h] +
mov ebx [esi+18h] +
test eax eax +
jz loc_4097F7  +
add ebx [eax+1Ch] +
mov eax [esi+8] +
sub eax 11Ah +
cmp eax 4 +
ja loc_409AF4  +
jmp ds:off_4D0F00[eax*4]  +
mov eax [esi+8] +
mov [esp+30h+var_2C] offset aTargetS +
mov [esp+30h+var_28] eax +
mov eax ds:dword_514770 +
mov [esp+30h+var_30] eax +
call fprintf  +
jmp loc_4093C0  +
mov eax [esi+8] +
mov [esp+30h+var_30] offset aOutputS +
mov [esp+30h+var_2C] eax +
call sub_4184D0  +
mov eax ds:dword_5146DC +
test eax eax +
jz loc_40985D  +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] offset aS_14 +
call sub_4184D0  +
mov [esp+30h+var_30] offset asc_4D0E8B +
call sub_4184D0  +
jmp loc_4093C0  +
call sub_409020  +
mov ebx 9 +
mov [esp+30h+var_30] offset aFill +
call sub_4184D0  +
call sub_418560  +
sub ebx 1 +
jnz loc_409886  +
mov eax [esi+10h] +
mov ebp [esi+8] +
test eax eax +
jz loc_40989D  +
add ebp [eax+1Ch] +
mov eax [esi+0Ch] +
mov [esp+30h+var_2C] ebp +
mov [esp+30h+var_30] offset a0xVW_0 +
mov [esp+30h+var_28] eax +
call sub_4184D0  +
mov edi [esi+14h] +
mov ebx [edi] +
add edi 4 +
test ebx ebx +
jz loc_4098E4  +
movzx eax byte ptr [edi] +
add edi 1 +
mov [esp+30h+var_2C] offset a02x +
mov [esp+30h+var_28] eax +
mov eax ds:dword_514770 +
mov [esp+30h+var_30] eax +
call fprintf  +
sub ebx 1 +
jnz loc_4098C0  +
call sub_418580  +
mov eax [esi+0Ch] +
mov ecx ds:dword_50F2B8 +
shr eax cl +
add eax ebp +
mov ds:dword_50F338 eax +
jmp loc_4093C0  +
mov eax ds:dword_514770 +
mov [esp+30h+var_28] 0Ch +
mov [esp+30h+var_2C] 1 +
mov [esp+30h+var_30] offset aStartGroup +
mov [esp+30h+var_24] eax +
call fwrite  +
mov ebx [esi+8] +
test ebx ebx +
jz loc_40993F  +
lea esi [esi+0] +
mov eax ebx +
mov edx ebp +
call sub_409370  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_409930  +
mov eax ds:dword_514770 +
mov [esp+30h+var_28] 0Ah +
mov [esp+30h+var_2C] 1 +
mov [esp+30h+var_30] offset aEndGroup +
mov [esp+30h+var_24] eax +
call fwrite  +
jmp loc_4093C0  +
call sub_409020  +
mov ebx 10h +
lea esi [esi+0] +
call sub_418560  +
sub ebx 1 +
jnz loc_409980  +
mov eax [esi+20h] +
mov ebx [esi+24h] +
test eax eax +
jz loc_409997  +
add ebx [eax+1Ch] +
mov eax [esi+0Ch] +
mov [esp+30h+var_30] eax +
call sub_44E820  +
mov edi eax +
mov eax [esi+0Ch] +
mov eax [eax+20h] +
mov [esp+30h+var_28] edi +
mov [esp+30h+var_2C] ebx +
mov [esp+30h+var_30] offset a0xVWRelocS +
mov [esp+30h+var_24] eax +
call sub_4184D0  +
mov eax [esi+14h] +
test eax eax +
jz loc_409AA7  +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] offset aS_15 +
call sub_4184D0  +
mov eax [esi+18h] +
mov [esp+30h+var_30] eax +
call sub_416DE0  +
call sub_418580  +
mov ecx ds:dword_50F2B8 +
shr edi cl +
add ebx edi +
mov ds:dword_50F338 ebx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+30h+var_30] offset aSort +
call sub_4184D0  +
jmp loc_40967B  +
mov [esp+30h+var_30] offset asc_4D0D79 +
call sub_4184D0  +
jmp loc_4096EB  +
mov [esp+30h+var_30] offset asc_4D0D77 +
call sub_4184D0  +
jmp loc_4096E0  +
mov [esp+30h+var_28] eax +
mov eax ds:dword_514770 +
mov [esp+30h+var_2C] offset aFailWithD +
mov [esp+30h+var_30] eax +
call fprintf  +
mov [esp+30h+var_2C] 1188h +
mov [esp+30h+var_30] offset a____Binutils_0 +
call sub_4184A0  +
jmp loc_4093C0  +
mov [esp+30h+var_30] offset aSortConstructo +
call sub_4184D0  +
jmp loc_4093EB  +
mov [esp+30h+var_30] offset asc_4D0D79 +
call sub_4184D0  +
jmp loc_409656  +
mov [esp+30h+var_30] offset aSort +
call sub_4184D0  +
jmp loc_409630  +
mov edi [eax+10h] +
xor ebx ebx +
jmp loc_409510  +
mov eax [esi+10h] +
mov eax [eax] +
jmp loc_4099CD  +
mov eax offset aShort_1 +
mov edi 2 +
mov edx [esi+10h] +
mov [esp+30h+var_24] eax +
mov [esp+30h+var_28] edi +
mov [esp+30h+var_2C] ebx +
mov [esp+30h+var_20] edx +
mov [esp+30h+var_30] offset a0xVWS0xV +
call sub_4184D0  +
mov eax [esi+0Ch] +
cmp dword ptr [eax+0Ch] 7 +
jz loc_4099E8  +
call sub_418560  +
mov eax [esi+0Ch] +
jmp loc_4099E0  +
mov [esp+30h+var_28] offset aPrint_data_sta +
mov [esp+30h+var_2C] 10C4h +
mov [esp+30h+var_30] offset a____Binutils_0 +
call sub_44BA70  +
mov eax offset aQuad +
mov edi 8 +
jmp loc_409ABB  +
mov eax offset aByte_0 +
mov edi 1 +
jmp loc_409ABB  +
mov eax offset aLong_1 +
mov edi 4 +
jmp loc_409ABB  +
mov eax offset aSquad +
mov edi 8 +
jmp loc_409ABB  +
mov ds:dword_5148DC 0 +
mov eax [esi+8] +
cmp dword ptr [eax+0Ch] 5 +
jz loc_409B98  +
mov [esp+30h+var_30] offset aUndef +
call sub_4184D0  +
jmp loc_40958F  +
cmp byte ptr [ecx+1] 0 +
jnz loc_409505  +
mov ebx 1 +
jmp loc_40950D  +
call sub_418580  +
xor ebx ebx +
jmp loc_409450  +
mov [esp+30h+var_30] offset asc_4D0D77 +
call sub_4184D0  +
jmp loc_40964B  +
mov [esp+30h+var_30] offset aProvide +
call sub_4184D0  +
jmp loc_40958F  +
mov eax [eax+10h] +
mov [esp+30h+var_20] 1 +
mov [esp+30h+var_24] 0 +
mov [esp+30h+var_28] 0 +
mov [esp+30h+var_2C] eax +
mov eax ds:dword_51483C +
mov [esp+30h+var_30] eax +
call sub_4500A0  +
test eax eax +
jz loc_409BFD  +
mov ecx [eax+14h] +
mov edx [ecx+3Ch] +
mov edx [edx+1Ch] +
add edx [eax+18h] +
add edx [ecx+38h] +
mov [esp+30h+var_30] offset a0xV_1 +
mov [esp+30h+var_2C] edx +
call sub_4184D0  +
jmp loc_40958F  +
mov [esp+30h+var_30] offset aUnresolved +
call sub_4184D0  +
jmp loc_40958F  +
***
cmp eax 2 +
jz loc_409CC0  +
mov eax [esp+14h] +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_409C40  +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
retn   +
***
mov eax [ebx] +
mov edi offset aElf32Big +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_409C3A  +
mov edi offset aElf64Big +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_409C3A  +
mov edi offset aElf32Little +
mov ecx 0Dh +
mov esi eax +
cmps   +
jz loc_409C3A  +
mov edi offset aElf64Little +
mov ecx 0Dh +
mov esi eax +
cmps   +
jz loc_409C3A  +
mov edx ds:dword_50F2BC +
test edx edx +
jz loc_409CAF  +
mov edi [esp+14h] +
mov edx [edi] +
call sub_408810  +
mov esi eax +
mov eax [esp+14h] +
mov edx [eax] +
mov eax ds:dword_50F2BC +
mov eax [eax] +
call sub_408810  +
cmp esi eax +
jle loc_409C3A  +
mov ds:dword_50F2BC ebx +
jmp loc_409C3A  +
***
cmp dword ptr [ebx+8] 1 +
jz loc_409C2E  +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov ebx [esp+5Ch+arg_0] +
cmp byte ptr [ebx+0Ch] 5 +
jz loc_409D10  +
add esp 5Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx ds:dword_51474C +
mov eax [ebx+14h] +
mov edi [ebx+18h] +
cmp edx 2 +
mov ecx [eax] +
jz loc_409E93  +
cmp edx 1 +
jnz loc_409D34  +
mov esi [esp+5Ch+arg_4] +
cmp ecx [esi] +
ja loc_409D01  +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov edx [eax+4] +
mov edx [edx+194h] +
mov [esp+5Ch+var_54] ebx +
mov [esp+5Ch+var_58] offset word_514820 +
mov [esp+5Ch+var_5C] eax +
call edx  +
test eax eax +
jz loc_409E46  +
mov edx ds:dword_514770 +
test edx edx +
jz loc_409D01  +
mov eax ds:dword_50F284 +
test eax eax +
jz loc_409E60  +
mov eax [ebx+4] +
mov [esp+5Ch+var_54] 3 +
mov [esp+5Ch+var_58] eax +
mov eax ds:dword_514850 +
mov [esp+5Ch+var_5C] eax +
call sub_44C5F0  +
test eax eax +
mov ebp eax +
jz loc_409EA5  +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] offset aS_13 +
call sub_4184D0  +
mov [esp+5Ch+var_5C] ebp +
call strlen  +
mov [esp+5Ch+var_5C] ebp +
mov ebx eax +
call free  +
cmp ebx 12h +
jg loc_409E87  +
add ebx 1 +
call sub_418560  +
cmp ebx 13h +
jle loc_409DC6  +
lea ebx [esp+5Ch+var_3E] +
mov [esp+5Ch+var_5C] offset a0x +
call sub_4184D0  +
mov [esp+5Ch+var_5C] ebx +
mov [esp+5Ch+var_54] edi +
mov [esp+5Ch+var_58] offset aLx +
call sprintf  +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_5C] offset aS_13 +
call sub_4184D0  +
mov [esp+5Ch+var_5C] ebx +
call strlen  +
cmp eax 0Fh +
mov ebx eax +
jg loc_409E23  +
add ebx 1 +
call sub_418560  +
cmp ebx 10h +
jnz loc_409E16  +
mov eax [esi+94h] +
mov [esp+5Ch+var_5C] offset aB_1 +
mov [esp+5Ch+var_58] eax +
call sub_4184D0  +
add esp 5Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+4] +
mov [esp+5Ch+var_5C] offset aPFCouldNotDefi +
mov [esp+5Ch+var_58] eax +
call sub_418450  +
jmp loc_409D5E  +
mov [esp+5Ch+var_5C] offset aAllocatingComm +
call sub_4184D0  +
mov [esp+5Ch+var_5C] offset aCommonSymbolSi +
call sub_4184D0  +
mov ds:dword_50F284 1 +
jmp loc_409D75  +
call sub_418580  +
xor ebx ebx +
jmp loc_409DC6  +
mov esi [esp+5Ch+arg_4] +
cmp ecx [esi] +
jnb loc_409D34  +
nop   +
jmp loc_409D01  +
mov eax [ebx+4] +
mov [esp+5Ch+var_5C] offset aS_13 +
mov [esp+5Ch+var_58] eax +
call sub_4184D0  +
mov eax [ebx+4] +
mov [esp+5Ch+var_5C] eax +
call strlen  +
mov ebx eax +
jmp loc_409DBD  +
***
push ebx  +
mov ebx eax +
sub esp 14h +
mov [esp+18h+var_14] offset a?_0 +
mov [esp+18h+var_18] eax +
call strpbrk  +
test eax eax +
jz loc_409F07  +
mov [esp+18h+var_14] esi +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_10] 0 +
call sub_4A81C0  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+18h+var_14] esi +
mov [esp+18h+var_18] ebx +
call strcmp  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov ebx edx +
sub esp 4 +
cmp byte ptr [edx+1] 0 +
jnz loc_409F81  +
mov edx [esp+8+arg_0] +
cmp ebx esi +
setz al  +
xor ecx ecx +
mov edx [edx] +
test edx edx +
jz loc_409F4B  +
mov ecx [edx+8Ch] +
test ecx ecx +
setnz cl  +
cmp cl al +
jz loc_409F8F  +
cmp ebx esi +
mov eax 1 +
jz loc_409F7B  +
mov eax [edx+8Ch] +
mov edx [eax] +
mov eax esi +
mov byte ptr [ebx] 0 +
call sub_409ED0  +
movzx edx ds:byte_514829 +
mov [ebx] dl +
test eax eax +
setz al  +
movzx eax al +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
lea eax [edx+1] +
mov edx ecx +
call sub_409ED0  +
test eax eax +
jz loc_409F2F  +
add esp 4 +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov edi edx +
push esi  +
push ebx  +
sub esp 2Ch +
mov [esp+34h+var_1C] eax +
mov eax [esp+34h+arg_0] +
lea ebp [edx+10h] +
mov [esp+34h+var_18] ecx +
mov ebx [eax+8] +
test ebx ebx +
jnz loc_409FDB  +
jmp loc_40A020  +
mov ecx [edi+8] +
mov edx eax +
mov eax esi +
mov [esp+34h+var_34] ebp +
call sub_409F20  +
test eax eax +
jnz loc_40A014  +
mov ebx [ebx+4] +
test ebx ebx +
jz loc_40A020  +
mov esi [ebx] +
mov eax esi +
call sub_408AA0  +
test eax eax +
jnz loc_409FC1  +
mov edx [edi+8] +
mov eax esi +
call sub_409ED0  +
test eax eax +
jz loc_40A014  +
mov eax [edi+10h] +
test eax eax +
jz loc_409FD4  +
mov eax [eax+8Ch] +
test eax eax +
jz loc_409FD4  +
mov edx [eax] +
mov eax [ebx] +
call sub_409ED0  +
test eax eax +
jnz loc_409FD4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+34h+var_1C] +
mov edx [esp+34h+arg_8] +
mov eax [ecx+38h] +
mov [esp+34h+var_24] edi +
mov [esp+34h+var_20] edx +
mov [esp+34h+var_34] ecx +
mov [esp+34h+var_28] eax +
mov eax [esp+34h+var_18] +
mov [esp+34h+var_2C] eax +
mov eax [esp+34h+arg_0] +
mov [esp+34h+var_30] eax +
call [esp+34h+arg_4]  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_4] +
mov ebp [esp+1Ch+arg_0] +
mov eax [edi+10h] +
mov esi [ebp+24h] +
mov ebx [eax+64h] +
test ebx ebx +
jnz loc_40A087  +
jmp loc_40A0BA  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_40A0BA  +
mov eax [esi+4] +
mov edx [ebx] +
call sub_408DE0  +
test eax eax +
jz loc_40A080  +
mov eax [esp+1Ch+arg_C] +
mov ecx ebx +
mov edx edi +
mov [esp+1Ch+var_1C] esi +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_18] eax +
mov eax ebp +
call sub_409FA0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_40A087  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_0] +
mov ebp [esp+2Ch+arg_8] +
mov eax [eax+10h] +
mov esi [eax+64h] +
test esi esi +
jz loc_40A141  +
lea esi [esi+0] +
mov ebx [edi+10h] +
test ebx ebx +
jnz loc_40A111  +
jmp loc_40A149  +
mov edx [esi] +
call sub_409ED0  +
test eax eax +
jz loc_40A118  +
mov ebx [ebx] +
test ebx ebx +
jz loc_40A13A  +
mov eax [ebx+4] +
test eax eax +
jnz loc_40A100  +
mov eax [esp+2Ch+arg_C] +
mov ecx esi +
mov edx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_24] eax +
mov eax edi +
call sub_409FA0  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40A111  +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_40A0F0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+2Ch+arg_C] +
mov eax [edi+38h] +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_18] ecx +
mov ecx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_20] eax +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_1C] ecx +
call ebp  +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_40A0F0  +
jmp loc_40A141  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_0] +
lea ebx [esp+4Ch+var_14] +
mov edi [esp+4Ch+arg_4] +
mov eax [eax+24h] +
mov esi eax +
mov [esp+4Ch+var_20] eax +
mov eax [esp+4Ch+arg_0] +
mov edx [esi+4] +
mov [esp+4Ch+var_14] 0 +
mov [esp+4Ch+var_10] 0 +
mov eax [eax+28h] +
mov [esp+4Ch+var_28] eax +
mov eax [esp+4Ch+arg_0] +
mov ebp [eax+2Ch] +
mov eax [eax+30h] +
mov [esp+4Ch+var_24] eax +
mov eax [edi+10h] +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] offset sub_407EF0 +
mov [esp+4Ch+var_4C] eax +
call sub_44D5F0  +
mov edx [esp+4Ch+var_10] +
mov eax [esp+4Ch+var_14] +
test edx edx +
mov [esp+4Ch+var_30] eax +
jnz loc_40A2D0  +
mov ecx [esp+4Ch+var_28] +
mov eax [edi+10h] +
mov edx [ecx+4] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] offset sub_407EF0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_14] 0 +
mov [esp+4Ch+var_10] 0 +
call sub_44D5F0  +
mov eax [esp+4Ch+var_14] +
mov [esp+4Ch+var_2C] eax +
mov eax [esp+4Ch+var_10] +
test eax eax +
jnz loc_40A2D0  +
mov eax [edi+10h] +
mov ebx [eax+64h] +
test ebx ebx +
jz loc_40A2F0  +
mov esi [esp+4Ch+var_24] +
mov [esp+4Ch+arg_4] edi +
jmp loc_40A27E  +
mov eax [esp+4Ch+arg_C] +
mov ecx ebx +
mov edx [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
call sub_409FA0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_40A2F0  +
cmp ebx [esp+4Ch+var_30] +
jz loc_40A323  +
cmp ebx [esp+4Ch+var_2C] +
jz loc_40A2F8  +
mov edi [ebx] +
mov eax [ebp+4] +
mov edx edi +
call sub_408DE0  +
test eax eax +
jnz loc_40A255  +
mov eax [esi+4] +
mov edx edi +
call sub_408DE0  +
test eax eax +
jz loc_40A277  +
mov eax [esp+4Ch+arg_C] +
mov ecx ebx +
mov edx [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
call sub_409FA0  +
jmp loc_40A277  +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_40A0D0  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] eax +
mov edx [esp+4Ch+arg_4] +
mov ecx ebx +
mov eax [esp+4Ch+arg_0] +
call sub_409FA0  +
jmp loc_40A277  +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+var_20] +
jmp loc_40A30C  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_14] 0 +
mov eax [eax+24h] +
mov ecx eax +
mov [esp+3Ch+var_20] eax +
mov eax [esp+3Ch+arg_0] +
mov edx [ecx+4] +
lea ecx [esp+3Ch+var_14] +
mov [esp+3Ch+var_10] 0 +
mov esi [eax+28h] +
mov ebp [eax+2Ch] +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+10h] +
mov [esp+3Ch+var_30] ecx +
mov [esp+3Ch+var_34] offset sub_407EF0 +
mov [esp+3Ch+var_38] edx +
mov [esp+3Ch+var_3C] eax +
call sub_44D5F0  +
mov eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_24] eax +
mov eax [esp+3Ch+var_10] +
test eax eax +
jnz loc_40A463  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
test ebx ebx +
jnz loc_40A3E1  +
jmp loc_40A430  +
mov eax [esp+3Ch+arg_C] +
mov ecx ebx +
mov edx [esp+3Ch+arg_4] +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
call sub_409FA0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_40A430  +
cmp ebx [esp+3Ch+var_24] +
jz loc_40A438  +
mov edi [ebx] +
mov eax [esi+4] +
mov edx edi +
call sub_408DE0  +
test eax eax +
jnz loc_40A3B8  +
mov eax [ebp+4] +
mov edx edi +
call sub_408DE0  +
test eax eax +
jz loc_40A3DA  +
mov eax [esp+3Ch+arg_C] +
mov ecx ebx +
mov edx [esp+3Ch+arg_4] +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
call sub_409FA0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_40A3E1  +
nop   +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_C] +
mov ecx ebx +
mov edx [esp+3Ch+arg_4] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_3C] eax +
mov eax [esp+3Ch+arg_0] +
call sub_409FA0  +
jmp loc_40A3DA  +
mov eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] eax +
call sub_40A0D0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov ebp [esp+3Ch+arg_4] +
mov [esp+3Ch+var_14] 0 +
mov eax [eax+24h] +
mov ecx eax +
mov [esp+3Ch+var_20] eax +
mov eax [esp+3Ch+arg_0] +
mov edx [ecx+4] +
lea ecx [esp+3Ch+var_14] +
mov [esp+3Ch+var_10] 0 +
mov esi [eax+28h] +
mov eax [ebp+10h] +
mov [esp+3Ch+var_30] ecx +
mov [esp+3Ch+var_34] offset sub_407EF0 +
mov [esp+3Ch+var_38] edx +
mov [esp+3Ch+var_3C] eax +
call sub_44D5F0  +
mov eax [esp+3Ch+var_10] +
mov edi [esp+3Ch+var_14] +
test eax eax +
jnz loc_40A570  +
mov eax [ebp+10h] +
mov ebx [eax+64h] +
test ebx ebx +
jnz loc_40A507  +
jmp loc_40A540  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_40A540  +
cmp ebx edi +
jz loc_40A548  +
mov eax [esi+4] +
mov edx [ebx] +
call sub_408DE0  +
test eax eax +
jz loc_40A500  +
mov eax [esp+3Ch+arg_C] +
mov ecx ebx +
mov edx ebp +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
call sub_409FA0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_40A507  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_C] +
mov ecx ebx +
mov edx ebp +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_3C] eax +
mov eax [esp+3Ch+arg_0] +
call sub_409FA0  +
jmp loc_40A500  +
mov eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] eax +
call sub_40A0D0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [esp+30h] +
lea ecx [esp+18h] +
mov esi [esp+34h] +
mov dword ptr [esp+18h] 0 +
mov edi [ebx+24h] +
mov eax [esi+10h] +
mov edx [edi+4] +
mov [esp+0Ch] ecx +
mov dword ptr [esp+8] offset sub_407EF0 +
mov [esp] eax +
mov [esp+4] edx +
mov dword ptr [esp+1Ch] 0 +
call sub_44D5F0  +
mov eax [esp+1Ch] +
mov ecx [esp+18h] +
test eax eax +
jnz loc_40A616  +
test ecx ecx +
jz loc_40A60F  +
mov eax [esp+3Ch] +
mov edx esi +
mov [esp] edi +
mov [esp+8] eax +
mov eax [esp+38h] +
mov [esp+4] eax +
mov eax ebx +
call sub_409FA0  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+3Ch] +
mov [esp+4] esi +
mov [esp] ebx +
mov [esp+0Ch] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
call sub_40A0D0  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 10h +
movzx ecx byte ptr ds:word_514820 +
and ecx 3 +
cmp cl 2 +
jz loc_40A690  +
mov esi [ebx] +
mov ebx ds:dword_50F2E8 +
test ebx ebx +
jnz loc_40A66B  +
jmp loc_40A685  +
mov ebx [ebx] +
test ebx ebx +
jz loc_40A685  +
mov eax [ebx+4] +
mov edx esi +
call sub_409ED0  +
test eax eax +
jnz loc_40A665  +
mov eax 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax+94h] +
mov [esp+10h+var_4] edx +
test eax eax +
jz loc_40A657  +
mov ecx [eax+4] +
mov ecx [ecx+188h] +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] eax +
call ecx  +
mov edx [esp+10h+var_4] +
test eax eax +
jz loc_40A657  +
test edx edx +
jz loc_40A679  +
mov esi [edx+18h] +
mov edi offset aDiscard_0 +
mov ecx 0Ah +
cmps   +
setnz al  +
movzx eax al +
jmp loc_40A67E  +
***
mov ebx [esp+8+arg_8] +
mov edx [esp+8+arg_14] +
mov eax ebx +
call sub_40A640  +
test eax eax +
jnz loc_40A6FE  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_40A703  +
add esp 8 +
pop ebx  +
retn   +
test byte ptr [ebx+14h] 8 +
jnz loc_40A6FE  +
mov eax [esp+8+arg_14] +
and byte ptr [eax+54h] 0FBh +
jmp loc_40A6FE  +
***
push esi  +
mov edi offset a_init_array_ +
sub esp 24h +
mov esi eax +
cmps   +
jz loc_40A745  +
mov edi offset a_fini_array_ +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_40A774  +
lea edx [esp+28h+var_C] +
add eax 0Ch +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_20] 0Ah +
mov [esp+28h+var_28] eax +
call strtoul  +
mov ecx [esp+28h+var_C] +
xor edx edx +
cmp byte ptr [ecx] 0 +
cmovz edx eax +
add esp 24h +
mov eax edx +
pop esi  +
pop edi  +
retn   +
mov edi offset a_ctors_ +
mov ecx 7 +
mov esi eax +
cmps   +
jz loc_40A794  +
mov edi offset a_dtors_ +
mov ecx 7 +
mov esi eax +
cmps   +
jnz loc_40A7C7  +
lea edx [esp+28h+var_C] +
add eax 7 +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_20] 0Ah +
mov [esp+28h+var_28] eax +
call strtoul  +
mov edx [esp+28h+var_C] +
cmp byte ptr [edx] 0 +
jnz loc_40A7C7  +
mov edx 0FFFFh +
add esp 24h +
sub edx eax +
mov eax edx +
pop esi  +
pop edi  +
retn   +
add esp 24h +
xor edx edx +
mov eax edx +
pop esi  +
pop edi  +
retn   +
***
jmp sub_40A7E0  +
***
sub esp 14h +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_8] +
mov edx [esp+1Ch+arg_14] +
mov edi [esp+1Ch+arg_4] +
mov eax esi +
call sub_40A640  +
test eax eax +
jz loc_40A8B6  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_1C] 0Ch +
call sub_4A05F0  +
mov [esp+1Ch+var_10] eax +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+8] 0 +
mov [eax] esi +
mov eax [esp+1Ch+arg_0] +
mov edx [eax+0Ch] +
lea ebx [eax+34h] +
test edx edx +
jnz loc_40A920  +
test edi edi +
jz loc_40A8EF  +
mov eax [edi+0Ch] +
test eax eax +
jnz loc_40A920  +
mov eax [esp+1Ch+arg_0] +
mov edx [eax+34h] +
test edx edx +
jnz loc_40A902  +
jmp loc_40A90C  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_40A900  +
lea ebx [edx+8] +
mov eax [esp+1Ch+var_10] +
mov [ebx] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebp [esi+40h] +
mov eax [ebx] +
test eax eax +
jz loc_40A90C  +
mov edx [eax] +
mov eax [edi+0Ch] +
lea ecx [edx+40h] +
mov [esp+1Ch+var_18] ecx +
mov ecx ebp +
mov [esp+1Ch+var_1C] edx +
mov edx esi +
call sub_40A7E0  +
mov ebx [ebx] +
test eax eax +
js loc_40A952  +
add ebx 8 +
mov eax [ebx] +
test eax eax +
jnz loc_40A929  +
jmp loc_40A90C  +
add ebx 4 +
jmp loc_40A923  +
***
sub esp 1Ch +
test eax 3FFFFFFFh +
jz loc_40A9A7  +
test eax 0FFFFFh +
jz loc_40A9C0  +
test eax 3FFh +
jz loc_40A990  +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] offset a10luB +
call printf  +
add esp 1Ch +
retn   +
shr eax 0Ah +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] offset a10luKb +
call printf  +
add esp 1Ch +
retn   +
shr eax 1Eh +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] offset a10luGb +
call printf  +
add esp 1Ch +
retn   +
shr eax 14h +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] offset a10luMb +
call printf  +
add esp 1Ch +
retn   +
***
push edi  +
push ebx  +
sub esp 10h +
mov ecx ds:dword_50F3B0 +
mov edx ds:dword_50F3AC +
mov ebx [esp+10h+arg_0] +
mov eax ecx +
sub eax edx +
cmp ebx eax +
ja loc_40AB02  +
mov eax ds:dword_50F3A8 +
add edx ebx +
cmp edx eax +
jz loc_40AB29  +
mov esi ds:dword_50F3B8 +
mov edi ecx +
mov ebx ds:dword_50F3A4 +
add edx esi +
not esi  +
and edx esi +
sub edi ebx +
mov esi edx +
sub esi ebx +
cmp esi edi +
mov ds:dword_50F3AC edx +
jbe loc_40AAF5  +
mov ds:dword_50F3AC ecx +
mov edx ecx +
mov ds:dword_50F3A8 edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] offset unk_50F3A0 +
call sub_4A87C0  +
mov edx ds:dword_50F3AC +
mov eax ds:dword_50F3A8 +
mov ecx ds:dword_50F3B0 +
add edx ebx +
cmp edx eax +
jnz loc_40AAC9  +
or ds:byte_50F3C8 2 +
jmp loc_40AAC9  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
movzx eax byte ptr [ebx+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_40AB63  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+14h] +
mov eax [edx+94h] +
cmp eax ds:dword_514850 +
jz loc_40AB56  +
test eax eax +
jz loc_40AB56  +
mov esi [edx+68h] +
test esi esi +
jz loc_40AC40  +
mov eax [esi+4] +
test eax eax +
jz loc_40AC33  +
mov ecx ds:dword_50F370 +
mov eax ds:dword_50F36C +
mov edx ecx +
sub edx eax +
cmp edx 7 +
jbe loc_40AC03  +
mov edx ds:dword_50F368 +
add eax 8 +
cmp eax edx +
jz loc_40AC27  +
mov edi ds:dword_50F378 +
add eax edi +
not edi  +
and eax edi +
mov edi ds:dword_50F364 +
mov ebp eax +
mov ds:dword_50F36C eax +
sub ebp edi +
mov [esp+1Ch+var_10] ebp +
mov ebp ecx +
sub ebp edi +
cmp [esp+1Ch+var_10] ebp +
jbe loc_40ABE0  +
mov ds:dword_50F36C ecx +
mov eax ecx +
mov ds:dword_50F368 eax +
mov eax [esi+4] +
mov [edx] ebx +
mov [eax] edx +
add edx 4 +
mov eax 1 +
mov [esi+4] edx +
add dword ptr [esi+8] 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_18] 8 +
mov [esp+1Ch+var_1C] offset unk_50F360 +
call sub_4A87C0  +
mov eax ds:dword_50F36C +
mov ecx ds:dword_50F370 +
jmp loc_40ABA2  +
or ds:byte_50F388 2 +
jmp loc_40ABAF  +
mov [esi+4] esi +
jmp loc_40AB8E  +
mov [esp+1Ch+var_1C] 0Ch +
call sub_40AAA0  +
mov esi eax +
mov eax [ebx+14h] +
mov [eax+68h] esi +
mov [esi+4] esi +
mov dword ptr [esi+8] 0 +
jmp loc_40AB8E  +
***
push edi  +
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 1Ch +
cmp eax offset dword_50F328 +
mov edi [esp+28h+arg_0] +
jz loc_40AC92  +
test eax eax +
jz loc_40AC92  +
cmp dword ptr [eax+4] 0Ch +
jz loc_40AD00  +
mov eax [ebx] +
test eax eax +
jz loc_40AC9E  +
cmp dword ptr [eax+4] 0Ch +
jz loc_40ACF5  +
mov [esp+28h+var_28] 18h +
call sub_40AAA0  +
mov ecx [ebx] +
test esi esi +
mov [eax] ecx +
mov ecx offset unk_50F288 +
cmovz esi ecx +
mov [ebx] eax +
mov dword ptr [eax+4] 0Ch +
mov [eax+10h] edi +
mov [eax+14h] esi +
mov ebx [edi+1Ch] +
mov edx ebp +
mov ecx [esp+28h+arg_4] +
mov [eax+0Ch] ebp +
sub ecx ebx +
mov [eax+8] ecx +
mov ecx ds:dword_50F2B8 +
shr edx cl +
add edx [esp+28h+arg_4] +
mov ebp edx +
sub ebp ebx +
shl ebp cl +
mov [edi+24h] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [eax+10h] edi +
jnz loc_40AC9E  +
jmp loc_40ACC7  +
cmp [eax+10h] edi +
jnz loc_40AC92  +
jmp loc_40ACC7  +
***
mov edi edx +
push esi  +
mov esi eax +
push ebx  +
sub esp 1Ch +
mov eax [esp+24h+arg_0] +
mov [esp+24h+var_18] ecx +
mov ds:dword_50F270 1 +
test eax eax +
jz loc_40AE05  +
mov [esp+24h+var_24] 2Ch +
mov ebp off_4BE018 +
call sub_40AAA0  +
mov edx 1Ch +
mov ebx eax +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 2 +
mov eax [ebp+4] +
mov [eax] ebx +
lea eax [ebx+10h] +
test al 1 +
mov [ebp+4] ebx +
jnz loc_40AE30  +
test al 2 +
jnz loc_40AE41  +
mov ebp edx +
xor ecx ecx +
and ebp 0FFFFFFFCh +
mov dword ptr [eax+ecx] 0 +
add ecx 4 +
cmp ecx ebp +
jb loc_40AD7D  +
add eax ecx +
test dl 2 +
jz loc_40AD9B  +
xor ecx ecx +
add eax 2 +
mov [eax-2] cx +
and edx 1 +
jz loc_40ADA3  +
mov byte ptr [eax] 0 +
mov eax [esp+24h+var_18] +
movzx edx byte ptr ds:dword_5146EC +
mov [ebx+20h] eax +
movzx eax byte ptr [ebx+24h] +
mov ebp edx +
mov ecx edx +
and ebp 20h +
and ecx 40h +
and edx 0FFFFFF80h +
and eax 0FFFFFF9Fh +
or eax ebp +
mov ebp edx +
movzx edx byte ptr [ebx+25h] +
or eax ecx +
movzx ecx byte ptr ds:dword_5146EC+1 +
and eax 77h +
or eax ebp +
and edx 0FFFFFFFEh +
and ecx 1 +
or edx ecx +
mov [ebx+25h] dl +
movzx ecx byte ptr ds:dword_5146EC +
and ecx 8 +
or eax ecx +
cmp edi 5 +
mov [ebx+24h] al +
ja loc_40AEF1  +
jmp ds:off_4D1044[edi*4]  +
mov [esp+24h+var_24] 2Ch +
call sub_40AAA0  +
mov edx 1Ch +
mov ebx eax +
mov dword ptr [eax+4] 2 +
mov dword ptr [eax] 0 +
lea eax [ebx+10h] +
test al 1 +
jz loc_40AD6E  +
lea eax [ebx+11h] +
mov dl 1Bh +
test al 2 +
mov byte ptr [ebx+10h] 0 +
jz loc_40AD76  +
xor ebp ebp +
add eax 2 +
mov [eax-2] bp +
sub edx 2 +
jmp loc_40AD76  +
or byte ptr [ebx+24h] 4 +
or edx 4 +
mov [ebx+8] esi +
mov [ebx+0Ch] esi +
mov [ebx+25h] dl +
mov eax ds:dword_514704 +
mov [eax] ebx +
lea eax [ebx+1Ch] +
mov ds:dword_514704 eax +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebx+8] esi +
mov [ebx+0Ch] esi +
jmp loc_40AE62  +
mov [ebx+8] esi +
mov [ebx+0Ch] esi +
or byte ptr [ebx+24h] 4 +
jmp loc_40AE62  +
or edx 4 +
mov [ebx+8] esi +
mov [ebx+0Ch] esi +
mov [ebx+25h] dl +
or byte ptr [ebx+24h] 10h +
jmp loc_40AE62  +
cmp byte ptr [esi] 3Ah +
jz loc_40AF10  +
mov [ebx+8] esi +
mov [esp+24h+var_1C] 0 +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_24] offset asc_4D1040 +
call sub_4A8A40  +
or byte ptr [ebx+25h] 4 +
mov [ebx+0Ch] eax +
movzx eax byte ptr [ebx+24h] +
or eax 5 +
mov [ebx+24h] al +
jmp loc_40AE62  +
or edx 4 +
mov [ebx+8] esi +
mov [ebx+0Ch] esi +
mov [ebx+25h] dl +
jmp loc_40AE62  +
mov [esp+24h+var_20] 451h +
mov [esp+24h+var_24] offset a____Binutils_0 +
call sub_4184A0  +
jmp loc_40AE62  +
cmp byte ptr [esi+1] 0 +
jz loc_40AEAB  +
lea eax [esi+1] +
mov [ebx+8] eax +
or byte ptr [ebx+24h] 2 +
jmp loc_40AEAE  +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov esi [esp+14h+arg_0] +
test ebx ebx +
jz loc_40AF6D  +
mov [esp+14h+var_14] ebx +
call esi  +
cmp dword ptr [ebx+4] 0Fh +
ja loc_40AFA7  +
mov eax [ebx+4] +
jmp ds:off_4D105C[eax*4]  +
mov eax ds:dword_514710 +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_10] eax +
call sub_40AF30  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40AF41  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp dword ptr [ebx+48h] 0FFFFFFFFh +
jz loc_40AF67  +
mov eax [ebx+8] +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_10] eax +
call sub_40AF30  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40AF41  +
jmp loc_40AF6D  +
mov eax [ebx+18h] +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_10] eax +
call sub_40AF30  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40AF41  +
jmp loc_40AF6D  +
mov [esp+14h+var_10] 3CBh +
mov [esp+14h+var_14] offset a____Binutils_0 +
call sub_4184A0  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40AF41  +
jmp loc_40AF6D  +
***
sub esp 1Ch +
mov eax ds:dword_50F328 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_40AF30  +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov dword ptr [eax] 0 +
mov [eax+4] eax +
retn   +
***
sub esp 1Ch +
mov eax off_4BE01C +
sub esp 24h +
mov eax [esp+24h+arg_0] +
mov edx [esp+24h+arg_4] +
mov ecx [esp+24h+arg_8] +
test eax eax +
jz loc_40B0AA  +
cmp byte ptr [eax] 3Dh +
jz loc_40B0C0  +
mov [esp+24h+arg_0] 1 +
add esp 24h +
pop ebx  +
pop esi  +
jmp sub_40AD10  +
add eax 1 +
mov [esp+24h+var_20] eax +
mov eax ds:dword_514804 +
mov [esp+24h+var_1C] 0 +
mov [esp+24h+var_8] ecx +
mov [esp+24h+var_C] edx +
mov [esp+24h+var_24] eax +
call sub_4A8A40  +
movzx esi byte ptr ds:dword_5146EC +
movzx ebx byte ptr ds:dword_5146EC +
mov edx [esp+24h+var_C] +
mov [esp+24h+var_24] 1 +
and esi 0FFFFFFF7h +
mov ecx esi +
mov byte ptr ds:dword_5146EC cl +
mov ecx [esp+24h+var_8] +
shr bl 3 +
and ebx 1 +
shl ebx 3 +
call sub_40AD10  +
movzx edx byte ptr ds:dword_5146EC +
and edx 0FFFFFFF7h +
or edx ebx +
mov byte ptr ds:dword_5146EC dl +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] offset unk_50F2C8 +
call sub_44DF50  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+1Ch+arg_0] +
test ebp ebp +
jz loc_40B28A  +
mov esi ds:dword_50F2C4 +
test esi esi +
jz loc_40B1A4  +
mov ebx esi +
nop   +
mov [esp+1Ch+var_18] ebp +
mov eax [ebx] +
mov [esp+1Ch+var_1C] eax +
call strcmp  +
test eax eax +
jz loc_40B258  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_40B180  +
mov esi [esi+8] +
test esi esi +
jnz loc_40B17D  +
mov eax [esp+1Ch+arg_4] +
test eax eax +
jnz loc_40B1D4  +
mov edi offset aDefault_2 +
mov ecx 0Ah +
mov esi ebp +
cmps   +
jz loc_40B1D4  +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] offset aPSWarningMemor +
call sub_418450  +
mov [esp+1Ch+var_1C] 30h +
call sub_40AAA0  +
mov [esp+1Ch+var_1C] ebp +
mov esi eax +
call sub_4A06C0  +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi+8] 0 +
mov dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+10h] 0 +
mov dword ptr [esi+18h] 0 +
mov [esi] eax +
mov eax off_4BE010 +
mov dword ptr [esi+14h] 0FFFFFFFFh +
mov dword ptr [esi+1Ch] 0 +
mov dword ptr [esi+20h] 0 +
mov dword ptr [esi+24h] 0 +
mov dword ptr [esi+28h] 0 +
mov dword ptr [esi+2Ch] 0 +
mov [eax] esi +
lea eax [esi+8] +
mov off_4BE010 eax +
mov eax esi +
lea esi [esi+0] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+1Ch+arg_4] +
mov eax esi +
test edx edx +
jz loc_40B250  +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] offset aPSWarningRedec +
mov [esp+1Ch+var_10] esi +
call sub_418450  +
mov eax [esp+1Ch+var_10] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_40B250  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [eax] +
mov [esp+3Ch+var_28] ecx +
test ebx ebx +
jz loc_40B39B  +
mov ebp edx +
mov esi eax +
lea esi [esi+0] +
cmp dword ptr [ebx+4] 0Fh +
ja loc_40B870  +
mov eax [ebx+4] +
jmp ds:off_4D12B0[eax*4]  +
mov eax [esp+3Ch+arg_0] +
lea edi [esp+3Ch+var_10] +
mov [esp+3Ch+var_10] eax +
mov eax [ebp+1Ch] +
mov esi [ebx+8] +
mov [esp+3Ch+var_34] edi +
mov ds:dword_514908 0 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] esi +
call sub_416940  +
mov eax ds:dword_514908 +
cmp eax 1 +
jz loc_40B940  +
cmp eax 2 +
jz loc_40B981  +
mov ds:dword_514908 0 +
mov eax [esi+0Ch] +
and eax 0FFFFFFFDh +
cmp eax 4 +
jnz loc_40B32C  +
mov eax [esi+10h] +
cmp byte ptr [eax] 2Eh +
jz loc_40BA33  +
or byte ptr [ebp+54h] 10h +
test byte ptr [ebp+54h] 8 +
jnz loc_40B38F  +
cmp ebp ds:dword_5146D8 +
jz loc_40BD63  +
mov eax [esp+3Ch+arg_0] +
mov ecx [esp+3Ch+var_10] +
cmp ecx eax +
jz loc_40B38B  +
sub ecx eax +
mov esi [ebp+1Ch] +
mov edx ecx +
mov ecx ds:dword_50F2B8 +
mov [esp+3Ch+var_38] eax +
mov eax ebx +
mov [esp+3Ch+var_3C] esi +
shl edx cl +
mov ecx edx +
mov edx [esp+3Ch+var_28] +
call sub_40AC70  +
mov eax [ebp+50h] +
mov ebx [ebx] +
cmp eax 3 +
jz loc_40B387  +
cmp eax 2 +
jz loc_40BA78  +
mov eax [ebp+1Ch] +
or dword ptr [eax+14h] 1 +
mov ecx [esp+3Ch+var_10] +
mov [esp+3Ch+arg_0] ecx +
mov esi ebx +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40B2B0  +
mov eax [esp+3Ch+arg_0] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebp+1Ch] +
mov eax [esp+3Ch+arg_0] +
sub eax [edx+1Ch] +
mov [ebx+24h] eax +
mov eax [ebp+1Ch] +
mov [ebx+20h] eax +
mov eax [ebx+0Ch] +
mov [esp+3Ch+var_3C] eax +
call sub_44E820  +
mov ecx ds:dword_50F2B8 +
sar eax cl +
mov edx [ebp+1Ch] +
mov esi ebx +
add eax [esp+3Ch+arg_0] +
mov [esp+3Ch+arg_0] eax +
sub eax [edx+1Ch] +
shl eax cl +
mov [edx+24h] eax +
jmp loc_40B391  +
mov edx [ebp+1Ch] +
lea edi [esp+3Ch+arg_0] +
mov eax [esp+3Ch+arg_0] +
sub eax [edx+1Ch] +
mov [ebx+18h] eax +
mov eax [ebp+1Ch] +
mov [ebx+14h] eax +
mov eax [ebx+0Ch] +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] offset off_4BFB90 +
mov [esp+3Ch+var_3C] eax +
call sub_416940  +
mov eax [ebx+8] +
sub eax 11Ah +
cmp eax 4 +
ja loc_40B9B0  +
jmp ds:off_4D12F0[eax*4]  +
mov eax [ebp+1Ch] +
mov esi ebx +
mov [ebx+10h] eax +
mov eax [ebx+8] +
mov [esp+3Ch+var_28] eax +
jmp loc_40B391  +
mov eax [ebp+1Ch] +
mov esi ebx +
mov ds:dword_51485C eax +
jmp loc_40B391  +
mov edx [esp+3Ch+arg_4] +
mov eax [ebx+8] +
test edx edx +
jz loc_40B49A  +
mov edx [eax+94h] +
lea edi [esp+3Ch+var_10] +
mov ecx [edx+4] +
mov ecx [ecx+160h] +
mov [esp+3Ch+var_30] edi +
mov [esp+3Ch+var_34] offset word_514820 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] edx +
call ecx  +
test eax eax +
jz loc_40B970  +
mov eax [esp+3Ch+var_10] +
test eax eax +
jnz loc_40B890  +
mov edi [ebp+1Ch] +
mov edx [esi] +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_24] edi +
mov edi [edx+8] +
movzx edx word ptr [edi+18h] +
and dx 380h +
cmp dx 200h +
jz loc_40B9D0  +
test byte ptr [edi+15h] 80h +
jnz loc_40B907  +
mov ecx [ebp+40h] +
cmp ecx 0FFFFFFFFh +
jz loc_40BA42  +
mov [edi+40h] ecx +
mov edx [esp+3Ch+var_24] +
cmp [edx+40h] ecx +
jnb loc_40B4E6  +
mov [edx+40h] ecx +
mov ecx [edi+40h] +
mov edx 1 +
shl edx cl +
mov ecx edx +
neg ecx  +
lea edx [eax+edx-1] +
mov [esp+3Ch+var_20] ecx +
and [esp+3Ch+var_20] edx +
mov edx [esp+3Ch+var_20] +
sub edx eax +
jnz loc_40BAB7  +
mov esi [esp+3Ch+var_24] +
mov ecx eax +
mov edx [esi+1Ch] +
mov esi [edi+24h] +
sub ecx edx +
mov [edi+38h] ecx +
mov ecx ds:dword_50F2B8 +
shr esi cl +
add eax esi +
mov esi [esp+3Ch+var_24] +
mov edi eax +
sub edi edx +
mov edx edi +
shl edx cl +
mov [esi+24h] edx +
jmp loc_40B55A  +
lea eax [ebx+18h] +
mov edi [esp+3Ch+arg_8] +
mov edx [esp+3Ch+arg_0] +
mov ecx [esp+3Ch+var_28] +
mov [esp+3Ch+var_34] edi +
mov edi [esp+3Ch+arg_4] +
mov [esp+3Ch+var_3C] edx +
mov edx ebp +
mov [esp+3Ch+var_38] edi +
call sub_40B290  +
mov [esp+3Ch+arg_0] eax +
mov esi ebx +
jmp loc_40B391  +
cmp dword ptr [ebx+48h] 0FFFFFFFFh +
mov esi ebx +
jz loc_40B391  +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_40BAEF  +
and byte ptr [ebx+54h] 0FEh +
lea edi [esp+3Ch+arg_0] +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] offset off_4BFB90 +
mov [esp+3Ch+var_3C] eax +
call sub_416940  +
mov edi ds:dword_5148DC +
test edi edi +
jz loc_40B8A0  +
mov eax ds:dword_5148D8 +
mov edx ds:dword_5148D0 +
test eax eax +
mov [esp+3Ch+arg_0] edx +
jz loc_40B5C0  +
add edx [eax+1Ch] +
mov [esp+3Ch+arg_0] edx +
mov edx [ebx+1Ch] +
test edx edx +
mov eax edx +
jz loc_40B38F  +
mov ecx ds:dword_514850 +
mov ecx [ecx+4] +
mov ecx [ecx+4] +
sub ecx 2 +
cmp ecx 1 +
jbe loc_40B9E2  +
cmp eax offset off_4BFB90 +
mov edi [esp+3Ch+arg_0] +
jz loc_40BB3C  +
mov edx [ebx+2Ch] +
test edx edx +
jz loc_40BB61  +
mov esi [ebx+44h] +
mov [esp+3Ch+var_24] esi +
mov ecx [esp+3Ch+var_24] +
test ecx ecx +
jle loc_40BAE0  +
mov esi 1 +
shl esi cl +
lea edx [edi+esi-1] +
neg esi  +
and esi edx +
mov ecx esi +
sub ecx edi +
mov [esp+3Ch+var_20] ecx +
jz loc_40B660  +
mov ecx ds:dword_514744 +
test ecx ecx +
jz loc_40BA4A  +
cmp ds:dword_5148C0 1 +
jz loc_40B660  +
mov eax [ebx+18h] +
mov edi [esp+3Ch+var_20] +
mov [esp+3Ch+var_3C] offset aPWarningChangi +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_34] edi +
call sub_418450  +
mov eax [ebx+1Ch] +
or byte ptr [eax+18h] 1 +
mov [eax+20h] esi +
mov [eax+1Ch] esi +
mov dword ptr [eax+38h] 0 +
mov edi [esp+3Ch+arg_8] +
mov edx ebx +
mov ecx [ebx+28h] +
lea eax [ebx+8] +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_34] edi +
mov edi [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] edi +
call sub_40B290  +
movzx edx byte ptr [ebx+54h] +
mov eax [ebx+1Ch] +
or edx 1 +
cmp eax offset off_4BFB90 +
mov [ebx+54h] dl +
jz loc_40B918  +
and edx 8 +
jnz loc_40B918  +
mov edx [eax+1Ch] +
mov ecx ds:dword_50F2B8 +
mov edi [ebx+3Ch] +
mov esi [eax+24h] +
mov [esp+3Ch+arg_0] edx +
lea edi [edx+edi-1] +
shr esi cl +
add esi edi +
mov edi [ebx+3Ch] +
neg edi  +
and esi edi +
sub esi edx +
shl esi cl +
mov [eax+24h] esi +
mov edi [ebx+20h] +
test edi edi +
jz loc_40BD48  +
mov eax [ebx+30h] +
test eax eax +
jz loc_40BA90  +
mov [esp+3Ch+var_34] offset aLoadBase +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] eax +
call sub_417350  +
mov edx [ebx+1Ch] +
mov [edx+20h] eax +
movzx eax byte ptr [ebx+54h] +
mov esi ebx +
or eax 2 +
cmp edx offset off_4BFB90 +
mov [ebx+54h] al +
jz loc_40B391  +
test al 8 +
jnz loc_40B391  +
mov eax [edx+14h] +
mov ecx eax +
and ecx 500h +
cmp ecx 400h +
jz loc_40BA5B  +
test al 1 +
jz loc_40BB30  +
mov ecx [edx+24h] +
test ecx ecx +
jz loc_40BD02  +
mov eax [esp+3Ch+arg_0] +
mov esi [ebx+24h] +
mov edx ecx +
test esi esi +
jz loc_40BE4A  +
mov ecx ds:dword_50F2B8 +
mov edi edx +
shr edi cl +
add eax edi +
mov [esp+3Ch+arg_0] eax +
mov eax [ebx+34h] +
test eax eax +
jz loc_40B799  +
lea esi [esp+3Ch+arg_0] +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_38] offset off_4BFB90 +
mov [esp+3Ch+var_3C] eax +
call sub_416940  +
mov edx [ebx+20h] +
test edx edx +
jz loc_40B38F  +
mov eax [ebx+1Ch] +
mov esi ebx +
test byte ptr [eax+14h] 3 +
jz loc_40B391  +
mov ecx [esp+3Ch+arg_0] +
mov [edx+1Ch] ecx +
mov ecx [esp+3Ch+arg_8] +
test ecx ecx +
jnz loc_40BD8E  +
mov edx [ebx+24h] +
test edx edx +
jz loc_40B38F  +
cmp edx [ebx+20h] +
jz loc_40B38F  +
mov eax [ebx+1Ch] +
test byte ptr [eax+14h] 2 +
jz loc_40BD20  +
mov ecx [eax+20h] +
mov esi ebx +
add edi ecx +
mov [edx+1Ch] edi +
mov edi [esp+3Ch+arg_8] +
test edi edi +
jz loc_40B391  +
mov [esp+3Ch+var_3C] ecx +
lea eax [ebx+1Ch] +
xor ecx ecx +
call sub_408EF0  +
jmp loc_40B391  +
mov dword ptr [ebx+0Ch] 0 +
mov edx [ebp+1Ch] +
mov esi ebx +
mov eax [esp+3Ch+arg_0] +
sub eax [edx+1Ch] +
mov [ebx+8] eax +
jmp loc_40B391  +
mov eax [esp+3Ch+arg_8] +
mov edx ebp +
mov esi ebx +
mov ecx [esp+3Ch+var_28] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] eax +
mov eax offset dword_514710 +
call sub_40B290  +
mov [esp+3Ch+arg_0] eax +
jmp loc_40B391  +
lea eax [ebx+8] +
jmp loc_40B538  +
mov [esp+3Ch+var_38] 14FEh +
mov esi ebx +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_4184A0  +
jmp loc_40B391  +
mov eax [esp+3Ch+arg_4] +
mov dword ptr [eax] 1 +
jmp loc_40B49A  +
cmp ds:dword_5148C0 1 +
jz loc_40B5C0  +
mov edx [ebx+18h] +
mov eax [ebx+2Ch] +
mov [esp+3Ch+var_3C] offset aFSNonConstantO +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_38] eax +
call sub_418450  +
jmp loc_40B5C0  +
mov eax 4 +
mov ecx ds:dword_50F2B8 +
mov edx 1 +
shl edx cl +
cmp eax edx +
cmovb eax edx +
shr eax cl +
jmp loc_40B3CD  +
mov eax 8 +
jmp loc_40B8D5  +
mov eax 1 +
jmp loc_40B8D5  +
mov eax 2 +
jmp loc_40B8D5  +
mov esi [esp+3Ch+var_24] +
mov edx eax +
sub edx [esi+1Ch] +
mov [edi+38h] edx +
jmp loc_40B55A  +
mov edi [eax+24h] +
test edi edi +
jz loc_40B6DB  +
mov [esp+3Ch+var_38] 1393h +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_4184A0  +
jmp loc_40B6DB  +
mov eax ds:dword_51490C +
test eax eax +
jz loc_40BCF7  +
cmp ebx eax +
nop   +
jz loc_40B307  +
mov [esp+3Ch+var_38] 14A7h +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_4184A0  +
jmp loc_40B307  +
mov [esp+3Ch+var_3C] offset aPFCanTRelaxSec +
call sub_418450  +
jmp loc_40B48E  +
mov eax ds:dword_514910 +
test eax eax +
jz loc_40BD83  +
cmp ebx eax +
jz loc_40B307  +
mov [esp+3Ch+var_38] 14B0h +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_4184A0  +
jmp loc_40B307  +
mov [esp+3Ch+var_34] offset aLang_size_sect +
mov [esp+3Ch+var_38] 1443h +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_44BA70  +
lea esi [esi+0] +
mov esi [esp+3Ch+var_24] +
mov edx [edi+1Ch] +
sub edx [esi+1Ch] +
mov [edi+38h] edx +
jmp loc_40B55A  +
test byte ptr [edx+17h] 4 +
jz loc_40B5E5  +
mov eax [ebx+8] +
test eax eax +
jz loc_40B9FD  +
mov esi [eax] +
test esi esi +
jz loc_40BE3B  +
mov eax [ebx+18h] +
mov [esp+3Ch+var_3C] offset aPXInternalErro +
mov [esp+3Ch+var_38] eax +
call sub_418450  +
mov eax [ebx+8] +
mov edx [ebx+1Ch] +
mov eax [eax+8] +
mov esi ebx +
mov ecx [eax+1Ch] +
mov eax [eax+24h] +
or byte ptr [edx+18h] 1 +
mov [edx+20h] ecx +
mov [edx+1Ch] ecx +
mov [edx+24h] eax +
jmp loc_40B391  +
cmp byte ptr [eax+1] 0 +
jz loc_40B32C  +
jmp loc_40B328  +
mov ecx [edi+40h] +
jmp loc_40B4D7  +
mov edx [ebx+2Ch] +
test edx edx +
nop   +
jnz loc_40B639  +
jmp loc_40B660  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_40BB30  +
mov eax [esp+3Ch+arg_0] +
xor edi edi +
jmp loc_40B774  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_40B387  +
jmp loc_40B380  +
mov edx [ebx+24h] +
test edx edx +
jz loc_40BDA4  +
test byte ptr [ebx+54h] 40h +
mov eax [edx+1Ch] +
jz loc_40BCC7  +
add eax [esp+3Ch+var_20] +
mov edx [ebx+1Ch] +
mov [edx+20h] eax +
jmp loc_40B70F  +
mov ecx ds:dword_50F2B8 +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_24] +
shl edx cl +
mov ecx edx +
mov edx [esp+3Ch+var_28] +
mov [esp+3Ch+var_3C] eax +
mov eax esi +
call sub_40AC70  +
mov eax [esp+3Ch+var_20] +
jmp loc_40B509  +
mov esi edi +
mov [esp+3Ch+var_20] 0 +
jmp loc_40B660  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jnz loc_40B5C0  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp dword ptr [eax+4] 2 +
jnz loc_40B5C0  +
mov [esp+3Ch+var_3C] 0 +
call sub_416850  +
test eax eax +
mov [ebx+2Ch] eax +
jz loc_40B5C0  +
jmp loc_40B57C  +
mov edx [edx+24h] +
mov eax [esp+3Ch+arg_0] +
jmp loc_40B76A  +
mov ecx dword_4BFBAC +
test ecx ecx +
jnz loc_40BE10  +
mov esi edi +
mov [esp+3Ch+var_24] 0 +
mov [esp+3Ch+var_20] 0 +
jmp loc_40B671  +
mov edi [ebx+20h] +
test edi edi +
mov [esp+3Ch+var_24] edi +
jz loc_40BE95  +
mov edi [eax+14h] +
mov [esp+3Ch+var_20] edi +
and edi 3 +
jz loc_40BBF6  +
mov edi [esp+3Ch+var_24] +
mov esi [edi] +
cmp byte ptr [esi] 2Ah +
jnz loc_40BBF6  +
mov ecx 0Ah +
mov edi offset aDefault_2 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_40BBF6  +
mov edx [esp+3Ch+var_20] +
mov esi edx +
mov ecx edx +
and esi 19h +
or ecx 20h +
cmp esi 1 +
cmovz edx ecx +
mov ecx ds:dword_50F2C4 +
test ecx ecx +
jz loc_40BBD4  +
test [ecx+24h] edx +
jz loc_40BBCD  +
test [ecx+28h] edx +
jz loc_40BEA5  +
mov ecx [ecx+8] +
test ecx ecx +
jnz loc_40BBBF  +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] offset aDefault_2 +
call sub_40B160  +
mov [esp+3Ch+var_24] eax +
mov eax [ebx+1Ch] +
mov edi [esp+3Ch+var_24] +
mov [ebx+20h] edi +
test byte ptr [ebx+54h] 8 +
jnz loc_40BCB4  +
mov ecx [eax+14h] +
test cl 1 +
jz loc_40BCB4  +
and ecx 402h +
cmp ecx 400h +
jz loc_40BCB4  +
movzx ecx byte ptr ds:word_514820 +
and ecx 3 +
cmp cl 2 +
jz loc_40BCB4  +
mov edi [esp+3Ch+arg_8] +
test edi edi +
jz loc_40BCB4  +
mov edi [esp+3Ch+var_24] +
mov ecx 0Ah +
mov esi [edi] +
mov edi offset aDefault_2 +
cmps   +
jnz loc_40BCB4  +
mov edi ds:dword_50F2C4 +
test edi edi +
mov [esp+3Ch+var_20] edi +
jz loc_40BCB4  +
mov esi [edi] +
mov ecx 0Ah +
mov edi offset aDefault_2 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_40BC82  +
mov edi [esp+3Ch+var_20] +
mov esi [edi+8] +
test esi esi +
jz loc_40BCB4  +
cmp ds:dword_5148C0 1 +
jz loc_40BCB4  +
mov eax [eax] +
cmp ds:byte_5147BC 0 +
mov [esp+3Ch+var_38] eax +
jz loc_40BEAE  +
mov [esp+3Ch+var_3C] offset aPFErrorNoMemor +
call sub_418450  +
mov eax [ebx+20h] +
mov [esp+3Ch+var_24] eax +
mov eax [ebx+1Ch] +
mov edi [esp+3Ch+var_24] +
mov esi [eax+40h] +
mov edi [edi+1Ch] +
mov [esp+3Ch+var_24] esi +
jmp loc_40B606  +
cmp edx [ebx+20h] +
jz loc_40BCD3  +
mov esi [ebx+44h] +
mov [esp+3Ch+var_24] esi +
mov esi [esp+3Ch+var_24] +
test esi esi +
jle loc_40BAAC  +
mov ecx esi +
mov edx 1 +
shl edx cl +
lea ecx [eax+edx-1] +
mov eax edx +
neg eax  +
and eax ecx +
jmp loc_40BAAC  +
mov ds:dword_51490C ebx +
jmp loc_40B307  +
mov esi [edi+20h] +
test esi esi +
jz loc_40BD31  +
mov edx [esi+1Ch] +
mov eax [esp+3Ch+arg_0] +
cmp [edx+1Ch] eax +
jbe loc_40B75D  +
xor edx edx +
jmp loc_40B76A  +
test byte ptr [ebx+54h] 40h +
mov esi ebx +
jz loc_40B391  +
jmp loc_40B7E7  +
mov eax [edx+20h] +
cmp [edx+1Ch] eax +
jnz loc_40B759  +
mov eax [esp+3Ch+arg_0] +
xor edx edx +
jmp loc_40B76A  +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] offset aDefault_2 +
call sub_40B160  +
mov edi eax +
jmp loc_40B6E6  +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] offset aDefault_2 +
call sub_40B160  +
mov ecx [esp+3Ch+var_10] +
mov [eax+1Ch] ecx +
jmp loc_40B38B  +
mov ds:dword_514910 ebx +
jmp loc_40B307  +
mov esi [eax+1Ch] +
lea eax [ebx+1Ch] +
mov ecx [ebx+2Ch] +
mov [esp+3Ch+var_3C] esi +
call sub_408EF0  +
jmp loc_40B7C6  +
mov eax [edi+20h] +
mov edx [ebx+1Ch] +
test eax eax +
jz loc_40B70F  +
test byte ptr [edx+14h] 1 +
jz loc_40B70F  +
mov ecx [eax+1Ch] +
mov eax [esp+3Ch+arg_0] +
mov esi [ecx+1Ch] +
mov [esp+3Ch+var_20] eax +
cmp esi eax +
jbe loc_40BE65  +
mov eax [edx+24h] +
test eax eax +
jz loc_40BE65  +
add eax [esp+3Ch+var_20] +
cmp esi eax +
jb loc_40BE65  +
cmp esi [ecx+20h] +
jz loc_40B70F  +
mov eax [ebx+18h] +
mov [esp+3Ch+var_3C] offset aPWarningDotMov +
mov [esp+3Ch+var_38] eax +
call sub_418450  +
mov edx [ebx+1Ch] +
jmp loc_40B70F  +
mov [esp+3Ch+var_38] 1338h +
mov esi edi +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_4184A0  +
mov [esp+3Ch+var_24] 0 +
mov [esp+3Ch+var_20] 0 +
jmp loc_40B671  +
cmp dword ptr [eax+4] 5 +
jnz loc_40B9FD  +
jmp loc_40BA16  +
movzx ecx byte ptr ds:word_514820 +
and ecx 3 +
cmp cl 2 +
jz loc_40B76A  +
mov [edi+20h] ebx +
jmp loc_40B76A  +
cmp dword ptr [ebx+50h] 1 +
jz loc_40BE9D  +
mov eax [esp+3Ch+var_20] +
add eax [ecx+20h] +
sub eax esi +
mov ecx [esp+3Ch+var_24] +
test ecx ecx +
jle loc_40BE8D  +
mov esi 1 +
shl esi cl +
mov ecx esi +
lea eax [eax+esi-1] +
neg ecx  +
and eax ecx +
mov [edx+20h] eax +
jmp loc_40B70F  +
mov edx [eax+14h] +
jmp loc_40BBA5  +
mov eax [ecx+24h] +
add eax [ecx+20h] +
jmp loc_40BE74  +
mov [esp+3Ch+var_24] ecx +
jmp loc_40BBEF  +
mov [esp+3Ch+var_3C] offset aPWarningNoMemo +
call sub_418450  +
mov eax [ebx+20h] +
mov [esp+3Ch+var_24] eax +
mov eax [ebx+1Ch] +
jmp loc_40BCB4  +
***
push edi  +
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 2Ch +
mov eax [esp+38h+arg_4] +
mov edi [esp+38h+arg_0] +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_1C] eax +
mov eax [esp+38h+arg_8] +
mov [esp+38h+var_38] edi +
mov [esp+38h+var_20] eax +
call sub_40B160  +
test edi edi +
setnz [esp+38h+var_21]  +
mov [esi] eax +
jz loc_40BF36  +
mov edx [esp+38h+var_20] +
test edx edx +
jnz loc_40BF36  +
mov edi offset aDefault_2 +
mov ecx 0Ah +
mov esi ebx +
cmps   +
jnz loc_40BF36  +
cmp [esp+38h+var_21] 0 +
mov [ebp+0] eax +
jnz loc_40BF50  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_34] 0 +
mov [esp+38h+var_38] ebx +
call sub_40B160  +
cmp [esp+38h+var_21] 0 +
mov [ebp+0] eax +
jz loc_40BF2E  +
mov eax [esp+38h+var_1C] +
test eax eax +
jz loc_40BF2E  +
mov [esp+38h+arg_4] 0 +
mov [esp+38h+arg_0] offset aXPSSectionHasB +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_418450  +
***
push edi  +
mov ecx 0Ah +
push esi  +
mov edi eax +
push ebx  +
sub esp 2Ch +
mov esi [esp+34h+arg_4] +
mov ebx [esp+34h+arg_0] +
cmps   +
jz loc_40C03D  +
mov ecx 0Ah +
mov esi ebx +
mov edi eax +
cmps   +
jz loc_40C03D  +
mov edi ds:dword_50F2C4 +
test edi edi +
jz loc_40C05F  +
xor esi esi +
mov ebp edi +
jmp loc_40BFCF  +
mov ebp [ebp+4] +
test ebp ebp +
jz loc_40C009  +
test esi esi +
mov ecx [ebp+0] +
jz loc_40C083  +
mov [esp+34h+var_30] ebx +
mov [esp+34h+var_34] ecx +
call strcmp  +
test eax eax +
jnz loc_40BFC8  +
mov [esp+34h+var_2C] ebx +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] offset aFPSErrorRedefi +
call sub_418450  +
mov ebp [ebp+4] +
test ebp ebp +
jnz loc_40BFCF  +
mov edi [edi+8] +
test edi edi +
jnz loc_40BFC4  +
test esi esi +
jz loc_40C05F  +
mov [esp+34h+var_34] 8 +
call sub_40AAA0  +
mov [esp+34h+var_34] ebx +
mov edi eax +
call sub_4A06C0  +
mov [edi] eax +
mov eax [esi+4] +
mov [edi+4] eax +
mov [esi+4] edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] offset aFPSErrorAliasF +
call sub_418450  +
mov edi ds:dword_50F2C4 +
test edi edi +
jnz loc_40BFC2  +
mov eax [esp+34h+arg_4] +
xor esi esi +
mov [esp+34h+var_28] ebx +
mov [esp+34h+var_30] 0 +
mov [esp+34h+var_34] offset aFPSErrorMemory +
mov [esp+34h+var_2C] eax +
call sub_418450  +
jmp loc_40C014  +
mov eax [esp+34h+arg_4] +
mov [esp+34h+var_34] ecx +
mov [esp+34h+var_18] ecx +
mov [esp+34h+var_30] eax +
call strcmp  +
mov ecx [esp+34h+var_18] +
test eax eax +
cmovz esi edi +
jmp loc_40BFDA  +
***
mov eax [esp+4] +
mov eax [eax+68h] +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_8] +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_20] 0 +
mov esi [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] offset unk_50F2C8 +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] eax +
call sub_44E180  +
test eax eax +
mov ebx eax +
jz loc_40C190  +
mov ebp [eax+24h] +
test ebp ebp +
jz loc_40C1B4  +
test edi edi +
jz loc_40C169  +
cmp esi 17Ch +
jnz loc_40C169  +
mov [esp+2Ch+var_24] ebp +
mov [esp+2Ch+var_28] offset unk_50F2C8 +
mov [esp+2Ch+var_2C] 0 +
call sub_408090  +
test eax eax +
jz loc_40C1BA  +
mov ecx [ebx] +
mov [eax] ecx +
mov ecx [ebx+4] +
mov [eax+4] ecx +
mov ecx [ebx+8] +
mov [eax+8] ecx +
mov [ebx] eax +
mov [eax+24h] ebp +
add eax 0Ch +
mov [eax+48h] esi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test esi esi +
jnz loc_40C15B  +
test eax eax +
jns loc_40C170  +
mov eax [ebx] +
test eax eax +
nop   +
jz loc_40C180  +
cmp ebp [eax+24h] +
jnz loc_40C180  +
mov ebx eax +
mov eax [ebx+54h] +
cmp eax esi +
jnz loc_40C153  +
add esp 2Ch +
lea eax [ebx+0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
test edi edi +
jnz loc_40C110  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
test edi edi +
jz loc_40C14B  +
mov [esp+2Ch+var_10] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] offset aPFFailedCreati +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
mov eax [esp+2Ch+var_10] +
jmp loc_40C14B  +
mov ebp [esp+2Ch+arg_0] +
jmp loc_40C142  +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] offset aPFFailedCreati +
call sub_418450  +
xor eax eax +
jmp loc_40C14B  +
***
jmp sub_40C1E0  +
***
sub esp 2Ch +
mov [esp+2Ch+var_1C] offset free +
mov [esp+2Ch+var_20] offset sub_4A05F0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 3E8h +
mov [esp+2Ch+var_2C] offset unk_50F3A0 +
call sub_4A8760  +
mov [esp+2Ch+var_20] 3Dh +
mov [esp+2Ch+var_24] 64h +
mov [esp+2Ch+var_28] offset sub_408090 +
mov [esp+2Ch+var_2C] offset unk_50F2C8 +
mov off_4BE018 offset dword_50F328 +
call sub_44DE40  +
test eax eax +
jnz loc_40C24D  +
mov [esp+2Ch+var_2C] offset aPFCanNotCreate +
call sub_418450  +
mov eax off_4BE018 +
mov dword ptr [eax] 0 +
mov [eax+4] eax +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 2 +
mov [esp+2Ch+var_2C] 0 +
mov ds:dword_514700 0 +
mov ds:dword_514704 offset dword_514700 +
mov ds:dword_5146F8 0 +
mov ds:dword_5146FC offset dword_5146F8 +
mov ds:dword_50F27C 0 +
mov ds:dword_50F280 offset dword_50F27C +
call sub_40B090  +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] offset aAbs +
mov ds:dword_50F334 eax +
call sub_40C0C0  +
mov ds:dword_50F2E4 0 +
mov ds:dword_5146E8 offset dword_50F2E4 +
mov ds:dword_5146D8 eax +
mov dword ptr [eax+1Ch] offset off_4BFB90 +
add esp 2Ch +
retn   +
***
sub esp 18h +
cmp dword ptr [ebx+0Ch] 8 +
ja loc_40C320  +
mov eax [ebx+0Ch] +
jmp ds:off_4D1448[eax*4]  +
mov ebx [ebx+10h] +
cmp dword ptr [ebx+0Ch] 8 +
jbe loc_40C30C  +
nop   +
add esp 18h +
pop ebx  +
retn   +
mov eax [ebx+10h] +
call sub_40C300  +
mov ebx [ebx+14h] +
jmp loc_40C306  +
mov eax [ebx+10h] +
call sub_40C300  +
mov eax [ebx+14h] +
call sub_40C300  +
mov ebx [ebx+18h] +
jmp loc_40C306  +
mov eax [ebx] +
lea ecx [eax-140h] +
cmp ecx 3 +
ja loc_40C320  +
mov eax 1 +
shl eax cl +
test al 0Dh +
jz loc_40C320  +
mov eax [ebx+10h] +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] eax +
call sub_40C0C0  +
test eax eax +
jz loc_40C320  +
mov edx [eax+1Ch] +
test edx edx +
jnz loc_40C320  +
add esp 18h +
xor edx edx +
pop ebx  +
jmp sub_40C390  +
***
push edi  +
mov edi offset aDiscard_0 +
push esi  +
mov ebp edx +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov esi [eax+18h] +
cmps   +
jz loc_40C415  +
cmp dword ptr [ebx+48h] 17Ch +
jz loc_40C410  +
mov eax [ebx+18h] +
mov [esp+28h+var_24] eax +
mov eax ds:dword_514850 +
mov [esp+28h+var_28] eax +
call sub_44D4B0  +
mov [ebx+1Ch] eax +
test eax eax +
jz loc_40C430  +
mov [eax+3Ch] eax +
mov dword ptr [eax+38h] 0 +
mov [eax+68h] ebx +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_40C3E9  +
call sub_40C300  +
mov eax [ebx+30h] +
test eax eax +
jz loc_40C3F5  +
call sub_40C300  +
mov eax [ebx+44h] +
cmp eax 0FFFFFFFFh +
jz loc_40C403  +
mov edx [ebx+1Ch] +
mov [edx+40h] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+1Ch] +
jmp loc_40C3CC  +
mov [esp+28h+var_24] offset aDiscard_0 +
mov [esp+28h+var_28] offset aPFIllegalUseOf +
call sub_418450  +
jmp loc_40C3AC  +
mov eax [ebx+18h] +
mov [esp+28h+var_20] ebp +
mov [esp+28h+var_24] eax +
mov eax ds:dword_514850 +
mov [esp+28h+var_28] eax +
call sub_44D890  +
test eax eax +
mov [ebx+1Ch] eax +
jnz loc_40C3D0  +
mov eax ds:dword_514850 +
mov edx [ebx+18h] +
mov eax [eax+4] +
mov eax [eax] +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_28] offset aPFOutputFormat +
mov [esp+28h+var_24] eax +
call sub_418450  +
mov eax [ebx+1Ch] +
jmp loc_40C3D0  +
***
push ebx  +
sub esp 10h +
mov eax [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov edi [eax+18h] +
lea ebx [eax-0Ch] +
cmp [eax-8] edi +
jz loc_40C4B0  +
mov [esp+10h+var_C] 5C8h +
mov [esp+10h+var_10] offset a____Binutils_0 +
call sub_4184A0  +
lea esi [esi+0] +
mov ebx [ebx] +
test ebx ebx +
jz loc_40C4D4  +
cmp [ebx+24h] edi +
jnz loc_40C4D4  +
mov eax [ebx+54h] +
cmp eax esi +
jz loc_40C4CA  +
test esi esi +
jnz loc_40C4B0  +
test eax eax +
js loc_40C4B0  +
add esp 10h +
lea eax [ebx+0Ch] +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov edx [esp+2Ch+arg_0] +
mov edi [esp+2Ch+arg_C] +
and eax 11h +
mov [esp+2Ch+var_10] eax +
mov eax [esp+2Ch+arg_4] +
and eax 9 +
mov [esp+2Ch+var_14] eax +
mov eax ds:dword_5146F8 +
mov ebx [eax+10h] +
test ebx ebx +
jz loc_40C659  +
xor ecx ecx +
mov esi ebx +
mov [esp+2Ch+var_18] ebx +
mov ebx ecx +
nop   +
mov eax [esi+1Ch] +
mov ebp [esi+4Ch] +
test eax eax +
jz loc_40C559  +
test edi edi +
mov ebp [eax+14h] +
jz loc_40C559  +
mov [esp+2Ch+var_20] edx +
mov ecx [edx+94h] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
call edi  +
mov edx [esp+2Ch+var_1C] +
test eax eax +
jz loc_40C566  +
xor ebp [esp+2Ch+arg_4] +
and ebp 40051Bh +
cmovz ebx esi +
mov esi [esi+10h] +
test esi esi +
jnz loc_40C520  +
mov ecx ebx +
mov ebx [esp+2Ch+var_18] +
test ecx ecx +
mov ebp ecx +
jnz loc_40C8B2  +
cmp [esp+2Ch+var_10] 11h +
jz loc_40C668  +
cmp [esp+2Ch+var_14] 9 +
jz loc_40C6C0  +
mov eax [esp+2Ch+arg_4] +
and eax 401h +
cmp eax 401h +
jz loc_40C750  +
mov eax [esp+2Ch+arg_4] +
and eax 400001h +
cmp eax 400001h +
jz loc_40C7BD  +
mov eax [esp+2Ch+arg_4] +
and eax 101h +
cmp eax 101h +
jz loc_40C84F  +
test byte ptr [esp+2Ch+arg_4] 1 +
jz loc_40C8CE  +
xor ebp ebp +
test ebx ebx +
jz loc_40C637  +
mov eax [ebx+1Ch] +
mov esi [ebx+4Ch] +
test eax eax +
jz loc_40C619  +
test edi edi +
mov esi [eax+14h] +
jz loc_40C619  +
mov [esp+2Ch+var_20] edx +
mov ecx [edx+94h] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
call edi  +
mov edx [esp+2Ch+var_1C] +
test eax eax +
jz loc_40C623  +
xor esi [esp+2Ch+arg_4] +
and esi 1 +
cmovz ebp ebx +
mov ebx [ebx+10h] +
test ebx ebx +
jnz loc_40C5E0  +
test ebp ebp +
setnz al  +
test al al +
jnz loc_40C904  +
test edi edi +
jz loc_40C904  +
mov eax ds:dword_5146F8 +
xor edi edi +
mov [esp+2Ch+arg_8] 0 +
mov ebx [eax+10h] +
test ebx ebx +
jnz loc_40C515  +
cmp [esp+2Ch+var_10] 11h +
jnz loc_40C588  +
xor ebp ebp +
jmp loc_40C637  +
mov eax [ebx+1Ch] +
mov esi [ebx+4Ch] +
test eax eax +
jz loc_40C6A1  +
test edi edi +
mov esi [eax+14h] +
jz loc_40C6A1  +
mov [esp+2Ch+var_20] edx +
mov ecx [edx+94h] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
call edi  +
mov edx [esp+2Ch+var_1C] +
test eax eax +
jz loc_40C6AE  +
xor esi [esp+2Ch+arg_4] +
and esi 400513h +
cmovz ebp ebx +
mov ebx [ebx+10h] +
test ebx ebx +
jnz loc_40C668  +
jmp loc_40C62A  +
xor ebp ebp +
test ebx ebx +
jz loc_40C637  +
mov [esp+2Ch+var_1C] ebp +
mov ebp edi +
mov edi edx +
jmp loc_40C6F3  +
test eax 10Bh +
jnz loc_40C6EC  +
mov eax [esp+2Ch+var_1C] +
and esi 400000h +
cmovz eax ebx +
mov [esp+2Ch+var_1C] eax +
mov ebx [ebx+10h] +
test ebx ebx +
jz loc_40C73C  +
mov eax [ebx+1Ch] +
mov esi [ebx+4Ch] +
test eax eax +
jz loc_40C724  +
test ebp ebp +
mov esi [eax+14h] +
jz loc_40C724  +
mov [esp+2Ch+var_20] edi +
mov ecx [edi+94h] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
call ebp  +
test eax eax +
jz loc_40C6EC  +
mov eax [esp+2Ch+arg_4] +
xor eax esi +
test eax 40010Bh +
jnz loc_40C6D4  +
mov [esp+2Ch+var_1C] ebx +
mov ebx [ebx+10h] +
test ebx ebx +
jnz loc_40C6F3  +
mov edx edi +
mov edi ebp +
mov ebp [esp+2Ch+var_1C] +
jmp loc_40C62A  +
test ebx ebx +
mov ecx ebx +
jz loc_40C7B3  +
mov esi [esp+2Ch+arg_4] +
xor edi edi +
xor ecx ecx +
mov ebp [esp+2Ch+arg_4] +
or esi 102h +
and ebp 2 +
jmp loc_40C786  +
test al 2 +
jnz loc_40C778  +
test ebp ebp +
jnz loc_40C7B3  +
mov ecx ebx +
mov ebx [ebx+10h] +
mov edi 1 +
test ebx ebx +
jz loc_40C7B3  +
mov edx [ebx+1Ch] +
mov eax [ebx+4Ch] +
test edx edx +
jz loc_40C793  +
mov eax [edx+14h] +
mov edx eax +
xor edx esi +
test edx 401h +
jz loc_40C770  +
test edi edi +
jnz loc_40C7B3  +
and edx 103h +
cmovz ecx ebx +
mov ebx [ebx+10h] +
test ebx ebx +
jnz loc_40C786  +
add esp 2Ch +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ebp ebp +
test ebx ebx +
jz loc_40C637  +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_1C] ebp +
mov ebp edi +
mov edi edx +
and eax 100h +
mov [esp+2Ch+var_18] eax +
jmp loc_40C80B  +
and esi 400000h +
jz loc_40C800  +
mov eax [esp+2Ch+var_18] +
test eax eax +
mov eax [esp+2Ch+var_1C] +
cmovz eax ebx +
mov [esp+2Ch+var_1C] eax +
lea esi [esi+0] +
mov ebx [ebx+10h] +
test ebx ebx +
jz loc_40C73C  +
mov eax [ebx+1Ch] +
mov esi [ebx+4Ch] +
test eax eax +
jz loc_40C83C  +
test ebp ebp +
mov esi [eax+14h] +
jz loc_40C83C  +
mov [esp+2Ch+var_20] edi +
mov ecx [edi+94h] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
call ebp  +
test eax eax +
jz loc_40C800  +
mov eax [esp+2Ch+arg_4] +
xor eax esi +
test eax 503h +
jnz loc_40C7E0  +
mov [esp+2Ch+var_1C] ebx +
jmp loc_40C800  +
xor ebp ebp +
test ebx ebx +
jz loc_40C637  +
lea esi [esi+0] +
mov eax [ebx+1Ch] +
mov esi [ebx+4Ch] +
test eax eax +
jz loc_40C899  +
test edi edi +
mov esi [eax+14h] +
jz loc_40C899  +
mov [esp+2Ch+var_20] edx +
mov ecx [edx+94h] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
call edi  +
mov edx [esp+2Ch+var_1C] +
test eax eax +
jz loc_40C8A6  +
xor esi [esp+2Ch+arg_4] +
and esi 400503h +
cmovz ebp ebx +
mov ebx [ebx+10h] +
test ebx ebx +
jnz loc_40C860  +
jmp loc_40C62A  +
mov edx [esp+2Ch+arg_8] +
test edx edx +
jz loc_40C7B3  +
mov eax [esp+2Ch+arg_8] +
mov [eax] ecx +
add esp 2Ch +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ebx ebx +
mov ecx ebx +
jz loc_40C7B3  +
mov esi [esp+2Ch+arg_4] +
xor ecx ecx +
mov edx [ebx+1Ch] +
mov eax [ebx+4Ch] +
test edx edx +
jz loc_40C8EB  +
mov eax [edx+14h] +
xor eax esi +
test ah 20h +
cmovz ecx ebx +
mov ebx [ebx+10h] +
test ebx ebx +
jnz loc_40C8DE  +
add esp 2Ch +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx ebp +
jmp loc_40C7B3  +
***
push esi  +
push ebx  +
sub esp 90h +
mov esi ds:dword_50F27C +
test esi esi +
jz loc_40C9BB  +
lea esi [esi+0] +
mov edx [esi+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_40C9B0  +
test byte ptr [esi+24h] 10h +
jnz loc_40C9B0  +
mov ebx [edx+64h] +
test ebx ebx +
jnz loc_40C963  +
jmp loc_40C9B0  +
mov edx 1 +
mov eax ebx +
call sub_409090  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_40C9B0  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_40C978  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_40C95C  +
test dword ptr [ebx+14h] 300000h +
jnz loc_40C95C  +
test edi edi +
jnz loc_40C950  +
mov eax ds:dword_514770 +
mov di 1 +
mov [esp+98h+var_90] 1Bh +
mov [esp+98h+var_94] 1 +
mov [esp+98h+var_98] offset aDiscardedInput +
mov [esp+98h+var_8C] eax +
call fwrite  +
jmp loc_40C950  +
mov esi [esi+18h] +
test esi esi +
jnz loc_40C930  +
mov [esp+98h+var_98] offset aMemoryConfigur +
lea edi [esp+98h+var_6C] +
call sub_4184D0  +
mov eax ds:dword_514770 +
mov [esp+98h+var_84] offset aAttributes +
mov [esp+98h+var_88] offset aLength +
mov [esp+98h+var_8C] offset aOrigin +
mov [esp+98h+var_90] offset aName_0 +
mov [esp+98h+var_94] offset a16s18s18sS +
mov [esp+98h+var_98] eax +
call fprintf  +
mov esi ds:dword_50F2C4 +
test esi esi +
jz loc_40CAF0  +
nop   +
mov eax [esi] +
mov [esp+98h+var_94] offset a16s +
mov [esp+98h+var_90] eax +
mov eax ds:dword_514770 +
mov [esp+98h+var_98] eax +
call fprintf  +
mov eax [esi+10h] +
mov [esp+98h+var_94] offset a08lx_0 +
mov [esp+98h+var_98] edi +
mov [esp+98h+var_90] eax +
call sprintf  +
mov [esp+98h+var_94] edi +
mov [esp+98h+var_98] offset a0xS_0 +
call sub_4184D0  +
mov edx edi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_40CA54  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ebx [edx+2] +
cmovnz ebx edx +
add al al +
sbb ebx 3 +
sub ebx edi +
cmp ebx 0Fh +
jg loc_40CA9D  +
lea esi [esi+0] +
add ebx 1 +
call sub_418560  +
cmp ebx 10h +
jnz loc_40CA90  +
mov eax [esi+14h] +
mov [esp+98h+var_98] offset a0xV_0 +
mov [esp+98h+var_94] eax +
call sub_4184D0  +
mov ebx [esi+24h] +
test ebx ebx +
jnz loc_40CABE  +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_40CAE0  +
mov [esp+98h+var_98] offset asc_4D1567 +
call sub_4184D0  +
mov edx [esi+24h] +
test edx edx +
jnz loc_40CBD0  +
mov eax [esi+28h] +
test eax eax +
jnz loc_40CBB7  +
call sub_418580  +
mov esi [esi+8] +
test esi esi +
jnz loc_40CA10  +
mov eax ds:dword_514770 +
mov [esp+98h+var_90] 1Fh +
mov [esp+98h+var_94] 1 +
mov [esp+98h+var_98] offset aLinkerScriptAn +
mov [esp+98h+var_8C] eax +
call fwrite  +
cmp ds:byte_514823 0 +
js loc_40CB67  +
mov [esp+98h+var_88] offset free +
mov [esp+98h+var_8C] offset sub_4A05F0 +
mov [esp+98h+var_90] 0 +
mov [esp+98h+var_94] 3E8h +
mov [esp+98h+var_98] offset unk_50F360 +
call sub_4A8760  +
mov eax ds:dword_51483C +
mov [esp+98h+var_90] 0 +
mov [esp+98h+var_94] offset sub_40AB40 +
mov [esp+98h+var_98] eax +
call sub_450810  +
mov ebx ds:dword_50F328 +
add ds:dword_50F260 1 +
mov esi ds:dword_5146D8 +
test ebx ebx +
jz loc_40CB8F  +
nop   +
mov eax ebx +
mov edx esi +
call sub_409370  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40CB80  +
mov eax ds:dword_514770 +
mov [esp+98h+var_94] offset word_514820 +
mov [esp+98h+var_90] eax +
mov eax ds:dword_514850 +
mov [esp+98h+var_98] eax +
call sub_4179F0  +
add esp 90h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+98h+var_98] offset asc_4D1570 +
call sub_4184D0  +
mov eax [esi+28h] +
call sub_408310  +
jmp loc_40CAE0  +
call sub_418560  +
mov eax [esi+24h] +
call sub_408310  +
jmp loc_40CAD5  +
***
push edi  +
mov edi offset aDiscard_0 +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax ds:dword_514850 +
mov ebx [esp+38h+arg_4] +
mov [esp+38h+var_1C] eax +
mov eax [esp+38h+arg_C] +
mov ebp [ebx+14h] +
mov esi [eax+18h] +
cmps   +
setnbe dl  +
setb cl  +
mov esi edx +
mov edx 1 +
mov eax esi +
cmp al cl +
jz loc_40CC35  +
mov edx ebp +
shr edx 0Fh +
and edx 1 +
test byte ptr ds:word_514820+1 8 +
jz loc_40CC46  +
test ebp 2000h +
jnz loc_40CC87  +
test edx edx +
jnz loc_40CC87  +
mov esi [esp+38h+arg_8] +
test esi esi +
jz loc_40CC78  +
mov eax [esp+38h+var_1C] +
mov edi [esp+38h+arg_8] +
mov eax [eax+4] +
mov eax [eax+180h] +
mov [esp+38h+var_30] ebx +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] offset word_514820 +
call eax  +
test eax eax +
jz loc_40CC7F  +
mov ecx [ebx+3Ch] +
test ecx ecx +
jz loc_40CC97  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [ebx+3Ch] +
test edi edi +
jnz loc_40CC7F  +
mov dword ptr [ebx+3Ch] offset off_4BFB90 +
jmp loc_40CC7F  +
movzx eax byte ptr ds:word_514820 +
mov esi ebp +
and ebp 0FFF1FDFBh +
and esi 0FFFFFDFFh +
and eax 3 +
cmp al 2 +
mov eax [esp+38h+arg_C] +
cmovnz esi ebp +
mov eax [eax+50h] +
cmp eax 2 +
jz loc_40CE00  +
mov edx esi +
and edx 0FFFFFFFEh +
cmp eax 3 +
cmovz esi edx +
mov eax [esp+38h+arg_C] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_40CE67  +
movzx ecx byte ptr [eax+18h] +
mov edx esi +
or edx 0FFFFFFF7h +
and edx [eax+14h] +
test cl 4 +
mov [eax+14h] edx +
jnz loc_40CDC6  +
or edx esi +
or ecx 4 +
mov edi [ebx+94h] +
mov [eax+14h] edx +
mov edx ds:dword_514850 +
mov [eax+18h] cl +
mov ecx [edx+4] +
mov ecx [ecx+0B0h] +
mov [esp+38h+var_28] offset word_514820 +
mov [esp+38h+var_2C] eax +
mov [esp+38h+var_30] edx +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] edi +
call ecx  +
test esi 800000h +
jz loc_40CD44  +
mov eax [esp+38h+arg_C] +
mov edx [ebx+78h] +
mov eax [eax+1Ch] +
mov [eax+78h] edx +
and esi 10000000h +
jnz loc_40CE20  +
mov eax [esp+38h+arg_C] +
mov edx [ebx+40h] +
mov eax [eax+1Ch] +
cmp edx [eax+40h] +
jbe loc_40CD62  +
mov [eax+40h] edx +
mov edx ds:dword_50F344 +
mov [ebx+3Ch] eax +
test edx edx +
jnz loc_40CD99  +
mov edx [eax+0A4h] +
mov [eax+0A4h] ebx +
mov dword ptr [ebx+0A0h] 0 +
test edx edx +
mov [ebx+0A4h] edx +
jz loc_40CE5C  +
mov [edx+0A0h] ebx +
mov [esp+38h+var_38] 0Ch +
call sub_40AAA0  +
mov edi [esp+38h+arg_0] +
mov dword ptr [eax+4] 5 +
mov dword ptr [eax] 0 +
mov edx [edi+4] +
mov [edx] eax +
mov [edi+4] eax +
mov [eax+8] ebx +
jmp loc_40CC7F  +
mov ecx esi +
mov edi edx +
and ecx 0FFFFFFF7h +
xor edi ecx +
and edi 1800000h +
jnz loc_40CDE7  +
test esi 800000h +
jz loc_40CE47  +
mov edi [ebx+78h] +
cmp [eax+78h] edi +
jz loc_40CE47  +
and esi 0FE7FFFF7h +
and edx 0FE7FFFFFh +
or edx esi +
mov [eax+14h] edx +
jmp loc_40CD44  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jz loc_40CE4B  +
and esi 0FFFFFFFCh +
or esi 200h +
jmp loc_40CCCF  +
mov eax [ebx+94h] +
mov [esp+38h+var_38] eax +
call sub_4536B0  +
cmp eax 2Dh +
jnz loc_40CD50  +
mov eax [esp+38h+arg_C] +
mov dword ptr [eax+3Ch] 80h +
jmp loc_40CD50  +
mov esi ecx +
jmp loc_40CDF3  +
and esi 0FFFFFEFDh +
or esi 200h +
jmp loc_40CCCF  +
mov [eax+0A0h] ebx +
jmp loc_40CD99  +
mov eax [esp+38h+arg_C] +
mov edx esi +
call sub_40C390  +
mov eax [esp+38h+arg_C] +
mov eax [eax+1Ch] +
jmp loc_40CCDE  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov edx [esp+3Ch+arg_14] +
mov eax [esp+3Ch+arg_8] +
mov edi [esp+3Ch+arg_0] +
call sub_40A640  +
test eax eax +
jz loc_40CEA4  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+0Ch] +
lea esi [edi+18h] +
test eax eax +
jz loc_40D0B0  +
mov ebx [edi+18h] +
test ebx ebx +
jz loc_40D074  +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_20] esi +
add eax 40h +
mov [esp+3Ch+var_24] eax +
jmp loc_40CEDA  +
mov ebx [ebx] +
test ebx ebx +
jz loc_40D070  +
cmp dword ptr [ebx+4] 5 +
jnz loc_40CED0  +
mov ebp [edi+0Ch] +
test ebp ebp +
jz loc_40CF90  +
mov eax [esp+3Ch+arg_10] +
mov eax [eax+10h] +
test eax eax +
jz loc_40D057  +
mov eax [eax+8Ch] +
test eax eax +
jz loc_40D057  +
mov ebp [eax] +
mov [esp+3Ch+var_2C] 1 +
mov eax [ebx+8] +
mov ecx [eax+94h] +
mov eax [ecx+8Ch] +
test eax eax +
jz loc_40D0A0  +
mov esi [eax] +
mov [esp+3Ch+var_28] 1 +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebp +
call sub_4A8B70  +
cmp eax 0 +
jg loc_40CED0  +
jnz loc_40CFD6  +
mov eax [esp+3Ch+var_28] +
or eax [esp+3Ch+var_2C] +
jz loc_40CF90  +
mov ecx [esp+3Ch+var_2C] +
test ecx ecx +
jz loc_40CF63  +
mov eax [esp+3Ch+arg_10] +
mov ebp [eax+8] +
mov edx [esp+3Ch+var_28] +
test edx edx +
jz loc_40CF76  +
mov eax [ebx+8] +
mov eax [eax+94h] +
mov esi [eax] +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebp +
call sub_4A8B70  +
cmp eax 0 +
jg loc_40CED0  +
jnz loc_40CFD6  +
lea esi [esi+0] +
mov esi [esp+3Ch+arg_4] +
test esi esi +
jz loc_40CED0  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_40CED0  +
cmp eax 5 +
jz loc_40CED0  +
mov edx [ebx+8] +
lea ecx [edx+40h] +
mov [esp+3Ch+var_38] ecx +
mov ecx [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] edx +
mov edx [esp+3Ch+arg_8] +
call sub_40A7E0  +
test eax eax +
jns loc_40CED0  +
mov edx [esp+3Ch+arg_14] +
lea eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_3C] eax +
mov esi [esp+3Ch+var_20] +
mov [esp+3Ch+var_10] eax +
mov [esp+3Ch+var_14] 0 +
mov [esp+3Ch+var_30] edx +
mov edx [esp+3Ch+arg_C] +
mov [esp+3Ch+var_34] edx +
mov edx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] edx +
call sub_40CBF0  +
mov eax [esp+3Ch+var_14] +
test eax eax +
jz loc_40CE9C  +
mov eax [eax] +
test eax eax +
jz loc_40D030  +
mov [esp+3Ch+var_38] 0A20h +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_4184A0  +
mov eax [edi+18h] +
cmp ebx eax +
jz loc_40D047  +
test eax eax +
jz loc_40D0D0  +
mov esi [esi] +
mov eax [esi] +
cmp eax ebx +
jnz loc_40D037  +
mov edx [esp+3Ch+var_14] +
mov [edx] eax +
mov [esi] edx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_10] +
mov [esp+3Ch+var_2C] 0 +
mov ebp [eax+8] +
jmp loc_40CF12  +
mov esi [esp+3Ch+var_20] +
mov eax [esp+3Ch+arg_14] +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] eax +
call sub_40CBF0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ecx] +
mov [esp+3Ch+var_28] 0 +
jmp loc_40CF33  +
mov eax [esp+3Ch+arg_4] +
test eax eax +
jz loc_40D074  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_40CEB2  +
jmp loc_40D074  +
mov [esp+3Ch+var_38] 0A25h +
mov [esp+3Ch+var_3C] offset a____Binutils_0 +
call sub_4184A0  +
jmp loc_40D03F  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 10h +
mov edx [edx+4] +
test edx edx +
jz loc_40D108  +
call sub_40D0F0  +
mov eax [ebx] +
mov [esp+18h+var_C] edi +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] eax +
lea eax [esi+18h] +
mov [esp+18h+var_18] eax +
call sub_40CBF0  +
mov edx [ebx+8] +
test edx edx +
jz loc_40D135  +
mov ecx edi +
mov eax esi +
call sub_40D0F0  +
mov [esp+18h+var_18] ebx +
call free  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+30h] +
cmp byte ptr [esi] 0 +
jnz loc_40D1BA  +
jmp loc_40D1E0  +
mov dword ptr [esp] 8 +
mov edi ebx +
call sub_4A05F0  +
sub edi esi +
mov ebp eax +
mov eax ds:dword_50F2C0 +
mov [ebp+4] eax +
lea eax [edi+1] +
mov [esp] eax +
call sub_4A05F0  +
mov [ebp+0] eax +
mov [esp+8] edi +
mov [esp+4] esi +
mov [esp] eax +
mov [esp+0Ch] eax +
call memcpy  +
mov edx [esp+0Ch] +
mov ds:dword_50F2C0 ebp +
mov byte ptr [edx+edi] 0 +
cmp byte ptr [ebx] 0 +
jz loc_40D1E0  +
cmp byte ptr [ebx+1] 0 +
lea esi [ebx+1] +
jz loc_40D1E0  +
mov dword ptr [esp+4] offset asc_4D1573 +
mov [esp] esi +
call strpbrk  +
test eax eax +
mov ebx eax +
jnz loc_40D162  +
mov [esp] esi +
call strlen  +
lea ebx [esi+eax] +
jmp loc_40D162  +
***
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax ds:dword_5146DC +
test eax eax +
jz loc_40D202  +
add esp 18h +
pop ebx  +
retn   +
mov eax ds:dword_50F330 +
mov edx ds:dword_51479C +
cmp eax edx +
jz loc_40D215  +
test eax eax +
jnz loc_40D1FD  +
mov ebx ds:dword_50F27C +
test ebx ebx +
jnz loc_40D228  +
jmp loc_40D26C  +
mov ebx [ebx+18h] +
test ebx ebx +
jz loc_40D265  +
cmp dword ptr [ebx+4] 2 +
jnz loc_40D221  +
test byte ptr [ebx+25h] 4 +
jz loc_40D221  +
mov [esp+18h+var_18] ebx +
call sub_418FC0  +
mov eax [ebx+10h] +
test eax eax +
jz loc_40D221  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] eax +
call sub_454030  +
test eax eax +
jz loc_40D221  +
mov eax [ebx+10h] +
mov eax [eax+4] +
mov eax [eax] +
test eax eax +
jz loc_40D221  +
jmp loc_40D1FD  +
mov eax ds:dword_51479C +
jmp loc_40D1FD  +
mov eax edx +
nop   +
jmp loc_40D1FD  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+4] +
cmp eax 0Ah +
jz loc_40D411  +
cmp eax 0Bh +
jnz loc_40D40C  +
mov ecx ds:dword_514850 +
test ecx ecx +
jz loc_40D2BB  +
mov [esp+18h+var_14] 0C71h +
mov [esp+18h+var_18] offset a____Binutils_0 +
call sub_4184A0  +
mov ebx [ebx+8] +
call sub_40D1F0  +
mov edx ds:dword_5147CC +
test edx edx +
mov ds:dword_5146DC eax +
jnz loc_40D470  +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] ebx +
call sub_458680  +
test eax eax +
mov ds:dword_514850 eax +
jz loc_40D503  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] eax +
mov ds:dword_50F264 1 +
call sub_454060  +
test eax eax +
jz loc_40D455  +
mov eax ds:dword_514850 +
mov ecx ds:dword_514918 +
mov edx [eax+4] +
mov edx [edx+150h] +
mov [esp+18h+var_10] ecx +
mov ecx ds:dword_51491C +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] ecx +
call edx  +
test eax eax +
jz loc_40D440  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
mov edx [edx+164h] +
mov [esp+18h+var_18] eax +
call edx  +
test eax eax +
mov ds:dword_51483C eax +
jz loc_40D4F2  +
mov eax dword_4BE09C +
mov [esp+18h+var_14] eax +
mov eax ds:dword_514850 +
mov [esp+18h+var_18] eax +
call sub_44C180  +
call sub_4174F0  +
mov ebx ds:dword_514720 +
mov edx ds:dword_514850 +
test ebx ebx +
mov ecx [edx+28h] +
jz loc_40D3B0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_40D3B0  +
mov eax ecx +
shr eax 5 +
and eax 3FFFFh +
or ah 1 +
jmp loc_40D3BA  +
mov eax ecx +
shr eax 5 +
and eax 3FEFFh +
mov ebx eax +
and ecx 0FF80001Fh +
shl ebx 5 +
or ecx ebx +
mov [edx+28h] ecx +
mov ecx ds:dword_514750 +
test ecx ecx +
jnz loc_40D420  +
and eax 3FF7Fh +
mov ebx eax +
mov ecx eax +
mov eax [edx+28h] +
shl ebx 5 +
and eax 0FF80001Fh +
or eax ebx +
mov [edx+28h] eax +
test ds:byte_514824 1 +
jz loc_40D424  +
or ch 4 +
and eax 0FF80001Fh +
and ecx 3FFFFh +
shl ecx 5 +
or eax ecx +
mov [edx+28h] eax +
add esp 18h +
pop ebx  +
retn   +
mov eax [ebx+8] +
mov ds:dword_50F330 eax +
add esp 18h +
pop ebx  +
retn   +
or al 80h +
jmp loc_40D3D9  +
and ecx 3FBFFh +
and eax 0FF80001Fh +
shl ecx 5 +
or eax ecx +
mov [edx+28h] eax +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] offset aPFSCanNotSetAr +
call sub_418450  +
jmp loc_40D340  +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] offset aPFSCanNotMakeO +
call sub_418450  +
jmp loc_40D311  +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] offset sub_4081C0 +
call sub_44D140  +
test eax eax +
jz loc_40D4E8  +
xor edx edx +
cmp ds:dword_5147CC 1 +
setnz dl  +
cmp [eax+8] edx +
jz loc_40D4E8  +
mov ecx [eax+1ACh] +
test ecx ecx +
jz loc_40D4A4  +
cmp [ecx+8] edx +
jz loc_40D4D0  +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] offset loc_409C10 +
call sub_44D140  +
mov eax ds:dword_50F2BC +
test eax eax +
jz loc_40D4DC  +
mov eax [eax] +
mov ds:dword_5146DC eax +
jmp loc_40D2D6  +
mov eax [ecx] +
mov ds:dword_5146DC eax +
jmp loc_40D2D6  +
mov [esp+18h+var_18] offset aPWarningCouldN +
call sub_418450  +
mov eax ds:dword_5146DC +
jmp loc_40D2D6  +
mov [esp+18h+var_18] offset aPFCanNotCreate +
call sub_418450  +
jmp loc_40D360  +
call sub_44B8A0  +
cmp eax 2 +
nop   +
lea esi [esi+0] +
jz loc_40D52C  +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] offset aPFCannotOpenOu +
call sub_418450  +
mov eax ds:dword_514850 +
jmp loc_40D2EF  +
mov eax ds:dword_5146DC +
mov [esp+18h+var_18] offset aPFTargetSNotFo +
mov [esp+18h+var_14] eax +
call sub_418450  +
jmp loc_40D512  +
***
sub esp 14h +
mov eax [esp+14h+arg_4] +
or eax ds:dword_514708 +
mov [esp+14h+var_14] 8 +
mov esi [esp+14h+arg_0] +
setnz al  +
movzx eax al +
mov ds:dword_514708 eax +
call sub_40AAA0  +
mov ebx eax +
mov eax ds:dword_50F274 +
mov [ebx] eax +
mov [esp+14h+var_14] esi +
mov ds:dword_50F274 ebx +
call sub_4A06C0  +
mov edx ds:dword_514850 +
test edx edx +
mov [ebx+4] eax +
jz loc_40D5A8  +
add esp 14h +
pop ebx  +
pop esi  +
jmp sub_408750  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov [esp+14h+var_10] 1 +
mov [esp+14h+var_14] esi +
call sub_40D550  +
mov [esp+14h+var_14] 8 +
call sub_40AAA0  +
mov ebx eax +
mov eax ds:dword_50F2B0 +
mov [ebx+4] eax +
mov [esp+14h+var_14] esi +
call _strdup  +
mov ds:dword_50F2B0 ebx +
mov [ebx] eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov ecx ds:dword_50F344 +
test ecx ecx +
jnz locret_40D647  +
mov eax ds:dword_5146F8 +
test eax eax +
jz loc_40D63C  +
mov edx [eax+48h] +
test edx edx +
js loc_40D635  +
mov edx [eax+1Ch] +
test edx edx +
jz loc_40D635  +
mov dword ptr [edx+0A0h] 0 +
mov dword ptr [edx+0A4h] 0 +
mov eax [eax+10h] +
test eax eax +
jnz loc_40D613  +
mov ds:dword_50F344 1 +
retn   +
retn   +
***
push edi  +
mov eax ds:_iob +
push esi  +
mov edi ds:dword_514770 +
push ebx  +
mov esi [esp+14h] +
mov ebx [esp+10h] +
add eax 40h +
mov ds:dword_514770 eax +
test esi esi +
jns loc_40D68B  +
jmp loc_40D699  +
sub esi 1 +
cmp esi 0FFFFFFFFh +
jz loc_40D68F  +
mov edx ds:dword_5146D8 +
mov eax ebx +
call sub_409370  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40D674  +
pop ebx  +
mov ds:dword_514770 edi +
pop esi  +
pop edi  +
retn   +
***
test ebx ebx +
mov esi ds:dword_5146D8 +
jz loc_40D68F  +
mov eax ebx +
mov edx esi +
call sub_409370  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40D6A3  +
pop ebx  +
mov ds:dword_514770 edi +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 14h +
mov esi [esp+14h+arg_10] +
mov edx [esp+14h+arg_8] +
mov ebx [esp+14h+arg_C] +
test esi esi +
jnz loc_40D741  +
test edx edx +
jz loc_40D747  +
test ebx ebx +
jz loc_40D747  +
mov ecx ds:dword_514764 +
test ecx ecx +
jz loc_40D6F7  +
mov ecx [ebx+14h] +
xor ecx [edx+14h] +
and ecx 10h +
jnz loc_40D741  +
mov eax [edx] +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] eax +
call sub_40C0C0  +
mov esi eax +
mov eax [ebx] +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] eax +
call sub_40C0C0  +
test eax eax +
jz loc_40D747  +
test esi esi +
jz loc_40D747  +
mov eax [eax+20h] +
cmp [esi+20h] eax +
setnz al  +
movzx eax al +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov edx ds:dword_5146D8 +
xor ecx ecx +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] 0 +
add ds:dword_50F260 1 +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] eax +
mov eax offset dword_50F328 +
call sub_40B290  +
add esp 1Ch +
retn   +
***
sub esp 2Ch +
mov edx ds:dword_5146D8 +
xor ecx ecx +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_10] 0 +
mov ds:dword_50F2AC 0 +
mov ds:dword_5148C0 eax +
lea eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_50F328 +
mov ds:dword_50F2A4 0 +
add ds:dword_50F260 1 +
call sub_408380  +
add esp 2Ch +
retn   +
***
push ebx  +
test esi esi +
jz loc_40D80A  +
mov ecx ds:dword_50F2A4 +
test ecx ecx +
jz loc_40D8A0  +
mov eax ds:dword_50F2A8 +
test eax eax +
jnz loc_40D81B  +
jmp loc_40D822  +
mov eax [eax] +
test eax eax +
jz loc_40D822  +
mov edx [eax+4] +
test edx edx +
jnz loc_40D815  +
test eax eax +
mov ebx ds:dword_514850 +
jz loc_40D907  +
test byte ptr [eax+54h] 20h +
jnz loc_40D870  +
mov ebx ds:dword_514850 +
jmp loc_40D856  +
cmp edx [ecx+10h] +
jz loc_40D870  +
mov eax [eax+10h] +
test eax eax +
jz loc_40D907  +
test byte ptr [eax+54h] 20h +
jnz loc_40D870  +
mov edx [eax+1Ch] +
test edx edx +
jz loc_40D845  +
test byte ptr [edx+15h] 80h +
jnz loc_40D845  +
mov ecx [edx+0Ch] +
test ecx ecx +
jnz loc_40D840  +
cmp edx [ebx+68h] +
jnz loc_40D845  +
nop   +
test esi esi +
jz loc_40D87A  +
test byte ptr [eax+54h] 20h +
jnz loc_40D8A0  +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_40D88A  +
jmp loc_40D8E0  +
mov eax [eax+10h] +
test eax eax +
jz loc_40D8E0  +
mov edx [eax+14h] +
and edx 401h +
cmp edx 1 +
jnz loc_40D883  +
pop ebx  +
pop esi  +
retn   +
mov eax [esi+1Ch] +
mov ebx ds:dword_514850 +
test eax eax +
jnz loc_40D8B7  +
jmp loc_40D8D8  +
mov eax [eax+10h] +
test eax eax +
jz loc_40D8D8  +
mov edx [eax+14h] +
and edx 8401h +
cmp edx 1 +
jnz loc_40D8B0  +
mov edx [eax+0Ch] +
test edx edx +
jz loc_40D900  +
cmp [edx+10h] eax +
jz loc_40D8EF  +
mov eax [eax+10h] +
test eax eax +
jnz loc_40D8B7  +
mov eax [ebx+64h] +
test eax eax +
jnz loc_40D8EF  +
nop   +
mov eax offset off_4BFB90 +
pop ebx  +
pop esi  +
retn   +
mov eax [eax+0Ch] +
test eax eax +
jz loc_40D8E0  +
mov edx [eax+14h] +
and edx 401h +
cmp edx 1 +
jnz loc_40D8E8  +
pop ebx  +
pop esi  +
retn   +
cmp [ebx+68h] eax +
jnz loc_40D8B0  +
jmp loc_40D8EF  +
mov eax [ebx+68h] +
jmp loc_40D87D  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_8] +
mov ebx [esp+1Ch+arg_4] +
lea eax [esi+24h] +
test ebp ebp +
lea edi [esi+28h] +
cmovz edi eax +
movsx eax byte ptr [ebx] +
test al al +
jz loc_40D95A  +
lea edx [eax-21h] +
cmp dl 57h +
ja loc_40D990  +
movzx edx dl +
jmp ds:off_4D1684[edx*4]  +
or dword ptr [edi] 10h +
lea esi [esi+0] +
add ebx 1 +
movsx eax byte ptr [ebx] +
test al al +
jnz loc_40D935  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
or dword ptr [edi] 20h +
jmp loc_40D950  +
or dword ptr [edi] 8 +
jmp loc_40D950  +
or dword ptr [edi] 2 +
jmp loc_40D950  +
or dword ptr [edi] 1 +
jmp loc_40D950  +
test ebp ebp +
jnz loc_40D9A6  +
lea edi [esi+28h] +
mov bp 1 +
jmp loc_40D950  +
mov [esp+1Ch+var_14] eax +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] offset aPFInvalidChara +
call sub_418450  +
jmp loc_40D950  +
lea edi [esi+24h] +
xor ebp ebp +
jmp loc_40D950  +
***
sub esp 14h +
mov ebx ds:dword_514700 +
mov esi [esp+14h+arg_0] +
test ebx ebx +
jz loc_40D9CF  +
mov [esp+14h+var_14] ebx +
call esi  +
mov ebx [ebx+1Ch] +
test ebx ebx +
jnz loc_40D9C3  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
mov ebx ds:dword_50F27C +
mov esi [esp+14h+arg_0] +
test ebx ebx +
jz loc_40D9FF  +
mov [esp+14h+var_14] ebx +
call esi  +
mov ebx [ebx+18h] +
test ebx ebx +
jnz loc_40D9F3  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax ds:dword_50F280 +
mov ebx [esp+18h+arg_0] +
mov [eax] ebx +
lea eax [ebx+18h] +
mov ds:dword_50F280 eax +
mov eax [ebx+10h] +
mov edx [eax+9Ch] +
test edx edx +
jz loc_40DA4B  +
mov [esp+18h+var_14] 189Bh +
mov [esp+18h+var_18] offset a____Binutils_0 +
call sub_4184A0  +
mov eax [ebx+10h] +
cmp ds:dword_514850 eax +
jz loc_40DAA0  +
mov edx ds:dword_514858 +
mov [edx] eax +
mov eax [ebx+10h] +
lea edx [eax+9Ch] +
mov ds:dword_514858 edx +
mov edx dword_4BE09C +
mov [eax+0A4h] ebx +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] edx +
call sub_44C180  +
mov eax [ebx+10h] +
mov [esp+18h+var_10] ebx +
mov [esp+18h+var_14] offset dword_408E40 +
mov [esp+18h+var_18] eax +
call sub_44DAD0  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] 189Ch +
mov [esp+18h+var_18] offset a____Binutils_0 +
call sub_4184A0  +
mov eax [ebx+10h] +
jmp loc_40DA53  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx ds:dword_514700 +
test ebx ebx +
jz loc_40E0BF  +
mov edx [ebx+0Ch] +
test edx edx +
jz loc_40E0B8  +
mov [esp+18h+var_14] esi +
mov [esp+18h+var_18] edx +
call sub_4A8B70  +
test eax eax +
jz loc_40E0DA  +
mov ebx [ebx+1Ch] +
test ebx ebx +
jnz loc_40E0A1  +
mov ecx ds:dword_51479C +
mov edx 4 +
mov eax esi +
mov [esp+18h+var_18] 0 +
call sub_40AD10  +
mov ebx eax +
movzx edx byte ptr [ebx+25h] +
and edx 6 +
cmp dl 4 +
jz loc_40E0F0  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] 0 +
call sub_40DAC0  +
test eax eax +
mov eax 0 +
cmovz ebx eax +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
sub esp 8 +
push ebx  +
mov ebx eax +
sub esp 4 +
test eax eax +
jnz loc_40E2C0  +
jmp loc_40E2D8  +
cmp eax 0Fh +
jz loc_40E300  +
cmp eax 4 +
jz loc_40E2E0  +
mov ebx [ebx] +
test ebx ebx +
jz loc_40E2D8  +
mov eax [ebx+4] +
cmp eax 0Dh +
jnz loc_40E2B0  +
mov eax [ebx+8] +
mov edx esi +
call sub_40E2A0  +
test byte ptr [esi+54h] 4 +
jnz loc_40E2BA  +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
mov ecx esi +
mov edx offset sub_40A6E0 +
mov eax ebx +
call sub_40E120  +
test byte ptr [esi+54h] 4 +
jnz loc_40E2BA  +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_514710 +
mov edx esi +
call sub_40E2A0  +
test byte ptr [esi+54h] 4 +
jnz loc_40E2BA  +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
test eax eax +
mov [esp+28h+var_1C] edx +
jz loc_40E359  +
cmp dword ptr [ebx+4] 0Fh +
ja loc_40E353  +
mov eax [ebx+4] +
jmp ds:off_4D18AC[eax*4]  +
mov edx [esp+28h+var_1C] +
mov ecx ebp +
mov eax ds:dword_514710 +
call sub_40E320  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40E333  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+28h+var_1C] eax +
jmp loc_40E353  +
mov eax [ebx+0Ch] +
call sub_40C300  +
mov eax [ebp+50h] +
cmp eax 2 +
jz loc_40E504  +
xor edx edx +
cmp eax 3 +
setnz dl  +
lea edx [edx+edx*2+100h] +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_40E4F8  +
or [eax+14h] edx +
jmp loc_40E353  +
mov eax [ebx+8] +
mov ecx ebp +
mov edx [esp+28h+var_1C] +
call sub_40E320  +
jmp loc_40E353  +
mov eax [ebx+24h] +
test eax eax +
jz loc_40E3C6  +
cmp dword ptr [eax+0Ch] 1 +
nop   +
jz loc_40E535  +
mov ecx ebp +
mov edx offset sub_40CE80 +
mov eax ebx +
call sub_40E120  +
mov eax ds:dword_50F340 +
test eax eax +
jnz loc_40E353  +
mov eax [ebx+10h] +
test eax eax +
jnz loc_40E3FA  +
jmp loc_40E353  +
mov eax [eax] +
test eax eax +
jz loc_40E353  +
mov esi [eax+4] +
test esi esi +
nop   +
jz loc_40E3F0  +
mov edi offset aCommon +
mov ecx 7 +
cmps   +
jnz loc_40E3F0  +
mov ds:dword_50F340 ebp +
jmp loc_40E353  +
test ebp ebp +
jz loc_40E42F  +
mov esi [ebp+1Ch] +
test esi esi +
jz loc_40E56E  +
mov eax [ebx+8] +
call sub_40C300  +
jmp loc_40E353  +
mov eax [ebx+48h] +
test eax eax +
jz loc_40E522  +
sub eax 17Ah +
cmp eax 1 +
ja loc_40E353  +
or byte ptr [ebx+54h] 4 +
mov edx ebx +
mov eax [ebx+8] +
call sub_40E2A0  +
movzx eax byte ptr [ebx+54h] +
xor edx edx +
shr al 2 +
and eax 1 +
cmp dword ptr [ebx+48h] 17Ah +
setz dl  +
cmp eax edx +
jz loc_40E522  +
mov dword ptr [ebx+48h] 0FFFFFFFFh +
jmp loc_40E353  +
mov eax [ebx+10h] +
test eax eax +
jz loc_40E4A3  +
mov ecx [eax+0Ch] +
test ecx ecx +
jnz loc_40E353  +
mov eax [ebx+8] +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] 0 +
mov [esp+28h+var_28] eax +
call sub_40C0C0  +
mov edx [ebx+0Ch] +
mov [eax+2Ch] edx +
mov edx [eax+1Ch] +
test edx edx +
jnz loc_40E353  +
xor edx edx +
call sub_40C390  +
jmp loc_40E353  +
test ebp ebp +
jz loc_40E353  +
mov edi [ebp+1Ch] +
test edi edi +
lea esi [esi+0] +
jnz loc_40E353  +
xor edx edx +
mov eax ebp +
call sub_40C390  +
jmp loc_40E353  +
mov eax ds:dword_514850 +
mov edx 201h +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
mov eax 300h +
cmovnz edx eax +
jmp loc_40E393  +
mov eax [ebx+8] +
mov ecx ebx +
mov edx [esp+28h+var_1C] +
call sub_40E320  +
jmp loc_40E353  +
mov eax [ebx+0Ch] +
test eax eax +
jnz loc_40E3C6  +
mov edx offset sub_40A890 +
mov ecx ebp +
mov eax ebx +
call sub_40E120  +
mov edx [ebx+34h] +
test edx edx +
jz loc_40E3D4  +
mov ecx ebp +
mov eax ebx +
call sub_40D0F0  +
mov dword ptr [ebx+34h] 0 +
jmp loc_40E3D4  +
xor edx edx +
mov eax ebp +
call sub_40C390  +
jmp loc_40E42F  +
***
push ebx  +
sub esp 4 +
mov edx [edx] +
test edx edx +
jnz loc_40E5E2  +
test eax eax +
mov ebx eax +
jz loc_40E5E2  +
cmp eax ds:dword_514910 +
jnz loc_40E5C4  +
jmp loc_40E5E2  +
cmp eax 0Dh +
jz loc_40E5D2  +
cmp eax 0Fh +
jnz loc_40E5B6  +
mov eax ds:dword_514710 +
mov edx esi +
call sub_40E580  +
mov ebx [ebx] +
test ebx ebx +
jz loc_40E5E2  +
cmp ds:dword_514910 ebx +
jz loc_40E5E2  +
mov eax [ebx+4] +
cmp eax 4 +
jz loc_40E5E8  +
ja loc_40E5A0  +
test eax eax +
jnz loc_40E5B6  +
mov eax [ebx+8] +
mov edx esi +
call sub_40E580  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_40E5BC  +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
mov ecx esi +
mov edx offset dword_408EA0 +
mov eax ebx +
call sub_40E120  +
jmp loc_40E5B6  +
***
push edi  +
mov eax edx +
push esi  +
and eax 2 +
push ebx  +
mov edi edx +
sub esp 2Ch +
test ebp ebp +
mov [esp+38h+var_2C] eax +
jz loc_40E63B  +
cmp dword ptr [ebp+4] 0Fh +
ja loc_40E634  +
mov eax [ebp+4] +
jmp ds:off_4D1930[eax*4]  +
mov eax ds:dword_514710 +
mov edx edi +
call sub_40E600  +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_40E618  +
test byte ptr ds:dword_5146EC+1 8 +
jz loc_40E650  +
mov [esp+38h+var_38] offset aF_1 +
call sub_418450  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_51483C +
mov esi edi +
or esi 1 +
mov ebx [eax+20h] +
jmp loc_40E669  +
mov ebx eax +
mov eax [ebp+8] +
mov edx esi +
call sub_40E600  +
mov eax ds:dword_51483C +
mov eax [eax+20h] +
cmp eax ebx +
jnz loc_40E667  +
jmp loc_40E634  +
mov eax [ebp+8] +
mov ds:dword_50F330 eax +
jmp loc_40E634  +
mov eax [ebp+8] +
mov edx [eax+18h] +
test edx edx +
jz loc_40E634  +
mov [esp+38h+var_38] eax +
call sub_416970  +
jmp loc_40E634  +
mov eax [ebp+8] +
mov edx edi +
call sub_40E600  +
nop   +
jmp loc_40E634  +
mov eax [esp+38h+var_2C] +
test eax eax +
jnz loc_40E6D9  +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_40E6D9  +
mov [esp+38h+var_34] offset a?_0 +
mov [esp+38h+var_38] ebx +
call strpbrk  +
test eax eax +
jz loc_40E7F5  +
mov eax [ebp+18h] +
mov edx edi +
call sub_40E600  +
jmp loc_40E634  +
movzx eax byte ptr [ebp+25h] +
test al 4 +
jz loc_40E794  +
mov edx ds:dword_50F330 +
test edi edi +
mov [ebp+20h] edx +
jz loc_40E731  +
mov esi [esp+38h+var_2C] +
test esi esi +
jnz loc_40E7E0  +
test al 2 +
jz loc_40E731  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_40E731  +
movzx edx byte ptr [ebx+28h] +
and edx 7 +
cmp dl 2 +
jz loc_40E85B  +
cmp dl 1 +
jz loc_40E815  +
lea eax [esp+38h+var_20] +
mov ebx ds:dword_5146FC +
mov [esp+38h+var_34] eax +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_20] 0 +
mov [esp+38h+var_1C] eax +
call sub_40DAC0  +
test eax eax +
jz loc_40E7B0  +
mov ecx [esp+38h+var_20] +
test ecx ecx +
jz loc_40E794  +
cmp ds:dword_5146FC ebx +
jz loc_40E7C0  +
mov eax [ebp+8] +
mov [esp+38h+var_38] offset aPWarningSConta +
mov [esp+38h+var_34] eax +
call sub_418450  +
mov eax off_4BE018 +
mov edx [esp+38h+var_20] +
mov eax [eax+4] +
mov [eax] edx +
mov eax off_4BE018 +
mov edx [esp+38h+var_1C] +
mov [eax+4] edx +
cmp ds:dword_50F2B4 ebp +
jnz loc_40E634  +
mov ds:dword_50F2B4 0 +
jmp loc_40E634  +
mov ds:dword_514724 0 +
jmp loc_40E757  +
mov eax [esp+38h+var_1C] +
mov edx [ebp+0] +
cmp ds:dword_50F2B4 ebp +
mov [eax] edx +
mov eax [esp+38h+var_20] +
mov [ebp+0] eax +
jnz loc_40E634  +
jmp loc_40E7A0  +
mov ebx ds:dword_50F2B4 +
test ebx ebx +
jnz loc_40E731  +
nop   +
jmp loc_40E70D  +
mov eax ebx +
call sub_408AA0  +
test eax eax +
nop   +
jnz loc_40E6D9  +
mov eax ebx +
call sub_40E090  +
lea esi [esi+0] +
jmp loc_40E6D9  +
test byte ptr [ebx+29h] 8 +
jz loc_40E731  +
cmp byte ptr [ebp+24h] 0 +
jns loc_40E731  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_40E731  +
mov eax [ebx+0A0h] +
test byte ptr [eax+924h] 1 +
jz loc_40E731  +
movzx eax byte ptr [ebp+25h] +
and eax 0FFFFFFFDh +
or eax 10h +
mov [ebp+25h] al +
jmp loc_40E731  +
test al 1 +
jz loc_40E849  +
jmp loc_40E731  +
***
mov edx ds:dword_50F26C +
test edx edx +
jz loc_40E882  +
mov eax [esp+arg_4] +
test eax eax +
jnz locret_40E895  +
mov eax [esp+arg_0] +
mov ds:dword_50F26C 1 +
mov off_4BE0A0 eax +
retn   +
***
push ebx  +
sub esp 10h +
mov eax [esp+10h+arg_18] +
mov [esp+10h+var_8] 1 +
mov edi [esp+10h+arg_8] +
mov esi [esp+10h+arg_C] +
mov [esp+10h+var_C] eax +
mov eax [esp+10h+arg_0] +
mov [esp+10h+var_10] eax +
call sub_40C0C0  +
mov ebx eax +
mov ds:dword_50F2AC eax +
mov eax [eax+2Ch] +
test eax eax +
jz loc_40E9D7  +
mov edx 200h +
xor eax eax +
cmp edi 2 +
cmovz eax edx +
mov [ebx+4Ch] eax +
lea eax [ebx+8] +
mov [ebx+50h] edi +
mov dword ptr [ebx+3Ch] 1 +
mov [esp+10h+var_10] eax +
call sub_40B000  +
movzx eax byte ptr [ebx+54h] +
cmp [esp+10h+arg_1C] 17Eh +
setz dl  +
and eax 0FFFFFFBFh +
shl edx 6 +
or eax edx +
test al 40h +
mov [ebx+54h] al +
jz loc_40E937  +
test esi esi +
jz loc_40E937  +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] offset aFPSErrorAlignW +
call sub_418450  +
mov eax [esp+10h+arg_10] +
mov [esp+10h+var_8] offset aSubsectionAlig +
mov [esp+10h+var_C] 0FFFFFFFFh +
mov [esp+10h+var_10] eax +
call sub_417200  +
mov ecx 0FFFFFFFFh +
test eax eax +
js loc_40E973  +
xor ecx ecx +
mov edx 1 +
jmp loc_40E96F  +
add ecx 1 +
add edx edx +
cmp ecx 20h +
jz loc_40E9C5  +
cmp edx eax +
jb loc_40E965  +
mov [ebx+40h] ecx +
mov [esp+10h+var_8] offset aSectionAlignme +
mov [esp+10h+var_C] 0FFFFFFFFh +
mov [esp+10h+var_10] esi +
call sub_417200  +
test eax eax +
js loc_40E9D0  +
xor edx edx +
mov ecx 1 +
jmp loc_40E9AA  +
add edx 1 +
add ecx ecx +
cmp edx 20h +
jz loc_40E9C1  +
cmp ecx eax +
jb loc_40E9A0  +
mov eax [esp+10h+arg_14] +
mov [ebx+44h] edx +
mov [ebx+30h] eax +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor edx edx +
jmp loc_40E9AE  +
xor ecx ecx +
jmp loc_40E973  +
mov edx 0FFFFFFFFh +
jmp loc_40E9AE  +
mov eax [esp+10h+arg_4] +
mov [ebx+2Ch] eax +
jmp loc_40E8DC  +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 0Ch +
call sub_40AAA0  +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0Bh +
mov edx [ebx+4] +
mov [edx] eax +
mov edx off_4BE0A0 +
mov [ebx+4] eax +
mov [eax+8] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov eax ds:dword_50F2C4 +
test eax eax +
jz loc_40EA54  +
lea esi [esi+0] +
mov edx [eax+10h] +
mov dword ptr [eax+20h] 0 +
mov [eax+1Ch] edx +
mov eax [eax+8] +
test eax eax +
jnz loc_40EA40  +
mov eax ds:dword_5146F8 +
test eax eax +
jz loc_40EA6B  +
lea esi [esi+0] +
and byte ptr [eax+54h] 0FCh +
mov eax [eax+10h] +
test eax eax +
jnz loc_40EA60  +
mov eax ds:dword_514850 +
mov eax [eax+64h] +
test eax eax +
jz locret_40EA8D  +
mov edx [eax+24h] +
mov dword ptr [eax+24h] 0 +
mov [eax+28h] edx +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_40EA77  +
retn   +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
cmp ds:dword_5148C0 1 +
jz loc_40EACD  +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
mov ds:dword_5148C0 1 +
mov ds:dword_5148EC 0 +
call sub_40D750  +
call sub_40EA30  +
mov ecx ds:dword_5146F8 +
movzx esi ds:byte_514822 +
mov eax ds:dword_514850 +
and esi 0FFFFFF80h +
test ecx ecx +
mov [esp+1Ch+var_10] eax +
jz loc_40EB27  +
lea esi [esi+0] +
mov edx [ecx+48h] +
test edx edx +
js loc_40EB20  +
mov ebx [ecx+1Ch] +
test ebx ebx +
jz loc_40EB20  +
mov eax [ebx+28h] +
test eax eax +
jnz loc_40EB20  +
mov ebp [ebx+14h] +
test ebp 200000h +
jnz loc_40EB20  +
mov edi [ebx+0Ch] +
test edi edi +
jz loc_40EB2F  +
cmp [edi+10h] ebx +
jz loc_40EB38  +
lea esi [esi+0] +
mov ecx [ecx+10h] +
test ecx ecx +
jnz loc_40EAF0  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+1Ch+var_10] +
cmp [eax+68h] ebx +
jnz loc_40EB20  +
mov eax [ebx+0A0h] +
test eax eax +
jz loc_40EB6C  +
mov edx esi +
mov esi ebx +
mov ebx edx +
mov edx [eax+14h] +
test dh 80h +
jnz loc_40EB5C  +
and edx 100000h +
jnz loc_40EBA0  +
test bl bl +
jnz loc_40EBA0  +
mov eax [eax+0A0h] +
test eax eax +
jnz loc_40EB48  +
mov eax ebx +
mov ebx esi +
mov esi eax +
movzx eax byte ptr [ecx+54h] +
test al 10h +
jnz loc_40EB7A  +
or eax 8 +
mov [ecx+54h] al +
mov eax [ebx+10h] +
or ebp 8000h +
mov [ebx+14h] ebp +
test eax eax +
jz loc_40EBB0  +
mov [eax+0Ch] edi +
test edi edi +
jz loc_40EBA7  +
mov [edi+10h] eax +
mov eax [esp+1Ch+var_10] +
sub dword ptr [eax+6Ch] 1 +
jmp loc_40EB20  +
mov esi ebx +
jmp loc_40EB20  +
mov edi [esp+1Ch+var_10] +
mov [edi+68h] eax +
jmp loc_40EB94  +
mov ebx [esp+1Ch+var_10] +
mov [ebx+64h] edi +
jmp loc_40EB8D  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_4] +
mov ds:dword_5148C0 2 +
mov ds:dword_5148EC 0 +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] ebx +
call sub_40D750  +
cmp ds:dword_5148EC 3 +
jz loc_40EC10  +
mov ds:dword_5148EC 6 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ds:byte_514823 1 +
jz loc_40ED00  +
mov edx ds:dword_5148F8 +
test edx edx +
jz loc_40ED00  +
mov eax ds:dword_514900 +
mov ecx ds:dword_5148F4 +
mov edi ds:dword_5148F0 +
lea esi [edx+eax-1] +
neg eax  +
mov [esp+2Ch+var_14] esi +
sub edx ecx +
and [esp+2Ch+var_14] eax +
mov eax ds:dword_514850 +
mov esi [esp+2Ch+var_14] +
mov [esp+2Ch+var_18] edi +
mov [esp+2Ch+var_10] edx +
mov eax [eax+68h] +
sub esi ecx +
test eax eax +
jz loc_40ECAE  +
mov edi [eax+14h] +
test edi 1 +
jz loc_40ECA7  +
mov edx [eax+1Ch] +
cmp edx [esp+2Ch+var_18] +
jb loc_40ECA7  +
cmp edx [esp+2Ch+var_10] +
jnb loc_40ECA7  +
and edi 500h +
mov ecx edx +
cmp edi 400h +
jz loc_40EC93  +
add ecx [eax+24h] +
add esi edx +
mov edi 1 +
sub esi ecx +
mov ecx [eax+40h] +
shl edi cl +
mov ecx edi +
neg ecx  +
and esi ecx +
mov eax [eax+10h] +
test eax eax +
jnz loc_40EC66  +
cmp esi [esp+2Ch+var_18] +
mov ds:dword_5148EC 4 +
jb loc_40ED94  +
mov ds:dword_5148F0 esi +
call sub_40EA30  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] ebp +
call sub_40D750  +
mov eax ds:dword_5148F8 +
cmp [esp+2Ch+var_14] eax +
jb loc_40ED70  +
mov edx ds:dword_5148F0 +
mov ds:dword_514894 eax +
mov ds:dword_514890 edx +
jmp loc_40EC02  +
mov eax ds:dword_514900 +
mov esi ds:dword_5148F0 +
mov edi ds:dword_5148FC +
mov [esp+2Ch+var_18] eax +
sub eax 1 +
mov edx esi +
mov ecx eax +
neg edx  +
and ecx edi +
and eax edx +
jz loc_40EBF8  +
test ecx ecx +
jz loc_40EBF8  +
mov edx [esp+2Ch+var_18] +
xor esi edi +
neg edx  +
test esi edx +
jz loc_40EBF8  +
add eax ecx +
cmp [esp+2Ch+var_18] eax +
jb loc_40EBF8  +
mov ds:dword_5148EC 5 +
call sub_40EA30  +
mov [esp+2Ch+arg_4] ebx +
mov [esp+2Ch+arg_0] ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_40D750  +
mov eax [esp+2Ch+var_18] +
mov ds:dword_5148F0 eax +
call sub_40EA30  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] ebp +
call sub_40D750  +
mov eax ds:dword_5148F8 +
jmp loc_40ECE8  +
mov [esp+2Ch+var_28] 156Ah +
mov [esp+2Ch+var_2C] offset a____Binutils_0 +
call sub_4184A0  +
mov eax ds:dword_5148F0 +
mov [esp+2Ch+var_18] eax +
jmp loc_40ECC2  +
***
sub esp 24h +
cmp ds:dword_514834 1 +
jbe loc_40EDDC  +
mov eax [esp+24h+arg_0] +
test eax eax +
jnz loc_40EE4A  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov esi ds:dword_514870 +
lea ebx [esp+24h+var_8] +
mov ds:dword_514870 0 +
test esi esi +
jz loc_40EE4A  +
mov eax 0FFFFFFFFh +
jmp loc_40EE05  +
mov eax ds:dword_514874 +
add eax 1 +
mov [esp+24h+var_24] 3 +
mov ds:dword_514874 eax +
call sub_40D790  +
call sub_40EA30  +
mov [esp+24h+var_20] 0 +
mov [esp+24h+var_24] ebx +
mov [esp+24h+var_8] 0 +
call sub_40EBC0  +
mov edx [esp+24h+var_8] +
test edx edx +
jnz loc_40EE00  +
add ds:dword_514870 1 +
sub esi 1 +
jnz loc_40EDF4  +
mov [esp+24h+var_24] 3 +
call sub_40D790  +
call sub_40EA30  +
mov [esp+24h+var_20] 1 +
mov [esp+24h+var_24] 0 +
call sub_40EBC0  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_4] +
mov ebx [esp+2Ch+arg_0] +
test ebp ebp +
jz loc_40EEC4  +
xor eax eax +
jmp loc_40EE9B  +
mov eax ebp +
mov ebp edx +
mov esi [ebp+4] +
test esi esi +
jz loc_40EEBA  +
mov edi offset aCommon +
mov ecx 7 +
cmps   +
jnz loc_40EEBA  +
mov ds:dword_50F348 1 +
mov edx [ebp+0] +
mov [ebp+0] eax +
test edx edx +
jnz loc_40EE97  +
test ebx ebx +
jz loc_40F0A4  +
mov eax [ebx] +
test eax eax +
jz loc_40EEEC  +
mov edi offset asc_4D0D77 +
mov ecx 2 +
mov esi eax +
cmps   +
jnz loc_40EFF0  +
mov dword ptr [ebx] 0 +
mov [esp+2Ch+var_2C] 3Ch +
mov esi off_4BE018 +
call sub_40AAA0  +
mov dword ptr [eax] 0 +
mov edi eax +
mov dword ptr [eax+4] 4 +
mov eax [esi+4] +
mov [eax] edi +
mov [esi+4] edi +
mov eax [ebx] +
mov [edi+8] eax +
xor eax eax +
cmp dword ptr [ebx+8] 1 +
setz al  +
mov [edi+0Ch] eax +
mov eax [ebx+0Ch] +
mov [edi+38h] eax +
mov eax [esp+2Ch+arg_8] +
test ebp ebp +
mov [edi+10h] ebp +
mov dword ptr [edi+18h] 0 +
mov dword ptr [edi+20h] offset sub_40A0D0 +
mov [edi+14h] eax +
lea eax [edi+18h] +
mov [edi+1Ch] eax +
mov dword ptr [edi+24h] 0 +
mov dword ptr [edi+28h] 0 +
mov dword ptr [edi+2Ch] 0 +
mov dword ptr [edi+30h] 0 +
mov dword ptr [edi+34h] 0 +
jz loc_40EFBC  +
mov eax [ebp+4] +
test eax eax +
mov [esp+2Ch+var_18] eax +
jz loc_40EFBC  +
mov ebx eax +
mov eax 1 +
mov [esp+2Ch+var_1C] edi +
mov esi eax +
mov edi ebp +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_28] offset a?_0 +
mov [esp+2Ch+var_2C] ebx +
call strpbrk  +
test eax eax +
jz loc_40EFD6  +
mov [esp+2Ch+var_28] offset a? +
mov [esp+2Ch+var_2C] ebx +
call strcspn  +
cmp eax 3 +
ja loc_40EFC4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [ebx+eax] 2Ah +
jnz loc_40EFBC  +
cmp byte ptr [ebx+eax+1] 0 +
jnz loc_40EFBC  +
add [esp+2Ch+var_20] 1 +
mov edi [edi] +
test edi edi +
jz loc_40F017  +
mov ebx [edi+4] +
add esi 1 +
test ebx ebx +
jnz loc_40EF93  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_28] offset a?_0 +
mov [esp+2Ch+var_2C] eax +
call strpbrk  +
test eax eax +
jnz loc_40EEEC  +
mov ds:dword_50F270 1 +
jmp loc_40EEEC  +
cmp esi 4 +
mov edi [esp+2Ch+var_1C] +
mov [esp+2Ch+var_14] esi +
jg loc_40EFBC  +
mov eax ebp +
mov [esp+2Ch+var_10] edi +
mov [esp+2Ch+arg_4] ebp +
mov ecx [eax] +
test ecx ecx +
mov ebp ecx +
mov [esp+2Ch+var_1C] ecx +
jz loc_40F0E7  +
mov esi [eax+4] +
mov [esp+2Ch+var_28] offset a?_0 +
mov [esp+2Ch+var_2C] esi +
call strcspn  +
cmp byte ptr [esi+eax] 0 +
lea ebx [eax+1] +
cmovnz ebx eax +
nop   +
lea esi [esi+0] +
mov edi [ebp+4] +
mov [esp+2Ch+var_28] offset a?_0 +
mov [esp+2Ch+var_2C] edi +
call strcspn  +
cmp byte ptr [edi+eax] 1 +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] esi +
adc eax 0 +
cmp eax ebx +
cmova eax ebx +
mov [esp+2Ch+var_24] eax +
call memcmp  +
test eax eax +
jz loc_40EFBC  +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_40F060  +
mov eax [esp+2Ch+var_1C] +
jmp loc_40F02E  +
mov [esp+2Ch+var_2C] 3Ch +
mov ebx off_4BE018 +
call sub_40AAA0  +
mov edi eax +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 4 +
mov eax [ebx+4] +
mov [eax] edi +
mov [ebx+4] edi +
mov dword ptr [edi+8] 0 +
mov dword ptr [edi+0Ch] 0 +
mov dword ptr [edi+38h] 0 +
jmp loc_40EF2C  +
mov eax [esp+2Ch+var_14] +
mov edi [esp+2Ch+var_10] +
mov ebp [esp+2Ch+arg_4] +
shl eax 8 +
add eax [esp+2Ch+var_20] +
cmp eax 201h +
jz loc_40F1A8  +
jle loc_40F18A  +
cmp eax 302h +
jz loc_40F1B4  +
cmp eax 402h +
jnz loc_40EFBC  +
mov dword ptr [edi+20h] offset sub_40A180 +
mov eax [esp+2Ch+var_18] +
mov esi ebp +
xor ebx ebx +
jmp loc_40F13B  +
mov esi [esi] +
test esi esi +
jz loc_40F158  +
mov eax [esi+4] +
mov [esp+2Ch+var_28] offset a?_0 +
mov [esp+2Ch+var_2C] eax +
call strpbrk  +
test eax eax +
jnz loc_40F132  +
mov [edi+ebx*4+24h] esi +
add ebx 1 +
jmp loc_40F132  +
mov eax [esp+2Ch+var_18] +
jmp loc_40F163  +
mov eax [ebp+4] +
mov [esp+2Ch+var_28] offset a?_0 +
mov [esp+2Ch+var_2C] eax +
call strpbrk  +
test eax eax +
jz loc_40F17E  +
mov [edi+ebx*4+24h] ebp +
add ebx 1 +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_40F160  +
jmp loc_40EFBC  +
cmp eax 100h +
jz loc_40F1C0  +
cmp eax 101h +
jnz loc_40EFBC  +
mov dword ptr [edi+20h] offset sub_40A060 +
jmp loc_40F128  +
mov dword ptr [edi+20h] offset sub_40A490 +
jmp loc_40F128  +
mov dword ptr [edi+20h] offset sub_40A340 +
jmp loc_40F128  +
mov dword ptr [edi+20h] offset loc_40A5A0 +
jmp loc_40F128  +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 14h +
call sub_40AAA0  +
mov dword ptr [eax+4] 3 +
mov dword ptr [eax] 0 +
mov edx [ebx+4] +
mov [edx] eax +
mov edx [esp+18h+arg_0] +
mov [ebx+4] eax +
mov [eax+8] edx +
mov edx [esp+18h+arg_4] +
mov [eax+0Ch] edx +
mov edx [esp+18h+arg_8] +
mov [eax+10h] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ecx ds:dword_50F278 +
mov eax [esp+arg_4] +
test ecx ecx +
jz loc_40F232  +
test eax eax +
jz loc_40F243  +
mov edx [esp+arg_0] +
mov ds:dword_5146E0 eax +
mov ds:dword_50F278 edx +
retn   +
mov edx ds:dword_5146E0 +
test edx edx +
jnz locret_40F241  +
mov edx [esp+arg_0] +
mov ds:dword_5146E0 eax +
mov ds:dword_50F278 edx +
jmp locret_40F241  +
***
mov eax [esp+4] +
mov off_4BE020 eax +
retn   +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 0Ch +
call sub_40AAA0  +
mov dword ptr [eax+4] 0Ah +
mov dword ptr [eax] 0 +
mov edx [ebx+4] +
mov [edx] eax +
mov edx [esp+18h+arg_0] +
mov [ebx+4] eax +
mov [eax+8] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx 1 +
mov ecx ds:dword_50F33C +
movzx eax byte ptr [edx] +
test al al +
jz loc_40F2DC  +
cmp al 46h +
cmovz ecx ebx +
add edx 1 +
movzx eax byte ptr [edx] +
test al al +
jnz loc_40F2C7  +
mov ds:dword_50F33C ecx +
pop ebx  +
retn   +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 14h +
call sub_40AAA0  +
mov dword ptr [eax+4] 7 +
mov dword ptr [eax] 0 +
mov edx [ebx+4] +
mov [edx] eax +
mov edx [esp+18h+arg_0] +
mov [ebx+4] eax +
mov [eax+8] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 1Ch +
call sub_40AAA0  +
mov dword ptr [eax+4] 8 +
mov dword ptr [eax] 0 +
mov edx [ebx+4] +
mov [edx] eax +
mov edx [esp+18h+arg_4] +
mov [ebx+4] eax +
mov [eax+0Ch] edx +
mov edx [esp+18h+arg_0] +
mov [eax+8] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 28h +
call sub_40AAA0  +
mov dword ptr [eax+4] 9 +
mov dword ptr [eax] 0 +
mov edx [ebx+4] +
mov [edx] eax +
mov edx [esp+18h+arg_0] +
mov [ebx+4] eax +
mov dword ptr [eax+1Ch] 0 +
mov dword ptr [eax+20h] 0 +
mov [eax+8] edx +
mov edx [esp+18h+arg_4] +
mov dword ptr [eax+24h] 0 +
mov [eax+0Ch] edx +
mov edx [esp+18h+arg_8] +
mov [eax+10h] edx +
mov edx [esp+18h+arg_C] +
mov [eax+14h] edx +
mov edx [esp+18h+arg_10] +
mov [eax+18h] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 0Ch +
call sub_40AAA0  +
mov dword ptr [eax+4] 1 +
mov dword ptr [eax] 0 +
mov edx [ebx+4] +
mov [edx] eax +
mov edx [esp+18h+arg_0] +
mov [ebx+4] eax +
mov [eax+8] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx off_4BE018 +
mov eax ds:dword_50F334 +
mov ebx [esp+18h+arg_0] +
mov edx [eax+8] +
test edx edx +
jz loc_40F465  +
mov [esp+18h+var_18] offset aPFMultipleStar +
call sub_418450  +
mov eax ds:dword_50F334 +
mov [eax+8] ebx +
mov [eax+0Ch] ebx +
or byte ptr [eax+25h] 4 +
add esp 18h +
pop ebx  +
retn   +
***
mov eax [esp+arg_0] +
mov ds:dword_50F268 eax +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ecx ds:dword_50F2AC +
mov esi [esp+28h+arg_0] +
mov ebx [esp+28h+arg_8] +
mov edi [ecx+2Ch] +
lea edx [ecx+24h] +
lea ebp [ecx+20h] +
test edi edi +
setnz al  +
mov edi eax +
mov [esp+28h+var_20] edi +
mov eax [ecx+30h] +
xor ecx ecx +
test eax eax +
mov eax ebp +
setnz cl  +
mov [esp+28h+var_24] ecx +
mov ecx [esp+28h+arg_C] +
mov [esp+28h+var_28] ecx +
mov ecx [esp+28h+arg_4] +
call sub_40BED0  +
mov eax ds:dword_50F2AC +
mov edx [eax+24h] +
test edx edx +
jz loc_40F500  +
mov [eax+28h] esi +
mov [eax+38h] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_40B050  +
mov ecx [eax+30h] +
test ecx ecx +
jnz loc_40F4E7  +
mov edx [eax+2Ch] +
test edx edx +
jnz loc_40F4E7  +
mov edx [eax+14h] +
mov edi [edx+20h] +
cmp [eax+20h] edi +
jnz loc_40F4E7  +
mov edx [edx+24h] +
mov [eax+24h] edx +
jmp loc_40F4E7  +
***
jmp sub_40F530  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_C] +
mov ebp [esp+4Ch+arg_10] +
mov ebx [esp+4Ch+arg_14] +
test eax eax +
jz loc_40F55F  +
lea eax [esp+4Ch+var_14] +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_14] 0 +
mov [esp+4Ch+var_10] eax +
call sub_40B000  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_40F811  +
mov eax [esp+4Ch+arg_0] +
test byte ptr [eax+14h] 3 +
jz loc_40F811  +
mov eax ds:dword_5146FC +
xor edi edi +
xor esi esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_30] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_24] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_34] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] eax +
call sub_40E8A0  +
mov ebx eax +
mov eax ds:dword_51472C +
test eax eax +
jz loc_40F5E3  +
mov eax [esp+4Ch+var_24] +
cmp [eax] ebx +
jz loc_40F870  +
mov edx [esp+4Ch+arg_18] +
lea eax [ebx+8] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] 0 +
test edx edx +
cmovnz eax [esp+4Ch+arg_18] +
mov [esp+4Ch+arg_18] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_18] +
mov [esp+4Ch+var_4C] eax +
call sub_40CBF0  +
mov ecx [esp+4Ch+arg_C] +
test ecx ecx +
jz loc_40F62B  +
mov eax [esp+4Ch+arg_0] +
test byte ptr [eax+14h] 3 +
jnz loc_40F824  +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] offset aDefault_2 +
mov [esp+4Ch+var_4C] 0 +
call sub_40F490  +
test edi edi +
jz loc_40F714  +
sub esi [esp+4Ch+arg_4] +
mov edx esi +
add edx 9 +
mov [esp+4Ch+var_4C] edx +
call sub_4A05F0  +
mov ecx [esp+4Ch+arg_4] +
mov esi eax +
mov eax ds:dword_514850 +
mov eax [eax+4] +
movzx eax byte ptr [eax+18h] +
test al al +
mov [esi] al +
setnz al  +
movzx eax al +
add eax esi +
mov [esp+4Ch+var_44] ecx +
mov [esp+4Ch+var_48] offset a__stop_S +
mov [esp+4Ch+var_4C] eax +
call sprintf  +
mov [esp+4Ch+var_48] offset a__4 +
mov [esp+4Ch+var_4C] 103h +
call sub_416BF0  +
mov [esp+4Ch+var_4C] esi +
lea esi [esp+4Ch+var_18] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
call sub_416D50  +
mov [esp+4Ch+var_4C] eax +
call sub_40F3D0  +
mov edx [ebx+1Ch] +
mov ecx [edx+1Ch] +
mov [esp+4Ch+var_20] eax +
mov [esp+4Ch+var_18] ecx +
mov ecx [edi+8] +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_4C] ecx +
call sub_416940  +
mov eax [esp+4Ch+arg_0] +
mov edx [eax+24h] +
mov eax [esp+4Ch+var_20] +
add [esp+4Ch+var_18] edx +
mov edx [ebx+1Ch] +
mov eax [eax+8] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_4C] eax +
call sub_416940  +
mov eax [esp+4Ch+arg_C] +
test eax eax +
jz loc_40F807  +
call sub_40B050  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_40F807  +
mov edx [ebp+0Ch] +
test edx edx +
jz loc_40F972  +
mov edx [edx] +
test edx edx +
jz loc_40F930  +
cmp eax edx +
jz loc_40F78B  +
mov ecx [edx+10h] +
cmp eax ecx +
jz loc_40F78B  +
mov esi [eax+10h] +
mov edi [eax+0Ch] +
test esi esi +
mov [esp+4Ch+var_20] esi +
jz loc_40FA02  +
mov [esi+0Ch] edi +
test edi edi +
jz loc_40F9F0  +
mov ecx [esp+4Ch+var_20] +
mov [edi+10h] ecx +
mov ecx [edx+10h] +
test ecx ecx +
mov [eax+10h] ecx +
mov [eax+0Ch] edx +
mov [edx+10h] eax +
jz loc_40F9E0  +
mov [ecx+0Ch] eax +
mov ecx [esp+4Ch+var_14] +
add eax 0Ch +
mov [ebp+0Ch] eax +
test ecx ecx +
jz loc_40F807  +
mov eax [ebp+10h] +
test eax eax +
jz loc_40FA21  +
mov edx [eax] +
mov eax [esp+4Ch+var_10] +
mov [eax] edx +
mov eax [ebp+10h] +
mov edx [esp+4Ch+var_14] +
mov [eax] edx +
mov eax off_4BE018 +
mov edi [esp+4Ch+var_14] +
mov edx [eax+4] +
cmp [edx] edi +
jz loc_40F9D1  +
mov eax [esp+4Ch+var_10] +
mov edi [esp+4Ch+var_24] +
mov [ebp+10h] eax +
mov eax [edi] +
mov dword ptr [edi] 0 +
mov edx [ebp+14h] +
lea ecx [edx-10h] +
mov [eax+14h] ecx +
mov ecx [edx] +
test ecx ecx +
mov [eax+10h] ecx +
jz loc_40F7F1  +
mov [ecx+14h] eax +
mov [edx] eax +
add eax 10h +
mov [ebp+14h] eax +
mov eax [esp+4Ch+var_24] +
mov edx [eax] +
test edx edx +
jz loc_40F920  +
add esp 4Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_4C] 0 +
call sub_416850  +
mov ebx eax +
jmp loc_40F57F  +
mov eax [esp+4Ch+arg_C] +
mov eax [eax+20h] +
test eax eax +
jz loc_40FA17  +
mov eax [eax] +
mov ecx [esp+4Ch+arg_C] +
mov ecx [ecx+24h] +
test ecx ecx +
jz loc_40FA10  +
mov ecx [ecx] +
mov edx [esp+4Ch+arg_C] +
mov edx [edx+38h] +
mov [esp+4Ch+var_40] ecx +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_44] edx +
call sub_40F490  +
jmp loc_40F64F  +
mov eax [esp+4Ch+arg_4] +
mov esi [esp+4Ch+arg_4] +
movzx eax byte ptr [eax] +
test al al +
jz loc_40FA73  +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 8Ch +
jnz loc_40F898  +
cmp al 5Fh +
jnz loc_40FA47  +
add esi 1 +
movzx eax byte ptr [esi] +
test al al +
jnz loc_40F883  +
mov eax esi +
sub eax [esp+4Ch+arg_4] +
add eax 0Ah +
mov [esp+4Ch+var_4C] eax +
call sub_4A05F0  +
mov ecx [esp+4Ch+arg_4] +
mov edi eax +
mov eax ds:dword_514850 +
mov eax [eax+4] +
movzx eax byte ptr [eax+18h] +
test al al +
mov [edi] al +
setnz al  +
movzx eax al +
add eax edi +
mov [esp+4Ch+var_44] ecx +
mov [esp+4Ch+var_48] offset a__start_S +
mov [esp+4Ch+var_4C] eax +
call sprintf  +
mov [esp+4Ch+var_48] offset a__4 +
mov [esp+4Ch+var_4C] 103h +
call sub_416BF0  +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
call sub_416D50  +
mov [esp+4Ch+var_4C] eax +
call sub_40F3D0  +
mov edi eax +
jmp loc_40F5E3  +
mov ds:dword_5146FC eax +
add esp 4Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [eax+10h] +
mov ecx [eax+0Ch] +
test edx edx +
jz loc_40FA65  +
mov esi ds:dword_514850 +
mov [edx+0Ch] ecx +
test ecx ecx +
jz loc_40FA5D  +
mov [ecx+10h] edx +
mov edx [esi+68h] +
test edx edx +
mov dword ptr [eax+0Ch] 0 +
jz loc_40FA4E  +
mov [eax+10h] edx +
mov [edx+0Ch] eax +
mov [esi+68h] eax +
jmp loc_40F78B  +
mov edi [esp+4Ch+arg_C] +
cmp ds:dword_5146F8 edi +
jz loc_40F9C0  +
mov edi [esp+4Ch+arg_C] +
mov edx [edi+1Ch] +
test edx edx +
jz loc_40F998  +
cmp edx eax +
jz loc_40F9C0  +
add edx 0Ch +
mov [ebp+0Ch] edx +
jmp loc_40F73B  +
mov ecx [edi+14h] +
test ecx ecx +
jz loc_40F9C0  +
nop   +
mov edi [ecx+48h] +
test edi edi +
js loc_40F9B8  +
mov edx [ecx+1Ch] +
test edx edx +
jz loc_40F9B8  +
mov esi [edx+94h] +
test esi esi +
jnz loc_40F989  +
mov ecx [ecx+14h] +
test ecx ecx +
jnz loc_40F9A0  +
nop   +
mov edi ds:dword_514850 +
lea edx [edi+64h] +
mov [ebp+0Ch] edx +
jmp loc_40F73B  +
mov edx [esp+4Ch+var_10] +
mov [eax+4] edx +
jmp loc_40F7C9  +
mov edx ds:dword_514850 +
mov [edx+64h] eax +
jmp loc_40F78B  +
mov edi ds:dword_514850 +
mov esi [esp+4Ch+var_20] +
mov [edi+68h] esi +
jmp loc_40F777  +
mov esi ds:dword_514850 +
mov [esi+64h] edi +
jmp loc_40F765  +
xor ecx ecx +
jmp loc_40F846  +
mov eax offset aDefault_2 +
jmp loc_40F835  +
mov eax [esp+4Ch+arg_C] +
call sub_407F10  +
mov edx [esp+4Ch+var_10] +
mov ecx [eax] +
mov [edx] ecx +
mov edx [esp+4Ch+var_14] +
mov [eax] edx +
mov eax [esp+4Ch+arg_C] +
add eax 10h +
mov [ebp+14h] eax +
jmp loc_40F7B5  +
xor edi edi +
jmp loc_40F5E3  +
mov dword ptr [eax+10h] 0 +
mov [esi+64h] eax +
jmp loc_40F96A  +
mov [esi+68h] edx +
jmp loc_40F955  +
mov esi ds:dword_514850 +
mov [esi+64h] ecx +
jmp loc_40F947  +
mov eax 0Ah +
jmp loc_40F8AB  +
***
mov eax [esp+4] +
mov ecx [esp+8] +
mov edx [eax+4] +
mov [edx] ecx +
mov edx [esp+0Ch] +
mov [eax+4] edx +
retn   +
***
mov ecx ds:dword_5146DC +
mov eax [esp+arg_0] +
test ecx ecx +
jz loc_40FAB6  +
mov edx [esp+arg_C] +
test edx edx +
jnz locret_40FACB  +
mov edx ds:dword_5147CC +
cmp edx 1 +
jz loc_40FAD0  +
cmp edx 2 +
jz loc_40FAE0  +
mov ds:dword_5146DC eax +
retn   +
mov ecx [esp+arg_4] +
test ecx ecx +
cmovnz eax [esp+arg_4] +
jmp loc_40FAC6  +
mov edx [esp+arg_8] +
test edx edx +
cmovnz eax [esp+arg_8] +
jmp loc_40FAC6  +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 10h +
call sub_40AAA0  +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0Eh +
mov edx [ebx+4] +
mov [edx] eax +
mov edx [esp+18h+arg_0] +
mov [ebx+4] eax +
mov [eax+8] edx +
mov edx [esp+18h+arg_4] +
mov [eax+0Ch] edx +
mov eax ds:dword_50F408 +
mov ds:dword_50F40C eax +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx off_4BE018 +
mov [esp+18h+var_18] 10h +
call sub_40AAA0  +
mov dword ptr [eax+4] 0Dh +
mov dword ptr [eax] 0 +
mov edx [ebx+4] +
mov [edx] eax +
lea edx [eax+8] +
mov [ebx+4] eax +
mov dword ptr [eax+8] 0 +
mov [eax+0Ch] edx +
mov [esp+18h+var_18] edx +
call sub_40B000  +
add esp 18h +
pop ebx  +
retn   +
***
push ebx  +
sub esp 10h +
mov [esp+10h+var_10] 1Ch +
mov edi [esp+10h+arg_8] +
mov ebx [esp+10h+arg_C] +
call sub_40AAA0  +
mov esi eax +
mov dword ptr [eax] 0 +
mov eax [esp+10h+arg_0] +
mov [esi+4] eax +
mov eax [esp+10h+arg_4] +
mov [esp+10h+var_8] offset aProgramHeaderT +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] eax +
call sub_417200  +
mov edx [esp+10h+arg_10] +
xor ecx ecx +
mov [esi+0Ch] edi +
mov [esi+10h] ebx +
mov [esi+14h] edx +
mov edx [esp+10h+arg_14] +
cmp eax 1 +
mov [esi+8] eax +
mov [esi+18h] edx +
jz loc_40FC70  +
mov edx ds:dword_5146E4 +
mov ebx offset dword_5146E4 +
test edx edx +
jnz loc_40FC1C  +
jmp loc_40FC60  +
mov ebx [ebx] +
mov edx [ebx] +
test edx edx +
jz loc_40FC60  +
test ecx ecx +
nop   +
jz loc_40FC14  +
cmp dword ptr [edx+8] 1 +
mov ecx 1 +
jnz loc_40FC14  +
mov edi [edx+0Ch] +
test edi edi +
jnz loc_40FC14  +
mov eax [edx+10h] +
test eax eax +
jnz loc_40FC14  +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] offset aXPSPhdrsAndFil +
call sub_418450  +
mov ebx [ebx] +
xor ecx ecx +
mov edx [ebx] +
test edx edx +
jnz loc_40FC1C  +
lea esi [esi+0] +
mov [ebx] esi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor ecx ecx +
or edi ebx +
setnz cl  +
jmp loc_40FC03  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] 8 +
call sub_4A05F0  +
mov edx ds:dword_5146F4 +
or byte ptr ds:word_514820 80h +
mov [eax] edx +
mov edx [esp+1Ch+arg_0] +
mov ds:dword_5146F4 eax +
mov [eax+4] edx +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov ecx ds:dword_50F2A0 +
test ecx ecx +
jz loc_40FCE7  +
mov [esp+1Ch+var_18] 1D11h +
mov [esp+1Ch+var_1C] offset a____Binutils_0 +
call sub_4184A0  +
mov eax [esp+1Ch+arg_0] +
mov ds:dword_50F2A0 eax +
mov eax [esp+1Ch+arg_4] +
mov ds:dword_50F29C eax +
add esp 1Ch +
retn   +
mov edx ds:dword_50F29C +
test edx edx +
jnz loc_40FCBD  +
mov eax ds:dword_50F298 +
test eax eax +
jnz loc_40FCBD  +
jmp loc_40FCD1  +
***
mov eax ds:dword_50F29C +
mov ebx [esp+28h+arg_0] +
mov [esp+28h+var_C] 0 +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_18] eax +
mov eax ds:dword_50F2A0 +
mov [esp+28h+var_14] 0 +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] ebx +
call sub_40E8A0  +
mov eax ds:dword_50F294 +
test eax eax +
jz loc_40FDB0  +
mov [esp+28h+var_28] 8 +
call sub_4A05F0  +
mov edx ds:dword_50F2AC +
mov [eax+4] edx +
mov edx ds:dword_50F294 +
mov ds:dword_50F294 eax +
mov [eax] edx +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] 140h +
call sub_416BF0  +
mov edx ds:dword_50F298 +
test edx edx +
jz loc_40FDA3  +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_28] 144h +
call sub_4169B0  +
mov ds:dword_50F298 eax +
add esp 28h +
pop ebx  +
retn   +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] 142h +
call sub_416BF0  +
mov ds:dword_50F2A0 eax +
jmp loc_40FD53  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax ds:dword_50F2AC +
mov esi [eax+18h] +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_18] offset aDefault_2 +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_40F490  +
mov [esp+1Ch+var_1C] esi +
call strlen  +
add eax 1 +
mov [esp+1Ch+var_1C] eax +
call sub_4A05F0  +
movzx edx byte ptr [esi] +
test dl dl +
mov ebx eax +
jz loc_40FE4F  +
mov ecx esi +
jmp loc_40FE32  +
cmp dl 5Fh +
jz loc_40FE3F  +
add ecx 1 +
movzx edx byte ptr [ecx] +
test dl dl +
jz loc_40FE4F  +
movzx edi dl +
test byte ptr ds:word_509C60[edi+edi] 8Ch +
jz loc_40FE23  +
add ecx 1 +
add eax 1 +
mov [eax-1] dl +
movzx edx byte ptr [ecx] +
test dl dl +
jnz loc_40FE32  +
mov byte ptr [eax] 0 +
mov [esp+1Ch+var_1C] ebx +
call strlen  +
add eax 0Eh +
mov [esp+1Ch+var_1C] eax +
call sub_4A05F0  +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_18] offset a__load_start_S +
mov [esp+1Ch+var_1C] eax +
mov edi eax +
call sprintf  +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] 143h +
call sub_416BF0  +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] eax +
call sub_416D50  +
mov [esp+1Ch+var_1C] eax +
call sub_40F3D0  +
mov [esp+1Ch+var_1C] ebx +
call strlen  +
add eax 0Dh +
mov [esp+1Ch+var_1C] eax +
call sub_4A05F0  +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_18] offset a__load_stop_S +
mov [esp+1Ch+var_1C] eax +
mov edi eax +
call sprintf  +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] 140h +
call sub_416BF0  +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] 143h +
mov ebp eax +
call sub_416BF0  +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_1C] 2Bh +
mov [esp+1Ch+var_18] eax +
call sub_4169B0  +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] eax +
call sub_416D50  +
mov [esp+1Ch+var_1C] eax +
call sub_40F3D0  +
mov [esp+1Ch+arg_0] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp free  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+38h+arg_0] +
lea edx [esp+38h+var_1C] +
mov ecx [esp+38h+arg_C] +
mov [esp+38h+var_30] 0 +
mov edi [esp+38h+arg_4] +
mov ebx [esp+38h+arg_8] +
test ebp ebp +
mov esi [esp+38h+arg_10] +
setnz al  +
mov [esp+38h+var_34] eax +
mov eax [esp+38h+arg_14] +
mov [esp+38h+var_38] eax +
lea eax [esp+38h+var_20] +
call sub_40BED0  +
mov eax ds:dword_50F294 +
test eax eax +
jz loc_41007C  +
mov ebp [eax+4] +
mov eax ds:dword_50F298 +
or byte ptr [ebp+54h] 10h +
mov [esp+38h+var_30] eax +
mov eax ds:dword_50F2A0 +
mov [esp+38h+var_38] 2Bh +
mov [esp+38h+var_34] eax +
call sub_4169B0  +
mov [esp+38h+var_30] 0 +
mov [esp+38h+var_38] offset a__4 +
mov [esp+38h+var_34] eax +
call sub_416CB0  +
mov edx ds:dword_50F294 +
test edx edx +
mov [ebp+34h] eax +
jz loc_41007C  +
mov [esp+38h+var_2C] 0 +
mov ebp edx +
mov [esp+38h+arg_4] edi +
jmp loc_40FFFE  +
mov [esp+38h+var_38] ebp +
call free  +
test edi edi +
jz loc_41006C  +
mov ebp edi +
test ebx ebx +
mov eax [ebp+4] +
jz loc_410010  +
mov ecx [eax+28h] +
test ecx ecx +
jz loc_4100C0  +
mov ecx [esp+38h+var_20] +
mov [eax+20h] ecx +
mov ecx [esp+38h+var_1C] +
mov [eax+24h] ecx +
mov ecx [ebp+0] +
test ecx ecx +
jz loc_4100A2  +
test esi esi +
jz loc_410034  +
mov edx [eax+38h] +
test edx edx +
jz loc_4100B5  +
mov eax [esp+38h+arg_4] +
mov edi ecx +
test eax eax +
jz loc_40FFF0  +
mov [esp+38h+var_38] 8 +
call sub_4A05F0  +
mov ecx [ebp+4] +
mov edx [esp+38h+var_2C] +
mov edi [ebp+0] +
mov ecx [ecx+18h] +
mov [eax] edx +
mov [esp+38h+var_2C] eax +
mov [eax+4] ecx +
mov [esp+38h+var_38] ebp +
call free  +
test edi edi +
jnz loc_40FFFC  +
mov eax [esp+38h+var_2C] +
test eax eax +
jz loc_41007C  +
mov [esp+38h+var_38] eax +
call sub_40FC80  +
mov ds:dword_50F2A0 0 +
mov ds:dword_50F294 0 +
mov ds:dword_50F298 0 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+38h+arg_0] +
mov dword ptr [eax+50h] 0 +
mov [eax+30h] edx +
jmp loc_410025  +
mov [eax+38h] esi +
jmp loc_410034  +
mov [eax+28h] ebx +
jmp loc_410010  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] 0Ch +
mov edi [esp+1Ch+arg_0] +
mov ebx [esp+1Ch+arg_C] +
mov esi [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
call sub_4A05F0  +
mov ebp eax +
mov [eax] edi +
movzx eax byte ptr [eax+8] +
and eax 0FFFFFFF9h +
or eax 1 +
test ebx ebx +
mov [ebp+8] al +
mov eax [esp+1Ch+var_14] +
jz loc_410185  +
test eax eax +
mov [ebp+4] eax +
jz loc_410224  +
test esi esi +
jz loc_410136  +
mov ebx ds:_stricmp +
mov [esp+1Ch+var_18] offset aC_0 +
mov [esp+1Ch+var_1C] esi +
call ebx  +
test eax eax +
jnz loc_410153  +
movzx eax byte ptr [ebp+8] +
and eax 0FFFFFFC7h +
or eax 8 +
mov [ebp+8] al +
mov [esp+1Ch+arg_0] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_4179D0  +
mov [esp+1Ch+var_18] offset aC_1 +
mov [esp+1Ch+var_1C] esi +
call ebx  +
test eax eax +
jnz loc_410201  +
movzx eax byte ptr [ebp+8] +
and eax 0FFFFFFC7h +
or eax 10h +
mov [ebp+8] al +
mov [esp+1Ch+arg_0] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_4179D0  +
mov [esp+1Ch+var_1C] eax +
mov ebx eax +
call strlen  +
add eax 1 +
mov [esp+1Ch+var_1C] eax +
call sub_4A05F0  +
movzx edx byte ptr [ebx] +
mov ecx ebx +
test dl dl +
mov [esp+1Ch+var_10] eax +
jz loc_410247  +
mov edi eax +
xor ebx ebx +
xor eax eax +
jmp loc_4101C7  +
add ecx 1 +
xor ebx ebx +
mov [edi-1] dl +
movzx edx byte ptr [ecx] +
mov eax 1 +
test dl dl +
jz loc_4101F1  +
test ebx ebx +
jnz loc_4101B3  +
cmp dl 3Fh +
jz loc_410234  +
cmp dl 2Ah +
jz loc_410234  +
cmp dl 5Bh +
jz loc_410234  +
mov [edi] dl +
xor ebx ebx +
cmp byte ptr [ecx] 5Ch +
setz bl  +
add ecx 1 +
movzx edx byte ptr [ecx] +
add edi 1 +
test dl dl +
jnz loc_4101C7  +
test eax eax +
jz loc_410247  +
mov byte ptr [edi] 0 +
mov eax [esp+1Ch+var_10] +
jmp loc_410110  +
mov [esp+1Ch+var_18] offset aJava +
mov [esp+1Ch+var_1C] esi +
call ebx  +
test eax eax +
jnz loc_41025C  +
movzx eax byte ptr [ebp+8] +
and eax 0FFFFFFC7h +
or eax 20h +
mov [ebp+8] al +
jmp loc_410143  +
mov eax [esp+1Ch+var_14] +
and byte ptr [ebp+8] 0FEh +
mov [ebp+4] eax +
jmp loc_41011B  +
mov eax [esp+1Ch+var_10] +
mov [esp+1Ch+var_1C] eax +
call free  +
xor eax eax +
jmp loc_410110  +
mov eax [esp+1Ch+var_10] +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_14] +
jmp loc_410110  +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] offset aXPUnknownLangu +
call sub_418450  +
jmp loc_410136  +
***
jmp sub_410280  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 3Ch +
mov [esp+1Ch+var_1C] 1 +
call sub_4A0620  +
mov edx [esp+1Ch+arg_0] +
mov [eax+0Ch] edx +
mov edx [esp+1Ch+arg_4] +
mov dword ptr [eax+38h] offset sub_408B00 +
mov dword ptr [eax+30h] 0FFFFFFFFh +
mov [eax+1Ch] edx +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx ds:dword_51489C +
mov ecx [esp+2Ch+arg_4] +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_18] ecx +
mov ecx [esp+2Ch+arg_8] +
test eax eax +
mov [esp+2Ch+var_10] ecx +
mov ecx eax +
mov eax offset unk_4D1AD8 +
cmovnz eax ecx +
test ebx ebx +
mov [esp+2Ch+var_14] eax +
jz loc_410359  +
mov eax [esp+2Ch+var_14] +
cmp byte ptr [eax] 0 +
jz loc_41030A  +
mov eax [ebx+4] +
mov esi [esp+2Ch+var_14] +
cmp byte ptr [eax] 0 +
jnz loc_410343  +
mov [esp+2Ch+var_2C] offset aXPAnonymousVer +
call sub_418450  +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+arg_0] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp free  +
mov [esp-10h+arg_0] esi +
mov dword ptr [esp+0] offset aXPDuplicateVer +
call sub_418450  +
mov ebx [ebx] +
test ebx ebx +
jz loc_410359  +
mov eax [ebx+4] +
mov [esp-10h+arg_0] esi +
mov [esp+0] eax +
call strcmp  +
test eax eax +
jz loc_41032A  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_410340  +
mov edi [esp-10h+arg_10] +
mov eax edi +
add eax 0Ch +
call sub_408920  +
mov eax edi +
add eax 1Ch +
call sub_408920  +
mov ebx [edi+0Ch] +
test ebx ebx +
jz loc_4103EC  +
mov edi ds:dword_51489C +
test edi edi +
jz loc_4103E6  +
mov eax [edi+20h] +
test eax eax +
jz loc_410581  +
test byte ptr [ebx+8] 1 +
jnz loc_410510  +
mov esi [edi+24h] +
test esi esi +
jnz loc_4103A8  +
nop   +
jmp loc_4103E0  +
mov esi [esi] +
test esi esi +
jz loc_4103E0  +
mov eax [esi+4] +
mov ebp [ebx+4] +
mov [esp-10h+arg_0] eax +
mov [esp+0] ebp +
call strcmp  +
test eax eax +
jnz loc_4103A2  +
movzx eax byte ptr [esi+8] +
xor al [ebx+8] +
test al 38h +
jnz loc_4103A2  +
mov [esp-10h+arg_0] ebp +
mov dword ptr [esp+0] offset aXPDuplicateExp +
call sub_418450  +
mov esi [esi] +
test esi esi +
jnz loc_4103A8  +
nop   +
mov edi [edi] +
test edi edi +
jnz loc_410382  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_410378  +
mov eax [esp-10h+arg_10] +
mov ebx [eax+1Ch] +
test ebx ebx +
jz loc_41046C  +
mov edi ds:dword_51489C +
test edi edi +
jz loc_410466  +
mov eax [edi+10h] +
test eax eax +
jz loc_410568  +
test byte ptr [ebx+8] 1 +
jnz loc_4104B7  +
mov esi [edi+14h] +
test esi esi +
jnz loc_410426  +
jmp loc_410460  +
mov esi [esi] +
test esi esi +
jz loc_410460  +
mov eax [esi+4] +
mov ebp [ebx+4] +
mov [esp-10h+arg_0] eax +
mov [esp+0] ebp +
call strcmp  +
test eax eax +
jnz loc_410420  +
movzx eax byte ptr [esi+8] +
xor al [ebx+8] +
test al 38h +
jnz loc_410420  +
mov [esp-10h+arg_0] ebp +
mov dword ptr [esp+0] offset aXPDuplicateExp +
call sub_418450  +
mov esi [esi] +
test esi esi +
jnz loc_410426  +
lea esi [esi+0] +
mov edi [edi] +
test edi edi +
jnz loc_410401  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4103F7  +
mov eax [esp-10h+arg_10] +
mov ecx [esp-10h+arg_18] +
mov [eax+2Ch] ecx +
mov ecx [esp-10h+arg_14] +
mov [eax+4] ecx +
cmp byte ptr [ecx] 0 +
jnz loc_41059B  +
mov eax [esp-10h+arg_10] +
mov dword ptr [eax+8] 0 +
mov edx ds:dword_51489C +
test edx edx +
jnz loc_4104A3  +
jmp loc_4105B4  +
mov edx eax +
mov eax [edx] +
test eax eax +
jnz loc_4104A1  +
mov eax [esp-10h+arg_10] +
mov [edx] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp-10h+arg_0] ebx +
mov [esp+0] eax +
call sub_4A7B20  +
test eax eax +
mov esi eax +
jnz loc_4104D6  +
jmp loc_410460  +
mov esi [esi] +
test esi esi +
jz loc_410460  +
mov eax [esi+4] +
mov ebp [ebx+4] +
mov [esp-10h+arg_0] eax +
mov [esp+0] ebp +
call strcmp  +
test eax eax +
jnz loc_410460  +
movzx eax byte ptr [esi+8] +
xor al [ebx+8] +
test al 38h +
jnz loc_4104D0  +
mov [esp-10h+arg_0] ebp +
mov dword ptr [esp+0] offset aXPDuplicateExp +
call sub_418450  +
jmp loc_4104D0  +
mov [esp-10h+arg_0] ebx +
mov [esp+0] eax +
call sub_4A7B20  +
test eax eax +
mov esi eax +
jnz loc_410531  +
jmp loc_4103E0  +
mov esi [esi] +
test esi esi +
jz loc_4103E0  +
mov eax [esi+4] +
mov ebp [ebx+4] +
mov [esp-10h+arg_0] eax +
mov [esp+0] ebp +
call strcmp  +
test eax eax +
jnz loc_4103E0  +
movzx eax byte ptr [esi+8] +
xor al [ebx+8] +
test al 38h +
jnz loc_410527  +
mov [esp-10h+arg_0] ebp +
mov dword ptr [esp+0] offset aXPDuplicateExp +
call sub_418450  +
jmp loc_410527  +
test byte ptr [ebx+8] 1 +
jz loc_410416  +
mov edi [edi] +
test edi edi +
jnz loc_410401  +
jmp loc_410466  +
test byte ptr [ebx+8] 1 +
jz loc_410397  +
mov edi [edi] +
test edi edi +
nop   +
jnz loc_410382  +
jmp loc_4103E6  +
mov eax ds:dword_50F290 +
mov ecx [esp-10h+arg_10] +
add eax 1 +
mov ds:dword_50F290 eax +
mov [ecx+8] eax +
jmp loc_410492  +
mov edx offset dword_51489C +
jmp loc_4104A9  +
***
push esi  +
push ebx  +
sub esp 0CCh +
mov eax ds:dword_514898 +
test eax eax +
jz loc_4105D8  +
call sub_408920  +
mov eax ds:dword_51479C +
mov [esp+0CCh+var_CC] offset sub_40D280 +
mov ds:dword_50F330 eax +
mov eax ds:dword_50F328 +
mov [esp+0CCh+var_C8] eax +
call sub_40AF30  +
call sub_409020  +
call sub_417530  +
mov ebx ds:dword_50F274 +
test ebx ebx +
jz loc_41061E  +
nop   +
lea esi [esi+0] +
mov eax [ebx+4] +
call sub_408750  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_410610  +
call sub_452920  +
test eax eax +
jz loc_4118F0  +
mov eax ds:dword_51479C +
xor edx edx +
mov ds:dword_50F330 eax +
mov eax ds:dword_50F328 +
call sub_40E600  +
test byte ptr ds:word_514820+1 1 +
jnz loc_4117A5  +
mov edi ds:dword_50F278 +
mov ds:dword_514860 offset dword_50F274 +
test edi edi +
jz loc_411AF2  +
mov esi ds:dword_514868 +
test esi esi +
jz loc_410692  +
mov [esp+0CCh+var_CC] 8 +
call sub_40AAA0  +
mov edx ds:dword_514860 +
mov [eax] edx +
mov edx ds:dword_514868 +
mov [eax+4] edx +
mov ds:dword_514860 eax +
mov ebx ds:dword_51486C +
test ebx ebx +
jz loc_4106BE  +
mov [esp+0CCh+var_CC] 8 +
call sub_40AAA0  +
mov edx ds:dword_514860 +
mov [eax] edx +
mov edx ds:dword_51486C +
mov [eax+4] edx +
mov ds:dword_514860 eax +
call sub_4174C0  +
mov ecx ds:dword_514770 +
test ecx ecx +
jz loc_410771  +
mov edx ds:dword_50F2E4 +
test edx edx +
jz loc_410771  +
lea ebx [esp+0CCh+var_70] +
mov esi offset aAsNeededLibrar +
mov ecx 11h +
mov edi ebx +
movs   +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] offset aS_13 +
call sub_4184D0  +
mov esi ds:dword_50F2E4 +
test esi esi +
jz loc_410771  +
mov eax [esi+4] +
mov [esp+0CCh+var_CC] offset aS_13 +
mov [esp+0CCh+var_C8] eax +
call sub_4184D0  +
mov eax [esi+4] +
mov [esp+0CCh+var_CC] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
ja loc_410A02  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jbe loc_410734  +
mov eax [esi+8] +
test eax eax +
jz loc_410758  +
mov [esp+0CCh+var_C8] eax +
mov [esp+0CCh+var_CC] offset aB_0 +
call sub_4184D0  +
mov eax [esi+0Ch] +
mov [esp+0CCh+var_CC] offset aT +
mov [esp+0CCh+var_C8] eax +
call sub_4184D0  +
mov esi [esi] +
test esi esi +
jnz loc_41070B  +
call sub_452950  +
mov ebx ds:dword_50F27C +
test ebx ebx +
jnz loc_410790  +
jmp loc_41084B  +
mov ebx [ebx+18h] +
test ebx ebx +
jz loc_41084B  +
test byte ptr [ebx+25h] 20h +
jnz loc_410785  +
mov eax ds:dword_5147C0 +
mov esi [ebx+10h] +
mov [esp+0CCh+var_C4] eax +
mov eax ds:dword_514850 +
mov [esp+0CCh+var_CC] esi +
mov [esp+0CCh+var_C8] eax +
call sub_453630  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_4107CB  +
cmp ds:byte_514822 0 +
jns loc_4107ED  +
test eax eax +
jz loc_4107E3  +
mov edx ds:dword_514850 +
mov ecx [esi+4] +
mov edx [edx+4] +
mov edx [edx+4] +
cmp [ecx+4] edx +
jz loc_4107F5  +
test byte ptr [esi+28h] 20h +
jnz loc_411582  +
test eax eax +
jz loc_4115BE  +
mov eax [esi+6Ch] +
test eax eax +
jz loc_410785  +
mov eax ds:dword_5147B4 +
xor edi edi +
test eax eax +
jz loc_4115FF  +
mov edx ds:dword_514850 +
mov eax [edx+4] +
mov eax [eax+0ACh] +
mov [esp+0CCh+var_C8] edx +
mov [esp+0CCh+var_CC] esi +
call eax  +
test eax eax +
jnz loc_4114BB  +
mov eax ds:dword_5147B4 +
test eax eax +
jnz loc_4114AB  +
mov [esp+0CCh+var_CC] edi +
call sub_44B9D0  +
mov ebx [ebx+18h] +
test ebx ebx +
jnz loc_410790  +
mov eax ds:dword_5147F0 +
test eax eax +
jz loc_410982  +
mov edi ds:dword_50F27C +
xor ebx ebx +
test edi edi +
jz loc_41091B  +
mov eax [edi+10h] +
mov [esp+0CCh+var_C8] offset a_exports +
mov [esp+0CCh+var_CC] eax +
call sub_44D4B0  +
test eax eax +
jz loc_410910  +
mov esi [eax+24h] +
mov [esp+0CCh+var_A0] eax +
mov [esp+0CCh+var_CC] esi +
call sub_4A05F0  +
mov edx [esp+0CCh+var_A0] +
mov ebp eax +
mov eax [edi+10h] +
mov [esp+0CCh+var_B8] esi +
mov [esp+0CCh+var_C0] 0 +
mov [esp+0CCh+var_BC] 0 +
mov [esp+0CCh+var_C4] ebp +
mov [esp+0CCh+var_C8] edx +
mov [esp+0CCh+var_CC] eax +
call sub_44DCC0  +
test eax eax +
jz loc_410D18  +
add esi ebp +
cmp ebp esi +
jnb loc_410905  +
lea esi [esi+0] +
mov [esp+0CCh+var_C8] ebp +
mov [esp+0CCh+var_CC] ebx +
mov [esp+0CCh+var_C0] 0 +
mov [esp+0CCh+var_C4] 0 +
call sub_4100D0  +
mov [esp+0CCh+var_CC] ebp +
mov [esp+0CCh+var_C8] 0 +
mov ebx eax +
call strchr  +
lea ebp [eax+1] +
cmp ebp esi +
jb loc_4108D0  +
mov eax [esp+0CCh+var_A0] +
or dword ptr [eax+14h] 208000h +
mov edi [edi+18h] +
test edi edi +
jnz loc_410868  +
mov [esp+0CCh+var_C0] 0 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] offset asc_4D0D77 +
mov [esp+0CCh+var_CC] 0 +
call sub_4100D0  +
mov [esp+0CCh+var_C8] 3Ch +
mov [esp+0CCh+var_CC] 1 +
mov esi eax +
call sub_4A0620  +
mov [eax+0Ch] ebx +
mov [eax+1Ch] esi +
mov dword ptr [eax+38h] offset sub_408B00 +
mov dword ptr [eax+30h] 0FFFFFFFFh +
mov [esp+0CCh+var_C8] eax +
mov eax ds:dword_5147F0 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_CC] eax +
call sub_4102C0  +
call sub_412800  +
mov [esp+0CCh+var_CC] 1 +
call sub_40D790  +
mov ebx ds:dword_50F2C4 +
test ebx ebx +
jnz loc_4109D5  +
jmp loc_410A27  +
mov eax ds:dword_5148D0 +
mov [ebx+10h] eax +
mov [ebx+1Ch] eax +
mov eax [ebx+18h] +
test eax eax +
jz loc_4109CE  +
mov [esp+0CCh+var_CC] eax +
call sub_416970  +
mov esi ds:dword_5148DC +
test esi esi +
jz loc_410A0E  +
mov eax ds:dword_5148D0 +
mov [ebx+14h] eax +
mov ebx [ebx+8] +
test ebx ebx +
jz loc_410A27  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_4109AD  +
mov [esp+0CCh+var_CC] eax +
call sub_416970  +
mov edi ds:dword_5148DC +
test edi edi +
jnz loc_4109A2  +
mov eax [ebx] +
mov [esp+0CCh+var_CC] offset aFPInvalidOrigi +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
jmp loc_4109AD  +
call sub_418580  +
xor ebx ebx +
jmp loc_410734  +
mov eax [ebx] +
mov [esp+0CCh+var_CC] offset aFPInvalidLengt +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_4109D5  +
mov ebp ds:dword_5147A4 +
mov ds:dword_5148C0 0 +
test ebp ebp +
jnz loc_410AB9  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_411523  +
mov eax ds:dword_51474C +
test eax eax +
jz loc_411A36  +
cmp eax 2 +
jz loc_411AC1  +
mov [esp+0CCh+var_70] 0 +
lea ebx [esp+0CCh+var_70] +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_C4] ebx +
mov [esp+0CCh+var_C8] offset sub_409CF0 +
mov [esp+0CCh+var_CC] eax +
call sub_450810  +
mov eax [esp+0CCh+var_70] +
add eax 1 +
cmp eax 4 +
mov [esp+0CCh+var_70] eax +
jbe loc_410A6F  +
mov [esp+0CCh+var_70] 0FFFFFFFFh +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_C4] ebx +
mov [esp+0CCh+var_C8] offset sub_409CF0 +
mov [esp+0CCh+var_CC] eax +
call sub_450810  +
mov eax ds:dword_50F328 +
call sub_40E240  +
movzx ebx byte ptr ds:word_514820 +
mov eax ebx +
and eax 3 +
cmp al 2 +
jz loc_411543  +
and ebx 40h +
jz loc_410AF7  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
mov edx [edx+17Ch] +
mov [esp+0CCh+var_C8] offset word_514820 +
mov [esp+0CCh+var_CC] eax +
call edx  +
mov eax ds:dword_50F328 +
xor ebx ebx +
xor esi esi +
call sub_408220  +
mov eax ds:dword_50F328 +
xor ecx ecx +
xor edx edx +
add ds:dword_50F260 1 +
call sub_40E320  +
mov ecx ds:dword_5146F8 +
mov ebp ecx +
mov edi [ebp+0] +
test edi edi +
mov eax edi +
jz loc_410B7B  +
mov edx [edi+4] +
test edx edx +
jnz loc_411054  +
test ebx ebx +
jz loc_410B5E  +
cmp edi [ebx+10h] +
jz loc_410B5E  +
mov [esp+0CCh+var_C8] 0E9Ah +
mov [esp+0CCh+var_CC] offset a____Binutils_0 +
mov [esp+0CCh+var_A0] eax +
call sub_4184A0  +
mov edi [ebp+0] +
mov eax [esp+0CCh+var_A0] +
mov ebp edi +
mov edx 0FFFFFFFEh +
mov edi [ebp+0] +
mov ebx eax +
sub edx [eax+48h] +
test esi esi +
cmovz esi eax +
test edi edi +
mov [eax+48h] edx +
mov eax edi +
jnz loc_410B2B  +
test esi esi +
jz loc_410BA8  +
mov eax 0FFFFFFFEh +
sub eax [esi+48h] +
cmp ebx esi +
mov [esi+48h] eax +
jz loc_410BA8  +
mov edx 0FFFFFFFEh +
jmp loc_410BA1  +
mov eax edx +
sub eax [esi+48h] +
cmp ebx esi +
mov [esi+48h] eax +
jz loc_410BA8  +
mov esi [esi+10h] +
test esi esi +
jnz loc_410B95  +
mov ebp ds:dword_50F27C +
test ebp ebp +
jz loc_410BF7  +
mov eax [ebp+10h] +
mov ebx [eax+64h] +
test ebx ebx +
jnz loc_410BC7  +
jmp loc_410BF0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_410BF0  +
mov eax [ebx+3Ch] +
test eax eax +
jnz loc_410BC0  +
test byte ptr [ebp+24h] 10h +
jnz loc_4110BC  +
test byte ptr [ebx+15h] 80h +
jz loc_411065  +
mov dword ptr [ebx+3Ch] offset off_4BFB90 +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_410BC7  +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_410BB2  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_410C4B  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
mov edx [edx+184h] +
mov [esp+0CCh+var_C8] offset word_514820 +
mov [esp+0CCh+var_CC] eax +
call edx  +
mov eax ds:dword_514850 +
mov [esp+0CCh+var_C8] offset a_text_1 +
mov [esp+0CCh+var_CC] eax +
call sub_44D4B0  +
test eax eax +
jz loc_410C4B  +
mov edx ds:dword_514750 +
test edx edx +
jz loc_4119B2  +
or dword ptr [eax+14h] 8 +
call sub_4174E0  +
mov [esp+0CCh+var_CC] 28h +
call sub_4A05F0  +
mov esi ds:dword_5146E4 +
test esi esi +
mov [esp+0CCh+var_A0] eax +
jz loc_410E0A  +
mov [esp+0CCh+var_98] 0 +
mov [esp+0CCh+var_9C] 0Ah +
nop   +
mov edi ds:dword_5146F8 +
xor ebx ebx +
test edi edi +
jz loc_410D4B  +
mov eax [edi+48h] +
test eax eax +
js loc_410D40  +
mov eax [edi+38h] +
test eax eax +
jz loc_410FD7  +
mov ecx [edi+1Ch] +
test ecx ecx +
jz loc_411040  +
test eax eax +
jz loc_410D31  +
mov [esp+0CCh+var_98] eax +
mov ebp [esp+0CCh+var_98] +
jmp loc_410CDB  +
mov eax [edi+1Ch] +
mov ecx [esp+0CCh+var_A0] +
mov [ecx+ebx*4] eax +
add ebx 1 +
mov dword ptr [ebp+8] 1 +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_410D40  +
mov eax [esi+4] +
mov [esp+0CCh+var_C8] eax +
mov eax [ebp+4] +
mov [esp+0CCh+var_CC] eax +
call strcmp  +
test eax eax +
jnz loc_410CD4  +
cmp [esp+0CCh+var_9C] ebx +
ja loc_410CC0  +
shl [esp+0CCh+var_9C] 1 +
mov eax [esp+0CCh+var_9C] +
shl eax 2 +
mov [esp+0CCh+var_C8] eax +
mov eax [esp+0CCh+var_A0] +
mov [esp+0CCh+var_CC] eax +
call sub_4A0670  +
mov [esp+0CCh+var_A0] eax +
jmp loc_410CC0  +
mov eax [esp+0CCh+var_A0] +
mov [esp+0CCh+var_CC] offset aXPUnableToRead +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
jmp loc_4108C7  +
mov [esp+0CCh+var_98] 0 +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_410C90  +
mov eax [esi+18h] +
xor edi edi +
test eax eax +
jz loc_410D6E  +
mov [esp+0CCh+var_C4] offset aPhdrFlags +
mov [esp+0CCh+var_C8] 0 +
mov [esp+0CCh+var_CC] eax +
call sub_417180  +
mov edi eax +
mov eax [esi+14h] +
mov [esp+0CCh+var_94] 0 +
test eax eax +
jz loc_410D9C  +
mov [esp+0CCh+var_C4] offset aPhdrLoadAddres +
mov [esp+0CCh+var_C8] 0 +
mov [esp+0CCh+var_CC] eax +
call sub_417180  +
mov [esp+0CCh+var_94] eax +
mov eax [esi+14h] +
mov ebp [esi+0Ch] +
test eax eax +
mov ecx [esi+10h] +
setnz al  +
mov edx [esp+0CCh+var_A0] +
movzx eax al +
mov [esp+0CCh+var_90] ebp +
mov ebp [esi+8] +
mov [esp+0CCh+var_B0] ecx +
mov ecx [esp+0CCh+var_90] +
mov [esp+0CCh+var_A8] edx +
mov edx [esp+0CCh+var_94] +
mov [esp+0CCh+var_BC] eax +
xor eax eax +
mov [esp+0CCh+var_AC] ebx +
mov [esp+0CCh+var_B4] ecx +
mov [esp+0CCh+var_B8] edx +
mov [esp+0CCh+var_C0] edi +
mov edx [esi+18h] +
mov [esp+0CCh+var_C8] ebp +
test edx edx +
setnz al  +
mov [esp+0CCh+var_C4] eax +
mov eax ds:dword_514850 +
mov [esp+0CCh+var_CC] eax +
call sub_44C2F0  +
test eax eax +
jz loc_4110DA  +
mov esi [esi] +
test esi esi +
jnz loc_410C80  +
mov eax [esp+0CCh+var_A0] +
mov [esp+0CCh+var_CC] eax +
call free  +
mov ebp ds:dword_5146F8 +
test ebp ebp +
jz loc_410E7B  +
mov eax [ebp+48h] +
test eax eax +
js loc_410E74  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_410E74  +
mov ebx [ebp+38h] +
test ebx ebx +
jnz loc_410E3D  +
jmp loc_410E74  +
mov ebx [ebx] +
test ebx ebx +
jz loc_410E74  +
mov eax [ebx+8] +
test eax eax +
jnz loc_410E37  +
mov eax [ebx+4] +
mov edi offset aNone_0 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_410E37  +
mov edx [ebp+18h] +
mov [esp+0CCh+var_C4] eax +
mov [esp+0CCh+var_CC] offset aXPSectionSAssi +
mov [esp+0CCh+var_C8] edx +
call sub_418450  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_410E3D  +
mov ebp [ebp+10h] +
test ebp ebp +
jnz loc_410E20  +
test ds:byte_514823 1 +
jz loc_410EB7  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_410EB7  +
mov eax ds:dword_51490C +
lea edx [esp+0CCh+var_70] +
mov [esp+0CCh+var_70] 0 +
call sub_40E580  +
mov edi [esp+0CCh+var_70] +
test edi edi +
jnz loc_410EB7  +
and ds:byte_514823 0FEh +
xor eax eax +
cmp ds:dword_514834 1 +
mov [esp+0CCh+var_CC] 0 +
setnbe al  +
mov [esp+0CCh+var_C8] eax +
call sub_40EBC0  +
call sub_4174D0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_411117  +
mov eax ds:dword_514850 +
mov esi [eax+64h] +
test esi esi +
jnz loc_410F5E  +
jmp loc_411117  +
mov [esp+0CCh+var_C4] edi +
mov [esp+0CCh+var_C8] offset a_sizeof_S +
mov [esp+0CCh+var_CC] ebx +
call sprintf  +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_BC] 1 +
mov [esp+0CCh+var_C0] 0 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] eax +
call sub_4500A0  +
test eax eax +
jz loc_410F4B  +
cmp byte ptr [eax+0Ch] 1 +
jz loc_4110EB  +
mov [esp+0CCh+var_CC] ebx +
call free  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_411117  +
mov edi [esi] +
mov [esp+0CCh+var_CC] edi +
call strlen  +
add eax 0Ah +
mov [esp+0CCh+var_CC] eax +
call sub_4A05F0  +
mov [esp+0CCh+var_C4] edi +
mov [esp+0CCh+var_C8] offset a_startof_S +
mov [esp+0CCh+var_CC] eax +
mov ebx eax +
call sprintf  +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_BC] 1 +
mov [esp+0CCh+var_C0] 0 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] eax +
call sub_4500A0  +
test eax eax +
jz loc_410F00  +
cmp byte ptr [eax+0Ch] 1 +
jnz loc_410F00  +
mov byte ptr [eax+0Ch] 3 +
mov dword ptr [eax+18h] 0 +
mov [eax+14h] esi +
jmp loc_410F00  +
cmp dword ptr [edi+50h] 2 +
jz loc_410D40  +
mov eax [edi+1Ch] +
test eax eax +
jz loc_410D40  +
test byte ptr [eax+14h] 1 +
jz loc_410D40  +
cmp dword ptr [esi+8] 3 +
jz loc_410D40  +
mov ebp [esp+0CCh+var_98] +
mov eax edi +
test ebp ebp +
jnz loc_410CB9  +
mov eax [eax+10h] +
test eax eax +
jz loc_411027  +
mov edx [eax+38h] +
test edx edx +
jnz loc_4119C9  +
mov eax [eax+10h] +
test eax eax +
jnz loc_411015  +
mov [esp+0CCh+var_CC] offset aFPNoSectionsAs +
call sub_418450  +
mov ecx [edi+1Ch] +
xor eax eax +
test ecx ecx +
jnz loc_410CB1  +
mov edi [edi+10h] +
mov [esp+0CCh+var_98] eax +
test edi edi +
jnz loc_410C90  +
jmp loc_410D4B  +
cmp edx 0Eh +
jz loc_411316  +
mov ebp edi +
nop   +
jmp loc_410B22  +
mov esi [ebx] +
mov edi offset aCommon +
mov ecx 7 +
mov [esp+0CCh+var_A0] esi +
cmps   +
jnz loc_41129B  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_41146B  +
mov eax ds:dword_50F340 +
test eax eax +
jz loc_411485  +
mov [esp+0CCh+var_C0] eax +
add eax 8 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] eax +
call sub_40CBF0  +
jmp loc_410BC0  +
mov eax [ebp+10h] +
mov eax [eax+4] +
mov eax [eax+16Ch] +
mov [esp+0CCh+var_C8] offset word_514820 +
mov [esp+0CCh+var_CC] ebx +
call eax  +
jmp loc_410BC0  +
mov [esp+0CCh+var_CC] offset aFPBfd_record_p +
call sub_418450  +
jmp loc_410E00  +
mov edx [esi+24h] +
mov ecx ds:dword_50F2B8 +
mov byte ptr [eax+0Ch] 3 +
mov dword ptr [eax+14h] offset off_4BFB90 +
shr edx cl +
mov [eax+18h] edx +
mov [esp+0CCh+var_CC] ebx +
call free  +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_410F5E  +
mov [esp+0CCh+var_CC] 4 +
call sub_40D790  +
call sub_417500  +
call sub_417430  +
cmp ds:byte_5147BC 0 +
jnz loc_41162D  +
mov ebx ds:dword_50F2B0 +
test ebx ebx +
jz loc_411197  +
mov eax [ebx] +
mov [esp+0CCh+var_BC] 1 +
mov [esp+0CCh+var_C0] 0 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] eax +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_CC] eax +
call sub_4500A0  +
test eax eax +
jz loc_41117E  +
movzx eax byte ptr [eax+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_411190  +
mov eax [ebx] +
mov [esp+0CCh+var_CC] offset aPXRequiredSymb +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_411144  +
movzx edx byte ptr ds:word_514820 +
mov eax edx +
and eax 43h +
cmp al 2 +
jz loc_4114D0  +
and edx 3 +
mov ebx 1 +
cmp dl 3 +
jz loc_4114D0  +
cmp al 42h +
jz loc_4114DE  +
mov eax ds:dword_50F278 +
test eax eax +
jz loc_411512  +
mov [esp+0CCh+var_C8] eax +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_BC] 1 +
mov [esp+0CCh+var_C0] 0 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_CC] eax +
call sub_4500A0  +
test eax eax +
jz loc_41120E  +
movzx edx byte ptr [eax+0Ch] +
sub edx 3 +
cmp dl 1 +
jbe loc_411949  +
lea eax [esp+0CCh+var_70] +
mov [esp+0CCh+var_C8] eax +
mov eax ds:dword_50F278 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_CC] eax +
call j_strtoul  +
mov edx [esp+0CCh+var_70] +
cmp byte ptr [edx] 0 +
jz loc_411277  +
mov eax off_4BE014 +
mov [esp+0CCh+var_C8] eax +
mov eax ds:dword_514850 +
mov [esp+0CCh+var_CC] eax +
call sub_44D4B0  +
test eax eax +
mov esi eax +
jz loc_411B4A  +
test ebx ebx +
jz loc_411274  +
mov eax [eax+1Ch] +
mov [esp+0CCh+var_CC] offset aPWarningCannot +
mov [esp+0CCh+var_C4] eax +
mov eax ds:dword_50F278 +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
mov eax [esi+1Ch] +
mov [esp+0CCh+var_C8] eax +
mov eax ds:dword_514850 +
mov [esp+0CCh+var_CC] eax +
call sub_44C120  +
test eax eax +
jz loc_411901  +
add esp 0CCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_51473C +
cmp eax 1 +
jz loc_4119F1  +
cmp eax 3 +
jz loc_4119D2  +
mov esi ds:dword_514758 +
mov edi 17Ch +
test esi esi +
jz loc_411612  +
mov eax [esp+0CCh+var_A0] +
mov [esp+0CCh+var_C4] edi +
mov [esp+0CCh+var_CC] ebx +
mov [esp+0CCh+var_C8] eax +
call sub_417580  +
test eax eax +
mov esi eax +
jz loc_411B70  +
cmp ds:dword_51473C 2 +
jnz loc_410BC0  +
mov edx [esi+18h] +
mov eax [ebx+94h] +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] offset aPWarningOrphan +
mov [esp+0CCh+var_C0] edx +
mov [esp+0CCh+var_C4] eax +
call sub_418450  +
jmp loc_410BC0  +
mov eax [edi+8] +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] 0 +
mov [esp+0CCh+var_CC] eax +
call sub_40C0C0  +
test eax eax +
jz loc_411453  +
mov ecx [edi+0Ch] +
test ecx ecx +
jnz loc_41144C  +
test ebx ebx +
jz loc_411411  +
mov ecx [ebx+10h] +
mov edx [esi+14h] +
mov [edx+10h] ecx +
mov ecx [ebx+10h] +
test ecx ecx +
jz loc_4119BB  +
mov [ecx+14h] edx +
mov edx [eax+10h] +
mov [ebx+10h] edx +
mov edx [eax+10h] +
test edx edx +
jz loc_4119A4  +
mov [edx+14h] ebx +
mov [esi+14h] eax +
xor edx edx +
xor ecx ecx +
mov [eax+10h] esi +
jmp loc_41138E  +
cmp ebx esi +
jz loc_4113B5  +
mov esi [esi+10h] +
test esi esi +
jz loc_4113B5  +
mov edi 0FFFFFFFEh +
sub edi [esi+48h] +
mov [esi+48h] edi +
mov edi [esi+1Ch] +
test edi edi +
jz loc_411383  +
cmp dword ptr [edi+94h] 0 +
jz loc_411383  +
test ecx ecx +
mov edx edi +
jnz loc_411383  +
cmp ebx esi +
mov ecx edi +
jnz loc_411387  +
test edx edx +
jz loc_411942  +
mov ebx [eax+1Ch] +
test ebx ebx +
jz loc_411918  +
xor esi esi +
cmp ebx edx +
jz loc_411411  +
mov edi [ecx+10h] +
mov esi [edx+0Ch] +
test edi edi +
mov [esp+0CCh+var_A0] edi +
jz loc_411A58  +
mov [edi+0Ch] esi +
mov esi [edx+0Ch] +
test esi esi +
jz loc_411A69  +
mov edi [esp+0CCh+var_A0] +
mov [esi+10h] edi +
mov esi [ebx+0Ch] +
mov [edx+0Ch] esi +
mov esi [ebx+0Ch] +
test esi esi +
jz loc_411A87  +
mov [esi+10h] edx +
mov [ecx+10h] ebx +
xor esi esi +
mov [ebx+0Ch] ecx +
call sub_407F10  +
mov ebx [ebp+0] +
mov edx ds:dword_5146F8 +
mov ebx [ebx] +
mov ecx [edx] +
mov [edx] ebx +
mov edx [eax] +
test edx edx +
mov [ebp+0] edx +
jz loc_411999  +
mov [eax] ecx +
xor ebx ebx +
mov ebp ds:dword_5146F8 +
jmp loc_410B22  +
mov edx [eax+48h] +
test edx edx +
jns loc_411344  +
mov eax [eax+14h] +
test eax eax +
jnz loc_411441  +
mov eax [edi+8] +
mov [esp+0CCh+var_CC] offset aFPSNotFoundFor +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
jmp loc_410BA8  +
mov eax ds:dword_5147A0 +
test eax eax +
jz loc_410BC0  +
mov eax ds:dword_50F340 +
test eax eax +
jnz loc_41109C  +
mov [esp+0CCh+var_C4] 1 +
mov [esp+0CCh+var_C8] 0 +
mov [esp+0CCh+var_CC] offset a_bss_0 +
call sub_40C0C0  +
mov ds:dword_50F340 eax +
jmp loc_41109C  +
mov [esp+0CCh+var_C8] esi +
mov [esp+0CCh+var_CC] offset aPXFailedToMerg +
call sub_418450  +
mov eax ds:dword_5147B4 +
test eax eax +
jnz loc_410785  +
jmp loc_410838  +
cmp al 42h +
mov ebx ds:dword_5146E0 +
jnz loc_4111C4  +
mov edx ds:dword_5146E0 +
test edx edx +
jnz loc_4111C4  +
mov eax ds:dword_514708 +
test eax eax +
jnz loc_4111C4  +
mov [esp+0CCh+var_CC] offset aPFGcSectionsRe +
call sub_418450  +
mov eax ds:dword_50F278 +
test eax eax +
jnz loc_4111D1  +
mov eax off_4BE020 +
xor ebx ebx +
mov ds:dword_50F278 eax +
jmp loc_4111D1  +
mov ebx ds:dword_5147A0 +
test ebx ebx +
jz loc_410AB9  +
mov eax ds:dword_51474C +
test eax eax +
jnz loc_410A5A  +
jmp loc_411A36  +
mov ecx ds:dword_50F27C +
test ecx ecx +
jz loc_410AD7  +
test byte ptr [ecx+25h] 20h +
jnz loc_411576  +
mov eax [ecx+10h] +
mov eax [eax+64h] +
test eax eax +
jz loc_411576  +
mov edx [eax+14h] +
test dh 20h +
jnz loc_41156F  +
and dh 7Fh +
mov [eax+14h] edx +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_411561  +
mov ecx [ecx+18h] +
test ecx ecx +
jnz loc_411551  +
jmp loc_410AD7  +
mov edx ds:dword_514850 +
mov [esp+0CCh+var_A0] eax +
mov ecx [edx+4] +
mov edi [ecx] +
mov ecx [esi+4] +
mov ecx [ecx] +
mov [esp+0CCh+var_BC] edx +
mov [esp+0CCh+var_C0] edi +
mov [esp+0CCh+var_C4] esi +
mov [esp+0CCh+var_C8] ecx +
mov [esp+0CCh+var_CC] offset aPFRelocatableL +
call sub_418450  +
mov eax [esp+0CCh+var_A0] +
test eax eax +
jnz loc_4107F5  +
mov eax ds:dword_5147B4 +
test eax eax +
jz loc_410785  +
mov eax ds:dword_514850 +
mov [esp+0CCh+var_CC] eax +
call sub_453550  +
mov [esp+0CCh+var_CC] esi +
mov edi eax +
call sub_453550  +
mov [esp+0CCh+var_C0] edi +
mov [esp+0CCh+var_C4] esi +
mov [esp+0CCh+var_CC] offset aPXSArchitectur +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
jmp loc_410785  +
mov [esp+0CCh+var_CC] offset dword_408020 +
call sub_44B9D0  +
mov edi eax +
jmp loc_41080B  +
xor edx edx +
mov eax ebx +
call sub_40A640  +
cmp eax 1 +
sbb edi edi +
not edi  +
and edi 17Ch +
jmp loc_4112C5  +
mov eax ds:dword_514850 +
mov eax [eax+6Ch] +
cmp eax 1 +
jbe loc_41113A  +
shl eax 2 +
mov [esp+0CCh+var_CC] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax ds:dword_514850 +
mov eax [eax+64h] +
test eax eax +
jz loc_41113A  +
xor ebx ebx +
jmp loc_411666  +
mov eax [eax+0Ch] +
test eax eax +
jz loc_411686  +
mov edx [eax+14h] +
and edx 3 +
cmp edx 3 +
jnz loc_41165F  +
mov esi [eax+24h] +
test esi esi +
jz loc_41165F  +
mov [ebp+ebx*4+0] eax +
mov eax [eax+0Ch] +
add ebx 1 +
test eax eax +
jnz loc_411666  +
cmp ebx 1 +
jbe loc_41113A  +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_C0] offset sub_407FE0 +
mov [esp+0CCh+var_C4] 4 +
mov [esp+0CCh+var_CC] ebp +
call qsort  +
mov eax [ebp+0] +
mov ecx ds:dword_50F2B8 +
mov edx [eax+20h] +
mov [esp+0CCh+var_9C] eax +
mov eax [eax+24h] +
shr eax cl +
lea eax [edx+eax-1] +
mov [esp+0CCh+var_A0] eax +
lea eax [ebx-2] +
xor ebx ebx +
mov [esp+0CCh+var_98] eax +
jmp loc_4116F0  +
cmp edi ecx +
jbe loc_411708  +
cmp ebx [esp+0CCh+var_98] +
jz loc_411756  +
mov ecx ds:dword_50F2B8 +
add ebx 1 +
mov edx edi +
mov [esp+0CCh+var_9C] esi +
mov [esp+0CCh+var_A0] eax +
mov esi [ebp+ebx*4+4] +
mov eax [esi+24h] +
mov edi [esi+20h] +
shr eax cl +
mov ecx [esp+0CCh+var_A0] +
lea eax [edi+eax-1] +
cmp ecx edx +
jnb loc_4116D3  +
mov ecx [esp+0CCh+var_9C] +
mov [esp+0CCh+var_94] eax +
mov eax [esp+0CCh+var_A0] +
mov ecx [ecx] +
mov [esp+0CCh+var_9C] ecx +
mov ecx [esi] +
mov [esp+0CCh+var_B4] eax +
mov eax [esp+0CCh+var_94] +
mov [esp+0CCh+var_B8] edx +
mov edx [esp+0CCh+var_9C] +
mov [esp+0CCh+var_C4] edi +
mov [esp+0CCh+var_C8] ecx +
mov [esp+0CCh+var_C0] eax +
mov [esp+0CCh+var_BC] edx +
mov [esp+0CCh+var_CC] offset aXPSectionSLoad +
mov [esp+0CCh+var_A0] eax +
call sub_418450  +
mov eax [esp+0CCh+var_A0] +
cmp ebx [esp+0CCh+var_98] +
jnz loc_4116DD  +
mov [esp+0CCh+var_CC] ebp +
call free  +
mov ebx ds:dword_50F2C4 +
test ebx ebx +
jnz loc_41177B  +
jmp loc_41113A  +
mov ebx [ebx+8] +
test ebx ebx +
jz loc_41113A  +
mov ecx [ebx+2Ch] +
test ecx ecx +
jz loc_411770  +
mov edx [ebx+10h] +
mov eax [ebx+1Ch] +
add edx [ebx+14h] +
mov ecx [ebx] +
mov [esp+0CCh+var_CC] offset aXPRegionSOverf +
sub eax edx +
mov [esp+0CCh+var_C4] eax +
mov [esp+0CCh+var_C8] ecx +
call sub_418450  +
jmp loc_411770  +
mov eax off_4BE018 +
mov edx [eax+4] +
mov eax [eax] +
mov [esp+0CCh+var_7C] edx +
mov edx ds:dword_50F280 +
mov [esp+0CCh+var_80] eax +
mov eax ds:dword_50F27C +
mov [esp+0CCh+var_74] edx +
mov edx ds:dword_514704 +
mov [esp+0CCh+var_78] eax +
mov eax ds:dword_514700 +
mov [esp+0CCh+var_6C] edx +
mov [esp+0CCh+var_70] eax +
call sub_41B690  +
test eax eax +
jnz loc_411B30  +
mov eax [esp+0CCh+var_7C] +
xor edx edx +
lea ebx [esp+0CCh+var_70] +
mov eax [eax] +
call sub_40E600  +
mov eax off_4BE018 +
lea edx [esp+0CCh+var_80] +
call sub_408050  +
lea edx [esp+0CCh+var_78] +
mov eax offset dword_50F27C +
call sub_408050  +
mov edx ebx +
mov eax offset dword_514700 +
call sub_408050  +
mov ecx [esp+0CCh+var_80] +
test ecx ecx +
jz loc_41064E  +
mov eax ds:dword_50F27C +
mov ecx ds:dword_514700 +
test eax eax +
jnz loc_411860  +
jmp loc_411B01  +
mov edx [eax+10h] +
test edx edx +
jz loc_411855  +
mov edx [edx+8Ch] +
test edx edx +
cmovz ecx eax +
mov eax [eax+18h] +
test eax eax +
jz loc_411B01  +
movzx edx byte ptr [eax+25h] +
test dl 20h +
jz loc_411843  +
and edx 40h +
jnz loc_411B01  +
mov ds:dword_50F2B4 eax +
mov ecx [esp+0CCh+var_7C] +
mov ebx [eax] +
mov edx off_4BE018 +
mov [ecx] ebx +
mov ecx [esp+0CCh+var_80] +
mov [eax] ecx +
cmp eax [edx+4] +
jz loc_411C18  +
mov edx [esp+0CCh+var_6C] +
mov ecx [eax+1Ch] +
mov [edx] ecx +
mov edx [esp+0CCh+var_70] +
mov [eax+1Ch] edx +
lea edx [eax+1Ch] +
cmp ds:dword_514704 edx +
jz loc_411C09  +
mov ebp [eax+8] +
test ebp ebp +
jz loc_411BD6  +
mov ecx [eax+18h] +
add eax 18h +
mov edx [esp+0CCh+var_74] +
mov [edx] ecx +
mov edx [esp+0CCh+var_78] +
mov [eax] edx +
cmp ds:dword_50F280 eax +
jz loc_411BFB  +
mov eax ds:dword_50F328 +
mov edx 2 +
call sub_40E600  +
jmp loc_41064E  +
mov [esp+0CCh+var_CC] offset aPFFailedToCrea +
call sub_418450  +
jmp loc_41062B  +
mov [esp+0CCh+var_CC] offset aPFCanTSetStart +
call sub_418450  +
add esp 0CCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [eax+14h] +
test esi esi +
jz loc_411942  +
mov ebx [esi+48h] +
test ebx ebx +
js loc_41193B  +
mov ebx [esi+1Ch] +
test ebx ebx +
jz loc_41193B  +
mov edi [ebx+94h] +
test edi edi +
jnz loc_4113C8  +
mov esi [esi+14h] +
test esi esi +
jnz loc_41191F  +
xor esi esi +
jmp loc_411411  +
mov ecx [eax+14h] +
mov edx [ecx+3Ch] +
test edx edx +
jz loc_41120E  +
mov edx [edx+1Ch] +
add edx [eax+18h] +
mov eax ds:dword_514850 +
add edx [ecx+38h] +
mov [esp+0CCh+var_CC] eax +
mov [esp+0CCh+var_C8] edx +
call sub_44C120  +
test eax eax +
jnz loc_411290  +
mov eax ds:dword_50F278 +
mov [esp+0CCh+var_CC] offset aPFSCanTSetStar +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
add esp 0CCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_50F32C ebp +
jmp loc_411432  +
lea edx [ebx+10h] +
mov ds:dword_5146FC edx +
jmp loc_411377  +
and dword ptr [eax+14h] 0FFFFFFF7h +
jmp loc_410C4B  +
add edx 10h +
mov ds:dword_5146FC edx +
jmp loc_411363  +
mov [esp+0CCh+var_98] edx +
jmp loc_410CB9  +
mov eax [ebx+94h] +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] offset aXPErrorUnplace +
mov [esp+0CCh+var_C4] eax +
call sub_418450  +
jmp loc_4112B2  +
mov [esp+0CCh+var_C4] 1 +
mov [esp+0CCh+var_C8] 0 +
mov [esp+0CCh+var_CC] offset aDiscard_0 +
call sub_40C0C0  +
mov edi [eax+2Ch] +
mov esi eax +
test edi edi +
jz loc_411A95  +
mov [esp+0CCh+var_C0] esi +
add esi 8 +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] esi +
call sub_40CBF0  +
jmp loc_410BC0  +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] offset sub_409CF0 +
mov [esp+0CCh+var_CC] eax +
call sub_450810  +
jmp loc_410AB9  +
mov edi ds:dword_514850 +
test esi esi +
mov [edi+64h] esi +
jnz loc_4113EE  +
mov esi ds:dword_514850 +
mov edi [esp+0CCh+var_A0] +
mov [esi+68h] edi +
mov esi [ebx+0Ch] +
mov [edx+0Ch] esi +
mov esi [ebx+0Ch] +
test esi esi +
jnz loc_411406  +
mov esi ds:dword_514850 +
mov [esi+68h] edx +
jmp loc_411409  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_411AAD  +
test byte ptr [ebx+14h] 3 +
jnz loc_411A16  +
mov [esp+0CCh+var_CC] 0 +
call sub_416850  +
mov [esi+2Ch] eax +
jmp loc_411A16  +
mov [esp+0CCh+var_70] 4 +
lea ebx [esp+0CCh+var_70] +
mov eax ds:dword_51483C +
mov [esp+0CCh+var_C4] ebx +
mov [esp+0CCh+var_C8] offset sub_409CF0 +
mov [esp+0CCh+var_CC] eax +
call sub_450810  +
sub [esp+0CCh+var_70] 1 +
jnz loc_411ACD  +
jmp loc_410AA0  +
mov eax ds:dword_50F274 +
mov ds:dword_514860 eax +
jmp loc_410666  +
test ecx ecx +
mov eax ecx +
mov ds:dword_50F2B4 ecx +
jnz loc_411877  +
mov [esp+0CCh+var_C8] 1A6Ch +
mov [esp+0CCh+var_CC] offset a____Binutils_0 +
call sub_4184A0  +
mov eax ds:dword_50F2B4 +
jmp loc_411877  +
call sub_41B180  +
mov [esp+0CCh+var_CC] offset aPFSPluginRep_0 +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
jmp loc_4117EA  +
test ebx ebx +
jz loc_411290  +
mov eax ds:dword_50F278 +
mov [esp+0CCh+var_CC] offset aPWarningCann_0 +
mov [esp+0CCh+var_C8] eax +
call sub_418450  +
jmp loc_411290  +
mov eax [esp+0CCh+var_A0] +
mov [esp+0CCh+var_C4] 1 +
mov [esp+0CCh+var_C8] edi +
mov [esp+0CCh+var_CC] eax +
call sub_40C0C0  +
mov ecx [eax+2Ch] +
mov esi eax +
test ecx ecx +
jz loc_411BB1  +
lea eax [esi+8] +
mov [esp+0CCh+var_C0] esi +
mov [esp+0CCh+var_C4] 0 +
mov [esp+0CCh+var_C8] ebx +
mov [esp+0CCh+var_CC] eax +
call sub_40CBF0  +
jmp loc_4112E3  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_411BC5  +
test byte ptr [ebx+14h] 3 +
jnz loc_411B91  +
mov [esp+0CCh+var_CC] 0 +
call sub_416850  +
mov [esi+2Ch] eax +
jmp loc_411B91  +
mov edx ds:dword_50F27C +
mov eax [esp+0CCh+var_74] +
mov [eax] edx +
mov eax [esp+0CCh+var_78] +
cmp ds:dword_50F280 offset dword_50F27C +
mov ds:dword_50F27C eax +
jnz loc_4118DC  +
mov eax [esp+0CCh+var_74] +
mov ds:dword_50F280 eax +
jmp loc_4118DC  +
mov edx [esp+0CCh+var_6C] +
mov ds:dword_514704 edx +
jmp loc_4118B3  +
mov ecx [esp+0CCh+var_7C] +
mov [edx+4] ecx +
jmp loc_411894  +
***
push ebx  +
sub esp 10h +
mov [esp+10h+var_10] 8 +
mov esi [esp+10h+arg_4] +
call sub_4A05F0  +
mov ebx ds:dword_51489C +
test ebx ebx +
mov edi eax +
mov eax [esp+10h+arg_0] +
mov [edi] eax +
jnz loc_411C66  +
jmp loc_411C85  +
mov ebx [ebx] +
test ebx ebx +
jz loc_411C85  +
mov [esp+10h+var_C] esi +
mov eax [ebx+4] +
mov [esp+10h+var_10] eax +
call strcmp  +
test eax eax +
jnz loc_411C60  +
mov [edi+4] ebx +
add esp 10h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] offset aXPUnableToFind +
call sub_418450  +
mov eax edi +
mov dword ptr [edi+4] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
sub esp 14h +
mov ecx ds:dword_514898 +
mov ebx [esp+18h+arg_0] +
test ecx ecx +
jz loc_411D39  +
mov edx ebx +
jmp loc_411D28  +
mov edx eax +
mov eax [edx] +
test eax eax +
jnz loc_411D26  +
mov eax [ecx] +
mov [edx] eax +
mov [ecx] ebx +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] 14h +
mov [esp+18h+var_18] 1 +
call sub_4A0620  +
mov [eax] ebx +
mov dword ptr [eax+10h] offset sub_408B00 +
mov ds:dword_514898 eax +
jmp loc_411D34  +
***
sub esp 1Ch +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] offset aC_1 +
mov [esp+1Ch+var_18] offset aTypeinfoName_0 +
mov [esp+1Ch+var_1C] 0 +
call sub_4100D0  +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] offset aC_1 +
mov [esp+1Ch+var_18] offset aTypeinfoFor_0 +
mov [esp+1Ch+var_1C] eax +
call sub_4100D0  +
mov [esp+1Ch+var_1C] eax +
call sub_411D10  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] offset aC_1 +
mov [esp+1Ch+var_18] offset aOperatorNew +
mov [esp+1Ch+var_1C] 0 +
call sub_4100D0  +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] offset aC_1 +
mov [esp+1Ch+var_18] offset aOperatorDelete +
mov [esp+1Ch+var_1C] eax +
call sub_4100D0  +
mov [esp+1Ch+var_1C] eax +
call sub_411D10  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
movzx ebx byte ptr [esi] +
test bl bl +
jz loc_411ECA  +
mov ebp ds:_stricmp +
jmp loc_411E46  +
add esi 1 +
movzx ebx byte ptr [esi] +
cmp bl 2Ch +
jz loc_411E40  +
movzx eax bl +
test byte ptr ds:word_509C60[eax+eax] 40h +
jnz loc_411E40  +
test bl bl +
jz loc_411ECA  +
movzx ebx byte ptr [esi+1] +
lea edi [esi+1] +
test bl bl +
jz loc_411E8C  +
cmp bl 2Ch +
jnz loc_411E7F  +
jmp loc_411E8C  +
add edi 1 +
movzx ebx byte ptr [edi] +
cmp bl 2Ch +
jz loc_411E8C  +
test bl bl +
jz loc_411E8C  +
movzx eax bl +
test byte ptr ds:word_509C60[eax+eax] 40h +
jz loc_411E70  +
mov byte ptr [edi] 0 +
mov [esp+1Ch+var_18] offset aSane_expr +
mov [esp+1Ch+var_1C] esi +
call ebp  +
test eax eax +
jnz loc_411EB4  +
test bl bl +
mov ds:dword_514760 1 +
mov [edi] bl +
jz loc_411ECA  +
mov esi edi +
jmp loc_411E46  +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] offset aXPUnknownFeatu +
call sub_418450  +
test bl bl +
mov [edi] bl +
jnz loc_411EB0  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 24h +
mov [esp+24h+var_24] offset aMemoryRegionUs +
call printf  +
mov ebx ds:dword_50F2C4 +
mov edx [ebx+8] +
test edx edx +
jz loc_411F68  +
nop   +
mov eax [ebx] +
mov esi [ebx+1Ch] +
sub esi [ebx+10h] +
mov [esp+24h+var_24] offset a16s_0 +
mov dword ptr [esp+24h+var_20] eax +
call printf  +
mov eax esi +
call sub_40A960  +
mov eax [ebx+14h] +
call sub_40A960  +
xor edx edx +
mov dword ptr [esp+24h+var_C+4] edx +
xor edx edx +
mov dword ptr [esp+24h+var_C] esi +
mov eax [ebx+14h] +
mov [esp+24h+var_24] offset a6_2f +
fild  [esp+24h+var_C] +
fmul  ds:flt_4D221C +
mov dword ptr [esp+24h+var_C] eax +
mov dword ptr [esp+24h+var_C+4] edx +
fild  [esp+24h+var_C] +
fdivp st(1) st +
fstp  [esp+24h+var_20] +
call printf  +
mov ebx [ebx+8] +
mov eax [ebx+8] +
test eax eax +
jnz loc_411F00  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
mov edi edx +
push esi  +
mov esi eax +
push ebx  +
sub esp 1Ch +
mov ebx [eax] +
nop   +
test ebx ebx +
jz loc_411F9F  +
mov eax [ebx+4] +
mov [esp+28h+var_28] edi +
mov [esp+28h+var_24] eax +
call strcmp  +
test eax eax +
jnz loc_411FE7  +
mov ebx [ebx] +
test ebx ebx +
mov [esi] ebx +
jnz loc_411F84  +
mov [esp+28h+var_28] 1Ch +
call sub_4A05F0  +
mov edx [esp+28h+arg_0] +
mov [esi] eax +
mov [eax+4] edi +
mov eax [esi] +
mov [eax+0Ch] ebp +
mov eax [esi] +
mov dword ptr [eax] 0 +
mov eax [esi] +
mov [eax+8] edx +
mov edx [esp+28h+arg_4] +
mov dword ptr [eax+18h] 0 +
mov eax [esi] +
mov [eax+10h] edx +
mov edx [esp+28h+arg_8] +
mov eax [esi] +
mov [eax+14h] edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi ebx +
mov ebx [ebx] +
jmp loc_411F80  +
***
sub esp 1Ch +
sub esp 1Ch +
xor ecx ecx +
mov edx [esp+1Ch+arg_0] +
mov eax offset dword_50F3F4 +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
call sub_411F70  +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov ds:dword_50F3FC eax +
retn   +
***
mov eax ds:dword_50F3E0 +
test eax eax +
jnz locret_4122FE  +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebp ds:dword_50F3F0 +
mov ebx ds:dword_50F3F8 +
test ebp ebp +
jz loc_4120F4  +
test ebx ebx +
jnz loc_41209F  +
mov ds:dword_50F3F8 ebp +
mov ebx ebp +
jmp loc_41209F  +
mov eax [ebp+0Ch] +
mov ebp [ebp+0] +
mov [esi+0Ch] eax +
test ebp ebp +
jz loc_4120F4  +
test ebx ebx +
mov edi [ebp+4] +
mov esi ebx +
jz loc_4120C1  +
mov eax [esi+4] +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_48] eax +
call strcmp  +
test eax eax +
jz loc_412092  +
mov esi [esi] +
test esi esi +
jnz loc_4120A8  +
mov ecx [ebp+0Ch] +
mov edx edi +
mov eax offset dword_50F3F8 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] 0 +
call sub_411F70  +
mov ebp [ebp+0] +
mov ebx ds:dword_50F3F8 +
test ebp ebp +
jnz loc_41209F  +
mov ebp ds:dword_50F3F4 +
test ebp ebp +
jz loc_412334  +
test ebx ebx +
jz loc_412327  +
lea esi [esi+0] +
mov edi [ebp+4] +
mov esi ebx +
mov [esp+4Ch+var_48] edi +
mov eax [esi+4] +
mov [esp+4Ch+var_4C] eax +
call strcmp  +
test eax eax +
jnz loc_41212F  +
mov dword ptr [esi+18h] 1 +
mov esi [esi] +
test esi esi +
jnz loc_412115  +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_412110  +
lea esi [esi+0] +
mov esi ds:dword_50F3E8 +
test esi esi +
jz loc_41231A  +
mov ebp [ebx+4] +
mov [esp+4Ch+var_20] 0 +
lea esi [esi+0] +
mov [esp+4Ch+var_48] ebp +
mov eax [esi+4] +
mov [esp+4Ch+var_4C] eax +
call strcmp  +
test eax eax +
jnz loc_41217A  +
mov eax [esi+10h] +
mov [esp+4Ch+var_20] eax +
mov esi [esi] +
test esi esi +
jnz loc_412160  +
mov edi ds:dword_50F3E4 +
test edi edi +
jz loc_412313  +
mov esi [ebx+4] +
xor ebp ebp +
mov [esp+4Ch+var_48] esi +
mov eax [edi+4] +
mov [esp+4Ch+var_4C] eax +
call strcmp  +
test eax eax +
jnz loc_4121A9  +
mov ebp [edi+14h] +
mov edi [edi] +
test edi edi +
jnz loc_412193  +
mov edx ds:dword_50F3FC +
test edx edx +
jz loc_412300  +
cmp dword ptr [ebx+18h] 1 +
mov ecx [ebx+4] +
mov edi [esp+4Ch+var_20] +
sbb eax eax +
and eax 2 +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_4C] ecx +
mov [esp+4Ch+var_30] 0 +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] ebp +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_44] eax +
call sub_40E8A0  +
mov [esp+4Ch+var_4C] 14h +
mov ds:dword_50F3FC 0 +
call sub_4A05F0  +
mov edx [ebx+4] +
mov dword ptr [eax] 0 +
mov [eax+4] edx +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] 0 +
call sub_40EE80  +
mov esi ds:dword_50F3EC +
test esi esi +
jnz loc_41225E  +
jmp loc_4122BF  +
mov esi [esi] +
test esi esi +
jz loc_4122BF  +
mov eax [ebx+4] +
mov [esp+4Ch+var_48] eax +
mov eax [esi+8] +
mov [esp+4Ch+var_4C] eax +
call strcmp  +
test eax eax +
jnz loc_412258  +
mov [esp+4Ch+var_4C] 14h +
call sub_4A05F0  +
mov edx [esi+4] +
mov dword ptr [eax] 0 +
mov [eax+4] edx +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] 0 +
call sub_40EE80  +
mov esi [esi] +
test esi esi +
jnz loc_41225E  +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] offset aDefault_3 +
mov [esp+4Ch+var_4C] 0 +
call sub_40F490  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_412140  +
mov ds:dword_50F3E0 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_412352  +
mov ds:dword_50F3FC eax +
mov edx eax +
jmp loc_4121BD  +
xor ebp ebp +
jmp loc_4121AF  +
mov [esp+4Ch+var_20] 0 +
jmp loc_412180  +
mov ds:dword_50F3F8 ebp +
mov ebx ebp +
jmp loc_412110  +
test ebx ebx +
mov eax ebx +
jz loc_4122ED  +
lea esi [esi+0] +
mov dword ptr [eax+18h] 1 +
mov eax [eax] +
test eax eax +
jnz loc_412340  +
jmp loc_412140  +
mov [esp+4Ch+var_48] offset unk_4D2220 +
mov [esp+4Ch+var_4C] 103h +
call sub_416BF0  +
jmp loc_412307  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] 5 +
mov ds:dword_50F3FC 0 +
mov [esp+1Ch+var_1C] eax +
call sub_40B090  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
xor ecx ecx +
mov edx [esp+1Ch+arg_0] +
mov eax offset dword_50F3F8 +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
call sub_411F70  +
add esp 1Ch +
retn   +
***
mov edx [esp+38h+arg_4] +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 1 +
mov [esp+1Ch+var_1C] eax +
call sub_40E870  +
add esp 1Ch +
retn   +
***
push esi  +
mov edi offset aS_9 +
sub esp 14h +
mov eax [esp+18h+arg_0] +
mov esi eax +
cmps   +
jz loc_4124F0  +
mov edi offset aIeee +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_412520  +
mov edi offset aCoff +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_4124C3  +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] offset aPFUnknownForma +
call sub_418450  +
add esp 14h +
pop esi  +
pop edi  +
retn   +
mov [esp+18h+var_C] 1 +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] offset aCoffM68k +
call sub_40FAA0  +
add esp 14h +
pop esi  +
pop edi  +
retn   +
mov [esp+18h+var_C] 1 +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] offset aSrec +
call sub_40FAA0  +
add esp 14h +
pop esi  +
pop edi  +
retn   +
mov [esp+18h+var_C] 1 +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] offset aIeee_0 +
call sub_40FAA0  +
add esp 14h +
pop esi  +
pop edi  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_416CB0  +
mov [esp+1Ch+arg_0] eax +
add esp 1Ch +
jmp sub_40F3D0  +
***
sub esp 1Ch +
xor ecx ecx +
mov eax [esp+1Ch+arg_4] +
mov edx [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_18] eax +
mov eax offset dword_50F3E8 +
call sub_411F70  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
xor ecx ecx +
mov eax [esp+1Ch+arg_4] +
mov edx [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] eax +
mov eax offset dword_50F3E4 +
call sub_411F70  +
add esp 1Ch +
retn   +
***
mov eax [esp+arg_0] +
mov dword_4BE024 eax +
retn   +
***
sub esp 14h +
cmp byte ptr [eax] 5Fh +
jnz loc_412608  +
lea esi [esi+0] +
add eax 1 +
cmp byte ptr [eax] 5Fh +
jz loc_412600  +
mov edi offset aGlobal_ +
mov ecx 7 +
mov esi eax +
cmps   +
jnz loc_412650  +
movzx ecx byte ptr [eax+9] +
cmp [eax+7] cl +
jnz loc_412650  +
movzx edx byte ptr [eax+8] +
cmp dl 44h +
jnz loc_412649  +
movzx edx byte ptr [eax+0Ah] +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_412650  +
add eax 0Ah +
mov [esp+14h+var_14] eax +
call atoi  +
add esp 14h +
pop esi  +
pop edi  +
retn   +
cmp dl 49h +
jz loc_41262A  +
nop   +
add esp 14h +
mov eax 0FFFFFFFFh +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 0Ch +
mov edi [esp+18h+arg_0] +
mov esi [esp+18h+arg_4] +
mov eax [edi] +
mov ecx [esi] +
mov eax [eax+4] +
mov ebx [ecx+4] +
test eax eax +
cmovz eax edx +
test ebx ebx +
cmovz ebx edx +
call sub_4125F0  +
mov ebp eax +
mov eax ebx +
call sub_4125F0  +
mov edx 1 +
cmp ebp eax +
jl loc_4126B0  +
jg loc_4126C0  +
xor eax eax +
cmp edi esi +
setnbe al  +
mov edx 0FFFFFFFFh +
cmovnb edx eax +
add esp 0Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx 0FFFFFFFFh +
jmp loc_4126B0  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx ds:dword_514718 +
mov eax [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_0] +
mov ecx [esp+1Ch+arg_4] +
test ebx ebx +
mov esi [esp+1Ch+arg_C] +
mov [esp+1Ch+var_14] eax +
mov ebp [esp+1Ch+arg_10] +
jnz loc_412706  +
jmp loc_412760  +
mov ebx [ebx] +
test ebx ebx +
jz loc_412760  +
cmp [ebx+4] edi +
jnz loc_412700  +
cmp [ebx+8] ecx +
jnz loc_4127D6  +
mov eax [ebx+10h] +
test eax eax +
jz loc_412797  +
mov ecx [esi+94h] +
test ecx ecx +
jz loc_412797  +
mov eax [eax+8] +
mov eax [eax+94h] +
test eax eax +
jz loc_412797  +
mov eax [eax+4] +
mov eax [eax] +
mov [esp+1Ch+var_18] eax +
mov eax [ecx+4] +
mov eax [eax] +
mov [esp+1Ch+var_1C] eax +
call strcmp  +
test eax eax +
jz loc_412797  +
mov eax [edi+4] +
mov [esp+1Ch+arg_0] offset aPXDifferentObj +
mov [esp+1Ch+arg_4] eax +
jmp loc_4127E5  +
mov [esp+1Ch+var_1C] 14h +
mov [esp+1Ch+var_10] ecx +
call sub_4A05F0  +
mov ecx [esp+1Ch+var_10] +
mov ebx eax +
mov eax ds:dword_514718 +
mov [ebx+4] edi +
mov [ebx+8] ecx +
mov dword ptr [ebx+0Ch] 0 +
mov [ebx] eax +
mov dword ptr [ebx+10h] 0 +
mov ds:dword_514718 ebx +
mov [esp+1Ch+var_1C] 10h +
call sub_4A05F0  +
mov edi [esp+1Ch+var_14] +
mov dword ptr [eax] 0 +
mov [eax+4] edi +
mov [eax+8] esi +
mov ecx [ebx+10h] +
mov [eax+0Ch] ebp +
test ecx ecx +
jnz loc_4127C2  +
jmp loc_4127F1  +
mov ecx edx +
mov edx [ecx] +
test edx edx +
jnz loc_4127C0  +
mov [ecx] eax +
add dword ptr [ebx+0Ch] 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+4] +
mov [esp+1Ch+arg_0] offset aPXDifferentRel +
mov [esp+1Ch+arg_4] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_418450  +
lea ecx [ebx+10h] +
jmp loc_4127C8  +
***
mov ecx ds:dword_50F400 +
test ecx ecx +
jnz locret_412C51  +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edx ds:dword_51470C +
mov ds:dword_50F400 1 +
test edx edx +
jnz loc_412B9B  +
mov [esp+3Ch+var_3C] offset dword_514710 +
xor ebp ebp +
call sub_40AFF0  +
mov [esp+3Ch+var_3C] offset dword_514710 +
call sub_40B000  +
mov esi ds:dword_514718 +
test esi esi +
jz loc_412A3F  +
mov eax [esi+4] +
movzx eax byte ptr [eax+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_412A35  +
mov eax [esi+8] +
mov [esp+3Ch+var_38] eax +
mov eax ds:dword_514850 +
mov [esp+3Ch+var_3C] eax +
call sub_44F6C0  +
test eax eax +
mov [esp+3Ch+var_20] eax +
jz loc_412ACE  +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_3C] eax +
call sub_44E820  +
cmp eax 2 +
mov ebx eax +
jz loc_412B8E  +
jle loc_412B4A  +
cmp eax 4 +
mov [esp+3Ch+var_24] 11Ch +
jz loc_4128D4  +
cmp eax 8 +
jnz loc_412B5B  +
mov eax [esp+3Ch+var_20] +
cmp dword ptr [eax+18h] 2 +
setz al  +
movzx eax al +
mov [esp+3Ch+var_24] eax +
add [esp+3Ch+var_24] 11Ah +
mov [esp+3Ch+var_3C] ebx +
call sub_416850  +
mov [esp+3Ch+var_3C] 117h +
mov [esp+3Ch+var_38] eax +
call sub_416B40  +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_3C] offset a__3 +
mov [esp+3Ch+var_38] eax +
call sub_416CB0  +
mov [esp+3Ch+var_3C] eax +
call sub_40F3D0  +
mov [esp+3Ch+var_38] offset a__3 +
mov [esp+3Ch+var_3C] 103h +
call sub_416BF0  +
mov edx [esi+4] +
mov edx [edx+4] +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] edx +
call sub_416CB0  +
mov [esp+3Ch+var_3C] eax +
call sub_40F3D0  +
mov eax [esi+0Ch] +
mov [esp+3Ch+var_3C] eax +
call sub_416850  +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] eax +
call sub_40F320  +
mov ebx [esi+10h] +
test ebx ebx +
jz loc_412A19  +
mov eax ds:dword_514770 +
test eax eax +
jz loc_4129D0  +
test ebp ebp +
jz loc_412A90  +
mov eax [esi+4] +
mov eax [eax+4] +
mov [esp+3Ch+var_3C] offset aS_20 +
mov [esp+3Ch+var_38] eax +
call sub_4184D0  +
mov eax [esi+4] +
mov eax [eax+4] +
mov [esp+3Ch+var_3C] eax +
call strlen  +
cmp eax 12h +
mov edi eax +
jg loc_412A82  +
add edi 1 +
call sub_418560  +
cmp edi 13h +
jle loc_4129A8  +
mov eax [ebx+4] +
test eax eax +
jz loc_412AA5  +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] offset aT_1 +
call sub_4184D0  +
mov eax [ebx+8] +
cmp eax offset off_4BFB90 +
jz loc_4129E1  +
or dword ptr [eax+14h] 200000h +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_412A50  +
mov edx [ebx+0Ch] +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] edx +
call sub_4168F0  +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] eax +
call sub_40F320  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_412968  +
mov [esp+3Ch+var_3C] 0 +
call sub_416850  +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] eax +
call sub_40F320  +
mov esi [esi] +
test esi esi +
jnz loc_412855  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_40B050  +
mov eax [ebx+0Ch] +
mov [esp+3Ch+var_3C] eax +
call sub_416850  +
mov ecx [ebx+4] +
mov edx [ebx+8] +
mov edi [esi+8] +
mov [esp+3Ch+var_30] ecx +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_2C] eax +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_38] eax +
call sub_40F360  +
jmp loc_412A0F  +
call sub_418580  +
xor edi edi +
jmp loc_4129A8  +
mov [esp+3Ch+var_3C] offset aSetSymbol +
mov bp 1 +
call sub_4184D0  +
jmp loc_412979  +
mov eax [ebx+8] +
mov ecx [ebx+0Ch] +
mov edx [eax+94h] +
mov [esp+3Ch+var_30] ecx +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] offset aG_0 +
mov [esp+3Ch+var_38] edx +
call sub_4184D0  +
jmp loc_4129D0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_412C57  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov eax [eax+94h] +
test eax eax +
jz loc_412B0B  +
mov edx [esi+8] +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] edx +
call sub_44F6C0  +
test eax eax +
mov [esp+3Ch+var_20] eax +
jnz loc_412887  +
mov eax [esi+4] +
mov ebx [eax+4] +
mov eax [esi+8] +
mov [esp+3Ch+var_3C] eax +
call sub_44F780  +
mov edx [esi+10h] +
mov edx [edx+8] +
mov edx [edx+94h] +
mov edx [edx+4] +
mov edx [edx] +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] offset aPXSDoesNotSupp +
mov [esp+3Ch+var_38] edx +
call sub_418450  +
jmp loc_412A35  +
cmp eax 1 +
mov [esp+3Ch+var_24] 11Eh +
jz loc_4128D4  +
mov eax [esi+4] +
mov edi [eax+4] +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_3C] eax +
call sub_44E820  +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_3C] offset aPXUnsupportedS +
mov [esp+3Ch+var_38] eax +
call sub_418450  +
mov [esp+3Ch+var_24] 11Ch +
jmp loc_4128D4  +
mov [esp+3Ch+var_24] 11Dh +
jmp loc_4128D4  +
mov esi ds:dword_514718 +
test esi esi +
jz loc_41282D  +
lea esi [esi+0] +
mov eax [esi+10h] +
test eax eax +
jz loc_412C42  +
xor ebx ebx +
jmp loc_412BC2  +
mov ebx edi +
mov eax [eax] +
lea edi [ebx+1] +
test eax eax +
jnz loc_412BC0  +
lea eax ds:0[edi*4] +
mov [esp+3Ch+var_3C] eax +
call sub_4A05F0  +
mov edx [esi+10h] +
test edx edx +
mov ebp eax +
mov ecx eax +
jz loc_412BF0  +
mov [ecx] edx +
mov edx [edx] +
add ecx 4 +
test edx edx +
jnz loc_412BE5  +
mov [esp+3Ch+var_38] edi +
lea edi ds:0[ebx*4] +
mov [esp+3Ch+var_30] offset sub_412660 +
mov [esp+3Ch+var_34] 4 +
mov [esp+3Ch+var_3C] ebp +
call qsort  +
mov eax [ebp+0] +
test ebx ebx +
mov edx ebp +
lea ecx [ebp+edi+0] +
mov [esi+10h] eax +
jz loc_412C53  +
mov eax [edx] +
add edx 4 +
mov ebx [edx] +
cmp edx ecx +
mov [eax] ebx +
jnz loc_412C23  +
mov eax [ebp+edi+0] +
mov dword ptr [eax] 0 +
mov [esp+3Ch+var_3C] ebp +
call free  +
mov esi [esi] +
test esi esi +
jnz loc_412BB0  +
jmp loc_41282D  +
retn   +
xor edi edi +
jmp loc_412C30  +
mov eax [esi+4] +
mov ebx [eax+4] +
mov eax [esi+8] +
mov [esp+3Ch+var_3C] eax +
call sub_44F780  +
mov edx ds:dword_514850 +
jmp loc_412B28  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call ds:dword_50F41C  +
mov ds:dword_514724 0 +
add esp 1Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] offset aXHRelocRefersT +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_10] +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
mov eax 1 +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] offset aXHDangerousRel +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_10] +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
mov eax 1 +
add esp 2Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov edx [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_C] +
mov esi [esp+1Ch+arg_10] +
test eax eax +
mov edi [esp+1Ch+arg_14] +
jz loc_412DF0  +
mov ebx [eax+4] +
mov eax [edx+24h] +
test eax eax +
jz loc_412DA9  +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] eax +
call sub_44E180  +
test eax eax +
jz loc_412DA9  +
cmp esi offset off_4BFAE8 +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_18] ebp +
jz loc_412DE0  +
mov [esp+1Ch+var_1C] offset aBDefinitionOfS +
call sub_418450  +
mov edx ds:dword_5147B0 +
test edx edx +
jnz loc_412DBC  +
mov eax ds:dword_5146F4 +
test eax eax +
jz loc_412DD0  +
mov [esp+1Ch+var_10] edi +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] ebx +
call sub_4197A0  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_1C] offset aBReferenceToS +
call sub_418450  +
jmp loc_412DA9  +
mov ebx ds:dword_5147B0 +
test ebx ebx +
jnz loc_412E04  +
mov ecx ds:dword_5146F4 +
test ecx ecx +
jz loc_412DD0  +
mov [esp+1Ch+arg_4] edi +
mov [esp+1Ch+arg_0] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4198D0  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 20h +
mov [esp+28h+var_28] ecx +
call sub_4509A0  +
test eax eax +
jnz loc_412E48  +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] offset aBFCouldNotRe_2 +
call sub_418450  +
mov eax [ebx+78h] +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_24] offset sub_4135F0 +
mov [esp+28h+var_14] edi +
mov [esp+28h+var_C] eax +
lea eax [esp+28h+var_18] +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_10] esi +
mov [esp+28h+var_18] 0 +
call sub_44DAD0  +
mov eax [esp+28h+var_18] +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
sub esp 0BCh +
mov ebx [esp+0BCh+arg_4] +
mov [esp+0BCh+var_B8] 2Ch +
mov [esp+0BCh+var_BC] 1 +
call sub_4A0620  +
mov edx [ebx] +
test byte ptr ds:word_514820+1 1 +
mov [esp+0BCh+var_8C] ebx +
mov [esp+0BCh+var_94] edx +
mov [eax+8] edx +
mov ecx [eax] +
mov [eax+0Ch] edx +
mov [esp+0BCh+var_90] edx +
mov edx [eax+14h] +
mov [eax+10h] ebx +
mov [esp+0BCh+var_9C] ecx +
mov ecx [eax+4] +
mov [esp+0BCh+var_88] edx +
mov edx [eax+18h] +
mov [esp+0BCh+var_98] ecx +
mov [esp+0BCh+var_84] edx +
mov edx [eax+1Ch] +
mov [esp+0BCh+var_80] edx +
mov edx [eax+20h] +
mov [esp+0BCh+var_7C] edx +
mov edx [eax+24h] +
mov [esp+0BCh+var_78] edx +
mov edx [eax+28h] +
mov [esp+0BCh+var_74] edx +
jz loc_412F1A  +
mov edi ds:dword_50F4A0 +
test edi edi +
jz loc_413170  +
mov [esp+0BCh+var_BC] eax +
call sub_40DA10  +
mov esi ds:dword_514770 +
test esi esi +
jz loc_41302C  +
mov eax [esp+0BCh+arg_0] +
mov edi [esp+0BCh+arg_8] +
mov eax [eax+1Ch] +
mov [esp+0BCh+var_AC] 1 +
mov [esp+0BCh+var_B0] 0 +
mov [esp+0BCh+var_B4] 0 +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
call sub_4500A0  +
test eax eax +
mov esi eax +
jz loc_4131A4  +
cmp byte ptr [eax+0Ch] 5 +
ja loc_4131A4  +
movzx eax byte ptr [eax+0Ch] +
jmp ds:off_4D244C[eax*4]  +
mov eax [esi+14h] +
mov eax [eax+4] +
mov edi [eax+94h] +
mov ecx ds:dword_50F410 +
test ecx ecx +
jz loc_413074  +
mov eax [ebx+8Ch] +
test eax eax +
jz loc_413129  +
mov edx [ebx] +
mov eax [eax] +
mov [esp+0BCh+var_BC] offset aSS_3 +
mov [esp+0BCh+var_B4] edx +
mov [esp+0BCh+var_B8] eax +
call sub_4184D0  +
mov eax [ebx+8Ch] +
mov eax [eax] +
mov [esp+0BCh+var_BC] eax +
call strlen  +
mov ebp eax +
mov eax [ebx] +
mov [esp+0BCh+var_BC] eax +
call strlen  +
lea ebx [ebp+eax+2] +
cmp ebx 1Ch +
jg loc_413150  +
lea esi [esi+0] +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_412FF0  +
test edi edi +
jz loc_413011  +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] offset aB_4 +
call sub_4184D0  +
test esi esi +
jz loc_4131B0  +
mov eax [esi+4] +
mov [esp+0BCh+var_BC] offset aT_4 +
mov [esp+0BCh+var_B8] eax +
call sub_4184D0  +
mov edx ds:dword_514800 +
test edx edx +
jnz loc_41303F  +
mov eax ds:dword_514798 +
test eax eax +
jz loc_413053  +
lea eax [esp+0BCh+var_9C] +
mov [esp+0BCh+var_B8] eax +
mov [esp+0BCh+var_BC] offset aI_1 +
call sub_418420  +
add esp 0BCh +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx ds:dword_50F410 +
mov edi [esi+14h] +
test ecx ecx +
jnz loc_412F9E  +
lea eax [esp+0BCh+var_70] +
mov [esp+0BCh+var_B8] eax +
mov [esp+0BCh+var_BC] offset asc_4D242E +
mov [esp+0BCh+var_70] 68637241h +
mov [esp+0BCh+var_6C] 20657669h +
mov [esp+0BCh+var_68] 626D656Dh +
mov [esp+0BCh+var_64] 69207265h +
mov [esp+0BCh+var_60] 756C636Eh +
mov [esp+0BCh+var_5C] 20646564h +
mov [esp+0BCh+var_58] 73206F74h +
mov [esp+0BCh+var_54] 73697461h +
mov [esp+0BCh+var_50] 72207966h +
mov [esp+0BCh+var_4C] 72656665h +
mov [esp+0BCh+var_48] 65636E65h +
mov [esp+0BCh+var_44] 20796220h +
mov [esp+0BCh+var_40] 656C6966h +
mov [esp+0BCh+var_3C] 79732820h +
mov [esp+0BCh+var_38] 6C6F626Dh +
mov [esp+0BCh+var_34] 0A0A29h +
call sub_4184D0  +
mov eax [ebx+8Ch] +
mov ds:dword_50F410 1 +
test eax eax +
jnz loc_412FAC  +
mov eax [ebx] +
mov [esp+0BCh+var_BC] offset asc_4D242E +
mov [esp+0BCh+var_B8] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp+0BCh+var_BC] eax +
call strlen  +
mov ebx eax +
cmp ebx 1Ch +
jle loc_412FF0  +
call sub_418580  +
xor ebx ebx +
jmp loc_412FF0  +
mov eax [esi+14h] +
mov edi [eax+94h] +
jmp loc_412F90  +
mov [esp+0BCh+var_BC] eax +
mov [esp+0BCh+var_A0] eax +
call sub_41B650  +
mov eax [esp+0BCh+var_A0] +
movzx edx byte ptr [eax+25h] +
test dl 20h +
jz loc_412F1A  +
or edx 40h +
mov ecx [eax+10h] +
mov [eax+25h] dl +
mov edx [esp+0BCh+arg_C] +
mov [edx] ecx +
jmp loc_412F1A  +
xor edi edi +
jmp loc_412F90  +
mov eax [esp+0BCh+arg_8] +
mov [esp+0BCh+var_BC] offset aS_24 +
mov [esp+0BCh+var_B8] eax +
call sub_4184D0  +
jmp loc_41302C  +
***
sub esp 1Ch +
call sub_459340  +
call sub_41B6F0  +
mov eax off_4BE0A0 +
test eax eax +
jz loc_4131F8  +
mov edx ds:dword_50F264 +
test edx edx +
jz loc_4131F8  +
mov [esp+1Ch+var_1C] eax +
call sub_4A8D90  +
add esp 1Ch +
retn   +
***
cmp dword_4BE040 0FFFFFFFFh +
mov ebx [esp+28h+arg_4] +
jz loc_4132DF  +
mov eax [esp+28h+arg_1C] +
mov [esp+28h+var_28] offset aXH +
mov [esp+28h+var_1C] eax +
mov eax [esp+28h+arg_18] +
mov [esp+28h+var_20] eax +
mov eax [esp+28h+arg_14] +
mov [esp+28h+var_24] eax +
call sub_418450  +
mov eax dword_4BE040 +
test eax eax +
js loc_413253  +
lea edx [eax-1] +
test eax eax +
mov dword_4BE040 edx +
jz loc_4132F0  +
test ebx ebx +
jnz loc_413278  +
mov eax [esp+28h+arg_8] +
mov [esp+28h+var_28] offset aRelocationTrun +
mov [esp+28h+var_20] eax +
mov eax [esp+28h+arg_C] +
mov [esp+28h+var_24] eax +
call sub_418450  +
jmp loc_4132CB  +
mov ebx [ebx+14h] +
movzx eax byte ptr [ebx+0Ch] +
lea edx [eax-6] +
cmp dl 1 +
jbe loc_413275  +
cmp al 1 +
jb loc_413300  +
cmp al 2 +
jbe loc_413320  +
cmp al 4 +
ja loc_413300  +
mov eax [ebx+14h] +
cmp eax offset off_4BFB90 +
jz loc_41335C  +
mov ecx [eax+94h] +
mov edx [ebx+4] +
mov [esp+28h+var_1C] eax +
mov eax [esp+28h+arg_C] +
mov [esp+28h+var_18] ecx +
mov [esp+28h+var_28] offset aRelocationTr_0 +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] eax +
call sub_418450  +
mov eax [esp+28h+arg_10] +
test eax eax +
jnz loc_413343  +
mov [esp+28h+var_28] offset asc_4D2586 +
call sub_418450  +
add esp 28h +
mov eax 1 +
pop ebx  +
retn   +
mov [esp+28h+var_28] offset aAdditionalRelo +
call sub_418450  +
jmp loc_4132DF  +
mov [esp+28h+var_20] offset aReloc_overflow +
mov [esp+28h+var_24] 57Dh +
mov [esp+28h+var_28] offset a____Binutil_11 +
call sub_4185A0  +
lea esi [esi+0] +
mov eax [ebx+4] +
mov [esp+28h+var_28] offset aRelocationTr_1 +
mov [esp+28h+var_20] eax +
mov eax [esp+28h+arg_C] +
mov [esp+28h+var_24] eax +
call sub_418450  +
mov eax [esp+28h+arg_10] +
test eax eax +
jz loc_4132D3  +
mov eax [esp+28h+arg_10] +
mov [esp+28h+var_28] offset aV +
mov [esp+28h+var_24] eax +
call sub_418450  +
jmp loc_4132D3  +
mov edx [esp+28h+arg_0] +
mov ecx [edx+30h] +
jmp loc_4132A8  +
***
push ebx  +
sub esp 20h +
mov edx [esp+20h+arg_0] +
mov eax [esp+20h+arg_4] +
test byte ptr [edx+4] 40h +
jnz loc_41342D  +
movzx edx byte ptr [eax+0Ch] +
cmp dl 3 +
jz loc_413440  +
cmp dl 6 +
jnz loc_413476  +
xor esi esi +
xor edi edi +
mov ebx offset off_4BFC38 +
mov edx [ebx+3Ch] +
test edx edx +
jz loc_4133B6  +
cmp edx offset off_4BFB90 +
jz loc_41342D  +
mov ecx [esp+20h+arg_C] +
mov edx [ecx+3Ch] +
test edx edx +
jz loc_4133D1  +
cmp ecx offset off_4BFB90 +
jz loc_4133D1  +
cmp edx offset off_4BFB90 +
jz loc_41342D  +
mov edx [esp+20h+arg_8] +
mov eax [eax+4] +
test edx edx +
mov [esp+20h+var_10] eax +
jz loc_4134B4  +
mov eax [esp+20h+arg_10] +
mov [esp+20h+var_20] offset aXCMultipleDefi +
mov [esp+20h+var_14] eax +
mov eax [esp+20h+arg_C] +
mov [esp+20h+var_18] eax +
mov eax [esp+20h+arg_8] +
mov [esp+20h+var_1C] eax +
call sub_418450  +
test esi esi +
jz loc_413424  +
mov [esp+20h+var_14] edi +
mov [esp+20h+var_18] ebx +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] offset aDFirstDefinedH +
call sub_418450  +
mov eax ds:dword_514834 +
test eax eax +
jz loc_413492  +
add esp 20h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ebx [eax+14h] +
mov edi [eax+18h] +
cmp ebx offset off_4BFB90 +
mov esi [ebx+94h] +
jnz loc_4133A7  +
cmp [esp+20h+arg_C] offset off_4BFB90 +
jz loc_4134D1  +
mov ecx [esp+20h+arg_C] +
mov edx [ecx+3Ch] +
test edx edx +
jnz loc_4133C9  +
jmp loc_4133D1  +
mov [esp+20h+var_18] offset aMultiple_defin +
mov [esp+20h+var_1C] 39Eh +
mov [esp+20h+var_20] offset a____Binutil_11 +
call sub_4185A0  +
mov [esp+20h+var_20] offset aPDisablingRela +
call sub_418450  +
mov eax 1 +
mov ds:dword_514834 2 +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+20h+var_14] edi +
mov [esp+20h+var_18] ebx +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] offset aXCMultipleDefi +
call sub_418450  +
jmp loc_413424  +
cmp [esp+20h+arg_10] edi +
jz loc_41342D  +
mov ebx [esp+20h+arg_C] +
nop   +
jmp loc_4133D1  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edx ds:dword_514740 +
mov ebp [esp+2Ch+arg_4] +
mov ebx [esp+2Ch+arg_C] +
mov eax [esp+2Ch+arg_10] +
test edx edx +
jnz loc_41351D  +
mov edi offset aUsingMultipleG +
mov ecx 19h +
mov esi ebp +
cmps   +
jz loc_413549  +
test eax eax +
jz loc_413556  +
mov edx [esp+2Ch+arg_14] +
mov [esp+2Ch+var_18] ebp +
mov [esp+2Ch+var_1C] offset aWarning +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aCSS +
call sub_418450  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ebx ebx +
jz loc_4135C8  +
mov eax [esp+2Ch+arg_8] +
test eax eax +
jz loc_41359F  +
mov edx [esp+2Ch+arg_8] +
mov ecx ebx +
mov eax ebp +
call sub_412E20  +
test eax eax +
jnz loc_413549  +
mov eax [esp+2Ch+arg_0] +
mov esi [eax+34h] +
test esi esi +
jz loc_41359F  +
nop   +
cmp ebx esi +
jz loc_413595  +
mov edx [esp+2Ch+arg_8] +
mov ecx esi +
mov eax ebp +
call sub_412E20  +
test eax eax +
jnz loc_413549  +
mov esi [esi+9Ch] +
test esi esi +
jnz loc_413580  +
mov [esp+2Ch+var_20] ebp +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_24] offset aWarning +
mov [esp+2Ch+var_2C] offset aBSS +
call sub_418450  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_24] ebp +
mov [esp+2Ch+var_28] offset aWarning +
mov [esp+2Ch+var_2C] offset aPSS +
call sub_418450  +
jmp loc_413549  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebp [esp+3Ch+arg_8] +
mov eax [esp+3Ch+arg_4] +
mov edi [esp+3Ch+arg_0] +
mov edx [ebp+0] +
mov [esp+3Ch+var_18] eax +
test edx edx +
jz loc_413616  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] edi +
call sub_44BB40  +
test eax eax +
js loc_4136C3  +
jz loc_41360E  +
mov [esp+3Ch+var_3C] eax +
nop   +
call sub_4A05F0  +
mov edx eax +
mov [esp+3Ch+var_14] eax +
mov eax [ebp+0Ch] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_38] eax +
call sub_44BB80  +
test eax eax +
js loc_413720  +
mov edx [esp+3Ch+var_14] +
lea eax [edx+eax*4] +
cmp edx eax +
jnb loc_4136AF  +
mov esi [edx] +
test esi esi +
jz loc_4136AF  +
mov [esp+3Ch+var_10] edi +
mov ebx edx +
mov edi eax +
jmp loc_413686  +
mov esi [ebx] +
test esi esi +
jz loc_4136AF  +
mov eax [esi] +
test eax eax +
jz loc_4136A8  +
mov eax [eax] +
test eax eax +
jz loc_4136A8  +
mov ecx [ebp+8] +
mov [esp+3Ch+var_38] ecx +
mov eax [eax+4] +
mov [esp+3Ch+var_3C] eax +
call strcmp  +
test eax eax +
jz loc_4136E0  +
add ebx 4 +
cmp edi ebx +
ja loc_413680  +
mov eax [esp+3Ch+var_14] +
mov [esp+3Ch+arg_0] eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp free  +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] offset aBFCouldNotRe_3 +
mov [esp+3Ch+var_14] eax +
call sub_418450  +
mov eax [esp+3Ch+var_14] +
jmp loc_41362C  +
mov eax [esi+4] +
mov ebx [ebp+4] +
mov edi [esp+3Ch+var_10] +
mov [esp+3Ch+var_2C] offset aWarning +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_28] ebx +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] offset aCSS +
mov [esp+3Ch+var_34] eax +
call sub_418450  +
mov dword ptr [ebp+0] 1 +
jmp loc_4136AF  +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] offset aBFCouldNotRe_3 +
mov [esp+3Ch+var_10] eax +
call sub_418450  +
mov eax [esp+3Ch+var_10] +
jmp loc_41365E  +
***
sub esp 34h +
mov eax ds:dword_514730 +
mov ebx [esp+34h+arg_0] +
mov esi [esp+34h+arg_C] +
test eax eax +
jnz loc_413838  +
mov eax ds:dword_51472C +
test eax eax +
jnz loc_413770  +
add esp 34h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
mov eax [ebx+30h] +
mov [esp+34h+var_30] 225h +
mov [esp+34h+var_34] eax +
call sub_44F6C0  +
test eax eax +
jz loc_413890  +
mov eax [esi+4] +
movzx eax byte ptr [eax+18h] +
test al al +
jnz loc_413851  +
mov ecx [esp+34h+arg_4] +
lea edx [esp+34h+var_13] +
mov eax edx +
test ecx ecx +
jz loc_413869  +
mov ecx 5Fh +
mov dword ptr [eax] 54435F5Fh +
mov dword ptr [eax+4] 4C5F524Fh +
mov dword ptr [eax+8] 5F545349h +
mov [eax+0Ch] cx +
mov eax [ebx+1Ch] +
mov [esp+34h+var_24] 1 +
mov [esp+34h+var_28] 1 +
mov [esp+34h+var_2C] 1 +
mov [esp+34h+var_30] edx +
mov [esp+34h+var_34] eax +
call sub_4500A0  +
test eax eax +
jz loc_4138C3  +
cmp byte ptr [eax+0Ch] 0 +
jnz loc_413805  +
mov byte ptr [eax+0Ch] 1 +
mov [eax+14h] esi +
mov edx [esp+34h+arg_14] +
mov ecx [esp+34h+arg_8] +
mov [esp+34h+var_34] eax +
mov [esp+34h+var_30] 225h +
mov [esp+34h+var_24] edx +
mov edx [esp+34h+arg_10] +
mov [esp+34h+var_2C] ecx +
mov [esp+34h+var_28] edx +
call sub_4126D0  +
add esp 34h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
mov eax [esp+34h+arg_8] +
mov [esp+34h+var_34] offset aPWarningGlobal +
mov [esp+34h+var_30] eax +
call sub_418450  +
jmp loc_41375A  +
mov ecx [esp+34h+arg_4] +
lea edx [esp+34h+var_13] +
mov byte ptr [esp+34h+var_13] al +
lea eax [esp+34h+var_13+1] +
test ecx ecx +
jnz loc_4137AC  +
mov ecx 5Fh +
mov dword ptr [eax] 54445F5Fh +
mov dword ptr [eax+4] 4C5F524Fh +
mov dword ptr [eax+8] 5F545349h +
mov [eax+0Ch] cx +
jmp loc_4137C9  +
movzx eax byte ptr [ebx] +
and eax 3 +
cmp al 2 +
jz loc_4138B2  +
mov [esp+34h+var_30] 225h +
mov [esp+34h+var_34] esi +
call sub_44F6C0  +
test eax eax +
jnz loc_41378B  +
mov [esp+34h+var_34] offset aPFBfdBackendEr +
call sub_418450  +
jmp loc_41378B  +
mov [esp+34h+var_34] offset aPFBfd_link_h_1 +
mov [esp+34h+var_18] eax +
call sub_418450  +
mov eax [esp+34h+var_18] +
jmp loc_4137F8  +
***
mov edx ds:dword_514730 +
mov ebx [esp+28h+arg_4] +
test edx edx +
jnz loc_413948  +
mov eax ds:dword_51472C +
test eax eax +
jnz loc_413905  +
add esp 28h +
mov eax 1 +
pop ebx  +
retn   +
mov eax [esp+28h+arg_14] +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_28] ebx +
mov [esp+28h+var_18] eax +
mov eax [esp+28h+arg_10] +
mov [esp+28h+var_1C] eax +
mov eax [esp+28h+arg_8] +
mov [esp+28h+var_24] eax +
call sub_4126D0  +
cmp byte ptr [ebx+0Ch] 0 +
jnz loc_4138FB  +
mov eax [esp+28h+arg_C] +
mov byte ptr [ebx+0Ch] 1 +
mov [ebx+14h] eax +
add esp 28h +
mov eax 1 +
pop ebx  +
retn   +
mov eax [ebx+4] +
mov [esp+28h+var_28] offset aPWarningGlobal +
mov [esp+28h+var_24] eax +
call sub_418450  +
jmp loc_4138F2  +
***
push ebx  +
sub esp 10h +
mov edx ds:dword_514734 +
mov eax [esp+10h+arg_4] +
test edx edx +
jz loc_413A01  +
movzx edx byte ptr [eax+0Ch] +
mov esi [eax+4] +
cmp edx 5 +
jz loc_413A10  +
lea ecx [edx-3] +
xor ebx ebx +
cmp ecx 1 +
jbe loc_413AD7  +
mov eax [esp+10h+arg_C] +
sub eax 3 +
cmp eax 1 +
jbe loc_413A87  +
cmp [esp+10h+arg_C] 6 +
jz loc_413A87  +
cmp ecx 1 +
ja loc_413B60  +
cmp [esp+10h+arg_C] 5 +
jz loc_4139D5  +
mov [esp+10h+var_C] 404h +
mov [esp+10h+var_10] offset a____Binutil_11 +
call sub_4184A0  +
mov eax [esp+10h+arg_8] +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_10] offset aBWarningCommon +
mov [esp+10h+var_C] eax +
call sub_418450  +
test ebx ebx +
jz loc_413A01  +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] offset aBWarningDefine +
call sub_418450  +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ecx [eax+14h] +
mov edi [eax+18h] +
mov eax [esp+10h+arg_C] +
mov ecx [ecx+4] +
sub eax 3 +
cmp eax 1 +
mov ebx [ecx+94h] +
jbe loc_413A9B  +
cmp [esp+10h+arg_C] 6 +
jz loc_413A9B  +
cmp [esp+10h+arg_C] 5 +
jnz loc_413B40  +
cmp edx 5 +
jnz loc_413B40  +
mov eax [esp+10h+arg_8] +
cmp [esp+10h+arg_10] edi +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] eax +
jb loc_413B10  +
jbe loc_413AE5  +
mov [esp+10h+var_10] offset aBWarningComm_0 +
call sub_418450  +
test ebx ebx +
jz loc_413A01  +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] offset aBWarningSmalle +
call sub_418450  +
jmp loc_413A01  +
mov [esp+10h+var_C] 3FAh +
mov [esp+10h+var_10] offset a____Binutil_11 +
call sub_4184A0  +
mov eax [esp+10h+arg_8] +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_10] offset aBWarningDefini +
mov [esp+10h+var_C] eax +
call sub_418450  +
test ebx ebx +
jz loc_413A01  +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] offset aBWarningComm_1 +
call sub_418450  +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax+14h] +
mov ebx [eax+94h] +
jmp loc_413996  +
mov [esp+10h+var_10] offset aBWarningMultip +
call sub_418450  +
test ebx ebx +
jz loc_413A01  +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] offset aBWarningPrevio +
call sub_418450  +
jmp loc_413A01  +
mov [esp+10h+var_10] offset aBWarningComm_2 +
call sub_418450  +
test ebx ebx +
jz loc_413A01  +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] offset aBWarningLarger +
call sub_418450  +
jmp loc_413A01  +
mov [esp+10h+var_C] 40Ch +
mov [esp+10h+var_10] offset a____Binutil_11 +
call sub_4184A0  +
jmp loc_413A46  +
cmp edx 6 +
jz loc_4139BA  +
xor edi edi +
nop   +
lea esi [esi+0] +
jmp loc_413A32  +
***
mov eax ds:dword_514844 +
mov ebx [esp+18h+arg_0] +
test eax eax +
jz loc_413BC7  +
mov [esp+18h+var_C] 1 +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
call sub_44E180  +
test eax eax +
jz loc_413BB6  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+arg_0] offset aPFBfd_hash_loo +
add esp 18h +
pop ebx  +
jmp sub_418450  +
mov [esp+18h+var_18] 1Ch +
call sub_4A05F0  +
mov [esp+18h+var_C] 3Dh +
mov [esp+18h+var_10] 0Ch +
mov [esp+18h+var_14] offset sub_44E4A0 +
mov [esp+18h+var_18] eax +
mov ds:dword_514844 eax +
call sub_44DE40  +
test eax eax +
jz loc_413C03  +
mov eax ds:dword_514844 +
jmp loc_413B91  +
mov [esp+18h+var_18] offset aPFBfd_hash_tab +
call sub_418450  +
jmp loc_413BFC  +
***
jmp sub_413C20  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_413C72  +
mov [esp+14h+var_8] 1 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call sub_44E180  +
test eax eax +
jz loc_413C60  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+arg_0] offset aPFBfd_hash_loo +
add esp 14h +
pop ebx  +
pop esi  +
jmp sub_418450  +
mov [esp+14h+var_14] 1Ch +
call sub_4A05F0  +
mov [ebx+2Ch] eax +
mov [esp+14h+var_8] 3Dh +
mov [esp+14h+var_C] 0Ch +
mov [esp+14h+var_10] offset sub_44E4A0 +
mov [esp+14h+var_14] eax +
call sub_44DE40  +
test eax eax +
jz loc_413CB0  +
mov eax [ebx+2Ch] +
jmp loc_413C34  +
mov [esp+14h+var_14] offset aPFBfd_hash_tab +
call sub_418450  +
jmp loc_413CA5  +
***
sub esp 24h +
mov esi [esp+24h+arg_0] +
mov ebx [esp+24h+arg_4] +
mov eax [esi+2Ch] +
test eax eax +
jz loc_413D00  +
mov [esp+24h+var_18] 0 +
mov [esp+24h+var_1C] 0 +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_24] eax +
call sub_44E180  +
test eax eax +
jz loc_413D00  +
add esp 24h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
mov ecx ds:dword_514738 +
test ecx ecx +
jnz loc_413DD0  +
mov esi ds:dword_50F418 +
test esi esi +
jz loc_413E25  +
mov [esp+24h+var_20] esi +
mov [esp+24h+var_24] ebx +
call strcmp  +
test eax eax +
jz loc_413D96  +
mov [esp+24h+var_24] esi +
mov ds:dword_50F414 0 +
call free  +
mov [esp+24h+var_24] ebx +
call sub_4A06C0  +
mov ds:dword_50F418 eax +
mov eax ds:dword_50F414 +
mov edx [esp+24h+arg_C] +
test edx edx +
jz loc_413DF2  +
cmp eax 4 +
ja loc_413DA5  +
mov eax [esp+24h+arg_14] +
mov [esp+24h+var_14] ebx +
test eax eax +
mov eax [esp+24h+arg_10] +
mov [esp+24h+var_18] eax +
mov eax [esp+24h+arg_C] +
mov [esp+24h+var_1C] eax +
mov eax [esp+24h+arg_8] +
mov [esp+24h+var_20] eax +
jz loc_413DE1  +
mov [esp+24h+var_24] offset aXCUndefinedRef +
call sub_418450  +
jmp loc_413CF4  +
mov eax ds:dword_50F414 +
add eax 1 +
mov ds:dword_50F414 eax +
jmp loc_413D50  +
cmp eax 5 +
jz loc_413E34  +
mov ecx [esp+24h+arg_14] +
test ecx ecx +
jz loc_413CF4  +
mov [esp+24h+var_24] offset asc_4D2CAF +
call sub_418450  +
jmp loc_413CF4  +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_24] esi +
call sub_413C20  +
jmp loc_413D0E  +
mov [esp+24h+var_24] offset aCWarningUndefi +
call sub_418450  +
jmp loc_413CF4  +
cmp eax 4 +
jbe loc_413E70  +
cmp eax 5 +
jnz loc_413DAE  +
mov eax [esp+24h+arg_14] +
mov [esp+24h+var_1C] ebx +
test eax eax +
mov eax [esp+24h+arg_8] +
mov [esp+24h+var_20] eax +
jz loc_413EB7  +
mov [esp+24h+var_24] offset aXBMoreUndefine +
call sub_418450  +
jmp loc_413CF4  +
mov ds:dword_50F414 0 +
jmp loc_413D3E  +
mov eax [esp+24h+arg_10] +
mov esi [esp+24h+arg_14] +
mov [esp+24h+var_14] ebx +
mov [esp+24h+var_18] eax +
mov eax [esp+24h+arg_C] +
test esi esi +
mov [esp+24h+var_1C] eax +
mov eax [esp+24h+arg_8] +
mov [esp+24h+var_20] eax +
jz loc_413E95  +
mov [esp+24h+var_24] offset aXDMoreUndefine +
call sub_418450  +
jmp loc_413CF4  +
mov edx [esp+24h+arg_14] +
mov eax [esp+24h+arg_8] +
mov [esp+24h+var_1C] ebx +
test edx edx +
mov [esp+24h+var_20] eax +
jz loc_413EA6  +
mov [esp+24h+var_24] offset aXBUndefinedRef +
call sub_418450  +
jmp loc_413CF4  +
mov [esp+24h+var_24] offset aDWarningMoreUn +
call sub_418450  +
jmp loc_413CF4  +
mov [esp+24h+var_24] offset aBWarningUndefi +
call sub_418450  +
jmp loc_413CF4  +
mov [esp+24h+var_24] offset aBWarningMoreUn +
call sub_418450  +
jmp loc_413CF4  +
***
mov eax ds:dword_514848 +
mov ebx [esp+18h+arg_0] +
test eax eax +
jz loc_413F17  +
mov [esp+18h+var_C] 1 +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
call sub_44E180  +
test eax eax +
jz loc_413F06  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+arg_0] offset aPFBfd_hash_loo +
add esp 18h +
pop ebx  +
jmp sub_418450  +
mov [esp+18h+var_18] 1Ch +
call sub_4A05F0  +
mov [esp+18h+var_C] 3Dh +
mov [esp+18h+var_10] 0Ch +
mov [esp+18h+var_14] offset sub_44E4A0 +
mov [esp+18h+var_18] eax +
mov ds:dword_514848 eax +
call sub_44DE40  +
test eax eax +
jz loc_413F53  +
mov eax ds:dword_514848 +
jmp loc_413EE1  +
mov [esp+18h+var_18] offset aPFBfd_hash_tab +
call sub_418450  +
jmp loc_413F4C  +
***
jmp sub_413F70  +
***
push esi  +
push ebx  +
sub esp 2Ch +
movzx eax byte ptr ds:word_514820+1 +
mov ebx [esp+2Ch+arg_0] +
and eax 18h +
cmp al 10h +
jz loc_414107  +
mov [esp+2Ch+var_28] offset aR +
mov [esp+2Ch+var_2C] ebx +
call fopen  +
test eax eax +
mov esi eax +
jz loc_414118  +
mov [esp+2Ch+var_2C] 1Ch +
call sub_4A05F0  +
mov [esp+2Ch+var_24] 0Ch +
mov [esp+2Ch+var_28] offset sub_44E4A0 +
mov [esp+2Ch+var_2C] eax +
mov ds:dword_514840 eax +
call sub_44DF20  +
test eax eax +
jz loc_4140F6  +
mov [esp+2Ch+var_2C] 64h +
call sub_4A05F0  +
mov [esp+2Ch+var_2C] esi +
mov edi eax +
call getc  +
mov [esp+2Ch+var_10] 64h +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_41402C  +
movzx eax bl +
test byte ptr ds:word_509C60[eax+eax] 40h +
jz loc_414063  +
lea esi [esi+0] +
mov [esp+2Ch+var_2C] esi +
call getc  +
mov ebx eax +
movzx eax al +
test byte ptr ds:word_509C60[eax+eax] 40h +
jnz loc_414010  +
cmp ebx 0FFFFFFFFh +
jnz loc_414063  +
test byte ptr ds:word_514820+1 18h +
jnz loc_4140E5  +
mov [esp+2Ch+var_2C] edi +
call free  +
movzx eax byte ptr ds:word_514820+1 +
mov [esp+2Ch+arg_0] esi +
and eax 0FFFFFFE7h +
or eax 10h +
mov byte ptr ds:word_514820+1 al +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp fclose  +
xor ebp ebp +
jmp loc_414083  +
mov [esp+2Ch+var_2C] esi +
call getc  +
mov ebx eax +
movzx eax al +
test byte ptr ds:word_509C60[eax+eax] 40h +
jnz loc_4140A7  +
cmp ebx 0FFFFFFFFh +
jz loc_4140A7  +
mov [edi+ebp] bl +
add ebp 1 +
cmp ebp [esp+2Ch+var_10] +
jb loc_414067  +
shl [esp+2Ch+var_10] 1 +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_28] eax +
call sub_4A0670  +
mov edi eax +
jmp loc_414067  +
mov byte ptr [edi+ebp] 0 +
mov eax ds:dword_514840 +
mov [esp+2Ch+var_20] 1 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
call sub_44E180  +
test eax eax +
jnz loc_413FF8  +
mov [esp+2Ch+var_2C] offset aPFBfd_hash_l_0 +
call sub_418450  +
jmp loc_413FF8  +
mov [esp+2Ch+var_2C] offset aPRetainSymbols +
call sub_418450  +
jmp loc_414039  +
mov [esp+2Ch+var_2C] offset aPFBfd_hash_tab +
call sub_418450  +
jmp loc_413FD8  +
mov [esp+2Ch+var_2C] offset aXPErrorDuplica +
call sub_418450  +
jmp loc_413F8D  +
mov [esp+2Ch+var_2C] 1 +
call sub_44BAF0  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aXPSE +
call sub_418450  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov eax [ebx+4] +
cmp eax 8 +
jz loc_414340  +
jbe loc_414280  +
cmp eax 9 +
jz loc_4141E0  +
cmp eax 0Ch +
jnz loc_4141D1  +
mov esi [ebx+10h] +
mov eax ds:dword_514850 +
cmp [esi+94h] eax +
jz loc_41418B  +
mov [esp+2Ch+var_28] 11Fh +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4184A0  +
mov eax [esi+14h] +
test ah 1 +
jnz loc_41419F  +
and eax 402h +
cmp eax 402h +
jnz loc_4141D1  +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call sub_452330  +
mov dword ptr [eax+4] 2 +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx [ebx+14h] +
lea ecx [edx+4] +
mov [eax+14h] ecx +
mov edx [edx] +
mov [eax+10h] edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx+20h] +
mov eax ds:dword_514850 +
cmp [esi+94h] eax +
jz loc_414204  +
mov [esp+2Ch+var_28] 0C5h +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4184A0  +
mov eax [esi+14h] +
test ah 1 +
jnz loc_414218  +
and eax 402h +
cmp eax 402h +
jnz loc_4141D1  +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call sub_452330  +
test eax eax +
mov esi eax +
jz loc_414613  +
mov eax [ebx+24h] +
mov [esi+8] eax +
mov eax [ebx+0Ch] +
mov [esp+2Ch+var_2C] eax +
call sub_44E820  +
mov [esi+0Ch] eax +
mov [esp+2Ch+var_2C] 0Ch +
call sub_4A05F0  +
mov [esi+10h] eax +
mov edx [ebx+8] +
mov ecx [ebx+1Ch] +
mov [eax] edx +
mov edx [ebx+14h] +
mov [eax+8] ecx +
test edx edx +
jz loc_414592  +
mov dword ptr [esi+4] 4 +
mov [eax+4] edx +
jmp loc_4141D1  +
cmp eax 5 +
jnz loc_4141D1  +
mov ebx [ebx+8] +
movzx eax word ptr [ebx+18h] +
and ax 380h +
cmp ax 200h +
jz loc_4141D1  +
test byte ptr [ebx+15h] 80h +
jnz loc_4141D1  +
mov esi [ebx+3Ch] +
mov eax ds:dword_514850 +
cmp [esi+94h] eax +
jz loc_4142CC  +
mov [esp+2Ch+var_28] 0F8h +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4184A0  +
mov eax [esi+14h] +
test ah 1 +
jnz loc_4142E4  +
and eax 402h +
cmp eax 402h +
jnz loc_4141D1  +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call sub_452330  +
mov edi eax +
mov eax [ebx+14h] +
and eax 2200h +
cmp eax 200h +
jz loc_414578  +
mov [edi+10h] ebx +
cmp [ebx+3Ch] esi +
mov dword ptr [edi+4] 1 +
jz loc_41432D  +
mov [esp+2Ch+var_28] 10Fh +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4184A0  +
mov eax [ebx+24h] +
mov [edi+0Ch] eax +
mov eax [ebx+38h] +
mov [edi+8] eax +
jmp loc_4141D1  +
mov edi [ebx+14h] +
mov eax ds:dword_514850 +
cmp [edi+94h] eax +
jz loc_414364  +
mov [esp+2Ch+var_28] 33h +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4184A0  +
mov eax [edi+14h] +
test ah 1 +
jnz loc_41437C  +
and eax 402h +
cmp eax 402h +
jnz loc_4141D1  +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
call sub_452330  +
test eax eax +
mov esi eax +
jz loc_414602  +
mov dword ptr [esi+4] 2 +
mov eax [ebx+18h] +
mov [esi+8] eax +
mov [esp+2Ch+var_2C] 8 +
call sub_4A05F0  +
mov [esi+14h] eax +
mov edx ds:dword_514850 +
mov ebp [ebx+10h] +
mov edx [edx+4] +
mov edx [edx+8] +
test edx edx +
jz loc_414460  +
cmp edx 1 +
jz loc_414451  +
mov edx ds:dword_5147CC +
cmp edx 1 +
jz loc_414460  +
cmp edx 2 +
jz loc_41440E  +
test edx edx +
jnz loc_414451  +
mov edx ds:dword_50F27C +
test edx edx +
jnz loc_4143FE  +
jmp loc_414460  +
mov edx [edx+18h] +
test edx edx +
jz loc_414460  +
mov ecx [edx+10h] +
test ecx ecx +
jz loc_4143F7  +
mov edx [ecx+4] +
cmp dword ptr [edx+8] 1 +
jnz loc_414460  +
mov edx [ebx+8] +
cmp edx 11Dh +
jz loc_41464C  +
ja loc_414624  +
cmp edx 11Ah +
jb loc_414630  +
lea eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_20] eax +
call sub_45A1C0  +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+var_2C] eax +
call sub_459EB0  +
mov ebp eax +
mov [esp+2Ch+var_20] 0 +
jmp loc_414468  +
mov [esp+2Ch+var_20] 1 +
mov eax ds:dword_514850 +
cmp [edi+94h] eax +
jz loc_414489  +
mov [esp+2Ch+var_28] 8Bh +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4184A0  +
mov ecx [ebx+8] +
lea edx [ecx-11Ah] +
cmp edx 4 +
ja loc_4145C0  +
jmp ds:off_4D2E78[edx*4]  +
mov edx ds:dword_514850 +
mov ecx [esi+14h] +
mov edx [edx+4] +
mov edx [edx+3Ch] +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] ebp +
call edx  +
mov eax 2 +
mov dword ptr [esi+0Ch] 2 +
mov [esi+10h] eax +
jmp loc_4141D1  +
mov edx ds:dword_514850 +
mov ecx [esi+14h] +
mov edx [edx+4] +
mov edx [edx+30h] +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] ebp +
call edx  +
mov eax 4 +
mov dword ptr [esi+0Ch] 4 +
jmp loc_4144C6  +
mov ebx ebp +
xor edx edx +
mov eax [esp+2Ch+var_20] +
sar ebx 1Fh +
cmp ecx 11Ah +
mov ecx ds:dword_514850 +
cmovnz edx ebx +
mov ebx [esi+14h] +
test eax eax +
mov ecx [ecx+4] +
mov ecx [ecx+30h] +
jz loc_4145E0  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] edx +
call ecx  +
mov edx ds:dword_514850 +
mov ecx [esi+14h] +
mov edx [edx+4] +
mov ebx [edx+30h] +
mov edx 4 +
add edx ecx +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] ebp +
call ebx  +
mov eax 8 +
mov dword ptr [esi+0Ch] 8 +
jmp loc_4144C6  +
mov edx [esi+14h] +
mov eax ebp +
mov [edx] al +
mov eax 1 +
mov dword ptr [esi+0Ch] 1 +
jmp loc_4144C6  +
mov dword ptr [edi+4] 2 +
mov dword ptr [edi+14h] offset unk_4D2E75 +
mov dword ptr [edi+10h] 1 +
jmp loc_41432D  +
mov edx [ebx+10h] +
mov edi ds:dword_514850 +
mov dword ptr [esi+4] 3 +
cmp [edx+94h] edi +
jz loc_414273  +
mov ebx [edx+3Ch] +
mov [eax+4] ebx +
add ecx [edx+38h] +
mov [eax+8] ecx +
jmp loc_4141D1  +
mov [esp+2Ch+var_24] offset aBuild_link_ord +
mov [esp+2Ch+var_28] 0B6h +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4185A0  +
lea esi [esi+0] +
add ebx 4 +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] edx +
call ecx  +
mov edx ds:dword_514850 +
mov ecx [esi+14h] +
mov edx [edx+4] +
mov ebx [edx+30h] +
xor edx edx +
jmp loc_41453E  +
mov [esp+2Ch+var_2C] offset aPFBfd_new_link +
call sub_418450  +
jmp loc_414397  +
mov [esp+2Ch+var_2C] offset aPFBfd_new_link +
call sub_418450  +
jmp loc_414233  +
cmp edx 11Eh +
jz loc_414451  +
mov [esp+2Ch+var_24] offset aBuild_link_ord +
mov [esp+2Ch+var_28] 86h +
mov [esp+2Ch+var_2C] offset a____Binutils_9 +
call sub_4185A0  +
lea eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_20] eax +
call sub_459E90  +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+var_2C] eax +
call sub_459DF0  +
mov ebp eax +
jmp loc_414451  +
***
push esi  +
mov ebx [esp+28h+arg_0] +
cmp dword ptr [ebx+0Ch] offset off_4BFB90 +
jz loc_414C67  +
mov eax [ebx+4] +
mov [esp+28h+var_18] 1 +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_24] eax +
mov eax ds:dword_51483C +
mov [esp+28h+var_28] eax +
call sub_4500A0  +
test eax eax +
jz loc_414C67  +
cmp byte ptr [eax+0Ch] 3 +
jz loc_414C71  +
add esp 28h +
mov eax 1 +
pop ebx  +
retn   +
cmp dword ptr [eax+14h] offset off_4BFB90 +
jnz loc_414C67  +
mov edx [ebx+0Ch] +
mov ecx [edx+1Ch] +
sub [eax+18h] ecx +
mov [eax+14h] edx +
jmp loc_414C67  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
test eax eax +
jz loc_414CA3  +
and byte ptr [eax+10h] 0F8h +
add esp 1Ch +
retn   +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] 14h +
mov [esp+1Ch+var_1C] eax +
call sub_44E3F0  +
test eax eax +
jnz loc_414C9B  +
mov edx [esp+1Ch+arg_8] +
mov [esp+1Ch+var_1C] offset aPFBfd_hash_all +
mov [esp+1Ch+var_10] eax +
mov [esp+1Ch+var_18] edx +
call sub_418450  +
mov eax [esp+1Ch+var_10] +
and byte ptr [eax+10h] 0F8h +
add esp 1Ch +
retn   +
***
sub esp 28h +
mov eax [edx] +
mov edx ds:dword_51483C +
mov [esp+28h+var_18] 1 +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_24] eax +
call sub_4500A0  +
test eax eax +
mov edx eax +
jz loc_414D34  +
mov ecx ds:dword_514850 +
mov eax [ecx+4] +
mov eax [eax+170h] +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] ecx +
call eax  +
add esp 28h +
pop ebx  +
retn   +
***
push esi  +
mov esi eax +
push ebx  +
xor ebx ebx +
sub esp 10h +
jmp loc_414D58  +
add ebx 1 +
cmp ebx 33h +
jz loc_414D61  +
cmp ds:dword_4D35C0[ebx*8] esi +
jnz loc_414D50  +
test edi edi +
jnz loc_414DE0  +
cmp ebx 33h +
jnz loc_414DC3  +
cmp esi 7Eh +
lea esi [esi+0] +
jle loc_414DB0  +
mov eax ds:dword_514770 +
mov [esp+18h+var_10] esi +
mov [esp+18h+var_14] offset aCodeD +
mov [esp+18h+var_18] eax +
call fprintf  +
test edi edi +
jz loc_414DA4  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 20h +
mov [esp+18h+var_14] eax +
call fputc  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] esi +
mov [esp+18h+var_14] eax +
call fputc  +
jmp loc_414D8B  +
mov eax ds:dword_514770 +
mov [esp+18h+var_14] eax +
mov eax ds:off_4D35C4[ebx*8] +
mov [esp+18h+var_18] eax +
call fputs  +
jmp loc_414D8B  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 20h +
mov [esp+18h+var_14] eax +
call fputc  +
jmp loc_414D65  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
test eax eax +
jz loc_414FA0  +
mov edx [ebx+0Ch] +
cmp edx 9 +
ja loc_415300  +
jmp ds:off_4D32AC[edx*4]  +
mov eax [ebx+10h] +
call sub_414E00  +
cmp ds:dword_5148C0 4 +
jz loc_415517  +
lea esi [esi+0] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp ds:dword_5148C0 +
test ebp ebp +
jz loc_414FA0  +
mov eax [ebx+10h] +
mov edx [eax+3Ch] +
mov eax [eax+38h] +
add eax [ebx+14h] +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D0 eax +
mov ds:dword_5148D8 edx +
jmp loc_414E40  +
mov eax [ebx+10h] +
call sub_414E00  +
mov esi ds:dword_5148DC +
test esi esi +
jz loc_415540  +
cmp dword ptr [ebx] 130h +
jz loc_415630  +
mov eax [ebx+14h] +
mov ebp ds:dword_5148D0 +
mov edi ds:dword_5148D8 +
call sub_414E00  +
and ds:dword_5148DC esi +
jz loc_414E40  +
mov eax ds:dword_5148D8 +
cmp edi eax +
jz loc_414EFF  +
test eax eax +
jz loc_41618C  +
test edi edi +
jz loc_414EFF  +
mov eax [eax+1Ch] +
add ds:dword_5148D0 eax +
add ebp [edi+1Ch] +
mov edi offset off_4BFB90 +
mov ds:dword_5148D8 offset off_4BFB90 +
mov ds:dword_5148C8 0 +
mov eax [ebx] +
cmp eax 10Eh +
jz loc_416071  +
jg loc_4153C8  +
cmp eax 2Fh +
jz loc_4160BA  +
nop   +
lea esi [esi+0] +
jg loc_415730  +
cmp eax 2Ah +
jz loc_415FA5  +
nop   +
jg loc_415D8F  +
cmp eax 25h +
jz loc_41603D  +
cmp eax 26h +
jnz loc_416024  +
and ds:dword_5148D0 ebp +
cmp edi ds:dword_5148D8 +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov eax [ebx+10h] +
call sub_414E00  +
mov ebp ds:dword_5148DC +
test ebp ebp +
jz loc_414E40  +
mov edi ds:dword_5148D0 +
mov eax [ebx+14h] +
test edi edi +
cmovz eax [ebx+18h] +
test eax eax +
mov ebx eax +
jnz loc_414E11  +
nop   +
mov ds:dword_5148D0 0 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
mov ds:dword_5148DC 0 +
jmp loc_414E40  +
mov eax [ebx+10h] +
call sub_414E00  +
mov esi ds:dword_5148DC +
test esi esi +
jz loc_414E40  +
mov eax [ebx] +
cmp eax 117h +
jz loc_415B22  +
jle loc_415390  +
cmp eax 13Fh +
jz loc_415BD6  +
jle loc_415AD7  +
cmp eax 15Eh +
jz loc_415BAB  +
cmp eax 165h +
jnz loc_4153AF  +
mov eax ds:dword_5148D0 +
xor ebx ebx +
mov ecx 0FFFFFFFFh +
mov esi 1 +
jmp loc_415035  +
mov ecx edx +
cmp eax 1 +
lea edx [ecx+1] +
jbe loc_415042  +
test al 1 +
cmovnz ebx esi +
shr eax 1 +
jnz loc_415033  +
add ecx 2 +
test ebx ebx +
cmovnz edx ecx +
mov ds:dword_5148D8 0 +
mov ds:dword_5148D0 edx +
jmp loc_414E40  +
mov eax [ebx+10h] +
cmp byte ptr [eax] 2Eh +
jz loc_415557  +
xor esi esi +
cmp edx 5 +
jz loc_4155E0  +
mov ds:dword_5148CC eax +
mov eax [ebx+14h] +
call sub_414E00  +
mov edx ds:dword_5148DC +
mov eax ds:dword_5148C0 +
test edx edx +
jz loc_4152A2  +
cmp eax 4 +
jz loc_4150AD  +
mov ebp ds:dword_5148CC +
test ebp ebp +
jz loc_41547A  +
test esi esi +
jz loc_415E20  +
mov ecx ds:dword_5148D8 +
test ecx ecx +
jz loc_415C2E  +
mov ebp [ebx+10h] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_2C] offset unk_50F420 +
mov [esp+2Ch+var_28] ebp +
call sub_44E180  +
test eax eax +
mov edi eax +
jz loc_415E70  +
movzx eax byte ptr [edi+10h] +
test al 2 +
jnz loc_41510A  +
movzx ecx byte ptr [esi+0Ch] +
lea edx [ecx-3] +
cmp dl 2 +
ja loc_41510A  +
or eax 1 +
mov [edi+10h] al +
movzx edx byte ptr [edi+10h] +
movzx eax byte ptr ds:dword_50F260 +
mov dword ptr [edi+0Ch] offset off_4BFB90 +
or edx 2 +
and eax 1 +
and edx 0FFFFFFFBh +
shl eax 2 +
or edx eax +
mov eax ds:dword_5148D8 +
cmp ds:dword_5148C0 4 +
mov [edi+10h] dl +
jz loc_415700  +
mov edx ds:dword_5148D0 +
and byte ptr [esi+0Dh] 0FDh +
mov byte ptr [esi+0Ch] 3 +
mov [esi+18h] edx +
mov [esi+14h] eax +
cmp dword ptr [ebx+0Ch] 5 +
jz loc_4157D0  +
mov edx [ebx+14h] +
mov eax [edx+0Ch] +
cmp eax 3 +
jz loc_4157E0  +
cmp eax 1 +
jz loc_415C3D  +
mov ds:dword_5148CC 0 +
jmp loc_414E40  +
cmp ds:dword_5148E8 offset off_4BFB90 +
mov eax [ebx+10h] +
jz loc_4156D1  +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 eax +
mov ds:dword_5148D8 0 +
mov eax [ebx+14h] +
mov ds:dword_5148D4 eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_5148D0 0 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
mov ds:dword_5148DC 0 +
mov eax [ebx] +
cmp eax 141h +
jle loc_415344  +
cmp eax 14Ch +
jz loc_4157F0  +
jg loc_415420  +
cmp eax 142h +
jz loc_415988  +
cmp eax 143h +
jnz loc_415370  +
mov esi ds:dword_5148C0 +
test esi esi +
jz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_40C0C0  +
test eax eax +
jz loc_416394  +
test byte ptr [eax+54h] 2 +
jz loc_414E40  +
mov edx [eax+30h] +
test edx edx +
jz loc_416420  +
mov eax edx +
call sub_414E00  +
mov ebx ds:dword_5148DC +
test ebx ebx +
jz loc_414E40  +
mov eax ds:dword_5148D8 +
test eax eax +
jz loc_415289  +
mov eax [eax+1Ch] +
add ds:dword_5148D0 eax +
mov ds:dword_5148D8 offset off_4BFB90 +
mov ds:dword_5148C8 0 +
jmp loc_414E40  +
cmp eax 1 +
jbe loc_415483  +
cmp eax 4 +
jnz loc_415175  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_1C] 1 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_51483C +
mov [esp+2Ch+var_2C] eax +
call sub_4500A0  +
test eax eax +
jz loc_415175  +
cmp byte ptr [eax+0Ch] 0 +
jnz loc_415175  +
mov byte ptr [eax+0Ch] 1 +
jmp loc_415175  +
mov [esp+2Ch+var_28] 4CBh +
mov [esp+2Ch+var_2C] offset a____Binutils_5 +
call sub_4184A0  +
mov ds:dword_5148D0 0 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
mov ds:dword_5148DC 0 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 140h +
jge loc_41549D  +
cmp eax 12Bh +
jz loc_415930  +
cmp eax 13Ah +
jz loc_4158A6  +
cmp eax 103h +
jz loc_4159EE  +
mov [esp+2Ch+var_28] 37Bh +
mov [esp+2Ch+var_2C] offset a____Binutils_5 +
call sub_4184A0  +
jmp loc_414E40  +
cmp eax 2Dh +
jz loc_415BA0  +
cmp eax 7Eh +
lea esi [esi+0] +
jz loc_415B95  +
cmp eax 21h +
jz loc_415B7E  +
mov [esp+2Ch+var_28] 19Eh +
mov [esp+2Ch+var_2C] offset a____Binutils_5 +
call sub_4184A0  +
jmp loc_414E40  +
cmp eax 114h +
jz loc_4160ED  +
jg loc_415775  +
cmp eax 111h +
jz loc_415FE4  +
jg loc_415DC8  +
cmp eax 10Fh +
jz loc_415F25  +
cmp eax 110h +
jnz loc_416024  +
xor eax eax +
cmp ebp ds:dword_5148D0 +
mov ds:dword_5148D8 0 +
setnz al  +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
cmp eax 14Eh +
jz loc_415852  +
cmp eax 180h +
jnz loc_415370  +
mov eax [ebx+10h] +
mov edi offset aMaxpagesize +
mov ecx 0Ch +
mov esi eax +
cmps   +
jz loc_415E07  +
mov edi offset aCommonpagesize +
mov ecx 0Fh +
mov esi eax +
cmps   +
jnz loc_416173  +
mov eax ds:dword_514788 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
cmp eax 1 +
ja loc_415175  +
cmp dword ptr [ebx+0Ch] 4 +
jnz loc_415175  +
mov edi [ebx+18h] +
test edi edi +
jz loc_415175  +
jmp loc_4150AD  +
mov ecx ds:dword_5148C0 +
test ecx ecx +
jz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_40C0C0  +
test eax eax +
jz loc_4163E6  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_41644E  +
cmp dword ptr [ebx] 140h +
jz loc_41648D  +
mov ecx [eax+40h] +
mov eax 1 +
shl eax cl +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 eax +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov edi ds:dword_5148D0 +
test edi edi +
jnz loc_414E40  +
mov eax [ebx+14h] +
mov [esp+2Ch+var_2C] offset aXPS +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
jmp loc_414E40  +
mov eax [ebx+14h] +
call sub_414E00  +
mov ds:dword_5148DC 0 +
jmp loc_414E40  +
cmp byte ptr [eax+1] 0 +
jnz loc_41506F  +
cmp edx 4 +
jz loc_415576  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSCanNotProvid +
call sub_418450  +
mov esi ds:dword_5148C0 +
test esi esi +
jz loc_414FA0  +
mov eax [ebx+14h] +
mov ds:dword_5148C4 1 +
call sub_414E00  +
mov eax ds:dword_5148DC +
cmp ds:dword_5148C0 1 +
mov ds:dword_5148C4 0 +
jz loc_415ED9  +
test eax eax +
jnz loc_415CAC  +
cmp ds:dword_5148C0 1 +
jz loc_414E40  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSInvalidAssig +
call sub_418450  +
jmp loc_414E40  +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_51483C +
mov [esp+2Ch+var_1C] 1 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_4500A0  +
test eax eax +
mov esi eax +
jz loc_414E40  +
cmp byte ptr [eax+0Ch] 2 +
jbe loc_415623  +
test byte ptr [eax+0Dh] 2 +
jz loc_414E40  +
mov eax [ebx+10h] +
jmp loc_41507A  +
mov eax [ebx+14h] +
mov ebx ds:dword_514914 +
mov esi [eax+10h] +
test ebx ebx +
jnz loc_41564F  +
jmp loc_414E40  +
mov ebx [ebx] +
test ebx ebx +
jz loc_414E40  +
mov [esp+2Ch+var_28] esi +
mov eax [ebx+4] +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jnz loc_415645  +
mov ebp [ebx+0Ch] +
test ebp ebp +
jnz loc_415B1A  +
mov edi ds:dword_514720 +
test edi edi +
jz loc_415B1A  +
mov ecx [ebx+8] +
xor edx edx +
mov eax ecx +
div  ds:dword_514784 +
mov edi edx +
mov edx ecx +
test edi edi +
jnz loc_415B0A  +
mov eax ds:dword_5148E8 +
mov dword ptr [ebx+0Ch] 1 +
mov ds:dword_5148C8 1 +
mov ds:dword_5148DC 1 +
sub edx [eax+1Ch] +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 eax +
mov ds:dword_5148D0 edx +
jmp loc_414E40  +
mov edx ds:dword_514760 +
test edx edx +
jnz loc_415197  +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D8 offset off_4BFB90 +
mov ds:dword_5148D0 eax +
jmp loc_4151B0  +
mov edx ds:dword_5148C8 +
test edx edx +
jz loc_41513F  +
cmp eax offset off_4BFB90 +
jnz loc_41513F  +
call sub_40D7F0  +
mov [edi+0Ch] eax +
mov eax ds:dword_5148D8 +
jmp loc_41513F  +
cmp eax 5Eh +
jz loc_415F84  +
jg loc_415D24  +
cmp eax 3Ch +
jz loc_416154  +
cmp eax 3Eh +
nop   +
lea esi [esi+0] +
jnz loc_416024  +
xor eax eax +
cmp ebp ds:dword_5148D0 +
mov ds:dword_5148D8 0 +
setnbe al  +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
cmp eax 125h +
jz loc_416116  +
jg loc_415D62  +
cmp eax 117h +
jz loc_416098  +
cmp eax 124h +
jnz loc_416024  +
mov eax ds:dword_5148C0 +
mov ds:dword_514908 1 +
test eax eax +
jz loc_4157BF  +
cmp ds:dword_5148E8 offset off_4BFB90 +
jz loc_41656A  +
mov ds:dword_5148DC 0 +
jmp loc_414E40  +
mov dword ptr [ebx+0Ch] 6 +
jmp loc_41515D  +
add edx 10h +
mov eax esi +
call sub_414CE0  +
jmp loc_415175  +
mov eax ds:dword_5148C0 +
test eax eax +
jz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_40B160  +
test eax eax +
jz loc_4164C6  +
mov edx ds:dword_5148E8 +
mov eax [eax+10h] +
mov ds:dword_5148C8 1 +
mov ds:dword_5148DC 1 +
sub eax [edx+1Ch] +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 edx +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov edx ds:dword_5148C0 +
test edx edx +
jz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_40B160  +
test eax eax +
jz loc_4164AA  +
mov eax [eax+14h] +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov edi ds:dword_5148C0 +
test edi edi +
jz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_18] 1 +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_28] offset word_514820 +
mov [esp+2Ch+var_2C] eax +
call sub_4500F0  +
test eax eax +
jz loc_416486  +
movzx edx byte ptr [eax+0Ch] +
xor eax eax +
sub edx 3 +
cmp dl 2 +
jbe loc_4161D3  +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 eax +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov edx ds:dword_5148C0 +
test edx edx +
jz loc_414E40  +
xor eax eax +
cmp edx 1 +
jz loc_415960  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
mov edx [edx+158h] +
mov [esp+2Ch+var_28] offset word_514820 +
mov [esp+2Ch+var_2C] eax +
call edx  +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 eax +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov edi ds:dword_5148C0 +
test edi edi +
jz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_40C0C0  +
test eax eax +
jz loc_4163BD  +
test byte ptr [eax+54h] 1 +
jz loc_414E40  +
mov eax [eax+1Ch] +
mov ds:dword_5148D0 0 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 eax +
jmp loc_414E40  +
mov eax ds:dword_5148CC +
test eax eax +
jz loc_415A0E  +
mov esi [ebx+10h] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] esi +
call strcmp  +
test eax eax +
jz loc_415E85  +
mov esi ds:dword_5148C0 +
test esi esi +
jz loc_414E40  +
mov eax [ebx+10h] +
cmp byte ptr [eax] 2Eh +
jnz loc_415A2E  +
cmp byte ptr [eax+1] 0 +
jz loc_41628C  +
mov [esp+2Ch+var_24] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_18] 1 +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_20] 1 +
mov [esp+2Ch+var_28] offset word_514820 +
mov [esp+2Ch+var_2C] eax +
call sub_4500F0  +
test eax eax +
jz loc_41664A  +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-3] +
cmp cl 1 +
jbe loc_41622B  +
mov ecx ds:dword_5148C0 +
cmp ecx 4 +
jz loc_416270  +
cmp ecx 1 +
jz loc_415A99  +
mov ecx ds:dword_5148C4 +
test ecx ecx +
jnz loc_416270  +
test dl dl +
jnz loc_414E40  +
mov ebp [eax+10h] +
mov byte ptr [eax+0Ch] 1 +
mov dword ptr [eax+14h] 0 +
test ebp ebp +
jnz loc_414E40  +
mov edx ds:dword_51483C +
cmp eax [edx+20h] +
jz loc_414E40  +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edx +
call sub_4508A0  +
jmp loc_414E40  +
cmp eax 126h +
jnz loc_4153AF  +
mov eax ds:dword_5148C0 +
test eax eax +
jz loc_415AFB  +
cmp ds:dword_5148E8 offset off_4BFB90 +
jz loc_416319  +
mov ds:dword_5148DC 0 +
jmp loc_414E40  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] offset aPWarningAddres +
call sub_418450  +
mov edx [ebx+8] +
jmp loc_415694  +
mov ecx ds:dword_5148C0 +
test ecx ecx +
jz loc_415AFB  +
mov ecx ds:dword_5148D0 +
mov eax ds:dword_5148E0 +
cmp ecx 1 +
jbe loc_415B47  +
lea eax [ecx+eax-1] +
xor edx edx +
div  ecx +
imul eax ecx +
mov edx ds:dword_5148E8 +
mov ds:dword_5148C8 1 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D4 0 +
sub eax [edx+1Ch] +
mov ds:dword_5148D8 edx +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov edx ds:dword_5148D0 +
xor eax eax +
test edx edx +
setz al  +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
not ds:dword_5148D0  +
jmp loc_414E40  +
neg ds:dword_5148D0  +
jmp loc_414E40  +
mov eax ds:dword_5148D8 +
test eax eax +
jz loc_415BBD  +
mov eax [eax+1Ch] +
add ds:dword_5148D0 eax +
mov ds:dword_5148D8 offset off_4BFB90 +
mov ds:dword_5148C8 0 +
jmp loc_414E40  +
mov eax ds:dword_5148C0 +
test eax eax +
jz loc_415AFB  +
mov eax ds:dword_5148D8 +
mov ecx ds:dword_5148D0 +
test eax eax +
jz loc_415BFB  +
mov ecx [eax+1Ch] +
add ecx ds:dword_5148D0 +
cmp ecx 1 +
mov eax ds:dword_5148E0 +
mov ds:dword_5148D8 offset off_4BFB90 +
mov ds:dword_5148C8 0 +
jbe loc_415C24  +
lea eax [eax+ecx-1] +
xor edx edx +
div  ecx +
imul eax ecx +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov eax ds:dword_5148E8 +
mov ds:dword_5148D8 eax +
jmp loc_4150C3  +
mov eax [edx+10h] +
call sub_414E00  +
mov eax ds:dword_5148DC +
test eax eax +
jz loc_415175  +
mov ebp ds:dword_5148D0 +
test ebp ebp +
jz loc_415C83  +
mov eax [ebx+14h] +
mov eax [eax+14h] +
cmp dword ptr [eax+0Ch] 3 +
jnz loc_415175  +
lea edx [eax+10h] +
mov eax esi +
call sub_414CE0  +
cmp ds:dword_5148D0 0 +
jnz loc_415175  +
mov eax [ebx+14h] +
mov eax [eax+18h] +
cmp dword ptr [eax+0Ch] 3 +
jnz loc_415175  +
lea edx [eax+10h] +
mov eax esi +
call sub_414CE0  +
jmp loc_415175  +
cmp dword ptr [eax+10h] 0 +
jnz loc_415F0E  +
mov eax ds:dword_5148E4 +
test eax eax +
jz loc_416555  +
cmp ds:dword_5148C0 2 +
jbe loc_415CD2  +
cmp ds:dword_5148E8 offset off_4BFB90 +
jnz loc_414E40  +
mov ecx ds:dword_5148D8 +
mov edx ds:dword_5148D0 +
test ecx ecx +
jz loc_41647B  +
add edx [ecx+1Ch] +
mov ecx ds:dword_5148E0 +
cmp edx ecx +
jnb loc_4161C6  +
cmp ds:dword_5148E8 offset off_4BFB90 +
jz loc_4161C6  +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSCannotMoveLo +
call sub_418450  +
jmp loc_414E40  +
cmp eax 7Ch +
jz loc_415F63  +
cmp eax 10Dh +
jnz loc_416024  +
test ebp ebp +
mov eax 1 +
jnz loc_415D4E  +
mov edx ds:dword_5148D0 +
xor eax eax +
test edx edx +
setnz al  +
mov ds:dword_5148D0 eax +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
cmp eax 144h +
jz loc_415FCD  +
cmp eax 145h +
jnz loc_416024  +
cmp ebp ds:dword_5148D0 +
jnb loc_414E40  +
mov ds:dword_5148D0 ebp +
jmp loc_414E40  +
cmp eax 2Bh +
jz loc_416003  +
cmp eax 2Dh +
jnz loc_416024  +
sub ebp ds:dword_5148D0 +
cmp edi ds:dword_5148D8 +
mov ds:dword_5148D0 ebp +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
cmp eax 112h +
jz loc_415F44  +
cmp eax 113h +
jnz loc_416024  +
mov ecx ds:dword_5148D0 +
shl ebp cl +
cmp edi ds:dword_5148D8 +
mov ds:dword_5148D0 ebp +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov eax ds:dword_514784 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_1C] 1 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_51483C +
mov [esp+2Ch+var_2C] eax +
call sub_4500A0  +
test eax eax +
mov esi eax +
jnz loc_4150B5  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_2C] offset aPFSHashCreatio +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
jmp loc_4150B5  +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] offset aPFBfd_hash_l_1 +
call sub_418450  +
jmp loc_4150F0  +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_18] 1 +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] offset word_514820 +
mov [esp+2Ch+var_2C] eax +
call sub_4500F0  +
test eax eax +
jz loc_415ECA  +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-3] +
cmp dl 1 +
jbe loc_41633B  +
mov ds:dword_5148CC 0 +
jmp loc_415A0E  +
mov edx ds:dword_5148E8 +
cmp edx offset off_4BFB90 +
jz loc_4155B2  +
test eax eax +
jz loc_416312  +
mov ecx ds:dword_5148D0 +
test ecx ecx +
jnz loc_4161BA  +
mov eax [ebx+14h] +
cmp dword ptr [eax+0Ch] 7 +
jz loc_415CA2  +
call sub_4BD2B0  +
test eax eax +
jz loc_416199  +
mov eax ds:dword_5148DC +
jmp loc_4155B2  +
xor eax eax +
cmp ebp ds:dword_5148D0 +
mov ds:dword_5148D8 0 +
setz al  +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
xor eax eax +
cmp ebp ds:dword_5148D0 +
mov ds:dword_5148D8 0 +
setnb al  +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
or ds:dword_5148D0 ebp +
cmp edi ds:dword_5148D8 +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
xor ds:dword_5148D0 ebp +
cmp edi ds:dword_5148D8 +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
imul ebp ds:dword_5148D0 +
cmp edi ds:dword_5148D8 +
mov ds:dword_5148D0 ebp +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
cmp ebp ds:dword_5148D0 +
jbe loc_414E40  +
mov ds:dword_5148D0 ebp +
jmp loc_414E40  +
xor eax eax +
cmp ebp ds:dword_5148D0 +
mov ds:dword_5148D8 0 +
setbe al  +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
add ds:dword_5148D0 ebp +
cmp ds:dword_5148D8 edi +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov [esp+2Ch+var_28] 283h +
mov [esp+2Ch+var_2C] offset a____Binutils_5 +
call sub_4184A0  +
jmp loc_414E40  +
mov ecx ds:dword_5148D0 +
test ecx ecx +
jz loc_4162ED  +
mov eax ebp +
cdq   +
idiv  ecx +
mov ds:dword_5148D0 edx +
cmp edi ds:dword_5148D8 +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
xor eax eax +
test ebp ebp +
jz loc_416084  +
mov ecx ds:dword_5148D0 +
xor eax eax +
test ecx ecx +
setnz al  +
mov ds:dword_5148D0 eax +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov ecx ds:dword_5148D0 +
mov eax ebp +
cmp ecx 1 +
jbe loc_4160B0  +
lea eax [ecx+ebp-1] +
xor edx edx +
div  ecx +
imul eax ecx +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov ecx ds:dword_5148D0 +
test ecx ecx +
jz loc_4162C8  +
mov eax ebp +
cdq   +
idiv  ecx +
mov ds:dword_5148D0 eax +
cmp edi ds:dword_5148D8 +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov ecx ds:dword_5148D0 +
shr ebp cl +
cmp edi ds:dword_5148D8 +
mov ds:dword_5148D0 ebp +
jnz loc_414E40  +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov eax ds:dword_5148C0 +
mov edx ds:dword_5148D0 +
mov ds:dword_514908 2 +
test eax eax +
mov ds:dword_5148F4 edx +
jz loc_416145  +
cmp ds:dword_5148E8 offset off_4BFB90 +
jz loc_416607  +
mov ds:dword_5148DC 0 +
jmp loc_414E40  +
xor eax eax +
cmp ebp ds:dword_5148D0 +
mov ds:dword_5148D8 0 +
setb al  +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSUnknownConst +
call sub_418450  +
jmp loc_414E40  +
mov ds:dword_5148D8 edi +
xor edi edi +
jmp loc_414EFF  +
mov eax [ebx+14h] +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_416792  +
cmp dword ptr [eax] 2Bh +
jz loc_416746  +
mov edx ds:dword_5148E8 +
mov eax ds:dword_5148DC +
or dword ptr [edx+14h] 200000h +
jmp loc_4155B2  +
mov ds:dword_5148E0 edx +
mov [eax] edx +
jmp loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_2C] offset unk_50F420 +
mov [esp+2Ch+var_28] eax +
call sub_44E180  +
test eax eax +
jz loc_41665B  +
movzx edx byte ptr [eax+10h] +
mov eax 1 +
test dl 1 +
jnz loc_415902  +
mov eax ds:dword_50F260 +
shr dl 2 +
and edx 1 +
and eax 1 +
cmp edx eax +
setz al  +
movzx eax al +
jmp loc_415902  +
mov edx [eax+14h] +
mov ecx [edx+3Ch] +
test ecx ecx +
jz loc_416521  +
cmp ecx offset off_4BFB90 +
jz loc_4164E2  +
mov edx [edx+38h] +
add edx [eax+18h] +
mov ds:dword_5148D4 0 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 edx +
mov ds:dword_5148D8 ecx +
jmp loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSUndefinedSym +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
jmp loc_414E40  +
mov edx ds:dword_5148E8 +
mov eax ds:dword_5148E0 +
mov ds:dword_5148C8 1 +
mov ds:dword_5148DC 1 +
sub eax [edx+1Ch] +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 edx +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
cmp ds:dword_5148C0 1 +
jz loc_4160D2  +
mov eax [ebx+14h] +
mov [esp+2Ch+var_2C] offset aFSByZero +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
jmp loc_4160D2  +
cmp ds:dword_5148C0 1 +
jz loc_416056  +
mov eax [ebx+14h] +
mov [esp+2Ch+var_2C] offset aFSByZero_0 +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
jmp loc_416056  +
xor eax eax +
jmp loc_4161BA  +
mov eax ds:dword_5148EC +
lea edx [eax-1] +
cmp edx 1 +
jbe loc_4165EE  +
sub eax 4 +
cmp eax 2 +
jbe loc_414E40  +
jmp loc_415AFB  +
cmp dword ptr [eax+14h] offset off_4BFB90 +
jnz loc_415ECA  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_2C] offset unk_50F420 +
mov [esp+2Ch+var_28] eax +
call sub_44E180  +
test eax eax +
jz loc_415ECA  +
movzx eax byte ptr [eax+10h] +
shr al 2 +
mov edx eax +
mov eax ds:dword_50F260 +
and edx 1 +
and eax 1 +
cmp edx eax +
jnz loc_415ECA  +
jmp loc_415A0E  +
cmp ds:dword_5148C0 4 +
jnz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSUndefinedSec +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
jmp loc_414E40  +
cmp ds:dword_5148C0 4 +
jnz loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSUndefinedSec +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
jmp loc_414E40  +
cmp ds:dword_5148C0 4 +
jz loc_41667E  +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 0 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov eax [eax+1Ch] +
mov ds:dword_5148D8 offset off_4BFB90 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D4 0 +
mov eax [eax+20h] +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 0 +
mov ds:dword_5148D4 0 +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
mov ecx ds:dword_5148E8 +
jmp loc_415CE6  +
xor eax eax +
jmp loc_415902  +
mov ebx [eax+24h] +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_2C] eax +
call sub_4537D0  +
xor edx edx +
mov ecx eax +
mov eax ebx +
div  ecx +
jmp loc_4154EF  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSUndefinedMem +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
jmp loc_414E40  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSUndefinedMem +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
jmp loc_414E40  +
cmp ds:dword_5148E8 offset off_4BFB90 +
jz loc_416665  +
mov edx [edx+38h] +
add edx [eax+18h] +
mov ds:dword_5148D4 0 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D0 edx +
mov ds:dword_5148D8 0 +
jmp loc_414E40  +
cmp ds:dword_5148C0 1 +
jnz loc_41669A  +
mov eax [eax+18h] +
mov ds:dword_5148D4 0 +
mov ds:dword_5148DC 1 +
mov ds:dword_5148D8 edx +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSAssignmentTo +
call sub_418450  +
jmp loc_414E40  +
cmp ebp 1 +
mov ecx ds:dword_5148D0 +
mov ebx ds:dword_5148E0 +
jbe loc_416677  +
lea eax [ebp+ebx-1] +
xor edx edx +
div  ebp +
imul eax ebp +
mov edx ds:dword_5148EC +
mov ds:dword_5148D0 eax +
cmp edx 4 +
jz loc_416705  +
cmp edx 5 +
jz loc_41672A  +
lea esi [ebp-1] +
and esi ebx +
add eax esi +
cmp edx 6 +
mov ds:dword_5148D0 eax +
jz loc_414E40  +
test edx edx +
jnz loc_41671B  +
mov ds:dword_5148EC 1 +
mov ds:dword_5148F0 eax +
mov ds:dword_514900 ecx +
mov ds:dword_514904 ebp +
mov ds:dword_5148F8 0 +
jmp loc_414E40  +
mov eax ds:dword_5148D0 +
mov ds:dword_5148EC 3 +
mov ds:dword_5148FC eax +
jmp loc_414E40  +
mov eax ds:dword_5148EC +
mov ecx eax +
and ecx 0FFFFFFFBh +
sub ecx 1 +
jz loc_4166B6  +
cmp eax 4 +
jz loc_416714  +
cmp eax 6 +
jnz loc_416145  +
mov ds:dword_5148D0 ebp +
sub eax 1 +
jnz loc_414E40  +
mov ds:dword_5148EC 2 +
jmp loc_414E40  +
mov [esp+2Ch+var_2C] offset aPFBfd_link_h_0 +
call sub_418450  +
jmp loc_414E40  +
mov eax 1 +
jmp loc_415902  +
cmp ds:dword_514760 0 +
jz loc_416245  +
jmp loc_4164F2  +
mov eax ebx +
jmp loc_41658A  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFSUndefinedSec +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
jmp loc_4163F3  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aXSUnresolvable +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
jmp loc_414E40  +
cmp eax 4 +
setz bl  +
jz loc_4166C7  +
cmp eax 1 +
jnz loc_41662C  +
lea ecx [ebp+edx+0] +
test bl bl +
mov ds:dword_5148F8 ecx +
jz loc_41662C  +
mov ebx ds:dword_514900 +
lea esi [ebx-1] +
test ecx esi +
jz loc_41662C  +
lea ecx [ebx+ecx-1] +
neg ebx  +
and ecx ebx +
mov ds:dword_5148F8 ecx +
sub ecx edx +
mov ds:dword_5148D0 ecx +
jmp loc_416632  +
mov eax ds:dword_5148F0 +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov ebx 1 +
jmp loc_4166C7  +
mov ds:dword_5148DC 0 +
jmp loc_414E40  +
cmp ebp ecx +
jbe loc_414E40  +
sub ebp ecx +
lea edx [ecx+ebx-1] +
and ebp edx +
add eax ebp +
mov ds:dword_5148D0 eax +
jmp loc_414E40  +
mov edx [eax+10h] +
cmp dword ptr [edx+0Ch] 3 +
jnz loc_4161AF  +
cmp dword ptr [edx] 103h +
jnz loc_4161AF  +
mov edx [edx+10h] +
cmp byte ptr [edx] 2Eh +
jnz loc_4161AF  +
cmp byte ptr [edx+1] 0 +
jnz loc_4161AF  +
mov eax [eax+14h] +
cmp dword ptr [eax+0Ch] 7 +
jz loc_416830  +
call sub_4BD2B0  +
test eax eax +
jnz loc_415F1B  +
mov eax [ebx+14h] +
cmp dword ptr [eax+0Ch] 2 +
jnz loc_4161AF  +
cmp dword ptr [eax] 117h +
jnz loc_4161AF  +
mov edx [eax+10h] +
cmp dword ptr [edx+0Ch] 1 +
jnz loc_4161AF  +
mov eax [edx+10h] +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_4161AF  +
cmp dword ptr [eax] 110h +
jnz loc_4161AF  +
mov ecx [eax+10h] +
cmp dword ptr [ecx+0Ch] 3 +
jnz loc_4161AF  +
cmp dword ptr [ecx] 103h +
jnz loc_4161AF  +
mov ecx [ecx+10h] +
cmp byte ptr [ecx] 2Eh +
jnz loc_4161AF  +
cmp byte ptr [ecx+1] 0 +
jnz loc_4161AF  +
mov eax [eax+14h] +
cmp dword ptr [eax+0Ch] 7 +
jnz loc_4161AF  +
cmp dword ptr [eax+10h] 0 +
jnz loc_4161AF  +
mov eax [edx+18h] +
cmp dword ptr [eax+0Ch] 7 +
jnz loc_4161AF  +
cmp dword ptr [eax+10h] 1 +
jnz loc_4161AF  +
jmp loc_415F1B  +
cmp dword ptr [eax+10h] 0 +
jnz loc_416782  +
lea esi [esi+0] +
jmp loc_415F1B  +
***
mov [esp+18h+var_18] 18h +
call sub_40AAA0  +
mov dword ptr [eax] 102h +
mov ebx eax +
call sub_405E40  +
mov dword ptr [ebx+14h] 0 +
mov dword ptr [ebx+0Ch] 7 +
mov [ebx+8] eax +
mov eax dword_4BE008 +
mov [ebx+4] eax +
mov eax [esp+18h+arg_0] +
mov [ebx+10h] eax +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
***
mov [esp+18h+var_18] 18h +
call sub_40AAA0  +
mov dword ptr [eax] 102h +
mov ebx eax +
call sub_405E40  +
mov dword ptr [ebx+0Ch] 7 +
mov [ebx+8] eax +
mov eax dword_4BE008 +
mov [ebx+4] eax +
mov eax [esp+18h+arg_0] +
mov [ebx+10h] eax +
mov eax [esp+18h+arg_4] +
mov [ebx+14h] eax +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
***
mov [esp+18h+var_18] 18h +
call sub_40AAA0  +
mov dword ptr [eax] 16Ch +
mov ebx eax +
call sub_405E40  +
mov dword ptr [ebx+0Ch] 9 +
mov [ebx+8] eax +
mov eax dword_4BE008 +
mov [ebx+4] eax +
mov eax [esp+18h+arg_0] +
mov [ebx+10h] eax +
mov eax [esp+18h+arg_4] +
mov [ebx+14h] eax +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
***
mov eax [esp+arg_8] +
mov ds:dword_5148C8 0 +
mov edx [eax] +
mov ds:dword_5148E4 eax +
mov eax [esp+arg_4] +
mov ds:dword_5148E0 edx +
mov ds:dword_5148E8 eax +
mov eax [esp+arg_0] +
jmp sub_414E00  +
***
mov eax [esp+arg_0] +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov ds:dword_5148E4 0 +
mov ds:dword_5148E8 offset off_4BFB90 +
jmp sub_414E00  +
***
jmp sub_4169B0  +
***
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov edx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_20] 0 +
mov [esp+3Ch+var_1C] eax +
mov [esp+3Ch+var_2C] edx +
mov edx [eax+8] +
mov [esp+3Ch+var_24] edx +
mov edx [eax+4] +
mov eax [esp+3Ch+arg_8] +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov [esp+3Ch+var_28] edx +
mov [esp+3Ch+var_18] eax +
lea eax [esp+3Ch+var_2C] +
mov ds:dword_5148E4 0 +
mov ds:dword_5148E8 offset off_4BFB90 +
call sub_414E00  +
mov eax ds:dword_5148DC +
test eax eax +
jnz loc_416A54  +
mov [esp+3Ch+var_3C] 18h +
call sub_40AAA0  +
mov edx [esp+3Ch+var_2C] +
mov [eax] edx +
mov edx [esp+3Ch+var_28] +
mov [eax+4] edx +
mov edx [esp+3Ch+var_24] +
mov [eax+8] edx +
mov edx [esp+3Ch+var_20] +
mov [eax+0Ch] edx +
mov edx [esp+3Ch+var_1C] +
mov [eax+10h] edx +
mov edx [esp+3Ch+var_18] +
mov [eax+14h] edx +
add esp 3Ch +
retn   +
mov eax ds:dword_5148D0 +
mov [esp+3Ch+var_3C] eax +
call sub_416850  +
add esp 3Ch +
retn   +
***
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov edx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_20] 1 +
mov [esp+3Ch+var_1C] eax +
mov [esp+3Ch+var_2C] edx +
mov edx [eax+8] +
mov [esp+3Ch+var_24] edx +
mov edx [eax+4] +
mov eax [esp+3Ch+arg_C] +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov [esp+3Ch+var_28] edx +
mov edx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_14] eax +
lea eax [esp+3Ch+var_2C] +
mov ds:dword_5148E4 0 +
mov ds:dword_5148E8 offset off_4BFB90 +
mov [esp+3Ch+var_18] edx +
call sub_414E00  +
mov eax ds:dword_5148DC +
test eax eax +
jnz loc_416B23  +
mov [esp+3Ch+var_3C] 1Ch +
call sub_40AAA0  +
mov edx [esp+3Ch+var_2C] +
mov [eax] edx +
mov edx [esp+3Ch+var_28] +
mov [eax+4] edx +
mov edx [esp+3Ch+var_24] +
mov [eax+8] edx +
mov edx [esp+3Ch+var_20] +
mov [eax+0Ch] edx +
mov edx [esp+3Ch+var_1C] +
mov [eax+10h] edx +
mov edx [esp+3Ch+var_18] +
mov [eax+14h] edx +
mov edx [esp+3Ch+var_14] +
mov [eax+18h] edx +
add esp 3Ch +
retn   +
mov eax ds:dword_5148D0 +
mov [esp+3Ch+var_3C] eax +
call sub_416850  +
add esp 3Ch +
retn   +
***
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov edx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_20] 2 +
mov [esp+3Ch+var_1C] eax +
mov [esp+3Ch+var_2C] edx +
mov edx [eax+8] +
mov [esp+3Ch+var_24] edx +
mov edx [eax+4] +
lea eax [esp+3Ch+var_2C] +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov ds:dword_5148E4 0 +
mov [esp+3Ch+var_28] edx +
mov ds:dword_5148E8 offset off_4BFB90 +
call sub_414E00  +
mov eax ds:dword_5148DC +
test eax eax +
jnz loc_416BD5  +
mov [esp+3Ch+var_3C] 14h +
call sub_40AAA0  +
mov edx [esp+3Ch+var_2C] +
mov [eax] edx +
mov edx [esp+3Ch+var_28] +
mov [eax+4] edx +
mov edx [esp+3Ch+var_24] +
mov [eax+8] edx +
mov edx [esp+3Ch+var_20] +
mov [eax+0Ch] edx +
mov edx [esp+3Ch+var_1C] +
mov [eax+10h] edx +
add esp 3Ch +
retn   +
mov eax ds:dword_5148D0 +
mov [esp+3Ch+var_3C] eax +
call sub_416850  +
add esp 3Ch +
retn   +
***
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_2C] eax +
call sub_405E40  +
mov [esp+3Ch+var_20] 3 +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov ds:dword_5148E4 0 +
mov ds:dword_5148E8 offset off_4BFB90 +
mov [esp+3Ch+var_24] eax +
mov eax dword_4BE008 +
mov [esp+3Ch+var_28] eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_1C] eax +
lea eax [esp+3Ch+var_2C] +
call sub_414E00  +
mov eax ds:dword_5148DC +
test eax eax +
jnz loc_416C90  +
mov [esp+3Ch+var_3C] 14h +
call sub_40AAA0  +
mov edx [esp+3Ch+var_2C] +
mov [eax] edx +
mov edx [esp+3Ch+var_28] +
mov [eax+4] edx +
mov edx [esp+3Ch+var_24] +
mov [eax+8] edx +
mov edx [esp+3Ch+var_20] +
mov [eax+0Ch] edx +
mov edx [esp+3Ch+var_1C] +
mov [eax+10h] edx +
add esp 3Ch +
retn   +
mov eax ds:dword_5148D0 +
mov [esp+3Ch+var_3C] eax +
call sub_416850  +
add esp 3Ch +
retn   +
***
jmp sub_416CB0  +
***
mov ebx [esp+18h+arg_4] +
mov [esp+18h+var_18] 20h +
call sub_40AAA0  +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx [ebx+4] +
mov dword ptr [eax] 3Dh +
mov dword ptr [eax+0Ch] 4 +
mov [eax+14h] ebx +
mov [eax+4] edx +
mov edx [esp+18h+arg_0] +
mov dword ptr [eax+18h] 0 +
mov [eax+10h] edx +
mov edx [esp+18h+arg_8] +
mov [eax+1Ch] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_4] +
mov [esp+18h+var_18] 20h +
call sub_40AAA0  +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx [ebx+4] +
mov dword ptr [eax] 3Dh +
mov dword ptr [eax+0Ch] 4 +
mov [eax+14h] ebx +
mov [eax+4] edx +
mov edx [esp+18h+arg_0] +
mov dword ptr [eax+18h] 1 +
mov dword ptr [eax+1Ch] 0 +
mov [eax+10h] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_4] +
mov [esp+18h+var_18] 20h +
call sub_40AAA0  +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx [ebx+4] +
mov dword ptr [eax] 3Dh +
mov dword ptr [eax+0Ch] 5 +
mov [eax+14h] ebx +
mov [eax+4] edx +
mov edx [esp+18h+arg_0] +
mov dword ptr [eax+18h] 0 +
mov [eax+10h] edx +
mov edx [esp+18h+arg_8] +
mov [eax+1Ch] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] 18h +
call sub_40AAA0  +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx [ebx+4] +
mov dword ptr [eax] 21h +
mov dword ptr [eax+0Ch] 8 +
mov [eax+10h] ebx +
mov [eax+4] edx +
mov edx [esp+18h+arg_4] +
mov [eax+14h] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov edx ds:dword_514770 +
test edx edx +
jz loc_416F11  +
test ebx ebx +
jz loc_417147  +
cmp dword ptr [ebx+0Ch] 9 +
ja loc_417064  +
mov eax [ebx+0Ch] +
jmp ds:off_4D3324[eax*4]  +
mov eax ds:dword_514770 +
mov [esp+18h+var_10] 8 +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset aAssert +
mov [esp+18h+var_C] eax +
call fwrite  +
mov eax [ebx+10h] +
mov [esp+18h+var_18] eax +
call sub_416DE0  +
mov eax [ebx+14h] +
mov [esp+18h+var_14] offset aS_16 +
mov [esp+18h+var_10] eax +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] eax +
call fprintf  +
add esp 18h +
pop ebx  +
retn   +
mov eax [ebx+10h] +
mov edx [eax+94h] +
test edx edx +
jz loc_416E83  +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] offset aB_2 +
call sub_4184D0  +
mov eax [ebx+10h] +
mov edx [ebx+14h] +
mov eax [eax] +
mov [esp+18h+var_18] offset aS0xV +
mov [esp+18h+var_10] edx +
mov [esp+18h+var_14] eax +
call sub_4184D0  +
add esp 18h +
pop ebx  +
retn   +
mov eax [ebx] +
lea edx [eax-117h] +
cmp edx 2Eh +
ja loc_417030  +
jmp ds:off_4D334C[edx*4]  +
mov eax [ebx+10h] +
mov [esp+18h+var_18] eax +
call sub_416DE0  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 3Fh +
mov [esp+18h+var_14] eax +
call fputc  +
mov eax [ebx+14h] +
mov [esp+18h+var_18] eax +
call sub_416DE0  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 3Ah +
mov [esp+18h+var_14] eax +
call fputc  +
mov edx ds:dword_514770 +
mov ebx [ebx+18h] +
test edx edx +
jnz loc_416DF6  +
mov eax ds:_iob +
add eax 40h +
mov ds:dword_514770 eax +
jmp loc_416DF6  +
mov eax [ebx] +
cmp eax 103h +
jz loc_417158  +
xor edx edx +
call sub_414D40  +
mov eax [ebx+10h] +
test eax eax +
jz loc_416E5E  +
mov [esp+18h+var_10] eax +
mov eax ds:dword_514770 +
mov [esp+18h+var_14] offset aS_17 +
mov [esp+18h+var_18] eax +
call fprintf  +
jmp loc_416E5E  +
mov eax [ebx+10h] +
mov edx ds:dword_514770 +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] edx +
call fputs  +
mov eax [ebx] +
mov edx 1 +
call sub_414D40  +
mov ebx [ebx+14h] +
jmp loc_416DE8  +
mov eax [ebx+10h] +
mov [esp+18h+var_14] offset aProvideS +
mov [esp+18h+var_10] eax +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] eax +
call fprintf  +
mov eax [ebx+14h] +
mov [esp+18h+var_18] eax +
call sub_416DE0  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 29h +
mov [esp+18h+var_14] eax +
call fputc  +
add esp 18h +
pop ebx  +
retn   +
mov eax [ebx+10h] +
mov [esp+18h+var_18] offset a0xV_2 +
mov [esp+18h+var_14] eax +
call sub_4184D0  +
add esp 18h +
pop ebx  +
retn   +
mov eax [ebx] +
xor edx edx +
call sub_414D40  +
mov eax [ebx+10h] +
test eax eax +
jz loc_416E5E  +
mov eax ds:dword_514770 +
mov [esp+18h+var_10] 2 +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset asc_4D3306 +
mov [esp+18h+var_C] eax +
call fwrite  +
mov eax [ebx+10h] +
jmp loc_416FAF  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 28h +
mov [esp+18h+var_14] eax +
call fputc  +
mov eax [ebx+10h] +
mov [esp+18h+var_18] eax +
call sub_416DE0  +
mov eax [ebx] +
mov edx 1 +
call sub_414D40  +
mov eax [ebx+14h] +
jmp loc_416FAF  +
mov [esp+18h+var_14] 5DDh +
mov [esp+18h+var_18] offset a____Binutils_5 +
call sub_4184A0  +
add esp 18h +
pop ebx  +
retn   +
xor edx edx +
mov eax 130h +
call sub_414D40  +
mov eax ds:dword_514770 +
mov [esp+18h+var_10] 3 +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset asc_4D32FE +
mov [esp+18h+var_C] eax +
call fwrite  +
mov eax [ebx+14h] +
mov [esp+18h+var_18] eax +
call sub_416DE0  +
mov eax ds:dword_514770 +
mov [esp+18h+var_10] 3 +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset asc_4D3302 +
mov [esp+18h+var_C] eax +
jmp loc_417024  +
xor edx edx +
call sub_414D40  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 20h +
mov [esp+18h+var_14] eax +
call fputc  +
mov eax ds:dword_514770 +
mov [esp+18h+var_18] 28h +
mov [esp+18h+var_14] eax +
call fputc  +
mov eax [ebx+10h] +
mov [esp+18h+var_18] eax +
call sub_416DE0  +
mov eax ds:dword_514770 +
mov [esp+18h+var_10] 2 +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset asc_4D331E +
mov [esp+18h+var_C] eax +
call fwrite  +
jmp loc_41705C  +
mov [esp+18h+arg_0] offset aNullTree +
add esp 18h +
pop ebx  +
jmp sub_4184D0  +
mov eax [ebx+10h] +
mov edx ds:dword_514770 +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] edx +
call fputs  +
jmp loc_416E5E  +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_4171F3  +
mov eax ebx +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov ds:dword_5148E4 0 +
mov ds:dword_5148E8 offset off_4BFB90 +
call sub_414E00  +
mov edx ds:dword_5148DC +
mov eax ds:dword_5148D0 +
test edx edx +
jnz loc_4171F7  +
mov eax [esp+18h+arg_8] +
test eax eax +
jz loc_4171F3  +
cmp ds:dword_5148C0 1 +
jz loc_4171F3  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] offset aFSNonconstantE +
mov [esp+18h+var_10] eax +
call sub_418450  +
mov eax [esp+18h+arg_4] +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
test ebx ebx +
jz loc_417281  +
mov eax ebx +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov ds:dword_5148E4 0 +
mov ds:dword_5148E8 offset off_4BFB90 +
call sub_414E00  +
mov edx ds:dword_5148DC +
test edx edx +
jnz loc_417290  +
mov eax [esp+1Ch+arg_8] +
test eax eax +
jz loc_417281  +
cmp ds:dword_5148C0 1 +
jz loc_417281  +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] offset aFSNonconstantE +
mov [esp+1Ch+var_14] eax +
call sub_418450  +
mov eax [esp+1Ch+arg_4] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ds:dword_5148D4 +
test eax eax +
jz loc_4172A7  +
mov [esp+1Ch+var_1C] eax +
call strlen  +
test eax eax +
mov ebx eax +
jnz loc_4172E2  +
mov [esp+1Ch+var_1C] 0Bh +
call sub_4A05F0  +
mov edx ds:dword_5148D0 +
mov ecx edx +
shr ecx 18h +
mov [eax+4] cl +
mov ecx edx +
shr ecx 10h +
mov [eax+5] cl +
mov ecx edx +
shr ecx 8 +
mov [eax+6] cl +
mov [eax+7] dl +
mov dword ptr [eax] 4 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea esi [eax+1] +
shr esi 1 +
lea eax [esi+7] +
mov [esp+1Ch+var_1C] eax +
call sub_4A05F0  +
mov ecx ds:dword_5148D4 +
mov ebp eax +
mov [eax] esi +
lea edi [eax+4] +
xor eax eax +
add ecx 1 +
movzx esi byte ptr [ecx-1] +
lea edx [esi-30h] +
cmp edx 9 +
jbe loc_417316  +
lea edx [esi-37h] +
and edx 0Fh +
shl eax 4 +
sub ebx 1 +
add eax edx +
test bl 1 +
jnz loc_417301  +
test ebx ebx +
lea edx [edi+1] +
mov [edi] al +
jz loc_417341  +
add ecx 1 +
movzx esi byte ptr [ecx-1] +
mov edi edx +
xor eax eax +
lea edx [esi-30h] +
cmp edx 9 +
jbe loc_417316  +
jmp loc_417310  +
add esp 1Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_4173DA  +
mov eax ebx +
mov ds:dword_5148C8 0 +
mov ds:dword_5148E0 0 +
mov ds:dword_5148E4 0 +
mov ds:dword_5148E8 offset off_4BFB90 +
call sub_414E00  +
mov edx ds:dword_5148DC +
test edx edx +
jz loc_4173B1  +
mov eax ds:dword_5148D8 +
test eax eax +
jz loc_4173E3  +
mov eax [eax+1Ch] +
add eax ds:dword_5148D0 +
mov ds:dword_5148D0 eax +
add esp 18h +
pop ebx  +
retn   +
mov eax [esp+18h+arg_8] +
test eax eax +
jz loc_4173DA  +
cmp ds:dword_5148C0 1 +
jz loc_4173DA  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] offset aFSNonconstantE +
mov [esp+18h+var_10] eax +
call sub_418450  +
mov eax [esp+18h+arg_4] +
add esp 18h +
pop ebx  +
retn   +
mov eax ds:dword_5148D0 +
jmp loc_4173DE  +
***
sub esp 1Ch +
mov [esp+1Ch+var_10] 0Dh +
mov [esp+1Ch+var_14] 14h +
mov [esp+1Ch+var_18] offset sub_414C90 +
mov [esp+1Ch+var_1C] offset unk_50F420 +
call sub_44DE40  +
test eax eax +
jnz loc_417427  +
mov [esp+1Ch+var_1C] offset aPFCanNotCrea_0 +
call sub_418450  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] offset sub_414C20 +
mov [esp+1Ch+var_1C] offset unk_50F420 +
call sub_44E4D0  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] offset unk_50F420 +
call sub_44DF50  +
add esp 1Ch +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+8] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+4] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+0Ch] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+10h] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+14h] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+20h] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+18h] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+30h] +
jmp eax  +
***
mov eax ds:dword_50F43C +
mov eax [eax+40h] +
test eax eax +
jz locret_417520  +
jmp eax  +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+34h] +
test eax eax +
jz locret_417540  +
jmp eax  +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+24h] +
jmp eax  +
***
mov eax ds:dword_50F43C +
push ebx  +
mov eax [eax+38h] +
test eax eax +
jz loc_417570  +
pop ebx  +
jmp eax  +
xor eax eax +
pop ebx  +
retn   +
***
mov eax ds:dword_50F43C +
push ebx  +
mov eax [eax+3Ch] +
test eax eax +
jz loc_417590  +
pop ebx  +
jmp eax  +
xor eax eax +
pop ebx  +
retn   +
***
mov eax ds:dword_50F43C +
push ebp  +
push edi  +
push esi  +
push ebx  +
mov eax [eax+48h] +
test eax eax +
jz loc_4175B6  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+4Ch] +
test eax eax +
jz loc_4175D0  +
jmp eax  +
xor eax eax +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+44h] +
test eax eax +
jz loc_4175F0  +
jmp eax  +
xor eax eax +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+50h] +
test eax eax +
jz loc_417610  +
jmp eax  +
xor eax eax +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+58h] +
test eax eax +
jz loc_417630  +
jmp eax  +
xor eax eax +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+1Ch] +
jmp eax  +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] offset aGnutarget_0 +
call getenv  +
test eax eax +
jz loc_417667  +
add esp 1Ch +
retn   +
mov eax ds:dword_50F43C +
mov eax [eax+2Ch] +
add esp 1Ch +
retn   +
***
sub esp 2Ch +
mov edx ds:dword_50F278 +
test edx edx +
jz loc_4176C6  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_4176D0  +
mov ecx ds:dword_5146E0 +
test ecx ecx +
jz loc_4176C6  +
lea eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edx +
call j_strtoul  +
mov eax [esp+2Ch+var_10] +
cmp byte ptr [eax] 0 +
jnz loc_4176EB  +
add esp 2Ch +
retn   +
mov eax ds:dword_5146E0 +
test eax eax +
jnz loc_4176A5  +
xor eax eax +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edx +
call sub_40D550  +
add esp 2Ch +
retn   +
mov eax ds:dword_5146E0 +
mov edx ds:dword_50F278 +
jmp loc_4176DB  +
***
sub esp 1Ch +
mov dword ptr [esp] 0 +
call sub_40EDC0  +
add esp 1Ch +
retn   +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz locret_417743  +
jmp sub_40EA90  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] offset aSSyslibIgnored +
call sub_418420  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] offset aSHllIgnored +
call sub_418420  +
add esp 1Ch +
retn   +
***
mov ebx offset off_4BE0C0 +
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
cmp byte ptr [edi] 67h +
jz loc_417900  +
mov ebx off_4BE0C0 +
test ebx ebx +
jz loc_4178C0  +
mov esi offset off_4BE0C0 +
jmp loc_41789D  +
add esi 4 +
mov ebx [esi] +
test ebx ebx +
jz loc_4178C0  +
mov eax [ebx+28h] +
mov [esp+10h+var_10] edi +
mov [esp+10h+var_C] eax +
call strcmp  +
test eax eax +
jnz loc_417894  +
mov ds:dword_50F43C ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] offset aPUnrecognisedE +
call sub_418450  +
mov [esp+10h+var_10] offset aSupportedEmula +
call sub_418450  +
mov eax ds:_iob +
add eax 40h +
mov [esp+10h+var_10] eax +
call sub_417820  +
mov [esp+10h+arg_0] offset aF +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp sub_418450  +
cmp byte ptr [edi+1] 6Ch +
jnz loc_417883  +
cmp byte ptr [edi+2] 64h +
lea eax [edi+3] +
cmovz edi eax +
jmp loc_417883  +
***
push esi  +
mov esi offset off_4BE0C0 +
push ebx  +
sub esp 10h +
mov ebx off_4BE0C0 +
mov edi [esp+18h+arg_0] +
test ebx ebx +
jz loc_417980  +
nop   +
lea esi [esi+0] +
mov edx [ebx+54h] +
test edx edx +
jz loc_41796B  +
mov eax [ebx+28h] +
mov [esp+18h+var_14] offset aS_10 +
mov [esp+18h+var_18] edi +
mov [esp+18h+var_10] eax +
call fprintf  +
mov eax [ebx+54h] +
mov [esp+18h+var_18] edi +
call eax  +
mov eax 1 +
add esi 4 +
mov ebx [esi] +
test ebx ebx +
jnz loc_417940  +
test eax eax +
jz loc_417980  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+18h+var_C] edi +
mov [esp+18h+var_10] 21h +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset aNoEmulationSpe +
call fwrite  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax ds:dword_50F43C +
mov eax [eax+5Ch] +
test eax eax +
jz loc_4179C0  +
jmp eax  +
xor eax eax +
retn   +
***
mov edx ds:dword_50F43C +
mov eax [esp-10h+arg_0] +
mov edx [edx+60h] +
test edx edx +
jz locret_4179E3  +
jmp edx  +
retn   +
***
mov eax ds:dword_50F43C +
push ebx  +
mov eax [eax+64h] +
test eax eax +
jz loc_417A00  +
pop ebx  +
jmp eax  +
pop ebx  +
retn   +
***
mov eax ds:_iob +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_10] offset aGnuBinutils2_0 +
mov [esp+18h+var_14] offset aGnuLdS +
add eax 20h +
mov [esp+18h+var_18] eax +
call fprintf  +
test bl 2 +
jnz loc_417A82  +
and ebx 1 +
jnz loc_417A47  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] offset aSupportedEmu_0 +
call puts  +
mov eax off_4BE0C0 +
test eax eax +
jz loc_417A42  +
mov ebx offset off_4BE0C0 +
mov eax [eax+28h] +
add ebx 4 +
mov [esp+18h+var_18] offset aS_11 +
mov [esp+18h+var_14] eax +
call printf  +
mov eax [ebx] +
test eax eax +
jnz loc_417A61  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] offset aCopyrightC2015 +
call puts  +
mov [esp+18h+var_18] offset aThisProgramIsF +
call puts  +
jmp loc_417A3D  +
***
sub esp 1Ch +
lea eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_417AD0  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 0BCh +
mov ecx [esp+0BCh+arg_4] +
mov edi [esp+0BCh+arg_0] +
mov esi [esp+0BCh+arg_8] +
mov [esp+0BCh+var_94] 0 +
movzx eax byte ptr [ecx] +
test al al +
jz loc_417B47  +
nop   +
cmp al 25h +
jz loc_417B73  +
mov ebx ecx +
jmp loc_417B0E  +
cmp al 25h +
jz loc_417B19  +
mov ebx ebp +
movzx eax byte ptr [ebx+1] +
lea ebp [ebx+1] +
test al al +
jnz loc_417B08  +
cmp ecx ebp +
jz loc_417B3D  +
mov eax ebp +
sub eax ecx +
mov [esp+0BCh+var_B0] edi +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_B8] 1 +
mov [esp+0BCh+var_BC] ecx +
call fwrite  +
movzx eax byte ptr [ebx+1] +
cmp al 25h +
jz loc_417B75  +
mov ecx ebp +
test al al +
jnz loc_417B00  +
mov ecx [esp+0BCh+arg_C] +
test ecx ecx +
jz loc_417B5C  +
mov edx ds:dword_514748 +
test edx edx +
jnz loc_417B8D  +
mov eax [esp+0BCh+var_94] +
test eax eax +
jnz loc_4183B9  +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp ecx +
movsx ecx byte ptr [ebp+1] +
lea ebx [ebp+2] +
lea eax [ecx-25h] +
cmp al 51h +
ja loc_417BAD  +
movzx eax al +
jmp ds:off_4D39F4[eax*4]  +
mov ds:dword_514724 0 +
jmp loc_417B5C  +
movzx eax byte ptr [ebp+2] +
cmp al 64h +
jz loc_418321  +
cmp al 75h +
jz loc_418255  +
mov [esp+0BCh+var_B4] ecx +
mov [esp+0BCh+var_B8] offset aC +
mov [esp+0BCh+var_BC] edi +
call fprintf  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov ecx ebp +
jmp loc_417B43  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
mov [esp+0BCh+var_B8] offset a08lx +
mov [esp+0BCh+var_B4] eax +
lea eax [esp+0BCh+var_70] +
mov [esp+0BCh+var_BC] eax +
call sprintf  +
movzx ecx byte ptr [esp+0BCh+var_70] +
lea eax [esp+0BCh+var_70] +
cmp cl 30h +
jnz loc_417C0B  +
lea esi [esi+0] +
add eax 1 +
movzx ecx byte ptr [eax] +
cmp cl 30h +
jz loc_417C00  +
cmp cl 1 +
sbb eax 0 +
jmp loc_418128  +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] 25h +
call putc  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov ecx ebp +
jmp loc_417B43  +
lea edx [esi+4] +
mov esi [esi] +
mov [esp+0BCh+var_8C] edx +
mov eax [esi] +
mov ecx [esi+94h] +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
mov [esp+0BCh+var_90] ecx +
call fputs  +
mov ecx [esp+0BCh+var_90] +
mov edx [esp+0BCh+var_8C] +
test ecx ecx +
jz loc_417C78  +
mov eax [ecx+4] +
mov eax [eax+4] +
cmp eax 5 +
jz loc_418301  +
cmp eax 2 +
jz loc_4182A0  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi edx +
mov ecx ebp +
jmp loc_417B43  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
test eax eax +
jz loc_41838A  +
mov ecx [eax+8Ch] +
test ecx ecx +
jz loc_418350  +
mov esi [eax] +
mov eax [ecx] +
mov [esp+0BCh+var_B8] offset aSS +
mov [esp+0BCh+var_B0] esi +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_BC] edi +
call fprintf  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi [esp+0BCh+var_90] +
mov ecx ebp +
jmp loc_417B43  +
mov edx [esi+4] +
mov eax [esi] +
mov [esp+0BCh+var_8C] edx +
lea edx [esi+0Ch] +
mov [esp+0BCh+var_84] edx +
mov edx [esi+8] +
test eax eax +
mov [esp+0BCh+var_90] eax +
mov [esp+0BCh+var_88] edx +
jz loc_418153  +
mov [esp+0BCh+var_BC] eax +
call sub_4509A0  +
test eax eax +
jz loc_418337  +
mov edx [esp+0BCh+var_90] +
lea ecx [esp+0BCh+var_70] +
mov eax [edx+4] +
mov esi [edx+78h] +
mov eax [eax+128h] +
mov [esp+0BCh+var_A4] ecx +
lea ecx [esp+0BCh+var_74] +
mov [esp+0BCh+var_A8] ecx +
lea ecx [esp+0BCh+var_78] +
mov [esp+0BCh+var_AC] ecx +
mov ecx [esp+0BCh+var_88] +
mov [esp+0BCh+var_A0] 0 +
mov [esp+0BCh+var_B8] esi +
mov [esp+0BCh+var_BC] edx +
mov [esp+0BCh+var_B0] ecx +
mov ecx [esp+0BCh+var_8C] +
mov [esp+0BCh+var_B4] ecx +
call eax  +
test eax eax +
jz loc_418153  +
mov ecx [esp+0BCh+var_74] +
test ecx ecx +
jz loc_41827E  +
movzx eax byte ptr [ebp+1] +
cmp al 48h +
jz loc_417D73  +
cmp al 43h +
jnz loc_41827E  +
mov esi ds:dword_50F448 +
test esi esi +
jz loc_417D9A  +
mov eax ds:dword_50F444 +
test eax eax +
jz loc_417D9A  +
mov edx ds:dword_50F440 +
test edx edx +
jz loc_417D9A  +
cmp [esp+0BCh+var_90] esi +
jz loc_4183C5  +
mov esi [esp+0BCh+var_90] +
mov [esp+0BCh+var_B0] ecx +
mov [esp+0BCh+var_B8] offset aBInFunctionT +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_B4] esi +
call sub_417AA0  +
mov eax ds:dword_50F444 +
mov ds:dword_50F448 esi +
test eax eax +
jz loc_417DCD  +
mov [esp+0BCh+var_BC] eax +
call free  +
mov eax [esp+0BCh+var_78] +
mov ds:dword_50F444 0 +
test eax eax +
jz loc_417DEC  +
mov [esp+0BCh+var_BC] eax +
call sub_4A06C0  +
mov ds:dword_50F444 eax +
mov eax ds:dword_50F440 +
test eax eax +
jz loc_417DFD  +
mov [esp+0BCh+var_BC] eax +
call free  +
mov eax [esp+0BCh+var_74] +
xor esi esi +
mov [esp+0BCh+var_BC] eax +
call sub_4A06C0  +
mov ds:dword_50F440 eax +
mov eax [esp+0BCh+var_78] +
test eax eax +
jz loc_417E2C  +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_B8] offset aS_21 +
mov [esp+0BCh+var_BC] edi +
call fprintf  +
movzx ecx byte ptr [ebp+1] +
xor eax eax +
cmp cl 48h +
setnz al  +
mov [esp+0BCh+var_90] eax +
mov eax [esp+0BCh+var_74] +
test eax eax +
jz loc_417E4D  +
cmp cl 47h +
jz loc_4183A0  +
mov ecx [esp+0BCh+var_78] +
test ecx ecx +
jz loc_418170  +
mov ecx [esp+0BCh+var_70] +
test ecx ecx +
jz loc_418170  +
mov edx [esp+0BCh+var_90] +
mov eax offset unk_4D3934 +
mov [esp+0BCh+var_B4] ecx +
mov [esp+0BCh+var_B8] offset aUS +
mov [esp+0BCh+var_BC] edi +
test edx edx +
mov edx offset asc_4D3935 +
cmovz eax edx +
mov [esp+0BCh+var_B0] eax +
call fprintf  +
mov eax [esp+0BCh+var_90] +
test eax eax +
jnz loc_418190  +
jmp loc_418170  +
call sub_44B8A0  +
mov [esp+0BCh+var_BC] eax +
call sub_44B8B0  +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
call fputs  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov ecx ebp +
jmp loc_417B43  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov [esp+0BCh+var_94] 1 +
mov ecx ebp +
jmp loc_417B43  +
lea eax [esi+4] +
mov esi [esi] +
mov [esp+0BCh+var_90] eax +
mov eax [esi+10h] +
mov eax [eax+8Ch] +
test eax eax +
jz loc_417F08  +
mov eax [eax] +
mov [esp+0BCh+var_B8] offset aS +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_B4] eax +
call fprintf  +
mov eax [esi+0Ch] +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
call fputs  +
mov eax [esi+10h] +
mov eax [eax+8Ch] +
test eax eax +
jnz loc_417CC2  +
mov ecx [esi+8] +
mov eax [esi+0Ch] +
mov [esp+0BCh+var_B8] ecx +
mov [esp+0BCh+var_BC] eax +
call sub_4A8B70  +
test eax eax +
jz loc_417CC2  +
mov eax [esi+8] +
mov [esp+0BCh+var_B8] offset aS_0 +
mov [esp+0BCh+var_B4] eax +
jmp loc_41804A  +
mov eax ds:dword_51478C +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
call fputs  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov ecx ebp +
jmp loc_417B43  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
mov ecx [eax+0Ch] +
mov esi [ecx+20h] +
mov ecx [eax+8] +
mov eax [eax] +
mov eax [eax] +
mov eax [eax+4] +
mov [esp+0BCh+var_AC] esi +
mov [esp+0BCh+var_B0] ecx +
mov [esp+0BCh+var_B8] offset aS0xVTypeS +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_BC] edi +
call sub_417AA0  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi [esp+0BCh+var_90] +
mov ecx ebp +
jmp loc_417B43  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
test eax eax +
jz loc_41836F  +
mov ecx [eax+8] +
test ecx ecx +
jz loc_417CC2  +
mov eax [eax+4] +
mov [esp+0BCh+var_B4] ecx +
mov [esp+0BCh+var_B8] offset aSU +
mov [esp+0BCh+var_B0] eax +
jmp loc_417CBA  +
lea eax [esi+4] +
mov esi [esi] +
mov [esp+0BCh+var_90] eax +
test esi esi +
jz loc_418004  +
cmp byte ptr [esi] 0 +
jnz loc_4181E5  +
mov [esp+0BCh+var_B0] edi +
mov [esp+0BCh+var_B4] 9 +
mov [esp+0BCh+var_B8] 1 +
mov [esp+0BCh+var_BC] offset aNoSymbol +
call fwrite  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi [esp+0BCh+var_90] +
mov ecx ebp +
jmp loc_417B43  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
mov [esp+0BCh+var_B8] offset a08lx +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_BC] edi +
call fprintf  +
jmp loc_417CC2  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
lea esi [esp+0BCh+var_70] +
mov [esp+0BCh+var_B8] offset a08lx +
mov [esp+0BCh+var_B4] eax +
lea eax [esp+0BCh+var_70] +
mov [esp+0BCh+var_BC] eax +
call sprintf  +
movzx eax byte ptr [esp+0BCh+var_70] +
cmp al 30h +
jnz loc_41808F  +
add esi 1 +
movzx eax byte ptr [esi] +
cmp al 30h +
jz loc_418085  +
cmp al 1 +
sbb esi 0 +
mov [esp+0BCh+var_BC] esi +
call strlen  +
cmp eax 7 +
jg loc_4180C3  +
mov [esp+0BCh+var_8C] ebx +
mov ebx eax +
mov [esp+0BCh+var_B8] edi +
add ebx 1 +
mov [esp+0BCh+var_BC] 20h +
call putc  +
cmp ebx 8 +
jnz loc_4180A7  +
mov ebx [esp+0BCh+var_8C] +
mov [esp+0BCh+var_B4] esi +
mov [esp+0BCh+var_B8] offset a0xS +
jmp loc_41804A  +
mov ds:dword_514724 0 +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov ecx ebp +
jmp loc_417B43  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
mov [esp+0BCh+var_B8] offset aD_3 +
mov [esp+0BCh+var_B4] eax +
jmp loc_41804A  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
mov [esp+0BCh+var_B8] offset aP_0 +
mov [esp+0BCh+var_B4] eax +
jmp loc_41804A  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
call fputs  +
jmp loc_417CC2  +
lea eax [esi+4] +
mov [esp+0BCh+var_90] eax +
mov eax [esi] +
mov [esp+0BCh+var_B8] offset aU_2 +
mov [esp+0BCh+var_B4] eax +
jmp loc_41804A  +
mov eax [esp+0BCh+var_90] +
mov esi 1 +
mov [esp+0BCh+var_B8] offset aB +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_B4] eax +
call sub_417AA0  +
mov eax [esp+0BCh+var_88] +
mov [esp+0BCh+var_B8] offset aA0xV +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_B0] eax +
mov eax [esp+0BCh+var_8C] +
mov [esp+0BCh+var_B4] eax +
call sub_417AA0  +
test esi esi +
jz loc_4181D4  +
mov eax ds:dword_50F444 +
mov ds:dword_50F448 0 +
test eax eax +
jz loc_4181B9  +
mov [esp+0BCh+var_BC] eax +
call free  +
mov ds:dword_50F444 0 +
mov eax ds:dword_50F440 +
test eax eax +
jz loc_4181D4  +
mov [esp+0BCh+var_BC] eax +
call free  +
mov ds:dword_50F440 0 +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi [esp+0BCh+var_84] +
mov ecx ebp +
jmp loc_417B43  +
mov eax ds:dword_514794 +
test eax eax +
jz loc_418238  +
mov eax ds:dword_514850 +
mov [esp+0BCh+var_B4] 3 +
mov [esp+0BCh+var_B8] esi +
mov [esp+0BCh+var_BC] eax +
call sub_44C5F0  +
test eax eax +
jz loc_418238  +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
mov [esp+0BCh+var_8C] eax +
call fputs  +
mov ecx [esp+0BCh+var_8C] +
mov [esp+0BCh+var_BC] ecx +
call free  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi [esp+0BCh+var_90] +
mov ecx ebp +
jmp loc_417B43  +
mov [esp+0BCh+var_BC] esi +
mov [esp+0BCh+var_B8] edi +
call fputs  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi [esp+0BCh+var_90] +
mov ecx ebp +
jmp loc_417B43  +
mov eax [esi] +
lea ebx [esi+4] +
mov [esp+0BCh+var_B8] offset aLu_0 +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_BC] edi +
add ebp 3 +
mov esi ebx +
call fprintf  +
movzx eax byte ptr [ebp+0] +
mov ecx ebp +
jmp loc_417B43  +
mov eax [esp+0BCh+var_90] +
mov esi 1 +
mov [esp+0BCh+var_B8] offset aB +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_B4] eax +
call sub_417AA0  +
jmp loc_417E10  +
mov eax [esi+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 2 +
jnz loc_417C78  +
mov eax [esi+8Ch] +
test eax eax +
jz loc_417C78  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_417C78  +
mov eax [eax] +
test eax eax +
jz loc_417C78  +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_B8] offset aS_1 +
mov [esp+0BCh+var_BC] edi +
mov [esp+0BCh+var_90] edx +
call fprintf  +
mov edx [esp+0BCh+var_90] +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov ecx ebp +
mov esi edx +
jmp loc_417B43  +
mov eax [esi+8Ch] +
mov ecx [eax+7Ch] +
test ecx ecx +
jz loc_417C78  +
test byte ptr [esi+17h] 2 +
jnz loc_417C78  +
mov eax [eax+74h] +
jmp loc_4182CE  +
mov eax [esi] +
lea ebx [esi+4] +
mov [esp+0BCh+var_B8] offset aLd_2 +
mov [esp+0BCh+var_B4] eax +
jmp loc_418266  +
mov eax [esp+0BCh+var_90] +
mov [esp+0BCh+var_BC] offset aBFCouldNotRead +
mov [esp+0BCh+var_B8] eax +
call sub_418450  +
jmp loc_417D06  +
mov eax [eax] +
mov [esp+0BCh+var_B8] edi +
mov [esp+0BCh+var_BC] eax +
call fputs  +
movzx eax byte ptr [ebp+2] +
mov ebp ebx +
mov esi [esp+0BCh+var_90] +
mov ecx ebp +
jmp loc_417B43  +
call sub_405E40  +
mov [esp+0BCh+var_68] eax +
mov eax dword_4BE008 +
mov [esp+0BCh+var_6C] eax +
lea eax [esp+0BCh+var_70] +
jmp loc_417FCB  +
mov eax ds:dword_51478C +
mov [esp+0BCh+var_B8] offset aSGenerated +
mov [esp+0BCh+var_B4] eax +
jmp loc_41804A  +
mov [esp+0BCh+var_B4] eax +
mov [esp+0BCh+var_B8] offset aT_2 +
mov [esp+0BCh+var_BC] edi +
call sub_417AA0  +
jmp loc_417E90  +
mov [esp+0BCh+var_BC] 1 +
call sub_4A7250  +
mov esi [esp+0BCh+var_78] +
test esi esi +
jz loc_41840D  +
mov [esp+0BCh+var_B8] esi +
mov [esp+0BCh+var_BC] eax +
call sub_4A8B70  +
mov ecx [esp+0BCh+var_74] +
test eax eax +
jnz loc_417D9A  +
mov eax ds:dword_50F440 +
mov [esp+0BCh+var_B8] ecx +
xor esi esi +
mov [esp+0BCh+var_BC] eax +
mov [esp+0BCh+var_80] ecx +
call strcmp  +
mov ecx [esp+0BCh+var_80] +
test eax eax +
jz loc_417E10  +
jmp loc_417D9A  +
mov eax edx +
nop   +
jmp loc_4183EA  +
***
sub esp 1Ch +
lea eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_18] eax +
mov eax ds:_iob +
add eax 20h +
mov [esp+1Ch+var_1C] eax +
call sub_417AD0  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:_iob +
add eax 20h +
mov [esp+1Ch+var_1C] eax +
call fflush  +
lea eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_10] 1 +
mov [esp+1Ch+var_18] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+1Ch+var_1C] eax +
call sub_417AD0  +
mov eax ds:_iob +
add eax 40h +
mov [esp+1Ch+var_1C] eax +
call fflush  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] offset aFPInternalErro +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] eax +
call sub_418450  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov edx ds:dword_514770 +
mov eax [esp+1Ch+arg_0] +
test edx edx +
jz loc_418507  +
cmp byte ptr [eax] 25h +
jz loc_418510  +
mov [esp+1Ch+var_18] eax +
mov eax ds:dword_514770 +
lea ecx [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] ecx +
mov [esp+1Ch+var_1C] eax +
call sub_417AD0  +
add esp 1Ch +
retn   +
cmp byte ptr [eax+1] 21h +
jnz loc_4184E6  +
cmp byte ptr [eax+2] 0 +
jnz loc_4184E6  +
mov [esp+1Ch+var_1C] 10h +
call sub_4A05F0  +
mov dword ptr [eax] 0 +
mov edx [esp+1Ch+arg_4] +
mov [eax+4] edx +
mov edx [esp+1Ch+arg_8] +
mov [eax+8] edx +
mov edx [esp+1Ch+arg_C] +
mov [eax+0Ch] edx +
mov edx ds:dword_5146E8 +
mov [edx] eax +
mov ds:dword_5146E8 eax +
jmp loc_418507  +
***
sub esp 1Ch +
mov eax ds:dword_514770 +
mov [esp+1Ch+var_1C] 20h +
mov [esp+1Ch+var_18] eax +
call fputc  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_514770 +
mov [esp+1Ch+var_1C] 0Ah +
mov [esp+1Ch+var_18] eax +
call fputc  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_8] +
test eax eax +
jz loc_4185E3  +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] offset aPInternalError +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] eax +
call sub_418450  +
mov [esp+1Ch+var_1C] offset aPFPleaseReport +
call sub_418450  +
mov [esp+1Ch+var_1C] 1 +
call sub_4A7250  +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] offset aPInternalErr_0 +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] eax +
call sub_418450  +
jmp loc_4185CB  +
***
push ebx  +
sub esp 44h +
mov [esp+48h+var_40] 0 +
mov [esp+48h+var_44] offset aLdscripts +
mov [esp+48h+var_48] eax +
call sub_4A8A40  +
mov ebx eax +
lea eax [esp+48h+var_38] +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
call ds:_stati64  +
test eax eax +
jnz loc_41865B  +
movzx eax [esp+48h+var_32] +
and ax 0F000h +
cmp ax 4000h +
setz al  +
movzx eax al +
mov esi eax +
mov [esp+48h+var_48] ebx +
call free  +
add esp 44h +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
mov edi edx +
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_4] +
mov edi [esp+10h+arg_0] +
test esi esi +
jnz loc_41875B  +
mov eax ds:dword_51475C +
test eax eax +
jnz loc_41878F  +
mov [esp+10h+var_10] 0Ch +
call sub_4A05F0  +
mov ebx eax +
mov dword ptr [eax] 0 +
mov [eax+8] esi +
mov eax off_4BE124 +
mov off_4BE124 ebx +
mov [eax] ebx +
cmp byte ptr [edi] 3Dh +
jz loc_418796  +
mov [esp+10h+var_10] edi +
call sub_4A06C0  +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ds:dword_514804 +
add edi 1 +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_8] 0 +
mov [esp+10h+var_10] eax +
call sub_4A8A40  +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edi eax +
push esi  +
push ebx  +
mov ebx edx +
sub esp 3Ch +
test edx edx +
jz loc_4188B0  +
mov edx ds:dword_50F450 +
mov eax off_4BE124 +
test edx edx +
jz loc_4188C8  +
test ebx ebx +
mov [eax] edx +
mov ebx ds:dword_50F450 +
lea ecx [esp+44h+var_18] +
cmovz ebx ds:dword_514920 +
mov [esp+44h+var_28] ecx +
test ebx ebx +
jnz loc_41880E  +
jmp loc_418885  +
mov ebx [ebx] +
test ebx ebx +
jz loc_418880  +
mov eax [ebx+4] +
mov [esp+44h+var_38] 0 +
mov [esp+44h+var_3C] edi +
mov [esp+44h+var_40] (offset a__2+2) +
mov [esp+44h+var_44] eax +
call sub_4A8A40  +
mov edx [esp+44h+var_28] +
mov esi eax +
call sub_418670  +
mov [esp+44h+var_44] esi +
mov ebp eax +
call free  +
test ebp ebp +
jz loc_418808  +
mov edx off_4BE124 +
mov dword ptr [edx] 0 +
mov edx [esp+44h+var_18] +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_44] ebp +
mov [esp+44h+var_3C] edx +
call sub_405AB0  +
mov ds:dword_50F40C ebp +
mov dword_4BE008 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax off_4BE124 +
mov dword ptr [eax] 0 +
mov [esp+44h+var_44] 1 +
call sub_44BAF0  +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_44] offset aPFCannotOpenLi +
call sub_418450  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+44h+var_18] +
mov edx eax +
mov eax edi +
call sub_418670  +
test eax eax +
mov ebp eax +
jnz loc_418852  +
jmp loc_4187D3  +
mov eax ds:dword_51478C +
mov [esp+44h+var_3C] offset aHomeJenkinsMin +
mov [esp+44h+var_40] offset aHomeJenkinsM_0 +
mov [esp+44h+var_44] eax +
call sub_4A9CD0  +
test eax eax +
mov esi eax +
jz loc_418931  +
call sub_418610  +
mov edx esi +
test eax eax +
jz loc_418929  +
mov esi off_4BE124 +
mov [esp+44h+var_44] edx +
mov [esp+44h+var_40] 1 +
mov off_4BE124 offset dword_50F450 +
call sub_418740  +
mov edx ds:dword_50F450 +
mov eax esi +
mov off_4BE124 esi +
jmp loc_4187E6  +
mov [esp+44h+var_44] esi +
call free  +
mov eax ds:dword_51478C +
mov [esp+44h+var_3C] offset aHomeJenkinsMin +
mov [esp+44h+var_40] offset aHomeJenkinsM_1 +
mov [esp+44h+var_44] eax +
call sub_4A9CD0  +
test eax eax +
mov esi eax +
jz loc_418967  +
call sub_418610  +
mov edx esi +
test eax eax +
jnz loc_4188F6  +
mov [esp+44h+var_44] esi +
call free  +
mov eax ds:dword_51478C +
mov [esp+44h+var_3C] offset a__2 +
mov [esp+44h+var_40] offset a__2 +
mov [esp+44h+var_44] eax +
call sub_4A9CD0  +
test eax eax +
mov esi eax +
jz loc_4189A1  +
call sub_418610  +
mov edx esi +
test eax eax +
jnz loc_4188F6  +
mov [esp+44h+var_44] esi +
call free  +
mov eax off_4BE124 +
mov edx ds:dword_50F450 +
jmp loc_4187E6  +
***
jmp sub_4189C0  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_4] +
mov ebx [esp+2Ch+arg_0] +
mov eax [ebp+20h] +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] eax +
call sub_4585B0  +
mov ecx ds:dword_514798 +
test ecx ecx +
mov [ebp+10h] eax +
jz loc_418A06  +
test eax eax +
mov [esp+2Ch+var_28] ebx +
jz loc_418BC3  +
mov [esp+2Ch+var_2C] offset aAttemptToOpenS +
call sub_418420  +
mov eax [ebp+10h] +
test eax eax +
jz loc_418BF1  +
movzx edx byte ptr [eax+2Ch] +
or dword ptr [eax+28h] 100000h +
mov ecx edx +
or ecx 2 +
mov [eax+2Ch] cl +
cmp byte ptr [ebp+25h] 0 +
jns loc_418A2D  +
or edx 12h +
mov [eax+2Ch] dl +
movzx edx byte ptr [ebp+24h] +
and edx 24h +
cmp dl 20h +
jz loc_418A90  +
mov [esp+2Ch+var_28] 2 +
mov [esp+2Ch+var_2C] eax +
call sub_454030  +
test eax eax +
jnz loc_418BD7  +
mov esi [ebp+10h] +
test esi esi +
jz loc_418A90  +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] esi +
call sub_454030  +
test eax eax +
jz loc_418AD2  +
movzx eax byte ptr [ebp+24h] +
test al 20h +
jnz loc_418A81  +
mov edx [ebp+10h] +
test byte ptr [edx+29h] 8 +
jnz loc_418C90  +
test al 4 +
jnz loc_418C23  +
lea esi [esi+0] +
test byte ptr ds:word_514820+1 1 +
jz loc_418AA2  +
mov eax ds:dword_50F4A0 +
test eax eax +
jz loc_418AB0  +
mov eax 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+10h] +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] eax +
call sub_454030  +
test eax eax +
jz loc_418AA2  +
mov [esp+2Ch+var_2C] ebp +
call sub_41B650  +
nop   +
jmp loc_418AA2  +
cmp [ebp+10h] esi +
jnz loc_418A90  +
test byte ptr [ebp+24h] 4 +
jz loc_418A90  +
call sub_44B8A0  +
cmp eax 0Ch +
jnz loc_418A90  +
mov [esp+2Ch+var_2C] ebp +
call sub_417600  +
test eax eax +
jnz loc_418A90  +
mov eax ebx +
xor edx edx +
call sub_4187C0  +
mov ds:dword_50F44C 1 +
mov ds:dword_5146D0 0 +
call sub_405DF0  +
mov eax 16Dh +
mov [esp+2Ch+var_14] 0 +
mov [esp+2Ch+arg_0] ebx +
jmp loc_418B58  +
cmp eax 103h +
jge loc_418CE6  +
cmp eax 102h +
jnz loc_418B4B  +
mov eax ds:dword_5146BC +
test eax eax +
jz loc_418B4B  +
mov [esp+2Ch+var_2C] eax +
call free  +
call sub_4041F0  +
test eax eax +
jz loc_418CF8  +
cmp eax 104h +
jle loc_418B28  +
cmp eax 12Ch +
jnz loc_418CCC  +
call sub_4041F0  +
cmp eax 28h +
jnz loc_418B50  +
call sub_4041F0  +
cmp eax 103h +
jnz loc_418B50  +
mov esi ds:dword_5146B8 +
call sub_4041F0  +
cmp eax 2Ch +
jz loc_418D76  +
xor edi edi +
xor ebx ebx +
cmp eax 29h +
jz loc_418D32  +
mov [esp+2Ch+var_2C] esi +
call free  +
test ebx ebx +
jz loc_418BB5  +
mov [esp+2Ch+var_2C] ebx +
call free  +
test edi edi +
jz loc_418B4B  +
mov [esp+2Ch+var_2C] edi +
call free  +
jmp loc_418B4B  +
mov [esp+2Ch+var_2C] offset aAttemptToOpe_0 +
call sub_418420  +
mov eax [ebp+10h] +
jmp loc_418A06  +
mov eax [ebp+10h] +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_455160  +
mov esi eax +
jmp loc_418A54  +
call sub_44B8A0  +
mov edx eax +
xor eax eax +
cmp edx 2 +
jnz loc_418AA7  +
mov edx [ebp+20h] +
mov [esp+2Ch+var_2C] offset aFPInvalidBfdTa +
mov [esp+2Ch+var_14] eax +
mov [esp+2Ch+var_28] edx +
call sub_418450  +
mov eax [esp+2Ch+var_14] +
jmp loc_418AA7  +
mov eax ds:dword_5147C0 +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_24] eax +
mov eax ds:dword_514850 +
mov [esp+2Ch+var_28] eax +
call sub_453630  +
test eax eax +
jnz loc_418A90  +
mov eax [esi+4] +
cmp dword ptr [eax+4] 4 +
jz loc_418CA2  +
mov edx ds:dword_5147B8 +
test edx edx +
jz loc_418C70  +
mov eax [ebp+0Ch] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aPSkippingIncom +
mov [esp+2Ch+var_24] eax +
call sub_418450  +
nop   +
mov eax [ebp+10h] +
mov [esp+2Ch+var_2C] eax +
call sub_4586F0  +
xor eax eax +
mov dword ptr [ebp+10h] 0 +
jmp loc_418AA7  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] offset aFPAttemptedSta +
call sub_418450  +
jmp loc_418C70  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp dword ptr [eax+4] 4 +
jnz loc_418C4E  +
mov eax [ebp+10h] +
mov [esp+2Ch+var_28] 2 +
mov [esp+2Ch+var_2C] eax +
call sub_454030  +
test eax eax +
jz loc_418C4E  +
jmp loc_418A90  +
lea esi [esi+0] +
jl loc_418B4B  +
sub eax 173h +
cmp eax 1 +
nop   +
ja loc_418B4B  +
mov eax ds:dword_5146B8 +
mov [esp+2Ch+var_2C] eax +
call free  +
jmp loc_418B4B  +
mov ebx [esp+2Ch+arg_0] +
call sub_405E20  +
mov eax ds:dword_50F0AC +
mov ds:dword_50F44C 0 +
mov [esp+2Ch+var_2C] eax +
call fclose  +
cmp [esp+2Ch+var_14] 0 +
mov ds:dword_50F0AC 0 +
jz loc_418A90  +
jmp loc_418C4E  +
mov eax ds:dword_5147CC +
cmp eax 1 +
jz loc_418D9B  +
cmp eax 2 +
jnz loc_418D97  +
test edi edi +
mov edx edi +
cmovz edx esi +
mov [esp+2Ch+var_10] edx +
call sub_40D1F0  +
mov edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_28] eax +
call strcmp  +
test eax eax +
mov eax 1 +
cmovz eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_14] eax +
jmp loc_418BA1  +
call sub_4041F0  +
cmp eax 103h +
mov [esp+2Ch+var_10] eax +
jz loc_418DA4  +
mov [esp+2Ch+var_2C] esi +
call free  +
mov eax [esp+2Ch+var_10] +
jmp loc_418B50  +
mov edx esi +
jmp loc_418D48  +
test ebx ebx +
mov edx ebx +
cmovz edx esi +
jmp loc_418D48  +
mov ebx ds:dword_5146B8 +
call sub_4041F0  +
cmp eax 2Ch +
jz loc_418DD1  +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_10] eax +
call free  +
mov [esp+2Ch+var_2C] ebx +
call free  +
mov eax [esp+2Ch+var_10] +
jmp loc_418B50  +
call sub_4041F0  +
cmp eax 103h +
jnz loc_418DB4  +
mov edi ds:dword_5146B8 +
call sub_4041F0  +
jmp loc_418B98  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_0] +
movzx eax byte ptr [esi+24h] +
test al 1 +
jnz loc_418E66  +
test al 8 +
mov eax [esi+8] +
jz loc_418E2B  +
movzx edx byte ptr [eax] +
cmp dl 5Ch +
jz loc_418F70  +
cmp dl 2Fh +
jz loc_418F70  +
test dl dl +
jnz loc_418F60  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call sub_4189C0  +
test eax eax +
jnz loc_418F3E  +
mov edx [esi+8] +
movzx eax byte ptr [edx] +
cmp al 5Ch +
jz loc_418F50  +
cmp al 2Fh +
jz loc_418F50  +
test al al +
jz loc_418E66  +
cmp byte ptr [edx+1] 3Ah +
lea esi [esi+0] +
jz loc_418F50  +
mov ebx ds:dword_514920 +
test ebx ebx +
jnz loc_418EB9  +
jmp loc_418F50  +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_28] 4D3D22h +
mov [esp+2Ch+var_2C] eax +
call sub_4A8A40  +
mov [esp+2Ch+var_28] esi +
mov ebp eax +
mov [esp+2Ch+var_2C] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_418F3B  +
mov [esp+2Ch+var_2C] ebp +
call free  +
mov ebx [ebx] +
test ebx ebx +
jz loc_418F50  +
movzx eax byte ptr [esi+24h] +
test al 20h +
jz loc_418EE8  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_418EE8  +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] edi +
call sub_417560  +
test eax eax +
jnz loc_418F3E  +
movzx eax byte ptr [esi+24h] +
and eax 3 +
mov edx [esi+8] +
cmp al 1 +
mov eax [ebx+4] +
jnz loc_418E75  +
mov ecx [esp+2Ch+arg_C] +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_14] 0 +
mov [esp+2Ch+var_1C] edi +
mov [esp+2Ch+var_18] ecx +
mov ecx [esp+2Ch+arg_8] +
mov [esp+2Ch+var_28] 4D3D22h +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_24] ecx +
call sub_4A8A40  +
mov [esp+2Ch+var_28] esi +
mov ebp eax +
mov [esp+2Ch+var_2C] ebp +
call sub_4189C0  +
test eax eax +
jz loc_418EA7  +
mov [esi+8] ebp +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [eax+1] 3Ah +
jnz loc_418E2B  +
lea esi [esi+0] +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_514804 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_4A8A40  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
mov ebx eax +
call sub_4189C0  +
test eax eax +
jz loc_418FA5  +
mov [esi+8] ebx +
mov eax 1 +
jmp loc_418F52  +
mov [esp+2Ch+var_2C] ebx +
call free  +
jmp loc_418E3F  +
***
sub esp 14h +
mov eax [esp+arg_0] +
xor edx edx +
jmp sub_4187C0  +
***
mov eax [esp+arg_0] +
mov edx 1 +
jmp sub_4187C0  +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov [esp+14h+var_14] esi +
call sub_4A06C0  +
mov [esp+14h+var_14] 8 +
mov ebx eax +
call sub_4A05F0  +
mov off_4BE128 esi +
mov [eax] ebx +
mov dword ptr [eax+4] 0 +
movzx edx byte ptr [ebx] +
test dl dl +
jz loc_419169  +
movzx edx ds:byte_509B60[edx] +
add ebx 1 +
mov [ebx-1] dl +
movzx edx byte ptr [ebx] +
test dl dl +
jnz loc_419155  +
mov edx off_4BE120 +
mov [edx] eax +
add eax 4 +
mov off_4BE120 eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov [esp+14h+var_14] ebx +
call sub_453560  +
test eax eax +
jz loc_4191C0  +
mov edx [eax+0Ch] +
mov ds:dword_51491C edx +
mov edx [eax+10h] +
mov eax [eax+18h] +
mov ds:dword_514918 edx +
mov off_4BE128 eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
test esi esi +
jz loc_4191D0  +
mov ds:dword_51491C esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+arg_4] ebx +
mov [esp+14h+arg_0] offset aPFCannotRepres +
add esp 14h +
pop ebx  +
pop esi  +
jmp sub_418450  +
***
mov edx [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test edx edx +
jz loc_419232  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] edx +
mov [esp+18h+var_10] eax +
call sub_44E4A0  +
test eax eax +
jz loc_41922D  +
add ds:dword_50F47C 1 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] 14h +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_41922D  +
jmp loc_419200  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
mov esi [esp+24h] +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_419278  +
mov dword ptr [esp+4] 14Bh +
mov dword ptr [esp] offset a____Binutil_10 +
call sub_4184A0  +
mov eax [ebx+4] +
mov dword ptr [esp+8] 3 +
mov [esp+4] eax +
mov eax ds:dword_514850 +
mov [esp] eax +
call sub_44C5F0  +
test eax eax +
mov [ebx+0Ch] eax +
jz loc_4192B0  +
mov eax [esi] +
mov [eax] ebx +
mov eax 1 +
add dword ptr [esi] 4 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [ebx+4] +
mov [ebx+0Ch] eax +
jmp loc_41929B  +
***
push edi  +
mov edi edx +
push esi  +
mov esi ecx +
push ebx  +
sub esp 3Ch +
mov ebx [esp+48h+arg_0] +
mov [esp+48h+var_48] ebx +
call sub_4509A0  +
test eax eax +
jnz loc_4192ED  +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBFCouldNotRe_0 +
call sub_418450  +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_2C] ebp +
mov [esp+48h+var_1C] edi +
mov [esp+48h+var_28] esi +
mov [esp+48h+var_24] eax +
mov eax [ebx+78h] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] offset sub_419540 +
mov [esp+48h+var_20] eax +
lea eax [esp+48h+var_2C] +
mov [esp+48h+var_40] eax +
call sub_44DAD0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+10h] +
test eax eax +
mov [esp+2Ch+var_14] eax +
jz loc_419413  +
mov [esp+2Ch+var_2C] eax +
call sub_4509A0  +
test eax eax +
jz loc_41941B  +
mov eax [esp+2Ch+var_14] +
mov eax [eax+78h] +
mov ebp [eax] +
mov [esp+2Ch+var_10] eax +
test ebp ebp +
jz loc_419413  +
nop   +
mov eax [ebp+0Ch] +
test eax 7002h +
jnz loc_419400  +
test eax 101h +
jz loc_419400  +
mov edx [ebp+10h] +
mov edx [edx+3Ch] +
test edx edx +
jz loc_419400  +
test ah 1 +
mov esi [edx] +
mov [esp+2Ch+var_18] 0 +
jnz loc_4193A5  +
mov eax [ebp+4] +
mov [esp+2Ch+var_18] eax +
mov edi ds:dword_5146F4 +
test edi edi +
jz loc_419400  +
nop   +
mov ebx [edi+4] +
test ebx ebx +
jnz loc_4193C6  +
jmp loc_4193F8  +
mov ebx [ebx] +
test ebx ebx +
jz loc_4193F8  +
mov [esp+2Ch+var_28] esi +
mov eax [ebx+4] +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jnz loc_4193C0  +
mov eax [esp+2Ch+var_14] +
xor edx edx +
mov ecx [ebp+10h] +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
mov eax [esp+2Ch+var_18] +
call sub_4192C0  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4193C6  +
mov edi [edi] +
test edi edi +
jnz loc_4193B0  +
nop   +
add [esp+2Ch+var_10] 4 +
mov eax [esp+2Ch+var_10] +
mov ebp [eax] +
test ebp ebp +
jnz loc_419370  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] offset aBFCouldNotRe_0 +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
jmp loc_41935A  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+4] +
mov [esp+2Ch+var_1C] 1 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_51483C +
mov [esp+2Ch+var_2C] eax +
call sub_4500A0  +
test eax eax +
mov esi eax +
jz loc_41951C  +
movzx eax byte ptr [eax+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_419499  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+14h] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_41948C  +
mov edi ds:dword_5146F4 +
mov eax [eax] +
test edi edi +
mov [esp+2Ch+var_10] eax +
jz loc_41948C  +
mov ebp [edi+4] +
test ebp ebp +
jz loc_419509  +
lea esi [esi+0] +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] eax +
mov eax [ebp+4] +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jnz loc_419502  +
mov eax [esp+2Ch+arg_0] +
mov ebx [eax+10h] +
test ebx ebx +
jz loc_419502  +
mov edx [ebx+4] +
mov ecx [esi+14h] +
mov eax [esi+4] +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] edx +
mov edx 1 +
call sub_4192C0  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4194E2  +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_4194C0  +
mov edi [edi] +
test edi edi +
jnz loc_4194B3  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+4] +
mov [esp+2Ch+var_2C] offset aPSymbolTMissin +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
jmp loc_41948C  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_0] +
mov ebp [esp+4Ch+arg_4] +
mov edi [esp+4Ch+arg_8] +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+3Ch] +
mov ebx [eax] +
mov eax [edi+4] +
mov eax [eax+3Ch] +
mov eax [eax] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_28] eax +
call strcmp  +
test eax eax +
jz loc_4195C0  +
mov eax [edi+8] +
mov esi [eax+4] +
test esi esi +
jnz loc_41958A  +
jmp loc_4195C0  +
mov esi [esi] +
test esi esi +
jz loc_4195C0  +
mov eax [esi+4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call strcmp  +
test eax eax +
jnz loc_419584  +
mov eax [edi] +
mov [esp+4Ch+var_20] eax +
mov eax [edi+10h] +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_24] eax +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_4C] eax +
call sub_44BB40  +
test eax eax +
js loc_4195C8  +
jnz loc_4195E4  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_1C] eax +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_4C] offset aBFCouldNotRe_1 +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
mov eax [esp+4Ch+var_1C] +
mov [esp+4Ch+var_4C] eax +
call sub_4A05F0  +
mov edx eax +
mov [esp+4Ch+var_1C] eax +
mov eax [edi+0Ch] +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_4C] eax +
call sub_44BB80  +
test eax eax +
js loc_41972B  +
mov edx [esp+4Ch+var_1C] +
lea eax [edx+eax*4] +
cmp edx eax +
mov ecx eax +
jnb loc_419708  +
mov eax [esp+4Ch+var_1C] +
mov edx [eax] +
test edx edx +
jz loc_419708  +
mov [esp+4Ch+var_14] ebx +
mov esi eax +
mov ebx ecx +
mov [esp+4Ch+var_10] ebp +
mov ebp edx +
mov [esp+4Ch+var_18] edi +
mov edi [esp+4Ch+var_24] +
jmp loc_41967A  +
test dword ptr [ecx+0Ch] 101h +
jz loc_419665  +
mov eax [esp+4Ch+var_18] +
mov eax [eax+4] +
cmp [ecx+10h] eax +
jz loc_4196A1  +
add esi 4 +
cmp ebx esi +
jbe loc_419708  +
mov ebp [esi] +
test ebp ebp +
jz loc_419708  +
mov eax [ebp+0] +
test eax eax +
jz loc_419665  +
mov ecx [eax] +
test ecx ecx +
jz loc_419665  +
test edi edi +
jz loc_419650  +
mov eax [ecx+10h] +
cmp eax offset off_4BFAE8 +
jz loc_4196A1  +
test byte ptr [eax+15h] 10h +
jnz loc_4196A1  +
test byte ptr [ecx+0Ch] 82h +
jz loc_419665  +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_419720  +
mov [esp+4Ch+var_48] eax +
mov eax [ecx+4] +
mov [esp+4Ch+var_24] ecx +
mov [esp+4Ch+var_4C] eax +
call strcmp  +
mov ecx [esp+4Ch+var_24] +
test eax eax +
setz al  +
test al al +
jz loc_419665  +
mov eax [ecx+4] +
mov edx [ebp+4] +
mov ecx [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] offset aXCProhibitedCr +
mov [esp+4Ch+var_38] eax +
mov eax [esp+4Ch+var_14] +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_34] ecx +
mov [esp+4Ch+var_3C] eax +
mov eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_419665  +
mov eax [esp+4Ch+var_1C] +
mov [esp+4Ch+arg_0] eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp free  +
mov eax [ecx+0Ch] +
shr eax 8 +
and eax 1 +
jmp loc_4196C5  +
mov [esp+4Ch+var_18] eax +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_4C] offset aBFCouldNotRe_1 +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
mov eax [esp+4Ch+var_18] +
jmp loc_419615  +
***
mov ecx ds:dword_514794 +
mov edx [esp+8] +
mov eax [esp+4] +
test ecx ecx +
mov edx [edx] +
jnz loc_419780  +
mov edx [edx+4] +
mov [esp+8] edx +
mov eax [eax] +
mov eax [eax+4] +
mov [esp+4] eax +
jmp strcmp  +
***
mov edx [edx+0Ch] +
mov [esp+8] edx +
mov eax [eax] +
mov eax [eax+0Ch] +
mov [esp+4] eax +
jmp strcmp  +
***
push esi  +
sub esp 20h +
mov eax ds:dword_50F480 +
mov esi [esp+20h+arg_4] +
mov ebp [esp+20h+arg_8] +
test eax eax +
jz loc_419850  +
mov eax [esp+20h+arg_0] +
mov [esp+20h+var_14] 0 +
mov [esp+20h+var_18] 1 +
mov [esp+20h+var_20] offset dword_50F484 +
mov [esp+20h+var_1C] eax +
call sub_44E180  +
test eax eax +
mov edi eax +
jz loc_419898  +
mov eax [edi+10h] +
test eax eax +
jnz loc_4197F8  +
jmp loc_419816  +
mov eax [eax] +
test eax eax +
jz loc_419816  +
cmp [eax+4] esi +
jnz loc_4197F2  +
cmp ebp offset off_4BFAE8 +
jz loc_41987F  +
test byte ptr [ebp+15h] 10h +
jnz loc_419840  +
or byte ptr [eax+8] 1 +
add esp 20h +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+20h+var_1C] 0Ch +
mov [esp+20h+var_20] offset dword_50F484 +
call sub_44E3F0  +
test eax eax +
jz loc_4198A9  +
mov edx [edi+10h] +
mov [eax] edx +
mov [edi+10h] eax +
mov [eax+4] esi +
and byte ptr [eax+8] 0F8h +
jmp loc_4197FD  +
or byte ptr [eax+8] 2 +
add esp 20h +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+20h+var_18] 14h +
mov [esp+20h+var_1C] offset sub_4191F0 +
mov [esp+20h+var_20] offset dword_50F484 +
call sub_44DF20  +
test eax eax +
jz loc_41988A  +
mov ds:dword_50F480 1 +
jmp loc_4197BB  +
or byte ptr [eax+8] 4 +
add esp 20h +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+20h+var_20] offset aXPBfd_hash_tab +
call sub_418450  +
jmp loc_419870  +
mov [esp+20h+var_20] offset aXPCref_hash_lo +
call sub_418450  +
jmp loc_4197E9  +
mov [esp+20h+var_20] offset aXPCrefAllocFai +
mov [esp+20h+var_4] eax +
call sub_418450  +
mov eax [esp+20h+var_4] +
jmp loc_41982E  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edx ds:dword_50F480 +
mov eax [esp+2Ch+arg_4] +
test edx edx +
jz loc_419A49  +
test eax eax +
jnz loc_419A56  +
mov eax ds:dword_50F490 +
mov edx ds:dword_50F45C +
test eax eax +
mov [esp+2Ch+var_10] eax +
mov eax ds:dword_50F460 +
jz loc_419A8B  +
mov ebp ds:dword_50F484 +
mov ebx eax +
mov edi [esp+2Ch+var_10] +
mov esi ds:dword_50F498 +
lea edi [ebp+edi*4+0] +
mov [esp+2Ch+var_14] edi +
mov edi edx +
mov ecx [ebp+0] +
test ecx ecx +
jz loc_419A72  +
lea ebx [eax+esi] +
mov eax [ecx+10h] +
test eax eax +
jz loc_41994B  +
nop   +
mov eax [eax] +
add edx 0Ch +
test eax eax +
jnz loc_419940  +
mov edi edx +
mov ecx [ecx] +
lea eax [ebx+esi] +
test ecx ecx +
jz loc_419A70  +
mov ebx eax +
jmp loc_419937  +
mov eax ds:dword_50F46C +
test eax eax +
jz loc_419B88  +
mov esi ds:dword_50F474 +
mov ecx ds:dword_50F464 +
mov edx ds:dword_50F478 +
mov [esp+2Ch+var_28] eax +
mov ebx ds:dword_50F460 +
mov ds:dword_50F490 esi +
mov esi ds:dword_50F470 +
mov [esp+2Ch+var_24] ecx +
lea ebp [eax+ecx] +
mov [esp+2Ch+var_2C] edx +
mov ds:dword_50F484 edx +
add ebx ebp +
mov ds:dword_50F494 esi +
xor esi esi +
call memcpy  +
mov eax ds:dword_50F458 +
mov ds:dword_50F47C eax +
mov eax ds:dword_50F490 +
test eax eax +
jz loc_419A1C  +
mov eax ds:dword_50F484 +
mov edi [eax+esi*4] +
test edi edi +
jz loc_419A11  +
nop   +
mov eax ds:dword_50F498 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_24] eax +
call memcpy  +
mov eax [edi+10h] +
add ebp ds:dword_50F498 +
test eax eax +
jz loc_419A0B  +
mov edx [ebx] +
add ebx 0Ch +
mov [eax] edx +
mov ecx [ebx-8] +
mov [eax+4] ecx +
mov ecx [ebx-4] +
test edx edx +
mov [eax+8] ecx +
mov eax edx +
jnz loc_4199F2  +
mov edi [edi] +
test edi edi +
jnz loc_4199D0  +
add esi 1 +
cmp ds:dword_50F490 esi +
ja loc_4199C3  +
mov eax ds:dword_50F468 +
mov [esp+2Ch+var_28] eax +
mov eax ds:dword_50F48C +
mov [esp+2Ch+var_2C] eax +
call sub_4A9EB0  +
mov eax ds:dword_50F46C +
mov [esp+2Ch+var_2C] eax +
call free  +
mov ds:dword_50F46C 0 +
mov eax 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 1 +
jz loc_41995C  +
cmp eax 2 +
jz loc_419A32  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebx +
add ebp 4 +
cmp ebp [esp+2Ch+var_14] +
jnz loc_419929  +
mov ds:dword_50F460 ebx +
mov ds:dword_50F45C edi +
mov ecx [esp+2Ch+var_10] +
add eax edx +
shl ecx 2 +
mov ds:dword_50F464 ecx +
add ecx eax +
mov [esp+2Ch+var_2C] ecx +
call sub_4A05F0  +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] offset dword_50F484 +
mov ds:dword_50F46C eax +
call sub_44E3F0  +
test eax eax +
mov ds:dword_50F468 eax +
jz loc_419A64  +
mov ebx ds:dword_50F464 +
mov ebp ds:dword_50F46C +
mov eax ds:dword_50F484 +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_2C] ebp +
add ebp ebx +
mov [esp+2Ch+var_28] eax +
call memcpy  +
mov ecx ds:dword_50F494 +
mov edx ds:dword_50F490 +
mov ebx ds:dword_50F460 +
mov eax ds:dword_50F484 +
mov ds:dword_50F470 ecx +
mov ecx ds:dword_50F47C +
mov ds:dword_50F474 edx +
add ebx ebp +
test edx edx +
mov ds:dword_50F478 eax +
mov ds:dword_50F458 ecx +
jz loc_419A49  +
xor esi esi +
mov edi [eax+esi*4] +
test edi edi +
jz loc_419B72  +
mov eax ds:dword_50F498 +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_24] eax +
call memcpy  +
mov eax [edi+10h] +
add ebp ds:dword_50F498 +
test eax eax +
jz loc_419B6C  +
mov edx [eax] +
add ebx 0Ch +
mov [ebx-0Ch] edx +
mov edx [eax+4] +
mov [ebx-8] edx +
mov edx [eax+8] +
mov [ebx-4] edx +
mov eax [eax] +
test eax eax +
jnz loc_419B52  +
mov edi [edi] +
test edi edi +
jnz loc_419B30  +
add esi 1 +
cmp ds:dword_50F490 esi +
jbe loc_419A49  +
mov eax ds:dword_50F484 +
jmp loc_419B29  +
mov [esp+2Ch+var_2C] offset dword_50F484 +
call sub_44DF50  +
mov eax 1 +
mov ds:dword_50F480 0 +
jmp loc_419A4E  +
***
push esi  +
mov esi 2Ch +
push ebx  +
sub esp 3Ch +
mov ebx [esp+40h+arg_0] +
mov [esp+40h+var_38] 18h +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] offset aCrossReference +
mov [esp+40h+var_34] ebx +
call fwrite  +
mov [esp+40h+var_34] ebx +
mov [esp+40h+var_38] 6 +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] offset aSymbol +
call fwrite  +
mov [esp+40h+var_3C] ebx +
mov [esp+40h+var_40] 20h +
call putc  +
sub esi 1 +
jnz loc_419C00  +
mov [esp+40h+var_34] ebx +
mov [esp+40h+var_38] 5 +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] offset aFile +
call fwrite  +
mov ecx ds:dword_50F480 +
test ecx ecx +
jz loc_419ED4  +
mov eax ds:dword_50F47C +
shl eax 2 +
mov [esp+40h+var_40] eax +
call sub_4A05F0  +
mov [esp+40h+var_3C] offset loc_419250 +
mov [esp+40h+var_40] offset dword_50F484 +
mov edi eax +
mov [esp+40h+var_28] eax +
mov [esp+40h+var_14] eax +
lea eax [esp+40h+var_14] +
mov [esp+40h+var_38] eax +
call sub_44E4D0  +
mov eax [esp+40h+var_14] +
sub eax edi +
sar eax 2 +
cmp eax ds:dword_50F47C +
jz loc_419CA3  +
mov [esp+40h+var_3C] 188h +
mov [esp+40h+var_40] offset a____Binutil_10 +
call sub_4184A0  +
mov eax ds:dword_50F47C +
mov edi [esp+40h+var_28] +
mov [esp+40h+var_3C] eax +
mov [esp+40h+var_34] offset loc_419750 +
mov [esp+40h+var_38] 4 +
mov [esp+40h+var_40] edi +
call qsort  +
mov eax ds:dword_50F47C +
lea eax [edi+eax*4] +
cmp edi eax +
mov [esp+40h+var_24] eax +
jnb loc_419E62  +
mov eax [esp+40h+var_28] +
mov edi [eax] +
mov eax [edi+4] +
mov [esp+40h+var_30] 1 +
mov [esp+40h+var_34] 0 +
mov [esp+40h+var_38] 0 +
mov [esp+40h+var_3C] eax +
mov eax ds:dword_51483C +
mov [esp+40h+var_40] eax +
call sub_4500A0  +
test eax eax +
jz loc_419EFC  +
cmp byte ptr [eax+0Ch] 3 +
jz loc_419E94  +
mov eax ds:dword_514794 +
test eax eax +
jz loc_419E6A  +
mov eax [edi+0Ch] +
mov [esp+40h+var_3C] offset aS_22 +
mov [esp+40h+var_40] ebx +
mov [esp+40h+var_38] eax +
call fprintf  +
mov eax [edi+0Ch] +
mov [esp+40h+var_40] eax +
call strlen  +
lea ebp [eax+1] +
mov esi [edi+10h] +
test esi esi +
jz loc_419E37  +
test byte ptr [esi+8] 1 +
jz loc_419D94  +
cmp ebp 31h +
jg loc_419D7B  +
mov [esp+40h+var_3C] ebx +
add ebp 1 +
mov [esp+40h+var_40] 20h +
call putc  +
cmp ebp 32h +
jnz loc_419D63  +
mov eax [esi+4] +
xor ebp ebp +
mov [esp+40h+var_3C] offset aB_3 +
mov [esp+40h+var_40] ebx +
mov [esp+40h+var_38] eax +
call sub_417AA0  +
mov esi [esi] +
test esi esi +
jnz loc_419D58  +
mov esi [edi+10h] +
test esi esi +
jz loc_419E37  +
test byte ptr [esi+8] 2 +
jz loc_419DE1  +
cmp ebp 31h +
jg loc_419DC8  +
mov [esp+40h+var_3C] ebx +
add ebp 1 +
mov [esp+40h+var_40] 20h +
call putc  +
cmp ebp 32h +
jnz loc_419DB0  +
mov eax [esi+4] +
xor ebp ebp +
mov [esp+40h+var_3C] offset aB_3 +
mov [esp+40h+var_40] ebx +
mov [esp+40h+var_38] eax +
call sub_417AA0  +
mov esi [esi] +
test esi esi +
jnz loc_419DA5  +
mov esi [edi+10h] +
test esi esi +
jz loc_419E37  +
nop   +
test byte ptr [esi+8] 3 +
jnz loc_419E31  +
cmp ebp 31h +
jg loc_419E18  +
nop   +
lea esi [esi+0] +
mov [esp+40h+var_3C] ebx +
add ebp 1 +
mov [esp+40h+var_40] 20h +
call putc  +
cmp ebp 32h +
jnz loc_419E00  +
mov eax [esi+4] +
xor ebp ebp +
mov [esp+40h+var_3C] offset aB_3 +
mov [esp+40h+var_40] ebx +
mov [esp+40h+var_38] eax +
call sub_417AA0  +
mov esi [esi] +
test esi esi +
jnz loc_419DF0  +
test ebp ebp +
jz loc_419E4F  +
mov [esp+40h+var_3C] 1E8h +
mov [esp+40h+var_40] offset a____Binutil_10 +
call sub_4184A0  +
add [esp+40h+var_28] 4 +
mov eax [esp+40h+var_28] +
cmp [esp+40h+var_24] eax +
ja loc_419CD7  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+4] +
mov [esp+40h+var_3C] offset aS_22 +
mov [esp+40h+var_40] ebx +
mov [esp+40h+var_38] eax +
call fprintf  +
mov eax [edi+4] +
mov [esp+40h+var_40] eax +
call strlen  +
lea ebp [eax+1] +
jmp loc_419D4D  +
mov eax [eax+14h] +
mov edx [eax+3Ch] +
test edx edx +
jz loc_419E4F  +
mov eax [eax+94h] +
test eax eax +
jz loc_419D1B  +
test byte ptr [eax+29h] 8 +
jz loc_419D1B  +
mov eax [edi+10h] +
test eax eax +
jnz loc_419EC6  +
jmp loc_419E4F  +
mov eax [eax] +
test eax eax +
jz loc_419E4F  +
mov edx [eax+4] +
test byte ptr [edx+29h] 8 +
jnz loc_419EC0  +
jmp loc_419D1B  +
mov [esp+40h+var_34] ebx +
mov [esp+40h+var_38] 0Bh +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] offset aNoSymbols +
call fwrite  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+4] +
mov [esp+40h+var_40] offset aPSymbolTMissin +
mov [esp+40h+var_3C] eax +
call sub_418450  +
jmp loc_419D1B  +
***
mov eax ds:dword_50F480 +
test eax eax +
jnz loc_419F30  +
retn   +
sub esp 1Ch +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] offset sub_419440 +
mov [esp+1Ch+var_1C] offset dword_50F484 +
call sub_44E4D0  +
mov [esp+1Ch+var_1C] offset sub_419330 +
call sub_40D9E0  +
add esp 1Ch +
retn   +
***
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 10h +
mov [esp+14h+var_14] edx +
call strlen  +
mov [esp+14h+var_14] ebx +
lea edi [eax+1] +
mov [esp+14h+var_10] edi +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_419FA0  +
mov [esp+14h+var_C] edi +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call memcpy  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
call sub_44B8A0  +
mov [esp+14h+var_14] offset aPFPlugin_strdu +
mov [esp+14h+var_10] eax +
call sub_418450  +
jmp loc_419F87  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_10] +
mov ebx [esp+2Ch+arg_4] +
mov ecx [esp+2Ch+arg_0] +
mov edx [esp+2Ch+arg_8] +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_14] +
test ebx ebx +
mov esi [esp+2Ch+arg_C] +
mov edi [esp+2Ch+arg_18] +
mov [esp+2Ch+var_18] eax +
jz loc_41A0BC  +
cmp byte ptr [ebx+0Ch] 7 +
mov ebp ebx +
jz loc_41A120  +
test esi esi +
jz loc_41A009  +
test byte ptr [esi+2Ah] 20h +
jnz loc_41A075  +
cmp [esp+2Ch+var_1C] offset off_4BFC38 +
jz loc_41A0F1  +
test edi 2000h +
jnz loc_41A0F1  +
test edi 1800h +
jnz loc_41A075  +
cmp [esp+2Ch+var_1C] offset off_4BFAE8 +
jz loc_41A14A  +
mov eax edx +
movzx edx byte ptr [ebp+0Ch] +
mov byte ptr [esp+2Ch+var_14] dl +
sub edx 3 +
cmp dl 1 +
mov edx eax +
jbe loc_41A160  +
cmp byte ptr [esp+2Ch+var_14] 5 +
jnz loc_41A075  +
mov eax [ebp+14h] +
mov eax [eax+4] +
mov eax [eax+94h] +
test eax eax +
jz loc_41A075  +
test byte ptr [eax+2Ah] 20h +
jz loc_41A075  +
mov byte ptr [ebp+0Ch] 2 +
mov [ebp+14h] eax +
mov eax ds:dword_50F500 +
test eax eax +
jnz loc_41A0BC  +
mov eax [ecx+24h] +
mov [esp+2Ch+var_10] edx +
mov [esp+2Ch+var_14] ecx +
test eax eax +
jz loc_41A110  +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov ecx [ebx+4] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] ecx +
call sub_44E180  +
mov ecx [esp+2Ch+var_14] +
mov edx [esp+2Ch+var_10] +
test eax eax +
jz loc_41A110  +
mov eax ds:dword_50F4FC +
mov eax [eax+28h] +
mov [esp+2Ch+arg_18] edi +
mov edi [esp+2Ch+var_18] +
mov [esp+2Ch+arg_C] esi +
mov [esp+2Ch+arg_4] ebx +
mov [esp+2Ch+arg_8] edx +
mov [esp+2Ch+arg_14] edi +
mov edi [esp+2Ch+var_1C] +
mov [esp+2Ch+arg_0] ecx +
mov [esp+2Ch+arg_10] edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_41A130  +
cmp byte ptr [edx+0Ch] 0 +
jnz loc_41A075  +
or byte ptr [edx+0Dh] 1 +
jmp loc_41A075  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+14h] +
mov ebp eax +
jmp loc_419FFF  +
or byte ptr [ebp+0Dh] 1 +
or byte ptr [edx+0Dh] 1 +
mov eax ds:dword_50F500 +
test eax eax +
jnz loc_41A0BC  +
jmp loc_41A07E  +
movzx eax byte ptr [ebp+0Ch] +
sub eax 1 +
cmp al 1 +
jbe loc_41A176  +
or byte ptr [ebp+0Dh] 1 +
jmp loc_41A075  +
mov eax [ebp+14h] +
mov eax [eax+94h] +
test eax eax +
jnz loc_41A068  +
jmp loc_41A075  +
mov eax [ebp+14h] +
test eax eax +
jz loc_41A183  +
test byte ptr [eax+2Ah] 20h +
jz loc_41A155  +
mov [ebp+14h] esi +
jmp loc_41A155  +
***
mov eax ds:dword_50F508 +
mov ebx [esp+18h+arg_0] +
test eax eax +
jz loc_41A1C0  +
mov eax [ebx+1Ch] +
cmp eax 0FFFFFFFFh +
jz loc_41A1B8  +
mov [esp+18h+var_18] eax +
call _close  +
mov dword ptr [ebx+1Ch] 0FFFFFFFFh +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov [esp+18h+var_14] 257h +
mov [esp+18h+var_18] offset a____BinutilsLd +
call sub_4184A0  +
jmp loc_41A1A1  +
***
push esi  +
push ebx  +
sub esp 14h +
mov eax ds:dword_50F508 +
mov esi [esp+20h] +
mov ebx [esp+24h] +
test eax eax +
jz loc_41A220  +
mov eax [esi+18h] +
mov edx [esi+2Ch] +
mov [ebx] eax +
mov eax [esi+28h] +
mov [ebx+0Ch] edx +
mov edx [esi+34h] +
mov [ebx+8] eax +
mov eax [esi+30h] +
mov [ebx+14h] edx +
mov [ebx+18h] esi +
mov [ebx+10h] eax +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov dword ptr [esp+4] 1F6h +
mov dword ptr [esp] offset a____BinutilsLd +
call sub_4184A0  +
jmp loc_41A1F6  +
***
sub esp 1Ch +
mov eax ds:dword_50F508 +
test eax eax +
jz loc_41A260  +
mov edx [esp+1Ch+arg_0] +
mov [eax+1Ch] edx +
xor eax eax +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_18] 1D0h +
mov [esp+1Ch+var_1C] offset a____BinutilsLd +
call sub_4184A0  +
mov eax ds:dword_50F508 +
mov edx [esp+1Ch+arg_0] +
mov [eax+1Ch] edx +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_50F508 +
test eax eax +
jz loc_41A2B0  +
mov edx [esp+1Ch+arg_0] +
mov [eax+18h] edx +
xor eax eax +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_18] 1C7h +
mov [esp+1Ch+var_1C] offset a____BinutilsLd +
call sub_4184A0  +
mov eax ds:dword_50F508 +
mov edx [esp+1Ch+arg_0] +
mov [eax+18h] edx +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_50F508 +
test eax eax +
jz loc_41A300  +
mov edx [esp+1Ch+arg_0] +
mov [eax+14h] edx +
xor eax eax +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_18] 1BEh +
mov [esp+1Ch+var_1C] offset a____BinutilsLd +
call sub_4184A0  +
mov eax ds:dword_50F508 +
mov edx [esp+1Ch+arg_0] +
mov [eax+14h] edx +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax ds:dword_50F508 +
test eax eax +
jz loc_41A360  +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_4A06C0  +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] eax +
call sub_418740  +
xor eax eax +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_18] 328h +
mov [esp+1Ch+var_1C] offset a____BinutilsLd +
call sub_4184A0  +
jmp loc_41A33C  +
***
sub esp 1Ch +
mov eax ds:dword_50F508 +
test eax eax +
jz loc_41A3C5  +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_4A06C0  +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] eax +
call sub_40B090  +
mov edx eax +
mov eax 3 +
test edx edx +
jz loc_41A3C1  +
or byte ptr [edx+25h] 80h +
xor al al +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_18] 31Ah +
mov [esp+1Ch+var_1C] offset a____BinutilsLd +
call sub_4184A0  +
jmp loc_41A38C  +
***
sub esp 1Ch +
mov eax ds:dword_50F508 +
test eax eax +
jz loc_41A425  +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_4A06C0  +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] 5 +
mov [esp+1Ch+var_1C] eax +
call sub_40B090  +
mov edx eax +
mov eax 3 +
test edx edx +
jz loc_41A421  +
or byte ptr [edx+25h] 80h +
xor al al +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_18] 30Bh +
mov [esp+1Ch+var_1C] offset a____BinutilsLd +
call sub_4184A0  +
jmp loc_41A3EC  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi ds:dword_50F508 +
mov ebx [esp+2Ch+arg_0] +
test esi esi +
mov edi [ebx+30h] +
mov ebp [ebx+28h] +
mov edx [ebx+2Ch] +
mov ecx [ebx+34h] +
mov [esp+2Ch+var_14] edi +
mov eax edi +
jz loc_41A570  +
mov esi edi +
xor esi eax +
or esi ecx +
jz loc_41A492  +
mov ecx [ebx+18h] +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_2C] offset aPFUnsupportedI +
mov [esp+2Ch+var_10] edx +
mov [esp+2Ch+var_28] ecx +
call sub_418450  +
mov edx [esp+2Ch+var_10] +
mov eax [ebx+8] +
test eax eax +
jz loc_41A4A2  +
cmp [ebx+0Ch] edi +
jz loc_41A550  +
mov eax [ebx+1Ch] +
mov [ebx+0Ch] edi +
mov [ebx+10h] ebp +
mov [ebx+14h] edx +
mov dword ptr [ebx+20h] 0 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_2C] eax +
call j__lseeki64  +
test edx edx +
jns loc_41A4E0  +
mov eax 3 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx] +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_41A4D1  +
mov ebp eax +
mov esi [esp+2Ch+var_14] +
jmp loc_41A508  +
sub esi eax +
add ebp eax +
test esi esi +
jz loc_41A536  +
mov eax [ebx+1Ch] +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] eax +
call _read  +
cmp eax 0 +
jz loc_41A536  +
jg loc_41A500  +
call ds:__imp__errno  +
cmp dword ptr [eax] 4 +
nop   +
lea esi [esi+0] +
jnz loc_41A4D1  +
test esi esi +
jnz loc_41A508  +
mov eax [esp+2Ch+arg_4] +
mov [ebx+8] edi +
mov [eax] edi +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [ebx+14h] +
mov esi [ebx+10h] +
xor ecx edx +
xor esi ebp +
or esi ecx +
jnz loc_41A4A2  +
mov ecx [esp+2Ch+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_41A4D6  +
mov [esp+2Ch+var_28] 20Ch +
mov [esp+2Ch+var_2C] offset a____BinutilsLd +
mov [esp+2Ch+var_10] edx +
call sub_4184A0  +
mov eax [ebx+30h] +
mov ecx [ebx+34h] +
mov edx [esp+2Ch+var_10] +
jmp loc_41A46B  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ecx ds:dword_50F508 +
mov eax [esp+2Ch+arg_0] +
test ecx ecx +
mov edi [eax] +
jz loc_41A882  +
mov eax [esp+2Ch+arg_4] +
shl eax 2 +
mov [esp+2Ch+var_2C] eax +
call sub_4A05F0  +
mov edx [esp+2Ch+arg_4] +
test edx edx +
mov [esp+2Ch+var_1C] eax +
jle loc_41A6C5  +
mov esi [esp+2Ch+arg_8] +
xor ebp ebp +
mov eax [edi+4] +
mov eax [eax+10Ch] +
mov [esp+2Ch+var_2C] edi +
call eax  +
mov ebx eax +
mov eax [esp+2Ch+var_1C] +
mov [eax+ebp*4] ebx +
mov eax [esi+4] +
mov [ebx] edi +
test eax eax +
jz loc_41A7D2  +
mov edx [esi] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] offset a@ +
mov [esp+2Ch+var_2C] edx +
call sub_4A8A40  +
cmp dword ptr [esi+8] 4 +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
ja loc_41A7E8  +
mov eax [esi+8] +
jmp ds:off_4D4130[eax*4]  +
mov eax [esi+18h] +
mov edx 82h +
test eax eax +
jz loc_41A6F7  +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] offset a_gnu_linkonce_ +
mov [esp+2Ch+var_14] edx +
call sub_4A8A40  +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_18] eax +
call sub_44D4B0  +
mov edx [esp+2Ch+var_14] +
mov ecx [esp+2Ch+var_18] +
mov [esp+2Ch+var_18] edx +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_41A861  +
mov [esp+2Ch+var_2C] ecx +
call free  +
mov ecx [edi+4] +
mov edx [esp+2Ch+var_18] +
mov eax [esp+2Ch+var_10] +
mov ecx [ecx+4] +
cmp ecx 5 +
mov [ebx+0Ch] edx +
mov [ebx+10h] eax +
jz loc_41A720  +
add ebp 1 +
add esi 20h +
cmp ebp [esp+2Ch+arg_4] +
jnz loc_41A5E0  +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+var_1C] +
mov [esp+2Ch+var_28] eax +
call sub_45A890  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+18h] +
mov edx 2 +
test eax eax +
jnz loc_41A650  +
mov [esp+2Ch+var_28] offset a_text +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_18] edx +
call sub_44D4B0  +
mov ecx [edi+4] +
mov edx [esp+2Ch+var_18] +
mov ecx [ecx+4] +
mov [ebx+0Ch] edx +
mov [ebx+10h] eax +
cmp ecx 5 +
jnz loc_41A6B5  +
mov eax [ebx] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jz loc_41A816  +
mov eax [ebx+4] +
xor ebx ebx +
mov [esp+2Ch+var_2C] offset aPFSNonElfSymbo +
mov [esp+2Ch+var_28] eax +
call sub_418450  +
mov eax [esi+0Ch] +
cmp eax 1 +
jz loc_41A830  +
jle loc_41A7F5  +
cmp eax 2 +
mov edx 1 +
jz loc_41A76E  +
cmp eax 3 +
mov edx 2 +
jnz loc_41A7FF  +
movzx eax byte ptr [ebx+25h] +
and eax 0FFFFFFFCh +
or eax edx +
mov [ebx+25h] al +
jmp loc_41A6B5  +
mov eax [esi+10h] +
mov [ebx+8] eax +
mov eax [edi+4] +
cmp dword ptr [eax+4] 5 +
jz loc_41A840  +
mov dword ptr [ebx+0Ch] 2 +
mov dword ptr [ebx+10h] offset off_4BFA40 +
jmp loc_41A6B5  +
mov eax [edi+4] +
mov edx 80h +
mov ecx [eax+4] +
mov eax offset off_4BFAE8 +
jmp loc_41A6AA  +
mov eax [edi+4] +
xor edx edx +
mov ecx [eax+4] +
mov eax offset off_4BFAE8 +
jmp loc_41A6AA  +
mov eax [esi] +
cmp dword ptr [esi+8] 4 +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
jbe loc_41A636  +
add esp 2Ch +
mov eax 3 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edx edx +
test eax eax +
jz loc_41A76E  +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] offset aPFUnknownElfSy +
call sub_418450  +
xor edx edx +
jmp loc_41A76E  +
mov eax [eax+0A0h] +
test eax eax +
jz loc_41A72F  +
mov eax [esi+0Ch] +
cmp eax 1 +
jnz loc_41A750  +
mov edx 3 +
jmp loc_41A76E  +
mov dword ptr [ebx+28h] 0FFFFFFF2h +
mov dword ptr [ebx+18h] 1 +
mov dword ptr [ebx+0Ch] 2 +
mov dword ptr [ebx+10h] offset off_4BFA40 +
jmp loc_41A720  +
mov [esp+2Ch+var_24] 22811Bh +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] edi +
call sub_44D890  +
test eax eax +
jnz loc_41A70B  +
jmp loc_41A7E8  +
mov [esp+2Ch+var_28] 1DEh +
mov [esp+2Ch+var_2C] offset a____BinutilsLd +
call sub_4184A0  +
jmp loc_41A5BB  +
***
push ebx  +
sub esp 24h +
mov eax [ebp+arg_0] +
mov ebx [ebp+arg_4] +
test eax eax +
jz loc_41AA03  +
cmp eax 1 +
jz loc_41A980  +
cmp eax 3 +
jz loc_41AA40  +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_1C] offset asc_4D414E +
mov [esp+28h+var_20] ebx +
mov [esp+28h+var_24] offset aError +
mov [esp+28h+var_28] offset aPX +
call sub_4A8960  +
add eax 1Fh +
and eax 0FFFFFFF0h +
call sub_4BB070  +
sub esp eax +
lea eax [esp+28h+var_5] +
and eax 0FFFFFFF0h +
mov ds:dword_51492C eax +
mov eax offset aPX +
mov [esp+28h+var_20] ebx +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_1C] offset asc_4D414E +
mov [esp+28h+var_24] offset aError +
mov [esp+28h+var_28] eax +
call sub_4A89E0  +
mov ebx eax +
mov eax ds:_iob +
add eax 20h +
mov [esp+28h+var_28] eax +
call fflush  +
lea eax [ebp+arg_8] +
mov [esp+28h+var_20] eax +
mov eax ds:_iob +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_1C] 1 +
add eax 40h +
mov [esp+28h+var_28] eax +
call sub_417AD0  +
mov eax ds:_iob +
add eax 40h +
mov [esp+28h+var_28] eax +
call fflush  +
xor eax eax +
mov ebx [ebp+var_5+1] +
leave   +
retn   +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] offset asc_4D414E +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] offset aPWarning +
call sub_4A8960  +
add eax 1Fh +
and eax 0FFFFFFF0h +
call sub_4BB070  +
sub esp eax +
lea eax [esp+28h+var_5] +
mov [esp+28h+var_24] ebx +
and eax 0FFFFFFF0h +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] offset asc_4D414E +
mov [esp+28h+var_28] offset aPWarning +
mov ds:dword_51492C eax +
call sub_4A89E0  +
lea edx [ebp+arg_8] +
mov [esp+28h+var_1C] 1 +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] eax +
mov eax ds:_iob +
add eax 20h +
mov [esp+28h+var_28] eax +
call sub_417AD0  +
xor eax eax +
mov ebx [ebp+var_5+1] +
leave   +
retn   +
lea eax [ebp+arg_8] +
mov [esp+28h+var_20] eax +
mov eax ds:_iob +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_1C] 0 +
add eax 20h +
mov [esp+28h+var_28] eax +
call sub_417AD0  +
mov [esp+28h+var_28] 0Ah +
call putchar  +
xor eax eax +
mov ebx [ebp+var_5+1] +
leave   +
retn   +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_1C] offset asc_4D414E +
mov [esp+28h+var_20] ebx +
mov [esp+28h+var_24] offset aError +
mov [esp+28h+var_28] offset aPF +
call sub_4A8960  +
add eax 1Fh +
and eax 0FFFFFFF0h +
call sub_4BB070  +
sub esp eax +
lea eax [esp+28h+var_5] +
and eax 0FFFFFFF0h +
mov ds:dword_51492C eax +
mov eax offset aPF +
jmp loc_41A90D  +
***
push ebp  +
mov ebp edx +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx ds:dword_50F508 +
mov eax [eax] +
test ebx ebx +
mov [esp+18h] eax +
jz loc_41AD5A  +
xor edi edi +
test ebp ebp +
mov ebx ecx +
jg loc_41AB27  +
jmp loc_41AC1B  +
mov eax [eax+94h] +
cmp eax ds:dword_514850 +
jz loc_41ACA0  +
cmp [esp+18h] eax +
jz loc_41ACB0  +
test eax eax +
jz loc_41ACA0  +
mov edx [eax+28h] +
mov eax 6 +
shr edx 5 +
and edx 3FFFFh +
test edx 10000h +
jnz loc_41AB08  +
and edx 40h +
cmp edx 1 +
sbb eax eax +
add eax 8 +
mov edx ds:dword_514924 +
mov [ebx+1Ch] eax +
test edx edx +
jnz loc_41ABE0  +
add edi 1 +
add ebx 20h +
cmp edi ebp +
jz loc_41AC1B  +
cmp dword ptr [ebx+8] 2 +
mov eax [ebx] +
jz loc_41AC25  +
mov [esp+4] eax +
mov eax ds:dword_51483C +
mov dword ptr [esp+10h] 1 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call sub_4500A0  +
mov esi eax +
test esi esi +
jz loc_41AC60  +
movzx edx byte ptr [esi+0Ch] +
mov eax 1 +
lea ecx [edx-1] +
cmp cl 1 +
jbe loc_41AB08  +
lea eax [edx-3] +
cmp al 2 +
ja loc_41AC67  +
cmp dl 5 +
mov eax [esi+14h] +
jz loc_41AC93  +
mov ecx [ebx+8] +
lea edx [ecx-2] +
cmp edx 2 +
jbe loc_41AAC0  +
mov edx [eax+94h] +
cmp edx ds:dword_514850 +
jz loc_41ABC8  +
cmp [esp+18h] edx +
jz loc_41ACB0  +
test edx edx +
jz loc_41ABC8  +
test byte ptr [edx+2Ah] 20h +
mov eax 5 +
jnz loc_41AB08  +
mov edx ds:dword_514924 +
mov eax 4 +
mov [ebx+1Ch] eax +
test edx edx +
jz loc_41AB19  +
nop   +
mov ecx [ebx+0Ch] +
add edi 1 +
add ebx 20h +
mov edx [ebx-18h] +
mov esi [ebx-20h] +
mov [esp+14h] eax +
mov eax [esp+18h] +
mov [esp+10h] ecx +
mov [esp+0Ch] edx +
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aPBSymbolSDefin +
call sub_418450  +
cmp edi ebp +
jnz loc_41AB27  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] eax +
mov eax ds:dword_514850 +
mov dword ptr [esp+14h] 1 +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] eax +
call sub_4500F0  +
mov esi eax +
test esi esi +
jnz loc_41AB66  +
xor eax eax +
jmp loc_41AB08  +
***
mov eax ds:dword_50F508 +
mov eax [eax+4] +
mov [esp+8] edx +
mov dword ptr [esp] offset aPFSPluginSymbo +
mov [esp+4] eax +
call sub_418450  +
movzx edx byte ptr [esi+0Ch] +
mov eax [esi+14h] +
cmp dl 5 +
jnz loc_41AB8E  +
mov eax [eax+4] +
jmp loc_41AB8E  +
***
mov eax 7 +
jmp loc_41AB08  +
***
test byte ptr [esi+0Dh] 1 +
mov eax 2 +
jnz loc_41AB08  +
movzx edx byte ptr ds:word_514820 +
mov eax edx +
and eax 3 +
cmp al 2 +
jz loc_41AD17  +
and edx 10h +
jnz loc_41AD20  +
cmp al 3 +
mov edx offset dword_50F274 +
jz loc_41AD20  +
mov [esp+1Ch] ebx +
mov ebx esi +
mov esi edx +
mov eax [esi+4] +
test eax eax +
jz loc_41ACFF  +
mov ecx [ebx+4] +
mov [esp] eax +
mov [esp+4] ecx +
call strcmp  +
test eax eax +
jz loc_41AD13  +
mov esi [esi] +
test esi esi +
jnz loc_41ACE5  +
mov ebx [esp+1Ch] +
mov eax 3 +
jmp loc_41AB08  +
***
mov ebx [esp+1Ch] +
mov eax [esp+40h] +
jmp loc_41AB08  +
***
mov eax [esi+4] +
mov [esp+4] eax +
mov eax ds:dword_51489C +
mov [esp] eax +
call sub_4530E0  +
test eax eax +
jnz loc_41AD09  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jz loc_41AD7B  +
xor eax eax +
cmp dword ptr [ebx+0Ch] 1 +
setbe al  +
test eax eax +
jnz loc_41AD17  +
mov al 3 +
jmp loc_41AB08  +
***
mov dword ptr [esp+4] 296h +
mov dword ptr [esp] offset a____BinutilsLd +
mov [esp+1Ch] ecx +
call sub_4184A0  +
mov ecx [esp+1Ch] +
jmp loc_41AAAD  +
***
movzx edx byte ptr [esi+31h] +
and edx 3 +
cmp edx 3 +
setz al  +
test edx edx +
setz dl  +
or eax edx +
movzx eax al +
jmp loc_41AD4F  +
***
mov eax [esp+4] +
mov ecx [esp+0Ch] +
mov edx [esp+8] +
mov dword ptr [esp+4] 9 +
jmp loc_41AA90  +
***
mov eax [esp+4] +
mov ecx [esp+0Ch] +
mov edx [esp+8] +
mov dword ptr [esp+4] 2 +
jmp loc_41AA90  +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov ebx [esp+6Ch+arg_0] +
test byte ptr [ebx+2Ah] 20h +
jnz loc_41B0F0  +
movzx edx byte ptr [ebx+2Ch] +
and edx 0Ch +
jnz loc_41B060  +
mov eax [ebx+8Ch] +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esp+6Ch+var_54] ecx +
jz loc_41B075  +
mov edi [eax] +
mov [esp+6Ch+var_68] 8000h +
mov [esp+6Ch+var_6C] edi +
call _open  +
test eax eax +
mov [esp+6Ch+var_40] eax +
js loc_41B0F0  +
mov eax [ebx+4] +
mov ebp ebx +
mov ecx [ebx] +
mov ds:dword_50FEA0 1 +
mov [esp+6Ch+var_6C] eax +
mov [esp+6Ch+var_4C] ecx +
call sub_45C070  +
mov ecx [esp+6Ch+var_4C] +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset aSymbolFromPlug +
mov [esp+6Ch+var_6C] ecx +
test eax eax +
mov esi eax +
cmovnz ebp ds:dword_514850 +
call sub_4A8A40  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] eax +
call sub_458880  +
test eax eax +
mov ebp eax +
jz loc_41B0C2  +
or dword ptr [eax+28h] 220000h +
mov [esp+6Ch+var_6C] eax +
call sub_4588D0  +
test eax eax +
jz loc_41B0C2  +
test esi esi +
jz loc_41B080  +
mov [esp+6Ch+var_64] 20811Bh +
mov [esp+6Ch+var_68] offset a_text +
mov [esp+6Ch+var_6C] ebp +
call sub_44D890  +
test eax eax +
jz loc_41B0C2  +
mov [esp+6Ch+var_68] 38h +
mov [esp+6Ch+var_6C] ebp +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_41B165  +
mov eax [esp+6Ch+var_54] +
test eax eax +
jz loc_41B100  +
mov eax [ebx+38h] +
mov ecx [ebx+88h] +
mov edx [ebx+3Ch] +
mov [esp+6Ch+var_54] eax +
mov eax [ecx+4] +
mov [esp+6Ch+var_50] edx +
xor edx edx +
mov [esp+6Ch+var_48] edx +
mov [esp+6Ch+var_4C] eax +
mov edx [esp+6Ch+var_50] +
mov eax [esp+6Ch+var_54] +
mov ecx [esp+6Ch+var_40] +
mov [esp+6Ch+var_14] esi +
mov [esp+6Ch+var_20] edx +
mov edx [esp+6Ch+var_48] +
mov [esp+6Ch+var_24] eax +
mov eax [esp+6Ch+var_4C] +
mov [esp+6Ch+var_2C] edi +
mov [esp+6Ch+var_28] ecx +
mov [esp+6Ch+var_18] edx +
mov edx [esp+6Ch+var_50] +
mov [esp+6Ch+var_1C] eax +
mov eax [esp+6Ch+var_54] +
mov [esi] ebp +
mov dword ptr [esi+8] 0 +
mov [esi+2Ch] edx +
mov edx [esp+6Ch+var_48] +
mov [esi+28h] eax +
mov eax [esp+6Ch+var_4C] +
mov dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+10h] 0 +
mov [esi+34h] edx +
mov edx [ebx] +
mov [esi+30h] eax +
mov eax ebp +
mov dword ptr [esi+14h] 0 +
mov [esi+1Ch] ecx +
mov dword ptr [esi+20h] 0 +
call sub_419F60  +
mov edi ds:dword_50F514 +
mov [esp+6Ch+var_30] 0 +
mov [esi+18h] eax +
mov eax ds:dword_50F4A0 +
test eax eax +
jnz loc_41B015  +
test edi edi +
jnz loc_41AFC2  +
jmp loc_41AFFC  +
mov ecx [esp+6Ch+var_30] +
test ecx ecx +
lea esi [esi+0] +
jnz loc_41AFFC  +
mov eax [edi+14h] +
test eax eax +
jz loc_41AFF6  +
lea ecx [esp+6Ch+var_30] +
lea edx [esp+6Ch+var_2C] +
mov ds:dword_50F508 edi +
mov [esp+6Ch+var_68] ecx +
mov [esp+6Ch+var_6C] edx +
call eax  +
mov ds:dword_50F508 0 +
test eax eax +
jz loc_41AFF6  +
mov eax [edi+4] +
mov ds:dword_50F504 eax +
mov edi [edi] +
test edi edi +
jnz loc_41AFB7  +
mov eax ds:dword_50F504 +
test eax eax +
jz loc_41B015  +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_6C] offset aPFSPluginRepor +
call sub_418450  +
cmp dword ptr [esi+1Ch] 0FFFFFFFFh +
jz loc_41B02E  +
mov eax [ebx+4] +
mov [esp+6Ch+var_6C] eax +
call sub_45C070  +
test eax eax +
jz loc_41B0D5  +
movzx eax byte ptr [ebx+2Ch] +
mov edx [esp+6Ch+var_30] +
and eax 0FFFFFFF3h +
test edx edx +
jz loc_41B150  +
or eax 4 +
mov [ebx+30h] ebp +
mov [ebx+2Ch] al +
mov [esp+6Ch+var_6C] ebp +
call sub_458960  +
mov eax [ebp+4] +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
cmp dl 4 +
jnz loc_41B06D  +
mov eax [ebx+30h] +
mov eax [eax+4] +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [ebx] +
jmp loc_41AE1E  +
mov [esp+6Ch+var_6C] ebx +
call sub_4536F0  +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_68] eax +
call sub_4536A0  +
mov [esp+6Ch+var_6C] ebx +
call sub_44C140  +
mov [esp+6Ch+var_6C] ebp +
mov [esp+6Ch+var_68] eax +
call sub_44C180  +
mov eax [ebp+4] +
mov eax [eax+0A8h] +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] ebx +
call eax  +
test eax eax +
jnz loc_41AEB3  +
mov [esp+6Ch+var_6C] offset aCouldNotCreate +
xor ebp ebp +
call sub_418450  +
jmp loc_41AED3  +
mov eax [esp+6Ch+var_40] +
mov [esp+6Ch+var_6C] eax +
call _close  +
mov dword ptr [esi+1Ch] 0FFFFFFFFh +
jmp loc_41B02E  +
add esp 6Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+6Ch+var_40] +
mov [esp+6Ch+var_60] 2 +
mov [esp+6Ch+var_68] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_6C] eax +
call j__lseeki64  +
mov [esp+6Ch+var_4C] eax +
mov eax ebp +
mov [esp+6Ch+var_48] edx +
mov edx edi +
call sub_419F60  +
mov [esp+6Ch+var_54] 0 +
mov [esp+6Ch+var_50] 0 +
mov edi eax +
jmp loc_41AF1A  +
or eax 8 +
mov [ebx+2Ch] al +
mov [esp+6Ch+var_6C] ebp +
call sub_4587E0  +
xor eax eax +
jmp loc_41B06D  +
call sub_44B8A0  +
mov [esp+6Ch+var_6C] offset aPFPluginFailed +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_41AEED  +
***
mov edx ds:dword_50F504 +
mov eax offset aNoPlugin +
test edx edx +
cmovnz eax edx +
retn   +
***
jmp sub_41B1A0  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [ebp+arg_0] +
mov [esp+28h+var_28] 24h +
call sub_4A05F0  +
mov edx 24h +
test al 1 +
mov ebx eax +
mov edi eax +
jnz loc_41B250  +
test edi 2 +
jnz loc_41B264  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_41B1EC  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_41B1F4  +
mov byte ptr [edi] 0 +
mov [ebx+4] esi +
mov [esp+28h+var_28] esi +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
mov [ebx+8] eax +
jz loc_41B230  +
mov eax off_4BE12C +
mov ds:dword_50F510 ebx +
mov off_4BE12C ebx +
mov [eax] ebx +
add ebx 0Ch +
mov ds:dword_50F50C ebx +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_20] offset unk_4D4297 +
mov [esp+28h+var_24] esi +
mov [esp+28h+var_28] offset aPFSErrorLoadin +
call sub_418450  +
jmp loc_41B20A  +
lea edi [eax+1] +
mov dl 23h +
test edi 2 +
mov byte ptr [eax] 0 +
jz loc_41B1D5  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
sub edx 2 +
jmp loc_41B1D5  +
***
push ebx  +
mov eax ds:dword_50F514 +
test eax eax +
jz locret_41B4E3  +
xor edx edx +
nop   +
mov ecx [eax+10h] +
mov eax [eax] +
cmp edx ecx +
cmovb edx ecx +
test eax eax +
jnz loc_41B320  +
push ebp  +
mov ebp esp +
push edi  +
push esi  +
xor esi esi +
push ebx  +
sub esp 1Ch +
lea eax ds:90h[edx*8] +
mov [esp+2Ch+var_2C] eax +
call sub_4A05F0  +
mov ebx eax +
mov edi eax +
lea esi [esi+0] +
mov eax ds:dword_4D43A0[esi*4] +
cmp eax 19h +
mov [edi] eax +
ja loc_41B5C2  +
jmp ds:off_4D42F8[eax*4]  +
mov dword ptr [edi+4] offset loc_41ADA0 +
add esi 1 +
add edi 8 +
cmp esi 11h +
jnz loc_41B350  +
mov edi ds:dword_50F514 +
lea esi [ebx+88h] +
test edi edi +
jz loc_41B409  +
nop   +
lea esi [esi+0] +
mov eax [edi+8] +
mov [esp+2Ch+var_28] offset aOnload +
mov [esp+2Ch+var_2C] eax +
call ds:GetProcAddress  +
sub esp 8 +
test eax eax +
jz loc_41B5FC  +
mov ecx [edi+0Ch] +
mov edx esi +
test ecx ecx +
jz loc_41B3D9  +
mov [ebp+var_1C] eax +
nop   +
lea esi [esi+0] +
mov eax [ecx+4] +
add edx 8 +
mov ecx [ecx] +
mov dword ptr [edx-8] 4 +
mov [edx-4] eax +
test ecx ecx +
jnz loc_41B3C0  +
mov eax [ebp+var_1C] +
mov dword ptr [edx] 0 +
mov dword ptr [edx+4] 0 +
mov ds:dword_50F508 edi +
mov [esp+2Ch+var_2C] ebx +
call eax  +
mov ds:dword_50F508 0 +
test eax eax +
jnz loc_41B5E0  +
mov edi [edi] +
test edi edi +
jnz loc_41B390  +
movzx edx byte ptr ds:word_514820 +
mov eax edx +
or edx 0FFFFFF80h +
shr al 7 +
movzx eax al +
mov ds:dword_50F500 eax +
mov eax ds:dword_514838 +
mov ecx [eax] +
mov ds:dword_50F4FC eax +
mov ds:dword_50F4C0 ecx +
mov ecx [eax+4] +
mov ds:dword_50F4C4 ecx +
mov ecx [eax+8] +
mov ds:dword_50F4C8 ecx +
mov ecx [eax+0Ch] +
mov ds:dword_50F4CC ecx +
mov ecx [eax+10h] +
mov ds:dword_50F4D0 ecx +
mov ecx [eax+14h] +
mov ds:dword_50F4D4 ecx +
mov ecx [eax+18h] +
mov ds:dword_50F4D8 ecx +
mov ecx [eax+1Ch] +
mov ds:dword_50F4DC ecx +
mov ecx [eax+20h] +
mov ds:dword_50F4E0 ecx +
mov ecx [eax+24h] +
mov ds:dword_50F4E4 ecx +
mov ecx [eax+28h] +
mov ds:dword_50F4E8 ecx +
mov ecx [eax+2Ch] +
mov ds:dword_50F4EC ecx +
mov ecx [eax+30h] +
mov ds:dword_50F4F0 ecx +
mov ecx [eax+34h] +
mov ds:dword_50F4F4 ecx +
mov eax [eax+38h] +
mov ds:dword_50F4F8 eax +
mov [esp+2Ch+var_2C] offset sub_41ADE0 +
mov ds:dword_50F4E8 offset sub_419FC0 +
mov byte ptr ds:word_514820 dl +
or byte ptr ds:word_514820+1 1 +
mov ds:dword_514838 offset dword_50F4C0 +
call sub_45C080  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [edi+4] offset sub_41A440 +
jmp loc_41B370  +
mov dword ptr [edi+4] 0E2h +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A330 +
jmp loc_41B370  +
mov eax off_4BE0A0 +
mov [edi+4] eax +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A380 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A190 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset loc_41A1E0 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A8A0 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A3E0 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset loc_41ADC0 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A5A0 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A240 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A290 +
jmp loc_41B370  +
mov dword ptr [edi+4] offset sub_41A2E0 +
jmp loc_41B370  +
movzx eax byte ptr ds:word_514820 +
xor edx edx +
and eax 3 +
cmp al 2 +
jz loc_41B5AE  +
test al al +
mov dl 1 +
jz loc_41B5AE  +
xor edx edx +
cmp al 1 +
setz dl  +
add edx 2 +
mov [edi+4] edx +
jmp loc_41B370  +
mov dword ptr [edi+4] 1 +
jmp loc_41B370  +
mov [esp+2Ch+var_28] 39Ch +
mov [esp+2Ch+var_2C] offset a____BinutilsLd +
call sub_4184A0  +
jmp loc_41B370  +
mov edx [edi+4] +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_2C] offset aPFSPluginError +
mov [esp+2Ch+var_28] edx +
call sub_418450  +
jmp loc_41B403  +
mov eax [edi+8] +
mov [esp+2Ch+var_28] offset a_onload +
mov [esp+2Ch+var_2C] eax +
call ds:GetProcAddress  +
sub esp 8 +
test eax eax +
jnz loc_41B3AF  +
mov edx [edi+4] +
mov [esp+2Ch+var_24] offset unk_4D4297 +
mov [esp+2Ch+var_2C] offset aPFSErrorLoadin +
mov [ebp+var_1C] eax +
mov [esp+2Ch+var_28] edx +
call sub_418450  +
mov eax [ebp+var_1C] +
jmp loc_41B3AF  +
***
jmp sub_41B650  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov eax [ebx+10h] +
mov [esp+14h+var_14] eax +
call sub_41ADE0  +
test eax eax +
jz loc_41B67F  +
mov eax [ebx+10h] +
mov edx [eax+8Ch] +
mov esi [eax+30h] +
test edx edx +
jz loc_41B685  +
or byte ptr [ebx+25h] 20h +
mov [ebx+10h] esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] eax +
call sub_4586F0  +
jmp loc_41B678  +
***
mov ebx ds:dword_50F514 +
mov ds:dword_50F4A0 1 +
test ebx ebx +
jz loc_41B6D3  +
mov eax [ebx+18h] +
test eax eax +
jz loc_41B6CD  +
mov ds:dword_50F508 ebx +
call eax  +
mov ds:dword_50F508 0 +
test eax eax +
jz loc_41B6CD  +
mov eax [ebx+4] +
mov ds:dword_50F504 eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_41B6A8  +
mov edx ds:dword_50F504 +
xor eax eax +
test edx edx +
setnz al  +
add esp 8 +
neg eax  +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx ds:dword_50F514 +
mov esi ds:FreeLibrary +
test ebx ebx +
jnz loc_41B716  +
jmp loc_41B752  +
mov ebx [ebx] +
test ebx ebx +
jz loc_41B752  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_41B710  +
mov edx [ebx+20h] +
test edx edx +
jnz loc_41B710  +
mov dword ptr [ebx+20h] 1 +
mov ds:dword_50F508 ebx +
call eax  +
mov ds:dword_50F508 0 +
test eax eax +
jnz loc_41B760  +
mov eax [ebx+8] +
mov [esp+18h+var_18] eax +
call esi  +
mov ebx [ebx] +
sub esp 4 +
test ebx ebx +
jnz loc_41B716  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov edx [ebx+4] +
mov [esp+18h+var_10] eax +
mov [esp+18h+var_18] offset aPSErrorInPlugi +
mov [esp+18h+var_14] edx +
call sub_418420  +
jmp loc_41B741  +
***
movzx edx al +
movzx edx ds:word_509C60[edx+edx] +
test dl 4 +
jnz loc_41B7A4  +
test dl 80h +
jnz loc_41B7A0  +
and edx 8 +
jz loc_41B7A8  +
sub eax 57h +
retn   +
sub eax 37h +
retn   +
sub eax 30h +
retn   +
sub esp 0Ch +
call abort  +
push edi  +
mov ecx 4 +
push esi  +
mov esi [esp+14h+var_8] +
mov edi offset unk_4D4400 +
mov eax 1 +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
jz loc_41B7F9  +
mov esi [esp+14h+var_8] +
mov edi offset aSha1 +
mov ecx 5 +
cmps   +
jz loc_41B7F9  +
mov esi [esp+14h+var_8] +
mov edi offset a0x_0 +
mov ecx 2 +
cmps   +
setz al  +
movzx eax al +
pop esi  +
pop edi  +
retn   +
***
push edi  +
mov ecx 4 +
push esi  +
mov esi [esp+0Ch] +
mov edi offset unk_4D4400 +
mov eax 10h +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
jnz loc_41B824  +
pop esi  +
pop edi  +
retn   +
***
mov esi [esp+0Ch] +
mov edi offset aUuid +
mov ecx 5 +
cmps   +
jz loc_41B821  +
mov esi [esp+0Ch] +
mov ecx 5 +
mov edi offset aSha1 +
mov al 14h +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
jz loc_41B821  +
mov esi [esp+0Ch] +
mov ecx 2 +
mov edi offset a0x_0 +
cmps   +
setnbe cl  +
setb dl  +
xor al al +
cmp cl dl +
jnz loc_41B821  +
mov eax [esp+0Ch] +
lea edx [eax+2] +
movzx ecx byte ptr [eax+2] +
xor eax eax +
jmp loc_41B89B  +
movzx esi byte ptr [edx+1] +
test byte ptr [esi+esi+509C61h] 1 +
jz loc_41B8A8  +
add eax 1 +
add edx 2 +
movzx ecx byte ptr [edx] +
test cl cl +
jz loc_41B821  +
movzx esi cl +
test byte ptr [esi+esi+509C61h] 1 +
jnz loc_41B880  +
cmp cl 3Ah +
jnz loc_41B8B2  +
add edx 1 +
jmp loc_41B894  +
***
cmp cl 2Dh +
jz loc_41B8AD  +
xor eax eax +
jmp loc_41B821  +
***
push edi  +
mov edi offset unk_4D4400 +
push esi  +
push ebx  +
sub esp 0BCh +
mov eax [esp+0C8h+arg_4] +
mov esi eax +
cmps   +
jz loc_41B992  +
mov edi offset aSha1 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_41B9E0  +
mov edi offset a0x_0 +
mov ecx 2 +
mov esi eax +
cmps   +
jnz loc_41BA37  +
lea ebx [eax+2] +
movzx edx byte ptr [eax+2] +
xor esi esi +
jmp loc_41B92B  +
cmp dl 3Ah +
jnz loc_41BA2E  +
add ebx 1 +
movzx edx byte ptr [ebx] +
test dl dl +
jz loc_41B982  +
movzx edi dl +
movsx eax dl +
test byte ptr [edi+edi+509C61h] 1 +
jz loc_41B918  +
movzx edi byte ptr [ebx+1] +
test byte ptr [edi+edi+509C61h] 1 +
jz loc_41B918  +
call sub_41B780  +
mov edi [esp+0C8h+arg_C] +
lea ebp [ebx+2] +
add edi esi +
add esi 1 +
mov edx eax +
shl edx 4 +
mov [edi] dl +
movsx eax byte ptr [ebx+1] +
mov ebx ebp +
mov [esp+0C8h+var_BC] edx +
call sub_41B780  +
mov edx [esp+0C8h+var_BC] +
or eax edx +
mov [edi] al +
movzx edx byte ptr [ebx] +
test dl dl +
jnz loc_41B92B  +
mov eax 1 +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea esi [esp+0C8h+var_B8] +
mov [esp+0C8h+var_C8] esi +
call sub_4A9FF0  +
mov eax [esp+0C8h+arg_0] +
mov [esp+0C8h+var_C0] esi +
mov [esp+0C8h+var_C4] offset sub_4AA860 +
mov [esp+0C8h+var_C8] eax +
call [esp+0C8h+arg_8]  +
test eax eax +
jz loc_41B987  +
mov eax [esp+0DCh] +
mov [esp+0] esi +
mov [esp+4] eax +
call sub_4AA7B0  +
mov eax 1 +
jmp loc_41B987  +
lea esi [esp+0C8h+var_B8] +
mov [esp+0C8h+var_C8] esi +
call sub_4AABC0  +
mov eax [esp+0C8h+arg_0] +
mov [esp+0C8h+var_C0] esi +
mov [esp+0C8h+var_C4] offset sub_4AC070 +
mov [esp+0C8h+var_C8] eax +
call [esp+0C8h+arg_8]  +
test eax eax +
jz loc_41B987  +
mov eax [esp+0DCh] +
mov [esp+0] esi +
mov [esp+4] eax +
call sub_4ABF70  +
mov eax 1 +
jmp loc_41B987  +
cmp dl 2Dh +
jz loc_41B921  +
call abort  +
nop   +
nop   +
nop   +
nop   +
push ebx  +
sub esp 18h +
mov ebx [esp+0E4h+var_C4] +
mov [esp+0E4h+var_DC] 0EEh +
mov [esp+0E4h+var_E0] 1 +
mov [esp+0E4h+var_E4] offset aPmemWrapAround +
mov [esp+0E4h+var_D8] ebx +
call fwrite  +
mov [esp+0E4h+var_D8] ebx +
mov [esp+0E4h+var_DC] 124h +
mov [esp+0E4h+var_E0] 1 +
mov [esp+0E4h+var_E4] offset aNoCallRetRepla +
call fwrite  +
mov [esp+0E4h+var_D8] ebx +
mov [esp+0E4h+var_DC] 12Dh +
mov [esp+0E4h+var_E0] 1 +
mov [esp+0E4h+var_E4] offset aNoStubsIfTheLi +
call fwrite  +
mov [esp+0E4h+var_D8] ebx +
mov [esp+0E4h+var_DC] 39h +
mov [esp+0E4h+var_E0] 1 +
mov [esp+0E4h+var_E4] offset aDebugStubsUsed +
call fwrite  +
mov [esp+0E4h+var_D8] ebx +
mov [esp+0E4h+var_DC] 39h +
mov [esp+0E4h+var_E0] 1 +
mov [esp+0E4h+var_E4] offset aDebugRelaxUsed +
call fwrite  +
mov [esp+0E4h+var_D8] ebx +
mov [esp+0E4h+var_DC] 59h +
mov [esp+0E4h+var_E0] 1 +
mov [esp+0E4h+var_E4] offset aDetailedMemUsa +
call fwrite  +
mov [esp+0E4h+var_D8] ebx +
mov [esp+0E4h+var_DC] 83h +
mov [esp+0E4h+var_E0] 1 +
mov [esp+0E4h+var_E4] offset aNonBitAddressa +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_41BB5C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_41BB85  +
test esi esi +
jz loc_41BB69  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_41BB71  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbolsM +
call sub_418450  +
jmp loc_41BB5C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_41BEB8  +
jle loc_41BBF0  +
cmp eax 133h +
jz loc_41BE84  +
jg loc_41BC28  +
cmp eax 131h +
jz loc_41BD83  +
cmp eax 132h +
jnz loc_41BE66  +
mov ds:dword_50F578 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_41BE70  +
jle loc_41BDB0  +
cmp eax 12Eh +
jz loc_41BC70  +
cmp eax 12Fh +
jnz loc_41BE66  +
mov ds:dword_50F584 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_41BD30  +
cmp eax 198h +
jnz loc_41BE66  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_2 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_41BEF2  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_41BC22  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41BD97  +
mov edi offset off_4D4A2A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41BD97  +
mov edi offset unk_4D4A2E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_41BF20  +
mov edi offset unk_4D4A31 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_41BF20  +
mov edi offset unk_4D4A34 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41BFC5  +
mov edi offset off_4D4A38 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41BFC5  +
mov edi offset unk_4D4A3C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41BD1B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4D4A40 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_41BC22  +
mov dword_4BE288 10000h +
mov eax 1 +
jmp loc_41BC22  +
***
mov eax ds:dword_50F524 +
test eax eax +
jz loc_41BD4B  +
mov [esp] eax +
call free  +
mov ds:dword_50F524 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_41BF60  +
mov edi offset aNone_2 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_41BBE3  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F524 eax +
mov eax 1 +
jmp loc_41BC22  +
***
mov ds:dword_50F580 1 +
mov eax 1 +
jmp loc_41BC22  +
***
mov dword_4BE288 8000h +
mov eax 1 +
jmp loc_41BC22  +
***
cmp eax 7Ah +
jnz loc_41BE66  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_41BEE1  +
mov edi offset aMuldefs +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_41BED0  +
mov edi offset aMaxPageSize +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_41BF74  +
mov edi offset aCommonPageSize +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_41BFD9  +
mov edi offset aStackSize +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_41C063  +
mov edi offset aExecstack +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_41C0A7  +
mov edi offset aNoexecstack +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_41C0E2  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_41BC22  +
***
xor eax eax +
jmp loc_41BC22  +
***
mov dword_4BE28C 0 +
mov eax 1 +
jmp loc_41BC22  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_41BBE3  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F574 eax +
mov eax 1 +
jmp loc_41BC22  +
***
mov ds:dword_50F57C 1 +
mov eax 1 +
jmp loc_41BC22  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_41BC22  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_41BC22  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_41BF34  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_41BC22  +
***
mov dword_4BE288 2000h +
mov eax 1 +
jmp loc_41BC22  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_41C02A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_41BC22  +
***
mov ds:dword_5141E8 offset aSha1_0 +
mov eax offset aSha1_0 +
jmp loc_41BD6C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_41BFA8  +
lea edx [eax-1] +
test eax edx +
jz loc_41BBE3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMaxiu +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41BBE3  +
***
mov dword_4BE288 4000h +
mov eax 1 +
jmp loc_41BC22  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_41C00D  +
lea edx [eax-1] +
test eax edx +
jz loc_41BBE3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_0 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41BBE3  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_41BF08  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCompr +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_41BC22  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_41C0C3  +
test eax eax +
js loc_41C0C3  +
test eax eax +
jnz loc_41BBE3  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_41BBE3  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_41BC22  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidStack +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_41C090  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIgno +
call sub_418450  +
mov eax 1 +
jmp loc_41BC22  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4DE840 +
test edi 1 +
mov eax 0A0h +
jnz loc_41C198  +
test edi 2 +
jnz loc_41C1B7  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_41C186  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_41C191  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4DE840 +
add edi 1 +
mov esi 4DE841h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_41C16E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_41C16E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_41C2D0  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_41C2E0  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_41C31C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_41C2D0  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_41C2D0  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_41C2B8  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr2_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_41C330  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_4 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_41C26A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_41C2BC  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs +
mov ebx eax +
mov ds:dword_50F58C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F58C +
mov eax [eax+10h] +
test eax eax +
jz loc_41C3DB  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F58C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_41C3F0  +
mov [esp+14h+var_14] offset aXPCanNotCreate +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F58C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F588 eax +
jz loc_41C433  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F58C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMakeSt +
call sub_418450  +
jmp loc_41C3E7  +
***
jmp sub_41C450  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_41C480  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_41C4B0  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_41C4AB  +
mov ecx ds:dword_50F58C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_41C4A1  +
cmp [ecx+10h] eax +
jnz loc_41C4C2  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_41C490  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_41C46C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_41C51D  +
mov eax [ebx+0Ch] +
jmp ds:off_4D4AF8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__5 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_41C560  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_41C4E4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_41C4F8  +
mov ebx [ebx+10h] +
jmp loc_41C4DE  +
mov eax [ebx+10h] +
call sub_41C4D0  +
mov eax [ebx+14h] +
call sub_41C4D0  +
mov ebx [ebx+18h] +
jmp loc_41C4DE  +
mov eax [ebx+10h] +
call sub_41C4D0  +
jmp loc_41C514  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_41C514  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToReco +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_41C514  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_41C720  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_41C6F1  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_41C6D0  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_41C620  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_41C620  +
***
mov dword ptr [esp] offset aPWarning_note_ +
call sub_418450  +
mov edx 1 +
jmp loc_41C6C5  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_41C7A4  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_41C79A  +
test byte ptr [ebx+29h] 8 +
jz loc_41C79A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_41C7B0  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_41C7F9  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_41C878  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_41C7F9  +
mov dword ptr [esp] offset dword_41DB30 +
mov ds:dword_50F534 eax +
mov ds:dword_50F530 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F530 +
test ecx ecx +
jnz loc_41C79A  +
mov dword ptr [esp+4] offset dword_50F540 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_41C850  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_41C862  +
mov dword ptr [esp] offset loc_41D010 +
mov ds:dword_50F538 0 +
call sub_40D9B0  +
mov eax ds:dword_50F538 +
test eax eax +
jz loc_41C890  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statFai +
call sub_418450  +
jmp loc_41C80D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS +
call sub_418420  +
jmp loc_41C823  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_get +
call sub_418450  +
jmp loc_41C7CC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_41C8F2  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_41C8F2  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_41C842  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_0 +
call sub_418450  +
jmp loc_41C842  +
***
mov eax 2 +
jmp loc_41C8B3  +
***
mov eax ds:dword_50F538 +
test eax eax +
jz loc_41D020  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_41D03C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_41D042  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_41D106  +
mov eax ds:dword_50F540 +
cmp [esp+10h] eax +
jz loc_41D122  +
mov eax ds:dword_50F570 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_41D03C  +
mov dword ptr [esp+4] offset a_so_ +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_41D03C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_41D14B  +
mov eax ds:dword_50F570 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_41D03C  +
mov eax ds:dword_50F570 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNeede +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41D03C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFail +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41D03C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F544 +
jnz loc_41D070  +
test ax ax +
jz loc_41D070  +
mov eax [esp+50h] +
mov ds:dword_50F538 eax +
jmp loc_41D03C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_41D0BC  +
***
jmp sub_41D170  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_41D188  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr2_0 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_41D26B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_41D28E  +
test ds:byte_514824 2 +
jnz loc_41D3A6  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_41D440  +
mov ecx ds:dword_50F520 +
test ecx ecx +
jnz loc_41D2F7  +
mov esi offset off_4BE140 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_41D2E2  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_41D2E2  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_41D2E2  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BE218 +
jb loc_41D2B0  +
mov ds:dword_50F520 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_41D612  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_41D326  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_41D3E4  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_41D320  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_41D320  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_41D326  +
test byte ptr [eax+29h] 8 +
jnz loc_41D326  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_41D326  +
test byte ptr [edx+24h] 10h +
jnz loc_41D326  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_41D320  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_41D320  +
test byte ptr [ebx+14h] 1 +
jz loc_41D28E  +
test ebp ebp +
jz loc_41D660  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_41D71C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_41D28E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_41D4D6  +
mov edx offset off_4BE200 +
mov eax [edx+8] +
test eax eax +
jz loc_41D6AE  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_41D29A  +
xor edi edi +
jmp loc_41D48A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_41D5E5  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_41D4D2  +
mov edx [eax+14h] +
test edx edx +
jz loc_41D5C0  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_41D470  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_41D5C0  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_41D470  +
mov edi esi +
jmp loc_41D470  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_41D6A5  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_41D530  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_41D505  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BE1D0 +
jnz loc_41D3F7  +
test ebp ebp +
jnz loc_41D530  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BE1D0 +
mov eax esi +
cmp cl al +
jz loc_41D3F7  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BE1A0 +
jz loc_41D3F7  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BE1E8 +
jnz loc_41D3F7  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BE170 +
jnz loc_41D3F7  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BE188 +
jz loc_41D3F7  +
test ebp ebp +
jnz loc_41D868  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel +
mov ecx 4 +
cmps   +
jnz loc_41D5A4  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BE1B8 +
test ebp ebp +
jnz loc_41D3F7  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BE158 +
mov eax offset off_4BE140 +
cmovnz edx eax +
jmp loc_41D3F7  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_41D8AA  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warning_ +
mov ecx 0Dh +
cmps   +
jnz loc_41D309  +
mov eax dword_4BE148 +
test eax eax +
jz loc_41D309  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_41D432  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_41D28E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_41D731  +
mov [esp+4Ch+arg_4] offset a_rel_dyn +
jmp loc_41D28E  +
xor edx edx +
xor eax eax +
jmp loc_41D402  +
mov eax [edx] +
test eax eax +
jz loc_41D73E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_41D402  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_41D402  +
mov eax ds:dword_5146F8 +
jmp loc_41D402  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn +
jmp loc_41D28E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn +
jmp loc_41D28E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_41D8B7  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_41D811  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_41D85C  +
movzx ecx dl +
mov esi offset a_plt +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_41D85C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_41D7C7  +
test al al +
jz loc_41D7CB  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_41D7D7  +
test al al +
jz loc_41D82F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_41D806  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_41D806  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_41D840  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_41D82F  +
mov eax [ebp+18h] +
mov edi offset a_rel +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41D788  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_41D806  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_41D7F1  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_41D883  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_41D6DB  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_41D848  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_41D593  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_41D593  +
jmp loc_41D5A4  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_41D850  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_41D850  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_41D850  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_41D29A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_41D850  +
***
jmp sub_41D8D0  +
***
sub esp 14h +
mov ebx ds:dword_50F584 +
test ebx ebx +
jnz loc_41D910  +
cmp ds:dword_514834 1 +
jbe loc_41D910  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_41DA30  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_41D9C0  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_41D9D0  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_41D9D0  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_41D9E0  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_41D9B1  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_41D9D0  +
cmp ebx 6 +
jle loc_41DA20  +
sub ebx 1 +
jz loc_41D9E8  +
mov eax 1 +
jmp loc_41D932  +
mov [esp+14h+var_14] offset aFPMapSectionsT +
call sub_418450  +
jmp loc_41D988  +
mov [esp+14h+var_14] offset aXP_eh_frame_st +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F584 +
test eax eax +
jz loc_41D9FD  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_41D974  +
mov [esp+14h+var_14] offset aPFLoopingInMap +
call sub_418450  +
mov eax ds:dword_50F584 +
test eax eax +
jnz loc_41D9D9  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_41D9D9  +
mov [esp+14h+var_14] offset aXPCanNotBuildS +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_41D9A5  +
mov [edx+1Ch] esi +
jmp loc_41D9D0  +
mov [esp+14h+var_14] offset aXPCanNotSizeSt +
call sub_418450  +
jmp loc_41D910  +
***
jmp loc_41DA50  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F538 +
mov ebx [esp+20h] +
test eax eax +
jz loc_41DA74  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_41DB27  +
mov eax [ebx+8] +
test eax eax +
jz loc_41DB27  +
mov edx [ebx+10h] +
test edx edx +
jz loc_41DB27  +
mov ecx ds:dword_50F538 +
test ecx ecx +
jz loc_41DAA7  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_41DB27  +
mov eax [ebx+8] +
mov edx ds:dword_50F570 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_41DB21  +
test byte ptr [ebx+24h] 4 +
jz loc_41DAF9  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_41DAF9  +
mov edx ds:dword_50F570 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_41DB21  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_41DB27  +
mov edx ds:dword_50F570 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_41DB27  +
mov ds:dword_50F538 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_41E0CD  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_41E1EB  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_41DC4E  +
jmp loc_41DDB2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_41DDB2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_41DC40  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_41DC40  +
cmp byte ptr [eax] 0 +
jz loc_41DC40  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_41DC99  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_41DDA0  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_41DDA0  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_41E035  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_41DC80  +
cmp byte ptr [esi] 0 +
jz loc_41DC80  +
mov edi ds:dword_50F528 +
test edi edi +
jz loc_41E1D9  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_41DD07  +
add eax 1 +
mov edi eax +
jz loc_41DD41  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_41DD31  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_41E042  +
cmp al [esp+6Ch+var_2E] +
jz loc_41E042  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_41DD00  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_0 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F528 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F528 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F528 ebx +
test edx edx +
jnz loc_41DC8C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_41DC4E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F528 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F52C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_41E099  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_41DE2E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_41DE2E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_41DE4B  +
jmp loc_41DF21  +
mov edi [edi+18h] +
test edi edi +
jz loc_41DF21  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_41DE40  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warning +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_41DE40  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_41E070  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_41E050  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_41DF08  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_41DF08  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_41DE4B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_41E088  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_41DF68  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F574 +
mov eax ds:dword_50F58C +
mov ds:dword_50F584 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BE28C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BE288 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F580 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F57C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F588 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_41E0AA  +
mov eax ds:dword_50F584 +
test eax eax +
jnz loc_41E02D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_41E200  +
jz loc_41E02D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_41E0BC  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_41DCC3  +
test edi edi +
jnz loc_41DC80  +
jmp loc_41DD41  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr2_c +
call sub_4184A0  +
jmp loc_41DEEA  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCont +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_41DEAA  +
mov [esp+6Ch+var_6C] offset aPFFailedToSetD +
call sub_418450  +
jmp loc_41DF43  +
mov [esp+6Ch+var_6C] offset aPFFailedToSetD +
call sub_418450  +
jmp loc_41DE0C  +
mov ds:dword_50F584 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSizeSt +
call sub_418450  +
jmp loc_41E02D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_41E1C0  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_41E1C0  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_41E13D  +
cmp al 2 +
ja loc_41E1C0  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_41E170  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_41E1C8  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_41C5B0 +
call sub_40AFD0  +
jmp loc_41DC1E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F528 eax +
jmp loc_41DC80  +
mov [esp+6Ch+var_6C] offset aLd_run_path +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_41DC2F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetupT +
call sub_418450  +
jmp loc_41E02D  +
***
jmp loc_41E220  +
mov eax ds:dword_50F578 +
test eax eax +
jnz loc_41E230  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAndC +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_41E41B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_41E410  +
test byte ptr [ebp+24h] 10h +
jnz loc_41E410  +
mov ecx [edx] +
test ecx ecx +
jz loc_41E410  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_41E410  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_41E400  +
test byte ptr [esi+14h] 1 +
jz loc_41E400  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_41E400  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_41E2FF  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_41E307  +
and edx 300000h +
jz loc_41E30F  +
cmp esi eax +
jz loc_41E430  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_41E2E7  +
mov edx [esp+18h] +
test edx edx +
jz loc_41E400  +
mov eax [esp+24h] +
test eax eax +
jz loc_41E495  +
mov eax [esi] +
mov dword ptr [esp] offset aS_28 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_41E489  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_41E355  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_0 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_25 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_41E400  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_26 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_41E423  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_41E3B5  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_0 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_41E391  +
mov edx [ebp+8] +
test edx edx +
jnz loc_41E3EA  +
jmp loc_41E4C0  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_41E3E8  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_41E2B2  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_41E270  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_41E3B5  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_41E30F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_41E4C7  +
mov ecx ebp +
jmp loc_41E472  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_41E470  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_41E30F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_41E355  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_27 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_41E32E  +
***
mov edx ebp +
jmp loc_41E3F1  +
***
mov ebp [esp+28h] +
jmp loc_41E480  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_0 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_0 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_0 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_0 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_0 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_0 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_0 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_41E5EC  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_41E615  +
test esi esi +
jz loc_41E5F9  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_41E601  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_0 +
call sub_418450  +
jmp loc_41E5EC  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_41E948  +
jle loc_41E680  +
cmp eax 133h +
jz loc_41E914  +
jg loc_41E6B8  +
cmp eax 131h +
jz loc_41E813  +
cmp eax 132h +
jnz loc_41E8F6  +
mov ds:dword_50F5F8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_41E900  +
jle loc_41E840  +
cmp eax 12Eh +
jz loc_41E700  +
cmp eax 12Fh +
jnz loc_41E8F6  +
mov ds:dword_50F604 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_41E7C0  +
cmp eax 198h +
jnz loc_41E8F6  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_3 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_41E982  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_41E6B2  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_0 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41E827  +
mov edi offset off_4DEF0A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41E827  +
mov edi offset unk_4DEF0E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_41E9B0  +
mov edi offset unk_4DEF11 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_41E9B0  +
mov edi offset unk_4DEF14 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41EA55  +
mov edi offset off_4DEF18 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41EA55  +
mov edi offset unk_4DEF1C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_41E7AB  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4DEF20 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_41E6B2  +
mov dword_4BE3E8 10000h +
mov eax 1 +
jmp loc_41E6B2  +
***
mov eax ds:dword_50F5A4 +
test eax eax +
jz loc_41E7DB  +
mov [esp] eax +
call free  +
mov ds:dword_50F5A4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_41E9F0  +
mov edi offset aNone_3 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_41E673  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F5A4 eax +
mov eax 1 +
jmp loc_41E6B2  +
***
mov ds:dword_50F600 1 +
mov eax 1 +
jmp loc_41E6B2  +
***
mov dword_4BE3E8 8000h +
mov eax 1 +
jmp loc_41E6B2  +
***
cmp eax 7Ah +
jnz loc_41E8F6  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_0 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_41E971  +
mov edi offset aMuldefs_0 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_41E960  +
mov edi offset aMaxPageSize_0 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_41EA04  +
mov edi offset aCommonPageSi_0 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_41EA69  +
mov edi offset aStackSize_0 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_41EAF3  +
mov edi offset aExecstack_0 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_41EB37  +
mov edi offset aNoexecstack_0 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_41EB72  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_41E6B2  +
***
xor eax eax +
jmp loc_41E6B2  +
***
mov dword_4BE3EC 0 +
mov eax 1 +
jmp loc_41E6B2  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_41E673  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F5F4 eax +
mov eax 1 +
jmp loc_41E6B2  +
***
mov ds:dword_50F5FC 1 +
mov eax 1 +
jmp loc_41E6B2  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_41E6B2  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_41E6B2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_0 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_41E9C4  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_41E6B2  +
***
mov dword_4BE3E8 2000h +
mov eax 1 +
jmp loc_41E6B2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_0 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_41EABA  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_41E6B2  +
***
mov ds:dword_5141E8 offset aSha1_1 +
mov eax offset aSha1_1 +
jmp loc_41E7FC  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_41EA38  +
lea edx [eax-1] +
test eax edx +
jz loc_41E673  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_0 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41E673  +
***
mov dword_4BE3E8 4000h +
mov eax 1 +
jmp loc_41E6B2  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_41EA9D  +
lea edx [eax-1] +
test eax edx +
jz loc_41E673  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_1 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41E673  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_0 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_41E998  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_2 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_41E6B2  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_41EB53  +
test eax eax +
js loc_41EB53  +
test eax eax +
jnz loc_41E673  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_41E673  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_41E6B2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_0 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_41EB20  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_0 +
call sub_418450  +
mov eax 1 +
jmp loc_41E6B2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4DF640 +
test edi 1 +
mov eax 0A0h +
jnz loc_41EC28  +
test edi 2 +
jnz loc_41EC47  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_41EC16  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_41EC21  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4DF640 +
add edi 1 +
mov esi 4DF641h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_41EBFE  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_41EBFE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_41ED60  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_41ED70  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_0 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_41EDAC  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_41ED60  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_41ED60  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_41ED48  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr1_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_41EDC0  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_5 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_41ECFA  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_41ED4C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_0 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_0 +
mov ebx eax +
mov ds:dword_50F60C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F60C +
mov eax [eax+10h] +
test eax eax +
jz loc_41EE6B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F60C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_41EE80  +
mov [esp+14h+var_14] offset aXPCanNotCrea_0 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F60C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_0 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F608 eax +
jz loc_41EEC3  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F60C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_0 +
call sub_418450  +
jmp loc_41EE77  +
***
jmp sub_41EEE0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_41EF10  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_41EF40  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_41EF3B  +
mov ecx ds:dword_50F60C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_41EF31  +
cmp [ecx+10h] eax +
jnz loc_41EF52  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_41EF20  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_41EEFC  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_41EFAD  +
mov eax [ebx+0Ch] +
jmp ds:off_4DEFD8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__6 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_41EFF0  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_41EF74  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_41EF88  +
mov ebx [ebx+10h] +
jmp loc_41EF6E  +
mov eax [ebx+10h] +
call sub_41EF60  +
mov eax [ebx+14h] +
call sub_41EF60  +
mov ebx [ebx+18h] +
jmp loc_41EF6E  +
mov eax [ebx+10h] +
call sub_41EF60  +
jmp loc_41EFA4  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_41EFA4  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_0 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_41EFA4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_41F1B0  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_41F181  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_41F160  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_41F0B0  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_41F0B0  +
***
mov dword ptr [esp] offset aPWarning_not_0 +
call sub_418450  +
mov edx 1 +
jmp loc_41F155  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_41F234  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_41F22A  +
test byte ptr [ebx+29h] 8 +
jz loc_41F22A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_41F240  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_41F289  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_41F308  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_41F289  +
mov dword ptr [esp] offset dword_4205C0 +
mov ds:dword_50F5B4 eax +
mov ds:dword_50F5B0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F5B0 +
test ecx ecx +
jnz loc_41F22A  +
mov dword ptr [esp+4] offset dword_50F5C0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_41F2E0  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_41F2F2  +
mov dword ptr [esp] offset loc_41FAA0 +
mov ds:dword_50F5B8 0 +
call sub_40D9B0  +
mov eax ds:dword_50F5B8 +
test eax eax +
jz loc_41F320  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_0 +
call sub_418450  +
jmp loc_41F29D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_0 +
call sub_418420  +
jmp loc_41F2B3  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_0 +
call sub_418450  +
jmp loc_41F25C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_41F382  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_41F382  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_41F2D2  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_1 +
call sub_418450  +
jmp loc_41F2D2  +
***
mov eax 2 +
jmp loc_41F343  +
***
mov eax ds:dword_50F5B8 +
test eax eax +
jz loc_41FAB0  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_41FACC  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_41FAD2  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_41FB96  +
mov eax ds:dword_50F5C0 +
cmp [esp+10h] eax +
jz loc_41FBB2  +
mov eax ds:dword_50F5F0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_41FACC  +
mov dword ptr [esp+4] offset a_so__0 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_41FACC  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_41FBDB  +
mov eax ds:dword_50F5F0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_41FACC  +
mov eax ds:dword_50F5F0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_0 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41FACC  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_0 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_41FACC  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F5C4 +
jnz loc_41FB00  +
test ax ax +
jz loc_41FB00  +
mov eax [esp+50h] +
mov ds:dword_50F5B8 eax +
jmp loc_41FACC  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_41FB4C  +
***
jmp sub_41FC00  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_41FC18  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr1 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_41FCFB  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_41FD1E  +
test ds:byte_514824 2 +
jnz loc_41FE36  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_41FED0  +
mov ecx ds:dword_50F5A0 +
test ecx ecx +
jnz loc_41FD87  +
mov esi offset off_4BE2A0 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_41FD72  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_41FD72  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_41FD72  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BE378 +
jb loc_41FD40  +
mov ds:dword_50F5A0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_4200A2  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_41FDB6  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_41FE74  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_41FDB0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_41FDB0  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_41FDB6  +
test byte ptr [eax+29h] 8 +
jnz loc_41FDB6  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_41FDB6  +
test byte ptr [edx+24h] 10h +
jnz loc_41FDB6  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_41FDB0  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_41FDB0  +
test byte ptr [ebx+14h] 1 +
jz loc_41FD1E  +
test ebp ebp +
jz loc_4200F0  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_4201AC  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_0 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_41FD1E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_41FF66  +
mov edx offset off_4BE360 +
mov eax [edx+8] +
test eax eax +
jz loc_42013E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_41FD2A  +
xor edi edi +
jmp loc_41FF1A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_420075  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_41FF62  +
mov edx [eax+14h] +
test edx edx +
jz loc_420050  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_41FF00  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_420050  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_41FF00  +
mov edi esi +
jmp loc_41FF00  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_420135  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_41FFC0  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_41FF95  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BE330 +
jnz loc_41FE87  +
test ebp ebp +
jnz loc_41FFC0  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_1 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BE330 +
mov eax esi +
cmp cl al +
jz loc_41FE87  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BE300 +
jz loc_41FE87  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BE348 +
jnz loc_41FE87  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BE2D0 +
jnz loc_41FE87  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BE2E8 +
jz loc_41FE87  +
test ebp ebp +
jnz loc_4202F8  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_0 +
mov ecx 4 +
cmps   +
jnz loc_420034  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BE318 +
test ebp ebp +
jnz loc_41FE87  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BE2B8 +
mov eax offset off_4BE2A0 +
cmovnz edx eax +
jmp loc_41FE87  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_42033A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warning_0 +
mov ecx 0Dh +
cmps   +
jnz loc_41FD99  +
mov eax dword_4BE2A8 +
test eax eax +
jz loc_41FD99  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_41FEC2  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_0 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_41FD1E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_4201C1  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_0 +
jmp loc_41FD1E  +
xor edx edx +
xor eax eax +
jmp loc_41FE92  +
mov eax [edx] +
test eax eax +
jz loc_4201CE  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_41FE92  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_41FE92  +
mov eax ds:dword_5146F8 +
jmp loc_41FE92  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_0 +
jmp loc_41FD1E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_0 +
jmp loc_41FD1E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_420347  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_4202A1  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_4202EC  +
movzx ecx dl +
mov esi offset a_plt_0 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_4202EC  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_420257  +
test al al +
jz loc_42025B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_420267  +
test al al +
jz loc_4202BF  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_420296  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_420296  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_4202D0  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_4202BF  +
mov eax [ebp+18h] +
mov edi offset a_rel_0 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_420218  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_420296  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_420281  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_420313  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_42016B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_4202D8  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_420023  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_420023  +
jmp loc_420034  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4202E0  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4202E0  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_4202E0  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_41FD2A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_4202E0  +
***
jmp sub_420360  +
***
sub esp 14h +
mov ebx ds:dword_50F604 +
test ebx ebx +
jnz loc_4203A0  +
cmp ds:dword_514834 1 +
jbe loc_4203A0  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_4204C0  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_420450  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_420460  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_420460  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_420470  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_420441  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_420460  +
cmp ebx 6 +
jle loc_4204B0  +
sub ebx 1 +
jz loc_420478  +
mov eax 1 +
jmp loc_4203C2  +
mov [esp+14h+var_14] offset aFPMapSection_0 +
call sub_418450  +
jmp loc_420418  +
mov [esp+14h+var_14] offset aXP_eh_frame__0 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F604 +
test eax eax +
jz loc_42048D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_420404  +
mov [esp+14h+var_14] offset aPFLoopingInM_0 +
call sub_418450  +
mov eax ds:dword_50F604 +
test eax eax +
jnz loc_420469  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_420469  +
mov [esp+14h+var_14] offset aXPCanNotBuil_0 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_420435  +
mov [edx+1Ch] esi +
jmp loc_420460  +
mov [esp+14h+var_14] offset aXPCanNotSize_0 +
call sub_418450  +
jmp loc_4203A0  +
***
jmp loc_4204E0  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F5B8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_420504  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_4205B7  +
mov eax [ebx+8] +
test eax eax +
jz loc_4205B7  +
mov edx [ebx+10h] +
test edx edx +
jz loc_4205B7  +
mov ecx ds:dword_50F5B8 +
test ecx ecx +
jz loc_420537  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_4205B7  +
mov eax [ebx+8] +
mov edx ds:dword_50F5F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_4205B1  +
test byte ptr [ebx+24h] 4 +
jz loc_420589  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_420589  +
mov edx ds:dword_50F5F0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_4205B1  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_4205B7  +
mov edx ds:dword_50F5F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_4205B7  +
mov ds:dword_50F5B8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_420B5D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_420C7B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_4206DE  +
jmp loc_420842  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_420842  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_4206D0  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_4206D0  +
cmp byte ptr [eax] 0 +
jz loc_4206D0  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_420729  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_420830  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_420830  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_420AC5  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_420710  +
cmp byte ptr [esi] 0 +
jz loc_420710  +
mov edi ds:dword_50F5A8 +
test edi edi +
jz loc_420C69  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_420797  +
add eax 1 +
mov edi eax +
jz loc_4207D1  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_4207C1  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_420AD2  +
cmp al [esp+6Ch+var_2E] +
jz loc_420AD2  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_420790  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_1 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F5A8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F5A8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F5A8 ebx +
test edx edx +
jnz loc_42071C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_4206DE  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F5A8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F5AC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_420B29  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_4208BE  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_4208BE  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_4208DB  +
jmp loc_4209B1  +
mov edi [edi+18h] +
test edi edi +
jz loc_4209B1  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_4208D0  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warning_1 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_4208D0  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_420B00  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_420AE0  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_420998  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_420998  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_4208DB  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_420B18  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_4209F8  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F5F4 +
mov eax ds:dword_50F60C +
mov ds:dword_50F604 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BE3EC +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BE3E8 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F600 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F5FC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F608 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_420B3A  +
mov eax ds:dword_50F604 +
test eax eax +
jnz loc_420ABD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_420C90  +
jz loc_420ABD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_420B4C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_420753  +
test edi edi +
jnz loc_420710  +
jmp loc_4207D1  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr1_c +
call sub_4184A0  +
jmp loc_42097A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_0 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_42093A  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_0 +
call sub_418450  +
jmp loc_4209D3  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_0 +
call sub_418450  +
jmp loc_42089C  +
mov ds:dword_50F604 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_0 +
call sub_418450  +
jmp loc_420ABD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_420C50  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_0 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_420C50  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_420BCD  +
cmp al 2 +
ja loc_420C50  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_420C00  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_420C58  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_41F040 +
call sub_40AFD0  +
jmp loc_4206AE  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F5A8 eax +
jmp loc_420710  +
mov [esp+6Ch+var_6C] offset aLd_run_path_0 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_4206BF  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_0 +
call sub_418450  +
jmp loc_420ABD  +
***
jmp loc_420CB0  +
mov eax ds:dword_50F5F8 +
test eax eax +
jnz loc_420CC0  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_0 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_420EAB  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_420EA0  +
test byte ptr [ebp+24h] 10h +
jnz loc_420EA0  +
mov ecx [edx] +
test ecx ecx +
jz loc_420EA0  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_420EA0  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_420E90  +
test byte ptr [esi+14h] 1 +
jz loc_420E90  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_420E90  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_420D8F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_420D97  +
and edx 300000h +
jz loc_420D9F  +
cmp esi eax +
jz loc_420EC0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_420D77  +
mov edx [esp+18h] +
test edx edx +
jz loc_420E90  +
mov eax [esp+24h] +
test eax eax +
jz loc_420F25  +
mov eax [esi] +
mov dword ptr [esp] offset aS_32 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_420F19  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_420DE5  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_1 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_29 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_420E90  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_30 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_420EB3  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_420E45  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_1 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_420E21  +
mov edx [ebp+8] +
test edx edx +
jnz loc_420E7A  +
jmp loc_420F50  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_420E78  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_420D42  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_420D00  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_420E45  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_420D9F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_420F57  +
mov ecx ebp +
jmp loc_420F02  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_420F00  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_420D9F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_420DE5  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_31 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_420DBE  +
***
mov edx ebp +
jmp loc_420E81  +
***
mov ebp [esp+28h] +
jmp loc_420F10  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_1 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_1 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_1 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_1 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_1 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_1 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_1 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_42107C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_4210A5  +
test esi esi +
jz loc_421089  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_421091  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_1 +
call sub_418450  +
jmp loc_42107C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_4213D8  +
jle loc_421110  +
cmp eax 133h +
jz loc_4213A4  +
jg loc_421148  +
cmp eax 131h +
jz loc_4212A3  +
cmp eax 132h +
jnz loc_421386  +
mov ds:dword_50F678 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_421390  +
jle loc_4212D0  +
cmp eax 12Eh +
jz loc_421190  +
cmp eax 12Fh +
jnz loc_421386  +
mov ds:dword_50F684 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_421250  +
cmp eax 198h +
jnz loc_421386  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_4 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_421412  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_421142  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_1 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4212B7  +
mov edi offset off_4DFD0A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4212B7  +
mov edi offset unk_4DFD0E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_421440  +
mov edi offset unk_4DFD11 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_421440  +
mov edi offset unk_4DFD14 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4214E5  +
mov edi offset off_4DFD18 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4214E5  +
mov edi offset unk_4DFD1C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42123B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4DFD20 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_421142  +
mov dword_4BE548 10000h +
mov eax 1 +
jmp loc_421142  +
***
mov eax ds:dword_50F624 +
test eax eax +
jz loc_42126B  +
mov [esp] eax +
call free  +
mov ds:dword_50F624 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_421480  +
mov edi offset aNone_4 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_421103  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F624 eax +
mov eax 1 +
jmp loc_421142  +
***
mov ds:dword_50F680 1 +
mov eax 1 +
jmp loc_421142  +
***
mov dword_4BE548 8000h +
mov eax 1 +
jmp loc_421142  +
***
cmp eax 7Ah +
jnz loc_421386  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_1 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_421401  +
mov edi offset aMuldefs_1 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_4213F0  +
mov edi offset aMaxPageSize_1 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_421494  +
mov edi offset aCommonPageSi_1 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_4214F9  +
mov edi offset aStackSize_1 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_421583  +
mov edi offset aExecstack_1 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_4215C7  +
mov edi offset aNoexecstack_1 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_421602  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_421142  +
***
xor eax eax +
jmp loc_421142  +
***
mov dword_4BE54C 0 +
mov eax 1 +
jmp loc_421142  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_421103  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F674 eax +
mov eax 1 +
jmp loc_421142  +
***
mov ds:dword_50F67C 1 +
mov eax 1 +
jmp loc_421142  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_421142  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_421142  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_1 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_421454  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_421142  +
***
mov dword_4BE548 2000h +
mov eax 1 +
jmp loc_421142  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_1 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_42154A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_421142  +
***
mov ds:dword_5141E8 offset aSha1_2 +
mov eax offset aSha1_2 +
jmp loc_42128C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_4214C8  +
lea edx [eax-1] +
test eax edx +
jz loc_421103  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_1 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_421103  +
***
mov dword_4BE548 4000h +
mov eax 1 +
jmp loc_421142  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_42152D  +
lea edx [eax-1] +
test eax edx +
jz loc_421103  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_3 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_421103  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_1 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_421428  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_4 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_421142  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_4215E3  +
test eax eax +
js loc_4215E3  +
test eax eax +
jnz loc_421103  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_421103  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_421142  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_1 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_4215B0  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_1 +
call sub_418450  +
mov eax 1 +
jmp loc_421142  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E0440 +
test edi 1 +
mov eax 0A0h +
jnz loc_4216B8  +
test edi 2 +
jnz loc_4216D7  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_4216A6  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_4216B1  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E0440 +
add edi 1 +
mov esi 4E0441h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_42168E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_42168E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_4217F0  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_421800  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_1 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_42183C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_4217F0  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_4217F0  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_4217D8  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr25_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_421850  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_6 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_42178A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_4217DC  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_1 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_1 +
mov ebx eax +
mov ds:dword_50F68C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F68C +
mov eax [eax+10h] +
test eax eax +
jz loc_4218FB  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F68C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_421910  +
mov [esp+14h+var_14] offset aXPCanNotCrea_1 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F68C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_1 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F688 eax +
jz loc_421953  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F68C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_1 +
call sub_418450  +
jmp loc_421907  +
***
jmp sub_421970  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4219A0  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_4219D0  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_4219CB  +
mov ecx ds:dword_50F68C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_4219C1  +
cmp [ecx+10h] eax +
jnz loc_4219E2  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_4219B0  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_42198C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_421A3D  +
mov eax [ebx+0Ch] +
jmp ds:off_4DFDD8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__7 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_421A80  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_421A04  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_421A18  +
mov ebx [ebx+10h] +
jmp loc_4219FE  +
mov eax [ebx+10h] +
call sub_4219F0  +
mov eax [ebx+14h] +
call sub_4219F0  +
mov ebx [ebx+18h] +
jmp loc_4219FE  +
mov eax [ebx+10h] +
call sub_4219F0  +
jmp loc_421A34  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_421A34  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_1 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_421A34  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_421C40  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_421C11  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_421BF0  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_421B40  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_421B40  +
***
mov dword ptr [esp] offset aPWarning_not_1 +
call sub_418450  +
mov edx 1 +
jmp loc_421BE5  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_421CC4  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_421CBA  +
test byte ptr [ebx+29h] 8 +
jz loc_421CBA  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_421CD0  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_421D19  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_421D98  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_421D19  +
mov dword ptr [esp] offset dword_423050 +
mov ds:dword_50F634 eax +
mov ds:dword_50F630 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F630 +
test ecx ecx +
jnz loc_421CBA  +
mov dword ptr [esp+4] offset dword_50F640 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_421D70  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_421D82  +
mov dword ptr [esp] offset loc_422530 +
mov ds:dword_50F638 0 +
call sub_40D9B0  +
mov eax ds:dword_50F638 +
test eax eax +
jz loc_421DB0  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_1 +
call sub_418450  +
jmp loc_421D2D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_1 +
call sub_418420  +
jmp loc_421D43  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_1 +
call sub_418450  +
jmp loc_421CEC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_421E12  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_421E12  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_421D62  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_2 +
call sub_418450  +
jmp loc_421D62  +
***
mov eax 2 +
jmp loc_421DD3  +
***
mov eax ds:dword_50F638 +
test eax eax +
jz loc_422540  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_42255C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_422562  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_422626  +
mov eax ds:dword_50F640 +
cmp [esp+10h] eax +
jz loc_422642  +
mov eax ds:dword_50F670 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_42255C  +
mov dword ptr [esp+4] offset a_so__1 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_42255C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_42266B  +
mov eax ds:dword_50F670 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_42255C  +
mov eax ds:dword_50F670 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_1 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42255C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_1 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42255C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F644 +
jnz loc_422590  +
test ax ax +
jz loc_422590  +
mov eax [esp+50h] +
mov ds:dword_50F638 eax +
jmp loc_42255C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_4225DC  +
***
jmp sub_422690  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_4226A8  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr25 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_42278B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_4227AE  +
test ds:byte_514824 2 +
jnz loc_4228C6  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_422960  +
mov ecx ds:dword_50F620 +
test ecx ecx +
jnz loc_422817  +
mov esi offset off_4BE400 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_422802  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_422802  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_422802  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BE4D8 +
jb loc_4227D0  +
mov ds:dword_50F620 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_422B32  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_422846  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_422904  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_422840  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_422840  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_422846  +
test byte ptr [eax+29h] 8 +
jnz loc_422846  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_422846  +
test byte ptr [edx+24h] 10h +
jnz loc_422846  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_422840  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_422840  +
test byte ptr [ebx+14h] 1 +
jz loc_4227AE  +
test ebp ebp +
jz loc_422B80  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_422C3C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_1 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_4227AE  +
test [esp+4Ch+var_24] 2001h +
jnz loc_4229F6  +
mov edx offset off_4BE4C0 +
mov eax [edx+8] +
test eax eax +
jz loc_422BCE  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_4227BA  +
xor edi edi +
jmp loc_4229AA  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_422B05  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_4229F2  +
mov edx [eax+14h] +
test edx edx +
jz loc_422AE0  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_422990  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_422AE0  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_422990  +
mov edi esi +
jmp loc_422990  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_422BC5  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_422A50  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_422A25  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BE490 +
jnz loc_422917  +
test ebp ebp +
jnz loc_422A50  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_2 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BE490 +
mov eax esi +
cmp cl al +
jz loc_422917  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BE460 +
jz loc_422917  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BE4A8 +
jnz loc_422917  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BE430 +
jnz loc_422917  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BE448 +
jz loc_422917  +
test ebp ebp +
jnz loc_422D88  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_1 +
mov ecx 4 +
cmps   +
jnz loc_422AC4  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BE478 +
test ebp ebp +
jnz loc_422917  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BE418 +
mov eax offset off_4BE400 +
cmovnz edx eax +
jmp loc_422917  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_422DCA  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warning_2 +
mov ecx 0Dh +
cmps   +
jnz loc_422829  +
mov eax dword_4BE408 +
test eax eax +
jz loc_422829  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_422952  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_1 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_4227AE  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_422C51  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_1 +
jmp loc_4227AE  +
xor edx edx +
xor eax eax +
jmp loc_422922  +
mov eax [edx] +
test eax eax +
jz loc_422C5E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_422922  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_422922  +
mov eax ds:dword_5146F8 +
jmp loc_422922  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_1 +
jmp loc_4227AE  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_1 +
jmp loc_4227AE  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_422DD7  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_422D31  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_422D7C  +
movzx ecx dl +
mov esi offset a_plt_1 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_422D7C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_422CE7  +
test al al +
jz loc_422CEB  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_422CF7  +
test al al +
jz loc_422D4F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_422D26  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_422D26  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_422D60  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_422D4F  +
mov eax [ebp+18h] +
mov edi offset a_rel_1 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_422CA8  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_422D26  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_422D11  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_422DA3  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_422BFB  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_422D68  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_422AB3  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_422AB3  +
jmp loc_422AC4  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_422D70  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_422D70  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_422D70  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_4227BA  +
mov [esp+4Ch+var_20] 0 +
jmp loc_422D70  +
***
jmp sub_422DF0  +
***
sub esp 14h +
mov ebx ds:dword_50F684 +
test ebx ebx +
jnz loc_422E30  +
cmp ds:dword_514834 1 +
jbe loc_422E30  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_422F50  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_422EE0  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_422EF0  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_422EF0  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_422F00  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_422ED1  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_422EF0  +
cmp ebx 6 +
jle loc_422F40  +
sub ebx 1 +
jz loc_422F08  +
mov eax 1 +
jmp loc_422E52  +
mov [esp+14h+var_14] offset aFPMapSection_1 +
call sub_418450  +
jmp loc_422EA8  +
mov [esp+14h+var_14] offset aXP_eh_frame__1 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F684 +
test eax eax +
jz loc_422F1D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_422E94  +
mov [esp+14h+var_14] offset aPFLoopingInM_1 +
call sub_418450  +
mov eax ds:dword_50F684 +
test eax eax +
jnz loc_422EF9  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_422EF9  +
mov [esp+14h+var_14] offset aXPCanNotBuil_1 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_422EC5  +
mov [edx+1Ch] esi +
jmp loc_422EF0  +
mov [esp+14h+var_14] offset aXPCanNotSize_1 +
call sub_418450  +
jmp loc_422E30  +
***
jmp loc_422F70  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F638 +
mov ebx [esp+20h] +
test eax eax +
jz loc_422F94  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_423047  +
mov eax [ebx+8] +
test eax eax +
jz loc_423047  +
mov edx [ebx+10h] +
test edx edx +
jz loc_423047  +
mov ecx ds:dword_50F638 +
test ecx ecx +
jz loc_422FC7  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_423047  +
mov eax [ebx+8] +
mov edx ds:dword_50F670 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_423041  +
test byte ptr [ebx+24h] 4 +
jz loc_423019  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_423019  +
mov edx ds:dword_50F670 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_423041  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_423047  +
mov edx ds:dword_50F670 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_423047  +
mov ds:dword_50F638 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_4235ED  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_42370B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_42316E  +
jmp loc_4232D2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_4232D2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_423160  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_423160  +
cmp byte ptr [eax] 0 +
jz loc_423160  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_4231B9  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_4232C0  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_4232C0  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_423555  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_4231A0  +
cmp byte ptr [esi] 0 +
jz loc_4231A0  +
mov edi ds:dword_50F628 +
test edi edi +
jz loc_4236F9  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_423227  +
add eax 1 +
mov edi eax +
jz loc_423261  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_423251  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_423562  +
cmp al [esp+6Ch+var_2E] +
jz loc_423562  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_423220  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_2 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F628 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F628 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F628 ebx +
test edx edx +
jnz loc_4231AC  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_42316E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F628 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F62C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_4235B9  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_42334E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_42334E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_42336B  +
jmp loc_423441  +
mov edi [edi+18h] +
test edi edi +
jz loc_423441  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_423360  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warning_3 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_423360  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_423590  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_423570  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_423428  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_423428  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_42336B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_4235A8  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_423488  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F674 +
mov eax ds:dword_50F68C +
mov ds:dword_50F684 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BE54C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BE548 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F680 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F67C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F688 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4235CA  +
mov eax ds:dword_50F684 +
test eax eax +
jnz loc_42354D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_423720  +
jz loc_42354D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_4235DC  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_4231E3  +
test edi edi +
jnz loc_4231A0  +
jmp loc_423261  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr25_c +
call sub_4184A0  +
jmp loc_42340A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_1 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_4233CA  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_1 +
call sub_418450  +
jmp loc_423463  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_1 +
call sub_418450  +
jmp loc_42332C  +
mov ds:dword_50F684 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_1 +
call sub_418450  +
jmp loc_42354D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4236E0  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_1 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_4236E0  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_42365D  +
cmp al 2 +
ja loc_4236E0  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_423690  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_4236E8  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_421AD0 +
call sub_40AFD0  +
jmp loc_42313E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F628 eax +
jmp loc_4231A0  +
mov [esp+6Ch+var_6C] offset aLd_run_path_1 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_42314F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_1 +
call sub_418450  +
jmp loc_42354D  +
***
jmp loc_423740  +
mov eax ds:dword_50F678 +
test eax eax +
jnz loc_423750  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_1 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_42393B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_423930  +
test byte ptr [ebp+24h] 10h +
jnz loc_423930  +
mov ecx [edx] +
test ecx ecx +
jz loc_423930  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_423930  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_423920  +
test byte ptr [esi+14h] 1 +
jz loc_423920  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_423920  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_42381F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_423827  +
and edx 300000h +
jz loc_42382F  +
cmp esi eax +
jz loc_423950  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_423807  +
mov edx [esp+18h] +
test edx edx +
jz loc_423920  +
mov eax [esp+24h] +
test eax eax +
jz loc_4239B5  +
mov eax [esi] +
mov dword ptr [esp] offset aS_36 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_4239A9  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_423875  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_2 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_33 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_423920  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_34 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_423943  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_4238D5  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_2 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_4238B1  +
mov edx [ebp+8] +
test edx edx +
jnz loc_42390A  +
jmp loc_4239E0  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_423908  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_4237D2  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_423790  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_4238D5  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_42382F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_4239E7  +
mov ecx ebp +
jmp loc_423992  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_423990  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_42382F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_423875  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_35 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_42384E  +
***
mov edx ebp +
jmp loc_423911  +
***
mov ebp [esp+28h] +
jmp loc_4239A0  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_2 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_2 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_2 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_2 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_2 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_2 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_2 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_423B0C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_423B35  +
test esi esi +
jz loc_423B19  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_423B21  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_2 +
call sub_418450  +
jmp loc_423B0C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_423E68  +
jle loc_423BA0  +
cmp eax 133h +
jz loc_423E34  +
jg loc_423BD8  +
cmp eax 131h +
jz loc_423D33  +
cmp eax 132h +
jnz loc_423E16  +
mov ds:dword_50F6F8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_423E20  +
jle loc_423D60  +
cmp eax 12Eh +
jz loc_423C20  +
cmp eax 12Fh +
jnz loc_423E16  +
mov ds:dword_50F704 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_423CE0  +
cmp eax 198h +
jnz loc_423E16  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_5 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_423EA2  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_423BD2  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_2 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_423D47  +
mov edi offset off_4E0B0A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_423D47  +
mov edi offset unk_4E0B0E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_423ED0  +
mov edi offset unk_4E0B11 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_423ED0  +
mov edi offset unk_4E0B14 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_423F75  +
mov edi offset off_4E0B18 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_423F75  +
mov edi offset unk_4E0B1C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_423CCB  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E0B20 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_423BD2  +
mov dword_4BE6A8 10000h +
mov eax 1 +
jmp loc_423BD2  +
***
mov eax ds:dword_50F6A4 +
test eax eax +
jz loc_423CFB  +
mov [esp] eax +
call free  +
mov ds:dword_50F6A4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_423F10  +
mov edi offset aNone_5 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_423B93  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F6A4 eax +
mov eax 1 +
jmp loc_423BD2  +
***
mov ds:dword_50F700 1 +
mov eax 1 +
jmp loc_423BD2  +
***
mov dword_4BE6A8 8000h +
mov eax 1 +
jmp loc_423BD2  +
***
cmp eax 7Ah +
jnz loc_423E16  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_2 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_423E91  +
mov edi offset aMuldefs_2 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_423E80  +
mov edi offset aMaxPageSize_2 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_423F24  +
mov edi offset aCommonPageSi_2 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_423F89  +
mov edi offset aStackSize_2 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_424013  +
mov edi offset aExecstack_2 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_424057  +
mov edi offset aNoexecstack_2 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_424092  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_423BD2  +
***
xor eax eax +
jmp loc_423BD2  +
***
mov dword_4BE6AC 0 +
mov eax 1 +
jmp loc_423BD2  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_423B93  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F6F4 eax +
mov eax 1 +
jmp loc_423BD2  +
***
mov ds:dword_50F6FC 1 +
mov eax 1 +
jmp loc_423BD2  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_423BD2  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_423BD2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_2 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_423EE4  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_423BD2  +
***
mov dword_4BE6A8 2000h +
mov eax 1 +
jmp loc_423BD2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_2 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_423FDA  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_423BD2  +
***
mov ds:dword_5141E8 offset aSha1_3 +
mov eax offset aSha1_3 +
jmp loc_423D1C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_423F58  +
lea edx [eax-1] +
test eax edx +
jz loc_423B93  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_2 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_423B93  +
***
mov dword_4BE6A8 4000h +
mov eax 1 +
jmp loc_423BD2  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_423FBD  +
lea edx [eax-1] +
test eax edx +
jz loc_423B93  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_5 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_423B93  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_2 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_423EB8  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_6 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_423BD2  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_424073  +
test eax eax +
js loc_424073  +
test eax eax +
jnz loc_423B93  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_423B93  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_423BD2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_2 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_424040  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_2 +
call sub_418450  +
mov eax 1 +
jmp loc_423BD2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E1240 +
test edi 1 +
mov eax 0A0h +
jnz loc_424148  +
test edi 2 +
jnz loc_424167  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_424136  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_424141  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E1240 +
add edi 1 +
mov esi 4E1241h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_42411E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_42411E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_424280  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_424290  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_2 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_4242CC  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_424280  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_424280  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_424268  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr3_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_4242E0  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_7 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_42421A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_42426C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_2 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_2 +
mov ebx eax +
mov ds:dword_50F70C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F70C +
mov eax [eax+10h] +
test eax eax +
jz loc_42438B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F70C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_4243A0  +
mov [esp+14h+var_14] offset aXPCanNotCrea_2 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F70C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_2 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F708 eax +
jz loc_4243E3  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F70C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_2 +
call sub_418450  +
jmp loc_424397  +
***
jmp sub_424400  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_424430  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_424460  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_42445B  +
mov ecx ds:dword_50F70C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_424451  +
cmp [ecx+10h] eax +
jnz loc_424472  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_424440  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_42441C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_4244CD  +
mov eax [ebx+0Ch] +
jmp ds:off_4E0BD8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__8 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_424510  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_424494  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_4244A8  +
mov ebx [ebx+10h] +
jmp loc_42448E  +
mov eax [ebx+10h] +
call sub_424480  +
mov eax [ebx+14h] +
call sub_424480  +
mov ebx [ebx+18h] +
jmp loc_42448E  +
mov eax [ebx+10h] +
call sub_424480  +
jmp loc_4244C4  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_4244C4  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_2 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_4244C4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_4246D0  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_4246A1  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_424680  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_4245D0  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_4245D0  +
***
mov dword ptr [esp] offset aPWarning_not_2 +
call sub_418450  +
mov edx 1 +
jmp loc_424675  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_424754  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_42474A  +
test byte ptr [ebx+29h] 8 +
jz loc_42474A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_424760  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_4247A9  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_424828  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_4247A9  +
mov dword ptr [esp] offset dword_425AE0 +
mov ds:dword_50F6B4 eax +
mov ds:dword_50F6B0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F6B0 +
test ecx ecx +
jnz loc_42474A  +
mov dword ptr [esp+4] offset dword_50F6C0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_424800  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_424812  +
mov dword ptr [esp] offset loc_424FC0 +
mov ds:dword_50F6B8 0 +
call sub_40D9B0  +
mov eax ds:dword_50F6B8 +
test eax eax +
jz loc_424840  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_2 +
call sub_418450  +
jmp loc_4247BD  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_2 +
call sub_418420  +
jmp loc_4247D3  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_2 +
call sub_418450  +
jmp loc_42477C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_4248A2  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_4248A2  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_4247F2  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_3 +
call sub_418450  +
jmp loc_4247F2  +
***
mov eax 2 +
jmp loc_424863  +
***
mov eax ds:dword_50F6B8 +
test eax eax +
jz loc_424FD0  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_424FEC  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_424FF2  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_4250B6  +
mov eax ds:dword_50F6C0 +
cmp [esp+10h] eax +
jz loc_4250D2  +
mov eax ds:dword_50F6F0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_424FEC  +
mov dword ptr [esp+4] offset a_so__2 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_424FEC  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_4250FB  +
mov eax ds:dword_50F6F0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_424FEC  +
mov eax ds:dword_50F6F0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_2 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_424FEC  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_2 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_424FEC  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F6C4 +
jnz loc_425020  +
test ax ax +
jz loc_425020  +
mov eax [esp+50h] +
mov ds:dword_50F6B8 eax +
jmp loc_424FEC  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_42506C  +
***
jmp sub_425120  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_425138  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr3 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_42521B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_42523E  +
test ds:byte_514824 2 +
jnz loc_425356  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_4253F0  +
mov ecx ds:dword_50F6A0 +
test ecx ecx +
jnz loc_4252A7  +
mov esi offset off_4BE560 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_425292  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_425292  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_425292  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BE638 +
jb loc_425260  +
mov ds:dword_50F6A0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_4255C2  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_4252D6  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_425394  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_4252D0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_4252D0  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_4252D6  +
test byte ptr [eax+29h] 8 +
jnz loc_4252D6  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_4252D6  +
test byte ptr [edx+24h] 10h +
jnz loc_4252D6  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_4252D0  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_4252D0  +
test byte ptr [ebx+14h] 1 +
jz loc_42523E  +
test ebp ebp +
jz loc_425610  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_4256CC  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_2 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_42523E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_425486  +
mov edx offset off_4BE620 +
mov eax [edx+8] +
test eax eax +
jz loc_42565E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_42524A  +
xor edi edi +
jmp loc_42543A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_425595  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_425482  +
mov edx [eax+14h] +
test edx edx +
jz loc_425570  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_425420  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_425570  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_425420  +
mov edi esi +
jmp loc_425420  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_425655  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_4254E0  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_4254B5  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BE5F0 +
jnz loc_4253A7  +
test ebp ebp +
jnz loc_4254E0  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_3 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BE5F0 +
mov eax esi +
cmp cl al +
jz loc_4253A7  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BE5C0 +
jz loc_4253A7  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BE608 +
jnz loc_4253A7  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BE590 +
jnz loc_4253A7  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BE5A8 +
jz loc_4253A7  +
test ebp ebp +
jnz loc_425818  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_2 +
mov ecx 4 +
cmps   +
jnz loc_425554  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BE5D8 +
test ebp ebp +
jnz loc_4253A7  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BE578 +
mov eax offset off_4BE560 +
cmovnz edx eax +
jmp loc_4253A7  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_42585A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warning_4 +
mov ecx 0Dh +
cmps   +
jnz loc_4252B9  +
mov eax dword_4BE568 +
test eax eax +
jz loc_4252B9  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_4253E2  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_2 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_42523E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_4256E1  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_2 +
jmp loc_42523E  +
xor edx edx +
xor eax eax +
jmp loc_4253B2  +
mov eax [edx] +
test eax eax +
jz loc_4256EE  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_4253B2  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_4253B2  +
mov eax ds:dword_5146F8 +
jmp loc_4253B2  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_2 +
jmp loc_42523E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_2 +
jmp loc_42523E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_425867  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_4257C1  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_42580C  +
movzx ecx dl +
mov esi offset a_plt_2 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_42580C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_425777  +
test al al +
jz loc_42577B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_425787  +
test al al +
jz loc_4257DF  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_4257B6  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_4257B6  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_4257F0  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_4257DF  +
mov eax [ebp+18h] +
mov edi offset a_rel_2 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_425738  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_4257B6  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_4257A1  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_425833  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_42568B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_4257F8  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_425543  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_425543  +
jmp loc_425554  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_425800  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_425800  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_425800  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_42524A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_425800  +
***
jmp sub_425880  +
***
sub esp 14h +
mov ebx ds:dword_50F704 +
test ebx ebx +
jnz loc_4258C0  +
cmp ds:dword_514834 1 +
jbe loc_4258C0  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_4259E0  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_425970  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_425980  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_425980  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_425990  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_425961  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_425980  +
cmp ebx 6 +
jle loc_4259D0  +
sub ebx 1 +
jz loc_425998  +
mov eax 1 +
jmp loc_4258E2  +
mov [esp+14h+var_14] offset aFPMapSection_2 +
call sub_418450  +
jmp loc_425938  +
mov [esp+14h+var_14] offset aXP_eh_frame__2 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F704 +
test eax eax +
jz loc_4259AD  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_425924  +
mov [esp+14h+var_14] offset aPFLoopingInM_2 +
call sub_418450  +
mov eax ds:dword_50F704 +
test eax eax +
jnz loc_425989  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_425989  +
mov [esp+14h+var_14] offset aXPCanNotBuil_2 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_425955  +
mov [edx+1Ch] esi +
jmp loc_425980  +
mov [esp+14h+var_14] offset aXPCanNotSize_2 +
call sub_418450  +
jmp loc_4258C0  +
***
jmp loc_425A00  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F6B8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_425A24  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_425AD7  +
mov eax [ebx+8] +
test eax eax +
jz loc_425AD7  +
mov edx [ebx+10h] +
test edx edx +
jz loc_425AD7  +
mov ecx ds:dword_50F6B8 +
test ecx ecx +
jz loc_425A57  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_425AD7  +
mov eax [ebx+8] +
mov edx ds:dword_50F6F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_425AD1  +
test byte ptr [ebx+24h] 4 +
jz loc_425AA9  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_425AA9  +
mov edx ds:dword_50F6F0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_425AD1  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_425AD7  +
mov edx ds:dword_50F6F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_425AD7  +
mov ds:dword_50F6B8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_42607D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_42619B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_425BFE  +
jmp loc_425D62  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_425D62  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_425BF0  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_425BF0  +
cmp byte ptr [eax] 0 +
jz loc_425BF0  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_425C49  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_425D50  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_425D50  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_425FE5  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_425C30  +
cmp byte ptr [esi] 0 +
jz loc_425C30  +
mov edi ds:dword_50F6A8 +
test edi edi +
jz loc_426189  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_425CB7  +
add eax 1 +
mov edi eax +
jz loc_425CF1  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_425CE1  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_425FF2  +
cmp al [esp+6Ch+var_2E] +
jz loc_425FF2  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_425CB0  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_3 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F6A8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F6A8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F6A8 ebx +
test edx edx +
jnz loc_425C3C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_425BFE  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F6A8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F6AC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_426049  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_425DDE  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_425DDE  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_425DFB  +
jmp loc_425ED1  +
mov edi [edi+18h] +
test edi edi +
jz loc_425ED1  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_425DF0  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warning_5 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_425DF0  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_426020  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_426000  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_425EB8  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_425EB8  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_425DFB  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_426038  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_425F18  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F6F4 +
mov eax ds:dword_50F70C +
mov ds:dword_50F704 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BE6AC +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BE6A8 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F700 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F6FC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F708 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_42605A  +
mov eax ds:dword_50F704 +
test eax eax +
jnz loc_425FDD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_4261B0  +
jz loc_425FDD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_42606C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_425C73  +
test edi edi +
jnz loc_425C30  +
jmp loc_425CF1  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr3_c +
call sub_4184A0  +
jmp loc_425E9A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_2 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_425E5A  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_2 +
call sub_418450  +
jmp loc_425EF3  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_2 +
call sub_418450  +
jmp loc_425DBC  +
mov ds:dword_50F704 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_2 +
call sub_418450  +
jmp loc_425FDD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_426170  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_2 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_426170  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_4260ED  +
cmp al 2 +
ja loc_426170  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_426120  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_426178  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_424560 +
call sub_40AFD0  +
jmp loc_425BCE  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F6A8 eax +
jmp loc_425C30  +
mov [esp+6Ch+var_6C] offset aLd_run_path_2 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_425BDF  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_2 +
call sub_418450  +
jmp loc_425FDD  +
***
jmp loc_4261D0  +
mov eax ds:dword_50F6F8 +
test eax eax +
jnz loc_4261E0  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_2 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_4263CB  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_4263C0  +
test byte ptr [ebp+24h] 10h +
jnz loc_4263C0  +
mov ecx [edx] +
test ecx ecx +
jz loc_4263C0  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_4263C0  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_4263B0  +
test byte ptr [esi+14h] 1 +
jz loc_4263B0  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_4263B0  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_4262AF  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_4262B7  +
and edx 300000h +
jz loc_4262BF  +
cmp esi eax +
jz loc_4263E0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_426297  +
mov edx [esp+18h] +
test edx edx +
jz loc_4263B0  +
mov eax [esp+24h] +
test eax eax +
jz loc_426445  +
mov eax [esi] +
mov dword ptr [esp] offset aS_40 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_426439  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_426305  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_3 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_37 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_4263B0  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_38 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_4263D3  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_426365  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_3 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_426341  +
mov edx [ebp+8] +
test edx edx +
jnz loc_42639A  +
jmp loc_426470  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_426398  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_426262  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_426220  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_426365  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_4262BF  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_426477  +
mov ecx ebp +
jmp loc_426422  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_426420  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_4262BF  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_426305  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_39 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_4262DE  +
***
mov edx ebp +
jmp loc_4263A1  +
***
mov ebp [esp+28h] +
jmp loc_426430  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_3 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_3 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_3 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_3 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_3 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_3 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_3 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_42659C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_4265C5  +
test esi esi +
jz loc_4265A9  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_4265B1  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_3 +
call sub_418450  +
jmp loc_42659C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_4268F8  +
jle loc_426630  +
cmp eax 133h +
jz loc_4268C4  +
jg loc_426668  +
cmp eax 131h +
jz loc_4267C3  +
cmp eax 132h +
jnz loc_4268A6  +
mov ds:dword_50F778 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_4268B0  +
jle loc_4267F0  +
cmp eax 12Eh +
jz loc_4266B0  +
cmp eax 12Fh +
jnz loc_4268A6  +
mov ds:dword_50F784 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_426770  +
cmp eax 198h +
jnz loc_4268A6  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_6 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_426932  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_426662  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_3 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4267D7  +
mov edi offset off_4E190A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4267D7  +
mov edi offset unk_4E190E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_426960  +
mov edi offset unk_4E1911 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_426960  +
mov edi offset unk_4E1914 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_426A05  +
mov edi offset off_4E1918 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_426A05  +
mov edi offset unk_4E191C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42675B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E1920 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_426662  +
mov dword_4BE808 10000h +
mov eax 1 +
jmp loc_426662  +
***
mov eax ds:dword_50F724 +
test eax eax +
jz loc_42678B  +
mov [esp] eax +
call free  +
mov ds:dword_50F724 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_4269A0  +
mov edi offset aNone_6 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_426623  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F724 eax +
mov eax 1 +
jmp loc_426662  +
***
mov ds:dword_50F780 1 +
mov eax 1 +
jmp loc_426662  +
***
mov dword_4BE808 8000h +
mov eax 1 +
jmp loc_426662  +
***
cmp eax 7Ah +
jnz loc_4268A6  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_3 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_426921  +
mov edi offset aMuldefs_3 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_426910  +
mov edi offset aMaxPageSize_3 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_4269B4  +
mov edi offset aCommonPageSi_3 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_426A19  +
mov edi offset aStackSize_3 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_426AA3  +
mov edi offset aExecstack_3 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_426AE7  +
mov edi offset aNoexecstack_3 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_426B22  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_426662  +
***
xor eax eax +
jmp loc_426662  +
***
mov dword_4BE80C 0 +
mov eax 1 +
jmp loc_426662  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_426623  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F774 eax +
mov eax 1 +
jmp loc_426662  +
***
mov ds:dword_50F77C 1 +
mov eax 1 +
jmp loc_426662  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_426662  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_426662  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_3 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_426974  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_426662  +
***
mov dword_4BE808 2000h +
mov eax 1 +
jmp loc_426662  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_3 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_426A6A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_426662  +
***
mov ds:dword_5141E8 offset aSha1_4 +
mov eax offset aSha1_4 +
jmp loc_4267AC  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_4269E8  +
lea edx [eax-1] +
test eax edx +
jz loc_426623  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_3 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_426623  +
***
mov dword_4BE808 4000h +
mov eax 1 +
jmp loc_426662  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_426A4D  +
lea edx [eax-1] +
test eax edx +
jz loc_426623  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_7 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_426623  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_3 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_426948  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_8 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_426662  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_426B03  +
test eax eax +
js loc_426B03  +
test eax eax +
jnz loc_426623  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_426623  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_426662  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_3 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_426AD0  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_3 +
call sub_418450  +
mov eax 1 +
jmp loc_426662  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E2040 +
test edi 1 +
mov eax 0A0h +
jnz loc_426BD8  +
test edi 2 +
jnz loc_426BF7  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_426BC6  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_426BD1  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E2040 +
add edi 1 +
mov esi 4E2041h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_426BAE  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_426BAE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_426D10  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_426D20  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_3 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_426D5C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_426D10  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_426D10  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_426CF8  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr31_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_426D70  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_8 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_426CAA  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_426CFC  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_3 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_3 +
mov ebx eax +
mov ds:dword_50F78C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F78C +
mov eax [eax+10h] +
test eax eax +
jz loc_426E1B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F78C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_426E30  +
mov [esp+14h+var_14] offset aXPCanNotCrea_3 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F78C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_3 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F788 eax +
jz loc_426E73  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F78C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_3 +
call sub_418450  +
jmp loc_426E27  +
***
jmp sub_426E90  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_426EC0  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_426EF0  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_426EEB  +
mov ecx ds:dword_50F78C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_426EE1  +
cmp [ecx+10h] eax +
jnz loc_426F02  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_426ED0  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_426EAC  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_426F5D  +
mov eax [ebx+0Ch] +
jmp ds:off_4E19D8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__9 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_426FA0  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_426F24  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_426F38  +
mov ebx [ebx+10h] +
jmp loc_426F1E  +
mov eax [ebx+10h] +
call sub_426F10  +
mov eax [ebx+14h] +
call sub_426F10  +
mov ebx [ebx+18h] +
jmp loc_426F1E  +
mov eax [ebx+10h] +
call sub_426F10  +
jmp loc_426F54  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_426F54  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_3 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_426F54  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_427160  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_427131  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_427110  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_427060  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_427060  +
***
mov dword ptr [esp] offset aPWarning_not_3 +
call sub_418450  +
mov edx 1 +
jmp loc_427105  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_4271E4  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_4271DA  +
test byte ptr [ebx+29h] 8 +
jz loc_4271DA  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_4271F0  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_427239  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_4272B8  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_427239  +
mov dword ptr [esp] offset dword_428570 +
mov ds:dword_50F734 eax +
mov ds:dword_50F730 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F730 +
test ecx ecx +
jnz loc_4271DA  +
mov dword ptr [esp+4] offset dword_50F740 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_427290  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_4272A2  +
mov dword ptr [esp] offset loc_427A50 +
mov ds:dword_50F738 0 +
call sub_40D9B0  +
mov eax ds:dword_50F738 +
test eax eax +
jz loc_4272D0  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_3 +
call sub_418450  +
jmp loc_42724D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_3 +
call sub_418420  +
jmp loc_427263  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_3 +
call sub_418450  +
jmp loc_42720C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_427332  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_427332  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_427282  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_4 +
call sub_418450  +
jmp loc_427282  +
***
mov eax 2 +
jmp loc_4272F3  +
***
mov eax ds:dword_50F738 +
test eax eax +
jz loc_427A60  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_427A7C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_427A82  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_427B46  +
mov eax ds:dword_50F740 +
cmp [esp+10h] eax +
jz loc_427B62  +
mov eax ds:dword_50F770 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_427A7C  +
mov dword ptr [esp+4] offset a_so__3 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_427A7C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_427B8B  +
mov eax ds:dword_50F770 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_427A7C  +
mov eax ds:dword_50F770 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_3 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_427A7C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_3 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_427A7C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F744 +
jnz loc_427AB0  +
test ax ax +
jz loc_427AB0  +
mov eax [esp+50h] +
mov ds:dword_50F738 eax +
jmp loc_427A7C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_427AFC  +
***
jmp sub_427BB0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_427BC8  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr31 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_427CAB  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_427CCE  +
test ds:byte_514824 2 +
jnz loc_427DE6  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_427E80  +
mov ecx ds:dword_50F720 +
test ecx ecx +
jnz loc_427D37  +
mov esi offset off_4BE6C0 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_427D22  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_427D22  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_427D22  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BE798 +
jb loc_427CF0  +
mov ds:dword_50F720 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_428052  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_427D66  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_427E24  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_427D60  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_427D60  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_427D66  +
test byte ptr [eax+29h] 8 +
jnz loc_427D66  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_427D66  +
test byte ptr [edx+24h] 10h +
jnz loc_427D66  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_427D60  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_427D60  +
test byte ptr [ebx+14h] 1 +
jz loc_427CCE  +
test ebp ebp +
jz loc_4280A0  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_42815C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_3 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_427CCE  +
test [esp+4Ch+var_24] 2001h +
jnz loc_427F16  +
mov edx offset off_4BE780 +
mov eax [edx+8] +
test eax eax +
jz loc_4280EE  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_427CDA  +
xor edi edi +
jmp loc_427ECA  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_428025  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_427F12  +
mov edx [eax+14h] +
test edx edx +
jz loc_428000  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_427EB0  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_428000  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_427EB0  +
mov edi esi +
jmp loc_427EB0  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_4280E5  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_427F70  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_427F45  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BE750 +
jnz loc_427E37  +
test ebp ebp +
jnz loc_427F70  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_4 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BE750 +
mov eax esi +
cmp cl al +
jz loc_427E37  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BE720 +
jz loc_427E37  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BE768 +
jnz loc_427E37  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BE6F0 +
jnz loc_427E37  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BE708 +
jz loc_427E37  +
test ebp ebp +
jnz loc_4282A8  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_3 +
mov ecx 4 +
cmps   +
jnz loc_427FE4  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BE738 +
test ebp ebp +
jnz loc_427E37  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BE6D8 +
mov eax offset off_4BE6C0 +
cmovnz edx eax +
jmp loc_427E37  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_4282EA  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warning_6 +
mov ecx 0Dh +
cmps   +
jnz loc_427D49  +
mov eax dword_4BE6C8 +
test eax eax +
jz loc_427D49  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_427E72  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_3 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_427CCE  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_428171  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_3 +
jmp loc_427CCE  +
xor edx edx +
xor eax eax +
jmp loc_427E42  +
mov eax [edx] +
test eax eax +
jz loc_42817E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_427E42  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_427E42  +
mov eax ds:dword_5146F8 +
jmp loc_427E42  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_3 +
jmp loc_427CCE  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_3 +
jmp loc_427CCE  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_4282F7  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_428251  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_42829C  +
movzx ecx dl +
mov esi offset a_plt_3 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_42829C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_428207  +
test al al +
jz loc_42820B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_428217  +
test al al +
jz loc_42826F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_428246  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_428246  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_428280  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_42826F  +
mov eax [ebp+18h] +
mov edi offset a_rel_3 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4281C8  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_428246  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_428231  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_4282C3  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_42811B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_428288  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_427FD3  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_427FD3  +
jmp loc_427FE4  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_428290  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_428290  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_428290  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_427CDA  +
mov [esp+4Ch+var_20] 0 +
jmp loc_428290  +
***
jmp sub_428310  +
***
sub esp 14h +
mov ebx ds:dword_50F784 +
test ebx ebx +
jnz loc_428350  +
cmp ds:dword_514834 1 +
jbe loc_428350  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_428470  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_428400  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_428410  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_428410  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_428420  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_4283F1  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_428410  +
cmp ebx 6 +
jle loc_428460  +
sub ebx 1 +
jz loc_428428  +
mov eax 1 +
jmp loc_428372  +
mov [esp+14h+var_14] offset aFPMapSection_3 +
call sub_418450  +
jmp loc_4283C8  +
mov [esp+14h+var_14] offset aXP_eh_frame__3 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F784 +
test eax eax +
jz loc_42843D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_4283B4  +
mov [esp+14h+var_14] offset aPFLoopingInM_3 +
call sub_418450  +
mov eax ds:dword_50F784 +
test eax eax +
jnz loc_428419  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_428419  +
mov [esp+14h+var_14] offset aXPCanNotBuil_3 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_4283E5  +
mov [edx+1Ch] esi +
jmp loc_428410  +
mov [esp+14h+var_14] offset aXPCanNotSize_3 +
call sub_418450  +
jmp loc_428350  +
***
jmp loc_428490  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F738 +
mov ebx [esp+20h] +
test eax eax +
jz loc_4284B4  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_428567  +
mov eax [ebx+8] +
test eax eax +
jz loc_428567  +
mov edx [ebx+10h] +
test edx edx +
jz loc_428567  +
mov ecx ds:dword_50F738 +
test ecx ecx +
jz loc_4284E7  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_428567  +
mov eax [ebx+8] +
mov edx ds:dword_50F770 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_428561  +
test byte ptr [ebx+24h] 4 +
jz loc_428539  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_428539  +
mov edx ds:dword_50F770 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_428561  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_428567  +
mov edx ds:dword_50F770 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_428567  +
mov ds:dword_50F738 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_428B0D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_428C2B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_42868E  +
jmp loc_4287F2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_4287F2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_428680  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_428680  +
cmp byte ptr [eax] 0 +
jz loc_428680  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_4286D9  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_4287E0  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_4287E0  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_428A75  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_4286C0  +
cmp byte ptr [esi] 0 +
jz loc_4286C0  +
mov edi ds:dword_50F728 +
test edi edi +
jz loc_428C19  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_428747  +
add eax 1 +
mov edi eax +
jz loc_428781  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_428771  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_428A82  +
cmp al [esp+6Ch+var_2E] +
jz loc_428A82  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_428740  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_4 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F728 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F728 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F728 ebx +
test edx edx +
jnz loc_4286CC  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_42868E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F728 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F72C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_428AD9  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_42886E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_42886E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_42888B  +
jmp loc_428961  +
mov edi [edi+18h] +
test edi edi +
jz loc_428961  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_428880  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warning_7 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_428880  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_428AB0  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_428A90  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_428948  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_428948  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_42888B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_428AC8  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_4289A8  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F774 +
mov eax ds:dword_50F78C +
mov ds:dword_50F784 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BE80C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BE808 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F780 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F77C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F788 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_428AEA  +
mov eax ds:dword_50F784 +
test eax eax +
jnz loc_428A6D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_428C40  +
jz loc_428A6D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_428AFC  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_428703  +
test edi edi +
jnz loc_4286C0  +
jmp loc_428781  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr31_c +
call sub_4184A0  +
jmp loc_42892A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_3 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_4288EA  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_3 +
call sub_418450  +
jmp loc_428983  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_3 +
call sub_418450  +
jmp loc_42884C  +
mov ds:dword_50F784 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_3 +
call sub_418450  +
jmp loc_428A6D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_428C00  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_3 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_428C00  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_428B7D  +
cmp al 2 +
ja loc_428C00  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_428BB0  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_428C08  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_426FF0 +
call sub_40AFD0  +
jmp loc_42865E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F728 eax +
jmp loc_4286C0  +
mov [esp+6Ch+var_6C] offset aLd_run_path_3 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_42866F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_3 +
call sub_418450  +
jmp loc_428A6D  +
***
jmp loc_428C60  +
mov eax ds:dword_50F778 +
test eax eax +
jnz loc_428C70  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_3 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_428E5B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_428E50  +
test byte ptr [ebp+24h] 10h +
jnz loc_428E50  +
mov ecx [edx] +
test ecx ecx +
jz loc_428E50  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_428E50  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_428E40  +
test byte ptr [esi+14h] 1 +
jz loc_428E40  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_428E40  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_428D3F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_428D47  +
and edx 300000h +
jz loc_428D4F  +
cmp esi eax +
jz loc_428E70  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_428D27  +
mov edx [esp+18h] +
test edx edx +
jz loc_428E40  +
mov eax [esp+24h] +
test eax eax +
jz loc_428ED5  +
mov eax [esi] +
mov dword ptr [esp] offset aS_44 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_428EC9  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_428D95  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_4 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_41 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_428E40  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_42 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_428E63  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_428DF5  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_4 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_428DD1  +
mov edx [ebp+8] +
test edx edx +
jnz loc_428E2A  +
jmp loc_428F00  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_428E28  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_428CF2  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_428CB0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_428DF5  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_428D4F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_428F07  +
mov ecx ebp +
jmp loc_428EB2  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_428EB0  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_428D4F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_428D95  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_43 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_428D6E  +
***
mov edx ebp +
jmp loc_428E31  +
***
mov ebp [esp+28h] +
jmp loc_428EC0  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_4 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_4 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_4 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_4 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_4 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_4 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_4 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_42902C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_429055  +
test esi esi +
jz loc_429039  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_429041  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_4 +
call sub_418450  +
jmp loc_42902C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_429388  +
jle loc_4290C0  +
cmp eax 133h +
jz loc_429354  +
jg loc_4290F8  +
cmp eax 131h +
jz loc_429253  +
cmp eax 132h +
jnz loc_429336  +
mov ds:dword_50F7F8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_429340  +
jle loc_429280  +
cmp eax 12Eh +
jz loc_429140  +
cmp eax 12Fh +
jnz loc_429336  +
mov ds:dword_50F804 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_429200  +
cmp eax 198h +
jnz loc_429336  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_7 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4293C2  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_4290F2  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_4 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_429267  +
mov edi offset off_4E270A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_429267  +
mov edi offset unk_4E270E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4293F0  +
mov edi offset unk_4E2711 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4293F0  +
mov edi offset unk_4E2714 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_429495  +
mov edi offset off_4E2718 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_429495  +
mov edi offset unk_4E271C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4291EB  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E2720 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_4290F2  +
mov dword_4BE968 10000h +
mov eax 1 +
jmp loc_4290F2  +
***
mov eax ds:dword_50F7A4 +
test eax eax +
jz loc_42921B  +
mov [esp] eax +
call free  +
mov ds:dword_50F7A4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_429430  +
mov edi offset aNone_7 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_4290B3  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F7A4 eax +
mov eax 1 +
jmp loc_4290F2  +
***
mov ds:dword_50F800 1 +
mov eax 1 +
jmp loc_4290F2  +
***
mov dword_4BE968 8000h +
mov eax 1 +
jmp loc_4290F2  +
***
cmp eax 7Ah +
jnz loc_429336  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_4 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_4293B1  +
mov edi offset aMuldefs_4 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_4293A0  +
mov edi offset aMaxPageSize_4 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_429444  +
mov edi offset aCommonPageSi_4 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_4294A9  +
mov edi offset aStackSize_4 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_429533  +
mov edi offset aExecstack_4 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_429577  +
mov edi offset aNoexecstack_4 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_4295B2  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_4290F2  +
***
xor eax eax +
jmp loc_4290F2  +
***
mov dword_4BE96C 0 +
mov eax 1 +
jmp loc_4290F2  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_4290B3  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F7F4 eax +
mov eax 1 +
jmp loc_4290F2  +
***
mov ds:dword_50F7FC 1 +
mov eax 1 +
jmp loc_4290F2  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_4290F2  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_4290F2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_4 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_429404  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_4290F2  +
***
mov dword_4BE968 2000h +
mov eax 1 +
jmp loc_4290F2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_4 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4294FA  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_4290F2  +
***
mov ds:dword_5141E8 offset aSha1_5 +
mov eax offset aSha1_5 +
jmp loc_42923C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_429478  +
lea edx [eax-1] +
test eax edx +
jz loc_4290B3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_4 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4290B3  +
***
mov dword_4BE968 4000h +
mov eax 1 +
jmp loc_4290F2  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_4294DD  +
lea edx [eax-1] +
test eax edx +
jz loc_4290B3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCom_9 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4290B3  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_4 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_4293D8  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_10 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_4290F2  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_429593  +
test eax eax +
js loc_429593  +
test eax eax +
jnz loc_4290B3  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_4290B3  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_4290F2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_4 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_429560  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_4 +
call sub_418450  +
mov eax 1 +
jmp loc_4290F2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E2E40 +
test edi 1 +
mov eax 0A0h +
jnz loc_429668  +
test edi 2 +
jnz loc_429687  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_429656  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_429661  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E2E40 +
add edi 1 +
mov esi 4E2E41h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_42963E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_42963E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_4297A0  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_4297B0  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_4 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_4297EC  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_4297A0  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_4297A0  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_429788  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr35_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_429800  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_9 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_42973A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_42978C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_4 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_4 +
mov ebx eax +
mov ds:dword_50F80C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F80C +
mov eax [eax+10h] +
test eax eax +
jz loc_4298AB  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F80C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_4298C0  +
mov [esp+14h+var_14] offset aXPCanNotCrea_4 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F80C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_4 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F808 eax +
jz loc_429903  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F80C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_4 +
call sub_418450  +
jmp loc_4298B7  +
***
jmp sub_429920  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_429950  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_429980  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_42997B  +
mov ecx ds:dword_50F80C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_429971  +
cmp [ecx+10h] eax +
jnz loc_429992  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_429960  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_42993C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_4299ED  +
mov eax [ebx+0Ch] +
jmp ds:off_4E27D8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__10 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_429A30  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_4299B4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_4299C8  +
mov ebx [ebx+10h] +
jmp loc_4299AE  +
mov eax [ebx+10h] +
call sub_4299A0  +
mov eax [ebx+14h] +
call sub_4299A0  +
mov ebx [ebx+18h] +
jmp loc_4299AE  +
mov eax [ebx+10h] +
call sub_4299A0  +
jmp loc_4299E4  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_4299E4  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_4 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_4299E4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_429BF0  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_429BC1  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_429BA0  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_429AF0  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_429AF0  +
***
mov dword ptr [esp] offset aPWarning_not_4 +
call sub_418450  +
mov edx 1 +
jmp loc_429B95  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_429C74  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_429C6A  +
test byte ptr [ebx+29h] 8 +
jz loc_429C6A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_429C80  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_429CC9  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_429D48  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_429CC9  +
mov dword ptr [esp] offset dword_42B000 +
mov ds:dword_50F7B4 eax +
mov ds:dword_50F7B0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F7B0 +
test ecx ecx +
jnz loc_429C6A  +
mov dword ptr [esp+4] offset dword_50F7C0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_429D20  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_429D32  +
mov dword ptr [esp] offset loc_42A4E0 +
mov ds:dword_50F7B8 0 +
call sub_40D9B0  +
mov eax ds:dword_50F7B8 +
test eax eax +
jz loc_429D60  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_4 +
call sub_418450  +
jmp loc_429CDD  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_4 +
call sub_418420  +
jmp loc_429CF3  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_4 +
call sub_418450  +
jmp loc_429C9C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_429DC2  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_429DC2  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_429D12  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_5 +
call sub_418450  +
jmp loc_429D12  +
***
mov eax 2 +
jmp loc_429D83  +
***
mov eax ds:dword_50F7B8 +
test eax eax +
jz loc_42A4F0  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_42A50C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_42A512  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_42A5D6  +
mov eax ds:dword_50F7C0 +
cmp [esp+10h] eax +
jz loc_42A5F2  +
mov eax ds:dword_50F7F0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_42A50C  +
mov dword ptr [esp+4] offset a_so__4 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_42A50C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_42A61B  +
mov eax ds:dword_50F7F0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_42A50C  +
mov eax ds:dword_50F7F0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_4 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42A50C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_4 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42A50C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F7C4 +
jnz loc_42A540  +
test ax ax +
jz loc_42A540  +
mov eax [esp+50h] +
mov ds:dword_50F7B8 eax +
jmp loc_42A50C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_42A58C  +
***
jmp sub_42A640  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_42A658  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr35 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_42A73B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_42A75E  +
test ds:byte_514824 2 +
jnz loc_42A876  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_42A910  +
mov ecx ds:dword_50F7A0 +
test ecx ecx +
jnz loc_42A7C7  +
mov esi offset off_4BE820 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_42A7B2  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_42A7B2  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_42A7B2  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BE8F8 +
jb loc_42A780  +
mov ds:dword_50F7A0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_42AAE2  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_42A7F6  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_42A8B4  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_42A7F0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_42A7F0  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_42A7F6  +
test byte ptr [eax+29h] 8 +
jnz loc_42A7F6  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_42A7F6  +
test byte ptr [edx+24h] 10h +
jnz loc_42A7F6  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_42A7F0  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_42A7F0  +
test byte ptr [ebx+14h] 1 +
jz loc_42A75E  +
test ebp ebp +
jz loc_42AB30  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_42ABEC  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_4 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_42A75E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_42A9A6  +
mov edx offset off_4BE8E0 +
mov eax [edx+8] +
test eax eax +
jz loc_42AB7E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_42A76A  +
xor edi edi +
jmp loc_42A95A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_42AAB5  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_42A9A2  +
mov edx [eax+14h] +
test edx edx +
jz loc_42AA90  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_42A940  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_42AA90  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_42A940  +
mov edi esi +
jmp loc_42A940  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_42AB75  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_42AA00  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_42A9D5  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BE8B0 +
jnz loc_42A8C7  +
test ebp ebp +
jnz loc_42AA00  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_5 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BE8B0 +
mov eax esi +
cmp cl al +
jz loc_42A8C7  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BE880 +
jz loc_42A8C7  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BE8C8 +
jnz loc_42A8C7  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BE850 +
jnz loc_42A8C7  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BE868 +
jz loc_42A8C7  +
test ebp ebp +
jnz loc_42AD38  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_4 +
mov ecx 4 +
cmps   +
jnz loc_42AA74  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BE898 +
test ebp ebp +
jnz loc_42A8C7  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BE838 +
mov eax offset off_4BE820 +
cmovnz edx eax +
jmp loc_42A8C7  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_42AD7A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warning_8 +
mov ecx 0Dh +
cmps   +
jnz loc_42A7D9  +
mov eax dword_4BE828 +
test eax eax +
jz loc_42A7D9  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_42A902  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_4 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_42A75E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_42AC01  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_4 +
jmp loc_42A75E  +
xor edx edx +
xor eax eax +
jmp loc_42A8D2  +
mov eax [edx] +
test eax eax +
jz loc_42AC0E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_42A8D2  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_42A8D2  +
mov eax ds:dword_5146F8 +
jmp loc_42A8D2  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_4 +
jmp loc_42A75E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_4 +
jmp loc_42A75E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_42AD87  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_42ACE1  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_42AD2C  +
movzx ecx dl +
mov esi offset a_plt_4 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_42AD2C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_42AC97  +
test al al +
jz loc_42AC9B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_42ACA7  +
test al al +
jz loc_42ACFF  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_42ACD6  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_42ACD6  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_42AD10  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_42ACFF  +
mov eax [ebp+18h] +
mov edi offset a_rel_4 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42AC58  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_42ACD6  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_42ACC1  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_42AD53  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_42ABAB  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_42AD18  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_42AA63  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_42AA63  +
jmp loc_42AA74  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_42AD20  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_42AD20  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_42AD20  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_42A76A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_42AD20  +
***
jmp sub_42ADA0  +
***
sub esp 14h +
mov ebx ds:dword_50F804 +
test ebx ebx +
jnz loc_42ADE0  +
cmp ds:dword_514834 1 +
jbe loc_42ADE0  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_42AF00  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_42AE90  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_42AEA0  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_42AEA0  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_42AEB0  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_42AE81  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_42AEA0  +
cmp ebx 6 +
jle loc_42AEF0  +
sub ebx 1 +
jz loc_42AEB8  +
mov eax 1 +
jmp loc_42AE02  +
mov [esp+14h+var_14] offset aFPMapSection_4 +
call sub_418450  +
jmp loc_42AE58  +
mov [esp+14h+var_14] offset aXP_eh_frame__4 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F804 +
test eax eax +
jz loc_42AECD  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_42AE44  +
mov [esp+14h+var_14] offset aPFLoopingInM_4 +
call sub_418450  +
mov eax ds:dword_50F804 +
test eax eax +
jnz loc_42AEA9  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_42AEA9  +
mov [esp+14h+var_14] offset aXPCanNotBuil_4 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_42AE75  +
mov [edx+1Ch] esi +
jmp loc_42AEA0  +
mov [esp+14h+var_14] offset aXPCanNotSize_4 +
call sub_418450  +
jmp loc_42ADE0  +
***
jmp loc_42AF20  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F7B8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_42AF44  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_42AFF7  +
mov eax [ebx+8] +
test eax eax +
jz loc_42AFF7  +
mov edx [ebx+10h] +
test edx edx +
jz loc_42AFF7  +
mov ecx ds:dword_50F7B8 +
test ecx ecx +
jz loc_42AF77  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_42AFF7  +
mov eax [ebx+8] +
mov edx ds:dword_50F7F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_42AFF1  +
test byte ptr [ebx+24h] 4 +
jz loc_42AFC9  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_42AFC9  +
mov edx ds:dword_50F7F0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_42AFF1  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_42AFF7  +
mov edx ds:dword_50F7F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_42AFF7  +
mov ds:dword_50F7B8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_42B59D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_42B6BB  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_42B11E  +
jmp loc_42B282  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_42B282  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_42B110  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_42B110  +
cmp byte ptr [eax] 0 +
jz loc_42B110  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_42B169  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_42B270  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_42B270  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_42B505  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_42B150  +
cmp byte ptr [esi] 0 +
jz loc_42B150  +
mov edi ds:dword_50F7A8 +
test edi edi +
jz loc_42B6A9  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_42B1D7  +
add eax 1 +
mov edi eax +
jz loc_42B211  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_42B201  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_42B512  +
cmp al [esp+6Ch+var_2E] +
jz loc_42B512  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_42B1D0  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_5 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F7A8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F7A8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F7A8 ebx +
test edx edx +
jnz loc_42B15C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_42B11E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F7A8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F7AC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_42B569  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_42B2FE  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_42B2FE  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_42B31B  +
jmp loc_42B3F1  +
mov edi [edi+18h] +
test edi edi +
jz loc_42B3F1  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_42B310  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warning_9 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_42B310  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_42B540  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_42B520  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_42B3D8  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_42B3D8  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_42B31B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_42B558  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_42B438  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F7F4 +
mov eax ds:dword_50F80C +
mov ds:dword_50F804 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BE96C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BE968 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F800 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F7FC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F808 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_42B57A  +
mov eax ds:dword_50F804 +
test eax eax +
jnz loc_42B4FD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_42B6D0  +
jz loc_42B4FD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_42B58C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_42B193  +
test edi edi +
jnz loc_42B150  +
jmp loc_42B211  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr35_c +
call sub_4184A0  +
jmp loc_42B3BA  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_4 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_42B37A  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_4 +
call sub_418450  +
jmp loc_42B413  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_4 +
call sub_418450  +
jmp loc_42B2DC  +
mov ds:dword_50F804 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_4 +
call sub_418450  +
jmp loc_42B4FD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_42B690  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_4 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_42B690  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_42B60D  +
cmp al 2 +
ja loc_42B690  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_42B640  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_42B698  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_429A80 +
call sub_40AFD0  +
jmp loc_42B0EE  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F7A8 eax +
jmp loc_42B150  +
mov [esp+6Ch+var_6C] offset aLd_run_path_4 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_42B0FF  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_4 +
call sub_418450  +
jmp loc_42B4FD  +
***
jmp loc_42B6F0  +
mov eax ds:dword_50F7F8 +
test eax eax +
jnz loc_42B700  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_4 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_42B8EB  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_42B8E0  +
test byte ptr [ebp+24h] 10h +
jnz loc_42B8E0  +
mov ecx [edx] +
test ecx ecx +
jz loc_42B8E0  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_42B8E0  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_42B8D0  +
test byte ptr [esi+14h] 1 +
jz loc_42B8D0  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_42B8D0  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_42B7CF  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_42B7D7  +
and edx 300000h +
jz loc_42B7DF  +
cmp esi eax +
jz loc_42B900  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_42B7B7  +
mov edx [esp+18h] +
test edx edx +
jz loc_42B8D0  +
mov eax [esp+24h] +
test eax eax +
jz loc_42B965  +
mov eax [esi] +
mov dword ptr [esp] offset aS_48 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_42B959  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_42B825  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_5 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_45 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_42B8D0  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_46 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_42B8F3  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_42B885  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_5 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_42B861  +
mov edx [ebp+8] +
test edx edx +
jnz loc_42B8BA  +
jmp loc_42B990  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_42B8B8  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_42B782  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_42B740  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_42B885  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_42B7DF  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_42B997  +
mov ecx ebp +
jmp loc_42B942  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_42B940  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_42B7DF  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_42B825  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_47 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_42B7FE  +
***
mov edx ebp +
jmp loc_42B8C1  +
***
mov ebp [esp+28h] +
jmp loc_42B950  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_5 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_5 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_5 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_5 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_5 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_5 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_5 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_42BABC  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_42BAE5  +
test esi esi +
jz loc_42BAC9  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_42BAD1  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_5 +
call sub_418450  +
jmp loc_42BABC  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_42BE18  +
jle loc_42BB50  +
cmp eax 133h +
jz loc_42BDE4  +
jg loc_42BB88  +
cmp eax 131h +
jz loc_42BCE3  +
cmp eax 132h +
jnz loc_42BDC6  +
mov ds:dword_50F878 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_42BDD0  +
jle loc_42BD10  +
cmp eax 12Eh +
jz loc_42BBD0  +
cmp eax 12Fh +
jnz loc_42BDC6  +
mov ds:dword_50F884 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_42BC90  +
cmp eax 198h +
jnz loc_42BDC6  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_8 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_42BE52  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_42BB82  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_5 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42BCF7  +
mov edi offset off_4E350A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42BCF7  +
mov edi offset unk_4E350E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_42BE80  +
mov edi offset unk_4E3511 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_42BE80  +
mov edi offset unk_4E3514 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42BF25  +
mov edi offset off_4E3518 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42BF25  +
mov edi offset unk_4E351C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42BC7B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E3520 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_42BB82  +
mov dword_4BEAC8 10000h +
mov eax 1 +
jmp loc_42BB82  +
***
mov eax ds:dword_50F824 +
test eax eax +
jz loc_42BCAB  +
mov [esp] eax +
call free  +
mov ds:dword_50F824 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_42BEC0  +
mov edi offset aNone_8 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_42BB43  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F824 eax +
mov eax 1 +
jmp loc_42BB82  +
***
mov ds:dword_50F880 1 +
mov eax 1 +
jmp loc_42BB82  +
***
mov dword_4BEAC8 8000h +
mov eax 1 +
jmp loc_42BB82  +
***
cmp eax 7Ah +
jnz loc_42BDC6  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_5 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_42BE41  +
mov edi offset aMuldefs_5 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_42BE30  +
mov edi offset aMaxPageSize_5 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_42BED4  +
mov edi offset aCommonPageSi_5 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_42BF39  +
mov edi offset aStackSize_5 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_42BFC3  +
mov edi offset aExecstack_5 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_42C007  +
mov edi offset aNoexecstack_5 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_42C042  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_42BB82  +
***
xor eax eax +
jmp loc_42BB82  +
***
mov dword_4BEACC 0 +
mov eax 1 +
jmp loc_42BB82  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_42BB43  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F874 eax +
mov eax 1 +
jmp loc_42BB82  +
***
mov ds:dword_50F87C 1 +
mov eax 1 +
jmp loc_42BB82  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_42BB82  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_42BB82  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_5 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_42BE94  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_42BB82  +
***
mov dword_4BEAC8 2000h +
mov eax 1 +
jmp loc_42BB82  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_5 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_42BF8A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_42BB82  +
***
mov ds:dword_5141E8 offset aSha1_6 +
mov eax offset aSha1_6 +
jmp loc_42BCCC  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_42BF08  +
lea edx [eax-1] +
test eax edx +
jz loc_42BB43  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_5 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42BB43  +
***
mov dword_4BEAC8 4000h +
mov eax 1 +
jmp loc_42BB82  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_42BF6D  +
lea edx [eax-1] +
test eax edx +
jz loc_42BB43  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_11 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42BB43  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_5 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_42BE68  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_12 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_42BB82  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_42C023  +
test eax eax +
js loc_42C023  +
test eax eax +
jnz loc_42BB43  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_42BB43  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_42BB82  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_5 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_42BFF0  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_5 +
call sub_418450  +
mov eax 1 +
jmp loc_42BB82  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E3C40 +
test edi 1 +
mov eax 0A0h +
jnz loc_42C0F8  +
test edi 2 +
jnz loc_42C117  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_42C0E6  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_42C0F1  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E3C40 +
add edi 1 +
mov esi 4E3C41h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_42C0CE  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_42C0CE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_42C230  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_42C240  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_5 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_42C27C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_42C230  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_42C230  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_42C218  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr4_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_42C290  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_10 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_42C1CA  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_42C21C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_5 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_5 +
mov ebx eax +
mov ds:dword_50F88C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F88C +
mov eax [eax+10h] +
test eax eax +
jz loc_42C33B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F88C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_42C350  +
mov [esp+14h+var_14] offset aXPCanNotCrea_5 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F88C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_5 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F888 eax +
jz loc_42C393  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F88C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_5 +
call sub_418450  +
jmp loc_42C347  +
***
jmp sub_42C3B0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_42C3E0  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_42C410  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_42C40B  +
mov ecx ds:dword_50F88C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_42C401  +
cmp [ecx+10h] eax +
jnz loc_42C422  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_42C3F0  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_42C3CC  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_42C47D  +
mov eax [ebx+0Ch] +
jmp ds:off_4E35D8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__11 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_42C4C0  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_42C444  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_42C458  +
mov ebx [ebx+10h] +
jmp loc_42C43E  +
mov eax [ebx+10h] +
call sub_42C430  +
mov eax [ebx+14h] +
call sub_42C430  +
mov ebx [ebx+18h] +
jmp loc_42C43E  +
mov eax [ebx+10h] +
call sub_42C430  +
jmp loc_42C474  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_42C474  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_5 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_42C474  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_42C680  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_42C651  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_42C630  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_42C580  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_42C580  +
***
mov dword ptr [esp] offset aPWarning_not_5 +
call sub_418450  +
mov edx 1 +
jmp loc_42C625  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_42C704  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_42C6FA  +
test byte ptr [ebx+29h] 8 +
jz loc_42C6FA  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_42C710  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_42C759  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_42C7D8  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_42C759  +
mov dword ptr [esp] offset dword_42DA90 +
mov ds:dword_50F834 eax +
mov ds:dword_50F830 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F830 +
test ecx ecx +
jnz loc_42C6FA  +
mov dword ptr [esp+4] offset dword_50F840 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_42C7B0  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_42C7C2  +
mov dword ptr [esp] offset loc_42CF70 +
mov ds:dword_50F838 0 +
call sub_40D9B0  +
mov eax ds:dword_50F838 +
test eax eax +
jz loc_42C7F0  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_5 +
call sub_418450  +
jmp loc_42C76D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_5 +
call sub_418420  +
jmp loc_42C783  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_5 +
call sub_418450  +
jmp loc_42C72C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_42C852  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_42C852  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_42C7A2  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_6 +
call sub_418450  +
jmp loc_42C7A2  +
***
mov eax 2 +
jmp loc_42C813  +
***
mov eax ds:dword_50F838 +
test eax eax +
jz loc_42CF80  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_42CF9C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_42CFA2  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_42D066  +
mov eax ds:dword_50F840 +
cmp [esp+10h] eax +
jz loc_42D082  +
mov eax ds:dword_50F870 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_42CF9C  +
mov dword ptr [esp+4] offset a_so__5 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_42CF9C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_42D0AB  +
mov eax ds:dword_50F870 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_42CF9C  +
mov eax ds:dword_50F870 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_5 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42CF9C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_5 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42CF9C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F844 +
jnz loc_42CFD0  +
test ax ax +
jz loc_42CFD0  +
mov eax [esp+50h] +
mov ds:dword_50F838 eax +
jmp loc_42CF9C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_42D01C  +
***
jmp sub_42D0D0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_42D0E8  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr4 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_42D1CB  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_42D1EE  +
test ds:byte_514824 2 +
jnz loc_42D306  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_42D3A0  +
mov ecx ds:dword_50F820 +
test ecx ecx +
jnz loc_42D257  +
mov esi offset off_4BE980 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_42D242  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_42D242  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_42D242  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BEA58 +
jb loc_42D210  +
mov ds:dword_50F820 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_42D572  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_42D286  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_42D344  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_42D280  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_42D280  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_42D286  +
test byte ptr [eax+29h] 8 +
jnz loc_42D286  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_42D286  +
test byte ptr [edx+24h] 10h +
jnz loc_42D286  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_42D280  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_42D280  +
test byte ptr [ebx+14h] 1 +
jz loc_42D1EE  +
test ebp ebp +
jz loc_42D5C0  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_42D67C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_5 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_42D1EE  +
test [esp+4Ch+var_24] 2001h +
jnz loc_42D436  +
mov edx offset off_4BEA40 +
mov eax [edx+8] +
test eax eax +
jz loc_42D60E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_42D1FA  +
xor edi edi +
jmp loc_42D3EA  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_42D545  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_42D432  +
mov edx [eax+14h] +
test edx edx +
jz loc_42D520  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_42D3D0  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_42D520  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_42D3D0  +
mov edi esi +
jmp loc_42D3D0  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_42D605  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_42D490  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_42D465  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BEA10 +
jnz loc_42D357  +
test ebp ebp +
jnz loc_42D490  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_6 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BEA10 +
mov eax esi +
cmp cl al +
jz loc_42D357  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BE9E0 +
jz loc_42D357  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BEA28 +
jnz loc_42D357  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BE9B0 +
jnz loc_42D357  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BE9C8 +
jz loc_42D357  +
test ebp ebp +
jnz loc_42D7C8  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_5 +
mov ecx 4 +
cmps   +
jnz loc_42D504  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BE9F8 +
test ebp ebp +
jnz loc_42D357  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BE998 +
mov eax offset off_4BE980 +
cmovnz edx eax +
jmp loc_42D357  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_42D80A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_10 +
mov ecx 0Dh +
cmps   +
jnz loc_42D269  +
mov eax dword_4BE988 +
test eax eax +
jz loc_42D269  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_42D392  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_5 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_42D1EE  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_42D691  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_5 +
jmp loc_42D1EE  +
xor edx edx +
xor eax eax +
jmp loc_42D362  +
mov eax [edx] +
test eax eax +
jz loc_42D69E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_42D362  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_42D362  +
mov eax ds:dword_5146F8 +
jmp loc_42D362  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_5 +
jmp loc_42D1EE  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_5 +
jmp loc_42D1EE  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_42D817  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_42D771  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_42D7BC  +
movzx ecx dl +
mov esi offset a_plt_5 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_42D7BC  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_42D727  +
test al al +
jz loc_42D72B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_42D737  +
test al al +
jz loc_42D78F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_42D766  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_42D766  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_42D7A0  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_42D78F  +
mov eax [ebp+18h] +
mov edi offset a_rel_5 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42D6E8  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_42D766  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_42D751  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_42D7E3  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_42D63B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_42D7A8  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_42D4F3  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_42D4F3  +
jmp loc_42D504  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_42D7B0  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_42D7B0  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_42D7B0  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_42D1FA  +
mov [esp+4Ch+var_20] 0 +
jmp loc_42D7B0  +
***
jmp sub_42D830  +
***
sub esp 14h +
mov ebx ds:dword_50F884 +
test ebx ebx +
jnz loc_42D870  +
cmp ds:dword_514834 1 +
jbe loc_42D870  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_42D990  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_42D920  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_42D930  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_42D930  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_42D940  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_42D911  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_42D930  +
cmp ebx 6 +
jle loc_42D980  +
sub ebx 1 +
jz loc_42D948  +
mov eax 1 +
jmp loc_42D892  +
mov [esp+14h+var_14] offset aFPMapSection_5 +
call sub_418450  +
jmp loc_42D8E8  +
mov [esp+14h+var_14] offset aXP_eh_frame__5 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F884 +
test eax eax +
jz loc_42D95D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_42D8D4  +
mov [esp+14h+var_14] offset aPFLoopingInM_5 +
call sub_418450  +
mov eax ds:dword_50F884 +
test eax eax +
jnz loc_42D939  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_42D939  +
mov [esp+14h+var_14] offset aXPCanNotBuil_5 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_42D905  +
mov [edx+1Ch] esi +
jmp loc_42D930  +
mov [esp+14h+var_14] offset aXPCanNotSize_5 +
call sub_418450  +
jmp loc_42D870  +
***
jmp loc_42D9B0  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F838 +
mov ebx [esp+20h] +
test eax eax +
jz loc_42D9D4  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_42DA87  +
mov eax [ebx+8] +
test eax eax +
jz loc_42DA87  +
mov edx [ebx+10h] +
test edx edx +
jz loc_42DA87  +
mov ecx ds:dword_50F838 +
test ecx ecx +
jz loc_42DA07  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_42DA87  +
mov eax [ebx+8] +
mov edx ds:dword_50F870 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_42DA81  +
test byte ptr [ebx+24h] 4 +
jz loc_42DA59  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_42DA59  +
mov edx ds:dword_50F870 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_42DA81  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_42DA87  +
mov edx ds:dword_50F870 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_42DA87  +
mov ds:dword_50F838 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_42E02D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_42E14B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_42DBAE  +
jmp loc_42DD12  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_42DD12  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_42DBA0  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_42DBA0  +
cmp byte ptr [eax] 0 +
jz loc_42DBA0  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_42DBF9  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_42DD00  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_42DD00  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_42DF95  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_42DBE0  +
cmp byte ptr [esi] 0 +
jz loc_42DBE0  +
mov edi ds:dword_50F828 +
test edi edi +
jz loc_42E139  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_42DC67  +
add eax 1 +
mov edi eax +
jz loc_42DCA1  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_42DC91  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_42DFA2  +
cmp al [esp+6Ch+var_2E] +
jz loc_42DFA2  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_42DC60  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_6 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F828 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F828 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F828 ebx +
test edx edx +
jnz loc_42DBEC  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_42DBAE  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F828 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F82C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_42DFF9  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_42DD8E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_42DD8E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_42DDAB  +
jmp loc_42DE81  +
mov edi [edi+18h] +
test edi edi +
jz loc_42DE81  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_42DDA0  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_11 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_42DDA0  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_42DFD0  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_42DFB0  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_42DE68  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_42DE68  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_42DDAB  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_42DFE8  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_42DEC8  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F874 +
mov eax ds:dword_50F88C +
mov ds:dword_50F884 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BEACC +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BEAC8 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F880 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F87C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F888 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_42E00A  +
mov eax ds:dword_50F884 +
test eax eax +
jnz loc_42DF8D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_42E160  +
jz loc_42DF8D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_42E01C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_42DC23  +
test edi edi +
jnz loc_42DBE0  +
jmp loc_42DCA1  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr4_c +
call sub_4184A0  +
jmp loc_42DE4A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_5 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_42DE0A  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_5 +
call sub_418450  +
jmp loc_42DEA3  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_5 +
call sub_418450  +
jmp loc_42DD6C  +
mov ds:dword_50F884 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_5 +
call sub_418450  +
jmp loc_42DF8D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_42E120  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_5 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_42E120  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_42E09D  +
cmp al 2 +
ja loc_42E120  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_42E0D0  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_42E128  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_42C510 +
call sub_40AFD0  +
jmp loc_42DB7E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F828 eax +
jmp loc_42DBE0  +
mov [esp+6Ch+var_6C] offset aLd_run_path_5 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_42DB8F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_5 +
call sub_418450  +
jmp loc_42DF8D  +
***
jmp loc_42E180  +
mov eax ds:dword_50F878 +
test eax eax +
jnz loc_42E190  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_5 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_42E37B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_42E370  +
test byte ptr [ebp+24h] 10h +
jnz loc_42E370  +
mov ecx [edx] +
test ecx ecx +
jz loc_42E370  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_42E370  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_42E360  +
test byte ptr [esi+14h] 1 +
jz loc_42E360  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_42E360  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_42E25F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_42E267  +
and edx 300000h +
jz loc_42E26F  +
cmp esi eax +
jz loc_42E390  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_42E247  +
mov edx [esp+18h] +
test edx edx +
jz loc_42E360  +
mov eax [esp+24h] +
test eax eax +
jz loc_42E3F5  +
mov eax [esi] +
mov dword ptr [esp] offset aS_52 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_42E3E9  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_42E2B5  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_6 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_49 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_42E360  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_50 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_42E383  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_42E315  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_6 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_42E2F1  +
mov edx [ebp+8] +
test edx edx +
jnz loc_42E34A  +
jmp loc_42E420  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_42E348  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_42E212  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_42E1D0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_42E315  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_42E26F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_42E427  +
mov ecx ebp +
jmp loc_42E3D2  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_42E3D0  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_42E26F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_42E2B5  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_51 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_42E28E  +
***
mov edx ebp +
jmp loc_42E351  +
***
mov ebp [esp+28h] +
jmp loc_42E3E0  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_6 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_6 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_6 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_6 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_6 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_6 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset unk_4E411C +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_42E54C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_42E575  +
test esi esi +
jz loc_42E559  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_42E561  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_6 +
call sub_418450  +
jmp loc_42E54C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_42E8A8  +
jle loc_42E5E0  +
cmp eax 133h +
jz loc_42E874  +
jg loc_42E618  +
cmp eax 131h +
jz loc_42E773  +
cmp eax 132h +
jnz loc_42E856  +
mov ds:dword_50F8F8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_42E860  +
jle loc_42E7A0  +
cmp eax 12Eh +
jz loc_42E660  +
cmp eax 12Fh +
jnz loc_42E856  +
mov ds:dword_50F904 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_42E720  +
cmp eax 198h +
jnz loc_42E856  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_9 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_42E8E2  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_42E612  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_6 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42E787  +
mov edi offset off_4E430A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42E787  +
mov edi offset unk_4E430E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_42E910  +
mov edi offset unk_4E4311 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_42E910  +
mov edi offset unk_4E4314 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42E9B5  +
mov edi offset off_4E4318 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42E9B5  +
mov edi offset unk_4E431C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_42E70B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E4320 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_42E612  +
mov dword_4BEC28 10000h +
mov eax 1 +
jmp loc_42E612  +
***
mov eax ds:dword_50F8A4 +
test eax eax +
jz loc_42E73B  +
mov [esp] eax +
call free  +
mov ds:dword_50F8A4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_42E950  +
mov edi offset aNone_9 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_42E5D3  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F8A4 eax +
mov eax 1 +
jmp loc_42E612  +
***
mov ds:dword_50F900 1 +
mov eax 1 +
jmp loc_42E612  +
***
mov dword_4BEC28 8000h +
mov eax 1 +
jmp loc_42E612  +
***
cmp eax 7Ah +
jnz loc_42E856  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_6 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_42E8D1  +
mov edi offset aMuldefs_6 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_42E8C0  +
mov edi offset aMaxPageSize_6 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_42E964  +
mov edi offset aCommonPageSi_6 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_42E9C9  +
mov edi offset aStackSize_6 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_42EA53  +
mov edi offset aExecstack_6 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_42EA97  +
mov edi offset aNoexecstack_6 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_42EAD2  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_42E612  +
***
xor eax eax +
jmp loc_42E612  +
***
mov dword_4BEC2C 0 +
mov eax 1 +
jmp loc_42E612  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_42E5D3  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F8F4 eax +
mov eax 1 +
jmp loc_42E612  +
***
mov ds:dword_50F8FC 1 +
mov eax 1 +
jmp loc_42E612  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_42E612  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_42E612  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_6 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_42E924  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_42E612  +
***
mov dword_4BEC28 2000h +
mov eax 1 +
jmp loc_42E612  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_6 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_42EA1A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_42E612  +
***
mov ds:dword_5141E8 offset aSha1_7 +
mov eax offset aSha1_7 +
jmp loc_42E75C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_42E998  +
lea edx [eax-1] +
test eax edx +
jz loc_42E5D3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_6 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42E5D3  +
***
mov dword_4BEC28 4000h +
mov eax 1 +
jmp loc_42E612  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_42E9FD  +
lea edx [eax-1] +
test eax edx +
jz loc_42E5D3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_13 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42E5D3  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_6 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_42E8F8  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_14 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_42E612  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_42EAB3  +
test eax eax +
js loc_42EAB3  +
test eax eax +
jnz loc_42E5D3  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_42E5D3  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_42E612  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_6 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_42EA80  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_6 +
call sub_418450  +
mov eax 1 +
jmp loc_42E612  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E4A40 +
test edi 1 +
mov eax 0A0h +
jnz loc_42EB88  +
test edi 2 +
jnz loc_42EBA7  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_42EB76  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_42EB81  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E4A40 +
add edi 1 +
mov esi 4E4A41h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_42EB5E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_42EB5E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_42ECC0  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_42ECD0  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_6 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_42ED0C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_42ECC0  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_42ECC0  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_42ECA8  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr5_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_42ED20  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_11 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_42EC5A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_42ECAC  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_6 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_6 +
mov ebx eax +
mov ds:dword_50F90C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F90C +
mov eax [eax+10h] +
test eax eax +
jz loc_42EDCB  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F90C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_42EDE0  +
mov [esp+14h+var_14] offset aXPCanNotCrea_6 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F90C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_6 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F908 eax +
jz loc_42EE23  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F90C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_6 +
call sub_418450  +
jmp loc_42EDD7  +
***
jmp sub_42EE40  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_42EE70  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_42EEA0  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_42EE9B  +
mov ecx ds:dword_50F90C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_42EE91  +
cmp [ecx+10h] eax +
jnz loc_42EEB2  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_42EE80  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_42EE5C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_42EF0D  +
mov eax [ebx+0Ch] +
jmp ds:off_4E43D8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__12 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_42EF50  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_42EED4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_42EEE8  +
mov ebx [ebx+10h] +
jmp loc_42EECE  +
mov eax [ebx+10h] +
call sub_42EEC0  +
mov eax [ebx+14h] +
call sub_42EEC0  +
mov ebx [ebx+18h] +
jmp loc_42EECE  +
mov eax [ebx+10h] +
call sub_42EEC0  +
jmp loc_42EF04  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_42EF04  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_6 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_42EF04  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_42F110  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_42F0E1  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_42F0C0  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_42F010  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_42F010  +
***
mov dword ptr [esp] offset aPWarning_not_6 +
call sub_418450  +
mov edx 1 +
jmp loc_42F0B5  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_42F194  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_42F18A  +
test byte ptr [ebx+29h] 8 +
jz loc_42F18A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_42F1A0  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_42F1E9  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_42F268  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_42F1E9  +
mov dword ptr [esp] offset dword_430520 +
mov ds:dword_50F8B4 eax +
mov ds:dword_50F8B0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F8B0 +
test ecx ecx +
jnz loc_42F18A  +
mov dword ptr [esp+4] offset dword_50F8C0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_42F240  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_42F252  +
mov dword ptr [esp] offset loc_42FA00 +
mov ds:dword_50F8B8 0 +
call sub_40D9B0  +
mov eax ds:dword_50F8B8 +
test eax eax +
jz loc_42F280  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_6 +
call sub_418450  +
jmp loc_42F1FD  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_6 +
call sub_418420  +
jmp loc_42F213  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_6 +
call sub_418450  +
jmp loc_42F1BC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_42F2E2  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_42F2E2  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_42F232  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_7 +
call sub_418450  +
jmp loc_42F232  +
***
mov eax 2 +
jmp loc_42F2A3  +
***
mov eax ds:dword_50F8B8 +
test eax eax +
jz loc_42FA10  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_42FA2C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_42FA32  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_42FAF6  +
mov eax ds:dword_50F8C0 +
cmp [esp+10h] eax +
jz loc_42FB12  +
mov eax ds:dword_50F8F0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_42FA2C  +
mov dword ptr [esp+4] offset a_so__6 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_42FA2C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_42FB3B  +
mov eax ds:dword_50F8F0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_42FA2C  +
mov eax ds:dword_50F8F0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_6 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42FA2C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_6 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_42FA2C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F8C4 +
jnz loc_42FA60  +
test ax ax +
jz loc_42FA60  +
mov eax [esp+50h] +
mov ds:dword_50F8B8 eax +
jmp loc_42FA2C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_42FAAC  +
***
jmp sub_42FB60  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_42FB78  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr5 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_42FC5B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_42FC7E  +
test ds:byte_514824 2 +
jnz loc_42FD96  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_42FE30  +
mov ecx ds:dword_50F8A0 +
test ecx ecx +
jnz loc_42FCE7  +
mov esi offset off_4BEAE0 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_42FCD2  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_42FCD2  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_42FCD2  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BEBB8 +
jb loc_42FCA0  +
mov ds:dword_50F8A0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_430002  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_42FD16  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_42FDD4  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_42FD10  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_42FD10  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_42FD16  +
test byte ptr [eax+29h] 8 +
jnz loc_42FD16  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_42FD16  +
test byte ptr [edx+24h] 10h +
jnz loc_42FD16  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_42FD10  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_42FD10  +
test byte ptr [ebx+14h] 1 +
jz loc_42FC7E  +
test ebp ebp +
jz loc_430050  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_43010C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_6 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_42FC7E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_42FEC6  +
mov edx offset off_4BEBA0 +
mov eax [edx+8] +
test eax eax +
jz loc_43009E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_42FC8A  +
xor edi edi +
jmp loc_42FE7A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_42FFD5  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_42FEC2  +
mov edx [eax+14h] +
test edx edx +
jz loc_42FFB0  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_42FE60  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_42FFB0  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_42FE60  +
mov edi esi +
jmp loc_42FE60  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_430095  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_42FF20  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_42FEF5  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BEB70 +
jnz loc_42FDE7  +
test ebp ebp +
jnz loc_42FF20  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_7 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BEB70 +
mov eax esi +
cmp cl al +
jz loc_42FDE7  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BEB40 +
jz loc_42FDE7  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BEB88 +
jnz loc_42FDE7  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BEB10 +
jnz loc_42FDE7  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BEB28 +
jz loc_42FDE7  +
test ebp ebp +
jnz loc_430258  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_6 +
mov ecx 4 +
cmps   +
jnz loc_42FF94  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BEB58 +
test ebp ebp +
jnz loc_42FDE7  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BEAF8 +
mov eax offset off_4BEAE0 +
cmovnz edx eax +
jmp loc_42FDE7  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_43029A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_12 +
mov ecx 0Dh +
cmps   +
jnz loc_42FCF9  +
mov eax dword_4BEAE8 +
test eax eax +
jz loc_42FCF9  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_42FE22  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_6 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_42FC7E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_430121  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_6 +
jmp loc_42FC7E  +
xor edx edx +
xor eax eax +
jmp loc_42FDF2  +
mov eax [edx] +
test eax eax +
jz loc_43012E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_42FDF2  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_42FDF2  +
mov eax ds:dword_5146F8 +
jmp loc_42FDF2  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_6 +
jmp loc_42FC7E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_6 +
jmp loc_42FC7E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_4302A7  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_430201  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_43024C  +
movzx ecx dl +
mov esi offset a_plt_6 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_43024C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_4301B7  +
test al al +
jz loc_4301BB  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_4301C7  +
test al al +
jz loc_43021F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_4301F6  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_4301F6  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_430230  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_43021F  +
mov eax [ebp+18h] +
mov edi offset a_rel_6 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_430178  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_4301F6  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_4301E1  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_430273  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_4300CB  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_430238  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_42FF83  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_42FF83  +
jmp loc_42FF94  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_430240  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_430240  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_430240  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_42FC8A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_430240  +
***
jmp sub_4302C0  +
***
sub esp 14h +
mov ebx ds:dword_50F904 +
test ebx ebx +
jnz loc_430300  +
cmp ds:dword_514834 1 +
jbe loc_430300  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_430420  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_4303B0  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_4303C0  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_4303C0  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_4303D0  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_4303A1  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_4303C0  +
cmp ebx 6 +
jle loc_430410  +
sub ebx 1 +
jz loc_4303D8  +
mov eax 1 +
jmp loc_430322  +
mov [esp+14h+var_14] offset aFPMapSection_6 +
call sub_418450  +
jmp loc_430378  +
mov [esp+14h+var_14] offset aXP_eh_frame__6 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F904 +
test eax eax +
jz loc_4303ED  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_430364  +
mov [esp+14h+var_14] offset aPFLoopingInM_6 +
call sub_418450  +
mov eax ds:dword_50F904 +
test eax eax +
jnz loc_4303C9  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_4303C9  +
mov [esp+14h+var_14] offset aXPCanNotBuil_6 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_430395  +
mov [edx+1Ch] esi +
jmp loc_4303C0  +
mov [esp+14h+var_14] offset aXPCanNotSize_6 +
call sub_418450  +
jmp loc_430300  +
***
jmp loc_430440  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F8B8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_430464  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_430517  +
mov eax [ebx+8] +
test eax eax +
jz loc_430517  +
mov edx [ebx+10h] +
test edx edx +
jz loc_430517  +
mov ecx ds:dword_50F8B8 +
test ecx ecx +
jz loc_430497  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_430517  +
mov eax [ebx+8] +
mov edx ds:dword_50F8F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_430511  +
test byte ptr [ebx+24h] 4 +
jz loc_4304E9  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_4304E9  +
mov edx ds:dword_50F8F0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_430511  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_430517  +
mov edx ds:dword_50F8F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_430517  +
mov ds:dword_50F8B8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_430ABD  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_430BDB  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_43063E  +
jmp loc_4307A2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_4307A2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_430630  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_430630  +
cmp byte ptr [eax] 0 +
jz loc_430630  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_430689  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_430790  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_430790  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_430A25  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_430670  +
cmp byte ptr [esi] 0 +
jz loc_430670  +
mov edi ds:dword_50F8A8 +
test edi edi +
jz loc_430BC9  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_4306F7  +
add eax 1 +
mov edi eax +
jz loc_430731  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_430721  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_430A32  +
cmp al [esp+6Ch+var_2E] +
jz loc_430A32  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_4306F0  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_7 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F8A8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F8A8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F8A8 ebx +
test edx edx +
jnz loc_43067C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_43063E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F8A8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F8AC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_430A89  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_43081E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_43081E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_43083B  +
jmp loc_430911  +
mov edi [edi+18h] +
test edi edi +
jz loc_430911  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_430830  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_13 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_430830  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_430A60  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_430A40  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_4308F8  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_4308F8  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_43083B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_430A78  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_430958  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F8F4 +
mov eax ds:dword_50F90C +
mov ds:dword_50F904 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BEC2C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BEC28 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F900 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F8FC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F908 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_430A9A  +
mov eax ds:dword_50F904 +
test eax eax +
jnz loc_430A1D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_430BF0  +
jz loc_430A1D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_430AAC  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_4306B3  +
test edi edi +
jnz loc_430670  +
jmp loc_430731  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr5_c +
call sub_4184A0  +
jmp loc_4308DA  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_6 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_43089A  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_6 +
call sub_418450  +
jmp loc_430933  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_6 +
call sub_418450  +
jmp loc_4307FC  +
mov ds:dword_50F904 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_6 +
call sub_418450  +
jmp loc_430A1D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_430BB0  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_6 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_430BB0  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_430B2D  +
cmp al 2 +
ja loc_430BB0  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_430B60  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_430BB8  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_42EFA0 +
call sub_40AFD0  +
jmp loc_43060E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F8A8 eax +
jmp loc_430670  +
mov [esp+6Ch+var_6C] offset aLd_run_path_6 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_43061F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_6 +
call sub_418450  +
jmp loc_430A1D  +
***
jmp loc_430C10  +
mov eax ds:dword_50F8F8 +
test eax eax +
jnz loc_430C20  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_6 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_430E0B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_430E00  +
test byte ptr [ebp+24h] 10h +
jnz loc_430E00  +
mov ecx [edx] +
test ecx ecx +
jz loc_430E00  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_430E00  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_430DF0  +
test byte ptr [esi+14h] 1 +
jz loc_430DF0  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_430DF0  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_430CEF  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_430CF7  +
and edx 300000h +
jz loc_430CFF  +
cmp esi eax +
jz loc_430E20  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_430CD7  +
mov edx [esp+18h] +
test edx edx +
jz loc_430DF0  +
mov eax [esp+24h] +
test eax eax +
jz loc_430E85  +
mov eax [esi] +
mov dword ptr [esp] offset aS_56 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_430E79  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_430D45  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_7 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_53 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_430DF0  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_54 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_430E13  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_430DA5  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_7 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_430D81  +
mov edx [ebp+8] +
test edx edx +
jnz loc_430DDA  +
jmp loc_430EB0  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_430DD8  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_430CA2  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_430C60  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_430DA5  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_430CFF  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_430EB7  +
mov ecx ebp +
jmp loc_430E62  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_430E60  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_430CFF  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_430D45  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_55 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_430D1E  +
***
mov edx ebp +
jmp loc_430DE1  +
***
mov ebp [esp+28h] +
jmp loc_430E70  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_7 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_7 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_7 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_7 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_7 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_7 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_6 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_430FDC  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_431005  +
test esi esi +
jz loc_430FE9  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_430FF1  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_7 +
call sub_418450  +
jmp loc_430FDC  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_431338  +
jle loc_431070  +
cmp eax 133h +
jz loc_431304  +
jg loc_4310A8  +
cmp eax 131h +
jz loc_431203  +
cmp eax 132h +
jnz loc_4312E6  +
mov ds:dword_50F978 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_4312F0  +
jle loc_431230  +
cmp eax 12Eh +
jz loc_4310F0  +
cmp eax 12Fh +
jnz loc_4312E6  +
mov ds:dword_50F984 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_4311B0  +
cmp eax 198h +
jnz loc_4312E6  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_10 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_431372  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_4310A2  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_7 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_431217  +
mov edi offset off_4E510A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_431217  +
mov edi offset unk_4E510E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4313A0  +
mov edi offset unk_4E5111 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4313A0  +
mov edi offset unk_4E5114 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_431445  +
mov edi offset off_4E5118 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_431445  +
mov edi offset unk_4E511C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43119B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E5120 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_4310A2  +
mov dword_4BED88 10000h +
mov eax 1 +
jmp loc_4310A2  +
***
mov eax ds:dword_50F924 +
test eax eax +
jz loc_4311CB  +
mov [esp] eax +
call free  +
mov ds:dword_50F924 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_4313E0  +
mov edi offset aNone_10 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_431063  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F924 eax +
mov eax 1 +
jmp loc_4310A2  +
***
mov ds:dword_50F980 1 +
mov eax 1 +
jmp loc_4310A2  +
***
mov dword_4BED88 8000h +
mov eax 1 +
jmp loc_4310A2  +
***
cmp eax 7Ah +
jnz loc_4312E6  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_7 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_431361  +
mov edi offset aMuldefs_7 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_431350  +
mov edi offset aMaxPageSize_7 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_4313F4  +
mov edi offset aCommonPageSi_7 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_431459  +
mov edi offset aStackSize_7 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_4314E3  +
mov edi offset aExecstack_7 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_431527  +
mov edi offset aNoexecstack_7 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_431562  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_4310A2  +
***
xor eax eax +
jmp loc_4310A2  +
***
mov dword_4BED8C 0 +
mov eax 1 +
jmp loc_4310A2  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_431063  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F974 eax +
mov eax 1 +
jmp loc_4310A2  +
***
mov ds:dword_50F97C 1 +
mov eax 1 +
jmp loc_4310A2  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_4310A2  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_4310A2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_7 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4313B4  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_4310A2  +
***
mov dword_4BED88 2000h +
mov eax 1 +
jmp loc_4310A2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_7 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4314AA  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_4310A2  +
***
mov ds:dword_5141E8 offset aSha1_8 +
mov eax offset aSha1_8 +
jmp loc_4311EC  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_431428  +
lea edx [eax-1] +
test eax edx +
jz loc_431063  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_7 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_431063  +
***
mov dword_4BED88 4000h +
mov eax 1 +
jmp loc_4310A2  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_43148D  +
lea edx [eax-1] +
test eax edx +
jz loc_431063  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_15 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_431063  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_7 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_431388  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_16 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_4310A2  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_431543  +
test eax eax +
js loc_431543  +
test eax eax +
jnz loc_431063  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_431063  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_4310A2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_7 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_431510  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_7 +
call sub_418450  +
mov eax 1 +
jmp loc_4310A2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E5840 +
test edi 1 +
mov eax 0A0h +
jnz loc_431618  +
test edi 2 +
jnz loc_431637  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_431606  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_431611  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E5840 +
add edi 1 +
mov esi 4E5841h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_4315EE  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_4315EE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_431750  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_431760  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_7 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_43179C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_431750  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_431750  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_431738  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr51_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_4317B0  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_12 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_4316EA  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_43173C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_7 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_7 +
mov ebx eax +
mov ds:dword_50F98C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50F98C +
mov eax [eax+10h] +
test eax eax +
jz loc_43185B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50F98C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_431870  +
mov [esp+14h+var_14] offset aXPCanNotCrea_7 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50F98C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_7 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50F988 eax +
jz loc_4318B3  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50F98C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_7 +
call sub_418450  +
jmp loc_431867  +
***
jmp sub_4318D0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_431900  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_431930  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_43192B  +
mov ecx ds:dword_50F98C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_431921  +
cmp [ecx+10h] eax +
jnz loc_431942  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_431910  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_4318EC  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_43199D  +
mov eax [ebx+0Ch] +
jmp ds:off_4E51D8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__13 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_4319E0  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_431964  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_431978  +
mov ebx [ebx+10h] +
jmp loc_43195E  +
mov eax [ebx+10h] +
call sub_431950  +
mov eax [ebx+14h] +
call sub_431950  +
mov ebx [ebx+18h] +
jmp loc_43195E  +
mov eax [ebx+10h] +
call sub_431950  +
jmp loc_431994  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_431994  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_7 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_431994  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_431BA0  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_431B71  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_431B50  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_431AA0  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_431AA0  +
***
mov dword ptr [esp] offset aPWarning_not_7 +
call sub_418450  +
mov edx 1 +
jmp loc_431B45  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_431C24  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_431C1A  +
test byte ptr [ebx+29h] 8 +
jz loc_431C1A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_431C30  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_431C79  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_431CF8  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_431C79  +
mov dword ptr [esp] offset dword_432FB0 +
mov ds:dword_50F934 eax +
mov ds:dword_50F930 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F930 +
test ecx ecx +
jnz loc_431C1A  +
mov dword ptr [esp+4] offset dword_50F940 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_431CD0  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_431CE2  +
mov dword ptr [esp] offset loc_432490 +
mov ds:dword_50F938 0 +
call sub_40D9B0  +
mov eax ds:dword_50F938 +
test eax eax +
jz loc_431D10  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_7 +
call sub_418450  +
jmp loc_431C8D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_7 +
call sub_418420  +
jmp loc_431CA3  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_7 +
call sub_418450  +
jmp loc_431C4C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_431D72  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_431D72  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_431CC2  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_8 +
call sub_418450  +
jmp loc_431CC2  +
***
mov eax 2 +
jmp loc_431D33  +
***
mov eax ds:dword_50F938 +
test eax eax +
jz loc_4324A0  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_4324BC  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_4324C2  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_432586  +
mov eax ds:dword_50F940 +
cmp [esp+10h] eax +
jz loc_4325A2  +
mov eax ds:dword_50F970 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_4324BC  +
mov dword ptr [esp+4] offset a_so__7 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_4324BC  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_4325CB  +
mov eax ds:dword_50F970 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_4324BC  +
mov eax ds:dword_50F970 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_7 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4324BC  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_7 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4324BC  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F944 +
jnz loc_4324F0  +
test ax ax +
jz loc_4324F0  +
mov eax [esp+50h] +
mov ds:dword_50F938 eax +
jmp loc_4324BC  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_43253C  +
***
jmp sub_4325F0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_432608  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr51 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_4326EB  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_43270E  +
test ds:byte_514824 2 +
jnz loc_432826  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_4328C0  +
mov ecx ds:dword_50F920 +
test ecx ecx +
jnz loc_432777  +
mov esi offset off_4BEC40 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_432762  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_432762  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_432762  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BED18 +
jb loc_432730  +
mov ds:dword_50F920 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_432A92  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_4327A6  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_432864  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_4327A0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_4327A0  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_4327A6  +
test byte ptr [eax+29h] 8 +
jnz loc_4327A6  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_4327A6  +
test byte ptr [edx+24h] 10h +
jnz loc_4327A6  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_4327A0  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_4327A0  +
test byte ptr [ebx+14h] 1 +
jz loc_43270E  +
test ebp ebp +
jz loc_432AE0  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_432B9C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_7 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_43270E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_432956  +
mov edx offset off_4BED00 +
mov eax [edx+8] +
test eax eax +
jz loc_432B2E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_43271A  +
xor edi edi +
jmp loc_43290A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_432A65  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_432952  +
mov edx [eax+14h] +
test edx edx +
jz loc_432A40  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_4328F0  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_432A40  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_4328F0  +
mov edi esi +
jmp loc_4328F0  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_432B25  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_4329B0  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_432985  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BECD0 +
jnz loc_432877  +
test ebp ebp +
jnz loc_4329B0  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_8 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BECD0 +
mov eax esi +
cmp cl al +
jz loc_432877  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BECA0 +
jz loc_432877  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BECE8 +
jnz loc_432877  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BEC70 +
jnz loc_432877  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BEC88 +
jz loc_432877  +
test ebp ebp +
jnz loc_432CE8  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_7 +
mov ecx 4 +
cmps   +
jnz loc_432A24  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BECB8 +
test ebp ebp +
jnz loc_432877  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BEC58 +
mov eax offset off_4BEC40 +
cmovnz edx eax +
jmp loc_432877  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_432D2A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_14 +
mov ecx 0Dh +
cmps   +
jnz loc_432789  +
mov eax dword_4BEC48 +
test eax eax +
jz loc_432789  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_4328B2  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_7 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_43270E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_432BB1  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_7 +
jmp loc_43270E  +
xor edx edx +
xor eax eax +
jmp loc_432882  +
mov eax [edx] +
test eax eax +
jz loc_432BBE  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_432882  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_432882  +
mov eax ds:dword_5146F8 +
jmp loc_432882  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_7 +
jmp loc_43270E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_7 +
jmp loc_43270E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_432D37  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_432C91  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_432CDC  +
movzx ecx dl +
mov esi offset a_plt_7 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_432CDC  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_432C47  +
test al al +
jz loc_432C4B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_432C57  +
test al al +
jz loc_432CAF  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_432C86  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_432C86  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_432CC0  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_432CAF  +
mov eax [ebp+18h] +
mov edi offset a_rel_7 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_432C08  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_432C86  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_432C71  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_432D03  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_432B5B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_432CC8  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_432A13  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_432A13  +
jmp loc_432A24  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_432CD0  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_432CD0  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_432CD0  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_43271A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_432CD0  +
***
jmp sub_432D50  +
***
sub esp 14h +
mov ebx ds:dword_50F984 +
test ebx ebx +
jnz loc_432D90  +
cmp ds:dword_514834 1 +
jbe loc_432D90  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_432EB0  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_432E40  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_432E50  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_432E50  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_432E60  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_432E31  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_432E50  +
cmp ebx 6 +
jle loc_432EA0  +
sub ebx 1 +
jz loc_432E68  +
mov eax 1 +
jmp loc_432DB2  +
mov [esp+14h+var_14] offset aFPMapSection_7 +
call sub_418450  +
jmp loc_432E08  +
mov [esp+14h+var_14] offset aXP_eh_frame__7 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50F984 +
test eax eax +
jz loc_432E7D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_432DF4  +
mov [esp+14h+var_14] offset aPFLoopingInM_7 +
call sub_418450  +
mov eax ds:dword_50F984 +
test eax eax +
jnz loc_432E59  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_432E59  +
mov [esp+14h+var_14] offset aXPCanNotBuil_7 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_432E25  +
mov [edx+1Ch] esi +
jmp loc_432E50  +
mov [esp+14h+var_14] offset aXPCanNotSize_7 +
call sub_418450  +
jmp loc_432D90  +
***
jmp loc_432ED0  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F938 +
mov ebx [esp+20h] +
test eax eax +
jz loc_432EF4  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_432FA7  +
mov eax [ebx+8] +
test eax eax +
jz loc_432FA7  +
mov edx [ebx+10h] +
test edx edx +
jz loc_432FA7  +
mov ecx ds:dword_50F938 +
test ecx ecx +
jz loc_432F27  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_432FA7  +
mov eax [ebx+8] +
mov edx ds:dword_50F970 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_432FA1  +
test byte ptr [ebx+24h] 4 +
jz loc_432F79  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_432F79  +
mov edx ds:dword_50F970 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_432FA1  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_432FA7  +
mov edx ds:dword_50F970 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_432FA7  +
mov ds:dword_50F938 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_43354D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_43366B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_4330CE  +
jmp loc_433232  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_433232  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_4330C0  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_4330C0  +
cmp byte ptr [eax] 0 +
jz loc_4330C0  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_433119  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_433220  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_433220  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_4334B5  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_433100  +
cmp byte ptr [esi] 0 +
jz loc_433100  +
mov edi ds:dword_50F928 +
test edi edi +
jz loc_433659  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_433187  +
add eax 1 +
mov edi eax +
jz loc_4331C1  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_4331B1  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_4334C2  +
cmp al [esp+6Ch+var_2E] +
jz loc_4334C2  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_433180  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_8 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F928 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F928 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F928 ebx +
test edx edx +
jnz loc_43310C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_4330CE  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F928 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F92C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_433519  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_4332AE  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_4332AE  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_4332CB  +
jmp loc_4333A1  +
mov edi [edi+18h] +
test edi edi +
jz loc_4333A1  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_4332C0  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_15 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_4332C0  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_4334F0  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_4334D0  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_433388  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_433388  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_4332CB  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_433508  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_4333E8  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F974 +
mov eax ds:dword_50F98C +
mov ds:dword_50F984 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BED8C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BED88 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50F980 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F97C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50F988 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_43352A  +
mov eax ds:dword_50F984 +
test eax eax +
jnz loc_4334AD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_433680  +
jz loc_4334AD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_43353C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_433143  +
test edi edi +
jnz loc_433100  +
jmp loc_4331C1  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr51_c +
call sub_4184A0  +
jmp loc_43336A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_7 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_43332A  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_7 +
call sub_418450  +
jmp loc_4333C3  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_7 +
call sub_418450  +
jmp loc_43328C  +
mov ds:dword_50F984 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_7 +
call sub_418450  +
jmp loc_4334AD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_433640  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_7 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_433640  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_4335BD  +
cmp al 2 +
ja loc_433640  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_4335F0  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_433648  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_431A30 +
call sub_40AFD0  +
jmp loc_43309E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F928 eax +
jmp loc_433100  +
mov [esp+6Ch+var_6C] offset aLd_run_path_7 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_4330AF  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_7 +
call sub_418450  +
jmp loc_4334AD  +
***
jmp loc_4336A0  +
mov eax ds:dword_50F978 +
test eax eax +
jnz loc_4336B0  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_7 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_43389B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_433890  +
test byte ptr [ebp+24h] 10h +
jnz loc_433890  +
mov ecx [edx] +
test ecx ecx +
jz loc_433890  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_433890  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_433880  +
test byte ptr [esi+14h] 1 +
jz loc_433880  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_433880  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_43377F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_433787  +
and edx 300000h +
jz loc_43378F  +
cmp esi eax +
jz loc_4338B0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_433767  +
mov edx [esp+18h] +
test edx edx +
jz loc_433880  +
mov eax [esp+24h] +
test eax eax +
jz loc_433915  +
mov eax [esi] +
mov dword ptr [esp] offset aS_60 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_433909  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_4337D5  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_8 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_57 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_433880  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_58 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_4338A3  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_433835  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_8 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_433811  +
mov edx [ebp+8] +
test edx edx +
jnz loc_43386A  +
jmp loc_433940  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_433868  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_433732  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_4336F0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_433835  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_43378F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_433947  +
mov ecx ebp +
jmp loc_4338F2  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_4338F0  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_43378F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_4337D5  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_59 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_4337AE  +
***
mov edx ebp +
jmp loc_433871  +
***
mov ebp [esp+28h] +
jmp loc_433900  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_8 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_8 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_8 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_8 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_8 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_8 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_7 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_433A6C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_433A95  +
test esi esi +
jz loc_433A79  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_433A81  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_8 +
call sub_418450  +
jmp loc_433A6C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_433DC8  +
jle loc_433B00  +
cmp eax 133h +
jz loc_433D94  +
jg loc_433B38  +
cmp eax 131h +
jz loc_433C93  +
cmp eax 132h +
jnz loc_433D76  +
mov ds:dword_50F9F8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_433D80  +
jle loc_433CC0  +
cmp eax 12Eh +
jz loc_433B80  +
cmp eax 12Fh +
jnz loc_433D76  +
mov ds:dword_50FA04 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_433C40  +
cmp eax 198h +
jnz loc_433D76  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_11 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_433E02  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_433B32  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_8 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_433CA7  +
mov edi offset off_4E5F0A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_433CA7  +
mov edi offset unk_4E5F0E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_433E30  +
mov edi offset unk_4E5F11 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_433E30  +
mov edi offset unk_4E5F14 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_433ED5  +
mov edi offset off_4E5F18 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_433ED5  +
mov edi offset unk_4E5F1C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_433C2B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E5F20 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_433B32  +
mov dword_4BEEE8 10000h +
mov eax 1 +
jmp loc_433B32  +
***
mov eax ds:dword_50F9A4 +
test eax eax +
jz loc_433C5B  +
mov [esp] eax +
call free  +
mov ds:dword_50F9A4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_433E70  +
mov edi offset aNone_11 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_433AF3  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50F9A4 eax +
mov eax 1 +
jmp loc_433B32  +
***
mov ds:dword_50FA00 1 +
mov eax 1 +
jmp loc_433B32  +
***
mov dword_4BEEE8 8000h +
mov eax 1 +
jmp loc_433B32  +
***
cmp eax 7Ah +
jnz loc_433D76  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_8 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_433DF1  +
mov edi offset aMuldefs_8 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_433DE0  +
mov edi offset aMaxPageSize_8 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_433E84  +
mov edi offset aCommonPageSi_8 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_433EE9  +
mov edi offset aStackSize_8 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_433F73  +
mov edi offset aExecstack_8 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_433FB7  +
mov edi offset aNoexecstack_8 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_433FF2  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_433B32  +
***
xor eax eax +
jmp loc_433B32  +
***
mov dword_4BEEEC 0 +
mov eax 1 +
jmp loc_433B32  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_433AF3  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50F9F4 eax +
mov eax 1 +
jmp loc_433B32  +
***
mov ds:dword_50F9FC 1 +
mov eax 1 +
jmp loc_433B32  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_433B32  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_433B32  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_8 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_433E44  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_433B32  +
***
mov dword_4BEEE8 2000h +
mov eax 1 +
jmp loc_433B32  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_8 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_433F3A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_433B32  +
***
mov ds:dword_5141E8 offset aSha1_9 +
mov eax offset aSha1_9 +
jmp loc_433C7C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_433EB8  +
lea edx [eax-1] +
test eax edx +
jz loc_433AF3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_8 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_433AF3  +
***
mov dword_4BEEE8 4000h +
mov eax 1 +
jmp loc_433B32  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_433F1D  +
lea edx [eax-1] +
test eax edx +
jz loc_433AF3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_17 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_433AF3  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_8 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_433E18  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_18 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_433B32  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_433FD3  +
test eax eax +
js loc_433FD3  +
test eax eax +
jnz loc_433AF3  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_433AF3  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_433B32  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_8 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_433FA0  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_8 +
call sub_418450  +
mov eax 1 +
jmp loc_433B32  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E6640 +
test edi 1 +
mov eax 0A0h +
jnz loc_4340A8  +
test edi 2 +
jnz loc_4340C7  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_434096  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_4340A1  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E6640 +
add edi 1 +
mov esi 4E6641h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_43407E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_43407E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_4341E0  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_4341F0  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_8 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_43422C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_4341E0  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_4341E0  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_4341C8  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavr6_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_434240  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_13 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_43417A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_4341CC  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_8 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_8 +
mov ebx eax +
mov ds:dword_50FA0C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FA0C +
mov eax [eax+10h] +
test eax eax +
jz loc_4342EB  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FA0C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_434300  +
mov [esp+14h+var_14] offset aXPCanNotCrea_8 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FA0C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_8 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FA08 eax +
jz loc_434343  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FA0C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_8 +
call sub_418450  +
jmp loc_4342F7  +
***
jmp sub_434360  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_434390  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_4343C0  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_4343BB  +
mov ecx ds:dword_50FA0C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_4343B1  +
cmp [ecx+10h] eax +
jnz loc_4343D2  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_4343A0  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_43437C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_43442D  +
mov eax [ebx+0Ch] +
jmp ds:off_4E5FD8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__14 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_434470  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_4343F4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_434408  +
mov ebx [ebx+10h] +
jmp loc_4343EE  +
mov eax [ebx+10h] +
call sub_4343E0  +
mov eax [ebx+14h] +
call sub_4343E0  +
mov ebx [ebx+18h] +
jmp loc_4343EE  +
mov eax [ebx+10h] +
call sub_4343E0  +
jmp loc_434424  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_434424  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_8 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_434424  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_434630  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_434601  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_4345E0  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_434530  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_434530  +
***
mov dword ptr [esp] offset aPWarning_not_8 +
call sub_418450  +
mov edx 1 +
jmp loc_4345D5  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_4346B4  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_4346AA  +
test byte ptr [ebx+29h] 8 +
jz loc_4346AA  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_4346C0  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_434709  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_434788  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_434709  +
mov dword ptr [esp] offset dword_435A40 +
mov ds:dword_50F9B4 eax +
mov ds:dword_50F9B0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50F9B0 +
test ecx ecx +
jnz loc_4346AA  +
mov dword ptr [esp+4] offset dword_50F9C0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_434760  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_434772  +
mov dword ptr [esp] offset loc_434F20 +
mov ds:dword_50F9B8 0 +
call sub_40D9B0  +
mov eax ds:dword_50F9B8 +
test eax eax +
jz loc_4347A0  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_8 +
call sub_418450  +
jmp loc_43471D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_8 +
call sub_418420  +
jmp loc_434733  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_8 +
call sub_418450  +
jmp loc_4346DC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_434802  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_434802  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_434752  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddin_9 +
call sub_418450  +
jmp loc_434752  +
***
mov eax 2 +
jmp loc_4347C3  +
***
mov eax ds:dword_50F9B8 +
test eax eax +
jz loc_434F30  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_434F4C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_434F52  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_435016  +
mov eax ds:dword_50F9C0 +
cmp [esp+10h] eax +
jz loc_435032  +
mov eax ds:dword_50F9F0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_434F4C  +
mov dword ptr [esp+4] offset a_so__8 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_434F4C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_43505B  +
mov eax ds:dword_50F9F0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_434F4C  +
mov eax ds:dword_50F9F0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_8 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_434F4C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_8 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_434F4C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50F9C4 +
jnz loc_434F80  +
test ax ax +
jz loc_434F80  +
mov eax [esp+50h] +
mov ds:dword_50F9B8 eax +
jmp loc_434F4C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_434FCC  +
***
jmp sub_435080  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_435098  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr6 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_43517B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_43519E  +
test ds:byte_514824 2 +
jnz loc_4352B6  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_435350  +
mov ecx ds:dword_50F9A0 +
test ecx ecx +
jnz loc_435207  +
mov esi offset off_4BEDA0 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_4351F2  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_4351F2  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_4351F2  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BEE78 +
jb loc_4351C0  +
mov ds:dword_50F9A0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_435522  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_435236  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_4352F4  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_435230  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_435230  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_435236  +
test byte ptr [eax+29h] 8 +
jnz loc_435236  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_435236  +
test byte ptr [edx+24h] 10h +
jnz loc_435236  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_435230  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_435230  +
test byte ptr [ebx+14h] 1 +
jz loc_43519E  +
test ebp ebp +
jz loc_435570  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_43562C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_8 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_43519E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_4353E6  +
mov edx offset off_4BEE60 +
mov eax [edx+8] +
test eax eax +
jz loc_4355BE  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_4351AA  +
xor edi edi +
jmp loc_43539A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_4354F5  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_4353E2  +
mov edx [eax+14h] +
test edx edx +
jz loc_4354D0  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_435380  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_4354D0  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_435380  +
mov edi esi +
jmp loc_435380  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_4355B5  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_435440  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_435415  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BEE30 +
jnz loc_435307  +
test ebp ebp +
jnz loc_435440  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_9 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BEE30 +
mov eax esi +
cmp cl al +
jz loc_435307  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BEE00 +
jz loc_435307  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BEE48 +
jnz loc_435307  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BEDD0 +
jnz loc_435307  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BEDE8 +
jz loc_435307  +
test ebp ebp +
jnz loc_435778  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_8 +
mov ecx 4 +
cmps   +
jnz loc_4354B4  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BEE18 +
test ebp ebp +
jnz loc_435307  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BEDB8 +
mov eax offset off_4BEDA0 +
cmovnz edx eax +
jmp loc_435307  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_4357BA  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_16 +
mov ecx 0Dh +
cmps   +
jnz loc_435219  +
mov eax dword_4BEDA8 +
test eax eax +
jz loc_435219  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_435342  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_8 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_43519E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_435641  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_8 +
jmp loc_43519E  +
xor edx edx +
xor eax eax +
jmp loc_435312  +
mov eax [edx] +
test eax eax +
jz loc_43564E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_435312  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_435312  +
mov eax ds:dword_5146F8 +
jmp loc_435312  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_8 +
jmp loc_43519E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_8 +
jmp loc_43519E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_4357C7  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_435721  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_43576C  +
movzx ecx dl +
mov esi offset a_plt_8 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_43576C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_4356D7  +
test al al +
jz loc_4356DB  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_4356E7  +
test al al +
jz loc_43573F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_435716  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_435716  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_435750  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_43573F  +
mov eax [ebp+18h] +
mov edi offset a_rel_8 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_435698  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_435716  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_435701  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_435793  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_4355EB  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_435758  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_4354A3  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_4354A3  +
jmp loc_4354B4  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_435760  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_435760  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_435760  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_4351AA  +
mov [esp+4Ch+var_20] 0 +
jmp loc_435760  +
***
jmp sub_4357E0  +
***
sub esp 14h +
mov ebx ds:dword_50FA04 +
test ebx ebx +
jnz loc_435820  +
cmp ds:dword_514834 1 +
jbe loc_435820  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_435940  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_4358D0  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_4358E0  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_4358E0  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_4358F0  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_4358C1  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_4358E0  +
cmp ebx 6 +
jle loc_435930  +
sub ebx 1 +
jz loc_4358F8  +
mov eax 1 +
jmp loc_435842  +
mov [esp+14h+var_14] offset aFPMapSection_8 +
call sub_418450  +
jmp loc_435898  +
mov [esp+14h+var_14] offset aXP_eh_frame__8 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FA04 +
test eax eax +
jz loc_43590D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_435884  +
mov [esp+14h+var_14] offset aPFLoopingInM_8 +
call sub_418450  +
mov eax ds:dword_50FA04 +
test eax eax +
jnz loc_4358E9  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_4358E9  +
mov [esp+14h+var_14] offset aXPCanNotBuil_8 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_4358B5  +
mov [edx+1Ch] esi +
jmp loc_4358E0  +
mov [esp+14h+var_14] offset aXPCanNotSize_8 +
call sub_418450  +
jmp loc_435820  +
***
jmp loc_435960  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50F9B8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_435984  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_435A37  +
mov eax [ebx+8] +
test eax eax +
jz loc_435A37  +
mov edx [ebx+10h] +
test edx edx +
jz loc_435A37  +
mov ecx ds:dword_50F9B8 +
test ecx ecx +
jz loc_4359B7  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_435A37  +
mov eax [ebx+8] +
mov edx ds:dword_50F9F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_435A31  +
test byte ptr [ebx+24h] 4 +
jz loc_435A09  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_435A09  +
mov edx ds:dword_50F9F0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_435A31  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_435A37  +
mov edx ds:dword_50F9F0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_435A37  +
mov ds:dword_50F9B8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_435FDD  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_4360FB  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_435B5E  +
jmp loc_435CC2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_435CC2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_435B50  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_435B50  +
cmp byte ptr [eax] 0 +
jz loc_435B50  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_435BA9  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_435CB0  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_435CB0  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_435F40  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_435B90  +
cmp byte ptr [esi] 0 +
jz loc_435B90  +
mov edi ds:dword_50F9A8 +
test edi edi +
jz loc_4360E9  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_435C17  +
add eax 1 +
mov edi eax +
jz loc_435C51  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_435C41  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_435F50  +
cmp al [esp+6Ch+var_2E] +
jz loc_435F50  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_435C10  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_9 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50F9A8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50F9A8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50F9A8 ebx +
test edx edx +
jnz loc_435B9C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_435B5E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50F9A8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50F9AC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_435FA9  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_435D3E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_435D3E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_435D5B  +
jmp loc_435E31  +
mov edi [edi+18h] +
test edi edi +
jz loc_435E31  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_435D50  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_17 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_435D50  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_435F80  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_435F60  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_435E18  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_435E18  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_435D5B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_435F98  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_435E78  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50F9F4 +
mov eax ds:dword_50FA0C +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BEEEC +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BEEE8 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FA00 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50F9FC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FA04 +
mov [esp+6Ch+var_60] edx +
mov edx ds:dword_50FA08 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_435FBA  +
mov eax ds:dword_50FA04 +
test eax eax +
jnz loc_435F35  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_436110  +
jz loc_435F35  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_435FCC  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_435BD3  +
test edi edi +
jnz loc_435B90  +
jmp loc_435C51  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavr6_c +
call sub_4184A0  +
jmp loc_435DFA  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_8 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_435DBA  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_8 +
call sub_418450  +
jmp loc_435E53  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_8 +
call sub_418450  +
jmp loc_435D1C  +
mov ds:dword_50FA04 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_8 +
call sub_418450  +
jmp loc_435F35  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4360D0  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_8 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_4360D0  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_43604D  +
cmp al 2 +
ja loc_4360D0  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_436080  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_4360D8  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_4344C0 +
call sub_40AFD0  +
jmp loc_435B2E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50F9A8 eax +
jmp loc_435B90  +
mov [esp+6Ch+var_6C] offset aLd_run_path_8 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_435B3F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_8 +
call sub_418450  +
jmp loc_435F35  +
***
jmp loc_436130  +
mov eax ds:dword_50F9F8 +
test eax eax +
jnz loc_436140  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_8 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_43632B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_436320  +
test byte ptr [ebp+24h] 10h +
jnz loc_436320  +
mov ecx [edx] +
test ecx ecx +
jz loc_436320  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_436320  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_436310  +
test byte ptr [esi+14h] 1 +
jz loc_436310  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_436310  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_43620F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_436217  +
and edx 300000h +
jz loc_43621F  +
cmp esi eax +
jz loc_436340  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_4361F7  +
mov edx [esp+18h] +
test edx edx +
jz loc_436310  +
mov eax [esp+24h] +
test eax eax +
jz loc_4363A5  +
mov eax [esi] +
mov dword ptr [esp] offset aS_64 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_436399  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_436265  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_9 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_61 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_436310  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_62 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_436333  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_4362C5  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_9 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_4362A1  +
mov edx [ebp+8] +
test edx edx +
jnz loc_4362FA  +
jmp loc_4363D0  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_4362F8  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_4361C2  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_436180  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_4362C5  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_43621F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_4363D7  +
mov ecx ebp +
jmp loc_436382  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_436380  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_43621F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_436265  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_63 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_43623E  +
***
mov edx ebp +
jmp loc_436301  +
***
mov ebp [esp+28h] +
jmp loc_436390  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapArou_9 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRep_9 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfThe_9 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsUs_9 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxUs_9 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMemU_9 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_8 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_4364FC  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_436525  +
test esi esi +
jz loc_436509  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_436511  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbol_9 +
call sub_418450  +
jmp loc_4364FC  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_436858  +
jle loc_436590  +
cmp eax 133h +
jz loc_436824  +
jg loc_4365C8  +
cmp eax 131h +
jz loc_436723  +
cmp eax 132h +
jnz loc_436806  +
mov ds:dword_50FA78 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_436810  +
jle loc_436750  +
cmp eax 12Eh +
jz loc_436610  +
cmp eax 12Fh +
jnz loc_436806  +
mov ds:dword_50FA84 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_4366D0  +
cmp eax 198h +
jnz loc_436806  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_12 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_436892  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_4365C2  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_9 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_436737  +
mov edi offset off_4E6D0A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_436737  +
mov edi offset unk_4E6D0E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4368C0  +
mov edi offset unk_4E6D11 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4368C0  +
mov edi offset unk_4E6D14 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_436965  +
mov edi offset off_4E6D18 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_436965  +
mov edi offset unk_4E6D1C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4366BB  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E6D20 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_4365C2  +
mov dword_4BF048 10000h +
mov eax 1 +
jmp loc_4365C2  +
***
mov eax ds:dword_50FA24 +
test eax eax +
jz loc_4366EB  +
mov [esp] eax +
call free  +
mov ds:dword_50FA24 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_436900  +
mov edi offset aNone_12 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_436583  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FA24 eax +
mov eax 1 +
jmp loc_4365C2  +
***
mov ds:dword_50FA80 1 +
mov eax 1 +
jmp loc_4365C2  +
***
mov dword_4BF048 8000h +
mov eax 1 +
jmp loc_4365C2  +
***
cmp eax 7Ah +
jnz loc_436806  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_9 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_436881  +
mov edi offset aMuldefs_9 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_436870  +
mov edi offset aMaxPageSize_9 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_436914  +
mov edi offset aCommonPageSi_9 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_436979  +
mov edi offset aStackSize_9 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_436A03  +
mov edi offset aExecstack_9 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_436A47  +
mov edi offset aNoexecstack_9 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_436A82  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_4365C2  +
***
xor eax eax +
jmp loc_4365C2  +
***
mov dword_4BF04C 0 +
mov eax 1 +
jmp loc_4365C2  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_436583  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FA74 eax +
mov eax 1 +
jmp loc_4365C2  +
***
mov ds:dword_50FA7C 1 +
mov eax 1 +
jmp loc_4365C2  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_4365C2  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_4365C2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_9 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4368D4  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_4365C2  +
***
mov dword_4BF048 2000h +
mov eax 1 +
jmp loc_4365C2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_9 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4369CA  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_4365C2  +
***
mov ds:dword_5141E8 offset aSha1_10 +
mov eax offset aSha1_10 +
jmp loc_43670C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_436948  +
lea edx [eax-1] +
test eax edx +
jz loc_436583  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMax_9 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_436583  +
***
mov dword_4BF048 4000h +
mov eax 1 +
jmp loc_4365C2  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_4369AD  +
lea edx [eax-1] +
test eax edx +
jz loc_436583  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_19 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_436583  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_9 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_4368A8  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_20 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_4365C2  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_436A63  +
test eax eax +
js loc_436A63  +
test eax eax +
jnz loc_436583  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_436583  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_4365C2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSta_9 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_436A30  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSIg_9 +
call sub_418450  +
mov eax 1 +
jmp loc_4365C2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E7460 +
test edi 1 +
mov eax 0A0h +
jnz loc_436B38  +
test edi 2 +
jnz loc_436B57  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_436B26  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_436B31  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E7460 +
add edi 1 +
mov esi 4E7461h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_436B0E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_436B0E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_436C70  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_436C80  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_9 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_436CBC  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_436C70  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_436C70  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_436C58  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrxmega1_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_436CD0  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_14 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_436C0A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_436C5C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_9 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_9 +
mov ebx eax +
mov ds:dword_50FA8C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FA8C +
mov eax [eax+10h] +
test eax eax +
jz loc_436D7B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FA8C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_436D90  +
mov [esp+14h+var_14] offset aXPCanNotCrea_9 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FA8C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampolines_9 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FA88 eax +
jz loc_436DD3  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FA8C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMake_9 +
call sub_418450  +
jmp loc_436D87  +
***
jmp sub_436DF0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_436E20  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_436E50  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_436E4B  +
mov ecx ds:dword_50FA8C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_436E41  +
cmp [ecx+10h] eax +
jnz loc_436E62  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_436E30  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_436E0C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_436EBD  +
mov eax [ebx+0Ch] +
jmp ds:off_4E6DDC[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__15 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_436F00  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_436E84  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_436E98  +
mov ebx [ebx+10h] +
jmp loc_436E7E  +
mov eax [ebx+10h] +
call sub_436E70  +
mov eax [ebx+14h] +
call sub_436E70  +
mov ebx [ebx+18h] +
jmp loc_436E7E  +
mov eax [ebx+10h] +
call sub_436E70  +
jmp loc_436EB4  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_436EB4  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToRe_9 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_436EB4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_4370C0  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_437091  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_437070  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_436FC0  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_436FC0  +
***
mov dword ptr [esp] offset aPWarning_not_9 +
call sub_418450  +
mov edx 1 +
jmp loc_437065  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_437144  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_43713A  +
test byte ptr [ebx+29h] 8 +
jz loc_43713A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_437150  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_437199  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_437218  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_437199  +
mov dword ptr [esp] offset dword_4384D0 +
mov ds:dword_50FA34 eax +
mov ds:dword_50FA30 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FA30 +
test ecx ecx +
jnz loc_43713A  +
mov dword ptr [esp+4] offset dword_50FA40 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_4371F0  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_437202  +
mov dword ptr [esp] offset loc_4379B0 +
mov ds:dword_50FA38 0 +
call sub_40D9B0  +
mov eax ds:dword_50FA38 +
test eax eax +
jz loc_437230  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_statF_9 +
call sub_418450  +
jmp loc_4371AD  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_9 +
call sub_418420  +
jmp loc_4371C3  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf_g_9 +
call sub_418450  +
jmp loc_43716C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_437292  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_437292  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_4371E2  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_10 +
call sub_418450  +
jmp loc_4371E2  +
***
mov eax 2 +
jmp loc_437253  +
***
mov eax ds:dword_50FA38 +
test eax eax +
jz loc_4379C0  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_4379DC  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_4379E2  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_437AA6  +
mov eax ds:dword_50FA40 +
cmp [esp+10h] eax +
jz loc_437AC2  +
mov eax ds:dword_50FA70 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_4379DC  +
mov dword ptr [esp+4] offset a_so__9 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_4379DC  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_437AEB  +
mov eax ds:dword_50FA70 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_4379DC  +
mov eax ds:dword_50FA70 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNee_9 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4379DC  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statFa_9 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4379DC  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FA44 +
jnz loc_437A10  +
test ax ax +
jz loc_437A10  +
mov eax [esp+50h] +
mov ds:dword_50FA38 eax +
jmp loc_4379DC  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_437A5C  +
***
jmp sub_437B10  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_437B28  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr101 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_437C0B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_437C2E  +
test ds:byte_514824 2 +
jnz loc_437D46  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_437DE0  +
mov ecx ds:dword_50FA20 +
test ecx ecx +
jnz loc_437C97  +
mov esi offset off_4BEF00 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_437C82  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_437C82  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_437C82  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BEFD8 +
jb loc_437C50  +
mov ds:dword_50FA20 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_437FB2  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_437CC6  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_437D84  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_437CC0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_437CC0  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_437CC6  +
test byte ptr [eax+29h] 8 +
jnz loc_437CC6  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_437CC6  +
test byte ptr [edx+24h] 10h +
jnz loc_437CC6  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_437CC0  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_437CC0  +
test byte ptr [ebx+14h] 1 +
jz loc_437C2E  +
test ebp ebp +
jz loc_438000  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_4380BC  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_9 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_437C2E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_437E76  +
mov edx offset off_4BEFC0 +
mov eax [edx+8] +
test eax eax +
jz loc_43804E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_437C3A  +
xor edi edi +
jmp loc_437E2A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_437F85  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_437E72  +
mov edx [eax+14h] +
test edx edx +
jz loc_437F60  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_437E10  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_437F60  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_437E10  +
mov edi esi +
jmp loc_437E10  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_438045  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_437ED0  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_437EA5  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BEF90 +
jnz loc_437D97  +
test ebp ebp +
jnz loc_437ED0  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_10 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BEF90 +
mov eax esi +
cmp cl al +
jz loc_437D97  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BEF60 +
jz loc_437D97  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BEFA8 +
jnz loc_437D97  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BEF30 +
jnz loc_437D97  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BEF48 +
jz loc_437D97  +
test ebp ebp +
jnz loc_438208  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_9 +
mov ecx 4 +
cmps   +
jnz loc_437F44  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BEF78 +
test ebp ebp +
jnz loc_437D97  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BEF18 +
mov eax offset off_4BEF00 +
cmovnz edx eax +
jmp loc_437D97  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_43824A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_18 +
mov ecx 0Dh +
cmps   +
jnz loc_437CA9  +
mov eax dword_4BEF08 +
test eax eax +
jz loc_437CA9  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_437DD2  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_9 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_437C2E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_4380D1  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_9 +
jmp loc_437C2E  +
xor edx edx +
xor eax eax +
jmp loc_437DA2  +
mov eax [edx] +
test eax eax +
jz loc_4380DE  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_437DA2  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_437DA2  +
mov eax ds:dword_5146F8 +
jmp loc_437DA2  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_9 +
jmp loc_437C2E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_9 +
jmp loc_437C2E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_438257  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_4381B1  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_4381FC  +
movzx ecx dl +
mov esi offset a_plt_9 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_4381FC  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_438167  +
test al al +
jz loc_43816B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_438177  +
test al al +
jz loc_4381CF  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_4381A6  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_4381A6  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_4381E0  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_4381CF  +
mov eax [ebp+18h] +
mov edi offset a_rel_9 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_438128  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_4381A6  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_438191  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_438223  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_43807B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_4381E8  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_437F33  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_437F33  +
jmp loc_437F44  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4381F0  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4381F0  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_4381F0  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_437C3A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_4381F0  +
***
jmp sub_438270  +
***
sub esp 14h +
mov ebx ds:dword_50FA84 +
test ebx ebx +
jnz loc_4382B0  +
cmp ds:dword_514834 1 +
jbe loc_4382B0  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_4383D0  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_438360  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_438370  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_438370  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_438380  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_438351  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_438370  +
cmp ebx 6 +
jle loc_4383C0  +
sub ebx 1 +
jz loc_438388  +
mov eax 1 +
jmp loc_4382D2  +
mov [esp+14h+var_14] offset aFPMapSection_9 +
call sub_418450  +
jmp loc_438328  +
mov [esp+14h+var_14] offset aXP_eh_frame__9 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FA84 +
test eax eax +
jz loc_43839D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_438314  +
mov [esp+14h+var_14] offset aPFLoopingInM_9 +
call sub_418450  +
mov eax ds:dword_50FA84 +
test eax eax +
jnz loc_438379  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_438379  +
mov [esp+14h+var_14] offset aXPCanNotBuil_9 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_438345  +
mov [edx+1Ch] esi +
jmp loc_438370  +
mov [esp+14h+var_14] offset aXPCanNotSize_9 +
call sub_418450  +
jmp loc_4382B0  +
***
jmp loc_4383F0  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FA38 +
mov ebx [esp+20h] +
test eax eax +
jz loc_438414  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_4384C7  +
mov eax [ebx+8] +
test eax eax +
jz loc_4384C7  +
mov edx [ebx+10h] +
test edx edx +
jz loc_4384C7  +
mov ecx ds:dword_50FA38 +
test ecx ecx +
jz loc_438447  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_4384C7  +
mov eax [ebx+8] +
mov edx ds:dword_50FA70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_4384C1  +
test byte ptr [ebx+24h] 4 +
jz loc_438499  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_438499  +
mov edx ds:dword_50FA70 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_4384C1  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_4384C7  +
mov edx ds:dword_50FA70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_4384C7  +
mov ds:dword_50FA38 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_438A6D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_438B8B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_4385EE  +
jmp loc_438752  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_438752  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_4385E0  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_4385E0  +
cmp byte ptr [eax] 0 +
jz loc_4385E0  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_438639  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_438740  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_438740  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_4389D5  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_438620  +
cmp byte ptr [esi] 0 +
jz loc_438620  +
mov edi ds:dword_50FA28 +
test edi edi +
jz loc_438B79  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_4386A7  +
add eax 1 +
mov edi eax +
jz loc_4386E1  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_4386D1  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_4389E2  +
cmp al [esp+6Ch+var_2E] +
jz loc_4389E2  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_4386A0  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_10 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FA28 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FA28 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FA28 ebx +
test edx edx +
jnz loc_43862C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_4385EE  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FA28 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FA2C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_438A39  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_4387CE  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_4387CE  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_4387EB  +
jmp loc_4388C1  +
mov edi [edi+18h] +
test edi edi +
jz loc_4388C1  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_4387E0  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_19 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_4387E0  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_438A10  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_4389F0  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_4388A8  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_4388A8  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_4387EB  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_438A28  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_438908  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FA74 +
mov eax ds:dword_50FA8C +
mov ds:dword_50FA84 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF04C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF048 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FA80 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FA7C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FA88 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_438A4A  +
mov eax ds:dword_50FA84 +
test eax eax +
jnz loc_4389CD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_438BA0  +
jz loc_4389CD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_438A5C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_438663  +
test edi edi +
jnz loc_438620  +
jmp loc_4386E1  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrxmega1_c +
call sub_4184A0  +
jmp loc_43888A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadCo_9 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_43884A  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_9 +
call sub_418450  +
jmp loc_4388E3  +
mov [esp+6Ch+var_6C] offset aPFFailedToSe_9 +
call sub_418450  +
jmp loc_4387AC  +
mov ds:dword_50FA84 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSize_9 +
call sub_418450  +
jmp loc_4389CD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_438B60  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_start_9 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_438B60  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_438ADD  +
cmp al 2 +
ja loc_438B60  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_438B10  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_438B68  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_436F50 +
call sub_40AFD0  +
jmp loc_4385BE  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FA28 eax +
jmp loc_438620  +
mov [esp+6Ch+var_6C] offset aLd_run_path_9 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_4385CF  +
mov [esp+6Ch+var_6C] offset aXPCanNotSetu_9 +
call sub_418450  +
jmp loc_4389CD  +
***
jmp loc_438BC0  +
mov eax ds:dword_50FA78 +
test eax eax +
jnz loc_438BD0  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesAn_9 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_438DBB  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_438DB0  +
test byte ptr [ebp+24h] 10h +
jnz loc_438DB0  +
mov ecx [edx] +
test ecx ecx +
jz loc_438DB0  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_438DB0  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_438DA0  +
test byte ptr [esi+14h] 1 +
jz loc_438DA0  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_438DA0  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_438C9F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_438CA7  +
and edx 300000h +
jz loc_438CAF  +
cmp esi eax +
jz loc_438DD0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_438C87  +
mov edx [esp+18h] +
test edx edx +
jz loc_438DA0  +
mov eax [esp+24h] +
test eax eax +
jz loc_438E35  +
mov eax [esi] +
mov dword ptr [esp] offset aS_68 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_438E29  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_438CF5  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_10 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_65 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_438DA0  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_66 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_438DC3  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_438D55  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_10 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_438D31  +
mov edx [ebp+8] +
test edx edx +
jnz loc_438D8A  +
jmp loc_438E60  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_438D88  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_438C52  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_438C10  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_438D55  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_438CAF  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_438E67  +
mov ecx ebp +
jmp loc_438E12  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_438E10  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_438CAF  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_438CF5  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_67 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_438CCE  +
***
mov edx ebp +
jmp loc_438D91  +
***
mov ebp [esp+28h] +
jmp loc_438E20  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapAro_10 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRe_10 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfTh_10 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsU_10 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxU_10 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMem_10 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddres_9 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_438F8C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_438FB5  +
test esi esi +
jz loc_438F99  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_438FA1  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbo_10 +
call sub_418450  +
jmp loc_438F8C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_4392E8  +
jle loc_439020  +
cmp eax 133h +
jz loc_4392B4  +
jg loc_439058  +
cmp eax 131h +
jz loc_4391B3  +
cmp eax 132h +
jnz loc_439296  +
mov ds:dword_50FAF8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_4392A0  +
jle loc_4391E0  +
cmp eax 12Eh +
jz loc_4390A0  +
cmp eax 12Fh +
jnz loc_439296  +
mov ds:dword_50FB04 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_439160  +
cmp eax 198h +
jnz loc_439296  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_13 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_439322  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_439052  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_10 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4391C7  +
mov edi offset off_4E7B2A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4391C7  +
mov edi offset unk_4E7B2E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_439350  +
mov edi offset unk_4E7B31 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_439350  +
mov edi offset unk_4E7B34 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4393F5  +
mov edi offset off_4E7B38 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4393F5  +
mov edi offset unk_4E7B3C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43914B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E7B40 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_439052  +
mov dword_4BF1A8 10000h +
mov eax 1 +
jmp loc_439052  +
***
mov eax ds:dword_50FAA4 +
test eax eax +
jz loc_43917B  +
mov [esp] eax +
call free  +
mov ds:dword_50FAA4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_439390  +
mov edi offset aNone_13 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_439013  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FAA4 eax +
mov eax 1 +
jmp loc_439052  +
***
mov ds:dword_50FB00 1 +
mov eax 1 +
jmp loc_439052  +
***
mov dword_4BF1A8 8000h +
mov eax 1 +
jmp loc_439052  +
***
cmp eax 7Ah +
jnz loc_439296  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_10 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_439311  +
mov edi offset aMuldefs_10 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_439300  +
mov edi offset aMaxPageSize_10 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_4393A4  +
mov edi offset aCommonPageS_10 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_439409  +
mov edi offset aStackSize_10 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_439493  +
mov edi offset aExecstack_10 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_4394D7  +
mov edi offset aNoexecstack_10 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_439512  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_439052  +
***
xor eax eax +
jmp loc_439052  +
***
mov dword_4BF1AC 0 +
mov eax 1 +
jmp loc_439052  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_439013  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FAF4 eax +
mov eax 1 +
jmp loc_439052  +
***
mov ds:dword_50FAFC 1 +
mov eax 1 +
jmp loc_439052  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_439052  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_439052  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_10 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_439364  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_439052  +
***
mov dword_4BF1A8 2000h +
mov eax 1 +
jmp loc_439052  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_10 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_43945A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_439052  +
***
mov ds:dword_5141E8 offset aSha1_11 +
mov eax offset aSha1_11 +
jmp loc_43919C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_4393D8  +
lea edx [eax-1] +
test eax edx +
jz loc_439013  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMa_10 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_439013  +
***
mov dword_4BF1A8 4000h +
mov eax 1 +
jmp loc_439052  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_43943D  +
lea edx [eax-1] +
test eax edx +
jz loc_439013  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_21 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_439013  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_10 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_439338  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_22 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_439052  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_4394F3  +
test eax eax +
js loc_4394F3  +
test eax eax +
jnz loc_439013  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_439013  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_439052  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSt_10 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_4394C0  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSI_10 +
call sub_418450  +
mov eax 1 +
jmp loc_439052  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E8280 +
test edi 1 +
mov eax 0A0h +
jnz loc_4395C8  +
test edi 2 +
jnz loc_4395E7  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_4395B6  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_4395C1  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E8280 +
add edi 1 +
mov esi 4E8281h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_43959E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_43959E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_439700  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_439710  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_10 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_43974C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_439700  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_439700  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_4396E8  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrxmega2_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_439760  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_15 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_43969A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_4396EC  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_10 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_10 +
mov ebx eax +
mov ds:dword_50FB0C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FB0C +
mov eax [eax+10h] +
test eax eax +
jz loc_43980B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FB0C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_439820  +
mov [esp+14h+var_14] offset aXPCanNotCre_10 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FB0C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampoline_10 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FB08 eax +
jz loc_439863  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FB0C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMak_10 +
call sub_418450  +
jmp loc_439817  +
***
jmp sub_439880  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4398B0  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_4398E0  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_4398DB  +
mov ecx ds:dword_50FB0C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_4398D1  +
cmp [ecx+10h] eax +
jnz loc_4398F2  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_4398C0  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_43989C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_43994D  +
mov eax [ebx+0Ch] +
jmp ds:off_4E7BFC[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__16 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_439990  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_439914  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_439928  +
mov ebx [ebx+10h] +
jmp loc_43990E  +
mov eax [ebx+10h] +
call sub_439900  +
mov eax [ebx+14h] +
call sub_439900  +
mov ebx [ebx+18h] +
jmp loc_43990E  +
mov eax [ebx+10h] +
call sub_439900  +
jmp loc_439944  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_439944  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToR_10 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_439944  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_439B50  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_439B21  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_439B00  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_439A50  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_439A50  +
***
mov dword ptr [esp] offset aPWarning_no_10 +
call sub_418450  +
mov edx 1 +
jmp loc_439AF5  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_439BD4  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_439BCA  +
test byte ptr [ebx+29h] 8 +
jz loc_439BCA  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_439BE0  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_439C29  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_439CA8  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_439C29  +
mov dword ptr [esp] offset dword_43AF60 +
mov ds:dword_50FAB4 eax +
mov ds:dword_50FAB0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FAB0 +
test ecx ecx +
jnz loc_439BCA  +
mov dword ptr [esp+4] offset dword_50FAC0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_439C80  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_439C92  +
mov dword ptr [esp] offset loc_43A440 +
mov ds:dword_50FAB8 0 +
call sub_40D9B0  +
mov eax ds:dword_50FAB8 +
test eax eax +
jz loc_439CC0  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_stat_10 +
call sub_418450  +
jmp loc_439C3D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_10 +
call sub_418420  +
jmp loc_439C53  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf__10 +
call sub_418450  +
jmp loc_439BFC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_439D22  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_439D22  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_439C72  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_11 +
call sub_418450  +
jmp loc_439C72  +
***
mov eax 2 +
jmp loc_439CE3  +
***
mov eax ds:dword_50FAB8 +
test eax eax +
jz loc_43A450  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_43A46C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_43A472  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_43A536  +
mov eax ds:dword_50FAC0 +
cmp [esp+10h] eax +
jz loc_43A552  +
mov eax ds:dword_50FAF0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_43A46C  +
mov dword ptr [esp+4] offset a_so__10 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_43A46C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_43A57B  +
mov eax ds:dword_50FAF0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_43A46C  +
mov eax ds:dword_50FAF0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNe_10 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43A46C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statF_10 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43A46C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FAC4 +
jnz loc_43A4A0  +
test ax ax +
jz loc_43A4A0  +
mov eax [esp+50h] +
mov ds:dword_50FAB8 eax +
jmp loc_43A46C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_43A4EC  +
***
jmp sub_43A5A0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_43A5B8  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr102 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_43A69B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_43A6BE  +
test ds:byte_514824 2 +
jnz loc_43A7D6  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_43A870  +
mov ecx ds:dword_50FAA0 +
test ecx ecx +
jnz loc_43A727  +
mov esi offset off_4BF060 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_43A712  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_43A712  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_43A712  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BF138 +
jb loc_43A6E0  +
mov ds:dword_50FAA0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_43AA42  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_43A756  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_43A814  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_43A750  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_43A750  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_43A756  +
test byte ptr [eax+29h] 8 +
jnz loc_43A756  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_43A756  +
test byte ptr [edx+24h] 10h +
jnz loc_43A756  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_43A750  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_43A750  +
test byte ptr [ebx+14h] 1 +
jz loc_43A6BE  +
test ebp ebp +
jz loc_43AA90  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_43AB4C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_10 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_43A6BE  +
test [esp+4Ch+var_24] 2001h +
jnz loc_43A906  +
mov edx offset off_4BF120 +
mov eax [edx+8] +
test eax eax +
jz loc_43AADE  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_43A6CA  +
xor edi edi +
jmp loc_43A8BA  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_43AA15  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_43A902  +
mov edx [eax+14h] +
test edx edx +
jz loc_43A9F0  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_43A8A0  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_43A9F0  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_43A8A0  +
mov edi esi +
jmp loc_43A8A0  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_43AAD5  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_43A960  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_43A935  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BF0F0 +
jnz loc_43A827  +
test ebp ebp +
jnz loc_43A960  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_11 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BF0F0 +
mov eax esi +
cmp cl al +
jz loc_43A827  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BF0C0 +
jz loc_43A827  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BF108 +
jnz loc_43A827  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BF090 +
jnz loc_43A827  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BF0A8 +
jz loc_43A827  +
test ebp ebp +
jnz loc_43AC98  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_10 +
mov ecx 4 +
cmps   +
jnz loc_43A9D4  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BF0D8 +
test ebp ebp +
jnz loc_43A827  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BF078 +
mov eax offset off_4BF060 +
cmovnz edx eax +
jmp loc_43A827  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_43ACDA  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_20 +
mov ecx 0Dh +
cmps   +
jnz loc_43A739  +
mov eax dword_4BF068 +
test eax eax +
jz loc_43A739  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_43A862  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_10 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_43A6BE  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_43AB61  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_10 +
jmp loc_43A6BE  +
xor edx edx +
xor eax eax +
jmp loc_43A832  +
mov eax [edx] +
test eax eax +
jz loc_43AB6E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_43A832  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_43A832  +
mov eax ds:dword_5146F8 +
jmp loc_43A832  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_10 +
jmp loc_43A6BE  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_10 +
jmp loc_43A6BE  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_43ACE7  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_43AC41  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_43AC8C  +
movzx ecx dl +
mov esi offset a_plt_10 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_43AC8C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_43ABF7  +
test al al +
jz loc_43ABFB  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_43AC07  +
test al al +
jz loc_43AC5F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_43AC36  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_43AC36  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_43AC70  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_43AC5F  +
mov eax [ebp+18h] +
mov edi offset a_rel_10 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43ABB8  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_43AC36  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_43AC21  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_43ACB3  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_43AB0B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_43AC78  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_43A9C3  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_43A9C3  +
jmp loc_43A9D4  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_43AC80  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_43AC80  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_43AC80  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_43A6CA  +
mov [esp+4Ch+var_20] 0 +
jmp loc_43AC80  +
***
jmp sub_43AD00  +
***
sub esp 14h +
mov ebx ds:dword_50FB04 +
test ebx ebx +
jnz loc_43AD40  +
cmp ds:dword_514834 1 +
jbe loc_43AD40  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_43AE60  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_43ADF0  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_43AE00  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_43AE00  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_43AE10  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_43ADE1  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_43AE00  +
cmp ebx 6 +
jle loc_43AE50  +
sub ebx 1 +
jz loc_43AE18  +
mov eax 1 +
jmp loc_43AD62  +
mov [esp+14h+var_14] offset aFPMapSectio_10 +
call sub_418450  +
jmp loc_43ADB8  +
mov [esp+14h+var_14] offset aXP_eh_frame_10 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FB04 +
test eax eax +
jz loc_43AE2D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_43ADA4  +
mov [esp+14h+var_14] offset aPFLoopingIn_10 +
call sub_418450  +
mov eax ds:dword_50FB04 +
test eax eax +
jnz loc_43AE09  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_43AE09  +
mov [esp+14h+var_14] offset aXPCanNotBui_10 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_43ADD5  +
mov [edx+1Ch] esi +
jmp loc_43AE00  +
mov [esp+14h+var_14] offset aXPCanNotSiz_10 +
call sub_418450  +
jmp loc_43AD40  +
***
jmp loc_43AE80  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FAB8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_43AEA4  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_43AF57  +
mov eax [ebx+8] +
test eax eax +
jz loc_43AF57  +
mov edx [ebx+10h] +
test edx edx +
jz loc_43AF57  +
mov ecx ds:dword_50FAB8 +
test ecx ecx +
jz loc_43AED7  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_43AF57  +
mov eax [ebx+8] +
mov edx ds:dword_50FAF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_43AF51  +
test byte ptr [ebx+24h] 4 +
jz loc_43AF29  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_43AF29  +
mov edx ds:dword_50FAF0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_43AF51  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_43AF57  +
mov edx ds:dword_50FAF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_43AF57  +
mov ds:dword_50FAB8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_43B4FD  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_43B61B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_43B07E  +
jmp loc_43B1E2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_43B1E2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_43B070  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_43B070  +
cmp byte ptr [eax] 0 +
jz loc_43B070  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_43B0C9  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_43B1D0  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_43B1D0  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_43B465  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_43B0B0  +
cmp byte ptr [esi] 0 +
jz loc_43B0B0  +
mov edi ds:dword_50FAA8 +
test edi edi +
jz loc_43B609  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_43B137  +
add eax 1 +
mov edi eax +
jz loc_43B171  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_43B161  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_43B472  +
cmp al [esp+6Ch+var_2E] +
jz loc_43B472  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_43B130  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_11 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FAA8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FAA8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FAA8 ebx +
test edx edx +
jnz loc_43B0BC  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_43B07E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FAA8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FAAC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_43B4C9  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_43B25E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_43B25E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_43B27B  +
jmp loc_43B351  +
mov edi [edi+18h] +
test edi edi +
jz loc_43B351  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_43B270  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_21 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_43B270  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_43B4A0  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_43B480  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_43B338  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_43B338  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_43B27B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_43B4B8  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_43B398  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FAF4 +
mov eax ds:dword_50FB0C +
mov ds:dword_50FB04 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF1AC +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF1A8 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FB00 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FAFC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FB08 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_43B4DA  +
mov eax ds:dword_50FB04 +
test eax eax +
jnz loc_43B45D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_43B630  +
jz loc_43B45D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_43B4EC  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_43B0F3  +
test edi edi +
jnz loc_43B0B0  +
jmp loc_43B171  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrxmega2_c +
call sub_4184A0  +
jmp loc_43B31A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadC_10 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_43B2DA  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_10 +
call sub_418450  +
jmp loc_43B373  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_10 +
call sub_418450  +
jmp loc_43B23C  +
mov ds:dword_50FB04 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSiz_10 +
call sub_418450  +
jmp loc_43B45D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_43B5F0  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_star_10 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_43B5F0  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_43B56D  +
cmp al 2 +
ja loc_43B5F0  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_43B5A0  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_43B5F8  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_4399E0 +
call sub_40AFD0  +
jmp loc_43B04E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FAA8 eax +
jmp loc_43B0B0  +
mov [esp+6Ch+var_6C] offset aLd_run_path_10 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_43B05F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSet_10 +
call sub_418450  +
jmp loc_43B45D  +
***
jmp loc_43B650  +
mov eax ds:dword_50FAF8 +
test eax eax +
jnz loc_43B660  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesA_10 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_43B84B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_43B840  +
test byte ptr [ebp+24h] 10h +
jnz loc_43B840  +
mov ecx [edx] +
test ecx ecx +
jz loc_43B840  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_43B840  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_43B830  +
test byte ptr [esi+14h] 1 +
jz loc_43B830  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_43B830  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_43B72F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_43B737  +
and edx 300000h +
jz loc_43B73F  +
cmp esi eax +
jz loc_43B860  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_43B717  +
mov edx [esp+18h] +
test edx edx +
jz loc_43B830  +
mov eax [esp+24h] +
test eax eax +
jz loc_43B8C5  +
mov eax [esi] +
mov dword ptr [esp] offset aS_72 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_43B8B9  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_43B785  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_11 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_69 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_43B830  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_70 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_43B853  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_43B7E5  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_11 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_43B7C1  +
mov edx [ebp+8] +
test edx edx +
jnz loc_43B81A  +
jmp loc_43B8F0  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_43B818  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_43B6E2  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_43B6A0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_43B7E5  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_43B73F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_43B8F7  +
mov ecx ebp +
jmp loc_43B8A2  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_43B8A0  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_43B73F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_43B785  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_71 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_43B75E  +
***
mov edx ebp +
jmp loc_43B821  +
***
mov ebp [esp+28h] +
jmp loc_43B8B0  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapAro_11 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRe_11 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfTh_11 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsU_11 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxU_11 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMem_11 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddre_10 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_43BA1C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_43BA45  +
test esi esi +
jz loc_43BA29  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_43BA31  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbo_11 +
call sub_418450  +
jmp loc_43BA1C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_43BD78  +
jle loc_43BAB0  +
cmp eax 133h +
jz loc_43BD44  +
jg loc_43BAE8  +
cmp eax 131h +
jz loc_43BC43  +
cmp eax 132h +
jnz loc_43BD26  +
mov ds:dword_50FB78 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_43BD30  +
jle loc_43BC70  +
cmp eax 12Eh +
jz loc_43BB30  +
cmp eax 12Fh +
jnz loc_43BD26  +
mov ds:dword_50FB84 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_43BBF0  +
cmp eax 198h +
jnz loc_43BD26  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_14 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_43BDB2  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_43BAE2  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_11 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43BC57  +
mov edi offset off_4E894A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43BC57  +
mov edi offset unk_4E894E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_43BDE0  +
mov edi offset unk_4E8951 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_43BDE0  +
mov edi offset unk_4E8954 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43BE85  +
mov edi offset off_4E8958 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43BE85  +
mov edi offset unk_4E895C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43BBDB  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E8960 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_43BAE2  +
mov dword_4BF308 10000h +
mov eax 1 +
jmp loc_43BAE2  +
***
mov eax ds:dword_50FB24 +
test eax eax +
jz loc_43BC0B  +
mov [esp] eax +
call free  +
mov ds:dword_50FB24 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_43BE20  +
mov edi offset aNone_14 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_43BAA3  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FB24 eax +
mov eax 1 +
jmp loc_43BAE2  +
***
mov ds:dword_50FB80 1 +
mov eax 1 +
jmp loc_43BAE2  +
***
mov dword_4BF308 8000h +
mov eax 1 +
jmp loc_43BAE2  +
***
cmp eax 7Ah +
jnz loc_43BD26  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_11 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_43BDA1  +
mov edi offset aMuldefs_11 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_43BD90  +
mov edi offset aMaxPageSize_11 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_43BE34  +
mov edi offset aCommonPageS_11 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_43BE99  +
mov edi offset aStackSize_11 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_43BF23  +
mov edi offset aExecstack_11 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_43BF67  +
mov edi offset aNoexecstack_11 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_43BFA2  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_43BAE2  +
***
xor eax eax +
jmp loc_43BAE2  +
***
mov dword_4BF30C 0 +
mov eax 1 +
jmp loc_43BAE2  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_43BAA3  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FB74 eax +
mov eax 1 +
jmp loc_43BAE2  +
***
mov ds:dword_50FB7C 1 +
mov eax 1 +
jmp loc_43BAE2  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_43BAE2  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_43BAE2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_11 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_43BDF4  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_43BAE2  +
***
mov dword_4BF308 2000h +
mov eax 1 +
jmp loc_43BAE2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_11 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_43BEEA  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_43BAE2  +
***
mov ds:dword_5141E8 offset aSha1_12 +
mov eax offset aSha1_12 +
jmp loc_43BC2C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_43BE68  +
lea edx [eax-1] +
test eax edx +
jz loc_43BAA3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMa_11 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43BAA3  +
***
mov dword_4BF308 4000h +
mov eax 1 +
jmp loc_43BAE2  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_43BECD  +
lea edx [eax-1] +
test eax edx +
jz loc_43BAA3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_23 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43BAA3  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_11 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_43BDC8  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_24 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_43BAE2  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_43BF83  +
test eax eax +
js loc_43BF83  +
test eax eax +
jnz loc_43BAA3  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_43BAA3  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_43BAE2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSt_11 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_43BF50  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSI_11 +
call sub_418450  +
mov eax 1 +
jmp loc_43BAE2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E90A0 +
test edi 1 +
mov eax 0A0h +
jnz loc_43C058  +
test edi 2 +
jnz loc_43C077  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_43C046  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_43C051  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E90A0 +
add edi 1 +
mov esi 4E90A1h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_43C02E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_43C02E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_43C190  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_43C1A0  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_11 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_43C1DC  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_43C190  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_43C190  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_43C178  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrxmega3_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_43C1F0  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_16 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_43C12A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_43C17C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_11 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_11 +
mov ebx eax +
mov ds:dword_50FB8C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FB8C +
mov eax [eax+10h] +
test eax eax +
jz loc_43C29B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FB8C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_43C2B0  +
mov [esp+14h+var_14] offset aXPCanNotCre_11 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FB8C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampoline_11 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FB88 eax +
jz loc_43C2F3  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FB8C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMak_11 +
call sub_418450  +
jmp loc_43C2A7  +
***
jmp sub_43C310  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_43C340  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_43C370  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_43C36B  +
mov ecx ds:dword_50FB8C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_43C361  +
cmp [ecx+10h] eax +
jnz loc_43C382  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_43C350  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_43C32C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_43C3DD  +
mov eax [ebx+0Ch] +
jmp ds:off_4E8A1C[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__17 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_43C420  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_43C3A4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_43C3B8  +
mov ebx [ebx+10h] +
jmp loc_43C39E  +
mov eax [ebx+10h] +
call sub_43C390  +
mov eax [ebx+14h] +
call sub_43C390  +
mov ebx [ebx+18h] +
jmp loc_43C39E  +
mov eax [ebx+10h] +
call sub_43C390  +
jmp loc_43C3D4  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_43C3D4  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToR_11 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_43C3D4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_43C5E0  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_43C5B1  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_43C590  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_43C4E0  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_43C4E0  +
***
mov dword ptr [esp] offset aPWarning_no_11 +
call sub_418450  +
mov edx 1 +
jmp loc_43C585  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_43C664  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_43C65A  +
test byte ptr [ebx+29h] 8 +
jz loc_43C65A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_43C670  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_43C6B9  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_43C738  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_43C6B9  +
mov dword ptr [esp] offset dword_43D9F0 +
mov ds:dword_50FB34 eax +
mov ds:dword_50FB30 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FB30 +
test ecx ecx +
jnz loc_43C65A  +
mov dword ptr [esp+4] offset dword_50FB40 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_43C710  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_43C722  +
mov dword ptr [esp] offset loc_43CED0 +
mov ds:dword_50FB38 0 +
call sub_40D9B0  +
mov eax ds:dword_50FB38 +
test eax eax +
jz loc_43C750  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_stat_11 +
call sub_418450  +
jmp loc_43C6CD  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_11 +
call sub_418420  +
jmp loc_43C6E3  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf__11 +
call sub_418450  +
jmp loc_43C68C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_43C7B2  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_43C7B2  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_43C702  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_12 +
call sub_418450  +
jmp loc_43C702  +
***
mov eax 2 +
jmp loc_43C773  +
***
mov eax ds:dword_50FB38 +
test eax eax +
jz loc_43CEE0  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_43CEFC  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_43CF02  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_43CFC6  +
mov eax ds:dword_50FB40 +
cmp [esp+10h] eax +
jz loc_43CFE2  +
mov eax ds:dword_50FB70 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_43CEFC  +
mov dword ptr [esp+4] offset a_so__11 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_43CEFC  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_43D00B  +
mov eax ds:dword_50FB70 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_43CEFC  +
mov eax ds:dword_50FB70 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNe_11 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43CEFC  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statF_11 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43CEFC  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FB44 +
jnz loc_43CF30  +
test ax ax +
jz loc_43CF30  +
mov eax [esp+50h] +
mov ds:dword_50FB38 eax +
jmp loc_43CEFC  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_43CF7C  +
***
jmp sub_43D030  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_43D048  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr103 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_43D12B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_43D14E  +
test ds:byte_514824 2 +
jnz loc_43D266  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_43D300  +
mov ecx ds:dword_50FB20 +
test ecx ecx +
jnz loc_43D1B7  +
mov esi offset off_4BF1C0 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_43D1A2  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_43D1A2  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_43D1A2  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BF298 +
jb loc_43D170  +
mov ds:dword_50FB20 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_43D4D2  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_43D1E6  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_43D2A4  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_43D1E0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_43D1E0  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_43D1E6  +
test byte ptr [eax+29h] 8 +
jnz loc_43D1E6  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_43D1E6  +
test byte ptr [edx+24h] 10h +
jnz loc_43D1E6  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_43D1E0  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_43D1E0  +
test byte ptr [ebx+14h] 1 +
jz loc_43D14E  +
test ebp ebp +
jz loc_43D520  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_43D5DC  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_11 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_43D14E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_43D396  +
mov edx offset off_4BF280 +
mov eax [edx+8] +
test eax eax +
jz loc_43D56E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_43D15A  +
xor edi edi +
jmp loc_43D34A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_43D4A5  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_43D392  +
mov edx [eax+14h] +
test edx edx +
jz loc_43D480  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_43D330  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_43D480  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_43D330  +
mov edi esi +
jmp loc_43D330  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_43D565  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_43D3F0  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_43D3C5  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BF250 +
jnz loc_43D2B7  +
test ebp ebp +
jnz loc_43D3F0  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_12 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BF250 +
mov eax esi +
cmp cl al +
jz loc_43D2B7  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BF220 +
jz loc_43D2B7  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BF268 +
jnz loc_43D2B7  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BF1F0 +
jnz loc_43D2B7  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BF208 +
jz loc_43D2B7  +
test ebp ebp +
jnz loc_43D728  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_11 +
mov ecx 4 +
cmps   +
jnz loc_43D464  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BF238 +
test ebp ebp +
jnz loc_43D2B7  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BF1D8 +
mov eax offset off_4BF1C0 +
cmovnz edx eax +
jmp loc_43D2B7  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_43D76A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_22 +
mov ecx 0Dh +
cmps   +
jnz loc_43D1C9  +
mov eax dword_4BF1C8 +
test eax eax +
jz loc_43D1C9  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_43D2F2  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_11 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_43D14E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_43D5F1  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_11 +
jmp loc_43D14E  +
xor edx edx +
xor eax eax +
jmp loc_43D2C2  +
mov eax [edx] +
test eax eax +
jz loc_43D5FE  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_43D2C2  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_43D2C2  +
mov eax ds:dword_5146F8 +
jmp loc_43D2C2  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_11 +
jmp loc_43D14E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_11 +
jmp loc_43D14E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_43D777  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_43D6D1  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_43D71C  +
movzx ecx dl +
mov esi offset a_plt_11 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_43D71C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_43D687  +
test al al +
jz loc_43D68B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_43D697  +
test al al +
jz loc_43D6EF  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_43D6C6  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_43D6C6  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_43D700  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_43D6EF  +
mov eax [ebp+18h] +
mov edi offset a_rel_11 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43D648  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_43D6C6  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_43D6B1  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_43D743  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_43D59B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_43D708  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_43D453  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_43D453  +
jmp loc_43D464  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_43D710  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_43D710  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_43D710  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_43D15A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_43D710  +
***
jmp sub_43D790  +
***
sub esp 14h +
mov ebx ds:dword_50FB84 +
test ebx ebx +
jnz loc_43D7D0  +
cmp ds:dword_514834 1 +
jbe loc_43D7D0  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_43D8F0  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_43D880  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_43D890  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_43D890  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_43D8A0  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_43D871  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_43D890  +
cmp ebx 6 +
jle loc_43D8E0  +
sub ebx 1 +
jz loc_43D8A8  +
mov eax 1 +
jmp loc_43D7F2  +
mov [esp+14h+var_14] offset aFPMapSectio_11 +
call sub_418450  +
jmp loc_43D848  +
mov [esp+14h+var_14] offset aXP_eh_frame_11 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FB84 +
test eax eax +
jz loc_43D8BD  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_43D834  +
mov [esp+14h+var_14] offset aPFLoopingIn_11 +
call sub_418450  +
mov eax ds:dword_50FB84 +
test eax eax +
jnz loc_43D899  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_43D899  +
mov [esp+14h+var_14] offset aXPCanNotBui_11 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_43D865  +
mov [edx+1Ch] esi +
jmp loc_43D890  +
mov [esp+14h+var_14] offset aXPCanNotSiz_11 +
call sub_418450  +
jmp loc_43D7D0  +
***
jmp loc_43D910  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FB38 +
mov ebx [esp+20h] +
test eax eax +
jz loc_43D934  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_43D9E7  +
mov eax [ebx+8] +
test eax eax +
jz loc_43D9E7  +
mov edx [ebx+10h] +
test edx edx +
jz loc_43D9E7  +
mov ecx ds:dword_50FB38 +
test ecx ecx +
jz loc_43D967  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_43D9E7  +
mov eax [ebx+8] +
mov edx ds:dword_50FB70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_43D9E1  +
test byte ptr [ebx+24h] 4 +
jz loc_43D9B9  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_43D9B9  +
mov edx ds:dword_50FB70 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_43D9E1  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_43D9E7  +
mov edx ds:dword_50FB70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_43D9E7  +
mov ds:dword_50FB38 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_43DF8D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_43E0AB  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_43DB0E  +
jmp loc_43DC72  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_43DC72  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_43DB00  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_43DB00  +
cmp byte ptr [eax] 0 +
jz loc_43DB00  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_43DB59  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_43DC60  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_43DC60  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_43DEF5  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_43DB40  +
cmp byte ptr [esi] 0 +
jz loc_43DB40  +
mov edi ds:dword_50FB28 +
test edi edi +
jz loc_43E099  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_43DBC7  +
add eax 1 +
mov edi eax +
jz loc_43DC01  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_43DBF1  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_43DF02  +
cmp al [esp+6Ch+var_2E] +
jz loc_43DF02  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_43DBC0  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_12 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FB28 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FB28 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FB28 ebx +
test edx edx +
jnz loc_43DB4C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_43DB0E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FB28 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FB2C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_43DF59  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_43DCEE  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_43DCEE  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_43DD0B  +
jmp loc_43DDE1  +
mov edi [edi+18h] +
test edi edi +
jz loc_43DDE1  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_43DD00  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_23 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_43DD00  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_43DF30  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_43DF10  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_43DDC8  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_43DDC8  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_43DD0B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_43DF48  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_43DE28  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FB74 +
mov eax ds:dword_50FB8C +
mov ds:dword_50FB84 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF30C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF308 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FB80 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FB7C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FB88 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_43DF6A  +
mov eax ds:dword_50FB84 +
test eax eax +
jnz loc_43DEED  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_43E0C0  +
jz loc_43DEED  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_43DF7C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_43DB83  +
test edi edi +
jnz loc_43DB40  +
jmp loc_43DC01  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrxmega3_c +
call sub_4184A0  +
jmp loc_43DDAA  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadC_11 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_43DD6A  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_11 +
call sub_418450  +
jmp loc_43DE03  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_11 +
call sub_418450  +
jmp loc_43DCCC  +
mov ds:dword_50FB84 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSiz_11 +
call sub_418450  +
jmp loc_43DEED  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_43E080  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_star_11 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_43E080  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_43DFFD  +
cmp al 2 +
ja loc_43E080  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_43E030  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_43E088  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_43C470 +
call sub_40AFD0  +
jmp loc_43DADE  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FB28 eax +
jmp loc_43DB40  +
mov [esp+6Ch+var_6C] offset aLd_run_path_11 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_43DAEF  +
mov [esp+6Ch+var_6C] offset aXPCanNotSet_11 +
call sub_418450  +
jmp loc_43DEED  +
***
jmp loc_43E0E0  +
mov eax ds:dword_50FB78 +
test eax eax +
jnz loc_43E0F0  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesA_11 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_43E2DB  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_43E2D0  +
test byte ptr [ebp+24h] 10h +
jnz loc_43E2D0  +
mov ecx [edx] +
test ecx ecx +
jz loc_43E2D0  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_43E2D0  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_43E2C0  +
test byte ptr [esi+14h] 1 +
jz loc_43E2C0  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_43E2C0  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_43E1BF  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_43E1C7  +
and edx 300000h +
jz loc_43E1CF  +
cmp esi eax +
jz loc_43E2F0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_43E1A7  +
mov edx [esp+18h] +
test edx edx +
jz loc_43E2C0  +
mov eax [esp+24h] +
test eax eax +
jz loc_43E355  +
mov eax [esi] +
mov dword ptr [esp] offset aS_76 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_43E349  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_43E215  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_12 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_73 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_43E2C0  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_74 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_43E2E3  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_43E275  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_12 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_43E251  +
mov edx [ebp+8] +
test edx edx +
jnz loc_43E2AA  +
jmp loc_43E380  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_43E2A8  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_43E172  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_43E130  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_43E275  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_43E1CF  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_43E387  +
mov ecx ebp +
jmp loc_43E332  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_43E330  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_43E1CF  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_43E215  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_75 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_43E1EE  +
***
mov edx ebp +
jmp loc_43E2B1  +
***
mov ebp [esp+28h] +
jmp loc_43E340  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapAro_12 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRe_12 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfTh_12 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsU_12 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxU_12 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMem_12 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddre_11 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_43E4AC  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_43E4D5  +
test esi esi +
jz loc_43E4B9  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_43E4C1  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbo_12 +
call sub_418450  +
jmp loc_43E4AC  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_43E808  +
jle loc_43E540  +
cmp eax 133h +
jz loc_43E7D4  +
jg loc_43E578  +
cmp eax 131h +
jz loc_43E6D3  +
cmp eax 132h +
jnz loc_43E7B6  +
mov ds:dword_50FBF8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_43E7C0  +
jle loc_43E700  +
cmp eax 12Eh +
jz loc_43E5C0  +
cmp eax 12Fh +
jnz loc_43E7B6  +
mov ds:dword_50FC04 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_43E680  +
cmp eax 198h +
jnz loc_43E7B6  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_15 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_43E842  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_43E572  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_12 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43E6E7  +
mov edi offset off_4E976A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43E6E7  +
mov edi offset unk_4E976E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_43E870  +
mov edi offset unk_4E9771 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_43E870  +
mov edi offset unk_4E9774 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43E915  +
mov edi offset off_4E9778 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43E915  +
mov edi offset unk_4E977C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_43E66B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4E9780 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_43E572  +
mov dword_4BF468 10000h +
mov eax 1 +
jmp loc_43E572  +
***
mov eax ds:dword_50FBA4 +
test eax eax +
jz loc_43E69B  +
mov [esp] eax +
call free  +
mov ds:dword_50FBA4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_43E8B0  +
mov edi offset aNone_15 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_43E533  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FBA4 eax +
mov eax 1 +
jmp loc_43E572  +
***
mov ds:dword_50FC00 1 +
mov eax 1 +
jmp loc_43E572  +
***
mov dword_4BF468 8000h +
mov eax 1 +
jmp loc_43E572  +
***
cmp eax 7Ah +
jnz loc_43E7B6  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_12 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_43E831  +
mov edi offset aMuldefs_12 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_43E820  +
mov edi offset aMaxPageSize_12 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_43E8C4  +
mov edi offset aCommonPageS_12 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_43E929  +
mov edi offset aStackSize_12 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_43E9B3  +
mov edi offset aExecstack_12 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_43E9F7  +
mov edi offset aNoexecstack_12 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_43EA32  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_43E572  +
***
xor eax eax +
jmp loc_43E572  +
***
mov dword_4BF46C 0 +
mov eax 1 +
jmp loc_43E572  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_43E533  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FBF4 eax +
mov eax 1 +
jmp loc_43E572  +
***
mov ds:dword_50FBFC 1 +
mov eax 1 +
jmp loc_43E572  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_43E572  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_43E572  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_12 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_43E884  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_43E572  +
***
mov dword_4BF468 2000h +
mov eax 1 +
jmp loc_43E572  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_12 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_43E97A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_43E572  +
***
mov ds:dword_5141E8 offset aSha1_13 +
mov eax offset aSha1_13 +
jmp loc_43E6BC  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_43E8F8  +
lea edx [eax-1] +
test eax edx +
jz loc_43E533  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMa_12 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43E533  +
***
mov dword_4BF468 4000h +
mov eax 1 +
jmp loc_43E572  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_43E95D  +
lea edx [eax-1] +
test eax edx +
jz loc_43E533  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_25 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43E533  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_12 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_43E858  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_26 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_43E572  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_43EA13  +
test eax eax +
js loc_43EA13  +
test eax eax +
jnz loc_43E533  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_43E533  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_43E572  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSt_12 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_43E9E0  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSI_12 +
call sub_418450  +
mov eax 1 +
jmp loc_43E572  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4E9EC0 +
test edi 1 +
mov eax 0A0h +
jnz loc_43EAE8  +
test edi 2 +
jnz loc_43EB07  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_43EAD6  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_43EAE1  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4E9EC0 +
add edi 1 +
mov esi 4E9EC1h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_43EABE  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_43EABE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_43EC20  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_43EC30  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_12 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_43EC6C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_43EC20  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_43EC20  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_43EC08  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrxmega4_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_43EC80  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_17 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_43EBBA  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_43EC0C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_12 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_12 +
mov ebx eax +
mov ds:dword_50FC0C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FC0C +
mov eax [eax+10h] +
test eax eax +
jz loc_43ED2B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FC0C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_43ED40  +
mov [esp+14h+var_14] offset aXPCanNotCre_12 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FC0C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampoline_12 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FC08 eax +
jz loc_43ED83  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FC0C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMak_12 +
call sub_418450  +
jmp loc_43ED37  +
***
jmp sub_43EDA0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_43EDD0  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_43EE00  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_43EDFB  +
mov ecx ds:dword_50FC0C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_43EDF1  +
cmp [ecx+10h] eax +
jnz loc_43EE12  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_43EDE0  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_43EDBC  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_43EE6D  +
mov eax [ebx+0Ch] +
jmp ds:off_4E983C[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__18 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_43EEB0  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_43EE34  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_43EE48  +
mov ebx [ebx+10h] +
jmp loc_43EE2E  +
mov eax [ebx+10h] +
call sub_43EE20  +
mov eax [ebx+14h] +
call sub_43EE20  +
mov ebx [ebx+18h] +
jmp loc_43EE2E  +
mov eax [ebx+10h] +
call sub_43EE20  +
jmp loc_43EE64  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_43EE64  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToR_12 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_43EE64  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_43F070  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_43F041  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_43F020  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_43EF70  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_43EF70  +
***
mov dword ptr [esp] offset aPWarning_no_12 +
call sub_418450  +
mov edx 1 +
jmp loc_43F015  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_43F0F4  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_43F0EA  +
test byte ptr [ebx+29h] 8 +
jz loc_43F0EA  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_43F100  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_43F149  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_43F1C8  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_43F149  +
mov dword ptr [esp] offset dword_440480 +
mov ds:dword_50FBB4 eax +
mov ds:dword_50FBB0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FBB0 +
test ecx ecx +
jnz loc_43F0EA  +
mov dword ptr [esp+4] offset dword_50FBC0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_43F1A0  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_43F1B2  +
mov dword ptr [esp] offset loc_43F960 +
mov ds:dword_50FBB8 0 +
call sub_40D9B0  +
mov eax ds:dword_50FBB8 +
test eax eax +
jz loc_43F1E0  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_stat_12 +
call sub_418450  +
jmp loc_43F15D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_12 +
call sub_418420  +
jmp loc_43F173  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf__12 +
call sub_418450  +
jmp loc_43F11C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_43F242  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_43F242  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_43F192  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_13 +
call sub_418450  +
jmp loc_43F192  +
***
mov eax 2 +
jmp loc_43F203  +
***
mov eax ds:dword_50FBB8 +
test eax eax +
jz loc_43F970  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_43F98C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_43F992  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_43FA56  +
mov eax ds:dword_50FBC0 +
cmp [esp+10h] eax +
jz loc_43FA72  +
mov eax ds:dword_50FBF0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_43F98C  +
mov dword ptr [esp+4] offset a_so__12 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_43F98C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_43FA9B  +
mov eax ds:dword_50FBF0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_43F98C  +
mov eax ds:dword_50FBF0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNe_12 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43F98C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statF_12 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_43F98C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FBC4 +
jnz loc_43F9C0  +
test ax ax +
jz loc_43F9C0  +
mov eax [esp+50h] +
mov ds:dword_50FBB8 eax +
jmp loc_43F98C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_43FA0C  +
***
jmp sub_43FAC0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_43FAD8  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr104 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_43FBBB  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_43FBDE  +
test ds:byte_514824 2 +
jnz loc_43FCF6  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_43FD90  +
mov ecx ds:dword_50FBA0 +
test ecx ecx +
jnz loc_43FC47  +
mov esi offset off_4BF320 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_43FC32  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_43FC32  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_43FC32  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BF3F8 +
jb loc_43FC00  +
mov ds:dword_50FBA0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_43FF62  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_43FC76  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_43FD34  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_43FC70  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_43FC70  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_43FC76  +
test byte ptr [eax+29h] 8 +
jnz loc_43FC76  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_43FC76  +
test byte ptr [edx+24h] 10h +
jnz loc_43FC76  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_43FC70  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_43FC70  +
test byte ptr [ebx+14h] 1 +
jz loc_43FBDE  +
test ebp ebp +
jz loc_43FFB0  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_44006C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_12 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_43FBDE  +
test [esp+4Ch+var_24] 2001h +
jnz loc_43FE26  +
mov edx offset off_4BF3E0 +
mov eax [edx+8] +
test eax eax +
jz loc_43FFFE  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_43FBEA  +
xor edi edi +
jmp loc_43FDDA  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_43FF35  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_43FE22  +
mov edx [eax+14h] +
test edx edx +
jz loc_43FF10  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_43FDC0  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_43FF10  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_43FDC0  +
mov edi esi +
jmp loc_43FDC0  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_43FFF5  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_43FE80  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_43FE55  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BF3B0 +
jnz loc_43FD47  +
test ebp ebp +
jnz loc_43FE80  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_13 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BF3B0 +
mov eax esi +
cmp cl al +
jz loc_43FD47  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BF380 +
jz loc_43FD47  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BF3C8 +
jnz loc_43FD47  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BF350 +
jnz loc_43FD47  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BF368 +
jz loc_43FD47  +
test ebp ebp +
jnz loc_4401B8  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_12 +
mov ecx 4 +
cmps   +
jnz loc_43FEF4  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BF398 +
test ebp ebp +
jnz loc_43FD47  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BF338 +
mov eax offset off_4BF320 +
cmovnz edx eax +
jmp loc_43FD47  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_4401FA  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_24 +
mov ecx 0Dh +
cmps   +
jnz loc_43FC59  +
mov eax dword_4BF328 +
test eax eax +
jz loc_43FC59  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_43FD82  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_12 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_43FBDE  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_440081  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_12 +
jmp loc_43FBDE  +
xor edx edx +
xor eax eax +
jmp loc_43FD52  +
mov eax [edx] +
test eax eax +
jz loc_44008E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_43FD52  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_43FD52  +
mov eax ds:dword_5146F8 +
jmp loc_43FD52  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_12 +
jmp loc_43FBDE  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_12 +
jmp loc_43FBDE  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_440207  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_440161  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_4401AC  +
movzx ecx dl +
mov esi offset a_plt_12 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_4401AC  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_440117  +
test al al +
jz loc_44011B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_440127  +
test al al +
jz loc_44017F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_440156  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_440156  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_440190  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_44017F  +
mov eax [ebp+18h] +
mov edi offset a_rel_12 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4400D8  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_440156  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_440141  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_4401D3  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_44002B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_440198  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_43FEE3  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_43FEE3  +
jmp loc_43FEF4  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4401A0  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4401A0  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_4401A0  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_43FBEA  +
mov [esp+4Ch+var_20] 0 +
jmp loc_4401A0  +
***
jmp sub_440220  +
***
sub esp 14h +
mov ebx ds:dword_50FC04 +
test ebx ebx +
jnz loc_440260  +
cmp ds:dword_514834 1 +
jbe loc_440260  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_440380  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_440310  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_440320  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_440320  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_440330  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_440301  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_440320  +
cmp ebx 6 +
jle loc_440370  +
sub ebx 1 +
jz loc_440338  +
mov eax 1 +
jmp loc_440282  +
mov [esp+14h+var_14] offset aFPMapSectio_12 +
call sub_418450  +
jmp loc_4402D8  +
mov [esp+14h+var_14] offset aXP_eh_frame_12 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FC04 +
test eax eax +
jz loc_44034D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_4402C4  +
mov [esp+14h+var_14] offset aPFLoopingIn_12 +
call sub_418450  +
mov eax ds:dword_50FC04 +
test eax eax +
jnz loc_440329  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_440329  +
mov [esp+14h+var_14] offset aXPCanNotBui_12 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_4402F5  +
mov [edx+1Ch] esi +
jmp loc_440320  +
mov [esp+14h+var_14] offset aXPCanNotSiz_12 +
call sub_418450  +
jmp loc_440260  +
***
jmp loc_4403A0  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FBB8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_4403C4  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_440477  +
mov eax [ebx+8] +
test eax eax +
jz loc_440477  +
mov edx [ebx+10h] +
test edx edx +
jz loc_440477  +
mov ecx ds:dword_50FBB8 +
test ecx ecx +
jz loc_4403F7  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_440477  +
mov eax [ebx+8] +
mov edx ds:dword_50FBF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_440471  +
test byte ptr [ebx+24h] 4 +
jz loc_440449  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_440449  +
mov edx ds:dword_50FBF0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_440471  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_440477  +
mov edx ds:dword_50FBF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_440477  +
mov ds:dword_50FBB8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_440A1D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_440B3B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_44059E  +
jmp loc_440702  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_440702  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_440590  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_440590  +
cmp byte ptr [eax] 0 +
jz loc_440590  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_4405E9  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_4406F0  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_4406F0  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_440985  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_4405D0  +
cmp byte ptr [esi] 0 +
jz loc_4405D0  +
mov edi ds:dword_50FBA8 +
test edi edi +
jz loc_440B29  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_440657  +
add eax 1 +
mov edi eax +
jz loc_440691  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_440681  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_440992  +
cmp al [esp+6Ch+var_2E] +
jz loc_440992  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_440650  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_13 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FBA8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FBA8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FBA8 ebx +
test edx edx +
jnz loc_4405DC  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_44059E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FBA8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FBAC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_4409E9  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_44077E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_44077E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_44079B  +
jmp loc_440871  +
mov edi [edi+18h] +
test edi edi +
jz loc_440871  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_440790  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_25 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_440790  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_4409C0  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_4409A0  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_440858  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_440858  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_44079B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_4409D8  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_4408B8  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FBF4 +
mov eax ds:dword_50FC0C +
mov ds:dword_50FC04 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF46C +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF468 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FC00 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FBFC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FC08 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4409FA  +
mov eax ds:dword_50FC04 +
test eax eax +
jnz loc_44097D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_440B50  +
jz loc_44097D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_440A0C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_440613  +
test edi edi +
jnz loc_4405D0  +
jmp loc_440691  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrxmega4_c +
call sub_4184A0  +
jmp loc_44083A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadC_12 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_4407FA  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_12 +
call sub_418450  +
jmp loc_440893  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_12 +
call sub_418450  +
jmp loc_44075C  +
mov ds:dword_50FC04 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSiz_12 +
call sub_418450  +
jmp loc_44097D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_440B10  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_star_12 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_440B10  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_440A8D  +
cmp al 2 +
ja loc_440B10  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_440AC0  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_440B18  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_43EF00 +
call sub_40AFD0  +
jmp loc_44056E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FBA8 eax +
jmp loc_4405D0  +
mov [esp+6Ch+var_6C] offset aLd_run_path_12 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_44057F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSet_12 +
call sub_418450  +
jmp loc_44097D  +
***
jmp loc_440B70  +
mov eax ds:dword_50FBF8 +
test eax eax +
jnz loc_440B80  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesA_12 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_440D6B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_440D60  +
test byte ptr [ebp+24h] 10h +
jnz loc_440D60  +
mov ecx [edx] +
test ecx ecx +
jz loc_440D60  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_440D60  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_440D50  +
test byte ptr [esi+14h] 1 +
jz loc_440D50  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_440D50  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_440C4F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_440C57  +
and edx 300000h +
jz loc_440C5F  +
cmp esi eax +
jz loc_440D80  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_440C37  +
mov edx [esp+18h] +
test edx edx +
jz loc_440D50  +
mov eax [esp+24h] +
test eax eax +
jz loc_440DE5  +
mov eax [esi] +
mov dword ptr [esp] offset aS_80 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_440DD9  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_440CA5  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_13 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_77 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_440D50  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_78 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_440D73  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_440D05  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_13 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_440CE1  +
mov edx [ebp+8] +
test edx edx +
jnz loc_440D3A  +
jmp loc_440E10  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_440D38  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_440C02  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_440BC0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_440D05  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_440C5F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_440E17  +
mov ecx ebp +
jmp loc_440DC2  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_440DC0  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_440C5F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_440CA5  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_79 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_440C7E  +
***
mov edx ebp +
jmp loc_440D41  +
***
mov ebp [esp+28h] +
jmp loc_440DD0  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapAro_13 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRe_13 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfTh_13 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsU_13 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxU_13 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMem_13 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddre_12 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_440F3C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_440F65  +
test esi esi +
jz loc_440F49  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_440F51  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbo_13 +
call sub_418450  +
jmp loc_440F3C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_441298  +
jle loc_440FD0  +
cmp eax 133h +
jz loc_441264  +
jg loc_441008  +
cmp eax 131h +
jz loc_441163  +
cmp eax 132h +
jnz loc_441246  +
mov ds:dword_50FC78 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_441250  +
jle loc_441190  +
cmp eax 12Eh +
jz loc_441050  +
cmp eax 12Fh +
jnz loc_441246  +
mov ds:dword_50FC84 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_441110  +
cmp eax 198h +
jnz loc_441246  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_16 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4412D2  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_441002  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_13 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_441177  +
mov edi offset off_4EA58A +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_441177  +
mov edi offset unk_4EA58E +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_441300  +
mov edi offset unk_4EA591 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_441300  +
mov edi offset unk_4EA594 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4413A5  +
mov edi offset off_4EA598 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4413A5  +
mov edi offset unk_4EA59C +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4410FB  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4EA5A0 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_441002  +
mov dword_4BF5C8 10000h +
mov eax 1 +
jmp loc_441002  +
***
mov eax ds:dword_50FC24 +
test eax eax +
jz loc_44112B  +
mov [esp] eax +
call free  +
mov ds:dword_50FC24 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_441340  +
mov edi offset aNone_16 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_440FC3  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FC24 eax +
mov eax 1 +
jmp loc_441002  +
***
mov ds:dword_50FC80 1 +
mov eax 1 +
jmp loc_441002  +
***
mov dword_4BF5C8 8000h +
mov eax 1 +
jmp loc_441002  +
***
cmp eax 7Ah +
jnz loc_441246  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_13 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_4412C1  +
mov edi offset aMuldefs_13 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_4412B0  +
mov edi offset aMaxPageSize_13 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_441354  +
mov edi offset aCommonPageS_13 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_4413B9  +
mov edi offset aStackSize_13 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_441443  +
mov edi offset aExecstack_13 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_441487  +
mov edi offset aNoexecstack_13 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_4414C2  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_441002  +
***
xor eax eax +
jmp loc_441002  +
***
mov dword_4BF5CC 0 +
mov eax 1 +
jmp loc_441002  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_440FC3  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FC74 eax +
mov eax 1 +
jmp loc_441002  +
***
mov ds:dword_50FC7C 1 +
mov eax 1 +
jmp loc_441002  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_441002  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_441002  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_13 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_441314  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_441002  +
***
mov dword_4BF5C8 2000h +
mov eax 1 +
jmp loc_441002  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_13 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_44140A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_441002  +
***
mov ds:dword_5141E8 offset aSha1_14 +
mov eax offset aSha1_14 +
jmp loc_44114C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_441388  +
lea edx [eax-1] +
test eax edx +
jz loc_440FC3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMa_13 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_440FC3  +
***
mov dword_4BF5C8 4000h +
mov eax 1 +
jmp loc_441002  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_4413ED  +
lea edx [eax-1] +
test eax edx +
jz loc_440FC3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_27 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_440FC3  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_13 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_4412E8  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_28 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_441002  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_4414A3  +
test eax eax +
js loc_4414A3  +
test eax eax +
jnz loc_440FC3  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_440FC3  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_441002  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSt_13 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_441470  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSI_13 +
call sub_418450  +
mov eax 1 +
jmp loc_441002  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4EACE0 +
test edi 1 +
mov eax 0A0h +
jnz loc_441578  +
test edi 2 +
jnz loc_441597  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_441566  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_441571  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4EACE0 +
add edi 1 +
mov esi 4EACE1h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_44154E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_44154E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_4416B0  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_4416C0  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_13 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_4416FC  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_4416B0  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_4416B0  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_441698  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrxmega5_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_441710  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_18 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_44164A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_44169C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_13 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_13 +
mov ebx eax +
mov ds:dword_50FC8C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FC8C +
mov eax [eax+10h] +
test eax eax +
jz loc_4417BB  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FC8C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_4417D0  +
mov [esp+14h+var_14] offset aXPCanNotCre_13 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FC8C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampoline_13 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FC88 eax +
jz loc_441813  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FC8C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMak_13 +
call sub_418450  +
jmp loc_4417C7  +
***
jmp sub_441830  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_441860  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_441890  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_44188B  +
mov ecx ds:dword_50FC8C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_441881  +
cmp [ecx+10h] eax +
jnz loc_4418A2  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_441870  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_44184C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_4418FD  +
mov eax [ebx+0Ch] +
jmp ds:off_4EA65C[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__19 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_441940  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_4418C4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_4418D8  +
mov ebx [ebx+10h] +
jmp loc_4418BE  +
mov eax [ebx+10h] +
call sub_4418B0  +
mov eax [ebx+14h] +
call sub_4418B0  +
mov ebx [ebx+18h] +
jmp loc_4418BE  +
mov eax [ebx+10h] +
call sub_4418B0  +
jmp loc_4418F4  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_4418F4  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToR_13 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_4418F4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_441B00  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_441AD1  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_441AB0  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_441A00  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_441A00  +
***
mov dword ptr [esp] offset aPWarning_no_13 +
call sub_418450  +
mov edx 1 +
jmp loc_441AA5  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_441B84  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_441B7A  +
test byte ptr [ebx+29h] 8 +
jz loc_441B7A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_441B90  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_441BD9  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_441C58  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_441BD9  +
mov dword ptr [esp] offset dword_442F10 +
mov ds:dword_50FC34 eax +
mov ds:dword_50FC30 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FC30 +
test ecx ecx +
jnz loc_441B7A  +
mov dword ptr [esp+4] offset dword_50FC40 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_441C30  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_441C42  +
mov dword ptr [esp] offset loc_4423F0 +
mov ds:dword_50FC38 0 +
call sub_40D9B0  +
mov eax ds:dword_50FC38 +
test eax eax +
jz loc_441C70  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_stat_13 +
call sub_418450  +
jmp loc_441BED  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_13 +
call sub_418420  +
jmp loc_441C03  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf__13 +
call sub_418450  +
jmp loc_441BAC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_441CD2  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_441CD2  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_441C22  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_14 +
call sub_418450  +
jmp loc_441C22  +
***
mov eax 2 +
jmp loc_441C93  +
***
mov eax ds:dword_50FC38 +
test eax eax +
jz loc_442400  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_44241C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_442422  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_4424E6  +
mov eax ds:dword_50FC40 +
cmp [esp+10h] eax +
jz loc_442502  +
mov eax ds:dword_50FC70 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_44241C  +
mov dword ptr [esp+4] offset a_so__13 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_44241C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_44252B  +
mov eax ds:dword_50FC70 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_44241C  +
mov eax ds:dword_50FC70 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNe_13 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_44241C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statF_13 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_44241C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FC44 +
jnz loc_442450  +
test ax ax +
jz loc_442450  +
mov eax [esp+50h] +
mov ds:dword_50FC38 eax +
jmp loc_44241C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_44249C  +
***
jmp sub_442550  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_442568  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr105 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_44264B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_44266E  +
test ds:byte_514824 2 +
jnz loc_442786  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_442820  +
mov ecx ds:dword_50FC20 +
test ecx ecx +
jnz loc_4426D7  +
mov esi offset off_4BF480 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_4426C2  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_4426C2  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_4426C2  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BF558 +
jb loc_442690  +
mov ds:dword_50FC20 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_4429F2  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_442706  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_4427C4  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_442700  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_442700  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_442706  +
test byte ptr [eax+29h] 8 +
jnz loc_442706  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_442706  +
test byte ptr [edx+24h] 10h +
jnz loc_442706  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_442700  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_442700  +
test byte ptr [ebx+14h] 1 +
jz loc_44266E  +
test ebp ebp +
jz loc_442A40  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_442AFC  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_13 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_44266E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_4428B6  +
mov edx offset off_4BF540 +
mov eax [edx+8] +
test eax eax +
jz loc_442A8E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_44267A  +
xor edi edi +
jmp loc_44286A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_4429C5  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_4428B2  +
mov edx [eax+14h] +
test edx edx +
jz loc_4429A0  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_442850  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_4429A0  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_442850  +
mov edi esi +
jmp loc_442850  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_442A85  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_442910  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_4428E5  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BF510 +
jnz loc_4427D7  +
test ebp ebp +
jnz loc_442910  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_14 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BF510 +
mov eax esi +
cmp cl al +
jz loc_4427D7  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BF4E0 +
jz loc_4427D7  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BF528 +
jnz loc_4427D7  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BF4B0 +
jnz loc_4427D7  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BF4C8 +
jz loc_4427D7  +
test ebp ebp +
jnz loc_442C48  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_13 +
mov ecx 4 +
cmps   +
jnz loc_442984  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BF4F8 +
test ebp ebp +
jnz loc_4427D7  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BF498 +
mov eax offset off_4BF480 +
cmovnz edx eax +
jmp loc_4427D7  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_442C8A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_26 +
mov ecx 0Dh +
cmps   +
jnz loc_4426E9  +
mov eax dword_4BF488 +
test eax eax +
jz loc_4426E9  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_442812  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_13 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_44266E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_442B11  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_13 +
jmp loc_44266E  +
xor edx edx +
xor eax eax +
jmp loc_4427E2  +
mov eax [edx] +
test eax eax +
jz loc_442B1E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_4427E2  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_4427E2  +
mov eax ds:dword_5146F8 +
jmp loc_4427E2  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_13 +
jmp loc_44266E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_13 +
jmp loc_44266E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_442C97  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_442BF1  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_442C3C  +
movzx ecx dl +
mov esi offset a_plt_13 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_442C3C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_442BA7  +
test al al +
jz loc_442BAB  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_442BB7  +
test al al +
jz loc_442C0F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_442BE6  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_442BE6  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_442C20  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_442C0F  +
mov eax [ebp+18h] +
mov edi offset a_rel_13 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_442B68  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_442BE6  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_442BD1  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_442C63  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_442ABB  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_442C28  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_442973  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_442973  +
jmp loc_442984  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_442C30  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_442C30  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_442C30  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_44267A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_442C30  +
***
jmp sub_442CB0  +
***
sub esp 14h +
mov ebx ds:dword_50FC84 +
test ebx ebx +
jnz loc_442CF0  +
cmp ds:dword_514834 1 +
jbe loc_442CF0  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_442E10  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_442DA0  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_442DB0  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_442DB0  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_442DC0  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_442D91  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_442DB0  +
cmp ebx 6 +
jle loc_442E00  +
sub ebx 1 +
jz loc_442DC8  +
mov eax 1 +
jmp loc_442D12  +
mov [esp+14h+var_14] offset aFPMapSectio_13 +
call sub_418450  +
jmp loc_442D68  +
mov [esp+14h+var_14] offset aXP_eh_frame_13 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FC84 +
test eax eax +
jz loc_442DDD  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_442D54  +
mov [esp+14h+var_14] offset aPFLoopingIn_13 +
call sub_418450  +
mov eax ds:dword_50FC84 +
test eax eax +
jnz loc_442DB9  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_442DB9  +
mov [esp+14h+var_14] offset aXPCanNotBui_13 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_442D85  +
mov [edx+1Ch] esi +
jmp loc_442DB0  +
mov [esp+14h+var_14] offset aXPCanNotSiz_13 +
call sub_418450  +
jmp loc_442CF0  +
***
jmp loc_442E30  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FC38 +
mov ebx [esp+20h] +
test eax eax +
jz loc_442E54  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_442F07  +
mov eax [ebx+8] +
test eax eax +
jz loc_442F07  +
mov edx [ebx+10h] +
test edx edx +
jz loc_442F07  +
mov ecx ds:dword_50FC38 +
test ecx ecx +
jz loc_442E87  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_442F07  +
mov eax [ebx+8] +
mov edx ds:dword_50FC70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_442F01  +
test byte ptr [ebx+24h] 4 +
jz loc_442ED9  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_442ED9  +
mov edx ds:dword_50FC70 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_442F01  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_442F07  +
mov edx ds:dword_50FC70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_442F07  +
mov ds:dword_50FC38 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_4434AD  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_4435CB  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_44302E  +
jmp loc_443192  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_443192  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_443020  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_443020  +
cmp byte ptr [eax] 0 +
jz loc_443020  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_443079  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_443180  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_443180  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_443415  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_443060  +
cmp byte ptr [esi] 0 +
jz loc_443060  +
mov edi ds:dword_50FC28 +
test edi edi +
jz loc_4435B9  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_4430E7  +
add eax 1 +
mov edi eax +
jz loc_443121  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_443111  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_443422  +
cmp al [esp+6Ch+var_2E] +
jz loc_443422  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_4430E0  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_14 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FC28 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FC28 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FC28 ebx +
test edx edx +
jnz loc_44306C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_44302E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FC28 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FC2C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_443479  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_44320E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_44320E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_44322B  +
jmp loc_443301  +
mov edi [edi+18h] +
test edi edi +
jz loc_443301  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_443220  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_27 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_443220  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_443450  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_443430  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_4432E8  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_4432E8  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_44322B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_443468  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_443348  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FC74 +
mov eax ds:dword_50FC8C +
mov ds:dword_50FC84 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF5CC +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF5C8 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FC80 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FC7C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FC88 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_44348A  +
mov eax ds:dword_50FC84 +
test eax eax +
jnz loc_44340D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_4435E0  +
jz loc_44340D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_44349C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_4430A3  +
test edi edi +
jnz loc_443060  +
jmp loc_443121  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrxmega5_c +
call sub_4184A0  +
jmp loc_4432CA  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadC_13 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_44328A  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_13 +
call sub_418450  +
jmp loc_443323  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_13 +
call sub_418450  +
jmp loc_4431EC  +
mov ds:dword_50FC84 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSiz_13 +
call sub_418450  +
jmp loc_44340D  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4435A0  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_star_13 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_4435A0  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_44351D  +
cmp al 2 +
ja loc_4435A0  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_443550  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_4435A8  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_441990 +
call sub_40AFD0  +
jmp loc_442FFE  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FC28 eax +
jmp loc_443060  +
mov [esp+6Ch+var_6C] offset aLd_run_path_13 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_44300F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSet_13 +
call sub_418450  +
jmp loc_44340D  +
***
jmp loc_443600  +
mov eax ds:dword_50FC78 +
test eax eax +
jnz loc_443610  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesA_13 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_4437FB  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_4437F0  +
test byte ptr [ebp+24h] 10h +
jnz loc_4437F0  +
mov ecx [edx] +
test ecx ecx +
jz loc_4437F0  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_4437F0  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_4437E0  +
test byte ptr [esi+14h] 1 +
jz loc_4437E0  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_4437E0  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_4436DF  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_4436E7  +
and edx 300000h +
jz loc_4436EF  +
cmp esi eax +
jz loc_443810  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_4436C7  +
mov edx [esp+18h] +
test edx edx +
jz loc_4437E0  +
mov eax [esp+24h] +
test eax eax +
jz loc_443875  +
mov eax [esi] +
mov dword ptr [esp] offset aS_84 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_443869  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_443735  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_14 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_81 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_4437E0  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_82 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_443803  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_443795  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_14 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_443771  +
mov edx [ebp+8] +
test edx edx +
jnz loc_4437CA  +
jmp loc_4438A0  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_4437C8  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_443692  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_443650  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_443795  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_4436EF  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_4438A7  +
mov ecx ebp +
jmp loc_443852  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_443850  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_4436EF  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_443735  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_83 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_44370E  +
***
mov edx ebp +
jmp loc_4437D1  +
***
mov ebp [esp+28h] +
jmp loc_443860  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapAro_14 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRe_14 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfTh_14 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsU_14 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxU_14 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMem_14 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddre_13 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_4439CC  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_4439F5  +
test esi esi +
jz loc_4439D9  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_4439E1  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbo_14 +
call sub_418450  +
jmp loc_4439CC  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_443D28  +
jle loc_443A60  +
cmp eax 133h +
jz loc_443CF4  +
jg loc_443A98  +
cmp eax 131h +
jz loc_443BF3  +
cmp eax 132h +
jnz loc_443CD6  +
mov ds:dword_50FCF8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_443CE0  +
jle loc_443C20  +
cmp eax 12Eh +
jz loc_443AE0  +
cmp eax 12Fh +
jnz loc_443CD6  +
mov ds:dword_50FD04 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_443BA0  +
cmp eax 198h +
jnz loc_443CD6  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_17 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_443D62  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_443A92  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_14 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_443C07  +
mov edi offset off_4EB3AA +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_443C07  +
mov edi offset unk_4EB3AE +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_443D90  +
mov edi offset unk_4EB3B1 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_443D90  +
mov edi offset unk_4EB3B4 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_443E35  +
mov edi offset off_4EB3B8 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_443E35  +
mov edi offset unk_4EB3BC +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_443B8B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4EB3C0 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_443A92  +
mov dword_4BF728 10000h +
mov eax 1 +
jmp loc_443A92  +
***
mov eax ds:dword_50FCA4 +
test eax eax +
jz loc_443BBB  +
mov [esp] eax +
call free  +
mov ds:dword_50FCA4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_443DD0  +
mov edi offset aNone_17 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_443A53  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FCA4 eax +
mov eax 1 +
jmp loc_443A92  +
***
mov ds:dword_50FD00 1 +
mov eax 1 +
jmp loc_443A92  +
***
mov dword_4BF728 8000h +
mov eax 1 +
jmp loc_443A92  +
***
cmp eax 7Ah +
jnz loc_443CD6  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_14 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_443D51  +
mov edi offset aMuldefs_14 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_443D40  +
mov edi offset aMaxPageSize_14 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_443DE4  +
mov edi offset aCommonPageS_14 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_443E49  +
mov edi offset aStackSize_14 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_443ED3  +
mov edi offset aExecstack_14 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_443F17  +
mov edi offset aNoexecstack_14 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_443F52  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_443A92  +
***
xor eax eax +
jmp loc_443A92  +
***
mov dword_4BF72C 0 +
mov eax 1 +
jmp loc_443A92  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_443A53  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FCF4 eax +
mov eax 1 +
jmp loc_443A92  +
***
mov ds:dword_50FCFC 1 +
mov eax 1 +
jmp loc_443A92  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_443A92  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_443A92  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_14 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_443DA4  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_443A92  +
***
mov dword_4BF728 2000h +
mov eax 1 +
jmp loc_443A92  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_14 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_443E9A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_443A92  +
***
mov ds:dword_5141E8 offset aSha1_15 +
mov eax offset aSha1_15 +
jmp loc_443BDC  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_443E18  +
lea edx [eax-1] +
test eax edx +
jz loc_443A53  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMa_14 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_443A53  +
***
mov dword_4BF728 4000h +
mov eax 1 +
jmp loc_443A92  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_443E7D  +
lea edx [eax-1] +
test eax edx +
jz loc_443A53  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_29 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_443A53  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_14 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_443D78  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_30 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_443A92  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_443F33  +
test eax eax +
js loc_443F33  +
test eax eax +
jnz loc_443A53  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_443A53  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_443A92  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSt_14 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_443F00  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSI_14 +
call sub_418450  +
mov eax 1 +
jmp loc_443A92  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4EBB00 +
test edi 1 +
mov eax 0A0h +
jnz loc_444008  +
test edi 2 +
jnz loc_444027  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_443FF6  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_444001  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4EBB00 +
add edi 1 +
mov esi 4EBB01h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_443FDE  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_443FDE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_444140  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_444150  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_14 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_44418C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_444140  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_444140  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_444128  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrxmega6_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_4441A0  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_19 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_4440DA  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_44412C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_14 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_14 +
mov ebx eax +
mov ds:dword_50FD0C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FD0C +
mov eax [eax+10h] +
test eax eax +
jz loc_44424B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FD0C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_444260  +
mov [esp+14h+var_14] offset aXPCanNotCre_14 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FD0C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampoline_14 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FD08 eax +
jz loc_4442A3  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FD0C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMak_14 +
call sub_418450  +
jmp loc_444257  +
***
jmp sub_4442C0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4442F0  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_444320  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_44431B  +
mov ecx ds:dword_50FD0C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_444311  +
cmp [ecx+10h] eax +
jnz loc_444332  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_444300  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_4442DC  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_44438D  +
mov eax [ebx+0Ch] +
jmp ds:off_4EB47C[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__20 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_4443D0  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_444354  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_444368  +
mov ebx [ebx+10h] +
jmp loc_44434E  +
mov eax [ebx+10h] +
call sub_444340  +
mov eax [ebx+14h] +
call sub_444340  +
mov ebx [ebx+18h] +
jmp loc_44434E  +
mov eax [ebx+10h] +
call sub_444340  +
jmp loc_444384  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_444384  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToR_14 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_444384  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_444590  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_444561  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_444540  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_444490  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_444490  +
***
mov dword ptr [esp] offset aPWarning_no_14 +
call sub_418450  +
mov edx 1 +
jmp loc_444535  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_444614  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_44460A  +
test byte ptr [ebx+29h] 8 +
jz loc_44460A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_444620  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_444669  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_4446E8  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_444669  +
mov dword ptr [esp] offset dword_4459A0 +
mov ds:dword_50FCB4 eax +
mov ds:dword_50FCB0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FCB0 +
test ecx ecx +
jnz loc_44460A  +
mov dword ptr [esp+4] offset dword_50FCC0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_4446C0  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_4446D2  +
mov dword ptr [esp] offset loc_444E80 +
mov ds:dword_50FCB8 0 +
call sub_40D9B0  +
mov eax ds:dword_50FCB8 +
test eax eax +
jz loc_444700  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_stat_14 +
call sub_418450  +
jmp loc_44467D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_14 +
call sub_418420  +
jmp loc_444693  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf__14 +
call sub_418450  +
jmp loc_44463C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_444762  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_444762  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_4446B2  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_15 +
call sub_418450  +
jmp loc_4446B2  +
***
mov eax 2 +
jmp loc_444723  +
***
mov eax ds:dword_50FCB8 +
test eax eax +
jz loc_444E90  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_444EAC  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_444EB2  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_444F76  +
mov eax ds:dword_50FCC0 +
cmp [esp+10h] eax +
jz loc_444F92  +
mov eax ds:dword_50FCF0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_444EAC  +
mov dword ptr [esp+4] offset a_so__14 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_444EAC  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_444FBB  +
mov eax ds:dword_50FCF0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_444EAC  +
mov eax ds:dword_50FCF0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNe_14 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_444EAC  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statF_14 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_444EAC  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FCC4 +
jnz loc_444EE0  +
test ax ax +
jz loc_444EE0  +
mov eax [esp+50h] +
mov ds:dword_50FCB8 eax +
jmp loc_444EAC  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_444F2C  +
***
jmp sub_444FE0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_444FF8  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr106 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_4450DB  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_4450FE  +
test ds:byte_514824 2 +
jnz loc_445216  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_4452B0  +
mov ecx ds:dword_50FCA0 +
test ecx ecx +
jnz loc_445167  +
mov esi offset off_4BF5E0 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_445152  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_445152  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_445152  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BF6B8 +
jb loc_445120  +
mov ds:dword_50FCA0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_445482  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_445196  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_445254  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_445190  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_445190  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_445196  +
test byte ptr [eax+29h] 8 +
jnz loc_445196  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_445196  +
test byte ptr [edx+24h] 10h +
jnz loc_445196  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_445190  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_445190  +
test byte ptr [ebx+14h] 1 +
jz loc_4450FE  +
test ebp ebp +
jz loc_4454D0  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_44558C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_14 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_4450FE  +
test [esp+4Ch+var_24] 2001h +
jnz loc_445346  +
mov edx offset off_4BF6A0 +
mov eax [edx+8] +
test eax eax +
jz loc_44551E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_44510A  +
xor edi edi +
jmp loc_4452FA  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_445455  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_445342  +
mov edx [eax+14h] +
test edx edx +
jz loc_445430  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_4452E0  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_445430  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_4452E0  +
mov edi esi +
jmp loc_4452E0  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_445515  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_4453A0  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_445375  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BF670 +
jnz loc_445267  +
test ebp ebp +
jnz loc_4453A0  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_15 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BF670 +
mov eax esi +
cmp cl al +
jz loc_445267  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BF640 +
jz loc_445267  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BF688 +
jnz loc_445267  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BF610 +
jnz loc_445267  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BF628 +
jz loc_445267  +
test ebp ebp +
jnz loc_4456D8  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_14 +
mov ecx 4 +
cmps   +
jnz loc_445414  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BF658 +
test ebp ebp +
jnz loc_445267  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BF5F8 +
mov eax offset off_4BF5E0 +
cmovnz edx eax +
jmp loc_445267  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_44571A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_28 +
mov ecx 0Dh +
cmps   +
jnz loc_445179  +
mov eax dword_4BF5E8 +
test eax eax +
jz loc_445179  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_4452A2  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_14 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_4450FE  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_4455A1  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_14 +
jmp loc_4450FE  +
xor edx edx +
xor eax eax +
jmp loc_445272  +
mov eax [edx] +
test eax eax +
jz loc_4455AE  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_445272  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_445272  +
mov eax ds:dword_5146F8 +
jmp loc_445272  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_14 +
jmp loc_4450FE  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_14 +
jmp loc_4450FE  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_445727  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_445681  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_4456CC  +
movzx ecx dl +
mov esi offset a_plt_14 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_4456CC  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_445637  +
test al al +
jz loc_44563B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_445647  +
test al al +
jz loc_44569F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_445676  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_445676  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_4456B0  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_44569F  +
mov eax [ebp+18h] +
mov edi offset a_rel_14 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4455F8  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_445676  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_445661  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_4456F3  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_44554B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_4456B8  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_445403  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_445403  +
jmp loc_445414  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4456C0  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_4456C0  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_4456C0  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_44510A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_4456C0  +
***
jmp sub_445740  +
***
sub esp 14h +
mov ebx ds:dword_50FD04 +
test ebx ebx +
jnz loc_445780  +
cmp ds:dword_514834 1 +
jbe loc_445780  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_4458A0  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_445830  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_445840  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_445840  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_445850  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_445821  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_445840  +
cmp ebx 6 +
jle loc_445890  +
sub ebx 1 +
jz loc_445858  +
mov eax 1 +
jmp loc_4457A2  +
mov [esp+14h+var_14] offset aFPMapSectio_14 +
call sub_418450  +
jmp loc_4457F8  +
mov [esp+14h+var_14] offset aXP_eh_frame_14 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FD04 +
test eax eax +
jz loc_44586D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_4457E4  +
mov [esp+14h+var_14] offset aPFLoopingIn_14 +
call sub_418450  +
mov eax ds:dword_50FD04 +
test eax eax +
jnz loc_445849  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_445849  +
mov [esp+14h+var_14] offset aXPCanNotBui_14 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_445815  +
mov [edx+1Ch] esi +
jmp loc_445840  +
mov [esp+14h+var_14] offset aXPCanNotSiz_14 +
call sub_418450  +
jmp loc_445780  +
***
jmp loc_4458C0  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FCB8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_4458E4  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_445997  +
mov eax [ebx+8] +
test eax eax +
jz loc_445997  +
mov edx [ebx+10h] +
test edx edx +
jz loc_445997  +
mov ecx ds:dword_50FCB8 +
test ecx ecx +
jz loc_445917  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_445997  +
mov eax [ebx+8] +
mov edx ds:dword_50FCF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_445991  +
test byte ptr [ebx+24h] 4 +
jz loc_445969  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_445969  +
mov edx ds:dword_50FCF0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_445991  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_445997  +
mov edx ds:dword_50FCF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_445997  +
mov ds:dword_50FCB8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_445F3D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_44605B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_445ABE  +
jmp loc_445C22  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_445C22  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_445AB0  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_445AB0  +
cmp byte ptr [eax] 0 +
jz loc_445AB0  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_445B09  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_445C10  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_445C10  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_445EA0  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_445AF0  +
cmp byte ptr [esi] 0 +
jz loc_445AF0  +
mov edi ds:dword_50FCA8 +
test edi edi +
jz loc_446049  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_445B77  +
add eax 1 +
mov edi eax +
jz loc_445BB1  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_445BA1  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_445EB0  +
cmp al [esp+6Ch+var_2E] +
jz loc_445EB0  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_445B70  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_15 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FCA8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FCA8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FCA8 ebx +
test edx edx +
jnz loc_445AFC  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_445ABE  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FCA8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FCAC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_445F09  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_445C9E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_445C9E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_445CBB  +
jmp loc_445D91  +
mov edi [edi+18h] +
test edi edi +
jz loc_445D91  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_445CB0  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_29 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_445CB0  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_445EE0  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_445EC0  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_445D78  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_445D78  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_445CBB  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_445EF8  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_445DD8  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FCF4 +
mov eax ds:dword_50FD0C +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF72C +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF728 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FD00 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FCFC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FD04 +
mov [esp+6Ch+var_60] edx +
mov edx ds:dword_50FD08 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_445F1A  +
mov eax ds:dword_50FD04 +
test eax eax +
jnz loc_445E95  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_446070  +
jz loc_445E95  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_445F2C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_445B33  +
test edi edi +
jnz loc_445AF0  +
jmp loc_445BB1  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrxmega6_c +
call sub_4184A0  +
jmp loc_445D5A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadC_14 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_445D1A  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_14 +
call sub_418450  +
jmp loc_445DB3  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_14 +
call sub_418450  +
jmp loc_445C7C  +
mov ds:dword_50FD04 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSiz_14 +
call sub_418450  +
jmp loc_445E95  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_446030  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_star_14 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_446030  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_445FAD  +
cmp al 2 +
ja loc_446030  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_445FE0  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_446038  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_444420 +
call sub_40AFD0  +
jmp loc_445A8E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FCA8 eax +
jmp loc_445AF0  +
mov [esp+6Ch+var_6C] offset aLd_run_path_14 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_445A9F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSet_14 +
call sub_418450  +
jmp loc_445E95  +
***
jmp loc_446090  +
mov eax ds:dword_50FCF8 +
test eax eax +
jnz loc_4460A0  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesA_14 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_44628B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_446280  +
test byte ptr [ebp+24h] 10h +
jnz loc_446280  +
mov ecx [edx] +
test ecx ecx +
jz loc_446280  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_446280  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_446270  +
test byte ptr [esi+14h] 1 +
jz loc_446270  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_446270  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_44616F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_446177  +
and edx 300000h +
jz loc_44617F  +
cmp esi eax +
jz loc_4462A0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_446157  +
mov edx [esp+18h] +
test edx edx +
jz loc_446270  +
mov eax [esp+24h] +
test eax eax +
jz loc_446305  +
mov eax [esi] +
mov dword ptr [esp] offset aS_88 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_4462F9  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_4461C5  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_15 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_85 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_446270  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_86 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_446293  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_446225  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_15 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_446201  +
mov edx [ebp+8] +
test edx edx +
jnz loc_44625A  +
jmp loc_446330  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_446258  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_446122  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_4460E0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_446225  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_44617F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_446337  +
mov ecx ebp +
jmp loc_4462E2  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_4462E0  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_44617F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_4461C5  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_87 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_44619E  +
***
mov edx ebp +
jmp loc_446261  +
***
mov ebp [esp+28h] +
jmp loc_4462F0  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapAro_15 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRe_15 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfTh_15 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsU_15 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxU_15 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMem_15 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddre_14 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_44645C  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_446485  +
test esi esi +
jz loc_446469  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_446471  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbo_15 +
call sub_418450  +
jmp loc_44645C  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_4467B8  +
jle loc_4464F0  +
cmp eax 133h +
jz loc_446784  +
jg loc_446528  +
cmp eax 131h +
jz loc_446683  +
cmp eax 132h +
jnz loc_446766  +
mov ds:dword_50FD78 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_446770  +
jle loc_4466B0  +
cmp eax 12Eh +
jz loc_446570  +
cmp eax 12Fh +
jnz loc_446766  +
mov ds:dword_50FD84 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_446630  +
cmp eax 198h +
jnz loc_446766  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_18 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4467F2  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_446522  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_15 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_446697  +
mov edi offset off_4EC1CA +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_446697  +
mov edi offset unk_4EC1CE +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_446820  +
mov edi offset unk_4EC1D1 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_446820  +
mov edi offset unk_4EC1D4 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4468C5  +
mov edi offset off_4EC1D8 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4468C5  +
mov edi offset unk_4EC1DC +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_44661B  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4EC1E0 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_446522  +
mov dword_4BF888 10000h +
mov eax 1 +
jmp loc_446522  +
***
mov eax ds:dword_50FD24 +
test eax eax +
jz loc_44664B  +
mov [esp] eax +
call free  +
mov ds:dword_50FD24 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_446860  +
mov edi offset aNone_18 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_4464E3  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FD24 eax +
mov eax 1 +
jmp loc_446522  +
***
mov ds:dword_50FD80 1 +
mov eax 1 +
jmp loc_446522  +
***
mov dword_4BF888 8000h +
mov eax 1 +
jmp loc_446522  +
***
cmp eax 7Ah +
jnz loc_446766  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_15 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_4467E1  +
mov edi offset aMuldefs_15 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_4467D0  +
mov edi offset aMaxPageSize_15 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_446874  +
mov edi offset aCommonPageS_15 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_4468D9  +
mov edi offset aStackSize_15 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_446963  +
mov edi offset aExecstack_15 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_4469A7  +
mov edi offset aNoexecstack_15 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_4469E2  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_446522  +
***
xor eax eax +
jmp loc_446522  +
***
mov dword_4BF88C 0 +
mov eax 1 +
jmp loc_446522  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_4464E3  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FD74 eax +
mov eax 1 +
jmp loc_446522  +
***
mov ds:dword_50FD7C 1 +
mov eax 1 +
jmp loc_446522  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_446522  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_446522  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_15 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_446834  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_446522  +
***
mov dword_4BF888 2000h +
mov eax 1 +
jmp loc_446522  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_15 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_44692A  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_446522  +
***
mov ds:dword_5141E8 offset aSha1_16 +
mov eax offset aSha1_16 +
jmp loc_44666C  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_4468A8  +
lea edx [eax-1] +
test eax edx +
jz loc_4464E3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMa_15 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4464E3  +
***
mov dword_4BF888 4000h +
mov eax 1 +
jmp loc_446522  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_44690D  +
lea edx [eax-1] +
test eax edx +
jz loc_4464E3  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_31 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_4464E3  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_15 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_446808  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_32 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_446522  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_4469C3  +
test eax eax +
js loc_4469C3  +
test eax eax +
jnz loc_4464E3  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_4464E3  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_446522  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSt_15 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_446990  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSI_15 +
call sub_418450  +
mov eax 1 +
jmp loc_446522  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4EC920 +
test edi 1 +
mov eax 0A0h +
jnz loc_446A98  +
test edi 2 +
jnz loc_446AB7  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_446A86  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_446A91  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4EC920 +
add edi 1 +
mov esi 4EC921h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_446A6E  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_446A6E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_446BD0  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_446BE0  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_15 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_446C1C  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_446BD0  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_446BD0  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_446BB8  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrxmega7_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_446C30  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_20 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_446B6A  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_446BBC  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_15 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_15 +
mov ebx eax +
mov ds:dword_50FD8C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FD8C +
mov eax [eax+10h] +
test eax eax +
jz loc_446CDB  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FD8C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_446CF0  +
mov [esp+14h+var_14] offset aXPCanNotCre_15 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FD8C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampoline_15 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FD88 eax +
jz loc_446D33  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FD8C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMak_15 +
call sub_418450  +
jmp loc_446CE7  +
***
jmp sub_446D50  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_446D80  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_446DB0  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_446DAB  +
mov ecx ds:dword_50FD8C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_446DA1  +
cmp [ecx+10h] eax +
jnz loc_446DC2  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_446D90  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_446D6C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_446E1D  +
mov eax [ebx+0Ch] +
jmp ds:off_4EC29C[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__21 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_446E60  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_446DE4  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_446DF8  +
mov ebx [ebx+10h] +
jmp loc_446DDE  +
mov eax [ebx+10h] +
call sub_446DD0  +
mov eax [ebx+14h] +
call sub_446DD0  +
mov ebx [ebx+18h] +
jmp loc_446DDE  +
mov eax [ebx+10h] +
call sub_446DD0  +
jmp loc_446E14  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_446E14  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToR_15 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_446E14  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_447020  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_446FF1  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_446FD0  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_446F20  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_446F20  +
***
mov dword ptr [esp] offset aPWarning_no_15 +
call sub_418450  +
mov edx 1 +
jmp loc_446FC5  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_4470A4  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_44709A  +
test byte ptr [ebx+29h] 8 +
jz loc_44709A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_4470B0  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_4470F9  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_447178  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_4470F9  +
mov dword ptr [esp] offset dword_448430 +
mov ds:dword_50FD34 eax +
mov ds:dword_50FD30 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FD30 +
test ecx ecx +
jnz loc_44709A  +
mov dword ptr [esp+4] offset dword_50FD40 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_447150  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_447162  +
mov dword ptr [esp] offset loc_447910 +
mov ds:dword_50FD38 0 +
call sub_40D9B0  +
mov eax ds:dword_50FD38 +
test eax eax +
jz loc_447190  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_stat_15 +
call sub_418450  +
jmp loc_44710D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_15 +
call sub_418420  +
jmp loc_447123  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf__15 +
call sub_418450  +
jmp loc_4470CC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_4471F2  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_4471F2  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_447142  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_16 +
call sub_418450  +
jmp loc_447142  +
***
mov eax 2 +
jmp loc_4471B3  +
***
mov eax ds:dword_50FD38 +
test eax eax +
jz loc_447920  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_44793C  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_447942  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_447A06  +
mov eax ds:dword_50FD40 +
cmp [esp+10h] eax +
jz loc_447A22  +
mov eax ds:dword_50FD70 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_44793C  +
mov dword ptr [esp+4] offset a_so__15 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_44793C  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_447A4B  +
mov eax ds:dword_50FD70 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_44793C  +
mov eax ds:dword_50FD70 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNe_15 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_44793C  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statF_15 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_44793C  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FD44 +
jnz loc_447970  +
test ax ax +
jz loc_447970  +
mov eax [esp+50h] +
mov ds:dword_50FD38 eax +
jmp loc_44793C  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_4479BC  +
***
jmp sub_447A70  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_447A88  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr107 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_447B6B  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_447B8E  +
test ds:byte_514824 2 +
jnz loc_447CA6  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_447D40  +
mov ecx ds:dword_50FD20 +
test ecx ecx +
jnz loc_447BF7  +
mov esi offset off_4BF740 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_447BE2  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_447BE2  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_447BE2  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BF818 +
jb loc_447BB0  +
mov ds:dword_50FD20 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_447F12  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_447C26  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_447CE4  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_447C20  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_447C20  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_447C26  +
test byte ptr [eax+29h] 8 +
jnz loc_447C26  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_447C26  +
test byte ptr [edx+24h] 10h +
jnz loc_447C26  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_447C20  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_447C20  +
test byte ptr [ebx+14h] 1 +
jz loc_447B8E  +
test ebp ebp +
jz loc_447F60  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_44801C  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_15 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_447B8E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_447DD6  +
mov edx offset off_4BF800 +
mov eax [edx+8] +
test eax eax +
jz loc_447FAE  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_447B9A  +
xor edi edi +
jmp loc_447D8A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_447EE5  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_447DD2  +
mov edx [eax+14h] +
test edx edx +
jz loc_447EC0  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_447D70  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_447EC0  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_447D70  +
mov edi esi +
jmp loc_447D70  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_447FA5  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_447E30  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_447E05  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BF7D0 +
jnz loc_447CF7  +
test ebp ebp +
jnz loc_447E30  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_16 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BF7D0 +
mov eax esi +
cmp cl al +
jz loc_447CF7  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BF7A0 +
jz loc_447CF7  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BF7E8 +
jnz loc_447CF7  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BF770 +
jnz loc_447CF7  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BF788 +
jz loc_447CF7  +
test ebp ebp +
jnz loc_448168  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_15 +
mov ecx 4 +
cmps   +
jnz loc_447EA4  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BF7B8 +
test ebp ebp +
jnz loc_447CF7  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BF758 +
mov eax offset off_4BF740 +
cmovnz edx eax +
jmp loc_447CF7  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_4481AA  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_30 +
mov ecx 0Dh +
cmps   +
jnz loc_447C09  +
mov eax dword_4BF748 +
test eax eax +
jz loc_447C09  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_447D32  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_15 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_447B8E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_448031  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_15 +
jmp loc_447B8E  +
xor edx edx +
xor eax eax +
jmp loc_447D02  +
mov eax [edx] +
test eax eax +
jz loc_44803E  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_447D02  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_447D02  +
mov eax ds:dword_5146F8 +
jmp loc_447D02  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_15 +
jmp loc_447B8E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_15 +
jmp loc_447B8E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_4481B7  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_448111  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_44815C  +
movzx ecx dl +
mov esi offset a_plt_15 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_44815C  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_4480C7  +
test al al +
jz loc_4480CB  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_4480D7  +
test al al +
jz loc_44812F  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_448106  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_448106  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_448140  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_44812F  +
mov eax [ebp+18h] +
mov edi offset a_rel_15 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_448088  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_448106  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_4480F1  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_448183  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_447FDB  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_448148  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_447E93  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_447E93  +
jmp loc_447EA4  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_448150  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_448150  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_448150  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_447B9A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_448150  +
***
jmp sub_4481D0  +
***
sub esp 14h +
mov ebx ds:dword_50FD84 +
test ebx ebx +
jnz loc_448210  +
cmp ds:dword_514834 1 +
jbe loc_448210  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_448330  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_4482C0  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_4482D0  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_4482D0  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_4482E0  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_4482B1  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_4482D0  +
cmp ebx 6 +
jle loc_448320  +
sub ebx 1 +
jz loc_4482E8  +
mov eax 1 +
jmp loc_448232  +
mov [esp+14h+var_14] offset aFPMapSectio_15 +
call sub_418450  +
jmp loc_448288  +
mov [esp+14h+var_14] offset aXP_eh_frame_15 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FD84 +
test eax eax +
jz loc_4482FD  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_448274  +
mov [esp+14h+var_14] offset aPFLoopingIn_15 +
call sub_418450  +
mov eax ds:dword_50FD84 +
test eax eax +
jnz loc_4482D9  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_4482D9  +
mov [esp+14h+var_14] offset aXPCanNotBui_15 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_4482A5  +
mov [edx+1Ch] esi +
jmp loc_4482D0  +
mov [esp+14h+var_14] offset aXPCanNotSiz_15 +
call sub_418450  +
jmp loc_448210  +
***
jmp loc_448350  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FD38 +
mov ebx [esp+20h] +
test eax eax +
jz loc_448374  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_448427  +
mov eax [ebx+8] +
test eax eax +
jz loc_448427  +
mov edx [ebx+10h] +
test edx edx +
jz loc_448427  +
mov ecx ds:dword_50FD38 +
test ecx ecx +
jz loc_4483A7  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_448427  +
mov eax [ebx+8] +
mov edx ds:dword_50FD70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_448421  +
test byte ptr [ebx+24h] 4 +
jz loc_4483F9  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_4483F9  +
mov edx ds:dword_50FD70 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_448421  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_448427  +
mov edx ds:dword_50FD70 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_448427  +
mov ds:dword_50FD38 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_4489CD  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_448AEB  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_44854E  +
jmp loc_4486B2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_4486B2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_448540  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_448540  +
cmp byte ptr [eax] 0 +
jz loc_448540  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_448599  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_4486A0  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_4486A0  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_448930  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_448580  +
cmp byte ptr [esi] 0 +
jz loc_448580  +
mov edi ds:dword_50FD28 +
test edi edi +
jz loc_448AD9  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_448607  +
add eax 1 +
mov edi eax +
jz loc_448641  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_448631  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_448940  +
cmp al [esp+6Ch+var_2E] +
jz loc_448940  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_448600  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_16 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FD28 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FD28 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FD28 ebx +
test edx edx +
jnz loc_44858C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_44854E  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FD28 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FD2C +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_448999  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_44872E  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_44872E  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_44874B  +
jmp loc_448821  +
mov edi [edi+18h] +
test edi edi +
jz loc_448821  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_448740  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_31 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_448740  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_448970  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_448950  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_448808  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_448808  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_44874B  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_448988  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_448868  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FD74 +
mov eax ds:dword_50FD8C +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF88C +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF888 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FD80 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FD7C +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FD84 +
mov [esp+6Ch+var_60] edx +
mov edx ds:dword_50FD88 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4489AA  +
mov eax ds:dword_50FD84 +
test eax eax +
jnz loc_448925  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_448B00  +
jz loc_448925  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_4489BC  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_4485C3  +
test edi edi +
jnz loc_448580  +
jmp loc_448641  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrxmega7_c +
call sub_4184A0  +
jmp loc_4487EA  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadC_15 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_4487AA  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_15 +
call sub_418450  +
jmp loc_448843  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_15 +
call sub_418450  +
jmp loc_44870C  +
mov ds:dword_50FD84 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSiz_15 +
call sub_418450  +
jmp loc_448925  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_448AC0  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_star_15 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_448AC0  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_448A3D  +
cmp al 2 +
ja loc_448AC0  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_448A70  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_448AC8  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_446EB0 +
call sub_40AFD0  +
jmp loc_44851E  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FD28 eax +
jmp loc_448580  +
mov [esp+6Ch+var_6C] offset aLd_run_path_15 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_44852F  +
mov [esp+6Ch+var_6C] offset aXPCanNotSet_15 +
call sub_418450  +
jmp loc_448925  +
***
jmp loc_448B20  +
mov eax ds:dword_50FD78 +
test eax eax +
jnz loc_448B30  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesA_15 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_448D1B  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_448D10  +
test byte ptr [ebp+24h] 10h +
jnz loc_448D10  +
mov ecx [edx] +
test ecx ecx +
jz loc_448D10  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_448D10  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_448D00  +
test byte ptr [esi+14h] 1 +
jz loc_448D00  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_448D00  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_448BFF  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_448C07  +
and edx 300000h +
jz loc_448C0F  +
cmp esi eax +
jz loc_448D30  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_448BE7  +
mov edx [esp+18h] +
test edx edx +
jz loc_448D00  +
mov eax [esp+24h] +
test eax eax +
jz loc_448D95  +
mov eax [esi] +
mov dword ptr [esp] offset aS_92 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_448D89  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_448C55  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_16 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_89 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_448D00  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_90 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_448D23  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_448CB5  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_16 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_448C91  +
mov edx [ebp+8] +
test edx edx +
jnz loc_448CEA  +
jmp loc_448DC0  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_448CE8  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_448BB2  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_448B70  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_448CB5  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_448C0F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_448DC7  +
mov ecx ebp +
jmp loc_448D72  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_448D70  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_448C0F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_448C55  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_91 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_448C2E  +
***
mov edx ebp +
jmp loc_448CF1  +
***
mov ebp [esp+28h] +
jmp loc_448D80  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+8] 0EEh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPmemWrapAro_16 +
mov [esp+0Ch] ebx +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 124h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoCallRetRe_16 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 12Dh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNoStubsIfTh_16 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugStubsU_16 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 39h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDebugRelaxU_16 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 59h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDetailedMem_16 +
call fwrite  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 83h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aNonBitAddre_15 +
call fwrite  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx edx byte ptr [ebx+24h] +
movsx eax dl +
shr eax 1Fh +
mov esi eax +
or esi 4 +
test dl 40h +
cmovnz esi eax +
and edx 10h +
jz loc_448EEC  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_448F15  +
test esi esi +
jz loc_448EF9  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jnz loc_448F01  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] esi +
mov [esp] eax +
call sub_469480  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPFJustSymbo_16 +
call sub_418450  +
jmp loc_448EEC  +
***
push edi  +
push esi  +
sub esp 24h +
mov eax [esp+30h] +
cmp eax 130h +
jz loc_449248  +
jle loc_448F80  +
cmp eax 133h +
jz loc_449214  +
jg loc_448FB8  +
cmp eax 131h +
jz loc_449113  +
cmp eax 132h +
jnz loc_4491F6  +
mov ds:dword_50FDF8 1 +
add esp 24h +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
***
cmp eax 12Dh +
jz loc_449200  +
jle loc_449140  +
cmp eax 12Eh +
jz loc_449000  +
cmp eax 12Fh +
jnz loc_4491F6  +
mov ds:dword_50FE04 1 +
mov eax 1 +
add esp 24h +
pop esi  +
pop edi  +
retn   +
***
cmp eax 196h +
jz loc_4490C0  +
cmp eax 198h +
jnz loc_4491F6  +
mov eax ds:dword_5141E8 +
mov edi ds:_stricmp +
mov dword ptr [esp+4] offset aNone_19 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_449282  +
mov ds:dword_51482C 0 +
mov al 1 +
jmp loc_448FB2  +
***
mov eax ds:dword_5141E8 +
mov edi offset a32k_16 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_449127  +
mov edi offset off_4ECFEA +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_449127  +
mov edi offset unk_4ECFEE +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4492B0  +
mov edi offset unk_4ECFF1 +
mov ecx 3 +
mov esi eax +
cmps   +
jz loc_4492B0  +
mov edi offset unk_4ECFF4 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_449355  +
mov edi offset off_4ECFF8 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_449355  +
mov edi offset unk_4ECFFC +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_4490AB  +
mov ecx 4 +
mov esi eax +
mov edi offset off_4ED000 +
cmps   +
setnbe cl  +
setb dl  +
xor eax eax +
cmp cl dl +
jnz loc_448FB2  +
mov dword_4BF9E8 10000h +
mov eax 1 +
jmp loc_448FB2  +
***
mov eax ds:dword_50FDA4 +
test eax eax +
jz loc_4490DB  +
mov [esp] eax +
call free  +
mov ds:dword_50FDA4 0 +
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_4492F0  +
mov edi offset aNone_19 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_448F73  +
mov [esp] eax +
call sub_4A06C0  +
mov ds:dword_50FDA4 eax +
mov eax 1 +
jmp loc_448FB2  +
***
mov ds:dword_50FE00 1 +
mov eax 1 +
jmp loc_448FB2  +
***
mov dword_4BF9E8 8000h +
mov eax 1 +
jmp loc_448FB2  +
***
cmp eax 7Ah +
jnz loc_4491F6  +
mov eax ds:dword_5141E8 +
mov edi offset aDefs_16 +
mov ecx 5 +
mov esi eax +
cmps   +
jz loc_449271  +
mov edi offset aMuldefs_16 +
mov ecx 8 +
mov esi eax +
cmps   +
jz loc_449260  +
mov edi offset aMaxPageSize_16 +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_449304  +
mov edi offset aCommonPageS_16 +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_449369  +
mov edi offset aStackSize_16 +
mov ecx 0Bh +
mov esi eax +
cmps   +
jz loc_4493F3  +
mov edi offset aExecstack_16 +
mov ecx 0Ah +
mov esi eax +
cmps   +
jz loc_449437  +
mov edi offset aNoexecstack_16 +
mov ecx 0Ch +
mov esi eax +
cmps   +
jnz loc_449472  +
movzx eax ds:byte_514825 +
or eax 4 +
and eax 0FFFFFFFDh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_448FB2  +
***
xor eax eax +
jmp loc_448FB2  +
***
mov dword_4BF9EC 0 +
mov eax 1 +
jmp loc_448FB2  +
***
mov eax ds:dword_5141E8 +
test eax eax +
jz loc_448F73  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call strtoul  +
mov ds:dword_50FDF4 eax +
mov eax 1 +
jmp loc_448FB2  +
***
mov ds:dword_50FDFC 1 +
mov eax 1 +
jmp loc_448FB2  +
***
or ds:byte_514824 40h +
mov eax 1 +
jmp loc_448FB2  +
***
or ds:byte_514822 6 +
mov eax 1 +
jmp loc_448FB2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlib_16 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4492C4  +
mov ds:dword_51482C 5 +
mov al 1 +
jmp loc_448FB2  +
***
mov dword_4BF9E8 2000h +
mov eax 1 +
jmp loc_448FB2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGnu_16 +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_4493BA  +
mov ds:dword_51482C 3 +
mov al 1 +
jmp loc_448FB2  +
***
mov ds:dword_5141E8 offset aSha1_17 +
mov eax offset aSha1_17 +
jmp loc_4490FC  +
***
lea edx [esp+1Ch] +
add eax 0Eh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514784 eax +
cmp byte ptr [edx] 0 +
jnz loc_449338  +
lea edx [eax-1] +
test eax edx +
jz loc_448F73  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidMa_16 +
add eax 0Eh +
mov [esp+4] eax +
call sub_418450  +
jmp loc_448F73  +
***
mov dword_4BF9E8 4000h +
mov eax 1 +
jmp loc_448FB2  +
***
lea edx [esp+1Ch] +
add eax 11h +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514788 eax +
cmp byte ptr [edx] 0 +
jnz loc_44939D  +
lea edx [eax-1] +
test eax edx +
jz loc_448F73  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_33 +
add eax 11h +
mov [esp+4] eax +
call sub_418450  +
jmp loc_448F73  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp+4] offset aZlibGabi_16 +
mov [esp] eax +
call edi  +
test eax eax +
jz loc_449298  +
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidCo_34 +
mov [esp+4] eax +
call sub_418450  +
mov eax 1 +
jmp loc_448FB2  +
***
lea edx [esp+1Ch] +
add eax 0Bh +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call strtoul  +
mov edx [esp+1Ch] +
mov ds:dword_514830 eax +
cmp byte ptr [edx] 0 +
jnz loc_449453  +
test eax eax +
js loc_449453  +
test eax eax +
jnz loc_448F73  +
mov ds:dword_514830 0FFFFFFFFh +
jmp loc_448F73  +
***
movzx eax ds:byte_514825 +
or eax 2 +
and eax 0FFFFFFFBh +
mov ds:byte_514825 al +
mov eax 1 +
jmp loc_448FB2  +
***
mov eax ds:dword_5141E8 +
mov dword ptr [esp] offset aPFInvalidSt_16 +
add eax 0Bh +
mov [esp+4] eax +
call sub_418450  +
mov eax ds:dword_514830 +
jmp loc_449420  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aPWarningZSI_16 +
call sub_418450  +
mov eax 1 +
jmp loc_448FB2  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov edi [esp+2Ch] +
mov eax [ebx] +
lea edx [esi+3] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4A0670  +
mov edx 3A7Ah +
mov [ebx] eax +
mov [eax+esi] dx +
mov byte ptr [eax+esi+2] 0 +
mov eax [esp+28h] +
lea esi [eax+0Ah] +
mov eax [edi] +
shl esi 4 +
mov [esp+4] esi +
mov [esp] eax +
call sub_4A0670  +
mov [edi] eax +
lea edi [eax+esi-0A0h] +
mov esi offset off_4ED740 +
test edi 1 +
mov eax 0A0h +
jnz loc_449528  +
test edi 2 +
jnz loc_449547  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_449516  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_449521  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
movzx eax byte ptr ds:off_4ED740 +
add edi 1 +
mov esi 4ED741h +
mov [edi-1] al +
test edi 2 +
mov eax 9Fh +
jz loc_4494FE  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_4494FE  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+38h+arg_8] +
mov esi [esp+38h+arg_4] +
movzx ecx byte ptr [ebx+24h] +
test cl 1 +
mov [esp+38h+var_1C] ecx +
jz loc_449660  +
mov eax [esi+4] +
mov edi [ebx+8] +
mov [esp+38h+var_38] eax +
call strlen  +
mov [esp+38h+var_38] edi +
mov ebp eax +
call strlen  +
mov ecx [esp+38h+var_1C] +
add ebp eax +
and ecx 2 +
jnz loc_449670  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
lea eax [ebp+eax+8] +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov esi [esp+38h+arg_0] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSLibSS_so_16 +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_28] esi +
mov [esp+38h+var_38] ebp +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jz loc_4496AC  +
mov eax [ebx+10h] +
mov [ebx+8] ebp +
mov [esp+38h+var_34] 1 +
mov [esp+38h+var_38] eax +
call sub_454030  +
mov edx 1 +
test eax eax +
jz loc_449660  +
mov eax [ebx+10h] +
test byte ptr [eax+29h] 8 +
jz loc_449660  +
movzx eax byte ptr [ebx+24h] +
mov edx eax +
and edx 5 +
cmp dl 5 +
jz loc_449648  +
mov [esp+38h+var_34] 627h +
mov [esp+38h+var_38] offset aEavrtiny_c +
call sub_4184A0  +
movzx eax byte ptr [ebx+24h] +
test al 2 +
jz loc_4496C0  +
mov eax [ebx+10h] +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call sub_469420  +
mov edx 1 +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
mov [esp+38h+var_38] ebp +
call sub_4A05F0  +
mov ebp eax +
mov eax [esi+4] +
mov [esp+38h+var_2C] edi +
mov [esp+38h+var_34] offset aSS_21 +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_30] eax +
call sprintf  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call sub_4189C0  +
test eax eax +
jnz loc_4495FA  +
mov [esp+38h+var_38] ebp +
call free  +
add esp 2Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8] +
mov [esp+38h+var_38] eax +
call sub_4A8D80  +
mov edi eax +
jmp loc_44964C  +
***
sub esp 14h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 3 +
mov [esp+14h+var_14] offset aLinkerStubs_16 +
call sub_40B090  +
mov [esp+14h+var_14] offset aLinkerStubs_16 +
mov ebx eax +
mov ds:dword_50FE0C eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_10] eax +
call sub_458880  +
mov [ebx+10h] eax +
mov eax ds:dword_50FE0C +
mov eax [eax+10h] +
test eax eax +
jz loc_44976B  +
mov eax [eax+4] +
mov ebx [eax+150h] +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536C0  +
mov esi eax +
mov eax ds:dword_514850 +
mov [esp+14h+var_14] eax +
call sub_4536B0  +
mov edx ds:dword_50FE0C +
mov edx [edx+10h] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call ebx  +
test eax eax +
jnz loc_449780  +
mov [esp+14h+var_14] offset aXPCanNotCre_16 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax ds:dword_50FE0C +
mov eax [eax+10h] +
mov [esp+14h+var_C] 20411Fh +
mov [esp+14h+var_10] offset a_trampoline_16 +
mov [esp+14h+var_14] eax +
call sub_44D890  +
test eax eax +
mov ds:dword_50FE08 eax +
jz loc_4497C3  +
mov dword ptr [eax+40h] 1 +
mov eax ds:dword_50FE0C +
mov [esp+14h+var_14] eax +
call sub_40DA10  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] offset aXPCanNotMak_16 +
call sub_418450  +
jmp loc_449777  +
***
jmp sub_4497E0  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_449810  +
cmp ds:dword_514834 1 +
mov eax ds:dword_514850 +
jbe loc_449840  +
mov eax [eax+0A0h] +
and dword ptr [eax+20h] 0FFFFFF7Fh +
jmp near ptr dword_417750  +
mov eax ds:dword_514854 +
test eax eax +
jz loc_44983B  +
mov ecx ds:dword_50FE0C +
nop   +
mov edx [eax+0A0h] +
test byte ptr [edx+20h] 80h +
jnz loc_449831  +
cmp [ecx+10h] eax +
jnz loc_449852  +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_449820  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
or dword ptr [eax+20h] 80h +
jmp near ptr dword_417750  +
mov eax ds:dword_514850 +
jmp loc_4497FC  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ebx+0Ch] 6 +
ja loc_4498AD  +
mov eax [ebx+0Ch] +
jmp ds:off_4ED0B8[eax*4]  +
mov [esp+38h+var_1C] 1 +
mov eax [ebx+10h] +
mov ecx ebp +
mov edi offset a__22 +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_4498F0  +
mov ebx [ebx+14h] +
cmp dword ptr [ebx+0Ch] 6 +
jbe loc_449874  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_1C] 0 +
jmp loc_449888  +
mov ebx [ebx+10h] +
jmp loc_44986E  +
mov eax [ebx+10h] +
call sub_449860  +
mov eax [ebx+14h] +
call sub_449860  +
mov ebx [ebx+18h] +
jmp loc_44986E  +
mov eax [ebx+10h] +
call sub_449860  +
jmp loc_4498A4  +
mov ecx [ebx+1Ch] +
mov edx [esp+38h+var_1C] +
mov [esp+38h+var_30] eax +
mov eax ds:dword_514850 +
mov [esp+38h+var_34] offset word_514820 +
mov [esp+38h+var_28] ecx +
mov [esp+38h+var_2C] edx +
mov [esp+38h+var_38] eax +
call sub_462360  +
test eax eax +
jnz loc_4498A4  +
mov eax [ebx+10h] +
mov [esp+38h+var_38] offset aPFFailedToR_16 +
mov [esp+38h+var_34] eax +
call sub_418450  +
jmp loc_4498A4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov ecx [ebx+4] +
mov eax [ecx+1B0h] +
mov [esp+14h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov edx [eax+18h] +
mov edi [eax+14h] +
mov eax [edx+3Ch] +
mov [esp+18h] edi +
cmp eax offset off_4BFB90 +
jz loc_449AB0  +
mov ebp [eax+8Ch] +
mov esi [ebp+30h] +
test esi esi +
jz loc_449A81  +
add esi [edx+38h] +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
lea edi [eax-10h] +
mov eax [ecx+54h] +
mov [esp+4] esi +
mov dword ptr [esp] 4 +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edi +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov dword ptr [esp] 3 +
call eax  +
mov eax [esp+14h] +
lea ecx [esi+10h] +
mov dword ptr [esi+0Ch] 554E47h +
mov eax [eax+174h] +
mov eax [eax+18h] +
mov [esp+10h] edi +
mov [esp+0Ch] ecx +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
call sub_41B8C0  +
mov edx [esp+1Ch] +
mov edi [edx+24h] +
mov dword ptr [esp+0Ch] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ebp+10h] +
adc edx [ebp+14h] +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jz loc_449A60  +
add esp 2Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_46FB80  +
xor edx edx +
cmp edi eax +
setz dl  +
add esp 2Ch +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edx+6Ch] +
test esi esi +
jnz loc_4499B0  +
mov eax [edx+24h] +
mov [esp+1Ch] edx +
mov [esp] eax +
call sub_4A05F0  +
mov edx [esp+1Ch] +
mov ecx [ebx+4] +
mov [edx+6Ch] eax +
mov esi eax +
jmp loc_4499B0  +
***
mov dword ptr [esp] offset aPWarning_no_16 +
call sub_418450  +
mov edx 1 +
jmp loc_449A55  +
***
push ebp  +
mov ebp edx +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [eax+4] +
mov eax ds:dword_514850 +
mov eax [eax+4] +
mov eax [eax] +
mov [esp] esi +
mov [esp+4] eax +
call sub_4585B0  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_449B34  +
or dword ptr [ebx+28h] 100000h +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
call sub_454030  +
test eax eax +
jz loc_449B2A  +
test byte ptr [ebx+29h] 8 +
jz loc_449B2A  +
mov eax ds:dword_514850 +
mov eax [eax+4] +
cmp [ebx+4] eax +
jz loc_449B40  +
mov [esp] ebx +
call sub_4586F0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jnz loc_449B89  +
lea eax [esp+1Ch] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469520  +
test eax eax +
jz loc_449C08  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_449B89  +
mov dword ptr [esp] offset dword_44AEC0 +
mov ds:dword_50FDB4 eax +
mov ds:dword_50FDB0 0 +
call sub_40D9B0  +
mov ecx ds:dword_50FDB0 +
test ecx ecx +
jnz loc_449B2A  +
mov dword ptr [esp+4] offset dword_50FDC0 +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_449BE0  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
mov edx ds:dword_514798 +
test edx edx +
mov ebp eax +
jnz loc_449BF2  +
mov dword ptr [esp] offset loc_44A3A0 +
mov ds:dword_50FDB8 0 +
call sub_40D9B0  +
mov eax ds:dword_50FDB8 +
test eax eax +
jz loc_449C20  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_stat_16 +
call sub_418450  +
jmp loc_449B9D  +
***
mov [esp+8] esi +
mov [esp+4] eax +
mov dword ptr [esp] offset aFoundSAtS_16 +
call sub_418420  +
jmp loc_449BB3  +
***
mov [esp+4] ebx +
mov dword ptr [esp] offset aFPBBfd_elf__16 +
call sub_418450  +
jmp loc_449B5C  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_469420  +
mov eax [edi] +
test eax eax +
jz loc_449C82  +
mov [esp] eax +
call sub_469450  +
test al 4 +
jz loc_449C82  +
mov eax 0Eh +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469480  +
mov eax [ebx+4] +
mov eax [eax+168h] +
mov dword ptr [esp+4] offset word_514820 +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_449BD2  +
mov [esp+4] ebx +
mov dword ptr [esp] offset aFBErrorAddi_17 +
call sub_418450  +
jmp loc_449BD2  +
***
mov eax 2 +
jmp loc_449C43  +
***
mov eax ds:dword_50FDB8 +
test eax eax +
jz loc_44A3B0  +
retn   +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+50h] +
mov eax [eax+10h] +
test eax eax +
jz loc_44A3CC  +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_44A3D2  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+50h] +
lea edx [esp+10h] +
mov eax [eax+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_46FC90  +
test eax eax +
jnz loc_44A496  +
mov eax ds:dword_50FDC0 +
cmp [esp+10h] eax +
jz loc_44A4B2  +
mov eax ds:dword_50FDF0 +
mov ebx [eax+8] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strchr  +
test eax eax +
jnz loc_44A3CC  +
mov dword ptr [esp+4] offset a_so__16 +
mov [esp] ebx +
call strstr  +
test eax eax +
jz loc_44A3CC  +
lea esi [eax+4] +
mov eax [esp+50h] +
mov eax [eax+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
mov ebx eax +
jz loc_44A4DB  +
mov eax ds:dword_50FDF0 +
mov edx [eax+8] +
mov [esp] ebx +
sub esi edx +
mov [esp+8] esi +
mov [esp+4] edx +
call sub_4A8BC0  +
test eax eax +
jnz loc_44A3CC  +
mov eax ds:dword_50FDF0 +
mov edx [eax+4] +
mov eax [eax+8] +
mov [esp+0Ch] ebx +
mov dword ptr [esp] offset aPWarningSNe_16 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_418450  +
jmp loc_44A3CC  +
***
mov eax [esp+50h] +
mov eax [eax+10h] +
mov dword ptr [esp] offset aPBBfd_statF_16 +
mov [esp+4] eax +
call sub_418450  +
jmp loc_44A3CC  +
***
movzx eax word ptr [esp+14h] +
cmp ax ds:word_50FDC4 +
jnz loc_44A400  +
test ax ax +
jz loc_44A400  +
mov eax [esp+50h] +
mov ds:dword_50FDB8 eax +
jmp loc_44A3CC  +
***
mov eax [esp+50h] +
mov eax [eax+8] +
mov [esp] eax +
call sub_4A8D80  +
mov ebx eax +
jmp loc_44A44C  +
***
jmp sub_44A500  +
***
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jnz loc_44A518  +
or ds:dword_51488C 8000000h +
jmp sub_417680  +
***
sub esp 1Ch +
mov [esp+1Ch+var_18] 44h +
mov [esp+1Ch+var_1C] offset aAvr100 +
mov ds:dword_514720 0 +
call sub_419180  +
or byte ptr ds:dword_5146EC 20h +
mov ds:dword_514728 0 +
mov ds:dword_514764 0 +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_2C] 0 +
mov eax [ebx+94h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
setz al  +
movzx ebp al +
test ebp ebp +
mov byte ptr [esp+4Ch+var_20] al +
jz loc_44A5FB  +
mov eax [ebx+8Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_2C] eax +
movzx eax byte ptr ds:word_514820 +
mov [esp+4Ch+var_28] 0 +
and eax 3 +
cmp al 2 +
jz loc_44A61E  +
test ds:byte_514824 2 +
jnz loc_44A736  +
mov eax [esp+4Ch+arg_8] +
test eax eax +
jz loc_44A7D0  +
mov ecx ds:dword_50FDA0 +
test ecx ecx +
jnz loc_44A687  +
mov esi offset off_4BF8A0 +
lea esi [esi+0] +
mov eax [esi] +
test eax eax +
jz loc_44A672  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov [esi+8] eax +
jz loc_44A672  +
mov edx [eax+4Ch] +
test edx edx +
jnz loc_44A672  +
mov edx [esi+4] +
mov [eax+4Ch] edx +
add esi 18h +
cmp esi offset unk_4BF978 +
jb loc_44A640  +
mov ds:dword_50FDA0 1 +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 1 +
jbe loc_44A9A2  +
mov eax [ebx+14h] +
mov esi ebx +
mov [esp+4Ch+var_24] eax +
mov eax [ebx+94h] +
jmp loc_44A6B6  +
mov eax [esi+94h] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_44D4F0  +
test eax eax +
mov esi eax +
jz loc_44A774  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_44A6B0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_44A6B0  +
xor eax [esp+4Ch+var_24] +
test al 3 +
mov eax [esi+94h] +
jnz loc_44A6B6  +
test byte ptr [eax+29h] 8 +
jnz loc_44A6B6  +
mov edx [eax+0A4h] +
test edx edx +
jz loc_44A6B6  +
test byte ptr [edx+24h] 10h +
jnz loc_44A6B6  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] edx +
call sub_4696A0  +
test eax eax +
jz loc_44A6B0  +
mov eax [esi+14h] +
xor [esp+4Ch+var_24] 8 +
xor eax 8 +
or [esp+4Ch+var_24] eax +
xor [esp+4Ch+var_24] 8 +
jmp loc_44A6B0  +
test byte ptr [ebx+14h] 1 +
jz loc_44A61E  +
test ebp ebp +
jz loc_44A9F0  +
mov ecx [esp+4Ch+var_2C] +
cmp ecx 4 +
jz loc_44AAAC  +
xor eax eax +
cmp ecx 9 +
setz al  +
mov [esp+4Ch+var_28] eax +
mov eax offset a_rel_dyn_16 +
cmovnz eax [esp+4Ch+arg_4] +
mov [esp+4Ch+arg_4] eax +
jmp loc_44A61E  +
test [esp+4Ch+var_24] 2001h +
jnz loc_44A866  +
mov edx offset off_4BF960 +
mov eax [edx+8] +
test eax eax +
jz loc_44AA3E  +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
call sub_40F530  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_40C0C0  +
test eax eax +
mov esi eax +
jz loc_44A62A  +
xor edi edi +
jmp loc_44A81A  +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] 0 +
call sub_40C480  +
test eax eax +
mov esi eax +
jz loc_44A975  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_44A862  +
mov edx [eax+14h] +
test edx edx +
jz loc_44A950  +
xor edx [ebx+14h] +
and edx 3 +
jnz loc_44A800  +
mov edx [ebx+94h] +
mov [esp+4Ch+var_48] eax +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_4696A0  +
test eax eax +
jnz loc_44A950  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_44A800  +
mov edi esi +
jmp loc_44A800  +
test byte ptr [esp+4Ch+var_24] 1 +
jz loc_44AA35  +
mov eax [esp+4Ch+var_24] +
and eax 2 +
mov [esp+4Ch+var_1C] eax +
jz loc_44A8C0  +
cmp [esp+4Ch+var_2C] 7 +
jnz loc_44A895  +
cmp byte ptr [esp+4Ch+var_20] 0 +
mov edx offset off_4BF930 +
jnz loc_44A787  +
test ebp ebp +
jnz loc_44A8C0  +
mov esi [esp+4Ch+arg_4] +
mov ecx 5 +
mov edi offset a_note_17 +
cmps   +
setb dl  +
setnbe cl  +
mov esi edx +
mov edx offset off_4BF930 +
mov eax esi +
cmp cl al +
jz loc_44A787  +
test [esp+4Ch+var_24] 502h +
mov edx offset off_4BF900 +
jz loc_44A787  +
test [esp+4Ch+var_24] 400000h +
mov edx offset off_4BF948 +
jnz loc_44A787  +
test [esp+4Ch+var_24] 400h +
mov edx offset off_4BF8D0 +
jnz loc_44A787  +
test byte ptr [esp+4Ch+var_24] 8 +
mov edx offset off_4BF8E8 +
jz loc_44A787  +
test ebp ebp +
jnz loc_44ABF8  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_16 +
mov ecx 4 +
cmps   +
jnz loc_44A934  +
mov ebp [esp+4Ch+var_1C] +
mov edx offset unk_4BF918 +
test ebp ebp +
jnz loc_44A787  +
test byte ptr [esp+4Ch+var_24] 10h +
mov edx offset off_4BF8B8 +
mov eax offset off_4BF8A0 +
cmovnz edx eax +
jmp loc_44A787  +
lea eax [esi+8] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_44AC3A  +
lea eax [edi+8] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_44] 0 +
call sub_40CBF0  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebx] +
mov edi offset a_gnu_warnin_32 +
mov ecx 0Dh +
cmps   +
jnz loc_44A699  +
mov eax dword_4BF8A8 +
test eax eax +
jz loc_44A699  +
lea edx [eax+8] +
mov [esp+4Ch+var_40] eax +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_2C] eax +
call sub_40CBF0  +
mov eax [esp+4Ch+var_2C] +
jmp loc_44A7C2  +
mov esi [esp+4Ch+arg_4] +
mov edi offset a_rel_16 +
mov ecx 4 +
mov [esp+4Ch+var_28] ebp +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_44A61E  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_28] 1 +
cmp byte ptr [eax+4] 61h +
jz loc_44AAC1  +
mov [esp+4Ch+arg_4] offset a_rel_dyn_16 +
jmp loc_44A61E  +
xor edx edx +
xor eax eax +
jmp loc_44A792  +
mov eax [edx] +
test eax eax +
jz loc_44AACE  +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_2C] edx +
call sub_40C0C0  +
mov edx [esp+4Ch+var_2C] +
mov [edx+8] eax +
test eax eax +
jnz loc_44A792  +
lea eax [edx+8] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] offset sub_4696A0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_2C] edx +
mov [esp+4Ch+var_48] eax +
call sub_40C4E0  +
mov edx [esp+4Ch+var_2C] +
test eax eax +
jnz loc_44A792  +
mov eax ds:dword_5146F8 +
jmp loc_44A792  +
mov [esp+4Ch+var_28] 1 +
mov [esp+4Ch+arg_4] offset a_rela_dyn_16 +
jmp loc_44A61E  +
mov [esp+4Ch+arg_4] offset a_rela_dyn_16 +
jmp loc_44A61E  +
mov eax [ebx] +
mov ebp ds:dword_5146F8 +
cmp byte ptr [eax+4] 61h +
setz [esp+4Ch+var_11]  +
test ebp ebp +
jz loc_44AC47  +
xor eax eax +
mov [esp+4Ch+arg_0] ebx +
mov ebx eax +
mov [esp+4Ch+var_18] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_10] edx +
jmp loc_44ABA1  +
mov esi [esp+4Ch+var_28] +
cmp byte ptr [eax+4] 61h +
setz dl  +
test esi esi +
jnz loc_44ABEC  +
movzx ecx dl +
mov esi offset a_plt_16 +
lea edi [eax+ecx+4] +
mov ecx 5 +
cmps   +
jz loc_44ABEC  +
mov ecx [esp+4Ch+var_1C] +
cmp [esp+4Ch+var_11] dl +
setz al  +
test ecx ecx +
jz loc_44AB57  +
test al al +
jz loc_44AB5B  +
mov [esp+4Ch+var_1C] ebp +
mov edx [esp+4Ch+var_20] +
test edx edx +
jz loc_44AB67  +
test al al +
jz loc_44ABBF  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_44AB96  +
mov eax [eax+14h] +
mov ecx [esp+4Ch+var_20] +
mov edx eax +
and edx 1 +
cmovnz ecx ebp +
mov [esp+4Ch+var_20] ecx +
test edx edx +
jz loc_44AB96  +
test al 8 +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_18] ebp +
cmovnz eax ebp +
mov [esp+4Ch+var_2C] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_44ABD0  +
mov ebx ebp +
mov ebp eax +
mov edi [ebp+48h] +
test edi edi +
js loc_44ABBF  +
mov eax [ebp+18h] +
mov edi offset a_rel_16 +
mov ecx 4 +
mov esi eax +
cmps   +
jz loc_44AB18  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_44AB96  +
mov eax [eax+14h] +
mov edx eax +
and edx 1 +
jmp loc_44AB81  +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
mov eax [esp+4Ch+var_20] +
test eax eax +
jz loc_44AC13  +
mov eax [esp+4Ch+var_20] +
mov [edx+8] eax +
jmp loc_44AA6B  +
mov ebp ebx +
mov edx [esp+4Ch+var_10] +
mov ebx [esp+4Ch+arg_0] +
jmp loc_44ABD8  +
cmp [esp+4Ch+var_2C] 9 +
jz loc_44A923  +
cmp [esp+4Ch+var_2C] 4 +
jz loc_44A923  +
jmp loc_44A934  +
mov eax [esp+4Ch+var_1C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_44ABE0  +
mov eax [esp+4Ch+var_2C] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_44ABE0  +
mov eax [esp+4Ch+var_18] +
test eax eax +
cmovnz ebp eax +
mov [esp+4Ch+var_20] ebp +
jmp loc_44ABE0  +
mov [esp+4Ch+arg_8] 17Ch +
jmp loc_44A62A  +
mov [esp+4Ch+var_20] 0 +
jmp loc_44ABE0  +
***
jmp sub_44AC60  +
***
sub esp 14h +
mov ebx ds:dword_50FE04 +
test ebx ebx +
jnz loc_44ACA0  +
cmp ds:dword_514834 1 +
jbe loc_44ACA0  +
mov eax ds:dword_514850 +
mov [esp+14h+var_C] 1 +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_472120  +
test eax eax +
jz loc_44ADC0  +
lea esi [esi+0] +
mov eax ds:dword_514850 +
mov ebx 0Ah +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_46EE60  +
test eax eax +
js loc_44AD50  +
mov [esp+14h+var_14] eax +
call sub_40EDC0  +
mov eax ds:dword_514850 +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_44AD60  +
movzx edx byte ptr ds:word_514820 +
and edx 3 +
cmp dl 2 +
jz loc_44AD60  +
mov edx [eax+0A0h] +
mov ecx ds:dword_5146E4 +
mov edx [edx+934h] +
test ecx ecx +
mov esi [edx+1Ch] +
jz loc_44AD70  +
mov [esp+14h+var_10] offset word_514820 +
mov [esp+14h+var_14] eax +
call sub_478E10  +
test eax eax +
jz loc_44AD41  +
mov eax ds:dword_514850 +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [edx+1Ch] +
cmp esi eax +
jz loc_44AD60  +
cmp ebx 6 +
jle loc_44ADB0  +
sub ebx 1 +
jz loc_44AD78  +
mov eax 1 +
jmp loc_44ACC2  +
mov [esp+14h+var_14] offset aFPMapSectio_16 +
call sub_418450  +
jmp loc_44AD18  +
mov [esp+14h+var_14] offset aXP_eh_frame_16 +
call sub_418450  +
lea esi [esi+0] +
mov eax ds:dword_50FE04 +
test eax eax +
jz loc_44AD8D  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov dword ptr [edx] 0 +
jmp loc_44AD04  +
mov [esp+14h+var_14] offset aPFLoopingIn_16 +
call sub_418450  +
mov eax ds:dword_50FE04 +
test eax eax +
jnz loc_44AD69  +
mov [esp+14h+var_14] offset word_514820 +
call sub_4726A0  +
test eax eax +
jnz loc_44AD69  +
mov [esp+14h+var_14] offset aXPCanNotBui_16 +
call sub_418450  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi eax +
jb loc_44AD35  +
mov [edx+1Ch] esi +
jmp loc_44AD60  +
mov [esp+14h+var_14] offset aXPCanNotSiz_16 +
call sub_418450  +
jmp loc_44ACA0  +
***
jmp loc_44ADE0  +
push ebx  +
sub esp 18h +
mov eax ds:dword_50FDB8 +
mov ebx [esp+20h] +
test eax eax +
jz loc_44AE04  +
mov eax [eax+10h] +
mov [esp] eax +
call sub_469450  +
test al 1 +
jz loc_44AEB7  +
mov eax [ebx+8] +
test eax eax +
jz loc_44AEB7  +
mov edx [ebx+10h] +
test edx edx +
jz loc_44AEB7  +
mov ecx ds:dword_50FDB8 +
test ecx ecx +
jz loc_44AE37  +
mov [esp] edx +
call sub_469450  +
test al 1 +
jnz loc_44AEB7  +
mov eax [ebx+8] +
mov edx ds:dword_50FDF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_44AEB1  +
test byte ptr [ebx+24h] 4 +
jz loc_44AE89  +
mov dword ptr [esp+4] 2Fh +
mov eax [ebx+8] +
mov [esp] eax +
call strrchr  +
test eax eax +
jz loc_44AE89  +
mov edx ds:dword_50FDF0 +
add eax 1 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jz loc_44AEB1  +
mov eax [ebx+10h] +
mov [esp] eax +
call sub_4694F0  +
test eax eax +
jz loc_44AEB7  +
mov edx ds:dword_50FDF0 +
mov edx [edx+8] +
mov [esp] eax +
mov [esp+4] edx +
call sub_4A8B70  +
test eax eax +
jnz loc_44AEB7  +
mov ds:dword_50FDB8 ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_40] 0 +
cmp dword ptr [eax+28h] 1 +
jz loc_44B45D  +
mov eax ds:dword_5147E0 +
test eax eax +
mov [esp+6Ch+var_3C] eax +
jz loc_44B57B  +
mov edi ds:dword_514854 +
test edi edi +
mov ebp edi +
jnz loc_44AFDE  +
jmp loc_44B142  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_44B142  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_44AFD0  +
mov eax [ebp+0A0h] +
mov eax [eax+224h] +
test eax eax +
jz loc_44AFD0  +
cmp byte ptr [eax] 0 +
jz loc_44AFD0  +
mov [esp+6Ch+var_6C] eax +
call sub_4A06C0  +
mov [esp+6Ch+var_34] ebp +
mov esi eax +
jmp loc_44B029  +
mov edx [esp+6Ch+var_48] +
test edx edx +
jz loc_44B130  +
mov esi [esp+6Ch+var_44] +
add esi 1 +
jz loc_44B130  +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
mov [esp+6Ch+var_44] eax +
jz loc_44B3C5  +
mov byte ptr [eax] 0 +
mov [esp+6Ch+var_48] 1 +
test esi esi +
jz loc_44B010  +
cmp byte ptr [esi] 0 +
jz loc_44B010  +
mov edi ds:dword_50FDA8 +
test edi edi +
jz loc_44B569  +
mov [esp+6Ch+var_6C] edi +
call strlen  +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_38] eax +
call strlen  +
mov ebx eax +
movzx eax ds:byte_514768 +
mov [esp+6Ch+var_2E] al +
movsx ebp al +
jmp loc_44B097  +
add eax 1 +
mov edi eax +
jz loc_44B0D1  +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call strncmp  +
test eax eax +
jnz loc_44B0C1  +
movzx eax byte ptr [edi+ebx] +
test al al +
jz loc_44B3D2  +
cmp al [esp+6Ch+var_2E] +
jz loc_44B3D2  +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] edi +
call strchr  +
test eax eax +
jnz loc_44B090  +
mov eax [esp+6Ch+var_38] +
lea eax [eax+ebx+2] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov [esp+6Ch+var_5C] esi +
mov [esp+6Ch+var_68] offset aSCS_17 +
mov ebx eax +
movsx eax ds:byte_514768 +
mov [esp+6Ch+var_6C] ebx +
mov [esp+6Ch+var_60] eax +
mov eax ds:dword_50FDA8 +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov eax ds:dword_50FDA8 +
mov [esp+6Ch+var_6C] eax +
call free  +
mov edx [esp+6Ch+var_48] +
mov ds:dword_50FDA8 ebx +
test edx edx +
jnz loc_44B01C  +
lea esi [esi+0] +
mov ebp [esp+6Ch+var_34] +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_44AFDE  +
lea eax [esp+6Ch+var_2C] +
mov [esp+6Ch+var_4C] eax +
mov eax ds:dword_5147EC +
mov [esp+6Ch+var_50] offset word_514820 +
mov [esp+6Ch+var_54] eax +
mov eax ds:dword_50FDA8 +
mov [esp+6Ch+var_58] eax +
mov eax ds:dword_50FDAC +
mov [esp+6Ch+var_5C] eax +
mov eax ds:dword_5147E8 +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_64] eax +
mov eax ds:dword_5147DC +
mov [esp+6Ch+var_68] eax +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_6C] eax +
call sub_466B40  +
test eax eax +
jz loc_44B429  +
mov eax ds:dword_5147D8 +
test eax eax +
jz loc_44B1BE  +
mov ebx [esp+6Ch+var_2C] +
test ebx ebx +
jz loc_44B1BE  +
mov [ebx+6Ch] eax +
mov [esp+6Ch+var_6C] eax +
call strlen  +
add eax 1 +
mov [ebx+24h] eax +
mov edi ds:dword_50F27C +
test edi edi +
jnz loc_44B1DB  +
jmp loc_44B2B1  +
mov edi [edi+18h] +
test edi edi +
jz loc_44B2B1  +
test byte ptr [edi+24h] 10h +
nop   +
jnz loc_44B1D0  +
mov eax [edi+10h] +
mov [esp+6Ch+var_68] offset a_gnu_warnin_33 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_44B1D0  +
mov ebp [eax+24h] +
lea eax [ebp+1] +
mov [esp+6Ch+var_6C] eax +
call sub_4A05F0  +
mov esi eax +
mov eax [edi+10h] +
mov [esp+6Ch+var_58] ebp +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_64] esi +
mov [esp+6Ch+var_68] ebx +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_44B400  +
mov byte ptr [esi+ebp] 0 +
mov eax ds:dword_514838 +
mov edx [edi+10h] +
mov eax [eax+14h] +
mov [esp+6Ch+var_58] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] offset word_514820 +
call eax  +
test eax eax +
jz loc_44B3E0  +
mov [esp+6Ch+var_6C] esi +
call free  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_44B298  +
mov ecx [eax+28h] +
mov edx [ebx+24h] +
cmp ecx edx +
jb loc_44B298  +
sub ecx edx +
mov [eax+28h] ecx +
mov edi [edi+18h] +
or dword ptr [ebx+14h] 208000h +
mov dword ptr [ebx+24h] 0 +
test edi edi +
jnz loc_44B1DB  +
call sub_417730  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_468220  +
test eax eax +
jz loc_44B418  +
mov ecx [esp+6Ch+var_40] +
test ecx ecx +
jz loc_44B2F8  +
movzx eax [esp+6Ch+var_2D] +
mov [ecx+0Ch] al +
mov eax [esp+6Ch+var_18] +
mov [ecx+10h] eax +
mov eax [esp+6Ch+var_14] +
mov [ecx+14h] eax +
mov eax [esp+6Ch+var_10] +
mov [ecx+18h] eax +
mov edx ds:dword_50FDF4 +
mov eax ds:dword_50FE0C +
mov ds:dword_50FE04 1 +
mov eax [eax+10h] +
mov [esp+6Ch+var_4C] edx +
mov edx dword_4BF9EC +
mov [esp+6Ch+var_60] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_50] edx +
mov edx dword_4BF9E8 +
mov [esp+6Ch+var_54] edx +
mov edx ds:dword_50FE00 +
mov [esp+6Ch+var_58] edx +
mov edx ds:dword_50FDFC +
mov [esp+6Ch+var_5C] edx +
mov edx ds:dword_50FE08 +
mov [esp+6Ch+var_64] edx +
call sub_471FD0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_44B43A  +
mov eax ds:dword_50FE04 +
test eax eax +
jnz loc_44B3BD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472030  +
test eax eax +
js loc_44B590  +
jz loc_44B3BD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_472120  +
test eax eax +
jz loc_44B44C  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_48] 0 +
jmp loc_44B053  +
test edi edi +
jnz loc_44B010  +
jmp loc_44B0D1  +
mov [esp+6Ch+var_68] 5BFh +
mov [esp+6Ch+var_6C] offset aEavrtiny_c +
call sub_4184A0  +
jmp loc_44B27A  +
mov eax [edi+10h] +
mov [esp+6Ch+var_6C] offset aFBCanTReadC_16 +
mov [esp+6Ch+var_68] eax +
call sub_418450  +
jmp loc_44B23A  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_16 +
call sub_418450  +
jmp loc_44B2D3  +
mov [esp+6Ch+var_6C] offset aPFFailedToS_16 +
call sub_418450  +
jmp loc_44B19C  +
mov ds:dword_50FE04 1 +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+6Ch+var_6C] offset aXPCanNotSiz_16 +
call sub_418450  +
jmp loc_44B3BD  +
mov eax ds:dword_514850 +
mov [esp+6Ch+var_68] offset word_514820 +
mov [esp+6Ch+var_6C] eax +
call sub_4630F0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_44B550  +
mov eax ds:dword_51483C +
mov [esp+6Ch+var_5C] 1 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] offset a__ehdr_star_16 +
mov [esp+6Ch+var_6C] eax +
call sub_4500A0  +
test eax eax +
mov [esp+6Ch+var_40] eax +
jz loc_44B550  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_44B4CD  +
cmp al 2 +
ja loc_44B550  +
mov ebx [esp+6Ch+var_40] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_6C] offset word_514820 +
mov [esp+6Ch+var_68] ebx +
call sub_4692F0  +
movzx eax byte ptr [ebx+31h] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_44B500  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov edx [esp+6Ch+var_40] +
mov eax [edx] +
mov [esp+6Ch+var_28] eax +
mov eax [edx+4] +
mov [esp+6Ch+var_24] eax +
mov eax [edx+8] +
mov [esp+6Ch+var_20] eax +
mov eax [edx+0Ch] +
mov [esp+6Ch+var_1C] eax +
mov eax [edx+10h] +
mov [esp+6Ch+var_18] eax +
mov eax [edx+14h] +
mov dword ptr [edx+14h] offset off_4BFB90 +
mov [esp+6Ch+var_14] eax +
mov eax [edx+18h] +
mov dword ptr [edx+18h] 0 +
mov [esp+6Ch+var_10] eax +
movzx eax byte ptr [edx+0Ch] +
mov byte ptr [edx+0Ch] 3 +
mov [esp+6Ch+var_2D] al +
jmp loc_44B558  +
mov [esp+6Ch+var_40] 0 +
mov [esp+6Ch+var_6C] offset dword_449940 +
call sub_40AFD0  +
jmp loc_44AFAE  +
mov [esp+6Ch+var_6C] esi +
call sub_4A06C0  +
mov ds:dword_50FDA8 eax +
jmp loc_44B010  +
mov [esp+6Ch+var_6C] offset aLd_run_path_16 +
call getenv  +
mov [esp+6Ch+var_3C] eax +
jmp loc_44AFBF  +
mov [esp+6Ch+var_6C] offset aXPCanNotSet_16 +
call sub_418450  +
jmp loc_44B3BD  +
***
jmp loc_44B5B0  +
mov eax ds:dword_50FDF8 +
test eax eax +
jnz loc_44B5C0  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+58h] +
mov dword ptr [esp+8] 2Eh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aInputFilesA_16 +
mov [esp+0Ch] eax +
call fwrite  +
mov edi ds:dword_50F27C +
test edi edi +
jz loc_44B7AB  +
mov ebp edi +
nop   +
lea esi [esi+0] +
mov edx [ebp+10h] +
mov eax [edx+28h] +
shr eax 5 +
test eax 1040h +
jnz loc_44B7A0  +
test byte ptr [ebp+24h] 10h +
jnz loc_44B7A0  +
mov ecx [edx] +
test ecx ecx +
jz loc_44B7A0  +
mov edi ds:dword_5146F8 +
test edi edi +
jz loc_44B7A0  +
mov dword ptr [esp+24h] 0 +
mov [esp+1Ch] ebp +
mov esi [edi+1Ch] +
test esi esi +
jz loc_44B790  +
test byte ptr [esi+14h] 1 +
jz loc_44B790  +
mov eax [esp+1Ch] +
mov eax [eax+10h] +
mov ebx [eax+64h] +
mov [esp+20h] eax +
test ebx ebx +
jz loc_44B790  +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
mov eax [ebx+3Ch] +
mov edx [ebx+14h] +
test eax eax +
jz loc_44B68F  +
mov ecx ds:dword_514850 +
cmp [eax+94h] ecx +
jz loc_44B697  +
and edx 300000h +
jz loc_44B69F  +
cmp esi eax +
jz loc_44B7C0  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_44B677  +
mov edx [esp+18h] +
test edx edx +
jz loc_44B790  +
mov eax [esp+24h] +
test eax eax +
jz loc_44B825  +
mov eax [esi] +
mov dword ptr [esp] offset aS_96 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [esi] +
mov [esp] eax +
call strlen  +
cmp eax 1Ch +
mov ebx eax +
jg loc_44B819  +
add ebx 1 +
call sub_418560  +
cmp ebx 1Dh +
jle loc_44B6E5  +
mov eax [esp+18h] +
mov dword ptr [esp] offset aW_17 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [edi+20h] +
mov eax [eax] +
mov dword ptr [esp] offset aS_93 +
mov [esp+4] eax +
call sub_4184D0  +
test ebp ebp +
jz loc_44B790  +
mov ebx ebp +
mov eax [ebx] +
mov dword ptr [esp] offset aS_94 +
mov [esp+4] eax +
call sub_4184D0  +
mov eax [ebx] +
mov [esp] eax +
call strlen  +
lea esi [eax+2] +
cmp esi 1Ch +
jg loc_44B7B3  +
add esi 1 +
call sub_418560  +
cmp esi 1Dh +
jle loc_44B745  +
mov eax [ebx+4] +
mov dword ptr [esp] offset aW_17 +
mov [esp+4] eax +
call sub_4184D0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_44B721  +
mov edx [ebp+8] +
test edx edx +
jnz loc_44B77A  +
jmp loc_44B850  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_44B778  +
mov [esp] edx +
call free  +
lea esi [esi+0] +
mov edi [edi+10h] +
test edi edi +
jnz loc_44B642  +
mov ebp [esp+1Ch] +
nop   +
mov ebp [ebp+18h] +
test ebp ebp +
jnz loc_44B600  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
call sub_418580  +
xor esi esi +
jmp loc_44B745  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_44B69F  +
mov dword ptr [esp] 0Ch +
mov [esp+2Ch] edx +
call malloc  +
mov edx [esp+2Ch] +
test ebp ebp +
mov ecx eax +
mov [esp+28h] eax +
mov eax [ebx] +
mov [ecx+4] edx +
mov dword ptr [ecx+8] 0 +
mov [ecx] eax +
jz loc_44B857  +
mov ecx ebp +
jmp loc_44B802  +
mov ecx eax +
mov eax [ecx+8] +
test eax eax +
jnz loc_44B800  +
mov eax [esp+28h] +
mov [ecx+8] eax +
add [esp+18h] edx +
jmp loc_44B69F  +
***
call sub_418580  +
xor ebx ebx +
jmp loc_44B6E5  +
***
mov eax [esp+20h] +
mov eax [eax] +
mov dword ptr [esp+4] offset aS_95 +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call fprintf  +
mov dword ptr [esp+24h] 1 +
jmp loc_44B6BE  +
***
mov edx ebp +
jmp loc_44B781  +
***
mov ebp [esp+28h] +
jmp loc_44B810  +
***
mov eax off_4BFA04 +
jmp eax  +
***
sub esp 1Ch +
lea eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call j__vsnprintf  +
add esp 1Ch +
retn   +
***
retn   +
***
mov eax [esp+28h+arg_0] +
cmp eax 14h +
jz loc_44B8E0  +
cmp eax 1 +
jz loc_44B921  +
cmp eax 15h +
mov edx 15h +
cmovbe edx eax +
mov eax ds:off_4EDBC0[edx*4] +
add esp 28h +
pop ebx  +
retn   +
mov eax ds:dword_50FE24 +
mov [esp+28h+var_28] eax +
call sub_44B8B0  +
mov ebx eax +
mov eax ds:dword_50FE28 +
mov eax [eax] +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_24] offset aErrorReadingSS +
mov [esp+28h+var_20] eax +
lea eax [esp+28h+var_C] +
mov [esp+28h+var_28] eax +
call sub_4BB510  +
cmp eax 0FFFFFFFFh +
mov eax ebx +
cmovnz eax [esp+28h+var_C] +
add esp 28h +
pop ebx  +
retn   +
call ds:__imp__errno  +
mov eax [eax] +
mov [esp+28h+var_28] eax +
call sub_4AC420  +
jmp loc_44B8D4  +
***
mov eax ds:_iob +
mov ebx [esp+18h+arg_0] +
add eax 20h +
mov [esp+18h+var_18] eax +
call fflush  +
test ebx ebx +
mov eax ds:dword_50FE2C +
jz loc_44B966  +
cmp byte ptr [ebx] 0 +
jnz loc_44B9A0  +
mov [esp+18h+var_18] eax +
call sub_44B8B0  +
mov [esp+18h+var_14] offset aS_97 +
mov [esp+18h+var_10] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+18h+var_18] eax +
call fprintf  +
mov eax ds:_iob +
add eax 40h +
mov [esp+18h+arg_0] eax +
add esp 18h +
pop ebx  +
jmp fflush  +
mov [esp+18h+var_18] eax +
call sub_44B8B0  +
mov [esp+18h+var_10] ebx +
mov [esp+18h+var_14] offset aSS_22 +
mov [esp+18h+var_C] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+18h+var_18] eax +
call fprintf  +
jmp loc_44B98A  +
***
mov edx [esp+arg_0] +
mov eax [esp+arg_0] +
mov ds:dword_50FE20 eax +
retn   +
***
mov eax off_4BFA04 +
retn   +
***
mov edx [esp+arg_0] +
mov eax off_4BFA00 +
mov off_4BFA00 edx +
retn   +
***
mov eax off_4BFA00 +
retn   +
***
mov eax [esp+8] +
mov edx [esp+0Ch] +
mov [eax+48h] edx +
mov edx [esp+10h] +
mov [eax+4Ch] edx +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] offset aGnuBinutils2_2 +
mov [esp+1Ch+var_1C] offset aBfdSAssertionF +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] eax +
call off_4BFA00  +
add esp 1Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_8] +
test eax eax +
jz loc_44BABD  +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] offset aGnuBinutils2_2 +
mov [esp+2Ch+var_2C] offset aBfdSInternalEr +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_24] eax +
call off_4BFA04  +
mov [esp+2Ch+var_2C] offset aPleaseReportTh +
call off_4BFA04  +
mov [esp+2Ch+var_2C] 1 +
call _exit  +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] offset aGnuBinutils2_2 +
mov [esp+2Ch+var_2C] offset aBfdSInternal_0 +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_24] eax +
call off_4BFA04  +
jmp loc_44BAA4  +
***
sub esp 1Ch +
sub esp 1Ch +
mov edx [esp+1Ch+arg_0] +
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 1 +
jnz loc_44BB60  +
mov eax [edx+4] +
mov eax [eax+140h] +
add esp 1Ch +
jmp eax  +
mov [esp+1Ch+var_1C] 5 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
sub esp 14h +
mov edx [esp+14h+arg_0] +
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 1 +
jnz loc_44BBA4  +
mov eax [edx+4] +
mov eax [eax+144h] +
add esp 14h +
pop ebx  +
pop esi  +
jmp eax  +
mov [esp+14h+var_14] 5 +
call sub_44BAF0  +
add esp 14h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 18h +
mov eax [esp+20h] +
mov ecx [esp+24h] +
movzx edx byte ptr [eax+28h] +
mov ebx edx +
and ebx 7 +
cmp bl 1 +
jnz loc_44BC17  +
and edx 8 +
jnz loc_44BC04  +
mov edx [eax+28h] +
mov ebx ecx +
and ebx 3FFFFh +
shl ebx 5 +
and edx 0FF80001Fh +
or edx ebx +
mov [eax+28h] edx +
mov eax [eax+4] +
mov edx [eax+10h] +
and edx ecx +
cmp edx ecx +
jz loc_44BC30  +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 41Ch +
mov eax ds:_iob +
mov edi [esp+41Ch+arg_0] +
add eax 20h +
mov [esp+41Ch+var_41C] eax +
call fflush  +
mov eax ds:dword_50FE20 +
test eax eax +
jz loc_44BF2C  +
mov [esp+41Ch+var_414] eax +
mov eax ds:_iob +
mov [esp+41Ch+var_418] offset aS_2 +
add eax 40h +
mov [esp+41Ch+var_41C] eax +
call fprintf  +
lea eax [esp+41Ch+arg_4] +
mov ebp 3E7h +
mov [esp+41Ch+var_41C] edi +
mov [esp+41Ch+var_400] eax +
call strlen  +
sub ebp eax +
cmp ebp 3E8h +
ja loc_44BF99  +
lea eax [esp+41Ch+var_3F4] +
mov ecx edi +
mov esi edi +
mov [esp+41Ch+var_408] eax +
lea esi [esi+0] +
mov [esp+41Ch+var_418] 25h +
mov [esp+41Ch+var_41C] ecx +
call strchr  +
test eax eax +
mov ebx eax +
jz loc_44BE0A  +
movzx eax byte ptr [eax+1] +
test al al +
jz loc_44BE0A  +
sub eax 41h +
cmp al 1 +
lea ecx [ebx+2] +
ja loc_44BCC0  +
mov esi ebx +
sub esi edi +
mov [esp+41Ch+var_418] edi +
mov edi [esp+41Ch+var_408] +
mov [esp+41Ch+var_414] esi +
mov [esp+41Ch+var_404] ecx +
mov [esp+41Ch+var_41C] edi +
call memcpy  +
mov ecx [esp+41Ch+var_404] +
test ebp ebp +
lea edx [edi+esi] +
mov edi ecx +
jnz loc_44BD31  +
lea eax [edx+2] +
mov byte ptr [edx] 2Ah +
lea esi [esp+41Ch+var_3F4] +
mov [esp+41Ch+var_408] eax +
mov byte ptr [edx+1] 2Ah +
mov byte ptr [edx+2] 0 +
jmp loc_44BCC0  +
mov eax [esp+41Ch+var_400] +
cmp byte ptr [ebx+1] 42h +
lea ebx [eax+4] +
mov eax [eax] +
jz loc_44BE8E  +
test eax eax +
jz loc_44BFA5  +
mov ecx [eax+94h] +
test ecx ecx +
jz loc_44BD6E  +
mov ecx [ecx+4] +
mov ecx [ecx+4] +
cmp ecx 5 +
jz loc_44BED5  +
cmp ecx 2 +
jz loc_44BEF5  +
mov eax [eax] +
mov [esp+41Ch+var_41C] edx +
mov [esp+41Ch+var_414] offset aS_23 +
mov [esp+41Ch+var_418] ebp +
mov [esp+41Ch+var_410] eax +
mov [esp+41Ch+var_408] edx +
call sub_44B870  +
mov edx [esp+41Ch+var_408] +
mov [esp+41Ch+var_400] ebx +
mov [esp+41Ch+var_41C] edx +
add ebp 2 +
xor esi esi +
mov [esp+41Ch+var_408] edx +
call strlen  +
mov edx [esp+41Ch+var_408] +
sub ebp eax +
lea ebx [edx+eax] +
mov eax edx +
jmp loc_44BDB8  +
add eax 1 +
add esi 1 +
mov [esp+41Ch+var_418] 25h +
mov [esp+41Ch+var_41C] eax +
call strchr  +
test eax eax +
jnz loc_44BDB2  +
lea eax [ebx+esi] +
cmp ebp esi +
mov [esp+41Ch+var_408] eax +
jb loc_44BE65  +
sub ebp esi +
test esi esi +
jnz loc_44BDE6  +
jmp loc_44BDFF  +
sub ebx 1 +
movzx eax byte ptr [ebx] +
cmp al 25h +
mov [ebx+esi] al +
jnz loc_44BDE3  +
sub esi 1 +
sub ebx 1 +
mov byte ptr [ebx+esi+1] 25h +
test esi esi +
jnz loc_44BDE6  +
mov ecx edi +
lea esi [esp+41Ch+var_3F4] +
jmp loc_44BCC0  +
lea eax [esp+41Ch+var_3F4] +
cmp esi eax +
jz loc_44BF59  +
mov eax [esp+41Ch+var_400] +
mov [esp+41Ch+var_418] esi +
mov [esp+41Ch+var_414] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+41Ch+var_41C] eax +
call vfprintf  +
mov eax ds:_iob +
mov [esp+41Ch+var_41C] 0Ah +
add eax 40h +
mov [esp+41Ch+var_418] eax +
call fputc  +
mov eax ds:_iob +
add eax 40h +
mov [esp+41Ch+var_41C] eax +
call fflush  +
add esp 41Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
sub eax ebp +
mov edx eax +
neg edx  +
add [esp+41Ch+var_408] edx +
add ebx edx +
xor edx edx +
cmp byte ptr [ebx+eax-1] 25h +
setz dl  +
sub esi edx +
sub eax 1 +
jnz loc_44BE73  +
mov byte ptr [ebx] 0 +
xor ebp ebp +
jmp loc_44BDDD  +
test eax eax +
jz loc_44BF7D  +
mov ecx [eax+8Ch] +
test ecx ecx +
jz loc_44BD6E  +
mov esi [eax] +
mov eax [ecx] +
mov [esp+41Ch+var_414] offset aSS_0 +
mov [esp+41Ch+var_40C] esi +
mov [esp+41Ch+var_410] eax +
mov [esp+41Ch+var_41C] edx +
mov [esp+41Ch+var_418] ebp +
mov [esp+41Ch+var_408] edx +
call sub_44B870  +
mov edx [esp+41Ch+var_408] +
mov [esp+41Ch+var_400] ebx +
jmp loc_44BD94  +
mov ecx [eax+8Ch] +
mov esi [ecx+7Ch] +
test esi esi +
jz loc_44BD6E  +
test byte ptr [eax+17h] 2 +
jnz loc_44BD6E  +
mov ecx [ecx+74h] +
jmp loc_44BF10  +
mov ecx [eax+8Ch] +
test ecx ecx +
jz loc_44BD6E  +
mov ecx [ecx+1Ch] +
test ecx ecx +
jz loc_44BD6E  +
mov ecx [ecx] +
test ecx ecx +
jz loc_44BD6E  +
mov eax [eax] +
mov [esp+41Ch+var_40C] ecx +
mov [esp+41Ch+var_414] offset aSS_1 +
mov [esp+41Ch+var_410] eax +
jmp loc_44BEB8  +
mov eax ds:_iob +
mov [esp+41Ch+var_414] 5 +
mov [esp+41Ch+var_418] 1 +
mov [esp+41Ch+var_41C] offset aBfd +
add eax 40h +
mov [esp+41Ch+var_410] eax +
call fwrite  +
jmp loc_44BC8A  +
mov [esp+41Ch+var_41C] edi +
call strlen  +
mov [esp+41Ch+var_418] edi +
add eax 1 +
mov [esp+41Ch+var_414] eax +
mov eax [esp+41Ch+var_408] +
mov [esp+41Ch+var_41C] eax +
call memcpy  +
jmp loc_44BE16  +
mov [esp+41Ch+var_414] offset a_bfd_default_e +
mov [esp+41Ch+var_418] 2BAh +
mov [esp+41Ch+var_41C] offset a____BinutilsBf +
call sub_44BA70  +
mov [esp+41Ch+var_41C] 1 +
call _exit  +
mov [esp+41Ch+var_414] offset a_bfd_default_e +
mov [esp+41Ch+var_418] 2CAh +
mov [esp+41Ch+var_41C] offset a____BinutilsBf +
call sub_44BA70  +
jmp loc_44BFD0  +
sub esp 1Ch +
mov eax [esp+438h+var_418] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jz loc_44BFF7  +
mov [esp+438h+var_438] eax +
call sub_4536E0  +
cmp eax 21h +
sbb eax eax +
add esp 1Ch +
and eax 0FFFFFFE0h +
add eax 40h +
retn   +
mov eax [edx+1B0h] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+0Ah] +
add esp 1Ch +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov eax [esp+20h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jz loc_44C0F7  +
mov edx [eax] +
mov ecx 9 +
mov edi offset aCoffGo32 +
mov eax 1 +
mov esi edx +
cmps   +
setnbe bl  +
setb cl  +
cmp bl cl +
jz loc_44C0F0  +
mov edi offset aPeI386 +
mov ecx 8 +
mov esi edx +
cmps   +
jz loc_44C0F0  +
mov edi offset aPeiI386 +
mov ecx 9 +
mov esi edx +
cmps   +
jz loc_44C0F0  +
mov edi offset aPeX8664 +
mov ecx 0Ah +
mov esi edx +
cmps   +
jz loc_44C0F0  +
mov edi offset aPeiX8664 +
mov ecx 0Bh +
mov esi edx +
cmps   +
jz loc_44C0F0  +
mov edi offset aPeArmWinceLitt +
mov ecx 14h +
mov esi edx +
cmps   +
jz loc_44C0F0  +
mov edi offset aPeiArmWinceLit +
mov ecx 15h +
mov esi edx +
cmps   +
jz loc_44C0F0  +
mov edi offset aAixcoffRs6000 +
mov ecx 0Fh +
mov esi edx +
cmps   +
jz loc_44C0F0  +
mov esi edx +
mov edi offset aMachO +
mov ecx 6 +
cmps   +
setnbe al  +
setb dl  +
sub eax edx +
movsx eax al +
test eax eax +
jz loc_44C0F0  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
or eax 0FFFFFFFFh +
nop   +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [eax+1B0h] +
movzx eax byte ptr [eax+1ACh] +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
shr al 7 +
movzx eax al +
retn   +
***
jmp sub_44C120  +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov [eax+74h] edx +
mov eax 1 +
retn   +
***
jmp sub_44C140  +
***
mov ecx [esp+arg_0] +
xor eax eax +
movzx edx byte ptr [ecx+28h] +
and edx 7 +
cmp dl 1 +
jz loc_44C154  +
retn   +
mov edx [ecx+4] +
mov edx [edx+4] +
cmp edx 3 +
jz loc_44C171  +
cmp edx 5 +
jnz locret_44C152  +
mov eax [ecx+0A0h] +
mov eax [eax+210h] +
retn   +
mov eax [ecx+0A0h] +
mov eax [eax+1Ch] +
retn   +
***
mov edx [esp+arg_0] +
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 1 +
jz loc_44C191  +
retn   +
mov eax [edx+4] +
mov eax [eax+4] +
cmp eax 3 +
jz loc_44C1B2  +
cmp eax 5 +
jnz locret_44C18F  +
mov eax [edx+0A0h] +
mov ecx [esp+arg_4] +
mov [eax+210h] ecx +
retn   +
mov eax [edx+0A0h] +
mov ecx [esp+arg_4] +
mov [eax+1Ch] ecx +
retn   +
***
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 1 +
jz loc_44C230  +
add esp 1Ch +
retn   +
***
mov eax [edx+4] +
mov eax [eax+4] +
cmp eax 3 +
jz loc_44C254  +
cmp eax 5 +
jnz loc_44C226  +
mov eax [edx+0A0h] +
mov ecx [esp+24h] +
mov [eax+20Ch] ecx +
add esp 1Ch +
retn   +
***
mov eax [edx+0A0h] +
mov ecx [esp+24h] +
mov [eax+18h] ecx +
jmp loc_44C226  +
***
push esi  +
push ebx  +
mov ecx [esp+arg_8] +
mov edx [esp+arg_0] +
mov ebx [esp+arg_4] +
mov esi [esp+arg_C] +
cmp dword ptr [ecx+4] 1 +
mov edi [esp+arg_10] +
mov eax edx +
mov ebp [esp+arg_14] +
jnz loc_44C2C2  +
mov eax [ecx+10h] +
mov eax [eax+94h] +
test eax eax +
cmovz eax edx +
mov eax [eax+4] +
mov eax [eax+15Ch] +
mov [esp+arg_14] ebp +
mov [esp+arg_10] edi +
mov [esp+arg_C] esi +
mov [esp+arg_8] ecx +
mov [esp+arg_4] ebx +
mov [esp+arg_0] edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_0] +
mov edx [ebx+4] +
cmp dword ptr [edx+4] 5 +
jz loc_44C310  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [esp+10h+arg_20] +
mov [esp+10h+var_10] ebx +
lea edi ds:0FFFFFFFCh[eax*4] +
lea eax [edi+2Ch] +
mov [esp+10h+var_C] eax +
call sub_458B60  +
test eax eax +
mov esi eax +
jz loc_44C3E0  +
mov eax [esp+10h+arg_4] +
movzx edx byte ptr [esi+20h] +
movzx ecx [esp+10h+arg_8] +
mov [esi+4] eax +
mov eax [esp+10h+arg_C] +
and edx 0FFFFFFFCh +
and ecx 1 +
or edx ecx +
movzx ecx [esp+10h+arg_18] +
mov [esi+8] eax +
mov eax [esp+10h+arg_14] +
and ecx 1 +
mov [esi+0Ch] eax +
movzx eax [esp+10h+arg_10] +
shl ecx 4 +
and eax 1 +
add eax eax +
or edx eax +
movzx eax [esp+10h+arg_1C] +
and edx 0FFFFFFCFh +
or edx ecx +
and eax 1 +
shl eax 5 +
or edx eax +
mov eax [esp+10h+arg_20] +
mov [esi+20h] dl +
test eax eax +
mov [esi+24h] eax +
jnz loc_44C3C0  +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov ecx [eax] +
test ecx ecx +
jnz loc_44C3A7  +
jmp loc_44C3E7  +
mov ecx edx +
mov edx [ecx] +
test edx edx +
jnz loc_44C3A5  +
mov [ecx] esi +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [esp+10h+arg_24] +
lea eax [esi+28h] +
add edi 4 +
mov [esp+10h+var_8] edi +
mov [esp+10h+var_10] eax +
mov [esp+10h+var_C] edx +
call memcpy  +
jmp loc_44C391  +
xor eax eax +
jmp loc_44C308  +
mov ecx eax +
lea esi [esi+0] +
jmp loc_44C3AD  +
***
mov eax [esp+arg_4] +
mov [esp+arg_4] offset a08lx_1 +
mov [esp+arg_0] eax +
jmp sprintf  +
***
mov eax [esp+arg_4] +
mov [esp+arg_4] offset a08lx_1 +
mov [esp+arg_0] eax +
jmp fprintf  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] eax +
call sub_44CEF0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_44C4DE  +
cmp dword ptr [edx+4] 5 +
jnz loc_44C4DE  +
mov eax [edx+1B0h] +
mov eax [eax+10h] +
add esp 1Ch +
retn   +
***
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_14] 0 +
mov ebx [esp+18h+arg_4] +
mov [esp+18h+var_18] eax +
call sub_44CEF0  +
test eax eax +
mov edx eax +
jnz loc_44C522  +
jmp loc_44C540  +
mov edx [edx+1ACh] +
test edx edx +
jz loc_44C540  +
cmp edx eax +
jz loc_44C540  +
cmp dword ptr [edx+4] 5 +
jnz loc_44C514  +
mov ecx [edx+1B0h] +
mov edx [edx+1ACh] +
mov [ecx+10h] ebx +
test edx edx +
jnz loc_44C51E  +
nop   +
lea esi [esi+0] +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] eax +
call sub_44CEF0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_44C57E  +
cmp dword ptr [edx+4] 5 +
jnz loc_44C57E  +
mov eax [edx+1B0h] +
mov eax [eax+18h] +
add esp 1Ch +
retn   +
***
push ebx  +
sub esp 18h +
mov eax [esp+20h] +
mov dword ptr [esp+4] 0 +
mov ebx [esp+24h] +
mov [esp] eax +
call sub_44CEF0  +
test eax eax +
mov edx eax +
jnz loc_44C5C2  +
jmp loc_44C5E0  +
mov edx [edx+1ACh] +
test edx edx +
jz loc_44C5E0  +
cmp edx eax +
jz loc_44C5E0  +
cmp dword ptr [edx+4] 5 +
jnz loc_44C5B4  +
mov ecx [edx+1B0h] +
mov edx [edx+1ACh] +
mov [ecx+18h] ebx +
test edx edx +
jnz loc_44C5BE  +
nop   +
lea esi [esi+0] +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
test eax eax +
jz loc_44C7E3  +
mov ecx [esp+2Ch+arg_4] +
movzx edx byte ptr [ecx] +
test dl dl +
jz loc_44C763  +
mov eax [eax+4] +
cmp dl [eax+18h] +
jz loc_44C7F7  +
mov [esp+2Ch+var_14] 0 +
cmp dl 2Eh +
jnz loc_44C81A  +
mov ebp [esp+2Ch+arg_4] +
add ebp 1 +
movzx eax byte ptr [ebp+0] +
cmp al 24h +
jz loc_44C633  +
cmp al 2Eh +
jz loc_44C633  +
mov eax ebp +
mov edi ebp +
sub eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_18] eax +
mov [esp+2Ch+var_28] 40h +
mov [esp+2Ch+var_2C] ebp +
call strchr  +
test eax eax +
mov ebx eax +
jz loc_44C780  +
sub eax edi +
mov edi eax +
lea eax [eax+1] +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
test eax eax +
mov esi eax +
jz loc_44C813  +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] eax +
call memcpy  +
mov eax [esp+2Ch+arg_8] +
mov byte ptr [esi+edi] 0 +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_28] eax +
call sub_4A2700  +
mov [esp+2Ch+var_2C] esi +
mov edi eax +
call free  +
test edi edi +
jz loc_44C7A0  +
test ebx ebx +
jnz loc_44C6C9  +
mov edx [esp+2Ch+var_18] +
mov eax edi +
test edx edx +
jz loc_44C75B  +
mov [esp+2Ch+var_2C] edi +
call strlen  +
mov esi eax +
add eax edi +
test ebx ebx +
cmovz ebx eax +
mov [esp+2Ch+var_2C] ebx +
call strlen  +
mov ecx [esp+2Ch+var_18] +
mov [esp+2Ch+var_10] esi +
add ecx esi +
mov esi ecx +
add eax 1 +
mov [esp+2Ch+var_14] eax +
add eax ecx +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_44C751  +
mov edx [esp+2Ch+var_18] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_24] edx +
mov edx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] edx +
call memcpy  +
mov edx [esp+2Ch+var_18] +
mov [esp+2Ch+var_28] edi +
lea eax [ebp+edx+0] +
mov edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_24] edx +
call memcpy  +
mov ecx [esp+2Ch+var_14] +
mov eax esi +
add eax ebp +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_24] ecx +
call memcpy  +
mov [esp+2Ch+var_2C] edi +
call free  +
mov eax ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_14] 0 +
mov edi [esp+2Ch+arg_4] +
mov [esp+2Ch+var_18] 0 +
mov ebp edi +
jmp loc_44C64E  +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] eax +
call sub_4A2700  +
mov edi eax +
test edi edi +
jnz loc_44C6B7  +
lea esi [esi+0] +
mov ecx [esp+2Ch+var_14] +
test ecx ecx +
jz loc_44C813  +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] eax +
call strlen  +
lea ebx [eax+1] +
mov [esp+2Ch+var_2C] ebx +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_44C813  +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] eax +
call memcpy  +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_14] 0 +
movzx edx byte ptr [eax] +
jmp loc_44C626  +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_14] 1 +
movzx edx byte ptr [eax+1] +
add eax 1 +
mov [esp+2Ch+arg_4] eax +
jmp loc_44C626  +
xor eax eax +
jmp loc_44C75B  +
cmp dl 24h +
jz loc_44C62F  +
jmp loc_44C76B  +
***
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov edi [esp+10h+arg_8] +
mov eax [ebx+28h] +
shr eax 5 +
and eax 3FFFFh +
test ah 40h +
jz loc_44C975  +
mov edx [ebx+4] +
cmp dword ptr [edx+4] 5 +
jz loc_44C866  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
test eax 20000h +
jz loc_44C940  +
mov ecx [edx+1B0h] +
mov eax [edi+8Ch] +
or dword ptr [eax+8] 800h +
mov eax [ecx+174h] +
cmp byte ptr [eax+0Ch] 1 +
mov eax [edx+30h] +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] 1 +
jz loc_44C900  +
call eax  +
mov eax [ebx+4] +
lea edx [esi+4] +
mov eax [eax+30h] +
mov [esp+10h+var_C] edx +
mov [esp+10h+var_10] 0 +
call eax  +
mov eax [ebx+4] +
lea edx [esi+8] +
add esi 10h +
mov eax [eax+24h] +
mov [esp+10h+var_8] edx +
mov ecx [edi+24h] +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] ecx +
call eax  +
mov eax [ebx+4] +
mov edx [eax+24h] +
mov eax 1 +
mov [esp+10h+arg_8] esi +
mov ecx [edi+40h] +
shl eax cl +
mov [esp+10h+arg_0] eax +
sar eax 1Fh +
mov [esp+10h+arg_4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp edx  +
call eax  +
mov eax [ebx+4] +
lea ecx [esi+4] +
mov edx [edi+24h] +
add esi 8 +
mov eax [eax+30h] +
mov [esp+10h+var_C] ecx +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [ebx+4] +
mov edx [eax+30h] +
mov eax 1 +
mov [esp+10h+arg_4] esi +
mov ecx [edi+40h] +
shl eax cl +
mov [esp+10h+arg_0] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp edx  +
mov eax [edi+8Ch] +
add esi 4 +
and dword ptr [eax+8] 0FFFFF7FFh +
mov dword ptr [esi-4] 42494C5Ah +
mov [esp+10h+arg_8] esi +
mov eax [edi+24h] +
mov [esp+10h+arg_4] 0 +
mov [esp+10h+arg_0] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp loc_45A1F0  +
mov [esp+10h+var_8] offset aBfd_update_com +
mov [esp+10h+var_C] 7E8h +
mov [esp+10h+var_10] offset a____BinutilsBf +
call sub_44BA70  +
jmp sub_44C9A0  +
***
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_0] +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jz loc_44C9C0  +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ecx [esp+10h+arg_8] +
mov edx [ecx+8Ch] +
test byte ptr [edx+9] 8 +
jz loc_44C9B3  +
mov edx [eax+1B0h] +
mov eax [eax+28h] +
mov edx [edx+174h] +
cmp byte ptr [edx+0Ch] 1 +
jz loc_44CA35  +
mov edi [esp+10h+arg_4] +
mov [esp+10h+var_10] edi +
call eax  +
mov edi [esp+10h+arg_4] +
lea edx [edi+8] +
mov esi eax +
mov eax [ebx+4] +
mov eax [eax+1Ch] +
mov [esp+10h+var_10] edx +
call eax  +
mov edi eax +
mov eax [ebx+4] +
mov edx [eax+1Ch] +
mov eax [esp+10h+arg_4] +
add eax 10h +
mov [esp+10h+var_10] eax +
call edx  +
cmp esi 1 +
jnz loc_44C9B3  +
mov ecx [esp+10h+arg_8] +
mov ecx [ecx+40h] +
shl esi cl +
cmp eax esi +
jnz loc_44C9B3  +
mov eax [esp+10h+arg_C] +
mov [eax] edi +
mov eax 1 +
jmp loc_44C9B5  +
mov esi [esp+10h+arg_4] +
mov [esp+10h+var_10] esi +
call eax  +
mov ecx [esp+10h+arg_4] +
lea edx [ecx+4] +
mov esi eax +
mov eax [ebx+4] +
mov eax [eax+28h] +
mov [esp+10h+var_10] edx +
call eax  +
mov ecx [esp+10h+arg_4] +
lea edx [ecx+8] +
mov edi eax +
mov eax [ebx+4] +
mov eax [eax+28h] +
mov [esp+10h+var_10] edx +
call eax  +
jmp loc_44CA16  +
***
mov ecx [esp+arg_0] +
xor eax eax +
mov edx [ecx+4] +
cmp dword ptr [edx+4] 5 +
jz loc_44CA81  +
retn   +
cmp [esp+arg_4] 0 +
jz loc_44CAB6  +
mov ecx [esp+arg_4] +
mov ecx [ecx+8Ch] +
test byte ptr [ecx+9] 8 +
jz locret_44CA7F  +
mov eax [edx+1B0h] +
mov edx [eax+174h] +
mov eax 0Ch +
cmp byte ptr [edx+0Ch] 1 +
mov edx 18h +
cmovnz eax edx +
retn   +
test byte ptr [ecx+2Ah] 40h +
jnz loc_44CA98  +
retn   +
***
push esi  +
push ebx  +
sub esp 8 +
mov edx [esp+14h] +
mov ebx [esp+20h] +
test byte ptr [edx+2Ah] 10h +
jnz loc_44CADC  +
mov eax [edx+4] +
cmp dword ptr [eax+4] 5 +
jz loc_44CAE4  +
add esp 8 +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
mov ecx [esp+1Ch] +
mov ecx [ecx+4] +
cmp dword ptr [ecx+4] 5 +
jnz loc_44CADC  +
mov eax [eax+1B0h] +
mov esi [eax+174h] +
mov eax [ecx+1B0h] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+0Ch] +
cmp [esi+0Ch] al +
jz loc_44CADC  +
mov eax [esp+18h] +
mov [esp] edx +
mov [esp+4] eax +
call sub_44CA70  +
test eax eax +
jz loc_44CADC  +
lea edx [ebx+0Ch] +
sub ebx 0Ch +
cmp eax 0Ch +
cmovz ebx edx +
jmp loc_44CADC  +
***
push ebp  +
push edi  +
push esi  +
mov esi 1 +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
test byte ptr [ebx+2Ah] 10h +
jnz loc_44CB5F  +
mov ebp [ebx+4] +
cmp dword ptr [ebp+4] 5 +
jz loc_44CB70  +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+48h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_44CB5F  +
mov eax [eax+1B0h] +
mov edx [ebp+1B0h] +
mov eax [eax+174h] +
mov edx [edx+174h] +
movzx eax byte ptr [eax+0Ch] +
cmp [edx+0Ch] al +
jz loc_44CB5F  +
mov eax [esp+44h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_44CA70  +
test eax eax +
mov edi eax +
jz loc_44CB5F  +
mov eax [esp+4Ch] +
cmp edi 0Ch +
mov esi [eax] +
mov eax [ebp+28h] +
mov [esp] esi +
jz loc_44CC74  +
call eax  +
mov eax [ebx+4] +
lea ebp [esi+8] +
mov eax [eax+1Ch] +
mov [esp] ebp +
call eax  +
lea edx [esi+10h] +
mov [esp+1Ch] eax +
mov eax [ebx+4] +
mov eax [eax+1Ch] +
mov [esp] edx +
call eax  +
mov ecx [esp+44h] +
mov ebx [ecx+24h] +
mov [esp+18h] eax +
sub ebx edi +
lea ecx [ebx+0Ch] +
mov [esp+14h] ecx +
mov ecx [esp+48h] +
mov eax [ecx+4] +
mov eax [eax+30h] +
mov [esp+4] esi +
mov dword ptr [esp] 1 +
call eax  +
mov ecx [esp+48h] +
lea edx [esi+4] +
add esi 0Ch +
mov eax [ecx+4] +
mov ecx [esp+1Ch] +
mov eax [eax+30h] +
mov [esp+4] edx +
mov [esp] ecx +
call eax  +
mov ecx [esp+48h] +
mov eax [ecx+4] +
mov ecx [esp+18h] +
mov eax [eax+30h] +
mov [esp+4] ebp +
mov [esp] ecx +
call eax  +
mov eax [esp+4Ch] +
mov [esp+8] ebx +
add edi [eax] +
mov [esp] esi +
mov [esp+4] edi +
call memmove  +
mov eax [esp+50h] +
mov esi 1 +
mov ecx [esp+14h] +
mov [eax] ecx +
jmp loc_44CB5F  +
***
call eax  +
mov eax [ebx+4] +
lea edx [esi+4] +
add esi 8 +
mov eax [eax+28h] +
mov [esp] edx +
call eax  +
mov ebp eax +
mov eax [ebx+4] +
mov eax [eax+28h] +
mov [esp] esi +
call eax  +
mov edi eax +
mov eax [esp+44h] +
mov eax [eax+24h] +
lea esi [eax-0Ch] +
add eax 0Ch +
mov [esp] eax +
mov [esp+14h] eax +
call sub_459B80  +
test eax eax +
mov ebx eax +
jz loc_44CD5F  +
mov eax [esp+48h] +
mov eax [eax+4] +
mov eax [eax+30h] +
mov [esp+4] ebx +
mov dword ptr [esp] 1 +
call eax  +
mov eax [esp+48h] +
lea edx [ebx+4] +
mov eax [eax+4] +
mov eax [eax+30h] +
mov [esp+4] edx +
mov dword ptr [esp] 0 +
call eax  +
mov eax [esp+48h] +
lea edx [ebx+8] +
mov eax [eax+4] +
mov eax [eax+24h] +
mov [esp+8] edx +
mov [esp] ebp +
mov dword ptr [esp+4] 0 +
call eax  +
mov eax [esp+48h] +
lea edx [ebx+10h] +
mov eax [eax+4] +
mov eax [eax+24h] +
mov [esp+8] edx +
mov [esp] edi +
mov dword ptr [esp+4] 0 +
call eax  +
mov edi [esp+4Ch] +
lea eax [ebx+18h] +
mov edi [edi] +
mov [esp+8] esi +
mov [esp] eax +
lea edx [edi+0Ch] +
mov [esp+4] edx +
mov [esp+18h] edi +
call memcpy  +
mov eax [esp+4Ch] +
mov eax [eax] +
mov [esp] eax +
call free  +
mov eax [esp+4Ch] +
mov [eax] ebx +
jmp loc_44CC60  +
***
xor esi esi +
jmp loc_44CB5F  +
***
push esi  +
mov esi edx +
push ebx  +
sub esp 1Ch +
test edx edx +
mov [esp+20h+var_14] ecx +
jz loc_44CDE0  +
mov ebx [edx] +
mov edi eax +
test ebx ebx +
jnz loc_44CD99  +
jmp loc_44CDE0  +
add esi 4 +
mov ebx [esi] +
test ebx ebx +
jz loc_44CDE0  +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_20] ebx +
call strstr  +
test eax eax +
mov ebp eax +
jz loc_44CD90  +
mov [esp+20h+var_20] edi +
call strlen  +
cmp ebx ebp +
movzx eax byte ptr [ebp+eax+0] +
jz loc_44CDC2  +
cmp byte ptr [ebp-1] 3Ah +
jnz loc_44CD90  +
test al al +
jnz loc_44CD90  +
mov eax [esp+20h+var_14] +
mov [eax] ebx +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov esi off_4BFA14 +
mov ebx [esi] +
test ebx ebx +
jnz loc_44CE0F  +
jmp loc_44CE30  +
add esi 4 +
mov ebx [esi] +
test ebx ebx +
jz loc_44CE30  +
mov eax [ebx] +
mov [esp+18h+var_18] edi +
mov [esp+18h+var_14] eax +
call strcmp  +
test eax eax +
jnz loc_44CE06  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov esi offset off_4EDD60 +
mov eax offset aAvr +
jmp loc_44CE49  +
add esi 8 +
mov eax [esi] +
test eax eax +
jz loc_44CE80  +
mov [esp+18h+var_10] 0 +
mov [esp+18h+var_14] edi +
mov [esp+18h+var_18] eax +
call sub_4A81C0  +
test eax eax +
jnz loc_44CE40  +
mov ebx [esi+4] +
test ebx ebx +
jnz loc_44CE21  +
add esi 8 +
mov ebx [esi+4] +
test ebx ebx +
jz loc_44CE68  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+18h+var_18] 2 +
xor ebx ebx +
call sub_44BAF0  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edx off_4BFA0C +
mov ebx [esp+18h+arg_0] +
test edx edx +
jz loc_44CEC9  +
mov eax [edx] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call strcmp  +
mov edx 1 +
test eax eax +
jz loc_44CEDE  +
mov eax ebx +
call sub_44CDF0  +
test eax eax +
jz loc_44CEE5  +
mov off_4BFA0C eax +
mov edx 1 +
add esp 18h +
mov eax edx +
pop ebx  +
retn   +
xor edx edx +
jmp loc_44CEDE  +
***
push ebx  +
sub esp 10h +
mov eax [esp+10h+arg_0] +
mov ebx [esp+10h+arg_4] +
test eax eax +
jz loc_44CF70  +
mov edi offset aDefault +
mov ecx 8 +
mov esi eax +
cmps   +
jnz loc_44CF30  +
mov eax off_4BFA0C +
test eax eax +
jz loc_44CF60  +
test ebx ebx +
jz loc_44CF26  +
or byte ptr [ebx+2Bh] 1 +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
test ebx ebx +
jz loc_44CF50  +
and byte ptr [ebx+2Bh] 0FEh +
call sub_44CDF0  +
test eax eax +
jz loc_44CF59  +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
call sub_44CDF0  +
test eax eax +
jnz loc_44CF26  +
xor eax eax +
jmp loc_44CF26  +
mov eax off_4BFA14 +
mov eax [eax] +
jmp loc_44CF1B  +
mov [esp+10h+var_10] offset aGnutarget +
call getenv  +
test eax eax +
jz loc_44CF12  +
jmp loc_44CF02  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov ebp [esp+78h] +
mov edi [esp+7Ch] +
mov esi [esp+80h] +
test ebp ebp +
jz loc_44CFB1  +
mov dword ptr [ebp+0] 0 +
test edi edi +
jz loc_44CFBB  +
mov dword ptr [edi] 0FFFFFFFFh +
test esi esi +
jz loc_44CFC5  +
mov dword ptr [esi] 0 +
mov eax [esp+74h] +
mov [esp+4] eax +
mov eax [esp+70h] +
mov [esp] eax +
call sub_44CEF0  +
test eax eax +
mov ebx eax +
jz loc_44D0B0  +
test ebp ebp +
jz loc_44CFF4  +
mov edx [ebx+8] +
xor eax eax +
test edx edx +
setz al  +
mov [ebp+0] eax +
test edi edi +
jz loc_44CFFE  +
movzx eax byte ptr [ebx+18h] +
mov [edi] eax +
test esi esi +
mov eax ebx +
jz loc_44D013  +
mov ebp [ebx] +
call sub_4535B0  +
mov edi eax +
mov eax ebx +
test edi edi +
jnz loc_44D020  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test ebp ebp +
jz loc_44D04A  +
mov dword ptr [esp+4] 2Dh +
mov [esp] ebp +
call strchr  +
test eax eax +
jz loc_44D0A0  +
lea ebp [eax+1] +
mov ecx esi +
mov edx edi +
mov eax ebp +
call sub_44CD70  +
test eax eax +
jz loc_44D060  +
mov [esp] edi +
call free  +
add esp 5Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] ebp +
lea ebp [esp+1Eh] +
mov [esp] ebp +
call strcpy  +
jmp loc_44D084  +
mov byte ptr [eax] 0 +
mov ecx esi +
mov edx edi +
mov eax ebp +
call sub_44CD70  +
test eax eax +
jnz loc_44D04A  +
mov dword ptr [esp+4] 2Dh +
mov [esp] ebp +
call strrchr  +
test eax eax +
jnz loc_44D072  +
jmp loc_44D04A  +
***
mov ecx esi +
mov edx edi +
mov eax ebp +
call sub_44CD70  +
jmp loc_44D04A  +
***
xor eax eax +
jmp loc_44D013  +
***
sub esp 14h +
mov edx off_4BFA14 +
mov ebx [edx] +
test ebx ebx +
jz loc_44D12D  +
xor eax eax +
add eax 1 +
mov ecx [edx+eax*4] +
test ecx ecx +
jnz loc_44D0D3  +
lea eax ds:4[eax*4] +
mov [esp+14h+var_14] eax +
call sub_459B80  +
test eax eax +
jz loc_44D138  +
mov edx off_4BFA14 +
mov ecx [edx] +
test ecx ecx +
jz loc_44D134  +
mov ebx edx +
mov esi eax +
jmp loc_44D108  +
mov ebx off_4BFA14 +
cmp edx ebx +
jz loc_44D110  +
cmp ecx [ebx] +
jz loc_44D118  +
mov ecx [ecx] +
add esi 4 +
mov [esi-4] ecx +
add edx 4 +
mov ecx [edx] +
test ecx ecx +
jnz loc_44D102  +
mov dword ptr [esi] 0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax 4 +
jmp loc_44D0E4  +
mov esi eax +
jmp loc_44D121  +
xor eax eax +
jmp loc_44D127  +
***
push ebx  +
sub esp 10h +
mov ebx off_4BFA14 +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov eax [ebx] +
test eax eax +
jnz loc_44D169  +
jmp loc_44D180  +
add ebx 4 +
mov eax [ebx] +
test eax eax +
jz loc_44D180  +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] eax +
call edi  +
test eax eax +
jz loc_44D160  +
mov eax [ebx] +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax offset aA_out_0 +
mov eax offset aUnknownFileFor +
jmp loc_44D1B0  +
***
mov eax offset off_4EDCCB +
mov eax offset aPef_xlib +
jmp loc_44D1B0  +
***
mov eax offset off_4EDCBE +
mov eax offset aMach_o +
jmp loc_44D1B0  +
***
mov eax offset aMmo +
mov eax offset aEvax +
jmp loc_44D1B0  +
***
mov eax offset aOvax +
mov eax offset aMsdos +
jmp loc_44D1B0  +
***
mov eax offset aVersados +
mov eax offset aOs9k +
jmp loc_44D1B0  +
***
mov eax offset off_4EDC91 +
mov eax offset aIhex +
jmp loc_44D1B0  +
***
mov eax offset aVerilog +
mov eax offset aSrec_0 +
jmp loc_44D1B0  +
***
mov eax offset aTekhex +
jmp loc_44D1B0  +
***
mov eax offset aOasys +
jmp loc_44D1B0  +
***
mov eax offset off_4EDC6E +
jmp loc_44D1B0  +
***
mov eax offset aIeee_1 +
jmp loc_44D1B0  +
***
mov eax offset off_4EDC65 +
jmp loc_44D1B0  +
***
mov eax offset aXcoff +
jmp loc_44D1B0  +
***
mov eax offset aEcoff +
jmp loc_44D1B0  +
***
mov eax offset aCoff_0 +
jmp loc_44D1B0  +
***
mov dword ptr [esp+8] offset aBfd_flavour_na +
mov dword ptr [esp+4] 75Ah +
mov dword ptr [esp] offset a____Binutil_19 +
call sub_44BA70  +
nop   +
nop   +
nop   +
nop   +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 14h +
mov eax dword_4BFA20 +
mov [edx+4] eax +
mov eax [esi+6Ch] +
mov [edx+94h] esi +
mov [edx+8] eax +
mov eax [esi+4] +
mov eax [eax+9Ch] +
mov [esp+0Ch+var_8] edx +
mov [esp+0Ch+var_C] esi +
call eax  +
test eax eax +
jz loc_44D340  +
mov eax [esi+68h] +
add dword ptr [esi+6Ch] 1 +
add dword_4BFA20 1 +
test eax eax +
mov dword ptr [ebx+0Ch] 0 +
jz loc_44D330  +
mov [ebx+10h] eax +
mov [eax+0Ch] ebx +
mov [esi+68h] ebx +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
mov dword ptr [ebx+10h] 0 +
mov [esi+64h] ebx +
jmp loc_44D322  +
***
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
mov eax [esp+14h+arg_0] +
mov ebx [esp+14h+arg_4] +
test eax eax +
jz loc_44D3C5  +
mov edx [esp+14h+arg_8] +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] eax +
mov [esp+14h+var_C] edx +
call sub_44E4A0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_44D3AA  +
lea edi [edx+10h] +
mov ebx 0A8h +
test edi 1 +
jnz loc_44D3E0  +
test edi 2 +
jnz loc_44D3F0  +
mov ecx ebx +
xor eax eax +
shr ecx 2 +
test bl 2 +
stos   +
jnz loc_44D3B5  +
and ebx 1 +
jnz loc_44D3B0  +
mov eax edx +
add esp 14h +
pop ebx  +
pop edi  +
retn   +
mov byte ptr [edi] 0 +
jmp loc_44D3A8  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and ebx 1 +
jz loc_44D3A8  +
jmp loc_44D3B0  +
mov [esp+14h+var_10] 0B8h +
mov [esp+14h+var_14] ebx +
call sub_44E3F0  +
test eax eax +
jnz loc_44D361  +
xor eax eax +
jmp loc_44D3AA  +
mov byte ptr [edx+10h] 0 +
lea edi [edx+11h] +
mov bl 0A7h +
jmp loc_44D38D  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
sub ebx 2 +
jmp loc_44D395  +
***
push ebx  +
sub esp 18h +
mov eax [esp+20h] +
mov ebx [esp+24h] +
mov edx [eax+4] +
mov edx [edx+10Ch] +
mov [esp] eax +
call edx  +
test eax eax +
mov [ebx+98h] eax +
jz loc_44D450  +
mov edx [ebx] +
mov dword ptr [eax+8] 0 +
mov [eax+10h] ebx +
mov dword ptr [eax+0Ch] 100h +
mov [eax+4] edx +
lea eax [ebx+98h] +
mov [ebx+9Ch] eax +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov ecx [ebx+54h] +
mov eax [ebx+48h] +
mov dword ptr [ebx+64h] 0 +
mov dword ptr [ebx+68h] 0 +
lea edx ds:0[ecx*4] +
mov dword ptr [ebx+6Ch] 0 +
mov [esp+18h+var_10] edx +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] eax +
call memset  +
mov dword ptr [ebx+58h] 0 +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
add eax 48h +
mov [esp+1Ch+var_1C] eax +
call sub_44E180  +
test eax eax +
jz loc_44D4E5  +
add eax 10h +
add esp 1Ch +
retn   +
xor eax eax +
jmp loc_44D4E1  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov esi [esp+1Ch+arg_0] +
mov ebx [eax-10h] +
mov ebp [eax-8] +
mov edi [eax] +
test ebx ebx +
jnz loc_44D516  +
jmp loc_44D540  +
mov ebx [ebx] +
test ebx ebx +
jz loc_44D540  +
cmp [ebx+8] ebp +
jnz loc_44D510  +
mov [esp+1Ch+var_18] edi +
mov eax [ebx+4] +
mov [esp+1Ch+var_1C] eax +
call strcmp  +
test eax eax +
jnz loc_44D510  +
add esp 1Ch +
lea eax [ebx+10h] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test esi esi +
jz loc_44D580  +
mov esi [esi+9Ch] +
test esi esi +
jz loc_44D580  +
lea eax [esi+48h] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] edi +
mov [esp+1Ch+var_1C] eax +
call sub_44E180  +
test eax eax +
jz loc_44D544  +
add esp 1Ch +
add eax 10h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 1Ch +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] 0 +
add eax 48h +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] eax +
call sub_44E180  +
test eax eax +
mov ebx eax +
jz loc_44D678  +
mov edi [eax+8] +
mov eax edi +
jmp loc_44D639  +
mov ebx [ebx] +
test ebx ebx +
jz loc_44D678  +
mov eax [ebx+8] +
cmp eax edi +
jnz loc_44D630  +
mov [esp+1Ch+var_18] esi +
mov eax [ebx+4] +
mov [esp+1Ch+var_1C] eax +
call strcmp  +
test eax eax +
jnz loc_44D630  +
mov eax [esp+1Ch+arg_C] +
lea ebp [ebx+10h] +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call [esp+1Ch+arg_8]  +
test eax eax +
jz loc_44D630  +
add esp 1Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor ebp ebp +
pop ebx  +
mov eax ebp +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] esi +
call strlen  +
mov edi eax +
lea eax [eax+8] +
mov [esp+1Ch+var_1C] eax +
call sub_459B80  +
test eax eax +
mov ebx eax +
jz loc_44D75A  +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] eax +
call memcpy  +
mov edx [esp+1Ch+arg_8] +
test edx edx +
jz loc_44D749  +
mov eax [esp+1Ch+arg_8] +
mov edx [eax] +
cmp edx 0F423Fh +
jg loc_44D75E  +
mov eax [esp+1Ch+arg_0] +
add edi ebx +
lea esi [eax+48h] +
jmp loc_44D6FA  +
cmp ebp 0F423Fh +
jg loc_44D75E  +
mov edx ebp +
mov [esp+1Ch+var_14] edx +
lea ebp [edx+1] +
mov [esp+1Ch+var_18] offset a_D +
mov [esp+1Ch+var_1C] edi +
call sprintf  +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] esi +
call sub_44E180  +
test eax eax +
jnz loc_44D6F0  +
mov eax [esp+1Ch+arg_8] +
test eax eax +
jz loc_44D750  +
mov eax [esp+1Ch+arg_8] +
mov [eax] ebp +
mov eax ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx 1 +
jmp loc_44D6E0  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_44D741  +
mov [esp+1Ch+var_14] offset aBfd_get_unique +
mov [esp+1Ch+var_18] 41Eh +
mov [esp+1Ch+var_1C] offset a____Binutils_7 +
call sub_44BA70  +
lea esi [esi+0] +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+48h+var_18] +
mov ebp [esp+48h+var_14] +
test byte ptr [ebx+2Bh] 10h +
jnz loc_44D870  +
mov edi offset aAbs_0 +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_44D800  +
mov edi offset aCom +
mov ecx 6 +
mov esi ebp +
cmps   +
jnz loc_44D7E2  +
mov edi offset off_4BFA40 +
mov eax [ebx+4] +
mov eax [eax+9Ch] +
mov [esp+48h+var_44] edi +
mov [esp+48h+var_48] ebx +
call eax  +
test eax eax +
jz loc_44D866  +
mov eax edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset aUnd +
mov ecx 6 +
mov esi ebp +
cmps   +
jnz loc_44D807  +
mov edi offset off_4BFAE8 +
jmp loc_44D7BE  +
mov edi offset off_4BFB90 +
jmp loc_44D7BE  +
mov edi offset aInd +
mov ecx 6 +
mov esi ebp +
cmps   +
mov edi offset off_4BFC38 +
setnbe dl  +
setb al  +
cmp dl al +
jz loc_44D7BE  +
lea eax [ebx+48h] +
mov [esp+48h+var_3C] 0 +
mov [esp+48h+var_40] 1 +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] eax +
call sub_44E180  +
test eax eax +
mov ecx eax +
jz loc_44D866  +
mov esi [ecx+10h] +
lea edx [eax+10h] +
mov eax edx +
test esi esi +
jnz loc_44D7DA  +
mov [ecx+10h] ebp +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_44D2D0  +
xor eax eax +
jmp loc_44D7DA  +
mov [esp+48h+var_48] 5 +
call sub_44BAF0  +
xor eax eax +
jmp loc_44D7DA  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_0] +
mov ebp [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_8] +
test byte ptr [esi+2Bh] 10h +
jnz loc_44D925  +
lea edx [esi+48h] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_10] edx +
call sub_44E180  +
test eax eax +
mov ebx eax +
jz loc_44D931  +
mov eax [eax+10h] +
mov edx [esp+2Ch+var_10] +
test eax eax +
jz loc_44D920  +
mov [esp+2Ch+var_24] ebp +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] 0 +
call sub_44D350  +
test eax eax +
jz loc_44D931  +
mov edx [ebx] +
mov [eax] edx +
mov edx [ebx+4] +
mov [eax+4] edx +
mov edx [ebx+8] +
mov [eax+8] edx +
lea edx [eax+10h] +
mov [ebx] eax +
mov [edx+14h] edi +
mov eax esi +
mov [edx] ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_44D2D0  +
lea edx [ebx+10h] +
jmp loc_44D90A  +
mov [esp+2Ch+var_2C] 5 +
call sub_44BAF0  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_44D890  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_4] +
mov edx [esp+2Ch+arg_8] +
test byte ptr [ebp+2Bh] 10h +
jnz loc_44DA27  +
mov [esp+2Ch+var_10] edx +
mov edi offset aAbs_0 +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_44D9FF  +
mov edi offset aCom +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_44D9FF  +
mov edi offset aUnd +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_44D9FF  +
mov edi offset aInd +
mov ecx 6 +
mov esi ebx +
cmps   +
jz loc_44D9FF  +
lea eax [ebp+48h] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] eax +
call sub_44E180  +
test eax eax +
jz loc_44D9FF  +
mov edx [eax+10h] +
test edx edx +
mov edx [esp+2Ch+var_10] +
jz loc_44DA10  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [eax+24h] edx +
lea edx [eax+10h] +
mov [eax+10h] ebx +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_44D2D0  +
mov [esp+2Ch+var_2C] 5 +
call sub_44BAF0  +
jmp loc_44D9FF  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_44D970  +
add esp 1Ch +
retn   +
***
mov eax dword_4BFA20 +
retn   +
***
mov eax [esp+arg_4] +
mov edx [esp+arg_8] +
mov [eax+14h] edx +
mov eax 1 +
retn   +
***
jmp sub_44DAA0  +
***
mov eax [esp+arg_8] +
mov edx [esp+arg_4] +
mov [edx] eax +
sub edx 10h +
mov [esp+arg_4] eax +
mov eax [esp+arg_0] +
mov [esp+arg_8] edx +
add eax 48h +
mov [esp+arg_0] eax +
jmp sub_44E2D0  +
***
push esi  +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_8] +
mov edi [esi+64h] +
test edi edi +
jz loc_44DB01  +
mov [esp+1Ch+var_18] edi +
add ebx 1 +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_1C] esi +
call [esp+1Ch+arg_4]  +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_44DAE8  +
cmp [esi+6Ch] ebx +
jnz loc_44DB0E  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_14] offset aBfd_map_over_s +
mov [esp+1Ch+var_18] 573h +
mov [esp+1Ch+var_1C] offset a____Binutils_7 +
call sub_44BA70  +
lea esi [esi+0] +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+48h+var_18] +
mov ebp [esp+48h+var_14] +
mov edi [esp+48h+var_10] +
mov ebx [esi+64h] +
test ebx ebx +
jnz loc_44DB57  +
jmp loc_44DB72  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_44DB72  +
mov [esp+48h+var_40] edi +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] esi +
call ebp  +
test eax eax +
jz loc_44DB50  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor ebx ebx +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
test byte ptr [eax+2Bh] 10h +
jnz loc_44DBA1  +
mov eax [esp+1Ch+arg_4] +
mov edx [esp+1Ch+arg_8] +
mov [eax+24h] edx +
mov eax 1 +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_1C] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_4] +
mov esi [esp+2Ch+arg_C] +
mov edi [esp+2Ch+arg_10] +
mov ebx [esp+2Ch+arg_14] +
test byte ptr [ebp+15h] 1 +
jz loc_44DC92  +
mov ecx [ebp+24h] +
cmp ecx esi +
jb loc_44DC00  +
cmp ecx ebx +
jb loc_44DC00  +
mov eax ebx +
xor edx edx +
add eax esi +
adc edx edi +
cmp edx 0 +
jl loc_44DC16  +
jg loc_44DC00  +
cmp eax ecx +
jbe loc_44DC16  +
nop   +
mov [esp+2Ch+var_2C] 11h +
call sub_44BAF0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+arg_0] +
test byte ptr [eax+28h] 10h +
jz loc_44DCA8  +
mov eax [ebp+6Ch] +
test eax eax +
jz loc_44DC47  +
add eax esi +
cmp eax [esp+2Ch+arg_8] +
jz loc_44DC47  +
mov edx [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] edx +
call memcpy  +
mov eax [esp+2Ch+arg_0] +
mov edx [esp+2Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+154h] +
mov [esp+2Ch+var_1C] edi +
mov edi [esp+2Ch+arg_8] +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_18] ebx +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] ebp +
call eax  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_44DC0E  +
mov eax [esp+2Ch+arg_0] +
or byte ptr [eax+2Bh] 10h +
add esp 2Ch +
pop ebx  +
mov eax 1 +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_2C] 0Eh +
call sub_44BAF0  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_2C] 5 +
call sub_44BAF0  +
xor eax eax +
jmp loc_44DC0E  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edx [esp+2Ch+arg_4] +
mov eax [esp+2Ch+arg_8] +
mov esi [esp+2Ch+arg_0] +
mov edi [esp+2Ch+arg_C] +
mov ebx [edx+14h] +
mov [esp+2Ch+var_20] eax +
mov ebp [esp+2Ch+arg_10] +
mov ecx [esp+2Ch+arg_14] +
test bl 80h +
jnz loc_44DD92  +
movzx eax byte ptr [esi+28h] +
and eax 18h +
cmp al 10h +
jz loc_44DD56  +
mov eax [edx+28h] +
test eax eax +
jz loc_44DD56  +
cmp eax edi +
jb loc_44DD40  +
cmp eax ecx +
jb loc_44DD40  +
mov [esp+2Ch+var_1C] ecx +
add [esp+2Ch+var_1C] edi +
mov [esp+2Ch+var_18] 0 +
adc [esp+2Ch+var_18] ebp +
cmp [esp+2Ch+var_18] 0 +
mov [esp+2Ch+var_14] eax +
mov [esp+2Ch+var_10] 0 +
jl loc_44DD60  +
jg loc_44DD40  +
mov eax [esp+2Ch+var_14] +
cmp [esp+2Ch+var_1C] eax +
jbe loc_44DD60  +
lea esi [esi+0] +
mov [esp+2Ch+var_2C] 11h +
call sub_44BAF0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edx+24h] +
jmp loc_44DD01  +
test ecx ecx +
jz loc_44DDB7  +
test bh 1 +
jz loc_44DD92  +
test bh 40h +
jz loc_44DDC0  +
mov eax [edx+6Ch] +
test eax eax +
jz loc_44DDF0  +
add eax edi +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] eax +
call memmove  +
mov eax 1 +
jmp loc_44DD4E  +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call memset  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 1 +
jmp loc_44DD4E  +
mov eax [esi+4] +
mov eax [eax+0A0h] +
mov [esp+2Ch+arg_C] edi +
mov edi [esp+2Ch+var_20] +
mov [esp+2Ch+arg_10] ebp +
mov [esp+2Ch+arg_0] esi +
mov [esp+2Ch+arg_14] ecx +
mov [esp+2Ch+arg_8] edi +
mov [esp+2Ch+arg_4] edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
and bh 0BFh +
mov [edx+14h] ebx +
mov [esp+2Ch+var_2C] 5 +
call sub_44BAF0  +
xor eax eax +
jmp loc_44DD4E  +
***
mov eax [esp+arg_8] +
mov dword ptr [eax] 0 +
jmp sub_4878A0  +
***
xor eax eax +
retn   +
***
mov eax 1 +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_C] +
mov ebx [esp+1Ch+arg_0] +
lea esi ds:0[eax*4] +
mov edi esi +
shr edi 2 +
cmp edi eax +
jz loc_44DE75  +
mov [esp+1Ch+var_1C] 6 +
call sub_44BAF0  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_4A9D10  +
test eax eax +
mov [ebx+8] eax +
jz loc_44DE5F  +
test esi esi +
jnz loc_44DEE3  +
mov edx 8 +
mov ecx [eax+4] +
cmp ecx edx +
jb loc_44DEEB  +
mov ebp [eax] +
sub ecx edx +
mov [eax+4] ecx +
add ebp edx +
mov [eax] ebp +
mov eax ebp +
sub eax edx +
test eax eax +
mov [ebx] eax +
jz loc_44DF00  +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] eax +
call memset  +
mov eax [esp+1Ch+arg_8] +
mov [ebx+0Ch] edi +
mov dword ptr [ebx+10h] 0 +
and byte ptr [ebx+18h] 0FEh +
mov [ebx+14h] eax +
mov eax [esp+1Ch+arg_4] +
mov [ebx+4] eax +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edx [esi+7] +
and edx 0FFFFFFF8h +
jnz loc_44DE8A  +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] eax +
call sub_4A9D70  +
jmp loc_44DEA0  +
mov eax [ebx+8] +
mov [esp+1Ch+var_1C] eax +
call sub_4A9E80  +
mov dword ptr [ebx+8] 0 +
jmp loc_44DE5F  +
***
sub esp 1Ch +
mov eax dword_4BFCE0 +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_44DE40  +
add esp 1Ch +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+8] +
mov [esp+18h+var_18] eax +
call sub_4A9E80  +
mov dword ptr [ebx+8] 0 +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_4] +
mov ebx [esp+2Ch+arg_8] +
mov eax [edi+4] +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] 0 +
call eax  +
test eax eax +
mov ebp eax +
jz loc_44E172  +
mov ecx [edi+0Ch] +
xor edx edx +
mov [eax+4] esi +
mov [eax+8] ebx +
mov eax ebx +
div  ecx +
mov eax [edi] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ebp+0] edx +
mov [eax] ebp +
mov eax [edi+10h] +
test byte ptr [edi+18h] 1 +
lea edx [eax+1] +
mov eax ebp +
mov [edi+10h] edx +
jnz loc_44E120  +
lea ebx [ecx+ecx*2] +
shr ebx 2 +
cmp edx ebx +
jbe loc_44E120  +
mov esi offset unk_4EDF90 +
mov edx offset unk_4EDF20 +
mov eax esi +
sub eax edx +
sar eax 2 +
mov ebx eax +
shr ebx 1Fh +
add eax ebx +
sar eax 1 +
lea ebx [edx+eax*4] +
cmp ecx [ebx] +
jb loc_44E022  +
jmp loc_44E136  +
mov eax ebx +
sub eax edx +
sar eax 2 +
mov esi eax +
shr esi 1Fh +
add eax esi +
sar eax 1 +
lea eax [edx+eax*4] +
cmp ecx [eax] +
jnb loc_44E13A  +
mov ebx eax +
cmp edx ebx +
jnz loc_44E005  +
mov eax [edx] +
cmp ecx eax +
jnb loc_44E128  +
test eax eax +
lea ebx ds:0[eax*4] +
jz loc_44E128  +
mov esi ebx +
shr esi 2 +
cmp esi eax +
mov [esp+2Ch+var_1C] esi +
jnz loc_44E128  +
test ebx ebx +
mov edx [edi+8] +
jz loc_44E14C  +
lea eax [ebx+7] +
and eax 0FFFFFFF8h +
jnz loc_44E151  +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edx +
call sub_4A9D70  +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+var_20] +
test eax eax +
jz loc_44E128  +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call memset  +
mov eax [edi+0Ch] +
test eax eax +
mov [esp+2Ch+var_14] eax +
jz loc_44E110  +
mov eax [edi] +
mov [esp+2Ch+var_18] 0 +
mov [esp+2Ch+var_10] ebp +
mov esi [esp+2Ch+var_18] +
lea ebp ds:0[esi*4] +
lea edx [eax+ebp] +
mov esi [edx] +
test esi esi +
jz loc_44E0FD  +
mov eax [esi+8] +
mov ebx esi +
jmp loc_44E0D7  +
cmp [ecx+8] eax +
jnz loc_44E0DD  +
mov ebx ecx +
mov ecx [ebx] +
test ecx ecx +
jnz loc_44E0D0  +
mov [edx] ecx +
xor edx edx +
div  [esp+2Ch+var_1C] +
mov eax [esp+2Ch+var_20] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ebx] edx +
mov [eax] esi +
mov eax [edi] +
lea edx [eax+ebp] +
mov esi [edx] +
test esi esi +
jnz loc_44E0C8  +
add [esp+2Ch+var_18] 1 +
mov esi [esp+2Ch+var_14] +
cmp [esp+2Ch+var_18] esi +
jnz loc_44E0B4  +
mov ebp [esp+2Ch+var_10] +
mov eax [esp+2Ch+var_20] +
mov [edi] eax +
mov eax [esp+2Ch+var_1C] +
mov [edi+0Ch] eax +
mov eax ebp +
nop   +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
or byte ptr [edi+18h] 1 +
add esp 2Ch +
pop ebx  +
mov eax ebp +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebx +
mov ebx esi +
lea edx [eax+4] +
cmp edx ebx +
jz loc_44E026  +
mov esi ebx +
jmp loc_44DFE9  +
mov eax 8 +
mov ecx [edx+4] +
cmp ecx eax +
jb loc_44E067  +
mov esi [edx] +
sub ecx eax +
mov [edx+4] ecx +
add esi eax +
mov [edx] esi +
sub esi eax +
mov [esp+2Ch+var_20] esi +
jmp loc_44E077  +
xor eax eax +
jmp loc_44E120  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+38h+arg_0] +
mov ebx [esp+38h+arg_4] +
mov [esp+38h+var_24] eax +
mov eax [esp+38h+arg_8] +
lea ebp [ebx+1] +
mov [esp+38h+var_20] eax +
mov eax [esp+38h+arg_C] +
mov [esp+38h+var_1C] eax +
movzx eax byte ptr [ebx] +
test eax eax +
jz loc_44E1CB  +
nop   +
mov ecx eax +
add ebp 1 +
shl ecx 11h +
add eax ecx +
add eax edx +
mov edx eax +
shr edx 2 +
xor edx eax +
movzx eax byte ptr [ebp-1] +
test eax eax +
jnz loc_44E1B0  +
sub ebp ebx +
mov ecx [esp+38h+var_24] +
sub ebp 1 +
mov eax ebp +
add edx ebp +
shl eax 11h +
add edx eax +
mov esi edx +
shr esi 2 +
xor esi edx +
xor edx edx +
mov eax esi +
div  dword ptr [ecx+0Ch] +
mov eax [ecx] +
mov edi [eax+edx*4] +
test edi edi +
jnz loc_44E1FC  +
jmp loc_44E220  +
mov edi [edi] +
test edi edi +
jz loc_44E220  +
cmp [edi+8] esi +
nop   +
jnz loc_44E1F6  +
mov [esp+38h+var_34] ebx +
mov eax [edi+4] +
mov [esp+38h+var_38] eax +
call strcmp  +
test eax eax +
jnz loc_44E1F6  +
mov eax edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+38h+var_20] +
test edx edx +
jz loc_44E2B4  +
mov eax [esp+38h+var_1C] +
test eax eax +
jz loc_44E2B0  +
mov eax [esp+38h+var_24] +
mov edi ebp +
add edi 1 +
mov eax [eax+8] +
jnz loc_44E290  +
mov edx [eax+4] +
mov ebp 8 +
cmp edx ebp +
jnb loc_44E29F  +
mov [esp+38h+var_34] ebp +
mov [esp+38h+var_38] eax +
call sub_4A9D70  +
mov ebp eax +
test ebp ebp +
jz loc_44E2BB  +
mov [esp+38h+var_30] edi +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] ebp +
call memcpy  +
mov eax [esp+38h+var_24] +
mov [esp+38h+arg_8] esi +
mov [esp+38h+arg_4] ebp +
mov [esp+38h+arg_0] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44DF70  +
add ebp 8 +
and ebp 0FFFFFFF8h +
jz loc_44E24E  +
mov edx [eax+4] +
cmp edx ebp +
jb loc_44E24E  +
mov ecx [eax] +
sub edx ebp +
mov [eax+4] edx +
add ecx ebp +
mov [eax] ecx +
sub ecx ebp +
mov ebp ecx +
jmp loc_44E25C  +
mov ebp ebx +
jmp loc_44E270  +
xor eax eax +
jmp loc_44E217  +
mov [esp+38h+var_38] 6 +
call sub_44BAF0  +
xor eax eax +
jmp loc_44E217  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+28h+arg_0] +
mov ecx [esp+28h+arg_8] +
mov ebx [esi+0Ch] +
mov eax [ecx+8] +
div  ebx +
mov eax [esi] +
lea eax [eax+edx*4] +
mov edx [eax] +
test edx edx +
jz loc_44E30C  +
cmp ecx edx +
jnz loc_44E306  +
jmp loc_44E32A  +
cmp ecx eax +
jz loc_44E328  +
mov edx eax +
mov eax [edx] +
test eax eax +
jnz loc_44E300  +
mov [esp+28h+var_20] offset aBfd_hash_renam +
mov [esp+28h+var_24] 243h +
mov [esp+28h+var_28] offset a____Binutil_18 +
call sub_44BA70  +
mov eax edx +
mov edx [ecx] +
mov [eax] edx +
mov eax [esp+28h+arg_4] +
mov [ecx+4] eax +
movzx edx byte ptr [eax] +
lea edi [eax+1] +
xor eax eax +
test edx edx +
jz loc_44E35C  +
mov ebp edx +
add edi 1 +
shl ebp 11h +
add edx ebp +
add edx eax +
mov eax edx +
shr eax 2 +
xor eax edx +
movzx edx byte ptr [edi-1] +
test edx edx +
jnz loc_44E341  +
sub edi [esp+28h+arg_4] +
sub edi 1 +
add eax edi +
shl edi 11h +
lea edx [eax+edi] +
mov eax edx +
shr eax 2 +
xor eax edx +
xor edx edx +
mov [ecx+8] eax +
div  ebx +
mov eax [esi] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ecx] edx +
mov [eax] ecx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 18h +
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov eax [esp+14h+arg_0] +
test ebx ebx +
mov edx [eax+8] +
jz loc_44E422  +
lea ecx [ebx+7] +
and ecx 0FFFFFFF8h +
jnz loc_44E427  +
mov [esp+14h+var_10] ecx +
mov [esp+14h+var_14] edx +
call sub_4A9D70  +
test eax eax +
jz loc_44E43F  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov ecx 8 +
mov esi [edx+4] +
cmp esi ecx +
jb loc_44E40C  +
mov eax [edx] +
sub esi ecx +
mov [edx+4] esi +
add eax ecx +
mov [edx] eax +
sub eax ecx +
test eax eax +
jnz loc_44E41C  +
test ebx ebx +
jz loc_44E41C  +
mov [esp+14h+var_14] 6 +
mov [esp+14h+var_8] eax +
call sub_44BAF0  +
mov eax [esp+14h+var_8] +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov edx [esp+1Ch+arg_0] +
test edx edx +
jz loc_44E480  +
mov dword ptr [edx+0Ch] 0FFFFFFFFh +
mov eax edx +
mov dword ptr [edx+10h] 0 +
add esp 1Ch +
retn   +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] 14h +
mov [esp+1Ch+var_1C] eax +
call sub_44E3F0  +
mov edx eax +
xor eax eax +
test edx edx +
jnz loc_44E46B  +
jmp loc_44E47B  +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
test eax eax +
jz loc_44E4B0  +
retn   +
mov [esp+arg_4] 0Ch +
mov [esp+arg_0] edx +
jmp sub_44E3F0  +
***
jmp sub_44E4D0  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_4] +
mov ebx [esp+1Ch+arg_8] +
mov [esp+1Ch+var_10] 0 +
movzx eax byte ptr [edi+18h] +
mov edx [edi+0Ch] +
or eax 1 +
test edx edx +
mov [edi+18h] al +
jz loc_44E528  +
mov eax [edi] +
mov edx [esp+1Ch+var_10] +
mov ebp [eax+edx*4] +
test ebp ebp +
jnz loc_44E517  +
jmp loc_44E536  +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_44E536  +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] ebp +
call esi  +
test eax eax +
jnz loc_44E510  +
movzx eax byte ptr [edi+18h] +
and eax 0FFFFFFFEh +
mov [edi+18h] al +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add [esp+1Ch+var_10] 1 +
mov eax [esp+1Ch+var_10] +
cmp [edi+0Ch] eax +
ja loc_44E4FC  +
jmp loc_44E524  +
***
mov ecx [esp+arg_0] +
xor edx edx +
mov eax ds:dword_4EDEC0[edx*4] +
cmp eax ecx +
jnb loc_44E56E  +
add edx 1 +
cmp edx 0Bh +
jnz loc_44E556  +
mov eax 10001h +
mov dword_4BFCE0 eax +
retn   +
***
mov [esp+18h+var_18] 2Ch +
call sub_459B80  +
test eax eax +
mov ebx eax +
jz loc_44E5E0  +
mov eax dword_4BFCE0 +
mov [esp+18h+var_10] 14h +
mov [esp+18h+var_14] offset sub_44E460 +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_C] eax +
call sub_44DE40  +
test eax eax +
jz loc_44E5E4  +
mov dword ptr [ebx+1Ch] 0 +
mov eax ebx +
mov dword ptr [ebx+20h] 0 +
mov dword ptr [ebx+24h] 0 +
mov dword ptr [ebx+28h] 0 +
add esp 18h +
pop ebx  +
retn   +
xor eax eax +
jmp loc_44E5D9  +
mov [esp+18h+var_18] ebx +
call free  +
xor eax eax +
jmp loc_44E5D9  +
***
sub esp 0Ch +
call sub_44E580  +
test eax eax +
jz loc_44E603  +
mov dword ptr [eax+28h] 1 +
add esp 0Ch +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+8] +
mov [esp+18h+var_18] eax +
call sub_4A9E80  +
mov dword ptr [ebx+8] 0 +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_8] +
mov esi [esp+1Ch+arg_0] +
test ebx ebx +
jz loc_44E690  +
mov eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_14] 1 +
mov [esp+1Ch+var_1C] esi +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
call sub_44E180  +
test eax eax +
mov ebx eax +
jz loc_44E700  +
mov eax [eax+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_44E6C3  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_18] 14h +
mov [esp+1Ch+var_1C] esi +
call sub_44E3F0  +
test eax eax +
mov ebx eax +
jz loc_44E700  +
mov ecx [esp+1Ch+arg_C] +
mov eax [esp+1Ch+arg_4] +
test ecx ecx +
jnz loc_44E720  +
mov [ebx+4] eax +
mov dword ptr [ebx+0Ch] 0FFFFFFFFh +
mov dword ptr [ebx+10h] 0 +
mov ebp [esi+1Ch] +
mov eax [esp+1Ch+arg_4] +
mov [ebx+0Ch] ebp +
mov [esp+1Ch+var_1C] eax +
call strlen  +
add eax ebp +
lea edx [eax+1] +
mov [esi+1Ch] edx +
mov edx [esi+28h] +
test edx edx +
jnz loc_44E710  +
mov eax [esi+20h] +
test eax eax +
jz loc_44E760  +
mov eax [esi+24h] +
mov [eax+10h] ebx +
mov [esi+24h] ebx +
mov eax [ebx+0Ch] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebp 2 +
add eax 3 +
mov [ebx+0Ch] ebp +
mov [esi+1Ch] eax +
jmp loc_44E6E4  +
mov [esp+1Ch+var_1C] eax +
call strlen  +
mov [esp+1Ch+var_1C] esi +
lea edi [eax+1] +
mov [esp+1Ch+var_18] edi +
call sub_44E3F0  +
test eax eax +
mov ebp eax +
jz loc_44E700  +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_1C] ebp +
mov [esp+1Ch+var_18] eax +
call memcpy  +
mov [ebx+4] ebp +
jmp loc_44E6B5  +
mov [esi+20h] ebx +
jmp loc_44E6F1  +
***
mov eax [esp+arg_0] +
mov eax [eax+1Ch] +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_0] +
mov ebx [eax+20h] +
mov ecx [eax+28h] +
test ebx ebx +
mov [esp+2Ch+var_20] ecx +
jnz loc_44E7A7  +
jmp loc_44E810  +
mov ebx [ebx+10h] +
test ebx ebx +
jz loc_44E810  +
mov esi [ebx+4] +
mov [esp+2Ch+var_2C] esi +
call strlen  +
lea ebp [eax+1] +
mov eax [esp+2Ch+var_20] +
test eax eax +
jz loc_44E7ED  +
mov eax [edi+4] +
lea edx [esp+2Ch+var_E] +
mov eax [eax+3Ch] +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] ebp +
call eax  +
lea eax [esp+2Ch+var_E] +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] 2 +
mov [esp+2Ch+var_2C] eax +
call sub_46FB80  +
cmp eax 2 +
jnz loc_44E801  +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] esi +
call sub_46FB80  +
cmp eax ebp +
jz loc_44E7A0  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov eax [eax+8] +
add eax 2 +
cmp eax 0Ah +
ja loc_44E890  +
jmp ds:off_4EDFBC[eax*4]  +
mov eax 2 +
add esp 1Ch +
retn   +
mov eax 4 +
add esp 1Ch +
retn   +
mov eax 1 +
add esp 1Ch +
retn   +
mov eax 8 +
add esp 1Ch +
retn   +
xor eax eax +
add esp 1Ch +
retn   +
mov eax 10h +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_14] offset aBfd_get_reloc_ +
mov [esp+1Ch+var_18] 1BAh +
mov [esp+1Ch+var_1C] offset a____Binutils_8 +
call sub_44BA70  +
lea esi [esi+0] +
push ebp  +
mov edx 1 +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+48h+var_14] +
mov ebx [esp+48h+var_C] +
mov esi [esp+48h+var_10] +
mov edi [esp+48h+var_18] +
lea ecx [eax-1] +
mov eax edx +
shl eax cl +
lea eax [eax+eax-2] +
lea ecx [ebx-1] +
or eax 1 +
shl edx cl +
mov ebx eax +
mov ecx esi +
mov ebp eax +
lea edx [edx+edx-2] +
not ebp  +
shl ebx cl +
or edx 1 +
or edx ebx +
mov ebx [esp+48h+var_8] +
mov ecx esi +
and ebx edx +
shr ebx cl +
cmp edi 1 +
jz loc_44E927  +
jb loc_44E960  +
cmp edi 2 +
jz loc_44E921  +
cmp edi 3 +
nop   +
lea esi [esi+0] +
jnz loc_44E942  +
xor eax eax +
test ebp ebx +
setnz al  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
shr eax 1 +
mov ebp eax +
not ebp  +
xor eax eax +
and ebx ebp +
jz loc_44E919  +
mov ecx esi +
xor eax eax +
shr edx cl +
and edx ebp +
cmp ebx edx +
setnz al  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_40] offset aBfd_check_over +
mov [esp+48h+var_44] 217h +
mov [esp+48h+var_48] offset a____Binutils_8 +
call sub_44BA70  +
nop   +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+3Ch+arg_4] +
mov eax [ebx] +
mov ebp [ebx+0Ch] +
mov esi [eax] +
mov eax [esi+10h] +
cmp eax offset off_4BFB90 +
jz loc_44EB55  +
test ebp ebp +
jz loc_44EB10  +
cmp eax offset off_4BFAE8 +
mov [esp+3Ch+var_1C] 0 +
jz loc_44EB75  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_44E9F0  +
mov edx [esp+3Ch+arg_14] +
mov edi [esp+3Ch+arg_10] +
mov ecx [esp+3Ch+arg_C] +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_24] edx +
mov edx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_28] edi +
mov edi [esp+3Ch+arg_8] +
mov [esp+3Ch+var_2C] ecx +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_30] edi +
call eax  +
cmp eax 3 +
jz loc_44E9F0  +
***
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+3Ch+arg_0] +
mov edi [ebx+4] +
mov [esp+3Ch+var_3C] eax +
call sub_4537D0  +
mov [esp+3Ch+var_3C] ebp +
mov edx eax +
imul edx edi +
mov [esp+3Ch+var_18] edx +
call sub_44E820  +
mov edx [esp+3Ch+var_18] +
lea edi [edx+eax] +
mov eax [esp+3Ch+arg_0] +
movzx eax byte ptr [eax+28h] +
and eax 18h +
cmp al 10h +
jz loc_44EB20  +
mov eax [esp+3Ch+arg_C] +
mov ecx [eax+28h] +
test ecx ecx +
jz loc_44EB20  +
cmp ecx edi +
mov eax 2 +
jb loc_44E9E8  +
mov eax [esi+10h] +
xor ecx ecx +
test byte ptr [eax+15h] 10h +
jnz loc_44EA50  +
mov ecx [esi+8] +
mov esi [esp+3Ch+arg_10] +
mov edi [eax+3Ch] +
test esi esi +
jz loc_44EB40  +
xor esi esi +
cmp dword ptr [ebp+24h] 0 +
jnz loc_44EB40  +
mov edi [ebx+8] +
mov [esp+3Ch+var_14] edi +
add edi [eax+38h] +
add ecx edi +
lea eax [ecx+esi] +
mov [esp+3Ch+var_18] eax +
mov eax [ebp+10h] +
test eax eax +
jz loc_44EAA9  +
mov eax [esp+3Ch+arg_C] +
mov ecx [esp+3Ch+arg_C] +
mov eax [eax+3Ch] +
mov ecx [ecx+38h] +
sub [esp+3Ch+var_18] ecx +
mov eax [eax+1Ch] +
sub [esp+3Ch+var_18] eax +
mov eax [ebp+30h] +
test eax eax +
jnz loc_44EBE4  +
mov edi [esp+3Ch+arg_10] +
test edi edi +
jz loc_44EADE  +
mov esi [ebp+24h] +
test esi esi +
jz loc_44ED80  +
mov eax [esp+3Ch+arg_C] +
mov eax [eax+38h] +
add [ebx+4] eax +
mov eax [esp+3Ch+arg_0] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 2 +
jz loc_44EBF0  +
mov eax [esp+3Ch+var_18] +
mov [ebx+8] eax +
mov ecx [ebp+18h] +
test ecx ecx +
jnz loc_44EB94  +
mov ecx [ebp+4] +
mov ebx [esp+3Ch+var_18] +
mov eax [ebp+8] +
shr ebx cl +
mov ecx [ebp+14h] +
add eax 2 +
shl ebx cl +
cmp eax 6 +
ja loc_44ED9A  +
jmp ds:off_4EE00C[eax*4]  +
***
add esp 3Ch +
mov eax 6 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+3Ch+arg_C] +
mov ecx [eax+24h] +
mov eax 2 +
cmp ecx edi +
jb loc_44E9E8  +
jmp loc_44EA42  +
***
mov eax [esp+arg_4C] +
mov eax [esp+20h] +
mov eax [esp+arg_4C] +
mov [esp+arg_4] offset aBfd_perform_re +
mov eax [esp+arg_4C] +
add edx [esp+arg_54] +
mov eax [esp+arg_4C] +
mov esi [esp+arg_54] +
mov eax [eax+4] +
add esi edx +
mov eax [eax+28h] +
mov [esp+0] esi +
call eax  +
mov ecx [esp+arg_4C] +
mov edx [ebp+2Ch] +
mov ecx [ecx+4] +
mov ecx [ecx+30h] +
jmp loc_44EC69  +
***
mov eax [esp+3Ch+var_18] +
mov [ebx+8] eax +
mov eax [esp+3Ch+arg_C] +
mov eax [eax+38h] +
add [ebx+4] eax +
mov eax [esp+3Ch+var_1C] +
jmp loc_44E9E8  +
mov eax 5 +
jmp loc_44E9E8  +
test ebp ebp +
jz loc_44EB10  +
mov [esp+3Ch+var_1C] 0 +
jmp loc_44E9AB  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+54h] +
mov eax [ebx] +
mov ebp [ebx+0Ch] +
mov esi [eax] +
cmp dword ptr [esi+10h] offset off_4BFB90 +
jz loc_44EF60  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_44EE24  +
mov edx [esp+64h] +
mov edi [esp+50h] +
mov ecx [esp+60h] +
mov [esp+8] esi +
mov [esp+18h] edx +
mov edx [esp+58h] +
sub edx [esp+5Ch] +
mov [esp+14h] edi +
mov [esp+10h] ecx +
mov [esp+0Ch] edx +
mov [esp+4] ebx +
mov [esp] edi +
call eax  +
cmp eax 3 +
jz loc_44EE24  +
***
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test esi esi +
jz loc_44EF74  +
mov ecx [ebx+4] +
add eax ecx +
mov [ebx+4] eax +
mov eax [esp+50h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 2 +
jz loc_44F112  +
mov eax [esp+24h] +
mov [ebx+8] eax +
mov eax [ebp+18h] +
test eax eax +
jnz loc_44F0D0  +
mov ecx [ebp+4] +
xor ebx ebx +
mov edi [esp+24h] +
mov eax [ebp+8] +
mov esi [esp+58h] +
sub edx [esp+5Ch] +
shr edi cl +
mov ecx [ebp+14h] +
add eax 2 +
add esi edx +
shl edi cl +
cmp eax 6 +
ja sub_44F0C0  +
jmp ds:off_4EE034[eax*4]  +
***
mov eax [esp+60h] +
mov ecx [eax+24h] +
mov eax 2 +
cmp ecx edi +
jb loc_44EE1C  +
jmp loc_44EE76  +
***
mov eax [esp+60h] +
mov eax [eax+38h] +
add [ebx+4] eax +
add esp 3Ch +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [esp+24h] +
add [ebx+4] eax +
xor eax eax +
mov [ebx+8] esi +
jmp loc_44EE1C  +
***
mov eax ebx +
jmp loc_44EE1C  +
***
mov eax [esp+arg_4C] +
mov eax [esp+arg_4C] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+0] esi +
call eax  +
mov ecx [esp+arg_4C] +
mov edx [ebp+2Ch] +
mov ecx [ecx+4] +
mov ecx [ecx+30h] +
mov [esp+arg_0] esi +
mov esi [ebp+28h] +
and esi eax +
add edi esi +
and edi edx +
not edx  +
and edx eax +
or edi edx +
mov [esp+0] edi +
call ecx  +
mov eax ebx +
jmp loc_44EE1C  +
***
mov eax [esp+arg_4C] +
mov eax [eax+4] +
mov eax [eax+34h] +
mov [esp+0] esi +
call eax  +
mov ecx [esp+arg_4C] +
mov edx [ebp+2Ch] +
mov ecx [ecx+4] +
mov ecx [ecx+3Ch] +
mov [esp+arg_0] esi +
mov esi eax +
and si [ebp+28h] +
add edi esi +
and edi edx +
not edx  +
and edx eax +
or edi edx +
movsx edi di +
mov [esp+0] edi +
call ecx  +
mov eax ebx +
jmp loc_44EE1C  +
***
movzx eax byte ptr [esi] +
mov ecx [ebp+2Ch] +
mov edx eax +
and dl [ebp+28h] +
add edx edi +
and edx ecx +
not ecx  +
and ecx eax +
mov eax ebx +
or edx ecx +
mov [esi] dl +
jmp loc_44EE1C  +
***
mov eax [esp+arg_4C] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+0] esi +
call eax  +
mov ecx [esp+arg_4C] +
mov edx [ebp+2Ch] +
mov ecx [ecx+4] +
mov ecx [ecx+30h] +
mov [esp+arg_0] esi +
mov esi [ebp+28h] +
and esi eax +
sub esi edi +
and esi edx +
not edx  +
and edx eax +
or esi edx +
mov [esp+0] esi +
call ecx  +
mov eax ebx +
jmp loc_44EE1C  +
***
mov eax 5 +
jmp loc_44EE1C  +
***
mov eax [esp+50h] +
mov [esp+28h] edx +
mov [esp] eax +
call sub_4536E0  +
mov esi [ebp+4] +
mov ebx [esp+24h] +
mov [esp+8] esi +
mov [esp+10h] ebx +
mov [esp+0Ch] eax +
mov eax [ebp+0Ch] +
mov [esp+4] eax +
mov eax [ebp+18h] +
mov [esp] eax +
call loc_44E8B0  +
mov ecx esi +
mov edx [esp+28h] +
mov ebx eax +
jmp loc_44EF16  +
***
mov eax [eax] +
mov ecx 12h +
mov edi offset aCoffIntelLittl +
mov esi eax +
cmps   +
mov [esp+2Ch] eax +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jz loc_44EEFF  +
mov esi [esp+2Ch] +
mov edi offset aCoffIntelBig +
mov ecx 0Fh +
cmps   +
jz loc_44EEFF  +
mov eax [esp+28h] +
mov edi offset aCoffZ8k +
mov ecx 9 +
sub [esp+24h] eax +
mov esi [esp+2Ch] +
cmps   +
jz loc_44EF06  +
mov dword ptr [ebx+8] 0 +
jmp loc_44EF06  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+3Ch+arg_0] +
mov esi [esp+3Ch+arg_8] +
mov eax [ebx+4] +
mov edx [ebx+8] +
mov [esp+3Ch+var_30] eax +
mov eax [ebx+14h] +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_2C] eax +
mov eax esi +
neg eax  +
test edx edx +
cmovs esi eax +
call sub_44E820  +
cmp eax 8 +
mov edi eax +
ja loc_44F370  +
jmp ds:off_4EE050[eax*4]  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_C] +
movzx eax byte ptr [eax] +
mov [esp+3Ch+var_28] eax +
mov eax [ebx+18h] +
test eax eax +
jnz loc_44F274  +
mov ebp [esp+3Ch+var_28] +
and ebp [ebx+28h] +
mov [esp+3Ch+var_24] 0 +
movzx ecx byte ptr [esp+3Ch+var_30] +
mov edx [ebx+2Ch] +
shr esi cl +
movzx ecx byte ptr [esp+3Ch+var_2C] +
mov eax edx +
not eax  +
and eax [esp+3Ch+var_28] +
shl esi cl +
lea ecx [esi+ebp] +
and ecx edx +
or ecx eax +
cmp edi 2 +
jz loc_44F463  +
jle loc_44F410  +
cmp edi 4 +
jz loc_44F424  +
cmp edi 8 +
jnz loc_44F447  +
mov [esp+3Ch+var_34] offset a_bfd_relocate_ +
mov [esp+3Ch+var_38] 60Bh +
mov [esp+3Ch+var_3C] offset a____Binutils_8 +
call sub_44BA70  +
mov eax [esp+3Ch+arg_4] +
mov edx [esp+3Ch+arg_C] +
mov eax [eax+4] +
mov eax [eax+34h] +
mov [esp+3Ch+var_3C] edx +
call eax  +
mov [esp+3Ch+var_28] eax +
mov eax [ebx+18h] +
test eax eax +
jz loc_44F1E6  +
mov eax [ebx+0Ch] +
mov ebp 1 +
lea ecx [eax-1] +
mov eax ebp +
shl eax cl +
mov ecx [esp+3Ch+arg_4] +
lea eax [eax+eax-2] +
mov [esp+3Ch+var_24] eax +
or [esp+3Ch+var_24] 1 +
mov eax [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] ecx +
not eax  +
mov [esp+3Ch+var_1C] eax +
call sub_4536E0  +
movzx ecx byte ptr [esp+3Ch+var_30] +
mov edx [esp+3Ch+var_24] +
shl edx cl +
lea ecx [eax-1] +
or edx 1 +
shl ebp cl +
lea eax [ebp+ebp-2] +
mov ebp [esp+3Ch+var_28] +
or edx eax +
mov eax [esp+3Ch+var_30] +
mov ecx edx +
and ecx esi +
mov [esp+3Ch+var_20] ecx +
mov ecx eax +
shr [esp+3Ch+var_20] cl +
mov ecx [ebx+28h] +
and ebp ecx +
mov [esp+3Ch+var_10] ecx +
mov ecx edx +
and ecx ebp +
mov [esp+3Ch+var_18] ecx +
movzx ecx byte ptr [esp+3Ch+var_2C] +
shr [esp+3Ch+var_18] cl +
mov ecx eax +
mov eax [ebx+18h] +
shr edx cl +
mov [esp+3Ch+var_14] edx +
cmp eax 2 +
jz loc_44F390  +
cmp eax 3 +
jz loc_44F470  +
cmp eax 1 +
jz loc_44F39E  +
mov [esp+3Ch+var_34] offset a_bfd_relocate_ +
mov [esp+3Ch+var_38] 5EDh +
mov [esp+3Ch+var_3C] offset a____Binutils_8 +
call sub_44BA70  +
mov eax [esp+3Ch+arg_4] +
mov edx [esp+3Ch+arg_C] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+3Ch+var_3C] edx +
call eax  +
mov [esp+3Ch+var_28] eax +
jmp loc_44F1DB  +
mov [esp+3Ch+var_34] offset a_bfd_relocate_ +
mov [esp+3Ch+var_38] 58Dh +
mov [esp+3Ch+var_3C] offset a____Binutils_8 +
call sub_44BA70  +
lea esi [esi+0] +
mov [esp+3Ch+var_34] offset a_bfd_relocate_ +
mov [esp+3Ch+var_38] 57Dh +
mov [esp+3Ch+var_3C] offset a____Binutils_8 +
call sub_44BA70  +
lea esi [esi+0] +
mov eax [esp+3Ch+var_24] +
shr eax 1 +
mov [esp+3Ch+var_1C] eax +
not [esp+3Ch+var_1C]  +
mov eax [esp+3Ch+var_1C] +
and eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_24] 0 +
jz loc_44F3C4  +
mov edx [esp+3Ch+var_1C] +
and edx [esp+3Ch+var_14] +
cmp eax edx +
setnz al  +
movzx eax al +
mov [esp+3Ch+var_24] eax +
mov edx [esp+3Ch+var_10] +
movzx ecx byte ptr [esp+3Ch+var_2C] +
mov eax edx +
not eax  +
shr eax 1 +
and eax edx +
mov edx [esp+3Ch+var_18] +
shr eax cl +
mov ecx [esp+3Ch+var_20] +
xor edx eax +
sub edx eax +
mov eax ecx +
xor eax edx +
add edx ecx +
xor edx ecx +
not eax  +
and eax edx +
and eax [esp+3Ch+var_14] +
test [esp+3Ch+var_1C] eax +
mov eax 1 +
cmovz eax [esp+3Ch+var_24] +
mov [esp+3Ch+var_24] eax +
jmp loc_44F1F5  +
cmp edi 1 +
jnz loc_44F447  +
mov eax [esp+3Ch+arg_C] +
mov [eax] cl +
mov eax [esp+3Ch+var_24] +
jmp loc_44F1C5  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+4] +
mov eax [eax+30h] +
mov edi [esp+3Ch+arg_C] +
mov [esp+3Ch+var_3C] ecx +
mov [esp+3Ch+var_38] edi +
call eax  +
mov eax [esp+3Ch+var_24] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_34] offset a_bfd_relocate_ +
mov [esp+3Ch+var_38] 5FDh +
mov [esp+3Ch+var_3C] offset a____Binutils_8 +
call sub_44BA70  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+4] +
mov eax [eax+3Ch] +
jmp loc_44F42E  +
mov edx [esp+3Ch+var_18] +
mov ecx [esp+3Ch+var_20] +
mov eax edx +
add edx ecx +
or eax ecx +
and edx [esp+3Ch+var_14] +
or eax edx +
test [esp+3Ch+var_1C] eax +
setnz al  +
movzx eax al +
mov [esp+3Ch+var_24] eax +
jmp loc_44F1F5  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_C] +
mov edx [esp+2Ch+arg_4] +
mov ecx [esp+2Ch+arg_8] +
mov esi [esp+2Ch+arg_0] +
mov [esp+2Ch+var_14] eax +
mov eax [esp+2Ch+arg_18] +
mov [esp+2Ch+var_2C] edx +
mov edi [esp+2Ch+arg_10] +
mov [esp+2Ch+var_18] ecx +
mov ebp [esp+2Ch+arg_14] +
mov [esp+2Ch+var_1C] edx +
mov [esp+2Ch+var_10] eax +
call sub_4537D0  +
mov [esp+2Ch+var_2C] esi +
mov ebx eax +
call sub_44E820  +
imul ebx edi +
mov edx [esp+2Ch+var_1C] +
mov ecx [esp+2Ch+var_18] +
add ebx eax +
movzx eax byte ptr [edx+28h] +
and eax 18h +
cmp al 10h +
jz loc_44F515  +
mov eax [ecx+28h] +
test eax eax +
jz loc_44F515  +
cmp eax ebx +
jnb loc_44F51C  +
add esp 2Ch +
mov eax 2 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ecx+24h] +
cmp eax ebx +
jb loc_44F508  +
mov ebx [esi+10h] +
add ebp [esp+2Ch+var_10] +
test ebx ebx +
jz loc_44F53C  +
mov eax [ecx+3Ch] +
sub ebp [eax+1Ch] +
sub ebp [ecx+38h] +
mov ecx [esi+30h] +
mov eax ebp +
sub eax edi +
test ecx ecx +
cmovnz ebp eax +
add edi [esp+2Ch+var_14] +
mov [esp+2Ch+arg_8] ebp +
mov [esp+2Ch+arg_0] esi +
mov [esp+2Ch+arg_C] edi +
mov [esp+2Ch+arg_4] edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_44F180  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_0] +
mov eax [esp+2Ch+arg_C] +
mov ebp [esp+2Ch+arg_4] +
mov esi [esp+2Ch+arg_8] +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_14] eax +
call sub_44E820  +
cmp eax 8 +
mov ebx eax +
ja loc_44F652  +
jmp ds:off_4EE084[eax*4]  +
***
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+arg_4] offset a_bfd_clear_con +
mov eax [esp+arg_14] +
movzx eax byte ptr [eax] +
mov edx [edi+2Ch] +
mov ecx 0Eh +
mov edi offset a_debug_ranges +
mov esi [esi] +
mov [esp+arg_18] edx +
not edx  +
and edx eax +
cmps   +
jnz loc_44F5FF  +
mov eax edx +
or eax 1 +
test byte ptr [esp+arg_18] 1 +
cmovnz edx eax +
cmp ebx 2 +
jz loc_44F670  +
jle loc_44F595  +
cmp ebx 4 +
jz loc_44F6B0  +
cmp ebx 8 +
jnz loc_44F690  +
mov [esp+arg_4] offset a_bfd_clear_con +
mov [esp+arg_0] 658h +
mov dword ptr [esp+0] offset a____Binutils_8 +
call sub_44BA70  +
mov eax [ebp+4] +
mov ecx [esp+arg_14] +
mov eax [eax+34h] +
mov [esp+0] ecx +
call eax  +
jmp loc_44F5D7  +
mov eax [ebp+4] +
mov ecx [esp+arg_14] +
mov eax [eax+28h] +
mov [esp+0] ecx +
call eax  +
jmp loc_44F5D7  +
mov [esp+arg_4] offset a_bfd_clear_con +
mov [esp+arg_0] 626h +
mov dword ptr [esp+0] offset a____Binutils_8 +
call sub_44BA70  +
nop   +
mov eax [ebp+4] +
mov eax [eax+3Ch] +
mov ecx [esp+arg_14] +
mov [esp+arg_3C] edx +
mov [esp+arg_40] ecx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
mov [esp+arg_4] offset a_bfd_clear_con +
mov [esp+arg_0] 64Ah +
mov dword ptr [esp+0] offset a____Binutils_8 +
call sub_44BA70  +
lea esi [esi+0] +
mov eax [ebp+4] +
mov eax [eax+30h] +
jmp loc_44F676  +
***
mov eax [esp+arg_0] +
mov edx [eax+4] +
mov edx [edx+148h] +
jmp edx  +
***
mov eax [esp+4] +
mov edx [eax+4] +
mov edx [edx+14Ch] +
jmp edx  +
***
sub esp 1Ch +
cmp dword ptr [esp+24h] 225h +
jnz loc_44F737  +
mov eax [esp+20h] +
mov [esp] eax +
call sub_4536E0  +
mov edx eax +
mov eax offset unk_4EE2A0 +
cmp edx 20h +
jz loc_44F74D  +
cmp edx 40h +
jz loc_44F751  +
cmp edx 10h +
jnz loc_44F723  +
mov dword ptr [esp+4] 1E30h +
mov dword ptr [esp] offset a____Binutils_8 +
call sub_44BA40  +
mov dword ptr [esp+4] 1E32h +
mov dword ptr [esp] offset a____Binutils_8 +
call sub_44BA40  +
mov dword ptr [esp+4] 1E35h +
mov dword ptr [esp] offset a____Binutils_8 +
call sub_44BA40  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov dword ptr [esp+4] 1E2Ch +
mov dword ptr [esp] offset a____Binutils_8 +
mov [esp+0Ch] eax +
call sub_44BA40  +
mov eax [esp+0Ch] +
add esp 1Ch +
retn   +
***
jmp sub_44F780  +
***
mov eax [esp+arg_0] +
cmp eax 87Ah +
ja loc_44F793  +
mov eax ds:off_4FBD20[eax*4] +
retn   +
xor eax eax +
retn   +
***
sub esp 1Ch +
mov edx [esp+28h] +
movzx eax byte ptr [edx] +
and eax 3 +
cmp al 2 +
jz loc_44F7C4  +
mov eax [esp+2Ch] +
mov dword ptr [eax] 0 +
mov eax 1 +
add esp 1Ch +
retn   +
***
mov eax [edx+18h] +
mov eax [eax+2Ch] +
mov dword ptr [esp] offset aPFRelaxAndRMay +
call eax  +
jmp loc_44F7B1  +
***
mov eax 1 +
retn   +
***
sub esp 1Ch +
mov eax 1 +
mov edx [esp+24h] +
test edx edx +
jz loc_44F80F  +
mov dword ptr [esp] offset aInput_section_ +
call off_4BFA04  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov eax 1 +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+68h] +
mov edi [esp+70h] +
mov ebx [eax+10h] +
mov ebp [ebx+94h] +
mov [esp+4] ebx +
mov [esp] ebp +
call sub_44BB40  +
test eax eax +
mov esi eax +
js loc_44F9F1  +
lea eax [esp+6Ch] +
mov [esp+8] eax +
mov [esp+4] ebx +
mov [esp] ebp +
call sub_4878A0  +
test eax eax +
jz loc_44F9F1  +
test esi esi +
jnz loc_44F890  +
***
mov eax [esp+arg_68] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp] esi +
call sub_459B80  +
test eax eax +
mov esi eax +
mov [esp+2Ch] eax +
jz loc_44F9F1  +
mov eax [esp+74h] +
mov [esp+8] esi +
mov [esp+4] ebx +
mov [esp] ebp +
mov [esp+0Ch] eax +
call sub_44BB80  +
test eax eax +
js loc_44F9E5  +
jz loc_44F9AD  +
mov eax [esi] +
test eax eax +
jz loc_44F9AD  +
mov [esp+28h] ebp +
mov [esp+70h] edi +
nop   +
***
mov dword ptr [esp+3Ch] 0 +
mov edx [esi] +
mov eax [edx] +
mov eax [eax] +
mov eax [eax+10h] +
test eax eax +
jz loc_44F909  +
cmp eax offset off_4BFB90 +
jz loc_44F909  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_44FB50  +
mov ecx [esp+70h] +
xor eax eax +
mov [esp-5Ch+arg_64] ebx +
mov [esp-5Ch+arg_5C] edx +
test ecx ecx +
cmovnz eax [esp+60h] +
lea ecx [esp+3Ch] +
mov [esp-5Ch+arg_6C] ecx +
mov [esp-5Ch+arg_68] eax +
mov eax [esp-5Ch+arg_C4] +
mov [esp-5Ch+arg_60] eax +
mov eax [esp-5Ch+arg_80] +
mov [esp-5Ch+arg_58] eax +
call sub_44E970  +
mov edx [esp+70h] +
test edx edx +
jz loc_44F95B  +
mov edx [ebx+3Ch] +
mov edi [esi] +
mov ecx [edx+4Ch] +
mov ebp [edx+48h] +
mov [ebp+ecx*4+0] edi +
add ecx 1 +
mov [edx+4Ch] ecx +
test eax eax +
jz loc_44F9A0  +
cmp eax 7 +
ja sub_44F970  +
jmp ds:off_4EE1A4[eax*4]  +
***
mov edi [esp+64h] +
mov ecx [esi] +
mov edx [edi+18h] +
mov edx [edx+2Ch] +
mov [esp-5Ch+arg_68] eax +
mov eax [esp+60h] +
mov [esp-5Ch+arg_64] ecx +
mov [esp-5Ch+arg_60] ebx +
mov [esp-5Ch+arg_58] offset aXPBARelocation +
mov [esp-5Ch+arg_5C] eax +
call edx  +
lea esi [esi+0] +
add esi 4 +
mov eax [esi] +
test eax eax +
jnz loc_44F8E0  +
mov eax [esp+2Ch] +
mov [esp-5Ch+arg_58] eax +
call free  +
jmp loc_44F87E  +
***
mov eax [esp+arg_60] +
mov edx [esi] +
mov edi [esp+arg_5C] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+arg_8] edx +
mov [esp+arg_4] ebx +
mov [esp+arg_0] edi +
mov dword ptr [esp+0] offset aXPBARelocati_0 +
call eax  +
mov eax [esp+arg_28] +
mov [esp+0] eax +
call free  +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_38] +
test eax eax +
jz loc_44FBC6  +
mov edi [esp+arg_60] +
mov ecx [esi] +
mov edx [edi+18h] +
mov ecx [ecx+4] +
mov edi [esp+arg_24] +
mov edx [edx+20h] +
mov [esp+arg_0] eax +
mov eax [esp+arg_60] +
mov [esp+arg_C] ecx +
mov [esp+arg_8] ebx +
mov [esp+arg_4] edi +
mov [esp+0] eax +
call edx  +
test eax eax +
jz loc_44F9E5  +
add esi 4 +
mov eax [esi] +
test eax eax +
jnz loc_44F8E0  +
jmp loc_44F9AD  +
***
mov eax [esp+arg_60] +
mov eax [esp+arg_60] +
mov edx [esi] +
mov edi [esp+arg_5C] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+arg_8] edx +
mov [esp+arg_4] ebx +
mov [esp+arg_0] edi +
mov dword ptr [esp+0] offset aXPBARelocati_1 +
call eax  +
mov eax [esp+arg_28] +
mov [esp+0] eax +
call free  +
jmp loc_44F9F1  +
***
mov eax [esp+arg_60] +
mov eax [eax+18h] +
mov eax [eax+1Ch] +
mov edi eax +
mov eax [esi] +
mov edx [eax+8] +
mov ecx [eax+4] +
mov ebp edx +
mov edx [eax+0Ch] +
mov eax [eax] +
mov edx [edx+20h] +
mov eax [eax] +
mov eax [eax+4] +
mov [esp+arg_18] ecx +
mov ecx [esp+arg_24] +
mov [esp+arg_14] ebx +
mov [esp+arg_C] ebp +
mov [esp+arg_4] eax +
mov eax [esp+arg_60] +
mov [esp+arg_10] ecx +
mov [esp+arg_8] edx +
mov [esp+arg_0] 0 +
mov [esp+0] eax +
call edi  +
test eax eax +
jz loc_44F9E5  +
add esi 4 +
mov eax [esi] +
test eax eax +
jnz loc_44F8E0  +
jmp loc_44F9AD  +
***
movzx eax word ptr [eax+18h] +
and ax 380h +
cmp ax 100h +
jz loc_44F909  +
cmp ax 200h +
jz loc_44F909  +
mov eax [esp-5Ch+arg_C4] +
mov edi eax +
mov eax [edx+4] +
mov ebp eax +
mov eax [esp-5Ch+arg_80] +
mov [esp-5Ch+arg_58] eax +
call sub_4537D0  +
mov edx [esi] +
mov edx [edx+0Ch] +
mov [esp-5Ch+arg_60] ebx +
imul eax ebp +
mov [esp-5Ch+arg_58] edx +
add eax edi +
mov [esp-5Ch+arg_64] eax +
mov eax [esp-5Ch+arg_80] +
mov [esp-5Ch+arg_5C] eax +
call sub_44F560  +
mov eax [esi] +
mov edx off_4BFC2C +
mov [eax] edx +
mov eax [esi] +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] offset unk_4EE1E0 +
xor eax eax +
jmp loc_44F93E  +
***
mov [esp+arg_0] 1F1Ch +
mov dword ptr [esp+0] offset a____Binutils_8 +
call sub_44BA40  +
mov eax [esp+arg_38] +
jmp loc_44FA0C  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] 10h +
mov [esp+1Ch+var_1C] eax +
call sub_44E3F0  +
test eax eax +
jz loc_44FC12  +
mov dword ptr [eax+0Ch] 0 +
add esp 1Ch +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
test byte ptr [ebx+2Ch] 1 +
jz loc_44FC60  +
mov esi [ebx+9Ch] +
test esi esi +
jz loc_44FC60  +
mov [esp+14h+var_14] esi +
call sub_44DF50  +
mov [esp+14h+var_14] esi +
call free  +
mov dword ptr [ebx+9Ch] 0 +
and byte ptr [ebx+2Ch] 0FEh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_10] 30Ch +
mov [esp+14h+var_14] offset a____Binutils_6 +
call sub_44BA40  +
mov esi [ebx+9Ch] +
jmp loc_44FC39  +
***
sub esp 1Ch +
mov edx [edx+18h] +
retn   +
***
or dword ptr [eax+0Ch] 80h +
***
mov ecx [edx+14h] +
mov dword ptr [eax+10h] offset off_4BFAE8 +
mov edx [eax+10h] +
test edx edx +
jz loc_44FD61  +
test byte ptr [eax+0Dh] 8 +
jnz sub_44FCD6  +
mov dword ptr [esp+4] 8E9h +
mov dword ptr [esp+0] offset a____Binutils_6 +
call sub_44BA40  +
jmp sub_44FCD6  +
mov dword ptr [eax+10h] offset off_4BFAE8 +
mov dword ptr [eax+8] 0 +
add esp 1Ch +
retn   +
mov dword ptr [esp+8] offset aSet_symbol_fro +
mov [esp-1Ch+arg_1C] 8E2h +
mov [esp-1Ch+arg_18] offset a____Binutils_6 +
call sub_44BA70  +
or dword ptr [eax+0Ch] 800h +
mov dword ptr [eax+10h] offset off_4BFB90 +
mov dword ptr [eax+8] 0 +
jmp sub_44FCD6  +
***
push edi  +
push esi  +
mov esi edx +
push ebx  +
sub esp 1Ch +
mov ebx [edx] +
mov eax [ecx] +
mov edi [esp+28h+arg_0] +
cmp ebx eax +
jnb loc_44FDB3  +
mov eax [ebp+0] +
test edi edi +
mov [eax+ebx*4] edi +
jz loc_44FDF0  +
add ebx 1 +
mov eax 1 +
mov [esi] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test eax eax +
jz loc_44FDE0  +
lea edx [eax+eax] +
mov [ecx] edx +
shl eax 3 +
mov edx [ebp+0] +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] edx +
call sub_459C10  +
test eax eax +
jz loc_44FDF7  +
mov [ebp+0] eax +
mov ebx [esi] +
jmp loc_44FD9A  +
mov dword ptr [ecx] 7Ch +
mov ax 1F0h +
jmp loc_44FDBF  +
mov eax 1 +
jmp loc_44FDAB  +
xor eax eax +
jmp loc_44FDAB  +
***
sub esp 24h +
mov edx [esp+24h+arg_0] +
mov esi [esp+24h+arg_4] +
mov eax [edx+1Ch] +
test eax eax +
jnz loc_44FE56  +
mov ecx [esi] +
mov dword ptr [edx+1Ch] 1 +
movzx eax byte ptr [ecx+1] +
and eax 18h +
cmp al 18h +
jz loc_44FE56  +
cmp al 10h +
jz loc_44FE90  +
mov ebx [edx+20h] +
test ebx ebx +
jz loc_44FE61  +
mov eax ebx +
call sub_44FC80  +
mov eax [esi+4] +
or dword ptr [ebx+0Ch] 2 +
mov ecx [esi+8] +
mov [esp+24h+var_24] ebx +
lea edx [eax+7Ch] +
add eax 78h +
call sub_44FD80  +
test eax eax +
jz loc_44FEC4  +
mov eax 1 +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax [esi+4] +
mov [esp+24h+var_8] edx +
mov ecx [eax+4] +
mov ecx [ecx+10Ch] +
mov [esp+24h+var_24] eax +
call ecx  +
test eax eax +
mov ebx eax +
jz loc_44FEE0  +
mov edx [esp+24h+var_8] +
mov eax [edx+4] +
mov dword ptr [ebx+0Ch] 0 +
mov [ebx+4] eax +
jmp loc_44FE33  +
mov ebx [edx+4] +
mov eax [ecx+20h] +
mov [esp+24h+var_18] 0 +
mov [esp+24h+var_1C] 0 +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_24] eax +
mov [esp+24h+var_8] edx +
call sub_44E180  +
mov edx [esp+24h+var_8] +
test eax eax +
jnz loc_44FE2C  +
jmp loc_44FE56  +
mov [esp+24h+var_1C] offset a_bfd_generic_1 +
mov [esp+24h+var_20] 93Fh +
mov [esp+24h+var_24] offset a____Binutils_6 +
call sub_44BA70  +
xor eax eax +
jmp loc_44FE5B  +
***
mov ebx eax +
sub esp 14h +
mov eax [eax+4] +
mov eax [eax+104h] +
mov [esp+14h+var_14] ebx +
call eax  +
test eax eax +
mov esi eax +
js loc_44FF46  +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] ebx +
call sub_458A80  +
test eax eax +
mov [ebx+78h] eax +
jz loc_44FF42  +
mov edx [ebx+4] +
mov edx [edx+108h] +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] ebx +
call edx  +
test eax eax +
js loc_44FF46  +
mov [ebx+7Ch] eax +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
test esi esi +
jz loc_44FF1E  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test eax eax +
jz loc_44FFA0  +
mov edx [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_10] edx +
call sub_44E4A0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_44FF9A  +
mov dword ptr [edx+0Ch] 0 +
mov eax edx +
mov dword ptr [edx+10h] 0 +
mov dword ptr [edx+14h] 0 +
mov dword ptr [edx+18h] 0 +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] 1Ch +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
test eax eax +
jnz loc_44FF60  +
xor eax eax +
jmp loc_44FF9A  +
***
mov eax [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test eax eax +
jz loc_450000  +
mov edx [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_10] edx +
call sub_44FF50  +
test eax eax +
jz loc_450014  +
mov dword ptr [eax+1Ch] 0 +
mov dword ptr [eax+20h] 0 +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] 24h +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
test eax eax +
jnz loc_44FFD0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_4] +
mov ebx [esp+14h+arg_0] +
test byte ptr [esi+2Ch] 1 +
jnz loc_45003D  +
mov eax [esi+9Ch] +
test eax eax +
jz loc_450051  +
mov [esp+14h+var_10] 1DEh +
mov [esp+14h+var_14] offset a____Binutils_6 +
call sub_44BA40  +
mov eax [esp+14h+arg_C] +
mov dword ptr [ebx+1Ch] 0 +
mov dword ptr [ebx+20h] 0 +
mov dword ptr [ebx+28h] 0 +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_8] +
mov [esp+14h+var_14] ebx +
mov [esp+14h+var_10] eax +
call sub_44DF20  +
test eax eax +
jz loc_450093  +
mov dword ptr [ebx+24h] offset sub_44FC20 +
or byte ptr [esi+2Ch] 1 +
mov [esi+9Ch] ebx +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_44E180  +
test eax eax +
jz loc_4500D3  +
mov edx [esp+1Ch+arg_10] +
test edx edx +
jnz loc_4500DA  +
add esp 1Ch +
retn   +
mov eax [eax+14h] +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-6] +
cmp dl 1 +
jbe loc_4500D7  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_C] +
mov ebx [esp+3Ch+arg_4] +
mov ecx [esp+3Ch+arg_0] +
mov edx [esp+3Ch+arg_8] +
mov [esp+3Ch+var_1C] eax +
mov eax [esp+3Ch+arg_10] +
mov edi [ebx+28h] +
mov [esp+3Ch+var_10] eax +
mov eax [esp+3Ch+arg_14] +
test edi edi +
mov [esp+3Ch+var_18] eax +
jz loc_45020E  +
mov ecx [ecx+4] +
movzx eax byte ptr [edx] +
cmp al [ecx+18h] +
mov [esp+3Ch+var_1D] al +
jz loc_450200  +
cmp al [ebx+8] +
jz loc_450200  +
mov ebp edx +
mov [esp+3Ch+var_1D] 0 +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_14] edx +
call sub_44E180  +
mov edx [esp+3Ch+var_14] +
test eax eax +
jz loc_450208  +
mov [esp+3Ch+var_3C] ebp +
call strlen  +
add eax 9 +
mov [esp+3Ch+var_3C] eax +
call sub_459B80  +
test eax eax +
mov esi eax +
jz loc_4502D0  +
movzx eax [esp+3Ch+var_1D] +
mov byte ptr [esi+1] 0 +
mov [esi] al +
mov [esp+3Ch+var_3C] esi +
call strlen  +
lea edx [esi+eax] +
lea eax [esi+eax+7] +
mov dword ptr [edx] 72775F5Fh +
mov dword ptr [edx+4] 5F7061h +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] eax +
call strcpy  +
mov edi [esp+3Ch+var_18] +
mov eax [ebx+1Ch] +
mov [esp+3Ch+var_30] 1 +
mov [esp+3Ch+var_2C] edi +
mov edi [esp+3Ch+var_1C] +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] eax +
call sub_4500A0  +
mov [esp+3Ch+var_3C] esi +
mov ebx eax +
call free  +
mov eax ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebp [edx+1] +
jmp loc_450149  +
cmp byte ptr [ebp+0] 5Fh +
jz loc_450240  +
mov edi [esp+3Ch+var_18] +
mov eax [ebx+1Ch] +
mov [esp+3Ch+arg_4] edx +
mov [esp+3Ch+arg_10] edi +
mov edi [esp+3Ch+var_10] +
mov [esp+3Ch+arg_0] eax +
mov [esp+3Ch+arg_C] edi +
mov edi [esp+3Ch+var_1C] +
mov [esp+3Ch+arg_8] edi +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4500A0  +
mov edi offset a__real_ +
mov ecx 7 +
mov esi ebp +
cmps   +
jnz loc_45020E  +
mov eax [ebx+28h] +
add ebp 7 +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_14] edx +
call sub_44E180  +
mov edx [esp+3Ch+var_14] +
test eax eax +
jz loc_45020E  +
mov [esp+3Ch+var_3C] ebp +
call strlen  +
add eax 2 +
mov [esp+3Ch+var_3C] eax +
call sub_459B80  +
test eax eax +
mov esi eax +
jz loc_4502D0  +
movzx eax [esp+3Ch+var_1D] +
mov byte ptr [esi+1] 0 +
mov [esi] al +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] esi +
call strcat  +
mov ecx [esp+3Ch+var_18] +
mov eax [ebx+1Ch] +
mov [esp+3Ch+var_30] 1 +
mov [esp+3Ch+var_2C] ecx +
mov ecx [esp+3Ch+var_1C] +
mov [esp+3Ch+var_34] ecx +
jmp loc_4501E0  +
xor eax eax +
jmp loc_4501F8  +
***
mov edi ecx +
push esi  +
push ebx  +
sub esp 3Ch +
test byte ptr [ecx+15h] 1 +
mov [esp+44h+var_20] eax +
mov [esp+44h+var_24] edx +
jz loc_450550  +
mov eax [esp+44h+arg_0] +
mov ebp [eax+10h] +
mov eax [ebp+94h] +
mov [esp+44h+var_1C] eax +
mov eax [ebp+24h] +
test eax eax +
jz loc_450540  +
cmp [ebp+3Ch] edi +
jz loc_450330  +
mov [esp+44h+var_40] 0A32h +
mov [esp+44h+var_44] offset a____Binutils_6 +
call sub_44BA40  +
mov eax [esp+44h+arg_0] +
mov eax [eax+8] +
cmp [ebp+38h] eax +
jz loc_450350  +
mov [esp+44h+var_40] 0A33h +
mov [esp+44h+var_44] offset a____Binutils_6 +
call sub_44BA40  +
mov eax [esp+44h+arg_0] +
mov eax [eax+0Ch] +
cmp [ebp+24h] eax +
jz loc_450370  +
mov [esp+44h+var_40] 0A34h +
mov [esp+44h+var_44] offset a____Binutils_6 +
call sub_44BA40  +
mov eax [esp+44h+var_24] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_4505B2  +
mov ecx [esp+44h+arg_4] +
test ecx ecx +
jnz loc_4503F7  +
mov eax [esp+44h+var_1C] +
mov ebx [eax+78h] +
test ebx ebx +
jz loc_4506C3  +
mov eax [esp+44h+var_1C] +
mov eax [eax+7Ch] +
lea eax [ebx+eax*4] +
cmp eax ebx +
jbe loc_4503F7  +
mov [esp+44h+var_18] edi +
mov edi ebx +
mov ebx eax +
jmp loc_4503CF  +
mov eax [esi+10h] +
cmp eax offset off_4BFAE8 +
jz loc_4503DA  +
test byte ptr [eax+15h] 10h +
jnz loc_4503DA  +
cmp eax offset off_4BFC38 +
jz loc_4503DA  +
add edi 4 +
cmp ebx edi +
jbe loc_4503F3  +
mov esi [edi] +
test dword ptr [esi+0Ch] 3882h +
jz loc_4503B1  +
mov edx [esi+14h] +
test edx edx +
jz loc_450610  +
mov eax esi +
add edi 4 +
call sub_44FC80  +
cmp ebx edi +
ja loc_4503CF  +
mov edi [esp+44h+var_18] +
mov eax [edi+14h] +
and eax 2100000h +
cmp eax 2000000h +
jnz loc_450480  +
mov edx [ebp+24h] +
test edx edx +
jz loc_450602  +
mov eax [esp+44h+var_20] +
test byte ptr [eax+2Bh] 10h +
jz loc_450570  +
mov ebx [edi+6Ch] +
test ebx ebx +
jz loc_4506E0  +
mov eax [ebp+38h] +
xor esi esi +
test eax eax +
jnz loc_4506A7  +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_44] eax +
call sub_4537D0  +
mov edx [ebp+24h] +
mov [esp+44h+var_34] 0 +
mov [esp+44h+var_3C] ebx +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_30] edx +
imul esi eax +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_38] esi +
mov [esp+44h+var_44] eax +
call sub_44DBC0  +
test eax eax +
setnz al  +
movzx eax al +
jmp loc_450545  +
mov esi [ebp+24h] +
mov eax [ebp+28h] +
cmp esi eax +
cmovb esi eax +
mov [esp+44h+var_44] esi +
call sub_459B80  +
test esi esi +
mov ebx eax +
jz loc_4504A1  +
test eax eax +
jz loc_4505A8  +
mov eax [esp+44h+var_1C] +
mov ecx [esp+44h+var_24] +
mov eax [eax+78h] +
mov [esp+44h+var_30] eax +
movzx eax byte ptr [ecx] +
mov [esp+44h+var_38] ebx +
mov [esp+44h+var_40] ecx +
and eax 3 +
cmp al 2 +
setz al  +
movzx eax al +
mov [esp+44h+var_34] eax +
mov eax [esp+44h+arg_0] +
mov [esp+44h+var_3C] eax +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_44] eax +
call sub_44C290  +
test eax eax +
mov esi eax +
jz loc_450656  +
mov eax [esp+44h+var_20] +
mov ecx [ebp+38h] +
mov [esp+44h+var_44] eax +
mov [esp+44h+var_24] ecx +
call sub_4537D0  +
mov edx [ebp+24h] +
mov [esp+44h+var_34] 0 +
mov [esp+44h+var_3C] esi +
imul eax [esp+44h+var_24] +
mov [esp+44h+var_30] edx +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_38] eax +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_44] eax +
call sub_44DBC0  +
test eax eax +
jz loc_450656  +
test ebx ebx +
jz loc_450540  +
mov [esp+44h+var_44] ebx +
call free  +
nop   +
lea esi [esi+0] +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+44h+var_40] 0A2Bh +
mov [esp+44h+var_44] offset a____Binutils_6 +
call sub_44BA40  +
jmp loc_4502FB  +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_30] 1 +
mov [esp+44h+var_38] 0 +
mov [esp+44h+var_34] 0 +
mov [esp+44h+var_3C] offset unk_4FDF9F +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_44] eax +
call sub_44DBC0  +
test eax eax +
jnz loc_45041F  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebp+4Ch] +
test esi esi +
jz loc_450382  +
mov ebx [edi+48h] +
test ebx ebx +
jnz loc_450382  +
mov eax [esp+44h+var_20] +
mov eax [eax+4] +
mov edx [eax] +
mov eax [esp+44h+var_1C] +
mov eax [eax+4] +
mov eax [eax] +
mov [esp+44h+var_3C] edx +
mov [esp+44h+var_44] offset aAttemptToDoRel +
mov [esp+44h+var_40] eax +
call off_4BFA04  +
mov [esp+44h+var_44] 3 +
call sub_44BAF0  +
xor eax eax +
jmp loc_450545  +
xor esi esi +
jmp loc_450483  +
cmp dword ptr [esi+10h] offset off_4BFAE8 +
jz loc_450670  +
mov eax [esp+44h+var_24] +
mov edx [esi+4] +
mov eax [eax+1Ch] +
mov [esp+44h+var_40] edx +
mov [esp+44h+var_34] 1 +
mov [esp+44h+var_38] 0 +
mov [esp+44h+var_3C] 0 +
mov [esp+44h+var_44] eax +
call sub_4500A0  +
mov edx eax +
test edx edx +
jz loc_4503C8  +
jmp loc_4503E5  +
test ebx ebx +
jz loc_4505A8  +
mov [esp+44h+var_44] ebx +
call free  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+4] +
mov [esp+44h+var_30] 1 +
mov [esp+44h+var_34] 0 +
mov [esp+44h+var_38] 0 +
mov [esp+44h+var_3C] eax +
mov eax [esp+44h+var_24] +
mov [esp+44h+var_40] eax +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_44] eax +
call sub_4500F0  +
mov edx eax +
jmp loc_450649  +
mov [esp+44h+var_40] 0A87h +
mov [esp+44h+var_44] offset a____Binutils_6 +
call sub_44BA40  +
mov esi [ebp+38h] +
jmp loc_450437  +
call sub_44FEF0  +
test eax eax +
jz loc_4505A8  +
mov eax [esp+44h+var_1C] +
mov ebx [eax+78h] +
jmp loc_450399  +
mov [esp+44h+var_40] 0A86h +
mov [esp+44h+var_44] offset a____Binutils_6 +
call sub_44BA40  +
jmp loc_45042A  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_8] +
mov ecx [esp+2Ch+arg_4] +
mov edx [esp+2Ch+arg_0] +
mov ebx [ebp+4] +
mov ecx [ecx+4] +
movzx eax byte ptr [ebx] +
cmp al [ecx+18h] +
jz loc_450740  +
cmp al [edx+8] +
jz loc_450740  +
mov edi offset a__wrap_ +
mov ecx 7 +
mov esi ebx +
cmps   +
jz loc_450753  +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebx 1 +
mov edi offset a__wrap_ +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_450736  +
mov eax [edx+28h] +
lea esi [ebx+7] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_10] edx +
call sub_44E180  +
test eax eax +
jz loc_450736  +
mov eax [ebp+4] +
mov edx [esp+2Ch+var_10] +
cmp ebx eax +
jz loc_4507D5  +
movzx eax byte ptr [eax] +
movzx esi byte ptr [ebx+6] +
mov [ebx+6] al +
mov eax [edx+1Ch] +
lea edx [ebx+6] +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
call sub_4500A0  +
mov ebp eax +
mov eax esi +
test al al +
jz loc_450736  +
mov [ebx+6] al +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edx+1Ch] +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call sub_4500A0  +
mov ebp eax +
jmp loc_450736  +
***
push esi  +
sub esp 14h +
mov esi [esp+14h+arg_4] +
mov ebx [esp+14h+arg_0] +
mov edx [esi+10h] +
test edx edx +
jz loc_4508C8  +
mov [esp+14h+var_10] 2A3h +
mov [esp+14h+var_14] offset a____Binutils_6 +
call sub_44BA40  +
mov eax [ebx+20h] +
test eax eax +
jz loc_4508D2  +
mov [eax+10h] esi +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_4508E2  +
mov [ebx+20h] esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [ebx+1Ch] esi +
mov [ebx+20h] esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov ebx [esp+arg_0] +
lea esi [ebx+1Ch] +
mov edx esi +
nop   +
lea esi [esi+0] +
mov eax [edx] +
test eax eax +
jz loc_450927  +
test byte ptr [eax+0Ch] 0FDh +
jnz loc_450930  +
mov ecx [eax+10h] +
mov [edx] ecx +
mov dword ptr [eax+10h] 0 +
cmp eax [ebx+20h] +
jnz loc_450900  +
cmp edx esi +
jz loc_450935  +
sub edx 10h +
mov [ebx+20h] edx +
pop ebx  +
pop esi  +
retn   +
lea edx [eax+10h] +
jmp loc_450900  +
mov dword ptr [ebx+20h] 0 +
jmp loc_450927  +
***
mov [esp+18h+var_18] 2Ch +
call sub_459B80  +
test eax eax +
jz loc_450981  +
mov ebx eax +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_C] 24h +
mov [esp+18h+var_10] offset sub_44FFC0 +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call sub_450020  +
test eax eax +
jz loc_450985  +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
xor ebx ebx +
jmp loc_45097A  +
mov [esp+18h+var_18] ebx +
xor ebx ebx +
call free  +
jmp loc_45097A  +
***
jmp sub_4509A0  +
***
mov eax [esp+arg_0] +
mov edx [eax+78h] +
test edx edx +
jz loc_4509B1  +
mov eax 1 +
retn   +
jmp sub_44FEF0  +
***
mov eax [esp+4] +
movzx edx word ptr [eax+18h] +
mov dword ptr [eax+3Ch] offset off_4BFB90 +
and dx 0FC7Fh +
or dh 2 +
mov [eax+18h] dx +
mov edx [eax+1Ch] +
mov [eax+38h] edx +
retn   +
***
push esi  +
push esi  +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_14] 18h +
mov ebx [esp+18h+arg_4] +
mov [esp+18h+var_18] eax +
call sub_458B60  +
test eax eax +
jz loc_452378  +
mov dword ptr [eax+4] 0 +
mov edx [ebx+0A4h] +
test edx edx +
jz loc_452370  +
mov [edx] eax +
mov [ebx+0A4h] eax +
add esp 18h +
pop ebx  +
retn   +
mov [ebx+0A0h] eax +
jmp loc_452363  +
xor eax eax +
jmp loc_452369  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+3Ch+arg_C] +
mov esi [esp+3Ch+arg_0] +
mov edx [esp+3Ch+arg_4] +
mov edi [esp+3Ch+arg_8] +
mov eax [ebx+4] +
cmp eax 1 +
jz loc_452450  +
cmp eax 2 +
jnz loc_452433  +
test byte ptr [edi+15h] 1 +
jz loc_4524B8  +
mov edx [ebx+0Ch] +
mov eax 1 +
test edx edx +
jz loc_45242B  +
mov ebp [ebx+10h] +
mov eax [ebx+14h] +
test ebp ebp +
mov [esp+3Ch+var_1C] eax +
jz loc_452470  +
cmp edx ebp +
ja loc_4524D1  +
mov ebp [ebx+8] +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_18] edx +
call sub_4537D0  +
mov edx [esp+3Ch+var_18] +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] esi +
mov [esp+3Ch+var_28] edx +
imul eax ebp +
mov ebp [esp+3Ch+var_1C] +
mov [esp+3Ch+var_30] eax +
mov [esp+3Ch+var_34] ebp +
call sub_44DBC0  +
cmp ebp [ebx+14h] +
jz loc_45242B  +
mov [esp+3Ch+var_3C] ebp +
mov [esp+3Ch+var_1C] eax +
call free  +
mov eax [esp+3Ch+var_1C] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+3Ch+var_34] offset a_bfd_default_l +
mov [esp+3Ch+var_38] 9D5h +
mov [esp+3Ch+var_3C] offset a____Binutils_6 +
call sub_44BA70  +
nop   +
mov [esp+3Ch+arg_0] ebx +
mov ecx edi +
mov eax esi +
mov [esp+3Ch+arg_4] 0 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4502E0  +
mov eax [esi+84h] +
mov [esp+3Ch+var_18] edx +
mov ecx [eax+2Ch] +
mov eax [edi+14h] +
shr eax 4 +
and eax 1 +
mov [esp+3Ch+var_34] eax +
mov eax [esi+4] +
mov eax [eax+8] +
mov [esp+3Ch+var_3C] edx +
test eax eax +
setz al  +
movzx eax al +
mov [esp+3Ch+var_38] eax +
call ecx  +
mov edx [esp+3Ch+var_18] +
test eax eax +
mov [esp+3Ch+var_1C] eax +
jnz loc_4523DC  +
xor eax eax +
jmp loc_45242B  +
mov [esp+3Ch+var_38] 9ECh +
mov [esp+3Ch+var_3C] offset a____Binutils_6 +
call sub_44BA40  +
jmp loc_4523B6  +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_18] edx +
call sub_459B80  +
test eax eax +
mov ecx eax +
mov [esp+3Ch+var_1C] eax +
jz loc_4524B1  +
mov edx [esp+3Ch+var_18] +
mov eax edx +
sub eax ebp +
cmp ebp 1 +
mov [esp+3Ch+var_18] eax +
jz loc_452566  +
mov [esp+3Ch+var_14] esi +
mov esi [esp+3Ch+var_18] +
mov [esp+3Ch+var_10] edi +
mov edi ebx +
mov ebx ecx +
jmp loc_452512  +
mov esi eax +
mov eax [edi+14h] +
mov [esp+3Ch+var_3C] ebx +
add ebx ebp +
mov [esp+3Ch+var_34] ebp +
mov [esp+3Ch+var_38] eax +
call memcpy  +
mov eax esi +
sub eax ebp +
cmp ebp esi +
jbe loc_452510  +
mov eax esi +
mov ecx ebx +
test eax eax +
mov ebx edi +
mov edi [esp+3Ch+var_10] +
mov [esp+3Ch+var_18] esi +
mov esi [esp+3Ch+var_14] +
jnz loc_45254D  +
mov edx [ebx+0Ch] +
jmp loc_4523DC  +
mov eax [ebx+14h] +
mov edx [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] ecx +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_34] edx +
call memcpy  +
jmp loc_452545  +
mov [esp+3Ch+var_34] edx +
mov eax [ebx+14h] +
mov [esp+3Ch+var_18] edx +
movzx eax byte ptr [eax] +
mov [esp+3Ch+var_3C] ecx +
mov [esp+3Ch+var_38] eax +
call memset  +
mov edx [esp+3Ch+var_18] +
jmp loc_4523DC  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov esi [esp+50h] +
mov ebp [esp+54h] +
mov dword ptr [esp+20h] 0 +
mov ecx [esi+64h] +
mov dword ptr [esi+78h] 0 +
mov dword ptr [esi+7Ch] 0 +
test ecx ecx +
jz loc_4525F0  +
lea esi [esi+0] +
mov eax [ecx+0A0h] +
test eax eax +
jnz loc_4525D6  +
jmp loc_4525E9  +
mov eax [eax] +
test eax eax +
jz loc_4525E9  +
cmp dword ptr [eax+4] 1 +
jnz loc_4525D0  +
mov edx [eax+10h] +
mov eax [eax] +
or byte ptr [edx+18h] 2 +
test eax eax +
jnz loc_4525D6  +
mov ecx [ecx+0Ch] +
test ecx ecx +
jnz loc_4525C0  +
mov ebx [ebp+34h] +
lea edi [esp+20h] +
test ebx ebx +
jnz loc_45260A  +
jmp loc_45262C  +
mov ebx [ebx+9Ch] +
test ebx ebx +
jz loc_45262C  +
mov [esp+0Ch] edi +
mov [esp+8] ebp +
mov [esp+4] ebx +
mov [esp] esi +
call loc_451BB0  +
test eax eax +
jnz loc_452600  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea eax [esp+24h] +
mov [esp+8] eax +
mov dword ptr [esp+4] offset sub_44FE00 +
mov eax [ebp+1Ch] +
mov [esp+24h] ebp +
mov [esp+28h] esi +
mov [esp+2Ch] edi +
mov [esp] eax +
call sub_450810  +
lea edx [esi+7Ch] +
mov ecx edi +
lea eax [esi+78h] +
mov dword ptr [esp] 0 +
call sub_44FD80  +
test eax eax +
jz loc_452622  +
movzx eax byte ptr [ebp+0] +
and eax 3 +
cmp al 2 +
jz loc_45270E  +
mov edi [esi+64h] +
test edi edi +
jz loc_4526EF  +
mov ebx [edi+0A0h] +
test ebx ebx +
jnz loc_4526BC  +
jmp loc_4526E8  +
mov [esp+0Ch] ebx +
mov [esp+8] edi +
mov [esp+4] ebp +
mov [esp] esi +
jb loc_452700  +
sub eax 3 +
cmp eax 1 +
ja loc_452700  +
call loc_452040  +
test eax eax +
jz loc_452622  +
mov ebx [ebx] +
test ebx ebx +
jz loc_4526E8  +
mov eax [ebx+4] +
cmp eax 1 +
jnz loc_452690  +
mov dword ptr [esp+4] 1 +
mov ecx edi +
mov edx ebp +
mov [esp] ebx +
mov eax esi +
call sub_4502E0  +
test eax eax +
jz loc_452622  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4526BC  +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_452681  +
mov eax 1 +
jmp loc_452624  +
***
call sub_452380  +
test eax eax +
jnz loc_4526B6  +
jmp loc_452622  +
***
mov edi [esi+64h] +
test edi edi +
jz loc_4526EF  +
mov [esp+50h] esi +
mov [esp+54h] ebp +
mov ebx [edi+0A0h] +
mov dword ptr [edi+4Ch] 0 +
test ebx ebx +
jnz loc_45273B  +
jmp loc_452780  +
cmp eax 1 +
jz loc_452794  +
mov ebx [ebx] +
test ebx ebx +
jz loc_452750  +
mov eax [ebx+4] +
lea edx [eax-3] +
cmp edx 1 +
ja loc_452730  +
mov ebx [ebx] +
add dword ptr [edi+4Ch] 1 +
test ebx ebx +
jnz loc_45273B  +
mov eax [edi+4Ch] +
test eax eax +
jz loc_452780  +
shl eax 2 +
mov [esp+4] eax +
mov eax [esp+50h] +
mov [esp] eax +
call sub_458A80  +
test eax eax +
mov [edi+48h] eax +
jz loc_452622  +
or dword ptr [edi+14h] 4 +
mov dword ptr [edi+4Ch] 0 +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_45271D  +
mov esi [esp+50h] +
mov ebp [esp+54h] +
jmp loc_45267A  +
***
mov esi [ebx+10h] +
mov edx [esi+94h] +
mov [esp+4] esi +
mov [esp] edx +
mov [esp+1Ch] edx +
call sub_44BB40  +
test eax eax +
js loc_452622  +
mov [esp] eax +
mov [esp+18h] eax +
call sub_459B80  +
mov ecx [esp+18h] +
mov edx [esp+1Ch] +
test eax eax +
mov ebp eax +
jz loc_452823  +
mov eax [edx+78h] +
mov [esp] edx +
mov [esp+8] ebp +
mov [esp+4] esi +
mov [esp+0Ch] eax +
call sub_44BB80  +
mov [esp] ebp +
mov [esp+18h] eax +
call free  +
mov eax [esp+18h] +
test eax eax +
js loc_452622  +
cmp eax [esi+4Ch] +
jz loc_45281B  +
mov dword ptr [esp+4] 79Bh +
mov dword ptr [esp] offset a____Binutils_6 +
call sub_44BA40  +
mov eax [esp+18h] +
add [edi+4Ch] eax +
jmp loc_452735  +
***
test ecx ecx +
jz loc_4527CF  +
jmp loc_452622  +
***
mov ecx [edx+4] +
mov edx [edx] +
sub ecx 3 +
cmp ecx 2 +
adc eax 0 +
test edx edx +
jnz loc_452840  +
retn   +
***
xor eax eax +
retn   +
***
sub esp 1Ch +
mov eax [esp+24h] +
mov dword ptr [esp] offset unk_50FE34 +
mov [esp+8] eax +
mov eax [esp+20h] +
mov [esp+4] eax +
call sub_44E4D0  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_14] 1 +
mov [esp+1Ch+var_1C] offset unk_50FE34 +
mov [esp+1Ch+var_18] eax +
call sub_44E180  +
add esp 1Ch +
retn   +
***
mov [esp+18h+var_14] 8 +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] offset unk_50FE34 +
call sub_44E3F0  +
test eax eax +
jz loc_452910  +
mov edx [esp+18h+arg_4] +
mov [eax+4] edx +
mov edx [ebx+0Ch] +
mov [eax] edx +
mov [ebx+0Ch] eax +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_10] 2Ah +
mov [esp+1Ch+var_14] 10h +
mov [esp+1Ch+var_18] offset sub_44FBF0 +
mov [esp+1Ch+var_1C] offset unk_50FE34 +
call sub_44DE40  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov [esp+1Ch+var_1C] offset unk_50FE34 +
call sub_44DF50  +
add esp 1Ch +
retn   +
***
sub esp 24h +
mov ebx [esp+24h+arg_0] +
mov eax [ebx+14h] +
and eax 0C0000h +
cmp eax 40000h +
jz loc_452A71  +
jbe loc_452A20  +
cmp eax 80000h +
jz loc_4529D5  +
cmp eax 0C0000h +
jnz loc_452A55  +
mov eax [esp+24h+arg_4] +
mov eax [eax+4] +
mov edx [eax+94h] +
test byte ptr [edx+2Ah] 20h +
jz loc_452AA0  +
nop   +
lea esi [esi+0] +
mov [ebx+7Ch] eax +
mov eax 1 +
mov dword ptr [ebx+3Ch] offset off_4BFB90 +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax [esp+24h+arg_4] +
mov eax [eax+4] +
mov edx [eax+94h] +
test byte ptr [edx+2Ah] 20h +
jnz loc_4529C0  +
mov esi [eax+24h] +
cmp [ebx+24h] esi +
jz loc_4529C0  +
mov eax [esp+24h+arg_8] +
mov edx [ebx+94h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+24h+var_1C] ebx +
mov [esp+24h+var_20] edx +
mov [esp+24h+var_24] offset aBDuplicateSect +
call eax  +
mov eax [esp+24h+arg_4] +
mov eax [eax+4] +
jmp loc_4529C0  +
test eax eax +
jnz loc_452A55  +
mov eax [ebx+94h] +
test byte ptr [eax+2Ch] 10h +
mov eax [esp+24h+arg_4] +
mov eax [eax+4] +
jz loc_4529C0  +
mov edx [eax+94h] +
test byte ptr [edx+2Ah] 20h +
jz loc_4529C0  +
mov eax [esp+24h+arg_4] +
mov [eax+4] ebx +
xor eax eax +
jmp loc_4529CF  +
mov [esp+24h+var_1C] offset a_bfd_handle_al +
mov [esp+24h+var_20] 0B4Ah +
mov [esp+24h+var_24] offset a____Binutils_6 +
call sub_44BA70  +
mov eax [esp+24h+arg_8] +
mov edx [ebx+94h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+24h+var_1C] ebx +
mov [esp+24h+var_20] edx +
mov [esp+24h+var_24] offset aBIgnoringDupli +
call eax  +
mov eax [esp+24h+arg_4] +
mov eax [eax+4] +
jmp loc_4529C0  +
mov edx [ebx+24h] +
cmp edx [eax+24h] +
jnz loc_4529F0  +
test edx edx +
jz loc_4529C0  +
mov eax [ebx+94h] +
lea edx [esp+24h+var_C] +
mov [esp+24h+var_1C] edx +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_8] 0 +
mov [esp+24h+var_24] eax +
call sub_44DE10  +
test eax eax +
jnz loc_452B27  +
mov eax [esp+24h+arg_8] +
mov edx [ebx+94h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+24h+var_20] edx +
mov [esp+24h+var_1C] ebx +
mov [esp+24h+var_24] offset aBCouldNotReadC +
call eax  +
mov edx [esp+24h+var_C] +
test edx edx +
jz loc_452B0B  +
mov [esp+24h+var_24] edx +
call free  +
mov eax [esp+24h+var_8] +
test eax eax +
jz loc_452B1B  +
mov [esp+24h+var_24] eax +
call free  +
mov eax [esp+24h+arg_4] +
mov eax [eax+4] +
jmp loc_4529C0  +
mov eax [esp+24h+arg_4] +
lea ecx [esp+24h+var_8] +
mov eax [eax+4] +
mov edx [eax+94h] +
mov [esp+24h+var_1C] ecx +
mov [esp+24h+var_20] eax +
mov [esp+24h+var_24] edx +
call sub_44DE10  +
test eax eax +
jz loc_452B97  +
mov eax [ebx+24h] +
mov esi [esp+24h+var_C] +
mov [esp+24h+var_1C] eax +
mov eax [esp+24h+var_8] +
mov [esp+24h+var_24] esi +
mov [esp+24h+var_20] eax +
call memcmp  +
mov edx esi +
test eax eax +
jz loc_452AFF  +
mov eax [esp+24h+arg_8] +
mov edx [ebx+94h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+24h+var_20] edx +
mov [esp+24h+var_1C] ebx +
mov [esp+24h+var_24] offset aBDuplicateSe_0 +
call eax  +
mov edx [esp+24h+var_C] +
jmp loc_452AFF  +
mov eax [esp+24h+arg_8] +
mov eax [eax+18h] +
mov edx [eax+2Ch] +
mov eax [esp+24h+arg_4] +
mov eax [eax+4] +
mov ecx [eax+94h] +
mov [esp+24h+var_1C] eax +
mov [esp+24h+var_24] offset aBCouldNotReadC +
mov [esp+24h+var_20] ecx +
call edx  +
mov edx [esp+24h+var_C] +
jmp loc_452AFF  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+28h] +
mov eax [ebx+14h] +
test eax 20000h +
jz loc_452BEF  +
test eax 2000000h +
jz loc_452BF8  +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [ebx] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 1 +
mov dword ptr [esp] offset unk_50FE34 +
mov [esp+4] eax +
call sub_44E180  +
mov edx [eax+0Ch] +
mov edi eax +
test edx edx +
jz loc_452C40  +
mov [esp+28h] esi +
mov [esp+20h] ebx +
mov [esp+24h] edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp sub_452970  +
***
mov dword ptr [esp+4] 8 +
mov dword ptr [esp] offset unk_50FE34 +
call sub_44E3F0  +
test eax eax +
jz loc_452C65  +
mov edx [edi+0Ch] +
mov [eax+4] ebx +
mov [eax] edx +
mov [edi+0Ch] eax +
jmp loc_452BEF  +
***
mov eax [esi+18h] +
mov eax [eax+2Ch] +
mov dword ptr [esp] offset aFPAlready_link +
call eax  +
jmp loc_452BEF  +
***
push esi  +
push ebx  +
sub esp 4 +
mov edi [esp+4+arg_4] +
mov esi [esp+4+arg_0] +
mov ecx [edi+10h] +
test ecx ecx +
jz loc_452D8F  +
mov eax ecx +
jmp loc_452CB1  +
cmp [edx+10h] eax +
setz dl  +
test dl dl +
jnz loc_452CC8  +
mov eax [eax+10h] +
test eax eax +
jz loc_452CC8  +
test byte ptr [eax+15h] 80h +
jnz loc_452CAA  +
mov edx [eax+0Ch] +
test edx edx +
jnz loc_452CA0  +
cmp [esi+68h] eax +
setz dl  +
test dl dl +
jz loc_452CAA  +
mov edx [ecx+0Ch] +
nop   +
lea esi [esi+0] +
test edx edx +
jz loc_452CE3  +
mov ecx [edx+14h] +
test ch 80h +
jz loc_452CF0  +
mov edx [edx+0Ch] +
test edx edx +
jnz loc_452CD4  +
test eax eax +
mov edx offset off_4BFB90 +
cmovz eax edx +
jmp loc_452D6A  +
mov ebx [edx+0Ch] +
test ebx ebx +
mov [esp+4+var_4] ebx +
jz loc_452D10  +
mov ebx [esp+4+var_4] +
cmp [ebx+10h] edx +
setz bl  +
mov ebp ebx +
mov ebx ebp +
test bl bl +
jnz loc_452D20  +
mov edx [esp+4+var_4] +
jmp loc_452CD0  +
cmp [esi+68h] edx +
setz bl  +
mov ebp ebx +
mov ebx ebp +
test bl bl +
jz loc_452D0B  +
nop   +
test eax eax +
jz loc_452D68  +
mov esi [eax+14h] +
mov ebx ecx +
xor ebx esi +
test ebx 403h +
jz loc_452D53  +
mov ebx [edi+14h] +
xor ebx ecx +
and ebx 401h +
jnz loc_452D6A  +
and esi 2 +
jz loc_452D68  +
and ecx 2 +
cmovnz eax edx +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test bl 8 +
jnz loc_452D72  +
and ebx 10h +
jz loc_452D83  +
xor ecx [edi+14h] +
and ecx 10h +
cmovz eax edx +
jmp loc_452D6A  +
mov eax edx +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx [edi+14h] +
and ecx 8 +
cmovz eax edx +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esp+4+arg_8] +
cmp [edx+1Ch] edi +
cmovbe eax edx +
jmp loc_452D6A  +
mov eax [edi+94h] +
mov edx [eax+64h] +
xor eax eax +
jmp loc_452CD0  +
***
sub esp 0Ch +
mov ebx [esp+0Ch+arg_0] +
movzx eax byte ptr [ebx+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_452DC0  +
add esp 0Ch +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
mov edx [ebx+14h] +
test edx edx +
jz loc_452DB4  +
mov eax [edx+3Ch] +
test eax eax +
jz loc_452DB4  +
test byte ptr [eax+15h] 80h +
jz loc_452DB4  +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_452E10  +
cmp eax [ecx+10h] +
setnz cl  +
test cl cl +
jz loc_452DB4  +
mov esi [edx+38h] +
add esi [ebx+18h] +
add esi [eax+1Ch] +
mov [ebx+18h] esi +
mov [esp+0Ch+var_8] eax +
mov eax [esp+0Ch+arg_4] +
mov [esp+0Ch+var_4] esi +
mov [esp+0Ch+var_C] eax +
call sub_452C80  +
sub esi [eax+1Ch] +
mov [ebx+14h] eax +
mov [ebx+18h] esi +
jmp loc_452DB4  +
mov esi [esp+0Ch+arg_4] +
cmp eax [esi+68h] +
setnz cl  +
jmp loc_452DE1  +
***
sub esp 1Ch +
mov eax [esp+24h] +
mov edx [esp+20h] +
mov eax [eax+1Ch] +
mov [esp+8] edx +
mov dword ptr [esp+4] offset sub_452DA0 +
mov [esp] eax +
call sub_450810  +
add esp 1Ch +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+38h] +
test esi esi +
jz loc_452E65  +
cmp byte ptr [esi+0Ch] 5 +
jz loc_452E79  +
mov dword ptr [esp+4] 0C49h +
mov dword ptr [esp] offset a____Binutils_6 +
call sub_44BA40  +
mov eax [esi+18h] +
mov [esp+8] eax +
mov eax [esi+14h] +
mov ebp [eax] +
mov ebx [eax+4] +
mov eax [esp+30h] +
mov [esp] eax +
call sub_4537D0  +
mov ecx ebp +
mov edi eax +
shl edi cl +
test edi edi +
jz loc_452F06  +
mov edx edi +
neg edx  +
mov eax edx +
and eax edi +
cmp eax edi +
jz loc_452EC6  +
mov dword ptr [esp+4] 0C52h +
mov dword ptr [esp] offset a____Binutils_6 +
mov [esp+0Ch] edx +
call sub_44BA40  +
mov edx [esp+0Ch] +
mov eax [ebx+24h] +
lea eax [edi+eax-1] +
and eax edx +
cmp ebp [ebx+40h] +
mov [ebx+24h] eax +
jbe loc_452EDA  +
mov [ebx+40h] ebp +
mov ebp [esp+8] +
mov [esi+14h] ebx +
mov [esi+18h] eax +
mov byte ptr [esi+0Ch] 3 +
add ebp eax +
mov eax [ebx+14h] +
mov [ebx+24h] ebp +
and ah 0EFh +
or eax 1 +
mov [ebx+14h] eax +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor edx edx +
jmp loc_452EAA  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebp [esp+3Ch+arg_0] +
test ebp ebp +
jz loc_4530BF  +
mov [esp+3Ch+var_1C] 0 +
mov [esp+3Ch+var_10] 0 +
mov [esp+3Ch+var_20] 0 +
mov [esp+3Ch+var_24] 0 +
mov [esp+3Ch+var_14] 0 +
nop   +
lea esi [esi+0] +
mov ebx [ebp+0Ch] +
test ebx ebx +
jz loc_452FE4  +
lea ebx [ebp+0Ch] +
xor eax eax +
mov [esp+3Ch+var_18] ebx +
jmp loc_452FB9  +
mov esi [eax+4] +
mov edi offset asc_4FE188 +
mov ecx 2 +
cmps   +
mov edi [esp+3Ch+var_1C] +
setb cl  +
setnbe bl  +
sub ebx ecx +
movsx ecx bl +
mov ebx [esp+3Ch+var_24] +
test ecx ecx +
cmovz edi ebp +
mov [esp+3Ch+var_1C] edi +
cmovnz ebx ebp +
mov [esp+3Ch+var_24] ebx +
and edx 2 +
mov ebx [esp+3Ch+var_20] +
movzx edx byte ptr [eax+8] +
cmovnz ebx ebp +
or edx 4 +
mov [eax+8] dl +
and edx 1 +
mov [esp+3Ch+var_20] ebx +
jnz loc_453093  +
mov edx [ebp+38h] +
mov edi [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_3C] eax +
call edx  +
test eax eax +
jz loc_452FE4  +
movzx edx byte ptr [eax+8] +
test dl 1 +
jz loc_452F66  +
mov [esp+3Ch+var_24] ebp +
jmp loc_452F98  +
mov ecx [ebp+1Ch] +
xor eax eax +
lea ebx [ebp+1Ch] +
test ecx ecx +
jz loc_453088  +
mov esi [esp+3Ch+arg_4] +
mov edx [ebp+38h] +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_34] esi +
call edx  +
test eax eax +
jz loc_453088  +
test byte ptr [eax+8] 1 +
jnz loc_453046  +
mov esi [eax+4] +
mov edi offset asc_4FE188 +
mov ecx 2 +
cmps   +
mov edi [esp+3Ch+var_10] +
setb cl  +
setnbe dl  +
sub edx ecx +
mov ecx [esp+3Ch+var_14] +
movsx edx dl +
test edx edx +
cmovz edi ebp +
cmovnz ecx ebp +
mov [esp+3Ch+var_10] edi +
mov [esp+3Ch+var_14] ecx +
jmp loc_452FF4  +
test ebp ebp +
mov eax 1 +
mov [esp+3Ch+var_1C] 0 +
setz dl  +
mov [esp+3Ch+var_24] 0 +
jz loc_4530A7  +
mov eax [esp+3Ch+var_24] +
test eax eax +
jz loc_4530C3  +
mov ebx [esp+3Ch+var_24] +
cmp [esp+3Ch+var_20] ebx +
mov esi [esp+3Ch+arg_8] +
setz al  +
movzx eax al +
mov [esi] eax +
mov eax ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_452F50  +
mov edx [esp+3Ch+var_24] +
mov ebp [esp+3Ch+var_14] +
test edx edx +
setz al  +
test ebp ebp +
setz dl  +
jnz loc_453062  +
test al al +
jz loc_453062  +
mov eax [esp+3Ch+var_1C] +
test eax eax +
mov [esp+3Ch+var_24] eax +
jnz loc_45306A  +
mov ebp [esp+3Ch+var_10] +
test ebp ebp +
jnz loc_4530C7  +
xor eax eax +
jmp loc_453080  +
test dl dl +
jnz loc_4530B7  +
mov eax [esp+3Ch+arg_8] +
mov dword ptr [eax] 1 +
add esp 3Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 2Ch +
lea eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_10] 0 +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_452F10  +
mov eax [esp+2Ch+var_10] +
add esp 2Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov esi [esp+20h] +
mov [esp] esi +
call sub_459B80  +
test eax eax +
mov ebx eax +
jz loc_45313B  +
mov [esp+8] esi +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call memset  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov edx [esp+0Ch] +
xor eax eax +
mov ecx [esp+8] +
mov ebx [edx+0Ch] +
cmp [ecx+0Ch] ebx +
jnz loc_453179  +
mov ebx [edx] +
cmp [ecx] ebx +
jnz loc_453179  +
mov ebx [edx+10h] +
mov eax ecx +
cmp [ecx+10h] ebx +
mov ecx edx +
cmovnb ecx eax +
cmovbe eax ecx +
pop ebx  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edi ds:_stricmp +
mov esi [esp+30h] +
mov ebx [esp+34h] +
mov eax [esi+14h] +
mov [esp] ebx +
mov [esp+4] eax +
call edi  +
test eax eax +
jnz loc_4531B0  +
mov eax [esi+20h] +
test eax eax +
jnz loc_453318  +
mov eax [esi+18h] +
mov [esp] ebx +
mov [esp+4] eax +
call edi  +
test eax eax +
jz loc_453318  +
mov ebp [esi+18h] +
mov dword ptr [esp+4] 3Ah +
mov [esp] ebp +
call strchr  +
test eax eax +
jz loc_4532CC  +
sub eax ebp +
mov [esp+8] eax +
mov [esp+0Ch] eax +
mov [esp+4] ebp +
mov [esp] ebx +
call ds:_strnicmp  +
mov edx [esp+0Ch] +
test eax eax +
jz loc_453384  +
movzx eax byte ptr [ebx] +
mov edx [esi+14h] +
test al al +
jnz loc_453226  +
jmp loc_453331  +
cmp al cl +
jnz loc_45322D  +
add ebx 1 +
movzx eax byte ptr [ebx] +
add edx 1 +
test al al +
jz loc_453331  +
movzx ecx byte ptr [edx] +
test cl cl +
jnz loc_453211  +
cmp al 3Ah +
jz loc_453325  +
movsx edx byte ptr [ebx] +
test dl dl +
jz loc_453331  +
movzx ecx dl +
xor eax eax +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jz loc_45331D  +
add ebx 1 +
lea eax [eax+eax*4] +
lea eax [edx+eax*2-30h] +
movsx edx byte ptr [ebx] +
movzx ecx dl +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jnz loc_453253  +
cmp eax 1CF2h +
mov edx eax +
jz loc_453493  +
jbe loc_453340  +
cmp eax 109AAh +
jz loc_4534AC  +
nop   +
lea esi [esi+0] +
ja loc_4533A3  +
cmp eax 1E46h +
jz loc_453402  +
ja loc_453472  +
cmp eax 1E1Ch +
jz loc_4534E8  +
cmp eax 1E31h +
jnz loc_453539  +
mov ecx 25h +
mov edx 3Dh +
jmp loc_4533D2  +
mov ebp [esi+14h] +
mov [esp] ebp +
call strlen  +
mov [esp+4] ebp +
mov [esp] ebx +
mov [esp+8] eax +
mov [esp+0Ch] eax +
call ds:_strnicmp  +
mov edx [esp+0Ch] +
test eax eax +
jnz loc_453202  +
lea eax [ebx+edx] +
cmp byte ptr [eax] 3Ah +
jz loc_45351C  +
mov edx [esi+18h] +
mov [esp] eax +
mov [esp+4] edx +
call edi  +
test eax eax +
jnz loc_453202  +
mov eax 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
movsx edx byte ptr [ebx+1] +
add ebx 1 +
jmp loc_453238  +
***
mov eax [esi+20h] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp eax 1450h +
jz loc_4534CA  +
jbe loc_45340E  +
cmp eax 14BBh +
jz loc_4533EA  +
lea esi [esi+0] +
ja loc_453452  +
cmp eax 1456h +
jz loc_4533EA  +
cmp eax 14A2h +
jnz loc_453539  +
mov ecx 2 +
mov edx 10h +
jmp loc_4533D2  +
mov eax [esi+18h] +
lea eax [eax+edx+1] +
add edx ebx +
mov [esp+4] eax +
mov [esp] edx +
call edi  +
test eax eax +
jnz loc_453202  +
jmp loc_453318  +
***
cmp eax 109C8h +
jz loc_4533F6  +
lea esi [esi+0] +
ja loc_453430  +
cmp eax 109B4h +
jz loc_4534BB  +
cmp eax 109BEh +
jnz loc_453539  +
mov ecx 2 +
mov edx 5 +
xor eax eax +
cmp [esi+0Ch] ecx +
jnz loc_45331D  +
xor eax eax +
cmp [esi+10h] edx +
setz al  +
jmp loc_45331D  +
***
mov ecx 2 +
mov edx 0Ch +
jmp loc_4533D2  +
***
mov ecx 2 +
mov edx 6 +
jmp loc_4533D2  +
***
mov ecx 25h +
mov edx 40h +
jmp loc_4533D2  +
***
cmp eax 8 +
jbe loc_453506  +
cmp eax 0BB8h +
jz loc_453429  +
cmp eax 0FA0h +
jnz loc_453539  +
mov ecx 8 +
jmp loc_4533D2  +
***
cmp eax 109DCh +
jz loc_4534D9  +
cmp eax 10AECh +
jnz loc_453539  +
mov ecx 2 +
mov edx 8 +
jmp loc_4533D2  +
***
cmp eax 151Fh +
jz loc_4534F7  +
cmp eax 1770h +
jnz loc_453539  +
mov ecx 1Ah +
jmp loc_4533D2  +
***
cmp eax 7D00h +
jz loc_4534A2  +
cmp eax 109A0h +
jnz loc_453539  +
mov ecx 2 +
mov edx 1 +
jmp loc_4533D2  +
***
mov ecx 25h +
mov edx 2Dh +
jmp loc_4533D2  +
***
mov ecx 0Dh +
jmp loc_4533D2  +
***
mov ecx 2 +
mov edx 3 +
jmp loc_4533D2  +
***
mov ecx 2 +
mov edx 4 +
jmp loc_4533D2  +
***
mov ecx 2 +
mov edx 0Ah +
jmp loc_4533D2  +
***
mov ecx 2 +
mov edx 7 +
jmp loc_4533D2  +
***
mov ecx 25h +
mov edx 30h +
jmp loc_4533D2  +
***
mov ecx 2 +
mov edx 12h +
jmp loc_4533D2  +
***
cmp eax 3 +
jnb loc_453510  +
cmp eax 1 +
jnz loc_453539  +
mov edx eax +
mov ecx 2 +
jmp loc_4533D2  +
***
mov eax [esi+18h] +
mov [esp+4] eax +
lea eax [ebx+edx+1] +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_453202  +
jmp loc_453318  +
***
xor eax eax +
nop   +
lea esi [esi+0] +
jmp loc_45331D  +
***
mov eax [esp+arg_0] +
mov eax [eax+84h] +
mov eax [eax+18h] +
retn   +
***
push esi  +
push ebx  +
mov ebx offset unk_504840 +
sub esp 10h +
mov esi [esp+18h+arg_0] +
mov eax [ebx+28h] +
mov [esp+18h+var_14] esi +
mov [esp+18h+var_18] ebx +
call eax  +
test eax eax +
jnz loc_453598  +
mov ebx [ebx+30h] +
test ebx ebx +
jnz loc_453574  +
add edi 4 +
mov ebx [edi] +
test ebx ebx +
jnz loc_453574  +
xor eax eax +
jmp loc_45359A  +
mov eax ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
jmp sub_4535B0  +
***
push ebx  +
xor edx edx +
sub esp 14h +
mov eax [eax+30h] +
mov ebx offset off_4FE3F4 +
lea ecx [edx+1] +
test eax eax +
jz loc_4535DC  +
nop   +
lea esi [esi+0] +
mov eax [eax+30h] +
mov edx ecx +
lea ecx [edx+1] +
test eax eax +
jnz loc_4535D0  +
add ebx 4 +
mov eax [ebx] +
test eax eax +
jnz loc_4535D0  +
lea eax ds:8[edx*4] +
mov [esp+14h+var_14] eax +
call sub_459B80  +
test eax eax +
jz loc_453629  +
mov ecx eax +
mov ebx offset off_4FE3F4 +
mov edx offset unk_504840 +
mov esi [edx+18h] +
add ecx 4 +
mov [ecx-4] esi +
mov edx [edx+30h] +
test edx edx +
jnz loc_453604  +
add ebx 4 +
mov edx [ebx] +
test edx edx +
jnz loc_453604  +
mov dword ptr [ecx] 0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
xor eax eax +
jmp loc_453623  +
***
push ebx  +
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ebx [esp+arg_8] +
mov ecx [eax+84h] +
mov edi [ecx+0Ch] +
test edi edi +
jz loc_45365F  +
mov edi [edx+84h] +
mov esi [edi+0Ch] +
test esi esi +
jnz loc_453687  +
mov ecx eax +
mov eax edx +
mov edx ecx +
test ebx ebx +
jz loc_453670  +
mov eax [edx+84h] +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax+4] +
mov edi offset aBinary +
mov ecx 7 +
mov esi [eax] +
cmps   +
jz loc_453663  +
xor eax eax +
jmp loc_453669  +
mov eax [ecx+24h] +
mov [esp+arg_4] edi +
mov [esp+arg_0] ecx +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
***
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
mov [eax+84h] edx +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+84h] +
mov eax [eax+0Ch] +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+84h] +
mov eax [eax+10h] +
retn   +
***
mov eax [esp+4] +
mov eax [eax+84h] +
mov eax [eax+8] +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+84h] +
mov eax [eax+4] +
retn   +
***
mov eax [esp+arg_0] +
mov eax [eax+84h] +
retn   +
***
mov edx [esp+arg_0] +
mov ecx [esp+arg_4] +
mov ebx offset off_4FE3F4 +
jmp loc_45371C  +
mov eax [eax+30h] +
test eax eax +
jz loc_453734  +
cmp [eax+0Ch] edx +
jnz loc_453715  +
cmp [eax+10h] ecx +
jz loc_453732  +
test ecx ecx +
jnz loc_453715  +
cmp dword ptr [eax+20h] 0 +
nop   +
jz loc_453715  +
pop ebx  +
retn   +
add ebx 4 +
mov eax [ebx] +
test eax eax +
jnz loc_45371C  +
xor eax eax +
pop ebx  +
retn   +
***
jmp sub_453750  +
***
mov eax [esp+18h+arg_8] +
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_14] eax +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] eax +
call sub_453700  +
mov edx eax +
test edx edx +
mov [ebx+84h] eax +
mov eax 1 +
jz loc_453782  +
add esp 18h +
pop ebx  +
retn   +
mov dword ptr [ebx+84h] offset asc_4FE3C0 +
mov [esp+18h+var_18] 11h +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
sub esp 8 +
mov eax [esp+10h] +
mov [esp+4] eax +
mov eax [esp+0Ch] +
mov [esp] eax +
call sub_453700  +
test eax eax +
jz loc_4537C2  +
mov eax [eax+18h] +
add esp 8 +
retn   +
***
mov eax offset aUnknown +
add esp 8 +
retn   +
***
sub esp 8 +
mov eax [esp+8+arg_0] +
mov eax [eax+84h] +
mov edx [eax+10h] +
mov [esp+8+var_4] edx +
mov eax [eax+0Ch] +
mov [esp+8+var_8] eax +
call sub_453700  +
test eax eax +
jz loc_453805  +
mov eax [eax+8] +
test eax eax +
lea edx [eax+7] +
cmovs eax edx +
add esp 8 +
sar eax 3 +
retn   +
mov eax 1 +
add esp 8 +
retn   +
***
sub esp 8 +
mov eax [esp+8+arg_4] +
mov [esp+8+var_4] eax +
mov eax [esp+8+arg_0] +
mov [esp+8+var_8] eax +
call sub_453700  +
test eax eax +
jz loc_453840  +
mov eax [eax+8] +
test eax eax +
lea edx [eax+7] +
cmovs eax edx +
add esp 8 +
sar eax 3 +
retn   +
mov eax 1 +
add esp 8 +
retn   +
***
push esi  +
push ebx  +
sub esp 8Ch +
mov eax [esp+8Ch+arg_8] +
mov ebx [esp+8Ch+arg_0] +
test eax eax +
jz loc_453879  +
mov eax [esp+8Ch+arg_8] +
mov dword ptr [eax] 0 +
movzx eax byte ptr [ebx+28h] +
test al 8 +
jz loc_453C70  +
and eax 7 +
cmp al 3 +
ja loc_453C70  +
test al al +
jnz loc_453DD0  +
mov eax [esp+8Ch+arg_8] +
test eax eax +
jz loc_453DFB  +
mov eax ds:dword_4EDD70 +
shl eax 3 +
mov [esp+8Ch+var_8C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_453D63  +
movzx eax byte ptr [ebx+28h] +
movzx edx byte ptr [esp+8Ch+arg_4] +
mov [esp+8Ch+var_44] 0 +
and eax 0FFFFFFF8h +
and edx 7 +
or eax edx +
mov [ebx+28h] al +
mov eax [ebx+4] +
test byte ptr [ebx+2Bh] 1 +
mov [esp+8Ch+var_70] eax +
jz loc_453C89  +
mov eax ds:dword_4EDD70 +
mov edi off_4BFA14 +
mov [esp+8Ch+var_50] eax +
mov eax [edi] +
test eax eax +
jz loc_453FE8  +
xor esi esi +
mov ecx 100h +
lea edx [ebx+48h] +
mov [esp+8Ch+var_60] esi +
mov esi ecx +
mov [esp+8Ch+var_64] 0 +
mov [esp+8Ch+var_6C] 0 +
mov [esp+8Ch+var_5C] 0 +
mov [esp+8Ch+var_54] 0 +
mov [esp+8Ch+var_58] edx +
mov [esp+8Ch+var_68] ebp +
jmp loc_453951  +
add edi 4 +
mov eax [edi] +
test eax eax +
jz loc_453AFF  +
cmp eax offset off_504100 +
jz loc_453944  +
test byte ptr [ebx+2Bh] 1 +
jnz loc_453964  +
cmp [esp+8Ch+var_70] eax +
jz loc_453944  +
movzx eax byte ptr [eax+1Bh] +
cmp eax esi +
jg loc_453944  +
and dword ptr [ebx+28h] 0FFF9001Fh +
mov dword ptr [ebx+0A0h] 0 +
mov dword ptr [ebx+84h] offset asc_4FE3C0 +
mov [esp+8Ch+var_8C] ebx +
call sub_44D460  +
mov eax [edi] +
mov [ebx+4] eax +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_88] 0 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_8C] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_453DC1  +
mov [esp+8Ch+var_8C] 3 +
call sub_44BAF0  +
movzx eax byte ptr [ebx+28h] +
mov ecx [ebx+4] +
and eax 7 +
mov eax [ecx+eax*4+64h] +
mov [esp+8Ch+var_8C] ebx +
call eax  +
test eax eax +
mov ebp eax +
jz loc_453DB3  +
mov eax [esp+8Ch+var_44] +
test eax eax +
jz loc_453A01  +
lea eax [esp+8Ch+var_28] +
mov [esp+8Ch+var_8C] eax +
call sub_44DF50  +
mov [esp+8Ch+var_44] 0 +
movzx eax byte ptr [ebx+28h] +
and eax 7 +
cmp al 2 +
jz loc_453D80  +
cmp off_4BFA0C ebp +
jz loc_453FC5  +
mov eax [esp+8Ch+var_68] +
test eax eax +
jz loc_453A2B  +
mov ecx [esp+8Ch+var_6C] +
mov [eax+ecx*4] ebp +
movzx eax byte ptr [ebp+1Bh] +
add [esp+8Ch+var_6C] 1 +
cmp eax esi +
jl loc_453D70  +
add [esp+8Ch+var_64] 1 +
mov [esp+8Ch+var_60] ebp +
mov eax [ebx+0A0h] +
mov [esp+8Ch+var_40] eax +
mov eax [ebx+84h] +
mov [esp+8Ch+var_38] eax +
mov eax [ebx+28h] +
shr eax 5 +
and eax 3FFFFh +
mov [esp+8Ch+var_3C] eax +
mov eax [ebx+64h] +
mov [esp+8Ch+var_34] eax +
mov eax [ebx+68h] +
mov [esp+8Ch+var_30] eax +
mov eax [ebx+6Ch] +
mov [esp+8Ch+var_2C] eax +
mov eax [ebx+48h] +
mov [esp+8Ch+var_28] eax +
mov eax [ebx+4Ch] +
mov [esp+8Ch+var_24] eax +
mov eax [ebx+50h] +
mov [esp+8Ch+var_20] eax +
mov eax [ebx+54h] +
mov [esp+8Ch+var_1C] eax +
mov eax [ebx+58h] +
mov [esp+8Ch+var_18] eax +
mov eax [ebx+5Ch] +
mov [esp+8Ch+var_14] eax +
mov eax [ebx+60h] +
mov [esp+8Ch+var_88] 1 +
mov [esp+8Ch+var_8C] ebx +
mov [esp+8Ch+var_10] eax +
call sub_458A80  +
test eax eax +
mov [esp+8Ch+var_44] eax +
jz loc_453DC1  +
mov eax [esp+8Ch+var_58] +
mov [esp+8Ch+var_84] 0B8h +
mov [esp+8Ch+var_88] offset sub_44D350 +
mov [esp+8Ch+var_8C] eax +
call sub_44DF20  +
test eax eax +
jz loc_453DC1  +
add edi 4 +
mov eax [edi] +
mov [esp+8Ch+var_5C] ebp +
test eax eax +
jnz loc_453951  +
cmp [esp+8Ch+var_64] 1 +
mov ebp [esp+8Ch+var_68] +
mov [esp+8Ch+var_68] esi +
mov esi [esp+8Ch+var_60] +
jz loc_453E49  +
mov eax [esp+8Ch+var_6C] +
test eax eax +
jnz loc_453F80  +
mov eax [esp+8Ch+var_54] +
cmp eax off_4BFA0C +
jz loc_453FD7  +
mov eax [esp+8Ch+var_50] +
sub eax ds:dword_4EDD70 +
cmp eax 1 +
mov [esp+8Ch+var_6C] eax +
jg loc_453E56  +
cmp [esp+8Ch+var_6C] 1 +
jle loc_454026  +
mov [esp+8Ch+arg_0] ebx +
mov ecx off_4BFA08 +
mov edi [esp+8Ch+var_6C] +
mov ebx [esp+8Ch+var_68] +
lea esi [esi+0] +
add ecx 4 +
mov esi [ecx-4] +
test esi esi +
jz loc_453E11  +
mov eax edi +
sub eax 1 +
js loc_453B70  +
cmp [ebp+eax*4+0] esi +
jnz loc_453B80  +
movzx edx byte ptr [esi+1Bh] +
cmp ebx edx +
jl loc_453B80  +
mov ebx [esp+8Ch+arg_0] +
mov [esp+8Ch+var_6C] 1 +
mov edi [esp+8Ch+var_44] +
test edi edi +
jz loc_453C45  +
lea eax [ebx+48h] +
mov [esp+8Ch+var_8C] eax +
call sub_44DF50  +
mov eax [esp+8Ch+var_40] +
mov edx [esp+8Ch+var_3C] +
mov [ebx+0A0h] eax +
mov eax [esp+8Ch+var_38] +
and edx 3FFFFh +
shl edx 5 +
mov [ebx+84h] eax +
mov eax [ebx+28h] +
and eax 0FF80001Fh +
or eax edx +
mov [ebx+28h] eax +
mov eax [esp+8Ch+var_28] +
mov [ebx+48h] eax +
mov eax [esp+8Ch+var_24] +
mov [ebx+4Ch] eax +
mov eax [esp+8Ch+var_20] +
mov [ebx+50h] eax +
mov eax [esp+8Ch+var_1C] +
mov [ebx+54h] eax +
mov eax [esp+8Ch+var_18] +
mov [ebx+58h] eax +
mov eax [esp+8Ch+var_14] +
mov [ebx+5Ch] eax +
mov eax [esp+8Ch+var_10] +
mov [ebx+60h] eax +
mov eax [esp+8Ch+var_34] +
mov [ebx+64h] eax +
mov eax [esp+8Ch+var_30] +
mov [ebx+68h] eax +
mov eax [esp+8Ch+var_2C] +
mov [ebx+6Ch] eax +
mov eax [esp+8Ch+var_44] +
mov [esp+8Ch+var_8C] ebx +
mov [esp+8Ch+var_88] eax +
call sub_458CD0  +
mov [esp+8Ch+var_44] 0 +
cmp [esp+8Ch+var_6C] 1 +
jz loc_453E83  +
mov ecx [esp+8Ch+var_6C] +
test ecx ecx +
jnz loc_453F23  +
mov [esp+8Ch+var_8C] 0Ch +
call sub_44BAF0  +
jmp loc_453CB1  +
mov [esp+8Ch+var_8C] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_88] 0 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_8C] ebx +
call sub_46FCE0  +
test eax eax +
jz loc_453F89  +
mov eax [esp+8Ch+var_70] +
and byte ptr [ebx+28h] 0F8h +
test ebp ebp +
mov [ebx+4] eax +
jz loc_453CC8  +
mov [esp+8Ch+var_8C] ebp +
call free  +
mov edx [esp+8Ch+var_44] +
test edx edx +
jz loc_453D63  +
lea eax [ebx+48h] +
mov [esp+8Ch+var_8C] eax +
call sub_44DF50  +
mov eax [esp+8Ch+var_40] +
mov edx [esp+8Ch+var_3C] +
mov [ebx+0A0h] eax +
mov eax [esp+8Ch+var_38] +
and edx 3FFFFh +
shl edx 5 +
mov [ebx+84h] eax +
mov eax [ebx+28h] +
and eax 0FF80001Fh +
or eax edx +
mov [ebx+28h] eax +
mov eax [esp+8Ch+var_28] +
mov [ebx+48h] eax +
mov eax [esp+8Ch+var_24] +
mov [ebx+4Ch] eax +
mov eax [esp+8Ch+var_20] +
mov [ebx+50h] eax +
mov eax [esp+8Ch+var_1C] +
mov [ebx+54h] eax +
mov eax [esp+8Ch+var_18] +
mov [ebx+58h] eax +
mov eax [esp+8Ch+var_14] +
mov [ebx+5Ch] eax +
mov eax [esp+8Ch+var_10] +
mov [ebx+60h] eax +
mov eax [esp+8Ch+var_34] +
mov [ebx+64h] eax +
mov eax [esp+8Ch+var_30] +
mov [ebx+68h] eax +
mov eax [esp+8Ch+var_2C] +
mov [ebx+6Ch] eax +
mov eax [esp+8Ch+var_44] +
mov [esp+8Ch+var_8C] ebx +
mov [esp+8Ch+var_88] eax +
call sub_458CD0  +
xor eax eax +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi eax +
mov [esp+8Ch+var_64] 1 +
jmp loc_453A41  +
test byte ptr [ebx+2Bh] 20h +
jnz loc_453DEB  +
mov eax [esp+8Ch+var_54] +
cmp off_4BFA0C eax +
jz loc_453D98  +
mov eax [edi] +
mov [esp+8Ch+var_54] eax +
mov edx [esp+8Ch+var_68] +
test edx edx +
jz loc_453DA9  +
mov eax [edi] +
mov ecx [esp+8Ch+var_50] +
mov [edx+ecx*4] eax +
add [esp+8Ch+var_50] 1 +
jmp loc_453A45  +
call sub_44B8A0  +
cmp eax 3 +
jz loc_453944  +
mov ebp [esp+8Ch+var_68] +
jmp loc_453CB1  +
movzx eax al +
cmp eax [esp+8Ch+arg_4] +
setz al  +
add esp 8Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_44B8A0  +
cmp eax 4 +
jnz loc_453A10  +
jmp loc_453D86  +
mov eax off_4BFA08 +
mov eax [eax] +
test eax eax +
jnz loc_4538A7  +
xor ebp ebp +
jmp loc_4538C1  +
test ebp ebp +
mov ebx [esp+8Ch+arg_0] +
jz loc_453BA2  +
mov eax [esp+8Ch+var_64] +
mov edi [esp+8Ch+var_6C] +
cmp edi eax +
jz loc_453BA2  +
mov ecx [esp+8Ch+var_68] +
xor eax eax +
mov esi [ebp+eax*4+0] +
movzx edx byte ptr [esi+1Bh] +
cmp ecx edx +
jge loc_453E49  +
add eax 1 +
cmp eax edi +
jl loc_453E36  +
mov [esp+8Ch+var_6C] 1 +
jmp loc_453BA2  +
test ebp ebp +
jz loc_453B49  +
lea edx ds:0[eax*4] +
mov eax ds:dword_4EDD70 +
mov [esp+8Ch+var_84] edx +
mov [esp+8Ch+var_8C] ebp +
lea eax [ebp+eax*4+0] +
mov [esp+8Ch+var_88] eax +
call memcpy  +
jmp loc_453B54  +
cmp [esp+8Ch+var_5C] esi +
mov [ebx+4] esi +
jz loc_453EF2  +
and dword ptr [ebx+28h] 0FFF9001Fh +
mov dword ptr [ebx+0A0h] 0 +
mov dword ptr [ebx+84h] offset asc_4FE3C0 +
mov [esp+8Ch+var_8C] ebx +
call sub_44D460  +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_88] 0 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_8C] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_453CB1  +
movzx edx byte ptr [ebx+28h] +
mov eax [ebx+4] +
and edx 7 +
mov eax [eax+edx*4+64h] +
mov [esp+8Ch+var_8C] ebx +
call eax  +
test eax eax +
jz loc_45400D  +
movzx eax byte ptr [ebx+28h] +
and eax 18h +
cmp al 18h +
jz loc_453FCE  +
test ebp ebp +
mov eax 1 +
jz loc_453C7E  +
mov [esp+8Ch+var_8C] ebp +
mov [esp+8Ch+var_70] eax +
call free  +
mov eax [esp+8Ch+var_70] +
jmp loc_453C7E  +
mov eax [esp+8Ch+var_70] +
and byte ptr [ebx+28h] 0F8h +
mov [ebx+4] eax +
mov [esp+8Ch+var_8C] 0Dh +
call sub_44BAF0  +
mov eax [esp+8Ch+arg_8] +
test eax eax +
jz loc_453D63  +
mov eax [esp+8Ch+arg_8] +
mov [eax] ebp +
mov eax [esp+8Ch+var_6C] +
mov dword ptr [ebp+eax*4+0] 0 +
sub eax 1 +
js loc_453D63  +
mov edx [ebp+eax*4+0] +
mov edx [edx] +
mov [ebp+eax*4+0] edx +
sub eax 1 +
cmp eax 0FFFFFFFFh +
jnz loc_453F67  +
xor eax eax +
jmp loc_453D65  +
mov [esp+8Ch+var_54] esi +
jmp loc_453B49  +
movzx edx byte ptr [ebx+28h] +
mov eax [ebx+4] +
and edx 7 +
mov eax [eax+edx*4+64h] +
mov [esp+8Ch+var_8C] ebx +
call eax  +
test eax eax +
jnz loc_453EF2  +
cmp [esp+8Ch+arg_4] 2 +
jnz loc_4538F1  +
cmp [esp+8Ch+var_70] offset off_504100 +
jnz loc_4538F1  +
jmp loc_453C5C  +
mov ebp [esp+8Ch+var_68] +
jmp loc_453EF2  +
or byte ptr [ebx+2Bh] 10h +
jmp loc_453F01  +
mov esi [esp+8Ch+var_54] +
mov [esp+8Ch+var_6C] 1 +
jmp loc_453BA2  +
mov [esp+8Ch+var_68] 100h +
mov [esp+8Ch+var_54] 0 +
mov [esp+8Ch+var_64] 0 +
mov [esp+8Ch+var_5C] 0 +
jmp loc_453B22  +
mov [esp+8Ch+var_88] 1B5h +
mov [esp+8Ch+var_8C] offset a____Binutils_1 +
call sub_44BA40  +
jmp loc_453EF2  +
mov esi [esp+8Ch+var_54] +
jmp loc_453BA2  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_453850  +
add esp 1Ch +
retn   +
***
mov ebx [esp+18h+arg_0] +
movzx eax byte ptr [ebx+28h] +
test al 8 +
jnz loc_454090  +
mov edx eax +
and edx 7 +
cmp dl 3 +
ja loc_454090  +
test dl dl +
jz loc_4540A3  +
xor eax eax +
movzx edx dl +
cmp edx [esp+18h+arg_4] +
setz al  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
movzx edx byte ptr [esp+18h+arg_4] +
and eax 0FFFFFFF8h +
and edx 7 +
or eax edx +
movzx edx dl +
mov [ebx+28h] al +
mov eax [ebx+4] +
mov eax [eax+edx*4+74h] +
mov [esp+18h+var_18] ebx +
call eax  +
mov edx eax +
mov eax 1 +
test edx edx +
jnz loc_45409E  +
and byte ptr [ebx+28h] 0F8h +
add esp 18h +
xor al al +
pop ebx  +
retn   +
***
mov eax [esp+4] +
mov eax [eax] +
retn   +
***
mov eax [esp+4] +
mov ecx [esp+8] +
mov edx [eax] +
mov eax [eax+4] +
xor eax [ecx+4] +
xor edx [ecx] +
or edx eax +
setz al  +
movzx eax al +
retn   +
***
sub esp 1Ch +
lea eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call j__vsnprintf  +
add esp 1Ch +
retn   +
***
jmp calloc  +
***
sub esp 18h +
xor edx edx +
test byte ptr [ebx+2Bh] 1 +
jnz loc_454193  +
mov edx [ebx+4] +
mov edx [edx] +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call sub_4585B0  +
test eax eax +
jz loc_4541C9  +
movzx edx byte ptr [ebx+2Ch] +
movzx ecx byte ptr [eax+2Ch] +
and edx 10h +
and ecx 0FFFFFFEFh +
or ecx edx +
movzx edx byte ptr [eax+2Bh] +
mov [eax+2Ch] cl +
movzx ecx byte ptr [ebx+2Bh] +
and edx 0FFFFFFF7h +
and ecx 8 +
or edx ecx +
mov [eax+2Bh] dl +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 2Ch +
mov ebp [eax+0A0h] +
mov eax [eax+4] +
mov eax [eax+0ECh] +
mov [esp+30h+var_30] esi +
call eax  +
test eax eax +
jz loc_454201  +
mov ebx [eax+4] +
mov [esp+30h+var_30] eax +
call free  +
cmp ebx 3 +
ja loc_454210  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+30h+var_2C] ebx +
mov [esp+30h+var_30] esi +
call sub_458B60  +
test eax eax +
mov edi eax +
jz loc_454201  +
mov [esp+30h+var_28] esi +
mov [esp+30h+var_2C] ebx +
mov [esp+30h+var_30] eax +
call sub_46FAD0  +
cmp eax ebx +
jz loc_454260  +
call sub_44B8A0  +
cmp eax 1 +
nop   +
jz loc_45424E  +
mov [esp+30h+var_30] 0Ah +
call sub_44BAF0  +
mov [esp+30h+var_2C] edi +
mov [esp+30h+var_30] esi +
call sub_458CD0  +
jmp loc_454201  +
mov [esp+30h+var_20] eax +
mov eax [esi+4] +
mov eax [eax+4Ch] +
mov [esp+30h+var_30] edi +
call eax  +
mov ecx [esp+30h+var_20] +
sub ecx 4 +
shr eax 3 +
lea edx ds:0[eax*8] +
cmp edx ecx +
mov [ebp+14h] eax +
ja loc_454373  +
shl eax 4 +
add edi 4 +
mov dword ptr [ebp+8] 0 +
lea edx [edi+edx+4] +
mov [esp+30h+var_2C] eax +
mov [esp+30h+var_30] esi +
mov [esp+30h+var_18] edx +
call sub_458A80  +
test eax eax +
mov ebx eax +
mov [ebp+10h] eax +
jz loc_454201  +
mov eax [ebp+14h] +
xor edx edx +
test eax eax +
jz loc_454310  +
mov [esp+30h+var_20] ebp +
mov ebp esi +
mov esi edx +
lea esi [esi+0] +
mov eax [ebp+4] +
add esi 1 +
add ebx 10h +
mov eax [eax+4Ch] +
mov [esp+30h+var_30] edi +
call eax  +
lea ecx [edi+4] +
add edi 8 +
add eax [esp+30h+var_18] +
mov [ebx-10h] eax +
mov eax [ebp+4] +
mov eax [eax+4Ch] +
mov [esp+30h+var_30] ecx +
call eax  +
mov dword ptr [ebx-4] 0 +
mov [ebx-8] eax +
mov eax [esp+30h+var_20] +
cmp [eax+14h] esi +
ja loc_4542D0  +
mov esi ebp +
mov ebp eax +
mov [esp+30h+var_30] esi +
call sub_46FC00  +
mov [esp+30h+var_1C] edx +
mov edi [esp+30h+var_1C] +
mov [esp+30h+var_20] eax +
sar edi 1Fh +
mov eax edi +
sar eax 1Fh +
mov [esp+30h+var_14] eax +
mov eax [esp+30h+var_20] +
mov [esp+30h+var_18] edi +
mov edx [esp+30h+var_14] +
xor eax edi +
mov ecx eax +
mov ebx edx +
sub ecx [esp+30h+var_18] +
and ecx 1 +
mov eax ecx +
xor eax edi +
mov ecx eax +
mov eax [esp+30h+var_18] +
sub ecx eax +
mov eax 1 +
sbb ebx edx +
add ecx [esp+30h+var_20] +
adc ebx [esp+30h+var_1C] +
mov [ebp+0] ecx +
mov [ebp+4] ebx +
or byte ptr [esi+2Bh] 20h +
jmp loc_454203  +
mov [esp+30h+var_30] 3 +
call sub_44BAF0  +
jmp loc_45424E  +
***
push edi  +
mov edi edx +
push esi  +
push ebx  +
sub esp 3Ch +
mov [esp+48h+var_20] edx +
call sub_4AC470  +
mov [esp+48h+var_48] ebp +
mov [esp+48h+var_1C] eax +
call sub_4A95A0  +
mov [esp+48h+var_48] edi +
test eax eax +
cmovnz ebp eax +
mov [esp+48h+var_28] eax +
call sub_4A95A0  +
test eax eax +
mov [esp+48h+var_24] eax +
cmovnz edi eax +
lea esi [esi+0] +
movzx eax byte ptr [ebp+0] +
mov ebx ebp +
test al al +
jnz loc_4543EE  +
jmp loc_4543F2  +
cmp al 2Fh +
jz loc_4543F2  +
add ebx 1 +
movzx eax byte ptr [ebx] +
test al al +
jz loc_4543F2  +
cmp al 5Ch +
jnz loc_4543E0  +
movzx ecx byte ptr [edi] +
test cl cl +
jz loc_45453D  +
cmp cl 5Ch +
jz loc_4545B9  +
cmp cl 2Fh +
mov esi edi +
jnz loc_454427  +
lea esi [esi+0] +
jmp loc_4545B9  +
cmp dl 5Ch +
jz loc_4545C0  +
cmp dl 2Fh +
jz loc_4545C0  +
add esi 1 +
movzx edx byte ptr [esi] +
test dl dl +
jnz loc_454415  +
mov [esp+48h+var_48] ebp +
mov [esp+48h+var_2C] ecx +
call strlen  +
mov ecx [esp+48h+var_2C] +
lea esi [eax+1] +
mov eax [esp+48h+var_20] +
xor edx edx +
xor ebx ebx +
add eax 1 +
nop   +
cmp cl 5Ch +
jz loc_45445A  +
cmp cl 2Fh +
jnz loc_45446B  +
cmp edi eax +
jbe loc_454468  +
cmp byte ptr [edi-1] 2Eh +
jz loc_45452B  +
add ebx 1 +
add edi 1 +
movzx ecx byte ptr [edi] +
test cl cl +
jnz loc_454450  +
lea eax [ebx+ebx*2] +
add esi eax +
test edx edx +
mov [esp+48h+var_2C] edx +
jz loc_454614  +
mov edi [esp+48h+var_1C] +
mov [esp+48h+var_48] edi +
call strlen  +
mov edx [esp+48h+var_2C] +
mov ecx edi +
lea edi [edi+eax-1] +
cmp ecx edi +
setb cl  +
test edx edx +
jz loc_4544BF  +
test cl cl +
jz loc_4544BF  +
movzx eax byte ptr [edi] +
jmp loc_4544B4  +
cmp al 2Fh +
jz loc_4544B8  +
cmp al 5Ch +
jnz loc_4544B0  +
sub edx 1 +
test edx edx +
jnz loc_4544A5  +
test edx edx +
jnz loc_4545FB  +
mov [esp+48h+var_48] edi +
call strlen  +
lea esi [esi+eax+1] +
cmp esi ds:dword_50FE54 +
jbe loc_454554  +
mov eax ds:dword_50FE50 +
test eax eax +
jz loc_4544EC  +
mov [esp+48h+var_48] eax +
call free  +
mov [esp+48h+var_48] esi +
mov ds:dword_50FE54 0 +
call sub_459B80  +
test eax eax +
mov ds:dword_50FE50 eax +
jz loc_4545F7  +
test ebx ebx +
mov ds:dword_50FE54 esi +
mov esi eax +
jnz loc_45455E  +
test edi edi +
mov eax esi +
jnz loc_454579  +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] eax +
call strcpy  +
jmp loc_454597  +
cmp byte ptr [edi-2] 2Eh +
jnz loc_454468  +
add edx 1 +
jmp loc_45446B  +
mov [esp+48h+var_48] ebp +
call strlen  +
lea esi [eax+1] +
xor ebx ebx +
xor edi edi +
cmp esi ds:dword_50FE54 +
ja loc_4544DB  +
test ebx ebx +
mov esi ds:dword_50FE50 +
jz loc_454517  +
mov edx ebx +
mov eax esi +
mov dword ptr [eax] 2F2E2Eh +
add eax 3 +
sub edx 1 +
jnz loc_454562  +
lea eax [ebx+ebx*2] +
add eax esi +
test edi edi +
jz loc_45451D  +
mov [esp+48h+var_3C] ebp +
mov [esp+48h+var_40] edi +
mov [esp+48h+var_44] offset aSS_23 +
mov [esp+48h+var_48] eax +
call sprintf  +
mov esi ds:dword_50FE50 +
mov eax [esp+48h+var_28] +
mov [esp+48h+var_48] eax +
call free  +
mov eax [esp+48h+var_24] +
mov [esp+48h+var_48] eax +
call free  +
add esp 3Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi edi +
nop   +
lea esi [esi+0] +
test al al +
jz loc_454431  +
mov eax ebx +
mov edx esi +
sub eax ebp +
sub edx edi +
cmp eax edx +
jnz loc_454431  +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_44] edi +
mov [esp+48h+var_48] ebp +
call sub_4A8BC0  +
test eax eax +
jnz loc_45461B  +
lea ebp [ebx+1] +
lea edi [esi+1] +
jmp loc_4543D0  +
xor esi esi +
jmp loc_454597  +
mov [esp+48h+var_44] 5F3h +
mov [esp+48h+var_48] offset a____Binutil_20 +
call sub_44BA40  +
jmp loc_4544C7  +
xor edi edi +
jmp loc_45454C  +
mov [esp+48h+var_48] ebp +
nop   +
call strlen  +
movzx ecx byte ptr [edi] +
test cl cl +
lea esi [eax+1] +
jz loc_454548  +
jmp loc_454444  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov eax [eax] +
mov eax [eax+8] +
mov [esp+1Ch+var_1C] eax +
call sub_4587E0  +
mov eax 1 +
add esp 1Ch +
retn   +
***
push ebx  +
sub esp 10h +
mov eax [esp+10h+arg_C] +
mov [esp+10h+var_C] 14h +
mov esi [esp+10h+arg_4] +
mov [esp+10h+var_10] offset unk_50FE6D +
mov edi [esp+10h+arg_0] +
mov [esp+10h+var_4] eax +
mov eax [esp+10h+arg_8] +
mov [esp+10h+var_8] eax +
call sub_454140  +
mov [esp+10h+var_10] offset unk_50FE6D +
call strlen  +
cmp eax esi +
mov ebx eax +
jb loc_4546C0  +
mov [esp+10h+arg_8] esi +
mov [esp+10h+arg_0] edi +
mov [esp+10h+arg_4] offset unk_50FE6D +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp memcpy  +
mov [esp+10h+var_10] edi +
sub esi ebx +
add ebx edi +
mov [esp+10h+var_8] eax +
mov [esp+10h+var_C] offset unk_50FE6D +
call memcpy  +
mov [esp+10h+arg_8] esi +
mov [esp+10h+arg_0] ebx +
mov [esp+10h+arg_4] 20h +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp memset  +
***
push ebx  +
sub esp 10h +
mov eax [esp+10h+arg_8] +
mov [esp+10h+var_8] offset a10lu +
mov esi [esp+10h+arg_4] +
mov [esp+10h+var_C] 15h +
mov edi [esp+10h+arg_0] +
mov [esp+10h+var_10] offset unk_50FE58 +
mov [esp+10h+var_4] eax +
call sub_454140  +
mov [esp+10h+var_10] offset unk_50FE58 +
call strlen  +
cmp eax esi +
mov ebx eax +
ja loc_4547A0  +
jb loc_454766  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_10] edi +
mov [esp+10h+var_C] offset unk_50FE58 +
call memcpy  +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_10] edi +
sub esi ebx +
add ebx edi +
mov [esp+10h+var_8] eax +
mov [esp+10h+var_C] offset unk_50FE58 +
call memcpy  +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_10] ebx +
mov [esp+10h+var_C] 20h +
call memset  +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_10] 13h +
call sub_44BAF0  +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+4] 38h +
mov [esp] ebx +
call sub_458B60  +
test eax eax +
mov [ebx+0A0h] eax +
setnz al  +
add esp 18h +
movzx eax al +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax [esp+20h] +
test byte ptr [eax+2Bh] 20h +
jz loc_454822  +
mov edx [esp+24h] +
lea ecx [edx+1] +
xor edx edx +
cmp dword ptr [esp+24h] 0FFFFFFFFh +
cmovnz edx ecx +
mov ecx [eax+0A0h] +
mov eax 0FFFFFFFFh +
cmp edx [ecx+14h] +
jb loc_454837  +
add esp 1Ch +
retn   +
***
mov dword ptr [esp] 5 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
mov eax edx +
shl eax 4 +
add eax [ecx+10h] +
mov ecx [esp+28h] +
mov [ecx] eax +
mov eax edx +
add esp 1Ch +
retn   +
***
jmp sub_458360  +
***
mov eax [esp+4] +
mov edx [esp+8] +
mov [eax+94h] edx +
mov eax 1 +
retn   +
***
mov ebx [esp+28h+arg_0] +
mov edx [esp+28h+arg_8] +
mov eax [ebx+0A0h] +
mov ecx [eax+8] +
mov eax [esp+28h+arg_4] +
mov [esp+28h+var_14] edx +
test ecx ecx +
mov [esp+28h+var_18] eax +
jz loc_4548D4  +
lea eax [esp+28h+var_18] +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] ecx +
call sub_4A7B20  +
test eax eax +
jz loc_4548D4  +
mov eax [eax+8] +
movzx ecx byte ptr [ebx+2Bh] +
movzx edx byte ptr [eax+2Bh] +
and ecx 8 +
and edx 0FFFFFFF7h +
or edx ecx +
mov [eax+2Bh] dl +
add esp 28h +
pop ebx  +
retn   +
xor eax eax +
jmp loc_4548CF  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_8] +
mov eax [ebx+0A0h] +
mov ebp [eax+8] +
test ebp ebp +
jz loc_454954  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] 10h +
call sub_458B60  +
mov [eax] esi +
mov ebx eax +
mov [eax+4] edi +
mov eax [esp+2Ch+arg_C] +
mov [ebx+8] eax +
mov [esp+2Ch+var_24] 1 +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] ebp +
call sub_4A7D20  +
mov [eax] ebx +
mov eax [esp+2Ch+arg_C] +
mov eax [eax+88h] +
mov [eax+18h] ebp +
mov [eax+20h] esi +
mov [eax+24h] edi +
mov eax 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_18] offset free +
mov [esp+2Ch+var_1C] offset loc_454170 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] offset loc_454120 +
mov [esp+2Ch+var_28] offset loc_454110 +
mov [esp+2Ch+var_2C] 10h +
call sub_4A7760  +
test eax eax +
mov ebp eax +
jz loc_4549A0  +
mov eax [ebx+0A0h] +
mov [eax+8] ebp +
jmp loc_454900  +
xor eax eax +
jmp loc_45494C  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov ebx [esp+7Ch+arg_0] +
lea ebp [esp+7Ch+var_48] +
mov [esp+7Ch+var_78] 3Ch +
mov [esp+7Ch+var_7C] ebp +
mov [esp+7Ch+var_74] ebx +
call sub_46FAD0  +
cmp eax 3Ch +
jz loc_454A16  +
call sub_44B8A0  +
cmp eax 1 +
jz loc_454A0C  +
mov [esp+7Ch+var_7C] 9 +
call sub_44BAF0  +
xor eax eax +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [esp+0] 0Ah +
call sub_44BAF0  +
add esp 7Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+7Ch+var_E] +
mov edi offset asc_4FE476 +
mov ecx 2 +
mov esi eax +
cmps   +
jz loc_454A54  +
mov esi [esp+7Ch+arg_4] +
test esi esi +
jz loc_454A00  +
mov edi [esp+7Ch+arg_4] +
mov [esp+7Ch+var_74] 2 +
mov [esp+7Ch+var_7C] eax +
mov [esp+7Ch+var_78] edi +
call strncmp  +
test eax eax +
jnz loc_454A00  +
mov esi ds:__imp__errno +
call esi  +
mov dword ptr [eax] 0 +
lea eax [esp+7Ch+var_50] +
movzx edi byte ptr [esp+7Ch+var_E] +
mov [esp+7Ch+var_74] eax +
lea eax [esp+7Ch+var_18] +
mov [esp+7Ch+var_78] offset aLu +
mov [esp+7Ch+var_7C] eax +
mov byte ptr [esp+7Ch+var_E] 0 +
call sscanf  +
mov ecx edi +
mov byte ptr [esp+7Ch+var_E] cl +
cmp eax 1 +
jnz loc_454A00  +
movzx edx byte ptr [esp+7Ch+var_48] +
cmp dl 2Fh +
jz loc_454C70  +
cmp dl 20h +
jz loc_454C42  +
cmp dl 23h +
jz loc_454BB0  +
mov eax [ebx+4] +
movzx edi byte ptr [eax+1Ah] +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] ebp +
call memchr  +
test eax eax +
jz loc_454D75  +
sub eax ebp +
mov edi eax +
lea eax [edi+65h] +
xor edx edx +
mov [esp+7Ch+var_6C] 0 +
mov [esp+7Ch+var_68] 0 +
mov [esp+7Ch+var_7C] eax +
mov [esp+7Ch+var_60] edx +
call sub_459D10  +
test eax eax +
mov esi eax +
jz loc_454A0C  +
mov edx [esp+7Ch+var_60] +
xor ecx ecx +
lea eax [esi+28h] +
test edx edx +
mov [esi] eax +
mov eax [esp+7Ch+var_48] +
mov [esi+28h] eax +
mov eax [esp+7Ch+var_44] +
mov [esi+2Ch] eax +
mov eax [esp+7Ch+var_40] +
mov [esi+30h] eax +
mov eax [esp+7Ch+var_3C] +
mov [esi+34h] eax +
mov eax [esp+7Ch+var_38] +
mov [esi+38h] eax +
mov eax [esp+7Ch+var_34] +
mov [esi+3Ch] eax +
mov eax [esp+7Ch+var_30] +
mov [esi+40h] eax +
mov eax [esp+7Ch+var_2C] +
mov [esi+44h] eax +
mov eax [esp+7Ch+var_28] +
mov [esi+48h] eax +
mov eax [esp+7Ch+var_24] +
mov [esi+4Ch] eax +
mov eax [esp+7Ch+var_20] +
mov [esi+50h] eax +
mov eax [esp+7Ch+var_1C] +
mov [esi+54h] eax +
mov eax [esp+7Ch+var_18] +
mov [esi+58h] eax +
mov eax [esp+7Ch+var_14] +
mov [esi+5Ch] eax +
mov eax [esp+6Ch] +
mov [esi+60h] eax +
mov eax [esp+7Ch+var_50] +
mov [esi+4] eax +
mov [esi+8] ecx +
mov ecx [esp+7Ch+var_6C] +
mov ebx [esp+7Ch+var_68] +
mov [esi+10h] ecx +
mov [esi+14h] ebx +
jz loc_454D20  +
mov [esi+0Ch] edx +
add esp 7Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [esp+7Ch+var_48+1] 31h +
jnz loc_454AB7  +
cmp byte ptr [esp+7Ch+var_48+2] 2Fh +
jnz loc_454AB7  +
movzx eax byte ptr [esp+7Ch+var_48+3] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_454AB7  +
lea eax [esp+7Ch+var_48+3] +
mov [esp+7Ch+var_7C] eax +
call atoi  +
sub [esp+7Ch+var_50] eax +
mov ecx eax +
lea eax [eax+65h] +
mov [esp+7Ch+var_7C] eax +
mov [esp+7Ch+var_6C] ecx +
call sub_459D10  +
test eax eax +
mov esi eax +
jz loc_454A0C  +
mov ecx [esp+7Ch+var_6C] +
lea edx [eax+64h] +
mov [esp+7Ch+var_7C] edx +
mov [esp+7Ch+var_74] ebx +
mov [esp+7Ch+var_6C] edx +
mov [esp+7Ch+var_78] ecx +
mov [esp+7Ch+var_60] ecx +
call sub_46FAD0  +
mov ecx [esp+7Ch+var_60] +
mov edx [esp+7Ch+var_6C] +
cmp eax ecx +
mov edi eax +
jz loc_454DB2  +
mov [esp+7Ch+var_7C] esi +
call free  +
jmp loc_4549DB  +
mov eax [ebx+4] +
mov [esp+7Ch+var_6C] edx +
movzx edi byte ptr [eax+1Ah] +
mov [esp+7Ch+var_78] 2Fh +
mov [esp+7Ch+var_7C] ebp +
mov [esp+7Ch+var_74] edi +
call memchr  +
mov edx [esp+7Ch+var_6C] +
test eax eax +
jnz loc_454ABE  +
lea esi [esi+0] +
mov eax [ebx+0A0h] +
mov ecx [eax+18h] +
test ecx ecx +
jz loc_454AAE  +
call esi  +
mov dword ptr [eax] 0 +
lea eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_78] eax +
lea eax [esp+7Ch+var_48+1] +
mov [esp+7Ch+var_74] 0Ah +
mov [esp+7Ch+var_7C] eax +
call strtol  +
mov edi eax +
call esi  +
mov edx [eax] +
test edx edx +
jnz loc_454A00  +
mov eax [ebx+0A0h] +
cmp edi [eax+1Ch] +
jnb loc_454A00  +
test byte ptr [ebx+2Bh] 40h +
jz loc_454D35  +
mov edx [esp+7Ch+var_4C] +
mov [esp+7Ch+var_6C] 0 +
mov [esp+7Ch+var_68] 0 +
test edx edx +
jz loc_454D45  +
cmp byte ptr [edx] 3Ah +
jnz loc_454D45  +
add edx 1 +
mov [esp+7Ch+var_7C] edx +
mov [esp+7Ch+var_74] 0Ah +
mov [esp+7Ch+var_78] 0 +
call strtol  +
mov [esp+7Ch+var_6C] eax +
sar eax 1Fh +
mov [esp+7Ch+var_68] eax +
call esi  +
mov eax [eax] +
test eax eax +
jnz loc_454A00  +
mov eax [ebx+0A0h] +
jmp loc_454D45  +
lea eax [esi+64h] +
test edi edi +
mov [esi+0Ch] eax +
jnz loc_454D60  +
mov byte ptr [eax+edi] 0 +
mov eax esi +
jmp loc_4549F3  +
mov [esp+7Ch+var_6C] 0 +
mov [esp+7Ch+var_68] 0 +
mov edx edi +
add edx [eax+18h] +
jz loc_454A0C  +
mov eax 64h +
xor edi edi +
jmp loc_454AF3  +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] eax +
call memcpy  +
mov eax [esi+0Ch] +
jmp loc_454D2A  +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_78] 2Fh +
mov [esp+7Ch+var_7C] ebp +
call memchr  +
test eax eax +
jnz loc_454ADA  +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_78] 20h +
mov [esp+7Ch+var_7C] ebp +
call memchr  +
test eax eax +
jz loc_454ADE  +
jmp loc_454ADA  +
mov byte ptr [esi+eax+64h] 0 +
mov ecx eax +
mov [esp+7Ch+var_6C] 0 +
mov [esp+7Ch+var_68] 0 +
jmp loc_454B0F  +
***
sub esp 1Ch +
mov eax [esp+20h] +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call sub_4549B0  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_0] +
mov ebx [edi] +
mov [esp+1Ch+var_1C] ebx +
call sub_4A8D80  +
mov esi [esp+1Ch+arg_4] +
cmp eax ebx +
jz loc_454E4F  +
sub eax ebx +
mov [esp+1Ch+var_1C] esi +
mov ebp eax +
call strlen  +
mov [esp+1Ch+var_1C] edi +
lea eax [ebp+eax+1] +
mov [esp+1Ch+var_18] eax +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_454E60  +
mov [esp+1Ch+var_14] ebp +
add ebp edi +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] eax +
call strncpy  +
mov [esp+1Ch+var_18] esi +
mov esi edi +
mov [esp+1Ch+var_1C] ebp +
call strcpy  +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor esi esi +
jmp loc_454E4F  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_8] +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_24] edi +
call sub_454880  +
test eax eax +
mov ebx eax +
jz loc_454EA3  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_2C] ebp +
call sub_46FCE0  +
test eax eax +
js loc_454E99  +
mov eax [ebp+4] +
mov eax [eax+0ECh] +
mov [esp+2Ch+var_2C] ebp +
call eax  +
test eax eax +
mov [esp+2Ch+var_14] eax +
jz loc_454E99  +
test byte ptr [ebp+2Bh] 40h +
mov ebx [eax+0Ch] +
jz loc_455095  +
movzx eax byte ptr [ebx] +
cmp al 5Ch +
jz loc_454F18  +
cmp al 2Fh +
jz loc_454F18  +
test al al +
nop   +
jz loc_454EF8  +
cmp byte ptr [ebx+1] 3Ah +
jz loc_454F18  +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] ebp +
call sub_454DF0  +
test eax eax +
mov ebx eax +
jnz loc_454F18  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] eax +
call free  +
jmp loc_454E99  +
mov eax [esp+2Ch+var_14] +
cmp dword ptr [eax+14h] 0 +
jl loc_454FCB  +
jle loc_454FC1  +
mov eax [ebp+0] +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] eax +
call sub_4A8B70  +
test eax eax +
jz loc_455103  +
mov esi [ebp+98h] +
test esi esi +
jnz loc_454F60  +
jmp loc_4550C0  +
mov esi [esi+90h] +
test esi esi +
jz loc_4550C0  +
mov eax [esi] +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_28] eax +
call sub_4A8B70  +
test eax eax +
jnz loc_454F52  +
mov [esp+2Ch+var_28] 2 +
mov [esp+2Ch+var_2C] esi +
call sub_454030  +
test eax eax +
jz loc_4550A7  +
mov eax [esp+2Ch+var_14] +
mov ebx [eax+14h] +
mov ecx [eax+10h] +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] ecx +
call sub_454E70  +
test eax eax +
mov ebx eax +
jz loc_454F0A  +
mov [esp+2Ch+var_2C] ebp +
call sub_46FC00  +
mov [ebx+40h] eax +
mov [ebx+44h] edx +
jmp loc_454E99  +
cmp dword ptr [eax+10h] 0 +
ja loc_454F2C  +
mov edx ebp +
mov eax ebx +
call sub_454180  +
test eax eax +
mov ecx eax +
jz loc_455103  +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_10] ecx +
call sub_46FC00  +
mov ecx [esp+2Ch+var_10] +
mov [ecx+40h] eax +
mov [ecx+44h] edx +
test byte ptr [ebp+2Bh] 40h +
jz loc_4550E6  +
mov dword ptr [ecx+38h] 0 +
mov dword ptr [ecx+3Ch] 0 +
mov eax [esp+2Ch+var_14] +
mov ebx [ecx+28h] +
mov [ecx+88h] eax +
mov eax [ebp+28h] +
mov edx ebx +
and ebx 0FF80001Fh +
shr edx 5 +
and edx 3FFFFh +
shr eax 5 +
and eax 2C000h +
or eax edx +
shl eax 5 +
or ebx eax +
movzx eax byte ptr [ecx+2Ch] +
mov [ecx+28h] ebx +
movzx edx byte ptr [ebp+2Ch] +
and eax 0FFFFFFFDh +
and edx 2 +
or eax edx +
mov [ecx+2Ch] al +
mov [esp+2Ch+var_20] ecx +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_10] ecx +
call sub_4548E0  +
mov ecx [esp+2Ch+var_10] +
mov ebx ecx +
test eax eax +
jnz loc_454E99  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] eax +
call free  +
mov dword ptr [ebx+88h] 0 +
xor ebx ebx +
jmp loc_454E99  +
mov [esp+2Ch+var_2C] ebp +
call sub_458360  +
test eax eax +
mov ecx eax +
jnz loc_454FDE  +
mov eax [esp+2Ch+var_14] +
xor ebx ebx +
mov [esp+2Ch+var_2C] eax +
call free  +
jmp loc_454E99  +
mov edx ebp +
mov eax ebx +
call sub_454180  +
test eax eax +
jz loc_4550A7  +
mov edx [ebp+98h] +
mov esi eax +
mov [eax+90h] edx +
mov [ebp+98h] eax +
jmp loc_454F72  +
mov [ecx+38h] eax +
mov [ecx+3Ch] edx +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_10] ecx +
call sub_4A06C0  +
mov ecx [esp+2Ch+var_10] +
mov [ecx] eax +
jmp loc_45500C  +
mov [esp+2Ch+var_2C] 0Ah +
call sub_44BAF0  +
jmp loc_4550A7  +
***
jmp loc_455120  +
sub esp 1Ch +
mov ecx [esp+20h] +
mov eax [esp+24h] +
mov edx [ecx+0A0h] +
shl eax 4 +
add eax [edx+10h] +
mov edx [eax+0Ch] +
mov eax [eax+8] +
mov [esp] ecx +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_454E70  +
add esp 1Ch +
retn   +
***
jmp sub_455160  +
***
mov eax [esp+18h+arg_0] +
movzx edx byte ptr [eax+28h] +
mov ecx edx +
and ecx 7 +
cmp cl 2 +
jnz loc_455190  +
and edx 18h +
cmp dl 10h +
jz loc_455190  +
mov edx [eax+4] +
mov edx [edx+0F4h] +
add esp 18h +
pop ebx  +
jmp edx  +
mov [esp+18h+var_18] 5 +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ecx [esp+34h] +
test ecx ecx +
jz loc_455223  +
mov ebx [esp+30h] +
mov eax [ecx+40h] +
mov edx [ecx+44h] +
test byte ptr [ebx+2Bh] 40h +
jnz loc_455207  +
mov ecx [ecx+88h] +
xor ebx ebx +
mov ecx [ecx+4] +
add ecx eax +
mov ebp ecx +
adc ebx edx +
and ebp 1 +
xor edi edi +
add ecx ebp +
adc ebx edi +
cmp edx ebx +
jb loc_455203  +
ja loc_4551F3  +
cmp eax ecx +
jb loc_455203  +
mov dword ptr [esp] 0Ah +
call sub_44BAF0  +
xor eax eax +
jmp loc_45521B  +
mov eax ecx +
mov edx ebx +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp+8] edx +
mov [esp] eax +
call sub_454E70  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+30h] +
mov eax [eax+0A0h] +
mov edx [eax+4] +
mov eax [eax] +
jmp loc_455207  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
lea ebp [esp+17h] +
mov dword ptr [esp+4] 8 +
mov [esp] ebp +
mov [esp+8] ebx +
call sub_46FAD0  +
cmp eax 8 +
jz loc_455288  +
call sub_44B8A0  +
cmp eax 1 +
jz loc_45527E  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi offset aThin +
mov ecx 8 +
movzx eax byte ptr [ebx+2Bh] +
mov esi ebp +
cmps   +
mov edi offset aArch +
mov ecx 8 +
mov esi ebp +
setz dl  +
and eax 0FFFFFFBFh +
shl edx 6 +
or eax edx +
mov [ebx+2Bh] al +
cmps   +
jz loc_4552C8  +
mov edi offset aBout +
mov ecx 8 +
mov esi ebp +
cmps   +
jnz loc_455333  +
mov esi [ebx+0A0h] +
mov dword ptr [esp+4] 38h +
mov [esp] ebx +
call sub_458B60  +
test eax eax +
mov [ebx+0A0h] eax +
jz loc_4553C4  +
mov dword ptr [eax] 8 +
mov dword ptr [eax+4] 0 +
mov eax [ebx+4] +
mov eax [eax+0D8h] +
mov [esp] ebx +
call eax  +
test eax eax +
jz loc_455340  +
mov eax [ebx+4] +
mov eax [eax+0DCh] +
mov [esp] ebx +
call eax  +
test eax eax +
jz loc_455340  +
movzx eax byte ptr [ebx+2Bh] +
and eax 21h +
cmp al 21h +
jz loc_455375  +
mov eax [ebx+4] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test al 40h +
jnz loc_4552C8  +
jmp loc_45527E  +
***
call sub_44B8A0  +
cmp eax 1 +
jz loc_455356  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
mov eax [ebx+0A0h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_458CD0  +
xor eax eax +
mov [ebx+0A0h] esi +
jmp loc_455280  +
***
mov dword ptr [esp+4] 0 +
mov [esp] ebx +
call sub_455160  +
test eax eax +
mov esi eax +
jz loc_455328  +
and byte ptr [eax+2Bh] 0FEh +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call sub_454030  +
test eax eax +
mov eax [ebx+4] +
jz loc_455280  +
cmp [esi+4] eax +
jz loc_455280  +
mov dword ptr [esp] 4 +
call sub_44BAF0  +
jmp loc_455328  +
***
mov [ebx+0A0h] esi +
jmp loc_455280  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0ACh +
mov ebx [esp+0C0h] +
lea ebp [esp+3Eh] +
mov dword ptr [esp+4] 10h +
mov [esp] ebp +
mov [esp+8] ebx +
call sub_46FAD0  +
mov edx 1 +
test eax eax +
jz loc_455409  +
cmp eax 10h +
jz loc_455416  +
xor edx edx +
add esp 0ACh +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+0Ch] 1 +
mov dword ptr [esp+4] 0FFFFFFF0h +
mov dword ptr [esp+8] 0FFFFFFFFh +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_455407  +
mov edi offset a___symdef +
mov ecx 10h +
mov esi ebp +
cmps   +
jz loc_455553  +
mov edi offset a___symdef_0 +
mov ecx 10h +
mov esi ebp +
cmps   +
jz loc_455553  +
mov edi offset asc_4FE4BA +
mov ecx 10h +
mov esi ebp +
cmps   +
jz loc_455561  +
mov edi offset aSym64 +
mov ecx 10h +
mov esi ebp +
cmps   +
jz loc_4555C6  +
mov edi offset a120 +
mov ecx 10h +
mov esi ebp +
cmps   +
jz loc_4554A8  +
and byte ptr [ebx+2Bh] 0DFh +
mov edx 1 +
jmp loc_455409  +
***
lea eax [esp+64h] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 3Ch +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 3Ch +
jnz loc_455407  +
lea esi [esp+4Fh] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 14h +
mov [esp] esi +
call sub_46FAD0  +
cmp eax 14h +
jnz loc_455407  +
mov dword ptr [esp+0Ch] 1 +
mov dword ptr [esp+4] 0FFFFFFB0h +
mov dword ptr [esp+8] 0FFFFFFFFh +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_455407  +
mov dword ptr [esp+8] 10h +
mov dword ptr [esp+4] offset a___symdefSorte +
mov [esp] esi +
mov byte ptr [esp+63h] 0 +
call strncmp  +
test eax eax +
jz loc_455553  +
mov dword ptr [esp+8] 9 +
mov dword ptr [esp+4] offset a___symdef_1 +
mov [esp] esi +
call strncmp  +
test eax eax +
jnz loc_45549A  +
mov eax ebx +
call sub_4541D0  +
mov edx eax +
jmp loc_455409  +
***
mov eax [ebx+4] +
mov ebp [ebx+0A0h] +
mov eax [eax+0ECh] +
mov [esp] ebx +
call eax  +
test eax eax +
jz loc_455407  +
mov edi [eax+4] +
lea esi [esp+64h] +
mov [esp] eax +
call free  +
mov [esp+8] ebx +
mov dword ptr [esp+4] 4 +
mov [esp] esi +
call sub_46FAD0  +
cmp eax 4 +
jz loc_4555D7  +
call sub_44B8A0  +
cmp eax 1 +
jz loc_455407  +
mov dword ptr [esp] 0Ah +
call sub_44BAF0  +
xor edx edx +
jmp loc_455409  +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
jmp loc_455407  +
***
mov [esp] esi +
sub edi 4 +
call sub_459EB0  +
mov ecx edi +
mov dword ptr [esp+28h] offset sub_459EB0 +
mov [esp+18h] eax +
shl eax 2 +
sub ecx eax +
cmp ecx 0FFFFFh +
mov [esp+20h] ecx +
ja loc_4556B9  +
mov eax [esp+18h] +
cmp eax 0FFFFFFFh +
ja loc_455407  +
mov edi [esp+20h] +
shl eax 4 +
mov ecx eax +
mov [esp+2Ch] eax +
lea eax [edi+eax+1] +
cmp ecx eax +
jnb loc_455407  +
mov [esp+4] eax +
mov [esp] ebx +
call sub_458B60  +
test eax eax +
mov esi eax +
mov [ebp+10h] eax +
jz loc_455407  +
mov eax [esp+18h] +
mov [esp] ebx +
lea edi ds:0[eax*4] +
mov [esp+4] edi +
call sub_458A80  +
test eax eax +
mov [esp+24h] eax +
jz loc_4556A3  +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] eax +
call sub_46FAD0  +
cmp edi eax +
jz loc_455701  +
call sub_44B8A0  +
sub eax 1 +
jz loc_455693  +
mov dword ptr [esp] 0Ah +
call sub_44BAF0  +
mov eax [esp+24h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_458CD0  +
mov eax [ebp+10h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_458CD0  +
xor edx edx +
jmp loc_455409  +
***
mov [esp] ebx +
call sub_4536B0  +
cmp eax 4 +
jnz loc_455605  +
mov eax [ebx+4] +
mov dword ptr [esp+28h] offset sub_459EB0 +
cmp dword ptr [eax+4] 2 +
jnz loc_455605  +
mov [esp] esi +
call sub_459EE0  +
mov dword ptr [esp+28h] offset sub_459EE0 +
mov [esp+18h] eax +
shl eax 2 +
sub edi eax +
mov [esp+20h] edi +
jmp loc_455605  +
***
mov edi [esp+2Ch] +
mov eax [esp+20h] +
mov [esp+8] ebx +
add edi esi +
mov [esp+4] eax +
mov [esp] edi +
call sub_46FAD0  +
cmp [esp+20h] eax +
jnz loc_45567D  +
mov [esp+0C0h] ebx +
xor edx edx +
mov ebx [esp+20h] +
jmp loc_455779  +
cmp [esp+18h] edx +
jbe loc_45577D  +
mov eax [esp+24h] +
mov [esp+20h] edx +
lea eax [eax+edx*4] +
mov [esp] eax +
mov eax [esp+28h] +
call eax  +
mov [esi] edi +
mov dword ptr [esi+0Ch] 0 +
mov [esi+8] eax +
mov [esp+4] ebx +
mov [esp] edi +
call sub_4BB590  +
mov edx [esp+20h] +
cmp eax ebx +
adc eax 0 +
add esi 10h +
add edi eax +
sub ebx eax +
add edx 1 +
test ebx ebx +
jnz loc_455734  +
mov ebx [esp+0C0h] +
mov eax [esp+18h] +
mov byte ptr [edi] 0 +
mov [ebp+14h] eax +
mov [esp] ebx +
call sub_46FC00  +
mov ecx eax +
and ecx 1 +
mov esi ecx +
mov ecx edx +
and ecx 80000000h +
test ecx ecx +
mov edi ecx +
jns loc_4557CD  +
add esi 0FFFFFFFFh +
mov ecx esi +
or ecx 0FFFFFFFEh +
mov [esp+18h] ecx +
mov esi [esp+18h] +
mov dword ptr [esp+1Ch] 0FFFFFFFFh +
mov edi [esp+1Ch] +
add esi 1 +
adc edi 0 +
add eax esi +
adc edx edi +
mov [ebp+0] eax +
mov [ebp+4] edx +
or byte ptr [ebx+2Bh] 20h +
mov eax [esp+24h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_458CD0  +
mov edx [ebp+4] +
mov eax [ebp+0] +
mov dword ptr [esp+0Ch] 0 +
mov [esp] ebx +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_46FCE0  +
mov eax [ebx+4] +
mov eax [eax+0ECh] +
mov [esp] ebx +
call eax  +
test eax eax +
jz loc_45549E  +
mov edx [eax] +
cmp byte ptr [edx] 2Fh +
jz loc_455838  +
mov [esp] eax +
call free  +
mov edx 1 +
jmp loc_455409  +
***
cmp byte ptr [edx+1] 20h +
jnz loc_455826  +
mov ecx [eax+4] +
xor ebx ebx +
add ecx 3Dh +
and ecx 0FFFFFFFEh +
add [ebp+0] ecx +
adc [ebp+4] ebx +
jmp loc_455826  +
***
jmp loc_455860  +
push ebp  +
push edi  +
push esi  +
push ebx  +
mov ebx 1 +
sub esp 4Ch +
mov eax [esp+60h] +
lea ebp [esp+2Fh] +
mov eax [eax+0A0h] +
mov dword ptr [esp+4] 10h +
mov [esp] ebp +
mov [esp+18h] eax +
mov eax [esp+60h] +
mov [esp+8] eax +
call sub_46FAD0  +
test eax eax +
jz loc_4558A1  +
cmp eax 10h +
jz loc_4558B0  +
xor ebx ebx +
add esp 4Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+60h] +
mov dword ptr [esp+0Ch] 1 +
mov dword ptr [esp+4] 0FFFFFFF0h +
mov dword ptr [esp+8] 0FFFFFFFFh +
mov [esp] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_45589F  +
mov edi offset a___symdef +
mov ecx 10h +
mov esi ebp +
cmps   +
jz loc_455912  +
mov edi offset a___symdef_0 +
mov ecx 10h +
mov esi ebp +
cmps   +
jz loc_455912  +
mov edi offset asc_4FE4BA +
mov ecx 10h +
mov eax [esp+60h] +
mov esi ebp +
cmps   +
jz loc_455920  +
and byte ptr [eax+2Bh] 0DFh +
jmp loc_4558A1  +
***
mov eax [esp+60h] +
call sub_4541D0  +
mov ebx eax +
jmp loc_4558A1  +
***
mov eax [eax+4] +
mov edx [esp+60h] +
mov eax [eax+0ECh] +
mov [esp] edx +
call eax  +
test eax eax +
jz loc_45589F  +
mov ebx [eax+4] +
mov [esp] eax +
cmp ebx 5 +
ja loc_45595B  +
call free  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
jmp loc_45589F  +
***
call free  +
mov eax [esp+60h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_458B60  +
test eax eax +
mov ebp eax +
jz loc_45589F  +
mov eax [esp+60h] +
mov [esp+4] ebx +
mov [esp] ebp +
mov [esp+8] eax +
call sub_46FAD0  +
cmp ebx eax +
jz loc_4559B3  +
call sub_44B8A0  +
cmp eax 1 +
jz loc_45589F  +
mov dword ptr [esp] 0Ah +
xor ebx ebx +
call sub_44BAF0  +
jmp loc_4558A1  +
***
mov eax [esp+60h] +
sub ebx 6 +
mov eax [eax+4] +
mov eax [eax+58h] +
mov [esp] ebp +
call eax  +
mov edi [esp+18h] +
lea edx [ebp+2] +
mov dword ptr [edi+8] 0 +
mov [edi+14h] eax +
mov eax [esp+60h] +
mov eax [eax+4] +
mov eax [eax+4Ch] +
mov [esp] edx +
call eax  +
cmp ebx eax +
mov esi eax +
jb loc_45594A  +
mov eax [edi+14h] +
sub ebx esi +
mov [esp+1Ch] eax +
shl eax 3 +
cmp ebx eax +
jb loc_45594A  +
mov [esp+4] eax +
mov eax [esp+60h] +
mov [esp] eax +
call sub_458A80  +
mov ebx eax +
mov eax [esp+18h] +
test ebx ebx +
mov [eax+10h] ebx +
jz loc_45589F  +
cmp dword ptr [eax+14h] 0 +
jz loc_455A77  +
add ebp 6 +
xor edi edi +
add esi ebp +
mov [esp+1Ch] ebp +
mov ebp edi +
mov edi [esp+60h] +
mov eax [edi+4] +
add ebp 1 +
add ebx 10h +
mov eax [eax+4Ch] +
mov [esp] esi +
call eax  +
lea ecx [esi+4] +
add esi 8 +
add eax [esp+1Ch] +
mov [ebx-10h] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp] ecx +
call eax  +
mov dword ptr [ebx-4] 0 +
mov [ebx-8] eax +
mov eax [esp+18h] +
cmp [eax+14h] ebp +
ja loc_455A3B  +
mov eax [esp+60h] +
mov [esp] eax +
call sub_46FC00  +
mov edi edx +
mov esi eax +
and edi 80000000h +
and esi 1 +
test edi edi +
mov ecx esi +
mov ebx edi +
jns loc_455AA9  +
add ecx 0FFFFFFFFh +
or edi 0FFFFFFFFh +
or ecx 0FFFFFFFEh +
mov ebx edi +
add ecx 1 +
adc ebx 0 +
add eax ecx +
mov ecx [esp+18h] +
adc edx ebx +
mov ebx 1 +
mov [ecx] eax +
mov eax [esp+60h] +
mov [ecx+4] edx +
or byte ptr [eax+2Bh] 20h +
jmp loc_4558A1  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+60h] +
mov eax [ebx+0A0h] +
mov edx [eax+4] +
mov eax [eax] +
mov dword ptr [esp+0Ch] 0 +
mov [esp] ebx +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_46FCE0  +
test eax eax +
jz loc_455B10  +
xor ebp ebp +
add esp 4Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea eax [esp+2Fh] +
mov ebp 1 +
mov [esp+8] ebx +
mov dword ptr [esp+4] 10h +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 10h +
jnz loc_455B04  +
mov dword ptr [esp+0Ch] 1 +
mov dword ptr [esp+4] 0FFFFFFF0h +
mov dword ptr [esp+8] 0FFFFFFFFh +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_455B02  +
mov edi offset aArfilenames +
mov ecx 10h +
lea esi [esp+2Fh] +
cmps   +
jz loc_455B7E  +
mov edi offset asc_4FE519 +
mov ecx 10h +
lea esi [esp+2Fh] +
cmps   +
jnz loc_455C33  +
mov eax [ebx+4] +
mov eax [eax+0ECh] +
mov [esp] ebx +
call eax  +
test eax eax +
mov esi eax +
jz loc_455B02  +
mov edi [eax+4] +
cmp edi 0FFFFFFFFh +
jz loc_455C12  +
mov ebp [ebx+0A0h] +
lea eax [edi+1] +
mov [ebp+1Ch] edi +
mov [esp+4] eax +
mov [esp] ebx +
call sub_458B60  +
mov [ebp+18h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+18h] +
test eax eax +
jz loc_455C12  +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] eax +
call sub_46FAD0  +
cmp eax edi +
jz loc_455C4C  +
call sub_44B8A0  +
cmp eax 1 +
jz loc_455BF0  +
mov dword ptr [esp] 0Ah +
call sub_44BAF0  +
mov eax [ebx+0A0h] +
mov eax [eax+18h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_458CD0  +
mov eax [ebx+0A0h] +
mov dword ptr [eax+18h] 0 +
mov [esp] esi +
call free  +
mov eax [ebx+0A0h] +
mov dword ptr [eax+18h] 0 +
mov dword ptr [eax+1Ch] 0 +
jmp loc_455B02  +
***
mov eax [ebx+0A0h] +
mov dword ptr [eax+18h] 0 +
mov dword ptr [eax+1Ch] 0 +
jmp loc_455B04  +
***
mov eax [ebx+0A0h] +
mov ecx [esi+4] +
mov edi [eax+18h] +
add ecx edi +
mov eax edi +
cmp edi ecx +
jb loc_455C6E  +
jmp loc_455C97  +
cmp dl 5Ch +
jz loc_455C92  +
add eax 1 +
cmp eax ecx +
jz loc_455C97  +
movzx edx byte ptr [eax] +
cmp dl 0Ah +
jnz loc_455C62  +
cmp edi eax +
jnb loc_455D01  +
xor edx edx +
cmp byte ptr [eax-1] 2Fh +
setz dl  +
neg edx  +
mov byte ptr [eax+edx] 0 +
movzx edx byte ptr [eax] +
jmp loc_455C62  +
***
mov byte ptr [eax] 2Fh +
jmp loc_455C67  +
***
mov byte ptr [ecx] 0 +
mov edi [ebx+0A0h] +
mov [esp] ebx +
call sub_46FC00  +
mov [edi] eax +
mov [edi+4] edx +
mov ebx [ebx+0A0h] +
mov ecx [ebx+4] +
mov edi [ebx] +
sar ecx 1Fh +
xor edi ecx +
mov eax ecx +
cdq   +
mov eax edi +
mov [esp+18h] ecx +
sub eax [esp+18h] +
mov [esp+1Ch] edx +
mov ebp [esp+1Ch] +
and eax 1 +
mov edi eax +
xor edi ecx +
mov edx ebp +
mov eax edi +
mov edi [esp+18h] +
sub eax edi +
sbb edx ebp +
mov ebp 1 +
add eax [ebx] +
adc edx [ebx+4] +
mov [ebx] eax +
mov [ebx+4] edx +
mov [esp] esi +
call free  +
jmp loc_455B04  +
***
xor edx edx +
jmp loc_455C89  +
***
push ebp  +
push edi  +
xor edi edi +
push esi  +
xor esi esi +
push ebx  +
sub esp 3Ch +
mov eax [esp+50h] +
mov eax [eax+4] +
movzx eax byte ptr [eax+1Ah] +
mov [esp+20h] eax +
mov eax [esp+5Ch] +
mov dword ptr [eax] 0 +
mov eax [esp+50h] +
mov ebx [eax+94h] +
test ebx ebx +
jnz loc_455DE9  +
jmp loc_455E4E  +
mov eax [ebx+8Ch] +
mov ebp [ebx] +
test eax eax +
jz loc_455D64  +
test byte ptr [eax+2Bh] 40h +
jnz loc_455D64  +
mov ebp [eax] +
test esi esi +
jz loc_455D78  +
mov [esp+4] ebp +
mov [esp] esi +
call sub_4A8B70  +
test eax eax +
jz loc_455DDF  +
movzx eax byte ptr [ebp+0] +
cmp al 5Ch +
jz loc_455E60  +
cmp al 2Fh +
jz loc_455E60  +
test al al +
jz loc_455D98  +
cmp byte ptr [ebp+1] 3Ah +
mov eax ebp +
jz loc_455DC4  +
mov eax [esp+50h] +
mov edx [eax] +
movzx eax byte ptr [edx] +
cmp al 5Ch +
jz loc_455E60  +
cmp al 2Fh +
jz loc_455E60  +
test al al +
jz loc_455DBD  +
cmp byte ptr [edx+1] 3Ah +
mov eax ebp +
jz loc_455DC4  +
mov eax ebp +
call sub_454390  +
mov [esp] eax +
call strlen  +
mov esi [esp+54h] +
add edi eax +
test esi esi +
jnz loc_455E67  +
add edi 1 +
mov esi ebp +
mov ebx [ebx+90h] +
test ebx ebx +
jz loc_455E46  +
mov eax [esp+50h] +
test byte ptr [eax+2Bh] 40h +
jnz loc_455D50  +
mov eax [ebx] +
mov [esp] eax +
call sub_4A8D80  +
test eax eax +
jz loc_4560E0  +
mov [esp] eax +
mov [esp+18h] eax +
call strlen  +
mov edx [esp+18h] +
cmp [esp+20h] eax +
mov ebp eax +
jnb loc_455E75  +
mov eax [esp+50h] +
test byte ptr [eax+29h] 80h +
jnz loc_455E71  +
mov ecx [esp+54h] +
add ebp edi +
mov ebx [ebx+90h] +
lea edi [ebp+1] +
add ebp 2 +
test ecx ecx +
cmovnz edi ebp +
test ebx ebx +
jnz loc_455DE9  +
test edi edi +
jnz loc_455F00  +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax ebp +
jmp loc_455DC4  +
***
add edi 2 +
mov esi ebp +
jmp loc_455DDF  +
***
mov ebp [esp+20h] +
mov eax [ebx+88h] +
mov [esp+18h] edx +
mov ecx [eax] +
mov [esp] edx +
mov [esp+8] ebp +
mov [esp+4] ecx +
mov [esp+1Ch] ecx +
call sub_4A8BC0  +
mov edx [esp+18h] +
mov ecx [esp+1Ch] +
test eax eax +
jnz loc_455EBA  +
cmp ebp 0Fh +
ja loc_455DDF  +
mov eax [ebx+4] +
movzx eax byte ptr [eax+19h] +
cmp [ecx+ebp] al +
jz loc_455DDF  +
mov [esp] ecx +
mov [esp+8] ebp +
mov [esp+4] edx +
mov [esp+18h] ecx +
call memcpy  +
mov ecx [esp+18h] +
cmp [esp+20h] ebp +
jbe loc_455EE7  +
mov eax [ebx+4] +
movzx eax byte ptr [eax+19h] +
mov [ecx+ebp] al +
jmp loc_455DDF  +
***
cmp ebp 0Fh +
ja loc_455DDF  +
cmp [esp+20h] ebp +
jnz loc_455DDF  +
jmp loc_455ED8  +
***
mov eax [esp+50h] +
mov [esp+4] edi +
mov [esp] eax +
call sub_458B60  +
mov ebp eax +
mov eax [esp+58h] +
test ebp ebp +
mov [eax] ebp +
jz loc_4560E0  +
mov eax [esp+5Ch] +
mov [eax] edi +
mov eax [esp+50h] +
mov ebx [eax+94h] +
test ebx ebx +
jz loc_455E4E  +
mov eax [esp+20h] +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+1Ch] 0 +
sub eax 1 +
mov [esp+28h] eax +
jmp loc_4560B5  +
mov eax [ebx+8Ch] +
test eax eax +
jz loc_455F6E  +
test byte ptr [eax+2Bh] 40h +
jnz loc_455F6E  +
mov eax [eax] +
mov [esp+18h] eax +
mov edx [esp+1Ch] +
test edx edx +
jz loc_455F8E  +
mov eax [esp+18h] +
mov esi [esp+1Ch] +
mov [esp+4] eax +
mov [esp] esi +
call sub_4A8B70  +
test eax eax +
jz loc_455FE7  +
mov eax [esp+18h] +
movzx eax byte ptr [eax] +
cmp al 5Ch +
jz loc_4560F0  +
cmp al 2Fh +
jz loc_4560F0  +
test al al +
jz loc_455FB5  +
mov eax [esp+18h] +
cmp byte ptr [eax+1] 3Ah +
mov esi eax +
jz loc_455FE7  +
mov eax [esp+50h] +
mov edx [eax] +
movzx eax byte ptr [edx] +
cmp al 5Ch +
jz loc_4560F0  +
cmp al 2Fh +
jz loc_4560F0  +
test al al +
jz loc_455FDC  +
cmp byte ptr [edx+1] 3Ah +
mov esi [esp+18h] +
jz loc_455FE7  +
mov eax [esp+18h] +
call sub_454390  +
mov esi eax +
mov [esp] esi +
call strlen  +
cmp [esp+20h] eax +
mov edi eax +
jb loc_456005  +
mov eax [esp+50h] +
test byte ptr [eax+2Bh] 40h +
jz loc_4560A7  +
mov eax [ebx+88h] +
cmp esi [esp+1Ch] +
mov edx [eax] +
jz loc_45604B  +
lea eax [edi+1] +
mov [esp+8] eax +
mov [esp+4] esi +
mov [esp] ebp +
mov [esp+24h] edx +
call memcpy  +
mov eax [esp+54h] +
mov edx [esp+24h] +
test eax eax +
jnz loc_456100  +
mov byte ptr [ebp+edi+0] 0Ah +
mov ecx [esp+58h] +
mov eax ebp +
sub eax [ecx] +
mov [esp+24h] eax +
mov eax [ebx+4] +
movzx eax byte ptr [eax+19h] +
mov [edx] al +
mov eax [esp+50h] +
test byte ptr [eax+2Bh] 40h +
jz loc_45606A  +
mov eax [ebx+3Ch] +
or eax [ebx+38h] +
jnz loc_456110  +
mov eax [esp+24h] +
add edx 1 +
mov dword ptr [esp+8] offset aLd +
mov [esp] edx +
mov [esp+0Ch] eax +
mov eax [esp+28h] +
mov [esp+4] eax +
call sub_454660  +
cmp esi [esp+1Ch] +
jz loc_4560A7  +
mov eax [esp+18h] +
lea ebp [ebp+edi+1] +
cmp dword ptr [esp+54h] 1 +
mov [esp+1Ch] eax +
sbb ebp 0FFFFFFFFh +
mov ebx [ebx+90h] +
test ebx ebx +
jz loc_455E4E  +
mov eax [ebx] +
mov [esp+18h] eax +
mov eax [esp+50h] +
test byte ptr [eax+2Bh] 40h +
jnz loc_455F58  +
mov eax [esp+18h] +
mov [esp] eax +
call sub_4A8D80  +
test eax eax +
mov esi eax +
jnz loc_455FE7  +
nop   +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [esp+18h] +
jmp loc_455FE7  +
***
mov byte ptr [ebp+edi+0] 2Fh +
mov byte ptr [ebp+edi+1] 0Ah +
jmp loc_45603F  +
***
mov eax [esp+24h] +
mov dword ptr [esp+8] offset aLd_0 +
mov [esp+2Ch] edx +
mov [esp+0Ch] eax +
mov eax [esp+28h] +
mov [esp+4] eax +
lea eax [edx+1] +
mov [esp] eax +
call sub_454140  +
mov edx [ebx+38h] +
mov dword ptr [esp+8] offset aLd +
lea ecx [edx-3Ch] +
mov edx [esp+2Ch] +
mov [esp+0Ch] ecx +
mov ecx [esp+28h] +
sub ecx eax +
lea eax [edx+eax+1] +
mov [esp+4] ecx +
mov [esp] eax +
call sub_454660  +
jmp loc_45608D  +
***
mov eax [esp+10h] +
mov dword ptr [eax] offset aArfilenames_0 +
mov eax [esp+0Ch] +
mov [esp+10h] eax +
mov eax [esp+8] +
mov dword ptr [esp+8] 0 +
mov [esp+0Ch] eax +
jmp loc_455D10  +
***
mov eax [esp+10h] +
mov dword ptr [eax] offset asc_4FE542 +
mov eax [esp+0Ch] +
mov [esp+10h] eax +
mov eax [esp+8] +
mov dword ptr [esp+8] 1 +
mov [esp+0Ch] eax +
jmp loc_455D10  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+40h] +
mov edx [eax+4] +
movzx edi byte ptr [edx+1Ah] +
mov edx [esp+48h] +
mov [esp+1Ch] edi +
mov edi 1 +
mov dword ptr [edx] 0 +
mov edx [esp+44h] +
mov dword ptr [edx] 0 +
mov edx [esp+4Ch] +
mov dword ptr [edx] 0 +
mov ebp [eax+94h] +
test ebp ebp +
jz loc_456259  +
mov eax [ebp+0] +
mov [esp] eax +
call sub_4A8D80  +
test eax eax +
jz loc_456295  +
movzx edx byte ptr [eax] +
test dl dl +
jz loc_45624F  +
xor ecx ecx +
xor ebx ebx +
jmp loc_456232  +
mov ecx esi +
cmp dl 20h +
movzx edx byte ptr [eax+ecx+1] +
cmovz ebx edi +
lea esi [ecx+1] +
test dl dl +
jnz loc_456230  +
and ebx 1 +
jnz loc_456266  +
cmp [esp+1Ch] esi +
jb loc_456266  +
mov ebp [ebp+90h] +
test ebp ebp +
jnz loc_456213  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [ebp+88h] +
add ecx 4 +
and ecx 0FFFFFFFCh +
mov edx [eax] +
mov [eax+8] ecx +
mov eax [esp+1Ch] +
mov [esp+0Ch] ecx +
mov dword ptr [esp+8] offset a1Lu +
mov [esp] edx +
mov [esp+4] eax +
call sub_454660  +
jmp loc_45624F  +
***
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 1Ch +
mov eax [esp+24h] +
mov edx [esp+20h] +
mov eax [eax+88h] +
mov eax [eax] +
mov [esp+8] edx +
mov dword ptr [esp+4] 3Ch +
mov [esp] eax +
call sub_46FB80  +
cmp eax 3Ch +
setz al  +
add esp 1Ch +
movzx eax al +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+34h] +
mov eax [esi+88h] +
mov ebx [eax] +
cmp byte ptr [ebx] 23h +
jz loc_456321  +
mov eax [esp+30h] +
mov dword ptr [esp+4] 3Ch +
mov [esp] ebx +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 3Ch +
setz al  +
movzx eax al +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp byte ptr [ebx+1] 31h +
jnz loc_4562F8  +
cmp byte ptr [ebx+2] 2Fh +
jnz loc_4562F8  +
movzx eax byte ptr [ebx+3] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4562F8  +
mov eax [esi] +
mov [esp] eax +
call sub_4A8D80  +
mov [esp] eax +
mov ebp eax +
call strlen  +
mov edx [esi+88h] +
mov edi eax +
lea eax [eax+3] +
and eax 0FFFFFFFCh +
cmp [edx+8] eax +
jz loc_456384  +
mov dword ptr [esp+4] 73Dh +
mov dword ptr [esp] offset a____Binutil_20 +
mov [esp+0Ch] eax +
call sub_44BA40  +
mov edx [esi+88h] +
mov eax [esp+0Ch] +
add eax [edx+4] +
mov dword ptr [esp+4] 0Ah +
mov [esp+8] eax +
lea eax [ebx+30h] +
mov [esp] eax +
call sub_454700  +
test eax eax +
jnz loc_4563A9  +
xor eax eax +
jmp loc_456319  +
***
mov eax [esp+30h] +
mov dword ptr [esp+4] 3Ch +
mov [esp] ebx +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 3Ch +
jnz loc_4563A2  +
mov eax [esp+30h] +
mov [esp+4] edi +
mov [esp] ebp +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax edi +
jnz loc_4563A2  +
and edi 3 +
mov eax 1 +
jz loc_456319  +
mov eax [esp+30h] +
mov ebx 4 +
sub ebx edi +
mov [esp+4] ebx +
mov dword ptr [esp] offset unk_4FE633 +
mov [esp+8] eax +
call sub_46FB80  +
cmp ebx eax +
setz al  +
movzx eax al +
jmp loc_456319  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+40h] +
mov esi [esp+44h] +
mov eax [eax+88h] +
test eax eax +
jz loc_4564FA  +
mov ebx [eax] +
test ebx ebx +
jz loc_4564F3  +
lea ebp [ebx+10h] +
lea edi [esp+1Ch] +
mov dword ptr [esp+8] 0Ah +
mov [esp+4] edi +
mov [esp] ebp +
call strtol  +
cmp ebp [esp+1Ch] +
mov [esi+24h] eax +
jz loc_4564F3  +
lea ebp [ebx+1Ch] +
mov dword ptr [esp+8] 0Ah +
mov [esp+4] edi +
mov [esp] ebp +
call strtol  +
cmp ebp [esp+1Ch] +
mov [esi+0Ah] ax +
jz loc_4564F3  +
lea ebp [ebx+22h] +
mov dword ptr [esp+8] 0Ah +
mov [esp+4] edi +
mov [esp] ebp +
call strtol  +
cmp ebp [esp+1Ch] +
mov [esi+0Ch] ax +
jz loc_4564F3  +
add ebx 28h +
mov dword ptr [esp+8] 8 +
mov [esp+4] edi +
mov [esp] ebx +
call strtol  +
cmp ebx [esp+1Ch] +
mov [esi+6] ax +
jz loc_4564F3  +
mov eax [esp+40h] +
mov eax [eax+88h] +
mov eax [eax+4] +
mov dword ptr [esi+1Ch] 0 +
mov [esi+18h] eax +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 0FFFFFFFFh +
jmp loc_4564EB  +
***
mov dword ptr [esp] 5 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
jmp loc_4564EB  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+34h] +
mov ebp [esp+30h] +
mov edi [esp+38h] +
mov [esp] eax +
call sub_4A8D80  +
mov edx eax +
mov eax [ebp+4] +
mov [esp+0Ch] edx +
movzx esi byte ptr [eax+1Ah] +
mov [esp] edx +
call strlen  +
mov edx [esp+0Ch] +
cmp esi eax +
mov ebx eax +
jb loc_456570  +
mov [esp+8] eax +
mov [esp+4] edx +
mov [esp] edi +
call memcpy  +
cmp esi ebx +
jbe loc_456568  +
mov eax [ebp+4] +
movzx eax byte ptr [eax+19h] +
mov [edi+ebx] al +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+38h] esi +
mov [esp+30h] edi +
mov [esp+34h] edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp memcpy  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+30h] +
mov eax [esp+34h] +
mov edi [esp+38h] +
mov edx [ebx+4] +
test byte ptr [ebx+29h] 80h +
movzx ebp byte ptr [edx+1Ah] +
jnz loc_4565F4  +
mov [esp] eax +
call sub_4A8D80  +
test eax eax +
mov edx eax +
jz loc_456616  +
mov eax ebp +
mov [esp] edx +
movzx ebp al +
mov [esp+0Ch] edx +
call strlen  +
mov edx [esp+0Ch] +
cmp ebp eax +
mov esi eax +
jnb loc_456600  +
cmp esi 0Fh +
ja loc_4565EC  +
cmp esi ebp +
jnz loc_4565EC  +
mov eax [ebx+4] +
movzx eax byte ptr [eax+19h] +
mov [edi+esi] al +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_456510  +
***
mov [esp+8] eax +
mov [esp+4] edx +
mov [esp] edi +
call memcpy  +
cmp ebp esi +
ja loc_4565E2  +
jmp loc_4565D9  +
***
mov dword ptr [esp+8] offset aBfd_dont_trunc +
mov dword ptr [esp+4] 818h +
mov dword ptr [esp] offset a____Binutil_20 +
call sub_44BA70  +
lea esi [esi+0] +
lea edi [edi+0] +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+34h] +
mov ebp [esp+30h] +
mov [esp] eax +
call sub_4A8D80  +
mov edi eax +
mov eax [ebp+4] +
movzx ebx byte ptr [eax+1Ah] +
mov [esp] edi +
call strlen  +
cmp ebx eax +
mov esi eax +
jb loc_4566A0  +
mov [esp+8] eax +
mov eax [esp+38h] +
mov ebx esi +
mov [esp+4] edi +
mov [esp] eax +
call memcpy  +
cmp ebx 0Fh +
ja loc_456697  +
mov eax [ebp+4] +
mov edx [esp+38h] +
movzx eax byte ptr [eax+19h] +
mov [edx+ebx] al +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+38h] +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] eax +
call memcpy  +
cmp byte ptr [edi+esi-2] 2Eh +
jnz loc_456684  +
cmp byte ptr [edi+esi-1] 6Fh +
jnz loc_456684  +
mov eax [esp+38h] +
mov byte ptr [eax+ebx-2] 2Eh +
mov byte ptr [eax+ebx-1] 6Fh +
jmp loc_456684  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_14] 0 +
test eax eax +
jz loc_456704  +
mov edx eax +
and edx 1 +
lea eax [edx+eax+3Ch] +
mov [esp+4Ch+var_14] eax +
mov [esp+4Ch+var_4C] 6000h +
call sub_459B80  +
mov edi eax +
mov [esp+4Ch+var_24] eax +
xor eax eax +
test edi edi +
jz loc_4569AA  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
test eax eax +
mov [esp+4Ch+var_10] eax +
jz loc_456980  +
mov eax [esp+4Ch+arg_0] +
mov edx offset a___symdef_1 +
mov ebp [eax+94h] +
mov eax 0Ah +
test ebp ebp +
jnz loc_456778  +
jmp loc_4569E4  +
mov ebp [ebp+90h] +
mov edi [esp+4Ch+arg_0] +
test ebp ebp +
mov [edi+94h] ebp +
jz loc_4569E4  +
mov esi [ebp+0] +
mov edi edx +
mov ecx eax +
cmps   +
jz loc_456760  +
xor ebx ebx +
xor esi esi +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_1C] 400h +
jmp loc_4567AF  +
mov ebp [ebp+90h] +
test ebp ebp +
jz loc_456A56  +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] ebp +
call sub_454030  +
test eax eax +
jz loc_4567A1  +
test byte ptr [ebp+29h] 2 +
jz loc_4567A1  +
mov eax [ebp+4] +
mov eax [eax+104h] +
mov [esp+4Ch+var_4C] ebp +
call eax  +
test eax eax +
mov [esp+4Ch+var_18] eax +
js loc_456970  +
jz loc_45695A  +
cmp eax ebx +
jle loc_456A46  +
test ebx ebx +
jz loc_456801  +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_4C] eax +
call free  +
mov eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_4C] eax +
call sub_459B80  +
test eax eax +
mov [esp+4Ch+var_34] eax +
jz loc_456974  +
mov eax [ebp+4] +
mov ebx [esp+4Ch+var_34] +
mov eax [eax+108h] +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] ebp +
call eax  +
test eax eax +
mov [esp+4Ch+var_28] eax +
js loc_456974  +
jz loc_456956  +
mov [esp+4Ch+var_20] ebp +
xor ebx ebx +
mov ebp esi +
jmp loc_4568E4  +
mov [esp+4Ch+var_4C] eax +
call strlen  +
mov ecx [esp+4Ch+var_24] +
mov [esp+4Ch+var_48] 4 +
mov edi eax +
lea eax [ebp+ebp*2+0] +
lea esi [ecx+eax*8] +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
test eax eax +
mov [esi] eax +
mov [esp+4Ch+var_30] eax +
jz loc_456974  +
lea eax [edi+1] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
mov edx [esp+4Ch+var_30] +
mov [edx] eax +
mov eax [esi] +
mov eax [eax] +
test eax eax +
jz loc_456974  +
mov ecx [esp+4Ch+var_34] +
add ebp 1 +
mov edx [ecx+ebx*4] +
mov edx [edx+4] +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_48] edx +
call strcpy  +
mov eax [esp+4Ch+var_20] +
mov [esi+8] eax +
mov eax [esp+4Ch+var_2C] +
mov [esi+10h] eax +
lea eax [eax+edi+1] +
mov [esp+4Ch+var_2C] eax +
add ebx 1 +
cmp ebx [esp+4Ch+var_28] +
jz loc_456950  +
mov eax [esp+4Ch+var_34] +
mov edx [eax+ebx*4] +
test dword ptr [edx+0Ch] 802082h +
mov eax [edx+10h] +
jnz loc_4568FD  +
test byte ptr [eax+15h] 10h +
jz loc_4568DB  +
cmp eax offset off_4BFAE8 +
jz loc_4568DB  +
cmp ebp [esp+4Ch+var_1C] +
jz loc_4569B2  +
mov eax [edx+4] +
mov edi offset a__gnu_lto_sl_0 +
mov ecx 0Fh +
mov esi eax +
cmps   +
jnz loc_456850  +
mov eax [esp+4Ch+var_20] +
mov eax [eax] +
mov [esp+4Ch+var_4C] offset aSPluginNeede_0 +
mov [esp+4Ch+var_48] eax +
call off_4BFA04  +
mov eax [esp+4Ch+var_34] +
mov eax [eax+ebx*4] +
mov eax [eax+4] +
jmp loc_456850  +
mov esi ebp +
mov ebp [esp+4Ch+var_20] +
mov ebx [esp+4Ch+var_18] +
mov eax [ebp+4] +
mov eax [eax+98h] +
mov [esp+4Ch+var_4C] ebp +
call eax  +
test eax eax +
jnz loc_4567A1  +
test ebx ebx +
jz loc_456980  +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_4C] eax +
call free  +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] eax +
call free  +
mov eax [esp+4Ch+var_10] +
test eax eax +
jz loc_456A4F  +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_458CD0  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebp+ebp+0] +
mov [esp+4Ch+var_1C] eax +
lea eax [eax+ebp*4] +
shl eax 3 +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] eax +
call sub_459C10  +
test eax eax +
jz loc_456974  +
mov edi [esp+4Ch+var_34] +
mov [esp+4Ch+var_24] eax +
mov edx [edi+ebx*4] +
jmp loc_45690E  +
mov eax [esp+4Ch+arg_0] +
mov ebx [esp+4Ch+var_24] +
mov eax [eax+4] +
mov eax [eax+0E8h] +
mov [esp+4Ch+var_44] ebx +
mov ebx [esp+4Ch+var_14] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_48] ebx +
mov ebx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] ebx +
call eax  +
mov esi eax +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] eax +
call free  +
mov eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_458CD0  +
add esp 4Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_18] ebx +
jmp loc_456819  +
xor eax eax +
jmp loc_4569AA  +
mov eax [esp+4Ch+arg_0] +
mov edi [esp+4Ch+var_2C] +
mov eax [eax+4] +
mov eax [eax+0E8h] +
mov [esp+4Ch+var_3C] edi +
mov edi [esp+4Ch+var_24] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_44] edi +
mov edi [esp+4Ch+var_14] +
mov [esp+4Ch+var_48] edi +
mov edi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] edi +
call eax  +
test ebx ebx +
mov esi eax +
jz loc_456A1C  +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_4C] eax +
call free  +
jmp loc_456A1C  +
***
push ebp  +
mov eax 203Ch +
push edi  +
push esi  +
push ebx  +
call sub_4BB070  +
sub esp eax +
mov eax [esp+2050h] +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+28h] 0 +
mov dword ptr [esp+2Ch] 0 +
movzx eax byte ptr [eax+2Bh] +
mov [esp+1Bh] al +
mov eax [esp+2050h] +
shr byte ptr [esp+1Bh] 5 +
and byte ptr [esp+1Bh] 1 +
mov edi [eax+94h] +
test edi edi +
jz loc_456FBA  +
test byte ptr [edi+28h] 10h +
jnz loc_456D61  +
xor esi esi +
mov ebp [esp+2050h] +
mov ebx esi +
jmp loc_456B24  +
mov edi [edi+90h] +
test edi edi +
jz loc_456B5A  +
test byte ptr [edi+28h] 10h +
jnz loc_456D61  +
mov eax [edi+88h] +
test eax eax +
jz loc_456BA5  +
test ebx ebx +
jnz loc_456B10  +
cmp byte ptr [esp+1Bh] 0 +
jz loc_456B10  +
mov [esp] edi +
xor ebx ebx +
mov dword ptr [esp+4] 1 +
call sub_454030  +
mov edi [edi+90h] +
test eax eax +
setnz bl  +
test edi edi +
jnz loc_456B1A  +
mov esi ebx +
mov eax [esp+2050h] +
lea edx [esp+2Ch] +
mov ecx [esp+2050h] +
mov eax [eax+4] +
mov eax [eax+0E0h] +
mov [esp+0Ch] edx +
lea edx [esp+28h] +
mov [esp+8] edx +
lea edx [esp+24h] +
mov [esp+4] edx +
mov [esp] ecx +
call eax  +
test eax eax +
jnz loc_456DD0  +
xor eax eax +
add esp 203Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test byte ptr [edi+2Ah] 1 +
mov eax [edi] +
jnz loc_456D90  +
lea ecx [esp+30h] +
mov [esp+4] ecx +
mov [esp] eax +
call ds:_stati64  +
test eax eax +
jnz loc_456EE3  +
test byte ptr [ebp+2Ah] 4 +
jz loc_456BF0  +
xor eax eax +
xor esi esi +
mov [esp+3Ch] ax +
mov eax 1A4h +
mov dword ptr [esp+54h] 0 +
mov [esp+3Ah] si +
mov [esp+36h] ax +
mov dword ptr [esp] 64h +
call sub_459D10  +
test eax eax +
mov esi eax +
jz loc_456EF0  +
lea edx [eax+28h] +
mov dword ptr [eax+28h] 20202020h +
mov dword ptr [eax+2Ch] 20202020h +
mov dword ptr [eax+30h] 20202020h +
mov dword ptr [eax+34h] 20202020h +
mov dword ptr [eax+38h] 20202020h +
mov dword ptr [eax+3Ch] 20202020h +
mov dword ptr [eax+40h] 20202020h +
mov dword ptr [eax+44h] 20202020h +
mov dword ptr [eax+48h] 20202020h +
mov dword ptr [eax+4Ch] 20202020h +
mov dword ptr [eax+50h] 20202020h +
mov dword ptr [eax+54h] 20202020h +
mov dword ptr [eax+58h] 20202020h +
mov dword ptr [eax+5Ch] 20202020h +
mov dword ptr [eax+60h] 20202020h +
mov eax [esp+54h] +
mov dword ptr [esp+8] offset a12ld +
mov dword ptr [esp+4] 0Ch +
mov [esp+1Ch] edx +
mov [esp+0Ch] eax +
lea eax [esi+38h] +
mov [esp] eax +
call sub_454660  +
movsx eax word ptr [esp+3Ah] +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 6 +
mov [esp+0Ch] eax +
lea eax [esi+44h] +
mov [esp] eax +
call sub_454660  +
movsx eax word ptr [esp+3Ch] +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 6 +
mov [esp+0Ch] eax +
lea eax [esi+4Ah] +
mov [esp] eax +
call sub_454660  +
movzx eax word ptr [esp+36h] +
mov dword ptr [esp+8] offset a8lo +
mov dword ptr [esp+4] 8 +
mov [esp+0Ch] eax +
lea eax [esi+50h] +
mov [esp] eax +
call sub_454660  +
mov eax [esp+48h] +
mov dword ptr [esp+4] 0Ah +
mov [esp+8] eax +
lea eax [esi+58h] +
mov [esp] eax +
call sub_454700  +
mov edx [esp+1Ch] +
test eax eax +
jz loc_456EFF  +
mov ecx 0A60h +
mov [esi+62h] cx +
mov eax [esp+48h] +
mov ecx [edi] +
mov [esi] edx +
mov [esi+4] eax +
mov eax [ebp+4] +
mov [edi+88h] esi +
mov eax [eax+0E4h] +
mov [esp+8] edx +
mov [esp+4] ecx +
mov [esp] ebp +
call eax  +
jmp loc_456B2E  +
***
mov dword ptr [esp] 5 +
call sub_44BAF0  +
call sub_44B8A0  +
mov [esp+4] edi +
mov dword ptr [esp] 14h +
mov [esp+8] eax +
call sub_44BAF0  +
jmp loc_456B98  +
***
lea eax [esp+54h] +
mov esi [edi+8] +
mov [esp] eax +
call time  +
xor eax eax +
mov [esp+3Ah] ax +
xor eax eax +
mov [esp+3Ch] ax +
mov eax 1A4h +
mov [esp+36h] ax +
mov eax [esi] +
mov dword ptr [esp+4Ch] 0 +
mov [esp+48h] eax +
jmp loc_456BCA  +
***
mov eax [esp+2050h] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_456B98  +
mov ecx [esp+2050h] +
mov edx offset aThin +
mov eax offset aArch +
test byte ptr [ecx+2Bh] 40h +
mov [esp+8] ecx +
mov dword ptr [esp+4] 8 +
cmovnz eax edx +
mov [esp] eax +
call sub_46FB80  +
cmp eax 8 +
jnz loc_456B98  +
mov eax esi +
and al [esp+1Bh] +
mov [esp+1Bh] al +
jnz loc_457000  +
mov esi [esp+28h] +
test esi esi +
jnz loc_457024  +
mov eax [esp+2050h] +
mov edi [eax+94h] +
test edi edi +
jz loc_456EA2  +
mov eax [edi+88h] +
mov ecx [esp+2050h] +
mov ebx [eax+4] +
mov eax [edi+4] +
mov eax [eax+0F0h] +
mov [esp+4] edi +
mov [esp] ecx +
call eax  +
test eax eax +
jz loc_456B98  +
mov eax [esp+2050h] +
test byte ptr [eax+2Bh] 40h +
jz loc_456F09  +
mov edi [edi+90h] +
test edi edi +
jnz loc_456E61  +
cmp byte ptr [esp+1Bh] 0 +
mov esi 5 +
mov ebx [esp+2050h] +
jz loc_456ED9  +
mov eax [ebx+4] +
mov eax [eax+100h] +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_456ED9  +
mov dword ptr [esp] offset aWarningWriting +
call off_4BFA04  +
sub esi 1 +
jnz loc_456EB5  +
mov eax 1 +
jmp loc_456B9A  +
***
mov dword ptr [esp] 1 +
call sub_44BAF0  +
nop   +
mov dword ptr [edi+88h] 0 +
jmp loc_456D6D  +
***
mov [esp] esi +
call free  +
jmp loc_456EF0  +
***
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] edi +
call sub_46FCE0  +
test eax eax +
jnz loc_456D6D  +
test ebx ebx +
jnz loc_456F67  +
jmp loc_456FC1  +
mov eax [esp+2050h] +
mov [esp+4] ebp +
mov [esp+8] eax +
lea eax [esp+30h] +
mov [esp] eax +
call sub_46FB80  +
cmp ebp eax +
jnz loc_456B98  +
sub ebx ebp +
jz loc_456FC1  +
cmp ebx 2000h +
mov esi 2000h +
cmovb esi ebx +
call ds:__imp__errno  +
mov dword ptr [eax] 0 +
lea eax [esp+30h] +
mov [esp+8] edi +
mov [esp+4] esi +
mov [esp] eax +
call sub_46FAD0  +
cmp eax esi +
mov ebp eax +
jz loc_456F40  +
call sub_44B8A0  +
cmp eax 1 +
jz loc_456D6D  +
mov dword ptr [esp] 12h +
call sub_44BAF0  +
jmp loc_456D6D  +
***
xor esi esi +
jmp loc_456B5C  +
***
mov eax [edi+88h] +
test byte ptr [eax+4] 1 +
jz loc_456E98  +
mov eax [esp+2050h] +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] 4FE477h +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 1 +
jz loc_456E98  +
jmp loc_456B98  +
***
mov eax [esp+28h] +
mov [esp+4] eax +
mov eax [esp+2050h] +
mov [esp] eax +
call sub_4566E0  +
test eax eax +
jnz loc_456E44  +
jmp loc_456B98  +
***
mov ebp [esp+2Ch] +
lea edi [esp+30h] +
add esi 1 +
mov dword ptr [esp+30h] 20202020h +
and esi 0FFFFFFFEh +
mov dword ptr [esp+34h] 20202020h +
mov dword ptr [esp+38h] 20202020h +
mov [esp] ebp +
mov dword ptr [esp+3Ch] 20202020h +
mov dword ptr [esp+40h] 20202020h +
mov dword ptr [esp+44h] 20202020h +
mov dword ptr [esp+48h] 20202020h +
mov dword ptr [esp+4Ch] 20202020h +
mov dword ptr [esp+50h] 20202020h +
mov dword ptr [esp+54h] 20202020h +
mov dword ptr [esp+58h] 20202020h +
mov dword ptr [esp+5Ch] 20202020h +
mov dword ptr [esp+60h] 20202020h +
mov dword ptr [esp+64h] 20202020h +
mov dword ptr [esp+68h] 20202020h +
call strlen  +
mov [esp+4] ebp +
mov [esp] edi +
mov [esp+8] eax +
call memcpy  +
lea eax [esp+60h] +
mov [esp+8] esi +
mov dword ptr [esp+4] 0Ah +
mov [esp] eax +
call sub_454700  +
test eax eax +
jz loc_456B98  +
mov eax 0A60h +
mov [esp+6Ah] ax +
mov eax [esp+2050h] +
mov dword ptr [esp+4] 3Ch +
mov [esp] edi +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 3Ch +
jnz loc_456B98  +
mov eax [esp+2050h] +
mov [esp+8] eax +
mov eax [esp+28h] +
mov [esp+4] eax +
mov eax [esp+24h] +
mov [esp] eax +
call sub_46FB80  +
cmp eax [esp+28h] +
jnz loc_456B98  +
test al 1 +
jz loc_456E50  +
mov eax [esp+2050h] +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] 4FE477h +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 1 +
jnz loc_456B98  +
jmp loc_456E50  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 8Ch +
mov eax [esp+0B0h] +
mov ecx [esp+0ACh] +
mov ebx [esp+0A0h] +
mov edi eax +
and edi 1 +
add eax edi +
mov ebp [ebx+94h] +
lea esi ds:0[ecx*8] +
mov [esp+24h] edi +
lea edi [esi+eax+8] +
mov [esp+20h] eax +
mov eax [ebx+0A0h] +
test byte ptr [ebx+2Ah] 4 +
mov dword ptr [eax+20h] 0 +
jz loc_457500  +
mov dword ptr [esp+48h] 20202020h +
mov dword ptr [esp+4Ch] 20202020h +
mov dword ptr [esp+50h] 20202020h +
mov dword ptr [esp+54h] 20202020h +
mov dword ptr [esp+58h] 20202020h +
mov dword ptr [esp+5Ch] 20202020h +
mov dword ptr [esp+60h] 20202020h +
mov dword ptr [esp+64h] 20202020h +
mov dword ptr [esp+68h] 20202020h +
mov dword ptr [esp+6Ch] 20202020h +
mov dword ptr [esp+70h] 20202020h +
mov dword ptr [esp+74h] 20202020h +
mov dword ptr [esp+78h] 20202020h +
mov dword ptr [esp+40h] 532E5F5Fh +
mov dword ptr [esp+44h] 45444D59h +
mov byte ptr [esp+48h] 46h +
mov dword ptr [eax+28h] 18h +
mov dword ptr [eax+2Ch] 0 +
mov eax [eax+20h] +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 0Ch +
mov [esp+0Ch] eax +
lea eax [esp+50h] +
mov [esp] eax +
call sub_454660  +
lea eax [esp+5Ch] +
mov [esp] eax +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 6 +
call sub_454660  +
lea eax [esp+62h] +
mov [esp] eax +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 6 +
call sub_454660  +
lea eax [esp+70h] +
mov [esp+8] edi +
mov dword ptr [esp+4] 0Ah +
mov [esp] eax +
call sub_454700  +
test eax eax +
jnz loc_4572F0  +
xor eax eax +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea eax [esp+40h] +
mov ecx 0A60h +
mov [esp+8] ebx +
mov dword ptr [esp+4] 3Ch +
mov [esp] eax +
mov [esp+7Ah] cx +
call sub_46FB80  +
cmp eax 3Ch +
jnz loc_4572DC  +
mov eax [ebx+4] +
lea ecx [esp+34h] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] esi +
call eax  +
lea eax [esp+34h] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 4 +
mov [esp] eax +
call sub_46FB80  +
cmp eax 4 +
jnz loc_4572DC  +
mov edx [esp+0ACh] +
test edx edx +
jz loc_457580  +
mov eax [esp+0A4h] +
mov dword ptr [esp+1Ch] 0 +
mov dword ptr [esp+2Ch] 0 +
mov [esp+0A0h] ebx +
lea eax [edi+eax+44h] +
mov [esp+18h] eax +
mov eax [esp+0A8h] +
mov [esp+28h] eax +
mov eax [esp+28h] +
mov ecx [esp+18h] +
mov ebx [esp+1Ch] +
mov eax [eax+8] +
cmp eax ebp +
mov [esp+10h] eax +
jz loc_4573D0  +
nop   +
mov edx [ebp+88h] +
mov ebp [ebp+90h] +
mov eax [edx+4] +
add eax [edx+8] +
xor edx edx +
add eax 3Ch +
add eax ecx +
adc edx ebx +
mov ebx eax +
and ebx 1 +
xor edi edi +
add eax ebx +
adc edx edi +
mov ecx eax +
cmp [esp+10h] ebp +
mov ebx edx +
jnz loc_4573A0  +
mov [esp+18h] ecx +
mov eax ebx +
xor ecx ecx +
or eax ecx +
mov dword ptr [esp+1Ch] 0 +
jnz loc_457530  +
mov eax [esp+0A0h] +
lea ecx [esp+38h] +
mov eax [eax+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov ecx [esp+28h] +
mov edx [ecx+10h] +
mov [esp] edx +
call eax  +
mov eax [esp+0A0h] +
lea ecx [esp+3Ch] +
mov eax [eax+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov ecx [esp+18h] +
mov [esp] ecx +
call eax  +
mov eax [esp+0A0h] +
mov dword ptr [esp+4] 8 +
mov [esp+8] eax +
lea eax [esp+38h] +
mov [esp] eax +
call sub_46FB80  +
cmp eax 8 +
jnz loc_4572DC  +
add dword ptr [esp+2Ch] 1 +
mov eax [esp+2Ch] +
add dword ptr [esp+28h] 18h +
cmp eax [esp+0ACh] +
jnz loc_457387  +
mov ebx [esp+0A0h] +
lea edi [esp+34h] +
mov eax [ebx+4] +
mov eax [eax+54h] +
mov [esp+4] edi +
mov edi [esp+20h] +
mov [esp] edi +
call eax  +
lea eax [esp+34h] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 4 +
mov [esp] eax +
call sub_46FB80  +
cmp eax 4 +
jnz loc_4572DC  +
xor edx edx +
mov ebp [esp+0A8h] +
mov [esp+0A0h] ebx +
mov ebx edx +
jmp loc_4574CF  +
add ebx 1 +
add ebp 18h +
cmp ebx [esp+0ACh] +
jz loc_457541  +
mov eax [ebp+0] +
mov edi [eax] +
mov [esp] edi +
call strlen  +
mov [esp] edi +
lea esi [eax+1] +
mov eax [esp+0A0h] +
mov [esp+4] esi +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax esi +
jz loc_4574C0  +
jmp loc_4572DC  +
***
mov eax [ebx] +
lea ecx [esp+40h] +
mov [esp+4] ecx +
mov [esp] eax +
call ds:_stati64  +
test eax eax +
mov eax [ebx+0A0h] +
jnz loc_4571C6  +
mov ecx [esp+64h] +
lea edx [ecx+3Ch] +
mov [eax+20h] edx +
jmp loc_4571C6  +
***
mov dword ptr [esp] 12h +
call sub_44BAF0  +
jmp loc_4572DC  +
***
mov ebx [esp+0A0h] +
mov eax [esp+24h] +
test eax eax +
jnz loc_45755A  +
mov eax 1 +
jmp loc_4572DE  +
***
mov [esp+8] ebx +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset unk_4FE5CC +
call sub_46FB80  +
sub eax 1 +
setz al  +
movzx eax al +
jmp loc_4572DE  +
***
mov eax [ebx+4] +
lea edi [esp+34h] +
mov eax [eax+54h] +
mov [esp+4] edi +
mov edi [esp+20h] +
mov [esp] edi +
call eax  +
lea eax [esp+34h] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 4 +
mov [esp] eax +
call sub_46FB80  +
cmp eax 4 +
jnz loc_4572DC  +
jmp loc_457548  +
***
push esi  +
push ebx  +
sub esp 84h +
mov ebx [esp+90h] +
test byte ptr [ebx+2Ah] 4 +
jz loc_4575E3  +
mov eax 1 +
add esp 84h +
pop ebx  +
pop esi  +
retn   +
***
mov [esp] ebx +
call sub_46FC70  +
lea eax [esp+10h] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_46FC90  +
cmp eax 0FFFFFFFFh +
jz loc_4576C0  +
mov eax [ebx+0A0h] +
mov edx [esp+34h] +
cmp edx [eax+20h] +
jle loc_4575D5  +
add edx 3Ch +
lea esi [esp+54h] +
mov [eax+20h] edx +
mov [esp+0Ch] edx +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 0Ch +
mov [esp] esi +
mov dword ptr [esp+54h] 20202020h +
mov dword ptr [esp+58h] 20202020h +
mov dword ptr [esp+5Ch] 20202020h +
call sub_454660  +
mov eax [ebx+0A0h] +
mov dword ptr [eax+28h] 18h +
mov dword ptr [eax+2Ch] 0 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 18h +
mov dword ptr [esp+8] 0 +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_4576A2  +
mov [esp+8] ebx +
mov dword ptr [esp+4] 0Ch +
mov [esp] esi +
call sub_46FB80  +
cmp eax 0Ch +
jz loc_4576D1  +
mov dword ptr [esp] offset aWritingUpdated +
call sub_44B940  +
add esp 84h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
***
mov dword ptr [esp] offset aReadingArchive +
call sub_44B940  +
jmp loc_4575D5  +
***
xor al al +
jmp loc_4575DA  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 7Ch +
mov ebp [esp+9Ch] +
mov dword ptr [esp+4] 0Ah +
mov esi [esp+90h] +
mov dword ptr [esp+34h] 20202020h +
mov dword ptr [esp+38h] 20202020h +
lea ebx ds:4[ebp*4] +
add ebx [esp+0A0h] +
mov dword ptr [esp+3Ch] 20202020h +
mov dword ptr [esp+40h] 20202020h +
mov eax ebx +
and eax 1 +
cmp eax 1 +
sbb ebx 0FFFFFFFFh +
mov [esp+20h] eax +
lea eax [esp+64h] +
mov [esp+8] ebx +
mov [esp] eax +
mov dword ptr [esp+44h] 20202020h +
mov dword ptr [esp+48h] 20202020h +
mov dword ptr [esp+4Ch] 20202020h +
mov dword ptr [esp+50h] 20202020h +
mov dword ptr [esp+54h] 20202020h +
mov dword ptr [esp+58h] 20202020h +
mov dword ptr [esp+5Ch] 20202020h +
mov dword ptr [esp+60h] 20202020h +
mov dword ptr [esp+64h] 20202020h +
mov dword ptr [esp+68h] 20202020h +
mov dword ptr [esp+6Ch] 20202020h +
mov byte ptr [esp+34h] 2Fh +
call sub_454700  +
test eax eax +
jz loc_457872  +
xor eax eax +
test byte ptr [esi+2Ah] 4 +
jz loc_457880  +
mov [esp+0Ch] eax +
lea eax [esp+44h] +
mov [esp] eax +
lea edi [esp+34h] +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 0Ch +
call sub_454660  +
lea eax [esp+50h] +
mov [esp] eax +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 6 +
call sub_454660  +
lea eax [esp+56h] +
mov [esp] eax +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] offset aLd_1 +
mov dword ptr [esp+4] 6 +
call sub_454660  +
lea eax [esp+5Ch] +
mov [esp] eax +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] offset a7lo +
mov dword ptr [esp+4] 8 +
call sub_454660  +
mov edx 0A60h +
mov [esp+8] esi +
mov dword ptr [esp+4] 3Ch +
mov [esp] edi +
mov [esp+6Eh] dx +
call sub_46FB80  +
cmp eax 3Ch +
jz loc_457891  +
xor eax eax +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp] 0 +
call time  +
jmp loc_4577BB  +
***
mov [esp+4] ebp +
mov [esp] esi +
call sub_459DA0  +
test eax eax +
jz loc_457872  +
mov eax [esi+94h] +
test ebp ebp +
mov edx eax +
mov [esp+24h] eax +
jz loc_457A1A  +
mov eax [esp+94h] +
mov dword ptr [esp+1Ch] 0 +
lea eax [ebx+eax+44h] +
xor ebx ebx +
test edx edx +
mov [esp+18h] eax +
jz loc_45796A  +
cmp ebp ebx +
jbe loc_457940  +
mov edx [esp+98h] +
lea eax [ebx+ebx*2] +
lea edx [edx+eax*8] +
mov eax [edx+8] +
cmp eax [esp+24h] +
mov [esp+10h] eax +
jnz loc_457940  +
mov ecx [esp+1Ch] +
mov eax [esp+18h] +
test ecx ecx +
mov [esp+14h] eax +
jnz loc_457A02  +
mov edi edx +
add ebx 1 +
jmp loc_457929  +
cmp ebx ebp +
jz loc_457940  +
mov eax [edi+20h] +
add edi 18h +
cmp eax [esp+10h] +
lea ecx [ebx+1] +
jnz loc_457940  +
mov eax [esp+14h] +
mov ebx ecx +
mov [esp+4] eax +
mov [esp] esi +
call sub_459DA0  +
test eax eax +
jnz loc_457910  +
jmp loc_457872  +
***
add dword ptr [esp+18h] 3Ch +
adc dword ptr [esp+1Ch] 0 +
test byte ptr [esi+2Bh] 40h +
jz loc_4579C5  +
mov eax [esp+24h] +
cmp ebp ebx +
mov eax [eax+90h] +
mov [esp+24h] eax +
jbe loc_45796A  +
test eax eax +
jnz loc_4578D6  +
mov ecx [esp+98h] +
xor edx edx +
mov [esp+90h] esi +
mov [esp+9Ch] ebp +
mov ebp edx +
mov esi ecx +
jmp loc_457996  +
add ebp 1 +
add esi 18h +
cmp [esp+9Ch] ebp +
jbe loc_457A13  +
mov eax [esi] +
mov edi [eax] +
mov [esp] edi +
call strlen  +
mov [esp] edi +
lea ebx [eax+1] +
mov eax [esp+90h] +
mov [esp+4] ebx +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax ebx +
jz loc_457987  +
jmp loc_457872  +
***
mov eax [esp+24h] +
xor edx edx +
mov dword ptr [esp+2Ch] 0 +
mov eax [eax+88h] +
mov eax [eax+4] +
add eax [esp+18h] +
adc edx [esp+1Ch] +
mov ecx eax +
and ecx 1 +
mov [esp+28h] ecx +
add eax [esp+28h] +
adc edx [esp+2Ch] +
mov [esp+18h] eax +
mov [esp+1Ch] edx +
jmp loc_457950  +
***
mov dword ptr [esp] 12h +
call sub_44BAF0  +
jmp loc_457872  +
***
mov esi [esp+90h] +
mov eax [esp+20h] +
test eax eax +
jnz loc_457A2C  +
mov eax 1 +
jmp loc_457874  +
***
mov [esp+8] esi +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset unk_4FE5CC +
call sub_46FB80  +
sub eax 1 +
setz al  +
movzx eax al +
jmp loc_457874  +
***
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [esp+30h] +
movzx eax byte ptr [ebx+28h] +
test al 8 +
jz loc_457A7D  +
and eax 7 +
cmp al 2 +
jz loc_457B01  +
mov eax [ebx+88h] +
test eax eax +
jz loc_457AE1  +
mov esi [eax+18h] +
test esi esi +
jz loc_457AE1  +
mov edx [eax+24h] +
mov eax [eax+20h] +
mov dword ptr [esp+8] 0 +
mov [esp] esi +
mov [esp+14h] edx +
mov [esp+10h] eax +
lea eax [esp+10h] +
mov [esp+4] eax +
call sub_4A7D20  +
test eax eax +
mov edi eax +
jz loc_457AE1  +
mov eax [eax] +
cmp [eax+8] ebx +
jz loc_457AD5  +
mov dword ptr [esp+4] 0AEDh +
mov dword ptr [esp] offset a____Binutil_20 +
call sub_44BA40  +
mov [esp+4] edi +
mov [esp] esi +
call sub_4A7DE0  +
test byte ptr [ebx+2Ch] 1 +
jz loc_457AF5  +
mov eax [ebx+9Ch] +
mov eax [eax+24h] +
mov [esp] ebx +
call eax  +
add esp 20h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [ebx+98h] +
test eax eax +
jnz loc_457B12  +
jmp loc_457B24  +
mov eax esi +
mov esi [eax+90h] +
mov [esp] eax +
call sub_4586F0  +
test esi esi +
jnz loc_457B10  +
mov eax [ebx+0A0h] +
mov esi [eax+8] +
test esi esi +
jz loc_457A7D  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] offset sub_454640 +
mov [esp] esi +
call sub_4A7E30  +
mov [esp] esi +
call sub_4A7870  +
mov eax [ebx+0A0h] +
mov dword ptr [eax+8] 0 +
jmp loc_457A7D  +
***
mov eax [esp+arg_0] +
mov eax [eax+8] +
mov edx [eax+14h] +
mov eax [eax+10h] +
retn   +
***
mov edx [esp+arg_C] +
mov eax [esp+arg_0] +
mov ecx [esp+arg_4] +
mov ebx [esp+arg_8] +
cmp edx 1 +
mov esi [eax+8] +
jz loc_457BC0  +
cmp edx 2 +
mov eax 0FFFFFFFFh +
jz loc_457BAA  +
xor eax eax +
test edx edx +
jz loc_457BB0  +
pop ebx  +
pop esi  +
retn   +
mov [esi+10h] ecx +
xor eax eax +
mov [esi+14h] ebx +
pop ebx  +
pop esi  +
retn   +
add [esi+10h] ecx +
adc [esi+14h] ebx +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 20h +
mov ecx [esp+20h+arg_0] +
mov ebx [ecx+8] +
mov eax [ebx+10h] +
mov edx [ebx+14h] +
mov esi [ebx+4] +
mov edi [ebx] +
mov [esp+20h+var_C] eax +
mov eax [esp+20h+arg_8] +
mov [esp+20h+var_8] edx +
mov edx [esp+20h+arg_C] +
mov [esp+20h+var_20] ecx +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_14] eax +
mov eax [esp+20h+arg_4] +
mov [esp+20h+var_10] edx +
mov [esp+20h+var_18] eax +
call esi  +
test edx edx +
js loc_457C1B  +
add [ebx+10h] eax +
adc [ebx+14h] edx +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax 0FFFFFFFFh +
mov edx 0FFFFFFFFh +
retn   +
***
sub esp 18h +
mov ebx [esp+18h+arg_0] +
mov ecx [ebx+8] +
mov edx [ecx+8] +
test edx edx +
jz loc_457C5F  +
mov eax [ecx] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call edx  +
mov dword ptr [ebx+8] 0 +
add esp 18h +
pop ebx  +
retn   +
***
retn   +
***
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+28h+arg_4] +
mov ebp [esp+28h+arg_0] +
test esi 1 +
mov edi esi +
mov ebx [ebp+8] +
jnz loc_457CF8  +
test edi 2 +
jnz loc_457D08  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_457CD0  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_457CD8  +
mov byte ptr [edi] 0 +
mov edx [ebx+0Ch] +
xor eax eax +
test edx edx +
jz loc_457CF0  +
mov eax [ebx] +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_28] ebp +
mov [esp+28h+var_24] eax +
call edx  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edi [esi+1] +
mov dl 2Fh +
test edi 2 +
mov byte ptr [esi] 0 +
jz loc_457CB9  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
sub edx 2 +
jmp loc_457CB9  +
***
sub esp 18h +
mov eax [eax+0A8h] +
test eax eax +
jz loc_457D49  +
lea eax [ebx+48h] +
mov [esp+18h+var_18] eax +
call sub_44DF50  +
mov eax [ebx+0A8h] +
mov [esp+18h+var_18] eax +
call sub_4A9E80  +
mov eax [ebx] +
test eax eax +
jz loc_457D57  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+88h] +
mov [esp+18h+var_18] eax +
call free  +
mov [esp+18h+var_18] ebx +
call free  +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov edi [esp+2Ch+arg_4] +
test ebx ebx +
jz loc_457E40  +
test edi edi +
jz loc_457E20  +
mov [esp+2Ch+var_28] offset a_gnu_debuglink +
mov [esp+2Ch+var_2C] ebx +
call sub_44D4B0  +
test eax eax +
mov esi eax +
jz loc_457DDD  +
lea eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebx +
call sub_44DE10  +
test eax eax +
jnz loc_457DE7  +
mov eax [esp+2Ch+var_10] +
test eax eax +
jz loc_457DDD  +
mov [esp+2Ch+var_2C] eax +
call free  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+24h] +
mov ebp [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] ebp +
call sub_4BB590  +
add eax 4 +
and eax 0FFFFFFFCh +
cmp eax [esi+24h] +
jnb loc_457DDD  +
mov edx [ebx+4] +
add eax [esp+2Ch+var_10] +
mov edx [edx+28h] +
mov [esp+2Ch+var_2C] eax +
call edx  +
mov [edi] eax +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_28] 49Fh +
mov [esp+2Ch+var_2C] offset a____Binutil_21 +
call sub_44BA40  +
jmp loc_457D9F  +
mov [esp+2Ch+var_28] 49Eh +
mov [esp+2Ch+var_2C] offset a____Binutil_21 +
call sub_44BA40  +
jmp loc_457D97  +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_457E96  +
mov [esp+18h+var_14] offset aRb_1 +
mov [esp+18h+var_18] ebx +
call j_j_fopen  +
xor edx edx +
test eax eax +
jz loc_457E8F  +
mov [esp+18h+var_18] eax +
call fclose  +
mov edx 1 +
add esp 18h +
mov eax edx +
pop ebx  +
retn   +
mov [esp+18h+var_14] 529h +
mov [esp+18h+var_18] offset a____Binutil_21 +
call sub_44BA40  +
jmp loc_457E6C  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
test ebx ebx +
jz loc_457F5E  +
mov [esp+14h+var_10] offset aRb_1 +
mov [esp+14h+var_14] ebx +
call j_j_fopen  +
test eax eax +
mov esi eax +
jz loc_457F56  +
xor ebx ebx +
lea esi [esi+0] +
mov [esp+14h+var_8] esi +
mov [esp+14h+var_C] 2000h +
mov [esp+14h+var_10] 1 +
mov [esp+14h+var_14] offset unk_511EC0 +
call fread  +
test eax eax +
jz loc_457F3F  +
add eax offset unk_511EC0 +
mov edx ebx +
cmp eax offset unk_511EC0 +
not edx  +
jbe loc_457F39  +
mov ecx offset unk_511EC0 +
lea esi [esi+0] +
mov ebx edx +
add ecx 1 +
xor bl [ecx-1] +
shr edx 8 +
movzx ebx bl +
xor edx ds:dword_4FE6A0[ebx*4] +
cmp ecx eax +
jnz loc_457F20  +
not edx  +
mov ebx edx +
jmp loc_457EE0  +
mov [esp+14h+var_14] esi +
call fclose  +
xor eax eax +
cmp ebx [esp+14h+arg_4] +
setz al  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_10] 508h +
mov [esp+14h+var_14] offset a____Binutil_21 +
call sub_44BA40  +
jmp loc_457EC1  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
test eax eax +
mov [esp+48h+var_34] edx +
jz loc_458203  +
mov esi [esp+48h+var_34] +
mov eax offset a__23 +
mov edx [ebp+0] +
test esi esi +
cmovnz eax esi +
test edx edx +
mov [esp+48h+var_34] eax +
jz loc_458265  +
lea eax [esp+48h+var_1C] +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebp +
call ecx  +
test eax eax +
mov esi eax +
jz loc_45825E  +
cmp byte ptr [eax] 0 +
jz loc_45822B  +
mov edi [ebp+0] +
mov [esp+48h+var_48] edi +
call strlen  +
test eax eax +
jz loc_458224  +
movzx edx byte ptr [edi+eax-1] +
lea ebx [eax-1] +
cmp dl 5Ch +
jz loc_45824D  +
cmp dl 2Fh +
jnz loc_45801A  +
jmp loc_45824D  +
movzx eax byte ptr [edi+ebx-1] +
lea edx [ebx-1] +
cmp al 5Ch +
jz loc_458134  +
cmp al 2Fh +
jz loc_458134  +
mov ebx edx +
test ebx ebx +
jnz loc_458000  +
mov edx 1 +
mov [esp+48h+var_48] edx +
call sub_459B80  +
test eax eax +
mov [esp+48h+var_30] eax +
jz loc_458278  +
mov eax [ebp+0] +
mov edi [esp+48h+var_30] +
mov [esp+48h+var_40] ebx +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] edi +
call memcpy  +
mov byte ptr [edi+ebx] 0 +
mov eax [ebp+0] +
mov [esp+48h+var_48] eax +
call sub_4A95A0  +
mov [esp+48h+var_48] eax +
mov edi eax +
call strlen  +
test eax eax +
jz loc_458246  +
movzx ecx byte ptr [edi+eax-1] +
lea ebp [eax-1] +
cmp cl 2Fh +
jz loc_458257  +
cmp cl 5Ch +
jnz loc_4580A2  +
jmp loc_458257  +
movzx eax byte ptr [edi+ebp-1] +
lea edx [ebp-1] +
cmp al 5Ch +
jz loc_4580A6  +
cmp al 2Fh +
jz loc_4580A6  +
mov ebp edx +
test ebp ebp +
jnz loc_458090  +
mov eax [esp+48h+var_34] +
mov byte ptr [edi+ebp] 0 +
mov [esp+48h+var_48] eax +
call strlen  +
mov [esp+48h+var_48] esi +
mov [esp+48h+var_2C] eax +
call strlen  +
mov ecx [esp+48h+var_2C] +
cmp ebp ebx +
cmovnb ebx ebp +
lea eax [ecx+eax+9] +
add ebx eax +
mov [esp+48h+var_48] ebx +
call sub_459B80  +
test eax eax +
mov ebx eax +
jz loc_45810E  +
mov eax [esp+48h+var_30] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call sub_4AC4B0  +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] eax +
call strcpy  +
mov eax [esp+48h+var_1C] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call [esp+48h+arg_0]  +
test eax eax +
jz loc_458140  +
mov [esp+48h+var_48] esi +
call free  +
mov eax [esp+48h+var_30] +
mov [esp+48h+var_48] eax +
call free  +
mov [esp+48h+var_48] edi +
call free  +
mov eax ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edx [ebx+1] +
jmp loc_458023  +
mov eax [esp+48h+var_30] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call sub_4AC4B0  +
mov dword ptr [eax] 6265642Eh +
add eax 7 +
mov dword ptr [eax-3] 2F6775h +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] eax +
call strcpy  +
mov eax [esp+48h+var_1C] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call [esp+48h+arg_0]  +
test eax eax +
jnz loc_45810E  +
mov eax [esp+48h+var_34] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call sub_4AC4B0  +
mov ebp eax +
mov eax [esp+48h+var_34] +
mov [esp+48h+var_48] eax +
call strlen  +
cmp eax 1 +
jz loc_4581BB  +
mov ecx [esp+48h+var_34] +
cmp byte ptr [ecx+eax-1] 2Fh +
jz loc_4581BB  +
cmp byte ptr [edi] 2Fh +
jz loc_4581BB  +
mov eax 2Fh +
mov [ebp+0] ax +
mov [esp+48h+var_48] ebx +
call strlen  +
mov [esp+48h+var_44] edi +
add eax ebx +
mov [esp+48h+var_48] eax +
call sub_4AC4B0  +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] eax +
call strcpy  +
mov eax [esp+48h+var_1C] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call [esp+48h+arg_0]  +
test eax eax +
jnz loc_45810E  +
mov [esp+48h+var_48] ebx +
xor ebx ebx +
call free  +
jmp loc_45810E  +
mov [esp+48h+var_44] 559h +
mov [esp+48h+var_48] offset a____Binutil_21 +
mov [esp+48h+var_30] ecx +
call sub_44BA40  +
mov ecx [esp+48h+var_30] +
jmp loc_457F95  +
xor ebx ebx +
jmp loc_45801E  +
mov [esp+48h+var_48] eax +
call free  +
mov [esp+48h+var_48] 10h +
call sub_44BAF0  +
xor eax eax +
jmp loc_45812C  +
xor ebp ebp +
jmp loc_4580A6  +
lea edx [eax+1] +
mov ebx eax +
jmp loc_458023  +
mov ebp eax +
jmp loc_4580A6  +
xor eax eax +
jmp loc_45812C  +
mov [esp+48h+var_48] 5 +
call sub_44BAF0  +
xor eax eax +
jmp loc_45812C  +
mov [esp+48h+var_48] esi +
call free  +
xor eax eax +
jmp loc_45812C  +
***
mov [esp+18h+var_18] 0B0h +
call sub_459D10  +
test eax eax +
mov ebx eax +
jz loc_458340  +
mov eax ds:dword_50FEA0 +
test eax eax +
jnz loc_458310  +
mov eax ds:dword_513EC4 +
lea edx [eax+1] +
mov ds:dword_513EC4 edx +
mov [ebx+24h] eax +
call sub_4A9D10  +
test eax eax +
mov [ebx+0A8h] eax +
jz loc_458344  +
lea eax [ebx+48h] +
mov dword ptr [ebx+84h] offset asc_4FE3C0 +
mov [esp+18h+var_C] 0Dh +
mov [esp+18h+var_10] 0B8h +
mov [esp+18h+var_14] offset sub_44D350 +
mov [esp+18h+var_18] eax +
call sub_44DE40  +
test eax eax +
jz loc_458330  +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
mov ecx ds:dword_513EC0 +
sub eax 1 +
mov ds:dword_50FEA0 eax +
lea edx [ecx-1] +
mov ds:dword_513EC0 edx +
mov [ebx+24h] edx +
jmp loc_4582C4  +
mov [esp+18h+var_18] ebx +
xor ebx ebx +
call free  +
jmp loc_458304  +
xor ebx ebx +
jmp loc_458304  +
mov [esp+18h+var_18] 6 +
call sub_44BAF0  +
mov [esp+18h+var_18] ebx +
xor ebx ebx +
call free  +
jmp loc_458304  +
***
sub esp 4 +
mov ebx [esp+4+arg_0] +
call sub_458290  +
test eax eax +
jz loc_4583E0  +
mov edx [ebx+4] +
mov [eax+4] edx +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
cmp dword ptr [ebx+0Ch] offset off_4FEAA0 +
jz loc_4583D5  +
movzx edx byte ptr [eax+28h] +
mov [eax+8Ch] ebx +
movzx ecx byte ptr [ebx+2Bh] +
and edx 0FFFFFFE7h +
or edx 8 +
and ecx 1 +
mov [eax+28h] dl +
movzx edx byte ptr [eax+2Bh] +
and edx 0FFFFFFFEh +
or edx ecx +
movzx ecx byte ptr [eax+2Ch] +
mov [eax+2Bh] dl +
movzx esi byte ptr [ebx+2Ch] +
and edx 0FFFFFFF7h +
and ecx 0FFFFFFEFh +
and esi 10h +
or ecx esi +
mov [eax+2Ch] cl +
movzx ecx byte ptr [ebx+2Bh] +
and ecx 8 +
or edx ecx +
mov [eax+2Bh] dl +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
mov edx [ebx+8] +
mov [eax+8] edx +
jmp loc_458387  +
xor eax eax +
jmp loc_4583CF  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov eax [ebx+0A8h] +
test eax eax +
jz loc_45844E  +
lea eax [ebx+48h] +
mov [esp] eax +
call sub_44DF50  +
mov eax [ebx+0A8h] +
mov [esp] eax +
call sub_4A9E80  +
mov dword ptr [ebx+64h] 0 +
mov dword ptr [ebx+68h] 0 +
mov dword ptr [ebx+78h] 0 +
mov dword ptr [ebx+0A0h] 0 +
mov dword ptr [ebx+0A4h] 0 +
mov dword ptr [ebx+0A8h] 0 +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_8] +
mov esi [esp+10h+arg_C] +
call sub_458290  +
test eax eax +
mov ebx eax +
jz loc_458530  +
mov [esp+10h+var_C] eax +
mov eax [esp+10h+arg_4] +
mov [esp+10h+var_10] eax +
call sub_44CEF0  +
test eax eax +
jz loc_458580  +
cmp esi 0FFFFFFFFh +
mov [esp+10h+var_C] edi +
jz loc_458546  +
mov [esp+10h+var_10] esi +
call _fdopen  +
mov [ebx+8] eax +
test eax eax +
jz loc_45859E  +
mov eax [esp+10h+arg_0] +
mov [esp+10h+var_10] eax +
call sub_4A06C0  +
mov [ebx] eax +
movzx eax byte ptr [edi] +
cmp al 72h +
setz dl  +
cmp al 77h +
jz loc_458510  +
test dl dl +
jnz loc_458510  +
cmp al 61h +
jz loc_45856D  +
movzx eax byte ptr [ebx+28h] +
and eax 0FFFFFFE7h +
or eax 10h +
mov [ebx+28h] al +
mov [esp+10h+var_10] ebx +
call sub_459260  +
test eax eax +
jz loc_458590  +
or byte ptr [ebx+2Bh] 2 +
cmp esi 0FFFFFFFFh +
jz loc_458560  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp byte ptr [edi+1] 2Bh +
jz loc_458577  +
test dl dl +
jz loc_4584DB  +
movzx eax byte ptr [ebx+28h] +
and eax 0FFFFFFE7h +
or eax 8 +
mov [ebx+28h] al +
jmp loc_4584E8  +
cmp esi 0FFFFFFFFh +
jz loc_458501  +
mov [esp+10h+var_10] esi +
call _close  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [esp+10h+arg_0] +
mov [esp+10h+var_10] eax +
call j_j_fopen  +
mov [ebx+8] eax +
jmp loc_4584AD  +
or byte ptr [ebx+2Ah] 80h +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp byte ptr [edi+1] 2Bh +
jnz loc_4584DB  +
or byte ptr [ebx+28h] 18h +
jmp loc_4584E8  +
cmp esi 0FFFFFFFFh +
jz loc_458590  +
mov [esp+10h+var_10] esi +
call _close  +
lea esi [esi+0] +
mov eax ebx +
xor ebx ebx +
call sub_457D20  +
jmp loc_458501  +
mov [esp+10h+var_10] 1 +
call sub_44BAF0  +
jmp loc_458590  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_10] 0FFFFFFFFh +
mov [esp+1Ch+var_14] offset aRb_1 +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_458460  +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov eax [esp+28h] +
mov dword ptr [esp+8] offset aRB_0 +
mov [esp+0Ch] eax +
mov eax [esp+24h] +
mov [esp+4] eax +
mov eax [esp+20h] +
mov [esp] eax +
call sub_458460  +
add esp 1Ch +
retn   +
***
push ebx  +
sub esp 18h +
call sub_458290  +
test eax eax +
mov ebx eax +
jz loc_458673  +
mov [esp+4] eax +
mov eax [esp+24h] +
mov [esp] eax +
call sub_44CEF0  +
test eax eax +
jz loc_458668  +
mov eax [esp+28h] +
mov [ebx+8] eax +
mov eax [esp+20h] +
mov [esp] eax +
call sub_4A06C0  +
mov [ebx] eax +
movzx eax byte ptr [ebx+28h] +
and eax 0FFFFFFE7h +
or eax 8 +
mov [ebx+28h] al +
mov [esp] ebx +
call sub_459260  +
test eax eax +
jz loc_458668  +
add esp 18h +
mov eax ebx +
pop ebx  +
retn   +
***
mov eax ebx +
xor ebx ebx +
call sub_457D20  +
jmp loc_458661  +
***
xor ebx ebx +
jmp loc_458661  +
***
call sub_458290  +
test eax eax +
mov ebx eax +
jz loc_4586E4  +
mov [esp+18h+var_14] eax +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] eax +
call sub_44CEF0  +
test eax eax +
jz loc_4586DD  +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_18] eax +
call sub_4A06C0  +
mov [ebx] eax +
movzx eax byte ptr [ebx+28h] +
and eax 0FFFFFFE7h +
or eax 10h +
mov [ebx+28h] al +
mov [esp+18h+var_18] ebx +
call sub_459390  +
test eax eax +
jz loc_4586D1  +
mov eax ebx +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] 1 +
call sub_44BAF0  +
mov eax ebx +
call sub_457D20  +
xor eax eax +
jmp loc_4586CC  +
***
push ebx  +
sub esp 40h +
mov ebx [esp+40h+arg_0] +
movzx eax byte ptr [ebx+28h] +
test al 10h +
jz loc_458718  +
mov edx [ebx+4] +
and eax 7 +
mov eax [edx+eax*4+84h] +
mov [esp+40h+var_40] ebx +
call eax  +
test eax eax +
jz loc_45872A  +
mov eax [ebx+4] +
mov eax [eax+94h] +
mov [esp+40h+var_40] ebx +
call eax  +
test eax eax +
jnz loc_458733  +
add esp 40h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [ebx+0Ch] +
mov eax [eax+10h] +
mov [esp+40h+var_40] ebx +
call eax  +
test eax eax +
setz al  +
movzx eax al +
mov esi eax +
jz loc_458760  +
mov eax ebx +
call sub_457D20  +
add esp 40h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx eax byte ptr [ebx+28h] +
and eax 18h +
cmp al 10h +
jnz loc_45874A  +
mov eax [ebx+28h] +
shr eax 5 +
test al 42h +
jz loc_45874A  +
mov eax [ebx] +
lea edx [esp+40h+var_30] +
mov [esp+40h+var_3C] edx +
mov [esp+40h+var_40] eax +
call ds:_stati64  +
test eax eax +
jnz loc_45874A  +
movzx eax [esp+40h+var_2A] +
and ax 0F000h +
cmp ax 8000h +
jnz loc_45874A  +
mov [esp+40h+var_40] 0 +
call _umask  +
mov [esp+40h+var_40] eax +
mov edi eax +
call _umask  +
movzx ecx [esp+40h+var_2A] +
mov eax edi +
mov edx [ebx] +
not eax  +
and eax 49h +
or eax ecx +
and eax 1FFh +
mov [esp+40h+var_3C] eax +
mov [esp+40h+var_40] edx +
call _chmod  +
jmp loc_45874A  +
***
push ebx  +
sub esp 40h +
mov ebx [esp+40h+arg_0] +
mov [esp+40h+var_40] ebx +
call sub_459320  +
test eax eax +
mov esi eax +
jnz loc_458808  +
mov eax ebx +
call sub_457D20  +
add esp 40h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx eax byte ptr [ebx+28h] +
and eax 18h +
cmp al 10h +
jnz loc_4587F8  +
mov eax [ebx+28h] +
shr eax 5 +
test al 42h +
jz loc_4587F8  +
mov eax [ebx] +
lea edx [esp+40h+var_30] +
mov [esp+40h+var_3C] edx +
mov [esp+40h+var_40] eax +
call ds:_stati64  +
test eax eax +
jnz loc_4587F8  +
movzx eax [esp+40h+var_2A] +
and ax 0F000h +
cmp ax 8000h +
jnz loc_4587F8  +
mov [esp+40h+var_40] 0 +
call _umask  +
mov [esp+40h+var_40] eax +
mov edi eax +
call _umask  +
movzx ecx [esp+40h+var_2A] +
mov eax edi +
mov edx [ebx] +
not eax  +
and eax 49h +
or eax ecx +
and eax 1FFh +
mov [esp+40h+var_3C] eax +
mov [esp+40h+var_40] edx +
call _chmod  +
jmp loc_4587F8  +
***
sub esp 14h +
mov esi [esp+14h+arg_4] +
call sub_458290  +
test eax eax +
mov ebx eax +
jz loc_4588C8  +
mov eax [esp+14h+arg_0] +
mov [esp+14h+var_14] eax +
call sub_4A06C0  +
test esi esi +
mov [ebx] eax +
jz loc_4588AC  +
mov eax [esi+4] +
mov [ebx+4] eax +
and byte ptr [ebx+28h] 0E7h +
mov [esp+14h+var_10] 1 +
mov [esp+14h+var_14] ebx +
call sub_454060  +
mov eax ebx +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
xor eax eax +
jmp loc_4588C2  +
***
mov ebx [esp+18h+arg_0] +
test byte ptr [ebx+28h] 18h +
jnz loc_458940  +
mov [esp+18h+var_18] 8 +
call sub_459B80  +
test eax eax +
jz loc_458953  +
mov [ebx+8] eax +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
or dword ptr [ebx+28h] 10000h +
movzx eax byte ptr [ebx+28h] +
mov dword ptr [ebx+0Ch] offset off_5001E0 +
mov dword ptr [ebx+38h] 0 +
mov dword ptr [ebx+3Ch] 0 +
and eax 0FFFFFFE7h +
or eax 10h +
mov [ebx+28h] al +
mov eax 1 +
mov dword ptr [ebx+18h] 0 +
mov dword ptr [ebx+1Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] 5 +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
xor eax eax +
jmp loc_45893A  +
***
mov ebx [esp+18h+arg_0] +
movzx eax byte ptr [ebx+28h] +
mov edx eax +
and edx 18h +
cmp dl 10h +
jnz loc_45897C  +
test byte ptr [ebx+2Ah] 1 +
jnz loc_458990  +
mov [esp+18h+var_18] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov edx [ebx+4] +
and eax 7 +
mov eax [edx+eax*4+84h] +
mov [esp+18h+var_18] ebx +
call eax  +
test eax eax +
jnz loc_4589B0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov eax [ebx+4] +
mov eax [eax+94h] +
mov [esp+18h+var_18] ebx +
call eax  +
test eax eax +
jz loc_4589A6  +
and byte ptr [ebx+28h] 0F8h +
and byte ptr [ebx+2Bh] 0EDh +
and byte ptr [ebx+2Ah] 7Fh +
or dword ptr [ebx+28h] 10000h +
movzx eax byte ptr [ebx+2Bh] +
mov dword ptr [ebx+84h] offset asc_4FE3C0 +
mov dword ptr [ebx+18h] 0 +
mov dword ptr [ebx+1Ch] 0 +
and eax 0FFFFFFFBh +
or eax 1 +
mov [ebx+2Bh] al +
movzx eax byte ptr [ebx+28h] +
mov dword ptr [ebx+8Ch] 0 +
mov dword ptr [ebx+38h] 0 +
mov dword ptr [ebx+3Ch] 0 +
and eax 0FFFFFFE7h +
or eax 8 +
mov [ebx+28h] al +
mov dword ptr [ebx+6Ch] 0 +
mov dword ptr [ebx+0A4h] 0 +
mov dword ptr [ebx+64h] 0 +
mov dword ptr [ebx+7Ch] 0 +
mov dword ptr [ebx+78h] 0 +
mov dword ptr [ebx+0A0h] 0 +
mov [esp+18h+var_18] ebx +
call sub_44D460  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] ebx +
call sub_454030  +
mov eax 1 +
jmp loc_45898A  +
***
jmp sub_458A80  +
***
mov ecx [esp+18h+arg_4] +
test ecx ecx +
js loc_458AE6  +
mov eax [esp+18h+arg_0] +
mov edx [eax+0A8h] +
jz loc_458AB5  +
add ecx 7 +
and ecx 0FFFFFFF8h +
jnz loc_458ABA  +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call sub_4A9D70  +
test eax eax +
jz loc_458AD0  +
add esp 18h +
pop ebx  +
retn   +
mov ecx 8 +
mov ebx [edx+4] +
cmp ebx ecx +
jb loc_458AA0  +
mov eax [edx] +
sub ebx ecx +
mov [edx+4] ebx +
add eax ecx +
mov [edx] eax +
sub eax ecx +
jmp loc_458AAC  +
mov [esp+18h+var_18] 6 +
mov [esp+18h+var_C] eax +
call sub_44BAF0  +
mov eax [esp+18h+var_C] +
jmp loc_458AB0  +
mov [esp+18h+var_18] 6 +
call sub_44BAF0  +
xor eax eax +
jmp loc_458AB0  +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov ecx [esp+14h+arg_8] +
mov esi [esp+14h+arg_0] +
mov eax ebx +
or eax ecx +
cmp eax 0FFFFh +
jbe loc_458B2D  +
test ecx ecx +
jz loc_458B2D  +
xor edx edx +
mov eax 0FFFFFFFFh +
div  ecx +
cmp ebx eax +
ja loc_458B42  +
imul ecx ebx +
mov [esp+14h+arg_0] esi +
mov [esp+14h+arg_4] ecx +
add esp 14h +
pop ebx  +
pop esi  +
jmp sub_458A80  +
mov [esp+14h+var_14] 6 +
call sub_44BAF0  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_4] +
mov eax [esp+14h+arg_0] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_458B93  +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] eax +
call memset  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
call sub_458290  +
test eax eax +
mov ebx eax +
jz loc_458C31  +
mov [esp+4] eax +
mov eax [esp+24h] +
mov [esp] eax +
call sub_44CEF0  +
test eax eax +
jz loc_458C35  +
mov eax [esp+20h] +
mov [esp] eax +
call sub_4A06C0  +
mov [ebx] eax +
movzx eax byte ptr [ebx+28h] +
and eax 0FFFFFFE7h +
or eax 8 +
mov [ebx+28h] al +
mov eax [esp+2Ch] +
mov [esp] ebx +
mov [esp+4] eax +
call dword ptr [esp+28h]  +
test eax eax +
mov esi eax +
jz loc_458C35  +
mov dword ptr [esp+4] 18h +
mov [esp] ebx +
call sub_458B60  +
mov edx [esp+30h] +
mov [eax+4] edx +
mov edx [esp+34h] +
mov [eax] esi +
mov [eax+8] edx +
mov edx [esp+38h] +
mov [eax+0Ch] edx +
mov [ebx+8] eax +
mov eax ebx +
mov dword ptr [ebx+0Ch] offset off_4FEAA0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
xor eax eax +
jmp loc_458C2B  +
***
mov eax ebx +
call sub_457D20  +
xor eax eax +
nop   +
jmp loc_458C2B  +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov ecx [esp+14h+arg_8] +
mov eax ebx +
or eax ecx +
cmp eax 0FFFFh +
jbe loc_458C6C  +
test ecx ecx +
jnz loc_458CA5  +
mov esi ebx +
mov eax [esp+14h+arg_0] +
imul esi ecx +
mov [esp+14h+var_14] eax +
mov [esp+14h+var_10] esi +
call sub_458A80  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_458C9F  +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] ebx +
call memset  +
mov eax ebx +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
xor edx edx +
mov eax 0FFFFFFFFh +
div  ecx +
cmp ebx eax +
jbe loc_458C6C  +
mov [esp+14h+var_14] 6 +
call sub_44BAF0  +
xor eax eax +
jmp loc_458C9F  +
***
mov eax [esp+arg_0] +
mov eax [eax+0A8h] +
mov [esp+arg_0] eax +
jmp sub_4A9EB0  +
***
push ebx  +
mov edx [esp+0Ch] +
mov ebx [esp+10h] +
mov eax [esp+8] +
add ebx edx +
cmp edx ebx +
not eax  +
jnb loc_458D1E  +
mov ecx eax +
add edx 1 +
xor cl [edx-1] +
shr eax 8 +
movzx ecx cl +
xor eax ds:dword_4FE6A0[ecx*4] +
cmp edx ebx +
jnz loc_458D05  +
not eax  +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov edi [esp+2Ch+arg_4] +
test ebx ebx +
jz loc_458E10  +
test edi edi +
jz loc_458E30  +
mov eax [esp+2Ch+arg_8] +
test eax eax +
jz loc_458DF4  +
mov [esp+2Ch+var_28] offset a_gnu_debugaltl +
mov [esp+2Ch+var_2C] ebx +
call sub_44D4B0  +
test eax eax +
mov esi eax +
jz loc_458D99  +
lea eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebx +
call sub_44DE10  +
test eax eax +
jnz loc_458DA3  +
mov eax [esp+2Ch+var_10] +
test eax eax +
jz loc_458D99  +
mov [esp+2Ch+var_2C] eax +
call free  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+24h] +
mov ebx [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] ebx +
call sub_4BB590  +
lea ebp [eax+1] +
mov eax [esi+24h] +
cmp ebp eax +
jnb loc_458D99  +
sub eax ebp +
mov [edi] eax +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
mov ecx [esp+2Ch+arg_8] +
mov edx [esp+2Ch+var_10] +
add edx ebp +
mov [ecx] eax +
mov ecx [edi] +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_24] ecx +
call memcpy  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_28] 4D8h +
mov [esp+2Ch+var_2C] offset a____Binutil_21 +
call sub_44BA40  +
jmp loc_458D5B  +
mov [esp+2Ch+var_28] 4D6h +
mov [esp+2Ch+var_2C] offset a____Binutil_21 +
call sub_44BA40  +
jmp loc_458D47  +
mov [esp+2Ch+var_28] 4D7h +
mov [esp+2Ch+var_2C] offset a____Binutil_21 +
call sub_44BA40  +
jmp loc_458D4F  +
***
lea eax [esp+28h+var_C] +
mov [esp+28h+var_20] eax +
lea eax [esp+28h+var_10] +
mov [esp+28h+var_24] eax +
mov eax [esp+28h+arg_0] +
mov [esp+28h+var_C] 0 +
mov [esp+28h+var_28] eax +
call sub_458D30  +
mov ebx eax +
mov eax [esp+28h+arg_4] +
mov dword ptr [eax] 0 +
mov eax [esp+28h+var_C] +
mov [esp+28h+var_28] eax +
call free  +
add esp 28h +
mov eax ebx +
pop ebx  +
retn   +
***
mov eax [esp+arg_0] +
mov ecx offset sub_457D80 +
mov edx [esp+arg_4] +
mov [esp+arg_0] offset sub_457EB0 +
jmp sub_457F80  +
***
mov eax [esp+arg_0] +
mov ecx offset sub_458E50 +
mov edx [esp+arg_4] +
mov [esp+arg_0] offset sub_457E60 +
jmp sub_457F80  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+20h] +
mov eax [esp+24h] +
test ebx ebx +
jz loc_458F60  +
test eax eax +
jz loc_458F60  +
mov [esp] eax +
call sub_4A8D80  +
mov dword ptr [esp+4] offset a_gnu_debuglink +
mov [esp] ebx +
mov edi eax +
call sub_44D4B0  +
test eax eax +
jnz loc_458F60  +
mov dword ptr [esp+8] 2108h +
mov dword ptr [esp+4] offset a_gnu_debuglink +
mov [esp] ebx +
call sub_44D970  +
test eax eax +
mov esi eax +
jz loc_458F75  +
mov [esp] edi +
call strlen  +
mov [esp+4] esi +
mov [esp] ebx +
add eax 4 +
and eax 0FFFFFFFCh +
add eax 4 +
mov [esp+8] eax +
call sub_44DB80  +
test eax eax +
jz loc_458F75  +
mov eax esi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov dword ptr [esp] 5 +
call sub_44BAF0  +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
xor eax eax +
jmp loc_458F59  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edx [esp+40h] +
mov edi [esp+48h] +
test edx edx +
jz loc_4590E5  +
mov eax [esp+44h] +
test eax eax +
jz loc_4590E5  +
test edi edi +
jz loc_4590E5  +
mov dword ptr [esp+4] offset aRb_1 +
mov [esp] edi +
call j_j_fopen  +
test eax eax +
mov esi eax +
jz loc_45910D  +
xor ebx ebx +
mov [esp+0Ch] esi +
mov dword ptr [esp+8] 2000h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset unk_50FEC0 +
call fread  +
test eax eax +
jz loc_45901D  +
add eax offset unk_50FEC0 +
not ebx  +
cmp eax offset unk_50FEC0 +
jbe loc_459019  +
mov edx offset unk_50FEC0 +
nop   +
mov ecx ebx +
add edx 1 +
xor cl [edx-1] +
shr ebx 8 +
movzx ecx cl +
xor ebx ds:dword_4FE6A0[ecx*4] +
cmp edx eax +
jnz loc_459000  +
not ebx  +
jmp loc_458FC7  +
***
mov [esp] esi +
call fclose  +
mov [esp] edi +
call sub_4A8D80  +
mov [esp] eax +
mov [esp+1Ch] eax +
call strlen  +
lea edi [eax+4] +
mov ebp eax +
and edi 0FFFFFFFCh +
lea eax [edi+4] +
mov [esp] eax +
mov [esp+18h] eax +
call sub_459B80  +
mov esi eax +
xor eax eax +
test esi esi +
jz loc_4590DD  +
mov ecx [esp+1Ch] +
mov [esp+8] ebp +
mov [esp] esi +
mov [esp+4] ecx +
call memcpy  +
mov edx edi +
add edi esi +
sub edx ebp +
mov eax edx +
lea edx [esi+ebp] +
mov [esp] edx +
mov [esp+8] eax +
mov dword ptr [esp+4] 0 +
call memset  +
mov edx [esp+40h] +
mov eax [edx+4] +
mov eax [eax+30h] +
mov [esp+4] edi +
mov [esp] ebx +
call eax  +
mov eax [esp+18h] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+10h] 0 +
mov [esp+8] esi +
mov [esp+14h] eax +
mov eax [esp+44h] +
mov [esp+4] eax +
mov eax [esp+40h] +
mov [esp] eax +
call sub_44DBC0  +
mov edx eax +
mov eax 1 +
test edx edx +
jz loc_4590FB  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp] 5 +
call sub_44BAF0  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp] esi +
call free  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp] 1 +
call sub_44BAF0  +
xor eax eax +
jmp loc_4590DD  +
***
push ebx  +
mov ebx eax +
sub esp 14h +
mov eax [eax+8] +
mov [esp+18h+var_18] eax +
call fclose  +
test eax eax +
jnz loc_459168  +
mov edx [ebx+10h] +
mov eax [ebx+14h] +
cmp ebx ds:dword_513EE0 +
mov [edx+14h] eax +
mov ecx [ebx+14h] +
mov [ecx+10h] edx +
jz loc_459180  +
mov dword ptr [ebx+8] 0 +
mov eax esi +
sub ds:dword_513EE4 1 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+18h+var_18] 1 +
xor si si +
call sub_44BAF0  +
jmp loc_45913B  +
xor eax eax +
cmp ebx ecx +
cmovnz eax ecx +
mov ds:dword_513EE0 eax +
jmp loc_459152  +
***
mov eax ds:dword_513EE0 +
test eax eax +
jz loc_4591E0  +
push ebx  +
sub esp 18h +
mov ebx [eax+10h] +
cmp byte ptr [ebx+2Ah] 0 +
jns loc_4591B1  +
jmp loc_4591C0  +
mov ebx [ebx+10h] +
cmp byte ptr [ebx+2Ah] 0 +
js loc_4591C0  +
cmp eax ebx +
jnz loc_4591A8  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
mov eax [ebx+8] +
mov [esp+1Ch+var_1C] eax +
call sub_46FAA0  +
mov [ebx+18h] eax +
mov eax ebx +
mov [ebx+1Ch] edx +
add esp 18h +
pop ebx  +
jmp sub_459120  +
mov eax 1 +
retn   +
***
sub esp 1Ch +
sub esp 0Ch +
xor eax eax +
mov edx [esp+0Ch+arg_0] +
cmp dword ptr [edx+0Ch] offset off_4FEB20 +
jz loc_459246  +
add esp 0Ch +
retn   +
mov ecx [edx+8] +
test ecx ecx +
jz loc_459242  +
mov eax edx +
call sub_459120  +
sub eax 1 +
jmp loc_459242  +
***
mov ebx [esp+18h+arg_0] +
mov eax [ebx+8] +
test eax eax +
jz loc_4592F8  +
mov eax ds:dword_513EE8 +
test eax eax +
jnz loc_459288  +
mov ds:dword_513EE8 0Ah +
mov al 0Ah +
cmp ds:dword_513EE4 eax +
jge loc_4592D0  +
mov eax ds:dword_513EE0 +
mov dword ptr [ebx+0Ch] offset off_4FEB20 +
test eax eax +
jz loc_4592F0  +
mov [ebx+14h] eax +
mov eax [eax+10h] +
mov [ebx+10h] eax +
mov [eax+14h] ebx +
mov eax [ebx+14h] +
mov [eax+10h] ebx +
add ds:dword_513EE4 1 +
mov eax 1 +
mov ds:dword_513EE0 ebx +
add esp 18h +
pop ebx  +
retn   +
call sub_459190  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_4592C4  +
mov eax ds:dword_513EE0 +
mov dword ptr [ebx+0Ch] offset off_4FEB20 +
test eax eax +
jnz loc_4592A0  +
lea esi [esi+0] +
mov [ebx+14h] ebx +
mov [ebx+10h] ebx +
jmp loc_4592B2  +
mov [esp+18h+var_14] 1FFh +
mov [esp+18h+var_18] offset a____Binutils_2 +
call sub_44BA40  +
jmp loc_459273  +
***
jmp sub_459320  +
***
mov eax [esp+arg_0] +
cmp dword ptr [eax+0Ch] offset off_4FEB20 +
jz loc_459333  +
mov eax 1 +
retn   +
mov edx [eax+8] +
test edx edx +
jz loc_45932D  +
jmp sub_459120  +
***
sub esp 8 +
mov edx ds:dword_513EE0 +
test edx edx +
jz loc_459367  +
cmp dword ptr [edx+0Ch] offset off_4FEB20 +
mov eax 1 +
jz loc_459370  +
and ebx eax +
test edx edx +
jnz loc_459353  +
add esp 8 +
mov eax ebx +
pop ebx  +
retn   +
mov ecx [edx+8] +
test ecx ecx +
jz loc_459361  +
mov eax edx +
call sub_459120  +
mov edx ds:dword_513EE0 +
jmp loc_459361  +
***
mov ebx [esp+48h+arg_0] +
or byte ptr [ebx+2Ah] 80h +
mov eax ds:dword_513EE8 +
test eax eax +
jnz loc_4593B1  +
mov ds:dword_513EE8 0Ah +
mov al 0Ah +
cmp ds:dword_513EE4 eax +
jge loc_459470  +
movzx eax byte ptr [ebx+28h] +
shr al 3 +
and eax 3 +
sub eax 2 +
cmp eax 1 +
ja loc_459484  +
test byte ptr [ebx+2Bh] 2 +
mov eax [ebx] +
jz loc_459410  +
mov [esp+48h+var_44] offset aRB +
mov [esp+48h+var_48] eax +
call j_j_fopen  +
test eax eax +
mov [ebx+8] eax +
jz loc_4594A0  +
mov [esp+48h+var_48] ebx +
call sub_459260  +
test eax eax +
jz loc_45947D  +
mov eax [ebx+8] +
add esp 48h +
pop ebx  +
retn   +
lea edx [esp+48h+var_38] +
mov [esp+48h+var_44] edx +
mov [esp+48h+var_48] eax +
call ds:_stati64  +
test eax eax +
jnz loc_459440  +
mov eax [esp+48h+var_1C] +
or eax [esp+48h+var_20] +
jz loc_459440  +
mov eax [ebx] +
mov [esp+48h+var_48] eax +
call sub_4A8D90  +
lea esi [esi+0] +
mov eax [ebx] +
mov [esp+48h+var_44] offset aWB +
mov [esp+48h+var_48] eax +
call j_j_fopen  +
or byte ptr [ebx+2Bh] 2 +
mov [ebx+8] eax +
test eax eax +
jnz loc_4593F6  +
mov [esp+48h+var_48] 1 +
call sub_44BAF0  +
jmp loc_459402  +
call sub_459190  +
test eax eax +
jnz loc_4593BD  +
add esp 48h +
xor eax eax +
pop ebx  +
retn   +
mov eax [ebx] +
mov [esp+48h+var_44] offset aRb +
mov [esp+48h+var_48] eax +
call j_j_fopen  +
mov [ebx+8] eax +
jmp loc_459459  +
mov eax [ebx] +
mov [esp+48h+var_44] offset aWB +
mov [esp+48h+var_48] eax +
call j_j_fopen  +
mov [ebx+8] eax +
jmp loc_459459  +
***
push ebx  +
sub esp 24h +
test byte ptr [eax+2Ah] 1 +
jnz loc_4595B9  +
mov ebx eax +
jmp loc_4594D7  +
mov ebx ecx +
mov ecx [ebx+8Ch] +
test ecx ecx +
jnz loc_4594D5  +
mov eax [ebx+8] +
test eax eax +
jz loc_459523  +
mov edx ds:dword_513EE0 +
cmp ebx edx +
jz loc_45951D  +
mov esi [ebx+14h] +
test edx edx +
mov ecx [ebx+10h] +
mov [ecx+14h] esi +
mov esi [ebx+14h] +
mov [esi+10h] ecx +
jz loc_45954C  +
mov [ebx+14h] edx +
mov edx [edx+10h] +
mov [ebx+10h] edx +
mov [edx+14h] ebx +
mov edx [ebx+14h] +
mov [edx+10h] ebx +
mov ds:dword_513EE0 ebx +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
xor eax eax +
test dl 1 +
mov [esp+28h+var_C] edx +
jnz loc_45951D  +
mov [esp+28h+var_28] ebx +
call sub_459390  +
test eax eax +
jz loc_45958E  +
mov edx [esp+28h+var_C] +
and edx 2 +
jz loc_459554  +
mov eax [ebx+8] +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov [ebx+14h] ebx +
mov [ebx+10h] ebx +
jmp loc_459517  +
mov eax [ebx+8] +
mov [esp+28h+var_1C] 0 +
mov edx [ebx+18h] +
mov ecx [ebx+1Ch] +
mov [esp+28h+var_28] eax +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_20] ecx +
call sub_46FAB0  +
test eax eax +
jz loc_459543  +
mov edx [esp+28h+var_C] +
and edx 4 +
jnz loc_459543  +
mov [esp+28h+var_28] 1 +
call sub_44BAF0  +
mov ebx off_4BFA04 +
call sub_44B8A0  +
mov [esp+28h+var_28] eax +
call sub_44B8B0  +
mov [esp+28h+var_24] esi +
mov [esp+28h+var_28] offset aReopeningBS +
mov [esp+28h+var_20] eax +
call ebx  +
xor eax eax +
jmp loc_45951D  +
mov [esp+28h+var_20] offset aBfd_cache_look +
mov [esp+28h+var_24] 0F2h +
mov [esp+28h+var_28] offset a____Binutils_2 +
call sub_44BA70  +
lea esi [esi+0] +
lea edi [edi+0] +
sub esp 1Ch +
mov eax [esp+44h+var_24] +
cmp eax ds:dword_513EE0 +
jz loc_459620  +
mov edx 4 +
call sub_4594C0  +
test eax eax +
jz loc_459640  +
mov [esp+44h+var_44] eax +
call _fileno_0  +
mov edx [esp+44h+var_20] +
mov [esp+44h+var_40] edx +
mov [esp+44h+var_44] eax +
call ds:_fstati64  +
test eax eax +
js loc_459625  +
add esp 1Ch +
retn   +
mov eax [eax+8] +
jmp loc_4595F9  +
mov [esp+44h+var_44] 1 +
mov [esp+44h+var_38] eax +
call sub_44BAF0  +
mov eax [esp+44h+var_38] +
add esp 1Ch +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_45961A  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
cmp eax ds:dword_513EE0 +
jz loc_459681  +
mov edx 1 +
call sub_4594C0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_45967D  +
mov [esp+1Ch+var_1C] edx +
call fflush  +
test eax eax +
js loc_459686  +
add esp 1Ch +
retn   +
mov edx [eax+8] +
jmp loc_45966B  +
mov [esp+1Ch+var_1C] 1 +
mov [esp+1Ch+var_10] eax +
call sub_44BAF0  +
mov eax [esp+1Ch+var_10] +
add esp 1Ch +
retn   +
***
push ebx  +
mov eax [esp+arg_0] +
cmp eax ds:dword_513EE0 +
mov esi [esp+arg_4] +
mov edi [esp+arg_8] +
mov ebx [esp+arg_C] +
jz loc_4596E6  +
xor edx edx +
cmp ebx 1 +
setnz dl  +
add edx edx +
call sub_4594C0  +
test eax eax +
jz loc_4596F0  +
mov [esp+arg_C] ebx +
mov [esp+arg_4] esi +
mov [esp+arg_8] edi +
mov [esp+arg_0] eax +
pop ebx  +
pop esi  +
pop edi  +
jmp sub_46FAB0  +
mov eax [eax+8] +
jmp loc_4596CA  +
pop ebx  +
mov eax 0FFFFFFFFh +
pop esi  +
pop edi  +
retn   +
***
mov ebx [esp+8+arg_0] +
cmp ebx ds:dword_513EE0 +
jz loc_459730  +
mov edx 1 +
mov eax ebx +
call sub_4594C0  +
test eax eax +
jz loc_459737  +
mov [esp+8+arg_0] eax +
add esp 8 +
pop ebx  +
jmp sub_46FAA0  +
mov eax [ebx+8] +
test eax eax +
jnz loc_459720  +
mov eax [ebx+18h] +
mov edx [ebx+1Ch] +
add esp 8 +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov ecx [esp+2Ch+arg_C] +
cmp eax ds:dword_513EE0 +
mov ebx [esp+2Ch+arg_8] +
mov [esp+2Ch+var_10] ecx +
jz loc_4597E0  +
xor edx edx +
call sub_4594C0  +
mov ebp eax +
xor eax eax +
xor edx edx +
test ebp ebp +
jz loc_4597AB  +
mov eax [esp+2Ch+arg_4] +
xor edi edi +
mov [esp+2Ch+var_20] ebp +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] eax +
call fwrite  +
cmp [esp+2Ch+var_10] 0 +
mov esi eax +
jge loc_4597B3  +
mov eax esi +
mov edx edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
jle loc_4597E5  +
mov [esp+2Ch+var_2C] ebp +
call ferror  +
test eax eax +
nop   +
jz loc_4597A7  +
mov [esp+2Ch+var_2C] 1 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
mov edx 0FFFFFFFFh +
jmp loc_4597AB  +
mov ebp [eax+8] +
jmp loc_459778  +
cmp ebx eax +
jbe loc_4597A7  +
jmp loc_4597B5  +
***
push esi  +
sub esp 1Ch +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov eax 1 +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
***
mov eax 4 +
retn   +
***
mov eax [esp+0Ch] +
mov dword ptr [eax] 0 +
xor eax eax +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
js loc_459BA4  +
mov [esp+18h+var_18] ebx +
call malloc  +
test eax eax +
jz loc_459BA0  +
add esp 18h +
pop ebx  +
retn   +
test ebx ebx +
jz loc_459B98  +
mov [esp+18h+var_18] 6 +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov ecx [esp+18h+arg_4] +
mov eax ebx +
or eax ecx +
cmp eax 0FFFFh +
jbe loc_459BE8  +
test ecx ecx +
jz loc_459BE8  +
xor edx edx +
mov eax 0FFFFFFFFh +
div  ecx +
cmp ebx eax +
ja loc_459BF5  +
imul ecx ebx +
mov [esp+18h+arg_0] ecx +
add esp 18h +
pop ebx  +
jmp sub_459B80  +
mov [esp+18h+var_18] 6 +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
mov eax [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test eax eax +
jz loc_459C57  +
test ebx ebx +
js loc_459C44  +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
call realloc  +
test eax eax +
jz loc_459C40  +
add esp 18h +
pop ebx  +
retn   +
test ebx ebx +
jz loc_459C34  +
mov [esp+18h+var_18] 6 +
call sub_44BAF0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp sub_459B80  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+24h] +
mov ecx [esp+28h] +
mov esi [esp+20h] +
mov eax ebx +
or eax ecx +
cmp eax 0FFFFh +
jbe loc_459C9D  +
test ecx ecx +
jz loc_459C9D  +
xor edx edx +
mov eax 0FFFFFFFFh +
div  ecx +
cmp ebx eax +
ja loc_459CB2  +
imul ecx ebx +
mov [esp+20h] esi +
mov [esp+24h] ecx +
add esp 14h +
pop ebx  +
pop esi  +
jmp sub_459C10  +
***
mov dword ptr [esp] 6 +
call sub_44BAF0  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_14] eax +
call sub_459C10  +
test eax eax +
jz loc_459CF1  +
add esp 18h +
pop ebx  +
retn   +
test ebx ebx +
jz loc_459CEC  +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_C] eax +
call free  +
mov eax [esp+18h+var_C] +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov [esp+14h+var_14] esi +
call sub_459B80  +
test eax eax +
mov ebx eax +
jnz loc_459D30  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
test esi esi +
jz loc_459D27  +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] eax +
call memset  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov edi [esp+20h] +
mov esi [esp+24h] +
mov [esp] edi +
mov [esp+4] esi +
call sub_459BC0  +
test eax eax +
mov ebx eax +
jz loc_459D8B  +
imul esi edi +
test esi esi +
jz loc_459D8B  +
mov [esp+8] esi +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call memset  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] 4 +
mov edx eax +
shr edx 18h +
mov [esp+2Ch+var_10] dl +
mov edx eax +
shr edx 10h +
mov [esp+1Dh] dl +
mov edx eax +
mov [esp+2Ch+var_D] al +
mov eax [esp+2Ch+arg_0] +
shr edx 8 +
mov [esp+2Ch+var_E] dl +
mov [esp+2Ch+var_24] eax +
lea eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
call sub_46FB80  +
cmp eax 4 +
setz al  +
add esp 2Ch +
movzx eax al +
retn   +
***
mov edx [esp+arg_0] +
movzx eax byte ptr [edx] +
movzx edx byte ptr [edx+1] +
shl eax 8 +
or eax edx +
retn   +
***
jmp loc_459E10  +
mov edx [esp+4] +
movzx eax byte ptr [edx+1] +
movzx edx byte ptr [edx] +
shl eax 8 +
or eax edx +
retn   +
***
jmp loc_459E30  +
mov edx [esp+4] +
movzx eax byte ptr [edx] +
movzx edx byte ptr [edx+1] +
shl eax 8 +
or eax edx +
xor ah 80h +
sub eax 8000h +
retn   +
***
mov edx [esp+4] +
movzx eax byte ptr [edx+1] +
movzx edx byte ptr [edx] +
shl eax 8 +
or eax edx +
xor ah 80h +
sub eax 8000h +
retn   +
***
mov edx [esp+4] +
mov eax [esp+8] +
mov ecx edx +
shr ecx 8 +
mov [eax] cl +
mov [eax+1] dl +
retn   +
***
mov edx [esp+arg_0] +
mov eax [esp+arg_4] +
mov [eax] dl +
shr edx 8 +
mov [eax+1] dl +
retn   +
***
jmp sub_459EB0  +
***
mov edx [esp+arg_0] +
movzx eax byte ptr [edx] +
movzx ecx byte ptr [edx+1] +
shl eax 18h +
shl ecx 10h +
or eax ecx +
movzx ecx byte ptr [edx+3] +
movzx edx byte ptr [edx+2] +
or eax ecx +
shl edx 8 +
or eax edx +
retn   +
***
movzx eax byte ptr [edx+1] +
movzx ecx byte ptr [edx+2] +
movzx ebx byte ptr [edx] +
movzx edx byte ptr [edx+3] +
shl eax 8 +
shl ecx 10h +
or eax ecx +
or eax ebx +
shl edx 18h +
or eax edx +
pop ebx  +
retn   +
***
mov edx [esp+4] +
movzx eax byte ptr [edx] +
movzx ecx byte ptr [edx+1] +
shl eax 18h +
shl ecx 10h +
or eax ecx +
movzx ecx byte ptr [edx+3] +
movzx edx byte ptr [edx+2] +
or eax ecx +
shl edx 8 +
or eax edx +
retn   +
***
push ebx  +
mov edx [esp+8] +
movzx eax byte ptr [edx+1] +
movzx ecx byte ptr [edx+2] +
movzx ebx byte ptr [edx] +
movzx edx byte ptr [edx+3] +
shl eax 8 +
shl ecx 10h +
or eax ecx +
or eax ebx +
shl edx 18h +
or eax edx +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
mov ecx [esp+8+arg_0] +
movzx eax byte ptr [ecx] +
movzx ebx byte ptr [ecx+1] +
shld edx eax +
shl eax 8 +
mov edi edx +
or ebx eax +
shld edi ebx +
mov esi ebx +
movzx ebx byte ptr [ecx+2] +
shl esi 8 +
mov edx edi +
or ebx esi +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+3] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+4] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+5] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+6] +
shl eax 8 +
movzx ecx byte ptr [ecx+7] +
or ebx eax +
mov eax ebx +
shl eax 8 +
or ecx eax +
shld edx ebx +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
xor edx edx +
push esi  +
push ebx  +
mov ecx [esp+10h] +
movzx eax byte ptr [ecx+7] +
movzx ebx byte ptr [ecx+6] +
shld edx eax +
shl eax 8 +
mov edi edx +
or ebx eax +
shld edi ebx +
mov esi ebx +
movzx ebx byte ptr [ecx+5] +
shl esi 8 +
mov edx edi +
or ebx esi +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+4] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+3] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+2] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shld edx ebx +
movzx ebx byte ptr [ecx+1] +
shl eax 8 +
movzx ecx byte ptr [ecx] +
or ebx eax +
mov eax ebx +
shl eax 8 +
or ecx eax +
shld edx ebx +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
xor edx edx +
push esi  +
push ebx  +
mov ecx [esp+10h] +
movzx eax byte ptr [ecx] +
movzx ebx byte ptr [ecx+1] +
shld edx eax +
shl eax 8 +
mov edi edx +
or ebx eax +
shld edi ebx +
mov esi ebx +
movzx ebx byte ptr [ecx+2] +
shl esi 8 +
mov edx edi +
or ebx esi +
movzx esi byte ptr [ecx+7] +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+3] +
shl eax 8 +
or ebx eax +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+4] +
shl eax 8 +
or ebx eax +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+5] +
shl eax 8 +
or ebx eax +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+6] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shl eax 8 +
shld edx ebx +
or esi eax +
lea ebx [edx-80000000h] +
mov eax esi +
mov edx ebx +
add eax 0 +
pop ebx  +
adc edx 80000000h +
pop esi  +
pop edi  +
retn   +
***
push edi  +
xor edx edx +
push esi  +
push ebx  +
mov ecx [esp+10h] +
movzx eax byte ptr [ecx+7] +
movzx ebx byte ptr [ecx+6] +
shld edx eax +
shl eax 8 +
mov edi edx +
or ebx eax +
shld edi ebx +
mov esi ebx +
movzx ebx byte ptr [ecx+5] +
shl esi 8 +
mov edx edi +
or ebx esi +
movzx esi byte ptr [ecx] +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+4] +
shl eax 8 +
or ebx eax +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+3] +
shl eax 8 +
or ebx eax +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+2] +
shl eax 8 +
or ebx eax +
shld edx ebx +
mov eax ebx +
movzx ebx byte ptr [ecx+1] +
shl eax 8 +
or ebx eax +
mov eax ebx +
shl eax 8 +
shld edx ebx +
or esi eax +
lea ebx [edx-80000000h] +
mov eax esi +
mov edx ebx +
add eax 0 +
pop ebx  +
adc edx 80000000h +
pop esi  +
pop edi  +
retn   +
***
mov edx [esp+4] +
mov eax [esp+8] +
mov ecx edx +
shr ecx 18h +
mov [eax] cl +
mov ecx edx +
shr ecx 10h +
mov [eax+1] cl +
mov ecx edx +
shr ecx 8 +
mov [eax+2] cl +
mov [eax+3] dl +
retn   +
***
mov edx [esp+arg_0] +
mov eax [esp+arg_4] +
mov ecx edx +
shr ecx 8 +
mov [eax+1] cl +
mov ecx edx +
mov [eax] dl +
shr ecx 10h +
shr edx 18h +
mov [eax+2] cl +
mov [eax+3] dl +
retn   +
***
jmp loc_45A1F0  +
***
push esi  +
push ebx  +
mov edx [esp-4+arg_4] +
mov esi [esp-4+arg_8] +
mov eax [esp-4+arg_0] +
mov ecx edx +
mov ebx edx +
shr ecx 18h +
mov [esi] cl +
mov ecx edx +
shr ecx 10h +
mov [esi+1] cl +
mov ecx edx +
shr ecx 8 +
mov [esi+2] cl +
mov ecx eax +
shrd ecx ebx +
mov ebx edx +
mov [esi+4] cl +
mov ecx eax +
shrd ecx ebx +
mov [esi+5] cl +
mov ecx eax +
shrd ecx edx +
mov [esi+3] dl +
mov [esi+6] cl +
mov [esi+7] al +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
mov edx [esp+10h] +
mov esi [esp+14h] +
mov eax [esp+0Ch] +
mov ecx edx +
mov ebx edx +
shr ecx 18h +
mov [esi+7] cl +
mov ecx edx +
shr ecx 10h +
mov [esi+6] cl +
mov ecx edx +
shr ecx 8 +
mov [esi+5] cl +
mov ecx eax +
shrd ecx ebx +
mov ebx edx +
mov [esi+3] cl +
mov ecx eax +
shrd ecx ebx +
mov [esi+2] cl +
mov ecx eax +
shrd ecx edx +
mov [esi+4] dl +
mov [esi+1] cl +
mov [esi] al +
pop ebx  +
pop esi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ecx [esp+3Ch] +
mov eax [esp+30h] +
mov edx [esp+34h] +
mov ebp [esp+38h] +
test cl 7 +
mov esi [esp+40h] +
jnz loc_45A2ED  +
test ecx ecx +
lea edi [ecx+7] +
cmovns edi ecx +
xor ecx ecx +
sar edi 3 +
lea ebx [edi-1] +
test edi edi +
mov [esp+0Ch] ebx +
jle loc_45A2E5  +
mov ebx [esp+0Ch] +
sub ebx ecx +
test esi esi +
cmovz ebx ecx +
add ecx 1 +
mov [ebp+ebx+0] al +
shrd eax edx +
shr edx 8 +
cmp ecx edi +
jnz loc_45A2C8  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+8] offset aBfd_put_bits +
mov dword ptr [esp+4] 2E2h +
mov dword ptr [esp] offset a____Binutil_22 +
call sub_44BA70  +
lea esi [esi+0] +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+44h] +
mov ebp [esp+48h] +
test al 7 +
jnz loc_45A390  +
test eax eax +
lea edx [eax+7] +
cmovs eax edx +
mov [esp+18h] eax +
sar dword ptr [esp+18h] 3 +
mov ebx [esp+18h] +
test ebx ebx +
jle loc_45A38A  +
sub ebx 1 +
xor esi esi +
xor eax eax +
xor edx edx +
mov [esp+1Ch] ebx +
mov [esp+48h] ebp +
lea esi [esi+0] +
mov ecx [esp+48h] +
mov ebx edx +
mov edi [esp+1Ch] +
mov ebp [esp+40h] +
sub edi esi +
test ecx ecx +
cmovnz edi esi +
mov ecx eax +
movzx edi byte ptr [ebp+edi+0] +
shl ecx 8 +
add esi 1 +
shld ebx eax +
mov edx ebx +
or edi ecx +
cmp esi [esp+18h] +
mov eax edi +
jnz loc_45A350  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor eax eax +
xor edx edx +
jmp loc_45A382  +
***
mov dword ptr [esp+8] offset aBfd_get_bits +
mov dword ptr [esp+4] 2F7h +
mov dword ptr [esp] offset a____Binutil_22 +
call sub_44BA70  +
lea esi [esi+0] +
push ebp  +
mov eax 1 +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edx [esp+44h] +
mov ecx [esp+3Ch] +
mov ebx [esp+40h] +
test edx edx +
jz loc_45A475  +
mov eax [esp+34h] +
test byte ptr [eax+18h] 30h +
jnz loc_45A4B0  +
mov eax [esp+30h] +
movzx eax byte ptr [eax+28h] +
and eax 18h +
cmp al 10h +
jz loc_45A480  +
mov eax [esp+34h] +
mov ebp [eax+28h] +
test ebp ebp +
jz loc_45A480  +
mov eax [esp+44h] +
xor edx edx +
mov edi edx +
mov esi eax +
add esi ecx +
adc edi ebx +
cmp edx edi +
jg loc_45A496  +
jge loc_45A4E0  +
cmp edi 0 +
jge loc_45A490  +
mov eax [esp+34h] +
mov dword ptr [esp+0Ch] 0 +
add ecx [eax+50h] +
adc ebx [eax+54h] +
mov eax [esp+30h] +
mov [esp+4] ecx +
mov [esp+8] ebx +
mov [esp] eax +
call sub_46FCE0  +
mov edx eax +
xor eax eax +
test edx edx +
jnz loc_45A475  +
mov eax [esp+30h] +
mov [esp+8] eax +
mov eax [esp+44h] +
mov [esp+4] eax +
mov eax [esp+38h] +
mov [esp] eax +
call sub_46FAD0  +
cmp [esp+44h] eax +
setz al  +
movzx eax al +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+34h] +
mov ebp [eax+24h] +
jmp loc_45A400  +
***
jg loc_45A496  +
cmp esi ebp +
jbe loc_45A421  +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] eax +
mov eax [esp+30h] +
mov dword ptr [esp] offset aBUnableToGetDe +
mov [esp+4] eax +
call off_4BFA04  +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp [esp+44h] esi +
ja loc_45A496  +
jmp loc_45A41C  +
***
sub esp 1Ch +
mov dword ptr [esp+8] offset a_bfd_generic_g +
mov dword ptr [esp+4] 362h +
mov dword ptr [esp] offset a____Binutil_22 +
call sub_44BA70  +
nop   +
push esi  +
mov eax 1 +
push ebx  +
sub esp 14h +
mov esi [esp+34h] +
mov ecx [esp+2Ch] +
mov ebx [esp+30h] +
test esi esi +
jnz loc_45A530  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+24h] +
mov dword ptr [esp+0Ch] 0 +
add ecx [eax+50h] +
adc ebx [eax+54h] +
mov eax [esp+20h] +
mov [esp+4] ecx +
mov [esp+8] ebx +
mov [esp] eax +
call sub_46FCE0  +
mov edx eax +
xor eax eax +
test edx edx +
jnz loc_45A52A  +
mov eax [esp+20h] +
mov [esp+4] esi +
mov [esp+8] eax +
mov eax [esp+28h] +
mov [esp] eax +
call sub_46FB80  +
cmp esi eax +
setz al  +
add esp 14h +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
***
mov edx [esp+arg_0] +
cmp edx 1 +
jbe loc_45A5B0  +
sub edx 1 +
xor eax eax +
nop   +
add eax 1 +
shr edx 1 +
jnz loc_45A5A0  +
retn   +
xor eax eax +
retn   +
***
mov eax [esp+4] +
mov edx [eax+4] +
mov eax 4Ch +
cmp byte ptr [edx+18h] 5Fh +
mov edx 2Eh +
cmovnz eax edx +
mov edx [esp+8] +
cmp al [edx] +
setz al  +
movzx eax al +
retn   +
***
sub esp 1Ch +
mov ecx [esp+20h] +
mov edx [esp+24h] +
mov eax [ecx+4] +
mov edx [edx+4] +
mov eax [eax+8] +
mov edx [edx+8] +
cmp eax edx +
jz loc_45A643  +
cmp eax 2 +
jz loc_45A643  +
cmp edx 2 +
jz loc_45A643  +
test eax eax +
mov edx offset aBCompiledForAB +
mov eax offset aBCompiledForAL +
cmovnz edx eax +
mov [esp+4] ecx +
mov [esp] edx +
call off_4BFA04  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov eax 1 +
add esp 1Ch +
retn   +
***
push ebx  +
sub esp 28h +
mov eax ds:dword_513EEC +
mov ebx [esp+3Ch] +
or eax ebx +
cmp eax 0FFFFFFFFh +
jz loc_45A6C4  +
mov eax ds:_iob +
add eax 20h +
mov [esp] eax +
call fflush  +
test ebx ebx +
jz loc_45A6D0  +
mov eax [esp+38h] +
mov [esp+14h] ebx +
mov dword ptr [esp+4] offset aDeprecatedSCal +
mov [esp+10h] eax +
mov eax [esp+34h] +
mov [esp+0Ch] eax +
mov eax [esp+30h] +
mov [esp+8] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp] eax +
call fprintf  +
mov eax ds:_iob +
not ebx  +
add eax 40h +
mov [esp] eax +
call fflush  +
or ds:dword_513EEC ebx +
add esp 28h +
pop ebx  +
retn   +
***
mov eax [esp+30h] +
mov dword ptr [esp+4] offset aDeprecatedSC_0 +
mov [esp+8] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp] eax +
call fprintf  +
jmp loc_45A6AC  +
***
push edi  +
xor ecx ecx +
push esi  +
xor esi esi +
push ebx  +
mov edi [esp+14h] +
xor ebx ebx +
lea esi [esi+0] +
movzx eax byte ptr [edi+ebx] +
add ebx 1 +
mov edx eax +
and edx 7Fh +
shl edx cl +
add ecx 7 +
or esi edx +
test al al +
js loc_45A710  +
mov eax [esp+18h] +
mov [eax] ebx +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
mov edi [esp+arg_4] +
mov ebp [esp+arg_10] +
cmp edi ebp +
jnb loc_45A7BF  +
movzx eax byte ptr [edi] +
mov esi eax +
and esi 7Fh +
test al al +
jns loc_45A7CE  +
sub ebp edi +
mov ecx 7 +
mov edx 1 +
jmp loc_45A787  +
movzx eax byte ptr [edi+edx] +
add edx 1 +
mov ebx eax +
and ebx 7Fh +
shl ebx cl +
add ecx 7 +
or esi ebx +
test al al +
jns loc_45A78B  +
cmp edx ebp +
jnz loc_45A770  +
cmp ecx 1Fh +
setbe bl  +
mov edi [esp+arg_8] +
test edi edi +
jz loc_45A79F  +
mov edi [esp+arg_8] +
mov [edi] edx +
mov edx [esp+arg_C] +
test edx edx +
jz loc_45A7B8  +
test bl bl +
jz loc_45A7B8  +
test al 40h +
jz loc_45A7B8  +
mov eax 0FFFFFFFFh +
shl eax cl +
or esi eax +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx 1 +
xor eax eax +
xor ecx ecx +
xor edx edx +
xor esi esi +
jmp loc_45A791  +
mov ebx 1 +
mov ecx 7 +
mov edx 1 +
jmp loc_45A791  +
***
push edi  +
xor ecx ecx +
push esi  +
xor esi esi +
push ebx  +
mov edi [esp+14h] +
xor ebx ebx +
lea esi [esi+0] +
movzx eax byte ptr [edi+ebx] +
add ebx 1 +
mov edx eax +
and edx 7Fh +
shl edx cl +
add ecx 7 +
or esi edx +
test al al +
js loc_45A7F0  +
cmp ecx 1Fh +
ja loc_45A819  +
test al 40h +
jz loc_45A819  +
mov eax 0FFFFFFFFh +
shl eax cl +
or esi eax +
mov eax [esp+18h] +
mov [eax] ebx +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax 1 +
retn   +
***
xor ebx ebx +
mov ecx [esp+arg_0] +
mov eax [edx] +
cmp [ecx] eax +
mov eax 0FFFFFFFFh +
setnbe bl  +
cmovnb eax ebx +
pop ebx  +
retn   +
***
mov eax [esp+arg_4] +
mov edx [esp+arg_0] +
test dword ptr [eax+0Ch] 4182h +
jnz loc_45A887  +
mov eax [eax+4] +
test eax eax +
jz loc_45A887  +
mov ecx [edx+4] +
mov ecx [ecx+11Ch] +
mov [esp+arg_4] eax +
jmp ecx  +
xor eax eax +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
movzx edx byte ptr [eax+28h] +
mov ecx edx +
and ecx 7 +
cmp cl 1 +
jnz loc_45A8C1  +
and edx 8 +
jnz loc_45A8C1  +
mov edx [esp+1Ch+arg_4] +
mov [eax+78h] edx +
mov edx [esp+1Ch+arg_8] +
mov [eax+7Ch] edx +
mov eax 1 +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_1C] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_8] +
mov edx [eax+10h] +
mov ebx [eax+0Ch] +
test edx edx +
jz loc_45AA30  +
mov edx [edx+1Ch] +
add edx [eax+8] +
mov [esp+3Ch+var_34] edx +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] eax +
call sub_44C420  +
test bl 8 +
mov [esp+3Ch+var_10] 46h +
jnz loc_45A935  +
test bh 40h +
mov [esp+3Ch+var_10] 66h +
jz loc_45AA10  +
test bl 4 +
mov ebp 64h +
jnz loc_45A951  +
mov eax ebx +
and eax 8000h +
cmp eax 1 +
sbb ebp ebp +
and ebp 0FFFFFFDCh +
add ebp 44h +
test bh 20h +
mov edi 49h +
jnz loc_45A96D  +
mov eax ebx +
and eax 400000h +
cmp eax 1 +
sbb edi edi +
and edi 0FFFFFFB7h +
add edi 69h +
mov eax ebx +
and eax 1000h +
cmp eax 1 +
mov eax ebx +
sbb ecx ecx +
and eax 800h +
and ecx 0FFFFFFC9h +
add ecx 57h +
cmp eax 1 +
sbb edx edx +
mov eax ebx +
and edx 0FFFFFFDDh +
and eax 80h +
add edx 43h +
cmp eax 1 +
sbb eax eax +
and eax 0FFFFFFA9h +
add eax 77h +
test bl 1 +
jz loc_45A9F2  +
and ebx 2 +
cmp ebx 1 +
sbb esi esi +
and esi 4Bh +
add esi 21h +
mov ebx [esp+3Ch+var_10] +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_20] ebp +
mov [esp+3Ch+var_24] edi +
mov [esp+3Ch+var_1C] ebx +
mov [esp+3Ch+var_34] esi +
mov [esp+3Ch+var_28] ecx +
mov [esp+3Ch+var_2C] edx +
mov [esp+3Ch+var_38] offset aCCCCCCC +
mov [esp+3Ch+var_3C] eax +
call fprintf  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test bl 2 +
mov esi 67h +
jnz loc_45A9B6  +
and ebx 800000h +
cmp ebx 1 +
sbb esi esi +
and esi 0FFFFFFABh +
add esi 75h +
jmp loc_45A9B6  +
mov eax ebx +
and eax 10000h +
cmp eax 1 +
sbb eax eax +
mov [esp+3Ch+var_10] eax +
and [esp+3Ch+var_10] 0FFFFFFD1h +
add [esp+3Ch+var_10] 4Fh +
jmp loc_45A935  +
mov eax [eax+8] +
mov [esp+3Ch+var_34] eax +
jmp loc_45A903  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+4] 18h +
mov [esp] ebx +
call sub_458B60  +
test eax eax +
jz loc_45AA5E  +
mov [eax] ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edx [esp+1Ch+arg_0] +
mov ebx [edx+10h] +
test ebx ebx +
jz loc_45AAAE  +
test byte ptr [ebx+15h] 10h +
mov eax 43h +
jz loc_45AA95  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ebx offset off_4BFAE8 +
jz loc_45AB50  +
cmp ebx offset off_4BFC38 +
mov eax 49h +
jz loc_45AA8D  +
mov esi [edx+0Ch] +
mov eax 69h +
test esi 400000h +
jnz loc_45AA8D  +
test esi 80h +
jnz loc_45AB70  +
test esi 800000h +
mov eax 75h +
jnz loc_45AA8D  +
test esi 3 +
mov al 3Fh +
jz loc_45AA8D  +
cmp ebx offset off_4BFB90 +
jz loc_45AB80  +
test ebx ebx +
jz loc_45AA8D  +
mov eax [ebx] +
mov edi offset off_4FEDA0 +
mov ebp offset a_bss_19 +
mov [esp+1Ch+var_10] eax +
mov eax 4 +
jmp loc_45AB19  +
add edi 8 +
mov ebp [edi] +
test ebp ebp +
jz loc_45AB87  +
mov [esp+1Ch+var_1C] ebp +
call strlen  +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+var_10] +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] eax +
call strncmp  +
test eax eax +
jnz loc_45AB08  +
movzx eax byte ptr [edi+4] +
cmp al 3Fh +
jz loc_45AB87  +
and esi 2 +
jz loc_45AB48  +
movzx eax al +
movzx eax ds:byte_509A60[eax] +
movsx eax al +
jmp loc_45AA8D  +
mov edx [edx+0Ch] +
mov al 55h +
test dl 80h +
jz loc_45AA8D  +
mov eax edx +
shl eax 0Fh +
sar eax 1Fh +
add eax 77h +
jmp loc_45AA8D  +
mov eax esi +
shl eax 0Fh +
sar eax 1Fh +
add eax 57h +
jmp loc_45AA8D  +
mov eax 61h +
jmp loc_45AB39  +
mov edx [ebx+14h] +
mov eax 74h +
test dl 10h +
jnz loc_45AB39  +
test dl 20h +
jz loc_45ABB6  +
test dl 8 +
mov eax 72h +
jnz loc_45AB39  +
and edx 400000h +
cmp edx 1 +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 67h +
jmp loc_45AB39  +
test dh 1 +
jnz loc_45ABD1  +
and edx 400000h +
cmp edx 1 +
sbb eax eax +
and eax 0FFFFFFEFh +
add eax 73h +
jmp loc_45AB39  +
test dh 20h +
mov eax 4Eh +
jnz loc_45AB39  +
and edx 108h +
mov eax 6Eh +
cmp edx 108h +
mov edx 3Fh +
cmovnz eax edx +
jmp loc_45AB39  +
***
mov eax [esi+4] +
mov dword ptr [ebx] 0 +
mov [ebx+8] eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov esi [esp+24h] +
mov ebx [esp+20h] +
test esi esi +
mov eax [ebx+4] +
jz loc_45ACB4  +
mov eax [eax+198h] +
mov [esp] ebx +
call eax  +
mov edx eax +
test edx edx +
js loc_45ACC5  +
mov eax 0 +
jnz loc_45ACE0  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [eax+104h] +
mov [esp] ebx +
call eax  +
mov edx eax +
test edx edx +
jns loc_45ACA6  +
mov dword ptr [esp] 7 +
call sub_44BAF0  +
add esp 10h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov [esp] edx +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_45ACC5  +
test esi esi +
mov eax [ebx+4] +
jnz loc_45AD20  +
mov eax [eax+108h] +
mov [esp+4] edi +
mov [esp] ebx +
call eax  +
test eax eax +
js loc_45AD33  +
mov edx [esp+28h] +
mov [edx] edi +
mov edx [esp+2Ch] +
mov dword ptr [edx] 4 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [eax+19Ch] +
mov [esp+4] edi +
mov [esp] ebx +
call eax  +
test eax eax +
jns loc_45AD08  +
mov dword ptr [esp] 7 +
call sub_44BAF0  +
mov [esp] edi +
call free  +
add esp 10h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+0Ch] +
mov eax [eax] +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_10] +
mov edi [esp+4Ch+arg_14] +
mov dword ptr [eax] 0 +
mov eax [esp+4Ch+arg_0] +
mov eax [eax] +
mov [edi] eax +
mov eax [esp+4Ch+arg_18] +
mov dword ptr [eax] 0 +
mov eax [esp+4Ch+arg_1C] +
mov dword ptr [eax] 0 +
mov eax [esp+4Ch+arg_20] +
mov eax [eax] +
test eax eax +
mov [esp+4Ch+var_30] eax +
jz loc_45B152  +
mov esi [eax] +
test esi esi +
jz loc_45B008  +
mov eax [esp+4Ch+var_30] +
mov eax [eax+4] +
test eax eax +
jz loc_45B008  +
mov edi [eax+28h] +
test edi edi +
mov [esp+4Ch+var_20] edi +
jz loc_45B015  +
mov eax [esp+4Ch+arg_8] +
mov edx [esp+4Ch+arg_C] +
add edx [eax+1Ch] +
mov eax [esp+4Ch+var_30] +
mov [esp+4Ch+var_2C] edx +
mov ebx [eax+18h] +
test ebx ebx +
jz loc_45ADFD  +
cmp edx [eax+1Ch] +
jnb loc_45AE70  +
mov eax [esp+4Ch+var_30] +
xor ecx ecx +
mov ebp [esp+4Ch+var_2C] +
mov eax [eax+14h] +
mov [esp+4Ch+var_34] eax +
lea edx [eax-1] +
jmp loc_45AE27  +
lea eax [eax+eax*2+3] +
cmp ebp [esi+eax*8] +
jb loc_45B140  +
mov ecx [esp+4Ch+var_34] +
add ecx 1 +
cmp ecx edx +
jz loc_45B008  +
mov edi [esp+4Ch+var_30] +
lea eax [ecx+edx] +
mov ebx eax +
shr ebx 1Fh +
add eax ebx +
mov esi [edi+10h] +
sar eax 1 +
mov [esp+4Ch+var_34] eax +
lea ebx [eax+eax*2] +
lea ebx [esi+ebx*8] +
cmp ebp [ebx] +
jnb loc_45AE13  +
cmp ecx eax +
mov edx eax +
jz loc_45B008  +
lea eax [ecx+edx] +
mov ebx eax +
shr ebx 1Fh +
add eax ebx +
sar eax 1 +
mov [esp+4Ch+var_34] eax +
jmp loc_45AE46  +
cmp edx [ebx+18h] +
jnb loc_45ADFD  +
mov eax [esp+4Ch+var_30] +
mov ebp [eax+20h] +
mov eax [eax+24h] +
mov [esp+4Ch+var_28] eax +
mov eax [ebx+0Ch] +
cmp ebp [ebx+1Ch] +
mov [esp+4Ch+var_18] eax +
mov eax [ebx+8] +
mov [esp+4Ch+var_1C] eax +
jnb loc_45AEF8  +
mov edi [esp+4Ch+arg_0] +
xor esi esi +
mov [esp+4Ch+var_34] esi +
mov esi ebx +
mov [esp+4Ch+var_24] 0 +
lea esi [esi+0] +
movzx eax byte ptr [ebp+4] +
cmp al 46h +
jz loc_45B02D  +
jbe loc_45B021  +
cmp al 64h +
jz loc_45B073  +
cmp al 84h +
lea esi [esi+0] +
jnz loc_45B096  +
mov eax [edi+4] +
lea ecx [ebp+8] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ecx +
call eax  +
cmp [esp+4Ch+var_2C] eax +
jnb loc_45B0B0  +
add ebp 0Ch +
cmp [esi+1Ch] ebp +
ja loc_45AEB0  +
mov ebx esi +
mov eax [esp+4Ch+arg_10] +
mov dword ptr [eax] 1 +
mov eax [esp+4Ch+var_28] +
test eax eax +
jz loc_45B120  +
movzx eax byte ptr [eax] +
cmp al 5Ch +
jz loc_45B120  +
cmp al 2Fh +
jz loc_45B120  +
test al al +
jz loc_45AF33  +
mov eax [esp+4Ch+var_28] +
cmp byte ptr [eax+1] 3Ah +
jz loc_45B120  +
mov eax [esp+4Ch+var_18] +
test eax eax +
jz loc_45B120  +
mov eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_4C] eax +
call strlen  +
mov edi eax +
mov eax [esp+4Ch+var_30] +
mov eax [eax+28h] +
test eax eax +
jz loc_45AF74  +
mov esi [esp+4Ch+var_18] +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_48] esi +
call sub_4A8BC0  +
test eax eax +
jz loc_45B3DA  +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] eax +
call strlen  +
lea esi [eax+1] +
lea eax [esi+edi] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
mov edx [esp+4Ch+var_30] +
test eax eax +
mov [edx+28h] eax +
jz loc_45B3D0  +
mov edx [esp+4Ch+var_18] +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_48] edx +
call memcpy  +
mov eax [esp+4Ch+var_30] +
add edi [eax+28h] +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_4C] edi +
mov [esp+4Ch+var_48] eax +
call memcpy  +
mov eax [esp+4Ch+var_30] +
mov edi [esp+4Ch+arg_14] +
mov eax [eax+28h] +
mov [edi] eax +
mov esi [ebx+14h] +
test esi esi +
jz loc_45B008  +
mov [esp+4Ch+var_48] 3Ah +
mov [esp+4Ch+var_4C] esi +
call strchr  +
test eax eax +
jz loc_45B002  +
mov byte ptr [eax] 0 +
mov esi [ebx+14h] +
mov eax [esp+4Ch+arg_18] +
mov [eax] esi +
mov eax 1 +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [eax+24h] +
mov [esp+4Ch+var_20] eax +
jmp loc_45ADDE  +
cmp al 24h +
jz loc_45B073  +
cmp al 44h +
jnz loc_45AEEE  +
mov ecx [esi+14h] +
test ecx ecx +
jz loc_45B0A5  +
mov ebx [esi] +
mov eax [edi+4] +
lea ecx [ebp+8] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ecx +
call eax  +
add ebx eax +
cmp ebx [esp+4Ch+var_2C] +
jbe loc_45B0F3  +
mov edx [esp+4Ch+var_34] +
test edx edx +
jz loc_45B0F3  +
cmp [esp+4Ch+var_2C] ebx +
jb loc_45AEF6  +
mov [esp+4Ch+var_34] 1 +
jmp loc_45AEEE  +
mov eax [esp+4Ch+var_34] +
or eax [esp+4Ch+var_24] +
jnz loc_45AEF6  +
mov [esp+4Ch+var_24] 1 +
mov [esp+4Ch+var_34] 0 +
jmp loc_45AEEE  +
cmp al 48h +
jnz loc_45AEEE  +
mov ecx [esi+14h] +
test ecx ecx +
jnz loc_45B034  +
xor ebx ebx +
jmp loc_45B036  +
mov eax [edi+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ebp +
call eax  +
mov ecx [esp+4Ch+var_30] +
add eax [esp+4Ch+var_1C] +
mov edx eax +
mov [esp+4Ch+var_28] eax +
mov eax [esp+4Ch+var_20] +
add eax [ecx+0Ch] +
cmp edx eax +
jnb loc_45B130  +
cmp [esp+4Ch+var_1C] edx +
mov eax 0 +
cmovbe eax edx +
mov [esp+4Ch+var_28] eax +
mov eax [esp+4Ch+arg_1C] +
mov dword ptr [eax] 0 +
jmp loc_45AEEE  +
mov eax [edi+4] +
lea ecx [ebp+6] +
mov eax [eax+34h] +
mov [esp+4Ch+var_4C] ecx +
call eax  +
mov edx [esp+4Ch+arg_1C] +
mov [edx] eax +
mov eax [esp+4Ch+var_30] +
mov edx [esp+4Ch+var_28] +
mov [eax+20h] ebp +
mov [eax+1Ch] ebx +
mov [eax+24h] edx +
mov [eax+18h] esi +
jmp loc_45B05C  +
mov eax [esp+4Ch+arg_14] +
mov edi [esp+4Ch+var_28] +
mov [eax] edi +
jmp loc_45AFE1  +
mov [esp+4Ch+var_28] 0 +
jmp loc_45B0E4  +
mov eax [ebx+4] +
lea ebp [eax+0Ch] +
mov eax [ebx+10h] +
mov [esp+4Ch+var_28] eax +
jmp loc_45AE83  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] 2Ch +
mov [esp+4Ch+var_4C] eax +
call sub_458B60  +
test eax eax +
mov [esp+4Ch+var_30] eax +
jz loc_45B3D0  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] offset a_stab_1 +
mov [esp+4Ch+var_4C] eax +
call sub_44D4B0  +
mov edi [esp+4Ch+var_30] +
mov [edi] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] offset a_stabstr +
mov [esp+4Ch+var_4C] eax +
call sub_44D4B0  +
mov edx [edi] +
test edx edx +
mov ecx eax +
mov [edi+4] eax +
jz loc_45B400  +
test eax eax +
jz loc_45B400  +
mov eax [edx+28h] +
test eax eax +
jnz loc_45B1C1  +
mov eax [edx+24h] +
mov edx 0AAAAAAABh +
mul  edx +
shr edx 3 +
lea eax [edx+edx*2] +
shl eax 2 +
mov [esp+4Ch+var_34] eax +
mov eax [ecx+28h] +
test eax eax +
mov [esp+4Ch+var_20] eax +
jnz loc_45B1E7  +
mov eax [ecx+24h] +
mov [esp+4Ch+var_20] eax +
mov esi [esp+4Ch+var_34] +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
mov edi [esp+4Ch+var_30] +
mov [edi+8] eax +
mov eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
mov edx [edi+8] +
test edx edx +
mov [edi+0Ch] eax +
jz loc_45B3D0  +
test eax eax +
jz loc_45B3D0  +
mov eax [edi] +
mov [esp+4Ch+var_38] esi +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_45B3D0  +
mov eax [esp+4Ch+var_30] +
mov edi [esp+4Ch+var_20] +
mov edx [eax+0Ch] +
mov eax [eax+4] +
mov [esp+4Ch+var_38] edi +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_45B3D0  +
mov eax [esp+4Ch+var_30] +
mov eax [eax] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_44BB40  +
test eax eax +
mov ebx eax +
js loc_45B3D0  +
mov [esp+4Ch+var_4C] eax +
call sub_459B80  +
test eax eax +
mov edi eax +
jnz loc_45B2D2  +
test ebx ebx +
jnz loc_45B3D0  +
mov eax [esp+4Ch+var_30] +
mov edx [eax] +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_40] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_44BB80  +
test eax eax +
js loc_45B67C  +
jz loc_45B458  +
mov esi [edi] +
test esi esi +
jz loc_45B45C  +
mov ebp edi +
nop   +
jmp loc_45B398  +
cmp dword ptr [eax+8] 2 +
jnz loc_45B3AD  +
cmp dword ptr [eax+0Ch] 20h +
jnz loc_45B3AD  +
mov ecx [eax+10h] +
test ecx ecx +
jnz loc_45B3AD  +
mov ebx [eax+14h] +
test ebx ebx +
jnz loc_45B3AD  +
cmp edx 0FFFFFFFFh +
jnz loc_45B3AD  +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+4] +
mov edx [eax+28h] +
mov eax [esp+4Ch+var_30] +
mov eax [eax+8] +
add eax [esi+4] +
mov [esp+4Ch+var_4C] eax +
call edx  +
mov edx [esi+0Ch] +
mov ebx [esp+4Ch+arg_0] +
and eax [edx+28h] +
mov edx [esi] +
mov ecx [edx] +
mov edx [ebx+4] +
mov ebx [edx+30h] +
mov edx [esp+4Ch+var_30] +
mov edx [edx+8] +
add edx [esi+4] +
mov [esp+4Ch+var_48] edx +
mov edx [ecx+10h] +
mov edx [edx+1Ch] +
add edx [ecx+8] +
add edx [esi+8] +
add eax edx +
mov [esp+4Ch+var_4C] eax +
call ebx  +
add ebp 4 +
mov esi [ebp+0] +
test esi esi +
jz loc_45B45C  +
mov eax [esi+0Ch] +
mov edx [eax+2Ch] +
test edx edx +
jz loc_45B38A  +
mov ebx [eax+4] +
test ebx ebx +
jz loc_45B315  +
mov [esp+4Ch+var_4C] offset aUnsupported_st +
call off_4BFA04  +
mov [esp+4Ch+var_4C] 5 +
call sub_44BAF0  +
mov [esp+4Ch+var_4C] edi +
call free  +
nop   +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+var_28] +
mov esi [esp+4Ch+var_30] +
mov [esp+4Ch+var_48] eax +
mov eax [esi+28h] +
add eax edi +
mov [esp+4Ch+var_4C] eax +
call sub_4A8B70  +
test eax eax +
jnz loc_45AF74  +
jmp loc_45AFD4  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] offset aGdb_symbols_0 +
mov [esp+4Ch+var_4C] eax +
call sub_44D4B0  +
mov edi [esp+4Ch+var_30] +
mov [edi] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] offset aGdb_strings_0 +
mov [esp+4Ch+var_4C] eax +
call sub_44D4B0  +
mov edx [edi] +
test edx edx +
mov ecx eax +
mov [edi+4] eax +
jz loc_45B441  +
test eax eax +
jnz loc_45B1B7  +
mov eax [esp+4Ch+arg_20] +
mov edi [esp+4Ch+var_30] +
mov [eax] edi +
mov eax 1 +
jmp loc_45B00D  +
test edi edi +
jz loc_45B464  +
mov [esp+4Ch+var_4C] edi +
call free  +
mov edi [esp+4Ch+var_30] +
xor esi esi +
mov ebp [esp+4Ch+var_34] +
mov ecx [edi+8] +
mov eax ebp +
mov dword ptr [edi+14h] 0 +
add eax ecx +
mov ebx ecx +
cmp ecx eax +
jb loc_45B496  +
jmp loc_45B4E3  +
cmp al 24h +
jz loc_45B611  +
lea eax [ecx+ebp] +
add ebx 0Ch +
cmp eax ebx +
jbe loc_45B4D7  +
movzx eax byte ptr [ebx+4] +
cmp al 64h +
jnz loc_45B484  +
test esi esi +
jz loc_45B4A6  +
add dword ptr [edi+14h] 1 +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ebx +
call eax  +
mov ecx [edi+8] +
test eax eax +
lea eax [ecx+ebp] +
jz loc_45B62E  +
lea edx [ebx+10h] +
mov esi ebx +
cmp eax edx +
jbe loc_45B48F  +
cmp byte ptr [ebx+10h] 64h +
jnz loc_45B48F  +
add ebx 0Ch +
jmp loc_45B48F  +
test esi esi +
jz loc_45B4E3  +
mov eax [esp+4Ch+var_30] +
add dword ptr [eax+14h] 1 +
mov eax [esp+4Ch+var_30] +
mov eax [eax+14h] +
test eax eax +
jz loc_45B008  +
mov edi [esp+4Ch+var_30] +
add eax 1 +
mov [edi+14h] eax +
imul eax eax +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
mov [edi+10h] eax +
jz loc_45B3D0  +
mov ebp [edi+8] +
cmp dword ptr [edi+14h] 0 +
mov esi [edi+0Ch] +
mov ecx ebp +
jle loc_45B7F8  +
mov eax [esp+4Ch+var_34] +
add eax ebp +
cmp ebp eax +
jnb loc_45B7F8  +
xor edi edi +
xor ecx ecx +
mov edx edi +
mov ebx ecx +
mov edi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_24] esi +
mov [esp+4Ch+var_28] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_1C] 0 +
jmp loc_45B5CC  +
cmp al 64h +
jz loc_45B68D  +
cmp al 84h +
jnz loc_45B5A5  +
mov eax [edi+4] +
mov [esp+4Ch+var_18] edx +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ebp +
call eax  +
mov edx [esp+4Ch+var_30] +
lea ebx [esi+eax] +
mov eax [esp+4Ch+var_20] +
add eax [edx+0Ch] +
mov edx [esp+4Ch+var_18] +
cmp ebx eax +
jnb loc_45B675  +
cmp ebx esi +
mov eax 0 +
cmovb ebx eax +
mov eax [esp+4Ch+var_30] +
add ebp 0Ch +
mov ecx [esp+4Ch+var_28] +
cmp ecx [eax+14h] +
jge loc_45B866  +
mov ecx [esp+4Ch+var_30] +
mov eax [esp+4Ch+var_34] +
add eax [ecx+8] +
cmp ebp eax +
jnb loc_45B866  +
movzx eax byte ptr [ebp+4] +
cmp al 24h +
jz loc_45B76F  +
ja loc_45B566  +
test al al +
jnz loc_45B5A5  +
mov ecx [esp+4Ch+var_30] +
mov eax [esp+4Ch+var_20] +
add eax [ecx+0Ch] +
sub eax esi +
cmp eax [esp+4Ch+var_1C] +
jb loc_45B5A5  +
mov eax [edi+4] +
lea ecx [ebp+8] +
mov [esp+4Ch+var_18] edx +
add esi [esp+4Ch+var_1C] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ecx +
call eax  +
mov edx [esp+4Ch+var_18] +
mov [esp+4Ch+var_1C] eax +
jmp loc_45B5A5  +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ebx +
call eax  +
test eax eax +
jz loc_45B635  +
mov ecx [edi+8] +
add dword ptr [edi+14h] 1 +
lea eax [ecx+ebp] +
xor esi esi +
jmp loc_45B48F  +
mov ecx [edi+8] +
jmp loc_45B48C  +
mov eax [edi+4] +
lea ecx [ebp+0Ch] +
mov [esp+4Ch+var_24] ecx +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ecx +
call eax  +
mov edx [esp+4Ch+var_30] +
mov ecx [esp+4Ch+var_24] +
mov [esp+4Ch+var_24] esi +
lea ebx [esi+eax] +
mov eax [esp+4Ch+var_20] +
add eax [edx+0Ch] +
mov edx ebp +
mov ebp ecx +
cmp ebx eax +
jnb loc_45B675  +
cmp ebx esi +
jnb loc_45B5A5  +
xor ebx ebx +
jmp loc_45B5A5  +
test edi edi +
nop   +
jnz loc_45B3C6  +
xor eax eax +
jmp loc_45B3D2  +
test edx edx +
nop   +
jz loc_45B6ED  +
imul eax [esp+4Ch+var_28] +
mov ecx [esp+4Ch+var_30] +
mov [esp+4Ch+var_10] edx +
mov [esp+4Ch+var_18] eax +
add eax [ecx+10h] +
lea ecx [edx+8] +
mov [esp+4Ch+var_14] eax +
mov eax [edi+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ecx +
call eax  +
mov edx [esp+4Ch+var_14] +
mov ecx [esp+4Ch+var_30] +
add [esp+4Ch+var_28] 1 +
mov [edx] eax +
mov edx [esp+4Ch+var_10] +
mov eax [esp+4Ch+var_18] +
add eax [ecx+10h] +
mov [eax+4] edx +
mov edx [esp+4Ch+var_24] +
mov [eax+10h] ebx +
mov dword ptr [eax+14h] 0 +
mov [eax+8] edx +
mov edx [esp+4Ch+var_2C] +
mov [eax+0Ch] edx +
mov eax [edi+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ebp +
call eax  +
add eax esi +
cmp eax esi +
mov edx eax +
mov [esp+4Ch+var_2C] eax +
jz loc_45B75E  +
mov ecx [esp+4Ch+var_30] +
mov eax [esp+4Ch+var_20] +
add eax [ecx+0Ch] +
cmp edx eax +
jnb loc_45B754  +
cmp edx esi +
mov eax 0 +
cmovnb eax edx +
mov [esp+4Ch+var_2C] eax +
mov ecx [esp+4Ch+var_30] +
lea edx [ebp+10h] +
mov eax [esp+4Ch+var_34] +
add eax [ecx+8] +
cmp edx eax +
jnb loc_45B73D  +
cmp byte ptr [ebp+10h] 64h +
jz loc_45B63D  +
mov ebx [esp+4Ch+var_2C] +
mov edx ebp +
mov [esp+4Ch+var_24] esi +
mov [esp+4Ch+var_2C] 0 +
jmp loc_45B5A5  +
mov [esp+4Ch+var_2C] 0 +
jmp loc_45B721  +
mov [esp+4Ch+var_2C] 0 +
xor ebx ebx +
xor edx edx +
jmp loc_45B5A5  +
mov eax [edi+4] +
mov [esp+4Ch+var_18] edx +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] ebp +
call eax  +
mov edx [esp+4Ch+var_18] +
lea ecx [esi+eax] +
cmp ecx esi +
jz loc_45B5A5  +
mov edx [esp+4Ch+var_30] +
mov eax [esp+4Ch+var_20] +
add eax [edx+0Ch] +
cmp ecx eax +
mov eax 0 +
cmovnb ecx eax +
imul eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_10] ecx +
mov [esp+4Ch+var_18] eax +
add eax [edx+10h] +
lea edx [ebp+8] +
mov [esp+4Ch+var_14] eax +
mov eax [edi+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
mov edx [esp+4Ch+var_14] +
mov ecx [esp+4Ch+var_10] +
add [esp+4Ch+var_28] 1 +
mov [edx] eax +
mov edx [esp+4Ch+var_30] +
mov eax [esp+4Ch+var_18] +
add eax [edx+10h] +
mov edx [esp+4Ch+var_2C] +
mov [eax+4] ebp +
mov [eax+8] esi +
mov [eax+0Ch] edx +
xor edx edx +
mov [eax+10h] ebx +
mov [eax+14h] ecx +
jmp loc_45B5A5  +
mov [esp+4Ch+var_28] 0 +
mov edi [esp+4Ch+var_28] +
mov edx [esp+4Ch+var_34] +
imul eax edi +
add edx ecx +
add eax ebx +
mov dword ptr [eax] 0FFFFFFFFh +
mov [eax+4] edx +
mov [eax+8] esi +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
mov eax edi +
mov edi [esp+4Ch+var_30] +
add eax 1 +
mov [edi+14h] eax +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_40] offset sub_45A840 +
mov [esp+4Ch+var_44] 18h +
mov [esp+4Ch+var_4C] ebx +
call qsort  +
mov eax [esp+4Ch+arg_20] +
mov [eax] edi +
jmp loc_45ADDE  +
test edx edx +
mov edi edx +
jz loc_45B8C8  +
mov eax [esp+4Ch+var_30] +
lea edx [edx+8] +
mov ecx [esp+4Ch+arg_0] +
mov [esp+4Ch+var_1C] ebx +
imul ebp [esp+4Ch+var_28] +
mov ebx [eax+10h] +
mov eax [ecx+4] +
add ebx ebp +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
mov edx [esp+4Ch+var_30] +
mov ecx [esp+4Ch+var_1C] +
add [esp+4Ch+var_28] 1 +
mov [ebx] eax +
mov ebx [edx+10h] +
lea eax [ebx+ebp] +
mov [eax+4] edi +
mov edi [esp+4Ch+var_24] +
mov [eax+10h] ecx +
mov ecx [edx+8] +
mov dword ptr [eax+14h] 0 +
mov [eax+8] edi +
mov edi [esp+4Ch+var_2C] +
mov [eax+0Ch] edi +
jmp loc_45B800  +
mov eax [esp+4Ch+var_30] +
mov ecx [eax+8] +
mov ebx [eax+10h] +
jmp loc_45B800  +
***
mov eax [esp+4] +
mov ds:dword_514074 eax +
xor eax eax +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 227h +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov dword ptr [esp+8] 20Ch +
mov dword ptr [esp+4] offset a____Binutil_23 +
jmp sub_44BA40  +
***
push ebx  +
sub esp 18h +
mov eax [esp+20h] +
mov eax [eax+0A0h] +
mov ebx [eax] +
test ebx ebx +
js loc_45B950  +
add esp 18h +
lea eax ds:4[ebx*4] +
pop ebx  +
retn   +
***
mov dword ptr [esp+4] 1BDh +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
add esp 18h +
lea eax ds:4[ebx*4] +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 1B3h +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 1ACh +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 1A5h +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 19Eh +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
mov eax 1 +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 197h +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
mov eax 1 +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 18Ah +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
mov eax 1 +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov dword ptr [esp+4] 17Dh +
mov dword ptr [esp] offset a____Binutil_23 +
call sub_44BA40  +
mov eax 1 +
add esp 1Ch +
retn   +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+4] 18h +
mov [esp] ebx +
call sub_458B60  +
test eax eax +
jz loc_45BA8E  +
mov [eax] ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
mov dword ptr [esp+4] 8 +
mov esi [esp+24h] +
mov [esp] ebx +
call sub_458A80  +
mov edx [esp+28h] +
test esi esi +
mov [eax] esi +
mov [eax+4] edx +
jz loc_45BAD1  +
or dword ptr [ebx+28h] 200h +
mov [ebx+0A0h] eax +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+18h+var_18] offset aBfdPlugin +
lea ebx [esp+18h+arg_8] +
call printf  +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
call vprintf  +
mov [esp+18h+var_18] 0Ah +
call putchar  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
push edi  +
push esi  +
mov esi ecx +
push ebx  +
mov ebx edx +
sub esp 9Ch +
mov dword ptr [ecx] 0 +
mov [esp+0A8h+var_A8] eax +
call ds:LoadLibraryA  +
sub esp 4 +
test eax eax +
jz loc_45BCD0  +
mov [esp+0A8h+var_A4] offset aOnload_0 +
mov [esp+0A8h+var_A8] eax +
call ds:GetProcAddress  +
sub esp 8 +
test eax eax +
jz loc_45BCC3  +
lea edx [ebp+var_68] +
mov [ebp+var_68] 0Bh +
mov [ebp+var_64] offset sub_45BAE0 +
mov [ebp+var_60] 5 +
mov [ebp+var_5C] offset loc_45B8E0 +
mov [ebp+var_58] 8 +
mov [ebp+var_54] offset loc_45BAA0 +
mov [ebp+var_50] 0 +
mov [ebp+var_4C] 0 +
mov [esp+0A8h+var_A8] edx +
call eax  +
test eax eax +
jnz loc_45BCC3  +
mov dword ptr [esi] 1 +
movzx eax byte ptr [ebx+2Ch] +
and eax 0FFFFFFF3h +
or eax 8 +
mov [ebx+2Ch] al +
mov ecx ds:dword_514074 +
test ecx ecx +
jz loc_45BCC3  +
mov esi [ebx+8Ch] +
mov eax [ebx] +
mov [ebp+var_8C] 0 +
test esi esi +
mov [ebp+var_88] eax +
jz loc_45BCF0  +
mov eax [ebx+38h] +
mov edx [ebx+3Ch] +
mov [ebp+var_80] eax +
mov eax [ebx+88h] +
mov [ebp+var_7C] edx +
mov eax [eax+4] +
mov [ebp+var_74] 0 +
mov [ebp+var_78] eax +
mov eax [esi+8] +
test eax eax +
jz loc_45BCB7  +
mov [esp+0A8h+var_A8] eax +
call _fileno_0  +
mov edx [ebx+8Ch] +
test edx edx +
mov [ebp+var_84] eax +
jz loc_45BD20  +
mov [esp+0A8h+var_9C] 1 +
mov [esp+0A8h+var_A4] 0 +
mov [esp+0A8h+var_A0] 0 +
mov [esp+0A8h+var_A8] eax +
mov [ebp+var_70] ebx +
call j__lseeki64  +
mov esi eax +
mov edi edx +
lea eax [ebp+var_8C] +
mov [esp+0A8h+var_A4] eax +
lea eax [ebp+var_88] +
mov [esp+0A8h+var_A8] eax +
call ds:dword_514074  +
mov eax [ebp+var_84] +
mov [esp+0A8h+var_9C] 0 +
mov [esp+0A8h+var_A4] esi +
mov [esp+0A8h+var_A0] edi +
mov [esp+0A8h+var_A8] eax +
call j__lseeki64  +
mov eax [ebp+var_8C] +
test eax eax +
jz loc_45BCC3  +
movzx eax byte ptr [ebx+2Ch] +
and eax 0FFFFFFF3h +
or eax 4 +
mov [ebx+2Ch] al +
lea esp [ebp-0Ch] +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+0A8h+var_A8] esi +
call sub_459390  +
test eax eax +
jnz loc_45BD13  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+0A8h+var_A4] offset aUnableToLoadDl +
mov [esp+0A8h+var_A8] offset aS_3 +
call off_4BFA04  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [ebp+var_80] 0 +
mov esi ebx +
mov [ebp+var_7C] 0 +
mov [ebp+var_78] 0 +
mov [ebp+var_74] 0 +
jmp loc_45BC0E  +
mov eax [esi+8] +
jmp loc_45BC19  +
lea edx [ebp+var_48] +
mov [esp+0A8h+var_A4] edx +
mov [esp+0A8h+var_A8] eax +
call ds:_fstati64  +
test eax eax +
jnz loc_45BCC3  +
mov eax [ebp+var_30] +
mov edx [ebp+var_2C] +
mov [ebp+var_78] eax +
mov eax [ebp+var_84] +
mov [ebp+var_74] edx +
jmp loc_45BC35  +
***
push ebp  +
push edi  +
xor edi edi +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+30h] +
mov eax [ebp+0A0h] +
mov edx [eax] +
mov esi [eax+4] +
mov ds:dword_513FC0 offset a_text_20 +
mov ds:dword_513F14 1000h +
test edx edx +
mov [esp+0Ch] edx +
jle loc_45BDF6  +
***
mov [esp+arg_0] 18h +
mov [esp+0] ebp +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_45BE60  +
mov eax [esp+arg_30] +
mov [eax+edi*4] ebx +
mov ecx [esi+8] +
mov eax [esi] +
mov [ebx] ebp +
mov dword ptr [ebx+8] 0 +
cmp ecx 4 +
mov [ebx+4] eax +
ja loc_45BE27  +
mov edx 1 +
mov eax 2 +
shl edx cl +
test dl 15h +
jz loc_45BE20  +
cmp ecx 4 +
mov [ebx+0Ch] eax +
ja loc_45BE48  +
jmp ds:off_4FEE90[ecx*4]  +
***
mov dword ptr [ebx+10h] offset off_4BFAE8 +
mov dword ptr [ebx+10h] offset dword_513FC0 +
jmp loc_45BDE7  +
***
mov dword ptr [ebx+10h] offset unk_513F00 +
jmp loc_45BDE7  +
***
and edx 0Ah +
mov al 82h +
jnz loc_45BDCC  +
mov [esp-2Ch+arg_2C] 1D1h +
mov [esp-2Ch+arg_28] offset a____Binutil_23 +
call sub_44BA40  +
mov ecx [esi+8] +
xor eax eax +
mov [ebx+0Ch] eax +
cmp ecx 4 +
jbe loc_45BDD4  +
mov [esp-2Ch+arg_2C] 1FDh +
mov [esp-2Ch+arg_28] offset a____Binutil_23 +
call sub_44BA40  +
jmp loc_45BDE7  +
***
mov [esp+arg_0] 1E8h +
mov dword ptr [esp+0] offset a____Binutil_23 +
call sub_44BA40  +
jmp loc_45BD9E  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_51406C +
mov ebx [esp+80h] +
test eax eax +
jz loc_45BEA4  +
mov [esp] ebx +
call eax  +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
movzx edx byte ptr [ebx+2Ch] +
and edx 0Ch +
jz loc_45BEC0  +
xor eax eax +
cmp dl 4 +
jnz loc_45BE9C  +
mov eax [ebx+4] +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx dword_4BFCE4 +
test ecx ecx +
jz loc_45BEF8  +
mov eax ds:dword_514068 +
test eax eax +
jz loc_45BF00  +
mov ecx offset dword_4BFCE4 +
mov edx ebx +
call sub_45BB20  +
test eax eax +
jz loc_45BEF8  +
movzx edx byte ptr [ebx+2Ch] +
and edx 0Ch +
jmp loc_45BEAD  +
***
mov eax [esp+1Ch] +
mov [esp] eax +
call free  +
xor eax eax +
jmp loc_45BE9C  +
***
mov edx ds:dword_514070 +
test edx edx +
jz loc_45BEF8  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] offset a__LibBfdPlugin +
mov dword ptr [esp] offset aHomeJenkinsM_2 +
call sub_4A8A40  +
mov dword ptr [esp+4] offset aHomeJenkinsM_2 +
mov esi eax +
mov [esp+8] eax +
mov eax ds:dword_514070 +
mov [esp] eax +
call sub_4A9CD0  +
mov [esp] esi +
mov edi eax +
mov [esp+1Ch] eax +
call free  +
mov [esp] edi +
call sub_4BB5C0  +
test eax eax +
mov ebp eax +
jz loc_45BEEC  +
mov esi [esp+1Ch] +
mov [esp+80h] ebx +
jmp loc_45BF80  +
mov [esp] edi +
call free  +
test ebx ebx +
jnz loc_45C021  +
mov [esp] ebp +
call sub_4BB780  +
test eax eax +
jz loc_45BFFD  +
add eax 8 +
xor ebx ebx +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov dword ptr [esp+4] offset asc_4FEF10 +
mov [esp] esi +
call sub_4A8A40  +
mov edi eax +
lea eax [esp+30h] +
mov [esp+4] eax +
mov [esp] edi +
call ds:_stati64  +
test eax eax +
jnz loc_45BFD3  +
movzx eax word ptr [esp+36h] +
and ax 0F000h +
cmp ax 8000h +
jz loc_45BFE7  +
mov eax dword_4BFCE4 +
test eax eax +
jg loc_45BF70  +
mov eax [esp+2Ch] +
mov dword_4BFCE4 eax +
jmp loc_45BF70  +
***
mov edx [esp+80h] +
lea ecx [esp+2Ch] +
mov eax edi +
call sub_45BB20  +
mov ebx eax +
jmp loc_45BFD3  +
***
mov ebx [esp+80h] +
xor edi edi +
mov eax [esp+1Ch] +
mov [esp] eax +
call free  +
mov [esp] ebp +
call sub_4BB8A0  +
mov eax edi +
jmp loc_45BEDF  +
***
mov edi ebx +
mov ebx [esp+80h] +
jmp loc_45C006  +
***
mov eax [esp+4] +
mov ds:dword_514070 eax +
retn   +
***
mov eax [esp+4] +
test eax eax +
mov ds:dword_514068 eax +
setnz al  +
movzx eax al +
mov dword_4BFCE4 eax +
retn   +
***
mov edx dword_4BFCE4 +
xor eax eax +
test edx edx +
setnle al  +
retn   +
***
xor eax eax +
cmp [esp+arg_0] offset off_4FEF20 +
setz al  +
retn   +
***
mov eax [esp+arg_0] +
mov ds:dword_51406C eax +
retn   +
***
sub esp 14h +
mov esi [eax+78h] +
test byte ptr [edx+34h] 10h +
jnz loc_45C0CE  +
movzx ebx byte ptr [eax] +
and ebx 3 +
cmp bl 2 +
jz loc_45C0CE  +
test byte ptr [eax+1] 4 +
jz loc_45C0C4  +
cmp byte ptr [edx+30h] 1 +
jz loc_45C0F7  +
test ecx ecx +
jz loc_45C0C4  +
movzx eax byte ptr [ecx+0Ch] +
and eax 0Fh +
cmp al 1 +
jz loc_45C0F7  +
test esi esi +
jz loc_45C0CE  +
cmp byte ptr [edx+0Ch] 0 +
jz loc_45C0D4  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov ecx [edx+4] +
mov eax [esi+10h] +
mov [esp+14h+var_8] edx +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_C] ecx +
mov [esp+14h+var_14] esi +
call eax  +
mov edx [esp+14h+var_8] +
test eax eax +
jz loc_45C0CE  +
or byte ptr [edx+34h] 10h +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
jmp sub_45C110  +
***
mov ecx [eax] +
mov eax [esp+arg_4] +
mov edx [eax] +
mov eax [ecx+18h] +
sub eax [edx+18h] +
cmp eax 0 +
jz loc_45C136  +
mov eax 0FFFFFFFFh +
jle loc_45C134  +
mov eax 1 +
pop ebx  +
retn   +
mov eax [ecx+14h] +
mov ebx [edx+14h] +
mov eax [eax+4] +
sub eax [ebx+4] +
cmp eax 0 +
jz loc_45C150  +
jg loc_45C12F  +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
mov ecx [ecx+2Ch] +
xor eax eax +
sub ecx [edx+2Ch] +
cmp ecx 0 +
jz loc_45C134  +
jg loc_45C12F  +
jmp loc_45C149  +
***
jmp loc_45C170  +
mov eax [esp+4] +
mov edx [esp+8] +
mov eax [eax] +
mov edx [edx] +
mov eax [eax+10h] +
sub eax [edx+10h] +
retn   +
***
mov edx [esp+4] +
movzx eax byte ptr [edx+1] +
movzx ecx byte ptr [edx+2] +
shl eax 8 +
shl ecx 10h +
or eax ecx +
movzx ecx byte ptr [edx] +
movzx edx byte ptr [edx+3] +
or eax ecx +
shl edx 18h +
or eax edx +
retn   +
***
mov edx [esp+4] +
movzx eax byte ptr [edx] +
movzx ecx byte ptr [edx+1] +
shl eax 18h +
shl ecx 10h +
or eax ecx +
movzx ecx byte ptr [edx+3] +
movzx edx byte ptr [edx+2] +
or eax ecx +
shl edx 8 +
or eax edx +
retn   +
***
mov eax [esp+arg_0] +
movzx ecx byte ptr [eax+1] +
movzx edx byte ptr [eax+2] +
shl ecx 8 +
shl edx 10h +
or edx ecx +
movzx ecx byte ptr [eax] +
movzx eax byte ptr [eax+3] +
or edx ecx +
shl eax 18h +
or eax edx +
retn   +
***
mov ecx [esp+arg_0] +
movzx eax byte ptr [ecx+4] +
movzx edx byte ptr [ecx+7] +
shl eax 18h +
or eax edx +
movzx edx byte ptr [ecx+5] +
shl edx 10h +
or edx eax +
movzx eax byte ptr [ecx+6] +
shl eax 8 +
or eax edx +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov eax [edi+44h] +
test eax eax +
jz loc_45C2E8  +
mov edx [eax+8] +
test edx edx +
jz loc_45C2E8  +
cmp edx 0FFFFFFFFh +
jz loc_45C2E8  +
mov eax [eax+4] +
test eax eax +
jz loc_45C27F  +
mov ebx [eax-4] +
test ebx ebx +
jnz loc_45C2E8  +
mov eax [esp+10h+arg_4] +
mov [esp+10h+var_10] edx +
mov [esp+10h+var_C] eax +
call sub_45C250  +
mov eax [edi+44h] +
mov esi [eax+4] +
test esi esi +
jz loc_45C2F4  +
mov eax [eax+8] +
mov dword ptr [esi-4] 1 +
mov eax [eax+44h] +
mov ebx [eax+4] +
test ebx ebx +
jz loc_45C2E8  +
mov edx [edi+14h] +
mov edx [edx+94h] +
mov edx [edx+4] +
mov edx [edx+1B0h] +
mov edx [edx+174h] +
movzx ecx byte ptr [edx+0Bh] +
mov edx [eax] +
shr edx cl +
test edx edx +
jz loc_45C2E8  +
xor eax eax +
mov ecx [ebx+eax*4] +
test ecx ecx +
jz loc_45C2E1  +
mov dword ptr [esi+eax*4] 1 +
add eax 1 +
cmp eax edx +
jnz loc_45C2D3  +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [eax+8] +
mov edx [edx+44h] +
mov ecx [edx+4] +
mov edx [edx] +
mov [eax+4] ecx +
mov [eax] edx +
jmp loc_45C2E8  +
***
push ebx  +
sub esp 20h +
mov ebx [esp+20h+arg_4] +
mov edx [esp+20h+arg_0] +
mov eax [ebx+4] +
mov ecx [eax+30h] +
mov edi [ecx+4] +
mov esi [edi+1B0h] +
mov edi [edx+24h] +
test edi edi +
jg loc_45C347  +
mov dword ptr [edx+24h] 0FFFFFFFFh +
add esp 20h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edi [ebx] +
mov [edx+24h] edi +
mov esi [esi+180h] +
mov [esp+20h+var_10] 0 +
mov [esp+20h+var_14] 0 +
mov [esp+20h+var_18] edx +
mov [esp+20h+var_1C] eax +
mov [esp+20h+var_20] ecx +
call esi  +
add edi eax +
mov eax 1 +
mov [ebx] edi +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov edx [esp+24h] +
mov ebx [esp+20h] +
mov esi [edx+24h] +
mov ecx [edx] +
mov eax [edx+4] +
test esi esi +
jz loc_45C39F  +
mov [edx+4] ecx +
mov eax ecx +
mov edi [edx+8] +
cmp eax edi +
jnb loc_45C3C0  +
test esi esi +
mov ecx [eax] +
jnz loc_45C3B0  +
cmp ecx ebx +
ja loc_45C3C0  +
cmp ebx ecx +
jz loc_45C3D0  +
add eax 0Ch +
cmp eax edi +
mov [edx+4] eax +
jb loc_45C3A6  +
nop   +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov ecx [edx+20h] +
mov eax [eax+4] +
shr eax cl +
test eax eax +
jz loc_45C41B  +
cmp eax [edx+14h] +
jb loc_45C427  +
mov ecx [edx+1Ch] +
sub eax [edx+18h] +
mov eax [ecx+eax*4] +
movzx ecx byte ptr [eax+0Ch] +
lea ebx [ecx-6] +
cmp bl 1 +
ja loc_45C405  +
mov eax [eax+14h] +
movzx ecx byte ptr [eax+0Ch] +
lea ebx [ecx-6] +
cmp bl 1 +
jbe loc_45C3F6  +
sub ecx 3 +
cmp cl 1 +
ja loc_45C3C0  +
mov eax [eax+14h] +
mov edi [edx+10h] +
cmp [eax+94h] edi +
jz loc_45C455  +
mov eax 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov ecx [edx+0Ch] +
lea ebx [eax+eax*4] +
lea ebx [ecx+ebx*4] +
movzx ecx byte ptr [ebx+0Ch] +
shr cl 4 +
test cl cl +
jnz loc_45C3E1  +
mov ecx [ebx+10h] +
mov eax [edx+10h] +
mov [esp+4] ecx +
mov [esp] eax +
call sub_478480  +
test eax eax +
jz loc_45C3C0  +
mov edx [eax+7Ch] +
test edx edx +
jnz loc_45C41B  +
cmp eax offset off_4BFB90 +
jz loc_45C3C0  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jnz loc_45C3C0  +
movzx eax word ptr [eax+18h] +
and ax 380h +
cmp ax 100h +
jz loc_45C3C0  +
cmp ax 200h +
setnz al  +
movzx eax al +
jmp loc_45C420  +
***
push edi  +
push ebx  +
mov ebx eax +
sub esp 14h +
mov ecx [eax] +
test ecx ecx +
jz loc_45C5B2  +
mov eax [edx+8Ch] +
cmp ecx [eax+68h] +
jz loc_45C5B2  +
mov [esp+18h+var_18] ecx +
call free  +
mov eax [ebx+0Ch] +
mov edx [esi+94h] +
test eax eax +
mov edx [edx+0A0h] +
jz loc_45C5D2  +
cmp eax [edx+78h] +
jz loc_45C5D2  +
mov [esp+18h+var_18] eax +
call free  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov ebx [esp+18h+arg_4] +
movzx eax word ptr [ebx+18h] +
and ax 380h +
cmp ax 100h +
jz loc_45C60A  +
mov [esp+18h+var_14] 1AA1h +
mov [esp+18h+var_18] offset a____Binutil_12 +
call sub_44BA40  +
and word ptr [ebx+18h] 0FC7Fh +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
test byte ptr [eax+5] 8 +
mov [esp+4Ch+var_24] edx +
mov [esp+4Ch+var_30] ecx +
jz loc_45C800  +
mov eax [eax+1Ch] +
mov ebx [eax+4Ch] +
mov eax [eax+38h] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+4Ch+var_20] eax +
mov eax ecx +
shr eax 2 +
test eax eax +
mov edi eax +
jnz loc_45C7CB  +
mov eax [esp+4Ch+var_30] +
mov edx [esp+4Ch+arg_0] +
add eax eax +
test edx edx +
mov [esp+4Ch+var_14] eax +
jnz loc_45C859  +
mov [esp+4Ch+var_34] eax +
mov edi 1 +
lea esi [esi+0] +
mov esi [esp+4Ch+var_34] +
mov eax esi +
shl eax 2 +
mov [esp+4Ch+var_4C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_45C868  +
cmp edi esi +
jnb loc_45C7B7  +
lea edx ds:0[edi*4] +
mov esi [esp+4Ch+var_30] +
add ebx 2 +
mov [esp+4Ch+var_3C] edx +
mov edx [esp+4Ch+var_24] +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_10] 0FFFFFFFFh +
mov [esp+4Ch+var_28] 0FFFFFFFFh +
lea edx [edx+esi*4] +
mov esi edi +
mov [esp+4Ch+var_18] edx +
mov [esp+4Ch+var_1C] ebx +
nop   +
mov edi [esp+4Ch+arg_0] +
test edi edi +
jz loc_45C6F4  +
test esi 1Fh +
jz loc_45C7A5  +
mov eax [esp+4Ch+var_3C] +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_44] eax +
call memset  +
mov ebx [esp+4Ch+var_30] +
mov ecx [esp+4Ch+var_24] +
test ebx ebx +
jz loc_45C732  +
mov ebx [esp+4Ch+var_18] +
lea esi [esi+0] +
mov eax [ecx] +
xor edx edx +
add ecx 4 +
div  esi +
add dword ptr [ebp+edx*4+0] 1 +
cmp ecx ebx +
jnz loc_45C720  +
mov eax [esp+4Ch+var_20] +
xor ebx ebx +
xor edi edi +
mov ecx [esp+4Ch+var_1C] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+8] +
imul ecx eax +
mov [esp+4Ch+var_38] eax +
nop   +
mov eax [ebp+edi*4+0] +
xor edx edx +
imul eax eax +
add ecx eax +
adc ebx edx +
add edi 1 +
cmp edi esi +
jb loc_45C750  +
mov eax 1000h +
cdq   +
idiv  [esp+4Ch+var_38] +
xor edx edx +
mov edi eax +
mov eax esi +
div  edi +
add eax 1 +
imul eax eax +
imul ebx eax +
mul  ecx +
add edx ebx +
cmp edx [esp+4Ch+var_28] +
jb loc_45C840  +
ja loc_45C799  +
cmp eax [esp+4Ch+var_10] +
jb loc_45C840  +
add [esp+4Ch+var_2C] 1 +
cmp [esp+4Ch+var_2C] 64h +
jz loc_45C7B7  +
add esi 1 +
add [esp+4Ch+var_3C] 4 +
cmp [esp+4Ch+var_34] esi +
ja loc_45C6E0  +
mov [esp+4Ch+var_4C] ebp +
call free  +
mov eax [esp+4Ch+var_14] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [esp+4Ch+arg_0] +
mov eax ecx +
add eax eax +
mov [esp+4Ch+var_14] eax +
mov [esp+4Ch+var_34] eax +
test ebp ebp +
jz loc_45C680  +
cmp edi 1 +
jz loc_45C859  +
mov eax [esp+4Ch+var_14] +
and eax 1Fh +
cmp eax 1 +
adc [esp+4Ch+var_14] 0 +
jmp loc_45C680  +
mov eax 1 +
xor ecx ecx +
mov ebx [esp+4Ch+var_30] +
jmp loc_45C812  +
mov eax edx +
add ecx 1 +
mov edx ds:dword_500160[ecx*4] +
cmp ebx edx +
jb loc_45C824  +
test edx edx +
jnz loc_45C810  +
cmp eax 1 +
ja loc_45C7C3  +
mov ecx [esp+4Ch+arg_0] +
test ecx ecx +
jz loc_45C7C3  +
add esp 4Ch +
mov eax 2 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_10] eax +
mov [esp+4Ch+var_28] edx +
mov [esp+4Ch+var_14] esi +
mov [esp+4Ch+var_2C] 0 +
jmp loc_45C7A5  +
mov eax [esp+4Ch+var_14] +
mov edi 2 +
mov [esp+4Ch+var_34] eax +
jmp loc_45C7E8  +
xor eax eax +
jmp loc_45C7C3  +
***
mov eax [esp+arg_4] +
mov eax [eax+4] +
mov [esp+arg_4] eax +
mov eax [esp+arg_0] +
mov eax [eax+4] +
mov [esp+arg_0] eax +
jmp strcmp  +
***
mov edi eax +
push esi  +
mov esi edx +
push ebx  +
sub esp 2Ch +
test byte ptr [edx] 1 +
mov [esp+34h+var_18] 0 +
jnz loc_45C8B4  +
mov eax [edx+1Ch] +
xor edx edx +
mov ebx [eax+34h] +
test ebx ebx +
jz loc_45C92F  +
mov ebx [edi+64h] +
mov eax [edi+4] +
test ebx ebx +
mov ebp [eax+1B0h] +
jnz loc_45C8E4  +
jmp loc_45C9A2  +
mov eax [ebx+8Ch] +
mov ebx [ebx+0Ch] +
mov dword ptr [eax+60h] 0 +
test ebx ebx +
jz loc_45C928  +
mov eax [ebx+14h] +
and eax 8001h +
cmp eax 1 +
jnz loc_45C8D0  +
mov eax [ebp+70h] +
mov [esp+34h+var_28] ecx +
mov [esp+34h+var_2C] ebx +
mov [esp+34h+var_30] esi +
mov [esp+34h+var_34] edi +
call eax  +
mov ecx [esp+34h+var_28] +
test eax eax +
jnz loc_45C8D0  +
mov edx [ebx+8Ch] +
mov eax [esp+34h+var_18] +
mov ebx [ebx+0Ch] +
add eax 1 +
test ebx ebx +
mov [esp+34h+var_18] eax +
mov [edx+60h] eax +
jnz loc_45C8E4  +
mov edx [esp+34h+var_18] +
mov eax [esi+1Ch] +
lea edi [esp+34h+var_18] +
mov [ecx] edx +
mov [esp+34h+var_34] eax +
mov [esp+34h+var_2C] edi +
mov [esp+34h+var_30] offset loc_45D320 +
call sub_450810  +
mov ebx [esi+1Ch] +
mov eax [ebx+0C0h] +
test eax eax +
jz loc_45C972  +
mov ecx [esp+34h+var_18] +
lea edx [ecx+1] +
jmp loc_45C962  +
mov edx ecx +
mov [eax+0Ch] edx +
mov eax [eax] +
lea ecx [edx+1] +
test eax eax +
jnz loc_45C960  +
mov [esp+34h+var_18] edx +
mov [esp+34h+var_2C] edi +
mov [esp+34h+var_34] ebx +
mov [esp+34h+var_30] offset loc_45D2F0 +
call sub_450810  +
mov edx [esp+34h+var_18] +
xor eax eax +
lea ecx [edx+1] +
test edx edx +
mov edx [esi+1Ch] +
cmovnz eax ecx +
mov [edx+4Ch] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+1Ch] +
xor edx edx +
jmp loc_45C92F  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_45CA5C  +
movzx eax byte ptr [ebx+34h] +
mov esi [ebx+4] +
shr al 1 +
and eax 3 +
cmp eax 1 +
jle loc_45CA40  +
mov [esp+1Ch+var_18] 40h +
mov [esp+1Ch+var_1C] esi +
call strchr  +
test eax eax +
jz loc_45CA40  +
sub eax esi +
mov ebp eax +
lea eax [eax+1] +
mov [esp+1Ch+var_1C] eax +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_45CA70  +
mov [esp+1Ch+var_14] ebp +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] eax +
call memcpy  +
mov byte ptr [edi+ebp] 0 +
mov [esp+1Ch+var_1C] edi +
call sub_475670  +
mov edx [esp+1Ch+arg_4] +
mov ecx [edx] +
lea esi [ecx+4] +
mov [edx] esi +
mov [ecx] eax +
mov [ebx+3Ch] eax +
mov [esp+1Ch+var_1C] edi +
call free  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_1C] esi +
call sub_475670  +
mov ecx [esp+1Ch+arg_4] +
mov edi [esp+1Ch+arg_4] +
mov edx [ecx] +
lea ecx [edx+4] +
mov [edi] ecx +
mov [edx] eax +
mov [ebx+3Ch] eax +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+1Ch+arg_4] +
mov dword ptr [eax+4] 1 +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [ebx+9Ch] +
mov eax [esi+50h] +
test eax eax +
jz loc_45CB7E  +
mov [esp+14h+var_14] eax +
call sub_488580  +
mov eax [esi+7Ch] +
mov [esp+14h+var_14] eax +
call sub_489B10  +
mov [esp+14h+arg_0] ebx +
add esp 14h +
pop ebx  +
pop esi  +
jmp sub_44FC20  +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov ebx [eax+94h] +
mov esi [edx+94h] +
mov edi [ebx+4] +
cmp dword ptr [edi+4] 5 +
jz loc_45CBC6  +
xor eax eax +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esi+4] +
cmp dword ptr [edi+4] 5 +
jnz loc_45CBBC  +
mov edi [edx+8Ch] +
mov ebp [eax+8Ch] +
mov edi [edi+4] +
cmp [ebp+4] edi +
jnz loc_45CBBC  +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] ebx +
mov [esp+5Ch+var_30] ecx +
mov [esp+5Ch+var_34] edx +
call sub_4799A0  +
mov edx [esp+5Ch+var_34] +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_58] edx +
mov edi eax +
mov [esp+5Ch+var_2C] eax +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
mov [esp+5Ch+var_28] eax +
jz loc_45CBBC  +
cmp edi 0FFFFFEFFh +
jz loc_45CBBC  +
mov eax [ebx+0A0h] +
xor edx edx +
mov ecx eax +
mov [esp+5Ch+var_34] eax +
mov eax [ebx+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx edi byte ptr [eax+5] +
mov eax [ecx+60h] +
mov ecx [esi+0A0h] +
div  edi +
xor edx edx +
mov [esp+5Ch+var_18] ecx +
mov [esp+5Ch+var_20] eax +
mov eax [esi+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx edi byte ptr [eax+5] +
mov eax [ecx+60h] +
div  edi +
test eax eax +
mov ebp eax +
jz loc_45CBBC  +
mov eax [esp+5Ch+var_20] +
test eax eax +
jz loc_45CBBC  +
mov eax [esp+5Ch+var_34] +
lea edx [ecx+48h] +
mov [esp+5Ch+var_14] edx +
mov [esp+5Ch+var_1C] 0 +
mov edi [eax+24Ch] +
mov eax [ecx+24Ch] +
mov ecx [esp+5Ch+var_30] +
test edi edi +
mov [esp+5Ch+var_24] eax +
jz loc_45CE58  +
test edi edi +
jz loc_45CDDC  +
mov eax [esp+5Ch+var_24] +
mov [esp+5Ch+var_30] 0 +
test eax eax +
jz loc_45CDDC  +
mov ecx [esp+5Ch+var_24] +
test ecx ecx +
jz loc_45CEED  +
test edi edi +
jz loc_45CEED  +
mov [esp+5Ch+var_20] ebx +
mov ebp [edi+4] +
lea eax [edi+0Ch] +
mov ebx [esp+5Ch+var_2C] +
xor edx edx +
mov [esp+5Ch+var_14] esi +
mov esi eax +
mov [esp+5Ch+var_10] eax +
lea esi [esi+0] +
cmp edx ebp +
jnb loc_45CD3B  +
lea eax [ebp+edx+0] +
shr eax 1 +
lea ecx [eax+eax*2] +
lea edi [esi+ecx*4] +
mov ecx [edi+8] +
cmp ebx ecx +
jnb loc_45CD2E  +
cmp edx eax +
mov ebp eax +
jnb loc_45CD3B  +
add eax edx +
shr eax 1 +
lea ecx [eax+eax*2] +
lea edi [esi+ecx*4] +
mov ecx [edi+8] +
cmp ebx ecx +
jb loc_45CD17  +
cmp ebx ecx +
jbe loc_45CF49  +
lea edx [eax+1] +
jmp loc_45CD00  +
mov ebx [esp+5Ch+var_20] +
mov esi [esp+5Ch+var_14] +
mov [esp+5Ch+var_2C] 0 +
mov eax [esp+5Ch+var_24] +
xor edx edx +
mov [esp+5Ch+var_24] ebx +
mov ebx [esp+5Ch+var_28] +
mov [esp+5Ch+var_20] esi +
mov ebp [eax+4] +
add eax 0Ch +
mov esi eax +
cmp ebp edx +
jbe loc_45CDA7  +
lea eax [edx+ebp] +
shr eax 1 +
lea ecx [eax+eax*2] +
lea edi [esi+ecx*4] +
mov ecx [edi+8] +
cmp ebx ecx +
jnb loc_45CD92  +
cmp edx eax +
mov ebp eax +
jnb loc_45CDA7  +
add eax edx +
shr eax 1 +
lea ecx [eax+eax*2] +
lea edi [esi+ecx*4] +
mov ecx [edi+8] +
cmp ebx ecx +
jb loc_45CD7B  +
cmp ebx ecx +
jbe loc_45CF61  +
lea edx [eax+1] +
jmp loc_45CD65  +
mov [esp+5Ch+var_30] 0 +
xor edi edi +
mov eax [esp+5Ch+var_1C] +
test eax eax +
jz loc_45CDB9  +
mov [esp+5Ch+var_5C] eax +
call free  +
mov esi [esp+5Ch+var_30] +
mov eax edi +
test esi esi +
jz loc_45CBBE  +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_34] edi +
call free  +
mov eax [esp+5Ch+var_34] +
jmp loc_45CBBE  +
mov eax [esp+5Ch+var_14] +
mov [esp+5Ch+var_44] 0 +
mov [esp+5Ch+var_48] 0 +
mov [esp+5Ch+var_4C] 0 +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] ebp +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_10] ecx +
call sub_475A20  +
test eax eax +
mov [esp+5Ch+var_30] eax +
jz loc_45CDA7  +
test edi edi +
jz loc_45CEED  +
mov ecx [esp+5Ch+var_10] +
cmp byte ptr [ecx+3] 0 +
js loc_45CCCF  +
mov ecx [esi+0A0h] +
mov edx eax +
mov eax ebp +
mov [esp+5Ch+var_14] ecx +
call sub_4BD368  +
mov ecx [esp+5Ch+var_14] +
mov [esp+5Ch+var_24] eax +
mov [ecx+24Ch] eax +
jmp loc_45CCCF  +
mov eax [esp+5Ch+var_20] +
mov [esp+5Ch+var_44] 0 +
mov [esp+5Ch+var_48] 0 +
mov [esp+5Ch+var_4C] 0 +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_34] +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_5C] ebx +
add eax 48h +
mov [esp+5Ch+var_58] eax +
call sub_475A20  +
test eax eax +
mov [esp+5Ch+var_1C] eax +
jz loc_45CD9F  +
mov ecx [esp+5Ch+var_30] +
cmp byte ptr [ecx+3] 0 +
jns loc_45D2B5  +
mov eax [esp+5Ch+var_14] +
mov [esp+5Ch+var_44] 0 +
mov [esp+5Ch+var_48] 0 +
mov [esp+5Ch+var_4C] 0 +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] ebp +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] esi +
call sub_475A20  +
test eax eax +
mov [esp+5Ch+var_30] eax +
jz loc_45CDA7  +
mov eax [esp+5Ch+var_20] +
shl eax 3 +
mov [esp+5Ch+var_5C] eax +
call sub_459B80  +
mov [esp+5Ch+var_24] eax +
lea eax ds:0[ebp*8] +
mov [esp+5Ch+var_5C] eax +
call sub_459B80  +
test eax eax +
mov [esp+5Ch+var_14] eax +
jnz loc_45D0F3  +
xor edi edi +
cmp [esp+5Ch+var_24] 0 +
jz loc_45CF30  +
mov eax [esp+5Ch+var_24] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax [esp+5Ch+var_14] +
test eax eax +
jz loc_45CDA9  +
mov [esp+5Ch+var_5C] eax +
call free  +
jmp loc_45CDA9  +
mov eax [edi+4] +
mov ebx [esp+5Ch+var_20] +
mov esi [esp+5Ch+var_14] +
mov [esp+5Ch+var_10] edi +
mov [esp+5Ch+var_2C] eax +
jmp loc_45CD4B  +
mov edx [esp+5Ch+var_2C] +
mov ebx [esp+5Ch+var_24] +
mov esi [esp+5Ch+var_20] +
mov eax [edi+4] +
test edx edx +
jz loc_45CDA7  +
test eax eax +
jz loc_45CDA7  +
cmp [esp+5Ch+var_2C] eax +
jnz loc_45CDA7  +
mov eax [esp+5Ch+var_2C] +
shl eax 3 +
mov [esp+5Ch+var_5C] eax +
mov ebp eax +
mov [esp+5Ch+var_28] eax +
call sub_459B80  +
mov [esp+5Ch+var_5C] ebp +
mov [esp+5Ch+var_24] eax +
call sub_459B80  +
test eax eax +
mov [esp+5Ch+var_14] eax +
jz loc_45CF1B  +
cmp [esp+5Ch+var_24] 0 +
jz loc_45CF1B  +
mov eax [esp+5Ch+var_10] +
mov edx [esp+5Ch+var_24] +
mov ebp [eax] +
mov eax [esp+5Ch+var_28] +
add eax ebp +
cmp ebp eax +
mov [esp+5Ch+var_20] eax +
jnb loc_45D012  +
mov [esp+5Ch+var_10] esi +
mov esi ebx +
mov ebx edx +
mov eax [esp+5Ch+var_34] +
add ebx 8 +
mov [ebx-8] ebp +
mov ecx [ebp+0] +
add ebp 8 +
mov eax [eax+64h] +
mov [esp+5Ch+var_54] ecx +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_58] eax +
call sub_475820  +
mov [ebx-4] eax +
cmp [esp+5Ch+var_20] ebp +
ja loc_45CFE2  +
mov esi [esp+5Ch+var_10] +
mov ebx [edi] +
mov ebp [esp+5Ch+var_28] +
mov edi [esp+5Ch+var_14] +
add ebp ebx +
cmp ebx ebp +
jnb loc_45D04B  +
mov eax [esp+5Ch+var_18] +
add edi 8 +
mov [edi-8] ebx +
mov edx [ebx] +
add ebx 8 +
mov eax [eax+64h] +
mov [esp+5Ch+var_54] edx +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_58] eax +
call sub_475820  +
mov [edi-4] eax +
cmp ebp ebx +
ja loc_45D022  +
mov esi [esp+5Ch+var_2C] +
mov ebx [esp+5Ch+var_24] +
mov [esp+5Ch+var_50] offset sub_45C870 +
mov [esp+5Ch+var_54] 8 +
mov [esp+5Ch+var_58] esi +
mov [esp+5Ch+var_5C] ebx +
call qsort  +
mov [esp+5Ch+var_58] esi +
mov esi [esp+5Ch+var_14] +
mov [esp+5Ch+var_50] offset sub_45C870 +
mov [esp+5Ch+var_54] 8 +
mov [esp+5Ch+var_5C] esi +
call qsort  +
mov eax [esi] +
mov edx [ebx] +
movzx eax word ptr [eax+4] +
cmp [edx+4] ax +
jnz loc_45D0EC  +
mov ebx [esp+5Ch+var_14] +
xor ebp ebp +
mov eax [esp+5Ch+var_24] +
lea edi [ebx+8] +
mov edx ebx +
lea esi [eax+8] +
jmp loc_45D0D6  +
add ebp 1 +
cmp ebp [esp+5Ch+var_2C] +
jz loc_45D2AA  +
mov edx edi +
mov eax esi +
mov ecx [edx] +
add esi 8 +
add edi 8 +
mov ebx [eax] +
movzx ecx word ptr [ecx+4] +
cmp [ebx+4] cx +
jnz loc_45D0EC  +
mov edx [edx+4] +
mov [esp+5Ch+var_58] edx +
mov eax [eax+4] +
mov [esp+5Ch+var_5C] eax +
call strcmp  +
test eax eax +
jz loc_45D0B1  +
xor edi edi +
jmp loc_45CF24  +
mov eax [esp+5Ch+var_24] +
test eax eax +
jz loc_45CF1B  +
mov eax [esp+5Ch+var_20] +
mov ecx [esp+5Ch+var_1C] +
lea eax [eax+eax*4] +
lea edx [ecx+eax*4] +
cmp edx ecx +
jbe loc_45D2E5  +
mov eax ecx +
mov edi ebx +
mov ebx [esp+5Ch+var_2C] +
xor ecx ecx +
mov [esp+5Ch+var_20] esi +
jmp loc_45D12C  +
add eax 14h +
cmp edx eax +
jbe loc_45D13D  +
cmp [eax+10h] ebx +
jnz loc_45D125  +
mov esi [esp+5Ch+var_24] +
mov [esi+ecx*8] eax +
add ecx 1 +
jmp loc_45D125  +
mov esi [esp+5Ch+var_20] +
mov ebx edi +
mov edi [esp+5Ch+var_30] +
lea eax [ebp+ebp*4+0] +
lea edx [edi+eax*4] +
cmp edx edi +
jbe loc_45D0EC  +
mov eax edi +
xor ebp ebp +
mov edi ecx +
mov ecx [esp+5Ch+var_28] +
mov [esp+5Ch+var_2C] ebx +
jmp loc_45D169  +
add eax 14h +
cmp edx eax +
jbe loc_45D17A  +
cmp [eax+10h] ecx +
jnz loc_45D162  +
mov ebx [esp+5Ch+var_14] +
mov [ebx+ebp*8] eax +
add ebp 1 +
jmp loc_45D162  +
mov ecx edi +
xor edi edi +
mov ebx [esp+5Ch+var_2C] +
test ecx ecx +
jz loc_45CF24  +
test ebp ebp +
jz loc_45CF24  +
cmp ebp ecx +
jnz loc_45CF24  +
mov edi [esp+5Ch+var_24] +
xor edx edx +
mov [esp+5Ch+var_2C] esi +
mov esi ebx +
mov ebx edx +
mov eax [edi] +
add ebx 1 +
add edi 8 +
mov ecx [eax+8] +
mov eax [esp+5Ch+var_34] +
mov eax [eax+64h] +
mov [esp+5Ch+var_54] ecx +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_58] eax +
call sub_475820  +
mov [edi-4] eax +
cmp ebx ebp +
jnz loc_45D1A8  +
mov esi [esp+5Ch+var_2C] +
xor edi edi +
mov ebx [esp+5Ch+var_14] +
mov eax [ebx] +
add edi 1 +
add ebx 8 +
mov ecx [eax+8] +
mov eax [esp+5Ch+var_18] +
mov eax [eax+64h] +
mov [esp+5Ch+var_54] ecx +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_58] eax +
call sub_475820  +
mov [ebx-4] eax +
cmp edi ebp +
jnz loc_45D1DB  +
mov esi [esp+5Ch+var_24] +
mov [esp+5Ch+var_50] offset sub_45C870 +
mov [esp+5Ch+var_54] 8 +
mov [esp+5Ch+var_58] ebp +
mov [esp+5Ch+var_5C] esi +
call qsort  +
mov ebx [esp+5Ch+var_14] +
mov [esp+5Ch+var_50] offset sub_45C870 +
mov [esp+5Ch+var_54] 8 +
mov [esp+5Ch+var_58] ebp +
mov [esp+5Ch+var_5C] ebx +
call qsort  +
mov eax [ebx] +
mov edx [esi] +
movzx eax word ptr [eax+0Ch] +
cmp [edx+0Ch] ax +
jnz loc_45D0EC  +
mov eax esi +
mov edx ebx +
lea edi [ebx+8] +
xor ebx ebx +
lea esi [esi+8] +
mov [esp+5Ch+var_34] ebp +
jmp loc_45D28D  +
add ebx 1 +
cmp ebx [esp+5Ch+var_34] +
jz loc_45D2AA  +
mov edx edi +
mov eax esi +
mov ebp [edx] +
add esi 8 +
add edi 8 +
mov ecx [eax] +
movzx ebp word ptr [ebp+0Ch] +
cmp [ecx+0Ch] bp +
jnz loc_45D0EC  +
mov edx [edx+4] +
mov [esp+5Ch+var_58] edx +
mov eax [eax+4] +
mov [esp+5Ch+var_5C] eax +
call strcmp  +
test eax eax +
jz loc_45D268  +
xor edi edi +
jmp loc_45CF24  +
mov edi 1 +
nop   +
jmp loc_45CF24  +
mov eax [ebx+0A0h] +
mov edx [esp+5Ch+var_1C] +
mov [esp+5Ch+var_10] ecx +
mov [esp+5Ch+var_30] eax +
mov eax [esp+5Ch+var_20] +
call sub_4BD368  +
mov ecx [esp+5Ch+var_10] +
mov edi eax +
mov eax [esp+5Ch+var_30] +
mov [eax+24Ch] edi +
jmp loc_45CCB3  +
xor ecx ecx +
jmp loc_45D143  +
***
mov eax [esp+4] +
mov edx [esp+8] +
test byte ptr [eax+34h] 8 +
jnz loc_45D30E  +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
jz loc_45D30E  +
mov ecx [edx] +
add ecx 1 +
mov [edx] ecx +
mov [eax+20h] ecx +
mov eax 1 +
retn   +
***
mov eax [esp+4] +
mov edx [esp+8] +
test byte ptr [eax+34h] 8 +
jz loc_45D33E  +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
jz loc_45D33E  +
mov ecx [edx] +
add ecx 1 +
mov [edx] ecx +
mov [eax+20h] ecx +
mov eax 1 +
retn   +
***
push edi  +
push esi  +
mov esi edx +
push ebx  +
sub esp 1Ch +
mov eax [eax+1B0h] +
mov edi [esp+28h+arg_4] +
mov ebx [esp+28h+arg_8] +
mov eax [eax+0E4h] +
test eax eax +
jz loc_45D384  +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_20] edi +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] edx +
call eax  +
test ebx ebx +
jnz loc_45D3B5  +
movzx eax byte ptr [ebp+0Dh] +
movzx edx byte ptr [esi+31h] +
and eax 3 +
mov ecx edx +
movzx ebx al +
and ecx 3 +
sub ebx 1 +
sub ecx 1 +
cmp ebx ecx +
jnb loc_45D3AD  +
and edx 0FFFFFFFCh +
or edx eax +
mov [esi+31h] dl +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_45D3AD  +
test byte ptr [ebp+0Dh] 3 +
jz loc_45D3AD  +
mov eax [esp+28h+arg_0] +
test byte ptr [eax] 8 +
jnz loc_45D3AD  +
or byte ptr [esi+35h] 8 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
mov ebx [esp+1Ch+arg_4] +
cmp dword ptr [esi+20h] 0FFFFFFFFh +
jz loc_45D41B  +
mov eax [ebx+4] +
mov eax [eax+154h] +
mov [esp+1Ch+var_1C] esi +
call eax  +
test eax eax +
jnz loc_45D428  +
mov eax [ebx+28h] +
cmp [esi+20h] eax +
jl loc_45D41B  +
mov eax [ebx+34h] +
lea edx [eax+1] +
mov [ebx+34h] edx +
mov [esi+20h] eax +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [ebx+14h] +
xor edx edx +
mov eax [esi+20h] +
mov ecx [ebx+38h] +
mov ebp [edi+eax*4] +
mov eax ebp +
div  dword ptr [ebx+2Ch] +
mov eax ebp +
shr eax cl +
mov [esp+1Ch+var_10] edx +
mov edx [ebx+0Ch] +
shr edx cl +
mov ecx [ebx+40h] +
sub edx 1 +
and eax edx +
mov edx [ebx+20h] +
and ecx ebp +
mov ebp 1 +
shl ebp cl +
lea eax [edx+eax*4] +
or ebp [eax] +
mov [esp+1Ch+var_14] eax +
mov [eax] ebp +
mov edx [esi+20h] +
mov eax 1 +
mov ecx [ebx+3Ch] +
mov edx [edi+edx*4] +
shr edx cl +
and edx [ebx+40h] +
mov ecx edx +
shl eax cl +
mov ecx [ebx+1Ch] +
mov edx eax +
mov eax [esp+1Ch+var_14] +
or edx ebp +
mov ebp [esp+1Ch+var_10] +
mov [eax] edx +
mov eax [esi+20h] +
mov eax [edi+eax*4] +
lea edi ds:0[ebp*4] +
and eax 0FFFFFFFEh +
mov edx eax +
or edx 1 +
cmp dword ptr [ecx+ebp*4] 1 +
cmovz eax edx +
mov edx [ebx] +
mov edx [edx+4] +
mov ecx [edx+30h] +
mov edx [ebx+18h] +
mov edx [edx+ebp*4] +
mov ebp [ebx+24h] +
sub edx [ebx+30h] +
mov [esp+1Ch+var_1C] eax +
lea edx [ebp+edx*4+0] +
mov [esp+1Ch+var_18] edx +
call ecx  +
mov eax [ebx+1Ch] +
add eax edi +
add edi [ebx+18h] +
sub dword ptr [eax] 1 +
mov eax [edi] +
lea ecx [eax+1] +
mov [edi] ecx +
mov [esi+20h] eax +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
mov ecx [esp+4+arg_0] +
mov edx [esp+4+arg_4] +
cmp dword ptr [ecx+4] 1 +
setz al  +
xor ebx ebx +
cmp dword ptr [edx+4] 1 +
mov esi eax +
mov eax 1 +
setz bl  +
cmp esi ebx +
jl loc_45D53C  +
jg loc_45D540  +
mov esi [ecx] +
mov ebx [edx] +
and esi [ecx+0Ch] +
and ebx [edx+0Ch] +
cmp esi ebx +
jb loc_45D540  +
ja loc_45D53C  +
mov eax [edx+8] +
xor ebx ebx +
cmp [ecx+8] eax +
mov eax 0FFFFFFFFh +
setnbe bl  +
cmovnb eax ebx +
pop ebx  +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
jmp loc_45D53C  +
***
mov ecx [esp+arg_0] +
mov eax [edx+4] +
cmp [ecx+4] eax +
jb loc_45D587  +
mov eax 1 +
ja loc_45D585  +
mov ebx [edx] +
cmp [ecx] ebx +
jb loc_45D587  +
nop   +
ja loc_45D585  +
mov eax [edx+8] +
xor ebx ebx +
cmp [ecx+8] eax +
mov eax 0FFFFFFFFh +
setnbe bl  +
cmovnb eax ebx +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov edx [esp+18h+arg_4] +
test byte ptr [ebx+34h] 20h +
jnz loc_45D5B6  +
movzx eax byte ptr [ebx+0Ch] +
lea ecx [eax-3] +
cmp cl 1 +
jbe loc_45D5C0  +
cmp al 1 +
jz loc_45D5D2  +
cmp al 2 +
jz loc_45D5D2  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
movzx ecx byte ptr [ebx+33h] +
test cl 2 +
jnz loc_45D5F6  +
and ecx 0Ah +
jnz loc_45D5D2  +
cmp al 3 +
jz loc_45D5F6  +
mov eax [edx+4] +
mov edx [edx] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_18] edx +
call eax  +
mov eax 1 +
and byte ptr [ebx+33h] 0ECh +
add esp 18h +
pop ebx  +
retn   +
mov eax [ebx+14h] +
test byte ptr [eax+18h] 8 +
jz loc_45D5D2  +
jmp loc_45D5B6  +
***
jmp sub_45D610  +
***
push edi  +
mov edi ecx +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [ecx+18h] +
mov ebx [esp+48h+arg_0] +
mov [esp+48h+var_40] ebp +
mov esi [esp+48h+arg_4] +
mov [esp+48h+var_20] edx +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
call sub_46FAD0  +
mov ecx eax +
xor eax eax +
cmp ecx [edi+18h] +
jz loc_45D650  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+0A0h] +
mov [esp+48h+var_1C] 0 +
mov edx [eax+70h] +
test edx edx +
mov [esp+48h+var_30] edx +
jnz loc_45D760  +
mov eax [ebp+4] +
mov edx [edi+28h] +
mov eax [eax+1B0h] +
mov [esp+48h+var_2C] edx +
mov [esp+48h+var_30] eax +
mov eax [eax+174h] +
movzx edx byte ptr [eax+3] +
cmp [esp+48h+var_2C] edx +
jz loc_45D795  +
movzx edx byte ptr [eax+4] +
cmp [esp+48h+var_2C] edx +
jnz loc_45D772  +
mov eax [eax+40h] +
mov [esp+48h+var_2C] eax +
lea eax [ebx+ecx] +
cmp ebx eax +
mov [esp+48h+var_28] eax +
jnb loc_45D788  +
mov [esp+48h+var_24] edi +
mov edi ebx +
mov ebx [esp+48h+var_1C] +
jmp loc_45D6E8  +
cmp eax ebx +
jnb loc_45D7A1  +
movzx eax byte ptr [ecx+9] +
lea eax [eax+eax*2] +
lea esi [esi+eax*4] +
mov eax [esp+48h+var_24] +
add edi [eax+28h] +
cmp [esp+48h+var_28] edi +
jbe loc_45D788  +
mov eax [esp+48h+var_2C] +
mov [esp+48h+var_40] esi +
mov [esp+48h+var_44] edi +
mov [esp+48h+var_48] ebp +
call eax  +
mov edx [esp+48h+var_30] +
mov eax [esi+4] +
mov ecx [edx+174h] +
shr eax 8 +
cmp byte ptr [ecx+0Ah] 40h +
jz loc_45D7DF  +
test ebx ebx +
jnz loc_45D6C5  +
test eax eax +
jz loc_45D6CD  +
mov edx [esi] +
mov [esp+48h+var_3C] eax +
mov eax [esp+48h+var_20] +
mov [esp+48h+var_38] 0 +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_34] edx +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] offset aBNonZeroSymbol +
call off_4BFA04  +
mov [esp+48h+var_48] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_45D643  +
mov eax [eax+60h] +
xor edx edx +
div  [esp+48h+var_30] +
mov [esp+48h+var_1C] eax +
jmp loc_45D66D  +
mov [esp+48h+var_48] 3 +
call sub_44BAF0  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [eax+38h] +
mov [esp+48h+var_2C] eax +
jmp loc_45D6AA  +
mov edx [esi] +
mov ebx [esp+48h+var_1C] +
mov [esp+48h+var_3C] eax +
mov eax [esp+48h+var_20] +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_34] edx +
mov [esp+48h+var_38] ebx +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_48] offset aBBadRelocSymbo +
call off_4BFA04  +
mov [esp+48h+var_48] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_45D643  +
test ebx ebx +
jz loc_45D6CD  +
xor eax eax +
jmp loc_45D6C5  +
***
sub esp 1Ch +
mov edx [eax+6Ch] +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_10] 0FF00h +
mov [esp+1Ch+var_1C] offset aBTooManySectio +
mov [esp+1Ch+var_14] edx +
call off_4BFA04  +
mov [esp+1Ch+var_1C] 0Fh +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
push ebx  +
sub esp 20h +
mov esi [esp+20h+arg_0] +
mov edi [esp+20h+arg_4] +
mov ebx [esp+20h+arg_8] +
mov eax [esi+4] +
mov edx [eax+0A0h] +
mov edx [edx+90Ch] +
test edx edx +
jz loc_45D923  +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+68h] +
test eax eax +
jz loc_45D894  +
mov ecx [esp+20h+arg_10] +
mov edx [esi] +
mov [esp+20h+var_18] ebx +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_10] ecx +
mov ecx [esp+20h+arg_C] +
mov [esp+20h+var_20] edx +
mov [esp+20h+var_14] ecx +
call eax  +
cmp eax 1 +
jz loc_45D894  +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
test edi edi +
jz loc_45D8AB  +
cmp byte ptr [edi] 0 +
jz loc_45D8AB  +
mov eax [esp+20h+arg_C] +
test byte ptr [eax+15h] 80h +
jz loc_45D940  +
mov dword ptr [ebx+8] 0FFFFFFFFh +
mov eax [esi] +
mov edi [eax+1Ch] +
mov eax [edi+58h] +
mov edx [edi+54h] +
cmp eax edx +
jbe loc_45D970  +
mov eax [edi+5Ch] +
imul edx edx +
add eax edx +
mov edx [ebx] +
mov [eax] edx +
mov edx [ebx+4] +
mov [eax+4] edx +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ebx+10h] +
mov [eax+10h] edx +
mov edx [edi+54h] +
mov ecx [esi+34h] +
imul eax edx +
add eax [edi+5Ch] +
test ecx ecx +
mov ecx [esi+4] +
mov [eax+14h] edx +
jz loc_45D997  +
mov ebx [ecx+7Ch] +
mov esi ebx +
mov [eax+18h] ebx +
add edx 1 +
lea eax [esi+1] +
mov [ecx+7Ch] eax +
mov eax 1 +
mov [edi+54h] edx +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+20h+var_1C] 2213h +
mov [esp+20h+var_20] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esi+4] +
jmp loc_45D859  +
mov eax [esi+8] +
mov [esp+20h+var_18] 0 +
mov [esp+20h+var_1C] edi +
mov [esp+20h+var_20] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
mov [ebx+8] eax +
jnz loc_45D8B2  +
xor eax eax +
jmp loc_45D88D  +
lea edx [eax+eax] +
mov [edi+58h] edx +
imul eax eax +
mov edx [edi+5Ch] +
mov [esp+20h+var_1C] eax +
mov [esp+20h+var_20] edx +
call sub_459C10  +
test eax eax +
mov [edi+5Ch] eax +
jz loc_45D963  +
mov edx [edi+54h] +
jmp loc_45D8C8  +
mov esi [ecx+7Ch] +
xor ebx ebx +
jmp loc_45D908  +
***
jmp sub_45D9B0  +
***
mov ebx eax +
sub esp 14h +
mov eax [eax+94h] +
mov edx [eax+0A0h] +
mov esi [edx+40h] +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] eax +
call sub_4799A0  +
mov eax [esi+eax*4] +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_45DA16  +
mov ecx [ebx+94h] +
mov eax [ecx+4] +
mov eax [eax+1B0h] +
mov edx [eax+164h] +
xor eax eax +
test edx edx +
jz loc_45DA10  +
mov [esp+14h+var_8] eax +
mov [esp+14h+var_C] ebx +
mov [esp+14h+var_10] ecx +
mov [esp+14h+var_14] offset aBWarningSh_lin +
call edx  +
mov eax [esp+14h+var_8] +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov eax [esi+eax*4] +
mov eax [eax+2Ch] +
mov edx [eax+3Ch] +
mov eax [eax+38h] +
add eax [edx+1Ch] +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+8+arg_0] +
mov eax [eax] +
mov eax [eax+10h] +
call sub_45D9B0  +
mov ebx eax +
mov eax [esp+8+arg_4] +
mov eax [eax] +
mov eax [eax+10h] +
call sub_45D9B0  +
xor ecx ecx +
mov edx 0FFFFFFFFh +
cmp ebx eax +
setnbe cl  +
cmovnb edx ecx +
add esp 8 +
mov eax edx +
pop ebx  +
retn   +
***
push edi  +
mov eax 1 +
push esi  +
push ebx  +
sub esp 10h +
mov esi [esp+20h] +
movzx edx byte ptr [esi+33h] +
and edx 0Ah +
cmp dl 8 +
jz loc_45DA92  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
cmp dword ptr [esi+20h] 0FFFFFFFFh +
jz loc_45DA8B  +
mov ecx [esi+40h] +
test ecx ecx +
jz loc_45DA8B  +
mov edx [ecx+14h] +
mov ebx [edx+0A0h] +
test byte ptr [ebx+924h] 0Bh +
jnz loc_45DA8B  +
mov eax [esp+24h] +
mov eax [eax] +
mov edi [eax+30h] +
mov eax [edi+0A0h] +
mov ebx [eax+244h] +
test ebx ebx +
jnz loc_45DADB  +
jmp loc_45DB60  +
mov ebx [ebx+1Ch] +
test ebx ebx +
jz loc_45DB60  +
cmp edx [ebx+10h] +
nop   +
jnz loc_45DAD0  +
mov edx [ebx+18h] +
test edx edx +
jz loc_45DB02  +
mov eax [ecx+18h] +
cmp [edx+10h] eax +
jnz loc_45DAF8  +
jmp loc_45DB55  +
cmp [edx+10h] eax +
jz loc_45DB55  +
mov edx [edx+14h] +
test edx edx +
lea esi [esi+0] +
jnz loc_45DAF3  +
mov dword ptr [esp+4] 18h +
mov [esp] edi +
call sub_458B60  +
test eax eax +
jz loc_45DBA2  +
mov ecx [esi+40h] +
mov edi [esp+24h] +
mov edx [ecx+18h] +
mov [eax+10h] edx +
movzx edx word ptr [ecx+2] +
mov [eax+4] dx +
mov edx [ebx+18h] +
mov [eax+14h] edx +
mov edx [edi+4] +
mov [ecx+24h] edx +
lea ecx [edx+1] +
add edx 1 +
mov [edi+4] ecx +
mov [eax+6] dx +
mov [ebx+18h] eax +
mov eax 1 +
jmp loc_45DA8B  +
***
mov eax 1 +
jmp loc_45DA8B  +
***
mov dword ptr [esp+4] 20h +
mov [esp] edi +
call sub_458B60  +
test eax eax +
mov ebx eax +
jz loc_45DBA2  +
mov eax [esi+40h] +
mov eax [eax+14h] +
mov [ebx+10h] eax +
mov eax [esp+24h] +
mov eax [eax] +
mov edi [eax+30h] +
mov eax [edi+0A0h] +
mov edx [eax+244h] +
mov [ebx+1Ch] edx +
mov [eax+244h] ebx +
jmp loc_45DB02  +
***
mov eax [esp+24h] +
mov dword ptr [eax+8] 1 +
xor eax eax +
jmp loc_45DA8B  +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov [esp+5Ch+var_30] edx +
movzx edx byte ptr [ecx+0Ch] +
mov [esp+5Ch+var_24] ecx +
cmp dl 6 +
jnz loc_45DBE8  +
mov ecx [ecx+14h] +
movzx edx byte ptr [ecx+0Ch] +
cmp dl 6 +
jz loc_45DBD8  +
mov [esp+5Ch+var_24] ecx +
cmp dl 5 +
ja loc_45DEC3  +
jmp ds:off_4FF230[edx*4]  +
mov ecx [esp+5Ch+var_24] +
mov edx [ecx+14h] +
mov edx [edx+4] +
mov esi [edx+94h] +
mov [esp+5Ch+var_3C] esi +
mov edi [esp+5Ch+var_3C] +
test edi edi +
jz loc_45DEC3  +
mov eax [eax] +
mov edi [eax+0D0h] +
test edi edi +
jnz loc_45DC3A  +
jmp loc_45DE98  +
mov edi [edi] +
test edi edi +
jz loc_45DE98  +
mov ebp [edi+4] +
cmp [esp+5Ch+var_3C] ebp +
jz loc_45DC30  +
test byte ptr [ebp+29h] 8 +
jz loc_45DC30  +
mov ecx [ebp+0A0h] +
mov esi [ecx+914h] +
test esi esi +
jz loc_45DC30  +
mov eax [esp+5Ch+var_30] +
xor edx edx +
xor esi esi +
mov eax [eax] +
movzx ebx byte ptr [eax+5] +
mov eax [ecx+108h] +
div  ebx +
mov ebx [ecx+928h] +
test ebx ebx +
mov [esp+5Ch+var_38] eax +
jnz loc_45DC87  +
mov esi [ecx+110h] +
sub [esp+5Ch+var_38] esi +
mov edx [esp+5Ch+var_38] +
test edx edx +
jz loc_45DC30  +
mov eax [esp+5Ch+var_38] +
mov [esp+5Ch+var_44] 0 +
mov [esp+5Ch+var_48] 0 +
mov [esp+5Ch+var_4C] 0 +
mov [esp+5Ch+var_54] eax +
lea eax [ecx+0F0h] +
mov [esp+5Ch+var_50] esi +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] ebp +
mov [esp+5Ch+var_34] ecx +
call sub_475A20  +
test eax eax +
mov [esp+5Ch+var_28] eax +
jz loc_45DE98  +
mov edx [ebp+0A0h] +
mov eax [edx+178h] +
mov [esp+5Ch+var_20] edx +
mov [esp+5Ch+var_5C] eax +
call sub_459B80  +
test eax eax +
mov [esp+5Ch+var_2C] eax +
jz loc_45DEF8  +
mov edx [esp+5Ch+var_20] +
mov ecx [edx+170h] +
mov ebx [edx+174h] +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_5C] ebp +
mov [esp+5Ch+var_58] ecx +
mov [esp+5Ch+var_54] ebx +
call sub_46FCE0  +
mov edx [esp+5Ch+var_20] +
mov ecx [esp+5Ch+var_34] +
test eax eax +
jnz loc_45DEEC  +
mov eax [edx+178h] +
mov [esp+5Ch+var_54] ebp +
mov [esp+5Ch+var_20] ecx +
mov [esp+5Ch+var_34] edx +
mov [esp+5Ch+var_58] eax +
mov eax [esp+5Ch+var_2C] +
mov [esp+5Ch+var_5C] eax +
call sub_46FAD0  +
mov edx [esp+5Ch+var_34] +
mov ecx [esp+5Ch+var_20] +
cmp eax [edx+178h] +
jnz loc_45DEEC  +
mov eax [esp+5Ch+var_2C] +
mov ebx [esp+5Ch+var_28] +
lea esi [eax+esi*2] +
mov eax [esp+5Ch+var_38] +
lea eax [eax+eax*4] +
lea edx [ebx+eax*4] +
cmp ebx edx +
jnb loc_45DEA6  +
mov [esp+5Ch+var_38] ebp +
mov ebp esi +
mov esi edx +
mov [esp+5Ch+var_20] edi +
mov edi [esp+5Ch+var_24] +
mov [esp+5Ch+var_34] ecx +
jmp loc_45DDAE  +
add ebx 14h +
add ebp 2 +
cmp esi ebx +
jbe loc_45DEA2  +
movzx eax byte ptr [ebx+0Ch] +
shr al 4 +
test al al +
jz loc_45DDA0  +
mov eax [ebx+10h] +
test eax eax +
jz loc_45DDA0  +
mov eax [esp+5Ch+var_34] +
mov edx [ebx+8] +
mov eax [eax+10Ch] +
mov [esp+5Ch+var_54] edx +
mov [esp+5Ch+var_58] eax +
mov eax [esp+5Ch+var_38] +
mov [esp+5Ch+var_5C] eax +
call sub_475820  +
mov edx [edi+4] +
mov [esp+5Ch+var_58] edx +
mov [esp+5Ch+var_5C] eax +
call strcmp  +
test eax eax +
jnz loc_45DDA0  +
lea eax [esp+5Ch+var_E] +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_38] +
mov [esp+5Ch+var_58] ebp +
mov [esp+5Ch+var_5C] eax +
call sub_475620  +
movzx eax word ptr [esp+5Ch+var_E] +
test ax ax +
js loc_45DE2A  +
test byte ptr [edi+33h] 2 +
jz loc_45DF06  +
test byte ptr [edi+34h] 8 +
jz loc_45DF06  +
and ax 7FFFh +
sub eax 1 +
cmp ax 1 +
ja loc_45DDA0  +
mov eax [esp+5Ch+var_2C] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax 1 +
jmp loc_45DE9A  +
mov ecx [esp+5Ch+var_24] +
mov edx [ecx+14h] +
mov ecx [edx+94h] +
mov [esp+5Ch+var_3C] ecx +
jmp loc_45DC0C  +
mov ecx [esp+5Ch+var_24] +
mov esi [ecx+14h] +
test byte ptr [esi+29h] 8 +
mov [esp+5Ch+var_3C] esi +
jz loc_45DE98  +
mov ecx [esp+5Ch+var_3C] +
mov edx [ecx+0A0h] +
test byte ptr [edx+924h] 2 +
jnz loc_45DC18  +
xor eax eax +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esp+5Ch+var_20] +
mov eax [esp+5Ch+var_2C] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_5C] eax +
call free  +
jmp loc_45DC30  +
mov [esp+5Ch+var_58] 22D0h +
mov [esp+5Ch+var_5C] offset a____Binutil_12 +
mov [esp+5Ch+var_38] eax +
call sub_44BA40  +
mov eax [esp+5Ch+var_38] +
mov [esp+5Ch+var_3C] 0 +
jmp loc_45DC18  +
mov eax [esp+5Ch+var_2C] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_5C] eax +
call free  +
jmp loc_45DE98  +
mov [esp+5Ch+var_54] offset aElf_link_check +
mov [esp+5Ch+var_58] 232Ch +
mov [esp+5Ch+var_5C] offset a____Binutil_12 +
call sub_44BA70  +
lea esi [esi+0] +
lea edi [edi+0] +
push ebp  +
push edi  +
mov edi 1 +
push esi  +
push ebx  +
sub esp 7Ch +
mov ebx [esp+0E8h+var_58] +
mov ebp [esp+0E8h+var_54] +
movzx eax byte ptr [ebx+34h] +
mov esi [ebp+0Ch] +
test al 8 +
jnz loc_45DF6A  +
mov edx [esi] +
movzx edx byte ptr [edx] +
mov ecx edx +
and ecx 3 +
cmp cl 1 +
jbe loc_45E190  +
xor edi edi +
cmp byte ptr [ebx+0Ch] 7 +
jz loc_45E095  +
mov ecx [ebp+4] +
test ecx ecx +
jnz loc_45E030  +
test edi edi +
jnz loc_45E038  +
mov eax [esi+4] +
cmp byte ptr [ebx+0Ch] 1 +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+0E8h+var_C4] eax +
jz loc_45E0C4  +
mov eax [esi] +
movzx edx byte ptr [eax] +
and edx 3 +
cmp dl 1 +
jbe loc_45E710  +
cmp dword ptr [ebx+1Ch] 0FFFFFFFEh +
jz loc_45E700  +
movzx eax byte ptr [ebx+33h] +
test al 0Ch +
jz loc_45E045  +
test al 3 +
jnz loc_45E04F  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
movzx ecx byte ptr [ebx+30h] +
jz loc_45E6A0  +
movzx eax byte ptr [ebx+0Ch] +
mov [esp+0E8h+var_BC] 1 +
mov edx [ebx+2Ch] +
and ecx 0Fh +
test edi edi +
mov [esp+0E8h+var_A0] 0 +
mov [esp+0E8h+var_9C] edx +
movzx edx byte ptr [ebx+31h] +
mov [esp+0E8h+var_93] dl +
jz loc_45E0A4  +
and edx 0FFFFFFFCh +
mov [esp+0E8h+var_94] cl +
mov [esp+0E8h+var_93] dl +
movzx edx byte ptr [ebx+32h] +
cmp al 6 +
mov [esp+0E8h+var_92] dl +
ja loc_45E6B8  +
jmp ds:off_4FF3D0[eax*4]  +
test edi edi +
jnz loc_45DF87  +
mov eax 1 +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_45DFC8  +
mov edx [esi] +
movzx eax byte ptr [edx+1] +
and eax 18h +
cmp al 18h +
jz loc_45DFD0  +
cmp al 10h +
jz loc_45E8E0  +
movzx eax byte ptr [ebx+0Ch] +
lea edx [eax-3] +
cmp dl 1 +
jbe loc_45E870  +
lea edx [eax-1] +
cmp dl 1 +
jbe loc_45E8B7  +
movzx ecx byte ptr [ebx+30h] +
mov [esp+0E8h+var_BC] 0 +
jmp loc_45DFEA  +
mov ebx [ebx+14h] +
cmp byte ptr [ebx+0Ch] 0 +
jnz loc_45DF74  +
jmp loc_45E038  +
test byte ptr [ebx+35h] 4 +
jz loc_45E1C0  +
test byte ptr [ebx+33h] 2 +
jz loc_45E1C0  +
sub ecx 60h +
mov [esp+0E8h+var_94] cl +
jmp loc_45E017  +
mov eax [eax+0ECh] +
test eax eax +
jz loc_45E0DB  +
mov [esp+0E8h+var_E8] ebx +
call eax  +
test eax eax +
jnz loc_45DFA1  +
movzx eax byte ptr [ebx+33h] +
test al 4 +
jz loc_45DFA1  +
test al 1 +
mov eax [esi] +
jz loc_45E0F9  +
movzx edx byte ptr [eax] +
test dl 40h +
jz loc_45DFA6  +
mov edx [eax+1Ch] +
cmp dword ptr [edx+28h] 1 +
jz loc_45EA55  +
movzx edx byte ptr [eax+2] +
and edx 18h +
cmp dl 8 +
jz loc_45DFA3  +
mov ecx [eax+18h] +
mov ecx [ecx+18h] +
mov [esp+0E8h+var_C0] ecx +
xor ecx ecx +
cmp dl 18h +
setz cl  +
xor edx edx +
test byte ptr [ebx+33h] 1 +
mov [esp+0E8h+var_BC] ecx +
jnz loc_45E137  +
mov edx [ebx+14h] +
mov ecx [ebx+4] +
mov [esp+0E8h+var_E8] eax +
mov eax [esp+0E8h+var_C0] +
mov [esp+0E8h+var_D8] 0 +
mov [esp+0E8h+var_DC] 0 +
mov [esp+0E8h+var_B8] ecx +
mov ecx [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E0] edx +
mov [esp+0E8h+var_D4] ecx +
mov ecx [esp+0E8h+var_B8] +
mov [esp+0E8h+var_E4] ecx +
call eax  +
test eax eax +
jnz loc_45DFA1  +
mov [esp+0E8h+var_E8] 11h +
call sub_44BAF0  +
nop   +
mov dword ptr [ebp+0] 1 +
xor eax eax +
jmp loc_45E03D  +
or edx eax +
and edx 10h +
jnz loc_45DF68  +
movzx edx byte ptr [ebx+33h] +
and edx 6 +
cmp dl 2 +
jnz loc_45DF68  +
and eax 6 +
cmp al 6 +
jz loc_45DF6A  +
xor edi edi +
jmp loc_45DF6A  +
cmp al 4 +
jz loc_45E6D4  +
cmp al 2 +
jz loc_45E6D4  +
add ecx 10h +
mov [esp+0E8h+var_94] cl +
jmp loc_45E017  +
mov eax [esp+0E8h+var_B8] +
mov eax [eax+94h] +
test eax eax +
jz loc_45E208  +
test byte ptr [eax+29h] 8 +
jnz loc_45E208  +
mov [esp+0E8h+var_E4] 2429h +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esi] +
mov [esp+0E8h+var_90] 0 +
movzx ecx byte ptr [eax] +
mov [esp+0E8h+var_B8] offset off_4BFAE8 +
mov byte ptr [esp+0E8h+var_C0] cl +
mov edx [ebx+30h] +
and edx 20000FFh +
cmp edx 200000Ah +
jz loc_45E7B1  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_45E7C7  +
test byte ptr [esp+0E8h+var_C0] 1 +
jz loc_45E6E0  +
test byte ptr [ebx+31h] 3 +
jz loc_45E25B  +
cmp byte ptr [ebx+0Ch] 2 +
jz loc_45E6E0  +
mov edx [eax+1Ch] +
mov edx [edx+30h] +
test edx edx +
jz loc_45E2A0  +
mov ecx [esp+0E8h+var_C4] +
mov edx [ecx+98h] +
mov ecx [esi+4] +
mov [esp+0E8h+var_E0] ebx +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_C0] ecx +
lea ecx [esp+0E8h+var_A0] +
mov [esp+0E8h+var_DC] ecx +
mov ecx [esp+0E8h+var_C0] +
mov [esp+0E8h+var_E8] ecx +
call edx  +
test eax eax +
jz loc_45E180  +
mov eax [esi] +
movzx ecx byte ptr [eax] +
mov byte ptr [esp+0E8h+var_C0] cl +
mov edx [esp+0E8h+var_90] +
test edx edx +
mov [esp+0E8h+var_B4] edx +
jnz loc_45E2DC  +
movzx edx byte ptr [ebx+33h] +
test dl 1 +
jz loc_45E2D0  +
mov ecx eax +
movzx eax [esp+0E8h+var_94] +
mov byte ptr [esp+0E8h+var_B0] al +
shr al 4 +
sub eax 1 +
cmp al 1 +
mov eax ecx +
jbe loc_45E82A  +
and edx 0Ah +
cmp dl 8 +
jz loc_45E8D1  +
movzx ecx byte ptr [esp+0E8h+var_C0] +
and ecx 3 +
cmp cl 2 +
mov byte ptr [esp+0E8h+var_C0] cl +
jz loc_45E310  +
movzx ecx [esp+0E8h+var_93] +
and ecx 3 +
mov edx ecx +
jz loc_45E310  +
movzx ecx [esp+0E8h+var_94] +
shr cl 4 +
cmp cl 2 +
jz loc_45E310  +
cmp byte ptr [ebx+0Ch] 1 +
jz loc_45E7D6  +
mov eax [eax+1Ch] +
mov ecx [eax+0F8h] +
test ecx ecx +
jz loc_45E4E0  +
mov edx [ebx+20h] +
cmp edx 0FFFFFFFFh +
mov [esp+0E8h+var_B0] edx +
jz loc_45E4E0  +
mov eax [eax+30h] +
test eax eax +
jz loc_45E4E0  +
mov eax [ebx+40h] +
test eax eax +
jz loc_45E937  +
mov eax [ebx+38h] +
mov edi [esp+0E8h+var_B4] +
mov [esp+0E8h+var_98] eax +
mov eax [ecx+6Ch] +
sub edi 0FF00h +
cmp edi 0FFFEFFFFh +
mov [esp+0E8h+var_C0] eax +
mov eax [esp+0E8h+var_C4] +
mov edx [eax+174h] +
mov eax [esi+4] +
movzx ecx byte ptr [edx+5] +
jbe loc_45E910  +
movzx edi cl +
mov edx [edx+24h] +
imul edi [esp+0E8h+var_B0] +
add edi [esp+0E8h+var_C0] +
lea ecx [esp+0E8h+var_A0] +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_DC] 0 +
mov [esp+0E8h+var_E0] edi +
mov [esp+0E8h+var_E8] eax +
call edx  +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_45E468  +
mov eax [esi] +
xor edx edx +
mov eax [eax+1Ch] +
mov eax [eax+60h] +
mov edi eax +
mov [esp+0E8h+var_C0] eax +
mov eax [ecx+8Ch] +
mov eax [eax+28h] +
mov [esp+0E8h+var_C4] eax +
mov eax [ebx+3Ch] +
div  edi +
mov eax [esp+0E8h+var_C4] +
lea edi [edx+2] +
imul edi eax +
shl eax 3 +
add edi [ecx+6Ch] +
cmp eax 8 +
jz loc_45E9D1  +
cmp eax 10h +
jz loc_45EA9C  +
cmp eax 20h +
jz loc_45EAF4  +
cmp eax 40h +
nop   +
jnz loc_45EB7B  +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+1Ch] +
mov [esp+0E8h+var_E8] edi +
call eax  +
mov [esp+0E8h+var_B4] eax +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+24h] +
mov [esp+0E8h+var_E0] edi +
mov edx [ebx+20h] +
mov [esp+0E8h+var_E8] edx +
sar edx 1Fh +
mov [esp+0E8h+var_E4] edx +
call eax  +
mov eax [esi+4] +
mov edx [ebx+20h] +
mov edi [esp+0E8h+var_C0] +
mov ecx [esi+0Ch] +
mov eax [eax+4] +
lea edx [edi+edx+2] +
mov edi [esp+0E8h+var_B4] +
imul edx [esp+0E8h+var_C4] +
add edx [ecx+6Ch] +
mov eax [eax+24h] +
mov [esp+0E8h+var_E8] edi +
mov [esp+0E8h+var_E0] edx +
mov [esp+0E8h+var_E4] 0 +
call eax  +
mov eax [esi+10h] +
test eax eax +
jz loc_45E4E0  +
mov eax [eax+6Ch] +
test eax eax +
jz loc_45E4E0  +
movzx edi byte ptr [ebx+33h] +
mov edx [ebx+40h] +
test edi 2 +
jnz loc_45E9A0  +
test edx edx +
jz loc_45EA34  +
mov ecx [edx+14h] +
mov ecx [ecx+0A0h] +
test byte ptr [ecx+924h] 0Bh +
jnz loc_45EA34  +
mov edx [edx+24h] +
add edx 1 +
mov word ptr [esp+0E8h+var_8C] dx +
movzx edx byte ptr [ebx+34h] +
and edx 6 +
cmp dl 6 +
jz loc_45EA40  +
mov ecx [ebx+20h] +
mov edx [esi+4] +
lea eax [eax+ecx*2] +
mov [esp+0E8h+var_E0] eax +
lea eax [esp+0E8h+var_8C] +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_E8] edx +
call sub_475650  +
nop   +
mov eax [esp+0E8h+var_BC] +
test eax eax +
jnz loc_45E038  +
mov eax [esp+0E8h+var_B8] +
test byte ptr [eax+15h] 80h +
jnz loc_45E038  +
mov edi [ebp+4] +
test edi edi +
jz loc_45E576  +
mov ecx [ebp+8] +
test ecx ecx +
jnz loc_45E576  +
mov eax [ebp+0Ch] +
mov edx [eax+38h] +
test edx edx +
jz loc_45E576  +
lea edx [esp+0E8h+var_8C] +
mov [esp+0E8h+var_D8] 0 +
mov [esp+0E8h+var_DC] offset off_4BFAE8 +
mov [esp+0E8h+var_E0] edx +
mov [esp+0E8h+var_E4] 0 +
mov [esp+0E8h+var_E8] eax +
mov [esp+0E8h+var_80] 0 +
mov [esp+0E8h+var_8C] 0 +
mov [esp+0E8h+var_88] 0 +
mov [esp+0E8h+var_84] 0 +
mov byte ptr [esp+0E8h+var_80] 4 +
mov [esp+0E8h+var_7C] 0FFFFFFF1h +
call sub_45D830  +
test eax eax +
jz loc_45E03D  +
mov dword ptr [ebp+8] 1 +
mov eax [esi+4] +
lea edx [esp+0E8h+var_A0] +
mov ecx [esp+0E8h+var_B8] +
mov edi [eax+7Ch] +
mov eax [ebx+4] +
mov [esp+0E8h+var_D8] ebx +
mov [esp+0E8h+var_DC] ecx +
mov [esp+0E8h+var_E0] edx +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_E8] esi +
call sub_45D830  +
test eax eax +
jz loc_45E6F0  +
cmp eax 1 +
jz loc_45E9C9  +
cmp dword ptr [ebx+1Ch] 0FFFFFFFEh +
jnz loc_45E038  +
mov [esp+0E8h+var_E0] offset aElf_link_outpu +
mov [esp+0E8h+var_E4] 251Bh +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA70  +
mov eax [ebx+14h] +
mov [esp+0E8h+var_B8] eax +
mov eax [eax+3Ch] +
test eax eax +
jz loc_45E1E0  +
mov edx [esi+4] +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_E8] edx +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
mov [esp+0E8h+var_90] eax +
jz loc_45E9F7  +
mov eax [esp+0E8h+var_B8] +
mov eax [eax+38h] +
mov ecx eax +
mov eax [ebx+18h] +
add ecx eax +
mov eax [esi] +
mov [esp+0E8h+var_A0] ecx +
movzx edx byte ptr [eax] +
mov byte ptr [esp+0E8h+var_C0] dl +
and edx 3 +
cmp dl 2 +
jz loc_45E221  +
mov edx [esp+0E8h+var_B8] +
mov edx [edx+3Ch] +
add ecx [edx+1Ch] +
cmp byte ptr [ebx+30h] 6 +
mov [esp+0E8h+var_A0] ecx +
jnz loc_45E221  +
mov edx [eax+1Ch] +
mov edx [edx+0C8h] +
test edx edx +
jz loc_45E221  +
sub ecx [edx+1Ch] +
mov [esp+0E8h+var_A0] ecx +
jmp loc_45E221  +
mov eax [ebx+14h] +
mov eax [eax+4] +
mov ecx eax +
mov [esp+0E8h+var_B8] eax +
mov eax [esp+0E8h+var_C4] +
mov eax [eax+148h] +
mov [esp+0E8h+var_E8] ecx +
call eax  +
mov [esp+0E8h+var_90] eax +
mov eax [ebx+14h] +
mov ecx [eax] +
mov eax 1 +
shl eax cl +
mov [esp+0E8h+var_A0] eax +
mov eax [esi] +
movzx ecx byte ptr [eax] +
mov byte ptr [esp+0E8h+var_C0] cl +
jmp loc_45E221  +
cmp cl 0Ah +
jz loc_45DFDE  +
test byte ptr [ebx+34h] 8 +
jnz loc_45DFDE  +
jmp loc_45E038  +
mov [esp+0E8h+var_E0] offset aElf_link_outpu +
mov [esp+0E8h+var_E4] 23FBh +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA70  +
add ecx 20h +
mov [esp+0E8h+var_94] cl +
jmp loc_45E017  +
test byte ptr [ebx+34h] 8 +
jnz loc_45E2A0  +
jmp loc_45E25B  +
mov dword ptr [ebp+0] 1 +
jmp loc_45E03D  +
movzx eax byte ptr [ebx+0Ch] +
jmp loc_45E084  +
test byte ptr [ebx+34h] 8 +
jz loc_45DFB2  +
movzx edx byte ptr [ebx+33h] +
and edx 6 +
cmp dl 6 +
jnz loc_45DFB2  +
movzx edx word ptr [ebx+34h] +
and dx 180h +
cmp dx 100h +
jnz loc_45DFB2  +
mov edx [eax+1Ch] +
cmp dword ptr [edx+28h] 1 +
jz loc_45EB53  +
cmp byte ptr [ebx+0Ch] 6 +
mov eax ebx +
jnz loc_45E75C  +
mov eax [eax+14h] +
cmp byte ptr [eax+0Ch] 6 +
jz loc_45E753  +
movzx ecx byte ptr [ebx+31h] +
mov edx offset aBInternalSymbo +
and ecx 3 +
cmp cl 1 +
jz loc_45E77D  +
cmp cl 2 +
mov edx offset aBHiddenSymbolS +
mov ecx offset aBLocalSymbolSI +
cmovnz edx ecx +
mov eax [eax+14h] +
mov ecx [esi+4] +
cmp eax offset off_4BFB90 +
jz loc_45EB74  +
mov eax [eax+94h] +
mov ebx [ebx+4] +
mov [esp+0E8h+var_E0] eax +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_E8] edx +
mov [esp+0E8h+var_DC] ebx +
call off_4BFA04  +
jmp loc_45E173  +
movzx edx byte ptr [esp+0E8h+var_C0] +
and edx 3 +
cmp dl 2 +
jnz loc_45E265  +
jmp loc_45E236  +
test byte ptr [ebx+34h] 8 +
jz loc_45E2A0  +
jmp loc_45E240  +
test byte ptr [ebx+33h] 2 +
jnz loc_45E310  +
cmp dl 3 +
jz loc_45EB26  +
cmp dl 1 +
mov eax offset aBInternalSym_0 +
mov edx offset aBHiddenSymbo_0 +
cmovnz eax edx +
mov ecx [ebx+4] +
mov edx [esi+4] +
mov [esp+0E8h+var_E8] eax +
mov [esp+0E8h+var_E0] ecx +
mov [esp+0E8h+var_E4] edx +
call off_4BFA04  +
mov [esp+0E8h+var_E8] 11h +
call sub_44BAF0  +
xor eax eax +
mov dword ptr [ebp+0] 1 +
jmp loc_45E03D  +
movzx eax byte ptr [esp+0E8h+var_B0] +
mov [esp+0E8h+var_AC] ecx +
mov ecx edx +
and eax 0Fh +
movzx edx al +
cmp edx 0Ah +
mov edx 2 +
cmovz eax edx +
mov byte ptr [esp+0E8h+var_B0] al +
mov eax ecx +
and eax 10h +
cmp al 1 +
sbb eax eax +
mov edx eax +
movzx eax byte ptr [esp+0E8h+var_B0] +
and edx 10h +
lea eax [eax+edx+10h] +
mov edx ecx +
mov [esp+0E8h+var_94] al +
mov eax [esp+0E8h+var_AC] +
jmp loc_45E2D0  +
mov edx [esi] +
test byte ptr [edx+1] 2 +
mov edx [ebx+14h] +
jz loc_45E890  +
cmp edx offset off_4BFB90 +
jz loc_45E890  +
cmp dword ptr [edx+3Ch] offset off_4BFB90 +
jz loc_45EA78  +
test byte ptr [edx+16h] 10h +
jnz loc_45E078  +
mov edx [edx+94h] +
test edx edx +
jz loc_45E078  +
test byte ptr [edx+2Ah] 20h +
jnz loc_45DFD0  +
jmp loc_45E078  +
mov edx [ebx+14h] +
test edx edx +
jz loc_45E084  +
test byte ptr [edx+2Ah] 20h +
jnz loc_45DFD0  +
jmp loc_45E084  +
mov [esp+0E8h+var_9C] 0 +
jmp loc_45E2DC  +
mov ecx [ebx+4] +
mov eax [edx+20h] +
mov [esp+0E8h+var_DC] 0 +
mov [esp+0E8h+var_E0] 0 +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_E8] eax +
call sub_44E180  +
test eax eax +
jnz loc_45E068  +
jmp loc_45DFD0  +
mov [esp+0E8h+var_B4] ecx +
call sub_45D7F0  +
mov ecx [esp+0E8h+var_B4] +
test eax eax +
jz loc_45E6F0  +
mov eax [esp+0E8h+var_C4] +
mov edx [eax+174h] +
mov eax [esi+4] +
jmp loc_45E37C  +
test edi edi +
jnz loc_45E347  +
cmp byte ptr [esp+0E8h+var_C0] 1 +
jbe loc_45EB30  +
mov edi [ebx+4] +
mov [esp+0E8h+var_E4] 40h +
mov [esp+0E8h+var_C0] ecx +
mov [esp+0E8h+var_E8] edi +
call strrchr  +
mov ecx [esp+0E8h+var_C0] +
test eax eax +
jz loc_45E347  +
cmp byte ptr [eax+1] 0 +
jz loc_45E347  +
mov eax [esi+4] +
mov [esp+0E8h+var_E0] edi +
mov [esp+0E8h+var_E8] offset aBNoSymbolVersi +
mov [esp+0E8h+var_E4] eax +
call off_4BFA04  +
xor eax eax +
mov dword ptr [ebp+0] 1 +
jmp loc_45E03D  +
test edx edx +
jz loc_45EB44  +
mov edx [edx+8] +
add edx 1 +
mov word ptr [esp+0E8h+var_8C] dx +
mov edx [esi] +
test byte ptr [edx] 20h +
jz loc_45E4B2  +
add word ptr [esp+0E8h+var_8C] 1 +
jmp loc_45E4B2  +
mov [ebx+1Ch] edi +
jmp loc_45E03D  +
mov eax [ebx+20h] +
movzx edx byte ptr [edi] +
mov [edi] al +
mov edi [esp+0E8h+var_C0] +
mov ecx [esi+0Ch] +
mov eax [ebx+20h] +
mov ecx [ecx+6Ch] +
lea eax [edi+eax+2] +
imul eax [esp+0E8h+var_C4] +
mov [ecx+eax] dl +
jmp loc_45E468  +
mov edi [esp+0E8h+var_B8] +
mov eax [esi+4] +
mov edx [edi+3Ch] +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_DC] edi +
mov [esp+0E8h+var_E8] offset aBCouldNotFindO +
mov [esp+0E8h+var_E0] edx +
call off_4BFA04  +
mov [esp+0E8h+var_E8] 0Fh +
call sub_44BAF0  +
xor eax eax +
mov dword ptr [ebp+0] 1 +
jmp loc_45E03D  +
xor ecx ecx +
mov word ptr [esp+0E8h+var_8C] cx +
jmp loc_45E4B2  +
and edi 2 +
jz loc_45E4C2  +
or word ptr [esp+0E8h+var_8C] 8000h +
jmp loc_45E4C2  +
mov ecx [esp+0E8h+var_C4] +
add eax 1Ch +
lea edx [ecx+174h] +
mov ecx ebx +
call sub_45DBC0  +
test eax eax +
mov eax [esi] +
jnz loc_45DFA3  +
jmp loc_45E106  +
movzx ecx word ptr [edx+18h] +
and cx 380h +
cmp cx 100h +
jz loc_45E890  +
cmp cx 200h +
jnz loc_45DFD0  +
jmp loc_45E890  +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+34h] +
mov [esp+0E8h+var_E8] edi +
call eax  +
mov [esp+0E8h+var_B4] eax +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+3Ch] +
mov [esp+0E8h+var_E4] edi +
mov edx [ebx+20h] +
mov [esp+0E8h+var_E8] edx +
call eax  +
mov eax [esi+4] +
mov eax [eax+4] +
mov edx [eax+3Ch] +
mov eax [ebx+20h] +
mov edi [esp+0E8h+var_C0] +
mov ecx [esi+0Ch] +
lea eax [edi+eax+2] +
imul eax [esp+0E8h+var_C4] +
add eax [ecx+6Ch] +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_B4] +
mov [esp+0E8h+var_E8] eax +
call edx  +
jmp loc_45E468  +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+0E8h+var_E8] edi +
call eax  +
mov [esp+0E8h+var_B4] eax +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+30h] +
mov [esp+0E8h+var_E4] edi +
mov edx [ebx+20h] +
mov [esp+0E8h+var_E8] edx +
call eax  +
mov eax [esi+4] +
mov eax [eax+4] +
mov edx [eax+30h] +
jmp loc_45EACC  +
mov eax offset aBProtectedSymb +
jmp loc_45E7F9  +
movzx eax byte ptr [ebx+33h] +
and eax 6 +
cmp al 2 +
jnz loc_45E94A  +
jmp loc_45E347  +
mov edx 1 +
mov word ptr [esp+0E8h+var_8C] dx +
jmp loc_45E9B3  +
mov ecx [esp+0E8h+var_C4] +
add eax 1Ch +
lea edx [ecx+174h] +
mov ecx ebx +
call sub_45DBC0  +
test eax eax +
jnz loc_45DFB2  +
jmp loc_45E74B  +
mov eax ecx +
jmp loc_45E794  +
mov [esp+0E8h+var_E0] offset aElf_link_outpu +
mov [esp+0E8h+var_E4] 24C9h +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA70  +
mov esi esi +
lea edi [edi+0] +
push ebp  +
push edi  +
push esi  +
push ebx  +
mov ebx edx +
sub esp 2Ch +
test edx edx +
mov [esp+124h+var_108] ecx +
jz loc_45EC2F  +
mov ebp eax +
mov esi edx +
jmp loc_45EBBE  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_45EBE6  +
mov [esp+124h+var_120] ebp +
mov eax [esi] +
mov [esp+124h+var_124] eax +
call strcmp  +
test eax eax +
jnz loc_45EBB7  +
mov eax [esi+1Ch] +
mov edx [esp+124h+var_108] +
mov [edx] eax +
mov eax 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+124h+var_124] ebp +
call strlen  +
mov [esp+124h+var_10C] eax +
mov esi [ebx] +
mov [esp+124h+var_124] esi +
call strlen  +
cmp eax [esp+124h+var_10C] +
mov edi eax +
ja loc_45EC28  +
mov [esp+124h+var_11C] eax +
mov [esp+124h+var_120] ebp +
mov [esp+124h+var_124] esi +
call strncmp  +
test eax eax +
jnz loc_45EC28  +
add edi ebp +
mov esi offset a_end +
mov ecx 4 +
cmps   +
jz loc_45EC39  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_45EBF2  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+24h] +
mov ecx [esp+124h+var_108] +
add eax [ebx+1Ch] +
mov [ecx] eax +
mov eax 1 +
jmp loc_45EBDE  +
***
push ebx  +
mov ebx edx +
sub esp 10h +
mov esi [edx] +
mov ecx [edx+4] +
imul ecx [esi+28h] +
mov [esi+18h] ecx +
mov [esp+10h+var_C] ecx +
mov [esp+10h+var_10] eax +
call sub_458B60  +
test eax eax +
mov [esi+30h] eax +
jz loc_45ECB0  +
mov eax [ebx+0Ch] +
mov edi 1 +
test eax eax +
jz loc_45EC90  +
add esp 10h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [ebx+4] +
test eax eax +
jz loc_45EC83  +
shl eax 2 +
mov [esp+10h+var_10] eax +
call sub_459D10  +
test eax eax +
jz loc_45ECBB  +
mov [ebx+0Ch] eax +
jmp loc_45EC83  +
mov edx [esi+18h] +
xor edi edi +
test edx edx +
jz loc_45EC77  +
jmp loc_45EC83  +
xor edi edi +
jmp loc_45EC83  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_4] +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_45EDA5  +
mov eax [esi+4] +
mov eax [eax+154h] +
mov [esp+1Ch+var_1C] ebx +
call eax  +
test eax eax +
jz loc_45EDA5  +
movzx eax byte ptr [ebx+34h] +
mov ebp [ebx+4] +
shr al 1 +
and eax 3 +
cmp eax 1 +
jle loc_45EDB2  +
mov [esp+1Ch+var_18] 40h +
mov [esp+1Ch+var_1C] ebp +
call strchr  +
test eax eax +
jz loc_45EDB2  +
sub eax ebp +
mov [esp+1Ch+var_10] eax +
add eax 1 +
mov [esp+1Ch+var_1C] eax +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_45EDB6  +
mov eax [esp+1Ch+var_10] +
mov [esp+1Ch+var_18] ebp +
mov ebp edi +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_14] eax +
call memcpy  +
mov eax [esp+1Ch+var_10] +
mov byte ptr [edi+eax] 0 +
mov [esp+1Ch+var_1C] ebp +
call sub_4756B0  +
mov ecx [esi+8] +
mov edx [esi+10h] +
mov [edx+ecx*4] eax +
mov edx [esi+14h] +
mov ecx [ebx+20h] +
mov [edx+ecx*4] eax +
mov eax [esi+28h] +
add dword ptr [esi+8] 1 +
mov edx [ebx+20h] +
test eax eax +
js loc_45ED81  +
cmp eax edx +
jle loc_45ED84  +
mov [esi+28h] edx +
test edi edi +
mov eax 1 +
jz loc_45EDAA  +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_10] eax +
call free  +
mov eax [esp+1Ch+var_10] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edi edi +
jmp loc_45ED55  +
mov dword ptr [esi+44h] 1 +
xor eax eax +
jmp loc_45EDAA  +
***
jmp sub_45EDD0  +
***
mov ebx [esp+18h+arg_0] +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_45EDF4  +
mov eax [ebx+38h] +
mov [esp+18h+var_14] eax +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] eax +
call sub_488880  +
mov [ebx+38h] eax +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
push ebx  +
mov ebx edx +
sub esp 14h +
mov eax [edx+8] +
test eax eax +
jz loc_45EE18  +
mov [esp+18h+var_18] eax +
call sub_488580  +
mov eax [ebx+14h] +
test eax eax +
jz loc_45EE27  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+18h] +
test eax eax +
jz loc_45EE36  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_45EE45  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+20h] +
test eax eax +
jz loc_45EE54  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+24h] +
test eax eax +
jz loc_45EE63  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+28h] +
test eax eax +
jz loc_45EE72  +
mov [esp+18h+var_18] eax +
call free  +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_45EE81  +
mov [esp+18h+var_18] eax +
call free  +
mov edx [ebx+30h] +
test edx edx +
jz loc_45EE90  +
mov [esp+18h+var_18] edx +
call free  +
mov edx [ebx+34h] +
test edx edx +
jz loc_45EE9F  +
mov [esp+18h+var_18] edx +
call free  +
mov ebx [esi] +
test ebx ebx +
jz loc_45EEDC  +
test byte ptr [ebx+14h] 4 +
mov esi [ebx+8Ch] +
jz loc_45EED5  +
mov eax [esi+48h] +
test eax eax +
jz loc_45EEC6  +
mov [esp+18h+var_18] eax +
call free  +
test byte ptr [ebx+14h] 4 +
jz loc_45EED5  +
mov eax [esi+58h] +
test eax eax +
jz loc_45EED5  +
mov [esp+18h+var_18] eax +
call free  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_45EEA5  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov ebx [esp+18h+arg_0] +
movzx eax byte ptr [ebx+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_45EF10  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
mov eax [ebx+14h] +
test byte ptr [eax+16h] 80h +
jz loc_45EF03  +
movzx edx word ptr [eax+18h] +
and dx 380h +
cmp dx 100h +
jnz loc_45EF03  +
mov eax [eax+8Ch] +
mov edx [ebx+18h] +
mov eax [eax+88h] +
mov [esp+18h+var_C] edx +
mov [esp+18h+var_10] eax +
lea eax [ebx+14h] +
mov [esp+18h+var_14] eax +
mov eax [esp+18h+arg_4] +
mov [esp+18h+var_18] eax +
call sub_489930  +
mov [ebx+18h] eax +
jmp loc_45EF03  +
***
push esi  +
mov esi edx +
push ebx  +
mov edx offset a_rel_17 +
sub esp 1Ch +
mov ebx offset a_rela +
test ecx ecx +
cmovz ebx edx +
test esi esi +
jz loc_45EFC4  +
mov [esp+20h+var_20] ebx +
mov edi eax +
call strlen  +
mov [esp+20h+var_20] esi +
mov ebp eax +
call strlen  +
mov [esp+20h+var_20] edi +
lea eax [ebp+eax+1] +
mov [esp+20h+var_1C] eax +
call sub_458A80  +
mov [esp+20h+var_14] esi +
mov [esp+20h+var_18] ebx +
mov [esp+20h+var_1C] offset aSS_24 +
mov edi eax +
mov [esp+20h+var_20] eax +
call sprintf  +
mov eax edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_45EFBC  +
***
xor edi edi +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+44h+arg_C] +
mov [esp+44h+var_30] eax +
mov eax [edx+0A0h] +
mov [esp+44h+var_28] ecx +
mov ebp [esp+44h+arg_8] +
test ebx ebx +
mov [esp+44h+var_2C] eax +
jz loc_45F0A1  +
mov esi ebp +
mov ebp edi +
mov edi edx +
jmp loc_45F011  +
add ebp 1 +
add esi 14h +
cmp ebp ebx +
jz loc_45F0A1  +
movzx eax byte ptr [esi+0Ch] +
shr al 4 +
test al al +
jnz loc_45F003  +
mov eax [esp+44h+var_2C] +
mov ecx [esi+8] +
mov eax [eax+64h] +
mov [esp+44h+var_3C] ecx +
mov [esp+44h+var_44] edi +
mov [esp+44h+var_40] eax +
call sub_475820  +
test eax eax +
jz loc_45F003  +
mov edx [esp+44h+var_30] +
mov [esp+44h+var_44] eax +
mov [esp+44h+var_40] edx +
call strcmp  +
test eax eax +
jnz loc_45F003  +
mov eax edi +
mov edi ebp +
mov ebp esi +
mov esi eax +
mov eax [esp+44h+arg_0] +
mov eax [eax] +
mov eax [eax+edi*4] +
mov [esp+44h+var_38] 0 +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] esi +
mov [esp+44h+var_18] eax +
lea eax [esp+44h+var_18] +
mov [esp+44h+var_3C] eax +
call sub_482FC0  +
mov edx [esp+44h+var_18] +
mov edi [esp+44h+arg_4] +
mov ecx [edx+3Ch] +
mov [edi] eax +
add eax [ecx+1Ch] +
add eax [edx+38h] +
mov [edi] eax +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+44h+var_28] +
mov edi [esp+44h+var_30] +
mov eax [eax] +
mov eax [eax+1Ch] +
mov [esp+44h+var_34] 1 +
mov [esp+44h+var_38] 0 +
mov [esp+44h+var_3C] 0 +
mov [esp+44h+var_40] edi +
mov [esp+44h+var_44] eax +
call sub_4500A0  +
test eax eax +
mov edx eax +
jz loc_45F108  +
movzx eax byte ptr [eax+0Ch] +
lea ecx [eax-3] +
xor eax eax +
cmp cl 1 +
ja loc_45F099  +
mov ecx [edx+14h] +
mov edi [esp+44h+arg_4] +
mov eax [ecx+3Ch] +
mov eax [eax+1Ch] +
add eax [edx+18h] +
add eax [ecx+38h] +
mov [edi] eax +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_45F099  +
***
push esi  +
push ebx  +
push eax  +
mov eax 1048h +
call sub_4BB070  +
sub esp eax +
mov ebx [edx] +
mov ebp edx +
mov eax [esp+14h+arg_1030] +
mov [esp+14h+arg_C] ecx +
mov [esp+14h+var_14] ebx +
mov [esp+14h+arg_8] eax +
call strlen  +
mov ecx eax +
lea eax [eax-1] +
cmp eax 0FFFh +
ja loc_45F1A7  +
movzx edx byte ptr [ebx] +
cmp dl 2Eh +
jz loc_45F330  +
jle loc_45F1C0  +
cmp dl 53h +
jz loc_45F353  +
cmp dl 73h +
mov [esp+14h+arg_14] 0 +
jnz loc_45F2A5  +
lea eax [ebx+1] +
mov [esp+14h+var_C] 0Ah +
mov [esp+14h+var_10] ebp +
mov [esp+14h+var_14] eax +
mov [esp+14h+arg_10] ecx +
call strtol  +
mov ecx [esp+14h+arg_10] +
add ebx ecx +
mov esi eax +
mov eax [ebp+0] +
lea edi [eax+1] +
cmp edi ebx +
ja loc_45F1A7  +
lea eax [esi+1] +
cmp eax 1000h +
jbe loc_45F1F6  +
mov [esp+14h+var_14] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 104Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dl 23h +
jnz loc_45F2A5  +
add ebx 1 +
mov [esp+14h+var_10] ebp +
mov [esp+14h+var_14] ebx +
mov [esp+14h+var_C] 10h +
call strtoul  +
mov esi [esp+14h+arg_8] +
mov [esi] eax +
add esp 104Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebx [esp+14h+arg_28] +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] edi +
mov [esp+14h+var_14] ebx +
call memcpy  +
mov byte ptr [esp+esi+14h+arg_28] 0 +
add esi edi +
mov [ebp+0] esi +
mov esi [esp+14h+arg_14] +
test esi esi +
jz loc_45F460  +
mov eax [esp+14h+arg_1048] +
mov ecx [esp+14h+arg_8] +
mov eax [eax+4] +
mov edx [eax+64h] +
mov eax ebx +
call loc_45EBA0  +
test eax eax +
jnz loc_45F4A5  +
mov eax [esp+14h+arg_1054] +
mov ecx [esp+14h+arg_1048] +
mov edx [esp+14h+arg_C] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_8] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
add eax 30h +
mov [esp+14h+var_14] eax +
mov eax ebx +
call sub_45EFD0  +
test eax eax +
jnz loc_45F4A5  +
mov [esp+14h+var_C] ebx +
mov [esp+14h+var_10] offset aSection +
mov [esp+14h+var_14] offset aUndefinedSRefe +
call off_4BFA04  +
xor eax eax +
jmp loc_45F1B5  +
mov edi offset a0_0 +
mov ecx 2 +
mov esi ebx +
cmps   +
jnz loc_45F360  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_24] +
mov edi [esp+14h+arg_8] +
neg eax  +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov eax [esp+14h+arg_8] +
add ebx 1 +
mov edi [esp+14h+arg_104C] +
mov [eax] edi +
mov eax 1 +
mov [ebp+0] ebx +
add esp 104Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+14h+arg_14] 1 +
jmp loc_45F170  +
mov edi offset asc_4FF443 +
mov ecx 2 +
mov esi ebx +
cmps   +
jz loc_45F4B0  +
mov edi offset asc_4FF446 +
mov ecx 2 +
mov esi ebx +
cmps   +
jnz loc_45F578  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov edx [esp+14h+arg_1058] +
mov eax [esp+14h+arg_24] +
mov ecx [esp+14h+arg_28] +
test edx edx +
jz loc_45F944  +
mov edi [esp+14h+arg_8] +
sar eax cl +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov eax [esp+14h+arg_1054] +
mov ecx [esp+14h+arg_1048] +
mov edx [esp+14h+arg_C] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_8] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
add eax 30h +
mov [esp+14h+var_14] eax +
mov eax ebx +
call sub_45EFD0  +
test eax eax +
jz loc_45F653  +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_24] +
mov ecx [esp+14h+arg_28] +
mov edi [esp+14h+arg_8] +
shl eax cl +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov edi offset asc_4FF449 +
mov ecx 2 +
mov esi ebx +
cmps   +
jnz loc_45F693  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_28] +
cmp [esp+14h+arg_24] eax +
setz al  +
movzx eax al +
mov edi [esp+14h+arg_8] +
mov [edi] eax +
jmp loc_45F4A5  +
mov eax [esp+14h+arg_1048] +
mov ecx [esp+14h+arg_8] +
mov eax [eax+4] +
mov edx [eax+64h] +
mov eax ebx +
call loc_45EBA0  +
test eax eax +
jnz loc_45F4A5  +
mov [esp+14h+var_C] ebx +
mov [esp+14h+var_10] offset aSymbol_0 +
mov [esp+14h+var_14] offset aUndefinedSRefe +
call off_4BFA04  +
xor eax eax +
jmp loc_45F1B5  +
mov edi offset asc_4FF44C +
mov ecx 2 +
mov esi ebx +
cmps   +
jnz loc_45F768  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_28] +
cmp [esp+14h+arg_24] eax +
setnz al  +
movzx eax al +
jmp loc_45F648  +
mov edi offset asc_4FF44F +
mov ecx 2 +
mov esi ebx +
cmps   +
jnz loc_45F856  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
mov eax [esp+14h+arg_28] +
jz loc_45FB1A  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setle al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov edi offset asc_4FF452 +
mov ecx 2 +
mov esi ebx +
cmps   +
jnz loc_45F956  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
mov eax [esp+14h+arg_28] +
jz loc_45FC7B  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setnl al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov edi [esp+14h+arg_8] +
shr eax cl +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov edi offset asc_4FF455 +
mov ecx 2 +
mov esi ebx +
cmps   +
jnz loc_45FA2F  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
xor eax eax +
cmp [esp+14h+arg_24] 0 +
jz loc_45F648  +
cmp [esp+14h+arg_28] 0 +
jmp loc_45F75D  +
mov [esp+14h+var_C] 2 +
mov [esp+14h+var_10] offset asc_4FF458 +
mov [esp+14h+var_14] ebx +
mov [esp+14h+arg_10] edx +
call strncmp  +
mov edx [esp+14h+arg_10] +
test eax eax +
jnz loc_45FB34  +
cmp byte ptr [ebx+2] 3Ah +
lea edx [ebx+3] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+2] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_24] 0 +
mov eax 1 +
jz loc_45FA25  +
jmp loc_45F648  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setbe al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp dl 7Eh +
jz loc_45FCFC  +
cmp dl 21h +
jz loc_45FC95  +
cmp dl 2Ah +
jz loc_45FE53  +
cmp dl 2Fh +
jz loc_45FD89  +
cmp dl 25h +
jz loc_46044A  +
cmp dl 5Eh +
jz loc_460384  +
cmp dl 7Ch +
jz loc_4602BE  +
cmp dl 26h +
jz loc_4601F8  +
cmp dl 2Bh +
nop   +
jz loc_460101  +
cmp dl 2Dh +
jz loc_46003B  +
cmp dl 3Ch +
jz loc_45FF61  +
cmp dl 3Eh +
jnz loc_45FF48  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
mov eax [esp+14h+arg_28] +
jz loc_45FD6F  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setnle al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setnb al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_24] 0 +
jmp loc_45F642  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_24] +
mov edi [esp+14h+arg_8] +
not eax  +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setnbe al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
mov eax [esp+14h+arg_24] +
jz loc_45FF19  +
cdq   +
idiv  [esp+14h+arg_28] +
jmp loc_45F648  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
jz loc_45FF2F  +
mov eax [esp+14h+arg_24] +
imul eax [esp+14h+arg_28] +
jmp loc_45F648  +
xor edx edx +
mov edi [esp+14h+arg_8] +
div  [esp+14h+arg_28] +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov eax [esp+14h+arg_28] +
imul eax [esp+14h+arg_24] +
mov edi [esp+14h+arg_8] +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
movsx edx dl +
mov [esp+14h+var_10] edx +
mov [esp+14h+var_14] offset aUnknownOperato +
call off_4BFA04  +
jmp loc_45F1A7  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
mov eax [esp+14h+arg_28] +
jz loc_4601C6  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setl al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_24] +
mov edi [esp+14h+arg_8] +
sub eax [esp+14h+arg_28] +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
jz loc_4601E0  +
mov eax [esp+14h+arg_24] +
add eax [esp+14h+arg_28] +
jmp loc_45F648  +
cmp [esp+14h+arg_24] eax +
mov edi [esp+14h+arg_8] +
setb al  +
movzx eax al +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
mov eax [esp+14h+arg_28] +
mov edi [esp+14h+arg_8] +
add eax [esp+14h+arg_24] +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_28] +
mov edi [esp+14h+arg_8] +
and eax [esp+14h+arg_24] +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_28] +
mov edi [esp+14h+arg_8] +
or eax [esp+14h+arg_24] +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_28] +
mov edi [esp+14h+arg_8] +
xor eax [esp+14h+arg_24] +
mov [edi] eax +
mov eax 1 +
jmp loc_45F1B5  +
cmp byte ptr [ebx+1] 3Ah +
lea edx [ebx+2] +
mov ecx [esp+14h+arg_C] +
lea eax [ebx+1] +
cmovz eax edx +
mov edx ebp +
mov [ebp+0] eax +
mov eax [esp+14h+arg_1058] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_24] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
mov eax [esp+14h+arg_1058] +
mov edx ebp +
add dword ptr [ebp+0] 1 +
mov ecx [esp+14h+arg_C] +
mov [esp+14h+var_4] eax +
mov eax [esp+14h+arg_1054] +
mov [esp+14h+var_8] eax +
mov eax [esp+14h+arg_1050] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_104C] +
mov [esp+14h+var_10] eax +
mov eax [esp+14h+arg_1048] +
mov [esp+14h+var_14] eax +
lea eax [esp+14h+arg_28] +
call sub_45F110  +
test eax eax +
jz loc_45F1B3  +
cmp [esp+14h+arg_1058] 0 +
mov eax [esp+14h+arg_24] +
jz loc_460516  +
cdq   +
idiv  [esp+14h+arg_28] +
mov eax [esp+14h+arg_8] +
mov [eax] edx +
jmp loc_45F4A5  +
xor edx edx +
div  [esp+14h+arg_28] +
mov eax [esp+14h+arg_8] +
mov [eax] edx +
mov eax 1 +
jmp loc_45F1B5  +
***
mov eax [esp+18h+arg_0] +
mov edx [esp+18h+arg_4] +
cmp [eax+14h] edx +
jbe loc_460555  +
mov ecx [eax+0Ch] +
lea ebx [edx+edx*4] +
lea ebx [ecx+ebx*4] +
movzx ecx byte ptr [ebx+0Ch] +
shr cl 4 +
test cl cl +
jz loc_4605B8  +
sub edx [eax+18h] +
mov eax [eax+1Ch] +
mov eax [eax+edx*4] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
ja loc_46057F  +
lea esi [esi+0] +
mov eax [eax+14h] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
jbe loc_460570  +
sub edx 3 +
cmp dl 1 +
ja loc_4605B1  +
mov eax [eax+14h] +
cmp eax offset off_4BFB90 +
jz loc_4605B1  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jnz loc_4605B1  +
movzx edx word ptr [eax+18h] +
and dx 380h +
cmp dx 100h +
jz loc_4605B1  +
cmp dx 200h +
jnz loc_4605B3  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov edx [ebx+10h] +
mov eax [eax+10h] +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call sub_478480  +
test eax eax +
jz loc_4605B3  +
mov edx [esp+18h+arg_8] +
test edx edx +
jz loc_4605B3  +
cmp eax offset off_4BFB90 +
jnz loc_460591  +
jmp loc_4605B1  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov esi [esp+4Ch+arg_4] +
mov ebx [esp+4Ch+arg_C] +
mov [esp+4Ch+var_3C] 0 +
mov edi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] ebx +
mov eax [esi+1Ch] +
mov [esp+4Ch+var_4C] eax +
call sub_4500A0  +
test eax eax +
jz loc_460622  +
mov byte ptr [eax+0Ch] 0 +
mov [esp+4Ch+var_10] eax +
mov eax [edi+4] +
mov ebp [eax+1B0h] +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_28] eax +
movzx eax byte ptr [ebp+1ACh] +
mov [esp+4Ch+var_30] 0 +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_38] 0 +
and eax 1 +
mov [esp+4Ch+var_2C] eax +
mov eax [esp+4Ch+arg_8] +
mov [esp+4Ch+var_40] 2 +
mov [esp+4Ch+var_44] ebx +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_3C] eax +
mov [esp+4Ch+var_4C] esi +
call sub_450D00  +
test eax eax +
jz loc_4606D0  +
mov ebx [esp+4Ch+var_10] +
movzx eax byte ptr [ebx+31h] +
or byte ptr [ebx+33h] 2 +
and byte ptr [ebx+34h] 0FEh +
or byte ptr [ebx+0Dh] 2 +
mov edx eax +
and edx 3 +
cmp dl 1 +
mov byte ptr [ebx+30h] 1 +
jz loc_4606AC  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+31h] al +
mov eax [ebp+0DCh] +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_44] 1 +
call eax  +
add esp 4Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_4] +
mov ebx [esi+1Ch] +
cmp dword ptr [ebx+28h] 1 +
jz loc_460840  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [ebx+30h] +
mov eax 1 +
test ecx ecx +
jnz loc_460836  +
mov edx [ebx+38h] +
test edx edx +
jz loc_460A08  +
mov eax [ebx+50h] +
test eax eax +
jz loc_460A15  +
mov ebp [ebx+38h] +
mov eax [ebp+4] +
mov ebx [eax+1B0h] +
mov eax [ebx+1Ch] +
mov edi eax +
mov [esp+2Ch+var_10] eax +
movzx eax byte ptr [esi] +
or edi 8 +
and eax 3 +
cmp al 1 +
ja loc_460895  +
mov edi [esp+2Ch+var_10] +
or edi 8 +
test byte ptr [esi+6] 1 +
jz loc_4609E7  +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_gnu_version_d +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov ecx [ebx+174h] +
movzx ecx byte ptr [ecx+0Bh] +
mov [eax+40h] ecx +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_gnu_version +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov dword ptr [eax+40h] 1 +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_gnu_version_r +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov ecx [ebx+174h] +
movzx ecx byte ptr [ecx+0Bh] +
mov [eax+40h] ecx +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_dynsym +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov ecx [ebx+174h] +
movzx ecx byte ptr [ecx+0Bh] +
mov [eax+40h] ecx +
mov ecx [esi+1Ch] +
mov [ecx+0F8h] eax +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_dynstr +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] offset a_dynamic +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_24] eax +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov ecx [ebx+174h] +
movzx ecx byte ptr [ecx+0Bh] +
mov [eax+40h] ecx +
mov [esp+2Ch+var_20] offset a_dynamic_1 +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebp +
call sub_4605E0  +
mov ecx [esi+1Ch] +
test eax eax +
mov [ecx+78h] eax +
jz loc_460834  +
movzx eax byte ptr [esi+3] +
test al 20h +
jnz loc_460A2D  +
test al 40h +
jnz loc_460A6C  +
mov eax [ebx+6Ch] +
test eax eax +
jz loc_460834  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebp +
call eax  +
test eax eax +
jz loc_460834  +
mov eax [esi+1Ch] +
mov dword ptr [eax+30h] 1 +
mov eax 1 +
jmp loc_460836  +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_interp_1 +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jnz loc_460895  +
jmp loc_460834  +
mov eax [esp+2Ch+arg_0] +
mov [ebx+38h] eax +
nop   +
jmp loc_460857  +
call sub_488500  +
test eax eax +
mov [ebx+50h] eax +
jz loc_460834  +
mov ebx [esi+1Ch] +
jmp loc_460862  +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_hash +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov ecx [ebx+174h] +
movzx edx byte ptr [ecx+0Bh] +
mov [eax+40h] edx +
mov eax [eax+8Ch] +
movzx ecx byte ptr [ecx+8] +
mov [eax+28h] ecx +
movzx eax byte ptr [esi+3] +
jmp loc_4609AF  +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset a_gnu_hash +
mov [esp+2Ch+var_2C] ebp +
call sub_44D890  +
test eax eax +
jz loc_460834  +
mov ecx [ebx+174h] +
movzx edi byte ptr [ecx+0Bh] +
mov [eax+40h] edi +
mov eax [eax+8Ch] +
cmp byte ptr [ecx+0Ah] 40h +
jz loc_460AAD  +
mov dword ptr [eax+28h] 4 +
jmp loc_4609B7  +
mov dword ptr [eax+28h] 0 +
jmp loc_4609B7  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+30h] +
mov eax [ebx+4] +
mov esi [eax+1B0h] +
mov eax [esp+34h] +
mov ebp [esi+1Ch] +
movzx edx byte ptr [esi+1ADh] +
mov edi [eax+1Ch] +
mov dword ptr [esp+4] offset a_plt_17 +
mov eax ebp +
mov ecx ebp +
or ecx 13h +
and eax 0FFFFFEEDh +
test dl 8 +
cmovz eax ecx +
mov ecx eax +
or ecx 8 +
and edx 2 +
cmovnz eax ecx +
mov [esp+8] eax +
mov [esp] ebx +
call sub_44D890  +
test eax eax +
jz loc_460BD3  +
movzx ecx byte ptr [esi+1ADh] +
shr cl 4 +
movzx ecx cl +
mov [eax+40h] ecx +
test byte ptr [esi+1ADh] 4 +
mov [edi+0E0h] eax +
jnz loc_460BA5  +
or ebp 8 +
mov ecx offset a_rela_plt +
test byte ptr [esi+1ACh] 20h +
mov eax offset a_rel_plt +
mov [esp+8] ebp +
mov [esp] ebx +
cmovnz eax ecx +
mov [esp+4] eax +
call sub_44D890  +
test eax eax +
jz loc_460BD3  +
mov ecx [esi+174h] +
movzx ecx byte ptr [ecx+0Bh] +
mov [eax+40h] ecx +
mov [edi+0E4h] eax +
mov eax [esp+34h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_4606E0  +
test eax eax +
jz loc_460BD3  +
test byte ptr [esi+1AEh] 8 +
jnz loc_460BE0  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] eax +
mov eax [esp+34h] +
mov dword ptr [esp+0Ch] offset a_procedure_lin +
mov [esp] ebx +
mov [esp+4] eax +
call sub_4605E0  +
mov edx [esp+34h] +
mov ecx [edx+1Ch] +
test eax eax +
mov [ecx+74h] eax +
jnz loc_460B3D  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+8] 100001h +
mov dword ptr [esp+4] offset a_dynbss +
mov [esp] ebx +
call sub_44D890  +
test eax eax +
jz loc_460BD3  +
mov eax [esp+34h] +
test byte ptr [eax] 1 +
jnz loc_460B98  +
test byte ptr [esi+1ACh] 20h +
mov ecx offset a_rel_bss +
mov eax offset a_rela_bss +
mov [esp+8] ebp +
cmovz eax ecx +
mov [esp+4] eax +
mov [esp] ebx +
call sub_44D890  +
test eax eax +
jz loc_460BD3  +
mov edx [esi+174h] +
movzx edx byte ptr [edx+0Bh] +
mov [eax+40h] edx +
jmp loc_460B98  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_4] +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_460C60  +
mov eax 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
sub eax 1 +
cmp al 1 +
jbe loc_460CC5  +
mov eax [esp+1Ch+arg_0] +
mov esi [eax+1Ch] +
mov eax [esi+4Ch] +
mov edi [esi+50h] +
mov [ebx+20h] eax +
add eax 1 +
test edi edi +
mov [esi+4Ch] eax +
jz loc_460CE7  +
mov ebp [ebx+4] +
mov [esp+1Ch+var_18] 40h +
mov [esp+1Ch+var_1C] ebp +
call strchr  +
test eax eax +
mov esi eax +
jz loc_460D00  +
mov byte ptr [eax] 0 +
mov [esp+1Ch+var_14] 1 +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] edi +
call sub_4885B0  +
mov byte ptr [esi] 40h +
cmp eax 0FFFFFFFFh +
jz loc_460CF5  +
mov [ebx+38h] eax +
jmp loc_460C51  +
movzx eax byte ptr [ebx+0Ch] +
sub eax 1 +
cmp al 1 +
jbe loc_460C6E  +
or byte ptr [ebx+34h] 8 +
mov eax [esp+1Ch+arg_0] +
mov esi [eax+1Ch] +
mov eax [esi+34h] +
test eax eax +
jnz loc_460C75  +
jmp loc_460C51  +
call sub_488500  +
test eax eax +
mov edi eax +
mov [esi+50h] eax +
jnz loc_460C88  +
xor eax eax +
jmp loc_460C56  +
mov [esp+1Ch+var_14] 0 +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] edi +
call sub_4885B0  +
jmp loc_460CBB  +
***
mov edi edx +
mov eax [ebx+14h] +
mov eax [ebx+14h] +
mov [esp+arg_60] eax +
mov eax [eax+94h] +
mov [esp+arg_1C] eax +
***
mov eax [esp+arg_2C] +
test eax eax +
jz loc_460FB7  +
mov edx [eax] +
test edx edx +
jz loc_461897  +
cmp [esp+arg_30] 2 +
setz al  +
mov byte ptr [esp+arg_64] al +
movzx eax al +
mov [esp+arg_2C] eax +
movzx eax byte ptr [ebx+0Ch] +
cmp al 2 +
setz dl  +
cmp al 4 +
mov esi edx +
mov edx [esp+arg_34] +
setz al  +
or esi eax +
mov eax esi +
movzx eax al +
test edx edx +
mov [esp+arg_44] eax +
jz loc_460FEF  +
mov [edx] eax +
mov edx [edi+30h] +
mov eax [esp+arg_28] +
mov edx [edx+4] +
mov eax [eax+74h] +
mov [esp+0] ecx +
mov [esp+arg_0] edx +
call eax  +
test eax eax +
jnz loc_461075  +
mov eax 1 +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [ebx+14h] +
mov [esp+arg_60] 0 +
mov [esp+arg_1C] eax +
jmp loc_460FA5  +
***
mov dword ptr [esp+20h] 0 +
mov dword ptr [esp+64h] 0 +
jmp loc_460FA5  +
***
mov ecx [esp+arg_38] +
mov edx ebx +
mov eax edi +
call sub_45C090  +
mov eax [esp+arg_20] +
mov eax [eax+28h] +
shr eax 5 +
and eax 40h +
mov edx eax +
setnz al  +
mov byte ptr [esp+arg_34] al +
movzx eax al +
test eax eax +
mov [esp+arg_68] eax +
jz loc_4610C3  +
cmp [esp+arg_3C] offset off_4BFAE8 +
jz loc_4619FA  +
mov eax [esp+arg_24] +
mov eax [eax] +
test eax eax +
jz loc_4610BF  +
or byte ptr [ebx+34h] 80h +
or byte ptr [ebp+34h] 80h +
movzx eax byte ptr [ebx+0Ch] +
test al al +
jz loc_461883  +
mov ecx [esp+arg_1C] +
cmp [esp+arg_20] ecx +
jz loc_46195A  +
mov ecx [esp+arg_1C] +
test ecx ecx +
jz loc_4619C7  +
mov ecx [esp+arg_1C] +
mov ecx [ecx+28h] +
shr ecx 0Bh +
and ecx 1 +
mov esi [esp+arg_3C] +
cmp esi offset off_4BFAE8 +
jz loc_4619C0  +
mov esi [esi+14h] +
shr esi 0Ch +
xor esi 1 +
and esi 1 +
lea edx [eax-1] +
cmp dl 1 +
setnbe byte ptr [esp+arg_24]  +
cmp al 5 +
setnz al  +
and byte ptr [esp+arg_24] al +
movzx eax byte ptr [esp+arg_24] +
mov [esp+arg_6C] 0 +
mov [esp+arg_30] eax +
mov eax [esp+arg_38] +
movzx eax byte ptr [eax+0Ch] +
mov byte ptr [esp+arg_64] al +
and eax 0Fh +
jnz loc_4618EA  +
movzx eax byte ptr [ebx+30h] +
mov [esp+arg_64] 0 +
test al al +
jnz loc_4618C2  +
mov edx [esp+arg_40] +
test edx edx +
setz byte ptr [esp+arg_70]  +
cmp byte ptr [esp+arg_34] 0 +
jz loc_461220  +
cmp byte ptr [esp+arg_70] 0 +
jz loc_461220  +
mov eax ecx +
mov edx esi +
xor eax 1 +
test al dl +
jz loc_461220  +
mov eax [esp+arg_30] +
test eax eax +
jz loc_461213  +
mov eax [esp+arg_38] +
movzx edx byte ptr [eax+0Ch] +
movzx eax byte ptr [ebx+30h] +
and edx 0Fh +
cmp al dl +
jz loc_4611D7  +
test dl dl +
jz loc_4611D7  +
test al al +
jz loc_4611D7  +
mov [esp+arg_7A] dl +
mov edx [esp+arg_6C] +
mov byte ptr [esp+arg_74] al +
mov eax [esp+arg_64] +
xor edx 1 +
xor eax 1 +
or al dl +
movzx eax byte ptr [esp+arg_74] +
movzx edx [esp+arg_7A] +
jnz loc_4611ED  +
cmp [esp+arg_30] 0 +
jz loc_461220  +
cmp dl 0Ah +
setz dl  +
cmp al 0Ah +
setz al  +
cmp dl al +
jz loc_461220  +
mov eax [esp+arg_54] +
mov dword ptr [eax] 1 +
mov eax 1 +
jmp loc_46100E  +
***
movzx eax byte ptr [ebp+34h] +
and eax 0FFFFFFF9h +
or eax 4 +
mov [ebp+34h] al +
jmp loc_460E6B  +
***
cmp byte ptr [ebx+0Ch] 5 +
jz loc_461198  +
lea esi [esi+0] +
mov eax [esp+arg_1C] +
test eax eax +
jz loc_461300  +
test byte ptr [eax+2Ah] 20h +
jnz loc_461300  +
mov eax [esp+arg_20] +
test byte ptr [eax+2Ah] 20h +
jnz loc_461300  +
mov eax [esp+arg_38] +
movzx edx byte ptr [ebx+30h] +
movzx eax byte ptr [eax+0Ch] +
and eax 0Fh +
cmp al dl +
jz loc_461300  +
cmp al 6 +
jz loc_461A2B  +
cmp dl 6 +
jnz loc_461300  +
mov eax [esp+arg_60] +
mov edi [esp+arg_3C] +
mov [esp+arg_3C] eax +
mov eax [esp+arg_30] +
mov [esp+arg_60] edi +
mov edi [esp+arg_20] +
mov [esp+arg_30] esi +
mov esi eax +
mov eax [esp+arg_1C] +
mov [esp+arg_1C] edi +
mov [esp+arg_20] eax +
mov eax [esp+arg_30] +
and eax esi +
test al 1 +
jnz loc_461A65  +
mov eax [esp+arg_30] +
or eax esi +
mov eax [ebx+4] +
jz loc_461AE4  +
test esi esi +
mov [esp+arg_C] eax +
jz loc_461A9E  +
mov eax [esp+arg_1C] +
mov dword ptr [esp+0] offset aSTlsDefinition +
mov [esp+arg_8] eax +
mov eax [esp+arg_3C] +
mov [esp+arg_4] eax +
mov eax [esp+arg_20] +
mov [esp+arg_0] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
add esp 8Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+arg_68] +
test eax eax +
jnz loc_46139D  +
mov eax [esp+arg_38] +
test byte ptr [eax+0Dh] 3 +
jz loc_4613AA  +
movzx eax byte ptr [ebx+33h] +
test al 8 +
jz loc_4613AA  +
cmp byte ptr [ebp+0Ch] 6 +
jz loc_461A4F  +
mov eax [ebx+10h] +
test eax eax +
jz loc_461AC8  +
mov eax [esp+arg_20] +
mov byte ptr [ebx+0Ch] 1 +
mov [ebx+14h] eax +
mov eax [esp+arg_38] +
movzx eax byte ptr [eax+0Dh] +
and eax 3 +
cmp al 3 +
jz loc_461A1C  +
mov eax [esp+arg_28] +
mov eax [eax+0DCh] +
mov [esp+arg_4] 1 +
mov [esp+arg_0] ebx +
mov [esp+0] edi +
call eax  +
movzx eax byte ptr [ebx+33h] +
and byte ptr [ebx+34h] 0F7h +
and eax 0FFFFFFFBh +
mov [ebx+33h] al +
and eax 0FFFFFFF7h +
mov [ebx+33h] al +
mov eax 1 +
mov dword ptr [ebx+2Ch] 0 +
mov byte ptr [ebx+30h] 0 +
jmp loc_46100E  +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
jnz loc_461915  +
mov edx esi +
and edx 1 +
jz loc_4613BC  +
cmp byte ptr [esp+arg_34] 0 +
jz loc_461594  +
cmp byte ptr [esp+arg_24] 0 +
jz loc_4613D6  +
cmp byte ptr [esp+arg_34] 0 +
mov eax 0 +
cmovz eax [esp+arg_44] +
mov [esp+arg_44] eax +
movzx eax byte ptr [esp+arg_6C] +
test byte ptr [esp+arg_64] al +
jz loc_4613EB  +
mov eax [esp+arg_48] +
mov dword ptr [eax] 1 +
mov eax [esp+arg_44] +
or eax [esp+arg_2C] +
jnz loc_461610  +
test esi esi +
jnz loc_461606  +
mov eax [esp+arg_48] +
mov eax [eax] +
test eax eax +
jnz loc_46161A  +
cmp byte ptr [ebx+0Ch] 1 +
jz loc_46161A  +
and dl byte ptr [esp+arg_34] +
mov [esp+arg_74] 0 +
mov [esp+arg_7A] dl +
jz loc_461465  +
mov eax [esp+arg_2C] +
test eax eax +
jnz loc_461465  +
mov eax [esp+arg_3C] +
mov edx [esp+arg_2C] +
mov eax [eax+14h] +
mov [esp+arg_74] edx +
and eax 3 +
cmp eax 1 +
jnz loc_461465  +
mov eax [esp+arg_38] +
mov edx [esp+arg_6C] +
mov eax [eax+4] +
xor edx 1 +
test eax eax +
mov eax edx +
cmovz eax [esp+arg_2C] +
mov [esp+arg_74] eax +
mov eax ecx +
and al byte ptr [esp+arg_24] +
mov [esp+arg_34] 0 +
mov [esp+arg_7B] al +
jz loc_461483  +
cmp byte ptr [ebx+0Ch] 3 +
jz loc_461985  +
mov eax [esp+arg_28] +
mov eax [eax+150h] +
test eax eax +
jz loc_4614D4  +
mov ecx [esp+arg_60] +
mov edx [esp+arg_38] +
mov [esp+arg_8] esi +
mov [esp+0] ebx +
mov [esp+arg_14] ecx +
mov ecx [esp+arg_1C] +
mov [esp+arg_0] edx +
mov [esp+arg_10] ecx +
mov ecx [esp+arg_30] +
mov [esp+arg_C] ecx +
mov ecx [esp+arg_4C] +
mov [esp+arg_4] ecx +
call eax  +
test eax eax +
jz loc_4612F0  +
mov ecx [esp+arg_4C] +
mov eax [ecx] +
mov [esp+arg_3C] eax +
movzx eax byte ptr [esp+arg_74] +
test byte ptr [esp+arg_34] al +
jz loc_46152F  +
mov eax [esp+arg_38] +
mov eax [eax+4] +
cmp eax [ebx+2Ch] +
jz loc_46152F  +
mov edx [edi+18h] +
mov ecx [esp+arg_20] +
mov edx [edx+8] +
mov [esp+arg_C] eax +
mov [esp+arg_8] 5 +
mov [esp+arg_4] ecx +
mov [esp+arg_0] ebx +
mov [esp+0] edi +
call edx  +
test eax eax +
jz loc_4612F0  +
mov eax [esp+arg_38] +
mov eax [eax+4] +
cmp eax [ebx+2Ch] +
jbe loc_461525  +
mov [ebx+2Ch] eax +
mov eax [esp+arg_50] +
mov dword ptr [eax] 1 +
cmp [esp+arg_7A] 0 +
jz loc_4615A9  +
mov eax [esp+arg_30] +
test eax eax +
jnz loc_461553  +
cmp byte ptr [ebx+0Ch] 5 +
mov esi 1 +
jnz loc_4615A9  +
mov eax [esp+arg_6C] +
or eax [esp+arg_2C] +
jz loc_4615A9  +
mov eax [esp+arg_5C] +
mov dword ptr [eax] 1 +
mov eax [esp+arg_4C] +
mov dword ptr [eax] offset off_4BFAE8 +
mov eax [esp+arg_50] +
cmp byte ptr [ebx+0Ch] 5 +
mov dword ptr [eax] 1 +
jz loc_461A40  +
mov eax [esp+arg_68] +
test eax eax +
jnz loc_461009  +
mov [esp+arg_3C] offset off_4BFAE8 +
jmp loc_46179A  +
test ecx ecx +
mov eax 0 +
cmovz eax [esp+arg_2C] +
mov [esp+arg_2C] eax +
jmp loc_4613BC  +
mov eax [esp+arg_74] +
test eax eax +
jz loc_461629  +
cmp byte ptr [ebx+0Ch] 5 +
jnz loc_461629  +
mov eax [esp+arg_5C] +
mov ecx [esp+arg_58] +
mov dword ptr [eax] 1 +
mov eax [esp+arg_38] +
mov eax [eax+4] +
mov [ecx] eax +
mov eax [esp+arg_28] +
mov ecx [esp+arg_60] +
mov eax [eax+14Ch] +
mov [esp+0] ecx +
call eax  +
mov ecx [esp+arg_4C] +
mov [esp+arg_3C] eax +
mov [ecx] eax +
mov eax [esp+arg_50] +
mov dword ptr [eax] 1 +
mov eax [esp+arg_68] +
test eax eax +
jz loc_46179A  +
jmp loc_461009  +
cmp byte ptr [ebx+0Ch] 1 +
jnz loc_461401  +
mov eax [esp+arg_48] +
mov dword ptr [eax] 1 +
mov eax [esp+arg_50] +
mov dword ptr [eax] 1 +
jmp loc_461419  +
test esi 1 +
jz loc_461786  +
cmp byte ptr [esp+arg_24] 0 +
jz loc_461786  +
mov eax [esp+arg_2C] +
test eax eax +
jnz loc_461706  +
cmp [esp+arg_68] 0 +
jnz loc_461009  +
cmp [esp+arg_7B] 0 +
jz loc_4619E7  +
movzx eax byte ptr [ebx+33h] +
test al 8 +
jz loc_4619E7  +
mov edx [ebx+14h] +
mov ecx [esp+arg_50] +
mov byte ptr [ebx+0Ch] 1 +
mov edx [edx+94h] +
mov [ebx+14h] edx +
mov dword ptr [ecx] 1 +
mov ecx [esp+arg_3C] +
test byte ptr [ecx+15h] 10h +
jz loc_4616AE  +
mov ecx [esp+arg_64] +
test ecx ecx +
jz loc_4616A4  +
and eax 0FFFFFFF7h +
mov [ebx+33h] al +
mov byte ptr [ebx+30h] 0 +
mov eax [esp+arg_48] +
mov dword ptr [eax] 1 +
cmp byte ptr [ebp+0Ch] 6 +
jnz loc_461843  +
test ebp ebp +
jz loc_461009  +
movzx edx byte ptr [ebx+0Ch] +
mov eax [ebx+14h] +
mov [ebp+14h] eax +
mov eax [esp+arg_28] +
mov [ebp+0Ch] dl +
mov [ebx+14h] ebp +
mov byte ptr [ebx+0Ch] 6 +
mov eax [eax+0D8h] +
mov [esp+arg_4] ebx +
mov [esp+arg_0] ebp +
mov [esp+0] edi +
call eax  +
movzx eax byte ptr [ebx+33h] +
test al 8 +
jz loc_461009  +
and eax 0FFFFFFF7h +
mov [ebx+33h] al +
or byte ptr [ebp+33h] 4 +
jmp loc_461009  +
mov eax [esp+arg_1C] +
test eax eax +
jz loc_461723  +
test byte ptr [eax+2Ah] 20h +
jz loc_461723  +
mov eax [esp+arg_20] +
mov esi 1 +
test byte ptr [eax+2Ah] 20h +
jz loc_46172F  +
mov eax [esp+arg_54] +
xor esi esi +
mov dword ptr [eax] 1 +
mov ecx [esp+arg_68] +
mov eax [esp+arg_20] +
mov eax [eax+4] +
mov [esp+arg_4] ecx +
mov ecx [esp+arg_3C] +
mov [esp+arg_0] esi +
lea edx [ecx+14h] +
mov ecx [esp+arg_38] +
mov [esp+0] edx +
mov edx ebx +
call sub_45D350  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_461786  +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
sub eax 1 +
cmp al 1 +
ja loc_461786  +
mov eax [esp+arg_28] +
mov eax [eax+0DCh] +
mov [esp+arg_4] 1 +
mov [esp+arg_0] ebx +
mov [esp+0] edi +
call eax  +
mov eax [esp+arg_68] +
test eax eax +
jnz loc_461009  +
test esi esi +
jnz loc_461657  +
mov eax [esp+arg_3C] +
test byte ptr [eax+15h] 10h +
jz loc_461009  +
mov eax [esp+arg_44] +
or eax [esp+arg_64] +
jnz loc_461657  +
mov edx [esp+arg_34] +
test edx edx +
jz loc_461009  +
mov ecx [esp+arg_38] +
mov eax [edi+18h] +
mov edx [ecx+4] +
mov ecx [esp+arg_20] +
mov eax [eax+8] +
mov [esp+arg_8] 5 +
mov [esp+arg_C] edx +
mov [esp+arg_4] ecx +
mov [esp+arg_0] ebx +
mov [esp+0] edi +
call eax  +
test eax eax +
jz loc_4612F0  +
mov ecx [esp+arg_58] +
mov eax [ebx+2Ch] +
cmp eax [ecx] +
jbe loc_461801  +
mov [ecx] eax +
cmp byte ptr [esp+arg_70] 0 +
jnz loc_461B91  +
mov eax [ebx+14h] +
mov ecx [esp+arg_40] +
mov edx [eax+40h] +
mov eax [eax+94h] +
mov [ecx] edx +
mov ecx [esp+arg_50] +
mov byte ptr [ebx+0Ch] 1 +
mov [ebx+14h] eax +
cmp byte ptr [ebp+0Ch] 6 +
mov dword ptr [ecx] 1 +
mov ecx [esp+arg_48] +
mov dword ptr [ecx] 1 +
jz loc_461B0A  +
mov dword ptr [ebx+40h] 0 +
jmp loc_461009  +
***
mov eax [esp+94h+var_70] +
mov [esp+94h+var_80] 0 +
mov [esp+94h+var_84] 0 +
mov [esp+94h+var_88] 1 +
mov [esp+94h+var_8C] ebx +
mov [esp+94h+var_90] edi +
mov [esp+94h+var_94] eax +
call sub_4500F0  +
mov ebp eax +
jmp loc_460E0C  +
***
and byte ptr [ebx+34h] 0FEh +
add esp 8Ch +
pop ebx  +
mov eax 1 +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+arg_1C] +
mov [eax] ecx +
mov eax [esp+arg_20] +
mov ecx [eax+4] +
jmp loc_460FB7  +
***
movzx eax byte ptr [ebp+34h] +
and eax 0FFFFFFF9h +
or eax 2 +
mov [ebp+34h] al +
jmp loc_460E7A  +
***
mov [esp+arg_70] ecx +
mov ecx [esp+arg_28] +
mov edx [ecx+158h] +
mov [esp+0] eax +
call edx  +
mov ecx [esp+arg_70] +
test eax eax +
setnz al  +
movzx eax al +
mov [esp+arg_64] eax +
jmp loc_461160  +
mov [esp+arg_64] ecx +
mov ecx [esp+arg_28] +
movzx eax al +
mov edx [ecx+158h] +
mov [esp+0] eax +
call edx  +
mov ecx [esp+arg_64] +
test eax eax +
setnz al  +
movzx eax al +
mov [esp+arg_6C] eax +
jmp loc_46114C  +
cmp [esp+arg_3C] offset off_4BFAE8 +
jz loc_4613AA  +
mov ecx [esp+arg_54] +
mov dword ptr [ecx] 1 +
or byte ptr [ebx+33h] 4 +
or byte ptr [ebp+33h] 4 +
cmp al 3 +
jnz loc_461009  +
mov [esp+arg_A0] ebx +
mov [esp+arg_9C] edi +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_460C40  +
cmp byte ptr [esp+arg_64] 0 +
jnz loc_46196B  +
mov ecx esi +
test cl cl +
jz loc_4610E9  +
test edx edx +
jz loc_461009  +
test byte ptr [ebx+33h] 2 +
jnz loc_4610E9  +
lea esi [esi+0] +
jmp loc_461009  +
test byte ptr [ebx+33h] 8 +
jz loc_461483  +
mov eax [ebx+14h] +
mov eax [eax+14h] +
and eax 3 +
cmp eax 1 +
jnz loc_461483  +
mov eax [esp+arg_64] +
mov edx [ebx+2Ch] +
xor eax 1 +
test edx edx +
cmovz eax [esp+arg_34] +
mov [esp+arg_34] eax +
jmp loc_461483  +
***
xor esi esi +
jmp loc_461112  +
mov ecx [esp+arg_60] +
test ecx ecx +
jz loc_461A5E  +
mov edx [ecx+98h] +
mov ecx [edx+0Ch] +
shr ecx 0Fh +
and ecx 1 +
jmp loc_4610F6  +
mov eax [esp+arg_3C] +
test byte ptr [eax+15h] 10h +
jnz loc_4617B6  +
jmp loc_461009  +
cmp [esp+arg_30] 2 +
jz loc_4610C3  +
or byte ptr [ebx+35h] 1 +
or byte ptr [ebp+35h] 1 +
jmp loc_4610C3  +
***
mov eax 1 +
jmp loc_460F37  +
***
movzx eax byte ptr [ebx+33h] +
or eax 4 +
mov [ebx+33h] al +
jmp loc_461382  +
cmp dl 6 +
jnz loc_461296  +
jmp loc_46126C  +
***
mov eax [esp+arg_48] +
mov dword ptr [eax] 1 +
jmp loc_46157B  +
test al 1 +
jnz loc_461B14  +
mov ebx ebp +
jmp loc_461330  +
xor ecx ecx +
jmp loc_4610F6  +
mov eax [ebx+4] +
mov dword ptr [esp+0] offset aSTlsDefiniti_0 +
mov [esp+arg_10] eax +
mov eax [esp+arg_60] +
mov [esp+arg_C] eax +
mov eax [esp+arg_1C] +
mov [esp+arg_8] eax +
mov eax [esp+arg_3C] +
mov [esp+arg_4] eax +
mov eax [esp+arg_20] +
mov [esp+arg_0] eax +
call off_4BFA04  +
jmp loc_4612E4  +
mov eax [esp+arg_60] +
mov dword ptr [esp+0] offset aSTlsReferenceI +
mov [esp+arg_8] eax +
mov eax [esp+arg_1C] +
mov [esp+arg_4] eax +
mov eax [esp+arg_20] +
mov [esp+arg_0] eax +
call off_4BFA04  +
jmp loc_4612E4  +
mov eax [edi+1Ch] +
cmp [eax+20h] ebx +
jz loc_46133B  +
mov byte ptr [ebx+0Ch] 0 +
mov dword ptr [ebx+14h] 0 +
jmp loc_461346  +
mov [esp+arg_8] eax +
mov eax [esp+arg_1C] +
mov dword ptr [esp+0] offset aSTlsReferenc_0 +
mov [esp+arg_4] eax +
mov eax [esp+arg_20] +
mov [esp+arg_0] eax +
call off_4BFA04  +
jmp loc_4612E4  +
mov edx 1 +
jmp loc_4616C7  +
movzx eax byte ptr [ebx+0Ch] +
mov esi [esp+arg_28] +
mov [ebp+0Ch] al +
mov eax [esi+0D8h] +
mov byte ptr [ebx+0Ch] 6 +
mov [esp+arg_4] ebx +
mov [esp+arg_0] ebp +
mov [esp+0] edi +
call eax  +
mov eax [esp+arg_38] +
mov [ebx+14h] ebp +
movzx eax byte ptr [eax+0Dh] +
and eax 3 +
cmp al 3 +
jz loc_461B85  +
mov eax [esi+0DCh] +
mov [esp+arg_4] 1 +
mov [esp+arg_0] ebx +
mov [esp+0] edi +
call eax  +
movzx eax byte ptr [ebx+33h] +
and byte ptr [ebx+34h] 0F7h +
and eax 0FFFFFFFBh +
mov [ebx+33h] al +
and eax 0FFFFFFF7h +
mov [ebx+33h] al +
mov dword ptr [ebx+2Ch] 0 +
mov byte ptr [ebx+30h] 0 +
mov ebx ebp +
jmp loc_461330  +
movzx eax byte ptr [ebx+33h] +
or eax 4 +
mov [ebx+33h] al +
jmp loc_461B6D  +
mov [esp+arg_0] 657h +
mov dword ptr [esp+0] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_46180C  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
test byte ptr [eax+34h] 1 +
movzx eax byte ptr [eax+0Ch] +
jnz loc_461C5B  +
sub eax 3 +
cmp al 1 +
jbe loc_461DD0  +
mov edx [ebp+0] +
mov eax [edx+1Ch] +
mov eax [eax+38h] +
mov eax [eax+4] +
mov edi [eax+1B0h] +
mov eax [edi+0E0h] +
test eax eax +
jz loc_461BFF  +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_24] ebx +
call eax  +
xor edx edx +
test eax eax +
jz loc_461C4A  +
cmp byte ptr [ebx+0Ch] 3 +
jz loc_461D70  +
movzx edx byte ptr [ebx+33h] +
test dl dl +
js loc_461D20  +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
test al al +
jz loc_461C2A  +
cmp byte ptr [ebx+0Ch] 2 +
jz loc_461E2B  +
mov esi [ebx+3Ch] +
test esi esi +
jz loc_461E21  +
movzx edx byte ptr [esi+33h] +
test dl 2 +
jz loc_461CA7  +
mov dword ptr [ebx+3Ch] 0 +
mov edx 1 +
add esp 1Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [ebx+14h] +
movzx eax byte ptr [ebx+0Ch] +
cmp al 6 +
jz loc_461C54  +
sub eax 3 +
cmp al 1 +
jbe loc_461DA6  +
or byte ptr [ebx+33h] 11h +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jnz loc_461BD4  +
test byte ptr [ebx+33h] 0Ch +
jz loc_461BD4  +
mov eax [ebp+0] +
mov [esp-4+arg_0] ebx +
mov [esp+0] eax +
call sub_460C40  +
test eax eax +
jnz loc_461BD4  +
mov dword ptr [ebp+4] 1 +
xor edx edx +
jmp loc_461C4A  +
mov ebx [ebx+14h] +
movzx eax byte ptr [ebx+0Ch] +
cmp al 6 +
jz loc_461CA4  +
sub eax 3 +
cmp al 1 +
jbe loc_461CCE  +
mov [esp-4+arg_0] 0A4Ah +
mov dword ptr [esp+0] offset a____Binutil_12 +
call sub_44BA40  +
movzx edx byte ptr [esi+33h] +
and edx 8 +
jz loc_461E08  +
movzx eax byte ptr [esi+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_461CF6  +
mov [esp-4+arg_0] 0A4Dh +
mov dword ptr [esp+0] offset a____Binutil_12 +
call sub_44BA40  +
mov edx [ebp+0] +
mov eax [edi+0D8h] +
mov [esp-4+arg_4] ebx +
mov [esp-4+arg_0] esi +
mov [esp+0] edx +
call eax  +
add esp 1Ch +
mov edx 1 +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [ebp+0] +
movzx eax byte ptr [ecx] +
test al 1 +
jz loc_461C15  +
mov esi [ecx+1Ch] +
cmp dword ptr [esi+28h] 1 +
jnz loc_461C15  +
test byte ptr [ebx+35h] 4 +
jnz loc_461E4A  +
test al 4 +
jnz loc_461D5D  +
test byte ptr [ecx+5] 1 +
jz loc_461E4A  +
test byte ptr [ebx+34h] 10h +
jnz loc_461E4A  +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
jmp loc_461E57  +
movzx edx byte ptr [ebx+33h] +
mov eax edx +
and eax 0Bh +
cmp al 1 +
jnz loc_461C0D  +
mov eax [ebx+14h] +
mov eax [eax+94h] +
mov eax [eax+28h] +
shr eax 5 +
test eax 10040h +
jnz loc_461C0D  +
or edx 2 +
mov [ebx+33h] dl +
jmp loc_461C0D  +
mov eax [ebx+14h] +
mov eax [eax+94h] +
test eax eax +
jz loc_461DC0  +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jz loc_461C6A  +
or byte ptr [ebx+33h] 2 +
jmp loc_461C6E  +
movzx eax byte ptr [ebx+33h] +
test al 2 +
jnz loc_461BD4  +
mov ecx [ebx+14h] +
mov edx [ecx+94h] +
test edx edx +
jz loc_461E87  +
mov eax [edx+4] +
cmp dword ptr [eax+4] 5 +
setnz al  +
test al al +
jz loc_461BD4  +
or byte ptr [ebx+33h] 2 +
jmp loc_461BD4  +
mov [esp-4+arg_0] 0A4Bh +
mov dword ptr [esp+0] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_461CD7  +
mov edx 1 +
jmp loc_461C4A  +
mov edx [ebp+0] +
mov eax [edi+0DCh] +
mov [esp+28h+var_20] 1 +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] edx +
call eax  +
jmp loc_461C2A  +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
jz loc_461C2A  +
and edx 2 +
jz loc_461C1C  +
movzx eax al +
mov edx [edi+0DCh] +
sub eax 1 +
cmp eax 1 +
setbe al  +
movzx eax al +
mov [esp+28h+var_20] eax +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] ecx +
call edx  +
jmp loc_461C15  +
xor edx edx +
cmp ecx offset off_4BFB90 +
jz loc_461E98  +
mov eax edx +
jmp loc_461DF7  +
shr al 3 +
mov edx eax +
xor edx 1 +
and edx 1 +
mov eax edx +
jmp loc_461DF7  +
***
sub esp 14h +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
lea edx [esp+3Ch+var_14] +
mov ebx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_10] 0 +
mov esi [eax] +
mov eax ebx +
mov [esp+3Ch+var_14] esi +
call sub_461BB0  +
test eax eax +
jnz loc_461FF7  +
mov ecx [esp+3Ch+var_10] +
test ecx ecx +
jz loc_461FEF  +
mov ecx [esp+3Ch+arg_4] +
mov dword ptr [ecx+4] 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test byte ptr [ebx+33h] 2 +
jz loc_46202F  +
mov ebp [esi+30h] +
mov edi [ebx+4] +
mov eax [ebp+4] +
mov eax [eax+1B0h] +
mov [esp+3Ch+var_38] 40h +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_28] eax +
call strchr  +
test eax eax +
jz loc_462135  +
mov edx [ebx+40h] +
test edx edx +
jz loc_462040  +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx edx byte ptr [eax+1] +
cmp dl 40h +
jz loc_4621E8  +
add eax 1 +
mov [esp+3Ch+var_24] eax +
test dl dl +
jz loc_46202F  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax] +
mov edx [eax+7Ch] +
test edx edx +
jz loc_4621A7  +
mov [esp+3Ch+var_20] ebp +
mov ebp [esp+3Ch+var_24] +
mov [esp+3Ch+arg_0] ebx +
mov ebx edx +
jmp loc_46208A  +
mov ebx [ebx] +
test ebx ebx +
jz loc_46219F  +
mov [esp+3Ch+var_38] ebp +
mov eax [ebx+4] +
mov [esp+3Ch+var_3C] eax +
call strcmp  +
test eax eax +
jnz loc_462080  +
mov ebp [esp+3Ch+var_24] +
mov [esp+3Ch+var_20] ebx +
mov ebx [esp+3Ch+arg_0] +
sub ebp edi +
mov [esp+3Ch+var_3C] ebp +
call sub_459B80  +
mov edx [esp+3Ch+var_20] +
test eax eax +
mov edi eax +
jz loc_4621D6  +
mov ecx [ebx+4] +
lea eax [ebp-1] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_24] edx +
mov [esp+3Ch+var_38] ecx +
call memcpy  +
lea eax [edi+ebp-2] +
mov edx [esp+3Ch+var_24] +
mov byte ptr [edi+ebp-1] 0 +
cmp byte ptr [eax] 40h +
jz loc_462256  +
mov [ebx+40h] edx +
mov ebp [edx+0Ch] +
mov dword ptr [edx+34h] 1 +
test ebp ebp +
jz loc_4621F8  +
mov eax [edx+38h] +
lea ecx [edx+0Ch] +
mov [esp+3Ch+var_24] edx +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] ecx +
call eax  +
mov edx [esp+3Ch+var_24] +
test eax eax +
jz loc_4621F8  +
mov [esp+3Ch+var_3C] edi +
call free  +
mov edx [ebx+40h] +
test edx edx +
jnz loc_46202F  +
mov eax [esp+3Ch+arg_4] +
mov eax [eax] +
mov eax [eax+7Ch] +
test eax eax +
jz loc_46202F  +
mov edx [ebx+4] +
lea ecx [esp+3Ch+var_18] +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] edx +
call sub_452F10  +
test eax eax +
mov [ebx+40h] eax +
jz loc_46202F  +
mov eax [esp+3Ch+var_18] +
test eax eax +
jz loc_46202F  +
mov eax [esp+3Ch+var_28] +
mov eax [eax+0DCh] +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] esi +
call eax  +
jmp loc_46202F  +
mov ebp [esp+3Ch+var_20] +
mov ebx [esp+3Ch+arg_0] +
movzx eax byte ptr [esi] +
and eax 3 +
cmp al 1 +
jbe loc_46225E  +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] offset aBVersionNodeNo +
call off_4BFA04  +
mov [esp+3Ch+var_3C] 11h +
call sub_44BAF0  +
mov eax [esp+3Ch+arg_4] +
mov dword ptr [eax+4] 1 +
xor eax eax +
jmp loc_461FEF  +
lea ecx [eax+2] +
movzx edx byte ptr [eax+2] +
mov [esp+3Ch+var_24] ecx +
jmp loc_462054  +
mov ecx [edx+1Ch] +
test ecx ecx +
jz loc_46212D  +
mov eax [edx+38h] +
add edx 1Ch +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] 0 +
mov [esp+3Ch+var_3C] edx +
call eax  +
test eax eax +
jz loc_46212D  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_46212D  +
test byte ptr [esi] 10h +
nop   +
jnz loc_46212D  +
mov eax [esp+3Ch+var_28] +
mov eax [eax+0DCh] +
mov [esp+3Ch+var_34] 1 +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] esi +
call eax  +
jmp loc_46212D  +
mov byte ptr [eax] 0 +
jmp loc_4620F1  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_46202F  +
mov [esp+3Ch+var_38] 3Ch +
mov [esp+3Ch+var_3C] ebp +
call sub_458B60  +
test eax eax +
jz loc_4621D6  +
mov ecx [esp+3Ch+var_24] +
mov dword ptr [eax+30h] 0FFFFFFFFh +
mov dword ptr [eax+34h] 1 +
mov [eax+4] ecx +
mov ecx [esp+3Ch+arg_4] +
mov edx [ecx] +
mov ecx [edx+7Ch] +
test ecx ecx +
jz loc_4622D2  +
cmp dword ptr [ecx+8] 0 +
setnz cl  +
movzx ecx cl +
mov esi [edx+7Ch] +
add edx 7Ch +
test esi esi +
jnz loc_4622BA  +
jmp loc_4622C5  +
mov esi edx +
mov edx [esi] +
add ecx 1 +
test edx edx +
jnz loc_4622B8  +
mov edx esi +
mov [eax+8] ecx +
mov [edx] eax +
mov [ebx+40h] eax +
jmp loc_46202F  +
mov ecx 1 +
jmp loc_4622AC  +
***
mov ebx [esp+18h+arg_0] +
cmp byte ptr [ebx+0Ch] 6 +
jz loc_462305  +
mov eax [esp+18h+arg_4] +
mov eax [eax] +
test byte ptr [eax] 10h +
jnz loc_4622FF  +
test byte ptr [ebx+34h] 10h +
jz loc_462305  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_462310  +
mov eax 1 +
add esp 18h +
pop ebx  +
retn   +
test byte ptr [ebx+33h] 3 +
jz loc_462305  +
mov edx [ebx+4] +
mov eax [eax+7Ch] +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call sub_4530E0  +
test eax eax +
jnz loc_462305  +
mov eax [esp+18h+arg_4] +
mov eax [eax] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
call sub_460C40  +
mov edx eax +
mov eax 1 +
test edx edx +
jnz loc_46230A  +
mov eax [esp+18h+arg_4] +
mov dword ptr [eax+4] 1 +
xor eax eax +
jmp loc_46230A  +
***
push ebx  +
sub esp 20h +
mov ebx [esp+20h+arg_4] +
mov edi [ebx+1Ch] +
cmp dword ptr [edi+28h] 1 +
jz loc_462380  +
mov eax 1 +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [esp+20h+arg_C] +
xor eax eax +
mov [esp+20h+var_10] 0 +
mov [esp+20h+var_14] 1 +
mov [esp+20h+var_20] edi +
test edx edx +
setz al  +
mov [esp+20h+var_18] eax +
mov eax [esp+20h+arg_8] +
mov [esp+20h+var_1C] eax +
call sub_4500A0  +
test eax eax +
mov esi eax +
jz loc_462565  +
cmp byte ptr [eax+0Ch] 7 +
ja loc_4623E7  +
movzx eax byte ptr [eax+0Ch] +
jmp ds:off_4FF714[eax*4]  +
mov eax [esi+10h] +
mov byte ptr [esi+0Ch] 0 +
test eax eax +
jz loc_462589  +
mov [esp+20h+var_20] edi +
call sub_4508F0  +
movzx eax byte ptr [esi+33h] +
mov ecx [esp+20h+arg_C] +
and eax 0Ah +
test ecx ecx +
jz loc_4624E0  +
cmp al 8 +
jz loc_462580  +
or byte ptr [esi+33h] 2 +
mov edx [esp+20h+arg_10] +
test edx edx +
jz loc_462449  +
mov eax [esp+20h+arg_0] +
mov eax [eax+4] +
mov edx [eax+1B0h] +
movzx eax byte ptr [esi+31h] +
mov ecx eax +
and ecx 3 +
cmp cl 1 +
jz loc_462432  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [esi+31h] al +
mov eax [edx+0DCh] +
mov [esp+20h+var_18] 1 +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call eax  +
movzx eax byte ptr [ebx] +
and eax 3 +
cmp al 2 +
jz loc_46246C  +
cmp dword ptr [esi+20h] 0FFFFFFFFh +
jz loc_46246C  +
movzx eax byte ptr [esi+31h] +
and eax 3 +
sub eax 1 +
cmp eax 1 +
jbe loc_462570  +
test byte ptr [esi+33h] 0Ch +
jnz loc_462490  +
movzx eax byte ptr [ebx] +
test al 1 +
jnz loc_462490  +
test al 3 +
jnz loc_462373  +
mov eax [ebx+1Ch] +
mov eax [eax+34h] +
test eax eax +
jz loc_462373  +
nop   +
cmp dword ptr [esi+20h] 0FFFFFFFFh +
jnz loc_462373  +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call sub_460C40  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_462378  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_462373  +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
jnz loc_462373  +
mov [esp+20h+var_1C] eax +
mov [esp+20h+var_20] ebx +
call sub_460C40  +
test eax eax +
setnz al  +
movzx eax al +
jmp loc_462378  +
cmp al 8 +
jnz loc_462402  +
mov dword ptr [esi+40h] 0 +
jmp loc_462402  +
mov eax [esp+20h+arg_0] +
mov eax [eax+4] +
mov ecx [eax+1B0h] +
mov eax esi +
mov eax [eax+14h] +
movzx edx byte ptr [eax+0Ch] +
sub edx 6 +
cmp dl 1 +
jbe loc_462503  +
mov byte ptr [esi+0Ch] 1 +
mov [eax+14h] esi +
mov edx [ecx+0D8h] +
mov byte ptr [eax+0Ch] 6 +
mov [esp+20h+var_18] eax +
mov [esp+20h+var_1C] esi +
mov [esp+20h+var_20] ebx +
call edx  +
jmp loc_4623E7  +
mov [esp+20h+var_18] offset aBfd_elf_record +
mov [esp+20h+var_1C] 251h +
mov [esp+20h+var_20] offset a____Binutil_12 +
call sub_44BA70  +
xor ecx ecx +
mov edx esi +
mov eax ebx +
call sub_45C090  +
and byte ptr [esi+34h] 0FEh +
jmp loc_4623E7  +
mov eax [esp+20h+arg_C] +
jmp loc_462378  +
or byte ptr [esi+34h] 8 +
jmp loc_46246C  +
mov byte ptr [esi+0Ch] 1 +
jmp loc_462402  +
cmp [edi+20h] esi +
jnz loc_4623E7  +
jmp loc_4623DF  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov edi [esp+70h] +
mov ebx [esp+74h] +
mov esi [esp+78h] +
mov eax [edi+1Ch] +
cmp dword ptr [eax+28h] 1 +
jz loc_4625C6  +
xor eax eax +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [eax+0C0h] +
test eax eax +
jnz loc_4625D8  +
jmp loc_4625F0  +
mov eax [eax] +
test eax eax +
jz loc_4625F0  +
cmp [eax+4] ebx +
jnz loc_4625D2  +
cmp [eax+8] esi +
jnz loc_4625D2  +
mov eax 1 +
jmp loc_4625BE  +
***
mov dword ptr [esp+4] 24h +
mov [esp] ebx +
call sub_458A80  +
test eax eax +
mov ebp eax +
jz loc_4625BC  +
lea eax [esp+34h] +
mov [esp+18h] eax +
lea eax [esp+38h] +
mov [esp+14h] eax +
lea eax [ebp+10h] +
mov [esp+10h] eax +
mov [esp+0Ch] esi +
mov dword ptr [esp+8] 1 +
mov eax [ebx+0A0h] +
mov [esp] ebx +
add eax 48h +
mov [esp+4] eax +
call sub_475A20  +
test eax eax +
jz loc_462726  +
mov eax [ebp+20h] +
lea edx [eax-1] +
cmp edx 0FFFFFEFEh +
ja loc_462675  +
mov [esp+4] eax +
mov [esp] ebx +
call sub_478480  +
test eax eax +
jz loc_462710  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_462710  +
mov eax [ebx+0A0h] +
mov edx [ebp+18h] +
mov eax [eax+64h] +
mov [esp+8] edx +
mov [esp] ebx +
mov [esp+4] eax +
call sub_475820  +
mov edx [edi+1Ch] +
mov ecx eax +
mov eax [edx+50h] +
test eax eax +
jz loc_4626EA  +
mov dword ptr [esp+8] 0 +
mov [esp+4] ecx +
mov [esp] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jz loc_4625BC  +
mov [ebp+18h] eax +
mov eax [edi+1Ch] +
mov edx [eax+0C0h] +
mov [ebp+0] edx +
mov [eax+0C0h] ebp +
mov [ebp+4] ebx +
mov [ebp+8] esi +
add dword ptr [eax+4Ch] 1 +
mov eax 1 +
and byte ptr [ebp+1Ch] 0Fh +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+2Ch] edx +
mov [esp+28h] ecx +
call sub_488500  +
mov edx [esp+2Ch] +
mov ecx [esp+28h] +
test eax eax +
mov [edx+50h] eax +
jnz loc_46269D  +
jmp loc_4625BC  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_458CD0  +
mov eax 2 +
jmp loc_4625BE  +
***
mov [esp+4] ebp +
mov [esp] ebx +
call sub_458CD0  +
jmp loc_4625BC  +
***
mov eax [esp+4] +
mov edx [esp+8] +
mov ecx [esp+0Ch] +
mov eax [eax+1Ch] +
mov eax [eax+0C0h] +
test eax eax +
jnz loc_462766  +
jmp loc_462774  +
mov eax [eax] +
test eax eax +
jz loc_462774  +
cmp [eax+4] edx +
jnz loc_462760  +
cmp [eax+8] ecx +
jnz loc_462760  +
mov eax [eax+0Ch] +
retn   +
***
mov eax 0FFFFFFFFh +
retn   +
***
mov ebx [esp+18h+arg_8] +
mov eax [ebx+8Ch] +
mov ecx [eax+4] +
mov eax 1 +
cmp ecx 8 +
ja loc_4627D0  +
mov edx eax +
shl edx cl +
mov ecx edx +
and ecx 103h +
jz loc_4627D0  +
mov eax [esp+18h+arg_4] +
mov eax [eax+1Ch] +
cmp ebx [eax+0C8h] +
jz loc_4627D5  +
mov edx [eax+68h] +
test edx edx +
jz loc_4627E0  +
cmp ebx edx +
jz loc_4627D5  +
cmp ebx [eax+6Ch] +
setnz al  +
movzx eax al +
lea esi [esi+0] +
add esp 18h +
pop ebx  +
retn   +
xor eax eax +
jmp loc_4627D0  +
mov eax [eax+38h] +
test eax eax +
jz loc_4627D5  +
mov edx [ebx] +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] edx +
call sub_44D590  +
test eax eax +
jz loc_4627D5  +
cmp ebx [eax+3Ch] +
setz al  +
movzx eax al +
jmp loc_4627D0  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_0] +
mov eax [edi+4] +
mov ebp [eax+1B0h] +
mov eax [esp+2Ch+arg_4] +
mov esi [eax+8Ch] +
mov ebx [esi+68h] +
test ebx ebx +
jz loc_462840  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [eax+4Ch] +
test eax eax +
jz loc_462835  +
mov ecx [esp+2Ch+arg_C] +
mov [esp+2Ch+var_18] 0 +
test ecx ecx +
jz loc_4629C2  +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_14] 0 +
test eax eax +
jz loc_462A02  +
mov ecx [esi+3Ch] +
test ecx ecx +
jz loc_4628E1  +
mov eax [ecx+10h] +
mov edx [ecx+14h] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_10] ecx +
call sub_46FCE0  +
mov ecx [esp+2Ch+var_10] +
test eax eax +
jz loc_462967  +
mov eax [esp+2Ch+var_14] +
test eax eax +
jz loc_4628B4  +
mov [esp+2Ch+var_2C] eax +
call free  +
mov ecx [esp+2Ch+var_18] +
test ecx ecx +
jz loc_462835  +
mov edx [esp+2Ch+arg_10] +
mov eax [esp+2Ch+var_18] +
test edx edx +
jz loc_462955  +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edi +
call sub_458CD0  +
jmp loc_462835  +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_10] eax +
mov ebp [esi+4Ch] +
test ebp ebp +
jz loc_462936  +
mov eax [ebp+10h] +
mov edx [ebp+14h] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_24] edx +
call sub_46FCE0  +
test eax eax +
jnz loc_4628A4  +
mov eax [esp+2Ch+var_10] +
mov ecx ebp +
mov edx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_2C] eax +
mov eax edi +
call sub_45D610  +
test eax eax +
jz loc_4628A4  +
mov ebx [esp+2Ch+arg_10] +
test ebx ebx +
jz loc_462945  +
mov eax [esp+2Ch+arg_C] +
mov [esi+68h] eax +
mov eax [esp+2Ch+var_14] +
mov ebx [esp+2Ch+arg_C] +
test eax eax +
jz loc_462835  +
mov [esp+2Ch+var_2C] eax +
call free  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+arg_C] +
mov edx [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_2C] eax +
mov eax edi +
call sub_45D610  +
test eax eax +
jz loc_4628A4  +
mov eax [esi+3Ch] +
mov ecx [eax+28h] +
mov edx [eax+18h] +
xor eax eax +
add [esp+2Ch+arg_8] edx +
test ecx ecx +
jz loc_4629A2  +
mov eax edx +
xor edx edx +
div  ecx +
mov edx [ebp+174h] +
movzx edx byte ptr [edx+9] +
lea ebp [edx+edx*2] +
shl ebp 2 +
imul ebp eax +
add ebp [esp+2Ch+arg_C] +
mov [esp+2Ch+var_10] ebp +
jmp loc_4628E9  +
mov edx [ebp+174h] +
lea eax [eax+eax*2] +
shl eax 2 +
movzx edx byte ptr [edx+9] +
imul eax edx +
mov edx [esp+2Ch+arg_10] +
test edx edx +
jz loc_462A2F  +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edi +
call sub_458A80  +
mov [esp+2Ch+arg_C] eax +
mov eax [esp+2Ch+arg_C] +
test eax eax +
jz loc_462A45  +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_18] eax +
jmp loc_46285B  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_462A52  +
mov eax [eax+18h] +
mov edx [esi+4Ch] +
test edx edx +
jz loc_462A16  +
add eax [edx+18h] +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
test eax eax +
mov [esp+2Ch+arg_8] eax +
jz loc_462A3D  +
mov [esp+2Ch+var_14] eax +
jmp loc_46286F  +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
mov [esp+2Ch+arg_C] eax +
jmp loc_4629ED  +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+arg_C] eax +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_18] eax +
jmp loc_4628B4  +
xor eax eax +
jmp loc_462A0C  +
***
push ebx  +
mov ebx eax +
sub esp 20h +
mov esi [esp+20h+arg_0] +
mov eax [esi+4Ch] +
test eax eax +
jnz loc_462A91  +
mov dword ptr [ebx] 0 +
xor eax eax +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
mov eax 1 +
add esp 20h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [ecx+4] +
mov edi [eax+1B0h] +
movzx eax byte ptr [edx+2] +
mov [esp+20h+var_14] 0 +
mov [esp+20h+var_18] 0 +
mov [esp+20h+var_1C] esi +
shr al 6 +
and eax 1 +
mov [esp+20h+var_10] eax +
mov [esp+20h+var_20] ecx +
call sub_462810  +
test eax eax +
mov [ebx] eax +
jz loc_462AF0  +
mov ecx [edi+174h] +
mov edx [esi+4Ch] +
mov [ebx+4] eax +
movzx ecx byte ptr [ecx+9] +
lea edx [edx+edx*2] +
shl edx 2 +
imul edx ecx +
add edx eax +
mov [ebx+8] edx +
jmp loc_462A82  +
xor eax eax +
jmp loc_462A8A  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx ecx +
sub esp 10h +
mov ecx [ecx+94h] +
call sub_45C4A0  +
test eax eax +
jnz loc_462B24  +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ecx [ebx+94h] +
mov edx edi +
mov eax esi +
mov [esp+18h+var_18] ebx +
call sub_462A60  +
mov edx eax +
mov eax 1 +
test edx edx +
jnz loc_462B1D  +
mov eax [esi+0Ch] +
mov edx [ebx+94h] +
test eax eax +
mov edx [edx+0A0h] +
jz loc_462B1B  +
cmp eax [edx+78h] +
jz loc_462B1B  +
mov [esp+18h+var_18] eax +
call free  +
jmp loc_462B1B  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_0] +
mov eax [esi+44h] +
test eax eax +
jz loc_462C57  +
mov ebx [eax+8] +
test ebx ebx +
jz loc_462C57  +
movzx eax byte ptr [esi+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_462BB0  +
mov [esp+2Ch+var_28] 3125h +
mov [esp+2Ch+var_2C] offset a____Binutil_12 +
call sub_44BA40  +
mov ebx [esi+18h] +
mov eax [esi+2Ch] +
mov edi [esi+14h] +
add eax ebx +
mov [esp+2Ch+var_14] eax +
mov eax [edi+94h] +
mov [esp+2Ch+var_1C] 1 +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_2C] eax +
call sub_462810  +
test eax eax +
jz loc_462C82  +
mov edx [edi+94h] +
mov edx [edx+4] +
mov edx [edx+1B0h] +
mov ecx [edx+174h] +
movzx edx byte ptr [ecx+0Bh] +
movzx ecx byte ptr [ecx+9] +
mov [esp+2Ch+var_D] dl +
mov edx [edi+4Ch] +
lea edx [edx+edx*2] +
shl edx 2 +
imul edx ecx +
add edx eax +
cmp eax edx +
jnb loc_462C57  +
mov ebp [eax] +
cmp ebx ebp +
ja loc_462C50  +
cmp [esp+2Ch+var_14] ebp +
jbe loc_462C50  +
mov ecx [esi+44h] +
mov edi [ecx+4] +
test edi edi +
jz loc_462C64  +
sub ebp ebx +
cmp ebp [ecx] +
jnb loc_462C64  +
movzx ecx [esp+2Ch+var_D] +
shr ebp cl +
mov ecx [edi+ebp*4] +
test ecx ecx +
jz loc_462C64  +
nop   +
add eax 0Ch +
cmp edx eax +
ja loc_462C24  +
mov eax 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [eax+8] 0 +
add eax 0Ch +
mov dword ptr [eax-8] 0 +
mov dword ptr [eax-0Ch] 0 +
cmp edx eax +
ja loc_462C24  +
jmp loc_462C57  +
mov eax [esp+2Ch+arg_4] +
mov dword ptr [eax] 0 +
xor eax eax +
jmp loc_462C5C  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebp [esp+50h] +
mov ecx [esp+54h] +
mov eax [ebp+4] +
mov esi [eax+1B0h] +
mov eax [ecx+3Ch] +
mov edx [eax+8Ch] +
mov eax [edx+3Ch] +
test eax eax +
jz loc_462CC8  +
mov ebx [esp+58h] +
mov edi [eax+28h] +
cmp edi [ebx+28h] +
jz loc_462DE8  +
mov eax [edx+4Ch] +
test eax eax +
jz loc_462CDB  +
mov ebx [esp+58h] +
mov edi [eax+28h] +
cmp edi [ebx+28h] +
jz loc_462D10  +
mov eax [ecx+94h] +
mov [esp+0Ch] ecx +
mov [esp+4] ebp +
mov dword ptr [esp] offset aBRelocationSiz +
mov [esp+8] eax +
call off_4BFA04  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea ecx [edx+4Ch] +
mov edx [esi+174h] +
mov [esp+24h] ecx +
mov ecx [edx+44h] +
mov [esp+1Ch] ecx +
mov ecx edi +
mov eax [eax+30h] +
mov [esp+2Ch] eax +
mov eax [esp+24h] +
mov eax [eax+4] +
mov ebx eax +
xor eax eax +
test ecx ecx +
jz loc_462DD2  +
movzx eax byte ptr [edx+9] +
xor edx edx +
lea edi [eax+eax*2] +
mov eax [esp+58h] +
shl edi 2 +
mov eax [eax+18h] +
mov [esp+28h] eax +
div  ecx +
imul edi eax +
add edi [esp+5Ch] +
cmp [esp+5Ch] edi +
mov [esp+20h] edi +
jnb loc_462DCA  +
mov eax ebx +
mov edi [esp+2Ch] +
imul eax ecx +
mov ebx [esp+5Ch] +
add edi eax +
mov eax edi +
mov edi esi +
mov esi eax +
nop   +
mov eax [esp+1Ch] +
mov [esp+8] esi +
mov [esp+4] ebx +
mov [esp] ebp +
call eax  +
mov edx [edi+174h] +
mov eax [esp+58h] +
movzx edx byte ptr [edx+9] +
lea edx [edx+edx*2] +
lea ebx [ebx+edx*4] +
mov edx [eax+28h] +
add esi edx +
cmp [esp+20h] ebx +
ja loc_462D80  +
mov eax [esp+24h] +
test edx edx +
mov eax [eax+4] +
mov ebx eax +
jz loc_462E03  +
mov eax [esp+58h] +
mov ecx edx +
mov eax [eax+18h] +
mov [esp+28h] eax +
mov eax [esp+28h] +
xor edx edx +
div  ecx +
mov ecx [esp+24h] +
add eax ebx +
mov [ecx+4] eax +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea ecx [edx+3Ch] +
mov edx [esi+174h] +
mov [esp+24h] ecx +
mov ecx [edx+3Ch] +
mov [esp+1Ch] ecx +
mov ecx edi +
jmp loc_462D26  +
***
xor eax eax +
jmp loc_462DD2  +
***
mov edx [esp+4] +
mov ecx [esp+8] +
movzx eax byte ptr [edx] +
and eax 3 +
cmp al 1 +
jz loc_462E28  +
mov eax 1 +
retn   +
***
cmp dword ptr [ecx+20h] 0FFFFFFFFh +
jnz loc_462E22  +
cmp byte ptr [ecx+0Ch] 2 +
jnz loc_462E22  +
jmp sub_460C40  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+24h] +
mov esi [esp+28h] +
mov eax [ebx+14h] +
mov edx [ebx+18h] +
mov ecx [eax+40h] +
mov eax 1 +
shl eax cl +
sub eax 1 +
test edx eax +
jz loc_462E6D  +
shr eax 1 +
sub ecx 1 +
test eax edx +
jnz loc_462E64  +
cmp [esi+40h] ecx +
jnb loc_462E75  +
mov [esi+40h] ecx +
mov ecx eax +
mov edx 0FFFFFFFFh +
add ecx [esi+24h] +
jb loc_462E87  +
not eax  +
mov edx eax +
and edx ecx +
mov [ebx+18h] edx +
add edx [ebx+2Ch] +
test byte ptr [ebx+35h] 8 +
mov [ebx+14h] esi +
mov [esi+24h] edx +
jz loc_462EA6  +
mov eax [esp+20h] +
mov eax [eax+58h] +
test eax eax +
jz loc_462EC9  +
js loc_462EB1  +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esi+94h] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
cmp byte ptr [eax+1AEh] 0 +
js loc_462EA6  +
mov eax [esp+20h] +
mov edx [ebx+4] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+4] edx +
mov dword ptr [esp] offset aPCopyRelocAgai +
call eax  +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
test ebx ebx +
jnz loc_462F05  +
jmp loc_462FA6  +
mov ebx [ebx+14h] +
movzx eax byte ptr [ebx+0Ch] +
sub eax 6 +
cmp al 1 +
jbe loc_462F02  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_462FA6  +
movzx edx byte ptr [ebx+34h] +
xor eax eax +
test dl 8 +
jnz loc_462FA0  +
mov eax [esp+24h] +
mov esi 1 +
movzx eax byte ptr [eax] +
mov ecx eax +
and ecx 3 +
cmp cl 1 +
jbe loc_462F44  +
xor si si +
test byte ptr [ebx+35h] 4 +
jz loc_462FB0  +
movzx edx byte ptr [ebx+31h] +
and edx 3 +
jz loc_462F80  +
xor eax eax +
cmp dl 2 +
jbe loc_462FA0  +
cmp dl 3 +
jnz loc_462F80  +
mov ecx [esp+24h] +
mov edx [ecx+1Ch] +
cmp dword ptr [edx+28h] 1 +
jnz loc_462FA0  +
mov eax [edx+38h] +
mov edx [esp+28h] +
mov eax [eax+4] +
test edx edx +
mov eax [eax+1B0h] +
jnz loc_462FEE  +
mov esi 1 +
nop   +
movzx edx byte ptr [ebx+33h] +
test dl 2 +
jnz loc_462FE0  +
and edx 0Ah +
mov eax 1 +
jnz loc_462FA0  +
cmp byte ptr [ebx+0Ch] 3 +
jz loc_462FE0  +
lea esi [esi+0] +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
test al 4 +
mov si 1 +
jnz loc_462F44  +
mov eax [esp+24h] +
xor si si +
test byte ptr [eax+5] 1 +
jz loc_462F44  +
shr dl 4 +
xor edx 1 +
mov esi edx +
and esi 1 +
jmp loc_462F44  +
***
mov eax esi +
add esp 14h +
xor eax 1 +
and eax 1 +
pop ebx  +
pop esi  +
retn   +
***
movzx edx byte ptr [ebx+30h] +
mov eax [eax+158h] +
mov [esp] edx +
call eax  +
test eax eax +
mov eax 1 +
cmovz esi eax +
jmp loc_462F80  +
***
push ebx  +
sub esp 10h +
mov edx [esp+10h+arg_0] +
test edx edx +
jz loc_463090  +
movzx ecx byte ptr [edx+31h] +
and ecx 3 +
movzx eax cl +
sub eax 1 +
cmp eax 1 +
jbe loc_463090  +
movzx ebx byte ptr [edx+33h] +
test bl 0Ah +
jnz loc_46303F  +
cmp byte ptr [edx+0Ch] 3 +
jz loc_463046  +
xor eax eax +
and ebx 2 +
jz loc_463095  +
movzx eax byte ptr [edx+34h] +
test al 8 +
jnz loc_463090  +
cmp dword ptr [edx+20h] 0FFFFFFFFh +
jz loc_463090  +
mov esi [esp+10h+arg_4] +
movzx edi byte ptr [esi] +
mov esi edi +
and esi 3 +
mov ebx esi +
cmp bl 1 +
jbe loc_463090  +
test byte ptr [edx+35h] 4 +
jnz loc_46307C  +
and edi 4 +
jnz loc_463090  +
mov esi [esp+10h+arg_4] +
test byte ptr [esi+5] 1 +
jnz loc_4630E0  +
xor eax eax +
test cl cl +
jz loc_463095  +
mov eax [esp+10h+arg_4] +
mov eax [eax+1Ch] +
cmp dword ptr [eax+28h] 1 +
jz loc_4630A0  +
nop   +
mov eax 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax+38h] +
mov eax [eax+4] +
mov ecx [eax+1B0h] +
mov eax [esp+10h+arg_4] +
mov eax [eax+58h] +
test eax eax +
jz loc_4630C6  +
mov eax [esp+10h+arg_8] +
jns loc_463095  +
cmp byte ptr [ecx+1AEh] 0 +
js loc_463095  +
movzx edx byte ptr [edx+30h] +
mov eax [ecx+158h] +
mov [esp+10h+var_10] edx +
call eax  +
test eax eax +
jz loc_463090  +
mov eax [esp+10h+arg_8] +
jmp loc_463095  +
test al 10h +
jnz loc_46307C  +
jmp loc_463090  +
***
mov eax [esp+arg_0] +
mov esi [esp+arg_4] +
mov eax [eax+64h] +
test eax eax +
jnz loc_46310A  +
jmp loc_463140  +
mov eax [eax+0Ch] +
test eax eax +
jz loc_463140  +
test byte ptr [eax+15h] 4 +
nop   +
jz loc_463103  +
mov edx eax +
xor ecx ecx +
jmp loc_46311E  +
test byte ptr [edx+15h] 4 +
jz loc_46312D  +
mov ebx [edx+40h] +
mov edx [edx+0Ch] +
cmp ecx ebx +
cmovb ecx ebx +
test edx edx +
jnz loc_463118  +
mov edx [esi+1Ch] +
mov [edx+0C8h] eax +
mov [eax+40h] ecx +
pop ebx  +
pop esi  +
retn   +
mov eax [esi+1Ch] +
mov dword ptr [eax+0C8h] 0 +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov ebx [eax+1Ch] +
cmp dword ptr [ebx+28h] 1 +
jz loc_463180  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+38h] +
mov edx [eax+4] +
mov ebp [edx+1B0h] +
mov [esp+2Ch+var_28] offset a_dynamic +
mov [esp+2Ch+var_2C] eax +
call sub_44D590  +
test eax eax +
mov esi eax +
jz loc_463210  +
mov eax [ebp+174h] +
movzx edi byte ptr [eax+6] +
mov eax [esi+6Ch] +
add edi [esi+24h] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] edi +
call sub_459C10  +
test eax eax +
jz loc_463174  +
mov edx [esp+2Ch+arg_4] +
mov ecx [ebx+38h] +
mov ebx eax +
add ebx [esi+24h] +
mov [esp+2Ch+var_20] eax +
mov [esp+2Ch+var_14] edx +
mov edx [esp+2Ch+arg_8] +
mov [esp+2Ch+var_10] edx +
mov edx [ebp+174h] +
mov edx [edx+34h] +
mov [esp+2Ch+var_24] ebx +
lea ebx [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] ecx +
call edx  +
mov eax [esp+2Ch+var_20] +
mov [esi+24h] edi +
mov [esi+6Ch] eax +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_28] 0C51h +
mov [esp+2Ch+var_2C] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_4631A2  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [edx+1Ch] +
mov [esp+3Ch+var_20] edx +
mov esi [ebx+38h] +
test esi esi +
jz loc_4633A0  +
mov edx [ebx+50h] +
test edx edx +
jz loc_4633B0  +
mov eax [esp+3Ch+var_20] +
mov ebp [eax+1Ch] +
mov eax [ebp+50h] +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_3C] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
mov [esp+3Ch+var_24] eax +
jz loc_4633C8  +
mov eax [ebp+50h] +
mov edi [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] edi +
call sub_4887A0  +
cmp eax 1 +
jz loc_463332  +
mov eax [ebp+38h] +
mov edx [eax+4] +
mov esi [edx+1B0h] +
mov [esp+3Ch+var_38] offset a_dynamic +
mov [esp+3Ch+var_3C] eax +
call sub_44D590  +
test eax eax +
jz loc_463332  +
mov ebx [eax+6Ch] +
mov edx [eax+24h] +
add edx ebx +
cmp ebx edx +
jnb loc_463332  +
mov edi ebp +
mov ecx [esi+174h] +
mov ebp eax +
jmp loc_4632E9  +
mov ecx [esi+174h] +
movzx eax byte ptr [ecx+6] +
add ebx eax +
mov eax [ebp+6Ch] +
add eax [ebp+24h] +
cmp ebx eax +
jnb loc_463330  +
mov eax [ecx+30h] +
lea edx [esp+3Ch+var_14] +
mov ecx [edi+38h] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] ecx +
call eax  +
cmp [esp+3Ch+var_14] 1 +
jnz loc_4632D3  +
mov eax [esp+3Ch+var_24] +
cmp [esp+3Ch+var_10] eax +
jnz loc_4632D3  +
mov eax [edi+50h] +
mov edi [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] edi +
call sub_488700  +
mov eax 1 +
jmp loc_463395  +
mov ebp edi +
mov eax [esp+3Ch+arg_0] +
test eax eax +
jz loc_463380  +
mov eax [ebp+38h] +
mov edi [esp+3Ch+var_20] +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] edi +
call sub_460820  +
test eax eax +
jz loc_4633C8  +
mov eax [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_34] eax +
call sub_463160  +
test eax eax +
setz al  +
add esp 3Ch +
movzx eax al +
pop ebx  +
neg eax  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+50h] +
mov esi [esp+3Ch+var_24] +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] esi +
call sub_488700  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+50h] +
mov [ebx+38h] eax +
test edx edx +
jnz loc_463254  +
nop   +
mov [esp+3Ch+var_24] ecx +
call sub_488500  +
mov ecx [esp+3Ch+var_24] +
test eax eax +
mov [ebx+50h] eax +
jnz loc_463254  +
mov eax 0FFFFFFFFh +
jmp loc_463395  +
***
mov eax [esp+8] +
cmp [esp+4] eax +
setz al  +
movzx eax al +
retn   +
***
push ebx  +
mov edx [esp+8] +
mov eax [esp+0Ch] +
cmp edx eax +
jz loc_463411  +
mov ecx [edx+1B0h] +
mov edx [eax+1B0h] +
xor eax eax +
mov ebx [edx] +
cmp [ecx] ebx +
jz loc_463403  +
pop ebx  +
retn   +
***
mov eax [edx+74h] +
cmp [ecx+74h] eax +
pop ebx  +
setz al  +
movzx eax al +
retn   +
***
mov eax 1 +
pop ebx  +
retn   +
***
sub esp 2Ch +
mov eax [esp+34h] +
mov ecx [esp+38h] +
mov edx [eax+18h] +
mov edx [edx+28h] +
mov [esp+14h] ecx +
mov ecx [esp+30h] +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+0Ch] ecx +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call edx  +
add esp 2Ch +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+44h] +
mov esi [esp+48h] +
mov dword ptr [esp+10h] 1 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+4] esi +
mov eax [edi+1Ch] +
mov [esp] eax +
call sub_4500A0  +
test eax eax +
mov ebx eax +
jz loc_4634B6  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+4] 40h +
mov [esp] esi +
call strchr  +
test eax eax +
jz loc_4634AC  +
cmp byte ptr [eax+1] 40h +
jnz loc_4634AC  +
mov [esp] esi +
mov ebx 0FFFFFFB8h +
mov [esp+1Ch] eax +
call strlen  +
mov ecx [esp+40h] +
mov [esp] ecx +
mov [esp+4] eax +
mov [esp+18h] eax +
call sub_458A80  +
test eax eax +
mov ebp eax +
jz loc_4634AC  +
mov ecx [esp+1Ch] +
mov [esp+4] esi +
mov [esp] eax +
sub ecx esi +
lea ebx [ecx+1] +
mov [esp+8] ebx +
mov [esp+1Ch] ecx +
call memcpy  +
mov edx [esp+18h] +
lea eax [ebp+ebx+0] +
mov ecx [esp+1Ch] +
mov [esp] eax +
sub edx ebx +
lea ecx [esi+ecx+2] +
mov [esp+8] edx +
mov [esp+4] ecx +
call memcpy  +
mov dword ptr [esp+10h] 1 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+4] ebp +
mov eax [edi+1Ch] +
mov [esp] eax +
call sub_4500A0  +
test eax eax +
mov esi eax +
jz loc_46357E  +
mov eax [esp+40h] +
mov ebx esi +
mov [esp+4] ebp +
mov [esp] eax +
call sub_458CD0  +
jmp loc_4634AC  +
***
mov byte ptr [ebp+ebx-1] 0 +
mov dword ptr [esp+10h] 1 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+4] ebp +
mov eax [edi+1Ch] +
mov [esp] eax +
call sub_4500A0  +
mov esi eax +
jmp loc_463567  +
***
push esi  +
push ebx  +
sub esp 13Ch +
mov ebp [esp+13Ch+arg_0] +
movzx eax byte ptr [ebp+28h] +
and eax 7 +
cmp eax 1 +
jz loc_463600  +
cmp eax 2 +
jnz loc_463645  +
test byte ptr [ebp+2Bh] 20h +
jz loc_463A50  +
mov eax [ebp+0A0h] +
mov ebx [eax+14h] +
test ebx ebx +
jnz loc_463802  +
add esp 13Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+13Ch+arg_4] +
test byte ptr [ebp+29h] 8 +
mov eax [eax+1Ch] +
mov [esp+13Ch+var_FC] eax +
mov eax [ebp+4] +
mov edi [eax+1B0h] +
mov [esp+13Ch+var_104] edi +
jz loc_463660  +
mov edi [esp+13Ch+arg_4] +
movzx edx byte ptr [edi] +
and edx 3 +
cmp dl 2 +
jz loc_463EB0  +
mov edi [esp+13Ch+var_FC] +
cmp dword ptr [edi+28h] 1 +
jz loc_463C76  +
mov [esp+13Ch+var_13C] 3 +
call sub_44BAF0  +
xor eax eax +
***
add esp 13Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+13Ch+var_100] 0 +
mov edi [esp+13Ch+arg_4] +
mov eax [ebp+0A0h] +
test byte ptr [edi+5] 20h +
jz loc_4636C2  +
mov edi [esp+13Ch+var_104] +
movzx eax word ptr [eax+26h] +
mov edx [edi+8] +
cmp edx eax +
jz loc_4636C2  +
mov ecx [edi+16Ch] +
test ecx ecx +
jz loc_463A10  +
cmp eax ecx +
jnz loc_463A10  +
mov edi [esp+13Ch+arg_4] +
mov ecx [edi+18h] +
mov ecx [ecx+2Ch] +
mov [esp+13Ch+var_130] edx +
mov [esp+13Ch+var_134] ebp +
mov [esp+13Ch+var_138] eax +
mov [esp+13Ch+var_13C] offset aPAlternateElfM +
call ecx  +
mov ebx [ebp+64h] +
test ebx ebx +
jnz loc_4636DB  +
jmp loc_463A99  +
***
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_463A80  +
mov eax [ebx] +
mov edi offset a_gnu_warnin_34 +
mov ecx 0Dh +
mov esi eax +
cmps   +
jnz loc_4636D0  +
mov ecx [esp+13Ch+var_100] +
lea edi [eax+0Dh] +
test ecx ecx +
jz loc_46372F  +
mov eax [esp+13Ch+var_FC] +
mov [esp+13Ch+var_12C] 1 +
mov [esp+13Ch+var_130] 0 +
mov [esp+13Ch+var_134] 0 +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_13C] eax +
call sub_4500A0  +
test eax eax +
jz loc_46372F  +
movzx eax byte ptr [eax+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_4636D0  +
mov esi [ebx+24h] +
mov [esp+13Ch+var_13C] ebp +
lea eax [esi+1] +
mov [esp+13Ch+var_138] eax +
call sub_458A80  +
test eax eax +
jz loc_463A40  +
mov [esp+13Ch+var_128] esi +
mov [esp+13Ch+var_130] 0 +
mov [esp+13Ch+var_12C] 0 +
mov [esp+13Ch+var_134] eax +
mov [esp+13Ch+var_138] ebx +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_108] eax +
call sub_44DCC0  +
test eax eax +
jz loc_463A40  +
mov edx [esp+13Ch+var_108] +
mov eax [esp+13Ch+var_104] +
mov byte ptr [edx+esi] 0 +
mov [esp+13Ch+var_118] 0 +
movzx eax byte ptr [eax+1ACh] +
mov [esp+13Ch+var_120] 0 +
mov [esp+13Ch+var_124] edx +
mov [esp+13Ch+var_128] 0 +
and eax 1 +
mov [esp+13Ch+var_11C] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_12C] ebx +
mov [esp+13Ch+var_130] 1000h +
mov [esp+13Ch+var_134] edi +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_13C] eax +
call sub_450D00  +
test eax eax +
jz loc_463A40  +
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 1 +
ja loc_4636D0  +
mov dword ptr [ebx+24h] 0 +
or dword ptr [ebx+14h] 8000h +
jmp loc_4636D0  +
mov [esp+13Ch+var_13C] ebx +
call sub_459D10  +
mov edi eax +
mov [esp+13Ch+var_F8] eax +
xor eax eax +
test edi edi +
jz loc_463653  +
mov eax [ebp+0A0h] +
shl ebx 4 +
mov eax [eax+10h] +
mov edi eax +
mov [esp+13Ch+var_EC] eax +
mov eax [ebp+4] +
add ebx edi +
cmp edi ebx +
mov [esp+13Ch+var_108] ebx +
mov eax [eax+1B0h] +
mov eax [eax+40h] +
mov [esp+13Ch+var_100] eax +
jnb loc_464F0C  +
mov [esp+13Ch+arg_0] ebp +
mov ebp [esp+13Ch+var_F8] +
mov ecx [esp+13Ch+var_EC] +
xor edi edi +
mov ebx 0FFFFFFFFh +
mov eax edi +
mov esi 0FFFFFFFFh +
mov edi ebp +
mov ebp eax +
mov [esp+13Ch+var_104] ebx +
mov [esp+13Ch+var_FC] 0 +
mov ebx ecx +
jmp loc_463898  +
***
cmp al 2 +
jz loc_463888  +
mov byte ptr [edi+ebp] 1 +
add ebx 10h +
add ebp 1 +
cmp ebx [esp+13Ch+var_108] +
jnb loc_464EFE  +
cmp byte ptr [edi+ebp] 0 +
jnz loc_463888  +
mov edx [ebx+0Ch] +
mov eax [esp+13Ch+var_104] +
xor eax [ebx+8] +
xor edx esi +
or edx eax +
jz loc_463884  +
mov eax [ebx] +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_138] eax +
mov eax [esp+13Ch+arg_0] +
mov [esp+13Ch+var_13C] eax +
mov eax [esp+13Ch+var_100] +
call eax  +
cmp eax 0FFFFFFB8h +
jz loc_463A2F  +
test eax eax +
jz loc_463888  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_463ED8  +
cmp al 1 +
jnz loc_463880  +
mov eax [ebx+8] +
mov edx [ebx+0Ch] +
mov [esp+13Ch+var_138] eax +
mov eax [esp+13Ch+arg_0] +
mov [esp+13Ch+var_134] edx +
mov [esp+13Ch+var_13C] eax +
call sub_454E70  +
test eax eax +
mov [esp+13Ch+var_14] eax +
jz loc_463A2F  +
mov [esp+13Ch+var_138] 1 +
mov [esp+13Ch+var_13C] eax +
call sub_454030  +
test eax eax +
jz loc_463A2F  +
mov eax [esp+13Ch+arg_4] +
lea ecx [esp+13Ch+var_14] +
mov edx [ebx] +
mov eax [eax+1Ch] +
mov esi [eax+20h] +
mov eax [esp+13Ch+arg_4] +
mov eax [eax+18h] +
mov eax [eax] +
mov [esp+13Ch+var_130] ecx +
mov ecx [esp+13Ch+arg_4] +
mov [esp+13Ch+var_134] edx +
mov edx [esp+13Ch+var_14] +
mov [esp+13Ch+var_13C] ecx +
mov [esp+13Ch+var_138] edx +
call eax  +
test eax eax +
jz loc_463A2F  +
mov eax [esp+13Ch+var_14] +
mov ecx [esp+13Ch+arg_4] +
mov edx [eax+4] +
mov edx [edx+168h] +
mov [esp+13Ch+var_138] ecx +
mov [esp+13Ch+var_13C] eax +
call edx  +
test eax eax +
jz loc_463A2F  +
mov eax [esp+13Ch+arg_4] +
lea edx [ebx-8] +
mov [esp+13Ch+var_104] edi +
mov [esp+13Ch+var_F4] ebp +
mov eax [eax+1Ch] +
cmp esi [eax+20h] +
mov eax 1 +
cmovz eax [esp+13Ch+var_FC] +
mov [esp+13Ch+var_FC] eax +
mov eax ebp +
jmp loc_4639ED  +
***
mov ecx [edx] +
sub eax 1 +
sub edx 10h +
mov esi [edx+14h] +
mov edi [ebx+8] +
mov ebp [ebx+0Ch] +
xor ecx edi +
xor esi ebp +
or esi ecx +
jnz loc_463EC3  +
mov edi [esp+13Ch+var_104] +
test eax eax +
mov byte ptr [edi+eax] 1 +
jnz loc_4639D0  +
mov eax [ebx+8] +
mov ebp [esp+13Ch+var_F4] +
mov esi [ebx+0Ch] +
mov [esp+13Ch+var_104] eax +
jmp loc_463888  +
***
mov edi [esp+13Ch+var_104] +
mov ecx [edi+170h] +
test ecx ecx +
jz loc_4636C2  +
cmp eax ecx +
jnz loc_4636C2  +
jmp loc_4636A0  +
mov eax [esp+44h] +
mov [esp] eax +
call free  +
nop   +
lea esi [esi+0] +
***
xor eax eax +
add esp 13Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+13Ch+var_138] 0 +
mov [esp+13Ch+var_13C] ebp +
call sub_455160  +
test eax eax +
jz loc_4635ED  +
mov [esp+13Ch+var_13C] 8 +
call sub_44BAF0  +
xor eax eax +
jmp loc_463653  +
***
mov eax [ebp+64h] +
test eax eax +
jz loc_463A99  +
movzx eax word ptr [eax+18h] +
and ax 380h +
cmp ax 200h +
jz loc_463C96  +
mov edx [esp+13Ch+var_100] +
xor eax eax +
test edx edx +
jnz loc_463CA6  +
mov eax [esp+13Ch+arg_4] +
test byte ptr [eax] 1 +
jz loc_463AC1  +
mov eax [esp+13Ch+var_FC] +
cmp dword ptr [eax+28h] 1 +
jz loc_465A83  +
mov ecx [ebp+0A0h] +
mov [esp+13Ch+var_AC] 1 +
lea eax [ecx+48h] +
mov [esp+13Ch+var_E4] eax +
mov eax [esp+13Ch+var_104] +
xor edx edx +
mov [esp+13Ch+var_108] 0 +
mov eax [eax+174h] +
movzx ebx byte ptr [eax+5] +
mov eax [esp+13Ch+var_E4] +
mov eax [eax+18h] +
div  ebx +
mov [esp+13Ch+var_D0] eax +
mov eax [ecx+928h] +
test eax eax +
jnz loc_463B17  +
mov eax [esp+13Ch+var_E4] +
mov eax [eax+20h] +
sub [esp+13Ch+var_D0] eax +
mov [esp+13Ch+var_108] eax +
mov eax [ecx+218h] +
mov [esp+13Ch+var_D4] 0 +
mov [esp+13Ch+var_F0] eax +
mov eax [esp+13Ch+var_D0] +
test eax eax +
jnz loc_46520A  +
mov edi [esp+13Ch+var_100] +
test edi edi +
jnz loc_465290  +
mov ebx [ebp+0A0h] +
mov [esp+13Ch+var_C0] 0 +
test byte ptr [ebx+924h] 1 +
jz loc_46405A  +
mov ecx [esp+13Ch+var_FC] +
mov edi [ecx+0Ch] +
test edi edi +
mov [esp+13Ch+var_F8] edi +
jz loc_465C40  +
mov esi [ecx] +
xor eax eax +
mov [esp+13Ch+arg_0] ebp +
mov ebp ecx +
lea edi [esi+edi*4] +
nop   +
mov edx [esi] +
test edx edx +
jz loc_463BA2  +
mov ecx [ebp+14h] +
lea esi [esi+0] +
add eax ecx +
cmp byte ptr [edx+0Ch] 7 +
mov edx [edx] +
lea ebx [eax+ecx] +
cmovz eax ebx +
test edx edx +
jnz loc_463B90  +
add esi 4 +
cmp esi edi +
jnz loc_463B80  +
mov ebp [esp+13Ch+arg_0] +
mov edi [esp+13Ch+var_F8] +
shl edi 2 +
add eax edi +
mov [esp+13Ch+var_13C] eax +
mov [esp+13Ch+var_A8] edi +
call sub_459B80  +
test eax eax +
mov [esp+13Ch+var_B8] eax +
jz loc_463C47  +
mov eax [esp+13Ch+var_FC] +
mov [esp+13Ch+var_138] 1 +
mov [esp+13Ch+var_13C] eax +
call sub_44E3F0  +
test eax eax +
mov [esp+13Ch+var_A4] eax +
jz loc_46564A  +
mov eax [esp+13Ch+var_104] +
mov edi [esp+13Ch+arg_4] +
mov eax [eax+80h] +
mov [esp+13Ch+var_134] 0 +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_13C] ebp +
call eax  +
mov [esp+13Ch+var_C8] 0 +
test eax eax +
jnz loc_465AD0  +
***
mov eax [esp+84h] +
mov [esp+0] eax +
call free  +
mov eax [esp+74h] +
test eax eax +
jz loc_463C47  +
mov [esp+0] eax +
call free  +
mov eax [esp+7Ch] +
test eax eax +
jz loc_463C57  +
mov [esp+0] eax +
call free  +
mov ebx [esp+68h] +
test ebx ebx +
jz loc_463A40  +
mov eax [esp+68h] +
mov [esp+0] eax +
call free  +
xor eax eax +
jmp loc_463653  +
***
mov edi [esp+13Ch+arg_4] +
mov edx [edi+30h] +
cmp eax [edx+4] +
jnz loc_463645  +
mov [esp+13Ch+var_100] 1 +
jmp loc_463668  +
cmp dword ptr [esp+3Ch] 0 +
mov eax 1 +
jz loc_463AC1  +
mov edi [esp+40h] +
cmp dword ptr [edi+28h] 1 +
jnz loc_463A40  +
test eax eax +
mov dword ptr [esp+11Ch] 0 +
mov dword ptr [esp+120h] 0 +
jnz loc_4665FC  +
mov eax [ebp+0A0h] +
mov eax [eax+924h] +
mov dword ptr [esp+4] offset a_dynamic +
mov [esp] ebp +
mov [esp+58h] eax +
call sub_44D4B0  +
test eax eax +
mov edi eax +
mov [esp+34h] eax +
jz loc_465487  +
lea eax [esp+124h] +
mov [esp+8] eax +
mov [esp+4] edi +
mov [esp] ebp +
call sub_44DE10  +
test eax eax +
jz loc_4653F0  +
mov esi [esp+34h] +
mov [esp] ebp +
mov [esp+4] esi +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
jz loc_4653F0  +
mov edx [ebp+0A0h] +
mov edi [esp+124h] +
mov ecx [esi+24h] +
mov edx [edx+40h] +
add ecx edi +
cmp edi ecx +
mov eax [edx+eax*4] +
mov eax [eax+1Ch] +
mov [esp+44h] eax +
jnb loc_465BBF  +
mov eax [esp+38h] +
mov dword ptr [esp+4Ch] 0 +
mov dword ptr [esp+48h] 0 +
mov eax [eax+174h] +
jmp loc_463DB3  +
***
cmp eax 6FFFFEFCh +
jz loc_4650B9  +
mov eax [esp+38h] +
mov esi [esp+34h] +
mov eax [eax+174h] +
mov ecx [esi+24h] +
movzx edx byte ptr [eax+6] +
add edi edx +
mov edx [esp+124h] +
add ecx edx +
cmp edi ecx +
jnb loc_465BD1  +
mov eax [eax+30h] +
lea ecx [esp+128h] +
mov [esp+8] ecx +
mov [esp+4] edi +
mov [esp] ebp +
call eax  +
mov eax [esp+128h] +
cmp eax 0Eh +
jz loc_465086  +
cmp eax 1 +
jz loc_464FD6  +
cmp eax 1Dh +
jz loc_464F20  +
mov edx [esp+120h] +
test edx edx +
jnz loc_463D80  +
cmp eax 0Fh +
jnz loc_463D80  +
mov dword ptr [esp+4] 0Ch +
mov esi [esp+12Ch] +
mov [esp] ebp +
call sub_458A80  +
mov [esp] ebp +
mov [esp+8] esi +
mov ebx eax +
mov eax [esp+44h] +
mov [esp+4] eax +
call sub_475820  +
test eax eax +
jz loc_4653F0  +
test ebx ebx +
jz loc_4653F0  +
mov [esp] eax +
mov [esp+54h] eax +
call strlen  +
mov [esp] ebp +
lea ecx [eax+1] +
mov [esp+4] ecx +
mov [esp+50h] ecx +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_4653F0  +
mov edx [esp+54h] +
mov ecx [esp+50h] +
mov [esp] eax +
mov [esp+4] edx +
mov [esp+8] ecx +
call memcpy  +
mov [ebx+8] esi +
mov [ebx+4] ebp +
mov dword ptr [ebx] 0 +
mov edx [esp+11Ch] +
test edx edx +
jnz loc_463E98  +
jmp loc_4664CD  +
***
mov edx eax +
mov eax [edx] +
test eax eax +
jnz loc_463E96  +
mov [edx] ebx +
mov eax [esp+128h] +
jmp loc_463D80  +
***
mov [esp+13Ch+var_13C] 5 +
call sub_44BAF0  +
xor eax eax +
jmp loc_463653  +
mov eax edi +
mov esi ebp +
mov edi [esp+13Ch+var_104] +
mov ebp [esp+13Ch+var_F4] +
mov [esp+13Ch+var_104] eax +
jmp loc_463888  +
mov eax [ebx+8] +
mov edx [ebx+0Ch] +
mov [esp+13Ch+var_138] eax +
mov eax [esp+13Ch+arg_0] +
mov [esp+13Ch+var_134] edx +
mov [esp+13Ch+var_13C] eax +
call sub_454E70  +
test eax eax +
mov ecx eax +
jz loc_463888  +
movzx eax byte ptr [eax+2Ch] +
and eax 0Ch +
cmp al 4 +
jz loc_463888  +
mov [esp+13Ch+var_138] 1 +
mov [esp+13Ch+var_13C] ecx +
mov [esp+13Ch+var_F4] ecx +
call sub_454030  +
test eax eax +
jz loc_463888  +
mov eax [esp+13Ch+var_F4] +
test byte ptr [eax+29h] 8 +
jnz loc_46559D  +
mov eax [eax+0A0h] +
mov [esp+13Ch+var_F0] eax +
mov eax [esp+13Ch+var_F0] +
add eax 48h +
mov [esp+13Ch+var_E8] eax +
mov eax [esp+13Ch+var_F4] +
xor edx edx +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx ecx byte ptr [eax+5] +
mov eax [esp+13Ch+var_E8] +
mov eax [eax+18h] +
div  ecx +
mov edx [esp+13Ch+var_F0] +
mov edx [edx+928h] +
mov ecx eax +
xor eax eax +
test edx edx +
jnz loc_463F8A  +
mov eax [esp+13Ch+var_E8] +
mov eax [eax+20h] +
sub ecx eax +
test ecx ecx +
jz loc_463888  +
mov [esp+13Ch+var_130] eax +
mov eax [esp+13Ch+var_E8] +
mov [esp+13Ch+var_134] ecx +
mov [esp+13Ch+var_F0] ecx +
mov ecx [esp+13Ch+var_F4] +
mov [esp+13Ch+var_124] 0 +
mov [esp+13Ch+var_128] 0 +
mov [esp+13Ch+var_12C] 0 +
mov [esp+13Ch+var_138] eax +
mov [esp+13Ch+var_13C] ecx +
call sub_475A20  +
test eax eax +
mov edx eax +
mov [esp+13Ch+var_E4] eax +
jz loc_463888  +
mov ecx [esp+13Ch+var_F0] +
lea eax [ecx+ecx*4] +
mov ecx edx +
lea edx [edx+eax*4] +
cmp ecx edx +
mov [esp+13Ch+var_F0] edx +
jnb loc_464049  +
mov [esp+13Ch+var_E0] edi +
mov edi [esp+13Ch+var_F4] +
mov [esp+13Ch+var_DC] ebp +
mov ebp [esp+13Ch+var_E8] +
mov [esp+13Ch+var_E8] esi +
mov esi ecx +
jmp loc_464023  +
mov edx [ebx] +
mov [esp+13Ch+var_13C] eax +
mov [esp+13Ch+var_138] edx +
call strcmp  +
test eax eax +
jz loc_466208  +
add esi 14h +
cmp [esp+13Ch+var_F0] esi +
jbe loc_46403D  +
mov edx [esi+8] +
mov eax [ebp+1Ch] +
mov [esp+13Ch+var_13C] edi +
mov [esp+13Ch+var_134] edx +
mov [esp+13Ch+var_138] eax +
call sub_475820  +
test eax eax +
jnz loc_464004  +
mov edi [esp+13Ch+var_E0] +
mov ebp [esp+13Ch+var_DC] +
mov esi [esp+13Ch+var_E8] +
mov eax [esp+13Ch+var_E4] +
mov [esp+13Ch+var_13C] eax +
call free  +
jmp loc_463888  +
mov [esp+13Ch+var_A8] 0 +
mov [esp+13Ch+var_BC] 0 +
mov [esp+13Ch+var_D8] 0 +
mov [esp+13Ch+var_98] 0 +
mov [esp+13Ch+var_9C] 0 +
mov [esp+13Ch+var_B8] 0 +
mov [esp+13Ch+var_8C] 0 +
mov [esp+13Ch+var_90] 0 +
mov [esp+13Ch+var_94] 0 +
mov [esp+13Ch+var_A4] 0 +
mov edi [esp+13Ch+var_C0] +
mov ecx [esp+13Ch+var_108] +
mov ebx [esp+13Ch+var_D4] +
mov [esp+13Ch+var_B0] 0 +
test edi edi +
lea eax [edi+ecx*2] +
mov ecx 0 +
cmovz eax ecx +
mov [esp+13Ch+var_EC] eax +
mov eax [esp+13Ch+var_D0] +
mov [esp+13Ch+var_C8] 0 +
mov [esp+13Ch+var_CC] 0 +
lea eax [eax+eax*4] +
lea eax [ebx+eax*4] +
cmp ebx eax +
mov [esp+13Ch+var_E0] eax +
jnb loc_4646C2  +
mov eax [esp+13Ch+var_100] +
xor eax 1 +
mov [esp+13Ch+var_A0] eax +
mov eax [ebx] +
mov [esp+13Ch+var_44] 0 +
mov [esp+13Ch+var_58] 0 +
mov [esp+13Ch+var_5C] 0 +
mov [esp+13Ch+var_60] eax +
mov eax [esp+13Ch+var_104] +
mov eax [eax+144h] +
mov [esp+13Ch+var_13C] ebx +
call eax  +
mov [esp+13Ch+var_E8] eax +
movzx eax byte ptr [ebx+0Ch] +
mov byte ptr [esp+13Ch+var_F8] al +
shr byte ptr [esp+13Ch+var_F8] 4 +
movzx eax byte ptr [esp+13Ch+var_F8] +
cmp al 1 +
jz loc_464900  +
jb loc_46469E  +
cmp al 2 +
jz loc_4648E8  +
cmp al 0Ah +
jnz loc_464195  +
mov [esp+13Ch+var_58] 800000h +
mov eax [ebx+10h] +
test eax eax +
jz loc_464837  +
cmp eax 0FFFFFFF1h +
jz loc_46498B  +
cmp eax 0FFFFFFF2h +
jnz loc_464942  +
mov eax [ebx+4] +
mov [esp+13Ch+var_5C] offset off_4BFA40 +
mov [esp+13Ch+var_60] eax +
mov eax [esp+13Ch+var_E4] +
mov edx [ebx+8] +
mov eax [eax+1Ch] +
mov [esp+13Ch+var_134] edx +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_138] eax +
call sub_475820  +
test eax eax +
mov [esp+13Ch+var_54] eax +
jz loc_464E63  +
cmp dword ptr [ebx+10h] 0FFFFFFF2h +
jz loc_464882  +
mov eax [esp+13Ch+var_104] +
mov eax [eax+64h] +
test eax eax +
jz loc_4648D8  +
lea edx [esp+13Ch+var_60] +
mov edi [esp+13Ch+arg_4] +
mov [esp+13Ch+var_124] edx +
lea edx [esp+13Ch+var_5C] +
mov [esp+13Ch+var_128] edx +
lea edx [esp+13Ch+var_58] +
mov [esp+13Ch+var_12C] edx +
lea edx [esp+13Ch+var_54] +
mov [esp+13Ch+var_130] edx +
mov [esp+13Ch+var_134] ebx +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_13C] ebp +
call eax  +
test eax eax +
jz loc_464E63  +
mov eax [esp+13Ch+var_5C] +
mov [esp+13Ch+var_F4] eax +
mov eax [esp+13Ch+var_54] +
test eax eax +
jz loc_46469E  +
mov eax [esp+13Ch+var_F4] +
test eax eax +
jz loc_465476  +
movzx eax byte ptr [ebx+0Ch] +
and eax 0Fh +
cmp al 6 +
jz loc_464927  +
mov eax [esp+13Ch+var_F4] +
cmp eax offset off_4BFAE8 +
jz loc_464EC5  +
mov eax [eax+14h] +
mov [esp+13Ch+var_108] eax +
shr [esp+13Ch+var_108] 0Ch +
xor [esp+13Ch+var_108] 1 +
and [esp+13Ch+var_108] 1 +
mov eax [esp+13Ch+var_104] +
mov edi [esp+13Ch+var_FC] +
mov [esp+13Ch+var_50] 0 +
mov [esp+13Ch+var_48] 0 +
movzx eax byte ptr [eax+1ACh] +
mov [esp+13Ch+var_38] 0 +
mov [esp+13Ch+var_40] 0 +
mov [esp+13Ch+var_3C] 0 +
shr al 1 +
and eax 1 +
cmp dword ptr [edi+28h] 1 +
mov [esp+13Ch+var_4C] eax +
mov eax [esp+13Ch+var_F4] +
jnz loc_4645B1  +
mov eax [esp+13Ch+var_EC] +
test eax eax +
jz loc_464ED2  +
lea eax [esp+13Ch+var_18] +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+var_EC] +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_138] eax +
call sub_475620  +
movzx eax word ptr [esp+13Ch+var_18] +
mov esi eax +
and esi 7FFFh +
test ax ax +
js loc_464361  +
cmp esi 1 +
jbe loc_4650FB  +
cmp [esp+13Ch+var_5C] offset off_4BFB90 +
jz loc_4650DD  +
mov eax [ebx+10h] +
test eax eax +
jz loc_464DC0  +
mov eax [ebp+0A0h] +
mov ecx [eax+238h] +
cmp esi ecx +
ja loc_465452  +
cmp esi 1 +
jbe loc_46542E  +
mov edi [eax+240h] +
lea edx [esi+esi*4] +
lea edx [edi+edx*8] +
mov edx [edx-10h] +
test edx edx +
jz loc_465452  +
mov [esp+13Ch+var_13C] edx +
mov [esp+13Ch+var_DC] edx +
call strlen  +
mov edx [esp+13Ch+var_DC] +
mov [esp+13Ch+var_B4] eax +
mov edi [esp+13Ch+var_54] +
xor eax eax +
or ecx 0FFFFFFFFh +
scas   +
mov eax ecx +
mov ecx [esp+13Ch+var_B4] +
not eax  +
sub eax 1 +
mov [esp+13Ch+var_DC] eax +
add ecx eax +
lea eax [ecx+3] +
add ecx 2 +
cmp word ptr [esp+13Ch+var_18] 0 +
cmovs eax ecx +
mov [esp+13Ch+var_138] eax +
mov eax [esp+13Ch+var_FC] +
mov [esp+13Ch+var_C4] edx +
mov [esp+13Ch+var_13C] eax +
call sub_44E3F0  +
test eax eax +
mov edi eax +
jz loc_464E63  +
mov eax [esp+13Ch+var_DC] +
mov [esp+13Ch+var_13C] edi +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_138] eax +
call memcpy  +
mov eax [esp+13Ch+var_DC] +
mov edx [esp+13Ch+var_C4] +
lea ecx [edi+eax] +
mov byte ptr [ecx] 40h +
lea eax [ecx+1] +
cmp word ptr [esp+13Ch+var_18] 0 +
js loc_46444D  +
cmp dword ptr [ebx+10h] 0 +
jz loc_46444D  +
lea eax [ecx+2] +
mov byte ptr [ecx+1] 40h +
mov ecx [esp+13Ch+var_B4] +
mov [esp+13Ch+var_138] edx +
mov [esp+13Ch+var_13C] eax +
add ecx 1 +
mov [esp+13Ch+var_134] ecx +
call memcpy  +
mov eax [esp+13Ch+var_5C] +
mov ecx edi +
mov [esp+13Ch+var_54] edi +
cmp eax offset off_4BFAE8 +
jz loc_4644A3  +
mov eax [esp+13Ch+var_100] +
test eax eax +
jnz loc_4644A3  +
test byte ptr [ebp+2Bh] 8 +
jz loc_4644A3  +
movzx eax byte ptr [ebx+0Dh] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jz loc_4644A3  +
and eax 0FFFFFFFCh +
or eax 2 +
mov [ebx+0Dh] al +
lea eax [esp+13Ch+var_38] +
mov edx [esp+13Ch+arg_4] +
mov [esp+13Ch+var_110] eax +
lea eax [esp+13Ch+var_50] +
mov [esp+13Ch+var_114] eax +
lea eax [esp+13Ch+var_4C] +
mov [esp+13Ch+var_118] eax +
lea eax [esp+13Ch+var_44] +
mov [esp+13Ch+var_11C] eax +
lea eax [esp+13Ch+var_14] +
mov [esp+13Ch+var_120] eax +
lea eax [esp+13Ch+var_40] +
mov [esp+13Ch+var_124] eax +
lea eax [esp+13Ch+var_48] +
mov [esp+13Ch+var_128] eax +
lea eax [esp+13Ch+var_3C] +
mov [esp+13Ch+var_12C] eax +
mov eax [esp+13Ch+var_F0] +
mov [esp+13Ch+var_13C] ebx +
mov [esp+13Ch+var_130] eax +
lea eax [esp+13Ch+var_60] +
mov [esp+13Ch+var_134] eax +
lea eax [esp+13Ch+var_5C] +
mov [esp+13Ch+var_138] eax +
mov eax ebp +
call sub_460D20  +
test eax eax +
jz loc_464E63  +
mov eax [esp+13Ch+var_14] +
test eax eax +
jnz loc_46469E  +
mov eax [esp+13Ch+var_44] +
test eax eax +
jz loc_464563  +
mov eax [esp+13Ch+var_38] +
test eax eax +
mov eax 0 +
cmovz eax [esp+13Ch+var_108] +
mov [esp+13Ch+var_108] eax +
mov eax [esp+13Ch+var_F0] +
mov eax [eax] +
movzx edi byte ptr [eax+0Ch] +
lea edx [edi-6] +
cmp dl 1 +
ja loc_464584  +
mov eax [eax+14h] +
movzx edi byte ptr [eax+0Ch] +
lea edx [edi-6] +
cmp dl 1 +
jbe loc_464575  +
mov edx [ebp+0A0h] +
mov edx [edx+240h] +
test edx edx +
jz loc_4645AA  +
cmp esi 1 +
jbe loc_4645AA  +
test byte ptr [esp+13Ch+var_108] 1 +
jz loc_4645AA  +
lea ecx [esi+esi*4] +
lea edx [edx+ecx*8-28h] +
mov [eax+40h] edx +
mov eax [esp+13Ch+var_5C] +
mov edi [esp+13Ch+var_F0] +
mov ecx [esp+13Ch+var_104] +
mov [esp+13Ch+var_118] edi +
movzx edx byte ptr [ecx+1ACh] +
mov [esp+13Ch+var_12C] eax +
mov eax [esp+13Ch+var_58] +
mov [esp+13Ch+var_120] 0 +
mov [esp+13Ch+var_124] 0 +
and edx 1 +
mov [esp+13Ch+var_130] eax +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_11C] edx +
mov edx [esp+13Ch+var_60] +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_128] edx +
mov [esp+13Ch+var_13C] eax +
call sub_450D00  +
test eax eax +
jz loc_464E63  +
mov edi [edi] +
movzx eax byte ptr [edi+0Ch] +
mov esi edi +
sub eax 6 +
cmp al 1 +
ja loc_46463E  +
lea esi [esi+0] +
mov esi [esi+14h] +
movzx eax byte ptr [esi+0Ch] +
sub eax 6 +
cmp al 1 +
jbe loc_464630  +
mov eax [esp+13Ch+var_F0] +
mov [esp+13Ch+var_C4] 0 +
mov [eax] esi +
mov eax [esp+13Ch+var_58] +
shr eax 7 +
and eax 1 +
mov byte ptr [esp+13Ch+var_DC] al +
movzx eax byte ptr [esp+13Ch+var_100] +
test byte ptr [esp+13Ch+var_108] al +
jz loc_464673  +
cmp byte ptr [esp+13Ch+var_DC] 0 +
jnz loc_46510E  +
mov eax [esp+13Ch+var_E8] +
test eax eax +
jz loc_464847  +
cmp byte ptr [esi+0Ch] 5 +
jz loc_465443  +
lea esi [esi+0] +
mov eax [esp+13Ch+var_FC] +
cmp dword ptr [eax+28h] 1 +
jz loc_46499B  +
mov edi [esp+13Ch+var_EC] +
add ebx 14h +
add [esp+13Ch+var_F0] 4 +
mov eax edi +
add eax 2 +
test edi edi +
cmovz eax edi +
cmp [esp+13Ch+var_E0] ebx +
mov [esp+13Ch+var_EC] eax +
ja loc_464121  +
mov eax [esp+13Ch+var_C0] +
test eax eax +
jz loc_4646D2  +
mov [esp+13Ch+var_13C] eax +
call free  +
mov eax [esp+13Ch+var_D4] +
test eax eax +
jz loc_4646E2  +
mov [esp+13Ch+var_13C] eax +
call free  +
mov eax [ebp+0A0h] +
test byte ptr [eax+924h] 1 +
jnz loc_465DBF  +
mov eax [esp+13Ch+var_B8] +
test eax eax +
jz loc_464749  +
mov eax [esp+13Ch+var_104] +
mov edi [esp+13Ch+arg_4] +
mov eax [eax+80h] +
mov [esp+13Ch+var_134] 2 +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_13C] ebp +
call eax  +
mov [esp+13Ch+var_D4] 0 +
mov [esp+13Ch+var_C0] 0 +
test eax eax +
jz loc_463C28  +
mov eax [esp+13Ch+var_B8] +
mov [esp+13Ch+var_13C] eax +
call free  +
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_465C5A  +
mov eax [esp+13Ch+var_C8] +
test eax eax +
jz loc_465C5A  +
mov eax [esp+13Ch+var_B0] +
xor esi esi +
test eax eax +
jz loc_465C4E  +
mov [esp+13Ch+arg_0] ebp +
jmp loc_464794  +
add esi 1 +
cmp esi [esp+13Ch+var_B0] +
jz loc_465C47  +
mov eax [esp+13Ch+var_C8] +
mov ebx [eax+esi*4] +
mov edi [ebx+4] +
mov [esp+13Ch+var_138] 40h +
mov [esp+13Ch+var_13C] edi +
call strchr  +
test eax eax +
jz loc_464784  +
movzx ecx byte ptr [ebx+0Ch] +
lea edx [ecx-3] +
cmp dl 1 +
ja loc_464784  +
sub eax edi +
mov edi eax +
lea eax [eax+1] +
mov [esp+13Ch+var_13C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_4665E7  +
mov eax [ebx+4] +
mov [esp+13Ch+var_134] edi +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_138] eax +
call memcpy  +
mov eax [esp+13Ch+var_FC] +
mov byte ptr [ebp+edi+0] 0 +
mov [esp+13Ch+var_12C] 0 +
mov [esp+13Ch+var_130] 0 +
mov [esp+13Ch+var_134] 0 +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_13C] eax +
call sub_4500A0  +
test eax eax +
mov edi eax +
jz loc_46482A  +
movzx eax byte ptr [ebx+0Ch] +
cmp [edi+0Ch] al +
jz loc_466404  +
mov [esp+13Ch+var_13C] ebp +
call free  +
jmp loc_464784  +
mov [esp+13Ch+var_5C] offset off_4BFAE8 +
jmp loc_4641C7  +
mov eax [esp+13Ch+var_5C] +
test byte ptr [eax+15h] 10h +
jz loc_464690  +
cmp byte ptr [esi+0Ch] 5 +
jnz loc_464690  +
mov eax [esp+13Ch+var_F4] +
mov eax [eax+40h] +
mov edx [esp+13Ch+var_40] +
cmp edx eax +
jnb loc_4653CA  +
mov edx [esi+14h] +
mov [edx] eax +
jmp loc_464690  +
test byte ptr [ebp+2Ah] 20h +
jnz loc_465160  +
movzx eax byte ptr [ebx+0Ch] +
and eax 0Fh +
cmp al 6 +
jnz loc_4641FA  +
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_4641FA  +
mov [esp+13Ch+var_138] offset a_tcommon +
mov [esp+13Ch+var_13C] ebp +
call sub_44D4B0  +
test eax eax +
jz loc_4664A8  +
mov [esp+13Ch+var_5C] eax +
mov [esp+13Ch+var_F4] eax +
jmp loc_464277  +
mov eax [esp+13Ch+var_5C] +
mov [esp+13Ch+var_F4] eax +
jmp loc_46426B  +
mov [esp+13Ch+var_58] 80h +
mov eax [ebx+10h] +
jmp loc_464198  +
***
mov eax [ebx+10h] +
test eax eax +
jz loc_464837  +
mov edx [esp+13Ch+var_E8] +
test edx edx +
jnz loc_4641A0  +
mov [esp+13Ch+var_58] 2 +
jmp loc_4641A0  +
mov eax [esp+13Ch+var_F4] +
movzx eax word ptr [eax+18h] +
and ax 380h +
cmp ax 200h +
jnz loc_464286  +
jmp loc_46469E  +
mov [esp+13Ch+var_138] eax +
mov [esp+13Ch+var_13C] ebp +
call sub_478480  +
test eax eax +
mov [esp+13Ch+var_5C] eax +
jz loc_46498B  +
cmp eax offset off_4BFB90 +
jz loc_46496D  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_465673  +
mov edx [ebp+28h] +
shr edx 5 +
and edx 42h +
jz loc_4641C7  +
mov eax [eax+1Ch] +
sub [esp+13Ch+var_60] eax +
jmp loc_4641C7  +
mov [esp+13Ch+var_5C] offset off_4BFB90 +
jmp loc_4641C7  +
test byte ptr [ebp+2Ah] 20h +
jnz loc_464EB8  +
mov ecx [esp+13Ch+var_100] +
test ecx ecx +
jnz loc_464E77  +
mov edx [esp+13Ch+var_108] +
movzx eax byte ptr [esi+33h] +
test edx edx +
jnz loc_465657  +
mov edx eax +
or edx 1 +
mov [esi+33h] dl +
cmp byte ptr [esp+13Ch+var_F8] 2 +
jz loc_4649D6  +
or eax 11h +
mov [esi+33h] al +
cmp edi esi +
jz loc_4649E4  +
test byte ptr [edi+34h] 8 +
jnz loc_464EB8  +
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 3 +
jz loc_4649FF  +
test byte ptr [esi+33h] 0Ch +
jz loc_464EB8  +
mov [esp+13Ch+var_F8] 1 +
mov eax [esp+13Ch+var_108] +
test eax eax +
jnz loc_465344  +
mov eax [esp+13Ch+var_44] +
test eax eax +
jnz loc_464A28  +
cmp byte ptr [esi+0Ch] 5 +
jz loc_465344  +
mov eax [esp+13Ch+var_40] +
test eax eax +
jnz loc_464A3F  +
mov edx [esp+13Ch+var_E8] +
test edx edx +
jz loc_464B06  +
movzx edx byte ptr [esi+0Ch] +
cmp dl 5 +
jz loc_464B06  +
sub edx 3 +
cmp dl 1 +
jbe loc_464A6F  +
mov [esp+13Ch+var_138] 1135h +
mov [esp+13Ch+var_13C] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esp+13Ch+var_40] +
bsf edx [esi+18h] +
mov ecx 0FFFFFFFFh +
cmovz edx ecx +
mov ecx [esi+14h] +
mov [esp+13Ch+var_F4] edx +
mov edx [ecx+94h] +
test edx edx +
jz loc_464AA2  +
test byte ptr [edx+29h] 8 +
jnz loc_464AA2  +
mov edi [esp+13Ch+var_F4] +
mov edx [ecx+40h] +
cmp edi edx +
cmovbe edx edi +
mov [esp+13Ch+var_F4] edx +
test eax eax +
jz loc_46555C  +
mov ecx [esp+13Ch+var_3C] +
mov edx ebp +
mov [esp+13Ch+var_E8] ecx +
cmp [esp+13Ch+var_F4] eax +
jnb loc_464B06  +
test edx edx +
jz loc_466160  +
mov ecx eax +
mov edi 1 +
mov eax [esp+13Ch+var_54] +
shl edi cl +
movzx ecx byte ptr [esp+13Ch+var_F4] +
mov [esp+13Ch+var_128] edi +
mov [esp+13Ch+var_138] edx +
mov [esp+13Ch+var_12C] eax +
mov eax 1 +
shl eax cl +
mov [esp+13Ch+var_130] eax +
mov eax [esp+13Ch+var_E8] +
mov [esp+13Ch+var_13C] offset aWarningAlignme +
mov [esp+13Ch+var_134] eax +
call off_4BFA04  +
mov eax [ebx+4] +
test eax eax +
jz loc_464B2A  +
mov edi [ebx+10h] +
test edi edi +
jz loc_464B2A  +
mov ecx [esp+13Ch+var_108] +
test ecx ecx +
jnz loc_4655F1  +
mov edx [esi+2Ch] +
test edx edx +
jnz loc_464B2A  +
mov [esi+2Ch] eax +
movzx eax byte ptr [esi+0Ch] +
cmp al 5 +
jz loc_46540F  +
movzx ecx byte ptr [esp+13Ch+var_108] +
movzx edx byte ptr [ebx+0Ch] +
and ecx 1 +
and edx 0Fh +
mov byte ptr [esp+13Ch+var_F4] cl +
jz loc_464B9E  +
test cl cl +
jz loc_464B5A  +
cmp byte ptr [esp+13Ch+var_DC] 0 +
jz loc_465406  +
mov ecx [esp+13Ch+var_48] +
test ecx ecx +
jz loc_464B6D  +
cmp al 5 +
jz loc_465406  +
movzx eax byte ptr [esi+30h] +
test al al +
jnz loc_464B9E  +
movzx ecx dl +
cmp ecx 0Ah +
jz loc_4656B6  +
movzx edx al +
cmp edx ecx +
jz loc_464B9E  +
test al al +
jz loc_464B9B  +
mov eax [esp+13Ch+var_4C] +
test eax eax +
jz loc_4661D7  +
mov [esi+30h] cl +
mov edx [esp+13Ch+var_5C] +
mov ecx [esp+13Ch+var_100] +
mov edi [esp+13Ch+var_108] +
mov eax [ebp+4] +
add edx 14h +
mov [esp+13Ch+var_134] ecx +
mov ecx ebx +
mov [esp+13Ch+var_13C] edx +
mov edx esi +
mov [esp+13Ch+var_138] edi +
call sub_45D350  +
test edi edi +
jz loc_464BF5  +
mov eax [esp+13Ch+var_5C] +
test byte ptr [eax+15h] 20h +
jz loc_464BF5  +
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
mov eax 0 +
cmovz eax [esp+13Ch+var_F8] +
mov [esp+13Ch+var_F8] eax +
test byte ptr [ebp+2Ah] 20h +
mov eax 0 +
cmovz eax [esp+13Ch+var_F8] +
mov [esp+13Ch+var_F8] eax +
mov eax [esp+13Ch+var_108] +
test eax eax +
jz loc_464C89  +
movzx eax byte ptr [ebx+0Eh] +
mov [esi+32h] al +
mov eax [esp+13Ch+var_58] +
shr eax 17h +
and eax 1 +
lea edx ds:0[eax*4] +
movzx eax byte ptr [esi+35h] +
and eax 0FFFFFFFBh +
or eax edx +
mov [esi+35h] al +
movzx eax byte ptr [esp+13Ch+var_A0] +
test byte ptr [esp+13Ch+var_108] al +
jz loc_464C89  +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_138] 40h +
mov [esp+13Ch+var_13C] eax +
call strchr  +
test eax eax +
jz loc_464C89  +
cmp byte ptr [eax+1] 40h +
jz loc_464C89  +
mov edi [esp+13Ch+var_C8] +
test edi edi +
jz loc_4663D5  +
mov eax [esp+13Ch+var_B0] +
mov ecx [esp+13Ch+var_C8] +
mov [ecx+eax*4] esi +
add eax 1 +
mov [esp+13Ch+var_B0] eax +
mov ecx [esp+13Ch+var_F8] +
test ecx ecx +
jnz loc_4651A0  +
cmp byte ptr [esp+13Ch+var_F4] 0 +
jz loc_46469E  +
cmp [esp+13Ch+var_AC] 0 +
jnz loc_46469E  +
test byte ptr [esi+35h] 1 +
jz loc_46541E  +
mov eax [ebp+0A0h] +
mov [esp+13Ch+var_AC] 0 +
test byte ptr [eax+924h] 1 +
jz loc_46469E  +
mov edi [esp+13Ch+var_FC] +
mov edx [edi+64h] +
mov edi [eax+220h] +
test edx edx +
jz loc_464D20  +
mov [esp+13Ch+var_108] ebx +
mov ebx edx +
mov eax [ebx+4] +
mov eax [eax+0A0h] +
test byte ptr [eax+924h] 1 +
jnz loc_464D16  +
mov eax [ebx+8] +
mov [esp+13Ch+var_13C] edi +
mov [esp+13Ch+var_138] eax +
call strcmp  +
test eax eax +
jz loc_46541A  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_464CED  +
mov ebx [esp+13Ch+var_108] +
mov eax [esp+13Ch+var_3C] +
mov ecx [esp+13Ch+arg_4] +
mov edx [ecx+18h] +
mov ecx [esi+4] +
mov edx [edx+34h] +
mov [esp+13Ch+var_130] ecx +
mov [esp+13Ch+var_134] eax +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_13C] offset asc_4FF9AD +
call edx  +
mov ecx [esp+13Ch+var_3C] +
mov eax [ebp+0A0h] +
test ecx ecx +
mov edx [eax+924h] +
jz loc_464D6C  +
test dl 8 +
jnz loc_4665BA  +
and edx 0FFFFFFFEh +
mov ecx edi +
mov [eax+924h] edx +
mov edx [esp+13Ch+arg_4] +
mov eax ebp +
mov [esp+13Ch+var_13C] 1 +
call sub_463230  +
test eax eax +
js loc_464E63  +
mov [esp+13Ch+var_AC] 1 +
jz loc_46469E  +
mov [esp+13Ch+var_138] 11FDh +
mov [esp+13Ch+var_13C] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_46469E  +
***
mov eax [ebp+0A0h] +
mov ecx [eax+244h] +
test ecx ecx +
jz loc_464E37  +
mov eax [ecx+18h] +
test eax eax +
jnz loc_464DE7  +
jmp loc_464E30  +
***
mov eax [eax+14h] +
test eax eax +
jz loc_464E30  +
movzx edx word ptr [eax+6] +
cmp esi edx +
jnz loc_464DE0  +
mov edx [eax+10h] +
test edx edx +
jz loc_464E37  +
mov edi [esp+13Ch+var_54] +
xor eax eax +
or ecx 0FFFFFFFFh +
scas   +
not ecx  +
lea edi [ecx-1] +
or ecx 0FFFFFFFFh +
mov [esp+13Ch+var_DC] edi +
mov edi edx +
scas   +
mov edi [esp+13Ch+var_DC] +
not ecx  +
lea eax [ecx-1] +
mov [esp+13Ch+var_B4] eax +
lea eax [eax+edi+2] +
jmp loc_4643EB  +
***
mov ecx [ecx+1Ch] +
test ecx ecx +
jnz loc_464DD0  +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_130] esi +
mov [esp+13Ch+var_138] ebp +
***
and al bh +
dec edi  +
add [ecx-0F7DBBCh] cl +
adc eax offset off_4BFA04 +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
mov esi [esp+84h] +
test esi esi +
jnz loc_463C28  +
jmp loc_463C37  +
***
mov ecx [esp+13Ch+var_108] +
test ecx ecx +
jnz loc_4656A9  +
or byte ptr [esi+33h] 4 +
or byte ptr [edi+33h] 4 +
cmp edi esi +
jz loc_464E95  +
test byte ptr [edi+34h] 8 +
jnz loc_464EB8  +
test byte ptr [esi+33h] 3 +
jnz loc_4649FF  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_464EB8  +
mov edx [esp+13Ch+var_C4] +
test edx edx +
jnz loc_464EB8  +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
jnz loc_4649FF  +
mov [esp+13Ch+var_F8] 0 +
jmp loc_464A07  +
mov [esp+13Ch+var_108] 0 +
jmp loc_4642AB  +
mov eax [esp+13Ch+arg_4] +
test byte ptr [eax+4] 4 +
jz loc_4653D4  +
mov eax [ebp+0A0h] +
mov edx [eax+238h] +
mov eax edx +
mov word ptr [esp+13Ch+var_18] dx +
jmp loc_46433A  +
mov ecx [esp+13Ch+var_FC] +
mov ebp edi +
test ecx ecx +
jnz loc_463855  +
mov eax [esp+13Ch+var_F8] +
mov [esp+13Ch+var_13C] eax +
call free  +
jmp loc_4635ED  +
***
mov dword ptr [esp+4] 0Ch +
mov esi [esp+12Ch] +
mov [esp] ebp +
call sub_458A80  +
mov [esp] ebp +
mov [esp+8] esi +
mov ebx eax +
mov eax [esp+44h] +
mov [esp+4] eax +
call sub_475820  +
test eax eax +
jz loc_4653F0  +
test ebx ebx +
jz loc_4653F0  +
mov [esp] eax +
mov [esp+54h] eax +
call strlen  +
mov [esp] ebp +
lea ecx [eax+1] +
mov [esp+4] ecx +
mov [esp+50h] ecx +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_4653F0  +
mov edx [esp+54h] +
mov ecx [esp+50h] +
mov [esp] eax +
mov [esp+4] edx +
mov [esp+8] ecx +
call memcpy  +
mov [ebx+8] esi +
mov [ebx+4] ebp +
mov dword ptr [ebx] 0 +
mov edx [esp+120h] +
test edx edx +
jnz loc_464FC2  +
jmp loc_465DB3  +
***
mov edx eax +
mov eax [edx] +
test eax eax +
jnz loc_464FC0  +
mov [edx] ebx +
mov eax [esp+128h] +
jmp loc_463DEC  +
***
mov dword ptr [esp+4] 0Ch +
mov esi [esp+12Ch] +
mov [esp] ebp +
call sub_458A80  +
mov [esp] ebp +
mov [esp+8] esi +
mov ebx eax +
mov eax [esp+44h] +
mov [esp+4] eax +
call sub_475820  +
test eax eax +
jz loc_4653F0  +
test ebx ebx +
jz loc_4653F0  +
mov [esp] eax +
mov [esp+54h] eax +
call strlen  +
mov [esp] ebp +
lea ecx [eax+1] +
mov [esp+4] ecx +
mov [esp+50h] ecx +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_4653F0  +
mov edx [esp+54h] +
mov ecx [esp+50h] +
mov [esp] eax +
mov [esp+4] edx +
mov [esp+8] ecx +
call memcpy  +
mov eax [esp+40h] +
mov [ebx+8] esi +
mov [ebx+4] ebp +
mov dword ptr [ebx] 0 +
mov edx [eax+64h] +
test edx edx +
jnz loc_465072  +
jmp loc_465DAB  +
***
mov edx eax +
mov eax [edx] +
test eax eax +
jnz loc_465070  +
mov [edx] ebx +
mov eax [esp+128h] +
jmp loc_463DE3  +
***
mov eax [esp+12Ch] +
mov [esp] ebp +
mov [esp+8] eax +
mov eax [esp+44h] +
mov [esp+4] eax +
call sub_475820  +
test eax eax +
mov [esp+48h] eax +
jz loc_4653F0  +
mov eax [esp+128h] +
jmp loc_463DDA  +
***
mov eax [esp+12Ch] +
mov [esp] ebp +
mov [esp+8] eax +
mov eax [esp+44h] +
mov [esp+4] eax +
call sub_475820  +
mov [esp+4Ch] eax +
jmp loc_463D8B  +
***
movzx edx byte ptr [ebx+0Ch] +
mov eax [esp+13Ch+var_104] +
and edx 0Fh +
mov eax [eax+158h] +
mov [esp+13Ch+var_13C] edx +
call eax  +
test eax eax +
jnz loc_464361  +
mov eax [esp+13Ch+var_5C] +
mov ecx [esp+13Ch+var_54] +
jmp loc_464477  +
movzx edx byte ptr [ebx+0Ch] +
mov eax [esp+13Ch+var_104] +
and edx 0Fh +
mov eax [eax+158h] +
mov [esp+13Ch+var_13C] edx +
call eax  +
test eax eax +
jnz loc_464673  +
mov eax [esp+13Ch+var_FC] +
cmp dword ptr [eax+28h] 1 +
jnz loc_464673  +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_464673  +
mov eax [esp+13Ch+var_CC] +
mov [esp+13Ch+var_C4] 1 +
mov [esp+13Ch+var_CC] esi +
mov [esi+3Ch] eax +
jmp loc_464673  +
***
mov [esp+13Ch+var_138] offset aCommon_1 +
mov [esp+13Ch+var_13C] ebp +
call sub_44D4B0  +
test eax eax +
jnz loc_4648C8  +
mov [esp+13Ch+var_134] 209001h +
mov [esp+13Ch+var_138] offset aCommon_1 +
mov [esp+13Ch+var_13C] ebp +
call sub_44D970  +
test eax eax +
jnz loc_4648C8  +
jmp loc_464E63  +
***
cmp dword ptr [esi+20h] 0FFFFFFFFh +
jz loc_465BDE  +
movzx eax byte ptr [esi+31h] +
and eax 3 +
sub eax 1 +
cmp al 1 +
jbe loc_465576  +
cmp byte ptr [esp+13Ch+var_F4] 0 +
jz loc_46469E  +
mov eax [esp+13Ch+var_AC] +
test eax eax +
jnz loc_46469E  +
test byte ptr [esi+33h] 10h +
jz loc_464CAE  +
mov eax [esp+13Ch+var_3C] +
test eax eax +
jz loc_4662B2  +
test byte ptr [eax+2Ah] 20h +
jnz loc_464CAE  +
mov edx [ebp+0A0h] +
mov edi [edx+220h] +
jmp loc_464D27  +
mov eax [esp+13Ch+var_108] +
mov [esp+13Ch+var_124] 0 +
mov [esp+13Ch+var_128] 0 +
mov [esp+13Ch+var_12C] 0 +
mov [esp+13Ch+var_130] eax +
mov eax [esp+13Ch+var_D0] +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+var_E4] +
mov [esp+13Ch+var_138] eax +
call sub_475A20  +
test eax eax +
mov [esp+13Ch+var_D4] eax +
jz loc_463A40  +
mov eax [esp+13Ch+var_F0] +
test eax eax +
jnz loc_463B35  +
mov eax [esp+13Ch+var_D0] +
mov [esp+13Ch+var_13C] ebp +
shl eax 2 +
mov [esp+13Ch+var_138] eax +
call sub_458B60  +
test eax eax +
mov edi eax +
mov [esp+13Ch+var_F0] eax +
jz loc_463C63  +
mov eax [ebp+0A0h] +
mov [eax+218h] edi +
jmp loc_463B35  +
***
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax+4] +
mov [esp+13Ch+var_13C] ebp +
shr al 2 +
and eax 1 +
mov [esp+13Ch+var_138] eax +
call sub_47F1A0  +
test eax eax +
jz loc_463C57  +
mov ebx [ebp+0A0h] +
mov [esp+13Ch+var_C0] 0 +
mov esi [ebx+914h] +
test esi esi +
jz loc_463B4F  +
mov eax [ebx+178h] +
mov [esp+13Ch+var_13C] eax +
call sub_459B80  +
test eax eax +
mov [esp+13Ch+var_C0] eax +
jz loc_463C57  +
mov eax [ebx+170h] +
mov edx [ebx+174h] +
mov esi [ebx+178h] +
mov [esp+13Ch+var_130] 0 +
mov [esp+13Ch+var_138] eax +
mov [esp+13Ch+var_134] edx +
mov [esp+13Ch+var_13C] ebp +
call sub_46FCE0  +
test eax eax +
jnz loc_463C47  +
mov eax [esp+13Ch+var_C0] +
mov [esp+13Ch+var_134] ebp +
mov [esp+13Ch+var_138] esi +
mov [esp+13Ch+var_13C] eax +
call sub_46FAD0  +
cmp esi eax +
jnz loc_463C47  +
mov ebx [ebp+0A0h] +
jmp loc_463B4F  +
mov eax [esp+13Ch+var_5C] +
movzx edx byte ptr [esi+34h] +
mov [esp+13Ch+var_88] eax +
mov eax [esp+13Ch+var_54] +
test dl 2 +
mov [esp+13Ch+var_84] edx +
mov ecx eax +
mov [esp+13Ch+var_F4] eax +
mov eax [esp+13Ch+var_60] +
mov [esp+13Ch+var_34] eax +
jnz loc_464A28  +
mov [esp+13Ch+var_138] 40h +
mov [esp+13Ch+var_13C] ecx +
call strchr  +
mov edx [esp+13Ch+var_84] +
and edx 6 +
mov [esp+13Ch+var_B4] eax +
jnz loc_4656C7  +
test eax eax +
jz loc_4664D9  +
mov eax [esp+13Ch+var_B4] +
cmp byte ptr [eax+1] 40h +
jz loc_4661C5  +
or byte ptr [esi+34h] 6 +
jmp loc_464A28  +
mov eax [esi+14h] +
mov [eax] edx +
jmp loc_464690  +
xor eax eax +
mov ecx [esp+13Ch+var_54] +
xor esi esi +
mov word ptr [esp+13Ch+var_18] ax +
mov eax [esp+13Ch+var_F4] +
jmp loc_464477  +
mov eax [esp+13Ch+var_18] +
mov [esp+13Ch+var_13C] eax +
call free  +
xor eax eax +
jmp loc_463A42  +
movzx eax byte ptr [esi+30h] +
jmp loc_464B75  +
mov edx [esi+18h] +
mov [esi+2Ch] edx +
jmp loc_464B36  +
mov ebx [esp+13Ch+var_108] +
mov [esp+13Ch+var_AC] 0 +
jmp loc_46469E  +
mov [esp+13Ch+var_B4] 0 +
mov edx offset unk_4FF798 +
jmp loc_4643B7  +
mov eax [ebx] +
mov [esp+13Ch+var_13C] eax +
call sub_45A590  +
jmp loc_464869  +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_12C] ecx +
mov [esp+13Ch+var_130] esi +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_134] eax +
mov [esp+13Ch+var_13C] offset aBSInvalidVersi +
call off_4BFA04  +
mov [esp+13Ch+var_13C] 11h +
call sub_44BAF0  +
jmp loc_464E63  +
mov [esp+13Ch+var_F0] 0 +
mov [esp+13Ch+var_F4] 0 +
mov ecx [esp+13Ch+var_1C] +
test ecx ecx +
jz loc_4661B1  +
mov [esp+13Ch+var_20] ecx +
mov eax [esp+13Ch+var_FC] +
mov edx [eax+0C4h] +
test edx edx +
jnz loc_4654C2  +
jmp loc_46649D  +
mov edx eax +
mov eax [edx] +
test eax eax +
jnz loc_4654C0  +
mov [edx] ecx +
mov [esp+13Ch+var_13C] ebp +
call sub_44D460  +
mov eax [esp+13Ch+var_F4] +
test eax eax +
jz loc_4655C8  +
cmp byte ptr [eax] 0 +
jz loc_4655C8  +
mov eax [ebp+0A0h] +
mov edi [esp+13Ch+var_F4] +
xor ecx ecx +
test byte ptr [esp+13Ch+var_E4] 0Bh +
mov edx [esp+13Ch+arg_4] +
setz cl  +
mov [eax+220h] edi +
mov eax ebp +
mov [esp+13Ch+var_AC] ecx +
mov [esp+13Ch+var_13C] ecx +
mov ecx edi +
call sub_463230  +
test eax eax +
js loc_463A40  +
jnz loc_4635ED  +
mov eax [ebp+0A0h] +
mov edi [esp+13Ch+var_F0] +
mov [eax+224h] edi +
mov ecx [ebp+0A0h] +
mov eax [ecx+910h] +
test eax eax +
jz loc_463AD2  +
lea eax [ecx+0F0h] +
mov [esp+13Ch+var_E4] eax +
jmp loc_463AD9  +
mov eax [ebx] +
mov [esp+13Ch+var_13C] eax +
call sub_45A590  +
mov edx [esp+13Ch+var_3C] +
mov [esp+13Ch+var_E8] ebp +
jmp loc_464AB7  +
mov eax [esp+13Ch+var_104] +
mov edi [esp+13Ch+arg_4] +
mov eax [eax+0DCh] +
mov [esp+13Ch+var_134] 1 +
mov [esp+13Ch+var_138] esi +
mov [esp+13Ch+var_13C] edi +
call eax  +
jmp loc_464C95  +
mov eax [esp+13Ch+var_F4] +
mov eax [eax+0A0h] +
lea ecx [eax+0F0h] +
mov [esp+13Ch+var_E8] ecx +
mov ecx [eax+910h] +
mov [esp+13Ch+var_F0] eax +
test ecx ecx +
jnz loc_463F4D  +
jmp loc_463F42  +
mov eax [ebp+0A0h] +
mov edi [eax+220h] +
test edi edi +
mov [esp+13Ch+var_F4] edi +
jz loc_4655E5  +
cmp byte ptr [edi] 0 +
jnz loc_4654ED  +
mov edi [ebp+0] +
mov [esp+13Ch+var_F4] edi +
jmp loc_4654ED  +
mov edx [esi+2Ch] +
test edx edx +
jz loc_464B27  +
cmp eax edx +
jz loc_464B27  +
mov edi [esp+13Ch+var_50] +
test edi edi +
jnz loc_464B27  +
mov [esp+13Ch+var_128] eax +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_12C] edx +
mov [esp+13Ch+var_134] ebp +
mov [esp+13Ch+var_13C] offset aWarningSizeOfS +
mov [esp+13Ch+var_130] eax +
mov eax [esp+13Ch+var_3C] +
mov [esp+13Ch+var_138] eax +
call off_4BFA04  +
mov eax [ebx+4] +
jmp loc_464B27  +
mov [esp+13Ch+var_C8] 0 +
jmp loc_463C28  +
or eax 2 +
test al 8 +
mov [esi+33h] al +
jz loc_4649D6  +
and eax 0FFFFFFF7h +
or eax 4 +
mov [esi+33h] al +
jmp loc_4649D6  +
movzx edx word ptr [eax+18h] +
and dx 380h +
cmp dx 100h +
jz loc_46496D  +
cmp dx 200h +
jz loc_46496D  +
mov [esp+13Ch+var_5C] offset off_4BFAE8 +
mov dword ptr [ebx+10h] 0 +
jmp loc_4641C7  +
or byte ptr [esi+33h] 8 +
or byte ptr [edi+33h] 8 +
jmp loc_464E8B  +
test byte ptr [ebp+29h] 8 +
mov edx 2 +
cmovnz ecx edx +
jmp loc_464B81  +
mov eax [esp+13Ch+var_B4] +
test eax eax +
jz loc_464A28  +
mov eax [ebp+4] +
mov edi [esp+13Ch+arg_4] +
mov eax [eax+1B0h] +
mov [esp+13Ch+var_7C] eax +
movzx eax byte ptr [eax+1ACh] +
mov byte ptr [esp+13Ch+var_78] al +
mov eax [ebp+28h] +
and byte ptr [esp+13Ch+var_78] 1 +
mov [esp+13Ch+var_80] eax +
mov eax [esp+13Ch+var_B4] +
sub eax [esp+13Ch+var_F4] +
shr [esp+13Ch+var_80] 5 +
and [esp+13Ch+var_80] 3FFFFh +
mov [esp+13Ch+var_84] eax +
add eax 1 +
mov [esp+13Ch+var_138] eax +
mov eax [edi+1Ch] +
mov [esp+13Ch+var_13C] eax +
call sub_44E3F0  +
test eax eax +
mov edi eax +
jz loc_464E63  +
mov edx [esp+13Ch+var_F4] +
mov eax [esp+13Ch+var_84] +
mov [esp+13Ch+var_13C] edi +
mov [esp+13Ch+var_138] edx +
mov [esp+13Ch+var_134] eax +
call memcpy  +
mov eax [esp+13Ch+var_84] +
mov ecx edi +
mov edx [esp+13Ch+arg_4] +
mov byte ptr [edi+eax] 0 +
mov eax [esp+13Ch+var_88] +
mov [esp+13Ch+var_124] 0 +
mov [esp+13Ch+var_128] 0 +
mov [esp+13Ch+var_13C] ebx +
mov [esp+13Ch+var_18] eax +
lea eax [esp+13Ch+var_14] +
mov [esp+13Ch+var_110] eax +
lea eax [esp+13Ch+var_2C] +
mov [esp+13Ch+var_114] eax +
lea eax [esp+13Ch+var_30] +
mov [esp+13Ch+var_118] eax +
lea eax [esp+13Ch+var_1C] +
mov [esp+13Ch+var_11C] eax +
lea eax [esp+13Ch+var_28] +
mov [esp+13Ch+var_120] eax +
lea eax [esp+13Ch+var_3C] +
mov [esp+13Ch+var_12C] eax +
lea eax [esp+13Ch+var_24] +
mov [esp+13Ch+var_130] eax +
lea eax [esp+13Ch+var_34] +
mov [esp+13Ch+var_134] eax +
lea eax [esp+13Ch+var_18] +
mov [esp+13Ch+var_138] eax +
mov eax ebp +
mov [esp+13Ch+var_30] 0 +
mov [esp+13Ch+var_2C] 0 +
mov [esp+13Ch+var_14] 1 +
call sub_460D20  +
test eax eax +
jz loc_464E63  +
movzx eax byte ptr [esp+13Ch+var_78] +
mov [esp+13Ch+var_78] eax +
mov eax [esp+13Ch+var_80] +
shr eax 6 +
mov [esp+13Ch+var_80] eax +
mov eax [esp+13Ch+var_28] +
and [esp+13Ch+var_80] 1 +
test eax eax +
jnz loc_4658FA  +
mov eax [esp+13Ch+var_1C] +
test eax eax +
jz loc_466342  +
mov eax [esp+13Ch+var_24] +
movzx edi byte ptr [eax+0Ch] +
lea edx [edi-6] +
mov edi [esp+13Ch+var_F8] +
cmp dl 1 +
ja loc_4658A8  +
mov eax [eax+14h] +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-6] +
cmp dl 1 +
jbe loc_46588E  +
mov [esp+13Ch+var_F8] edi +
mov [esp+13Ch+var_24] eax +
movzx edx byte ptr [esi+33h] +
mov byte ptr [esi+0Ch] 6 +
mov [esi+14h] eax +
test dl 8 +
jz loc_4658D1  +
and edx 0FFFFFFF7h +
mov [esi+33h] dl +
movzx edx byte ptr [eax+33h] +
or edx 4 +
mov [eax+33h] dl +
and dl 3 +
jnz loc_466853  +
mov [esp+13Ch+var_24] esi +
mov eax esi +
movzx edx byte ptr [eax+0Ch] +
cmp dl 7 +
jnz loc_4658F1  +
mov eax [eax+14h] +
movzx edx byte ptr [eax+0Ch] +
mov [esp+13Ch+var_24] eax +
cmp dl 6 +
jz loc_4664EB  +
mov eax [esp+13Ch+var_F4] +
mov [esp+13Ch+var_13C] eax +
call strlen  +
mov edi [esp+13Ch+arg_4] +
mov [esp+13Ch+var_70] eax +
mov [esp+13Ch+var_138] eax +
mov eax [edi+1Ch] +
mov [esp+13Ch+var_13C] eax +
call sub_44E3F0  +
test eax eax +
mov edi eax +
jz loc_464E63  +
mov edx [esp+13Ch+var_84] +
mov ecx [esp+13Ch+var_F4] +
mov [esp+13Ch+var_13C] eax +
mov [esp+13Ch+var_134] edx +
mov [esp+13Ch+var_138] ecx +
call memcpy  +
mov edx [esp+13Ch+var_84] +
mov eax edi +
mov ecx [esp+13Ch+var_70] +
mov [esp+13Ch+var_74] edi +
add eax edx +
sub ecx edx +
mov edx [esp+13Ch+var_B4] +
mov [esp+13Ch+var_134] ecx +
mov [esp+13Ch+var_13C] eax +
add edx 1 +
mov [esp+13Ch+var_138] edx +
call memcpy  +
mov edi [esp+13Ch+var_88] +
mov eax ebp +
mov edx [esp+13Ch+arg_4] +
mov [esp+13Ch+var_124] 0 +
mov [esp+13Ch+var_128] 0 +
mov [esp+13Ch+var_18] edi +
lea edi [esp+13Ch+var_14] +
mov [esp+13Ch+var_110] edi +
lea edi [esp+13Ch+var_2C] +
mov [esp+13Ch+var_114] edi +
lea edi [esp+13Ch+var_30] +
mov [esp+13Ch+var_118] edi +
lea edi [esp+13Ch+var_1C] +
mov [esp+13Ch+var_11C] edi +
lea edi [esp+13Ch+var_28] +
mov [esp+13Ch+var_120] edi +
lea edi [esp+13Ch+var_3C] +
mov [esp+13Ch+var_12C] edi +
lea edi [esp+13Ch+var_24] +
mov [esp+13Ch+var_130] edi +
lea edi [esp+13Ch+var_34] +
mov [esp+13Ch+var_134] edi +
lea edi [esp+13Ch+var_18] +
mov [esp+13Ch+var_138] edi +
mov edi [esp+13Ch+var_74] +
mov [esp+13Ch+var_13C] ebx +
mov [esp+13Ch+var_30] 0 +
mov [esp+13Ch+var_2C] 0 +
mov ecx edi +
call sub_460D20  +
test eax eax +
jz loc_464E63  +
mov ecx [esp+13Ch+var_28] +
test ecx ecx +
jnz loc_464A28  +
cmp [esp+13Ch+var_1C] 0 +
mov eax [esp+13Ch+var_24] +
jz loc_46671D  +
movzx eax byte ptr [eax+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_464A28  +
mov [esp+13Ch+var_134] edi +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_13C] offset aBUnexpectedRed +
call off_4BFA04  +
jmp loc_464A28  +
mov eax [esp+13Ch+arg_4] +
mov edi [ebp+4] +
mov eax [eax+30h] +
cmp [eax+4] edi +
jnz loc_463AC1  +
mov eax [esp+13Ch+var_FC] +
cmp dword ptr [eax+30h] 0 +
jnz loc_463AC1  +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_138] eax +
call sub_460820  +
test eax eax +
jnz loc_463AC1  +
xor eax eax +
jmp loc_463A42  +
***
mov esi [esp+13Ch+var_FC] +
mov ecx [esp+13Ch+var_B8] +
mov ebx [esp+13Ch+var_A8] +
mov eax [esi] +
mov [esp+13Ch+var_13C] ecx +
mov edi ecx +
mov [esp+13Ch+var_134] ebx +
add edi ebx +
mov [esp+13Ch+var_138] eax +
call memcpy  +
mov ecx [esi+1Ch] +
mov eax [esi+50h] +
mov [esp+13Ch+var_9C] ecx +
mov ecx [esi+20h] +
mov [esp+13Ch+var_98] ecx +
mov ecx [esi] +
mov [esp+13Ch+var_94] ecx +
mov ecx [esi+0Ch] +
mov [esp+13Ch+var_90] ecx +
mov ecx [esi+10h] +
mov [esp+13Ch+var_8C] ecx +
mov ecx [esi+4Ch] +
mov [esp+13Ch+var_13C] eax +
mov [esp+13Ch+var_D8] ecx +
call sub_488870  +
mov ecx [esi+0Ch] +
test ecx ecx +
mov [esp+13Ch+var_BC] eax +
jz loc_4640C5  +
xor ebx ebx +
mov [esp+13Ch+arg_0] ebp +
mov ebp edi +
mov edi ebx +
mov ebx esi +
mov eax [ebx] +
mov esi [eax+edi*4] +
test esi esi +
jz loc_465BAB  +
mov eax [ebx+14h] +
jmp loc_465B76  +
***
mov esi [esi] +
test esi esi +
jz loc_465BAB  +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_134] eax +
mov [esp+13Ch+var_138] esi +
call memcpy  +
mov eax [ebx+14h] +
add ebp eax +
cmp byte ptr [esi+0Ch] 7 +
jnz loc_465B70  +
mov edx [esi+14h] +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_134] eax +
mov [esp+13Ch+var_138] edx +
call memcpy  +
mov eax [ebx+14h] +
add ebp eax +
jmp loc_465B70  +
add edi 1 +
cmp edi [ebx+0Ch] +
jb loc_465B5C  +
mov ebp [esp+13Ch+arg_0] +
jmp loc_4640C5  +
mov edx edi +
mov [esp+13Ch+var_F0] 0 +
mov [esp+13Ch+var_F4] 0 +
mov [esp+13Ch+var_13C] edx +
call free  +
jmp loc_465497  +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_138] esi +
mov [esp+13Ch+var_13C] eax +
call sub_460C40  +
test eax eax +
jz loc_464E63  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_4651BC  +
mov edx [esp+13Ch+var_C4] +
test edx edx +
jnz loc_4651BC  +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
jnz loc_4651BC  +
mov [esp+13Ch+var_138] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_13C] eax +
call sub_460C40  +
test eax eax +
jnz loc_4651BC  +
jmp loc_464E63  +
***
xor eax eax +
jmp loc_463BB0  +
mov ebp [esp+13Ch+arg_0] +
mov eax [esp+13Ch+var_C8] +
mov [esp+13Ch+var_13C] eax +
call free  +
mov eax [esp+13Ch+var_CC] +
test eax eax +
jz loc_465CF9  +
mov ebx [esp+13Ch+var_D0] +
shl ebx 2 +
mov [esp+13Ch+var_13C] ebx +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_463A40  +
mov eax [ebp+0A0h] +
mov esi [eax+218h] +
lea eax [esi+ebx] +
cmp esi eax +
mov [esp+13Ch+var_108] eax +
jnb loc_465FED  +
mov ecx edi +
mov [esp+13Ch+var_F4] 0 +
jmp loc_465CB3  +
add esi 4 +
cmp [esp+13Ch+var_108] esi +
jbe loc_465FF5  +
mov ebx [esi] +
test ebx ebx +
jz loc_465CA6  +
cmp byte ptr [ebx+0Ch] 3 +
jnz loc_465CA6  +
mov eax [esp+13Ch+var_104] +
movzx edx byte ptr [ebx+30h] +
mov [esp+13Ch+var_F8] ecx +
mov eax [eax+158h] +
mov [esp+13Ch+var_13C] edx +
call eax  +
mov ecx [esp+13Ch+var_F8] +
test eax eax +
jnz loc_465CA6  +
mov [ecx] ebx +
add ecx 4 +
add [esp+13Ch+var_F4] 1 +
jmp loc_465CA6  +
mov [esp+13Ch+var_13C] edi +
mov ebp [esp+13Ch+arg_0] +
call free  +
mov eax [esp+13Ch+var_104] +
mov eax [eax+7Ch] +
test eax eax +
jz loc_465D1C  +
mov edi [esp+13Ch+arg_4] +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_138] edi +
call eax  +
test eax eax +
jz loc_463A40  +
mov edi [esp+13Ch+var_100] +
test edi edi +
jnz loc_46632F  +
mov eax [esp+13Ch+var_FC] +
cmp dword ptr [eax+28h] 1 +
jz loc_466618  +
mov eax [esp+13Ch+arg_4] +
test byte ptr [eax+4] 1 +
jnz loc_46632F  +
mov eax [esp+13Ch+var_FC] +
cmp dword ptr [eax+28h] 1 +
jnz loc_4635ED  +
mov eax [esp+13Ch+arg_4] +
test byte ptr [eax+1] 8 +
jz loc_4662C5  +
cmp [esp+13Ch+var_AC] 0 +
jz loc_4635ED  +
mov [esp+13Ch+var_138] 8 +
mov [esp+13Ch+var_13C] ebp +
call sub_458A80  +
test eax eax +
jz loc_463A40  +
mov edi [esp+13Ch+var_FC] +
mov [eax+4] ebp +
mov edx [edi+0D0h] +
mov [eax] edx +
mov [edi+0D0h] eax +
mov eax 1 +
jmp loc_463653  +
***
lea edx [eax+64h] +
jmp loc_465078  +
***
lea edx [esp+120h] +
jmp loc_464FC8  +
***
mov edx [eax+218h] +
mov eax [esp+13Ch+var_D0] +
mov [esp+13Ch+var_138] 0 +
mov ebx [esp+13Ch+var_B8] +
mov esi [esp+13Ch+var_A8] +
mov [esp+13Ch+var_13C] edx +
shl eax 2 +
mov [esp+13Ch+var_134] eax +
call memset  +
mov eax [esp+13Ch+var_FC] +
add esi ebx +
mov ecx [esp+13Ch+var_94] +
mov edi [esp+13Ch+var_90] +
mov edx [esp+13Ch+var_8C] +
mov [eax] ecx +
mov [eax+0Ch] edi +
mov edi eax +
mov [eax+10h] edx +
mov eax [esp+13Ch+var_A8] +
mov [esp+13Ch+var_13C] ecx +
mov [esp+13Ch+var_138] ebx +
mov [esp+13Ch+var_134] eax +
call memcpy  +
mov eax edi +
mov edi [esp+13Ch+var_9C] +
mov ecx [esp+13Ch+var_BC] +
mov [eax+1Ch] edi +
mov edi [esp+13Ch+var_98] +
mov [eax+20h] edi +
mov edi eax +
mov eax [eax+50h] +
mov [esp+13Ch+var_138] ecx +
mov [esp+13Ch+var_13C] eax +
call sub_4887F0  +
mov eax [edi+0Ch] +
mov [esp+13Ch+var_100] 0 +
test eax eax +
jz loc_465F69  +
mov [esp+13Ch+arg_0] ebp +
mov ebp [esp+13Ch+var_FC] +
mov eax [ebp+0] +
mov edi [esp+13Ch+var_100] +
mov ebx [eax+edi*4] +
test ebx ebx +
jnz loc_465EE1  +
jmp loc_465F50  +
***
mov edi [esp+13Ch+var_D8] +
cmp [eax+20h] edi +
jl loc_465EA5  +
mov edx [eax+38h] +
cmp [esp+13Ch+var_BC] edx +
ja loc_465F15  +
xor edi edi +
cmp byte ptr [eax+0Ch] 5 +
mov [esp+13Ch+var_108] 0 +
jz loc_465F07  +
mov eax [ebp+14h] +
mov [esp+13Ch+var_138] esi +
mov [esp+13Ch+var_13C] ebx +
mov [esp+13Ch+var_134] eax +
call memcpy  +
mov edx [ebp+14h] +
mov ecx ebx +
movzx eax byte ptr [ebx+0Ch] +
add esi edx +
cmp al 7 +
jz loc_465F31  +
cmp al 5 +
jz loc_465EF0  +
mov ebx [ebx] +
test ebx ebx +
jz loc_465F50  +
cmp byte ptr [ebx+0Ch] 7 +
mov eax ebx +
jnz loc_465E90  +
mov eax [ebx+14h] +
jmp loc_465E90  +
***
cmp [ecx+18h] edi +
jnb loc_465EF8  +
mov [ecx+18h] edi +
mov eax [ecx+14h] +
mov edi [esp+13Ch+var_108] +
cmp [eax] edi +
jnb loc_465EDB  +
mov [eax] edi +
jmp loc_465EDB  +
mov edi [eax+18h] +
mov eax [eax+14h] +
mov eax [eax] +
mov [esp+13Ch+var_108] eax +
jmp loc_465EB5  +
mov ecx [ebp+50h] +
mov [esp+13Ch+var_138] edx +
mov [esp+13Ch+var_108] eax +
mov [esp+13Ch+var_13C] ecx +
call sub_488700  +
mov eax [esp+13Ch+var_108] +
jmp loc_465EA5  +
mov eax [ebx+14h] +
mov [esp+13Ch+var_138] esi +
mov [esp+13Ch+var_134] edx +
mov [esp+13Ch+var_13C] eax +
call memcpy  +
mov ecx [ebx+14h] +
add esi [ebp+14h] +
movzx eax byte ptr [ecx+0Ch] +
jmp loc_465ED7  +
add [esp+13Ch+var_100] 1 +
mov eax [esp+13Ch+var_100] +
cmp eax [ebp+0Ch] +
jb loc_465E76  +
mov ebp [esp+13Ch+arg_0] +
mov eax [esp+13Ch+var_104] +
mov edi [esp+13Ch+arg_4] +
mov eax [eax+80h] +
mov [esp+13Ch+var_134] 1 +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_13C] ebp +
call eax  +
mov [esp+13Ch+var_D4] 0 +
mov [esp+13Ch+var_C0] 0 +
test eax eax +
jz loc_464E63  +
mov eax [esp+13Ch+var_B8] +
mov [esp+13Ch+var_13C] eax +
call free  +
mov eax [esp+13Ch+var_FC] +
mov edi [esp+13Ch+var_A4] +
mov eax [eax+8] +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_13C] eax +
call sub_4A9EB0  +
cmp [esp+13Ch+var_C8] 0 +
jz loc_4635ED  +
mov eax [esp+13Ch+var_C8] +
mov [esp+13Ch+var_13C] eax +
call free  +
mov eax 1 +
jmp loc_463653  +
mov [esp+13Ch+var_F4] 0 +
mov eax [esp+13Ch+var_F4] +
mov [esp+13Ch+var_130] offset sub_45C110 +
mov [esp+13Ch+var_134] 4 +
mov [esp+13Ch+var_13C] edi +
mov [esp+13Ch+var_138] eax +
call qsort  +
mov [esp+13Ch+arg_0] ebp +
mov eax [esp+13Ch+var_CC] +
mov ecx [eax+3Ch] +
mov dword ptr [eax+3Ch] 0 +
movzx eax byte ptr [eax+0Ch] +
mov [esp+13Ch+var_108] ecx +
mov byte ptr [esp+13Ch+var_F8] al +
sub eax 3 +
cmp al 3 +
ja loc_4660E1  +
mov eax [esp+13Ch+var_CC] +
xor ecx ecx +
mov ebp [eax+14h] +
mov esi [eax+18h] +
mov eax [esp+13Ch+var_F4] +
test eax eax +
mov edx eax +
jnz loc_466069  +
jmp loc_4660C8  +
***
jz loc_466080  +
lea ecx [eax+1] +
cmp ecx edx +
jz loc_4660C8  +
lea eax [edx+ecx] +
shr eax 1 +
mov ebx [edi+eax*4] +
cmp esi [ebx+18h] +
jns loc_466060  +
mov edx eax +
jmp loc_466065  +
***
mov ebx [ebx+14h] +
mov ebx [ebx+4] +
cmp [ebp+4] ebx +
js loc_466076  +
jnz loc_466062  +
jmp loc_46609D  +
***
mov ebx [edi+eax*4] +
cmp ebp [ebx+14h] +
jnz loc_4660A4  +
cmp esi [ebx+18h] +
jnz loc_4660A4  +
add eax 1 +
cmp eax edx +
jnz loc_466090  +
sub eax 1 +
sub ecx 1 +
mov edx [esp+13Ch+var_CC] +
jmp loc_4660C4  +
mov ebx [edi+eax*4] +
cmp ebp [ebx+14h] +
jnz loc_4660C8  +
cmp esi [ebx+18h] +
jnz loc_4660C8  +
sub eax 1 +
cmp edx ebx +
jnz loc_4660FA  +
cmp eax ecx +
jnz loc_4660B0  +
mov ebp [esp+13Ch+var_108] +
test ebp ebp +
jz loc_465CEA  +
mov eax [esp+13Ch+var_108] +
mov [esp+13Ch+var_CC] eax +
jmp loc_46601C  +
mov [esp+13Ch+var_138] 12D6h +
mov [esp+13Ch+var_13C] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_466041  +
mov eax [esp+13Ch+var_CC] +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
mov [eax+3Ch] ebx +
jz loc_466124  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jnz loc_4660C8  +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_138] ebx +
mov [esp+13Ch+var_13C] eax +
call sub_460C40  +
test eax eax +
jz loc_466151  +
mov eax [ebx+20h] +
cmp eax 0FFFFFFFFh +
jz loc_4660C8  +
mov eax [esp+13Ch+var_CC] +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
jnz loc_4660C8  +
mov [esp+13Ch+var_138] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_13C] eax +
call sub_460C40  +
test eax eax +
jnz loc_4660C8  +
mov [esp+13Ch+var_13C] edi +
call free  +
xor eax eax +
jmp loc_463653  +
mov edi [esi+14h] +
mov dl 1 +
movzx ecx byte ptr [esp+13Ch+var_F4] +
mov [esp+13Ch+var_13C] offset aWarningAlign_0 +
mov [esp+13Ch+var_B4] edi +
mov edi edx +
shl edi cl +
mov ecx [esp+13Ch+var_54] +
mov [esp+13Ch+var_128] edi +
mov edi [esp+13Ch+var_B4] +
mov [esp+13Ch+var_12C] ecx +
mov ecx eax +
mov eax [esp+13Ch+var_E8] +
shl edx cl +
mov [esp+13Ch+var_130] edx +
mov [esp+13Ch+var_134] edi +
mov [esp+13Ch+var_138] eax +
call off_4BFA04  +
jmp loc_464B06  +
mov ecx [esp+13Ch+var_20] +
test ecx ecx +
jz loc_4654CA  +
jmp loc_4654AD  +
movzx eax byte ptr [esi+34h] +
and eax 0FFFFFFF9h +
or eax 4 +
mov [esi+34h] al +
jmp loc_4656D6  +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_12C] ecx +
mov [esp+13Ch+var_E8] ecx +
mov [esp+13Ch+var_130] edx +
mov [esp+13Ch+var_134] eax +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_13C] offset aWarningTypeOfS +
call off_4BFA04  +
mov ecx [esp+13Ch+var_E8] +
jmp loc_464B9B  +
mov ecx esi +
mov edi [esp+13Ch+var_E0] +
movzx edx byte ptr [ecx+0Ch] +
mov ebp [esp+13Ch+var_DC] +
mov esi [esp+13Ch+var_E8] +
mov eax edx +
shr al 4 +
cmp al 9 +
ja loc_46622B  +
sub al 1 +
jnz loc_464049  +
mov eax [esp+13Ch+var_F4] +
mov [esp+13Ch+var_F0] ecx +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+13Ch+var_F4] eax +
mov eax [eax+158h] +
mov ecx eax +
mov eax edx +
and eax 0Fh +
mov [esp+13Ch+var_13C] eax +
call ecx  +
test eax eax +
jnz loc_464049  +
mov ecx [esp+13Ch+var_F0] +
cmp dword ptr [ecx+10h] 0 +
jz loc_464049  +
mov eax [esp+13Ch+var_F4] +
mov [esp+13Ch+var_F4] ecx +
mov eax [eax+144h] +
mov [esp+13Ch+var_13C] ecx +
call eax  +
test eax eax +
jnz loc_464049  +
mov ecx [esp+13Ch+var_F4] +
mov eax [ecx+10h] +
mov ecx [esp+13Ch+var_E4] +
add eax 100h +
mov [esp+13Ch+var_13C] ecx +
mov [esp+13Ch+var_F4] eax +
call free  +
cmp [esp+13Ch+var_F4] 0F0h +
ja loc_4638EC  +
jmp loc_463888  +
mov eax [ebp+0A0h] +
mov edi [eax+220h] +
xor eax eax +
jmp loc_464D27  +
mov [esp+13Ch+var_138] offset a_stabstr_0 +
mov [esp+13Ch+var_13C] ebp +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jz loc_46632F  +
mov eax [esp+13Ch+var_FC] +
mov [esp+13Ch+var_14] 0 +
mov esi [ebp+64h] +
sub eax 0FFFFFF80h +
mov [esp+13Ch+var_108] eax +
jmp loc_46632B  +
mov edi [esi] +
mov [esp+13Ch+var_134] 5 +
mov [esp+13Ch+var_138] offset a_stab_0 +
mov [esp+13Ch+var_13C] edi +
call strncmp  +
test eax eax +
jnz loc_466328  +
movzx eax byte ptr [edi+5] +
test al al +
jz loc_466885  +
cmp al 2Eh +
jz loc_466873  +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_4662F6  +
mov eax [esp+13Ch+var_FC] +
cmp dword ptr [eax+28h] 1 +
jz loc_465D66  +
jmp loc_4635ED  +
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
mov eax [esp+13Ch+var_24] +
jz loc_4658DA  +
mov [esp+13Ch+var_20] eax +
lea eax [esp+13Ch+var_20] +
mov [esp+13Ch+var_118] eax +
mov eax [esp+13Ch+var_78] +
mov [esp+13Ch+var_120] 0 +
mov [esp+13Ch+var_128] 0 +
mov [esp+13Ch+var_12C] offset off_4BFC38 +
mov [esp+13Ch+var_11C] eax +
mov eax [esp+13Ch+var_F4] +
mov [esp+13Ch+var_130] 2000h +
mov [esp+13Ch+var_134] edi +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_124] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_13C] eax +
call sub_450D00  +
test eax eax +
jz loc_464E63  +
mov eax [esp+13Ch+var_20] +
mov [esp+13Ch+var_24] eax +
jmp loc_4658DA  +
mov eax [esp+13Ch+var_E0] +
sub eax ebx +
sar eax 2 +
imul eax eax +
lea eax ds:4[eax*4] +
mov [esp+13Ch+var_13C] eax +
call sub_459B80  +
test eax eax +
mov [esp+13Ch+var_C8] eax +
jnz loc_464C71  +
jmp loc_464E63  +
mov eax [ebx+18h] +
cmp [edi+18h] eax +
jnz loc_46482A  +
mov eax [ebx+14h] +
cmp [edi+14h] eax +
jnz loc_46482A  +
mov eax [esp+13Ch+var_104] +
mov ecx [esp+13Ch+arg_4] +
mov eax [eax+0DCh] +
mov [esp+13Ch+var_13C] ecx +
mov [esp+13Ch+var_134] 1 +
mov [esp+13Ch+var_138] edi +
call eax  +
mov eax [esp+13Ch+var_104] +
mov ecx [esp+13Ch+arg_4] +
mov [edi+14h] ebx +
mov byte ptr [edi+0Ch] 6 +
mov eax [eax+0D8h] +
mov [esp+13Ch+var_134] edi +
mov [esp+13Ch+var_138] ebx +
mov [esp+13Ch+var_13C] ecx +
call eax  +
mov eax [esp+13Ch+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+218h] +
test eax eax +
jz loc_46482A  +
xor ecx ecx +
cmp ecx [esp+13Ch+var_D0] +
jz loc_46482A  +
mov edx eax +
add eax 4 +
cmp edi [eax-4] +
jz loc_466594  +
add ecx 1 +
jmp loc_466480  +
lea edx [eax+0C4h] +
jmp loc_4654C8  +
mov [esp+13Ch+var_134] 101401h +
mov [esp+13Ch+var_138] offset a_tcommon +
mov [esp+13Ch+var_13C] ebp +
call sub_44D970  +
test eax eax +
jnz loc_4648C8  +
jmp loc_464E63  +
***
lea edx [esp+11Ch] +
jmp loc_463E9E  +
***
movzx eax byte ptr [esi+34h] +
and eax 0FFFFFFF9h +
or eax 2 +
mov [esi+34h] al +
jmp loc_464A28  +
mov edi [eax+14h] +
mov ecx edi +
mov edi [esp+13Ch+var_7C] +
mov edx [edi+0D8h] +
mov edi ecx +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_138] ecx +
mov [esp+13Ch+var_13C] eax +
call edx  +
movzx edx byte ptr [edi+35h] +
mov eax [esp+13Ch+var_24] +
mov [esp+13Ch+var_74] edi +
mov ecx edx +
and edx 0FFFFFFFEh +
or cl [eax+35h] +
mov edi ecx +
and edi 1 +
or edx edi +
mov edi [esp+13Ch+var_74] +
mov [edi+35h] dl +
movzx edx byte ptr [eax+34h] +
mov ecx edx +
and edx 7Fh +
or ecx [edi+34h] +
and ecx 0FFFFFF80h +
or edx ecx +
mov [eax+34h] dl +
cmp [esp+13Ch+var_F8] 0 +
jnz loc_4665AD  +
cmp [esp+13Ch+var_80] 0 +
jnz loc_46659B  +
mov edi [esp+13Ch+arg_4] +
mov [esp+13Ch+var_F8] 1 +
movzx edx byte ptr [edi] +
and edx 3 +
cmp dl 1 +
ja loc_4658FA  +
test byte ptr [eax+33h] 0Ch +
setnz al  +
movzx eax al +
mov [esp+13Ch+var_F8] eax +
jmp loc_4658FA  +
mov [edx] ebx +
jmp loc_46482A  +
movzx eax byte ptr [eax+33h] +
mov edi eax +
and edi 1 +
mov [esp+13Ch+var_F8] edi +
jmp loc_4658FA  +
mov [esp+13Ch+var_F8] 1 +
jmp loc_4658FA  +
mov eax [esp+13Ch+var_54] +
mov [esp+13Ch+var_138] ecx +
mov [esp+13Ch+var_13C] offset aBUndefinedRefe +
mov [esp+13Ch+var_134] eax +
call off_4BFA04  +
mov [esp+13Ch+var_13C] 0Bh +
call sub_44BAF0  +
jmp loc_464E63  +
mov [esp+13Ch+var_D4] 0 +
mov [esp+13Ch+var_C0] 0 +
jmp loc_463C37  +
mov [esp+13Ch+var_134] offset aElf_link_add_o +
mov [esp+13Ch+var_138] 0E2Ah +
mov [esp+13Ch+var_13C] offset a____Binutil_12 +
call sub_44BA70  +
mov eax [esp+13Ch+var_104] +
cmp dword ptr [eax+78h] 0 +
jz loc_465D36  +
mov edi [esp+13Ch+var_FC] +
mov eax [ebp+0A0h] +
mov edi [edi+2Ch] +
cmp [eax+920h] edi +
jnz loc_465D36  +
mov edi [esp+13Ch+arg_4] +
mov eax [esp+13Ch+var_104] +
mov edx [edi+30h] +
mov eax [eax+74h] +
mov ecx [edx+4] +
mov edx [ebp+4] +
mov [esp+13Ch+var_138] ecx +
mov [esp+13Ch+var_13C] edx +
call eax  +
test eax eax +
jz loc_465D36  +
mov ebx [ebp+64h] +
jmp loc_4666AB  +
mov eax [esp+13Ch+var_104] +
mov edi [esp+13Ch+arg_4] +
mov eax [eax+78h] +
mov [esp+13Ch+var_138] edi +
mov [esp+13Ch+var_130] esi +
mov [esp+13Ch+var_134] ebx +
mov [esp+13Ch+var_13C] ebp +
call eax  +
mov edx [ebx+8Ch] +
cmp esi [edx+68h] +
mov edi eax +
jz loc_4666A0  +
mov [esp+13Ch+var_13C] esi +
call free  +
test edi edi +
jz loc_463A40  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_465D36  +
mov eax [ebx+14h] +
test al 4 +
jz loc_4666A8  +
cmp dword ptr [ebx+4Ch] 0 +
jz loc_4666A8  +
mov edi [esp+13Ch+arg_4] +
test byte ptr [edi+1] 8 +
jz loc_4666D2  +
test ah 20h +
jnz loc_4666A8  +
cmp dword ptr [ebx+3Ch] offset off_4BFB90 +
jz loc_4666A8  +
mov eax [esp+13Ch+arg_4] +
movzx eax byte ptr [eax+2] +
mov [esp+13Ch+var_130] 0 +
mov [esp+13Ch+var_134] 0 +
mov [esp+13Ch+var_138] ebx +
shr al 6 +
and eax 1 +
mov [esp+13Ch+var_12C] eax +
mov [esp+13Ch+var_13C] ebp +
call sub_462810  +
test eax eax +
mov esi eax +
jnz loc_46666C  +
xor eax eax +
jmp loc_463A42  +
mov [esp+13Ch+var_20] eax +
lea eax [esp+13Ch+var_20] +
mov [esp+13Ch+var_118] eax +
mov eax [esp+13Ch+var_78] +
mov [esp+13Ch+var_120] 0 +
mov [esp+13Ch+var_128] 0 +
mov [esp+13Ch+var_12C] offset off_4BFC38 +
mov [esp+13Ch+var_11C] eax +
mov eax [esp+13Ch+var_F4] +
mov [esp+13Ch+var_130] 2000h +
mov [esp+13Ch+var_138] ebp +
mov [esp+13Ch+var_124] eax +
mov eax [esp+13Ch+var_74] +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_13C] eax +
call sub_450D00  +
test eax eax +
jz loc_464E63  +
mov eax [esp+13Ch+var_20] +
cmp byte ptr [eax+0Ch] 6 +
mov [esp+13Ch+var_24] eax +
jnz loc_464A28  +
mov edi [esp+13Ch+var_7C] +
mov edx [edi+0D8h] +
mov [esp+13Ch+var_134] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_138] esi +
mov [esp+13Ch+var_13C] eax +
call edx  +
mov eax [esp+13Ch+var_24] +
movzx edx byte ptr [esi+35h] +
mov ecx edx +
and edx 0FFFFFFFEh +
or cl [eax+35h] +
and ecx 1 +
or edx ecx +
mov [esi+35h] dl +
movzx edx byte ptr [eax+34h] +
mov ecx edx +
and edx 7Fh +
or ecx [esi+34h] +
and ecx 0FFFFFF80h +
or edx ecx +
mov [eax+34h] dl +
cmp [esp+13Ch+var_F8] 0 +
jnz loc_466846  +
cmp [esp+13Ch+var_80] 0 +
jnz loc_466834  +
mov edi [esp+13Ch+arg_4] +
mov [esp+13Ch+var_F8] 1 +
movzx edx byte ptr [edi] +
and edx 3 +
cmp dl 1 +
ja loc_464A28  +
movzx eax byte ptr [eax+33h] +
shr al 2 +
mov edi eax +
and edi 1 +
mov [esp+13Ch+var_F8] edi +
jmp loc_464A28  +
movzx eax byte ptr [eax+33h] +
mov edi eax +
and edi 1 +
mov [esp+13Ch+var_F8] edi +
jmp loc_464A28  +
mov [esp+13Ch+var_F8] 1 +
jmp loc_464A28  +
mov [esp+13Ch+var_138] eax +
mov eax [esp+13Ch+arg_4] +
mov [esp+13Ch+var_13C] eax +
call sub_460C40  +
test eax eax +
jnz loc_4658D1  +
jmp loc_464E63  +
movzx eax byte ptr [edi+6] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_466328  +
test byte ptr [esi+16h] 80h +
jnz loc_466328  +
cmp dword ptr [esi+3Ch] offset off_4BFB90 +
jz loc_466328  +
mov edi [esi+8Ch] +
lea eax [esp+13Ch+var_14] +
mov [esp+13Ch+var_128] eax +
mov [esp+13Ch+var_130] ebx +
mov [esp+13Ch+var_134] esi +
lea eax [edi+88h] +
mov [esp+13Ch+var_12C] eax +
mov eax [esp+13Ch+var_108] +
mov [esp+13Ch+var_13C] ebp +
mov [esp+13Ch+var_138] eax +
call sub_489BB0  +
test eax eax +
jz loc_463A40  +
cmp dword ptr [edi+88h] 0 +
jz loc_466328  +
movzx eax word ptr [esi+18h] +
and ax 0FC7Fh +
or al 80h +
mov [esi+18h] ax +
jmp loc_466328  +
***
push ebx  +
mov edx [esp+8] +
xor eax eax +
test byte ptr [edx+34h] 8 +
jnz loc_466926  +
movzx ecx byte ptr [edx+0Ch] +
lea ebx [ecx-1] +
cmp bl 1 +
jbe loc_466926  +
sub ecx 3 +
cmp cl 1 +
jbe loc_466928  +
mov eax 1 +
pop ebx  +
retn   +
***
mov edx [edx+14h] +
mov edx [edx+3Ch] +
test edx edx +
jnz loc_466921  +
jmp loc_466926  +
***
mov eax [esp+18h+arg_0] +
mov ebx [eax+34h] +
test ebx ebx +
jnz loc_46695B  +
jmp loc_466980  +
mov ebx [ebx+9Ch] +
test ebx ebx +
jz loc_466980  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_466951  +
mov [esp+18h+var_14] offset off_4BFB90 +
mov [esp+18h+var_18] ebx +
call sub_47D2D0  +
test eax eax +
jnz loc_466951  +
add esp 18h +
pop ebx  +
retn   +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 40h +
mov esi [esp+58h] +
mov ebx [esp+54h] +
test esi esi +
jz loc_466A08  +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+4] esi +
mov eax [ebx+1Ch] +
mov [esp] eax +
call sub_4500A0  +
test eax eax +
jz loc_4669D9  +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-3] +
cmp dl 1 +
jbe loc_466A10  +
mov edx [ebx+10h] +
test edx edx +
jnz loc_4669E7  +
mov edx [esp+5Ch] +
mov [ebx+10h] edx +
test eax eax +
jz loc_466AE8  +
movzx eax byte ptr [eax+0Ch] +
mov edi 1 +
sub eax 1 +
cmp al 1 +
jbe loc_466A61  +
add esp 40h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edx [ebx+10h] +
xor eax eax +
jmp loc_4669DC  +
***
test byte ptr [eax+33h] 2 +
jz loc_4669D9  +
cmp byte ptr [eax+30h] 1 +
ja loc_4669D9  +
mov ecx [ebx+10h] +
mov byte ptr [eax+30h] 1 +
test ecx ecx +
jnz loc_466AFE  +
cmp dword ptr [eax+14h] offset off_4BFB90 +
jz loc_466B27  +
mov [esp+2Ch] eax +
mov eax [esp+50h] +
mov [esp+8] esi +
mov dword ptr [esp] offset aBSNotAbsolute +
mov [esp+4] eax +
call off_4BFA04  +
mov edx [ebx+10h] +
mov eax [esp+2Ch] +
jmp loc_4669DC  +
***
lea eax [esp+3Ch] +
mov [esp+24h] eax +
mov eax [esp+50h] +
mov dword ptr [esp+3Ch] 0 +
mov eax [eax+4] +
mov eax [eax+1B0h] +
movzx eax byte ptr [eax+1ACh] +
mov dword ptr [esp+1Ch] 0 +
mov dword ptr [esp+18h] 0 +
and eax 1 +
mov [esp+20h] eax +
mov edx [ebx+10h] +
xor eax eax +
test edx edx +
cmovns eax [ebx+10h] +
mov dword ptr [esp+10h] offset off_4BFB90 +
mov dword ptr [esp+0Ch] 2 +
mov [esp+14h] eax +
mov eax [esp+50h] +
mov [esp+8] esi +
mov [esp] ebx +
mov [esp+4] eax +
call sub_450D00  +
test eax eax +
jz loc_466AF6  +
mov eax [esp+3Ch] +
or byte ptr [eax+33h] 2 +
mov byte ptr [eax+30h] 1 +
add esp 40h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
add esp 40h +
mov edi 1 +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
xor di di +
jmp loc_4669FF  +
***
mov [esp+2Ch] eax +
mov eax [esp+50h] +
mov [esp+8] esi +
mov dword ptr [esp] offset aBStackSizeSpec +
mov [esp+4] eax +
call off_4BFA04  +
mov edx [ebx+10h] +
mov eax [esp+2Ch] +
jmp loc_4669DC  +
***
mov edx [eax+18h] +
mov [ebx+10h] edx +
jmp loc_4669DC  +
***
push esi  +
push ebx  +
sub esp 0ACh +
mov eax [esp+0ACh+arg_20] +
mov edi [esp+0ACh+arg_1C] +
mov dword ptr [eax] 0 +
mov eax [edi+1Ch] +
cmp dword ptr [eax+28h] 1 +
jz loc_466B77  +
add esp 0ACh +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+0ACh+arg_0] +
mov edx [ecx+4] +
mov esi [edx+1B0h] +
mov edx [eax+44h] +
mov [eax+3Ch] edx +
mov edx [eax+48h] +
mov [eax+40h] edx +
movzx eax byte ptr [edi] +
and eax 3 +
cmp al 2 +
jz loc_4673F0  +
mov eax [esi+88h] +
test eax eax +
jz loc_466BC3  +
mov ebx [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_AC] ebx +
call eax  +
test eax eax +
jz loc_467135  +
movzx eax byte ptr [edi+5] +
test al 2 +
jnz loc_467142  +
test al 4 +
jz loc_467330  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov dword ptr [eax+34h] 6 +
mov eax [edi+1Ch] +
mov ebx [eax+38h] +
test ebx ebx +
mov [esp+0ACh+var_7C] ebx +
jz loc_467161  +
mov eax [eax+30h] +
mov ebx 0FFFFFFFFh +
test eax eax +
jnz loc_467175  +
mov [esp+0ACh+var_AC] edi +
call sub_48CF00  +
test eax eax +
jz loc_467135  +
mov eax [esi+8Ch] +
test eax eax +
jz loc_466C45  +
mov ecx [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_AC] ecx +
call eax  +
test eax eax +
jz loc_467135  +
mov eax [edi+1Ch] +
mov eax [eax+30h] +
test eax eax +
jz loc_466B67  +
mov eax [esp+0ACh+var_7C] +
mov [esp+0ACh+var_A8] offset a_gnu_version_d +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
test eax eax +
mov ebp eax +
jz loc_467BB7  +
mov esi [edi+7Ch] +
test esi esi +
jz loc_467B80  +
mov eax [esi+8] +
test eax eax +
jnz loc_466C8D  +
mov esi [esi] +
test esi esi +
jz loc_467B80  +
test byte ptr [edi] 20h +
mov edx 1Ch +
mov [esp+0ACh+var_70] 1 +
jnz loc_467735  +
mov [esp+0ACh+var_78] ebx +
mov ebx [esp+0ACh+var_70] +
mov ecx esi +
lea esi [esi+0] +
mov eax [ecx+8] +
test eax eax +
jz loc_466CCD  +
mov eax [ecx+2Ch] +
add edx 1Ch +
add ebx 1 +
test eax eax +
jz loc_466CCD  +
mov eax [eax] +
add edx 8 +
test eax eax +
jnz loc_466CC4  +
mov ecx [ecx] +
test ecx ecx +
jnz loc_466CB0  +
mov [esp+0ACh+var_70] ebx +
mov ebx [esp+0ACh+var_78] +
mov eax [esp+0ACh+arg_0] +
mov [ebp+24h] edx +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] eax +
call sub_458A80  +
test eax eax +
mov edx eax +
mov [ebp+6Ch] eax +
jz loc_467B91  +
mov eax 1 +
mov ebp 1 +
test byte ptr [edi] 20h +
mov word ptr [esp+0ACh+var_34+2] ax +
mov eax 1 +
mov word ptr [esp+0ACh+var_30] ax +
mov eax 1 +
mov word ptr [esp+0ACh+var_34] bp +
mov word ptr [esp+0ACh+var_30+2] ax +
jz loc_46774F  +
mov [esp+0ACh+var_28] 28h +
mov [esp+0ACh+var_24] 14h +
cmp ebx 0FFFFFFFFh +
mov [esp+0ACh+var_78] edx +
jz loc_4677F1  +
mov eax [edi+1Ch] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_AC] eax +
call sub_488690  +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_AC] eax +
call sub_475670  +
mov edx [esp+0ACh+var_78] +
mov [esp+0ACh+var_44] ebx +
mov [esp+0ACh+var_2C] eax +
lea eax [esp+0ACh+var_34] +
mov [esp+0ACh+var_74] eax +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_78] edx +
mov [esp+0ACh+var_40] 0 +
mov [esp+0ACh+var_AC] eax +
call sub_475310  +
mov edx [esp+0ACh+var_78] +
test byte ptr [edi] 20h +
lea ebx [edx+14h] +
jz loc_466EA9  +
mov ecx [esp+0ACh+var_7C] +
lea eax [esp+0ACh+var_50] +
mov [esp+0ACh+var_88] eax +
mov [esp+0ACh+var_50] 0 +
mov eax [ecx+4] +
mov eax [eax+1B0h] +
movzx eax byte ptr [eax+1ACh] +
mov [esp+0ACh+var_90] 0 +
mov [esp+0ACh+var_94] 0 +
mov [esp+0ACh+var_98] 0 +
and eax 1 +
mov [esp+0ACh+var_8C] eax +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_9C] offset off_4BFB90 +
mov [esp+0ACh+var_A0] 2 +
mov [esp+0ACh+var_A8] ecx +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_AC] edi +
call sub_450D00  +
test eax eax +
jz loc_467135  +
mov eax [esp+0ACh+var_50] +
and byte ptr [eax+34h] 0FEh +
or byte ptr [eax+33h] 2 +
mov byte ptr [eax+30h] 1 +
mov dword ptr [eax+40h] 0 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] edi +
call sub_460C40  +
test eax eax +
jz loc_467135  +
xor edx edx +
cmp esi 1 +
sbb eax eax +
mov ecx 2 +
not eax  +
and eax 1Ch +
mov [esp+0ACh+var_24] eax +
mov eax [esp+0ACh+var_74] +
mov [esp+0ACh+var_A4] ebx +
mov word ptr [esp+0ACh+var_34+2] dx +
mov word ptr [esp+0ACh+var_30] cx +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_28] 14h +
mov [esp+0ACh+var_AC] eax +
call sub_475310  +
mov edx [esp+0ACh+var_78] +
lea ebx [edx+28h] +
lea eax [esp+0ACh+var_44] +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A4] ebx +
add ebx 8 +
mov [esp+0ACh+var_AC] eax +
call sub_475400  +
test esi esi +
jz loc_46741F  +
nop   +
mov eax [esi+8] +
test eax eax +
jz loc_467415  +
mov eax [esi+2Ch] +
xor edx edx +
test eax eax +
jz loc_466EED  +
mov eax [eax] +
add edx 1 +
test eax eax +
jnz loc_466EE4  +
mov [esp+0ACh+var_78] edx +
mov edx [esp+0ACh+var_7C] +
lea ecx [esp+0ACh+var_50] +
mov eax [esi+4] +
mov [esp+0ACh+var_88] ecx +
mov [esp+0ACh+var_50] 0 +
mov ecx [edx+4] +
mov ecx [ecx+1B0h] +
movzx ecx byte ptr [ecx+1ACh] +
mov [esp+0ACh+var_90] 0 +
mov [esp+0ACh+var_94] 0 +
mov [esp+0ACh+var_98] 0 +
and ecx 1 +
mov [esp+0ACh+var_8C] ecx +
mov [esp+0ACh+var_9C] offset off_4BFB90 +
mov [esp+0ACh+var_A0] 2 +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] edi +
call sub_450D00  +
test eax eax +
jz loc_467135  +
mov ebp [esp+0ACh+var_50] +
and byte ptr [ebp+34h] 0FEh +
or byte ptr [ebp+33h] 2 +
mov byte ptr [ebp+30h] 1 +
mov [ebp+40h] esi +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] edi +
call sub_460C40  +
test eax eax +
jz loc_467135  +
mov eax 1 +
mov edx [esp+0ACh+var_78] +
mov word ptr [esp+0ACh+var_34] ax +
xor eax eax +
mov word ptr [esp+0ACh+var_34+2] ax +
mov eax [esi+0Ch] +
test eax eax +
jz loc_467710  +
movzx eax byte ptr [edi] +
mov [esp+0ACh+var_78] edx +
and eax 20h +
cmp al 1 +
sbb eax eax +
add eax 2 +
add ax [esi+8] +
mov word ptr [esp+0ACh+var_30] ax +
lea eax [edx+1] +
mov word ptr [esp+0ACh+var_30+2] ax +
mov eax [esi+4] +
mov [esp+0ACh+var_AC] eax +
call sub_475670  +
mov [esp+0ACh+var_28] 14h +
mov [esp+0ACh+var_24] 0 +
mov [esp+0ACh+var_2C] eax +
mov eax [esi] +
test eax eax +
jz loc_467034  +
mov edx [eax+8] +
test edx edx +
mov edx [esp+0ACh+var_78] +
jnz loc_4676E4  +
mov eax [eax] +
test eax eax +
jz loc_467034  +
mov [esp+0ACh+var_A8] 1877h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esi] +
test eax eax +
jz loc_467034  +
mov eax [eax+8] +
mov edx [esp+0ACh+var_78] +
test eax eax +
jnz loc_4676E4  +
mov eax [esp+0ACh+var_74] +
mov [esp+0ACh+var_A4] ebx +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] eax +
call sub_475310  +
mov ecx [edi+1Ch] +
lea edx [ebx+14h] +
mov eax [ebp+38h] +
mov [esp+0ACh+var_78] edx +
mov ecx [ecx+50h] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_44] eax +
mov [esp+0ACh+var_AC] ecx +
call sub_488690  +
mov ebp [esi+2Ch] +
mov [esp+0ACh+var_40] 0 +
mov edx [esp+0ACh+var_78] +
test ebp ebp +
jz loc_46708A  +
mov [esp+0ACh+var_40] 8 +
mov eax [esp+0ACh+var_44] +
add ebx 1Ch +
mov [esi+30h] eax +
lea eax [esp+0ACh+var_44] +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] eax +
call sub_475400  +
mov ebp [esi+2Ch] +
test ebp ebp +
jz loc_467415  +
mov [esp+0ACh+var_78] esi +
mov esi ebp +
mov ebp [esp+0ACh+arg_0] +
jmp loc_467118  +
mov ecx [edi+1Ch] +
mov eax [eax+30h] +
mov ecx [ecx+50h] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_44] eax +
mov [esp+0ACh+var_AC] ecx +
call sub_488690  +
cmp dword ptr [esi] 1 +
mov [esp+0ACh+var_A4] ebx +
mov [esp+0ACh+var_AC] ebp +
sbb eax eax +
add ebx 8 +
not eax  +
and eax 8 +
mov [esp+0ACh+var_40] eax +
lea eax [esp+0ACh+var_44] +
mov [esp+0ACh+var_A8] eax +
call sub_475400  +
mov esi [esi] +
test esi esi +
jz loc_467411  +
mov eax [esi+4] +
test eax eax +
jnz loc_4670D0  +
mov [esp+0ACh+var_44] 0 +
jmp loc_4670E9  +
mov [esp+0ACh+var_AC] 11h +
call sub_44BAF0  +
xor eax eax +
add esp 0ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov dword ptr [eax+34h] 7 +
jmp loc_466BF1  +
mov [esp+0ACh+var_AC] edi +
call sub_48CF00  +
test eax eax +
jnz loc_466B67  +
xor eax eax +
jmp loc_467137  +
mov eax [esp+0ACh+var_7C] +
mov [esp+0ACh+var_A8] offset a_interp_1 +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
mov ebx [esp+0ACh+arg_20] +
test eax eax +
mov [ebx] eax +
jz loc_467793  +
mov eax [esp+0ACh+arg_4] +
test eax eax +
jz loc_467407  +
mov eax [edi+1Ch] +
mov ebx [esp+0ACh+arg_4] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_A4] 1 +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] 0Eh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
test byte ptr [edi] 4 +
jnz loc_46776A  +
mov eax [esp+0ACh+arg_8] +
test eax eax +
jz loc_467259  +
mov eax [edi+1Ch] +
mov ecx [esp+0ACh+arg_8] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A4] 1 +
mov [esp+0ACh+var_A8] ecx +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jz loc_467135  +
movzx edx byte ptr [edi+4] +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_AC] edi +
and edx 8 +
cmp dl 1 +
sbb edx edx +
and edx 0FFFFFFF2h +
add edx 1Dh +
mov [esp+0ACh+var_A8] edx +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [esp+0ACh+arg_C] +
test eax eax +
jz loc_4672AA  +
mov eax [edi+1Ch] +
mov ecx [esp+0ACh+arg_C] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A4] 1 +
mov [esp+0ACh+var_A8] ecx +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jz loc_467135  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] 7FFFFFFFh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov ebp [esp+0ACh+arg_18] +
test ebp ebp +
jz loc_46784F  +
mov eax [esp+0ACh+arg_18] +
mov eax [eax] +
test eax eax +
jnz loc_467305  +
jmp loc_46784F  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] 7FFFFFFDh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
add [esp+0ACh+arg_18] 4 +
mov eax [esp+0ACh+arg_18] +
mov eax [eax] +
test eax eax +
jz loc_46784F  +
mov edx [edi+1Ch] +
mov edx [edx+50h] +
mov [esp+0ACh+var_A4] 1 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] edx +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jnz loc_4672D0  +
xor eax eax +
jmp loc_467137  +
mov ebx [edi+34h] +
test ebx ebx +
jz loc_4677C4  +
xor eax eax +
xor ecx ecx +
mov [esp+0ACh+var_7C] esi +
mov ebp 1 +
mov esi ebx +
mov [esp+0ACh+arg_1C] edi +
mov ebx eax +
mov edi ecx +
jmp loc_467361  +
mov esi [esi+9Ch] +
test esi esi +
jz loc_467391  +
mov eax [esi+28h] +
shr eax 5 +
test eax 11042h +
jnz loc_467357  +
mov [esp+0ACh+var_A8] offset a_note_gnuStack +
mov [esp+0ACh+var_AC] esi +
call sub_44D4B0  +
test eax eax +
jz loc_4676F7  +
test byte ptr [eax+14h] 10h +
mov edi eax +
cmovnz ebx ebp +
jmp loc_467357  +
mov ecx edi +
mov esi [esp+0ACh+var_7C] +
test ecx ecx +
mov edi [esp+0ACh+arg_1C] +
jz loc_4677C6  +
mov eax [esp+0ACh+arg_0] +
mov edx ebx +
or edx 6 +
and ebx 1 +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov [eax+34h] edx +
jz loc_466BF1  +
movzx eax byte ptr [edi] +
and eax 3 +
cmp al 2 +
jnz loc_466BF1  +
mov eax [ecx+3Ch] +
cmp eax offset off_4BFB90 +
jz loc_466BF1  +
or dword ptr [eax+14h] 10h +
jmp loc_466BF1  +
mov [esp+0ACh+var_AC] edi +
call sub_466940  +
test eax eax +
jnz loc_466BA1  +
xor eax eax +
jmp loc_467137  +
mov ebx 0FFFFFFFFh +
jmp loc_4671F1  +
mov esi [esp+0ACh+var_78] +
mov esi [esi] +
test esi esi +
jnz loc_466ED0  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 6FFFFFFCh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [esp+0ACh+var_70] +
mov [esp+0ACh+var_A8] 6FFFFFFDh +
mov [esp+0ACh+var_AC] edi +
mov [esp+0ACh+var_A4] eax +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [esp+0ACh+arg_0] +
mov ebx [esp+0ACh+var_70] +
mov eax [eax+0A0h] +
mov [eax+238h] ebx +
test byte ptr [edi+4] 8 +
mov eax [edi+68h] +
jz loc_467D06  +
test eax eax +
jz loc_4674A3  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] 1Eh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [edi+6Ch] +
test eax eax +
jz loc_4674D5  +
movzx edx byte ptr [edi] +
and edx 3 +
cmp dl 1 +
jbe loc_467E1D  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] 6FFFFFFBh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [esp+0ACh+var_7C] +
mov [esp+0ACh+var_A8] offset a_gnu_version_r +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
test eax eax +
mov esi eax +
jz loc_467E3D  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_34] edi +
mov eax [eax+0A0h] +
mov edx [eax+238h] +
mov eax 1 +
mov [esp+0ACh+var_A8] offset loc_45DA70 +
mov [esp+0ACh+var_2C] 0 +
test edx edx +
cmovnz eax edx +
mov [esp+0ACh+var_30] eax +
lea eax [esp+0ACh+var_34] +
mov [esp+0ACh+var_74] eax +
mov [esp+0ACh+var_A4] eax +
mov eax [edi+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
mov ebx [esp+0ACh+var_2C] +
test ebx ebx +
jnz loc_467135  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
mov ecx [eax+244h] +
test ecx ecx +
jz loc_467E34  +
xor ebp ebp +
xor edx edx +
mov eax [ecx+18h] +
add edx 10h +
add ebp 1 +
test eax eax +
jz loc_46758A  +
lea esi [esi+0] +
mov eax [eax+14h] +
add edx 10h +
test eax eax +
jnz loc_467580  +
mov ecx [ecx+1Ch] +
test ecx ecx +
jnz loc_467570  +
mov eax [esp+0ACh+arg_0] +
mov [esi+24h] edx +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
mov [esi+6Ch] eax +
jz loc_467135  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+244h] +
test eax eax +
jz loc_467D87  +
mov [esp+0ACh+var_78] ebp +
mov esi eax +
mov eax [esi+18h] +
xor ebp ebp +
test eax eax +
jz loc_4675E8  +
mov eax [eax+14h] +
add ebp 1 +
test eax eax +
jnz loc_4675DE  +
mov ecx 1 +
mov [esi] cx +
mov ecx [esi+10h] +
mov [esi+2] bp +
mov eax [ecx+0A0h] +
mov eax [eax+220h] +
test eax eax +
jz loc_468089  +
mov ecx [edi+1Ch] +
mov ecx [ecx+50h] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] ecx +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jz loc_467135  +
mov edx [esi+1Ch] +
mov [esi+4] eax +
mov dword ptr [esi+8] 10h +
test edx edx +
jz loc_467E28  +
lea edx [ebp+1] +
shl edx 4 +
mov [esi+0Ch] edx +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A4] ebx +
add ebx 10h +
mov [esp+0ACh+var_A8] esi +
mov [esp+0ACh+var_AC] eax +
call sub_4754B0  +
mov ebp [esi+18h] +
test ebp ebp +
jz loc_467D78  +
mov [esp+0ACh+var_70] esi +
mov esi [esp+0ACh+arg_0] +
jmp loc_4676AD  +
cmp dword ptr [ebp+14h] 1 +
mov [ebp+8] eax +
sbb eax eax +
not eax  +
and eax 10h +
mov [ebp+0Ch] eax +
mov [esp+0ACh+var_A4] ebx +
add ebx 10h +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] esi +
call sub_4755A0  +
mov ebp [ebp+14h] +
test ebp ebp +
jz loc_467D74  +
mov eax [ebp+10h] +
mov [esp+0ACh+var_AC] eax +
call sub_475670  +
mov ecx [ebp+10h] +
mov [ebp+0] eax +
mov eax [edi+1Ch] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] ecx +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jnz loc_46767E  +
xor eax eax +
jmp loc_467137  +
lea eax ds:1Ch[edx*8] +
mov [esp+0ACh+var_24] eax +
jmp loc_467034  +
mov eax [esp+0ACh+var_7C] +
test byte ptr [eax+1AEh] 20h +
cmovnz ebx ebp +
jmp loc_467357  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_466FA6  +
mov eax [esi+34h] +
test eax eax +
jnz loc_466FA6  +
mov ecx 2 +
mov word ptr [esp+0ACh+var_34+2] cx +
jmp loc_466FA6  +
test esi esi +
jz loc_467BA5  +
mov edx 30h +
mov [esp+0ACh+var_70] 2 +
jmp loc_466CA3  +
mov [esp+0ACh+var_28] 14h +
mov [esp+0ACh+var_24] 1Ch +
jmp loc_466D45  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 10h +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
or dword ptr [edi+68h] 2 +
jmp loc_4671FA  +
movzx eax byte ptr [edi] +
and eax 3 +
cmp al 1 +
ja loc_46719A  +
test byte ptr [edi+6] 1 +
jnz loc_46719A  +
mov [esp+0ACh+var_A8] 168Dh +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_46719A  +
xor ebx ebx +
mov eax [edi+10h] +
test eax eax +
jle loc_466BF1  +
mov eax [esp+0ACh+arg_0] +
mov edx ebx +
or edx 6 +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov [eax+34h] edx +
jmp loc_466BF1  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax] +
mov [esp+0ACh+var_AC] eax +
call sub_4A8D80  +
mov [esp+0ACh+var_AC] eax +
mov [esp+0ACh+arg_4] eax +
call sub_475670  +
mov ebx [esp+0ACh+arg_4] +
mov [esp+0ACh+var_2C] eax +
mov eax [edi+1Ch] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jz loc_467135  +
mov [esp+0ACh+var_44] eax +
mov edx [esp+0ACh+var_78] +
jmp loc_466D82  +
mov ecx [esp+0ACh+arg_10] +
test ecx ecx +
jz loc_4678A0  +
mov eax [edi+1Ch] +
mov ecx [esp+0ACh+arg_10] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A4] 1 +
mov [esp+0ACh+var_A8] ecx +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jz loc_467135  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] 6FFFFEFCh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov edx [esp+0ACh+arg_14] +
test edx edx +
jz loc_4678F1  +
mov eax [edi+1Ch] +
mov ecx [esp+0ACh+arg_14] +
mov eax [eax+50h] +
mov [esp+0ACh+var_A4] 1 +
mov [esp+0ACh+var_A8] ecx +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
jz loc_467135  +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] 6FFFFEFBh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
movzx eax byte ptr [edi] +
mov [esp+0ACh+var_34] edi +
mov [esp+0ACh+var_30] 0 +
test al 10h +
jnz loc_467D47  +
and eax 3 +
cmp al 1 +
jbe loc_467D3D  +
mov eax [edi+7Ch] +
test eax eax +
mov [esp+0ACh+var_70] eax +
jz loc_467ADE  +
mov [esp+0ACh+var_64] ebx +
mov [esp+0ACh+var_60] esi +
mov [esp+0ACh+arg_1C] edi +
mov eax [esp+0ACh+var_70] +
mov edi [eax+0Ch] +
test edi edi +
mov ebp edi +
jnz loc_46794E  +
jmp loc_467ABD  +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_467ABD  +
movzx eax byte ptr [ebp+8] +
and eax 3 +
cmp al 1 +
jnz loc_467943  +
mov eax [esp+0ACh+arg_0] +
mov edx [ebp+4] +
mov eax [eax+4] +
mov [esp+0ACh+var_68] edx +
movzx eax byte ptr [eax+18h] +
mov [esp+0ACh+var_AC] edx +
mov ebx eax +
call strlen  +
mov edi [esp+0ACh+var_70] +
xor ecx ecx +
test bl bl +
setnz cl  +
mov byte ptr [esp+0ACh+var_74] bl +
mov edi [edi+4] +
mov [esp+0ACh+var_6C] ecx +
lea esi [eax+ecx] +
mov [esp+0ACh+var_AC] edi +
mov [esp+0ACh+var_78] edi +
call strlen  +
mov edi eax +
lea eax [esi+eax+3] +
mov [esp+0ACh+var_AC] eax +
call sub_459B80  +
test eax eax +
mov ebx eax +
jz loc_467135  +
mov ecx [esp+0ACh+var_6C] +
mov edx [esp+0ACh+var_68] +
movzx eax byte ptr [esp+0ACh+var_74] +
add ecx ebx +
mov [ebx] al +
mov [esp+0ACh+var_AC] ecx +
mov [esp+0ACh+var_A4] esi +
add esi ebx +
mov [esp+0ACh+var_A8] edx +
call memcpy  +
lea edx [edi+1] +
mov edi [esp+0ACh+var_78] +
lea eax [esi+1] +
mov byte ptr [esi] 40h +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_AC] eax +
mov [esp+0ACh+var_74] edx +
call memcpy  +
mov eax [esp+0ACh+arg_1C] +
mov [esp+0ACh+var_9C] 0 +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] ebx +
mov eax [eax+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_4500A0  +
mov edx [esp+0ACh+var_74] +
test eax eax +
mov edi eax +
jz loc_467A40  +
movzx eax byte ptr [eax+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_467B73  +
mov eax [esp+0ACh+var_78] +
add esi 2 +
mov byte ptr [esi-1] 40h +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_A8] eax +
call memcpy  +
mov eax [esp+0ACh+arg_1C] +
mov [esp+0ACh+var_9C] 0 +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] ebx +
mov eax [eax+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_4500A0  +
mov [esp+0ACh+var_AC] ebx +
mov edi eax +
call free  +
test edi edi +
jz loc_467943  +
test byte ptr [edi+33h] 8 +
jnz loc_467943  +
movzx eax byte ptr [edi+0Ch] +
sub eax 3 +
cmp al 1 +
ja loc_467943  +
or byte ptr [ebp+8] 2 +
jmp loc_467943  +
mov eax [esp+0ACh+var_70] +
mov eax [eax] +
test eax eax +
mov [esp+0ACh+var_70] eax +
jnz loc_467931  +
mov ebx [esp+0ACh+var_64] +
mov esi [esp+0ACh+var_60] +
mov edi [esp+0ACh+arg_1C] +
lea eax [esp+0ACh+var_4C] +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] offset sub_461FB0 +
mov eax [edi+1Ch] +
mov [esp+0ACh+var_4C] edi +
mov [esp+0ACh+var_48] 0 +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
cmp [esp+0ACh+var_48] 0 +
jnz loc_467135  +
cmp byte ptr [edi+4] 0 +
js loc_467BE6  +
mov ecx [edi+7Ch] +
test ecx ecx +
jz loc_467BE6  +
mov edx 1 +
mov ebp [ecx+0Ch] +
test ebp ebp +
jnz loc_467B41  +
jmp loc_467BD0  +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_467BD0  +
movzx eax byte ptr [ebp+8] +
and eax 7 +
cmp al 1 +
jnz loc_467B36  +
mov edx [ecx+4] +
mov eax [ebp+4] +
mov [esp+0ACh+var_78] ecx +
mov [esp+0ACh+var_AC] offset aSUndefinedVers +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_A8] eax +
call off_4BFA04  +
xor edx edx +
mov ecx [esp+0ACh+var_78] +
jmp loc_467B36  +
mov [esp+0ACh+var_AC] ebx +
call free  +
jmp loc_467A9B  +
test byte ptr [edi] 20h +
jnz loc_467BA3  +
or dword ptr [ebp+14h] 8000h +
jmp loc_467476  +
mov eax [ebp+24h] +
test eax eax +
jz loc_466CFE  +
xor eax eax +
jmp loc_467137  +
xor esi esi +
mov edx 30h +
mov [esp+0ACh+var_70] 2 +
jmp loc_466CDB  +
mov [esp+0ACh+var_A8] 17BEh +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_466C71  +
mov ecx [ecx] +
test ecx ecx +
jnz loc_467B2A  +
test edx edx +
lea esi [esi+0] +
jz loc_467129  +
lea eax [esp+0ACh+var_34] +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] offset sub_461EB0 +
mov eax [edi+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
cmp [esp+0ACh+var_30] 0 +
jnz loc_467135  +
mov eax [edi+48h] +
test eax eax +
jz loc_467C48  +
mov [esp+0ACh+var_9C] 0 +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] eax +
mov eax [edi+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_4500A0  +
test eax eax +
jz loc_467C48  +
test byte ptr [eax+33h] 3 +
jnz loc_4680D2  +
mov eax [edi+4Ch] +
test eax eax +
jz loc_467C84  +
mov [esp+0ACh+var_9C] 0 +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] eax +
mov eax [edi+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_4500A0  +
test eax eax +
jz loc_467C84  +
test byte ptr [eax+33h] 3 +
jnz loc_468098  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] offset a_preinit_array +
mov [esp+0ACh+var_AC] eax +
call sub_44D4B0  +
test eax eax +
jz loc_467E96  +
test byte ptr [eax+18h] 4 +
jz loc_467E96  +
movzx eax byte ptr [edi] +
and eax 3 +
cmp al 1 +
jbe loc_467E56  +
mov ebx [edi+34h] +
jmp loc_467CC6  +
mov ebx [ebx+9Ch] +
test ebx ebx +
jz loc_4680BF  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_467CC0  +
mov eax [ebx+64h] +
test eax eax +
jnz loc_467CE7  +
jmp loc_467CC0  +
mov eax [eax+0Ch] +
test eax eax +
jz loc_467CC0  +
mov edx [eax+8Ch] +
cmp dword ptr [edx+4] 10h +
jnz loc_467CE0  +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_AC] offset aB_preinit_arra +
call off_4BFA04  +
jmp loc_467CC0  +
test al 10h +
jnz loc_467487  +
test al 8 +
jz loc_4674A3  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 18h +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jnz loc_4674A3  +
xor eax eax +
jmp loc_467137  +
test byte ptr [edi+5] 1 +
jz loc_467913  +
lea eax [esp+0ACh+var_34] +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] offset sub_4622E0 +
mov eax [edi+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
cmp [esp+0ACh+var_30] 0 +
jz loc_467913  +
xor eax eax +
jmp loc_467137  +
mov esi [esp+0ACh+var_70] +
mov esi [esi+1Ch] +
test esi esi +
jnz loc_4675D5  +
mov ebp [esp+0ACh+var_78] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 6FFFFFFEh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] ebp +
mov [esp+0ACh+var_A8] 6FFFFFFFh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
mov [eax+23Ch] ebp +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
cmp dword ptr [eax+23Ch] 0 +
jnz loc_4680F9  +
cmp dword ptr [eax+238h] 0 +
jnz loc_4680F9  +
mov eax [esp+0ACh+var_7C] +
mov [esp+0ACh+var_A8] offset a_gnu_version +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
or dword ptr [eax+14h] 8000h +
jmp loc_466B67  +
and eax 0FFFFFF97h +
mov [edi+6Ch] eax +
jmp loc_4674B9  +
mov dword ptr [esi+0Ch] 0 +
jmp loc_46764C  +
or dword ptr [esi+14h] 8000h +
jmp loc_467DD6  +
mov [esp+0ACh+var_A8] 18C5h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_4674F3  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 20h +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 21h +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] offset a_init_array +
mov [esp+0ACh+var_AC] eax +
call sub_44D4B0  +
test eax eax +
jz loc_467EBB  +
test byte ptr [eax+18h] 4 +
jnz loc_467FFB  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] offset a_fini_array +
mov [esp+0ACh+var_AC] eax +
call sub_44D4B0  +
test eax eax +
jz loc_467EE0  +
test byte ptr [eax+18h] 4 +
jnz loc_468042  +
mov eax [esp+0ACh+var_7C] +
mov [esp+0ACh+var_A8] offset a_dynstr +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
test eax eax +
jz loc_466C13  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_466C13  +
mov eax [edi+1Ch] +
mov eax [eax+50h] +
mov [esp+0ACh+var_AC] eax +
call sub_488870  +
mov ebp eax +
movzx eax byte ptr [edi+3] +
test al 20h +
jnz loc_467FD2  +
test al 40h +
jz loc_467F49  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 6FFFFEF5h +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 5 +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 6 +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] ebp +
mov [esp+0ACh+var_A8] 0Ah +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov eax [esi+174h] +
movzx eax byte ptr [eax+5] +
mov [esp+0ACh+var_A8] 0Bh +
mov [esp+0ACh+var_AC] edi +
mov [esp+0ACh+var_A4] eax +
call sub_463160  +
test eax eax +
jnz loc_466C13  +
xor eax eax +
jmp loc_467137  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 4 +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
movzx eax byte ptr [edi+3] +
jmp loc_467F25  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 19h +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 1Bh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jnz loc_467EBB  +
xor eax eax +
jmp loc_467137  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 1Ah +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jz loc_467135  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 1Ch +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jnz loc_467EE0  +
xor eax eax +
jmp loc_467137  +
mov eax [ecx] +
mov [esp+0ACh+var_AC] eax +
call sub_4A8D80  +
jmp loc_46760B  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 0Dh +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jnz loc_467C84  +
xor eax eax +
jmp loc_467137  +
mov [esp+0ACh+var_AC] 0Fh +
call sub_44BAF0  +
xor eax eax +
jmp loc_467137  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 0Ch +
mov [esp+0ACh+var_AC] edi +
call sub_463160  +
test eax eax +
jnz loc_467C48  +
xor eax eax +
jmp loc_467137  +
mov ecx [esp+0ACh+var_74] +
mov edx edi +
mov eax [esp+0ACh+arg_0] +
call sub_45C890  +
test eax eax +
jz loc_467DFD  +
jmp loc_466B67  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov esi [esp+20h] +
mov edi [esp+24h] +
mov ebx [esi+64h] +
test ebx ebx +
jnz loc_46813E  +
jmp loc_468165  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_468165  +
mov eax [ebx+14h] +
and eax 8001h +
cmp eax 1 +
jnz loc_468137  +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_462780  +
test eax eax +
jnz loc_468137  +
mov eax [edi+1Ch] +
mov [eax+68h] ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov esi [esp+20h] +
mov edi [esp+24h] +
mov ebx [esi+64h] +
test ebx ebx +
jnz loc_46818E  +
jmp loc_468202  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_4681B5  +
mov eax [ebx+14h] +
and eax 8009h +
cmp eax 1 +
jnz loc_468187  +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_462780  +
test eax eax +
jnz loc_468187  +
mov eax [edi+1Ch] +
mov [eax+6Ch] ebx +
mov ebx [esi+64h] +
test ebx ebx +
jnz loc_4681C7  +
jmp loc_468202  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_468202  +
mov eax [ebx+14h] +
and eax 8009h +
cmp eax 9 +
jnz loc_4681C0  +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] esi +
call sub_462780  +
test eax eax +
jnz loc_4681C0  +
mov eax [edi+1Ch] +
mov [eax+68h] ebx +
mov edx [eax+68h] +
test edx edx +
jnz loc_46820C  +
mov edx [eax+6Ch] +
mov [eax+68h] edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [edi+1Ch] +
mov edx [eax+68h] +
test edx edx +
jz loc_4681F5  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
sub esp 0ACh +
mov eax [esp+0ACh+arg_4] +
mov esi [esp+0ACh+arg_0] +
mov eax [eax+1Ch] +
cmp dword ptr [eax+28h] 1 +
jz loc_468251  +
mov eax 1 +
add esp 0ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+4] +
mov edx [esp+0ACh+arg_4] +
mov ebx [eax+1B0h] +
mov eax [ebx+90h] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] esi +
call eax  +
mov eax [esp+0ACh+arg_4] +
mov eax [eax+1Ch] +
mov edi [eax+30h] +
test edi edi +
jz loc_468241  +
mov eax [eax+38h] +
lea ecx [esp+0ACh+var_70] +
mov edx [esp+0ACh+arg_4] +
mov edi eax +
mov [esp+0ACh+var_98] eax +
mov eax esi +
call sub_45C890  +
mov [esp+0ACh+var_AC] edi +
mov [esp+0ACh+var_A8] offset a_gnu_version +
mov ebp eax +
call sub_44D590  +
test eax eax +
mov edi eax +
jz loc_468AE1  +
test ebp ebp +
jz loc_468307  +
test byte ptr [edi+15h] 80h +
jnz loc_468307  +
lea eax [ebp+ebp+0] +
mov [edi+24h] eax +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
call sub_458B60  +
test eax eax +
mov [edi+6Ch] eax +
jz loc_4686E4  +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 6FFFFFF0h +
mov [esp+0ACh+var_AC] eax +
call sub_463160  +
test eax eax +
jz loc_4686E4  +
mov eax [esp+0ACh+arg_4] +
mov eax [eax+1Ch] +
mov edi [eax+0F8h] +
test edi edi +
jz loc_468AFA  +
mov eax [ebx+174h] +
movzx eax byte ptr [eax+5] +
imul eax ebp +
test ebp ebp +
mov [edi+24h] eax +
jnz loc_4688BF  +
mov eax [esp+0ACh+arg_4] +
mov eax [eax+1Ch] +
mov dword ptr [eax+60h] 0 +
mov eax [esp+0ACh+arg_4] +
movzx eax byte ptr [eax+3] +
test al 20h +
jnz loc_46868D  +
test al 40h +
jz loc_468550  +
xor eax eax +
mov ecx 12h +
lea edi [esp+0ACh+var_54] +
mov [esp+0ACh+var_90] edi +
stos   +
lea eax ds:0[ebp*8] +
mov [esp+0ACh+var_AC] eax +
call sub_459B80  +
test eax eax +
mov [esp+0ACh+var_44] eax +
jz loc_4686E4  +
lea eax [eax+ebp*4] +
mov edi [esp+0ACh+var_90] +
mov [esp+0ACh+var_40] eax +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_A8] offset sub_45ECC0 +
mov [esp+0ACh+var_2C] 0FFFFFFFFh +
mov [esp+0ACh+var_A4] edi +
mov eax [eax+1Ch] +
mov [esp+0ACh+var_54] esi +
mov [esp+0ACh+var_50] ebx +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
mov edx [esp+0ACh+var_10] +
test edx edx +
jnz loc_468913  +
mov ecx [esp+0ACh+var_4C] +
mov edx [esp+0ACh+var_44] +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_AC] 1 +
call sub_45C620  +
test eax eax +
mov [esp+0ACh+var_94] eax +
jz loc_468913  +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_A8] offset a_gnu_hash +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
test eax eax +
mov [esp+0ACh+var_88] eax +
jz loc_468F63  +
mov edi [esp+0ACh+var_4C] +
test edi edi +
jnz loc_468B13  +
cmp [esp+0ACh+var_2C] 0FFFFFFFFh +
jz loc_46844B  +
mov [esp+0ACh+var_A8] 1A12h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esp+0ACh+var_44] +
mov [esp+0ACh+var_AC] eax +
call free  +
mov eax [ebx+174h] +
mov ebp [esp+0ACh+var_88] +
movzx eax byte ptr [eax+0Ah] +
shr al 3 +
movzx eax al +
add eax 14h +
mov [ebp+24h] eax +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
call sub_458B60  +
test eax eax +
mov edi eax +
jz loc_4686E4  +
mov ecx ebp +
mov [ecx+6Ch] eax +
mov eax [esi+4] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_AC] 1 +
call eax  +
mov eax [esi+4] +
lea edx [edi+4] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] 1 +
call eax  +
mov eax [esi+4] +
lea edx [edi+8] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] 1 +
call eax  +
mov eax [esi+4] +
lea edx [edi+0Ch] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] 0 +
call eax  +
mov eax [ebx+174h] +
movzx eax byte ptr [eax+0Ah] +
cmp al 8 +
jz loc_468F3F  +
cmp al 10h +
jz loc_468F48  +
cmp al 20h +
jz loc_469061  +
cmp al 40h +
jnz loc_46900C  +
mov eax [esi+4] +
lea edx [edi+10h] +
mov eax [eax+24h] +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] 0 +
mov [esp+0ACh+var_A8] 0 +
call eax  +
mov eax [esi+4] +
mov edx [eax+30h] +
mov eax [ebx+174h] +
movzx eax byte ptr [eax+0Ah] +
mov [esp+0ACh+var_AC] 0 +
shr al 3 +
movzx eax al +
lea eax [edi+eax+10h] +
mov [esp+0ACh+var_A8] eax +
call edx  +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_A8] offset a_dynstr +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
test eax eax +
mov [esp+0ACh+var_88] eax +
jz loc_468DB0  +
mov eax [esp+0ACh+arg_4] +
mov eax [eax+1Ch] +
mov edx [eax+50h] +
mov [esp+0ACh+var_8C] eax +
mov eax [eax+38h] +
mov edi edx +
mov [esp+0ACh+var_AC] edx +
mov ebx eax +
mov [esp+0ACh+var_98] edx +
mov [esp+0ACh+var_94] eax +
call sub_4889F0  +
mov [esp+0ACh+var_AC] edi +
call sub_488870  +
mov [esp+0ACh+var_90] eax +
mov eax [ebx+4] +
mov edi [eax+1B0h] +
mov [esp+0ACh+var_A8] offset a_dynamic +
mov [esp+0ACh+var_AC] ebx +
call sub_44D590  +
test eax eax +
mov ebp eax +
jz loc_468D97  +
mov ebx [ebp+6Ch] +
mov eax [ebp+24h] +
add eax ebx +
cmp ebx eax +
jnb loc_46872D  +
lea eax [esp+0ACh+var_54] +
mov ecx [edi+174h] +
mov [esp+0ACh+arg_0] esi +
mov esi ebx +
mov ebx eax +
jmp loc_468635  +
cmp eax 0Ah +
jnz loc_4686F0  +
mov eax [esp+0ACh+var_90] +
mov [esp+0ACh+var_50] eax +
mov eax [edi+174h] +
mov edx [esp+0ACh+var_94] +
mov eax [eax+34h] +
mov [esp+0ACh+var_A4] esi +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_AC] edx +
call eax  +
mov ecx [edi+174h] +
movzx eax byte ptr [ecx+6] +
add esi eax +
mov eax [ebp+6Ch] +
add eax [ebp+24h] +
cmp esi eax +
jnb loc_468726  +
mov edx [esp+0ACh+var_94] +
mov eax [ecx+30h] +
mov [esp+0ACh+var_A4] ebx +
mov [esp+0ACh+var_A8] esi +
mov [esp+0ACh+var_AC] edx +
call eax  +
mov eax [esp+0ACh+var_54] +
cmp eax 1Dh +
jz loc_468670  +
jbe loc_4685F0  +
cmp eax 7FFFFFFDh +
jz loc_468670  +
nop   +
lea esi [esi+0] +
ja loc_468705  +
sub eax 6FFFFEFBh +
cmp eax 1 +
ja loc_46861B  +
mov eax [esp+0ACh+var_50] +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_AC] eax +
call sub_488880  +
mov [esp+0ACh+var_50] eax +
jmp loc_468601  +
lea eax ds:0[ebp*4] +
mov [esp+0ACh+var_AC] eax +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_4686E4  +
mov [esp+0ACh+var_54] eax +
lea eax [esp+0ACh+var_54] +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_A8] offset sub_45C9B0 +
mov [esp+0ACh+var_50] 0 +
mov eax [eax+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
mov ecx [esp+0ACh+var_50] +
test ecx ecx +
jz loc_4689D4  +
mov [esp+0ACh+var_AC] edi +
call free  +
xor eax eax +
jmp loc_468246  +
ja loc_468715  +
cmp eax 1 +
jnz loc_46861B  +
nop   +
lea esi [esi+0] +
jmp loc_468670  +
cmp eax 7FFFFFFFh +
jnz loc_46861B  +
jmp loc_468670  +
sub eax 0Eh +
cmp eax 1 +
ja loc_46861B  +
jmp loc_468670  +
mov esi [esp+0ACh+arg_0] +
mov eax [esp+0ACh+var_8C] +
mov edi [esp+0ACh+var_98] +
mov ebx [eax+0C0h] +
test ebx ebx +
jz loc_468758  +
nop   +
mov eax [ebx+18h] +
mov [esp+0ACh+var_AC] edi +
mov [esp+0ACh+var_A8] eax +
call sub_488880  +
mov [ebx+18h] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_468740  +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_A8] offset sub_45EDD0 +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+var_8C] +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
mov eax [esi+0A0h] +
mov ebx [eax+238h] +
test ebx ebx +
jnz loc_468926  +
mov edx [eax+244h] +
test edx edx +
jz loc_468863  +
mov eax [esp+0ACh+var_94] +
lea edi [esp+0ACh+var_6C] +
mov [esp+0ACh+var_A8] offset a_gnu_version_r +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
mov ebx [eax+6Ch] +
lea eax [esp+0ACh+var_54] +
mov [esp+0ACh+var_90] eax +
lea esi [esi+0] +
mov ebp [esp+0ACh+var_90] +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_A4] ebp +
call sub_475440  +
mov eax [esp+0ACh+var_50] +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_AC] eax +
call sub_488880  +
mov [esp+0ACh+var_A4] ebx +
add ebx 10h +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_50] eax +
call sub_4754B0  +
cmp word ptr [esp+0ACh+var_54+2] 0 +
jz loc_468857  +
xor ebp ebp +
lea esi [esi+0] +
mov [esp+0ACh+var_A8] ebx +
add ebp 1 +
mov [esp+0ACh+var_A4] edi +
mov [esp+0ACh+var_AC] esi +
call sub_475530  +
mov eax [esp+0ACh+var_64] +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_AC] eax +
call sub_488880  +
mov [esp+0ACh+var_A4] ebx +
add ebx 10h +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_64] eax +
call sub_4755A0  +
movzx eax word ptr [esp+0ACh+var_54+2] +
cmp ebp eax +
jb loc_468810  +
mov eax [esp+0ACh+var_48] +
test eax eax +
jnz loc_4687C0  +
mov eax [esp+0ACh+arg_4] +
xor ebx ebx +
mov eax [eax+1Ch] +
mov eax [eax+50h] +
mov [esp+0ACh+var_AC] eax +
call sub_488870  +
mov ecx [esp+0ACh+var_88] +
mov esi [esp+0ACh+arg_4] +
mov [ecx+24h] eax +
jmp loc_46889C  +
add ebx 1 +
cmp [esi+64h] ebx +
jb loc_468241  +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] 0 +
mov [esp+0ACh+var_AC] esi +
call sub_463160  +
test eax eax +
jnz loc_468890  +
xor eax eax +
jmp loc_468246  +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
call sub_458A80  +
test eax eax +
mov [edi+6Ch] eax +
jz loc_4686E4  +
mov edx [ebx+174h] +
mov ecx [esp+0ACh+var_70] +
movzx edx byte ptr [edx+5] +
add ecx 1 +
mov [esp+0ACh+var_A8] 0 +
mov [esp+0ACh+var_AC] eax +
imul edx ecx +
mov [esp+0ACh+var_70] ecx +
mov [esp+0ACh+var_A4] edx +
call memset  +
jmp loc_468337  +
mov eax [esp+0ACh+var_34] +
mov [esp+0ACh+var_AC] eax +
call free  +
mov eax [esp+0ACh+var_44] +
mov [esp+0ACh+var_AC] eax +
call free  +
xor eax eax +
jmp loc_468246  +
mov eax [esp+0ACh+var_94] +
lea edi [esp+0ACh+var_6C] +
mov [esp+0ACh+var_A8] offset a_gnu_version_d +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
mov ebx [eax+6Ch] +
lea eax [esp+0ACh+var_54] +
mov [esp+0ACh+var_90] eax +
jmp loc_468958  +
mov ecx [esp+0ACh+var_44] +
test ecx ecx +
jz loc_4689C9  +
mov eax [esp+0ACh+var_90] +
mov [esp+0ACh+var_A8] ebx +
add ebx 14h +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_A4] eax +
call sub_475280  +
cmp [esp+0ACh+var_48] 14h +
jnz loc_468950  +
cmp word ptr [esp+0ACh+var_50+2] 0 +
jz loc_468950  +
xor ebp ebp +
mov [esp+0ACh+var_A8] ebx +
add ebp 1 +
mov [esp+0ACh+var_A4] edi +
mov [esp+0ACh+var_AC] esi +
call sub_4753C0  +
mov eax [esp+0ACh+var_6C] +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_AC] eax +
call sub_488880  +
mov [esp+0ACh+var_A4] ebx +
add ebx 8 +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_6C] eax +
call sub_475400  +
movzx eax word ptr [esp+0ACh+var_50+2] +
cmp ebp eax +
jb loc_468980  +
jmp loc_468950  +
mov eax [esi+0A0h] +
jmp loc_468788  +
mov ecx [esp+0ACh+var_54] +
mov edx edi +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_AC] 0 +
sub ecx edi +
sar ecx 2 +
call sub_45C620  +
mov [esp+0ACh+var_AC] edi +
mov [esp+0ACh+var_94] eax +
call free  +
mov edx [esp+0ACh+var_94] +
test edx edx +
jz loc_4686E4  +
mov eax [esp+0ACh+arg_4] +
mov eax [eax+1Ch] +
mov [eax+60h] edx +
mov eax [esp+0ACh+var_98] +
mov [esp+0ACh+var_A8] offset a_hash +
mov [esp+0ACh+var_AC] eax +
call sub_44D590  +
mov edx [esp+0ACh+var_94] +
test eax eax +
mov edi eax +
jz loc_469044  +
mov eax [edi+8Ch] +
mov [esp+0ACh+var_90] edx +
mov eax [eax+28h] +
mov ecx eax +
mov [esp+0ACh+var_94] eax +
lea eax [ebp+edx+2] +
imul eax ecx +
mov [edi+24h] eax +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
call sub_458B60  +
test eax eax +
mov [edi+6Ch] eax +
jz loc_4686E4  +
mov ecx [esp+0ACh+var_94] +
mov edx [esp+0ACh+var_90] +
shl ecx 3 +
cmp ecx 8 +
jz loc_468EF1  +
cmp ecx 10h +
jz loc_468FA6  +
cmp ecx 20h +
jz loc_468F7C  +
cmp ecx 40h +
jnz loc_468FDA  +
mov ecx [esi+4] +
mov ecx [ecx+24h] +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_AC] edx +
mov [esp+0ACh+var_A8] 0 +
call ecx  +
mov eax [esi+4] +
mov edx [esp+0ACh+var_94] +
add edx [edi+6Ch] +
mov eax [eax+24h] +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] 0 +
call eax  +
mov eax [esp+0ACh+arg_4] +
movzx eax byte ptr [eax+3] +
jmp loc_46835B  +
mov [esp+0ACh+var_A8] 1989h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_4682B8  +
mov [esp+0ACh+var_A8] 199Dh +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_46831F  +
cmp [esp+0ACh+var_2C] 0FFFFFFFFh +
jz loc_468FBD  +
mov eax edi +
shr eax 1 +
jz loc_468FF6  +
mov edx 1 +
jmp loc_468B34  +
mov edx ecx +
shr eax 1 +
lea ecx [edx+1] +
jnz loc_468B32  +
cmp ecx 2 +
jbe loc_468FF6  +
lea eax [edx-1] +
bt edi eax +
jnb loc_468F04  +
mov eax [ebx+174h] +
add edx 4 +
cmp byte ptr [eax+0Ah] 40h +
jz loc_468F22  +
mov [esp+0ACh+var_1C] 5 +
mov eax 1Fh +
mov [esp+0ACh+var_8C] 5 +
mov [esp+0ACh+var_14] eax +
mov eax 1 +
mov ecx edx +
mov edi eax +
shl edi cl +
mov ecx edx +
sub ecx [esp+0ACh+var_8C] +
mov [esp+0ACh+var_48] edi +
mov [esp+0ACh+var_18] edx +
shl eax cl +
mov [esp+0ACh+var_8C] eax +
lea edi ds:0[eax*4] +
mov eax [esp+0ACh+var_94] +
lea eax [edi+eax*8] +
mov [esp+0ACh+var_AC] eax +
call sub_459B80  +
test eax eax +
mov [esp+0ACh+var_34] eax +
jz loc_468913  +
mov edx [esp+0ACh+var_94] +
lea ecx [eax+edi] +
mov [esp+0ACh+var_38] ecx +
mov [esp+0ACh+var_80] ecx +
mov [esp+0ACh+var_A4] edi +
shl edx 2 +
mov [esp+0ACh+var_84] edx +
add edx ecx +
mov ecx ebp +
sub ecx [esp+0ACh+var_4C] +
mov [esp+0ACh+var_A8] 0 +
mov [esp+0ACh+var_AC] eax +
mov [esp+0ACh+var_3C] edx +
mov [esp+0ACh+var_24] ecx +
call memset  +
mov edx [esp+0ACh+var_84] +
mov ecx [esp+0ACh+var_80] +
mov [esp+0ACh+var_A8] 0 +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] ecx +
call memset  +
mov eax [esp+0ACh+var_4C] +
mov edi [esp+0ACh+var_38] +
test eax eax +
jz loc_468C51  +
mov eax [esp+0ACh+var_44] +
xor ecx ecx +
mov [esp+0ACh+var_80] ebx +
mov ebx eax +
mov eax [ebx+ecx*4] +
xor edx edx +
add ecx 1 +
div  [esp+0ACh+var_94] +
add dword ptr [edi+edx*4] 1 +
cmp [esp+0ACh+var_4C] ecx +
ja loc_468C37  +
mov ebx [esp+0ACh+var_80] +
mov edx [esp+0ACh+var_24] +
xor eax eax +
mov ecx [esp+0ACh+var_3C] +
cmp dword ptr [edi+eax*4] 0 +
jz loc_468C6A  +
mov [ecx+eax*4] edx +
add edx [edi+eax*4] +
add eax 1 +
cmp eax [esp+0ACh+var_94] +
jnz loc_468C5E  +
cmp edx ebp +
jz loc_468C8B  +
mov [esp+0ACh+var_A8] 1A5Bh +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esp+0ACh+var_2C] +
mov ecx [esp+0ACh+var_94] +
mov [esp+0ACh+var_20] eax +
mov eax [esp+0ACh+var_4C] +
mov [esp+0ACh+var_28] ecx +
add eax ecx +
mov ecx [esp+0ACh+var_88] +
mov edx eax +
mov eax [esp+0ACh+var_48] +
shr eax 3 +
lea eax [eax+edx*4+10h] +
mov [ecx+24h] eax +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] esi +
call sub_458B60  +
test eax eax +
mov edi eax +
jz loc_468907  +
mov eax [esp+0ACh+var_88] +
mov ecx [esp+0ACh+var_94] +
mov [eax+6Ch] edi +
mov eax [esi+4] +
mov eax [eax+30h] +
mov [esp+0ACh+var_AC] ecx +
mov [esp+0ACh+var_A8] edi +
call eax  +
mov eax [esi+4] +
lea edx [edi+4] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edx +
mov edx [esp+0ACh+var_24] +
mov [esp+0ACh+var_AC] edx +
call eax  +
mov eax [esi+4] +
lea edx [edi+8] +
mov ecx [esp+0ACh+var_8C] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] ecx +
call eax  +
mov eax [esi+4] +
lea edx [edi+0Ch] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edx +
mov edx [esp+0ACh+var_18] +
mov [esp+0ACh+var_AC] edx +
call eax  +
mov eax [esp+0ACh+var_48] +
mov [esp+0ACh+arg_0] esi +
mov esi ebx +
mov ebx [esp+0ACh+arg_0] +
shr eax 3 +
lea eax [edi+eax+10h] +
xor edi edi +
mov [esp+0ACh+var_80] eax +
mov ebp eax +
jmp loc_468D74  +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] 0 +
call eax  +
add ebp 4 +
add edi 1 +
cmp edi [esp+0ACh+var_94] +
jz loc_468DC9  +
mov eax [esp+0ACh+var_38] +
mov eax [eax+edi*4] +
test eax eax +
mov eax [ebx+4] +
mov eax [eax+30h] +
jz loc_468D5B  +
mov ecx [esp+0ACh+var_3C] +
mov ecx [ecx+edi*4] +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] ecx +
call eax  +
jmp loc_468D68  +
mov [esp+0ACh+var_A8] 0CE2h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_4685C7  +
mov [esp+0ACh+var_A8] 1A8Dh +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_468570  +
mov eax [esp+0ACh+var_80] +
add eax [esp+0ACh+var_84] +
mov [esp+0ACh+var_A8] offset sub_45D3E0 +
mov [esp+0ACh+arg_0] ebx +
mov ebx esi +
mov esi [esp+0ACh+arg_0] +
mov [esp+0ACh+var_30] eax +
mov eax [esp+0ACh+var_90] +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+arg_4] +
mov eax [eax+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_450810  +
mov eax [esp+0ACh+var_88] +
mov edi [esp+0ACh+var_8C] +
mov ebp [eax+6Ch] +
add ebp 10h +
test edi edi +
jz loc_468ED4  +
mov eax [ebx+174h] +
xor ecx ecx +
xor edi edi +
mov [esp+0ACh+arg_0] esi +
mov esi ebx +
mov ebx ecx +
mov ecx [esp+0ACh+arg_0] +
movzx eax byte ptr [eax+0Ah] +
jmp loc_468E96  +
cmp al 10h +
jz loc_468EA6  +
cmp al 20h +
jz loc_468EC6  +
cmp al 40h +
jnz loc_469028  +
mov eax [ecx+4] +
mov edx [esp+0ACh+var_34] +
mov [esp+0ACh+var_94] ecx +
mov eax [eax+24h] +
mov [esp+0ACh+var_A4] ebp +
mov ecx [edx+edi] +
mov [esp+0ACh+var_A8] 0 +
mov [esp+0ACh+var_AC] ecx +
call eax  +
mov ecx [esp+0ACh+var_94] +
mov eax [esi+174h] +
add ebx 1 +
add edi 4 +
movzx eax byte ptr [eax+0Ah] +
mov edx eax +
shr dl 3 +
movzx edx dl +
add ebp edx +
cmp [esp+0ACh+var_8C] ebx +
jz loc_468ED2  +
cmp al 8 +
jnz loc_468E40  +
mov eax [esp+0ACh+var_34] +
mov eax [eax+edi] +
mov [ebp+0] al +
jmp loc_468E76  +
mov eax [ecx+4] +
mov [esp+0ACh+var_94] ecx +
mov edx [eax+3Ch] +
mov eax [esp+0ACh+var_34] +
mov eax [eax+edi] +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] eax +
call edx  +
mov ecx [esp+0ACh+var_94] +
jmp loc_468E76  +
mov eax [ecx+4] +
mov [esp+0ACh+var_94] ecx +
mov edx [eax+30h] +
jmp loc_468EB0  +
mov esi ecx +
mov eax [esp+0ACh+var_34] +
mov [esp+0ACh+var_AC] eax +
call free  +
mov eax [esp+0ACh+var_44] +
mov [esp+0ACh+var_AC] eax +
call free  +
jmp loc_468550  +
mov [eax] dl +
mov ecx [esp+0ACh+var_94] +
mov edx ebp +
mov eax [edi+6Ch] +
mov [eax+ecx] dl +
jmp loc_468AD1  +
mov eax [ebx+174h] +
add edx 3 +
cmp byte ptr [eax+0Ah] 40h +
jnz loc_468B63  +
cmp edx 5 +
mov eax 6 +
cmovz edx eax +
mov [esp+0ACh+var_1C] 6 +
mov eax 3Fh +
mov [esp+0ACh+var_8C] 6 +
jmp loc_468B7B  +
mov byte ptr [edi+10h] 0 +
jmp loc_468529  +
mov eax [esi+4] +
lea edx [edi+10h] +
mov eax [eax+3Ch] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] 0 +
call eax  +
jmp loc_468529  +
mov [esp+0ACh+var_A8] 1A0Dh +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_468421  +
mov ecx [esi+4] +
mov ecx [ecx+30h] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] edx +
call ecx  +
mov eax [esi+4] +
mov eax [eax+30h] +
mov edx [esp+0ACh+var_94] +
add edx [edi+6Ch] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] edx +
call eax  +
jmp loc_468AD1  +
mov ecx [esi+4] +
mov ecx [ecx+3Ch] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] edx +
call ecx  +
mov eax [esi+4] +
mov eax [eax+3Ch] +
jmp loc_468F91  +
mov [esp+0ACh+var_A8] 1A2Ah +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
mov edi [esp+0ACh+var_4C] +
jmp loc_468B21  +
mov [esp+0ACh+var_A4] offset aBfd_elf_size_d +
mov [esp+0ACh+var_A8] 19DEh +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA70  +
mov eax [ebx+174h] +
cmp byte ptr [eax+0Ah] 40h +
jz loc_46907C  +
mov edx 5 +
jmp loc_468B63  +
mov [esp+0ACh+var_A4] offset aBfd_elf_size_d +
mov [esp+0ACh+var_A8] 1A22h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA70  +
mov [esp+0ACh+var_A4] offset aBfd_elf_size_d +
mov [esp+0ACh+var_A8] 1A83h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA70  +
mov [esp+0ACh+var_A8] 19D7h +
mov [esp+0ACh+var_AC] offset a____Binutil_12 +
call sub_44BA40  +
mov edx [esp+0ACh+var_94] +
jmp loc_468A39  +
mov eax [esi+4] +
lea edx [edi+10h] +
mov eax [eax+30h] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] 0 +
call eax  +
jmp loc_468529  +
mov edx 6 +
jmp loc_468F22  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+34h] +
mov ebp [esp+30h] +
mov edx [eax+1Ch] +
cmp dword ptr [edx+28h] 1 +
jz loc_4690B4  +
xor ebx ebx +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+34h] +
mov ebx [eax+34h] +
test ebx ebx +
jnz loc_4690D2  +
jmp loc_469170  +
mov ebx [ebx+9Ch] +
test ebx ebx +
jz loc_469170  +
test byte ptr [ebx+29h] 8 +
jnz loc_4690C4  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_4690C4  +
mov eax [ebp+4] +
mov ecx [ebx+0A0h] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+0Ch] +
cmp [ecx+4] al +
jnz loc_4690C4  +
mov esi [ebx+64h] +
test esi esi +
jnz loc_46912F  +
jmp loc_4690C4  +
***
mov eax [edi+88h] +
test eax eax +
jz loc_469121  +
movzx eax word ptr [esi+18h] +
and ax 0FC7Fh +
or ah 1 +
mov [esi+18h] ax +
mov eax [esp+34h] +
mov edx [eax+1Ch] +
mov esi [esi+0Ch] +
test esi esi +
jz loc_4690C4  +
test byte ptr [esi+16h] 80h +
jz loc_469128  +
cmp dword ptr [esi+3Ch] offset off_4BFB90 +
jz loc_469128  +
mov edi [esi+8Ch] +
add edx 7Ch +
mov [esp+8] esi +
mov [esp+4] edx +
mov [esp] ebp +
lea eax [edi+88h] +
mov [esp+0Ch] eax +
call sub_488F30  +
test eax eax +
jnz loc_469108  +
jmp loc_4690A8  +
***
mov eax [edx+7Ch] +
mov ebx 1 +
test eax eax +
jz loc_4690AA  +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp] ebp +
mov dword ptr [esp+0Ch] offset sub_45C5E0 +
mov [esp+4] eax +
call sub_4891B0  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+24h] +
mov esi [esp+28h] +
movzx edx byte ptr [ebx+34h] +
mov eax edx +
and eax 6 +
cmp al 6 +
jz loc_469233  +
movzx eax byte ptr [ebx+33h] +
mov ecx eax +
and eax 0FFFFFFFBh +
or cl [esi+33h] +
and ecx 4 +
or eax ecx +
mov [ebx+33h] al +
mov ecx eax +
and eax 0FFFFFFFEh +
or cl [esi+33h] +
and ecx 1 +
or eax ecx +
mov [ebx+33h] al +
mov ecx eax +
and eax 0FFFFFFEFh +
or cl [esi+33h] +
and ecx 10h +
or eax ecx +
mov ecx edx +
mov [ebx+33h] al +
and edx 0FFFFFFBFh +
or cl [esi+34h] +
and ecx 40h +
or edx ecx +
mov [ebx+34h] dl +
mov edx eax +
and eax 7Fh +
or dl [esi+33h] +
and edx 0FFFFFF80h +
or eax edx +
mov [ebx+33h] al +
movzx eax byte ptr [ebx+35h] +
mov edx eax +
and eax 0FFFFFFFDh +
or dl [esi+35h] +
and edx 2 +
or eax edx +
mov [ebx+35h] al +
cmp byte ptr [esi+0Ch] 6 +
jz loc_469240  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+20h] +
mov ecx [esi+24h] +
mov eax [eax+1Ch] +
mov edx [eax+3Ch] +
cmp ecx edx +
jle loc_469260  +
mov edi [ebx+24h] +
test edi edi +
js loc_4692D0  +
add ecx edi +
mov [ebx+24h] ecx +
mov [esi+24h] edx +
mov ecx [esi+28h] +
mov edx [eax+40h] +
cmp ecx edx +
jle loc_469279  +
mov edi [ebx+28h] +
test edi edi +
js loc_4692C0  +
add ecx edi +
mov [ebx+28h] ecx +
mov [esi+28h] edx +
mov edx [esi+20h] +
cmp edx 0FFFFFFFFh +
jz loc_469239  +
cmp dword ptr [ebx+20h] 0FFFFFFFFh +
jz loc_46929C  +
mov edx [ebx+38h] +
mov eax [eax+50h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_488700  +
mov edx [esi+20h] +
mov eax [esi+38h] +
mov [ebx+20h] edx +
mov [ebx+38h] eax +
mov dword ptr [esi+20h] 0FFFFFFFFh +
mov dword ptr [esi+38h] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov dword ptr [ebx+28h] 0 +
xor edi edi +
mov ecx [esi+28h] +
jmp loc_469271  +
***
mov dword ptr [ebx+24h] 0 +
xor edi edi +
mov ecx [esi+24h] +
jmp loc_469258  +
***
jmp sub_4692F0  +
***
mov edx [esp+arg_0] +
mov ecx [esp+arg_8] +
cmp byte ptr [eax+30h] 0Ah +
jz loc_469310  +
mov ebx [edx+1Ch] +
mov ebx [ebx+48h] +
and byte ptr [eax+33h] 7Fh +
mov [eax+28h] ebx +
test ecx ecx +
jz loc_469340  +
or byte ptr [eax+34h] 8 +
cmp dword ptr [eax+20h] 0FFFFFFFFh +
jz loc_469340  +
mov dword ptr [eax+20h] 0FFFFFFFFh +
mov ecx [eax+38h] +
mov eax [edx+1Ch] +
mov eax [eax+50h] +
mov [esp+arg_4] ecx +
mov [esp+arg_0] eax +
pop ebx  +
jmp sub_488700  +
pop ebx  +
retn   +
***
mov edx [esp+18h+arg_4] +
mov ebx [esp+18h+arg_0] +
mov eax [edx+4] +
mov eax [eax+1B0h] +
movzx eax byte ptr [eax+1AEh] +
mov dword ptr [ebx+44h] 0FFFFFFFFh +
mov dword ptr [ebx+48h] 0FFFFFFFFh +
mov dword ptr [ebx+4Ch] 1 +
shr al 1 +
and eax 1 +
sub eax 1 +
mov [ebx+3Ch] eax +
mov [ebx+40h] eax +
mov eax [esp+18h+arg_C] +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_C] eax +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_10] eax +
call sub_450020  +
mov edx [esp+18h+arg_10] +
mov dword ptr [ebx+28h] 1 +
mov [ebx+2Ch] edx +
add esp 18h +
pop ebx  +
retn   +
***
mov dword ptr [ebx+24h] offset sub_45CB60 +
mov eax ebx +
add esp 28h +
pop ebx  +
retn   +
***
xor eax eax +
jmp loc_46940B  +
***
mov eax [esp+arg_0] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jz loc_469430  +
retn   +
movzx edx byte ptr [eax+28h] +
and edx 7 +
cmp dl 1 +
jnz locret_46942D  +
mov eax [eax+0A0h] +
mov edx [esp+arg_4] +
mov [eax+220h] edx +
retn   +
***
mov edx [esp+arg_0] +
xor eax eax +
mov ecx [edx+4] +
cmp dword ptr [ecx+4] 5 +
jz loc_469461  +
retn   +
movzx ecx byte ptr [edx+28h] +
and ecx 7 +
cmp cl 1 +
jnz locret_46945F  +
mov eax [edx+0A0h] +
mov eax [eax+924h] +
retn   +
***
mov eax [esp+arg_0] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jz loc_469490  +
retn   +
movzx edx byte ptr [eax+28h] +
and edx 7 +
cmp dl 1 +
jnz locret_46948D  +
mov eax [eax+0A0h] +
mov edx [esp+arg_4] +
mov [eax+924h] edx +
retn   +
***
mov edx [esp+arg_0] +
xor eax eax +
mov ecx [edx+4] +
cmp dword ptr [ecx+4] 5 +
jnz locret_469517  +
movzx ecx byte ptr [edx+28h] +
and ecx 7 +
cmp cl 1 +
jnz locret_469517  +
mov eax [edx+0A0h] +
mov eax [eax+220h] +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov ebx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_18] 0 +
mov dword ptr [eax] 0 +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jz loc_469553  +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx+28h] +
and eax 7 +
cmp al 1 +
jnz loc_469546  +
mov [esp+3Ch+var_38] offset a_dynamic +
mov [esp+3Ch+var_3C] ebx +
call sub_44D4B0  +
test eax eax +
mov esi eax +
jz loc_469546  +
mov eax [eax+24h] +
test eax eax +
jz loc_469546  +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call sub_44DE10  +
test eax eax +
jnz loc_4695AF  +
mov edx [esp+3Ch+var_18] +
xor eax eax +
test edx edx +
jz loc_46954B  +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_28] eax +
call free  +
mov eax [esp+3Ch+var_28] +
jmp loc_46954B  +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
jz loc_469593  +
mov edx [ebx+0A0h] +
mov edi [esp+3Ch+var_18] +
mov edx [edx+40h] +
mov eax [edx+eax*4] +
mov eax [eax+1Ch] +
mov [esp+3Ch+var_20] eax +
mov eax [ebx+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx edx byte ptr [eax+6] +
mov ebp [eax+30h] +
mov eax edi +
mov [esp+3Ch+var_28] edx +
mov edx [esi+24h] +
add edx edi +
cmp edi edx +
jnb loc_469684  +
mov esi edi +
mov edi edx +
jmp loc_469610  +
add esi [esp+3Ch+var_28] +
cmp esi edi +
jnb loc_469680  +
lea eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] ebx +
call ebp  +
mov eax [esp+3Ch+var_14] +
test eax eax +
jz loc_469680  +
cmp eax 1 +
jnz loc_469608  +
mov eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+var_20] +
mov [esp+3Ch+var_38] eax +
call sub_475820  +
test eax eax +
mov [esp+3Ch+var_24] eax +
jz loc_469593  +
mov [esp+3Ch+var_38] 0Ch +
mov [esp+3Ch+var_3C] ebx +
call sub_458A80  +
test eax eax +
jz loc_469593  +
mov ecx [esp+3Ch+var_24] +
mov edx [esp+3Ch+arg_4] +
mov [eax+4] ebx +
mov [eax+8] ecx +
mov ecx [edx] +
mov [eax] ecx +
mov [edx] eax +
jmp loc_469608  +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call free  +
jmp loc_469546  +
***
jmp sub_4696A0  +
***
mov edx [esp+arg_4] +
test edx edx +
jz loc_4696C4  +
mov eax [esp+arg_C] +
test eax eax +
jz loc_4696C4  +
mov eax [esp+arg_0] +
mov ecx [eax+4] +
mov eax 1 +
cmp dword ptr [ecx+4] 5 +
jz loc_4696D0  +
retn   +
mov eax 1 +
retn   +
mov ecx [esp+arg_8] +
mov ecx [ecx+4] +
cmp dword ptr [ecx+4] 5 +
jnz locret_4696C2  +
mov eax [esp+arg_C] +
mov edx [edx+8Ch] +
mov eax [eax+8Ch] +
mov eax [eax+4] +
cmp [edx+4] eax +
setz al  +
movzx eax al +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+5Ch] +
mov eax [eax+8] +
mov esi eax +
mov edx eax +
shr esi 6 +
mov edi eax +
mov [esp+18h] esi +
mov ebx eax +
mov esi eax +
and dword ptr [esp+18h] 3Fh +
and edx 3Fh +
shr edi 12h +
mov [esp+28h] eax +
mov eax [esp+18h] +
shr ebx 16h +
and edi 0Fh +
and ebx 0Fh +
lea ecx [eax-1] +
mov eax 1 +
shl eax cl +
lea eax [eax+eax-2] +
mov [esp+20h] eax +
or dword ptr [esp+20h] 1 +
and esi 8000000h +
jz loc_469915  +
lea eax [edx+1] +
mov [esp+1Ch] eax +
mov eax [esp+18h] +
sub [esp+1Ch] eax +
mov eax [esp+5Ch] +
mov esi [esp+58h] +
add esi [eax] +
cmp edi ebx +
jb loc_469787  +
lea eax [ebx-1] +
cmp eax 3 +
jbe loc_469931  +
mov dword ptr [esp+4] 1F35h +
mov dword ptr [esp] offset a____Binutil_12 +
call sub_44BA40  +
cmp ebx 4 +
lea ecx ds:0[ebx*8] +
jz loc_469958  +
xor ebp ebp +
test edi edi +
jz loc_46982A  +
mov edx edi +
xor eax eax +
sub edx ebx +
mov [esp+2Ch] edi +
cmp ebx 2 +
mov edi edx +
jz loc_4697F0  +
cmp ebx 4 +
jz loc_4698F3  +
cmp ebx 1 +
jz loc_4698E5  +
mov dword ptr [esp+8] offset aGet_value +
mov dword ptr [esp+4] 1F56h +
mov dword ptr [esp] offset a____Binutil_12 +
call sub_44BA70  +
shl eax cl +
mov ebp eax +
mov eax [esp+50h] +
mov [esp+24h] ecx +
mov eax [eax+4] +
mov eax [eax+34h] +
mov [esp] esi +
call eax  +
mov ecx [esp+24h] +
or eax ebp +
mov edx edi +
add esi ebx +
sub edx ebx +
test edi edi +
jnz loc_4697BB  +
mov ebp [esp+20h] +
movzx ecx byte ptr [esp+1Ch] +
mov edi [esp+2Ch] +
shl ebp cl +
not ebp  +
and ebp eax +
mov ecx [esp+28h] +
xor eax eax +
test ecx 20000000h +
jnz loc_46986E  +
mov eax ecx +
mov ecx [esp+60h] +
shl eax 3 +
sar eax 1Fh +
lea edx ds:0[edi*8] +
add eax 3 +
mov [esp+10h] ecx +
mov ecx [esp+18h] +
mov [esp+0Ch] edx +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
mov [esp+4] ecx +
call loc_44E8B0  +
movzx ecx byte ptr [esp+1Ch] +
mov esi [esp+20h] +
and esi [esp+60h] +
mov edx [esp+58h] +
shl esi cl +
mov ecx edi +
or esi ebp +
mov ebp [esp+5Ch] +
sub ecx ebx +
add edx [ebp+0] +
mov ebp ebx +
neg ebp  +
mov [esp+18h] ebp +
mov ebp ecx +
add edx ecx +
test edi edi +
jz loc_46998B  +
cmp ebx 2 +
mov edi edx +
mov [esp+20h] eax +
mov edx esi +
mov esi [esp+50h] +
jz loc_4699AF  +
cmp ebx 4 +
jz loc_4699D0  +
cmp ebx 1 +
jz loc_469993  +
mov dword ptr [esp+8] offset aPut_value +
mov dword ptr [esp+4] 1F20h +
mov dword ptr [esp] offset a____Binutil_12 +
call sub_44BA70  +
shl eax cl +
mov edx eax +
movzx eax byte ptr [esi] +
or eax edx +
jmp loc_46980D  +
***
shl eax cl +
mov ebp eax +
mov eax [esp+50h] +
mov [esp+24h] ecx +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp] esi +
call eax  +
mov ecx [esp+24h] +
or eax ebp +
jmp loc_46980D  +
***
lea eax ds:0[edi*8] +
mov [esp+1Ch] eax +
mov eax [esp+18h] +
sub [esp+1Ch] eax +
sub [esp+1Ch] edx +
jmp loc_46976D  +
***
xor edx edx +
mov eax edi +
div  ebx +
test edx edx +
jnz loc_469787  +
mov eax [esp+50h] +
test eax eax +
jz loc_469787  +
test esi esi +
jnz loc_46979B  +
jmp loc_469787  +
***
cmp edi 4 +
nop   +
lea esi [esi+0] +
jz loc_469980  +
mov dword ptr [esp+4] 1F39h +
mov dword ptr [esp] offset a____Binutil_12 +
call sub_44BA40  +
xor ecx ecx +
jmp loc_4697AB  +
***
xor ecx ecx +
jmp loc_4697B1  +
***
mov eax [esp+20h] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [edi] dl +
shr edx 8 +
mov ecx ebp +
add edi [esp+18h] +
sub ecx ebx +
test ebp ebp +
jz loc_469987  +
cmp ebx 2 +
mov ebp ecx +
jnz loc_4698B7  +
mov ecx [esi+4] +
mov [esp+1Ch] edx +
mov ecx [ecx+3Ch] +
mov [esp] edx +
mov [esp+4] edi +
call ecx  +
mov edx [esp+1Ch] +
shr edx 10h +
jmp loc_469998  +
***
mov ecx [esi+4] +
mov ecx [ecx+30h] +
mov [esp] edx +
mov [esp+4] edi +
call ecx  +
xor edx edx +
jmp loc_469998  +
***
push edi  +
push esi  +
push ebx  +
mov edx [esp+10h] +
mov eax [edx+14h] +
and eax 2000h +
jz loc_469A10  +
mov eax 2 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edx [edx] +
mov esi offset a_eh_frame +
mov ecx 0Ah +
mov edi edx +
cmps   +
jz loc_469A06  +
mov edi edx +
mov esi offset a_gcc_except_ta +
mov ecx 12h +
mov edx 3 +
cmps   +
pop ebx  +
pop esi  +
pop edi  +
cmovnz eax edx +
retn   +
***
push esi  +
push ebx  +
sub esp 0Ch +
mov esi [esp+0Ch+arg_0] +
mov edi [esp+0Ch+arg_4] +
mov ebx [esi+7Ch] +
test ebx ebx +
jz loc_469A73  +
test byte ptr [ebx+17h] 2 +
jnz loc_469AA0  +
mov edx [esi+28h] +
test edx edx +
jz loc_469A90  +
mov eax [ebx+28h] +
test eax eax +
jz loc_469A80  +
cmp edx eax +
jz loc_469A70  +
xor ebx ebx +
mov [esi+7Ch] ebx +
add esp 0Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+24h] +
cmp edx eax +
jnz loc_469A6E  +
jmp loc_469A70  +
mov eax [ebx+28h] +
mov edx [esi+24h] +
test eax eax +
jnz loc_469A6A  +
jmp loc_469A80  +
mov eax [ebx+8Ch] +
mov ebp [eax+7Ch] +
test ebp ebp +
jz loc_469A6E  +
mov ebx ebp +
jmp loc_469AC2  +
mov eax [ebx+8Ch] +
mov ebx [eax+7Ch] +
cmp ebp ebx +
jz loc_469A6E  +
test ebx ebx +
jz loc_469A6E  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call sub_45CBA0  +
test eax eax +
jz loc_469AB1  +
test ebx ebx +
jnz loc_469A5C  +
jmp loc_469A70  +
***
push edi  +
push esi  +
push ebx  +
sub esp 0DCh +
mov eax [eax+4] +
test byte ptr [edx+29h] 8 +
mov [esp+0E8h+var_B0] edx +
mov [esp+0E8h+var_BC] eax +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+0E8h+var_B8] eax +
mov eax [eax+94h] +
mov [esp+0E8h+var_84] eax +
jnz loc_46A01B  +
mov eax [esp+0E8h+var_B0] +
mov eax [eax+0A0h] +
mov ecx [eax+928h] +
lea edi [eax+48h] +
mov [esp+0E8h+var_AC] eax +
mov [esp+0E8h+var_88] edi +
test ecx ecx +
jnz loc_46A030  +
mov eax [esp+0E8h+var_AC] +
mov eax [eax+68h] +
mov [esp+0E8h+var_A8] eax +
mov [esp+0E8h+var_94] eax +
mov eax [esp+0E8h+var_AC] +
mov edx [esp+0E8h+var_A8] +
mov eax [eax+78h] +
test edx edx +
mov [esp+0E8h+var_A0] eax +
jnz loc_46A669  +
mov eax [esp+0E8h+var_A8] +
mov ebx [esp+0E8h+var_A0] +
mov esi [ebp+2Ch] +
mov edi [ebp+30h] +
lea eax [eax+eax*4] +
lea eax [ebx+eax*4] +
cmp ebx eax +
mov [esp+0E8h+var_C0] eax +
jnb loc_469E85  +
mov [esp+0E8h+var_C4] ebp +
mov ebx [esp+0E8h+var_A0] +
mov [esp+0E8h+var_9C] 0 +
mov ebp [esp+0E8h+var_B0] +
jmp loc_469BBB  +
movzx eax byte ptr [ebx+0Ch] +
shr al 4 +
test al al +
jz loc_469BD1  +
mov dword ptr [edi] 0 +
add ebx 14h +
add esi 4 +
add edi 4 +
cmp [esp+0E8h+var_C0] ebx +
jbe loc_469E81  +
mov dword ptr [esi] 0FFFFFFFFh +
mov eax [ebp+0A0h] +
mov eax [eax+928h] +
test eax eax +
jnz loc_469B97  +
mov eax [ebx+10h] +
test eax eax +
jnz loc_46A060  +
mov [esp+0E8h+var_3C] offset off_4BFAE8 +
mov edx offset off_4BFAE8 +
mov ecx [esp+0E8h+var_C4] +
mov [edi] edx +
cmp [ecx+30h] edi +
jz loc_469BA8  +
movzx eax byte ptr [ebx+0Ch] +
and eax 0Fh +
cmp al 3 +
jz loc_469BA8  +
mov eax [ecx] +
movzx eax byte ptr [eax+1] +
mov edx eax +
and edx 18h +
cmp dl 18h +
jz loc_469BA8  +
and eax 60h +
cmp al 60h +
jz loc_469BA8  +
mov eax [ebx+10h] +
sub eax 1 +
cmp eax 0FFFFFEFEh +
ja loc_469C49  +
mov eax [esp+0E8h+var_3C] +
mov eax [eax+3Ch] +
mov edx [eax+0Ch] +
test edx edx +
jz loc_46A150  +
cmp eax [edx+10h] +
setnz al  +
test al al +
jnz loc_469BA8  +
mov eax [esp+0E8h+var_AC] +
mov edx [ebx+8] +
mov eax [eax+64h] +
mov [esp+0E8h+var_E0] edx +
mov [esp+0E8h+var_E8] ebp +
mov [esp+0E8h+var_E4] eax +
call sub_475820  +
test eax eax +
mov [esp+0E8h+var_B4] eax +
jz loc_46A250  +
mov eax [esp+0E8h+var_C4] +
mov edx [eax] +
movzx eax byte ptr [edx+1] +
mov ecx eax +
and ecx 18h +
cmp cl 10h +
jz loc_46A1F0  +
and eax 60h +
jnz loc_46A115  +
mov eax [esp+0E8h+var_3C] +
test byte ptr [eax+16h] 80h +
jz loc_469CC5  +
movzx eax byte ptr [edx] +
and eax 3 +
cmp al 2 +
jz loc_469CC5  +
mov eax [ebp+4] +
mov ecx [esp+0E8h+var_B4] +
mov eax [eax+11Ch] +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_E8] ebp +
call eax  +
test eax eax +
jnz loc_469BA8  +
movzx eax byte ptr [ebx+0Ch] +
and eax 0Fh +
cmp al 4 +
jz loc_46A12C  +
mov eax [esp+0E8h+var_9C] +
test eax eax +
jnz loc_469D6D  +
mov eax [esp+0E8h+var_C4] +
mov [esp+0E8h+var_2C] 0 +
mov [esp+0E8h+var_38] 0 +
mov [esp+0E8h+var_34] 0 +
add dword ptr [eax+38h] 1 +
xor eax eax +
test byte ptr [ebp+2Ch] 10h +
mov [esp+0E8h+var_30] 0 +
mov byte ptr [esp+0E8h+var_2C] 4 +
mov [esp+0E8h+var_28] 0FFFFFFF1h +
jnz loc_469D32  +
mov eax [ebp+0] +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_C4] +
lea ecx [esp+0E8h+var_38] +
mov [esp+0E8h+var_D8] 0 +
mov [esp+0E8h+var_DC] offset off_4BFB90 +
mov [esp+0E8h+var_E0] ecx +
mov [esp+0E8h+var_E8] eax +
call sub_45D830  +
test eax eax +
jz loc_46A250  +
mov [esp+0E8h+var_9C] 1 +
mov eax [ebx] +
mov [esp+0E8h+var_38] eax +
mov eax [ebx+4] +
mov [esp+0E8h+var_34] eax +
mov eax [ebx+8] +
mov [esp+0E8h+var_30] eax +
mov eax [ebx+0Ch] +
mov [esp+0E8h+var_2C] eax +
mov eax [ebx+10h] +
mov [esp+0E8h+var_28] eax +
mov eax [esp+0E8h+var_3C] +
mov eax [eax+3Ch] +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
mov [esp+0E8h+var_28] eax +
jz loc_46A250  +
mov ecx [esp+0E8h+var_3C] +
mov edx [esp+0E8h+var_C4] +
mov eax [ecx+38h] +
mov edx [edx] +
add eax [esp+0E8h+var_38] +
mov [esp+0E8h+var_A4] ecx +
mov [esp+0E8h+var_38] eax +
mov [esp+0E8h+var_98] edx +
movzx edx byte ptr [edx] +
and edx 3 +
cmp dl 2 +
jz loc_469E1C  +
mov edx [ecx+3Ch] +
add eax [edx+1Ch] +
movzx edx byte ptr [esp+0E8h+var_2C] +
mov [esp+0E8h+var_38] eax +
and edx 0Fh +
cmp dl 6 +
jz loc_46A260  +
mov eax [esp+0E8h+var_BC] +
mov eax [eax+7Ch] +
mov [esp+0E8h+var_D8] 0 +
mov [esp+0E8h+var_98] eax +
mov eax [esp+0E8h+var_A4] +
mov [esp+0E8h+var_DC] eax +
lea eax [esp+0E8h+var_38] +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_B4] +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_C4] +
mov [esp+0E8h+var_E8] eax +
call sub_45D830  +
test eax eax +
jz loc_46A250  +
cmp eax 1 +
jnz loc_469BA8  +
mov eax [esp+0E8h+var_98] +
add ebx 14h +
add esi 4 +
add edi 4 +
mov [esi-4] eax +
cmp [esp+0E8h+var_C0] ebx +
ja loc_469BBB  +
mov ebp [esp+0E8h+var_C4] +
mov eax [esp+0E8h+var_B8] +
mov edi 20h +
mov edx 8 +
mov esi 0FFFFFFFFh +
mov eax [eax+174h] +
cmp byte ptr [eax+0Ah] 20h +
cmovnz edx edi +
mov edi [esp+0E8h+var_B0] +
setnz al  +
movzx eax al +
lea eax ds:4[eax*4] +
mov [esp+0E8h+var_98] eax +
mov eax [edi+0A0h] +
mov ebx [edi+64h] +
mov [esp+0E8h+var_C0] edx +
mov edx 0FFh +
cmovnz edx esi +
mov eax [eax+218h] +
test ebx ebx +
mov [esp+0E8h+var_74] edx +
mov [esp+0E8h+var_8C] eax +
jz loc_46A01B  +
mov eax [esp+0E8h+var_98] +
mov [esp+0E8h+var_C4] ebp +
mov ebp ebx +
mov [esp+0E8h+var_6C] 0 +
mov [esp+0E8h+var_70] eax +
nop   +
lea esi [esi+0] +
test byte ptr [ebp+18h] 2 +
jz loc_46A010  +
mov eax [esp+0E8h+var_C4] +
mov eax [eax] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_46A160  +
mov eax [ebp+14h] +
test ah 1 +
jz loc_46A010  +
mov edx [ebp+24h] +
test edx edx +
jnz loc_469F39  +
test al 4 +
jz loc_46A010  +
test eax 100000h +
jnz loc_46A010  +
mov ecx [ebp+8Ch] +
mov ecx [ecx+30h] +
test ecx ecx +
jz loc_46AD44  +
mov edi [esp+0E8h+var_B8] +
mov [esp+0E8h+var_40] ecx +
test byte ptr [edi+1AEh] 40h +
jz loc_469F78  +
mov ebx [ebp+28h] +
test ebx ebx +
jz loc_469F78  +
cmp edx ebx +
ja loc_46A640  +
test al 4 +
jnz loc_46A284  +
mov eax [esp+0E8h+var_B8] +
mov eax [eax+12Ch] +
test eax eax +
jz loc_469FB4  +
mov esi [esp+0E8h+var_C4] +
mov ecx [esp+0E8h+var_40] +
mov edi [esp+0E8h+var_BC] +
mov edx [esi] +
mov [esp+0E8h+var_DC] ecx +
mov [esp+0E8h+var_E0] ebp +
mov [esp+0E8h+var_E8] edi +
mov [esp+0E8h+var_E4] edx +
call eax  +
test eax eax +
jnz loc_46A010  +
movzx eax word ptr [ebp+18h] +
shr ax 7 +
and eax 7 +
cmp eax 2 +
jz loc_46A773  +
jle loc_46A6BD  +
cmp eax 3 +
jz loc_46A60A  +
cmp eax 6 +
jnz loc_46A7A0  +
mov eax [esp+0E8h+var_C4] +
mov edx [esp+0E8h+var_40] +
mov eax [eax] +
mov [esp+0E8h+var_DC] edx +
mov [esp+0E8h+var_E0] ebp +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_48D240  +
test eax eax +
jz loc_46A250  +
lea esi [esi+0] +
mov ebp [ebp+0Ch] +
test ebp ebp +
jnz loc_469F00  +
add esp 0DCh +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+0E8h+var_B8] +
xor edx edx +
mov [esp+0E8h+var_94] 0 +
mov eax [eax+174h] +
movzx ecx byte ptr [eax+5] +
mov eax [esp+0E8h+var_AC] +
mov eax [eax+60h] +
div  ecx +
mov [esp+0E8h+var_A8] eax +
jmp loc_469B4A  +
cmp eax 0FFFFFFF1h +
jz loc_46A100  +
cmp eax 0FFFFFFF2h +
jnz loc_46A083  +
mov [esp+0E8h+var_3C] offset off_4BFA40 +
mov edx offset off_4BFA40 +
jmp loc_469BEC  +
mov [esp+0E8h+var_E4] eax +
mov [esp+0E8h+var_E8] ebp +
call sub_478480  +
test eax eax +
mov [esp+0E8h+var_3C] eax +
jz loc_469BA2  +
movzx ecx word ptr [eax+18h] +
mov edx eax +
and cx 380h +
cmp cx 100h +
jnz loc_469BEC  +
movzx ecx byte ptr [ebx+0Ch] +
and ecx 0Fh +
cmp cl 3 +
jz loc_469BEC  +
mov eax [eax+8Ch] +
mov edx [ebx] +
mov eax [eax+88h] +
mov [esp+0E8h+var_DC] edx +
mov [esp+0E8h+var_E0] eax +
lea eax [esp+0E8h+var_3C] +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_489930  +
mov [ebx] eax +
mov edx [esp+0E8h+var_3C] +
jmp loc_469BEC  +
mov [esp+0E8h+var_3C] offset off_4BFB90 +
mov edx offset off_4BFB90 +
jmp loc_469BEC  +
cmp al 40h +
jz loc_469CA7  +
movzx eax byte ptr [ebx+0Ch] +
and eax 0Fh +
cmp al 4 +
jnz loc_469CD4  +
test byte ptr [ebp+2Ch] 10h +
jnz loc_469BA8  +
mov eax [esp+0E8h+var_C4] +
mov [esp+0E8h+var_9C] 1 +
add dword ptr [eax+38h] 1 +
jmp loc_469D6D  +
mov ecx [esp+0E8h+var_BC] +
cmp eax [ecx+68h] +
setnz al  +
jmp loc_469C41  +
mov edx [ebp+14h] +
mov ecx edx +
mov eax edx +
and ecx 2100000h +
cmp ecx 2000000h +
jnz loc_469F21  +
mov eax [ebp+8Ch] +
mov ebx [ebp+3Ch] +
mov eax [eax+20h] +
cmp [esp+0E8h+var_A8] eax +
jbe loc_46A5C2  +
mov edi [esp+0E8h+var_B0] +
mov ecx [edi+0A0h] +
lea edi ds:0[eax*4] +
mov esi [ecx+928h] +
test esi esi +
jnz loc_46A5B0  +
mov esi [esp+0E8h+var_A0] +
lea eax [eax+eax*4] +
lea ecx [esi+eax*4] +
movzx eax byte ptr [ecx+0Ch] +
and eax 0Fh +
cmp al 3 +
jz loc_46ADF0  +
mov eax [esp+0E8h+var_C4] +
mov eax [eax+2Ch] +
mov esi [eax+edi] +
mov eax edx +
cmp esi 0FFFFFFFFh +
jz loc_46B003  +
mov edx [ebx+8Ch] +
mov [edx+20h] esi +
jmp loc_469F21  +
mov eax [edx+20h] +
mov ecx [esp+0E8h+var_B4] +
mov [esp+0E8h+var_DC] 0 +
mov [esp+0E8h+var_E0] 0 +
mov [esp+0E8h+var_E8] eax +
mov [esp+0E8h+var_E4] ecx +
call sub_44E180  +
test eax eax +
jz loc_469BA8  +
mov eax [esp+0E8h+var_C4] +
mov edx [eax] +
movzx eax byte ptr [edx+1] +
jmp loc_469C87  +
mov eax [esp+0E8h+var_B0] +
mov [esp+0E8h+var_E0] ebp +
mov [esp+0E8h+var_E8] offset aErrorBSizeOfSe +
mov [esp+0E8h+var_E4] eax +
call off_4BFA04  +
mov [esp+0E8h+var_E8] 14h +
call sub_44BAF0  +
nop   +
xor eax eax +
add esp 0DCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+0E8h+var_98] +
mov edx [ecx+1Ch] +
mov edx [edx+0C8h] +
test edx edx +
jz loc_46AF28  +
sub eax [edx+1Ch] +
mov [esp+0E8h+var_38] eax +
jmp loc_469E1C  +
mov eax [esp+0E8h+var_C4] +
mov edx [eax+1Ch] +
mov eax [eax+18h] +
mov [esp+0E8h+var_D8] 0 +
mov [esp+0E8h+var_E4] ebp +
mov [esp+0E8h+var_DC] edx +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_B0] +
mov [esp+0E8h+var_E8] eax +
call sub_462810  +
test eax eax +
mov [esp+0E8h+var_7C] eax +
jz loc_46AF0E  +
mov edx [ebp+24h] +
cmp [esp+0E8h+var_98] edx +
jnb loc_46A314  +
mov eax [ebp+0] +
mov edi offset a_ctors +
mov ecx 6 +
mov esi eax +
cmps   +
jnz loc_46A710  +
mov ecx [ebp+3Ch] +
mov edi offset a_init_array +
mov esi [ecx] +
mov ecx 0Ch +
cmps   +
jnz loc_46A710  +
movzx eax byte ptr [eax+6] +
cmp al 2Eh +
jz loc_46A2FD  +
test al al +
jnz loc_46A314  +
mov eax [esp+0E8h+var_98] +
imul eax [ebp+4Ch] +
cmp edx eax +
jnz loc_46A22A  +
or dword ptr [ebp+14h] 4000000h +
movzx eax word ptr [ebp+18h] +
shr ax 7 +
and eax 7 +
lea ecx [eax-1] +
cmp ecx 5 +
ja loc_46A340  +
mov eax 1 +
shl eax cl +
test al 25h +
jz loc_46A340  +
mov [esp+0E8h+var_A4] 0FFFFFFFFh +
jmp loc_46A375  +
mov eax [ebp+94h] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+114h] +
test eax eax +
jz loc_46A362  +
mov [esp+0E8h+var_E8] ebp +
call eax  +
test eax eax +
jnz loc_46A332  +
mov eax [esp+0E8h+var_B8] +
mov eax [eax+118h] +
mov [esp+0E8h+var_E8] ebp +
call eax  +
mov [esp+0E8h+var_A4] eax +
mov edi [esp+0E8h+var_B8] +
mov eax [ebp+4Ch] +
mov ecx [esp+0E8h+var_7C] +
mov esi [esp+0E8h+var_A4] +
mov edx [edi+174h] +
lea eax [eax+eax*2] +
shl eax 2 +
mov edi ecx +
movzx edx byte ptr [edx+9] +
imul eax edx +
add eax ecx +
mov ebx eax +
mov [esp+0E8h+var_B4] eax +
mov eax esi +
and eax 1 +
mov [esp+0E8h+var_90] eax +
mov eax esi +
and eax 2 +
cmp ecx ebx +
mov [esp+0E8h+var_80] eax +
jnb loc_46A825  +
mov [esp+0E8h+var_9C] ebp +
jmp loc_46A461  +
mov eax [esp+0E8h+var_B0] +
mov eax [eax+0A0h] +
mov esi [eax+928h] +
mov eax [esp+0E8h+var_C4] +
test esi esi +
mov eax [eax+30h] +
lea esi [eax+ebx*4] +
mov eax [esi] +
jz loc_46A3EC  +
test eax eax +
jz loc_46A47B  +
mov ecx [esp+0E8h+var_A0] +
lea edx [ebx+ebx*4] +
lea edx [ecx+edx*4] +
movzx ecx byte ptr [edx+0Ch] +
mov [esp+0E8h+var_DC] eax +
mov eax [esp+0E8h+var_88] +
mov [esp+0E8h+var_E0] edx +
mov ebp ecx +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_B0] +
and ebp 0Fh +
mov [esp+0E8h+var_E8] eax +
call sub_475D70  +
mov [esp+0E8h+var_3C] eax +
lea eax [ebp-8] +
cmp eax 1 +
jbe loc_46A4DE  +
test esi esi +
jz loc_46A454  +
cmp [esp+0E8h+var_A4] 0FFFFFFFFh +
jz loc_46A454  +
mov ebx [esi] +
test ebx ebx +
jz loc_46A454  +
cmp ebx offset off_4BFB90 +
jz loc_46A454  +
cmp dword ptr [ebx+3Ch] offset off_4BFB90 +
jz loc_46ABB2  +
add edi 0Ch +
cmp [esp+0E8h+var_B4] edi +
jbe loc_46A821  +
mov edx [edi+4] +
movzx ecx byte ptr [esp+0E8h+var_C0] +
mov ebx edx +
shr ebx cl +
test ebx ebx +
jz loc_46A454  +
cmp [esp+0E8h+var_A8] ebx +
ja loc_46A3C4  +
mov esi [esp+0E8h+var_8C] +
mov eax ebx +
sub eax [esp+0E8h+var_94] +
mov eax [esi+eax*4] +
test eax eax +
jnz loc_46A494  +
jmp loc_46AF89  +
mov eax [eax+14h] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
jbe loc_46A491  +
test byte ptr [eax+0Dh] 1 +
movzx ebp byte ptr [eax+30h] +
jz loc_46A4B6  +
sub edx 3 +
cmp dl 1 +
jbe loc_46A740  +
movzx esi byte ptr [eax+0Ch] +
lea edx [eax+14h] +
lea ecx [esi-3] +
xor esi esi +
cmp cl 1 +
cmovbe esi edx +
mov eax [eax+4] +
mov [esp+0E8h+var_3C] eax +
lea eax [ebp-8] +
cmp eax 1 +
ja loc_46A42E  +
mov ecx [esp+0E8h+var_C4] +
mov eax [ecx] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_46A42E  +
xor eax eax +
cmp ebp 9 +
mov esi [esp+0E8h+var_9C] +
setz al  +
mov [esp+0E8h+var_D8] eax +
mov eax [esp+0E8h+var_A8] +
lea edx [esp+0E8h+var_3C] +
mov [esp+0E8h+var_DC] eax +
mov eax [esp+0E8h+var_A0] +
mov [esp+0E8h+var_E0] eax +
mov eax [esi+3Ch] +
mov eax [eax+1Ch] +
add eax [esi+38h] +
add eax [edi] +
mov [esp+0E8h+var_E8] ecx +
mov ecx [esp+0E8h+var_B0] +
mov [esp+0E8h+var_E4] eax +
lea eax [esp+0E8h+var_38] +
call sub_45F110  +
test eax eax +
jz loc_46A250  +
cmp [esp+0E8h+var_A8] ebx +
mov esi [esp+0E8h+var_38] +
jbe loc_46AE13  +
mov ecx [esp+0E8h+var_A0] +
lea eax [ebx+ebx*4] +
lea eax [ecx+eax*4] +
movzx edx byte ptr [eax+0Ch] +
shr dl 4 +
test dl dl +
jz loc_46B0EB  +
mov eax [esp+0E8h+var_B0] +
xor ebp ebp +
mov eax [eax+0A0h] +
mov ecx [eax+928h] +
test ecx ecx +
jnz loc_46AE21  +
mov [esp+0E8h+var_E4] 1DE1h +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esp+0E8h+var_B0] +
mov eax [eax+0A0h] +
jmp loc_46AE21  +
mov esi [esp+0E8h+var_C4] +
mov ecx [esi+30h] +
mov ecx [ecx+eax*4] +
test ecx ecx +
jnz loc_46A1AE  +
mov edi [esp+0E8h+var_8C] +
sub eax [esp+0E8h+var_94] +
mov eax [edi+eax*4] +
movzx edi byte ptr [eax+0Ch] +
lea ecx [edi-6] +
cmp cl 1 +
ja loc_46A5EF  +
lea esi [esi+0] +
mov eax [eax+14h] +
movzx esi byte ptr [eax+0Ch] +
lea ecx [esi-6] +
cmp cl 1 +
jbe loc_46A5E0  +
mov dword ptr [eax+1Ch] 0FFFFFFFEh +
mov eax [ebx+8Ch] +
mov dword ptr [eax+20h] 0FFFFFFFEh +
mov eax edx +
jmp loc_469F21  +
mov eax [esp+0E8h+var_C4] +
mov edx [esp+0E8h+var_40] +
mov eax [eax] +
mov [esp+0E8h+var_DC] edx +
mov [esp+0E8h+var_E0] ebp +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_48D4C0  +
test eax eax +
jnz loc_46A010  +
jmp loc_46A250  +
mov edi [esp+0E8h+var_C4] +
mov eax [edi+14h] +
mov [esp+0E8h+var_E0] ebx +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_E8] eax +
call memcpy  +
mov eax [edi+14h] +
mov [esp+0E8h+var_40] eax +
mov eax [ebp+14h] +
jmp loc_469F78  +
test eax eax +
jnz loc_469B61  +
mov eax [ebp+28h] +
mov ecx [ebp+24h] +
mov edx [ebp+20h] +
mov [esp+0E8h+var_DC] 0 +
mov [esp+0E8h+var_D8] eax +
mov eax [esp+0E8h+var_A8] +
mov [esp+0E8h+var_D0] ecx +
mov [esp+0E8h+var_D4] edx +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_88] +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_B0] +
mov [esp+0E8h+var_E8] eax +
call sub_475A20  +
test eax eax +
mov [esp+0E8h+var_A0] eax +
jnz loc_469B61  +
xor eax eax +
jmp loc_46A252  +
cmp eax 1 +
jnz loc_46A7A0  +
mov eax [esp+0E8h+var_40] +
mov [esp+0E8h+var_D8] eax +
mov eax [ebp+8Ch] +
mov [esp+0E8h+var_E0] ebp +
add eax 88h +
mov [esp+0E8h+var_DC] eax +
mov eax [esp+0E8h+var_C4] +
mov eax [eax] +
mov eax [eax+1Ch] +
sub eax 0FFFFFF80h +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_48A6F0  +
test eax eax +
jnz loc_46A010  +
jmp loc_46A250  +
mov edi offset a_dtors +
mov ecx 6 +
mov esi eax +
cmps   +
jnz loc_46A314  +
mov ecx [ebp+3Ch] +
mov edi offset a_fini_array +
mov esi [ecx] +
mov ecx 0Ch +
cmps   +
jnz loc_46A314  +
jmp loc_46A2F1  +
mov edx [eax+14h] +
test byte ptr [edx+16h] 10h +
jnz loc_46A4B6  +
mov edx [edx+94h] +
test edx edx +
jz loc_46A4B6  +
test byte ptr [edx+2Ah] 20h +
jz loc_46A4B6  +
mov byte ptr [eax+0Ch] 1 +
xor esi esi +
mov [eax+14h] edx +
jmp loc_46A4C8  +
mov eax [ebp+8Ch] +
mov eax [eax+88h] +
mov [esp+0E8h+var_E4] ebp +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_4896B0  +
test eax eax +
jnz loc_46A010  +
jmp loc_46A250  +
mov eax [ebp+14h] +
test ah 80h +
jnz loc_46A010  +
xor edi edi +
test eax 4000000h +
mov esi [ebp+38h] +
mov ebx [ebp+24h] +
jz loc_46AE71  +
sub ebx [esp+0E8h+var_98] +
mov eax ebp +
mov ebp ebx +
mov ebx eax +
jmp loc_46A7E4  +
test ebp ebp +
jz loc_46B0E4  +
add esi [esp+0E8h+var_70] +
adc edi [esp+0E8h+var_6C] +
sub ebp [esp+0E8h+var_98] +
mov eax [ebx+3Ch] +
mov [esp+0E8h+var_DC] esi +
mov [esp+0E8h+var_D8] edi +
mov ecx eax +
mov eax [esp+0E8h+var_98] +
mov [esp+0E8h+var_E4] ecx +
mov ecx [esp+0E8h+var_BC] +
mov [esp+0E8h+var_D4] eax +
mov eax [esp+0E8h+var_40] +
mov [esp+0E8h+var_E8] ecx +
add eax ebp +
mov [esp+0E8h+var_E0] eax +
call sub_44DBC0  +
test eax eax +
jnz loc_46A7D0  +
xor eax eax +
jmp loc_46A252  +
mov ebp [esp+0E8h+var_9C] +
mov eax [esp+0E8h+var_C4] +
mov edi [esp+0E8h+var_A0] +
mov edx [eax+30h] +
mov eax [eax] +
mov [esp+0E8h+var_D0] edi +
mov edi [esp+0E8h+var_7C] +
mov [esp+0E8h+var_DC] ebp +
mov [esp+0E8h+var_CC] edx +
mov edx [esp+0E8h+var_40] +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_D4] edi +
mov edi [esp+0E8h+var_B0] +
mov [esp+0E8h+var_D8] edx +
mov [esp+0E8h+var_E8] eax +
mov eax [esp+0E8h+var_84] +
mov [esp+0E8h+var_E0] edi +
call eax  +
test eax eax +
jz loc_46A250  +
cmp eax 2 +
mov eax [esp+0E8h+var_C4] +
mov ecx [eax] +
movzx edi byte ptr [ecx] +
jz loc_46AF20  +
and edi 3 +
mov eax edi +
cmp al 2 +
jz loc_46A897  +
cmp byte ptr [ecx+2] 0 +
jns loc_469F80  +
mov eax [ebp+8Ch] +
mov ebx eax +
mov [esp+0E8h+var_64] eax +
mov eax [ebp+3Ch] +
mov [esp+0E8h+var_80] eax +
mov eax [eax+8Ch] +
mov esi eax +
mov [esp+0E8h+var_50] eax +
mov eax [esp+0E8h+var_B8] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+9] +
mov edx eax +
mov byte ptr [esp+0E8h+var_90] al +
mov [esp+0E8h+var_B4] eax +
mov eax [ebp+4Ch] +
lea eax [eax+eax*2] +
shl eax 2 +
imul eax edx +
mov edx [esi+40h] +
add eax [esp+0E8h+var_7C] +
mov [esp+0E8h+var_A4] eax +
mov eax [esi+48h] +
mov esi [ebx+3Ch] +
lea eax [eax+edx*4] +
test esi esi +
mov [esp+0E8h+var_60] eax +
jz loc_46B0F9  +
mov ebx [esi+28h] +
test ebx ebx +
jnz loc_46AE5A  +
add ebx [esp+0E8h+var_7C] +
mov [esp+0E8h+var_9C] ebx +
mov eax [ebp+38h] +
mov [esp+0E8h+var_B4] eax +
mov eax edi +
cmp al 2 +
jz loc_46A92E  +
mov eax [esp+0E8h+var_80] +
mov eax [eax+1Ch] +
add [esp+0E8h+var_B4] eax +
mov eax [esp+0E8h+var_A4] +
mov edi [esp+0E8h+var_7C] +
cmp edi eax +
jnb loc_46B15C  +
mov esi [esp+0E8h+var_60] +
movzx eax byte ptr [esp+0E8h+var_90] +
mov [esp+0E8h+var_68] 0 +
mov ebx [esp+0E8h+var_C4] +
mov [esp+0E8h+var_5C] 0 +
mov [esp+0E8h+var_90] esi +
mov esi edi +
xor edi edi +
jmp loc_46A9A4  +
mov eax [esp+0E8h+var_B4] +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi+8] 0 +
mov [esi] eax +
add esi 0Ch +
add edi 1 +
cmp [esp+0E8h+var_A4] esi +
jbe loc_46AD7D  +
mov eax [esp+0E8h+var_B8] +
mov ecx [ebx] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+9] +
cmp eax edi +
jz loc_46AAD4  +
cmp esi [esp+0E8h+var_9C] +
jz loc_46B17F  +
mov eax [esi] +
mov [esp+0E8h+var_E0] ebp +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_DC] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_483010  +
cmp eax 0FFFFFFFDh +
mov [esi] eax +
ja loc_46A970  +
mov edx [ebx] +
add eax [ebp+38h] +
mov [esi] eax +
movzx edx byte ptr [edx] +
mov ecx eax +
mov [esp+0E8h+var_B4] eax +
and edx 3 +
cmp dl 2 +
jz loc_46A9FB  +
mov eax [ebp+3Ch] +
add ecx [eax+1Ch] +
mov [esi] ecx +
mov [esp+0E8h+var_B4] ecx +
mov eax [esi+4] +
movzx ecx byte ptr [esp+0E8h+var_C0] +
shr eax cl +
test eax eax +
jz loc_46A984  +
mov ecx [esp+0E8h+var_B0] +
cmp [esp+0E8h+var_A8] eax +
mov edx [ecx+0A0h] +
jbe loc_46AAE0  +
cmp dword ptr [edx+928h] 0 +
lea ecx ds:0[eax*4] +
mov [esp+0E8h+var_80] ecx +
jz loc_46AA43  +
mov ecx [ebx+30h] +
mov ecx [ecx+eax*4] +
test ecx ecx +
jz loc_46AAE0  +
mov edx [esp+0E8h+var_90] +
lea eax [eax+eax*4] +
mov dword ptr [edx] 0 +
mov edx [esp+0E8h+var_A0] +
lea eax [edx+eax*4] +
mov edx [eax] +
mov [esp+0E8h+var_38] edx +
mov edx [eax+4] +
mov [esp+0E8h+var_34] edx +
mov ecx [eax+8] +
mov [esp+0E8h+var_30] ecx +
mov edx [eax+0Ch] +
mov [esp+0E8h+var_2C] edx +
mov eax [eax+10h] +
mov edx [esp+0E8h+var_80] +
mov [esp+0E8h+var_28] eax +
mov eax [ebx+30h] +
mov eax [eax+edx] +
mov [esp+0E8h+var_78] eax +
movzx eax byte ptr [esp+0E8h+var_2C] +
and eax 0Fh +
cmp al 3 +
jz loc_46AB44  +
mov eax [ebx+2Ch] +
mov edx [esp+0E8h+var_80] +
mov eax [eax+edx] +
cmp eax 0FFFFFFFFh +
jz loc_46AC07  +
movzx ecx byte ptr [esp+0E8h+var_C0] +
shl eax cl +
mov edx [esp+0E8h+var_74] +
and edx [esi+4] +
or edx eax +
mov [esi+4] edx +
jmp loc_46A984  +
add [esp+0E8h+var_90] 4 +
xor edi edi +
jmp loc_46A9AC  +
mov edx [edx+218h] +
sub eax [esp+0E8h+var_94] +
mov eax [edx+eax*4] +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-6] +
cmp dl 1 +
ja loc_46AB0F  +
lea esi [esi+0] +
mov eax [eax+14h] +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-6] +
cmp dl 1 +
jbe loc_46AB00  +
mov edx [eax+1Ch] +
test edx edx +
js loc_46AB32  +
mov [esp+0E8h+var_E4] 281Ch +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
mov [esp+0E8h+var_80] eax +
call sub_44BA40  +
mov eax [esp+0E8h+var_80] +
mov ecx [esp+0E8h+var_90] +
mov dword ptr [eax+1Ch] 0FFFFFFFEh +
mov [ecx] eax +
jmp loc_46A984  +
cmp [esp+0E8h+var_78] offset off_4BFB90 +
jz loc_46AF82  +
mov eax [esp+0E8h+var_78] +
test eax eax +
jz loc_46B149  +
mov ecx [eax+94h] +
test ecx ecx +
jz loc_46B149  +
mov eax [esp+0E8h+var_78] +
mov edx [eax+3Ch] +
cmp edx offset off_4BFB90 +
jz loc_46AF62  +
mov eax [edx+88h] +
test eax eax +
jz loc_46AFD8  +
movzx ecx byte ptr [esp+0E8h+var_C0] +
shl eax cl +
mov edx [esp+0E8h+var_68] +
test edx edx +
jz loc_46AAC3  +
mov ecx [esp+0E8h+var_78] +
mov edx [ecx+38h] +
add [esi+8] edx +
jmp loc_46AAC3  +
movzx eax word ptr [ebx+18h] +
and ax 380h +
cmp ax 100h +
jz loc_46A454  +
cmp ax 200h +
jz loc_46A454  +
mov edx [esp+0E8h+var_90] +
test edx edx +
jnz loc_46B106  +
mov eax [esp+0E8h+var_80] +
test eax eax +
jz loc_46A454  +
mov eax [esp+0E8h+var_C4] +
mov eax [eax] +
mov [esp+0E8h+var_E8] ebx +
mov [esp+0E8h+var_E4] eax +
call sub_469A40  +
test eax eax +
jz loc_46A454  +
mov [esi] eax +
jmp loc_46A454  +
mov eax [ebx] +
movzx eax byte ptr [eax+1] +
and eax 18h +
cmp al 18h +
jz loc_46B16C  +
mov eax [esp+0E8h+var_AC] +
mov eax [eax+64h] +
mov [esp+0E8h+var_E0] ecx +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_B0] +
mov [esp+0E8h+var_E8] eax +
call sub_475820  +
test eax eax +
mov [esp+0E8h+var_58] eax +
jz loc_46A250  +
mov eax [esp+0E8h+var_78] +
mov edx [esp+0E8h+var_BC] +
mov ecx [eax+3Ch] +
mov [esp+0E8h+var_E8] edx +
mov [esp+0E8h+var_E4] ecx +
mov [esp+0E8h+var_54] ecx +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
mov [esp+0E8h+var_28] eax +
jz loc_46A250  +
mov eax [esp+0E8h+var_78] +
mov ecx [ebx] +
mov eax [eax+38h] +
add eax [esp+0E8h+var_38] +
mov [esp+0E8h+var_4C] ecx +
mov [esp+0E8h+var_38] eax +
movzx edx byte ptr [ecx] +
and edx 3 +
cmp dl 2 +
jz loc_46ACDF  +
mov ecx [esp+0E8h+var_54] +
add eax [ecx+1Ch] +
mov edx eax +
mov [esp+0E8h+var_38] eax +
movzx eax byte ptr [esp+0E8h+var_2C] +
and eax 0Fh +
cmp al 6 +
jnz loc_46ACDF  +
mov eax [esp+0E8h+var_4C] +
mov eax [eax+1Ch] +
mov eax [eax+0C8h] +
test eax eax +
jz loc_46B1D5  +
sub edx [eax+1Ch] +
mov [esp+0E8h+var_38] edx +
mov eax [esp+0E8h+var_BC] +
mov edx [eax+7Ch] +
mov eax [esp+0E8h+var_78] +
mov [esp+0E8h+var_D8] 0 +
mov [esp+0E8h+var_E8] ebx +
mov [esp+0E8h+var_54] edx +
mov [esp+0E8h+var_DC] eax +
lea eax [esp+0E8h+var_38] +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_58] +
mov [esp+0E8h+var_E4] eax +
call sub_45D830  +
test eax eax +
jz loc_46A250  +
cmp eax 1 +
jnz loc_46B1B9  +
mov eax [ebx+2Ch] +
mov edx [esp+0E8h+var_54] +
mov ecx [esp+0E8h+var_80] +
mov [eax+ecx] edx +
mov eax edx +
jmp loc_46AABC  +
mov eax [esp+0E8h+var_C4] +
mov eax [eax+14h] +
mov [esp+0E8h+var_E4] ebp +
mov [esp+0E8h+var_40] eax +
lea eax [esp+0E8h+var_40] +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_B0] +
mov [esp+0E8h+var_E8] eax +
call sub_4878A0  +
test eax eax +
jz loc_46A250  +
mov eax [ebp+14h] +
jmp loc_469F78  +
mov eax [esp+0E8h+var_64] +
mov esi [eax+3Ch] +
test esi esi +
jz loc_46AD96  +
mov ecx [esi+18h] +
test ecx ecx +
jnz loc_46AEA8  +
mov eax [esp+0E8h+var_64] +
mov eax [eax+4Ch] +
test eax eax +
jz loc_469F80  +
mov edx [eax+18h] +
test edx edx +
jz loc_469F80  +
mov edi [esp+0E8h+var_B8] +
mov edx [edi+0F0h] +
mov edi [esp+0E8h+var_5C] +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E4] ebp +
mov [esp+0E8h+var_D8] edi +
mov edi [esp+0E8h+var_7C] +
mov [esp+0E8h+var_E8] eax +
mov [esp+0E8h+var_DC] edi +
call edx  +
test eax eax +
jnz loc_469F80  +
xor eax eax +
jmp loc_46A252  +
mov esi [esp+0E8h+var_C4] +
mov eax [ebx+8Ch] +
mov ecx [esi+30h] +
mov ecx [ecx+edi] +
mov ecx [ecx+3Ch] +
mov ecx [ecx+88h] +
mov [eax+20h] ecx +
mov eax edx +
jmp loc_469F21  +
mov eax [esp+0E8h+var_B0] +
mov ebp [esp+0E8h+var_A8] +
mov eax [eax+0A0h] +
mov eax [eax+218h] +
sub ebx ebp +
mov eax [eax+ebx*4] +
movzx ebx byte ptr [eax+0Ch] +
lea edx [ebx-6] +
cmp dl 1 +
ja loc_46AE47  +
mov eax [eax+14h] +
movzx ebx byte ptr [eax+0Ch] +
lea edx [ebx-6] +
cmp dl 1 +
jbe loc_46AE38  +
mov byte ptr [eax+0Ch] 3 +
mov [eax+18h] esi +
mov dword ptr [eax+14h] offset off_4BFB90 +
jmp loc_46A454  +
mov eax [esi+18h] +
xor edx edx +
div  ebx +
imul eax [esp+0E8h+var_B4] +
lea ebx [eax+eax*2] +
shl ebx 2 +
jmp loc_46A90E  +
mov eax [ebp+3Ch] +
mov edx [esp+0E8h+var_40] +
mov [esp+0E8h+var_D4] ebx +
mov [esp+0E8h+var_DC] esi +
mov [esp+0E8h+var_E4] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_D8] edi +
mov [esp+0E8h+var_E0] edx +
mov [esp+0E8h+var_E8] eax +
call sub_44DBC0  +
test eax eax +
jnz loc_46A010  +
jmp loc_46A250  +
mov edi [esp+0E8h+var_60] +
mov eax [esp+0E8h+var_B8] +
mov eax [eax+0F0h] +
mov [esp+0E8h+var_D8] edi +
mov edi [esp+0E8h+var_7C] +
mov [esp+0E8h+var_E0] esi +
mov [esp+0E8h+var_E4] ebp +
mov [esp+0E8h+var_DC] edi +
mov edi [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] edi +
call eax  +
test eax eax +
jz loc_46A250  +
mov ecx [esi+28h] +
xor eax eax +
test ecx ecx +
jz loc_46AEEE  +
mov eax [esi+18h] +
xor edx edx +
div  ecx +
mov edi [esp+0E8h+var_B8] +
mov edx [edi+174h] +
movzx edx byte ptr [edx+9] +
lea edx [edx+edx*2] +
shl edx 2 +
imul edx eax +
add [esp+0E8h+var_7C] edx +
jmp loc_46AD96  +
mov edi [ebp+4Ch] +
test edi edi +
jz loc_46A2BA  +
xor eax eax +
jmp loc_46A252  +
and edi 3 +
jmp loc_46A897  +
mov [esp+0E8h+var_E4] 2656h +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA40  +
mov ecx [esp+0E8h+var_C4] +
mov eax [esp+0E8h+var_38] +
mov edx [ecx] +
mov ecx [esp+0E8h+var_3C] +
mov edx [edx+1Ch] +
mov [esp+0E8h+var_A4] ecx +
mov edx [edx+0C8h] +
jmp loc_46A275  +
mov eax [eax+7Ch] +
test eax eax +
jz loc_46AF82  +
mov edx [eax+3Ch] +
test edx edx +
jz loc_46AF82  +
mov eax [edx+1Ch] +
sub [esi+8] eax +
cmp edx offset off_4BFB90 +
jnz loc_46AB7F  +
xor eax eax +
jmp loc_46AB94  +
lea esi [esp+0E8h+var_38] +
mov ebx [esp+0E8h+var_9C] +
mov [esp+0E8h+var_E0] edx +
mov [esp+0E8h+var_E4] offset a08lx_2 +
mov [esp+0E8h+var_E8] esi +
call sprintf  +
mov eax [esp+0E8h+var_B0] +
mov [esp+0E8h+var_DC] esi +
mov [esp+0E8h+var_E0] ebx +
mov [esp+0E8h+var_E8] offset aErrorBContains +
mov [esp+0E8h+var_E4] eax +
call off_4BFA04  +
mov [esp+0E8h+var_E8] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_46A252  +
mov eax [edx+1Ch] +
add [esi+8] eax +
mov [esp+0E8h+var_E4] edx +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] eax +
call sub_452C80  +
mov edx [eax+1Ch] +
sub [esi+8] edx +
mov eax [eax+88h] +
jmp loc_46AB8D  +
mov eax [ecx] +
mov esi [esp+0E8h+var_C4] +
mov [esp+0E8h+var_38] eax +
mov eax [ecx+4] +
mov [esp+0E8h+var_34] eax +
mov eax [ecx+8] +
mov [esp+0E8h+var_30] eax +
mov edx [ecx+0Ch] +
mov [esp+0E8h+var_2C] edx +
mov edx [ecx+10h] +
mov ecx [esp+0E8h+var_AC] +
mov [esp+0E8h+var_28] edx +
mov edx [esi+30h] +
mov edx [edx+edi] +
mov esi [edx+3Ch] +
mov edx [ecx+64h] +
mov ecx [esp+0E8h+var_B0] +
mov [esp+0E8h+var_E0] eax +
mov [esp+0E8h+var_E4] edx +
mov [esp+0E8h+var_E8] ecx +
call sub_475820  +
test eax eax +
mov [esp+0E8h+var_B4] eax +
jz loc_46A250  +
mov [esp+0E8h+var_E4] esi +
mov esi [esp+0E8h+var_BC] +
mov [esp+0E8h+var_E8] esi +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
mov [esp+0E8h+var_28] eax +
jz loc_46A250  +
mov eax [ebp+38h] +
add [esp+0E8h+var_38] eax +
lea eax [esp+0E8h+var_38] +
mov esi [esi+7Ch] +
mov edx [esp+0E8h+var_B4] +
mov [esp+0E8h+var_E0] eax +
mov eax [esp+0E8h+var_C4] +
mov [esp+0E8h+var_D8] 0 +
mov [esp+0E8h+var_DC] ebp +
mov [esp+0E8h+var_E4] edx +
mov [esp+0E8h+var_E8] eax +
call sub_45D830  +
test eax eax +
jz loc_46A250  +
cmp eax 1 +
jnz loc_46B200  +
mov eax [esp+0E8h+var_C4] +
add edi [eax+2Ch] +
mov eax [ebp+14h] +
mov [edi] esi +
jmp loc_46A1DC  +
mov ebp ebx +
jmp loc_46A010  +
mov dword ptr [eax+10h] 0FFFFFFF1h +
mov [eax] esi +
jmp loc_46A454  +
mov eax [esp+0E8h+var_7C] +
mov [esp+0E8h+var_9C] eax +
jmp loc_46A916  +
mov eax [esp+0E8h+var_C4] +
mov edx [ebx+94h] +
mov ecx [esp+0E8h+var_B0] +
mov eax [eax] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+0E8h+var_D4] edx +
mov edx [esp+0E8h+var_3C] +
mov [esp+0E8h+var_DC] ecx +
mov ecx [esp+0E8h+var_9C] +
mov [esp+0E8h+var_D8] ebx +
mov [esp+0E8h+var_E8] offset aXSReferencedIn +
mov [esp+0E8h+var_E4] edx +
mov [esp+0E8h+var_E0] ecx +
call eax  +
jmp loc_46ABDA  +
mov [esp+0E8h+var_E8] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_46A252  +
mov [esp+0E8h+var_5C] 0 +
jmp loc_46AD87  +
mov [esp+0E8h+var_E8] 5 +
call sub_44BAF0  +
xor eax eax +
jmp loc_46A252  +
mov eax [esp+0E8h+var_50] +
mov edx [eax+50h] +
mov eax [eax+58h] +
lea eax [eax+edx*4] +
mov edx eax +
mov [esp+0E8h+var_90] eax +
mov eax [esp+0E8h+var_B8] +
mov [esp+0E8h+var_5C] edx +
movzx eax byte ptr [eax+1ACh] +
shr al 6 +
and eax 1 +
mov [esp+0E8h+var_68] eax +
jmp loc_46A9B6  +
mov [esp+0E8h+var_E0] offset aElf_link_input +
mov [esp+0E8h+var_E4] 2893h +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA70  +
mov [esp+0E8h+var_E4] 2884h +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [ebx] +
mov edx [esp+0E8h+var_38] +
mov eax [eax+1Ch] +
mov eax [eax+0C8h] +
jmp loc_46ACD5  +
mov [esp+0E8h+var_E0] offset aElf_link_input +
mov [esp+0E8h+var_E4] 26B6h +
mov [esp+0E8h+var_E8] offset a____Binutil_12 +
call sub_44BA70  +
lea esi [esi+0] +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0FCh +
mov eax [esp+1F4h+var_E4] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+1F4h+var_1C0] eax +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+1Ch] +
cmp dword ptr [eax+28h] 1 +
jz loc_46B260  +
xor ebx ebx +
add esp 0FCh +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+1F4h+var_E0] +
movzx edx byte ptr [ecx] +
test dl 1 +
jnz loc_46BC69  +
mov ecx [eax+30h] +
and edx 3 +
mov eax [eax+38h] +
cmp dl 2 +
mov [esp+1F4h+var_1C4] 1 +
mov [esp+1F4h+var_19C] ecx +
mov [esp+1F4h+var_198] eax +
jz loc_46B2A5  +
mov eax [esp+1F4h+var_E0] +
movsx eax byte ptr [eax+2] +
mov [esp+1F4h+var_1C4] eax +
shr [esp+1F4h+var_1C4] 1Fh +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_140] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_13C] eax +
call sub_488500  +
test eax eax +
mov [esp+1F4h+var_138] eax +
jz loc_46B24E  +
mov eax [esp+1F4h+var_19C] +
test eax eax +
jnz loc_46BE1A  +
mov [esp+1F4h+var_134] 0 +
mov [esp+1F4h+var_130] 0 +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_12C] 0 +
mov [esp+1F4h+var_128] 0 +
mov [esp+1F4h+var_124] 0 +
mov eax [eax+4] +
mov [esp+1F4h+var_120] 0 +
mov [esp+1F4h+var_11C] 0 +
mov [esp+1F4h+var_118] 0 +
mov eax [eax+1B0h] +
mov [esp+1F4h+var_114] 0 +
mov [esp+1F4h+var_110] 0 +
mov [esp+1F4h+var_10C] 0 +
mov ebp [eax+188h] +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_108] 0 +
mov [esp+1F4h+var_1BC] 0 +
mov ebx [eax+64h] +
test ebx ebx +
jz loc_46C9DF  +
mov [esp+1F4h+var_1A4] 0 +
lea esi [esi+0] +
test ebp ebp +
mov esi [ebx] +
jz loc_46B3B6  +
mov [esp+1F4h+var_1F0] ebp +
mov [esp+1F4h+var_1F4] esi +
call strcmp  +
test eax eax +
jz loc_46B3C4  +
mov edi offset a_gnu_attribute +
mov ecx 10h +
cmps   +
jnz loc_46B40E  +
mov eax [ebx+0A0h] +
test eax eax +
jnz loc_46B3D6  +
jmp loc_46B3EC  +
mov eax [eax] +
test eax eax +
jz loc_46B3EC  +
cmp dword ptr [eax+4] 1 +
jnz loc_46B3D0  +
mov edx [eax+10h] +
mov eax [eax] +
and dword ptr [edx+14h] 0FFFFFEFFh +
test eax eax +
jnz loc_46B3D6  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_48EB10  +
test eax eax +
mov [esp+1F4h+var_1BC] eax +
jnz loc_46BAD0  +
or dword ptr [ebx+14h] 8000h +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_46B3A0  +
mov eax [esp+1F4h+var_E4] +
mov ebp [eax+64h] +
test ebp ebp +
jz loc_46C9DB  +
mov [esp+1F4h+var_1CC] 0 +
mov edi ebp +
mov [esp+1F4h+var_1B0] 0 +
mov [esp+1F4h+var_1B8] 0 +
mov [esp+1F4h+var_1AC] 0 +
mov [esp+1F4h+var_1A8] 0 +
mov [esp+1F4h+var_1D4] 0 +
lea esi [esi+0] +
mov esi [edi+0A0h] +
mov ebp [edi+8Ch] +
mov dword ptr [edi+4Ch] 0 +
test esi esi +
jnz loc_46B492  +
jmp loc_46BAC0  +
cmp eax 1 +
jz loc_46B8F8  +
mov esi [esi] +
test esi esi +
lea esi [esi+0] +
jz loc_46B4B9  +
mov eax [esi+4] +
lea edx [eax-3] +
cmp edx 1 +
ja loc_46B480  +
add dword ptr [edi+4Ch] 1 +
mov ecx 1 +
test byte ptr [edi+19h] 4 +
jz loc_46B8F0  +
mov esi [esi] +
add [ebp+50h] ecx +
test esi esi +
jnz loc_46B492  +
mov edx [edi+4Ch] +
test edx edx +
jz loc_46BAC0  +
mov eax [edi+14h] +
or eax 4 +
mov [edi+14h] eax +
test al 1 +
jnz loc_46B4DE  +
test byte ptr [edi+18h] 1 +
jnz loc_46B4DE  +
mov dword ptr [edi+1Ch] 0 +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_46B460  +
mov eax [esp+1F4h+var_E0] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_46B506  +
mov eax [esp+1F4h+var_1CC] +
test eax eax +
jnz loc_46BC86  +
mov eax [esp+1F4h+var_E0] +
mov edi [esp+1F4h+var_E4] +
movzx edx byte ptr [eax+1] +
mov eax 1 +
and edx 18h +
cmp dl 18h +
cmovz eax [esp+1F4h+var_1C4] +
test byte ptr [edi+2Bh] 10h +
mov [edi+7Ch] eax +
jnz loc_46BE51  +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_479A70  +
test eax eax +
jz loc_46BC3C  +
mov eax [esp+1F4h+var_E4] +
mov esi [eax+64h] +
test esi esi +
jz loc_46B60A  +
mov edi [esp+1F4h+var_E4] +
jmp loc_46B57D  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_46B60A  +
test byte ptr [esi+14h] 4 +
mov ebx [esi+8Ch] +
jz loc_46B5BB  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_46B5A2  +
lea edx [ebx+3Ch] +
mov eax edi +
call sub_45EC50  +
test eax eax +
jz loc_46BC3C  +
mov eax [ebx+4Ch] +
test eax eax +
jz loc_46B5BB  +
lea edx [ebx+4Ch] +
mov eax edi +
call sub_45EC50  +
test eax eax +
jz loc_46BC3C  +
mov edx [ebx+10h] +
and edx [ebx+14h] +
mov dword ptr [ebx+40h] 0 +
mov dword ptr [ebx+50h] 0 +
cmp edx 0FFFFFFFFh +
jnz loc_46B572  +
test byte ptr [esi+17h] 8 +
mov eax [ebx+30h] +
jz loc_46CA96  +
test eax eax +
jnz loc_46CA96  +
mov eax [ebx+18h] +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
jz loc_46BC3C  +
mov esi [esi+0Ch] +
mov [ebx+30h] eax +
test esi esi +
jnz loc_46B57D  +
mov eax [esp+1F4h+var_E4] +
mov dword ptr [eax+7Ch] 0 +
mov eax [eax+0A0h] +
mov edi eax +
mov dword ptr [eax+4Ch] 2 +
mov [esp+1F4h+var_1B4] eax +
mov eax [esp+1F4h+var_1C0] +
mov eax [eax+174h] +
movzx edx byte ptr [eax+5] +
mov [edi+70h] edx +
movzx ecx byte ptr [eax+0Bh] +
mov eax 1 +
shl eax cl +
cmp [esp+1F4h+var_1B8] 13h +
mov [edi+6Ch] eax +
ja loc_46BE71  +
mov eax 230h +
mov [esp+1F4h+var_1B8] 14h +
mov ecx [esp+1F4h+var_E0] +
mov edi [esp+1F4h+var_1B8] +
mov ebx [ecx+1Ch] +
mov [ebx+58h] edi +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
mov [ebx+5Ch] eax +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+1Ch] +
mov eax [eax+5Ch] +
test eax eax +
jz loc_46BC3C  +
mov eax [esp+1F4h+var_E4] +
mov edx [eax+0A0h] +
cmp dword ptr [edx+214h] 0FF01h +
sbb eax eax +
not eax  +
mov [esp+1F4h+var_10C] eax +
mov eax [esp+1F4h+var_E0] +
movzx eax byte ptr [eax+1] +
and eax 18h +
cmp al 18h +
jnz loc_46BCB0  +
mov eax [esp+1F4h+var_1C4] +
test eax eax +
jnz loc_46BCB0  +
mov eax [esp+1F4h+var_1D4] +
test eax eax +
jnz loc_46C327  +
mov ebp [esp+1F4h+var_1A8] +
test ebp ebp +
jnz loc_46C307  +
mov edi [esp+1F4h+var_1AC] +
test edi edi +
jnz loc_46C2D2  +
mov eax [esp+1F4h+var_1C0] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+5] +
imul eax [esp+1F4h+var_1B8] +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_120] eax +
jz loc_46BC3C  +
mov eax [esp+1F4h+var_1B8] +
lea ebx ds:0[eax*4] +
add eax ebx +
shl eax 2 +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_118] eax +
jz loc_46BC3C  +
mov [esp+1F4h+var_1F4] ebx +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_114] eax +
jz loc_46BC3C  +
mov [esp+1F4h+var_1F4] ebx +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_110] eax +
jz loc_46BC3C  +
mov esi [esp+1F4h+var_1B0] +
test esi esi +
jnz loc_46C347  +
mov eax [esp+1F4h+var_E0] +
xor edx edx +
mov esi [eax+1Ch] +
mov ebx [esi+0C8h] +
test ebx ebx +
mov eax ebx +
jnz loc_46B7C6  +
jmp loc_46B7FA  +
mov edx [eax+24h] +
test edx edx +
jnz loc_46B7BC  +
and ch 1 +
jnz loc_46B7BC  +
mov ecx [eax+0A4h] +
test ecx ecx +
jz loc_46B7BC  +
mov edx [ecx+0Ch] +
add edx [ecx+8] +
add edx [eax+1Ch] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_46B7CE  +
mov ecx [eax+14h] +
test ch 4 +
jnz loc_46B7A0  +
mov eax [esp+1F4h+var_1C0] +
mov edi [ebx+1Ch] +
cmp dword ptr [eax+1A4h] 1 +
jnz loc_46B7F0  +
mov ecx [ebx+40h] +
mov eax 1 +
shl eax cl +
lea edx [edx+eax-1] +
neg eax  +
and edx eax +
mov eax edx +
sub eax edi +
mov [esi+0CCh] eax +
mov eax [esp+1F4h+var_E4] +
mov eax [eax+64h] +
test eax eax +
mov [esp+1F4h+var_1D4] eax +
jz loc_46BF99  +
mov eax [esp+1F4h+var_E4] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+1F4h+var_1C8] eax +
mov eax [esp+1F4h+var_1D4] +
mov ebx [eax+0A0h] +
test ebx ebx +
jz loc_46BF86  +
xor ecx ecx +
xor esi esi +
mov [esp+1F4h+var_1B8] 0 +
xor edi edi +
mov [esp+1F4h+var_1CC] ecx +
jmp loc_46B861  +
add esi 1 +
test edi edi +
jnz loc_46B888  +
mov ebx [ebx] +
test ebx ebx +
jz loc_46BEF0  +
cmp dword ptr [ebx+4] 1 +
jnz loc_46B850  +
mov ebp [ebx+10h] +
mov edx [ebp+94h] +
mov eax [edx+4] +
cmp dword ptr [eax+4] 5 +
jz loc_46BE7B  +
add esi 1 +
test edi edi +
mov [esp+1F4h+var_1CC] ebp +
jz loc_46B857  +
test esi esi +
jz loc_46B857  +
mov ebx [esp+1F4h+var_1B8] +
mov ecx [esp+1F4h+var_1CC] +
test ebx ebx +
jz loc_46C219  +
test ecx ecx +
jz loc_46C219  +
mov edi [esp+1F4h+var_1B8] +
mov edx [ecx+94h] +
mov eax [edi+94h] +
mov [esp+1F4h+var_1E0] edx +
mov [esp+1F4h+var_1E4] ecx +
mov [esp+1F4h+var_1EC] edi +
mov [esp+1F4h+var_1E8] eax +
mov eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1F4] offset aAHasBothOrdere +
mov [esp+1F4h+var_1F0] eax +
call off_4BFA04  +
mov [esp+1F4h+var_1F4] 11h +
call sub_44BAF0  +
jmp loc_46B24E  +
add [ebp+40h] ecx +
jmp loc_46B489  +
mov ebx [esi+10h] +
or byte ptr [ebx+18h] 2 +
test byte ptr [ebx+16h] 80h +
cmovz eax [esp+1F4h+var_1CC] +
mov ecx [ebx+8Ch] +
mov [esp+1F4h+var_1CC] eax +
mov eax [ebp+4] +
mov [esp+1F4h+var_1C8] ecx +
cmp eax 4 +
jz loc_46B9D3  +
cmp eax 9 +
jz loc_46B9D3  +
mov eax [esp+1F4h+var_1C4] +
test eax eax +
jz loc_46BA95  +
mov ecx [ebx+4Ch] +
mov edx [ebx+24h] +
mov eax [ebx+28h] +
cmp edx eax +
cmovnb eax edx +
mov edx [esp+1F4h+var_1D4] +
cmp edx eax +
cmovnb eax edx +
mov [esp+1F4h+var_1D4] eax +
mov eax [ebx+94h] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jz loc_46B9E0  +
test ecx ecx +
jz loc_46B489  +
mov eax [esi+4] +
add [edi+4Ch] ecx +
cmp eax 1 +
jnz loc_46B4A6  +
mov ebx [esp+1F4h+var_1C4] +
test ebx ebx +
jz loc_46B4A6  +
mov eax [esp+1F4h+var_1C8] +
mov edx [eax+3Ch] +
test edx edx +
jz loc_46B9A7  +
mov ecx [edx+28h] +
xor eax eax +
mov ebx [ebp+40h] +
test ecx ecx +
jz loc_46B9A2  +
mov eax [edx+18h] +
xor edx edx +
div  ecx +
add eax ebx +
mov [ebp+40h] eax +
mov eax [esp+1F4h+var_1C8] +
mov edx [eax+4Ch] +
test edx edx +
jz loc_46B489  +
mov ecx [edx+28h] +
xor eax eax +
mov ebx [ebp+50h] +
test ecx ecx +
jz loc_46B9C9  +
mov eax [edx+18h] +
xor edx edx +
div  ecx +
add eax ebx +
mov [ebp+50h] eax +
jmp loc_46B489  +
xor ecx ecx +
jmp loc_46B93A  +
test byte ptr [eax+29h] 8 +
jnz loc_46B961  +
mov eax [eax+0A0h] +
mov [esp+1F4h+var_1B4] eax +
mov eax [eax+928h] +
test eax eax +
jz loc_46BB10  +
mov eax [esp+1F4h+var_1C0] +
xor edx edx +
mov eax [eax+174h] +
movzx eax byte ptr [eax+5] +
mov [esp+1F4h+var_1A0] eax +
mov eax [esp+1F4h+var_1B4] +
mov eax [eax+60h] +
div  [esp+1F4h+var_1A0] +
mov edx [esp+1F4h+var_1B8] +
cmp edx eax +
cmovb edx eax +
cmp eax [esp+1F4h+var_1B0] +
mov [esp+1F4h+var_1B8] edx +
jbe loc_46BA49  +
mov edx [esp+1F4h+var_1B4] +
mov edx [edx+208h] +
test edx edx +
cmovz eax [esp+1F4h+var_1B0] +
mov [esp+1F4h+var_1B0] eax +
test byte ptr [ebx+14h] 4 +
jz loc_46B961  +
mov eax [esp+1F4h+var_1C8] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_46BE6A  +
mov eax [eax+18h] +
mov edx [esp+1F4h+var_1C8] +
mov edx [edx+4Ch] +
test edx edx +
jz loc_46BA73  +
add eax [edx+18h] +
mov edx [esp+1F4h+var_1A8] +
cmp edx eax +
cmovnb eax edx +
mov [esp+1F4h+var_1A8] eax +
mov eax [ebx+4Ch] +
mov ebx [esp+1F4h+var_1AC] +
cmp ebx eax +
cmovnb eax ebx +
mov [esp+1F4h+var_1AC] eax +
jmp loc_46B961  +
mov eax [esp+1F4h+var_1C0] +
xor ecx ecx +
mov eax [eax+0F4h] +
test eax eax +
jz loc_46B93A  +
mov ecx [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F0] ebx +
mov [esp+1F4h+var_1F4] ecx +
call eax  +
mov ecx eax +
jmp loc_46B93A  +
mov eax [edi+14h] +
and eax 0FFFFFFFBh +
mov [edi+14h] eax +
jmp loc_46B4CD  +
mov eax [esp+1F4h+var_1BC] +
mov [esp+1F4h+var_1F0] ebx +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_44DB80  +
mov dword ptr [ebx+0A0h] 0 +
mov [esp+1F4h+var_1A4] ebx +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_46B3A0  +
jmp loc_46B415  +
mov eax [esp+1F4h+var_1B4] +
mov eax [eax+68h] +
jmp loc_46BA21  +
mov [esp+1F4h+var_1F4] edi +
call sub_44E820  +
mov [esp+1F4h+var_1F4] eax +
mov [esp+1F4h+var_1C8] eax +
call sub_459D10  +
mov edx eax +
mov eax [esp+1F4h+var_1C8] +
test eax eax +
jz loc_46BB42  +
test edx edx +
jz loc_46BC3C  +
mov eax [esp+1F4h+var_1CC] +
mov [esp+1F4h+var_1E8] edx +
mov [esp+1F4h+var_1F4] edi +
mov [esp+1F4h+var_1AC] edx +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F0] eax +
call sub_44F180  +
mov edx [esp+1F4h+var_1AC] +
test eax eax +
jz loc_46BBEA  +
cmp eax 1 +
jnz loc_46C90F  +
cmp dword ptr [ebp+4] 3 +
mov eax [ebp+10h] +
jz loc_46C9D1  +
mov ecx [eax+4] +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1A8] edx +
mov edx [edi+20h] +
mov eax [eax+18h] +
mov eax [eax+1Ch] +
mov [esp+1F4h+var_1E8] edx +
mov [esp+1F4h+var_1D8] 0 +
mov [esp+1F4h+var_1DC] 0 +
mov [esp+1F4h+var_1AC] eax +
mov eax [esp+1F4h+var_1CC] +
mov [esp+1F4h+var_1E0] 0 +
mov [esp+1F4h+var_1EC] ecx +
mov [esp+1F4h+var_1F0] 0 +
mov [esp+1F4h+var_1E4] eax +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F4] eax +
mov eax [esp+1F4h+var_1AC] +
call eax  +
mov edx [esp+1F4h+var_1A8] +
test eax eax +
jz loc_46CA7E  +
mov eax [esp+1F4h+var_1C8] +
mov [esp+1F4h+var_1AC] edx +
mov [esp+1F4h+var_1E0] eax +
mov eax [ebp+8] +
mov [esp+1F4h+var_1EC] edx +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1E8] eax +
mov eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_44DBC0  +
mov edx [esp+1F4h+var_1AC] +
mov [esp+1F4h+var_1F4] edx +
mov [esp+1F4h+var_1C8] eax +
call free  +
mov eax [esp+1F4h+var_1C8] +
test eax eax +
jnz loc_46C151  +
lea eax [esp+1F4h+var_140] +
mov [esp+1F4h+var_1CC] eax +
mov eax [esp+1F4h+var_E4] +
xor ebx ebx +
mov edx [esp+1F4h+var_1CC] +
add eax 64h +
call sub_45EE00  +
add esp 0FCh +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+1F4h+var_E4] +
or dword ptr [ecx+28h] 800h +
mov ecx [esp+1F4h+var_E0] +
movzx edx byte ptr [ecx] +
jmp loc_46B273  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F0] offset sub_45EEF0 +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+1Ch] +
mov [esp+1F4h+var_1F4] eax +
call sub_450810  +
jmp loc_46B506  +
mov eax [edx+934h] +
lea esi [esp+1F4h+var_178] +
mov edx [eax+24h] +
mov eax [eax+20h] +
mov [esp+1F4h+var_1E8] 1 +
mov [esp+1F4h+var_1EC] edx +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_1B4] +
add eax 48h +
mov [esp+1F4h+var_1F4] eax +
call sub_478D10  +
lea eax [esp+1F4h+var_140] +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1E8] offset off_4BFAE8 +
mov [esp+1F4h+var_1EC] esi +
mov [esp+1F4h+var_1F0] 0 +
mov [esp+1F4h+var_1F4] eax +
mov [esp+1F4h+var_178] 0 +
mov [esp+1F4h+var_174] 0 +
mov [esp+1F4h+var_16C] 0 +
mov [esp+1F4h+var_16B] 0 +
mov [esp+1F4h+var_168] 0 +
mov [esp+1F4h+var_16A] 0 +
mov [esp+1F4h+var_1CC] eax +
call sub_45D830  +
cmp eax 1 +
jnz loc_46BC47  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_174] 0 +
mov [esp+1F4h+var_16C] 3 +
mov [esp+1F4h+var_16B] 0 +
mov eax [eax+0A0h] +
mov [esp+1F4h+var_178] 0 +
mov [esp+1F4h+var_16A] 0 +
cmp dword ptr [eax+214h] 1 +
jbe loc_46B6D7  +
mov edi [esp+1F4h+var_E4] +
mov ebx 1 +
mov ebp [esp+1F4h+var_1CC] +
mov [esp+1F4h+var_1F0] ebx +
mov [esp+1F4h+var_1F4] edi +
call sub_478480  +
test eax eax +
jz loc_46BE04  +
mov ecx [edi+7Ch] +
mov [esp+1F4h+var_168] ebx +
mov [eax+88h] ecx +
mov ecx [esp+1F4h+var_E0] +
movzx ecx byte ptr [ecx] +
and ecx 3 +
cmp cl 2 +
jz loc_46BDDB  +
mov ecx [eax+1Ch] +
mov [esp+1F4h+var_178] ecx +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1E8] eax +
mov [esp+1F4h+var_1EC] esi +
mov [esp+1F4h+var_1F0] 0 +
mov [esp+1F4h+var_1F4] ebp +
call sub_45D830  +
cmp eax 1 +
jnz loc_46BC47  +
mov eax [edi+0A0h] +
add ebx 1 +
cmp [eax+214h] ebx +
ja loc_46BDA2  +
jmp loc_46B6D7  +
mov edi [esp+1F4h+var_198] +
mov [esp+1F4h+var_1F0] offset a_hash +
mov [esp+1F4h+var_1F4] edi +
call sub_44D590  +
mov [esp+1F4h+var_1F0] offset a_gnu_version +
mov [esp+1F4h+var_1F4] edi +
mov [esp+1F4h+var_134] eax +
call sub_44D590  +
mov [esp+1F4h+var_130] eax +
jmp loc_46B2F7  +
mov [esp+1F4h+var_1F0] 2B5Fh +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA40  +
jmp loc_46B535  +
xor eax eax +
jmp loc_46BA65  +
imul eax [esp+1F4h+var_1B8] +
jmp loc_46B662  +
mov eax [esp+1F4h+var_1C8] +
mov ecx [edx+0A0h] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+0Ch] +
cmp [ecx+4] al +
jnz loc_46B87D  +
mov [esp+1F4h+var_1F4] edx +
mov [esp+1F4h+var_1F0] ebp +
mov [esp+1F4h+var_1B0] edx +
call sub_4799A0  +
mov edx [esp+1F4h+var_1B0] +
test eax eax +
jz loc_46B87D  +
mov edx [edx+0A0h] +
mov ecx [edx+214h] +
cmp eax ecx +
jnb loc_46B87D  +
mov edx [edx+40h] +
mov eax [edx+eax*4] +
test byte ptr [eax+8] 80h +
jz loc_46B87D  +
cmp ecx [eax+1Ch] +
jbe loc_46B87D  +
add edi 1 +
mov [esp+1F4h+var_1B8] ebp +
jmp loc_46B853  +
test edi edi +
jz loc_46BF86  +
shl edi 2 +
mov [esp+1F4h+var_1F4] edi +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_46B24E  +
mov eax [esp+1F4h+var_1D4] +
mov eax [eax+0A0h] +
test eax eax +
jz loc_46C92B  +
nop   +
add ebx 1 +
mov [ebp+ebx*4-4] eax +
mov eax [eax] +
test eax eax +
jnz loc_46BF20  +
mov [esp+1F4h+var_1E8] offset sub_45DA30 +
xor edi edi +
mov [esp+1F4h+var_1EC] 4 +
mov [esp+1F4h+var_1F0] ebx +
mov [esp+1F4h+var_1F4] ebp +
call qsort  +
mov edx ebp +
lea eax [ebp+ebx*4+0] +
mov [esp+1F4h+var_1CC] ebp +
mov ebx [edx] +
mov ebp 0FFFFFFFFh +
add edx 4 +
mov esi [ebx+10h] +
mov ecx [esi+40h] +
shl ebp cl +
mov ecx ebp +
and ecx edi +
mov [esi+38h] ecx +
mov [ebx+8] ecx +
add ecx [ebx+0Ch] +
cmp edx eax +
mov edi ecx +
jnz loc_46BF55  +
mov ebp [esp+1F4h+var_1CC] +
mov [esp+1F4h+var_1F4] ebp +
call free  +
mov eax [esp+1F4h+var_1D4] +
mov eax [eax+0Ch] +
test eax eax +
mov [esp+1F4h+var_1D4] eax +
jnz loc_46B810  +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F4] eax +
call sub_48E2B0  +
test eax eax +
jz loc_46B24E  +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+34h] +
test eax eax +
jz loc_46BFCC  +
and byte ptr [eax+2Bh] 0EFh +
mov eax [eax+9Ch] +
test eax eax +
jnz loc_46BFBE  +
mov eax [esp+1F4h+var_E4] +
xor edi edi +
mov esi edi +
mov eax [eax+64h] +
test eax eax +
mov [esp+1F4h+var_1D4] eax +
jz loc_46C3B3  +
mov eax [esp+1F4h+var_1D4] +
mov edi [eax+0A0h] +
test edi edi +
jz loc_46C3A0  +
mov ebp edi +
jmp loc_46C045  +
sub eax 3 +
cmp eax 1 +
jbe loc_46C0A0  +
mov eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1E8] ebp +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_452380  +
test eax eax +
jz loc_46C950  +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_46C3A0  +
mov eax [ebp+4] +
cmp eax 1 +
jnz loc_46C000  +
mov eax [ebp+10h] +
mov esi [eax+94h] +
mov eax [esi+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46C00C  +
mov eax [esp+1F4h+var_1C0] +
mov edx [esi+0A0h] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+0Ch] +
cmp [edx+4] al +
jnz loc_46C00C  +
test byte ptr [esi+2Bh] 10h +
jnz loc_46C03A  +
lea eax [esp+1F4h+var_140] +
mov edx esi +
mov [esp+1F4h+var_1CC] eax +
call sub_469AE0  +
test eax eax +
jz loc_46BC47  +
or byte ptr [esi+2Bh] 10h +
jmp loc_46C03A  +
mov eax [esp+1F4h+var_E4] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+1F4h+var_1B0] eax +
mov eax [esp+1F4h+var_1D4] +
mov ebx [eax+8Ch] +
mov eax [ebp+10h] +
mov eax [eax] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_44F6C0  +
test eax eax +
mov edi eax +
jz loc_46C8F3  +
mov eax [ebp+10h] +
mov ecx [eax+8] +
mov [esp+1F4h+var_1CC] ecx +
mov ecx [ebx+3Ch] +
test ecx ecx +
jz loc_46C2BF  +
add ebx 3Ch +
mov edx [ebx+4] +
mov ecx [ebx+0Ch] +
cmp dword ptr [ebp+4] 3 +
lea ecx [ecx+edx*4] +
mov [esp+1F4h+var_1C8] ecx +
mov eax [eax+4] +
jnz loc_46C233  +
mov eax [eax+88h] +
test eax eax +
mov [esp+1F4h+var_1B8] eax +
jnz loc_46C134  +
mov [esp+1F4h+var_1F0] 2932h +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esp+1F4h+var_1C8] +
mov dword ptr [eax] 0 +
mov eax [edi+24h] +
test eax eax +
jz loc_46C151  +
mov eax [esp+1F4h+var_1CC] +
test eax eax +
jnz loc_46BB1C  +
mov eax [ebp+8] +
mov [esp+1F4h+var_1C8] eax +
mov eax [esp+1F4h+var_E0] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_46C174  +
mov eax [esp+1F4h+var_1D4] +
mov eax [eax+1Ch] +
add [esp+1F4h+var_1C8] eax +
mov eax [esp+1F4h+var_1B0] +
mov ecx [eax+174h] +
movzx edx byte ptr [ecx+9] +
test dl dl +
jz loc_46C1BB  +
lea edx [edx+edx*2] +
lea eax [esp+1F4h+var_164] +
lea edx [esp+edx*4+1F4h+var_164] +
mov [esp+1F4h+var_1B0] ecx +
mov ecx [esp+1F4h+var_1C8] +
add eax 0Ch +
mov dword ptr [eax-8] 0 +
mov dword ptr [eax-4] 0 +
mov [eax-0Ch] ecx +
cmp eax edx +
jnz loc_46C19B  +
mov ecx [esp+1F4h+var_1B0] +
cmp byte ptr [ecx+0Ah] 20h +
jz loc_46C2A7  +
mov eax [edi] +
mov [esp+1F4h+var_160] eax +
mov eax [ebx] +
cmp dword ptr [eax+4] 9 +
mov edx [eax+30h] +
jz loc_46C29B  +
mov eax [esp+1F4h+var_1CC] +
mov edi [ecx+44h] +
mov [esp+1F4h+var_15C] eax +
movzx eax byte ptr [ecx+4] +
imul eax [ebx+4] +
add eax edx +
mov [esp+1F4h+var_1EC] eax +
lea eax [esp+1F4h+var_164] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call edi  +
add dword ptr [ebx+4] 1 +
jmp loc_46C03A  +
mov eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1F4] offset aAHasBothOrde_0 +
mov [esp+1F4h+var_1F0] eax +
call off_4BFA04  +
jmp loc_46B8D9  +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1E0] 1 +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1E8] 0 +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_4500F0  +
test eax eax +
jz loc_46CA2E  +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-3] +
cmp dl 1 +
jbe loc_46C370  +
mov ecx [esp+1F4h+var_1C8] +
mov dword ptr [eax+1Ch] 0FFFFFFFEh +
mov [esp+1F4h+var_1B8] 0 +
mov [ecx] eax +
jmp loc_46C13E  +
mov edi [ecx+3Ch] +
movzx eax byte ptr [ecx+3] +
jmp loc_46C1EF  +
mov edx [esp+1F4h+var_1B8] +
movzx eax byte ptr [edi] +
shl edx 8 +
add eax edx +
mov [esp+1F4h+var_160] eax +
jmp loc_46C1CE  +
mov edx [ebx+4Ch] +
test edx edx +
jz loc_46CA10  +
add ebx 4Ch +
jmp loc_46C0F8  +
mov eax [esp+1F4h+var_1C0] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+9] +
lea eax [eax+eax*2] +
shl eax 2 +
imul eax [esp+1F4h+var_1AC] +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_124] eax +
jnz loc_46B6FB  +
jmp loc_46BC3C  +
mov eax [esp+1F4h+var_1A8] +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_128] eax +
jnz loc_46B6EF  +
jmp loc_46BC3C  +
mov eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_12C] eax +
jnz loc_46B6E3  +
jmp loc_46BC3C  +
mov eax [esp+1F4h+var_1B0] +
shl eax 2 +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
mov [esp+1F4h+var_11C] eax +
jnz loc_46B786  +
jmp loc_46BC3C  +
mov eax [eax+14h] +
mov edx [eax+3Ch] +
mov ecx [edx+88h] +
mov [esp+1F4h+var_1B8] ecx +
mov ecx [esp+1F4h+var_1C8] +
mov dword ptr [ecx] 0 +
mov edx [eax+3Ch] +
mov eax [eax+38h] +
mov ecx [edx+1Ch] +
add [esp+1F4h+var_1CC] ecx +
add [esp+1F4h+var_1CC] eax +
jmp loc_46C13E  +
mov eax [esp+1F4h+var_1D4] +
mov eax [eax+0Ch] +
test eax eax +
mov [esp+1F4h+var_1D4] eax +
jnz loc_46BFE6  +
mov eax [esp+1F4h+var_E0] +
cmp byte ptr [eax+3] 0 +
js loc_46C3E5  +
mov eax [esp+1F4h+var_E0] +
mov ebx [eax+34h] +
test ebx ebx +
jz loc_46C3E5  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jz loc_46CAB2  +
mov ebx [ebx+9Ch] +
test ebx ebx +
jnz loc_46C3CE  +
lea eax [esp+1F4h+var_140] +
mov [esp+1F4h+var_1CC] eax +
mov [esp+1F4h+var_17C] eax +
lea eax [esp+1F4h+var_188] +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F0] offset loc_45DF30 +
mov [esp+1F4h+var_188] 0 +
mov [esp+1F4h+var_184] 1 +
mov eax [eax+1Ch] +
mov [esp+1F4h+var_180] 0 +
mov [esp+1F4h+var_1F4] eax +
call sub_44E4D0  +
mov eax [esp+1F4h+var_188] +
test eax eax +
jnz loc_46B24E  +
mov eax [esp+1F4h+var_1C0] +
mov edx [eax+0D0h] +
test edx edx +
jz loc_46C491  +
mov eax [esp+1F4h+var_E0] +
movzx eax byte ptr [eax+1] +
and eax 18h +
cmp al 18h +
jnz loc_46C462  +
mov eax [esp+1F4h+var_1C4] +
test eax eax +
jz loc_46C491  +
mov eax [esp+1F4h+var_1CC] +
mov [esp+1F4h+var_1E8] offset sub_45D830 +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call edx  +
test eax eax +
jz loc_46B24E  +
mov eax [esp+1F4h+var_E4] +
mov edi [esp+1F4h+var_1B4] +
mov eax [eax+7Ch] +
mov [edi+68h] eax +
mov eax [esp+1F4h+var_19C] +
test eax eax +
jz loc_46D9E4  +
mov eax [esp+1F4h+var_E0] +
mov ecx [eax+1Ch] +
mov eax [ecx+0F8h] +
test eax eax +
jz loc_46C6D2  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_46C6D2  +
mov eax [eax+6Ch] +
mov [esp+1F4h+var_1D4] eax +
mov eax [esp+1F4h+var_E0] +
test byte ptr [eax] 1 +
jnz loc_46C4F1  +
mov ebp [ecx+34h] +
test ebp ebp +
jz loc_46D9F3  +
mov eax [esp+1F4h+var_E4] +
xor edi edi +
mov [esp+1F4h+var_160] 0 +
mov [esp+1F4h+var_15C] 0 +
mov [esp+1F4h+var_158] 3 +
mov ebp [eax+64h] +
mov [esp+1F4h+var_157] 0 +
mov [esp+1F4h+var_156] 0 +
test ebp ebp +
jz loc_46C5D3  +
mov eax [ebp+8Ch] +
mov ebx [eax+60h] +
test ebx ebx +
jle loc_46C5BE  +
mov esi [eax+5Ch] +
test esi esi +
jg loc_46C55B  +
mov [esp+1F4h+var_1F0] 2CD3h +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA40  +
mov [esp+1F4h+var_154] esi +
sub esi 0FF00h +
cmp esi 0FFFEFFFFh +
jbe loc_46CAE3  +
mov eax [ebp+1Ch] +
cmp edi ebx +
cmovl edi ebx +
mov [esp+1F4h+var_164] eax +
mov eax [esp+1F4h+var_1C0] +
mov eax [eax+174h] +
mov edx [eax+24h] +
mov [esp+1F4h+var_1E8] 0 +
movzx eax byte ptr [eax+5] +
imul eax ebx +
add eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1EC] eax +
lea eax [esp+1F4h+var_164] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call edx  +
mov ebp [ebp+0Ch] +
test ebp ebp +
jnz loc_46C533  +
mov eax [esp+1F4h+var_E0] +
mov ecx [eax+1Ch] +
mov esi [ecx+0C0h] +
test esi esi +
jz loc_46C6BD  +
lea ebp [esp+1F4h+var_164] +
mov eax [esi+10h] +
mov [esp+1F4h+var_164] eax +
mov eax [esi+14h] +
mov [esp+1F4h+var_160] eax +
mov eax [esi+18h] +
mov [esp+1F4h+var_15C] eax +
mov eax [esi+1Ch] +
mov dword ptr [esp+1F4h+var_158] eax +
mov eax [esi+20h] +
and [esp+1F4h+var_157] 0FCh +
mov [esp+1F4h+var_154] eax +
mov edx [esi+20h] +
mov eax [esi+4] +
mov [esp+1F4h+var_1F0] edx +
mov [esp+1F4h+var_1F4] eax +
call sub_478480  +
test eax eax +
mov ebx eax +
jz loc_46C66D  +
mov edx [eax+3Ch] +
mov eax [edx+8Ch] +
mov eax [eax+5Ch] +
mov [esp+1F4h+var_154] eax +
sub eax 0FF00h +
cmp eax 0FFFEFFFFh +
jbe loc_46D9FA  +
mov eax [ebx+38h] +
add eax [edx+1Ch] +
add eax [esi+10h] +
mov [esp+1F4h+var_164] eax +
mov ecx [esp+1F4h+var_1C0] +
mov eax [esi+0Ch] +
mov edx [ecx+174h] +
cmp edi eax +
cmovl edi eax +
mov ecx [edx+24h] +
mov [esp+1F4h+var_1E8] 0 +
movzx edx byte ptr [edx+5] +
mov [esp+1F4h+var_1F0] ebp +
imul eax edx +
add eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call ecx  +
mov esi [esi] +
test esi esi +
jnz loc_46C5E8  +
mov eax [esp+1F4h+var_E0] +
mov ecx [eax+1Ch] +
mov eax [ecx+0F8h] +
lea edx [edi+1] +
mov eax [eax+3Ch] +
mov eax [eax+8Ch] +
mov [eax+20h] edx +
mov eax [esp+1F4h+var_1CC] +
mov [esp+1F4h+var_1F0] offset loc_45DF30 +
mov [esp+1F4h+var_1F4] ecx +
mov [esp+1F4h+var_188] 0 +
mov [esp+1F4h+var_17C] eax +
lea eax [esp+1F4h+var_188] +
mov [esp+1F4h+var_1EC] eax +
mov [esp+1F4h+var_184] 0 +
call sub_44E4D0  +
mov edi [esp+1F4h+var_188] +
test edi edi +
jnz loc_46B24E  +
mov eax [esp+1F4h+var_1C0] +
mov edx [eax+0D4h] +
test edx edx +
jz loc_46C765  +
mov eax [esp+1F4h+var_E0] +
movzx eax byte ptr [eax+1] +
and eax 18h +
cmp al 18h +
jnz loc_46C736  +
mov esi [esp+1F4h+var_1C4] +
test esi esi +
jz loc_46C765  +
mov eax [esp+1F4h+var_1CC] +
mov [esp+1F4h+var_1E8] offset sub_45D830 +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call edx  +
test eax eax +
jz loc_46B24E  +
mov eax [esp+1F4h+var_138] +
mov [esp+1F4h+var_1F4] eax +
call sub_4889F0  +
mov eax [esp+1F4h+var_140] +
mov edi [eax+1Ch] +
mov edx [edi+54h] +
test edx edx +
jz loc_46CB38  +
mov eax [esp+1F4h+var_13C] +
mov ecx [eax+0A0h] +
mov ebx [ecx+90Ch] +
test ebx ebx +
jnz loc_46C7BE  +
mov [esp+1F4h+var_1F0] 2257h +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esp+1F4h+var_13C] +
mov edx [edi+54h] +
mov eax [eax+4] +
mov esi [eax+1B0h] +
mov eax [esi+174h] +
movzx eax byte ptr [eax+5] +
imul eax edx +
mov [esp+1F4h+var_1F4] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_46B24E  +
mov ecx [esp+1F4h+var_10C] +
test ecx ecx +
jz loc_46C815  +
mov eax [esp+1F4h+var_13C] +
mov eax [eax+7Ch] +
shl eax 2 +
mov [esp+1F4h+var_1F4] eax +
call sub_459D10  +
test eax eax +
mov [esp+1F4h+var_10C] eax +
jz loc_46DA31  +
mov edx [edi+54h] +
mov [esp+1F4h+var_1D4] 0 +
test edx edx +
jz loc_46C88D  +
imul ebx [esp+1F4h+var_1D4] +
add ebx [edi+5Ch] +
mov eax [ebx+8] +
cmp eax 0FFFFFFFFh +
jnz loc_46DA16  +
mov dword ptr [ebx+8] 0 +
mov eax [esi+174h] +
mov edx [esp+1F4h+var_10C] +
mov ecx [eax+24h] +
mov [esp+1F4h+var_1C8] ecx +
mov ecx [ebx+18h] +
lea edx [edx+ecx*4] +
mov [esp+1F4h+var_1E8] edx +
movzx eax byte ptr [eax+5] +
imul eax [ebx+14h] +
mov [esp+1F4h+var_1F0] ebx +
add eax ebp +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_13C] +
mov [esp+1F4h+var_1F4] eax +
mov eax [esp+1F4h+var_1C8] +
call eax  +
mov edx [edi+54h] +
add [esp+1F4h+var_1D4] 1 +
cmp [esp+1F4h+var_1D4] edx +
jb loc_46C824  +
mov eax [esi+174h] +
mov esi edx +
xor edx edx +
mov ecx [esp+1F4h+var_13C] +
movzx eax byte ptr [eax+5] +
mov ebx [ecx+0A0h] +
mov [esp+1F4h+var_1E8] 0 +
imul esi eax +
mov eax [ebx+60h] +
add eax [ebx+58h] +
adc edx [ebx+5Ch] +
mov [esp+1F4h+var_1F4] ecx +
mov [esp+1F4h+var_1F0] eax +
mov [esp+1F4h+var_1EC] edx +
call sub_46FCE0  +
test eax eax +
jz loc_46CAFC  +
mov [esp+1F4h+var_1F4] ebp +
call free  +
mov eax [edi+5Ch] +
mov [esp+1F4h+var_1F4] eax +
call free  +
mov dword ptr [edi+5Ch] 0 +
jmp loc_46B24E  +
mov [esp+1F4h+var_1F4] 11h +
call sub_44BAF0  +
lea eax [esp+1F4h+var_140] +
mov [esp+1F4h+var_1CC] eax +
jmp loc_46BC47  +
mov [esp+1F4h+var_1EC] offset aElf_reloc_link +
mov [esp+1F4h+var_1F0] 2974h +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA70  +
mov [esp+1F4h+var_1E8] offset sub_45DA30 +
mov [esp+1F4h+var_1EC] 4 +
mov [esp+1F4h+var_1F0] 0 +
mov [esp+1F4h+var_1F4] ebp +
call qsort  +
jmp loc_46BF7E  +
cmp dword ptr [ebp+4] 1 +
mov edi esi +
lea eax [esp+1F4h+var_140] +
mov [esp+1F4h+var_1CC] eax +
jnz loc_46BC47  +
mov eax [edi+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46BC47  +
mov eax [esp+1F4h+var_1C0] +
mov edx [edi+0A0h] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+0Ch] +
cmp [edx+4] al +
jz loc_46BC47  +
mov edx offset aElfclass32 +
mov ecx offset aElfclass64 +
cmp al 2 +
mov ebx ecx +
mov esi edx +
cmovnz ebx edx +
cmovnz esi ecx +
mov [esp+1F4h+var_1F4] 3 +
call sub_44BAF0  +
mov [esp+1F4h+var_1E8] ebx +
mov [esp+1F4h+var_1EC] esi +
mov [esp+1F4h+var_1F0] edi +
mov [esp+1F4h+var_1F4] offset aBFileClassSInc +
call off_4BFA04  +
jmp loc_46BC47  +
mov eax [eax+4] +
mov ecx [eax] +
jmp loc_46BB86  +
mov ebx [esp+1F4h+var_1A4] +
mov [esp+1F4h+var_1A4] ebx +
mov [esp+1F4h+var_1B0] 0 +
mov [esp+1F4h+var_1B8] 0 +
mov [esp+1F4h+var_1A8] 0 +
mov [esp+1F4h+var_1AC] 0 +
mov [esp+1F4h+var_1D4] 0 +
jmp loc_46B506  +
mov [esp+1F4h+var_1F0] 292Ah +
xor ebx ebx +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [ebp+10h] +
jmp loc_46C0F8  +
mov eax [esp+1F4h+var_E0] +
mov edx [ebp+10h] +
mov ecx [esp+1F4h+var_E0] +
mov eax [eax+18h] +
mov edx [edx+4] +
mov eax [eax+24h] +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1E8] 0 +
mov [esp+1F4h+var_1EC] 0 +
mov [esp+1F4h+var_1F0] edx +
mov [esp+1F4h+var_1F4] ecx +
call eax  +
test eax eax +
jz loc_46BC3C  +
mov [esp+1F4h+var_1B8] 0 +
jmp loc_46C13E  +
mov [esp+1F4h+var_1F4] edx +
call free  +
lea eax [esp+1F4h+var_140] +
mov [esp+1F4h+var_1CC] eax +
jmp loc_46BC47  +
mov [esp+1F4h+var_1EC] offset aBfd_elf_final_ +
mov [esp+1F4h+var_1F0] 2B7Eh +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA70  +
mov eax [ebx+0A0h] +
mov eax [eax+24Ch] +
test eax eax +
jz loc_46C3DB  +
mov [esp+1F4h+var_1F4] eax +
call free  +
mov eax [ebx+0A0h] +
mov dword ptr [eax+24Ch] 0 +
jmp loc_46C3DB  +
mov eax [esp+1F4h+var_E4] +
call sub_45D7F0  +
test eax eax +
jnz loc_46C574  +
jmp loc_46B24E  +
mov eax [esp+1F4h+var_13C] +
mov [esp+1F4h+var_1F0] esi +
mov [esp+1F4h+var_1F4] ebp +
mov [esp+1F4h+var_1EC] eax +
call sub_46FB80  +
cmp esi eax +
jnz loc_46C8D4  +
add [ebx+60h] esi +
mov [esp+1F4h+var_1F4] ebp +
call free  +
mov eax [edi+5Ch] +
mov [esp+1F4h+var_1F4] eax +
call free  +
mov dword ptr [edi+5Ch] 0 +
mov eax [esp+1F4h+var_E4] +
mov eax [eax+7Ch] +
test eax eax +
jnz loc_46D680  +
mov eax [esp+1F4h+var_E4] +
mov edi [eax+64h] +
test edi edi +
jz loc_46CBD4  +
test byte ptr [edi+14h] 4 +
mov ebx [edi+8Ch] +
jz loc_46CBCD  +
mov eax [esp+1F4h+var_1C0] +
mov esi 1 +
mov eax [eax+0F8h] +
test eax eax +
jz loc_46CB86  +
mov [esp+1F4h+var_1F4] edi +
call eax  +
test eax eax +
setnz al  +
movzx eax al +
mov esi eax +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_46CBA6  +
mov eax [esp+1F4h+var_E4] +
lea edx [ebx+3Ch] +
mov ecx esi +
call sub_4BD4E6  +
test eax eax +
jz loc_46B24E  +
mov ebp [ebx+4Ch] +
test ebp ebp +
jz loc_46CBC6  +
mov eax [esp+1F4h+var_E4] +
lea edx [ebx+4Ch] +
mov ecx esi +
call sub_4BD4E6  +
test eax eax +
jz loc_46B24E  +
mov dword ptr [edi+4Ch] 0 +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_46CB58  +
mov eax [esp+1F4h+var_19C] +
test eax eax +
jz loc_46CE0B  +
mov eax [esp+1F4h+var_E0] +
test byte ptr [eax+4] 2 +
jz loc_46CCD5  +
mov esi [esp+1F4h+var_198] +
test esi esi +
jz loc_46CCD5  +
mov eax [esp+1F4h+var_E4] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+1F4h+var_1C8] eax +
mov eax [eax+174h] +
movzx eax byte ptr [eax+9] +
mov [esp+1F4h+var_1F0] offset a_rela_dyn_17 +
mov [esp+1F4h+var_1B4] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_44D4B0  +
mov [esp+1F4h+var_1F0] offset a_rel_dyn_17 +
mov ebx eax +
mov [esp+1F4h+var_1D4] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_44D4B0  +
test ebx ebx +
mov edi eax +
jz loc_46D4CB  +
mov eax [ebx+24h] +
test eax eax +
mov [esp+1F4h+var_1AC] eax +
jz loc_46D4CB  +
test edi edi +
jz loc_46D4B2  +
mov eax [edi+24h] +
test eax eax +
mov [esp+1F4h+var_1B0] eax +
mov eax [esp+1F4h+var_1D4] +
jnz loc_46D003  +
mov ebx [eax+0A0h] +
mov eax [esp+1F4h+var_1C8] +
mov esi [eax+174h] +
movzx eax byte ptr [esi+4] +
mov ecx [esp+1F4h+var_1AC] +
mov edi [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1C4] eax +
mov eax [esi+40h] +
mov [esp+1F4h+var_1B0] eax +
mov eax [esi+44h] +
mov [esp+1F4h+var_1A8] eax +
test ebx ebx +
jz loc_46CCD5  +
xor edx edx +
cmp dword ptr [ebx+4] 1 +
jnz loc_46CCC7  +
mov eax [ebx+10h] +
add edx [eax+24h] +
mov ebx [ebx] +
test ebx ebx +
jnz loc_46CCBB  +
cmp edx ecx +
jz loc_46D047  +
xor edi edi +
xor ebp ebp +
mov eax [esp+1F4h+var_198] +
mov [esp+1F4h+var_1F0] offset a_dynamic +
mov [esp+1F4h+var_1F4] eax +
call sub_44D590  +
test eax eax +
mov ebx eax +
jnz loc_46CD07  +
mov [esp+1F4h+var_1F0] 2D73h +
mov [esp+1F4h+var_1F4] offset a____Binutil_12 +
call sub_44BA40  +
mov esi [ebx+6Ch] +
mov eax [ebx+24h] +
add eax esi +
cmp esi eax +
mov [esp+1F4h+var_1C4] eax +
jnb loc_46CE0B  +
mov eax [esp+1F4h+var_1C0] +
lea ecx [esp+1F4h+var_164] +
mov [esp+1F4h+var_1D4] ecx +
mov [esp+1F4h+var_1B4] edi +
mov edx [eax+174h] +
mov ebx eax +
mov edi [esp+1F4h+var_1D4] +
mov eax [edx+30h] +
mov [esp+1F4h+var_1F0] esi +
mov [esp+1F4h+var_1EC] edi +
mov edi [esp+1F4h+var_198] +
mov [esp+1F4h+var_1F4] edi +
call eax  +
mov eax [esp+1F4h+var_164] +
cmp eax 12h +
jbe loc_46D428  +
cmp eax 20h +
jz loc_46D41E  +
jbe loc_46D343  +
cmp eax 6FFFFFF0h +
jz loc_46D339  +
ja loc_46D2E4  +
cmp eax 21h +
jz loc_46D270  +
cmp eax 6FFFFEF5h +
mov edx offset a_gnu_hash +
jnz loc_46D2FB  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F0] edx +
mov [esp+1F4h+var_1C8] edx +
mov [esp+1F4h+var_1F4] eax +
call sub_44D4B0  +
mov edx [esp+1F4h+var_1C8] +
test eax eax +
jz loc_46D318  +
mov ecx [eax+3Ch] +
mov ecx [ecx+8Ch] +
cmp dword ptr [ecx+4] 7 +
jz loc_46D158  +
mov eax [eax+1Ch] +
mov [esp+1F4h+var_160] eax +
mov eax [ebx+174h] +
mov edi [esp+1F4h+var_1D4] +
mov eax [eax+34h] +
mov [esp+1F4h+var_1EC] esi +
mov [esp+1F4h+var_1F0] edi +
mov edi [esp+1F4h+var_198] +
mov [esp+1F4h+var_1F4] edi +
call eax  +
mov edx [ebx+174h] +
movzx eax byte ptr [edx+6] +
add esi eax +
cmp [esp+1F4h+var_1C4] esi +
ja loc_46CD36  +
mov edi [esp+1F4h+var_198] +
test edi edi +
jz loc_46CEF7  +
mov edi [esp+1F4h+var_E0] +
mov eax [esp+1F4h+var_1C0] +
mov eax [eax+9Ch] +
mov [esp+1F4h+var_1F0] edi +
mov edi [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] edi +
call eax  +
test eax eax +
jz loc_46BC47  +
mov eax [esp+1F4h+var_E0] +
movzx eax byte ptr [eax+3] +
test al 8 +
jz loc_46CE5B  +
mov edi [esp+1F4h+var_E0] +
test byte ptr [edi] 1 +
jnz loc_46CE5F  +
test al 10h +
jz loc_46CED2  +
mov eax [esp+1F4h+var_198] +
mov [esp+1F4h+var_1F0] offset a_dynamic +
mov [esp+1F4h+var_1F4] eax +
call sub_44D590  +
test eax eax +
jz loc_46CED2  +
mov ebx [eax+6Ch] +
mov esi [eax+24h] +
add esi ebx +
cmp ebx esi +
jnb loc_46CED2  +
mov eax [esp+1F4h+var_1C0] +
lea edi [esp+1F4h+var_164] +
mov [esp+1F4h+var_1D4] edi +
mov eax [eax+174h] +
mov edi [esp+1F4h+var_1D4] +
mov ecx [esp+1F4h+var_198] +
mov eax [eax+30h] +
mov [esp+1F4h+var_1F0] ebx +
mov [esp+1F4h+var_1EC] edi +
mov [esp+1F4h+var_1F4] ecx +
call eax  +
cmp [esp+1F4h+var_164] 16h +
jz loc_46D8AC  +
mov eax [esp+1F4h+var_1C0] +
mov eax [eax+174h] +
movzx edx byte ptr [eax+6] +
add ebx edx +
cmp esi ebx +
ja loc_46CE98  +
mov eax [esp+1F4h+var_198] +
mov ebp [eax+64h] +
test ebp ebp +
jz loc_46CEF7  +
mov ebx [esp+1F4h+var_E0] +
mov ecx [ebp+14h] +
test ch 1 +
jnz loc_46D8D1  +
mov ebp [ebp+0Ch] +
test ebp ebp +
jnz loc_46CEE4  +
mov eax [esp+1F4h+var_E0] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_46D86B  +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+1Ch] +
mov edx [eax+0A0h] +
test edx edx +
jz loc_46CF3E  +
sub eax 0FFFFFF80h +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_48A8C0  +
test eax eax +
jz loc_46BC47  +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_48E3A0  +
test eax eax +
jz loc_46BC47  +
mov eax [esp+1F4h+var_E4] +
mov ebx 1 +
mov edx [esp+1F4h+var_1CC] +
add eax 64h +
call sub_45EE00  +
mov eax [esp+1F4h+var_E4] +
mov ebp [esp+1F4h+var_1A4] +
mov eax [eax+0A0h] +
test ebp ebp +
mov eax [eax+934h] +
mov dword ptr [eax+38h] 1 +
jz loc_46B250  +
mov edi [esp+1F4h+var_1BC] +
mov [esp+1F4h+var_1F4] edi +
call sub_459B80  +
test eax eax +
mov esi eax +
jz loc_46B24E  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1EC] edi +
mov [esp+1F4h+var_1F0] esi +
mov [esp+1F4h+var_1F4] eax +
call sub_48EB50  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1E0] edi +
mov [esp+1F4h+var_1E8] 0 +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1EC] esi +
mov [esp+1F4h+var_1F0] ebp +
mov [esp+1F4h+var_1F4] eax +
call sub_44DBC0  +
mov [esp+1F4h+var_1F4] esi +
call free  +
jmp loc_46B250  +
mov eax [eax+0A0h] +
mov [esp+1F4h+var_1C4] eax +
test eax eax +
mov eax [esp+1F4h+var_1C8] +
mov esi [eax+174h] +
jz loc_46D7F6  +
mov ebx [esp+1F4h+var_1C4] +
mov ebp 1 +
xor ecx ecx +
mov [esp+1F4h+var_1A8] edi +
cmp dword ptr [ebx+4] 1 +
jz loc_46D7AD  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_46D02E  +
mov edi [esp+1F4h+var_1A8] +
jmp loc_46D7FD  +
mov eax [esp+1F4h+var_1B4] +
lea eax [eax+eax*2-3] +
lea eax ds:14h[eax*4] +
mov [esp+1F4h+var_1D4] eax +
mov eax edx +
xor edx edx +
div  [esp+1F4h+var_1C4] +
test eax eax +
mov [esp+1F4h+var_1B8] eax +
jz loc_46CCD5  +
imul eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1F4] eax +
call sub_459D10  +
test eax eax +
mov [esp+1F4h+var_1B4] eax +
jz loc_46D203  +
mov eax [esp+1F4h+var_1C8] +
mov ecx 0FFFFFF00h +
mov eax [eax+174h] +
cmp byte ptr [eax+0Ah] 20h +
cmovz ebx ecx +
mov ecx [edi+0A0h] +
mov [esp+1F4h+var_1AC] ebx +
test ecx ecx +
jz loc_46D0C6  +
mov [esp+1F4h+var_1A0] edi +
mov ebp ecx +
cmp dword ptr [ebp+4] 1 +
jz loc_46D17A  +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_46D0B1  +
mov edi [esp+1F4h+var_1A0] +
mov eax [esp+1F4h+var_1D4] +
xor ebp ebp +
mov ebx [esp+1F4h+var_1B4] +
mov [esp+1F4h+var_1E8] offset sub_45D4F0 +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_1B8] +
mov [esp+1F4h+var_1F4] ebx +
mov [esp+1F4h+var_1F0] eax +
call qsort  +
mov ecx ebx +
cmp dword ptr [ecx+4] 1 +
jnz loc_46D362  +
add ebp 1 +
add ecx [esp+1F4h+var_1D4] +
cmp ebp [esp+1F4h+var_1B8] +
jnz loc_46D0EE  +
mov eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1F4] ecx +
mov [esp+1F4h+var_1E8] offset sub_45D550 +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_1B8] +
sub eax ebp +
mov [esp+1F4h+var_1F0] eax +
call qsort  +
mov ecx [edi+0A0h] +
test ecx ecx +
jz loc_46D147  +
mov esi ecx +
mov ecx edi +
cmp dword ptr [esi+4] 1 +
jz loc_46D3BD  +
mov esi [esi] +
test esi esi +
jnz loc_46D135  +
mov edi ecx +
mov eax [esp+1F4h+var_1B4] +
mov [esp+1F4h+var_1F4] eax +
call free  +
jmp loc_46CCD9  +
mov [esp+1F4h+var_1F0] edx +
mov [esp+1F4h+var_1F4] offset aWarningSection +
call off_4BFA04  +
mov [esp+1F4h+var_1F4] 0Fh +
call sub_44BAF0  +
jmp loc_46BC47  +
mov esi [ebp+10h] +
mov ebx [esi+6Ch] +
test ebx ebx +
jz loc_46D250  +
mov eax [esi+38h] +
xor edx edx +
mov ecx [esi+24h] +
div  [esp+1F4h+var_1C4] +
add ecx ebx +
imul eax [esp+1F4h+var_1D4] +
add eax [esp+1F4h+var_1B4] +
cmp ebx ecx +
jnb loc_46D0BB  +
lea edi [eax+8] +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_19C] ecx +
mov [esp+1F4h+var_1EC] edi +
mov [esp+1F4h+var_1F0] ebx +
mov [esp+1F4h+var_1F4] eax +
mov eax [esp+1F4h+var_1B0] +
call eax  +
mov eax [esp+1F4h+var_1C8] +
mov ecx [esp+1F4h+var_E0] +
mov eax [eax+10Ch] +
mov [esp+1F4h+var_1EC] edi +
mov [esp+1F4h+var_1F4] ecx +
mov [esp+1F4h+var_1F0] esi +
call eax  +
mov ecx [esp+1F4h+var_19C] +
add ebx [esp+1F4h+var_1C4] +
mov [edi-4] eax +
mov eax [esp+1F4h+var_1AC] +
mov [edi-8] eax +
add edi [esp+1F4h+var_1D4] +
cmp ecx ebx +
ja loc_46D1AA  +
jmp loc_46D0BB  +
mov eax [esp+1F4h+var_E0] +
xor ebp ebp +
mov edi [esp+1F4h+var_E4] +
mov eax [eax+18h] +
mov eax [eax+14h] +
mov [esp+1F4h+var_1E8] edi +
mov edi [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1E0] 0 +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1EC] 0 +
mov [esp+1F4h+var_1F4] edi +
xor edi edi +
mov [esp+1F4h+var_1F0] offset aNotEnoughMemor +
call eax  +
jmp loc_46CCD9  +
mov ebx [esi+24h] +
test ebx ebx +
jz loc_46D0BB  +
mov eax [esp+1F4h+var_1B4] +
xor edi edi +
xor ebp ebp +
mov [esp+1F4h+var_1F4] eax +
call free  +
jmp loc_46CCD9  +
mov ecx offset a_preinit_array +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F0] ecx +
mov [esp+1F4h+var_1C8] ecx +
mov [esp+1F4h+var_1F4] eax +
call sub_44D4B0  +
mov ecx [esp+1F4h+var_1C8] +
test eax eax +
mov edi eax +
jz loc_46D2C3  +
mov edx [eax+24h] +
test edx edx +
jnz loc_46D2B1  +
mov [esp+1F4h+var_1F0] ecx +
mov [esp+1F4h+var_1F4] offset aWarningSSectio +
call off_4BFA04  +
mov edx [edi+24h] +
mov [esp+1F4h+var_160] edx +
mov eax [ebx+174h] +
jmp loc_46CDDD  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1EC] ecx +
mov [esp+1F4h+var_1F4] offset aBCouldNotFin_0 +
mov [esp+1F4h+var_1F0] eax +
call off_4BFA04  +
jmp loc_46BC47  +
cmp eax 6FFFFFFCh +
jz loc_46D30E  +
cmp eax 6FFFFFFEh +
mov edx offset a_gnu_version_r +
jz loc_46CD97  +
mov edx [ebx+174h] +
movzx ecx byte ptr [edx+6] +
add ecx esi +
mov esi ecx +
jmp loc_46CE01  +
mov edx offset a_gnu_version_d +
jmp loc_46CD97  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1EC] edx +
mov [esp+1F4h+var_1F4] offset aBCouldNotFin_0 +
mov [esp+1F4h+var_1F0] eax +
call off_4BFA04  +
jmp loc_46BC47  +
mov edx offset a_gnu_version +
jmp loc_46CD97  +
cmp eax 1Ah +
jz loc_46D3A9  +
jbe loc_46D396  +
cmp eax 1Bh +
lea esi [esi+0] +
jz loc_46D3B3  +
cmp eax 1Ch +
mov ecx offset a_fini_array +
jz loc_46D275  +
jmp loc_46D2FB  +
cmp [esp+1F4h+var_1B8] ebp +
jbe loc_46D105  +
mov esi ebp +
mov edx ecx +
mov ebx ecx +
mov eax [ebx+0Ch] +
xor eax [edx+0Ch] +
test [esp+1F4h+var_1AC] eax +
cmovnz edx ebx +
add esi 1 +
mov eax [edx+8] +
mov [ebx] eax +
add ebx [esp+1F4h+var_1D4] +
cmp esi [esp+1F4h+var_1B8] +
jnz loc_46D372  +
jmp loc_46D105  +
cmp eax 19h +
mov edx offset a_init_array +
jz loc_46CD97  +
jmp loc_46D2FB  +
mov edx offset a_fini_array +
jmp loc_46CD97  +
mov ecx offset a_init_array +
jmp loc_46D275  +
mov eax [esi+10h] +
xor edx edx +
mov ebx [eax+6Ch] +
mov edi [eax+24h] +
mov eax [eax+38h] +
add edi ebx +
div  [esp+1F4h+var_1C4] +
imul eax [esp+1F4h+var_1D4] +
add eax [esp+1F4h+var_1B4] +
cmp ebx edi +
jnb loc_46D13F  +
add eax 8 +
mov [esp+1F4h+var_1F0] eax +
mov [esp+1F4h+var_1C8] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1B8] ecx +
mov [esp+1F4h+var_1EC] ebx +
mov [esp+1F4h+var_1F4] eax +
mov eax [esp+1F4h+var_1A8] +
call eax  +
mov eax [esp+1F4h+var_1C8] +
add ebx [esp+1F4h+var_1C4] +
add eax [esp+1F4h+var_1D4] +
mov ecx [esp+1F4h+var_1B8] +
cmp edi ebx +
ja loc_46D3E5  +
jmp loc_46D13F  +
mov edx offset a_preinit_array +
jmp loc_46CD97  +
cmp eax 11h +
jnb loc_46D5DB  +
cmp eax 6 +
jz loc_46D5C8  +
ja loc_46D52A  +
cmp eax 4 +
jz loc_46D520  +
lea esi [esi+0] +
ja loc_46D516  +
test eax eax +
jnz loc_46D2FB  +
mov edx [ebx+174h] +
movzx ecx byte ptr [edx+6] +
add ecx esi +
test ebp ebp +
jz loc_46D307  +
cmp [esp+1F4h+var_1C4] ecx +
jbe loc_46D307  +
mov eax [esp+1F4h+var_1B4] +
mov eax [eax+8Ch] +
mov eax [eax+4] +
cmp eax 4 +
jz loc_46D509  +
cmp eax 9 +
jnz loc_46D307  +
mov [esp+1F4h+var_164] 6FFFFFFAh +
mov [esp+1F4h+var_160] ebp +
mov eax edx +
xor ebp ebp +
jmp loc_46CDDD  +
mov eax [esp+1F4h+var_1D4] +
mov ebx [eax+0A0h] +
mov eax [esp+1F4h+var_1C8] +
mov esi [eax+174h] +
jmp loc_46CC97  +
test edi edi +
jz loc_46CCD7  +
mov ecx [edi+24h] +
test ecx ecx +
jz loc_46CCD5  +
mov eax [esp+1F4h+var_1C8] +
mov ebx [edi+0A0h] +
mov esi [eax+174h] +
movzx eax byte ptr [esi+3] +
mov [esp+1F4h+var_1C4] eax +
mov eax [esi+38h] +
mov [esp+1F4h+var_1B0] eax +
mov eax [esi+3Ch] +
mov [esp+1F4h+var_1A8] eax +
jmp loc_46CCB5  +
mov [esp+1F4h+var_164] 6FFFFFF9h +
jmp loc_46D4A2  +
mov edx offset a_dynstr +
jmp loc_46CD97  +
mov edx offset a_hash +
jmp loc_46CD97  +
cmp eax 0Ch +
jz loc_46DAEA  +
jbe loc_46D5D2  +
cmp eax 0Dh +
lea esi [esi+0] +
jnz loc_46D2FB  +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+4Ch] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E0] +
mov [esp+1F4h+var_1E4] 1 +
mov [esp+1F4h+var_1E8] 0 +
mov [esp+1F4h+var_1EC] 0 +
mov eax [eax+1Ch] +
mov [esp+1F4h+var_1F4] eax +
call sub_4500A0  +
test eax eax +
jz loc_46D2FB  +
movzx edi byte ptr [eax+0Ch] +
lea edx [edi-3] +
cmp dl 1 +
ja loc_46D2FB  +
mov ecx [eax+18h] +
mov [esp+1F4h+var_160] ecx +
mov edx [eax+14h] +
mov eax [edx+3Ch] +
test eax eax +
jz loc_46D64A  +
add ecx [eax+1Ch] +
mov eax [edx+38h] +
add eax ecx +
mov [esp+1F4h+var_160] eax +
mov eax [ebx+174h] +
jmp loc_46CDDD  +
mov edx offset a_dynsym +
jmp loc_46CD97  +
cmp eax 8 +
ja loc_46D2FB  +
mov ecx [esp+1F4h+var_E4] +
lea edx [eax-11h] +
cmp edx 2 +
mov [esp+1F4h+var_160] 0 +
sbb edi edi +
and edi 5 +
mov edx [ecx+0A0h] +
add edi 4 +
mov ecx [edx+214h] +
cmp ecx 1 +
mov [esp+1F4h+var_1B8] ecx +
jbe loc_46D63F  +
mov edx [edx+40h] +
lea ecx [edx+4] +
mov [esp+1F4h+var_1C8] ecx +
mov ecx [esp+1F4h+var_1B8] +
lea ecx [edx+ecx*4] +
mov [esp+1F4h+var_1B8] ecx +
mov ecx [esp+1F4h+var_1C8] +
mov edx [ecx] +
cmp [edx+4] edi +
jz loc_46D660  +
add [esp+1F4h+var_1C8] 4 +
mov ecx [esp+1F4h+var_1B8] +
cmp [esp+1F4h+var_1C8] ecx +
jnz loc_46D625  +
mov eax [ebx+174h] +
jmp loc_46CDDD  +
mov [esp+1F4h+var_160] 0 +
mov eax [ebx+174h] +
jmp loc_46CDDD  +
test byte ptr [edx+8] 2 +
jz loc_46D630  +
cmp eax 8 +
jz loc_46D674  +
cmp eax 12h +
jnz loc_46DAF9  +
mov edx [edx+18h] +
add [esp+1F4h+var_160] edx +
jmp loc_46D630  +
mov edi [esp+1F4h+var_1B4] +
xor ebx ebx +
mov [esp+1F4h+var_1D0] ebx +
mov ecx [edi+60h] +
mov ebx [edi+5Ch] +
mov [esp+1F4h+var_1D4] ecx +
mov ecx [edi+58h] +
mov edi [esp+1F4h+var_E4] +
add [esp+1F4h+var_1D4] ecx +
adc [esp+1F4h+var_1D0] ebx +
mov esi [edi+0A0h] +
mov ebx [esi+208h] +
test ebx ebx +
jz loc_46D6C0  +
mov edx [ebx] +
test edx edx +
jnz loc_46DA3E  +
mov eax [esp+1F4h+var_138] +
mov dword ptr [esi+0BCh] 3 +
mov dword ptr [esi+0C0h] 0 +
mov dword ptr [esi+0C4h] 0 +
mov [esp+1F4h+var_1F4] eax +
call sub_488870  +
mov edx [esp+1F4h+var_1D0] +
mov dword ptr [esi+0E0h] 0 +
mov dword ptr [esi+0D4h] 0 +
mov dword ptr [esi+0D8h] 0 +
mov dword ptr [esi+0DCh] 1 +
mov [esi+0D0h] eax +
mov eax [esp+1F4h+var_1D4] +
mov [esp+1F4h+var_1E8] 1 +
mov [esp+1F4h+var_1EC] edx +
mov [esp+1F4h+var_1F0] eax +
lea eax [esi+0B8h] +
mov [esp+1F4h+var_1F4] eax +
call sub_478D10  +
mov edi [esp+1F4h+var_E4] +
mov ecx [edi+0A0h] +
mov ecx [ecx+934h] +
mov [ecx+20h] eax +
mov eax [esi+0C8h] +
mov [ecx+24h] edx +
mov edx [esi+0CCh] +
mov [esp+1F4h+var_1E8] 0 +
mov [esp+1F4h+var_1F4] edi +
mov [esp+1F4h+var_1F0] eax +
mov [esp+1F4h+var_1EC] edx +
call sub_46FCE0  +
test eax eax +
jnz loc_46B24E  +
mov eax [esp+1F4h+var_138] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_488920  +
test eax eax +
jnz loc_46CB4A  +
jmp loc_46B24E  +
mov eax [ebx+10h] +
xor edx edx +
movzx edi byte ptr [esi+4] +
mov eax [eax+24h] +
mov [esp+1F4h+var_1B8] eax +
div  edi +
movzx edi byte ptr [esi+3] +
mov eax [esp+1F4h+var_1B8] +
test edx edx +
mov edx 0 +
jnz loc_46DB1B  +
div  edi +
test edx edx +
jz loc_46D038  +
mov eax ebp +
xor eax 1 +
test cl al +
jnz loc_46D83E  +
mov ecx 1 +
mov ebp 1 +
jmp loc_46D038  +
mov ebp 1 +
xor ecx ecx +
mov eax [edi+0A0h] +
test eax eax +
mov [esp+1F4h+var_1A8] eax +
jz loc_46D825  +
mov ebx eax +
mov [esp+1F4h+var_1A0] edi +
cmp dword ptr [ebx+4] 1 +
jz loc_46DB37  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_46D811  +
mov edi [esp+1F4h+var_1A0] +
test ecx ecx +
jnz loc_46DB8E  +
mov ebx [esp+1F4h+var_1C4] +
jmp loc_46CC97  +
test ecx ecx +
jz loc_46DBE0  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] offset aBUnableToSortR +
mov [esp+1F4h+var_1F0] eax +
call off_4BFA04  +
xor edi edi +
xor ebp ebp +
mov [esp+1F4h+var_1F4] 5 +
call sub_44BAF0  +
jmp loc_46CCD9  +
lea eax [esp+1F4h+var_164] +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F0] offset sub_474370 +
mov [esp+1F4h+var_164] 0 +
mov [esp+1F4h+var_1F4] eax +
call sub_44DAD0  +
mov ecx [esp+1F4h+var_164] +
test ecx ecx +
jnz loc_46BC47  +
jmp loc_46CF0C  +
mov eax [esp+1F4h+var_E0] +
test byte ptr [eax+3] 10h +
jz loc_46D970  +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+1F4h+var_1F4] offset aPXReadOnlySegm +
call eax  +
jmp loc_46CED2  +
mov eax [ebp+24h] +
test eax eax +
mov [esp+1F4h+var_1D4] eax +
jz loc_46CEF0  +
mov eax [ebp+3Ch] +
cmp eax offset off_4BFB90 +
jz loc_46CEF0  +
and ecx 100000h +
jz loc_46CEF0  +
mov ecx [ebx+1Ch] +
cmp [ecx+0A0h] ebp +
jz loc_46CEF0  +
cmp [ecx+0A4h] ebp +
jz loc_46CEF0  +
mov esi [ebp+0] +
mov ecx 8 +
mov edi offset a_dynstr +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jz loc_46D98B  +
mov edi [esp+1F4h+var_1D4] +
mov ecx [ebp+6Ch] +
mov [esp+1F4h+var_1E0] edi +
mov edi [ebp+38h] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1E4] 0 +
mov [esp+1F4h+var_1EC] ecx +
mov [esp+1F4h+var_1E8] edi +
mov [esp+1F4h+var_1F4] eax +
call sub_44DBC0  +
test eax eax +
jnz loc_46CEF0  +
jmp loc_46BC47  +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+1F4h+var_1F4] offset aPWarningCreati +
call eax  +
jmp loc_46CED2  +
mov eax [eax+8Ch] +
mov edx [eax+14h] +
mov eax [eax+10h] +
mov [esp+1F4h+var_1E8] 0 +
mov [esp+1F4h+var_1EC] edx +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_46BC47  +
mov eax [ebx+1Ch] +
mov eax [eax+50h] +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] eax +
call sub_488920  +
test eax eax +
jnz loc_46CEF0  +
jmp loc_46BC47  +
mov eax [esp+1F4h+var_E0] +
mov ecx [eax+1Ch] +
jmp loc_46C6D2  +
xor edi edi +
jmp loc_46C5D3  +
mov eax [esp+1F4h+var_E4] +
call sub_45D7F0  +
test eax eax +
jz loc_46B24E  +
mov edx [ebx+3Ch] +
jmp loc_46C65D  +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_138] +
mov [esp+1F4h+var_1F4] eax +
call sub_488880  +
mov [ebx+8] eax +
jmp loc_46C83F  +
mov [esp+1F4h+var_1F4] ebp +
call free  +
jmp loc_46B24E  +
lea esi ds:0[eax*4] +
mov edx [esp+1F4h+var_1D0] +
mov eax [esp+1F4h+var_1D4] +
mov dword ptr [ebx+4] 12h +
mov dword ptr [ebx+28h] 4 +
mov dword ptr [ebx+24h] 4 +
mov [ebx+18h] esi +
mov [esp+1F4h+var_1E8] 1 +
mov [esp+1F4h+var_1F0] eax +
mov [esp+1F4h+var_1EC] edx +
mov [esp+1F4h+var_1F4] ebx +
call sub_478D10  +
mov [esp+1F4h+var_1D4] eax +
mov eax [ebx+10h] +
mov [esp+1F4h+var_1D0] edx +
mov edx [ebx+14h] +
mov [esp+1F4h+var_1E8] 0 +
mov [esp+1F4h+var_1F0] eax +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1EC] edx +
mov [esp+1F4h+var_1F4] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_46B24E  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F0] esi +
mov [esp+1F4h+var_1EC] eax +
mov eax [esp+1F4h+var_10C] +
mov [esp+1F4h+var_1F4] eax +
call sub_46FB80  +
cmp eax esi +
jnz loc_46B24E  +
mov eax [esp+1F4h+var_E4] +
mov esi [eax+0A0h] +
jmp loc_46D6C0  +
mov eax [esp+1F4h+var_E0] +
mov eax [eax+48h] +
jmp loc_46D550  +
mov ecx [esp+1F4h+var_160] +
mov edx [edx+0Ch] +
test ecx ecx +
jz loc_46DB0F  +
cmp ecx edx +
jbe loc_46D630  +
mov [esp+1F4h+var_160] edx +
jmp loc_46D630  +
div  edi +
test edx edx +
jnz loc_46DB77  +
mov eax ebp +
test cl al +
jnz loc_46D83E  +
mov ecx 1 +
xor ebp ebp +
jmp loc_46D038  +
mov eax [ebx+10h] +
xor edx edx +
movzx edi byte ptr [esi+4] +
mov eax [eax+24h] +
mov [esp+1F4h+var_1B8] eax +
div  edi +
movzx edi byte ptr [esi+3] +
mov eax [esp+1F4h+var_1B8] +
test edx edx +
mov edx 0 +
jnz loc_46DBD2  +
div  edi +
test edx edx +
jz loc_46D81B  +
test ebp ebp +
jz loc_46DBA3  +
mov ecx 1 +
mov ebp 1 +
jmp loc_46D81B  +
mov eax [esp+1F4h+var_E4] +
mov [esp+1F4h+var_1F4] offset aBUnableToSor_0 +
mov [esp+1F4h+var_1F0] eax +
jmp loc_46D850  +
test ebp ebp +
jnz loc_46D82D  +
mov ebx [esp+1F4h+var_1A8] +
mov ecx [esp+1F4h+var_1B0] +
jmp loc_46D4EE  +
test ecx ecx +
jz loc_46DB68  +
mov eax [esp+1F4h+var_E4] +
xor edi edi +
mov [esp+1F4h+var_1F4] offset aBUnableToSortR +
mov [esp+1F4h+var_1F0] eax +
call off_4BFA04  +
mov [esp+1F4h+var_1F4] 5 +
call sub_44BAF0  +
jmp loc_46CCD9  +
div  edi +
test edx edx +
jnz loc_46DB77  +
test ebp ebp +
jnz loc_46D836  +
mov ecx 1 +
xor ebp ebp +
jmp loc_46D81B  +
***
mov eax [esp+10h] +
mov edx [esp+4] +
mov ecx [esp+14h] +
test eax eax +
jz loc_46DC27  +
movzx edx byte ptr [eax+0Ch] +
cmp dl 3 +
jb loc_46DC24  +
cmp dl 4 +
jbe loc_46DC20  +
cmp dl 5 +
jnz loc_46DC24  +
mov eax [eax+14h] +
mov eax [eax+4] +
retn   +
***
mov eax [eax+14h] +
retn   +
***
xor eax eax +
retn   +
***
mov ecx [ecx+10h] +
mov eax [edx+94h] +
mov [esp+8] ecx +
mov [esp+4] eax +
jmp sub_478480  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov ebp [esp+2Ch+arg_C] +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_4] +
mov ecx [ebp+20h] +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_18] eax +
mov eax [esp+2Ch+arg_10] +
mov [esp+2Ch+var_14] eax +
mov eax [ebp+4] +
mov edx [eax+4] +
shr edx cl +
test edx edx +
jz loc_46DDB1  +
cmp edx [ebp+14h] +
jb loc_46DCF0  +
mov ecx [ebp+1Ch] +
sub edx [ebp+18h] +
mov ebx [ecx+edx*4] +
test ebx ebx +
jnz loc_46DC98  +
jmp loc_46DDC7  +
mov ebx [ebx+14h] +
movzx edx byte ptr [ebx+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
jbe loc_46DC95  +
mov ecx [ebx+3Ch] +
or byte ptr [ebx+34h] 20h +
test ecx ecx +
jz loc_46DCB3  +
or byte ptr [ecx+34h] 20h +
mov ecx [esp+2Ch+var_14] +
test ecx ecx +
jz loc_46DCC3  +
sub edx 1 +
cmp dl 1 +
jbe loc_46DD16  +
mov [esp+2Ch+arg_10] 0 +
mov [esp+2Ch+arg_C] ebx +
mov [esp+2Ch+arg_8] eax +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+arg_4] eax +
mov eax [esp+2Ch+var_1C] +
mov [esp+2Ch+arg_0] eax +
mov eax [esp+2Ch+var_18] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
mov ecx [ebp+0Ch] +
lea ebx [edx+edx*4] +
lea ebx [ecx+ebx*4] +
movzx ecx byte ptr [ebx+0Ch] +
shr cl 4 +
test cl cl +
jnz loc_46DC83  +
mov [esp+2Ch+arg_10] ebx +
mov [esp+2Ch+arg_C] 0 +
jmp loc_46DCCF  +
mov esi [ebx+4] +
mov ecx 8 +
mov edi offset a__start_ +
mov [esp+2Ch+var_10] esi +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jz loc_46DDA8  +
mov esi [esp+2Ch+var_10] +
mov ecx 7 +
mov edi offset a__stop_ +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_46DCC3  +
mov esi [esp+2Ch+var_10] +
add esi 7 +
test esi esi +
jz loc_46DCC3  +
cmp byte ptr [esi] 0 +
jz loc_46DCC3  +
mov edi [esp+2Ch+var_20] +
mov edi [edi+34h] +
test edi edi +
jz loc_46DCC3  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] edi +
call sub_44D4B0  +
test eax eax +
jz loc_46DD96  +
test byte ptr [eax+18h] 8 +
jz loc_46DDBB  +
mov edi [edi+9Ch] +
test edi edi +
jnz loc_46DD80  +
mov eax [ebp+4] +
jmp loc_46DCC3  +
mov esi [esp+2Ch+var_10] +
add esi 8 +
jmp loc_46DD60  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+2Ch+var_14] +
mov dword ptr [esi] 1 +
jmp loc_46DDB3  +
mov eax [esp+2Ch+var_20] +
mov esi [esp+2Ch+var_1C] +
mov eax [eax+18h] +
mov edx [esi+94h] +
mov eax [eax+2Ch] +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] offset aFPCorruptInput +
call eax  +
xor eax eax +
jmp loc_46DDB3  +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov ebx [esp+5Ch+arg_4] +
mov eax [ebx+8Ch] +
or byte ptr [ebx+18h] 8 +
mov eax [eax+7Ch] +
test eax eax +
jz loc_46DE16  +
test byte ptr [eax+18h] 8 +
jz loc_46DF90  +
mov eax [ebx+94h] +
test byte ptr [ebx+14h] 4 +
mov eax [eax+0A0h] +
mov esi [eax+248h] +
jz loc_46DED0  +
mov ecx [ebx+4Ch] +
test ecx ecx +
jz loc_46DED0  +
cmp ebx esi +
jz loc_46DF20  +
mov edx [esp+5Ch+arg_0] +
lea ebp [esp+5Ch+var_34] +
mov ecx ebx +
mov eax ebp +
call sub_462B00  +
test eax eax +
jz loc_46DFF8  +
mov eax [esp+5Ch+var_30] +
cmp [esp+5Ch+var_2C] eax +
jbe loc_46E005  +
mov [esp+5Ch+var_44] esi +
mov edi [esp+5Ch+arg_8] +
mov esi [esp+5Ch+arg_0] +
jmp loc_46DE95  +
mov eax [esp+5Ch+var_30] +
add eax 0Ch +
cmp [esp+5Ch+var_2C] eax +
mov [esp+5Ch+var_30] eax +
jbe loc_46E001  +
mov [esp+5Ch+var_50] ebp +
mov [esp+5Ch+var_54] edi +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_5C] esi +
call sub_46E020  +
test eax eax +
jnz loc_46DE80  +
mov esi [esp+5Ch+var_44] +
xor ecx ecx +
xor edi edi +
mov byte ptr [esp+5Ch+var_44] 0 +
mov edx ebx +
mov eax ebp +
mov [esp+5Ch+var_40] ecx +
call sub_45C590  +
mov ecx [esp+5Ch+var_40] +
jmp loc_46DEE1  +
test esi esi +
mov ecx 1 +
setnz byte ptr [esp+5Ch+var_44]  +
mov edi 1 +
cmp byte ptr [esp+5Ch+var_44] 0 +
jnz loc_46DF20  +
mov eax [ebx+8Ch] +
test cl cl +
mov edx [eax+84h] +
jz loc_46DF13  +
test edx edx +
jz loc_46DF13  +
test byte ptr [edx+18h] 8 +
mov eax 1 +
jz loc_46DFD0  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 5Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+8Ch] +
mov edx [eax+80h] +
test edx edx +
jz loc_46DFC0  +
mov edx [esp+5Ch+arg_0] +
mov ecx esi +
xor edi edi +
lea eax [esp+5Ch+var_34] +
call sub_462B00  +
xor ecx ecx +
test eax eax +
jz loc_46DEE8  +
lea eax [esp+5Ch+var_34] +
mov [esp+5Ch+var_4C] eax +
mov eax [esp+5Ch+arg_8] +
mov [esp+5Ch+var_54] esi +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_50] eax +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_5C] eax +
call sub_48C640  +
mov edx esi +
test eax eax +
setnz cl  +
lea eax [esp+5Ch+var_34] +
movzx edi cl +
mov [esp+5Ch+var_44] ecx +
call sub_45C590  +
mov ecx [esp+5Ch+var_44] +
jmp loc_46DEE8  +
mov edi [esp+5Ch+arg_8] +
mov [esp+5Ch+var_58] eax +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_54] edi +
mov [esp+5Ch+var_5C] eax +
call sub_46DDF0  +
mov edx eax +
xor eax eax +
test edx edx +
jnz loc_46DE16  +
jmp loc_46DF0B  +
mov ecx 1 +
mov edi 1 +
jmp loc_46DEEE  +
mov eax [esp+5Ch+arg_8] +
mov [esp+5Ch+var_58] edx +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_5C] eax +
call sub_46DDF0  +
test eax eax +
setnz al  +
add esp 5Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx ecx +
xor edi edi +
jmp loc_46DEE8  +
mov esi [esp+5Ch+var_44] +
test esi esi +
mov ecx 1 +
setnz byte ptr [esp+5Ch+var_44]  +
mov edi 1 +
jmp loc_46DEBA  +
***
push ebx  +
sub esp 30h +
lea eax [esp+30h+var_4] +
mov esi [esp+30h+arg_0] +
mov [esp+30h+var_20] eax +
mov eax [esp+30h+arg_C] +
mov edi [esp+30h+arg_8] +
mov [esp+30h+var_4] 0 +
mov [esp+30h+var_30] esi +
mov [esp+30h+var_24] eax +
mov eax [esp+30h+arg_4] +
mov [esp+30h+var_28] edi +
mov [esp+30h+var_2C] eax +
call sub_46DC40  +
test eax eax +
mov ebx eax +
jnz loc_46E086  +
jmp loc_46E0C0  +
or byte ptr [ebx+18h] 8 +
mov eax [esp+30h+var_4] +
test eax eax +
jz loc_46E0C0  +
mov eax [ebx+94h] +
mov [esp+30h+var_2C] ebx +
mov [esp+30h+var_30] eax +
call sub_44D4F0  +
test eax eax +
mov ebx eax +
jz loc_46E0C0  +
test byte ptr [ebx+18h] 8 +
jnz loc_46E066  +
mov eax [ebx+94h] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_46E062  +
test byte ptr [eax+29h] 8 +
jnz loc_46E062  +
mov [esp+30h+var_28] edi +
mov [esp+30h+var_2C] ebx +
mov [esp+30h+var_30] esi +
call sub_46DDF0  +
test eax eax +
jnz loc_46E066  +
xor eax eax +
jmp loc_46E0C5  +
mov eax 1 +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+40h] +
mov eax [eax+34h] +
test eax eax +
mov [esp+14h] eax +
jnz loc_46E106  +
jmp loc_46E293  +
mov eax [esp+14h] +
mov eax [eax+9Ch] +
test eax eax +
mov [esp+14h] eax +
jz loc_46E293  +
mov eax [esp+14h] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46E0F0  +
mov eax [esp+14h] +
mov eax [eax+64h] +
test eax eax +
mov [esp+18h] eax +
jz loc_46E0F0  +
xor ebx ebx +
xor edx edx +
jmp loc_46E150  +
or byte ptr [eax+18h] 8 +
test ebx ebx +
jnz loc_46E16B  +
and ch 20h +
jz loc_46E149  +
mov esi [eax] +
mov edi offset a_debug_line_ +
mov ecx 0Ch +
cmps   +
setz bl  +
movzx ebx bl +
mov eax [eax+0Ch] +
test eax eax +
jz loc_46E177  +
mov ecx [eax+14h] +
test ecx 100000h +
jnz loc_46E128  +
test byte ptr [eax+18h] 8 +
mov esi 1 +
cmovnz edx esi +
test ebx ebx +
jz loc_46E130  +
mov eax [eax+0Ch] +
mov ebx 1 +
test eax eax +
jnz loc_46E150  +
test edx edx +
mov [esp+1Ch] ebx +
jz loc_46E0F0  +
mov ebp [esp+18h] +
xor esi esi +
jmp loc_46E1B1  +
test ah 20h +
jnz loc_46E199  +
test al 7 +
jnz loc_46E1AA  +
mov eax [ebp+8Ch] +
mov edx [eax+7Ch] +
test edx edx +
jz loc_46E2A0  +
mov ebp [ebp+0Ch] +
test ebp ebp +
jz loc_46E208  +
mov eax [ebp+14h] +
test eax 2000000h +
jz loc_46E190  +
mov eax [ebp+8Ch] +
mov ebx 1 +
mov ecx 1 +
mov edi [eax+7Ch] +
mov eax edi +
mov edx [eax+14h] +
mov eax [eax+8Ch] +
test dh 20h +
mov eax [eax+7Ch] +
cmovz ebx esi +
and edx 7 +
cmovnz ecx esi +
cmp edi eax +
jnz loc_46E1D0  +
or ebx ecx +
jz loc_46E1AA  +
or byte ptr [eax+18h] 8 +
mov eax [eax+8Ch] +
mov eax [eax+7Ch] +
cmp edi eax +
jnz loc_46E1F0  +
mov ebp [ebp+0Ch] +
test ebp ebp +
jnz loc_46E1B1  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_46E0F0  +
mov ebp [esp+18h] +
test byte ptr [ebp+14h] 10h +
jz loc_46E287  +
test byte ptr [ebp+18h] 8 +
jnz loc_46E287  +
mov eax [ebp+0] +
mov [esp] eax +
mov [esp+1Ch] eax +
call strlen  +
mov ebx [esp+18h] +
mov esi eax +
lea esi [esi+0] +
test byte ptr [ebx+18h] 8 +
jz loc_46E280  +
test byte ptr [ebx+15h] 20h +
jz loc_46E280  +
mov edi [ebx] +
mov [esp] edi +
call strlen  +
cmp esi eax +
jnb loc_46E280  +
mov ecx [esp+1Ch] +
sub eax esi +
lea edx [edi+eax] +
mov [esp+8] esi +
mov [esp] edx +
mov [esp+4] ecx +
call strncmp  +
test eax eax +
jnz loc_46E280  +
and byte ptr [ebx+18h] 0F7h +
nop   +
lea esi [esi+0] +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_46E240  +
mov ebp [ebp+0Ch] +
test ebp ebp +
jnz loc_46E218  +
jmp loc_46E0F0  +
***
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
or byte ptr [ebp+18h] 8 +
jmp loc_46E1AA  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
mov esi [esp+24h] +
movzx eax byte ptr [ebx+0Ch] +
mov ecx [esi+78h] +
lea edx [eax-3] +
cmp dl 1 +
jbe loc_46E2D7  +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
***
movzx edx byte ptr [ebx+33h] +
test dl 4 +
jnz loc_46E319  +
test dl 2 +
jnz loc_46E2F0  +
and edx 0Ah +
jnz loc_46E2CC  +
cmp al 3 +
jnz loc_46E2CC  +
nop   +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
sub eax 1 +
cmp al 1 +
jbe loc_46E2CC  +
movzx eax byte ptr [esi] +
mov edx eax +
and edx 3 +
cmp dl 1 +
jbe loc_46E346  +
movzx eax byte ptr [ebx+34h] +
shr al 1 +
and eax 3 +
cmp eax 1 +
jle loc_46E32E  +
mov eax [ebx+14h] +
or dword ptr [eax+14h] 200000h +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
***
mov edx [ebx+4] +
mov eax [esi+7Ch] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4530E0  +
test eax eax +
jz loc_46E319  +
jmp loc_46E2CC  +
***
test al 10h +
jnz loc_46E30B  +
test byte ptr [ebx+34h] 10h +
nop   +
jz loc_46E2CC  +
test ecx ecx +
jz loc_46E2CC  +
mov edx [ebx+4] +
mov eax [ecx+10h] +
mov dword ptr [esp+4] 0 +
mov [esp] ecx +
mov [esp+8] edx +
call eax  +
test eax eax +
jnz loc_46E30B  +
jmp loc_46E2CC  +
***
push esi  +
push ebx  +
sub esp 24h +
mov esi [esp+30h] +
mov ebx [esi+40h] +
test ebx ebx +
jnz loc_46E398  +
jmp loc_46E3F0  +
mov ebx [ebx] +
test ebx ebx +
jz loc_46E3F0  +
mov eax [ebx+4] +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+4] eax +
mov eax [esi+1Ch] +
mov [esp] eax +
call sub_4500A0  +
test eax eax +
jz loc_46E392  +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-3] +
cmp dl 1 +
ja loc_46E392  +
mov eax [eax+14h] +
cmp eax offset off_4BFB90 +
jz loc_46E392  +
mov ebx [ebx] +
or dword ptr [eax+14h] 200000h +
test ebx ebx +
jnz loc_46E398  +
lea esi [esi+0] +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+64h] +
mov ebp [eax+34h] +
test ebp ebp +
jnz loc_46E425  +
jmp loc_46E4B2  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_46E4B2  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46E417  +
mov edx [esp+64h] +
mov ecx ebp +
lea eax [esp+18h] +
call sub_45C4A0  +
test eax eax +
jz loc_46E4B7  +
mov ebx [ebp+64h] +
test ebx ebx +
jnz loc_46E457  +
jmp loc_46E417  +
***
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_46E417  +
mov esi [ebx] +
mov edi offset a_eh_frame_en_0 +
mov ecx 0Fh +
cmps   +
jnz loc_46E450  +
mov edx [esp+64h] +
mov ecx ebp +
mov [esp] ebx +
lea eax [esp+18h] +
call sub_462A60  +
test eax eax +
jz loc_46E450  +
lea eax [esp+18h] +
mov [esp+8] eax +
mov eax [esp+64h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_48AF90  +
mov eax [esp+18h] +
test eax eax +
jz loc_46E450  +
mov edx [ebx+8Ch] +
cmp eax [edx+68h] +
jz loc_46E450  +
mov [esp] eax +
call free  +
jmp loc_46E450  +
***
mov eax 1 +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov eax [esp+70h] +
mov edi [esp+74h] +
mov dword ptr [esp+20h] 1 +
mov eax [eax+4] +
mov eax [eax+1B0h] +
test byte ptr [eax+1AEh] 1 +
mov [esp+18h] eax +
jz loc_46E4F6  +
mov eax [edi+1Ch] +
cmp dword ptr [eax+28h] 1 +
jz loc_46E510  +
mov dword ptr [esp] offset aWarningGcSecti +
call off_4BFA04  +
mov eax 1 +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+18h] +
mov eax [eax+0B4h] +
mov [esp] edi +
call eax  +
mov eax [edi+1Ch] +
mov ebp [edi+34h] +
mov [esp+1Ch] eax +
movzx eax byte ptr [edi+3] +
and eax 6 +
cmp al 4 +
jz loc_46E5DD  +
test ebp ebp +
jz loc_46E5DD  +
lea esi [esp+28h] +
mov dword ptr [esp+4] offset a_eh_frame +
mov [esp] ebp +
call sub_44D4B0  +
test eax eax +
mov ebx eax +
jnz loc_46E5B5  +
jmp loc_46E5C4  +
mov [esp+0Ch] esi +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] ebp +
call sub_48B0F0  +
mov eax [ebx+8Ch] +
mov eax [eax+88h] +
test eax eax +
jz loc_46E596  +
test byte ptr [ebx+16h] 10h +
jnz loc_46E596  +
mov eax [ebp+0A0h] +
mov [eax+248h] ebx +
mov edx ebx +
mov eax esi +
call sub_45C590  +
mov [esp+4] ebx +
mov dword ptr [esp] 0 +
call sub_44D4F0  +
test eax eax +
mov ebx eax +
jz loc_46E5C4  +
mov ecx ebx +
mov edx edi +
mov eax esi +
call sub_462B00  +
test eax eax +
jnz loc_46E560  +
movzx eax byte ptr [edi+3] +
mov ebp [ebp+9Ch] +
and eax 6 +
cmp al 4 +
jz loc_46E5DD  +
test ebp ebp +
jnz loc_46E544  +
mov eax [esp+1Ch] +
lea ebx [esp+20h] +
mov [esp+8] ebx +
mov dword ptr [esp+4] offset sub_45C250 +
mov [esp] eax +
call sub_450810  +
mov eax [esp+20h] +
test eax eax +
jnz loc_46E60B  +
xor eax eax +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [esp+1Ch] +
mov [esp+8] ebx +
mov dword ptr [esp+4] offset sub_462B70 +
mov [esp] esi +
call sub_450810  +
mov eax [esp+20h] +
test eax eax +
jz loc_46E601  +
mov eax [esi+30h] +
test eax eax +
jnz loc_46E8CF  +
mov esi [edi+34h] +
mov eax [esp+18h] +
test esi esi +
mov ebx [eax+0BCh] +
jz loc_46E6ED  +
mov [esp+1Ch] ebx +
mov ebp esi +
mov ebx [esp+70h] +
jmp loc_46E665  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jz loc_46E6E9  +
mov eax [ebp+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46E657  +
mov ecx [esp+18h] +
mov edx [ebx+4] +
mov ecx [ecx+74h] +
mov [esp+4] edx +
mov [esp] eax +
call ecx  +
test eax eax +
jz loc_46E657  +
mov esi [ebp+64h] +
test esi esi +
jnz loc_46E6A7  +
lea esi [esi+0] +
jmp loc_46E657  +
***
mov eax [esi+8Ch] +
cmp dword ptr [eax+4] 7 +
jz loc_46E6E0  +
nop   +
mov esi [esi+0Ch] +
test esi esi +
jz loc_46E657  +
test byte ptr [esi+18h] 8 +
jnz loc_46E6A0  +
mov eax [esi+14h] +
test ah 80h +
jnz loc_46E6A0  +
test eax 200000h +
jz loc_46E692  +
mov eax [esp+1Ch] +
mov [esp+4] esi +
mov [esp] edi +
mov [esp+8] eax +
call sub_46DDF0  +
test eax eax +
jnz loc_46E6A0  +
xor eax eax +
jmp loc_46E603  +
***
mov eax [eax+7Ch] +
test eax eax +
jnz loc_46E6A0  +
jmp loc_46E6BC  +
***
mov ebx [esp+1Ch] +
mov eax [esp+18h] +
mov eax [eax+0C0h] +
mov [esp+4] ebx +
mov [esp] edi +
call eax  +
mov eax [esp+70h] +
mov esi [edi+34h] +
mov eax [eax+4] +
test esi esi +
mov eax [eax+1B0h] +
mov [esp+18h] eax +
mov ebp [eax+0C4h] +
jnz loc_46E731  +
jmp loc_46E889  +
mov esi [esi+9Ch] +
test esi esi +
jz loc_46E889  +
mov eax [esi+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46E723  +
mov ecx [esp+18h] +
mov edx [ecx+74h] +
mov ecx [esp+70h] +
mov ecx [ecx+4] +
mov [esp] eax +
mov [esp+4] ecx +
call edx  +
test eax eax +
jz loc_46E723  +
mov ebx [esi+64h] +
test ebx ebx +
jnz loc_46E820  +
jmp loc_46E723  +
***
test ebp ebp +
jz loc_46E815  +
mov eax [ebx+14h] +
test al 4 +
nop   +
jz loc_46E815  +
mov edx [ebx+4Ch] +
test edx edx +
jz loc_46E815  +
test byte ptr [edi+1] 8 +
jz loc_46E790  +
test ah 20h +
jnz loc_46E815  +
cmp dword ptr [ebx+3Ch] offset off_4BFB90 +
jz loc_46E815  +
movzx eax byte ptr [edi+2] +
mov edx [ebx+94h] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
shr al 6 +
and eax 1 +
mov [esp] edx +
mov [esp+10h] eax +
mov [esp+4] ebx +
call sub_462810  +
test eax eax +
mov edx eax +
jz loc_46E601  +
mov eax [ebx+94h] +
mov [esp+1Ch] edx +
mov [esp+0Ch] edx +
mov [esp+8] ebx +
mov [esp+4] edi +
mov [esp] eax +
call ebp  +
mov ecx [ebx+8Ch] +
mov edx [esp+1Ch] +
cmp edx [ecx+68h] +
jz loc_46E80D  +
mov [esp] edx +
mov [esp+1Ch] eax +
call free  +
mov eax [esp+1Ch] +
test eax eax +
jz loc_46E601  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_46E723  +
mov edx [ebx+14h] +
test edx 2000000h +
jz loc_46E847  +
mov eax [ebx+8Ch] +
mov eax [eax+7Ch] +
movzx ecx byte ptr [eax+18h] +
movzx eax byte ptr [ebx+18h] +
and ecx 8 +
and eax 0FFFFFFF7h +
or eax ecx +
mov [ebx+18h] al +
test byte ptr [ebx+18h] 8 +
jnz loc_46E815  +
test dh 80h +
jnz loc_46E815  +
or dh 80h +
mov [ebx+14h] edx +
test byte ptr [edi+5] 10h +
jz loc_46E762  +
mov ecx [ebx+24h] +
test ecx ecx +
jz loc_46E762  +
mov eax [ebx] +
mov [esp+4] esi +
mov dword ptr [esp] offset aRemovingUnused +
mov [esp+8] eax +
call off_4BFA04  +
jmp loc_46E762  +
***
mov eax [esp+18h] +
mov [esp+28h] edi +
mov eax [eax+0DCh] +
mov dword ptr [esp+4] offset sub_45D590 +
mov [esp+2Ch] eax +
lea eax [esp+28h] +
mov [esp+8] eax +
mov eax [edi+1Ch] +
mov [esp] eax +
call sub_450810  +
mov eax [esp+70h] +
lea ecx [esp+24h] +
mov edx edi +
call sub_45C890  +
mov eax 1 +
jmp loc_46E508  +
***
mov eax [esp+18h] +
mov eax [eax+0B8h] +
mov [esp+8] edi +
mov [esp+4] eax +
mov eax [esp+1Ch] +
mov [esp] eax +
call sub_450810  +
jmp loc_46E636  +
***
push ebp  +
xor edx edx +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+30h] +
mov esi [esp+34h] +
mov ebp [esp+3Ch] +
mov eax [edi+4] +
mov ecx [edi+0A0h] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx ebx byte ptr [eax+5] +
mov eax [ecx+60h] +
div  ebx +
mov ebx [ecx+928h] +
test ebx ebx +
jnz loc_46E940  +
sub eax [ecx+68h] +
mov ecx [ecx+218h] +
lea edx [ecx+eax*4] +
cmp ecx edx +
jnz loc_46E957  +
jmp loc_46E990  +
add ecx 4 +
cmp edx ecx +
jz loc_46E990  +
mov ebx [ecx] +
test ebx ebx +
jz loc_46E950  +
movzx eax byte ptr [ebx+0Ch] +
sub eax 3 +
cmp al 1 +
ja loc_46E950  +
cmp [ebx+14h] esi +
jnz loc_46E950  +
cmp [ebx+18h] ebp +
jnz loc_46E950  +
mov eax [ebx+44h] +
test eax eax +
jz loc_46E9BF  +
mov edx [esp+38h] +
test edx edx +
jz loc_46E9E0  +
mov edi [esp+38h] +
mov [eax+8] edi +
mov eax 1 +
jmp loc_46E9B7  +
mov [esp+0Ch] ebp +
mov [esp+8] esi +
mov [esp+4] edi +
mov dword ptr [esp] offset aBALuNoSymbolFo +
call off_4BFA04  +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+4] 0Ch +
mov [esp] edi +
call sub_458B60  +
test eax eax +
mov [ebx+44h] eax +
jnz loc_46E979  +
xor eax eax +
jmp loc_46E9B7  +
***
mov dword ptr [eax+8] 0FFFFFFFFh +
mov eax 1 +
jmp loc_46E9B7  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov edx [esp+40h] +
mov esi [esp+48h] +
mov ebx [esp+4Ch] +
mov eax [edx+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx ecx byte ptr [eax+0Bh] +
mov eax [esi+44h] +
test eax eax +
jz loc_46EAE2  +
cmp [eax] ebx +
ja loc_46EAC5  +
mov edx 1 +
movzx edi cl +
mov eax [eax+4] +
shl edx cl +
cmp byte ptr [esi+0Ch] 1 +
mov [esp+14h] edi +
lea edi [edx+ebx] +
jz loc_46EA4E  +
mov edi [esi+2Ch] +
lea ebp [edx+ebx] +
cmp ebx edi +
cmovnb edi ebp +
lea edi [edi+edx-1] +
neg edx  +
and edi edx +
mov edx edi +
shr edx cl +
test eax eax +
mov [esp+18h] ecx +
lea edx ds:4[edx*4] +
jz loc_46EB10  +
sub eax 4 +
mov [esp+4] edx +
mov [esp] eax +
mov [esp+1Ch] edx +
call sub_459C10  +
test eax eax +
mov ebp eax +
jz loc_46EB05  +
mov eax [esi+44h] +
mov ecx [esp+18h] +
mov edx [esp+1Ch] +
mov eax [eax] +
mov dword ptr [esp+4] 0 +
shr eax cl +
lea eax ds:4[eax*4] +
sub edx eax +
add eax ebp +
mov [esp+8] edx +
mov [esp] eax +
call memset  +
mov eax [esi+44h] +
add ebp 4 +
mov ecx [esp+14h] +
mov [eax+4] ebp +
mov [eax] edi +
jmp loc_46EACB  +
mov ebp [eax+4] +
movzx ecx cl +
shr ebx cl +
mov eax 1 +
mov dword ptr [ebp+ebx*4+0] 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+4] 0Ch +
mov [esp] edx +
mov [esp+14h] ecx +
call sub_458B60  +
mov ecx [esp+14h] +
test eax eax +
mov [esi+44h] eax +
jnz loc_46EA21  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp] edx +
call sub_459D10  +
test eax eax +
mov ebp eax +
jnz loc_46EAB4  +
xor eax eax +
jmp loc_46EB07  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+48h] +
mov eax [eax+8Ch] +
mov eax [eax+8] +
mov [esp+1Ch] eax +
mov eax [esp+44h] +
mov edx [eax+0Ch] +
test edx edx +
jz loc_46EB80  +
mov edx [eax] +
mov ecx [esp+1Ch] +
xor eax eax +
and ecx edx +
cmp ecx edx +
jnz loc_46EB72  +
mov eax [esp+44h] +
mov ecx [esp+1Ch] +
test [eax+4] ecx +
setz al  +
movzx eax al +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+40h] +
mov eax [eax+30h] +
mov eax [eax+4] +
mov edi [eax+1B0h] +
mov eax [esp+44h] +
mov ebx [eax+8] +
test ebx ebx +
jz loc_46EC8E  +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+18h] 0 +
jmp loc_46EBDD  +
mov edx [ebx] +
test edx edx +
jz loc_46EC4D  +
mov ecx [esp+14h] +
or eax ecx +
cmp edx 1 +
cmovnz eax ecx +
mov [esp+14h] eax +
mov dword ptr [ebx+8] 1 +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_46EC6F  +
mov eax [edi+108h] +
test eax eax +
jz loc_46EBF3  +
mov edx [ebx+4] +
mov [esp] edx +
call eax  +
test eax eax +
jnz loc_46EBB1  +
mov esi [ebx+4] +
xor ebp ebp +
mov eax ds:off_500100[ebp*8] +
mov [esp] esi +
mov [esp+4] eax +
call strcmp  +
test eax eax +
jz loc_46EC40  +
add ebp 1 +
cmp ebp 0Ch +
jnz loc_46EBF8  +
mov eax [ebx+8] +
test eax eax +
jnz loc_46EBD2  +
mov eax [esp+40h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+4] esi +
mov dword ptr [esp] offset aUnrecognizedIn +
call eax  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [ebx] +
test eax eax +
jnz loc_46EC56  +
mov eax ds:dword_500104[ebp*8] +
or [esp+18h] eax +
jmp loc_46EBCB  +
***
cmp eax 1 +
jnz loc_46EBCB  +
mov eax ds:dword_500104[ebp*8] +
or [esp+14h] eax +
jmp loc_46EBCB  +
***
mov edx [esp+18h] +
mov ebp [esp+14h] +
mov eax [esp+44h] +
or edx [eax] +
mov dword ptr [eax+0Ch] 1 +
or [eax+4] ebp +
mov [eax] edx +
jmp loc_46EB55  +
***
xor ebp ebp +
xor edx edx +
jmp loc_46EC77  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov ecx [esp+3Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+3Ch+var_20] eax +
mov eax [esp+3Ch+arg_4] +
cmp [eax+30h] ecx +
jz loc_46ECD9  +
mov [esp+3Ch+var_38] 32FAh +
mov [esp+3Ch+var_3C] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [esp+3Ch+arg_4] +
mov edx [eax+1Ch] +
xor eax eax +
cmp dword ptr [edx+28h] 1 +
jz loc_46ECF0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+var_20] +
xor ebp ebp +
test byte ptr [eax+1ADh] 1 +
jz loc_46EE08  +
mov eax [esp+3Ch+arg_4] +
mov ebx [eax+34h] +
test ebx ebx +
jnz loc_46ED21  +
jmp loc_46EDD7  +
mov ebx [ebx+9Ch] +
test ebx ebx +
jz loc_46EDD0  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46ED13  +
mov eax [ebx+0A0h] +
mov esi [eax+21Ch] +
test esi esi +
jz loc_46ED13  +
mov ecx [eax+928h] +
test ecx ecx +
jz loc_46EDC0  +
mov ecx [esp+3Ch+var_20] +
mov eax [eax+60h] +
mov edx [ecx+174h] +
movzx edi byte ptr [edx+5] +
xor edx edx +
div  edi +
mov [esp+3Ch+var_24] eax +
mov edx [esp+3Ch+var_24] +
test edx edx +
jz loc_46ED13  +
xor edi edi +
jmp loc_46EDAD  +
mov eax [esp+3Ch+var_20] +
mov ecx [esp+3Ch+arg_4] +
mov edx [esp+3Ch+arg_0] +
mov [esi+edi*4] ebp +
mov eax [eax+180h] +
mov [esp+3Ch+var_2C] edi +
mov [esp+3Ch+var_30] ebx +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_3C] edx +
call eax  +
add ebp eax +
add edi 1 +
cmp edi [esp+3Ch+var_24] +
jz loc_46ED13  +
mov eax [esi+edi*4] +
test eax eax +
jg loc_46ED70  +
mov dword ptr [esi+edi*4] 0FFFFFFFFh +
jmp loc_46EDA0  +
mov eax [eax+68h] +
mov [esp+3Ch+var_24] eax +
jmp loc_46ED5D  +
mov eax [esp+3Ch+arg_4] +
mov edx [eax+1Ch] +
mov eax [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] offset sub_45C310 +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_14] ebp +
mov [esp+3Ch+var_10] eax +
lea eax [esp+3Ch+var_14] +
mov [esp+3Ch+var_34] eax +
call sub_450810  +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [eax+17Ch] +
jmp loc_46ED03  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
mov esi [esp+24h] +
mov [esp] ebx +
mov [esp+4] esi +
call sub_46ECA0  +
test eax eax +
jnz loc_46EE45  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+24h] esi +
mov [esp+20h] ebx +
add esp 14h +
pop ebx  +
pop esi  +
jmp loc_46B220  +
***
push esi  +
push ebx  +
xor ebx ebx +
sub esp 5Ch +
mov esi [esp+5Ch+arg_4] +
test byte ptr [esi+4] 1 +
jnz loc_46EE7C  +
mov eax [esi+1Ch] +
cmp dword ptr [eax+28h] 1 +
jz loc_46EE86  +
add esp 5Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_58] offset a_stab_0 +
mov [esp+5Ch+var_5C] eax +
call sub_44D4B0  +
test eax eax +
jz loc_46EF57  +
mov ebx [eax+0A0h] +
mov [esp+5Ch+var_40] 0 +
test ebx ebx +
jz loc_46EF60  +
mov ebp 1 +
jmp loc_46EECE  +
mov ebx [ebx+0A0h] +
test ebx ebx +
jz loc_46EF60  +
mov edi [ebx+24h] +
test edi edi +
jz loc_46EEC0  +
mov ecx [ebx+4Ch] +
test ecx ecx +
jz loc_46EEC0  +
movzx eax word ptr [ebx+18h] +
and ax 380h +
add ax 0FF80h +
jnz loc_46EEC0  +
mov edi [ebx+94h] +
mov eax [edi+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46EEC0  +
mov ecx ebx +
mov edx esi +
lea eax [esp+5Ch+var_34] +
call sub_462B00  +
test eax eax +
jz loc_46F0F0  +
mov eax [ebx+8Ch] +
lea ecx [esp+5Ch+var_34] +
mov eax [eax+88h] +
mov [esp+5Ch+var_4C] ecx +
mov [esp+5Ch+var_50] offset loc_45C380 +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_5C] edi +
call sub_48A420  +
mov edx ebx +
test eax eax +
mov eax [esp+5Ch+var_40] +
cmovnz eax ebp +
mov [esp+5Ch+var_40] eax +
lea eax [esp+5Ch+var_34] +
call sub_45C590  +
jmp loc_46EEC0  +
mov [esp+5Ch+var_40] 0 +
nop   +
movzx eax byte ptr [esi+3] +
and eax 6 +
cmp al 4 +
jz loc_46F020  +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_58] offset a_eh_frame +
mov [esp+5Ch+var_5C] eax +
call sub_44D4B0  +
test eax eax +
jz loc_46F020  +
mov ebx [eax+0A0h] +
test ebx ebx +
jz loc_46F020  +
lea ebp [esp+5Ch+var_34] +
jmp loc_46EFAA  +
mov ebx [ebx+0A0h] +
test ebx ebx +
jz loc_46F020  +
mov edx [ebx+24h] +
test edx edx +
jz loc_46EFA0  +
mov edi [ebx+94h] +
mov eax [edi+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46EFA0  +
mov ecx ebx +
mov edx esi +
mov eax ebp +
call sub_462B00  +
test eax eax +
jz loc_46F0F0  +
mov [esp+5Ch+var_50] ebp +
mov [esp+5Ch+var_54] ebx +
mov [esp+5Ch+var_58] esi +
mov [esp+5Ch+var_5C] edi +
call sub_48B0F0  +
mov [esp+5Ch+var_4C] ebp +
mov [esp+5Ch+var_50] offset loc_45C380 +
mov [esp+5Ch+var_54] ebx +
mov [esp+5Ch+var_58] esi +
mov [esp+5Ch+var_5C] edi +
call sub_48C6E0  +
mov edx ebx +
test eax eax +
mov eax 1 +
cmovz eax [esp+5Ch+var_40] +
mov [esp+5Ch+var_40] eax +
mov eax ebp +
call sub_45C590  +
jmp loc_46EFA0  +
mov ebx [esi+34h] +
test ebx ebx +
jz loc_46F0A6  +
lea ebp [esp+5Ch+var_34] +
jmp loc_46F03A  +
mov ebx [ebx+9Ch] +
test ebx ebx +
jz loc_46F0A6  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_46F030  +
mov edi [eax+1B0h] +
mov eax [edi+110h] +
test eax eax +
jz loc_46F030  +
mov ecx ebx +
mov edx esi +
mov eax ebp +
call sub_45C4A0  +
test eax eax +
jz loc_46F0F0  +
mov eax [edi+110h] +
mov [esp+5Ch+var_54] esi +
mov [esp+5Ch+var_58] ebp +
mov [esp+5Ch+var_5C] ebx +
call eax  +
mov edx [ebx+0A0h] +
test eax eax +
mov eax 1 +
cmovz eax [esp+5Ch+var_40] +
mov [esp+5Ch+var_40] eax +
mov eax [esp+5Ch+var_28] +
test eax eax +
jz loc_46F030  +
cmp eax [edx+78h] +
jz loc_46F030  +
mov [esp+5Ch+var_5C] eax +
call free  +
jmp loc_46F030  +
movzx eax byte ptr [esi+3] +
and eax 6 +
cmp al 4 +
jz loc_46F0FA  +
test al al +
mov ebx [esp+5Ch+var_40] +
jz loc_46EE7C  +
movzx eax byte ptr [esi] +
and eax 3 +
cmp al 2 +
jz loc_46EE7C  +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_58] esi +
mov [esp+5Ch+var_5C] eax +
call sub_48CDA0  +
test eax eax +
mov eax 1 +
cmovnz ebx eax +
jmp loc_46EE7C  +
mov ebx 0FFFFFFFFh +
jmp loc_46EE7C  +
mov [esp+5Ch+var_5C] esi +
call sub_48C470  +
movzx eax byte ptr [esi+3] +
and eax 6 +
jmp loc_46F0B1  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+44h] +
cmp dword ptr [ebx+3Ch] offset off_4BFB90 +
jz loc_46F13C  +
mov ebp [ebx+14h] +
test ebp 20000h +
jz loc_46F13C  +
mov eax [ebx+8Ch] +
mov esi [eax+78h] +
test esi esi +
jz loc_46F146  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [ebx] +
mov [esp+14h] edx +
mov edx ebp +
and edx 2000000h +
mov [esp+10h] edx +
jz loc_46F265  +
mov eax [eax+7Ch] +
test eax eax +
jz loc_46F265  +
mov eax [eax+8Ch] +
mov edx [eax+74h] +
test edx edx +
jz loc_46F265  +
mov [esp] edx +
call sub_4528A0  +
mov edi [eax+0Ch] +
mov [esp+18h] eax +
test edi edi +
jz loc_46F465  +
mov [esp+44h] ebx +
mov esi edi +
mov ebx ebp +
mov [esp+1Ch] edi +
mov ebp [esp+14h] +
jmp loc_46F1AD  +
mov esi [esi] +
test esi esi +
jz loc_46F2B0  +
mov edi [esi+4] +
mov eax [edi+14h] +
xor eax ebx +
test eax 2000000h +
jnz loc_46F1DE  +
mov ecx [esp+10h] +
test ecx ecx +
jnz loc_46F440  +
mov eax [edi] +
mov [esp] ebp +
mov [esp+4] eax +
call strcmp  +
test eax eax +
jz loc_46F37B  +
mov eax [edi+94h] +
test byte ptr [eax+2Ah] 20h +
jz loc_46F1A3  +
mov ebx [esp+44h] +
mov eax [esp+48h] +
mov [esp+4] esi +
mov [esp] ebx +
mov [esp+8] eax +
call sub_452970  +
test eax eax +
jz loc_46F13C  +
mov edx [esp+10h] +
test edx edx +
jz loc_46F25B  +
mov eax [ebx+8Ch] +
mov edx [eax+7Ch] +
test edx edx +
jz loc_46F25B  +
mov ecx [esi+4] +
mov eax [edx+8Ch] +
mov dword ptr [edx+3Ch] offset off_4BFB90 +
mov [edx+7Ch] ecx +
mov eax [eax+7Ch] +
cmp eax edx +
jnz loc_46F257  +
jmp loc_46F25B  +
mov [eax+7Ch] ecx +
mov dword ptr [eax+3Ch] offset off_4BFB90 +
mov eax [eax+8Ch] +
mov eax [eax+7Ch] +
cmp eax edx +
jz loc_46F25B  +
test eax eax +
jnz loc_46F240  +
mov eax 1 +
jmp loc_46F13E  +
***
mov esi [esp+14h] +
mov ecx 0Eh +
mov edi offset a_gnu_linkonc_0 +
mov edx [esp+14h] +
cmps   +
setnbe cl  +
setb al  +
cmp cl al +
jnz loc_46F17A  +
mov eax edx +
mov esi edx +
add eax 0Eh +
mov dword ptr [esp+4] 2Eh +
mov [esp] eax +
call strchr  +
lea edx [eax+1] +
test eax eax +
cmovz edx esi +
jmp loc_46F17A  +
***
mov eax [esp+10h] +
mov edi [esp+1Ch] +
mov ebx [esp+44h] +
test eax eax +
jz loc_46F307  +
mov eax [ebx+8Ch] +
mov eax [eax+7Ch] +
test eax eax +
jz loc_46F2DE  +
mov edx [eax+8Ch] +
mov esi [edx+7Ch] +
cmp esi eax +
jz loc_46F3FC  +
mov eax [esp+18h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_4528D0  +
test eax eax +
jz loc_46F3C4  +
xor eax eax +
cmp dword ptr [ebx+3Ch] offset off_4BFB90 +
setz al  +
jmp loc_46F13E  +
***
mov eax [edi+4] +
test byte ptr [eax+17h] 2 +
jz loc_46F32A  +
mov eax [eax+8Ch] +
mov ecx [eax+7Ch] +
test ecx ecx +
jz loc_46F32A  +
mov eax [ecx+8Ch] +
mov esi [eax+7Ch] +
cmp esi ecx +
jz loc_46F3A0  +
mov edi [edi] +
test edi edi +
jnz loc_46F307  +
mov esi [esp+14h] +
mov edi offset a_gnu_linkonc_1 +
mov ecx 10h +
cmps   +
jnz loc_46F2DE  +
mov eax [esp+18h] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_46F2DE  +
mov ebp 10h +
mov [esp+44h] ebx +
mov edx [eax+4] +
test byte ptr [edx+17h] 2 +
jnz loc_46F36C  +
mov esi [edx] +
mov edi offset a_gnu_linkonc_2 +
mov ecx ebp +
cmps   +
jz loc_46F3DC  +
mov eax [eax] +
test eax eax +
jnz loc_46F356  +
mov ebx [esp+44h] +
jmp loc_46F2DE  +
***
mov ebx [esp+44h] +
mov eax [esp+48h] +
mov [esp+4] esi +
mov [esp] ebx +
mov [esp+8] eax +
call sub_452970  +
test eax eax +
jnz loc_46F25B  +
jmp loc_46F13C  +
***
mov ecx [esp+48h] +
mov edx ebx +
mov eax esi +
call sub_45CBA0  +
test eax eax +
jz loc_46F32A  +
mov dword ptr [ebx+3Ch] offset off_4BFB90 +
mov [ebx+7Ch] esi +
jmp loc_46F330  +
***
mov eax [esp+48h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov dword ptr [esp] offset aFPAlready_li_0 +
call eax  +
jmp loc_46F2F6  +
***
mov eax [esp+40h] +
cmp [edx+94h] eax +
mov ebx [esp+44h] +
jz loc_46F2DE  +
mov dword ptr [ebx+3Ch] offset off_4BFB90 +
jmp loc_46F2DE  +
***
test edi edi +
jnz loc_46F40F  +
jmp loc_46F2DE  +
***
mov edi [edi] +
test edi edi +
jz loc_46F2DE  +
mov eax [edi+4] +
test byte ptr [eax+17h] 2 +
jnz loc_46F405  +
mov ecx [esp+48h] +
mov edx esi +
call sub_45CBA0  +
test eax eax +
jz loc_46F405  +
mov eax [edi+4] +
mov dword ptr [esi+3Ch] offset off_4BFB90 +
mov [esi+7Ch] eax +
mov dword ptr [ebx+3Ch] offset off_4BFB90 +
jmp loc_46F2DE  +
***
mov ebx [esp+44h] +
mov eax [esp+48h] +
mov [esp+4] esi +
mov [esp] ebx +
mov [esp+8] eax +
call sub_452970  +
test eax eax +
jnz loc_46F212  +
jmp loc_46F13C  +
***
cmp dword ptr [esp+10h] 0 +
jnz loc_46F2C0  +
jmp loc_46F330  +
***
mov eax [esp+4] +
cmp dword ptr [eax+10h] 0FFFFFFF2h +
setz al  +
movzx eax al +
retn   +
***
mov eax 0FFFFFFF2h +
retn   +
***
mov eax offset off_4BFA40 +
retn   +
***
mov eax [esp+4] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+0Ah] +
shr al 3 +
movzx eax al +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov esi [esp+24h] +
mov eax [esi+8Ch] +
mov ebx [eax+70h] +
test ebx ebx +
jz loc_46F4F0  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
mov edx [esi] +
mov ecx [esp+28h] +
mov eax [esp+20h] +
call sub_45EF60  +
test eax eax +
jz loc_46F4E6  +
mov [esp+4] eax +
mov eax [esp+20h] +
mov [esp] eax +
call sub_44D590  +
test eax eax +
mov ebx eax +
jz loc_46F4E6  +
mov eax [esi+8Ch] +
mov [eax+70h] ebx +
jmp loc_46F4E6  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov esi [esp+20h] +
mov eax [esi+8Ch] +
mov ebx [eax+70h] +
test ebx ebx +
jz loc_46F550  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edx [esi] +
mov ecx [esp+30h] +
mov eax [esp+2Ch] +
call sub_45EF60  +
test eax eax +
mov edi eax +
jz loc_46F547  +
mov [esp+4] eax +
mov eax [esp+24h] +
mov [esp] eax +
call sub_44D590  +
test eax eax +
mov ebx eax +
jz loc_46F586  +
mov eax [esi+8Ch] +
mov [eax+70h] ebx +
jmp loc_46F547  +
***
mov eax [esi+14h] +
mov [esp+4] edi +
and eax 1 +
cmp eax 1 +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 10410Bh +
mov [esp+8] eax +
mov eax [esp+24h] +
mov [esp] eax +
call sub_44D890  +
test eax eax +
mov ebx eax +
jz loc_46F57B  +
cmp dword ptr [esp+30h] 1 +
mov edx [eax+8Ch] +
sbb eax eax +
and eax 5 +
add eax 4 +
mov [edx+4] eax +
mov eax [esp+28h] +
mov [ebx+40h] eax +
jmp loc_46F57B  +
***
sub esp 3Ch +
mov eax [esp+48h] +
mov edx [esp+44h] +
movzx ecx byte ptr [eax+30h] +
mov [edx+30h] cl +
movzx ecx byte ptr [eax+32h] +
movzx eax byte ptr [eax+31h] +
mov [edx+32h] cl +
lea ecx [esp+1Ch] +
mov [esp+29h] al +
mov eax [esp+40h] +
mov eax [eax+4] +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] 14h +
call sub_45D350  +
add esp 3Ch +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+30h] +
mov eax [esp+34h] +
mov ebp [esp+38h] +
mov edx [ebx+4] +
mov esi [eax+4Ch] +
mov edi [edx+1B0h] +
lea ecx [esi+1] +
mov edx [eax+6Ch] +
mov [eax+4Ch] ecx +
mov ecx [edi+174h] +
movzx ecx byte ptr [ecx+4] +
imul esi ecx +
add esi edx +
add edx [eax+24h] +
add ecx esi +
mov eax [edi+174h] +
cmp ecx edx +
jbe loc_46F690  +
mov dword ptr [esp+4] 3519h +
mov dword ptr [esp] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [edi+174h] +
mov eax [eax+44h] +
mov [esp+38h] esi +
mov [esp+34h] ebp +
mov [esp+30h] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+30h] +
mov eax [esp+34h] +
mov ebp [esp+38h] +
mov edx [ebx+4] +
mov esi [eax+4Ch] +
mov edi [edx+1B0h] +
lea ecx [esi+1] +
mov edx [eax+6Ch] +
mov [eax+4Ch] ecx +
mov ecx [edi+174h] +
movzx ecx byte ptr [ecx+3] +
imul esi ecx +
add esi edx +
add edx [eax+24h] +
add ecx esi +
mov eax [edi+174h] +
cmp ecx edx +
jbe loc_46F710  +
mov dword ptr [esp+4] 3524h +
mov dword ptr [esp] offset a____Binutil_12 +
call sub_44BA40  +
mov eax [edi+174h] +
mov eax [eax+3Ch] +
mov [esp+38h] esi +
mov [esp+34h] ebp +
mov [esp+30h] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
***
mov eax [esp+arg_0] +
mov edx [eax+1Ch] +
mov eax [eax+18h] +
retn   +
***
retn   +
***
retn   +
***
push esi  +
push ebx  +
mov esi [esp+8+arg_4] +
mov eax [esp+8+arg_0] +
test esi 1 +
mov edi esi +
mov ebx [eax+8] +
jnz loc_46F7B6  +
test edi 2 +
jnz loc_46F7C6  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_46F79C  +
xor eax eax +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_46F7A4  +
mov byte ptr [edi] 0 +
mov eax [ebx] +
mov dword ptr [esi+1Ch] 0 +
mov [esi+18h] eax +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
lea edi [esi+1] +
mov dl 2Fh +
test edi 2 +
mov byte ptr [esi] 0 +
jz loc_46F785  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
sub edx 2 +
jmp loc_46F785  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov esi [ebx+8] +
mov eax [esi+4] +
test eax eax +
jz loc_46F7FB  +
mov [esp+14h+var_14] eax +
call free  +
mov [esp+14h+var_14] esi +
call free  +
xor eax eax +
mov dword ptr [ebx+8] 0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_C] +
mov ecx [esp+10h+arg_0] +
mov eax [esp+10h+arg_4] +
mov edx [esp+10h+arg_8] +
test esi esi +
mov ebx [ecx+8] +
jz loc_46F843  +
add eax [ecx+18h] +
adc edx [ecx+1Ch] +
test edx edx +
js loc_46F8CD  +
mov edi [ebx] +
mov esi eax +
cmp eax edi +
jbe loc_46F86B  +
test byte ptr [ecx+28h] 10h +
jz loc_46F8A4  +
add edi 7Fh +
add esi 7Fh +
and edi 0FFFFFF80h +
and esi 0FFFFFF80h +
cmp edi esi +
mov [ebx] eax +
jb loc_46F874  +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [ebx+4] +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] eax +
call sub_459CD0  +
test eax eax +
mov [ebx+4] eax +
jz loc_46F8F1  +
sub esi edi +
add edi eax +
mov [esp+10h+var_8] esi +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] edi +
call memset  +
jmp loc_46F86B  +
mov [ecx+18h] edi +
mov dword ptr [ecx+1Ch] 0 +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
mov [esp+10h+var_10] 12h +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
jmp loc_46F86D  +
mov dword ptr [ecx+18h] 0 +
mov dword ptr [ecx+1Ch] 0 +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
mov eax 0FFFFFFFFh +
jmp loc_46F86D  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
mov eax 0FFFFFFFFh +
mov dword ptr [ebx] 0 +
jmp loc_46F86D  +
***
push esi  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+38h+arg_0] +
mov ecx [esp+38h+arg_8] +
mov edi [eax+18h] +
mov ebp [eax+1Ch] +
mov ebx [eax+8] +
mov eax ecx +
add eax edi +
adc edx ebp +
cmp edx 0 +
mov esi [ebx] +
ja loc_46FA1B  +
cmp eax esi +
jbe loc_46FA80  +
cmp esi edi +
jb loc_46FA67  +
sub esi edi +
mov [esp+38h+var_20] esi +
mov [esp+38h+var_1C] 0 +
mov [esp+38h+var_38] 12h +
call sub_44BAF0  +
mov eax [esp+38h+arg_0] +
mov eax [eax+18h] +
add eax [ebx+4] +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] eax +
mov eax [esp+38h+arg_4] +
mov [esp+38h+var_38] eax +
call memcpy  +
mov eax [esp+38h+var_20] +
mov edx [esp+38h+var_1C] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_20] 0 +
xor esi esi +
mov [esp+38h+var_1C] 0 +
jmp loc_46FA2D  +
mov esi ecx +
mov eax edi +
mov [esp+38h+var_20] ecx +
mov [esp+38h+var_1C] 0 +
jmp loc_46FA40  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_4] +
mov eax [esi+88h] +
test eax eax +
jz loc_46FB18  +
mov ecx [esi+18h] +
xor edx edx +
mov ebx [esi+1Ch] +
mov ebp [eax+4] +
mov eax edi +
add eax ecx +
adc edx ebx +
cmp edx 0 +
jbe loc_46FB60  +
cmp ebx 0 +
jbe loc_46FB10  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ecx ebp +
jnb loc_46FB04  +
mov edi ebp +
sub edi ecx +
mov eax [esi+0Ch] +
test eax eax +
jz loc_46FB70  +
mov edx [esp+1Ch+arg_0] +
mov eax [eax] +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] esi +
call eax  +
mov edx eax +
mov eax 0FFFFFFFFh +
cmp edx 0FFFFFFFFh +
jz loc_46FB06  +
mov ecx edx +
xor ebx ebx +
add [esi+18h] ecx +
mov eax edx +
adc [esi+1Ch] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax ebp +
ja loc_46FAFF  +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_46FB1F  +
nop   +
lea esi [esi+0] +
xor ecx ecx +
xor ebx ebx +
xor edx edx +
jmp loc_46FB4A  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_4] +
mov eax [esi+0Ch] +
test eax eax +
jz loc_46FBF0  +
mov edx [esp+1Ch+arg_0] +
mov eax [eax+4] +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_10] 0 +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] esi +
call eax  +
cmp eax 0FFFFFFFFh +
mov ebp eax +
jz loc_46FBC3  +
mov ecx eax +
xor ebx ebx +
add [esi+18h] ecx +
adc [esi+1Ch] ebx +
cmp ebp edi +
jz loc_46FBDF  +
call ds:__imp__errno  +
mov dword ptr [eax] 1Ch +
mov [esp+1Ch+var_1C] 1 +
call sub_44BAF0  +
add esp 1Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx ecx +
xor ebx ebx +
xor ebp ebp +
jmp loc_46FBBD  +
***
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_0] +
mov eax [esi+0Ch] +
test eax eax +
jz loc_46FC50  +
mov eax [eax+8] +
mov edi esi +
mov [esp+10h+var_10] esi +
call eax  +
mov ecx [esi+8Ch] +
test ecx ecx +
jnz loc_46FC2B  +
jmp loc_46FC3B  +
mov edi ecx +
mov ecx ebx +
mov ebx [ecx+8Ch] +
sub eax [edi+38h] +
sbb edx [edi+3Ch] +
test ebx ebx +
jnz loc_46FC27  +
mov ebx edx +
mov ecx eax +
mov [esi+18h] ecx +
mov [esi+1Ch] ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor ebx ebx +
xor ecx ecx +
mov [esi+18h] ecx +
xor eax eax +
xor edx edx +
mov [esi+1Ch] ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [esp+arg_0] +
mov edx [eax+0Ch] +
test edx edx +
jz loc_46FC80  +
mov edx [edx+14h] +
jmp edx  +
xor eax eax +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edx [eax+0Ch] +
test edx edx +
jz loc_46FCB6  +
mov ecx [esp+1Ch+arg_4] +
mov edx [edx+18h] +
mov [esp+1Ch+var_1C] eax +
mov [esp+1Ch+var_18] ecx +
call edx  +
test eax eax +
js loc_46FCC0  +
add esp 1Ch +
retn   +
mov eax 0FFFFFFFFh +
nop   +
lea esi [esi+0] +
mov [esp+1Ch+var_1C] 1 +
mov [esp+1Ch+var_10] eax +
call sub_44BAF0  +
mov eax [esp+1Ch+var_10] +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
cmp [esp+1Ch+arg_C] 1 +
mov esi [esp+1Ch+arg_4] +
mov edi [esp+1Ch+arg_8] +
jbe loc_46FD0A  +
mov [esp+1Ch+var_18] 11Fh +
mov [esp+1Ch+var_1C] offset a____Binutils_3 +
call sub_44BA40  +
cmp [esp+1Ch+arg_C] 1 +
jz loc_46FE00  +
mov eax [esp+1Ch+arg_0] +
movzx eax byte ptr [eax+28h] +
and eax 7 +
cmp al 2 +
jz loc_46FD36  +
mov eax [esp+1Ch+arg_0] +
mov ebp [eax+8Ch] +
test ebp ebp +
jz loc_46FE24  +
mov ecx [esp+1Ch+arg_C] +
test ecx ecx +
jnz loc_46FDB3  +
mov eax [esp+1Ch+arg_0] +
mov ecx [eax+8Ch] +
test ecx ecx +
jz loc_46FDB3  +
mov ebp [esp+1Ch+arg_0] +
mov eax esi +
mov edx edi +
jmp loc_46FD5A  +
mov ebp ecx +
mov ecx ebx +
mov ebx [ecx+8Ch] +
add eax [ebp+38h] +
adc edx [ebp+3Ch] +
test ebx ebx +
jnz loc_46FD56  +
mov ebx [esp+1Ch+arg_0] +
mov ecx [ebx+0Ch] +
test ecx ecx +
jz loc_46FDC2  +
mov ecx [ecx+0Ch] +
mov ebx [esp+1Ch+arg_C] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] edx +
mov [esp+1Ch+var_10] ebx +
mov [esp+1Ch+var_1C] eax +
call ecx  +
test eax eax +
mov ebx eax +
jnz loc_46FDC7  +
mov edx [esp+1Ch+arg_C] +
mov eax [esp+1Ch+arg_0] +
test edx edx +
jnz loc_46FE14  +
mov [eax+18h] esi +
mov [eax+1Ch] edi +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [esp+1Ch+arg_0] +
mov eax esi +
mov edx edi +
mov ecx [ebx+0Ch] +
test ecx ecx +
jnz loc_46FD75  +
mov ebx 0FFFFFFFFh +
mov ebp ds:__imp__errno +
call ebp  +
mov edi [eax] +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_46FC00  +
cmp edi 16h +
jz loc_46FE50  +
mov [esp+1Ch+var_1C] 1 +
call sub_44BAF0  +
call ebp  +
mov [eax] edi +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx esi +
xor eax eax +
or edx edi +
jnz loc_46FD15  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add [eax+18h] esi +
adc [eax+1Ch] edi +
add esp 1Ch +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [esp+1Ch+arg_C] +
mov eax esi +
test ebx ebx +
jnz loc_46FE45  +
mov edx [esp+1Ch+arg_0] +
xor eax [edx+18h] +
or eax [edx+1Ch] +
jnz loc_46FDB3  +
xor eax eax +
jmp loc_46FDAB  +
mov edx edi +
jmp loc_46FD6A  +
mov [esp+1Ch+var_1C] 12h +
call sub_44BAF0  +
mov eax ebx +
jmp loc_46FDAB  +
***
push ebx  +
sub esp 48h +
mov ebx [esp+50h] +
test byte ptr [ebx+2Bh] 4 +
jnz loc_46FEB0  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_46FEA5  +
mov eax [eax+18h] +
lea edx [esp+10h] +
mov [esp+4] edx +
mov [esp] ebx +
call eax  +
test eax eax +
jnz loc_46FEA5  +
mov eax [esp+34h] +
mov [ebx+20h] eax +
add esp 48h +
pop ebx  +
retn   +
***
add esp 48h +
xor eax eax +
pop ebx  +
retn   +
***
mov eax [ebx+20h] +
add esp 48h +
pop ebx  +
retn   +
***
sub esp 4Ch +
mov eax [esp+50h] +
mov edx [eax+0Ch] +
test edx edx +
jz loc_46FEF0  +
mov edx [edx+18h] +
lea ecx [esp+10h] +
mov [esp+4] ecx +
mov [esp] eax +
call edx  +
test eax eax +
jnz loc_46FEF0  +
mov eax [esp+28h] +
mov edx [esp+2Ch] +
add esp 4Ch +
retn   +
***
xor eax eax +
xor edx edx +
add esp 4Ch +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 18h +
mov eax [esp+2Ch] +
mov ecx [esp+30h] +
mov edi [esp+40h] +
mov ebp [esp+44h] +
mov edx [eax+0Ch] +
mov [esp] ecx +
mov [esp+4] edi +
mov [esp+8] ebp +
test edx edx +
jz loc_46FF35  +
mov edx [edx+1Ch] +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp edx  +
***
add esp 18h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [esp+8] +
xor eax eax +
jmp loc_46FF60  +
add eax 1 +
cmp eax 25h +
jz loc_46FF77  +
cmp ds:dword_500CA0[eax*8] edx +
jnz loc_46FF58  +
imul eax ds:dword_500CA4[eax*8] +
add eax offset dword_500FE0 +
retn   +
***
xor al al +
retn   +
***
sub esp 1Ch +
mov eax [esp+28h] +
movzx eax byte ptr [eax+4] +
cmp eax 24h +
jbe loc_46FFAB  +
mov [esp+8] eax +
mov eax [esp+20h] +
mov dword ptr [esp] offset aBInvalidAvrRel +
mov [esp+4] eax +
call off_4BFA04  +
xor eax eax +
imul eax eax +
mov edx [esp+24h] +
add eax offset dword_500FE0 +
mov [edx+0Ch] eax +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 4 +
mov ecx [edx+120h] +
mov ebx [ecx+3Ch] +
mov ebp [ecx+38h] +
mov edi [ebx+1Ch] +
mov ebx [edx+13Ch] +
mov [esp+4+var_4] edi +
test ebx ebx +
jz loc_470004  +
mov esi [edx+144h] +
xor ecx ecx +
cmp [esi] eax +
jnz loc_46FFFD  +
jmp loc_470011  +
cmp [esi+ecx*4] eax +
lea edi ds:0[ecx*4] +
jz loc_470013  +
add ecx 1 +
cmp ecx ebx +
jnz loc_46FFF1  +
add esp 4 +
mov eax 20000h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor edi edi +
mov eax [esp+4+var_4] +
mov edx [edx+140h] +
add eax ebp +
add eax [edx+edi] +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor eax eax +
retn   +
***
mov eax [esp+4] +
mov dword ptr [eax+14h] 0 +
mov eax 1 +
retn   +
***
jmp loc_470060  +
mov eax [esp+4] +
mov edx [esp+8] +
cmp dword ptr [eax+14h] 1 +
mov edx [edx+120h] +
sbb eax eax +
not eax  +
and eax 4 +
add [edx+24h] eax +
mov eax 1 +
retn   +
***
mov ebx [eax+0A0h] +
mov ecx [ebx+68h] +
mov edx [ebx+78h] +
test ecx ecx +
jnz loc_4700B7  +
test edx edx +
jz loc_4700B0  +
cmp [ebx+78h] edx +
jz loc_4700B0  +
mov [ebx+78h] edx +
add esp 28h +
mov eax edx +
pop ebx  +
retn   +
test edx edx +
jnz loc_4700A4  +
lea edx [ebx+48h] +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_14] 0 +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] ecx +
mov [esp+28h+var_28] eax +
call sub_475A20  +
mov edx eax +
jmp loc_4700A4  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov [esp] ebx +
call sub_4536C0  +
mov edx 2 +
lea ecx [eax-1] +
cmp ecx 6Ah +
ja loc_470124  +
movzx edx ds:byte_500A3F[eax] +
mov eax [ebx+0A0h] +
mov ecx 53h +
mov [eax+26h] cx +
mov eax [ebx+0A0h] +
and dword ptr [eax+20h] 0FFFFFF80h +
mov eax [ebx+0A0h] +
or [eax+20h] edx +
add esp 18h +
pop ebx  +
retn   +
***
push ebx  +
sub esp 18h +
mov eax [esp+20h] +
mov edx [eax+0A0h] +
movzx ecx word ptr [edx+26h] +
cmp cx 1057h +
jnz loc_4701A0  +
mov edx [edx+20h] +
mov ebx 2 +
and edx 7Fh +
lea ecx [edx-1] +
cmp ecx 6Ah +
ja loc_470183  +
movzx ebx ds:byte_5009BF[edx] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 44h +
mov [esp] eax +
call sub_453750  +
add esp 18h +
pop ebx  +
retn   +
***
cmp cx 53h +
mov ebx 2 +
jz loc_470169  +
jmp loc_470183  +
***
push ebx  +
sub esp 28h +
mov dword ptr [esp] 148h +
call sub_459D10  +
test eax eax +
mov ebx eax +
jz loc_470230  +
mov eax [esp+30h] +
mov dword ptr [esp+10h] 4 +
mov dword ptr [esp+0Ch] 48h +
mov dword ptr [esp+8] offset loc_470300 +
mov [esp+4] eax +
mov [esp] ebx +
call sub_469350  +
test eax eax +
jz loc_470222  +
lea eax [ebx+0FCh] +
mov dword ptr [esp+8] 18h +
mov dword ptr [esp+4] offset sub_4702A0 +
mov [esp] eax +
call sub_44DF20  +
test eax eax +
jz loc_470234  +
mov dword ptr [ebx+24h] offset loc_470250 +
mov eax ebx +
add esp 28h +
pop ebx  +
retn   +
***
mov [esp] ebx +
call free  +
xor eax eax +
jmp loc_47021D  +
***
xor eax eax +
jmp loc_47021D  +
***
mov eax [esp+30h] +
mov [esp] eax +
call sub_45CB60  +
xor eax eax +
jmp loc_47021D  +
***
push esi  +
push ebx  +
sub esp 14h +
mov esi [esp+20h] +
mov ebx [esi+9Ch] +
mov eax [ebx+140h] +
test eax eax +
jz loc_470271  +
mov [esp] eax +
call free  +
mov eax [ebx+144h] +
test eax eax +
jz loc_470283  +
mov [esp] eax +
call free  +
add ebx 0FCh +
mov [esp] ebx +
call sub_44DF50  +
mov [esp+20h] esi +
add esp 14h +
pop ebx  +
pop esi  +
jmp sub_45CB60  +
***
mov eax [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test eax eax +
jz loc_4702E0  +
mov edx [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_10] edx +
call sub_44E4A0  +
test eax eax +
jz loc_4702F4  +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] 18h +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
test eax eax +
jnz loc_4702B0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
jmp sub_45CA90  +
***
push esi  +
mov esi edx +
push ebx  +
sub esp 6Ch +
mov edi [eax+0A0h] +
mov [esp+70h+var_40] ecx +
mov ecx eax +
mov [esp+70h+var_6C] edx +
mov [esp+70h+var_70] ecx +
mov [esp+70h+var_50] edx +
mov [esp+70h+var_48] eax +
call sub_4799A0  +
mov [esp+70h+var_2C] eax +
mov eax [esi+8Ch] +
mov ecx [eax+30h] +
lea edx [eax+90h] +
mov [esp+70h+var_54] ecx +
xor ecx ecx +
cmp esi [esi+3Ch] +
mov esi [esi+24h] +
cmovnz ecx edx +
mov edx [ecx] +
mov [esp+70h+var_4C] esi +
test edx edx +
jz loc_470855  +
mov eax [esp+70h+arg_0] +
xor ebx ebx +
mov esi [esp+70h+var_40] +
lea ebp [eax+esi] +
mov eax ebp +
mov ebp edi +
mov edi eax +
nop   +
mov eax [ecx+8] +
lea esi [ebx+ebx*2] +
lea esi [eax+esi*8] +
mov eax [esi+4] +
cmp eax [esp+70h+var_40] +
jbe loc_470832  +
cmp eax edi +
jb loc_470860  +
mov [esp+70h+var_3C] eax +
mov eax [esp+70h+var_50] +
mov edi ebp +
mov eax [eax+8Ch] +
mov eax [eax+68h] +
xor ebx ebx +
mov ecx [esp+70h+var_40] +
mov [esp+70h+var_4C] eax +
mov eax [esp+70h+var_50] +
mov ebp [eax+4Ch] +
mov eax [esp+70h+var_3C] +
sub eax ecx +
cmp eax [esp+70h+arg_0] +
jz loc_470400  +
sub eax [esp+70h+arg_0] +
mov ebx [esp+70h+var_54] +
mov [esp+70h+var_68] eax +
mov eax [esp+70h+arg_0] +
add eax ecx +
add eax ebx +
mov [esp+70h+var_6C] eax +
mov eax ebx +
mov ebx 1 +
add eax ecx +
mov [esp+70h+var_70] eax +
call memmove  +
test esi esi +
jz loc_470BAB  +
mov eax [esi+8] +
cmp eax 2 +
jz loc_470A75  +
cmp eax 3 +
jz loc_47087E  +
cmp eax 1 +
jz loc_470A6D  +
xor eax eax +
mov esi [esp+70h+arg_0] +
mov [esp+70h+var_6C] eax +
mov eax [esp+70h+var_3C] +
mov [esp+70h+var_68] esi +
sub eax esi +
add eax [esp+70h+var_54] +
mov [esp+70h+var_70] eax +
call memset  +
test ebx ebx +
mov [esp+70h+var_30] 1 +
jz loc_470980  +
mov esi [esp+70h+var_4C] +
lea eax [ebp+ebp*2+0] +
lea esi [esi+eax*4] +
mov eax [esp+70h+var_50] +
mov eax [eax+8Ch] +
mov ebx [eax+68h] +
cmp esi ebx +
jbe loc_4704BB  +
mov [esp+70h+var_4C] edi +
mov ebp [esp+70h+var_40] +
mov edi [esp+70h+var_50] +
mov eax [edi+3Ch] +
mov ecx [ebx] +
mov edx [edi+38h] +
mov eax [eax+1Ch] +
cmp ebp ecx +
mov [esp+70h+var_54] eax +
jnb loc_4704B0  +
cmp [esp+70h+var_3C] ecx +
jbe loc_4704B0  +
mov eax ds:dword_51408C +
test eax eax +
jnz loc_4709ED  +
sub ecx [esp+70h+arg_0] +
mov [ebx] ecx +
add ebx 0Ch +
cmp esi ebx +
ja loc_470481  +
mov edi [esp+70h+var_4C] +
mov eax [esp+70h+var_48] +
xor ecx ecx +
lea esi [edi+48h] +
mov [esp+70h+var_28] esi +
mov eax [eax+64h] +
test eax eax +
mov [esp+70h+var_4C] eax +
jz loc_470655  +
mov ebp edi +
mov edi ecx +
nop   +
lea esi [esi+0] +
mov eax [esp+70h+var_4C] +
mov eax [eax+4Ch] +
test eax eax +
jz loc_470640  +
mov ecx [esp+70h+var_50] +
mov esi [esp+70h+var_40] +
mov ebx [esp+70h+arg_4] +
mov edx [ecx+3Ch] +
add esi [ecx+38h] +
mov ecx [edx+1Ch] +
mov [esp+70h+var_44] esi +
add [esp+70h+var_44] ecx +
mov ecx [esp+70h+var_44] +
mov edx ecx +
sub edx [esp+70h+arg_0] +
test ebx ebx +
cmovz edx ecx +
mov ecx [esp+70h+var_4C] +
mov [esp+70h+var_44] edx +
mov edx [ecx+8Ch] +
mov ebx [edx+68h] +
test ebx ebx +
jz loc_470A2B  +
lea eax [eax+eax*2] +
lea ecx [ebx+eax*4] +
cmp ebx ecx +
jnb loc_470640  +
mov esi ecx +
jmp loc_47055B  +
add ebx 0Ch +
cmp esi ebx +
jbe loc_470640  +
test edi edi +
mov edx [ebp+68h] +
jz loc_470890  +
mov eax [ebx+4] +
shr eax 8 +
cmp eax edx +
jnb loc_470550  +
lea eax [eax+eax*4] +
lea edx [edi+eax*4] +
mov eax [edx+10h] +
mov [esp+70h+var_54] edx +
mov [esp+70h+var_6C] eax +
mov eax [esp+70h+var_48] +
mov [esp+70h+var_70] eax +
call sub_478480  +
mov edx [esp+70h+var_54] +
cmp eax [esp+70h+var_50] +
mov ecx [edx] +
jnz loc_470550  +
mov edx [esp+70h+var_50] +
mov eax [edx+3Ch] +
mov edx [edx+38h] +
mov eax [eax+1Ch] +
mov [esp+70h+var_38] eax +
add ecx [esp+70h+var_38] +
lea eax [ecx+edx] +
mov [esp+70h+var_54] eax +
mov eax ds:dword_51408C +
test eax eax +
jnz loc_4708F0  +
movzx eax byte ptr [ebx+4] +
lea ecx [eax-1Eh] +
cmp ecx 2 +
jbe loc_47092D  +
mov eax [ebx+8] +
mov ecx [esp+70h+var_54] +
add ecx eax +
mov [esp+70h+var_34] ecx +
mov ecx [esp+70h+var_54] +
cmp [esp+70h+var_44] ecx +
jb loc_470550  +
mov ecx [esp+70h+var_34] +
cmp [esp+70h+var_44] ecx +
jnb loc_470550  +
add edx [esp+70h+var_38] +
add edx [esp+70h+var_3C] +
cmp edx ecx +
jb loc_470550  +
mov ecx ds:dword_51408C +
sub eax [esp+70h+arg_0] +
test ecx ecx +
mov [ebx+8] eax +
jz loc_470550  +
mov [esp+70h+var_70] offset aRelocationSAdd +
add ebx 0Ch +
call puts  +
cmp esi ebx +
ja loc_47055B  +
lea esi [esi+0] +
mov eax [esp+70h+var_4C] +
mov eax [eax+0Ch] +
test eax eax +
mov [esp+70h+var_4C] eax +
jnz loc_4704E0  +
mov edi ebp +
mov esi [edi+78h] +
test esi esi +
jz loc_470735  +
mov eax [edi+68h] +
lea edx [eax+eax*4] +
lea ebp [esi+edx*4] +
cmp esi ebp +
jnb loc_470738  +
movzx eax byte ptr [esp+70h+var_30] +
mov [esp+70h+var_4C] edi +
mov edi [esp+70h+var_2C] +
and eax 1 +
mov byte ptr [esp+70h+var_44] al +
mov eax [esp+70h+var_40] +
add eax [esp+70h+arg_0] +
mov [esp+70h+var_38] eax +
jmp loc_4706A1  +
add esi 14h +
cmp ebp esi +
jbe loc_470731  +
cmp [esi+10h] edi +
jnz loc_470696  +
mov eax [esi+4] +
mov ebx [esi] +
mov edx [esp+70h+var_30] +
mov [esp+70h+var_54] eax +
add eax ebx +
test edx edx +
jz loc_470A1D  +
xor edx edx +
cmp [esp+70h+var_3C] eax +
setnbe dl  +
cmp [esp+70h+var_40] ebx +
jb loc_470990  +
cmp [esp+70h+var_40] eax +
jnb loc_470990  +
test edx edx +
jz loc_470990  +
cmp eax [esp+70h+var_38] +
jb loc_470A85  +
mov ecx [esp+70h+var_54] +
sub ecx [esp+70h+arg_0] +
xor edx edx +
mov [esi+4] ecx +
mov ecx [esp+70h+var_30] +
test ecx ecx +
jz loc_4709DF  +
xor eax eax +
cmp [esp+70h+var_3C] ebx +
setnbe al  +
test eax eax +
jz loc_470696  +
test dl dl +
jz loc_470696  +
mov eax [esp+70h+arg_0] +
sub [esi] eax +
add esi 14h +
cmp ebp esi +
ja loc_4706A1  +
mov edi [esp+70h+var_4C] +
mov eax [edi+68h] +
mov esi [esp+70h+var_48] +
mov edx [esi+0A0h] +
mov ebp [edx+218h] +
mov edx [edi+60h] +
shr edx 4 +
sub edx eax +
lea eax [ebp+edx*4+0] +
cmp ebp eax +
mov esi eax +
jnb loc_470980  +
movzx eax byte ptr [esp+70h+var_30] +
mov ecx [esp+70h+var_50] +
and eax 1 +
mov byte ptr [esp+70h+var_4C] al +
mov eax [esp+70h+var_40] +
add eax [esp+70h+arg_0] +
mov [esp+70h+var_48] eax +
jmp loc_47078B  +
add ebp 4 +
cmp esi ebp +
jbe loc_470980  +
mov ebx [ebp+0] +
movzx eax byte ptr [ebx+0Ch] +
sub eax 3 +
cmp al 1 +
ja loc_470780  +
cmp [ebx+14h] ecx +
jnz loc_470780  +
mov eax [ebx+2Ch] +
mov edi [ebx+18h] +
mov edx [esp+70h+var_30] +
mov [esp+70h+var_50] eax +
add eax edi +
test edx edx +
mov [esp+70h+var_54] eax +
jz loc_470C22  +
cmp [esp+70h+var_3C] eax +
setnbe al  +
movzx eax al +
cmp [esp+70h+var_40] edi +
jb loc_4707D8  +
mov edx [esp+70h+var_54] +
cmp [esp+70h+var_40] edx +
jb loc_470AA1  +
mov eax [esp+70h+var_30] +
test eax eax +
jz loc_470C87  +
xor eax eax +
cmp [esp+70h+var_3C] edi +
setnbe al  +
mov edx eax +
cmp [esp+70h+var_40] edi +
setb al  +
and dl al +
jnz loc_470C6F  +
mov edx [esp+70h+var_30] +
test edx edx +
jz loc_470C14  +
xor edx edx +
cmp [esp+70h+var_3C] edi +
setnbe dl  +
test edx edx +
jz loc_470780  +
test al al +
jz loc_470780  +
mov eax [esp+70h+arg_0] +
sub [ebx+18h] eax +
jmp loc_470780  +
cmp eax edi +
jnb loc_47039E  +
add ebx 1 +
cmp [ecx] ebx +
ja loc_470380  +
mov eax [esp+70h+var_50] +
mov edi ebp +
mov esi [esp+70h+var_4C] +
mov eax [eax+8Ch] +
mov [esp+70h+var_3C] esi +
xor esi esi +
jmp loc_4703AE  +
mov [esp+70h+var_6C] 7A2h +
mov [esp+70h+var_70] offset a____Binutil_26 +
mov [esp+70h+var_44] ecx +
call sub_44BA40  +
mov ecx [esp+70h+var_44] +
jmp loc_47083A  +
mov eax [esi+10h] +
mov ecx [esp+70h+arg_0] +
add [esi+14h] ecx +
jmp loc_470428  +
test edx edx +
jz loc_470550  +
mov edi [ebp+78h] +
test edi edi +
jnz loc_470566  +
mov eax [esp+70h+var_28] +
mov [esp+70h+var_58] 0 +
mov [esp+70h+var_5C] 0 +
mov [esp+70h+var_60] 0 +
mov [esp+70h+var_6C] eax +
mov eax [esp+70h+var_48] +
mov [esp+70h+var_64] 0 +
mov [esp+70h+var_68] edx +
mov [esp+70h+var_70] eax +
call sub_475A20  +
test eax eax +
mov edi eax +
jnz loc_470BC6  +
add esp 6Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+70h+var_44] +
mov ecx [esp+70h+var_54] +
mov [esp+70h+var_34] edx +
mov [esp+70h+var_64] eax +
mov eax [ebx+8] +
mov [esp+70h+var_6C] ecx +
mov [esp+70h+var_70] offset aCheckingIfTheR +
add eax ecx +
mov [esp+70h+var_68] eax +
call printf  +
movzx eax byte ptr [ebx+4] +
mov edx [esp+70h+var_34] +
lea ecx [eax-1Eh] +
cmp ecx 2 +
ja loc_4705D2  +
mov ecx [esp+70h+var_4C] +
mov edx [ecx+8Ch] +
mov edx [edx+30h] +
test edx edx +
mov [esp+70h+var_14] edx +
jz loc_470C35  +
add edx [ebx] +
cmp eax 1Fh +
mov [esp+70h+var_34] edx +
jz loc_470B8F  +
cmp eax 20h +
jz loc_470B73  +
cmp eax 1Eh +
jz loc_470ACC  +
mov [esp+70h+var_6C] 6F0h +
mov [esp+70h+var_70] offset a____Binutil_26 +
call sub_44BA40  +
jmp loc_470550  +
add esp 6Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+70h+var_30] +
test edx edx +
jz loc_470A5F  +
xor ecx ecx +
cmp [esp+70h+var_3C] ebx +
setnbe cl  +
cmp [esp+70h+var_40] ebx +
setb dl  +
and cl dl +
jz loc_4706FC  +
cmp [esp+70h+var_3C] eax +
setbe dl  +
and dl byte ptr [esp+70h+var_44] +
jz loc_470A7C  +
mov ecx [esp+70h+var_54] +
add ecx [esp+70h+arg_0] +
mov [esi+4] ecx +
mov ecx [esp+70h+var_30] +
test ecx ecx +
jnz loc_470708  +
xor eax eax +
cmp [esp+70h+var_3C] ebx +
setnb al  +
jmp loc_470711  +
mov eax ecx +
sub eax [esp+70h+arg_0] +
mov [esp+70h+var_68] ecx +
mov [esp+70h+var_70] offset aRelocationAtAd +
mov [esp+70h+var_64] eax +
mov eax [esp+70h+var_54] +
add eax edx +
add eax ecx +
mov [esp+70h+var_6C] eax +
call printf  +
mov ecx [ebx] +
jmp loc_4704A7  +
xor edx edx +
cmp [esp+70h+var_3C] eax +
setnb dl  +
jmp loc_4706C6  +
mov eax [esp+70h+var_48] +
mov esi ecx +
mov [esp+70h+var_60] 1 +
mov [esp+70h+var_64] 0 +
mov [esp+70h+var_68] 0 +
mov [esp+70h+var_6C] ecx +
mov [esp+70h+var_70] eax +
call sub_462810  +
mov ebx eax +
mov eax [esi+4Ch] +
jmp loc_47053A  +
xor ecx ecx +
cmp [esp+70h+var_3C] ebx +
setnb cl  +
jmp loc_4709A5  +
mov eax [esi+0Ch] +
jmp loc_470428  +
xor eax eax +
jmp loc_470881  +
mov edx ecx +
nop   +
jmp loc_4706FC  +
mov [esp+70h+var_6C] 864h +
mov [esp+70h+var_70] offset a____Binutil_26 +
call sub_44BA40  +
mov ecx [esi+4] +
jmp loc_4706F0  +
test eax eax +
jz loc_4707D8  +
mov eax [esp+70h+var_48] +
cmp [esp+70h+var_54] eax +
jb loc_470C97  +
mov eax [esp+70h+var_50] +
sub eax [esp+70h+arg_0] +
mov [ebx+2Ch] eax +
xor eax eax +
jmp loc_4707FE  +
movzx eax byte ptr [edx] +
add eax 0FFFFFF80h +
movzx eax al +
add eax 0FFFFFF80h +
mov [esp+70h+var_38] eax +
mov eax [ebx+8] +
mov ecx [esp+70h+var_54] +
mov [esp+70h+var_24] eax +
add ecx eax +
mov edx ecx +
mov eax ecx +
sub edx [esp+70h+var_38] +
cmp edx ecx +
cmovnb ecx edx +
cmp [esp+70h+var_44] ecx +
jnb loc_470550  +
cmp edx eax +
cmova edx eax +
cmp [esp+70h+var_44] edx +
jb loc_470550  +
mov edx [esp+70h+var_38] +
mov ecx [esp+70h+arg_0] +
add ecx edx +
sub edx [esp+70h+arg_0] +
cmp [esp+70h+var_38] 0 +
cmovns ecx edx +
cmp [esp+70h+var_44] eax +
jnb loc_470B3F  +
mov eax [esp+70h+var_24] +
sub eax [esp+70h+arg_0] +
mov [ebx+8] eax +
movzx eax byte ptr [ebx+4] +
cmp eax 1Fh +
jz loc_470BF5  +
cmp eax 20h +
jz loc_470BD9  +
cmp eax 1Eh +
jz loc_470BCE  +
mov [esp+70h+var_6C] 723h +
mov [esp+70h+var_70] offset a____Binutil_26 +
call sub_44BA40  +
jmp loc_470550  +
mov eax [esp+70h+var_48] +
mov ecx [esp+70h+var_34] +
mov eax [eax+4] +
mov eax [eax+2Ch] +
mov [esp+70h+var_70] ecx +
call eax  +
mov [esp+70h+var_38] eax +
jmp loc_470ADC  +
mov eax [esp+70h+var_48] +
mov ecx [esp+70h+var_34] +
mov eax [eax+4] +
mov eax [eax+38h] +
mov [esp+70h+var_70] ecx +
call eax  +
mov [esp+70h+var_38] eax +
jmp loc_470ADC  +
mov eax [esp+70h+var_50] +
mov esi [esp+70h+arg_0] +
mov [esp+70h+var_30] 0 +
sub [eax+24h] esi +
jmp loc_470459  +
mov edx [ebp+68h] +
jmp loc_470566  +
mov eax [esp+70h+var_34] +
mov [eax] cl +
jmp loc_470550  +
mov eax [esp+70h+var_48] +
mov edx [esp+70h+var_34] +
mov eax [eax+4] +
mov eax [eax+30h] +
mov [esp+70h+var_6C] edx +
mov [esp+70h+var_70] ecx +
call eax  +
jmp loc_470550  +
mov eax [esp+70h+var_48] +
movzx ecx cx +
mov edx [esp+70h+var_34] +
mov eax [eax+4] +
mov eax [eax+3Ch] +
mov [esp+70h+var_6C] edx +
mov [esp+70h+var_70] ecx +
call eax  +
jmp loc_470550  +
xor edx edx +
cmp [esp+70h+var_3C] edi +
setnb dl  +
jmp loc_470813  +
mov eax [esp+70h+var_54] +
cmp [esp+70h+var_3C] eax +
setnb al  +
movzx eax al +
jmp loc_4707C4  +
lea eax [esp+70h+var_14] +
mov [esp+70h+var_68] eax +
mov eax [esp+70h+var_48] +
mov [esp+70h+var_6C] ecx +
mov [esp+70h+var_70] eax +
call sub_44DE10  +
test eax eax +
jz loc_470550  +
mov eax [esp+70h+var_4C] +
mov edx [esp+70h+var_14] +
mov eax [eax+8Ch] +
mov [eax+30h] edx +
movzx eax byte ptr [ebx+4] +
jmp loc_470946  +
mov eax [esp+70h+var_54] +
cmp [esp+70h+var_3C] eax +
setbe al  +
and al byte ptr [esp+70h+var_4C] +
jnz loc_470CBB  +
mov eax edx +
jmp loc_4707FE  +
xor eax eax +
cmp [esp+70h+var_3C] edi +
setnb al  +
mov edx eax +
jmp loc_4707EF  +
mov [esp+70h+var_6C] 886h +
mov [esp+70h+var_70] offset a____Binutil_26 +
mov [esp+70h+var_54] ecx +
call sub_44BA40  +
mov eax [ebx+2Ch] +
mov ecx [esp+70h+var_54] +
jmp loc_470ABB  +
mov edx [esp+70h+var_50] +
add edx [esp+70h+arg_0] +
mov [ebx+2Ch] edx +
jmp loc_4707FE  +
***
push ebp  +
push edi  +
push esi  +
mov esi offset off_501000 +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
mov edi ds:_stricmp +
mov ebp [esp+34h] +
jmp loc_470CFB  +
add ebx 1 +
add esi 34h +
cmp ebx 25h +
jz loc_470D20  +
mov eax [esi] +
test eax eax +
jz loc_470CF0  +
mov [esp+4] ebp +
mov [esp] eax +
call edi  +
test eax eax +
jnz loc_470CF0  +
imul eax ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
add eax offset dword_500FE0 +
pop ebp  +
retn   +
***
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov eax [ebx+8Ch] +
test eax eax +
jz loc_470D60  +
mov [esp+24h] ebx +
mov [esp+20h] esi +
add esp 14h +
pop ebx  +
pop esi  +
jmp loc_478620  +
***
mov dword ptr [esp+4] 0A0h +
mov [esp] esi +
call sub_458B60  +
test eax eax +
jz loc_470D80  +
mov [ebx+8Ch] eax +
jmp loc_470D47  +
***
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov ecx [esp+arg_4] +
mov eax [ebx+4] +
mov edx [ecx+4] +
cmp eax edx +
jz loc_470DA7  +
sub eax edx +
pop ebx  +
retn   +
mov eax [ebx] +
mov edx [ecx] +
cmp eax edx +
jz loc_470DB7  +
mov eax [eax+1Ch] +
sub eax [edx+1Ch] +
pop ebx  +
retn   +
mov eax [ebx+8] +
sub eax [ecx+8] +
pop ebx  +
retn   +
***
mov ecx [esp+arg_4] +
mov eax [ebx] +
mov edx [ecx] +
cmp eax edx +
jz loc_470DD5  +
sub eax edx +
pop ebx  +
retn   +
mov eax [ebx+4] +
mov edx [ecx+4] +
cmp eax edx +
jnz loc_470DD1  +
mov eax [ebx+8] +
sub eax [ecx+8] +
pop ebx  +
retn   +
***
mov edx [eax+4] +
test edx edx +
jz loc_470E00  +
pop ebx  +
retn   +
mov edx [esp+arg_4] +
test byte ptr [edx+14h] 11h +
jz loc_470DFC  +
mov ecx [esp+arg_4] +
mov edx [eax] +
mov ecx [ecx+1Ch] +
cmp edx ecx +
jb loc_470DFC  +
mov ebx [esp+arg_4] +
add ecx [ebx+24h] +
cmp edx ecx +
jnb loc_470DFC  +
mov [eax+4] ebx +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
mov edx [esi+14h] +
test edx edx +
jz loc_470E56  +
mov eax [esp+1Ch+arg_4] +
mov ebx [eax+1Ch] +
cmp dword ptr [ebx+2Ch] 4 +
jz loc_470E60  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+1Ch+arg_0] +
mov ecx [esp+1Ch+arg_0] +
mov esi [eax+10h] +
mov eax [ebx+120h] +
mov edx [eax+24h] +
mov edi [eax+6Ch] +
mov ebp [eax+94h] +
mov eax ds:dword_514088 +
mov [ecx+0Ch] edx +
add edi edx +
mov [esp+1Ch+var_10] edi +
test eax eax +
jz loc_470EA3  +
mov [esp+1Ch+var_14] edx +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] offset aBuildingOneStu +
call printf  +
test esi 1 +
jnz loc_470E54  +
mov eax [ebp+4] +
mov edi esi +
shr edi 1 +
mov ecx edi +
and ecx 10000h +
mov edx [eax+3Ch] +
mov eax [esp+1Ch+var_10] +
mov [esp+1Ch+var_18] eax +
lea eax ds:0[edi*8] +
movzx edi di +
and eax 1F00000h +
or eax ecx +
shr eax 10h +
or eax 940Ch +
mov [esp+1Ch+var_1C] eax +
call edx  +
mov eax [ebp+4] +
mov ecx [esp+1Ch+var_10] +
mov eax [eax+3Ch] +
lea edx [ecx+2] +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] edi +
call eax  +
mov eax [ebx+120h] +
mov edx [ebx+138h] +
add dword ptr [eax+24h] 4 +
mov eax 1 +
lea ecx [edx+1] +
cmp ecx [ebx+13Ch] +
ja loc_470E56  +
mov edi [esp+1Ch+arg_0] +
add edx 40000000h +
mov [ebx+138h] ecx +
mov ecx [ebx+140h] +
mov edi [edi+0Ch] +
mov [ecx+edx*4] edi +
mov ecx [ebx+144h] +
mov [ecx+edx*4] esi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov edi [esp+6Ch+arg_4] +
mov ebp [esp+6Ch+arg_14] +
mov eax [edi+1Ch] +
cmp dword ptr [eax+2Ch] 4 +
mov [esp+6Ch+var_2C] eax +
jz loc_470F7C  +
***
add esp 6Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+6Ch+arg_8] +
mov eax [eax+0A0h] +
mov [esp+6Ch+var_40] eax +
mov eax [eax+218h] +
mov [esp+6Ch+var_30] eax +
mov eax [esp+6Ch+arg_C] +
mov eax [eax+4Ch] +
lea eax [eax+eax*2] +
lea eax [ebp+eax*4+0] +
cmp ebp eax +
mov [esp+6Ch+var_34] eax +
jnb loc_47118D  +
***
mov edx [ebp+4] +
mov [esp+arg_58] 0 +
movzx esi dl +
mov eax edx +
imul esi esi +
shr eax 8 +
lea ecx dword_500FE0[esi] +
mov [esp+arg_30] ecx +
mov ecx [esp+arg_28] +
mov edx [ecx+68h] +
cmp eax edx +
jb loc_471A20  +
mov ecx [esp+arg_38] +
test ecx ecx +
jz loc_470F72  +
sub eax edx +
mov ebx [ecx+eax*4] +
mov eax [edi+28h] +
test eax eax +
jz loc_471013  +
mov eax [esp+arg_88] +
test byte ptr [eax+15h] 20h +
jz loc_471013  +
jmp loc_471AB6  +
***
mov ebx [ebx+14h] +
movzx eax byte ptr [ebx+0Ch] +
lea edx [eax-6] +
cmp dl 1 +
jbe loc_471010  +
lea edx [eax-3] +
cmp dl 1 +
jbe loc_471A96  +
cmp al 2 +
jz loc_4710A5  +
movzx edx byte ptr [edi+2] +
and edx 6 +
cmp dl 2 +
jz loc_471AD4  +
movzx eax byte ptr [edi] +
and eax 3 +
cmp al 2 +
jz loc_4710A5  +
cmp dl 6 +
mov eax 1 +
jz loc_471062  +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
test al al +
setnz al  +
movzx eax al +
mov edx [edi+18h] +
mov ecx [edx+18h] +
mov edx [ebx+4] +
mov [esp+arg_24] ecx +
mov ecx [ebp+0] +
mov [esp+arg_10] eax +
mov eax [esp+arg_88] +
mov [esp+arg_0] edx +
mov [esp+0] edi +
mov [esp+arg_C] ecx +
mov [esp+arg_8] eax +
mov eax [esp+arg_84] +
mov [esp+arg_4] eax +
mov eax [esp+arg_24] +
call eax  +
test eax eax +
jz loc_470F72  +
mov eax [esp+arg_58] +
xor edx edx +
mov ecx [ebx+4] +
mov [esp+arg_2C] ecx +
test eax eax +
jz loc_4710C6  +
cmp eax offset off_4BFB90 +
jz loc_4710C6  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_471120  +
movzx eax byte ptr [edi] +
and eax 3 +
cmp al 2 +
jz sub_471180  +
mov eax [ebp+0] +
mov [esp+arg_24] eax +
mov eax [esp+arg_3C] +
mov eax [eax+124h] +
mov [esp+arg_40] eax +
mov eax [esp+arg_88] +
mov ecx [eax+3Ch] +
mov eax [eax+38h] +
add eax [ecx+1Ch] +
mov ecx [esp+arg_24] +
add ecx eax +
cmp ds:dword_500FE0[esi] 23h +
ja sub_4712A1  +
mov esi ds:dword_500FE0[esi] +
jmp ds:off_500488[esi*4]  +
***
add ebp 0Ch +
add edx [ebp+8] +
mov eax 2 +
mov esi [esp+arg_24] +
movzx ecx dx +
cmp ecx 1Fh +
mov [esp+arg_40] edx +
jbe loc_471B97  +
***
mov edx offset aInternalErrorO +
mov eax [edi+18h] +
mov edx offset aInternalErrorD +
mov eax [edi+18h] +
mov edx offset aInternalErrorU +
mov eax [ebp+8] +
mov ecx [ebp+8] +
mov ecx [ebp+8] +
mov eax [esp+arg_24] +
mov eax [esp+arg_24] +
mov ebx [ebp+8] +
mov ebx [ebp+8] +
mov esi [ebp+8] +
mov esi [ebp+8] +
add esi edx +
movzx eax si +
cmp eax 3Fh +
jg loc_471A10  +
test esi esi +
js loc_471A10  +
mov eax [esp+arg_84] +
add ebp 0Ch +
mov ebx [esp+arg_24] +
add ebx [esp+arg_8C] +
mov eax [eax+4] +
mov eax [eax+34h] +
mov [esp+0] ebx +
call eax  +
mov edx esi +
and edx 20h +
shl edx 8 +
mov ecx eax +
mov eax [esp+arg_84] +
and ecx 0D3F8h +
mov eax [eax+4] +
mov eax [eax+3Ch] +
mov [esp+arg_0] ebx +
mov [esp+arg_24] eax +
mov eax esi +
and esi 7 +
and eax 18h +
shl eax 7 +
or eax edx +
or eax esi +
or ecx eax +
mov eax [esp+arg_24] +
mov [esp+0] ecx +
call eax  +
cmp [esp+arg_34] ebp +
ja loc_470FB4  +
jmp loc_47118D  +
***
mov esi [ebp+8] +
add edx [ebp+8] +
add edx [ebp+8] +
add edx [ebp+8] +
add edx [ebp+8] +
add edx [ebp+8] +
mov esi [ebp+8] +
mov eax [esp+arg_24] +
add edx [ebp+8] +
add edx [ebp+8] +
mov ebx [ebp+8] +
add edx [ebp+8] +
add edx [ebp+8] +
mov esi [ebp+8] +
mov eax [esp+arg_3C] +
mov esi [esp-7Ch+arg_A0] +
mov esi [esp+arg_24] +
sub edx esi +
add edx [ebp+8] +
lea ecx [edx-2] +
sub ecx eax +
mov eax 2 +
test cl 1 +
jnz loc_4711B6  +
lea edx [ecx+80h] +
mov al 1 +
cmp edx 0FFh +
ja loc_4711B6  +
mov eax [esp+arg_84] +
mov ebx [esp+arg_8C] +
mov [esp+arg_2C] ecx +
mov eax [eax+4] +
add ebx esi +
mov eax [eax+34h] +
mov [esp+0] ebx +
call eax  +
mov esi [esp+arg_84] +
mov ecx [esp+arg_2C] +
mov edx [esi+4] +
shl ecx 2 +
and eax 0FC07h +
and ecx 3F8h +
or eax ecx +
mov edx [edx+3Ch] +
mov [esp+arg_0] ebx +
mov [esp+0] eax +
call edx  +
jmp sub_471180  +
***
jz loc_47160C  +
mov eax esi +
neg eax  +
movzx eax ax +
add eax 0FFFFFF80h +
jle loc_47160C  +
***
mov esi [esp+28h] +
mov eax 1 +
jmp loc_4711B6  +
***
mov ecx [esp-7Ch+arg_110] +
lea edx [eax+eax*4] +
lea ebx [ecx+edx*4] +
mov ecx [esp-7Ch+arg_114] +
mov eax [ecx+eax*4] +
mov [esp-7Ch+arg_84] ebp +
mov [esp-7Ch+arg_7C] ebx +
mov [esp-7Ch+arg_D4] eax +
lea eax [esp-7Ch+arg_D4] +
mov [esp-7Ch+arg_80] eax +
mov eax [esp-7Ch+arg_F8] +
mov [esp-7Ch+arg_78] eax +
call sub_482F10  +
mov ecx [esp-7Ch+arg_A4] +
mov ecx [ecx+64h] +
mov [esp-7Ch+arg_A0] eax +
mov eax [ebx+8] +
mov [esp-7Ch+arg_7C] ecx +
mov [esp-7Ch+arg_80] eax +
mov eax [esp-7Ch+arg_100] +
mov [esp-7Ch+arg_78] eax +
call sub_475820  +
mov edx [esp-7Ch+arg_A0] +
test eax eax +
mov [esp-7Ch+arg_A8] eax +
mov eax [esp-7Ch+arg_D4] +
jz loc_471AF5  +
xor ebx ebx +
jmp loc_4710B2  +
mov eax [ebx+14h] +
test eax eax +
mov [esp+arg_58] eax +
jz loc_471B02  +
mov edx [eax+3Ch] +
test edx edx +
jz loc_471B0B  +
mov edx [edx+1Ch] +
add edx [ebx+18h] +
add edx [eax+38h] +
jmp loc_4710AB  +
mov eax [esp+arg_84] +
mov [esp+arg_4] ebx +
mov [esp+0] edi +
mov [esp+arg_0] eax +
call sub_450700  +
mov ebx eax +
jmp loc_471013  +
movzx eax byte ptr [ebx+31h] +
and eax 3 +
jz loc_4710A5  +
movzx edx byte ptr [edi] +
and edx 3 +
cmp dl 2 +
jnz loc_47105A  +
jmp loc_4710A5  +
mov ecx [eax] +
xor ebx ebx +
mov [esp-7Ch+arg_A8] ecx +
jmp loc_4710B6  +
xor eax eax +
xor edx edx +
jmp loc_4710AB  +
xor edx edx +
jmp loc_4710AB  +
mov eax [esp+arg_88] +
test byte ptr [eax+15h] 20h +
jz loc_471172  +
mov eax [eax+3Ch] +
mov [esp+0] eax +
call sub_478C10  +
mov ecx [eax+18h] +
mov edx [eax+28h] +
cmp ecx edx +
jbe loc_471172  +
sub ecx edx +
mov [eax+18h] ecx +
mov eax [esp+arg_88] +
mov [esp+0] eax +
call sub_478C10  +
mov edx [eax+28h] +
sub [eax+18h] edx +
mov eax [esp+arg_34] +
mov [esp+0] ebp +
sub eax ebp +
sar eax 2 +
imul eax eax +
lea eax [eax+eax*2-3] +
shl eax 2 +
mov [esp+arg_4] eax +
lea eax [ebp+0Ch] +
sub ebp 0Ch +
mov [esp+arg_0] eax +
call memmove  +
mov eax [esp+arg_88] +
sub [esp+arg_34] 0Ch +
sub dword ptr [eax+4Ch] 1 +
jmp sub_471180  +
***
mov edx 1 +
shl edx cl +
test ds:dword_514084 edx +
jnz loc_4711B6  +
mov eax [esp+arg_84] +
mov ebx [esp+arg_8C] +
mov eax [eax+4] +
add ebx esi +
mov eax [eax+34h] +
mov [esp+0] ebx +
call eax  +
mov esi [esp+arg_84] +
mov ecx [esp+arg_40] +
mov edx [esi+4] +
shl ecx 3 +
and eax 0FF07h +
movzx ecx cl +
or eax ecx +
mov edx [edx+3Ch] +
mov [esp+arg_0] ebx +
mov [esp+0] eax +
call edx  +
jmp sub_471180  +
***
mov edx [esp+40h] +
mov eax esi +
mov [esp+4Ch] ecx +
call sub_46FFC0  +
mov ecx [esp+4Ch] +
mov esi eax +
mov eax ds:dword_514088 +
test eax eax +
jz loc_471C2B  +
mov eax [esp+48h] +
mov [esp+0Ch] ecx +
mov [esp+4] esi +
mov dword ptr [esp] offset aLdUsingJumpStu +
mov [esp+8] eax +
call printf  +
mov eax esi +
sub eax [esp+44h] +
cmp eax 1FFFFh +
ja loc_47142A  +
jmp loc_47146E  +
***
mov edx [esp+40h] +
mov eax esi +
mov [esp+4Ch] ecx +
call sub_46FFC0  +
mov ecx ds:dword_514088 +
test ecx ecx +
mov ecx [esp+4Ch] +
mov esi eax +
jz loc_471C7C  +
mov eax [esp+48h] +
mov [esp+0Ch] ecx +
mov [esp+4] esi +
mov dword ptr [esp] offset aLdUsingJumpStu +
mov [esp+8] eax +
call printf  +
mov eax esi +
sub eax [esp+44h] +
cmp eax 1FFFFh +
ja loc_47142A  +
jmp loc_47141E  +
***
mov eax [esp-7Ch+arg_100] +
and esi 0FFFh +
mov ebx [esp-7Ch+arg_A0] +
add ebx [esp-7Ch+arg_108] +
mov eax [eax+4] +
mov eax [eax+34h] +
mov [esp-7Ch+arg_78] ebx +
call eax  +
mov ecx [esp-7Ch+arg_100] +
mov edx [ecx+4] +
and eax 0F000h +
or eax esi +
mov edx [edx+3Ch] +
mov [esp-7Ch+arg_7C] ebx +
mov [esp-7Ch+arg_78] eax +
call edx  +
jmp sub_471180  +
***
mov eax [esp+48h] +
mov [esp+0Ch] ecx +
mov [esp+4] esi +
mov dword ptr [esp] offset aLdUsingJumpStu +
mov [esp+8] eax +
call printf  +
jmp loc_4718B7  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+60h] +
mov edx [esp+70h] +
mov esi [esp+6Ch] +
mov edi [esp+74h] +
mov [esp+20h] eax +
mov eax [esp+64h] +
test edx edx +
mov [esp+24h] eax +
mov eax [esp+68h] +
mov ebx [eax+10h] +
mov ebp [ebx+94h] +
jnz loc_471D75  +
mov ecx [ebx+8Ch] +
mov ecx [ecx+30h] +
test ecx ecx +
jz loc_471D75  +
mov eax [ebp+0A0h] +
mov [esp+28h] eax +
mov eax [ebx+24h] +
mov [esp+4] ecx +
mov [esp] esi +
mov [esp+8] eax +
call memcpy  +
test byte ptr [ebx+14h] 4 +
jz loc_471D6B  +
mov eax [ebx+4Ch] +
test eax eax +
jnz loc_471DA1  +
mov eax esi +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+68h] eax +
mov eax [esp+24h] +
mov [esp+74h] edi +
mov [esp+6Ch] esi +
mov [esp+70h] edx +
mov [esp+64h] eax +
mov eax [esp+20h] +
mov [esp+60h] eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_44F830  +
***
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+4] ebx +
mov [esp] ebp +
call sub_462810  +
test eax eax +
mov [esp+30h] eax +
jz loc_471FC8  +
mov eax [esp+28h] +
mov edi [eax+68h] +
test edi edi +
jz loc_471E50  +
mov eax [eax+78h] +
test eax eax +
mov [esp+2Ch] eax +
jz loc_471F79  +
shl edi 2 +
mov [esp] edi +
call sub_459B80  +
test edi edi +
mov [esp+34h] eax +
jz loc_471E68  +
test eax eax +
jnz loc_471E68  +
mov eax [esp+2Ch] +
test eax eax +
jz loc_471E1B  +
mov edx [esp+28h] +
cmp [edx+78h] eax +
jz loc_471E1B  +
mov [esp] eax +
call free  +
mov esi [esp+30h] +
test esi esi +
jz loc_471FC8  +
mov edx [ebx+8Ch] +
xor eax eax +
cmp [edx+68h] esi +
jz loc_471D6D  +
mov [esp] esi +
mov [esp+20h] eax +
call free  +
mov eax [esp+20h] +
jmp loc_471D6D  +
***
mov dword ptr [esp] 0 +
call sub_459B80  +
mov dword ptr [esp+2Ch] 0 +
mov [esp+34h] eax +
mov eax [esp+28h] +
mov edx [esp+2Ch] +
mov eax [eax+68h] +
mov edi edx +
lea eax [eax+eax*4] +
lea eax [edx+eax*4] +
mov ecx eax +
mov eax edx +
mov edx [esp+34h] +
cmp ecx eax +
jbe loc_471ED5  +
mov [esp+38h] ebx +
mov ebx edx +
mov [esp+3Ch] esi +
mov esi ecx +
mov ecx [edi+10h] +
mov eax offset off_4BFAE8 +
test ecx ecx +
jz loc_471EC0  +
cmp ecx 0FFFFFFF1h +
mov eax offset off_4BFB90 +
jz loc_471EC0  +
cmp ecx 0FFFFFFF2h +
mov eax offset off_4BFA40 +
jz loc_471EC0  +
mov [esp+4] ecx +
mov [esp] ebp +
call sub_478480  +
nop   +
add edi 14h +
add ebx 4 +
mov [ebx-4] eax +
cmp esi edi +
ja loc_471E93  +
mov ebx [esp+38h] +
mov esi [esp+3Ch] +
mov eax [esp+34h] +
mov [esp+10h] esi +
mov [esp+0Ch] ebx +
mov [esp+8] ebp +
mov [esp+1Ch] eax +
mov eax [esp+2Ch] +
mov [esp+18h] eax +
mov eax [esp+30h] +
mov [esp+14h] eax +
mov eax [esp+24h] +
mov [esp+4] eax +
mov eax [esp+20h] +
mov [esp] eax +
call sub_470F50  +
test eax eax +
jz loc_471F60  +
mov eax [esp+34h] +
test eax eax +
jz loc_471F21  +
mov [esp] eax +
call free  +
mov eax [esp+2Ch] +
test eax eax +
jz loc_471F3A  +
mov edx [esp+28h] +
cmp [edx+78h] eax +
jz loc_471F3A  +
mov [esp] eax +
call free  +
mov eax [ebx+8Ch] +
mov edx [esp+30h] +
cmp [eax+68h] edx +
jz loc_471D6B  +
mov [esp] edx +
call free  +
jmp loc_471D6B  +
***
mov eax [esp+34h] +
test eax eax +
jz loc_471E02  +
mov [esp] eax +
call free  +
jmp loc_471E02  +
***
mov eax [esp+28h] +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+10h] 0 +
add eax 48h +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] edi +
mov [esp+4] eax +
mov [esp] ebp +
call sub_475A20  +
test eax eax +
mov [esp+2Ch] eax +
jz loc_471E1B  +
mov eax [esp+28h] +
mov edi [eax+68h] +
jmp loc_471DEB  +
***
xor eax eax +
jmp loc_471D6D  +
***
mov eax [esp+arg_0] +
mov eax [eax+1Ch] +
cmp dword ptr [eax+2Ch] 4 +
jz loc_471FE0  +
retn   +
mov edx [esp+arg_8] +
mov [eax+120h] edx +
mov edx [esp+arg_4] +
mov [eax+11Ch] edx +
mov edx [esp+arg_C] +
mov [eax+118h] edx +
mov eax [esp+arg_14] +
mov ds:dword_51408C eax +
mov eax [esp+arg_10] +
mov ds:dword_514088 eax +
mov eax [esp+arg_18] +
mov dword_4BFEB4 eax +
mov eax [esp+arg_1C] +
mov dword_4BFEB0 eax +
mov eax [esp+arg_20] +
mov ds:dword_514084 eax +
retn   +
***
push ebx  +
sub esp 14h +
mov edx [esp+18h+arg_4] +
mov esi [edx+1Ch] +
cmp dword ptr [esi+2Ch] 4 +
jz loc_47204A  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov ecx [esi+118h] +
test ecx ecx +
jnz loc_472044  +
mov edx [edx+34h] +
xor ecx ecx +
test edx edx +
jz loc_472081  +
lea esi [esi+0] +
mov eax [edx+64h] +
add ecx 1 +
test eax eax +
jz loc_472077  +
lea esi [esi+0] +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_472070  +
mov edx [edx+9Ch] +
test edx edx +
jnz loc_472060  +
mov eax [esp+18h+arg_0] +
mov [esi+128h] ecx +
mov eax [eax+64h] +
test eax eax +
jz loc_47210A  +
xor ebx ebx +
mov edx [eax+8] +
mov eax [eax+0Ch] +
cmp ebx edx +
cmovb ebx edx +
test eax eax +
jnz loc_472094  +
lea eax ds:4[ebx*4] +
mov [esi+12Ch] ebx +
mov [esp+18h+var_18] eax +
call sub_459B80  +
test eax eax +
mov [esi+130h] eax +
jz loc_472113  +
lea edx [eax+ebx*4] +
not ebx  +
lea ecx [edx+ebx*4] +
lea esi [esi+0] +
mov dword ptr [edx] offset off_4BFB90 +
sub edx 4 +
cmp edx ecx +
jnz loc_4720D0  +
mov esi [esp+18h+arg_0] +
mov edx [esi+64h] +
test edx edx +
jz loc_4720FF  +
test byte ptr [edx+14h] 10h +
jz loc_4720F8  +
mov ecx [edx+8] +
mov dword ptr [eax+ecx*4] 0 +
mov edx [edx+0Ch] +
test edx edx +
jnz loc_4720E8  +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
mov eax 4 +
xor ebx ebx +
jmp loc_4720AA  +
mov eax 0FFFFFFFFh +
jmp loc_472044  +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov eax [esp+5Ch+arg_4] +
mov eax [eax+1Ch] +
cmp dword ptr [eax+2Ch] 4 +
mov [esp+5Ch+var_38] eax +
jz loc_472142  +
xor eax eax +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+5Ch+var_38] +
mov eax [esi+120h] +
mov eax [eax+3Ch] +
mov eax [eax+1Ch] +
mov [esi+124h] eax +
mov eax [esp+5Ch+arg_4] +
mov ebx [eax+34h] +
mov eax [esi+128h] +
mov [esp+5Ch+var_3C] eax +
shl eax 2 +
mov [esp+5Ch+var_5C] eax +
call sub_459D10  +
test eax eax +
mov [esi+134h] eax +
jz loc_4722FE  +
test ebx ebx +
jz loc_4721AF  +
mov edi eax +
mov esi [ebx+0A0h] +
mov edx [esi+68h] +
test edx edx +
jz loc_4721A2  +
mov eax [esi+78h] +
test eax eax +
jz loc_4722C0  +
mov [edi] eax +
mov ebx [ebx+9Ch] +
add edi 4 +
test ebx ebx +
jnz loc_472188  +
mov eax [esp+5Ch+var_38] +
add eax 0FCh +
mov [esp+5Ch+var_28] eax +
mov eax [esp+5Ch+var_38] +
mov [esp+5Ch+var_58] offset loc_470040 +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_5C] eax +
call sub_44E4D0  +
mov eax [esp+5Ch+arg_4] +
mov ebp [eax+34h] +
test ebp ebp +
jz loc_472606  +
mov [esp+5Ch+var_20] 0 +
mov [esp+5Ch+var_14] 0 +
mov eax [ebp+0A0h] +
mov [esp+5Ch+var_34] eax +
mov eax [eax+68h] +
test eax eax +
jz loc_47225B  +
mov eax [esp+5Ch+var_38] +
mov esi [esp+5Ch+var_20] +
mov edi [ebp+64h] +
mov eax [eax+134h] +
test edi edi +
mov eax [eax+esi] +
mov [esp+5Ch+var_24] eax +
jz loc_47225B  +
mov [esp+5Ch+var_1C] ebp +
test byte ptr [edi+14h] 4 +
jz loc_472250  +
mov eax [edi+4Ch] +
test eax eax +
jz loc_472250  +
mov eax [edi+3Ch] +
test eax eax +
jz loc_472250  +
mov esi [esp+5Ch+arg_0] +
cmp [eax+94h] esi +
jz loc_472320  +
lea esi [esi+0] +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_472228  +
mov ebp [esp+5Ch+var_1C] +
mov ebp [ebp+9Ch] +
add [esp+5Ch+var_20] 4 +
test ebp ebp +
jnz loc_4721F7  +
mov esi [esp+5Ch+var_38] +
mov eax [esi+120h] +
mov dword ptr [eax+24h] 0 +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_54] esi +
mov [esp+5Ch+var_58] offset loc_470060 +
mov [esp+5Ch+var_5C] eax +
call sub_44E4D0  +
mov eax [esp+5Ch+var_14] +
test eax eax +
jnz loc_4721BC  +
mov eax [esp+5Ch+var_38] +
mov eax [eax+134h] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax 1 +
jmp loc_47213A  +
lea eax [esi+48h] +
mov [esp+5Ch+var_44] 0 +
mov [esp+5Ch+var_48] 0 +
mov [esp+5Ch+var_4C] 0 +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] edx +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] ebx +
call sub_475A20  +
test eax eax +
mov [esi+78h] eax +
jnz loc_4721A0  +
mov eax [esp+5Ch+var_38] +
mov eax [eax+134h] +
test eax eax +
jz loc_472138  +
mov [esp+5Ch+var_5C] eax +
call free  +
jmp loc_472138  +
mov eax [esp+5Ch+arg_4] +
mov esi [esp+5Ch+var_1C] +
movzx eax byte ptr [eax+2] +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] 0 +
mov [esp+5Ch+var_58] edi +
shr al 6 +
and eax 1 +
mov [esp+5Ch+var_4C] eax +
mov [esp+5Ch+var_5C] esi +
call sub_462810  +
test eax eax +
mov ebx eax +
mov [esp+5Ch+var_10] eax +
jz loc_4725F7  +
mov eax [edi+4Ch] +
lea eax [eax+eax*2] +
lea eax [ebx+eax*4] +
cmp ebx eax +
mov [esp+5Ch+var_3C] eax +
jnb loc_47254B  +
mov [esp+5Ch+var_18] edi +
mov edi esi +
jmp loc_47246B  +
mov esi [esp+5Ch+var_24] +
lea eax [eax+eax*4] +
xor ecx ecx +
lea edx [esi+eax*4] +
movzx eax byte ptr [edx+0Ch] +
and eax 0Fh +
cmp al 3 +
jz loc_472399  +
mov ecx [edx] +
mov eax [edx+10h] +
mov edx [edi+0A0h] +
cmp eax [edx+214h] +
jnb loc_472500  +
mov edx [edx+40h] +
mov eax [edx+eax*4] +
mov edx [eax+2Ch] +
mov eax [edx+3Ch] +
mov esi [eax+1Ch] +
add esi [edx+38h] +
add esi [ebx+8] +
add esi ecx +
mov ebp [esp+5Ch+var_38] +
mov eax esi +
sub eax [ebp+124h] +
cmp eax 1FFFFh +
ja loc_4723E0  +
mov eax [esp+5Ch+arg_8] +
test eax eax +
jz loc_47245E  +
mov [esp+5Ch+var_5C] 13h +
mov [esp+5Ch+var_2C] ecx +
mov [esp+5Ch+var_30] edx +
call sub_459B80  +
mov edx [esp+5Ch+var_30] +
mov ecx [esp+5Ch+var_2C] +
add ecx [ebx+8] +
mov ebp eax +
mov eax [edx+4] +
mov [esp+5Ch+var_50] ecx +
mov [esp+5Ch+var_58] offset a08x08x +
mov [esp+5Ch+var_5C] ebp +
mov [esp+5Ch+var_54] eax +
call sprintf  +
test ebp ebp +
jz loc_472634  +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] 0 +
mov [esp+5Ch+var_58] ebp +
mov [esp+5Ch+var_5C] eax +
call sub_44E180  +
test eax eax +
jz loc_472570  +
mov dword ptr [eax+14h] 1 +
mov [eax+10h] esi +
mov [esp+5Ch+var_5C] ebp +
call free  +
add ebx 0Ch +
cmp [esp+5Ch+var_3C] ebx +
jbe loc_472547  +
mov eax [ebx+4] +
movzx edx al +
lea ecx [edx-18h] +
cmp ecx 1 +
jbe loc_47247E  +
cmp edx 5 +
jnz loc_47245E  +
mov esi [esp+5Ch+var_34] +
shr eax 8 +
mov edx [esi+68h] +
cmp eax edx +
jb loc_472380  +
mov ecx [edi+0A0h] +
sub eax edx +
mov edx [ecx+218h] +
mov eax [edx+eax*4] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
ja loc_4724BF  +
lea esi [esi+0] +
mov eax [eax+14h] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
jbe loc_4724B0  +
lea ecx [edx-3] +
cmp cl 1 +
jbe loc_472510  +
cmp dl 2 +
jz loc_472531  +
cmp dl 1 +
jnz loc_472660  +
mov esi [esp+5Ch+arg_4] +
movzx edx byte ptr [esi+2] +
and edx 6 +
cmp dl 2 +
jnz loc_47245E  +
test byte ptr [eax+31h] 3 +
jnz loc_47245E  +
xor esi esi +
xor ecx ecx +
xor edx edx +
jmp loc_4723C5  +
xor esi esi +
xor edx edx +
jmp loc_4723C5  +
mov edx [eax+14h] +
mov ecx [eax+18h] +
mov eax [edx+3Ch] +
test eax eax +
jz loc_4725C0  +
mov esi [edx+38h] +
add esi ecx +
add esi [eax+1Ch] +
add esi [ebx+8] +
jmp loc_4723C5  +
mov eax [esp+5Ch+arg_4] +
test byte ptr [eax] 1 +
jnz loc_4724F3  +
add ebx 0Ch +
cmp [esp+5Ch+var_3C] ebx +
ja loc_47246B  +
mov edi [esp+5Ch+var_18] +
mov eax [edi+8Ch] +
mov edx [eax+68h] +
test edx edx +
jnz loc_472250  +
mov eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_5C] eax +
call free  +
jmp loc_472250  +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] 1 +
mov [esp+5Ch+var_58] ebp +
mov [esp+5Ch+var_5C] eax +
call sub_44E180  +
test eax eax +
jz loc_472672  +
mov ebp ds:dword_514088 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+14h] 1 +
mov [eax+10h] esi +
test ebp ebp +
jnz loc_4725C7  +
mov [esp+5Ch+var_14] 1 +
jmp loc_47245E  +
xor esi esi +
jmp loc_4723C5  +
mov [esp+5Ch+var_58] esi +
mov [esp+5Ch+var_5C] offset aAddingStubWith +
call printf  +
mov ecx ds:dword_514088 +
test ecx ecx +
jz loc_4725B3  +
mov eax [esp+5Ch+arg_8] +
mov [esp+5Ch+var_5C] offset aPreAllocRunI +
mov [esp+5Ch+var_58] eax +
call printf  +
jmp loc_4725B3  +
mov eax [esp+5Ch+var_38] +
mov eax [eax+134h] +
jmp loc_472310  +
mov ebx [esp+5Ch+var_38] +
mov eax [ebx+120h] +
mov dword ptr [eax+24h] 0 +
mov eax [esp+5Ch+var_28] +
mov [esp+5Ch+var_54] ebx +
mov [esp+5Ch+var_58] offset loc_470060 +
mov [esp+5Ch+var_5C] eax +
call sub_44E4D0  +
jmp loc_47229F  +
mov ebp [esp+5Ch+var_18] +
mov eax [ebp+8Ch] +
mov eax [eax+68h] +
test eax eax +
jnz loc_4725F7  +
mov eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_5C] eax +
call free  +
mov eax [esp+5Ch+var_38] +
mov eax [eax+134h] +
jmp loc_472310  +
mov [esp+5Ch+var_5C] 11h +
mov ebp [esp+5Ch+var_18] +
call sub_44BAF0  +
jmp loc_472638  +
mov esi ebp +
mov ebp [esp+5Ch+var_18] +
mov [esp+5Ch+var_54] esi +
mov [esp+5Ch+var_58] 0 +
mov [esp+5Ch+var_5C] offset aBCannotCreateS +
call off_4BFA04  +
mov [esp+5Ch+var_5C] esi +
call free  +
jmp loc_472638  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edi [eax+1Ch] +
cmp dword ptr [edi+2Ch] 4 +
jz loc_4726C0  +
xor ebx ebx +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+11Ch] +
mov ebx [eax+64h] +
test ebx ebx +
jz loc_4727C8  +
xor esi esi +
jmp loc_4726E9  +
mov dword ptr [ebx+24h] 0 +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_472713  +
mov eax [edi+11Ch] +
mov ebp [ebx+24h] +
mov [esp+1Ch+var_1C] eax +
mov [esp+1Ch+var_18] ebp +
add esi ebp +
call sub_458B60  +
test eax eax +
mov [ebx+6Ch] eax +
jnz loc_4726D5  +
test ebp ebp +
jnz loc_4726B4  +
mov dword ptr [ebx+24h] 0 +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_4726E3  +
shr esi 2 +
lea eax ds:0[esi*4] +
mov dword ptr [edi+138h] 0 +
mov [edi+13Ch] esi +
mov [esp+1Ch+var_1C] eax +
call sub_459B80  +
mov [edi+140h] eax +
mov eax [edi+13Ch] +
shl eax 2 +
mov [esp+1Ch+var_1C] eax +
call sub_459B80  +
mov edx ds:dword_514088 +
test edx edx +
mov [edi+144h] eax +
jnz loc_4727B0  +
mov eax [esp+1Ch+arg_0] +
mov ebx 1 +
mov [esp+1Ch+var_18] offset sub_470E30 +
mov [esp+1Ch+var_14] eax +
lea eax [edi+0FCh] +
mov [esp+1Ch+var_1C] eax +
call sub_44E4D0  +
mov eax ds:dword_514088 +
test eax eax +
jz loc_4726B6  +
mov eax [edi+120h] +
mov eax [eax+24h] +
mov [esp+1Ch+var_1C] offset aFinalStubSecti +
mov [esp+1Ch+var_18] eax +
call printf  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+13Ch] +
mov [esp+1Ch+var_1C] offset aAllocatingIEnt +
mov [esp+1Ch+var_18] eax +
call printf  +
jmp loc_47275C  +
xor eax eax +
xor esi esi +
jmp loc_47271D  +
***
jmp sub_4727E0  +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] offset a_avr_prop +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov edi eax +
mov [esp+6Ch+var_34] eax +
jz loc_472DAF  +
mov ebx [eax+24h] +
mov [esp+6Ch+var_10] 0 +
mov [esp+6Ch+var_6C] ebx +
call sub_459B80  +
mov [esp+6Ch+var_58] ebx +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_40] eax +
mov [esp+6Ch+var_64] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] eax +
call sub_44DCC0  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_5C] 0 +
mov [esp+6Ch+var_60] 0 +
mov [esp+6Ch+var_64] 0 +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] eax +
call sub_462810  +
test eax eax +
mov ecx eax +
mov [esp+6Ch+var_38] eax +
jz loc_4728A2  +
mov eax [edi+4Ch] +
mov [esp+6Ch+var_60] offset sub_470DC0 +
mov [esp+6Ch+var_64] 0Ch +
mov [esp+6Ch+var_6C] ecx +
mov [esp+6Ch+var_68] eax +
call qsort  +
cmp ebx 3 +
jbe loc_472D40  +
mov eax [esp+6Ch+var_40] +
movzx ecx byte ptr [eax] +
lea esi [eax+4] +
movzx edx byte ptr [eax+1] +
mov [esp+6Ch+var_3C] ecx +
movzx ecx word ptr [eax+2] +
mov [esp+6Ch+var_48] edx +
movzx ebp cx +
lea eax [ebp+ebp*2+0] +
lea eax ds:10h[eax*8] +
mov [esp+6Ch+var_6C] eax +
mov word ptr [esp+6Ch+var_44] cx +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_472D40  +
mov edx [esp+6Ch+var_48] +
sub ebx 4 +
mov ecx [esp+6Ch+var_3C] +
mov [esp+6Ch+var_48] ebx +
mov [eax+1] dl +
mov edx [esp+6Ch+var_34] +
mov [eax] cl +
cmp cl 1 +
lea eax [edi+10h] +
mov [edi+4] ebp +
mov [edi+8] edx +
mov [edi+0Ch] eax +
jnz loc_472A72  +
mov edx [edx+4Ch] +
mov ebx [esp+6Ch+var_38] +
cmp word ptr [esp+6Ch+var_44] 0 +
lea edx [edx+edx*2] +
lea ebx [ebx+edx*4] +
jz loc_472D58  +
cmp [esp+6Ch+var_48] 4 +
jbe loc_472A72  +
movzx edx word ptr [esp+6Ch+var_44] +
mov ebp [esp+6Ch+var_38] +
mov [esp+6Ch+var_44] edi +
sub edx 1 +
movzx edx dx +
lea edx [edx+edx*2] +
lea ecx ds:0[edx*8] +
xor edx edx +
mov [esp+6Ch+var_30] ecx +
mov ecx esi +
mov edi edx +
mov esi ebx +
mov ebx ecx +
add eax edi +
test ebp ebp +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
jz loc_4729A6  +
mov eax ebx +
sub eax [esp+6Ch+var_40] +
cmp esi ebp +
ja loc_47298C  +
jmp loc_472992  +
add ebp 0Ch +
cmp esi ebp +
jbe loc_472992  +
cmp eax [ebp+0] +
nop   +
ja loc_472985  +
cmp esi ebp +
jz loc_472B92  +
cmp eax [ebp+0] +
lea esi [esi+0] +
jz loc_472BA0  +
mov eax [esp+6Ch+var_44] +
mov edx [eax+0Ch] +
mov eax [ebx] +
mov [esp+6Ch+var_3C] eax +
lea eax [edx+edi] +
mov ecx [eax] +
test ecx ecx +
jz loc_472B08  +
movzx edx byte ptr [ebx+4] +
movzx ecx dl +
mov [eax+8] ecx +
mov ecx [esp+6Ch+var_48] +
sub ecx 5 +
cmp dl 1 +
jz loc_472AF0  +
jb loc_472AE0  +
cmp dl 2 +
jz loc_472AB6  +
cmp dl 3 +
lea esi [esi+0] +
jnz loc_472AB0  +
cmp ecx 7 +
jbe loc_472AB0  +
mov edx [ebx+5] +
add ebx 0Dh +
mov ecx [esp+6Ch+var_44] +
sub [esp+6Ch+var_48] 0Dh +
mov [eax+0Ch] edx +
mov edx [ebx-4] +
mov eax [ecx+0Ch] +
mov [eax+edi+10h] edx +
mov eax [ecx+0Ch] +
mov dword ptr [eax+edi+14h] 0 +
cmp edi [esp+6Ch+var_30] +
jz loc_472D54  +
add edi 18h +
cmp [esp+6Ch+var_48] 4 +
jbe loc_472AB0  +
mov eax [esp+6Ch+var_44] +
mov eax [eax+0Ch] +
jmp loc_472966  +
mov eax ds:_iob +
mov [esp+6Ch+var_64] 21h +
mov edi [esp+6Ch+var_44] +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] offset aFailedToFindMa +
add eax 40h +
mov [esp+6Ch+var_60] eax +
call fwrite  +
mov eax [esp+6Ch+var_34] +
mov ebx [esp+6Ch+var_38] +
mov eax [eax+8Ch] +
cmp ebx [eax+68h] +
jz loc_472A8D  +
mov [esp+6Ch+var_6C] ebx +
call free  +
mov eax [esp+6Ch+var_40] +
mov [esp+6Ch+var_6C] eax +
call free  +
mov [esp+6Ch+var_6C] edi +
call free  +
xor eax eax +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esp+6Ch+var_44] +
jmp loc_472A72  +
cmp ecx 3 +
jbe loc_472AB0  +
mov edx [ebx+5] +
add ebx 9 +
sub [esp+6Ch+var_48] 9 +
mov [eax+0Ch] edx +
mov eax [esp+6Ch+var_44] +
mov eax [eax+0Ch] +
mov dword ptr [eax+edi+14h] 0 +
jmp loc_472A26  +
add ebx 5 +
mov [esp+6Ch+var_48] ecx +
jmp loc_472A26  +
cmp ecx 3 +
jbe loc_472AB0  +
mov edx [ebx+5] +
add ebx 9 +
sub [esp+6Ch+var_48] 9 +
mov [eax+0Ch] edx +
jmp loc_472A26  +
mov ecx [esp+6Ch+var_10] +
test ecx ecx +
mov [esp+6Ch+var_2C] ecx +
jz loc_472B2D  +
mov ecx [ecx+1Ch] +
cmp [esp+6Ch+var_3C] ecx +
mov [esp+6Ch+var_28] ecx +
jnb loc_472C9F  +
mov [esp+6Ch+var_10] 0 +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_68] offset sub_470DF0 +
mov [esp+6Ch+var_14] eax +
lea eax [esp+6Ch+var_14] +
mov [esp+6Ch+var_64] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] eax +
call sub_44DAD0  +
mov eax [esp+6Ch+var_10] +
test eax eax +
mov [esp+6Ch+var_2C] eax +
jz loc_472A46  +
mov eax [esp+6Ch+var_44] +
mov ecx [esp+6Ch+var_2C] +
mov edx [eax+0Ch] +
mov ecx [ecx+1Ch] +
lea eax [edx+edi] +
mov [esp+6Ch+var_28] ecx +
mov ecx [esp+6Ch+var_2C] +
mov [eax] ecx +
mov ecx [esp+6Ch+var_3C] +
sub ecx [esp+6Ch+var_28] +
mov [eax+4] ecx +
lea eax [edx+edi] +
jmp loc_4729C0  +
xor ebp ebp +
jmp loc_4729A6  +
mov eax [ebp+4] +
mov [esp+6Ch+var_3C] eax +
mov eax [esp+6Ch+arg_0] +
shr [esp+6Ch+var_3C] 8 +
mov eax [eax+0A0h] +
mov [esp+6Ch+var_2C] eax +
mov eax [eax+68h] +
cmp [esp+6Ch+var_3C] eax +
mov [esp+6Ch+var_28] eax +
jb loc_472CC5  +
mov edx [esp+6Ch+var_2C] +
mov eax [esp+6Ch+var_3C] +
sub eax [esp+6Ch+var_28] +
mov edx [edx+218h] +
lea ecx ds:0[eax*4] +
mov [esp+6Ch+var_20] ecx +
mov eax [edx+eax*4] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
ja loc_472C0F  +
lea esi [esi+0] +
mov eax [eax+14h] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
jbe loc_472C00  +
cmp dl 3 +
jb loc_472D47  +
cmp dl 4 +
jbe loc_472DB6  +
cmp dl 5 +
mov [esp+6Ch+var_24] offset off_4BFA40 +
jnz loc_472D47  +
mov eax [esp+6Ch+var_3C] +
sub eax [esp+6Ch+var_28] +
shl eax 2 +
mov [esp+6Ch+var_20] eax +
mov eax [esp+6Ch+var_2C] +
mov edx [esp+6Ch+var_20] +
mov eax [eax+218h] +
mov eax [eax+edx] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
ja loc_472C6F  +
nop   +
mov eax [eax+14h] +
movzx edx byte ptr [eax+0Ch] +
lea ecx [edx-6] +
cmp cl 1 +
jbe loc_472C60  +
sub edx 3 +
xor ecx ecx +
cmp dl 1 +
ja loc_472C7C  +
mov ecx [eax+18h] +
mov eax [esp+6Ch+var_44] +
add ecx [ebp+8] +
mov edx [eax+0Ch] +
mov [esp+6Ch+var_3C] ecx +
mov ecx [esp+6Ch+var_24] +
lea eax [edx+edi] +
mov [eax] ecx +
mov ecx [esp+6Ch+var_3C] +
mov [eax+4] ecx +
jmp loc_4729AD  +
mov [esp+6Ch+var_24] edx +
mov edx [esp+6Ch+var_2C] +
mov ecx eax +
mov eax [esp+6Ch+var_28] +
add eax [edx+24h] +
cmp [esp+6Ch+var_3C] eax +
mov eax ecx +
mov edx [esp+6Ch+var_24] +
jnb loc_472B25  +
jmp loc_472B79  +
mov eax [esp+6Ch+arg_0] +
call sub_470090  +
mov ecx [esp+6Ch+var_3C] +
lea edx [ecx+ecx*4] +
mov eax [eax+edx*4+10h] +
test eax eax +
jz loc_472D8A  +
cmp eax 0FFFFFFF1h +
jz loc_472DFE  +
cmp eax 0FFFFFFF2h +
jnz loc_472DC2  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_24] offset off_4BFA40 +
mov eax [eax+0A0h] +
mov [esp+6Ch+var_2C] eax +
mov eax [eax+68h] +
mov [esp+6Ch+var_28] eax +
mov eax [esp+6Ch+var_28] +
cmp [esp+6Ch+var_3C] eax +
mov [esp+6Ch+var_20] edx +
jnb loc_472C32  +
mov eax [esp+6Ch+arg_0] +
call sub_470090  +
mov edx [esp+6Ch+var_20] +
mov ecx [eax+edx*4] +
jmp loc_472C7C  +
xor edi edi +
jmp loc_472A72  +
mov [esp+6Ch+var_24] offset off_4BFAE8 +
jmp loc_472C41  +
mov edi [esp+6Ch+var_44] +
mov eax [esp+6Ch+var_40] +
mov [esp+6Ch+var_6C] eax +
call free  +
mov eax [esp+6Ch+var_34] +
mov ebx [esp+6Ch+var_38] +
mov eax [eax+8Ch] +
cmp ebx [eax+68h] +
jz loc_472D83  +
mov eax [esp+6Ch+var_38] +
mov [esp+6Ch+var_6C] eax +
call free  +
mov eax edi +
jmp loc_472AA3  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_24] offset off_4BFAE8 +
mov eax [eax+0A0h] +
mov [esp+6Ch+var_2C] eax +
mov eax [eax+68h] +
mov [esp+6Ch+var_28] eax +
jmp loc_472D16  +
xor eax eax +
jmp loc_472AA3  +
mov eax [eax+14h] +
mov [esp+6Ch+var_24] eax +
jmp loc_472C41  +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_20] edx +
mov [esp+6Ch+var_6C] eax +
call sub_478480  +
mov edx [esp+6Ch+var_20] +
mov [esp+6Ch+var_24] eax +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+0A0h] +
mov [esp+6Ch+var_2C] eax +
mov eax [eax+68h] +
mov [esp+6Ch+var_28] eax +
jmp loc_472D16  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_24] offset off_4BFB90 +
mov eax [eax+0A0h] +
mov [esp+6Ch+var_2C] eax +
mov eax [eax+68h] +
mov [esp+6Ch+var_28] eax +
jmp loc_472D16  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 6Ch +
mov eax ds:dword_514080 +
mov dword ptr [esp+5Ch] 0 +
test eax eax +
jz loc_4731F4  +
mov eax [esp+84h] +
mov ecx 9 +
mov edi offset a_vectors +
mov dword ptr [esp+2Ch] 0 +
mov eax [eax] +
mov esi eax +
cmps   +
setnbe cl  +
setb dl  +
cmp cl dl +
jz loc_472E8D  +
mov esi eax +
mov edi offset a_jumptables +
mov ecx 0Ch +
cmps   +
setnz al  +
movzx eax al +
mov [esp+2Ch] eax +
mov eax [esp+88h] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_473706  +
mov eax [esp+88h] +
mov ebx [eax+1Ch] +
cmp dword ptr [ebx+2Ch] 4 +
jz loc_472EBC  +
xor eax eax +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+8Ch] +
mov dword ptr [eax] 0 +
mov eax [ebx+118h] +
test eax eax +
jz loc_473170  +
mov eax [esp+88h] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_4731E7  +
mov eax [esp+84h] +
mov eax [eax+14h] +
test al 4 +
jz loc_4731E7  +
mov edi [esp+84h] +
mov edx [edi+4Ch] +
test edx edx +
jz loc_4731E7  +
test al 10h +
jz loc_4731E7  +
mov eax [esp+80h] +
mov eax [eax+0A0h] +
test byte ptr [eax+20h] 80h +
mov [esp+24h] eax +
jz loc_4731E7  +
add eax 48h +
mov [esp+44h] eax +
mov eax [esp+88h] +
movzx eax byte ptr [eax+2] +
mov [esp+4] edi +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
shr al 6 +
and eax 1 +
mov [esp+10h] eax +
mov eax [esp+80h] +
mov [esp] eax +
call sub_462810  +
test eax eax +
mov edi eax +
mov [esp+40h] eax +
jz loc_473C4D  +
mov eax [esp+84h] +
mov eax [eax+4Ch] +
lea eax [eax+eax*2] +
lea eax [edi+eax*4] +
cmp edi eax +
mov [esp+20h] eax +
jnb loc_47379C  +
mov ebp [esp+40h] +
xor esi esi +
jmp loc_472FE0  +
mov edi [esp+80h] +
sub eax edx +
mov ecx [edi+0A0h] +
mov edx [ecx+218h] +
mov ebx [edx+eax*4] +
test ebx ebx +
jz loc_473783  +
movzx eax byte ptr [ebx+0Ch] +
sub eax 3 +
cmp al 1 +
jbe loc_473494  +
add ebp 0Ch +
cmp [esp+20h] ebp +
jbe loc_47379C  +
movzx eax byte ptr [ebp+4] +
lea edx [eax-2] +
cmp edx 1 +
jbe loc_472FF1  +
cmp eax 12h +
jnz loc_472FD3  +
mov eax [esp+5Ch] +
test eax eax +
jz loc_473530  +
mov eax [esp+24h] +
test esi esi +
mov edx [eax+68h] +
jz loc_4734C5  +
mov eax [ebp+4] +
shr eax 8 +
cmp eax edx +
jnb loc_472FA4  +
lea eax [eax+eax*4] +
lea ebx [esi+eax*4] +
mov eax [ebx+10h] +
mov [esp+4] eax +
mov eax [esp+80h] +
mov [esp] eax +
call sub_478480  +
mov ecx [ebx] +
test eax eax +
jz loc_473041  +
mov edx [eax+3Ch] +
add ecx [edx+1Ch] +
add ecx [eax+38h] +
cmp byte ptr [ebp+4] 12h +
jnz loc_473411  +
mov eax [esp+84h] +
mov ebx [ebp+0] +
mov eax [eax+3Ch] +
mov [esp+30h] ebx +
mov eax [eax+1Ch] +
mov edi eax +
mov [esp+34h] eax +
mov eax [esp+84h] +
mov eax [eax+38h] +
mov [esp+38h] eax +
add eax edi +
add eax ebx +
sub ecx eax +
mov [esp+3Ch] eax +
mov eax [esp+2Ch] +
add ecx [ebp+8] +
test eax eax +
jz loc_4736E5  +
cmp ecx 1001h +
setle al  +
xor ebx ebx +
cmp ecx 0FFFFF002h +
setnl bl  +
mov [esp+1Ch] ebx +
and [esp+1Ch] eax +
mov edx dword_4BFEB4 +
cmp edx 4001h +
sbb ebx ebx +
and ebx 0FFFFFDA8h +
sub ebx 8F4h +
cmp edx 4001h +
lea eax [edx-1] +
sbb edi edi +
and eax ecx +
mov ecx edx +
shr ecx 1 +
and edi 0FFFFFDA8h +
mov [esp+28h] ecx +
mov ecx eax +
add edi 708h +
sub ecx edx +
cmp eax [esp+28h] +
cmovg eax ecx +
cmp eax ebx +
jl loc_4734A8  +
mov edx 0FFEh +
sub edx edi +
cmp edx eax +
jl loc_4734A8  +
mov eax ds:dword_51408C +
mov edx [esp+30h] +
test eax eax +
jnz loc_47390B  +
mov eax [esp+84h] +
mov ebx [esp+5Ch] +
mov edi [esp+40h] +
mov eax [eax+8Ch] +
lea ecx [ebx+edx] +
mov [eax+68h] edi +
mov [eax+30h] ebx +
mov eax [esp+24h] +
mov [eax+78h] esi +
movzx edx byte ptr [ebx+edx+1] +
movzx eax byte ptr [ecx] +
and edx 0FFFFFF94h +
and eax 0Eh +
cmp dl 94h +
jz loc_4733CB  +
mov dword ptr [esp+8] offset aElf32_avr_rela +
mov dword ptr [esp+4] 0AA6h +
mov dword ptr [esp] offset a____Binutil_26 +
call sub_44BA70  +
nop   +
mov eax [ebx+120h] +
cmp eax [esp+84h] +
jnz loc_472ED7  +
mov edi [esp+84h] +
mov esi [edi+24h] +
mov edi ds:dword_51408C +
test edi edi +
jnz loc_473CEB  +
mov eax [eax+3Ch] +
mov edi [esp+88h] +
mov eax [eax+94h] +
mov dword ptr [esp+8] 0 +
mov [esp+4] edi +
mov [esp] eax +
call sub_472120  +
mov eax [ebx+120h] +
mov eax [eax+24h] +
cmp eax esi +
jz loc_4731D9  +
mov edi [esp+8Ch] +
mov dword ptr [edi] 1 +
mov ecx ds:dword_51408C +
test ecx ecx +
jnz loc_4738DA  +
add esp 6Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+88h] +
mov ds:dword_514080 1 +
mov edi [eax+34h] +
test edi edi +
jz loc_472E4C  +
mov ecx edi +
mov eax [ecx+64h] +
test eax eax +
jnz loc_473247  +
jmp loc_473250  +
mov esi [eax+8Ch] +
lea edx [esi+90h] +
mov eax [eax+0Ch] +
mov dword ptr [edx] 0 +
mov dword ptr [edx+4] 0 +
mov dword ptr [edx+8] 0 +
test eax eax +
jz loc_473250  +
cmp eax [eax+3Ch] +
jnz loc_473220  +
xor edx edx +
jmp loc_47322C  +
***
mov ecx [ecx+9Ch] +
test ecx ecx +
jnz loc_473212  +
lea esi [esi+0] +
mov [esp] edi +
call sub_4727E0  +
test eax eax +
mov ebp eax +
jz loc_473339  +
mov eax [eax+4] +
test eax eax +
jz loc_473339  +
xor ecx ecx +
xor esi esi +
mov [esp+1Ch] edi +
mov edi ecx +
jmp loc_4732E8  +
cmp eax [eax+3Ch] +
jz loc_4732F2  +
mov ebx [eax+8Ch] +
add ebx 90h +
jz loc_4732F2  +
mov edx [ebx] +
cmp edx [ebx+4] +
jz loc_473310  +
mov eax [ebx+8] +
lea edx [edx+edx*2] +
add edi 1 +
lea eax [eax+edx*8] +
mov edx [ebp+0Ch] +
add edx esi +
add esi 18h +
mov ecx [edx] +
mov [eax] ecx +
mov ecx [edx+4] +
mov [eax+4] ecx +
mov ecx [edx+8] +
mov [eax+8] ecx +
mov ecx [edx+0Ch] +
mov [eax+0Ch] ecx +
mov ecx [edx+10h] +
mov [eax+10h] ecx +
mov edx [edx+14h] +
mov [eax+14h] edx +
add dword ptr [ebx] 1 +
cmp edi [ebp+4] +
jnb loc_473335  +
mov eax [ebp+0Ch] +
mov eax [eax+esi] +
test eax eax +
jnz loc_473290  +
xor ebx ebx +
mov dword ptr [esp+4] 913h +
mov dword ptr [esp] offset a____Binutil_26 +
call sub_44BA40  +
mov edx [ebx] +
cmp edx [ebx+4] +
jnz loc_4732AA  +
nop   +
mov eax [ebx+8] +
add edx 0Ah +
mov [ebx+4] edx +
lea edx [edx+edx*2] +
shl edx 3 +
mov [esp+4] edx +
mov [esp] eax +
call sub_459C10  +
mov edx [ebx] +
mov [ebx+8] eax +
jmp loc_4732AD  +
***
mov edi [esp+1Ch] +
mov [esp] ebp +
call free  +
mov edi [edi+9Ch] +
test edi edi +
jnz loc_473260  +
mov eax [esp+88h] +
mov esi [eax+34h] +
test esi esi +
jz loc_472E4C  +
mov ebx [esi+64h] +
test ebx ebx +
jnz loc_473377  +
jmp loc_4733BC  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_4733BC  +
cmp ebx [ebx+3Ch] +
jz loc_473370  +
mov eax [ebx+8Ch] +
cmp eax 0FFFFFF70h +
jz loc_473370  +
mov edx [eax+90h] +
test edx edx +
jz loc_473370  +
mov eax [eax+98h] +
mov dword ptr [esp+0Ch] offset sub_470D90 +
mov dword ptr [esp+8] 18h +
mov [esp+4] edx +
mov [esp] eax +
call qsort  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_473377  +
mov esi [esi+9Ch] +
test esi esi +
jnz loc_473361  +
jmp loc_472E4C  +
***
cmp al 0Eh +
jnz loc_4738BE  +
mov byte ptr [ecx] 0 +
mov eax [ebp+0] +
mov edx [esp+5Ch] +
mov byte ptr [edx+eax+1] 0D0h +
mov eax [ebp+4] +
mov edi [esp+2Ch] +
xor al al +
add eax 3 +
test edi edi +
mov [ebp+4] eax +
mov eax [ebp+0] +
jnz loc_473934  +
mov edx [esp+5Ch] +
mov byte ptr [edx+eax+2] 0 +
mov eax [ebp+0] +
mov edx [esp+5Ch] +
mov byte ptr [edx+eax+3] 0 +
mov eax [esp+84h] +
mov edi [ebp+0] +
mov eax [eax+3Ch] +
mov ebx [eax+1Ch] +
mov eax [esp+84h] +
mov ecx [eax+38h] +
mov edx [esp+5Ch] +
add ebx edi +
lea eax [edx+edi+1] +
mov [esp+34h] eax +
movzx eax byte ptr [eax] +
mov [esp+1Ch] al +
lea eax [edx+edi] +
mov [esp+38h] eax +
movzx eax byte ptr [eax] +
mov [esp+28h] al +
lea eax [ebx+ecx] +
movzx ecx byte ptr [esp+1Ch] +
mov [esp+30h] eax +
and ecx 0FFFFFFF0h +
cmp cl 0D0h +
jz loc_473551  +
movzx eax byte ptr [esp+1Ch] +
and eax 0FFFFFFFEh +
cmp al 94h +
jz loc_47356F  +
cmp cl 0C0h +
jnz loc_472FD3  +
mov dword ptr [esp+3Ch] 2 +
mov dword ptr [esp+34h] 2 +
jmp loc_4735A0  +
mov eax [ebx+14h] +
mov edx [eax+3Ch] +
mov ecx [edx+1Ch] +
add ecx [ebx+18h] +
add ecx [eax+38h] +
jmp loc_473041  +
***
mov eax [esp+1Ch] +
test eax eax +
jnz loc_473105  +
mov ecx [esp+38h] +
mov ebx [esp+34h] +
mov edi [esp+30h] +
jmp loc_47342B  +
***
test edx edx +
jz loc_473721  +
mov esi [eax+78h] +
test esi esi +
jnz loc_47300C  +
mov eax [esp+44h] +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+10h] 0 +
mov [esp+4] eax +
mov eax [esp+80h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] edx +
mov [esp] eax +
call sub_475A20  +
test eax eax +
mov esi eax +
jz loc_473C4D  +
mov eax [esp+24h] +
mov edx [eax+68h] +
jmp loc_47300C  +
***
mov eax [esp+84h] +
mov eax [eax+8Ch] +
mov eax [eax+30h] +
test eax eax +
jz loc_473D69  +
mov [esp+5Ch] eax +
jmp loc_472FFD  +
***
mov ebx dword_4BFEB0 +
test ebx ebx +
jnz loc_47372C  +
movzx eax byte ptr [esp+1Ch] +
and eax 0FFFFFFFEh +
cmp al 94h +
jnz loc_472FD3  +
movzx eax byte ptr [esp+28h] +
and eax 0Eh +
cmp al 0Eh +
jz loc_473973  +
cmp cl 0C0h +
jz loc_47347F  +
cmp al 0Ch +
jnz loc_472FD3  +
mov dword ptr [esp+3Ch] 4 +
mov dword ptr [esp+34h] 4 +
mov eax [esp+3Ch] +
mov ebx [esp+84h] +
add eax edi +
lea ecx [eax+1] +
cmp ecx [ebx+24h] +
jnb loc_472FD3  +
cmp byte ptr [edx+eax+1] 95h +
jnz loc_472FD3  +
cmp byte ptr [edx+eax] 8 +
jnz loc_472FD3  +
mov eax ds:dword_51408C +
test eax eax +
jz loc_4735ED  +
cmp dword ptr [esp+34h] 2 +
jz loc_473DB4  +
cmp dword ptr [esp+34h] 4 +
jz loc_473D98  +
cmp edi 1 +
jbe loc_472FD3  +
mov edx [esp+5Ch] +
movzx eax byte ptr [edx+edi-1] +
movzx edx byte ptr [edx+edi-2] +
cmp al 99h +
jz loc_473D3C  +
cmp al 9Bh +
jz loc_473CB5  +
mov ebx eax +
and ebx 0FFFFFFFEh +
cmp bl 0FCh +
jnz loc_473C9E  +
shr dl 3 +
mov ecx edx +
and ecx 1 +
and eax 0FFFFFFFCh +
cmp al 10h +
jz loc_473CB5  +
test ecx ecx +
jz loc_473CB5  +
mov eax [esp+84h] +
add edi [esp+3Ch] +
mov [esp+4] eax +
mov eax [esp+80h] +
mov [esp+1Ch] edi +
mov edi 1 +
mov [esp] eax +
call sub_4799A0  +
mov ecx eax +
mov eax [esp+24h] +
mov ebx [eax+78h] +
mov eax [eax+68h] +
lea edx [eax+eax*4] +
lea edx [ebx+edx*4] +
cmp ebx edx +
jnb loc_4739EA  +
test ebx ebx +
jz loc_4739EA  +
mov eax [esp+30h] +
add eax [esp+34h] +
mov [esp+28h] eax +
jmp loc_4736A7  +
add ebx 14h +
cmp edx ebx +
jbe loc_4739E3  +
test ebx ebx +
jz loc_4739E3  +
mov eax [esp+1Ch] +
cmp [ebx] eax +
jnz loc_473694  +
cmp [ebx+10h] ecx +
jnz loc_473694  +
mov eax ds:dword_51408C +
xor edi edi +
test eax eax +
jz loc_473694  +
mov eax [esp+28h] +
mov dword ptr [esp] offset aLocalLabelPrev +
mov [esp+48h] edx +
mov [esp+38h] ecx +
mov [esp+4] eax +
call printf  +
mov edx [esp+48h] +
mov ecx [esp+38h] +
jmp loc_473694  +
***
cmp ecx 0FFFh +
setle al  +
xor ebx ebx +
cmp ecx 0FFFFF000h +
setnl bl  +
mov [esp+1Ch] ebx +
and [esp+1Ch] eax +
jmp loc_4730A8  +
***
mov eax [esp+88h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov dword ptr [esp] offset aPFRelaxAndRM_0 +
call eax  +
jmp loc_472EA2  +
***
mov eax [ebp+4] +
shr eax 8 +
jmp loc_472FA4  +
***
mov eax [esp+84h] +
lea ecx [edi+3] +
cmp ecx [eax+24h] +
jnb loc_472FD3  +
cmp byte ptr [edx+edi+2] 8 +
jnz loc_472FD3  +
cmp byte ptr [edx+edi+3] 95h +
jnz loc_472FD3  +
movzx eax byte ptr [esp+1Ch] +
mov edx ds:dword_51408C +
mov edi [esp+34h] +
and eax 0FFFFFFEFh +
test edx edx +
mov [edi] al +
jnz loc_473D43  +
mov eax [esp+8Ch] +
mov dword ptr [eax] 1 +
jmp loc_472FD3  +
***
mov dword ptr [esp+4] 0A34h +
mov dword ptr [esp] offset a____Binutil_26 +
call sub_44BA40  +
jmp loc_472FC4  +
***
mov eax [esp+8Ch] +
mov eax [eax] +
test eax eax +
jnz loc_47387A  +
mov eax [esp+84h] +
mov eax [eax+3Ch] +
cmp [esp+84h] eax +
jz loc_473DD0  +
mov eax [esp+84h] +
mov eax [eax+8Ch] +
mov [esp+1Ch] eax +
lea ebp [eax+90h] +
mov edx [ebp+0] +
test edx edx +
jz loc_47387A  +
mov dword ptr [esp+1Ch] 0 +
mov eax [esp+1Ch] +
lea edx [eax+eax*2] +
mov eax [ebp+8] +
lea esi [eax+edx*8] +
mov eax [esi+8] +
sub eax 2 +
cmp eax 1 +
ja loc_473868  +
mov ecx [esi+0Ch] +
mov eax 1 +
mov ebx [esi+14h] +
shl eax cl +
mov edx ebx +
mov ecx eax +
sub edx eax +
cmp eax ebx +
jbe loc_473822  +
jmp loc_473868  +
mov edx ebx +
mov ebx edx +
mov edi ecx +
sub ebx eax +
add ecx eax +
cmp edx eax +
jnb loc_473820  +
test edi edi +
mov [esi+14h] edx +
jle loc_473868  +
mov ecx [esi+4] +
mov edx [esp+84h] +
mov eax [esp+80h] +
sub ecx edi +
mov [esi+4] ecx +
mov dword ptr [esp+4] 0 +
mov [esp] edi +
call sub_470310  +
mov eax [esp+8Ch] +
mov dword ptr [eax] 1 +
add dword ptr [esp+1Ch] 1 +
mov eax [esp+1Ch] +
cmp [ebp+0] eax +
ja loc_4737EE  +
mov edx [esp+5Ch] +
test edx edx +
jz loc_4738FC  +
mov eax [esp+84h] +
mov eax [eax+8Ch] +
cmp edx [eax+30h] +
jz loc_4738A4  +
mov edi [esp+88h] +
test byte ptr [edi+2] 40h +
jz loc_4738F4  +
mov [eax+30h] edx +
mov edi [esp+40h] +
cmp [eax+68h] edi +
jz loc_4731E7  +
mov [esp] edi +
call free  +
jmp loc_4731E7  +
***
cmp al 0Ch +
jnz loc_473152  +
mov byte ptr [ecx] 0 +
mov eax [ebp+0] +
mov edx [esp+5Ch] +
mov byte ptr [edx+eax+1] 0C0h +
jmp loc_4733E2  +
***
mov [esp+4] eax +
mov dword ptr [esp] offset aSizeOfStubSect +
call printf  +
mov eax 1 +
jmp loc_472EB4  +
***
mov [esp] edx +
call free  +
mov eax [esp+84h] +
mov eax [eax+8Ch] +
jmp loc_4738A4  +
***
mov eax [esp+84h] +
mov eax [eax] +
mov dword ptr [esp] offset aShrinkingJumpC +
mov [esp+8] eax +
mov eax [esp+3Ch] +
mov [esp+4] eax +
call printf  +
mov edx [ebp+0] +
jmp loc_473116  +
***
lea ecx [eax+2] +
mov edx [esp+84h] +
mov eax [esp+80h] +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] 2 +
call sub_470310  +
test eax eax +
jz loc_473C38  +
mov eax [esp+8Ch] +
mov dword ptr [eax] 1 +
jmp loc_473411  +
***
mov eax dword_4BFEB0 +
test eax eax +
jz loc_473476  +
mov ecx [esp+84h] +
lea eax [edi+5] +
cmp eax [ecx+24h] +
jnb loc_472FD3  +
cmp byte ptr [edx+edi+4] 8 +
jnz loc_472FD3  +
cmp byte ptr [edx+edi+5] 95h +
jnz loc_472FD3  +
movzx eax byte ptr [esp+28h] +
mov edi [esp+38h] +
and eax 0FFFFFFFDh +
mov [edi] al +
mov eax ds:dword_51408C +
test eax eax +
jz loc_473771  +
mov eax [ecx] +
mov dword ptr [esp] offset aConvertedCallR +
mov [esp+8] eax +
mov eax [esp+30h] +
mov [esp+4] eax +
call printf  +
jmp loc_473771  +
***
mov eax [esp+24h] +
mov eax [eax+68h] +
mov ecx [esp+80h] +
mov edx [ecx+0A0h] +
mov ecx [esp+24h] +
mov ebx [edx+218h] +
mov edx [ecx+60h] +
shr edx 4 +
sub edx eax +
lea ecx [ebx+edx*4] +
cmp ebx ecx +
jnb loc_473A71  +
mov eax [esp+30h] +
add eax [esp+34h] +
mov [esp+28h] eax +
jmp loc_473A25  +
add ebx 4 +
cmp ecx ebx +
jbe loc_473A71  +
mov eax [ebx] +
movzx edx byte ptr [eax+0Ch] +
sub edx 3 +
cmp dl 1 +
ja loc_473A1E  +
mov edx [esp+84h] +
cmp [eax+14h] edx +
jnz loc_473A1E  +
mov edx [esp+1Ch] +
cmp [eax+18h] edx +
jnz loc_473A1E  +
mov eax ds:dword_51408C +
xor edi edi +
test eax eax +
jz loc_473A1E  +
mov eax [esp+28h] +
mov dword ptr [esp] offset aGlobalLabelPre +
mov [esp+38h] ecx +
mov [esp+4] eax +
call printf  +
mov ecx [esp+38h] +
jmp loc_473A1E  +
***
mov eax [esp+80h] +
mov eax [eax+64h] +
mov ecx eax +
mov [esp+38h] eax +
mov eax edi +
test al al +
mov [esp+4Fh] al +
jz loc_472FD3  +
test ecx ecx +
jz loc_473BEE  +
mov eax [esp+3Ch] +
add eax [esp+30h] +
mov edi [esp+24h] +
mov [esp+48h] ebp +
mov [esp+1Ch] eax +
mov eax [esp+38h] +
mov eax [eax+8Ch] +
mov ebx [eax+68h] +
test ebx ebx +
jz loc_473D06  +
mov eax [esp+38h] +
mov eax [eax+4Ch] +
lea eax [eax+eax*2] +
lea ebp [ebx+eax*4] +
cmp ebx ebp +
jb loc_473AE7  +
jmp loc_473BD7  +
cmp [esp+1Ch] ecx +
jz loc_473B42  +
add ebx 0Ch +
cmp ebp ebx +
jbe loc_473BD7  +
test ebx ebx +
jz loc_473BD7  +
test esi esi +
mov eax [edi+68h] +
jz loc_473B70  +
mov edx [ebx+4] +
xor ecx ecx +
shr edx 8 +
cmp edx eax +
jnb loc_473AD6  +
lea eax [edx+edx*4] +
lea edx [esi+eax*4] +
mov eax [edx+10h] +
mov [esp+28h] edx +
mov [esp+4] eax +
mov eax [esp+80h] +
mov [esp] eax +
call sub_478480  +
mov edx [esp+28h] +
mov ecx [edx] +
test eax eax +
jz loc_473BCF  +
mov edx [eax+3Ch] +
add ecx [edx+1Ch] +
add ecx [eax+38h] +
add ecx [ebx+8] +
cmp [esp+1Ch] ecx +
jnz loc_473ADC  +
mov ebx ds:dword_51408C +
mov ebp [esp+48h] +
test ebx ebx +
jz loc_472FD3  +
mov eax [esp+1Ch] +
mov dword ptr [esp] offset aRetFromRjmpJmp +
mov [esp+4] eax +
call printf  +
jmp loc_472FD3  +
***
test eax eax +
jz loc_473BC8  +
mov esi [edi+78h] +
test esi esi +
jnz loc_473AF6  +
mov [esp+8] eax +
mov eax [esp+44h] +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+10h] 0 +
mov [esp+4] eax +
mov eax [esp+80h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp] eax +
call sub_475A20  +
test eax eax +
mov esi eax +
jz loc_473BD7  +
mov eax [edi+68h] +
jmp loc_473AF6  +
***
xor ecx ecx +
jmp loc_473AD6  +
***
add ecx [ebx+8] +
jmp loc_473AD6  +
***
mov eax [esp+38h] +
mov eax [eax+0Ch] +
test eax eax +
mov [esp+38h] eax +
jnz loc_473AAB  +
mov ebp [esp+48h] +
cmp byte ptr [esp+4Fh] 0 +
jz loc_472FD3  +
mov ecx ds:dword_51408C +
test ecx ecx +
jnz loc_473DD7  +
mov ecx [esp+3Ch] +
mov edx [esp+84h] +
mov eax [esp+80h] +
add ecx [ebp+0] +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] 2 +
call sub_470310  +
test eax eax +
jnz loc_473771  +
test esi esi +
jz loc_473C4D  +
mov eax [esp+24h] +
cmp [eax+78h] esi +
jz loc_473C4D  +
mov [esp] esi +
call free  +
mov eax [esp+5Ch] +
test eax eax +
jz loc_473C6F  +
mov edi [esp+84h] +
mov edx [edi+8Ch] +
cmp eax [edx+30h] +
jz loc_473C6F  +
mov [esp] eax +
call free  +
mov edi [esp+40h] +
test edi edi +
jz loc_472EB2  +
mov eax [esp+84h] +
mov eax [eax+8Ch] +
cmp [eax+68h] edi +
jz loc_472EB2  +
mov [esp] edi +
call free  +
jmp loc_472EB2  +
***
cmp bl 0FEh +
mov ecx 1 +
jnz loc_47362A  +
and edx 8 +
jnz loc_47362A  +
mov eax ds:dword_51408C +
test eax eax +
jz loc_472FD3  +
mov eax [esp+84h] +
mov eax [eax] +
mov dword ptr [esp] offset aPrecedingSkipI +
mov [esp+8] eax +
mov eax [esp+30h] +
add eax 2 +
mov [esp+4] eax +
call printf  +
jmp loc_472FD3  +
***
mov [esp+4] esi +
mov dword ptr [esp] offset aRelaxingTheStu +
call printf  +
mov eax [ebx+120h] +
jmp loc_47319B  +
***
mov eax [esp+38h] +
mov dword ptr [esp+10h] 1 +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+8] 0 +
mov [esp+4] eax +
mov eax [esp+80h] +
mov [esp] eax +
call sub_462810  +
mov ebx eax +
jmp loc_473AC0  +
***
xor ecx ecx +
jmp loc_47362A  +
***
mov eax [esp+84h] +
mov eax [eax] +
mov dword ptr [esp] offset aConvertedRcall +
mov [esp+8] eax +
mov eax [esp+30h] +
mov [esp+4] eax +
call printf  +
jmp loc_473771  +
***
lea eax [esp+5Ch] +
mov [esp+8] eax +
mov eax [esp+84h] +
mov [esp+4] eax +
mov eax [esp+80h] +
mov [esp] eax +
call sub_44DE10  +
test eax eax +
jnz loc_472FFD  +
jmp loc_473C38  +
***
mov eax [esp+30h] +
mov dword ptr [esp] offset aFoundJmpRetSeq +
mov [esp+4] eax +
call printf  +
mov edi [ebp+0] +
jmp loc_4735ED  +
***
mov eax [esp+30h] +
mov dword ptr [esp] offset aFoundRjmpRetSe +
mov [esp+4] eax +
call printf  +
mov edi [ebp+0] +
jmp loc_4735ED  +
***
xor ebp ebp +
jmp loc_4737DB  +
***
mov eax [esp+30h] +
add eax [esp+34h] +
mov dword ptr [esp] offset aUnreachableRet +
mov [esp+4] eax +
call printf  +
jmp loc_473C07  +
***
cmp eax 5 +
mov edx eax +
jz loc_473EB6  +
ja loc_473E50  +
cmp eax 2 +
jz loc_473EB0  +
jbe loc_473E76  +
cmp edx 3 +
mov eax offset aInterp +
jz locret_473E48  +
cmp edx 4 +
mov eax offset aNote +
jnz loc_473E73  +
retn   +
cmp eax 6474E550h +
jz loc_473EA6  +
jbe loc_473E90  +
cmp edx 6474E551h +
mov eax offset aStack +
jz locret_473E48  +
cmp edx 6474E552h +
mov eax offset aRelro +
jz locret_473E48  +
xor eax eax +
retn   +
test edx edx +
mov eax offset aNull_1 +
jz locret_473E48  +
cmp edx 1 +
mov eax offset aLoad +
jnz loc_473E73  +
retn   +
cmp edx 6 +
mov eax offset aPhdr +
jz locret_473E48  +
cmp edx 7 +
mov eax offset aTls +
jnz loc_473E73  +
retn   +
mov eax offset aEh_frame +
retn   +
mov eax offset aDynamic +
retn   +
mov eax offset aShlib +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov eax [esp+10h] +
mov ecx [eax] +
mov eax [esp+14h] +
mov edx [eax] +
mov eax [edx+20h] +
cmp [ecx+20h] eax +
jb loc_473F54  +
mov eax 1 +
ja loc_473F27  +
mov edi [edx+1Ch] +
cmp [ecx+1Ch] edi +
jb loc_473F54  +
ja loc_473F27  +
mov ebx [ecx+14h] +
test ebx 402h +
jz loc_473F30  +
mov eax [edx+14h] +
test eax 402h +
jz loc_473F54  +
xor esi esi +
and ebx 2 +
jz loc_473F07  +
mov esi [ecx+24h] +
test al 2 +
jz loc_473F50  +
mov ebx [edx+24h] +
cmp esi ebx +
jb loc_473F54  +
cmp esi ebx +
mov eax 1 +
ja loc_473F27  +
mov eax [ecx+88h] +
sub eax [edx+88h] +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov esi [edx+14h] +
test esi 402h +
jnz loc_473F27  +
mov eax [ecx+88h] +
mov edi [edx+88h] +
cmp eax edi +
jz loc_473F60  +
sub eax edi +
jmp loc_473F27  +
***
xor ebx ebx +
jmp loc_473F12  +
***
mov eax 0FFFFFFFFh +
jmp loc_473F27  +
***
mov eax esi +
jmp loc_473EFD  +
***
push edi  +
mov edi ecx +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+28h+arg_0] +
mov [esp+28h+var_28] eax +
mov ebx esi +
sub ebx ecx +
lea edx ds:28h[ebx*4] +
mov [esp+28h+var_24] edx +
call sub_458B60  +
test eax eax +
jz loc_473FDA  +
xor edx edx +
cmp esi edi +
mov dword ptr [eax] 0 +
lea ecx [ebp+edi*4+0] +
mov dword ptr [eax+4] 1 +
jbe loc_473FBF  +
mov esi [ecx+edx*4] +
mov [eax+edx*4+28h] esi +
add edx 1 +
cmp edx ebx +
jnz loc_473FB1  +
test edi edi +
mov [eax+24h] ebx +
jnz loc_473FD2  +
mov edx [esp+28h+arg_4] +
test edx edx +
jz loc_473FD2  +
or byte ptr [eax+20h] 30h +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_473FD2  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_4] +
mov ebp [esp+1Ch+arg_0] +
mov edi [esi] +
mov [esp+1Ch+var_1C] ebp +
mov [esp+1Ch+var_18] edi +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_474060  +
mov eax [esi+0Ch] +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_1C] ebx +
mov [esp+1Ch+var_18] eax +
call memcpy  +
mov byte ptr [ebx+edi-1] 0 +
mov [esp+1Ch+var_14] 100h +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] ebp +
call sub_44D890  +
test eax eax +
jz loc_474060  +
mov edx [esi+4] +
mov ecx [esi+14h] +
mov dword ptr [eax+54h] 0 +
mov dword ptr [eax+40h] 1 +
mov [eax+24h] edx +
mov [eax+50h] ecx +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 10h +
mov [esp+14h+var_14] edx +
call strlen  +
mov [esp+14h+var_14] ebx +
mov [esp+14h+var_10] eax +
mov edi eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_4740B2  +
mov byte ptr [eax] 2Eh +
sub edi 1 +
add esi 2 +
lea eax [eax+1] +
mov [esp+14h+var_C] edi +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call memcpy  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 10h +
mov [esp+18h+var_18] edx +
call strlen  +
mov [esp+18h+var_18] ebx +
mov esi eax +
lea eax [eax+2] +
mov [esp+18h+var_14] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_474106  +
mov byte ptr [eax] 2Eh +
add edi 1 +
mov byte ptr [eax+1] 7Ah +
lea eax [eax+2] +
mov [esp+18h+var_10] esi +
mov [esp+18h+var_14] edi +
mov [esp+18h+var_18] eax +
call memcpy  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov [esp+2Ch+var_28] offset a_interp_0 +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_18] eax +
mov [esp+2Ch+var_14] edx +
call sub_44D4B0  +
test eax eax +
jz loc_47413D  +
test byte ptr [eax+14h] 2 +
jnz loc_474288  +
mov [esp+2Ch+var_1C] 2 +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_28] offset a_dynamic_0 +
mov [esp+2Ch+var_2C] eax +
call sub_44D4B0  +
cmp eax 1 +
mov eax [esp+2Ch+var_14] +
sbb [esp+2Ch+var_1C] 0FFFFFFFFh +
test eax eax +
jz loc_474177  +
movzx eax byte ptr [eax+3] +
and eax 1 +
cmp al 1 +
sbb [esp+2Ch+var_1C] 0FFFFFFFFh +
mov edi [esp+2Ch+var_18] +
mov eax [edi+0A0h] +
mov ebp [edi+64h] +
mov eax [eax+934h] +
cmp dword ptr [eax+0Ch] 1 +
sbb [esp+2Ch+var_1C] 0FFFFFFFFh +
cmp dword ptr [eax+34h] 1 +
sbb [esp+2Ch+var_1C] 0FFFFFFFFh +
test ebp ebp +
jz loc_474202  +
mov eax [ebp+14h] +
mov ebx ebp +
mov [esp+2Ch+var_10] eax +
mov edx eax +
jmp loc_4741B3  +
mov edx [ebx+14h] +
and edx 2 +
jz loc_4741D7  +
mov esi [ebx] +
mov edi offset a_note_0 +
mov ecx 5 +
cmps   +
jnz loc_4741D7  +
add [esp+2Ch+var_1C] 1 +
cmp dword ptr [ebx+40h] 2 +
jz loc_47427C  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_4741B0  +
test [esp+2Ch+var_10] 400h +
jz loc_4741FA  +
jmp loc_474295  +
test byte ptr [ebp+15h] 4 +
jnz loc_474295  +
mov ebp [ebp+0Ch] +
test ebp ebp +
nop   +
jnz loc_4741F0  +
mov edi [esp+2Ch+var_18] +
mov eax [edi+4] +
mov ebx [eax+1B0h] +
mov eax [ebx+0A8h] +
test eax eax +
jz loc_47422F  +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] edi +
mov [esp+2Ch+var_28] edx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_47429F  +
add [esp+10h] eax +
mov eax [ebx+174h] +
movzx eax byte ptr [eax+1] +
imul eax [esp+10h] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dword ptr [ebx+40h] 2 +
jnz loc_4741B0  +
mov edx [ebx+14h] +
test dl 2 +
jz loc_4741B3  +
mov esi [ebx] +
mov ecx 5 +
mov edi offset a_note_0 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jnz loc_4741B3  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_474246  +
jmp loc_4741DE  +
mov [esp+2Ch+var_1C] 4 +
jmp loc_474145  +
add [esp+2Ch+var_1C] 1 +
jmp loc_474202  +
mov dword ptr [esp+8] offset aGet_program_he +
mov dword ptr [esp+4] 0FD2h +
mov dword ptr [esp+0] offset a____Binutil_15 +
call sub_44BA70  +
nop   +
lea esi [esi+0] +
mov ecx [eax+4] +
mov ecx [ecx+1B0h] +
mov ecx [ecx+2Ch] +
test ecx ecx +
jz loc_4742E1  +
sub esp 1Ch +
mov [esp+4] edx +
mov [esp+0] eax +
call ecx  +
add esp 1Ch +
retn   +
test dword ptr [edx+0Ch] 800082h +
mov eax 1 +
jnz locret_4742DF  +
mov edx [edx+10h] +
cmp edx offset off_4BFAE8 +
jz locret_4742DF  +
mov eax [edx+14h] +
shr eax 0Ch +
and eax 1 +
retn   +
***
mov ebx [ecx+4] +
cmp dword ptr [ebx+4] 5 +
jz loc_474350  +
mov edx [edx+10h] +
cmp [edx+94h] eax +
jz loc_474348  +
mov ecx [edx+3Ch] +
cmp eax [ecx+94h] +
jz loc_474341  +
cmp edx offset off_4BFB90 +
jz loc_474348  +
mov eax 1 +
pop ebx  +
retn   +
mov ebx [edx+38h] +
test ebx ebx +
jnz loc_474332  +
xor eax eax +
pop ebx  +
retn   +
mov ecx [ecx+0A0h] +
test ecx ecx +
jz loc_47431C  +
mov ecx [edx+28h] +
test ecx ecx +
jz loc_47431C  +
mov edx [edx+10h] +
cmp edx offset off_4BFB90 +
jnz loc_47431F  +
jmp loc_47433A  +
***
push esi  +
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 10h +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call sub_44D4B0  +
test eax eax +
jz loc_4748F8  +
mov eax 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [edi+14h] +
mov [esp+18h+var_14] esi +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_10] eax +
call sub_44D970  +
test eax eax +
jz loc_474930  +
mov edx [edi+24h] +
mov ecx [edi+50h] +
mov ebx [edi+54h] +
mov [eax+24h] edx +
mov edx [edi+40h] +
mov [eax+50h] ecx +
mov [eax+54h] ebx +
mov [eax+40h] edx +
mov eax 1 +
jmp loc_4748F1  +
xor eax eax +
jmp loc_4748F1  +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 9Ch +
mov eax [esp+0A8h+arg_0] +
lea edi [esp+0A8h+var_7C] +
mov [esp+0A8h+var_A4] offset aSLd +
mov [esp+0A8h+var_A8] edi +
mov [esp+0A8h+var_8C] ecx +
mov [esp+0A8h+var_9C] eax +
mov eax [esp+0A8h+arg_4] +
mov [esp+0A8h+var_A0] eax +
call sprintf  +
mov eax edi +
mov edx [eax] +
add eax 4 +
lea ebx [edx-1010101h] +
not edx  +
and ebx edx +
and ebx 80808080h +
jz loc_47497E  +
mov ecx ebx +
shr ecx 10h +
test ebx 8080h +
cmovz ebx ecx +
lea ecx [eax+2] +
cmovz eax ecx +
add bl bl +
sbb eax 3 +
sub eax edi +
add eax 1 +
mov [esp+0A8h+var_A4] eax +
mov [esp+0A8h+var_A8] esi +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_474A30  +
mov [esp+0A8h+var_A4] edi +
mov [esp+0A8h+var_A8] eax +
call strcpy  +
mov [esp+0A8h+var_A0] 100h +
mov [esp+0A8h+var_A4] ebx +
mov [esp+0A8h+var_A8] esi +
call sub_44D890  +
test eax eax +
mov ecx eax +
jz loc_474A30  +
mov eax [ebp+0] +
mov [ecx+24h] eax +
mov eax [esp+0A8h+var_8C] +
mov eax [eax] +
mov dword ptr [ecx+54h] 0 +
mov dword ptr [ecx+40h] 2 +
mov [ecx+50h] eax +
mov eax [esi+0A0h] +
mov edx [eax+930h] +
mov eax 1 +
mov edi [edx+8] +
cmp [esp+0A8h+arg_0] edi +
jz loc_474A40  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 9Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+0A8h+arg_4] +
mov eax esi +
call sub_4748D0  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 2Ch +
mov [esp+38h+var_38] ecx +
mov [esp+38h+var_1C] ecx +
call strlen  +
mov [esp+38h+var_38] edi +
add eax 6 +
mov [esp+38h+var_34] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_474AF2  +
mov eax [esp+38h+arg_0] +
mov esi offset a_rela_0 +
mov ecx [esp+38h+var_1C] +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_34] offset aSS_25 +
test eax eax +
mov eax offset a_rel_18 +
cmovz esi eax +
mov [esp+38h+var_2C] ecx +
mov [esp+38h+var_30] esi +
call sprintf  +
mov eax [edi+0A0h] +
mov eax [eax+934h] +
mov eax [eax+4] +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_30] 0 +
mov [esp+38h+var_38] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
mov [ebp+0] eax +
setnz al  +
add esp 2Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 1Ch +
mov eax [eax+4] +
mov [esp+28h+var_1C] ecx +
mov ecx [edx] +
mov edi [eax+1B0h] +
test ecx ecx +
jz loc_474B32  +
mov [esp+28h+var_24] 0B19h +
mov [esp+28h+var_28] offset a____Binutil_15 +
call sub_44BA40  +
mov [esp+28h+var_24] 38h +
mov [esp+28h+var_28] esi +
call sub_458B60  +
mov edx [esp+28h+arg_4] +
test edx edx +
mov ebx eax +
mov [ebp+0] eax +
jz loc_474BC3  +
mov dword ptr [eax] 0FFFFFFFFh +
mov eax [esp+28h+arg_0] +
test eax eax +
jz loc_474BB0  +
mov eax [edi+174h] +
mov dword ptr [ebx+4] 4 +
movzx edx byte ptr [eax+4] +
mov [ebx+28h] edx +
movzx ecx byte ptr [eax+0Bh] +
mov eax 1 +
mov dword ptr [ebx+8] 0 +
mov dword ptr [ebx+0Ch] 0 +
mov dword ptr [ebx+18h] 0 +
shl eax cl +
mov [ebx+24h] eax +
mov eax 1 +
mov dword ptr [ebx+10h] 0 +
mov dword ptr [ebx+14h] 0 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+174h] +
mov dword ptr [ebx+4] 9 +
movzx edx byte ptr [eax+3] +
jmp loc_474B6E  +
mov eax [esp+28h+arg_0] +
mov edx ebx +
mov ecx [esp+28h+var_1C] +
mov [esp+28h+var_28] eax +
mov eax esi +
call sub_474A60  +
mov edx eax +
xor eax eax +
test edx edx +
jnz loc_474B55  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_4] +
mov eax [edi+4] +
mov ebx [esi+8Ch] +
mov ebp [esi] +
mov eax [eax+1B0h] +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_8] +
mov edx [eax+4] +
test edx edx +
jnz loc_474EC0  +
mov eax [eax] +
test eax eax +
jz loc_475030  +
test byte ptr [eax+0Ch] 1 +
jz loc_474C45  +
mov edx [esi+14h] +
test dh 20h +
jz loc_474C45  +
cmp byte ptr [ebp+1] 64h +
jz loc_4750E0  +
mov eax [edi+0A0h] +
mov eax [eax+934h] +
mov eax [eax+4] +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
mov [ebx] eax +
jz loc_474FE7  +
mov edx [esi+14h] +
mov [esp+2Ch+var_10] 0 +
mov eax edx +
and eax 1 +
mov [esp+2Ch+var_18] eax +
jnz loc_474C93  +
test byte ptr [esi+18h] 1 +
jz loc_474F72  +
mov eax [esi+1Ch] +
mov [ebx+0Ch] eax +
mov ecx [esi+40h] +
mov eax [esi+24h] +
mov dword ptr [ebx+10h] 0 +
mov dword ptr [ebx+14h] 0 +
cmp ecx 1Eh +
mov [ebx+18h] eax +
mov dword ptr [ebx+1Ch] 0 +
ja loc_475003  +
mov eax 1 +
shl eax cl +
mov ecx edx +
and ecx 2000000h +
mov [ebx+24h] eax +
mov eax 11h +
mov [ebx+2Ch] esi +
mov dword ptr [ebx+30h] 0 +
mov [esp+2Ch+var_14] ecx +
jnz loc_474CFC  +
mov ecx edx +
mov al 8 +
and ecx 103h +
cmp ecx 1 +
mov ecx 1 +
cmovnz eax ecx +
mov ecx [ebx+4] +
test ecx ecx +
jnz loc_474EC8  +
mov [ebx+4] eax +
mov ecx eax +
cmp ecx 0Bh +
jz loc_475146  +
jbe loc_474F20  +
cmp ecx 6FFFFFFDh +
jz loc_475120  +
ja loc_475070  +
cmp ecx 11h +
jz loc_4750B6  +
cmp ecx 6FFFFFF6h +
jnz loc_474D58  +
mov eax [esp+2Ch+var_1C] +
mov eax [eax+174h] +
cmp byte ptr [eax+0Ah] 40h +
setnz al  +
movzx eax al +
shl eax 2 +
mov [ebx+28h] eax +
mov eax [esp+2Ch+var_18] +
test eax eax +
jz loc_474D64  +
or dword ptr [ebx+8] 2 +
test dl 8 +
jnz loc_474D6D  +
or dword ptr [ebx+8] 1 +
test dl 10h +
jz loc_474D76  +
or dword ptr [ebx+8] 4 +
test edx 800000h +
jz loc_474D9D  +
mov eax [ebx+8] +
mov ecx eax +
or ecx 10h +
test edx 1000000h +
mov [ebx+8] ecx +
mov ecx [esi+78h] +
mov [ebx+28h] ecx +
jz loc_474D9D  +
or eax 30h +
mov [ebx+8] eax +
mov eax [esp+2Ch+var_14] +
test eax eax +
jnz loc_474DB9  +
mov eax [esi+8Ch] +
mov eax [eax+74h] +
test eax eax +
jz loc_474DB9  +
or dword ptr [ebx+8] 200h +
test dh 4 +
jz loc_474DF6  +
mov eax [esi+24h] +
or dword ptr [ebx+8] 400h +
test eax eax +
jnz loc_474DF6  +
test dh 1 +
jnz loc_474DF6  +
mov ecx [esi+0A4h] +
mov dword ptr [ebx+18h] 0 +
test ecx ecx +
jz loc_474DF6  +
mov eax [ecx+0Ch] +
add eax [ecx+8] +
test eax eax +
mov [ebx+18h] eax +
jz loc_474DF6  +
mov dword ptr [ebx+4] 8 +
mov eax edx +
and eax 2008000h +
cmp eax 8000h +
jz loc_474FF7  +
and edx 4 +
jz loc_474E80  +
mov eax [esp+2Ch+arg_8] +
mov eax [eax] +
test eax eax +
jz loc_474E40  +
mov ecx [ebx+40h] +
mov edx [ebx+50h] +
mov [esp+2Ch+var_18] ecx +
add ecx edx +
test ecx ecx +
jz loc_474E40  +
movzx ecx byte ptr [eax] +
and ecx 3 +
cmp cl 2 +
jz loc_474F80  +
cmp byte ptr [eax+2] 0 +
js loc_474F80  +
movzx ecx byte ptr [esi+19h] +
lea eax [ebx+3Ch] +
lea edx [ebx+4Ch] +
shr cl 2 +
and ecx 1 +
test byte ptr [esi+19h] 4 +
mov [esp+2Ch+var_2C] ecx +
mov ecx ebp +
cmovz edx eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] eax +
mov eax edi +
call sub_474B00  +
test eax eax +
jnz loc_474E80  +
mov eax [esp+2Ch+arg_8] +
mov dword ptr [eax+4] 1 +
lea esi [esi+0] +
mov eax [esp+2Ch+var_1C] +
mov ebp [ebx+4] +
mov eax [eax+5Ch] +
test eax eax +
jz loc_474EAA  +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] edi +
call eax  +
test eax eax +
jnz loc_474EAA  +
mov eax [esp+2Ch+arg_8] +
mov dword ptr [eax+4] 1 +
cmp ebp 8 +
jnz loc_474EC0  +
mov eax [esi+24h] +
test eax eax +
jz loc_474EC0  +
mov dword ptr [ebx+4] 8 +
lea esi [esi+0] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ecx 8 +
jnz loc_474D0C  +
cmp eax 1 +
jnz loc_474D58  +
mov eax [esp+2Ch+var_18] +
test eax eax +
jz loc_474D64  +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] offset aWarningSecti_0 +
call off_4BFA04  +
mov dword ptr [ebx+4] 1 +
mov edx [esi+14h] +
mov eax edx +
and eax 1 +
mov [esp+2Ch+var_18] eax +
mov eax edx +
and eax 2000000h +
mov [esp+2Ch+var_14] eax +
jmp loc_474D58  +
cmp ecx 5 +
jz loc_475106  +
jbe loc_475160  +
cmp ecx 6 +
jz loc_4750A0  +
cmp ecx 9 +
nop   +
lea esi [esi+0] +
jnz loc_474D58  +
mov eax [edi+4] +
mov eax [eax+1B0h] +
test byte ptr [eax+1ACh] 4 +
jz loc_474D58  +
mov eax [esp+2Ch+var_1C] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+3] +
mov [ebx+28h] eax +
jmp loc_474D58  +
mov dword ptr [ebx+0Ch] 0 +
jmp loc_474C99  +
mov eax [esp+2Ch+var_18] +
test eax eax +
jz loc_474FB1  +
mov ecx [ebx+3Ch] +
test ecx ecx +
jnz loc_474FB1  +
mov eax [esp+2Ch+var_10] +
lea edx [ebx+3Ch] +
mov ecx ebp +
mov [esp+2Ch+var_2C] 0 +
mov [esp+2Ch+var_28] eax +
mov eax edi +
call sub_474B00  +
test eax eax +
jz loc_474FE7  +
mov edx [ebx+50h] +
test edx edx +
jz loc_474E80  +
mov edx [ebx+4Ch] +
test edx edx +
jnz loc_474E80  +
mov eax [esp+2Ch+var_10] +
lea edx [ebx+4Ch] +
mov ecx ebp +
mov [esp+2Ch+var_2C] 1 +
mov [esp+2Ch+var_28] eax +
mov eax edi +
call sub_474B00  +
test eax eax +
jnz loc_474E80  +
mov eax [esp+2Ch+arg_8] +
mov dword ptr [eax+4] 1 +
jmp loc_474EC0  +
or dword ptr [ebx+8] 80000000h +
jmp loc_474E08  +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_20] ecx +
mov [esp+2Ch+var_2C] offset aBErrorAlignmen +
call off_4BFA04  +
mov eax [esp+2Ch+arg_8] +
mov dword ptr [eax+4] 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test byte ptr [esi+17h] 10h +
jz loc_474C45  +
mov eax [edi+28h] +
shr eax 5 +
test eax 28000h +
jz loc_475195  +
cmp byte ptr [ebp+1] 7Ah +
jnz loc_474C45  +
mov edx ebp +
mov eax edi +
call sub_474070  +
test eax eax +
mov ebp eax +
jnz loc_474C45  +
jmp loc_474FE7  +
cmp ecx 6FFFFFFEh +
jnz loc_4750C2  +
mov eax [ebx+20h] +
mov dword ptr [ebx+28h] 0 +
test eax eax +
jnz loc_4751C5  +
mov eax [edi+0A0h] +
mov eax [eax+23Ch] +
mov [ebx+20h] eax +
jmp loc_474D58  +
mov eax [esp+2Ch+var_1C] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+6] +
mov [ebx+28h] eax +
jmp loc_474D58  +
mov dword ptr [ebx+28h] 4 +
jmp loc_474D58  +
cmp ecx 6FFFFFFFh +
jnz loc_474D58  +
mov dword ptr [ebx+28h] 2 +
jmp loc_474D58  +
cmp byte ptr [ebp+6] 5Fh +
jnz loc_474C45  +
or edx 8000000h +
mov [esi+14h] edx +
mov [esp+2Ch+var_10] 1 +
mov dword ptr [ebx] 0FFFFFFFFh +
jmp loc_474C7E  +
mov eax [esp+2Ch+var_1C] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+8] +
mov [ebx+28h] eax +
jmp loc_474D58  +
mov eax [ebx+20h] +
mov dword ptr [ebx+28h] 0 +
test eax eax +
jnz loc_475200  +
mov eax [edi+0A0h] +
mov eax [eax+238h] +
mov [ebx+20h] eax +
jmp loc_474D58  +
mov eax [esp+2Ch+var_1C] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+5] +
mov [ebx+28h] eax +
jmp loc_474D58  +
cmp ecx 4 +
jnz loc_474D58  +
mov eax [edi+4] +
mov eax [eax+1B0h] +
test byte ptr [eax+1ACh] 8 +
jz loc_474D58  +
mov eax [esp+2Ch+var_1C] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+4] +
mov [ebx+28h] eax +
jmp loc_474D58  +
movzx eax byte ptr [esi+18h] +
and eax 30h +
cmp al 10h +
jnz loc_474C45  +
mov edx ebp +
mov eax edi +
call sub_4740C0  +
test eax eax +
jz loc_474FE7  +
cmp byte ptr [ebp+1] 7Ah +
jz loc_475226  +
mov ebp eax +
lea esi [esi+0] +
jmp loc_474C45  +
mov ecx [edi+0A0h] +
mov ecx [ecx+23Ch] +
test ecx ecx +
jz loc_474D58  +
cmp eax ecx +
jz loc_474D58  +
mov [esp+2Ch+var_28] 0C08h +
mov [esp+2Ch+var_2C] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_474EFE  +
mov ecx [edi+0A0h] +
mov ecx [ecx+238h] +
test ecx ecx +
jz loc_474D58  +
cmp eax ecx +
jz loc_474D58  +
mov [esp+2Ch+var_28] 0BFCh +
jmp loc_4751E9  +
mov [esp+2Ch+var_28] 0B87h +
mov [esp+2Ch+var_2C] offset a____Binutil_15 +
mov [esp+2Ch+var_18] eax +
call sub_44BA40  +
mov eax [esp+2Ch+var_18] +
mov ebp eax +
jmp loc_474C45  +
***
sub esp 1Ch +
lea eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] offset a8_8x +
mov [esp+1Ch+var_18] 20h +
mov [esp+1Ch+var_1C] eax +
call j__vsnprintf  +
add esp 1Ch +
retn   +
***
push ebx  +
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov eax [eax+60h] +
mov [esp+10h+var_C] ebx +
movzx edx word ptr [esi] +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
lea edx [ebx+2] +
mov eax [eax+60h] +
mov [esp+10h+var_C] edx +
movzx edx word ptr [esi+2] +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
lea edx [ebx+4] +
mov eax [eax+60h] +
mov [esp+10h+var_C] edx +
movzx edx word ptr [esi+4] +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
lea edx [ebx+6] +
mov eax [eax+60h] +
mov [esp+10h+var_C] edx +
movzx edx word ptr [esi+6] +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
lea ecx [ebx+8] +
mov edx [esi+8] +
mov eax [eax+54h] +
mov [esp+10h+var_C] ecx +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
lea ecx [ebx+0Ch] +
mov edx [esi+0Ch] +
add ebx 10h +
mov eax [eax+54h] +
mov [esp+10h+var_10] edx +
mov [esp+10h+var_C] ecx +
call eax  +
mov eax [edi+4] +
mov edx [esi+10h] +
mov eax [eax+54h] +
mov [esp+10h+arg_4] ebx +
mov [esp+10h+arg_0] edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] esi +
add esi 4 +
call eax  +
mov [ebx] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] esi +
call eax  +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov edx [esi] +
mov eax [eax+54h] +
mov [esp+10h+var_C] ebx +
add ebx 4 +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
mov edx [esi+4] +
mov eax [eax+54h] +
mov [esp+10h+arg_4] ebx +
mov [esp+10h+arg_0] edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov eax [eax+58h] +
mov [esp+10h+var_10] esi +
call eax  +
lea edx [esi+2] +
mov [ebx] ax +
mov eax [edi+4] +
mov eax [eax+58h] +
mov [esp+10h+var_10] edx +
call eax  +
lea edx [esi+4] +
mov [ebx+2] ax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
lea edx [esi+8] +
add esi 0Ch +
mov [ebx+4] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
mov [ebx+8] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] esi +
call eax  +
mov [ebx+0Ch] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] esi +
call eax  +
lea edx [esi+4] +
mov [ebx] eax +
mov eax [edi+4] +
mov eax [eax+58h] +
mov [esp+10h+var_10] edx +
call eax  +
lea edx [esi+6] +
mov [ebx+4] ax +
mov eax [edi+4] +
mov eax [eax+58h] +
mov [esp+10h+var_10] edx +
call eax  +
lea edx [esi+8] +
add esi 0Ch +
mov [ebx+6] ax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
mov [ebx+8] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] esi +
call eax  +
mov [ebx+0Ch] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov edx [esp+1Ch+arg_4] +
mov eax [eax+4] +
mov eax [eax+58h] +
mov [esp+1Ch+var_1C] edx +
call eax  +
mov edx [esp+1Ch+arg_8] +
mov [edx] ax +
add esp 1Ch +
retn   +
***
jmp sub_475650  +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov ecx [esp+arg_8] +
mov eax [eax+4] +
mov eax [eax+60h] +
mov [esp+arg_4] ecx +
movzx edx word ptr [edx] +
mov [esp+arg_0] edx +
jmp eax  +
***
mov edx [esp+arg_0] +
xor eax eax +
add edx 1 +
movzx ecx byte ptr [edx-1] +
test cl cl +
jz locret_4756A2  +
shl eax 4 +
add eax ecx +
mov ecx eax +
and ecx 0F0000000h +
jz loc_475676  +
xor eax ecx +
add edx 1 +
shr ecx 18h +
xor eax ecx +
movzx ecx byte ptr [edx-1] +
test cl cl +
jnz loc_475681  +
retn   +
***
movzx edx byte ptr [eax] +
lea ecx [eax+1] +
mov eax 1505h +
test dl dl +
jz loc_4756D8  +
mov ebx eax +
add ecx 1 +
shl ebx 5 +
add edx ebx +
add eax edx +
movzx edx byte ptr [ecx-1] +
test dl dl +
jnz loc_4756C4  +
pop ebx  +
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_4] +
mov ebx [esp+14h+arg_0] +
cmp esi 937h +
jbe loc_475761  +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] ebx +
call sub_458B60  +
test eax eax +
mov [ebx+0A0h] eax +
jz loc_475780  +
mov edx [esp+14h+arg_8] +
mov esi 1 +
mov [eax+920h] edx +
movzx edx byte ptr [ebx+28h] +
and edx 18h +
cmp dl 8 +
jz loc_475759  +
mov [esp+14h+var_10] 40h +
mov [esp+14h+var_14] ebx +
call sub_458B60  +
test eax eax +
jz loc_475780  +
mov edx [ebx+0A0h] +
mov [edx+934h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov dword ptr [eax+1Ch] 0FFFFFFFFh +
add esp 14h +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_10] 0F0h +
mov [esp+14h+var_14] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_4756F5  +
xor esi esi +
add esp 14h +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov eax [esp+20h] +
mov edx [eax+4] +
mov edx [edx+1B0h] +
mov edx [edx+4] +
mov dword ptr [esp+4] 938h +
mov [esp] eax +
mov [esp+8] edx +
call sub_4756E0  +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
mov eax [ebx+4] +
mov eax [eax+78h] +
mov [esp] ebx +
call eax  +
xor edx edx +
test eax eax +
jz loc_475809  +
mov esi [ebx+0A0h] +
mov dword ptr [esp+4] 14h +
mov [esp] ebx +
call sub_458B60  +
xor edx edx +
mov [esi+930h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+930h] +
test eax eax +
setnz dl  +
add esp 14h +
mov eax edx +
pop ebx  +
pop esi  +
retn   +
***
jmp sub_475820  +
***
mov ecx [esp+arg_8] +
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
test ecx ecx +
jz loc_475832  +
jmp loc_475840  +
mov eax offset unk_5017F2 +
retn   +
push ebp  +
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 3Ch +
mov eax [eax+0A0h] +
mov ebx [eax+40h] +
test ebx ebx +
jz loc_475977  +
cmp [eax+214h] edx +
jbe loc_475977  +
lea edi [ebx+edx*4] +
mov ebx [edi] +
mov eax [ebx+30h] +
test eax eax +
jz loc_475890  +
mov eax [ebx+18h] +
cmp eax ecx +
jbe loc_475981  +
mov eax [ebx+30h] +
add eax ecx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+4] +
cmp eax 5FFFFFFFh +
jbe loc_4759E2  +
mov ebp [ebx+18h] +
mov [esp+4Ch+var_28] ecx +
mov eax [ebx+10h] +
mov [esp+4Ch+var_2C] edx +
mov edx [ebx+14h] +
lea ecx [ebp+1] +
cmp ecx 1 +
mov [esp+4Ch+var_24] ecx +
jbe loc_475970  +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] esi +
call sub_46FCE0  +
mov edx [esp+4Ch+var_2C] +
mov ecx [esp+4Ch+var_28] +
test eax eax +
jnz loc_4759DE  +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_20] ecx +
mov [esp+4Ch+var_28] edx +
mov [esp+4Ch+var_48] eax +
call sub_458A80  +
mov edx [esp+4Ch+var_28] +
mov ecx [esp+4Ch+var_20] +
test eax eax +
mov [esp+4Ch+var_2C] eax +
jz loc_4759DE  +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_24] ecx +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_28] edx +
call sub_46FAD0  +
mov edx [esp+4Ch+var_28] +
mov ecx [esp+4Ch+var_24] +
cmp ebp eax +
jz loc_475A07  +
call sub_44B8A0  +
sub eax 1 +
jz loc_475955  +
mov [esp+4Ch+var_4C] 12h +
call sub_44BAF0  +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] eax +
call sub_458CD0  +
mov ebx [edi] +
mov dword ptr [ebx+18h] 0 +
nop   +
mov dword ptr [ebx+30h] 0 +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esi+0A0h] +
mov ebp [edi+3Ch] +
mov edi off_4BFA04 +
cmp edx ebp +
mov edx [ebx] +
jz loc_4759D1  +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_2C] ecx +
call sub_475820  +
mov edx [ebx+18h] +
mov ecx [esp+4Ch+var_2C] +
mov [esp+4Ch+var_3C] eax +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_44] ecx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] offset aBInvalidString +
call edi  +
xor eax eax +
jmp loc_475882  +
cmp ecx edx +
jnz loc_475996  +
mov edx eax +
mov eax offset a_shstrtab +
jmp loc_4759B1  +
mov ebx [edi] +
jmp loc_475970  +
cmp eax 3 +
jz loc_47589E  +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] offset aBAttemptToLoad +
call off_4BFA04  +
xor eax eax +
jmp loc_475882  +
mov eax [esp+4Ch+var_2C] +
mov byte ptr [eax+ebp] 0 +
mov eax [edi] +
mov edi [esp+4Ch+var_2C] +
mov [eax+30h] edi +
jmp loc_475872  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov ecx [esp+3Ch+arg_4] +
mov esi [eax+4] +
cmp dword ptr [esi+4] 5 +
jnz loc_475D40  +
mov ebx [esp+3Ch+arg_8] +
test ebx ebx +
jz loc_475AF9  +
mov eax [esp+3Ch+arg_0] +
mov ebp [eax+0A0h] +
mov edi [ebp+208h] +
test edi edi +
jz loc_475BA0  +
mov ebx [ebp+40h] +
mov eax edi +
mov edx [eax+1Ch] +
cmp [ebx+edx*4] ecx +
jz loc_475A7C  +
mov eax [eax+3Ch] +
test eax eax +
jnz loc_475A65  +
add ebp 48h +
cmp ecx ebp +
cmovz eax edi +
mov [esp+3Ch+var_24] eax +
mov ebp [esi+1B0h] +
xor ebx ebx +
mov edx [esp+3Ch+arg_14] +
mov esi [ecx+10h] +
mov edi [ecx+14h] +
mov eax [ebp+174h] +
test edx edx +
movzx eax byte ptr [eax+5] +
mov [esp+3Ch+var_1C] eax +
jz loc_475BAD  +
mov eax [esp+3Ch+var_1C] +
xor edx edx +
imul eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_30] 0 +
add eax esi +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
adc edx edi +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] eax +
call sub_46FCE0  +
test eax eax +
jz loc_475B05  +
xor esi esi +
mov [esp+3Ch+arg_10] 0 +
test ebx ebx +
jz loc_475AED  +
mov [esp+3Ch+var_3C] ebx +
call free  +
test esi esi +
jz loc_475AF9  +
mov [esp+3Ch+var_3C] esi +
call free  +
mov eax [esp+3Ch+arg_10] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_0] +
mov esi [esp+3Ch+var_1C] +
imul esi [esp+3Ch+arg_8] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_14] +
mov [esp+3Ch+var_38] esi +
mov [esp+3Ch+var_3C] eax +
call sub_46FAD0  +
cmp eax esi +
jnz loc_475AD7  +
mov eax [esp+3Ch+var_24] +
test eax eax +
jz loc_475BD6  +
mov ecx [eax+18h] +
test ecx ecx +
jz loc_475BD6  +
mov edx [eax+14h] +
xor esi esi +
mov eax [eax+10h] +
mov [esp+3Ch+var_20] edx +
mov edx [esp+3Ch+arg_18] +
mov [esp+3Ch+var_24] eax +
test edx edx +
jz loc_475D13  +
mov eax [esp+3Ch+arg_C] +
xor edx edx +
mov [esp+3Ch+var_30] 0 +
shl eax 2 +
add eax [esp+3Ch+var_24] +
adc edx [esp+3Ch+var_20] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] eax +
call sub_46FCE0  +
test eax eax +
jz loc_475CBA  +
mov [esp+3Ch+arg_10] 0 +
jmp loc_475AE1  +
mov [esp+3Ch+var_24] 0 +
jmp loc_475A80  +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_3C] eax +
call sub_459BC0  +
test eax eax +
mov [esp+3Ch+arg_14] eax +
jnz loc_475D5C  +
mov [esp+3Ch+arg_10] 0 +
jmp loc_475AF9  +
xor esi esi +
mov [esp+3Ch+arg_18] 0 +
mov eax [esp+3Ch+arg_10] +
mov [esp+3Ch+var_18] 0 +
test eax eax +
jz loc_475CEA  +
mov eax [esp+3Ch+arg_8] +
mov edi [esp+3Ch+arg_10] +
lea eax [eax+eax*4] +
lea eax [edi+eax*4] +
cmp edi eax +
mov [esp+3Ch+var_24] eax +
jnb loc_475AE1  +
mov edx [esp+3Ch+arg_14] +
mov [esp+3Ch+var_14] esi +
mov esi ebp +
mov [esp+3Ch+var_10] ebx +
mov ebx [esp+3Ch+arg_18] +
mov ebp edx +
jmp loc_475C39  +
add edi 14h +
add ebp [esp+3Ch+var_1C] +
test ebx ebx +
lea eax [ebx+4] +
cmovnz ebx eax +
cmp [esp+3Ch+var_24] edi +
jbe loc_475CAD  +
mov eax [esi+174h] +
mov ecx [esp+3Ch+arg_0] +
mov eax [eax+20h] +
mov [esp+3Ch+var_30] edi +
mov [esp+3Ch+var_34] ebx +
mov [esp+3Ch+var_38] ebp +
mov [esp+3Ch+var_3C] ecx +
call eax  +
test eax eax +
jnz loc_475C24  +
mov eax ebp +
xor edx edx +
mov esi [esp+3Ch+var_14] +
sub eax [esp+3Ch+arg_14] +
mov ebx [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] offset aBSymbolNumberL +
div  [esp+3Ch+var_1C] +
add eax [esp+3Ch+arg_C] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] eax +
call off_4BFA04  +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+arg_10] 0 +
test eax eax +
jz loc_475AE1  +
mov [esp+3Ch+var_3C] eax +
call free  +
jmp loc_475AE1  +
mov esi [esp+3Ch+var_14] +
mov ebx [esp+3Ch+var_10] +
jmp loc_475AE1  +
mov eax [esp+3Ch+arg_8] +
lea edi ds:0[eax*4] +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_18] +
mov [esp+3Ch+var_3C] eax +
call sub_46FAD0  +
cmp eax edi +
jnz loc_475B92  +
jmp loc_475BE0  +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] 14h +
mov [esp+3Ch+var_3C] eax +
call sub_459BC0  +
test eax eax +
mov [esp+3Ch+arg_10] eax +
jz loc_475AE1  +
mov [esp+3Ch+var_18] eax +
jmp loc_475BF4  +
mov eax [esp+3Ch+arg_8] +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_3C] eax +
call sub_459BC0  +
test eax eax +
mov esi eax +
jz loc_475B92  +
mov [esp+3Ch+arg_18] eax +
jmp loc_475B5D  +
mov [esp+3Ch+var_34] offset aBfd_elf_get_el +
mov [esp+3Ch+var_38] 18Ch +
mov [esp+3Ch+var_3C] offset a____Binutil_15 +
call sub_44BA70  +
mov ebx eax +
jmp loc_475AA8  +
***
sub esp 4 +
mov ebx [esp+4+arg_8] +
mov eax [esp+4+arg_4] +
mov esi [esp+4+arg_C] +
mov ecx [ebx+8] +
mov edx [eax+1Ch] +
test ecx ecx +
jz loc_475DB0  +
mov eax [esp+4+arg_0] +
call loc_475840  +
test eax eax +
jz loc_475DE7  +
test esi esi +
jz loc_475DA4  +
cmp byte ptr [eax] 0 +
nop   +
jnz loc_475DA4  +
mov eax [esi] +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
movzx edx byte ptr [ebx+0Ch] +
mov eax offset unk_5017F2 +
and edx 0Fh +
cmp dl 3 +
jnz loc_475D98  +
mov ecx [ebx+10h] +
mov ebx [esp+4+arg_0] +
mov edx [ebx+0A0h] +
cmp ecx [edx+214h] +
jnb loc_475D98  +
mov ebx [edx+40h] +
mov edx [edx+3Ch] +
mov ecx [ebx+ecx*4] +
mov ecx [ecx] +
test ecx ecx +
jz loc_475D98  +
jmp loc_475D8B  +
mov eax offset aNull_0 +
jmp loc_475DA4  +
***
mov edi 1 +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebp [esp+44h+arg_0] +
mov eax [ebp+0A0h] +
mov ebx [ebp+64h] +
mov eax [eax+908h] +
test ebx ebx +
mov [esp+44h+var_24] eax +
jnz loc_475E4B  +
jmp loc_475EA7  +
mov eax [ebp+4] +
mov eax [eax+1B0h] +
mov eax [eax+164h] +
test eax eax +
jz loc_475E44  +
mov [esp+44h+var_3C] ebx +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] offset aBWarningSh_l_0 +
call eax  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_475EA7  +
mov eax [ebx+8Ch] +
test byte ptr [eax+8] 80h +
jz loc_475E44  +
mov edx [eax+1Ch] +
test edx edx +
jz loc_475E20  +
mov ecx [ebp+0A0h] +
cmp edx [ecx+214h] +
jb loc_475F30  +
mov eax [ebx+94h] +
xor edi edi +
mov [esp+44h+var_38] edx +
mov [esp+44h+var_3C] ebx +
mov [esp+44h+var_44] offset aBSh_linkDInSec +
mov [esp+44h+var_40] eax +
call off_4BFA04  +
mov eax [ebx+8Ch] +
xor ecx ecx +
mov [eax+64h] ecx +
lea esi [esi+0] +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_475E4B  +
mov eax [esp+44h+var_24] +
cmp eax 0FFFFFFFFh +
jz loc_475F80  +
test eax eax +
jz loc_475F80  +
mov [esp+44h+var_28] 0 +
mov edx edi +
mov eax [ebp+0A0h] +
mov edi [esp+44h+var_28] +
mov eax [eax+904h] +
mov ebx [eax+edi*4] +
test ebx ebx +
jz loc_475F50  +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_475F50  +
mov eax [ebx+30h] +
test eax eax +
jz loc_475F50  +
mov edi [ebx+18h] +
lea esi [eax+4] +
shr edi 2 +
jmp loc_475F05  +
mov eax [eax+8Ch] +
mov ecx [ebx+2Ch] +
mov [eax+78h] ecx +
add esi 4 +
sub edi 1 +
jz loc_475F6B  +
mov ecx [esi] +
mov eax [ecx+2Ch] +
test eax eax +
jnz loc_475EF6  +
mov eax [ecx+4] +
cmp eax 9 +
jz loc_475F20  +
cmp eax 4 +
jnz loc_475F90  +
mov eax [ebx+2Ch] +
sub dword ptr [eax+24h] 4 +
jmp loc_475F02  +
mov ecx [ecx+40h] +
mov ecx [ecx+edx*4] +
mov ecx [ecx+2Ch] +
test ecx ecx +
jz loc_475E70  +
mov [eax+64h] ecx +
jmp loc_475EA0  +
mov eax [esp+44h+var_28] +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] offset aBSectionGroupE +
mov [esp+44h+var_3C] eax +
call off_4BFA04  +
xor edx edx +
add [esp+44h+var_28] 1 +
mov eax [esp+44h+var_28] +
cmp [esp+44h+var_24] eax +
jnz loc_475EC6  +
mov edi edx +
add esp 3Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx off_4BFA04 +
mov ecx [ecx] +
mov [esp+44h+var_20] edx +
mov edx [ebx+2Ch] +
test ecx ecx +
mov edx [edx] +
mov [esp+44h+var_1C] edx +
mov edx [ebp+0A0h] +
mov edx [edx+3Ch] +
mov [esp+44h+var_18] edx +
mov edx offset unk_5017F2 +
jnz loc_475FE3  +
mov ecx [esp+44h+var_1C] +
mov [esp+44h+var_3C] eax +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_38] edx +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_34] ecx +
mov [esp+44h+var_44] offset aBUnknownDSecti +
call eax  +
xor edx edx +
jmp loc_475F02  +
mov edx [esp+44h+var_18] +
mov eax ebp +
call loc_475840  +
mov edx eax +
mov eax [esi] +
mov eax [eax+4] +
jmp loc_475FBB  +
***
mov eax [esp+8] +
mov eax [eax+8Ch] +
mov eax [eax+7Ch] +
test eax eax +
setnz al  +
movzx eax al +
retn   +
***
mov ecx [esp+8] +
mov edx [ecx+0Ch] +
mov edx [edx+24h] +
test edx edx +
jnz loc_476060  +
mov eax [esp+14h] +
mov ecx [esp+8] +
mov eax [eax+38h] +
add [ecx+4] eax +
xor eax eax +
retn   +
***
mov edx [ecx+8] +
test edx edx +
jz loc_47604E  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov esi [esp+44h] +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jz loc_476095  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esi+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_476088  +
mov eax [esi+0A0h] +
mov edx [eax+934h] +
mov edx [edx+3Ch] +
test edx edx +
jnz loc_4760D0  +
mov edx [ebx+0A0h] +
mov edx [edx+20h] +
mov [eax+20h] edx +
mov eax [esi+0A0h] +
mov edx [eax+934h] +
mov dword ptr [edx+3Ch] 1 +
mov edx [ebx+0A0h] +
mov edx [edx+20Ch] +
mov [eax+20Ch] edx +
mov edx [ebx+0A0h] +
mov eax [esi+0A0h] +
movzx edx byte ptr [edx+7] +
mov [eax+7] dl +
mov [esp+4] esi +
mov [esp] ebx +
call sub_48EF90  +
mov eax [ebx+0A0h] +
mov [esp+10h] eax +
mov ebp [eax+40h] +
mov eax [esi+0A0h] +
mov edx [eax+40h] +
test edx edx +
jz loc_476088  +
test ebp ebp +
jz loc_476088  +
mov eax [eax+214h] +
test eax eax +
jz loc_476088  +
lea eax [edx+eax*4] +
mov edi edx +
mov [esp+8] eax +
jmp loc_47614D  +
add edi 4 +
cmp edi [esp+8] +
jz loc_476088  +
mov ecx [edi] +
test ecx ecx +
jz loc_476140  +
cmp dword ptr [ecx+4] 8 +
jnz loc_476140  +
mov eax [ecx+18h] +
test eax eax +
mov [esp+0Ch] eax +
jz loc_476140  +
mov eax [ecx+20h] +
test eax eax +
mov [esp+18h] eax +
jz loc_476176  +
mov eax [ecx+1Ch] +
test eax eax +
jnz loc_476140  +
mov eax [esp+10h] +
mov ebx [eax+214h] +
test ebx ebx +
jz loc_476140  +
mov esi [ecx+8] +
xor eax eax +
mov [esp+14h] edi +
jmp loc_476197  +
add eax 1 +
cmp eax ebx +
jz loc_476205  +
mov edx [ebp+eax*4+0] +
cmp [edx+8] esi +
jnz loc_476190  +
mov edi [ecx+24h] +
cmp [edx+24h] edi +
jnz loc_476190  +
mov edi [ecx+28h] +
cmp [edx+28h] edi +
jnz loc_476190  +
mov edi [esp+0Ch] +
cmp edi [edx+18h] +
jnz loc_476190  +
mov edi [ecx+0Ch] +
cmp [edx+0Ch] edi +
jnz loc_476190  +
mov edi [edx+20h] +
cmp [esp+18h] edi +
mov [esp+1Ch] edi +
jnz loc_47620E  +
mov edi [ecx+1Ch] +
cmp [edx+1Ch] edi +
jz loc_476190  +
mov eax [esp+18h] +
mov edi [esp+14h] +
mov [esp+1Ch] eax +
cmp dword ptr [ecx+1Ch] 0 +
jnz loc_4761EE  +
mov eax [edx+1Ch] +
mov [ecx+1Ch] eax +
cmp dword ptr [esp+18h] 0 +
jnz loc_476140  +
mov eax [esp+1Ch] +
mov [ecx+20h] eax +
jmp loc_476140  +
***
mov edi [esp+14h] +
jmp loc_476140  +
***
mov edi [esp+14h] +
jmp loc_4761E2  +
***
mov edx [esp+arg_0] +
mov eax [edx+0A0h] +
mov ecx [eax+914h] +
test ecx ecx +
jz loc_4762BA  +
mov esi [eax+918h] +
test esi esi +
jz loc_4762B0  +
mov eax [esp+arg_4] +
mov ecx [esp+arg_8] +
movzx ebx word ptr [eax+30h] +
movsx eax bx +
shr eax 1Fh +
and ebx 7FFFh +
mov [ecx] eax +
mov eax offset unk_5017F2 +
jz loc_4762A9  +
cmp ebx 1 +
jz loc_4762BF  +
mov edx [edx+0A0h] +
cmp ebx [edx+238h] +
jbe loc_4762C7  +
mov esi [edx+244h] +
test esi esi +
jz loc_4762A9  +
mov edx [esi+18h] +
test edx edx +
jnz loc_476297  +
jmp loc_4762A2  +
mov edx [edx+14h] +
test edx edx +
jz loc_4762A2  +
movzx ecx word ptr [edx+6] +
cmp ecx ebx +
jnz loc_476290  +
mov eax [edx+10h] +
mov esi [esi+1Ch] +
test esi esi +
jnz loc_476282  +
pop ebx  +
pop esi  +
retn   +
mov ebx [eax+91Ch] +
test ebx ebx +
jnz loc_476244  +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov eax offset aBase +
pop ebx  +
pop esi  +
retn   +
mov ecx [edx+240h] +
lea eax [ebx+ebx*4] +
pop ebx  +
pop esi  +
lea eax [ecx+eax*8] +
mov eax [eax-10h] +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+4Ch] +
mov ebx [esp+44h] +
mov edi [esp+48h] +
cmp eax 1 +
jz loc_476440  +
jb loc_476426  +
cmp eax 2 +
jnz loc_47641E  +
mov eax [edi+10h] +
test eax eax +
jz loc_476570  +
mov esi [eax] +
mov eax [esp+40h] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+0CCh] +
test eax eax +
jz loc_476496  +
mov edx [esp+40h] +
mov [esp+8] edi +
mov [esp+4] ebx +
mov [esp] edx +
call eax  +
test eax eax +
mov ebp eax +
jz loc_476496  +
mov [esp+8] esi +
mov dword ptr [esp+4] offset asc_501A4C +
mov [esp] ebx +
call fprintf  +
mov eax [edi+10h] +
test eax eax +
jz loc_4764B2  +
test byte ptr [eax+15h] 10h +
jz loc_4764B2  +
mov eax [edi+18h] +
mov [esp+8] eax +
mov eax [esp+40h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_44C420  +
lea eax [esp+1Ch] +
mov [esp+8] eax +
mov eax [esp+40h] +
mov [esp+4] edi +
mov [esp] eax +
call sub_476220  +
test eax eax +
mov esi eax +
jz loc_4763CC  +
mov eax [esp+1Ch] +
mov [esp+8] esi +
test eax eax +
jnz loc_4764C0  +
mov dword ptr [esp+4] offset a11s +
mov [esp] ebx +
call fprintf  +
movzx eax byte ptr [edi+25h] +
cmp al 1 +
jz loc_476545  +
jb loc_47640A  +
cmp al 2 +
jz loc_476520  +
cmp al 3 +
jnz loc_476501  +
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 0Bh +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset a_protected +
call fwrite  +
mov [esp+8] ebp +
mov dword ptr [esp+4] offset asc_501A87 +
mov [esp] ebx +
call fprintf  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [edi+4] +
mov [esp+4] ebx +
mov [esp] eax +
call fputs  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 4 +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aElf +
call fwrite  +
mov eax [edi+8] +
mov [esp+4] ebx +
mov [esp+8] eax +
mov eax [esp+40h] +
mov [esp] eax +
call sub_44C420  +
mov eax [edi+0Ch] +
mov [esp] ebx +
mov dword ptr [esp+4] offset aLx_0 +
mov [esp+8] eax +
call fprintf  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+40h] +
mov ebp [edi+4] +
mov [esp+8] edi +
mov [esp+4] ebx +
mov [esp] eax +
call sub_45A8E0  +
jmp loc_47634E  +
***
mov eax [edi+1Ch] +
jmp loc_47637A  +
***
mov dword ptr [esp+4] offset asc_501A59 +
mov [esp] ebx +
call fprintf  +
mov [esp] esi +
mov esi 0Ah +
call strlen  +
sub esi eax +
test esi esi +
jle loc_4763CC  +
mov [esp+4] ebx +
mov dword ptr [esp] 20h +
call putc  +
sub esi 1 +
jnz loc_4764E7  +
jmp loc_4763CC  +
***
mov [esp+8] eax +
mov dword ptr [esp+4] offset a0x02x +
mov [esp] ebx +
call fprintf  +
jmp loc_47640A  +
***
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 8 +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset a_hidden +
call fwrite  +
jmp loc_47640A  +
***
mov [esp+0Ch] ebx +
mov dword ptr [esp+8] 0Ah +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset a_internal +
call fwrite  +
jmp loc_47640A  +
***
mov esi offset aNone_20 +
jmp loc_476318  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+48h+arg_0] +
mov esi [ebx+0A0h] +
mov edx [esi+214h] +
cmp edx [esp+48h+arg_4] +
jbe loc_47672B  +
mov eax ds:dword_514098 +
add eax 1 +
cmp eax 3 +
mov ds:dword_514098 eax +
ja loc_476733  +
mov eax [esp+48h+arg_4] +
shl eax 2 +
mov [esp+48h+var_30] eax +
mov eax [esi+40h] +
mov edx offset unk_5017F2 +
mov edi [esp+48h+var_30] +
mov ebp [eax+edi] +
mov eax [esi+3Ch] +
mov ecx [ebp+0] +
test ecx ecx +
jnz loc_476984  +
mov eax [ebx+4] +
mov ecx [eax+1B0h] +
mov eax [ebp+4] +
cmp eax 0Ah +
jz loc_476A54  +
jbe loc_476790  +
cmp eax 12h +
jz loc_477013  +
jbe loc_476900  +
cmp eax 6FFFFFFDh +
jz loc_476F78  +
jbe loc_476ED2  +
cmp eax 6FFFFFFEh +
jz loc_476BF8  +
cmp eax 6FFFFFFFh +
jnz loc_476EE0  +
cmp dword ptr [ebp+28h] 2 +
jnz loc_4766F0  +
mov eax [ebx+0A0h] +
mov edi [esp+48h+arg_4] +
mov ecx [ebp+0] +
mov [eax+914h] edi +
mov eax [ebx+0A0h] +
mov [eax+160h] ecx +
mov ecx [ebp+4] +
mov [eax+164h] ecx +
mov ecx [ebp+8] +
mov [eax+168h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+16Ch] ecx +
mov ecx [ebp+10h] +
mov [eax+170h] ecx +
mov ecx [ebp+14h] +
mov [eax+174h] ecx +
mov ecx [ebp+18h] +
mov [eax+178h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+17Ch] ecx +
mov ecx [ebp+20h] +
mov [eax+180h] ecx +
mov ecx [ebp+24h] +
mov [eax+184h] ecx +
mov ecx [ebp+28h] +
mov [eax+188h] ecx +
mov ecx [ebp+2Ch] +
mov [eax+18Ch] ecx +
mov ecx [ebp+30h] +
mov [eax+190h] ecx +
mov ecx [ebp+34h] +
mov [eax+194h] ecx +
mov eax edi +
mov [esp+48h+var_3C] eax +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
call sub_4775A0  +
jmp loc_4766F2  +
mov ebx ebp +
lea esi [esi+0] +
xor eax eax +
mov edx ds:dword_514090 +
test edx edx +
jz loc_476708  +
cmp ds:dword_514094 ebx +
jz loc_476A60  +
mov edi ds:dword_514098 +
lea edx [edi-1] +
test edx edx +
mov ds:dword_514098 edx +
jnz loc_47672B  +
mov ds:dword_514090 0 +
mov ds:dword_514094 ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ds:dword_514094 ebx +
jz loc_476EC0  +
mov ds:dword_514090 0 +
shl edx 2 +
mov [esp+48h+var_44] edx +
mov [esp+48h+var_48] ebx +
call sub_458B60  +
mov ds:dword_514094 ebx +
mov ds:dword_514090 eax +
mov esi [esp+48h+arg_4] +
lea edi ds:0[esi*4] +
add eax edi +
mov ebp [eax] +
mov [esp+48h+var_30] edi +
test ebp ebp +
jnz loc_476A70  +
mov dword ptr [eax] 1 +
mov esi [ebx+0A0h] +
jmp loc_4765C4  +
cmp eax 4 +
jz loc_476C93  +
ja loc_4769A0  +
cmp eax 1 +
jz loc_476EB0  +
nop   +
lea esi [esi+0] +
jb loc_476A54  +
cmp eax 2 +
jz loc_476A88  +
cmp eax 3 +
jnz loc_476EE0  +
mov edi [ebp+2Ch] +
test edi edi +
jnz loc_476A54  +
mov eax [esp+48h+arg_4] +
cmp [esi+3Ch] eax +
jz loc_4773A2  +
mov edi [ebx+0A0h] +
mov ecx [esp+48h+arg_4] +
mov esi [edi+90Ch] +
mov eax [edi+40h] +
mov [esp+48h+var_2C] esi +
mov esi [eax+esi*4] +
cmp [esi+1Ch] ecx +
jz loc_47744B  +
mov esi [edi+910h] +
mov ecx [eax+esi*4] +
mov [esp+48h+var_28] esi +
mov esi [esp+48h+arg_4] +
cmp [ecx+1Ch] esi +
jz loc_4768B8  +
mov esi [esp+48h+var_2C] +
test esi esi +
jz loc_476831  +
mov ecx [esp+48h+var_28] +
test ecx ecx +
jnz loc_476EB0  +
mov ecx [edi+214h] +
cmp ecx 1 +
jbe loc_476EB0  +
mov [esp+48h+var_28] edx +
mov edx edi +
mov esi 1 +
mov [esp+48h+var_2C] ebp +
mov edi ecx +
mov ebp ebx +
mov ecx edx +
mov ebx [esp+48h+arg_4] +
jmp loc_47686E  +
add esi 1 +
cmp esi edi +
jz loc_476EA6  +
mov eax [ecx+40h] +
mov eax [eax+esi*4] +
cmp [eax+1Ch] ebx +
jnz loc_476860  +
cmp esi ebx +
jz loc_4766E8  +
mov [esp+48h+var_44] esi +
mov [esp+48h+var_48] ebp +
call sub_476580  +
test eax eax +
jz loc_4766E8  +
mov ecx [ebp+0A0h] +
cmp [ecx+90Ch] esi +
jz loc_477443  +
cmp [ecx+910h] esi +
jnz loc_476860  +
mov ebx ebp +
mov edx [esp+48h+var_28] +
mov edi ecx +
mov ebp [esp+48h+var_2C] +
add edi 128h +
mov ecx 0Eh +
mov esi ebp +
movs   +
mov edi [esp+48h+var_30] +
mov ecx [ebx+0A0h] +
lea eax [ecx+128h] +
mov ecx [ecx+40h] +
mov [ecx+edi] eax +
mov edi [esp+48h+arg_4] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_3C] edi +
call sub_4775A0  +
jmp loc_4766F2  +
cmp eax 10h +
ja loc_477125  +
cmp eax 0Eh +
lea esi [esi+0] +
jnb loc_476EB0  +
cmp eax 0Bh +
jnz loc_476EE0  +
mov esi [ebx+0A0h] +
mov eax [esi+910h] +
cmp eax [esp+48h+arg_4] +
jz loc_476A54  +
mov ecx [ecx+174h] +
mov edi [ebp+28h] +
movzx ecx byte ptr [ecx+5] +
cmp edi ecx +
jnz loc_4766F0  +
mov ecx [ebp+18h] +
imul edi [ebp+20h] +
cmp edi ecx +
ja loc_4771C8  +
test eax eax +
mov eax [esp+48h+arg_4] +
jz loc_4772D6  +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBWarningMult_0 +
call off_4BFA04  +
mov eax 1 +
jmp loc_4766F2  +
mov edx eax +
mov eax ebx +
call loc_475840  +
test eax eax +
mov edx eax +
jz loc_4766F0  +
jmp loc_4765E1  +
cmp eax 8 +
ja loc_476C93  +
cmp eax 7 +
lea esi [esi+0] +
jnb loc_476EB0  +
cmp eax 5 +
jz loc_476EB0  +
cmp eax 6 +
jnz loc_476EE0  +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_3C] eax +
call sub_4775A0  +
test eax eax +
jz loc_4766F0  +
mov eax [ebx+0A0h] +
mov edx [ebp+1Ch] +
mov ecx [eax+214h] +
cmp edx ecx +
ja loc_4771E1  +
mov esi [eax+40h] +
mov edx [esi+edx*4] +
test edx edx +
jz loc_4766F0  +
cmp dword ptr [edx+4] 3 +
jz loc_476A54  +
mov eax [eax+910h] +
test eax eax +
jnz loc_47720D  +
cmp ecx 1 +
jbe loc_476A54  +
mov edx [esi+4] +
mov eax 1 +
cmp dword ptr [edx+4] 0Bh +
jnz loc_476A4D  +
jmp loc_4772C6  +
mov edx [esi+eax*4] +
cmp dword ptr [edx+4] 0Bh +
jz loc_4772C6  +
add eax 1 +
cmp eax ecx +
jnz loc_476A40  +
mov eax 1 +
jmp loc_4766F2  +
mov edi [esp+48h+var_30] +
mov dword ptr [edx+edi] 0 +
jmp loc_476708  +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBWarningLoopIn +
call off_4BFA04  +
xor eax eax +
jmp loc_47672B  +
mov esi [ebx+0A0h] +
mov eax [esi+90Ch] +
cmp eax [esp+48h+arg_4] +
jz loc_476A54  +
mov ecx [ecx+174h] +
mov edi [ebp+28h] +
movzx ecx byte ptr [ecx+5] +
cmp edi ecx +
jnz loc_4766F0  +
mov ecx [ebp+18h] +
imul edi [ebp+20h] +
cmp edi ecx +
ja loc_4771C8  +
test eax eax +
mov eax [esp+48h+arg_4] +
jnz loc_477508  +
mov [esi+90Ch] eax +
mov ecx [ebp+0] +
mov eax [ebx+0A0h] +
mov edi [esp+48h+var_30] +
mov [eax+48h] ecx +
mov ecx [ebp+4] +
mov [eax+4Ch] ecx +
mov ecx [ebp+8] +
mov [eax+50h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+54h] ecx +
mov ecx [ebp+10h] +
mov [eax+58h] ecx +
mov ecx [ebp+14h] +
mov [eax+5Ch] ecx +
mov ecx [ebp+18h] +
mov [eax+60h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+64h] ecx +
mov ecx [ebp+20h] +
mov [eax+68h] ecx +
mov ecx [ebp+24h] +
mov [eax+6Ch] ecx +
mov ecx [ebp+28h] +
mov [eax+70h] ecx +
mov ecx [ebp+2Ch] +
mov [eax+74h] ecx +
mov ecx [ebp+30h] +
mov [eax+78h] ecx +
mov ecx [ebp+34h] +
mov [eax+7Ch] ecx +
mov ecx [ebx+0A0h] +
mov eax [ecx+40h] +
lea ebp [ecx+48h] +
mov [eax+edi] ebp +
mov esi [ebx+28h] +
mov eax esi +
and esi 0FF80001Fh +
shr eax 5 +
and eax 3FFFFh +
mov edi eax +
or edi 10h +
shl edi 5 +
or esi edi +
mov [ebx+28h] esi +
test byte ptr [ecx+50h] 2 +
jz loc_476B6B  +
test al 40h +
jnz loc_47756E  +
mov esi [ebx+0A0h] +
mov eax [esi+208h] +
test eax eax +
jz loc_476BA2  +
mov edi [esp+48h+arg_4] +
cmp [eax+1Ch] edi +
mov edx [esp+48h+arg_4] +
jnz loc_476B99  +
jmp loc_476A54  +
cmp [eax+1Ch] edx +
jz loc_476A54  +
mov eax [eax+3Ch] +
test eax eax +
nop   +
jnz loc_476B90  +
mov eax [esp+48h+arg_4] +
mov ecx [esi+214h] +
add eax 1 +
cmp ecx eax +
jbe loc_476BD5  +
mov edi [esi+40h] +
mov ebp [esp+48h+arg_4] +
jmp loc_476BC7  +
add eax 1 +
cmp ecx eax +
jbe loc_476BD5  +
mov edx [edi+eax*4] +
cmp dword ptr [edx+4] 12h +
jnz loc_476BC0  +
cmp [edx+1Ch] ebp +
jnz loc_476BC0  +
cmp eax ecx +
jz loc_477534  +
cmp eax [esp+48h+arg_4] +
jz loc_476A54  +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
call sub_476580  +
jmp loc_4766F2  +
mov eax [ebx+0A0h] +
mov edi [esp+48h+arg_4] +
mov ecx [ebp+0] +
mov [eax+91Ch] edi +
mov eax [ebx+0A0h] +
mov [eax+198h] ecx +
mov ecx [ebp+4] +
mov [eax+19Ch] ecx +
mov ecx [ebp+8] +
mov [eax+1A0h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+1A4h] ecx +
mov ecx [ebp+10h] +
mov [eax+1A8h] ecx +
mov ecx [ebp+14h] +
mov [eax+1ACh] ecx +
mov ecx [ebp+18h] +
mov [eax+1B0h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+1B4h] ecx +
mov ecx [ebp+20h] +
mov [eax+1B8h] ecx +
mov ecx [ebp+24h] +
mov [eax+1BCh] ecx +
mov ecx [ebp+28h] +
mov [eax+1C0h] ecx +
mov ecx [ebp+2Ch] +
mov [eax+1C4h] ecx +
mov ecx [ebp+30h] +
mov [eax+1C8h] ecx +
mov ecx [ebp+34h] +
mov [eax+1CCh] ecx +
mov eax edi +
jmp loc_4766D2  +
mov edi [ebx+0A0h] +
cmp eax 9 +
mov eax [ecx+174h] +
mov esi [edi+214h] +
mov [esp+48h+var_2C] esi +
mov esi [ebp+28h] +
jz loc_47711C  +
movzx eax byte ptr [eax+4] +
cmp esi eax +
jnz loc_4766F0  +
mov eax [ebp+1Ch] +
cmp [esp+48h+var_2C] eax +
mov [esp+48h+var_28] eax +
jbe loc_477220  +
mov eax [ebx+28h] +
mov esi [edi+40h] +
shr eax 5 +
test al 42h +
jnz loc_476D56  +
mov eax [esp+48h+var_28] +
mov eax [esi+eax*4] +
mov eax [eax+4] +
cmp eax 2 +
jz loc_47726A  +
cmp eax 0Bh +
jz loc_47726A  +
mov ecx [esp+48h+var_2C] +
cmp ecx 1 +
jbe loc_476D72  +
mov [esp+48h+var_24] ebp +
mov eax 1 +
mov ebp ecx +
mov [esp+48h+var_20] edi +
xor edi edi +
mov [esp+48h+var_1C] 0 +
lea esi [esi+0] +
mov ecx [esi+eax*4] +
mov ecx [ecx+4] +
cmp ecx 0Bh +
jz loc_476D30  +
cmp ecx 2 +
jnz loc_476D3A  +
test edi edi +
jnz loc_477527  +
mov edi eax +
add eax 1 +
cmp eax ebp +
jnz loc_476D20  +
mov eax edi +
mov ebp [esp+48h+var_24] +
test eax eax +
mov edi [esp+48h+var_20] +
jz loc_476D72  +
mov [ebp+1Ch] eax +
mov [esp+48h+var_28] eax +
mov eax [esp+48h+var_28] +
mov eax [esi+eax*4] +
mov eax [eax+4] +
cmp eax 0Bh +
jz loc_47726A  +
cmp eax 2 +
jz loc_47726A  +
mov eax [esp+48h+var_28] +
cmp [edi+90Ch] eax +
jnz loc_476EB0  +
test eax eax +
jz loc_476EB0  +
mov eax [ebp+20h] +
test eax eax +
jz loc_476EB0  +
cmp [esp+48h+var_2C] eax +
jbe loc_476EB0  +
mov ecx [edi+40h] +
mov ecx [ecx+eax*4] +
mov ecx [ecx+4] +
cmp ecx 9 +
jz loc_476EB0  +
cmp ecx 4 +
jz loc_476EB0  +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
call sub_476580  +
test eax eax +
jz loc_4766F0  +
mov edx [ebx+0A0h] +
mov eax [ebp+20h] +
cmp eax [edx+214h] +
jnb loc_4766F0  +
mov edx [edx+40h] +
mov eax [edx+eax*4] +
mov eax [eax+2Ch] +
test eax eax +
mov [esp+48h+var_2C] eax +
jz loc_4766F0  +
mov eax [eax+8Ch] +
lea edx [eax+4Ch] +
add eax 3Ch +
cmp dword ptr [ebp+4] 4 +
cmovnz edx eax +
cmp dword ptr [edx] 0 +
jnz loc_4766F0  +
mov [esp+48h+var_44] 38h +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_28] edx +
call sub_458A80  +
test eax eax +
jz loc_4766F0  +
mov edx [esp+48h+var_28] +
mov edi eax +
mov ecx 0Eh +
mov esi ebp +
movs   +
mov edi [esp+48h+var_30] +
mov [edx] eax +
mov edx [ebx+0A0h] +
mov ecx [ebp+28h] +
mov edx [edx+40h] +
mov [edx+edi] eax +
mov eax [esp+48h+var_2C] +
mov esi [eax+4Ch] +
xor eax eax +
test ecx ecx +
jz loc_476E68  +
mov eax [ebp+18h] +
xor edx edx +
div  ecx +
mov edi [esp+48h+var_2C] +
add eax esi +
mov edx [ebp+14h] +
mov [edi+4Ch] eax +
mov eax [ebp+10h] +
or dword ptr [edi+14h] 4 +
cmp dword ptr [ebp+18h] 0 +
mov dword ptr [edi+44h] 0 +
mov [edi+58h] eax +
mov [edi+5Ch] edx +
jz loc_476E98  +
cmp dword ptr [ebp+4] 4 +
jnz loc_476E98  +
or byte ptr [edi+19h] 4 +
or dword ptr [ebx+28h] 20h +
mov eax 1 +
jmp loc_4766F2  +
mov ebx ebp +
mov edx [esp+48h+var_28] +
mov ebp [esp+48h+var_2C] +
mov eax [esp+48h+arg_4] +
jmp loc_4766D2  +
mov eax ds:dword_514090 +
test eax eax +
jnz loc_476763  +
jmp loc_476749  +
lea esi [eax-6FFFFFF6h] +
cmp esi 1 +
jbe loc_476EB0  +
lea esi [esi+0] +
cmp eax 6FFFFFF5h +
jz loc_4770E6  +
cmp eax [ecx+190h] +
jz loc_4770E6  +
mov edi [esp+48h+arg_4] +
mov eax [ecx+4Ch] +
mov [esp+48h+var_2C] edx +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_3C] edi +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
call eax  +
mov edx [esp+48h+var_2C] +
test eax eax +
jnz loc_476A54  +
mov eax [ebp+4] +
test eax eax +
js loc_47729C  +
lea ecx [eax-70000000h] +
cmp ecx 0FFFFFFFh +
jbe loc_477382  +
lea ecx [eax-60000000h] +
cmp ecx 0FFFFFFFh +
ja loc_4774E8  +
test byte ptr [ebp+9] 1 +
jz loc_476EB0  +
mov [esp+48h+var_3C] eax +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBDonTKnowHowTo +
call off_4BFA04  +
xor eax eax +
jmp loc_4766F2  +
mov eax [ebx+0A0h] +
mov edi [esp+48h+arg_4] +
mov ecx [ebp+0] +
mov [eax+918h] edi +
mov eax [ebx+0A0h] +
mov [eax+1D0h] ecx +
mov ecx [ebp+4] +
mov [eax+1D4h] ecx +
mov ecx [ebp+8] +
mov [eax+1D8h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+1DCh] ecx +
mov ecx [ebp+10h] +
mov [eax+1E0h] ecx +
mov ecx [ebp+14h] +
mov [eax+1E4h] ecx +
mov ecx [ebp+18h] +
mov [eax+1E8h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+1ECh] ecx +
mov ecx [ebp+20h] +
mov [eax+1F0h] ecx +
mov ecx [ebp+24h] +
mov [eax+1F4h] ecx +
mov ecx [ebp+28h] +
mov [eax+1F8h] ecx +
mov ecx [ebp+2Ch] +
mov [eax+1FCh] ecx +
mov ecx [ebp+30h] +
mov [eax+200h] ecx +
mov ecx [ebp+34h] +
mov [eax+204h] ecx +
mov eax edi +
jmp loc_4766D2  +
mov eax [ebx+0A0h] +
mov eax [eax+208h] +
test eax eax +
jz loc_477045  +
mov edi [esp+48h+arg_4] +
cmp [eax+38h] edi +
mov edx [esp+48h+arg_4] +
jnz loc_47703E  +
jmp loc_476A54  +
cmp [eax+38h] edx +
jz loc_476A54  +
mov eax [eax+3Ch] +
test eax eax +
jnz loc_477035  +
mov [esp+48h+var_44] 40h +
mov [esp+48h+var_48] ebx +
call sub_458A80  +
test eax eax +
jz loc_4766F0  +
mov edx [ebp+0] +
mov edi [esp+48h+arg_4] +
mov [eax] edx +
mov edx [ebp+4] +
mov [eax+38h] edi +
mov [eax+4] edx +
mov edx [ebp+8] +
mov [eax+8] edx +
mov edx [ebp+0Ch] +
mov [eax+0Ch] edx +
mov edx [ebp+10h] +
mov [eax+10h] edx +
mov edx [ebp+14h] +
mov [eax+14h] edx +
mov edx [ebp+18h] +
mov [eax+18h] edx +
mov edx [ebp+1Ch] +
mov [eax+1Ch] edx +
mov edx [ebp+20h] +
mov [eax+20h] edx +
mov edx [ebp+24h] +
mov [eax+24h] edx +
mov edx [ebp+28h] +
mov [eax+28h] edx +
mov edx [ebp+2Ch] +
mov [eax+2Ch] edx +
mov edx [ebp+30h] +
mov [eax+30h] edx +
mov edx [ebp+34h] +
mov [eax+34h] edx +
mov edx [ebx+0A0h] +
mov ecx [edx+208h] +
mov [eax+3Ch] ecx +
mov [edx+208h] eax +
mov edx [ebx+0A0h] +
mov edi [esp+48h+var_30] +
mov edx [edx+40h] +
mov [edx+edi] eax +
mov eax 1 +
jmp loc_4766F2  +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_3C] eax +
call sub_4775A0  +
test eax eax +
jz loc_4766F0  +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
call sub_48F100  +
mov eax 1 +
jmp loc_4766F2  +
movzx eax byte ptr [eax+3] +
jmp loc_476CB9  +
mov eax [ebp+18h] +
cmp eax 3 +
jbe loc_4766F0  +
cmp dword ptr [ebp+28h] 4 +
jnz loc_4766F0  +
test al 3 +
jnz loc_4766F0  +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_3C] eax +
call sub_4775A0  +
test eax eax +
jz loc_4766F0  +
mov edx [ebp+30h] +
test edx edx +
jz loc_476A54  +
mov eax [ebp+18h] +
shr eax 2 +
test eax eax +
jz loc_4766F0  +
test byte ptr [edx] 1 +
jz loc_47718B  +
mov ecx [ebp+2Ch] +
or dword ptr [ecx+14h] 20000h +
lea esi [edx-4] +
sub eax 1 +
jz loc_476A54  +
mov edx [esi+eax*4+4] +
test edx edx +
jz loc_47718E  +
mov edx [edx+2Ch] +
test edx edx +
jz loc_47718E  +
mov ecx [edx+8Ch] +
cmp dword ptr [ecx+7Ch] 0 +
jz loc_47718E  +
mov eax [ebp+2Ch] +
mov eax [eax+8Ch] +
mov [eax+7Ch] edx +
mov eax 1 +
jmp loc_4766F2  +
test ecx ecx +
jnz loc_4766F0  +
mov dword ptr [ebp+20h] 0 +
mov eax 1 +
jmp loc_4766F2  +
mov [esp+48h+var_48] ebx +
call sub_4536B0  +
cmp eax 6 +
jz loc_4771F7  +
cmp eax 9 +
jnz loc_4766F0  +
mov eax [ebp+1Ch] +
sub eax 0FF00h +
cmp eax 1 +
setbe al  +
movzx eax al +
jmp loc_4766F2  +
mov eax [esi+eax*4] +
mov eax [eax+1Ch] +
mov [ebp+1Ch] eax +
mov eax 1 +
jmp loc_4766F2  +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_3C] edx +
mov [esp+48h+var_2C] edx +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_38] eax +
mov eax [esp+48h+var_28] +
mov [esp+48h+var_48] offset aBInvalidLinkLu +
mov [esp+48h+var_40] eax +
call off_4BFA04  +
mov eax [esp+48h+arg_4] +
mov edx [esp+48h+var_2C] +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_3C] eax +
mov [esp+48h+var_40] edx +
call sub_4775A0  +
jmp loc_4766F2  +
mov eax [esp+48h+var_28] +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_24] edx +
mov [esp+48h+var_44] eax +
call sub_476580  +
mov edx [esp+48h+var_24] +
test eax eax +
jz loc_4766F0  +
mov eax [ebp+1Ch] +
mov edi [ebx+0A0h] +
mov [esp+48h+var_28] eax +
jmp loc_476D72  +
test byte ptr [ebp+8] 2 +
jz loc_476EB0  +
mov [esp+48h+var_3C] eax +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBDonTKnowHow_0 +
call off_4BFA04  +
xor eax eax +
jmp loc_4766F2  +
mov eax [edx+1Ch] +
mov [ebp+1Ch] eax +
mov eax 1 +
jmp loc_4766F2  +
mov [esi+910h] eax +
mov ecx [ebp+0] +
mov eax [ebx+0A0h] +
mov edi [esp+48h+var_30] +
mov [eax+0F0h] ecx +
mov ecx [ebp+4] +
mov [eax+0F4h] ecx +
mov ecx [ebp+8] +
mov [eax+0F8h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+0FCh] ecx +
mov ecx [ebp+10h] +
mov [eax+100h] ecx +
mov ecx [ebp+14h] +
mov [eax+104h] ecx +
mov ecx [ebp+18h] +
mov [eax+108h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+10Ch] ecx +
mov ecx [ebp+20h] +
mov [eax+110h] ecx +
mov ecx [ebp+24h] +
mov [eax+114h] ecx +
mov ecx [ebp+28h] +
mov [eax+118h] ecx +
mov ecx [ebp+2Ch] +
mov [eax+11Ch] ecx +
mov ecx [ebp+30h] +
mov [eax+120h] ecx +
mov ecx [ebp+34h] +
mov [eax+124h] ecx +
mov ecx [ebx+0A0h] +
lea eax [ecx+0F0h] +
mov ecx [ecx+40h] +
mov [ecx+edi] eax +
or dword ptr [ebx+28h] 200h +
jmp loc_4768DD  +
mov [esp+48h+var_3C] eax +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBDonTKnowHow_1 +
call off_4BFA04  +
xor eax eax +
jmp loc_4766F2  +
mov eax [ebx+0A0h] +
mov edx [ebp+0] +
mov edi [esp+48h+var_30] +
mov [eax+80h] edx +
mov edx [ebp+4] +
mov [eax+84h] edx +
mov edx [ebp+8] +
mov [eax+88h] edx +
mov edx [ebp+0Ch] +
mov [eax+8Ch] edx +
mov edx [ebp+10h] +
mov [eax+90h] edx +
mov edx [ebp+14h] +
mov [eax+94h] edx +
mov edx [ebp+18h] +
mov [eax+98h] edx +
mov edx [ebp+1Ch] +
mov [eax+9Ch] edx +
mov edx [ebp+20h] +
mov [eax+0A0h] edx +
mov edx [ebp+24h] +
mov [eax+0A4h] edx +
mov edx [ebp+28h] +
mov [eax+0A8h] edx +
mov edx [ebp+2Ch] +
mov [eax+0ACh] edx +
mov edx [ebp+30h] +
mov [eax+0B0h] edx +
mov edx [ebp+34h] +
mov [eax+0B4h] edx +
mov eax [ebx+0A0h] +
mov edx [eax+40h] +
sub eax 0FFFFFF80h +
mov [edx+edi] eax +
mov eax 1 +
jmp loc_4766F2  +
mov ebx ebp +
mov ebp [esp+48h+var_2C] +
mov edi ecx +
mov eax [ebp+0] +
mov [edi+0B8h] eax +
mov eax [ebp+4] +
mov [edi+0BCh] eax +
mov eax [ebp+8] +
mov [edi+0C0h] eax +
mov eax [ebp+0Ch] +
mov [edi+0C4h] eax +
mov eax [ebp+10h] +
mov [edi+0C8h] eax +
mov eax [ebp+14h] +
mov [edi+0CCh] eax +
mov eax [ebp+18h] +
mov [edi+0D0h] eax +
mov eax [ebp+1Ch] +
mov [edi+0D4h] eax +
mov eax [ebp+20h] +
mov [edi+0D8h] eax +
mov eax [ebp+24h] +
mov [edi+0DCh] eax +
mov eax [ebp+28h] +
mov [edi+0E0h] eax +
mov eax [ebp+2Ch] +
mov [edi+0E4h] eax +
mov eax [ebp+30h] +
mov [edi+0E8h] eax +
mov eax [ebp+34h] +
mov [edi+0ECh] eax +
mov eax [ebx+0A0h] +
mov edi [esp+48h+var_30] +
mov edx [eax+40h] +
add eax 0B8h +
mov [edx+edi] eax +
mov eax 1 +
jmp loc_4766F2  +
mov [esp+48h+var_3C] eax +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBDonTKnowHow_2 +
call off_4BFA04  +
xor eax eax +
jmp loc_4766F2  +
mov [esp+48h+var_40] eax +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] offset aBWarningMult_1 +
call off_4BFA04  +
mov eax 1 +
jmp loc_4766F2  +
mov ebp [esp+48h+var_24] +
mov edi [esp+48h+var_20] +
jmp loc_476D72  +
cmp [esp+48h+arg_4] 1 +
jbe loc_477593  +
mov ecx [esi+40h] +
mov eax 1 +
mov esi [esp+48h+arg_4] +
jmp loc_47755B  +
add eax 1 +
cmp eax esi +
jz loc_476A54  +
mov edx [ecx+eax*4] +
cmp dword ptr [edx+4] 12h +
jnz loc_477550  +
cmp [edx+1Ch] esi +
jnz loc_477550  +
jmp loc_476BDD  +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_3C] eax +
call sub_4775A0  +
test eax eax +
jz loc_4766F0  +
jmp loc_476B6B  +
mov eax 1 +
jmp loc_476BDD  +
***
push edi  +
push esi  +
push ebx  +
sub esp 8Ch +
mov ebx [esp+8Ch+arg_4] +
mov edx [ebx+2Ch] +
test edx edx +
jz loc_4775C8  +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+8Ch+arg_8] +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] eax +
call sub_44D940  +
test eax eax +
mov ebp eax +
jz loc_477698  +
mov [ebx+2Ch] eax +
mov edx [ebx] +
mov eax [eax+8Ch] +
mov [eax] edx +
mov edx [ebx+4] +
mov [eax+4] edx +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ebx+10h] +
mov [eax+10h] edx +
mov edx [ebx+14h] +
mov [eax+14h] edx +
mov edx [ebx+18h] +
mov [eax+18h] edx +
mov edx [ebx+1Ch] +
mov [eax+1Ch] edx +
mov edx [ebx+20h] +
mov [eax+20h] edx +
mov edx [ebx+24h] +
mov [eax+24h] edx +
mov edx [ebx+28h] +
mov [eax+28h] edx +
mov edx [ebx+2Ch] +
mov [eax+2Ch] edx +
mov edx [ebx+30h] +
mov [eax+30h] edx +
mov edx [ebx+34h] +
mov [eax+34h] edx +
mov edx [esp+8Ch+arg_C] +
mov [eax+5Ch] edx +
mov edx [ebx+4] +
mov [eax+4] edx +
mov edx [ebx+8] +
mov [eax+8] edx +
mov eax [ebx+10h] +
mov edx [ebx+14h] +
mov [ebp+50h] eax +
mov eax [ebx+0Ch] +
mov [ebp+54h] edx +
or byte ptr [ebp+18h] 1 +
mov [ebp+20h] eax +
mov [ebp+1Ch] eax +
mov eax [ebx+18h] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] eax +
call sub_44DB80  +
test eax eax +
jnz loc_4776A0  +
xor eax eax +
jmp loc_4775BD  +
mov eax [ebx+24h] +
mov [esp+8Ch+var_8C] eax +
call sub_45A590  +
mov [esp+8Ch+var_40] 0 +
mov [ebp+40h] eax +
mov eax [ebx+4] +
cmp eax 8 +
jz loc_478231  +
cmp eax 11h +
jz loc_4778DE  +
mov [esp+8Ch+var_40] 100h +
mov edx 100h +
mov eax [ebx+8] +
test al 2 +
jz loc_4776E6  +
or edx 3 +
mov [esp+8Ch+var_40] edx +
test al 1 +
jnz loc_4776F1  +
or edx 8 +
mov [esp+8Ch+var_40] edx +
test al 4 +
jz loc_477846  +
or edx 10h +
mov [esp+8Ch+var_40] edx +
test al 10h +
jz loc_477728  +
mov edx [esp+8Ch+var_40] +
mov ecx edx +
or ecx 800000h +
test al 20h +
mov [esp+8Ch+var_40] ecx +
mov ecx [ebx+28h] +
mov [ebp+78h] ecx +
jz loc_477728  +
or edx 1800000h +
mov [esp+8Ch+var_40] edx +
test ah 2 +
jnz loc_47786D  +
test ah 4 +
jnz loc_47785B  +
mov esi [esp+8Ch+var_40] +
test eax eax +
js loc_477AA6  +
test esi 1 +
jnz loc_47775E  +
mov eax [esp+8Ch+arg_8] +
cmp byte ptr [eax] 2Eh +
jz loc_477C6F  +
mov esi [esp+8Ch+arg_8] +
mov edi offset a_gnu_linkonce +
mov ecx 0Dh +
cmps   +
jnz loc_477784  +
mov eax [ebp+8Ch] +
mov edx [eax+7Ch] +
test edx edx +
jz loc_477CD5  +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+50h] +
test eax eax +
jz loc_4777B0  +
lea edx [esp+8Ch+var_40] +
mov [esp+8Ch+var_88] ebx +
mov [esp+8Ch+var_8C] edx +
call eax  +
test eax eax +
jz loc_477698  +
mov eax [esp+8Ch+var_40] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] eax +
call sub_44DA80  +
test eax eax +
jz loc_477698  +
cmp dword ptr [ebx+4] 7 +
jz loc_477CE2  +
mov eax [esp+8Ch+var_40] +
test al 1 +
mov [esp+8Ch+var_60] eax +
jz loc_477A6A  +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+0A0h] +
mov edi [eax+30h] +
mov esi [eax+44h] +
test edi edi +
jz loc_477A6A  +
mov eax [esi+10h] +
test eax eax +
jnz loc_477901  +
mov eax esi +
xor edx edx +
xor ecx ecx +
jmp loc_477838  +
add edx 1 +
add eax 20h +
cmp edx edi +
jz loc_4778F0  +
cmp dword ptr [eax+10h] 0 +
jnz loc_477901  +
cmp dword ptr [eax] 1 +
jnz loc_477820  +
cmp dword ptr [eax+18h] 1 +
sbb ecx 0FFFFFFFFh +
jmp loc_477820  +
test dl 2 +
jz loc_477700  +
or edx 20h +
mov [esp+8Ch+var_40] edx +
jmp loc_477700  +
mov edx [esp+8Ch+var_40] +
or dh 4 +
mov [esp+8Ch+var_40] edx +
mov esi edx +
jmp loc_47773E  +
mov eax [esp+8Ch+arg_0] +
mov edi [eax+0A0h] +
mov eax [edi+908h] +
test eax eax +
mov [esp+8Ch+var_64] eax +
jnz loc_477AB6  +
mov eax [edi+214h] +
test eax eax +
mov ecx eax +
mov [esp+8Ch+var_60] eax +
jz loc_477C60  +
mov eax [edi+40h] +
mov [esp+8Ch+var_68] 0 +
lea ecx [eax+ecx*4] +
jmp loc_4778BB  +
add eax 4 +
cmp eax ecx +
jz loc_477C54  +
mov edx [eax] +
cmp dword ptr [edx+4] 11h +
jnz loc_4778B0  +
mov esi [edx+18h] +
cmp esi 7 +
jbe loc_4778B0  +
cmp dword ptr [edx+28h] 4 +
jnz loc_4778B0  +
and esi 3 +
cmp esi 1 +
adc [esp+8Ch+var_68] 0 +
jmp loc_4778B0  +
mov [esp+8Ch+var_40] 2008100h +
mov edx 2008100h +
jmp loc_4776D8  +
cmp ecx 1 +
ja loc_477A9C  +
test edi edi +
jz loc_477A6A  +
mov eax [esp+8Ch+var_60] +
xor edx edx +
mov [esp+8Ch+arg_4] ebx +
mov ebx edx +
mov [esp+8Ch+var_54] ebp +
mov [esp+8Ch+var_68] edi +
and eax 2 +
mov [esp+8Ch+var_50] eax +
jmp loc_47793A  +
cmp ecx 7 +
jz loc_478210  +
add ebx 1 +
add esi 20h +
cmp ebx [esp+8Ch+var_68] +
jnb loc_477A66  +
mov ecx [esi] +
cmp ecx 1 +
jnz loc_477921  +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+8] +
mov edi eax +
and edi 400h +
mov [esp+8Ch+var_64] edi +
jnz loc_47792A  +
and eax 2 +
mov [esp+8Ch+var_5C] eax +
jnz loc_477975  +
lea eax [ecx-6474E550h] +
cmp eax 2 +
jbe loc_47792A  +
lea eax [ecx-1] +
cmp eax 1 +
jbe loc_47792A  +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+4] +
cmp eax 8 +
mov [esp+8Ch+var_58] eax +
jz loc_4779D0  +
mov eax [esp+8Ch+arg_4] +
mov edx [eax+14h] +
mov eax [eax+10h] +
mov ebp edx +
mov edi eax +
mov eax [esi+8] +
cmp eax edi +
ja loc_47792A  +
xor edx edx +
sub edi eax +
mov eax edi +
mov edi [esp+8Ch+arg_4] +
sbb ebp edx +
mov edx ebp +
xor ebp ebp +
mov edi [edi+18h] +
add eax edi +
mov edi [esi+14h] +
adc edx ebp +
cmp edx 0 +
jg loc_47792A  +
jl loc_4779D0  +
cmp eax edi +
ja loc_47792A  +
mov ebp [esp+8Ch+var_5C] +
test ebp ebp +
jz loc_477A19  +
mov eax [esp+8Ch+arg_4] +
mov edx [esi+0Ch] +
mov eax [eax+0Ch] +
cmp eax edx +
jb loc_47792A  +
mov edi [esp+8Ch+var_64] +
sub eax edx +
mov edx eax +
test edi edi +
jz loc_477A04  +
cmp [esp+8Ch+var_58] 8 +
jz loc_478200  +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+18h] +
add eax edx +
cmp eax [esi+18h] +
ja loc_47792A  +
cmp ecx 2 +
mov eax [esp+8Ch+arg_4] +
jz loc_47810A  +
mov eax [eax+0Ch] +
mov edx [esi+0Ch] +
mov ecx [esp+8Ch+var_50] +
test ecx ecx +
jnz loc_477F97  +
mov ecx [esi+10h] +
mov edi [esp+8Ch+var_54] +
add ecx eax +
sub ecx edx +
mov [edi+20h] ecx +
cmp edx eax +
ja loc_47792A  +
mov edi [esp+8Ch+arg_4] +
add edx [esi+18h] +
add eax [edi+18h] +
cmp eax edx +
ja loc_47792A  +
mov ebp [esp+8Ch+var_54] +
test [esp+8Ch+var_60] 2000h +
jz loc_477A9C  +
mov eax [esp+8Ch+arg_8] +
movzx eax byte ptr [eax+1] +
cmp al 64h +
jz loc_477D38  +
cmp al 7Ah +
jnz loc_477A9C  +
mov eax [esp+8Ch+arg_8] +
cmp byte ptr [eax+7] 5Fh +
jz loc_477D49  +
mov eax 1 +
jmp loc_4775BD  +
mov eax esi +
or ah 80h +
mov [esp+8Ch+var_40] eax +
mov esi eax +
jmp loc_477746  +
mov eax [esp+8Ch+var_64] +
xor edi edi +
sub eax 1 +
cmp eax 0FFFFFFFDh +
mov [esp+8Ch+var_5C] eax +
ja loc_477B19  +
mov [esp+8Ch+var_60] ebp +
lea esi [esi+0] +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+0A0h] +
mov [esp+8Ch+var_68] eax +
mov eax [eax+904h] +
mov ebp [eax+edi*4] +
mov ecx [ebp+18h] +
mov esi [ebp+30h] +
shr ecx 2 +
mov eax ecx +
mov edx esi +
jmp loc_477B07  +
add edx 4 +
cmp ebx [edx] +
jz loc_477B32  +
sub eax 1 +
jnz loc_477B00  +
add edi 1 +
cmp [esp+8Ch+var_64] edi +
ja loc_477AD0  +
mov ebp [esp+8Ch+var_60] +
mov eax [ebp+8Ch] +
mov ecx [eax+74h] +
test ecx ecx +
jz loc_4780E7  +
mov eax [ebx+8] +
jmp loc_477731  +
sub ecx 1 +
jz loc_477B80  +
add esi 4 +
mov eax [esi] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_477B32  +
mov eax [eax+8Ch] +
mov edx [eax+7Ch] +
test edx edx +
jz loc_477B32  +
mov edi [esp+8Ch+var_60] +
mov esi [eax+74h] +
mov ecx [edi+8Ch] +
mov [ecx+74h] esi +
mov [ecx+7Ch] edx +
mov [eax+7Ch] edi +
mov eax [ebp+2Ch] +
test eax eax +
jz loc_477B7A  +
mov eax [eax+8Ch] +
mov edi [esp+8Ch+var_60] +
mov [eax+7Ch] edi +
mov edi [esp+8Ch+var_5C] +
jmp loc_477B0C  +
mov edi [esp+8Ch+var_68] +
mov eax [ebp+1Ch] +
cmp eax [edi+214h] +
jnb loc_477698  +
mov edi [esp+8Ch+var_68] +
mov edx [edi+40h] +
mov edx [edx+eax*4] +
cmp dword ptr [edx+4] 2 +
jnz loc_477698  +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] eax +
call sub_476580  +
test eax eax +
jz loc_477698  +
mov eax [esp+8Ch+arg_0] +
lea edi [esp+8Ch+var_3C] +
mov eax [eax+0A0h] +
mov [esp+8Ch+var_68] eax +
lea esi [eax+48h] +
mov eax [ebp+20h] +
mov [esp+8Ch+var_74] edi +
lea edi [esp+8Ch+var_24] +
mov [esp+8Ch+var_78] edi +
lea edi [esp+8Ch+var_38] +
mov [esp+8Ch+var_7C] edi +
mov [esp+8Ch+var_80] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_84] 1 +
mov [esp+8Ch+var_88] esi +
mov [esp+8Ch+var_8C] eax +
call sub_475A20  +
test eax eax +
jz loc_477698  +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_84] edi +
mov [esp+8Ch+var_88] esi +
mov [esp+8Ch+var_8C] eax +
call sub_475D70  +
test eax eax +
jz loc_477698  +
mov edi [esp+8Ch+var_60] +
mov edx [edi+8Ch] +
mov [edx+74h] eax +
mov [edx+7Ch] edi +
jmp loc_477B66  +
mov eax [esp+8Ch+var_68] +
test eax eax +
jnz loc_477E16  +
mov dword ptr [edi+908h] 0FFFFFFFFh +
jmp loc_477B19  +
movzx eax byte ptr [eax+1] +
cmp al 64h +
jz loc_477FB3  +
cmp al 67h +
jz loc_478042  +
cmp al 6Ch +
jz loc_478191  +
cmp al 73h +
lea esi [esi+0] +
jz loc_4781A0  +
cmp al 7Ah +
jnz loc_47775E  +
mov edx 7 +
mov eax offset a_zdebug +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+arg_8] +
mov [esp+8Ch+var_84] edx +
mov [esp+8Ch+var_8C] eax +
call strncmp  +
test eax eax +
jnz loc_47775E  +
mov eax esi +
or ah 20h +
mov [esp+8Ch+var_40] eax +
jmp loc_47775E  +
or [esp+8Ch+var_40] 20000h +
jmp loc_477784  +
lea eax [esp+8Ch+var_24] +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_8C] eax +
call sub_44DE10  +
test eax eax +
jz loc_4775BD  +
mov ecx [ebx+18h] +
mov edx [esp+8Ch+var_24] +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] 0FFFFFFFFh +
mov [esp+8Ch+var_88] 0FFFFFFFFh +
call loc_474590  +
mov eax [esp+8Ch+var_24] +
mov [esp+8Ch+var_8C] eax +
call free  +
jmp loc_4777DD  +
mov eax [esp+8Ch+arg_8] +
cmp byte ptr [eax+6] 5Fh +
jnz loc_477A9C  +
lea eax [esp+8Ch+var_24] +
mov [esp+8Ch+var_80] eax +
lea eax [esp+8Ch+var_38] +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_8C] eax +
call sub_487B20  +
test eax eax +
mov ecx eax +
jz loc_47806C  +
mov eax [esp+8Ch+arg_0] +
test byte ptr [eax+2Ah] 10h +
jz loc_47806C  +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_8C] eax +
call sub_487F80  +
test eax eax +
jz loc_4781D6  +
mov eax 2 +
mov edi [esp+8Ch+arg_0] +
test byte ptr [edi+2Ch] 2 +
jz loc_4781BB  +
mov edi [esp+8Ch+arg_8] +
cmp byte ptr [edi+1] 7Ah +
jnz loc_477A9C  +
cmp eax 2 +
jz loc_477DDF  +
mov eax [esp+8Ch+arg_0] +
test byte ptr [eax+2Ah] 40h +
jz loc_477A9C  +
mov edx [esp+8Ch+arg_8] +
mov eax [esp+8Ch+arg_0] +
call sub_474070  +
test eax eax +
jz loc_477698  +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_8C] eax +
call sub_44DAA0  +
jmp loc_477A9C  +
mov eax [esp+8Ch+var_68] +
mov [edi+908h] eax +
mov edi [esp+8Ch+arg_0] +
mov esi [edi+0A0h] +
mov [esp+8Ch+var_8C] edi +
mov [esp+8Ch+var_84] 4 +
mov [esp+8Ch+var_88] eax +
call sub_458B00  +
mov [esi+904h] eax +
mov eax [esp+8Ch+arg_0] +
xor esi esi +
mov edx [eax+0A0h] +
mov edi [edx+904h] +
test edi edi +
jz loc_477698  +
mov [esp+8Ch+arg_4] ebx +
mov ebx [esp+8Ch+var_60] +
mov [esp+8Ch+var_5C] ebp +
jmp loc_477E80  +
add esi 1 +
cmp esi ebx +
jz loc_477FC2  +
mov eax [edx+40h] +
mov edi [eax+esi*4] +
cmp dword ptr [edi+4] 11h +
jnz loc_477E75  +
mov eax [edi+18h] +
cmp eax 7 +
jbe loc_477E75  +
cmp dword ptr [edi+28h] 4 +
jnz loc_477E75  +
test al 3 +
jnz loc_477E75  +
mov edx [edx+904h] +
mov ebp eax +
mov ecx [esp+8Ch+var_64] +
and ebp 3FFFFFFFh +
mov [edx+ecx*4] edi +
add ecx 1 +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_84] 1 +
mov [esp+8Ch+var_68] ecx +
mov [esp+8Ch+var_8C] eax +
call sub_458B00  +
test eax eax +
mov [edi+30h] eax +
jz loc_47827A  +
mov [esp+8Ch+var_84] ebp +
mov [esp+8Ch+var_88] 0 +
mov [esp+8Ch+var_8C] eax +
call memset  +
mov eax [edi+10h] +
mov edx [edi+14h] +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_84] edx +
mov [esp+8Ch+var_8C] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_477F43  +
mov eax [edi+18h] +
mov edx [edi+30h] +
mov ecx [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] eax +
mov [esp+8Ch+var_8C] edx +
mov [esp+8Ch+var_84] ecx +
call sub_46FAD0  +
cmp eax [edi+18h] +
jz loc_4782B7  +
mov eax [edi+18h] +
mov [esp+8Ch+var_8C] offset aBInvalidSizeFi +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
mov eax [edi+30h] +
mov [esp+8Ch+var_84] ebp +
mov [esp+8Ch+var_88] 0 +
mov [esp+8Ch+var_8C] eax +
call memset  +
mov eax [esp+8Ch+arg_0] +
mov edx [eax+0A0h] +
jmp loc_477E75  +
mov edi [esp+8Ch+arg_4] +
mov ecx [esi+10h] +
add ecx [edi+10h] +
mov edi [esp+8Ch+var_54] +
sub ecx [esi+8] +
mov [edi+20h] ecx +
jmp loc_477A49  +
mov edx 6 +
mov eax offset a_debug +
jmp loc_477CA8  +
mov eax [esp+8Ch+var_64] +
cmp [edx+908h] eax +
mov ebp [esp+8Ch+var_5C] +
mov ebx [esp+8Ch+arg_4] +
jz loc_477AB6  +
test eax eax +
mov [edx+908h] eax +
jnz loc_477AB6  +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+0A0h] +
mov dword ptr [eax+904h] 0 +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+0A0h] +
mov dword ptr [eax+908h] 0FFFFFFFFh +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] offset aBNoValidGroupS +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
jmp loc_477B19  +
mov eax [esp+8Ch+arg_8] +
movzx eax byte ptr [eax+2] +
cmp al 6Eh +
jz loc_4781C7  +
cmp al 64h +
jnz loc_47775E  +
mov edx 0Bh +
mov eax offset a_gdb_index +
jmp loc_477CA8  +
cmp dword ptr [ebp+24h] 0 +
jz loc_477A9C  +
mov eax [esp+8Ch+arg_0] +
mov edx [eax+28h] +
mov eax 1 +
shr edx 5 +
and edx 3FFFFh +
test dh 40h +
jz loc_4775BD  +
mov ebx [esp+8Ch+var_38] +
test ebx ebx +
js loc_4775BD  +
cmp [esp+8Ch+var_24] 0 +
jz loc_4775BD  +
test ecx ecx +
jz loc_4780C2  +
shr edx 11h +
test ebx ebx +
setnle cl  +
cmp dl cl +
jz loc_4775BD  +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_8C] eax +
call sub_4880A0  +
test eax eax +
jz loc_478250  +
mov eax 1 +
jmp loc_477DA7  +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_84] ebp +
mov [esp+8Ch+var_8C] offset aBNoGroupInfoFo +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
xor eax eax +
jmp loc_4775BD  +
cmp dword ptr [eax+18h] 0 +
jnz loc_477A29  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_4781AF  +
cmp [esp+8Ch+var_58] 8 +
jz loc_478160  +
mov eax [esp+8Ch+arg_4] +
mov edx [eax+14h] +
mov eax [eax+10h] +
mov ebp edx +
mov edi eax +
mov eax [esi+8] +
cmp eax edi +
jnb loc_47792A  +
xor edx edx +
sub edi eax +
sbb ebp edx +
mov eax edi +
mov edi [esi+14h] +
cmp ebp 0 +
jg loc_47792A  +
jl loc_478160  +
cmp eax edi +
jnb loc_47792A  +
mov eax [esp+8Ch+arg_4] +
cmp [esp+8Ch+var_5C] 0 +
mov edx [esi+0Ch] +
mov eax [eax+0Ch] +
jz loc_477A2F  +
cmp eax edx +
jbe loc_47792A  +
mov edi eax +
sub edi edx +
cmp ecx edi +
jbe loc_47792A  +
jmp loc_477A2F  +
mov edx 5 +
mov eax offset a_line +
jmp loc_477CA8  +
mov edx 5 +
mov eax offset a_stab_2 +
jmp loc_477CA8  +
mov eax [esp+8Ch+arg_4] +
jmp loc_477A29  +
or dword ptr [ebp+14h] 10000000h +
jmp loc_477A9C  +
mov edx 11h +
mov eax offset a_gnu_linkonc_3 +
jmp loc_477CA8  +
mov eax [esp+8Ch+arg_8] +
mov [esp+8Ch+var_8C] offset aBUnableToIniti +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
xor eax eax +
jmp loc_4775BD  +
xor eax eax +
cmp ecx 7 +
jnz loc_477A0E  +
jmp loc_477A04  +
mov eax [esp+8Ch+arg_4] +
mov eax [eax+8] +
mov edi eax +
and edi 400h +
mov [esp+8Ch+var_64] edi +
jnz loc_477959  +
jmp loc_47792A  +
mov eax [ebx+8] +
xor edx edx +
test al 2 +
jz loc_4776E6  +
mov [esp+8Ch+var_40] 1 +
mov edx 1 +
jmp loc_4776E6  +
mov eax [esp+8Ch+arg_8] +
mov [esp+8Ch+var_8C] offset aBUnableToIni_0 +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
xor eax eax +
jmp loc_4775BD  +
mov eax [edi+18h] +
mov [esp+8Ch+var_8C] offset aBCorruptSizeFi +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
mov eax [esp+8Ch+arg_0] +
mov edx [eax+0A0h] +
jmp loc_477E75  +
mov ecx [edi+30h] +
mov [esp+8Ch+var_64] esi +
mov esi ebx +
lea edx [ecx+eax] +
add ebp ecx +
mov ebx edx +
jmp loc_4782E3  +
cmp esi eax +
jbe loc_478335  +
mov ecx [esp+8Ch+arg_0] +
mov ecx [ecx+0A0h] +
mov ecx [ecx+40h] +
mov eax [ecx+eax*4] +
mov [ebp+0] eax +
mov eax [esp+8Ch+arg_0] +
sub ebx 4 +
sub ebp 4 +
mov eax [eax+4] +
mov eax [eax+4Ch] +
mov [esp+8Ch+var_8C] ebx +
call eax  +
cmp ebx [edi+30h] +
jnz loc_4782C9  +
mov [ebp+0] eax +
mov edx [edi+2Ch] +
mov ebx esi +
mov esi [esp+8Ch+var_64] +
test edx edx +
jz loc_47831B  +
test al 1 +
jz loc_47831B  +
or dword ptr [edx+14h] 20000h +
mov eax [esp+8Ch+arg_0] +
mov edx [eax+0A0h] +
mov eax [esp+8Ch+var_68] +
mov [esp+8Ch+var_64] eax +
jmp loc_477E75  +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] offset aBInvalidSht_gr +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
xor eax eax +
jmp loc_4782CD  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+60h] +
mov ebp [esp+68h] +
mov esi [esp+64h] +
and ebp 1Fh +
cmp [ebx] esi +
jz loc_478433  +
lea eax [ebp+ebp*4+0] +
lea eax [ebx+eax*4+84h] +
mov ecx eax +
mov [esp+1Ch] eax +
lea eax [esp+24h] +
mov [esp+18h] eax +
lea eax [esp+28h] +
mov [esp+14h] eax +
mov eax [esp+68h] +
mov [esp+10h] ecx +
mov dword ptr [esp+8] 1 +
mov [esp+0Ch] eax +
mov eax [esi+0A0h] +
mov [esp] esi +
add eax 48h +
mov [esp+4] eax +
call sub_475A20  +
test eax eax +
jz loc_478474  +
cmp [ebx] esi +
jz loc_478404  +
lea edi [ebx+4] +
mov edx 80h +
test edi 1 +
jnz loc_478452  +
test edi 2 +
jnz loc_478460  +
mov ecx edx +
mov eax 0FFFFFFFFh +
shr ecx 2 +
test dl 2 +
stos   +
jnz loc_478420  +
and edx 1 +
jnz loc_478418  +
mov [ebx] esi +
mov eax [esp+68h] +
mov [ebx+ebp*4+4] eax +
mov eax [esp+1Ch] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov byte ptr [edi] 0FFh +
jmp loc_478402  +
***
mov eax 0FFFFFFFFh +
add edi 2 +
mov [edi-2] ax +
and edx 1 +
jz loc_478402  +
jmp loc_478418  +
***
mov eax [esp+68h] +
cmp [ebx+ebp*4+4] eax +
jnz loc_47837E  +
lea eax [ebp+ebp*4+0] +
lea eax [ebx+eax*4+84h] +
mov [esp+1Ch] eax +
jmp loc_47840C  +
***
mov byte ptr [ebx+4] 0FFh +
lea edi [ebx+5] +
mov dl 7Fh +
jmp loc_4783E4  +
***
mov ecx 0FFFFFFFFh +
add edi 2 +
mov [edi-2] cx +
sub edx 2 +
jmp loc_4783EC  +
***
mov dword ptr [esp+1Ch] 0 +
jmp loc_47840C  +
***
mov edx [esp+arg_0] +
mov eax [esp+arg_4] +
mov edx [edx+0A0h] +
cmp [edx+214h] eax +
jbe loc_4784A0  +
mov edx [edx+40h] +
mov eax [edx+eax*4] +
mov eax [eax+2Ch] +
retn   +
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov ebx [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] eax +
call strlen  +
mov edx [ebx] +
test edx edx +
jz loc_478572  +
mov ebp eax +
mov edi edx +
lea esi [ebx+14h] +
jmp loc_478512  +
lea edx [ecx+eax] +
cmp ebp edx +
jl loc_478507  +
mov edx ebp +
add ecx edi +
sub edx eax +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] ecx +
add eax edx +
mov [esp+1Ch+var_1C] eax +
call memcmp  +
test eax eax +
jz loc_478568  +
mov ebx esi +
mov edi [esi] +
lea esi [esi+14h] +
test edi edi +
jz loc_478572  +
mov ecx [ebx+4] +
cmp ebp ecx +
jl loc_478507  +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] ecx +
mov [esp+1Ch+var_18] edi +
mov [esp+1Ch+var_10] ecx +
mov [esp+1Ch+var_1C] eax +
call memcmp  +
mov ecx [esp+1Ch+var_10] +
test eax eax +
jnz loc_478507  +
mov eax [ebx+8] +
test eax eax +
jg loc_4784E0  +
mov edx [esp+1Ch+arg_0] +
movzx edx byte ptr [edx+ecx] +
test dl dl +
jz loc_478568  +
test eax eax +
jz loc_478507  +
cmp dl 2Eh +
jz loc_478568  +
cmp eax 0FFFFFFFEh +
jz loc_478507  +
mov eax [esp+1Ch+arg_8] +
test eax eax +
jz loc_478568  +
cmp dword ptr [ebx+0Ch] 9 +
jz loc_478507  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor ebx ebx +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov esi [esp+24h] +
mov ebx [esi] +
test ebx ebx +
jz loc_478610  +
mov eax [esp+20h] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov edx [eax+178h] +
test edx edx +
jz loc_4785D0  +
movzx eax byte ptr [esi+19h] +
mov [esp+4] edx +
mov [esp] ebx +
shr al 2 +
and eax 1 +
mov [esp+8] eax +
call sub_4784B0  +
test eax eax +
jz loc_4785D0  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
xor eax eax +
cmp byte ptr [ebx] 2Eh +
jnz loc_4785C8  +
movsx edx byte ptr [ebx+1] +
sub edx 62h +
cmp edx 18h +
ja loc_4785C8  +
mov edx ds:off_502B00[edx*4] +
test edx edx +
jz loc_4785C8  +
movzx eax byte ptr [esi+19h] +
mov [esp] ebx +
mov [esp+4] edx +
shr al 2 +
and eax 1 +
mov [esp+8] eax +
call sub_4784B0  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
xor eax eax +
jmp loc_4785C8  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+24h] +
mov esi [esp+20h] +
mov eax [ebx+8Ch] +
test eax eax +
jz loc_4786C2  +
mov eax [esi+4] +
mov ecx [eax+1B0h] +
movzx eax byte ptr [ebx+19h] +
movzx edx byte ptr [ecx+1ACh] +
and eax 0FFFFFFFBh +
shr dl 2 +
and edx 4 +
or eax edx +
mov [ebx+19h] al +
movzx eax byte ptr [esi+28h] +
and eax 18h +
cmp al 8 +
jz loc_4786B5  +
mov eax [ecx+54h] +
mov [esp+4] ebx +
mov [esp] esi +
call eax  +
test eax eax +
jz loc_478691  +
mov edx [ebx+14h] +
mov ecx [eax+0Ch] +
test edx edx +
jnz loc_4786A3  +
mov edx [ebx+8Ch] +
mov eax [eax+10h] +
mov [edx+4] ecx +
mov [edx+8] eax +
mov [esp+24h] ebx +
mov [esp+20h] esi +
add esp 14h +
pop ebx  +
pop esi  +
jmp loc_44D400  +
***
and edx 100000h +
jnz loc_478682  +
lea edx [ecx-0Eh] +
cmp edx 1 +
ja loc_478691  +
jmp loc_478682  +
***
test byte ptr [ebx+16h] 10h +
jz loc_478691  +
nop   +
lea esi [esi+0] +
jmp loc_478668  +
***
mov dword ptr [esp+4] 90h +
mov [esp] esi +
call sub_458B60  +
test eax eax +
jz loc_4786E1  +
mov [ebx+8Ch] eax +
jmp loc_47863B  +
***
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov ebx [esp+6Ch+arg_4] +
mov eax [ebx+18h] +
test eax eax +
jnz loc_478720  +
cmp dword ptr [ebx+14h] 0 +
jnz loc_4789EA  +
nop   +
add esp 6Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+14h] +
lea esi [esp+6Ch+var_4C] +
test edx edx +
jnz loc_478841  +
mov eax offset unk_5017F2 +
mov [esp+6Ch+var_5C] eax +
mov eax [esp+6Ch+arg_8] +
mov [esp+6Ch+var_68] offset aSDS +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+arg_C] +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov edx esi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_478760  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
mov eax [esp+6Ch+arg_0] +
sbb edx 3 +
sub edx esi +
lea edi [edx+1] +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] eax +
call sub_458A80  +
test eax eax +
mov ebp eax +
jz loc_478968  +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_64] edi +
mov [esp+6Ch+var_6C] eax +
call memcpy  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] ebp +
mov [esp+6Ch+var_6C] eax +
call sub_44DA40  +
test eax eax +
mov esi eax +
jz loc_478968  +
mov edx [ebx+14h] +
mov ecx [ebx+10h] +
mov eax [ebx+0Ch] +
add ecx edx +
mov [esi+20h] ecx +
mov ecx [ebx+18h] +
add eax edx +
mov [esi+1Ch] eax +
sub ecx edx +
add edx [ebx+8] +
mov [esi+24h] ecx +
mov dword ptr [esi+54h] 0 +
mov [esi+50h] edx +
mov edx eax +
neg edx  +
and eax edx +
jz loc_478972  +
mov edx [ebx+1Ch] +
cmp eax edx +
cmova eax edx +
mov [esp+6Ch+var_6C] eax +
call sub_45A590  +
cmp dword ptr [ebx] 1 +
mov [esi+40h] eax +
jz loc_478986  +
mov eax [ebx+4] +
test al 2 +
jnz loc_478710  +
or dword ptr [esi+14h] 8 +
jmp loc_478710  +
xor ecx ecx +
cmp edx eax +
setb cl  +
cmp eax edx +
mov ebp ecx +
mov eax offset unk_5017F2 +
mov ecx offset aA_2 +
cmovbe ecx eax +
mov eax [esp+6Ch+arg_8] +
lea esi [esp+6Ch+var_4C] +
mov [esp+6Ch+var_5C] ecx +
mov [esp+6Ch+var_68] offset aSDS +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_60] eax +
mov eax [esp+6Ch+arg_C] +
mov [esp+6Ch+var_64] eax +
call sprintf  +
mov edx esi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_478889  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
mov eax [esp+6Ch+arg_0] +
sbb edx 3 +
sub edx esi +
add edx 1 +
mov [esp+6Ch+var_68] edx +
mov [esp+6Ch+var_6C] eax +
mov [esp+6Ch+var_50] edx +
call sub_458A80  +
mov edx [esp+6Ch+var_50] +
test eax eax +
mov edi eax +
jz loc_478968  +
mov [esp+6Ch+var_64] edx +
mov [esp+6Ch+var_68] esi +
mov [esp+6Ch+var_6C] eax +
call memcpy  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] eax +
call sub_44DA40  +
test eax eax +
mov edi eax +
jz loc_478968  +
mov eax [ebx+0Ch] +
mov [edi+1Ch] eax +
mov eax [ebx+10h] +
mov [edi+20h] eax +
mov eax [ebx+14h] +
mov [edi+24h] eax +
mov eax [ebx+8] +
or dword ptr [edi+14h] 100h +
mov dword ptr [edi+54h] 0 +
mov [edi+50h] eax +
mov eax [ebx+1Ch] +
mov [esp+6Ch+var_6C] eax +
call sub_45A590  +
cmp dword ptr [ebx] 1 +
mov [edi+40h] eax +
jz loc_4789C0  +
mov eax [ebx+4] +
test al 2 +
jz loc_478980  +
mov eax [ebx+14h] +
cmp [ebx+18h] eax +
jbe loc_478710  +
test ebp ebp +
mov eax offset aB_5 +
jnz loc_478734  +
jmp loc_47872F  +
add esp 6Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+1Ch] +
jmp loc_478819  +
or dword ptr [edi+14h] 8 +
jmp loc_47894A  +
mov eax [esp+6Ch+arg_0] +
movzx eax byte ptr [eax+28h] +
and eax 7 +
cmp al 3 +
jz loc_4789E1  +
mov edx [esi+14h] +
mov eax edx +
or eax 1 +
mov [esi+14h] eax +
mov eax [ebx+4] +
test al 1 +
jz loc_478830  +
or edx 11h +
mov [esi+14h] edx +
jmp loc_478830  +
mov ecx [edi+14h] +
mov eax ecx +
or eax 3 +
mov [edi+14h] eax +
mov eax [ebx+4] +
test al 1 +
jz loc_478946  +
or ecx 13h +
mov [edi+14h] ecx +
jmp loc_478946  +
mov dword ptr [esi+24h] 0 +
jmp loc_478998  +
xor ebp ebp +
mov ecx offset unk_5017F2 +
jmp loc_478859  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_4] +
mov ebx [esp+2Ch+arg_0] +
mov edx [esi] +
cmp edx 4 +
jz loc_478B20  +
jbe loc_478A46  +
cmp edx 6474E550h +
jz loc_478B10  +
ja loc_478A90  +
cmp edx 5 +
jz loc_478AD0  +
cmp edx 6 +
jnz loc_478AE0  +
mov [esp+2Ch+var_20] offset aPhdr_0 +
jmp loc_478A70  +
cmp edx 1 +
jz loc_478B70  +
jb loc_478B60  +
cmp edx 2 +
jz loc_478AB0  +
cmp edx 3 +
lea esi [esi+0] +
jnz loc_478AE0  +
mov [esp+2Ch+var_20] offset aInterp_0 +
lea esi [esi+0] +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_24] eax +
call sub_4786F0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edx 6474E551h +
jz loc_478AC0  +
cmp edx 6474E552h +
jnz loc_478AE0  +
mov [esp+2Ch+var_20] offset aRelro_0 +
jmp loc_478A70  +
mov [esp+2Ch+var_20] offset aDynamic_0 +
jmp loc_478A70  +
mov [esp+2Ch+var_20] offset aStack_0 +
jmp loc_478A70  +
mov [esp+2Ch+var_20] offset aShlib_0 +
jmp loc_478A70  +
mov eax [ebx+4] +
mov edi [esp+2Ch+arg_8] +
mov eax [eax+1B0h] +
mov eax [eax+58h] +
mov [esp+2Ch+var_20] offset aProc +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebx +
call eax  +
jmp loc_478A84  +
mov [esp+2Ch+var_20] offset aEh_frame_hdr +
jmp loc_478A70  +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_20] offset aNote_0 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_24] eax +
call sub_4786F0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_478A84  +
mov ebp [esi+14h] +
mov esi [esi+8] +
test ebp ebp +
jnz loc_478B7D  +
mov eax 1 +
jmp loc_478A84  +
mov [esp+2Ch+var_20] offset aNull_2 +
jmp loc_478A70  +
mov [esp+2Ch+var_20] offset aLoad_0 +
jmp loc_478A70  +
xor edi edi +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_2C] ebx +
call sub_46FCE0  +
test eax eax +
jz loc_478BA2  +
xor eax eax +
jmp loc_478A84  +
lea eax [ebp+1] +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_478B9B  +
mov byte ptr [eax+ebp] 0 +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] eax +
call sub_46FAD0  +
cmp ebp eax +
jz loc_478BE0  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
call free  +
xor eax eax +
jmp loc_478A84  +
mov edx [esp+2Ch+var_10] +
mov ecx ebp +
mov eax ebx +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_28] edi +
call loc_474590  +
test eax eax +
jz loc_478BCD  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_2C] eax +
call free  +
jmp loc_478B52  +
***
mov ebx [esp+18h+arg_0] +
mov edx [ebx+8Ch] +
mov eax [edx+3Ch] +
test eax eax +
jz loc_478C50  +
mov edx [edx+4Ch] +
test edx edx +
jz loc_478C49  +
mov [esp+18h+var_14] 0AECh +
mov [esp+18h+var_18] offset a____Binutil_15 +
call sub_44BA40  +
mov eax [ebx+8Ch] +
mov eax [eax+3Ch] +
add esp 18h +
pop ebx  +
retn   +
mov eax [edx+4Ch] +
add esp 18h +
pop ebx  +
retn   +
***
mov edx [esp+4] +
mov eax 8 +
and edx 103h +
cmp edx 1 +
mov edx 1 +
cmovnz eax edx +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov eax [esp+20h] +
test eax eax +
jz loc_478D05  +
mov edx [eax+8Ch] +
mov ecx [edx+4] +
cmp ecx 4 +
jnz loc_478D00  +
mov ebx [eax] +
lea edx [ebx+4] +
add ebx 5 +
cmp ecx 9 +
cmovnz edx ebx +
mov ebx [eax+94h] +
mov eax [ebx+4] +
mov eax [eax+1B0h] +
test byte ptr [eax+1ADh] 1 +
jz loc_478CD2  +
mov edi offset a_plt_18 +
mov ecx 5 +
mov esi edx +
cmps   +
jz loc_478CE5  +
mov [esp+4] edx +
mov [esp] ebx +
call sub_44D4B0  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov dword ptr [esp+4] offset a_got_plt_0 +
mov [esp] ebx +
call sub_44D4B0  +
test eax eax +
jnz loc_478CDE  +
mov edx offset a_got_0 +
jmp loc_478CD2  +
***
cmp ecx 9 +
jz loc_478C9C  +
add esp 10h +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov ebx [esp+arg_C] +
mov ecx [esp+arg_0] +
mov eax [esp+arg_4] +
mov edx [esp+arg_8] +
test ebx ebx +
jz loc_478D40  +
mov ebx [ecx+24h] +
cmp ebx 1 +
jbe loc_478D40  +
mov esi eax +
xor edx edx +
lea edi [ebx+eax-1] +
mov eax 0FFFFFFFFh +
cmp esi edi +
jbe loc_478D66  +
mov ebx [ecx+2Ch] +
mov [ecx+10h] eax +
mov [ecx+14h] edx +
test ebx ebx +
jz loc_478D53  +
mov [ebx+50h] eax +
mov [ebx+54h] edx +
cmp dword ptr [ecx+4] 8 +
jz loc_478D62  +
mov ecx [ecx+18h] +
xor ebx ebx +
add eax ecx +
adc edx ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax ebx +
xor edx edx +
neg eax  +
and eax edi +
jmp loc_478D40  +
***
push esi  +
push ebx  +
mov eax [esp+0Ch] +
mov ebx [esp+10h] +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov eax [eax+44h] +
mov ecx [edx] +
test ecx ecx +
jz loc_478DB8  +
mov esi [ecx+24h] +
mov edx esi +
sub edx 1 +
js loc_478DAF  +
cmp [ecx+esi*4+24h] ebx +
jnz loc_478DA7  +
jmp loc_478DC0  +
cmp [ecx+edx*4+28h] ebx +
jz loc_478DC0  +
sub edx 1 +
cmp edx 0FFFFFFFFh +
jnz loc_478DA1  +
mov ecx [ecx] +
add eax 20h +
test ecx ecx +
jnz loc_478D8F  +
xor eax eax +
lea esi [esi+0] +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] 2Ch +
mov [esp+1Ch+var_1C] eax +
call sub_458B60  +
test eax eax +
jz loc_478E06  +
mov edx [esp+1Ch+arg_4] +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 2 +
mov dword ptr [eax+24h] 1 +
mov [eax+28h] edx +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov [esp+6Ch+var_3C] eax +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov eax [eax] +
test eax eax +
setz dl  +
movzx eax dl +
mov [esp+6Ch+var_58] eax +
mov eax [esp+6Ch+arg_4] +
test eax eax +
jz loc_478E77  +
mov eax [esp+6Ch+arg_4] +
xor edx 1 +
mov edi [esp+6Ch+arg_4] +
shl edx 6 +
movzx eax byte ptr [eax+5] +
and eax 0FFFFFFBFh +
or eax edx +
mov [edi+5] al +
mov eax [esp+6Ch+var_58] +
test eax eax +
jz loc_478E91  +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+6Ch] +
test eax eax +
jnz loc_478FA1  +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+0A0h] +
mov edi [eax+934h] +
mov eax [edi] +
test eax eax +
jz loc_478F05  +
lea esi [esi+0] +
mov edx [eax+24h] +
xor esi esi +
test edx edx +
jz loc_478EE8  +
xor edx edx +
nop   +
lea esi [esi+0] +
mov ebx [eax+edx*4+28h] +
mov ecx [ebx+14h] +
test ch 80h +
jnz loc_478EDE  +
and ecx 1 +
jnz loc_478ED7  +
cmp dword ptr [eax+4] 1 +
jz loc_478EDE  +
mov [eax+esi*4+28h] ebx +
add esi 1 +
mov eax [edi] +
add edx 1 +
cmp edx [eax+24h] +
jb loc_478EC0  +
mov ecx [esp+6Ch+var_58] +
mov [eax+24h] esi +
test ecx ecx +
jz loc_478EFD  +
cmp dword ptr [eax+4] 1 +
jz loc_478F90  +
mov edi eax +
mov eax [eax] +
test eax eax +
jnz loc_478EB0  +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+0ACh] +
test eax eax +
jz loc_478F3E  +
mov edi [esp+6Ch+arg_4] +
mov esi [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] esi +
call eax  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_478F82  +
mov eax [esp+6Ch+arg_0] +
xor edx edx +
mov eax [eax+0A0h] +
mov ecx [eax+934h] +
mov eax [ecx] +
test eax eax +
jz loc_478F69  +
lea esi [esi+0] +
mov eax [eax] +
add edx 1 +
test eax eax +
jnz loc_478F60  +
mov eax [esp+6Ch+var_3C] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+1] +
imul edx eax +
mov eax 1 +
mov [ecx+1Ch] edx +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test esi esi +
jnz loc_478EFD  +
mov eax [eax] +
mov [edi] eax +
jmp loc_478EA6  +
mov [esp+6Ch+var_68] 4 +
mov [esp+6Ch+var_6C] eax +
call sub_459BC0  +
mov ebp eax +
mov [esp+6Ch+var_4C] eax +
xor eax eax +
test ebp ebp +
jz loc_478F82  +
mov eax [esp+6Ch+arg_0] +
xor ebx ebx +
mov [esp+6Ch+var_6C] eax +
call sub_4536E0  +
lea ecx [eax-1] +
mov eax 1 +
shl eax cl +
lea esi [eax+eax-1] +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+64h] +
test eax eax +
jz loc_479989  +
xor ecx ecx +
test byte ptr [eax+14h] 1 +
jz loc_47900E  +
mov edi [eax+20h] +
mov edx [eax+24h] +
mov [ebp+ecx*4+0] eax +
add ecx 1 +
add edx edi +
and edi esi +
and edx esi +
cmp edx edi +
cmovb ebx edx +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_478FF0  +
mov edi [esp+6Ch+arg_0] +
mov [esp+6Ch+var_40] ecx +
cmp [edi+6Ch] ecx +
jb loc_479956  +
mov eax [esp+6Ch+var_40] +
mov [esp+6Ch+var_60] offset loc_473EC0 +
mov [esp+6Ch+var_64] 4 +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+var_4C] +
mov [esp+6Ch+var_6C] eax +
call qsort  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] offset a_interp_0 +
mov [esp+6Ch+var_10] 0 +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
mov ebp eax +
test ebp ebp +
lea eax [esp+6Ch+var_10] +
mov [esp+6Ch+var_48] eax +
jz loc_479084  +
test byte ptr [ebp+14h] 2 +
jnz loc_4798D8  +
mov eax [esp+6Ch+var_3C] +
mov eax [eax+10h] +
mov [esp+6Ch+var_68] offset a_dynamic_0 +
test eax eax +
mov edi eax +
mov eax 1 +
cmovnz eax edi +
mov [esp+6Ch+var_30] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] eax +
call sub_44D4B0  +
test eax eax +
mov edi eax +
mov [esp+6Ch+var_28] eax +
jz loc_4790CC  +
test byte ptr [eax+14h] 2 +
mov eax 0 +
cmovnz eax edi +
mov [esp+6Ch+var_28] eax +
mov eax [esp+6Ch+var_40] +
test eax eax +
jz loc_4792D1  +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov edx [eax+1Ch] +
cmp edx 0FFFFFFFFh +
jz loc_47996F  +
mov eax [esp+6Ch+var_3C] +
mov edi [esp+6Ch+arg_0] +
mov eax [eax+174h] +
test byte ptr [edi+29h] 20h +
movzx eax byte ptr [eax] +
jnz loc_4796EA  +
mov eax [esp+6Ch+var_4C] +
mov ecx [eax] +
mov [esp+6Ch+var_34] 0 +
mov eax [esp+6Ch+var_30] +
mov ebx ecx +
xor esi esi +
xor edi edi +
xor edx edx +
mov [esp+6Ch+var_38] 0 +
mov ebp esi +
mov [esp+6Ch+var_54] 0 +
lea ecx [eax-1] +
neg eax  +
mov [esp+6Ch+var_20] ecx +
mov [esp+6Ch+var_2C] eax +
mov [esp+6Ch+var_50] edi +
jmp loc_479192  +
mov eax [ebx+14h] +
mov edx 1 +
mov [esp+6Ch+var_50] 0 +
test al 8 +
cmovz ebp edx +
and eax 402h +
cmp eax 400h +
jz loc_47917C  +
mov eax [ebx+24h] +
mov [esp+6Ch+var_50] eax +
add esi 1 +
cmp esi [esp+6Ch+var_40] +
jz loc_47927A  +
mov eax [esp+6Ch+var_4C] +
mov edx ebx +
mov ebx [eax+esi*4] +
test edx edx +
jz loc_479154  +
mov eax [ebx+20h] +
mov ecx [edx+20h] +
mov [esp+6Ch+var_54] 1 +
mov [esp+6Ch+var_44] eax +
mov edi ecx +
sub eax [ebx+1Ch] +
sub edi [edx+1Ch] +
cmp edi eax +
jz loc_4797C4  +
mov eax [esp+6Ch+arg_4] +
test eax eax +
jz loc_4791FF  +
mov eax [esp+6Ch+arg_4] +
mov ecx [eax+18h] +
mov ecx [ecx+38h] +
test ecx ecx +
jz loc_4791FF  +
mov eax [esp+6Ch+var_54] +
mov [esp+6Ch+var_60] edx +
mov [esp+6Ch+var_64] ebx +
mov [esp+6Ch+var_5C] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+arg_4] +
mov [esp+6Ch+var_6C] eax +
call ecx  +
mov [esp+6Ch+var_54] eax +
mov eax [esp+6Ch+var_54] +
test eax eax +
jz loc_479154  +
mov eax [esp+6Ch+var_34] +
mov ecx [esp+6Ch+var_38] +
mov edx [esp+6Ch+var_4C] +
mov [esp+6Ch+var_6C] esi +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+arg_0] +
call sub_473F70  +
test eax eax +
jz loc_47962C  +
mov edi [esp+6Ch+var_48] +
mov [esp+6Ch+var_48] eax +
mov [edi] eax +
mov eax [ebx+14h] +
mov ebp eax +
and eax 402h +
shr ebp 3 +
xor ebp 1 +
and ebp 1 +
cmp eax 400h +
jz loc_479880  +
mov eax [ebx+24h] +
mov [esp+6Ch+var_38] esi +
add esi 1 +
cmp esi [esp+6Ch+var_40] +
mov [esp+6Ch+var_34] 0 +
mov [esp+6Ch+var_50] eax +
jnz loc_479189  +
test ebx ebx +
mov eax esi +
mov [esp+6Ch+var_54] esi +
jz loc_4792D1  +
sub eax [esp+6Ch+var_38] +
cmp eax 1 +
jnz loc_47929C  +
mov eax [ebx+14h] +
and eax 402h +
cmp eax 400h +
jz loc_4792D1  +
mov eax [esp+6Ch+var_34] +
mov ecx [esp+6Ch+var_38] +
mov edx [esp+6Ch+var_4C] +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+var_54] +
mov [esp+6Ch+var_6C] eax +
mov eax [esp+6Ch+arg_0] +
call sub_473F70  +
test eax eax +
jz loc_47962C  +
mov edi [esp+6Ch+var_48] +
mov [esp+6Ch+var_48] eax +
mov [edi] eax +
mov eax [esp+6Ch+var_28] +
test eax eax +
jz loc_4792FE  +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] eax +
call sub_478DD0  +
test eax eax +
jz loc_47962C  +
mov edi [esp+6Ch+var_48] +
mov [esp+6Ch+var_48] eax +
mov [edi] eax +
mov eax [esp+6Ch+arg_0] +
mov ebp [eax+64h] +
test ebp ebp +
jz loc_4794D7  +
mov [esp+6Ch+var_50] 0 +
mov [esp+6Ch+var_54] 0 +
mov eax [ebp+14h] +
test al 2 +
jz loc_4793E8  +
mov esi [ebp+0] +
mov edi offset a_note_0 +
mov ecx 5 +
cmps   +
jnz loc_4793E8  +
cmp dword ptr [ebp+40h] 2 +
mov eax 2Ch +
mov ebx 1 +
jz loc_479642  +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] eax +
call sub_458B60  +
test eax eax +
mov edi eax +
jz loc_47962C  +
cmp ebx 1 +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 4 +
mov [eax+24h] ebx +
mov eax ebx +
ja loc_47939A  +
jmp loc_4793CA  +
cmp esi 1 +
mov ebp [ebp+0Ch] +
jz loc_4793CA  +
mov ebx esi +
mov edx eax +
sub edx ebx +
test byte ptr [ebp+15h] 4 +
lea esi [ebx-1] +
mov [edi+edx*4+28h] ebp +
jz loc_479390  +
mov [esp+6Ch+var_68] 11A6h +
mov [esp+6Ch+var_6C] offset a____Binutil_15 +
call sub_44BA40  +
cmp esi 1 +
mov eax [edi+24h] +
mov ebp [ebp+0Ch] +
jnz loc_479398  +
mov [edi+eax*4+24h] ebp +
mov eax [ebp+14h] +
and eax 400h +
jnz loc_4796C9  +
mov esi [esp+6Ch+var_48] +
mov [esp+6Ch+var_48] edi +
mov [esi] edi +
jmp loc_4793ED  +
and eax 400h +
test eax eax +
jz loc_479407  +
mov edi [esp+6Ch+var_54] +
mov eax [esp+6Ch+var_50] +
test edi edi +
cmovz eax ebp +
add [esp+6Ch+var_54] 1 +
mov [esp+6Ch+var_50] eax +
mov ebp [ebp+0Ch] +
test ebp ebp +
jnz loc_479320  +
mov ebx [esp+6Ch+var_54] +
test ebx ebx +
jz loc_4794D7  +
lea eax ds:28h[ebx*4] +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_6C] eax +
call sub_458B60  +
test eax eax +
jz loc_47962C  +
mov dword ptr [eax] 0 +
mov ecx [esp+6Ch+var_50] +
xor edx edx +
mov dword ptr [eax+4] 7 +
mov [eax+24h] ebx +
mov dword ptr [eax+8] 4 +
or byte ptr [eax+20h] 1 +
jmp loc_479471  +
mov [eax+edx*4+28h] ecx +
add edx 1 +
mov ecx [ecx+0Ch] +
cmp ebx edx +
jz loc_4794CD  +
test byte ptr [ecx+15h] 4 +
jnz loc_479463  +
mov eax [esp+6Ch+arg_0] +
xor ebx ebx +
mov [esp+6Ch+var_6C] offset aBTlsSectionsAr +
mov [esp+6Ch+var_68] eax +
call off_4BFA04  +
mov esi [esp+6Ch+var_50] +
jmp loc_4794B4  +
mov [esp+6Ch+var_6C] offset aTlsA +
add ebx 1 +
call off_4BFA04  +
cmp ebx [esp+6Ch+var_54] +
mov esi [esi+0Ch] +
jnb loc_479620  +
test byte ptr [esi+15h] 4 +
mov [esp+6Ch+var_68] esi +
jnz loc_479497  +
mov [esp+6Ch+var_6C] offset aNonTlsA +
call off_4BFA04  +
jmp loc_4794A7  +
mov edi [esp+6Ch+var_48] +
mov [esp+6Ch+var_48] eax +
mov [edi] eax +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov ebx [eax+0Ch] +
test ebx ebx +
jz loc_479550  +
mov edx [ebx+3Ch] +
test byte ptr [edx+14h] 2 +
jz loc_479550  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] 2Ch +
mov [esp+6Ch+var_6C] eax +
call sub_458B60  +
test eax eax +
jz loc_47962C  +
mov edx [ebx+3Ch] +
mov edi [esp+6Ch+var_48] +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 6474E550h +
mov dword ptr [eax+24h] 1 +
mov [eax+28h] edx +
mov [esp+6Ch+var_48] eax +
mov [edi] eax +
mov eax [esp+6Ch+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov esi [eax+34h] +
test esi esi +
jnz loc_479735  +
mov ebx [esp+6Ch+arg_4] +
test ebx ebx +
jz loc_4795F6  +
mov eax [esp+6Ch+arg_4] +
test byte ptr [eax+3] 1 +
jz loc_4795F6  +
mov eax [esp+6Ch+var_10] +
test eax eax +
jz loc_4795F6  +
mov ebx [esp+6Ch+arg_4] +
jmp loc_47958E  +
mov eax [eax] +
test eax eax +
jz loc_4795F6  +
cmp dword ptr [eax+4] 1 +
jnz loc_479588  +
mov edx [eax+24h] +
test edx edx +
jz loc_479588  +
mov ecx [eax+28h] +
mov ecx [ecx+1Ch] +
cmp ecx [ebx+70h] +
jb loc_479588  +
cmp ecx [ebx+74h] +
jnb loc_479588  +
sub edx 1 +
cmp edx 0FFFFFFFFh +
jz loc_479588  +
mov ecx [eax+edx*4+28h] +
mov ecx [ecx+14h] +
and ecx 102h +
cmp ecx 102h +
jnz loc_4795AB  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] 2Ch +
mov [esp+6Ch+var_6C] eax +
call sub_458B60  +
test eax eax +
jz loc_47962C  +
mov esi [esp+6Ch+var_48] +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 6474E552h +
mov [esi] eax +
mov eax [esp+6Ch+var_4C] +
mov [esp+6Ch+var_6C] eax +
call free  +
mov eax [esp+6Ch+arg_0] +
mov ecx [esp+6Ch+var_10] +
mov eax [eax+0A0h] +
mov edx [eax+934h] +
mov [edx] ecx +
jmp loc_478E9E  +
mov [esp+6Ch+var_6C] 11h +
call sub_44BAF0  +
mov eax [esp+6Ch+var_4C] +
mov [esp+6Ch+var_6C] eax +
call free  +
add esp 6Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebp+0Ch] +
test edx edx +
jz loc_479354  +
cmp dword ptr [edx+40h] 2 +
jnz loc_479354  +
test byte ptr [edx+14h] 2 +
jz loc_479354  +
mov eax ebp +
mov [esp+6Ch+var_44] ebx +
jmp loc_47969D  +
mov ecx [eax+20h] +
add ecx [eax+24h] +
lea eax [ecx+3] +
and eax 0FFFFFFFCh +
cmp eax [edx+20h] +
jnz loc_4796B9  +
mov ecx [edx+0Ch] +
add [esp+6Ch+var_44] 1 +
test ecx ecx +
jz loc_4796B9  +
cmp dword ptr [ecx+40h] 2 +
jnz loc_4796B9  +
test byte ptr [ecx+14h] 2 +
jz loc_4796B9  +
mov eax edx +
mov edx ecx +
mov esi [edx] +
mov ecx 5 +
mov edi offset a_note_0 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov ebx esi +
cmp bl cl +
jz loc_479670  +
mov ebx [esp+6Ch+var_44] +
lea eax ds:28h[ebx*4] +
jmp loc_479354  +
mov [esp+6Ch+var_68] 11AAh +
mov [esp+6Ch+var_6C] offset a____Binutil_15 +
call sub_44BA40  +
mov eax [ebp+14h] +
and eax 400h +
jmp loc_4793DC  +
lea edi [edx+eax] +
mov eax [esp+6Ch+var_4C] +
mov ecx [eax] +
and esi [ecx+20h] +
cmp edi esi +
ja loc_47911B  +
xor edx edx +
mov eax esi +
div  [esp+6Ch+var_30] +
mov eax edi +
mov ebp edx +
xor edx edx +
div  [esp+6Ch+var_30] +
cmp ebp edx +
jb loc_47911B  +
mov eax [esp+6Ch+var_30] +
mov [esp+6Ch+var_34] 1 +
neg eax  +
and eax esi +
cmp ebx eax +
jbe loc_479123  +
jmp loc_47911B  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] 2Ch +
mov [esp+6Ch+var_6C] eax +
call sub_458B60  +
test eax eax +
jz loc_47962C  +
mov esi [esp+6Ch+arg_0] +
mov dword ptr [eax] 0 +
mov edi [esp+6Ch+var_3C] +
mov dword ptr [eax+4] 6474E551h +
mov edx [esi+0A0h] +
mov ecx [edi+1A8h] +
mov esi [esp+6Ch+arg_4] +
mov edx [edx+934h] +
mov edx [edx+34h] +
mov [eax+14h] ecx +
mov [eax+8] edx +
movzx edx byte ptr [eax+20h] +
or edx 1 +
test ecx ecx +
setnz cl  +
and edx 0FFFFFFFBh +
shl ecx 2 +
or edx ecx +
mov ecx [esi+10h] +
mov [eax+20h] dl +
test ecx ecx +
jle loc_4797B5  +
or edx 8 +
mov [eax+18h] ecx +
mov [eax+20h] dl +
mov edi [esp+6Ch+var_48] +
mov [esp+6Ch+var_48] eax +
mov [edi] eax +
jmp loc_47956A  +
mov eax [esp+6Ch+var_50] +
add eax ecx +
cmp [esp+6Ch+var_44] eax +
mov [esp+6Ch+var_50] eax +
jb loc_4791B8  +
cmp ecx eax +
ja loc_4791B8  +
mov edi [esp+6Ch+var_30] +
sub eax 1 +
mov [esp+6Ch+var_24] eax +
add edi eax +
cmp [esp+6Ch+var_50] edi +
mov eax edi +
jbe loc_479899  +
mov eax [esp+6Ch+var_20] +
cmp eax ecx +
mov edi eax +
jbe loc_479815  +
cmp [esp+6Ch+var_44] edi +
mov [esp+6Ch+var_54] 1 +
jnb loc_4791B8  +
test dword ptr [edx+14h] 402h +
jnz loc_4798B0  +
test dword ptr [ebx+14h] 402h +
jz loc_4798B0  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_54] 1 +
test byte ptr [eax+29h] 20h +
jz loc_4791B8  +
mov ecx [esp+6Ch+var_24] +
xor ecx [esp+6Ch+var_44] +
test [esp+6Ch+var_2C] ecx +
jnz loc_4791B8  +
test ebp ebp +
jnz loc_4798CB  +
test byte ptr [ebx+14h] 8 +
jnz loc_4798CB  +
mov eax [esp+6Ch+var_24] +
xor eax [esp+6Ch+var_44] +
test [esp+6Ch+var_2C] eax +
jz loc_4798CB  +
mov [esp+6Ch+var_54] 1 +
jmp loc_4791B8  +
mov [esp+6Ch+var_38] esi +
mov [esp+6Ch+var_34] 0 +
mov [esp+6Ch+var_50] 0 +
jmp loc_47917C  +
mov edi [esp+6Ch+var_30] +
and eax [esp+6Ch+var_2C] +
add edi eax +
cmp edi ecx +
jbe loc_479815  +
jmp loc_479803  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_54] 0 +
test byte ptr [eax+29h] 20h +
jz loc_4791B8  +
jmp loc_47985A  +
mov [esp+6Ch+var_54] 0 +
jmp loc_4791B8  +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] 2Ch +
mov [esp+6Ch+var_6C] eax +
call sub_458B60  +
test eax eax +
mov edi eax +
jz loc_47962C  +
mov dword ptr [eax] 0 +
or byte ptr [eax+20h] 21h +
mov dword ptr [eax+4] 6 +
mov dword ptr [eax+8] 5 +
mov [esp+6Ch+var_10] eax +
mov eax [esp+6Ch+arg_0] +
mov [esp+6Ch+var_68] 2Ch +
mov [esp+6Ch+var_6C] eax +
call sub_458B60  +
test eax eax +
jz loc_47962C  +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 3 +
mov dword ptr [eax+24h] 1 +
mov [eax+28h] ebp +
mov [esp+6Ch+var_48] eax +
mov [edi] eax +
jmp loc_479084  +
mov [esp+6Ch+var_68] 1092h +
mov [esp+6Ch+var_6C] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_479029  +
mov edx [esp+6Ch+arg_4] +
mov eax [esp+6Ch+arg_0] +
call sub_474110  +
mov edx eax +
jmp loc_4790F7  +
mov [esp+6Ch+var_40] 0 +
jmp loc_479029  +
***
sub esp 24h +
mov edx [esp+24h+arg_4] +
mov ecx [esp+24h+arg_0] +
mov eax [edx+8Ch] +
test eax eax +
jz loc_4799BE  +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_479A0D  +
cmp edx offset off_4BFB90 +
jz loc_479A52  +
mov esi [edx+14h] +
mov ebx 0FFFFFFF2h +
and esi 1000h +
jz loc_479A13  +
mov eax [ecx+4] +
mov eax [eax+1B0h] +
mov eax [eax+60h] +
test eax eax +
jz loc_479A03  +
lea esi [esp+24h+var_8] +
mov [esp+24h+var_8] ebx +
mov [esp+24h+var_1C] esi +
mov [esp+24h+var_20] edx +
mov [esp+24h+var_24] ecx +
call eax  +
test eax eax +
jnz loc_479A48  +
cmp ebx 0FFFFFEFFh +
mov eax ebx +
jz loc_479A32  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax [ecx+4] +
cmp edx offset off_4BFAE8 +
mov bx 0FEFFh +
cmovz ebx esi +
mov eax [eax+1B0h] +
mov eax [eax+60h] +
test eax eax +
jnz loc_4799EA  +
jmp loc_479A03  +
mov [esp+24h+var_24] 0Fh +
mov [esp+24h+var_18] ebx +
call sub_44BAF0  +
mov eax [esp+24h+var_18] +
jmp loc_479A0D  +
mov eax [esp+24h+var_8] +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
mov eax [ecx+4] +
mov ebx 0FFFFFFF1h +
mov eax [eax+1B0h] +
mov eax [eax+60h] +
test eax eax +
jnz loc_4799EA  +
jmp loc_479A03  +
***
push esi  +
push ebx  +
sub esp 0ACh +
mov ebp [esp+0ACh+arg_0] +
mov eax [ebp+4] +
test byte ptr [ebp+2Bh] 10h +
mov esi [eax+1B0h] +
jnz loc_479C82  +
mov eax [esi+0A0h] +
mov edx esi +
test eax eax +
jz loc_479AB9  +
mov edi [esp+0ACh+arg_4] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] edi +
call eax  +
mov eax [ebp+4] +
mov edx [eax+1B0h] +
mov [esp+0ACh+var_94] edx +
mov ebx [ebp+0A0h] +
call sub_488500  +
test eax eax +
mov edi eax +
jz loc_479C5E  +
mov eax [ebp+0A0h] +
mov edx [esp+0ACh+var_94] +
mov eax [eax+934h] +
mov [eax+4] edi +
mov byte ptr [ebx] 7Fh +
mov byte ptr [ebx+1] 45h +
mov byte ptr [ebx+2] 4Ch +
mov byte ptr [ebx+3] 46h +
mov eax [edx+174h] +
movzx eax byte ptr [eax+0Ch] +
mov [ebx+4] al +
mov eax [ebp+4] +
cmp dword ptr [eax+8] 1 +
sbb eax eax +
not eax  +
add eax 2 +
mov [ebx+5] al +
mov eax [edx+174h] +
movzx eax byte ptr [eax+0Dh] +
mov [ebx+6] al +
mov eax [ebp+28h] +
shr eax 5 +
and eax 3FFFFh +
test al 40h +
jz loc_479C70  +
mov eax 3 +
mov [ebx+24h] ax +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_94] edx +
call sub_4536B0  +
mov edx [esp+0ACh+var_94] +
test eax eax +
jnz loc_479C92  +
xor eax eax +
mov [ebx+26h] ax +
mov eax [edx+174h] +
movzx edx byte ptr [eax+0Dh] +
mov [ebx+1Ch] edx +
movzx edx byte ptr [eax] +
mov dword ptr [ebx+14h] 0 +
mov dword ptr [ebx+2Ch] 0 +
mov dword ptr [ebx+30h] 0 +
mov [ebx+28h] edx +
mov edx [ebp+74h] +
mov [ebx+10h] edx +
movzx eax byte ptr [eax+2] +
mov [ebx+34h] eax +
mov ebx [ebp+0A0h] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] offset a_symtab +
mov [esp+0ACh+var_AC] edi +
call sub_4885B0  +
mov [ebx+48h] eax +
mov ebx [ebp+0A0h] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] offset a_strtab +
mov [esp+0ACh+var_AC] edi +
call sub_4885B0  +
mov [ebx+0B8h] eax +
mov ebx [ebp+0A0h] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] offset a_shstrtab +
mov [esp+0ACh+var_AC] edi +
call sub_4885B0  +
mov [ebx+80h] eax +
mov eax [ebp+0A0h] +
cmp dword ptr [eax+48h] 0FFFFFFFFh +
jz loc_479C5E  +
cmp dword ptr [eax+0B8h] 0FFFFFFFFh +
jz loc_479C5E  +
cmp dword ptr [eax+80h] 0FFFFFFFFh +
jz loc_479C5E  +
mov eax [esi+0C8h] +
mov esi [esp+0ACh+arg_4] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] esi +
call eax  +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_A8] offset sub_474BF0 +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_30] 0 +
mov [esp+0ACh+var_34] eax +
lea eax [esp+0ACh+var_34] +
mov [esp+0ACh+var_A4] eax +
call sub_44DAD0  +
mov ecx [esp+0ACh+var_30] +
test ecx ecx +
jz loc_479CC0  +
xor eax eax +
add esp 0ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test al 2 +
jz loc_479CA0  +
mov eax 2 +
mov [ebx+24h] ax +
jmp loc_479B3B  +
add esp 0ACh +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edx+8] +
mov [ebx+26h] ax +
jmp loc_479B59  +
movzx eax byte ptr [ebp+28h] +
and eax 7 +
cmp al 3 +
setz al  +
movzx eax al +
lea eax [eax+eax*2+1] +
mov [ebx+24h] ax +
jmp loc_479B3B  +
mov eax [ebp+0A0h] +
mov [esp+0ACh+var_8C] eax +
mov eax [eax+934h] +
mov eax [eax+4] +
mov [esp+0ACh+var_AC] eax +
call sub_4887C0  +
mov esi [esp+0ACh+arg_4] +
test esi esi +
jz loc_47A5E0  +
mov eax [esp+0ACh+arg_4] +
mov edi 2 +
mov esi 1 +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_47A5E0  +
mov eax [ebp+64h] +
test eax eax +
jz loc_479E09  +
mov ecx esi +
mov edx ebp +
mov esi eax +
jmp loc_479D9A  +
mov eax [eax] +
lea ebp [edi+1] +
mov [ebx+44h] edi +
cmp eax 0FFFFFFFFh +
jz loc_479D50  +
mov ecx [edx+0A0h] +
mov [esp+0ACh+var_94] edx +
mov ecx [ecx+934h] +
mov ecx [ecx+4] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] ecx +
call sub_488690  +
mov edx [esp+0ACh+var_94] +
mov eax [ebx+4Ch] +
test eax eax +
jz loc_479DF7  +
mov eax [eax] +
lea ecx [ebp+1] +
mov [ebx+54h] ebp +
cmp eax 0FFFFFFFFh +
jz loc_479D93  +
mov ebx [edx+0A0h] +
mov [esp+0ACh+var_84] ecx +
mov [esp+0ACh+var_94] edx +
mov ebx [ebx+934h] +
mov ebx [ebx+4] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] ebx +
call sub_488690  +
mov edx [esp+0ACh+var_94] +
mov ecx [esp+0ACh+var_84] +
mov esi [esi+0Ch] +
test esi esi +
jz loc_479E02  +
mov ebx [esi+8Ch] +
mov edi ecx +
cmp dword ptr [ebx+4] 11h +
jz loc_479DAE  +
add edi 1 +
mov [ebx+5Ch] ecx +
mov eax [ebx] +
cmp eax 0FFFFFFFFh +
jz loc_479DD8  +
mov ecx [edx+0A0h] +
mov [esp+0ACh+var_94] edx +
mov ecx [ecx+934h] +
mov ecx [ecx+4] +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_AC] ecx +
call sub_488690  +
mov edx [esp+0ACh+var_94] +
mov eax [ebx+3Ch] +
test eax eax +
jnz loc_479D20  +
mov eax [ebx+4Ch] +
mov ebp edi +
mov dword ptr [ebx+44h] 0 +
test eax eax +
jnz loc_479D5B  +
mov dword ptr [ebx+54h] 0 +
mov ecx ebp +
jmp loc_479D93  +
mov esi ecx +
mov ebp edx +
lea edi [ecx+1] +
mov eax [ebp+0A0h] +
mov ecx [esp+0ACh+var_8C] +
mov eax [eax+934h] +
mov edx [ecx+80h] +
mov [eax+2Ch] esi +
mov eax [eax+4] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] eax +
call sub_488690  +
mov eax [ebp+0A0h] +
mov ebx [ebp+7Ch] +
mov edx [eax+934h] +
test ebx ebx +
mov edx [edx+2Ch] +
mov [eax+3Ch] edx +
jz loc_47A1D2  +
mov eax [ebp+0A0h] +
lea ebx [esi+2] +
mov [eax+90Ch] edi +
mov eax [esp+0ACh+var_8C] +
mov edx [eax+48h] +
mov eax [ebp+0A0h] +
mov eax [eax+934h] +
mov eax [eax+4] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_AC] eax +
call sub_488690  +
cmp ebx 0FEFEh +
jbe loc_47B6F4  +
mov eax [ebp+0A0h] +
mov edx [eax+208h] +
test edx edx +
jz loc_479EAF  +
mov [esp+0ACh+var_A8] 0D5Ch +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
call sub_44BA40  +
mov [esp+0ACh+var_A8] 40h +
add esi 3 +
mov [esp+0ACh+var_AC] ebp +
call sub_458B60  +
mov [eax+38h] ebx +
mov edi eax +
mov eax [ebp+0A0h] +
mov [eax+208h] edi +
mov eax [ebp+0A0h] +
mov eax [eax+934h] +
mov eax [eax+4] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] offset a_symtab_shndx +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
mov [edi] eax +
jz loc_479C5E  +
mov eax [ebp+0A0h] +
lea edi [esi+1] +
mov ebx 1 +
mov eax [eax+934h] +
mov [eax+30h] esi +
mov esi [esp+0ACh+var_8C] +
mov eax [eax+4] +
mov edx [esi+0B8h] +
mov [esp+0ACh+var_AC] eax +
mov [esp+0ACh+var_A8] edx +
call sub_488690  +
cmp edi 0FFFFFEFFh +
ja loc_47A640  +
mov eax [ebp+0A0h] +
mov [eax+214h] edi +
mov eax [ebp+0A0h] +
mov [eax+38h] edi +
mov [esp+0ACh+var_A4] 4 +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_AC] ebp +
call sub_458C50  +
test eax eax +
mov esi eax +
mov [esp+0ACh+var_94] eax +
jz loc_479C5E  +
mov [esp+0ACh+var_A8] 38h +
mov [esp+0ACh+var_AC] ebp +
call sub_458B60  +
test eax eax +
mov [esi] eax +
jz loc_47C07B  +
mov eax [ebp+0A0h] +
test ebx ebx +
mov esi [esp+0ACh+var_94] +
mov edi [esp+0ACh+var_8C] +
mov [eax+40h] esi +
mov eax [ebp+0A0h] +
lea edx [edi+80h] +
mov eax [eax+934h] +
mov eax [eax+2Ch] +
mov [esi+eax*4] edx +
jz loc_47A03A  +
mov eax [ebp+0A0h] +
lea edx [edi+48h] +
mov esi [esp+0ACh+var_94] +
mov eax [eax+90Ch] +
mov [esi+eax*4] edx +
mov eax [ebp+0A0h] +
cmp dword ptr [eax+214h] 0FF00h +
jbe loc_47A00E  +
mov ebx [eax+208h] +
test ebx ebx +
jz loc_47CA83  +
mov eax [ebx+38h] +
mov esi [esp+0ACh+var_94] +
mov [esi+eax*4] ebx +
mov eax [ebp+0A0h] +
mov edx [eax+90Ch] +
mov [ebx+1Ch] edx +
mov eax [eax+934h] +
mov esi [esp+0ACh+var_8C] +
mov edi [esp+0ACh+var_94] +
mov eax [eax+30h] +
lea edx [esi+0B8h] +
mov [edi+eax*4] edx +
mov eax [ebp+0A0h] +
mov eax [eax+934h] +
mov eax [eax+30h] +
mov [esi+64h] eax +
mov edx [ebp+64h] +
test edx edx +
jz loc_47A45C  +
mov [esp+0ACh+arg_0] ebp +
jmp loc_47A0BB  +
cmp eax 5 +
jz loc_47A2D5  +
ja loc_47A201  +
cmp eax 3 +
jnz loc_47A300  +
mov esi [edx] +
mov edi offset a_stab_2 +
mov ecx 5 +
mov ebp esi +
cmps   +
jnz loc_47A0B0  +
mov [esp+0ACh+var_AC] ebp +
mov edi ebp +
mov [esp+0ACh+var_84] edx +
mov esi edi +
mov edi offset aStr_0 +
call strlen  +
mov ecx 4 +
mov edx [esp+0ACh+var_84] +
mov ebp eax +
sub eax 3 +
mov [esp+0ACh+var_8C] eax +
add esi eax +
cmps   +
jz loc_47A660  +
nop   +
lea esi [esi+0] +
mov edx [edx+0Ch] +
test edx edx +
jz loc_47A455  +
mov ebx [edx+8Ch] +
mov eax [esp+0ACh+var_94] +
mov ecx [ebx+44h] +
mov esi [ebx+5Ch] +
test ecx ecx +
mov [eax+esi*4] ebx +
jz loc_47A0DC  +
mov eax [ebx+3Ch] +
mov edi [esp+0ACh+var_94] +
mov [edi+ecx*4] eax +
mov eax [ebx+54h] +
test eax eax +
jz loc_47A0EE  +
mov edi [ebx+4Ch] +
mov ebp [esp+0ACh+var_94] +
mov [ebp+eax*4+0] edi +
test ecx ecx +
jz loc_47A112  +
mov edi [esp+0ACh+arg_0] +
mov ecx [ebx+3Ch] +
mov edi [edi+0A0h] +
mov edi [edi+90Ch] +
or dword ptr [ecx+8] 40h +
mov [ecx+20h] esi +
mov [ecx+1Ch] edi +
test eax eax +
jz loc_47A136  +
mov edi [esp+0ACh+arg_0] +
mov eax [ebx+4Ch] +
mov ecx [edi+0A0h] +
mov ecx [ecx+90Ch] +
or dword ptr [eax+8] 40h +
mov [eax+20h] esi +
mov [eax+1Ch] ecx +
test byte ptr [ebx+8] 80h +
jz loc_47A18B  +
mov eax [edx+8Ch] +
mov edi [eax+64h] +
test edi edi +
jz loc_47A320  +
mov eax [esp+0ACh+arg_4] +
test eax eax +
jz loc_47A363  +
cmp edi offset off_4BFB90 +
jz loc_47A3B0  +
mov esi [edi+3Ch] +
cmp esi offset off_4BFB90 +
jz loc_47A3C0  +
test esi esi +
jz loc_47A434  +
mov eax [esi+8Ch] +
mov eax [eax+5Ch] +
mov [ebx+1Ch] eax +
mov eax [ebx+4] +
cmp eax 0Bh +
jz loc_47A280  +
jbe loc_47A050  +
cmp eax 6FFFFFF7h +
jz loc_47A2E3  +
ja loc_47A2B8  +
cmp eax 11h +
jnz loc_47A310  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
mov eax [eax+90Ch] +
mov [ebx+1Ch] eax +
jmp loc_47A0B0  +
mov ecx [esp+0ACh+arg_4] +
xor ebx ebx +
test ecx ecx +
jnz loc_479F35  +
mov eax [ebp+28h] +
shr eax 5 +
and eax 43h +
cmp eax 1 +
jz loc_479E4E  +
mov ebx [esp+0ACh+arg_4] +
jmp loc_479F35  +
cmp eax 6 +
jz loc_47A280  +
cmp eax 9 +
jnz loc_47A0B0  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] offset a_dynsym_0 +
mov [esp+0ACh+var_84] edx +
mov [esp+0ACh+var_AC] eax +
call sub_44D4B0  +
mov edx [esp+0ACh+var_84] +
test eax eax +
jz loc_47A23E  +
mov eax [eax+8Ch] +
mov eax [eax+5Ch] +
mov [ebx+1Ch] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_84] edx +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+160h] +
mov [esp+0ACh+var_AC] edx +
call eax  +
mov edx [esp+0ACh+var_84] +
test eax eax +
jz loc_47A0B0  +
mov eax [eax+8Ch] +
mov eax [eax+5Ch] +
or dword ptr [ebx+8] 40h +
mov [ebx+20h] eax +
jmp loc_47A0B0  +
mov [esp+0ACh+var_84] edx +
mov [esp+0ACh+var_A8] offset a_dynstr_0 +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] eax +
call sub_44D4B0  +
mov edx [esp+0ACh+var_84] +
test eax eax +
jz loc_47A0B0  +
mov eax [eax+8Ch] +
mov eax [eax+5Ch] +
mov [ebx+1Ch] eax +
jmp loc_47A0B0  +
cmp eax 6FFFFFFDh +
jb loc_47A0B0  +
cmp eax 6FFFFFFEh +
jbe loc_47A280  +
cmp eax 6FFFFFFFh +
jnz loc_47A0B0  +
mov [esp+0ACh+var_84] edx +
mov [esp+0ACh+var_A8] offset a_dynsym_0 +
jmp loc_47A28C  +
test byte ptr [edx+14h] 1 +
mov eax offset a_dynstr_0 +
mov esi offset a_gnu_libstr +
mov [esp+0ACh+var_84] edx +
cmovz eax esi +
mov [esp+0ACh+var_A8] eax +
jmp loc_47A28C  +
cmp eax 4 +
jz loc_47A20F  +
jmp loc_47A0B0  +
cmp eax 6FFFFFF6h +
jz loc_47A2D5  +
jmp loc_47A0B0  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+164h] +
test eax eax +
jz loc_47A18B  +
mov esi [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_84] edx +
mov [esp+0ACh+var_AC] offset aBWarningSh_l_0 +
mov [esp+0ACh+var_A8] esi +
call eax  +
mov edx [esp+0ACh+var_84] +
jmp loc_47A18B  +
mov esi [edi+3Ch] +
test esi esi +
jnz loc_47A17F  +
mov edx [edi+94h] +
mov eax [ebx+2Ch] +
mov ebp [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A0] edi +
mov [esp+0ACh+var_9C] edx +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] offset aBSh_linkOfSect +
call off_4BFA04  +
mov [esp+0ACh+var_AC] 11h +
call sub_44BAF0  +
jmp loc_479C5E  +
mov esi off_4BFBCC +
jmp loc_47A177  +
movzx eax word ptr [edi+18h] +
and ax 380h +
cmp ax 100h +
jz loc_47A17F  +
cmp ax 200h +
jz loc_47A17F  +
mov eax [ebx+2Ch] +
mov ecx [edi+94h] +
mov [esp+0ACh+var_84] edx +
mov [esp+0ACh+var_A0] edi +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_9C] ecx +
mov [esp+0ACh+var_AC] offset aBSh_linkOfSe_0 +
mov [esp+0ACh+var_A8] eax +
call off_4BFA04  +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_AC] edi +
mov [esp+0ACh+var_A8] eax +
call sub_469A40  +
test eax eax +
jz loc_47C0D5  +
mov esi [eax+3Ch] +
mov edx [esp+0ACh+var_84] +
jmp loc_47A177  +
mov [esp+0ACh+var_A8] 0DD0h +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
mov [esp+0ACh+var_84] edx +
call sub_44BA40  +
mov edx [esp+0ACh+var_84] +
jmp loc_47A17F  +
mov ebp [esp+0ACh+arg_0] +
mov edx [esp+0ACh+arg_4] +
test edx edx +
jz loc_47B84E  +
mov [esp+0ACh+var_38] 0 +
mov [esp+0ACh+var_58] 0 +
mov [esp+0ACh+var_4C] 0 +
mov eax [ebp+4] +
mov esi [ebp+0A0h] +
mov eax [eax+1B0h] +
mov [esp+0ACh+var_50] esi +
mov dword ptr [esi+84h] 3 +
mov dword ptr [esi+88h] 0 +
mov [esp+0ACh+var_60] eax +
mov eax [ebp+28h] +
mov dword ptr [esi+8Ch] 0 +
mov dword ptr [esi+0A8h] 0 +
mov dword ptr [esi+9Ch] 0 +
shr eax 5 +
test al 42h +
mov dword ptr [esi+0A0h] 0 +
mov dword ptr [esi+0A4h] 1 +
jnz loc_47A708  +
movzx eax byte ptr [ebp+28h] +
and eax 7 +
cmp al 3 +
jz loc_47A708  +
mov eax esi +
xor edx edx +
mov esi [esi+40h] +
mov edi [eax+214h] +
mov eax [eax+28h] +
cmp edi 1 +
mov [esp+0ACh+var_94] edi +
jbe loc_47C027  +
mov edi [esp+0ACh+var_50] +
mov ebx 1 +
mov [esp+0ACh+arg_0] ebp +
mov ecx [edi+934h] +
mov ebp edi +
mov [esp+0ACh+var_84] ecx +
jmp loc_47A59D  +
cmp [ebp+90Ch] ebx +
jz loc_47A5BE  +
mov edi [ebp+208h] +
test edi edi +
jz loc_47A552  +
mov edi [edi+38h] +
cmp ecx [esi+edi*4] +
jz loc_47A5BE  +
mov edi [esp+0ACh+var_84] +
cmp ebx [edi+30h] +
jz loc_47A5BE  +
cmp ebx [edi+2Ch] +
jz loc_47A5BE  +
mov [esp+0ACh+var_A0] 1 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] ecx +
call sub_478D10  +
mov edi [esp+0ACh+arg_0] +
mov ebp [edi+0A0h] +
mov edi [ebp+934h] +
mov [esp+0ACh+var_84] edi +
nop   +
add ebx 1 +
cmp ebx [esp+0ACh+var_94] +
jz loc_47B659  +
mov ecx [esi+ebx*4] +
mov edi [ecx+4] +
cmp edi 4 +
jz loc_47A5AD  +
cmp edi 9 +
jnz loc_47A5D0  +
mov edi [ecx+2Ch] +
test edi edi +
jz loc_47A5BE  +
test byte ptr [edi+17h] 8 +
jz loc_47A538  +
mov dword ptr [ecx+10h] 0FFFFFFFFh +
mov dword ptr [ecx+14h] 0FFFFFFFFh +
jmp loc_47A590  +
mov edi [ecx+2Ch] +
test edi edi +
jnz loc_47A5B4  +
jmp loc_47A538  +
mov eax [ebp+64h] +
test eax eax +
jz loc_47BF59  +
mov esi 1 +
jmp loc_47A5FF  +
mov edx [eax+0Ch] +
test edx edx +
mov eax edx +
jz loc_47A700  +
mov edx [eax+8Ch] +
cmp dword ptr [edx+4] 11h +
jnz loc_47A5F2  +
test byte ptr [eax+16h] 10h +
jz loc_47A638  +
mov ecx [eax+10h] +
mov edx [eax+0Ch] +
test ecx ecx +
mov ebx edx +
jz loc_47BD86  +
mov [ecx+0Ch] edx +
mov edx [eax+0Ch] +
test ebx ebx +
jz loc_47BD7E  +
mov [ebx+10h] ecx +
sub dword ptr [ebp+6Ch] 1 +
jmp loc_47A5F5  +
mov [edx+5Ch] esi +
add esi 1 +
jmp loc_47A5F2  +
mov [esp+0ACh+var_A4] edi +
mov [esp+0ACh+var_A8] ebp +
mov [esp+0ACh+var_AC] offset aBTooManySect_0 +
call off_4BFA04  +
jmp loc_479C5E  +
lea eax [ebp-2] +
mov [esp+0ACh+var_AC] eax +
call sub_459B80  +
test eax eax +
mov esi eax +
jz loc_479C5E  +
mov edx [esp+0ACh+var_84] +
mov ecx [esp+0ACh+var_8C] +
mov eax [edx] +
mov [esp+0ACh+var_A4] ecx +
mov [esp+0ACh+var_AC] esi +
mov [esp+0ACh+var_A8] eax +
call memcpy  +
mov eax [esp+0ACh+arg_0] +
mov byte ptr [esi+ebp-3] 0 +
mov [esp+0ACh+var_A8] esi +
mov [esp+0ACh+var_AC] eax +
call sub_44D4B0  +
mov [esp+0ACh+var_AC] esi +
mov edi eax +
call free  +
test edi edi +
mov edx [esp+0ACh+var_84] +
jz loc_47A0B0  +
mov esi [edi+8Ch] +
mov eax [ebx+5Ch] +
mov [esi+1Ch] eax +
mov eax [esi+28h] +
test eax eax +
jnz loc_47A0B0  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] eax +
call loc_44BFD0  +
mov edx [esp+0ACh+var_84] +
test eax eax +
lea ecx [eax+3] +
cmovs eax ecx +
sar eax 2 +
add eax 4 +
mov [esi+28h] eax +
jmp loc_47A0B0  +
lea edi [esi+1] +
jmp loc_479D09  +
mov edi [esp+0ACh+arg_4] +
mov esi [esp+0ACh+var_50] +
test edi edi +
jz loc_47C09A  +
mov eax [esi+934h] +
xor edi edi +
mov eax [eax] +
test eax eax +
jz loc_47B708  +
xor ecx ecx +
nop   +
mov edx [eax+1Ch] +
add ecx 1 +
mov eax [eax] +
test edx edx +
cmovnz edi edx +
test eax eax +
jnz loc_47A730  +
test ecx ecx +
mov [esp+0ACh+var_5C] ecx +
jz loc_47B708  +
mov eax [esp+0ACh+var_60] +
mov ecx [eax+174h] +
movzx eax byte ptr [ecx] +
mov [esi+14h] eax +
mov eax [ebp+0A0h] +
movzx edx byte ptr [ecx+1] +
mov [eax+2Ch] edx +
mov eax [ebp+0A0h] +
mov esi [esp+0ACh+var_5C] +
mov [eax+30h] esi +
mov eax [ebp+0A0h] +
mov edx [eax+934h] +
mov esi [edx+1Ch] +
cmp esi 0FFFFFFFFh +
jz loc_47BDB5  +
movzx ebx byte ptr [ecx+1] +
imul ebx [esp+0ACh+var_5C] +
cmp esi ebx +
jb loc_47BEF4  +
mov ebx [esp+0ACh+var_5C] +
test ebx ebx +
jz loc_47B836  +
mov esi [edx+1Ch] +
xor edx edx +
movzx ecx byte ptr [ecx+1] +
mov eax esi +
div  ecx +
mov eax esi +
test edx edx +
jnz loc_47BF23  +
xor edx edx +
div  ecx +
mov [esp+0ACh+var_A4] 20h +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] eax +
call sub_458C50  +
mov ebx eax +
mov eax [ebp+0A0h] +
test ebx ebx +
mov [eax+44h] ebx +
jz loc_479C5E  +
test byte ptr [ebp+29h] 20h +
mov [esp+0ACh+var_48] 1 +
jz loc_47A807  +
mov eax [esp+0ACh+var_60] +
mov eax [eax+10h] +
mov [esp+0ACh+var_48] eax +
mov eax [esp+0ACh+var_60] +
xor edx edx +
mov [esp+0ACh+var_90] 0 +
mov eax [eax+174h] +
movzx esi byte ptr [eax] +
movzx eax byte ptr [eax+1] +
imul eax [esp+0ACh+var_5C] +
mov [esp+0ACh+var_94] esi +
add [esp+0ACh+var_94] eax +
mov eax [esp+0ACh+var_94] +
adc [esp+0ACh+var_90] edx +
cmp eax edi +
ja loc_47BDC6  +
sub edi eax +
xor edx edx +
mov [esp+0ACh+var_44] edi +
mov eax edi +
add eax [esp+0ACh+var_94] +
adc edx [esp+0ACh+var_90] +
mov [esp+0ACh+var_7C] eax +
mov eax [ebp+0A0h] +
mov [esp+0ACh+var_78] edx +
mov edx [eax+934h] +
mov esi [edx] +
test esi esi +
mov [esp+0ACh+var_84] esi +
jz loc_47AE38  +
mov [esp+0ACh+arg_0] ebp +
mov ebp ebx +
mov [esp+0ACh+var_64] 0 +
mov eax [esp+0ACh+var_84] +
mov ebx [eax+24h] +
cmp ebx 1 +
jbe loc_47B187  +
mov eax [esp+0ACh+arg_0] +
mov eax [eax+0A0h] +
cmp word ptr [eax+24h] 4 +
jnz loc_47A8BC  +
mov eax [esp+0ACh+var_84] +
mov eax [eax+4] +
cmp eax 4 +
mov [esp+0ACh+var_94] eax +
jz loc_47AFC0  +
mov esi [esp+0ACh+var_84] +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_A0] offset loc_473EC0 +
mov [esp+0ACh+var_A4] 4 +
lea eax [esi+28h] +
mov [esp+0ACh+var_AC] eax +
call qsort  +
mov eax esi +
mov esi [esi+4] +
mov ebx [eax+24h] +
mov [esp+0ACh+var_94] esi +
mov eax [esp+0ACh+var_94] +
test ebx ebx +
mov esi [esp+0ACh+var_84] +
mov [ebp+0] eax +
mov eax [esi+8] +
mov [esp+0ACh+var_74] eax +
mov [ebp+4] eax +
jnz loc_47AFD5  +
movzx eax byte ptr [esi+20h] +
mov dword ptr [ebp+0Ch] 0 +
mov byte ptr [esp+0ACh+var_8C] al +
and eax 2 +
mov byte ptr [esp+0ACh+var_80] al +
jnz loc_47AFB1  +
mov dword ptr [ebp+10h] 0 +
cmp [esp+0ACh+var_94] 1 +
jz loc_47B060  +
test byte ptr [esp+0ACh+var_8C] 4 +
jz loc_47B005  +
mov eax [esp+0ACh+var_84] +
mov eax [eax+14h] +
mov [ebp+1Ch] eax +
cmp [esp+0ACh+var_94] 1 +
jz loc_47B08A  +
cmp [esp+0ACh+var_94] 2 +
jz loc_47B522  +
xor esi esi +
cmp [esp+0ACh+var_94] 4 +
mov [esp+0ACh+var_6C] 0 +
jz loc_47B150  +
movzx eax byte ptr [esp+0ACh+var_8C] +
mov dword ptr [ebp+8] 0 +
mov dword ptr [ebp+14h] 0 +
mov dword ptr [ebp+18h] 0 +
and eax 10h +
jz loc_47A9E0  +
test byte ptr [esp+0ACh+var_8C] 1 +
jnz loc_47A9A6  +
mov edx [esp+0ACh+var_74] +
or edx 4 +
mov [ebp+4] edx +
mov edi [esp+0ACh+var_60] +
test ebx ebx +
mov edx [edi+174h] +
movzx ecx byte ptr [edx] +
mov [ebp+14h] ecx +
movzx edx byte ptr [edx] +
mov [ebp+18h] edx +
jz loc_47A9E0  +
mov ecx [ebp+0Ch] +
mov edx [esp+0ACh+var_7C] +
cmp ecx edx +
jb loc_47C0BD  +
sub ecx edx +
cmp byte ptr [esp+0ACh+var_80] 0 +
mov [ebp+0Ch] ecx +
jnz loc_47A9E0  +
sub [ebp+10h] edx +
nop   +
test byte ptr [esp+0ACh+var_8C] 20h +
jz loc_47AA4C  +
test byte ptr [esp+0ACh+var_8C] 1 +
jnz loc_47A9F2  +
or dword ptr [ebp+4] 4 +
test al al +
mov eax [esp+0ACh+var_60] +
mov edx [eax+174h] +
jnz loc_47B4F7  +
movzx eax byte ptr [edx] +
test ebx ebx +
mov [ebp+8] eax +
jz loc_47B6D7  +
sub eax [esp+0ACh+var_7C] +
add [ebp+0Ch] eax +
cmp byte ptr [esp+0ACh+var_80] 0 +
jnz loc_47AA23  +
add [ebp+10h] eax +
movzx eax byte ptr [edx+1] +
mov edi [esp+0ACh+var_5C] +
imul eax edi +
add eax [ebp+14h] +
mov [ebp+14h] eax +
movzx edx byte ptr [edx+1] +
imul edx edi +
add edx [ebp+18h] +
mov edi [esp+0ACh+var_44] +
add eax edi +
add edx edi +
mov [ebp+14h] eax +
mov [ebp+18h] edx +
mov eax [esp+0ACh+var_94] +
cmp eax 1 +
jz loc_47B046  +
cmp eax 4 +
jz loc_47B030  +
mov eax [esp+0ACh+var_84] +
mov ecx [eax+24h] +
lea esi [eax+28h] +
mov [esp+0ACh+var_74] esi +
test ecx ecx +
jz loc_47BEE8  +
mov edi [ebp+0] +
mov esi ebp +
mov [esp+0ACh+var_94] 0 +
mov [esp+0ACh+var_80] edi +
jmp loc_47AB19  +
cmp edi 1 +
jz loc_47AC20  +
cmp dword ptr [ebp+4] 8 +
jz loc_47AC50  +
mov ecx [ebp+18h] +
add [esi+14h] ecx +
test byte ptr [ebp+8] 2 +
jz loc_47AAB2  +
add [esi+18h] ecx +
mov eax [esp+0ACh+var_8C] +
cmp eax [esi+1Ch] +
mov eax [esp+0ACh+var_84] +
movzx eax byte ptr [eax+20h] +
jbe loc_47AAD9  +
test al 4 +
jnz loc_47AAD9  +
cmp [esp+0ACh+var_80] 1 +
jz loc_47ADA0  +
mov ecx [esp+0ACh+var_8C] +
mov [esi+1Ch] ecx +
test al 1 +
jnz loc_47AAFF  +
mov eax [esi+4] +
mov edx eax +
or edx 4 +
mov [esi+4] edx +
mov edx [ebp+8] +
test dl 4 +
jz loc_47AAF6  +
or eax 5 +
mov [esi+4] eax +
and edx 1 +
jz loc_47AAFF  +
or dword ptr [esi+4] 2 +
mov [esp+0ACh+var_80] edi +
mov eax [esp+0ACh+var_84] +
add [esp+0ACh+var_94] 1 +
mov ecx [eax+24h] +
cmp [esp+0ACh+var_94] ecx +
jnb loc_47ADF6  +
mov eax [esp+0ACh+var_74] +
mov ecx [esp+0ACh+var_94] +
mov ebx [eax+ecx*4] +
mov eax 1 +
mov ecx [ebx+40h] +
mov ebp [ebx+8Ch] +
shl eax cl +
cmp edi 7 +
mov [esp+0ACh+var_8C] eax +
setz dl  +
jz loc_47AB45  +
cmp edi 1 +
jnz loc_47ABAF  +
mov eax [ebp+4] +
cmp eax 8 +
jz loc_47ACE3  +
mov edi [esi+18h] +
mov edx [esi+10h] +
mov ecx [ebx+20h] +
mov [esp+0ACh+var_80] edi +
mov [esp+0ACh+var_70] edx +
add edx edi +
mov edi ecx +
sub edi edx +
jz loc_47AB7C  +
cmp [esp+0ACh+var_70] edx +
ja loc_47ADB6  +
cmp edx ecx +
ja loc_47ADB6  +
mov edx [esp+0ACh+var_80] +
add edx edi +
cmp eax 8 +
mov [esi+18h] edx +
jz loc_47ABA9  +
mov eax [esi+14h] +
lea ecx [edi+eax] +
cmp edx ecx +
mov [esp+0ACh+var_80] eax +
ja loc_47AD05  +
xor edx edx +
add [esp+0ACh+var_7C] edi +
adc [esp+0ACh+var_78] edx +
mov [esi+14h] ecx +
mov edi [esi] +
mov [esp+0ACh+var_80] edi +
cmp edi 4 +
jnz loc_47AA90  +
mov eax [esp+0ACh+arg_0] +
movzx eax byte ptr [eax+28h] +
and eax 7 +
cmp al 3 +
jnz loc_47AA99  +
mov eax [esp+0ACh+var_94] +
test eax eax +
jnz loc_47AF90  +
mov eax [esp+0ACh+var_7C] +
mov edx [esp+0ACh+var_78] +
mov ecx [ebp+18h] +
mov [ebx+50h] eax +
mov [ebx+54h] edx +
mov [ebp+10h] eax +
mov eax [esp+0ACh+var_84] +
mov [ebp+14h] edx +
xor edx edx +
add [esp+0ACh+var_7C] ecx +
adc [esp+0ACh+var_78] edx +
movzx eax byte ptr [eax+20h] +
mov [esi+14h] ecx +
mov dword ptr [esi+18h] 0 +
mov dword ptr [esi+1Ch] 1 +
jmp loc_47AAD9  +
mov eax [esp+0ACh+var_7C] +
mov edx [esp+0ACh+var_78] +
cmp dword ptr [ebp+4] 8 +
mov [ebx+50h] eax +
mov [ebx+54h] edx +
mov [ebp+10h] eax +
mov [ebp+14h] edx +
jz loc_47AD95  +
mov ecx [ebp+18h] +
xor edx edx +
add [esp+0ACh+var_7C] ecx +
adc [esp+0ACh+var_78] edx +
jmp loc_47AAA6  +
mov ecx [ebp+8] +
test ch 4 +
mov eax ecx +
jz loc_47ACC0  +
mov edx [ebp+14h] +
or edx [ebp+10h] +
jnz loc_47ACC0  +
mov eax [ebp+0Ch] +
xor edx edx +
mov [esp+0ACh+var_70] eax +
xor eax eax +
cmp [esp+0ACh+var_8C] 0 +
jz loc_47ACA8  +
mov edi [esp+0ACh+var_8C] +
xor edx edx +
mov eax [esp+0ACh+var_70] +
sub eax [esp+0ACh+var_7C] +
sbb edx [esp+0ACh+var_78] +
mov [esp+0ACh+var_A4] edi +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_AC] eax +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_54] ecx +
call sub_4BB0A0  +
mov edi [esi] +
mov ecx [esp+0ACh+var_54] +
add eax [esp+0ACh+var_7C] +
adc edx [esp+0ACh+var_78] +
mov [ebx+50h] eax +
mov [ebx+54h] edx +
mov [ebp+10h] eax +
mov eax ecx +
mov [ebp+14h] edx +
nop   +
test al 2 +
jz loc_47AAB2  +
cmp [esp+0ACh+var_80] 7 +
jz loc_47ACD8  +
test ah 4 +
jnz loc_47AAB2  +
mov eax [ebp+18h] +
add [esi+18h] eax +
jmp loc_47AAB2  +
mov ecx [ebp+8] +
test cl 2 +
jz loc_47ABAF  +
and ch 4 +
jz loc_47AB51  +
test dl dl +
jz loc_47ABAF  +
jmp loc_47AB51  +
mov eax [esp+0ACh+var_7C] +
mov [esp+0ACh+var_70] edx +
mov edx [esp+0ACh+var_78] +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] eax +
call sub_46FCE0  +
mov edx [esp+0ACh+var_70] +
test eax eax +
jnz loc_479C5E  +
mov edi edx +
sub edi [esp+0ACh+var_80] +
mov [esp+0ACh+var_AC] edi +
call sub_459D10  +
test eax eax +
mov edx eax +
jz loc_479C5E  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] edx +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_70] edx +
mov [esp+0ACh+var_A4] eax +
call sub_46FB80  +
mov edx [esp+0ACh+var_70] +
mov [esp+0ACh+var_AC] edx +
mov [esp+0ACh+var_80] eax +
call free  +
mov eax [esp+0ACh+var_80] +
cmp edi eax +
jnz loc_479C5E  +
mov ecx [esi+14h] +
add ecx edi +
jmp loc_47AB9C  +
mov eax [ebp+8] +
jmp loc_47ACC0  +
mov ecx [esp+0ACh+arg_0] +
test byte ptr [ecx+29h] 20h +
jnz loc_47AAD9  +
jmp loc_47AAD2  +
mov eax [esp+0ACh+arg_0] +
xor edi edi +
mov [esp+0ACh+var_9C] edx +
mov [esp+0ACh+var_80] edx +
mov [esp+0ACh+var_A0] ecx +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_A4] ebx +
mov [esp+0ACh+var_AC] offset aBSectionALmaLx +
call off_4BFA04  +
mov edx [esp+0ACh+var_80] +
mov eax [esi+18h] +
mov [ebx+20h] edx +
mov [esp+0ACh+var_80] eax +
mov eax [ebp+4] +
jmp loc_47AB7C  +
mov ebp esi +
mov eax [esp+0ACh+var_6C] +
xor edx edx +
sub [esp+0ACh+var_7C] eax +
sbb [esp+0ACh+var_78] edx +
cmp [esp+0ACh+var_80] 1 +
jz loc_47B193  +
mov eax [esp+0ACh+var_84] +
add ebp 20h +
add [esp+0ACh+var_64] 1 +
mov eax [eax] +
test eax eax +
mov [esp+0ACh+var_84] eax +
jnz loc_47A884  +
mov ebp [esp+0ACh+arg_0] +
mov eax [ebp+0A0h] +
mov edx [eax+934h] +
mov esi [esp+0ACh+var_7C] +
mov edi [esp+0ACh+var_78] +
mov [edx+20h] esi +
mov [edx+24h] edi +
mov [esp+0ACh+var_8C] esi +
mov [esp+0ACh+var_88] edi +
mov ecx [ebp+4] +
mov esi [ecx+1B0h] +
mov ecx [eax+214h] +
mov [esp+0ACh+var_84] esi +
mov esi [eax+40h] +
lea edi [esi+ecx*4] +
mov [esp+0ACh+var_94] esi +
add esi 4 +
cmp edi esi +
jbe loc_47B756  +
mov [esp+0ACh+arg_0] ebp +
jmp loc_47AF52  +
cmp dword ptr [ebx+4] 8 +
jz loc_47B733  +
test byte ptr [ebx+8] 2 +
jz loc_47B570  +
mov edx [ebx+18h] +
test edx edx +
jz loc_47AECB  +
test eax eax +
mov edx off_4BFA04 +
jz loc_47C090  +
mov eax [eax] +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] offset aBWarningAlloca +
mov [esp+0ACh+var_A8] eax +
call edx  +
mov eax [esp+0ACh+arg_0] +
test byte ptr [eax+29h] 20h +
jz loc_47B6CF  +
mov ebp [ebx+18h] +
test ebp ebp +
jz loc_47B6CF  +
mov eax [esp+0ACh+var_84] +
mov ecx [eax+10h] +
mov eax [ebx+0Ch] +
xor edx edx +
mov ebp eax +
xor eax eax +
test ecx ecx +
jz loc_47AF1F  +
xor edx edx +
mov eax ebp +
sub eax [esp+0ACh+var_8C] +
sbb edx [esp+0ACh+var_88] +
mov [esp+0ACh+var_A4] ecx +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_AC] eax +
mov [esp+0ACh+var_A8] edx +
call sub_4BB0A0  +
add eax [esp+0ACh+var_8C] +
adc edx [esp+0ACh+var_88] +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] ebx +
call sub_478D10  +
mov [esp+0ACh+var_8C] eax +
mov [esp+0ACh+var_88] edx +
add esi 4 +
cmp edi esi +
jbe loc_47B743  +
mov ebx [esi] +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_47AE92  +
mov ecx [eax+54h] +
mov edx [eax+50h] +
mov ebp ecx +
or ebp edx +
jz loc_47AE88  +
xor ecx [ebx+14h] +
xor edx [ebx+10h] +
or ecx edx +
jz loc_47AF47  +
mov [esp+0ACh+var_A8] 14BEh +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_47AF47  +
mov dword ptr [ebx+50h] 0 +
mov dword ptr [ebx+54h] 0 +
mov dword ptr [ebx+24h] 0 +
mov dword ptr [ebx+14h] 0 +
jmp loc_47AB03  +
mov eax [esp+0ACh+var_84] +
mov eax [eax+0Ch] +
mov [ebp+10h] eax +
jmp loc_47A92B  +
mov eax [esp+0ACh+var_84] +
mov dword ptr [ebp+0] 4 +
mov eax [eax+8] +
mov [esp+0ACh+var_74] eax +
mov [ebp+4] eax +
mov edi [esp+0ACh+var_84] +
mov ecx [edi+28h] +
mov edx [edi+10h] +
mov eax [ecx+1Ch] +
sub eax edx +
mov [ebp+0Ch] eax +
movzx eax byte ptr [edi+20h] +
mov byte ptr [esp+0ACh+var_8C] al +
and eax 2 +
mov byte ptr [esp+0ACh+var_80] al +
jnz loc_47AFB1  +
mov eax [ecx+20h] +
sub eax edx +
mov [ebp+10h] eax +
jmp loc_47A92B  +
test ebx ebx +
jnz loc_47B600  +
mov eax [esp+0ACh+var_60] +
mov eax [eax+174h] +
movzx ecx byte ptr [eax+0Bh] +
mov eax 1 +
shl eax cl +
mov [ebp+1Ch] eax +
jmp loc_47A94B  +
mov eax [esp+0ACh+arg_0] +
movzx eax byte ptr [eax+28h] +
and eax 7 +
cmp al 3 +
jnz loc_47AA62  +
test byte ptr [esp+0ACh+var_8C] 30h +
jnz loc_47B6A0  +
mov eax [esp+0ACh+var_7C] +
mov [ebp+8] eax +
jmp loc_47AA62  +
mov eax [esp+0ACh+arg_0] +
test byte ptr [eax+29h] 20h +
jz loc_47A936  +
test byte ptr [esp+0ACh+var_8C] 4 +
jz loc_47B083  +
mov eax [esp+0ACh+var_84] +
mov eax [eax+14h] +
mov [esp+0ACh+var_48] eax +
mov eax [esp+0ACh+var_48] +
mov [ebp+1Ch] eax +
test ebx ebx +
jz loc_47B178  +
test byte ptr [esp+0ACh+var_8C] 4 +
jz loc_47BD2B  +
mov ecx [ebp+1Ch] +
mov esi [esp+0ACh+var_84] +
xor eax eax +
mov edx [esi+eax*4+28h] +
test dword ptr [edx+14h] 102h +
jnz loc_47B0C0  +
mov edx [edx+8Ch] +
mov dword ptr [edx+4] 8 +
add eax 1 +
cmp eax ebx +
jnz loc_47B0A6  +
mov esi [esp+0ACh+var_84] +
mov eax [esi+28h] +
mov eax [eax+8Ch] +
cmp dword ptr [eax+4] 8 +
jnz loc_47BD5F  +
xor eax eax +
jmp loc_47B0F6  +
mov edx [esi+eax*4+28h] +
mov edx [edx+8Ch] +
cmp dword ptr [edx+4] 8 +
jnz loc_47BD5F  +
add eax 1 +
cmp eax ebx +
jnz loc_47B0E2  +
mov esi 1 +
test ecx ecx +
mov eax [ebp+0Ch] +
jz loc_47B8C2  +
xor edx edx +
sub eax [esp+0ACh+var_7C] +
sbb edx [esp+0ACh+var_78] +
mov [esp+0ACh+var_A4] ecx +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_AC] eax +
mov [esp+0ACh+var_A8] edx +
call sub_4BB0A0  +
mov edi edx +
mov edx eax +
mov ecx edi +
mov [esp+0ACh+var_6C] eax +
add [esp+0ACh+var_7C] edx +
adc [esp+0ACh+var_78] ecx +
test esi esi +
jz loc_47B17A  +
mov esi 1 +
jmp loc_47A976  +
test ebx ebx +
jz loc_47C01C  +
mov ecx [esp+0ACh+var_84] +
xor eax eax +
nop   +
mov edx [ecx+eax*4+28h] +
add eax 1 +
cmp eax ebx +
mov edx [edx+8Ch] +
mov dword ptr [edx+4] 7 +
jnz loc_47B160  +
xor esi esi +
mov [esp+0ACh+var_6C] 0 +
jmp loc_47A976  +
mov eax [eax+4] +
mov [esp+0ACh+var_94] eax +
jmp loc_47A8EB  +
mov eax [esp+0ACh+arg_0] +
movzx eax byte ptr [eax+28h] +
and eax 7 +
cmp al 3 +
jz loc_47AE11  +
cmp ecx 1 +
jbe loc_47B6C2  +
mov eax 1 +
mov esi [esp+0ACh+var_84] +
jmp loc_47B1CB  +
add eax 1 +
cmp eax ecx +
jz loc_47B6C2  +
mov ebx [esi+eax*4+24h] +
mov edx [esi+eax*4+28h] +
mov edi [ebx+1Ch] +
cmp [edx+1Ch] edi +
jnz loc_47B1C0  +
mov edx [edx+8Ch] +
test byte ptr [edx+9] 4 +
jz loc_47B1ED  +
cmp dword ptr [edx+4] 8 +
jz loc_47B1C0  +
mov edi [edx+18h] +
test edi edi +
jz loc_47B1C0  +
mov edx [ebx+8Ch] +
test byte ptr [edx+9] 4 +
jz loc_47B206  +
cmp dword ptr [edx+4] 8 +
jz loc_47B1C0  +
mov ebx [edx+18h] +
test ebx ebx +
jz loc_47B1C0  +
mov [esp+0ACh+var_54] 0 +
mov esi [esp+0ACh+var_84] +
mov edx [esi+24h] +
test edx edx +
jz loc_47AE11  +
xor edi edi +
mov [esp+0ACh+var_8C] ebp +
mov ebp edi +
jmp loc_47B336  +
mov ecx [esp+0ACh+var_80] +
lea edx [ecx-6] +
cmp edx 1 +
jbe loc_47B387  +
and eax 2 +
mov [esp+0ACh+var_70] eax +
jnz loc_47B26C  +
mov eax [esp+0ACh+var_80] +
sub eax 1 +
cmp eax 1 +
jbe loc_47B4D6  +
mov eax [esp+0ACh+var_80] +
sub eax 6474E550h +
cmp eax 2 +
jbe loc_47B4D6  +
mov eax [edi+4] +
cmp eax 8 +
mov [esp+0ACh+var_6C] eax +
jz loc_47B2C0  +
mov ecx [esp+0ACh+var_8C] +
mov eax [edi+10h] +
mov edx [edi+14h] +
mov ecx [ecx+8] +
cmp ecx eax +
ja loc_47B4D6  +
xor ebx ebx +
sub eax ecx +
mov ecx eax +
mov eax [edi+18h] +
sbb edx ebx +
mov ebx edx +
xor edx edx +
add ecx eax +
mov eax [esp+0ACh+var_8C] +
adc ebx edx +
cmp ebx 0 +
mov eax [eax+14h] +
jg loc_47B4D6  +
jl loc_47B2C0  +
cmp ecx eax +
ja loc_47B4D6  +
lea esi [esi+0] +
mov eax [esp+0ACh+var_54] +
test eax eax +
jz loc_47B310  +
mov eax [esp+0ACh+var_70] +
test eax eax +
jz loc_47B310  +
mov eax [esp+0ACh+var_8C] +
mov edx [edi+0Ch] +
mov eax [eax+0Ch] +
cmp edx eax +
jb loc_47B4D6  +
sub edx eax +
mov eax [esp+0ACh+var_74] +
test eax eax +
jz loc_47B2F7  +
cmp [esp+0ACh+var_6C] 8 +
jz loc_47CAE2  +
mov eax [edi+18h] +
mov ecx [esp+0ACh+var_8C] +
add eax edx +
cmp eax [ecx+18h] +
ja loc_47B4D6  +
lea esi [esi+0] +
cmp [esp+0ACh+var_80] 2 +
jz loc_47B44F  +
nop   +
lea esi [esi+0] +
add ebp 1 +
cmp ebp [esi+24h] +
jnb loc_47B684  +
mov eax [esp+0ACh+var_8C] +
mov eax [eax] +
mov [esp+0ACh+var_80] eax +
mov eax [esi+ebp*4+28h] +
mov edi [eax+8Ch] +
mov [esp+0ACh+var_94] eax +
mov eax [edi+8] +
mov ecx eax +
and ecx 400h +
mov [esp+0ACh+var_74] ecx +
jz loc_47B231  +
cmp [esp+0ACh+var_80] 7 +
jz loc_47B241  +
cmp [esp+0ACh+var_80] 6474E552h +
jz loc_47B241  +
cmp [esp+0ACh+var_80] 1 +
jz loc_47B241  +
cmp dword ptr [edi+4] 8 +
jz loc_47B4E7  +
mov eax [esp+0ACh+var_64] +
mov [esp+0ACh+var_AC] offset aBSectionACanTB +
mov [esp+0ACh+var_A0] eax +
mov eax [esp+0ACh+var_94] +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] eax +
call off_4BFA04  +
mov edi [esi+4] +
mov eax edi +
call sub_473E20  +
test eax eax +
mov ebx eax +
jz loc_47B610  +
mov eax ds:_iob +
add eax 20h +
mov [esp+0ACh+var_AC] eax +
call fflush  +
mov eax ds:_iob +
mov [esp+0ACh+var_A4] ebx +
xor ebx ebx +
mov [esp+0ACh+var_A8] offset aS_98 +
add eax 40h +
mov [esp+0ACh+var_AC] eax +
call fprintf  +
mov eax [esi+24h] +
test eax eax +
jz loc_47B422  +
mov eax [esi+ebx*4+28h] +
add ebx 1 +
mov eax [eax] +
mov [esp+0ACh+var_A8] offset asc_501A87 +
mov [esp+0ACh+var_A4] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+0ACh+var_AC] eax +
call fprintf  +
cmp ebx [esi+24h] +
jb loc_47B3F8  +
mov eax ds:_iob +
mov [esp+0ACh+var_AC] 0Ah +
add eax 40h +
mov [esp+0ACh+var_A8] eax +
call putc  +
mov eax ds:_iob +
add eax 40h +
mov [esp+0ACh+var_AC] eax +
call fflush  +
jmp loc_47B320  +
mov eax [edi+18h] +
test eax eax +
jnz loc_47B320  +
mov eax [esp+0ACh+var_8C] +
mov eax [eax+18h] +
test eax eax +
mov [esp+0ACh+var_40] eax +
jz loc_47B320  +
cmp [esp+0ACh+var_6C] 8 +
jz loc_47B4B1  +
mov eax [edi+10h] +
mov ecx [esp+0ACh+var_8C] +
mov edx [edi+14h] +
mov [esp+0ACh+var_6C] eax +
mov eax [ecx+8] +
cmp eax [esp+0ACh+var_6C] +
mov [esp+0ACh+var_68] edx +
jnb loc_47B4D6  +
mov ecx [esp+0ACh+var_6C] +
xor edx edx +
mov ebx [esp+0ACh+var_68] +
sub ecx eax +
mov eax ecx +
mov ecx [esp+0ACh+var_8C] +
sbb ebx edx +
cmp ebx 0 +
mov ecx [ecx+14h] +
jg loc_47B4D6  +
jl loc_47B4B1  +
cmp eax ecx +
jnb loc_47B4D6  +
cmp [esp+0ACh+var_70] 0 +
jz loc_47B320  +
mov ecx [esp+0ACh+var_8C] +
mov eax [edi+0Ch] +
mov edx [ecx+0Ch] +
cmp eax edx +
jbe loc_47B4D6  +
sub eax edx +
cmp [esp+0ACh+var_40] eax +
ja loc_47B320  +
mov eax [esp+0ACh+var_74] +
test eax eax +
jnz loc_47B37D  +
jmp loc_47B387  +
cmp [esp+0ACh+var_80] 7 +
jnz loc_47B320  +
jmp loc_47B387  +
movzx eax byte ptr [edx+1] +
mov edi [esp+0ACh+var_5C] +
imul eax edi +
add eax [ebp+14h] +
mov [ebp+14h] eax +
movzx edx byte ptr [edx+1] +
imul edx edi +
add edx [ebp+18h] +
test ebx ebx +
mov [ebp+18h] edx +
jnz loc_47AA3E  +
jmp loc_47AA4C  +
cmp ebx 1 +
jbe loc_47B178  +
mov eax [esp+0ACh+var_84] +
mov edi offset a_dynamic_0 +
mov ecx 9 +
mov eax [eax+28h] +
mov esi [eax] +
cmps   +
jz loc_47B178  +
mov ebp [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] offset aBTheFirstSecti +
mov [esp+0ACh+var_A8] ebp +
call off_4BFA04  +
mov [esp+0ACh+var_AC] 11h +
call sub_44BAF0  +
jmp loc_479C5E  +
mov edx [ebx+4] +
cmp edx 4 +
jz loc_47B581  +
cmp edx 9 +
jnz loc_47B6FB  +
test eax eax +
jz loc_47B68D  +
test byte ptr [eax+17h] 8 +
jnz loc_47B68D  +
mov eax [esp+0ACh+arg_0] +
mov ecx [esp+0ACh+var_94] +
mov eax [eax+0A0h] +
mov edx [eax+90Ch] +
cmp ebx [ecx+edx*4] +
jz loc_47B68D  +
mov edx [eax+208h] +
test edx edx +
jz loc_47B5C9  +
mov edx [edx+38h] +
cmp ebx [ecx+edx*4] +
jz loc_47B68D  +
mov eax [eax+934h] +
mov ecx [esp+0ACh+var_94] +
mov edx [eax+30h] +
cmp ebx [ecx+edx*4] +
jz loc_47B68D  +
mov eax [eax+2Ch] +
cmp ebx [ecx+eax*4] +
jz loc_47B68D  +
mov [esp+0ACh+var_A0] 1 +
mov eax [esp+0ACh+var_8C] +
mov edx [esp+0ACh+var_88] +
jmp loc_47AF2F  +
mov dword ptr [ebp+1Ch] 0 +
jmp loc_47A94B  +
lea eax [edi-70000000h] +
cmp eax 0FFFFFFFh +
jbe loc_47BD8E  +
lea eax [edi-60000000h] +
cmp eax 0FFFFFFFh +
ja loc_47B807  +
mov [esp+0ACh+var_A4] eax +
lea eax [esp+0ACh+var_2C] +
mov [esp+0ACh+var_A8] offset aLoos7_7x +
lea ebx [esp+0ACh+var_2C] +
mov [esp+0ACh+var_AC] eax +
call sprintf  +
jmp loc_47B3C3  +
mov ebp [esp+0ACh+arg_0] +
mov esi [esp+0ACh+var_84] +
mov [esi+20h] eax +
mov [esi+24h] edx +
mov eax [esp+0ACh+var_4C] +
test eax eax +
jnz loc_47BC5E  +
or byte ptr [ebp+2Bh] 10h +
mov eax 1 +
jmp loc_479C60  +
mov ebp [esp+0ACh+var_8C] +
jmp loc_47AE11  +
mov dword ptr [ebx+10h] 0FFFFFFFFh +
mov dword ptr [ebx+14h] 0FFFFFFFFh +
jmp loc_47AF47  +
mov edi [ebp+14h] +
mov eax [ebp+8] +
mov ecx [esp+0ACh+var_7C] +
add eax edi +
sub ecx eax +
test esi esi +
mov eax ecx +
jnz loc_47B6BA  +
lea ecx [edi+ecx] +
mov [ebp+14h] ecx +
add [ebp+18h] eax +
jmp loc_47AA62  +
mov [esp+0ACh+var_54] 1 +
jmp loc_47B215  +
mov ecx [ebx+24h] +
jmp loc_47AEEE  +
movzx eax byte ptr [edx+1] +
mov edi [esp+0ACh+var_5C] +
imul eax edi +
add [ebp+14h] eax +
movzx eax byte ptr [edx+1] +
imul eax edi +
add [ebp+18h] eax +
jmp loc_47AA4C  +
mov esi ebx +
jmp loc_479F05  +
test eax eax +
jnz loc_47B589  +
jmp loc_47B593  +
mov dword ptr [esi+14h] 0 +
mov eax [ebp+0A0h] +
mov [esp+0ACh+var_5C] 0 +
mov dword ptr [eax+2Ch] 0 +
mov eax [esp+0ACh+var_60] +
mov ecx [eax+174h] +
jmp loc_47A76A  +
mov ebp [ebx+30h] +
test ebp ebp +
jnz loc_47AE92  +
jmp loc_47AF6F  +
mov ebp [esp+0ACh+arg_0] +
mov eax [ebp+0A0h] +
mov edx [eax+934h] +
mov edi [esp+0ACh+var_84] +
mov eax [eax+44h] +
mov ecx [edi+174h] +
mov [esp+0ACh+var_80] eax +
movzx esi byte ptr [ecx] +
mov [esp+0ACh+var_6C] esi +
add esi [edi+10h] +
mov edi [edx] +
mov [esp+0ACh+var_74] esi +
test edi edi +
jz loc_47CAB9  +
mov edx edi +
xor esi esi +
mov [esp+0ACh+var_64] 0 +
mov [esp+0ACh+var_70] 0 +
mov [esp+0ACh+var_7C] 0 +
mov [esp+0ACh+var_84] 0 +
mov [esp+0ACh+var_94] edi +
jmp loc_47B7BD  +
mov edx [edx] +
add eax 20h +
test edx edx +
jz loc_47B8D3  +
add esi 1 +
cmp dword ptr [eax] 1 +
jnz loc_47B7B0  +
movzx ecx byte ptr [edx+20h] +
mov ebx ecx +
and ebx 10h +
jz loc_47B7DE  +
mov edi [eax+0Ch] +
mov [esp+0ACh+var_7C] edi +
mov edi [eax+10h] +
mov [esp+0ACh+var_70] edi +
and ecx 20h +
jz loc_47B7B0  +
mov edi [eax+0Ch] +
test bl bl +
mov [esp+0ACh+var_74] edi +
mov edi [eax+10h] +
mov [esp+0ACh+var_64] edi +
jz loc_47B7B0  +
mov ecx [esp+0ACh+var_6C] +
add [esp+0ACh+var_74] ecx +
add [esp+0ACh+var_64] ecx +
mov [esp+0ACh+var_84] edx +
jmp loc_47B7B0  +
lea eax [esp+0ACh+var_2C] +
mov [esp+0ACh+var_A0] edi +
lea ebx [esp+0ACh+var_2C] +
mov [esp+0ACh+var_A4] offset a8_8x +
mov [esp+0ACh+var_A8] 20h +
mov [esp+0ACh+var_AC] eax +
call sub_475250  +
jmp loc_47B3C3  +
movzx ecx byte ptr [ecx] +
xor ebx ebx +
mov [edx+24h] ebx +
mov [esp+0ACh+var_88] ebx +
mov [edx+20h] ecx +
mov [esp+0ACh+var_8C] ecx +
jmp loc_47AE54  +
mov eax [ebp+7Ch] +
mov [esp+0ACh+var_94] eax +
test eax eax +
mov eax [ebp+28h] +
mov [esp+0ACh+var_64] eax +
jnz loc_47BDD7  +
shr [esp+0ACh+var_64] 5 +
and [esp+0ACh+var_64] 3FFFFh +
mov eax [esp+0ACh+var_64] +
and eax 43h +
cmp eax 1 +
jz loc_47BDE4  +
mov [esp+0ACh+var_38] 0 +
mov [esp+0ACh+var_58] 0 +
mov [esp+0ACh+var_4C] 0 +
lea eax [esp+0ACh+var_38] +
mov [esp+0ACh+var_A4] eax +
mov [esp+0ACh+var_A8] offset sub_474370 +
mov [esp+0ACh+var_AC] ebp +
call sub_44DAD0  +
mov eax [esp+0ACh+var_38] +
test eax eax +
jz loc_47A483  +
jmp loc_479C5E  +
mov [esp+0ACh+var_6C] 0 +
xor edx edx +
xor ecx ecx +
jmp loc_47B139  +
mov ecx [esp+0ACh+arg_4] +
mov ebx [esp+0ACh+var_84] +
mov edi [esp+0ACh+var_94] +
test ecx ecx +
setnz cl  +
test ebx ebx +
setnz al  +
mov ebx edi +
and al cl +
mov byte ptr [esp+0ACh+var_94] cl +
mov edi eax +
jnz loc_47BF68  +
mov eax [esp+0ACh+var_80] +
shl esi 5 +
mov edi [esp+0ACh+arg_4] +
mov [esp+0ACh+arg_0] ebp +
add esi eax +
mov [esp+0ACh+var_84] esi +
mov esi eax +
lea esi [esi+0] +
mov edx [esi] +
cmp edx 6474E552h +
jz loc_47BA75  +
cmp edx 6474E551h +
jz loc_47BB70  +
mov eax [ebx+24h] +
test eax eax +
jz loc_47BB28  +
cmp edx 1 +
jz loc_47B990  +
cmp edx 4 +
jz loc_47BC0C  +
test byte ptr [ebx+20h] 30h +
jnz loc_47CA16  +
mov edx [ebx+28h] +
mov dword ptr [esi+14h] 0 +
mov ebp [edx+50h] +
mov [esi+8] ebp +
lea esi [esi+0] +
mov ecx [ebx+eax*4+24h] +
mov edx [ecx+8Ch] +
cmp dword ptr [edx+4] 8 +
jnz loc_47BBFC  +
sub eax 1 +
jnz loc_47B970  +
lea esi [esi+0] +
mov ebx [ebx] +
add esi 20h +
test ebx ebx +
jnz loc_47B920  +
mov ebp [esp+0ACh+arg_0] +
mov eax [ebp+0A0h] +
mov edx [eax+934h] +
mov esi [esp+0ACh+var_8C] +
mov edi [esp+0ACh+var_88] +
mov [edx+20h] esi +
mov esi [esp+0ACh+var_60] +
mov [edx+24h] edi +
mov edx [esi+0B0h] +
test edx edx +
jz loc_47B9E6  +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] eax +
call edx  +
test eax eax +
jz loc_479C5E  +
mov eax [ebp+0A0h] +
cmp byte ptr [esp+0ACh+var_94] 0 +
jz loc_47BA03  +
mov esi [esp+0ACh+arg_4] +
movzx edx byte ptr [esi] +
and edx 3 +
cmp dl 1 +
jz loc_47CA33  +
mov eax [eax+934h] +
mov esi [eax+1Ch] +
mov eax [esp+0ACh+var_60] +
mov eax [eax+174h] +
movzx ebx byte ptr [eax+1] +
mov [esp+0ACh+var_A0] 0 +
movzx eax byte ptr [eax] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_479C5E  +
mov eax [esp+0ACh+var_60] +
xor edx edx +
mov eax [eax+174h] +
mov ecx [eax+10h] +
mov eax [esp+0ACh+var_50] +
mov edi [eax+44h] +
mov eax esi +
div  ebx +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] edi +
mov [esp+0ACh+var_A4] eax +
call ecx  +
test eax eax +
jnz loc_479C5E  +
jmp loc_47B66A  +
cmp byte ptr [esp+0ACh+var_94] 0 +
jz loc_47BC28  +
mov eax [esp+0ACh+arg_0] +
mov ebp [esp+0ACh+var_80] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov eax [eax] +
test eax eax +
jnz loc_47BAAF  +
jmp loc_47BB50  +
mov eax [eax] +
add ebp 20h +
test eax eax +
jz loc_47BB50  +
cmp dword ptr [ebp+0] 1 +
jnz loc_47BAA2  +
mov ecx [edi+74h] +
cmp [ebp+0Ch] ecx +
jnb loc_47BAA2  +
mov edx [eax+24h] +
test edx edx +
jz loc_47BAA2  +
mov edx [eax+28h] +
mov ecx [edi+70h] +
cmp [edx+1Ch] ecx +
jb loc_47BAA2  +
nop   +
cmp ebp [esp+0ACh+var_84] +
jnb loc_47BBA8  +
mov eax [ebp+0Ch] +
cmp byte ptr [esp+0ACh+var_94] 0 +
mov [esi+0Ch] eax +
mov eax [ebp+10h] +
mov [esi+10h] eax +
mov eax [ebp+8] +
mov [esi+8] eax +
jz loc_47BD66  +
mov eax [edi+74h] +
sub eax [ebp+0Ch] +
movzx edx byte ptr [ebx+20h] +
mov [esi+14h] eax +
test dl 4 +
mov [esi+18h] eax +
jnz loc_47BB13  +
mov dword ptr [esi+1Ch] 1 +
and edx 1 +
jnz loc_47B990  +
mov dword ptr [esi+4] 4 +
jmp loc_47B990  +
movzx eax byte ptr [ebx+20h] +
test al 10h +
jz loc_47BB85  +
mov ecx [esp+0ACh+var_7C] +
test al 2 +
mov [esi+0Ch] ecx +
jnz loc_47B990  +
mov eax [esp+0ACh+var_70] +
mov [esi+10h] eax +
jmp loc_47B990  +
mov [esp+0ACh+var_A8] 1546h +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_47BAD0  +
test byte ptr [ebx+20h] 8 +
jz loc_47B990  +
mov eax [ebx+18h] +
mov [esi+18h] eax +
jmp loc_47B990  +
test al 20h +
jz loc_47B990  +
mov ecx [esp+0ACh+var_74] +
test al 2 +
mov [esi+0Ch] ecx +
jnz loc_47B990  +
mov eax [esp+0ACh+var_64] +
mov [esi+10h] eax +
jmp loc_47B990  +
test esi 1 +
mov edx esi +
mov ecx 20h +
jnz loc_47C06E  +
test dl 2 +
jnz loc_47C05D  +
mov ebp ecx +
xor eax eax +
and ebp 0FFFFFFFCh +
mov dword ptr [edx+eax] 0 +
add eax 4 +
cmp eax ebp +
jb loc_47BBCB  +
add edx eax +
test cl 2 +
jz loc_47BBE9  +
xor ebp ebp +
add edx 2 +
mov [edx-2] bp +
and ecx 1 +
jz loc_47BBF1  +
mov byte ptr [edx] 0 +
mov dword ptr [esi] 0 +
jmp loc_47B990  +
mov eax [ecx+50h] +
add eax [edx+18h] +
sub eax ebp +
mov [esi+14h] eax +
jmp loc_47B990  +
mov ecx [esp+0ACh+arg_0] +
movzx edx byte ptr [ecx+28h] +
and edx 7 +
cmp dl 3 +
jnz loc_47B953  +
jmp loc_47B990  +
mov eax [esp+0ACh+var_80] +
mov ecx [esp+0ACh+var_84] +
mov ebp eax +
cmp eax ecx +
jnb loc_47BBA8  +
mov eax [esp+0ACh+var_84] +
jmp loc_47BC4B  +
add ebp 20h +
cmp ebp eax +
jnb loc_47BBA8  +
cmp dword ptr [ebp+0] 1 +
jnz loc_47BC40  +
mov ecx [esi+10h] +
cmp [ebp+10h] ecx +
jnz loc_47BC40  +
jmp loc_47BAD0  +
mov ecx [ebp+0A0h] +
mov eax [ecx+934h] +
add ecx 48h +
mov edx [eax+24h] +
mov eax [eax+20h] +
mov [esp+0ACh+var_AC] ecx +
mov [esp+0ACh+var_A0] 1 +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_A8] eax +
call sub_478D10  +
mov ebx [ebp+0A0h] +
mov ecx [ebx+208h] +
test ecx ecx +
jz loc_47BCA6  +
mov esi [ecx+18h] +
test esi esi +
jnz loc_47C03A  +
mov [esp+0ACh+var_A8] eax +
lea eax [ebx+0B8h] +
mov [esp+0ACh+var_A0] 1 +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] eax +
call sub_478D10  +
mov ecx [ebp+0A0h] +
mov ecx [ecx+934h] +
mov [ecx+20h] eax +
mov eax [ebx+0C8h] +
mov [ecx+24h] edx +
mov edx [ebx+0CCh] +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_A4] edx +
call sub_46FCE0  +
test eax eax +
jnz loc_479C5E  +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] eax +
call sub_488920  +
test eax eax +
jz loc_479C5E  +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] eax +
call sub_488580  +
jmp loc_47B676  +
mov eax [esp+0ACh+var_84] +
xor ecx ecx +
lea esi [eax+28h] +
xor eax eax +
mov edx [esi+eax*4] +
mov edx [edx+40h] +
cmp ecx edx +
cmovb ecx edx +
add eax 1 +
cmp eax ebx +
jnz loc_47BD36  +
mov esi [esp+0ACh+var_48] +
mov eax 1 +
shl eax cl +
cmp eax esi +
cmovb eax esi +
mov ecx eax +
jmp loc_47B0A0  +
xor esi esi +
jmp loc_47B102  +
movzx edx byte ptr [ebx+20h] +
test dl 8 +
jz loc_47CAFF  +
mov eax [ebx+18h] +
mov [esi+14h] eax +
jmp loc_47BB04  +
mov [ebp+68h] ecx +
jmp loc_47A632  +
mov [ebp+64h] edx +
jmp loc_47A627  +
mov [esp+0ACh+var_A4] eax +
lea eax [esp+0ACh+var_2C] +
mov [esp+0ACh+var_A8] offset aLoproc7_7x +
lea ebx [esp+0ACh+var_2C] +
mov [esp+0ACh+var_AC] eax +
call sprintf  +
jmp loc_47B3C3  +
movzx esi byte ptr [ecx+1] +
imul esi [esp+0ACh+var_5C] +
mov [edx+1Ch] esi +
jmp loc_47A7A0  +
xor eax eax +
xor edx edx +
mov [esp+0ACh+var_44] 0 +
jmp loc_47A849  +
shr [esp+0ACh+var_64] 5 +
and [esp+0ACh+var_64] 3FFFFh +
mov eax [ebp+64h] +
xor edx edx +
mov esi [ebp+78h] +
test eax eax +
jz loc_47BDFF  +
mov ecx [eax+8] +
mov eax [eax+0Ch] +
cmp edx ecx +
cmovb edx ecx +
test eax eax +
jnz loc_47BDF0  +
lea ebx [edx+1] +
mov [esp+0ACh+var_A4] 4 +
mov [esp+0ACh+var_A8] ebx +
mov [esp+0ACh+var_AC] ebp +
call sub_458C50  +
test eax eax +
mov edi eax +
mov [esp+0ACh+var_74] eax +
jz loc_479C5E  +
mov eax [ebp+0A0h] +
mov eax [eax+934h] +
mov [eax+8] edi +
mov [eax+28h] ebx +
mov eax [esp+0ACh+var_94] +
test eax eax +
jz loc_47C0E6  +
lea eax [esi+eax*4] +
mov edi esi +
mov [esp+0ACh+var_84] eax +
mov ebx [edi] +
test byte ptr [ebx+0Dh] 1 +
jnz loc_47BEB0  +
add edi 4 +
cmp edi [esp+0ACh+var_84] +
jnz loc_47BE4B  +
xor ebx ebx +
xor edi edi +
mov eax ebx +
mov ebx esi +
mov [esp+0ACh+var_8C] 0 +
mov esi eax +
jmp loc_47BE80  +
add esi 1 +
add edi 1 +
cmp edi [esp+0ACh+var_94] +
jz loc_47CB26  +
mov edx [ebx+edi*4] +
mov eax ebp +
call loc_4742C0  +
test eax eax +
jnz loc_47BE70  +
mov edx [ebx+edi*4] +
test byte ptr [edx+0Dh] 1 +
jz loc_47BEA2  +
mov eax ebp +
call sub_474310  +
test eax eax +
jnz loc_47BE73  +
add [esp+0ACh+var_8C] 1 +
jmp loc_47BE73  +
mov eax [ebx+8] +
test eax eax +
jnz loc_47BE53  +
mov edx ebx +
mov eax ebp +
call sub_474310  +
test eax eax +
jnz loc_47BE53  +
mov eax [ebx+10h] +
cmp eax offset off_4BFB90 +
jz loc_47BE53  +
cmp ebp [eax+94h] +
jz loc_47BED9  +
mov eax [eax+3Ch] +
mov eax [eax+8] +
mov ecx [esp+0ACh+var_74] +
mov [ecx+eax*4] ebx +
jmp loc_47BE53  +
mov eax [ebp+0] +
mov [esp+0ACh+var_80] eax +
jmp loc_47ADF8  +
mov [esp+0ACh+var_A8] 12F7h +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
call sub_44BA40  +
mov eax [ebp+0A0h] +
mov esi [esp+0ACh+var_60] +
mov edx [eax+934h] +
mov ecx [esi+174h] +
jmp loc_47A7A0  +
mov [esp+0ACh+var_A8] 1309h +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
call sub_44BA40  +
mov eax [ebp+0A0h] +
mov esi [esp+0ACh+var_60] +
mov eax [eax+934h] +
mov edx [esi+174h] +
mov eax [eax+1Ch] +
movzx ecx byte ptr [edx+1] +
jmp loc_47A7C3  +
mov edi 2 +
mov esi 1 +
jmp loc_479E09  +
mov eax [esp+0ACh+arg_4] +
mov [esp+0ACh+var_9C] 1 +
mov [esp+0ACh+var_A0] 0 +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] offset a__ehdr_star_17 +
mov eax [eax+1Ch] +
mov [esp+0ACh+var_AC] eax +
call sub_4500A0  +
test eax eax +
mov ecx eax +
jz loc_47BFFB  +
movzx eax byte ptr [eax+0Ch] +
cmp al 5 +
jz loc_47BFAC  +
cmp al 2 +
ja loc_47BFFB  +
mov eax [esp+0ACh+var_84] +
mov edx [eax+24h] +
test edx edx +
jnz loc_47CA9C  +
mov eax [ebp+0A0h] +
mov eax [eax+934h] +
jmp loc_47BFDB  +
mov ebx [eax+24h] +
test ebx ebx +
jnz loc_47CA9C  +
mov eax [eax] +
test eax eax +
jnz loc_47BFD0  +
mov eax [esp+0ACh+var_7C] +
mov dword ptr [ecx+14h] offset off_4BFB90 +
mov [ecx+18h] eax +
or byte ptr [ecx+33h] 2 +
and byte ptr [ecx+34h] 0FEh +
mov byte ptr [ecx+0Ch] 3 +
mov eax [ebp+0A0h] +
mov edx [eax+934h] +
mov ebx [edx] +
test ebx ebx +
jz loc_47CB1B  +
mov eax edi +
mov byte ptr [esp+0ACh+var_94] al +
jmp loc_47B8FC  +
mov esi ebx +
mov [esp+0ACh+var_6C] ebx +
jmp loc_47A976  +
mov esi [esp+0ACh+var_50] +
mov esi [esi+934h] +
mov [esp+0ACh+var_84] esi +
jmp loc_47B660  +
mov [esp+0ACh+var_A0] 1 +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_A4] edx +
mov [esp+0ACh+var_AC] ecx +
call sub_478D10  +
mov ebx [ebp+0A0h] +
jmp loc_47BCA6  +
xor eax eax +
add edx 2 +
mov [edx-2] ax +
sub ecx 2 +
jmp loc_47BBC4  +
mov byte ptr [esi] 0 +
lea edx [esi+1] +
mov cl 1Fh +
jmp loc_47BBBB  +
mov eax [esp+0ACh+var_94] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] eax +
call sub_458CD0  +
jmp loc_479C5E  +
mov eax offset aUnknown_1 +
jmp loc_47AEB3  +
mov [esp+0ACh+var_A8] 0 +
mov [esp+0ACh+var_AC] ebp +
call sub_478E10  +
test eax eax +
jz loc_479C5E  +
mov esi [ebp+0A0h] +
jmp loc_47A71B  +
mov ebp [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] offset aBNotEnoughRoom +
mov [esp+0ACh+var_A8] ebp +
call off_4BFA04  +
mov [esp+0ACh+var_AC] 11h +
call sub_44BAF0  +
jmp loc_479C5E  +
mov [esp+0ACh+var_8C] 0 +
xor ebx ebx +
mov edi [ebp+64h] +
test edi edi +
jz loc_47C11C  +
mov [esp+0ACh+var_84] esi +
mov esi ebx +
mov ebx [esp+0ACh+var_74] +
mov eax [edi+8] +
mov eax [ebx+eax*4] +
test eax eax +
jz loc_47C76C  +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_47C101  +
mov ebx esi +
mov esi [esp+0ACh+var_84] +
mov eax [esp+0ACh+var_8C] +
mov [esp+0ACh+var_A4] 4 +
mov [esp+0ACh+var_AC] ebp +
add eax ebx +
mov [esp+0ACh+var_A8] eax +
mov [esp+0ACh+var_70] eax +
call sub_458B00  +
test eax eax +
mov [esp+0ACh+var_80] eax +
jz loc_479C5E  +
mov eax [esp+0ACh+var_94] +
mov [esp+0ACh+var_7C] 0 +
test eax eax +
jz loc_47C988  +
xor eax eax +
xor edi edi +
mov [esp+0ACh+var_84] esi +
mov esi eax +
jmp loc_47C185  +
mov eax [esp+0ACh+var_8C] +
add eax esi +
add esi 1 +
lea edx [eax+1] +
mov ecx [esp+0ACh+var_80] +
mov [ecx+eax*4] ebx +
mov [ebx+14h] edx +
add edi 1 +
cmp edi [esp+0ACh+var_94] +
jz loc_47C1BD  +
mov eax [esp+0ACh+var_84] +
mov ebx [eax+edi*4] +
mov eax ebp +
mov edx ebx +
call loc_4742C0  +
test eax eax +
jnz loc_47C166  +
test byte ptr [ebx+0Dh] 1 +
jz loc_47C1B0  +
mov edx ebx +
mov eax ebp +
call sub_474310  +
test eax eax +
jnz loc_47C17C  +
lea esi [esi+0] +
mov eax [esp+0ACh+var_7C] +
lea edx [eax+1] +
mov [esp+0ACh+var_7C] edx +
jmp loc_47C172  +
mov [esp+0ACh+var_94] esi +
mov ebx [ebp+64h] +
mov esi [esp+0ACh+var_74] +
test ebx ebx +
jz loc_47C1E7  +
lea esi [esi+0] +
mov edx [ebx+8] +
lea ecx [esi+edx*4] +
mov eax [ecx] +
test eax eax +
jz loc_47C78B  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_47C1D0  +
mov eax [esp+0ACh+var_70] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+var_80] +
mov [esp+0ACh+var_A8] eax +
call sub_45A890  +
call sub_488500  +
test eax eax +
mov [esp+0ACh+var_58] eax +
jz loc_479C5E  +
mov eax [ebp+4] +
mov esi [ebp+7Ch] +
mov eax [eax+1B0h] +
mov edi esi +
mov [esp+0ACh+var_50] esi +
mov esi [ebp+0A0h] +
add edi 1 +
mov [esp+0ACh+var_6C] edi +
mov [esp+0ACh+var_70] eax +
mov eax [eax+174h] +
mov dword ptr [esi+4Ch] 2 +
mov [esp+0ACh+var_44] esi +
movzx edx byte ptr [eax+5] +
mov [esi+70h] edx +
imul edx edi +
mov [esi+60h] edx +
mov edx [esp+0ACh+var_8C] +
add edx 1 +
mov [esi+68h] edx +
movzx ecx byte ptr [eax+0Bh] +
mov eax 1 +
mov dword ptr [esi+0BCh] 3 +
shl eax cl +
mov [esi+6Ch] eax +
mov eax edi +
shl eax 5 +
lea esi ds:0[edi*4] +
sub eax esi +
mov [esp+0ACh+var_AC] eax +
call sub_459B80  +
test eax eax +
mov [esp+0ACh+var_48] eax +
jz loc_47CAD1  +
mov eax [esp+0ACh+var_70] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+5] +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A4] eax +
mov eax [esp+0ACh+var_6C] +
mov [esp+0ACh+var_A8] eax +
call sub_458B00  +
test eax eax +
mov [esp+0ACh+var_4C] eax +
jz loc_47C96B  +
mov eax [esp+0ACh+var_44] +
mov edi [esp+0ACh+var_4C] +
mov [eax+78h] edi +
mov eax [ebp+0A0h] +
mov ebx [eax+208h] +
test ebx ebx +
jz loc_47C2E8  +
mov edi [ebx] +
test edi edi +
jnz loc_47C995  +
mov eax [esp+0ACh+var_48] +
mov [esp+0ACh+var_60] 0 +
mov [esp+0ACh+var_80] 0 +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+8] 0 +
mov byte ptr [eax+0Ch] 0 +
mov byte ptr [eax+0Dh] 0 +
mov byte ptr [eax+0Eh] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
mov dword ptr [eax+18h] 0 +
mov eax [esp+0ACh+var_70] +
mov [esp+0ACh+var_5C] 0 +
mov eax [eax+44h] +
test eax eax +
jz loc_47C355  +
mov [esp+0ACh+var_AC] ebp +
call eax  +
test eax eax +
setnz al  +
movzx eax al +
mov [esp+0ACh+var_5C] eax +
mov ecx [esp+0ACh+var_50] +
mov eax [ebp+78h] +
test ecx ecx +
jle loc_47C8A5  +
mov edi eax +
mov eax [esp+0ACh+var_48] +
mov [esp+0ACh+var_84] 1 +
mov [esp+0ACh+arg_0] ebp +
lea esi [eax+1Ch] +
mov eax [esp+0ACh+var_64] +
and eax 42h +
mov [esp+0ACh+var_54] eax +
mov eax [edi] +
mov edx [esp+0ACh+var_5C] +
mov ecx [eax+8] +
test edx edx +
mov ebp [eax+0Ch] +
mov [esp+0ACh+var_94] ecx +
jnz loc_47C3AF  +
mov edx ebp +
and edx 102h +
cmp edx 100h +
jz loc_47C6AC  +
mov eax [eax+4] +
mov [esp+0ACh+var_A4] 0 +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] eax +
call sub_4885B0  +
cmp eax 0FFFFFFFFh +
mov [esp+0ACh+var_7C] eax +
jz loc_47C96B  +
mov eax [edi] +
mov edx [eax] +
mov ecx [edx+4] +
cmp dword ptr [ecx+4] 5 +
jz loc_47C5B4  +
xor ebx ebx +
mov ecx ebp +
mov eax [eax+10h] +
and ecx 100h +
mov [esp+0ACh+var_74] ecx +
jnz loc_47C5D0  +
test byte ptr [eax+15h] 10h +
jz loc_47C5D0  +
test ebx ebx +
jz loc_47C418  +
mov ecx [ebx+18h] +
test ecx ecx +
mov [esp+0ACh+var_8C] ecx +
jnz loc_47C42B  +
cmp [esp+0ACh+var_94] 0Fh +
mov [esp+0ACh+var_8C] 10h +
jbe loc_47C868  +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] eax +
call sub_4799A0  +
mov ecx eax +
mov eax [edi] +
mov eax [eax+10h] +
test ebp 40000h +
mov edx 6 +
jnz loc_47C485  +
test ebp 400000h +
mov dl 0Ah +
jnz loc_47C485  +
test ebp 8 +
mov dl 2 +
jnz loc_47C485  +
test ebp 10000h +
mov dl 1 +
jnz loc_47C485  +
test ebp 80000h +
mov dl 8 +
jnz loc_47C485  +
mov edx ebp +
shl edx 0Bh +
sar edx 1Fh +
and edx 9 +
test byte ptr [eax+15h] 4 +
mov eax 6 +
cmovnz edx eax +
test ebx ebx +
jz loc_47C4B6  +
mov eax [esp+0ACh+var_70] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_47C4B6  +
mov [esp+0ACh+var_A8] edx +
lea edx [ebx+18h] +
mov [esp+0ACh+var_64] ecx +
mov [esp+0ACh+var_AC] edx +
call eax  +
mov ecx [esp+0ACh+var_64] +
mov edx eax +
mov eax [esp+0ACh+var_74] +
test eax eax +
jz loc_47C642  +
and ebp 2 +
cmp ebp 1 +
sbb eax eax +
and eax 0FFFFFFF0h +
add eax 13h +
test ebx ebx +
jz loc_47C763  +
movzx edx byte ptr [ebx+25h] +
movzx ebx byte ptr [ebx+26h] +
mov ebp [esp+0ACh+var_8C] +
mov [esi+0Ch] al +
mov eax [esp+0ACh+var_84] +
add [esp+0ACh+var_84] 1 +
cmp [esp+0ACh+var_60] 1 +
mov [esi] ebp +
mov ebp [esp+0ACh+var_94] +
mov [esi+14h] eax +
mov eax [esp+0ACh+var_80] +
mov [esi+0Dh] dl +
sbb [esp+0ACh+var_80] 0FFFFFFFFh +
add edi 4 +
add esi 1Ch +
mov [esi-18h] ebp +
mov ebp [esp+0ACh+var_7C] +
mov [esi-4] eax +
mov eax [esp+0ACh+var_84] +
mov [esi-0Eh] bl +
mov [esi-0Ch] ecx +
mov [esi-14h] ebp +
cmp eax [esp+0ACh+var_6C] +
jnz loc_47C387  +
mov eax [esp+0ACh+var_58] +
mov ebp [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] eax +
call sub_4889F0  +
mov ebx [esp+0ACh+var_48] +
xor esi esi +
mov edi [esp+0ACh+var_60] +
jmp loc_47C597  +
mov dword ptr [ebx+8] 0 +
mov eax [esp+0ACh+var_70] +
add esi 1 +
mov ecx [ebx+18h] +
mov eax [eax+174h] +
lea ecx [edi+ecx*4] +
mov edx [eax+24h] +
mov [esp+0ACh+var_A0] ecx +
movzx eax byte ptr [eax+5] +
imul eax [ebx+14h] +
add eax [esp+0ACh+var_4C] +
mov [esp+0ACh+var_A8] ebx +
add ebx 1Ch +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A4] eax +
call edx  +
cmp [esp+0ACh+var_50] esi +
jl loc_47C8BC  +
mov eax [ebx+8] +
cmp eax 0FFFFFFFFh +
jz loc_47C550  +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] eax +
call sub_488880  +
mov [ebx+8] eax +
jmp loc_47C557  +
mov ebx [edx+0A0h] +
test ebx ebx +
jz loc_47C3E8  +
mov ebx eax +
jmp loc_47C3EA  +
mov edx [eax+3Ch] +
test edx edx +
jz loc_47C7CD  +
mov ecx [esp+0ACh+var_94] +
add ecx [eax+38h] +
mov [esp+0ACh+var_8C] ecx +
mov ecx [esp+0ACh+var_54] +
test ecx ecx +
jz loc_47C5F5  +
mov ecx [edx+1Ch] +
add [esp+0ACh+var_8C] ecx +
test ebx ebx +
jz loc_47C7C0  +
mov ecx [ebx+1Ch] +
cmp edx offset off_4BFB90 +
mov [esp+0ACh+var_94] ecx +
jz loc_47C6B9  +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_A8] edx +
mov [esp+0ACh+var_64] edx +
mov [esp+0ACh+var_AC] eax +
call sub_4799A0  +
mov edx [esp+0ACh+var_64] +
cmp eax 0FFFFFEFFh +
mov ecx eax +
jz loc_47C7DC  +
mov eax [edi] +
mov eax [eax+10h] +
jmp loc_47C445  +
mov eax [edi] +
mov eax [eax+10h] +
test byte ptr [eax+15h] 10h +
jz loc_47C658  +
and edx 0Fh +
lea eax [edx+10h] +
jmp loc_47C4D0  +
cmp eax offset off_4BFAE8 +
jz loc_47C88B  +
test ebp 4000h +
mov eax 4 +
jnz loc_47C4D0  +
xor eax eax +
test ebp 1 +
jnz loc_47C6A2  +
test ebp 800000h +
mov eax 0FFFFFFA0h +
jnz loc_47C6A2  +
test ebp 80h +
mov eax 20h +
jnz loc_47C6A2  +
mov eax ebp +
shr eax 1 +
and eax 1 +
shl eax 4 +
and edx 0Fh +
add eax edx +
jmp loc_47C4D0  +
mov [esp+0ACh+var_7C] 0FFFFFFFFh +
jmp loc_47C3D9  +
mov ecx [ebx+28h] +
test ecx ecx +
jz loc_47C610  +
lea edx [ecx+0C0h] +
cmp edx 4 +
ja loc_47CAF5  +
jmp ds:off_5021B8[edx*4]  +
mov ecx [esp+0ACh+arg_0] +
mov edx [ecx+0A0h] +
mov edx [edx+934h] +
mov ecx [edx+2Ch] +
jmp loc_47C445  +
mov ecx [esp+0ACh+arg_0] +
mov edx [ecx+0A0h] +
mov edx [edx+934h] +
mov ecx [edx+30h] +
jmp loc_47C445  +
mov ecx [esp+0ACh+arg_0] +
mov edx [ecx+0A0h] +
mov ecx [edx+910h] +
jmp loc_47C445  +
mov ecx [esp+0ACh+arg_0] +
mov edx [ecx+0A0h] +
mov ecx [edx+90Ch] +
jmp loc_47C445  +
mov edx [esp+0ACh+arg_0] +
mov edx [edx+0A0h] +
mov edx [edx+208h] +
test edx edx +
jz loc_47C445  +
mov ecx [edx+38h] +
jmp loc_47C445  +
xor ebx ebx +
xor edx edx +
jmp loc_47C4E0  +
mov edx [edi+98h] +
mov eax ebp +
call loc_4742C0  +
test eax eax +
jnz loc_47C847  +
add [esp+0ACh+var_8C] 1 +
jmp loc_47C10F  +
mov edi [ebx+98h] +
mov eax ebp +
mov [ecx] edi +
mov edx edi +
call loc_4742C0  +
test eax eax +
jnz loc_47C84F  +
mov edx [esp+0ACh+var_7C] +
mov eax edx +
add eax 1 +
mov [esp+0ACh+var_7C] eax +
mov ecx [esp+0ACh+var_80] +
mov [ecx+edx*4] edi +
mov [edi+14h] eax +
jmp loc_47C1E0  +
mov [esp+0ACh+var_94] 0 +
jmp loc_47C610  +
mov ecx [esp+0ACh+var_94] +
mov edx eax +
mov [esp+0ACh+var_8C] ecx +
jmp loc_47C5E6  +
mov eax [edx] +
mov [esp+0ACh+var_64] edx +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] eax +
call sub_44D4B0  +
mov edx [esp+0ACh+var_64] +
test eax eax +
jz loc_47C939  +
mov [esp+0ACh+var_A8] eax +
mov eax [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] eax +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
mov ecx eax +
jnz loc_47C638  +
mov [esp+0ACh+var_A8] 1D04h +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
mov [esp+0ACh+var_64] eax +
call sub_44BA40  +
mov eax [edi] +
mov ecx [esp+0ACh+var_64] +
mov eax [eax+10h] +
jmp loc_47C445  +
add esi 1 +
jmp loc_47C10F  +
mov ecx [esp+0ACh+var_94] +
mov edx [esp+0ACh+var_8C] +
add edx ecx +
add ecx 1 +
lea eax [edx+1] +
mov [esp+0ACh+var_94] ecx +
jmp loc_47C7B1  +
mov eax [esp+0ACh+var_94] +
mov [esp+0ACh+var_AC] eax +
call sub_45A590  +
mov edx 1 +
mov ecx eax +
mov eax [edi] +
shl edx cl +
mov [esp+0ACh+var_8C] edx +
mov eax [eax+10h] +
jmp loc_47C42B  +
and ebp 80h +
cmp ebp 1 +
sbb eax eax +
and edx 0Fh +
and eax 0FFFFFFF0h +
lea eax [eax+edx+20h] +
jmp loc_47C4D0  +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] eax +
call sub_4889F0  +
cmp [esp+0ACh+var_50] 0 +
jz loc_47C544  +
mov eax [esp+0ACh+var_48] +
mov [esp+0ACh+var_AC] eax +
call free  +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] eax +
call sub_488870  +
mov esi [esp+0ACh+var_44] +
mov [esp+0ACh+var_38] 0 +
mov [esp+0ACh+var_4C] 1 +
mov dword ptr [esi+0BCh] 3 +
mov dword ptr [esi+0C0h] 0 +
mov [esi+0D0h] eax +
mov dword ptr [esi+0C4h] 0 +
mov dword ptr [esi+0E0h] 0 +
mov dword ptr [esi+0D4h] 0 +
mov dword ptr [esi+0D8h] 0 +
mov dword ptr [esi+0DCh] 1 +
jmp loc_47B899  +
mov eax [edi] +
mov ecx [edx] +
mov edx [eax+4] +
mov eax offset aLocalSym +
mov [esp+0ACh+var_A4] ecx +
mov [esp+0ACh+var_AC] offset aUnableToFindEq +
test edx edx +
cmovnz eax edx +
mov [esp+0ACh+var_A8] eax +
call off_4BFA04  +
mov [esp+0ACh+var_AC] 5 +
call sub_44BAF0  +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] eax +
call sub_488580  +
mov eax [esp+0ACh+var_48] +
mov [esp+0ACh+var_AC] eax +
call free  +
jmp loc_479C5E  +
mov [esp+0ACh+var_94] 0 +
jmp loc_47C1C1  +
mov eax [esp+0ACh+var_6C] +
mov [esp+0ACh+var_A4] 4 +
mov [esp+0ACh+var_AC] ebp +
mov [esp+0ACh+var_A8] eax +
call sub_458C50  +
test eax eax +
mov [esp+0ACh+var_60] eax +
jz loc_47C96B  +
mov [ebx+30h] eax +
mov eax [esp+0ACh+var_48] +
mov dword ptr [ebx+4] 12h +
mov [ebx+18h] esi +
mov dword ptr [ebx+24h] 4 +
mov dword ptr [ebx+28h] 4 +
mov [esp+0ACh+var_80] 1 +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+8] 0 +
mov byte ptr [eax+0Ch] 0 +
mov byte ptr [eax+0Dh] 0 +
mov byte ptr [eax+0Eh] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
mov dword ptr [eax+18h] 0 +
jmp loc_47C331  +
mov ebp [esp+0ACh+arg_0] +
mov [esp+0ACh+var_AC] offset aBWarningNonLoa +
mov [esp+0ACh+var_A8] ebp +
call off_4BFA04  +
jmp loc_479C5E  +
mov ecx [eax+30h] +
mov edx [eax+44h] +
shl ecx 5 +
lea ebx [edx+ecx] +
cmp edx ebx +
jnb loc_47CA6E  +
mov esi 0FFFFFFFFh +
jmp loc_47CA57  +
add edx 20h +
cmp ebx edx +
jbe loc_47CA66  +
cmp dword ptr [edx] 1 +
jnz loc_47CA50  +
mov ecx [edx+0Ch] +
cmp esi ecx +
cmova esi ecx +
jmp loc_47CA50  +
test esi esi +
jz loc_47BA03  +
mov eax [esp+0ACh+var_50] +
mov word ptr [eax+24h] 2 +
mov eax [ebp+0A0h] +
jmp loc_47BA03  +
mov [esp+0ACh+var_A8] 0D8Dh +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_479FF5  +
mov eax [eax+28h] +
test eax eax +
jz loc_47BFE1  +
mov edx [esp+0ACh+var_7C] +
sub edx [eax+1Ch] +
mov [ecx+14h] eax +
mov [ecx+18h] edx +
jmp loc_47BFEF  +
cmp [esp+0ACh+arg_4] 0 +
mov eax [ebp+0A0h] +
setnz byte ptr [esp+0ACh+var_94]  +
jmp loc_47B9A6  +
mov eax [esp+0ACh+var_58] +
mov [esp+0ACh+var_AC] eax +
call sub_488580  +
jmp loc_479C5E  +
xor eax eax +
cmp [esp+0ACh+var_80] 7 +
jnz loc_47B2FA  +
nop   +
jmp loc_47B2F7  +
mov ecx 0FFFFFFF1h +
jmp loc_47C445  +
mov [esp+0ACh+var_A4] offset aAssign_file_po +
mov [esp+0ACh+var_A8] 155Eh +
mov [esp+0ACh+var_AC] offset a____Binutil_15 +
call sub_44BA70  +
mov ecx edi +
mov byte ptr [esp+0ACh+var_94] cl +
jmp loc_47B9A6  +
mov eax esi +
mov esi ebx +
mov ebx eax +
jmp loc_47C0F0  +
***
jmp loc_47CB40  +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebp [esp+60h] +
mov eax [ebp+4] +
test byte ptr [ebp+2Bh] 10h +
mov eax [eax+1B0h] +
mov [esp+20h] eax +
jnz loc_47CB72  +
mov dword ptr [esp+4] 0 +
mov [esp] ebp +
call sub_479A70  +
test eax eax +
jz loc_47CBB0  +
mov eax [ebp+0A0h] +
lea edx [esp+3Ch] +
mov dword ptr [esp+3Ch] 0 +
mov eax [eax+40h] +
mov [esp+2Ch] eax +
mov eax [esp+20h] +
mov eax [eax+174h] +
mov eax [eax+1Ch] +
mov [esp+8] edx +
mov [esp] ebp +
mov [esp+4] eax +
call sub_44DAD0  +
mov ecx [esp+3Ch] +
test ecx ecx +
jz loc_47CBC0  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [ebp+0A0h] +
mov edx [eax+934h] +
mov ecx [edx+20h] +
mov ebx [edx+24h] +
mov [esp+18h] ecx +
mov ecx [eax+40h] +
mov eax [eax+214h] +
mov [esp+1Ch] ebx +
lea edi [ecx+4] +
lea eax [ecx+eax*4] +
cmp eax edi +
jbe loc_47CD51  +
mov [esp+60h] ebp +
mov ebp eax +
jmp loc_47CC0B  +
add edi 4 +
cmp ebp edi +
jbe loc_47CD41  +
mov ebx [edi] +
mov eax [ebx+10h] +
and eax [ebx+14h] +
cmp eax 0FFFFFFFFh +
jnz loc_47CC00  +
mov eax [ebx+4] +
mov esi [ebx+2Ch] +
cmp eax 4 +
jz loc_47CD0E  +
cmp eax 9 +
jz loc_47CD0E  +
test esi esi +
jz loc_47CC00  +
test byte ptr [esi+17h] 8 +
jz loc_47CC00  +
mov eax [esi] +
mov [esp+24h] eax +
mov eax [ebx+30h] +
mov [esp+4] esi +
mov [esp+8] eax +
mov eax [esp+60h] +
mov [esp] eax +
call sub_488140  +
test eax eax +
jz loc_47CBB0  +
movzx eax byte ptr [esi+18h] +
and eax 30h +
cmp al 10h +
jz loc_47CF80  +
cmp dword ptr [ebx] 0FFFFFFFFh +
jnz loc_47CFA8  +
mov eax [esp+60h] +
mov ecx [esp+24h] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov eax [eax+4] +
mov dword ptr [esp+8] 0 +
mov [esp+4] ecx +
mov [esp] eax +
call sub_4885B0  +
mov [ebx] eax +
mov eax [esi+8Ch] +
mov edx [eax+3Ch] +
mov [esp+28h] eax +
test edx edx +
jz loc_47CCD1  +
mov ecx [esp+24h] +
mov eax [esp+60h] +
mov dword ptr [esp] 0 +
call sub_474A60  +
test eax eax +
jz loc_47CBB0  +
mov eax [esp+28h] +
mov edx [eax+4Ch] +
test edx edx +
jz loc_47CCF8  +
mov ecx [esp+24h] +
mov eax [esp+60h] +
mov dword ptr [esp] 1 +
call sub_474A60  +
test eax eax +
jz loc_47CBB0  +
mov eax [esi+24h] +
mov [ebx+18h] eax +
mov eax [esi+6Ch] +
mov [ebx+30h] eax +
mov eax [ebx+2Ch] +
mov dword ptr [eax+6Ch] 0 +
mov eax [esp+18h] +
add edi 4 +
mov edx [esp+1Ch] +
mov dword ptr [esp+0Ch] 1 +
mov [esp] ebx +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_478D10  +
cmp ebp edi +
mov [esp+18h] eax +
mov [esp+1Ch] edx +
ja loc_47CC0B  +
mov ebp [esp+60h] +
mov eax [ebp+0A0h] +
mov edx [eax+934h] +
mov eax [edx+4] +
mov esi 1 +
mov [esp] eax +
call sub_4889F0  +
mov ebx [ebp+0A0h] +
mov eax [ebx+934h] +
sub ebx 0FFFFFF80h +
mov eax [eax+4] +
mov [esp] eax +
call sub_488870  +
mov edx [esp+1Ch] +
mov [ebx+18h] eax +
mov eax [esp+18h] +
mov [esp] ebx +
mov dword ptr [esp+0Ch] 1 +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_478D10  +
mov ecx [ebp+4] +
mov edi [ebp+0A0h] +
mov ecx [ecx+1B0h] +
mov ecx [ecx+174h] +
movzx ecx byte ptr [ecx+0Bh] +
shl esi cl +
mov ebx esi +
sar ebx 1Fh +
add eax esi +
adc edx ebx +
add eax 0FFFFFFFFh +
adc edx 0FFFFFFFFh +
neg esi  +
mov ebx esi +
and esi eax +
sar ebx 1Fh +
mov eax edx +
and eax ebx +
xor edx edx +
mov [edi+18h] esi +
mov ebx [ebp+0A0h] +
mov [esp+18h] esi +
mov [esp+1Ch] eax +
mov eax [edi+34h] +
imul eax [edi+38h] +
mov esi [ebx+214h] +
mov ecx [ebx+934h] +
add eax [esp+18h] +
adc edx [esp+1Ch] +
cmp esi 1 +
mov [ecx+20h] eax +
mov [ecx+24h] edx +
jbe loc_47CEC4  +
mov edi 1 +
mov ebx [esp+2Ch] +
mov [esp+18h] esi +
jmp loc_47CE2D  +
mov eax [ebp+0A0h] +
mov ecx [eax+934h] +
mov esi [ebx+edi*4] +
mov eax [ecx+4] +
mov ecx [esi] +
mov [esp] eax +
mov [esp+4] ecx +
call sub_488880  +
mov [esi] eax +
mov eax [esp+20h] +
mov eax [eax+48h] +
test eax eax +
jz loc_47CE5A  +
mov ecx [ebx+edi*4] +
mov [esp] ebp +
mov [esp+4] ecx +
call eax  +
mov eax [ebx+edi*4] +
mov edx [eax+30h] +
test edx edx +
jz loc_47CEAB  +
mov esi [eax+18h] +
mov edx [eax+14h] +
mov eax [eax+10h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp] ebp +
mov [esp+8] edx +
mov [esp+4] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_47CBB0  +
mov eax [ebx+edi*4] +
mov eax [eax+30h] +
mov [esp+8] ebp +
mov [esp+4] esi +
mov [esp] eax +
call sub_46FB80  +
cmp eax esi +
jnz loc_47CBB0  +
add edi 1 +
cmp edi [esp+18h] +
jnz loc_47CE21  +
mov ebx [ebp+0A0h] +
mov ecx [ebx+934h] +
mov eax [ecx+4] +
test eax eax +
jz loc_47CF1A  +
mov eax [ebx+90h] +
mov edx [ebx+94h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp] ebp +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
test eax eax +
jnz loc_47CBB0  +
mov eax [ebp+0A0h] +
mov eax [eax+934h] +
mov eax [eax+4] +
mov [esp] ebp +
mov [esp+4] eax +
call sub_488920  +
test eax eax +
jz loc_47CBB0  +
mov eax [esp+20h] +
mov eax [eax+0A4h] +
test eax eax +
jz loc_47CF40  +
mov edx [ebp+0A0h] +
mov edx [edx+934h] +
mov edx [edx+38h] +
mov [esp] ebp +
mov [esp+4] edx +
call eax  +
mov eax [esp+20h] +
mov eax [eax+174h] +
mov eax [eax+14h] +
mov [esp] ebp +
call eax  +
test eax eax +
jz loc_47CBB0  +
mov eax [ebx+934h] +
mov edx [eax+10h] +
mov eax 1 +
test edx edx +
jz loc_47CBB2  +
mov [esp] ebp +
call edx  +
jmp loc_47CBB2  +
***
mov eax [esp+60h] +
test byte ptr [eax+2Ah] 40h +
jnz loc_47CC6E  +
mov edx [esp+24h] +
call sub_4740C0  +
test eax eax +
mov [esp+24h] eax +
jnz loc_47CC6E  +
jmp loc_47CBB0  +
***
mov dword ptr [esp+8] offset a_bfd_elf_assig +
mov dword ptr [esp+4] 16A7h +
mov dword ptr [esp] offset a____Binutil_15 +
call sub_44BA70  +
lea esi [esi+0] +
lea edi [edi+0] +
jmp loc_47CB40  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov edx [eax] +
mov eax [edx+14h] +
mov ecx [edx+0Ch] +
test eax eax +
jnz loc_47D077  +
and ch 1 +
jz loc_47D022  +
mov eax [edx+10h] +
test eax eax +
jz loc_47D022  +
mov ecx [eax+94h] +
cmp ecx [esp+1Ch+arg_0] +
jz loc_47D053  +
mov eax [eax+3Ch] +
test eax eax +
jz loc_47D022  +
mov ecx [eax+94h] +
cmp ecx [esp+1Ch+arg_0] +
jz loc_47D053  +
mov eax [edx+4] +
mov [esp+1Ch+var_1C] offset aBSymbolSRequir +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] eax +
call off_4BFA04  +
mov [esp+1Ch+var_1C] 7 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
add esp 1Ch +
retn   +
mov ecx [ecx+0A0h] +
mov eax [eax+8] +
mov ecx [ecx+934h] +
cmp eax [ecx+28h] +
jge loc_47D022  +
mov ecx [ecx+8] +
mov eax [ecx+eax*4] +
test eax eax +
jz loc_47D022  +
mov eax [eax+14h] +
mov [edx+14h] eax +
test eax eax +
jz loc_47D022  +
add esp 1Ch +
retn   +
***
sub esp 14h +
mov eax [esp+14h+arg_10] +
mov ebx [esp+14h+arg_0] +
test eax eax +
jz loc_47D140  +
movzx eax byte ptr [eax] +
xor edx edx +
and eax 3 +
cmp al 2 +
setnz dl  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jz loc_47D0B6  +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
mov eax [esp+14h+arg_8] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_47D0AB  +
mov eax [esp+14h+arg_C] +
mov eax [eax+8Ch] +
test eax eax +
jz loc_47D205  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_47D147  +
mov ecx [esp+14h+arg_4] +
mov esi [ecx+8Ch] +
mov ecx [esi+8] +
and ecx 0FFF00000h +
or ecx [eax+8] +
test edx edx +
mov [eax+8] ecx +
jz loc_47D17A  +
mov edx [esi+8] +
and edx 80h +
jz loc_47D115  +
mov edx [esi+64h] +
or dword ptr [eax+8] 80h +
mov [eax+64h] edx +
mov eax [esp+14h+arg_4] +
mov esi [esp+14h+arg_C] +
movzx edx byte ptr [eax+19h] +
mov eax [esp+14h+arg_C] +
and edx 4 +
movzx eax byte ptr [eax+19h] +
and eax 0FFFFFFFBh +
or eax edx +
mov [esi+19h] al +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
xor edx edx +
jmp loc_47D0A2  +
mov ecx [esp+14h+arg_C] +
mov esi [esp+14h+arg_4] +
mov ecx [ecx+14h] +
mov esi [esi+14h] +
cmp ecx esi +
jz loc_47D1F0  +
test edx edx +
jnz loc_47D1C5  +
mov esi [esp+14h+arg_4] +
mov esi [esi+8Ch] +
mov ecx [esi+8] +
and ecx 0FFF00000h +
or ecx [eax+8] +
mov [eax+8] ecx +
mov edx [esi+78h] +
test edx edx +
jz loc_47D187  +
test byte ptr [edx+16h] 10h +
jnz loc_47D1C0  +
mov edx [esi+8] +
test dh 2 +
jz loc_47D198  +
or ch 2 +
mov [eax+8] ecx +
mov edx [esi+8] +
mov ecx [esi+7Ch] +
mov [eax+7Ch] ecx +
mov ecx [esi+74h] +
mov [eax+74h] ecx +
test byte ptr [ebx+2Ah] 10h +
jnz loc_47D100  +
and edx 800h +
or [eax+8] edx +
jmp loc_47D0FD  +
mov edx [esi+8] +
jmp loc_47D1A4  +
xor ecx esi +
and ecx 0FFF1FFFBh +
jz loc_47D1F0  +
mov ecx [esp+14h+arg_4] +
mov esi [ecx+8Ch] +
mov edx [esi+8] +
and edx 0FFF00000h +
or [eax+8] edx +
mov edx [esi+8] +
jmp loc_47D100  +
mov ecx [esp+14h+arg_4] +
mov esi [ecx+8Ch] +
mov ecx [esi+4] +
mov [eax+4] ecx +
jmp loc_47D0E6  +
mov [esp+14h+var_10] 1B41h +
mov [esp+14h+var_14] offset a____Binutil_15 +
mov [esp+14h+var_8] edx +
call sub_44BA40  +
mov eax [esp+14h+arg_C] +
mov edx [esp+14h+var_8] +
mov eax [eax+8Ch] +
jmp loc_47D0D5  +
***
push ebx  +
mov eax 1 +
sub esp 28h +
mov edx [esp+30h] +
mov ecx [edx+4] +
cmp dword ptr [ecx+4] 5 +
jz loc_47D250  +
add esp 28h +
pop ebx  +
retn   +
***
mov ebx [esp+38h] +
mov ecx [ebx+4] +
cmp dword ptr [ecx+4] 5 +
jnz loc_47D246  +
mov eax [esp+34h] +
mov ebx [esp+3Ch] +
mov eax [eax+8Ch] +
mov ebx [ebx+8Ch] +
mov ecx [eax+28h] +
mov [ebx+28h] ecx +
mov ecx [eax+4] +
cmp ecx 2 +
jz loc_47D284  +
cmp ecx 0Bh +
jnz loc_47D2B7  +
mov eax [eax+20h] +
mov [ebx+20h] eax +
mov eax [esp+3Ch] +
mov dword ptr [esp+10h] 0 +
mov [esp] edx +
mov [esp+0Ch] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
call sub_47D080  +
add esp 28h +
pop ebx  +
retn   +
***
sub ecx 6FFFFFFDh +
cmp ecx 1 +
ja loc_47D28A  +
jmp loc_47D284  +
***
push ebx  +
mov eax [esp+arg_0] +
mov ebx [esp+arg_4] +
mov edx [eax+64h] +
test edx edx +
jnz loc_47D2EB  +
jmp loc_47D358  +
mov edx [edx+0Ch] +
test edx edx +
jz loc_47D358  +
mov eax [edx+8Ch] +
cmp dword ptr [eax+4] 11h +
jnz loc_47D2E4  +
mov esi [eax+7Ch] +
test esi esi +
jz loc_47D2E4  +
mov eax esi +
xor edi edi +
jmp loc_47D31A  +
cmp [edx+3Ch] ebx +
jz loc_47D361  +
mov eax [eax+8Ch] +
mov eax [eax+7Ch] +
cmp eax esi +
jz loc_47D337  +
test eax eax +
jz loc_47D337  +
mov ecx [eax+3Ch] +
cmp ecx ebx +
jnz loc_47D304  +
mov eax [eax+8Ch] +
lea ecx [edi+4] +
cmp [edx+3Ch] ebx +
mov eax [eax+7Ch] +
cmovnz edi ecx +
cmp eax esi +
jnz loc_47D316  +
test edi edi +
jz loc_47D2E4  +
test ebx ebx +
jz loc_47D377  +
mov eax [edx+28h] +
test eax eax +
jnz loc_47D34C  +
mov eax [edx+24h] +
mov [edx+28h] eax +
sub eax edi +
mov [edx+24h] eax +
mov edx [edx+0Ch] +
test edx edx +
jnz loc_47D2EB  +
pop ebx  +
mov eax 1 +
pop esi  +
pop edi  +
retn   +
mov ecx [ecx+8Ch] +
and dword ptr [ecx+8] 0FFFFFDFFh +
mov dword ptr [ecx+74h] 0 +
jmp loc_47D309  +
mov eax [edx+3Ch] +
sub [eax+24h] edi +
jmp loc_47D2E4  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 9Ch +
mov eax [esp+0B0h] +
mov edx [eax+4] +
mov eax 1 +
cmp dword ptr [edx+4] 5 +
jz loc_47D3C0  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ebx [esp+0B4h] +
mov edi [ebx+4] +
cmp dword ptr [edi+4] 5 +
mov ecx edi +
jnz loc_47D3AF  +
mov eax [ebx+0A0h] +
mov eax [eax+934h] +
mov eax [eax] +
test eax eax +
jz loc_47D406  +
mov eax [esp+0B0h] +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call sub_47D2D0  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+0B0h] +
mov eax [eax+0A0h] +
mov ebp [eax+44h] +
mov [esp+48h] eax +
test ebp ebp +
jz loc_47D3E4  +
cmp edx edi +
jz loc_47E2B8  +
mov eax [edx+1B0h] +
mov dword ptr [esp+8Ch] 0 +
mov [esp+68h] eax +
mov eax [esp+48h] +
mov eax [eax+30h] +
mov [esp+58h] eax +
mov eax [ecx+1B0h] +
mov eax [eax+10h] +
mov [esp+3Ch] eax +
mov eax [esp+0B0h] +
mov eax [eax+64h] +
test eax eax +
mov [esp+34h] eax +
jz loc_47D470  +
and byte ptr [eax+18h] 0BFh +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_47D465  +
mov eax [esp+48h] +
mov ebp [eax+44h] +
mov eax [esp+58h] +
test eax eax +
jz loc_47E6B2  +
mov eax [ebp+10h] +
test eax eax +
jnz loc_47E20A  +
mov edx ebp +
xor eax eax +
mov ecx [esp+58h] +
jmp loc_47D4A3  +
mov edi [edx+10h] +
test edi edi +
jnz loc_47E20A  +
add eax 1 +
add edx 20h +
cmp eax ecx +
jnz loc_47D498  +
mov dword ptr [esp+64h] 0 +
xor esi esi +
mov edi ebp +
mov [esp+30h] ebp +
mov ebp esi +
jmp loc_47D4E3  +
cmp eax 1 +
jz loc_47D544  +
cmp eax 6474E552h +
jnz loc_47D4D3  +
mov dword ptr [edi] 0 +
add ebp 1 +
add edi 20h +
cmp [esp+58h] ebp +
jbe loc_47D5F9  +
mov eax [edi] +
cmp eax 3 +
jnz loc_47D4C1  +
mov eax [esp+34h] +
test eax eax +
jz loc_47D4D3  +
mov edx [edi+0Ch] +
jmp loc_47D4FE  +
mov eax [eax+0Ch] +
test eax eax +
jz loc_47D4D3  +
test edx edx +
jnz loc_47D4F7  +
mov esi [edi+10h] +
test esi esi +
jnz loc_47D4F7  +
mov ebx [edi+18h] +
test ebx ebx +
jnz loc_47D4F7  +
mov ecx [edi+14h] +
test ecx ecx +
jz loc_47D4F7  +
test byte ptr [eax+15h] 1 +
jz loc_47D4F7  +
mov esi [eax+24h] +
test esi esi +
mov [esp+10h] esi +
jz loc_47D4F7  +
mov esi [eax+50h] +
mov ebx [edi+8] +
cmp esi ebx +
jb loc_47D4F7  +
add esi [esp+10h] +
add ecx ebx +
cmp esi ecx +
ja loc_47D4F7  +
mov eax [eax+1Ch] +
mov [edi+0Ch] eax +
jmp loc_47D4D3  +
***
test ebp ebp +
jz loc_47D4D3  +
mov ebx [esp+30h] +
xor edx edx +
jmp loc_47D55E  +
add edx 1 +
add ebx 20h +
cmp edx ebp +
jz loc_47D4D3  +
cmp dword ptr [ebx] 1 +
jnz loc_47D550  +
mov eax [edi+0Ch] +
mov esi [ebx+18h] +
mov ecx [ebx+14h] +
mov [esp+10h] eax +
mov eax [ebx+0Ch] +
cmp esi ecx +
cmovnb ecx esi +
mov [esp+14h] ecx +
add ecx eax +
cmp [esp+10h] ecx +
mov [esp+18h] ecx +
jnb loc_47D550  +
mov ecx [edi+18h] +
cmp ecx [edi+14h] +
mov [esp+28h] ecx +
cmovb ecx [edi+14h] +
mov [esp+1Ch] ecx +
add ecx [esp+10h] +
cmp eax ecx +
mov [esp+20h] ecx +
jnb loc_47D550  +
mov ecx [edi+10h] +
mov [esp+24h] ecx +
mov ecx [ebx+10h] +
mov [esp+2Ch] ecx +
add ecx [esp+14h] +
cmp [esp+24h] ecx +
jnb loc_47D550  +
mov ecx [esp+1Ch] +
add ecx [esp+24h] +
cmp [esp+2Ch] ecx +
jnb loc_47D550  +
cmp [esp+10h] eax +
ja loc_47E6D0  +
mov eax [esp+18h] +
sub eax [esp+20h] +
test eax eax +
jle loc_47D5EE  +
mov ecx [esp+28h] +
add [edi+14h] eax +
add ecx eax +
mov [edi+18h] ecx +
mov dword ptr [ebx] 0 +
jmp loc_47D550  +
***
lea eax [esp+8Ch] +
mov ebp [esp+30h] +
mov [esp+4Ch] eax +
movzx eax byte ptr [esp+64h] +
mov dword ptr [esp+74h] 0 +
mov dword ptr [esp+6Ch] 0 +
mov dword ptr [esp+50h] 0 +
add eax eax +
mov dword ptr [esp+60h] 0 +
mov [esp+5Ch] al +
mov eax [ebp+0] +
test eax eax +
mov [esp+10h] eax +
jz loc_47D890  +
mov eax [esp+0B0h] +
mov eax [eax+64h] +
test eax eax +
jz loc_47E179  +
mov edx [ebp+10h] +
mov dword ptr [esp+1Ch] 0 +
mov dword ptr [esp+18h] 0 +
jmp loc_47D707  +
mov ebx [eax+20h] +
cmp ebx edx +
jb loc_47D750  +
mov ecx [eax+14h] +
mov esi ecx +
and esi 500h +
cmp esi 400h +
jz loc_47D903  +
mov esi [eax+24h] +
add ebx esi +
mov esi [ebp+14h] +
cmp [ebp+18h] esi +
cmovnb esi [ebp+18h] +
add esi edx +
cmp ebx esi +
ja loc_47D750  +
test cl 1 +
jz loc_47D750  +
mov esi [esp+10h] +
cmp esi 6474E551h +
jz loc_47D700  +
cmp esi 7 +
jz loc_47D929  +
cmp dword ptr [esp+10h] 1 +
jz loc_47D6D5  +
test ch 4 +
jnz loc_47D700  +
cmp dword ptr [esp+10h] 2 +
jz loc_47D937  +
test byte ptr [eax+18h] 40h +
jnz loc_47D700  +
mov edi [esp+18h] +
test edi edi +
cmovz edi eax +
cmp dword ptr [eax+3Ch] 1 +
sbb dword ptr [esp+1Ch] 0FFFFFFFFh +
mov [esp+18h] edi +
lea esi [esi+0] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_47D77F  +
test edx edx +
jnz loc_47D670  +
mov esi [eax+1Ch] +
mov ebx [ebp+0Ch] +
cmp esi ebx +
jb loc_47D750  +
mov ecx [eax+14h] +
mov edi ecx +
and edi 500h +
cmp edi 400h +
jz loc_47D916  +
mov edi [eax+24h] +
add esi edi +
mov edi [ebp+14h] +
cmp [ebp+18h] edi +
cmovnb edi [ebp+18h] +
add edi ebx +
cmp esi edi +
jbe loc_47D6AB  +
lea esi [esi+0] +
cmp dword ptr [esp+10h] 4 +
jnz loc_47D700  +
mov ecx [eax+8Ch] +
cmp dword ptr [ecx+4] 7 +
jnz loc_47D700  +
mov ebx [eax+50h] +
mov ecx [ebp+8] +
cmp ebx ecx +
jb loc_47D700  +
add ebx [eax+24h] +
add ecx [ebp+14h] +
cmp ebx ecx +
ja loc_47D700  +
mov ecx [eax+14h] +
jmp loc_47D6D0  +
***
mov eax [esp+1Ch] +
lea eax ds:28h[eax*4] +
mov [esp+54h] eax +
mov eax [esp+54h] +
mov [esp+4] eax +
mov eax [esp+0B4h] +
mov [esp] eax +
call sub_458B60  +
test eax eax +
mov [esp+10h] eax +
jz loc_47E1A2  +
mov edi [esp+10h] +
mov eax [ebp+4] +
mov edx [ebp+0] +
or byte ptr [edi+20h] 1 +
mov [edi+8] eax +
mov eax [esp+18h] +
mov dword ptr [edi] 0 +
mov [edi+4] edx +
test eax eax +
jz loc_47D7DA  +
mov eax [eax+3Ch] +
test eax eax +
jz loc_47D7F2  +
mov eax [ebp+10h] +
mov esi [esp+10h] +
mov [esi+0Ch] eax +
movzx eax byte ptr [esi+20h] +
and eax 0FFFFFFFDh +
or al [esp+5Ch] +
mov [esi+20h] al +
mov ecx [ebp+8] +
xor eax eax +
test ecx ecx +
jnz loc_47D808  +
mov eax [esp+48h] +
mov eax [eax+28h] +
cmp [ebp+14h] eax +
setnb al  +
mov edi [esp+10h] +
shl eax 4 +
mov ebx eax +
movzx eax byte ptr [edi+20h] +
and eax 0FFFFFFCFh +
or eax ebx +
mov [edi+20h] al +
mov eax [esp+60h] +
test eax eax +
jz loc_47D82E  +
cmp edx 1 +
jz loc_47DD91  +
mov eax [esp+48h] +
mov ebx [eax+14h] +
xor eax eax +
cmp ecx ebx +
ja loc_47D850  +
mov esi [esp+48h] +
add ecx [ebp+14h] +
mov eax [esi+2Ch] +
imul eax [esi+30h] +
add eax ebx +
cmp ecx eax +
setnb al  +
mov esi [esp+10h] +
shl eax 5 +
mov ecx eax +
movzx eax byte ptr [esi+20h] +
and eax 0FFFFFFDFh +
or eax ecx +
cmp edx 1 +
mov [esi+20h] al +
jz loc_47DD86  +
cmp dword ptr [esp+1Ch] 0 +
jnz loc_47D97A  +
mov eax [esp+10h] +
mov ebx [esp+4Ch] +
mov dword ptr [eax+24h] 0 +
mov [esp+4Ch] eax +
mov [ebx] eax +
nop   +
add dword ptr [esp+50h] 1 +
add ebp 20h +
mov eax [esp+58h] +
cmp [esp+50h] eax +
jnz loc_47D633  +
mov edi [esp+0B4h] +
mov eax [esp+8Ch] +
mov edx [edi+0A0h] +
mov edx [edx+934h] +
mov [edx] eax +
mov edx [esp+6Ch] +
test edx edx +
jz loc_47D3E4  +
test eax eax +
jz loc_47D3E4  +
xor edx edx +
mov eax [eax] +
add edx 1 +
test eax eax +
jnz loc_47D8D8  +
mov eax [esp+74h] +
cmp eax edx +
jnb loc_47D3E4  +
sub edx eax +
mov eax [esp+48h] +
imul edx [eax+2Ch] +
mov eax [esp+6Ch] +
sub [eax+0Ch] edx +
jmp loc_47D3E4  +
***
xor si si +
cmp dword ptr [esp+10h] 7 +
jnz loc_47D695  +
jmp loc_47D692  +
***
xor di di +
cmp dword ptr [esp+10h] 7 +
jnz loc_47D733  +
jmp loc_47D730  +
***
and ch 4 +
jnz loc_47D6E0  +
jmp loc_47D700  +
***
and ecx 500h +
cmp ecx 400h +
jz loc_47D950  +
mov ecx [eax+24h] +
test ecx ecx +
jnz loc_47D6E0  +
test edx edx +
jz loc_47E168  +
cmp [eax+20h] edx +
jnz loc_47D6E0  +
mov esi [eax] +
mov edi offset a_dynamic_0 +
mov ecx 9 +
cmps   +
jnz loc_47D700  +
jmp loc_47D6E0  +
***
mov eax [esp+1Ch] +
mov dword ptr [esp+4] 4 +
mov [esp] eax +
call sub_459BC0  +
test eax eax +
mov [esp+14h] eax +
jz loc_47E1A2  +
mov eax [esp+0B0h] +
mov edx [eax+64h] +
test edx edx +
jz loc_47D9C6  +
cmp [esp+18h] edx +
mov eax [esp+18h] +
jnz loc_47D9BF  +
jmp loc_47DDB9  +
cmp eax edx +
jz loc_47DDB9  +
mov edx [edx+0Ch] +
test edx edx +
jnz loc_47D9B7  +
mov dword ptr [esp+34h] 0 +
mov dword ptr [esp+30h] 1 +
mov dword ptr [esp+28h] 0 +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+4] 192Dh +
mov dword ptr [esp] offset a____Binutil_15 +
call sub_44BA40  +
mov eax [esp+24h] +
cmp [esp+1Ch] eax +
jz loc_47E1A9  +
mov ebx [esp+30h] +
mov eax [esp+10h] +
mov edx [esp+28h] +
test ebx ebx +
cmovnz edx [esp+34h] +
mov [eax+0Ch] edx +
movzx eax byte ptr [eax+20h] +
test al 10h +
jz loc_47DA3E  +
mov edi [esp+48h] +
mov ecx [edi+28h] +
cmp edx ecx +
jb loc_47E285  +
mov edi [esp+10h] +
sub edx ecx +
mov [edi+0Ch] edx +
test al 20h +
jz loc_47DA6F  +
mov eax [esp+10h] +
mov edi [esp+48h] +
mov ecx [eax+0Ch] +
mov edx [edi+2Ch] +
mov eax [edi+30h] +
imul edx eax +
cmp ecx edx +
jb loc_47E294  +
mov edi [esp+10h] +
sub ecx edx +
mov [esp+74h] eax +
mov [edi+0Ch] ecx +
mov [esp+6Ch] edi +
mov dword ptr [esp+38h] 0 +
mov eax [esp+10h] +
xor ecx ecx +
mov dword ptr [esp+24h] 0 +
mov ebx ecx +
mov dword ptr [esp+18h] 1 +
mov dword ptr [eax+24h] 0 +
mov eax [esp+3Ch] +
lea esi [eax-1] +
neg eax  +
mov [esp+40h] esi +
mov [esp+34h] eax +
jmp loc_47DB74  +
mov ecx [esi+14h] +
and ecx 500h +
cmp ecx 400h +
jz loc_47DC70  +
mov ecx [esi+24h] +
add ecx eax +
mov [esp+20h] ecx +
mov ecx [ebp+14h] +
cmp [ebp+18h] ecx +
cmovnb ecx [ebp+18h] +
add ecx edx +
cmp [esp+20h] ecx +
ja loc_47DB9C  +
mov ecx [esp+10h] +
mov ecx [ecx+24h] +
test ecx ecx +
mov [esp+20h] ecx +
mov ecx [esp+10h] +
jnz loc_47DC85  +
movzx ecx byte ptr [ecx+20h] +
mov dword ptr [esp+28h] 0 +
mov [esp+2Ch] cl +
and ecx 10h +
jz loc_47DB1B  +
mov ecx [esp+48h] +
mov ecx [ecx+28h] +
mov [esp+28h] ecx +
add edx [esp+28h] +
mov [esp+28h] edx +
xor edx edx +
test byte ptr [esp+2Ch] 20h +
jz loc_47DB37  +
mov ecx [esp+48h] +
mov edx [ecx+2Ch] +
imul edx [ecx+30h] +
add edx [esp+28h] +
cmp eax edx +
jnz loc_47E696  +
mov ecx [esp+20h] +
mov edx [esp+10h] +
add dword ptr [esp+38h] 1 +
mov eax ecx +
add eax 1 +
mov [edx+24h] eax +
mov eax [esp+14h] +
mov [edx+ecx*4+28h] esi +
mov dword ptr [eax+ebx*4] 0 +
or byte ptr [edi+18h] 40h +
add ebx 1 +
cmp [esp+1Ch] ebx +
jbe loc_47DBBF  +
mov eax [esp+14h] +
mov edi [eax+ebx*4] +
test edi edi +
jz loc_47DB6B  +
mov esi [edi+3Ch] +
test esi esi +
jz loc_47DCF0  +
mov edx [esp+10h] +
mov eax [esi+20h] +
mov edx [edx+0Ch] +
cmp eax edx +
jnb loc_47DAB0  +
cmp dword ptr [ebp+0] 4 +
jz loc_47DC00  +
mov esi [esp+18h] +
test esi esi +
jz loc_47DB6B  +
add ebx 1 +
cmp [esp+1Ch] ebx +
mov [esp+24h] eax +
mov dword ptr [esp+18h] 0 +
ja loc_47DB74  +
mov eax [esp+10h] +
mov ecx [eax+24h] +
test ecx ecx +
jz loc_47DD10  +
mov eax [esp+10h] +
mov edi [esp+4Ch] +
mov [esp+4Ch] eax +
mov [edi] eax +
mov eax [esp+38h] +
cmp [esp+1Ch] eax +
ja loc_47DD30  +
mov eax [esp+14h] +
mov [esp] eax +
call free  +
jmp loc_47D890  +
***
mov ecx [edi+8Ch] +
cmp dword ptr [ecx+4] 7 +
jnz loc_47DBA2  +
mov ecx [edi+50h] +
mov [esp+20h] ecx +
mov ecx [ebp+8] +
cmp [esp+20h] ecx +
mov [esp+28h] ecx +
jb loc_47DBA2  +
mov ecx [esp+20h] +
add ecx [edi+24h] +
mov [esp+20h] ecx +
mov ecx [esp+28h] +
add ecx [ebp+14h] +
cmp [esp+20h] ecx +
ja loc_47DBA2  +
mov ecx [esp+0B0h] +
movzx ecx byte ptr [ecx+28h] +
and ecx 7 +
cmp cl 3 +
jnz loc_47DBA2  +
mov ecx [edi+1Ch] +
test ecx ecx +
jnz loc_47DBA2  +
mov ecx [edi+20h] +
test ecx ecx +
jnz loc_47DBA2  +
jmp loc_47DAE4  +
***
xor cx cx +
cmp dword ptr [ebp+0] 7 +
jnz loc_47DAC8  +
lea esi [esi+0] +
jmp loc_47DAC5  +
***
mov edx [esp+20h] +
mov dword ptr [esp+2Ch] 0FFFFFFFFh +
mov edx [ecx+edx*4+24h] +
mov ecx [edx+24h] +
mov edx [edx+20h] +
mov [esp+28h] ecx +
add [esp+28h] edx +
mov edx [esp+40h] +
add edx [esp+28h] +
jb loc_47DCB5  +
and edx [esp+34h] +
mov [esp+2Ch] edx +
mov edx [esp+3Ch] +
mov ecx [esp+34h] +
lea edx [edx+eax-1] +
and ecx edx +
mov [esp+30h] edx +
mov edx 0FFFFFFFFh +
cmp eax [esp+30h] +
cmovbe edx ecx +
cmp [esp+2Ch] edx +
jb loc_47DBA2  +
cmp eax [esp+28h] +
jnb loc_47DB43  +
jmp loc_47DBA2  +
***
mov dword ptr [esp+4] 1991h +
mov dword ptr [esp] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_47DB8A  +
***
mov dword ptr [esp+4] 19C8h +
mov dword ptr [esp] offset a____Binutil_15 +
call sub_44BA40  +
jmp loc_47DBCE  +
***
mov eax [esp+54h] +
mov [esp+4] eax +
mov eax [esp+0B4h] +
mov [esp] eax +
call sub_458B60  +
test eax eax +
mov [esp+10h] eax +
jz loc_47E196  +
mov ebx [esp+10h] +
mov eax [ebp+0] +
mov edi [esp+24h] +
mov dword ptr [ebx] 0 +
mov [ebx+4] eax +
mov eax [ebp+4] +
mov [ebx+0Ch] edi +
mov [ebx+8] eax +
movzx eax byte ptr [ebx+20h] +
or eax 1 +
and eax 0FFFFFFCDh +
or al [esp+5Ch] +
mov [ebx+20h] al +
jmp loc_47DA77  +
***
test al 20h +
cmovz edx [esp+60h] +
mov [esp+60h] edx +
cmp dword ptr [esp+1Ch] 0 +
jnz loc_47D97A  +
mov eax [esp+0B0h] +
mov dword ptr [esp] offset aBWarningEmptyL +
mov [esp+4] eax +
call off_4BFA04  +
jmp loc_47D879  +
***
mov eax [ebp+10h] +
mov dword ptr [esp+34h] 0 +
mov dword ptr [esp+70h] 1 +
mov dword ptr [esp+28h] 0 +
mov [esp+18h] eax +
mov eax [ebp+0] +
mov dword ptr [esp+30h] 1 +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+2Ch] 0 +
mov [esp+20h] eax +
mov eax [esp+18h] +
test eax eax +
jz loc_47E040  +
mov eax [edx+20h] +
cmp [esp+18h] eax +
ja loc_47E078  +
mov ecx [edx+14h] +
mov ebx ecx +
and ebx 500h +
cmp ebx 400h +
jz loc_47E0BB  +
mov esi [edx+24h] +
add esi eax +
mov eax [ebp+14h] +
cmp [ebp+18h] eax +
mov ebx eax +
cmovnb ebx [ebp+18h] +
add ebx [esp+18h] +
cmp esi ebx +
ja loc_47E078  +
test cl 1 +
jz loc_47E078  +
mov esi [esp+20h] +
cmp esi 6474E551h +
jz loc_47DFD0  +
cmp esi 7 +
jz loc_47E0D9  +
cmp dword ptr [esp+20h] 1 +
jz loc_47DE81  +
test ch 4 +
jnz loc_47DFD0  +
cmp dword ptr [esp+20h] 2 +
jz loc_47DFF0  +
xor edi edi +
test byte ptr [edx+18h] 40h +
jnz loc_47DFD0  +
mov ecx [edx+3Ch] +
test ecx ecx +
jz loc_47DFD0  +
mov ebx [esp+2Ch] +
lea esi [ebx+1] +
mov [esp+38h] esi +
mov esi [esp+14h] +
mov [esi+ebx*4] edx +
mov ebx [esp+64h] +
test ebx ebx +
jnz loc_47DF26  +
mov ebx [ebp+0Ch] +
test ebx ebx +
mov [esp+2Ch] ebx +
jz loc_47DF26  +
mov esi [esp+68h] +
test byte ptr [esi+1AEh] 10h +
jnz loc_47DF26  +
mov esi [esp+24h] +
test esi esi +
jnz loc_47DF26  +
mov ebx [ecx+20h] +
test ebx ebx +
jz loc_47DF26  +
mov ebx [esp+10h] +
mov esi [ecx+1Ch] +
movzx ebx byte ptr [ebx+20h] +
mov [esp+78h] esi +
mov [esp+40h] bl +
xor ebx ebx +
test byte ptr [esp+40h] 10h +
jz loc_47DEFC  +
mov esi [esp+48h] +
mov ebx [esi+28h] +
add ebx [esp+2Ch] +
mov [esp+7Ch] ebx +
xor ebx ebx +
test byte ptr [esp+40h] 20h +
jz loc_47DF18  +
mov esi [esp+48h] +
mov ebx [esi+2Ch] +
imul ebx [esi+30h] +
add ebx [esp+7Ch] +
cmp [esp+78h] ebx +
jz loc_47E6F6  +
mov esi [ecx+20h] +
mov ebx esi +
mov [esp+2Ch] esi +
mov esi [esp+10h] +
mov esi [esi+0Ch] +
cmp ebx esi +
jb loc_47E0EC  +
mov ebx [ecx+14h] +
and ebx 500h +
cmp ebx 400h +
jz loc_47E2A1  +
mov ebx [ecx+24h] +
mov [esp+40h] ebx +
mov ebx [esp+40h] +
add ebx [esp+2Ch] +
cmp [ebp+18h] eax +
mov [esp+40h] ebx +
mov ebx eax +
cmovnb ebx [ebp+18h] +
add ebx esi +
cmp [esp+40h] ebx +
ja loc_47E0EC  +
mov eax [esp+30h] +
test eax eax +
jnz loc_47DF94  +
mov edi [esp+2Ch] +
mov eax [esp+28h] +
cmp edi eax +
cmovbe eax edi +
mov [esp+2Ch] eax +
mov eax [esp+24h] +
mov edi [esp+10h] +
mov dword ptr [esp+30h] 0 +
mov [edi+eax*4+28h] ecx +
mov edi [esp+2Ch] +
add eax 1 +
mov [esp+24h] eax +
mov [esp+28h] edi +
mov eax [esp+38h] +
cmp [esp+1Ch] eax +
jz loc_47D9FA  +
mov [esp+2Ch] eax +
lea esi [esi+0] +
mov edx [edx+0Ch] +
test edx edx +
jnz loc_47DDF7  +
mov eax [esp+2Ch] +
cmp [esp+1Ch] eax +
jz loc_47D9FA  +
jmp loc_47D9E6  +
***
and ecx 500h +
cmp ecx 400h +
jz loc_47E009  +
mov edi [edx+24h] +
test edi edi +
jnz loc_47DE81  +
mov esi [esp+18h] +
xor edi edi +
test esi esi +
jz loc_47E217  +
mov esi [esp+18h] +
cmp esi [edx+20h] +
jnz loc_47DE83  +
mov esi [edx] +
mov edi offset a_dynamic_0 +
mov ecx 9 +
cmps   +
jnz loc_47DFD0  +
jmp loc_47DE81  +
***
mov eax [edx+1Ch] +
mov ebx [ebp+0Ch] +
cmp eax ebx +
jb loc_47E078  +
mov ecx [edx+14h] +
mov esi ecx +
and esi 500h +
cmp esi 400h +
jz loc_47E0CD  +
mov esi [edx+24h] +
add esi eax +
mov eax [ebp+14h] +
cmp [ebp+18h] eax +
mov edi eax +
cmovnb edi [ebp+18h] +
add ebx edi +
cmp esi ebx +
jbe loc_47DE44  +
cmp dword ptr [esp+20h] 4 +
jnz loc_47DFD0  +
mov eax [edx+8Ch] +
cmp dword ptr [eax+4] 7 +
jnz loc_47DFD0  +
mov eax [edx+50h] +
mov ecx [ebp+8] +
cmp eax ecx +
jb loc_47DFD0  +
add eax [edx+24h] +
mov ebx eax +
mov eax [ebp+14h] +
add ecx eax +
cmp ebx ecx +
ja loc_47DFD0  +
mov ecx [edx+14h] +
jmp loc_47DE6D  +
***
xor esi esi +
cmp dword ptr [esp+20h] 7 +
jnz loc_47DE2A  +
jmp loc_47DE27  +
***
xor si si +
cmp dword ptr [esp+20h] 7 +
jnz loc_47E060  +
jmp loc_47E05D  +
***
and ch 4 +
jz loc_47DFD0  +
mov edi 1 +
jmp loc_47DE83  +
***
cmp dword ptr [esp+20h] 4 +
jz loc_47E228  +
mov esi [esp+68h] +
test byte ptr [esi+1AEh] 10h +
jz loc_47E147  +
mov ebx [ebp+0Ch] +
mov esi [ecx+1Ch] +
mov [esp+78h] ebx +
cmp esi ebx +
jb loc_47E147  +
mov ebx [ecx+14h] +
and ebx 500h +
cmp ebx 400h +
jz loc_47E5E1  +
mov edi [ecx+24h] +
mov [esp+40h] edi +
mov ebx [esp+40h] +
add ebx esi +
cmp [ebp+18h] eax +
cmovnb eax [ebp+18h] +
add eax [esp+78h] +
cmp ebx eax +
jbe loc_47DF7B  +
mov edi [esp+70h] +
test edi edi +
jz loc_47DFB7  +
mov eax [esp+2Ch] +
mov dword ptr [esp+70h] 0 +
mov [esp+34h] eax +
jmp loc_47DFB7  +
***
mov edi [eax+1Ch] +
cmp [ebp+0Ch] edi +
jnz loc_47D6E0  +
jmp loc_47D961  +
***
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+54h] 28h +
mov dword ptr [esp+1Ch] 0 +
jmp loc_47D78E  +
***
mov eax [esp+14h] +
mov [esp] eax +
call free  +
xor eax eax +
jmp loc_47D3AF  +
***
mov eax [esp+10h] +
mov edi [esp+1Ch] +
mov esi [esp+64h] +
mov [eax+24h] edi +
mov edi [esp+4Ch] +
test esi esi +
mov [esp+4Ch] eax +
mov [edi] eax +
jz loc_47DBEA  +
mov eax [esp+68h] +
test byte ptr [eax+1AEh] 10h +
jnz loc_47DBEA  +
mov edi [esp+4Ch] +
mov eax [edi+0Ch] +
cmp eax [esp+28h] +
jz loc_47DBEA  +
test byte ptr [edi+20h] 30h +
jnz loc_47DBEA  +
mov edi [esp+28h] +
sub edi eax +
mov eax edi +
mov edi [esp+4Ch] +
mov [edi+10h] eax +
jmp loc_47DBEA  +
***
mov dword ptr [esp+64h] 1 +
jmp loc_47D4B5  +
***
mov esi [edx+1Ch] +
cmp [ebp+0Ch] esi +
jnz loc_47DE83  +
jmp loc_47E024  +
***
mov ebx [edx+8Ch] +
cmp dword ptr [ebx+4] 7 +
jnz loc_47E0F7  +
mov esi [edx+50h] +
mov ebx [ebp+8] +
cmp esi ebx +
jb loc_47E0F7  +
add esi [edx+24h] +
add ebx eax +
cmp esi ebx +
ja loc_47E0F7  +
mov ebx [esp+0B0h] +
movzx ebx byte ptr [ebx+28h] +
and ebx 7 +
cmp bl 3 +
jnz loc_47E0F7  +
cmp dword ptr [edx+1Ch] 0 +
jnz loc_47E0F7  +
cmp dword ptr [edx+20h] 0 +
jz loc_47DF7B  +
nop   +
jmp loc_47E0F7  +
***
mov edi [esp+10h] +
and eax 0FFFFFFCFh +
mov [edi+20h] al +
jmp loc_47DA3E  +
***
mov eax [esp+10h] +
and byte ptr [eax+20h] 0DFh +
jmp loc_47DA6F  +
***
mov ebx edi +
test bl bl +
mov dword ptr [esp+40h] 0 +
jz loc_47DF5A  +
jmp loc_47DF53  +
***
mov eax [edi+1B0h] +
test byte ptr [eax+1AEh] 10h +
jz loc_47E30F  +
mov eax [esp+48h] +
mov eax [eax+30h] +
mov [esp+20h] eax +
cmp dword ptr [esp+20h] 0 +
jz loc_47E72C  +
xor esi esi +
xor ebx ebx +
jmp loc_47E2F3  +
add esi 1 +
add ebp 20h +
cmp esi [esp+20h] +
jz loc_47E5F8  +
cmp dword ptr [ebp+0] 1 +
jnz loc_47E2E3  +
mov eax [ebp+1Ch] +
cmp eax ebx +
jbe loc_47E2E3  +
cmp eax 40000000h +
ja loc_47E628  +
mov ebx eax +
jmp loc_47E2E3  +
***
mov eax [esp+0B4h] +
mov eax [eax+64h] +
test eax eax +
mov [esp+30h] eax +
jz loc_47E32C  +
and byte ptr [eax+18h] 0BFh +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_47E321  +
mov eax [esp+48h] +
mov dword ptr [esp+34h] 0 +
mov eax [eax+30h] +
test eax eax +
mov [esp+20h] eax +
jz loc_47E5BD  +
mov [esp+18h] edi +
mov edi ebp +
mov [esp+14h] ebp +
mov eax [edi+10h] +
test eax eax +
jnz loc_47E36C  +
cmp dword ptr [edi+18h] 0 +
jnz loc_47E36C  +
mov eax [edi] +
sub eax 2 +
cmp eax 1 +
jbe loc_47E733  +
mov eax [esp+0B0h] +
mov esi [eax+64h] +
test esi esi +
jz loc_47E59F  +
mov eax [edi] +
mov [esp+10h] edi +
lea ebx [eax-6474E550h] +
mov [esp+24h] eax +
mov [esp+3Ch] ebx +
lea ebx [eax-1] +
sub eax 6 +
mov [esp+40h] ebx +
mov [esp+38h] eax +
jmp loc_47E4C6  +
cmp dword ptr [esp+38h] 1 +
jbe loc_47E4BB  +
and eax 2 +
mov [esp+28h] eax +
jnz loc_47E3CF  +
cmp dword ptr [esp+3Ch] 2 +
jbe loc_47E4BB  +
cmp dword ptr [esp+40h] 1 +
jbe loc_47E4BB  +
mov eax [ebx+4] +
cmp eax 8 +
mov [esp+2Ch] eax +
jz loc_47E421  +
mov eax [ebx+10h] +
mov edx [ebx+14h] +
mov edi eax +
mov eax [esp+10h] +
mov ebp edx +
mov eax [eax+8] +
cmp eax edi +
ja loc_47E4BB  +
xor edx edx +
sub edi eax +
mov eax edi +
mov edi [ebx+18h] +
sbb ebp edx +
mov edx ebp +
xor ebp ebp +
add eax edi +
mov edi [esp+10h] +
adc edx ebp +
cmp edx 0 +
mov edi [edi+14h] +
jg loc_47E4BB  +
jl loc_47E421  +
cmp eax edi +
ja loc_47E4BB  +
mov ebp [esp+28h] +
test ebp ebp +
jz loc_47E45E  +
mov eax [esp+10h] +
mov edx [ebx+0Ch] +
mov eax [eax+0Ch] +
cmp edx eax +
jb loc_47E4BB  +
mov edi [esp+1Ch] +
sub edx eax +
test edi edi +
jz loc_47E450  +
cmp dword ptr [esp+2Ch] 8 +
jz loc_47E682  +
mov eax [ebx+18h] +
mov edi [esp+10h] +
add eax edx +
cmp eax [edi+18h] +
ja loc_47E4BB  +
mov eax [esp+10h] +
cmp dword ptr [eax] 2 +
jz loc_47E511  +
test ecx ecx +
jz loc_47E733  +
mov eax [ecx+14h] +
cmp [esi+14h] eax +
jnz loc_47E733  +
mov eax [ecx+20h] +
cmp [esi+20h] eax +
jnz loc_47E733  +
mov eax [ecx+1Ch] +
cmp [esi+1Ch] eax +
jnz loc_47E733  +
mov eax [ecx+24h] +
cmp [esi+24h] eax +
jnz loc_47E733  +
mov eax [ecx+28h] +
cmp [esi+28h] eax +
jnz loc_47E733  +
mov eax [ecx+40h] +
cmp [esi+40h] eax +
jnz loc_47E733  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_47E59B  +
mov ecx [esi+3Ch] +
test ecx ecx +
jz loc_47E4D1  +
or byte ptr [ecx+18h] 40h +
mov ebx [esi+8Ch] +
mov eax [ebx+8] +
mov ebp eax +
and ebp 400h +
mov [esp+1Ch] ebp +
jz loc_47E3A5  +
cmp dword ptr [esp+24h] 7 +
jz loc_47E3B0  +
cmp dword ptr [esp+24h] 6474E552h +
jz loc_47E3B0  +
cmp dword ptr [esp+24h] 1 +
jnz loc_47E4BB  +
jmp loc_47E3B0  +
***
mov edx [ebx+18h] +
test edx edx +
jnz loc_47E46B  +
mov eax [eax+18h] +
test eax eax +
mov [esp+1Ch] eax +
jz loc_47E46B  +
cmp dword ptr [esp+2Ch] 8 +
jz loc_47E56D  +
mov eax [ebx+10h] +
mov edx [ebx+14h] +
mov edi eax +
mov eax [esp+10h] +
mov ebp edx +
mov eax [eax+8] +
cmp eax edi +
jnb loc_47E4BB  +
xor edx edx +
sub edi eax +
mov eax edi +
mov edi [esp+10h] +
sbb ebp edx +
cmp ebp 0 +
mov edi [edi+14h] +
jg loc_47E4BB  +
jl loc_47E56D  +
cmp eax edi +
jnb loc_47E4BB  +
cmp dword ptr [esp+28h] 0 +
jz loc_47E46B  +
mov eax [esp+10h] +
mov edx [ebx+0Ch] +
mov eax [eax+0Ch] +
cmp edx eax +
jbe loc_47E4BB  +
sub edx eax +
cmp [esp+1Ch] edx +
jbe loc_47E4BB  +
jmp loc_47E46B  +
***
mov edi [esp+10h] +
add dword ptr [esp+34h] 1 +
add edi 20h +
mov eax [esp+20h] +
cmp [esp+34h] eax +
jnz loc_47E351  +
mov ebp [esp+14h] +
mov edi [esp+18h] +
mov eax [esp+30h] +
test eax eax +
jz loc_47E706  +
movzx edx byte ptr [eax+18h] +
test dl 40h +
jz loc_47E2D2  +
and edx 0FFFFFFBFh +
mov [eax+18h] dl +
mov eax [eax+0Ch] +
jmp loc_47E5C1  +
***
mov ebx edi +
test bl bl +
mov dword ptr [esp+40h] 0 +
jz loc_47E12E  +
jmp loc_47E127  +
***
mov eax [esp+0B4h] +
mov edi [eax+4] +
mov eax [edi+1B0h] +
mov ecx edi +
cmp ebx [eax+10h] +
jnz loc_47E651  +
mov eax [esp+0B0h] +
mov edx [eax+4] +
mov eax [eax+0A0h] +
mov [esp+48h] eax +
jmp loc_47D426  +
***
mov [esp+8] eax +
mov eax [esp+0B0h] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp] offset aBWarningSegmen +
mov [esp+4] eax +
call off_4BFA04  +
jmp loc_47E2E3  +
***
mov eax [edi] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_44C4F0  +
mov eax [esp+0B0h] +
mov edx [eax+4] +
mov eax [eax+0A0h] +
mov [esp+48h] eax +
mov eax [esp+0B4h] +
mov ecx [eax+4] +
jmp loc_47D426  +
***
mov edi [esp+10h] +
xor eax eax +
cmp dword ptr [edi] 7 +
jnz loc_47E453  +
jmp loc_47E450  +
***
mov dword ptr [esp+8] offset aRewrite_elf_pr +
mov dword ptr [esp+4] 19A1h +
mov dword ptr [esp] offset a____Binutil_15 +
call sub_44BA70  +
mov eax [esp+0B4h] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov dword ptr [eax] 0 +
jmp loc_47D3E4  +
***
mov eax [esp+20h] +
sub eax [esp+18h] +
test eax eax +
jle loc_47E6E5  +
add [ebx+14h] eax +
lea edx [eax+esi] +
mov [ebx+18h] edx +
mov dword ptr [edi] 0 +
xor ebp ebp +
mov edi [esp+30h] +
jmp loc_47D4D3  +
***
mov esi [esp+10h] +
mov ebx [esp+2Ch] +
mov [esi+0Ch] ebx +
jmp loc_47DF26  +
***
mov dword ptr [esp+8Ch] 0 +
cmp eax [esp+20h] +
jz loc_47EC5D  +
mov edx eax +
shl edx 5 +
cmp dword ptr [ebp+edx+10h] 0 +
jnz loc_47E740  +
add eax 1 +
jmp loc_47E711  +
***
xor ebx ebx +
jmp loc_47E602  +
***
mov ebp [esp+14h] +
mov edi [esp+18h] +
jmp loc_47E2D2  +
***
mov eax 1 +
lea edi [esp+8Ch] +
add eax eax +
mov [esp+38h] edi +
mov edi ebp +
mov dword ptr [esp+1Ch] 0 +
mov dword ptr [esp+3Ch] 0 +
mov [esp+60h] al +
mov eax [esp+20h] +
cmp [esp+3Ch] eax +
jz loc_47EC3C  +
mov eax [esp+0B0h] +
mov eax [eax+64h] +
test eax eax +
mov [esp+14h] eax +
jz loc_47E921  +
mov ebp [edi] +
mov [esp+10h] eax +
mov dword ptr [esp+28h] 0 +
mov dword ptr [esp+14h] 0 +
lea eax [ebp-6474E550h] +
mov [esp+30h] eax +
lea eax [ebp-1] +
mov [esp+34h] eax +
lea eax [ebp-6] +
mov [esp+40h] eax +
jmp loc_47E7E1  +
cmp ebp 7 +
jz loc_47E803  +
cmp ebp 6474E552h +
jz loc_47E803  +
cmp ebp 1 +
jz loc_47E803  +
mov eax [esp+10h] +
mov eax [eax+0Ch] +
test eax eax +
mov [esp+10h] eax +
jz loc_47EC64  +
mov eax [esp+10h] +
mov esi [eax+8Ch] +
mov eax [esi+8] +
mov ebx eax +
and ebx 400h +
mov [esp+2Ch] ebx +
jnz loc_47E7BC  +
cmp dword ptr [esp+40h] 1 +
jbe loc_47E7CE  +
and eax 2 +
mov [esp+18h] eax +
jnz loc_47E81A  +
cmp dword ptr [esp+30h] 2 +
jbe loc_47E7CE  +
cmp dword ptr [esp+34h] 1 +
jbe loc_47E7CE  +
mov eax [esi+4] +
cmp eax 8 +
mov [esp+24h] eax +
jz loc_47E858  +
mov ecx [esi+10h] +
mov eax [edi+8] +
mov ebx [esi+14h] +
cmp eax ecx +
ja loc_47E7CE  +
xor edx edx +
sub ecx eax +
mov eax ecx +
mov ecx [esi+18h] +
sbb ebx edx +
mov edx ebx +
xor ebx ebx +
add eax ecx +
mov ecx [edi+14h] +
adc edx ebx +
cmp edx 0 +
jg loc_47E7CE  +
jl loc_47E858  +
cmp eax ecx +
ja loc_47E7CE  +
cmp dword ptr [esp+18h] 0 +
lea esi [esi+0] +
jz loc_47E88E  +
mov edx [esi+0Ch] +
mov eax [edi+0Ch] +
cmp edx eax +
jb loc_47E7CE  +
sub edx eax +
cmp dword ptr [esp+2Ch] 0 +
jz loc_47E880  +
cmp dword ptr [esp+24h] 8 +
jz loc_47E8AC  +
mov eax [esi+18h] +
add eax edx +
cmp eax [edi+18h] +
ja loc_47E7CE  +
cmp dword ptr [edi] 2 +
jz loc_47E8B5  +
mov eax [esp+14h] +
test eax eax +
cmovz eax [esp+10h] +
add dword ptr [esp+28h] 1 +
mov [esp+14h] eax +
jmp loc_47E7CE  +
***
xor eax eax +
cmp dword ptr [edi] 7 +
jnz loc_47E883  +
jmp loc_47E880  +
***
cmp dword ptr [esi+18h] 0 +
jnz loc_47E893  +
mov eax [edi+18h] +
test eax eax +
mov [esp+2Ch] eax +
jz loc_47E893  +
cmp dword ptr [esp+24h] 8 +
jz loc_47E8FA  +
mov ecx [esi+10h] +
mov eax [edi+8] +
mov ebx [esi+14h] +
cmp eax ecx +
jnb loc_47E7CE  +
xor edx edx +
sub ecx eax +
mov eax [edi+14h] +
sbb ebx edx +
cmp ebx 0 +
jg loc_47E7CE  +
jl loc_47E8FA  +
cmp ecx eax +
jnb loc_47E7CE  +
cmp dword ptr [esp+18h] 0 +
nop   +
jz loc_47E893  +
mov edx [esi+0Ch] +
mov eax [edi+0Ch] +
cmp edx eax +
jbe loc_47E7CE  +
sub edx eax +
cmp [esp+2Ch] edx +
jbe loc_47E7CE  +
jmp loc_47E893  +
***
mov dword ptr [esp+24h] 0 +
mov eax 2Ch +
mov [esp+4] eax +
mov eax [esp+0B4h] +
mov [esp] eax +
call sub_458B60  +
test eax eax +
mov ebp eax +
jz loc_47E1A2  +
mov ebx [edi] +
mov dword ptr [eax] 0 +
mov edx [edi+1Ch] +
mov esi [edi+10h] +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [ebp+14h] edx +
mov [esp+2Ch] esi +
mov [ebp+0Ch] esi +
mov [ebp+8] eax +
movzx eax byte ptr [ebp+20h] +
mov dword ptr [ebp+10h] 0 +
or eax 1 +
and eax 0FFFFFFFDh +
or eax [esp+60h] +
mov edx eax +
or edx 4 +
mov [ebp+20h] dl +
lea edx [ebx-6474E551h] +
cmp edx 1 +
ja loc_47E9A0  +
mov edx [edi+18h] +
or eax 0Ch +
mov [ebp+20h] al +
mov [ebp+18h] edx +
mov eax [edi+8] +
mov esi eax +
mov [esp+10h] eax +
xor eax eax +
test esi esi +
jnz loc_47E9BF  +
mov eax [esp+48h] +
mov eax [eax+28h] +
cmp [edi+14h] eax +
setnb al  +
movzx eax al +
mov edx eax +
movzx eax byte ptr [ebp+20h] +
shl edx 4 +
and eax 0FFFFFFCFh +
or eax edx +
cmp dword ptr [esp+1Ch] 0 +
mov [ebp+20h] al +
jz loc_47E9E0  +
cmp ebx 1 +
jz loc_47EC84  +
mov eax [esp+48h] +
mov edx [eax+14h] +
xor eax eax +
cmp [esp+10h] edx +
ja loc_47EA0B  +
mov esi [esp+48h] +
mov ecx [esp+10h] +
add ecx [edi+14h] +
mov eax [esi+2Ch] +
imul eax [esi+30h] +
add eax edx +
cmp ecx eax +
setnb al  +
movzx eax al +
mov edx eax +
movzx eax byte ptr [ebp+20h] +
shl edx 5 +
and eax 0FFFFFFDFh +
or eax edx +
cmp ebx 1 +
mov [ebp+20h] al +
jnz loc_47EA2E  +
test al 20h +
mov eax [esp+1Ch] +
cmovnz eax ebx +
mov [esp+1Ch] eax +
cmp dword ptr [esp+24h] 0 +
jz loc_47EC91  +
mov eax [esp+14h] +
test eax eax +
jz loc_47EC91  +
mov esi [esp+10h] +
xor ecx ecx +
mov [esp+28h] ebp +
mov ebp eax +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+44h] 0 +
mov [esp+40h] esi +
lea esi [ebx-6474E550h] +
mov [esp+54h] esi +
lea esi [ebx-1] +
mov [esp+58h] esi +
lea esi [ebx-6] +
mov [esp+5Ch] esi +
mov [esp+18h] ebx +
mov [esp+4Ch] ecx +
jmp loc_47EAAA  +
cmp dword ptr [esp+18h] 7 +
jz loc_47EAC8  +
cmp dword ptr [esp+18h] 6474E552h +
jz loc_47EAC8  +
cmp dword ptr [esp+18h] 1 +
jz loc_47EAC8  +
mov ebp [ebp+0Ch] +
test ebp ebp +
jz loc_47ECBA  +
mov esi [ebp+8Ch] +
mov eax [esi+8] +
mov ebx eax +
and ebx 400h +
mov [esp+50h] ebx +
jnz loc_47EA87  +
cmp dword ptr [esp+5Ch] 1 +
jbe loc_47EA9F  +
and eax 2 +
mov [esp+30h] eax +
jnz loc_47EADF  +
cmp dword ptr [esp+54h] 2 +
jbe loc_47EA9F  +
cmp dword ptr [esp+58h] 1 +
jbe loc_47EA9F  +
mov eax [esi+4] +
cmp eax 8 +
mov [esp+34h] eax +
jz loc_47EB16  +
mov eax [esi+10h] +
cmp [esp+10h] eax +
mov edx [esi+14h] +
ja loc_47EA9F  +
mov ecx [esi+18h] +
sub eax [esp+40h] +
sbb edx [esp+44h] +
xor ebx ebx +
add eax ecx +
mov ecx [edi+14h] +
adc edx ebx +
cmp edx 0 +
jg loc_47EA9F  +
jl loc_47EB16  +
cmp eax ecx +
ja loc_47EA9F  +
cmp dword ptr [esp+30h] 0 +
jz loc_47EB4D  +
mov edx [esi+0Ch] +
mov eax [edi+0Ch] +
cmp edx eax +
jb loc_47EA9F  +
sub edx eax +
cmp dword ptr [esp+50h] 0 +
jz loc_47EB3F  +
cmp dword ptr [esp+34h] 8 +
jz loc_47EC2A  +
mov eax [esi+18h] +
add eax edx +
cmp eax [edi+18h] +
ja loc_47EA9F  +
cmp dword ptr [esp+18h] 2 +
jz loc_47EBBA  +
mov ebx [esp+4Ch] +
mov edx [esp+28h] +
mov eax [ebp+3Ch] +
lea ecx [ebx+1] +
mov [edx+ebx*4+28h] eax +
mov edx [ebp+14h] +
test dl 1 +
jz loc_47EBA7  +
mov ebx [esp+14h] +
test ebx ebx +
jz loc_47ED14  +
mov eax [ebp+20h] +
cmp eax [ebx+20h] +
cmovb ebx ebp +
mov [esp+14h] ebx +
and dl 2 +
jz loc_47ED09  +
mov edx [esi+10h] +
sub edx [esp+10h] +
sub eax [esp+2Ch] +
cmp eax edx +
jz loc_47EBA7  +
mov eax [esp+28h] +
and byte ptr [eax+20h] 0FDh +
cmp [esp+24h] ecx +
jz loc_47ECBA  +
mov [esp+4Ch] ecx +
jmp loc_47EA9F  +
***
cmp dword ptr [esi+18h] 0 +
jnz loc_47EB54  +
mov eax [edi+18h] +
test eax eax +
mov [esp+50h] eax +
jz loc_47EB54  +
cmp dword ptr [esp+34h] 8 +
jz loc_47EC00  +
mov eax [esi+10h] +
cmp [esp+10h] eax +
mov edx [esi+14h] +
jnb loc_47EA9F  +
sub eax [esp+40h] +
sbb edx [esp+44h] +
mov ecx [edi+14h] +
cmp edx 0 +
jg loc_47EA9F  +
jl loc_47EC00  +
cmp eax ecx +
jnb loc_47EA9F  +
cmp dword ptr [esp+30h] 0 +
jz loc_47EB54  +
mov edx [esi+0Ch] +
mov eax [edi+0Ch] +
cmp edx eax +
jbe loc_47EA9F  +
sub edx eax +
cmp [esp+50h] edx +
jbe loc_47EA9F  +
jmp loc_47EB54  +
***
xor eax eax +
cmp dword ptr [esp+18h] 7 +
jnz loc_47EB42  +
jmp loc_47EB3F  +
***
mov eax [esp+0B4h] +
mov edx [esp+8Ch] +
mov eax [eax+0A0h] +
mov eax [eax+934h] +
mov [eax] edx +
jmp loc_47D3E4  +
***
xor eax eax +
jmp loc_47E745  +
***
mov eax [esp+28h] +
mov esi eax +
mov [esp+24h] eax +
test esi esi +
mov eax 2Ch +
lea edx ds:28h[esi*4] +
cmovnz eax edx +
jmp loc_47E92E  +
***
mov dword ptr [esp+1Ch] 1 +
jmp loc_47EA2E  +
***
movzx eax byte ptr [ebp+20h] +
and eax 32h +
cmp al 2 +
jz loc_47ECF5  +
mov eax [esp+24h] +
add edi 20h +
add dword ptr [esp+3Ch] 1 +
mov [ebp+24h] eax +
mov eax [esp+38h] +
mov [esp+38h] ebp +
mov [eax] ebp +
jmp loc_47E768  +
***
mov ebp [esp+28h] +
movzx eax byte ptr [ebp+20h] +
test al 10h +
jz loc_47ECF9  +
mov ebx [esp+14h] +
test ebx ebx +
jz loc_47ECEE  +
mov edx [ebx+1Ch] +
and eax 32h +
sub edx [edi+0Ch] +
cmp al 2 +
mov [ebp+1Ch] edx +
jnz loc_47EC9C  +
mov eax [esp+14h] +
mov eax [eax+20h] +
sub eax [esp+2Ch] +
mov [ebp+10h] eax +
jmp loc_47EC9C  +
***
and eax 32h +
cmp al 2 +
jnz loc_47EC9C  +
xor eax eax +
jmp loc_47ECE5  +
***
and eax 32h +
cmp al 2 +
jnz loc_47EC9C  +
cmp dword ptr [esp+14h] 0 +
jnz loc_47ECDE  +
jmp loc_47ECF5  +
***
mov edx [esi+0Ch] +
sub edx [edi+0Ch] +
jmp loc_47EB97  +
***
mov [esp+14h] ebp +
mov eax [ebp+20h] +
jmp loc_47EB87  +
***
mov eax [esp+4] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jz loc_47ED33  +
mov eax 1 +
retn   +
***
mov edx [esp+0Ch] +
mov edx [edx+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_47ED2D  +
mov ecx [esp+8] +
mov edx [ecx] +
mov ecx [edx+4] +
cmp dword ptr [ecx+4] 5 +
jz loc_47EDF3  +
mov dword ptr [esp+8] 0 +
mov ecx [esp+10h] +
mov edx [ecx] +
mov ecx [edx+4] +
cmp dword ptr [ecx+4] 5 +
jz loc_47EDE4  +
mov dword ptr [esp+10h] 0 +
mov edx [esp+8] +
test edx edx +
jz loc_47ED2D  +
mov ecx [esp+8] +
mov edx [ecx+28h] +
test edx edx +
jz loc_47ED2D  +
cmp dword ptr [esp+10h] 0 +
jz loc_47ED2D  +
cmp dword ptr [ecx+10h] offset off_4BFB90 +
jnz loc_47ED2D  +
mov eax [eax+0A0h] +
cmp edx [eax+90Ch] +
jz loc_47EE06  +
cmp edx [eax+910h] +
jz loc_47EE0D  +
mov ecx [eax+934h] +
cmp edx [ecx+30h] +
jz loc_47EE14  +
cmp edx [ecx+2Ch] +
jz loc_47EE1B  +
mov eax [eax+208h] +
test eax eax +
jnz loc_47EDCE  +
jmp loc_47EDD8  +
mov eax [eax+3Ch] +
test eax eax +
jz loc_47EDD8  +
cmp edx [eax+38h] +
jnz loc_47EDC7  +
mov edx 0FFFFFF44h +
mov eax [esp+10h] +
mov [eax+28h] edx +
jmp loc_47ED2D  +
***
mov ecx [edx+0A0h] +
test ecx ecx +
jnz loc_47ED72  +
jmp loc_47ED6A  +
***
mov edx [edx+0A0h] +
test edx edx +
jnz loc_47ED5B  +
jmp loc_47ED53  +
***
mov edx 0FFFFFF40h +
jmp loc_47EDD8  +
***
mov edx 0FFFFFF41h +
jmp loc_47EDD8  +
***
mov edx 0FFFFFF42h +
jmp loc_47EDD8  +
***
mov edx 0FFFFFF43h +
jmp loc_47EDD8  +
***
mov eax [esp+4] +
mov edx [eax+0A0h] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
movzx ecx byte ptr [eax+5] +
mov eax [edx+60h] +
xor edx edx +
div  ecx +
lea edx ds:4[eax*4] +
test eax eax +
lea ecx [edx-4] +
mov eax edx +
cmovg eax ecx +
retn   +
***
sub esp 1Ch +
mov edx [esp+20h] +
mov eax [edx+0A0h] +
mov ecx [eax+910h] +
test ecx ecx +
jz loc_47EEC0  +
mov edx [edx+4] +
mov eax [eax+108h] +
mov edx [edx+1B0h] +
mov edx [edx+174h] +
movzx ecx byte ptr [edx+5] +
xor edx edx +
div  ecx +
lea edx ds:4[eax*4] +
test eax eax +
lea ecx [edx-4] +
cmovle ecx edx +
mov eax ecx +
add esp 1Ch +
retn   +
***
mov dword ptr [esp] 5 +
call sub_44BAF0  +
mov ecx 0FFFFFFFFh +
jmp loc_47EEB3  +
***
mov eax [esp+8] +
mov eax [eax+4Ch] +
lea eax ds:4[eax*4] +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov eax [esp+20h] +
mov esi [esp+24h] +
mov ecx [esp+2Ch] +
mov edi [esp+28h] +
mov edx [eax+4] +
mov edx [edx+1B0h] +
mov edx [edx+174h] +
mov edx [edx+28h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] ecx +
mov [esp+4] esi +
mov [esp] eax +
call edx  +
test eax eax +
jz loc_47EF63  +
mov eax [esi+4Ch] +
mov ebx [esi+44h] +
test eax eax +
jz loc_47EF56  +
mov ecx edi +
xor edx edx +
jmp loc_47EF43  +
mov ebx esi +
add edx 1 +
add ecx 4 +
cmp edx eax +
lea esi [ebx+10h] +
mov [ecx-4] ebx +
jnz loc_47EF41  +
lea edi [edi+eax*4] +
mov dword ptr [edi] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax 0FFFFFFFFh +
jmp loc_47EF5C  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov edx [esp+24h] +
mov eax [ebx+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
mov eax [eax+2Ch] +
mov dword ptr [esp+8] 0 +
mov [esp+4] edx +
mov [esp] ebx +
call eax  +
test eax eax +
js loc_47EFA6  +
mov [ebx+7Ch] eax +
add esp 18h +
pop ebx  +
retn   +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov edx [esp+24h] +
mov eax [ebx+4] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
mov eax [eax+2Ch] +
mov dword ptr [esp+8] 1 +
mov [esp+4] edx +
mov [esp] ebx +
call eax  +
test eax eax +
js loc_47EFE9  +
mov [ebx+80h] eax +
add esp 18h +
pop ebx  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+30h] +
mov edx [eax+0A0h] +
mov ebx [edx+910h] +
test ebx ebx +
jz loc_47F062  +
mov ecx [eax+64h] +
test ecx ecx +
jz loc_47F05B  +
mov edi 4 +
jmp loc_47F027  +
mov ecx [ecx+0Ch] +
test ecx ecx +
jz loc_47F051  +
mov ebp [ecx+8Ch] +
cmp ebx [ebp+1Ch] +
jnz loc_47F020  +
mov esi [ebp+4] +
cmp esi 4 +
jz loc_47F03F  +
cmp esi 9 +
jnz loc_47F020  +
mov eax [ecx+24h] +
xor edx edx +
mov ecx [ecx+0Ch] +
div  dword ptr [ebp+28h] +
test ecx ecx +
lea edi [edi+eax*4] +
jnz loc_47F027  +
mov eax edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 4 +
jmp loc_47F053  +
***
mov dword ptr [esp] 5 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
jmp loc_47F053  +
***
mov eax [edi+4] +
mov ebx [edi+64h] +
mov dword ptr [esp+18h] 0 +
mov eax [eax+1B0h] +
test ebx ebx +
mov eax [eax+174h] +
mov eax [eax+28h] +
mov [esp+1Ch] eax +
jnz loc_47F0E7  +
jmp loc_47F170  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_47F170  +
mov eax [edi+0A0h] +
mov edx [eax+910h] +
mov eax [ebx+8Ch] +
cmp [eax+1Ch] edx +
jnz loc_47F0D0  +
mov eax [eax+4] +
cmp eax 4 +
jz loc_47F0FF  +
cmp eax 9 +
jnz loc_47F0D0  +
mov eax [esp+48h] +
mov dword ptr [esp+0Ch] 1 +
mov [esp+4] ebx +
mov [esp] edi +
mov [esp+8] eax +
mov eax [esp+1Ch] +
call eax  +
test eax eax +
jz loc_47F186  +
mov ecx [ebx+8Ch] +
xor edx edx +
mov eax [ebx+24h] +
mov ebp [ebx+44h] +
div  dword ptr [ecx+28h] +
test eax eax +
jle loc_47F15D  +
mov esi [esp+44h] +
xor ecx ecx +
jmp loc_47F142  +
mov ebp edx +
add ecx 1 +
add esi 4 +
cmp eax ecx +
lea edx [ebp+10h] +
mov [esi-4] ebp +
jnz loc_47F140  +
mov ecx [esp+44h] +
lea esi [ecx+eax*4] +
mov [esp+44h] esi +
mov ebx [ebx+0Ch] +
add [esp+18h] eax +
test ebx ebx +
jnz loc_47F0DB  +
lea esi [esi+0] +
mov eax [esp+44h] +
mov dword ptr [eax] 0 +
mov eax [esp+18h] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 0FFFFFFFFh +
jmp loc_47F17E  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov edi [esp+7Ch+arg_0] +
mov ebx [edi+0A0h] +
mov esi [ebx+91Ch] +
test esi esi +
jz loc_47F230  +
mov ecx [ebx+1B8h] +
test ecx ecx +
jz loc_47F1D7  +
mov eax [ebx+1B0h] +
cmp eax 0Fh +
ja loc_47F362  +
xor ebp ebp +
mov [esp+7Ch+var_78] edi +
mov [esp+7Ch+var_7C] offset aB_gnu_version_ +
call off_4BFA04  +
mov [esp+7Ch+var_7C] 11h +
call sub_44BAF0  +
mov eax [edi+0A0h] +
mov dword ptr [eax+244h] 0 +
mov eax [edi+0A0h] +
mov dword ptr [eax+23Ch] 0 +
test ebp ebp +
jz loc_47F222  +
mov [esp+7Ch+var_7C] ebp +
call free  +
add esp 7Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor esi esi +
mov eax [ebx+918h] +
test eax eax +
jz loc_47F296  +
mov eax [ebx+1F0h] +
test eax eax +
jz loc_47F255  +
mov eax [ebx+1E8h] +
cmp eax 13h +
ja loc_47F570  +
xor ebp ebp +
mov [esp+7Ch+var_78] edi +
mov [esp+7Ch+var_7C] offset aB_gnu_versio_0 +
call off_4BFA04  +
mov [esp+7Ch+var_7C] 11h +
call sub_44BAF0  +
mov eax [edi+0A0h] +
mov dword ptr [eax+240h] 0 +
mov eax [edi+0A0h] +
mov dword ptr [eax+238h] 0 +
jmp loc_47F216  +
mov ebp [esp+7Ch+arg_4] +
test ebp ebp +
jz loc_47F355  +
cmp esi 3 +
mov eax 3 +
lea edx [esi+1] +
cmovnb eax edx +
mov [esp+7Ch+var_74] 28h +
mov esi eax +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_7C] edi +
call sub_458C50  +
mov [ebx+240h] eax +
mov eax [edi+0A0h] +
mov ebx [eax+240h] +
test ebx ebx +
jz loc_47F222  +
mov [eax+238h] esi +
mov eax [edi+0A0h] +
lea edx [esi+esi*4] +
mov ecx 1 +
mov eax [eax+240h] +
lea ebx [eax+edx*8-28h] +
xor edx edx +
mov eax 1 +
mov [ebx] ax +
mov [ebx+2] dx +
mov [ebx+4] si +
mov [ebx+6] cx +
mov [ebx+14h] edi +
mov [esp+7Ch+var_7C] edi +
call sub_4694F0  +
test eax eax +
mov [ebx+18h] eax +
jz loc_47F670  +
mov dword ptr [ebx+1Ch] 0 +
mov [esp+7Ch+var_78] 10h +
mov [esp+7Ch+var_7C] edi +
call sub_458B60  +
test eax eax +
mov [ebx+20h] eax +
jz loc_47F670  +
mov edx [ebx+18h] +
mov [eax+8] edx +
add esp 7Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+7Ch+var_7C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_47F1F6  +
mov eax [ebx+1A8h] +
mov edx [ebx+1ACh] +
mov [esp+7Ch+var_70] 0 +
mov [esp+7Ch+var_7C] edi +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_74] edx +
call sub_46FCE0  +
test eax eax +
jnz loc_47F1F6  +
mov eax [ebx+1B0h] +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_7C] ebp +
mov [esp+7Ch+var_78] eax +
call sub_46FAD0  +
cmp eax [ebx+1B0h] +
jnz loc_47F1F6  +
mov eax [ebx+1B8h] +
mov esi [edi+0A0h] +
mov [esp+7Ch+var_74] 20h +
mov [esp+7Ch+var_7C] edi +
mov [esp+7Ch+var_78] eax +
call sub_458C50  +
mov [esi+244h] eax +
mov eax [edi+0A0h] +
mov ecx [eax+244h] +
test ecx ecx +
mov [esp+7Ch+var_68] ecx +
jz loc_47F1FC  +
mov edx [ebx+1B0h] +
lea edx [ebp+edx-10h] +
mov [esp+7Ch+var_60] edx +
mov edx [ebx+1B8h] +
test edx edx +
jz loc_47FA33  +
mov [esp+7Ch+var_5C] ebp +
xor esi esi +
mov [esp+7Ch+var_58] 0 +
mov [esp+7Ch+var_54] ebp +
mov [esp+7Ch+var_64] ebx +
mov [esp+7Ch+arg_0] edi +
mov eax [esp+7Ch+var_5C] +
mov edi [esp+7Ch+var_68] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_7C] eax +
call sub_475440  +
mov ecx [esp+7Ch+arg_0] +
mov eax [esp+7Ch+var_64] +
mov [edi+10h] ecx +
mov ecx [edi+4] +
mov edx [eax+1B4h] +
test ecx ecx +
jnz loc_47F703  +
mov eax [esp+7Ch+var_68] +
mov dword ptr [eax+14h] offset unk_5017F2 +
mov ecx [esp+7Ch+var_68] +
movzx eax word ptr [ecx+2] +
test ax ax +
jnz loc_47F723  +
mov dword ptr [ecx+18h] 0 +
mov eax [esp+7Ch+var_68] +
mov ecx [esp+7Ch+var_60] +
mov edx [esp+7Ch+var_5C] +
mov ebp [eax+8] +
sub ecx edx +
mov [esp+7Ch+var_50] ecx +
cmp ebp ecx +
ja loc_47F55D  +
add ebp edx +
mov ebx [eax+18h] +
cmp word ptr [eax+2] 0 +
jz loc_47F685  +
xor edi edi +
jmp loc_47F51E  +
mov dword ptr [ebx+10h] offset unk_5017F2 +
movzx eax word ptr [ebx+6] +
mov dword ptr [ebx+14h] 0 +
cmp esi eax +
cmovb esi eax +
mov eax [ebx+0Ch] +
add edi 1 +
test eax eax +
jz loc_47F67D  +
mov ecx [esp+7Ch+var_68] +
movzx edx word ptr [ecx+2] +
cmp edi edx +
jnb loc_47F507  +
lea ecx [ebx+18h] +
mov [ebx+14h] ecx +
mov ecx [esp+7Ch+var_60] +
sub ecx ebp +
cmp eax ecx +
ja loc_47F55D  +
add ebp eax +
add ebx 18h +
cmp edi edx +
jnb loc_47F685  +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_74] ebx +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] eax +
call sub_475530  +
mov ecx [ebx+8] +
mov eax [esp+7Ch+var_64] +
test ecx ecx +
mov edx [eax+1B4h] +
jz loc_47F4D0  +
mov eax [esp+7Ch+arg_0] +
call loc_475840  +
test eax eax +
mov [ebx+10h] eax +
jnz loc_47F4D7  +
mov ebp [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
jmp loc_47F1D9  +
mov [esp+7Ch+var_7C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_47F670  +
mov eax [ebx+1E0h] +
mov edx [ebx+1E4h] +
mov [esp+7Ch+var_70] 0 +
mov [esp+7Ch+var_7C] edi +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_74] edx +
call sub_46FCE0  +
test eax eax +
jnz loc_47F274  +
mov eax [ebx+1E8h] +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_7C] ebp +
mov [esp+7Ch+var_78] eax +
call sub_46FAD0  +
cmp eax [ebx+1E8h] +
mov [esp+7Ch+var_5C] eax +
jnz loc_47F274  +
mov eax [esp+7Ch+var_5C] +
lea eax [ebp+eax-14h] +
mov [esp+7Ch+var_60] eax +
mov eax [ebx+1F0h] +
test eax eax +
jz loc_47FA26  +
xor edx edx +
lea eax [esp+7Ch+var_34] +
mov [esp+7Ch+var_54] ebp +
mov [esp+7Ch+var_50] esi +
mov esi ebp +
xor ebp ebp +
mov [esp+7Ch+var_64] ebx +
mov ebx edx +
mov [esp+7Ch+var_58] 0 +
mov [esp+7Ch+var_68] eax +
jmp loc_47F647  +
movzx eax ax +
cmp ebp eax +
cmovb ebp eax +
mov eax [esp+7Ch+var_24] +
test eax eax +
jz loc_47F9DF  +
mov ecx [esp+7Ch+var_60] +
sub ecx esi +
cmp eax ecx +
ja loc_47F666  +
add esi eax +
mov eax [esp+7Ch+var_64] +
add ebx 1 +
cmp [eax+1F0h] ebx +
jbe loc_47F763  +
mov eax [esp+7Ch+var_68] +
mov [esp+7Ch+var_78] esi +
mov [esp+7Ch+var_7C] edi +
mov [esp+7Ch+var_74] eax +
call sub_475280  +
movzx eax [esp+7Ch+var_30] +
and ax 7FFFh +
jnz loc_47F614  +
mov ebp [esp+7Ch+var_54] +
jmp loc_47F257  +
xor ebp ebp +
mov eax [edi+0A0h] +
jmp loc_47F27A  +
mov eax [esp+7Ch+var_68] +
mov [eax+2] di +
mov eax [esp+7Ch+var_68] +
mov dword ptr [eax+1Ch] 0 +
mov eax [eax+0Ch] +
test eax eax +
jz loc_47F6D5  +
mov ecx [esp+7Ch+var_64] +
add [esp+7Ch+var_58] 1 +
mov edx [ecx+1B8h] +
cmp [esp+7Ch+var_58] edx +
jnb loc_47F6B8  +
mov edi [esp+7Ch+var_68] +
mov ecx edi +
add ecx 20h +
mov [edi+1Ch] ecx +
cmp [esp+7Ch+var_50] eax +
jb loc_47F55D  +
add [esp+7Ch+var_5C] eax +
add [esp+7Ch+var_68] 20h +
cmp [esp+7Ch+var_58] edx +
jb loc_47F439  +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+var_54] +
mov eax [edi+0A0h] +
mov edx [esp+7Ch+var_58] +
mov [eax+23Ch] edx +
mov [esp+7Ch+var_7C] ebp +
call free  +
mov ebx [edi+0A0h] +
jmp loc_47F232  +
mov eax [esp+7Ch+arg_0] +
call loc_475840  +
mov edx [esp+7Ch+var_68] +
test eax eax +
mov [edx+14h] eax +
jnz loc_47F482  +
jmp loc_47F55D  +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_74] 18h +
mov [esp+7Ch+var_7C] eax +
call sub_458B00  +
mov edx [esp+7Ch+var_68] +
test eax eax +
mov [edx+18h] eax +
jnz loc_47F49A  +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+var_54] +
mov eax [edi+0A0h] +
jmp loc_47F1FC  +
mov [esp+7Ch+var_58] ebp +
mov esi [esp+7Ch+var_50] +
mov ebx eax +
mov ebp [esp+7Ch+var_54] +
mov ecx [esp+7Ch+arg_4] +
test ecx ecx +
jz loc_47F78D  +
cmp esi [esp+7Ch+var_58] +
ja loc_47F786  +
mov esi [esp+7Ch+var_58] +
add esi 1 +
mov [esp+7Ch+var_58] esi +
mov eax [esp+7Ch+var_58] +
mov edx [edi+0A0h] +
mov [esp+7Ch+var_74] 28h +
mov [esp+7Ch+var_7C] edi +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_68] edx +
call sub_458C50  +
mov edx [esp+7Ch+var_68] +
mov [edx+240h] eax +
mov eax [edi+0A0h] +
mov edx [eax+240h] +
test edx edx +
jz loc_47F27A  +
mov ecx [esp+7Ch+var_58] +
mov [eax+238h] ecx +
mov eax [edi+0A0h] +
mov eax [eax+240h] +
mov [esp+7Ch+var_4C] eax +
mov eax [ebx+1F0h] +
test eax eax +
jz loc_47F9C4  +
lea eax [esp+7Ch+var_34] +
mov [esp+7Ch+var_68] eax +
mov eax [esp+7Ch+var_5C] +
mov [esp+7Ch+var_50] ebp +
mov [esp+7Ch+var_44] 0 +
mov [esp+7Ch+var_54] ebp +
lea eax [ebp+eax-8] +
mov [esp+7Ch+var_60] eax +
mov [esp+7Ch+var_40] esi +
mov [esp+7Ch+var_5C] ebx +
mov eax [esp+7Ch+var_50] +
mov esi [esp+7Ch+var_68] +
mov [esp+7Ch+var_7C] edi +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_74] esi +
call sub_475280  +
movzx eax [esp+7Ch+var_30] +
and ax 7FFFh +
jz loc_47F666  +
mov edx [esp+7Ch+var_4C] +
movzx eax ax +
lea eax [eax+eax*4] +
lea eax [edx+eax*8-28h] +
mov ecx eax +
mov [esp+7Ch+var_64] eax +
mov eax [esi] +
mov [ecx] eax +
mov eax [esi+4] +
mov [ecx+4] eax +
mov eax [esi+8] +
mov [ecx+8] eax +
mov eax [esi+0Ch] +
mov [ecx+0Ch] eax +
mov eax [esi+10h] +
mov [ecx+14h] edi +
mov [ecx+10h] eax +
movzx eax word ptr [ecx+6] +
test ax ax +
jnz loc_47F9F4  +
mov dword ptr [ecx+20h] 0 +
mov ecx [esp+7Ch+var_64] +
mov eax [esp+7Ch+var_60] +
mov edx [esp+7Ch+var_50] +
mov esi [ecx+0Ch] +
sub eax edx +
cmp esi eax +
ja loc_47F666  +
mov eax ecx +
mov ecx [ecx+20h] +
add esi edx +
xor ebp ebp +
cmp word ptr [eax+6] 0 +
mov [esp+7Ch+var_48] ecx +
lea ebx [ecx+10h] +
jnz loc_47F8FF  +
jmp loc_47F94E  +
mov dword ptr [ebx-8] offset unk_5017F2 +
add ebp 1 +
test eax eax +
mov dword ptr [ebx-4] 0 +
jz loc_47F946  +
mov ecx [esp+7Ch+var_64] +
movzx edx word ptr [ecx+6] +
cmp ebp edx +
jnb loc_47F8E8  +
mov [ebx-4] ebx +
mov ecx [esp+7Ch+var_60] +
sub ecx esi +
cmp ecx eax +
jb loc_47F666  +
add esi eax +
add ebx 10h +
cmp ebp edx +
jnb loc_47F94E  +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+7Ch+var_7C] esi +
call eax  +
lea edx [esi+4] +
mov [ebx-10h] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+7Ch+var_7C] edx +
call eax  +
mov ecx [ebx-10h] +
mov edx [esp+7Ch+var_5C] +
test ecx ecx +
mov edx [edx+1ECh] +
mov [ebx-0Ch] eax +
jz loc_47F8C4  +
mov eax edi +
call loc_475840  +
test eax eax +
mov [ebx-8] eax +
jz loc_47F666  +
mov eax [ebx-0Ch] +
jmp loc_47F8CB  +
mov eax [esp+7Ch+var_64] +
mov [eax+6] bp +
mov eax [esp+7Ch+var_64] +
cmp word ptr [eax+6] 0 +
mov dword ptr [eax+18h] 0 +
jz loc_47F96B  +
mov ecx eax +
mov eax [eax+20h] +
mov eax [eax+8] +
mov [ecx+18h] eax +
mov eax [esp+7Ch+var_64] +
mov edx [eax+10h] +
mov dword ptr [eax+1Ch] 0 +
test edx edx +
jz loc_47F9BC  +
sub eax [esp+7Ch+var_4C] +
sar eax 3 +
imul eax eax +
add eax 1 +
cmp [esp+7Ch+var_58] eax +
jbe loc_47F99F  +
mov ecx [esp+7Ch+var_64] +
mov eax ecx +
add eax 28h +
mov [ecx+1Ch] eax +
mov eax [esp+7Ch+var_5C] +
add [esp+7Ch+var_44] 1 +
mov ecx [esp+7Ch+var_44] +
add [esp+7Ch+var_50] edx +
cmp [eax+1F0h] ecx +
ja loc_47F821  +
mov ebp [esp+7Ch+var_54] +
mov esi [esp+7Ch+var_40] +
mov [esp+7Ch+var_7C] ebp +
call free  +
cmp [esp+7Ch+arg_4] 0 +
jz loc_47F355  +
jmp loc_47F2E9  +
mov [esp+7Ch+var_58] ebp +
mov esi [esp+7Ch+var_50] +
mov ebx [esp+7Ch+var_64] +
mov ebp [esp+7Ch+var_54] +
jmp loc_47F771  +
mov [esp+7Ch+var_74] 10h +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_7C] edi +
call sub_458B00  +
mov edx [esp+7Ch+var_64] +
test eax eax +
mov [edx+20h] eax +
jnz loc_47F88F  +
mov ebp [esp+7Ch+var_54] +
mov eax [edi+0A0h] +
jmp loc_47F27A  +
mov [esp+7Ch+var_58] 0 +
jmp loc_47F771  +
mov [esp+7Ch+var_58] 0 +
xor esi esi +
jmp loc_47F6E6  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov esi [esp+70h] +
mov ebp [esp+74h] +
mov dword ptr [esp+30h] 0 +
mov eax [esi+0A0h] +
mov ebx [eax+44h] +
test ebx ebx +
jz loc_47FC68  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 11h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aProgramHeader +
call fwrite  +
mov eax [esi+0A0h] +
mov eax [eax+30h] +
test eax eax +
mov [esp+1Ch] eax +
jz loc_47FC68  +
xor edi edi +
jmp loc_47FAD1  +
mov [esp+4] ebp +
add edi 1 +
add ebx 20h +
mov dword ptr [esp] 0Ah +
call fputc  +
cmp edi [esp+1Ch] +
jz loc_47FC68  +
mov eax [ebx] +
mov [esp+20h] eax +
call sub_473E20  +
test eax eax +
jz loc_47FDC6  +
mov [esp+8] eax +
mov dword ptr [esp+4] offset a8sOff0x +
mov [esp] ebp +
call fprintf  +
mov eax [ebx+8] +
mov [esp+4] ebp +
mov [esp] esi +
mov [esp+8] eax +
call sub_44C420  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 9 +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aVaddr0x +
call fwrite  +
mov eax [ebx+0Ch] +
mov [esp+4] ebp +
mov [esp] esi +
mov [esp+8] eax +
call sub_44C420  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 9 +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aPaddr0x +
call fwrite  +
mov eax [ebx+10h] +
mov [esp+4] ebp +
mov [esp] esi +
mov [esp+8] eax +
call sub_44C420  +
mov eax [ebx+1Ch] +
mov [esp] eax +
call sub_45A590  +
mov dword ptr [esp+4] offset aAlign2U +
mov [esp] ebp +
mov [esp+8] eax +
call fprintf  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 12h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aFilesz0x +
call fwrite  +
mov eax [ebx+14h] +
mov [esp+4] ebp +
mov [esp] esi +
mov [esp+8] eax +
call sub_44C420  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 9 +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aMemsz0x +
call fwrite  +
mov eax [ebx+18h] +
mov [esp+4] ebp +
mov [esp] esi +
mov [esp+8] eax +
call sub_44C420  +
mov eax [ebx+4] +
mov dword ptr [esp+4] offset aFlagsCCC +
mov [esp] ebp +
mov edx eax +
and edx 1 +
cmp edx 1 +
mov edx eax +
sbb ecx ecx +
and edx 2 +
and ecx 0FFFFFFB5h +
add ecx 78h +
cmp edx 1 +
sbb edx edx +
and eax 4 +
and edx 0FFFFFFB6h +
add edx 77h +
cmp eax 1 +
sbb eax eax +
and eax 0FFFFFFBBh +
add eax 72h +
mov [esp+10h] ecx +
mov [esp+0Ch] edx +
mov [esp+8] eax +
call fprintf  +
mov eax [ebx+4] +
and eax 0FFFFFFF8h +
jz loc_47FAB1  +
mov [esp+8] eax +
mov dword ptr [esp+4] offset aLx_0 +
mov [esp] ebp +
call fprintf  +
jmp loc_47FAB1  +
***
mov dword ptr [esp+4] offset a_dynamic_0 +
mov [esp] esi +
call sub_44D4B0  +
test eax eax +
mov edi eax +
jz loc_47FE00  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 12h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aDynamicSection +
call fwrite  +
lea eax [esp+30h] +
mov [esp+8] eax +
mov [esp+4] edi +
mov [esp] esi +
call sub_44DE10  +
mov ebx [esp+30h] +
test eax eax +
jnz loc_47FCD4  +
test ebx ebx +
jz loc_47FCCA  +
mov [esp] ebx +
call free  +
add esp 5Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] edi +
mov [esp] esi +
call sub_4799A0  +
cmp eax 0FFFFFEFFh +
jz loc_47FE8A  +
mov edx [esi+0A0h] +
mov ebx [esp+30h] +
mov edx [edx+40h] +
mov eax [edx+eax*4] +
mov eax [eax+1Ch] +
mov [esp+2Ch] eax +
mov eax [esi+4] +
mov edx [eax+1B0h] +
mov eax [edx+174h] +
movzx ecx byte ptr [eax+6] +
mov eax [eax+30h] +
mov [esp+1Ch] ecx +
mov [esp+24h] eax +
mov eax [edi+24h] +
cmp ecx eax +
ja loc_47FCBE  +
add eax ebx +
mov [esp+20h] eax +
sub [esp+20h] ecx +
cmp ebx [esp+20h] +
ja loc_47FDEF  +
mov [esp+28h] edx +
lea edi [esp+34h] +
mov eax [esp+24h] +
mov [esp+8] edi +
mov [esp+4] ebx +
mov [esp] esi +
call eax  +
mov edx [esp+34h] +
test edx edx +
jz loc_47FDEB  +
cmp edx 1Dh +
jz loc_480418  +
ja loc_47FE93  +
cmp edx 0Eh +
jz loc_48040E  +
nop   +
lea esi [esi+0] +
ja loc_47FEF0  +
cmp edx 7 +
jz loc_480454  +
nop   +
ja loc_48010E  +
cmp edx 3 +
jz loc_48044A  +
nop   +
jbe loc_4803B8  +
cmp edx 5 +
mov eax offset aStrtab +
jz loc_480134  +
mov eax offset aHash +
mov edx offset aSymtab +
cmova eax edx +
jmp loc_480134  +
mov eax [esp+20h] +
mov dword ptr [esp+4] offset a0xLx +
mov [esp+8] eax +
lea eax [esp+3Ch] +
mov [esp] eax +
call sprintf  +
lea eax [esp+3Ch] +
jmp loc_47FAE4  +
***
mov ebx [esp+30h] +
mov [esp] ebx +
call free  +
mov dword ptr [esp+30h] 0 +
nop   +
mov eax [esi+0A0h] +
mov edx [eax+918h] +
test edx edx +
jz loc_47FE1A  +
mov edi [eax+240h] +
test edi edi +
jz loc_47FE51  +
mov ebx [eax+91Ch] +
test ebx ebx +
jnz loc_47FE47  +
test edx edx +
jnz loc_480025  +
mov eax [eax+91Ch] +
test eax eax +
jnz loc_47FF7D  +
add esp 5Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [eax+244h] +
test ecx ecx +
jnz loc_47FE24  +
mov dword ptr [esp+4] 0 +
mov [esp] esi +
call sub_47F1A0  +
test eax eax +
jz loc_47FCCA  +
mov eax [esi+0A0h] +
mov edx [eax+918h] +
jmp loc_47FE24  +
***
mov edx [esp+2Ch] +
mov eax esi +
call loc_475840  +
test eax eax +
jnz loc_480339  +
mov ebx [esp+30h] +
jmp loc_47FCBE  +
***
cmp edx 6FFFFEFCh +
jz loc_480422  +
ja loc_47FF36  +
cmp edx 6FFFFDFBh +
jz loc_480440  +
jbe loc_4801F0  +
cmp edx 6FFFFDFFh +
jz loc_480436  +
ja loc_480286  +
cmp edx 6FFFFDFDh +
mov eax offset aPosflag_1 +
jz loc_480134  +
mov eax offset aFeature +
mov edx offset aSyminsz +
cmova eax edx +
jmp loc_480134  +
cmp edx 15h +
jz loc_480468  +
jbe loc_480235  +
cmp edx 19h +
jz loc_48045E  +
nop   +
lea esi [esi+0] +
ja loc_480266  +
cmp edx 17h +
mov eax offset aJmprel +
jz loc_480134  +
mov eax offset aTextrel +
mov edx offset aBind_now +
cmova eax edx +
jmp loc_480134  +
cmp edx 6FFFFFFBh +
jz loc_480490  +
jbe loc_4801AC  +
cmp edx 6FFFFFFFh +
jz loc_480486  +
ja loc_4802EF  +
cmp edx 6FFFFFFDh +
mov eax offset aVerdefnum +
jz loc_480134  +
mov eax offset aVerdef +
mov ecx offset aVerneed +
cmova eax ecx +
jmp loc_480134  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 15h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aVersionReferen +
call fwrite  +
mov eax [esi+0A0h] +
mov edi [eax+244h] +
test edi edi +
jz loc_47FE3A  +
mov esi offset aCorrupt +
mov eax [edi+14h] +
mov dword ptr [esp+4] offset aRequiredFromS +
mov [esp] ebp +
test eax eax +
cmovz eax esi +
mov [esp+8] eax +
call fprintf  +
mov ebx [edi+18h] +
test ebx ebx +
jz loc_480019  +
lea esi [esi+0] +
mov eax [ebx+10h] +
mov edx [ebx] +
test eax eax +
cmovz eax esi +
mov [esp+14h] eax +
movzx eax word ptr [ebx+6] +
mov [esp+10h] eax +
movzx eax word ptr [ebx+4] +
mov [esp+8] edx +
mov dword ptr [esp+4] offset a0x8_8lx0x2_2x2 +
mov [esp] ebp +
mov [esp+0Ch] eax +
call fprintf  +
mov ebx [ebx+14h] +
test ebx ebx +
jnz loc_47FFE0  +
mov edi [edi+1Ch] +
test edi edi +
jnz loc_47FFB6  +
jmp loc_47FE3A  +
***
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 16h +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset aVersionDefinit +
call fwrite  +
mov eax [esi+0A0h] +
mov ebx [eax+240h] +
test ebx ebx +
jz loc_47FE2C  +
lea esi [esi+0] +
mov eax [ebx+18h] +
mov ecx offset aCorrupt +
mov edx [ebx+8] +
test eax eax +
cmovz eax ecx +
mov [esp+14h] eax +
mov [esp+10h] edx +
movzx eax word ptr [ebx+2] +
mov [esp+0Ch] eax +
movzx eax word ptr [ebx+4] +
mov dword ptr [esp+4] offset aD0x2_2x0x8_8lx +
mov [esp] ebp +
mov [esp+8] eax +
call fprintf  +
mov eax [ebx+20h] +
test eax eax +
jz loc_4800F8  +
mov edx [eax+0Ch] +
test edx edx +
jz loc_4800F8  +
mov [esp+4] ebp +
mov dword ptr [esp] 9 +
call fputc  +
mov eax [ebx+20h] +
mov edi [eax+0Ch] +
test edi edi +
jz loc_4800E8  +
mov eax [edi+8] +
mov ecx offset aCorrupt +
mov dword ptr [esp+4] offset asc_50254B +
mov [esp] ebp +
test eax eax +
cmovz eax ecx +
mov [esp+8] eax +
call fprintf  +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_4800C0  +
mov [esp+4] ebp +
mov dword ptr [esp] 0Ah +
call fputc  +
mov ebx [ebx+1Ch] +
test ebx ebx +
jnz loc_480060  +
mov eax [esi+0A0h] +
jmp loc_47FE2C  +
***
cmp edx 0Ah +
jz loc_48047C  +
jbe loc_480397  +
cmp edx 0Ch +
mov eax offset aInit_0 +
jz loc_480134  +
mov eax offset aSyment +
mov edx offset aFini +
cmova eax edx +
mov [esp+8] eax +
mov dword ptr [esp+4] offset a20s +
mov [esp] ebp +
call fprintf  +
mov [esp+0Ch] ebp +
mov dword ptr [esp+8] 2 +
mov dword ptr [esp+4] 1 +
mov dword ptr [esp] offset a0x_1 +
call fwrite  +
mov eax [esp+38h] +
mov [esp+4] ebp +
mov [esp] esi +
mov [esp+8] eax +
call sub_44C420  +
mov [esp+4] ebp +
mov dword ptr [esp] 0Ah +
call fputc  +
add ebx [esp+1Ch] +
cmp ebx [esp+20h] +
ja loc_47FDEB  +
mov eax [esi+4] +
mov eax [eax+1B0h] +
mov [esp+28h] eax +
jmp loc_47FD43  +
***
cmp edx 6FFFFEFFh +
jz loc_480404  +
jbe loc_480370  +
cmp edx 6FFFFFF9h +
mov eax offset aRelacount +
jz loc_480134  +
mov eax offset aRelcount +
ja loc_480134  +
cmp edx 6FFFFFF0h +
mov eax offset aVersym +
jz loc_480134  +
jmp loc_4802A9  +
cmp edx 21h +
jz loc_4803FA  +
lea esi [esi+0] +
jbe loc_48034A  +
cmp edx 6FFFFDF9h +
mov eax offset aPltpadsz +
jz loc_480134  +
mov eax offset aMoveent +
ja loc_480134  +
cmp edx 6FFFFDF8h +
mov eax offset aChecksum +
jz loc_480134  +
jmp loc_4802A9  +
cmp edx 11h +
jz loc_48042C  +
nop   +
jbe loc_4803D4  +
cmp edx 13h +
mov eax offset aRelent +
jz loc_480134  +
mov eax offset aRelsz +
mov edx offset aPltrel +
cmova eax edx +
jmp loc_480134  +
***
cmp edx 1Bh +
mov eax offset aInit_arraysz +
jz loc_480134  +
mov eax offset aFini_array +
mov edx offset aFini_arraysz +
cmova eax edx +
jmp loc_480134  +
***
cmp edx 6FFFFEFAh +
jz loc_4803F0  +
ja loc_480472  +
cmp edx 6FFFFEF5h +
mov eax offset aGnu_hash +
jz loc_480134  +
mov eax [esp+28h] +
mov ecx [eax+0E8h] +
mov eax offset unk_5017F2 +
test ecx ecx +
jz loc_4802C1  +
mov [esp] edx +
call ecx  +
cmp byte ptr [eax] 0 +
jnz loc_480134  +
mov eax [esp+34h] +
mov dword ptr [esp+4] offset a0xLx +
mov [esp+8] eax +
lea eax [esp+3Ch] +
mov [esp] eax +
call sprintf  +
lea eax [esp+3Ch] +
jmp loc_480134  +
***
cmp edx 7FFFFFFEh +
jz loc_4804A4  +
cmp edx 7FFFFFFFh +
jz loc_48049A  +
cmp edx 7FFFFFFDh +
jnz loc_4802A9  +
mov eax offset aAuxiliary +
mov [esp+8] eax +
mov dword ptr [esp+4] offset a20s +
mov [esp] ebp +
call fprintf  +
mov ecx [esp+38h] +
mov eax offset unk_5017F2 +
test ecx ecx +
jnz loc_47FE77  +
mov [esp+4] ebp +
mov [esp] eax +
call fputs  +
jmp loc_48017C  +
***
cmp edx 1Eh +
mov eax offset aFlags_0 +
jz loc_480134  +
cmp edx 20h +
mov eax offset aPreinit_array +
jz loc_480134  +
jmp loc_4802A9  +
***
cmp edx 6FFFFEFDh +
mov eax offset aPltpad +
jz loc_480134  +
cmp edx 6FFFFEFEh +
mov eax offset aMovetab +
jz loc_480134  +
jmp loc_4802A9  +
***
cmp edx 8 +
mov eax offset aRelasz +
jz loc_480134  +
cmp edx 9 +
mov eax offset aRelaent +
jz loc_480134  +
jmp loc_4802A9  +
***
cmp edx 1 +
jz loc_4804AE  +
cmp edx 2 +
mov eax offset aPltrelsz +
jz loc_480134  +
jmp loc_4802A9  +
***
cmp edx 0Fh +
jz loc_4804B8  +
cmp edx 10h +
mov eax offset aSymbolic +
jz loc_480134  +
jmp loc_4802A9  +
***
mov eax offset aConfig +
jmp loc_480314  +
***
mov eax offset aPreinit_arrays +
jmp loc_480134  +
***
mov eax offset aSyminfo +
jmp loc_480134  +
***
mov eax offset aSoname +
jmp loc_480314  +
***
mov eax offset aRunpath +
jmp loc_480314  +
***
mov eax offset aAudit +
jmp loc_480314  +
***
mov eax offset off_5023F8 +
jmp loc_480134  +
***
mov eax offset aSyminent +
jmp loc_480134  +
***
mov eax offset aMovesz +
jmp loc_480134  +
***
mov eax offset aPltgot +
jmp loc_480134  +
***
mov eax offset aRela +
jmp loc_480134  +
***
mov eax offset aInit_array +
jmp loc_480134  +
***
mov eax offset aDebug +
jmp loc_480134  +
***
mov eax offset aDepaudit +
jmp loc_480314  +
***
mov eax offset aStrsz +
jmp loc_480134  +
***
mov eax offset aVerneednum +
jmp loc_480134  +
***
mov eax offset aFlags_1 +
jmp loc_480134  +
***
mov eax offset aFilter +
jmp loc_480314  +
***
mov eax offset aUsed +
jmp loc_480134  +
***
mov eax offset aNeeded +
jmp loc_480314  +
***
mov eax offset aRpath +
jmp loc_480314  +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+4] 34h +
mov [esp] ebx +
call sub_458B60  +
test eax eax +
jz loc_4804EE  +
mov [eax] ebx +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
mov edx [esp+10h] +
movzx ecx byte ptr [edx] +
cmp cl 2Eh +
jz loc_480593  +
cmp cl 5Fh +
jz loc_480588  +
xor eax eax +
cmp cl 4Ch +
jnz loc_480590  +
movzx ecx byte ptr [edx+1] +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jz loc_480590  +
lea esi [edx+2] +
movzx edx byte ptr [edx+2] +
test dl dl +
jz loc_480590  +
mov ecx esi +
jmp loc_48056B  +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_48058E  +
add ecx 1 +
movzx edx byte ptr [ecx] +
test dl dl +
jz loc_480590  +
lea ebx [edx-1] +
cmp bl 1 +
ja loc_480557  +
cmp dl 1 +
mov eax 1 +
jnz loc_480557  +
cmp ecx esi +
jnz loc_480557  +
mov eax 1 +
jmp loc_480590  +
cmp byte ptr [edx+1] 2Eh +
jz loc_4805A6  +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
movzx eax byte ptr [edx+1] +
cmp al 4Ch +
jz loc_480581  +
cmp al 2Eh +
setz al  +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
***
cmp byte ptr [edx+2] 4Ch +
jnz loc_48058E  +
cmp byte ptr [edx+3] 5Fh +
jnz loc_48058E  +
jmp loc_480581  +
***
sub esp 1Ch +
mov dword ptr [esp+8] offset a_bfd_elf_get_l +
mov dword ptr [esp+4] 1FE5h +
mov dword ptr [esp] offset a____Binutil_15 +
call sub_44BA70  +
nop   +
push ebx  +
mov edx [esp+8] +
mov eax [esp+0Ch] +
mov ebx [esp+10h] +
mov ecx [edx+4] +
mov ecx [ecx+1B0h] +
mov ecx [ecx] +
cmp ecx eax +
jz loc_480604  +
test eax eax +
jz loc_480604  +
test ecx ecx +
jnz loc_480616  +
mov [esp+10h] ebx +
mov [esp+0Ch] eax +
mov [esp+8] edx +
pop ebx  +
jmp sub_453750  +
***
xor eax eax +
pop ebx  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebp [esp+60h] +
mov edi [esp+64h] +
mov esi [esp+70h] +
mov ebx [esp+74h] +
mov eax [ebp+0A0h] +
mov dword ptr [esp+28h] 0 +
mov dword ptr [esp+24h] offset off_506020 +
mov [esp+18h] ebx +
add eax 230h +
mov [esp+2Ch] eax +
mov eax [esp+7Ch] +
mov [esp+14h] esi +
mov dword ptr [esp+8] 0 +
mov [esp+4] edi +
mov [esp+20h] eax +
mov eax [esp+78h] +
mov [esp] ebp +
mov [esp+1Ch] eax +
mov eax [esp+6Ch] +
mov [esp+10h] eax +
mov eax [esp+68h] +
mov [esp+0Ch] eax +
call sub_496250  +
test eax eax +
jz loc_4806B0  +
mov ecx [ebx] +
test ecx ecx +
jz loc_480772  +
mov eax 1 +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+78h] +
mov [esp+14h] ebx +
mov [esp+10h] esi +
mov [esp+4] edi +
mov [esp+18h] eax +
mov eax [esp+6Ch] +
mov [esp] ebp +
mov [esp+0Ch] eax +
mov eax [esp+68h] +
mov [esp+8] eax +
call sub_4977A0  +
test eax eax +
jnz loc_480696  +
mov eax [ebp+0A0h] +
mov [esp+18h] ebx +
mov [esp+14h] esi +
mov [esp+4] edi +
add eax 228h +
mov [esp+20h] eax +
mov eax [esp+78h] +
mov [esp] ebp +
mov [esp+1Ch] eax +
lea eax [esp+3Ch] +
mov [esp+10h] eax +
mov eax [esp+6Ch] +
mov [esp+0Ch] eax +
mov eax [esp+68h] +
mov [esp+8] eax +
call sub_45AD70  +
test eax eax +
jz loc_4807D0  +
mov ecx [esp+3Ch] +
test ecx ecx +
jnz loc_4807B0  +
test edi edi +
jz loc_4807D0  +
mov eax [esp+6Ch] +
mov [esp+14h] ebx +
mov [esp+10h] esi +
mov [esp+4] edi +
mov [esp+0Ch] eax +
mov eax [esp+68h] +
mov [esp] ebp +
mov [esp+8] eax +
call sub_496040  +
test eax eax +
jz loc_4807D0  +
mov eax [esp+78h] +
mov dword ptr [eax] 0 +
jmp loc_4806A0  +
***
mov edx [esi] +
xor eax eax +
mov [esp+14h] ebx +
mov [esp+4] edi +
mov [esp] ebp +
test edx edx +
cmovz eax esi +
mov [esp+10h] eax +
mov eax [esp+6Ch] +
mov [esp+0Ch] eax +
mov eax [esp+68h] +
mov [esp+8] eax +
call sub_496040  +
add esp 4Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [ebx] +
test edx edx +
jnz loc_4806A0  +
mov eax [esp+78h] +
mov eax [eax] +
test eax eax +
jz loc_480733  +
jmp loc_4806A0  +
***
xor eax eax +
jmp loc_4806A5  +
***
sub esp 3Ch +
mov eax [esp+40h] +
mov ecx [eax+0A0h] +
mov dword ptr [esp+28h] 0 +
mov dword ptr [esp+24h] offset off_506020 +
mov dword ptr [esp+20h] 0 +
lea edx [ecx+230h] +
mov [esp+2Ch] edx +
mov edx [esp+50h] +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov [esp+1Ch] edx +
mov edx [esp+4Ch] +
mov [esp] eax +
mov [esp+14h] edx +
mov edx [esp+48h] +
mov [esp+8] edx +
mov edx [esp+44h] +
mov [esp+4] edx +
call sub_496250  +
add esp 3Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+30h] +
mov ecx [eax+0A0h] +
mov [esp] eax +
lea edx [ecx+230h] +
mov [esp+10h] edx +
mov edx [esp+3Ch] +
mov [esp+0Ch] edx +
mov edx [esp+38h] +
mov [esp+8] edx +
mov edx [esp+34h] +
mov [esp+4] edx +
call sub_4957B0  +
add esp 2Ch +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0Ch +
mov ebx [esp+20h] +
mov edx [esp+24h] +
mov eax [ebx+4] +
movzx ecx byte ptr [edx] +
mov eax [eax+1B0h] +
and ecx 3 +
cmp cl 2 +
mov edi [eax+174h] +
movzx esi byte ptr [edi] +
mov eax esi +
movzx eax al +
jz loc_4808EF  +
mov eax [ebx+0A0h] +
mov ebp [eax+934h] +
mov eax [ebp+1Ch] +
cmp eax 0FFFFFFFFh +
jz loc_4808F7  +
mov edx esi +
movzx esi dl +
mov [ebp+1Ch] eax +
add eax esi +
add esp 0Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [ebp+0] +
test ecx ecx +
jz loc_480910  +
movzx edi byte ptr [edi+1] +
xor eax eax +
mov ecx [ecx] +
add eax edi +
test ecx ecx +
jnz loc_480904  +
test eax eax +
jnz loc_4808E5  +
mov eax ebx +
call sub_474110  +
mov edx [ebx+0A0h] +
mov ebp [edx+934h] +
jmp loc_4808E5  +
***
add esi eax +
adc edi edx +
mov dword ptr [esp+0Ch] 0 +
mov [esp+4] esi +
mov [esp+8] edi +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jz loc_480A22  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+44h] +
add esi ebp +
mov [esp] esi +
mov [esp+8] eax +
mov eax [esp+38h] +
mov [esp+4] eax +
call memcpy  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+4] 0 +
mov [esp] ebx +
call sub_479A70  +
test eax eax +
jnz loc_48094D  +
jmp loc_480996  +
***
mov eax [esp+44h] +
mov [esp+8] ebx +
mov [esp+4] eax +
mov eax [esp+38h] +
mov [esp] eax +
call sub_46FB80  +
cmp [esp+44h] eax +
setz al  +
add esp 1Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov esi [esp+14h+arg_0] +
mov eax [ebx] +
mov ecx [esi+4] +
mov eax [eax] +
mov eax [eax] +
cmp [eax+4] ecx +
jz loc_480C08  +
mov eax [ebx+0Ch] +
mov edx [eax+10h] +
mov ecx [eax+0Ch] +
test edx edx +
lea edx [ecx-8] +
jz loc_480AD0  +
cmp edx 38h +
ja sub_480AF8  +
jmp ds:off_5025CC[edx*4]  +
cmp edx 38h +
ja sub_480AF8  +
jmp ds:off_5026B0[edx*4]  +
***
mov eax [eax+20h] +
mov eax 0Ch +
mov eax 0Dh +
jmp loc_480B30  +
***
mov eax 1 +
jmp loc_480AE5  +
***
mov eax 2 +
jmp loc_480AE5  +
***
mov eax 3 +
jmp loc_480AE5  +
***
mov eax 5 +
jmp loc_480AE5  +
***
mov eax 7 +
jmp loc_480AE5  +
***
mov eax 8 +
jmp loc_480B30  +
***
mov eax 9 +
jmp loc_480B30  +
***
mov eax 0Ah +
jmp loc_480B30  +
***
mov eax 0Bh +
jmp loc_480B30  +
***
sub [ebx+8] edx +
jmp loc_480B55  +
***
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
movzx eax byte ptr [ebx+28h] +
mov esi [ebx+0A0h] +
and eax 7 +
cmp al 1 +
jz loc_480C48  +
mov [esp+20h] ebx +
add esp 14h +
pop ebx  +
pop esi  +
jmp loc_457A60  +
***
test esi esi +
jz loc_480C3A  +
mov eax [esi+934h] +
test eax eax +
jz loc_480C65  +
mov eax [eax+4] +
test eax eax +
jz loc_480C65  +
mov [esp] eax +
call sub_488580  +
add esi 230h +
mov [esp+4] esi +
mov [esp] ebx +
call sub_495800  +
mov [esp+20h] ebx +
add esp 14h +
pop ebx  +
pop esi  +
jmp loc_457A60  +
***
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 9Ch +
mov ebx [esp+9Ch+arg_0] +
mov esi [esp+9Ch+arg_C] +
mov edi [esp+9Ch+arg_10] +
mov eax [ebx+0A0h] +
mov edx [eax+930h] +
mov eax [edx+8] +
test eax eax +
jnz loc_480CD5  +
mov eax [edx+4] +
mov [esp+9Ch+var_90] eax +
mov eax [esp+9Ch+arg_4] +
lea ebp [esp+9Ch+var_70] +
mov [esp+9Ch+var_98] offset aSD +
mov [esp+9Ch+var_9C] ebp +
mov [esp+9Ch+var_94] eax +
call sprintf  +
mov eax ebp +
mov ecx [eax] +
add eax 4 +
lea edx [ecx-1010101h] +
not ecx  +
and edx ecx +
and edx 80808080h +
jz loc_480CFA  +
mov ecx edx +
shr ecx 10h +
test edx 8080h +
cmovz edx ecx +
lea ecx [eax+2] +
cmovz eax ecx +
add dl dl +
sbb eax 3 +
sub eax ebp +
lea ecx [eax+1] +
mov [esp+9Ch+var_98] ecx +
mov [esp+9Ch+var_9C] ebx +
mov [esp+9Ch+var_80] ecx +
call sub_458A80  +
mov ecx [esp+9Ch+var_80] +
test eax eax +
jz loc_480DB0  +
mov [esp+9Ch+var_94] ecx +
mov [esp+9Ch+var_98] ebp +
mov [esp+9Ch+var_9C] eax +
mov [esp+9Ch+var_80] eax +
call memcpy  +
mov edx [esp+9Ch+var_80] +
mov [esp+9Ch+var_94] 100h +
mov [esp+9Ch+var_9C] ebx +
mov [esp+9Ch+var_98] edx +
call sub_44D890  +
test eax eax +
jz loc_480DB0  +
mov edx [esp+9Ch+arg_8] +
mov ecx eax +
mov [eax+50h] esi +
mov [eax+54h] edi +
mov dword ptr [eax+40h] 2 +
mov [eax+24h] edx +
mov edx [esp+9Ch+arg_4] +
mov eax ebx +
call sub_4748D0  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 9Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 9Ch +
mov ebx [esp+9Ch+arg_4] +
mov esi [esp+9Ch+arg_0] +
mov eax [ebx+8] +
cmp eax 8 +
jz loc_480E90  +
jbe loc_480E48  +
cmp eax 9 +
jz loc_480E20  +
cmp eax 0Ah +
nop   +
jnz loc_480E80  +
mov eax dword_4BFEC0 +
lea ecx [ebx+14h] +
lea edx [ebx+4] +
mov [esp+9Ch+var_98] offset a_reg2 +
mov [esp+9Ch+var_9C] eax +
mov eax esi +
call sub_474940  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax dword_4BFEC0 +
lea ecx [ebx+14h] +
lea edx [ebx+4] +
mov [esp+9Ch+var_98] offset a_reg +
mov [esp+9Ch+var_9C] eax +
mov eax esi +
call sub_474940  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 7 +
jnz loc_480E80  +
mov edi [ebx+14h] +
mov eax [ebx+4] +
mov [esp+9Ch+var_9C] esi +
mov [esp+9Ch+var_8C] 0 +
mov [esp+9Ch+var_90] edi +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset a_qnx_core_info +
call sub_480CA0  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 9Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+0A0h] +
mov edi [ebx+10h] +
mov ebp [eax+930h] +
mov eax [esi+4] +
mov eax [eax+28h] +
mov [esp+9Ch+var_9C] edi +
call eax  +
lea edx [edi+4] +
mov [ebp+4] eax +
mov eax [esi+4] +
mov eax [eax+28h] +
mov [esp+9Ch+var_9C] edx +
call eax  +
lea edx [edi+8] +
add edi 0Eh +
mov dword_4BFEC0 eax +
mov eax [esi+4] +
mov eax [eax+28h] +
mov [esp+9Ch+var_9C] edx +
call eax  +
mov ebp eax +
mov eax [esi+4] +
mov eax [eax+34h] +
mov [esp+9Ch+var_9C] edi +
call eax  +
test ax ax +
jle loc_480FD0  +
mov edx [esi+0A0h] +
cwde   +
mov edx [edx+930h] +
mov [edx] eax +
mov eax dword_4BFEC0 +
mov [edx+8] eax +
and ebp 80h +
jz loc_480F15  +
mov edx [esi+0A0h] +
mov edx [edx+930h] +
mov [edx+8] eax +
lea edi [esp+9Ch+var_70] +
mov [esp+9Ch+var_94] eax +
mov [esp+9Ch+var_98] offset a_qnx_core_stat +
mov [esp+9Ch+var_9C] edi +
call sprintf  +
mov edx edi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_480F2F  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
sub edx edi +
add edx 1 +
mov [esp+9Ch+var_98] edx +
mov [esp+9Ch+var_9C] esi +
call sub_458A80  +
test eax eax +
mov ebp eax +
jz loc_480FE0  +
mov [esp+9Ch+var_98] edi +
mov [esp+9Ch+var_9C] eax +
call strcpy  +
mov [esp+9Ch+var_94] 100h +
mov [esp+9Ch+var_98] ebp +
mov [esp+9Ch+var_9C] esi +
call sub_44D890  +
test eax eax +
jz loc_480FE0  +
mov edx [ebx+4] +
mov ecx eax +
mov edi [ebx+14h] +
mov dword ptr [eax+54h] 0 +
mov dword ptr [eax+40h] 2 +
mov [eax+24h] edx +
mov edx offset a_qnx_core_st_0 +
mov [eax+50h] edi +
mov eax esi +
call sub_4748D0  +
add esp 9Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax dword_4BFEC0 +
jmp loc_480EFE  +
xor eax eax +
jmp loc_480E13  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [esp+4Ch+arg_4] +
mov eax [esp+4Ch+arg_0] +
mov edx [ebx+8] +
mov eax [eax+4] +
cmp edx 304h +
mov ecx [eax+1B0h] +
jz loc_4818F0  +
jbe loc_4810B8  +
cmp edx 400h +
jz loc_481411  +
ja loc_481142  +
cmp edx 307h +
jz loc_481615  +
nop   +
lea esi [esi+0] +
jbe loc_4812C0  +
cmp edx 309h +
jz loc_4817F0  +
jb loc_481718  +
cmp edx 30Ah +
jnz loc_4811D1  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390VxrsHi +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp edx 100h +
jz loc_481944  +
jbe loc_4811A7  +
cmp edx 300h +
jz loc_481670  +
jbe loc_481248  +
cmp edx 302h +
jz loc_481844  +
ja loc_4814E4  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390Timer +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp edx 403h +
jz loc_4816C4  +
nop   +
jbe loc_4811E0  +
cmp edx 46E62B7Fh +
jz loc_481898  +
cmp edx 53494749h +
jz loc_4815E4  +
cmp edx 46494C45h +
jnz loc_4811D1  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_note_linuxcor +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp edx 3 +
jz loc_4817D1  +
jbe loc_481325  +
cmp edx 0Dh +
jz loc_4817D1  +
cmp edx 12h +
jz loc_481370  +
cmp edx 6 +
jz loc_481770  +
mov ebp 1 +
jmp loc_481363  +
cmp edx 401h +
jz loc_481490  +
cmp edx 402h +
jnz loc_4811D1  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regAarchHwBre +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp edx 102h +
jz loc_481590  +
cmp edx 202h +
jnz loc_4811D1  +
mov eax [ebx] +
cmp eax 6 +
jz loc_481998  +
cmp eax 8 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aFreebsd +
mov ecx 8 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regXstate +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp edx 305h +
jz loc_481538  +
cmp edx 306h +
jnz loc_4811D1  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390LastBr +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp edx 1 +
jz loc_481465  +
cmp edx 2 +
jnz loc_4811D1  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_reg2 +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
add esp 4Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dword ptr [ebx+4] 2D7h +
jbe loc_4811D1  +
mov esi [ebx+0Ch] +
mov edi offset aWin32 +
mov ecx 5 +
cmps   +
jnz loc_4811D1  +
mov edx [ebx+10h] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
cmp eax 2 +
jz loc_481A65  +
cmp eax 3 +
jz loc_4819BF  +
cmp eax 1 +
jnz loc_4811D1  +
mov eax [esp+4Ch+arg_0] +
mov ebp 1 +
mov edi [ebx+10h] +
mov eax [eax+0A0h] +
lea edx [edi+8] +
mov esi [eax+930h] +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
mov edx [ebx+10h] +
add edx 0Ch +
mov [esi+4] eax +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+0A0h] +
mov esi [eax+930h] +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
mov [esi] eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regArmVfp +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
mov eax [ecx+0FCh] +
mov ebp 1 +
test eax eax +
jz loc_481363  +
mov edi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] ebx +
mov [esp+4Ch+var_4C] edi +
call eax  +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regAarchTls +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390Todpre +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390Prefix +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regPpcVsx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_note_linuxc_0 +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390System +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390HighGp +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov esi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regAarchHwWat +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390Tdb +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
mov eax [esp+4Ch+arg_0] +
xor ebp ebp +
mov [esp+4Ch+var_44] 100h +
mov [esp+4Ch+var_48] offset a_auxv +
mov [esp+4Ch+var_4C] eax +
call sub_44D890  +
test eax eax +
mov esi eax +
jz loc_481363  +
mov eax [ebx+4] +
mov bp 1 +
mov [esi+24h] eax +
mov eax [ebx+14h] +
mov dword ptr [esi+54h] 0 +
mov [esi+50h] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call loc_44BFD0  +
test eax eax +
lea edx [eax+1Fh] +
cmovs eax edx +
sar eax 5 +
add eax 1 +
mov [esi+40h] eax +
jmp loc_481363  +
mov eax [ecx+100h] +
mov ebp 1 +
test eax eax +
jnz loc_481478  +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390VxrsLo +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390Todcmp +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regXfp +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regS390Ctrs +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
cmp dword ptr [ebx] 6 +
mov ebp 1 +
jnz loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
cmps   +
jnz loc_481363  +
mov eax [ebx+4] +
mov edi [ebx+14h] +
mov [esp+4Ch+var_3C] 0 +
mov [esp+4Ch+var_48] offset a_regPpcVmx +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_4C] eax +
call sub_480CA0  +
mov ebp eax +
jmp loc_481363  +
mov esi [ebx+0Ch] +
mov edi offset aLinux +
mov ecx 6 +
mov ebp 1 +
cmps   +
setnbe dl  +
setb al  +
cmp dl al +
jnz loc_481363  +
jmp loc_48128E  +
mov eax [esp+4Ch+arg_0] +
lea esi [esp+4Ch+var_2A] +
mov edi [ebx+10h] +
mov eax [eax+4] +
lea edx [edi+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
mov [esp+4Ch+var_48] offset a_module08lx +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_44] eax +
call sprintf  +
mov [esp+4Ch+var_4C] esi +
call strlen  +
lea ebp [eax+1] +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_481B3F  +
mov [esp+4Ch+var_44] ebp +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] eax +
call memcpy  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_44] 100h +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_4C] eax +
call sub_44D890  +
test eax eax +
jz loc_481B3F  +
mov edx [ebx+4] +
mov ebp 1 +
mov esi [ebx+14h] +
mov dword ptr [eax+54h] 0 +
mov dword ptr [eax+40h] 2 +
mov [eax+24h] edx +
mov [eax+50h] esi +
jmp loc_481363  +
mov eax [esp+4Ch+arg_0] +
mov esi [ebx+10h] +
mov eax [eax+4] +
lea edx [esi+8] +
lea esi [esp+4Ch+var_2A] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
mov [esp+4Ch+var_48] offset a_regLd +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_44] eax +
call sprintf  +
mov [esp+4Ch+var_4C] esi +
call strlen  +
lea ebp [eax+1] +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] ebp +
mov [esp+4Ch+var_4C] eax +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_481B3F  +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_44] ebp +
mov [esp+4Ch+var_4C] eax +
call memcpy  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_44] 100h +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_4C] eax +
call sub_44D890  +
test eax eax +
mov esi eax +
jz loc_481B3F  +
mov dword ptr [eax+24h] 2CCh +
mov eax [ebx+14h] +
mov edx [ebx+10h] +
mov dword ptr [esi+54h] 0 +
mov dword ptr [esi+40h] 2 +
add eax 0Ch +
mov [esi+50h] eax +
mov eax [esp+4Ch+arg_0] +
add edx 8 +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+4Ch+var_4C] edx +
call eax  +
test eax eax +
jz loc_4811D1  +
mov eax [esp+4Ch+arg_0] +
mov ecx esi +
mov edx offset a_reg +
call sub_4748D0  +
test eax eax +
setnz al  +
movzx eax al +
mov ebp eax +
jmp loc_481363  +
xor ebp ebp +
jmp loc_481363  +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov [esp+10h+var_C] 0 +
mov [esp+10h+var_10] edi +
mov [esp+10h+var_8] ebx +
call memchr  +
mov edx eax +
sub edx edi +
test eax eax +
cmovnz ebx edx +
lea eax [ebx+1] +
mov [esp+10h+var_C] eax +
mov eax [esp+10h+arg_0] +
mov [esp+10h+var_10] eax +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_481BA8  +
mov [esp+10h+var_8] ebx +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] eax +
call memcpy  +
mov byte ptr [esi+ebx] 0 +
add esp 10h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
jmp sub_481BC0  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_4] +
mov esi [esp+2Ch+arg_0] +
mov edx [ebx+8] +
cmp edx 0Ah +
jz loc_481CB8  +
cmp edx 14h +
jz loc_481D30  +
cmp edx 15h +
jz loc_481D60  +
cmp edx 16h +
jz loc_481D90  +
cmp edx 0Bh +
jz loc_481C60  +
cmp edx 17h +
mov edi 1 +
jz loc_481C10  +
add esp 2Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_24] 100h +
mov [esp+2Ch+var_28] offset a_wcookie +
mov [esp+2Ch+var_2C] esi +
call sub_44D890  +
test eax eax +
mov ebp eax +
jz loc_481DC0  +
mov eax [ebx+4] +
mov [ebp+24h] eax +
mov eax [ebx+14h] +
mov dword ptr [ebp+54h] 0 +
mov [ebp+50h] eax +
mov [esp+2Ch+var_2C] esi +
call loc_44BFD0  +
test eax eax +
lea edx [eax+1Fh] +
cmovs eax edx +
sar eax 5 +
add eax 1 +
mov [ebp+40h] eax +
jmp loc_481C05  +
mov [esp+2Ch+var_24] 100h +
mov [esp+2Ch+var_28] offset a_auxv +
mov [esp+2Ch+var_2C] esi +
call sub_44D890  +
test eax eax +
mov edi eax +
jz loc_481DC0  +
mov eax [ebx+4] +
mov [edi+24h] eax +
mov eax [ebx+14h] +
mov dword ptr [edi+54h] 0 +
mov [edi+50h] eax +
mov [esp+2Ch+var_2C] esi +
call loc_44BFD0  +
test eax eax +
lea edx [eax+1Fh] +
cmovs eax edx +
sar eax 5 +
add eax 1 +
mov [edi+40h] eax +
mov edi 1 +
jmp loc_481C05  +
mov eax [esi+0A0h] +
mov ecx [ebx+10h] +
mov edi [eax+930h] +
mov eax [esi+4] +
lea edx [ecx+8] +
mov eax [eax+4Ch] +
mov [esp+2Ch+var_2C] edx +
call eax  +
mov ecx [ebx+10h] +
lea edx [ecx+20h] +
mov [edi] eax +
mov eax [esi+0A0h] +
mov edi [eax+930h] +
mov eax [esi+4] +
mov eax [eax+4Ch] +
mov [esp+2Ch+var_2C] edx +
call eax  +
mov [edi+4] eax +
mov eax [esi+0A0h] +
mov edi [eax+930h] +
mov [esp+2Ch+var_24] 1Fh +
mov eax [ebx+10h] +
mov [esp+2Ch+var_2C] esi +
add eax 48h +
mov [esp+2Ch+var_28] eax +
call sub_481B50  +
mov [edi+10h] eax +
mov edi 1 +
jmp loc_481C05  +
mov eax [ebx+4] +
mov ecx [ebx+14h] +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_28] offset a_reg +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_20] ecx +
mov [esp+2Ch+var_2C] esi +
call sub_480CA0  +
mov edi eax +
jmp loc_481C05  +
mov eax [ebx+4] +
mov ecx [ebx+14h] +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_28] offset a_reg2 +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_20] ecx +
mov [esp+2Ch+var_2C] esi +
call sub_480CA0  +
mov edi eax +
jmp loc_481C05  +
mov eax [ebx+4] +
mov ecx [ebx+14h] +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_28] offset a_regXfp +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_20] ecx +
mov [esp+2Ch+var_2C] esi +
call sub_480CA0  +
mov edi eax +
jmp loc_481C05  +
xor edi edi +
jmp loc_481C05  +
***
push edi  +
push esi  +
push ebx  +
sub esp 20h +
mov ebx [esp+34h] +
mov dword ptr [esp+4] 40h +
mov esi [esp+30h] +
mov eax [ebx+0Ch] +
mov [esp] eax +
call strchr  +
test eax eax +
jz loc_481E0F  +
add eax 1 +
mov [esp] eax +
call atoi  +
mov edx [esi+0A0h] +
mov edx [edx+930h] +
mov [edx+8] eax +
mov edx [ebx+8] +
cmp edx 1 +
jz loc_481EC5  +
cmp edx 1Fh +
mov edi 1 +
ja loc_481E30  +
add esp 20h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov [esp] esi +
call sub_4536B0  +
cmp eax 6 +
jz loc_481E80  +
cmp eax 26h +
jz loc_481E80  +
mov eax [ebx+8] +
cmp eax 21h +
jz loc_481E94  +
cmp eax 23h +
jnz loc_481E25  +
mov eax [ebx+4] +
mov ecx [ebx+14h] +
mov [esp] esi +
mov dword ptr [esp+10h] 0 +
mov [esp+8] eax +
mov [esp+0Ch] ecx +
mov dword ptr [esp+4] offset a_reg2 +
call sub_480CA0  +
add esp 20h +
pop ebx  +
pop esi  +
mov edi eax +
mov eax edi +
pop edi  +
retn   +
***
mov eax [ebx+8] +
cmp eax 20h +
jz loc_481E94  +
cmp eax 22h +
jz loc_481E4F  +
mov edi 1 +
jmp loc_481E25  +
***
mov eax [ebx+4] +
mov ecx [ebx+14h] +
mov [esp] esi +
mov dword ptr [esp+10h] 0 +
mov [esp+8] eax +
mov [esp+0Ch] ecx +
mov dword ptr [esp+4] offset a_reg +
call sub_480CA0  +
add esp 20h +
pop ebx  +
pop esi  +
mov edi eax +
mov eax edi +
pop edi  +
retn   +
***
mov eax [esi+0A0h] +
mov ecx [ebx+10h] +
mov edi [eax+930h] +
mov eax [esi+4] +
lea edx [ecx+8] +
mov eax [eax+4Ch] +
mov [esp] edx +
call eax  +
mov ecx [ebx+10h] +
lea edx [ecx+50h] +
mov [edi] eax +
mov eax [esi+0A0h] +
mov edi [eax+930h] +
mov eax [esi+4] +
mov eax [eax+4Ch] +
mov [esp] edx +
call eax  +
mov [edi+4] eax +
mov eax [esi+0A0h] +
mov edi [eax+930h] +
mov dword ptr [esp+8] 1Fh +
mov eax [ebx+10h] +
mov [esp] esi +
add eax 7Ch +
mov [esp+4] eax +
call sub_481B50  +
mov ecx [ebx+14h] +
mov [edi+10h] eax +
mov eax [ebx+4] +
mov [esp+0Ch] ecx +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+4] offset a_note_netbsdco +
mov [esp+8] eax +
mov [esp] esi +
call sub_480CA0  +
mov edi eax +
jmp loc_481E25  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edx [esp+1Ch+arg_C] +
mov ebx [esp+1Ch+arg_18] +
test edx edx +
jz loc_482086  +
mov eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_1C] eax +
call strlen  +
lea esi [eax+1] +
add eax 4 +
and eax 0FFFFFFFCh +
lea edx [ebx+3] +
and edx 0FFFFFFFCh +
lea ecx [eax+edx+0Ch] +
mov edx [esp+1Ch+arg_8] +
mov eax ecx +
mov [esp+1Ch+var_10] ecx +
add eax [edx] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] eax +
call realloc  +
test eax eax +
mov ebp eax +
jz loc_48207C  +
mov eax [esp+1Ch+arg_8] +
mov ecx [esp+1Ch+var_10] +
mov eax [eax] +
lea edi [ebp+eax+0] +
add ecx eax +
mov eax [esp+1Ch+arg_8] +
mov [eax] ecx +
mov eax [esp+1Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+54h] +
mov [esp+1Ch+var_18] edi +
mov [esp+1Ch+var_1C] esi +
call eax  +
mov eax [esp+1Ch+arg_0] +
lea ecx [edi+4] +
mov eax [eax+4] +
mov eax [eax+54h] +
mov [esp+1Ch+var_18] ecx +
mov [esp+1Ch+var_1C] ebx +
call eax  +
mov eax [esp+1Ch+arg_0] +
lea ecx [edi+8] +
add edi 0Ch +
mov eax [eax+4] +
mov eax [eax+54h] +
mov [esp+1Ch+var_18] ecx +
mov ecx [esp+1Ch+arg_10] +
mov [esp+1Ch+var_1C] ecx +
call eax  +
mov eax [esp+1Ch+arg_C] +
test eax eax +
jz loc_482051  +
mov eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_18] eax +
call memcpy  +
lea ecx [edi+esi] +
test esi 3 +
mov edi ecx +
jz loc_482051  +
add edi 1 +
lea eax [edi+esi] +
sub eax ecx +
test al 3 +
mov byte ptr [edi-1] 0 +
jnz loc_482041  +
mov eax [esp+1Ch+arg_14] +
mov [esp+1Ch+var_1C] edi +
add edi ebx +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_18] eax +
call memcpy  +
test bl 3 +
jz loc_48207C  +
sub edi ebx +
nop   +
mov byte ptr [edi+ebx] 0 +
add ebx 1 +
test bl 3 +
jnz loc_482070  +
add esp 1Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
xor esi esi +
jmp loc_481F8C  +
***
push ebx  +
sub esp 28h +
mov edx [esp+30h] +
mov ebx [esp+34h] +
mov eax [edx+4] +
mov eax [eax+1B0h] +
mov eax [eax+104h] +
test eax eax +
jz loc_4820E1  +
mov ecx [esp+40h] +
mov dword ptr [esp+0Ch] 3 +
mov [esp+4] ebx +
mov [esp] edx +
mov [esp+14h] ecx +
mov ecx [esp+3Ch] +
mov [esp+10h] ecx +
mov ecx [esp+38h] +
mov [esp+8] ecx +
call eax  +
test eax eax +
jz loc_4820E1  +
add esp 28h +
pop ebx  +
retn   +
***
mov [esp] ebx +
call free  +
xor eax eax +
jmp loc_4820DC  +
***
push ebp  +
xor eax eax +
push edi  +
mov ecx 1Fh +
push esi  +
push ebx  +
sub esp 0ACh +
mov ebx [esp+0CCh] +
lea ebp [esp+24h] +
mov edi ebp +
mov esi [esp+0C0h] +
stos   +
lea ecx [esp+28h] +
movzx eax byte ptr [ebx] +
mov edx [ebx+4] +
mov [esp+24h] al +
movzx eax byte ptr [ebx+1] +
mov [esp+25h] al +
movzx eax byte ptr [ebx+2] +
mov [esp+26h] al +
movzx eax byte ptr [ebx+3] +
mov [esp+27h] al +
mov eax [esi+4] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea ecx [esp+2Ch] +
mov edx [ebx+8] +
mov eax [eax+60h] +
mov [esp+4] ecx +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea ecx [esp+2Eh] +
mov edx [ebx+0Ch] +
mov eax [eax+60h] +
mov [esp+4] ecx +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+30h] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+10h] +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+34h] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+14h] +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+38h] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+18h] +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+3Ch] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+1Ch] +
mov [esp] edx +
call eax  +
lea eax [ebx+20h] +
add ebx 31h +
mov [esp+4] eax +
lea eax [esp+40h] +
mov dword ptr [esp+8] 10h +
mov [esp] eax +
call strncpy  +
lea eax [esp+50h] +
mov [esp+4] ebx +
mov dword ptr [esp+8] 50h +
mov [esp] eax +
call strncpy  +
mov eax [esp+0C8h] +
mov [esp+14h] ebp +
mov [esp] esi +
mov dword ptr [esp+18h] 7Ch +
mov [esp+8] eax +
mov eax [esp+0C4h] +
mov dword ptr [esp+10h] 3 +
mov dword ptr [esp+0Ch] offset aCore +
mov [esp+4] eax +
call sub_481F60  +
add esp 0ACh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
xor eax eax +
push edi  +
mov ecx 22h +
push esi  +
push ebx  +
sub esp 0BCh +
mov ebx [esp+0DCh] +
lea ebp [esp+28h] +
mov edi ebp +
mov esi [esp+0D0h] +
stos   +
lea edx [esp+2Ch] +
movzx eax byte ptr [ebx] +
mov [esp+28h] al +
movzx eax byte ptr [ebx+1] +
mov [esp+29h] al +
movzx eax byte ptr [ebx+2] +
mov [esp+2Ah] al +
movzx eax byte ptr [ebx+3] +
mov [esp+2Bh] al +
mov eax [esi+4] +
mov eax [eax+48h] +
mov [esp+8] edx +
mov edi [ebx+4] +
mov dword ptr [esp+4] 0 +
mov [esp] edi +
call eax  +
mov eax [esi+4] +
lea ecx [esp+38h] +
mov edx [ebx+8] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea ecx [esp+3Ch] +
mov edx [ebx+0Ch] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+40h] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+10h] +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+44h] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+14h] +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+48h] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+18h] +
mov [esp] edx +
call eax  +
mov eax [esi+4] +
lea edx [esp+4Ch] +
mov eax [eax+54h] +
mov [esp+4] edx +
mov edx [ebx+1Ch] +
mov [esp] edx +
call eax  +
lea eax [ebx+20h] +
add ebx 31h +
mov [esp+4] eax +
lea eax [esp+50h] +
mov dword ptr [esp+8] 10h +
mov [esp] eax +
call strncpy  +
lea eax [esp+60h] +
mov [esp+4] ebx +
mov dword ptr [esp+8] 50h +
mov [esp] eax +
call strncpy  +
mov eax [esp+0D8h] +
mov [esp+14h] ebp +
mov [esp] esi +
mov dword ptr [esp+18h] 88h +
mov [esp+8] eax +
mov eax [esp+0D4h] +
mov dword ptr [esp+10h] 3 +
mov dword ptr [esp+0Ch] offset aCore +
mov [esp+4] eax +
call sub_481F60  +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
sub esp 28h +
mov edx [esp+30h] +
mov ebx [esp+34h] +
mov eax [edx+4] +
mov eax [eax+1B0h] +
mov eax [eax+104h] +
test eax eax +
jz loc_482420  +
mov ecx [esp+44h] +
mov dword ptr [esp+0Ch] 1 +
mov [esp+4] ebx +
mov [esp] edx +
mov [esp+18h] ecx +
mov ecx [esp+40h] +
mov [esp+14h] ecx +
mov ecx [esp+3Ch] +
mov [esp+10h] ecx +
mov ecx [esp+38h] +
mov [esp+8] ecx +
call eax  +
test eax eax +
jz loc_482420  +
add esp 28h +
pop ebx  +
retn   +
***
mov [esp] ebx +
call free  +
xor eax eax +
jmp loc_482414  +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 2 +
mov dword ptr [esp+0Ch] offset aCore +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 46E62B7Fh +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov edx [esp+30h] +
mov eax [edx+4] +
mov ecx [eax+1B0h] +
mov eax offset aFreebsd +
cmp dword ptr [ecx+0Ch] 9 +
mov ecx offset aLinux +
mov dword ptr [esp+10h] 202h +
mov [esp] edx +
cmovnz eax ecx +
mov ecx [esp+40h] +
mov [esp+0Ch] eax +
mov eax [esp+38h] +
mov [esp+18h] ecx +
mov ecx [esp+3Ch] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+14h] ecx +
mov [esp+4] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 100h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 102h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 301h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 302h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 303h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 304h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 305h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 306h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 307h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 308h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 309h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 30Ah +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 400h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 401h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 402h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+40h] +
mov dword ptr [esp+10h] 403h +
mov dword ptr [esp+0Ch] offset aLinux +
mov [esp+18h] eax +
mov eax [esp+3Ch] +
mov [esp+14h] eax +
mov eax [esp+38h] +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_481F60  +
add esp 2Ch +
retn   +
***
push ebp  +
mov ecx 6 +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+50h] +
mov edi [esp+64h] +
mov ebp [esp+58h] +
mov ebx [esp+60h] +
mov [esp+24h] eax +
mov eax [esp+54h] +
mov [esp+2Ch] edi +
mov edi offset a_reg2 +
mov [esp+28h] eax +
mov eax [esp+5Ch] +
mov esi eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jz loc_482C17  +
mov edi offset a_regXfp +
mov ecx 9 +
mov esi eax +
cmps   +
jz loc_482CA0  +
mov edi offset a_regXstate +
mov ecx 0Ch +
mov esi eax +
cmps   +
jz loc_482C53  +
mov edi offset a_regPpcVmx +
mov ecx 0Dh +
mov esi eax +
cmps   +
jz loc_482CB6  +
mov edi offset a_regPpcVsx +
mov ecx 0Dh +
mov esi eax +
cmps   +
jz loc_482CD0  +
mov edi offset a_regS390HighGp +
mov ecx 14h +
mov esi eax +
cmps   +
jz loc_482CE6  +
mov edi offset a_regS390Timer +
mov ecx 10h +
mov esi eax +
cmps   +
jz loc_482C80  +
mov edi offset a_regS390Todcmp +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_482D20  +
mov edi offset a_regS390Todpre +
mov ecx 12h +
mov esi eax +
cmps   +
jz loc_482D40  +
mov edi offset a_regS390Ctrs +
mov ecx 0Fh +
mov esi eax +
cmps   +
jz loc_482D60  +
mov edi offset a_regS390Prefix +
mov ecx 11h +
mov esi eax +
cmps   +
jz loc_482D80  +
mov edi offset a_regS390LastBr +
mov ecx 15h +
mov esi eax +
cmps   +
jz loc_482DA0  +
mov edi offset a_regS390System +
mov ecx 16h +
mov esi eax +
cmps   +
jz loc_482D00  +
mov edi offset a_regS390Tdb +
mov ecx 0Eh +
mov esi eax +
cmps   +
jz loc_482DC0  +
mov edi offset a_regS390VxrsLo +
mov ecx 13h +
mov esi eax +
cmps   +
jz loc_482DD9  +
mov edi offset a_regS390VxrsHi +
mov ecx 14h +
mov esi eax +
cmps   +
jz loc_482DF2  +
mov edi offset a_regArmVfp +
mov ecx 0Dh +
mov esi eax +
cmps   +
jz loc_482E0B  +
mov edi offset a_regAarchTls +
mov ecx 0Fh +
mov esi eax +
cmps   +
jz loc_482E24  +
mov edi offset a_regAarchHwBre +
mov ecx 14h +
mov esi eax +
cmps   +
jz loc_482E3D  +
mov esi eax +
mov ecx 14h +
mov edi offset a_regAarchHwWat +
cmps   +
setnbe al  +
setb cl  +
mov esi eax +
xor eax eax +
mov edx esi +
cmp dl cl +
jnz loc_482C4B  +
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 403h +
mov [esp+18h] eax +
jmp loc_482C94  +
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 2 +
mov dword ptr [esp+0Ch] offset aCore +
mov [esp+18h] eax +
mov eax [esp+28h] +
mov [esp+8] ebp +
mov [esp+4] eax +
mov eax [esp+24h] +
mov [esp] eax +
call sub_481F60  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+2Ch] +
mov [esp+5Ch] ebx +
mov [esp+58h] ebp +
mov [esp+60h] eax +
mov eax [esp+28h] +
mov [esp+54h] eax +
mov eax [esp+24h] +
mov [esp+50h] eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_4824D0  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 301h +
mov [esp+18h] eax +
mov dword ptr [esp+0Ch] offset aLinux +
jmp loc_482C33  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 46E62B7Fh +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 100h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 102h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 300h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 307h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 302h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 303h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 304h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 305h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 306h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 308h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 309h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 30Ah +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 400h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 401h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
mov eax [esp+2Ch] +
mov [esp+14h] ebx +
mov dword ptr [esp+10h] 402h +
mov [esp+18h] eax +
jmp loc_482C94  +
***
sub esp 1Ch +
mov eax [esp+20h] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_482E80  +
mov eax [eax+0A0h] +
mov eax [eax+30h] +
shl eax 5 +
add esp 1Ch +
retn   +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
jmp loc_482E7C  +
***
push ebx  +
sub esp 18h +
mov eax [esp+20h] +
mov edx [eax+4] +
cmp dword ptr [edx+4] 5 +
jnz loc_482EE0  +
mov eax [eax+0A0h] +
mov ebx [eax+30h] +
mov eax [eax+44h] +
mov edx ebx +
mov [esp+4] eax +
mov eax [esp+24h] +
shl edx 5 +
mov [esp+8] edx +
mov [esp] eax +
call memcpy  +
mov eax ebx +
add esp 18h +
pop ebx  +
retn   +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
mov eax 0FFFFFFFFh +
jmp loc_482ED8  +
***
xor eax eax +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_8] +
mov eax [esp+10h+arg_4] +
mov ebx [edi] +
mov edx [eax] +
mov ecx [ebx+3Ch] +
mov esi [ebx+38h] +
add esi edx +
add esi [ecx+1Ch] +
test byte ptr [ebx+16h] 80h +
jz loc_482F3E  +
movzx eax byte ptr [eax+0Ch] +
and eax 0Fh +
cmp al 3 +
jz loc_482F47  +
add esp 10h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx eax word ptr [ebx+18h] +
and ax 380h +
cmp ax 100h +
jnz loc_482F3E  +
mov eax [ebx+8Ch] +
mov ecx [esp+10h+arg_C] +
mov eax [eax+88h] +
add edx [ecx+8] +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_8] eax +
mov eax [esp+10h+arg_0] +
mov [esp+10h+var_4] edx +
mov [esp+10h+var_10] eax +
call sub_489930  +
mov edx [edi] +
mov ecx [esp+10h+arg_C] +
cmp edx ebx +
mov [ecx+8] eax +
jz loc_482F98  +
test byte ptr [ebx+15h] 80h +
jz loc_482FB0  +
mov [ebx+7Ch] edx +
mov ebx [edi] +
mov ecx [ebx+3Ch] +
mov edx [ebx+38h] +
mov edi [esp+10h+arg_C] +
add edx [ecx+1Ch] +
sub edx esi +
add eax edx +
mov [edi+8] eax +
jmp loc_482F3E  +
mov ebx edx +
jmp loc_482F98  +
***
push ebx  +
mov ecx [esp+arg_8] +
mov esi [esp+arg_4] +
mov eax [esp+arg_C] +
mov ebx [ecx] +
movzx edx word ptr [ebx+18h] +
and dx 380h +
cmp dx 100h +
jz loc_482FE7  +
add eax [esi] +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [ebx+8Ch] +
add eax [esi] +
mov edx [edx+88h] +
mov [esp+arg_C] eax +
mov [esp+arg_4] ecx +
mov [esp+arg_8] edx +
pop ebx  +
pop esi  +
pop edi  +
jmp sub_489930  +
***
mov ecx [esp+arg_8] +
mov ebx [esp+arg_0] +
mov esi [esp+arg_4] +
mov eax [esp+arg_C] +
movzx edx word ptr [ecx+18h] +
shr dx 7 +
and edx 7 +
cmp edx 1 +
jz loc_483080  +
cmp edx 3 +
jnz loc_483050  +
mov [esp+arg_C] eax +
mov [esp+arg_8] ecx +
mov [esp+arg_4] esi +
mov [esp+arg_0] ebx +
pop ebx  +
pop esi  +
jmp sub_48D050  +
test byte ptr [ecx+17h] 4 +
jz loc_483078  +
mov edx [ecx+24h] +
sub edx eax +
mov eax edx +
mov edx [ebx+4] +
mov edx [edx+1B0h] +
mov edx [edx+174h] +
movzx edx byte ptr [edx+0Ah] +
shr dl 3 +
movzx edx dl +
sub eax edx +
pop ebx  +
pop esi  +
retn   +
mov edx [ecx+8Ch] +
mov edx [edx+88h] +
mov [esp+arg_8] eax +
mov [esp+arg_0] ecx +
mov [esp+arg_4] edx +
pop ebx  +
pop esi  +
jmp loc_48A990  +
***
mov eax [esp+4] +
mov edx [eax+4] +
mov edx [edx+1B0h] +
mov edx [edx+13Ch] +
jmp edx  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov esi [esp+70h] +
mov eax [esi+4] +
mov edi [eax+1B0h] +
mov eax [esp+84h] +
mov dword ptr [eax] 0 +
mov eax [esi+28h] +
shr eax 5 +
test al 42h +
jz loc_483134  +
mov ebx [esp+7Ch] +
test ebx ebx +
jle loc_483134  +
mov ecx [edi+140h] +
test ecx ecx +
jz loc_483134  +
mov eax [edi+168h] +
test eax eax +
jz loc_4833C0  +
mov [esp+4] eax +
mov [esp] esi +
call sub_44D4B0  +
test eax eax +
mov ebp eax +
jz loc_483134  +
mov ebx [eax+8Ch] +
mov eax [esi+0A0h] +
mov eax [eax+910h] +
cmp [ebx+1Ch] eax +
jz loc_483140  +
xor eax eax +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [ebx+4] +
cmp eax 4 +
jz loc_48314D  +
cmp eax 9 +
jnz loc_483134  +
mov dword ptr [esp+4] offset a_plt_18 +
mov [esp] esi +
call sub_44D4B0  +
test eax eax +
mov [esp+24h] eax +
jz loc_483134  +
mov eax [esi+4] +
mov edx [esp+80h] +
mov eax [eax+1B0h] +
mov eax [eax+174h] +
mov eax [eax+28h] +
mov dword ptr [esp+0Ch] 1 +
mov [esp+8] edx +
mov [esp+4] ebp +
mov [esp] esi +
call eax  +
test eax eax +
jz loc_4833F2  +
mov eax [ebp+24h] +
xor edx edx +
div  dword ptr [ebx+28h] +
mov edx [ebp+44h] +
mov ecx eax +
mov [esp+1Ch] eax +
lea eax [eax+eax*2] +
shl eax 3 +
test ecx ecx +
mov ebx eax +
mov [esp+18h] eax +
jle loc_4833E9  +
mov eax [edi+174h] +
xor ecx ecx +
mov [esp+20h] edi +
mov [esp+28h] ebp +
mov ebp edx +
mov [esp+70h] esi +
mov esi ecx +
movzx eax byte ptr [eax+9] +
shl eax 4 +
mov edi eax +
mov eax [ebp+0] +
mov eax [eax] +
mov eax [eax+4] +
mov [esp] eax +
call strlen  +
mov edx [ebp+8] +
add eax ebx +
lea ebx [eax+5] +
add eax 10h +
test edx edx +
cmovnz ebx eax +
add esi 1 +
add ebp edi +
cmp [esp+1Ch] esi +
jnz loc_4831E1  +
mov edi [esp+20h] +
mov ebp [esp+28h] +
mov esi [esp+70h] +
mov [esp] ebx +
call sub_459B80  +
mov ebx eax +
mov eax [esp+84h] +
test ebx ebx +
mov [eax] ebx +
jz loc_4833F2  +
mov eax [esp+18h] +
mov ecx [ebp+44h] +
mov ebp [esp+1Ch] +
add eax ebx +
test ebp ebp +
jle loc_483134  +
mov [esp+20h] edi +
mov edi eax +
mov [esp+70h] esi +
mov esi ecx +
mov dword ptr [esp+2Ch] 0 +
mov dword ptr [esp+18h] 0 +
jmp loc_4832A2  +
add dword ptr [esp+2Ch] 1 +
add edi 5 +
add ebx 18h +
mov dword ptr [edi-5] 746C7040h +
mov byte ptr [edi-1] 0 +
mov eax [esp+20h] +
add dword ptr [esp+18h] 1 +
mov eax [eax+174h] +
movzx eax byte ptr [eax+9] +
shl eax 4 +
add esi eax +
mov eax [esp+18h] +
cmp [esp+1Ch] eax +
jz loc_4833E0  +
mov ecx [esp+24h] +
mov eax [esp+20h] +
mov eax [eax+140h] +
mov [esp+4] ecx +
mov ecx [esp+18h] +
mov [esp+8] esi +
mov [esp] ecx +
call eax  +
cmp eax 0FFFFFFFFh +
jz loc_48327C  +
mov ecx [esi] +
mov edx [ecx] +
mov [esp+28h] ecx +
mov ebp [edx] +
mov [ebx] ebp +
mov ebp [edx+4] +
mov [ebx+4] ebp +
mov ebp [edx+8] +
mov [ebx+8] ebp +
mov ebp [edx+0Ch] +
mov [ebx+0Ch] ebp +
mov ecx [edx+10h] +
test ebp 1 +
mov [ebx+10h] ecx +
mov edx [edx+14h] +
mov [ebx+14h] edx +
jnz loc_4832FB  +
or ebp 2 +
mov edx [esp+24h] +
or ebp 200000h +
mov [ebx+0Ch] ebp +
sub eax [edx+1Ch] +
mov [ebx+10h] edx +
mov [ebx+4] edi +
mov [ebx+8] eax +
mov eax [esp+28h] +
mov dword ptr [ebx+14h] 0 +
mov eax [eax] +
mov edx [eax+4] +
mov [esp] edx +
mov [esp+28h] edx +
call strlen  +
mov edx [esp+28h] +
mov [esp] edi +
mov [esp+4] edx +
mov [esp+8] eax +
mov ebp eax +
call memcpy  +
mov edx [esi+8] +
add edi ebp +
test edx edx +
jz loc_483266  +
mov eax 302Bh +
mov [edi] ax +
lea eax [edi+3] +
mov byte ptr [edi+2] 78h +
lea edi [esp+32h] +
mov [esp+28h] eax +
mov eax [esi+8] +
mov [esp+8] eax +
lea eax [esp+32h] +
mov [esp+4] eax +
mov eax [esp+70h] +
mov [esp] eax +
call sub_44C400  +
cmp byte ptr [esp+32h] 30h +
jnz loc_483398  +
lea esi [esi+0] +
add edi 1 +
cmp byte ptr [edi] 30h +
jz loc_483390  +
mov [esp] edi +
call strlen  +
mov [esp+4] edi +
mov edi [esp+28h] +
mov [esp] edi +
mov ebp eax +
mov [esp+8] eax +
lea edi [edi+ebp] +
call memcpy  +
jmp loc_483266  +
***
test byte ptr [edi+1ACh] 20h +
mov eax offset a_rela_plt_0 +
mov edx offset a_rel_plt_0 +
cmovz eax edx +
jmp loc_48310B  +
***
mov eax [esp+2Ch] +
jmp loc_483136  +
***
mov ebx [esp+18h] +
jmp loc_483218  +
***
mov eax 0FFFFFFFFh +
jmp loc_483136  +
***
mov eax [esp+4] +
and eax 0FFFFFFF7h +
cmp eax 2 +
setz al  +
movzx eax al +
retn   +
***
jmp loc_483460  +
push ebx  +
mov edx [esp+8] +
xor eax eax +
mov ecx [edx+0Ch] +
test ecx 1D4100h +
jnz loc_48347B  +
mov ebx [esp+0Ch] +
cmp [edx+10h] ebx +
jz loc_483480  +
pop ebx  +
retn   +
***
mov eax [esp+10h] +
and ecx 200000h +
mov ebx [edx+8] +
mov [eax] ebx +
mov eax 1 +
jnz loc_48347B  +
mov edx [edx+1Ch] +
pop ebx  +
test edx edx +
cmovnz eax edx +
retn   +
***
mov eax [esp+8] +
mov dword ptr [eax+0Ch] offset unk_5036C0 +
retn   +
***
mov eax [esp+8] +
mov dword ptr [eax+0Ch] offset unk_5036C0 +
retn   +
***
push ebx  +
sub esp 28h +
mov ebx [esp+30h] +
lea eax [esp+1Ch] +
mov [esp+8] eax +
mov dword ptr [esp+4] offset sub_483510 +
mov dword ptr [esp+1Ch] 0 +
mov [esp] ebx +
call sub_44DAD0  +
mov edx [esp+1Ch] +
xor eax eax +
test edx edx +
jnz loc_483502  +
mov eax [esp+34h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_4635B0  +
add esp 28h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov edx [esp+1Ch+arg_0] +
test byte ptr [eax+14h] 4 +
jz loc_483556  +
mov eax [edx+0A0h] +
movzx eax word ptr [eax+26h] +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] offset aBRelocationsIn +
mov [esp+1Ch+var_14] eax +
call off_4BFA04  +
mov [esp+1Ch+var_1C] 3 +
call sub_44BAF0  +
mov eax [esp+1Ch+arg_8] +
mov dword ptr [eax] 1 +
add esp 1Ch +
retn   +
***
xor eax eax +
retn   +
***
mov eax [esp+4] +
mov eax [eax+7Ch] +
lea eax ds:4[eax*4] +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+30h] +
mov ebx [esp+34h] +
mov esi [edi+7Ch] +
mov eax [edi+0A0h] +
test esi esi +
mov eax [eax+14h] +
jnz loc_4835B0  +
mov dword ptr [ebx] 0 +
mov eax esi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
test eax eax +
jz loc_4835CC  +
xor edx edx +
jmp loc_4835BA  +
mov eax ecx +
add edx 1 +
add ebx 4 +
cmp esi edx +
lea ecx [eax+18h] +
mov [ebx-4] eax +
ja loc_4835B8  +
jmp loc_48359F  +
***
lea eax [esi+esi*2] +
shl eax 3 +
mov [esp+4] eax +
mov [esp] edi +
call sub_458A80  +
test eax eax +
jz loc_483623  +
mov edx [edi+0A0h] +
mov ecx [edx+0Ch] +
mov [edx+14h] eax +
test ecx ecx +
jz loc_4835B4  +
mov edx eax +
mov ebp [ecx+4] +
add edx 18h +
mov [edx-18h] edi +
mov [edx-14h] ebp +
mov ebp [ecx+8] +
mov ecx [ecx] +
mov dword ptr [edx-0Ch] 2 +
mov dword ptr [edx-8] offset off_4BFB90 +
mov [edx-10h] ebp +
mov dword ptr [edx-4] 0 +
test ecx ecx +
jnz loc_4835F4  +
jmp loc_4835B4  +
***
mov eax 0FFFFFFFFh +
jmp loc_4835A7  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+50h] +
mov edx [esp+60h] +
mov eax [esp+5Ch] +
mov [esp] ebx +
mov [esp+14h] edx +
mov [esp+10h] eax +
call sub_4537D0  +
mov esi [ebx+0A0h] +
mov dword ptr [esp+4] 10h +
mov [esp] ebx +
mov ebp eax +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_4837C3  +
mov ecx [esp+64h] +
test ecx ecx +
jz loc_48368C  +
mov eax [esp+54h] +
mov eax [eax+14h] +
and eax 3 +
cmp eax 3 +
jz loc_4836A0  +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+64h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_458A80  +
test eax eax +
mov ecx eax +
mov [esp+20h] eax +
jz loc_4837C3  +
mov eax [esp+64h] +
mov [esp] ecx +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp+4] eax +
call memcpy  +
mov edx ds:dword_51409C +
test edx edx +
jnz loc_4837D0  +
mov eax [esp+54h] +
xor ebx ebx +
mov [esp+18h] ebp +
mov dword ptr [esp+2Ch] 0 +
mov eax [eax+20h] +
mov [esp+8] ebp +
mov ecx eax +
mov [esp+24h] eax +
mov eax ebp +
mov [esp+28h] ecx +
mov ecx [esp+64h] +
cdq   +
add ecx [esp+10h] +
adc ebx [esp+14h] +
mov [esp+0Ch] edx +
mov [esp] ecx +
mov [esp+4] ebx +
mov [esp+1Ch] edx +
call sub_4BB1F0  +
add eax [esp+28h] +
adc edx [esp+2Ch] +
cmp edx 0 +
jl loc_483805  +
jle loc_48380E  +
mov ebx [esp+24h] +
mov dword ptr [esi+8] 3 +
lea esi [esi+0] +
mov eax [esp+20h] +
mov edx [esp+1Ch] +
mov [edi+4] eax +
mov eax [esp+18h] +
mov [esp+0Ch] edx +
mov edx [esp+14h] +
mov [esp+8] eax +
mov eax [esp+10h] +
mov [esp+4] edx +
mov [esp] eax +
call sub_4BB1F0  +
add ebx eax +
mov eax [esp+64h] +
mov [edi+8] ebx +
mov [edi+0Ch] eax +
mov eax [esi+4] +
test eax eax +
jz loc_483793  +
cmp ebx [eax+8] +
jnb loc_4837F0  +
mov edx [esi] +
mov eax esi +
test edx edx +
jnz loc_4837A8  +
jmp loc_4837AD  +
mov eax edx +
mov edx [edx] +
test edx edx +
jz loc_4837AD  +
cmp ebx [edx+8] +
ja loc_4837A0  +
mov [edi] edx +
mov [eax] edi +
mov eax [edi] +
test eax eax +
jnz loc_48368C  +
mov [esi+4] edi +
jmp loc_48368C  +
***
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+54h] +
mov [esp+18h] ebp +
sar ebp 1Fh +
mov dword ptr [esi+8] 3 +
mov [esp+1Ch] ebp +
mov ebx [eax+20h] +
jmp loc_483750  +
***
mov [eax] edi +
mov eax 1 +
mov dword ptr [edi] 0 +
mov [esi+4] edi +
jmp loc_483691  +
***
mov ebx [esp+24h] +
jmp loc_483750  +
***
cmp eax 10000h +
jbe loc_483805  +
cmp edx 0 +
jg loc_483741  +
nop   +
jl loc_48382D  +
cmp eax 1000000h +
ja loc_483741  +
cmp dword ptr [esi+8] 2 +
ja loc_483741  +
mov dword ptr [esi+8] 2 +
mov ebx [esp+24h] +
jmp loc_483750  +
***
mov eax [esp+8] +
mov edx [esp+4] +
test eax eax +
jnz loc_483870  +
mov dword ptr [edx+84h] offset asc_4FE3C0 +
mov eax 1 +
retn   +
***
jmp sub_453750  +
***
push esi  +
push ebx  +
sub esp 23Ch +
cmp edx 9 +
mov [esp+23Ch+var_220] eax +
mov eax ecx +
mov edi [esp+23Ch+arg_4] +
lea ecx [edx+30h] +
mov byte ptr [esp+23Ch+var_210] 53h +
mov byte ptr [esp+23Ch+var_210+1] cl +
ja loc_483940  +
mov ebx 1 +
mov ecx edx +
shl ebx cl +
test ebx 203h +
jz loc_483A35  +
lea ebp [esp+23Ch+var_20C] +
xor esi esi +
mov ecx eax +
movzx ebx al +
shr ecx 8 +
add ebp 4 +
mov edx ecx +
movzx ecx cl +
and edx 0Fh +
add ebx ecx +
movzx edx ds:byte_503B74[edx] +
add ebx esi +
mov [ebp-3] dl +
mov edx eax +
shr edx 0Ch +
and edx 0Fh +
movzx edx ds:byte_503B74[edx] +
mov [ebp-4] dl +
mov edx eax +
and edx 0Fh +
movzx edx ds:byte_503B74[edx] +
mov [ebp-1] dl +
mov edx eax +
shr edx 4 +
and edx 0Fh +
movzx edx ds:byte_503B74[edx] +
mov [ebp-2] dl +
jmp loc_483946  +
lea ebp [esp+23Ch+var_20C] +
xor ebx ebx +
cmp [esp+23Ch+arg_0] edi +
jnb loc_4839A1  +
mov eax [esp+23Ch+arg_0] +
mov edx ebp +
mov [esp+23Ch+var_224] ebx +
lea esi [esi+0] +
movzx ecx byte ptr [eax] +
add eax 1 +
add edx 2 +
add [esp+23Ch+var_224] ecx +
mov esi ecx +
and esi 0Fh +
movzx ebx ds:byte_503B74[esi] +
mov [edx-1] bl +
mov ebx ecx +
shr bl 4 +
movzx esi bl +
movzx ebx ds:byte_503B74[esi] +
mov [edx-2] bl +
cmp eax edi +
jnz loc_483960  +
sub eax [esp+23Ch+arg_0] +
mov ebx [esp+23Ch+var_224] +
lea ebp [ebp+eax*2+0] +
lea eax [esp+2Eh] +
mov edi ebp +
sub edi eax +
add ebp 4 +
mov esi edi +
shr esi 1Fh +
add esi edi +
mov ecx esi +
sar ecx 1 +
mov eax ecx +
movzx ecx cl +
and eax 0Fh +
add ebx ecx +
movzx eax ds:byte_503B74[eax] +
not ebx  +
movzx ebx bl +
lea edx [esp+23Ch+var_210] +
mov byte ptr [esp+23Ch+var_210+3] al +
mov eax esi +
sar eax 5 +
and eax 0Fh +
movzx eax ds:byte_503B74[eax] +
mov byte ptr [ebp-1] 0Ah +
mov byte ptr [esp+23Ch+var_210+2] al +
mov eax ebx +
and eax 0Fh +
movzx eax ds:byte_503B74[eax] +
shr ebx 4 +
mov byte ptr [ebp-2] 0Dh +
mov [ebp-3] al +
movzx eax ds:byte_503B74[ebx] +
mov [ebp-4] al +
mov eax [esp+23Ch+var_220] +
sub ebp edx +
mov [esp+23Ch+var_238] ebp +
mov [esp+23Ch+var_23C] edx +
mov [esp+23Ch+var_234] eax +
call sub_46FB80  +
cmp eax ebp +
setz al  +
add esp 23Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ebx 104h +
jnz loc_483A74  +
and ebx 88h +
jz loc_483940  +
mov ebx eax +
shr ebx 18h +
mov edx ebx +
and edx 0Fh +
movzx edx ds:byte_503B74[edx] +
lea ebp [esp+23Ch+var_20C+2] +
mov byte ptr [esp+23Ch+var_20C+1] dl +
mov edx eax +
shr edx 1Ch +
movzx edx ds:byte_503B74[edx] +
mov byte ptr [esp+23Ch+var_20C] dl +
jmp loc_483A7A  +
lea ebp [esp+23Ch+var_20C] +
xor ebx ebx +
mov ecx eax +
add ebp 2 +
shr ecx 10h +
mov edx ecx +
movzx ecx cl +
and edx 0Fh +
movzx edx ds:byte_503B74[edx] +
lea esi [ebx+ecx] +
mov [ebp-1] dl +
mov edx eax +
shr edx 14h +
and edx 0Fh +
movzx edx ds:byte_503B74[edx] +
mov [ebp-2] dl +
jmp loc_4838E3  +
***
mov eax ds:dword_5140A0 +
mov ebx [esp+18h+arg_0] +
test eax eax +
jz loc_483B10  +
mov [esp+18h+var_14] 18h +
mov [esp+18h+var_18] ebx +
call sub_458A80  +
test eax eax +
jz loc_483B21  +
mov [ebx+0A0h] eax +
mov dword ptr [eax+8] 1 +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+14h] 0 +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
mov ds:dword_5140A0 1 +
call nullsub_2  +
jmp loc_483AC1  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov edx [esp+2Ch] +
mov eax [esp+20h] +
mov esi [esp+24h] +
mov ebx [esp+28h] +
test edx edx +
jz loc_483B80  +
mov [esp+8] ebx +
mov [esp+4] esi +
mov [esp] eax +
call sub_45A8E0  +
mov eax [ebx+10h] +
mov edx [ebx+4] +
mov eax [eax] +
mov [esp+20h] esi +
mov [esp+2Ch] edx +
mov dword ptr [esp+24h] offset a5sS +
mov [esp+28h] eax +
add esp 14h +
pop ebx  +
pop esi  +
jmp fprintf  +
***
mov eax [ebx+4] +
mov [esp+20h] eax +
add esp 14h +
pop ebx  +
pop esi  +
jmp fputs  +
***
jmp sub_483BA0  +
***
sub esp 28h +
mov [esp+28h+var_20] eax +
lea eax [esp+28h+var_9] +
mov [esp+28h+var_24] 1 +
mov [esp+28h+var_28] eax +
call sub_46FAD0  +
cmp eax 1 +
jz loc_483BE0  +
call sub_44B8A0  +
mov edx eax +
mov eax 0FFFFFFFFh +
cmp edx 12h +
jz loc_483BDA  +
mov dword ptr [ebx] 1 +
add esp 28h +
pop ebx  +
retn   +
movzx eax byte ptr [esp+28h+var_9] +
add esp 28h +
pop ebx  +
retn   +
***
push ebp  +
mov eax 1 +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebp [esp+74h] +
mov esi [esp+6Ch] +
mov edi [esp+70h] +
test ebp ebp +
jz loc_483C28  +
mov eax esi +
xor ebx ebx +
mov edx edi +
add eax ebp +
adc edx ebx +
cmp ebx edx +
jle loc_483C30  +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jge loc_483C75  +
mov ebx [esp+64h] +
cmp edx 0 +
mov ecx [ebx+24h] +
jl loc_483C44  +
jg loc_483C1A  +
cmp eax ecx +
ja loc_483C1A  +
mov eax [esp+64h] +
mov eax [eax+8Ch] +
test eax eax +
jz loc_483C80  +
add eax esi +
mov [esp+4] eax +
mov eax [esp+68h] +
mov [esp+8] ebp +
mov [esp] eax +
call memcpy  +
add esp 4Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp ebp eax +
ja loc_483C1A  +
jmp loc_483C32  +
***
mov eax [esp+60h] +
mov [esp+4] ecx +
mov [esp] eax +
call sub_458A80  +
mov edx [esp+64h] +
mov ebx eax +
mov [esp+24h] eax +
mov [edx+8Ch] eax +
xor eax eax +
test ebx ebx +
jz loc_483C28  +
mov eax edx +
mov edx [edx+54h] +
mov eax [eax+50h] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+3Ch] 0 +
mov [esp+8] edx +
mov [esp+4] eax +
mov eax [esp+60h] +
mov [esp] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_483E52  +
mov dword ptr [esp+20h] 0 +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+1Ch] 0 +
mov [esp+28h] esi +
mov [esp+2Ch] edi +
mov [esp+74h] ebp +
nop   +
mov eax [esp+60h] +
lea edx [esp+3Ch] +
call sub_483BA0  +
cmp eax 0FFFFFFFFh +
jz loc_483F92  +
cmp eax 0Ah +
jz loc_483D00  +
cmp eax 0Dh +
nop   +
jz loc_483D00  +
cmp eax 53h +
jz loc_483D3B  +
mov dword ptr [esp+4] 2E3h +
mov dword ptr [esp] offset a____Binutil_28 +
call sub_44BA40  +
mov eax [esp+60h] +
mov dword ptr [esp+4] 3 +
mov [esp+8] eax +
lea eax [esp+39h] +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 3 +
jnz loc_483E42  +
movzx eax byte ptr [esp+3Ah] +
movzx eax ds:byte_50B4E0[eax] +
cmp al 63h +
jz loc_483E60  +
movzx edx byte ptr [esp+3Bh] +
movzx edx ds:byte_50B4E0[edx] +
cmp dl 63h +
jz loc_483E60  +
shl eax 4 +
lea ebp [eax+edx] +
lea ebx [ebp+ebp+0] +
cmp ebx [esp+20h] +
jbe loc_483DC1  +
mov eax [esp+18h] +
test eax eax +
jz loc_483DA9  +
mov [esp] eax +
call free  +
mov [esp] ebx +
call sub_459B80  +
test eax eax +
mov [esp+18h] eax +
jz loc_483E52  +
mov [esp+20h] ebx +
mov eax [esp+60h] +
mov [esp+4] ebx +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp] eax +
call sub_46FAD0  +
cmp ebx eax +
jnz loc_483E42  +
movzx eax byte ptr [esp+39h] +
cmp al 32h +
jz loc_483F7C  +
cmp al 33h +
jz loc_483E91  +
cmp al 31h +
jz loc_483F87  +
mov eax [esp+64h] +
mov ebx [esp+1Ch] +
mov esi [esp+28h] +
mov ebp [esp+74h] +
cmp [eax+24h] ebx +
jz loc_483E23  +
mov dword ptr [esp+4] 2FEh +
mov dword ptr [esp] offset a____Binutil_28 +
call sub_44BA40  +
mov eax [esp+18h] +
test eax eax +
jz loc_483E33  +
mov [esp] eax +
call free  +
mov eax [esp+64h] +
mov eax [eax+8Ch] +
jmp loc_483C52  +
***
mov eax [esp+18h] +
test eax eax +
jz loc_483E52  +
mov [esp] eax +
call free  +
xor eax eax +
jmp loc_483C28  +
***
mov dword ptr [esp+4] 2E8h +
mov dword ptr [esp] offset a____Binutil_28 +
call sub_44BA40  +
movzx eax byte ptr [esp+3Ah] +
movzx edx byte ptr [esp+3Bh] +
movzx eax ds:byte_50B4E0[eax] +
movzx edx ds:byte_50B4E0[edx] +
jmp loc_483D89  +
***
mov edi [esp+18h] +
sub ebp 1 +
movzx eax byte ptr [edi] +
lea edx [edi+2] +
movzx ecx byte ptr [edi+1] +
movzx eax ds:byte_50B4E0[eax] +
movzx ebx ds:byte_50B4E0[ecx] +
shl eax 4 +
add ebx eax +
shl ebx 8 +
movzx eax byte ptr [edx] +
lea ecx [edx+2] +
sub ebp 1 +
movzx edx byte ptr [edx+1] +
movzx eax ds:byte_50B4E0[eax] +
movzx edx ds:byte_50B4E0[edx] +
shl eax 4 +
add edx eax +
or edx ebx +
shl edx 8 +
movzx eax byte ptr [ecx] +
movzx ebx byte ptr [ecx+1] +
mov edi [esp+64h] +
movzx eax ds:byte_50B4E0[eax] +
movzx ebx ds:byte_50B4E0[ebx] +
shl eax 4 +
add eax ebx +
movzx ebx byte ptr [ecx+2] +
or eax edx +
lea edx [ecx+4] +
movzx ecx byte ptr [ecx+3] +
shl eax 8 +
movzx ebx ds:byte_50B4E0[ebx] +
movzx ecx ds:byte_50B4E0[ecx] +
shl ebx 4 +
add ecx ebx +
or eax ecx +
mov ecx [esp+1Ch] +
add ecx [edi+1Ch] +
cmp eax ecx +
jnz loc_483FD0  +
cmp ebp 3 +
jz loc_483D00  +
mov eax [esp+24h] +
lea edi [ebp-3] +
xor ecx ecx +
mov esi [esp+1Ch] +
add esi eax +
movzx eax byte ptr [edx] +
add edx 2 +
movzx ebx byte ptr [edx-1] +
movzx eax ds:byte_50B4E0[eax] +
shl eax 4 +
add al ds:byte_50B4E0[ebx] +
mov [esi+ecx] al +
add ecx 1 +
cmp ecx edi +
jnz loc_483F47  +
mov eax [esp+1Ch] +
lea eax [ebp+eax-3] +
mov [esp+1Ch] eax +
jmp loc_483D00  +
***
mov edx [esp+18h] +
xor ebx ebx +
jmp loc_483EB8  +
***
mov ecx [esp+18h] +
xor edx edx +
jmp loc_483EDD  +
***
mov eax [esp+3Ch] +
mov esi [esp+28h] +
mov ebp [esp+74h] +
test eax eax +
jnz loc_483E42  +
mov eax [esp+64h] +
mov ebx [esp+1Ch] +
cmp ebx [eax+24h] +
jz loc_483E23  +
mov dword ptr [esp+4] 32Eh +
mov dword ptr [esp] offset a____Binutil_28 +
call sub_44BA40  +
jmp loc_483E23  +
***
mov eax [esp+64h] +
mov ebx [esp+1Ch] +
mov esi [esp+28h] +
mov ebp [esp+74h] +
cmp ebx [eax+24h] +
jz loc_483E23  +
mov dword ptr [esp+4] 317h +
mov dword ptr [esp] offset a____Binutil_28 +
call sub_44BA40  +
jmp loc_483E23  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
test edx edx +
mov [esp+10h] eax +
mov eax [eax+0A0h] +
mov [esp+1Ch] eax +
jz loc_484038  +
mov eax [esp+10h] +
mov ebx [eax+7Ch] +
test ebx ebx +
jnz loc_484184  +
mov esi [esp+10h] +
mov ebx [esi] +
mov [esp] ebx +
call strlen  +
mov edx 28h +
mov [esp] ebx +
cmp eax 28h +
cmovbe edx eax +
xor ecx ecx +
add edx ebx +
mov eax esi +
mov [esp+4] edx +
xor edx edx +
call sub_4838A0  +
test eax eax +
jz loc_48411A  +
mov eax [esp+1Ch] +
mov eax [eax] +
test eax eax +
mov [esp+0Ch] eax +
jz loc_484136  +
nop   +
mov eax [esp+0Ch] +
mov edi [eax+4] +
mov eax dword_4C0160 +
test eax eax +
jnz loc_484165  +
mov dword_4C0160 1 +
mov eax [esp+0Ch] +
mov ebx [eax+0Ch] +
test ebx ebx +
jz loc_484124  +
xor ebp ebp +
mov eax ebp +
mov ebp edi +
mov edi eax +
jmp loc_4840C2  +
mov eax [esp+0Ch] +
add edi ebx +
mov ebx [eax+0Ch] +
cmp ebx edi +
jbe loc_484124  +
mov ebp esi +
mov eax dword_4C0160 +
sub ebx edi +
cmp ebx eax +
cmova ebx eax +
mov eax [esp+0Ch] +
lea esi [ebp+ebx+0] +
mov edx [eax+8] +
mov eax [esp+10h] +
mov [esp+14h] edx +
mov [esp] eax +
call sub_4537D0  +
mov edx [esp+1Ch] +
mov edx [edx+8] +
mov [esp+4] esi +
mov ecx eax +
mov eax edi +
mov [esp] ebp +
mov [esp+18h] edx +
xor edx edx +
div  ecx +
mov ecx [esp+14h] +
mov edx [esp+18h] +
add ecx eax +
mov eax [esp+10h] +
call sub_4838A0  +
test eax eax +
jnz loc_4840B3  +
add esp 5Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+0Ch] +
mov eax [eax] +
test eax eax +
mov [esp+0Ch] eax +
jnz loc_484080  +
mov eax [esp+10h] +
mov edx 0Ah +
mov esi [esp+1Ch] +
mov ecx [eax+74h] +
sub edx [esi+8] +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp] 0 +
call sub_4838A0  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [esp+1Ch] +
mov edx 0FDh +
sub edx [esi+8] +
cmp eax edx +
jbe loc_48409E  +
mov dword_4C0160 edx +
jmp loc_48409E  +
***
mov esi [eax+78h] +
mov edi eax +
mov eax [eax] +
mov [esp+0Ch] esi +
mov [esp] eax +
call strlen  +
mov [esp+8] edi +
mov dword ptr [esp+4] 3 +
mov dword ptr [esp] offset asc_503723 +
mov esi eax +
call sub_46FB80  +
cmp eax 3 +
jnz loc_48411A  +
mov edi [esp+10h] +
mov eax [edi] +
mov [esp+8] edi +
mov [esp+4] esi +
mov [esp] eax +
call sub_46FB80  +
cmp esi eax +
jnz loc_48411A  +
mov eax [esp+10h] +
mov dword ptr [esp+4] 2 +
mov dword ptr [esp] offset asc_503727 +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 2 +
jnz loc_48411A  +
xor edi edi +
test ebx ebx +
lea ebp [esp+27h] +
jle loc_484322  +
mov [esp+14h] ebx +
jmp loc_48421E  +
add edi 1 +
cmp [esp+14h] edi +
jz loc_484322  +
mov eax [esp+0Ch] +
mov ebx [eax+edi*4] +
mov eax [esp+10h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_45A860  +
test eax eax +
jnz loc_484211  +
test byte ptr [ebx+0Ch] 4 +
jnz loc_484211  +
mov eax [ebx+4] +
mov [esp] eax +
call strlen  +
mov dword ptr [esp+4] 2 +
mov dword ptr [esp] offset asc_503730 +
mov esi eax +
mov eax [esp+10h] +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 2 +
jnz loc_48411A  +
mov eax [ebx+4] +
mov ecx [esp+10h] +
mov [esp+4] esi +
mov [esp] eax +
mov [esp+8] ecx +
call sub_46FB80  +
cmp esi eax +
jnz loc_48411A  +
mov ecx [ebx+10h] +
mov eax [ecx+3Ch] +
mov eax [eax+20h] +
add eax [ebx+8] +
add eax [ecx+38h] +
mov dword ptr [esp+4] offset a08lx_3 +
mov [esp] ebp +
mov [esp+8] eax +
call sprintf  +
cmp byte ptr [esp+27h] 30h +
jnz loc_48431E  +
movzx eax byte ptr [esp+28h] +
mov esi ebp +
test al al +
jnz loc_4842CF  +
jmp loc_4842D6  +
movzx eax byte ptr [esi+1] +
test al al +
jz loc_4842D6  +
add esi 1 +
cmp al 30h +
jz loc_4842C7  +
mov [esp] esi +
sub esi 2 +
call strlen  +
mov byte ptr [esi+eax+2] 0Dh +
lea edx [eax+4] +
mov byte ptr [esi+eax+3] 0Ah +
mov eax [esp+10h] +
mov byte ptr [esi+1] 24h +
mov byte ptr [esi] 20h +
mov [esp+4] edx +
mov [esp+8] eax +
mov [esp] esi +
mov [esp+18h] edx +
call sub_46FB80  +
mov edx [esp+18h] +
cmp edx eax +
jz loc_484211  +
jmp loc_48411A  +
***
mov esi ebp +
jmp loc_4842D6  +
***
mov eax [esp+10h] +
mov dword ptr [esp+4] 5 +
mov dword ptr [esp] offset asc_50372A +
mov [esp+8] eax +
call sub_46FB80  +
cmp eax 5 +
jnz loc_48411A  +
jmp loc_484038  +
***
mov eax [esp+4] +
xor edx edx +
jmp loc_484010  +
***
mov eax [esp+4] +
mov edx 1 +
jmp loc_484010  +
***
sub esp 54h +
cmp ecx 0FFFFFFFFh +
jz loc_4843C1  +
mov ebx eax +
movzx eax cl +
test byte ptr ds:word_509C60[eax+eax] 10h +
jz loc_4843D7  +
mov byte ptr [esp+54h+var_2C] cl +
lea esi [esp+54h+var_2C] +
mov byte ptr [esp+54h+var_2C+1] 0 +
mov [esp+54h+var_48] esi +
mov [esp+54h+var_4C] edx +
mov [esp+54h+var_50] ebx +
mov [esp+54h+var_54] offset aBDUnexpectedCh +
call off_4BFA04  +
mov [esp+54h+var_54] 11h +
call sub_44BAF0  +
add esp 54h +
pop ebx  +
pop esi  +
retn   +
mov eax [esp+54h+arg_0] +
test eax eax +
jnz loc_4843BB  +
mov [esp+54h+var_54] 12h +
call sub_44BAF0  +
jmp loc_4843BB  +
lea esi [esp+54h+var_2C] +
mov [esp+54h+var_4C] eax +
mov [esp+54h+var_50] offset a03o_0 +
mov [esp+54h+var_54] esi +
mov [esp+54h+var_38] edx +
call sprintf  +
mov edx [esp+54h+var_38] +
jmp loc_484396  +
***
push edi  +
lea edx [esp+arg_44] +
mov eax ebp +
call sub_483BA0  +
cmp eax 0FFFFFFFFh +
jz loc_484AEE  +
cmp eax 0Dh +
jz loc_48447B  +
cmp eax 53h +
jnz loc_4845A0  +
cmp eax 20h +
nop   +
jz loc_4845C0  +
jle loc_4846A5  +
cmp eax 24h +
nop   +
jz loc_48468B  +
cmp eax 53h +
jnz loc_4846B3  +
mov [esp+0] ebp +
call sub_46FC00  +
mov [esp+arg_4] ebp +
mov [esp+arg_0] 3 +
mov [esp+arg_2C] eax +
lea eax [esp+arg_41] +
mov [esp+0] eax +
mov [esp+arg_30] edx +
call sub_46FAD0  +
cmp eax 3 +
jnz loc_484734  +
movzx ecx byte ptr [esp+46h] +
movzx eax ds:byte_50B4E0[ecx] +
cmp al 63h +
jz loc_484BE1  +
movzx ecx [esp+arg_43] +
movzx edx ds:byte_50B4E0[ecx] +
cmp dl 63h +
jz loc_484BE1  +
shl eax 4 +
lea esi [eax+edx] +
movzx eax [esp+arg_41] +
mov ebx esi +
cmp al 38h +
jz loc_484752  +
cmp al 32h +
jz loc_484752  +
and eax 0FFFFFFFBh +
cmp al 33h +
setz al  +
movzx eax al +
lea eax [eax+eax+3] +
cmp eax esi +
ja loc_484BF8  +
lea edi [esi+esi] +
cmp [esp+arg_34] edi +
jnb loc_48455E  +
mov eax [esp+arg_20] +
test eax eax +
jz loc_484546  +
mov [esp+0] eax +
call free  +
mov [esp+0] edi +
call sub_459B80  +
test eax eax +
mov [esp+arg_20] eax +
jz loc_484678  +
mov [esp+arg_34] edi +
mov eax [esp+arg_20] +
mov [esp+arg_4] ebp +
mov [esp+arg_0] edi +
mov [esp+0] eax +
call sub_46FAD0  +
cmp edi eax +
jnz loc_484734  +
lea eax [esi-1] +
mov [esp+arg_18] eax +
movzx eax [esp+arg_41] +
sub eax 30h +
cmp al 9 +
ja sub_484459  +
movzx eax al +
jmp ds:off_5037C4[eax*4]  +
***
cmp eax 0Ah +
jz loc_48469B  +
cmp eax 20h +
mov [esp+arg_28] 0 +
jnz loc_484486  +
lea esi [esi+0] +
lea edx [esp+arg_44] +
mov eax ebp +
call sub_483BA0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_48471D  +
cmp eax 9 +
jz loc_4845C0  +
cmp eax 20h +
jz loc_4845C0  +
cmp eax 0Ah +
jz loc_484BCD  +
cmp eax 0Dh +
jz loc_484BCD  +
mov dword ptr [esp+0] 0Bh +
call sub_459B80  +
test eax eax +
mov esi eax +
jz loc_484734  +
mov [eax] bl +
lea edi [eax+1] +
mov ebx 0Ah +
jmp loc_484619  +
mov [edi] dl +
add edi 1 +
lea edx [esp+arg_44] +
mov eax ebp +
call sub_483BA0  +
cmp eax 0FFFFFFFFh +
mov edx eax +
jz loc_484C26  +
movzx eax al +
test byte ptr ds:word_509C60[eax+eax] 40h +
jnz loc_4846D0  +
mov ecx edi +
sub ecx esi +
cmp ebx ecx +
ja loc_484614  +
add ebx ebx +
lea eax [ebx+1] +
mov [esp+arg_0] eax +
mov [esp+0] esi +
mov [esp+arg_1C] ecx +
mov [esp+arg_18] edx +
call sub_459C10  +
test eax eax +
jz loc_484C3D  +
mov ecx [esp+arg_1C] +
mov esi eax +
mov edx [esp+arg_18] +
lea edi [eax+ecx] +
jmp loc_484614  +
xor eax eax +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 0FFFFFFFFh +
jz loc_48471D  +
lea edx [esp-7Ch+arg_C0] +
mov eax ebp +
call sub_483BA0  +
cmp eax 0Ah +
jnz loc_484682  +
add [esp-7Ch+arg_A0] 1 +
jmp sub_484459  +
cmp eax 0Ah +
jz loc_48469B  +
cmp eax 0Dh +
jz sub_484459  +
mov edx [esp+arg_44] +
mov ecx eax +
mov eax ebp +
mov [esp+0] edx +
mov edx [esp+arg_24] +
call sub_484370  +
jmp loc_484734  +
***
mov eax [esp+arg_20] +
mov eax [esp+arg_20] +
mov eax [esp+arg_20] +
mov eax [esp+arg_20] +
mov [esp+arg_28] 0 +
mov edi ebx +
mov edi [esp+arg_20] +
movzx eax byte ptr [edi] +
movzx edx ds:byte_50B4E0[eax] +
movzx eax byte ptr [edi+1] +
movzx ecx ds:byte_50B4E0[eax] +
mov eax edx +
shl eax 4 +
shl edx 4 +
lea ebx [ecx+esi] +
add ecx edx +
add ebx eax +
mov eax edi +
lea edi [esi-2] +
add eax 2 +
mov [esp+arg_18] edi +
shl ecx 8 +
jmp loc_48485B  +
***
mov eax [esp+arg_20] +
test eax eax +
jz loc_484AE4  +
mov [esp+0] eax +
call free  +
mov eax 1 +
jmp loc_48467A  +
mov eax [esp+arg_44] +
test eax eax +
jnz loc_484734  +
mov ebx [esp+arg_20] +
mov eax 1 +
test ebx ebx +
jz loc_48467A  +
mov [esp+0] ebx +
mov [esp+arg_18] eax +
call free  +
mov eax [esp+arg_18] +
jmp loc_48467A  +
***
add eax edi +
mov [ecx+24h] eax +
jmp loc_4849D4  +
***
cmp eax 20h +
jz loc_48470D  +
cmp eax 24h +
mov ebx eax +
jz loc_484C4A  +
xor esi esi +
mov eax ebx +
jmp loc_484B69  +
***
shl esi 4 +
mov eax ebp +
add esi edx +
lea edx [esp+arg_44] +
call sub_483BA0  +
cmp eax 0FFFFFFFFh +
jz loc_48471D  +
movzx edx al +
movzx edx ds:byte_50B4E0[edx] +
cmp dl 63h +
jnz loc_484B50  +
mov [esp+arg_0] 0Ch +
mov ebx eax +
mov [esp+0] ebp +
call sub_458A80  +
test eax eax +
jz loc_484734  +
mov [eax+4] edi +
mov [eax+8] esi +
mov edx [ebp+0A0h] +
mov ecx [edx+0Ch] +
test ecx ecx +
jz loc_484C65  +
mov ecx [edx+10h] +
mov [ecx] eax +
mov [edx+10h] eax +
mov dword ptr [eax] 0 +
add dword ptr [ebp+7Ch] 1 +
cmp ebx 9 +
jz loc_4845C0  +
cmp ebx 20h +
jz loc_4845C0  +
cmp ebx 0Ah +
jz loc_48469B  +
cmp ebx 0Dh +
jz sub_484459  +
mov ecx ebx +
mov eax [esp+arg_44] +
mov edx [esp+arg_24] +
mov [esp+0] eax +
mov eax ebp +
call sub_484370  +
jmp loc_484734  +
mov eax [esp+arg_24] +
mov [esp+arg_8] esi +
mov [esp+arg_0] ebp +
mov dword ptr [esp+0] offset aBDByteCountDTo +
mov [esp+arg_4] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
jmp loc_484734  +
mov eax [esp+arg_44] +
mov ecx 0FFFFFFFFh +
mov edx [esp+arg_24] +
mov [esp+0] eax +
mov eax ebp +
call sub_484370  +
mov [esp+0] esi +
call free  +
jmp loc_484734  +
lea edx [esp+arg_44] +
mov eax ebp +
call sub_483BA0  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jnz loc_484B44  +
jmp loc_48471D  +
mov [edx+0Ch] eax +
jmp loc_484BAE  +
***
push esi  +
push ebx  +
sub esp 24h +
mov edx ds:dword_5140A0 +
mov ebx [esp+30h] +
test edx edx +
jz loc_484D45  +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_484D3D  +
lea eax [esp+1Ch] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 4 +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 4 +
jnz loc_484D3D  +
cmp byte ptr [esp+1Ch] 53h +
jnz loc_484D31  +
movzx eax byte ptr [esp+1Dh] +
cmp ds:byte_50B4E0[eax] 63h +
jz loc_484D31  +
movzx eax byte ptr [esp+1Eh] +
cmp ds:byte_50B4E0[eax] 63h +
jz loc_484D31  +
movzx eax byte ptr [esp+1Fh] +
cmp ds:byte_50B4E0[eax] 63h +
jz loc_484D31  +
mov esi [ebx+0A0h] +
mov [esp] ebx +
call sub_483AB0  +
test eax eax +
jz loc_484D60  +
mov eax ebx +
call sub_484400  +
test eax eax +
jz loc_484D60  +
mov eax [ebx+7Ch] +
test eax eax +
jz loc_484D28  +
or dword ptr [ebx+28h] 200h +
mov eax [ebx+4] +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
add esp 24h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
mov ds:dword_5140A0 1 +
call nullsub_2  +
jmp loc_484C87  +
***
mov eax [ebx+0A0h] +
cmp eax esi +
jz loc_484D7A  +
test eax eax +
jz loc_484D7A  +
mov [esp+4] eax +
mov [esp] ebx +
call sub_458CD0  +
mov [ebx+0A0h] esi +
add esp 24h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 24h +
mov edx ds:dword_5140A0 +
mov ebx [esp+30h] +
test edx edx +
jz loc_484E44  +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_484E3C  +
lea eax [esp+1Eh] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 2 +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 2 +
jnz loc_484E3C  +
cmp byte ptr [esp+1Eh] 24h +
jnz loc_484E30  +
cmp byte ptr [esp+1Fh] 24h +
jnz loc_484E30  +
mov esi [ebx+0A0h] +
mov [esp] ebx +
call sub_483AB0  +
test eax eax +
jz loc_484E58  +
mov eax ebx +
call sub_484400  +
test eax eax +
jz loc_484E58  +
mov eax [ebx+7Ch] +
test eax eax +
jz loc_484E21  +
or dword ptr [ebx+28h] 200h +
mov eax [ebx+4] +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
***
mov ds:dword_5140A0 1 +
call nullsub_2  +
jmp loc_484DA7  +
***
mov eax [ebx+0A0h] +
cmp esi eax +
jz loc_484E72  +
test eax eax +
jz loc_484E72  +
mov [esp+4] eax +
mov [esp] ebx +
call sub_458CD0  +
mov [ebx+0A0h] esi +
xor eax eax +
jmp loc_484E3E  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+30h] +
mov ebp [esp+3Ch] +
mov edi [ebx+0A0h] +
mov dword ptr [esp+4] 10h +
mov [esp] ebx +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_484F53  +
mov edx [esp+44h] +
test edx edx +
jz loc_484EC6  +
mov eax [esp+34h] +
mov eax [eax+14h] +
and eax 3 +
cmp eax 3 +
jz loc_484ED3  +
mov eax 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+44h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_484F53  +
mov eax [esp+44h] +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+38h] +
mov [esp+4] eax +
call memcpy  +
mov eax [esp+34h] +
mov [esi+4] ebx +
add ebp [eax+20h] +
mov eax [esp+44h] +
mov [esi+8] ebp +
mov [esi+0Ch] eax +
mov eax [edi+4] +
test eax eax +
jz loc_484F21  +
cmp ebp [eax+8] +
jnb loc_484F60  +
mov edx [edi] +
mov eax edi +
test edx edx +
jnz loc_484F38  +
jmp loc_484F3D  +
mov eax edx +
mov edx [edx] +
test edx edx +
jz loc_484F3D  +
cmp ebp [edx+8] +
ja loc_484F30  +
mov [esi] edx +
mov [eax] esi +
mov eax [esi] +
test eax eax +
jnz loc_484EC6  +
mov [edi+4] esi +
jmp loc_484EC6  +
***
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [eax] esi +
mov eax 1 +
mov dword ptr [esi] 0 +
mov [edi+4] esi +
jmp loc_484ECB  +
***
mov eax [esp+8] +
mov edx [esp+4] +
test eax eax +
jnz loc_484FA0  +
mov dword ptr [edx+84h] offset asc_4FE3C0 +
mov eax 1 +
retn   +
***
jmp sub_453750  +
***
push ebx  +
sub esp 18h +
mov eax ds:dword_5140A4 +
mov ebx [esp+20h] +
test eax eax +
jz loc_484FF2  +
mov dword ptr [esp+4] 8 +
mov [esp] ebx +
call sub_458A80  +
test eax eax +
jz loc_485003  +
mov [ebx+0A0h] eax +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
***
mov ds:dword_5140A4 1 +
call nullsub_2  +
jmp loc_484FC1  +
***
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+80h] +
mov eax [eax+0A0h] +
mov eax [eax] +
test eax eax +
mov [esp+1Ch] eax +
jz loc_4851CA  +
lea edi [esp+2Eh] +
mov ebx [esp+1Ch] +
mov eax [ebx+8] +
mov esi [ebx+4] +
mov dword ptr [esp+4] 0Bh +
mov [esp] edi +
mov edx eax +
shr edx 18h +
mov ebp esi +
and edx 0Fh +
movzx edx ds:byte_503D74[edx] +
mov byte ptr [esp+2Eh] 40h +
mov byte ptr [esp+37h] 0Dh +
mov byte ptr [esp+38h] 0Ah +
mov [esp+30h] dl +
mov edx eax +
shr edx 1Ch +
movzx edx ds:byte_503D74[edx] +
mov [esp+2Fh] dl +
mov edx eax +
shr edx 10h +
and edx 0Fh +
movzx edx ds:byte_503D74[edx] +
mov [esp+32h] dl +
mov edx eax +
shr edx 14h +
and edx 0Fh +
movzx edx ds:byte_503D74[edx] +
mov [esp+31h] dl +
mov edx eax +
shr edx 8 +
and edx 0Fh +
movzx edx ds:byte_503D74[edx] +
mov [esp+34h] dl +
mov edx eax +
shr edx 0Ch +
and edx 0Fh +
movzx edx ds:byte_503D74[edx] +
mov [esp+33h] dl +
mov edx eax +
shr eax 4 +
and edx 0Fh +
and eax 0Fh +
movzx edx ds:byte_503D74[edx] +
movzx eax ds:byte_503D74[eax] +
mov [esp+36h] dl +
mov [esp+35h] al +
mov eax [esp+80h] +
mov [esp+8] eax +
call sub_46FB80  +
mov esi [ebx+0Ch] +
test esi esi +
jz loc_4851B8  +
mov dword ptr [esp+14h] 0 +
mov eax esi +
sub eax [esp+14h] +
mov edx 10h +
mov esi ebp +
cmp eax 10h +
cmova eax edx +
lea ebp [ebp+eax+0] +
cmp ebp esi +
mov [esp+18h] eax +
jbe loc_4851D7  +
mov edx esi +
mov eax edi +
movzx ebx byte ptr [edx] +
add edx 1 +
add eax 3 +
mov ecx ebx +
and ecx 0Fh +
movzx ecx ds:byte_503D74[ecx] +
shr bl 4 +
movzx ebx bl +
mov [eax-2] cl +
movzx ecx ds:byte_503D74[ebx] +
mov [eax-3] cl +
cmp edx ebp +
mov byte ptr [eax-1] 20h +
jnz loc_485136  +
add esi 1 +
mov eax 1 +
sub eax esi +
add eax ebp +
lea ebx [eax+eax*2] +
add ebx edi +
mov eax [esp+80h] +
add ebx 2 +
mov byte ptr [ebx-2] 0Dh +
mov byte ptr [ebx-1] 0Ah +
sub ebx edi +
mov [esp+4] ebx +
mov [esp+8] eax +
mov [esp] edi +
call sub_46FB80  +
cmp ebx eax +
jnz loc_4851DB  +
mov eax [esp+18h] +
add [esp+14h] eax +
mov eax [esp+1Ch] +
mov eax [eax+0Ch] +
cmp eax [esp+14h] +
ja loc_485111  +
mov eax [esp+1Ch] +
mov eax [eax] +
test eax eax +
mov [esp+1Ch] eax +
jnz loc_485036  +
add esp 6Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ebx edi +
jmp loc_485177  +
***
add esp 6Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi eax +
push esi  +
push ebx  +
sub esp 4 +
mov eax [eax] +
mov [esp+0Ch+var_C] edx +
movzx edx byte ptr [eax] +
movzx ebx ds:byte_50B4E0[edx] +
cmp bl 63h +
jz loc_485272  +
test ebx ebx +
mov esi 0Fh +
lea edx [eax+1] +
lea ebp [ebx-1] +
cmovnz esi ebp +
cmp edx ecx +
jnb loc_485284  +
movzx eax byte ptr [eax+1] +
movzx eax ds:byte_50B4E0[eax] +
cmp al 63h +
jz loc_485272  +
sub esi 1 +
xor ebx ebx +
jmp loc_48524C  +
cmp edx ecx +
jz loc_485280  +
movzx eax byte ptr [edx] +
sub esi 1 +
movzx eax ds:byte_50B4E0[eax] +
cmp al 63h +
jz loc_485272  +
shl ebx 4 +
add edx 1 +
mov ebp ebx +
movzx ebx al +
or ebx ebp +
cmp esi 0FFFFFFFFh +
jnz loc_485237  +
mov eax 1 +
mov [edi] edx +
mov edi [esp+0Ch+var_C] +
mov [edi] ebx +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 4 +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_485263  +
xor eax eax +
xor ebx ebx +
jmp loc_485263  +
***
push esi  +
push ebx  +
sub esp 4 +
mov edi [edx] +
movzx ebx byte ptr [edi] +
movzx ebx ds:byte_50B4E0[ebx] +
cmp bl 63h +
jz loc_4852F0  +
movzx esi bl +
mov ebx 10h +
test esi esi +
lea ebp [edi+1] +
cmovz esi ebx +
cmp ebp [esp+4+arg_0] +
jnb loc_4852FA  +
xor bl bl +
mov [esp+4+var_4] edx +
movzx edx byte ptr [edi+ebx+1] +
mov [eax+ebx] dl +
add ebx 1 +
cmp esi ebx +
ja loc_4852C3  +
mov edx [esp+4+var_4] +
mov byte ptr [eax+ebx] 0 +
add ebp ebx +
xor eax eax +
cmp ebx esi +
mov [edx] ebp +
setz al  +
mov [ecx] esi +
add esp 4 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 4 +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ebx ebx +
jmp loc_4852D5  +
***
mov [ecx-4] edx +
mov edx [edx+18h] +
sub ecx 4 +
test edx edx +
jnz loc_485325  +
retn   +
***
mov eax [esp+4] +
mov eax [eax+7Ch] +
lea eax ds:4[eax*4] +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov ebx 8 +
sub esp 0Ch +
mov esi [eax] +
mov [esp+18h+var_18] edx +
mov edi edx +
shr edi cl +
and edi 0Fh +
jnz loc_485390  +
sub ebx 1 +
sub ecx 4 +
cmp ebx 1 +
jnz loc_485366  +
mov byte ptr [esi] 31h +
add esi 2 +
mov byte ptr [esi-1] 30h +
mov [eax] esi +
add esp 0Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+18h+var_18] edx +
lea edi [ebx+30h] +
lea edx [esi+1] +
mov ebp edx +
mov [esp+18h+var_14] edx +
mov edx edi +
mov [esi] dl +
mov edx [esp+18h+var_18] +
lea edi [esi+ebx+1] +
mov [esp+18h+var_10] eax +
mov esi ebp +
mov ebp edx +
add esi 1 +
shr ebp cl +
sub ecx 4 +
and ebp 0Fh +
cmp esi edi +
movzx eax ss:byte_504094[ebp] +
mov [esi-1] al +
jnz loc_4853B0  +
mov eax [esp+18h+var_10] +
add ebx [esp+18h+var_14] +
mov [eax] ebx +
add esp 0Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor eax eax +
retn   +
***
push ebx  +
and edx 0FFFFE000h +
sub esp 14h +
mov eax [eax+0A0h] +
mov ebx [eax+0Ch] +
test ebx ebx +
jnz loc_48541A  +
jmp loc_485430  +
mov ebx [ebx+2104h] +
test ebx ebx +
jz loc_485430  +
cmp [ebx+2100h] edx +
jnz loc_485410  +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
xor ebx ebx +
test ecx ecx +
mov [esp+18h+var_C] edx +
jz loc_485422  +
mov [esp+18h+var_14] 2108h +
mov [esp+18h+var_18] esi +
call sub_458B60  +
test eax eax +
jz loc_485422  +
mov ecx [esi+0A0h] +
mov ebx eax +
mov edx [esp+18h+var_C] +
mov ecx [ecx+0Ch] +
mov [eax+2100h] edx +
mov [eax+2104h] ecx +
mov edx [esi+0A0h] +
mov [edx+0Ch] eax +
add esp 14h +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 18h +
mov ebx [esp+20h] +
mov dword ptr [esp+4] 1Ch +
mov [esp] ebx +
call sub_458B60  +
test eax eax +
jz loc_4854A5  +
mov [eax] ebx +
mov dword ptr [eax+18h] 0 +
add esp 18h +
pop ebx  +
retn   +
***
push ebx  +
sub esp 18h +
mov eax [esp+28h] +
mov ebx [esp+24h] +
mov [esp+8] eax +
mov eax [esp+20h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_453750  +
mov edx 1 +
test eax eax +
jnz loc_4854E0  +
xor edx edx +
test ebx ebx +
setz dl  +
add esp 18h +
mov eax edx +
pop ebx  +
retn   +
***
push edi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 10h +
test edx edx +
mov edi [eax] +
jz loc_4856B5  +
mov [esp+14h+var_14] edx +
call strlen  +
cmp eax 0Fh +
jle loc_4856A0  +
lea edx [edi+1] +
mov eax 0Fh +
mov byte ptr [edi] 30h +
lea edi [eax+1] +
xor ecx ecx +
lea esi [esi+0] +
movzx eax byte ptr [ebx+ecx] +
mov [edx+ecx] al +
add ecx 1 +
cmp ecx edi +
jnz loc_485680  +
add ecx edx +
mov [esi] ecx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
test eax eax +
jz loc_4856B5  +
movzx ecx ds:byte_504094[eax] +
lea edx [edi+1] +
sub eax 1 +
mov [edi] cl +
jmp loc_485678  +
lea edx [edi+1] +
xor eax eax +
mov byte ptr [edi] 31h +
mov ebx offset asc_503DBC +
jmp loc_485678  +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_14] 10h +
mov [esp+18h+var_18] ebx +
call sub_458A80  +
test eax eax +
jz loc_485717  +
mov [ebx+0A0h] eax +
mov dword ptr [eax+4] 1 +
mov dword ptr [eax] 0 +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+0Ch] 0 +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_4] +
mov ebp [esp+4Ch+arg_0] +
mov ebx [esp+4Ch+arg_C] +
cmp eax 33h +
jz loc_4857F0  +
cmp eax 36h +
jnz loc_4857E1  +
lea edx [esp+4Ch+var_20] +
mov ecx ebx +
lea eax [esp+4Ch+arg_8] +
call sub_4851F0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_4857E6  +
mov eax [esp+4Ch+arg_8] +
movzx edx byte ptr [eax] +
mov ecx eax +
test dl dl +
jz loc_4857E1  +
lea edi [ebx-1] +
cmp eax edi +
jnb loc_4857E1  +
mov esi [esp+4Ch+var_20] +
jmp loc_485786  +
cmp eax edi +
jnb loc_4857E1  +
mov ecx eax +
movzx ecx byte ptr [ecx+1] +
movzx edx ds:byte_50B4E0[edx] +
movzx ebx ds:byte_50B4E0[ecx] +
shl edx 4 +
add ebx edx +
jz loc_4857C9  +
mov edx esi +
mov ecx 1 +
mov eax ebp +
and esi 1FFFh +
call sub_4853F0  +
mov [eax+esi] bl +
shr esi 5 +
mov byte ptr [eax+esi+2000h] 1 +
mov eax [esp+4Ch+arg_8] +
mov esi [esp+4Ch+var_20] +
mov edx eax +
add esi 1 +
add eax 2 +
mov [esp+4Ch+arg_8] eax +
mov [esp+4Ch+var_20] esi +
movzx edx byte ptr [edx+2] +
test dl dl +
jnz loc_485780  +
mov eax 1 +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_4C] ebx +
lea ecx [esp+4Ch+var_28] +
lea edx [esp+4Ch+arg_8] +
lea eax [esp+4Ch+var_20] +
call sub_485290  +
test eax eax +
jnz loc_485812  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] ebp +
call sub_44D4B0  +
test eax eax +
mov esi eax +
jz loc_485A52  +
lea eax [esi+1Ch] +
mov [esp+4Ch+var_30] 0 +
mov [esp+4Ch+var_38] eax +
mov edx [esp+4Ch+arg_8] +
cmp ebx edx +
jbe loc_4857E1  +
movzx ecx byte ptr [edx] +
test cl cl +
jz loc_4857E1  +
sub ecx 30h +
cmp cl 8 +
ja loc_485808  +
mov eax 1 +
shl eax cl +
test eax 1DDh +
jnz loc_4858D0  +
test al 2 +
jz loc_485808  +
add edx 1 +
mov ecx ebx +
mov [esp+4Ch+arg_8] edx +
mov edx [esp+4Ch+var_38] +
lea eax [esp+4Ch+arg_8] +
call sub_4851F0  +
test eax eax +
jz loc_485808  +
mov ecx ebx +
lea edx [esp+4Ch+var_24] +
lea eax [esp+4Ch+arg_8] +
call sub_4851F0  +
test eax eax +
jz loc_485808  +
mov eax [esi+1Ch] +
mov edx [esp+4Ch+var_24] +
cmp eax edx +
jbe loc_4858C0  +
mov [esp+4Ch+var_24] eax +
mov dword ptr [esi+24h] 0 +
mov edx [esp+4Ch+arg_8] +
mov dword ptr [esi+14h] 103h +
cmp ebx edx +
ja loc_485843  +
jmp loc_4857E1  +
sub edx eax +
test edx edx +
mov [esi+24h] edx +
jns loc_4858AB  +
xor eax eax +
jmp loc_48580A  +
mov [esp+4Ch+var_48] 1Ch +
mov [esp+4Ch+var_4C] ebp +
call sub_458A80  +
mov edi eax +
mov eax [esp+4Ch+arg_8] +
test edi edi +
movzx ecx byte ptr [eax] +
mov [esp+4Ch+var_31] cl +
jz loc_485808  +
add eax 1 +
mov [edi] ebp +
mov [esp+4Ch+arg_8] eax +
mov eax [ebp+0A0h] +
or dword ptr [ebp+28h] 200h +
add dword ptr [ebp+7Ch] 1 +
mov edx [eax+8] +
mov [edi+18h] edx +
lea edx [esp+4Ch+var_28] +
mov [eax+8] edi +
mov ecx edx +
mov [esp+4Ch+var_4C] ebx +
lea edx [esp+4Ch+arg_8] +
lea eax [esp+4Ch+var_20] +
call sub_485290  +
test eax eax +
jz loc_485808  +
mov edx [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] ebp +
lea eax [edx+1] +
mov [esp+4Ch+var_48] eax +
call sub_458A80  +
test eax eax +
mov [edi+4] eax +
jz loc_485808  +
mov edx [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] eax +
add edx 1 +
mov [esp+4Ch+var_44] edx +
lea edx [esp+4Ch+var_20] +
mov [esp+4Ch+var_48] edx +
call memcpy  +
movzx ecx [esp+4Ch+var_31] +
xor eax eax +
mov [edi+10h] esi +
cmp cl 34h +
setle al  +
add eax 1 +
mov [edi+0Ch] eax +
mov eax ecx +
and eax 0FFFFFFFBh +
cmp al 32h +
jnz loc_4859C0  +
mov dword ptr [edi+10h] offset off_4BFB90 +
mov ecx ebx +
lea edx [esp+4Ch+var_24] +
lea eax [esp+4Ch+arg_8] +
call sub_4851F0  +
test eax eax +
jz loc_485808  +
mov eax [esp+4Ch+var_24] +
sub eax [esi+1Ch] +
mov [edi+8] eax +
jmp loc_48583B  +
cmp al 33h +
jnz loc_4859E0  +
mov eax [esi+14h] +
test al 20h +
jz loc_485A00  +
mov edx [esp+4Ch+var_30] +
test edx edx +
jz loc_485AA7  +
mov eax [esp+4Ch+var_30] +
mov [edi+10h] eax +
jmp loc_485995  +
cmp [esp+4Ch+var_31] 38h +
jz loc_4859EE  +
cmp [esp+4Ch+var_31] 34h +
jnz loc_485995  +
mov eax [esi+14h] +
test al 10h +
jnz loc_485A08  +
or eax 20h +
mov [esi+14h] eax +
jmp loc_485995  +
or eax 10h +
mov [esi+14h] eax +
jmp loc_485995  +
mov eax [esp+4Ch+var_30] +
test eax eax +
jnz loc_4859D7  +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] 0 +
call sub_44D4F0  +
test eax eax +
mov [esp+4Ch+var_30] eax +
jnz loc_4859D7  +
mov eax [esi+14h] +
mov edx [esi] +
and eax 0FFFFFFCFh +
or eax 20h +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] edx +
mov [esp+4Ch+var_4C] ebp +
call sub_44D890  +
test eax eax +
mov [esp+4Ch+var_30] eax +
jnz loc_4859D7  +
xor eax eax +
jmp loc_48580A  +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] ebp +
add eax 1 +
mov [esp+4Ch+var_48] eax +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_485808  +
mov eax [esp+4Ch+var_28] +
mov [esp+4Ch+var_4C] esi +
add eax 1 +
mov [esp+4Ch+var_44] eax +
lea eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_48] eax +
call memcpy  +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] ebp +
call sub_44DA40  +
test eax eax +
mov esi eax +
jnz loc_48582C  +
xor eax eax +
jmp loc_48580A  +
mov [esp+4Ch+var_48] esi +
mov [esp+4Ch+var_4C] 0 +
call sub_44D4F0  +
test eax eax +
mov [esp+4Ch+var_30] eax +
jnz loc_4859D7  +
mov eax [esi+14h] +
mov edx [esi] +
and eax 0FFFFFFCFh +
or eax 10h +
jmp loc_485A33  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov [esp+2Ch+var_14] eax +
mov eax [esp+2Ch+arg_4] +
or eax [esp+2Ch+arg_0] +
jnz loc_485BB8  +
mov eax [edx] +
mov ebx ecx +
mov edx 1 +
mov esi [esp+2Ch+arg_8] +
mov [esp+2Ch+var_18] eax +
xor eax eax +
sub [esp+2Ch+var_18] ecx +
test esi esi +
jnz loc_485B3A  +
jmp loc_485BA4  +
test eax eax +
jz loc_485BB0  +
movzx edx byte ptr [eax+ebp] +
mov [ebx] dl +
add ebx 1 +
sub [esp+2Ch+arg_8] 1 +
jz loc_485BA4  +
mov edx esi +
mov ecx [esp+2Ch+var_18] +
xor edi edi +
lea ebp [ebx+ecx] +
mov ecx [esp+2Ch+arg_C] +
mov esi ebp +
and ebp 1FFFh +
and esi 0FFFFE000h +
test ecx ecx +
jnz loc_485B63  +
xor ecx ecx +
cmp byte ptr [ebx] 0 +
setnz cl  +
mov edi ecx +
cmp esi edx +
jnz loc_485B70  +
test edi edi +
jz loc_485B7D  +
test eax eax +
jnz loc_485B7D  +
nop   +
mov eax [esp+2Ch+var_14] +
mov ecx edi +
mov edx esi +
call sub_4853F0  +
mov edx [esp+2Ch+arg_C] +
test edx edx +
jnz loc_485B20  +
test edi edi +
jz loc_485B2E  +
movzx edx byte ptr [ebx] +
add ebx 1 +
mov [eax+ebp] dl +
shr ebp 5 +
sub [esp+2Ch+arg_8] 1 +
mov byte ptr [eax+ebp+2000h] 1 +
jnz loc_485B38  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov byte ptr [ebx] 0 +
jmp loc_485B2E  +
mov [esp+2Ch+var_28] 27Ah +
mov [esp+2Ch+var_2C] offset a____Binutil_29 +
mov [esp+2Ch+var_10] ecx +
mov [esp+2Ch+var_18] edx +
call sub_44BA40  +
mov ecx [esp+2Ch+var_10] +
mov edx [esp+2Ch+var_18] +
jmp loc_485AF9  +
***
jmp loc_485BF0  +
push ebx  +
xor eax eax +
sub esp 18h +
mov edx [esp+24h] +
mov ecx [esp+2Ch] +
mov ebx [esp+30h] +
test byte ptr [edx+14h] 3 +
jz loc_485C34  +
mov eax [esp+34h] +
add edx 1Ch +
mov [esp] ecx +
mov ecx [esp+28h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+4] ebx +
mov [esp+8] eax +
mov eax [esp+20h] +
call sub_485AE0  +
mov eax 1 +
add esp 18h +
pop ebx  +
retn   +
***
push ebx  +
xor eax eax +
sub esp 18h +
mov edx [esp+24h] +
mov ecx [esp+2Ch] +
mov ebx [esp+30h] +
test byte ptr [edx+14h] 3 +
jz loc_485C84  +
mov eax [esp+34h] +
add edx 1Ch +
mov [esp] ecx +
mov ecx [esp+28h] +
mov dword ptr [esp+0Ch] 1 +
mov [esp+4] ebx +
mov [esp+8] eax +
mov eax [esp+20h] +
call sub_485AE0  +
mov eax 1 +
add esp 18h +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov eax [esp+2Ch] +
mov edx [esp+20h] +
mov esi [esp+24h] +
mov ebx [esp+28h] +
test eax eax +
jz loc_485CF0  +
cmp eax 2 +
jnz loc_485CE6  +
mov eax [ebx+10h] +
mov edi [eax] +
mov [esp+8] ebx +
mov [esp+4] esi +
mov [esp] edx +
call sub_45A8E0  +
mov eax [ebx+4] +
mov [esp+28h] edi +
mov [esp+20h] esi +
mov dword ptr [esp+24h] offset a5sS_0 +
mov [esp+2Ch] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp fprintf  +
***
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [ebx+4] +
mov [esp+24h] esi +
mov [esp+20h] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp fputs  +
***
sub esp 0Ch +
mov ds:dword_5140C0 1 +
call nullsub_2  +
xor eax eax +
mov ds:byte_514110[eax] al +
add eax 1 +
cmp eax 0Ah +
jnz loc_485D24  +
mov ds:byte_514117[eax] al +
add eax 1 +
cmp eax 24h +
jnz loc_485D32  +
mov ds:byte_514104 24h +
mov al 28h +
mov ds:byte_514105 25h +
mov ds:byte_51410E 26h +
mov ds:byte_51413F 27h +
nop   +
mov ds:byte_514119[eax] al +
add eax 1 +
cmp eax 42h +
jnz loc_485D60  +
add esp 0Ch +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 8Ch +
mov eax ds:dword_5140C0 +
test eax eax +
jz loc_48601F  +
mov eax [esp+0A0h] +
lea edi [esp+1Ch] +
mov eax [eax+0A0h] +
mov esi [eax+0Ch] +
test esi esi +
jz loc_485E62  +
xor ebp ebp +
jmp loc_485DC6  +
add ebp 20h +
cmp ebp 2000h +
jz loc_485E54  +
mov eax ebp +
sar eax 5 +
cmp byte ptr [esi+eax+2000h] 0 +
jz loc_485DB7  +
mov edx [esi+2100h] +
lea eax [esp+18h] +
mov [esp+18h] edi +
add edx ebp +
call sub_485350  +
mov edx [esp+18h] +
mov eax ebp +
lea ecx [esi+ebp+20h] +
add eax esi +
movzx ebx byte ptr [eax] +
add eax 1 +
and ebx 0Fh +
movzx ebx ds:byte_504094[ebx] +
mov [edx+1] bl +
movzx edx byte ptr [eax-1] +
shr dl 4 +
cmp eax ecx +
movzx edx dl +
movzx ebx ds:byte_504094[edx] +
mov edx [esp+18h] +
mov [edx] bl +
mov ebx [esp+18h] +
lea edx [ebx+2] +
mov [esp+18h] edx +
jnz loc_485DF6  +
mov eax [esp+0A0h] +
mov ecx edi +
add ebp 20h +
mov [esp] edx +
mov edx 36h +
call sub_485510  +
cmp ebp 2000h +
jnz loc_485DC6  +
mov esi [esi+2104h] +
test esi esi +
jnz loc_485DB3  +
mov eax [esp+0A0h] +
lea esi [esp+1Ch] +
mov ebx [eax+64h] +
test ebx ebx +
jz loc_485ECD  +
mov [esp+18h] esi +
mov edx [ebx] +
lea eax [esp+18h] +
call sub_485650  +
mov eax [esp+18h] +
lea edx [eax+1] +
mov [esp+18h] edx +
mov byte ptr [eax] 31h +
mov edx [ebx+1Ch] +
lea eax [esp+18h] +
call sub_485350  +
mov edx [ebx+24h] +
lea eax [esp+18h] +
add edx [ebx+1Ch] +
call sub_485350  +
mov eax [esp+18h] +
mov ecx esi +
mov edx 33h +
mov [esp] eax +
mov eax [esp+0A0h] +
call sub_485510  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_485E74  +
mov eax [esp+0A0h] +
mov ebx [eax+78h] +
test ebx ebx +
jz loc_485F72  +
mov eax [ebx] +
test eax eax +
jz loc_485F72  +
lea edi [esp+1Ch] +
***
mov eax [esp+arg_14] +
mov edx [esi+4] +
mov eax [esp+arg_14] +
mov dword ptr [esp+0] 3 +
mov eax [esp+arg_14] +
mov eax [esp+arg_14] +
mov eax [esp+arg_14] +
mov eax [esp+arg_14] +
lea edx [eax+1] +
mov [esp+arg_14] edx +
mov byte ptr [eax] 36h +
jmp sub_485F2D  +
***
call sub_485D10  +
jmp loc_485D97  +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 11Ch +
mov [esp+120h+var_114] 0 +
mov [esp+120h+var_11C] 0 +
mov [esp+120h+var_118] 0 +
mov [esp+120h+var_120] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_486150  +
lea ebx [esp+120h+var_10F] +
jmp loc_486098  +
***
test edx edx +
jnz loc_486160  +
mov [esp-9Ch+arg_A0] esi +
mov [esp-9Ch+arg_9C] 1 +
mov [esp-9Ch+arg_98] ebx +
call sub_46FAD0  +
xor edx edx +
cmp eax 1 +
setnz dl  +
cmp byte ptr [esp+11h] 25h +
mov eax edx +
jnz loc_486090  +
test eax eax +
jnz loc_486160  +
mov [esp-9Ch+arg_A0] esi +
mov [esp-9Ch+arg_9C] 5 +
mov [esp-9Ch+arg_98] ebx +
call sub_46FAD0  +
cmp eax 5 +
jnz loc_486150  +
movzx eax byte ptr [esp+11h] +
movzx ebp byte ptr [esp+13h] +
movzx eax ds:byte_50B4E0[eax] +
cmp al 63h +
jz loc_486160  +
movzx edx byte ptr [esp+12h] +
movzx edx ds:byte_50B4E0[edx] +
cmp dl 63h +
jz loc_486160  +
shl eax 4 +
lea edi [edx+eax-5] +
cmp edi 0FEh +
ja loc_486150  +
mov [esp-9Ch+arg_A0] esi +
mov [esp-9Ch+arg_9C] edi +
mov [esp-9Ch+arg_98] ebx +
call sub_46FAD0  +
cmp edi eax +
jnz loc_486150  +
mov eax ebp +
mov byte ptr [esp+edi+11h] 0 +
movsx ebp al +
add edi ebx +
mov [esp+0Ch] edi +
mov [esp-9Ch+arg_A0] ebx +
mov [esp-9Ch+arg_9C] ebp +
mov [esp-9Ch+arg_98] esi +
call sub_485720  +
test eax eax +
jnz loc_486098  +
nop   +
add esp 11Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 11Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
sub esp 28h +
mov eax ds:dword_5140C0 +
mov ebx [esp+30h] +
test eax eax +
jz loc_486220  +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_486212  +
lea eax [esp+1Ch] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 4 +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 4 +
jnz loc_486212  +
cmp byte ptr [esp+1Ch] 25h +
jnz loc_486212  +
movzx eax byte ptr [esp+1Dh] +
cmp ds:byte_50B4E0[eax] 63h +
jz loc_486212  +
movzx eax byte ptr [esp+1Eh] +
cmp ds:byte_50B4E0[eax] 63h +
jz loc_486212  +
movzx eax byte ptr [esp+1Fh] +
cmp ds:byte_50B4E0[eax] 63h +
jz loc_486212  +
mov [esp] ebx +
call sub_4856D0  +
mov eax ebx +
call sub_486050  +
test eax eax +
jz loc_486212  +
mov eax [ebx+4] +
add esp 28h +
pop ebx  +
retn   +
***
add esp 28h +
xor eax eax +
pop ebx  +
retn   +
***
call sub_485D10  +
jmp loc_486185  +
***
mov eax 1 +
retn   +
***
mov eax 10h +
retn   +
***
xor eax eax +
retn   +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 10h +
mov eax [eax] +
mov [esp+18h+var_18] eax +
call strlen  +
mov [esp+18h+var_18] edi +
mov ebx eax +
call strlen  +
mov [esp+18h+var_18] esi +
lea eax [ebx+eax+0Ah] +
mov [esp+18h+var_14] eax +
call sub_458A80  +
mov ebx eax +
mov eax offset unk_5040C0 +
test ebx ebx +
jz loc_4862F9  +
mov eax [esi] +
mov [esp+18h+var_C] edi +
mov [esp+18h+var_14] offset a_binary_S_S +
mov [esp+18h+var_18] ebx +
mov [esp+18h+var_10] eax +
call sprintf  +
movzx ecx byte ptr [ebx] +
test cl cl +
jz loc_4862F7  +
mov edx ebx +
lea esi [esi+0] +
test byte ptr ds:word_509C60[ecx+ecx] 8Ch +
jnz loc_4862ED  +
mov byte ptr [edx] 5Fh +
add edx 1 +
movzx ecx byte ptr [edx] +
test cl cl +
jnz loc_4862E0  +
mov eax ebx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+30h] +
mov edi [esp+34h] +
mov ebp [esi+0A0h] +
mov dword ptr [esp+4] 48h +
mov [esp] esi +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_4863D0  +
mov [eax] esi +
mov edx offset aStart_0 +
mov eax esi +
call sub_486280  +
mov edx offset aEnd_1 +
mov dword ptr [ebx+8] 0 +
mov dword ptr [ebx+0Ch] 2 +
mov [ebx+10h] ebp +
mov dword ptr [ebx+14h] 0 +
mov [ebx+18h] esi +
mov [ebx+4] eax +
mov eax esi +
call sub_486280  +
mov edx offset aSize +
mov [ebx+1Ch] eax +
mov eax [ebp+24h] +
mov dword ptr [ebx+24h] 2 +
mov [ebx+28h] ebp +
mov dword ptr [ebx+2Ch] 0 +
mov [ebx+20h] eax +
mov eax esi +
mov [ebx+30h] esi +
call sub_486280  +
mov [ebx+34h] eax +
mov eax [ebp+24h] +
mov dword ptr [ebx+3Ch] 2 +
mov dword ptr [ebx+40h] offset off_4BFB90 +
mov dword ptr [ebx+44h] 0 +
mov [ebx+38h] eax +
lea eax [ebx+18h] +
mov [edi] ebx +
add ebx 30h +
mov [edi+4] eax +
mov eax 3 +
mov [edi+8] ebx +
mov dword ptr [edi+0Ch] 0 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 0FFFFFFFFh +
jmp loc_4863C8  +
***
push ebx  +
sub esp 48h +
mov ebx [esp+50h] +
test byte ptr [ebx+2Bh] 1 +
jnz loc_486450  +
lea eax [esp+10h] +
mov dword ptr [ebx+7Ch] 3 +
mov [esp+4] eax +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
js loc_486463  +
mov dword ptr [esp+8] 123h +
mov dword ptr [esp+4] offset a_data_18 +
mov [esp] ebx +
call sub_44D970  +
test eax eax +
jz loc_486473  +
mov edx [esp+28h] +
mov dword ptr [eax+1Ch] 0 +
mov dword ptr [eax+50h] 0 +
mov dword ptr [eax+54h] 0 +
mov [eax+24h] edx +
mov [ebx+0A0h] eax +
mov eax [ebx+4] +
add esp 48h +
pop ebx  +
retn   +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
add esp 48h +
xor eax eax +
pop ebx  +
retn   +
***
mov dword ptr [esp] 1 +
call sub_44BAF0  +
xor eax eax +
jmp loc_48644A  +
***
xor eax eax +
jmp loc_48644A  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+38h] +
mov edi [esp+44h] +
mov edx [esp+40h] +
mov esi [esp+30h] +
mov [esp+4] eax +
mov eax [esp+3Ch] +
test edi edi +
mov ebp [esp+34h] +
mov [esp+0Ch] edx +
mov [esp+8] eax +
jz loc_48652D  +
test byte ptr [esi+2Bh] 10h +
jnz loc_486521  +
mov eax [esi+64h] +
xor ebx ebx +
mov dword ptr [esp] 0 +
test eax eax +
mov edx eax +
jnz loc_4864D7  +
jmp loc_48651D  +
mov edx [edx+0Ch] +
test edx edx +
jz loc_486507  +
mov ecx [edx+14h] +
and ecx 303h +
cmp ecx 103h +
jnz loc_4864D0  +
mov ecx [edx+24h] +
test ecx ecx +
jz loc_4864D0  +
mov ecx [esp] +
test ecx ecx +
jnz loc_486540  +
mov ebx [edx+20h] +
mov edx [edx+0Ch] +
mov dword ptr [esp] 1 +
test edx edx +
jnz loc_4864D7  +
mov edx [eax+20h] +
mov dword ptr [eax+54h] 0 +
sub edx ebx +
mov [eax+50h] edx +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_486507  +
or byte ptr [esi+2Bh] 10h +
mov eax [ebp+14h] +
test al 3 +
jz loc_48652D  +
test ah 2 +
jz loc_486552  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [edx+20h] +
mov dword ptr [esp] 1 +
cmp ecx ebx +
jnb loc_4864D0  +
mov ebx ecx +
jmp loc_4864F9  +
***
mov eax [esp+8] +
mov edx [esp+0Ch] +
mov [esp+44h] edi +
mov [esp+34h] ebp +
mov [esp+3Ch] eax +
mov eax [esp+4] +
mov [esp+30h] esi +
mov [esp+40h] edx +
mov [esp+38h] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_45A510  +
***
push ebx  +
sub esp 18h +
mov edx [esp+30h] +
mov ebx [esp+20h] +
mov eax [esp+2Ch] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] edx +
mov [esp] ebx +
mov [esp+4] eax +
call sub_46FCE0  +
xor edx edx +
test eax eax +
jnz loc_4865DF  +
mov eax [esp+34h] +
mov [esp+8] ebx +
mov [esp+4] eax +
mov eax [esp+28h] +
mov [esp] eax +
call sub_46FAD0  +
xor edx edx +
cmp [esp+34h] eax +
setz dl  +
add esp 18h +
mov eax edx +
pop ebx  +
retn   +
***
xor eax eax +
retn   +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_14] 8 +
mov [esp+18h+var_18] ebx +
call sub_458A80  +
test eax eax +
jz loc_486640  +
mov [ebx+0A0h] eax +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
add esp 18h +
mov eax 1 +
pop ebx  +
retn   +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
push ebx  +
sub esp 18h +
mov eax [esp+28h] +
mov ebx [esp+24h] +
mov [esp+8] eax +
mov eax [esp+20h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_453750  +
mov edx 1 +
test eax eax +
jnz loc_486680  +
xor edx edx +
test ebx ebx +
setz dl  +
add esp 18h +
mov eax edx +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
mov ebx ecx +
sub esp 5Ch +
mov [esp+5Ch+var_40] eax +
mov eax edx +
mov esi [esp+5Ch+arg_0] +
shr eax 4 +
mov ebp [esp+5Ch+arg_4] +
and eax 0Fh +
movzx eax ds:byte_504534[eax] +
shr ebx 8 +
mov [esp+5Ch+var_39] 3Ah +
mov [esp+24h] al +
mov eax edx +
and eax 0Fh +
movzx eax ds:byte_504534[eax] +
mov [esp+25h] al +
movzx eax bl +
shr eax 4 +
movzx eax ds:byte_504534[eax] +
mov [esp+5Ch+var_36] al +
mov eax ebx +
and eax 0Fh +
movzx eax ds:byte_504534[eax] +
mov [esp+5Ch+var_35] al +
movzx eax cl +
shr eax 4 +
movzx eax ds:byte_504534[eax] +
mov [esp+5Ch+var_34] al +
mov eax ecx +
add ecx esi +
and eax 0Fh +
add ecx edx +
movzx eax ds:byte_504534[eax] +
add ebx ecx +
mov [esp+5Ch+var_33] al +
mov eax esi +
shr eax 4 +
and eax 0Fh +
movzx eax ds:byte_504534[eax] +
mov [esp+5Ch+var_32] al +
mov eax esi +
and eax 0Fh +
test edx edx +
movzx eax ds:byte_504534[eax] +
mov [esp+5Ch+var_31] al +
jz loc_4867D9  +
xor eax eax +
lea esi [esp+5Ch+var_39] +
mov [esp+5Ch+var_44] edx +
lea esi [esi+0] +
movzx ecx byte ptr [ebp+eax+0] +
mov edx ecx +
add ebx ecx +
shr dl 4 +
movzx edi dl +
movzx edx ds:byte_504534[edi] +
mov edi ecx +
and edi 0Fh +
mov [esi+eax*2+9] dl +
movzx edx ds:byte_504534[edi] +
mov [esi+eax*2+0Ah] dl +
add eax 1 +
cmp eax [esp+5Ch+var_44] +
jnz loc_486750  +
mov edx [esp+5Ch+var_44] +
lea ecx [esp+edx*2+5Ch+var_30] +
neg ebx  +
movzx eax bl +
and ebx 0Fh +
shr eax 4 +
movzx eax ds:byte_504534[eax] +
mov byte ptr [ecx+2] 0Dh +
mov byte ptr [ecx+3] 0Ah +
mov [ecx] al +
movzx eax ds:byte_504534[ebx] +
lea ebx [edx+edx+0Dh] +
mov [ecx+1] al +
mov eax [esp+5Ch+var_40] +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_5C] esi +
mov [esp+5Ch+var_54] eax +
call sub_46FB80  +
cmp ebx eax +
setz al  +
add esp 5Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ecx [esp+5Ch+var_30] +
lea esi [esp+5Ch+var_39] +
jmp loc_48678B  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+60h] +
mov eax [eax+0A0h] +
mov eax [eax] +
test eax eax +
mov [esp+1Ch] eax +
jz loc_4869D2  +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+18h] 0 +
mov eax [esp+1Ch] +
mov esi [eax+0Ch] +
mov ebp [eax+8] +
mov edi [eax+4] +
test esi esi +
jz loc_4869C0  +
mov eax [esp+14h] +
mov edx [esp+18h] +
add eax edx +
mov [esp+10h] eax +
jmp loc_4868DE  +
mov edx [esp+14h] +
test edx edx +
jnz loc_486966  +
mov eax ebp +
xor ecx ecx +
and eax 0F0000h +
mov edx 2 +
mov [esp+18h] eax +
shr eax 0Ch +
mov [esp+2Ah] al +
lea eax [esp+2Ah] +
mov [esp+4] eax +
mov eax [esp+60h] +
mov dword ptr [esp] 2 +
mov byte ptr [esp+2Bh] 0 +
call sub_486690  +
test eax eax +
jz loc_4869B1  +
mov eax [esp+14h] +
add eax [esp+18h] +
mov [esp+10h] eax +
mov ecx ebp +
sub ecx [esp+10h] +
lea eax [ecx+ebx] +
cmp eax 0FFFFh +
jbe loc_4868B4  +
mov ebx 10000h +
sub ebx ecx +
mov eax [esp+60h] +
mov edx ebx +
mov [esp+4] edi +
mov dword ptr [esp] 0 +
call sub_486690  +
test eax eax +
jz loc_4869B1  +
add ebp ebx +
add edi ebx +
sub esi ebx +
jz loc_4869C0  +
mov eax [esp+10h] +
cmp esi 10h +
mov ebx 10h +
cmovbe ebx esi +
add eax 0FFFFh +
cmp eax ebp +
jnb loc_48689D  +
cmp ebp 0FFFFFh +
jbe loc_486847  +
mov eax [esp+18h] +
test eax eax +
jnz loc_486980  +
mov eax ebp +
xor ax ax +
mov [esp+14h] eax +
add eax 0FFFFh +
cmp eax ebp +
jb loc_486A55  +
mov edx [esp+14h] +
xor ecx ecx +
mov dword ptr [esp] 4 +
mov eax edx +
shr eax 18h +
mov [esp+2Ah] al +
mov eax edx +
mov edx 2 +
shr eax 10h +
mov [esp+2Bh] al +
lea eax [esp+2Ah] +
mov [esp+4] eax +
mov eax [esp+60h] +
call sub_486690  +
test eax eax +
jz loc_4869B1  +
mov dword ptr [esp+18h] 0 +
jmp loc_486891  +
***
mov dword ptr [esp+4] 319h +
mov dword ptr [esp] offset a____Binutil_30 +
call sub_44BA40  +
jmp loc_486853  +
***
lea eax [esp+2Ah] +
xor ecx ecx +
mov [esp+4] eax +
mov eax [esp+60h] +
mov edx 2 +
mov dword ptr [esp] 2 +
mov byte ptr [esp+2Ah] 0 +
mov byte ptr [esp+2Bh] 0 +
call sub_486690  +
test eax eax +
jnz loc_48690A  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+1Ch] +
mov eax [eax] +
test eax eax +
mov [esp+1Ch] eax +
jnz loc_48681F  +
mov eax [esp+60h] +
mov eax [eax+74h] +
test eax eax +
jz loc_486A2C  +
cmp eax 0FFFFFh +
mov edx eax +
ja loc_486A99  +
and edx 0F0000h +
shr edx 0Ch +
mov [esp+2Ch] dl +
mov edx eax +
shr edx 8 +
mov [esp+2Fh] al +
lea eax [esp+2Ch] +
mov byte ptr [esp+2Dh] 0 +
mov [esp+2Eh] dl +
mov [esp+4] eax +
mov dword ptr [esp] 3 +
mov eax [esp+60h] +
xor ecx ecx +
mov edx 4 +
call sub_486690  +
test eax eax +
jz loc_4869B1  +
mov eax [esp+60h] +
xor ecx ecx +
xor edx edx +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp] 1 +
call sub_486690  +
test eax eax +
setnz al  +
movzx eax al +
jmp loc_4869B3  +
***
lea ebx [esp+2Ch] +
mov [esp+8] ebp +
mov dword ptr [esp+4] offset a08lx_4 +
mov [esp] ebx +
call sprintf  +
mov eax [esp+60h] +
mov eax [eax] +
mov [esp+8] ebx +
mov dword ptr [esp] offset aSAddress0xSOut +
mov [esp+4] eax +
call off_4BFA04  +
mov dword ptr [esp] 11h +
call sub_44BAF0  +
jmp loc_4869B1  +
***
shr edx 18h +
mov [esp+2Ch] dl +
mov edx eax +
shr edx 10h +
mov [esp+2Dh] dl +
mov edx eax +
shr edx 8 +
mov [esp+2Fh] al +
lea eax [esp+2Ch] +
mov [esp+2Eh] dl +
mov [esp+4] eax +
mov dword ptr [esp] 5 +
jmp loc_486A18  +
***
push ebp  +
push edi  +
push esi  +
mov esi 1 +
push ebx  +
sub esp 1Ch +
mov ebx [esp+44h] +
mov edi [esp+3Ch] +
test ebx ebx +
jz loc_486AF7  +
mov eax [esp+34h] +
mov edx [eax+14h] +
and edx 3 +
cmp edx 3 +
jz loc_486B01  +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+30h] +
mov dword ptr [esp+4] 10h +
mov [esp] eax +
call sub_458A80  +
test eax eax +
mov ebp eax +
jz loc_486BC1  +
mov eax [esp+30h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_458A80  +
test eax eax +
mov edx eax +
jz loc_486BC1  +
mov eax [esp+38h] +
mov [esp] edx +
mov [esp+8] ebx +
mov [esp+0Ch] edx +
mov [esp+4] eax +
call memcpy  +
mov eax [esp+34h] +
mov edx [esp+0Ch] +
add edi [eax+20h] +
mov eax [esp+30h] +
mov [ebp+4] edx +
mov [ebp+8] edi +
mov [ebp+0Ch] ebx +
mov ecx [eax+0A0h] +
mov eax [ecx+4] +
test eax eax +
jz loc_486B7B  +
cmp edi [eax+8] +
jnb loc_486BB0  +
mov edx [ecx] +
mov eax ecx +
test edx edx +
jnz loc_486B8D  +
jmp loc_486B92  +
mov eax edx +
mov edx [edx] +
test edx edx +
jz loc_486B92  +
cmp edi [edx+8] +
ja loc_486B85  +
mov [ebp+0] edx +
mov esi 1 +
mov [eax] ebp +
mov eax [ebp+0] +
test eax eax +
jnz loc_486AF7  +
mov [ecx+4] ebp +
jmp loc_486AF7  +
***
mov [eax] ebp +
mov dword ptr [ebp+0] 0 +
mov [ecx+4] ebp +
jmp loc_486AF7  +
***
xor esi esi +
jmp loc_486AF7  +
***
sub esp 34h +
cmp ecx 0FFFFFFFFh +
jz loc_486C21  +
mov ebx eax +
movzx eax cl +
test byte ptr ds:word_509C60[eax+eax] 10h +
jz loc_486C37  +
mov byte ptr [esp+34h+var_E] cl +
lea esi [esp+34h+var_E] +
mov byte ptr [esp+34h+var_E+1] 0 +
mov [esp+34h+var_28] esi +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_30] ebx +
mov [esp+34h+var_34] offset aBDUnexpected_0 +
call off_4BFA04  +
mov [esp+34h+var_34] 11h +
call sub_44BAF0  +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov eax [esp+34h+arg_0] +
test eax eax +
jnz loc_486C1B  +
mov [esp+34h+var_34] 12h +
call sub_44BAF0  +
jmp loc_486C1B  +
lea esi [esp+34h+var_E] +
mov [esp+34h+var_2C] eax +
mov [esp+34h+var_30] offset a03o_1 +
mov [esp+34h+var_34] esi +
mov [esp+34h+var_18] edx +
call sprintf  +
mov edx [esp+34h+var_18] +
jmp loc_486BF6  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 8Ch +
mov ebx ds:dword_5141E0 +
mov ebp [esp+0A0h] +
test ebx ebx +
jz loc_486DA4  +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] ebp +
call sub_46FCE0  +
test eax eax +
jnz loc_486CCE  +
lea edi [esp+63h] +
mov [esp+8] ebp +
mov dword ptr [esp+4] 9 +
mov [esp] edi +
call sub_46FAD0  +
cmp eax 9 +
jz loc_486CE0  +
call sub_44B8A0  +
cmp eax 12h +
jz loc_486D93  +
xor eax eax +
***
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp byte ptr [esp+63h] 3Ah +
jnz loc_486D93  +
lea eax [esp+64h] +
lea ebx [esp+6Ch] +
movzx edx byte ptr [eax] +
cmp ds:byte_50B4E0[edx] 63h +
jz loc_486D93  +
add eax 1 +
cmp eax ebx +
jnz loc_486CF3  +
movzx eax byte ptr [esp+6Ah] +
movzx edx byte ptr [esp+6Bh] +
movzx eax ds:byte_50B4E0[eax] +
movzx edx ds:byte_50B4E0[edx] +
shl eax 4 +
add eax edx +
cmp eax 5 +
ja loc_486D93  +
mov eax [ebp+0A0h] +
mov [esp] ebp +
mov [esp+1Ch] eax +
call sub_486600  +
test eax eax +
jz loc_486D66  +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] ebp +
call sub_46FCE0  +
test eax eax +
jz loc_486DB8  +
***
mov eax [ebp+0A0h] +
cmp eax [esp+arg_18] +
jz loc_486D82  +
test eax eax +
jz loc_486D82  +
mov [esp+arg_0] eax +
mov [esp+0] ebp +
call sub_458CD0  +
mov eax [esp+arg_18] +
mov [ebp+0A0h] eax +
xor eax eax +
jmp loc_486CD0  +
***
mov dword ptr [esp] 3 +
call sub_44BAF0  +
jmp loc_486CCE  +
***
mov ds:dword_5141E0 1 +
call nullsub_2  +
jmp loc_486C7F  +
***
mov dword ptr [ebp+74h] 0 +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+20h] 1 +
mov dword ptr [esp+3Ch] 0 +
mov dword ptr [esp+48h] 0 +
mov dword ptr [esp+4Ch] 0 +
***
mov [esp+arg_4] ebp +
mov [esp+arg_0] 1 +
mov [esp+0] ebx +
call sub_46FAD0  +
cmp eax 1 +
jz loc_486E30  +
call sub_44B8A0  +
cmp eax 12h +
jz loc_4873B0  +
mov eax [esp+arg_14] +
test eax eax +
jz loc_486D66  +
mov [esp+0] eax +
call free  +
jmp loc_486D66  +
***
movzx ecx [esp+arg_68] +
cmp ecx 0Dh +
jz loc_486DEF  +
cmp ecx 0Ah +
jz loc_4873A5  +
cmp ecx 3Ah +
jnz loc_487048  +
mov [esp+0] ebp +
call sub_46FC00  +
mov [esp+arg_4] ebp +
mov [esp+arg_0] 8 +
mov [esp+arg_3C] eax +
lea eax [esp+arg_57] +
mov [esp+0] eax +
mov [esp+arg_40] edx +
call sub_46FAD0  +
cmp eax 8 +
jnz loc_486E16  +
lea eax [esp+arg_57] +
lea esi [esi+0] +
movzx ecx byte ptr [eax] +
cmp ds:byte_50B4E0[ecx] 63h +
jz loc_487048  +
add eax 1 +
cmp eax edi +
jnz loc_486E80  +
movzx eax byte ptr [esp+arg_57] +
movzx edx byte ptr [esp+arg_57+1] +
movzx eax ds:byte_50B4E0[eax] +
movzx edx ds:byte_50B4E0[edx] +
shl eax 4 +
add eax edx +
mov esi eax +
mov [esp+arg_24] eax +
movzx eax byte ptr [esp+arg_57+2] +
lea esi [esi+esi+2] +
cmp esi [esp+arg_20] +
movzx eax ds:byte_50B4E0[eax] +
mov byte ptr [esp+arg_28] al +
movzx eax byte ptr [esp+arg_57+3] +
movzx eax ds:byte_50B4E0[eax] +
mov byte ptr [esp+arg_2C] al +
movzx eax [esp+arg_5B] +
movzx eax ds:byte_50B4E0[eax] +
mov byte ptr [esp+arg_30] al +
movzx eax [esp+arg_5C] +
movzx eax ds:byte_50B4E0[eax] +
mov [esp+arg_35] al +
movzx eax [esp+arg_5D] +
movzx eax ds:byte_50B4E0[eax] +
mov [esp+arg_36] al +
movzx eax [esp+arg_5E] +
movzx eax ds:byte_50B4E0[eax] +
mov [esp+arg_37] al +
jnb loc_487060  +
mov eax [esp+arg_14] +
mov [esp+arg_4] ebp +
mov [esp+arg_0] esi +
mov [esp+0] eax +
call sub_46FAD0  +
cmp esi eax +
jnz loc_486E16  +
mov edx [esp+arg_14] +
xor eax eax +
lea esi [esi+0] +
movzx ecx byte ptr [edx+eax] +
cmp ds:byte_50B4E0[ecx] 63h +
jz loc_487048  +
add eax 1 +
cmp esi eax +
ja loc_486F50  +
movzx edx byte ptr [esp+arg_30] +
movzx eax [esp+arg_35] +
shl edx 4 +
lea ecx [edx+eax] +
movzx eax byte ptr [esp+arg_28] +
movzx edx byte ptr [esp+arg_2C] +
shl eax 4 +
add eax edx +
movzx edx [esp+arg_37] +
shl eax 8 +
add eax ecx +
mov [esp+arg_28] eax +
movzx eax [esp+arg_36] +
shl eax 4 +
lea ecx [eax+edx] +
mov edx [esp+arg_24] +
mov eax [esp+arg_28] +
mov [esp+arg_2C] ecx +
add ecx edx +
add ecx eax +
shr eax 8 +
add ecx eax +
test edx edx +
jz loc_4873F7  +
mov edx [esp+arg_14] +
sub esi 2 +
mov [esp+arg_30] esi +
mov [esp+arg_9C] ebp +
add esi edx +
mov eax edx +
mov ebp esi +
movzx edx byte ptr [eax] +
add eax 2 +
movzx esi byte ptr [eax-1] +
movzx edx ds:byte_50B4E0[edx] +
movzx esi ds:byte_50B4E0[esi] +
shl edx 4 +
add edx esi +
add ecx edx +
cmp eax ebp +
jnz loc_486FD5  +
mov edx [esp+arg_30] +
mov ebp [esp+arg_9C] +
mov eax edx +
add eax 1 +
mov esi [esp+arg_14] +
neg ecx  +
movzx ecx cl +
movzx edx byte ptr [esi+edx] +
movzx eax byte ptr [esi+eax] +
movzx edx ds:byte_50B4E0[edx] +
movzx eax ds:byte_50B4E0[eax] +
shl edx 4 +
add eax edx +
cmp ecx eax +
jnz loc_487464  +
mov eax [esp+arg_2C] +
cmp eax 5 +
ja loc_4873C5  +
jmp ds:off_5044C8[eax*4]  +
mov edx [esp+arg_1C] +
mov eax ebp +
mov dword ptr [esp+0] 0 +
call sub_486BD0  +
jmp loc_486E16  +
***
cmp [esp+arg_24] 2 +
cmp [esp+arg_24] 4 +
cmp [esp+arg_24] 2 +
mov edx [ebp+74h] +
cmp [esp+arg_24] 4 +
mov eax [esp+arg_38] +
test eax eax +
jz loc_4872D2  +
mov ecx [eax+24h] +
mov edx [eax+1Ch] +
mov eax [esp+arg_44] +
add eax [esp+arg_48] +
add eax [esp+arg_28] +
add edx ecx +
cmp edx eax +
jz loc_487454  +
mov ecx [esp+arg_24] +
test ecx ecx +
jz loc_486DEF  +
mov eax [ebp+6Ch] +
mov [esp+arg_0] offset a_secD_0 +
mov [esp+0] ebx +
add eax 1 +
mov [esp+arg_4] eax +
call sprintf  +
mov edx ebx +
mov eax [edx] +
add edx 4 +
lea ecx [eax-1010101h] +
not eax  +
and ecx eax +
and ecx 80808080h +
jz loc_4872FA  +
mov eax ecx +
shr eax 10h +
test ecx 8080h +
cmovz ecx eax +
lea eax [edx+2] +
cmovz edx eax +
add cl cl +
sbb edx 3 +
sub edx ebx +
add edx 1 +
mov [esp+arg_0] edx +
mov [esp+0] ebp +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_486E16  +
mov [esp+arg_0] ebx +
mov [esp+0] eax +
call strcpy  +
mov [esp+arg_0] esi +
mov [esp+arg_4] 103h +
mov [esp+0] ebp +
call sub_44D970  +
test eax eax +
mov esi eax +
mov [esp+arg_38] eax +
jz loc_486E16  +
mov eax [esp+arg_44] +
add eax [esp+arg_48] +
add eax [esp+arg_28] +
mov edx [esp+arg_40] +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov eax [esp+arg_24] +
mov [esi+24h] eax +
mov eax [esp+arg_3C] +
add eax 0FFFFFFFFh +
adc edx 0FFFFFFFFh +
mov [esi+50h] eax +
mov [esi+54h] edx +
jmp loc_486DEF  +
add [esp+arg_1C] 1 +
jmp loc_486DEF  +
mov eax [esp+arg_14] +
test eax eax +
jz loc_487202  +
mov eax [esp+arg_14] +
jmp loc_4871FA  +
mov eax [esp+arg_2C] +
mov [esp+arg_0] ebp +
mov dword ptr [esp+0] offset aBUUnrecognized +
mov [esp+arg_8] eax +
mov eax [esp+arg_1C] +
mov [esp+arg_4] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
jmp loc_486E16  +
mov eax 1 +
xor edx edx +
jmp loc_487008  +
mov esi [esp+arg_14] +
mov [esp+arg_38] 0 +
movzx eax byte ptr [esi+2] +
movzx edx byte ptr [esi+3] +
movzx eax ds:byte_50B4E0[eax] +
movzx ecx ds:byte_50B4E0[edx] +
shl eax 4 +
add ecx eax +
movzx eax byte ptr [esi] +
movzx edx ds:byte_50B4E0[eax] +
movzx eax byte ptr [esi+1] +
shl edx 4 +
movzx eax ds:byte_50B4E0[eax] +
add eax edx +
shl eax 8 +
add eax ecx +
shl eax 10h +
add [ebp+74h] eax +
jmp loc_486DEF  +
mov eax [esp+arg_38] +
add ecx [esp+arg_24] +
mov [eax+24h] ecx +
jmp loc_486DEF  +
***
mov [esp+arg_C] eax +
mov eax [esp+arg_1C] +
mov [esp+arg_8] ecx +
mov [esp+arg_0] ebp +
mov dword ptr [esp+0] offset aBUBadChecksumI +
mov [esp+arg_4] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
jmp loc_486E16  +
***
mov eax [esp+arg_1C] +
mov [esp+arg_0] ebp +
mov dword ptr [esp+0] offset aBUBadExtendedA +
mov [esp+arg_4] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
jmp loc_486E16  +
***
cmp [esp+arg_24] 2 +
jz loc_487215  +
mov eax [esp+arg_1C] +
mov [esp+arg_0] ebp +
mov dword ptr [esp+0] offset aBUBadExtendedL +
mov [esp+arg_4] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
jmp loc_486E16  +
***
mov eax [esp+arg_1C] +
mov [esp+arg_0] ebp +
mov dword ptr [esp+0] offset aBUBadExtende_0 +
mov [esp+arg_4] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
jmp loc_486E16  +
***
mov eax [esp+arg_1C] +
mov [esp+arg_0] ebp +
mov dword ptr [esp+0] offset aBUBadExtendedS +
mov [esp+arg_4] eax +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
jmp loc_486E16  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+54h] +
mov esi [esp+5Ch] +
mov eax [eax+8Ch] +
test eax eax +
jz loc_487590  +
add esi eax +
mov eax [esp+64h] +
mov [esp+4] esi +
mov [esp+8] eax +
mov eax [esp+58h] +
mov [esp] eax +
call memcpy  +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+54h] +
mov eax [eax+24h] +
mov [esp+4] eax +
mov eax [esp+50h] +
mov [esp] eax +
call sub_458A80  +
mov ecx [esp+54h] +
mov ebx eax +
mov [esp+14h] eax +
mov [ecx+8Ch] eax +
xor eax eax +
test ebx ebx +
jz loc_487588  +
mov eax [ecx+50h] +
mov edx [ecx+54h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp+4] eax +
mov eax [esp+50h] +
mov [esp+8] edx +
mov [esp] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_48778B  +
mov ebx [esp+14h] +
xor edi edi +
mov dword ptr [esp+1Ch] 0 +
mov eax [esp+50h] +
mov dword ptr [esp+4] 1 +
mov [esp+8] eax +
lea eax [esp+28h] +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 1 +
jz loc_487647  +
call sub_44B8A0  +
mov eax [esp+54h] +
sub ebx [esp+14h] +
cmp ebx [eax+24h] +
jb loc_4877B8  +
test edi edi +
jz loc_487638  +
mov [esp] edi +
call free  +
mov eax [esp+54h] +
mov eax [eax+8Ch] +
jmp loc_487569  +
***
movzx eax byte ptr [esp+28h] +
cmp eax 0Ah +
jz loc_4875F5  +
cmp eax 0Dh +
jz loc_4875F5  +
cmp eax 3Ah +
jz loc_48766F  +
mov dword ptr [esp+4] 236h +
mov dword ptr [esp] offset a____Binutil_30 +
call sub_44BA40  +
mov eax [esp+50h] +
mov dword ptr [esp+4] 8 +
mov [esp+8] eax +
lea eax [esp+28h] +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 8 +
jnz loc_48777F  +
movzx eax byte ptr [esp+28h] +
movzx edx byte ptr [esp+29h] +
movzx eax ds:byte_50B4E0[eax] +
movzx ebp ds:byte_50B4E0[edx] +
movzx edx byte ptr [esp+2Fh] +
shl eax 4 +
add ebp eax +
movzx eax byte ptr [esp+2Eh] +
movzx edx ds:byte_50B4E0[edx] +
movzx eax ds:byte_50B4E0[eax] +
shl eax 4 +
add eax edx +
jnz loc_487795  +
lea edx [ebp+ebp+0] +
cmp edx [esp+1Ch] +
jbe loc_487700  +
mov [esp] edi +
mov [esp+4] edx +
mov [esp+18h] edx +
call sub_459C10  +
test eax eax +
mov edi eax +
jz loc_48778B  +
mov edx [esp+18h] +
mov [esp+1Ch] edx +
mov eax [esp+50h] +
mov [esp+4] edx +
mov [esp] edi +
mov [esp+18h] edx +
mov [esp+8] eax +
call sub_46FAD0  +
mov edx [esp+18h] +
cmp edx eax +
jnz loc_48777F  +
test ebp ebp +
jz loc_48774B  +
xor edx edx +
movzx eax byte ptr [edi+edx*2] +
movzx ecx byte ptr [edi+edx*2+1] +
movzx eax ds:byte_50B4E0[eax] +
shl eax 4 +
add al ds:byte_50B4E0[ecx] +
mov [ebx+edx] al +
add edx 1 +
cmp edx ebp +
jnz loc_487726  +
add ebx edx +
mov ecx [esp+54h] +
mov eax ebx +
sub eax [esp+14h] +
cmp eax [ecx+24h] +
jnb loc_48762C  +
mov eax [esp+50h] +
mov dword ptr [esp+4] 2 +
mov [esp] edi +
mov [esp+8] eax +
call sub_46FAD0  +
cmp eax 2 +
jz loc_4875F5  +
test edi edi +
jz loc_48778B  +
mov [esp] edi +
call free  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+50h] +
mov dword ptr [esp] offset aBInternalError +
mov [esp+4] eax +
call off_4BFA04  +
mov dword ptr [esp] 11h +
call sub_44BAF0  +
jmp loc_48777F  +
***
mov eax [esp+50h] +
mov dword ptr [esp] offset aBBadSectionLen +
mov [esp+4] eax +
call off_4BFA04  +
mov dword ptr [esp] 11h +
call sub_44BAF0  +
jmp loc_48777F  +
***
push edi  +
mov ecx 0Eh +
push esi  +
push ebx  +
sub esp 5Ch +
lea ebx [esp+68h+var_50] +
mov esi [esp+68h+arg_0] +
mov [esp+68h+var_5C] eax +
mov edi ebx +
xor eax eax +
stos   +
mov eax [esp+68h+var_5C] +
mov [esp+68h+var_60] 38h +
mov [esp+68h+var_64] offset a1_2_7 +
mov [esp+68h+var_68] ebx +
mov [esp+68h+var_4C] edx +
mov [esp+68h+var_50] eax +
mov [esp+68h+var_40] esi +
call sub_4981C0  +
mov ecx [esp+68h+var_4C] +
test ecx ecx +
mov edi eax +
jnz loc_48786D  +
jmp loc_487875  +
test edi edi +
jnz loc_487875  +
mov ecx esi +
sub ecx eax +
mov eax ecx +
add eax ebp +
mov [esp+68h+var_64] 4 +
mov [esp+68h+var_68] ebx +
mov [esp+68h+var_44] eax +
call sub_498260  +
cmp eax 1 +
mov edi eax +
jnz loc_487875  +
mov [esp+68h+var_68] ebx +
call sub_497FE0  +
mov edx [esp+68h+var_4C] +
test edx edx +
mov edi eax +
jz loc_487875  +
mov eax [esp+68h+var_40] +
test eax eax +
jnz loc_487834  +
mov [esp+68h+var_68] ebx +
call sub_49A070  +
xor edx edx +
or eax edi +
jnz loc_48788E  +
mov eax [esp+68h+var_40] +
xor edx edx +
test eax eax +
setz dl  +
add esp 5Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov esi [esp+3Ch+arg_8] +
mov ebx [esp+3Ch+arg_4] +
movzx eax byte ptr [eax+28h] +
mov edi [esi] +
and eax 18h +
cmp al 10h +
jz loc_487900  +
mov ebp [ebx+28h] +
test ebp ebp +
jz loc_487900  +
movzx eax byte ptr [ebx+18h] +
shr al 4 +
and eax 3 +
cmp eax 1 +
jz loc_487920  +
cmp eax 2 +
jz loc_4879A0  +
test eax eax +
jz loc_487950  +
mov [esp+3Ch+var_34] offset aBfd_get_full_s +
mov [esp+3Ch+var_38] 145h +
mov [esp+3Ch+var_3C] offset a____Binutil_14 +
call sub_44BA70  +
nop   +
mov ebp [ebx+24h] +
test ebp ebp +
jnz loc_4878C7  +
mov dword ptr [esi] 0 +
mov ebx 1 +
add esp 3Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+6Ch] +
test eax eax +
jz loc_487AB2  +
test edi edi +
jz loc_487AB9  +
cmp edi eax +
mov ebx 1 +
jz loc_487912  +
mov [esp+3Ch+var_34] ebp +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] edi +
call memcpy  +
jmp loc_487912  +
test edi edi +
jz loc_487AA0  +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_28] ebp +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] eax +
call sub_44DCC0  +
test eax eax +
jnz loc_487A8D  +
cmp [esi] edi +
jz loc_487AB2  +
mov [esp+3Ch+var_3C] edi +
xor ebx ebx +
call free  +
jmp loc_487912  +
mov eax [ebx+2Ch] +
mov [esp+3Ch+var_3C] eax +
call sub_459B80  +
test eax eax +
mov ecx eax +
mov [esp+3Ch+var_18] eax +
jz loc_487AB2  +
mov edx [ebx+28h] +
mov eax [ebx+24h] +
and byte ptr [ebx+18h] 0CFh +
mov [esp+3Ch+var_10] edx +
mov edx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_14] eax +
mov eax [ebx+2Ch] +
mov dword ptr [ebx+28h] 0 +
mov [ebx+24h] eax +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_28] eax +
mov [esp+3Ch+var_30] 0 +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_38] ebx +
call sub_44DCC0  +
mov edx [esp+3Ch+var_10] +
mov ecx [esp+3Ch+var_14] +
mov [ebx+28h] edx +
movzx edx byte ptr [ebx+18h] +
mov [ebx+24h] ecx +
and edx 0FFFFFFCFh +
or edx 20h +
test eax eax +
mov [ebx+18h] dl +
jz loc_487A6E  +
test edi edi +
jz loc_487AD1  +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] eax +
call sub_44CA70  +
mov edx 0Ch +
mov ecx edi +
test eax eax +
cmovz eax edx +
mov edx [ebx+2Ch] +
add eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] ebp +
call sub_4877E0  +
test eax eax +
jnz loc_487A81  +
mov [esp+3Ch+var_3C] 11h +
call sub_44BAF0  +
cmp [esi] edi +
jz loc_487A6E  +
mov [esp+3Ch+var_3C] edi +
call free  +
mov eax [esp+3Ch+var_18] +
xor ebx ebx +
mov [esp+3Ch+var_3C] eax +
call free  +
jmp loc_487912  +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call free  +
mov [esi] edi +
mov ebx 1 +
jmp loc_487912  +
mov [esp+3Ch+var_3C] ebp +
call sub_459B80  +
test eax eax +
mov edi eax +
jnz loc_487958  +
xor ebx ebx +
jmp loc_487912  +
mov [esp+3Ch+var_3C] ebp +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_487AB2  +
mov [esi] eax +
mov eax [ebx+6Ch] +
jmp loc_487933  +
mov [esp+3Ch+var_3C] ebp +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_487A6E  +
jmp loc_487A27  +
***
mov eax [esp+4] +
movzx edx byte ptr [eax+18h] +
mov ecx edx +
and ecx 30h +
cmp cl 20h +
jnz loc_487B0B  +
and edx 0FFFFFFCFh +
or edx 10h +
mov [eax+18h] dl +
mov edx [esp+8] +
or dword ptr [eax+14h] 4000h +
mov [eax+6Ch] edx +
retn   +
***
push esi  +
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 3Ch +
mov [esp+40h+var_3C] 0 +
mov [esp+40h+var_40] eax +
mov [esp+40h+var_2C] ecx +
call sub_44CA70  +
mov [esp+40h+var_3C] ebx +
mov [esp+40h+var_40] esi +
mov ebp eax +
lea eax [esp+40h+var_14] +
mov [esp+40h+var_34] eax +
lea eax [esp+40h+var_18] +
mov [esp+40h+var_38] eax +
call sub_487B20  +
test ebp ebp +
mov edx 0Ch +
cmovz ebp edx +
test eax eax +
jz loc_487DB0  +
mov eax [esp+40h+var_18] +
test eax eax +
js loc_487F13  +
mov edx [esp+40h+arg_0] +
sub edx eax +
test eax eax +
jnz loc_487D34  +
mov eax [esp+40h+arg_0] +
mov [esp+40h+var_18] 0Ch +
lea edx [eax-0Ch] +
mov ecx [esp+40h+var_14] +
lea eax [edx+ebp] +
mov [esp+40h+var_1C] eax +
cmp eax ecx +
jbe loc_487E92  +
mov [esp+40h+var_3C] ecx +
mov [esp+40h+var_40] esi +
mov [esp+40h+var_24] edx +
mov [esp+40h+var_28] ecx +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_487E88  +
mov eax [esp+40h+var_14] +
mov ecx [esp+40h+var_28] +
mov edx [esp+40h+var_24] +
mov [ebx+24h] eax +
mov eax [esp+40h+var_2C] +
add eax [esp+40h+var_18] +
mov [esp+40h+var_40] ecx +
mov ecx edi +
call sub_4877E0  +
test eax eax +
jnz loc_487EEB  +
mov [esp+40h+var_40] 11h +
call sub_44BAF0  +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] esi +
call sub_458CD0  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+40h+arg_0] +
mov [esp+40h+var_40] eax +
call sub_49A6E0  +
mov [esp+40h+var_40] esi +
add eax ebp +
mov [esp+40h+var_3C] eax +
mov [esp+40h+var_1C] eax +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_487E88  +
mov eax [esp+40h+arg_0] +
mov [esp+40h+var_34] eax +
mov eax [esp+40h+var_2C] +
mov [esp+40h+var_38] eax +
lea eax [esp+40h+var_1C] +
mov [esp+40h+var_3C] eax +
lea eax [edi+ebp] +
mov [esp+40h+var_40] eax +
call sub_49A6A0  +
test eax eax +
jnz loc_487E70  +
mov ecx [esp+40h+var_1C] +
add ecx ebp +
cmp [esp+40h+arg_0] ecx +
mov [esp+40h+var_1C] ecx +
jbe loc_487E50  +
mov [esp+40h+var_38] ebx +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] esi +
call sub_44C830  +
nop   +
mov eax [esp+40h+var_2C] +
mov [esp+40h+var_40] eax +
call free  +
mov eax [esp+40h+var_1C] +
mov [ebx+6Ch] edi +
mov [ebx+24h] eax +
movzx eax byte ptr [ebx+18h] +
and eax 0FFFFFFCFh +
or eax 10h +
mov [ebx+18h] al +
mov eax [esp+40h+arg_0] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] esi +
call sub_458CD0  +
mov eax [esp+40h+var_2C] +
and byte ptr [ebx+18h] 0CFh +
mov [ebx+6Ch] eax +
mov eax [esp+40h+arg_0] +
jmp loc_487E47  +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] esi +
call sub_458CD0  +
mov [esp+40h+var_40] 11h +
call sub_44BAF0  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+40h+var_3C] eax +
mov [esp+40h+var_40] esi +
mov [esp+40h+var_28] edx +
call sub_458A80  +
mov edx [esp+40h+var_28] +
test eax eax +
mov edi eax +
jz loc_487E88  +
mov eax [esp+40h+var_14] +
mov [esp+40h+var_38] ebx +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] esi +
mov [ebx+24h] eax +
mov [esp+40h+var_28] edx +
call sub_44C830  +
mov edx [esp+40h+var_28] +
lea ecx [edi+ebp] +
mov eax [esp+40h+var_2C] +
add eax [esp+40h+var_18] +
mov [esp+40h+var_40] ecx +
mov [esp+40h+var_38] edx +
mov [esp+40h+var_3C] eax +
call memmove  +
jmp loc_487E20  +
mov eax [esp+40h+var_2C] +
mov [esp+40h+var_40] eax +
call free  +
movzx eax byte ptr [ebx+18h] +
mov [ebx+6Ch] edi +
and eax 0FFFFFFCFh +
or eax 10h +
mov [ebx+18h] al +
mov eax [esp+40h+var_14] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+40h+var_38] offset aBfd_compress_s +
mov [esp+40h+var_3C] 66h +
mov [esp+40h+var_40] offset a____Binutil_14 +
call sub_44BA70  +
nop   +
sub esp 2Ch +
lea eax [esp+6Ch+var_50] +
mov [esp+6Ch+var_60] eax +
lea eax [esp+6Ch+var_54] +
mov [esp+6Ch+var_64] eax +
mov eax [esp+6Ch+var_38] +
mov [esp+6Ch+var_68] eax +
mov eax [esp+6Ch+var_3C] +
mov [esp+6Ch+var_6C] eax +
call sub_487B20  +
xor edx edx +
test eax eax +
jz loc_487F70  +
mov ecx [esp+6Ch+var_54] +
test ecx ecx +
js loc_487F70  +
mov eax [esp+6Ch+var_50] +
xor edx edx +
test eax eax +
setnz dl  +
mov eax edx +
add esp 2Ch +
retn   +
***
push esi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+2Ch+arg_0] +
mov ebx [esp+2Ch+arg_4] +
movzx ecx byte ptr [esi+28h] +
and ecx 18h +
cmp cl 8 +
jnz loc_4880D0  +
mov edi [ebx+24h] +
test edi edi +
jz loc_4880D0  +
mov edx [ebx+28h] +
test edx edx +
jnz loc_4880D0  +
mov eax [ebx+6Ch] +
test eax eax +
jz loc_4880E6  +
mov [esp+2Ch+var_2C] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test byte ptr [ebx+18h] 30h +
jnz loc_4880D0  +
mov [esp+2Ch+var_2C] edi +
call sub_459B80  +
mov [esp+2Ch+var_18] edi +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_28] ebx +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_24] eax +
mov ebp eax +
call sub_44DCC0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_4880DE  +
mov [esp+2Ch+var_2C] edi +
mov ecx ebp +
mov edx ebx +
mov eax esi +
call sub_487CC0  +
test eax eax +
setnz al  +
movzx eax al +
jmp loc_4880DE  +
***
mov eax [esp+18h+arg_0] +
mov edx [esp+18h+arg_4] +
movzx ecx byte ptr [eax+28h] +
mov ebx [edx+24h] +
and ecx 18h +
cmp cl 10h +
jnz loc_48816E  +
test ebx ebx +
jz loc_48816E  +
mov ecx [esp+18h+arg_8] +
test ecx ecx +
jz loc_48816E  +
mov ecx [edx+6Ch] +
test ecx ecx +
jz loc_488181  +
mov [esp+18h+var_18] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov ecx [edx+2Ch] +
test ecx ecx +
jnz loc_48816E  +
test byte ptr [edx+18h] 30h +
jnz loc_48816E  +
mov ecx [esp+18h+arg_8] +
mov [esp+18h+var_18] ebx +
call sub_487CC0  +
test eax eax +
setnz al  +
movzx eax al +
jmp loc_48817C  +
***
push ebx  +
mov ebx [esp+0Ch] +
mov eax [esp+8] +
mov ecx [ebx+0Ch] +
cmp [eax+0Ch] ecx +
jnz loc_488210  +
mov edx [eax+10h] +
mov ecx [ebx+10h] +
cmp edx ecx +
jz loc_4881F2  +
cmp edx 6 +
jz loc_488210  +
cmp ecx 6 +
jz loc_488210  +
cmp edx 5 +
ja loc_4881F4  +
cmp ecx 5 +
ja loc_488214  +
cmp edx 3 +
jz loc_488262  +
cmp edx 4 +
jz loc_488270  +
cmp edx ecx +
nop   +
jbe loc_488227  +
pop ebx  +
retn   +
***
cmp edx 19h +
jz loc_488222  +
cmp edx 3 +
lea esi [esi+0] +
jnz loc_488230  +
cmp ecx 1Fh +
jz loc_4881F2  +
cmp ecx 23h +
jz loc_4881F2  +
lea esi [esi+0] +
xor eax eax +
pop ebx  +
retn   +
***
cmp edx 2 +
jnz loc_4881F9  +
cmp ecx 19h +
jz loc_4881F2  +
xor eax eax +
jmp loc_488212  +
***
cmp ecx 2 +
jnz loc_488210  +
mov eax ebx +
pop ebx  +
retn   +
***
cmp edx 1Fh +
jnz loc_48823E  +
cmp ecx 3 +
jz loc_488227  +
xor eax eax +
jmp loc_488212  +
***
cmp edx 23h +
jz loc_488235  +
cmp edx 5 +
jnz loc_488252  +
cmp ecx 33h +
jz loc_4881F2  +
xor eax eax +
nop   +
jmp loc_488212  +
***
cmp edx 33h +
jnz loc_488210  +
cmp ecx 5 +
jnz loc_488210  +
mov eax ebx +
nop   +
jmp loc_488229  +
***
cmp ecx 4 +
jnz loc_4881ED  +
xor eax eax +
jmp loc_488212  +
***
cmp ecx 3 +
jnz loc_4881ED  +
xor eax eax +
jmp loc_488212  +
***
sub esp 1Ch +
mov edx [esp+1Ch+arg_0] +
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 3 +
jnz loc_4882A0  +
mov eax [edx+4] +
mov eax [eax+0C8h] +
add esp 1Ch +
jmp eax  +
mov [esp+1Ch+var_1C] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
sub esp 1Ch +
mov edx [esp+20h] +
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 3 +
jz loc_4882E4  +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov eax [edx+4] +
mov eax [eax+0CCh] +
add esp 1Ch +
jmp eax  +
***
sub esp 1Ch +
mov edx [esp+20h] +
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 3 +
jz loc_488324  +
mov dword ptr [esp] 5 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov eax [edx+4] +
mov eax [eax+0D4h] +
add esp 1Ch +
jmp eax  +
***
sub esp 1Ch +
mov edx [esp+20h] +
mov ecx [esp+24h] +
movzx eax byte ptr [edx+28h] +
and eax 7 +
cmp al 3 +
jnz loc_488361  +
movzx eax byte ptr [ecx+28h] +
and eax 7 +
cmp al 1 +
jz loc_488373  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 1Ch +
retn   +
***
mov eax [edx+4] +
mov eax [eax+0D0h] +
add esp 1Ch +
jmp eax  +
***
jmp loc_488390  +
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+24h] +
test ebx ebx +
jnz loc_4883A8  +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+20h] +
test eax eax +
jz loc_48839D  +
mov eax [esp+20h] +
mov [esp] eax +
call sub_488280  +
test eax eax +
mov esi eax +
jz loc_48839D  +
mov ebx [ebx] +
test ebx ebx +
jz loc_48839D  +
mov dword ptr [esp+4] 2Fh +
mov [esp] eax +
call strrchr  +
mov [esp] ebx +
mov dword ptr [esp+4] 2Fh +
lea edx [eax+1] +
test eax eax +
cmovnz esi edx +
call strrchr  +
mov [esp+4] esi +
test eax eax +
lea edx [eax+1] +
cmovnz ebx edx +
mov [esp] ebx +
call sub_4A8B70  +
test eax eax +
setz al  +
add esp 14h +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
mov eax [esp+arg_0] +
mov ecx [eax] +
mov eax [esp+arg_4] +
mov edx [eax] +
mov eax [ecx+0Ch] +
mov ecx [ecx+4] +
mov ebp [edx+0Ch] +
mov edx [edx+4] +
lea edi [ecx+eax-1] +
cmp ebp eax +
lea esi [edx+ebp-1] +
mov edx eax +
cmovbe edx ebp +
test edx edx +
jz loc_488474  +
movzx ebx byte ptr [edi] +
movzx ecx byte ptr [esi] +
cmp bl cl +
jnz loc_488480  +
mov ecx edx +
neg ecx  +
add edi ecx +
add esi ecx +
jmp loc_48846F  +
movzx ebx byte ptr [edi+edx] +
movzx ecx byte ptr [esi+edx] +
cmp bl cl +
jnz loc_488480  +
sub edx 1 +
jnz loc_488463  +
pop ebx  +
sub eax ebp +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax bl +
sub eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test edx edx +
jz loc_4884E0  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] edx +
mov [esp+18h+var_10] eax +
call sub_44E4A0  +
test eax eax +
jz loc_4884D2  +
mov dword ptr [eax+14h] 0FFFFFFFFh +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+0Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov [esp+18h+var_14] 18h +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_4884CD  +
jmp loc_4884A0  +
***
mov [esp+18h+var_18] 2Ch +
call sub_459B80  +
test eax eax +
mov ebx eax +
jz loc_488576  +
mov [esp+18h+var_10] 18h +
mov [esp+18h+var_14] offset sub_488490 +
mov [esp+18h+var_18] eax +
call sub_44DF20  +
test eax eax +
jz loc_488567  +
mov dword ptr [ebx+24h] 0 +
mov dword ptr [ebx+1Ch] 1 +
mov dword ptr [ebx+20h] 40h +
mov [esp+18h+var_18] 100h +
call sub_459B80  +
test eax eax +
mov [ebx+28h] eax +
jz loc_488567  +
mov dword ptr [eax] 0 +
mov eax ebx +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] ebx +
call free  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
xor eax eax +
jmp loc_488562  +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] ebx +
call sub_44DF50  +
mov eax [ebx+28h] +
mov [esp+18h+var_18] eax +
call free  +
mov [esp+18h+arg_0] ebx +
add esp 18h +
pop ebx  +
jmp free  +
***
push esi  +
push ebx  +
sub esp 10h +
mov edi [esp+18h+arg_4] +
mov esi [esp+18h+arg_0] +
cmp byte ptr [edi] 0 +
jz loc_488625  +
mov edx [esi+24h] +
test edx edx +
jnz loc_488630  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_10] 1 +
mov [esp+18h+var_14] edi +
mov [esp+18h+var_18] esi +
mov [esp+18h+var_C] eax +
call sub_44E180  +
test eax eax +
mov ebx eax +
jz loc_488646  +
add dword ptr [eax+10h] 1 +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_488622  +
mov [esp+18h+var_18] edi +
call strlen  +
add eax 1 +
test eax eax +
mov [ebx+0Ch] eax +
jle loc_488676  +
mov edx [esi+1Ch] +
cmp edx [esi+20h] +
jz loc_488652  +
mov eax [esi+28h] +
lea ecx [edx+1] +
mov [esi+1Ch] ecx +
mov [ebx+14h] edx +
mov [eax+edx*4] ebx +
mov eax [ebx+14h] +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+18h+var_14] 99h +
mov [esp+18h+var_18] offset a____Binutil_13 +
call sub_44BA40  +
jmp loc_4885CC  +
add esp 10h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
retn   +
lea eax [edx+edx] +
mov [esi+20h] eax +
mov eax [esi+28h] +
shl edx 3 +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call sub_459CD0  +
test eax eax +
mov [esi+28h] eax +
jz loc_488646  +
mov edx [esi+1Ch] +
jmp loc_488616  +
mov [esp+18h+var_14] 0A5h +
mov [esp+18h+var_18] offset a____Binutil_13 +
call sub_44BA40  +
jmp loc_48860B  +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov esi [esp+14h+arg_0] +
lea eax [ebx-1] +
cmp eax 0FFFFFFFDh +
ja loc_4886BB  +
mov eax [esi+24h] +
test eax eax +
jnz loc_4886D7  +
cmp ebx [esi+1Ch] +
jnb loc_4886C1  +
mov eax [esi+28h] +
mov eax [eax+ebx*4] +
add dword ptr [eax+10h] 1 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_10] 0BCh +
mov [esp+14h+var_14] offset a____Binutil_13 +
call sub_44BA40  +
jmp loc_4886B1  +
mov [esp+14h+var_10] 0BBh +
mov [esp+14h+var_14] offset a____Binutil_13 +
call sub_44BA40  +
cmp ebx [esi+1Ch] +
jb loc_4886B1  +
jmp loc_4886C1  +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov esi [esp+14h+arg_0] +
lea eax [ebx-1] +
cmp eax 0FFFFFFFDh +
ja loc_488734  +
mov eax [esi+24h] +
test eax eax +
jnz loc_488760  +
cmp ebx [esi+1Ch] +
jnb loc_488779  +
mov eax [esi+28h] +
mov eax [eax+ebx*4] +
mov edx [eax+10h] +
test edx edx +
jz loc_488740  +
sub edx 1 +
mov [eax+10h] edx +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov [esp+14h+var_10] 0C7h +
mov [esp+14h+var_14] offset a____Binutil_13 +
call sub_44BA40  +
mov eax [esi+28h] +
mov eax [eax+ebx*4] +
mov edx [eax+10h] +
jmp loc_48872E  +
***
mov [esp+14h+var_10] 0C5h +
mov [esp+14h+var_14] offset a____Binutil_13 +
call sub_44BA40  +
cmp ebx [esi+1Ch] +
jb loc_488721  +
mov [esp+14h+var_10] 0C6h +
mov [esp+14h+var_14] offset a____Binutil_13 +
call sub_44BA40  +
mov eax [esi+28h] +
mov eax [eax+ebx*4] +
mov edx [eax+10h] +
test edx edx +
jnz loc_48872E  +
jmp loc_488740  +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov eax [eax+28h] +
mov eax [eax+edx*4] +
mov eax [eax+10h] +
retn   +
***
mov eax [esp+arg_0] +
mov edx [eax+1Ch] +
cmp edx 1 +
jbe locret_4887E5  +
mov ecx [eax+28h] +
lea eax [ecx+4] +
lea ecx [ecx+edx*4] +
mov edx [eax] +
add eax 4 +
cmp eax ecx +
mov dword ptr [edx+10h] 0 +
jnz loc_4887D5  +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov ebx [esp+10h+arg_4] +
mov eax [edi+24h] +
mov esi [edi+1Ch] +
test eax eax +
jnz loc_488835  +
cmp esi ebx +
jb loc_48884D  +
cmp esi ebx +
mov [edi+1Ch] ebx +
jbe loc_48882E  +
mov edx [edi+28h] +
mov eax [edx+ebx*4] +
add ebx 1 +
cmp ebx esi +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+0Ch] 0 +
jnz loc_488816  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_C] 0E1h +
mov [esp+10h+var_10] offset a____Binutil_13 +
call sub_44BA40  +
cmp esi ebx +
jnb loc_48880C  +
mov [esp+10h+var_C] 0E2h +
mov [esp+10h+var_10] offset a____Binutil_13 +
call sub_44BA40  +
jmp loc_48880C  +
***
mov edx [esp+arg_0] +
push esi  +
push esi  +
push esi  +
push esi  +
push ebx  +
mov eax [esp+arg_0] +
mov ecx [eax] +
mov eax [esp+arg_4] +
mov edx [eax] +
mov eax [ecx+0Ch] +
mov ecx [ecx+4] +
mov ebp [edx+0Ch] +
mov edx [edx+4] +
lea edi [ecx+eax-1] +
cmp ebp eax +
lea esi [edx+ebp-1] +
mov edx eax +
cmovbe edx ebp +
test edx edx +
jz loc_488BD4  +
movzx ebx byte ptr [edi] +
movzx ecx byte ptr [esi] +
cmp bl cl +
jnz loc_488BE0  +
mov ecx edx +
neg ecx  +
add edi ecx +
add esi ecx +
jmp loc_488BCF  +
movzx ebx byte ptr [edi+edx] +
movzx ecx byte ptr [esi+edx] +
cmp bl cl +
jnz loc_488BE0  +
sub edx 1 +
jnz loc_488BC3  +
pop ebx  +
sub eax ebp +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax bl +
sub eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
mov eax [eax] +
mov edx [edx] +
mov ebp [eax+0Ch] +
mov edi [edx+0Ch] +
mov ecx [edx+4] +
mov edx [eax+10h] +
mov ebx [eax+4] +
sub edx 1 +
mov eax edx +
and edx edi +
and eax ebp +
sub eax edx +
test eax eax +
jnz loc_488C5A  +
cmp edi ebp +
mov edx ebp +
cmovbe edx edi +
test edx edx +
jz loc_488C56  +
lea esi [ebx+ebp-1] +
lea ebx [ecx+edi-1] +
movzx eax byte ptr [esi] +
movzx ecx byte ptr [ebx] +
cmp al cl +
jnz loc_488C60  +
mov eax edx +
neg eax  +
add esi eax +
add ebx eax +
jmp loc_488C51  +
movzx eax byte ptr [esi+edx] +
movzx ecx byte ptr [ebx+edx] +
cmp al cl +
jnz loc_488C60  +
sub edx 1 +
jnz loc_488C45  +
mov eax ebp +
sub eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
pop ebx  +
sub eax ecx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test edx edx +
jz loc_488CC7  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] edx +
mov [esp+18h+var_10] eax +
call sub_44E4A0  +
test eax eax +
jz loc_488CC0  +
mov dword ptr [eax+14h] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+18h] 0 +
mov dword ptr [eax+1Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov [esp+18h+var_14] 20h +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_488CB4  +
jmp loc_488C80  +
***
jmp sub_488CF0  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov [esp+2Ch+var_10] ecx +
mov ecx [eax+2Ch] +
mov [esp+2Ch+var_14] eax +
mov [esp+2Ch+var_18] edx +
test ecx ecx +
jnz loc_488DD7  +
mov esi [eax+28h] +
xor ebx ebx +
mov eax edx +
test esi esi +
lea edi [edx+esi] +
jz loc_488EB2  +
add eax 1 +
movzx edx byte ptr [eax-1] +
mov ecx edx +
shl ecx 11h +
add edx ecx +
add edx ebx +
mov ebx edx +
shr ebx 2 +
xor ebx edx +
cmp eax edi +
jnz loc_488D20  +
mov edi [esp+2Ch+var_14] +
xor edx edx +
mov eax ebx +
div  dword ptr [edi+0Ch] +
mov eax [edi] +
mov edi [eax+edx*4] +
test edi edi +
jnz loc_488D57  +
jmp loc_488DA1  +
mov edi [edi] +
test edi edi +
jz loc_488DA1  +
cmp [edi+8] ebx +
jnz loc_488D51  +
cmp [edi+0Ch] esi +
jnz loc_488D51  +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] eax +
mov eax [edi+4] +
mov [esp+2Ch+var_2C] eax +
call memcmp  +
test eax eax +
jnz loc_488D51  +
mov edx [esp+2Ch+var_10] +
mov eax edi +
cmp [edi+10h] edx +
jnb loc_488DCF  +
mov edx [esp+2Ch+arg_0] +
xor eax eax +
test edx edx +
jz loc_488DCF  +
mov dword ptr [edi+0Ch] 0 +
mov dword ptr [edi+10h] 0 +
jmp loc_488DA9  +
mov eax [esp+2Ch+arg_0] +
test eax eax +
jz loc_488E0A  +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] eax +
call sub_44DF70  +
test eax eax +
jz loc_488E0A  +
mov [eax+0Ch] esi +
mov esi [esp+2Ch+var_10] +
mov [eax+10h] esi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+var_14] +
mov esi [eax+28h] +
cmp esi 1 +
jz loc_488E6A  +
test esi esi +
jnz loc_488E14  +
xor ebp ebp +
xor edx edx +
nop   +
mov eax ebp +
add edx ebp +
shl eax 11h +
imul ebp esi +
add eax edx +
mov ebx eax +
shr ebx 2 +
xor ebx eax +
add esi ebp +
jmp loc_488D3B  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+var_18] +
xor ebp ebp +
xor edx edx +
lea esi [esi+0] +
movzx edi byte ptr [eax] +
mov ebx edi +
test bl bl +
jnz loc_488E41  +
xor ecx ecx +
nop   +
lea esi [esi+0] +
add ecx 1 +
cmp ecx esi +
jz loc_488DF0  +
cmp byte ptr [eax+ecx] 0 +
jz loc_488E30  +
cmp esi ecx +
jz loc_488DF0  +
lea ebx [eax+esi] +
mov ecx edi +
jmp loc_488E4B  +
movzx ecx byte ptr [eax] +
movzx ecx cl +
add eax 1 +
mov edi ecx +
shl edi 11h +
add ecx edi +
add ecx edx +
mov edx ecx +
shr edx 2 +
xor edx ecx +
cmp eax ebx +
jnz loc_488E48  +
add ebp 1 +
jmp loc_488E20  +
mov ecx [esp+2Ch+var_18] +
movzx eax byte ptr [ecx] +
test eax eax +
jz loc_488EB9  +
xor ebp ebp +
xor edx edx +
lea esi [esi+0] +
mov ebx eax +
add ebp 1 +
shl ebx 11h +
add eax ebx +
add eax edx +
mov edx eax +
shr edx 2 +
xor edx eax +
movzx eax byte ptr [ecx+ebp] +
test eax eax +
jnz loc_488E80  +
mov eax ebp +
add edx ebp +
shl eax 11h +
add esi ebp +
add eax edx +
mov ebx eax +
shr ebx 2 +
xor ebx eax +
jmp loc_488D3B  +
mov ebx esi +
jmp loc_488D3B  +
xor ebp ebp +
xor ebx ebx +
add esi ebp +
jmp loc_488D3B  +
***
sub esp 18h +
mov [esp+18h+var_18] 1 +
call sub_488CF0  +
test eax eax +
mov edx eax +
jz loc_488F20  +
mov ecx [edx+18h] +
test ecx ecx +
jz loc_488EF4  +
add esp 18h +
pop ebx  +
retn   +
mov eax [esp+18h+arg_0] +
add dword ptr [ebx+1Ch] 1 +
mov [edx+18h] eax +
mov eax [ebx+20h] +
test eax eax +
jz loc_488F16  +
mov eax [ebx+24h] +
mov [eax+1Ch] edx +
mov [ebx+24h] edx +
add esp 18h +
mov eax edx +
pop ebx  +
retn   +
mov [ebx+20h] edx +
jmp loc_488F0C  +
xor eax eax +
jmp loc_488EEF  +
***
push esi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebp [esp+2Ch+arg_8] +
test ebp ebp +
jz loc_489466  +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+4] +
test eax eax +
jz loc_489454  +
mov edx [eax] +
mov ecx [esp+2Ch+arg_8] +
test edx edx +
mov ebp edx +
mov [ecx+4] edx +
mov dword ptr [eax] 0 +
jnz loc_48921E  +
jmp loc_489304  +
mov edi [esp+2Ch+arg_C] +
mov eax [ebp+8] +
test edi edi +
mov dword ptr [eax] 0 +
jz loc_489213  +
mov eax [ebp+4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call [esp+2Ch+arg_C]  +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_489304  +
mov eax [ebp+4] +
mov [esp+2Ch+var_18] eax +
mov eax [eax+14h] +
test ah 80h +
jnz loc_4891F0  +
mov edi [esp+2Ch+var_18] +
test eax 1000000h +
lea ebx [ebp+14h] +
mov edx [edi+24h] +
mov ecx [edi+40h] +
lea esi [ebp+edx+14h] +
jz loc_489407  +
cmp esi ebx +
jbe loc_489213  +
mov eax 1 +
xor edi edi +
shl eax cl +
mov [esp+2Ch+var_10] eax +
sub eax 1 +
mov [esp+2Ch+var_14] ebp +
mov ebp ebx +
mov [esp+2Ch+var_1C] eax +
mov eax ebx +
sub eax ebp +
lea ecx [eax-1] +
xor ecx eax +
add ecx 1 +
shr ecx 1 +
cmp [esp+2Ch+var_1C] ecx +
jb loc_48927F  +
test ecx ecx +
jnz loc_489283  +
mov ecx [esp+2Ch+var_10] +
mov eax [esp+2Ch+arg_8] +
mov edx [esp+2Ch+var_14] +
mov eax [eax+8] +
mov [esp+2Ch+var_2C] edx +
mov edx ebx +
call sub_488ED0  +
test eax eax +
jz loc_48943A  +
mov ecx [esp+2Ch+var_18] +
add ebx [eax+0Ch] +
mov edx [ecx+78h] +
cmp edx 1 +
jz loc_4893A4  +
cmp esi ebx +
jbe loc_4892F5  +
test edx edx +
jz loc_4892E1  +
cmp byte ptr [ebx] 0 +
nop   +
jnz loc_489393  +
xor eax eax +
jmp loc_4892DA  +
cmp byte ptr [ebx+eax] 0 +
jnz loc_489393  +
add eax 1 +
cmp eax edx +
jnz loc_4892D0  +
test edi edi +
jnz loc_4892EF  +
mov eax ebx +
sub eax ebp +
test [esp+2Ch+var_1C] eax +
jz loc_489360  +
add ebx edx +
cmp esi ebx +
ja loc_4892B7  +
mov ebp [esp+2Ch+var_14] +
mov ebp [ebp+0] +
test ebp ebp +
jnz loc_48921E  +
mov eax [esp+2Ch+arg_8] +
mov ecx [eax+8] +
mov eax [ecx+20h] +
test eax eax +
jz loc_489454  +
mov esi [ecx+2Ch] +
xor edx edx +
xor ebx ebx +
test esi esi +
jz loc_489344  +
jmp loc_48947A  +
mov ebx [eax+10h] +
lea edx [edx+ebx-1] +
neg ebx  +
and edx ebx +
mov ebx ecx +
mov [eax+14h] edx +
add edx [eax+0Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_48969B  +
mov ecx [eax+18h] +
mov esi [ecx+10h] +
test esi esi +
jnz loc_489326  +
test ebx ebx +
jz loc_489358  +
mov ebx [ebx+4] +
mov [ebx+24h] edx +
mov [ecx+10h] eax +
xor edx edx +
jmp loc_489326  +
mov ecx [esp+2Ch+var_14] +
mov edx ebx +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+8] +
mov [esp+2Ch+var_2C] ecx +
mov ecx [esp+2Ch+var_10] +
call sub_488ED0  +
test eax eax +
jz loc_48943A  +
mov eax [esp+2Ch+var_18] +
mov di 1 +
mov edx [eax+78h] +
add ebx edx +
jmp loc_4892F1  +
cmp esi ebx +
ja loc_489267  +
mov ebp [esp+2Ch+var_14] +
jmp loc_4892F9  +
cmp esi ebx +
jbe loc_4892F5  +
cmp byte ptr [ebx] 0 +
nop   +
jnz loc_489267  +
mov eax edi +
mov edi [esp+2Ch+var_1C] +
jmp loc_4893D4  +
add ebx 1 +
cmp ebx esi +
jz loc_4892F5  +
cmp byte ptr [ebx] 0 +
jnz loc_489473  +
test eax eax +
jnz loc_4893C0  +
mov edx ebx +
sub edx ebp +
test edi edx +
jnz loc_4893C0  +
mov ecx [esp+2Ch+var_14] +
mov edx offset unk_504D5F +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+8] +
mov [esp+2Ch+var_2C] ecx +
mov ecx [esp+2Ch+var_10] +
call sub_488ED0  +
test eax eax +
jz loc_48943A  +
mov eax 1 +
jmp loc_4893C0  +
cmp esi ebx +
jbe loc_489213  +
mov edi [esp+2Ch+arg_8] +
jmp loc_489424  +
mov eax [esp+2Ch+var_18] +
add ebx [eax+78h] +
cmp esi ebx +
jbe loc_489213  +
mov eax [edi+8] +
mov ecx 1 +
mov edx ebx +
mov [esp+2Ch+var_2C] ebp +
call sub_488ED0  +
test eax eax +
jnz loc_489415  +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+4] +
test eax eax +
jz loc_489454  +
mov edx [eax+8] +
mov dword ptr [edx] 0 +
mov eax [eax] +
test eax eax +
jnz loc_489445  +
mov eax [esp+2Ch+arg_8] +
mov eax [eax] +
test eax eax +
mov [esp+2Ch+arg_8] eax +
jnz loc_4891C3  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi eax +
jmp loc_489267  +
mov eax [ecx+1Ch] +
shl eax 2 +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
test eax eax +
mov edi eax +
jz loc_4895B2  +
mov eax [esp+2Ch+arg_8] +
mov edx [eax+8] +
mov eax [edx+20h] +
test eax eax +
jz loc_4895A3  +
mov ebp edi +
xor ecx ecx +
jmp loc_4894B2  +
mov ebp ebx +
mov esi [eax+10h] +
mov ebx ebp +
test esi esi +
jz loc_4894DC  +
mov edx [esp+2Ch+arg_8] +
add ebx 4 +
mov [ebp+0] eax +
mov edx [edx+8] +
mov ebp [edx+28h] +
sub [eax+0Ch] ebp +
cmp esi ecx +
jz loc_4894DC  +
test ecx ecx +
mov ecx 0FFFFFFFFh +
cmovz ecx esi +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_4894B0  +
mov eax ebx +
sub eax edi +
sar eax 2 +
test eax eax +
mov [edx+1Ch] eax +
jz loc_4895AA  +
cmp ecx 0FFFFFFFFh +
jz loc_489504  +
cmp [edx+28h] ecx +
mov esi offset sub_488BF0 +
jb loc_489509  +
mov esi offset sub_488B80 +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_24] 4 +
mov [esp+2Ch+var_2C] edi +
call qsort  +
lea eax [ebx-4] +
mov ebp [ebx-4] +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+8] +
mov eax [eax+28h] +
add [ebp+0Ch] eax +
mov [esp+2Ch+var_18] eax +
sub [esp+2Ch+var_1C] 4 +
cmp edi [esp+2Ch+var_1C] +
ja loc_4895AA  +
mov eax [esp+2Ch+var_1C] +
mov ebx [eax] +
mov eax [esp+2Ch+var_18] +
mov esi [ebx+10h] +
add eax [ebx+0Ch] +
cmp [ebp+10h] esi +
mov [ebx+0Ch] eax +
jb loc_48959F  +
mov ecx [ebp+0Ch] +
sub esi 1 +
mov edx ecx +
sub edx eax +
test esi edx +
jnz loc_48959F  +
mov esi [ebp+4] +
cmp eax ecx +
mov [esp+2Ch+var_14] esi +
mov esi [ebx+4] +
jnb loc_48959F  +
add edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] edx +
call memcmp  +
test eax eax +
jnz loc_48959F  +
mov [ebx+14h] ebp +
mov dword ptr [ebx+10h] 0 +
mov ebx ebp +
mov ebp ebx +
jmp loc_48953C  +
mov dword ptr [edx+1Ch] 0 +
mov [esp+2Ch+var_2C] edi +
call free  +
mov eax [esp+2Ch+arg_8] +
xor edx edx +
mov ebx [eax+8] +
mov eax [ebx+20h] +
mov ecx [eax+18h] +
mov esi [eax+10h] +
test esi esi +
jz loc_4895E1  +
mov ebp [ecx+10h] +
test ebp ebp +
jz loc_489691  +
lea edx [edx+esi-1] +
neg esi  +
and edx esi +
mov [eax+14h] edx +
add edx [eax+0Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_4895F9  +
mov esi [eax+18h] +
cmp ecx esi +
jz loc_4895F5  +
mov ecx [ecx+4] +
mov [ecx+24h] edx +
mov ecx esi +
jmp loc_4895C1  +
mov eax [ecx+4] +
mov ecx [eax+40h] +
mov [eax+24h] edx +
test ecx ecx +
jz loc_48961A  +
mov edi 1 +
shl edi cl +
mov ecx edi +
lea edx [edx+edi-1] +
neg ecx  +
and edx ecx +
mov [eax+24h] edx +
mov eax [ebx+20h] +
lea esi [ebx+20h] +
test eax eax +
jnz loc_489630  +
jmp loc_489664  +
lea esi [eax+1Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_489664  +
mov edi [eax+10h] +
test edi edi +
jnz loc_489626  +
mov ebx [eax+0Ch] +
mov edx [eax+1Ch] +
test ebx ebx +
mov [esi] edx +
jz loc_489629  +
mov ecx [eax+14h] +
mov edx [ecx+18h] +
mov [eax+18h] edx +
mov edx [ecx+10h] +
mov [eax+10h] edx +
mov edx [ecx+0Ch] +
add edx [ecx+14h] +
sub edx ebx +
mov [eax+14h] edx +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_489630  +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+4] +
test eax eax +
jnz loc_48967E  +
jmp loc_489454  +
mov eax [eax] +
test eax eax +
jz loc_489454  +
mov edx [eax+10h] +
test edx edx +
jnz loc_489674  +
mov edx [eax+4] +
or dword ptr [edx+14h] 208000h +
jmp loc_489674  +
mov [ecx+10h] eax +
xor edx edx +
jmp loc_4895D3  +
mov eax [ecx+4] +
mov [eax+24h] edx +
jmp loc_489664  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+3Ch+arg_8] +
mov esi [esp+3Ch+arg_4] +
test edi edi +
jz loc_489810  +
mov ebx [edi+10h] +
test ebx ebx +
jz loc_489867  +
mov ecx [esi+3Ch] +
mov edx [ecx+8Ch] +
mov eax [edx+10h] +
and eax [edx+14h] +
cmp eax 0FFFFFFFFh +
jz loc_489874  +
mov [esp+3Ch+var_30] 0 +
mov eax [esi+38h] +
xor edx edx +
add eax [ecx+50h] +
adc edx [ecx+54h] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_489810  +
mov ebx [edi+10h] +
mov [esp+3Ch+var_14] 0 +
mov eax [ebx+18h] +
xor edi edi +
mov esi [esi+38h] +
mov [esp+3Ch+var_18] 0 +
mov [esp+3Ch+var_1C] eax +
mov eax [eax+4] +
mov [esp+3Ch+var_10] eax +
mov eax [eax+3Ch] +
mov ecx [eax+40h] +
test ecx ecx +
jnz loc_4898D0  +
mov ebp [esp+3Ch+var_14] +
xor ecx ecx +
mov [esp+3Ch+var_24] esi +
mov esi ecx +
mov [esp+3Ch+var_20] edi +
lea esi [esi+0] +
test ebp ebp +
mov eax [ebx+4] +
mov edi [ebx+0Ch] +
jz loc_4897E8  +
mov ecx [esp+3Ch+var_24] +
mov [esp+3Ch+var_34] edi +
mov [esp+3Ch+var_38] eax +
lea edx [ebp+ecx+0] +
mov [esp+3Ch+var_3C] edx +
call memcpy  +
xor edx edx +
add [esp+3Ch+var_24] edi +
adc [esp+3Ch+var_20] edx +
mov ebx [ebx+1Ch] +
add esi edi +
test ebx ebx +
jz loc_489820  +
mov eax [esp+3Ch+var_1C] +
cmp eax [ebx+18h] +
jnz loc_489820  +
mov eax [ebx+10h] +
mov edi esi +
neg edi  +
sub eax 1 +
and edi eax +
jz loc_489760  +
test ebp ebp +
jz loc_4898A5  +
mov eax [esp+3Ch+var_24] +
mov edx [esp+3Ch+var_18] +
mov [esp+3Ch+var_34] edi +
add eax ebp +
mov [esp+3Ch+var_38] edx +
mov [esp+3Ch+var_3C] eax +
call memcpy  +
xor edx edx +
add [esp+3Ch+var_24] edi +
adc [esp+3Ch+var_20] edx +
add esi edi +
test ebp ebp +
mov eax [ebx+4] +
mov edi [ebx+0Ch] +
jnz loc_48976A  +
mov ecx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_34] ecx +
call sub_46FB80  +
cmp edi eax +
jz loc_48978C  +
mov eax [esp+3Ch+var_18] +
test eax eax +
jz loc_489810  +
mov [esp+3Ch+var_3C] eax +
call free  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx esi +
mov esi [esp+3Ch+var_24] +
mov eax [esp+3Ch+var_10] +
mov eax [eax+24h] +
sub eax ecx +
mov ebx eax +
jz loc_489857  +
mov eax [esp+3Ch+var_14] +
test eax eax +
jz loc_4898FF  +
add eax esi +
mov edi eax +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_34] ebx +
mov [esp+3Ch+var_3C] edi +
mov [esp+3Ch+var_38] eax +
call memcpy  +
mov eax [esp+3Ch+var_18] +
test eax eax +
jz loc_489867  +
mov [esp+3Ch+var_3C] eax +
call free  +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edx+30h] +
test byte ptr [ecx+17h] 8 +
mov [esp+3Ch+var_14] eax +
jz loc_489889  +
test eax eax +
jnz loc_489724  +
mov [esp+3Ch+var_34] offset a_bfd_write_mer +
mov [esp+3Ch+var_38] 338h +
mov [esp+3Ch+var_3C] offset a____Binutil_24 +
call sub_44BA70  +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call sub_46FB80  +
cmp edi eax +
jnz loc_489800  +
add esi edi +
jmp loc_4897DE  +
mov eax 1 +
shl eax cl +
mov [esp+3Ch+var_3C] eax +
call sub_459D10  +
test eax eax +
mov [esp+3Ch+var_18] eax +
jz loc_489810  +
mov eax [esp+3Ch+var_1C] +
cmp eax [ebx+18h] +
jz loc_48974D  +
xor ecx ecx +
jmp loc_489826  +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call sub_46FB80  +
cmp ebx eax +
jnz loc_489800  +
jmp loc_489857  +
***
push esi  +
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_489B3C  +
lea esi [esi+0] +
mov eax [ebx+8] +
mov [esp+18h+var_18] eax +
call sub_44DF50  +
mov eax [ebx+8] +
mov [esp+18h+var_18] eax +
call free  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_489B20  +
add esp 18h +
pop ebx  +
retn   +
***
mov edx [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test edx edx +
jz loc_489B90  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] edx +
mov [esp+18h+var_10] eax +
call sub_44E4A0  +
test eax eax +
jz loc_489B84  +
mov dword ptr [eax+0Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
mov [esp+18h+var_14] 10h +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_489B7F  +
jmp loc_489B60  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [esp+7Ch+arg_8] +
mov [esp+7Ch+var_14] 0 +
mov [esp+7Ch+var_10] 0 +
mov ecx [eax+24h] +
test ecx ecx +
jz loc_489E20  +
mov eax [esp+7Ch+arg_C] +
mov eax [eax+24h] +
test eax eax +
jz loc_489E20  +
mov eax ecx +
mov edx 0AAAAAAABh +
mul  edx +
shr edx 3 +
lea eax [edx+edx*2] +
shl eax 2 +
cmp ecx eax +
jnz loc_489E20  +
mov eax [esp+7Ch+arg_C] +
test byte ptr [eax+14h] 4 +
jnz loc_489E20  +
mov eax [esp+7Ch+arg_8] +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_489E20  +
mov eax [esp+7Ch+arg_C] +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jz loc_489E20  +
mov eax [esp+7Ch+arg_4] +
mov [esp+7Ch+var_5C] 0 +
mov ebp [eax+20h] +
test ebp ebp +
jz loc_48A060  +
mov eax ecx +
mov edx 0AAAAAAABh +
mul  edx +
mov [esp+7Ch+var_64] edx +
shr [esp+7Ch+var_64] 3 +
mov eax [esp+7Ch+var_64] +
lea ebx ds:0FFFFFFFCh[eax*4] +
lea eax [ebx+0Ch] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_7C] eax +
call sub_458A80  +
mov edi eax +
mov [esp+7Ch+var_48] eax +
mov eax [esp+7Ch+arg_10] +
test edi edi +
mov [eax] edi +
jz loc_489D0B  +
mov eax [esp+7Ch+arg_8] +
mov esi [esp+7Ch+arg_8] +
mov dword ptr [edi] 0 +
mov eax [eax+24h] +
mov [esi+28h] eax +
lea eax [ebx+4] +
lea ebx [edi+8] +
mov dword ptr [edi+4] 0 +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] ebx +
mov [esp+7Ch+var_3C] eax +
mov [esp+7Ch+var_38] ebx +
call memset  +
lea eax [esp+7Ch+var_14] +
mov [esp+7Ch+var_74] eax +
mov eax [esp+7Ch+arg_8] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_7C] eax +
call sub_44DE10  +
test eax eax +
jnz loc_489E30  +
mov eax [esp+7Ch+var_14] +
test eax eax +
jz loc_489D1B  +
mov [esp+7Ch+var_7C] eax +
call free  +
mov edx [esp+7Ch+var_10] +
xor eax eax +
test edx edx +
jz loc_489E25  +
mov [esp+7Ch+var_7C] edx +
mov [esp+7Ch+var_6C] eax +
call free  +
mov eax [esp+7Ch+var_6C] +
jmp loc_489E25  +
mov eax [esp+7Ch+var_14] +
mov [esp+7Ch+var_7C] eax +
call free  +
mov eax [esp+7Ch+var_10] +
mov [esp+7Ch+var_14] 0 +
mov [esp+7Ch+var_7C] eax +
call free  +
mov eax [esp+7Ch+var_64] +
sub eax [esp+7Ch+var_34] +
mov ebx [esp+7Ch+arg_8] +
mov [esp+7Ch+var_10] 0 +
lea eax [eax+eax*2] +
shl eax 2 +
test eax eax +
mov [ebx+24h] eax +
jnz loc_489D89  +
or dword ptr [ebx+14h] 208000h +
mov eax [esp+7Ch+arg_C] +
or dword ptr [eax+14h] 208000h +
mov eax [esp+7Ch+arg_4] +
mov ebx [eax+20h] +
mov eax [eax] +
mov [esp+7Ch+var_7C] eax +
call sub_44E770  +
mov esi [esp+7Ch+var_34] +
test esi esi +
mov [ebx+24h] eax +
jz loc_489E20  +
mov eax [esp+7Ch+var_3C] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_7C] eax +
call sub_458A80  +
mov ebx [esp+7Ch+var_48] +
test eax eax +
mov [ebx+4] eax +
jz loc_489D0B  +
mov ebx [esp+7Ch+var_64] +
xor ecx ecx +
xor edx edx +
test ebx ebx +
jz loc_489E08  +
mov esi [esp+7Ch+var_64] +
mov edi [esp+7Ch+var_38] +
mov [eax+edx*4] ecx +
lea ebx [ecx+0Ch] +
cmp dword ptr [edi+edx*4] 0FFFFFFFFh +
cmovz ecx ebx +
add edx 1 +
cmp edx esi +
jnz loc_489DF0  +
test ecx ecx +
jnz loc_489E20  +
mov [esp+7Ch+var_78] 1EAh +
mov [esp+7Ch+var_7C] offset a____Binutil_16 +
call sub_44BA40  +
lea esi [esi+0] +
mov eax 1 +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+7Ch+var_10] +
mov [esp+7Ch+var_74] eax +
mov eax [esp+7Ch+arg_C] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_7C] eax +
call sub_44DE10  +
test eax eax +
jz loc_489D0B  +
mov edi [esp+7Ch+arg_14] +
test edi edi +
jz loc_48A367  +
mov eax [esp+7Ch+arg_14] +
mov eax [eax] +
mov [esp+7Ch+var_58] eax +
mov esi [esp+7Ch+arg_8] +
mov eax [esp+7Ch+var_14] +
mov ebx [esi+24h] +
add ebx eax +
cmp eax ebx +
mov [esp+7Ch+var_6C] ebx +
jnb loc_48A3FF  +
lea ebp [eax+0Ch] +
mov eax [esp+7Ch+var_48] +
mov [esp+7Ch+var_34] 0 +
mov [esp+7Ch+var_54] 0 +
lea esi [eax+0Ch] +
mov eax [esp+7Ch+arg_4] +
mov ebx esi +
add eax 4 +
mov [esp+7Ch+var_28] eax +
jmp loc_489F21  +
mov eax [esp+7Ch+arg_0] +
lea edx [ebp-4] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+7Ch+var_7C] edx +
call eax  +
mov ecx [esp+7Ch+arg_14] +
add eax [esp+7Ch+var_58] +
test ecx ecx +
jz loc_489EED  +
mov edi [esp+7Ch+arg_14] +
mov [edi] eax +
mov edx [esp+7Ch+var_5C] +
test edx edx +
jnz loc_48A041  +
mov edi [esp+7Ch+var_58] +
add [esp+7Ch+var_34] 1 +
mov dword ptr [ebx-4] 0FFFFFFFFh +
mov [esp+7Ch+var_54] edi +
mov [esp+7Ch+var_58] eax +
cmp [esp+7Ch+var_6C] ebp +
jbe loc_489D3E  +
add ebp 0Ch +
add ebx 4 +
mov esi [ebx-4] +
lea eax [ebp-0Ch] +
mov [esp+7Ch+var_68] eax +
mov [esp+7Ch+var_60] ebx +
test esi esi +
jnz loc_489F11  +
movzx esi byte ptr [ebp-8] +
mov [esp+7Ch+var_4C] ebp +
test esi esi +
jz loc_489EC0  +
mov eax [esp+7Ch+arg_0] +
mov edi [esp+7Ch+var_68] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+7Ch+var_7C] edi +
call eax  +
mov edi [esp+7Ch+arg_C] +
add eax [esp+7Ch+var_54] +
cmp eax [edi+24h] +
jnb loc_48A327  +
add eax [esp+7Ch+var_10] +
mov edi eax +
mov [esp+7Ch+var_40] eax +
mov eax [esp+7Ch+arg_4] +
mov eax [eax] +
mov [esp+7Ch+var_70] 1 +
mov [esp+7Ch+var_74] 1 +
mov [esp+7Ch+var_78] edi +
mov [esp+7Ch+var_7C] eax +
call sub_44E640  +
cmp esi 82h +
mov [ebx-4] eax +
jnz loc_489F11  +
cmp ebp [esp+7Ch+var_6C] +
jnb loc_48A3E8  +
movzx eax byte ptr [ebp+4] +
test eax eax +
jz loc_48A3E8  +
xor ecx ecx +
xor edx edx +
mov esi ebp +
xor edi edi +
mov [esp+7Ch+var_24] ebx +
mov ebx edx +
mov [esp+7Ch+var_20] ebp +
mov ebp ecx +
mov [esp+7Ch+var_44] 0 +
mov [esp+7Ch+var_50] 0 +
mov [esp+7Ch+var_30] 0 +
jmp loc_48A020  +
cmp eax 82h +
jz loc_48A108  +
mov eax [esp+7Ch+var_44] +
test eax eax +
jz loc_48A112  +
add esi 0Ch +
cmp [esp+7Ch+var_6C] esi +
jbe loc_48A1DB  +
movzx eax byte ptr [esi+4] +
test eax eax +
jz loc_48A1DB  +
cmp eax 0C2h +
jz loc_48A007  +
cmp eax 0A2h +
jnz loc_489FF0  +
mov eax [esp+7Ch+var_44] +
test eax eax +
jz loc_48A1DB  +
sub [esp+7Ch+var_44] 1 +
jmp loc_48A007  +
mov edi [esp+7Ch+var_58] +
mov [esp+7Ch+var_5C] 0 +
mov [esp+7Ch+var_58] eax +
mov [esp+7Ch+var_54] edi +
jmp loc_489F3F  +
call sub_44E580  +
mov ebx [esp+7Ch+arg_4] +
test eax eax +
mov [ebx] eax +
jz loc_489D0B  +
mov [esp+7Ch+var_70] 1 +
mov [esp+7Ch+var_74] 1 +
mov [esp+7Ch+var_78] offset unk_504DDC +
mov [esp+7Ch+var_7C] eax +
call sub_44E640  +
mov eax [esp+7Ch+arg_4] +
mov [esp+7Ch+var_74] 10h +
mov [esp+7Ch+var_78] offset sub_489B50 +
add eax 4 +
mov [esp+7Ch+var_7C] eax +
call sub_44DF20  +
test eax eax +
jz loc_489D0B  +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_74] 102108h +
mov [esp+7Ch+var_78] offset a_stabstr_1 +
mov [esp+7Ch+var_7C] eax +
call sub_44D890  +
mov ebx [esp+7Ch+arg_4] +
test eax eax +
mov [ebx+20h] eax +
jz loc_489D0B  +
mov eax [esp+7Ch+arg_8] +
mov [esp+7Ch+var_5C] 1 +
mov ecx [eax+24h] +
jmp loc_489C58  +
add [esp+7Ch+var_44] 1 +
jmp loc_48A007  +
mov eax [esp+7Ch+var_10] +
mov edx [esp+7Ch+arg_0] +
mov [esp+7Ch+var_2C] eax +
mov eax [edx+4] +
mov eax [eax+28h] +
mov [esp+7Ch+var_7C] esi +
call eax  +
mov edx [esp+7Ch+var_54] +
add edx eax +
add edx [esp+7Ch+var_2C] +
cmp byte ptr [edx] 0 +
jz loc_48A007  +
mov eax edi +
mov edi [esp+7Ch+var_30] +
mov [esp+7Ch+var_2C] esi +
mov esi edx +
jmp loc_48A174  +
movzx ecx byte ptr [esi] +
lea edx [eax+1] +
add ebx 1 +
mov [eax] cl +
movzx eax byte ptr [esi] +
movsx ecx al +
add edi ecx +
cmp al 28h +
jz loc_48A1A0  +
movzx ecx byte ptr [esi+1] +
add esi 1 +
test cl cl +
jz loc_48A1CC  +
mov eax edx +
cmp ebp ebx +
ja loc_48A150  +
mov eax [esp+7Ch+var_50] +
add ebp 8000h +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] eax +
call sub_459CD0  +
test eax eax +
mov [esp+7Ch+var_50] eax +
jz loc_489D0B  +
add eax ebx +
jmp loc_48A150  +
movzx ecx byte ptr [esi+1] +
lea eax [esi+1] +
movzx esi cl +
test byte ptr ds:word_509C60[esi+esi] 4 +
jz loc_48A1C7  +
add eax 1 +
movzx ecx byte ptr [eax] +
movzx esi cl +
test byte ptr ds:word_509C60[esi+esi] 4 +
jnz loc_48A1B4  +
lea esi [eax-1] +
jmp loc_48A16B  +
mov [esp+7Ch+var_30] edi +
mov esi [esp+7Ch+var_2C] +
mov edi edx +
jmp loc_48A007  +
mov eax edi +
mov edx ebx +
mov ebp [esp+7Ch+var_20] +
sub eax [esp+7Ch+var_50] +
mov ebx [esp+7Ch+var_24] +
cmp eax edx +
jz loc_48A20B  +
mov [esp+7Ch+var_78] 167h +
mov [esp+7Ch+var_7C] offset a____Binutil_16 +
mov [esp+7Ch+var_44] edx +
call sub_44BA40  +
mov edx [esp+7Ch+var_44] +
mov eax [esp+7Ch+var_40] +
mov [esp+7Ch+var_70] 1 +
mov [esp+7Ch+var_74] 1 +
mov [esp+7Ch+var_44] edx +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+var_28] +
mov [esp+7Ch+var_7C] eax +
call sub_44E180  +
test eax eax +
mov edi eax +
jz loc_489D0B  +
mov esi [eax+0Ch] +
mov edx [esp+7Ch+var_44] +
test esi esi +
jz loc_48A28D  +
mov [esp+7Ch+var_44] ebx +
mov edi edx +
mov ebx [esp+7Ch+var_30] +
mov [esp+7Ch+var_40] eax +
jmp loc_48A25E  +
mov esi [esi] +
test esi esi +
jz loc_48A283  +
cmp [esi+4] ebx +
jnz loc_48A258  +
cmp [esi+8] edi +
jnz loc_48A258  +
mov eax [esp+7Ch+var_50] +
mov [esp+7Ch+var_74] edi +
mov [esp+7Ch+var_78] eax +
mov eax [esi+0Ch] +
mov [esp+7Ch+var_7C] eax +
call memcmp  +
test eax eax +
jnz loc_48A258  +
mov edx edi +
mov ebx [esp+7Ch+var_44] +
mov edi [esp+7Ch+var_40] +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_78] 10h +
mov [esp+7Ch+var_44] edx +
mov [esp+7Ch+var_7C] eax +
call sub_458A80  +
test eax eax +
jz loc_489D0B  +
mov edx [esp+7Ch+var_30] +
mov ecx [esp+7Ch+var_68] +
sub ecx [esp+7Ch+var_14] +
test esi esi +
mov dword ptr [eax+0Ch] 82h +
mov [eax+8] edx +
mov edx [esp+7Ch+var_48] +
mov [eax+4] ecx +
mov ecx [edx] +
mov [eax] ecx +
mov [edx] eax +
jnz loc_48A374  +
mov eax [esp+7Ch+var_28] +
mov [esp+7Ch+var_78] 10h +
mov [esp+7Ch+var_7C] eax +
call sub_44E3F0  +
test eax eax +
mov esi eax +
jz loc_489D0B  +
mov edx [esp+7Ch+var_30] +
mov [eax+4] edx +
mov edx [esp+7Ch+var_44] +
mov [eax+8] edx +
mov eax [esp+7Ch+var_50] +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_7C] eax +
call sub_459CD0  +
mov [esi+0Ch] eax +
mov eax [edi+0Ch] +
mov [esi] eax +
mov [edi+0Ch] esi +
jmp loc_489F11  +
mov eax [esp+7Ch+var_68] +
sub eax [esp+7Ch+var_14] +
mov [esp+7Ch+var_7C] offset aBA0xLxStabsEnt +
mov [esp+7Ch+var_70] eax +
mov eax [esp+7Ch+arg_8] +
mov [esp+7Ch+var_74] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_78] eax +
call off_4BFA04  +
mov [esp+7Ch+var_7C] 11h +
call sub_44BAF0  +
jmp loc_489D0B  +
mov [esp+7Ch+var_58] 0 +
jmp loc_489E76  +
mov dword ptr [eax+0Ch] 0C2h +
mov eax [esp+7Ch+var_50] +
mov [esp+7Ch+var_7C] eax +
call free  +
cmp ebp [esp+7Ch+var_6C] +
jnb loc_489D3E  +
xor edx edx +
mov edi [esp+7Ch+var_6C] +
mov eax [esp+7Ch+var_4C] +
mov esi [esp+7Ch+var_60] +
jmp loc_48A3CE  +
cmp ecx 82h +
jz loc_48A3E3  +
cmp ecx 0C2h +
jz loc_48A3C0  +
test edx edx +
jnz loc_48A3C0  +
add [esp+7Ch+var_34] 1 +
mov dword ptr [esi] 0FFFFFFFFh +
add eax 0Ch +
add esi 4 +
cmp edi eax +
jbe loc_489F1B  +
movzx ecx byte ptr [eax+4] +
cmp ecx 0A2h +
jnz loc_48A3A1  +
test edx edx +
jz loc_48A40C  +
sub edx 1 +
jmp loc_48A3C0  +
add edx 1 +
jmp loc_48A3C0  +
mov [esp+7Ch+var_50] 0 +
xor edx edx +
mov [esp+7Ch+var_30] 0 +
jmp loc_48A20B  +
mov [esp+7Ch+var_34] 0 +
jmp loc_489D42  +
mov dword ptr [esi] 0FFFFFFFFh +
add [esp+7Ch+var_34] 1 +
jmp loc_489F1B  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+3Ch+arg_4] +
mov [esp+3Ch+var_10] 0 +
mov ecx [edi+24h] +
test ecx ecx +
jz loc_48A5C0  +
mov eax ecx +
mov esi 0AAAAAAABh +
mul  esi +
mov esi edx +
shr esi 3 +
lea eax [esi+esi*2] +
shl eax 2 +
sub ecx eax +
mov esi ecx +
jnz loc_48A5C0  +
mov eax [edi+3Ch] +
test eax eax +
jz loc_48A46E  +
cmp eax offset off_4BFB90 +
jz loc_48A5C0  +
mov eax [esp+3Ch+arg_8] +
test eax eax +
jz loc_48A5C0  +
mov eax [edi+28h] +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_28] eax +
lea eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] eax +
call sub_44DE10  +
test eax eax +
jz loc_48A5B0  +
mov ebx [esp+3Ch+var_10] +
mov edx [edi+28h] +
mov eax [esp+3Ch+arg_8] +
add edx ebx +
add eax 8 +
cmp ebx edx +
mov [esp+3Ch+var_20] eax +
jnb loc_48A69E  +
xor ecx ecx +
mov esi eax +
mov [esp+3Ch+arg_4] edi +
mov ebp 0FFFFFFFFh +
mov edi ecx +
jmp loc_48A4E5  +
cmp ebp 0FFFFFFFFh +
jz loc_48A5D0  +
xor ebp ebp +
add ebx 0Ch +
add esi 4 +
cmp edx ebx +
jbe loc_48A514  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_48A4DB  +
movzx eax byte ptr [ebx+4] +
cmp eax 24h +
jz loc_48A612  +
cmp ebp 1 +
jnz loc_48A4D0  +
add ebx 0Ch +
add edi 1 +
mov dword ptr [esi] 0FFFFFFFFh +
add esi 4 +
cmp edx ebx +
mov ebp 1 +
ja loc_48A4E5  +
mov ecx edi +
mov ebx [esp+3Ch+var_10] +
mov edi [esp+3Ch+arg_4] +
lea esi [ecx+ecx*2] +
shl esi 2 +
mov [esp+3Ch+var_3C] ebx +
mov [esp+3Ch+var_24] ecx +
call free  +
mov ecx [esp+3Ch+var_24] +
sub [edi+24h] esi +
mov [esp+3Ch+var_10] 0 +
jnz loc_48A548  +
or dword ptr [edi+14h] 208000h +
test ecx ecx +
jz loc_48A59D  +
mov eax [esp+3Ch+var_28] +
mov edx 0AAAAAAABh +
mul  edx +
mov eax [esp+3Ch+arg_8] +
mov edi [eax+4] +
shr edx 3 +
test edi edi +
jz loc_48A6A5  +
xor ebx ebx +
xor eax eax +
mov ebp [esp+3Ch+var_20] +
test edx edx +
jz loc_48A650  +
lea esi [esi+0] +
mov [edi+eax*4] ebx +
lea esi [ebx+0Ch] +
cmp dword ptr [ebp+eax*4+0] 0FFFFFFFFh +
cmovz ebx esi +
add eax 1 +
cmp eax edx +
jnz loc_48A580  +
test ebx ebx +
jz loc_48A650  +
xor eax eax +
test ecx ecx +
setnz al  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+var_10] +
test eax eax +
jz loc_48A5C0  +
mov [esp+3Ch+var_3C] eax +
call free  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 28h +
jz loc_48A5DE  +
cmp eax 26h +
jnz loc_48A4DB  +
mov eax [esp+3Ch+arg_10] +
mov [esp+3Ch+var_24] edx +
mov [esp+3Ch+var_38] eax +
lea eax [ebx+8] +
sub eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] eax +
call [esp+3Ch+arg_C]  +
mov edx [esp+3Ch+var_24] +
test eax eax +
jz loc_48A4DB  +
mov dword ptr [esi] 0FFFFFFFFh +
add edi 1 +
jmp loc_48A4DB  +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_24] edx +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov edx [esp+3Ch+var_24] +
test eax eax +
jnz loc_48A671  +
test ebp ebp +
jz loc_48A644  +
add edi 1 +
mov ebp 0FFFFFFFFh +
mov dword ptr [esi] 0FFFFFFFFh +
jmp loc_48A4DB  +
mov ebp 0FFFFFFFFh +
jmp loc_48A4DB  +
mov [esp+3Ch+var_38] 284h +
mov [esp+3Ch+var_3C] offset a____Binutil_16 +
mov [esp+3Ch+var_28] ecx +
call sub_44BA40  +
mov ecx [esp+3Ch+var_28] +
jmp loc_48A59D  +
mov eax [esp+3Ch+arg_10] +
xor ebp ebp +
mov [esp+3Ch+var_24] edx +
mov [esp+3Ch+var_38] eax +
lea eax [ebx+8] +
sub eax [esp+3Ch+var_10] +
mov [esp+3Ch+var_3C] eax +
call [esp+3Ch+arg_C]  +
mov edx [esp+3Ch+var_24] +
test eax eax +
jz loc_48A4DB  +
jmp loc_48A4FC  +
xor ecx ecx +
jmp loc_48A524  +
lea eax ds:0[edx*4] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_28] edx +
mov [esp+3Ch+var_24] ecx +
mov [esp+3Ch+var_3C] eax +
call sub_458A80  +
mov edx [esp+3Ch+arg_8] +
test eax eax +
mov [edx+4] eax +
jz loc_48A5B0  +
mov edi eax +
mov ecx [esp+3Ch+var_24] +
mov edx [esp+3Ch+var_28] +
jmp loc_48A569  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_C] +
mov ebp [esp+2Ch+arg_0] +
mov edi [eax] +
test edi edi +
jz loc_48A8AA  +
mov ebx [edi] +
test ebx ebx +
jz loc_48A76C  +
mov [esp+2Ch+var_14] edi +
mov esi [esp+2Ch+arg_8] +
jmp loc_48A747  +
add eax [esp+2Ch+arg_10] +
mov edx [ebp+4] +
mov edi eax +
mov eax [ebx+8] +
lea ecx [edi+8] +
mov edx [edx+30h] +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] eax +
call edx  +
mov edx [ebx+0Ch] +
mov [edi+4] dl +
mov ebx [ebx] +
test ebx ebx +
jz loc_48A768  +
mov eax [ebx+4] +
cmp eax [esi+28h] +
jb loc_48A720  +
mov [esp+2Ch+var_28] 2AAh +
mov [esp+2Ch+var_2C] offset a____Binutil_16 +
call sub_44BA40  +
mov eax [ebx+4] +
jmp loc_48A720  +
mov edi [esp+2Ch+var_14] +
mov ecx [esp+2Ch+arg_8] +
add edi 8 +
mov esi [esp+2Ch+arg_10] +
mov eax [esp+2Ch+arg_10] +
add eax [ecx+28h] +
mov ebx esi +
cmp esi eax +
mov [esp+2Ch+var_14] eax +
jnb loc_48A8A6  +
lea esi [esi+0] +
mov eax [edi] +
cmp eax 0FFFFFFFFh +
jz loc_48A834  +
cmp esi ebx +
jz loc_48A7B1  +
mov eax [ebx] +
mov [esi] eax +
mov eax [ebx+4] +
mov [esi+4] eax +
mov eax [ebx+8] +
mov [esi+8] eax +
mov eax [edi] +
mov edx [ebp+4] +
mov edx [edx+30h] +
mov [esp+2Ch+var_28] esi +
mov [esp+2Ch+var_2C] eax +
call edx  +
cmp byte ptr [ebx+4] 0 +
jnz loc_48A831  +
cmp ebx [esp+2Ch+arg_10] +
jz loc_48A7E0  +
mov [esp+2Ch+var_28] 2C4h +
mov [esp+2Ch+var_2C] offset a____Binutil_16 +
call sub_44BA40  +
mov eax [ebp+4] +
mov edx [eax+30h] +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_10] edx +
mov eax [eax] +
mov [esp+2Ch+var_2C] eax +
call sub_44E770  +
lea ecx [esi+8] +
mov edx [esp+2Ch+var_10] +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] eax +
call edx  +
mov eax [ebp+4] +
mov ecx [eax+3Ch] +
lea eax [esi+6] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+3Ch] +
mov edx [eax+24h] +
mov eax 0AAAAAAABh +
mul  edx +
shr edx 3 +
sub edx 1 +
mov [esp+2Ch+var_2C] edx +
call ecx  +
add esi 0Ch +
add ebx 0Ch +
add edi 4 +
cmp [esp+2Ch+var_14] ebx +
ja loc_48A790  +
sub esi [esp+2Ch+arg_10] +
mov eax [esp+2Ch+arg_8] +
cmp [eax+24h] esi +
jz loc_48A86C  +
mov [esp+2Ch+var_28] 2D0h +
mov [esp+2Ch+var_2C] offset a____Binutil_16 +
call sub_44BA40  +
mov eax [esp+2Ch+arg_8] +
mov esi [eax+24h] +
mov eax [esp+2Ch+arg_8] +
mov eax [eax+3Ch] +
mov [esp+2Ch+var_18] esi +
mov ecx [esp+2Ch+arg_8] +
mov ecx [ecx+38h] +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_20] ecx +
mov ecx [esp+2Ch+arg_10] +
mov [esp+2Ch+var_24] ecx +
call sub_44DBC0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor esi esi +
jmp loc_48A848  +
mov eax [esp+2Ch+arg_8] +
mov edx [eax+24h] +
mov eax [eax+3Ch] +
mov [esp+2Ch+var_18] edx +
jmp loc_48A877  +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_4] +
mov esi [esp+10h+arg_0] +
mov edx [ebx+20h] +
cmp dword ptr [edx+3Ch] offset off_4BFB90 +
jz loc_48A922  +
mov eax [ebx] +
mov edi [edx+38h] +
mov [esp+10h+var_10] eax +
call sub_44E770  +
mov edx [ebx+20h] +
mov ecx [edx+3Ch] +
add edi eax +
cmp edi [ecx+24h] +
ja loc_48A963  +
mov [esp+10h+var_4] 0 +
mov eax [edx+38h] +
xor edx edx +
add eax [ecx+50h] +
adc edx [ecx+54h] +
mov [esp+10h+var_10] esi +
mov [esp+10h+var_C] eax +
mov [esp+10h+var_8] edx +
call sub_46FCE0  +
test eax eax +
jz loc_48A930  +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [ebx] +
mov [esp+10h+var_10] esi +
mov [esp+10h+var_C] eax +
call sub_44E780  +
test eax eax +
jz loc_48A920  +
mov eax [ebx] +
add ebx 4 +
mov [esp+10h+var_10] eax +
call sub_44E610  +
mov [esp+10h+var_10] ebx +
call sub_44DF50  +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_C] 2E2h +
mov [esp+10h+var_10] offset a____Binutil_16 +
call sub_44BA40  +
mov edx [ebx+20h] +
mov ecx [edx+3Ch] +
jmp loc_48A8F9  +
***
push esi  +
push ebx  +
mov ebx [esp+arg_4] +
mov edx [esp+arg_0] +
mov ecx [esp+arg_8] +
test ebx ebx +
jz loc_48A9E0  +
mov eax [edx+28h] +
cmp ecx eax +
jnb loc_48A9D0  +
mov esi [ebx+4] +
test esi esi +
jz loc_48A9E0  +
mov eax ecx +
mov edx 0AAAAAAABh +
mul  edx +
mov eax 0FFFFFFFFh +
shr edx 3 +
cmp dword ptr [ebx+edx*4+8] 0FFFFFFFFh +
jz loc_48A9CD  +
mov eax ecx +
sub eax [esi+edx*4] +
pop ebx  +
pop esi  +
retn   +
sub ecx eax +
mov eax [edx+24h] +
pop ebx  +
pop esi  +
add eax ecx +
retn   +
***
mov eax ecx +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 4 +
mov edi [eax] +
mov [esp+4+var_4] ecx +
mov ebx edi +
jmp loc_48AA0E  +
lea esi [ebx+1] +
mov [eax] esi +
movzx ecx byte ptr [ebx] +
test cl cl +
jns loc_48AA20  +
mov ebx esi +
cmp edx ebx +
ja loc_48AA00  +
add esp 4 +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4+var_4] +
movzx ebp cl +
cmp edi ebx +
mov [eax] ebp +
jb loc_48AA32  +
jmp loc_48AA49  +
mov ebp eax +
sub ebx 1 +
movzx eax byte ptr [ebx] +
mov edx [esp+4+var_4] +
shl ebp 7 +
and eax 7Fh +
or eax ebp +
cmp ebx edi +
mov [edx] eax +
jnz loc_48AA30  +
add esp 4 +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+4] +
mov eax [eax+4] +
retn   +
***
mov ecx eax +
xor eax eax +
test bl 2 +
jnz loc_48AAA6  +
mov eax [ecx+0Ch] +
cmp eax 4 +
jz loc_48AAA6  +
test bl 1 +
jz loc_48AAA8  +
shr bl 2 +
and ebx 1 +
test byte ptr [ecx+5] 10h +
jz loc_48AA9A  +
add ebx 1 +
lea ecx [ebx+edx-1] +
add eax ebx +
add eax ecx +
neg edx  +
and eax edx +
pop ebx  +
retn   +
shr bl 2 +
and ebx 1 +
lea ecx [ebx+edx-1] +
neg edx  +
add eax ecx +
and eax edx +
pop ebx  +
retn   +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 14h +
mov eax [eax] +
cmp edx eax +
jbe loc_48AB10  +
lea edi [eax+1] +
mov [ebx] edi +
movzx ebp byte ptr [eax] +
mov edx ebp +
and edx 0FFFFFFC0h +
mov [esp+18h+var_15] dl +
movzx edx dl +
cmp [esp+18h+var_15] 0 +
cmovz edx ebp +
cmp edx 0C0h +
ja loc_48AB10  +
jmp ds:off_504E40[edx*4]  +
mov eax esi +
sub eax edi +
cmp ecx eax +
jbe loc_48AC38  +
mov [ebx] esi +
nop   +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx esi +
sub edx edi +
cmp edx 7 +
jbe loc_48AB0C  +
add eax 9 +
mov [ebx] eax +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ecx [esp+18h+var_8] +
mov edx esi +
mov eax ebx +
call sub_48A9F0  +
test eax eax +
jz loc_48AB10  +
mov edx [ebx] +
mov ecx esi +
mov eax [esp+18h+var_8] +
sub ecx edx +
cmp eax ecx +
ja loc_48AB0C  +
add eax edx +
mov [ebx] eax +
mov eax 1 +
jmp loc_48AB12  +
add eax 2 +
add esi 1 +
jmp loc_48AB85  +
mov edx eax +
mov [ebx] eax +
add eax 1 +
cmp byte ptr [edx-1] 0 +
jns loc_48AB2E  +
cmp eax esi +
jnz loc_48AB78  +
jmp loc_48AB10  +
add eax 2 +
lea ecx [esi+1] +
jmp loc_48ABA5  +
mov edx eax +
mov [ebx] eax +
add eax 1 +
cmp byte ptr [edx-1] 0 +
jns loc_48AB40  +
cmp eax ecx +
jnz loc_48AB98  +
jmp loc_48AB10  +
cmp esi edi +
jz loc_48AB0C  +
add eax 2 +
mov [ebx] eax +
mov eax 1 +
jmp loc_48AB12  +
mov edx esi +
sub edx edi +
cmp edx 1 +
jbe loc_48AB0C  +
add eax 3 +
mov [ebx] eax +
mov eax 1 +
jmp loc_48AB12  +
mov edx esi +
sub edx edi +
cmp edx 3 +
jbe loc_48AB0C  +
add eax 5 +
mov [ebx] eax +
mov eax 1 +
jmp loc_48AB12  +
add eax 2 +
lea ecx [esi+1] +
jmp loc_48AC15  +
mov edx eax +
mov [ebx] eax +
add eax 1 +
cmp byte ptr [edx-1] 0 +
jns loc_48AC2F  +
cmp eax ecx +
jnz loc_48AC08  +
jmp loc_48AB10  +
add edx 1 +
mov [ebx] edx +
cmp byte ptr [edx-1] 0 +
jns loc_48AB2E  +
cmp esi edx +
ja loc_48AC20  +
jmp loc_48AB10  +
add ecx edi +
mov eax 1 +
mov [ebx] ecx +
jmp loc_48AB12  +
***
mov eax [eax] +
mov eax [eax+8Ch] +
mov eax [eax+88h] +
mov edx [eax+3Ch] +
mov ecx [eax+38h] +
mov eax [esp+arg_4] +
add ecx [edx+1Ch] +
mov eax [eax] +
mov eax [eax+8Ch] +
mov eax [eax+88h] +
mov ebx [eax+3Ch] +
mov edx [eax+38h] +
mov eax 0FFFFFFFFh +
add edx [ebx+1Ch] +
xor ebx ebx +
cmp ecx edx +
setnbe bl  +
cmovnb eax ebx +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
push esi  +
mov esi eax +
push ebx  +
sub esp 1Ch +
mov eax [ecx+8] +
mov ebx [esp+28h+arg_4] +
lea edx [eax+eax*2] +
mov eax [ebx] +
lea eax [eax+edx*4] +
cmp eax [ebx+8] +
mov [ebx+4] eax +
jnb loc_48AD10  +
mov edx [ecx+0Ch] +
add edx [ecx+10h] +
cmp [eax] edx +
jb loc_48ACE9  +
jmp loc_48AD10  +
mov edx [ebx+4] +
lea eax [edx+0Ch] +
cmp [ebx+8] eax +
mov [ebx+4] eax +
jbe loc_48AD10  +
mov eax [ebp+0Ch] +
add eax [ebp+10h] +
cmp [edx+0Ch] eax +
jnb loc_48AD10  +
mov eax [esp+28h+arg_0] +
mov [esp+28h+var_1C] ebx +
mov [esp+28h+var_24] edi +
mov [esp+28h+var_28] esi +
mov [esp+28h+var_20] eax +
call sub_46E020  +
test eax eax +
jnz loc_48ACD0  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor edi edi +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+24h+arg_4] +
mov ebx [esp+24h+arg_0] +
mov eax [ebp+4] +
cmp [ebx+4] eax +
jz loc_48AD43  +
add esp 1Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+0] +
cmp [ebx] eax +
jnz loc_48AD39  +
movzx eax word ptr [ebp+8] +
cmp [ebx+8] ax +
jnz loc_48AD39  +
lea eax [ebp+0Ah] +
lea esi [ebx+0Ah] +
mov [esp+24h+var_20] eax +
mov [esp+24h+var_24] esi +
call strcmp  +
test eax eax +
jnz loc_48AD39  +
mov edi offset unk_505144 +
mov ecx 3 +
cmps   +
setnbe dl  +
setb al  +
sub edx eax +
movsx edi dl +
test edi edi +
jz loc_48AD39  +
mov eax [ebp+20h] +
xor edi edi +
cmp [ebx+20h] eax +
jnz loc_48AD39  +
mov eax [ebp+24h] +
cmp [ebx+24h] eax +
jnz loc_48AD39  +
mov eax [ebp+28h] +
cmp [ebx+28h] eax +
jnz loc_48AD39  +
mov eax [ebp+2Ch] +
cmp [ebx+2Ch] eax +
jnz loc_48AD39  +
lea eax [ebp+30h] +
mov [esp+24h+var_20] eax +
lea eax [ebx+30h] +
mov [esp+24h+var_1C] 8 +
mov [esp+24h+var_24] eax +
call memcmp  +
test eax eax +
mov edi eax +
jnz loc_48AE1A  +
mov eax [ebx+38h] +
mov edx [eax] +
mov eax [ebp+38h] +
mov eax [eax] +
mov eax [eax+3Ch] +
cmp [edx+3Ch] eax +
jnz loc_48AD39  +
mov eax [ebp+3Ch] +
cmp [ebx+3Ch] eax +
jnz loc_48AD39  +
movzx eax byte ptr [ebx+3Fh] +
cmp al 32h +
ja loc_48AD39  +
add ebp 41h +
add ebx 41h +
mov [esp+24h+var_1C] eax +
mov [esp+24h+var_20] ebp +
mov [esp+24h+var_24] ebx +
call memcmp  +
test eax eax +
setz al  +
movzx eax al +
mov edi eax +
jmp loc_48AD39  +
xor edi edi +
jmp loc_48AD39  +
***
jmp sub_48AE30  +
***
mov eax 1 +
mov ecx [esp+arg_0] +
mov ebx [edx] +
cmp [ecx] ebx +
ja loc_48AE57  +
jb loc_48AE60  +
mov ebx [edx+4] +
cmp [ecx+4] ebx +
mov edx [edx+4] +
sbb ebx ebx +
cmp [ecx+4] edx +
cmovbe eax ebx +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
cmp ecx 4 +
mov ebx [esp+18h+arg_0] +
jz loc_48AEC8  +
cmp ecx 8 +
jz loc_48AEB5  +
cmp ecx 2 +
jz loc_48AEA2  +
mov [esp+18h+var_14] 0C1h +
mov [esp+18h+var_18] offset a____Binutil_17 +
call sub_44BA40  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
test ebx ebx +
mov eax [eax] +
jz loc_48AF00  +
mov eax [eax+38h] +
mov [esp+18h+arg_0] edx +
add esp 18h +
pop ebx  +
jmp eax  +
test ebx ebx +
mov eax [eax] +
jz loc_48AEF0  +
mov eax [eax+20h] +
mov [esp+18h+var_18] edx +
call eax  +
add esp 18h +
pop ebx  +
retn   +
test ebx ebx +
mov eax [eax] +
jz loc_48AEE0  +
mov eax [eax+2Ch] +
mov [esp+18h+arg_0] edx +
add esp 18h +
pop ebx  +
jmp eax  +
mov eax [eax+28h] +
mov [esp+18h+arg_0] edx +
add esp 18h +
pop ebx  +
jmp eax  +
mov eax [eax+1Ch] +
mov [esp+18h+var_18] edx +
call eax  +
add esp 18h +
pop ebx  +
retn   +
mov eax [eax+34h] +
mov [esp+18h+arg_0] edx +
add esp 18h +
pop ebx  +
jmp eax  +
***
mov ebx [esp+18h+arg_0] +
cmp ebx 4 +
jz loc_48AF70  +
cmp ebx 8 +
jz loc_48AF53  +
cmp ebx 2 +
jz loc_48AF40  +
mov [esp+18h+var_14] 0D2h +
mov [esp+18h+var_18] offset a____Binutil_17 +
call sub_44BA40  +
add esp 18h +
pop ebx  +
retn   +
mov eax [eax] +
mov eax [eax+3Ch] +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] ecx +
call eax  +
add esp 18h +
pop ebx  +
retn   +
mov eax [eax] +
mov eax [eax+24h] +
mov [esp+18h+var_10] edx +
mov [esp+18h+var_18] ecx +
mov [esp+18h+var_14] 0 +
call eax  +
add esp 18h +
pop ebx  +
retn   +
mov eax [eax] +
mov eax [eax+30h] +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] ecx +
call eax  +
add esp 18h +
pop ebx  +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov eax [esp+14h+arg_0] +
mov edx [esp+14h+arg_8] +
mov ecx [ebx+24h] +
mov esi [eax+1Ch] +
mov eax 1 +
test ecx ecx +
jz loc_48AFDD  +
test word ptr [ebx+18h] 380h +
jnz loc_48AFDD  +
mov ecx [ebx+3Ch] +
test ecx ecx +
jz loc_48AFC7  +
cmp ecx offset off_4BFB90 +
jz loc_48AFDD  +
mov eax [edx+4] +
cmp eax [edx+8] +
jz loc_48AFDB  +
mov ecx [edx+20h] +
mov eax [eax+4] +
shr eax cl +
test eax eax +
jnz loc_48AFE3  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] edx +
call sub_460530  +
test eax eax +
jz loc_48AFDB  +
mov edx [eax+8Ch] +
mov [edx+84h] ebx +
mov edx [eax+3Ch] +
test edx edx +
jz loc_48B01A  +
cmp edx offset off_4BFB90 +
jz loc_48B0C0  +
movzx edx word ptr [ebx+18h] +
and dx 0FC7Fh +
or dh 3 +
mov [ebx+18h] dx +
mov edx [ebx+8Ch] +
mov [edx+88h] eax +
mov edx [esi+0A8h] +
cmp edx [esi+0B0h] +
jz loc_48B061  +
mov eax [esi+0B4h] +
lea ecx [edx+1] +
mov [esi+0A8h] ecx +
mov [eax+edx*4] ebx +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
test edx edx +
jnz loc_48B097  +
mov dword ptr [esi+0ACh] 1 +
mov dword ptr [esi+0B0h] 2 +
mov [esp+14h+var_14] 8 +
call sub_459B80  +
mov [esi+0B4h] eax +
test eax eax +
jz loc_48B0CC  +
mov edx [esi+0A8h] +
jmp loc_48B04A  +
lea eax [edx+edx] +
mov [esi+0B0h] eax +
mov eax [esi+0B4h] +
shl edx 3 +
mov [esp+14h+var_10] edx +
mov [esp+14h+var_14] eax +
call sub_459C10  +
mov [esi+0B4h] eax +
jmp loc_48B08B  +
or dword ptr [ebx+14h] 8000h +
jmp loc_48B01A  +
mov [esp+14h+var_10] 1F6h +
mov [esp+14h+var_14] offset a____Binutil_17 +
call sub_44BA40  +
mov eax [esi+0B4h] +
jmp loc_48B08F  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [esp+7Ch+arg_4] +
mov ebp [esp+7Ch+arg_8] +
mov edi [esp+7Ch+arg_0] +
mov [esp+7Ch+var_20] 0 +
mov eax [eax+1Ch] +
mov [esp+7Ch+var_64] eax +
mov eax [ebp+24h] +
test eax eax +
jz loc_48B12A  +
test word ptr [ebp+18h] 380h +
jz loc_48B132  +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dword ptr [ebp+3Ch] offset off_4BFB90 +
jz loc_48B12A  +
lea eax [esp+7Ch+var_20] +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] edi +
call sub_44DE10  +
test eax eax +
jz loc_48B260  +
cmp dword ptr [ebp+24h] 3 +
jbe loc_48B174  +
mov eax [edi+4] +
mov edx [esp+7Ch+var_20] +
mov eax [eax+28h] +
mov [esp+7Ch+var_7C] edx +
call eax  +
test eax eax +
jz loc_48B2B6  +
mov eax [edi+4] +
mov eax [eax+1B0h] +
mov eax [eax+11Ch] +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] edi +
call eax  +
test eax eax +
mov [esp+7Ch+var_58] eax +
jz loc_48B260  +
mov eax [esp+7Ch+var_20] +
mov ebx [ebp+24h] +
mov [esp+7Ch+var_1C] eax +
add ebx eax +
cmp eax ebx +
jz loc_48BFC1  +
mov edx ebx +
sub edx eax +
cmp edx 3 +
mov [esp+7Ch+var_5C] 1 +
mov [esp+7Ch+var_60] 0 +
jbe loc_48B25C  +
mov [esp+7Ch+arg_8] ebp +
mov esi eax +
mov ebp [esp+7Ch+var_5C] +
jmp loc_48B223  +
lea ecx [eax+4] +
mov [esp+7Ch+var_1C] ecx +
mov ecx [edi+4] +
mov ecx [ecx+28h] +
mov [esp+7Ch+var_7C] eax +
call ecx  +
mov ecx ebx +
cmp eax 1 +
mov eax [esp+7Ch+var_1C] +
adc [esp+7Ch+var_60] 0 +
sub esi 4 +
sub ecx eax +
cmp esi ecx +
ja loc_48B255  +
add esi eax +
cmp ebx esi +
mov [esp+7Ch+var_1C] esi +
jz loc_48B2E0  +
mov eax ebx +
add ebp 1 +
sub eax esi +
cmp eax 3 +
jbe loc_48B255  +
lea eax [esi+4] +
mov [esp+7Ch+var_1C] eax +
mov eax [edi+4] +
mov eax [eax+28h] +
mov [esp+7Ch+var_7C] esi +
call eax  +
cmp eax 0FFFFFFFFh +
mov esi eax +
jz loc_48B5D9  +
test eax eax +
jz loc_48B2E0  +
mov eax [esp+7Ch+var_1C] +
mov ecx ebx +
sub ecx eax +
cmp ecx 3 +
ja loc_48B1E0  +
mov ebp [esp+7Ch+arg_8] +
mov [esp+7Ch+var_1C] ebx +
mov eax [esp+7Ch+arg_4] +
xor esi esi +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+7Ch+var_74] ebp +
mov [esp+7Ch+var_78] edi +
mov [esp+7Ch+var_7C] offset aPErrorInBANo_e +
call eax  +
mov eax [esp+7Ch+var_64] +
mov dword ptr [eax+0B8h] 0 +
mov eax [esp+7Ch+var_20] +
test eax eax +
jz loc_48B29E  +
mov [esp+7Ch+var_7C] eax +
call free  +
test esi esi +
jz loc_48B12A  +
mov [esp+7Ch+var_7C] esi +
call free  +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+7Ch+arg_C] +
mov edx [eax+8] +
cmp [eax+4] edx +
jnz loc_48B174  +
mov eax [esp+7Ch+var_20] +
mov [esp+7Ch+var_7C] eax +
call free  +
jmp loc_48B12A  +
mov eax ebp +
mov [esp+7Ch+var_5C] ebp +
mov ebp [esp+7Ch+arg_8] +
shl eax 5 +
add eax 8 +
mov [esp+7Ch+var_7C] eax +
call sub_459D10  +
test eax eax +
mov [esp+7Ch+var_4C] eax +
jz loc_48B260  +
imul eax [esp+7Ch+var_60] +
mov [esp+7Ch+var_7C] eax +
call sub_459D10  +
test eax eax +
mov esi eax +
jz loc_48B59C  +
mov ebx [edi+4] +
mov ecx [ebp+24h] +
mov eax [esp+7Ch+var_20] +
mov edx [ebx+1B0h] +
test ecx ecx +
mov [esp+7Ch+var_1C] eax +
mov [esp+7Ch+var_48] eax +
mov edx [edx+0BCh] +
mov [esp+7Ch+var_38] edx +
jz loc_48C2DF  +
mov edx [esp+7Ch+var_4C] +
mov eax [edx] +
shl eax 5 +
lea eax [edx+eax+8] +
mov edx [esp+7Ch+var_48] +
mov [esp+7Ch+var_50] eax +
mov eax edx +
add eax ecx +
cmp ecx 3 +
jbe loc_48BF4C  +
mov [esp+7Ch+var_44] edx +
mov [esp+7Ch+var_40] 0 +
mov [esp+7Ch+var_54] esi +
mov [esp+7Ch+arg_0] edi +
mov [esp+7Ch+arg_8] ebp +
mov edx [esp+7Ch+var_44] +
mov eax edx +
add eax 4 +
mov [esp+7Ch+var_1C] eax +
mov eax [ebx+28h] +
mov [esp+7Ch+var_7C] edx +
call eax  +
mov edx [esp+7Ch+var_1C] +
mov ebx edx +
mov esi eax +
mov eax [esp+7Ch+var_20] +
sub ebx eax +
mov ecx ebx +
mov [esp+7Ch+var_34] ebx +
mov ebx [esp+7Ch+arg_8] +
lea ecx [esi+ecx] +
mov edi [ebx+24h] +
cmp ecx edi +
ja loc_48B58A  +
mov ecx [esp+7Ch+var_48] +
lea ebp [edx+esi] +
mov ebx [esp+7Ch+arg_C] +
sub ecx eax +
mov eax ecx +
mov ecx [esp+7Ch+var_50] +
mov [ecx+10h] eax +
lea eax [esi+4] +
mov [esp+7Ch+var_3C] eax +
mov [ecx+0Ch] eax +
mov eax [esp+7Ch+arg_C] +
mov eax [eax+4] +
mov [esp+7Ch+var_48] eax +
sub eax [ebx] +
sar eax 2 +
imul eax eax +
test esi esi +
mov [ecx+8] eax +
jz loc_48C264  +
mov eax ebp +
sub eax edx +
cmp eax 3 +
jbe loc_48BB12  +
lea eax [edx+4] +
mov [esp+7Ch+var_1C] eax +
mov eax [esp+7Ch+arg_0] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+7Ch+var_7C] edx +
call eax  +
test eax eax +
jnz loc_48B5E5  +
mov eax [esp+7Ch+var_50] +
or byte ptr [eax+1Bh] 1 +
mov edx [esp+7Ch+var_40] +
lea ebx [edx+1] +
mov [esp+7Ch+var_3C] ebx +
imul ebx edx +
add ebx [esp+7Ch+var_54] +
mov [ebx+38h] eax +
mov eax [esp+7Ch+var_1C] +
mov [ebx] esi +
cmp ebp eax +
mov [esp+7Ch+var_48] eax +
jbe loc_48B58A  +
lea esi [eax+1] +
mov [esp+7Ch+var_1C] esi +
movzx eax byte ptr [eax] +
lea edx [eax-3] +
cmp dl 1 +
mov [ebx+8] al +
jbe loc_48B487  +
cmp al 1 +
jnz loc_48B58A  +
mov [esp+7Ch+var_7C] esi +
call strlen  +
cmp eax 13h +
ja loc_48B58A  +
lea edx [ebx+0Ah] +
add eax 1 +
mov [esp+7Ch+var_7C] edx +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] esi +
mov [esp+7Ch+var_40] edx +
call memcpy  +
mov eax [esp+7Ch+var_1C] +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] eax +
call strchr  +
mov edi [esp+7Ch+arg_C] +
mov ecx [edi+8] +
lea edx [eax+1] +
mov [esp+7Ch+var_44] edx +
mov [esp+7Ch+var_1C] edx +
mov edx [esp+7Ch+arg_C] +
mov edx [edx+4] +
cmp ecx edx +
jbe loc_48B526  +
mov esi [esp+7Ch+var_44] +
sub esi [esp+7Ch+var_20] +
cmp esi [edx] +
jbe loc_48B526  +
mov edi [edx+4] +
test edi edi +
jnz loc_48B58A  +
add edx 0Ch +
jmp loc_48B516  +
cmp [edx] esi +
jnb loc_48B51C  +
add edx 0Ch +
cmp dword ptr [edx-8] 0 +
jnz loc_48BD30  +
cmp edx ecx +
mov edi edx +
jb loc_48B505  +
mov edi [esp+7Ch+arg_C] +
mov [edi+4] edx +
cmp byte ptr [eax+1] 65h +
jz loc_48BF55  +
cmp byte ptr [ebx+8] 3 +
jbe loc_48B557  +
mov eax [esp+7Ch+var_1C] +
lea edx [eax+1] +
cmp ebp edx +
jbe loc_48B58A  +
movzx edx byte ptr [eax] +
cmp edx [esp+7Ch+var_58] +
jnz loc_48B58A  +
cmp byte ptr [eax+1] 0 +
jnz loc_48B58A  +
add eax 2 +
mov [esp+7Ch+var_1C] eax +
lea ecx [ebx+20h] +
mov edx ebp +
lea eax [esp+7Ch+var_1C] +
call sub_48A9F0  +
test eax eax +
jz loc_48B58A  +
mov edi [esp+7Ch+var_1C] +
mov eax edi +
jmp loc_48B586  +
lea edx [eax+1] +
mov [esp+7Ch+var_1C] edx +
movzx ecx byte ptr [edx-1] +
test cl cl +
jns loc_48BB2F  +
mov eax edx +
cmp ebp eax +
ja loc_48B571  +
mov esi [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_8] +
mov eax [esp+7Ch+arg_4] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+7Ch+var_74] ebp +
mov [esp+7Ch+var_78] edi +
mov [esp+7Ch+var_7C] offset aPErrorInBANo_e +
call eax  +
mov eax [esp+7Ch+var_64] +
mov dword ptr [eax+0B8h] 0 +
mov eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_7C] eax +
call free  +
jmp loc_48B28E  +
mov ebp [esp+7Ch+arg_8] +
jmp loc_48B260  +
mov edx [esp+7Ch+var_50] +
imul ecx [esp+7Ch+var_40] +
mov ebx [esp+7Ch+var_54] +
mov edx [edx+10h] +
add ecx ebx +
mov [esp+7Ch+var_48] edx +
add edx 4 +
sub edx eax +
cmp ebx ecx +
jnb loc_48C0E2  +
mov eax [ebx+38h] +
cmp [eax+10h] edx +
jnz loc_48B61D  +
jmp loc_48C0E2  +
mov eax [ebx+38h] +
cmp [eax+10h] edx +
jz loc_48B624  +
add ebx 74h +
cmp ebx ecx +
jb loc_48B615  +
cmp ebx ecx +
jz loc_48B58A  +
mov eax [ebx+38h] +
mov edi [esp+7Ch+var_50] +
mov [edi] eax +
mov ecx [ebx+38h] +
movzx eax byte ptr [edi+1Bh] +
movzx edx byte ptr [ecx+1Bh] +
and eax 0FFFFFFF7h +
and edx 8 +
or eax edx +
mov [edi+1Bh] al +
movzx edx byte ptr [ecx+1Bh] +
and eax 0FFFFFFFBh +
and edx 4 +
or eax edx +
mov [edi+1Bh] al +
mov eax [esp+7Ch+arg_C] +
mov edx [eax+4] +
mov esi [eax+8] +
cmp edx esi +
jnb loc_48B6A9  +
mov ecx [esp+7Ch+var_1C] +
sub ecx [esp+7Ch+var_20] +
cmp ecx [edx] +
jbe loc_48B6A9  +
mov eax [edx+4] +
test eax eax +
jnz loc_48B58A  +
lea eax [edx+0Ch] +
jmp loc_48B699  +
cmp [eax] ecx +
jnb loc_48B69F  +
add eax 0Ch +
mov edi [eax-8] +
test edi edi +
jnz loc_48BAC6  +
cmp eax esi +
mov edx eax +
jb loc_48B687  +
mov eax [esp+7Ch+arg_C] +
mov [eax+4] edx +
mov eax [esp+7Ch+arg_8] +
test byte ptr [eax+16h] 10h +
jz loc_48B6C3  +
mov eax [esp+7Ch+arg_C] +
mov eax [eax] +
test eax eax +
jz loc_48B740  +
cmp edx esi +
jnb loc_48B58A  +
mov eax [esp+7Ch+var_1C] +
sub eax [esp+7Ch+var_20] +
cmp [edx] eax +
jnz loc_48B58A  +
mov eax [esp+7Ch+arg_C] +
mov [esp+7Ch+var_6C] 0 +
mov [esp+7Ch+var_70] eax +
mov eax [esp+7Ch+var_38] +
mov [esp+7Ch+var_74] eax +
mov eax [esp+7Ch+arg_8] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_4] +
mov [esp+7Ch+var_7C] eax +
call sub_46DC40  +
test eax eax +
jz loc_48B740  +
mov edx [esp+7Ch+arg_0] +
cmp [eax+94h] edx +
jnz loc_48B58A  +
mov eax [eax+8Ch] +
mov edi [esp+7Ch+var_50] +
mov edx [eax+80h] +
mov [edi+4] edx +
mov [eax+80h] edi +
mov eax [esp+7Ch+var_1C] +
mov [esp+7Ch+var_48] eax +
movzx eax byte ptr [ebx+3Eh] +
mov edx eax +
and edx 60h +
cmp dl 60h +
jz loc_48BD63  +
and eax 7 +
cmp al 2 +
jz loc_48C107  +
jbe loc_48BD53  +
cmp al 3 +
lea esi [esi+0] +
jz loc_48C0D5  +
cmp al 4 +
mov [esp+7Ch+var_34] 8 +
jnz loc_48BD63  +
mov eax [esp+7Ch+var_34] +
lea esi [eax+eax] +
mov [esp+7Ch+var_18] eax +
mov eax ebp +
sub eax [esp+7Ch+var_48] +
cmp esi eax +
ja loc_48BB12  +
mov edi [esp+7Ch+var_34] +
neg edi  +
mov eax [esp+7Ch+arg_C] +
mov edx [esp+7Ch+arg_C] +
add esi [esp+7Ch+var_48] +
mov eax [eax+4] +
mov ecx [edx+8] +
mov [esp+7Ch+var_1C] esi +
cmp ecx eax +
jbe loc_48C2D3  +
add edi esi +
mov edx [eax] +
mov esi edi +
sub esi [esp+7Ch+var_20] +
mov [esp+7Ch+var_30] edi +
cmp edx esi +
jnb loc_48BAF1  +
add eax 0Ch +
jmp loc_48B7F2  +
add eax 0Ch +
mov edx [eax-0Ch] +
cmp edx esi +
jnb loc_48BAE7  +
cmp eax ecx +
mov edi eax +
jb loc_48B7E4  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
mov eax [esp+7Ch+arg_0] +
mov ecx [esp+7Ch+var_34] +
mov edx [esp+7Ch+var_30] +
mov [esp+7Ch+var_7C] 0 +
add eax 4 +
call sub_48AE70  +
test eax eax +
jz loc_48C060  +
cmp byte ptr [ebx+0Ah] 7Ah +
jz loc_48C0EB  +
mov [esp+7Ch+var_18] 0 +
cmp byte ptr [ebx+3Dh] 0FFh +
jz loc_48BAFE  +
mov eax [esp+7Ch+arg_C] +
mov edx [esp+7Ch+arg_C] +
mov edi [esp+7Ch+var_1C] +
mov eax [eax+4] +
mov esi [edx+8] +
cmp esi eax +
jbe loc_48B88F  +
mov ecx edi +
sub ecx [esp+7Ch+var_20] +
cmp ecx [eax] +
jbe loc_48BF18  +
lea edx [eax+0Ch] +
jmp loc_48B87F  +
lea edx [edx+0Ch] +
cmp [edx-0Ch] ecx +
jnb loc_48BF0E  +
cmp edx esi +
mov eax edx +
jb loc_48B873  +
mov eax [esp+7Ch+arg_C] +
mov [eax+4] edx +
mov edx [esp+7Ch+var_50] +
mov eax edi +
sub eax [esp+7Ch+var_48] +
mov [edx+1Ah] al +
cmp byte ptr [ebx+0Ah] 7Ah +
jz loc_48C0AE  +
mov eax ebp +
sub eax edi +
mov [esp+7Ch+var_18] eax +
add eax edi +
mov edx [esp+7Ch+arg_C] +
mov [esp+7Ch+var_34] eax +
mov eax [esp+7Ch+arg_C] +
mov ecx [esp+7Ch+var_44] +
add ecx [esp+7Ch+var_3C] +
mov edx [edx+8] +
mov eax [eax+4] +
mov [esp+7Ch+var_1C] ecx +
cmp edx eax +
jbe loc_48B901  +
sub ecx [esp+7Ch+var_20] +
cmp ecx [eax] +
jbe loc_48B901  +
add eax 0Ch +
jmp loc_48B8F1  +
add eax 0Ch +
cmp [eax-0Ch] ecx +
jnb loc_48BD7C  +
cmp eax edx +
mov esi eax +
jb loc_48B8E5  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
movzx eax byte ptr [ebx+3Eh] +
xor edi edi +
mov edx eax +
and edx 60h +
cmp dl 60h +
jz loc_48B937  +
and eax 7 +
cmp al 2 +
jz loc_48C0CA  +
jbe loc_48C09B  +
cmp al 3 +
mov edi 4 +
jz loc_48B937  +
cmp al 4 +
mov di 8 +
jnz loc_48C0A7  +
mov ecx [esp+7Ch+var_34] +
xor esi esi +
mov [esp+7Ch+var_18] edi +
mov eax ecx +
mov [esp+7Ch+var_10] ecx +
cmp ebp eax +
jbe loc_48B961  +
movzx edx byte ptr [eax] +
test dl dl +
jnz loc_48BA20  +
add eax 1 +
cmp ebp eax +
mov [esp+7Ch+var_10] eax +
ja loc_48B94B  +
test ecx ecx +
jz loc_48B58A  +
test esi esi +
jz loc_48B97B  +
mov eax [esp+7Ch+var_50] +
test byte ptr [eax+1Bh] 1 +
jnz loc_48B58A  +
mov edx [esp+7Ch+var_50] +
mov eax ecx +
sub eax ebp +
add [edx+0Ch] eax +
cmp ebp ecx +
jz loc_48B995  +
test byte ptr [edx+1Bh] 1 +
jz loc_48B995  +
add [ebx+3Fh] al +
add [ebx] eax +
test esi esi +
jz loc_48BA4A  +
movzx eax byte ptr [ebx+3Eh] +
and eax 70h +
cmp al 10h +
jz loc_48B9B6  +
mov eax [esp+7Ch+var_50] +
test byte ptr [eax+1Bh] 8 +
jz loc_48BA4A  +
lea eax ds:4[esi*4] +
mov [esp+7Ch+var_7C] eax +
call sub_459B80  +
mov edx [esp+7Ch+var_50] +
test eax eax +
mov [edx+1Ch] eax +
jz loc_48B58A  +
mov [eax] esi +
mov eax [esp+7Ch+var_34] +
xor esi esi +
mov edi edx +
mov [esp+7Ch+var_14] eax +
jmp loc_48B9FF  +
mov ecx [esp+7Ch+var_18] +
mov edx ebp +
lea eax [esp+7Ch+var_14] +
call sub_48AAC0  +
test eax eax +
jz loc_48B58A  +
mov eax [esp+7Ch+var_14] +
cmp ebp eax +
jbe loc_48BA4A  +
cmp byte ptr [eax] 1 +
jnz loc_48B9E4  +
mov edx [edi+1Ch] +
add eax 1 +
add esi 1 +
sub eax [esp+7Ch+var_48] +
mov [edx+esi*4] eax +
jmp loc_48B9E4  +
xor eax eax +
cmp dl 1 +
setz al  +
mov ecx edi +
add esi eax +
mov edx ebp +
lea eax [esp+7Ch+var_10] +
call sub_48AAC0  +
test eax eax +
jz loc_48B58A  +
mov ecx [esp+7Ch+var_10] +
mov eax ecx +
jmp loc_48B947  +
mov edx [esp+7Ch+var_50] +
or byte ptr [edx+1Bh] 2 +
movzx eax byte ptr [ebx+3Eh] +
mov [edx+18h] al +
movzx eax byte ptr [ebx+3Dh] +
mov [edx+19h] al +
mov eax [esp+7Ch+var_4C] +
mov edx [eax] +
lea ecx [edx+1] +
mov [eax] ecx +
mov eax [esp+7Ch+var_1C] +
mov [esp+7Ch+var_50] edx +
mov edx [esp+7Ch+var_20] +
mov ebx eax +
mov [esp+7Ch+var_44] eax +
sub ebx edx +
mov [esp+7Ch+var_48] eax +
mov eax [esp+7Ch+arg_8] +
mov eax [eax+24h] +
cmp ebx eax +
jz loc_48C3FD  +
add eax edx +
mov ebx [esp+7Ch+var_4C] +
mov edx eax +
sub edx [esp+7Ch+var_44] +
shl ecx 5 +
lea ebx [ebx+ecx+8] +
cmp edx 3 +
mov [esp+7Ch+var_50] ebx +
jbe loc_48BF3A  +
mov eax [esp+7Ch+arg_0] +
mov ebx [eax+4] +
jmp loc_48B388  +
mov edx esi +
mov eax [esp+7Ch+arg_C] +
mov esi [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_8] +
mov [eax+4] edx +
jmp loc_48B59C  +
mov eax [esp+7Ch+arg_C] +
mov [eax+4] edi +
cmp esi edx +
jnz loc_48B802  +
jmp loc_48B828  +
mov edi [esp+7Ch+var_1C] +
mov edx ebp +
mov eax [esp+7Ch+var_18] +
sub edx edi +
cmp eax edx +
jbe loc_48B8AE  +
mov eax ebp +
mov esi [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_8] +
mov [esp+7Ch+var_1C] eax +
jmp loc_48B59C  +
xor ecx 40h +
movzx esi cl +
sub esi 40h +
cmp edi eax +
mov [ebx+24h] esi +
jb loc_48BB43  +
jmp loc_48BB58  +
mov esi ecx +
sub eax 1 +
movzx ecx byte ptr [eax] +
shl esi 7 +
and ecx 7Fh +
or ecx esi +
cmp eax edi +
mov [ebx+24h] ecx +
jnz loc_48BB41  +
cmp byte ptr [ebx+8] 1 +
jnz loc_48BD12  +
cmp ebp edx +
jbe loc_48B58A  +
lea eax [edx+1] +
mov [esp+7Ch+var_1C] eax +
movzx eax byte ptr [edx] +
mov [ebx+28h] eax +
mov eax [esp+7Ch+arg_C] +
mov edx [esp+7Ch+arg_C] +
mov eax [eax+4] +
mov esi [edx+8] +
cmp esi eax +
jbe loc_48BBD2  +
mov edx [esp+7Ch+var_1C] +
sub edx [esp+7Ch+var_20] +
cmp edx [eax] +
jbe loc_48BBD2  +
mov ecx [eax+4] +
test ecx ecx +
jnz loc_48B58A  +
add eax 0Ch +
jmp loc_48BBC2  +
cmp [eax] edx +
jnb loc_48BBC8  +
add eax 0Ch +
mov edi [eax-8] +
test edi edi +
jnz loc_48BE50  +
cmp eax esi +
mov ecx eax +
jb loc_48BBB0  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
movzx eax byte ptr [ebx+0Ah] +
mov byte ptr [ebx+3Dh] 0FFh +
mov byte ptr [ebx+3Eh] 0FFh +
mov byte ptr [ebx+3Ch] 0FFh +
cmp al 65h +
jz loc_48C0BB  +
cmp al 7Ah +
jz loc_48C114  +
mov edx [esp+7Ch+var_20] +
mov [esp+7Ch+var_44] edx +
test al al +
jz loc_48BC2E  +
cmp al 50h +
jz loc_48BD8B  +
jle loc_48BE71  +
cmp al 52h +
nop   +
jz loc_48BFDB  +
cmp al 53h +
jnz loc_48B58A  +
add [esp+7Ch+var_40] 1 +
mov eax [esp+7Ch+var_40] +
movzx eax byte ptr [eax] +
test al al +
jnz loc_48BBFE  +
mov eax [esp+7Ch+arg_4] +
test byte ptr [eax] 1 +
jnz loc_48C39A  +
cmp byte ptr [ebx+3Eh] 0FFh +
jnz loc_48BC48  +
mov byte ptr [ebx+3Eh] 0 +
mov ecx [esp+7Ch+var_1C] +
mov esi ebp +
lea edx [ebx+41h] +
sub esi ecx +
mov eax esi +
cmp esi 32h +
mov [ebx+3Fh] al +
mov eax 32h +
cmovbe eax esi +
mov [esp+7Ch+var_78] ecx +
mov [esp+7Ch+var_7C] edx +
mov [esp+7Ch+var_74] eax +
call memcpy  +
mov eax [esp+7Ch+var_1C] +
mov edx [esp+7Ch+arg_C] +
lea ecx [eax+esi] +
mov [esp+7Ch+var_34] eax +
mov eax [esp+7Ch+arg_C] +
mov edx [edx+8] +
mov [esp+7Ch+var_1C] ecx +
mov eax [eax+4] +
cmp edx eax +
jbe loc_48BCD3  +
sub ecx [esp+7Ch+var_20] +
cmp [eax] ecx +
jnb loc_48BCD3  +
cmp dword ptr [eax+4] 0 +
jnz loc_48B58A  +
add eax 0Ch +
jmp loc_48BCC3  +
cmp [eax] ecx +
jnb loc_48BCC9  +
add eax 0Ch +
mov edi [eax-8] +
test edi edi +
jnz loc_48BAC4  +
cmp eax edx +
mov esi eax +
jb loc_48BCB1  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
mov eax [esp+7Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_48BD05  +
mov edi [esp+7Ch+var_50] +
mov [edi] ebx +
movzx eax byte ptr [ebx+3Ch] +
and eax 70h +
cmp al 10h +
movzx eax byte ptr [edi+5] +
setz dl  +
shl edx 3 +
and eax 0FFFFFFF7h +
or eax edx +
mov [edi+5] al +
mov eax [esp+7Ch+var_3C] +
mov [esp+7Ch+var_40] eax +
jmp loc_48B901  +
lea ecx [ebx+28h] +
mov edx ebp +
lea eax [esp+7Ch+var_1C] +
call sub_48A9F0  +
test eax eax +
jnz loc_48BB77  +
jmp loc_48B58A  +
mov edx [esp+7Ch+arg_C] +
mov eax edi +
mov esi [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_8] +
mov [edx+4] eax +
jmp loc_48B59C  +
mov edx [esp+7Ch+var_58] +
test al al +
mov [esp+7Ch+var_34] edx +
jz loc_48B786  +
mov [esp+7Ch+var_18] 0 +
xor edi edi +
xor esi esi +
mov [esp+7Ch+var_34] 0 +
jmp loc_48B7A5  +
mov eax [esp+7Ch+arg_C] +
mov [eax+4] esi +
jmp loc_48B901  +
mov eax [esp+7Ch+var_1C] +
cmp ebp eax +
jbe loc_48B58A  +
lea edx [eax+1] +
mov [esp+7Ch+var_1C] edx +
movzx eax byte ptr [eax] +
mov ecx eax +
and ecx 60h +
cmp cl 60h +
mov [ebx+3Ch] al +
jz loc_48B58A  +
mov ecx eax +
and ecx 7 +
cmp cl 2 +
jz loc_48C37D  +
jbe loc_48C253  +
cmp cl 3 +
jz loc_48C373  +
cmp cl 4 +
jnz loc_48B58A  +
mov edi 8 +
and eax 70h +
cmp al 50h +
jz loc_48C22D  +
mov eax [esp+7Ch+var_1C] +
mov esi [esp+7Ch+var_50] +
mov edx eax +
mov [esp+7Ch+var_34] eax +
sub eax [esp+7Ch+var_48] +
mov [esi+4] al +
mov eax [esp+7Ch+arg_C] +
mov esi [esp+7Ch+arg_C] +
mov eax [eax+4] +
mov esi [esi+8] +
cmp eax esi +
jnb loc_48B58A  +
sub edx [esp+7Ch+var_44] +
cmp [eax] edx +
jnb loc_48C1C6  +
mov ecx [eax+4] +
test ecx ecx +
jnz loc_48B58A  +
lea ecx [eax+0Ch] +
jmp loc_48BE4A  +
cmp [ecx] edx +
jnb loc_48C1BC  +
add ecx 0Ch +
cmp dword ptr [ecx-8] 0 +
jnz loc_48C19B  +
cmp ecx esi +
mov eax ecx +
jb loc_48BE35  +
mov eax [esp+7Ch+arg_C] +
mov esi [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_8] +
mov [eax+4] ecx +
jmp loc_48B59C  +
cmp al 4Ch +
jnz loc_48B58A  +
mov eax [esp+7Ch+var_1C] +
cmp ebp eax +
jbe loc_48B58A  +
lea esi [eax+1] +
mov edx [esp+7Ch+arg_C] +
mov [esp+7Ch+var_1C] esi +
movzx eax byte ptr [eax] +
mov [ebx+3Dh] al +
mov eax [esp+7Ch+arg_C] +
mov ecx [edx+8] +
mov eax [eax+4] +
cmp ecx eax +
jbe loc_48BEE3  +
sub esi [esp+7Ch+var_44] +
cmp [eax] esi +
jnb loc_48BEE3  +
cmp dword ptr [eax+4] 0 +
jnz loc_48B58A  +
add eax 0Ch +
jmp loc_48BED3  +
cmp [eax] esi +
jnb loc_48BED9  +
add eax 0Ch +
mov edi [eax-8] +
test edi edi +
jnz loc_48BAC6  +
cmp eax ecx +
mov edx eax +
jb loc_48BEC1  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
movzx eax byte ptr [ebx+3Dh] +
mov edx eax +
and edx 60h +
cmp dl 60h +
jz loc_48B58A  +
and eax 7 +
jz loc_48BC1E  +
sub eax 2 +
cmp al 2 +
jbe loc_48BC1E  +
jmp loc_48B58A  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
cmp byte ptr [ebx+40h] 0 +
jz loc_48B88F  +
cmp [eax] ecx +
jnz loc_48B88F  +
mov eax [ebx+38h] +
or byte ptr [eax+5] 2 +
mov edi [esp+7Ch+var_1C] +
jmp loc_48B88F  +
mov esi [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_8] +
mov [esp+7Ch+var_1C] eax +
jmp loc_48B59C  +
cmp byte ptr [eax+2] 68h +
jnz loc_48B530  +
mov eax ebp +
sub eax [esp+7Ch+var_44] +
cmp [esp+7Ch+var_58] eax +
ja loc_48BB12  +
mov eax [esp+7Ch+arg_C] +
mov esi [esp+7Ch+var_44] +
add esi [esp+7Ch+var_58] +
mov eax [eax+4] +
mov [esp+7Ch+var_1C] esi +
cmp ecx eax +
jbe loc_48B530  +
sub esi [esp+7Ch+var_20] +
cmp [eax] esi +
jnb loc_48B530  +
add eax 0Ch +
jmp loc_48BFAC  +
add eax 0Ch +
cmp [eax-0Ch] esi +
jnb loc_48C364  +
cmp eax ecx +
mov edx eax +
jb loc_48BFA0  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
jmp loc_48B530  +
mov eax 8 +
mov [esp+7Ch+var_60] 0 +
mov [esp+7Ch+var_5C] 0 +
jmp loc_48B2F3  +
mov eax [esp+7Ch+var_1C] +
cmp ebp eax +
jbe loc_48B58A  +
lea edx [eax+1] +
mov edi [esp+7Ch+arg_C] +
mov [esp+7Ch+var_1C] edx +
movzx eax byte ptr [eax] +
mov [ebx+3Eh] al +
mov eax [esp+7Ch+arg_C] +
mov esi [edi+8] +
mov eax [eax+4] +
cmp eax esi +
jnb loc_48C045  +
sub edx [esp+7Ch+var_44] +
cmp edx [eax] +
jbe loc_48C045  +
cmp dword ptr [eax+4] 0 +
jnz loc_48B58A  +
add eax 0Ch +
jmp loc_48C035  +
cmp [eax] edx +
jnb loc_48C03B  +
add eax 0Ch +
mov edi [eax-8] +
test edi edi +
jnz loc_48BE50  +
cmp eax esi +
mov ecx eax +
jb loc_48C023  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
movzx eax byte ptr [ebx+3Eh] +
mov edx eax +
and edx 60h +
cmp dl 60h +
jnz loc_48BEF5  +
jmp loc_48B58A  +
mov eax [esp+7Ch+arg_4] +
mov edx [esp+7Ch+arg_8] +
mov eax [eax+18h] +
mov eax [eax+34h] +
mov [esp+7Ch+var_74] edx +
mov edx [esp+7Ch+arg_0] +
mov [esp+7Ch+var_7C] offset aDiscardingZero +
mov [esp+7Ch+var_78] edx +
call eax  +
mov eax [esp+7Ch+var_50] +
mov dword ptr [eax] 0 +
jmp loc_48B828  +
test al al +
mov edi [esp+7Ch+var_58] +
jz loc_48B937  +
xor edi edi +
jmp loc_48B937  +
mov edx ebp +
mov eax [esp+7Ch+var_18] +
sub edx edi +
jmp loc_48BB0A  +
cmp byte ptr [ebx+0Bh] 68h +
jnz loc_48BBF2  +
jmp loc_48BC2E  +
mov edi 2 +
nop   +
jmp loc_48B937  +
mov [esp+7Ch+var_34] 4 +
jmp loc_48B786  +
mov ebx [esp+7Ch+var_54] +
jmp loc_48B624  +
lea ecx [esp+7Ch+var_18] +
mov edx ebp +
lea eax [esp+7Ch+var_1C] +
call sub_48A9F0  +
test eax eax +
jnz loc_48B83A  +
jmp loc_48B58A  +
mov [esp+7Ch+var_34] 2 +
jmp loc_48B786  +
lea eax [ebx+0Bh] +
mov edx ebp +
mov [esp+7Ch+var_40] eax +
lea ecx [ebx+2Ch] +
lea eax [esp+7Ch+var_1C] +
call sub_48A9F0  +
test eax eax +
jz loc_48B58A  +
mov eax [esp+7Ch+arg_C] +
mov edx [esp+7Ch+arg_C] +
mov eax [eax+4] +
mov ecx [edx+8] +
cmp ecx eax +
jbe loc_48C40D  +
mov edx [esp+7Ch+var_20] +
mov edi edx +
mov [esp+7Ch+var_44] edx +
mov edx [esp+7Ch+var_1C] +
sub edx edi +
cmp edx [eax] +
jbe loc_48C192  +
cmp dword ptr [eax+4] 0 +
jnz loc_48B58A  +
add eax 0Ch +
jmp loc_48C182  +
cmp [eax] edx +
jnb loc_48C188  +
add eax 0Ch +
mov edi [eax-8] +
test edi edi +
jnz loc_48BAC4  +
cmp eax ecx +
mov esi eax +
jb loc_48C170  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
movzx eax byte ptr [ebx+0Bh] +
jmp loc_48BBFA  +
mov edx [esp+7Ch+arg_C] +
mov esi [esp+7Ch+var_54] +
mov edi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_8] +
mov [edx+4] eax +
jmp loc_48B59C  +
mov esi [esp+7Ch+arg_C] +
mov [esi+4] ecx +
mov ecx [eax] +
cmp ecx edx +
jnz loc_48B58A  +
mov edx [esp+7Ch+arg_C] +
sub eax [edx] +
sar eax 2 +
imul eax eax +
mov [ebx+30h] eax +
mov eax [edx+4] +
mov edx [edx+8] +
mov [esp+7Ch+var_30] eax +
mov eax [esp+7Ch+var_30] +
jmp loc_48C201  +
cmp ecx [eax] +
jnz loc_48C208  +
test eax eax +
jz loc_48C387  +
add eax 0Ch +
cmp eax edx +
jb loc_48C1F5  +
mov edx [esp+7Ch+arg_C] +
mov [edx+4] eax +
mov eax ebp +
sub eax [esp+7Ch+var_34] +
cmp edi eax +
ja loc_48BB12  +
add edi [esp+7Ch+var_34] +
mov [esp+7Ch+var_1C] edi +
jmp loc_48BC1E  +
mov ecx [esp+7Ch+var_44] +
lea eax [edi-1] +
sub ecx edx +
and eax ecx +
mov ecx ebp +
sub ecx edx +
cmp eax ecx +
mov [esp+7Ch+var_18] eax +
ja loc_48BB12  +
add eax edx +
mov [esp+7Ch+var_1C] eax +
jmp loc_48BDE8  +
test cl cl +
jnz loc_48B58A  +
mov edi [esp+7Ch+var_58] +
jmp loc_48BDDD  +
mov ebx [esp+7Ch+var_34] +
mov eax edi +
mov esi [esp+7Ch+var_54] +
mov ecx [esp+7Ch+var_48] +
mov edi [esp+7Ch+arg_0] +
cmp ebx eax +
mov ebp [esp+7Ch+arg_8] +
jnz loc_48B59C  +
mov eax [esp+7Ch+arg_C] +
mov eax [eax+8] +
cmp eax ecx +
jbe loc_48C2CA  +
cmp [ecx] ebx +
jnb loc_48C2CA  +
cmp dword ptr [ecx+4] 0 +
jnz loc_48B59C  +
add ecx 0Ch +
jmp loc_48C2BA  +
cmp [ecx] ebx +
jnb loc_48C2C0  +
add ecx 0Ch +
cmp dword ptr [ecx-8] 0 +
jnz loc_48C416  +
cmp ecx eax +
mov edx ecx +
jb loc_48C2A9  +
mov eax [esp+7Ch+arg_C] +
mov [eax+4] ecx +
mov eax [esp+7Ch+var_4C] +
add dword ptr [eax] 1 +
jmp loc_48C2E7  +
lea eax [esi+edi] +
mov [esp+7Ch+var_30] eax +
jmp loc_48B802  +
mov [esp+7Ch+var_40] 0 +
mov eax [esp+7Ch+var_4C] +
mov edx [esp+7Ch+var_5C] +
cmp [eax] edx +
jz loc_48C307  +
mov [esp+7Ch+var_78] 3F8h +
mov [esp+7Ch+var_7C] offset a____Binutil_17 +
call sub_44BA40  +
mov eax [esp+7Ch+var_60] +
cmp [esp+7Ch+var_40] eax +
jz loc_48C325  +
mov [esp+7Ch+var_78] 3F9h +
mov [esp+7Ch+var_7C] offset a____Binutil_17 +
call sub_44BA40  +
mov eax [ebp+8Ch] +
mov edx [esp+7Ch+var_4C] +
mov [eax+88h] edx +
movzx eax word ptr [ebp+18h] +
and ax 0FC7Fh +
or ax 180h +
mov [ebp+18h] ax +
mov eax [esp+7Ch+arg_4] +
movzx eax byte ptr [eax] +
and eax 3 +
cmp al 2 +
jz loc_48B28E  +
mov [edx+4] esi +
xor esi esi +
jmp loc_48B28E  +
mov eax [esp+7Ch+arg_C] +
mov [eax+4] edx +
jmp loc_48B530  +
mov edi 4 +
jmp loc_48BDDD  +
mov edi 2 +
jmp loc_48BDDD  +
mov eax [esp+7Ch+arg_C] +
mov dword ptr [eax+4] 0 +
jmp loc_48C212  +
mov eax [esp+7Ch+arg_0] +
mov edx [esp+7Ch+arg_8] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+120h] +
mov [esp+7Ch+var_74] edx +
mov edx [esp+7Ch+arg_4] +
mov [esp+7Ch+var_78] edx +
mov edx [esp+7Ch+arg_0] +
mov [esp+7Ch+var_7C] edx +
call eax  +
test eax eax +
jz loc_48BC3E  +
movzx eax byte ptr [ebx+3Eh] +
test al 70h +
jnz loc_48C425  +
mov eax [esp+7Ch+var_50] +
or byte ptr [eax+1Bh] 8 +
test byte ptr [ebx+3Dh] 70h +
jnz loc_48BC3E  +
mov byte ptr [ebx+40h] 1 +
jmp loc_48BC3E  +
mov esi [esp+7Ch+var_54] +
mov ebp [esp+7Ch+arg_8] +
jmp loc_48C2E7  +
movzx eax byte ptr [ebx+0Bh] +
jmp loc_48BBF2  +
mov eax [esp+7Ch+arg_C] +
mov [eax+4] edx +
jmp loc_48B59C  +
add al 1 +
jnz loc_48C3EA  +
movzx eax byte ptr [ebx+3Ch] +
and eax 70h +
cmp al 50h +
jz loc_48C3EA  +
cmp byte ptr [ebx+0Ah] 0 +
jz loc_48C452  +
mov eax [esp+7Ch+var_50] +
movzx eax byte ptr [eax+1Bh] +
mov edx [esp+7Ch+var_50] +
or eax 8 +
or byte ptr [edx+5] 10h +
mov [edx+1Bh] al +
jmp loc_48C3EA  +
mov edx [esp+7Ch+var_50] +
movzx eax byte ptr [edx+1Bh] +
or eax 4 +
mov [edx+1Bh] al +
jmp loc_48C442  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
movzx edx byte ptr [eax+3] +
mov ebx [eax+1Ch] +
xor eax eax +
and edx 6 +
cmp dl 4 +
jz loc_48C494  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [ebx+0A8h] +
test edi edi +
jz loc_48C48C  +
mov edx [ebx+0B4h] +
xor ebp ebp +
jmp loc_48C4B5  +
mov edi [ebx+0A8h] +
add ebp 1 +
cmp ebp edi +
jnb loc_48C515  +
mov ecx [edx+ebp*4] +
lea eax ds:0[ebp*4] +
test byte ptr [ecx+15h] 80h +
jz loc_48C4A8  +
lea ecx [ebp+1] +
cmp ecx edi +
jnb loc_48C4F5  +
mov [esp+2Ch+var_1C] ebp +
jmp loc_48C4DA  +
mov edx [ebx+0B4h] +
mov eax esi +
mov ebp [edx+eax+4] +
add ecx 1 +
cmp ecx edi +
lea esi [eax+4] +
mov [edx+eax] ebp +
jnz loc_48C4D2  +
mov ebp [esp+2Ch+var_1C] +
mov edx [ebx+0B4h] +
sub ebp 1 +
sub edi 1 +
add ebp 1 +
cmp ebp edi +
mov [ebx+0A8h] edi +
mov dword ptr [edx+edi*4] 0 +
mov edx [ebx+0B4h] +
jb loc_48C4B5  +
mov [esp+2Ch+var_28] edi +
mov [esp+2Ch+var_20] offset sub_48AC50 +
mov [esp+2Ch+var_24] 4 +
mov [esp+2Ch+var_2C] edx +
call qsort  +
mov eax [ebx+0A8h] +
mov edi [ebx+0B4h] +
mov [esp+2Ch+var_10] ebx +
sub eax 1 +
mov [esp+2Ch+var_18] edi +
mov ebp [edi] +
xor edi edi +
mov [esp+2Ch+var_1C] eax +
cmp edi [esp+2Ch+var_1C] +
jnb loc_48C5FA  +
add edi 1 +
lea eax ds:0[edi*4] +
mov [esp+2Ch+var_14] eax +
mov eax [esp+2Ch+var_18] +
mov edx [eax+edi*4] +
test edx edx +
jz loc_48C5A8  +
mov eax [ebp+8Ch] +
mov ecx [edx+8Ch] +
mov eax [eax+88h] +
mov ecx [ecx+88h] +
mov ebx [eax+3Ch] +
mov esi [eax+38h] +
add esi [ebx+1Ch] +
add esi [eax+24h] +
mov eax [ecx+3Ch] +
mov ecx [ecx+38h] +
add ecx [eax+1Ch] +
cmp esi ecx +
jz loc_48C630  +
mov edx [ebp+28h] +
test edx edx +
mov edx [ebp+24h] +
jnz loc_48C5B5  +
mov [ebp+28h] edx +
mov eax [ebp+94h] +
add edx 8 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_2C] eax +
call sub_44DB80  +
mov ebx [esp+2Ch+var_10] +
mov eax [ebx+0A8h] +
mov esi [ebx+0B4h] +
mov ebx [esp+2Ch+var_14] +
sub eax 1 +
mov [esp+2Ch+var_1C] eax +
cmp edi [esp+2Ch+var_1C] +
mov [esp+2Ch+var_18] esi +
mov ebp [esi+ebx] +
jb loc_48C55A  +
mov eax [ebp+28h] +
mov edx [ebp+24h] +
test eax eax +
jnz loc_48C607  +
mov [ebp+28h] edx +
mov eax [ebp+94h] +
add edx 8 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_2C] eax +
call sub_44DB80  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp edx +
jmp loc_48C550  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov ebp [esp+1Ch+arg_0] +
mov edi [esp+1Ch+arg_C] +
mov esi [esp+1Ch+arg_10] +
mov eax [eax+8Ch] +
mov ebx [eax+80h] +
test ebx ebx +
jnz loc_48C677  +
jmp loc_48C6D0  +
mov ebx [ebx+4] +
test ebx ebx +
jz loc_48C6D0  +
mov edx [esp+1Ch+arg_8] +
mov ecx ebx +
mov eax ebp +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] edi +
call sub_48ACA0  +
test eax eax +
jz loc_48C6C0  +
mov ecx [ebx] +
test ecx ecx +
jz loc_48C670  +
movzx eax byte ptr [ecx+5] +
test al 1 +
jnz loc_48C670  +
or eax 1 +
mov [ecx+5] al +
mov edx [esp+1Ch+arg_8] +
mov eax ebp +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] edi +
call sub_48ACA0  +
test eax eax +
jnz loc_48C670  +
lea esi [esi+0] +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_8] +
movzx edx word ptr [eax+18h] +
xor eax eax +
and dx 380h +
cmp dx 180h +
jz loc_48C705  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esp+3Ch+arg_8] +
mov edx [edi+8Ch] +
mov ecx [edx+88h] +
test ecx ecx +
mov esi ecx +
mov [esp+3Ch+var_2C] ecx +
jz loc_48C6FD  +
mov eax [edi+94h] +
lea ebx [esi+8] +
mov ebp ebx +
mov edx [eax+4] +
mov edx [edx+1B0h] +
mov edx [edx+11Ch] +
mov [esp+3Ch+var_38] edi +
mov [esp+3Ch+var_3C] eax +
call edx  +
mov edx [esi] +
mov edi [esp+3Ch+arg_0] +
mov [esp+3Ch+var_24] eax +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+1Ch] +
mov [esp+3Ch+var_28] eax +
mov eax edx +
shl eax 5 +
lea eax [esi+eax+8] +
cmp ebx eax +
lea esi [edi+4] +
mov [esp+3Ch+var_1C] esi +
jnb loc_48CB1C  +
mov [esp+3Ch+var_20] ebx +
mov ebx [esp+3Ch+var_2C] +
cmp dword ptr [ebp+0Ch] 4 +
jz loc_48CB90  +
test byte ptr [ebp+1Bh] 1 +
jnz loc_48CB04  +
mov ecx [ebp+0] +
test ecx ecx +
jz loc_48CB04  +
mov eax [esp+3Ch+arg_8] +
test byte ptr [eax+16h] 10h +
mov eax [esp+3Ch+arg_10] +
mov edx [eax] +
jz loc_48C7AE  +
test edx edx +
jz loc_48CBE0  +
mov eax [ebp+8] +
mov edi [esp+3Ch+arg_10] +
lea eax [eax+eax*2] +
lea eax [edx+eax*4] +
cmp eax [edi+8] +
mov [edi+4] eax +
jnb loc_48C7CD  +
mov esi [ebp+10h] +
lea edx [esi+8] +
cmp [eax] edx +
jz loc_48C7E7  +
mov [esp+3Ch+var_38] 552h +
mov [esp+3Ch+var_3C] offset a____Binutil_17 +
call sub_44BA40  +
mov eax [ebp+10h] +
lea edx [eax+8] +
mov eax [esp+3Ch+arg_10] +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_38] eax +
call [esp+3Ch+arg_C]  +
test eax eax +
setz al  +
movzx eax al +
test eax eax +
jz loc_48CB02  +
mov eax [esp+3Ch+arg_4] +
test byte ptr [eax] 1 +
jz loc_48C853  +
movzx eax byte ptr [ebp+18h] +
and eax 70h +
jnz loc_48CBC8  +
test byte ptr [ebp+1Bh] 8 +
jnz loc_48C853  +
mov eax [esp+3Ch+var_28] +
mov edi [esp+3Ch+arg_8] +
mov dword ptr [eax+0B8h] 0 +
mov eax [esp+3Ch+arg_4] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov [esp+3Ch+var_34] edi +
mov edi [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] offset aPFdeEncodingIn +
mov [esp+3Ch+var_38] edi +
call eax  +
and byte ptr [ebp+1Bh] 0FDh +
mov eax [esp+3Ch+var_28] +
add dword ptr [eax+0B4h] 1 +
mov edi [ebp+0] +
movzx eax byte ptr [edi+1Bh] +
test al 2 +
jz loc_48CAFF  +
test byte ptr [edi+5] 20h +
jnz loc_48CBD5  +
and eax 0FFFFFFFDh +
mov esi [edi] +
mov [edi+1Bh] al +
mov eax [esp+3Ch+arg_8] +
test esi esi +
mov [edi] eax +
jz loc_48CAFF  +
cmp byte ptr [esi+3Ch] 0FFh +
jz loc_48CD01  +
mov eax [esi+30h] +
lea ecx [esi+30h] +
mov [esp+3Ch+var_18] ecx +
lea edx [eax+eax*2] +
mov eax [esp+3Ch+arg_10] +
mov eax [eax] +
mov dword ptr [esi+30h] 0 +
mov dword ptr [esi+34h] 0 +
mov ecx [eax+edx*4+4] +
mov eax [esp+3Ch+arg_10] +
shr ecx 8 +
cmp ecx [eax+14h] +
jnb loc_48C8E8  +
mov edx [esp+3Ch+arg_10] +
lea eax [ecx+ecx*4] +
mov edx [edx+0Ch] +
lea edx [edx+eax*4] +
movzx eax byte ptr [edx+0Ch] +
shr al 4 +
test al al +
jz loc_48CC4F  +
mov edx [esp+3Ch+arg_10] +
mov eax ecx +
sub eax [edx+18h] +
mov edx [edx+1Ch] +
mov eax [edx+eax*4] +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-6] +
cmp dl 1 +
ja loc_48C912  +
mov eax [eax+14h] +
movzx ecx byte ptr [eax+0Ch] +
lea edx [ecx-6] +
cmp dl 1 +
jbe loc_48C903  +
mov ecx [esp+3Ch+arg_4] +
mov [esi+30h] eax +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_38] ecx +
call sub_463010  +
test eax eax +
jnz loc_48CC96  +
mov [esp+3Ch+var_34] 0 +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_3C] esi +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+8] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
lea edx [esi+0Ah] +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_14] edx +
mov [esp+3Ch+var_10] eax +
call strlen  +
mov ecx [esp+3Ch+var_10] +
mov edx [esp+3Ch+var_14] +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_3C] edx +
add eax 1 +
mov [esp+3Ch+var_38] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+20h] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+24h] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+28h] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+2Ch] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 8 +
mov [esp+3Ch+var_34] eax +
mov eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_34] eax +
mov eax [esi+38h] +
mov eax [eax] +
add eax 3Ch +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+3Ch] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+3Dh] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+3Eh] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov [esp+3Ch+var_38] 1 +
mov [esp+3Ch+var_34] eax +
lea eax [esi+3Fh] +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
movzx edx byte ptr [esi+3Fh] +
cmp edx 32h +
mov [esp+3Ch+var_34] eax +
mov eax 32h +
cmova edx eax +
lea eax [esi+41h] +
mov [esp+3Ch+var_38] edx +
mov [esp+3Ch+var_3C] eax +
call sub_4A7F40  +
mov ecx [esp+3Ch+var_28] +
mov edx [ecx+0B0h] +
mov [esi+4] eax +
test edx edx +
jz loc_48CD0D  +
mov [esp+3Ch+var_3C] edx +
mov [esp+3Ch+var_30] 1 +
mov [esp+3Ch+var_34] eax +
mov [esp+3Ch+var_38] esi +
call sub_4A7B50  +
test eax eax +
mov edx eax +
jz loc_48CAFF  +
mov eax [eax] +
test eax eax +
jz loc_48CD6B  +
movzx edx byte ptr [edi+5] +
or byte ptr [edi+1Bh] 2 +
or edx 20h +
mov [edi+5] dl +
mov ecx [eax+38h] +
and edx 2 +
mov [edi] ecx +
jz loc_48CAFC  +
mov edx [eax+38h] +
or byte ptr [edx+5] 2 +
mov edi [eax+38h] +
mov [ebp+0] edi +
mov edx [ebx] +
mov eax edx +
add ebp 20h +
shl eax 5 +
lea eax [ebx+eax+8] +
cmp ebp eax +
jb loc_48C777  +
mov ebx [esp+3Ch+var_20] +
mov eax [esp+3Ch+var_2C] +
mov eax [eax+4] +
test eax eax +
jz loc_48CB3C  +
mov [esp+3Ch+var_3C] eax +
call free  +
mov eax [esp+3Ch+var_2C] +
mov edx [eax] +
mov dword ptr [eax+4] 0 +
mov eax [esp+3Ch+var_2C] +
shl edx 5 +
xor edi edi +
lea esi [eax+edx+8] +
cmp ebx esi +
jnb loc_48CB6C  +
mov ebp [esp+3Ch+var_24] +
test byte ptr [ebx+1Bh] 2 +
jnz loc_48CB65  +
mov [ebx+14h] edi +
mov edx ebp +
mov eax ebx +
call sub_48AA70  +
add edi eax +
add ebx 20h +
cmp ebx esi +
jb loc_48CB51  +
mov eax [esp+3Ch+arg_8] +
mov esi [esp+3Ch+arg_8] +
mov eax [eax+24h] +
mov [esi+24h] edi +
cmp edi eax +
mov [esi+28h] eax +
setnz al  +
add esp 3Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+arg_8] +
mov esi [eax+0A0h] +
movzx eax byte ptr [ebp+1Bh] +
test esi esi +
setnz dl  +
and eax 0FFFFFFFDh +
add edx edx +
add ebp 20h +
or eax edx +
mov [ebp-5] al +
mov edx [ebx] +
mov eax edx +
shl eax 5 +
lea eax [ebx+eax+8] +
cmp ebp eax +
jb loc_48C777  +
jmp loc_48CB18  +
cmp al 50h +
jnz loc_48C853  +
jmp loc_48C822  +
mov edi [edi] +
mov [ebp+0] edi +
jmp loc_48CB02  +
movzx eax byte ptr [ebp+18h] +
mov edx eax +
and edx 60h +
cmp dl 60h +
jz loc_48CCF8  +
mov edx eax +
and edx 7 +
cmp dl 2 +
jz loc_48CD4D  +
jbe loc_48CCEA  +
cmp dl 3 +
jz loc_48CD5C  +
cmp dl 4 +
mov esi 8 +
mov ecx 8 +
jnz loc_48CCF8  +
mov edx [ebp+10h] +
shr al 3 +
and eax 1 +
lea edx [esi+edx+8] +
mov esi [esp+3Ch+arg_8] +
add edx [esi+6Ch] +
mov [esp+3Ch+var_3C] eax +
mov eax [esp+3Ch+var_1C] +
call sub_48AE70  +
test eax eax +
setnz al  +
movzx eax al +
jmp loc_48C7FE  +
mov eax [edx+10h] +
mov [esp+3Ch+var_14] ecx +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] eax +
call sub_478480  +
test eax eax +
jz loc_48CAFF  +
mov edx [eax+7Ch] +
test edx edx +
cmovz edx eax +
mov eax [edx+3Ch] +
test eax eax +
jz loc_48CAFF  +
mov eax [esp+3Ch+arg_0] +
mov byte ptr [esi+9] 1 +
mov ecx [esp+3Ch+var_14] +
mov eax [eax+24h] +
mov [esi+34h] ecx +
mov [esi+30h] eax +
mov eax [esp+3Ch+arg_4] +
test byte ptr [eax] 1 +
jz loc_48C935  +
test byte ptr [esi+3Ch] 70h +
jnz loc_48C935  +
mov eax [esp+3Ch+arg_0] +
mov ecx [esp+3Ch+arg_8] +
mov eax [eax+4] +
mov eax [eax+1B0h] +
mov eax [eax+120h] +
mov [esp+3Ch+var_34] ecx +
mov ecx [esp+3Ch+arg_4] +
mov [esp+3Ch+var_38] ecx +
mov ecx [esp+3Ch+arg_0] +
mov [esp+3Ch+var_3C] ecx +
call eax  +
test eax eax +
jz loc_48C935  +
or byte ptr [edi+5] 0Ch +
jmp loc_48C935  +
mov ecx [esp+3Ch+var_24] +
test dl dl +
mov esi ecx +
jz loc_48CC22  +
xor esi esi +
xor ecx ecx +
jmp loc_48CC22  +
lea eax [esi+30h] +
mov [esp+3Ch+var_18] eax +
jmp loc_48C935  +
mov [esp+3Ch+var_30] offset free +
mov [esp+3Ch+var_34] offset sub_48AD20 +
mov [esp+3Ch+var_38] offset loc_48AA60 +
mov [esp+3Ch+var_3C] 1 +
call sub_4A7820  +
mov edx eax +
mov eax [esp+3Ch+var_28] +
test edx edx +
mov [eax+0B0h] edx +
jz loc_48CAFF  +
mov eax [esi+4] +
jmp loc_48CAB5  +
mov esi 2 +
mov ecx 2 +
jmp loc_48CC22  +
mov esi 4 +
mov ecx 4 +
jmp loc_48CC22  +
mov [esp+3Ch+var_3C] 74h +
mov [esp+3Ch+var_18] edx +
call malloc  +
test eax eax +
jz loc_48CAFF  +
mov edx [esp+3Ch+var_18] +
mov ecx 1Dh +
mov edi eax +
movs   +
mov [edx] eax +
jmp loc_48CAFC  +
***
sub esp 14h +
mov esi [esp+14h+arg_4] +
mov ebx [esi+1Ch] +
mov ecx [ebx+0ACh] +
test ecx ecx +
jnz loc_48CDD2  +
mov eax [ebx+0B0h] +
test eax eax +
jz loc_48CDD2  +
mov [esp+14h+var_14] eax +
call sub_4A7870  +
mov dword ptr [ebx+0B0h] 0 +
mov eax [ebx+0A4h] +
test eax eax +
jz loc_48CE30  +
movzx edx byte ptr [esi+3] +
mov dword ptr [eax+24h] 8 +
and edx 6 +
cmp dl 4 +
jz loc_48CDF9  +
mov edx [ebx+0B8h] +
test edx edx +
jnz loc_48CE17  +
mov edx [esp+14h+arg_0] +
mov edx [edx+0A0h] +
mov edx [edx+934h] +
mov [edx+0Ch] eax +
add esp 14h +
mov eax 1 +
pop ebx  +
pop esi  +
retn   +
mov edx [ebx+0B4h] +
lea edx ds:0Ch[edx*8] +
mov [eax+24h] edx +
jmp loc_48CDF9  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov eax [eax+30h] +
mov [esp+1Ch+var_18] offset a_eh_frame_0 +
mov [esp+1Ch+var_1C] eax +
call sub_44D4B0  +
test eax eax +
jz loc_48CE90  +
mov eax [eax+0A0h] +
test eax eax +
jnz loc_48CE7A  +
jmp loc_48CE90  +
mov eax [eax+0A0h] +
test eax eax +
jz loc_48CE85  +
cmp dword ptr [eax+24h] 8 +
jbe loc_48CE70  +
mov eax 1 +
add esp 1Ch +
retn   +
xor eax eax +
add esp 1Ch +
retn   +
***
push esi  +
push ebx  +
mov eax [esp+arg_0] +
mov ebp [eax+34h] +
test ebp ebp +
jz loc_48CEE7  +
mov eax [ebp+64h] +
test eax eax +
jz loc_48CEDD  +
mov edx offset a_eh_frame_entr +
nop   +
lea esi [esi+0] +
mov esi [eax] +
mov edi edx +
mov ecx 10h +
cmps   +
jz loc_48CED6  +
cmp dword ptr [eax+3Ch] offset off_4BFB90 +
jnz loc_48CEF0  +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_48CEC0  +
mov ebp [ebp+9Ch] +
test ebp ebp +
jnz loc_48CEAF  +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn   +
pop ebx  +
mov eax 1 +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
sub esp 40h +
mov esi [esp+40h+arg_0] +
mov [esp+40h+var_4] 0 +
mov edi [esi+1Ch] +
mov ebx [edi+0A4h] +
test ebx ebx +
jz loc_48D016  +
cmp dword ptr [ebx+3Ch] offset off_4BFB90 +
jz loc_48CFB6  +
movzx eax byte ptr [esi+3] +
and eax 6 +
jz loc_48CFB6  +
cmp al 2 +
jz loc_48CFA0  +
cmp al 4 +
jz loc_48D022  +
mov eax [esi+30h] +
lea edx [esp+40h+var_4] +
mov [esp+40h+var_1C] edx +
mov [esp+40h+var_20] 0 +
mov [esp+40h+var_24] 0 +
mov [esp+40h+var_28] 0 +
mov [esp+40h+var_2C] 0 +
mov [esp+40h+var_30] ebx +
mov [esp+40h+var_34] 1 +
mov [esp+40h+var_38] offset a__gnu_eh_frame +
mov [esp+40h+var_3C] eax +
mov [esp+40h+var_40] esi +
call sub_450D00  +
mov edx eax +
xor eax eax +
test edx edx +
jnz loc_48CFD3  +
add esp 40h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+40h+var_40] esi +
call sub_48CE40  +
test eax eax +
jnz loc_48D034  +
mov ebx [edi+0A4h] +
or dword ptr [ebx+14h] 8000h +
mov eax 1 +
mov dword ptr [edi+0A4h] 0 +
add esp 40h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [esp+40h+var_4] +
or byte ptr [eax+33h] 2 +
mov edx [esi+30h] +
mov byte ptr [eax+31h] 2 +
mov edx [edx+4] +
mov edx [edx+1B0h] +
mov edx [edx+0DCh] +
mov [esp+40h+var_3C] eax +
mov [esp+40h+var_38] 1 +
mov [esp+40h+var_40] esi +
call edx  +
mov eax [edi+0ACh] +
test eax eax +
jnz loc_48D016  +
mov dword ptr [edi+0B8h] 1 +
add esp 40h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+40h+var_40] esi +
call sub_48CEA0  +
test eax eax +
jnz loc_48CF45  +
jmp loc_48CFB6  +
movzx eax byte ptr [esi+3] +
mov ebx [edi+0A4h] +
and eax 6 +
jmp loc_48CF3D  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ecx [esp+2Ch+arg_8] +
mov esi [esp+2Ch+arg_C] +
movzx edx word ptr [ecx+18h] +
mov eax esi +
and dx 380h +
cmp dx 180h +
jz loc_48D080  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ecx+8Ch] +
mov edi [edx+88h] +
mov edx [ecx+28h] +
cmp esi edx +
jnb loc_48D0E0  +
mov eax [edi] +
test eax eax +
jz loc_48D223  +
xor edx edx +
jmp loc_48D0AF  +
add ebp [ecx+14h] +
cmp esi ebp +
jb loc_48D0F0  +
lea edx [ebx+1] +
cmp edx eax +
jnb loc_48D0C8  +
lea ebx [edx+eax] +
shr ebx 1 +
mov ecx ebx +
shl ecx 5 +
add ecx edi +
mov ebp [ecx+18h] +
cmp esi ebp +
jnb loc_48D0A1  +
mov eax ebx +
cmp edx eax +
jb loc_48D0AF  +
mov [esp+2Ch+var_28] 628h +
mov [esp+2Ch+var_2C] offset a____Binutil_17 +
call sub_44BA40  +
jmp loc_48D0F4  +
sub eax edx +
add eax [ecx+24h] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edx eax +
jnb loc_48D0C8  +
mov edx ebx +
mov eax 0FFFFFFFFh +
shl edx 5 +
add edx edi +
movzx ecx byte ptr [edx+23h] +
test cl 2 +
jnz loc_48D071  +
test cl 1 +
jz loc_48D1D0  +
test byte ptr [edx+0Dh] 4 +
mov ebp [edx+18h] +
jz loc_48D134  +
movzx eax byte ptr [edx+0Ch] +
lea edx [ebp+eax+8] +
mov eax 0FFFFFFFEh +
cmp edx esi +
jz loc_48D071  +
mov eax ebx +
shl eax 5 +
add eax edi +
mov edx [eax+24h] +
test edx edx +
jz loc_48D1A0  +
test byte ptr [eax+23h] 8 +
jz loc_48D1A0  +
lea eax [ebp+8] +
mov [esp+2Ch+var_18] eax +
add eax [edx+4] +
cmp esi eax +
jb loc_48D1A0  +
mov ecx [edx] +
test ecx ecx +
jz loc_48D1A0  +
cmp esi eax +
jz loc_48D22A  +
mov [esp+2Ch+var_14] edi +
mov eax 1 +
mov edi [esp+2Ch+var_18] +
mov [esp+2Ch+var_10] ebx +
mov ebx ecx +
jmp loc_48D18D  +
mov ecx [edx+eax*4] +
add ecx edi +
cmp ecx esi +
jz loc_48D22A  +
add eax 1 +
cmp eax ebx +
jbe loc_48D180  +
mov edi [esp+2Ch+var_14] +
mov ebx [esp+2Ch+var_10] +
lea esi [esi+0] +
shl ebx 5 +
add edi ebx +
movzx eax byte ptr [edi+23h] +
add edi 8 +
add esi [edi+14h] +
sub esi ebp +
test al 1 +
jz loc_48D216  +
shr al 2 +
and eax 1 +
test byte ptr [edi+5] 10h +
jz loc_48D1C4  +
add eax 1 +
add esi eax +
add eax esi +
jmp loc_48D071  +
and ecx 8 +
mov ebp [edx+18h] +
jz loc_48D1E8  +
lea edx [ebp+8] +
mov eax 0FFFFFFFEh +
cmp edx esi +
jz loc_48D071  +
mov eax ebx +
shl eax 5 +
add eax edi +
mov edx [eax+8] +
test byte ptr [edx+5] 2 +
jz loc_48D134  +
movzx eax byte ptr [eax+22h] +
lea edx [ebp+eax+8] +
mov eax 0FFFFFFFEh +
cmp edx esi +
jnz loc_48D134  +
jmp loc_48D071  +
shr al 2 +
and eax 1 +
add eax esi +
jmp loc_48D071  +
xor ebx ebx +
jmp loc_48D0C8  +
mov eax 0FFFFFFFEh +
jmp loc_48D071  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+3Ch+arg_8] +
mov edx [ebx+28h] +
mov eax [ebx+8Ch] +
test edx edx +
mov ebp [eax+88h] +
jnz loc_48D264  +
mov eax [ebx+24h] +
mov [ebx+28h] eax +
movzx eax word ptr [ebx+18h] +
and ax 380h +
cmp ax 300h +
jz loc_48D286  +
mov [esp+3Ch+var_38] 66Ch +
mov [esp+3Ch+var_3C] offset a____Binutil_17 +
call sub_44BA40  +
test byte ptr [ebx+15h] 80h +
jnz loc_48D292  +
test byte ptr [ebp+15h] 80h +
jz loc_48D2A0  +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+28h] +
mov eax [ebx+3Ch] +
mov [esp+3Ch+var_28] edx +
mov edx [ebx+38h] +
mov [esp+3Ch+var_38] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_30] edx +
mov edx [esp+3Ch+arg_C] +
mov [esp+3Ch+var_3C] eax +
mov [esp+3Ch+var_34] edx +
call sub_44DBC0  +
mov edx eax +
xor eax eax +
test edx edx +
jz loc_48D297  +
mov eax [esp+3Ch+arg_0] +
mov edi [esp+3Ch+arg_C] +
mov eax [eax+4] +
mov eax [eax+2Ch] +
mov [esp+3Ch+var_3C] edi +
call eax  +
mov ecx [ebx+28h] +
cmp ecx 8 +
mov edi eax +
jbe loc_48D354  +
mov [esp+3Ch+var_20] ebp +
mov esi 8 +
mov ebp [esp+3Ch+arg_0] +
jmp loc_48D311  +
mov ecx [ebx+28h] +
add esi 8 +
cmp ecx esi +
jbe loc_48D350  +
mov edi eax +
mov eax [ebp+4] +
mov ecx [esp+3Ch+arg_C] +
mov eax [eax+2Ch] +
add ecx esi +
mov [esp+3Ch+var_3C] ecx +
call eax  +
add eax esi +
cmp eax edi +
ja loc_48D305  +
mov eax [ebx+94h] +
mov edx [ebx] +
mov [esp+3Ch+var_3C] offset aBSNotInOrder +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_34] edx +
call off_4BFA04  +
xor eax eax +
jmp loc_48D297  +
mov ebp [esp+3Ch+var_20] +
mov edi [ebp+3Ch] +
mov edx [ebp+38h] +
add edx [edi+1Ch] +
mov edi [ebx+3Ch] +
add edx [ebp+24h] +
and edx 0FFFFFFFEh +
sub edx [edi+1Ch] +
sub edx [ebx+38h] +
mov ebp edx +
sub ebp ecx +
test ebp 1 +
jnz loc_48D440  +
cmp edx eax +
jbe loc_48D470  +
mov eax [ebx+24h] +
cmp ecx eax +
jz loc_48D292  +
mov edx [esp+3Ch+arg_0] +
add ecx 8 +
cmp eax ecx +
mov edx [edx+4] +
mov edi [edx+1B0h] +
jz loc_48D3B7  +
mov [esp+3Ch+var_38] 69Eh +
mov [esp+3Ch+var_3C] offset a____Binutil_17 +
call sub_44BA40  +
mov eax [edi+1A0h] +
test eax eax +
jz loc_48D4A0  +
mov eax [esp+3Ch+arg_0] +
lea edx [esp+3Ch+var_14] +
mov [esp+3Ch+var_20] edx +
mov eax [eax+4] +
mov eax [eax+30h] +
mov [esp+3Ch+var_38] edx +
mov [esp+3Ch+var_3C] ebp +
call eax  +
mov eax [esp+3Ch+arg_0] +
mov ecx [esp+3Ch+arg_4] +
mov eax [eax+4] +
mov ebp [eax+30h] +
mov eax [edi+1A0h] +
mov [esp+3Ch+var_3C] ecx +
call eax  +
lea ecx [esp+3Ch+var_10] +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_3C] eax +
call ebp  +
mov ecx [ebx+3Ch] +
mov [esp+3Ch+var_28] 8 +
mov eax [ebx+28h] +
add eax [ebx+38h] +
mov edx [esp+3Ch+var_20] +
mov [esp+3Ch+var_2C] 0 +
mov [esp+3Ch+var_30] eax +
mov eax [esp+3Ch+arg_0] +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] eax +
call sub_44DBC0  +
jmp loc_48D297  +
mov eax [ebx+94h] +
mov edx [ebx] +
mov [esp+3Ch+var_3C] offset aBSInvalidInput +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_34] edx +
call off_4BFA04  +
mov [esp+3Ch+var_3C] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_48D297  +
mov eax [ebx+94h] +
mov edx [ebx] +
mov [esp+3Ch+var_3C] offset aBSPointsPastEn +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_34] edx +
call off_4BFA04  +
mov [esp+3Ch+var_3C] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_48D297  +
mov [esp+3Ch+var_38] 6A0h +
mov [esp+3Ch+var_3C] offset a____Binutil_17 +
call sub_44BA40  +
jmp loc_48D3C5  +
***
push esi  +
push esi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov eax [esp+5Ch+arg_4] +
mov esi [esp+5Ch+arg_0] +
mov ebx [eax+1Ch] +
movzx eax byte ptr [eax+3] +
mov edi [ebx+0A4h] +
mov byte ptr [esp+5Ch+var_34] al +
and eax 6 +
jz loc_48E6A1  +
test edi edi +
jz loc_48E6A1  +
cmp al 4 +
jz loc_48E6B0  +
mov eax [ebx+0BCh] +
test eax eax +
jz loc_48E778  +
mov edx [ebx+0A8h] +
mov eax 8 +
cmp edx [ebx+0B4h] +
lea ecx ds:0Ch[edx*8] +
cmovz eax ecx +
mov [esp+5Ch+var_5C] eax +
xor ebp ebp +
call sub_459B80  +
test eax eax +
mov [esp+5Ch+var_20] eax +
jz loc_48E697  +
mov [esp+5Ch+var_58] offset a_eh_frame_0 +
mov [esp+5Ch+var_5C] esi +
call sub_44D4B0  +
test eax eax +
jz loc_48E7C8  +
mov ebp [esp+5Ch+var_20] +
lea ecx [esp+5Ch+var_14] +
mov dword ptr [ebp+0] 0 +
mov dword ptr [ebp+4] 0 +
mov byte ptr [ebp+0] 1 +
mov edx [esi+4] +
mov edx [edx+1B0h] +
mov edx [edx+128h] +
mov [esp+5Ch+var_54] eax +
mov eax [esp+5Ch+arg_4] +
mov [esp+5Ch+var_44] ecx +
mov [esp+5Ch+var_48] 4 +
mov [esp+5Ch+var_4C] edi +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] esi +
call edx  +
mov [ebp+1] al +
mov ebp [ebx+0BCh] +
test ebp ebp +
jz loc_48E4A1  +
mov eax [ebx+0B4h] +
cmp [ebx+0A8h] eax +
jz loc_48E750  +
mov eax [esp+3Ch] +
mov byte ptr [eax+2] 0FFh +
mov byte ptr [eax+3] 0FFh +
mov ebp [esp+3Ch] +
mov eax [esi+4] +
lea edx [ebp+4] +
mov eax [eax+30h] +
mov [esp-10h+arg_0] edx +
mov edx [esp+48h] +
mov [esp+0] edx +
call eax  +
cmp byte ptr [ebp+2] 0FFh +
jz loc_48E641  +
mov ebp [esp+3Ch] +
mov eax [esi+4] +
mov ecx [ebx+0B4h] +
mov edx ebp +
mov eax [eax+30h] +
add edx 8 +
mov [esp-10h+arg_0] edx +
mov [esp+0] ecx +
call eax  +
mov eax [ebx+0BCh] +
mov edx [ebx+0B4h] +
mov dword ptr [esp+0Ch] offset sub_48AE30 +
mov [esp-10h+arg_4] 0Ch +
mov [esp+0] eax +
mov [esp-10h+arg_0] edx +
call qsort  +
lea eax [ebp+10h] +
xor ebp ebp +
mov [esp+2Ch] eax +
mov dword ptr [esp+28h] 0 +
mov dword ptr [esp+34h] 0 +
mov dword ptr [esp+38h] 0 +
mov [esp+30h] edi +
jmp loc_48E5CD  +
mov edx [esi+4] +
mov edi [esp+2Ch] +
mov edx [edx+30h] +
lea ecx [edi-4] +
mov [esp-10h+arg_0] ecx +
mov [esp+0] eax +
call edx  +
mov eax [ebx+0BCh] +
mov edi [esi+0A0h] +
mov edx [eax+ebp+8] +
mov eax [esp+30h] +
mov eax [eax+3Ch] +
mov ecx [eax+1Ch] +
mov eax edx +
sub eax ecx +
cmp byte ptr [edi+4] 2 +
jz loc_48E761  +
mov edx [esi+4] +
mov edi [esp+2Ch] +
mov edx [edx+30h] +
mov [esp-10h+arg_0] edi +
mov [esp+0] eax +
call edx  +
mov ecx [esp+28h] +
test ecx ecx +
jz loc_48E5BA  +
mov edx [ebx+0BCh] +
lea ecx [edx+ebp-0Ch] +
mov eax [ecx+4] +
add eax [ecx] +
cmp [edx+ebp] eax +
mov eax 1 +
cmovnb eax [esp+38h] +
mov [esp+38h] eax +
mov eax [esp+28h] +
add ebp 0Ch +
add dword ptr [esp+2Ch] 8 +
add eax 1 +
mov [esp+28h] eax +
mov eax [esp+28h] +
cmp eax [ebx+0B4h] +
jnb loc_48E617  +
mov eax [ebx+0BCh] +
mov edi [esi+0A0h] +
mov edx [eax+ebp] +
mov eax [esp+30h] +
mov eax [eax+3Ch] +
mov ecx [eax+1Ch] +
mov eax edx +
sub eax ecx +
cmp byte ptr [edi+4] 2 +
jnz loc_48E541  +
add ecx eax +
mov edi 1 +
cmp edx ecx +
cmovz edi [esp+34h] +
mov [esp+34h] edi +
jmp loc_48E541  +
mov edx [esp+34h] +
mov edi [esp+30h] +
test edx edx +
jnz loc_48E7B0  +
mov eax [esp+38h] +
test eax eax +
jnz loc_48E795  +
mov eax [esp+34h] +
or eax [esp+38h] +
jnz loc_48E782  +
mov ebp 1 +
mov edx [edi+24h] +
mov eax [edi+3Ch] +
mov [esp+14h] edx +
mov edi [edi+38h] +
mov dword ptr [esp+10h] 0 +
mov [esp-10h+arg_0] eax +
mov [esp+0] esi +
mov [esp+0Ch] edi +
mov edi [esp+3Ch] +
mov [esp-10h+arg_4] edi +
call sub_44DBC0  +
mov [esp+0] edi +
test eax eax +
mov eax 0 +
cmovz ebp eax +
call free  +
mov eax [ebx+0BCh] +
test eax eax +
jz loc_48E697  +
mov [esp+0] eax +
call free  +
add esp 5Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 5Ch +
mov ebp 1 +
pop ebx  +
mov eax ebp +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dword ptr [edi+24h] 8 +
jnz loc_48E7F8  +
lea ebx [esp+5Ch+var_14] +
mov eax ebx +
lea edx [esp+5Ch+var_C] +
mov byte ptr [eax] 0 +
add eax 1 +
cmp eax edx +
jnz loc_48E6C4  +
mov eax [esi+4] +
mov byte ptr [esp+5Ch+var_14] 2 +
mov ebp [eax+1B0h] +
mov eax [ebp+19Ch] +
test eax eax +
jz loc_48E7D9  +
mov ecx [esp+5Ch+arg_4] +
mov [esp+5Ch+var_5C] ecx +
call eax  +
mov [esp+49h] al +
mov eax [esi+4] +
mov edx [eax+30h] +
lea eax [esp+4Ch] +
mov [esp-10h+arg_0] eax +
mov eax [edi+3Ch] +
mov eax [eax+24h] +
sub eax 8 +
shr eax 3 +
mov [esp+0] eax +
call edx  +
mov edx [edi+24h] +
mov eax [edi+3Ch] +
mov [esp+14h] edx +
mov ecx [edi+38h] +
mov [esp-10h+arg_4] ebx +
mov [esp+0] esi +
mov dword ptr [esp+10h] 0 +
mov [esp+0Ch] ecx +
mov [esp-10h+arg_0] eax +
call sub_44DBC0  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
mov ebp eax +
mov eax ebp +
pop ebp  +
retn   +
mov eax [esp+3Ch] +
mov byte ptr [eax+2] 3 +
mov byte ptr [eax+3] 3Bh +
jmp loc_48E4AD  +
add ecx eax +
mov edi 1 +
cmp edx ecx +
cmovz edi [esp+34h] +
mov [esp+34h] edi +
jmp loc_48E57F  +
mov eax 8 +
jmp loc_48E402  +
mov dword ptr [esp+0] 11h +
xor ebp ebp +
call sub_44BAF0  +
jmp loc_48E646  +
mov eax [esp+74h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov dword ptr [esp+0] offset aP_eh_frame_hdr +
call eax  +
jmp loc_48E633  +
mov eax [esp+74h] +
mov eax [eax+18h] +
mov eax [eax+2Ch] +
mov dword ptr [esp+0] offset aP_eh_frame_h_0 +
call eax  +
jmp loc_48E627  +
mov eax [esp+5Ch+var_20] +
mov [esp+5Ch+var_5C] eax +
call free  +
jmp loc_48E697  +
mov [esp+5Ch+var_58] 87Fh +
mov [esp+5Ch+var_5C] offset a____Binutil_17 +
call sub_44BA40  +
mov eax [ebp+19Ch] +
jmp loc_48E6EA  +
mov [esp+5Ch+var_54] offset aWrite_compact_ +
mov [esp+5Ch+var_58] 877h +
mov [esp+5Ch+var_5C] offset a____Binutil_17 +
call sub_44BA70  +
lea esi [esi+0] +
lea edi [edi+0] +
mov eax [esp+5Ch+var_58] +
mov eax [eax+0A0h] +
cmp byte ptr [eax+4] 2 +
setz al  +
movzx eax al +
lea eax ds:4[eax*4] +
retn   +
***
mov eax 1 +
retn   +
***
mov eax [esp+14h] +
mov edx [eax+3Ch] +
mov edx [edx+1Ch] +
add edx [eax+38h] +
mov eax [esp+0Ch] +
mov eax [eax+1Ch] +
sub eax edx +
mov edx [esp+1Ch] +
sub eax [esp+18h] +
add eax [esp+10h] +
mov [edx] eax +
mov eax 1Bh +
retn   +
***
mov edx [eax] +
mov ecx eax +
test dl 1 +
jz loc_48E891  +
xor eax eax +
cmp dword ptr [ecx+4] 0 +
jnz locret_48E8AC  +
test dl 2 +
jz loc_48E8A4  +
mov ecx [ecx+8] +
test ecx ecx +
jz loc_48E8A4  +
xor eax eax +
cmp byte ptr [ecx] 0 +
jnz locret_48E8AC  +
xor eax eax +
and edx 4 +
setz al  +
retn   +
***
push ebx  +
push ebx  +
mov ebx eax +
sub esp 10h +
mov eax ecx +
jmp loc_48E929  +
add ebx 1 +
or ecx 0FFFFFF80h +
mov [ebx-1] cl +
mov ecx edx +
shr edx 7 +
and ecx 7Fh +
test edx edx +
jnz loc_48E920  +
mov [ebx] cl +
mov edx [eax] +
lea esi [ebx+1] +
test dl 1 +
jz loc_48E959  +
mov ecx [eax+4] +
mov edx esi +
mov ebx ecx +
shr ecx 7 +
and ebx 7Fh +
test ecx ecx +
jnz loc_48E967  +
lea esi [edx+1] +
mov [edx] bl +
mov edx [eax] +
and edx 2 +
jnz loc_48E980  +
add esp 10h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
or ebx 0FFFFFF80h +
add edx 1 +
mov [edx-1] bl +
mov ebx ecx +
shr ecx 7 +
and ebx 7Fh +
test ecx ecx +
jz loc_48E952  +
jmp loc_48E967  +
mov edi [eax+8] +
mov [esp+10h+var_10] edi +
call strlen  +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] esi +
lea ebx [eax+1] +
mov [esp+10h+var_8] ebx +
add esi ebx +
call memcpy  +
add esp 10h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push esi  +
push ebx  +
sub esp 1Ch +
test edx edx +
mov [esp+1Ch+var_14] edx +
jnz loc_48EAF0  +
mov edx [eax+4] +
mov edx [edx+1B0h] +
mov ecx [edx+184h] +
test ecx ecx +
mov [esp+1Ch+var_10] ecx +
jz loc_48EAFD  +
mov eax [eax+0A0h] +
mov ebx 2 +
xor edi edi +
mov ecx eax +
mov ebp eax +
imul eax [esp+1Ch+var_14] +
lea esi [ecx+eax+268h] +
nop   +
mov eax esi +
call sub_48E880  +
xor edx edx +
test eax eax +
jnz loc_48EA88  +
mov edx esi +
mov eax ebx +
call sub_48E8B0  +
mov edx eax +
add ebx 1 +
add edi edx +
add esi 0Ch +
cmp ebx 47h +
jnz loc_48EA70  +
mov ecx [esp+1Ch+var_14] +
mov ebx [ebp+ecx*4+8F8h] +
test ebx ebx +
jz loc_48EACA  +
lea esi [ebx+8] +
mov ebp [ebx+4] +
mov eax esi +
call sub_48E880  +
xor edx edx +
test eax eax +
jnz loc_48EAC2  +
mov edx esi +
mov eax ebp +
call sub_48E8B0  +
mov edx eax +
mov ebx [ebx] +
add edi edx +
test ebx ebx +
jnz loc_48EAA4  +
test edi edi +
jnz loc_48EAD8  +
mov edx [esp+1Ch+var_14] +
xor eax eax +
test edx edx +
jnz loc_48EAE8  +
mov eax [esp+1Ch+var_10] +
mov [esp+1Ch+var_1C] eax +
call strlen  +
lea eax [edi+eax+0Ah] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_10] offset aGnu_0 +
jmp loc_48EA4E  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
sub esp 4 +
mov ebx [esp+8+arg_0] +
mov eax ebx +
call sub_48EA20  +
mov edx 1 +
mov esi eax +
mov eax ebx +
call sub_48EA20  +
lea edx [eax+esi] +
xor eax eax +
lea ecx [edx+1] +
test edx edx +
cmovnz eax ecx +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+3Ch+arg_4] +
mov ebp [esp+3Ch+arg_0] +
mov [esp+3Ch+var_14] 1 +
mov [esp+3Ch+var_1C] 0 +
lea edx [eax+1] +
mov [esp+3Ch+var_10] edx +
mov byte ptr [eax] 41h +
mov edx [esp+3Ch+var_1C] +
mov eax ebp +
call sub_48EA20  +
test eax eax +
mov [esp+3Ch+var_18] eax +
jnz loc_48EBC0  +
mov eax [esp+3Ch+var_18] +
add [esp+3Ch+var_1C] 1 +
add [esp+3Ch+var_10] eax +
add [esp+3Ch+var_14] eax +
cmp [esp+3Ch+var_1C] 2 +
jnz loc_48EB79  +
mov eax [esp+3Ch+var_14] +
cmp eax [esp+3Ch+arg_8] +
jnz loc_48ECFA  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+var_1C] +
mov edi [ebp+4] +
test eax eax +
jz loc_48ECDE  +
mov ebx 4 +
mov esi offset aGnu_0 +
mov eax [edi+30h] +
mov edi [esp+3Ch+var_10] +
mov edx [esp+3Ch+var_18] +
mov [esp+3Ch+var_38] edi +
lea edi [edi+4] +
mov [esp+3Ch+var_3C] edx +
call eax  +
mov [esp-10h+arg_4] ebx +
mov [esp-10h+arg_0] esi +
lea esi [edi+ebx] +
mov [esp+0] edi +
call memcpy  +
mov byte ptr [esi] 1 +
mov eax [ebp+4] +
mov edx [eax+30h] +
lea eax [esi+1] +
mov [esp-10h+arg_0] eax +
mov eax [esp+24h] +
sub eax 4 +
sub eax ebx +
mov ebx 2 +
mov [esp+0] eax +
call edx  +
lea eax [esi+5] +
mov edx [ebp+0A0h] +
mov [esp+18h] eax +
imul eax [esp+20h] +
lea eax [edx+eax+250h] +
mov [esp+1Ch] eax +
mov eax [ebp+4] +
mov edi ebx +
mov eax [eax+1B0h] +
mov eax [eax+194h] +
test eax eax +
jz loc_48EC62  +
mov [esp+0] ebx +
call eax  +
mov edi eax +
mov ecx [esp+1Ch] +
lea eax [edi+edi*2] +
lea esi [ecx+eax*4] +
mov eax esi +
call sub_48E880  +
test eax eax +
jnz loc_48EC88  +
mov eax [esp+18h] +
mov ecx esi +
mov edx edi +
call sub_48E910  +
mov [esp+18h] eax +
add ebx 1 +
cmp ebx 47h +
jnz loc_48EC46  +
mov eax [ebp+0A0h] +
mov edx [esp+20h] +
mov ebx [eax+edx*4+8F8h] +
test ebx ebx +
jz loc_48EB8C  +
mov edi [esp+18h] +
mov [esp+50h] ebp +
lea ebp [ebx+8] +
mov esi [ebx+4] +
mov eax ebp +
call sub_48E880  +
test eax eax +
jnz loc_48ECCF  +
mov eax edi +
mov ecx ebp +
mov edx esi +
call sub_48E910  +
mov edi eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_48ECB1  +
mov ebp [esp+50h] +
jmp loc_48EB8C  +
mov eax [edi+1B0h] +
mov esi [eax+184h] +
mov [esp+3Ch+var_3C] esi +
call strlen  +
lea ebx [eax+1] +
jmp loc_48EBD9  +
mov [esp+3Ch+var_34] offset aBfd_elf_set_ob +
mov [esp+3Ch+var_38] 0E1h +
mov [esp+3Ch+var_3C] offset a____Binutil_25 +
call sub_44BA70  +
lea esi [esi+0] +
lea edi [edi+0] +
mov ecx [esp+3Ch+var_30] +
cmp ecx 46h +
jbe loc_48ED60  +
mov eax [esp+3Ch+var_38] +
mov edx [esp+3Ch+var_34] +
mov eax [eax+0A0h] +
mov eax [eax+edx*4+8F8h] +
test eax eax +
jnz loc_48ED52  +
jmp loc_48ED80  +
cmp ecx edx +
jb loc_48ED80  +
mov eax [eax] +
test eax eax +
lea esi [esi+0] +
jz locret_48ED83  +
mov edx [eax+4] +
cmp edx ecx +
jnz loc_48ED44  +
mov eax [eax+0Ch] +
retn   +
lea edx [ecx+ecx*2] +
mov ecx [esp+3Ch+var_38] +
imul eax [esp+3Ch+var_34] +
lea eax [eax+edx*4] +
add eax [ecx+0A0h] +
mov eax [eax+254h] +
retn   +
xor eax eax +
retn   +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov [esp+14h+var_14] ebx +
call strlen  +
lea esi [eax+1] +
mov eax [esp+14h+arg_0] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call sub_458A80  +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] eax +
call memcpy  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
mov ecx [esp+1Ch+arg_0] +
mov edx [esp+1Ch+arg_8] +
test eax eax +
jz loc_48EE20  +
cmp eax 1 +
jnz loc_48EE00  +
cmp edx 20h +
jz loc_48EE38  +
and edx 1 +
cmp edx 1 +
sbb eax eax +
add eax 2 +
add esp 1Ch +
retn   +
mov [esp+1Ch+var_14] offset a_bfd_elf_obj_a +
mov [esp+1Ch+var_18] 1A8h +
mov [esp+1Ch+var_1C] offset a____Binutil_25 +
call sub_44BA70  +
lea esi [esi+0] +
mov eax [ecx+4] +
mov eax [eax+1B0h] +
mov eax [eax+18Ch] +
mov [esp+1Ch+arg_0] edx +
add esp 1Ch +
jmp eax  +
mov eax 3 +
jmp loc_48EDF8  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_4] +
cmp ebx 46h +
ja loc_48EE90  +
imul eax ebp +
lea edx [ebx+ebx*2] +
lea esi [eax+edx*4+250h] +
add esi [edi+0A0h] +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] edi +
call sub_48EDD0  +
mov [esi] eax +
mov eax [esp+1Ch+arg_C] +
mov [esi+4] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx ebx +
mov edx ebp +
mov eax edi +
call sub_48E9B0  +
mov esi eax +
jmp loc_48EE6E  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_4] +
cmp ebx 46h +
ja loc_48EF00  +
imul eax ebp +
lea edx [ebx+ebx*2] +
lea esi [eax+edx*4+250h] +
add esi [edi+0A0h] +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] edi +
call sub_48EDD0  +
mov [esi] eax +
mov eax [esp+1Ch+arg_C] +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_18] eax +
call sub_48ED90  +
mov [esi+8] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx ebx +
mov edx ebp +
mov eax edi +
call sub_48E9B0  +
mov esi eax +
jmp loc_48EECE  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_4] +
cmp esi 46h +
ja loc_48EF72  +
imul eax ebp +
lea edx [esi+esi*2] +
lea ebx [eax+edx*4+250h] +
add ebx [edi+0A0h] +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] edi +
call sub_48EDD0  +
mov [ebx] eax +
mov eax [esp+1Ch+arg_C] +
mov [ebx+4] eax +
mov eax [esp+1Ch+arg_10] +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_18] eax +
call sub_48ED90  +
mov [ebx+8] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx esi +
mov edx ebp +
mov eax edi +
call sub_48E9B0  +
mov ebx eax +
jmp loc_48EF3E  +
***
jmp sub_48EF90  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_4] +
mov eax [eax+4] +
cmp dword ptr [eax+4] 5 +
jz loc_48EFB0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_48EFA8  +
mov [esp+2Ch+var_10] 0 +
mov eax [esp+2Ch+arg_0] +
imul edx [esp+2Ch+var_10] +
mov ebx [eax+0A0h] +
add edx 268h +
add ebx edx +
add edx [esi+0A0h] +
lea ebp [ebx+33Ch] +
mov edi edx +
jmp loc_48EFFA  +
add ebx 0Ch +
add edi 0Ch +
cmp ebx ebp +
jz loc_48F029  +
mov eax [ebx] +
mov [edi] eax +
mov eax [ebx+4] +
mov [edi+4] eax +
mov eax [ebx+8] +
test eax eax +
jz loc_48EFF0  +
cmp byte ptr [eax] 0 +
jz loc_48EFF0  +
mov [esp+2Ch+var_28] eax +
add ebx 0Ch +
add edi 0Ch +
mov [esp+2Ch+var_2C] esi +
call sub_48ED90  +
mov [edi-4] eax +
cmp ebx ebp +
jnz loc_48EFFA  +
mov eax [esp+2Ch+arg_0] +
mov ecx [esp+2Ch+var_10] +
mov eax [eax+0A0h] +
mov ebx [eax+ecx*4+8F8h] +
test ebx ebx +
jz loc_48F097  +
mov eax [ebx+8] +
and eax 3 +
cmp eax 2 +
jz loc_48F073  +
cmp eax 3 +
jz loc_48F0D0  +
cmp eax 1 +
jz loc_48F0B0  +
mov [esp+2Ch+var_24] offset a_bfd_elf_copy_ +
mov [esp+2Ch+var_28] 185h +
mov [esp+2Ch+var_2C] offset a____Binutil_25 +
call sub_44BA70  +
mov eax [ebx+4] +
mov edx [ebx+10h] +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_28] eax +
call sub_48EEA0  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_48F042  +
add [esp+2Ch+var_10] 1 +
cmp [esp+2Ch+var_10] 2 +
jz loc_48EFA8  +
jmp loc_48EFC1  +
mov eax [ebx+4] +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_28] eax +
call sub_48EE40  +
jmp loc_48F091  +
mov eax [ebx+4] +
mov ecx [ebx+10h] +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_2C] esi +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+var_1C] ecx +
mov [esp+2Ch+var_20] edx +
mov [esp+2Ch+var_28] eax +
call sub_48EF10  +
jmp loc_48F091  +
***
push esi  +
push ebx  +
sub esp 5Ch +
mov ebx [esp+5Ch+arg_4] +
mov eax [ebx+18h] +
test eax eax +
jnz loc_48F120  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+5Ch+var_5C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_48F112  +
mov eax [ebx+2Ch] +
mov edx [ebx+18h] +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_4C] 0 +
mov [esp+5Ch+var_58] eax +
mov eax [esp+5Ch+arg_0] +
mov [esp+5Ch+var_48] edx +
mov [esp+5Ch+var_54] ebp +
mov [esp+5Ch+var_5C] eax +
call sub_44DCC0  +
test eax eax +
jz loc_48F180  +
mov eax [esp+5Ch+arg_0] +
cmp byte ptr [ebp+0] 41h +
mov edx [ebx+18h] +
mov eax [eax+4] +
mov ecx [eax+1B0h] +
mov ecx [ecx+184h] +
mov [esp+5Ch+var_30] ecx +
jz loc_48F190  +
mov [esp+5Ch+var_5C] ebp +
call free  +
add esp 5Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi edx +
sub esi 1 +
mov [esp+5Ch+var_28] esi +
jz loc_48F180  +
add edx ebp +
lea ecx [edx-4] +
lea ebx [ebp+1] +
cmp ebx ecx +
mov [esp+5Ch+var_3C] edx +
mov [esp+5Ch+var_34] ecx +
jnb loc_48F180  +
mov [esp+5Ch+var_20] ebp +
mov ebp [esp+5Ch+arg_0] +
mov edi ebx +
mov eax [eax+28h] +
lea ebx [edi+4] +
mov [esp+5Ch+var_5C] edi +
call eax  +
test eax eax +
jz loc_48F478  +
mov ecx [esp+5Ch+var_28] +
mov [esp+5Ch+var_5C] ebx +
cmp ecx eax +
cmovbe eax ecx +
mov [esp+5Ch+var_24] eax +
sub eax 4 +
mov [esp+5Ch+var_58] eax +
mov esi eax +
mov [esp+5Ch+var_38] eax +
call sub_4BB590  +
lea edx [eax+1] +
cmp edx esi +
jnb loc_48F478  +
test edx edx +
jz loc_48F478  +
mov eax [esp+5Ch+var_30] +
test eax eax +
jz loc_48F440  +
mov [esp+5Ch+var_58] eax +
mov [esp+5Ch+var_5C] ebx +
mov [esp+5Ch+var_40] edx +
call strcmp  +
mov edx [esp+5Ch+var_40] +
test eax eax +
jnz loc_48F440  +
mov [esp+5Ch+var_40] 0 +
mov eax [esp+5Ch+var_38] +
lea edi [ebx+edx] +
sub eax edx +
mov [esp+5Ch+var_38] eax +
jz loc_48F360  +
cmp [esp+5Ch+var_3C] edi +
jbe loc_48F360  +
mov ebx edi +
mov eax [esp+5Ch+var_3C] +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_58] ebx +
mov [esp+5Ch+var_5C] ebp +
mov [esp+5Ch+var_4C] eax +
lea eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_54] eax +
call sub_45A740  +
mov edi [esp+5Ch+var_10] +
add edi ebx +
cmp edi [esp+5Ch+var_34] +
mov esi eax +
jnb loc_48F470  +
mov eax [ebp+4] +
mov eax [eax+28h] +
mov [esp+5Ch+var_5C] edi +
add edi 4 +
call eax  +
test eax eax +
jz loc_48F360  +
mov ecx [esp+5Ch+var_38] +
mov ebx 0FFFFFFFCh +
cmp eax ecx +
cmova eax ecx +
sub ebx [esp+5Ch+var_10] +
mov [esp+5Ch+var_2C] eax +
add ebx eax +
add ebx edi +
cmp esi 1 +
jnz loc_48F342  +
mov eax [esp+5Ch+var_3C] +
cmp ebx eax +
cmova ebx eax +
cmp ebx edi +
jbe loc_48F340  +
lea eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_58] edi +
mov [esp+5Ch+var_4C] ebx +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_5C] ebp +
call sub_45A740  +
mov [esp+5Ch+var_5C] ebp +
add edi [esp+5Ch+var_10] +
mov [esp+5Ch+var_54] eax +
mov esi eax +
mov eax [esp+5Ch+var_40] +
mov [esp+5Ch+var_58] eax +
call sub_48EDD0  +
and eax 3 +
cmp eax 2 +
jz loc_48F412  +
cmp eax 3 +
jz loc_48F3C1  +
cmp eax 1 +
jz loc_48F380  +
mov [esp+5Ch+var_54] offset a_bfd_elf_parse +
mov [esp+5Ch+var_58] 21Fh +
mov [esp+5Ch+var_5C] offset a____Binutil_25 +
call sub_44BA70  +
lea esi [esi+0] +
mov ebx edi +
mov eax [esp+5Ch+var_2C] +
sub [esp+5Ch+var_38] eax +
cmp ebx [esp+5Ch+var_3C] +
jnb loc_48F35C  +
mov eax [esp+5Ch+var_38] +
test eax eax +
jnz loc_48F250  +
mov edi ebx +
nop   +
mov eax [esp+5Ch+var_24] +
sub [esp+5Ch+var_28] eax +
jz loc_48F478  +
cmp edi [esp+5Ch+var_34] +
jnb loc_48F478  +
mov eax [ebp+4] +
jmp loc_48F1B9  +
lea eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_58] edi +
mov [esp+5Ch+var_4C] ebx +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_5C] ebp +
call sub_45A740  +
mov [esp+5Ch+var_54] esi +
mov [esp+5Ch+var_5C] ebp +
add edi [esp+5Ch+var_10] +
mov [esp+5Ch+var_50] eax +
mov eax [esp+5Ch+var_40] +
mov [esp+5Ch+var_58] eax +
call sub_48EE40  +
jmp loc_48F2C8  +
lea eax [esp+5Ch+var_10] +
mov [esp+5Ch+var_58] edi +
mov [esp+5Ch+var_4C] ebx +
mov [esp+5Ch+var_50] 0 +
mov [esp+5Ch+var_54] eax +
mov [esp+5Ch+var_5C] ebp +
call sub_45A740  +
add edi [esp+5Ch+var_10] +
mov [esp+5Ch+var_54] esi +
mov [esp+5Ch+var_5C] ebp +
mov [esp+5Ch+var_4C] edi +
mov [esp+5Ch+var_50] eax +
mov eax [esp+5Ch+var_40] +
mov [esp+5Ch+var_58] eax +
call sub_48EF10  +
mov [esp+5Ch+var_5C] edi +
call strlen  +
lea edi [edi+eax+1] +
jmp loc_48F2C8  +
mov eax [esp+5Ch+var_40] +
mov [esp+5Ch+var_50] edi +
mov [esp+5Ch+var_54] esi +
mov [esp+5Ch+var_5C] ebp +
mov [esp+5Ch+var_58] eax +
call sub_48EEA0  +
mov [esp+5Ch+var_5C] edi +
call strlen  +
lea edi [edi+eax+1] +
jmp loc_48F2C8  +
mov edi offset aGnu_0 +
mov ecx 4 +
mov esi ebx +
cmps   +
jnz loc_48F460  +
mov [esp+5Ch+var_40] 1 +
jmp loc_48F231  +
mov edi [esp+5Ch+var_38] +
add edi ebx +
jmp loc_48F360  +
add edi 4 +
jmp loc_48F360  +
mov ebp [esp+5Ch+var_20] +
jmp loc_48F180  +
***
jmp loc_48F490  +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+50h] +
mov dword ptr [esp+24h] 2 +
mov eax [eax+0A0h] +
lea ebx [eax+3D0h] +
mov eax [esp+54h] +
mov ebp [eax+0A0h] +
add ebp 3D0h +
mov edx [ebx+4] +
test edx edx +
jnz loc_48F4F1  +
mov ecx [ebp+4] +
test ecx ecx +
jnz loc_48F59A  +
add ebx 354h +
add ebp 354h +
sub dword ptr [esp+24h] 1 +
jnz loc_48F4BF  +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [ebx+8] +
mov edi offset aGnu_0 +
mov ecx 4 +
mov [esp+28h] esi +
cmps   +
jnz loc_48F571  +
mov ecx [ebp+4] +
cmp edx ecx +
jnz loc_48F595  +
mov esi [ebp+8] +
mov eax [esp+28h] +
mov [esp+2Ch] edx +
mov [esp+4] esi +
mov [esp] eax +
call strcmp  +
mov edx [esp+2Ch] +
test eax eax +
jz loc_48F4D1  +
mov ecx edx +
mov edi [esp+28h] +
mov eax offset unk_505423 +
test esi esi +
cmovz esi eax +
mov [esp+14h] esi +
mov [esp+10h] ecx +
test edi edi +
cmovnz eax edi +
mov [esp+0Ch] eax +
mov eax [esp+50h] +
mov [esp+8] edx +
mov dword ptr [esp] offset aErrorBObjectTa +
mov [esp+4] eax +
call off_4BFA04  +
xor eax eax +
jmp loc_48F4E9  +
***
mov eax [esp+28h] +
mov dword ptr [esp] offset aErrorBObjectHa +
mov [esp+8] eax +
mov eax [esp+50h] +
mov [esp+4] eax +
call off_4BFA04  +
xor eax eax +
jmp loc_48F4E9  +
***
mov esi [ebp+8] +
jmp loc_48F532  +
***
mov eax [ebx+8] +
mov esi [ebp+8] +
mov [esp+28h] eax +
jmp loc_48F532  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+30h] +
mov eax [esp+34h] +
mov edx [esp+38h] +
mov edi [esi+0A0h] +
mov ebx [eax+0A0h] +
lea ecx [edx+edx*2] +
shl ecx 2 +
add edi 250h +
lea ebx [ebx+ecx+250h] +
add edi ecx +
mov ecx [ebx+4] +
test ecx ecx +
jnz loc_48F5F2  +
mov ebp [ebx+8] +
test ebp ebp +
jz loc_48F662  +
mov ecx [eax+4] +
mov ecx [ecx+1B0h] +
mov ecx [ecx+198h] +
mov [esp+4] edx +
mov [esp] eax +
call ecx  +
mov esi eax +
mov eax [ebx+4] +
cmp [edi+4] eax +
jz loc_48F630  +
mov dword ptr [ebx+4] 0 +
mov dword ptr [ebx+8] 0 +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ebp [ebx+8] +
mov eax [edi+8] +
test ebp ebp +
setz cl  +
test eax eax +
mov edi ecx +
setz cl  +
mov edx edi +
cmp dl cl +
jnz loc_48F614  +
test eax eax +
jz loc_48F622  +
test ebp ebp +
jz loc_48F622  +
mov [esp+4] ebp +
mov [esp] eax +
call strcmp  +
test eax eax +
jnz loc_48F614  +
jmp loc_48F622  +
***
mov eax esi +
mov esi [edi+4] +
test esi esi +
jnz loc_48F5F2  +
mov ecx [edi+8] +
mov esi 1 +
test ecx ecx +
jnz loc_48F5F2  +
jmp loc_48F622  +
***
push ebp  +
mov ebp 1 +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+30h] +
mov eax [eax+0A0h] +
mov esi [eax+8F8h] +
mov eax [esp+34h] +
mov ecx [eax+0A0h] +
mov ebx [ecx+8F8h] +
lea esi [esi+0] +
test esi esi +
setnz al  +
test ebx ebx +
jz loc_48F70A  +
test esi esi +
jz loc_48F720  +
mov eax [esi+4] +
mov edi [ebx+4] +
cmp eax edi +
ja loc_48F723  +
cmp edi eax +
jbe loc_48F731  +
mov edi eax +
mov esi [esi] +
mov eax [esp+30h] +
test ebp ebp +
jz loc_48F6B0  +
mov edx [eax+4] +
mov [esp+8] ecx +
mov edx [edx+1B0h] +
mov edx [edx+198h] +
mov [esp+4] edi +
mov [esp] eax +
call edx  +
mov ecx [esp+8] +
test eax eax +
setnz al  +
test esi esi +
movzx eax al +
mov ebp eax +
setnz al  +
test ebx ebx +
jnz loc_48F6B9  +
test al al +
jz loc_48F786  +
mov eax [esi+4] +
test ebx ebx +
mov edi eax +
jz loc_48F6CD  +
mov edi [ebx+4] +
jmp loc_48F6C7  +
***
mov edi [ebx+4] +
mov ebx [ebx] +
mov eax [esp+34h] +
mov [ecx+8F8h] ebx +
jmp loc_48F6D3  +
***
mov eax [ebx+0Ch] +
cmp [esi+0Ch] eax +
jnz loc_48F723  +
mov edx [ebx+10h] +
mov eax [esi+10h] +
test edx edx +
setz byte ptr [esp+8]  +
test eax eax +
mov [esp+0Ch] edx +
setz dl  +
cmp [esp+8] dl +
jnz loc_48F723  +
test eax eax +
jz loc_48F779  +
mov edx [esp+0Ch] +
test edx edx +
jz loc_48F779  +
mov [esp+4] edx +
mov [esp] eax +
mov [esp+8] ecx +
call strcmp  +
mov ecx [esp+8] +
test eax eax +
jnz loc_48F723  +
mov ebx [ebx] +
mov esi [esi] +
mov eax [esp+34h] +
jmp loc_48F6D3  +
***
add esp 1Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov edi [esp+20h] +
mov esi [esp+24h] +
mov ebx [esp+2Ch] +
mov eax [edi+4] +
mov edx [eax+1B0h] +
mov eax [eax+4Ch] +
movzx edx byte ptr [edx+1ACh] +
mov [esp] esi +
shr dl 7 +
mov [esp+0Ch] edx +
call eax  +
mov edx [esp+0Ch] +
test dl dl +
mov [ebx+8] eax +
mov eax [edi+4] +
jz loc_48F830  +
mov eax [eax+50h] +
lea edx [esi+4] +
mov [esp] edx +
call eax  +
mov [ebx] eax +
mov eax [edi+4] +
lea edx [esi+8] +
add esi 0Eh +
mov eax [eax+4Ch] +
mov [esp] edx +
call eax  +
mov [ebx+4] eax +
movzx eax byte ptr [esi-2] +
mov [ebx+0Ch] al +
movzx eax byte ptr [esi-1] +
mov [ebx+0Dh] al +
mov eax [edi+4] +
mov eax [eax+58h] +
mov [esp] esi +
call eax  +
cmp eax 0FFFFh +
mov [ebx+10h] eax +
jz loc_48F850  +
cmp eax 0FEFFh +
ja loc_48F840  +
mov byte ptr [ebx+0Eh] 0 +
mov eax 1 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax [eax+4Ch] +
lea edx [esi+4] +
mov [esp] edx +
call eax  +
mov [ebx] eax +
jmp loc_48F7DC  +
***
sub eax 10000h +
mov [ebx+10h] eax +
jmp loc_48F81A  +
***
mov edx [esp+28h] +
xor ax ax +
test edx edx +
jz loc_48F823  +
mov eax [edi+4] +
mov ecx [esp+28h] +
mov eax [eax+4Ch] +
mov [esp] ecx +
call eax  +
mov [ebx+10h] eax +
jmp loc_48F81A  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov edi [esp+20h] +
mov esi [esp+24h] +
mov ebx [esp+28h] +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp] esi +
add esi 4 +
call eax  +
mov [ebx] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp] esi +
call eax  +
mov dword ptr [ebx+8] 0 +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] esi +
call eax  +
lea edx [esi+4] +
add esi 8 +
mov [ebx] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
mov [ebx+4] eax +
mov eax [edi+4] +
mov eax [eax+50h] +
mov [esp+10h+var_10] esi +
call eax  +
mov [ebx+8] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov edx [esi] +
mov eax [eax+54h] +
mov [esp+10h+var_C] ebx +
add ebx 4 +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
mov edx [esi+4] +
mov eax [eax+54h] +
mov [esp+10h+arg_4] ebx +
mov [esp+10h+arg_0] edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov edx [esi] +
mov eax [eax+54h] +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] edx +
call eax  +
mov eax [edi+4] +
lea ecx [ebx+4] +
mov edx [esi+4] +
add ebx 8 +
mov eax [eax+54h] +
mov [esp+10h+var_10] edx +
mov [esp+10h+var_C] ecx +
call eax  +
mov eax [edi+4] +
mov edx [esi+8] +
mov eax [eax+54h] +
mov [esp+10h+arg_4] ebx +
mov [esp+10h+arg_0] edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov edi [esp+20h] +
mov esi [esp+24h] +
mov ebx [esp+28h] +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp] esi +
add esi 4 +
call eax  +
mov [ebx] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp] esi +
call eax  +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov edi [esp+20h] +
mov esi [esp+24h] +
mov ebx [esp+28h] +
mov eax [edi+4] +
mov edx [esi] +
mov eax [eax+54h] +
mov [esp+4] ebx +
add ebx 4 +
mov [esp] edx +
call eax  +
mov eax [edi+4] +
mov edx [esi+4] +
mov eax [eax+54h] +
mov [esp+24h] ebx +
mov [esp+20h] edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+30h] +
mov ebx [esp+34h] +
mov esi [esp+38h] +
mov ebp [esp+3Ch] +
mov eax [edi+4] +
mov edx [ebx+8] +
mov eax [eax+54h] +
mov [esp] edx +
mov [esp+4] esi +
call eax  +
mov eax [edi+4] +
lea ecx [esi+4] +
mov edx [ebx] +
mov eax [eax+54h] +
mov [esp+4] ecx +
mov [esp] edx +
call eax  +
mov eax [edi+4] +
lea ecx [esi+8] +
mov edx [ebx+4] +
mov eax [eax+54h] +
mov [esp] edx +
mov [esp+4] ecx +
call eax  +
movzx eax byte ptr [ebx+0Ch] +
mov [esi+0Ch] al +
movzx eax byte ptr [ebx+0Dh] +
mov [esi+0Dh] al +
mov eax [ebx+10h] +
lea edx [eax-0FF00h] +
cmp edx 0FFFEFFFFh +
ja loc_48FAA9  +
test ebp ebp +
jz loc_48FAC3  +
mov edx [edi+4] +
mov edx [edx+54h] +
mov [esp] eax +
mov [esp+4] ebp +
call edx  +
mov eax 0FFFFh +
mov edx [edi+4] +
add esi 0Eh +
mov edx [edx+60h] +
mov [esp+34h] esi +
mov [esp+30h] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp edx  +
***
mov dword ptr [esp+8] offset aBfd_elf32_swap +
mov dword ptr [esp+4] 0E0h +
mov dword ptr [esp] offset a____Binutil_31 +
call sub_44BA70  +
nop   +
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 5Ch +
mov edx [esp+78h] +
mov ebp [esp+70h] +
test edx edx +
mov eax [ebp+0A0h] +
jnz loc_48FBD0  +
add eax 48h +
xor ebx ebx +
mov [esp+24h] eax +
mov eax [ebp+4] +
mov eax [eax+1B0h] +
mov [esp+2Ch] eax +
mov eax [esp+24h] +
mov eax [eax+18h] +
mov [esp+28h] eax +
shr dword ptr [esp+28h] 4 +
mov esi [esp+28h] +
test esi esi +
jnz loc_48FC50  +
xor ebx ebx +
xor edi edi +
mov dword ptr [esp+38h] 0 +
mov dword ptr [esp+30h] 0 +
***
mov eax [esp+arg_28] +
mov eax [eax+38h] +
test eax eax +
jz loc_48FB5F  +
mov edx [esp+arg_24] +
mov [esp+arg_0] edi +
mov [esp+0] ebp +
mov [esp+arg_4] edx +
call eax  +
mov eax [esp+arg_70] +
test eax eax +
jz loc_48FB98  +
test ebx ebx +
lea eax [ebx-1] +
jle loc_48FB8E  +
mov edx [esp+arg_70] +
add edx 4 +
sub eax 1 +
mov [edx-4] edi +
add edi 34h +
cmp eax 0FFFFFFFFh +
jnz loc_48FB72  +
mov eax [esp+arg_70] +
lea eax [eax+ebx*4] +
mov [esp+arg_70] eax +
mov eax [esp+arg_70] +
mov dword ptr [eax] 0 +
mov eax [esp+arg_34] +
test eax eax +
jz loc_48FBA8  +
mov [esp+0] eax +
call free  +
mov eax [esp+arg_2C] +
test eax eax +
jz loc_48FBC1  +
mov edx [esp+arg_20] +
cmp [edx+30h] eax +
jz loc_48FBC1  +
mov [esp+0] eax +
call free  +
add esp 5Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [eax+914h] +
xor ebx ebx +
mov edi [eax+918h] +
lea ecx [eax+160h] +
lea edx [eax+0F0h] +
mov [esp+24h] edx +
test esi esi +
cmovnz ebx ecx +
test edi edi +
jnz loc_48FC40  +
mov edx [eax+91Ch] +
test edx edx +
jz loc_48FB06  +
mov edi [eax+244h] +
test edi edi +
jnz loc_48FB06  +
mov dword ptr [esp+4] 0 +
mov [esp] ebp +
call sub_47F1A0  +
test eax eax +
jnz loc_48FB06  +
nop   +
lea esi [esi+0] +
***
mov ebx 0FFFFFFFFh +
add esp 5Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [eax+240h] +
test ecx ecx +
jnz loc_48FBF7  +
jmp loc_48FC13  +
***
mov esi [esp+28h] +
mov eax [esp+24h] +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] esi +
mov [esp+4] eax +
mov [esp] ebp +
call sub_475A20  +
test eax eax +
mov [esp+30h] eax +
jz loc_48FC30  +
imul eax esi +
mov [esp] ebp +
mov [esp+4] eax +
call sub_458B60  +
test eax eax +
mov edi eax +
jz loc_48FE1C  +
test ebx ebx +
jz loc_48FCD6  +
mov eax [ebx+18h] +
shr eax 1 +
cmp eax esi +
jz loc_48FDB5  +
mov ecx [ebp+0] +
mov [esp+0Ch] esi +
mov [esp+8] eax +
mov dword ptr [esp] offset aSVersionCountL +
mov [esp+4] ecx +
call off_4BFA04  +
mov dword ptr [esp+38h] 0 +
xor ecx ecx +
mov eax [esp+28h] +
mov edx [esp+30h] +
lea eax [eax+eax*4] +
lea eax [edx+eax*4] +
lea esi [edx+14h] +
cmp eax esi +
mov [esp+34h] eax +
jbe loc_490031  +
mov ebx edi +
mov [esp+3Ch] edi +
mov edi ecx +
***
mov ecx [esi] +
mov eax [esp+24h] +
mov [ebx+18h] ecx +
mov ecx [esi+4] +
mov [ebx+1Ch] ecx +
mov ecx [esi+8] +
mov [ebx+20h] ecx +
mov ecx [esi+0Ch] +
mov [ebx+24h] ecx +
mov ecx [esi+10h] +
mov [ebx] ebp +
mov [ebx+28h] ecx +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] esi +
mov [esp+4] eax +
mov [esp-0D8h+arg_D4] ebp +
call sub_475D70  +
mov [ebx+4] eax +
mov eax [esi] +
mov [ebx+8] eax +
mov eax [esi+10h] +
test eax eax +
jnz loc_48FF20  +
mov dword ptr [ebx+10h] offset off_4BFAE8 +
mov eax [ebp+28h] +
shr eax 5 +
test al 42h +
jz loc_48FD6D  +
mov eax [ebx+10h] +
mov eax [eax+1Ch] +
sub [ebx+8] eax +
movzx eax byte ptr [esi+0Ch] +
mov ecx eax +
shr cl 4 +
cmp cl 1 +
jz loc_48FF42  +
jb loc_48FF73  +
cmp cl 2 +
jz loc_48FF63  +
cmp cl 0Ah +
jnz loc_48FDA0  +
or dword ptr [ebx+0Ch] 800000h +
movzx eax byte ptr [esi+0Ch] +
nop   +
and eax 0Fh +
cmp al 0Ah +
ja sub_48FE47  +
movzx eax al +
jmp ds:off_5055A4[eax*4]  +
***
mov eax [ebx+10h] +
mov edx [ebx+14h] +
mov dword ptr [esp+0Ch] 0 +
mov [esp] ebp +
mov [esp+4] eax +
mov [esp+8] edx +
call sub_46FCE0  +
test eax eax +
jnz loc_48FE1C  +
mov eax [ebx+18h] +
mov [esp] eax +
call sub_459B80  +
test eax eax +
mov edx eax +
mov [esp+38h] eax +
jz loc_48FFDA  +
mov eax [ebx+18h] +
mov [esp+8] ebp +
mov [esp] edx +
mov [esp+4] eax +
call sub_46FAD0  +
cmp eax [ebx+18h] +
jz loc_48FFCC  +
***
mov eax [esp+38h] +
test eax eax +
jz loc_48FE1C  +
mov [esp-0D8h+arg_D4] eax +
call free  +
mov edx [esp+24h] +
mov eax [esp+30h] +
cmp [edx+30h] eax +
jz loc_48FC30  +
mov [esp-0D8h+arg_D4] eax +
mov ebx 0FFFFFFFFh +
call free  +
jmp loc_48FC35  +
***
or dword ptr [ebx+0Ch] 400000h +
***
mov edx [esp+78h] +
or dword ptr [ebx+0Ch] 100000h +
jmp sub_48FE47  +
***
or dword ptr [ebx+0Ch] 80000h +
jmp sub_48FE47  +
***
or dword ptr [ebx+0Ch] 10000h +
jmp sub_48FE47  +
***
or dword ptr [ebx+0Ch] 40000h +
jmp sub_48FE47  +
***
or dword ptr [ebx+0Ch] 4004h +
jmp sub_48FE47  +
***
or dword ptr [ebx+0Ch] 104h +
jmp sub_48FE47  +
***
or dword ptr [ebx+0Ch] 8 +
jmp sub_48FE47  +
***
cmp eax 0FFFFFFF1h +
jz loc_48FFA0  +
cmp eax 0FFFFFFF2h +
jnz loc_48FF80  +
mov dword ptr [ebx+10h] offset off_4BFA40 +
test byte ptr [ebp+2Ah] 20h +
jnz loc_48FFB0  +
mov eax [esi+4] +
mov [ebx+8] eax +
jmp loc_48FD5A  +
mov ecx [esi+10h] +
cmp ecx 0FFFFFFF2h +
jz loc_48FDA0  +
test ecx ecx +
jz loc_48FDA0  +
or dword ptr [ebx+0Ch] 2 +
movzx eax byte ptr [esi+0Ch] +
jmp loc_48FDA0  +
or dword ptr [ebx+0Ch] 80h +
movzx eax byte ptr [esi+0Ch] +
jmp loc_48FDA0  +
or dword ptr [ebx+0Ch] 1 +
movzx eax byte ptr [esi+0Ch] +
jmp loc_48FDA0  +
mov [esp+4] eax +
mov [esp-0D8h+arg_D4] ebp +
call sub_478480  +
mov edx offset off_4BFB90 +
test eax eax +
cmovz eax edx +
mov [ebx+10h] eax +
jmp loc_48FD5A  +
***
mov dword ptr [ebx+10h] offset off_4BFB90 +
jmp loc_48FD5A  +
***
mov dword ptr [esp+4] offset aCommon_2 +
mov [esp-0D8h+arg_D4] ebp +
call sub_44D4B0  +
test eax eax +
jz loc_490010  +
mov [ebx+10h] eax +
jmp loc_48FF37  +
***
mov eax [esp+38h] +
add eax 2 +
mov ecx eax +
jmp loc_48FCE0  +
***
mov ecx [ebx+18h] +
test ecx ecx +
jnz loc_48FE1C  +
mov [esp+8] ebp +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp] 0 +
call sub_46FAD0  +
xor ecx ecx +
cmp eax [ebx+18h] +
jnz loc_48FE1C  +
jmp loc_48FCE0  +
***
mov dword ptr [esp+8] 209001h +
mov dword ptr [esp+4] offset aCommon_2 +
mov [esp-0D8h+arg_D4] ebp +
call sub_44D970  +
test eax eax +
jnz loc_48FFC4  +
jmp loc_48FE0C  +
***
xor ebx ebx +
jmp loc_48FB43  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 10h +
mov eax [eax] +
mov edx [eax+1B0h] +
mov eax [eax+4Ch] +
movzx edx byte ptr [edx+1ACh] +
mov [esp+18h+var_18] esi +
shr dl 7 +
mov [esp+18h+var_C] edx +
call eax  +
lea ecx [esi+4] +
mov [ebx] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] ecx +
call eax  +
lea ecx [esi+8] +
mov [ebx+4] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] ecx +
call eax  +
mov edx [esp+18h+var_C] +
test dl dl +
mov [ebx+8] eax +
mov eax [edi] +
jnz loc_490124  +
mov eax [eax+4Ch] +
lea edx [esi+0Ch] +
mov [esp+18h+var_18] edx +
call eax  +
mov [ebx+0Ch] eax +
mov eax [edi] +
lea edx [esi+10h] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+14h] +
mov dword ptr [ebx+14h] 0 +
mov [ebx+10h] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+18h] +
mov [ebx+18h] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+1Ch] +
mov [ebx+1Ch] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+20h] +
add esi 24h +
mov [ebx+20h] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
mov [ebx+24h] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] esi +
call eax  +
mov dword ptr [ebx+2Ch] 0 +
mov dword ptr [ebx+30h] 0 +
mov [ebx+28h] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax+50h] +
lea edx [esi+0Ch] +
mov [esp+18h+var_18] edx +
call eax  +
mov [ebx+0Ch] eax +
jmp loc_4900A8  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx ecx +
sub esp 10h +
mov eax [eax] +
mov edx [edx] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea ecx [ebx+4] +
mov edx [edi+4] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea ecx [ebx+8] +
mov edx [edi+8] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea ecx [ebx+0Ch] +
mov edx [edi+0Ch] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea edx [ebx+10h] +
mov eax [eax+54h] +
mov [esp+18h+var_14] edx +
mov edx [edi+10h] +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea ecx [ebx+14h] +
mov edx [edi+18h] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea ecx [ebx+18h] +
mov edx [edi+1Ch] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea ecx [ebx+1Ch] +
mov edx [edi+20h] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
lea ecx [ebx+20h] +
mov edx [edi+24h] +
add ebx 24h +
mov eax [eax+54h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] edx +
call eax  +
mov eax [esi] +
mov edx [edi+28h] +
mov eax [eax+54h] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] edx +
call eax  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 10h +
mov eax [eax] +
mov eax [eax+1B0h] +
movzx edx byte ptr [eax+1ACh] +
mov eax [esi] +
shr dl 7 +
mov [ecx] eax +
mov eax [esi+4] +
mov [esp+18h+var_C] edx +
mov [ecx+4] eax +
mov eax [esi+8] +
mov [ecx+8] eax +
mov eax [esi+0Ch] +
mov [ecx+0Ch] eax +
mov eax [edi] +
lea ecx [esi+10h] +
mov eax [eax+58h] +
mov [esp+18h+var_18] ecx +
call eax  +
lea ecx [esi+12h] +
mov [ebx+24h] ax +
mov eax [edi] +
mov eax [eax+58h] +
mov [esp+18h+var_18] ecx +
call eax  +
lea ecx [esi+14h] +
mov [ebx+26h] ax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] ecx +
call eax  +
mov edx [esp+18h+var_C] +
test dl dl +
mov [ebx+1Ch] eax +
mov eax [edi] +
jnz loc_490340  +
mov eax [eax+4Ch] +
lea edx [esi+18h] +
mov [esp+18h+var_18] edx +
call eax  +
mov [ebx+10h] eax +
mov eax [edi] +
lea edx [esi+1Ch] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+20h] +
mov [ebx+14h] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+24h] +
mov [ebx+18h] eax +
mov eax [edi] +
mov eax [eax+4Ch] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+28h] +
mov [ebx+20h] eax +
mov eax [edi] +
mov eax [eax+58h] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+2Ah] +
mov [ebx+28h] eax +
mov eax [edi] +
mov eax [eax+58h] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+2Ch] +
mov [ebx+2Ch] eax +
mov eax [edi] +
mov eax [eax+58h] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+2Eh] +
mov [ebx+30h] eax +
mov eax [edi] +
mov eax [eax+58h] +
mov [esp+18h+var_18] edx +
call eax  +
lea edx [esi+30h] +
add esi 32h +
mov [ebx+34h] eax +
mov eax [edi] +
mov eax [eax+58h] +
mov [esp+18h+var_18] edx +
call eax  +
mov [ebx+38h] eax +
mov eax [edi] +
mov eax [eax+58h] +
mov [esp+18h+var_18] esi +
call eax  +
mov [ebx+3Ch] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax+50h] +
lea edx [esi+18h] +
mov [esp+18h+var_18] edx +
call eax  +
mov [ebx+10h] eax +
jmp loc_4902A6  +
***
mov edi eax +
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 1Ch +
mov eax [eax] +
mov edx [edx] +
lea ecx [ecx+10h] +
lea ebp [ebx+14h] +
mov eax [eax+1B0h] +
movzx eax byte ptr [eax+1ACh] +
mov [ecx-10h] edx +
mov edx [esi+4] +
shr al 7 +
mov [ecx-0Ch] edx +
mov edx [esi+8] +
mov [esp+24h+var_18] eax +
mov [ecx-8] edx +
mov edx [esi+0Ch] +
mov [ecx-4] edx +
mov edx [edi] +
mov edx [edx+60h] +
mov [esp+24h+var_20] ecx +
movzx ecx word ptr [esi+24h] +
mov [esp+24h+var_24] ecx +
call edx  +
mov edx [edi] +
lea ecx [ebx+12h] +
mov edx [edx+60h] +
mov [esp+24h+var_20] ecx +
movzx ecx word ptr [esi+26h] +
mov [esp+24h+var_24] ecx +
call edx  +
mov edx [edi] +
mov ecx [esi+1Ch] +
mov edx [edx+54h] +
mov [esp+24h+var_20] ebp +
mov ebp 0FFFFh +
mov [esp+24h+var_24] ecx +
call edx  +
mov eax [edi] +
lea ecx [ebx+18h] +
mov edx [esi+10h] +
mov eax [eax+54h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] edx +
call eax  +
mov eax [edi] +
lea ecx [ebx+1Ch] +
mov edx [esi+14h] +
mov eax [eax+54h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] edx +
call eax  +
mov eax [edi] +
lea ecx [ebx+20h] +
mov edx [esi+18h] +
mov eax [eax+54h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] edx +
call eax  +
mov eax [edi] +
lea ecx [ebx+24h] +
mov edx [esi+20h] +
mov eax [eax+54h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] edx +
call eax  +
mov eax [edi] +
lea ecx [ebx+28h] +
mov edx [esi+28h] +
mov eax [eax+60h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] edx +
call eax  +
mov eax [edi] +
lea ecx [ebx+2Ah] +
mov edx [esi+2Ch] +
mov eax [eax+60h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] edx +
call eax  +
mov eax [esi+30h] +
lea ecx [ebx+2Ch] +
mov edx [edi] +
cmp eax 0FFFFh +
cmova eax ebp +
mov edx [edx+60h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] eax +
call edx  +
mov eax [edi] +
lea ecx [ebx+2Eh] +
mov edx [esi+34h] +
mov eax [eax+60h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] edx +
call eax  +
mov eax [esi+38h] +
mov edx 0 +
lea ecx [ebx+30h] +
cmp eax 0FF00h +
cmovnb eax edx +
mov edx [edi] +
mov edx [edx+60h] +
mov [esp+24h+var_20] ecx +
mov [esp+24h+var_24] eax +
call edx  +
mov eax [esi+3Ch] +
mov edx [edi] +
cmp eax 0FF00h +
cmovnb eax ebp +
mov edx [edx+60h] +
add ebx 32h +
mov [esp+24h+var_20] ebx +
mov [esp+24h+var_24] eax +
call edx  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 6Ch +
mov eax [esp+80h] +
lea ecx [esp+2Ch] +
mov esi [eax+0A0h] +
add eax 4 +
mov [esp+14h] eax +
mov edx esi +
mov ebp [esi+40h] +
call sub_490360  +
mov eax [esp+80h] +
mov dword ptr [esp+0Ch] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp+8] 0 +
mov [esp] eax +
call sub_46FCE0  +
test eax eax +
jz loc_490530  +
xor eax eax +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+80h] +
mov dword ptr [esp+4] 34h +
mov [esp+8] eax +
lea eax [esp+2Ch] +
mov [esp] eax +
call sub_46FB80  +
cmp eax 34h +
jnz loc_490524  +
mov eax [esi+30h] +
cmp eax 0FFFEh +
jbe loc_490564  +
mov edx [ebp+0] +
mov [edx+20h] eax +
mov eax [esi+38h] +
cmp eax 0FEFFh +
jbe loc_490574  +
mov edx [ebp+0] +
mov [edx+18h] eax +
mov edx [esi+3Ch] +
cmp edx 0FEFFh +
jbe loc_490585  +
mov ecx [ebp+0] +
mov [ecx+1Ch] edx +
lea eax [eax+eax*4] +
shl eax 3 +
mov [esp+1Ch] eax +
mov [esp+4] eax +
mov eax [esp+80h] +
mov [esp] eax +
call sub_458A80  +
test eax eax +
mov [esp+18h] eax +
jz loc_490524  +
mov edi eax +
mov eax [esi+38h] +
xor ebx ebx +
test eax eax +
jz loc_4905DA  +
lea esi [esi+0] +
mov edx [ebp+ebx*4+0] +
mov ecx edi +
add ebx 1 +
mov eax [esp+14h] +
add edi 28h +
call sub_490140  +
cmp [esi+38h] ebx +
ja loc_4905C0  +
mov dword ptr [esp+0Ch] 0 +
mov eax [esi+18h] +
mov dword ptr [esp+8] 0 +
mov [esp+4] eax +
mov eax [esp+80h] +
mov [esp] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_490524  +
mov eax [esp+80h] +
mov edi [esp+1Ch] +
mov [esp+8] eax +
mov eax [esp+18h] +
mov [esp+4] edi +
mov [esp] eax +
call sub_46FB80  +
cmp edi eax +
setz al  +
movzx eax al +
jmp loc_490526  +
***
mov dword ptr [esp+28h] 8 +
mov dword ptr [esp+24h] offset sub_48F900 +
mov eax [edi+28h] +
mov dword ptr [esp+20h] 0 +
shr eax 5 +
test al 42h +
jz loc_4906EE  +
mov eax [ebp+1Ch] +
mov [esp+20h] eax +
mov ebx [ebp+4Ch] +
test ebx ebx +
jz loc_4907F0  +
mov dword ptr [esp+2Ch] 0 +
xor esi esi +
mov dword ptr [esp+18h] 0 +
jmp loc_4907AA  +
lea eax [esp+30h] +
mov [esp+4] eax +
mov [esp] edi +
mov [esp+18h] edx +
call sub_47CFE0  +
test eax eax +
mov ecx eax +
js loc_4907E0  +
mov eax [ebx] +
mov [esp+2Ch] ecx +
mov eax [eax] +
mov eax [eax] +
test eax eax +
jz loc_490760  +
mov edx [edi+4] +
cmp [eax+4] edx +
jz loc_490760  +
mov [esp+4] ebx +
mov [esp] edi +
mov [esp+1Ch] ecx +
call sub_480A90  +
mov ecx [esp+1Ch] +
test eax eax +
jz loc_4907E0  +
mov eax [esp+20h] +
shl ecx 8 +
add esi 1 +
add eax [ebx+4] +
mov [esp+34h] eax +
mov eax [ebx+0Ch] +
movzx eax byte ptr [eax] +
add ecx eax +
mov eax [ebx+8] +
mov [esp+38h] ecx +
mov [esp] edi +
mov [esp+3Ch] eax +
mov eax [esp+14h] +
mov [esp+8] eax +
lea eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+24h] +
call eax  +
mov eax [esp+28h] +
add [esp+14h] eax +
cmp esi [ebp+4Ch] +
jnb loc_4907F0  +
mov eax [ebp+48h] +
mov ebx [eax+esi*4] +
mov eax [ebx] +
mov edx [eax] +
cmp edx [esp+18h] +
mov [esp+30h] edx +
jz loc_4907F8  +
cmp dword ptr [edx+10h] offset off_4BFB90 +
jnz loc_490710  +
mov ecx [edx+8] +
test ecx ecx +
jnz loc_490710  +
xor ecx ecx +
jmp loc_490734  +
***
mov eax [esp+68h] +
mov dword ptr [eax] 1 +
lea esi [esi+0] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [esp+2Ch] +
jmp loc_490734  +
***
mov dword ptr [esp+28h] 0Ch +
mov dword ptr [esp+24h] offset sub_48F940 +
jmp loc_4906D5  +
***
mov ebx [edx+3Ch] +
jmp loc_49068E  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 4Ch +
mov eax [eax+4] +
mov edi [esp+4Ch+arg_0] +
mov [esp+4Ch+var_28] edx +
mov esi [esp+4Ch+arg_8] +
mov [esp+4Ch+var_2C] ecx +
mov eax [eax+1B0h] +
mov [esp+4Ch+var_30] eax +
mov eax [edi+18h] +
mov [esp+4Ch+var_4C] eax +
call sub_459B80  +
test eax eax +
mov ebp eax +
jz loc_4908A1  +
mov eax [edi+10h] +
mov edx [edi+14h] +
mov [esp+4Ch+var_40] 0 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_44] edx +
call sub_46FCE0  +
test eax eax +
jz loc_4908B0  +
mov [esp+4Ch+var_4C] ebp +
call free  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi+18h] +
mov [esp+4Ch+var_44] ebx +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_48] eax +
call sub_46FAD0  +
cmp eax [edi+18h] +
jnz loc_490899  +
mov eax [edi+28h] +
mov [esp+4Ch+var_34] eax +
and eax 0FFFFFFFBh +
cmp eax 8 +
jnz loc_490A66  +
mov ecx [esp+4Ch+arg_10] +
mov edi ebp +
mov eax [ebx+80h] +
mov edx [esp+4Ch+arg_4] +
test ecx ecx +
cmovz eax [ebx+7Ch] +
mov [esp+4Ch+var_24] eax +
xor eax eax +
test edx edx +
jz loc_490A54  +
mov [esp+4Ch+var_20] ebp +
mov ebp eax +
jmp loc_490961  +
cmp eax [esp+4Ch+var_24] +
ja loc_490A20  +
mov edx [esp+4Ch+arg_C] +
cmp [esp+4Ch+var_34] 0Ch +
lea eax [edx+eax*4-4] +
mov [esi] eax +
mov eax [esp+4Ch+var_10] +
mov [esi+8] eax +
jz loc_4909D9  +
mov eax [esp+4Ch+var_30] +
mov eax [eax+28h] +
test eax eax +
jz loc_490A10  +
lea edx [esp+4Ch+var_18] +
add ebp 1 +
mov [esp+4Ch+var_48] esi +
add esi 10h +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_4C] ebx +
call eax  +
add edi [esp+4Ch+var_34] +
cmp ebp [esp+4Ch+arg_4] +
jz loc_490A50  +
cmp [esp+4Ch+var_34] 0Ch +
jz loc_4909F0  +
mov eax [ebx+4] +
mov eax [eax+4Ch] +
mov [esp+4Ch+var_4C] edi +
call eax  +
lea ecx [edi+4] +
mov [esp+4Ch+var_18] eax +
mov eax [ebx+4] +
mov eax [eax+4Ch] +
mov [esp+4Ch+var_4C] ecx +
call eax  +
mov [esp+4Ch+var_10] 0 +
mov [esp+4Ch+var_14] eax +
mov ecx [ebx+28h] +
shr ecx 5 +
and ecx 42h +
mov ecx [esp+4Ch+var_18] +
jz loc_4909B2  +
mov edx [esp+4Ch+arg_10] +
test edx edx +
jnz loc_4909B2  +
mov edx [esp+4Ch+var_2C] +
sub ecx [edx] +
shr eax 8 +
test eax eax +
mov [esi+4] ecx +
jnz loc_490907  +
mov eax off_4BFC2C +
cmp [esp+4Ch+var_34] 0Ch +
mov [esi] eax +
mov eax [esp+4Ch+var_10] +
mov [esi+8] eax +
jnz loc_49092D  +
mov eax [esp+4Ch+var_30] +
mov eax [eax+24h] +
test eax eax +
jnz loc_49093C  +
jmp loc_49092D  +
lea eax [esp+4Ch+var_18] +
mov [esp+4Ch+var_44] eax +
mov [esp+4Ch+var_48] edi +
mov [esp+4Ch+var_4C] ebx +
call sub_48F8B0  +
mov eax [esp+4Ch+var_14] +
jmp loc_490995  +
mov eax [esp+4Ch+var_30] +
mov eax [eax+24h] +
jmp loc_49093C  +
mov edx [esp+4Ch+var_28] +
mov ecx [edx] +
mov [esp+4Ch+var_3C] eax +
mov eax [ebx] +
mov [esp+4Ch+var_40] ebp +
mov [esp+4Ch+var_4C] offset aSSRelocationDH +
mov [esp+4Ch+var_44] ecx +
mov [esp+4Ch+var_48] eax +
call off_4BFA04  +
jmp loc_4909C0  +
mov ebp [esp+4Ch+var_20] +
mov [esp+4Ch+var_4C] ebp +
call free  +
mov eax 1 +
jmp loc_4908A3  +
mov [esp+4Ch+var_48] 582h +
mov [esp+4Ch+var_4C] offset a____Binutil_31 +
call sub_44BA40  +
jmp loc_4908DB  +
***
push ebp  +
mov eax 1 +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+44h] +
mov edi [ebx+44h] +
mov esi [ebx+8Ch] +
test edi edi +
jz loc_490AA5  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [esp+4Ch] +
test ecx ecx +
jnz loc_490B20  +
test byte ptr [ebx+14h] 4 +
jz loc_490A9D  +
mov edi [ebx+4Ch] +
test edi edi +
jz loc_490A9D  +
mov ecx [esi+3Ch] +
test ecx ecx +
jz loc_490C5C  +
mov eax [ecx+28h] +
xor ebp ebp +
test eax eax +
mov [esp+18h] eax +
jz loc_490ADD  +
mov eax [ecx+18h] +
xor edx edx +
div  dword ptr [esp+18h] +
mov ebp eax +
mov esi [esi+4Ch] +
test esi esi +
jz loc_490C4F  +
mov eax [esi+28h] +
mov dword ptr [esp+18h] 0 +
test eax eax +
mov [esp+1Ch] eax +
jz loc_490B08  +
mov eax [esi+18h] +
xor edx edx +
div  dword ptr [esp+1Ch] +
mov [esp+18h] eax +
mov eax [esp+18h] +
add eax ebp +
cmp edi eax +
jz loc_490C01  +
xor eax eax +
jmp loc_490A9D  +
***
mov edx [ebx+24h] +
test edx edx +
jz loc_490A9D  +
mov ecx esi +
mov esi [esi+28h] +
test esi esi +
jnz loc_490BE6  +
xor eax eax +
xor ebp ebp +
mov dword ptr [esp+18h] 0 +
xor esi esi +
mov [esp+4] eax +
mov eax [esp+40h] +
mov [esp+1Ch] ecx +
mov [esp] eax +
call sub_458A80  +
test eax eax +
mov edi eax +
jz loc_490B16  +
mov ecx [esp+1Ch] +
test ecx ecx +
jz loc_490B9B  +
mov edx [esp+4Ch] +
lea eax [ebx+1Ch] +
mov [esp] ecx +
mov ecx eax +
mov eax [esp+40h] +
mov [esp+8] edi +
mov [esp+4] ebp +
mov [esp+10h] edx +
mov edx [esp+48h] +
mov [esp+0Ch] edx +
mov edx ebx +
call sub_490840  +
test eax eax +
jz loc_490B16  +
test esi esi +
jz loc_490BD9  +
mov eax [esp+4Ch] +
shl ebp 4 +
mov edx ebx +
add ebp edi +
lea ecx [ebx+1Ch] +
mov [esp+8] ebp +
mov [esp+10h] eax +
mov eax [esp+48h] +
mov [esp] esi +
mov [esp+0Ch] eax +
mov eax [esp+18h] +
mov [esp+4] eax +
mov eax [esp+40h] +
call sub_490840  +
test eax eax +
jz loc_490B16  +
mov [ebx+44h] edi +
mov eax 1 +
jmp loc_490A9D  +
***
mov eax [ecx+18h] +
xor edx edx +
mov dword ptr [esp+18h] 0 +
div  esi +
xor esi esi +
mov ebp eax +
shl eax 4 +
jmp loc_490B46  +
***
test ecx ecx +
jz loc_490C15  +
mov eax [ebx+58h] +
mov edx [ebx+5Ch] +
xor edx [ecx+14h] +
xor eax [ecx+10h] +
or edx eax +
jz loc_490C6D  +
test esi esi +
jz loc_490C29  +
mov eax [ebx+58h] +
mov edx [ebx+5Ch] +
xor edx [esi+14h] +
xor eax [esi+10h] +
or edx eax +
jz loc_490C63  +
mov dword ptr [esp+4] 5E6h +
mov dword ptr [esp] offset a____Binutil_31 +
mov [esp+1Ch] ecx +
call sub_44BA40  +
mov eax edi +
mov ecx [esp+1Ch] +
shl eax 4 +
jmp loc_490B46  +
***
mov dword ptr [esp+18h] 0 +
jmp loc_490B08  +
***
xor ebp ebp +
jmp loc_490ADD  +
***
mov eax edi +
shl eax 4 +
jmp loc_490B46  +
***
mov eax edi +
shl eax 4 +
mov [esp+4] eax +
mov eax [esp+40h] +
mov [esp+1Ch] ecx +
mov [esp] eax +
call sub_458A80  +
mov ecx [esp+1Ch] +
test eax eax +
mov edi eax +
jnz loc_490B68  +
xor eax eax +
jmp loc_490A9D  +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov esi [esp+10h+arg_4] +
mov ebx [esp+10h+arg_8] +
mov eax [edi+4] +
mov edx [eax+1B0h] +
mov eax [eax+4Ch] +
movzx edx byte ptr [edx+1ACh] +
mov [esp+10h+var_10] esi +
shr dl 7 +
mov [esp+10h+var_4] edx +
call eax  +
lea ecx [esi+18h] +
mov [ebx] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] ecx +
call eax  +
lea ecx [esi+4] +
mov [ebx+4] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] ecx +
call eax  +
mov edx [esp+10h+var_4] +
test dl dl +
mov [ebx+8] eax +
mov eax [edi+4] +
jnz loc_490D60  +
lea edx [esi+8] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
lea edx [esi+0Ch] +
mov [ebx+0Ch] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
mov [ebx+10h] eax +
mov eax [edi+4] +
lea edx [esi+10h] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
lea edx [esi+14h] +
add esi 1Ch +
mov [ebx+14h] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] edx +
call eax  +
mov [ebx+18h] eax +
mov eax [edi+4] +
mov eax [eax+4Ch] +
mov [esp+10h+var_10] esi +
call eax  +
mov [ebx+1Ch] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
lea edx [esi+8] +
mov eax [eax+50h] +
mov [esp+10h+var_10] edx +
call eax  +
lea edx [esi+0Ch] +
mov [ebx+0Ch] eax +
mov eax [edi+4] +
mov eax [eax+50h] +
mov [esp+10h+var_10] edx +
call eax  +
mov [ebx+10h] eax +
jmp loc_490D1F  +
***
jmp sub_490D90  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+28h+arg_0] +
mov edi [esp+28h+arg_4] +
mov ebx [esp+28h+arg_8] +
mov eax [esi+4] +
mov edx [eax+1B0h] +
test byte ptr [edx+1AEh] 10h +
jnz loc_490DBA  +
mov ebp [edi+10h] +
mov edx [edi] +
mov eax [eax+54h] +
mov [esp+28h+var_24] ebx +
mov [esp+28h+var_28] edx +
call eax  +
mov eax [esi+4] +
lea ecx [ebx+4] +
mov edx [edi+8] +
mov eax [eax+54h] +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] edx +
call eax  +
mov eax [esi+4] +
lea ecx [ebx+8] +
mov edx [edi+0Ch] +
mov eax [eax+54h] +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] edx +
call eax  +
mov eax [esi+4] +
lea edx [ebx+0Ch] +
mov eax [eax+54h] +
mov [esp+28h+var_24] edx +
mov [esp+28h+var_28] ebp +
call eax  +
mov eax [esi+4] +
lea ecx [ebx+10h] +
mov edx [edi+14h] +
mov eax [eax+54h] +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] edx +
call eax  +
mov eax [esi+4] +
lea ecx [ebx+14h] +
mov edx [edi+18h] +
mov eax [eax+54h] +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] edx +
call eax  +
mov eax [esi+4] +
lea ecx [ebx+18h] +
mov edx [edi+4] +
add ebx 1Ch +
mov eax [eax+54h] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_24] ecx +
call eax  +
mov eax [esi+4] +
mov edx [edi+1Ch] +
mov eax [eax+54h] +
mov [esp+28h+arg_4] ebx +
mov [esp+28h+arg_0] edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp eax  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [esp+58h] +
lea edi [esp+10h] +
mov ebp [esp+50h] +
mov esi [esp+54h] +
test ebx ebx +
jnz loc_490E88  +
jmp loc_490EC0  +
add esi 20h +
sub ebx 1 +
jz loc_490EC0  +
mov [esp+8] edi +
mov [esp+4] esi +
mov [esp] ebp +
call sub_490D90  +
mov [esp+8] ebp +
mov dword ptr [esp+4] 20h +
mov [esp] edi +
call sub_46FB80  +
cmp eax 20h +
jz loc_490E80  +
add esp 3Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0ACh +
mov eax [esp+0C0h] +
lea esi [esp+60h] +
mov edi [esp+0C4h] +
mov edx esi +
mov ebp [esp+0C8h] +
mov ebx [eax+0A0h] +
mov eax [ebx+40h] +
mov [esp+10h] eax +
mov eax [ebx+44h] +
mov [esp+1Ch] eax +
mov eax [ebx] +
mov [esp+60h] eax +
mov eax [ebx+4] +
mov [esp+64h] eax +
mov eax [ebx+8] +
mov [esp+68h] eax +
mov eax [ebx+0Ch] +
mov [esp+6Ch] eax +
mov eax [ebx+10h] +
mov [esp+70h] eax +
mov eax [ebx+14h] +
mov [esp+74h] eax +
mov eax [ebx+18h] +
mov [esp+78h] eax +
mov eax [ebx+1Ch] +
mov [esp+7Ch] eax +
mov eax [ebx+20h] +
mov [esp+80h] eax +
mov eax [ebx+24h] +
mov [esp+84h] eax +
mov eax [ebx+28h] +
mov [esp+88h] eax +
mov eax [ebx+2Ch] +
mov ecx [esp+0C0h] +
mov [esp+8Ch] eax +
mov eax [ebx+30h] +
mov [esp+90h] eax +
mov eax [ebx+34h] +
mov [esp+94h] eax +
mov eax [ebx+38h] +
mov [esp+98h] eax +
mov eax [ebx+3Ch] +
mov dword ptr [esp+78h] 0 +
mov dword ptr [esp+74h] 0 +
mov [esp+9Ch] eax +
lea eax [ecx+4] +
lea ecx [esp+2Ch] +
mov [esp+14h] eax +
call sub_490360  +
lea ecx [esp+2Ch] +
mov [esp+8] ebp +
mov dword ptr [esp+4] 34h +
mov [esp] ecx +
call edi  +
mov eax [ebx+30h] +
xor ebx ebx +
mov edx [esp+1Ch] +
test eax eax +
mov [esp+18h] eax +
jz loc_491030  +
mov [esp+0C4h] edi +
mov edi edx +
lea esi [esi+0] +
mov eax [esp+0C0h] +
add ebx 1 +
mov [esp+4] edi +
add edi 20h +
mov [esp+8] esi +
mov [esp] eax +
call sub_490D90  +
mov [esp+8] ebp +
mov dword ptr [esp+4] 20h +
mov [esp] esi +
call dword ptr [esp+0C4h]  +
cmp ebx [esp+18h] +
jnz loc_490FF0  +
mov edi [esp+0C4h] +
mov eax [esp+0C0h] +
xor ebx ebx +
mov eax [eax+0A0h] +
mov eax [eax+214h] +
test eax eax +
mov [esp+18h] eax +
jz loc_491147  +
mov eax [esp+10h] +
lea ecx [esp+2Ch] +
mov eax [eax+ebx*4] +
mov edx [eax] +
mov [esp+60h] edx +
mov edx [eax+4] +
mov [esp+64h] edx +
mov edx [eax+8] +
mov [esp+68h] edx +
mov edx [eax+0Ch] +
mov [esp+6Ch] edx +
mov edx [eax+10h] +
mov [esp+70h] edx +
mov edx [eax+14h] +
mov [esp+74h] edx +
mov edx [eax+18h] +
mov [esp+78h] edx +
mov edx [eax+1Ch] +
mov [esp+7Ch] edx +
mov edx [eax+20h] +
mov [esp+80h] edx +
mov edx [eax+24h] +
mov [esp+84h] edx +
mov edx [eax+28h] +
mov [esp+88h] edx +
mov edx [eax+2Ch] +
mov [esp+8Ch] edx +
mov edx [eax+30h] +
mov [esp+90h] edx +
mov eax [eax+34h] +
mov edx esi +
mov dword ptr [esp+70h] 0 +
mov dword ptr [esp+74h] 0 +
mov [esp+94h] eax +
mov eax [esp+14h] +
call sub_490140  +
lea eax [esp+2Ch] +
mov [esp+8] ebp +
mov dword ptr [esp+4] 28h +
mov [esp] eax +
call edi  +
cmp dword ptr [esp+64h] 8 +
jz loc_49113A  +
mov edx [esp+90h] +
mov dword ptr [esp+28h] 0 +
test edx edx +
jz loc_491157  +
mov eax [esp+78h] +
mov [esp+8] ebp +
mov [esp] edx +
mov [esp+4] eax +
call edi  +
mov eax [esp+28h] +
test eax eax +
jz loc_49113A  +
mov [esp] eax +
call free  +
add ebx 1 +
cmp ebx [esp+18h] +
jnz loc_491051  +
add esp 0ACh +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+0C0h] +
mov [esp+4] ebx +
mov [esp] eax +
call sub_478480  +
test eax eax +
jz loc_49113A  +
mov edx [eax+6Ch] +
test edx edx +
jnz loc_491119  +
and dword ptr [eax+14h] 0FFFFBFFFh +
lea ecx [esp+28h] +
mov [esp+4] eax +
mov eax [esp+0C0h] +
mov [esp+8] ecx +
mov [esp] eax +
call sub_44DE10  +
test eax eax +
jz loc_49113A  +
mov edx [esp+28h] +
test edx edx +
jz loc_49113A  +
jmp loc_491119  +
***
mov dword ptr [esp+0] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 0FCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp byte ptr [esp+84h] 7Fh +
jnz sub_4911EB  +
cmp byte ptr [esp+85h] 45h +
jnz sub_4911EB  +
cmp byte ptr [esp+86h] 4Ch +
jnz sub_4911EB  +
cmp byte ptr [esp+87h] 46h +
jnz sub_4911EB  +
cmp byte ptr [esp+8Ah] 1 +
jnz sub_4911EB  +
cmp byte ptr [esp+88h] 1 +
jnz sub_4911EB  +
movzx eax byte ptr [esp+89h] +
cmp al 1 +
jz loc_491655  +
cmp al 2 +
jnz sub_4911EB  +
mov eax [ebx+4] +
mov edi [eax+0Ch] +
mov [esp+24h] eax +
test edi edi +
jnz sub_4911EB  +
***
mov eax [esp+arg_20] +
mov eax [eax+78h] +
mov [esp+0] ebx +
call eax  +
test eax eax +
jz loc_4911F7  +
mov ebp [ebx+0A0h] +
lea eax [ebx+4] +
mov edx esi +
mov [esp+arg_1C] eax +
mov ecx ebp +
call sub_490220  +
movzx eax word ptr [ebp+24h] +
cmp ax 4 +
jz sub_4911EB  +
mov edx [ebp+18h] +
test edx edx +
jnz loc_4912A7  +
cmp ax 1 +
jz sub_4911EB  +
cmp dword ptr [ebp+34h] 28h +
jz loc_4912B8  +
mov ecx [ebp+38h] +
test ecx ecx +
jnz sub_4911EB  +
test edx edx +
jnz loc_4912C7  +
mov edi [ebp+38h] +
test edi edi +
jnz sub_4911EB  +
mov edx [ebx+4] +
mov ecx [edx+1B0h] +
mov edx [ecx+174h] +
mov edi ecx +
mov [esp+arg_24] ecx +
cmp byte ptr [edx+0Ah] 20h +
jnz sub_4911EB  +
mov ecx [ecx+8] +
movzx edx word ptr [ebp+26h] +
cmp ecx edx +
jz loc_491319  +
mov esi [edi+16Ch] +
test esi esi +
jz loc_4912FF  +
cmp edx esi +
jz loc_491319  +
mov edi [esp+arg_24] +
mov esi [edi+170h] +
test esi esi +
jz loc_491311  +
cmp edx esi +
jz loc_491319  +
test ecx ecx +
jnz sub_4911EB  +
cmp ax 2 +
lea esi [esi+0] +
jz loc_4916AB  +
cmp ax 3 +
jz loc_491879  +
mov esi [ebp+30h] +
test esi esi +
jz loc_49133E  +
or dword ptr [ebx+28h] 2000h +
mov eax [esp+arg_24] +
mov eax [eax] +
mov [esp+arg_4] 0 +
mov [esp+0] ebx +
mov [esp+arg_0] eax +
call sub_453750  +
test eax eax +
mov eax [esp+arg_24] +
jnz loc_491670  +
mov ecx [eax+8] +
test ecx ecx +
jnz loc_4911F7  +
mov esi [ebp+18h] +
test esi esi +
jnz loc_4916B5  +
mov eax [ebp+38h] +
test eax eax +
jz loc_491697  +
cmp eax 4924924h +
ja sub_4911EB  +
imul eax eax +
mov [esp+0] ebx +
mov [esp+arg_0] eax +
call sub_458A80  +
test eax eax +
mov esi eax +
jz loc_4911F7  +
mov eax [ebp+38h] +
mov ecx eax +
mov [esp+arg_18] eax +
mov eax [ebx+0A0h] +
mov [eax+214h] ecx +
mov eax ecx +
mov edi [ebx+0A0h] +
shl eax 2 +
mov [esp+arg_0] eax +
mov [esp+0] ebx +
call sub_458A80  +
mov [edi+40h] eax +
mov eax [ebx+0A0h] +
mov eax [eax+40h] +
test eax eax +
jz loc_4911F7  +
mov eax [esp+arg_B4] +
xor edx edx +
mov ecx esi +
mov edi [esp+arg_18] +
mov [esi] eax +
mov eax [esp+arg_B8] +
test edi edi +
mov [esi+4] eax +
mov eax [esp+arg_BC] +
mov [esi+8] eax +
mov eax [esp+arg_C0] +
mov [esi+0Ch] eax +
mov eax [esp+arg_C4] +
mov [esi+10h] eax +
mov eax [esp+arg_C8] +
mov [esi+14h] eax +
mov eax [esp+arg_CC] +
mov [esi+18h] eax +
mov eax [esp+arg_D0] +
mov [esi+1Ch] eax +
mov eax [esp+arg_D4] +
mov [esi+20h] eax +
mov eax [esp+arg_D8] +
mov [esi+24h] eax +
mov eax [esp+arg_DC] +
mov [esi+28h] eax +
mov eax [esp+arg_E0] +
mov [esi+2Ch] eax +
mov eax [esp+arg_E4] +
mov [esi+30h] eax +
mov eax [esp+arg_E8] +
mov [esi+34h] eax +
jz loc_4914AC  +
mov [esp+arg_28] ebp +
mov ebp [esp+arg_18] +
jmp loc_491492  +
***
sub eax 0FF00h +
cmp eax 1 +
ja sub_4911EB  +
mov eax [esi+8] +
test al 40h +
jnz loc_491640  +
mov edx [esi+4] +
cmp edx 4 +
jz loc_491640  +
cmp edx 9 +
jz loc_491640  +
mov edx [esi+18h] +
test edx edx +
jz loc_491598  +
test al 2 +
jz loc_491598  +
cmp dword ptr [esi+4] 8 +
jz loc_491598  +
mov eax [esi+0Ch] +
xor edx edx +
mov ecx [ebp+14h] +
sub eax [esi+10h] +
sbb edx [esi+14h] +
mov [esp+arg_8] 0 +
mov [esp+arg_4] ecx +
mov [esp+0] eax +
mov [esp+arg_0] edx +
call sub_4BB350  +
or edx eax +
jz loc_491598  +
mov eax [esp+arg_10C] +
and dword ptr [eax+28h] 0FFFFDFFFh +
mov eax [esp+arg_28] +
add edi 1 +
add esi 38h +
cmp [eax+38h] edi +
ja loc_4914D3  +
mov ebx [esp+arg_10C] +
mov ebp eax +
mov ecx [ebp+38h] +
test ecx ecx +
jz loc_491697  +
mov eax [ebx+0A0h] +
mov eax [eax+214h] +
cmp [ebp+3Ch] eax +
jnb loc_49193D  +
mov eax [ebp+30h] +
test eax eax +
jnz loc_491885  +
mov eax [ebx+0A0h] +
mov dword ptr [eax+44h] 0 +
mov edx [ebp+3Ch] +
test edx edx +
jz loc_4917FD  +
mov eax [ebp+18h] +
test eax eax +
jz loc_4917FD  +
mov eax [ebx+0A0h] +
mov edi 1 +
mov esi [eax+214h] +
cmp esi 1 +
ja loc_49162B  +
jmp loc_4917E7  +
add edi 1 +
cmp edi esi +
jz loc_4917E7  +
mov [esp+arg_0] edi +
mov [esp+0] ebx +
call sub_476580  +
test eax eax +
jnz loc_491620  +
jmp loc_4911F7  +
mov ecx [esp+arg_18] +
cmp ecx [esi+20h] +
ja loc_49154F  +
lea esi [esi+0] +
jmp sub_4911EB  +
mov eax [ebx+4] +
cmp dword ptr [eax+0Ch] 1 +
mov [esp+arg_20] eax +
jz loc_491262  +
jmp sub_4911EB  +
mov edx [eax+8] +
test edx edx +
jz loc_49136F  +
mov eax [eax+0Ch] +
movzx edx byte ptr [ebp+7] +
cmp edx eax +
jz loc_49136F  +
test eax eax +
jz loc_49136F  +
jmp sub_4911EB  +
mov edi [ebp+3Ch] +
test edi edi +
lea esi [esi+0] +
jz loc_4915D4  +
jmp sub_4911EB  +
or dword ptr [ebx+28h] 40h +
nop   +
jmp loc_491330  +
xor edi edi +
mov [esp+arg_8] 0 +
mov [esp+arg_0] esi +
mov [esp+arg_4] edi +
mov [esp+0] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_4911F7  +
lea eax [esp+arg_58] +
mov [esp+arg_4] ebx +
mov [esp+arg_0] 28h +
mov [esp+0] eax +
mov [esp+arg_18] eax +
call sub_46FAD0  +
cmp eax 28h +
jnz loc_4911F7  +
mov eax [esp+arg_1C] +
lea ecx [esp+arg_B4] +
mov edx [esp+arg_18] +
call sub_490040  +
mov eax [ebp+38h] +
test eax eax +
jnz loc_491730  +
mov eax [esp+arg_CC] +
lea edx [eax-1] +
cmp edx 0FFFFFEFEh +
mov [ebp+38h] eax +
ja sub_4911EB  +
cmp dword ptr [ebp+3Ch] 0FFFFh +
jz loc_491973  +
cmp dword ptr [ebp+30h] 0FFFFh +
jz loc_49195C  +
cmp eax 1 +
jz loc_491390  +
cmp eax 4924924h +
ja sub_4911EB  +
lea eax [eax+eax*4] +
xor edx edx +
lea eax ds:0FFFFFFD8h[eax*8] +
add eax esi +
adc edx edi +
cmp [ebp+18h] eax +
jnb sub_4911EB  +
mov [esp+arg_8] 0 +
mov [esp+arg_0] eax +
mov [esp+arg_4] edx +
mov [esp+0] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_4911F7  +
mov eax [esp+arg_18] +
mov [esp+arg_4] ebx +
mov [esp+arg_0] 28h +
mov [esp+0] eax +
call sub_46FAD0  +
cmp eax 28h +
jnz loc_4911F7  +
mov [esp+arg_8] 0 +
mov eax [ebp+18h] +
mov [esp+arg_4] 0 +
mov [esp+0] ebx +
add eax 28h +
mov [esp+arg_0] eax +
call sub_46FCE0  +
test eax eax +
jz loc_49137A  +
jmp loc_4911F7  +
mov [esp+0] ebx +
lea esi [esi+0] +
call sub_475DF0  +
test eax eax +
jz sub_4911EB  +
mov eax [esp+arg_24] +
mov eax [eax+30h] +
test eax eax +
jz loc_491815  +
mov [esp+0] ebx +
call eax  +
test eax eax +
jz sub_4911EB  +
mov eax [ebp+10h] +
mov [esp+0] ebx +
mov [esp+arg_0] eax +
call sub_44C120  +
mov esi [ebx+64h] +
test esi esi +
jnz loc_491837  +
jmp loc_491870  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_491870  +
mov eax [esi+8Ch] +
mov edx [eax+4] +
cmp edx 4 +
jz loc_49184A  +
cmp edx 9 +
jnz loc_491830  +
mov eax [eax+20h] +
test eax eax +
jz loc_491830  +
mov [esp+arg_0] eax +
mov [esp+0] ebx +
call sub_478480  +
test eax eax +
jz loc_491830  +
test byte ptr [eax+15h] 20h +
jz loc_491830  +
or dword ptr [esi+14h] 2000h +
jmp loc_491830  +
mov eax [esp+arg_20] +
jmp loc_4911F9  +
or dword ptr [ebx+28h] 800h +
jmp loc_491330  +
cmp eax 7FFFFFFh +
ja sub_4911EB  +
shl eax 5 +
mov esi [ebx+0A0h] +
mov [esp+arg_0] eax +
mov [esp+0] ebx +
call sub_458A80  +
mov [esi+44h] eax +
mov eax [ebx+0A0h] +
mov esi [eax+44h] +
test esi esi +
jz loc_4911F7  +
mov [esp+arg_8] 0 +
mov eax [ebp+14h] +
mov [esp+arg_4] 0 +
mov [esp+0] ebx +
mov [esp+arg_0] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_4911F7  +
mov ecx [ebp+30h] +
mov eax [ebx+0A0h] +
test ecx ecx +
mov edi [eax+44h] +
jz loc_4915EC  +
xor esi esi +
jmp loc_49191B  +
lea eax [esp+arg_38] +
add esi 1 +
mov [esp+arg_4] edi +
add edi 20h +
mov [esp+arg_0] eax +
mov [esp+0] ebx +
call sub_490CA0  +
cmp [ebp+30h] esi +
jbe loc_4915EC  +
lea eax [esp+arg_38] +
mov [esp+arg_4] ebx +
mov [esp+arg_0] 20h +
mov [esp+0] eax +
call sub_46FAD0  +
cmp eax 20h +
jz loc_4918F8  +
jmp loc_4911F7  +
mov eax [ebx] +
mov dword ptr [ebp+3Ch] 0 +
mov dword ptr [esp+0] offset aWarningSHasACo +
mov [esp+arg_0] eax +
call off_4BFA04  +
jmp loc_4915D4  +
***
mov edx [esp+arg_D4] +
test edx edx +
jz loc_49174A  +
mov [ebp+30h] edx +
jmp loc_49174A  +
mov edx [esp+arg_D0] +
mov [ebp+3Ch] edx +
jmp loc_49173D  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0BCh +
mov eax [esp+0D4h] +
lea ebx [esp+3Ch] +
mov edi [esp+0D0h] +
mov dword ptr [esp+8] 34h +
mov [esp+4] ebx +
mov [esp] eax +
call dword ptr [esp+0E0h]  +
test eax eax +
mov esi eax +
jnz loc_491DD0  +
cmp byte ptr [esp+3Ch] 7Fh +
jz loc_4919F0  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 0BCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp byte ptr [esp+3Dh] 45h +
jnz loc_4919D3  +
cmp byte ptr [esp+3Eh] 4Ch +
jnz loc_4919D3  +
cmp byte ptr [esp+3Fh] 46h +
jnz loc_4919D3  +
cmp byte ptr [esp+42h] 1 +
jnz loc_4919D3  +
cmp byte ptr [esp+40h] 1 +
jnz loc_4919D3  +
movzx eax byte ptr [esp+41h] +
cmp al 1 +
jz loc_491C66  +
cmp al 2 +
jnz loc_4919D3  +
mov eax [edi+4] +
mov ecx [eax+0Ch] +
test ecx ecx +
jnz loc_4919D3  +
lea eax [edi+4] +
mov edx ebx +
lea ecx [esp+70h] +
call sub_490220  +
cmp dword ptr [esp+9Ch] 20h +
jnz loc_4919D3  +
mov eax [esp+0A0h] +
test eax eax +
jz loc_4919D3  +
shl eax 6 +
mov [esp] eax +
call sub_459B80  +
test eax eax +
mov ecx eax +
mov [esp+24h] eax +
jz loc_4919DF  +
mov eax [esp+0A0h] +
mov [esp+4] ecx +
shl eax 5 +
mov [esp+8] eax +
mov eax [esp+0D4h] +
add eax [esp+84h] +
mov [esp] eax +
call dword ptr [esp+0E0h]  +
test eax eax +
mov ebx eax +
jnz loc_491E03  +
mov eax [esp+0A0h] +
mov ebx eax +
shl ebx 5 +
add ebx [esp+24h] +
test eax eax +
mov [esp+28h] ebx +
jz loc_491DF2  +
mov ebp [esp+24h] +
xor esi esi +
mov ebx [esp+28h] +
mov dword ptr [esp+20h] 0 +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+1Ch] 0 +
jmp loc_491AF8  +
add esi 1 +
add ebp 20h +
add ebx 20h +
cmp [esp+0A0h] esi +
jbe loc_491B53  +
mov [esp+8] ebx +
mov [esp+4] ebp +
mov [esp] edi +
call sub_490CA0  +
cmp dword ptr [ebx] 1 +
jnz loc_491AE6  +
mov eax [ebx+8] +
mov edx [ebx+14h] +
add edx eax +
cmp edx [esp+14h] +
jbe loc_491B23  +
mov [esp+14h] edx +
mov [esp+1Ch] ebx +
mov edx [esp+18h] +
test edx edx +
jnz loc_491AE6  +
mov ecx [ebx+1Ch] +
mov edx [ebx+0Ch] +
cmp ecx 1 +
jbe loc_491B3C  +
neg ecx  +
and eax ecx +
and edx ecx +
test eax eax +
jnz loc_491AE6  +
mov eax [esp+0D4h] +
mov [esp+18h] ebx +
sub eax edx +
mov [esp+20h] eax +
jmp loc_491AE6  +
***
mov eax [esp+14h] +
test eax eax +
jz loc_491DF2  +
mov eax [esp+88h] +
mov dword ptr [esp+2Ch] 0 +
test eax eax +
jz loc_491BA1  +
mov edx [esp+0A8h] +
test edx edx +
jz loc_491BA1  +
mov ecx [esp+0A4h] +
test ecx ecx +
jz loc_491BA1  +
imul edx ecx +
mov ecx [esp+1Ch] +
add eax edx +
mov [esp+2Ch] eax +
mov eax [ecx+14h] +
cmp eax [ecx+18h] +
jz loc_491E2A  +
mov eax [esp+14h] +
mov [esp] eax +
call sub_459D10  +
test eax eax +
mov ebp eax +
jz loc_491EA0  +
mov eax [esp+0A0h] +
xor esi esi +
mov ebx [esp+28h] +
test eax eax +
jz loc_491C7F  +
mov [esp+0D0h] edi +
mov edi [esp+0E0h] +
jmp loc_491BF3  +
add esi 1 +
add ebx 20h +
cmp [esp+0A0h] esi +
jbe loc_491C78  +
cmp dword ptr [ebx] 1 +
jnz loc_491BE0  +
mov eax [ebx+8] +
mov edx [ebx+14h] +
mov ecx [ebx+0Ch] +
add edx eax +
cmp ebx [esp+18h] +
jz loc_491DA0  +
cmp [esp+1Ch] ebx +
cmovz edx [esp+14h] +
add ecx [esp+20h] +
sub edx eax +
add eax ebp +
mov [esp+8] edx +
mov [esp+4] eax +
mov [esp] ecx +
call edi  +
test eax eax +
jz loc_491BE0  +
mov [esp+14h] eax +
mov eax [esp+24h] +
mov [esp] eax +
call free  +
mov [esp] ebp +
call free  +
mov dword ptr [esp] 1 +
call sub_44BAF0  +
call ds:__imp__errno  +
mov edx [esp+14h] +
mov [eax] edx +
xor eax eax +
jmp loc_4919E1  +
***
mov eax [edi+4] +
cmp dword ptr [eax+0Ch] 1 +
jz loc_491A2E  +
jmp loc_4919D3  +
***
mov edi [esp+0D0h] +
mov eax [esp+24h] +
mov [esp] eax +
call free  +
mov eax [esp+2Ch] +
cmp [esp+14h] eax +
jb loc_491DB0  +
mov eax [esp+3Ch] +
mov [ebp+0] eax +
mov eax [esp+40h] +
mov [ebp+4] eax +
mov eax [esp+44h] +
mov [ebp+8] eax +
mov eax [esp+48h] +
mov [ebp+0Ch] eax +
mov eax [esp+4Ch] +
mov [ebp+10h] eax +
mov eax [esp+50h] +
mov [ebp+14h] eax +
mov eax [esp+54h] +
mov [ebp+18h] eax +
mov eax [esp+58h] +
mov [ebp+1Ch] eax +
mov eax [esp+5Ch] +
mov [ebp+20h] eax +
mov eax [esp+60h] +
mov [ebp+24h] eax +
mov eax [esp+64h] +
mov [ebp+28h] eax +
mov eax [esp+68h] +
mov [ebp+2Ch] eax +
mov eax [esp+6Ch] +
mov [ebp+30h] eax +
mov dword ptr [esp] 8 +
call sub_459B80  +
test eax eax +
mov esi eax +
jz loc_491E83  +
call sub_458290  +
test eax eax +
mov ebx eax +
jz loc_491E7B  +
mov dword ptr [esp] offset aInMemory +
call sub_4A06C0  +
mov [ebx] eax +
mov eax [edi+4] +
mov [ebx+4] eax +
mov eax [esp+14h] +
mov [esi+4] ebp +
mov [esi] eax +
mov eax [ebx+28h] +
mov [ebx+8] esi +
mov dword ptr [ebx+0Ch] offset off_5001E0 +
mov dword ptr [ebx+38h] 0 +
and eax 0FF80001Fh +
or eax 10000h +
mov [ebx+28h] eax +
and eax 7 +
or eax 8 +
mov dword ptr [ebx+3Ch] 0 +
mov [ebx+28h] al +
mov dword ptr [esp] 0 +
call time  +
or byte ptr [ebx+2Bh] 4 +
mov [ebx+20h] eax +
mov eax [esp+0DCh] +
test eax eax +
jz loc_491DEB  +
mov eax [esp+0DCh] +
mov ecx [esp+20h] +
mov [eax] ecx +
add esp 0BCh +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub ecx eax +
xor eax eax +
jmp loc_491C0D  +
***
xor edx edx +
xor ecx ecx +
mov dword ptr [esp+5Ch] 0 +
mov [esp+6Ch] dx +
mov [esp+6Eh] cx +
jmp loc_491C99  +
***
mov dword ptr [esp] 1 +
call sub_44BAF0  +
call ds:__imp__errno  +
mov [eax] esi +
xor eax eax +
jmp loc_4919E1  +
***
mov eax ebx +
jmp loc_4919E1  +
***
mov eax [esp+24h] +
mov [esp] eax +
call free  +
jmp loc_4919D3  +
***
mov eax [esp+24h] +
mov [esp] eax +
call free  +
mov dword ptr [esp] 1 +
call sub_44BAF0  +
call ds:__imp__errno  +
mov [eax] ebx +
xor eax eax +
jmp loc_4919E1  +
***
mov ecx [esp+2Ch] +
cmp ecx [esp+0D8h] +
jbe loc_491E90  +
mov edx [edi+4] +
mov ecx [esp+1Ch] +
mov edx [edx+1B0h] +
add eax [ecx+8] +
cmp [esp+2Ch] eax +
mov edx [edx+14h] +
jbe loc_491BA1  +
cmp edx 1 +
jbe loc_491BA1  +
mov ecx [esp+2Ch] +
lea eax [edx+eax-1] +
neg edx  +
and eax edx +
cmp ecx eax +
mov eax [esp+14h] +
cmovbe eax ecx +
mov [esp+14h] eax +
jmp loc_491BA1  +
***
mov [esp] esi +
call free  +
mov [esp] ebp +
call free  +
jmp loc_4919DF  +
***
mov eax [esp+0D8h] +
mov [esp+14h] eax +
jmp loc_491BA1  +
***
mov eax [esp+24h] +
mov [esp] eax +
call free  +
xor eax eax +
jmp loc_4919E1  +
***
mov eax [esp+4] +
movzx edx byte ptr [esp+8] +
shl eax 8 +
add eax edx +
retn   +
***
mov eax [esp+4] +
shr eax 8 +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A0h] +
mov eax [eax+930h] +
mov eax [eax+10h] +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A0h] +
mov eax [eax+930h] +
mov eax [eax] +
retn   +
***
mov eax [esp+4] +
mov eax [eax+0A0h] +
mov eax [eax+930h] +
mov eax [eax+4] +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov edx [esp+24h] +
mov eax [esp+20h] +
mov ecx [edx+4] +
cmp [eax+4] ecx +
jz loc_491F70  +
mov dword ptr [esp] 1 +
call sub_44BAF0  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [eax+0A0h] +
mov eax [eax+930h] +
mov esi [eax+0Ch] +
test esi esi +
jz loc_491FB7  +
mov ebx [edx] +
mov dword ptr [esp+4] 2Fh +
mov [esp] ebx +
call strrchr  +
mov [esp+4] esi +
test eax eax +
lea edx [eax+1] +
cmovnz ebx edx +
mov [esp] ebx +
call strcmp  +
test eax eax +
setz al  +
add esp 14h +
movzx eax al +
pop ebx  +
pop esi  +
retn   +
***
mov eax 1 +
jmp loc_491F63  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 0CCh +
mov ebx [esp+0E0h] +
lea esi [esp+54h] +
mov dword ptr [esp+4] 34h +
mov [esp] esi +
mov [esp+8] ebx +
call sub_46FAD0  +
cmp eax 34h +
jz loc_492011  +
call sub_44B8A0  +
cmp eax 1 +
jz loc_492004  +
mov dword ptr [esp] 3 +
call sub_44BAF0  +
xor eax eax +
add esp 0CCh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp byte ptr [esp+54h] 7Fh +
jnz loc_491FF8  +
cmp byte ptr [esp+55h] 45h +
jnz loc_491FF8  +
cmp byte ptr [esp+56h] 4Ch +
jnz loc_491FF8  +
cmp byte ptr [esp+57h] 46h +
jnz loc_491FF8  +
cmp byte ptr [esp+58h] 1 +
jnz loc_491FF8  +
movzx eax byte ptr [esp+59h] +
cmp al 1 +
jz loc_492260  +
cmp al 2 +
jnz loc_491FF8  +
mov eax [ebx+4] +
mov edi [eax+8] +
test edi edi +
jnz loc_491FF8  +
mov eax [eax+80h] +
mov [esp] ebx +
call eax  +
test eax eax +
jz loc_492004  +
mov ebp [ebx+0A0h] +
lea edi [ebx+4] +
mov edx esi +
mov eax edi +
mov ecx ebp +
call sub_490220  +
mov eax [ebx+4] +
movzx esi word ptr [ebp+26h] +
mov eax [eax+1B0h] +
mov ecx eax +
mov [esp+18h] eax +
mov eax [eax+8] +
cmp eax esi +
jz loc_492114  +
mov edx [ecx+16Ch] +
test edx edx +
jz loc_49209E  +
cmp esi edx +
jz loc_492114  +
mov ecx [esp+18h] +
mov edx [ecx+170h] +
test edx edx +
jz loc_4920B0  +
cmp esi edx +
jz loc_492114  +
test eax eax +
jnz loc_491FF8  +
mov eax off_4BFA14 +
mov edx [eax] +
test edx edx +
jnz loc_4920CE  +
jmp loc_492114  +
add eax 4 +
mov edx [eax] +
test edx edx +
jz loc_492114  +
cmp dword ptr [edx+4] 5 +
jnz loc_4920C5  +
mov edx [edx+1B0h] +
mov ecx [edx+174h] +
cmp byte ptr [ecx+0Ah] 20h +
jnz loc_4920C5  +
cmp esi [edx+8] +
jz loc_491FF8  +
mov ecx [edx+16Ch] +
test ecx ecx +
jz loc_492101  +
cmp esi ecx +
jz loc_491FF8  +
mov edx [edx+170h] +
test edx edx +
jz loc_4920C5  +
cmp esi edx +
jnz loc_4920C5  +
jmp loc_491FF8  +
***
mov esi [ebp+14h] +
test esi esi +
jz loc_491FF8  +
cmp word ptr [ebp+24h] 4 +
jnz loc_491FF8  +
cmp dword ptr [ebp+2Ch] 20h +
jnz loc_491FF8  +
mov edx [ebp+18h] +
mov eax [ebp+30h] +
test edx edx +
jz loc_492149  +
cmp eax 0FFFFh +
jz loc_49236F  +
cmp eax 1 +
jbe loc_4921B5  +
cmp eax 7FFFFFFh +
ja loc_491FF8  +
mov ecx [ebp+14h] +
add eax 7FFFFFFh +
xor edx edx +
shl eax 5 +
lea esi [eax+ecx] +
cmp ecx esi +
jnb loc_491FF8  +
mov dword ptr [esp+0Ch] 0 +
mov [esp+4] esi +
mov [esp+8] edx +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_492004  +
lea eax [esp+88h] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 20h +
mov [esp] eax +
call sub_46FAD0  +
cmp eax 20h +
jnz loc_492004  +
mov dword ptr [esp+0Ch] 0 +
mov eax [ebp+14h] +
mov dword ptr [esp+8] 0 +
mov [esp] ebx +
mov [esp+4] eax +
call sub_46FCE0  +
test eax eax +
jnz loc_491FF8  +
mov eax [ebp+30h] +
mov [esp] ebx +
shl eax 5 +
mov [esp+4] eax +
call sub_458A80  +
test eax eax +
mov edi eax +
mov [esp+1Ch] eax +
jz loc_492004  +
mov ecx [ebp+30h] +
mov eax [ebx+0A0h] +
test ecx ecx +
mov [eax+44h] edi +
jz loc_492277  +
lea eax [esp+88h] +
xor esi esi +
mov [esp+14h] ebp +
mov ebp eax +
jmp loc_49223F  +
mov [esp+8] edi +
add esi 1 +
add edi 20h +
mov [esp+4] ebp +
mov [esp] ebx +
call sub_490CA0  +
mov eax [esp+14h] +
cmp [eax+30h] esi +
jbe loc_492275  +
mov [esp+8] ebx +
mov dword ptr [esp+4] 20h +
mov [esp] ebp +
call sub_46FAD0  +
cmp eax 20h +
jz loc_492220  +
jmp loc_492004  +
***
mov eax [ebx+4] +
cmp dword ptr [eax+8] 1 +
jz loc_49204F  +
lea esi [esi+0] +
jmp loc_491FF8  +
***
mov ebp eax +
mov eax [esp+18h] +
mov eax [eax] +
mov dword ptr [esp+8] 0 +
mov [esp] ebx +
mov [esp+4] eax +
call sub_453750  +
test eax eax +
jnz loc_4922A4  +
mov eax [esp+18h] +
mov edx [eax+8] +
test edx edx +
jnz loc_492004  +
mov eax [esp+18h] +
mov eax [eax+30h] +
test eax eax +
jz loc_4922BC  +
mov [esp] ebx +
call eax  +
test eax eax +
jz loc_491FF8  +
mov eax [ebp+30h] +
xor esi esi +
mov edi [esp+1Ch] +
test eax eax +
jnz loc_4922DD  +
jmp loc_4923E1  +
mov eax [ebp+30h] +
add esi 1 +
add edi 20h +
cmp eax esi +
jbe loc_4922F6  +
mov [esp+8] esi +
mov [esp+4] edi +
mov [esp] ebx +
call sub_478A00  +
test eax eax +
jnz loc_4922D0  +
jmp loc_492004  +
***
test eax eax +
jz loc_4923E1  +
mov edi [esp+1Ch] +
shl eax 5 +
xor esi esi +
lea ecx [edi+eax] +
mov eax edi +
lea esi [esi+0] +
mov edx [eax+14h] +
test edx edx +
jz loc_49231F  +
add edx [eax+8] +
cmp esi edx +
cmovb esi edx +
add eax 20h +
cmp eax ecx +
jnz loc_492310  +
lea eax [esp+88h] +
mov [esp+4] eax +
mov [esp] ebx +
call sub_46FC90  +
test eax eax +
jnz loc_492361  +
mov eax [esp+0A0h] +
cmp eax esi +
jnb loc_492361  +
mov [esp+0Ch] eax +
mov [esp+8] esi +
mov [esp+4] ebx +
mov dword ptr [esp] offset aWarningBIsTrun +
call off_4BFA04  +
mov eax [ebp+10h] +
mov [ebx+74h] eax +
mov eax [ebx+4] +
jmp loc_492006  +
***
mov dword ptr [esp+0Ch] 0 +
mov [esp+4] edx +
mov dword ptr [esp+8] 0 +
mov [esp] ebx +
call sub_46FCE0  +
test eax eax +
jnz loc_492004  +
lea esi [esp+2Ch] +
mov [esp+8] ebx +
mov dword ptr [esp+4] 28h +
mov [esp] esi +
call sub_46FAD0  +
cmp eax 28h +
jnz loc_492004  +
lea eax [esp+88h] +
mov edx esi +
mov ecx eax +
mov eax edi +
call sub_490040  +
mov eax [esp+0A8h] +
test eax eax +
jnz loc_4923D9  +
mov eax [ebp+30h] +
jmp loc_492149  +
***
mov [ebp+30h] eax +
jmp loc_492149  +
***
xor esi esi +
jmp loc_492326  +
***
mov edi eax +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebp [edx] +
mov eax [esp+44h+arg_8] +
mov esi [esp+44h+arg_0] +
mov ebx [esp+44h+arg_4] +
mov eax [eax] +
test eax eax +
jz loc_492458  +
mov edi ebx +
mov eax 1 +
or edi esi +
jz loc_49244A  +
mov ecx [esp+44h+arg_C] +
cmp ebx 0 +
mov edx [ecx] +
jbe loc_492452  +
mov [esp+44h+var_38] edx +
mov [esp+44h+var_3C] ebp +
mov [esp+44h+var_40] esi +
mov [esp+44h+var_44] offset aDwarfErrorOffs +
call off_4BFA04  +
mov [esp+44h+var_44] 11h +
call sub_44BAF0  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp esi edx +
jb loc_49244A  +
jmp loc_492423  +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] edi +
mov [esp+44h+var_18] ecx +
mov [esp+44h+var_1C] edx +
call sub_44D4B0  +
mov edx [esp+44h+var_1C] +
mov ecx [esp+44h+var_18] +
test eax eax +
mov [esp+44h+var_20] eax +
jz loc_4924D0  +
mov eax [esp+44h+var_20] +
mov eax [eax+28h] +
test eax eax +
jz loc_4924C3  +
mov edx [esp+44h+arg_C] +
test ecx ecx +
mov [edx] eax +
jz loc_492521  +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_44] edi +
mov [esp+44h+var_38] ecx +
mov [esp+44h+var_3C] 0 +
mov [esp+44h+var_40] eax +
call sub_497AB0  +
mov edi [esp+44h+arg_8] +
test eax eax +
mov [edi] eax +
jnz loc_49240D  +
xor eax eax +
jmp loc_49244A  +
mov eax [esp+44h+var_20] +
mov eax [eax+24h] +
jmp loc_492487  +
mov ebp [edx+4] +
test ebp ebp +
jz loc_4924FB  +
mov [esp+44h+var_40] ebp +
mov [esp+44h+var_44] edi +
mov [esp+44h+var_18] ecx +
mov [esp+44h+var_1C] edx +
call sub_44D4B0  +
mov edx [esp+44h+var_1C] +
mov ecx [esp+44h+var_18] +
test eax eax +
mov [esp+44h+var_20] eax +
jnz loc_49247C  +
mov eax [edx] +
mov [esp+44h+var_44] offset aDwarfErrorCanT +
mov [esp+44h+var_40] eax +
call off_4BFA04  +
mov [esp+44h+var_44] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_49244A  +
mov [esp+44h+var_44] eax +
call sub_459B80  +
mov ecx [esp+44h+arg_8] +
test eax eax +
mov [ecx] eax +
jz loc_492448  +
mov ecx [esp+44h+arg_C] +
mov edx [ecx] +
mov [esp+44h+var_3C] eax +
mov eax [esp+44h+var_20] +
mov [esp+44h+var_38] 0 +
mov [esp+44h+var_34] 0 +
mov [esp+44h+var_30] edx +
mov [esp+44h+var_40] eax +
mov [esp+44h+var_44] edi +
call sub_44DCC0  +
test eax eax +
jnz loc_49240D  +
xor eax eax +
jmp loc_49244A  +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 2Ch +
mov eax [eax+1Ch] +
mov [esp+38h+var_24] edx +
mov edi [esp+38h+arg_0] +
mov [esp+38h+var_20] eax +
mov eax [esi] +
mov [esp+38h+var_34] 1Ch +
mov [esp+38h+var_38] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_492762  +
mov dword ptr [eax] 0 +
mov eax [esp+38h+var_24] +
test edi edi +
mov [ebx+4] eax +
mov eax ebp +
mov [ebx+18h] al +
mov eax [esp+38h+arg_4] +
mov [ebx+0Ch] eax +
mov eax [esp+38h+arg_8] +
mov [ebx+10h] eax +
mov eax [esp+38h+arg_C] +
mov [ebx+14h] eax +
movzx eax [esp+38h+arg_10] +
mov [ebx+19h] al +
jz loc_4925F2  +
cmp byte ptr [edi] 0 +
jnz loc_492731  +
mov dword ptr [ebx+8] 0 +
mov eax [esp+38h+var_20] +
test eax eax +
jz loc_492619  +
mov eax [eax+8] +
mov edi [eax+4] +
cmp edi [esp+38h+var_24] +
jz loc_492770  +
movzx edx byte ptr [eax+19h] +
test dl dl +
jz loc_492653  +
mov [esp+38h+var_38] 0Ch +
call sub_459B80  +
test eax eax +
jz loc_492762  +
mov edx [esi+1Ch] +
mov edi [esp+38h+var_24] +
mov [eax+8] ebx +
mov [eax+4] edx +
mov [eax] edi +
add dword ptr [esi+0Ch] 1 +
mov [esi+1Ch] eax +
mov eax 1 +
mov [esi+20h] ebx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [ebx+4] +
cmp edi ebp +
jb loc_492710  +
jz loc_492703  +
mov ecx [esi+20h] +
cmp ebp [ecx+4] +
mov [esp+38h+var_1C] ecx +
ja loc_4926B0  +
jz loc_492823  +
mov ecx [esp+38h+var_1C] +
mov ecx [ecx] +
test ecx ecx +
jz loc_492804  +
cmp ebp [ecx+4] +
ja loc_492804  +
jnz loc_4926B0  +
movzx edx byte ptr [ecx+18h] +
cmp [ebx+18h] dl +
ja loc_492804  +
lea esi [esi+0] +
jnz loc_4926B0  +
movzx edx byte ptr [ecx+19h] +
cmp [ebx+19h] dl +
jb loc_492804  +
nop   +
mov edx [eax] +
test edx edx +
jnz loc_4926E7  +
jmp loc_492850  +
cmp ebp [edx+4] +
ja loc_4927D0  +
lea esi [esi+0] +
jz loc_4927B0  +
mov ecx [edx] +
test ecx ecx +
jz loc_492800  +
mov edi [edx+4] +
mov eax edx +
mov edx ecx +
cmp ebp edi +
ja loc_4926D6  +
jnz loc_4926C0  +
movzx ecx byte ptr [eax+18h] +
cmp [ebx+18h] cl +
ja loc_4926D6  +
jnz loc_4926C0  +
movzx ecx byte ptr [eax+19h] +
cmp [ebx+19h] cl +
jb loc_4926D6  +
jmp loc_4926C0  +
movzx ecx byte ptr [eax+18h] +
cmp [ebx+18h] cl +
jbe loc_492664  +
mov [ebx] eax +
mov eax [esp+38h+var_20] +
mov [eax+8] ebx +
mov eax [esi+20h] +
test eax eax +
jz loc_492816  +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_38] edi +
call strlen  +
mov edx [esi] +
mov [esp+38h+var_38] edx +
add eax 1 +
mov [esp+38h+var_34] eax +
call sub_458A80  +
test eax eax +
mov [ebx+8] eax +
jz loc_492762  +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] eax +
call strcpy  +
jmp loc_4925F9  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx ebp +
movzx edx byte ptr [eax+19h] +
cmp [eax+18h] cl +
jnz loc_492615  +
movzx ecx dl +
cmp ecx dword ptr [esp+38h+arg_10] +
jnz loc_492615  +
cmp eax [esi+20h] +
jz loc_492859  +
mov eax [eax] +
mov [ebx] eax +
mov eax [esp+38h+var_20] +
mov [eax+8] ebx +
mov eax 1 +
jmp loc_49264B  +
movzx ecx byte ptr [edx+18h] +
cmp [ebx+18h] cl +
ja loc_4927D0  +
jnz loc_4926D6  +
movzx ecx byte ptr [edx+19h] +
cmp [ebx+19h] cl +
jnb loc_4926D6  +
lea esi [esi+0] +
mov ecx [eax] +
mov edx eax +
mov eax [esp+38h+var_20] +
mov [esi+20h] edx +
mov esi [esp+38h+var_24] +
mov [ebx] ecx +
mov [edx] ebx +
cmp esi [eax] +
jnb loc_492724  +
mov eax [esp+38h+var_20] +
mov esi [esp+38h+var_24] +
mov [eax] esi +
jmp loc_492724  +
xor ecx ecx +
jmp loc_4927D4  +
mov eax [esp+38h+var_1C] +
mov [ebx] ecx +
mov [eax] ebx +
mov eax 1 +
jmp loc_49264B  +
mov [esi+20h] ebx +
mov eax 1 +
jmp loc_49264B  +
mov ecx [esp+38h+var_1C] +
movzx ecx byte ptr [ecx+18h] +
cmp [ebx+18h] cl +
ja loc_4926B0  +
jnz loc_492676  +
mov ecx [esp+38h+var_1C] +
movzx ecx byte ptr [ecx+19h] +
cmp [ebx+19h] cl +
jb loc_4926B0  +
jmp loc_492676  +
mov edx eax +
xor ecx ecx +
jmp loc_4927D4  +
mov [esi+20h] ebx +
lea esi [esi+0] +
jmp loc_492795  +
***
push ebx  +
mov eax [esp+18h+arg_0] +
mov ebx [esp+18h+arg_4] +
test eax eax +
jz loc_492904  +
mov edx [esp+18h+arg_8] +
mov [esp+18h+var_14] ebx +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_10] edx +
call sub_44E4A0  +
test eax eax +
jz loc_492918  +
mov dword ptr [eax+0Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_14] 10h +
mov [esp+18h+var_18] ebx +
call sub_44E3F0  +
test eax eax +
jnz loc_4928E0  +
add esp 18h +
xor eax eax +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax [eax] +
mov eax [eax+34h] +
mov [esp+1Ch+var_1C] edx +
call eax  +
add esp 1Ch +
retn   +
***
jmp sub_492940  +
***
sub esp 1Ch +
mov eax [eax] +
mov eax [eax+28h] +
mov [esp+1Ch+var_1C] edx +
call eax  +
add esp 1Ch +
retn   +
***
jmp sub_492960  +
***
sub esp 1Ch +
mov eax [eax] +
mov eax [eax+1Ch] +
mov [esp+1Ch+var_1C] edx +
call eax  +
add esp 1Ch +
retn   +
***
jmp sub_492980  +
***
mov ecx [esp+arg_0] +
mov eax [edx] +
cmp [ecx] eax +
jb loc_4929C0  +
mov eax 1 +
ja loc_4929B7  +
mov edx [edx+8] +
mov ecx [ecx+8] +
mov ebx [edx+4] +
cmp [ecx+4] ebx +
jb loc_4929B7  +
ja loc_4929C0  +
movzx edx byte ptr [edx+18h] +
cmp [ecx+18h] dl +
jb loc_4929B7  +
setnbe al  +
movzx eax al +
neg eax  +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
add eax 0Ch +
cmp [eax+4] edx +
ja loc_4929DD  +
cmp edx [eax+8] +
jb loc_4929E6  +
mov eax [eax] +
test eax eax +
jnz loc_4929D3  +
xor eax eax +
retn   +
mov eax 1 +
retn   +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov eax [edx+18h] +
mov [esp+20h+var_20] ebx +
mov [esp+20h+var_1C] eax +
call sub_44D4B0  +
test eax eax +
jz loc_492A16  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+1Ch] +
test eax eax +
jz loc_492A2D  +
mov [esp+20h+var_1C] eax +
mov [esp+20h+var_20] ebx +
call sub_44D4B0  +
test eax eax +
jnz loc_492A0E  +
mov eax [ebx+64h] +
mov ebp offset a_gnu_linkonc_4 +
mov ebx 11h +
test eax eax +
jz loc_492A0E  +
nop   +
mov esi [eax] +
mov edi ebp +
mov ecx ebx +
cmps   +
jz loc_492A0E  +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_492A40  +
xor eax eax +
jmp loc_492A0E  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
test ecx ecx +
jz loc_492ADA  +
mov ebx [ecx+0Ch] +
test ebx ebx +
jz loc_492AD0  +
mov eax [edx+18h] +
mov [esp+28h+var_1C] eax +
jmp loc_492AAC  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_492A97  +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] esi +
call strcmp  +
test eax eax +
jz loc_492AC2  +
mov edi offset a_gnu_linkonc_4 +
mov ecx 11h +
cmps   +
jz loc_492AC2  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_492AD0  +
mov esi [ebx] +
mov eax [esp+28h+var_1C] +
mov [esp+28h+var_28] esi +
mov [esp+28h+var_24] eax +
call strcmp  +
test eax eax +
jnz loc_492A80  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4929F0  +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
cmp ecx edi +
jz loc_492B41  +
mov esi [edx+8] +
mov ebx edx +
test esi esi +
jnz loc_492B2E  +
mov [edx+4] ecx +
mov eax 1 +
mov [edx+8] edi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp edi [ebx+4] +
jz loc_492B50  +
mov ebx [ebx] +
test ebx ebx +
jz loc_492B60  +
mov esi [ebx+8] +
cmp ecx esi +
jnz loc_492B20  +
mov [ebx+8] edi +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [ebx+4] ecx +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax] +
mov [esp-0Ch+arg_0] 0Ch +
mov [esp-0Ch+arg_8] ecx +
mov [esp-0Ch+arg_4] edx +
mov [esp+0] eax +
call sub_458A80  +
test eax eax +
jz loc_492B9E  +
mov ecx [esp-0Ch+arg_8] +
mov edx [esp-0Ch+arg_4] +
mov [eax+8] edi +
mov [eax+4] ecx +
mov ecx [edx] +
mov [eax] ecx +
mov [edx] eax +
add esp 10h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor eax eax +
jmp loc_492B12  +
***
push ebx  +
sub esp 10h +
mov eax [eax+4] +
mov esi [esp+10h+arg_0] +
cmp dword ptr [eax+4] 5 +
jz loc_492C07  +
movzx ebx dl +
add ebx ecx +
cmp esi ebx +
jb loc_492C50  +
cmp dl 4 +
jz loc_492C90  +
cmp dl 8 +
jz loc_492C70  +
cmp dl 2 +
jz loc_492CA0  +
mov [esp+10h+var_8] offset aRead_address +
mov [esp+10h+var_C] 346h +
mov [esp+10h+var_10] offset a____Binutil_27 +
call sub_44BA70  +
mov ebx [eax+1B0h] +
movzx edi dl +
add edi ecx +
movzx ebx byte ptr [ebx+1ACh] +
shr bl 7 +
cmp esi edi +
jb loc_492C50  +
test bl bl +
jz loc_492BD0  +
cmp dl 4 +
jz loc_492C75  +
cmp dl 8 +
jz loc_492C60  +
cmp dl 2 +
jz loc_492C80  +
mov [esp+10h+var_8] offset aRead_address +
mov [esp+10h+var_C] 338h +
mov [esp+10h+var_10] offset a____Binutil_27 +
call sub_44BA70  +
nop   +
xor eax eax +
xor edx edx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [eax+20h] +
mov [esp+10h+arg_0] ecx +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
mov eax [eax+1Ch] +
jmp loc_492C63  +
mov eax [eax+2Ch] +
mov [esp+10h+var_10] ecx +
call eax  +
cdq   +
jmp loc_492C54  +
mov eax [eax+38h] +
mov [esp+10h+var_10] ecx +
call eax  +
cdq   +
jmp loc_492C54  +
mov eax [eax+28h] +
mov [esp+10h+var_10] ecx +
call eax  +
xor edx edx +
jmp loc_492C54  +
mov eax [eax+34h] +
mov [esp+10h+var_10] ecx +
call eax  +
xor edx edx +
jmp loc_492C54  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
mov eax [eax+5Ch] +
mov [esp+2Ch+var_14] edx +
mov esi [esp+2Ch+arg_0] +
mov [esp+2Ch+var_1C] eax +
mov eax [ebx+50h] +
mov edi [eax+54h] +
test edi edi +
jz loc_492D6F  +
add esi edi +
jb loc_492DA3  +
movzx edx byte ptr [ebx+58h] +
add edi [eax+58h] +
lea eax [ebx+8] +
mov [esp+2Ch+var_10] eax +
movzx ecx dl +
mov [esp+2Ch+var_18] edi +
jmp loc_492CFE  +
cmp ebp 0FFFFFFFFh +
jnz loc_492D46  +
mov [esp+2Ch+var_1C] eax +
mov edi [esp+2Ch+var_18] +
lea eax [esi+ecx*2] +
cmp edi eax +
jb loc_492DA3  +
mov eax [ebx+8] +
mov ecx esi +
mov [esp+2Ch+var_2C] edi +
call sub_492BB0  +
movzx edx byte ptr [ebx+58h] +
mov [esp+2Ch+var_2C] edi +
mov ebp eax +
movzx eax dl +
add esi eax +
mov eax [ebx+8] +
mov ecx esi +
call sub_492BB0  +
movzx edx byte ptr [ebx+58h] +
movzx ecx dl +
add esi ecx +
mov edi eax +
or edi ebp +
jz loc_492DB0  +
cmp eax 0FFFFFFFFh +
jnz loc_492CF5  +
mov edi [esp+2Ch+var_1C] +
mov edx [esp+2Ch+var_14] +
add eax edi +
mov [esp+2Ch+var_2C] eax +
mov eax [esp+2Ch+var_10] +
lea ecx [ebp+edi+0] +
call sub_492AF0  +
test eax eax +
jz loc_492DA3  +
movzx edx byte ptr [ebx+58h] +
mov eax edi +
movzx ecx dl +
jmp loc_492CFA  +
mov edi [eax+8] +
lea edx [eax+58h] +
add eax 54h +
mov ecx [eax-1Ch] +
mov [esp+2Ch+var_24] eax +
mov eax [ebx+8] +
mov [esp+2Ch+var_20] edx +
add edi 58h +
mov [esp+2Ch+var_2C] 0 +
mov edx edi +
mov [esp+2Ch+var_28] 0 +
call sub_4923F0  +
test eax eax +
jnz loc_492DBD  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+50h] +
mov edi [eax+54h] +
jmp loc_492CD6  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx ecx +
sub esp 3Ch +
mov edi [ecx+8] +
mov eax [esp+40h+arg_4] +
cmp [esp+40h+arg_0] eax +
jnb loc_492EA0  +
cmp edx 0Fh +
mov [esi+4] edx +
jz loc_492F55  +
ja loc_492E50  +
cmp edx 8 +
jz loc_4933E5  +
ja loc_492EC5  +
cmp edx 4 +
lea esi [esi+0] +
jz loc_4932C5  +
jbe loc_492FD0  +
cmp edx 6 +
nop   +
jz loc_492E7C  +
ja loc_492F33  +
mov eax [esp+40h+arg_0] +
xor ecx ecx +
xor ebx ebx +
lea ebp [eax+2] +
cmp [esp+40h+arg_4] ebp +
jnb loc_4931C7  +
mov [esi+0Ch] ebx +
mov eax ebp +
mov [esi+8] ecx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edx 16h +
jz loc_493320  +
ja loc_492F05  +
cmp edx 12h +
jz loc_492E28  +
jbe loc_492F94  +
cmp edx 14h +
lea esi [esi+0] +
jz loc_492F33  +
ja loc_492F55  +
mov eax [esp+40h+arg_0] +
xor ecx ecx +
xor ebx ebx +
lea ebp [eax+4] +
cmp [esp+40h+arg_4] ebp +
jb loc_492E3D  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
xor ebx ebx +
call sub_492940  +
mov ecx eax +
jmp loc_492E3D  +
mov [esp+40h+var_40] offset aDwarfErrorInfo +
call off_4BFA04  +
mov [esp+40h+var_40] 11h +
call sub_44BAF0  +
mov eax [esp+40h+arg_0] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edx 0Bh +
jz loc_492EE6  +
jbe loc_4931E0  +
cmp edx 0Dh +
jz loc_4932B0  +
lea esi [esi+0] +
ja loc_493124  +
mov eax [esp+40h+arg_0] +
xor ecx ecx +
xor ebx ebx +
lea ebp [eax+1] +
cmp [esp+40h+arg_4] ebp +
jb loc_492E3D  +
movzx ecx byte ptr [eax] +
xor ebx ebx +
jmp loc_492E3D  +
cmp edx 19h +
jz loc_4933A4  +
nop   +
jbe loc_493235  +
cmp edx 1F20h +
jz loc_493370  +
cmp edx 1F21h +
jz loc_493081  +
cmp edx 20h +
jnz loc_492FA6  +
mov eax [esp+40h+arg_0] +
xor edx edx +
lea ebp [eax+8] +
xor eax eax +
cmp [esp+40h+arg_4] ebp +
jnb loc_4933C0  +
mov [esi+8] eax +
mov eax ebp +
mov [esi+0Ch] edx +
jmp loc_492EBD  +
mov eax [esp+40h+arg_4] +
mov [esp+40h+var_34] 0 +
mov [esp+40h+var_30] eax +
lea eax [esp+40h+var_14] +
mov [esp+40h+var_38] eax +
mov eax [esp+40h+arg_0] +
mov [esp+40h+var_40] edi +
mov [esp+40h+var_3C] eax +
call sub_45A740  +
mov dword ptr [esi+0Ch] 0 +
mov [esi+8] eax +
mov eax [esp+40h+arg_0] +
add eax [esp+40h+var_14] +
jmp loc_492EBD  +
cmp edx 10h +
jz loc_493044  +
cmp edx 11h +
jz loc_492EE6  +
mov [esp+40h+var_3C] edx +
mov [esp+40h+var_40] offset aDwarfErrorIn_0 +
call off_4BFA04  +
mov [esp+40h+var_40] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_492EBD  +
cmp edx 1 +
jz loc_493018  +
cmp edx 3 +
jnz loc_492FA6  +
mov [esp+40h+var_3C] 8 +
mov [esp+40h+var_40] edi +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_492FC3  +
mov eax [esp+40h+arg_0] +
lea ecx [eax+2] +
cmp [esp+40h+arg_4] ecx +
jnb loc_493414  +
mov dword ptr [ebx] 0 +
mov ebp ecx +
xor ecx ecx +
mov [ebx+4] ecx +
mov eax ebp +
mov [esi+8] ebx +
jmp loc_492EBD  +
mov edi [esp+40h+arg_4] +
mov eax [ebx+8] +
movzx edx byte ptr [ebx+58h] +
mov ecx [esp+40h+arg_0] +
mov [esp+40h+var_40] edi +
call sub_492BB0  +
mov [esi+8] eax +
mov eax [esp+40h+arg_0] +
mov [esi+0Ch] edx +
movzx ebp byte ptr [ebx+58h] +
add eax ebp +
jmp loc_492EBD  +
mov eax [ecx+54h] +
sub eax 3 +
cmp eax 1 +
ja loc_493018  +
cmp byte ptr [ecx+59h] 4 +
mov eax [esp+40h+arg_0] +
jz loc_4935A9  +
lea ecx [eax+8] +
xor edx edx +
xor eax eax +
cmp [esp+40h+arg_4] ecx +
jnb loc_4935CD  +
mov [esi+8] eax +
mov [esi+0Ch] edx +
movzx eax byte ptr [ebx+59h] +
add eax [esp+40h+arg_0] +
jmp loc_492EBD  +
movzx eax byte ptr [ecx+59h] +
mov edx [esp+40h+arg_0] +
mov ebp [ecx+50h] +
movzx ecx al +
add edx ecx +
cmp [esp+40h+arg_4] edx +
jb loc_4934E0  +
cmp al 4 +
mov eax [esp+40h+arg_0] +
jz loc_493445  +
add eax 8 +
cmp [esp+40h+arg_4] eax +
jnb loc_49350D  +
xor edi edi +
mov [esp+40h+var_2C] 0 +
mov eax [ebp+20h] +
mov [esp+40h+var_14] ecx +
test eax eax +
jz loc_493528  +
mov ecx [ebp+8] +
mov eax [ebx+50h] +
lea edx [ecx+78h] +
lea ecx [ebp+28h] +
mov eax [eax+20h] +
mov [esp+40h+var_34] ecx +
lea ecx [ebp+24h] +
mov [esp+40h+var_38] ecx +
mov ecx [esp+40h+var_2C] +
mov [esp+40h+var_40] edi +
mov [esp+40h+var_3C] ecx +
xor ecx ecx +
call sub_4923F0  +
test eax eax +
jz loc_493110  +
cmp [esp+40h+var_2C] 0 +
mov eax [ebp+28h] +
ja loc_493110  +
cmp edi eax +
jb loc_4933D1  +
nop   +
mov ebp [esp+40h+var_14] +
xor edi edi +
mov eax [esp+40h+arg_0] +
mov [esi+8] edi +
add eax ebp +
jmp loc_492EBD  +
movzx eax byte ptr [ecx+59h] +
mov edx [esp+40h+arg_0] +
mov ebp [ecx+50h] +
movzx ecx al +
add edx ecx +
cmp [esp+40h+arg_4] edx +
jb loc_4934E0  +
cmp al 4 +
mov eax [esp+40h+arg_0] +
mov [esp+40h+var_28] edi +
jz loc_493471  +
add eax 8 +
cmp [esp+40h+arg_4] eax +
jnb loc_4934E9  +
xor edi edi +
mov [esp+40h+var_2C] 0 +
mov eax [ebp+8] +
mov [esp+40h+var_14] ecx +
mov ecx [ebp+38h] +
mov [esp+40h+var_40] edi +
lea edx [eax+70h] +
lea eax [ebp+50h] +
mov [esp+40h+var_34] eax +
lea eax [ebp+4Ch] +
mov [esp+40h+var_38] eax +
mov eax [esp+40h+var_2C] +
mov [esp+40h+var_3C] eax +
mov eax [esp+40h+var_28] +
call sub_4923F0  +
test eax eax +
jz loc_493110  +
cmp [esp+40h+var_2C] 0 +
mov eax [ebp+50h] +
ja loc_493110  +
cmp edi eax +
jnb loc_493110  +
add edi [ebp+4Ch] +
cmp byte ptr [edi] 0 +
jz loc_493110  +
mov ebp [esp+40h+var_14] +
jmp loc_493116  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
xor ebx ebx +
call sub_492920  +
mov ecx eax +
jmp loc_492E3D  +
cmp edx 9 +
jz loc_493247  +
cmp edx 0Ah +
jnz loc_492FA6  +
mov [esp+40h+var_3C] 8 +
mov [esp+40h+var_40] edi +
call sub_458A80  +
test eax eax +
jz loc_492FC3  +
mov edi [esp+40h+arg_0] +
lea edx [edi+1] +
cmp [esp+40h+arg_4] edx +
jb loc_493405  +
movzx ebp byte ptr [edi] +
mov [eax] ebp +
add ebp edx +
cmp [esp+40h+arg_4] ebp +
jb loc_4935FD  +
mov [eax+4] edx +
mov [esi+8] eax +
mov eax ebp +
jmp loc_492EBD  +
cmp edx 17h +
jz loc_493370  +
cmp edx 18h +
jnz loc_492FA6  +
mov [esp+40h+var_3C] 8 +
mov [esp+40h+var_40] edi +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_492FC3  +
mov eax [esp+40h+arg_4] +
mov [esp+40h+var_34] 0 +
mov [esp+40h+var_40] edi +
mov [esp+40h+var_30] eax +
lea eax [esp+40h+var_14] +
mov [esp+40h+var_38] eax +
mov eax [esp+40h+arg_0] +
mov [esp+40h+var_3C] eax +
call sub_45A740  +
mov ecx [esp+40h+arg_0] +
xor edx edx +
add ecx [esp+40h+var_14] +
lea ebp [ecx+eax] +
cmp [esp+40h+arg_4] ebp +
mov [ebx] eax +
mov eax ebp +
cmovnb edx ecx +
mov [ebx+4] edx +
mov [esi+8] ebx +
jmp loc_492EBD  +
mov eax [esp+40h+arg_4] +
mov [esp+40h+var_34] 1 +
mov [esp+40h+var_30] eax +
jmp loc_492F65  +
mov [esp+40h+var_3C] 8 +
mov [esp+40h+var_40] edi +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_492FC3  +
mov eax [esp+40h+arg_0] +
lea ecx [eax+4] +
cmp [esp+40h+arg_4] ecx +
jb loc_493001  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
mov [esp+40h+var_2C] ecx +
call sub_492940  +
mov ecx [esp+40h+var_2C] +
mov [ebx] eax +
lea ebp [ecx+eax] +
cmp [esp+40h+arg_4] ebp +
jnb loc_49300B  +
mov ecx ebp +
jmp loc_493007  +
mov eax [esp+40h+arg_4] +
mov [esp+40h+var_40] edi +
mov [esp+40h+var_34] 0 +
mov [esp+40h+var_30] eax +
lea eax [esp+40h+var_14] +
mov [esp+40h+var_38] eax +
mov eax [esp+40h+arg_0] +
mov [esp+40h+var_3C] eax +
call sub_45A740  +
mov edx [esp+40h+arg_0] +
mov ecx ebx +
mov edi [esp+40h+arg_4] +
add edx [esp+40h+var_14] +
mov [esp+40h+var_3C] edi +
mov [esp+40h+var_40] edx +
mov edx eax +
mov eax esi +
call sub_492DD0  +
jmp loc_492EBD  +
cmp byte ptr [ebx+59h] 4 +
mov eax [esp+40h+arg_0] +
jz loc_493429  +
lea ecx [eax+8] +
xor edx edx +
xor eax eax +
cmp [esp+40h+arg_4] ecx +
jnb loc_4934CF  +
mov [esi+8] eax +
mov [esi+0Ch] edx +
movzx ebp byte ptr [ebx+59h] +
mov eax [esp+40h+arg_0] +
add eax ebp +
jmp loc_492EBD  +
mov dword ptr [esi+8] 1 +
mov eax [esp+40h+arg_0] +
mov dword ptr [esi+0Ch] 0 +
jmp loc_492EBD  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
call sub_492960  +
jmp loc_492F48  +
add edi [ebp+24h] +
cmp byte ptr [edi] 0 +
jnz loc_4931BE  +
lea esi [esi+0] +
jmp loc_493110  +
mov eax [esp+40h+arg_0] +
cmp byte ptr [eax] 0 +
jnz loc_4934A6  +
mov eax 1 +
xor edx edx +
mov [esi+8] edx +
add eax [esp+40h+arg_0] +
jmp loc_492EBD  +
mov dword ptr [eax] 0 +
mov ebp edx +
xor edx edx +
jmp loc_493228  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
mov [esp+40h+var_2C] ecx +
call sub_492920  +
jmp loc_493300  +
add eax 4 +
xor edx edx +
xor ecx ecx +
cmp [esp+40h+arg_4] eax +
jnb loc_493594  +
mov [esi+8] edx +
mov [esi+0Ch] ecx +
jmp loc_493395  +
add eax 4 +
cmp [esp+40h+arg_4] eax +
jb loc_4930B4  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
call sub_492940  +
movzx ecx byte ptr [ebx+59h] +
mov [esp+40h+var_2C] 0 +
mov edi eax +
jmp loc_4930BE  +
add eax 4 +
cmp [esp+40h+arg_4] eax +
jb loc_49315B  +
mov edx [esp+40h+arg_0] +
mov eax edi +
add eax 4 +
call sub_492940  +
mov edi [ebx+8] +
movzx ecx byte ptr [ebx+59h] +
mov [esp+40h+var_2C] 0 +
mov [esp+40h+var_28] edi +
mov edi eax +
jmp loc_493165  +
mov eax [esp+40h+arg_0] +
mov edx [esp+40h+arg_4] +
add eax 1 +
jmp loc_4934C0  +
add eax 1 +
cmp byte ptr [eax-1] 0 +
jz loc_493587  +
cmp eax edx +
jnz loc_4934B3  +
sub eax [esp+40h+arg_0] +
xor edx edx +
jmp loc_4933F9  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
call sub_492960  +
jmp loc_49338F  +
xor ebp ebp +
xor edi edi +
jmp loc_493116  +
mov edx [esp+40h+arg_0] +
mov eax edi +
add eax 4 +
call sub_492960  +
movzx ecx byte ptr [ebx+59h] +
mov edi eax +
mov eax [ebx+8] +
mov [esp+40h+var_2C] edx +
mov [esp+40h+var_28] eax +
jmp loc_493165  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
call sub_492960  +
movzx ecx byte ptr [ebx+59h] +
mov edi eax +
mov [esp+40h+var_2C] edx +
jmp loc_4930BE  +
mov eax [ebx+8] +
mov [esp+40h+var_3C] offset aHomeJenkinsM_3 +
mov [esp+40h+var_40] eax +
call sub_458EC0  +
test eax eax +
mov [esp+40h+var_28] eax +
jz loc_493110  +
mov eax [esp+40h+var_28] +
mov [esp+40h+var_3C] 0 +
mov [esp+40h+var_40] eax +
call sub_4585B0  +
test eax eax +
jz loc_4935E6  +
mov [esp+40h+var_3C] 1 +
mov [esp+40h+var_40] eax +
mov [esp+40h+var_24] eax +
call sub_454030  +
mov edx [esp+40h+var_24] +
test eax eax +
jz loc_4935DE  +
mov [ebp+20h] edx +
jmp loc_4930CD  +
sub eax [esp+40h+arg_0] +
mov edx [esp+40h+arg_0] +
jmp loc_4933F9  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
call sub_492940  +
xor ecx ecx +
mov edx eax +
jmp loc_49343A  +
lea ecx [eax+4] +
xor edx edx +
xor eax eax +
cmp [esp+40h+arg_4] ecx +
jb loc_49306E  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
call sub_492940  +
xor edx edx +
jmp loc_49306E  +
mov edx [esp+40h+arg_0] +
lea eax [edi+4] +
call sub_492960  +
jmp loc_49306E  +
mov [esp+40h+var_40] edx +
call sub_4586F0  +
mov eax [esp+40h+var_28] +
xor edi edi +
mov [esp+40h+var_40] eax +
call free  +
mov ebp [esp+40h+var_14] +
jmp loc_493116  +
mov edx ebp +
jmp loc_49340B  +
***
push esi  +
push ebx  +
sub esp 2Ch +
lea ecx [edx-1] +
cmp ecx [eax+4] +
jb loc_493640  +
test edx edx +
jnz loc_493700  +
mov [esp+2Ch+var_2C] offset aUnknown_3 +
call _strdup  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add edx 0FFFFFFFh +
shl edx 4 +
add edx [eax+18h] +
mov ebx [edx] +
movzx ecx byte ptr [ebx] +
cmp cl 5Ch +
jz loc_4936F0  +
cmp cl 2Fh +
jz loc_4936F0  +
test cl cl +
jnz loc_4936E2  +
mov edx [edx+4] +
test edx edx +
jz loc_493677  +
cmp edx [eax+8] +
jbe loc_493712  +
mov edi [eax+10h] +
test edi edi +
jz loc_4936F0  +
xor esi esi +
mov [esp+2Ch+var_2C] edi +
call strlen  +
mov [esp+2Ch+var_2C] ebx +
mov ebp eax +
call strlen  +
add ebp eax +
test esi esi +
jz loc_493798  +
mov [esp+2Ch+var_2C] esi +
call strlen  +
lea eax [ebp+eax+3] +
mov [esp+2Ch+var_2C] eax +
call sub_459B80  +
mov ebp eax +
xor eax eax +
test ebp ebp +
jz loc_493633  +
mov [esp+2Ch+var_1C] ebx +
mov [esp+2Ch+var_20] esi +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] offset aSSS_0 +
call sprintf  +
add esp 2Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [ebx+1] 3Ah +
jnz loc_493667  +
lea esi [esi+0] +
mov [esp+2Ch+var_2C] ebx +
call _strdup  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+2Ch+var_2C] offset aDwarfErrorMang +
call off_4BFA04  +
jmp loc_493627  +
mov ecx [eax+14h] +
test ecx ecx +
jz loc_493677  +
mov esi [ecx+edx*4-4] +
test esi esi +
jz loc_493677  +
movzx edx byte ptr [esi] +
cmp dl 5Ch +
jz loc_493745  +
cmp dl 2Fh +
jz loc_493745  +
test dl dl +
jnz loc_493790  +
mov edi [eax+10h] +
test edi edi +
jnz loc_493680  +
mov [esp+2Ch+var_2C] esi +
call strlen  +
mov [esp+2Ch+var_2C] ebx +
mov edi eax +
call strlen  +
lea ebp [edi+eax+2] +
mov [esp+2Ch+var_2C] ebp +
call sub_459B80  +
mov edi eax +
xor eax eax +
test edi edi +
jz loc_493633  +
mov [esp+2Ch+var_20] ebx +
mov [esp+2Ch+var_24] esi +
mov [esp+2Ch+var_28] offset aSS_26 +
mov [esp+2Ch+var_2C] edi +
call sprintf  +
mov eax edi +
jmp loc_493633  +
cmp byte ptr [esi+1] 3Ah +
jnz loc_49373A  +
jmp loc_493745  +
add ebp 2 +
mov esi edi +
jmp loc_49375B  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 7Ch +
mov ecx [edx+38h] +
mov [esp+80h+var_34] eax +
mov eax [eax+8] +
mov edi eax +
mov [esp+80h+var_68] eax +
mov eax [edx+8] +
lea edx [eax+28h] +
lea eax [ebx+48h] +
mov [esp+80h+var_74] eax +
lea eax [ebx+44h] +
mov [esp+80h+var_78] eax +
mov eax [esi+38h] +
mov [esp+80h+var_7C] 0 +
mov [esp+80h+var_80] eax +
mov eax edi +
call sub_4923F0  +
test eax eax +
jz loc_4938DD  +
mov edi [esp+80h+var_68] +
mov [esp+80h+var_7C] 24h +
mov [esp+80h+var_80] edi +
call sub_458A80  +
test eax eax +
mov esi eax +
mov [esp+80h+var_6C] eax +
jz loc_4938DD  +
mov [eax] edi +
mov eax [esp+80h+var_34] +
mov eax [eax+28h] +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi+18h] 0 +
mov dword ptr [esi+8] 0 +
mov [esi+10h] eax +
mov eax [ebx+48h] +
mov dword ptr [esi+14h] 0 +
mov dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+1Ch] 0 +
cmp eax 0Fh +
mov dword ptr [esi+20h] 0 +
jbe loc_49442E  +
mov esi [esp+80h+var_34] +
mov edx [ebx+44h] +
mov edi [esi+38h] +
lea ebp [edx+eax] +
mov eax [esp+80h+var_68] +
add edi edx +
lea esi [edi+4] +
add eax 4 +
cmp ebp esi +
mov [esp+80h+var_30] eax +
jnb loc_4938E7  +
mov eax [esp+80h+var_34] +
cmp byte ptr [eax+58h] 8 +
jz loc_494157  +
mov edi 4 +
xor eax eax +
lea ebp [esi+eax] +
xor eax eax +
lea ebx [esi+2] +
cmp ebp ebx +
jnb loc_493942  +
mov [esp+80h+var_7C] eax +
mov [esp+80h+var_80] offset aDwarfErrorUnha +
call off_4BFA04  +
mov [esp+80h+var_80] 11h +
call sub_44BAF0  +
xor eax eax +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [esp+0] offset aDwarfErrorRanO +
call off_4BFA04  +
mov dword ptr [esp+0] 11h +
call sub_44BAF0  +
add esp 7Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+80h+var_30] +
mov edx edi +
call sub_492940  +
cmp eax 0FFFFFFFFh +
jnz loc_4944BC  +
add edi 0Ch +
xor eax eax +
cmp ebp edi +
jnb loc_49416E  +
mov esi edi +
mov edi 8 +
mov edx [ebx+48h] +
cmp edx eax +
jnb loc_49388D  +
mov [esp+80h+var_7C] eax +
mov [esp+80h+var_78] edx +
mov [esp+80h+var_80] offset aDwarfErrorLine +
call off_4BFA04  +
mov [esp+80h+var_80] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_4938BC  +
mov eax [esp+80h+var_30] +
mov edx esi +
call sub_492920  +
mov ecx eax +
lea eax [eax-2] +
cmp ax 2 +
ja loc_4944B4  +
xor eax eax +
cmp cx 4 +
setz al  +
lea eax [edi+eax+5] +
add eax ebx +
cmp ebp eax +
jbe loc_494452  +
cmp edi 4 +
jz loc_4941E4  +
add esi 0Ah +
cmp ebp esi +
jnb loc_49423F  +
add ebx edi +
lea eax [ebx+1] +
cmp ebp eax +
mov [esp+80h+var_40] 0 +
jb loc_49399F  +
movzx esi byte ptr [ebx] +
mov [esp+80h+var_40] esi +
cmp cx 4 +
jnz loc_4939D0  +
lea eax [ebx+2] +
cmp ebp eax +
jnb loc_494142  +
mov [esp+80h+var_80] offset aDwarfErrorInva +
call off_4BFA04  +
mov [esp+80h+var_80] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_4938BC  +
mov [esp+80h+var_49] 1 +
lea edx [eax+2] +
cmp ebp edx +
mov [esp+80h+var_38] 0 +
jb loc_4939F5  +
movzx esi byte ptr [eax+1] +
lea edx [esi-80h] +
movzx edx dl +
lea esi [edx-80h] +
mov [esp+80h+var_38] esi +
lea edx [eax+3] +
cmp ebp edx +
jb loc_4940E5  +
movzx ecx byte ptr [eax+2] +
movzx esi cl +
mov [esp+80h+var_4A] cl +
mov [esp+80h+var_28] esi +
lea esi [eax+4] +
cmp ebp esi +
jb loc_4940CE  +
movzx eax byte ptr [eax+3] +
mov [esp+80h+var_4B] al +
mov [esp+80h+var_5C] eax +
sub eax 1 +
add eax esi +
cmp ebp eax +
jbe loc_4938C4  +
mov edi [esp+80h+var_5C] +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_7C] edi +
mov [esp+80h+var_80] eax +
call sub_458A80  +
cmp edi 1 +
mov [esp+80h+var_2C] eax +
mov ebx eax +
mov byte ptr [eax] 1 +
jbe loc_493A7E  +
add eax 1 +
add ebx edi +
mov edx esi +
lea esi [esi+0] +
add edx 1 +
xor ecx ecx +
cmp ebp edx +
jb loc_493A6D  +
movzx ecx byte ptr [edx-1] +
mov [eax] cl +
add eax 1 +
cmp eax ebx +
jnz loc_493A60  +
mov eax [esp+80h+var_5C] +
lea esi [esi+eax-1] +
cmp esi ebp +
jnb loc_494030  +
movzx eax byte ptr [esi] +
test al al +
jz loc_494057  +
test al al +
lea ebx [esi+1] +
jnz loc_493AAD  +
jmp loc_493E71  +
add ebx 1 +
cmp byte ptr [ebx-1] 0 +
jz loc_493E71  +
cmp ebp ebx +
nop   +
ja loc_493AA0  +
sub ebx esi +
mov [esp+80h+var_14] ebx +
add ebx esi +
cmp ebp ebx +
jbe loc_494048  +
movzx eax byte ptr [ebx] +
test al al +
jz loc_493FD9  +
mov edi [esp+80h+var_6C] +
lea esi [esp+80h+var_14] +
test al al +
lea edx [ebx+1] +
jnz loc_493AEE  +
jmp loc_493EF0  +
add edx 1 +
cmp byte ptr [edx-1] 0 +
jz loc_493EF0  +
cmp ebp edx +
ja loc_493AE1  +
mov edi edx +
sub edi ebx +
mov [esp+80h+var_14] edi +
add edi ebx +
cmp ebp edi +
jbe loc_49430C  +
mov eax [esp+80h+var_5C] +
mov [esp+80h+var_48] 0FFh +
sub [esp+80h+var_48] eax +
mov [esp+80h+var_64] ebp +
mov eax [esp+80h+var_6C] +
mov [esp+80h+var_44] 0 +
mov edx [eax+4] +
test edx edx +
jnz loc_494257  +
mov [esp+80h+var_50] 0 +
xor esi esi +
mov [esp+80h+var_54] 0FFFFFFFFh +
mov [esp+80h+var_5C] 0 +
mov [esp+80h+var_3C] 0 +
mov [esp+80h+var_58] 1 +
mov byte ptr [esp+80h+var_60] 0 +
nop   +
lea ebx [edi+1] +
cmp [esp+80h+var_64] ebx +
jb loc_493C3E  +
movzx ecx byte ptr [edi] +
cmp cl [esp+80h+var_4B] +
movzx ebp cl +
jb loc_493C4C  +
sub cl [esp+80h+var_4B] +
cmp [esp+80h+var_4A] 0 +
jz loc_493DE4  +
cmp [esp+80h+var_49] 1 +
jz loc_494018  +
movzx ecx cl +
movzx edx byte ptr [esp+80h+var_60] +
mov eax ecx +
movzx edi [esp+80h+var_49] +
div  [esp+80h+var_4A] +
movzx eax al +
add eax edx +
cdq   +
idiv  edi +
imul eax [esp+80h+var_40] +
mov byte ptr [esp+80h+var_60] dl +
add esi eax +
mov eax ecx +
div  [esp+80h+var_4A] +
movzx eax ah +
add eax [esp+80h+var_38] +
add [esp+80h+var_58] eax +
mov eax [esp+80h+var_5C] +
mov edx esi +
movzx ecx byte ptr [esp+80h+var_60] +
mov [esp+80h+var_70] 0 +
mov [esp+80h+var_74] eax +
mov eax [esp+80h+var_3C] +
mov [esp+80h+var_78] eax +
mov eax [esp+80h+var_58] +
mov [esp+80h+var_7C] eax +
mov eax [esp+80h+var_44] +
mov [esp+80h+var_80] eax +
mov eax [esp+80h+var_6C] +
call sub_492580  +
test eax eax +
jz loc_493DE4  +
mov eax [esp+80h+var_54] +
mov edi ebx +
lea ebx [edi+1] +
mov [esp+80h+var_5C] 0 +
cmp eax esi +
cmova eax esi +
mov [esp+80h+var_54] eax +
mov eax [esp+80h+var_50] +
cmp eax esi +
cmovb eax esi +
cmp [esp+80h+var_64] ebx +
mov [esp+80h+var_50] eax +
jnb loc_493B6D  +
xor ecx ecx +
xor ebp ebp +
cmp cl [esp+80h+var_4B] +
jnb loc_493B7D  +
cmp ebp 9 +
ja loc_49406D  +
jmp ds:off_505B50[ebp*4]  +
mov edi ebx +
nop   +
jmp loc_493B60  +
add edi 3 +
xor eax eax +
cmp [esp+80h+var_64] edi +
jnb loc_49422F  +
add esi eax +
mov byte ptr [esp+80h+var_60] 0 +
jmp loc_493B60  +
mov eax [esp+80h+var_64] +
lea ebp [esp+80h+var_14] +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] ebp +
mov [esp+80h+var_7C] ebx +
mov [esp+80h+var_70] eax +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_80] eax +
call sub_45A740  +
mov edi [esp+80h+var_14] +
add edi ebx +
mov [esp+80h+var_3C] eax +
jmp loc_493B60  +
mov eax [esp+80h+var_64] +
lea ebp [esp+80h+var_14] +
mov [esp+80h+var_78] ebp +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_7C] ebx +
mov [esp+80h+var_70] eax +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_80] eax +
call sub_45A740  +
mov edi [esp+80h+var_14] +
add edi ebx +
mov ebp eax +
mov eax [esp+80h+var_44] +
test eax eax +
jz loc_493CF7  +
mov [esp+80h+var_80] eax +
call free  +
mov eax [esp+80h+var_6C] +
mov edx ebp +
call sub_493610  +
mov [esp+80h+var_44] eax +
jmp loc_493B60  +
mov eax [esp+80h+var_64] +
lea ebp [esp+80h+var_14] +
mov [esp+80h+var_74] 1 +
mov [esp+80h+var_78] ebp +
mov [esp+80h+var_7C] ebx +
mov [esp+80h+var_70] eax +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_80] eax +
call sub_45A740  +
add [esp+80h+var_58] eax +
mov edi [esp+80h+var_14] +
add edi ebx +
jmp loc_493B60  +
mov eax [esp+80h+var_64] +
lea ebp [esp+80h+var_14] +
cmp [esp+80h+var_49] 1 +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] ebp +
mov [esp+80h+var_70] eax +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_7C] ebx +
mov [esp+80h+var_80] eax +
jz loc_49421E  +
call sub_45A740  +
movzx edx byte ptr [esp+80h+var_60] +
movzx ecx [esp+80h+var_49] +
add eax edx +
xor edx edx +
div  ecx +
imul eax [esp+80h+var_40] +
mov byte ptr [esp+80h+var_60] dl +
mov esi eax +
jmp loc_493D37  +
mov eax [esp+80h+var_64] +
lea ebp [esp+80h+var_14] +
mov ecx [esp+80h+var_68] +
mov [esp+80h+var_7C] ebx +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_70] eax +
mov [esp+80h+var_78] ebp +
mov [esp+80h+var_80] ecx +
call sub_45A740  +
add ebx [esp+80h+var_14] +
lea edi [ebx+1] +
cmp [esp+80h+var_64] edi +
jnb loc_4940F7  +
mov [esp+80h+var_80] offset aDwarfErrorMa_0 +
call off_4BFA04  +
mov [esp+80h+var_80] 11h +
call sub_44BAF0  +
mov eax [esp+80h+var_44] +
test eax eax +
jz loc_493DF4  +
mov [esp+80h+var_80] eax +
call free  +
mov eax [esp+80h+var_6C] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_493E07  +
mov [esp+80h+var_80] eax +
call free  +
mov eax [esp+80h+var_6C] +
mov eax [eax+18h] +
test eax eax +
jz loc_493E1A  +
mov [esp+80h+var_80] eax +
call free  +
mov eax [esp+80h+var_6C] +
mov eax [eax+14h] +
test eax eax +
jz loc_4938DD  +
mov [esp+80h+var_80] eax +
call free  +
add esp 7Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+80h+var_49] 1 +
jz loc_494207  +
mov eax [esp+80h+var_48] +
mov edi ebx +
movzx ecx byte ptr [esp+80h+var_60] +
cdq   +
idiv  [esp+80h+var_28] +
xor edx edx +
add eax ecx +
movzx ecx [esp+80h+var_49] +
div  ecx +
imul eax [esp+80h+var_40] +
mov byte ptr [esp+80h+var_60] dl +
add esi eax +
jmp loc_493B60  +
mov edi [esp+80h+var_6C] +
mov edx 0CCCCCCCDh +
sub ebx esi +
mov [esp+80h+var_14] ebx +
add ebx esi +
mov ecx [edi+8] +
mov eax ecx +
mul  edx +
shr edx 2 +
lea eax [edx+edx*4] +
cmp ecx eax +
jz loc_493EC0  +
mov eax [edi+14h] +
mov edi [esp+80h+var_6C] +
lea edx [ecx+1] +
cmp ebp ebx +
mov [edi+8] edx +
mov [eax+ecx*4] esi +
jbe loc_494032  +
movzx eax byte ptr [ebx] +
test al al +
jz loc_494059  +
mov esi ebx +
jmp loc_493A91  +
mov edi [esp+80h+var_6C] +
lea edx ds:14h[ecx*4] +
mov eax [edi+14h] +
mov [esp+80h+var_7C] edx +
mov [esp+80h+var_80] eax +
call sub_459C10  +
test eax eax +
jz loc_493DF4  +
mov [edi+14h] eax +
mov ecx [edi+8] +
jmp loc_493E96  +
mov ecx [edi+4] +
sub edx ebx +
lea eax [ebx+edx] +
mov [esp+80h+var_60] eax +
mov eax 0CCCCCCCDh +
mov [esp+80h+var_14] edx +
mul  ecx +
shr edx 2 +
lea eax [edx+edx*4] +
cmp ecx eax +
jz loc_493FF0  +
mov eax [edi+18h] +
shl ecx 4 +
add ecx eax +
mov eax [esp+80h+var_68] +
mov [ecx] ebx +
mov ebx [esp+80h+var_60] +
mov [esp+80h+var_70] ebp +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] esi +
mov [esp+80h+var_7C] ebx +
mov [esp+80h+var_80] eax +
mov [esp+80h+var_64] ecx +
call sub_45A740  +
mov ecx [esp+80h+var_64] +
mov edx [esp+80h+var_14] +
add edx ebx +
mov ebx [edi+4] +
mov [ecx+4] eax +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_64] edx +
shl ebx 4 +
add ebx [edi+18h] +
mov [esp+80h+var_7C] edx +
mov [esp+80h+var_70] ebp +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] esi +
mov [esp+80h+var_80] eax +
call sub_45A740  +
mov edx [esp+80h+var_64] +
add edx [esp+80h+var_14] +
mov [esp+80h+var_64] edx +
mov [ebx+8] eax +
mov ebx [edi+4] +
mov eax [esp+80h+var_68] +
shl ebx 4 +
add ebx [edi+18h] +
mov [esp+80h+var_7C] edx +
mov [esp+80h+var_70] ebp +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] esi +
mov [esp+80h+var_80] eax +
call sub_45A740  +
mov edx [esp+80h+var_64] +
add edx [esp+80h+var_14] +
mov [ebx+0Ch] eax +
mov ebx edx +
add dword ptr [edi+4] 1 +
cmp ebp edx +
jbe loc_494048  +
movzx eax byte ptr [edx] +
test al al +
jnz loc_493AD5  +
mov [esp+80h+var_14] 1 +
mov edi 1 +
jmp loc_493AFA  +
mov eax [edi+18h] +
add ecx 5 +
shl ecx 4 +
mov [esp+80h+var_7C] ecx +
mov [esp+80h+var_80] eax +
call sub_459C10  +
test eax eax +
jz loc_493DF4  +
mov [edi+18h] eax +
mov ecx [edi+4] +
jmp loc_493F18  +
movzx ecx cl +
mov eax ecx +
div  [esp+80h+var_4A] +
movzx eax al +
imul eax [esp+80h+var_40] +
add esi eax +
jmp loc_493BBD  +
mov ebx esi +
mov esi ebx +
xor ebx ebx +
add ebx esi +
cmp ebp ebx +
mov [esp+80h+var_14] 0 +
ja loc_493AC2  +
mov [esp+80h+var_14] 0 +
xor edi edi +
jmp loc_493AFA  +
mov ebx esi +
mov esi ebx +
mov ebx 1 +
mov [esp+80h+var_14] 1 +
jmp loc_493AB8  +
add ebp [esp+80h+var_2C] +
mov edi ebx +
xor ebx ebx +
mov eax ebp +
cmp byte ptr [eax] 0 +
lea ebp [esp+80h+var_14] +
jz loc_493B60  +
mov [esp+80h+var_24] esi +
mov esi edi +
mov edi ebp +
mov ebp eax +
nop   +
mov eax [esp+80h+var_64] +
add ebx 1 +
mov [esp+80h+var_7C] esi +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] edi +
mov [esp+80h+var_70] eax +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_80] eax +
call sub_45A740  +
movzx eax byte ptr [ebp+0] +
add esi [esp+80h+var_14] +
cmp eax ebx +
ja loc_494090  +
mov edi esi +
mov esi [esp+80h+var_24] +
jmp loc_493B60  +
mov eax 0FFFFFFFFh +
mov [esp+80h+var_4B] 0 +
mov [esp+80h+var_5C] 0 +
jmp loc_493A29  +
mov [esp+80h+var_4A] 0 +
mov [esp+80h+var_28] 0 +
jmp loc_493A0F  +
movzx edx byte ptr [ebx] +
cmp dl 3 +
jz loc_49417E  +
ja loc_49426A  +
cmp dl 1 +
jz loc_494285  +
cmp dl 2 +
jnz loc_493DCB  +
mov ebx [esp+80h+var_34] +
mov ecx edi +
mov esi [esp+80h+var_64] +
mov eax [ebx+8] +
movzx edx byte ptr [ebx+58h] +
mov [esp+80h+var_80] esi +
call sub_492BB0  +
mov byte ptr [esp+80h+var_60] 0 +
mov esi eax +
movzx eax byte ptr [ebx+58h] +
add edi eax +
jmp loc_493B60  +
movzx ecx byte ptr [ebx+1] +
test cl cl +
mov [esp+80h+var_49] cl +
jnz loc_4939D5  +
jmp loc_4939B0  +
add edi 8 +
cmp ebp edi +
jnb loc_494472  +
mov esi edi +
mov edi 8 +
jmp loc_49388B  +
mov eax [esp+80h+var_30] +
mov edx esi +
call sub_492960  +
jmp loc_493908  +
cmp [esp+80h+var_64] edi +
ja loc_494414  +
mov [esp+80h+var_14] 0 +
xor eax eax +
xor ebx ebx +
add edi eax +
mov eax [esp+80h+var_6C] +
mov edx 0CCCCCCCDh +
mov ecx [eax+4] +
mov eax ecx +
mul  edx +
shr edx 2 +
lea eax [edx+edx*4] +
cmp ecx eax +
jnz loc_494355  +
mov eax [esp+80h+var_6C] +
add ecx 5 +
shl ecx 4 +
mov eax [eax+18h] +
mov [esp+80h+var_7C] ecx +
mov [esp+80h+var_80] eax +
call sub_459C10  +
test eax eax +
jz loc_493DE4  +
mov ecx [esp+80h+var_6C] +
mov [ecx+18h] eax +
mov ecx [ecx+4] +
jmp loc_49435C  +
add esi 6 +
cmp ebp esi +
jb loc_493987  +
mov eax [esp+80h+var_30] +
mov edx ebx +
mov [esp+80h+var_64] ecx +
call sub_492940  +
mov ecx [esp+80h+var_64] +
jmp loc_493987  +
mov eax [esp+80h+var_48] +
mov edi ebx +
cdq   +
idiv  [esp+80h+var_28] +
imul eax [esp+80h+var_40] +
add esi eax +
jmp loc_493B60  +
call sub_45A740  +
imul eax [esp+80h+var_40] +
add esi eax +
jmp loc_493D37  +
mov eax [esp+80h+var_30] +
mov edx ebx +
call sub_492920  +
jmp loc_493C74  +
mov eax [esp+80h+var_30] +
mov edx ebx +
mov [esp+80h+var_64] ecx +
call sub_492960  +
mov ecx [esp+80h+var_64] +
jmp loc_493987  +
mov edx 1 +
call sub_493610  +
mov [esp+80h+var_44] eax +
jmp loc_493B2F  +
cmp dl 4 +
jz loc_494324  +
cmp dl 80h +
jnz loc_493DCB  +
lea edi [edi+eax-1] +
jmp loc_493B60  +
mov eax [esp+80h+var_5C] +
mov edx esi +
movzx ecx byte ptr [esp+80h+var_60] +
mov [esp+80h+var_70] 1 +
mov [esp+80h+var_74] eax +
mov eax [esp+80h+var_3C] +
mov [esp+80h+var_78] eax +
mov eax [esp+80h+var_58] +
mov [esp+80h+var_7C] eax +
mov eax [esp+80h+var_44] +
mov [esp+80h+var_80] eax +
mov eax [esp+80h+var_6C] +
call sub_492580  +
test eax eax +
jz loc_493DE4  +
mov eax [esp+80h+var_34] +
mov ecx [esp+80h+var_54] +
lea edx [eax+0Ch] +
lea ebx [eax+8] +
mov eax [esp+80h+var_50] +
cmp ecx esi +
cmova ecx esi +
cmp eax esi +
cmovb eax esi +
mov [esp+80h+var_80] eax +
mov eax ebx +
call sub_492AF0  +
test eax eax +
jz loc_493DE4  +
mov eax [esp+80h+var_44] +
test eax eax +
jz loc_494302  +
mov [esp+80h+var_80] eax +
call free  +
cmp [esp+80h+var_64] edi +
ja loc_493B18  +
mov eax [esp+80h+var_6C] +
mov esi [eax+0Ch] +
test esi esi +
jnz loc_4944CE  +
mov eax [esp+80h+var_6C] +
jmp loc_4938BC  +
mov eax [esp+80h+var_64] +
mov [esp+80h+var_7C] edi +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] ebp +
mov [esp+80h+var_70] eax +
mov eax [esp+80h+var_68] +
mov [esp+80h+var_80] eax +
call sub_45A740  +
add edi [esp+80h+var_14] +
mov [esp+80h+var_5C] eax +
jmp loc_493B60  +
mov eax [esp+80h+var_6C] +
mov eax [eax+18h] +
shl ecx 4 +
lea edx [eax+ecx] +
mov eax [esp+80h+var_64] +
mov [edx] ebx +
mov [esp+80h+var_24] edx +
mov edx [esp+80h+var_68] +
mov [esp+80h+var_7C] edi +
mov [esp+80h+var_70] eax +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_80] edx +
mov [esp+80h+var_78] ebp +
call sub_45A740  +
mov edx [esp+80h+var_24] +
mov ecx [esp+80h+var_64] +
add edi [esp+80h+var_14] +
mov [edx+4] eax +
mov eax [esp+80h+var_6C] +
mov edx [esp+80h+var_68] +
mov ebx [eax+4] +
shl ebx 4 +
add ebx [eax+18h] +
mov [esp+80h+var_70] ecx +
mov [esp+80h+var_7C] edi +
mov [esp+80h+var_80] edx +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] ebp +
call sub_45A740  +
mov ecx [esp+80h+var_64] +
mov edx [esp+80h+var_68] +
add edi [esp+80h+var_14] +
mov [ebx+8] eax +
mov eax [esp+80h+var_6C] +
mov ebx [eax+4] +
shl ebx 4 +
add ebx [eax+18h] +
mov [esp+80h+var_7C] edi +
mov [esp+80h+var_70] ecx +
mov [esp+80h+var_74] 0 +
mov [esp+80h+var_78] ebp +
mov [esp+80h+var_80] edx +
call sub_45A740  +
add edi [esp+80h+var_14] +
mov [ebx+0Ch] eax +
mov eax [esp+80h+var_6C] +
add dword ptr [eax+4] 1 +
jmp loc_493B60  +
cmp byte ptr [ebx+1] 0 +
jnz loc_494482  +
mov [esp+80h+var_14] 1 +
mov eax 1 +
xor ebx ebx +
jmp loc_494194  +
mov [esp+80h+var_7C] eax +
mov [esp+80h+var_80] offset aDwarfErrorLi_0 +
call off_4BFA04  +
mov [esp+80h+var_80] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_4938BC  +
mov [esp+80h+var_80] offset aDwarfErrorRa_0 +
call off_4BFA04  +
mov [esp+80h+var_80] 11h +
call sub_44BAF0  +
xor eax eax +
jmp loc_4938BC  +
mov eax [esp+80h+var_30] +
mov edx esi +
call sub_492940  +
jmp loc_493908  +
add ebx 2 +
jmp loc_494490  +
add ebx 1 +
cmp byte ptr [ebx-1] 0 +
jz loc_4944A5  +
cmp [esp+80h+var_64] ebx +
ja loc_494487  +
mov eax ebx +
xor ebx ebx +
sub eax edi +
mov [esp+80h+var_14] eax +
jmp loc_494194  +
mov eax ebx +
mov ebx edi +
sub eax edi +
mov [esp+80h+var_14] eax +
jmp loc_494194  +
movzx eax cx +
jmp loc_49389D  +
test eax eax +
jz loc_493878  +
mov edi 4 +
jmp loc_49390F  +
mov edi eax +
mov eax [eax] +
lea edx [esi+esi*2] +
shl edx 2 +
mov [esp+80h+var_7C] edx +
mov [esp+80h+var_80] eax +
call sub_458A80  +
test eax eax +
mov ebx eax +
jz loc_493DF4  +
mov eax [edi+1Ch] +
mov ebp ebx +
xor edi edi +
jmp loc_494528  +
mov edx [eax] +
add edi 1 +
add ebp 0Ch +
mov dword ptr [ebp-8] 0 +
mov [ebp-0Ch] edx +
mov edx [eax+8] +
mov [ebp-4] edx +
mov edx [eax+4] +
mov [esp+80h+var_80] eax +
mov [esp+80h+var_68] edx +
call free  +
cmp edi esi +
mov edx [esp+80h+var_68] +
jz loc_49454A  +
mov eax edx +
test eax eax +
jnz loc_4944F7  +
mov [esp+80h+var_7C] 648h +
mov [esp+80h+var_80] offset a____Binutil_27 +
mov [esp+80h+var_68] eax +
call sub_44BA40  +
mov eax [esp+80h+var_68] +
jmp loc_4944F7  +
test edx edx +
jz loc_494562  +
mov [esp+80h+var_7C] 64Fh +
mov [esp+80h+var_80] offset a____Binutil_27 +
call sub_44BA40  +
mov [esp+80h+var_74] offset sub_492980 +
mov [esp+80h+var_78] 0Ch +
mov [esp+80h+var_7C] esi +
mov [esp+80h+var_80] ebx +
call qsort  +
mov eax [ebx+8] +
mov ecx [eax+4] +
mov eax [esp+80h+var_6C] +
mov eax [eax+0Ch] +
cmp eax 1 +
mov [esp+80h+var_64] eax +
jbe loc_4945E2  +
mov eax ebx +
mov edx 1 +
mov ebp 1 +
mov [esp+80h+var_68] ebx +
cmp [eax+0Ch] ecx +
mov esi [eax+14h] +
jnb loc_4945B4  +
cmp [esi+4] ecx +
jbe loc_4945D0  +
mov [eax+0Ch] ecx +
cmp edx ebp +
mov ecx [esi+4] +
jnb loc_4945CD  +
mov ebx [esp+80h+var_68] +
lea edi [edx+edx*2] +
lea edi [ebx+edi*4] +
mov ebx [eax+0Ch] +
mov [edi+8] esi +
mov [edi] ebx +
add edx 1 +
add ebp 1 +
add eax 0Ch +
cmp ebp [esp+80h+var_64] +
jnz loc_4945A4  +
mov ebx [esp+80h+var_68] +
jmp loc_4945E7  +
mov edx 1 +
mov eax [esp+80h+var_6C] +
mov [eax+1Ch] ebx +
mov [eax+0Ch] edx +
jmp loc_49431B  +
***
push edi  +
push esi  +
push ebx  +
sub esp 7Ch +
mov edi [eax+8] +
mov ebp [eax+3Ch] +
mov [esp+7Ch+var_64] eax +
mov [esp+7Ch+var_50] edi +
mov edi eax +
mov eax [eax+50h] +
mov eax [eax+10h] +
mov [esp+7Ch+var_7C] 80h +
mov esi eax +
mov [esp+7Ch+var_60] eax +
call sub_459B80  +
test eax eax +
mov [esp+7Ch+var_44] eax +
jz loc_495007  +
cmp ebp esi +
mov dword ptr [eax+4] 0 +
jnb loc_494A28  +
mov eax edi +
add eax 8 +
mov [esp+7Ch+var_38] 20h +
mov [esp+7Ch+var_54] 1 +
mov [esp+7Ch+var_34] eax +
mov eax [esp+7Ch+var_60] +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_70] 0 +
mov [esp+7Ch+var_6C] eax +
lea eax [esp+7Ch+var_20] +
mov [esp+7Ch+var_74] eax +
mov eax [esp+7Ch+var_50] +
mov [esp+7Ch+var_7C] eax +
call sub_45A740  +
add ebp [esp+7Ch+var_20] +
test eax eax +
mov ecx eax +
jnz loc_494A40  +
sub [esp+7Ch+var_54] 1 +
mov eax [esp+7Ch+var_54] +
test eax eax +
jz loc_495045  +
cmp ebp [esp+7Ch+var_60] +
jb loc_4949DF  +
mov eax [esp+7Ch+var_44] +
mov [esp+7Ch+var_7C] eax +
call free  +
xor eax eax +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx 0ECF56BFh +
mul  edx +
mov eax ecx +
sub eax edx +
shr eax 1 +
add edx eax +
mov eax ecx +
shr edx 6 +
imul edx edx +
sub eax edx +
mov edx eax +
mov eax [esp+7Ch+var_64] +
mov eax [eax+1Ch] +
mov ebx [eax+edx*4] +
test ebx ebx +
jnz loc_494A7B  +
jmp loc_494E50  +
mov ebx [ebx+14h] +
test ebx ebx +
jz loc_494E50  +
cmp ecx [ebx] +
lea esi [esi+0] +
jnz loc_494A70  +
mov eax [ebx+4] +
cmp eax 2Eh +
jz loc_494C25  +
cmp eax 3 +
jz loc_494C25  +
cmp eax 1Dh +
jz loc_494C25  +
cmp eax 34h +
mov [esp+7Ch+var_5C] 0 +
jz loc_494FAB  +
mov edi [esp+7Ch+var_54] +
mov eax [esp+7Ch+var_44] +
mov dword ptr [eax+edi*4] 0 +
xor edi edi +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_494BF3  +
lea eax [edi+1Ch] +
xor esi esi +
mov [esp+7Ch+var_40] eax +
lea eax [edi+24h] +
mov [esp+7Ch+var_48] 0 +
mov [esp+7Ch+var_4C] 0 +
mov [esp+7Ch+var_58] 0 +
mov [esp+7Ch+var_3C] eax +
jmp loc_494B2C  +
cmp eax 12h +
jz loc_494D95  +
ja loc_494CC6  +
cmp eax 3 +
jz loc_494D40  +
cmp eax 11h +
mov eax [esp+7Ch+var_58] +
cmovz eax [esp+7Ch+var_14] +
mov [esp+7Ch+var_58] eax +
nop   +
add esi 1 +
cmp [ebx+0Ch] esi +
jbe loc_494BB2  +
mov eax [ebx+10h] +
mov ecx [esp+7Ch+var_64] +
lea eax [eax+esi*8] +
mov edx [eax] +
mov [esp+7Ch+var_1C] edx +
mov edx [eax+4] +
mov eax [esp+7Ch+var_60] +
mov [esp+7Ch+var_7C] ebp +
mov [esp+7Ch+var_78] eax +
lea eax [esp+7Ch+var_1C] +
call sub_492DD0  +
test eax eax +
mov ebp eax +
jz loc_494A28  +
test edi edi +
jz loc_494C81  +
mov eax [esp+7Ch+var_1C] +
cmp eax 3Bh +
jz loc_494D30  +
jbe loc_494AF7  +
cmp eax 58h +
jz loc_494DE3  +
lea esi [esi+0] +
jbe loc_494CF0  +
cmp eax 6Eh +
jz loc_494DB0  +
cmp eax 2007h +
jz loc_494DB0  +
cmp eax 59h +
jnz loc_494B20  +
mov eax [esp+7Ch+var_14] +
add esi 1 +
cmp [ebx+0Ch] esi +
mov [edi+10h] eax +
ja loc_494B2C  +
mov esi [esp+7Ch+var_48] +
test esi esi +
jz loc_494F40  +
mov eax [esp+7Ch+var_58] +
add [esp+7Ch+var_4C] eax +
setnz al  +
test edi edi +
setnz dl  +
and eax edx +
test al al +
jz loc_494BF3  +
mov eax [esp+7Ch+var_4C] +
lea edx [edi+24h] +
mov ecx [esp+7Ch+var_58] +
mov [esp+7Ch+var_7C] eax +
mov eax [esp+7Ch+var_34] +
call sub_492AF0  +
test eax eax +
jz loc_494A28  +
mov edx [ebx+8] +
test edx edx +
jz loc_494A16  +
add [esp+7Ch+var_54] 1 +
mov eax [esp+7Ch+var_38] +
cmp [esp+7Ch+var_54] eax +
jge loc_495011  +
mov eax [esp+7Ch+var_44] +
mov edi [esp+7Ch+var_54] +
mov dword ptr [eax+edi*4] 0 +
jmp loc_494A16  +
mov eax [esp+7Ch+var_50] +
mov [esp+7Ch+var_78] 34h +
mov [esp+7Ch+var_7C] eax +
call sub_458B60  +
test eax eax +
mov edi eax +
jz loc_494A28  +
mov ecx [esp+7Ch+var_64] +
mov eax [ebx+4] +
mov edx [ecx+48h] +
mov [edi+18h] eax +
mov [edi] edx +
mov edx [ecx+60h] +
mov [ecx+48h] edi +
test edx edx +
jnz loc_494F55  +
cmp eax 1Dh +
jz loc_494F75  +
mov eax [esp+7Ch+var_44] +
mov ecx [esp+7Ch+var_54] +
mov [esp+7Ch+var_5C] 0 +
mov [eax+ecx*4] edi +
jmp loc_494AC2  +
mov eax [esp+7Ch+var_5C] +
test eax eax +
jz loc_494B20  +
mov eax [esp+7Ch+var_1C] +
cmp eax 3Ah +
jz loc_494E72  +
ja loc_494E20  +
cmp eax 2 +
jz loc_494E90  +
cmp eax 3 +
lea esi [esi+0] +
jnz loc_494B20  +
mov eax [esp+7Ch+var_14] +
mov ecx [esp+7Ch+var_5C] +
mov [ecx+10h] eax +
jmp loc_494B20  +
cmp eax 31h +
jz loc_494E00  +
cmp eax 3Ah +
jnz loc_494B20  +
mov eax [esp+7Ch+var_64] +
mov edx [esp+7Ch+var_14] +
mov eax [eax+44h] +
call sub_493610  +
mov [edi+0Ch] eax +
jmp loc_494B20  +
cmp eax 47h +
jz loc_494E00  +
cmp eax 55h +
jnz loc_494B20  +
mov eax [esp+7Ch+var_14] +
mov edx [esp+7Ch+var_10] +
mov [esp+7Ch+var_7C] eax +
mov eax [esp+7Ch+var_64] +
mov [esp+7Ch+var_78] edx +
mov edx [esp+7Ch+var_3C] +
call sub_492CB0  +
test eax eax +
jnz loc_494B20  +
jmp loc_494A28  +
mov eax [esp+7Ch+var_14] +
mov [edi+14h] eax +
jmp loc_494B20  +
mov eax [edi+20h] +
test eax eax +
jnz loc_494B20  +
mov eax [esp+7Ch+var_18] +
cmp eax 8 +
jz loc_494D64  +
cmp eax 0Eh +
jz loc_494D64  +
cmp eax 1F21h +
jnz loc_494B20  +
mov eax [esp+7Ch+var_14] +
mov [edi+20h] eax +
mov eax [esp+7Ch+var_64] +
mov eax [eax+20h] +
lea ecx [eax-1] +
cmp ecx 1Ch +
mov [esp+7Ch+var_30] eax +
ja loc_494B20  +
mov eax 1 +
shl eax cl +
test eax 10025977h +
jnz loc_494DD7  +
jmp loc_494B20  +
mov eax [esp+7Ch+var_14] +
mov [esp+7Ch+var_4C] eax +
xor eax eax +
cmp [esp+7Ch+var_18] 1 +
setnz al  +
mov [esp+7Ch+var_48] eax +
jmp loc_494B20  +
mov eax [esp+7Ch+var_18] +
cmp eax 8 +
jz loc_494DD0  +
cmp eax 0Eh +
jz loc_494DD0  +
cmp eax 1F21h +
jnz loc_494B20  +
lea esi [esi+0] +
mov eax [esp+7Ch+var_14] +
mov [edi+20h] eax +
mov dword ptr [edi+1Ch] 1 +
jmp loc_494B20  +
mov eax [esp+7Ch+var_64] +
mov edx [esp+7Ch+var_14] +
mov eax [eax+44h] +
call sub_493610  +
mov [edi+8] eax +
jmp loc_494B20  +
mov ecx [esp+7Ch+var_40] +
lea edx [esp+7Ch+var_1C] +
mov eax [esp+7Ch+var_64] +
call sub_494600  +
mov [edi+20h] eax +
jmp loc_494B20  +
cmp eax 3Bh +
jz loc_494F30  +
cmp eax 3Fh +
jnz loc_494B20  +
mov eax [esp+7Ch+var_10] +
or eax [esp+7Ch+var_14] +
jz loc_494B20  +
mov eax [esp+7Ch+var_5C] +
and byte ptr [eax+1Ch] 0FEh +
jmp loc_494B20  +
mov [esp+7Ch+var_78] ecx +
mov [esp+7Ch+var_7C] offset aDwarfErrorCoul +
call off_4BFA04  +
mov [esp+7Ch+var_7C] 11h +
call sub_44BAF0  +
jmp loc_494A28  +
mov eax [esp+7Ch+var_64] +
mov edx [esp+7Ch+var_14] +
mov eax [eax+44h] +
call sub_493610  +
mov ecx [esp+7Ch+var_5C] +
mov [ecx+4] eax +
jmp loc_494B20  +
mov eax [esp+7Ch+var_18] +
lea ecx [eax-3] +
cmp ecx 15h +
ja loc_494B20  +
mov eax 1 +
shl eax cl +
test eax 2000C3h +
jz loc_494B20  +
mov eax [esp+7Ch+var_14] +
mov ecx [eax+4] +
cmp byte ptr [ecx] 3 +
jnz loc_494B20  +
mov edx [esp+7Ch+var_5C] +
mov [esp+7Ch+var_30] ecx +
and byte ptr [edx+1Ch] 0FEh +
mov edx [esp+7Ch+var_64] +
movzx edx byte ptr [edx+58h] +
lea ecx [edx+1] +
cmp [eax] ecx +
mov ecx [esp+7Ch+var_30] +
jnz loc_494B20  +
shl edx 3 +
cmp edx 8 +
jz loc_49505B  +
cmp edx 10h +
jz loc_495064  +
cmp edx 20h +
jz loc_49509A  +
cmp edx 40h +
jnz loc_49507E  +
mov eax [esp+7Ch+var_64] +
lea edx [ecx+1] +
mov eax [eax+8] +
mov eax [eax+4] +
mov eax [eax+1Ch] +
mov [esp+7Ch+var_7C] edx +
call eax  +
mov ecx [esp+7Ch+var_5C] +
mov [ecx+14h] eax +
jmp loc_494B20  +
mov eax [esp+7Ch+var_14] +
mov ecx [esp+7Ch+var_5C] +
mov [ecx+8] eax +
jmp loc_494B20  +
mov ecx [esp+7Ch+var_4C] +
test ecx ecx +
setnz al  +
test edi edi +
setnz dl  +
and eax edx +
jmp loc_494BD0  +
mov [esp+7Ch+var_78] 9D4h +
mov [esp+7Ch+var_7C] offset a____Binutil_27 +
call sub_44BA40  +
mov eax [edi+18h] +
cmp eax 1Dh +
jnz loc_494C69  +
mov eax [esp+7Ch+var_54] +
sub eax 1 +
jz loc_494C69  +
mov ecx [esp+7Ch+var_44] +
mov edx [ecx+eax*4] +
mov ecx [esp+7Ch+var_44] +
test edx edx +
jz loc_494FA1  +
jmp loc_49503D  +
mov edx [ecx+eax*4] +
test edx edx +
jnz loc_49503D  +
sub eax 1 +
jnz loc_494F96  +
jmp loc_494C69  +
mov eax [esp+7Ch+var_50] +
mov [esp+7Ch+var_78] 20h +
mov [esp+7Ch+var_7C] eax +
call sub_458B60  +
test eax eax +
mov edi eax +
mov [esp+7Ch+var_5C] eax +
jz loc_494A28  +
mov eax [ebx+4] +
mov ecx [esp+7Ch+var_64] +
or byte ptr [edi+1Ch] 1 +
mov [edi+0Ch] eax +
mov eax [ecx+4Ch] +
mov [edi] eax +
mov eax [ecx+60h] +
mov [ecx+4Ch] edi +
test eax eax +
jz loc_494AB1  +
mov [esp+7Ch+var_78] 9ECh +
mov [esp+7Ch+var_7C] offset a____Binutil_27 +
call sub_44BA40  +
jmp loc_494AB1  +
add esp 7Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
shl [esp+7Ch+var_38] 1 +
mov eax [esp+7Ch+var_38] +
shl eax 2 +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+var_44] +
mov [esp+7Ch+var_7C] eax +
call sub_459C10  +
test eax eax +
jz loc_494A28  +
mov [esp+7Ch+var_44] eax +
jmp loc_494C11  +
mov [edi+4] edx +
jmp loc_494C69  +
mov eax [esp+7Ch+var_44] +
mov [esp+7Ch+var_7C] eax +
call free  +
mov eax 1 +
jmp loc_494A36  +
movzx eax byte ptr [ecx+1] +
jmp loc_494F21  +
mov eax [esp+7Ch+var_64] +
lea edx [ecx+1] +
mov eax [eax+8] +
mov eax [eax+4] +
mov eax [eax+34h] +
mov [esp+7Ch+var_7C] edx +
call eax  +
jmp loc_494F21  +
mov [esp+7Ch+var_74] offset aScan_unit_for_ +
mov [esp+7Ch+var_78] 0A68h +
mov [esp+7Ch+var_7C] offset a____Binutil_27 +
call sub_44BA70  +
mov eax [esp+7Ch+var_64] +
lea edx [ecx+1] +
mov eax [eax+8] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+7Ch+var_7C] edx +
call eax  +
jmp loc_494F21  +
***
sub esp 8 +
mov eax [eax+24h] +
test eax eax +
jnz loc_4950E0  +
mov ecx [ebx+44h] +
test ecx ecx +
jz loc_4950E7  +
mov eax 1 +
add esp 8 +
pop ebx  +
retn   +
add esp 8 +
xor eax eax +
pop ebx  +
retn   +
mov eax [ebx+2Ch] +
test eax eax +
jnz loc_495100  +
mov dword ptr [ebx+24h] 1 +
xor eax eax +
jmp loc_4950D9  +
mov eax ebx +
call sub_4937A0  +
test eax eax +
mov [ebx+44h] eax +
jz loc_495133  +
mov eax [ebx+40h] +
cmp [ebx+3Ch] eax +
jnb loc_4950D4  +
mov eax ebx +
call sub_494980  +
mov edx eax +
mov eax 1 +
test edx edx +
jnz loc_4950D9  +
mov dword ptr [ebx+24h] 1 +
xor al al +
jmp loc_4950D9  +
mov dword ptr [ebx+24h] 1 +
jmp loc_4950D9  +
***
push esi  +
mov esi eax +
push ebx  +
mov ebx edx +
sub esp 2Ch +
mov edx [esp+30h+arg_8] +
mov [esp+30h+var_28] ecx +
call sub_4950C0  +
test eax eax +
jz loc_4951D7  +
test byte ptr [ebx+0Ch] 8 +
mov ecx [esp+30h+var_28] +
jnz loc_4951E1  +
mov esi [esi+4Ch] +
mov edi [ebx+4] +
mov ebp [ebx+10h] +
test esi esi +
jz loc_4951D7  +
mov [esp+30h+var_28] edi +
mov edi ecx +
jmp loc_495186  +
mov esi [esi] +
test esi esi +
jz loc_4951D7  +
test byte ptr [esi+1Ch] 1 +
jnz loc_495180  +
mov ebx [esi+4] +
test ebx ebx +
jz loc_495180  +
mov eax [esi+10h] +
test eax eax +
jz loc_495180  +
cmp edi [esi+14h] +
jnz loc_495180  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_4951AA  +
cmp ebp ecx +
jnz loc_495180  +
mov [esp+30h+var_2C] eax +
mov eax [esp+30h+var_28] +
mov [esp+30h+var_30] eax +
call strcmp  +
test eax eax +
jnz loc_495180  +
mov eax [esp+30h+arg_0] +
mov [esi+18h] ebp +
mov ecx [esp+30h+arg_4] +
mov [eax] ebx +
mov eax [esi+8] +
mov [ecx] eax +
mov eax 1 +
jmp loc_4951D9  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [esi+48h] +
mov eax [ebx+4] +
mov edi [ebx+10h] +
test ebp ebp +
mov [esp+30h+var_1C] eax +
jz loc_4951D7  +
mov [esp+30h+var_14] 0 +
mov edx ebp +
mov [esp+30h+var_18] 0 +
lea ebx [edx+24h] +
mov esi [edx+30h] +
mov [esp+30h+var_28] edx +
jmp loc_49521A  +
cmp edi esi +
jz loc_49521E  +
mov ebx [ebx] +
test ebx ebx +
jz loc_495280  +
test esi esi +
jnz loc_495210  +
mov ebp [ebx+4] +
cmp ecx ebp +
jb loc_495214  +
mov edx [ebx+8] +
cmp ecx edx +
jnb loc_495214  +
mov eax [esp+30h+var_28] +
mov [esp+30h+var_24] edx +
mov eax [eax+20h] +
test eax eax +
jz loc_495214  +
mov [esp+30h+var_2C] eax +
mov eax [esp+30h+var_1C] +
mov [esp+30h+var_20] ecx +
mov [esp+30h+var_30] eax +
call strcmp  +
mov ecx [esp+30h+var_20] +
mov edx [esp+30h+var_24] +
test eax eax +
jnz loc_495214  +
mov eax [esp+30h+var_18] +
sub edx ebp +
test eax eax +
jz loc_49526B  +
cmp edx [esp+30h+var_14] +
jnb loc_495214  +
mov ebx [ebx] +
mov eax [esp+30h+var_28] +
mov [esp+30h+var_14] edx +
test ebx ebx +
mov [esp+30h+var_18] eax +
jnz loc_49521A  +
lea esi [esi+0] +
mov edx [esp+30h+var_28] +
mov edx [edx] +
test edx edx +
jnz loc_495204  +
mov edx [esp+30h+var_18] +
test edx edx +
jz loc_4951D7  +
mov eax [edx+0Ch] +
mov ecx [esp+30h+arg_0] +
mov [edx+30h] edi +
mov [ecx] eax +
mov eax [edx+14h] +
mov edx [esp+30h+arg_4] +
mov [edx] eax +
add esp 2Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [eax+24h] +
mov [esp+1Ch+var_14] eax +
mov [esp+1Ch+var_10] ecx +
test edi edi +
jnz loc_4953A2  +
mov esi [eax+44h] +
mov ebx edx +
test esi esi +
jz loc_495394  +
mov eax [esp+1Ch+arg_0] +
xor ebp ebp +
xor edi edi +
mov dword ptr [eax] 0 +
mov eax [esp+1Ch+var_14] +
mov esi [eax+48h] +
test esi esi +
jz loc_495340  +
lea eax [esi+24h] +
mov edx [eax+4] +
cmp ebx edx +
jb loc_495320  +
mov ecx [eax+8] +
cmp ebx ecx +
jnb loc_495320  +
sub ecx edx +
test edi edi +
jz loc_49531B  +
cmp ecx ebp +
jnb loc_495320  +
mov ebp ecx +
mov edi esi +
nop   +
mov eax [eax] +
test eax eax +
jnz loc_495303  +
mov esi [esi] +
test esi esi +
jnz loc_495300  +
test edi edi +
jz loc_495340  +
mov eax [esp+1Ch+arg_0] +
cmp dword ptr [edi+18h] 1Dh +
mov [eax] edi +
jz loc_495400  +
mov eax [esp+1Ch+var_14] +
mov eax [eax+44h] +
mov edx [eax+0Ch] +
test edx edx +
jle loc_495380  +
mov ebp [eax+1Ch] +
xor ecx ecx +
jmp loc_495364  +
mov ecx [esi+8] +
cmp ebx [ecx+4] +
jb loc_4953B4  +
lea ecx [eax+1] +
cmp ecx edx +
jge loc_49537C  +
lea eax [ecx+edx] +
sar eax 1 +
lea esi [eax+eax*2] +
lea esi [ebp+esi*4+0] +
mov edi [esi] +
cmp ebx edi +
jnb loc_495355  +
mov edx eax +
cmp ecx edx +
jl loc_495364  +
cmp ebx edi +
jnb loc_4953AC  +
mov eax [esp+1Ch+var_10] +
mov dword ptr [eax] 0 +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [eax+2Ch] +
test ecx ecx +
jnz loc_4953C5  +
mov dword ptr [eax+24h] 1 +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esi+8] +
cmp [ecx+4] ebx +
jbe loc_495380  +
mov eax ecx +
jmp loc_4953BD  +
cmp ebx [eax+4] +
jnb loc_49540C  +
mov eax [eax] +
test eax eax +
jnz loc_4953B8  +
jmp loc_495380  +
mov edi [esp+1Ch+var_14] +
mov edx [esp+1Ch+arg_C] +
mov eax edi +
call sub_4937A0  +
test eax eax +
mov [edi+44h] eax +
mov eax [esp+1Ch+var_14] +
jz loc_49539B  +
mov edi [eax+40h] +
cmp [eax+3Ch] edi +
jnb loc_4952E7  +
call sub_494980  +
test eax eax +
jnz loc_4952E7  +
mov eax [esp+1Ch+var_14] +
jmp loc_49539B  +
mov eax [esp+1Ch+arg_C] +
mov [eax+5Ch] edi +
jmp loc_495340  +
cmp byte ptr [eax+19h] 0 +
jnz loc_495380  +
cmp ecx eax +
jz loc_495380  +
mov edx [eax+8] +
mov ebx [esp+1Ch+var_10] +
mov ecx [eax+0Ch] +
mov [ebx] edx +
mov edx [esp+1Ch+arg_4] +
mov [edx] ecx +
mov edx [esp+1Ch+arg_8] +
test edx edx +
jz loc_495441  +
mov eax [eax+14h] +
mov ebx [esp+1Ch+arg_8] +
mov [ebx] eax +
mov eax [esi+8] +
mov eax [eax+4] +
sub eax edi +
jmp loc_4953A4  +
***
push esi  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edx [eax] +
mov eax [eax+78h] +
cmp edx eax +
jz loc_495699  +
test eax eax +
jz loc_495691  +
mov esi [eax+4] +
test esi esi +
jz loc_4955FE  +
lea esi [esi+0] +
mov eax [ebp+74h] +
cmp dword ptr [ebp+7Ch] 2 +
mov edi [ebp+70h] +
mov [esp+28h+var_1C] eax +
jz loc_495656  +
mov edx ebp +
mov eax esi +
call sub_4950C0  +
test eax eax +
jz loc_495680  +
mov ecx [esi+60h] +
test ecx ecx +
jnz loc_495610  +
mov ebx [esi+48h] +
test ebx ebx +
jz loc_49562F  +
xor edx edx +
jmp loc_495524  +
mov edx ebx +
mov ebx eax +
mov eax [ebx] +
mov [ebx] edx +
test eax eax +
jnz loc_495520  +
mov [esi+48h] ebx +
mov eax 1 +
jmp loc_49553A  +
test ebx ebx +
jz loc_495550  +
mov edx [ebx+20h] +
test edx edx +
jz loc_49554A  +
mov ecx ebx +
mov eax edi +
call sub_495450  +
test eax eax +
mov ebx [ebx] +
jnz loc_495536  +
mov edx [esi+48h] +
test edx edx +
jz loc_49556C  +
xor ebx ebx +
jmp loc_495564  +
mov ebx edx +
mov edx ecx +
mov ecx [edx] +
mov [edx] ebx +
test ecx ecx +
jnz loc_495560  +
test eax eax +
mov [esi+48h] edx +
jz loc_495680  +
mov ebx [esi+4Ch] +
test ebx ebx +
jz loc_495646  +
xor ecx ecx +
jmp loc_49558A  +
mov ecx ebx +
mov ebx edx +
mov edx [ebx] +
mov [ebx] ecx +
test edx edx +
jnz loc_495586  +
mov [esi+4Ch] ebx +
mov edi [esp+28h+var_1C] +
jmp loc_4955A4  +
test ebx ebx +
jz loc_4955C7  +
test byte ptr [ebx+1Ch] 1 +
jnz loc_4955C1  +
mov edx [ebx+4] +
test edx edx +
jz loc_4955C1  +
mov edx [ebx+10h] +
test edx edx +
jz loc_4955C1  +
mov ecx ebx +
mov eax edi +
call sub_495450  +
test eax eax +
mov ebx [ebx] +
jnz loc_4955A0  +
mov edx [esi+4Ch] +
test edx edx +
jz loc_4955DE  +
xor ebx ebx +
jmp loc_4955D6  +
mov ebx edx +
mov edx ecx +
mov ecx [edx] +
mov [edx] ebx +
test ecx ecx +
jnz loc_4955D2  +
test eax eax +
mov [esi+4Ch] edx +
mov dword ptr [esi+60h] 1 +
jz loc_495680  +
mov esi [esi+4] +
test esi esi +
jnz loc_4954E0  +
mov edx [ebp+0] +
mov [ebp+78h] edx +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_24] 0C23h +
mov [esp+28h+var_28] offset a____Binutil_27 +
call sub_44BA40  +
mov ebx [esi+48h] +
test ebx ebx +
jnz loc_49551B  +
mov ebx [esi+4Ch] +
mov eax 1 +
mov dword ptr [esi+48h] 0 +
test ebx ebx +
jnz loc_495582  +
mov dword ptr [esi+4Ch] 0 +
mov dword ptr [esi+60h] 1 +
jmp loc_4955F0  +
mov [esp+28h+var_24] 0C1Eh +
mov [esp+28h+var_28] offset a____Binutil_27 +
call sub_44BA40  +
mov edx ebp +
mov eax esi +
call sub_4950C0  +
test eax eax +
jnz loc_495505  +
nop   +
lea esi [esi+0] +
mov dword ptr [ebp+7Ch] 2 +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebp+4] +
jmp loc_4954D1  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+44h] +
mov eax [eax] +
test eax eax +
mov [esp+1Ch] eax +
jz loc_495757  +
mov eax [esp+1Ch] +
mov eax [eax] +
test eax eax +
mov [esp+18h] eax +
jz loc_495757  +
mov eax [esp+18h] +
mov esi [eax+48h] +
test esi esi +
jz loc_495773  +
mov [esp+10h] esi +
nop   +
mov eax [esp+10h] +
mov edi [eax+20h] +
test edi edi +
jz loc_49573B  +
mov eax [eax+28h] +
test eax eax +
mov [esp+14h] eax +
jz loc_49573B  +
mov eax [esp+40h] +
mov ebx [eax] +
test ebx ebx +
jz loc_49573B  +
mov esi eax +
test byte ptr [ebx+0Ch] 8 +
jz loc_495732  +
mov ebp [ebx+10h] +
test ebp ebp +
jz loc_495732  +
mov [esp+4] edi +
mov eax [ebx+4] +
mov [esp] eax +
call strcmp  +
test eax eax +
jz loc_495761  +
add esi 4 +
mov ebx [esi] +
test ebx ebx +
jnz loc_495712  +
mov eax [esp+10h] +
mov eax [eax] +
test eax eax +
mov [esp+10h] eax +
jnz loc_4956F0  +
mov eax [esp+18h] +
mov eax [eax] +
test eax eax +
mov [esp+18h] eax +
jnz loc_4956DB  +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+14h] +
sub eax [ebp+1Ch] +
sub eax [ebx+8] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [eax+44h] +
test eax eax +
jz loc_495794  +
mov eax [esp+18h] +
call sub_494980  +
mov eax [esp+18h] +
mov esi [eax+48h] +
test esi esi +
jnz loc_4956EA  +
jmp loc_495749  +
***
mov edi [esp+18h] +
mov edx [esp+1Ch] +
mov eax edi +
call sub_4937A0  +
test eax eax +
mov [edi+44h] eax +
jz loc_495783  +
jmp loc_49577A  +
***
mov edx [eax] +
test edx edx +
jz loc_4957F4  +
mov eax [edx+5Ch] +
test eax eax +
jz loc_4957F4  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_4957F4  +
mov ebx [eax+8] +
mov ecx [esp+arg_4] +
mov [ecx] ebx +
mov ecx [eax+4] +
mov ebx [ecx+20h] +
mov ecx [esp+arg_8] +
mov [ecx] ebx +
mov ebx [eax+10h] +
mov ecx [esp+arg_C] +
mov eax [eax+4] +
mov [ecx] ebx +
mov [edx+5Ch] eax +
mov eax 1 +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edx [esp+1Ch+arg_4] +
mov eax [esp+1Ch+arg_0] +
mov ecx [edx] +
test ecx ecx +
mov [esp+1Ch+var_18] ecx +
jz loc_4959DF  +
test eax eax +
jz loc_4959DF  +
mov eax [ecx] +
test eax eax +
mov [esp+1Ch+var_14] eax +
jz loc_4958FE  +
mov eax [esp+1Ch+var_14] +
xor ebx ebx +
mov esi [eax+1Ch] +
mov edi [eax+48h] +
mov eax [eax+4Ch] +
mov [esp+1Ch+var_10] eax +
mov ebp [esi+ebx*4] +
test ebp ebp +
jz loc_495862  +
lea esi [esi+0] +
mov eax [ebp+10h] +
mov [esp+1Ch+var_1C] eax +
call free  +
mov ebp [ebp+14h] +
test ebp ebp +
jnz loc_495850  +
add ebx 1 +
cmp ebx 79h +
jnz loc_495846  +
mov esi [esp+1Ch+var_14] +
mov eax [esi+44h] +
test eax eax +
jz loc_49588E  +
mov eax [eax+14h] +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esi+44h] +
mov eax [eax+18h] +
mov [esp+1Ch+var_1C] eax +
call free  +
test edi edi +
jz loc_4958C4  +
mov eax [edi+0Ch] +
test eax eax +
jz loc_4958A8  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov dword ptr [edi+0Ch] 0 +
mov eax [edi+8] +
test eax eax +
jz loc_4958BE  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov dword ptr [edi+8] 0 +
mov edi [edi] +
test edi edi +
jnz loc_495892  +
mov ecx [esp+1Ch+var_10] +
mov ebx [esp+1Ch+var_10] +
test ecx ecx +
jz loc_4958EC  +
mov eax [ebx+4] +
test eax eax +
jz loc_4958E6  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov dword ptr [ebx+4] 0 +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4958D0  +
mov eax [esp+1Ch+var_14] +
mov eax [eax] +
test eax eax +
mov [esp+1Ch+var_14] eax +
jnz loc_495833  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_495911  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+44h] +
test eax eax +
jz loc_495924  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+4Ch] +
test eax eax +
jz loc_495937  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+54h] +
test eax eax +
jz loc_49594A  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+34h] +
test eax eax +
jz loc_49595D  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov edx [eax+80h] +
test edx edx +
jnz loc_4959D2  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+24h] +
test eax eax +
jz loc_49597E  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_495991  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+60h] +
test eax eax +
jz loc_4959A4  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+68h] +
test eax eax +
jz loc_4959B7  +
mov [esp+1Ch+var_1C] eax +
call free  +
mov eax [esp+1Ch+var_18] +
mov eax [eax+20h] +
test eax eax +
jz loc_4959DF  +
mov [esp+1Ch+arg_0] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4586F0  +
mov eax [eax+14h] +
mov [esp+1Ch+var_1C] eax +
call sub_4586F0  +
jmp loc_49596B  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax [esp+4Ch+arg_10] +
mov ebp [eax] +
test ebp ebp +
jz loc_495DE0  +
mov edi [esp+4Ch+arg_0] +
mov eax [esp+4Ch+arg_0] +
mov esi [edi+6Ch] +
mov eax [eax+64h] +
test esi esi +
jz loc_495BA8  +
mov edi [ebp+60h] +
xor edx edx +
jmp loc_495A3B  +
mov ecx [eax+38h] +
add ecx [ebx+1Ch] +
cmp [edi+edx*4] ecx +
jnz loc_495A50  +
add edx 1 +
mov eax [eax+0Ch] +
cmp edx esi +
jz loc_495BA8  +
mov ebx [eax+3Ch] +
test ebx ebx +
jnz loc_495A22  +
mov ecx [eax+1Ch] +
cmp [edi+edx*4] ecx +
jz loc_495A2D  +
lea esi [esi+0] +
mov eax [esp+4Ch+arg_10] +
mov edi ebp +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_495800  +
test ebp 1 +
mov edx 84h +
jnz loc_495F58  +
test edi 2 +
jnz loc_495F66  +
mov ecx edx +
xor eax eax +
shr ecx 2 +
test dl 2 +
stos   +
jz loc_495A9A  +
xor ecx ecx +
add edi 2 +
mov [edi-2] cx +
and edx 1 +
jz loc_495AA2  +
mov byte ptr [edi] 0 +
mov eax [esp+4Ch+arg_8] +
mov [ebp+8] eax +
mov eax [esp+4Ch+arg_C] +
mov [ebp+38h] eax +
mov eax [esp+4Ch+arg_0] +
mov eax [eax+6Ch] +
test eax eax +
jnz loc_495C25  +
mov eax [esp+4Ch+arg_10] +
mov [eax] ebp +
mov eax [esp+4Ch+arg_4] +
test eax eax +
jz loc_495E05  +
mov eax [esp+4Ch+arg_4] +
cmp [esp+4Ch+arg_0] eax +
setz bl  +
mov edx [esp+4Ch+arg_8] +
mov eax [esp+4Ch+arg_4] +
call sub_4929F0  +
test eax eax +
mov [esp+4Ch+var_2C] eax +
jz loc_495BB5  +
mov eax [esp+4Ch+arg_4] +
mov [ebp+14h] eax +
mov eax [esp+4Ch+arg_14] +
test eax eax +
jz loc_495C90  +
mov eax [ebp+64h] +
cmp eax 0 +
mov [esp+4Ch+var_30] eax +
jnz loc_495C76  +
mov eax [ebp+8] +
mov [esp+4Ch+var_28] ebp +
mov eax [eax+18h] +
mov [esp+4Ch+var_34] eax +
mov eax [esp+4Ch+arg_0] +
mov ebp eax +
lea esi [esi+0] +
mov ebx [ebp+64h] +
test ebx ebx +
jz loc_495B98  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_495B48  +
cmp ebx eax +
jz loc_495B48  +
test byte ptr [ebx+15h] 20h +
jz loc_495B91  +
mov eax [ebx+1Ch] +
test eax eax +
jnz loc_495B91  +
mov esi [ebx] +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] eax +
call strcmp  +
mov edx 1 +
test eax eax +
jz loc_495B7C  +
mov edi offset a_gnu_linkonc_4 +
mov ecx 11h +
cmps   +
setz dl  +
movzx edx dl +
test byte ptr [ebx+14h] 1 +
jz loc_495B88  +
cmp [esp+4Ch+arg_0] ebp +
jz loc_495B8C  +
test edx edx +
jz loc_495B91  +
add [esp+4Ch+var_30] 1 +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_495B37  +
cmp [esp+4Ch+arg_4] ebp +
jz loc_495E17  +
mov ebp [esp+4Ch+arg_4] +
jmp loc_495B30  +
mov eax 1 +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test bl bl +
jz loc_495AF5  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] offset aHomeJenkinsM_3 +
mov [esp+4Ch+var_4C] eax +
call sub_458EA0  +
test eax eax +
mov ebx eax +
jz loc_495C1B  +
mov [esp+4Ch+var_48] 0 +
mov [esp+4Ch+var_4C] eax +
call sub_4585B0  +
test eax eax +
mov [esp+4Ch+arg_4] eax +
jz loc_495C13  +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] eax +
call sub_454030  +
test eax eax +
jnz loc_495FF1  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] eax +
call sub_4586F0  +
mov [esp+4Ch+var_4C] ebx +
call free  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
shl eax 2 +
mov [esp+4Ch+var_4C] eax +
call sub_459B80  +
test eax eax +
mov [ebp+60h] eax +
jz loc_495C1B  +
mov edi [esp+4Ch+arg_0] +
mov edx [edi+64h] +
mov edi [edi+6Ch] +
test edi edi +
jz loc_495ABF  +
xor ecx ecx +
jmp loc_495C67  +
mov ebx [edx+38h] +
add ebx [esi+1Ch] +
mov [eax+ecx*4] ebx +
add ecx 1 +
mov edx [edx+0Ch] +
cmp ecx edi +
jz loc_495ABF  +
mov esi [edx+3Ch] +
test esi esi +
jnz loc_495C50  +
mov ebx [edx+1Ch] +
mov [eax+ecx*4] ebx +
jmp loc_495C59  +
mov eax [ebp+68h] +
jle loc_495C90  +
mov edx [esp+4Ch+var_30] +
nop   +
mov ecx [eax] +
add eax 8 +
mov ebx [eax-4] +
sub edx 1 +
mov [ecx+1Ch] ebx +
jnz loc_495C80  +
mov ecx [esp+4Ch+var_2C] +
mov edx [esp+4Ch+arg_8] +
mov eax [esp+4Ch+arg_4] +
call sub_492A60  +
test eax eax +
jz loc_495D6F  +
mov ecx [esp+4Ch+var_2C] +
xor eax eax +
mov [esp+4Ch+var_10] 0 +
test ecx ecx +
jz loc_495CDD  +
mov ebx [esp+4Ch+arg_4] +
mov esi [esp+4Ch+arg_8] +
add eax [ecx+24h] +
mov edx esi +
mov [esp+4Ch+var_10] eax +
mov eax ebx +
call sub_492A60  +
mov ecx eax +
mov eax [esp+4Ch+var_10] +
test ecx ecx +
jnz loc_495CC3  +
mov [esp+4Ch+var_4C] eax +
call sub_459B80  +
test eax eax +
mov [ebp+34h] eax +
jz loc_495C1B  +
mov edx [esp+4Ch+arg_8] +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_10] 0 +
call sub_4929F0  +
test eax eax +
mov ecx eax +
jz loc_495DB3  +
mov ebx [esp+4Ch+arg_4] +
mov esi [esp+4Ch+arg_8] +
jmp loc_495D33  +
mov edx esi +
mov eax ebx +
call sub_492A60  +
test eax eax +
mov ecx eax +
jz loc_495DB3  +
mov edi [ecx+24h] +
test edi edi +
jz loc_495D20  +
mov eax [esp+4Ch+arg_C] +
mov [esp+4Ch+var_34] ecx +
mov [esp+4Ch+var_40] eax +
mov eax [ebp+34h] +
add eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_48] ecx +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_44] eax +
call sub_497AB0  +
test eax eax +
jz loc_495C1B  +
add [esp+4Ch+var_10] edi +
mov ecx [esp+4Ch+var_34] +
jmp loc_495D20  +
mov eax [esp+4Ch+var_2C] +
mov ecx [esp+4Ch+arg_C] +
mov eax [eax+24h] +
mov [esp+4Ch+var_10] eax +
mov eax [ebp+8] +
mov [esp+4Ch+var_4C] 0 +
mov [esp+4Ch+var_48] 0 +
lea edx [eax+18h] +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_40] eax +
lea eax [ebp+34h] +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_4] +
call sub_4923F0  +
test eax eax +
jz loc_495C1B  +
mov eax [ebp+34h] +
mov edx [esp+4Ch+arg_8] +
mov [ebp+0Ch] eax +
add eax [esp+4Ch+var_10] +
mov [ebp+10h] eax +
mov eax [esp+4Ch+arg_4] +
call sub_4929F0  +
mov [ebp+18h] eax +
mov eax [ebp+0Ch] +
mov [ebp+1Ch] eax +
mov eax 1 +
jmp loc_495BAD  +
mov eax [esp+4Ch+arg_0] +
mov [esp+4Ch+var_48] 84h +
mov [esp+4Ch+var_4C] eax +
call sub_458B60  +
test eax eax +
mov ebp eax +
jnz loc_495AA2  +
xor eax eax +
jmp loc_495C1D  +
mov eax [esp+4Ch+arg_0] +
mov ebx 1 +
mov [esp+4Ch+arg_4] eax +
jmp loc_495ADC  +
cmp [esp+4Ch+var_30] 1 +
mov ebp [esp+4Ch+var_28] +
jle loc_495F77  +
mov edi [esp+4Ch+var_30] +
mov eax edi +
shl eax 3 +
mov [esp+4Ch+var_4C] eax +
call sub_459B80  +
test eax eax +
jz loc_495C1B  +
mov [ebp+64h] edi +
mov edi [esp+4Ch+arg_0] +
mov ebx eax +
mov [ebp+68h] eax +
mov [esp+4Ch+var_24] 0 +
mov [esp+4Ch+var_28] 0 +
mov [esp+4Ch+var_30] edi +
mov [esp+4Ch+var_20] ebp +
mov eax [esp+4Ch+var_30] +
mov ebp [eax+64h] +
test ebp ebp +
jz loc_495F00  +
mov eax [ebp+3Ch] +
test eax eax +
jz loc_495E83  +
cmp ebp eax +
jz loc_495E83  +
test byte ptr [ebp+15h] 20h +
jz loc_495EF5  +
mov eax [ebp+1Ch] +
test eax eax +
jnz loc_495EF5  +
mov esi [ebp+0] +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] eax +
call strcmp  +
mov ecx 1 +
test eax eax +
jz loc_495EB5  +
mov cl 11h +
mov edi offset a_gnu_linkonc_4 +
cmps   +
setz cl  +
movzx ecx cl +
test byte ptr [ebp+14h] 1 +
jz loc_495EC5  +
mov eax [esp+4Ch+var_30] +
cmp [esp+4Ch+arg_0] eax +
jz loc_495EC9  +
test ecx ecx +
jz loc_495EF5  +
mov esi [ebp+28h] +
test esi esi +
jnz loc_495ED3  +
mov esi [ebp+24h] +
test ecx ecx +
jz loc_495F20  +
mov edi [ebp+40h] +
test edi edi +
jnz loc_495F42  +
mov edi [esp+4Ch+var_24] +
mov eax edi +
mov [ebp+1Ch] edi +
add edi esi +
mov [esp+4Ch+var_24] edi +
mov [ebx] ebp +
add ebx 8 +
mov [ebx-4] eax +
mov ebp [ebp+0Ch] +
test ebp ebp +
jnz loc_495E72  +
mov eax [esp+4Ch+var_20] +
mov eax [eax+14h] +
cmp [esp+4Ch+var_30] eax +
jz loc_495FE7  +
mov [esp+4Ch+var_30] eax +
jmp loc_495E63  +
mov ecx [ebp+40h] +
mov edi 1 +
mov eax [esp+4Ch+var_28] +
shl edi cl +
lea eax [eax+edi-1] +
neg edi  +
and eax edi +
lea edi [esi+eax] +
mov [ebp+1Ch] eax +
mov [esp+4Ch+var_28] edi +
jmp loc_495EED  +
mov [esp+4Ch+var_48] 0D14h +
mov [esp+4Ch+var_4C] offset a____Binutil_27 +
call sub_44BA40  +
jmp loc_495EDE  +
mov byte ptr [ebp+0] 0 +
lea edi [ebp+1] +
mov dl 83h +
jmp loc_495A77  +
xor ebx ebx +
add edi 2 +
mov [edi-2] bx +
sub edx 2 +
jmp loc_495A83  +
mov eax [esp+4Ch+arg_4] +
mov dword ptr [ebp+64h] 0FFFFFFFFh +
cmp [esp+4Ch+arg_0] eax +
jz loc_495C90  +
mov ebx [eax+64h] +
mov edi [esp+4Ch+arg_0] +
test ebx ebx +
mov esi [edi+64h] +
jnz loc_495FDE  +
jmp loc_495C90  +
test byte ptr [ebx+15h] 20h +
jnz loc_495C90  +
mov eax [ebx] +
mov [esp+4Ch+var_48] eax +
mov eax [esi] +
mov [esp+4Ch+var_4C] eax +
call strcmp  +
test eax eax +
jnz loc_495FD0  +
mov eax [esi+3Ch] +
mov [ebx+3Ch] eax +
mov eax [esi+38h] +
mov [ebx+38h] eax +
mov eax [esi+1Ch] +
mov [ebx+1Ch] eax +
mov ebx [ebx+0Ch] +
mov esi [esi+0Ch] +
test ebx ebx +
jz loc_495C90  +
test esi esi +
jnz loc_495FA0  +
jmp loc_495C90  +
mov ebp [esp+4Ch+var_20] +
mov eax [esp+4Ch+var_30] +
jmp loc_495F82  +
mov edx [esp+4Ch+arg_8] +
mov eax [esp+4Ch+arg_4] +
call sub_4929F0  +
test eax eax +
mov [esp+4Ch+var_2C] eax +
jz loc_495C07  +
mov eax [esp+4Ch+arg_4] +
mov [esp+4Ch+var_4C] eax +
call sub_4509A0  +
test eax eax +
jz loc_495C07  +
mov eax [esp+4Ch+arg_4] +
mov eax [eax+78h] +
mov dword ptr [ebp+80h] 1 +
mov [esp+4Ch+arg_C] eax +
mov [ebp+38h] eax +
jmp loc_495AF5  +
***
push esi  +
push ebx  +
sub esp 3Ch +
mov esi [esp+3Ch+arg_4] +
mov ebx [esp+3Ch+arg_0] +
test esi esi +
jz loc_4961F0  +
mov eax [ebx+4] +
cmp dword ptr [eax+4] 5 +
jnz loc_4961F0  +
mov eax [ebx+0A0h] +
mov ebp [eax+234h] +
test ebp ebp +
jz loc_4961C4  +
mov eax [esp+3Ch+arg_8] +
cmp [ebp+0] eax +
jz loc_496212  +
mov eax [ebx+4] +
mov eax [eax+1B0h] +
mov dword ptr [ebp+8] 0 +
mov dword ptr [ebp+4] 0 +
mov dword ptr [ebp+0Ch] 0 +
mov [esp+3Ch+var_28] eax +
mov eax [esp+3Ch+arg_8] +
mov [ebp+0] eax +
mov ebx [esi] +
test ebx ebx +
jz loc_4961F0  +
xor edx edx +
xor edi edi +
mov [esp+3Ch+var_24] ebp +
mov ebp edx +
mov [esp+3Ch+var_20] 0 +
jmp loc_4960EA  +
cmp edi 1 +
mov eax 2 +
cmovz edi eax +
mov ebp ebx +
add esi 4 +
mov ebx [esi] +
test ebx ebx +
jz loc_49616F  +
test byte ptr [ebx+0Dh] 40h +
jnz loc_4960D0  +
mov eax [esp+3Ch+var_28] +
lea edx [esp+3Ch+var_10] +
mov ecx [esp+3Ch+arg_8] +
mov eax [eax+15Ch] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_38] ecx +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
jz loc_496158  +
mov ecx [esp+3Ch+var_10] +
cmp [esp+3Ch+arg_C] ecx +
jb loc_496158  +
cmp ecx [esp+3Ch+var_20] +
jbe loc_4961B0  +
mov edx [esp+3Ch+var_24] +
test ebp ebp +
mov [edx+4] ebx +
mov [edx+0Ch] eax +
mov dword ptr [edx+8] 0 +
jz loc_49623C  +
test byte ptr [ebx+0Ch] 1 +
jz loc_496200  +
mov eax [ebp+4] +
mov edx [esp+3Ch+var_24] +
mov [esp+3Ch+var_20] ecx +
mov [edx+8] eax +
test edi edi +
mov eax 1 +
cmovz edi eax +
add esi 4 +
mov ebx [esi] +
test ebx ebx +
jnz loc_4960EA  +
mov ebp [esp+3Ch+var_24] +
mov edx [ebp+4] +
test edx edx +
jz loc_4961F0  +
mov ecx [esp+3Ch+arg_10] +
test ecx ecx +
jz loc_49618B  +
mov eax [ebp+8] +
mov edx [esp+3Ch+arg_10] +
mov [edx] eax +
mov eax [esp+3Ch+arg_14] +
test eax eax +
jz loc_49619F  +
mov eax [ebp+4] +
mov edx [esp+3Ch+arg_14] +
mov eax [eax+4] +
mov [edx] eax +
mov eax [ebp+4] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+3Ch+var_20] ecx +
jnz loc_496158  +
mov edx [esp+3Ch+var_24] +
cmp eax [edx+0Ch] +
jbe loc_496158  +
jmp loc_496127  +
mov [esp+3Ch+var_38] 10h +
mov [esp+3Ch+var_3C] ebx +
call sub_458B60  +
mov ebp eax +
mov eax [ebx+0A0h] +
test ebp ebp +
mov [eax+234h] ebp +
jnz loc_496078  +
lea esi [esi+0] +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp edi 2 +
mov [esp+3Ch+var_20] ecx +
jnz loc_49614A  +
jmp loc_4960DD  +
mov eax [ebp+4] +
test eax eax +
jz loc_496085  +
mov eax [eax+8] +
cmp eax [esp+3Ch+arg_C] +
ja loc_496085  +
add eax [ebp+0Ch] +
cmp [esp+3Ch+arg_C] eax +
jnb loc_496085  +
jmp loc_49617A  +
mov [esp+3Ch+var_20] ecx +
jmp loc_496158  +
***
push esi  +
push ebx  +
sub esp 8Ch +
mov esi [esp+8Ch+arg_18] +
mov eax [esp+8Ch+arg_14] +
mov ebx [esp+8Ch+arg_2C] +
mov [esp+8Ch+var_2C] 0 +
test esi esi +
mov dword ptr [eax] 0 +
jz loc_49628E  +
mov eax [esp+8Ch+arg_18] +
mov dword ptr [eax] 0 +
mov ecx [esp+8Ch+arg_20] +
mov eax [esp+8Ch+arg_1C] +
test ecx ecx +
mov dword ptr [eax] 0 +
jz loc_4962B3  +
mov eax [esp+8Ch+arg_20] +
mov dword ptr [eax] 0 +
mov eax [esp+8Ch+arg_0] +
mov eax [eax+28h] +
mov [esp+8Ch+var_7C] ebx +
mov [esp+8Ch+var_88] 0 +
shr eax 5 +
test al 42h +
setz al  +
movzx eax al +
mov [esp+8Ch+var_78] eax +
mov eax [esp+8Ch+arg_4] +
mov [esp+8Ch+var_80] eax +
mov eax [esp+8Ch+arg_24] +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] eax +
call sub_4959F0  +
test eax eax +
jz loc_496492  +
mov edx [esp+8Ch+arg_8] +
xor eax eax +
mov ebp [ebx] +
test edx edx +
setnz al  +
mov [esp+8Ch+var_5C] eax +
jz loc_496431  +
mov eax [esp+8Ch+arg_C] +
test eax eax +
jnz loc_496340  +
mov eax [esp+8Ch+arg_10] +
test eax eax +
jnz loc_496340  +
mov eax [esp+8Ch+arg_18] +
test eax eax +
jz loc_496354  +
mov [esp+8Ch+var_88] 0F3Dh +
mov [esp+8Ch+var_8C] offset a____Binutil_27 +
call sub_44BA40  +
mov eax [esp+8Ch+arg_8] +
mov eax [eax+10h] +
mov [esp+8Ch+arg_C] eax +
mov eax [esp+8Ch+arg_8] +
mov edx [eax+8] +
mov eax [esp+8Ch+arg_C] +
mov eax [eax+3Ch] +
test eax eax +
jz loc_49647F  +
mov ecx [esp+8Ch+arg_C] +
mov eax [eax+1Ch] +
add edx [ecx+38h] +
mov [esp+8Ch+var_6C] edx +
add [esp+8Ch+var_6C] eax +
mov ebx [ebp+0Ch] +
test ebx ebx +
jz loc_496492  +
mov ecx [esp+8Ch+var_5C] +
mov dword ptr [ebp+5Ch] 0 +
test ecx ecx +
jz loc_4964B7  +
mov eax [ebp+7Ch] +
test eax eax +
jz loc_49671C  +
cmp eax 1 +
jz loc_49676D  +
mov ebx [ebp+0] +
test ebx ebx +
jz loc_496638  +
mov esi [esp+8Ch+arg_8] +
mov edi [esp+8Ch+arg_1C] +
jmp loc_4963F8  +
mov eax [ebx+24h] +
test eax eax +
jz loc_49649F  +
mov ebx [ebx] +
test ebx ebx +
jz loc_496638  +
test byte ptr [esi+0Ch] 8 +
jz loc_496405  +
mov eax [ebx+14h] +
test eax eax +
jnz loc_4963E3  +
mov eax [esp+8Ch+arg_14] +
mov edx esi +
mov ecx [esp+8Ch+var_6C] +
mov [esp+8Ch+var_84] ebp +
mov [esp+8Ch+var_88] edi +
mov [esp+8Ch+var_8C] eax +
mov eax ebx +
call sub_495140  +
test eax eax +
jz loc_4963EE  +
mov [esp+8Ch+var_68] eax +
jmp loc_49652E  +
mov edi [esp+8Ch+arg_18] +
test edi edi +
jz loc_496452  +
mov esi [esp+8Ch+arg_C] +
mov edx [esp+8Ch+arg_10] +
test esi esi +
jnz loc_49636F  +
mov [esp+8Ch+var_88] 0F43h +
mov [esp+8Ch+var_8C] offset a____Binutil_27 +
call sub_44BA40  +
mov eax [esp+8Ch+arg_C] +
mov edx [esp+8Ch+arg_10] +
mov eax [eax+3Ch] +
test eax eax +
jnz loc_496381  +
mov eax [esp+8Ch+arg_C] +
add edx [eax+1Ch] +
mov [esp+8Ch+var_6C] edx +
jmp loc_496396  +
xor eax eax +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esp+8Ch+var_6C] +
mov eax ebx +
call sub_4929D0  +
test eax eax +
jnz loc_496405  +
jmp loc_4963EE  +
mov ebx [ebp+0] +
mov [esp+8Ch+var_28] 0 +
mov [esp+8Ch+var_24] 0 +
mov [esp+8Ch+var_20] 0 +
test ebx ebx +
mov [esp+8Ch+var_1C] 0 +
jz loc_497230  +
mov edi 0FFFFFFFFh +
mov [esp+8Ch+var_74] edi +
mov edi [esp+8Ch+var_6C] +
lea esi [esp+8Ch+var_1C] +
mov eax [ebx+14h] +
test eax eax +
jz loc_4965A6  +
mov ecx [ebx+24h] +
test ecx ecx +
jz loc_496595  +
xor eax eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4964F3  +
mov [esp+8Ch+var_68] eax +
mov eax [esp+8Ch+arg_1C] +
mov eax [eax] +
test eax eax +
jz loc_496640  +
mov [esp+8Ch+var_68] 1 +
mov eax [esp+8Ch+var_2C] +
test eax eax +
jz loc_49654D  +
mov ecx [eax+1Ch] +
test ecx ecx +
jz loc_496837  +
mov eax [eax+20h] +
mov edi [esp+8Ch+arg_18] +
mov [edi] eax +
mov eax [esp+8Ch+arg_0] +
mov edx [eax+28h] +
mov eax [esp+8Ch+var_68] +
shr edx 5 +
and edx 42h +
jnz loc_496494  +
mov edx [ebp+64h] +
mov ecx [ebp+68h] +
test edx edx +
jle loc_496494  +
mov eax [ecx] +
add ecx 8 +
sub edx 1 +
mov dword ptr [eax+1Ch] 0 +
jnz loc_496575  +
mov eax [esp+8Ch+var_68] +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx edi +
mov eax ebx +
call sub_4929D0  +
test eax eax +
jz loc_496509  +
lea eax [esp+8Ch+var_20] +
mov edx edi +
mov [esp+8Ch+var_88] eax +
lea eax [esp+8Ch+var_24] +
mov [esp+8Ch+var_8C] eax +
lea ecx [esp+8Ch+var_28] +
mov eax ebx +
mov [esp+8Ch+var_80] ebp +
mov [esp+8Ch+var_84] esi +
call sub_4952C0  +
test eax eax +
jz loc_496509  +
cmp eax [esp+8Ch+var_74] +
ja loc_4966DD  +
mov edx [esp+8Ch+var_28] +
test edx edx +
jz loc_4965ED  +
mov ecx [esp+8Ch+arg_14] +
mov [ecx] edx +
mov edx [esp+8Ch+var_24] +
test edx edx +
jz loc_4965F9  +
mov [esp+8Ch+var_2C] edx +
mov edx [esp+8Ch+arg_20] +
test edx edx +
jz loc_496615  +
mov edx [esp+8Ch+var_1C] +
test edx edx +
jz loc_496615  +
mov ecx [esp+8Ch+arg_20] +
mov [ecx] edx +
mov edx [esp+8Ch+var_20] +
test edx edx +
jz loc_4966D9  +
mov ecx [esp+8Ch+arg_1C] +
mov [esp+8Ch+var_74] eax +
mov eax 1 +
mov [ecx] edx +
jmp loc_49650B  +
mov [esp+8Ch+var_68] 0 +
mov eax [esp+8Ch+arg_28] +
test eax eax +
jnz loc_4966E7  +
mov [esp+8Ch+arg_28] 4 +
lea eax [ebp+40h] +
mov ebx [ebp+0Ch] +
mov [esp+8Ch+var_3C] eax +
lea eax [ebp+3Ch] +
mov [esp+8Ch+var_38] eax +
jmp loc_496688  +
add ebx 8 +
xor edi edi +
cmp ecx ebx +
jnb loc_496825  +
test edi edi +
mov [ebp+0Ch] ebx +
jnz loc_4972E9  +
mov ecx [ebp+10h] +
mov esi ebx +
cmp ecx ebx +
jbe loc_49652E  +
mov eax [ebp+14h] +
lea edx [esi+4] +
mov ebx esi +
add eax 4 +
cmp ecx edx +
jb loc_496670  +
mov edx esi +
call sub_492940  +
cmp eax 0FFFFFFFFh +
jnz loc_4968CA  +
mov edx [ebp+0Ch] +
xor edi edi +
mov eax [ebp+14h] +
lea ebx [edx+0Ch] +
cmp [ebp+10h] ebx +
jb loc_49667D  +
add edx 4 +
add eax 4 +
call sub_492960  +
mov edx [ebp+0Ch] +
lea ebx [edx+0Ch] +
mov edi eax +
jmp loc_49667D  +
mov [esp+8Ch+var_74] eax +
mov eax 1 +
jmp loc_49650B  +
cmp [esp+8Ch+arg_28] 8 +
jz loc_49665A  +
cmp [esp+8Ch+arg_28] 4 +
jz loc_49665A  +
mov [esp+8Ch+var_88] 0FB3h +
mov [esp+8Ch+var_8C] offset a____Binutil_27 +
call sub_44BA40  +
jmp loc_49665A  +
mov eax [ebp+6Ch] +
lea edx [eax+1] +
cmp eax 63h +
mov [ebp+6Ch] edx +
jle loc_4963C8  +
mov eax [esp+8Ch+arg_0] +
call sub_492870  +
mov [ebp+70h] eax +
mov eax [esp+8Ch+arg_0] +
call sub_492870  +
mov edx [ebp+70h] +
test edx edx +
mov [ebp+74h] eax +
jz loc_49723D  +
test eax eax +
jz loc_49723D  +
mov eax ebp +
call sub_4954B0  +
mov dword ptr [ebp+7Ch] 1 +
mov eax ebp +
call sub_4954B0  +
cmp dword ptr [ebp+7Ch] 1 +
jnz loc_4963C8  +
mov eax [esp+8Ch+arg_8] +
test byte ptr [eax+0Ch] 8 +
jnz loc_49715E  +
mov eax [esp+8Ch+arg_8] +
mov edi [esp+8Ch+arg_8] +
mov eax [eax+4] +
mov ebx [edi+10h] +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_88] eax +
mov eax [ebp+74h] +
mov [esp+8Ch+var_8C] eax +
call sub_44E180  +
test eax eax +
jz loc_496638  +
mov eax [eax+0Ch] +
test eax eax +
jz loc_496638  +
mov ecx [esp+8Ch+var_6C] +
jmp loc_4967EA  +
mov eax [eax] +
test eax eax +
jz loc_496638  +
mov edx [eax+4] +
cmp ecx [edx+14h] +
jnz loc_4967E0  +
mov esi [edx+18h] +
test esi esi +
jz loc_4967FD  +
cmp ebx esi +
jnz loc_4967E0  +
mov eax [edx+4] +
mov edi [esp+8Ch+arg_14] +
mov [edx+18h] ebx +
mov [esp+8Ch+var_68] 1 +
mov [edi] eax +
mov eax [edx+8] +
mov edi [esp+8Ch+arg_1C] +
mov [edi] eax +
jmp loc_49652E  +
call sub_492940  +
mov ebx [ebp+0Ch] +
add ebx 8 +
mov edi eax +
jmp loc_49667D  +
mov edi [esp+8Ch+arg_14] +
xor eax eax +
mov edx [edi] +
test edx edx +
cmovz eax edi +
mov edi [esp+8Ch+arg_18] +
mov [esp+8Ch+var_7C] eax +
mov eax [esp+8Ch+arg_10] +
mov [esp+8Ch+var_78] edi +
mov [esp+8Ch+var_80] eax +
mov eax [esp+8Ch+arg_C] +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_4] +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+arg_0] +
mov [esp+8Ch+var_8C] eax +
call sub_496040  +
mov edi [esp+8Ch+arg_C] +
mov edx [edi+3Ch] +
mov ecx [edi+1Ch] +
test edx edx +
jz loc_49689D  +
mov ecx [edi+38h] +
add ecx [edx+1Ch] +
test eax eax +
mov edx [esp+8Ch+var_2C] +
jz loc_4968AD  +
add ecx [eax+8] +
cmp ecx [edx+28h] +
jz loc_4968BC  +
mov eax [edx+20h] +
mov dword ptr [edx+1Ch] 1 +
jmp loc_496544  +
mov eax [esp+8Ch+arg_18] +
mov eax [eax] +
mov [edx+20h] eax +
jmp loc_4968B0  +
test eax eax +
jz loc_4972C8  +
cmp [esp+8Ch+arg_28] 8 +
mov [esp+8Ch+var_60] eax +
jz loc_496980  +
mov eax [esp+8Ch+arg_28] +
add dword ptr [ebp+0Ch] 4 +
cmp [esp+8Ch+arg_28] 4 +
mov [esp+8Ch+var_64] eax +
setnz cl  +
mov ebx [ebp+0Ch] +
mov edi [ebp+14h] +
mov eax [esp+8Ch+var_60] +
mov [esp+8Ch+var_74] 0FFFFFFFEh +
mov [esp+8Ch+var_40] 0 +
mov [esp+8Ch+var_58] edi +
add edi 4 +
add eax ebx +
mov [esp+8Ch+var_70] edi +
lea edi [ebx+2] +
cmp eax edi +
mov [esp+8Ch+var_4C] eax +
mov [esp+8Ch+var_54] edi +
jnb loc_4970DB  +
test cl cl +
jnz loc_4970C2  +
cmp [esp+8Ch+var_64] 4 +
jz loc_4970FE  +
lea eax [ebx+0Ah] +
xor edi edi +
xor ebx ebx +
cmp [esp+8Ch+var_4C] eax +
jnb loc_497123  +
mov eax [esp+8Ch+var_54] +
add eax [esp+8Ch+var_64] +
lea ecx [eax+1] +
cmp [esp+8Ch+var_4C] ecx +
mov [esp+8Ch+var_34] ecx +
jnb loc_496993  +
cmp [esp+8Ch+var_74] 2 +
ja loc_4972A2  +
xor eax eax +
jmp loc_4969B5  +
add dword ptr [ebp+0Ch] 4 +
xor ecx ecx +
mov [esp+8Ch+var_64] 4 +
jmp loc_4968FE  +
movzx eax byte ptr [eax] +
cmp [esp+8Ch+var_74] 2 +
mov [esp+8Ch+var_2D] al +
ja loc_4972A2  +
cmp eax 4 +
ja loc_497252  +
jz loc_4969D7  +
cmp eax 2 +
jz loc_4969D7  +
mov [esp+8Ch+var_88] eax +
mov [esp+8Ch+var_8C] offset aDwarfErrorFoun +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
jmp loc_49652E  +
mov eax [esp+8Ch+var_3C] +
mov ecx [ebp+38h] +
mov edx [ebp+8] +
mov [esp+8Ch+var_8C] ebx +
mov [esp+8Ch+var_80] eax +
mov eax [esp+8Ch+var_38] +
mov [esp+8Ch+var_88] edi +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+var_58] +
call sub_4923F0  +
test eax eax +
jz loc_49652E  +
cmp edi 0 +
mov eax [ebp+40h] +
ja loc_49652E  +
cmp ebx eax +
jnb loc_49652E  +
mov edi [esp+8Ch+var_58] +
mov [esp+8Ch+var_88] 1E4h +
mov [esp+8Ch+var_8C] edi +
call sub_458B60  +
test eax eax +
mov [esp+8Ch+var_48] eax +
jz loc_49652E  +
mov eax [ebp+3Ch] +
mov [esp+8Ch+var_58] edi +
add ebx eax +
add eax [ebp+40h] +
mov [esp+8Ch+var_88] ebx +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_74] eax +
mov [esp+8Ch+var_7C] eax +
lea eax [esp+8Ch+var_1C] +
mov [esp+8Ch+var_84] eax +
mov [esp+8Ch+var_8C] edi +
call sub_45A740  +
add ebx [esp+8Ch+var_1C] +
test eax eax +
mov [esp+8Ch+var_50] eax +
jz loc_496C3F  +
mov edi [esp+8Ch+var_58] +
mov [esp+8Ch+var_54] ebp +
mov ebp ebx +
mov [esp+8Ch+var_44] esi +
mov [esp+8Ch+var_88] 18h +
mov [esp+8Ch+var_8C] edi +
call sub_458B60  +
test eax eax +
mov ebx eax +
jz loc_497249  +
mov eax [esp+8Ch+var_50] +
mov esi [esp+8Ch+var_74] +
mov [ebx] eax +
lea eax [esp+8Ch+var_1C] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_7C] esi +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_84] eax +
mov [esp+8Ch+var_8C] edi +
call sub_45A740  +
mov edx [esp+8Ch+var_1C] +
add edx ebp +
lea ebp [edx+1] +
mov [ebx+4] eax +
xor eax eax +
cmp esi ebp +
jb loc_496AE0  +
movzx eax byte ptr [edx] +
mov [ebx+8] eax +
jmp loc_496AF6  +
mov eax [ebx+10h] +
lea eax [eax+edx*8] +
add edx 1 +
mov [eax] esi +
mov [ebx+0Ch] edx +
mov [eax+4] ecx +
mov eax [esp+8Ch+var_74] +
lea ecx [esp+8Ch+var_1C] +
mov [esp+8Ch+var_84] ecx +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_7C] eax +
mov [esp+8Ch+var_8C] edi +
call sub_45A740  +
add ebp [esp+8Ch+var_1C] +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_8C] edi +
mov [esp+8Ch+var_88] ebp +
mov esi eax +
mov eax [esp+8Ch+var_74] +
mov [esp+8Ch+var_7C] eax +
lea eax [esp+8Ch+var_1C] +
mov [esp+8Ch+var_84] eax +
call sub_45A740  +
add ebp [esp+8Ch+var_1C] +
test esi esi +
mov ecx eax +
jz loc_496B89  +
mov edx [ebx+0Ch] +
test dl 3 +
jnz loc_496AE5  +
mov [esp+8Ch+var_70] eax +
mov eax [ebx+10h] +
mov ecx eax +
lea eax ds:20h[edx*8] +
mov [esp+8Ch+var_8C] ecx +
mov [esp+8Ch+var_88] eax +
call sub_459C10  +
mov ecx [esp+8Ch+var_70] +
test eax eax +
jz loc_496ED9  +
mov [ebx+10h] eax +
mov edx [ebx+0Ch] +
jmp loc_496AE8  +
mov ecx [esp+8Ch+var_50] +
mov eax 0ECF56BFh +
mov esi [esp+8Ch+var_48] +
mul  ecx +
mov eax ecx +
sub eax edx +
shr eax 1 +
add eax edx +
shr eax 6 +
imul eax eax +
sub ecx eax +
mov eax ecx +
mov ecx [esp+8Ch+var_54] +
lea eax [esi+eax*4] +
mov edx [eax] +
mov [ebx+14h] edx +
mov [eax] ebx +
mov eax ebp +
sub eax [ecx+3Ch] +
cmp eax [ecx+40h] +
jnb loc_496C37  +
mov eax [esp+8Ch+var_74] +
mov [esp+8Ch+var_88] ebp +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_8C] edi +
mov [esp+8Ch+var_7C] eax +
lea eax [esp+8Ch+var_1C] +
mov [esp+8Ch+var_84] eax +
call sub_45A740  +
add ebp [esp+8Ch+var_1C] +
mov ecx eax +
mov [esp+8Ch+var_50] eax +
mov eax 0ECF56BFh +
mul  ecx +
mov eax ecx +
sub eax edx +
shr eax 1 +
add eax edx +
mov edx ecx +
shr eax 6 +
imul eax eax +
sub ecx eax +
mov eax ecx +
mov eax [esi+eax*4] +
test eax eax +
jz loc_496C2B  +
cmp edx [eax] +
jz loc_496C37  +
mov edx [esp+8Ch+var_50] +
jmp loc_496C24  +
cmp edx [eax] +
jz loc_496C37  +
mov eax [eax+14h] +
test eax eax +
jnz loc_496C20  +
mov eax [esp+8Ch+var_50] +
test eax eax +
jnz loc_496A87  +
mov ebp [esp+8Ch+var_54] +
mov esi [esp+8Ch+var_44] +
mov eax [esp+8Ch+var_4C] +
mov edi [esp+8Ch+var_34] +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_7C] eax +
lea eax [esp+8Ch+var_20] +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+var_58] +
mov [esp+8Ch+var_88] edi +
mov [esp+8Ch+var_8C] eax +
call sub_45A740  +
mov ecx eax +
mov eax [esp+8Ch+var_20] +
add eax edi +
test ecx ecx +
mov edi eax +
jz loc_49727C  +
mov eax ecx +
mov edx 0ECF56BFh +
mul  edx +
mov eax ecx +
sub eax edx +
shr eax 1 +
add eax edx +
mov edx ecx +
shr eax 6 +
imul eax eax +
sub edx eax +
mov eax edx +
mov edx [esp+8Ch+var_48] +
mov ebx [edx+eax*4] +
test ebx ebx +
jnz loc_496CBB  +
jmp loc_496F0F  +
mov ebx [ebx+14h] +
test ebx ebx +
jz loc_496F0F  +
cmp ecx [ebx] +
lea esi [esi+0] +
jnz loc_496CB0  +
mov eax [esp+8Ch+var_58] +
mov [esp+8Ch+var_88] 64h +
mov [esp+8Ch+var_8C] eax +
call sub_458B60  +
test eax eax +
mov [esp+8Ch+var_74] eax +
jz loc_49652E  +
mov eax [esp+8Ch+var_74] +
mov ecx [esp+8Ch+var_58] +
mov edx [esp+8Ch+var_4C] +
mov [eax+8] ecx +
mov ecx [esp+8Ch+var_40] +
mov [eax+54h] ecx +
mov ecx eax +
movzx eax [esp+8Ch+var_2D] +
mov [ecx+58h] al +
movzx eax byte ptr [esp+8Ch+var_64] +
mov [ecx+59h] al +
mov eax ecx +
mov ecx [esp+8Ch+var_48] +
mov [eax+30h] esi +
mov esi [ebx+0Ch] +
mov [eax+40h] edx +
mov [eax+50h] ebp +
mov [eax+1Ch] ecx +
mov ecx eax +
mov eax [ebp+1Ch] +
test esi esi +
mov [ecx+34h] eax +
jz loc_496F74  +
mov eax ecx +
xor esi esi +
lea ecx [ecx+0Ch] +
mov [esp+8Ch+var_48] ecx +
mov ecx edi +
mov edi edx +
mov [esp+8Ch+var_50] ebp +
mov ebp eax +
mov [esp+8Ch+var_64] 0 +
mov [esp+8Ch+var_58] 0 +
mov [esp+8Ch+var_54] 0 +
jmp loc_496D8C  +
cmp eax 10h +
jz loc_496E82  +
ja loc_496DDB  +
cmp eax 3 +
nop   +
jnz loc_496D80  +
mov eax [esp+8Ch+var_14] +
mov [ebp+18h] eax +
lea esi [esi+0] +
add esi 1 +
cmp esi [ebx+0Ch] +
jnb loc_496F31  +
mov eax [ebx+10h] +
lea eax [eax+esi*8] +
mov edx [eax] +
mov [esp+8Ch+var_1C] edx +
mov edx [eax+4] +
lea eax [esp+8Ch+var_1C] +
mov [esp+8Ch+var_8C] ecx +
mov ecx ebp +
mov [esp+8Ch+var_88] edi +
call sub_492DD0  +
test eax eax +
mov ecx eax +
jz loc_496E18  +
mov eax [esp+8Ch+var_1C] +
cmp eax 12h +
jz loc_496E67  +
jbe loc_496D60  +
cmp eax 1Bh +
jz loc_496E21  +
cmp eax 55h +
jz loc_496DEE  +
cmp eax 13h +
nop   +
jnz loc_496D80  +
mov eax [esp+8Ch+var_14] +
mov [ebp+20h] eax +
jmp loc_496D80  +
mov eax [esp+8Ch+var_14] +
cmp dword ptr [ebx+4] 11h +
mov [esp+8Ch+var_64] eax +
jnz loc_496D80  +
mov [ebp+5Ch] eax +
jmp loc_496D80  +
mov edx [esp+8Ch+var_10] +
mov eax [esp+8Ch+var_14] +
mov [esp+8Ch+var_70] ecx +
mov [esp+8Ch+var_88] edx +
mov edx [esp+8Ch+var_48] +
mov [esp+8Ch+var_8C] eax +
mov eax ebp +
call sub_492CB0  +
mov ecx [esp+8Ch+var_70] +
test eax eax +
jnz loc_496D80  +
mov ebp [esp+8Ch+var_50] +
jmp loc_49652E  +
mov eax [esp+8Ch+var_14] +
mov [esp+8Ch+var_70] eax +
mov eax [esp+8Ch+var_18] +
cmp eax 8 +
jz loc_496E95  +
cmp eax 0Eh +
jz loc_496E95  +
cmp eax 1F21h +
jz loc_496E95  +
mov [esp+8Ch+var_4C] ecx +
mov [esp+8Ch+var_8C] offset aDwarfErrorDw_a +
call off_4BFA04  +
mov ecx [esp+8Ch+var_4C] +
mov [esp+8Ch+var_70] 0 +
mov eax [esp+8Ch+var_70] +
mov [ebp+28h] eax +
jmp loc_496D80  +
mov eax [esp+8Ch+var_14] +
mov [esp+8Ch+var_58] eax +
xor eax eax +
cmp [esp+8Ch+var_18] 1 +
setnz al  +
mov [esp+8Ch+var_54] eax +
jmp loc_496D80  +
mov dword ptr [ebp+2Ch] 1 +
mov eax [esp+8Ch+var_14] +
mov [ebp+38h] eax +
jmp loc_496D80  +
mov eax [esp+8Ch+var_70] +
test eax eax +
jz loc_496E5B  +
mov [esp+8Ch+var_88] 3Ah +
mov [esp+8Ch+var_8C] eax +
mov [esp+8Ch+var_4C] ecx +
call strchr  +
mov ecx [esp+8Ch+var_4C] +
cmp [esp+8Ch+var_70] eax +
jz loc_496E5B  +
test eax eax +
jz loc_496E5B  +
cmp byte ptr [eax-1] 2Eh +
jnz loc_496E5B  +
lea edx [eax+1] +
cmp byte ptr [eax+1] 2Fh +
mov eax edx +
cmovnz eax [esp+8Ch+var_70] +
mov [esp+8Ch+var_70] eax +
jmp loc_496E5B  +
mov ebp [esp+8Ch+var_54] +
xor ebx ebx +
mov edi [esp+8Ch+var_48] +
mov esi [edi+ebx*4] +
test esi esi +
jz loc_496F02  +
lea esi [esi+0] +
mov eax [esi+10h] +
mov [esp+8Ch+var_8C] eax +
call free  +
mov esi [esi+14h] +
test esi esi +
jnz loc_496EF0  +
add ebx 1 +
cmp ebx 79h +
jnz loc_496EE3  +
jmp loc_49652E  +
mov [esp+8Ch+var_88] ecx +
mov [esp+8Ch+var_8C] offset aDwarfErrorCoul +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
jmp loc_49652E  +
mov edi ecx +
mov eax [esp+8Ch+var_64] +
mov ecx [esp+8Ch+var_58] +
mov edx [esp+8Ch+var_54] +
mov ebp [esp+8Ch+var_50] +
add eax ecx +
test edx edx +
cmovz eax ecx +
test eax eax +
mov [esp+8Ch+var_58] eax +
jz loc_496F74  +
mov ecx [esp+8Ch+var_58] +
mov eax [esp+8Ch+var_74] +
mov [esp+8Ch+var_8C] ecx +
mov ecx [esp+8Ch+var_64] +
lea edx [eax+0Ch] +
add eax 8 +
call sub_492AF0  +
test eax eax +
jz loc_49652E  +
mov eax [esp+8Ch+var_74] +
mov [eax+3Ch] edi +
mov eax [esp+8Ch+var_60] +
add eax [ebp+0Ch] +
jb loc_4972DC  +
mov [ebp+0Ch] eax +
mov eax [ebp+0] +
mov edi [esp+8Ch+var_74] +
test eax eax +
jz loc_497139  +
mov [eax+4] edi +
mov esi [esp+8Ch+var_5C] +
mov edi [esp+8Ch+var_74] +
test esi esi +
mov [edi] eax +
mov [ebp+0] edi +
jz loc_497000  +
mov eax [esp+8Ch+arg_8] +
test byte ptr [eax+0Ch] 8 +
jz loc_49703E  +
mov ebx [edi+14h] +
mov eax edi +
test ebx ebx +
jz loc_49703E  +
mov ecx [edi+24h] +
mov [esp+8Ch+var_68] 0 +
test ecx ecx +
jz loc_497031  +
mov ecx [ebp+18h] +
mov ebx [ebp+0Ch] +
mov eax ebx +
sub eax [ebp+1Ch] +
cmp eax [ecx+24h] +
jz loc_497141  +
mov esi [esp+8Ch+var_68] +
test esi esi +
jz loc_496688  +
jmp loc_496526  +
mov eax [esp+8Ch+var_74] +
mov edx [eax+14h] +
test edx edx +
jz loc_49707C  +
mov edi [eax+24h] +
mov [esp+8Ch+var_68] 0 +
test edi edi +
jnz loc_496FD7  +
mov edx [esp+8Ch+var_6C] +
call sub_4929D0  +
test eax eax +
jnz loc_49707C  +
mov eax [esp+8Ch+var_5C] +
mov [esp+8Ch+var_68] eax +
jmp loc_496FD7  +
mov edx [esp+8Ch+var_6C] +
call sub_4929D0  +
test eax eax +
jz loc_496FD7  +
mov eax [esp+8Ch+arg_1C] +
mov ecx [esp+8Ch+var_6C] +
mov edx [esp+8Ch+arg_8] +
mov [esp+8Ch+var_84] ebp +
mov [esp+8Ch+var_88] eax +
mov eax [esp+8Ch+arg_14] +
mov [esp+8Ch+var_8C] eax +
mov eax [esp+8Ch+var_74] +
call sub_495140  +
test eax eax +
setnz al  +
movzx eax al +
mov [esp+8Ch+var_68] eax +
jmp loc_496FD7  +
mov eax [esp+8Ch+arg_20] +
mov ecx [esp+8Ch+arg_14] +
mov edx [esp+8Ch+var_6C] +
mov [esp+8Ch+var_80] ebp +
mov [esp+8Ch+var_84] eax +
mov eax [esp+8Ch+arg_1C] +
mov [esp+8Ch+var_88] eax +
lea eax [esp+8Ch+var_2C] +
mov [esp+8Ch+var_8C] eax +
mov eax [esp+8Ch+var_74] +
call sub_4952C0  +
test eax eax +
setnz al  +
movzx eax al +
mov [esp+8Ch+var_68] eax +
jmp loc_496FD7  +
mov [esp+8Ch+var_88] 0ABDh +
mov [esp+8Ch+var_8C] offset a____Binutil_27 +
call sub_44BA40  +
jmp loc_49694B  +
mov eax [esp+8Ch+var_70] +
mov edx ebx +
mov [esp+8Ch+var_50] ecx +
call sub_492920  +
mov ecx [esp+8Ch+var_50] +
mov [esp+8Ch+var_40] eax +
sub eax 2 +
mov [esp+8Ch+var_74] eax +
jmp loc_496938  +
lea eax [ebx+6] +
xor edi edi +
xor ebx ebx +
cmp [esp+8Ch+var_4C] eax +
jb loc_49695C  +
mov edx [esp+8Ch+var_54] +
mov eax [esp+8Ch+var_70] +
call sub_492940  +
mov ebx eax +
jmp loc_49695C  +
mov edx [esp+8Ch+var_54] +
mov eax [esp+8Ch+var_70] +
call sub_492960  +
mov ebx eax +
mov edi edx +
jmp loc_49695C  +
mov [ebp+4] edi +
jmp loc_496F9D  +
mov eax [ebp+14h] +
mov edx [esp+8Ch+arg_24] +
call sub_492A60  +
mov ebx [ebp+0Ch] +
mov [ebp+1Ch] ebx +
mov [ebp+18h] eax +
jmp loc_496FEB  +
mov eax [eax+4] +
mov edi [esp+8Ch+arg_8] +
mov ebx [edi+10h] +
mov [esp+8Ch+var_80] 0 +
mov [esp+8Ch+var_84] 0 +
mov [esp+8Ch+var_88] eax +
mov eax [ebp+70h] +
mov [esp+8Ch+var_8C] eax +
call sub_44E180  +
test eax eax +
jz loc_496638  +
mov esi [eax+0Ch] +
test esi esi +
jz loc_496638  +
mov [esp+8Ch+var_74] 0 +
xor edi edi +
mov [esp+8Ch+var_68] ebp +
mov eax [esi+4] +
mov ecx eax +
mov [esp+8Ch+var_70] eax +
add eax 24h +
jz loc_4971F6  +
mov edx [ecx+30h] +
jmp loc_4971CA  +
cmp ebx edx +
jz loc_4971CE  +
mov eax [eax] +
test eax eax +
jz loc_4971F6  +
test edx edx +
jnz loc_4971C0  +
mov ecx [eax+4] +
cmp [esp+8Ch+var_6C] ecx +
jb loc_4971C4  +
mov ebp [eax+8] +
cmp [esp+8Ch+var_6C] ebp +
jnb loc_4971C4  +
sub ebp ecx +
test edi edi +
jz loc_4971EC  +
cmp ebp [esp+8Ch+var_74] +
jnb loc_4971C4  +
mov [esp+8Ch+var_74] ebp +
mov edi [esp+8Ch+var_70] +
jmp loc_4971C4  +
mov esi [esi] +
test esi esi +
jnz loc_4971AB  +
test edi edi +
mov ebp [esp+8Ch+var_68] +
jz loc_496638  +
mov eax [edi+0Ch] +
mov ecx [esp+8Ch+arg_14] +
mov [edi+30h] ebx +
mov [esp+8Ch+var_68] 1 +
mov [ecx] eax +
mov eax [edi+14h] +
mov edi [esp+8Ch+arg_1C] +
mov [edi] eax +
jmp loc_49652E  +
mov [esp+8Ch+var_68] 0 +
jmp loc_496515  +
mov dword ptr [ebp+7Ch] 2 +
jmp loc_4963C8  +
mov ebp [esp+8Ch+var_54] +
jmp loc_49652E  +
mov [esp+8Ch+var_84] 4 +
mov [esp+8Ch+var_88] eax +
mov [esp+8Ch+var_8C] offset aDwarfErrorFo_0 +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
jmp loc_49652E  +
mov [esp+8Ch+var_88] 0 +
mov [esp+8Ch+var_8C] offset aDwarfErrorBadA +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
jmp loc_49652E  +
mov eax [esp+8Ch+var_40] +
mov [esp+8Ch+var_8C] offset aDwarfErrorFo_1 +
mov [esp+8Ch+var_88] eax +
call off_4BFA04  +
mov [esp+8Ch+var_8C] 11h +
call sub_44BAF0  +
jmp loc_49652E  +
mov ebx [ebp+0Ch] +
mov eax [ebp+14h] +
mov ecx [ebp+10h] +
lea edx [ebx+4] +
add eax 4 +
jmp loc_496670  +
mov [esp+8Ch+var_68] 0 +
jmp loc_49652E  +
mov [esp+8Ch+var_60] edi +
xor ecx ecx +
mov [esp+8Ch+var_64] 8 +
jmp loc_496901  +
***
push edi  +
mov ecx 20h +
push esi  +
mov edi eax +
push ebx  +
mov esi edx +
sub esp 1Ch +
test dl 1 +
mov eax edx +
jnz loc_497487  +
test al 2 +
jnz loc_497497  +
mov ebx ecx +
xor edx edx +
and ebx 0FFFFFFFCh +
mov dword ptr [eax+edx] 0 +
add edx 4 +
cmp edx ebx +
jb loc_49732C  +
add eax edx +
test cl 2 +
jz loc_49734A  +
xor ebx ebx +
add eax 2 +
mov [eax-2] bx +
and ecx 1 +
jz loc_497352  +
mov byte ptr [eax] 0 +
mov eax [edi] +
mov eax [eax+28h] +
mov [esp+28h+var_28] ebp +
call eax  +
mov edx eax +
mov [esi] eax +
xor eax eax +
test edx edx +
jz loc_49737D  +
lea ecx [ebp+edx+0] +
cmp [esp+28h+arg_0] ecx +
jbe loc_49737D  +
cmp edx 5 +
ja loc_497385  +
xor edx edx +
mov al 1 +
mov [esi+1Ch] dx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [edi] +
lea edx [ebp+4] +
lea ebx [ebp+6] +
mov eax [eax+34h] +
mov [esp+28h+var_28] edx +
call eax  +
mov [esi+1Ch] ax +
lea esi [esi+0] +
mov eax [esi] +
add eax ebp +
cmp ebx eax +
jnb loc_4973F6  +
mov eax [edi] +
mov eax [eax+34h] +
mov [esp+28h+var_28] ebx +
call eax  +
lea ecx [ebx+2] +
mov edx eax +
and edx 0Fh +
cmp edx 8 +
ja loc_497480  +
jmp ds:off_5060E0[edx*4]  +
cmp ax 38h +
jz loc_4974A8  +
mov [esp+28h+var_28] ecx +
mov [esp+28h+var_1C] ecx +
call strlen  +
mov ecx [esp+28h+var_1C] +
lea ebx [ecx+eax+1] +
mov eax [esi] +
add eax ebp +
cmp ebx eax +
jb loc_4973A8  +
add esp 1Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebx 0Ah +
jmp loc_4973A0  +
add ebx 4 +
jmp loc_4973A0  +
mov eax [edi] +
mov [esp+28h+var_1C] ecx +
mov eax [eax+28h] +
mov [esp+28h+var_28] ecx +
call eax  +
mov ecx [esp+28h+var_1C] +
lea ebx [ecx+eax+4] +
jmp loc_4973A0  +
mov eax [edi] +
mov [esp+28h+var_1C] ecx +
mov eax [eax+34h] +
mov [esp+28h+var_28] ecx +
call eax  +
mov ecx [esp+28h+var_1C] +
lea ebx [ecx+eax+2] +
jmp loc_4973A0  +
cmp ax 12h +
jz loc_4974C0  +
cmp ax 106h +
jz loc_4974D0  +
add ebx 6 +
jmp loc_4973A0  +
cmp ax 111h +
jz loc_4974B0  +
cmp ax 121h +
jnz loc_49745C  +
mov eax [edi] +
mov eax [eax+28h] +
mov [esp+28h+var_28] ecx +
call eax  +
mov [esi+0Ch] eax +
jmp loc_49745C  +
mov ebx ecx +
jmp loc_4973A0  +
lea eax [edx+1] +
mov cl 1Fh +
test al 2 +
mov byte ptr [edx] 0 +
jz loc_497325  +
xor edx edx +
add eax 2 +
mov [eax-2] dx +
sub ecx 2 +
jmp loc_497325  +
mov [esi+14h] ecx +
jmp loc_4973DA  +
mov eax [edi] +
mov eax [eax+28h] +
mov [esp+28h+var_28] ecx +
call eax  +
mov [esi+8] eax +
jmp loc_49745C  +
mov eax [edi] +
mov eax [eax+28h] +
mov [esp+28h+var_28] ecx +
call eax  +
mov [esi+4] eax +
jmp loc_49745C  +
mov eax [edi] +
mov eax [eax+28h] +
mov [esp+28h+var_28] ecx +
call eax  +
mov dword ptr [esi+18h] 1 +
mov [esi+10h] eax +
jmp loc_49745C  +
***
push esi  +
mov esi edx +
push ebx  +
mov ebx ecx +
sub esp 4Ch +
cmp [edx+8] ecx +
ja loc_497505  +
cmp ecx [edx+0Ch] +
jb loc_497510  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi eax +
mov eax [edx+10h] +
test eax eax +
jz loc_497507  +
mov ecx [edx+20h] +
test ecx ecx +
jz loc_4975A4  +
mov eax [esi+24h] +
test eax eax +
jz loc_4976A0  +
mov ebp [esi+1Ch] +
test ebp ebp +
jz loc_497559  +
mov edi [esi+20h] +
mov edx 1 +
mov eax edi +
mov ecx eax +
sub ecx edi +
cmp ebx [eax] +
jb loc_49754D  +
cmp ebx [eax+8] +
jb loc_497587  +
mov ecx edx +
add eax 8 +
add edx 1 +
cmp ebp ecx +
ja loc_497540  +
xor eax eax +
mov edx [esi+24h] +
test edx edx +
jnz loc_49756A  +
jmp loc_497507  +
mov edx [edx] +
test edx edx +
jz loc_497507  +
cmp ebx [edx+8] +
lea esi [esi+0] +
jb loc_497564  +
cmp ebx [edx+0Ch] +
jnb loc_497564  +
mov eax [esp+50h+arg_4] +
mov edx [edx+4] +
mov [eax] edx +
mov eax 1 +
jmp loc_497507  +
mov edx [esi+4] +
mov eax [esp+50h+arg_0] +
mov [eax] edx +
mov eax [esi+20h] +
mov edx [eax+ecx+4] +
mov eax [esp+50h+arg_8] +
mov [eax] edx +
mov eax 1 +
jmp loc_49755B  +
mov eax [edi+14h] +
test eax eax +
jz loc_497740  +
add eax [esi+14h] +
cmp eax [edi+18h] +
mov ebp eax +
jnb loc_497524  +
mov eax [edi] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+50h+var_50] ebp +
call eax  +
lea ecx [ebp+4] +
add eax ebp +
mov [esp+50h+var_40] eax +
mov eax [edi] +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+50h+var_50] ecx +
call eax  +
lea ecx [ebp+8] +
mov edx 66666667h +
mov [esp+50h+var_3C] ecx +
mov [esp+50h+var_38] eax +
mov eax [esp+50h+var_40] +
sub eax ecx +
mov ebp eax +
imul  edx +
mov eax [edi] +
sar ebp 1Fh +
sar edx 2 +
sub edx ebp +
mov [esi+1Ch] edx +
shl edx 3 +
mov [esp+50h+var_4C] edx +
mov [esp+50h+var_50] eax +
call sub_458A80  +
test eax eax +
mov [esi+20h] eax +
jz loc_497505  +
mov edx [esi+1Ch] +
test edx edx +
jz loc_497524  +
xor ecx ecx +
mov ebp eax +
mov [esp+50h+var_40] esi +
mov esi ecx +
mov [esp+50h+var_34] ebx +
mov ebx [esp+50h+var_3C] +
jmp loc_497643  +
mov ebp [eax+20h] +
mov eax [edi] +
lea edx ds:0[esi*8] +
add esi 1 +
add ebp edx +
mov [esp+50h+var_3C] edx +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+50h+var_50] ebx +
call eax  +
mov edx [esp+50h+var_3C] +
mov [ebp+4] eax +
mov eax [esp+50h+var_40] +
add edx [eax+20h] +
mov eax [edi] +
mov ebp edx +
lea edx [ebx+6] +
add ebx 0Ah +
mov eax [eax+4] +
mov eax [eax+28h] +
mov [esp+50h+var_50] edx +
call eax  +
add eax [esp+50h+var_38] +
mov [ebp+0] eax +
mov eax [esp+50h+var_40] +
cmp esi [eax+1Ch] +
jb loc_497640  +
mov esi [esp+50h+var_40] +
mov ebx [esp+50h+var_34] +
jmp loc_497524  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_49752F  +
mov edx [edi+10h] +
cmp ecx edx +
jb loc_4976E3  +
jmp loc_49752F  +
cmp ax 14h +
jz loc_497707  +
cmp ax 1Dh +
jz loc_497707  +
cmp ax 3 +
jz loc_497707  +
mov ecx [esp+50h+var_2C] +
test ecx ecx +
jz loc_49752F  +
mov edx [edi+10h] +
add ecx [edi+0Ch] +
cmp edx ecx +
jbe loc_49752F  +
mov eax [edi] +
mov [esp+50h+var_50] edx +
lea edx [esp+50h+var_30] +
add eax 4 +
call sub_497300  +
test eax eax +
jz loc_497505  +
movzx eax [esp+50h+var_14] +
cmp ax 6 +
jnz loc_4976B7  +
mov eax [edi] +
mov [esp+50h+var_4C] 10h +
mov [esp+50h+var_50] eax +
call sub_458B60  +
test eax eax +
jz loc_497505  +
mov edx [esi+24h] +
mov [eax] edx +
mov edx [esp+50h+var_1C] +
mov [esi+24h] eax +
mov [eax+4] edx +
mov edx [esp+50h+var_28] +
mov [eax+8] edx +
mov edx [esp+50h+var_24] +
mov [eax+0Ch] edx +
jmp loc_4976C9  +
mov eax [edi] +
mov [esp+50h+var_4C] offset a_line_0 +
mov [esp+50h+var_50] eax +
call sub_44D4B0  +
test eax eax +
jz loc_497505  +
mov ebp [eax+28h] +
test ebp ebp +
jnz loc_497764  +
mov ebp [eax+24h] +
mov ecx [edi+4] +
mov edx [edi] +
mov [esp+50h+var_48] 0 +
mov [esp+50h+var_4C] eax +
mov [esp+50h+var_44] ecx +
mov [esp+50h+var_50] edx +
call sub_497AB0  +
test eax eax +
mov [edi+14h] eax +
jz loc_497505  +
add ebp eax +
mov [edi+18h] ebp +
jmp loc_4975AF  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov esi [esp+4Ch+arg_0] +
mov eax [esi+0A0h] +
mov ebx [eax+22Ch] +
mov eax [esp+4Ch+arg_8] +
mov ebp [eax+1Ch] +
mov eax [esp+4Ch+arg_10] +
add ebp [esp+4Ch+arg_C] +
test ebx ebx +
mov dword ptr [eax] 0 +
mov eax [esp+4Ch+arg_14] +
mov dword ptr [eax] 0 +
mov eax [esp+4Ch+arg_18] +
mov dword ptr [eax] 0 +
jz loc_497948  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_497863  +
mov edx [ebx+8] +
test edx edx +
jz loc_49780A  +
cmp ebp [edx+8] +
jb loc_497804  +
cmp ebp [edx+0Ch] +
jb loc_497920  +
mov edx [edx] +
test edx edx +
jnz loc_4977F6  +
mov ecx [ebx+1Ch] +
mov edx [ebx+10h] +
cmp ecx edx +
jnb loc_497863  +
mov [esp+4Ch+var_30] ebp +
jmp loc_49782D  +
mov edx [ebx+10h] +
add ecx [ebx+0Ch] +
cmp edx ecx +
mov [ebx+1Ch] ecx +
jbe loc_497863  +
mov eax [ebx] +
mov [esp+4Ch+var_4C] edx +
lea edx [esp+4Ch+var_2C] +
add eax 4 +
call sub_497300  +
test eax eax +
jz loc_497863  +
cmp [esp+4Ch+var_10] 11h +
mov ecx [esp+4Ch+var_28] +
jz loc_497870  +
test ecx ecx +
jnz loc_497820  +
mov ecx [ebx+1Ch] +
mov edx [ebx+10h] +
add ecx [esp+4Ch+var_2C] +
cmp edx ecx +
mov [ebx+1Ch] ecx +
ja loc_49782D  +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx] +
mov [esp+4Ch+var_48] 28h +
mov [esp+4Ch+var_4C] eax +
call sub_458B60  +
test eax eax +
jz loc_497863  +
mov edx [ebx+8] +
mov ecx [esp+4Ch+var_14] +
mov edi [esp+4Ch+var_20] +
mov [eax] edx +
mov [ebx+8] eax +
mov edx [esp+4Ch+var_18] +
mov [eax+10h] ecx +
mov ecx [esp+4Ch+var_1C] +
mov [eax+0Ch] edi +
mov [eax+4] edx +
mov edx [esp+4Ch+var_24] +
mov [eax+14h] ecx +
mov ecx [esp+4Ch+var_28] +
mov [eax+8] edx +
test ecx ecx +
jz loc_4978C5  +
mov esi [ebx+1Ch] +
add esi [esp+4Ch+var_2C] +
cmp esi [ebx+10h] +
jb loc_497910  +
mov dword ptr [eax+18h] 0 +
cmp [esp+4Ch+var_30] edx +
jb loc_49784E  +
cmp [esp+4Ch+var_30] edi +
jnb loc_49784E  +
mov edi [esp+4Ch+arg_18] +
mov edx eax +
mov eax ebx +
mov ebp [esp+4Ch+var_30] +
mov [esp+4Ch+var_44] edi +
mov edi [esp+4Ch+arg_14] +
mov ecx ebp +
mov [esp+4Ch+var_48] edi +
mov edi [esp+4Ch+arg_10] +
mov [esp+4Ch+var_4C] edi +
call sub_4974F0  +
jmp loc_497865  +
mov ebp [ebx+0Ch] +
add ebp ecx +
cmp esi ebp +
jz loc_4978C5  +
mov [eax+18h] esi +
jmp loc_4978CC  +
mov eax [esp+4Ch+arg_18] +
mov ecx ebp +
mov [esp+4Ch+var_44] eax +
mov eax [esp+4Ch+arg_14] +
mov [esp+4Ch+var_48] eax +
mov eax [esp+4Ch+arg_10] +
mov [esp+4Ch+var_4C] eax +
mov eax ebx +
call sub_4974F0  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esi+0A0h] +
mov [esp+4Ch+var_48] 20h +
mov [esp+4Ch+var_4C] esi +
call sub_458B60  +
test eax eax +
mov ebx eax +
mov [edi+22Ch] eax +
jz loc_497863  +
mov [esp+4Ch+var_48] offset a_debug_0 +
mov [esp+4Ch+var_4C] esi +
call sub_44D4B0  +
test eax eax +
jz loc_497863  +
mov edi [eax+28h] +
test edi edi +
jnz loc_497990  +
mov edi [eax+24h] +
mov ecx [esp+4Ch+arg_4] +
mov [esp+4Ch+var_44] 0 +
mov [esp+4Ch+var_48] eax +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_40] ecx +
call sub_497AB0  +
test eax eax +
mov [ebx+0Ch] eax +
jz loc_497863  +
add edi eax +
mov [ebx+1Ch] eax +
mov eax [esp+4Ch+arg_4] +
mov [ebx+10h] edi +
mov [ebx] esi +
mov [ebx+4] eax +
jmp loc_4977EF  +
***
mov eax 1 +
retn   +
***
mov eax 1 +
retn   +
***
mov eax 1 +
retn   +
***
mov eax 1 +
retn   +
***
mov eax 1 +
retn   +
***
mov eax 1 +
retn   +
***
push esi  +
push ebx  +
sub esp 10Ch +
mov ebx [esp+10Ch+arg_0] +
mov esi [esp+10Ch+arg_4] +
mov eax [ebx+28h] +
shr eax 5 +
and eax 43h +
cmp eax 1 +
jz loc_497B10  +
mov eax [esp+10Ch+arg_8] +
mov [esp+10Ch+var_108] esi +
mov [esp+10Ch+var_10C] ebx +
mov [esp+10Ch+var_EC] eax +
lea eax [esp+10Ch+var_EC] +
mov [esp+10Ch+var_104] eax +
call sub_4878A0  +
mov edx eax +
xor eax eax +
test edx edx +
cmovnz eax [esp+10Ch+var_EC] +
add esp 10Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test byte ptr [esi+14h] 4 +
jz loc_497AD6  +
lea ebp [esp+10Ch+var_8C] +
xor eax eax +
mov ecx 20h +
mov edi ebp +
stos   +
mov edi [ebx+9Ch] +
lea eax [ebx+9Ch] +
mov dword ptr [ebx+9Ch] 0 +
mov [esp+10Ch+var_10C] ebx +
mov [esp+10Ch+var_5C] ebx +
mov [esp+10Ch+var_58] ebx +
mov [esp+10Ch+var_54] eax +
call sub_450940  +
mov [esp+10Ch+var_B4] offset loc_4979D0 +
mov [esp+10Ch+var_B0] offset loc_4979E0 +
mov [esp+10Ch+var_AC] offset loc_4979F0 +
mov [esp+10Ch+var_A8] offset loc_497A00 +
mov [esp+10Ch+var_A4] offset loc_497A10 +
mov [esp+10Ch+var_70] eax +
lea eax [esp+10Ch+var_C8] +
mov [esp+10Ch+var_74] eax +
xor eax eax +
mov [esp+10Ch+var_C4] offset loc_497A20 +
mov [esp+10Ch+var_9C] offset dword_497A30 +
mov [esp+eax+10Ch+var_E0] 0 +
add eax 4 +
cmp eax 18h +
jb loc_497BA7  +
mov edx [esp+10Ch+arg_8] +
mov eax [esi+24h] +
mov [esp+10Ch+var_DC] 1 +
mov [esp+10Ch+var_D0] esi +
test edx edx +
mov [esp+10Ch+var_D4] eax +
jz loc_497CA1  +
mov eax [ebx+6Ch] +
mov [esp+10Ch+var_E8] eax +
shl eax 3 +
mov [esp+10Ch+var_10C] eax +
call malloc  +
test eax eax +
mov [esp+10Ch+var_E4] eax +
jz loc_497D58  +
mov [esp+10Ch+var_F0] 0 +
lea esi [esp+10Ch+var_E8] +
mov [esp+10Ch+var_104] esi +
mov [esp+10Ch+var_108] offset dword_497A40 +
mov [esp+10Ch+var_10C] ebx +
call sub_44DAD0  +
mov eax [esp+10Ch+arg_C] +
test eax eax +
jz loc_497D09  +
mov eax [esp+10Ch+arg_C] +
mov [esp+10Ch+var_FC] 0 +
mov [esp+10Ch+var_108] ebp +
mov [esp+10Ch+var_10C] ebx +
mov [esp+10Ch+var_F8] eax +
mov eax [esp+10Ch+arg_8] +
mov [esp+10Ch+var_100] eax +
lea eax [esp+10Ch+var_E0] +
mov [esp+10Ch+var_104] eax +
call sub_44C290  +
test eax eax +
mov [esp+10Ch+var_EC] eax +
jz loc_497CF0  +
mov [esp+10Ch+var_104] esi +
mov [esp+10Ch+var_10C] ebx +
mov [esp+10Ch+var_108] offset dword_497A80 +
call sub_44DAD0  +
mov eax [esp+10Ch+var_E4] +
mov [esp+10Ch+var_10C] eax +
call free  +
mov [esp+10Ch+var_10C] ebx +
call sub_44FC20  +
mov eax [esp+10Ch+var_EC] +
mov [ebx+9Ch] edi +
add esp 10Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esi+28h] eax +
cmovnb eax [esi+28h] +
mov [esp+10Ch+var_10C] eax +
call sub_459B80  +
test eax eax +
mov [esp+10Ch+arg_8] eax +
jz loc_497D58  +
mov eax [ebx+6Ch] +
mov [esp+10Ch+var_E8] eax +
shl eax 3 +
mov [esp+10Ch+var_10C] eax +
call malloc  +
test eax eax +
mov [esp+10Ch+var_E4] eax +
mov eax [esp+10Ch+arg_8] +
jz loc_497D50  +
mov [esp+10Ch+var_F0] eax +
jmp loc_497BFF  +
mov eax [esp+10Ch+var_F0] +
test eax eax +
jz loc_497C64  +
mov [esp+10Ch+var_10C] eax +
call free  +
jmp loc_497C64  +
mov [esp+10Ch+var_108] ebp +
mov [esp+10Ch+var_10C] ebx +
call loc_451960  +
mov eax [ebx+4] +
mov eax [eax+104h] +
mov [esp+10Ch+var_10C] ebx +
call eax  +
mov [esp+10Ch+var_10C] eax +
call sub_459B80  +
mov [esp+10Ch+arg_C] eax +
mov eax [ebx+4] +
mov ecx [esp+10Ch+arg_C] +
mov eax [eax+108h] +
mov [esp+10Ch+var_108] ecx +
mov [esp+10Ch+var_10C] ebx +
call eax  +
jmp loc_497C26  +
mov [esp+10Ch+var_10C] eax +
call free  +
mov [esp+10Ch+var_10C] ebx +
call sub_44FC20  +
xor eax eax +
mov [ebx+9Ch] edi +
jmp loc_497B00  +
***
push edi  +
push esi  +
push ebx  +
sub esp 5 +
mov esi [eax] +
mov [esp+10h+var_10+1] eax +
cmp esi 3 +
setbe dl  +
test ecx ecx +
setnz al  +
xor ebx ebx +
and dl al +
mov byte ptr [esp+10h+var_10] dl +
jz loc_497DD8  +
mov edi 4 +
jmp loc_497DB7  +
mov eax edi +
sub eax esi +
cmp eax 3 +
mov esi eax +
setbe al  +
add ebx 1 +
test al al +
jz loc_497DD8  +
cmp ecx ebx +
jbe loc_497DD8  +
movzx edx byte ptr [ebp+ebx+0] +
cmp esi 2 +
sbb eax eax +
not eax  +
cmp dl al +
jz loc_497DE8  +
test dl dl +
jz loc_497DA0  +
movzx eax byte ptr [esp+10h+var_10] +
xor esi esi +
add ebx 1 +
test al al +
jnz loc_497DB3  +
mov eax [esp+10h+var_10+1] +
mov [eax] esi +
add esp 5 +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esi 1 +
cmp esi 3 +
setbe al  +
jmp loc_497DAC  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [eax+1Ch] +
mov eax [ebx+34h] +
test eax eax +
jz loc_497F01  +
mov esi [ebx+28h] +
test esi esi +
jz loc_497E75  +
mov edi edx +
sub edi [ebp+10h] +
cmp edi esi +
jnb loc_497E98  +
mov edx [ebx+30h] +
sub esi edx +
cmp esi edi +
cmova esi edi +
add eax edx +
mov edx [ebp+0Ch] +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_28] eax +
sub edx edi +
mov [esp+28h+var_24] edx +
call memcpy  +
sub edi esi +
jnz loc_497ED6  +
mov eax [ebx+30h] +
mov edx [ebx+28h] +
add eax esi +
cmp eax edx +
mov [ebx+30h] eax +
jz loc_497EC4  +
mov ecx [ebx+2Ch] +
xor eax eax +
cmp edx ecx +
jbe loc_497E6D  +
add esi ecx +
mov [ebx+2Ch] esi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [ebx+24h] +
mov edi edx +
mov si 1 +
sub edi [ebp+10h] +
mov dword ptr [ebx+30h] 0 +
mov dword ptr [ebx+2Ch] 0 +
shl esi cl +
cmp edi esi +
mov [ebx+28h] esi +
jb loc_497E27  +
mov edx [ebp+0Ch] +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_28] eax +
sub edx esi +
mov [esp+28h+var_24] edx +
call memcpy  +
mov eax [ebx+28h] +
mov dword ptr [ebx+30h] 0 +
mov [ebx+2Ch] eax +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [ebx+2Ch] +
xor eax eax +
mov dword ptr [ebx+30h] 0 +
cmp edx ecx +
ja loc_497E68  +
jmp loc_497E6D  +
mov eax [ebp+0Ch] +
mov edx [ebx+34h] +
mov [esp+28h+var_20] edi +
sub eax edi +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] edx +
call memcpy  +
mov eax [ebx+28h] +
mov [ebx+30h] edi +
mov [ebx+2Ch] eax +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [ebp+20h] +
mov al 1 +
mov edi [ebp+28h] +
mov [esp+28h+var_20] 1 +
mov ecx [ebx+24h] +
mov [esp+28h+var_1C] edx +
mov [esp+28h+var_28] edi +
shl eax cl +
mov [esp+28h+var_24] eax +
call esi  +
test eax eax +
mov [ebx+34h] eax +
jz loc_497F33  +
mov edx [esp+28h+var_1C] +
jmp loc_497E17  +
mov eax 1 +
jmp loc_497E6D  +
***
mov edx [esp+arg_0] +
test edx edx +
jz loc_497FD2  +
mov eax [edx+1Ch] +
test eax eax +
jz loc_497FD2  +
mov ecx [eax+8] +
mov dword ptr [eax+1Ch] 0 +
mov dword ptr [edx+14h] 0 +
mov dword ptr [edx+8] 0 +
test ecx ecx +
mov dword ptr [edx+18h] 0 +
jz loc_497F7C  +
and ecx 1 +
mov [edx+30h] ecx +
lea edx [eax+530h] +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+0Ch] 0 +
mov dword ptr [eax+14h] 8000h +
mov dword ptr [eax+20h] 0 +
mov dword ptr [eax+38h] 0 +
mov dword ptr [eax+3Ch] 0 +
mov [eax+6Ch] edx +
mov [eax+50h] edx +
mov [eax+4Ch] edx +
mov dword ptr [eax+1BC0h] 1 +
mov dword ptr [eax+1BC4h] 0FFFFFFFFh +
xor eax eax +
retn   +
mov eax 0FFFFFFFEh +
retn   +
***
mov edx [esp+arg_0] +
test edx edx +
jz loc_498010  +
mov eax [edx+1Ch] +
test eax eax +
jz loc_498010  +
mov dword ptr [eax+28h] 0 +
mov dword ptr [eax+2Ch] 0 +
mov dword ptr [eax+30h] 0 +
jmp loc_497F40  +
mov eax 0FFFFFFFEh +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov edi [esp+1Ch+arg_0] +
mov ebx [esp+1Ch+arg_4] +
test edi edi +
jz loc_4980A0  +
mov esi [edi+1Ch] +
test esi esi +
jz loc_4980A0  +
test ebx ebx +
js loc_498091  +
mov ebp ebx +
mov eax ebx +
sar ebp 4 +
and eax 0Fh +
add ebp 1 +
cmp ebx 2Fh +
cmovle ebx eax +
lea eax [ebx-8] +
cmp eax 7 +
ja loc_498097  +
mov eax [esi+34h] +
test eax eax +
jz loc_49807B  +
cmp ebx [esi+24h] +
jz loc_49807B  +
mov ecx [edi+28h] +
mov edx [edi+24h] +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] ecx +
call edx  +
mov dword ptr [esi+34h] 0 +
mov [esi+8] ebp +
mov [esi+24h] ebx +
mov [esp+1Ch+arg_0] edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_497FE0  +
neg ebx  +
xor ebp ebp +
jmp loc_498051  +
test ebx ebx +
jz loc_498059  +
nop   +
lea esi [esi+0] +
add esp 1Ch +
mov eax 0FFFFFFFEh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
sub esp 10h +
mov eax [esp+10h+arg_8] +
mov ebx [esp+10h+arg_0] +
test eax eax +
jz loc_498170  +
cmp byte ptr [eax] 31h +
jnz loc_498170  +
cmp [esp+10h+arg_C] 38h +
jnz loc_498170  +
test ebx ebx +
jz loc_4981B7  +
mov eax [ebx+20h] +
mov dword ptr [ebx+18h] 0 +
test eax eax +
jz loc_498180  +
mov ecx [ebx+24h] +
mov edx [ebx+28h] +
test ecx ecx +
jz loc_4981A0  +
mov [esp+10h+var_8] 1BCCh +
mov [esp+10h+var_C] 1 +
mov [esp+10h+var_10] edx +
call eax  +
test eax eax +
mov esi eax +
jz loc_4981B0  +
mov [ebx+1Ch] eax +
mov dword ptr [eax+34h] 0 +
mov eax [esp+10h+arg_4] +
mov [esp+10h+var_10] ebx +
mov [esp+10h+var_C] eax +
call sub_498020  +
mov edi eax +
xor eax eax +
test edi edi +
jnz loc_498150  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [ebx+28h] +
mov eax [ebx+24h] +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] edx +
call eax  +
mov eax edi +
mov dword ptr [ebx+1Ch] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add esp 10h +
mov eax 0FFFFFFFAh +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ecx [ebx+24h] +
xor edx edx +
mov eax offset loc_49A740 +
mov dword ptr [ebx+20h] offset loc_49A740 +
mov dword ptr [ebx+28h] 0 +
test ecx ecx +
jnz loc_498102  +
mov dword ptr [ebx+24h] offset loc_49A760 +
jmp loc_498102  +
mov eax 0FFFFFFFCh +
jmp loc_498143  +
mov eax 0FFFFFFFEh +
jmp loc_498143  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_8] +
mov [esp+1Ch+var_18] 0Fh +
mov [esp+1Ch+var_10] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_4980B0  +
add esp 1Ch +
retn   +
***
push edi  +
push esi  +
mov eax [esp+0Ch] +
mov ecx [esp+10h] +
test eax eax +
jz loc_498250  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_498250  +
test ecx ecx +
js loc_498236  +
cmp ecx 10h +
jg loc_498250  +
mov edi [eax+3Ch] +
lea esi [ecx+edi] +
cmp esi 20h +
ja loc_498250  +
mov edx 1 +
shl edx cl +
mov ecx edi +
sub edx 1 +
and edx [esp+14h] +
mov [eax+3Ch] esi +
shl edx cl +
add [eax+38h] edx +
xor eax eax +
pop esi  +
pop edi  +
retn   +
***
mov dword ptr [eax+38h] 0 +
mov dword ptr [eax+3Ch] 0 +
xor eax eax +
pop esi  +
pop edi  +
retn   +
***
mov eax 0FFFFFFFEh +
jmp loc_498233  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov eax [esp+7Ch+arg_0] +
test eax eax +
jz loc_499960  +
mov eax [esp+7Ch+arg_0] +
mov eax [eax+1Ch] +
test eax eax +
mov [esp+7Ch+var_58] eax +
jz loc_499960  +
mov eax [esp+7Ch+arg_0] +
mov eax [eax+0Ch] +
test eax eax +
mov [esp+7Ch+var_48] eax +
jz loc_499960  +
mov eax [esp+7Ch+arg_0] +
mov edi [eax] +
test edi edi +
jz loc_4995F0  +
mov eax [eax+4] +
mov [esp+7Ch+var_50] eax +
mov eax [esp+7Ch+var_58] +
mov eax [eax] +
cmp eax 0Bh +
jz loc_498460  +
mov ebx [esp+7Ch+arg_0] +
mov edx [esp+7Ch+var_58] +
mov [esp+7Ch+var_44] 0 +
mov ebx [ebx+10h] +
mov esi [edx+3Ch] +
mov ebp [edx+38h] +
mov ecx ebx +
mov [esp+7Ch+var_4C] ebx +
mov ebx [esp+7Ch+var_50] +
mov [esp+7Ch+var_54] ecx +
lea ecx [edx+70h] +
add edx 530h +
mov [esp+7Ch+var_30] ecx +
mov ecx esi +
mov esi ebp +
mov [esp+7Ch+var_2C] edx +
mov ebp edi +
mov edi ebx +
mov ebx ecx +
cmp eax 1Eh +
ja loc_499960  +
jmp ds:off_5062F0[eax*4]  +
cmp ebx 1Fh +
ja loc_498350  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
nop   +
jmp loc_49833A  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 1Fh +
jbe loc_498332  +
mov edx esi +
mov eax esi +
mov ebx [esp+7Ch+var_58] +
shr eax 18h +
shl edx 18h +
add edx eax +
mov eax esi +
shr eax 8 +
and eax 0FF00h +
add edx eax +
mov eax esi +
mov esi [esp+7Ch+arg_0] +
and eax 0FF00h +
shl eax 8 +
add eax edx +
mov [ebx+18h] eax +
mov [esi+30h] eax +
xor esi esi +
mov dword ptr [ebx] 0Ah +
xor ebx ebx +
mov eax [esp+7Ch+var_58] +
mov edx [eax+0Ch] +
test edx edx +
jz loc_499DB8  +
mov [esp+7Ch+var_74] 0 +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] 0 +
call sub_49A810  +
mov edx [esp+7Ch+var_58] +
mov ecx [esp+7Ch+arg_0] +
mov [edx+18h] eax +
mov [ecx+30h] eax +
mov dword ptr [edx] 0Bh +
mov eax [esp+7Ch+arg_4] +
sub eax 5 +
cmp eax 1 +
jbe loc_498700  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+4] +
test eax eax +
jnz loc_498474  +
cmp ebx 2 +
ja loc_498413  +
test edi edi +
jz loc_498700  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
mov ecx ebx +
sub edi 1 +
add ebx 8 +
shl eax cl +
add esi eax +
mov ecx [esp+7Ch+var_58] +
mov eax esi +
mov edx esi +
and eax 1 +
shr edx 1 +
mov [ecx+4] eax +
mov eax edx +
and eax 3 +
cmp eax 2 +
jz loc_499817  +
cmp eax 3 +
jz loc_499A9E  +
cmp eax 1 +
jz loc_499A60  +
mov dword ptr [ecx] 0Dh +
mov eax 0Dh +
mov esi edx +
sub ebx 3 +
shr esi 2 +
jmp loc_49830E  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 0Ch +
mov eax 0Ch +
jmp loc_4982C9  +
mov eax [esp+7Ch+var_58] +
mov ecx ebx +
and ebx 0FFFFFFF8h +
and ecx 7 +
shr esi cl +
mov dword ptr [eax] 1Ah +
mov eax 1Ah +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
mov edx [eax+48h] +
test edx edx +
jz loc_4984F6  +
cmp ebx edx +
jnb loc_4984D1  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
nop   +
lea esi [esi+0] +
jmp loc_4984BA  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx edx +
jb loc_4984B2  +
mov ebx ecx +
mov ecx edx +
mov eax 1 +
shl eax cl +
mov ecx [esp+7Ch+var_58] +
sub ebx edx +
sub eax 1 +
and eax esi +
add [ecx+44h] eax +
mov ecx edx +
shr esi cl +
mov ecx [esp+7Ch+var_58] +
add [ecx+1BC4h] edx +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 18h +
mov edx [esp+7Ch+var_4C] +
test edx edx +
jz loc_498700  +
mov ecx [esp+7Ch+var_58] +
mov eax [esp+7Ch+var_54] +
mov ecx [ecx+44h] +
sub eax edx +
cmp eax ecx +
jnb loc_499670  +
sub ecx eax +
mov eax [esp+7Ch+var_58] +
cmp ecx [eax+2Ch] +
ja loc_499774  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+30h] +
cmp ecx eax +
jbe loc_499992  +
sub ecx eax +
mov eax [esp+7Ch+var_58] +
mov edx [eax+28h] +
mov eax [eax+34h] +
mov [esp+7Ch+var_40] edx +
sub [esp+7Ch+var_40] ecx +
add [esp+7Ch+var_40] eax +
mov eax [esp+7Ch+var_58] +
mov edx [eax+40h] +
cmp ecx edx +
cmova ecx edx +
jmp loc_499683  +
mov eax [esp+7Ch+var_58] +
cmp [esp+7Ch+arg_4] 6 +
mov dword ptr [eax] 13h +
jz loc_498700  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 14h +
cmp edi 5 +
ja loc_499867  +
mov eax [esp+7Ch+var_58] +
mov ecx [eax+4Ch] +
mov dword ptr [eax+1BC4h] 0 +
mov edx ecx +
mov [esp+7Ch+var_3C] ecx +
mov ecx [eax+54h] +
mov eax 1 +
shl eax cl +
sub eax 1 +
mov [esp+7Ch+var_34] eax +
and eax esi +
lea eax [edx+eax*4] +
movzx edx byte ptr [eax] +
mov byte ptr [esp+7Ch+var_40] dl +
movzx edx byte ptr [eax+1] +
movzx eax word ptr [eax+2] +
mov word ptr [esp+7Ch+var_28] ax +
movzx eax dl +
cmp ebx eax +
mov [esp+7Ch+var_38] eax +
jnb loc_49863B  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
mov ebx esi +
mov esi edi +
jmp loc_4985F8  +
test esi esi +
jz loc_499832  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub esi 1 +
mov edi [esp+7Ch+var_3C] +
shl eax cl +
add ecx 8 +
add ebx eax +
mov eax [esp+7Ch+var_34] +
and eax ebx +
lea eax [edi+eax*4] +
movzx edx byte ptr [eax] +
movzx edi word ptr [eax+2] +
mov byte ptr [esp+7Ch+var_40] dl +
movzx edx byte ptr [eax+1] +
movzx eax dl +
cmp eax ecx +
mov [esp+7Ch+var_38] eax +
ja loc_4985F0  +
mov word ptr [esp+7Ch+var_28] di +
mov edi esi +
mov esi ebx +
mov ebx ecx +
cmp byte ptr [esp+7Ch+var_40] 0 +
jz loc_499900  +
test byte ptr [esp+7Ch+var_40] 0F0h +
jnz loc_499900  +
movzx ecx word ptr [esp+7Ch+var_28] +
mov [esp+7Ch+var_34] eax +
mov eax 1 +
mov [esp+7Ch+var_24] ecx +
movzx ecx byte ptr [esp+7Ch+var_40] +
add cl byte ptr [esp+7Ch+var_34] +
shl eax cl +
mov ecx edx +
sub eax 1 +
mov [esp+7Ch+var_20] eax +
and eax esi +
shr eax cl +
mov ecx [esp+7Ch+var_3C] +
add eax [esp+7Ch+var_24] +
lea eax [ecx+eax*4] +
movzx edx byte ptr [eax] +
movzx ecx word ptr [eax+2] +
movzx eax byte ptr [eax+1] +
mov byte ptr [esp+7Ch+var_40] dl +
mov edx [esp+7Ch+var_34] +
mov word ptr [esp+7Ch+var_28] cx +
add edx eax +
cmp ebx edx +
jb loc_4986F8  +
jmp loc_499C6C  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
mov ecx ebx +
add ebx 8 +
sub edi 1 +
shl eax cl +
movzx ecx byte ptr [esp+7Ch+var_34] +
add esi eax +
mov eax [esp+7Ch+var_20] +
and eax esi +
shr eax cl +
mov ecx [esp+7Ch+var_3C] +
add eax [esp+7Ch+var_24] +
lea eax [ecx+eax*4] +
movzx edx byte ptr [eax] +
movzx ecx word ptr [eax+2] +
movzx eax byte ptr [eax+1] +
mov byte ptr [esp+7Ch+var_40] dl +
mov edx [esp+7Ch+var_34] +
add edx eax +
cmp edx ebx +
jbe loc_499C67  +
test edi edi +
jnz loc_4986B0  +
lea esi [esi+0] +
mov eax ebx +
mov ebx edi +
mov edi ebp +
mov ebp esi +
mov esi eax +
jmp loc_4988E0  +
mov eax [esp+7Ch+var_58] +
mov edx [eax+48h] +
test edx edx +
jnz loc_4996E6  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+40h] +
mov edx [esp+7Ch+var_58] +
mov [edx+1BC8h] eax +
mov dword ptr [edx] 16h +
mov eax [esp+7Ch+var_58] +
mov ecx [eax+50h] +
mov edx ecx +
mov [esp+7Ch+var_3C] ecx +
mov ecx [eax+58h] +
mov eax 1 +
shl eax cl +
sub eax 1 +
mov [esp+7Ch+var_34] eax +
and eax esi +
lea eax [edx+eax*4] +
movzx edx byte ptr [eax] +
mov byte ptr [esp+7Ch+var_40] dl +
movzx edx byte ptr [eax+1] +
movzx eax word ptr [eax+2] +
mov word ptr [esp+7Ch+var_28] ax +
movzx eax dl +
cmp ebx eax +
mov [esp+7Ch+var_38] eax +
jnb loc_4987CF  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
mov ebx edi +
mov edi ebp +
jmp loc_49878C  +
test ebx ebx +
jz loc_499564  +
add edi 1 +
movzx eax byte ptr [edi-1] +
sub ebx 1 +
mov edx [esp+7Ch+var_3C] +
shl eax cl +
add ecx 8 +
add esi eax +
mov eax [esp+7Ch+var_34] +
and eax esi +
lea eax [edx+eax*4] +
movzx edx byte ptr [eax] +
movzx ebp word ptr [eax+2] +
mov byte ptr [esp+7Ch+var_40] dl +
movzx edx byte ptr [eax+1] +
movzx eax dl +
cmp eax ecx +
mov [esp+7Ch+var_38] eax +
ja loc_498784  +
mov word ptr [esp+7Ch+var_28] bp +
mov ebp edi +
mov edi ebx +
mov ebx ecx +
test byte ptr [esp+7Ch+var_40] 0F0h +
jnz loc_4997A4  +
movzx ecx word ptr [esp+7Ch+var_28] +
mov [esp+7Ch+var_20] eax +
mov eax 1 +
mov [esp+7Ch+var_34] ecx +
movzx ecx byte ptr [esp+7Ch+var_40] +
add cl byte ptr [esp+7Ch+var_20] +
shl eax cl +
mov ecx edx +
sub eax 1 +
mov [esp+7Ch+var_24] eax +
and eax esi +
shr eax cl +
mov ecx [esp+7Ch+var_3C] +
add eax [esp+7Ch+var_34] +
lea eax [ecx+eax*4] +
movzx edx byte ptr [eax] +
movzx ecx word ptr [eax+2] +
movzx eax byte ptr [eax+1] +
mov byte ptr [esp+7Ch+var_40] dl +
mov edx [esp+7Ch+var_20] +
mov word ptr [esp+7Ch+var_28] cx +
add edx eax +
cmp ebx edx +
jnb loc_498892  +
test edi edi +
jz loc_498700  +
mov eax esi +
mov edx [esp+7Ch+var_20] +
mov esi edi +
mov edi eax +
jmp loc_498849  +
test esi esi +
jz loc_499A2D  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
mov ecx ebx +
add ebx 8 +
sub esi 1 +
shl eax cl +
mov ecx edx +
add edi eax +
mov eax [esp+7Ch+var_24] +
and eax edi +
shr eax cl +
mov ecx [esp+7Ch+var_3C] +
add eax [esp+7Ch+var_34] +
lea eax [ecx+eax*4] +
movzx ecx byte ptr [eax] +
mov byte ptr [esp+7Ch+var_40] cl +
movzx ecx word ptr [eax+2] +
movzx eax byte ptr [eax+1] +
mov word ptr [esp+7Ch+var_28] cx +
lea ecx [eax+edx] +
cmp ecx ebx +
ja loc_498841  +
mov edx edi +
mov edi esi +
mov esi edx +
mov edx [esp+7Ch+var_20] +
sub ebx [esp+7Ch+var_38] +
mov ecx edx +
shr esi cl +
mov ecx [esp+7Ch+var_58] +
add edx [ecx+1BC4h] +
jmp loc_4997AE  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Eh +
mov eax 0FFFFFFFCh +
lea esi [esi+0] +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebx +
mov ebx edi +
mov [esp+7Ch+var_44] 1 +
mov edi ebp +
mov ebp esi +
mov esi eax +
lea esi [esi+0] +
mov eax [esp+7Ch+arg_0] +
mov edx [esp+7Ch+var_48] +
mov ecx eax +
mov [eax+0Ch] edx +
mov eax [esp+7Ch+var_58] +
mov [ecx+4] ebx +
mov edx [esp+7Ch+var_4C] +
mov [ecx] edi +
mov ebx [eax+28h] +
mov [ecx+10h] edx +
mov [eax+38h] ebp +
mov [eax+3Ch] esi +
test ebx ebx +
jnz loc_498930  +
mov ebx [esp+7Ch+var_54] +
cmp edx ebx +
jz loc_498948  +
mov eax [eax] +
cmp eax 1Ch +
ja loc_498948  +
cmp eax 19h +
jbe loc_498930  +
cmp [esp+7Ch+arg_4] 4 +
jz loc_498948  +
nop   +
lea esi [esi+0] +
mov edx [esp+7Ch+var_54] +
mov eax [esp+7Ch+arg_0] +
call sub_497E00  +
test eax eax +
jnz loc_4988AD  +
mov eax [esp+7Ch+arg_0] +
mov ebx [esp+7Ch+var_50] +
mov esi [esp+7Ch+var_54] +
sub esi [eax+10h] +
sub ebx [eax+4] +
add [eax+14h] esi +
add [eax+8] ebx +
mov eax [esp+7Ch+var_58] +
mov ecx [eax+8] +
add [eax+1Ch] esi +
test ecx ecx +
jz loc_4989B0  +
test esi esi +
jz loc_4989B0  +
mov edx [eax+10h] +
test edx edx +
jz loc_499630  +
mov edx [eax+18h] +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_74] esi +
mov eax [eax+0Ch] +
mov [esp+7Ch+var_7C] edx +
sub eax esi +
mov [esp+7Ch+var_78] eax +
call sub_49AD40  +
mov edi [esp+7Ch+var_58] +
mov [edi+18h] eax +
mov edi [esp+7Ch+arg_0] +
mov [edi+30h] eax +
mov edi [esp+7Ch+var_58] +
cmp dword ptr [edi+4] 1 +
mov edx [edi] +
sbb eax eax +
not eax  +
and eax 40h +
add eax [edi+3Ch] +
cmp edx 0Bh +
jz loc_499570  +
cmp edx 0Eh +
jnz loc_499580  +
mov edx 100h +
mov edi [esp+7Ch+arg_0] +
add eax edx +
or esi ebx +
mov [edi+2Ch] eax +
jz loc_4989FD  +
cmp [esp+7Ch+arg_4] 4 +
mov eax [esp+7Ch+var_44] +
jnz loc_4988C0  +
mov ebx [esp+7Ch+var_44] +
mov eax 0FFFFFFFBh +
test ebx ebx +
cmovnz eax ebx +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ebx 1Fh +
ja loc_498A42  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_498A2C  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 1Fh +
jbe loc_498A24  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+20h] +
test eax eax +
jz loc_498A50  +
mov [eax+4] esi +
mov eax [esp+7Ch+var_58] +
test byte ptr [eax+11h] 2 +
jnz loc_499AE7  +
mov eax [esp+7Ch+var_58] +
xor esi esi +
xor ebx ebx +
mov dword ptr [eax] 3 +
jmp loc_498ADA  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+40h] +
mov edx [esp+7Ch+var_58] +
mov dword ptr [edx] 0Fh +
test eax eax +
jz loc_499658  +
mov edx [esp+7Ch+var_4C] +
cmp edi eax +
cmovbe eax edi +
cmp eax edx +
cmova eax edx +
test eax eax +
jz loc_498700  +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_40] eax +
mov eax [esp+7Ch+var_48] +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] eax +
call memcpy  +
mov edx [esp+7Ch+var_40] +
mov eax [esp+7Ch+var_58] +
sub [esp+7Ch+var_4C] edx +
add [esp+7Ch+var_48] edx +
sub edi edx +
add ebp edx +
sub [eax+40h] edx +
mov eax [eax] +
jmp loc_49830E  +
cmp ebx 0Fh +
ja loc_498B04  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_498AEE  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 0Fh +
jbe loc_498AE6  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+20h] +
test eax eax +
jz loc_498B1F  +
mov ebx esi +
movzx edx bl +
mov [eax+8] edx +
mov edx esi +
shr edx 8 +
mov [eax+0Ch] edx +
mov eax [esp+7Ch+var_58] +
mov edx [eax+10h] +
test dh 2 +
mov eax edx +
jnz loc_4999F2  +
mov ebx [esp+7Ch+var_58] +
xor esi esi +
mov dword ptr [ebx] 4 +
xor ebx ebx +
test dh 4 +
jnz loc_4994EA  +
mov edx [esp+7Ch+var_58] +
mov edx [edx+20h] +
test edx edx +
jz loc_49982B  +
mov dword ptr [edx+10h] 0 +
xor edx edx +
mov ecx [esp+7Ch+var_58] +
mov dword ptr [ecx] 5 +
jmp loc_49923F  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+68h] +
mov [esp+7Ch+var_38] eax +
mov ecx [esp+7Ch+var_58] +
mov eax [ecx+60h] +
mov [esp+7Ch+var_28] eax +
add eax [ecx+64h] +
mov [esp+7Ch+var_34] eax +
mov eax [esp+7Ch+var_34] +
cmp [esp+7Ch+var_38] eax +
mov eax [esp+7Ch+var_58] +
jnb loc_499D83  +
mov ecx [eax+54h] +
mov edx [eax+4Ch] +
mov eax 1 +
shl eax cl +
lea eax [eax-1] +
mov [esp+7Ch+var_3C] eax +
and eax esi +
lea eax [edx+eax*4] +
movzx ecx byte ptr [eax+1] +
movzx eax word ptr [eax+2] +
mov word ptr [esp+7Ch+var_40] ax +
movzx eax cl +
cmp ebx eax +
jnb loc_498C1A  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
mov ebx edx +
jmp loc_498BE8  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
mov eax [esp+7Ch+var_3C] +
and eax esi +
lea eax [ebx+eax*4] +
movzx edx byte ptr [eax+1] +
movzx eax word ptr [eax+2] +
mov word ptr [esp+7Ch+var_40] ax +
movzx eax dl +
cmp eax ecx +
ja loc_498BE0  +
mov ebx ecx +
mov ecx edx +
cmp word ptr [esp+7Ch+var_40] 0Fh +
jbe loc_4997F0  +
cmp word ptr [esp+7Ch+var_40] 10h +
jz loc_499BF3  +
cmp word ptr [esp+7Ch+var_40] 11h +
jz loc_499C7C  +
lea edx [eax+7] +
cmp ebx edx +
jnb loc_498C76  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
mov ebx eax +
mov eax edx +
jmp loc_498C5D  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx edx byte ptr [ebp-1] +
sub edi 1 +
shl edx cl +
add ecx 8 +
add esi edx +
cmp ecx eax +
jb loc_498C55  +
mov eax ebx +
mov ebx ecx +
mov ecx eax +
sub ebx eax +
shr esi cl +
sub ebx 7 +
mov edx esi +
and esi 7Fh +
add esi 0Bh +
xor ecx ecx +
mov [esp+7Ch+var_40] esi +
mov esi edx +
shr esi 7 +
mov eax [esp+7Ch+var_40] +
add eax [esp+7Ch+var_38] +
cmp eax [esp+7Ch+var_34] +
mov edx eax +
mov [esp+7Ch+var_40] eax +
ja loc_499FD9  +
mov word ptr [esp+7Ch+var_3C] cx +
mov eax [esp+7Ch+var_38] +
mov ecx [esp+7Ch+var_58] +
lea eax [ecx+eax*2+70h] +
mov ecx [esp+7Ch+var_30] +
lea edx [ecx+edx*2] +
movzx ecx word ptr [esp+7Ch+var_3C] +
mov [eax] cx +
add eax 2 +
cmp eax edx +
jnz loc_498CC7  +
mov eax [esp+7Ch+var_40] +
mov edx [esp+7Ch+var_58] +
mov [esp+7Ch+var_38] eax +
mov [edx+68h] eax +
jmp loc_498B8D  +
cmp ebx 0Fh +
ja loc_498D16  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_498CFE  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 0Fh +
jbe loc_498CF6  +
mov ebx ecx +
mov edx [esp+7Ch+var_58] +
mov eax esi +
cmp al 8 +
mov [edx+10h] esi +
jz loc_499B5C  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aUnknownCompres +
mov eax 1Dh +
mov dword ptr [edx] 1Dh +
jmp loc_498317  +
cmp ebx 0Dh +
ja loc_498D76  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_498D5E  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 0Dh +
jbe loc_498D56  +
mov ebx ecx +
mov ecx [esp+7Ch+var_58] +
mov edx esi +
mov eax esi +
shr edx 5 +
and eax 1Fh +
and edx 1Fh +
add eax 101h +
add edx 1 +
sub ebx 0Eh +
mov [ecx+64h] edx +
mov [ecx+60h] eax +
mov ecx esi +
shr ecx 0Ah +
and ecx 0Fh +
add ecx 4 +
mov [esp+7Ch+var_40] edx +
mov edx ecx +
mov [esp+7Ch+var_3C] ecx +
mov ecx [esp+7Ch+var_58] +
shr esi 0Eh +
cmp eax 11Eh +
mov [ecx+5Ch] edx +
ja loc_499970  +
cmp [esp+7Ch+var_40] 1Eh +
ja loc_499970  +
mov eax [esp+7Ch+var_58] +
xor edx edx +
mov ecx ebx +
mov [esp+7Ch+var_40] edx +
mov dword ptr [eax+68h] 0 +
mov dword ptr [eax] 11h +
jmp loc_498E02  +
mov eax [esp+7Ch+var_58] +
mov edx [eax+5Ch] +
mov ecx edx +
mov [esp+7Ch+var_3C] edx +
mov edx [eax+68h] +
cmp ecx edx +
jbe loc_498E58  +
mov ecx ebx +
mov [esp+7Ch+var_40] edx +
cmp ecx 2 +
ja loc_498E20  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
add [esp+7Ch+var_40] 1 +
sub ecx 3 +
mov ebx [esp+7Ch+var_40] +
mov edx [esp+7Ch+var_58] +
movzx eax ds:word_506BFE[ebx+ebx] +
mov [edx+68h] ebx +
mov ebx esi +
and ebx 7 +
shr esi 3 +
mov [edx+eax*2+70h] bx +
mov eax [esp+7Ch+var_40] +
cmp [esp+7Ch+var_3C] eax +
ja loc_498E02  +
mov edx [esp+7Ch+var_40] +
mov ebx ecx +
cmp edx 12h +
mov ecx [esp+7Ch+var_58] +
lea eax dword_506C00[edx+edx] +
ja loc_498E87  +
movzx edx word ptr [eax] +
add eax 2 +
cmp eax offset unk_506C26 +
mov word ptr [ecx+edx*2+70h] 0 +
jnz loc_498E68  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax+68h] 13h +
mov eax [esp+7Ch+var_58] +
mov edx [esp+7Ch+var_2C] +
mov dword ptr [eax+54h] 7 +
mov [eax+6Ch] edx +
mov [eax+4Ch] edx +
mov edx eax +
add eax 2F0h +
mov [esp+7Ch+var_68] eax +
mov eax edx +
add eax 54h +
mov [esp+7Ch+var_6C] eax +
mov eax edx +
add eax 6Ch +
mov [esp+7Ch+var_70] eax +
mov eax [esp+7Ch+var_30] +
mov [esp+7Ch+var_74] 13h +
mov [esp+7Ch+var_7C] 0 +
mov [esp+7Ch+var_78] eax +
call sub_49B030  +
test eax eax +
mov [esp+7Ch+var_44] eax +
jz loc_499D65  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidCodeLen +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+40h] +
jmp loc_498A81  +
mov eax ebx +
mov ebx edi +
mov [esp+7Ch+var_44] 0FFFFFFFDh +
mov edi ebp +
mov ebp esi +
mov esi eax +
jmp loc_4988E0  +
mov ecx [esp+7Ch+var_4C] +
test ecx ecx +
jz loc_498700  +
mov edx [esp+7Ch+var_58] +
mov ecx [esp+7Ch+var_48] +
sub [esp+7Ch+var_4C] 1 +
mov eax [edx+40h] +
mov [ecx] al +
lea eax [ecx+1] +
mov [esp+7Ch+var_48] eax +
mov eax 14h +
mov dword ptr [edx] 14h +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+8] +
test eax eax +
jz loc_499751  +
cmp ebx 1Fh +
ja loc_498FA2  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
nop   +
jmp loc_498F8A  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 1Fh +
jbe loc_498F82  +
mov ebx ecx +
mov eax [esp+7Ch+var_54] +
mov ecx [esp+7Ch+arg_0] +
mov edx [esp+7Ch+var_58] +
sub eax [esp+7Ch+var_4C] +
add [ecx+14h] eax +
add [edx+1Ch] eax +
test eax eax +
jz loc_498FF6  +
mov ecx edx +
mov edx [edx+10h] +
test edx edx +
jz loc_499D43  +
mov edx [ecx+18h] +
mov ecx [esp+7Ch+var_48] +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_7C] edx +
sub ecx eax +
mov [esp+7Ch+var_78] ecx +
call sub_49AD40  +
mov edx [esp+7Ch+var_58] +
mov ecx [esp+7Ch+arg_0] +
mov [edx+18h] eax +
mov [ecx+30h] eax +
mov ecx [esp+7Ch+var_58] +
mov eax esi +
mov edx [ecx+10h] +
test edx edx +
jnz loc_499025  +
mov edx esi +
shr eax 18h +
shl edx 18h +
add edx eax +
mov eax esi +
shr eax 8 +
and eax 0FF00h +
add edx eax +
mov eax esi +
and eax 0FF00h +
shl eax 8 +
add eax edx +
mov edx [esp+7Ch+var_58] +
cmp eax [edx+18h] +
jz loc_499742  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aIncorrectDataC +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_54] eax +
mov eax 1Dh +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+8] +
test eax eax +
jz loc_499D22  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
test eax eax +
jz loc_499D22  +
cmp ebx 1Fh +
ja loc_4990B2  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
lea esi [esi+0] +
jmp loc_49909A  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 1Fh +
jbe loc_499092  +
mov ebx ecx +
mov eax [esp+7Ch+var_58] +
cmp [eax+1Ch] esi +
jz loc_499E26  +
mov ecx [esp+7Ch+arg_0] +
mov dword ptr [ecx+18h] offset aIncorrectLengt +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
mov edx [eax+8] +
test edx edx +
jz loc_499760  +
cmp ebx 0Fh +
ja loc_499122  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
nop   +
jmp loc_49910A  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 0Fh +
jbe loc_499102  +
mov ebx ecx +
test dl 2 +
jz loc_499133  +
cmp esi 8B1Fh +
jz loc_499E33  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax+10h] 0 +
mov eax [eax+20h] +
test eax eax +
jz loc_49914C  +
mov dword ptr [eax+30h] 0FFFFFFFFh +
and edx 1 +
jz loc_499A3E  +
mov ecx esi +
mov eax esi +
shl ecx 8 +
mov edx 8421085h +
shr eax 8 +
movzx ecx cx +
add ecx eax +
mov eax ecx +
mul  edx +
mov eax ecx +
sub eax edx +
shr eax 1 +
add eax edx +
shr eax 4 +
mov edx eax +
shl edx 5 +
sub edx eax +
cmp ecx edx +
jnz loc_499A3E  +
mov eax esi +
and eax 0Fh +
cmp eax 8 +
jz loc_499E8F  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aUnknownCompres +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov ecx ebx +
and ebx 0FFFFFFF8h +
and ecx 7 +
shr esi cl +
cmp ebx 1Fh +
ja loc_4991F2  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_4991DA  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 1Fh +
jbe loc_4991D2  +
mov ebx ecx +
mov edx esi +
movzx eax si +
shr edx 10h +
xor edx 0FFFFh +
cmp eax edx +
jz loc_499B8A  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidStoredB +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
mov edx eax +
and edx 400h +
test edx edx +
jz loc_4992E5  +
mov edx [esp+7Ch+var_58] +
mov ecx [edx+40h] +
cmp edi ecx +
mov [esp+7Ch+var_40] ecx +
cmovbe ecx edi +
mov edx ecx +
test edx edx +
mov [esp+7Ch+var_3C] ecx +
mov ecx [esp+7Ch+var_40] +
jz loc_4992D6  +
mov ecx [esp+7Ch+var_58] +
mov ecx [ecx+20h] +
test ecx ecx +
jz loc_4992B9  +
mov edx [ecx+10h] +
test edx edx +
mov [esp+7Ch+var_38] edx +
jz loc_4992B9  +
mov edx [ecx+18h] +
mov eax [ecx+14h] +
mov ecx [esp+7Ch+var_3C] +
sub eax [esp+7Ch+var_40] +
mov [esp+7Ch+var_78] ebp +
add ecx eax +
mov [esp+7Ch+var_40] ecx +
mov ecx edx +
sub ecx eax +
cmp [esp+7Ch+var_40] edx +
mov edx ecx +
cmovbe edx [esp+7Ch+var_3C] +
add eax [esp+7Ch+var_38] +
mov [esp+7Ch+var_74] edx +
mov [esp+7Ch+var_7C] eax +
call memcpy  +
mov ecx [esp+7Ch+var_58] +
mov eax [ecx+10h] +
test ah 2 +
jnz loc_499AC0  +
mov edx [esp+7Ch+var_58] +
mov eax [esp+7Ch+var_3C] +
mov ecx [edx+40h] +
sub edi eax +
add ebp eax +
sub ecx eax +
mov [edx+40h] ecx +
test ecx ecx +
jnz loc_498700  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
mov ecx [esp+7Ch+var_58] +
test ah 8 +
mov dword ptr [ecx+40h] 0 +
mov dword ptr [ecx] 6 +
jnz loc_499322  +
mov edx [esp+7Ch+var_58] +
mov edx [edx+20h] +
test edx edx +
jz loc_4993B3  +
mov dword ptr [edx+1Ch] 0 +
jmp loc_4993B3  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
test ah 8 +
jz loc_4992FB  +
test edi edi +
jz loc_498700  +
mov [esp+7Ch+var_38] esi +
xor edx edx +
mov esi [esp+7Ch+var_58] +
mov [esp+7Ch+var_40] ebp +
mov [esp+7Ch+var_3C] edi +
mov [esp+7Ch+var_34] ebx +
jmp loc_499348  +
cmp edx [esp+7Ch+var_3C] +
jnb loc_49937A  +
mov eax [esp+7Ch+var_40] +
add edx 1 +
movzx ecx byte ptr [eax+edx-1] +
mov eax [esi+20h] +
movzx ebp cl +
test eax eax +
jz loc_499376  +
mov edi [eax+1Ch] +
test edi edi +
jz loc_499376  +
mov ebx [esi+40h] +
cmp ebx [eax+20h] +
jnb loc_499376  +
lea eax [ebx+1] +
mov [esi+40h] eax +
mov [edi+ebx] cl +
test ebp ebp +
jnz loc_499342  +
mov eax [esp+7Ch+var_58] +
mov edi [esp+7Ch+var_3C] +
mov esi [esp+7Ch+var_38] +
mov [esp+7Ch+var_3C] ebp +
mov ebx [esp+7Ch+var_34] +
test byte ptr [eax+11h] 2 +
mov ebp [esp+7Ch+var_40] +
jnz loc_499935  +
mov eax [esp+7Ch+var_3C] +
sub edi edx +
add ebp edx +
test eax eax +
jnz loc_498700  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
mov edx [esp+7Ch+var_58] +
mov dword ptr [edx+40h] 0 +
mov dword ptr [edx] 7 +
test ah 10h +
jz loc_499610  +
test edi edi +
jz loc_498700  +
mov [esp+7Ch+var_38] esi +
xor edx edx +
mov esi [esp+7Ch+var_58] +
mov [esp+7Ch+var_40] ebp +
mov [esp+7Ch+var_3C] edi +
mov [esp+7Ch+var_34] ebx +
jmp loc_4993F6  +
cmp edx [esp+7Ch+var_3C] +
jnb loc_499428  +
mov eax [esp+7Ch+var_40] +
add edx 1 +
movzx ecx byte ptr [eax+edx-1] +
mov eax [esi+20h] +
movzx ebp cl +
test eax eax +
jz loc_499424  +
mov edi [eax+24h] +
test edi edi +
jz loc_499424  +
mov ebx [esi+40h] +
cmp ebx [eax+28h] +
jnb loc_499424  +
lea eax [ebx+1] +
mov [esi+40h] eax +
mov [edi+ebx] cl +
test ebp ebp +
jnz loc_4993F0  +
mov eax [esp+7Ch+var_58] +
mov edi [esp+7Ch+var_3C] +
mov esi [esp+7Ch+var_38] +
mov [esp+7Ch+var_3C] ebp +
mov ebx [esp+7Ch+var_34] +
test byte ptr [eax+11h] 2 +
mov ebp [esp+7Ch+var_40] +
jnz loc_499840  +
mov ecx [esp+7Ch+var_3C] +
sub edi edx +
add ebp edx +
test ecx ecx +
jnz loc_498700  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
mov edx [esp+7Ch+var_58] +
mov dword ptr [edx] 8 +
test ah 2 +
jz loc_499594  +
cmp ebx 0Fh +
ja loc_4994A5  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_49948D  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx edx byte ptr [ebp-1] +
sub edi 1 +
shl edx cl +
add ecx 8 +
add esi edx +
cmp ecx 0Fh +
jbe loc_499485  +
mov ebx ecx +
mov ecx [esp+7Ch+var_58] +
movzx edx word ptr [ecx+18h] +
cmp edx esi +
jz loc_499590  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aHeaderCrcMisma +
mov eax 1Dh +
mov dword ptr [ecx] 1Dh +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
mov edx [eax+10h] +
test dh 4 +
mov eax edx +
jz loc_498B48  +
cmp ebx 0Fh +
ja loc_499510  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_4994FA  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx 0Fh +
jbe loc_4994F6  +
mov eax [esp+7Ch+var_58] +
mov [eax+40h] esi +
mov eax [eax+20h] +
test eax eax +
jz loc_499521  +
mov [eax+14h] esi +
test dh 2 +
jnz loc_499BAE  +
mov eax edx +
xor ebx ebx +
and edx 400h +
xor esi esi +
jmp loc_498B60  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
jmp loc_4993C4  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+10h] +
jmp loc_49946B  +
mov ebx edi +
mov edi ebp +
mov ebp esi +
mov esi ecx +
jmp loc_4988E0  +
sub eax 0FFFFFF80h +
xor edx edx +
jmp loc_4989DB  +
cmp edx 13h +
jz loc_4989D6  +
xor edx edx +
jmp loc_4989DB  +
xor ebx ebx +
xor esi esi +
mov edx [esp+7Ch+var_58] +
mov edx [edx+20h] +
test edx edx +
jz loc_4995AF  +
sar eax 9 +
and eax 1 +
mov [edx+2Ch] eax +
mov dword ptr [edx+30h] 1 +
mov [esp+7Ch+var_74] 0 +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] 0 +
call sub_49AD40  +
mov edx [esp+7Ch+var_58] +
mov ecx [esp+7Ch+arg_0] +
mov [edx+18h] eax +
mov [ecx+30h] eax +
mov eax 0Bh +
mov dword ptr [edx] 0Bh +
jmp loc_498317  +
mov eax [esp+7Ch+arg_0] +
mov eax [eax+4] +
test eax eax +
jnz loc_499960  +
mov [esp+7Ch+var_50] 0 +
jmp loc_4982BA  +
mov ecx [esp+7Ch+var_58] +
mov edx [ecx+20h] +
test edx edx +
jz loc_499461  +
mov dword ptr [edx+24h] 0 +
jmp loc_499461  +
mov eax [esp+7Ch+var_58] +
mov edx [eax+18h] +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_74] esi +
mov eax [eax+0Ch] +
mov [esp+7Ch+var_7C] edx +
sub eax esi +
mov [esp+7Ch+var_78] eax +
call sub_49A810  +
jmp loc_49899F  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 0Bh +
mov eax 0Bh +
jmp loc_498317  +
mov eax [esp+7Ch+var_48] +
sub eax ecx +
mov [esp+7Ch+var_40] eax +
mov eax [esp+7Ch+var_58] +
mov ecx [eax+40h] +
mov edx ecx +
mov eax [esp+7Ch+var_4C] +
mov [esp+7Ch+var_3C] ebx +
cmp ecx eax +
cmova ecx eax +
mov eax [esp+7Ch+var_58] +
sub edx ecx +
sub [esp+7Ch+var_4C] ecx +
mov [eax+40h] edx +
mov edx [esp+7Ch+var_48] +
mov eax [esp+7Ch+var_40] +
add ecx edx +
add eax 1 +
movzx ebx byte ptr [eax-1] +
add edx 1 +
cmp edx ecx +
mov [edx-1] bl +
jnz loc_4996A7  +
mov eax [esp+7Ch+var_58] +
mov [esp+7Ch+var_48] edx +
mov ebx [esp+7Ch+var_3C] +
mov edx [eax+40h] +
test edx edx +
jz loc_4996D2  +
mov eax [eax] +
jmp loc_49830E  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 14h +
mov eax 14h +
jmp loc_498317  +
cmp ebx edx +
jnb loc_499715  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
jmp loc_4996FE  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx eax byte ptr [ebp-1] +
sub edi 1 +
shl eax cl +
add ecx 8 +
add esi eax +
cmp ecx edx +
jb loc_4996F6  +
mov ebx ecx +
mov ecx edx +
mov eax 1 +
shl eax cl +
mov ecx [esp+7Ch+var_58] +
sub ebx edx +
sub eax 1 +
and eax esi +
add eax [ecx+40h] +
mov [ecx+40h] eax +
mov ecx edx +
shr esi cl +
mov ecx [esp+7Ch+var_58] +
add [ecx+1BC4h] edx +
jmp loc_498726  +
mov esi [esp+7Ch+var_4C] +
xor ebx ebx +
mov eax [edx+8] +
mov [esp+7Ch+var_54] esi +
xor esi esi +
mov edx [esp+7Ch+var_58] +
mov dword ptr [edx] 1Bh +
jmp loc_499067  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 0Ch +
mov eax 0Ch +
jmp loc_498317  +
mov eax [eax+1BC0h] +
test eax eax +
jz loc_498530  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidDistanc +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov edx [esp+7Ch+var_58] +
mov edx [edx+1BC4h] +
mov ecx eax +
sub ebx eax +
shr esi cl +
mov ecx [esp+7Ch+var_58] +
add eax edx +
test byte ptr [esp+7Ch+var_40] 40h +
mov [ecx+1BC4h] eax +
jz loc_4999A8  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidDista_0 +
mov eax 1Dh +
mov dword ptr [ecx] 1Dh +
jmp loc_498317  +
mov edx [esp+7Ch+var_38] +
shr esi cl +
sub ebx eax +
mov ecx [esp+7Ch+var_58] +
mov eax edx +
add eax 1 +
mov [ecx+68h] eax +
mov [esp+7Ch+var_38] eax +
movzx eax word ptr [esp+7Ch+var_40] +
mov [ecx+edx*2+70h] ax +
jmp loc_498B8D  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 10h +
mov eax 10h +
jmp loc_49844E  +
xor edx edx +
jmp loc_498B60  +
mov edi ebp +
mov ebp ebx +
mov ebx esi +
mov esi ecx +
jmp loc_4988E0  +
mov eax [eax+18h] +
mov [esp+7Ch+var_74] edx +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_40] edx +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov edx [esp+7Ch+var_58] +
mov [edx+18h] eax +
mov edx [esp+7Ch+var_40] +
jmp loc_49944A  +
cmp [esp+7Ch+var_4C] 101h +
jbe loc_498593  +
mov eax [esp+7Ch+arg_0] +
mov edx [esp+7Ch+var_48] +
mov [eax] ebp +
mov [eax+0Ch] edx +
mov edx [esp+7Ch+var_4C] +
mov [eax+4] edi +
mov [eax+10h] edx +
mov eax [esp+7Ch+var_58] +
mov [eax+38h] esi +
mov esi eax +
mov [eax+3Ch] ebx +
mov eax [esp+7Ch+var_54] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+arg_0] +
mov [esp+7Ch+var_7C] eax +
call sub_49B590  +
mov eax [esp+7Ch+arg_0] +
mov eax [eax+0Ch] +
mov [esp+7Ch+var_48] eax +
mov eax [esp+7Ch+arg_0] +
mov eax [eax+10h] +
mov [esp+7Ch+var_4C] eax +
mov eax [esp+7Ch+arg_0] +
mov ebp [eax] +
mov edi [eax+4] +
mov eax esi +
mov ebx [eax+3Ch] +
mov eax [eax] +
mov esi [esi+38h] +
cmp eax 0Bh +
jnz loc_49830E  +
mov ecx [esp+7Ch+var_58] +
mov dword ptr [ecx+1BC4h] 0FFFFFFFFh +
jmp loc_498317  +
mov edx eax +
mov ecx eax +
sub ebx eax +
movzx eax word ptr [esp+7Ch+var_28] +
shr esi cl +
mov ecx [esp+7Ch+var_58] +
cmp byte ptr [esp+7Ch+var_40] 0 +
mov [ecx+1BC4h] edx +
mov [ecx+40h] eax +
jnz loc_4999C9  +
mov dword ptr [ecx] 19h +
mov eax 19h +
jmp loc_498317  +
mov eax [eax+18h] +
mov [esp+7Ch+var_74] edx +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_40] edx +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov edx [esp+7Ch+var_58] +
mov [edx+18h] eax +
mov edx [esp+7Ch+var_40] +
jmp loc_49939C  +
mov eax 0FFFFFFFEh +
jmp loc_4988C0  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aTooManyLengthO +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
sub eax ecx +
mov [esp+7Ch+var_40] eax +
mov eax [esp+7Ch+var_58] +
mov eax [eax+34h] +
add [esp+7Ch+var_40] eax +
jmp loc_498557  +
mov edx [esp+7Ch+var_40] +
mov ecx [esp+7Ch+var_58] +
movzx eax word ptr [esp+7Ch+var_28] +
and edx 0Fh +
mov [ecx+48h] edx +
mov [ecx+44h] eax +
mov dword ptr [ecx] 17h +
jmp loc_498499  +
test byte ptr [esp+7Ch+var_40] 20h +
jz loc_499B2F  +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax+1BC4h] 0FFFFFFFFh +
mov dword ptr [eax] 0Bh +
mov eax 0Bh +
jmp loc_498317  +
mov eax esi +
mov byte ptr [esp+7Ch+var_10] al +
mov eax esi +
mov esi [esp+7Ch+var_58] +
shr eax 8 +
mov byte ptr [esp+7Ch+var_10+1] al +
lea edx [esp+7Ch+var_10] +
mov eax [esi+18h] +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_74] 2 +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov edx [esi+10h] +
mov [esi+18h] eax +
mov eax edx +
jmp loc_498B31  +
mov ecx edi +
mov eax ebx +
mov edi ebp +
mov ebx esi +
mov ebp ecx +
mov esi eax +
jmp loc_4988E0  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aIncorrectHeade +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
cmp [esp+7Ch+arg_4] 6 +
mov dword ptr [eax+4Ch] offset unk_506400 +
mov dword ptr [eax+54h] 9 +
mov dword ptr [eax+50h] offset unk_506380 +
mov dword ptr [eax+58h] 5 +
mov dword ptr [eax] 13h +
jz loc_499FC4  +
mov eax 13h +
jmp loc_49844E  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidBlockTy +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_49844E  +
mov eax [esp+7Ch+var_58] +
mov edx [esp+7Ch+var_3C] +
mov eax [eax+18h] +
mov [esp+7Ch+var_74] edx +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov ecx [esp+7Ch+var_58] +
mov [ecx+18h] eax +
jmp loc_4992C2  +
mov eax esi +
mov ebx [esp+7Ch+var_58] +
mov byte ptr [esp+7Ch+var_10] al +
mov eax esi +
shr eax 8 +
mov byte ptr [esp+7Ch+var_10+1] al +
mov eax esi +
shr eax 10h +
mov byte ptr [esp+7Ch+var_10+2] al +
mov eax esi +
shr eax 18h +
mov byte ptr [esp+7Ch+var_10+3] al +
mov eax [ebx+18h] +
lea edx [esp+7Ch+var_10] +
mov [esp+7Ch+var_74] 4 +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov [ebx+18h] eax +
jmp loc_498A5E  +
test byte ptr [esp+7Ch+var_40] 40h +
jz loc_499CD5  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidLiteral +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
test esi 0E000h +
jz loc_499CEE  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aUnknownHeaderF +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov ebx [esp+7Ch+var_58] +
cmp [esp+7Ch+arg_4] 6 +
mov [ebx+40h] eax +
mov dword ptr [ebx] 0Eh +
jz loc_499FB7  +
xor ebx ebx +
xor esi esi +
jmp loc_498A77  +
mov ebx [esp+7Ch+var_58] +
mov eax esi +
mov byte ptr [esp+7Ch+var_10] al +
mov eax esi +
xor esi esi +
shr eax 8 +
mov byte ptr [esp+7Ch+var_10+1] al +
lea edx [esp+7Ch+var_10] +
mov eax [ebx+18h] +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_74] 2 +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov [ebx+18h] eax +
mov eax [ebx+10h] +
xor ebx ebx +
mov edx eax +
and edx 400h +
jmp loc_498B60  +
lea edx [eax+2] +
cmp ebx edx +
jnb loc_499C31  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
mov ebx eax +
mov eax edx +
jmp loc_499C18  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx edx byte ptr [ebp-1] +
sub edi 1 +
shl edx cl +
add ecx 8 +
add esi edx +
cmp ecx eax +
jb loc_499C10  +
mov eax ebx +
mov ebx ecx +
mov ecx eax +
sub ebx eax +
mov eax [esp+7Ch+var_38] +
shr esi cl +
test eax eax +
jz loc_499FD9  +
mov eax [esp+7Ch+var_58] +
sub ebx 2 +
mov ecx [esp+7Ch+var_38] +
movzx ecx word ptr [eax+ecx*2+6Eh] +
mov eax esi +
and eax 3 +
add eax 3 +
mov [esp+7Ch+var_40] eax +
shr esi 2 +
jmp loc_498C92  +
mov word ptr [esp+7Ch+var_28] cx +
movzx ecx byte ptr [esp+7Ch+var_34] +
sub ebx [esp+7Ch+var_38] +
shr esi cl +
jmp loc_499902  +
lea edx [eax+3] +
cmp ebx edx +
jnb loc_499CB4  +
test edi edi +
jz loc_498700  +
mov ecx ebx +
mov ebx eax +
mov eax edx +
jmp loc_499C9B  +
test edi edi +
jz loc_499560  +
add ebp 1 +
movzx edx byte ptr [ebp-1] +
sub edi 1 +
shl edx cl +
add ecx 8 +
add esi edx +
cmp ecx eax +
jb loc_499C93  +
mov eax ebx +
mov ebx ecx +
mov ecx eax +
sub ebx eax +
shr esi cl +
sub ebx 3 +
mov edx esi +
and esi 7 +
add esi 3 +
xor ecx ecx +
mov [esp+7Ch+var_40] esi +
mov esi edx +
shr esi 3 +
jmp loc_498C92  +
mov edx [esp+7Ch+var_40] +
mov eax [esp+7Ch+var_58] +
and edx 0Fh +
mov [eax+48h] edx +
mov dword ptr [eax] 15h +
jmp loc_498717  +
mov eax [esp+7Ch+var_58] +
mov eax [eax+20h] +
test eax eax +
jz loc_499D03  +
mov edx esi +
shr edx 8 +
and edx 1 +
mov [eax] edx +
test esi 200h +
jnz loc_499DF0  +
mov eax [esp+7Ch+var_58] +
xor ebx ebx +
xor esi esi +
mov dword ptr [eax] 2 +
jmp loc_498A18  +
mov eax ebx +
mov ebx edi +
mov edi ebp +
mov ebp esi +
mov esi eax +
mov eax [esp+7Ch+var_58] +
mov [esp+7Ch+var_44] 1 +
mov dword ptr [eax] 1Ch +
jmp loc_4988E0  +
mov edx [esp+7Ch+var_58] +
mov ecx [esp+7Ch+var_48] +
mov edx [edx+18h] +
sub ecx eax +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] ecx +
mov [esp+7Ch+var_7C] edx +
call sub_49A810  +
jmp loc_498FE5  +
mov eax [esp+7Ch+var_58] +
mov [esp+7Ch+var_38] 0 +
mov dword ptr [eax+68h] 0 +
mov dword ptr [eax] 12h +
jmp loc_498B7B  +
cmp dword ptr [eax] 1Dh +
jz loc_4990D3  +
cmp word ptr [eax+270h] 0 +
jnz loc_499F04  +
mov edx [esp+7Ch+arg_0] +
mov dword ptr [edx+18h] offset aInvalidCodeMis +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov eax ebx +
mov ecx [esp+7Ch+var_48] +
mov ebx edi +
mov edx [esp+7Ch+var_4C] +
mov edi ebp +
mov ebp esi +
mov esi eax +
mov eax [esp+7Ch+arg_0] +
mov [eax+0Ch] ecx +
mov [eax+10h] edx +
mov [eax] edi +
mov [eax+4] ebx +
mov eax [esp+7Ch+var_58] +
mov [eax+38h] ebp +
mov [eax+3Ch] esi +
mov eax 2 +
jmp loc_4988C0  +
mov eax esi +
mov byte ptr [esp+7Ch+var_10] al +
mov eax esi +
mov esi [esp+7Ch+var_58] +
shr eax 8 +
mov byte ptr [esp+7Ch+var_10+1] al +
lea edx [esp+7Ch+var_10] +
mov eax [esi+18h] +
mov [esp+7Ch+var_74] 2 +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov [esi+18h] eax +
jmp loc_499D0F  +
mov ebx edi +
xor esi esi +
mov edi ebp +
xor ebp ebp +
jmp loc_499D2C  +
mov [esp+7Ch+var_74] 0 +
xor ebx ebx +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] 0 +
call sub_49AD40  +
mov esi [esp+7Ch+var_58] +
lea edx [esp+7Ch+var_10] +
mov byte ptr [esp+7Ch+var_10] 1Fh +
mov byte ptr [esp+7Ch+var_10+1] 8Bh +
mov [esi+18h] eax +
mov [esp+7Ch+var_74] 2 +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_7C] eax +
call sub_49AD40  +
mov dword ptr [esi] 1 +
mov [esi+18h] eax +
mov eax 1 +
xor esi esi +
jmp loc_498317  +
mov eax [esp+7Ch+var_58] +
shr esi 4 +
mov ecx esi +
and ecx 0Fh +
add ecx 8 +
mov eax [eax+24h] +
test eax eax +
jnz loc_499F8A  +
mov eax [esp+7Ch+var_58] +
mov [eax+24h] ecx +
mov ebx [esp+7Ch+var_58] +
mov eax 1 +
shl eax cl +
mov [ebx+14h] eax +
mov [esp+7Ch+var_74] 0 +
mov [esp+7Ch+var_78] 0 +
mov [esp+7Ch+var_7C] 0 +
call sub_49A810  +
mov edx [esp+7Ch+arg_0] +
mov [ebx+18h] eax +
mov [edx+30h] eax +
mov eax esi +
and eax 200h +
cmp eax 1 +
sbb eax eax +
xor esi esi +
and eax 2 +
add eax 9 +
mov [ebx] eax +
xor ebx ebx +
jmp loc_49830E  +
mov eax [esp+7Ch+var_58] +
mov ecx [esp+7Ch+var_2C] +
lea edx [eax+2F0h] +
mov [eax+6Ch] ecx +
mov [eax+4Ch] ecx +
lea ecx [eax+6Ch] +
add eax 54h +
mov dword ptr [eax] 9 +
mov [esp+7Ch+var_3C] edx +
mov [esp+7Ch+var_68] edx +
mov edx [esp+7Ch+var_30] +
mov [esp+7Ch+var_70] ecx +
mov [esp+7Ch+var_40] ecx +
mov ecx [esp+7Ch+var_28] +
mov [esp+7Ch+var_6C] eax +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_7C] 1 +
mov [esp+7Ch+var_74] ecx +
call sub_49B030  +
mov ecx [esp+7Ch+var_40] +
mov edx [esp+7Ch+var_3C] +
test eax eax +
mov [esp+7Ch+var_44] eax +
jz loc_499FF6  +
mov eax [esp+7Ch+var_58] +
mov ecx [esp+7Ch+arg_0] +
mov dword ptr [ecx+18h] offset aInvalidLiter_0 +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
cmp ecx eax +
jbe loc_499EB0  +
mov eax [esp+7Ch+arg_0] +
sub ebx 4 +
mov dword ptr [eax+18h] offset aInvalidWindowS +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
mov ebx edi +
xor esi esi +
mov edi ebp +
xor ebp ebp +
jmp loc_4988E0  +
mov eax ebx +
mov ebx edi +
mov edi ebp +
mov ebp esi +
mov esi eax +
shr ebp 3 +
sub esi 3 +
jmp loc_4988E0  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidBitLeng +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
jmp loc_4990D3  +
mov [esp+7Ch+var_40] ebx +
mov ebx [esp+7Ch+var_58] +
mov eax [ebx+6Ch] +
mov dword ptr [ebx+58h] 6 +
mov [ebx+50h] eax +
mov eax [ebx+64h] +
mov [esp+7Ch+var_68] edx +
mov edx ebx +
add edx 58h +
mov [esp+7Ch+var_6C] edx +
mov [esp+7Ch+var_70] ecx +
mov [esp+7Ch+var_74] eax +
mov eax [ebx+60h] +
mov [esp+7Ch+var_7C] 2 +
lea eax [ebx+eax*2+70h] +
mov [esp+7Ch+var_78] eax +
call sub_49B030  +
mov ebx [esp+7Ch+var_40] +
test eax eax +
mov [esp+7Ch+var_44] eax +
jz loc_498568  +
mov eax [esp+7Ch+arg_0] +
mov dword ptr [eax+18h] offset aInvalidDista_1 +
mov eax [esp+7Ch+var_58] +
mov dword ptr [eax] 1Dh +
mov eax 1Dh +
jmp loc_498317  +
***
mov ebx [esp+18h+arg_0] +
test ebx ebx +
jz loc_49A0C0  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_49A0C0  +
mov edx [ebx+24h] +
test edx edx +
jz loc_49A0C0  +
mov ecx [eax+34h] +
test ecx ecx +
jz loc_49A0A3  +
mov eax [ebx+28h] +
mov [esp+18h+var_14] ecx +
mov [esp+18h+var_18] eax +
call edx  +
mov edx [ebx+24h] +
mov eax [ebx+1Ch] +
mov ecx [ebx+28h] +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] ecx +
call edx  +
xor eax eax +
mov dword ptr [ebx+1Ch] 0 +
add esp 18h +
pop ebx  +
retn   +
mov eax 0FFFFFFFEh +
jmp loc_49A0B8  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+30h] +
test ebx ebx +
jz loc_49A180  +
mov esi [ebx+1Ch] +
test esi esi +
jz loc_49A180  +
mov eax [esi+8] +
test eax eax +
jnz loc_49A138  +
cmp dword ptr [esi] 0Ah +
jz loc_49A13D  +
mov eax [esp+34h] +
add eax [esp+38h] +
mov edx [esp+38h] +
mov ebp [ebx+0Ch] +
mov edi [ebx+10h] +
mov [ebx+0Ch] eax +
mov eax ebx +
mov dword ptr [ebx+10h] 0 +
call sub_497E00  +
mov [ebx+10h] edi +
mov [ebx+0Ch] ebp +
test eax eax +
jnz loc_49A187  +
mov dword ptr [esi+0Ch] 1 +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp dword ptr [esi] 0Ah +
jnz loc_49A180  +
mov dword ptr [esp+8] 0 +
mov dword ptr [esp+4] 0 +
mov dword ptr [esp] 0 +
call sub_49A810  +
mov ecx [esp+38h] +
mov [esp+8] ecx +
mov ecx [esp+34h] +
mov [esp] eax +
mov [esp+4] ecx +
call sub_49A810  +
cmp [esi+18h] eax +
jz loc_49A0FA  +
mov eax 0FFFFFFFDh +
jmp loc_49A130  +
***
mov eax 0FFFFFFFEh +
jmp loc_49A130  +
***
mov dword ptr [esi] 1Eh +
mov eax 0FFFFFFFCh +
jmp loc_49A130  +
***
mov eax [esp+4] +
mov edx [esp+8] +
test eax eax +
jz loc_49A1C6  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_49A1C6  +
test byte ptr [eax+8] 2 +
jz loc_49A1C6  +
mov [eax+20h] edx +
xor eax eax +
mov dword ptr [edx+30h] 0 +
retn   +
***
mov eax 0FFFFFFFEh +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+28h] +
test ebx ebx +
jz loc_49A2C8  +
mov edi [ebx+1Ch] +
test edi edi +
jz loc_49A2C8  +
mov ecx [ebx+4] +
test ecx ecx +
jz loc_49A2A2  +
cmp dword ptr [edi] 1Fh +
lea esi [edi+68h] +
jz loc_49A265  +
mov edx [edi+3Ch] +
mov eax [edi+38h] +
mov dword ptr [edi] 1Fh +
mov ecx edx +
and edx 0FFFFFFF8h +
and ecx 7 +
shl eax cl +
cmp edx 7 +
mov [edi+38h] eax +
mov ecx edx +
mov [edi+3Ch] edx +
jbe loc_49A2C0  +
sub ecx 8 +
lea edx [esp+10h] +
shr ecx 3 +
mov esi edx +
lea ebp [esp+ecx+11h] +
mov [esi] al +
add esi 1 +
shr eax 8 +
cmp esi ebp +
jnz loc_49A238  +
add ecx 1 +
mov [edi+38h] eax +
mov dword ptr [edi+3Ch] 0 +
lea esi [edi+68h] +
mov dword ptr [edi+68h] 0 +
mov eax esi +
call sub_497D70  +
mov ecx [ebx+4] +
mov edx [ebx] +
mov eax esi +
call sub_497D70  +
sub [ebx+4] eax +
add [ebx] eax +
add eax [ebx+8] +
cmp dword ptr [edi+68h] 4 +
mov esi eax +
mov [ebx+8] eax +
jnz loc_49A2B3  +
mov ebp [ebx+14h] +
mov [esp] ebx +
call sub_497FE0  +
xor eax eax +
mov [ebx+8] esi +
mov [ebx+14h] ebp +
mov dword ptr [edi] 0Bh +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp dword ptr [edi+3Ch] 7 +
ja loc_49A1F9  +
mov eax 0FFFFFFFBh +
jmp loc_49A29A  +
***
add esp 14h +
mov eax 0FFFFFFFDh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
xor ecx ecx +
lea edx [esp+10h] +
jmp loc_49A251  +
***
mov eax 0FFFFFFFEh +
jmp loc_49A29A  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+40h] +
mov esi [esp+44h] +
test ebx ebx +
jz loc_49A530  +
test esi esi +
jz loc_49A530  +
mov ebp [esi+1Ch] +
test ebp ebp +
jz loc_49A530  +
mov eax [esi+20h] +
test eax eax +
jz loc_49A530  +
mov edx [esi+24h] +
test edx edx +
jz loc_49A530  +
mov edx [esi+28h] +
mov dword ptr [esp+8] 1BCCh +
mov dword ptr [esp+4] 1 +
mov [esp] edx +
call eax  +
test eax eax +
mov edx eax +
jz loc_49A53A  +
mov eax [ebp+34h] +
test eax eax +
jz loc_49A4F5  +
mov edi [esi+20h] +
mov eax 1 +
mov dword ptr [esp+8] 1 +
mov ecx [ebp+24h] +
mov [esp+1Ch] edx +
shl eax cl +
mov [esp+4] eax +
mov eax [esi+28h] +
mov [esp] eax +
call edi  +
mov edx [esp+1Ch] +
test eax eax +
mov [esp+18h] eax +
jz loc_49A544  +
mov eax [esi] +
test dl 1 +
mov edi edx +
mov [ebx] eax +
mov eax [esi+4] +
mov [ebx+4] eax +
mov eax [esi+8] +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
mov [ebx+0Ch] eax +
mov eax [esi+10h] +
mov [ebx+10h] eax +
mov eax [esi+14h] +
mov [ebx+14h] eax +
mov eax [esi+18h] +
mov [ebx+18h] eax +
mov eax [esi+1Ch] +
mov [ebx+1Ch] eax +
mov eax [esi+20h] +
mov [ebx+20h] eax +
mov eax [esi+24h] +
mov [ebx+24h] eax +
mov eax [esi+28h] +
mov [ebx+28h] eax +
mov eax [esi+2Ch] +
mov [ebx+2Ch] eax +
mov eax [esi+30h] +
mov [ebx+30h] eax +
mov eax [esi+34h] +
mov esi ebp +
mov [ebx+34h] eax +
mov eax 1BCCh +
jnz loc_49A502  +
test edi 2 +
jnz loc_49A518  +
mov ecx eax +
shr ecx 2 +
test al 2 +
movs   +
jnz loc_49A4E0  +
test al 1 +
jnz loc_49A4C0  +
mov eax [ebp+4Ch] +
lea ecx [ebp+530h] +
cmp eax ecx +
jnb loc_49A490  +
mov eax [ebp+6Ch] +
mov edi [esp+18h] +
sub eax ecx +
sar eax 2 +
test edi edi +
lea eax [edx+eax*4+530h] +
mov [edx+6Ch] eax +
jz loc_49A475  +
mov ecx [ebp+24h] +
mov eax 1 +
mov esi [ebp+34h] +
mov [esp] edi +
mov [esp+1Ch] edx +
shl eax cl +
mov [esp+8] eax +
mov [esp+4] esi +
call memcpy  +
mov edx [esp+1Ch] +
mov eax [esp+18h] +
mov [edx+34h] eax +
xor eax eax +
mov [ebx+1Ch] edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea esi [ebp+1BBCh] +
cmp eax esi +
ja loc_49A436  +
sub eax ecx +
sar eax 2 +
lea eax [edx+eax*4+530h] +
mov [edx+4Ch] eax +
mov eax [ebp+50h] +
sub eax ecx +
sar eax 2 +
lea eax [edx+eax*4+530h] +
mov [edx+50h] eax +
jmp loc_49A436  +
***
movzx eax byte ptr [esi+ecx] +
mov [edi+ecx] al +
mov eax [ebp+4Ch] +
lea ecx [ebp+530h] +
cmp eax ecx +
jb loc_49A436  +
jmp loc_49A490  +
***
movzx ecx word ptr [esi] +
test al 1 +
mov [edi] cx +
mov ecx 2 +
jz loc_49A429  +
jmp loc_49A4C0  +
***
mov dword ptr [esp+18h] 0 +
jmp loc_49A3A2  +
***
movzx eax byte ptr [ebp+0] +
lea edi [edx+1] +
lea esi [ebp+1] +
mov [edx] al +
mov eax 1BCBh +
jmp loc_49A406  +
***
movzx ecx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] cx +
jmp loc_49A412  +
***
mov eax 0FFFFFFFEh +
jmp loc_49A481  +
***
mov eax 0FFFFFFFCh +
jmp loc_49A481  +
***
mov ecx [esi+28h] +
mov eax [esi+24h] +
mov [esp+4] edx +
mov [esp] ecx +
call eax  +
mov eax 0FFFFFFFCh +
jmp loc_49A481  +
***
mov eax [esp+4] +
test eax eax +
jz loc_49A580  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_49A580  +
mov dword ptr [eax+1BC0h] 1 +
mov eax 0FFFFFFFDh +
retn   +
***
mov eax 0FFFFFFFEh +
retn   +
***
push ebx  +
mov eax [esp+8] +
test eax eax +
jz loc_49A5D4  +
mov edx [eax+1Ch] +
test edx edx +
jz loc_49A5D4  +
mov eax [edx+1BC4h] +
mov ecx [edx] +
shl eax 10h +
cmp ecx 0Fh +
jz loc_49A5C0  +
xor ebx ebx +
cmp ecx 18h +
jz loc_49A5C7  +
add eax ebx +
pop ebx  +
retn   +
***
mov ebx [edx+40h] +
add eax ebx +
jmp loc_49A5B9  +
***
mov ebx [edx+1BC8h] +
sub ebx [edx+40h] +
add eax ebx +
jmp loc_49A5B9  +
***
mov eax 0FFFF0000h +
pop ebx  +
retn   +
***
push ebx  +
sub esp 50h +
mov eax [esp+50h+arg_8] +
lea ebx [esp+50h+var_38] +
mov esi [esp+50h+arg_4] +
mov [esp+50h+var_18] 0 +
mov [esp+50h+var_14] 0 +
mov [esp+50h+var_38] eax +
mov eax [esp+50h+arg_C] +
mov [esp+50h+var_10] 0 +
mov [esp+50h+var_34] eax +
mov eax [esp+50h+arg_0] +
mov [esp+50h+var_2C] eax +
mov eax [esi] +
mov [esp+50h+var_44] 38h +
mov [esp+50h+var_48] offset a1_2_7_0 +
mov [esp+50h+var_50] ebx +
mov [esp+50h+var_28] eax +
mov eax [esp+50h+arg_10] +
mov [esp+50h+var_4C] eax +
call sub_49E6B0  +
test eax eax +
jz loc_49A650  +
add esp 50h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+50h+var_4C] 4 +
mov [esp+50h+var_50] ebx +
call sub_49D150  +
cmp eax 1 +
mov edi eax +
jz loc_49A680  +
mov [esp+50h+var_50] ebx +
call sub_49E2D0  +
test edi edi +
mov eax 0FFFFFFFBh +
cmovnz eax edi +
add esp 50h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [esp+50h+var_24] +
mov [esi] eax +
mov [esp+50h+var_50] ebx +
call sub_49E2D0  +
add esp 50h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_1C] 0FFFFFFFFh +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_49A5E0  +
add esp 2Ch +
retn   +
***
mov edx [esp+arg_0] +
mov eax edx +
shr eax 0Ch +
lea ecx [edx+eax+0Dh] +
mov eax edx +
shr eax 0Eh +
add eax ecx +
shr edx 19h +
add eax edx +
retn   +
***
mov eax offset a1_2_7_1 +
retn   +
***
mov eax 55h +
retn   +
***
mov eax 2 +
sub eax [esp+4] +
mov eax ds:off_506CE0[eax*4] +
retn   +
***
jmp loc_49A740  +
mov eax [esp+0Ch] +
imul eax [esp+8] +
mov [esp+4] eax +
jmp malloc  +
***
mov eax [esp+8] +
mov [esp+4] eax +
jmp free  +
***
push ebp  +
mov ebp 80078071h +
push edi  +
push esi  +
mov esi eax +
mov eax ecx +
push ebx  +
mov ebx edx +
imul  ebp +
mov eax ecx +
sar eax 1Fh +
sub esp 4 +
add edx ecx +
sar edx 0Fh +
sub edx eax +
movzx eax bx +
imul edx edx +
shr ebx 10h +
mov [esp] eax +
sub ecx edx +
mov edx ecx +
movzx ecx si +
mov edi edx +
imul edi ecx +
shr esi 10h +
add ebx esi +
sub ebx edx +
mov eax edi +
mul  ebp +
shr edx 0Fh +
imul edx edx +
sub edi edx +
mov edx 0FFF0h +
add ebx edi +
add ecx [esp] +
lea eax [ebx+0FFF1h] +
jz loc_49A7E4  +
lea edx [ecx-1] +
cmp edx 0FFF0h +
jbe loc_49A7E4  +
lea edx [ecx-0FFF2h] +
sub ebx 0FFF1h +
cmp eax 1FFE2h +
cmovnb eax ebx +
cmp eax 0FFF1h +
lea ecx [eax-0FFF1h] +
cmovnb eax ecx +
add esp 4 +
shl eax 10h +
pop ebx  +
or eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 38h +
mov ebp [esp+38h+arg_0] +
mov edi [esp+38h+arg_4] +
mov eax ebp +
movzx ebp bp +
shr eax 10h +
cmp [esp+38h+arg_8] 1 +
mov [esp+38h+var_C] eax +
jz loc_49A9FB  +
test edi edi +
jz loc_49ABB9  +
cmp [esp+38h+arg_8] 0Fh +
ja loc_49A8A2  +
mov edx [esp+38h+arg_8] +
test edx edx +
jz loc_49A86A  +
mov edx [esp+38h+arg_8] +
mov eax [esp+38h+var_C] +
add edx edi +
add edi 1 +
movzx ecx byte ptr [edi-1] +
add ebp ecx +
add eax ebp +
cmp edi edx +
jnz loc_49A857  +
mov [esp+38h+var_C] eax +
mov eax [esp+38h+var_C] +
cmp ebp 0FFF1h +
mov edx 80078071h +
lea ecx [ebp-0FFF1h] +
cmovb ecx ebp +
mul  edx +
mov eax [esp+38h+var_C] +
shr edx 0Fh +
imul edx edx +
sub eax edx +
shl eax 10h +
or ecx eax +
add esp 38h +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+38h+arg_8] 15AFh +
jbe loc_49AA3D  +
sub [esp+38h+arg_8] 15B0h +
lea eax [edi+15B0h] +
mov [esp+38h+var_8] eax +
mov eax edi +
movzx edi byte ptr [eax] +
add eax 10h +
lea ebx [ebp+edi+0] +
movzx edi byte ptr [eax-0Fh] +
mov [esp+38h+var_38] ebx +
add edi ebx +
mov ebx edi +
movzx edi byte ptr [eax-0Eh] +
mov [esp+38h+var_34] ebx +
mov esi edi +
movzx edi byte ptr [eax-0Dh] +
add esi ebx +
mov [esp+38h+var_30] esi +
mov ecx edi +
movzx edi byte ptr [eax-0Ch] +
add ecx esi +
mov [esp+38h+var_2C] ecx +
mov edx edi +
movzx edi byte ptr [eax-0Bh] +
add edx ecx +
mov [esp+38h+var_28] edx +
mov ebp edi +
movzx edi byte ptr [eax-0Ah] +
add ebp edx +
mov [esp+38h+var_24] ebp +
add edi ebp +
movzx ebp byte ptr [eax-1] +
mov ebx edi +
movzx edi byte ptr [eax-9] +
mov [esp+38h+var_20] ebx +
add edi ebx +
movzx ebx byte ptr [eax-4] +
mov esi edi +
movzx edi byte ptr [eax-8] +
mov [esp+38h+var_1C] esi +
mov ecx edi +
movzx edi byte ptr [eax-7] +
add ecx esi +
movzx esi byte ptr [eax-5] +
mov [esp+38h+var_18] ecx +
mov edx edi +
movzx edi byte ptr [eax-6] +
add edx ecx +
movzx ecx byte ptr [eax-3] +
mov [esp+38h+var_14] edx +
add edi edx +
movzx edx byte ptr [eax-2] +
add esi edi +
mov [esp+38h+var_10] edi +
mov edi [esp+38h+var_34] +
add ebx esi +
add edi [esp+38h+var_38] +
add ecx ebx +
add edi [esp+38h+var_30] +
add edx ecx +
add edi [esp+38h+var_2C] +
add ebp edx +
add edi [esp+38h+var_28] +
add edi [esp+38h+var_24] +
add edi [esp+38h+var_20] +
add edi [esp+38h+var_1C] +
add edi [esp+38h+var_18] +
add edi [esp+38h+var_14] +
add edi [esp+38h+var_10] +
add edi esi +
add edi ebx +
add ecx edi +
add edx ecx +
add edx ebp +
add [esp+38h+var_C] edx +
cmp eax [esp+38h+var_8] +
jnz loc_49A8C4  +
mov edi eax +
mov eax 80078071h +
mul  ebp +
mov eax 80078071h +
shr edx 0Fh +
imul edx edx +
sub ebp edx +
mul  [esp+38h+var_C] +
shr edx 0Fh +
imul edx edx +
sub [esp+38h+var_C] edx +
cmp [esp+38h+arg_8] 15AFh +
ja loc_49A8B0  +
mov eax [esp+38h+arg_8] +
test eax eax +
jnz loc_49AA32  +
mov ecx [esp+38h+var_C] +
shl ecx 10h +
or ecx ebp +
add esp 38h +
mov eax ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [edi] +
add ebp eax +
cmp ebp 0FFF1h +
lea eax [ebp-0FFF1h] +
cmovnb ebp eax +
mov eax [esp+38h+var_C] +
add eax ebp +
cmp eax 0FFF1h +
lea ecx [eax-0FFF1h] +
cmovb ecx eax +
add esp 38h +
shl ecx 10h +
or ecx ebp +
pop ebx  +
mov eax ecx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+38h+arg_8] 0Fh +
jbe loc_49ABC3  +
mov eax [esp+38h+arg_8] +
mov edx edi +
mov [esp+38h+arg_4] edi +
sub eax 10h +
mov [esp+38h+var_4] eax +
shr [esp+38h+var_4] 4 +
mov eax [esp+38h+var_4] +
shl eax 4 +
lea eax [edi+eax+10h] +
mov [esp+38h+var_8] eax +
movzx eax byte ptr [edx] +
add edx 10h +
add eax ebp +
mov esi eax +
movzx eax byte ptr [edx-0Fh] +
mov [esp+38h+var_38] esi +
add eax esi +
mov edi eax +
movzx eax byte ptr [edx-0Eh] +
mov [esp+38h+var_34] edi +
add eax edi +
movzx edi byte ptr [edx-4] +
mov esi eax +
movzx eax byte ptr [edx-0Dh] +
mov [esp+38h+var_30] esi +
add eax esi +
mov ebx eax +
movzx eax byte ptr [edx-0Ch] +
mov [esp+38h+var_2C] ebx +
mov ecx eax +
movzx eax byte ptr [edx-0Bh] +
add ecx ebx +
movzx ebx byte ptr [edx-7] +
mov [esp+38h+var_28] ecx +
mov ebp eax +
movzx eax byte ptr [edx-0Ah] +
add ebp ecx +
movzx ecx byte ptr [edx-6] +
mov [esp+38h+var_24] ebp +
add eax ebp +
mov esi eax +
movzx eax byte ptr [edx-9] +
mov [esp+38h+var_20] esi +
add eax esi +
movzx esi byte ptr [edx-8] +
mov [esp+38h+var_1C] eax +
add esi eax +
movzx eax byte ptr [edx-5] +
add ebx esi +
add ecx ebx +
add eax ecx +
lea ebp [eax+edi] +
movzx edi byte ptr [edx-3] +
mov [esp+38h+var_18] ebp +
add edi ebp +
mov ebp edi +
movzx edi byte ptr [edx-2] +
mov [esp+38h+var_14] ebp +
add edi ebp +
movzx ebp byte ptr [edx-1] +
mov [esp+38h+var_10] edi +
add ebp edi +
mov edi [esp+38h+var_34] +
add edi [esp+38h+var_38] +
add edi [esp+38h+var_30] +
add edi [esp+38h+var_2C] +
add edi [esp+38h+var_28] +
add edi [esp+38h+var_24] +
add edi [esp+38h+var_20] +
add edi [esp+38h+var_1C] +
add esi edi +
add ebx esi +
add ecx ebx +
add eax ecx +
add eax [esp+38h+var_18] +
add eax [esp+38h+var_14] +
add eax [esp+38h+var_10] +
add eax ebp +
add [esp+38h+var_C] eax +
cmp edx [esp+38h+var_8] +
jnz loc_49AA62  +
mov esi [esp+38h+var_4] +
mov edi [esp+38h+arg_4] +
mov eax esi +
add eax 1 +
shl eax 4 +
add edi eax +
mov eax esi +
mov esi [esp+38h+arg_8] +
shl eax 4 +
neg eax  +
lea eax [esi+eax-11h] +
and esi 0Fh +
jz loc_49AB84  +
lea edx [edi+eax+1] +
mov eax [esp+38h+var_C] +
add edi 1 +
movzx ecx byte ptr [edi-1] +
add ebp ecx +
add eax ebp +
cmp edi edx +
jnz loc_49AB71  +
mov [esp+38h+var_C] eax +
mov ecx 80078071h +
mov eax ebp +
mul  ecx +
mov eax [esp+38h+var_C] +
shr edx 0Fh +
imul edx edx +
sub ebp edx +
mul  ecx +
shr edx 0Fh +
imul edx edx +
sub [esp+38h+var_C] edx +
mov ecx [esp+38h+var_C] +
shl ecx 10h +
or ecx ebp +
jmp loc_49A9F1  +
mov ecx 1 +
jmp loc_49A898  +
mov eax [esp+38h+arg_8] +
sub eax 1 +
jmp loc_49AB69  +
***
mov ecx [esp+0Ch] +
mov eax [esp+4] +
mov edx [esp+8] +
test ecx ecx +
js loc_49ABE5  +
jmp loc_49A770  +
***
mov eax 0FFFFFFFFh +
retn   +
***
mov ecx [esp+0Ch] +
mov eax [esp+4] +
mov edx [esp+8] +
test ecx ecx +
js loc_49AC05  +
jmp loc_49A770  +
***
mov eax 0FFFFFFFFh +
retn   +
***
push esi  +
push ebx  +
mov ecx [edx+edi*4] +
test ecx ecx +
jz loc_49AC3D  +
mov ebx edx +
xor esi esi +
test cl 1 +
jz loc_49AC27  +
xor esi [ebx] +
add ebx 4 +
shr ecx 1 +
jnz loc_49AC20  +
mov [eax+edi*4] esi +
add edi 1 +
cmp edi 20h +
jnz loc_49AC15  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
xor esi esi +
mov [eax+edi*4] esi +
add edi 1 +
cmp edi 20h +
jnz loc_49AC15  +
jmp loc_49AC39  +
***
push ebp  +
mov ebp ecx +
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 100h +
test ecx ecx +
jle loc_49AD1D  +
mov edi edx +
mov edx 1 +
mov dword ptr [esp+80h] 0EDB88320h +
lea eax [esp+84h] +
lea ecx [esp+100h] +
mov [eax] edx +
add eax 4 +
add edx edx +
cmp eax ecx +
jnz loc_49AC86  +
lea edx [esp+80h] +
mov eax esp +
call sub_49AC10  +
mov edx esp +
lea eax [esp+80h] +
call sub_49AC10  +
lea esi [esi+0] +
lea edx [esp+80h] +
mov eax esp +
call sub_49AC10  +
test ebp 1 +
jz loc_49ACDE  +
test esi esi +
jz loc_49ACDE  +
mov ebx esi +
mov eax esp +
xor esi esi +
test bl 1 +
jz loc_49ACD7  +
xor esi [eax] +
add eax 4 +
shr ebx 1 +
jnz loc_49ACD0  +
sar ebp 1 +
jz loc_49AD19  +
mov edx esp +
lea eax [esp+80h] +
call sub_49AC10  +
test ebp 1 +
jz loc_49AD15  +
test esi esi +
jz loc_49AD15  +
mov ebx esi +
xor esi esi +
lea eax [esp+80h] +
test bl 1 +
jz loc_49AD0E  +
xor esi [eax] +
add eax 4 +
shr ebx 1 +
jnz loc_49AD07  +
sar ebp 1 +
jnz loc_49ACB0  +
mov eax esi +
xor eax edi +
add esp 100h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax offset dword_506D20 +
retn   +
***
push esi  +
push ebx  +
sub esp 4 +
mov edx [esp+4+arg_4] +
mov ebp [esp+4+arg_8] +
test edx edx +
jz loc_49AFE3  +
mov eax [esp+4+arg_0] +
test ebp ebp +
not eax  +
jnz loc_49AD84  +
jmp loc_49AFD9  +
add edx 1 +
mov ecx eax +
xor cl [edx-1] +
shr eax 8 +
movzx ecx cl +
xor eax ds:dword_506D20[ecx*4] +
sub ebp 1 +
jz loc_49AFD9  +
test dl 3 +
jnz loc_49AD66  +
cmp ebp 1Fh +
jbe loc_49AF54  +
lea edi [ebp-20h] +
mov ebx edx +
mov [esp+4+var_4] edi +
shr [esp+4+var_4] 5 +
mov ecx [esp+4+var_4] +
mov [esp+4+arg_4] edx +
shl ecx 5 +
lea edi [edx+ecx+20h] +
lea esi [esi+0] +
xor eax [ebx] +
mov edx eax +
movzx ecx al +
shr edx 10h +
movzx esi ah +
mov ecx ds:dword_507920[ecx*4] +
shr eax 18h +
movzx edx dl +
xor ecx ds:dword_506D20[eax*4] +
xor ecx [ebx+4] +
xor ecx ds:dword_507520[esi*4] +
xor ecx ds:dword_507120[edx*4] +
mov eax ecx +
movzx esi cl +
shr eax 10h +
movzx edx ch +
mov esi ds:dword_507920[esi*4] +
shr ecx 18h +
movzx eax al +
xor esi ds:dword_506D20[ecx*4] +
xor esi [ebx+8] +
xor esi ds:dword_507520[edx*4] +
xor esi ds:dword_507120[eax*4] +
mov eax esi +
mov ecx esi +
movzx edx ah +
movzx ecx cl +
shr eax 10h +
mov ecx ds:dword_507920[ecx*4] +
shr esi 18h +
movzx eax al +
xor ecx ds:dword_506D20[esi*4] +
xor ecx [ebx+0Ch] +
xor ecx ds:dword_507520[edx*4] +
xor ecx ds:dword_507120[eax*4] +
mov eax ecx +
movzx esi cl +
shr eax 10h +
movzx edx ch +
mov esi ds:dword_507920[esi*4] +
shr ecx 18h +
movzx eax al +
xor esi ds:dword_506D20[ecx*4] +
xor esi [ebx+10h] +
xor esi ds:dword_507520[edx*4] +
xor esi ds:dword_507120[eax*4] +
mov eax esi +
mov ecx esi +
movzx edx ah +
movzx ecx cl +
shr eax 10h +
mov ecx ds:dword_507920[ecx*4] +
shr esi 18h +
movzx eax al +
xor ecx ds:dword_506D20[esi*4] +
xor ecx [ebx+14h] +
xor ecx ds:dword_507520[edx*4] +
xor ecx ds:dword_507120[eax*4] +
mov eax ecx +
movzx esi cl +
shr eax 10h +
movzx edx ch +
mov esi ds:dword_507920[esi*4] +
movzx eax al +
shr ecx 18h +
xor esi ds:dword_506D20[ecx*4] +
add ebx 20h +
xor esi [ebx-8] +
xor esi ds:dword_507520[edx*4] +
xor esi ds:dword_507120[eax*4] +
mov eax esi +
mov edx esi +
movzx ecx ah +
movzx edx dl +
shr eax 10h +
mov edx ds:dword_507920[edx*4] +
shr esi 18h +
movzx eax al +
xor edx ds:dword_506D20[esi*4] +
xor edx [ebx-4] +
xor edx ds:dword_507520[ecx*4] +
xor edx ds:dword_507120[eax*4] +
mov ecx edx +
mov eax edx +
shr ecx 10h +
movzx esi dl +
shr eax 18h +
movzx ecx cl +
mov eax ds:dword_506D20[eax*4] +
movzx edx dh +
xor eax ds:dword_507920[esi*4] +
xor eax ds:dword_507520[edx*4] +
xor eax ds:dword_507120[ecx*4] +
cmp ebx edi +
jnz loc_49ADB0  +
mov ecx [esp+4+var_4] +
and ebp 1Fh +
mov edx [esp+4+arg_4] +
add ecx 1 +
shl ecx 5 +
add edx ecx +
cmp ebp 3 +
jbe loc_49AFB6  +
lea edi [ebp-4] +
mov ebx edx +
mov [esp+4+var_4] edi +
shr [esp+4+var_4] 2 +
mov edi [esp+4+var_4] +
mov [esp+4+arg_4] edx +
lea edi [edx+edi*4+4] +
xor eax [ebx] +
add ebx 4 +
mov ecx eax +
mov edx eax +
shr ecx 10h +
movzx esi dl +
shr eax 18h +
movzx ecx cl +
mov eax ds:dword_506D20[eax*4] +
movzx edx dh +
xor eax ds:dword_507920[esi*4] +
xor eax ds:dword_507520[edx*4] +
xor eax ds:dword_507120[ecx*4] +
cmp ebx edi +
jnz loc_49AF70  +
mov edx [esp+4+arg_4] +
and ebp 3 +
mov edi [esp+4+var_4] +
lea edx [edx+edi*4+4] +
test ebp ebp +
jz loc_49AFD9  +
lea ebx [edx+ebp] +
lea esi [esi+0] +
add edx 1 +
mov ecx eax +
xor cl [edx-1] +
shr eax 8 +
movzx ecx cl +
xor eax ds:dword_506D20[ecx*4] +
cmp edx ebx +
jnz loc_49AFC0  +
add esp 4 +
not eax  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 4 +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [esp+0Ch] +
mov edx [esp+8] +
mov eax [esp+4] +
jmp loc_49AC50  +
***
jmp loc_49B010  +
mov ecx [esp+0Ch] +
mov edx [esp+8] +
mov eax [esp+4] +
jmp loc_49AC50  +
***
push esi  +
push ebx  +
sub esp 84h +
mov edi [esp+84h+arg_8] +
lea edx [esp+84h+var_40] +
lea eax [esp+84h+var_20] +
lea esi [esi+0] +
xor ebp ebp +
add edx 2 +
mov [edx-2] bp +
cmp edx eax +
jnz loc_49B050  +
mov edx [esp+84h+arg_4] +
test edi edi +
lea ebx [edx+edi*2] +
jz loc_49B080  +
nop   +
lea esi [esi+0] +
movzx ecx word ptr [edx] +
add edx 2 +
add word ptr [esp+ecx*2+84h+var_40] 1 +
cmp edx ebx +
jnz loc_49B070  +
mov esi [esp+84h+arg_10] +
mov ecx 0Fh +
mov edx [esi] +
nop   +
cmp word ptr [esp+ecx*2+84h+var_40] 0 +
jnz loc_49B0ED  +
sub ecx 1 +
jnz loc_49B090  +
mov eax [esp+84h+arg_C] +
xor ebx ebx +
xor esi esi +
mov edi [esp+84h+arg_C] +
mov eax [eax] +
lea edx [eax+4] +
mov [edi] edx +
mov byte ptr [eax] 40h +
mov byte ptr [eax+1] 1 +
mov [eax+2] bx +
mov eax [edi] +
lea edx [eax+4] +
mov [edi] edx +
mov byte ptr [eax] 40h +
mov byte ptr [eax+1] 1 +
mov [eax+2] si +
mov eax [esp+84h+arg_10] +
mov dword ptr [eax] 1 +
xor eax eax +
add esp 84h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ecx edx +
cmovbe edx ecx +
test ecx ecx +
mov [esp+84h+var_64] ecx +
mov [esp+84h+var_84] edx +
jz loc_49B09D  +
cmp ecx 1 +
movzx esi word ptr [esp+84h+var_40+2] +
mov ebp 1 +
jbe loc_49B126  +
test si si +
jnz loc_49B126  +
mov edx [esp+84h+var_64] +
jmp loc_49B11F  +
cmp word ptr [esp+ebp*2+84h+var_40] 0 +
jnz loc_49B126  +
add ebp 1 +
cmp ebp edx +
jnz loc_49B117  +
lea edx [esp+84h+var_3C] +
movzx ecx si +
mov ebx 1 +
jmp loc_49B13A  +
movzx ecx word ptr [edx] +
add edx 2 +
add ebx ebx +
sub ebx ecx +
js loc_49B4AE  +
cmp eax edx +
jnz loc_49B134  +
test ebx ebx +
jz loc_49B166  +
cmp [esp+84h+var_64] 1 +
jnz loc_49B4AE  +
mov ecx [esp+84h+arg_0] +
test ecx ecx +
jz loc_49B4AE  +
xor edx edx +
xor ecx ecx +
mov word ptr [esp+84h+var_20+2] dx +
mov edx 1 +
jmp loc_49B17B  +
movzx esi word ptr [esp+edx*2+84h+var_40] +
add edx 1 +
add ecx esi +
cmp edx 0Fh +
mov [eax+edx*2] cx +
jnz loc_49B176  +
xor eax eax +
test edi edi +
jz loc_49B1C7  +
mov [esp+84h+var_80] ebp +
mov esi [esp+84h+arg_4] +
mov ebp [esp+84h+arg_14] +
movzx ecx word ptr [esi+eax*2] +
test cx cx +
jz loc_49B1BC  +
movzx edx word ptr [esp+ecx*2+84h+var_20] +
lea ebx [edx+1] +
mov word ptr [esp+ecx*2+84h+var_20] bx +
mov [ebp+edx*2+0] ax +
add eax 1 +
cmp eax edi +
jnz loc_49B1A1  +
mov ebp [esp+84h+var_80] +
mov ebx [esp+84h+arg_0] +
test ebx ebx +
jz loc_49B509  +
cmp [esp+84h+arg_0] 1 +
mov edi 0FFFFFFFFh +
mov eax 100h +
mov ebx offset unk_508D20 +
cmovnz eax edi +
mov edi offset unk_508D60 +
mov [esp+84h+var_58] eax +
mov eax offset unk_508B9E +
cmovnz eax ebx +
mov [esp+84h+var_48] eax +
mov eax offset unk_508BDE +
cmovnz eax edi +
mov [esp+84h+var_4C] eax +
mov eax [esp+84h+var_84] +
cmp ebp eax +
cmovnb eax ebp +
mov edi eax +
mov [esp+84h+var_68] eax +
mov eax [esp+84h+arg_C] +
mov ecx edi +
mov eax [eax] +
mov [esp+84h+var_6C] eax +
mov eax 1 +
shl eax cl +
cmp [esp+84h+arg_0] 1 +
setz [esp+84h+var_42]  +
cmp eax 353h +
ja loc_49B4FC  +
cmp [esp+84h+arg_0] 2 +
setz [esp+84h+var_41]  +
cmp eax 24Fh +
ja loc_49B4BE  +
mov ebx [esp+84h+arg_14] +
mov edi [esp+84h+var_68] +
mov [esp+84h+var_5C] eax +
sub eax 1 +
mov [esp+84h+var_84] ebp +
mov [esp+84h+var_70] ebx +
mov [esp+84h+var_54] 0FFFFFFFFh +
mov ebp edi +
mov [esp+84h+var_80] 0 +
mov [esp+84h+var_7C] 0 +
mov [esp+84h+var_50] eax +
lea esi [esi+0] +
mov eax [esp+84h+var_70] +
movzx edx byte ptr [esp+84h+var_84] +
sub dl byte ptr [esp+84h+var_7C] +
mov byte ptr [esp+84h+var_74] 0 +
movzx esi word ptr [eax] +
movzx eax si +
cmp [esp+84h+var_58] eax +
jg loc_49B2D7  +
jge loc_49B4F0  +
mov edi [esp+84h+var_48] +
movzx ebx byte ptr [edi+eax*2] +
mov byte ptr [esp+84h+var_74] bl +
mov ebx [esp+84h+var_4C] +
movzx esi word ptr [ebx+eax*2] +
mov ecx [esp+84h+var_84] +
mov edi 1 +
mov eax 1 +
sub ecx [esp+84h+var_7C] +
shl edi cl +
mov ecx ebp +
shl eax cl +
movzx ecx byte ptr [esp+84h+var_7C] +
mov ebx eax +
mov [esp+84h+var_60] eax +
lea eax ds:0[edi*4] +
mov [esp+84h+var_78] eax +
mov eax [esp+84h+var_80] +
neg [esp+84h+var_78]  +
shr eax cl +
mov ecx ebx +
add eax ebx +
mov ebx [esp+84h+var_6C] +
sub eax edi +
lea eax [ebx+eax*4+1] +
movzx ebx byte ptr [esp+84h+var_74] +
mov [esp+84h+var_74] ebp +
mov ebp [esp+84h+var_78] +
lea esi [esi+0] +
mov [eax-1] bl +
mov [eax] dl +
mov [eax+1] si +
add eax ebp +
sub ecx edi +
jnz loc_49B330  +
mov eax [esp+84h+var_84] +
mov ebp [esp+84h+var_74] +
lea ecx [eax-1] +
mov eax 1 +
shl eax cl +
mov ecx eax +
mov eax [esp+84h+var_80] +
test ecx eax +
jz loc_49B366  +
lea esi [esi+0] +
shr ecx 1 +
test ecx eax +
jnz loc_49B360  +
test ecx ecx +
jz loc_49B4E0  +
lea eax [ecx-1] +
and eax [esp+84h+var_80] +
add eax ecx +
mov [esp+84h+var_80] eax +
mov esi [esp+84h+var_84] +
movzx eax word ptr [esp+esi*2+84h+var_40] +
mov word ptr [esp+84h+var_78] ax +
sub eax 1 +
test ax ax +
mov word ptr [esp+esi*2+84h+var_40] ax +
jnz loc_49B3B7  +
mov eax [esp+84h+var_64] +
cmp esi eax +
jz loc_49B525  +
mov eax [esp+84h+var_70] +
mov ebx [esp+84h+arg_4] +
movzx eax word ptr [eax+2] +
movzx eax word ptr [ebx+eax*2] +
mov [esp+84h+var_84] eax +
mov eax [esp+84h+var_84] +
cmp [esp+84h+var_68] eax +
jnb loc_49B4A4  +
mov ebx [esp+84h+var_80] +
and ebx [esp+84h+var_50] +
cmp ebx [esp+84h+var_54] +
jz loc_49B4A4  +
mov edi [esp+84h+var_6C] +
mov edx 1 +
mov esi [esp+84h+var_60] +
mov eax [esp+84h+var_7C] +
lea edi [edi+esi*4] +
mov [esp+84h+var_6C] edi +
mov edi [esp+84h+var_84] +
test eax eax +
cmovz eax [esp+84h+var_68] +
mov ebp edi +
mov esi eax +
sub ebp eax +
mov ecx ebp +
shl edx cl +
mov ecx [esp+84h+var_64] +
mov [esp+84h+var_7C] eax +
cmp edi ecx +
jnb loc_49B439  +
movzx eax word ptr [esp+edi*2+84h+var_40] +
sub edx eax +
test edx edx +
jle loc_49B439  +
lea ecx [esp+esi*2+84h+var_40] +
mov edi [esp+84h+var_64] +
jmp loc_49B42D  +
movzx eax word ptr [ecx+ebp*2] +
sub edx eax +
test edx edx +
jle loc_49B439  +
add ebp 1 +
add edx edx +
lea eax [esi+ebp] +
cmp eax edi +
jb loc_49B423  +
mov eax 1 +
mov ecx ebp +
shl eax cl +
add [esp+84h+var_5C] eax +
cmp [esp+84h+var_5C] 353h +
ja loc_49B568  +
cmp [esp+84h+var_5C] 24Fh +
ja loc_49B578  +
mov eax [esp+84h+arg_C] +
mov ecx ebp +
lea edx ds:0[ebx*4] +
mov [esp+84h+var_54] ebx +
mov eax [eax] +
mov [eax+ebx*4] cl +
mov eax [esp+84h+arg_C] +
movzx ecx byte ptr [esp+84h+var_68] +
mov eax [eax] +
mov [eax+edx+1] cl +
mov eax [esp+84h+arg_C] +
mov ecx [eax] +
mov eax [esp+84h+var_6C] +
sub eax ecx +
sar eax 2 +
mov [ecx+edx+2] ax +
add [esp+84h+var_70] 2 +
jmp loc_49B2A0  +
add esp 84h +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+84h+var_41] 0 +
jz loc_49B265  +
add esp 84h +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+84h+var_80] 0 +
jmp loc_49B37B  +
xor esi esi +
mov byte ptr [esp+84h+var_74] 60h +
jmp loc_49B2D7  +
cmp [esp+84h+var_42] 0 +
jz loc_49B24D  +
jmp loc_49B4C9  +
mov eax [esp+84h+arg_14] +
mov [esp+84h+var_58] 13h +
mov [esp+84h+var_48] eax +
mov [esp+84h+var_4C] eax +
jmp loc_49B211  +
mov ecx [esp+84h+var_80] +
test ecx ecx +
jz loc_49B544  +
mov eax [esp+84h+var_6C] +
mov ebx [esp+84h+var_80] +
lea eax [eax+ebx*4] +
mov [eax+1] dl +
xor edx edx +
mov byte ptr [eax] 40h +
mov [eax+2] dx +
mov eax [esp+84h+var_5C] +
mov esi [esp+84h+arg_C] +
mov ebx [esp+84h+var_68] +
shl eax 2 +
add [esi] eax +
mov eax [esp+84h+arg_10] +
mov [eax] ebx +
xor eax eax +
jmp loc_49B0E2  +
cmp [esp+84h+var_42] 0 +
jz loc_49B454  +
jmp loc_49B4C9  +
cmp [esp+84h+var_41] 0 +
jz loc_49B462  +
jmp loc_49B4C9  +
***
push esi  +
push ebx  +
sub esp 44h +
mov eax [esp+44h+arg_0] +
mov eax [eax+1Ch] +
mov esi eax +
mov [esp+44h+var_38] eax +
mov eax [esp+44h+arg_0] +
mov eax [eax] +
sub eax 1 +
mov edi eax +
mov [esp+44h+var_44] eax +
mov eax [esp+44h+arg_0] +
mov eax [eax+4] +
lea eax [edi+eax-5] +
mov [esp+44h+var_2C] eax +
mov eax [esp+44h+arg_0] +
mov eax [eax+0Ch] +
lea edi [eax-1] +
mov eax [esp+44h+arg_0] +
mov eax [eax+10h] +
mov edx eax +
sub edx [esp+44h+arg_4] +
lea eax [edi+eax-101h] +
mov [esp+44h+var_34] eax +
mov eax esi +
lea ecx [edi+edx] +
mov edx 1 +
mov [esp+44h+var_14] ecx +
mov ecx [esi+28h] +
mov esi [esi+2Ch] +
mov [esp+44h+var_20] ecx +
mov [esp+44h+var_C] esi +
mov esi [eax+30h] +
mov [esp+44h+var_28] esi +
mov esi [eax+34h] +
mov [esp+44h+var_1C] esi +
mov esi eax +
mov eax [eax+38h] +
mov ebx [esi+4Ch] +
mov ebp [esi+3Ch] +
mov [esp+44h+var_40] ebx +
mov ebx [esi+50h] +
mov [esp+44h+var_24] ebx +
mov ecx [esi+54h] +
mov ebx edx +
shl ebx cl +
mov ecx [esi+58h] +
mov esi [esp+44h+var_1C] +
lea ebx [ebx-1] +
mov [esp+44h+var_30] ebx +
shl edx cl +
lea ebx [edx-1] +
mov [esp+44h+var_18] ebx +
lea ebx [esi-1] +
mov esi [esp+44h+var_28] +
add esi [esp+44h+var_20] +
mov [esp+44h+var_8] ebx +
mov [esp+44h+var_4] esi +
cmp ebp 0Eh +
ja loc_49B679  +
mov esi [esp+44h+var_44] +
mov ecx ebp +
movzx ebx byte ptr [esi+1] +
lea esi [esi+2] +
movzx edx byte ptr [esi] +
mov [esp+44h+var_44] esi +
shl ebx cl +
lea ecx [ebp+8] +
add ebp 10h +
shl edx cl +
add edx ebx +
add eax edx +
mov edx [esp+44h+var_30] +
mov esi [esp+44h+var_40] +
and edx eax +
lea ebx [esi+edx*4] +
movzx ecx byte ptr [ebx+1] +
movzx edx byte ptr [ebx] +
movzx ebx word ptr [ebx+2] +
movzx esi cl +
shr eax cl +
sub ebp esi +
test dl dl +
jz loc_49B6F9  +
test dl 10h +
jnz loc_49B774  +
test dl 40h +
jnz loc_49B945  +
mov [esp+44h+var_3C] edi +
mov edi [esp+44h+var_40] +
jmp loc_49B6CA  +
test dl 10h +
jnz loc_49B770  +
test dl 40h +
jnz loc_49B941  +
mov ecx edx +
mov esi 1 +
shl esi cl +
mov edx esi +
sub edx 1 +
and edx eax +
add edx ebx +
lea ebx [edi+edx*4] +
movzx ecx byte ptr [ebx+1] +
movzx edx byte ptr [ebx] +
movzx ebx word ptr [ebx+2] +
movzx esi cl +
shr eax cl +
sub ebp esi +
test dl dl +
jnz loc_49B6B8  +
mov edi [esp+44h+var_3C] +
mov [edi+1] bl +
add edi 1 +
cmp edi [esp+44h+var_34] +
jnb loc_49B712  +
mov ecx [esp+44h+var_2C] +
cmp [esp+44h+var_44] ecx +
jb loc_49B654  +
mov edx [esp+44h+var_44] +
mov ecx ebp +
mov ebx 1 +
shr ecx 3 +
mov esi [esp+44h+arg_0] +
sub edx ecx +
shl ecx 3 +
sub ebp ecx +
mov ecx ebp +
shl ebx cl +
sub ebx 1 +
and ebx eax +
lea eax [edx+1] +
mov [esi] eax +
lea eax [edi+1] +
mov [esi+0Ch] eax +
mov eax [esp+44h+var_2C] +
sub eax edx +
add eax 5 +
mov [esi+4] eax +
mov eax [esp+44h+var_34] +
sub eax edi +
add eax 101h +
mov [esi+10h] eax +
mov eax [esp+44h+var_38] +
mov [eax+38h] ebx +
mov [eax+3Ch] ebp +
add esp 44h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esp+44h+var_3C] +
and edx 0Fh +
movzx ecx bx +
movzx ebx dl +
test ebx ebx +
mov [esp+44h+var_3C] ecx +
jz loc_49B7B8  +
cmp ebx ebp +
jbe loc_49B7A2  +
mov ecx [esp+44h+var_44] +
movzx esi byte ptr [ecx+1] +
mov ecx ebp +
add ebp 8 +
shl esi cl +
mov ecx [esp+44h+var_44] +
add eax esi +
lea esi [ecx+1] +
mov [esp+44h+var_44] esi +
mov ecx edx +
mov esi 1 +
shl esi cl +
sub ebp ebx +
sub esi 1 +
and esi eax +
add [esp+44h+var_3C] esi +
shr eax cl +
cmp ebp 0Eh +
jbe loc_49B960  +
mov edx [esp+44h+var_18] +
mov ecx [esp+44h+var_24] +
and edx eax +
lea ebx [ecx+edx*4] +
movzx ecx byte ptr [ebx+1] +
movzx edx byte ptr [ebx] +
movzx ebx word ptr [ebx+2] +
movzx esi cl +
shr eax cl +
sub ebp esi +
test dl 10h +
jnz loc_49B831  +
test dl 40h +
jnz loc_49B9A6  +
mov [esp+44h+var_10] edi +
mov edi [esp+44h+var_24] +
jmp loc_49B801  +
test dl 40h +
jnz loc_49B9A2  +
mov ecx edx +
mov esi 1 +
shl esi cl +
mov edx esi +
sub edx 1 +
and edx eax +
add edx ebx +
lea ebx [edi+edx*4] +
movzx ecx byte ptr [ebx+1] +
movzx edx byte ptr [ebx] +
movzx ebx word ptr [ebx+2] +
movzx esi cl +
shr eax cl +
sub ebp esi +
test dl 10h +
jz loc_49B7F8  +
mov edi [esp+44h+var_10] +
movzx ecx bx +
mov ebx edx +
and ebx 0Fh +
movzx esi bl +
cmp esi ebp +
mov [esp+44h+var_10] ecx +
jbe loc_49B862  +
mov ecx [esp+44h+var_44] +
movzx edx byte ptr [ecx+1] +
mov ecx ebp +
shl edx cl +
lea ecx [ebp+8] +
add eax edx +
cmp esi ecx +
ja loc_49BAA1  +
add [esp+44h+var_44] 1 +
mov ebp ecx +
mov ecx ebx +
mov edx 1 +
shl edx cl +
sub ebp esi +
sub edx 1 +
and edx eax +
add edx [esp+44h+var_10] +
shr eax cl +
mov ecx edi +
sub ecx [esp+44h+var_14] +
mov [esp+44h+var_10] edx +
cmp [esp+44h+var_10] ecx +
mov edx ecx +
jbe loc_49B9C0  +
mov ecx [esp+44h+var_10] +
sub ecx edx +
cmp [esp+44h+var_C] ecx +
jnb loc_49B8AC  +
mov esi [esp+44h+var_38] +
mov esi [esi+1BC0h] +
test esi esi +
jnz loc_49BB05  +
mov ebx [esp+44h+var_28] +
test ebx ebx +
jnz loc_49BA25  +
mov edx [esp+44h+var_20] +
sub edx ecx +
add edx [esp+44h+var_8] +
cmp [esp+44h+var_3C] ecx +
jbe loc_49B8E5  +
sub [esp+44h+var_3C] ecx +
add ecx edi +
nop   +
add edx 1 +
movzx ebx byte ptr [edx] +
add edi 1 +
cmp edi ecx +
mov [edi] bl +
jnz loc_49B8D0  +
mov edx edi +
sub edx [esp+44h+var_10] +
cmp [esp+44h+var_3C] 2 +
mov ecx [esp+44h+var_3C] +
jbe loc_49B915  +
movzx ebx byte ptr [edx+1] +
add edx 3 +
sub ecx 3 +
add edi 3 +
mov [edi-2] bl +
movzx ebx byte ptr [edx-1] +
mov [edi-1] bl +
movzx ebx byte ptr [edx] +
cmp ecx 2 +
mov [edi] bl +
ja loc_49B8F0  +
mov [esp+44h+var_3C] ecx +
mov ecx [esp+44h+var_3C] +
test ecx ecx +
jz loc_49B6FF  +
movzx ecx byte ptr [edx+1] +
cmp [esp+44h+var_3C] 2 +
mov [edi+1] cl +
jnz loc_49BAF4  +
movzx edx byte ptr [edx+2] +
add edi 2 +
mov [edi] dl +
jmp loc_49B6FF  +
mov edi [esp+44h+var_3C] +
and edx 20h +
jz loc_49B988  +
mov esi [esp+44h+var_38] +
mov dword ptr [esi] 0Bh +
jmp loc_49B712  +
mov esi [esp+44h+var_44] +
mov ecx ebp +
movzx ebx byte ptr [esi+1] +
movzx edx byte ptr [esi+2] +
shl ebx cl +
lea ecx [ebp+8] +
add ebp 10h +
shl edx cl +
mov ecx esi +
add edx ebx +
add ecx 2 +
add eax edx +
mov [esp+44h+var_44] ecx +
jmp loc_49B7C1  +
mov ecx [esp+44h+arg_0] +
mov esi [esp+44h+var_38] +
mov dword ptr [ecx+18h] offset aInvalidLiter_1 +
mov dword ptr [esi] 1Dh +
jmp loc_49B712  +
mov edi [esp+44h+var_10] +
mov ecx [esp+44h+arg_0] +
mov dword ptr [ecx+18h] offset aInvalidDista_2 +
mov ecx [esp+44h+var_38] +
mov dword ptr [ecx] 1Dh +
jmp loc_49B712  +
mov edx edi +
mov ebx [esp+44h+var_3C] +
sub edx [esp+44h+var_10] +
mov [esp+44h+var_10] eax +
jmp loc_49B9D4  +
mov edi ecx +
mov edx esi +
movzx ecx byte ptr [edx+1] +
sub ebx 3 +
cmp ebx 2 +
lea esi [edx+3] +
mov [edi+1] cl +
movzx ecx byte ptr [edx+2] +
mov [edi+2] cl +
movzx eax byte ptr [edx+3] +
lea ecx [edi+3] +
mov [edi+3] al +
ja loc_49B9D0  +
test ebx ebx +
mov eax [esp+44h+var_10] +
mov [esp+44h+var_3C] ebx +
jz loc_49BABD  +
movzx ecx byte ptr [edx+4] +
cmp ebx 2 +
mov [edi+4] cl +
jnz loc_49BAFC  +
movzx edx byte ptr [edx+5] +
add edi 5 +
mov [edi] dl +
jmp loc_49B6FF  +
cmp [esp+44h+var_28] ecx +
jnb loc_49BAC4  +
mov edx [esp+44h+var_4] +
sub edx ecx +
sub ecx [esp+44h+var_28] +
add edx [esp+44h+var_8] +
cmp [esp+44h+var_3C] ecx +
jbe loc_49B8E5  +
sub [esp+44h+var_3C] ecx +
add ecx edi +
lea esi [esi+0] +
add edx 1 +
movzx ebx byte ptr [edx] +
add edi 1 +
cmp edi ecx +
mov [edi] bl +
jnz loc_49BA50  +
mov esi [esp+44h+var_3C] +
cmp [esp+44h+var_28] esi +
mov edx [esp+44h+var_8] +
jnb loc_49B8E5  +
mov edi [esp+44h+var_28] +
xor edx edx +
sub [esp+44h+var_3C] edi +
mov esi edi +
mov edi [esp+44h+var_1C] +
movzx ebx byte ptr [edi+edx] +
mov [ecx+edx+1] bl +
add edx 1 +
cmp edx esi +
jnz loc_49BA81  +
mov edi [esp+44h+var_28] +
add edi ecx +
mov edx edi +
sub edx [esp+44h+var_10] +
jmp loc_49B8E5  +
mov edx [esp+44h+var_44] +
add ebp 10h +
movzx edx byte ptr [edx+2] +
shl edx cl +
add eax edx +
mov edx [esp+44h+var_44] +
lea ecx [edx+2] +
mov [esp+44h+var_44] ecx +
jmp loc_49B862  +
mov edi ecx +
jmp loc_49B6FF  +
mov edx [esp+44h+var_28] +
sub edx ecx +
add edx [esp+44h+var_8] +
cmp [esp+44h+var_3C] ecx +
jbe loc_49B8E5  +
sub [esp+44h+var_3C] ecx +
add ecx edi +
nop   +
add edx 1 +
movzx ebx byte ptr [edx] +
add edi 1 +
cmp edi ecx +
mov [edi] bl +
jnz loc_49BAE0  +
jmp loc_49B8DF  +
add edi 1 +
jmp loc_49B6FF  +
add edi 4 +
nop   +
jmp loc_49B6FF  +
mov esi [esp+44h+arg_0] +
mov dword ptr [esi+18h] offset aInvalidDista_3 +
mov esi [esp+44h+var_38] +
mov dword ptr [esi] 1Dh +
jmp loc_49B712  +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 28h +
mov ebx [eax+6Ch] +
mov [esp+2Ch+var_2C] edx +
mov edx [esi+90h] +
mov esi [esi+2Ch] +
mov ebp [eax+38h] +
mov [esp+2Ch+var_10] eax +
mov edi [eax+7Ch] +
mov eax [eax+78h] +
mov [esp+2Ch+var_14] edx +
lea edx [esi-106h] +
lea ecx [ebp+ebx+0] +
cmp ebx edx +
mov [esp+2Ch+var_18] ecx +
mov [esp+2Ch+var_28] 0 +
mov ecx eax +
jbe loc_49BB73  +
lea edx [ebx+106h] +
mov [esp+2Ch+var_28] edx +
sub [esp+2Ch+var_28] esi +
mov esi [esp+2Ch+var_10] +
lea ebx [ebp+ebx+102h] +
mov [esp+2Ch+var_8] ebx +
mov edx [esi+40h] +
mov [esp+2Ch+var_24] edx +
mov edx [esi+34h] +
mov [esp+2Ch+var_20] edx +
mov edx [esp+2Ch+var_18] +
movzx ebx byte ptr [edx+eax-1] +
mov [esp+2Ch+var_1A] bl +
movzx ebx byte ptr [edx+eax] +
mov edx [esp+2Ch+var_2C] +
mov [esp+2Ch+var_1C] bl +
mov ebx edi +
shr ebx 2 +
cmp eax [esi+8Ch] +
mov eax [esi+74h] +
cmovnb edi ebx +
mov ebx [esp+2Ch+var_14] +
mov [esp+2Ch+var_C] eax +
cmp ebx eax +
cmova ebx eax +
mov [esp+2Ch+var_14] ebx +
jmp loc_49BBEF  +
mov eax [esp+2Ch+var_24] +
and edx [esp+2Ch+var_20] +
movzx edx word ptr [eax+edx*2] +
cmp [esp+2Ch+var_28] edx +
jnb loc_49BD10  +
sub edi 1 +
jz loc_49BD10  +
lea eax [ebp+edx+0] +
mov esi ecx +
movzx ebx byte ptr [eax+ecx] +
mov [esp+2Ch+var_2C] eax +
movzx eax [esp+2Ch+var_1C] +
mov [esp+2Ch+var_1B] bl +
cmp bl al +
jnz loc_49BBD0  +
mov eax [esp+2Ch+var_2C] +
movzx ebx byte ptr [eax+ecx-1] +
cmp bl [esp+2Ch+var_1A] +
mov [esp+2Ch+var_19] bl +
jnz loc_49BBD0  +
mov ebx [esp+2Ch+var_18] +
movzx ebx byte ptr [ebx] +
cmp [eax] bl +
jnz loc_49BBD0  +
mov ebx [esp+2Ch+var_18] +
movzx ebx byte ptr [ebx+1] +
cmp [eax+1] bl +
jnz loc_49BBD0  +
mov esi [esp+2Ch+var_18] +
add eax 2 +
movzx ebx [esp+2Ch+var_1B] +
mov [esp+2Ch+var_2C] edx +
add esi 2 +
jmp loc_49BCB0  +
movzx edx byte ptr [eax+2] +
cmp [esi+2] dl +
jnz loc_49BD8E  +
movzx edx byte ptr [eax+3] +
cmp [esi+3] dl +
jnz loc_49BD7F  +
movzx edx byte ptr [eax+4] +
cmp [esi+4] dl +
jnz loc_49BD70  +
movzx edx byte ptr [eax+5] +
cmp [esi+5] dl +
jnz loc_49BD61  +
movzx edx byte ptr [eax+6] +
cmp [esi+6] dl +
jnz loc_49BD52  +
movzx edx byte ptr [eax+7] +
cmp [esi+7] dl +
jnz loc_49BD43  +
add eax 8 +
add esi 8 +
movzx edx byte ptr [eax] +
cmp [esi] dl +
jnz loc_49BD3A  +
cmp [esp+2Ch+var_8] esi +
jbe loc_49BD3A  +
movzx edx byte ptr [eax+1] +
cmp [esi+1] dl +
jz loc_49BC47  +
mov edx [esp+2Ch+var_2C] +
add esi 1 +
mov [esp+2Ch+var_1B] bl +
mov eax [esp+2Ch+var_8] +
sub esi eax +
sub eax 102h +
add esi 102h +
cmp ecx esi +
mov [esp+2Ch+var_18] eax +
jge loc_49BD21  +
mov eax [esp+2Ch+var_10] +
cmp [esp+2Ch+var_14] esi +
mov [eax+70h] edx +
jle loc_49BD10  +
mov eax [esp+2Ch+var_18] +
mov ecx esi +
movzx eax byte ptr [eax+esi-1] +
mov [esp+2Ch+var_1A] al +
mov eax [esp+2Ch+var_8] +
movzx eax byte ptr [eax+esi-102h] +
mov [esp+2Ch+var_1C] al +
jmp loc_49BBD0  +
mov eax [esp+2Ch+var_C] +
cmp esi eax +
cmovbe eax esi +
add esp 28h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax [esp+2Ch+var_1B] +
mov esi ecx +
mov [esp+2Ch+var_1C] al +
movzx eax [esp+2Ch+var_19] +
mov [esp+2Ch+var_1A] al +
jmp loc_49BBD0  +
mov [esp+2Ch+var_1B] bl +
mov edx [esp+2Ch+var_2C] +
jmp loc_49BCC3  +
mov [esp+2Ch+var_1B] bl +
mov edx [esp+2Ch+var_2C] +
add esi 7 +
jmp loc_49BCC3  +
mov [esp+2Ch+var_1B] bl +
mov edx [esp+2Ch+var_2C] +
add esi 6 +
jmp loc_49BCC3  +
mov [esp+2Ch+var_1B] bl +
mov edx [esp+2Ch+var_2C] +
add esi 5 +
jmp loc_49BCC3  +
mov [esp+2Ch+var_1B] bl +
mov edx [esp+2Ch+var_2C] +
add esi 4 +
jmp loc_49BCC3  +
mov [esp+2Ch+var_1B] bl +
mov edx [esp+2Ch+var_2C] +
add esi 3 +
jmp loc_49BCC3  +
mov [esp+2Ch+var_1B] bl +
mov edx [esp+2Ch+var_2C] +
add esi 2 +
jmp loc_49BCC3  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [eax+2Ch] +
mov edi [ebp+74h] +
lea ecx [eax+eax] +
mov edx eax +
mov [esp+48h+var_20] eax +
sub eax 106h +
mov [esp+48h+var_1C] ecx +
mov [esp+48h+var_24] eax +
mov ebx [ebp+3Ch] +
mov eax [ebp+6Ch] +
add edx [esp+48h+var_24] +
sub ebx edi +
sub ebx eax +
cmp eax edx +
jnb loc_49BF20  +
mov esi [ebp+0] +
mov edi [esi+4] +
test edi edi +
jz loc_49BFB0  +
cmp ebx edi +
mov edx [ebp+38h] +
mov ecx [ebp+6Ch] +
mov eax [ebp+74h] +
jnb loc_49BED5  +
test ebx ebx +
jnz loc_49C074  +
xor edi edi +
mov esi [ebp+16B4h] +
add edi eax +
mov [ebp+74h] edi +
lea eax [edi+esi] +
cmp eax 2 +
jbe loc_49BEB3  +
mov ecx [ebp+58h] +
mov edx [ebp+6Ch] +
mov eax [ebp+38h] +
mov [esp+48h+var_34] ecx +
mov ecx [ebp+54h] +
sub edx esi +
movzx ebx byte ptr [eax+edx] +
mov [esp+48h+var_2C] eax +
mov [esp+48h+var_30] ecx +
mov [esp+48h+var_28] ecx +
movzx ecx byte ptr [esp+48h+var_34] +
mov [ebp+48h] ebx +
movzx eax byte ptr [eax+edx+1] +
shl ebx cl +
xor eax ebx +
and eax [esp+48h+var_30] +
mov [esp+48h+var_30] edi +
mov [ebp+48h] eax +
jmp loc_49BEAB  +
mov eax [esp+48h+var_2C] +
sub esi 1 +
mov ebx [ebp+48h] +
movzx ecx byte ptr [esp+48h+var_34] +
movzx eax byte ptr [eax+edx+2] +
shl ebx cl +
mov ecx [ebp+40h] +
xor eax ebx +
mov ebx [ebp+44h] +
and eax [esp+48h+var_28] +
mov [ebp+48h] eax +
lea eax [ebx+eax*2] +
mov ebx [ebp+34h] +
movzx edi word ptr [eax] +
and ebx edx +
mov [ecx+ebx*2] di +
mov [eax] dx +
mov eax [esp+48h+var_30] +
add edx 1 +
mov [ebp+16B4h] esi +
add eax esi +
cmp eax 2 +
jbe loc_49BEAF  +
test esi esi +
jnz loc_49BE60  +
mov edi [esp+48h+var_30] +
cmp edi 105h +
ja loc_49BFB0  +
mov eax [ebp+0] +
mov eax [eax+4] +
test eax eax +
jz loc_49BFB0  +
mov edx [ebp+2Ch] +
jmp loc_49BDC5  +
mov [esp+48h+var_34] 0 +
add eax ecx +
lea ebx [edx+eax] +
mov eax [esp+48h+var_34] +
mov [esi+4] eax +
mov eax [esi] +
mov [esp+48h+var_40] edi +
mov [esp+48h+var_48] ebx +
mov [esp+48h+var_44] eax +
call memcpy  +
mov eax [esi+1Ch] +
mov eax [eax+18h] +
cmp eax 1 +
jz loc_49C000  +
cmp eax 2 +
jz loc_49C01B  +
add [esi] edi +
add [esi+8] edi +
mov eax [ebp+74h] +
jmp loc_49BE04  +
mov esi [esp+48h+var_20] +
mov eax [ebp+38h] +
mov [esp+48h+var_40] esi +
lea edx [eax+esi] +
mov [esp+48h+var_44] edx +
mov [esp+48h+var_48] eax +
call memcpy  +
mov ecx esi +
mov eax [ebp+44h] +
sub [ebp+70h] esi +
sub [ebp+6Ch] esi +
sub [ebp+5Ch] esi +
mov esi [ebp+4Ch] +
mov [esp+48h+var_34] ebx +
mov ebx ecx +
lea edx [eax+esi*2] +
sub edx 2 +
movzx ecx word ptr [edx] +
xor eax eax +
mov edi ecx +
sub edi ebx +
cmp ebx ecx +
cmovbe eax edi +
sub esi 1 +
mov [edx] ax +
jnz loc_49BF54  +
mov eax [esp+48h+var_20] +
mov edx [esp+48h+var_1C] +
add edx [ebp+40h] +
mov esi eax +
mov ebx eax +
lea esi [esi+0] +
sub edx 2 +
movzx ecx word ptr [edx] +
xor eax eax +
mov edi ecx +
sub edi ebx +
cmp ebx ecx +
cmovbe eax edi +
sub esi 1 +
mov [edx] ax +
jnz loc_49BF80  +
mov esi [ebp+0] +
mov ebx [esp+48h+var_34] +
add ebx [esp+48h+var_20] +
mov edi [esi+4] +
test edi edi +
jnz loc_49BDE9  +
nop   +
mov eax [ebp+16C0h] +
mov edx [ebp+3Ch] +
cmp eax edx +
jnb loc_49BFF8  +
mov ebx [ebp+74h] +
add ebx [ebp+6Ch] +
cmp eax ebx +
jnb loc_49C036  +
mov eax [ebp+38h] +
sub edx ebx +
mov esi 102h +
cmp edx 102h +
cmovbe esi edx +
mov [esp+48h+var_40] esi +
add eax ebx +
add ebx esi +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] eax +
call memset  +
mov [ebp+16C0h] ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esi+30h] +
mov [esp+48h+var_40] edi +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] eax +
call sub_49A810  +
mov [esi+30h] eax +
jmp loc_49BF13  +
mov eax [esi+30h] +
mov [esp+48h+var_40] edi +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] eax +
call sub_49AD40  +
mov [esi+30h] eax +
jmp loc_49BF13  +
lea ecx [ebx+102h] +
cmp eax ecx +
jnb loc_49BFF8  +
sub ebx eax +
sub edx eax +
add ebx 102h +
cmp ebx edx +
cmova ebx edx +
add eax [ebp+38h] +
mov [esp+48h+var_40] ebx +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] eax +
call memset  +
add [ebp+16C0h] ebx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
sub edi ebx +
mov [esp+48h+var_34] edi +
mov edi ebx +
jmp loc_49BEDD  +
***
jmp sub_49C090  +
***
push ebx  +
mov ebx eax +
sub esp 10h +
mov esi [eax+1Ch] +
mov [esp+10h+var_10] esi +
call sub_49FDC0  +
mov eax [esi+14h] +
mov edi [ebx+10h] +
cmp edi eax +
cmova edi eax +
test edi edi +
jnz loc_49C0C0  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [esi+10h] +
mov eax [ebx+0Ch] +
mov [esp+10h+var_8] edi +
mov [esp+10h+var_C] edx +
mov [esp+10h+var_10] eax +
call memcpy  +
add [ebx+0Ch] edi +
add [esi+10h] edi +
add [ebx+14h] edi +
sub [ebx+10h] edi +
sub [esi+14h] edi +
jnz loc_49C0B2  +
mov eax [esi+8] +
mov [esi+10h] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov edi [esp+50h] +
mov ebp [edi+74h] +
nop   +
cmp ebp 105h +
jbe loc_49C37E  +
mov ebx [edi+6Ch] +
mov eax [edi+38h] +
mov ecx [edi+58h] +
mov edx [edi+48h] +
mov esi [edi+34h] +
movzx eax byte ptr [eax+ebx+2] +
shl edx cl +
mov ecx [edi+40h] +
and esi ebx +
xor eax edx +
mov edx [edi+44h] +
and eax [edi+54h] +
mov [edi+48h] eax +
lea eax [edx+eax*2] +
movzx edx word ptr [eax] +
mov [ecx+esi*2] dx +
mov ecx [edi+70h] +
test edx edx +
mov [eax] bx +
mov eax [edi+60h] +
mov dword ptr [edi+60h] 2 +
mov [edi+64h] ecx +
mov [edi+78h] eax +
jz loc_49C183  +
cmp eax [edi+80h] +
jnb loc_49C183  +
mov ecx [edi+2Ch] +
mov esi ebx +
sub esi edx +
sub ecx 106h +
cmp esi ecx +
jbe loc_49C440  +
cmp eax 2 +
jbe loc_49C307  +
cmp [edi+60h] eax +
ja loc_49C307  +
mov edx [edi+74h] +
sub eax 3 +
mov ecx [edi+16A4h] +
lea ebp [ebx+edx-3] +
mov edx [edi+16A0h] +
sub bx [edi+64h] +
lea esi [ebx-1] +
sub ebx 2 +
mov [ecx+edx*2] si +
mov ecx [edi+1698h] +
lea esi [edx+1] +
mov [edi+16A0h] esi +
mov [ecx+edx] al +
movzx eax al +
movzx eax ds:byte_5090A0[eax] +
add word ptr [edi+eax*4+498h] 1 +
cmp bx 0FFh +
ja loc_49C3F0  +
movzx ebx bx +
movzx eax ds:byte_5091A0[ebx] +
add word ptr [edi+eax*4+988h] 1 +
mov eax [edi+16A0h] +
mov esi [edi+74h] +
mov [esp+18h] ebp +
mov [esp+20h] eax +
mov eax [edi+169Ch] +
add esi 1 +
mov [esp+1Ch] esi +
sub eax 1 +
mov [esp+24h] eax +
mov eax [edi+78h] +
sub [esp+1Ch] eax +
mov esi [esp+1Ch] +
lea ebx [eax-2] +
mov [esp+28h] eax +
mov eax [edi+6Ch] +
mov [edi+74h] esi +
mov [edi+78h] ebx +
mov [esp+2Ch] eax +
mov edx eax +
jmp loc_49C246  +
mov edx eax +
lea eax [edx+1] +
cmp [esp+18h] eax +
mov [edi+6Ch] eax +
jb loc_49C282  +
mov ecx [edi+38h] +
mov esi [edi+48h] +
movzx edx byte ptr [ecx+edx+3] +
mov ecx [edi+58h] +
shl esi cl +
mov ecx [edi+44h] +
xor edx esi +
mov esi [edi+34h] +
and edx [edi+54h] +
mov [edi+48h] edx +
lea edx [ecx+edx*2] +
mov ecx [edi+40h] +
movzx ebp word ptr [edx] +
and esi eax +
mov [ecx+esi*2] bp +
mov [edx] ax +
sub ebx 1 +
test ebx ebx +
mov [edi+78h] ebx +
jnz loc_49C244  +
mov esi [esp+2Ch] +
mov eax [esp+28h] +
mov dword ptr [edi+68h] 0 +
mov ebp [esp+1Ch] +
mov dword ptr [edi+60h] 2 +
lea eax [eax+esi-1] +
mov esi [esp+24h] +
cmp [esp+20h] esi +
mov [edi+6Ch] eax +
jnz loc_49C110  +
mov edx [edi+5Ch] +
xor ecx ecx +
sub eax edx +
test edx edx +
js loc_49C2CB  +
mov ecx [edi+38h] +
add ecx edx +
mov [esp+8] eax +
mov [esp+4] ecx +
mov dword ptr [esp+0Ch] 0 +
mov [esp] edi +
call sub_49FEC0  +
mov eax [edi+6Ch] +
mov [edi+5Ch] eax +
mov eax [edi] +
call sub_49C090  +
mov eax [edi] +
mov ebp [eax+10h] +
test ebp ebp +
jnz loc_49C10B  +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi [edi+68h] +
test esi esi +
jz loc_49C3D0  +
mov eax [edi+38h] +
mov ecx [edi+16A4h] +
movzx edx byte ptr [eax+ebx-1] +
xor ebx ebx +
mov eax [edi+16A0h] +
mov [ecx+eax*2] bx +
mov ecx [edi+1698h] +
lea ebx [eax+1] +
mov [edi+16A0h] ebx +
mov [ecx+eax] dl +
add word ptr [edi+edx*4+94h] 1 +
mov eax [edi+169Ch] +
sub eax 1 +
cmp [edi+16A0h] eax +
jz loc_49C403  +
mov eax [edi+74h] +
add dword ptr [edi+6Ch] 1 +
lea ebp [eax-1] +
mov eax [edi] +
mov [edi+74h] ebp +
mov eax [eax+10h] +
test eax eax +
jz loc_49C2FD  +
cmp ebp 105h +
ja loc_49C11C  +
mov eax edi +
call sub_49BDA0  +
mov eax [edi+74h] +
cmp eax 105h +
ja loc_49C11C  +
mov edx [esp+54h] +
test edx edx +
jz loc_49C2FD  +
test eax eax +
jz loc_49C485  +
cmp eax 2 +
ja loc_49C11C  +
mov eax [edi+60h] +
mov edx [edi+70h] +
mov dword ptr [edi+60h] 2 +
mov ebx [edi+6Ch] +
mov [edi+78h] eax +
mov [edi+64h] edx +
jmp loc_49C183  +
***
mov eax [edi+74h] +
add ebx 1 +
mov dword ptr [edi+68h] 1 +
mov [edi+6Ch] ebx +
lea ebp [eax-1] +
mov [edi+74h] ebp +
jmp loc_49C110  +
***
shr bx 7 +
movzx ebx bx +
movzx eax ds:byte_5092A0[ebx] +
jmp loc_49C1F3  +
***
mov edx [edi+5Ch] +
xor ecx ecx +
mov eax [edi+6Ch] +
sub eax edx +
test edx edx +
js loc_49C416  +
mov ecx [edi+38h] +
add ecx edx +
mov [esp+8] eax +
mov dword ptr [esp+0Ch] 0 +
mov [esp+4] ecx +
mov [esp] edi +
call sub_49FEC0  +
mov eax [edi+6Ch] +
mov [edi+5Ch] eax +
mov eax [edi] +
call sub_49C090  +
jmp loc_49C35C  +
***
mov eax edi +
call sub_49BB20  +
cmp eax 5 +
mov [edi+60h] eax +
ja loc_49C45D  +
cmp dword ptr [edi+88h] 1 +
jz loc_49C468  +
cmp eax 3 +
jz loc_49C474  +
mov ebx [edi+6Ch] +
mov eax [edi+78h] +
jmp loc_49C183  +
***
mov ebx [edi+6Ch] +
mov dword ptr [edi+60h] 2 +
jmp loc_49C460  +
***
mov ebx [edi+6Ch] +
mov eax ebx +
sub eax [edi+70h] +
cmp eax 1000h +
jbe loc_49C460  +
jmp loc_49C46B  +
***
mov esi [edi+68h] +
test esi esi +
jnz loc_49C508  +
mov edx [edi+6Ch] +
mov eax 2 +
cmp edx 2 +
cmovbe eax edx +
cmp dword ptr [esp+54h] 4 +
mov [edi+16B4h] eax +
jz loc_49C54C  +
mov ecx [edi+16A0h] +
mov eax 1 +
test ecx ecx +
jz loc_49C2FF  +
mov eax [edi+5Ch] +
xor ecx ecx +
sub edx eax +
test eax eax +
js loc_49C4CE  +
add eax [edi+38h] +
mov ecx eax +
mov [esp+8] edx +
mov [esp+4] ecx +
mov [esp] edi +
mov dword ptr [esp+0Ch] 0 +
call sub_49FEC0  +
mov eax [edi+6Ch] +
mov [edi+5Ch] eax +
mov eax [edi] +
call sub_49C090  +
mov eax [edi] +
mov eax [eax+10h] +
test eax eax +
setnz al  +
add esp 3Ch +
pop ebx  +
movzx eax al +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [edi+6Ch] +
xor ebx ebx +
mov edx [edi+38h] +
mov ecx [edi+16A4h] +
movzx edx byte ptr [edx+eax-1] +
mov eax [edi+16A0h] +
mov [ecx+eax*2] bx +
mov ecx [edi+1698h] +
lea ebx [eax+1] +
mov [edi+16A0h] ebx +
mov [ecx+eax] dl +
add word ptr [edi+edx*4+94h] 1 +
mov dword ptr [edi+68h] 0 +
jmp loc_49C48C  +
***
mov eax [edi+5Ch] +
xor ecx ecx +
sub edx eax +
test eax eax +
js loc_49C55C  +
add eax [edi+38h] +
mov ecx eax +
mov [esp+8] edx +
mov [esp+4] ecx +
mov [esp] edi +
mov dword ptr [esp+0Ch] 1 +
call sub_49FEC0  +
mov eax [edi+6Ch] +
mov [edi+5Ch] eax +
mov eax [edi] +
call sub_49C090  +
mov eax [edi] +
cmp dword ptr [eax+10h] 1 +
sbb eax eax +
add esp 3Ch +
pop ebx  +
add eax 3 +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov edi [esp+60h] +
nop   +
lea esi [esi+0] +
cmp dword ptr [edi+74h] 105h +
jbe loc_49C840  +
mov ebx [edi+6Ch] +
mov eax [edi+38h] +
mov ecx [edi+58h] +
mov edx [edi+48h] +
mov esi [edi+34h] +
movzx eax byte ptr [eax+ebx+2] +
shl edx cl +
mov ecx [edi+40h] +
and esi ebx +
xor eax edx +
mov edx [edi+44h] +
and eax [edi+54h] +
mov [edi+48h] eax +
lea eax [edx+eax*2] +
movzx edx word ptr [eax] +
test edx edx +
mov [ecx+esi*2] dx +
mov [eax] bx +
jz loc_49C608  +
mov eax [edi+2Ch] +
mov ecx ebx +
sub ecx edx +
sub eax 106h +
cmp ecx eax +
jbe loc_49C890  +
mov eax [edi+60h] +
cmp eax 2 +
jbe loc_49C7B0  +
mov edx [edi+16A0h] +
sub eax 3 +
mov ecx [edi+16A4h] +
sub bx [edi+70h] +
lea esi [edx+1] +
mov [ecx+edx*2] bx +
mov ecx [edi+1698h] +
sub ebx 1 +
mov [edi+16A0h] esi +
mov [ecx+edx] al +
movzx eax al +
movzx eax ds:byte_5090A0[eax] +
add word ptr [edi+eax*4+498h] 1 +
cmp bx 0FFh +
ja loc_49C876  +
movzx ebx bx +
movzx eax ds:byte_5091A0[ebx] +
add word ptr [edi+eax*4+988h] 1 +
mov eax [edi+169Ch] +
mov esi [edi+60h] +
sub eax 1 +
cmp [edi+16A0h] eax +
setz al  +
movzx eax al +
mov [esp+1Ch] eax +
mov eax [edi+74h] +
sub eax esi +
cmp esi [edi+80h] +
mov [edi+74h] eax +
ja loc_49C810  +
cmp eax 2 +
jbe loc_49C810  +
mov ecx [edi+40h] +
lea ebx [esi-1] +
mov eax [edi+6Ch] +
mov edx [edi+54h] +
mov [edi+60h] ebx +
mov ebp [edi+48h] +
mov [esp+20h] ecx +
mov ecx [edi+34h] +
mov [esp+38h] eax +
mov [esp+30h] edx +
lea edx [eax+1] +
mov [esp+3Ch] esi +
mov [esp+24h] ecx +
mov ecx [edi+44h] +
mov [esp+18h] ebx +
mov [esp+28h] ecx +
mov ecx [edi+38h] +
mov [esp+2Ch] ecx +
mov ecx [edi+58h] +
mov [esp+34h] ecx +
jmp loc_49C6F7  +
mov [esp+18h] ebx +
mov ebp eax +
mov eax [esp+2Ch] +
movzx ecx byte ptr [esp+34h] +
mov [edi+6Ch] edx +
mov esi [esp+28h] +
movzx eax byte ptr [eax+edx+2] +
shl ebp cl +
mov ecx [esp+20h] +
xor eax ebp +
mov ebp [esp+24h] +
and eax [esp+30h] +
lea esi [esi+eax*2] +
and ebp edx +
movzx ebx word ptr [esi] +
mov [edi+48h] eax +
mov [ecx+ebp*2] bx +
mov ebx [esp+18h] +
mov [esi] dx +
add edx 1 +
sub ebx 1 +
test ebx ebx +
mov [edi+60h] ebx +
jnz loc_49C6F1  +
mov esi [esp+3Ch] +
mov eax [esp+38h] +
add eax esi +
mov [edi+6Ch] eax +
lea esi [esi+0] +
mov esi [esp+1Ch] +
test esi esi +
jz loc_49C5B0  +
mov edx [edi+5Ch] +
xor ecx ecx +
mov eax [edi+6Ch] +
sub eax edx +
test edx edx +
js loc_49C76F  +
mov ecx [edi+38h] +
add ecx edx +
mov [esp+8] eax +
mov [esp+4] ecx +
mov dword ptr [esp+0Ch] 0 +
mov [esp] edi +
call sub_49FEC0  +
mov eax [edi+6Ch] +
mov [edi+5Ch] eax +
mov eax [edi] +
call sub_49C090  +
mov eax [edi] +
mov ebx [eax+10h] +
test ebx ebx +
jnz loc_49C5B0  +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [edi+38h] +
xor ebp ebp +
mov ecx [edi+16A4h] +
movzx edx byte ptr [eax+ebx] +
mov eax [edi+16A0h] +
mov [ecx+eax*2] bp +
mov ecx [edi+1698h] +
lea ebx [eax+1] +
mov [edi+16A0h] ebx +
mov [ecx+eax] dl +
add word ptr [edi+edx*4+94h] 1 +
mov eax [edi+169Ch] +
sub eax 1 +
cmp [edi+16A0h] eax +
setz al  +
movzx eax al +
mov [esp+1Ch] eax +
sub dword ptr [edi+74h] 1 +
add dword ptr [edi+6Ch] 1 +
jmp loc_49C750  +
***
mov eax [edi+6Ch] +
mov ecx [edi+38h] +
mov dword ptr [edi+60h] 0 +
add eax esi +
mov [edi+6Ch] eax +
movzx edx byte ptr [ecx+eax] +
mov [edi+48h] edx +
movzx eax byte ptr [ecx+eax+1] +
mov ecx [edi+58h] +
shl edx cl +
xor eax edx +
and eax [edi+54h] +
mov [edi+48h] eax +
jmp loc_49C750  +
***
mov eax edi +
call sub_49BDA0  +
mov eax [edi+74h] +
cmp eax 105h +
ja loc_49C5BD  +
mov edx [esp+64h] +
test edx edx +
jz loc_49C7A1  +
test eax eax +
jz loc_49C8A2  +
cmp eax 2 +
ja loc_49C5BD  +
mov ebx [edi+6Ch] +
jmp loc_49C608  +
***
shr bx 7 +
movzx ebx bx +
movzx eax ds:byte_5092A0[ebx] +
jmp loc_49C668  +
***
mov eax edi +
call sub_49BB20  +
mov ebx [edi+6Ch] +
mov [edi+60h] eax +
jmp loc_49C60B  +
***
mov edx [edi+6Ch] +
mov eax 2 +
cmp edx 2 +
cmovbe eax edx +
cmp dword ptr [esp+64h] 4 +
mov [edi+16B4h] eax +
jz loc_49C916  +
mov ecx [edi+16A0h] +
mov eax 1 +
test ecx ecx +
jz loc_49C90E  +
mov eax [edi+5Ch] +
xor ecx ecx +
sub edx eax +
test eax eax +
js loc_49C8DC  +
add eax [edi+38h] +
mov ecx eax +
mov [esp+8] edx +
mov [esp+4] ecx +
mov dword ptr [esp+0Ch] 0 +
mov [esp] edi +
call sub_49FEC0  +
mov eax [edi+6Ch] +
mov [edi+5Ch] eax +
mov eax [edi] +
call sub_49C090  +
mov eax [edi] +
mov eax [eax+10h] +
test eax eax +
setnz al  +
movzx eax al +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [edi+5Ch] +
xor ecx ecx +
sub edx eax +
test eax eax +
js loc_49C926  +
add eax [edi+38h] +
mov ecx eax +
mov [esp+8] edx +
mov [esp+4] ecx +
mov [esp] edi +
mov dword ptr [esp+0Ch] 1 +
call sub_49FEC0  +
mov eax [edi+6Ch] +
mov [edi+5Ch] eax +
mov eax [edi] +
call sub_49C090  +
mov eax [edi] +
cmp dword ptr [eax+10h] 1 +
sbb eax eax +
add esp 4Ch +
pop ebx  +
add eax 3 +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
sub esp 10h +
mov ebx [esp+10h+arg_0] +
mov edi [esp+10h+arg_4] +
mov eax [ebx+0Ch] +
lea esi [eax-5] +
mov eax 0FFFFh +
cmp esi 0FFFFh +
cmovnb esi eax +
jmp loc_49C9FF  +
add edx [ebx+6Ch] +
mov eax [ebx+5Ch] +
mov dword ptr [ebx+74h] 0 +
test edx edx +
mov [ebx+6Ch] edx +
lea ecx [esi+eax] +
jz loc_49C99F  +
cmp edx ecx +
jb loc_49C9EC  +
sub edx ecx +
mov [ebx+74h] edx +
xor edx edx +
mov [ebx+6Ch] ecx +
sub ecx eax +
test eax eax +
js loc_49C9B4  +
add eax [ebx+38h] +
mov edx eax +
mov [esp+10h+var_8] ecx +
mov [esp+10h+var_C] edx +
mov [esp+10h+var_4] 0 +
mov [esp+10h+var_10] ebx +
call sub_49FEC0  +
mov eax [ebx+6Ch] +
mov [ebx+5Ch] eax +
mov eax [ebx] +
call sub_49C090  +
mov eax [ebx] +
mov ecx [eax+10h] +
test ecx ecx +
jz loc_49CAD0  +
mov edx [ebx+6Ch] +
mov eax [ebx+5Ch] +
mov ecx [ebx+2Ch] +
sub edx eax +
sub ecx 106h +
cmp edx ecx +
jnb loc_49CA90  +
mov edx [ebx+74h] +
cmp edx 1 +
ja loc_49C984  +
mov eax ebx +
call sub_49BDA0  +
mov edx [ebx+74h] +
test edx edx +
jnz loc_49C984  +
test edi edi +
jz loc_49CAD0  +
cmp edi 4 +
mov dword ptr [ebx+16B4h] 0 +
jz loc_49CAD9  +
mov ecx [ebx+6Ch] +
mov eax 1 +
mov edx [ebx+5Ch] +
cmp ecx edx +
jle loc_49CAD2  +
sub ecx edx +
xor al al +
test edx edx +
js loc_49CA58  +
mov eax [ebx+38h] +
add eax edx +
mov [esp+10h+var_8] ecx +
mov [esp+10h+var_C] eax +
mov [esp+10h+var_4] 0 +
mov [esp+10h+var_10] ebx +
call sub_49FEC0  +
mov eax [ebx+6Ch] +
mov [ebx+5Ch] eax +
mov eax [ebx] +
call sub_49C090  +
mov eax [ebx] +
mov eax [eax+10h] +
test eax eax +
setnz al  +
movzx eax al +
jmp loc_49CAD2  +
xor ecx ecx +
test eax eax +
js loc_49CA9B  +
add eax [ebx+38h] +
mov ecx eax +
mov [esp+10h+var_8] edx +
mov [esp+10h+var_C] ecx +
mov [esp+10h+var_4] 0 +
mov [esp+10h+var_10] ebx +
call sub_49FEC0  +
mov eax [ebx+6Ch] +
mov [ebx+5Ch] eax +
mov eax [ebx] +
call sub_49C090  +
mov eax [ebx] +
mov edx [eax+10h] +
test edx edx +
jnz loc_49C9FF  +
lea esi [esi+0] +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [ebx+5Ch] +
xor ecx ecx +
mov eax [ebx+6Ch] +
sub eax edx +
test edx edx +
js loc_49CAEC  +
mov ecx [ebx+38h] +
add ecx edx +
mov [esp+10h+var_8] eax +
mov [esp+10h+var_C] ecx +
mov [esp+10h+var_4] 1 +
mov [esp+10h+var_10] ebx +
call sub_49FEC0  +
mov eax [ebx+6Ch] +
mov [ebx+5Ch] eax +
mov eax [ebx] +
call sub_49C090  +
mov eax [ebx] +
cmp dword ptr [eax+10h] 1 +
sbb eax eax +
add eax 3 +
jmp loc_49CAD2  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ecx [esp+50h] +
mov ebx [esp+54h] +
mov esi [esp+58h] +
test ecx ecx +
jz loc_49CD3E  +
mov eax [esp+50h] +
mov edi [eax+1Ch] +
test edi edi +
jz loc_49CD3E  +
test ebx ebx +
jz loc_49CD3E  +
mov eax [edi+18h] +
cmp eax 2 +
mov [esp+24h] eax +
jz loc_49CD3E  +
cmp eax 1 +
jz loc_49CCB3  +
mov eax [edi+74h] +
test eax eax +
jnz loc_49CD3E  +
mov eax [edi+2Ch] +
mov dword ptr [edi+18h] 0 +
cmp esi eax +
jnb loc_49CCA0  +
mov eax [esp+50h] +
mov eax [eax+4] +
mov [esp+28h] eax +
mov eax [esp+50h] +
mov eax [eax] +
mov [esp+2Ch] eax +
mov eax [esp+50h] +
mov [eax+4] esi +
mov [eax] ebx +
mov eax edi +
call sub_49BDA0  +
mov eax [edi+74h] +
cmp eax 2 +
jbe loc_49CC51  +
mov edx eax +
nop   +
lea esi [esi+0] +
mov esi [edi+58h] +
mov ebx [edi+6Ch] +
mov eax [edi+48h] +
mov ebp [edi+40h] +
mov [esp+10h] esi +
mov esi [edi+38h] +
lea ecx [ebx+edx-2] +
mov [esp+0Ch] ecx +
mov [esp+14h] esi +
mov esi [edi+54h] +
mov [esp+18h] esi +
mov esi [edi+34h] +
mov [esp+1Ch] esi +
mov esi [edi+44h] +
mov [esp+20h] esi +
jmp loc_49CBF8  +
mov eax edx +
mov edx [esp+14h] +
movzx ecx byte ptr [esp+10h] +
movzx edx byte ptr [edx+ebx+2] +
shl eax cl +
mov ecx [esp+1Ch] +
xor edx eax +
mov eax [esp+20h] +
and edx [esp+18h] +
and ecx ebx +
lea eax [eax+edx*2] +
movzx esi word ptr [eax] +
mov [edi+48h] edx +
mov [ebp+ecx*2+0] si +
mov [eax] bx +
add ebx 1 +
cmp ebx [esp+0Ch] +
jnz loc_49CBF6  +
mov [edi+6Ch] ebx +
mov eax edi +
mov dword ptr [edi+74h] 2 +
call sub_49BDA0  +
mov edx [edi+74h] +
cmp edx 2 +
ja loc_49CBC0  +
mov eax edx +
mov edx [edi+6Ch] +
mov [edi+16B4h] eax +
mov esi [esp+2Ch] +
mov dword ptr [edi+74h] 0 +
mov dword ptr [edi+78h] 2 +
add edx eax +
mov eax [esp+50h] +
mov [edi+6Ch] edx +
mov [edi+5Ch] edx +
mov dword ptr [edi+60h] 2 +
mov dword ptr [edi+68h] 0 +
mov [eax] esi +
mov esi [esp+28h] +
mov [eax+4] esi +
mov eax [esp+24h] +
mov [edi+18h] eax +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [esp+24h] +
test edx edx +
jz loc_49CCF5  +
sub esi eax +
add ebx esi +
mov esi eax +
jmp loc_49CB88  +
***
cmp dword ptr [edi+4] 2Ah +
jnz loc_49CD3E  +
mov edx [edi+74h] +
test edx edx +
jnz loc_49CD3E  +
mov eax [esp+50h] +
mov eax [eax+30h] +
mov [esp+8] esi +
mov [esp+4] ebx +
mov [esp] eax +
call sub_49A810  +
mov ecx [esp+50h] +
mov [ecx+30h] eax +
mov eax [edi+2Ch] +
mov dword ptr [edi+18h] 0 +
cmp esi eax +
jnb loc_49CCA8  +
jmp loc_49CB88  +
***
mov ecx [edi+4Ch] +
xor ebp ebp +
mov eax [edi+44h] +
lea edx [ecx+7FFFFFFFh] +
lea ecx [edx+edx] +
mov [eax+edx*2] bp +
mov [esp+8] ecx +
mov dword ptr [esp+4] 0 +
mov [esp] eax +
call memset  +
mov eax [edi+2Ch] +
mov dword ptr [edi+6Ch] 0 +
mov dword ptr [edi+5Ch] 0 +
mov dword ptr [edi+16B4h] 0 +
jmp loc_49CCA8  +
***
mov eax 0FFFFFFFEh +
jmp loc_49CC98  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
test ebx ebx +
jz loc_49CE20  +
mov esi [ebx+1Ch] +
test esi esi +
jz loc_49CE20  +
mov edx [ebx+20h] +
test edx edx +
jz loc_49CE20  +
mov eax [ebx+24h] +
test eax eax +
jz loc_49CE20  +
mov eax [esi+8] +
mov dword ptr [ebx+14h] 0 +
mov dword ptr [ebx+8] 0 +
mov dword ptr [ebx+18h] 0 +
mov dword ptr [ebx+2Ch] 2 +
mov [esi+10h] eax +
mov eax [esi+18h] +
mov dword ptr [esi+14h] 0 +
test eax eax +
js loc_49CDF1  +
jnz loc_49CDF6  +
mov dword ptr [esi+4] 71h +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] 0 +
call sub_49A810  +
mov [ebx+30h] eax +
mov dword ptr [esi+28h] 0 +
mov [esp+14h+var_14] esi +
call sub_49FBC0  +
xor eax eax +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
neg eax  +
mov [esi+18h] eax +
cmp eax 2 +
mov dword ptr [esi+4] 2Ah +
jnz loc_49CDBB  +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_10] 0 +
mov [esp+14h+var_14] 0 +
call sub_49AD40  +
jmp loc_49CDD7  +
mov eax 0FFFFFFFEh +
jmp loc_49CDEB  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+0Ch+arg_0] +
mov [esp+0Ch+var_C] ebx +
call sub_49CD50  +
test eax eax +
mov esi eax +
jnz loc_49CEF7  +
mov ebx [ebx+1Ch] +
mov eax [ebx+2Ch] +
mov ecx [ebx+4Ch] +
add eax eax +
mov [ebx+3Ch] eax +
mov eax [ebx+44h] +
lea edx [ecx+7FFFFFFFh] +
lea ecx [edx+edx] +
mov word ptr [eax+edx*2] 0 +
mov [esp+0Ch+var_4] ecx +
mov [esp+0Ch+var_8] 0 +
mov [esp+0Ch+var_C] eax +
call memset  +
mov eax [ebx+84h] +
mov dword ptr [ebx+6Ch] 0 +
mov dword ptr [ebx+5Ch] 0 +
mov dword ptr [ebx+74h] 0 +
lea edx [eax+eax*2] +
shl edx 2 +
lea eax dword_508EC0[edx] +
movzx ecx word ptr [edx+508EC2h] +
movzx edx word ptr ds:dword_508EC0[edx] +
mov dword ptr [ebx+16B4h] 0 +
mov dword ptr [ebx+78h] 2 +
mov [ebx+80h] ecx +
mov [ebx+8Ch] edx +
movzx edx word ptr [eax+4] +
movzx eax word ptr [eax+6] +
mov dword ptr [ebx+60h] 2 +
mov dword ptr [ebx+68h] 0 +
mov [ebx+90h] edx +
mov [ebx+7Ch] eax +
mov dword ptr [ebx+48h] 0 +
add esp 14h +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
mov eax [esp+4] +
test eax eax +
jz loc_49CF20  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_49CF20  +
cmp dword ptr [eax+18h] 2 +
jnz loc_49CF20  +
mov edx [esp+8] +
mov [eax+1Ch] edx +
xor eax eax +
retn   +
***
mov eax 0FFFFFFFEh +
retn   +
***
push ebx  +
mov eax [esp+8] +
mov ecx [esp+0Ch] +
mov edx [esp+10h] +
test eax eax +
jz loc_49CF65  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_49CF65  +
test ecx ecx +
jz loc_49CF51  +
mov ebx [eax+14h] +
mov [ecx] ebx +
test edx edx +
jz loc_49CF61  +
mov eax [eax+16BCh] +
mov [edx] eax +
xor eax eax +
pop ebx  +
retn   +
***
xor eax eax +
pop ebx  +
retn   +
***
mov eax 0FFFFFFFEh +
pop ebx  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+30h] +
mov edi [esp+34h] +
mov ebp [esp+38h] +
test eax eax +
jz loc_49CFF4  +
mov esi [eax+1Ch] +
test esi esi +
jz loc_49CFF4  +
mov eax [esi+10h] +
add eax 2 +
cmp [esi+16A4h] eax +
jb loc_49CFED  +
lea esi [esi+0] +
mov edx [esi+16BCh] +
mov ebx 10h +
mov eax 1 +
sub ebx edx +
cmp edi ebx +
cmovle ebx edi +
mov ecx ebx +
shl eax cl +
mov ecx edx +
sub eax 1 +
add edx ebx +
and eax ebp +
shl eax cl +
or [esi+16B8h] ax +
mov [esi+16BCh] edx +
mov [esp] esi +
call sub_49FDC0  +
mov ecx ebx +
sar ebp cl +
sub edi ebx +
jnz loc_49CFA0  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 0FFFFFFFBh +
jmp loc_49CFE5  +
***
mov eax 0FFFFFFFEh +
jmp loc_49CFE5  +
***
mov eax [esp+4] +
test eax eax +
jz loc_49D037  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_49D037  +
mov edx [esp+8] +
mov [eax+8Ch] edx +
mov edx [esp+0Ch] +
mov [eax+80h] edx +
mov edx [esp+10h] +
mov [eax+90h] edx +
mov edx [esp+14h] +
mov [eax+7Ch] edx +
xor eax eax +
retn   +
***
mov eax 0FFFFFFFEh +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
mov ecx [esp+18h] +
mov ebx [esp+14h] +
lea esi [ecx+7] +
mov edx esi +
lea eax [ecx+3Fh] +
shr edx 3 +
shr eax 6 +
add eax edx +
add eax ecx +
test ebx ebx +
jz loc_49D124  +
mov ebx [ebx+1Ch] +
test ebx ebx +
jz loc_49D124  +
mov edx [ebx+18h] +
cmp edx 1 +
jz loc_49D113  +
cmp edx 2 +
jz loc_49D0A0  +
cmp edx 1 +
sbb edx edx +
not edx  +
and edx 6 +
cmp dword ptr [ebx+30h] 0Fh +
jz loc_49D0F3  +
pop ebx  +
lea eax [edx+eax+5] +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi [ebx+1Ch] +
test edi edi +
jz loc_49D130  +
mov ebp [edi+10h] +
test ebp ebp +
jz loc_49D140  +
mov edx [edi+14h] +
add edx 14h +
mov ebp [edi+1Ch] +
test ebp ebp +
jz loc_49D0CF  +
sub ebp edx +
add edx 1 +
cmp byte ptr [ebp+edx-1] 0 +
jnz loc_49D0C5  +
mov ebp [edi+24h] +
test ebp ebp +
jz loc_49D0E2  +
sub ebp edx +
add edx 1 +
cmp byte ptr [ebp+edx-1] 0 +
jnz loc_49D0D8  +
mov edi [edi+2Ch] +
lea ebp [edx+2] +
test edi edi +
cmovnz edx ebp +
cmp dword ptr [ebx+30h] 0Fh +
jnz loc_49D092  +
cmp dword ptr [ebx+50h] 0Fh +
jnz loc_49D092  +
mov eax ecx +
mov ebx ecx +
shr eax 0Ch +
add eax esi +
shr ebx 0Eh +
add eax ebx +
shr ecx 19h +
add eax ecx +
pop ebx  +
add eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp dword ptr [ebx+6Ch] 1 +
sbb edx edx +
and edx 0FFFFFFFCh +
add edx 0Ah +
jmp loc_49D08C  +
***
pop ebx  +
add eax 0Bh +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx 12h +
jmp loc_49D08C  +
***
mov edx 12h +
jmp loc_49D0BC  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov edi [esp+2Ch+arg_0] +
test edi edi +
jz loc_49DD11  +
mov eax [esp+2Ch+arg_0] +
mov ebp [eax+1Ch] +
test ebp ebp +
jz loc_49DD11  +
cmp [esp+2Ch+arg_4] 5 +
ja loc_49DD11  +
mov esi [eax+0Ch] +
test esi esi +
jz loc_49D31B  +
mov ebx [eax] +
test ebx ebx +
jz loc_49DBA8  +
mov eax [ebp+4] +
cmp eax 29Ah +
jz loc_49D310  +
mov edi [esp+2Ch+arg_0] +
mov edx [edi+10h] +
test edx edx +
jz loc_49DD74  +
mov edi [esp+2Ch+arg_0] +
cmp eax 2Ah +
mov [ebp+0] edi +
mov edi [ebp+28h] +
mov [esp+2Ch+var_18] edi +
mov edi [esp+2Ch+arg_4] +
mov [ebp+28h] edi +
jz loc_49D471  +
cmp eax 45h +
jz loc_49D579  +
cmp eax 49h +
mov edx [ebp+14h] +
jz loc_49D630  +
cmp eax 5Bh +
jz loc_49D8DB  +
cmp eax 67h +
jz loc_49DC5B  +
test edx edx +
mov eax [esp+2Ch+arg_0] +
jnz loc_49D331  +
mov edx [eax+4] +
test edx edx +
jnz loc_49D820  +
mov eax [esp+2Ch+arg_4] +
cmp eax 5 +
lea edx [eax+eax] +
setz al  +
movzx eax al +
lea eax [eax+eax*8] +
sub edx eax +
mov eax [esp+2Ch+var_18] +
cmp eax 5 +
lea ecx [eax+eax] +
setnl al  +
movzx eax al +
lea eax [eax+eax*8] +
sub ecx eax +
cmp edx ecx +
jg loc_49D244  +
cmp [esp+2Ch+arg_4] 4 +
jnz loc_49D836  +
mov eax [ebp+4] +
mov ecx [ebp+74h] +
test ecx ecx +
jnz loc_49D362  +
mov edx [esp+2Ch+arg_4] +
test edx edx +
jz loc_49D3B9  +
cmp eax 29Ah +
jnz loc_49D362  +
lea esi [esi+0] +
cmp [esp+2Ch+arg_4] 4 +
jnz loc_49D3B9  +
mov eax [ebp+18h] +
test eax eax +
jle loc_49E070  +
cmp eax 2 +
jz loc_49DDC0  +
mov eax [esp+2Ch+arg_0] +
mov ebx [ebp+8] +
mov edx [eax+30h] +
mov eax [ebp+14h] +
mov ecx edx +
lea esi [eax+1] +
shr edx 18h +
mov [ebp+14h] esi +
shr ecx 10h +
mov [ebx+eax] dl +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ebx [eax+1] +
mov [ebp+14h] ebx +
mov [edx+eax] cl +
mov eax [esp+2Ch+arg_0] +
mov ecx [ebp+8] +
movzx edx word ptr [eax+30h] +
mov eax [ebp+14h] +
lea ebx [eax+1] +
mov [ebp+14h] ebx +
mov ebx edx +
shr ebx 8 +
mov [ecx+eax] bl +
mov eax [ebp+14h] +
mov ecx [ebp+8] +
lea ebx [eax+1] +
mov [ebp+14h] ebx +
mov [ecx+eax] dl +
mov eax [esp+2Ch+arg_0] +
call sub_49C090  +
mov eax [ebp+18h] +
test eax eax +
jle loc_49D2FC  +
neg eax  +
mov [ebp+18h] eax +
mov edx [ebp+14h] +
xor eax eax +
test edx edx +
setz al  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+2Ch+arg_4] 4 +
jz loc_49D1A0  +
mov eax ds:off_506CF0 +
mov edi [esp+2Ch+arg_0] +
mov [edi+18h] eax +
mov eax 0FFFFFFFEh +
jmp loc_49D3BB  +
call sub_49C090  +
mov eax [esp+2Ch+arg_0] +
mov ebx [eax+10h] +
test ebx ebx +
jz loc_49D465  +
mov eax [esp+2Ch+arg_0] +
mov edx [eax+4] +
mov eax [ebp+4] +
cmp eax 29Ah +
jz loc_49D82E  +
test edx edx +
jz loc_49D247  +
mov eax [ebp+88h] +
cmp eax 2 +
jz loc_49D67C  +
cmp eax 3 +
jz loc_49D8E3  +
mov eax [ebp+84h] +
mov edi [esp+2Ch+arg_4] +
mov [esp+2Ch+var_2C] ebp +
lea eax [eax+eax*2] +
mov [esp+2Ch+var_28] edi +
call ds:off_508EC8[eax*4]  +
mov edx eax +
and edx 0FFFFFFFDh +
lea ecx [eax-2] +
cmp ecx 1 +
jbe loc_49D8A0  +
test edx edx +
jnz loc_49D3C3  +
mov eax [esp+2Ch+arg_0] +
mov edi [eax+10h] +
test edi edi +
jz loc_49D465  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp eax 1 +
jnz loc_49D270  +
cmp [esp+2Ch+arg_4] 1 +
jz loc_49E083  +
cmp [esp+2Ch+arg_4] 5 +
jz loc_49D44D  +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] ebp +
call sub_49FCA0  +
cmp [esp+2Ch+arg_4] 3 +
jnz loc_49D44D  +
mov edi [ebp+4Ch] +
xor ebx ebx +
mov eax [ebp+44h] +
lea edx [edi+7FFFFFFFh] +
lea ecx [edx+edx] +
mov [eax+edx*2] bx +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] eax +
call memset  +
mov esi [ebp+74h] +
test esi esi +
jnz loc_49D44D  +
mov dword ptr [ebp+6Ch] 0 +
mov dword ptr [ebp+5Ch] 0 +
mov dword ptr [ebp+16B4h] 0 +
mov eax [esp+2Ch+arg_0] +
call sub_49C090  +
mov eax [esp+2Ch+arg_0] +
mov ecx [eax+10h] +
test ecx ecx +
jnz loc_49D270  +
mov dword ptr [ebp+28h] 0FFFFFFFFh +
jmp loc_49D3B9  +
cmp dword ptr [ebp+18h] 2 +
jz loc_49DE63  +
mov eax [ebp+30h] +
shl eax 0Ch +
lea ecx [eax-7800h] +
xor eax eax +
cmp dword ptr [ebp+88h] 1 +
jle loc_49D7F3  +
mov edx [ebp+6Ch] +
or ecx eax +
mov eax ecx +
mov ebx [ebp+8] +
or eax 20h +
mov dword ptr [ebp+4] 71h +
test edx edx +
mov edx 8421085h +
cmovnz ecx eax +
mov eax ecx +
mul  edx +
mov eax [ebp+14h] +
sub ecx edx +
shr ecx 1 +
add ecx edx +
shr ecx 4 +
mov edx ecx +
shl edx 5 +
sub edx ecx +
add edx 1Fh +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov ecx edx +
shr ecx 8 +
mov [ebx+eax] cl +
mov eax [ebp+14h] +
mov ecx [ebp+8] +
lea ebx [eax+1] +
mov [ebp+14h] ebx +
mov [ecx+eax] dl +
mov ecx [ebp+6Ch] +
test ecx ecx +
jz loc_49D54A  +
mov eax [esp+2Ch+arg_0] +
mov esi [ebp+8] +
mov edx [eax+30h] +
mov eax [ebp+14h] +
mov ecx edx +
lea ebx [eax+1] +
shr edx 18h +
mov [ebp+14h] ebx +
shr ecx 10h +
mov [esi+eax] dl +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ebx [eax+1] +
mov [ebp+14h] ebx +
mov [edx+eax] cl +
mov eax [esp+2Ch+arg_0] +
mov ebx [ebp+8] +
movzx edx word ptr [eax+30h] +
mov eax [ebp+14h] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov ecx edx +
shr ecx 8 +
mov [ebx+eax] cl +
mov eax [ebp+14h] +
mov ecx [ebp+8] +
lea ebx [eax+1] +
mov [ebp+14h] ebx +
mov [ecx+eax] dl +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] 0 +
call sub_49A810  +
mov edi [esp+2Ch+arg_0] +
mov [edi+30h] eax +
mov eax [ebp+4] +
cmp eax 45h +
jnz loc_49D1D6  +
mov ecx [ebp+1Ch] +
mov eax ecx +
mov edi [ecx+10h] +
test edi edi +
jz loc_49DD65  +
mov edx [ebp+14h] +
movzx ebx word ptr [ecx+14h] +
cmp ebx [ebp+20h] +
mov edi edx +
jbe loc_49D606  +
mov eax edx +
mov esi ecx +
jmp loc_49D5CF  +
lea ebx [eax+1] +
mov esi [ebp+8] +
mov [ebp+14h] ebx +
mov ebx [ecx+10h] +
mov ecx [ebp+20h] +
movzx ecx byte ptr [ebx+ecx] +
mov [esi+eax] cl +
mov ecx [ebp+1Ch] +
mov eax [ebp+20h] +
movzx ebx word ptr [ecx+14h] +
mov esi ecx +
add eax 1 +
mov [ebp+20h] eax +
cmp ebx eax +
jbe loc_49D601  +
mov eax [ebp+14h] +
cmp [ebp+0Ch] eax +
jnz loc_49D5A0  +
mov esi [esi+2Ch] +
test esi esi +
jz loc_49D5E3  +
cmp eax edx +
ja loc_49DB80  +
mov eax [esp+2Ch+arg_0] +
call sub_49C090  +
mov edx [ebp+14h] +
cmp edx [ebp+0Ch] +
mov edi edx +
jz loc_49DD5D  +
mov eax edx +
mov ecx [ebp+1Ch] +
jmp loc_49D5A0  +
mov edx [ebp+14h] +
mov eax ecx +
mov ebx [eax+2Ch] +
test ebx ebx +
jz loc_49D615  +
cmp edi edx +
jb loc_49DD1B  +
mov edi [eax+14h] +
cmp [ebp+20h] edi +
jz loc_49D778  +
mov eax [ebp+4] +
cmp eax 49h +
jnz loc_49D1E2  +
lea esi [esi+0] +
mov eax [ebp+1Ch] +
jmp loc_49D786  +
mov eax [ebp+5Ch] +
xor ecx ecx +
sub edx eax +
test eax eax +
js loc_49D648  +
add eax [ebp+38h] +
mov ecx eax +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_2C] ebp +
call sub_49FEC0  +
mov eax [ebp+6Ch] +
mov [ebp+5Ch] eax +
mov eax [ebp+0] +
call sub_49C090  +
mov eax [ebp+0] +
mov ecx [eax+10h] +
test ecx ecx +
jz loc_49D3AA  +
mov eax [ebp+74h] +
jmp loc_49D6E6  +
mov eax [ebp+6Ch] +
xor ebx ebx +
mov edx [ebp+38h] +
mov dword ptr [ebp+60h] 0 +
mov ecx [ebp+16A4h] +
movzx edx byte ptr [edx+eax] +
mov eax [ebp+16A0h] +
mov [ecx+eax*2] bx +
mov ecx [ebp+1698h] +
lea ebx [eax+1] +
mov [ebp+16A0h] ebx +
mov [ecx+eax] dl +
add word ptr [ebp+edx*4+94h] 1 +
mov eax [ebp+169Ch] +
mov edi [ebp+6Ch] +
lea ecx [eax-1] +
mov eax [ebp+74h] +
lea edx [edi+1] +
mov [ebp+6Ch] edx +
sub eax 1 +
cmp [ebp+16A0h] ecx +
mov [ebp+74h] eax +
jz loc_49D638  +
test eax eax +
jnz loc_49D681  +
mov eax ebp +
call sub_49BDA0  +
mov edi [ebp+74h] +
test edi edi +
jnz loc_49D681  +
mov esi [esp+2Ch+arg_4] +
test esi esi +
jz loc_49D3AA  +
cmp [esp+2Ch+arg_4] 4 +
mov dword ptr [ebp+16B4h] 0 +
jz loc_49D84C  +
mov eax [ebp+16A0h] +
test eax eax +
jz loc_49D3CC  +
mov edx [ebp+5Ch] +
xor ecx ecx +
mov eax [ebp+6Ch] +
sub eax edx +
test edx edx +
js loc_49D73A  +
add edx [ebp+38h] +
mov ecx edx +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_2C] ebp +
call sub_49FEC0  +
mov eax [ebp+6Ch] +
mov [ebp+5Ch] eax +
mov eax [ebp+0] +
call sub_49C090  +
mov eax [ebp+0] +
mov eax [eax+10h] +
test eax eax +
setnz al  +
movzx eax al +
lea ecx [eax-2] +
mov edx eax +
jmp loc_49D39D  +
mov dword ptr [ebp+20h] 0 +
mov dword ptr [ebp+4] 49h +
mov ecx [eax+1Ch] +
test ecx ecx +
jz loc_49DD92  +
mov ebx edx +
mov ecx edx +
jmp loc_49D7C1  +
mov esi [eax+1Ch] +
mov eax [ebp+20h] +
lea edi [eax+1] +
mov [ebp+20h] edi +
movzx eax byte ptr [esi+eax] +
lea edi [ecx+1] +
mov esi [ebp+8] +
mov [ebp+14h] edi +
test al al +
mov [esi+ecx] al +
jz loc_49D8B0  +
mov ecx [ebp+14h] +
mov eax [ebp+1Ch] +
cmp [ebp+0Ch] ecx +
jnz loc_49D797  +
mov eax [eax+2Ch] +
test eax eax +
jz loc_49D7D5  +
cmp edx ecx +
jb loc_49DB58  +
mov eax [esp+2Ch+arg_0] +
call sub_49C090  +
mov edx [ebp+14h] +
cmp edx [ebp+0Ch] +
mov ebx edx +
jz loc_49DD49  +
mov eax [ebp+1Ch] +
mov ecx edx +
jmp loc_49D797  +
mov edx [ebp+84h] +
cmp edx 1 +
jle loc_49D496  +
cmp edx 5 +
mov al 40h +
jle loc_49D496  +
cmp edx 6 +
mov al 80h +
mov edx 0C0h +
cmovnz eax edx +
jmp loc_49D496  +
mov eax [ebp+4] +
cmp eax 29Ah +
jnz loc_49D362  +
test edx edx +
jz loc_49D247  +
mov eax ds:off_506CFC +
mov edi [esp+2Ch+arg_0] +
mov [edi+18h] eax +
mov eax 0FFFFFFFBh +
jmp loc_49D3BB  +
mov edx [ebp+5Ch] +
xor ecx ecx +
mov eax [ebp+6Ch] +
sub eax edx +
test edx edx +
js loc_49D85F  +
add edx [ebp+38h] +
mov ecx edx +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_20] 1 +
mov [esp+2Ch+var_2C] ebp +
call sub_49FEC0  +
mov eax [ebp+6Ch] +
mov [ebp+5Ch] eax +
mov eax [ebp+0] +
call sub_49C090  +
mov eax [ebp+0] +
mov ecx [eax+10h] +
cmp ecx 1 +
sbb edx edx +
add edx 1 +
cmp ecx 1 +
sbb eax eax +
add eax 3 +
nop   +
lea esi [esi+0] +
mov dword ptr [ebp+4] 29Ah +
jmp loc_49D3A6  +
mov edx [ebp+14h] +
xor esi esi +
mov eax [ebp+1Ch] +
mov edi [eax+2Ch] +
test edi edi +
jz loc_49D8C7  +
cmp ebx edx +
jb loc_49E006  +
test esi esi +
jz loc_49DBB8  +
mov eax [ebp+4] +
cmp eax 5Bh +
jnz loc_49D1EB  +
mov eax [ebp+1Ch] +
jmp loc_49DBC9  +
movzx eax ds:byte_5091A0 +
lea edi ds:0[eax*4] +
jmp loc_49D96A  +
mov dword ptr [ebp+60h] 0 +
mov esi [ebp+6Ch] +
mov edx [ebp+38h] +
test esi esi +
jnz loc_49D9C0  +
mov [esp+2Ch+var_18] 0 +
mov eax [esp+2Ch+var_18] +
xor ebx ebx +
mov ecx [ebp+16A4h] +
movzx edx byte ptr [edx+eax] +
mov eax [ebp+16A0h] +
mov [ecx+eax*2] bx +
mov ecx [ebp+1698h] +
lea ebx [eax+1] +
mov [ebp+16A0h] ebx +
mov [ecx+eax] dl +
add word ptr [ebp+edx*4+94h] 1 +
mov eax [ebp+169Ch] +
sub eax 1 +
cmp [ebp+16A0h] eax +
setz al  +
movzx eax al +
sub dword ptr [ebp+74h] 1 +
add dword ptr [ebp+6Ch] 1 +
test eax eax +
jnz loc_49DB0C  +
mov eax [ebp+74h] +
cmp eax 102h +
ja loc_49D8F3  +
mov eax ebp +
call sub_49BDA0  +
mov eax [ebp+74h] +
cmp eax 102h +
ja loc_49D8F3  +
mov edx [esp+2Ch+arg_4] +
test edx edx +
jz loc_49D3AA  +
test eax eax +
jz loc_49D704  +
cmp eax 2 +
mov dword ptr [ebp+60h] 0 +
ja loc_49D8FA  +
mov eax [ebp+6Ch] +
mov edx [ebp+38h] +
mov [esp+2Ch+var_18] eax +
jmp loc_49D910  +
lea ebx [edx+esi-1] +
movzx ecx byte ptr [ebx] +
mov [esp+2Ch+var_18] esi +
mov [esp+2Ch+var_14] ecx +
movzx ecx byte ptr [ebx] +
cmp [ebx+1] cl +
jnz loc_49D910  +
movzx ecx byte ptr [ebx+2] +
cmp [esp+2Ch+var_14] ecx +
jnz loc_49D910  +
movzx ecx byte ptr [ebx+3] +
cmp [esp+2Ch+var_14] ecx +
jnz loc_49D910  +
lea ecx [edx+esi+102h] +
add ebx 3 +
mov [esp+2Ch+var_10] eax +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_18] ecx +
jmp loc_49DA70  +
movzx ecx byte ptr [ebx+2] +
cmp eax ecx +
jnz loc_49E0CA  +
movzx ecx byte ptr [ebx+3] +
cmp eax ecx +
jnz loc_49E0FA  +
movzx ecx byte ptr [ebx+4] +
cmp eax ecx +
jnz loc_49E0EE  +
movzx ecx byte ptr [ebx+5] +
cmp eax ecx +
jnz loc_49E0E2  +
movzx ecx byte ptr [ebx+6] +
cmp eax ecx +
jnz loc_49E0D6  +
movzx ecx byte ptr [ebx+7] +
cmp eax ecx +
jnz loc_49E0BE  +
add ebx 8 +
movzx ecx byte ptr [ebx] +
cmp eax ecx +
jnz loc_49E07A  +
cmp ebx [esp+2Ch+var_18] +
jnb loc_49E07A  +
movzx ecx byte ptr [ebx+1] +
cmp eax ecx +
jz loc_49DA10  +
mov eax [esp+2Ch+var_10] +
add ebx 1 +
sub ebx [esp+2Ch+var_18] +
lea ecx [ebx+102h] +
cmp ecx eax +
mov [ebp+60h] ecx +
jbe loc_49E05C  +
mov [ebp+60h] eax +
mov ecx eax +
mov eax [ebp+16A0h] +
lea edx [ecx-3] +
mov esi 1 +
mov ecx [ebp+16A4h] +
lea ebx [eax+1] +
mov [ecx+eax*2] si +
mov ecx [ebp+1698h] +
mov [ebp+16A0h] ebx +
mov [ecx+eax] dl +
movzx edx dl +
movzx eax ds:byte_5090A0[edx] +
add word ptr [ebp+eax*4+498h] 1 +
add word ptr [ebp+edi+988h] 1 +
mov eax [ebp+169Ch] +
mov edx [ebp+60h] +
mov dword ptr [ebp+60h] 0 +
sub eax 1 +
cmp [ebp+16A0h] eax +
setz al  +
movzx eax al +
sub [ebp+74h] edx +
add [ebp+6Ch] edx +
test eax eax +
jz loc_49D96A  +
mov edx [ebp+5Ch] +
xor ecx ecx +
mov eax [ebp+6Ch] +
sub eax edx +
test edx edx +
js loc_49DB1F  +
add edx [ebp+38h] +
mov ecx edx +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_2C] ebp +
call sub_49FEC0  +
mov eax [ebp+6Ch] +
mov [ebp+5Ch] eax +
mov eax [ebp+0] +
call sub_49C090  +
mov eax [ebp+0] +
mov eax [eax+10h] +
test eax eax +
jnz loc_49D96A  +
jmp loc_49D3AA  +
mov eax [esp+2Ch+arg_0] +
sub ecx edx +
mov eax [eax+30h] +
mov [esp+2Ch+var_24] ecx +
add edx [ebp+8] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] edx +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov [edi+30h] eax +
jmp loc_49D7D5  +
mov edi [esp+2Ch+arg_0] +
sub eax edx +
mov ecx [edi+30h] +
mov [esp+2Ch+var_24] eax +
add edx [ebp+8] +
mov [esp+2Ch+var_2C] ecx +
mov [esp+2Ch+var_28] edx +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov [edi+30h] eax +
jmp loc_49D5E3  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_49D192  +
jmp loc_49D31B  +
mov eax [ebp+1Ch] +
mov dword ptr [ebp+20h] 0 +
mov dword ptr [ebp+4] 5Bh +
mov ecx [eax+24h] +
test ecx ecx +
jz loc_49DD86  +
mov ebx edx +
mov ecx edx +
jmp loc_49DC06  +
mov esi [eax+24h] +
mov eax [ebp+20h] +
lea edi [eax+1] +
mov [ebp+20h] edi +
movzx eax byte ptr [esi+eax] +
lea edi [ecx+1] +
mov esi [ebp+8] +
mov [ebp+14h] edi +
test al al +
mov [esi+ecx] al +
jz loc_49DC34  +
mov ecx [ebp+14h] +
mov eax [ebp+1Ch] +
cmp [ebp+0Ch] ecx +
jnz loc_49DBE0  +
mov eax [eax+2Ch] +
test eax eax +
jz loc_49DC16  +
cmp edx ecx +
jb loc_49DC71  +
mov eax [esp+2Ch+arg_0] +
call sub_49C090  +
mov edx [ebp+14h] +
cmp edx [ebp+0Ch] +
mov ebx edx +
jz loc_49DD53  +
mov eax [ebp+1Ch] +
mov ecx edx +
jmp loc_49DBE0  +
mov edx [ebp+14h] +
xor esi esi +
mov eax [ebp+1Ch] +
mov edi [eax+2Ch] +
test edi edi +
jz loc_49DC4B  +
cmp ebx edx +
jb loc_49E031  +
test esi esi +
jz loc_49DC96  +
mov eax [ebp+4] +
cmp eax 67h +
jnz loc_49D1F4  +
mov eax [ebp+1Ch] +
mov esi [eax+2Ch] +
test esi esi +
jnz loc_49DCA7  +
mov dword ptr [ebp+4] 71h +
jmp loc_49D1F4  +
mov eax [esp+2Ch+arg_0] +
sub ecx edx +
mov eax [eax+30h] +
mov [esp+2Ch+var_24] ecx +
add edx [ebp+8] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] edx +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov [edi+30h] eax +
jmp loc_49DC16  +
mov eax [ebp+1Ch] +
mov dword ptr [ebp+4] 67h +
mov esi [eax+2Ch] +
test esi esi +
jz loc_49DC65  +
lea eax [edx+2] +
cmp eax [ebp+0Ch] +
ja loc_49DD9E  +
lea eax [edx+1] +
mov ecx [ebp+8] +
mov [ebp+14h] eax +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+30h] +
mov [ecx+edx] al +
mov edx [ebp+14h] +
mov ecx [ebp+8] +
lea eax [edx+1] +
mov [ebp+14h] eax +
mov eax [esp+2Ch+arg_0] +
mov eax [eax+30h] +
shr eax 8 +
mov [ecx+edx] al +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] 0 +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov edx [ebp+14h] +
mov [edi+30h] eax +
mov dword ptr [ebp+4] 71h +
jmp loc_49D1F4  +
mov eax 0FFFFFFFEh +
jmp loc_49D3BB  +
mov eax [esp+2Ch+arg_0] +
sub edx edi +
mov eax [eax+30h] +
mov [esp+2Ch+var_24] edx +
add edi [ebp+8] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] edi +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov edx [ebp+14h] +
mov [edi+30h] eax +
mov eax [ebp+1Ch] +
jmp loc_49D615  +
mov esi 1 +
jmp loc_49D8B5  +
mov esi 1 +
jmp loc_49DC39  +
mov eax [ebp+1Ch] +
jmp loc_49D606  +
mov dword ptr [ebp+4] 49h +
mov edx [ebp+14h] +
jmp loc_49D786  +
mov eax ds:off_506CFC +
mov [edi+18h] eax +
mov eax 0FFFFFFFBh +
jmp loc_49D3BB  +
mov dword ptr [ebp+4] 67h +
jmp loc_49DCA0  +
mov dword ptr [ebp+4] 5Bh +
jmp loc_49DBC9  +
mov eax [esp+2Ch+arg_0] +
call sub_49C090  +
mov edx [ebp+14h] +
lea eax [edx+2] +
cmp eax [ebp+0Ch] +
ja loc_49D1F4  +
jmp loc_49DCB3  +
mov eax [ebp+14h] +
mov edi [esp+2Ch+arg_0] +
mov ecx [ebp+8] +
lea edx [eax+1] +
mov [ebp+14h] edx +
mov edx [edi+30h] +
mov [ecx+eax] dl +
mov edx [ebp+14h] +
mov ecx [ebp+8] +
lea eax [edx+1] +
mov [ebp+14h] eax +
mov eax [edi+30h] +
shr eax 8 +
mov [ecx+edx] al +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
movzx ecx word ptr [edi+32h] +
mov [edx+eax] cl +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
movzx ecx byte ptr [edi+33h] +
mov [edx+eax] cl +
mov eax [ebp+14h] +
mov ecx [ebp+8] +
lea edx [eax+1] +
mov [ebp+14h] edx +
mov edx [edi+8] +
mov [ecx+eax] dl +
mov edx [ebp+14h] +
mov ecx [ebp+8] +
lea eax [edx+1] +
mov [ebp+14h] eax +
mov eax [edi+8] +
shr eax 8 +
mov [ecx+edx] al +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
movzx ecx word ptr [edi+0Ah] +
mov [edx+eax] cl +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
movzx ecx byte ptr [edi+0Bh] +
mov [edx+eax] cl +
jmp loc_49D2E7  +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_2C] 0 +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov edx [ebp+8] +
mov [edi+30h] eax +
mov eax [ebp+14h] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 1Fh +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 8Bh +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 8 +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_49E106  +
mov edi [eax] +
mov ebx [ebp+14h] +
mov esi [ebp+8] +
test edi edi +
setnz cl  +
cmp dword ptr [eax+2Ch] 1 +
lea edx [ebx+1] +
mov [ebp+14h] edx +
sbb edx edx +
not edx  +
and edx 2 +
add ecx edx +
cmp dword ptr [eax+10h] 1 +
sbb edx edx +
not edx  +
and edx 4 +
add ecx edx +
cmp dword ptr [eax+1Ch] 1 +
sbb edx edx +
not edx  +
and edx 8 +
add edx ecx +
cmp dword ptr [eax+24h] 1 +
sbb eax eax +
not eax  +
and eax 10h +
add eax edx +
mov [esi+ebx] al +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov ecx [ebp+1Ch] +
mov ecx [ecx+4] +
mov [edx+eax] cl +
mov edx [ebp+14h] +
mov ecx [ebp+8] +
lea eax [edx+1] +
mov [ebp+14h] eax +
mov eax [ebp+1Ch] +
mov eax [eax+4] +
shr eax 8 +
mov [ecx+edx] al +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov ecx [ebp+1Ch] +
movzx ecx word ptr [ecx+6] +
mov [edx+eax] cl +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov ecx [ebp+1Ch] +
movzx ecx byte ptr [ecx+7] +
mov [edx+eax] cl +
mov eax [ebp+14h] +
lea edx [eax+1] +
mov [ebp+14h] edx +
mov edx [ebp+84h] +
add eax [ebp+8] +
cmp edx 9 +
mov ecx eax +
mov eax 2 +
jz loc_49DF94  +
cmp dword ptr [ebp+88h] 1 +
jle loc_49E1A3  +
mov eax 4 +
mov [ecx] al +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov ecx [ebp+1Ch] +
mov ecx [ecx+0Ch] +
mov [edx+eax] cl +
mov ecx [ebp+1Ch] +
mov esi [ecx+10h] +
test esi esi +
jz loc_49E1B3  +
mov eax [ebp+14h] +
mov ebx [ebp+8] +
lea edx [eax+1] +
mov [ebp+14h] edx +
mov edx [ecx+14h] +
mov [ebx+eax] dl +
mov edx [ebp+14h] +
mov ecx [ebp+8] +
lea eax [edx+1] +
mov [ebp+14h] eax +
mov eax [ebp+1Ch] +
mov eax [eax+14h] +
shr eax 8 +
mov [ecx+edx] al +
mov ecx [ebp+1Ch] +
mov eax ecx +
mov ebx [ecx+2Ch] +
test ebx ebx +
jnz loc_49E090  +
mov dword ptr [ebp+20h] 0 +
mov dword ptr [ebp+4] 45h +
jmp loc_49D57E  +
mov eax [esp+2Ch+arg_0] +
sub edx ebx +
mov eax [eax+30h] +
mov [esp+2Ch+var_24] edx +
add ebx [ebp+8] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] ebx +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov edx [ebp+14h] +
mov [edi+30h] eax +
jmp loc_49D8C7  +
mov eax [esp+2Ch+arg_0] +
sub edx ebx +
mov eax [eax+30h] +
mov [esp+2Ch+var_24] edx +
add ebx [ebp+8] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] ebx +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov edx [ebp+14h] +
mov [edi+30h] eax +
jmp loc_49DC4B  +
cmp ecx 2 +
ja loc_49DA99  +
mov [esp+2Ch+var_18] esi +
jmp loc_49D910  +
mov eax 1 +
jmp loc_49D3BB  +
mov eax [esp+2Ch+var_10] +
jmp loc_49DA7F  +
mov [esp+2Ch+var_2C] ebp +
call sub_49FDD0  +
jmp loc_49D44D  +
mov eax [esp+2Ch+arg_0] +
mov ecx [ebp+14h] +
mov edx [ebp+8] +
mov eax [eax+30h] +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_28] edx +
mov [esp+2Ch+var_2C] eax +
call sub_49AD40  +
mov edi [esp+2Ch+arg_0] +
mov ecx [ebp+1Ch] +
mov [edi+30h] eax +
mov eax ecx +
jmp loc_49DFF3  +
mov eax [esp+2Ch+var_10] +
add ebx 7 +
jmp loc_49DA7F  +
mov eax [esp+2Ch+var_10] +
add ebx 2 +
jmp loc_49DA7F  +
mov eax [esp+2Ch+var_10] +
add ebx 6 +
jmp loc_49DA7F  +
mov eax [esp+2Ch+var_10] +
add ebx 5 +
jmp loc_49DA7F  +
mov eax [esp+2Ch+var_10] +
add ebx 4 +
jmp loc_49DA7F  +
mov eax [esp+2Ch+var_10] +
add ebx 3 +
jmp loc_49DA7F  +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 0 +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 0 +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 0 +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 0 +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 0 +
mov eax [ebp+14h] +
lea edx [eax+1] +
mov [ebp+14h] edx +
mov edx [ebp+84h] +
add eax [ebp+8] +
cmp edx 9 +
mov ecx eax +
mov eax 2 +
jz loc_49E182  +
cmp dword ptr [ebp+88h] 1 +
jle loc_49E1BA  +
mov eax 4 +
mov [ecx] al +
mov eax [ebp+14h] +
mov edx [ebp+8] +
lea ecx [eax+1] +
mov [ebp+14h] ecx +
mov byte ptr [edx+eax] 0Bh +
mov edx [ebp+14h] +
mov dword ptr [ebp+4] 71h +
jmp loc_49D1F4  +
cmp edx 1 +
jle loc_49DF8F  +
xor eax eax +
jmp loc_49DF94  +
mov eax ecx +
jmp loc_49DFE8  +
cmp edx 1 +
lea esi [esi+0] +
jle loc_49E17D  +
xor eax eax +
jmp loc_49E182  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov edx [esp+30h] +
mov esi [esp+34h] +
mov edi [esp+38h] +
test edx edx +
jz loc_49E2C0  +
mov ebx [edx+1Ch] +
test ebx ebx +
jz loc_49E2C0  +
cmp esi 0FFFFFFFFh +
jz loc_49E281  +
cmp esi 9 +
ja loc_49E2C0  +
cmp edi 4 +
ja loc_49E2C0  +
mov ecx [ebx+84h] +
cmp [ebx+88h] edi +
lea eax [ecx+ecx*2] +
mov eax ds:off_508EC8[eax*4] +
jz loc_49E290  +
mov ebp [edx+8] +
xor eax eax +
test ebp ebp +
jnz loc_49E2A0  +
cmp esi ecx +
jz loc_49E273  +
lea ecx [esi+esi*2] +
shl ecx 2 +
lea edx dword_508EC0[ecx] +
mov [ebx+84h] esi +
movzx esi word ptr [ecx+508EC2h] +
movzx ecx word ptr ds:dword_508EC0[ecx] +
mov [ebx+80h] esi +
mov [ebx+8Ch] ecx +
movzx ecx word ptr [edx+4] +
movzx edx word ptr [edx+6] +
mov [ebx+90h] ecx +
mov [ebx+7Ch] edx +
mov [ebx+88h] edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov esi 6 +
jmp loc_49E208  +
***
lea ebp [esi+esi*2] +
cmp ds:off_508EC8[ebp*4] eax +
jnz loc_49E229  +
xor eax eax +
jmp loc_49E232  +
***
mov dword ptr [esp+4] 5 +
mov [esp] edx +
call sub_49D150  +
mov ecx [ebx+84h] +
jmp loc_49E232  +
***
mov eax 0FFFFFFFEh +
jmp loc_49E279  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
test ebx ebx +
jz loc_49E3BD  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_49E3BD  +
mov esi [eax+4] +
cmp esi 2Ah +
jnz loc_49E384  +
mov edx [eax+8] +
test edx edx +
jz loc_49E311  +
mov ecx [ebx+28h] +
mov eax [ebx+24h] +
mov [esp+14h+var_10] edx +
mov [esp+14h+var_14] ecx +
call eax  +
mov eax [ebx+1Ch] +
mov edx [eax+44h] +
test edx edx +
jz loc_49E32A  +
mov ecx [ebx+28h] +
mov eax [ebx+24h] +
mov [esp+14h+var_10] edx +
mov [esp+14h+var_14] ecx +
call eax  +
mov eax [ebx+1Ch] +
mov edx [eax+40h] +
test edx edx +
jz loc_49E343  +
mov ecx [ebx+28h] +
mov eax [ebx+24h] +
mov [esp+14h+var_10] edx +
mov [esp+14h+var_14] ecx +
call eax  +
mov eax [ebx+1Ch] +
mov edx [eax+38h] +
test edx edx +
jz loc_49E35C  +
mov ecx [ebx+28h] +
mov eax [ebx+24h] +
mov [esp+14h+var_10] edx +
mov [esp+14h+var_14] ecx +
call eax  +
mov eax [ebx+1Ch] +
mov ecx [ebx+28h] +
mov edx [ebx+24h] +
mov [esp+14h+var_10] eax +
mov [esp+14h+var_14] ecx +
call edx  +
xor eax eax +
cmp esi 71h +
setnz al  +
mov dword ptr [ebx+1Ch] 0 +
lea eax [eax+eax*2-3] +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
cmp esi 45h +
jz loc_49E2F8  +
cmp esi 49h +
jz loc_49E2F8  +
cmp esi 5Bh +
jz loc_49E2F8  +
cmp esi 67h +
jz loc_49E2F8  +
cmp esi 71h +
jz loc_49E2F8  +
cmp esi 29Ah +
jz loc_49E2F8  +
mov eax 0FFFFFFFEh +
jmp loc_49E37E  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_10] +
mov esi [esp+2Ch+arg_0] +
mov edi [esp+2Ch+arg_4] +
mov ecx [esp+2Ch+arg_8] +
mov [esp+2Ch+var_18] eax +
mov eax [esp+2Ch+arg_14] +
mov ebp [esp+2Ch+arg_C] +
mov edx [esp+2Ch+arg_1C] +
mov [esp+2Ch+var_14] eax +
mov eax [esp+2Ch+arg_18] +
test eax eax +
jz loc_49E640  +
cmp byte ptr [eax] 31h +
jnz loc_49E640  +
cmp edx 38h +
jnz loc_49E640  +
test esi esi +
jz loc_49E650  +
mov eax [esi+20h] +
mov dword ptr [esi+18h] 0 +
test eax eax +
jz loc_49E670  +
mov ebx [esi+24h] +
test ebx ebx +
jz loc_49E660  +
cmp edi 0FFFFFFFFh +
mov eax 6 +
cmovz edi eax +
test ebp ebp +
js loc_49E630  +
cmp ebp 0Fh +
mov edx 1 +
jg loc_49E624  +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_10] edx +
sub eax 1 +
cmp eax 8 +
ja loc_49E650  +
cmp ecx 8 +
jnz loc_49E650  +
lea eax [ebp-8] +
cmp eax 7 +
ja loc_49E650  +
cmp edi 9 +
ja loc_49E650  +
cmp [esp+2Ch+var_14] 4 +
ja loc_49E650  +
mov ecx [esi+28h] +
cmp ebp 8 +
mov eax 9 +
cmovz ebp eax +
mov eax [esi+20h] +
mov [esp+2Ch+var_24] 16C4h +
mov [esp+2Ch+var_28] 1 +
mov [esp+2Ch+var_2C] ecx +
call eax  +
test eax eax +
mov ebx eax +
jz loc_49E6A1  +
mov edx [esp+2Ch+var_10] +
mov ecx ebp +
mov [esi+1Ch] eax +
mov [eax+30h] ebp +
mov [eax] esi +
mov [eax+18h] edx +
mov edx 1 +
shl edx cl +
mov dword ptr [eax+1Ch] 0 +
lea eax [edx-1] +
mov ebp edx +
mov [ebx+34h] eax +
mov eax [esp+2Ch+var_18] +
mov [ebx+2Ch] edx +
mov edx 1 +
lea ecx [eax+7] +
add eax 9 +
shl edx cl +
mov [ebx+50h] ecx +
mov ecx edx +
mov [ebx+4Ch] edx +
mov edx 0AAAAAAABh +
sub ecx 1 +
mul  edx +
mov eax [esi+20h] +
mov [ebx+54h] ecx +
shr edx 1 +
mov [ebx+58h] edx +
mov edx [esi+28h] +
mov [esp+2Ch+var_24] 2 +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] edx +
call eax  +
mov ecx [ebx+2Ch] +
mov edx [esi+28h] +
mov [ebx+38h] eax +
mov eax [esi+20h] +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_24] 2 +
call eax  +
mov ecx [ebx+4Ch] +
mov edx [esi+28h] +
mov [ebx+40h] eax +
mov eax [esi+20h] +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_24] 2 +
call eax  +
mov edx [esi+28h] +
mov dword ptr [ebx+16C0h] 0 +
mov [ebx+44h] eax +
mov eax [esp+2Ch+var_18] +
lea ecx [eax+6] +
mov eax 1 +
shl eax cl +
mov [ebx+169Ch] eax +
mov ecx eax +
mov eax [esi+20h] +
mov [esp+2Ch+var_28] ecx +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_24] 4 +
call eax  +
mov edx [ebx+169Ch] +
lea ecx ds:0[edx*4] +
mov [ebx+0Ch] ecx +
mov ecx [ebx+38h] +
mov [ebx+8] eax +
test ecx ecx +
jz loc_49E683  +
mov ebp [ebx+40h] +
test ebp ebp +
jz loc_49E683  +
mov ecx [ebx+44h] +
test ecx ecx +
jz loc_49E683  +
test eax eax +
jz loc_49E683  +
mov ecx edx +
and ecx 0FFFFFFFEh +
lea edx [edx+edx*2] +
add ecx eax +
add eax edx +
mov [ebx+1698h] eax +
mov eax [esp+2Ch+var_14] +
mov [ebx+16A4h] ecx +
mov [ebx+84h] edi +
mov byte ptr [ebx+24h] 8 +
mov [ebx+88h] eax +
mov [esp+2Ch+arg_0] esi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_49CE30  +
sub ebp 10h +
mov dl 2 +
jmp loc_49E45F  +
neg ebp  +
xor edx edx +
jmp loc_49E45F  +
mov eax 0FFFFFFFAh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
mov eax 0FFFFFFFEh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [esi+24h] offset loc_49A760 +
jmp loc_49E43E  +
mov dword ptr [esi+20h] offset loc_49A740 +
mov dword ptr [esi+28h] 0 +
jmp loc_49E433  +
mov eax ds:off_506CF8 +
mov dword ptr [ebx+4] 29Ah +
mov [esi+18h] eax +
mov [esp+2Ch+var_2C] esi +
call sub_49E2D0  +
mov eax 0FFFFFFFCh +
jmp loc_49E645  +
mov eax 0FFFFFFFCh +
jmp loc_49E645  +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_18] 0 +
mov [esp+2Ch+var_1C] 8 +
mov [esp+2Ch+var_20] 0Fh +
mov [esp+2Ch+var_10] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] 8 +
mov [esp+2Ch+var_14] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_49E3D0  +
add esp 2Ch +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+34h] +
mov ebp [esp+30h] +
test eax eax +
jz loc_49E995  +
test ebp ebp +
jz loc_49E995  +
mov edx [eax+1Ch] +
test edx edx +
mov [esp+0Ch] edx +
jz loc_49E995  +
mov ecx [eax] +
mov [ebp+0] ecx +
mov ecx [eax+4] +
mov [ebp+4] ecx +
mov ecx [eax+8] +
mov [ebp+8] ecx +
mov ecx [eax+0Ch] +
mov [ebp+0Ch] ecx +
mov ecx [eax+10h] +
mov [ebp+10h] ecx +
mov ecx [eax+14h] +
mov [ebp+14h] ecx +
mov ecx [eax+18h] +
mov [ebp+18h] ecx +
mov ecx [eax+1Ch] +
mov [ebp+1Ch] ecx +
mov ecx [eax+20h] +
mov [ebp+20h] ecx +
mov ebx [eax+24h] +
mov [ebp+24h] ebx +
mov ebx [eax+28h] +
mov [ebp+28h] ebx +
mov esi [eax+2Ch] +
mov [ebp+2Ch] esi +
mov esi [eax+30h] +
mov [ebp+30h] esi +
mov eax [eax+34h] +
mov [ebp+34h] eax +
mov [esp] ebx +
mov dword ptr [esp+8] 16C4h +
mov dword ptr [esp+4] 1 +
call ecx  +
test eax eax +
mov ebx eax +
jz loc_49E9B0  +
test bl 1 +
mov edi eax +
mov esi [esp+0Ch] +
mov [ebp+1Ch] eax +
mov eax 16C4h +
jnz loc_49E980  +
test edi 2 +
jnz loc_49E965  +
mov ecx eax +
shr ecx 2 +
test al 2 +
movs   +
jnz loc_49E950  +
test al 1 +
jnz loc_49E943  +
mov esi [ebx+2Ch] +
mov ecx [ebp+28h] +
mov eax [ebp+20h] +
mov [ebx] ebp +
mov [esp+4] esi +
mov [esp] ecx +
mov dword ptr [esp+8] 2 +
call eax  +
mov esi [ebx+2Ch] +
mov ecx [ebp+28h] +
mov [ebx+38h] eax +
mov eax [ebp+20h] +
mov [esp+4] esi +
mov [esp] ecx +
mov dword ptr [esp+8] 2 +
call eax  +
mov esi [ebx+4Ch] +
mov ecx [ebp+28h] +
mov [ebx+40h] eax +
mov eax [ebp+20h] +
mov [esp+4] esi +
mov [esp] ecx +
mov dword ptr [esp+8] 2 +
call eax  +
mov esi [ebx+169Ch] +
mov ecx [ebp+28h] +
mov [ebx+44h] eax +
mov eax [ebp+20h] +
mov [esp+4] esi +
mov dword ptr [esp+8] 4 +
mov [esp] ecx +
call eax  +
mov esi eax +
mov [ebx+8] eax +
mov eax [ebx+38h] +
test eax eax +
jz loc_49E9A0  +
mov ecx [ebx+40h] +
test ecx ecx +
jz loc_49E9A0  +
mov edx [ebx+44h] +
test edx edx +
jz loc_49E9A0  +
test esi esi +
jz loc_49E9A0  +
mov edi [esp+0Ch] +
mov ecx [ebx+2Ch] +
mov edx [edi+38h] +
add ecx ecx +
mov [esp+8] ecx +
mov [esp] eax +
mov [esp+4] edx +
call memcpy  +
mov ecx [ebx+2Ch] +
mov edx [edi+40h] +
mov eax [ebx+40h] +
add ecx ecx +
mov [esp+8] ecx +
mov [esp+4] edx +
mov [esp] eax +
call memcpy  +
mov ecx [ebx+4Ch] +
mov edx [edi+44h] +
mov eax [ebx+44h] +
add ecx ecx +
mov [esp+8] ecx +
mov [esp+4] edx +
mov [esp] eax +
call memcpy  +
mov ecx [ebx+0Ch] +
mov edx [edi+8] +
mov eax [ebx+8] +
mov [esp+8] ecx +
mov [esp+4] edx +
mov [esp] eax +
call memcpy  +
mov eax [edi+10h] +
mov edx [ebx+8] +
add eax edx +
sub eax [edi+8] +
mov [ebx+10h] eax +
mov eax [ebx+169Ch] +
mov ecx eax +
lea eax [eax+eax*2] +
and ecx 0FFFFFFFEh +
add edx eax +
add esi ecx +
lea eax [ebx+94h] +
mov [ebx+0B18h] eax +
lea eax [ebx+988h] +
mov [ebx+0B24h] eax +
lea eax [ebx+0A7Ch] +
mov [ebx+0B30h] eax +
xor eax eax +
mov [ebx+16A4h] esi +
mov [ebx+1698h] edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
movzx eax byte ptr [esi+ecx] +
mov [edi+ecx] al +
jmp loc_49E7DA  +
***
movzx ecx word ptr [esi] +
test al 1 +
mov [edi] cx +
mov ecx 2 +
jz loc_49E7DA  +
jmp loc_49E943  +
***
movzx ecx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] cx +
jmp loc_49E7C3  +
***
movzx eax byte ptr [esi] +
lea edi [ebx+1] +
lea esi [esi+1] +
mov [ebx] al +
mov eax 16C3h +
jmp loc_49E7B7  +
***
mov eax 0FFFFFFFEh +
jmp loc_49E93B  +
***
mov [esp] ebp +
call sub_49E2D0  +
mov eax 0FFFFFFFCh +
jmp loc_49E93B  +
***
mov eax 0FFFFFFFCh +
jmp loc_49E93B  +
***
mov edi edx +
push esi  +
push ebx  +
sub esp 18h +
mov edx [eax+1450h] +
lea ebp [ecx+2D4h] +
add ecx ecx +
mov ebx [eax+ebp*4+0Ch] +
cmp ecx edx +
mov [esp+20h+var_20] edx +
mov [esp+20h+var_10] ebx +
jg loc_49EA60  +
lea edx [edi+ebx*4] +
mov [esp+20h+var_18] edx +
jmp loc_49EA1A  +
mov edx [eax+ecx*4+0B5Ch] +
mov ebx ecx +
movzx esi word ptr [edi+edx*4] +
mov ecx [esp+20h+var_18] +
cmp [ecx] si +
jb loc_49EA60  +
jz loc_49EA70  +
lea ecx [ebx+ebx] +
cmp ecx [esp+20h+var_20] +
mov [eax+ebp*4+0Ch] edx +
lea ebp [ebx+2D4h] +
jg loc_49EA60  +
cmp ecx [esp+20h+var_20] +
jge loc_49E9F0  +
mov esi [eax+ecx*4+0B5Ch] +
lea ebx [ecx+1] +
mov edx [eax+ecx*4+0B60h] +
mov [esp+20h+var_14] esi +
movzx esi word ptr [edi+esi*4] +
mov word ptr [esp+20h+var_1C] si +
movzx esi word ptr [edi+edx*4] +
cmp si word ptr [esp+20h+var_1C] +
jb loc_49E9FD  +
jz loc_49EA95  +
mov ebx ecx +
mov ecx [esp+20h+var_18] +
movzx esi word ptr [esp+20h+var_1C] +
mov edx [esp+20h+var_14] +
cmp [ecx] si +
jnb loc_49EA06  +
nop   +
mov edi [esp+20h+var_10] +
mov [eax+ebp*4+0Ch] edi +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi [esp+20h+var_10] +
movzx ecx byte ptr [eax+edx+1458h] +
cmp [eax+esi+1458h] cl +
ja loc_49EA08  +
mov edi [esp+20h+var_10] +
mov [eax+ebp*4+0Ch] edi +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+20h+var_C] ebx +
mov ebx [esp+20h+var_14] +
mov [esp+20h+var_1C] ecx +
movzx ecx byte ptr [eax+edx+1458h] +
cmp cl [eax+ebx+1458h] +
mov ecx [esp+20h+var_1C] +
cmova edx ebx +
mov ebx [esp+20h+var_C] +
cmova ebx ecx +
jmp loc_49E9FD  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 4Ch +
mov eax [edx+8] +
mov ecx [edx] +
mov [esp+4Ch+var_44] edx +
mov ebp [eax+0Ch] +
mov edi [eax] +
mov [esp+4Ch+var_28] ecx +
mov dword ptr [ebx+1450h] 0 +
test ebp ebp +
mov dword ptr [ebx+1454h] 23Dh +
jle loc_49EF3C  +
mov edx ecx +
xor eax eax +
mov ecx 0FFFFFFFFh +
jmp loc_49EB3C  +
mov ecx [ebx+1450h] +
add edx 4 +
lea esi [ecx+1] +
mov [ebx+1450h] esi +
mov [ebx+ecx*4+0B60h] eax +
mov ecx eax +
mov byte ptr [ebx+eax+1458h] 0 +
add eax 1 +
cmp eax ebp +
jz loc_49EB52  +
cmp word ptr [edx] 0 +
jnz loc_49EB12  +
xor esi esi +
add eax 1 +
mov [edx+2] si +
add edx 4 +
cmp eax ebp +
jnz loc_49EB3C  +
mov esi ecx +
mov ecx [ebx+1450h] +
mov [esp+4Ch+var_4C] ebp +
mov ebp [esp+4Ch+var_28] +
jmp loc_49EB98  +
mov [ebx+ecx*4+0B5Ch] eax +
mov ecx 1 +
mov [ebp+edx+0] cx +
mov byte ptr [ebx+eax+1458h] 0 +
sub dword ptr [ebx+16A8h] 1 +
test edi edi +
jz loc_49EB92  +
movzx eax word ptr [edi+edx+2] +
sub [ebx+16ACh] eax +
mov ecx [ebx+1450h] +
cmp ecx 1 +
jg loc_49EBBD  +
add ecx 1 +
xor edx edx +
xor eax eax +
cmp esi 1 +
mov [ebx+1450h] ecx +
jg loc_49EB63  +
add esi 1 +
lea edx ds:0[esi*4] +
mov eax esi +
jmp loc_49EB63  +
mov edi [esp+4Ch+var_44] +
sar ecx 1 +
mov ebp [esp+4Ch+var_4C] +
mov [esp+4Ch+var_24] esi +
mov [edi+4] esi +
mov edi [esp+4Ch+var_28] +
mov esi ecx +
mov ecx esi +
mov edx edi +
mov eax ebx +
call sub_49E9C0  +
sub esi 1 +
jnz loc_49EBD3  +
mov eax [ebx+1450h] +
mov edi [esp+4Ch+var_28] +
jmp loc_49EBF2  +
mov ebp esi +
lea edx [eax-1] +
mov eax [ebx+eax*4+0B5Ch] +
mov ecx 1 +
mov esi [ebx+0B60h] +
mov [ebx+1450h] edx +
mov edx edi +
mov [ebx+0B60h] eax +
mov eax ebx +
call sub_49E9C0  +
mov edx [ebx+1454h] +
mov eax [ebx+0B60h] +
lea ecx [edx-2] +
mov [ebx+edx*4+0B58h] esi +
mov [ebx+1454h] ecx +
lea ecx [edi+esi*4] +
mov [ebx+edx*4+0B54h] eax +
mov edx ecx +
lea ecx [edi+eax*4] +
mov [esp+4Ch+var_48] ecx +
movzx ecx word ptr [ecx] +
add cx [edx] +
mov [edi+ebp*4] cx +
movzx ecx byte ptr [ebx+esi+1458h] +
mov byte ptr [esp+4Ch+var_4C] cl +
movzx ecx byte ptr [ebx+eax+1458h] +
movzx eax byte ptr [esp+4Ch+var_4C] +
lea esi [ecx+1] +
add eax 1 +
cmp byte ptr [esp+4Ch+var_4C] cl +
mov ecx 1 +
cmovb eax esi +
mov [ebx+ebp+1458h] al +
mov eax [esp+4Ch+var_48] +
lea esi [ebp+1] +
mov [eax+2] bp +
mov eax ebx +
mov [edx+2] bp +
mov edx edi +
mov [ebx+0B60h] ebp +
call sub_49E9C0  +
mov eax [ebx+1450h] +
cmp eax 1 +
jg loc_49EBF0  +
mov eax [ebx+1454h] +
mov ecx [ebx+0B60h] +
lea edx [eax-1] +
mov [ebx+1454h] edx +
xor edx edx +
mov [ebx+eax*4+0B58h] ecx +
mov eax [esp+4Ch+var_44] +
mov edi [eax] +
mov ebp [eax+4] +
mov eax [eax+8] +
mov [esp+4Ch+var_48] edi +
mov edi [eax] +
mov [esp+4Ch+var_30] edi +
mov edi [eax+4] +
mov [esp+4Ch+var_2C] edi +
mov edi [eax+8] +
mov eax [eax+10h] +
mov [esp+4Ch+var_38] edi +
xor esi esi +
mov [ebx+edx*2+0B3Ch] si +
add edx 1 +
cmp edx 10h +
jnz loc_49ECF6  +
mov edi [esp+4Ch+var_48] +
xor edx edx +
mov [edi+ecx*4+2] dx +
mov edx [ebx+1454h] +
lea ecx [edx+1] +
cmp ecx 23Ch +
jg loc_49EEC9  +
mov [esp+4Ch+var_44] ebp +
mov ebp [esp+4Ch+var_48] +
lea ecx [ebx+1450h] +
lea edi [ebx+edx*4+0B60h] +
mov [esp+4Ch+var_40] ecx +
mov [esp+4Ch+var_34] 0 +
mov [esp+4Ch+var_4C] eax +
mov [esp+4Ch+var_3C] ebx +
mov edx [edi] +
lea esi ds:0[edx*4] +
lea ecx [ebp+esi+0] +
movzx eax word ptr [ecx+2] +
movzx eax word ptr [ebp+eax*4+2] +
add eax 1 +
cmp [esp+4Ch+var_4C] eax +
jge loc_49ED76  +
add [esp+4Ch+var_34] 1 +
mov eax [esp+4Ch+var_4C] +
cmp [esp+4Ch+var_44] edx +
mov [ecx+2] ax +
jl loc_49EDCC  +
mov ebx [esp+4Ch+var_3C] +
add word ptr [ebx+eax*2+0B3Ch] 1 +
xor ebx ebx +
cmp [esp+4Ch+var_38] edx +
jg loc_49EDA0  +
mov ebx [esp+4Ch+var_2C] +
sub edx [esp+4Ch+var_38] +
mov ebx [ebx+edx*4] +
movzx edx word ptr [ecx] +
add eax ebx +
mov ecx ebx +
mov ebx [esp+4Ch+var_3C] +
imul eax edx +
add [ebx+16A8h] eax +
mov eax [esp+4Ch+var_30] +
test eax eax +
jz loc_49EDCC  +
movzx eax word ptr [eax+esi+2] +
add eax ecx +
imul eax edx +
add [ebx+16ACh] eax +
add edi 4 +
cmp edi [esp+4Ch+var_40] +
jnz loc_49ED50  +
mov edx [esp+4Ch+var_34] +
mov ebp [esp+4Ch+var_44] +
mov eax [esp+4Ch+var_4C] +
mov ebx [esp+4Ch+var_3C] +
test edx edx +
jz loc_49EEC9  +
lea ecx [eax-1] +
lea edi [eax+597h] +
lea esi [ebx+eax*2] +
mov [esp+4Ch+var_4C] ebp +
mov ebp edx +
mov [esp+4Ch+var_40] eax +
mov eax ecx +
mov [esp+4Ch+var_44] ecx +
movzx ecx word ptr [ebx+edi*2+0Ch] +
mov edx eax +
test cx cx +
jnz loc_49EE27  +
sub edx 1 +
movzx ecx word ptr [ebx+edx*2+0B3Ch] +
test cx cx +
jz loc_49EE17  +
sub ecx 1 +
sub ebp 2 +
add word ptr [ebx+edx*2+0B3Eh] 2 +
mov [ebx+edx*2+0B3Ch] cx +
movzx ecx word ptr [esi+0B3Ch] +
sub ecx 1 +
test ebp ebp +
mov [esi+0B3Ch] cx +
jg loc_49EE0B  +
mov eax [esp+4Ch+var_40] +
mov ebp [esp+4Ch+var_4C] +
test eax eax +
jz loc_49EEC9  +
mov edx 23Dh +
movzx ecx cx +
test ecx ecx +
jz loc_49EEAE  +
mov [esp+4Ch+var_4C] ebp +
lea esi [esi+0] +
sub edx 1 +
mov esi [ebx+edx*4+0B5Ch] +
cmp [esp+4Ch+var_4C] esi +
jl loc_49EEA7  +
mov edi [esp+4Ch+var_48] +
lea esi [edi+esi*4] +
movzx edi word ptr [esi+2] +
cmp edi eax +
jz loc_49EEA4  +
mov ebp eax +
sub ebp edi +
mov edi ebp +
movzx ebp word ptr [esi] +
imul edi ebp +
add [ebx+16A8h] edi +
mov [esi+2] ax +
sub ecx 1 +
test ecx ecx +
jnz loc_49EE70  +
mov ebp [esp+4Ch+var_4C] +
mov edi [esp+4Ch+var_44] +
test edi edi +
mov eax edi +
jz loc_49EEC9  +
movzx ecx word ptr [ebx+edi*2+0B3Ch] +
sub edi 1 +
mov [esp+4Ch+var_44] edi +
jmp loc_49EE63  +
add ebx 0B3Ch +
xor edx edx +
mov eax 1 +
add dx [ebx+eax*2-2] +
add edx edx +
mov [esp+eax*2+4Ch+var_20] dx +
add eax 1 +
cmp eax 10h +
jnz loc_49EED6  +
mov eax [esp+4Ch+var_24] +
mov esi [esp+4Ch+var_28] +
cmp eax 0FFFFFFFFh +
lea edi [esi+eax*4+4] +
jz loc_49EF34  +
nop   +
lea esi [esi+0] +
movzx edx word ptr [esi+2] +
test edx edx +
jz loc_49EF2D  +
movzx ecx [esp+edx*2+4Ch+var_20] +
xor ebx ebx +
lea eax [ecx+1] +
mov [esp+edx*2+4Ch+var_20] ax +
mov eax ecx +
and eax 1 +
or eax ebx +
shr ecx 1 +
sub edx 1 +
lea ebx [eax+eax] +
jnz loc_49EF17  +
shr ebx 1 +
mov [esi] bx +
add esi 4 +
cmp esi edi +
jnz loc_49EF00  +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+4Ch+var_4C] ebp +
xor ecx ecx +
mov esi 0FFFFFFFFh +
mov ebp [esp+4Ch+var_28] +
jmp loc_49EB98  +
***
push esi  +
push ebx  +
sub esp 8 +
movzx ebx word ptr [edx+2] +
lea esi ds:4[ecx*4] +
mov word ptr [edx+esi+2] 0FFFFh +
cmp ebx 1 +
sbb ebp ebp +
add ebp 4 +
cmp ebx 1 +
sbb edi edi +
and edi 83h +
add edi 7 +
test ecx ecx +
js loc_49F00C  +
add esi edx +
xor ecx ecx +
mov [esp+8+var_4] esi +
mov [esp+8+var_8] 0FFFFFFFFh +
jmp loc_49EFC5  +
add [eax+ebx*4+0A7Ch] cx +
test esi esi +
jz loc_49EFF7  +
cmp ebx esi +
setnz cl  +
movzx ebp cl +
movzx edi cl +
add ebp 3 +
add edi 6 +
xor ecx ecx +
add edx 4 +
cmp edx [esp+8+var_4] +
jz loc_49F00C  +
mov [esp+8+var_8] ebx +
mov ebx esi +
add ecx 1 +
movzx esi word ptr [edx+6] +
cmp ecx edi +
jge loc_49EFD4  +
cmp ebx esi +
jz loc_49F026  +
cmp ecx ebp +
jl loc_49EF98  +
test ebx ebx +
jz loc_49F014  +
cmp [esp+8+var_8] ebx +
nop   +
jz loc_49EFEB  +
add word ptr [eax+ebx*4+0A7Ch] 1 +
add word ptr [eax+0ABCh] 1 +
test esi esi +
jnz loc_49EFA4  +
xor ecx ecx +
add edx 4 +
cmp edx [esp+8+var_4] +
mov ebp 3 +
mov edi 8Ah +
jnz loc_49EFC0  +
add esp 8 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ecx 0Ah +
jg loc_49F030  +
add word ptr [eax+0AC0h] 1 +
jmp loc_49EFA0  +
mov ebx [esp+8+var_8] +
jmp loc_49EFB7  +
add word ptr [eax+0AC4h] 1 +
jmp loc_49EFA0  +
***
push edi  +
push esi  +
push ebx  +
sub esp 14h +
movzx eax word ptr [edx+2] +
cmp eax 1 +
sbb esi esi +
add esi 4 +
cmp eax 1 +
sbb ebx ebx +
and ebx 83h +
add ebx 7 +
test ecx ecx +
mov [esp+20h+var_1C] eax +
js loc_49F344  +
lea eax [edx+ecx*4+4] +
xor edi edi +
mov [esp+20h+var_14] edx +
mov edx 0FFFFFFFFh +
mov [esp+20h+var_20] edi +
mov edi ebp +
mov [esp+20h+var_10] eax +
mov eax [esp+20h+var_14] +
movzx eax word ptr [eax+6] +
mov [esp+20h+var_18] eax +
mov eax [esp+20h+var_20] +
lea ebp [eax+1] +
cmp ebp ebx +
jge loc_49F0AB  +
mov eax [esp+20h+var_18] +
cmp [esp+20h+var_1C] eax +
jz loc_49F440  +
cmp ebp esi +
jge loc_49F1A4  +
mov eax [esp+20h+var_1C] +
mov [esp+20h+var_20] ebp +
lea edx [edi+eax*4] +
mov ebp edx +
jmp loc_49F120  +
mov ebx edx +
shl ebx cl +
mov ecx ebx +
mov ebx [edi+14h] +
or cx [edi+16B8h] +
lea esi [ebx+1] +
mov [edi+14h] esi +
mov esi [edi+8] +
mov [edi+16B8h] cx +
mov [esi+ebx] cl +
mov ecx [edi+14h] +
mov esi [edi+8] +
lea ebx [ecx+1] +
mov [edi+14h] ebx +
movzx ebx byte ptr [edi+16B9h] +
mov [esi+ecx] bl +
mov ebx [edi+16BCh] +
mov ecx 10h +
sub ecx ebx +
sar edx cl +
sub [esp+20h+var_20] 1 +
lea eax [eax+ebx-10h] +
mov [edi+16B8h] dx +
mov [edi+16BCh] eax +
jz loc_49F156  +
movzx eax word ptr [ebp+0A7Eh] +
mov edx 10h +
mov ecx [edi+16BCh] +
sub edx eax +
cmp ecx edx +
movzx edx word ptr [ebp+0A7Ch] +
jg loc_49F0C1  +
shl edx cl +
add eax ecx +
or [edi+16B8h] dx +
sub [esp+20h+var_20] 1 +
mov [edi+16BCh] eax +
jnz loc_49F120  +
mov eax [esp+20h+var_18] +
test eax eax +
jz loc_49F320  +
mov eax [esp+20h+var_18] +
cmp [esp+20h+var_1C] eax +
mov [esp+20h+var_20] 0 +
setnz bl  +
movzx esi bl +
movzx ebx bl +
add esi 3 +
add ebx 6 +
add [esp+20h+var_14] 4 +
mov eax [esp+20h+var_10] +
cmp [esp+20h+var_14] eax +
jz loc_49F344  +
mov eax [esp+20h+var_18] +
mov edx [esp+20h+var_1C] +
mov [esp+20h+var_1C] eax +
jmp loc_49F087  +
mov ecx [esp+20h+var_1C] +
test ecx ecx +
jz loc_49F350  +
cmp edx [esp+20h+var_1C] +
jz loc_49F591  +
mov eax [esp+20h+var_1C] +
mov ebx 10h +
mov ecx [edi+16BCh] +
lea edx [edi+eax*4] +
movzx eax word ptr [edx+0A7Eh] +
sub ebx eax +
cmp ecx ebx +
movzx ebx word ptr [edx+0A7Ch] +
jle loc_49F574  +
mov edx [edi+14h] +
mov esi ebx +
shl esi cl +
mov ebp [edi+8] +
mov ecx esi +
or cx [edi+16B8h] +
lea esi [edx+1] +
mov [edi+14h] esi +
mov [edi+16B8h] cx +
mov [ebp+edx+0] cl +
mov edx [edi+14h] +
mov esi [edi+8] +
lea ecx [edx+1] +
mov [edi+14h] ecx +
movzx ecx byte ptr [edi+16B9h] +
mov [esi+edx] cl +
mov edx [edi+16BCh] +
mov ecx 10h +
sub ecx edx +
sar ebx cl +
lea ecx [eax+edx-10h] +
mov [edi+16B8h] bx +
mov [edi+16BCh] ecx +
movzx eax word ptr [edi+0ABEh] +
mov edx 10h +
sub edx eax +
cmp edx ecx +
movzx edx word ptr [edi+0ABCh] +
jge loc_49F450  +
mov esi edx +
mov ebp [edi+8] +
shl esi cl +
mov ecx [edi+14h] +
or ebx esi +
mov [edi+16B8h] bx +
lea esi [ecx+1] +
mov [edi+14h] esi +
mov [ebp+ecx+0] bl +
mov ecx [edi+14h] +
mov esi [edi+8] +
lea ebx [ecx+1] +
mov [edi+14h] ebx +
movzx ebx byte ptr [edi+16B9h] +
mov [esi+ecx] bl +
mov esi [edi+16BCh] +
mov ecx 10h +
sub ecx esi +
sar edx cl +
lea ecx [eax+esi-10h] +
cmp ecx 0Eh +
mov [edi+16B8h] dx +
mov [edi+16BCh] ecx +
jle loc_49F46C  +
mov ebp [esp+20h+var_20] +
mov esi [edi+14h] +
sub ebp 3 +
movzx ebp bp +
mov eax ebp +
shl eax cl +
or edx eax +
mov eax [edi+8] +
lea ecx [esi+1] +
mov [edi+16B8h] dx +
mov [edi+14h] ecx +
mov [eax+esi] dl +
mov eax [edi+14h] +
mov ecx [edi+8] +
lea edx [eax+1] +
mov [edi+14h] edx +
movzx edx byte ptr [edi+16B9h] +
mov [ecx+eax] dl +
mov eax [edi+16BCh] +
mov ecx 10h +
sub ecx eax +
sub eax 0Eh +
mov [edi+16BCh] eax +
mov eax [esp+20h+var_18] +
sar ebp cl +
mov [edi+16B8h] bp +
test eax eax +
jnz loc_49F162  +
lea esi [esi+0] +
add [esp+20h+var_14] 4 +
mov esi 3 +
mov eax [esp+20h+var_10] +
mov ebx 8Ah +
cmp [esp+20h+var_14] eax +
mov [esp+20h+var_20] 0 +
jnz loc_49F193  +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ebp 0Ah +
jg loc_49F490  +
movzx esi word ptr [edi+0AC2h] +
mov eax 10h +
mov ecx [edi+16BCh] +
sub eax esi +
cmp ecx eax +
jle loc_49F5A6  +
movzx ebx word ptr [edi+0AC0h] +
mov eax [edi+14h] +
mov edx ebx +
shl edx cl +
lea ecx [eax+1] +
mov [edi+14h] ecx +
mov ecx [edi+8] +
or dx [edi+16B8h] +
mov [edi+16B8h] dx +
mov [ecx+eax] dl +
mov eax [edi+14h] +
mov ecx [edi+8] +
lea edx [eax+1] +
mov [edi+14h] edx +
movzx edx byte ptr [edi+16B9h] +
mov [ecx+eax] dl +
mov edx [edi+16BCh] +
mov ecx 10h +
mov eax ebx +
sub ecx edx +
sar eax cl +
lea ecx [esi+edx-10h] +
cmp ecx 0Dh +
mov [edi+16B8h] ax +
mov [edi+16BCh] ecx +
jle loc_49F5CE  +
mov esi [esp+20h+var_20] +
mov edx [edi+14h] +
sub esi 2 +
movzx esi si +
mov ebx esi +
shl ebx cl +
mov ecx [edi+8] +
or eax ebx +
lea ebx [edx+1] +
mov [edi+16B8h] ax +
mov [edi+14h] ebx +
mov [ecx+edx] al +
mov eax [edi+14h] +
mov ecx [edi+8] +
lea edx [eax+1] +
mov [edi+14h] edx +
movzx edx byte ptr [edi+16B9h] +
mov [ecx+eax] dl +
mov eax [edi+16BCh] +
mov ecx 10h +
sub ecx eax +
sub eax 0Dh +
sar esi cl +
mov [edi+16B8h] si +
mov [edi+16BCh] eax +
jmp loc_49F156  +
mov [esp+20h+var_20] ebp +
mov [esp+20h+var_1C] edx +
jmp loc_49F180  +
shl edx cl +
add ecx eax +
or edx ebx +
cmp ecx 0Eh +
mov [edi+16B8h] dx +
mov [edi+16BCh] ecx +
jg loc_49F2B7  +
movzx ebp word ptr [esp+20h+var_20] +
sub ebp 3 +
movzx ebp bp +
shl ebp cl +
add ecx 2 +
or edx ebp +
mov [edi+16B8h] dx +
mov [edi+16BCh] ecx +
jmp loc_49F156  +
movzx esi word ptr [edi+0AC6h] +
mov eax 10h +
mov ecx [edi+16BCh] +
sub eax esi +
cmp ecx eax +
jle loc_49F610  +
movzx ebx word ptr [edi+0AC4h] +
mov eax [edi+14h] +
mov edx ebx +
shl edx cl +
lea ecx [eax+1] +
mov [edi+14h] ecx +
mov ecx [edi+8] +
or dx [edi+16B8h] +
mov [edi+16B8h] dx +
mov [ecx+eax] dl +
mov eax [edi+14h] +
mov ecx [edi+8] +
lea edx [eax+1] +
mov [edi+14h] edx +
movzx edx byte ptr [edi+16B9h] +
mov [ecx+eax] dl +
mov edx [edi+16BCh] +
mov ecx 10h +
mov eax ebx +
sub ecx edx +
sar eax cl +
lea ecx [esi+edx-10h] +
mov [edi+16B8h] ax +
mov [edi+16BCh] ecx +
cmp ecx 9 +
jle loc_49F5F0  +
mov esi [esp+20h+var_20] +
mov edx [edi+14h] +
sub esi 0Ah +
movzx esi si +
mov ebx esi +
shl ebx cl +
mov ecx [edi+8] +
or eax ebx +
lea ebx [edx+1] +
mov [edi+16B8h] ax +
mov [edi+14h] ebx +
mov [ecx+edx] al +
mov eax [edi+14h] +
mov ecx [edi+8] +
lea edx [eax+1] +
mov [edi+14h] edx +
movzx edx byte ptr [edi+16B9h] +
mov [ecx+eax] dl +
mov eax [edi+16BCh] +
mov ecx 10h +
sub ecx eax +
sub eax 9 +
sar esi cl +
mov [edi+16B8h] si +
mov [edi+16BCh] eax +
jmp loc_49F156  +
shl ebx cl +
add ecx eax +
or bx [edi+16B8h] +
mov [edi+16BCh] ecx +
mov [edi+16B8h] bx +
jmp loc_49F23E  +
mov ecx [edi+16BCh] +
movzx ebx word ptr [edi+16B8h] +
mov [esp+20h+var_20] ebp +
jmp loc_49F23E  +
movzx eax word ptr [edi+0AC0h] +
shl eax cl +
add ecx esi +
or ax [edi+16B8h] +
cmp ecx 0Dh +
mov [edi+16BCh] ecx +
mov [edi+16B8h] ax +
jg loc_49F3DE  +
lea edx [ebp-3] +
movzx edx dx +
shl edx cl +
add ecx 3 +
or eax edx +
mov [edi+16B8h] ax +
mov [edi+16BCh] ecx +
jmp loc_49F156  +
lea edx [ebp-0Bh] +
movzx edx dx +
shl edx cl +
add ecx 7 +
or eax edx +
mov [edi+16B8h] ax +
mov [edi+16BCh] ecx +
jmp loc_49F156  +
movzx eax word ptr [edi+0AC4h] +
shl eax cl +
add ecx esi +
or ax [edi+16B8h] +
mov [edi+16BCh] ecx +
mov [edi+16B8h] ax +
jmp loc_49F50C  +
***
push esi  +
push ebx  +
sub esp 18h +
mov ebp [eax+16BCh] +
mov [esp+18h+var_10] edx +
mov edx [eax+16A0h] +
mov [esp+18h+var_8] ecx +
test edx edx +
jnz loc_49F6B1  +
movzx esi word ptr [eax+16B8h] +
mov word ptr [esp+18h+var_18] si +
mov ebx [esp+18h+var_10] +
movzx edi word ptr [ebx+402h] +
mov ebx 10h +
mov edx ebx +
sub edx edi +
cmp edx ebp +
jl loc_49FA58  +
mov ebx [esp+18h+var_10] +
mov ecx ebp +
lea edx [edi+ebp] +
movzx esi word ptr [ebx+400h] +
mov [eax+16BCh] edx +
shl esi cl +
or si word ptr [esp+18h+var_18] +
mov [eax+16B8h] si +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx ebx word ptr [eax+16B8h] +
xor ecx ecx +
mov edx ecx +
mov ecx ebp +
mov esi ebx +
jmp loc_49F749  +
mov ebx [esp+18h+var_10] +
mov edi 10h +
lea ebx [ebx+edx*4] +
movzx edx word ptr [ebx+2] +
sub edi edx +
cmp edi ecx +
jge loc_49F9D8  +
movzx ebp word ptr [ebx] +
mov ebx ebp +
shl ebx cl +
mov ecx ebx +
mov ebx [eax+14h] +
or ecx esi +
mov esi [eax+8] +
mov [eax+16B8h] cx +
lea edi [ebx+1] +
mov [eax+14h] edi +
mov [esi+ebx] cl +
mov ecx [eax+14h] +
mov esi [eax+8] +
lea ebx [ecx+1] +
mov [eax+14h] ebx +
movzx ebx byte ptr [eax+16B9h] +
mov [esi+ecx] bl +
mov edi [eax+16BCh] +
mov ecx 10h +
mov esi ebp +
sub ecx edi +
sar esi cl +
lea ecx [edx+edi-10h] +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
mov edi [esp+18h+var_18] +
cmp edi [eax+16A0h] +
jnb loc_49F9B0  +
mov edx edi +
mov ebx [eax+16A4h] +
lea edi [edx+1] +
mov [esp+18h+var_18] edi +
mov edi [eax+1698h] +
movzx ebx word ptr [ebx+edx*2] +
movzx edx byte ptr [edi+edx] +
test ebx ebx +
jz loc_49F6C5  +
mov [esp+18h+var_C] edx +
mov edi [esp+18h+var_10] +
movzx edx ds:byte_5090A0[edx] +
lea edi [edi+edx*4+404h] +
movzx ebp word ptr [edi+2] +
mov [esp+18h+var_14] edx +
mov edx 10h +
movzx edi word ptr [edi] +
sub edx ebp +
cmp edx ecx +
jge loc_49F9C0  +
mov edx edi +
shl edx cl +
mov ecx [eax+14h] +
mov [esp+18h+var_4] edi +
mov edi [eax+8] +
or esi edx +
mov [eax+16B8h] si +
lea edx [ecx+1] +
mov [eax+14h] edx +
mov edx esi +
mov [edi+ecx] dl +
mov ecx [eax+14h] +
mov edi [eax+8] +
lea esi [ecx+1] +
mov [eax+14h] esi +
movzx esi byte ptr [eax+16B9h] +
mov edx esi +
mov esi [esp+18h+var_4] +
mov [edi+ecx] dl +
mov edi [eax+16BCh] +
mov ecx 10h +
sub ecx [eax+16BCh] +
sar esi cl +
lea ecx [ebp+edi-10h] +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
mov edi [esp+18h+var_14] +
mov ebp ds:dword_5099A0[edi*4] +
test ebp ebp +
jz loc_49F883  +
mov edx [esp+18h+var_14] +
mov edi [esp+18h+var_C] +
sub edi ds:dword_509020[edx*4] +
mov edx 10h +
sub edx ebp +
cmp edx ecx +
jge loc_49FA25  +
movzx edi di +
mov edx edi +
shl edx cl +
or esi edx +
mov edx [eax+14h] +
mov [eax+16B8h] si +
mov ecx esi +
lea esi [edx+1] +
mov [eax+14h] esi +
mov esi [eax+8] +
mov [esi+edx] cl +
mov edx [eax+14h] +
mov esi [eax+8] +
lea ecx [edx+1] +
mov [eax+14h] ecx +
movzx ecx byte ptr [eax+16B9h] +
mov [esi+edx] cl +
mov edx [eax+16BCh] +
mov ecx 10h +
mov esi edi +
sub ecx edx +
sar esi cl +
lea ecx [ebp+edx-10h] +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
lea edi [ebx-1] +
cmp edi 0FFh +
ja loc_49FA10  +
movzx ebx ds:byte_5091A0[edi] +
mov [esp+18h+var_14] ebx +
mov edx [esp+18h+var_14] +
mov ebx [esp+18h+var_8] +
lea ebx [ebx+edx*4] +
mov edx 10h +
movzx ebp word ptr [ebx+2] +
movzx ebx word ptr [ebx] +
sub edx ebp +
cmp edx ecx +
mov [esp+18h+var_C] ebp +
jge loc_49F9F3  +
mov ebp [eax+14h] +
mov edx ebx +
shl ebx cl +
mov ecx [eax+8] +
or ebx esi +
mov [eax+16B8h] bx +
lea esi [ebp+1] +
mov [eax+14h] esi +
mov [ecx+ebp] bl +
mov ecx [eax+14h] +
mov esi [eax+8] +
lea ebx [ecx+1] +
mov [eax+14h] ebx +
movzx ebx byte ptr [eax+16B9h] +
mov [esi+ecx] bl +
mov ebp [eax+16BCh] +
mov ecx 10h +
mov ebx [esp+18h+var_C] +
mov esi edx +
sub ecx ebp +
sar esi cl +
lea ecx [ebx+ebp-10h] +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
mov ebx [esp+18h+var_14] +
mov ebp ds:dword_509920[ebx*4] +
test ebp ebp +
jz loc_49F738  +
sub edi ds:dword_508FA0[ebx*4] +
mov ebx 10h +
sub ebx ebp +
cmp ebx ecx +
movzx edx di +
jge loc_49FA40  +
mov ebx edx +
shl ebx cl +
mov ecx ebx +
mov ebx [eax+14h] +
or ecx esi +
mov esi [eax+8] +
mov [eax+16B8h] cx +
lea edi [ebx+1] +
mov [eax+14h] edi +
mov [esi+ebx] cl +
mov ecx [eax+14h] +
mov esi [eax+8] +
lea ebx [ecx+1] +
mov [eax+14h] ebx +
movzx ebx byte ptr [eax+16B9h] +
mov [esi+ecx] bl +
mov edi [eax+16BCh] +
mov ecx 10h +
mov esi edx +
sub ecx edi +
sar esi cl +
lea ecx [ebp+edi-10h] +
mov edi [esp+18h+var_18] +
cmp edi [eax+16A0h] +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
jb loc_49F747  +
nop   +
lea esi [esi+0] +
mov ebp ecx +
mov word ptr [esp+18h+var_18] si +
jmp loc_49F66A  +
shl edi cl +
add ecx ebp +
or esi edi +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
jmp loc_49F7FD  +
movzx ebx word ptr [ebx] +
shl ebx cl +
add ecx edx +
or esi ebx +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
jmp loc_49F738  +
shl ebx cl +
add ecx [esp+18h+var_C] +
or esi ebx +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
jmp loc_49F91A  +
mov edx edi +
shr edx 7 +
movzx ebx ds:byte_5092A0[edx] +
mov [esp+18h+var_14] ebx +
jmp loc_49F89D  +
movzx edx di +
shl edx cl +
add ecx ebp +
or esi edx +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
jmp loc_49F883  +
shl edx cl +
add ecx ebp +
or esi edx +
mov [eax+16B8h] si +
mov [eax+16BCh] ecx +
jmp loc_49F738  +
mov esi [esp+18h+var_10] +
mov ecx ebp +
mov ebp [eax+8] +
movzx esi word ptr [esi+400h] +
mov edx esi +
shl edx cl +
mov ecx edx +
mov edx [eax+14h] +
or cx word ptr [esp+18h+var_18] +
mov [esp+18h+var_14] esi +
lea esi [edx+1] +
mov [eax+14h] esi +
mov [eax+16B8h] cx +
mov [ebp+edx+0] cl +
mov edx [eax+14h] +
movzx ecx byte ptr [eax+16B9h] +
mov ebp [eax+8] +
lea esi [edx+1] +
mov [eax+14h] esi +
mov [ebp+edx+0] cl +
mov edx [eax+16BCh] +
mov ebp [esp+18h+var_14] +
sub ebx edx +
mov ecx ebx +
sar ebp cl +
lea edx [edi+edx-10h] +
mov [eax+16B8h] bp +
mov [eax+16BCh] edx +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edx [eax+16BCh] +
push ebx  +
cmp edx 8 +
jg loc_49FB10  +
test edx edx +
jle loc_49FAF6  +
mov edx [eax+14h] +
mov ebx [eax+8] +
lea ecx [edx+1] +
mov [eax+14h] ecx +
movzx ecx word ptr [eax+16B8h] +
mov [ebx+edx] cl +
xor edx edx +
mov [eax+16B8h] dx +
mov dword ptr [eax+16BCh] 0 +
pop ebx  +
retn   +
mov edx [eax+14h] +
mov ebx [eax+8] +
lea ecx [edx+1] +
mov [eax+14h] ecx +
movzx ecx word ptr [eax+16B8h] +
mov [ebx+edx] cl +
mov edx [eax+14h] +
mov ecx [eax+8] +
lea ebx [edx+1] +
mov [eax+14h] ebx +
movzx ebx byte ptr [eax+16B9h] +
mov [ecx+edx] bl +
jmp loc_49FAF6  +
***
mov edx [eax+16BCh] +
push ebx  +
cmp edx 10h +
jz loc_49FB78  +
cmp edx 7 +
jle loc_49FB76  +
mov edx [eax+14h] +
mov ebx [eax+8] +
lea ecx [edx+1] +
mov [eax+14h] ecx +
movzx ecx word ptr [eax+16B8h] +
mov [ebx+edx] cl +
shr word ptr [eax+16B8h] 8 +
sub dword ptr [eax+16BCh] 8 +
pop ebx  +
retn   +
mov edx [eax+14h] +
mov ebx [eax+8] +
lea ecx [edx+1] +
mov [eax+14h] ecx +
movzx ecx word ptr [eax+16B8h] +
mov [ebx+edx] cl +
mov edx [eax+14h] +
mov ecx [eax+8] +
lea ebx [edx+1] +
mov [eax+14h] ebx +
movzx ebx byte ptr [eax+16B9h] +
mov [ecx+edx] bl +
xor edx edx +
mov [eax+16B8h] dx +
mov dword ptr [eax+16BCh] 0 +
pop ebx  +
retn   +
***
mov edx [esp+arg_0] +
lea eax [edx+94h] +
mov [edx+0B18h] eax +
lea eax [edx+988h] +
mov [edx+0B24h] eax +
lea eax [edx+0A7Ch] +
mov [edx+0B30h] eax +
xor eax eax +
mov [edx+16B8h] ax +
xor eax eax +
mov dword ptr [edx+0B20h] offset off_4C018C +
mov dword ptr [edx+0B2Ch] offset off_4C0178 +
mov dword ptr [edx+0B38h] offset unk_4C0164 +
mov dword ptr [edx+16BCh] 0 +
nop   +
lea esi [esi+0] +
xor ecx ecx +
mov [edx+eax*4+94h] cx +
add eax 1 +
cmp eax 11Eh +
jnz loc_49FC20  +
xor ax ax +
xor ecx ecx +
mov [edx+eax*4+988h] cx +
add eax 1 +
cmp eax 1Eh +
jnz loc_49FC37  +
xor al al +
nop   +
lea esi [esi+0] +
xor ecx ecx +
mov [edx+eax*4+0A7Ch] cx +
add eax 1 +
cmp eax 13h +
jnz loc_49FC50  +
mov eax 1 +
mov [edx+494h] ax +
mov dword ptr [edx+16ACh] 0 +
mov dword ptr [edx+16A8h] 0 +
mov dword ptr [edx+16B0h] 0 +
mov dword ptr [edx+16A0h] 0 +
retn   +
***
push esi  +
push ebx  +
mov ebx [esp+arg_0] +
mov esi [esp+arg_4] +
mov edi [esp+arg_8] +
movzx eax [esp+arg_C] +
mov ecx [ebx+16BCh] +
cmp ecx 0Dh +
jg loc_49FD53  +
shl eax cl +
add ecx 3 +
or [ebx+16B8h] ax +
mov [ebx+16BCh] ecx +
mov eax ebx +
call sub_49FAD0  +
mov eax [ebx+14h] +
lea ebp [esi+edi] +
mov edx [ebx+8] +
lea ecx [eax+1] +
mov [ebx+14h] ecx +
mov ecx edi +
mov [edx+eax] cl +
mov eax [ebx+14h] +
mov edx [ebx+8] +
lea ecx [eax+1] +
mov [ebx+14h] ecx +
mov ecx edi +
shr cx 8 +
mov [edx+eax] cl +
mov eax [ebx+14h] +
mov edx [ebx+8] +
lea ecx [eax+1] +
mov [ebx+14h] ecx +
mov ecx edi +
not ecx  +
mov [edx+eax] cl +
mov edx [ebx+14h] +
mov ecx [ebx+8] +
lea eax [edx+1] +
mov [ebx+14h] eax +
mov eax edi +
not eax  +
shr ax 8 +
test edi edi +
mov [ecx+edx] al +
jz loc_49FD4E  +
mov eax [ebx+14h] +
add esi 1 +
mov ecx [ebx+8] +
cmp esi ebp +
lea edx [eax+1] +
mov [ebx+14h] edx +
movzx edx byte ptr [esi-1] +
mov [ecx+eax] dl +
jnz loc_49FD34  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx eax +
shl edx cl +
mov ecx edx +
mov edx [ebx+14h] +
or cx [ebx+16B8h] +
lea ebp [edx+1] +
mov [ebx+14h] ebp +
mov ebp [ebx+8] +
mov [ebx+16B8h] cx +
mov [ebp+edx+0] cl +
mov edx [ebx+14h] +
movzx ecx byte ptr [ebx+16B9h] +
lea ebp [edx+1] +
mov [ebx+14h] ebp +
mov ebp [ebx+8] +
mov [ebp+edx+0] cl +
mov edx [ebx+16BCh] +
mov ecx 10h +
sub ecx edx +
sub edx 0Dh +
sar eax cl +
mov [ebx+16B8h] ax +
mov [ebx+16BCh] edx +
jmp loc_49FCD6  +
***
mov eax [esp+arg_0] +
jmp loc_49FB40  +
***
push ebx  +
mov eax [esp+arg_0] +
mov ecx [eax+16BCh] +
cmp ecx 0Dh +
jle loc_49FE55  +
mov ebx 2 +
mov edx [eax+14h] +
mov edi ebx +
mov esi [eax+8] +
shl edi cl +
mov ecx edi +
or cx [eax+16B8h] +
lea edi [edx+1] +
mov [eax+14h] edi +
mov [eax+16B8h] cx +
mov [esi+edx] cl +
mov edx [eax+14h] +
movzx ecx byte ptr [eax+16B9h] +
mov edi [eax+8] +
lea esi [edx+1] +
mov [eax+14h] esi +
mov [edi+edx] cl +
mov edx [eax+16BCh] +
mov ecx 10h +
sub ecx edx +
sar ebx cl +
lea ecx [edx-0Dh] +
cmp ecx 9 +
mov [eax+16B8h] bx +
mov [eax+16BCh] ecx +
jg loc_49FE71  +
add ecx 7 +
mov [eax+16BCh] ecx +
pop ebx  +
pop esi  +
pop edi  +
jmp loc_49FB40  +
mov edx 2 +
shl edx cl +
add ecx 3 +
or [eax+16B8h] dx +
cmp ecx 9 +
mov [eax+16BCh] ecx +
jle loc_49FE44  +
mov edx [eax+14h] +
movzx ecx word ptr [eax+16B8h] +
mov ebx [eax+8] +
lea esi [edx+1] +
mov [eax+14h] esi +
mov [ebx+edx] cl +
mov edx [eax+14h] +
mov ecx [eax+8] +
lea ebx [edx+1] +
mov [eax+14h] ebx +
movzx ebx byte ptr [eax+16B9h] +
mov [ecx+edx] bl +
xor edx edx +
sub dword ptr [eax+16BCh] 9 +
mov [eax+16B8h] dx +
pop ebx  +
pop esi  +
pop edi  +
jmp loc_49FB40  +
***
push esi  +
push ebx  +
sub esp 24h +
mov ebx [esp+24h+arg_0] +
mov eax [esp+24h+arg_C] +
mov edi [esp+24h+arg_4] +
mov esi [esp+24h+arg_8] +
mov ebp [ebx+84h] +
mov [esp+24h+var_C] eax +
test ebp ebp +
jle loc_4A031F  +
mov ecx [ebx] +
cmp dword ptr [ecx+2Ch] 2 +
jz loc_4A032B  +
lea edx [ebx+0B18h] +
mov eax ebx +
call sub_49EAD0  +
lea edx [ebx+0B24h] +
mov eax ebx +
call sub_49EAD0  +
mov ecx [ebx+0B1Ch] +
lea edx [ebx+94h] +
mov eax ebx +
call sub_49EF50  +
mov ecx [ebx+0B28h] +
lea edx [ebx+988h] +
mov eax ebx +
call sub_49EF50  +
mov eax ebx +
lea edx [ebx+0B30h] +
call sub_49EAD0  +
mov eax 12h +
movzx edx ds:byte_5098A0[eax] +
cmp word ptr [ebx+edx*4+0A7Eh] 0 +
jnz loc_4A02D4  +
sub eax 1 +
cmp eax 2 +
jnz loc_49FF47  +
mov ecx 9 +
mov edx [ebx+16A8h] +
lea ecx [ecx+edx+0Eh] +
mov edx [ebx+16ACh] +
mov [ebx+16A8h] ecx +
add ecx 0Ah +
shr ecx 3 +
add edx 0Ah +
shr edx 3 +
cmp ecx edx +
cmova ecx edx +
lea ebp [esi+4] +
cmp ecx ebp +
jb loc_4A004A  +
test edi edi +
jz loc_4A004A  +
mov eax [esp+24h+var_C] +
mov [esp+24h+var_1C] esi +
mov [esp+24h+var_20] edi +
mov [esp+24h+var_24] ebx +
mov [esp+24h+var_18] eax +
call sub_49FCA0  +
xor eax eax +
nop   +
xor edi edi +
mov [ebx+eax*4+94h] di +
add eax 1 +
cmp eax 11Eh +
jnz loc_49FFC0  +
xor ax ax +
xor esi esi +
mov [ebx+eax*4+988h] si +
add eax 1 +
cmp eax 1Eh +
jnz loc_49FFD7  +
xor al al +
nop   +
lea esi [esi+0] +
xor ecx ecx +
mov [ebx+eax*4+0A7Ch] cx +
add eax 1 +
cmp eax 13h +
jnz loc_49FFF0  +
mov edx [esp+24h+var_C] +
mov eax 1 +
mov [ebx+494h] ax +
mov dword ptr [ebx+16ACh] 0 +
mov dword ptr [ebx+16A8h] 0 +
test edx edx +
mov dword ptr [ebx+16B0h] 0 +
mov dword ptr [ebx+16A0h] 0 +
jnz loc_4A02C6  +
add esp 24h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp dword ptr [ebx+88h] 4 +
jz loc_4A02DD  +
cmp edx ecx +
jz loc_4A02DD  +
mov ecx [ebx+16BCh] +
cmp ecx 0Dh +
jg loc_4A039B  +
movzx edi word ptr [esp+24h+var_C] +
lea edx [edi+4] +
movzx edx dx +
shl edx cl +
add ecx 3 +
or dx [ebx+16B8h] +
mov [ebx+16BCh] ecx +
mov [ebx+16B8h] dx +
mov esi edx +
mov edi [ebx+0B28h] +
cmp ecx 0Bh +
lea ebp [eax+1] +
mov [esp+24h+var_8] edi +
mov edi [ebx+0B1Ch] +
mov [esp+24h+var_4] edi +
jle loc_4A04B6  +
lea edx [edi-100h] +
movzx edi dx +
mov edx edi +
shl edx cl +
mov ecx edx +
mov edx [ebx+14h] +
or ecx esi +
mov [ebx+16B8h] cx +
lea esi [edx+1] +
mov [ebx+14h] esi +
mov esi [ebx+8] +
mov [esi+edx] cl +
mov edx [ebx+14h] +
mov esi [ebx+8] +
lea ecx [edx+1] +
mov [ebx+14h] ecx +
movzx ecx byte ptr [ebx+16B9h] +
mov [esi+edx] cl +
mov esi [ebx+16BCh] +
mov ecx 10h +
sub ecx esi +
sar edi cl +
lea ecx [esi-0Bh] +
mov esi edi +
mov [ebx+16B8h] di +
mov [ebx+16BCh] ecx +
cmp ecx 0Bh +
jle loc_4A0498  +
movzx edi word ptr [esp+24h+var_8] +
mov edx edi +
shl edx cl +
mov ecx edx +
mov edx [ebx+14h] +
or ecx esi +
mov [ebx+16B8h] cx +
lea esi [edx+1] +
mov [ebx+14h] esi +
mov esi [ebx+8] +
mov [esi+edx] cl +
mov edx [ebx+14h] +
mov esi [ebx+8] +
lea ecx [edx+1] +
mov [ebx+14h] ecx +
movzx ecx byte ptr [ebx+16B9h] +
mov [esi+edx] cl +
mov esi [ebx+16BCh] +
mov ecx 10h +
sub ecx esi +
sar edi cl +
lea ecx [esi-0Bh] +
mov edx edi +
mov [ebx+16B8h] di +
mov [ebx+16BCh] ecx +
cmp ecx 0Ch +
jle loc_4A0477  +
sub eax 3 +
movzx edi ax +
mov eax edi +
shl eax cl +
mov ecx [ebx+8] +
or edx eax +
mov eax [ebx+14h] +
mov [ebx+16B8h] dx +
lea esi [eax+1] +
mov [ebx+14h] esi +
mov [ecx+eax] dl +
mov eax [ebx+14h] +
mov ecx [ebx+8] +
lea edx [eax+1] +
mov [ebx+14h] edx +
movzx edx byte ptr [ebx+16B9h] +
mov [ecx+eax] dl +
mov eax [ebx+16BCh] +
mov ecx 10h +
sub ecx eax +
sar edi cl +
lea ecx [eax-0Ch] +
mov [ebx+16B8h] di +
mov [ebx+16BCh] ecx +
xor eax eax +
mov [esp+24h+var_14] ebp +
jmp loc_4A025B  +
movzx edx word ptr [ebx+edx*4+0A7Eh] +
add eax 1 +
mov esi edx +
shl esi cl +
mov ecx [ebx+14h] +
or esi edi +
mov edi [ebx+8] +
mov [esp+24h+var_10] edx +
mov edx esi +
mov [ebx+16B8h] si +
lea ebp [ecx+1] +
mov [ebx+14h] ebp +
mov [edi+ecx] dl +
mov ecx [ebx+14h] +
mov esi [ebx+8] +
lea edi [ecx+1] +
mov [ebx+14h] edi +
movzx edi byte ptr [ebx+16B9h] +
mov edx edi +
mov [esi+ecx] dl +
mov esi [ebx+16BCh] +
mov ecx 10h +
mov edx [esp+24h+var_10] +
sub ecx esi +
sub esi 0Dh +
sar edx cl +
cmp [esp+24h+var_14] eax +
mov [ebx+16B8h] dx +
mov [ebx+16BCh] esi +
jle loc_4A0290  +
mov ecx [ebx+16BCh] +
movzx edi word ptr [ebx+16B8h] +
cmp ecx 0Dh +
movzx edx ds:byte_5098A0[eax] +
jg loc_4A01E0  +
movzx esi word ptr [ebx+edx*4+0A7Eh] +
add eax 1 +
shl esi cl +
add ecx 3 +
or esi edi +
cmp [esp+24h+var_14] eax +
mov [ebx+16B8h] si +
mov [ebx+16BCh] ecx +
jg loc_4A024E  +
mov ecx [esp+24h+var_4] +
lea esi [ebx+94h] +
mov eax ebx +
mov edx esi +
lea edi [ebx+988h] +
call sub_49F040  +
mov ecx [esp+24h+var_8] +
mov edx edi +
mov eax ebx +
call sub_49F040  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call sub_49F640  +
jmp loc_49FFBC  +
add esp 24h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_49FAD0  +
lea ecx [eax+eax*2+3] +
jmp loc_49FF6A  +
mov ecx [ebx+16BCh] +
cmp ecx 0Dh +
jg loc_4A0410  +
movzx eax word ptr [esp+24h+var_C] +
add eax 2 +
movzx eax ax +
shl eax cl +
add ecx 3 +
or [ebx+16B8h] ax +
mov [ebx+16BCh] ecx +
mov ecx offset unk_5093A0 +
mov edx offset unk_509420 +
mov eax ebx +
call sub_49F640  +
jmp loc_49FFBC  +
lea ecx [esi+5] +
xor eax eax +
mov edx ecx +
jmp loc_49FF91  +
xor eax eax +
mov edx 0F3FFC07Fh +
test dl 1 +
jz loc_4A0346  +
cmp word ptr [ebx+eax*4+94h] 0 +
jnz loc_4A04DF  +
add eax 1 +
shr edx 1 +
cmp eax 20h +
jnz loc_4A0332  +
cmp word ptr [ebx+0B8h] 0 +
mov edx 1 +
jnz loc_4A0393  +
cmp word ptr [ebx+0BCh] 0 +
jnz loc_4A0393  +
cmp word ptr [ebx+0C8h] 0 +
jz loc_4A0383  +
jmp loc_4A0393  +
add eax 1 +
cmp eax 100h +
jz loc_4A04DF  +
cmp word ptr [ebx+eax*4+94h] 0 +
jz loc_4A0375  +
mov edx 1 +
mov [ecx+2Ch] edx +
jmp loc_49FEF5  +
mov edi [esp+24h+var_C] +
lea edx [edi+4] +
movzx edx dx +
mov edi edx +
shl edi cl +
mov ecx [ebx+14h] +
mov esi edi +
mov edi [ebx+8] +
or si [ebx+16B8h] +
mov [esp+24h+var_14] edx +
lea ebp [ecx+1] +
mov edx esi +
mov [ebx+16B8h] si +
mov [ebx+14h] ebp +
mov [edi+ecx] dl +
mov ecx [ebx+14h] +
mov esi [ebx+8] +
lea edi [ecx+1] +
mov [ebx+14h] edi +
movzx edi byte ptr [ebx+16B9h] +
mov edx edi +
mov [esi+ecx] dl +
mov edi [ebx+16BCh] +
mov ecx 10h +
mov edx [esp+24h+var_14] +
sub ecx edi +
sar edx cl +
lea ecx [edi-0Dh] +
mov esi edx +
mov [ebx+16B8h] dx +
mov [ebx+16BCh] ecx +
jmp loc_4A0094  +
mov eax [esp+24h+var_C] +
mov esi [ebx+8] +
lea edx [eax+2] +
movzx edx dx +
mov eax edx +
shl eax cl +
mov ecx eax +
mov eax [ebx+14h] +
or cx [ebx+16B8h] +
lea edi [eax+1] +
mov [ebx+14h] edi +
mov [ebx+16B8h] cx +
mov [esi+eax] cl +
mov eax [ebx+14h] +
movzx ecx byte ptr [ebx+16B9h] +
mov edi [ebx+8] +
lea esi [eax+1] +
mov [ebx+14h] esi +
mov [edi+eax] cl +
mov eax [ebx+16BCh] +
mov ecx 10h +
sub ecx eax +
sub eax 0Dh +
sar edx cl +
mov [ebx+16B8h] dx +
mov [ebx+16BCh] eax +
jmp loc_4A0309  +
lea eax [ebp-4] +
movzx eax ax +
shl eax cl +
add ecx 4 +
or eax edx +
mov [ebx+16B8h] ax +
mov edi eax +
mov [ebx+16BCh] ecx +
jmp loc_4A01D5  +
movzx edx word ptr [esp+24h+var_8] +
shl edx cl +
add ecx 5 +
or edx esi +
mov [ebx+16B8h] dx +
mov [ebx+16BCh] ecx +
jmp loc_4A0175  +
movzx edi word ptr [esp+24h+var_4] +
lea edx [edi-100h] +
movzx edx dx +
shl edx cl +
add ecx 5 +
or edx esi +
mov [ebx+16B8h] dx +
mov esi edx +
mov [ebx+16BCh] ecx +
jmp loc_4A0112  +
xor edx edx +
jmp loc_4A0393  +
***
push esi  +
push ebx  +
mov eax [esp+0Ch] +
mov ecx [esp+10h] +
mov ebx [esp+14h] +
mov edx [eax+16A0h] +
mov esi [eax+16A4h] +
test ecx ecx +
mov [esi+edx*2] cx +
lea esi [edx+1] +
mov [eax+16A0h] esi +
mov esi [eax+1698h] +
mov [esi+edx] bl +
jz loc_4A0580  +
movzx edx ds:byte_5090A0[ebx] +
lea esi [ecx-1] +
add dword ptr [eax+16B0h] 1 +
add word ptr [eax+edx*4+498h] 1 +
cmp esi 0FFh +
jbe loc_4A0571  +
shr esi 7 +
movzx edx ds:byte_5092A0[esi] +
add word ptr [eax+edx*4+988h] 1 +
mov ebx [eax+169Ch] +
lea edx [ebx-1] +
cmp [eax+16A0h] edx +
pop ebx  +
pop esi  +
setz al  +
movzx eax al +
retn   +
***
movzx edx ds:byte_50919F[ecx] +
jmp loc_4A0550  +
***
add word ptr [eax+ebx*4+94h] 1 +
jmp loc_4A0559  +
***
mov eax [esp+arg_0] +
mov off_4C01A0 eax +
retn   +
***
sub esp 2Ch +
sub esp 18h +
sub esp 14h +
sub esp 18h +
sub esp 14h +
mov ebx [esp+14h+arg_0] +
mov [esp+14h+var_14] ebx +
call strlen  +
lea esi [eax+1] +
mov [esp+14h+var_14] esi +
call sub_4A05F0  +
mov [esp+14h+var_C] esi +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] eax +
call memcpy  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov edi dword_4C01AC +
mov [esp+14h+var_10] eax +
mov eax ds:dword_5141F0 +
mov esi ds:dword_5141EC +
mov [esp+14h+var_4] edi +
mov [esp+14h+var_14] edi +
mov edi eax +
mov [esp+14h+var_8] eax +
lea esi [esi+0] +
cmp esi edi +
jle loc_4A0775  +
cmp [esp+14h+var_14] esi +
jle loc_4A0775  +
mov edx [esp+14h+var_14] +
mov ebp esi +
sub ebp edi +
sub edx esi +
cmp edx ebp +
jg loc_4A0794  +
test edx edx +
jle loc_4A07CD  +
mov ebx [esp+14h+var_10] +
lea eax [ebx+edi*4] +
add edi edx +
lea edx [ebx+edi*4] +
lea esi [esi+0] +
mov ecx [eax] +
mov ebx [eax+ebp*4] +
mov [eax] ebx +
mov [eax+ebp*4] ecx +
add eax 4 +
cmp eax edx +
jnz loc_4A0760  +
cmp esi edi +
jg loc_4A0734  +
mov edi [esp+14h+var_4] +
mov eax edi +
sub eax esi +
add eax [esp+14h+var_8] +
mov ds:dword_5141EC edi +
mov ds:dword_5141F0 eax +
add esp 14h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ebp ebp +
jle loc_4A07C5  +
mov ebx [esp+14h+var_10] +
lea edx [ebp+edi+0] +
mov [esp+14h+var_C] esi +
lea eax [ebx+edi*4] +
lea ebx [ebx+edx*4] +
mov edx [esp+14h+var_14] +
sub edx esi +
nop   +
mov ecx [eax] +
mov esi [eax+edx*4] +
mov [eax] esi +
mov [eax+edx*4] ecx +
add eax 4 +
cmp eax ebx +
jnz loc_4A07B0  +
mov esi [esp+14h+var_C] +
sub [esp+14h+var_14] ebp +
jmp loc_4A0730  +
add edi edx +
jmp loc_4A0730  +
***
push esi  +
push ebx  +
sub esp 4Ch +
mov eax dword_4C01AC +
mov ds:dword_5141E8 0 +
test eax eax +
jnz loc_4A0A40  +
mov dword_4C01AC 1 +
mov eax 1 +
mov [esp+4Ch+var_4C] offset aPosixly_correc +
mov ds:dword_5141EC eax +
mov ds:dword_5141F0 eax +
mov ds:dword_5141FC 0 +
call getenv  +
mov edi [esp+4Ch+arg_8] +
movzx edx byte ptr [edi] +
mov ds:dword_5141F4 eax +
cmp dl 2Dh +
jz loc_4A0CD3  +
cmp dl 2Bh +
jz loc_4A0C82  +
test eax eax +
setz al  +
movzx eax al +
mov ds:dword_5141F8 eax +
mov ds:dword_5141E4 1 +
mov edx ds:dword_5141FC +
test edx edx +
jz loc_4A0A53  +
movzx eax byte ptr [edx] +
test al al +
mov byte ptr [esp+4Ch+var_2C] al +
jz loc_4A0A53  +
mov [esp+4Ch+var_34] edx +
mov ecx [esp+4Ch+arg_C] +
test ecx ecx +
jz loc_4A0B04  +
mov eax dword_4C01AC +
lea edi ds:0[eax*4] +
mov [esp+4Ch+var_10] edi +
mov edi [esp+4Ch+arg_4] +
mov [esp+4Ch+var_24] eax +
mov eax [edi+eax*4] +
mov [esp+4Ch+var_20] eax +
movzx eax byte ptr [eax+1] +
cmp al 2Dh +
mov [esp+4Ch+var_19] al +
jz loc_4A0902  +
mov edx [esp+4Ch+arg_14] +
test edx edx +
jz loc_4A0B04  +
mov eax [esp+4Ch+var_20] +
cmp byte ptr [eax+2] 0 +
jnz loc_4A0902  +
mov eax [esp+4Ch+arg_8] +
movzx ecx byte ptr [eax] +
test cl cl +
jz loc_4A0902  +
movzx ebx [esp+4Ch+var_19] +
cmp bl cl +
jnz loc_4A08F8  +
jmp loc_4A11BA  +
cmp bl dl +
jz loc_4A0E73  +
add eax 1 +
movzx edx byte ptr [eax] +
test dl dl +
jnz loc_4A08F0  +
movzx eax byte ptr [esp+4Ch+var_2C] +
mov esi [esp+4Ch+var_34] +
test al al +
jz loc_4A0923  +
cmp al 3Dh +
jnz loc_4A0919  +
jmp loc_4A0923  +
test al al +
jz loc_4A0923  +
add esi 1 +
movzx eax byte ptr [esi] +
cmp al 3Dh +
jnz loc_4A0915  +
mov eax [esp+4Ch+arg_C] +
mov ebp [eax] +
test ebp ebp +
jz loc_4A0DD2  +
mov eax esi +
mov ebx [esp+4Ch+arg_C] +
xor edi edi +
sub eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_18] esi +
mov [esp+4Ch+var_14] 0FFFFFFFFh +
mov [esp+4Ch+var_28] 0 +
mov esi eax +
mov [esp+4Ch+var_30] 0 +
jmp loc_4A0974  +
mov [esp+4Ch+var_28] 1 +
add ebx 10h +
mov ebp [ebx] +
add edi 1 +
test ebp ebp +
jz loc_4A09B8  +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_48] eax +
call strncmp  +
test eax eax +
jnz loc_4A0968  +
mov [esp+4Ch+var_4C] ebp +
call strlen  +
cmp eax esi +
jz loc_4A0DA3  +
mov eax [esp+4Ch+var_30] +
test eax eax +
jnz loc_4A0960  +
mov [esp+4Ch+var_30] ebx +
add ebx 10h +
mov ebp [ebx] +
mov [esp+4Ch+var_14] edi +
add edi 1 +
test ebp ebp +
jnz loc_4A0974  +
mov eax [esp+4Ch+var_28] +
mov esi [esp+4Ch+var_18] +
test eax eax +
jz loc_4A0D40  +
mov eax dword_4C01A8 +
mov esi [esp+4Ch+var_24] +
mov ebx [esp+4Ch+var_34] +
test eax eax +
jz loc_4A0A0F  +
mov eax [esp+4Ch+arg_4] +
mov ecx [esp+4Ch+var_20] +
mov eax [eax] +
mov [esp+4Ch+var_40] ecx +
mov [esp+4Ch+var_48] offset aSOptionSIsAmbi +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov ebx ds:dword_5141FC +
mov esi dword_4C01AC +
mov [esp+4Ch+var_4C] ebx +
add esi 1 +
call strlen  +
mov dword_4C01AC esi +
mov dword_4C01A4 0 +
add ebx eax +
mov eax 3Fh +
mov ds:dword_5141FC ebx +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi ds:dword_5141E4 +
test esi esi +
jz loc_4A080D  +
jmp loc_4A0862  +
mov eax dword_4C01AC +
cmp ds:dword_5141EC eax +
jle loc_4A0A65  +
mov ds:dword_5141EC eax +
cmp eax ds:dword_5141F0 +
jge loc_4A0A72  +
mov ds:dword_5141F0 eax +
mov ebx ds:dword_5141F8 +
cmp ebx 1 +
jz loc_4A0BF0  +
cmp [esp+4Ch+arg_0] eax +
jz loc_4A0C5C  +
mov edi [esp+4Ch+arg_4] +
mov ecx 3 +
mov ebp [edi+eax*4] +
mov edi offset asc_509E70 +
mov esi ebp +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jnz loc_4A0BC0  +
mov edx ds:dword_5141F0 +
add eax 1 +
mov ecx ds:dword_5141EC +
mov dword_4C01AC eax +
cmp edx ecx +
jz loc_4A0DB0  +
cmp eax ecx +
jz loc_4A0AE1  +
mov eax [esp+4Ch+arg_4] +
call sub_4A0700  +
mov edx ds:dword_5141F0 +
mov eax [esp+4Ch+arg_0] +
cmp eax edx +
mov ds:dword_5141EC eax +
mov dword_4C01AC eax +
jnz loc_4A0C6F  +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+4Ch+arg_8] +
mov ecx [esp+4Ch+var_34] +
movzx eax byte ptr [eax] +
add ecx 1 +
mov ds:dword_5141FC ecx +
test al al +
jz loc_4A0B42  +
movzx ebx byte ptr [esp+4Ch+var_2C] +
cmp bl al +
jz loc_4A1031  +
mov eax [esp+4Ch+arg_8] +
jmp loc_4A0B38  +
cmp dl bl +
jz loc_4A0CE7  +
add eax 1 +
movzx edx byte ptr [eax] +
test dl dl +
jnz loc_4A0B30  +
mov edx 1 +
xor eax eax +
mov edi [esp+4Ch+var_34] +
cmp byte ptr [edi+1] 0 +
jnz loc_4A0B5A  +
add dword_4C01AC 1 +
test dl dl +
jz loc_4A0D11  +
mov ecx dword_4C01A8 +
test ecx ecx +
jz loc_4A0D31  +
mov eax [esp+4Ch+arg_4] +
mov edx ds:dword_5141F4 +
movsx ebx byte ptr [esp+4Ch+var_2C] +
mov eax [eax] +
test edx edx +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_44] eax +
jz loc_4A0FAB  +
mov [esp+4Ch+var_48] offset aSIllegalOption +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax ebx +
mov dword_4C01A4 eax +
add esp 4Ch +
mov eax 3Fh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [ebp+0] 2Dh +
jz loc_4A0C96  +
test ebx ebx +
jz loc_4A0AF7  +
add eax 1 +
mov dword_4C01AC eax +
mov eax 1 +
mov ds:dword_5141E8 ebp +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx ds:dword_5141F0 +
mov edx ds:dword_5141EC +
cmp ecx edx +
jz loc_4A0E61  +
cmp eax edx +
jz loc_4A0C16  +
mov eax [esp+4Ch+arg_4] +
call sub_4A0700  +
mov eax dword_4C01AC +
cmp [esp+4Ch+arg_0] eax +
mov edx eax +
jle loc_4A0C4C  +
mov esi [esp+4Ch+arg_0] +
mov ecx [esp+4Ch+arg_4] +
jmp loc_4A0C39  +
add edx 1 +
cmp edx esi +
mov dword_4C01AC edx +
jz loc_4A0D00  +
mov eax [ecx+edx*4] +
cmp byte ptr [eax] 2Dh +
jnz loc_4A0C28  +
cmp byte ptr [eax+1] 0 +
jz loc_4A0C28  +
mov eax dword_4C01AC +
mov ds:dword_5141EC edx +
cmp [esp+4Ch+arg_0] eax +
jnz loc_4A0A8B  +
mov eax ds:dword_5141EC +
mov edx ds:dword_5141F0 +
cmp eax edx +
jz loc_4A0AF7  +
mov dword_4C01AC edx +
add esp 4Ch +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ds:dword_5141F8 0 +
add [esp+4Ch+arg_8] 1 +
jmp loc_4A0858  +
movzx ecx byte ptr [ebp+1] +
test cl cl +
jz loc_4A0BCA  +
mov ebx [esp+4Ch+arg_C] +
test ebx ebx +
jz loc_4A0E57  +
xor eax eax +
cmp cl 2Dh +
setz al  +
add eax 1 +
lea edx [ebp+eax+0] +
movzx eax byte ptr [edx] +
mov ds:dword_5141FC edx +
mov [esp+4Ch+var_34] edx +
mov byte ptr [esp+4Ch+var_2C] al +
jmp loc_4A0883  +
mov ds:dword_5141F8 2 +
add [esp+4Ch+arg_8] 1 +
jmp loc_4A0858  +
test eax eax +
setz dl  +
cmp byte ptr [esp+4Ch+var_2C] 3Ah +
setz bl  +
or edx ebx +
jmp loc_4A0B49  +
mov eax [esp+4Ch+arg_0] +
mov edx eax +
mov ds:dword_5141EC edx +
jmp loc_4A0C52  +
cmp byte ptr [eax] 57h +
movzx edx byte ptr [eax+1] +
jz loc_4A0E87  +
cmp dl 3Ah +
jz loc_4A0F72  +
movsx eax byte ptr [esp+4Ch+var_2C] +
jmp loc_4A0BE5  +
movsx eax byte ptr [esp+4Ch+var_2C] +
jmp loc_4A0BAB  +
mov ebx [esp+4Ch+var_30] +
test ebx ebx +
jz loc_4A0DD2  +
mov edi [esp+4Ch+var_14] +
mov eax [esp+4Ch+var_24] +
add eax 1 +
mov dword_4C01AC eax +
cmp byte ptr [esi] 0 +
jnz loc_4A0DBC  +
cmp dword ptr [ebx+4] 1 +
jz loc_4A107B  +
mov esi [esp+4Ch+var_34] +
mov [esp+4Ch+var_4C] esi +
call strlen  +
mov ebp [esp+4Ch+arg_10] +
add eax esi +
test ebp ebp +
mov ds:dword_5141FC eax +
jz loc_4A0D8C  +
mov eax [esp+4Ch+arg_10] +
mov [eax] edi +
mov eax [ebx+8] +
test eax eax +
jz loc_4A10CD  +
mov edx [ebx+0Ch] +
mov [eax] edx +
xor eax eax +
jmp loc_4A0BE5  +
mov esi [esp+4Ch+var_18] +
jmp loc_4A0D50  +
mov ds:dword_5141F0 eax +
mov edx eax +
jmp loc_4A0AE1  +
mov eax [ebx+4] +
test eax eax +
jz loc_4A0FB8  +
add esi 1 +
mov ds:dword_5141E8 esi +
jmp loc_4A0D6B  +
mov edi [esp+4Ch+arg_14] +
test edi edi +
jnz loc_4A11C4  +
mov esi dword_4C01A8 +
mov eax [esp+4Ch+var_24] +
test esi esi +
jz loc_4A0E31  +
cmp [esp+4Ch+var_19] 2Dh +
jz loc_4A131E  +
mov eax [esp+4Ch+arg_4] +
mov edi [esp+4Ch+var_34] +
mov ecx [esp+4Ch+var_20] +
mov eax [eax] +
mov [esp+4Ch+var_3C] edi +
movsx edx byte ptr [ecx] +
mov [esp+4Ch+var_48] offset aSUnrecognizedO +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
mov [esp+4Ch+var_40] edx +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax dword_4C01AC +
add eax 1 +
mov dword_4C01AC eax +
mov eax 3Fh +
mov ds:dword_5141FC offset unk_509F5C +
mov dword_4C01A4 0 +
jmp loc_4A0BE5  +
mov eax 1 +
jmp loc_4A0CB9  +
cmp eax ecx +
jz loc_4A0C16  +
mov ds:dword_5141F0 eax +
jmp loc_4A0C16  +
mov eax ecx +
mov ecx [esp+4Ch+var_34] +
add ecx 1 +
mov ds:dword_5141FC ecx +
jmp loc_4A0B1C  +
cmp dl 3Bh +
jnz loc_4A0D1E  +
mov eax [esp+4Ch+var_34] +
cmp byte ptr [eax+1] 0 +
jz loc_4A118D  +
add dword_4C01AC 1 +
mov ds:dword_5141E8 ecx +
mov [esp+4Ch+var_34] ecx +
mov eax [esp+4Ch+var_34] +
movzx ebx byte ptr [eax] +
mov ds:dword_5141FC eax +
cmp bl 3Dh +
jz loc_4A1463  +
test bl bl +
jz loc_4A1463  +
mov esi eax +
jmp loc_4A0ED4  +
test bl bl +
jz loc_4A0EDF  +
add esi 1 +
movzx ebx byte ptr [esi] +
cmp bl 3Dh +
jnz loc_4A0ED0  +
mov eax [esp+4Ch+arg_C] +
mov ebp [eax] +
test ebp ebp +
jz loc_4A144F  +
mov eax esi +
xor edi edi +
sub eax [esp+4Ch+var_34] +
mov byte ptr [esp+4Ch+var_24] bl +
mov ebx [esp+4Ch+arg_C] +
mov [esp+4Ch+var_20] esi +
mov [esp+4Ch+var_28] 0 +
mov esi eax +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_30] 0 +
jmp loc_4A0F38  +
mov [esp+4Ch+var_2C] 1 +
add ebx 10h +
mov ebp [ebx] +
add edi 1 +
test ebp ebp +
jz loc_4A10D5  +
mov eax [esp+4Ch+var_34] +
mov [esp+4Ch+var_44] esi +
mov [esp+4Ch+var_4C] ebp +
mov [esp+4Ch+var_48] eax +
call strncmp  +
test eax eax +
jnz loc_4A0F28  +
mov [esp+4Ch+var_4C] ebp +
call strlen  +
cmp eax esi +
jz loc_4A1302  +
mov ebp [esp+4Ch+var_30] +
test ebp ebp +
jnz loc_4A0F20  +
mov [esp+4Ch+var_28] edi +
mov [esp+4Ch+var_30] ebx +
jmp loc_4A0F28  +
cmp byte ptr [eax+2] 3Ah +
mov eax [esp+4Ch+var_34] +
jz loc_4A10A7  +
cmp byte ptr [eax+1] 0 +
jz loc_4A104D  +
add dword_4C01AC 1 +
movsx eax byte ptr [esp+4Ch+var_2C] +
mov ds:dword_5141E8 ecx +
mov ds:dword_5141FC 0 +
jmp loc_4A0BE5  +
mov [esp+4Ch+var_48] offset aSInvalidOption +
jmp loc_4A0B99  +
mov eax dword_4C01A8 +
test eax eax +
jz loc_4A0D6B  +
mov eax [esp+4Ch+arg_4] +
mov edi [esp+4Ch+var_24] +
mov eax [eax+edi*4] +
cmp byte ptr [eax+1] 2Dh +
jz loc_4A1224  +
mov ecx [ebx] +
mov edi [esp+4Ch+arg_4] +
mov edx [edi] +
mov [esp+4Ch+var_3C] ecx +
movsx eax byte ptr [eax] +
mov [esp+4Ch+var_48] offset aSOptionCSDoesn +
mov [esp+4Ch+var_44] edx +
mov [esp+4Ch+var_40] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov esi ds:dword_5141FC +
mov [esp+4Ch+var_4C] esi +
call strlen  +
add esi eax +
mov eax [ebx+0Ch] +
mov ds:dword_5141FC esi +
mov dword_4C01A4 eax +
mov eax 3Fh +
jmp loc_4A0BE5  +
mov ebx [esp+4Ch+arg_8] +
cmp byte ptr [esp+4Ch+var_2C] 3Ah +
setz dl  +
test ebx ebx +
setz al  +
or edx eax +
mov eax [esp+4Ch+arg_8] +
jmp loc_4A0B49  +
mov eax dword_4C01AC +
cmp eax [esp+4Ch+arg_0] +
jz loc_4A1251  +
mov ecx [esp+4Ch+arg_4] +
lea edx [eax+1] +
mov dword_4C01AC edx +
mov eax [ecx+eax*4] +
mov ds:dword_5141E8 eax +
movsx eax byte ptr [esp+4Ch+var_2C] +
jmp loc_4A0F9C  +
cmp [esp+4Ch+arg_0] eax +
jle loc_4A114D  +
mov eax [esp+4Ch+var_24] +
mov ecx [esp+4Ch+var_10] +
add eax 2 +
mov dword_4C01AC eax +
mov eax [esp+4Ch+arg_4] +
mov eax [eax+ecx+4] +
mov ds:dword_5141E8 eax +
jmp loc_4A0D6B  +
cmp byte ptr [eax+1] 0 +
jz loc_4A1215  +
add dword_4C01AC 1 +
mov ds:dword_5141E8 ecx +
mov ds:dword_5141FC 0 +
jmp loc_4A0D27  +
mov eax [ebx+0Ch] +
jmp loc_4A0BE5  +
mov edi [esp+4Ch+var_2C] +
movzx ebx byte ptr [esp+4Ch+var_24] +
mov esi [esp+4Ch+var_20] +
test edi edi +
jz loc_4A127F  +
mov ecx dword_4C01A8 +
mov ebx [esp+4Ch+var_34] +
test ecx ecx +
jz loc_4A112C  +
mov eax dword_4C01AC +
mov ecx [esp+4Ch+arg_4] +
mov edx [ecx+eax*4] +
mov eax [ecx] +
mov [esp+4Ch+var_48] offset aSOptionWSIsAmb +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov ebx ds:dword_5141FC +
mov [esp+4Ch+var_4C] ebx +
call strlen  +
add dword_4C01AC 1 +
add ebx eax +
mov eax 3Fh +
mov ds:dword_5141FC ebx +
jmp loc_4A0BE5  +
mov eax dword_4C01A8 +
mov esi [esp+4Ch+var_34] +
test eax eax +
jnz loc_4A1352  +
mov [esp+4Ch+var_4C] esi +
call strlen  +
add esi eax +
mov eax [ebx+0Ch] +
mov ds:dword_5141FC esi +
mov dword_4C01A4 eax +
mov eax [esp+4Ch+arg_8] +
cmp byte ptr [eax] 3Ah +
jnz loc_4A0BB0  +
mov eax 3Ah +
jmp loc_4A0BE5  +
mov eax dword_4C01AC +
cmp eax [esp+4Ch+arg_0] +
jz loc_4A138A  +
mov edi [esp+4Ch+arg_4] +
lea edx [eax+1] +
mov dword_4C01AC edx +
mov eax [edi+eax*4] +
mov ds:dword_5141E8 eax +
mov [esp+4Ch+var_34] eax +
jmp loc_4A0EAF  +
movzx eax [esp+4Ch+var_19] +
jmp loc_4A0E75  +
cmp [esp+4Ch+var_19] 2Dh +
jz loc_4A1311  +
mov eax [esp+4Ch+arg_8] +
movzx eax byte ptr [eax] +
test al al +
jz loc_4A11FF  +
movzx ebx byte ptr [esp+4Ch+var_2C] +
cmp al bl +
jz loc_4A149F  +
mov edx [esp+4Ch+arg_8] +
jmp loc_4A11F5  +
cmp cl bl +
jz loc_4A0E75  +
add edx 1 +
movzx ecx byte ptr [edx] +
test cl cl +
jnz loc_4A11ED  +
cmp dword_4C01A8 0 +
jnz loc_4A0DF7  +
mov eax [esp+4Ch+var_24] +
jmp loc_4A0E31  +
mov ds:dword_5141E8 0 +
jmp loc_4A10BE  +
mov eax [esp+4Ch+arg_4] +
mov edx [ebx] +
mov eax [eax] +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_48] offset aSOptionSDoesnT +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
jmp loc_4A1009  +
mov eax dword_4C01A8 +
movsx ebx byte ptr [esp+4Ch+var_2C] +
test eax eax +
jnz loc_4A1424  +
mov eax [esp+4Ch+arg_8] +
mov dword_4C01A4 ebx +
cmp byte ptr [eax] 3Ah +
setnz al  +
movzx eax al +
lea eax [eax+eax*4+3Ah] +
jmp loc_4A0F9C  +
mov eax [esp+4Ch+var_30] +
test eax eax +
jz loc_4A144F  +
mov edi [esp+4Ch+var_28] +
mov [esp+4Ch+arg_C] eax +
test bl bl +
mov eax [esp+4Ch+arg_C] +
jz loc_4A13DA  +
cmp dword ptr [eax+4] 0 +
jnz loc_4A1491  +
cmp dword_4C01A8 0 +
jz loc_4A12DE  +
mov eax [esp+4Ch+arg_C] +
mov edx [eax] +
mov eax [esp+4Ch+arg_4] +
mov eax [eax] +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_48] offset aSOptionWSDoesn +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov edx ds:dword_5141FC +
xor eax eax +
or ecx 0FFFFFFFFh +
mov edi edx +
scas   +
not ecx  +
lea eax [edx+ecx-1] +
mov ds:dword_5141FC eax +
mov eax 3Fh +
jmp loc_4A0BE5  +
mov [esp+4Ch+arg_C] ebx +
mov esi [esp+4Ch+var_20] +
movzx ebx byte ptr [esp+4Ch+var_24] +
jmp loc_4A1293  +
cmp dword_4C01A8 0 +
jz loc_4A120C  +
mov eax [esp+4Ch+arg_4] +
mov edi [esp+4Ch+var_34] +
mov eax [eax] +
mov [esp+4Ch+var_40] edi +
mov [esp+4Ch+var_48] offset aSUnrecognize_0 +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax dword_4C01AC +
jmp loc_4A0E31  +
mov eax [esp+4Ch+arg_4] +
mov edi [esp+4Ch+var_24] +
mov edx [eax+edi*4] +
mov eax [eax] +
mov [esp+4Ch+var_48] offset aSOptionSRequir +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov esi ds:dword_5141FC +
jmp loc_4A115E  +
mov eax dword_4C01A8 +
movsx ebx byte ptr [esp+4Ch+var_2C] +
test eax eax +
jz loc_4A13BE  +
mov eax [esp+4Ch+arg_4] +
mov eax [eax] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] offset aSOptionRequire +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax [esp+4Ch+arg_8] +
mov dword_4C01A4 ebx +
cmp byte ptr [eax] 3Ah +
setnz al  +
movzx eax al +
lea eax [eax+eax*4+3Ah] +
jmp loc_4A0BE5  +
cmp dword ptr [eax+4] 1 +
jz loc_4A146C  +
mov ebx [esp+4Ch+var_34] +
mov [esp+4Ch+var_4C] ebx +
call strlen  +
mov edx [esp+4Ch+arg_10] +
add eax ebx +
test edx edx +
mov ds:dword_5141FC eax +
jz loc_4A1405  +
mov eax [esp+4Ch+arg_10] +
mov [eax] edi +
mov eax [esp+4Ch+arg_C] +
mov eax [eax+8] +
test eax eax +
jz loc_4A14A9  +
mov edi [esp+4Ch+arg_C] +
mov edx [edi+0Ch] +
mov [eax] edx +
xor eax eax +
jmp loc_4A0BE5  +
mov eax [esp+4Ch+arg_4] +
mov eax [eax] +
mov [esp+4Ch+var_40] ebx +
mov [esp+4Ch+var_48] offset aSOptionRequire +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
jmp loc_4A1263  +
mov ds:dword_5141FC 0 +
mov eax 57h +
jmp loc_4A0BE5  +
mov esi [esp+4Ch+var_34] +
jmp loc_4A0EDF  +
mov eax dword_4C01AC +
cmp [esp+4Ch+arg_0] eax +
jle loc_4A14B5  +
mov ecx [esp+4Ch+arg_4] +
lea edx [eax+1] +
mov dword_4C01AC edx +
mov eax [ecx+eax*4] +
mov ds:dword_5141E8 eax +
jmp loc_4A13E4  +
add esi 1 +
mov ds:dword_5141E8 esi +
jmp loc_4A13E4  +
movzx eax byte ptr [esp+4Ch+var_2C] +
jmp loc_4A0E75  +
mov eax [esp+4Ch+arg_C] +
mov eax [eax+0Ch] +
jmp loc_4A0BE5  +
cmp dword_4C01A8 0 +
jz loc_4A14E8  +
mov edi [esp+4Ch+arg_4] +
mov edx [edi+eax*4-4] +
mov eax [edi] +
mov [esp+4Ch+var_48] offset aSOptionSRequir +
mov [esp+4Ch+var_40] edx +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov edx ds:dword_5141FC +
xor eax eax +
or ecx 0FFFFFFFFh +
mov edi edx +
scas   +
not ecx  +
lea eax [edx+ecx-1] +
mov ds:dword_5141FC eax +
mov eax [esp+4Ch+arg_8] +
cmp byte ptr [eax] 3Ah +
jnz loc_4A0BB0  +
jmp loc_4A1183  +
***
sub esp 2Ch +
mov eax [esp+38h] +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+0Ch] 0 +
mov [esp+8] eax +
mov eax [esp+34h] +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_4A07E0  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_10] +
mov [esp+2Ch+var_18] 0 +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_4A07E0  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_10] +
mov [esp+2Ch+var_18] 1 +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_4A07E0  +
add esp 2Ch +
retn   +
***
push ebx  +
mov edx [eax] +
movsx ebx byte ptr [edx] +
add edx 1 +
movzx esi bl +
test byte ptr ds:word_509C60[esi+esi] 4 +
jz loc_4A1625  +
lea esi [esi+0] +
lea ecx [ecx+ecx*4] +
mov [eax] edx +
lea ecx [ebx+ecx*2-30h] +
movsx ebx byte ptr [edx] +
add edx 1 +
movzx esi bl +
test byte ptr ds:word_509C60[esi+esi] 4 +
jnz loc_4A1600  +
test ecx ecx +
js loc_4A1625  +
mov eax ecx +
pop ebx  +
pop esi  +
retn   +
mov eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
retn   +
***
mov ebx eax +
movsx eax byte ptr [edx] +
cmp al 5Fh +
jz loc_4A1650  +
lea ecx [eax-30h] +
cmp cl 9 +
ja loc_4A1678  +
add edx 1 +
sub eax 30h +
mov [ebx] edx +
pop ebx  +
retn   +
lea eax [edx+1] +
mov [ebx] eax +
movzx eax byte ptr [edx+1] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4A1678  +
mov eax ebx +
call sub_4A15E0  +
mov edx [ebx] +
cmp byte ptr [edx] 5Fh +
jnz loc_4A1678  +
add edx 1 +
mov [ebx] edx +
pop ebx  +
retn   +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
push edi  +
mov edi eax +
push esi  +
push ebx  +
mov eax [eax] +
movsx ecx byte ptr [eax] +
movzx edx cl +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_4A16F0  +
sub ecx 30h +
lea ebx [eax+1] +
mov [ebp+0] ecx +
mov [edi] ebx +
movsx edx byte ptr [eax+1] +
mov eax 1 +
movzx esi dl +
test byte ptr ds:word_509C60[esi+esi] 4 +
jz loc_4A16E4  +
nop   +
lea esi [esi+0] +
add ebx 1 +
lea eax [ecx+ecx*4] +
lea ecx [edx+eax*2-30h] +
movsx edx byte ptr [ebx] +
movzx esi dl +
test byte ptr ds:word_509C60[esi+esi] 4 +
jnz loc_4A16C0  +
cmp dl 5Fh +
mov eax 1 +
jz loc_4A16F7  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebx 1 +
mov [edi] ebx +
mov [ebp+0] ecx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 10h +
mov edx [ebx+10h] +
lea esi ds:0FFFFFFFCh[edx*4] +
jmp loc_4A1739  +
mov eax [ebx+8] +
sub edx 1 +
mov [ebx+10h] edx +
lea ecx [esi-4] +
mov eax [eax+esi] +
test eax eax +
jnz loc_4A1796  +
mov esi ecx +
test edx edx +
jg loc_4A1724  +
mov edx [ebx+14h] +
mov edi [ebx+0Ch] +
lea esi ds:0FFFFFFFCh[edx*4] +
jmp loc_4A1762  +
mov ecx [edi+esi] +
sub edx 1 +
mov [ebx+14h] edx +
lea eax [esi-4] +
test ecx ecx +
jnz loc_4A17B0  +
mov esi eax +
test edx edx +
jg loc_4A1750  +
test edi edi +
jz loc_4A1779  +
mov [esp+10h+var_10] edi +
call free  +
mov dword ptr [ebx+0Ch] 0 +
mov eax [ebx+8] +
test eax eax +
jz loc_4A178F  +
mov [esp+10h+var_10] eax +
call free  +
mov dword ptr [ebx+8] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+10h+var_10] eax +
call free  +
mov eax [ebx+8] +
mov dword ptr [eax+esi] 0 +
jmp loc_4A1718  +
mov [esp+10h+var_10] ecx +
call free  +
mov eax [ebx+0Ch] +
mov dword ptr [eax+esi] 0 +
jmp loc_4A173D  +
***
sub esp 18h +
mov edx [eax+14h] +
mov eax [eax+1Ch] +
cmp edx eax +
jl loc_4A1831  +
test eax eax +
jz loc_4A1816  +
lea edx [eax+eax] +
mov [ebx+1Ch] edx +
mov edx [ebx+0Ch] +
shl eax 3 +
mov [esp+18h+var_14] eax +
mov [esp+18h+var_18] edx +
call sub_4A0670  +
mov edx [ebx+14h] +
mov [ebx+0Ch] eax +
lea ecx [edx+1] +
mov [ebx+14h] ecx +
mov dword ptr [eax+edx*4] 0 +
add esp 18h +
mov eax edx +
pop ebx  +
retn   +
mov dword ptr [ebx+1Ch] 5 +
mov [esp+18h+var_18] 14h +
call sub_4A05F0  +
mov edx [ebx+14h] +
mov [ebx+0Ch] eax +
jmp loc_4A1802  +
mov eax [ebx+0Ch] +
jmp loc_4A1802  +
***
push edi  +
push esi  +
mov esi ecx +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov eax [eax+18h] +
cmp [ebx+10h] eax +
jl loc_4A1874  +
test eax eax +
jz loc_4A18B0  +
lea edx [eax+eax] +
mov [ebx+18h] edx +
mov edx [ebx+8] +
shl eax 3 +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] edx +
call sub_4A0670  +
mov [ebx+8] eax +
lea eax [esi+1] +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_24] ebp +
mov [esp+28h+var_28] eax +
mov edi eax +
call memcpy  +
mov eax [ebx+10h] +
mov edx [ebx+8] +
mov byte ptr [edi+esi] 0 +
lea ecx [eax+1] +
mov [ebx+10h] ecx +
mov [edx+eax*4] edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [ebx+18h] 5 +
mov [esp+28h+var_28] 14h +
call sub_4A05F0  +
mov [ebx+8] eax +
jmp loc_4A1874  +
***
cmp eax 56h +
jz loc_4A18F6  +
cmp eax 75h +
jz loc_4A18F0  +
cmp eax 43h +
jz loc_4A18E7  +
sub esp 0Ch +
call abort  +
mov eax 1 +
retn   +
mov eax 4 +
retn   +
mov eax 2 +
retn   +
***
cmp eax 7 +
push edi  +
push ebx  +
sub esp 14h +
lea edx [eax+20h] +
lea eax [eax+4] +
call sub_4A1960  +
mov eax [esi+4] +
test eax eax +
jz loc_4A19DF  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi+24h] 0 +
mov eax [esi+40h] +
test eax eax +
jz loc_4A1A15  +
mov edx [esi+44h] +
test edx edx +
jle loc_4A1A06  +
xor ebx ebx +
nop   +
mov eax [eax+ebx*4] +
add ebx 1 +
mov [esp+18h+var_18] eax +
call free  +
mov eax [esi+40h] +
cmp [esi+44h] ebx +
jg loc_4A19F0  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [esi+40h] 0 +
mov ebx [esi+4Ch] +
test ebx ebx +
jz loc_4A1A50  +
mov eax [ebx] +
test eax eax +
jz loc_4A1A41  +
mov [esp+18h+var_18] eax +
call free  +
mov dword ptr [ebx+4] 0 +
mov dword ptr [ebx+8] 0 +
mov dword ptr [ebx] 0 +
mov ebx [esi+4Ch] +
mov [esp+18h+var_18] ebx +
call free  +
mov dword ptr [esi+4Ch] 0 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
mov edi eax +
push esi  +
mov esi ecx +
push ebx  +
sub esp 1Ch +
lea eax [ecx+1] +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_24] ebp +
mov [esp+28h+var_28] eax +
mov ebx eax +
call memcpy  +
mov eax [edi] +
mov edx [esp+28h+arg_0] +
mov byte ptr [ebx+esi] 0 +
mov [eax+edx*4] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 10h +
mov ecx [eax] +
test ecx ecx +
jz loc_4A1AE0  +
mov esi [eax+4] +
mov eax [eax+8] +
sub eax esi +
cmp edx eax +
jle loc_4A1AD9  +
sub esi ecx +
add edx esi +
lea edi [edx+edx] +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] ecx +
call sub_4A0670  +
add esi eax +
mov [ebx] eax +
add eax edi +
mov [ebx+4] esi +
mov [ebx+8] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp edx 20h +
mov esi 20h +
cmovge esi edx +
mov [esp+10h+var_10] esi +
call sub_4A05F0  +
add esi eax +
mov [ebx+8] esi +
mov [ebx] eax +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push edi  +
mov edi eax +
push esi  +
push ebx  +
sub esp 1Ch +
mov [esp+28h+var_1C] edx +
mov edx ecx +
call sub_4A1AA0  +
mov eax [edi+4] +
mov esi [edi] +
lea ebx [eax-1] +
cmp ebx esi +
jb loc_4A1B72  +
movzx eax byte ptr [ebx] +
sub ebx 1 +
mov [ebx+ebp+1] al +
mov esi [edi] +
cmp ebx esi +
jnb loc_4A1B62  +
mov eax [esp+28h+var_1C] +
mov [esp+28h+var_20] ebp +
mov [esp+28h+var_28] esi +
mov [esp+28h+var_24] eax +
call memcpy  +
add [edi+4] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jmp sub_4A1BA0  +
***
push ebx  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 10h +
mov [esp+18h+var_18] edx +
call strlen  +
mov esi eax +
mov edx eax +
mov eax ebx +
call sub_4A1AA0  +
mov eax [ebx+4] +
mov [esp+18h+var_10] esi +
mov [esp+18h+var_14] edi +
mov [esp+18h+var_18] eax +
call memcpy  +
add [ebx+4] esi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
sub esp 44h +
lea ebx [esp+48h+var_29] +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_44] offset unk_50A0AC +
mov [esp+48h+var_48] ebx +
call sprintf  +
cmp byte ptr [esp+48h+var_29] 0 +
jz loc_4A1C3F  +
mov edx ebx +
mov eax esi +
call sub_4A1BD0  +
add esp 44h +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 4 +
mov eax [eax] +
movzx ecx byte ptr [eax] +
cmp cl 2Dh +
jz loc_4A1CD0  +
cmp cl 2Bh +
jz loc_4A1CC0  +
movzx edx cl +
xor eax eax +
test byte ptr ds:word_509C60[edx+edx] 4 +
jnz loc_4A1C98  +
jmp loc_4A1CB5  +
mov ecx [ebx] +
lea eax [ecx+1] +
mov [ebx] eax +
movzx ecx byte ptr [ecx+1] +
movzx eax cl +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4A1CB0  +
test cl cl +
mov ds:byte_514200 cl +
jz loc_4A1C80  +
mov edx offset byte_514200 +
mov eax esi +
call sub_4A1BD0  +
jmp loc_4A1C80  +
mov eax 1 +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
lea edx [eax+1] +
mov [ebx] edx +
movzx ecx byte ptr [eax+1] +
jmp loc_4A1C68  +
mov edx offset byte_514200 +
mov eax esi +
mov ds:byte_514200 2Dh +
call sub_4A1BD0  +
mov eax [ebx] +
lea edx [eax+1] +
mov [ebx] edx +
movzx ecx byte ptr [eax+1] +
jmp loc_4A1C68  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 10h +
mov eax [edx] +
cmp eax ecx +
jz loc_4A1D35  +
mov esi ecx +
sub esi eax +
mov eax ebx +
mov edx esi +
call sub_4A1AA0  +
mov edx [edi] +
mov eax [ebx+4] +
mov [esp+18h+var_10] esi +
mov [esp+18h+var_14] edx +
mov [esp+18h+var_18] eax +
call memcpy  +
add [ebx+4] esi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
mov edi ebp +
push esi  +
push ebx  +
mov ebx edx +
sub esp 1Ch +
mov esi ebx +
call sub_4A19B0  +
mov eax ebp +
call sub_4A1710  +
test ebp 1 +
mov eax 54h +
jnz loc_4A1FFB  +
test edi 2 +
jnz loc_4A1FE6  +
mov ecx eax +
xor edx edx +
shr ecx 2 +
test al 2 +
movs   +
jz loc_4A1D90  +
movzx edx word ptr [esi] +
mov [edi] dx +
mov edx 2 +
test al 1 +
jz loc_4A1D9B  +
movzx eax byte ptr [esi+edx] +
mov [edi+edx] al +
mov eax [ebx+24h] +
test eax eax +
jnz loc_4A1F18  +
mov eax [ebx+20h] +
xor esi esi +
test eax eax +
jle loc_4A1E01  +
nop   +
mov eax [ebx+4] +
lea edi ds:0[esi*4] +
mov eax [eax+esi*4] +
mov [esp+28h+var_28] eax +
call strlen  +
add edi [ebp+4] +
lea edx [eax+1] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_1C] edx +
call sub_4A05F0  +
mov edx [esp+28h+var_1C] +
mov [edi] eax +
mov eax [ebx+4] +
mov ecx [eax+esi*4] +
mov eax [ebp+4] +
mov eax [eax+esi*4] +
add esi 1 +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] eax +
call memcpy  +
cmp [ebx+20h] esi +
jg loc_4A1DB0  +
mov eax [ebx+18h] +
test eax eax +
jnz loc_4A1FD3  +
mov eax [ebx+10h] +
xor esi esi +
test eax eax +
jle loc_4A1E66  +
mov eax [ebx+8] +
lea edi ds:0[esi*4] +
mov eax [eax+esi*4] +
mov [esp+28h+var_28] eax +
call strlen  +
add edi [ebp+8] +
lea edx [eax+1] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_1C] edx +
call sub_4A05F0  +
mov edx [esp+28h+var_1C] +
mov [edi] eax +
mov eax [ebx+8] +
mov ecx [eax+esi*4] +
mov eax [ebp+8] +
mov eax [eax+esi*4] +
add esi 1 +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] eax +
call memcpy  +
cmp [ebx+10h] esi +
jg loc_4A1E15  +
mov eax [ebx+1Ch] +
test eax eax +
jnz loc_4A1FC0  +
mov edi [ebx+14h] +
xor esi esi +
test edi edi +
jle loc_4A1ED1  +
lea esi [esi+0] +
mov eax [ebx+0Ch] +
lea edi ds:0[esi*4] +
mov eax [eax+esi*4] +
mov [esp+28h+var_28] eax +
call strlen  +
add edi [ebp+0Ch] +
lea edx [eax+1] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_1C] edx +
call sub_4A05F0  +
mov edx [esp+28h+var_1C] +
mov [edi] eax +
mov eax [ebx+0Ch] +
mov ecx [eax+esi*4] +
mov eax [ebp+0Ch] +
mov eax [eax+esi*4] +
add esi 1 +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] eax +
call memcpy  +
cmp [ebx+14h] esi +
jg loc_4A1E80  +
mov eax [ebx+44h] +
test eax eax +
jnz loc_4A1F30  +
mov ecx [ebx+4Ch] +
test ecx ecx +
jz loc_4A1FB4  +
mov [esp+28h+var_28] 0Ch +
call sub_4A05F0  +
mov [ebp+4Ch] eax +
mov edx [ebx+4Ch] +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax] 0 +
mov ecx [edx+4] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4A1D00  +
shl eax 2 +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov [ebp+4] eax +
jmp loc_4A1DA6  +
shl eax 2 +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov edx [ebx+44h] +
test edx edx +
mov [ebp+40h] eax +
jle loc_4A1ED8  +
mov [esp+28h+var_1C] eax +
xor esi esi +
jmp loc_4A1F57  +
mov eax [ebp+40h] +
mov [esp+28h+var_1C] eax +
mov eax [ebx+40h] +
lea edi ds:0[esi*4] +
mov eax [eax+esi*4] +
mov [esp+28h+var_28] eax +
call strlen  +
add edi [esp+28h+var_1C] +
lea edx [eax+1] +
mov [esp+28h+var_28] edx +
mov [esp+28h+var_1C] edx +
call sub_4A05F0  +
mov edx [esp+28h+var_1C] +
mov [edi] eax +
mov eax [ebx+40h] +
mov ecx [eax+esi*4] +
mov eax [ebp+40h] +
mov eax [eax+esi*4] +
add esi 1 +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_24] ecx +
mov [esp+28h+var_28] eax +
call memcpy  +
cmp [ebx+44h] esi +
jg loc_4A1F50  +
mov ecx [ebx+4Ch] +
test ecx ecx +
jnz loc_4A1EE3  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
shl eax 2 +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov [ebp+0Ch] eax +
jmp loc_4A1E71  +
shl eax 2 +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov [ebp+8] eax +
jmp loc_4A1E0C  +
movzx edx word ptr [esi] +
add edi 2 +
add esi 2 +
sub eax 2 +
mov [edi-2] dx +
jmp loc_4A1D78  +
movzx eax byte ptr [ebx] +
lea edi [ebp+1] +
lea esi [ebx+1] +
mov [ebp+0] al +
mov eax 53h +
jmp loc_4A1D6C  +
***
jmp sub_4A2020  +
***
push edi  +
push esi  +
mov esi ecx +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov eax [eax+24h] +
cmp [ebx+20h] eax +
jl loc_4A204F  +
test eax eax +
jnz loc_4A2087  +
mov dword ptr [ebx+24h] 3 +
mov [esp+28h+var_28] 0Ch +
call sub_4A05F0  +
mov [ebx+4] eax +
lea eax [esi+1] +
mov [esp+28h+var_28] eax +
call sub_4A05F0  +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_24] ebp +
mov [esp+28h+var_28] eax +
mov edi eax +
call memcpy  +
mov eax [ebx+20h] +
mov edx [ebx+4] +
mov byte ptr [edi+esi] 0 +
lea ecx [eax+1] +
mov [ebx+20h] ecx +
mov [edx+eax*4] edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea edx [eax+eax] +
mov [ebx+24h] edx +
mov edx [ebx+4] +
shl eax 3 +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_28] edx +
call sub_4A0670  +
mov [ebx+4] eax +
jmp loc_4A204F  +
***
mov eax [esp+4] +
mov byte_4C01B0 al +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
xor ebx ebx +
sub esp 1Ch +
mov eax [esp+30h] +
mov [esp] eax +
call strlen  +
mov [esp+0Ch] eax +
jmp loc_4A20E8  +
add ebx 1 +
cmp ebx 4Fh +
jz loc_4A2140  +
lea esi [ebx+ebx*2] +
mov ebp ds:off_50ADE4[esi*4] +
lea edi ds:0[esi*4] +
mov [esp] ebp +
call strlen  +
cmp [esp+0Ch] eax +
jnz loc_4A20E0  +
mov eax [esp+34h] +
xor eax ds:dword_50ADE8[esi*4] +
test al 2 +
jnz loc_4A20E0  +
mov eax [esp+0Ch] +
mov [esp] ebp +
mov [esp+8] eax +
mov eax [esp+30h] +
mov [esp+4] eax +
call memcmp  +
test eax eax +
jnz loc_4A20E0  +
mov eax ds:off_50ADE0[edi] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov ecx [esp+arg_0] +
mov edx offset off_50AB40 +
cmp ecx 0FFFFFFFFh +
jnz loc_4A2164  +
jmp loc_4A2170  +
cmp eax ecx +
jz loc_4A2170  +
add edx 0Ch +
mov eax [edx+4] +
test eax eax +
jnz loc_4A2160  +
retn   +
mov dword_4C01B4 ecx +
mov eax ecx +
retn   +
***
mov esi 0FFFFFFFFh +
push ebx  +
mov ebx offset off_50AB40 +
sub esp 10h +
mov edi [esp+14h+arg_0] +
jmp loc_4A21A0  +
add ebx 0Ch +
mov esi [ebx+4] +
test esi esi +
jz loc_4A21B2  +
mov eax [ebx] +
mov [esp+14h+var_14] edi +
mov [esp+14h+var_10] eax +
call strcmp  +
test eax eax +
jnz loc_4A2196  +
add esp 10h +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
mov edi offset a_ada_ +
push esi  +
push ebx  +
sub esp 2Ch +
mov esi [esp+38h+arg_0] +
mov eax [esp+38h+arg_0] +
cmps   +
setnbe cl  +
setb dl  +
add eax 5 +
cmp cl dl +
cmovnz eax [esp+38h+arg_0] +
mov [esp+38h+arg_0] eax +
movzx eax byte ptr [eax] +
test byte ptr ds:word_509C60[eax+eax] 8 +
jz loc_4A2417  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
add eax 8 +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebx [esp+38h+arg_0] +
mov [esp+38h+var_1C] eax +
mov esi eax +
movzx eax byte ptr [ebx] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 8 +
jnz loc_4A2364  +
cmp al 4Fh +
jnz loc_4A2417  +
mov edx 4 +
mov edi offset aOabs +
mov [esp+38h+var_20] esi +
xor ebp ebp +
mov esi edx +
jmp loc_4A226D  +
add ebp 1 +
mov edi ds:off_50A940[ebp*8] +
test edi edi +
jz loc_4A2417  +
mov [esp+38h+var_38] edi +
call strlen  +
mov esi eax +
mov [esp+38h+var_30] esi +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] ebx +
call strncmp  +
test eax eax +
jnz loc_4A2251  +
mov edx esi +
mov esi [esp+38h+var_20] +
add ebx edx +
mov edx ds:off_50A944[ebp*8] +
lea ebp [esi+1] +
mov [esp+38h+var_38] edx +
mov [esp+38h+var_20] edx +
call strlen  +
mov edx [esp+38h+var_20] +
mov byte ptr [esi] 22h +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_34] edx +
mov edi eax +
add edi ebp +
mov [esp+38h+var_30] eax +
lea esi [edi+1] +
call memcpy  +
mov byte ptr [edi] 22h +
movzx eax byte ptr [ebx] +
cmp al 54h +
jz loc_4A23F3  +
cmp al 45h +
jnz loc_4A2393  +
cmp byte ptr [ebx+1] 0 +
jz loc_4A2417  +
cmp al 4Eh +
mov edx esi +
setz byte ptr [esp+38h+var_20]  +
mov edi ebx +
cmp byte ptr [esp+38h+var_20] 0 +
jz loc_4A23BE  +
cmp byte ptr [ebx+1] 0 +
jz loc_4A2417  +
cmp al 58h +
jz loc_4A23CE  +
cmp al 53h +
jz loc_4A2460  +
cmp al 44h +
nop   +
jz loc_4A25E0  +
cmp al 5Fh +
jnz loc_4A26EC  +
movzx eax byte ptr [edi+1] +
cmp al 5Fh +
jnz loc_4A2593  +
movzx eax byte ptr [edi+2] +
lea ebx [edi+2] +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jnz loc_4A2616  +
cmp al 5Fh +
jz loc_4A24C0  +
mov byte ptr [edx] 2Eh +
movzx eax byte ptr [ebx] +
lea esi [edx+1] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 8 +
jz loc_4A2235  +
add esi 1 +
add ebx 1 +
mov [esi-1] al +
movzx eax byte ptr [ebx] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 0Ch +
jnz loc_4A2364  +
cmp al 5Fh +
jnz loc_4A22C3  +
movzx edx byte ptr [ebx+1] +
test byte ptr ds:word_509C60[edx+edx] 0Ch +
jnz loc_4A2364  +
cmp al 4Eh +
mov edx esi +
setz byte ptr [esp+38h+var_20]  +
cmp al 50h +
setz cl  +
mov edi ebx +
or cl byte ptr [esp+38h+var_20] +
jz loc_4A23BE  +
cmp byte ptr [ebx+1] 0 +
jz loc_4A2667  +
cmp byte ptr [esp+38h+var_20] 0 +
jnz loc_4A22F3  +
cmp al 53h +
jz loc_4A22F3  +
cmp al 58h +
jnz loc_4A2305  +
movzx eax byte ptr [ebx+1] +
lea edi [ebx+1] +
cmp al 6Eh +
jnz loc_4A2577  +
lea esi [esi+0] +
add edi 1 +
movzx eax byte ptr [edi] +
cmp al 62h +
jz loc_4A23E0  +
cmp al 6Eh +
jz loc_4A23E0  +
jmp loc_4A2305  +
cmp byte ptr [ebx+1] 4Bh +
jnz loc_4A22DD  +
movzx eax byte ptr [ebx+2] +
cmp al 42h +
jz loc_4A2585  +
cmp al 5Fh +
jnz loc_4A2417  +
cmp byte ptr [ebx+3] 5Fh +
jz loc_4A2557  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] eax +
call strlen  +
add eax 3 +
mov [esp+38h+var_38] eax +
call sub_4A05F0  +
mov ebx eax +
mov eax [esp+38h+arg_0] +
cmp byte ptr [eax] 3Ch +
jz loc_4A2541  +
mov eax [esp+38h+arg_0] +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_34] offset aS_4 +
mov [esp+38h+var_30] eax +
call sprintf  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [edi+1] +
test al al +
jz loc_4A2417  +
movzx edx byte ptr [edi+2] +
test dl dl +
jz loc_4A2475  +
cmp dl 5Fh +
jnz loc_4A2417  +
cmp al 4Fh +
jz loc_4A2646  +
lea esi [esi+0] +
jle loc_4A2565  +
cmp al 52h +
jz loc_4A2650  +
cmp al 57h +
jnz loc_4A2417  +
mov ebp offset aWrite +
mov [esp+38h+var_34] ebp +
lea ebx [edi+2] +
mov [esp+38h+var_38] esi +
call strcpy  +
mov [esp+38h+var_38] ebp +
call strlen  +
lea edx [esi+eax] +
movzx eax byte ptr [edi+2] +
mov edi ebx +
jmp loc_4A2316  +
cmp byte ptr [edi+3] 5Fh +
jz loc_4A234A  +
mov ebp edx +
mov eax 6 +
mov edi offset a_elabb +
xor esi esi +
jmp loc_4A24FA  +
add esi 1 +
mov edi ds:off_50A880[esi*8] +
test edi edi +
jz loc_4A2417  +
mov [esp+38h+var_38] edi +
call strlen  +
mov [esp+38h+var_30] eax +
mov [esp+38h+var_34] edi +
mov [esp+38h+var_38] ebx +
call strncmp  +
test eax eax +
jnz loc_4A24E0  +
mov esi ds:off_50A884[esi*8] +
mov [esp+38h+var_38] esi +
call strlen  +
mov [esp+38h+var_38] ebp +
mov [esp+38h+var_34] esi +
mov [esp+38h+var_30] eax +
mov ebx eax +
call memcpy  +
add ebp ebx +
mov byte ptr [ebp+0] 0 +
mov eax [esp+38h+var_1C] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+38h+var_38] ebx +
mov [esp+38h+var_34] eax +
call strcpy  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov byte ptr [esi] 2Eh +
add ebx 4 +
add esi 1 +
jmp loc_4A2221  +
cmp al 49h +
jnz loc_4A2417  +
mov ebp offset aInput +
jmp loc_4A2497  +
cmp al 62h +
jz loc_4A23E0  +
nop   +
jmp loc_4A2305  +
cmp byte ptr [ebx+3] 0 +
jnz loc_4A2417  +
mov ebp esi +
jmp loc_4A2531  +
cmp al 45h +
mov ebp edx +
jnz loc_4A265A  +
movzx edx byte ptr [edi+2] +
lea eax [edi+2] +
movzx ecx dl +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jz loc_4A25C4  +
add eax 1 +
movzx edx byte ptr [eax] +
movzx ecx dl +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jnz loc_4A25B1  +
cmp dl 73h +
jnz loc_4A2417  +
cmp byte ptr [eax+1] 0 +
jnz loc_4A2417  +
jmp loc_4A2531  +
movzx eax byte ptr [edi+1] +
cmp al 41h +
jz loc_4A26DC  +
cmp al 46h +
mov ebx offset a_finalize +
jnz loc_4A2417  +
mov [esp+38h+var_34] ebx +
mov [esp+38h+var_38] esi +
call strcpy  +
mov [esp+38h+var_38] ebx +
call strlen  +
add eax esi +
mov ebp eax +
jmp loc_4A2531  +
mov ebp edx +
movzx eax byte ptr [ebx+1] +
lea edi [ebx+1] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jnz loc_4A2642  +
cmp al 5Fh +
jnz loc_4A2675  +
movzx eax byte ptr [edi+1] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4A2417  +
mov ebx edi +
jmp loc_4A2618  +
mov ebp offset aOutput +
jmp loc_4A2497  +
mov ebp offset aRead +
jmp loc_4A2497  +
cmp al 42h +
jnz loc_4A2417  +
jmp loc_4A259D  +
mov ebp esi +
lea esi [esi+0] +
jmp loc_4A2531  +
cmp al 58h +
jnz loc_4A2692  +
movzx eax byte ptr [ebx+2] +
lea edi [ebx+2] +
cmp al 6Eh +
jnz loc_4A26E6  +
add edi 1 +
movzx eax byte ptr [edi] +
cmp al 62h +
jz loc_4A2684  +
cmp al 6Eh +
jz loc_4A2684  +
cmp al 2Eh +
jnz loc_4A26CF  +
movzx eax byte ptr [edi+1] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4A2417  +
movzx eax byte ptr [edi+2] +
lea edx [edi+2] +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jz loc_4A26CF  +
add edx 1 +
movzx eax byte ptr [edx] +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jnz loc_4A26BC  +
test al al +
jnz loc_4A2417  +
jmp loc_4A2531  +
mov ebx offset a_adjust +
jmp loc_4A25F9  +
cmp al 62h +
jz loc_4A2684  +
jmp loc_4A2692  +
mov ebp edx +
nop   +
jmp loc_4A2692  +
***
push esi  +
push ebx  +
sub esp 7Ch +
mov edx dword_4C01B4 +
mov esi [esp+7Ch+arg_0] +
mov ebp [esp+7Ch+arg_4] +
cmp edx 0FFFFFFFFh +
jz loc_4A27D0  +
lea ebx [esp+7Ch+var_60] +
xor eax eax +
mov ecx 15h +
mov edi ebx +
test ebp 1FF04h +
stos   +
jz loc_4A2781  +
mov [esp+7Ch+var_60] ebp +
mov ecx ebp +
test [esp+7Ch+var_60] 4100h +
jnz loc_4A2799  +
test cl 4 +
jnz loc_4A27E0  +
test ch 80h +
jnz loc_4A27F5  +
and ecx 10000h +
jnz loc_4A27B4  +
mov edx esi +
mov eax ebx +
call sub_4A6B80  +
mov esi eax +
mov eax ebx +
call sub_4A1710  +
mov eax esi +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
and edx 1FF04h +
mov ecx edx +
or ecx ebp +
mov [esp+7Ch+var_60] ecx +
test [esp+7Ch+var_60] 4100h +
jz loc_4A274B  +
mov [esp+7Ch+var_78] ecx +
mov [esp+7Ch+var_7C] esi +
call sub_4B8170  +
test eax eax +
jnz loc_4A2779  +
mov ecx [esp+7Ch+var_60] +
test ch 40h +
jz loc_4A274B  +
jmp loc_4A2779  +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] esi +
call sub_4B9EA0  +
test eax eax +
jz loc_4A2765  +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+7Ch+var_7C] esi +
call sub_4A06C0  +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+7Ch+var_7C] esi +
call sub_4B81B0  +
test eax eax +
jnz loc_4A2779  +
mov ecx [esp+7Ch+var_60] +
jmp loc_4A2754  +
mov [esp+7Ch+var_78] ebp +
mov [esp+7Ch+var_7C] esi +
call sub_4A21C0  +
jmp loc_4A2779  +
***
mov edi eax +
push esi  +
mov esi ecx +
push ebx  +
mov ebx edx +
sub esp 4Ch +
mov edx [edx] +
mov ecx [esp+54h+arg_0] +
movzx eax byte ptr [edx] +
cmp al 59h +
jz loc_4A2900  +
cmp ecx 3 +
jz loc_4A2965  +
cmp ecx 5 +
jz loc_4A2868  +
cmp ecx 4 +
nop   +
jz loc_4A28C7  +
cmp ecx 6 +
jz loc_4A2AB0  +
lea edx [ecx-1] +
cmp edx 1 +
jbe loc_4A2A08  +
mov eax 1 +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 6Dh +
jz loc_4A2BA6  +
mov edx offset asc_50A0FA +
mov ecx 1 +
mov eax esi +
call sub_4A1B10  +
mov eax ebx +
call sub_4A15E0  +
xor edx edx +
test eax eax +
jle loc_4A28BD  +
mov byte ptr [esp+54h+var_34] al +
mov ecx 1 +
mov eax esi +
lea edx [esp+54h+var_34] +
mov byte ptr [esp+54h+var_34+1] 0 +
call sub_4A1B10  +
mov edx offset asc_50A0FA +
mov ecx 1 +
mov eax esi +
call sub_4A1B10  +
mov edx 1 +
add esp 4Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebx +
call sub_4A15E0  +
test eax eax +
mov edx eax +
jz loc_4A2C42  +
xor eax eax +
cmp edx 1 +
jnz loc_4A2860  +
mov eax esi +
mov ecx 4 +
mov edx offset aTrue +
call sub_4A1B10  +
mov eax 1 +
jmp loc_4A2860  +
add edx 1 +
mov eax ebx +
mov [ebx] edx +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
mov ebp eax +
jz loc_4A2C74  +
mov edx [edi+40h] +
test edx edx +
jz loc_4A2927  +
cmp eax [edi+44h] +
jge loc_4A2C74  +
mov eax ebx +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
jz loc_4A2C74  +
mov eax [edi+40h] +
test eax eax +
jz loc_4A2C7E  +
mov edx [eax+ebp*4] +
test edx edx +
jz loc_4A285B  +
cmp byte ptr [edx] 0 +
jz loc_4A285B  +
mov eax esi +
call sub_4A1BD0  +
lea esi [esi+0] +
jmp loc_4A285B  +
cmp al 45h +
jz loc_4A2C5D  +
cmp al 4Bh +
nop   +
jz loc_4A2B70  +
cmp al 51h +
jz loc_4A2B70  +
cmp al 5Fh +
jz loc_4A2C20  +
cmp al 6Dh +
mov [esp+54h+var_3C] 1 +
jz loc_4A2C91  +
mov eax ebx +
mov edi 1 +
call sub_4A15E0  +
mov ebp eax +
xor eax eax +
cmp ebp 0FFFFFFFFh +
jz loc_4A2860  +
lea edx [esp+54h+var_34] +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_4C] ebp +
mov [esp+54h+var_50] offset aD_2 +
mov [esp+54h+var_38] edx +
call sprintf  +
mov edx [esp+54h+var_38] +
cmp byte ptr [esp+54h+var_34] 0 +
jnz loc_4A2BBC  +
test edi edi +
jnz loc_4A29E7  +
cmp ebp 9 +
jle loc_4A285B  +
mov eax [esp+54h+var_3C] +
test eax eax +
jnz loc_4A285B  +
mov eax [ebx] +
cmp byte ptr [eax] 5Fh +
jnz loc_4A285B  +
add eax 1 +
mov [ebx] eax +
jmp loc_4A285B  +
cmp al 51h +
jz loc_4A2B70  +
mov eax ebx +
mov [esp+54h+var_3C] ecx +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
mov ebp eax +
jz loc_4A2C74  +
test eax eax +
mov ecx [esp+54h+var_3C] +
jz loc_4A2B90  +
lea eax [eax+1] +
mov [esp+54h+var_54] eax +
mov [esp+54h+var_38] ecx +
call sub_4A05F0  +
mov [esp+54h+var_4C] ebp +
mov edx eax +
mov [esp+54h+var_3C] eax +
mov eax [ebx] +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_50] eax +
call strncpy  +
mov edx [esp+54h+var_3C] +
mov byte ptr [edx+ebp] 0 +
mov eax [edi] +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_50] eax +
call sub_4A2700  +
mov ecx [esp+54h+var_38] +
cmp ecx 1 +
mov edi eax +
jz loc_4A2CF4  +
test edi edi +
jz loc_4A2CCF  +
cmp byte ptr [edi] 0 +
jnz loc_4A2CAA  +
mov [esp+54h+var_54] edi +
call free  +
mov eax [esp+54h+var_3C] +
mov [esp+54h+var_54] eax +
call free  +
add [ebx] ebp +
mov eax 1 +
jmp loc_4A2860  +
cmp al 45h +
jz loc_4A2CB8  +
cmp al 6Dh +
jnz loc_4A2AF7  +
mov edx offset asc_50A0F5 +
mov eax esi +
mov ecx 1 +
call sub_4A1B10  +
mov eax [ebx] +
lea edx [eax+1] +
mov [ebx] edx +
movzx eax byte ptr [eax+1] +
jmp loc_4A2AF7  +
mov ecx 1 +
mov eax esi +
call sub_4A1B10  +
mov ecx [ebx] +
lea edx [ecx+1] +
mov [ebx] edx +
movzx eax byte ptr [ecx+1] +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jnz loc_4A2AE0  +
cmp al 2Eh +
jz loc_4A2BC8  +
mov eax [ebx] +
movzx eax byte ptr [eax] +
cmp al 65h +
jnz loc_4A285B  +
mov edx offset aE +
mov eax esi +
mov ecx 1 +
call sub_4A1B10  +
mov eax [ebx] +
lea edx [eax+1] +
mov [ebx] edx +
movzx eax byte ptr [eax+1] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4A285B  +
mov ecx 1 +
mov eax esi +
call sub_4A1B10  +
mov ecx [ebx] +
lea edx [ecx+1] +
mov [ebx] edx +
movzx eax byte ptr [ecx+1] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jnz loc_4A2B43  +
jmp loc_4A285B  +
mov [esp+54h+var_50] 1 +
mov ecx esi +
mov edx ebx +
mov [esp+54h+var_54] 0 +
mov eax edi +
call sub_4A34E0  +
jmp loc_4A2860  +
mov ecx 1 +
mov edx offset a0 +
mov eax esi +
call sub_4A1B10  +
jmp loc_4A2AA3  +
mov cl 1 +
mov edx offset asc_50A0F5 +
mov eax esi +
call sub_4A1B10  +
add dword ptr [ebx] 1 +
jmp loc_4A2870  +
mov eax esi +
call sub_4A1BD0  +
jmp loc_4A29DA  +
mov ecx 1 +
mov edx offset a_ +
mov eax esi +
call sub_4A1B10  +
mov eax [ebx] +
lea edx [eax+1] +
mov [ebx] edx +
movzx eax byte ptr [eax+1] +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jz loc_4A2B11  +
mov ecx 1 +
mov eax esi +
call sub_4A1B10  +
mov ecx [ebx] +
lea edx [ecx+1] +
mov [ebx] edx +
movzx eax byte ptr [ecx+1] +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jnz loc_4A2BF5  +
jmp loc_4A2B11  +
cmp byte ptr [edx+1] 6Dh +
jz loc_4A2D05  +
mov eax ebx +
xor edi edi +
call sub_4A1630  +
mov [esp+54h+var_3C] 1 +
mov ebp eax +
jmp loc_4A29A4  +
mov eax esi +
mov ecx 5 +
mov edx offset aFalse +
call sub_4A1B10  +
mov eax 1 +
jmp loc_4A2860  +
mov [esp+54h+var_54] 3 +
mov ecx esi +
mov edx ebx +
mov eax edi +
call sub_4A2D30  +
jmp loc_4A2860  +
mov eax 0FFFFFFFFh +
jmp loc_4A2860  +
mov eax esi +
mov edx ebp +
call sub_4A1C10  +
mov eax 1 +
jmp loc_4A2860  +
mov ecx 1 +
mov edx offset asc_50A0F5 +
mov eax esi +
call sub_4A1B10  +
add dword ptr [ebx] 1 +
jmp loc_4A2996  +
mov edx edi +
mov eax esi +
call sub_4A1BD0  +
jmp loc_4A2A8F  +
mov [esp+54h+var_54] 6 +
mov ecx esi +
mov edx ebx +
mov eax edi +
call sub_4A2D30  +
jmp loc_4A2860  +
mov eax [esp+54h+var_3C] +
test eax eax +
jz loc_4A2A97  +
cmp byte ptr [eax] 0 +
nop   +
jz loc_4A2A97  +
mov edx eax +
mov eax esi +
call sub_4A1BD0  +
jmp loc_4A2A97  +
mov edx offset asc_50A10D +
mov eax esi +
call sub_4A1B10  +
jmp loc_4A2A7E  +
mov ecx 1 +
mov edx offset asc_50A0F5 +
mov eax esi +
call sub_4A1B10  +
add dword ptr [ebx] 2 +
mov [esp+54h+var_3C] 0 +
jmp loc_4A2996  +
***
push esi  +
push ebx  +
mov ebx edx +
sub esp 2Ch +
mov [esp+2Ch+var_10] eax +
mov eax ecx +
mov [esp+2Ch+var_14] edx +
mov edx offset asc_50A10F +
mov [esp+2Ch+var_18] ecx +
mov ecx 1 +
call sub_4A1B10  +
mov edx [ebx] +
mov [esp+2Ch+var_20] edx +
add edx 1 +
mov [esp+2Ch+var_1C] edx +
mov ecx [esp+2Ch+var_1C] +
mov [ebx] edx +
mov ebx 1 +
xor edx edx +
mov eax ebx +
movzx ecx byte ptr [ecx] +
cmp cl 57h +
jz loc_4A2E65  +
nop   +
test cl cl +
jz loc_4A2E98  +
test edx edx +
jz loc_4A2E2C  +
mov eax [esp+2Ch+var_1C] +
mov esi offset off_50ADE0 +
xor ebx ebx +
mov [esp+2Ch+var_2C] eax +
call strlen  +
mov [esp+2Ch+var_20] eax +
jmp loc_4A2DBF  +
add ebx 1 +
add esi 0Ch +
cmp ebx 4Fh +
jz loc_4A2E98  +
mov ebp [esi] +
mov [esp+2Ch+var_2C] ebp +
call strlen  +
cmp [esp+2Ch+var_20] eax +
mov edi eax +
jb loc_4A2DB0  +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+var_1C] +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] eax +
call memcmp  +
test eax eax +
jnz loc_4A2DB0  +
mov eax [esp+2Ch+var_18] +
mov edx offset asc_50A111 +
mov ecx 1 +
call sub_4A1B10  +
lea eax [ebx+ebx*2] +
mov edx ds:off_50ADE4[eax*4] +
test edx edx +
jz loc_4A2E13  +
cmp byte ptr [edx] 0 +
jnz loc_4A2EA4  +
mov eax [esp+2Ch+var_18] +
mov ecx 1 +
mov edx offset asc_50A111 +
call sub_4A1B10  +
mov eax [esp+2Ch+var_14] +
add [eax] edi +
mov eax [esp+2Ch+arg_0] +
mov esi [esp+2Ch+var_14] +
mov ecx [esp+2Ch+var_18] +
mov [esp+2Ch+var_2C] eax +
mov eax [esp+2Ch+var_10] +
mov edx esi +
call sub_4A2810  +
test eax eax +
jz loc_4A2E8B  +
mov edx [esi] +
mov [esp+2Ch+var_1C] edx +
mov ecx [esp+2Ch+var_1C] +
mov edx 1 +
movzx ecx byte ptr [ecx] +
cmp cl 57h +
jnz loc_4A2D80  +
mov ebx eax +
mov eax [esp+2Ch+var_18] +
mov ecx 1 +
mov edx offset asc_50A113 +
call sub_4A1B10  +
mov eax [esp+2Ch+var_14] +
add dword ptr [eax] 1 +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx eax +
mov eax [esp+2Ch+var_14] +
mov eax [eax] +
cmp byte ptr [eax] 57h +
jz loc_4A2E67  +
add esp 2Ch +
xor ebx ebx +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+var_18] +
call sub_4A1BD0  +
jmp loc_4A2E13  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov [esp+58h+var_40] eax +
mov eax [edx] +
mov [esp+58h+var_4C] ecx +
mov ecx [esp+58h+arg_4] +
lea edx [eax+1] +
test ecx ecx +
mov [ebp+0] edx +
jz loc_4A3015  +
cmp byte ptr [eax+1] 7Ah +
jz loc_4A2F91  +
mov eax ebp +
call sub_4A15E0  +
test eax eax +
mov ebx eax +
mov [esp+58h+var_34] eax +
jle loc_4A3134  +
mov edx [ebp+0] +
mov [esp+58h+var_58] edx +
mov [esp+58h+var_48] edx +
call strlen  +
cmp ebx eax +
jg loc_4A3134  +
mov eax [esp+58h+var_40] +
mov edx [esp+58h+var_48] +
test byte ptr [eax] 4 +
jz loc_4A2F3C  +
mov edi offset aJarray1z +
mov ecx 8 +
mov esi edx +
cmps   +
jz loc_4A341C  +
mov eax [esp+58h+var_4C] +
mov ecx ebx +
xor esi esi +
call sub_4A1B10  +
mov eax [esp+58h+arg_0] +
mov ecx [esp+58h+var_34] +
mov edx [ebp+0] +
test eax eax +
jz loc_4A2F60  +
test ecx ecx +
jnz loc_4A342E  +
add ecx edx +
test esi esi +
mov [ebp+0] ecx +
jz loc_4A3113  +
lea edx [esp+58h+var_34] +
mov eax ebp +
call sub_4A1680  +
test eax eax +
jz loc_4A3134  +
mov eax [esp+58h+var_34] +
mov [esp+58h+var_3C] 1 +
jmp loc_4A304E  +
add eax 3 +
mov [ebp+0] eax +
mov eax ebp +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_4A3134  +
mov eax [esp+58h+var_40] +
mov edx [eax+40h] +
test edx edx +
jz loc_4A2FBD  +
cmp ebx [eax+44h] +
jge loc_4A3134  +
mov eax ebp +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
jz loc_4A3134  +
mov eax [esp+58h+var_40] +
mov eax [eax+40h] +
test eax eax +
jz loc_4A34B2  +
mov edx [eax+ebx*4] +
test edx edx +
jz loc_4A2FF1  +
cmp byte ptr [edx] 0 +
jz loc_4A2FF1  +
mov eax [esp+58h+var_4C] +
call sub_4A1BD0  +
mov eax [esp+58h+arg_0] +
test eax eax +
jz loc_4A3015  +
mov eax [esp+58h+var_40] +
mov eax [eax+40h] +
mov edx [eax+ebx*4] +
test edx edx +
jz loc_4A3015  +
cmp byte ptr [edx] 0 +
jz loc_4A3015  +
mov eax [esp+58h+arg_0] +
call sub_4A1BD0  +
mov eax [esp+58h+var_4C] +
mov edx (offset asc_50A124+2) +
call sub_4A1BD0  +
lea edx [esp+58h+var_34] +
mov eax ebp +
call sub_4A1680  +
test eax eax +
jz loc_4A3134  +
mov eax [esp+58h+arg_4] +
test eax eax +
jz loc_4A33A0  +
mov eax [esp+58h+var_34] +
mov [esp+58h+var_3C] 0 +
test eax eax +
jle loc_4A30D0  +
mov edx [ebp+0] +
xor ebx ebx +
mov esi [esp+58h+var_40] +
movzx eax byte ptr [edx] +
cmp al 5Ah +
jz loc_4A320F  +
cmp al 7Ah +
jz loc_4A3261  +
mov edx ebp +
mov eax esi +
lea ecx [esp+58h+var_30] +
call sub_4A3940  +
mov edx [esp+58h+var_30] +
test edx edx +
mov edi eax +
jz loc_4A30A5  +
mov [esp+58h+var_58] edx +
call free  +
mov [esp+58h+var_2C] 0 +
mov [esp+58h+var_28] 0 +
mov [esp+58h+var_30] 0 +
test edi edi +
jz loc_4A30D0  +
mov eax [esp+58h+arg_4] +
test eax eax +
jz loc_4A3140  +
mov ecx [esp+58h+var_4C] +
mov edx ebp +
mov eax esi +
mov [esp+58h+var_58] edi +
call sub_4A2810  +
mov edi eax +
test edi edi +
jnz loc_4A31E6  +
nop   +
xor edi edi +
mov ebx [esp+58h+var_3C] +
test ebx ebx +
jnz loc_4A33F0  +
mov eax [esp+58h+var_4C] +
mov eax [eax+4] +
cmp byte ptr [eax-1] 3Eh +
jz loc_4A3443  +
mov eax [esp+58h+var_4C] +
mov edx offset asc_50A124 +
call sub_4A1BD0  +
mov ecx [esp+58h+arg_4] +
test ecx ecx +
jnz loc_4A3355  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+58h+var_4C] +
mov edx (offset asc_50A124+2) +
call sub_4A1BD0  +
lea edx [esp+58h+var_34] +
mov eax ebp +
call sub_4A1680  +
test eax eax +
jnz loc_4A3042  +
add esp 4Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+58h+var_58] edi +
lea ecx [esp+58h+var_24] +
mov edx ebp +
mov eax esi +
mov [esp+58h+var_1C] 0 +
mov [esp+58h+var_20] 0 +
mov [esp+58h+var_24] 0 +
call sub_4A2810  +
test eax eax +
mov edi eax +
jz loc_4A3403  +
mov eax [esi+40h] +
mov edx [esp+58h+var_20] +
sub edx [esp+58h+var_24] +
lea ecx [eax+ebx*4] +
lea eax [edx+1] +
mov [esp+58h+var_58] eax +
mov [esp+58h+var_44] ecx +
mov [esp+58h+var_48] edx +
call sub_4A05F0  +
mov ecx [esp+58h+var_44] +
mov edx [esp+58h+var_48] +
mov [ecx] eax +
mov eax [esi+40h] +
mov ecx [esp+58h+var_24] +
mov eax [eax+ebx*4] +
mov [esp+58h+var_50] edx +
mov [esp+58h+var_54] ecx +
mov [esp+58h+var_58] eax +
call memcpy  +
mov eax [esi+40h] +
mov edx [esp+58h+var_48] +
mov eax [eax+ebx*4] +
mov byte ptr [eax+edx] 0 +
mov eax [esp+58h+var_4C] +
lea edx [esp+58h+var_24] +
mov ecx [esp+58h+var_20] +
call sub_4A1D00  +
mov eax [esp+58h+var_24] +
test eax eax +
jz loc_4A31E6  +
mov [esp+58h+var_58] eax +
call free  +
add ebx 1 +
cmp [esp+58h+var_34] ebx +
jle loc_4A30D2  +
mov eax [esp+58h+var_4C] +
mov edx offset asc_50A11E +
call sub_4A1BD0  +
mov edx [ebp+0] +
movzx eax byte ptr [edx] +
cmp al 5Ah +
jnz loc_4A3066  +
add edx 1 +
mov eax esi +
mov [ebp+0] edx +
lea ecx [esp+58h+var_30] +
mov edx ebp +
call sub_4A3940  +
test eax eax +
mov edi eax +
jnz loc_4A32E0  +
mov eax [esp+58h+var_30] +
test eax eax +
jz loc_4A30C7  +
mov [esp+58h+var_58] eax +
call free  +
test edi edi +
mov [esp+58h+var_2C] 0 +
mov [esp+58h+var_28] 0 +
mov [esp+58h+var_30] 0 +
jnz loc_4A31E6  +
jmp loc_4A30D0  +
mov ecx [esp+58h+var_4C] +
add edx 1 +
mov eax esi +
mov [ebp+0] edx +
mov edx ebp +
call sub_4A5100  +
test eax eax +
mov edi eax +
jz loc_4A30D0  +
mov eax ebp +
call sub_4A15E0  +
test eax eax +
mov [esp+58h+var_48] eax +
jle loc_4A31E6  +
mov eax [ebp+0] +
mov [esp+58h+var_58] eax +
call strlen  +
cmp [esp+58h+var_48] eax +
jg loc_4A31E6  +
mov eax [esp+58h+var_4C] +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+58h+var_4C] +
mov edx [ebp+0] +
mov ecx [esp+58h+var_48] +
call sub_4A1B10  +
mov eax [esp+58h+arg_4] +
test eax eax +
jz loc_4A3456  +
mov eax [esp+58h+var_48] +
add [ebp+0] eax +
jmp loc_4A31E6  +
mov eax [esp+58h+var_4C] +
lea edx [esp+58h+var_30] +
mov ecx [esp+58h+var_2C] +
call sub_4A1D00  +
mov eax [esp+58h+arg_4] +
test eax eax +
jnz loc_4A322C  +
mov eax [esi+40h] +
mov edx [esp+58h+var_2C] +
sub edx [esp+58h+var_30] +
lea ecx [eax+ebx*4] +
lea eax [edx+1] +
mov [esp+58h+var_58] eax +
mov [esp+58h+var_44] ecx +
mov [esp+58h+var_48] edx +
call sub_4A05F0  +
mov ecx [esp+58h+var_44] +
mov edx [esp+58h+var_48] +
mov [ecx] eax +
mov eax [esi+40h] +
mov ecx [esp+58h+var_30] +
mov eax [eax+ebx*4] +
mov [esp+58h+var_50] edx +
mov [esp+58h+var_54] ecx +
mov [esp+58h+var_58] eax +
call memcpy  +
mov eax [esi+40h] +
mov edx [esp+58h+var_48] +
mov eax [eax+ebx*4] +
mov byte ptr [eax+edx] 0 +
jmp loc_4A322C  +
mov edx [esp+58h+arg_8] +
test edx edx +
jz loc_4A3109  +
mov ebp [esp+58h+var_40] +
mov eax ebp +
call sub_4A17D0  +
xor ecx ecx +
mov esi eax +
mov eax [esp+58h+var_4C] +
mov ebx [eax+4] +
mov edx [eax] +
mov [esp+58h+var_58] esi +
mov eax ebx +
sub eax edx +
cmp edx ebx +
cmovnz ecx eax +
mov eax ebp +
add eax 0Ch +
call sub_4A1A60  +
add esp 4Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+58h+var_34] +
shl eax 2 +
mov [esp+58h+var_58] eax +
call sub_4A05F0  +
mov ecx [esp+58h+var_34] +
mov esi [esp+58h+var_40] +
test ecx ecx +
mov [esi+44h] ecx +
mov [esi+40h] eax +
jle loc_4A34A5  +
xor edx edx +
mov ebx esi +
jmp loc_4A33D3  +
mov eax [ebx+40h] +
mov dword ptr [eax+edx*4] 0 +
add edx 1 +
cmp edx ecx +
jnz loc_4A33D0  +
mov [esp+58h+var_3C] 0 +
jmp loc_4A3052  +
mov eax [esp+58h+var_4C] +
mov edx offset asc_50A121 +
call sub_4A1BD0  +
jmp loc_4A30FD  +
mov eax [esp+58h+var_24] +
test eax eax +
jz loc_4A30D0  +
mov [esp+58h+var_58] eax +
call free  +
jmp loc_4A30D0  +
cmp [esp+58h+arg_0] 0 +
mov ecx ebx +
mov esi 1 +
jz loc_4A2F60  +
mov eax [esp+58h+arg_0] +
call sub_4A1B10  +
mov edx [ebp+0] +
mov ecx [esp+58h+var_34] +
jmp loc_4A2F60  +
mov eax [esp+58h+var_4C] +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
jmp loc_4A30EF  +
mov eax [esi+40h] +
lea edx [eax+ebx*4] +
mov eax [esp+58h+var_48] +
mov [esp+58h+var_44] edx +
add eax 1 +
mov [esp+58h+var_58] eax +
call sub_4A05F0  +
mov edx [esp+58h+var_44] +
mov ecx [esp+58h+var_48] +
mov [edx] eax +
mov eax [esi+40h] +
mov edx [ebp+0] +
mov eax [eax+ebx*4] +
mov [esp+58h+var_50] ecx +
mov [esp+58h+var_54] edx +
mov [esp+58h+var_58] eax +
call memcpy  +
mov eax [esi+40h] +
mov ecx [esp+58h+var_48] +
mov eax [eax+ebx*4] +
mov byte ptr [eax+ecx] 0 +
jmp loc_4A32D0  +
mov [esp+58h+var_3C] 0 +
jmp loc_4A30D0  +
mov eax [esp+58h+var_4C] +
mov edx ebx +
call sub_4A1C10  +
mov eax [esp+58h+arg_0] +
test eax eax +
jz loc_4A3015  +
mov eax [esp+58h+arg_0] +
mov edx ebx +
call sub_4A1C10  +
jmp loc_4A3015  +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 4Ch +
mov [esp+58h+var_40] ecx +
call sub_4A17D0  +
mov ecx [esp+58h+arg_0] +
test ecx ecx +
mov [esp+58h+var_3C] eax +
jz loc_4A3512  +
test byte ptr [esi+28h] 1 +
jz loc_4A37B4  +
mov [esp+58h+arg_0] 1 +
mov eax [ebp+0] +
mov [esp+58h+var_28] 0 +
mov [esp+58h+var_2C] 0 +
mov [esp+58h+var_30] 0 +
mov [esp+58h+var_1C] 0 +
mov [esp+58h+var_20] 0 +
mov [esp+58h+var_24] 0 +
cmp byte ptr [eax] 4Bh +
jz loc_4A38DE  +
movzx edx byte ptr [eax+1] +
cmp dl 31h +
jl loc_4A38B4  +
cmp dl 39h +
jle loc_4A3785  +
cmp dl 5Fh +
jnz loc_4A38B4  +
add eax 1 +
mov [ebp+0] eax +
mov eax ebp +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
mov ebx eax +
jz loc_4A38B4  +
mov [esp+58h+var_4C] 1 +
jmp loc_4A3633  +
cmp al 74h +
jz loc_4A3667  +
cmp al 4Bh +
jz loc_4A3856  +
test dword ptr [esi] 2000h +
jnz loc_4A37D0  +
test ecx ecx +
jz loc_4A35D2  +
mov [esp+58h+var_58] ecx +
call free  +
mov [esp+58h+var_20] 0 +
mov [esp+58h+var_1C] 0 +
mov [esp+58h+var_24] 0 +
lea ecx [esp+58h+var_24] +
mov edx ebp +
mov eax esi +
call sub_4A3940  +
test eax eax +
mov [esp+58h+var_4C] eax +
jz loc_4A3697  +
mov ecx [esp+58h+var_20] +
lea edx [esp+58h+var_24] +
lea eax [esp+58h+var_30] +
call sub_4A1D00  +
mov eax [esp+58h+var_2C] +
xor ecx ecx +
mov edx [esp+58h+var_30] +
mov edi eax +
sub edi edx +
cmp edx eax +
cmovnz ecx edi +
mov eax esi +
call sub_4A1840  +
test ebx ebx +
jle loc_4A3633  +
test byte ptr [esi] 4 +
mov eax offset asc_50A128 +
mov edx offset a_ +
cmovz edx eax +
lea eax [esp+58h+var_30] +
call sub_4A1BD0  +
sub ebx 1 +
lea eax [ebx+1] +
test eax eax +
jle loc_4A369F  +
mov ecx [esp+58h+var_24] +
mov edx [ebp+0] +
mov [esp+58h+var_20] ecx +
movzx eax byte ptr [edx] +
cmp al 5Fh +
jnz loc_4A3592  +
lea edi [edx+1] +
mov [ebp+0] edi +
movzx eax byte ptr [edx+1] +
mov edx edi +
cmp al 74h +
jnz loc_4A359A  +
lea eax [esp+58h+var_24] +
mov edx ebp +
mov [esp+58h+var_58] eax +
lea ecx [esp+58h+var_30] +
mov eax esi +
mov [esp+58h+var_50] 0 +
mov [esp+58h+var_54] 1 +
call sub_4A2EC0  +
test eax eax +
mov [esp+58h+var_4C] eax +
jnz loc_4A35FC  +
mov [esp+58h+var_4C] 0 +
mov eax [esp+58h+var_2C] +
xor ecx ecx +
mov edx [esp+58h+var_30] +
mov ebx eax +
sub ebx edx +
cmp edx eax +
cmovnz ecx ebx +
mov ebx [esp+58h+var_3C] +
lea eax [esi+0Ch] +
mov [esp+58h+var_58] ebx +
call sub_4A1A60  +
mov edx [esp+58h+arg_0] +
test edx edx +
jz loc_4A36FD  +
test byte ptr [esi] 4 +
mov eax offset asc_50A128 +
mov edx offset a_ +
cmovz edx eax +
lea eax [esp+58h+var_30] +
call sub_4A1BD0  +
test byte ptr [esi+2Ch] 1 +
jnz loc_4A392A  +
mov ecx [esp+58h+var_20] +
lea edx [esp+58h+var_24] +
lea eax [esp+58h+var_30] +
call sub_4A1D00  +
mov eax [esp+58h+arg_4] +
test eax eax +
jnz loc_4A38C8  +
mov eax [esp+58h+var_40] +
mov ebx [eax+4] +
cmp [eax] ebx +
jz loc_4A372D  +
test byte ptr [esi] 4 +
mov eax offset asc_50A128 +
mov edx offset a_ +
cmovz edx eax +
lea eax [esp+58h+var_30] +
call sub_4A1BD0  +
mov edx [esp+58h+var_30] +
mov ecx [esp+58h+var_2C] +
cmp edx ecx +
jz loc_4A3741  +
sub ecx edx +
jnz loc_4A391C  +
mov eax [esp+58h+var_24] +
test eax eax +
jz loc_4A3769  +
mov [esp+58h+var_58] eax +
call free  +
mov [esp+58h+var_20] 0 +
mov [esp+58h+var_1C] 0 +
mov [esp+58h+var_24] 0 +
mov eax [esp+58h+var_30] +
test eax eax +
jz loc_4A3779  +
mov [esp+58h+var_58] eax +
call free  +
mov eax [esp+58h+var_4C] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [esp+26h] +
mov [esp+58h+var_58] eax +
mov [esp+58h+var_32] dl +
mov [esp+58h+var_31] 0 +
call atoi  +
xor edx edx +
mov ebx eax +
mov eax [ebp+0] +
cmp byte ptr [eax+2] 5Fh +
setz dl  +
lea eax [eax+edx+2] +
mov [ebp+0] eax +
jmp loc_4A3585  +
test byte ptr [esi+2Ch] 1 +
jnz loc_4A350A  +
mov [esp+58h+arg_0] 0 +
jmp loc_4A3512  +
mov eax ebp +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
mov edi eax +
jz loc_4A3697  +
lea eax [eax+1] +
mov [esp+58h+var_58] eax +
call sub_4A05F0  +
mov ecx eax +
mov [esp+58h+var_48] eax +
mov eax [ebp+0] +
mov [esp+58h+var_58] ecx +
mov [esp+58h+var_50] edi +
mov [esp+58h+var_54] eax +
call memcpy  +
mov ecx [esp+58h+var_48] +
mov byte ptr [ecx+edi] 0 +
mov eax [esi] +
mov [esp+58h+var_58] ecx +
mov [esp+58h+var_54] eax +
call sub_4A2700  +
test eax eax +
mov ecx eax +
jz loc_4A38A0  +
cmp byte ptr [eax] 0 +
jz loc_4A383A  +
mov edx eax +
mov [esp+58h+var_44] eax +
lea eax [esp+58h+var_30] +
call sub_4A1BD0  +
mov ecx [esp+58h+var_44] +
mov [esp+58h+var_58] ecx +
call free  +
mov eax [esp+58h+var_48] +
mov [esp+58h+var_58] eax +
call free  +
add [ebp+0] edi +
jmp loc_4A35FC  +
add edx 1 +
mov eax ebp +
mov [ebp+0] edx +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
jz loc_4A3697  +
cmp eax [esi+10h] +
jge loc_4A3697  +
mov edx [esi+8] +
mov edx [edx+eax*4] +
test edx edx +
jz loc_4A3616  +
cmp byte ptr [edx] 0 +
jz loc_4A3616  +
lea eax [esp+58h+var_30] +
call sub_4A1BD0  +
jmp loc_4A3616  +
test edi edi +
mov edx [ebp+0] +
jz loc_4A3842  +
mov ecx edi +
lea eax [esp+58h+var_30] +
call sub_4A1B10  +
jmp loc_4A3842  +
mov [esp+58h+var_4C] 0 +
mov eax [esp+58h+var_4C] +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+58h+var_2C] +
lea edx [esp+58h+var_30] +
mov eax [esp+58h+var_40] +
call sub_4A1D00  +
jmp loc_4A3741  +
add eax 1 +
mov [ebp+0] eax +
mov eax ebp +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
jz loc_4A38B4  +
cmp eax [esi+10h] +
jge loc_4A38B4  +
mov edx [esi+8] +
xor ebx ebx +
mov edx [edx+eax*4] +
test edx edx +
jz loc_4A3585  +
cmp byte ptr [edx] 0 +
jz loc_4A3585  +
lea eax [esp+58h+var_30] +
call sub_4A1BD0  +
jmp loc_4A3585  +
mov eax [esp+58h+var_40] +
call sub_4A1B40  +
jmp loc_4A3741  +
mov edx offset asc_50A12B +
lea eax [esp+58h+var_30] +
call sub_4A1BD0  +
jmp loc_4A36EC  +
***
push edi  +
mov edi 1 +
push esi  +
push ebx  +
mov ebx edx +
sub esp 6Ch +
mov [esp+78h+var_68] eax +
mov [esp+78h+var_60] ecx +
mov [esp+78h+var_44] 0 +
mov [esp+78h+var_48] 0 +
mov [esp+78h+var_4C] 0 +
mov dword ptr [ecx+8] 0 +
mov dword ptr [ecx+4] 0 +
mov dword ptr [ecx] 0 +
test edi edi +
setnz dl  +
xor eax eax +
test eax eax +
jnz loc_4A3BF0  +
test dl dl +
jz loc_4A3BF0  +
mov ecx [ebx] +
movzx esi byte ptr [ecx] +
lea eax [esi-41h] +
cmp al 34h +
ja loc_4A3BE2  +
movzx eax al +
jmp ds:off_50A1A4[eax*4]  +
mov eax [esp+78h+var_68] +
test byte ptr [eax] 2 +
jz loc_4A3A08  +
mov eax esi +
mov esi [esp+78h+var_48] +
cmp [esp+78h+var_4C] esi +
jz loc_4A39DD  +
lea eax [esp+78h+var_4C] +
mov edx offset asc_50A111 +
call sub_4A1BA0  +
mov ecx [ebx] +
movzx eax byte ptr [ecx] +
movsx eax al +
mov [esp+78h+var_64] ecx +
call sub_4A18D0  +
call sub_4A1900  +
mov ecx [esp+78h+var_64] +
test eax eax +
jz loc_4A3A08  +
cmp byte ptr [eax] 0 +
jz loc_4A3A08  +
mov edx eax +
lea eax [esp+78h+var_4C] +
call sub_4A1BA0  +
mov ecx [ebx] +
add ecx 1 +
mov [ebx] ecx +
jmp loc_4A3984  +
mov eax [esp+78h+var_4C] +
add ecx 1 +
cmp eax [esp+78h+var_48] +
mov [ebx] ecx +
jz loc_4A3A34  +
movzx eax byte ptr [eax] +
cmp al 26h +
jz loc_4A3D16  +
cmp al 2Ah +
jz loc_4A3D16  +
mov eax [esp+78h+var_68] +
lea ecx [esp+78h+var_4C] +
mov edx ebx +
call sub_4A5610  +
test eax eax +
jz loc_4A3CA0  +
mov edx [ebx] +
movzx eax byte ptr [edx] +
test al al +
jnz loc_4A3CE3  +
cmp al 5Fh +
jnz loc_4A3984  +
add edx 1 +
mov [ebx] edx +
jmp loc_4A3984  +
mov eax [esp+78h+var_4C] +
add ecx 1 +
cmp eax [esp+78h+var_48] +
mov [ebx] ecx +
jz loc_4A3A92  +
movzx eax byte ptr [eax] +
cmp al 26h +
jz loc_4A3CF5  +
cmp al 2Ah +
jz loc_4A3CF5  +
lea eax [esp+78h+var_4C] +
mov edx offset asc_50A12F +
call sub_4A1BD0  +
mov eax [ebx] +
cmp byte ptr [eax] 5Fh +
jnz loc_4A3CA7  +
add eax 1 +
mov [ebx] eax +
mov edx offset asc_50A131 +
lea eax [esp+78h+var_4C] +
call sub_4A1BD0  +
jmp loc_4A3984  +
add ecx 1 +
mov eax ebx +
mov [ebx] ecx +
lea edx [esp+78h+var_58] +
call sub_4A1680  +
test eax eax +
jz loc_4A3CA0  +
mov esi [esp+78h+var_68] +
mov eax [esp+78h+var_58] +
cmp [esi+20h] eax +
jle loc_4A3CA0  +
mov edx [esi+4] +
lea ebx [esp+78h+var_54] +
mov eax [edx+eax*4] +
mov [esp+78h+var_54] eax +
jmp loc_4A3984  +
mov eax [esp+78h+var_68] +
add ecx 1 +
mov [ebx] ecx +
test byte ptr [eax] 4 +
jz loc_4A3CD0  +
test ebp ebp +
mov eax 1 +
cmovz ebp eax +
jmp loc_4A3984  +
add ecx 1 +
mov edx offset asc_50A113 +
lea eax [esp+78h+var_4C] +
mov [ebx] ecx +
call sub_4A1BD0  +
mov edx [ebx] +
mov eax 51h +
cmp byte ptr [edx] 51h +
jz loc_4A3B62  +
mov eax [esp+78h+var_68] +
mov edx offset a_ +
test byte ptr [eax] 4 +
mov eax offset asc_50A128 +
cmovz edx eax +
lea eax [esp+78h+var_4C] +
call sub_4A1BA0  +
mov eax [ebx] +
movzx eax byte ptr [eax] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jnz loc_4A3C12  +
lea edx [eax-58h] +
cmp dl 1 +
jbe loc_4A3DA0  +
cmp al 74h +
jz loc_4A3E72  +
xor edi edi +
cmp al 51h +
jnz loc_4A3984  +
mov eax [esp+78h+var_68] +
lea ecx [esp+78h+var_4C] +
mov edx ebx +
mov [esp+78h+var_74] 0 +
mov [esp+78h+var_78] 0 +
call sub_4A34E0  +
test eax eax +
mov edi eax +
jz loc_4A3984  +
jmp loc_4A3C59  +
add ecx 1 +
mov edx offset asc_50A10D +
lea eax [esp+78h+var_4C] +
mov [ebx] ecx +
call sub_4A1BA0  +
test ebp ebp +
mov eax 2 +
cmovz ebp eax +
jmp loc_4A3984  +
mov eax 1 +
test eax eax +
jz loc_4A3993  +
nop   +
test edi edi +
jz loc_4A3E03  +
mov esi [ebx] +
movzx eax byte ptr [esi] +
sub eax 42h +
cmp al 17h +
ja loc_4A3FA1  +
movzx eax al +
jmp ds:off_50A278[eax*4]  +
mov eax ebx +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
mov [esp+78h+var_58] eax +
mov [esp+78h+var_64] eax +
jz loc_4A3CA0  +
mov edx [ebx] +
mov [esp+78h+var_78] edx +
mov [esp+78h+var_5C] edx +
call strlen  +
mov ecx [esp+78h+var_64] +
mov edx [esp+78h+var_5C] +
cmp ecx eax +
jg loc_4A3CA0  +
xor eax eax +
test ecx ecx +
jz loc_4A3C55  +
lea eax [esp+78h+var_4C] +
call sub_4A1B40  +
mov edx [ebx] +
mov eax [esp+78h+var_58] +
add eax edx +
mov [ebx] eax +
lea eax [esp+78h+var_4C] +
mov edx offset asc_50A10F +
call sub_4A1BA0  +
mov eax esi +
cmp al 4Dh +
jnz loc_4A3D37  +
mov edx [ebx] +
movsx eax byte ptr [edx] +
cmp al 56h +
jz loc_4A3EE1  +
cmp al 75h +
jz loc_4A3EE1  +
xor esi esi +
cmp al 43h +
jz loc_4A3EE1  +
lea eax [edx+1] +
mov [ebx] eax +
cmp byte ptr [edx] 46h +
jz loc_4A3E54  +
nop   +
xor edi edi +
jmp loc_4A3984  +
mov eax [esp+78h+var_68] +
lea ecx [esp+78h+var_4C] +
mov edx ebx +
mov [esp+78h+var_78] 3 +
call sub_4A2810  +
mov edi eax +
mov eax [ebx] +
cmp byte ptr [eax] 5Fh +
jnz loc_4A3AB0  +
jmp loc_4A3AAB  +
mov edx offset asc_50A12D +
lea eax [esp+78h+var_4C] +
call sub_4A1BA0  +
jmp loc_4A3B12  +
cmp al 5Fh +
jz loc_4A3A58  +
xor edi edi +
lea esi [esi+0] +
jmp loc_4A3984  +
lea eax [esp+78h+var_4C] +
mov edx offset asc_50A10F +
call sub_4A1BA0  +
mov edx offset asc_50A113 +
lea eax [esp+78h+var_4C] +
call sub_4A1BD0  +
jmp loc_4A3A92  +
lea eax [esp+78h+var_4C] +
mov edx offset asc_50A10F +
call sub_4A1BA0  +
mov edx offset asc_50A113 +
lea eax [esp+78h+var_4C] +
call sub_4A1BD0  +
jmp loc_4A3A34  +
xor esi esi +
mov eax [ebx] +
cmp byte ptr [eax] 5Fh +
jnz loc_4A3CA0  +
add eax 1 +
mov [ebx] eax +
mov eax [esp+78h+var_68] +
test byte ptr [eax] 2 +
jz loc_4A3984  +
test esi esi +
jz loc_4A3984  +
mov eax [esp+78h+var_48] +
cmp [esp+78h+var_4C] eax +
jz loc_4A3D76  +
mov edx offset asc_50A111 +
lea eax [esp+78h+var_4C] +
call sub_4A1BD0  +
mov eax esi +
call sub_4A1900  +
test eax eax +
jz loc_4A3984  +
cmp byte ptr [eax] 0 +
jz loc_4A3984  +
mov edx eax +
lea eax [esp+78h+var_4C] +
call sub_4A1BD0  +
jmp loc_4A3984  +
mov eax [esp+78h+var_68] +
lea ecx [esp+78h+var_40] +
mov edx ebx +
call sub_4A3940  +
mov edx [esp+78h+var_40] +
mov ecx [esp+78h+var_3C] +
cmp edx ecx +
jz loc_4A3DC3  +
sub ecx edx +
jnz loc_4A3EF8  +
test edx edx +
jz loc_4A3C59  +
mov [esp+78h+var_78] edx +
call free  +
jmp loc_4A3C59  +
add esi 1 +
mov eax ebx +
mov [ebx] esi +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
mov esi eax +
jz loc_4A3E03  +
mov eax [esp+78h+var_68] +
mov edx [eax+40h] +
test edx edx +
jz loc_4A40B0  +
cmp esi [eax+44h] +
jl loc_4A40B0  +
mov eax [esp+78h+var_60] +
mov eax [eax] +
test eax eax +
jz loc_4A3E2D  +
mov [esp+78h+var_78] eax +
call free  +
mov eax [esp+78h+var_60] +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+8] 0 +
mov dword ptr [eax] 0 +
mov eax [esp+78h+var_4C] +
xor edi edi +
test eax eax +
jz loc_4A3E3F  +
mov [esp+78h+var_78] eax +
call free  +
xor eax eax +
test edi edi +
jz loc_4A3E4C  +
mov al 3 +
test ebp ebp +
cmovnz eax ebp +
add esp 6Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+78h+var_68] +
lea ecx [esp+78h+var_4C] +
mov edx ebx +
call sub_4A5610  +
test eax eax +
jnz loc_4A3D39  +
xor edi edi +
jmp loc_4A3984  +
mov eax [esp+78h+var_68] +
lea ecx [esp+78h+var_40] +
mov edx ebx +
mov [esp+78h+var_70] 1 +
mov [esp+78h+var_74] 1 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_38] 0 +
mov [esp+78h+var_3C] 0 +
mov [esp+78h+var_40] 0 +
call sub_4A2EC0  +
test eax eax +
mov edi eax +
jz loc_4A3EC8  +
mov edx [esp+78h+var_40] +
mov ecx [esp+78h+var_3C] +
sub ecx edx +
jz loc_4A3DC3  +
jmp loc_4A3EF8  +
mov eax [esp+78h+var_40] +
test eax eax +
jz loc_4A3984  +
mov [esp+78h+var_78] eax +
call free  +
jmp loc_4A3984  +
mov [esp+78h+var_64] edx +
call sub_4A18D0  +
mov edx [esp+78h+var_64] +
add edx 1 +
mov esi eax +
jmp loc_4A3C90  +
lea eax [esp+78h+var_4C] +
call sub_4A1B40  +
mov edx [esp+78h+var_40] +
jmp loc_4A3DC3  +
mov ecx [esp+78h+var_60] +
mov edx ebx +
mov eax [esp+78h+var_68] +
mov [esp+78h+var_74] 1 +
mov [esp+78h+var_78] 0 +
call sub_4A34E0  +
mov edi eax +
test edi edi +
jz loc_4A3E03  +
mov eax [esp+78h+var_4C] +
cmp eax [esp+78h+var_48] +
jz loc_4A3E33  +
mov esi [esp+78h+var_60] +
mov edx offset asc_50A111 +
mov eax esi +
call sub_4A1BD0  +
mov ecx [esp+78h+var_48] +
mov eax esi +
lea edx [esp+78h+var_4C] +
call sub_4A1D00  +
mov eax [esp+78h+var_4C] +
jmp loc_4A3E33  +
add esi 1 +
mov eax ebx +
mov [ebx] esi +
lea edx [esp+78h+var_58] +
call sub_4A1680  +
test eax eax +
jz loc_4A3E03  +
mov esi [esp+78h+var_68] +
mov eax [esp+78h+var_58] +
cmp [esi+14h] eax +
jle loc_4A3E03  +
mov edx [esi+0Ch] +
mov edx [edx+eax*4] +
test edx edx +
jnz loc_4A40DF  +
jmp loc_4A3F32  +
mov edi [esp+78h+var_60] +
mov [esp+78h+var_50] 0 +
lea esi [esi+0] +
movzx edx byte ptr [esi] +
lea eax [edx-43h] +
cmp al 32h +
ja loc_4A3FF4  +
movzx eax al +
jmp ds:off_50A2D8[eax*4]  +
add esi 1 +
mov [ebx] esi +
mov eax [edi+4] +
cmp [edi] eax +
jz loc_4A3FDC  +
mov edx offset asc_50A111 +
mov eax edi +
call sub_4A1BD0  +
mov edx offset aUnsigned +
mov eax edi +
call sub_4A1BD0  +
mov esi [ebx] +
movzx edx byte ptr [esi] +
lea eax [edx-43h] +
cmp al 32h +
jbe loc_4A3FBA  +
cmp dl 78h +
mov eax esi +
ja loc_4A415B  +
jmp ds:off_50A3A4[edx*4]  +
add esi 1 +
mov [ebx] esi +
mov eax [edi+4] +
cmp [edi] eax +
jz loc_4A401E  +
mov edx offset asc_50A111 +
mov eax edi +
call sub_4A1BD0  +
mov edx offset aSigned +
mov eax edi +
call sub_4A1BD0  +
mov esi [ebx] +
jmp loc_4A3FB0  +
add esi 1 +
mov [ebx] esi +
mov eax [edi+4] +
cmp [edi] eax +
jz loc_4A4048  +
mov edx offset asc_50A111 +
mov eax edi +
call sub_4A1BD0  +
mov edx offset a__complex +
mov eax edi +
call sub_4A1BD0  +
mov esi [ebx] +
jmp loc_4A3FB0  +
mov eax [esp+78h+var_68] +
test byte ptr [eax] 2 +
jz loc_4A4097  +
mov eax [edi+4] +
cmp [edi] eax +
jz loc_4A4081  +
mov edx offset asc_50A111 +
mov eax edi +
call sub_4A1BA0  +
mov esi [ebx] +
movzx edx byte ptr [esi] +
movsx eax dl +
call sub_4A18D0  +
call sub_4A1900  +
test eax eax +
jz loc_4A4097  +
cmp byte ptr [eax] 0 +
jnz loc_4A40F6  +
add esi 1 +
mov [ebx] esi +
jmp loc_4A3FB0  +
mov edi 3 +
test ebp ebp +
cmovz ebp edi +
jmp loc_4A3F2A  +
mov eax ebx +
call sub_4A1630  +
cmp eax 0FFFFFFFFh +
jz loc_4A3E03  +
mov eax [esp+78h+var_68] +
mov eax [eax+40h] +
test eax eax +
jz loc_4A4538  +
mov edx [eax+esi*4] +
mov edi 1 +
test edx edx +
jz loc_4A3F32  +
cmp byte ptr [edx] 0 +
jz loc_4A3F32  +
mov eax [esp+78h+var_60] +
call sub_4A1BD0  +
jmp loc_4A3F32  +
mov edx eax +
mov eax edi +
call sub_4A1BA0  +
mov esi [ebx] +
jmp loc_4A4097  +
add esi 1 +
mov [ebx] esi +
movzx eax byte ptr [eax+1] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4A415B  +
lea edi [esi+1] +
mov [ebx] edi +
cmp byte ptr [esi+1] 5Fh +
jnz loc_4A4480  +
lea eax [esi+2] +
xor edx edx +
mov [ebx] eax +
jmp loc_4A4154  +
cmp cl 5Fh +
jz loc_4A4519  +
mov byte ptr [esp+edx+78h+var_40] cl +
add edx 1 +
lea ecx [eax+1] +
cmp edx 24h +
lea esi [esp+78h+var_40] +
mov [ebx] ecx +
jz loc_4A452B  +
mov eax ecx +
movzx ecx byte ptr [eax] +
test cl cl +
jnz loc_4A4130  +
xor edi edi +
jmp loc_4A40A6  +
mov eax [esp+78h+var_68] +
lea esi [esp+78h+var_40] +
call sub_4A17D0  +
mov edx ebx +
mov ecx esi +
mov [esp+78h+var_38] 0 +
xor ebx ebx +
mov [esp+78h+var_3C] 0 +
mov [esp+78h+var_40] 0 +
mov edi eax +
mov eax [esp+78h+var_68] +
call sub_4A4CA0  +
test eax eax +
jz loc_4A41E5  +
mov eax [esp+78h+var_3C] +
mov edx [esp+78h+var_40] +
mov [esp+78h+var_78] edi +
mov ecx eax +
sub ecx edx +
cmp edx eax +
mov eax [esp+78h+var_68] +
cmovz ecx ebx +
add eax 0Ch +
call sub_4A1A60  +
mov eax [esp+78h+var_60] +
mov edi [eax+4] +
cmp [eax] edi +
jz loc_4A41D1  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov ecx [esp+78h+var_3C] +
mov edx esi +
mov ebx 1 +
mov eax [esp+78h+var_60] +
call sub_4A1D00  +
mov eax [esp+78h+var_40] +
test eax eax +
jz loc_4A41F5  +
mov [esp+78h+var_78] eax +
call free  +
cmp ebx 1 +
sbb edi edi +
not edi  +
and edi 3 +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A421E  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aLongLong +
mov edi 3 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A4250  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aWchar_t +
mov edi 5 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A4282  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aVoid +
mov edi 3 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_68] +
lea ecx [esp+78h+var_40] +
mov edx ebx +
mov [esp+78h+var_70] 1 +
mov [esp+78h+var_74] 1 +
mov [esp+78h+var_78] 0 +
mov [esp+78h+var_38] 0 +
mov [esp+78h+var_3C] 0 +
mov [esp+78h+var_40] 0 +
call sub_4A2EC0  +
mov ecx [esp+78h+var_3C] +
lea edx [esp+78h+var_40] +
mov ebx eax +
mov eax [esp+78h+var_60] +
call sub_4A1D00  +
jmp loc_4A41E5  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A430A  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aShort +
mov edi 3 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A433C  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aLongDouble +
mov edi 6 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A436E  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aLong +
mov edi 3 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A43A0  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aInt +
mov edi 3 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A43D2  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aFloat +
mov edi 6 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A4404  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aDouble +
mov edi 6 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A4436  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aChar +
mov edi 5 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
add esi 1 +
mov [ebx] esi +
mov esi [eax+4] +
cmp [eax] esi +
jz loc_4A4468  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [esp+78h+var_60] +
mov edx offset aBool +
mov edi 4 +
call sub_4A1BD0  +
jmp loc_4A40A6  +
lea esi [esp+78h+var_40] +
mov [esp+78h+var_70] 2 +
mov [esp+78h+var_74] edi +
mov [esp+78h+var_78] esi +
call strncpy  +
mov [esp+78h+var_78] edi +
mov byte ptr [esp+78h+var_40+2] 0 +
call strlen  +
mov edx 2 +
cmp eax 2 +
cmovb edx eax +
add edx edi +
mov [ebx] edx +
lea eax [esp+78h+var_50] +
mov [esp+78h+var_70] eax +
mov [esp+78h+var_74] offset asc_50A196 +
mov [esp+78h+var_78] esi +
call sscanf  +
mov eax [esp+78h+var_50] +
mov [esp+78h+var_74] offset aIntU_t +
mov [esp+78h+var_78] esi +
mov [esp+78h+var_70] eax +
call sprintf  +
mov eax [esp+78h+var_60] +
mov edi [eax+4] +
cmp [eax] edi +
jz loc_4A44F9  +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
cmp byte ptr [esp+78h+var_40] 0 +
mov edi 3 +
jz loc_4A40A6  +
mov eax [esp+78h+var_60] +
mov edx esi +
call sub_4A1BD0  +
jmp loc_4A40A6  +
mov ecx eax +
lea esi [esp+78h+var_40] +
add ecx 1 +
mov byte ptr [esp+edx+78h+var_40] 0 +
mov [ebx] ecx +
jmp loc_4A44B4  +
cmp byte ptr [eax+1] 5Fh +
jz loc_4A451F  +
xor edi edi +
jmp loc_4A40A6  +
mov eax [esp+78h+var_60] +
mov edx esi +
mov edi 1 +
call sub_4A1C10  +
jmp loc_4A3F32  +
***
mov edi ecx +
push esi  +
push ebx  +
sub esp 4Ch +
mov esi [eax] +
mov [esp+54h+var_40] edx +
mov edx [edx] +
mov [esp+54h+var_44] eax +
mov ebx [esp+54h+arg_0] +
mov [esp+54h+var_3C] ecx +
add edi edx +
test esi 1000h +
jz loc_4A4580  +
cmp byte ptr [edi] 58h +
jz loc_4A46D5  +
mov eax [esp+54h+var_44] +
mov ebp [eax] +
test ebp 1800h +
jz loc_4A45DB  +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_50] offset a__pt__ +
mov [esp+54h+var_38] edx +
call strstr  +
mov edx [esp+54h+var_38] +
test eax eax +
mov esi eax +
jz loc_4A45DB  +
lea eax [eax+6] +
lea ebp [esp+54h+var_30] +
mov [esp+54h+var_30] eax +
mov eax ebp +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
jz loc_4A462A  +
mov ecx [esp+54h+var_30] +
mov edx [esp+54h+var_38] +
add eax ecx +
cmp edi eax +
jz loc_4A4A2C  +
mov eax [esp+54h+var_44] +
mov ebp [eax] +
and ebp 2100h +
jz loc_4A462A  +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_50] offset a__tm__ +
mov [esp+54h+var_38] edx +
call strstr  +
mov edx [esp+54h+var_38] +
test eax eax +
mov esi eax +
jz loc_4A4901  +
lea eax [esi+6] +
lea ebp [esp+54h+var_30] +
mov [esp+54h+var_30] eax +
mov eax ebp +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
jz loc_4A462A  +
mov edx [esp+54h+var_30] +
add eax edx +
cmp edi eax +
jz loc_4A46C0  +
mov eax [esp+54h+var_40] +
cmp [esp+54h+var_3C] 0Ah +
mov edx [eax] +
jg loc_4A4670  +
mov eax [esp+54h+var_44] +
cmp dword ptr [eax+34h] 0FFFFFFFFh +
jz loc_4A4988  +
mov eax [esp+54h+var_3C] +
test eax eax +
jz loc_4A465E  +
mov ecx [esp+54h+var_3C] +
mov eax ebx +
call sub_4A1B10  +
mov eax [esp+54h+var_40] +
mov edx [eax] +
mov eax [esp+54h+var_40] +
add edx [esp+54h+var_3C] +
mov [eax] edx +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi offset a_global_ +
mov ecx 8 +
mov esi edx +
cmps   +
jnz loc_4A4637  +
cmp byte ptr [edx+9] 4Eh +
jnz loc_4A4637  +
movsx eax byte ptr [edx+8] +
cmp al [edx+0Ah] +
jnz loc_4A4637  +
mov [esp+54h+var_50] eax +
mov [esp+54h+var_54] offset byte_4C01B0 +
mov [esp+54h+var_38] edx +
call strchr  +
mov edx [esp+54h+var_38] +
test eax eax +
jz loc_4A4637  +
mov edx offset aAnonymous +
mov eax ebx +
call sub_4A1BD0  +
mov eax [esp+54h+var_40] +
mov edx [eax] +
jmp loc_4A465E  +
cmp byte ptr [edx] 5Fh +
jnz loc_4A462A  +
add edx 1 +
mov [esp+54h+var_30] edx +
jmp loc_4A4A3C  +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_50] 3Ch +
mov [esp+54h+var_38] edx +
call strchr  +
mov edx [esp+54h+var_38] +
test eax eax +
jz loc_4A4960  +
sub eax edx +
cmp [esp+54h+var_3C] eax +
mov ecx eax +
jle loc_4A4960  +
test eax eax +
jnz loc_4A4970  +
mov eax [esp+54h+var_3C] +
mov edi [esp+54h+var_40] +
mov [esp+54h+var_24] 0 +
mov [esp+54h+var_28] 0 +
lea eax [edx+eax+1] +
mov [edi] eax +
mov eax [esp+54h+var_44] +
mov [esp+54h+var_2C] 0 +
cmp dword ptr [eax+34h] 0FFFFFFFFh +
jz loc_4A49A2  +
mov edi [esp+54h+var_44] +
mov eax esi +
mov edx (offset asc_50A124+2) +
or eax 1 +
mov [edi] eax +
mov eax ebx +
call sub_4A1BD0  +
mov edi [esp+54h+var_40] +
mov eax [esp+54h+var_2C] +
test eax eax +
jz loc_4A4782  +
mov [esp+54h+var_54] eax +
call free  +
mov [esp+54h+var_28] 0 +
mov [esp+54h+var_24] 0 +
mov [esp+54h+var_2C] 0 +
mov eax [edi] +
movzx ecx byte ptr [eax] +
cmp cl 53h +
jz loc_4A47A2  +
jle loc_4A4821  +
cmp cl 54h +
jz loc_4A48B0  +
cmp cl 55h +
nop   +
jnz loc_4A47D0  +
cmp cl 53h +
jnz loc_4A4994  +
lea edx [eax+1] +
mov [edi] edx +
movzx eax byte ptr [eax+1] +
cmp al 4Eh +
jz loc_4A49C1  +
cmp al 50h +
jz loc_4A49D9  +
cmp al 4Dh +
jz loc_4A4BC2  +
lea esi [esi+0] +
mov eax ebx +
mov edx offset asc_50A124 +
call sub_4A1BD0  +
mov eax [esp+54h+var_2C] +
test eax eax +
jz loc_4A4804  +
mov [esp+54h+var_54] eax +
call free  +
mov [esp+54h+var_28] 0 +
mov [esp+54h+var_24] 0 +
mov [esp+54h+var_2C] 0 +
mov eax [esp+54h+var_40] +
mov eax [eax] +
cmp byte ptr [eax] 5Fh +
jz loc_4A49B3  +
mov eax [esp+54h+var_44] +
mov [eax] esi +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp cl 41h +
jnz loc_4A47D0  +
add eax 1 +
mov [edi] eax +
mov eax edi +
call sub_4A15E0  +
test eax eax +
mov ebp eax +
jle loc_4A47D0  +
mov edx offset asc_50A10D +
lea eax [esp+54h+var_2C] +
call sub_4A1BD0  +
lea eax [ebp+1] +
mov [esp+54h+var_54] eax +
call sub_4A05F0  +
mov ecx eax +
mov [esp+54h+var_3C] eax +
mov eax [edi] +
mov [esp+54h+var_54] ecx +
mov [esp+54h+var_4C] ebp +
mov [esp+54h+var_50] eax +
call memcpy  +
mov ecx [esp+54h+var_3C] +
mov eax [esp+54h+var_44] +
mov byte ptr [ecx+ebp] 0 +
mov eax [eax] +
mov [esp+54h+var_54] ecx +
mov [esp+54h+var_50] eax +
call sub_4A2700  +
test eax eax +
mov ecx eax +
jz loc_4A4BD8  +
cmp byte ptr [eax] 0 +
jnz loc_4A4C82  +
mov [esp+54h+var_54] ecx +
call free  +
mov eax [esp+54h+var_3C] +
add [edi] ebp +
mov [esp+54h+var_54] eax +
call free  +
jmp loc_4A48CC  +
add eax 1 +
mov edx edi +
mov [edi] eax +
mov eax [esp+54h+var_44] +
lea ecx [esp+54h+var_2C] +
call sub_4A3940  +
test eax eax +
jz loc_4A47D0  +
mov ecx [esp+54h+var_28] +
mov eax ebx +
lea edx [esp+54h+var_2C] +
call sub_4A1D00  +
mov eax [edi] +
movzx eax byte ptr [eax] +
cmp al 5Fh +
jz loc_4A47D0  +
test al al +
jz loc_4A47D0  +
mov edx (offset aU+2) +
mov eax ebx +
call sub_4A1BD0  +
jmp loc_4A475A  +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_50] offset a__ps__ +
call strstr  +
mov edx [esp+54h+var_38] +
test eax eax +
mov esi eax +
jnz loc_4A4605  +
mov [esp+54h+var_54] edx +
mov [esp+54h+var_50] offset a__pt__ +
call strstr  +
mov edx [esp+54h+var_38] +
test eax eax +
mov esi eax +
jnz loc_4A4605  +
mov [esp+54h+var_50] offset a__s +
mov [esp+54h+var_54] edx +
call strstr  +
test eax eax +
mov esi eax +
jz loc_4A462A  +
lea eax [eax+3] +
jmp loc_4A4608  +
mov ecx [esp+54h+var_3C] +
test ecx ecx +
jz loc_4A470B  +
mov ecx [esp+54h+var_3C] +
mov eax ebx +
call sub_4A1B10  +
mov eax [esp+54h+var_40] +
mov edx [eax] +
mov eax [esp+54h+var_44] +
mov esi [eax] +
jmp loc_4A470B  +
mov dword ptr [eax+34h] 0 +
jmp loc_4A4645  +
cmp cl 55h +
jz loc_4A47AB  +
jmp loc_4A47D0  +
mov eax [ebx+4] +
mov edi [esp+54h+var_44] +
sub eax [ebx] +
mov [edi+34h] eax +
jmp loc_4A473F  +
mov ebx [esp+54h+var_40] +
add eax 1 +
mov [ebx] eax +
jmp loc_4A4813  +
mov edx offset asc_50A0F5 +
lea eax [esp+54h+var_2C] +
mov [esp+54h+var_3C] ecx +
call sub_4A1BD0  +
mov edx [edi] +
mov ecx [esp+54h+var_3C] +
lea eax [edx+1] +
mov [edi] eax +
movzx eax byte ptr [edx+1] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_4A47D0  +
mov ebp ecx +
jmp loc_4A4A13  +
mov eax [edi] +
lea edx [eax+1] +
mov [edi] edx +
movzx eax byte ptr [eax+1] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_4A4C64  +
test al al +
mov ds:byte_514200 al +
jz loc_4A49F7  +
mov edx offset byte_514200 +
lea eax [esp+54h+var_2C] +
call sub_4A1BD0  +
jmp loc_4A49F7  +
cmp byte ptr [ecx] 5Fh +
jnz loc_4A45D5  +
add ecx 1 +
mov [esp+54h+var_30] ecx +
mov eax [esp+54h+var_40] +
mov ecx esi +
mov [esp+54h+var_24] 0 +
mov [esp+54h+var_28] 0 +
mov [esp+54h+var_2C] 0 +
mov edx [eax] +
sub ecx edx +
jz loc_4A4A67  +
mov eax ebx +
call sub_4A1B10  +
mov eax [esp+54h+var_44] +
cmp dword ptr [eax+34h] 0FFFFFFFFh +
jz loc_4A4C53  +
mov ecx [esp+54h+var_44] +
mov edx 50A126h +
mov eax [ecx] +
mov [esp+54h+var_38] eax +
or eax 1 +
mov [ecx] eax +
mov eax ebx +
call sub_4A1BD0  +
cmp edi [esp+54h+var_30] +
ja loc_4A4B5F  +
jmp loc_4A4C00  +
mov eax [esp+54h+var_44] +
add esi 1 +
mov edx ebp +
lea ecx [esp+54h+var_20] +
mov [esp+54h+var_30] esi +
call sub_4A3940  +
test eax eax +
jz loc_4A4C00  +
mov edx offset asc_50A10F +
lea eax [esp+54h+var_2C] +
call sub_4A1BD0  +
mov ecx [esp+54h+var_1C] +
lea eax [esp+54h+var_2C] +
lea edx [esp+54h+var_20] +
call sub_4A1D00  +
mov eax [esp+54h+var_20] +
test eax eax +
jz loc_4A4B05  +
mov [esp+54h+var_54] eax +
call free  +
mov [esp+54h+var_1C] 0 +
mov [esp+54h+var_18] 0 +
mov [esp+54h+var_20] 0 +
lea eax [esp+54h+var_2C] +
mov edx offset asc_50A113 +
call sub_4A1BD0  +
mov eax [esp+54h+var_30] +
cmp byte ptr [eax] 4Ch +
jnz loc_4A4C00  +
add eax 1 +
mov [esp+54h+var_30] eax +
lea edx [esp+54h+var_2C] +
mov eax ebp +
call sub_4A1C50  +
test eax eax +
jz loc_4A4C00  +
mov ecx [esp+54h+var_28] +
lea edx [esp+54h+var_2C] +
mov eax ebx +
call sub_4A1D00  +
mov edx (offset aU+2) +
mov eax ebx +
call sub_4A1BD0  +
cmp edi [esp+54h+var_30] +
jbe loc_4A4C00  +
mov eax [esp+54h+var_2C] +
test eax eax +
jz loc_4A4B87  +
mov [esp+54h+var_54] eax +
call free  +
mov [esp+54h+var_28] 0 +
mov [esp+54h+var_24] 0 +
mov [esp+54h+var_2C] 0 +
mov esi [esp+54h+var_30] +
movzx eax byte ptr [esi] +
cmp al 4Ch +
jz loc_4A4BF0  +
cmp al 58h +
jz loc_4A4AA0  +
mov eax [esp+54h+var_44] +
lea ecx [esp+54h+var_2C] +
mov edx ebp +
call sub_4A3940  +
test eax eax +
jz loc_4A4C00  +
cmp esi [esp+54h+var_30] +
jnz loc_4A4B3A  +
mov eax [esp+54h+var_44] +
mov ebx [esp+54h+var_38] +
mov [eax] ebx +
jmp loc_4A4668  +
mov edx offset a2147483648 +
lea eax [esp+54h+var_2C] +
call sub_4A1BD0  +
add dword ptr [edi] 1 +
jmp loc_4A48CC  +
mov edx [edi] +
mov ecx ebp +
lea eax [esp+54h+var_2C] +
call sub_4A1B10  +
jmp loc_4A489E  +
add esi 1 +
mov [esp+54h+var_30] esi +
jmp loc_4A4B27  +
mov eax [esp+54h+var_2C] +
test eax eax +
jz loc_4A4C28  +
mov [esp+54h+var_54] eax +
call free  +
mov [esp+54h+var_28] 0 +
mov [esp+54h+var_24] 0 +
mov [esp+54h+var_2C] 0 +
cmp edi [esp+54h+var_30] +
ja loc_4A4C32  +
sub dword ptr [ebx+4] 1 +
mov eax ebx +
mov edx offset asc_50A124 +
call sub_4A1BD0  +
mov eax [esp+54h+var_44] +
mov ebx [esp+54h+var_38] +
mov [eax] ebx +
mov eax [esp+54h+var_40] +
mov edx [eax] +
jmp loc_4A465E  +
mov eax [ebx+4] +
mov ecx [esp+54h+var_44] +
sub eax [ebx] +
mov [ecx+34h] eax +
jmp loc_4A4A75  +
mov ecx ebp +
cmp cl 55h +
jnz loc_4A48CC  +
mov edx offset aU +
lea eax [esp+54h+var_2C] +
call sub_4A1BD0  +
jmp loc_4A48CC  +
mov edx eax +
mov [esp+54h+var_38] eax +
lea eax [esp+54h+var_2C] +
call sub_4A1BD0  +
mov ecx [esp+54h+var_38] +
jmp loc_4A4896  +
***
push edi  +
mov edi eax +
push esi  +
mov eax edx +
push ebx  +
mov ebx edx +
sub esp 1Ch +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
mov esi eax +
jz loc_4A4CF2  +
mov eax [ebx] +
mov [esp+28h+var_28] eax +
call strlen  +
xor edx edx +
cmp esi eax +
jle loc_4A4CD5  +
add esp 1Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+28h+var_28] ebp +
mov edx ebx +
mov eax edi +
mov ecx esi +
call sub_4A4550  +
add esp 1Ch +
mov edx 1 +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 1Ch +
xor edx edx +
pop ebx  +
mov eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp ebp 2 +
jle loc_4A4DA6  +
cmp al 6Fh +
jz loc_4A4E50  +
cmp ebp 4 +
jle loc_4A4DA6  +
mov dword ptr [esp+8] 4 +
mov dword ptr [esp+4] offset aType +
mov [esp] ebx +
call memcmp  +
test eax eax +
jnz loc_4A4DA6  +
movsx eax byte ptr [ebx+4] +
add ebx 5 +
mov dword ptr [esp] offset byte_4C01B0 +
mov [esp+4] eax +
call strchr  +
test eax eax +
jz loc_4A4DA6  +
lea ecx [esp+30h] +
mov eax esi +
lea edx [esp+2Ch] +
mov [esp+2Ch] ebx +
call sub_4A3940  +
test eax eax +
jnz loc_4A4DD2  +
xor ebx ebx +
mov eax esi +
call sub_4A1710  +
add esp 9Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
cmp ebp 2 +
jg loc_4A4D53  +
nop   +
jmp loc_4A4DA6  +
***
mov eax [esp+0B4h] +
mov ebx 1 +
mov [esp] eax +
call strlen  +
mov edx 20h +
add eax [esp+0B4h] +
mov dword ptr [eax] 7265706Fh +
mov dword ptr [eax+4] 726F7461h +
mov [eax+8] dx +
mov edi [esp+30h] +
mov eax [esp+34h] +
mov [esp+4] edi +
sub eax edi +
mov [esp+8] eax +
mov eax [esp+0B4h] +
mov [esp] eax +
call strncat  +
test edi edi +
jz loc_4A4DA8  +
mov [esp] edi +
call free  +
mov dword ptr [esp+34h] 0 +
mov dword ptr [esp+38h] 0 +
mov dword ptr [esp+30h] 0 +
jmp loc_4A4DA8  +
***
cmp byte ptr [ebx+1] 70h +
jnz loc_4A4D53  +
movsx eax byte ptr [ebx+2] +
mov dword ptr [esp] offset byte_4C01B0 +
mov [esp+4] eax +
call strchr  +
test eax eax +
jz loc_4A4D53  +
cmp ebp 9 +
jle loc_4A5030  +
lea eax [ebx+3] +
mov dword ptr [esp+8] 7 +
mov dword ptr [esp+4] offset aAssign_ +
mov [esp] eax +
call memcmp  +
test eax eax +
jnz loc_4A5030  +
lea eax [ebp-0Ah] +
xor edi edi +
mov [esp+18h] eax +
lea eax [ebx+0Ah] +
mov ebp offset off_50ADE0 +
mov [esp+1Ch] eax +
jmp loc_4A4ECF  +
add edi 1 +
add ebp 0Ch +
cmp edi 4Fh +
jz loc_4A4DA6  +
mov ebx [ebp+0] +
mov [esp] ebx +
call strlen  +
cmp eax [esp+18h] +
jnz loc_4A4EC0  +
mov eax [esp+18h] +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+1Ch] +
mov [esp+4] eax +
call memcmp  +
test eax eax +
jnz loc_4A4EC0  +
mov eax [esp+0B4h] +
mov ebx 1 +
mov dword ptr [eax] 7265706Fh +
mov dword ptr [eax+4] 726F7461h +
mov byte ptr [eax+8] 0 +
lea eax [edi+edi*2] +
mov eax ds:off_50ADE4[eax*4] +
mov [esp+4] eax +
mov eax [esp+0B4h] +
add eax 8 +
mov [esp] eax +
call strcpy  +
mov eax [esp+0B4h] +
mov [esp] eax +
call strlen  +
mov edx [esp+0B4h] +
mov ecx 3Dh +
mov [edx+eax] cx +
jmp loc_4A4DA8  +
***
lea eax [ebx+2] +
mov ebp offset off_50ADE0 +
xor edi edi +
mov [esp+18h] eax +
jmp loc_4A4FBF  +
add edi 1 +
add ebp 0Ch +
cmp edi 4Fh +
jz loc_4A4DA6  +
mov ebx [ebp+0] +
mov [esp] ebx +
call strlen  +
cmp eax 2 +
jnz loc_4A4FB0  +
mov eax [esp+18h] +
mov dword ptr [esp+8] 2 +
mov [esp] ebx +
mov [esp+4] eax +
call memcmp  +
test eax eax +
jnz loc_4A4FB0  +
mov eax [esp+0B4h] +
mov ebx 1 +
mov dword ptr [eax] 7265706Fh +
mov dword ptr [eax+4] 726F7461h +
mov byte ptr [eax+8] 0 +
lea eax [edi+edi*2] +
mov eax ds:off_50ADE4[eax*4] +
mov [esp+4] eax +
mov eax [esp+0B4h] +
add eax 8 +
mov [esp] eax +
call strcpy  +
jmp loc_4A4DA8  +
***
lea eax [ebp-3] +
xor edi edi +
mov [esp+18h] eax +
lea eax [ebx+3] +
mov ebp offset off_50ADE0 +
mov [esp+1Ch] eax +
jmp loc_4A5056  +
add edi 1 +
add ebp 0Ch +
cmp edi 4Fh +
jz loc_4A4DA6  +
mov ebx [ebp+0] +
mov [esp] ebx +
call strlen  +
cmp [esp+18h] eax +
jnz loc_4A5047  +
mov eax [esp+18h] +
mov [esp] ebx +
mov [esp+8] eax +
mov eax [esp+1Ch] +
mov [esp+4] eax +
call memcmp  +
test eax eax +
jnz loc_4A5047  +
jmp loc_4A4FEB  +
***
cmp byte ptr [ebx+3] 70h +
lea esi [esi+0] +
jnz loc_4A4F6C  +
add ebx 4 +
jmp loc_4A4D8F  +
***
push edi  +
mov edi edx +
push esi  +
mov edx offset aTemplate +
push ebx  +
mov esi 1 +
sub esp 2Ch +
mov [esp+38h+var_2C] eax +
mov eax ecx +
call sub_4A1BD0  +
lea edx [esp+38h+var_28] +
mov eax edi +
call sub_4A1680  +
test eax eax +
jz loc_4A5140  +
mov eax [esp+38h+var_28] +
xor ebx ebx +
test eax eax +
jg loc_4A51BD  +
lea esi [esi+0] +
mov eax [ebp+4] +
cmp byte ptr [eax-1] 3Eh +
jz loc_4A51F1  +
mov eax ebp +
mov edx offset aClass +
call sub_4A1BD0  +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp-4+arg_8] +
lea ecx [esp-4+arg_10] +
mov edx edi +
call sub_4A3940  +
test eax eax +
mov esi eax +
jnz loc_4A5202  +
mov eax [esp-4+arg_10] +
test eax eax +
jz loc_4A51A4  +
mov [esp+0] eax +
call free  +
mov [esp-4+arg_14] 0 +
mov [esp-4+arg_18] 0 +
mov [esp-4+arg_10] 0 +
test esi esi +
jz loc_4A51E2  +
add ebx 1 +
cmp [esp-4+arg_C] ebx +
jle loc_4A5140  +
mov edx offset asc_50A11E +
mov eax ebp +
call sub_4A1BD0  +
mov edx [edi] +
movzx eax byte ptr [edx] +
cmp al 5Ah +
jz loc_4A5216  +
cmp al 7Ah +
jnz loc_4A5163  +
mov eax [esp-4+arg_8] +
add edx 1 +
mov ecx ebp +
mov [edi] edx +
mov edx edi +
call sub_4A5100  +
mov esi eax +
test esi esi +
jnz loc_4A51A8  +
mov eax [ebp+4] +
xor esi esi +
cmp byte ptr [eax-1] 3Eh +
jnz loc_4A514D  +
mov edx offset asc_50A111 +
mov eax ebp +
call sub_4A1BD0  +
jmp loc_4A514D  +
mov ecx [esp-4+arg_14] +
lea edx [esp-4+arg_10] +
mov eax ebp +
call sub_4A1D00  +
jmp loc_4A517C  +
add edx 1 +
mov eax ebp +
mov [edi] edx +
mov edx offset aClass_0 +
call sub_4A1BD0  +
jmp loc_4A51A8  +
***
mov edi eax +
push esi  +
mov esi ecx +
push ebx  +
mov ebx edx +
sub esp 1Ch +
mov ebp [edx] +
mov eax [eax+50h] +
test eax eax +
mov dword ptr [esi+8] 0 +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi] 0 +
jg loc_4A5291  +
mov eax [ebx] +
cmp byte ptr [eax] 6Eh +
jnz loc_4A52F3  +
add eax 1 +
mov [ebx] eax +
mov eax ebx +
call sub_4A15E0  +
test eax eax +
mov [edi+50h] eax +
jle loc_4A52D5  +
cmp eax 9 +
jg loc_4A52E1  +
mov dword ptr [esi+8] 0 +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi] 0 +
mov edx [edi+4Ch] +
sub eax 1 +
mov [edi+50h] eax +
test edx edx +
jz loc_4A52D5  +
mov ecx [edx+4] +
mov eax esi +
mov ebx 1 +
call sub_4A1D00  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [esp+0] 0Ch +
call sub_4A05F0  +
mov [edi+4Ch] eax +
mov ecx eax +
mov edx ebx +
mov eax edi +
call sub_4A3940  +
test eax eax +
jnz loc_4A5334  +
xor ebx ebx +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [ebx] +
cmp byte ptr [ebp+0] 5Fh +
jnz loc_4A52D5  +
add ebp 1 +
mov [ebx] ebp +
jmp loc_4A5242  +
mov ecx [edi+4Ch] +
test ecx ecx +
jz loc_4A52B7  +
mov eax [ecx] +
test eax eax +
jz loc_4A52C8  +
mov [esp+24h+var_24] eax +
mov [esp+24h+var_18] ecx +
call free  +
mov ecx [esp+24h+var_18] +
mov edx ebx +
mov eax edi +
mov dword ptr [ecx+4] 0 +
mov dword ptr [ecx+8] 0 +
mov dword ptr [ecx] 0 +
mov ecx [edi+4Ch] +
call sub_4A3940  +
test eax eax +
jz loc_4A52D5  +
mov edx [edi+4Ch] +
mov eax esi +
mov ecx [edx+4] +
call sub_4A1D00  +
mov eax [edi+48h] +
mov ecx [ebx] +
mov ebx 1 +
test eax eax +
jnz loc_4A52D7  +
sub ecx ebp +
mov edx ebp +
mov eax edi +
call sub_4A2020  +
jmp loc_4A52D7  +
***
push edi  +
mov edi ecx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 3Ch +
test byte ptr [eax] 1 +
jnz loc_4A5581  +
mov edx [ebp+0] +
movzx eax byte ptr [edx] +
xor esi esi +
cmp al 5Fh +
jz loc_4A54A5  +
test al al +
jz loc_4A54A5  +
cmp al 65h +
jz loc_4A54A5  +
cmp al 54h +
jz loc_4A53A6  +
cmp al 4Eh +
lea esi [esi+0] +
jnz loc_4A54E4  +
lea eax [edx+1] +
mov [ebp+0] eax +
cmp byte ptr [edx] 4Eh +
jz loc_4A5548  +
mov [esp+48h+var_30] 1 +
test dword ptr [ebx] 3800h +
jz loc_4A53CF  +
cmp dword ptr [ebx+20h] 9 +
jg loc_4A55AC  +
lea edx [esp+48h+var_2C] +
mov eax ebp +
call sub_4A1680  +
test eax eax +
jz loc_4A5560  +
mov eax [esp+48h+var_2C] +
test dword ptr [ebx] 3C00h +
jz loc_4A53F5  +
sub eax 1 +
mov [esp+48h+var_2C] eax +
test eax eax +
js loc_4A5560  +
cmp [ebx+20h] eax +
jg loc_4A5414  +
jmp loc_4A5560  +
mov eax [esp+48h+var_24] +
test eax eax +
jnz loc_4A5469  +
mov esi 1 +
mov eax [ebx+50h] +
test eax eax +
jle loc_4A5490  +
mov eax [ebx+4] +
test esi esi +
mov edx [esp+48h+var_2C] +
mov eax [eax+edx*4] +
mov [esp+48h+var_28] eax +
jz loc_4A5436  +
test byte ptr [ebx] 1 +
jnz loc_4A54D3  +
lea ecx [esp+48h+var_24] +
mov eax ebx +
lea edx [esp+48h+var_28] +
call sub_4A5230  +
test eax eax +
jz loc_4A5560  +
test byte ptr [ebx] 1 +
jz loc_4A5407  +
mov ecx [esp+48h+var_20] +
mov eax edi +
lea edx [esp+48h+var_24] +
call sub_4A1D00  +
mov eax [esp+48h+var_24] +
test eax eax +
jz loc_4A540F  +
mov [esp+48h+var_48] eax +
call free  +
mov [esp+48h+var_20] 0 +
mov [esp+48h+var_1C] 0 +
mov [esp+48h+var_24] 0 +
jmp loc_4A540F  +
sub [esp+48h+var_30] 1 +
jns loc_4A541B  +
mov edx [ebp+0] +
movzx eax byte ptr [edx] +
cmp al 5Fh +
jnz loc_4A5386  +
mov ecx [ebx+50h] +
test ecx ecx +
jg loc_4A5396  +
cmp al 65h +
jz loc_4A55D2  +
test byte ptr [ebx] 1 +
jz loc_4A54C9  +
mov edx offset asc_50A113 +
mov eax edi +
call sub_4A1BD0  +
mov eax 1 +
jmp loc_4A5562  +
mov edx offset asc_50A11E +
mov eax edi +
call sub_4A1BD0  +
jmp loc_4A5436  +
test esi esi +
jz loc_4A54F6  +
test byte ptr [ebx] 1 +
nop   +
lea esi [esi+0] +
jnz loc_4A55C1  +
lea ecx [esp+48h+var_24] +
mov edx ebp +
mov eax ebx +
call sub_4A5230  +
test eax eax +
jz loc_4A5560  +
test byte ptr [ebx] 1 +
jnz loc_4A5570  +
mov eax [esp+48h+var_24] +
mov esi 1 +
test eax eax +
jz loc_4A5497  +
mov [esp+48h+var_48] eax +
call free  +
mov edx [ebp+0] +
mov [esp+48h+var_20] 0 +
mov [esp+48h+var_1C] 0 +
mov [esp+48h+var_24] 0 +
movzx eax byte ptr [edx] +
jmp loc_4A549D  +
lea edx [esp+48h+var_30] +
mov eax ebp +
call sub_4A1680  +
test eax eax +
jnz loc_4A53BD  +
nop   +
lea esi [esi+0] +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+48h+var_20] +
lea edx [esp+48h+var_24] +
mov eax edi +
call sub_4A1D00  +
jmp loc_4A550C  +
mov edx offset asc_50A10F +
mov eax ecx +
call sub_4A1BD0  +
mov edx [ebp+0] +
movzx eax byte ptr [edx] +
test al al +
jnz loc_4A537C  +
mov edx offset aVoid +
mov eax edi +
call sub_4A1BD0  +
jmp loc_4A5376  +
mov eax ebp +
call sub_4A15E0  +
test eax eax +
mov [esp+48h+var_2C] eax +
jg loc_4A53E6  +
jmp loc_4A5560  +
mov edx offset asc_50A11E +
mov eax edi +
call sub_4A1BD0  +
jmp loc_4A54F6  +
add edx 1 +
test byte ptr [ebx] 1 +
mov [ebp+0] edx +
jz loc_4A54C9  +
test esi esi +
jnz loc_4A55F6  +
mov edx offset a___ +
mov eax edi +
call sub_4A1BD0  +
jmp loc_4A54B8  +
mov edx 50A596h +
mov eax edi +
call sub_4A1BD0  +
jmp loc_4A55E5  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov ebp [eax+4Ch] +
add dword ptr [eax+48h] 1 +
mov edi [eax+50h] +
mov dword ptr [eax+4Ch] 0 +
mov dword ptr [eax+50h] 0 +
call sub_4A5360  +
mov esi [ebx+4Ch] +
test esi esi +
jz loc_4A567A  +
mov edx [esi] +
test edx edx +
jz loc_4A566A  +
mov [esp+1Ch+var_1C] edx +
mov [esp+1Ch+var_10] eax +
call free  +
mov eax [esp+1Ch+var_10] +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi+8] 0 +
mov dword ptr [esi] 0 +
mov esi [ebx+4Ch] +
mov [esp+1Ch+var_1C] esi +
mov [esp+1Ch+var_10] eax +
call free  +
mov eax [esp+1Ch+var_10] +
mov [ebx+4Ch] ebp +
mov [ebx+50h] edi +
sub dword ptr [ebx+48h] 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
mov edi edx +
push esi  +
push ebx  +
mov ebx ecx +
sub esp 3Ch +
mov edx [edx] +
mov esi [esp+48h+arg_0] +
mov ecx esi +
sub ecx edx +
jnz loc_4A5890  +
mov eax ebx +
mov edx 1 +
call sub_4A1AA0  +
mov eax [ebx+4] +
mov byte ptr [eax] 0 +
lea eax [esi+2] +
test dword ptr [ebp+0] 1000h +
mov [edi] eax +
jz loc_4A56D7  +
cmp byte ptr [esi+2] 58h +
jz loc_4A58D8  +
test dword ptr [ebp+0] 3C00h +
mov edx [ebx] +
jz loc_4A570A  +
mov edi offset a__ct +
mov ecx 5 +
mov esi edx +
cmps   +
jz loc_4A58A0  +
mov edi offset a__dt +
mov ecx 5 +
mov esi edx +
cmps   +
jz loc_4A58C4  +
mov eax [ebx+4] +
movzx edi byte ptr [edx] +
mov esi eax +
sub esi edx +
cmp esi 2 +
mov [esp+48h+var_38] eax +
jle loc_4A57C4  +
mov eax edi +
cmp al 6Fh +
jz loc_4A5900  +
cmp esi 4 +
jle loc_4A57C4  +
mov [esp+48h+var_48] edx +
mov [esp+48h+var_40] 4 +
mov [esp+48h+var_44] offset aType +
mov [esp+48h+var_34] edx +
call memcmp  +
mov edx [esp+48h+var_34] +
test eax eax +
jnz loc_4A57C4  +
movsx eax byte ptr [edx+4] +
mov [esp+48h+var_48] offset byte_4C01B0 +
mov [esp+48h+var_44] eax +
call strchr  +
mov edx [esp+48h+var_34] +
test eax eax +
jz loc_4A57C4  +
add edx 5 +
mov [esp+48h+var_28] edx +
lea ecx [esp+48h+var_24] +
mov eax ebp +
lea edx [esp+48h+var_28] +
call sub_4A3940  +
test eax eax +
jnz loc_4A59F0  +
mov eax [ebx+4] +
mov edx [ebx] +
mov [esp+48h+var_38] eax +
nop   +
lea esi [esi+0] +
mov ecx [esp+48h+var_38] +
cmp edx ecx +
jz loc_4A58F0  +
sub ecx edx +
mov eax 1 +
cmp ecx 1 +
jz loc_4A58B4  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax edi +
cmp al 5Fh +
jnz loc_4A57A0  +
cmp byte ptr [edx+1] 5Fh +
jnz loc_4A57A0  +
movzx eax byte ptr [edx+2] +
cmp al 6Fh +
jz loc_4A5ACF  +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 8 +
jz loc_4A57A0  +
movzx ecx byte ptr [edx+3] +
test byte ptr ds:word_509C60[ecx+ecx] 8 +
jz loc_4A57A0  +
cmp byte ptr [edx+4] 0 +
jnz loc_4A5AEE  +
lea eax [edx+2] +
mov edi offset off_50ADE0 +
mov [esp+48h+var_30] ebx +
xor esi esi +
mov ebx eax +
mov [esp+48h+var_34] edx +
jmp loc_4A5826  +
add esi 1 +
add edi 0Ch +
cmp esi 4Fh +
jz loc_4A5B77  +
mov ebp [edi] +
mov [esp+48h+var_48] ebp +
call strlen  +
cmp eax 2 +
jnz loc_4A5817  +
mov [esp+48h+var_40] 2 +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] ebp +
call memcmp  +
test eax eax +
jnz loc_4A5817  +
mov edx [esp+48h+var_34] +
mov ebx [esp+48h+var_30] +
mov [ebx+4] edx +
mov eax ebx +
mov edx offset aOperator +
call sub_4A1BD0  +
lea eax [esi+esi*2] +
mov edx ds:off_50ADE4[eax*4] +
test edx edx +
jz loc_4A5792  +
cmp byte ptr [edx] 0 +
jz loc_4A5792  +
mov eax ebx +
call sub_4A1BD0  +
jmp loc_4A5792  +
mov eax ebx +
call sub_4A1B10  +
jmp loc_4A56AD  +
add dword ptr [ebp+28h] 1 +
mov eax 1 +
mov [ebx+4] edx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
cmp byte ptr [edx] 2Eh +
setnz al  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add dword ptr [ebp+2Ch] 1 +
mov eax 1 +
mov [ebx+4] edx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+48h+var_48] ebx +
xor ecx ecx +
mov edx edi +
mov eax ebp +
call sub_4A4550  +
jmp loc_4A56D7  +
add esp 3Ch +
mov eax 1 +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [edx+1] 70h +
jnz loc_4A572B  +
movsx eax byte ptr [edx+2] +
mov [esp+48h+var_48] offset byte_4C01B0 +
mov [esp+48h+var_34] edx +
mov [esp+48h+var_44] eax +
call strchr  +
mov edx [esp+48h+var_34] +
test eax eax +
jz loc_4A572B  +
cmp esi 9 +
jle loc_4A5A50  +
lea eax [edx+3] +
mov [esp+48h+var_40] 7 +
mov [esp+48h+var_44] offset aAssign_ +
mov [esp+48h+var_48] eax +
call memcmp  +
mov edx [esp+48h+var_34] +
test eax eax +
jnz loc_4A5A50  +
lea eax [edx+0Ah] +
sub esi 0Ah +
xor edi edi +
mov [esp+48h+var_34] eax +
mov [esp+48h+var_30] edx +
mov [esp+48h+var_2C] ebx +
jmp loc_4A5980  +
add edi 1 +
cmp edi 4Fh +
jz loc_4A5AE5  +
lea eax [edi+edi*2] +
mov ebp ds:off_50ADE0[eax*4] +
lea ebx ds:0[eax*4] +
mov [esp+48h+var_48] ebp +
call strlen  +
cmp eax esi +
jnz loc_4A5974  +
mov eax [esp+48h+var_34] +
mov [esp+48h+var_40] esi +
mov [esp+48h+var_48] ebp +
mov [esp+48h+var_44] eax +
call memcmp  +
test eax eax +
jnz loc_4A5974  +
mov edx [esp+48h+var_30] +
mov edi ebx +
mov ebx [esp+48h+var_2C] +
mov [ebx+4] edx +
mov eax ebx +
mov edx offset aOperator +
call sub_4A1BD0  +
mov edx ds:off_50ADE4[edi] +
test edx edx +
jz loc_4A59E1  +
cmp byte ptr [edx] 0 +
jnz loc_4A5B80  +
mov edx offset asc_50A603 +
jmp loc_4A587F  +
mov eax [ebx] +
mov edx offset aOperator_0 +
mov [ebx+4] eax +
mov eax ebx +
call sub_4A1BD0  +
mov ecx [esp+48h+var_20] +
mov eax ebx +
lea edx [esp+48h+var_24] +
call sub_4A1D00  +
mov eax [esp+48h+var_24] +
test eax eax +
jz loc_4A5792  +
mov [esp+48h+var_48] eax +
call free  +
mov eax [ebx+4] +
mov [esp+48h+var_20] 0 +
mov [esp+48h+var_1C] 0 +
mov [esp+48h+var_24] 0 +
mov edx [ebx] +
mov [esp+48h+var_38] eax +
jmp loc_4A57A0  +
lea eax [edx+3] +
sub esi 3 +
xor edi edi +
mov [esp+48h+var_34] eax +
mov [esp+48h+var_30] edx +
mov [esp+48h+var_2C] ebx +
jmp loc_4A5A6E  +
add edi 1 +
cmp edi 4Fh +
jz loc_4A5AE5  +
lea eax [edi+edi*2] +
mov ebp ds:off_50ADE0[eax*4] +
lea ebx ds:0[eax*4] +
mov [esp+48h+var_48] ebp +
call strlen  +
cmp eax esi +
jnz loc_4A5A66  +
mov eax [esp+48h+var_34] +
mov [esp+48h+var_40] esi +
mov [esp+48h+var_48] ebp +
mov [esp+48h+var_44] eax +
call memcmp  +
test eax eax +
jnz loc_4A5A66  +
mov edx [esp+48h+var_30] +
mov edi ebx +
mov ebx [esp+48h+var_2C] +
mov [ebx+4] edx +
mov eax ebx +
mov edx offset aOperator +
call sub_4A1BD0  +
mov edx ds:off_50ADE4[edi] +
test edx edx +
jnz loc_4A5876  +
jmp loc_4A5792  +
cmp byte ptr [edx+3] 70h +
jnz loc_4A57DC  +
add edx 4 +
lea esi [esi+0] +
jmp loc_4A5777  +
mov edx [esp+48h+var_30] +
jmp loc_4A57A0  +
cmp al 61h +
jnz loc_4A57A0  +
cmp byte ptr [edx+5] 0 +
jnz loc_4A57A0  +
mov esi offset off_50ADE0 +
xor edi edi +
lea eax [edx+2] +
mov [esp+48h+var_30] ebx +
mov ebp eax +
mov ebx esi +
mov [esp+48h+var_34] edx +
jmp loc_4A5B23  +
add edi 1 +
add ebx 0Ch +
cmp edi 4Fh +
jz loc_4A5B77  +
mov esi [ebx] +
mov [esp+48h+var_48] esi +
call strlen  +
cmp eax 3 +
jnz loc_4A5B18  +
mov [esp+48h+var_40] 3 +
mov [esp+48h+var_44] ebp +
mov [esp+48h+var_48] esi +
call memcmp  +
test eax eax +
jnz loc_4A5B18  +
mov edx [esp+48h+var_34] +
imul edi edi +
mov ebx [esp+48h+var_30] +
mov [ebx+4] edx +
mov eax ebx +
mov edx offset aOperator +
call sub_4A1BD0  +
mov edx ds:off_50ADE4[edi] +
test edx edx +
jnz loc_4A5876  +
jmp loc_4A5792  +
mov edx [esp+48h+var_34] +
jmp loc_4A57A0  +
mov eax ebx +
call sub_4A1BD0  +
jmp loc_4A59E1  +
***
push edi  +
push esi  +
mov esi 1 +
push ebx  +
mov ebx eax +
sub esp 6Ch +
lea eax [eax+20h] +
mov [esp+78h+var_54] eax +
lea eax [ebx+4] +
mov [esp+78h+var_5C] ecx +
mov [esp+78h+var_60] 0 +
mov [esp+78h+var_4C] 0 +
mov [esp+78h+var_64] 0 +
mov [esp+78h+var_58] 0 +
mov [esp+78h+var_50] eax +
mov edi [ebp+0] +
movsx eax byte ptr [edi] +
test al al +
jz loc_4A61E5  +
lea edx [eax-30h] +
cmp dl 45h +
ja loc_4A6076  +
movzx edx dl +
jmp ds:off_50A618[edx*4]  +
mov eax [esp+78h+var_60] +
lea ecx [esp+78h+var_30] +
mov edx ebp +
mov [esp+78h+var_70] 1 +
mov [esp+78h+var_74] 1 +
mov [esp+78h+var_34] 0 +
test eax eax +
cmovnz edi eax +
mov eax ebx +
mov [esp+78h+var_60] edi +
lea edi [esp+78h+var_3C] +
mov [esp+78h+var_78] edi +
mov [esp+78h+var_38] 0 +
mov [esp+78h+var_3C] 0 +
mov [esp+78h+var_28] 0 +
mov [esp+78h+var_2C] 0 +
mov [esp+78h+var_30] 0 +
call sub_4A2EC0  +
test eax eax +
mov esi eax +
jnz loc_4A61B0  +
test byte ptr [ebx] 4 +
mov eax offset asc_50A128 +
mov edx offset a_ +
cmovz edx eax +
lea eax [esp+78h+var_30] +
call sub_4A1BD0  +
mov edx [esp+78h+var_30] +
mov ecx [esp+78h+var_2C] +
cmp edx ecx +
jz loc_4A5C8E  +
sub ecx edx +
jnz loc_4A62A0  +
test byte ptr [ebx+2Ch] 1 +
jnz loc_4A6276  +
test byte ptr [ebx+28h] 1 +
jnz loc_4A60B0  +
test byte ptr [ebx+2Ch] 1 +
jnz loc_4A60B0  +
mov eax [esp+78h+var_3C] +
test eax eax +
jz loc_4A5CD4  +
mov [esp+78h+var_78] eax +
call free  +
mov [esp+78h+var_38] 0 +
mov [esp+78h+var_34] 0 +
mov [esp+78h+var_3C] 0 +
mov eax [esp+78h+var_30] +
test eax eax +
jz loc_4A5CFC  +
mov [esp+78h+var_78] eax +
call free  +
mov [esp+78h+var_2C] 0 +
mov [esp+78h+var_28] 0 +
mov [esp+78h+var_30] 0 +
test esi esi +
setnz al  +
mov edi eax +
mov eax 1 +
mov [esp+78h+var_60] 0 +
mov [esp+78h+var_64] 1 +
jmp loc_4A5DA9  +
test dword ptr [ebx] 300h +
jz loc_4A5D34  +
mov ecx [esp+78h+var_4C] +
test ecx ecx +
jnz loc_4A62B0  +
test dword ptr [ebx] 1000h +
jz loc_4A5DE6  +
lea eax [edi+1] +
mov [ebp+0] eax +
movzx eax byte ptr [edi+1] +
test al al +
jz loc_4A5D9A  +
add edi 2 +
test byte ptr ds:word_509C60[eax+eax] 4 +
jnz loc_4A5D6D  +
jmp loc_4A5D9A  +
add edi 1 +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4A5D9A  +
mov [ebp+0] edi +
movzx eax byte ptr [edi] +
test al al +
jnz loc_4A5D60  +
jmp loc_4A5D9A  +
mov eax [esp+78h+var_60] +
test eax eax +
cmovz eax edi +
add edi 1 +
mov [ebp+0] edi +
mov [esp+78h+var_60] eax +
mov dword ptr [ebx+30h] 1 +
movzx eax byte ptr [esp+78h+var_64] +
and eax 1 +
test esi esi +
setnz cl  +
mov edi ecx +
mov ecx edi +
test cl cl +
jz loc_4A5DDE  +
test al al +
jz loc_4A5DDE  +
test dword ptr [ebx] 2C00h +
jnz loc_4A60C8  +
mov ecx [esp+78h+var_5C] +
mov edx ebp +
mov eax ebx +
call sub_4A5360  +
mov [esp+78h+var_64] 0 +
mov [esp+78h+var_58] 1 +
mov esi eax +
test esi esi +
jnz loc_4A5BD2  +
xor esi esi +
add esp 6Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ecx [esp+78h+var_5C] +
mov edx ebp +
mov eax ebx +
mov [esp+78h+var_74] 0 +
mov [esp+78h+var_78] 1 +
call sub_4A34E0  +
test eax eax +
mov esi eax +
jz loc_4A604E  +
mov eax [ebx+48h] +
mov ecx [ebp+0] +
test eax eax +
jnz loc_4A604E  +
sub ecx edi +
mov edx edi +
mov eax ebx +
call sub_4A2020  +
jmp loc_4A604E  +
test dword ptr [ebx] 1000h +
jz loc_4A5DE6  +
add edi 1 +
jmp loc_4A5E47  +
test al al +
jz loc_4A5E56  +
mov [ebp+0] edi +
movzx eax byte ptr [edi] +
mov edx edi +
add edi 1 +
cmp al 5Fh +
jnz loc_4A5E43  +
test al al +
jz loc_4A5DE6  +
add edx 1 +
mov [ebp+0] edx +
jmp loc_4A5D9A  +
call sub_4A18D0  +
or [ebx+38h] eax +
mov eax [esp+78h+var_60] +
test eax eax +
cmovz eax edi +
add edi 1 +
mov [esp+78h+var_60] eax +
mov [ebp+0] edi +
jmp loc_4A5D9A  +
lea ecx [esp+78h+var_24] +
mov edx ebp +
mov eax ebx +
call sub_4A3940  +
test eax eax +
mov esi eax +
jz loc_4A5CFC  +
test byte ptr [ebx] 4 +
mov eax offset asc_50A128 +
mov edx offset a_ +
cmovz edx eax +
lea eax [esp+78h+var_24] +
call sub_4A1BD0  +
mov edx [esp+78h+var_24] +
mov ecx [esp+78h+var_20] +
cmp edx ecx +
jz loc_4A5EC9  +
sub ecx edx +
jnz loc_4A6368  +
test edx edx +
jz loc_4A5CFC  +
mov [esp+78h+var_78] edx +
call free  +
jmp loc_4A5CFC  +
mov eax [esp+78h+var_60] +
mov dword ptr [ebx+34h] 0FFFFFFFFh +
mov [esp+78h+var_1C] 0 +
mov [esp+78h+var_20] 0 +
test eax eax +
cmovnz edi eax +
mov eax ebx +
mov [esp+78h+var_60] edi +
mov [esp+78h+var_24] 0 +
call sub_4A17D0  +
lea ecx [esp+78h+var_24] +
mov edx ebp +
mov edi eax +
mov eax ebx +
call sub_4A4CA0  +
test eax eax +
jnz loc_4A60E0  +
mov edx [esp+78h+var_24] +
xor edi edi +
xor esi esi +
test edx edx +
jz loc_4A5F3E  +
mov [esp+78h+var_78] edx +
call free  +
test esi esi +
jz loc_4A5F50  +
mov eax [ebx+48h] +
mov ecx [ebp+0] +
test eax eax +
jz loc_4A6343  +
test dword ptr [ebx] 2300h +
jz loc_4A61D0  +
mov eax [ebp+0] +
cmp byte ptr [eax] 46h +
jz loc_4A61D0  +
mov eax 1 +
mov [esp+78h+var_60] 0 +
mov [esp+78h+var_64] 1 +
jmp loc_4A5DA9  +
test dword ptr [ebx] 300h +
jz loc_4A5DE6  +
mov ecx [esp+78h+var_5C] +
mov edx ebp +
mov eax ebx +
mov [esp+78h+var_70] 0 +
mov [esp+78h+var_74] 0 +
mov [esp+78h+var_78] 0 +
call sub_4A2EC0  +
test byte ptr [ebx+28h] 1 +
mov esi eax +
mov eax 1 +
cmovnz eax [esp+78h+var_4C] +
add dword ptr [ebp+0] 1 +
mov [esp+78h+var_4C] eax +
jmp loc_4A5D9A  +
add edi 1 +
mov [ebp+0] edi +
test dword ptr [ebx] 3C00h +
jnz loc_4A6264  +
mov ecx [esp+78h+var_5C] +
mov edx ebp +
mov eax ebx +
call sub_4A5360  +
test eax eax +
mov esi eax +
jz loc_4A5DE6  +
test dword ptr [ebx] 2100h +
jz loc_4A600D  +
mov eax [ebp+0] +
cmp byte ptr [eax] 5Fh +
jz loc_4A6398  +
movzx eax byte ptr [esp+78h+var_64] +
mov [esp+78h+var_60] 0 +
mov [esp+78h+var_58] 1 +
and eax 1 +
jmp loc_4A5DAF  +
mov ecx [esp+78h+var_5C] +
mov edx ebp +
mov eax ebx +
mov [esp+78h+var_74] 0 +
mov [esp+78h+var_78] 1 +
call sub_4A34E0  +
mov esi eax +
test dword ptr [ebx] 300h +
jnz loc_4A5CFC  +
movzx eax byte ptr [esp+78h+var_64] +
mov [esp+78h+var_60] 0 +
and eax 1 +
test esi esi +
setnz cl  +
mov edi ecx +
jmp loc_4A5DA9  +
test dword ptr [ebx] 300h +
jz loc_4A5DE6  +
mov ecx [esp+78h+var_5C] +
mov edx ebp +
mov eax ebx +
call sub_4A5360  +
mov [esp+78h+var_58] 1 +
mov esi eax +
movzx eax byte ptr [esp+78h+var_64] +
and eax 1 +
test esi esi +
setnz cl  +
mov edi ecx +
jmp loc_4A5DA9  +
mov ecx [esp+78h+var_38] +
mov edx edi +
mov eax [esp+78h+var_5C] +
call sub_4A1D00  +
sub dword ptr [ebx+28h] 1 +
jmp loc_4A5CAC  +
mov edx [esp+78h+var_54] +
mov eax [esp+78h+var_50] +
call sub_4A1960  +
jmp loc_4A5DBF  +
test byte ptr [ebx+28h] 1 +
mov esi [esp+78h+var_20] +
jnz loc_4A60F0  +
test byte ptr [ebx+2Ch] 1 +
jz loc_4A6123  +
mov ecx [ebx+34h] +
mov edx [esp+78h+var_24] +
lea eax [ecx+1] +
cmp eax 1 +
jbe loc_4A6391  +
add ecx edx +
mov [esp+78h+var_20] ecx +
cmp edx ecx +
jz loc_4A6115  +
sub ecx edx +
jnz loc_4A6319  +
test byte ptr [ebx+2Ch] 1 +
jnz loc_4A637A  +
sub dword ptr [ebx+28h] 1 +
mov edx [esp+78h+var_24] +
mov ecx esi +
mov eax 0 +
mov [esp+78h+var_20] esi +
sub ecx edx +
cmp esi edx +
cmovz ecx eax +
mov eax ebx +
call sub_4A1840  +
mov eax [esp+78h+var_20] +
mov esi 1 +
mov edx [esp+78h+var_24] +
mov [esp+78h+var_78] edi +
mov edi 1 +
mov ecx eax +
sub ecx edx +
cmp edx eax +
mov eax 0 +
cmovz ecx eax +
lea eax [ebx+0Ch] +
call sub_4A1A60  +
mov eax offset asc_50A128 +
mov edx offset a_ +
test byte ptr [ebx] 4 +
cmovz edx eax +
mov eax [esp+78h+var_5C] +
call sub_4A1BA0  +
mov edx [esp+78h+var_24] +
mov ecx [esp+78h+var_20] +
cmp edx ecx +
jz loc_4A5F32  +
sub ecx edx +
jz loc_4A5F32  +
mov eax [esp+78h+var_5C] +
call sub_4A1B40  +
mov edx [esp+78h+var_24] +
jmp loc_4A5F32  +
mov eax [ebx+48h] +
mov ecx [ebp+0] +
test eax eax +
jnz loc_4A5C61  +
mov edx [esp+78h+var_60] +
mov eax ebx +
sub ecx edx +
call sub_4A2020  +
jmp loc_4A5C61  +
movzx eax byte ptr [esp+78h+var_64] +
mov [esp+78h+var_60] 0 +
and eax 1 +
jmp loc_4A5DA9  +
mov edx [esp+78h+var_58] +
test edx edx +
jnz loc_4A6336  +
test esi esi +
jz loc_4A6336  +
test dword ptr [ebx] 300h +
jnz loc_4A6327  +
test byte ptr [ebx] 1 +
jz loc_4A5DE8  +
mov eax [ebx+30h] +
test eax eax +
jnz loc_4A6355  +
mov eax [ebx+38h] +
test eax eax +
jz loc_4A5DE8  +
mov ecx [esp+78h+var_5C] +
mov edi [ecx+4] +
cmp [ecx] edi +
jz loc_4A623E  +
mov eax ecx +
mov edx offset asc_50A111 +
call sub_4A1BD0  +
mov eax [ebx+38h] +
call sub_4A1900  +
test eax eax +
jz loc_4A5DE8  +
cmp byte ptr [eax] 0 +
jz loc_4A5DE8  +
mov edx eax +
mov eax [esp+78h+var_5C] +
call sub_4A1BD0  +
jmp loc_4A5DE8  +
mov edx [esp+78h+var_54] +
mov eax [esp+78h+var_50] +
call sub_4A1960  +
jmp loc_4A5FE2  +
mov edx offset asc_50A12B +
mov eax edi +
call sub_4A1BA0  +
mov ecx [esp+78h+var_38] +
mov edx edi +
mov eax [esp+78h+var_5C] +
call sub_4A1D00  +
sub dword ptr [ebx+2Ch] 1 +
jmp loc_4A5C98  +
mov eax [esp+78h+var_5C] +
call sub_4A1B40  +
jmp loc_4A5C8E  +
add edi 1 +
mov edx ebp +
mov [ebp+0] edi +
lea ecx [esp+78h+var_24] +
mov eax ebx +
call sub_4A3940  +
mov edx [esp+78h+var_24] +
cmp edx [esp+78h+var_20] +
mov esi eax +
jz loc_4A62F1  +
mov edx offset asc_50A111 +
lea eax [esp+78h+var_24] +
call sub_4A1BD0  +
mov edx [esp+78h+var_24] +
mov ecx [esp+78h+var_20] +
cmp edx ecx +
jz loc_4A62F1  +
sub ecx edx +
jnz loc_4A63F9  +
test edx edx +
jz loc_4A62FD  +
mov [esp+78h+var_78] edx +
call free  +
movzx eax byte ptr [esp+78h+var_64] +
mov [esp+78h+var_4C] 1 +
and eax 1 +
test esi esi +
setnz cl  +
mov edi ecx +
jmp loc_4A5DA9  +
mov eax [esp+78h+var_5C] +
call sub_4A1B40  +
jmp loc_4A6115  +
mov ecx [esp+78h+var_5C] +
mov edx ebp +
mov eax ebx +
call sub_4A5360  +
mov esi eax +
test esi esi +
jnz loc_4A6205  +
jmp loc_4A5DE8  +
mov edx [esp+78h+var_60] +
mov eax ebx +
sub ecx edx +
call sub_4A2020  +
jmp loc_4A5F50  +
mov eax [esp+78h+var_5C] +
mov edx offset aStatic +
call sub_4A1BD0  +
jmp loc_4A6219  +
mov eax [esp+78h+var_5C] +
call sub_4A1B40  +
mov edx [esp+78h+var_24] +
jmp loc_4A5EC9  +
mov eax [esp+78h+var_5C] +
mov edx offset asc_50A12B +
call sub_4A1BA0  +
sub dword ptr [ebx+2Ch] 1 +
jmp loc_4A6123  +
mov ecx esi +
jmp loc_4A6109  +
add eax 1 +
mov edx ebp +
mov [ebp+0] eax +
lea ecx [esp+78h+var_30] +
mov eax ebx +
call sub_4A3940  +
mov esi eax +
mov eax [esp+78h+var_30] +
test eax eax +
jz loc_4A63D5  +
mov [esp+78h+var_78] eax +
call free  +
mov [esp+78h+var_2C] 0 +
mov [esp+78h+var_28] 0 +
mov [esp+78h+var_30] 0 +
movzx eax byte ptr [esp+78h+var_64] +
mov [esp+78h+var_60] 0 +
mov [esp+78h+var_58] 1 +
and eax 1 +
test esi esi +
setnz cl  +
mov edi ecx +
jmp loc_4A5DA9  +
mov eax [esp+78h+var_5C] +
call sub_4A1B40  +
mov edx [esp+78h+var_24] +
jmp loc_4A62F1  +
***
push edi  +
push esi  +
push ebx  +
mov ebx ecx +
sub esp 8Ch +
mov ecx [edx] +
mov esi [esp+98h+arg_0] +
mov [esp+98h+var_80] eax +
mov [esp+98h+var_84] ecx +
cmp byte ptr [esi+2] 0 +
jz loc_4A659B  +
mov eax [eax] +
and eax 3C00h +
mov [esp+98h+var_7C] eax +
jnz loc_4A6580  +
lea eax [esi+2] +
mov [esp+98h+var_94] offset unk_50A730 +
mov [esp+98h+var_98] eax +
call strstr  +
test eax eax +
jz loc_4A6580  +
mov ecx [ebx+4] +
mov edx ebx +
lea eax [esp+98h+var_78] +
mov [esp+98h+var_70] 0 +
lea edi [esp+98h+var_6C] +
mov [esp+98h+var_74] 0 +
mov [esp+98h+var_78] 0 +
call sub_4A1D00  +
mov eax [esp+98h+var_7C] +
mov ecx 15h +
mov edx [esp+98h+var_80] +
stos   +
lea eax [esp+98h+var_6C] +
call sub_4A1D40  +
mov edi [esp+98h+var_80] +
cmp byte ptr [esi+2] 0 +
jz loc_4A6547  +
mov [esp+98h+var_98] esi +
mov ecx ebx +
mov edx ebp +
mov eax edi +
call sub_4A5690  +
test eax eax +
jz loc_4A64DA  +
mov ecx ebx +
mov edx ebp +
mov eax edi +
call sub_4A5B90  +
test eax eax +
jnz loc_4A65A8  +
mov eax [esp+98h+var_84] +
lea edx [esp+98h+var_78] +
mov ecx [esp+98h+var_74] +
mov [ebp+0] eax +
mov eax [ebx] +
mov [ebx+4] eax +
mov eax ebx +
call sub_4A1D00  +
lea edx [esp+98h+var_6C] +
mov eax edi +
call sub_4A1D40  +
movzx edx byte ptr [esi+2] +
lea eax [esi+2] +
test dl dl +
jnz loc_4A6517  +
jmp loc_4A6547  +
add eax 1 +
test dl dl +
jz loc_4A6547  +
cmp dl 5Fh +
movzx edx byte ptr [eax+1] +
jnz loc_4A6510  +
cmp dl 5Fh +
jnz loc_4A6510  +
movzx edx byte ptr [eax] +
cmp dl 5Fh +
jz loc_4A6534  +
jmp loc_4A653C  +
movzx edx byte ptr [eax+1] +
add eax 1 +
cmp dl 5Fh +
jz loc_4A6530  +
test dl dl +
lea esi [eax-2] +
jnz loc_4A64B5  +
xor edi edi +
lea eax [esp+98h+var_6C] +
call sub_4A19B0  +
lea eax [esp+98h+var_6C] +
call sub_4A1710  +
mov edx [esp+98h+var_78] +
mov eax edi +
test edx edx +
jz loc_4A6590  +
mov [esp+98h+var_98] edx +
mov [esp+98h+var_84] edi +
call free  +
mov eax [esp+98h+var_84] +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+98h+var_80] +
mov ecx ebx +
mov edx ebp +
mov [esp+98h+var_98] esi +
call sub_4A5690  +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 8Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi eax +
jmp loc_4A6549  +
***
push esi  +
push ebx  +
mov ebx edx +
sub esp 6Ch +
mov ebp [edx] +
mov [esp+6Ch+var_5C] eax +
mov [esp+6Ch+var_58] ecx +
cmp byte ptr [ebp+0] 5Fh +
jz loc_4A6660  +
mov edi offset a__thunk_ +
mov ecx 8 +
mov esi ebp +
cmps   +
jz loc_4A6760  +
mov edi offset a__t +
mov ecx 3 +
mov esi ebp +
cmps   +
jnz loc_4A6650  +
movzx eax byte ptr [ebp+3] +
cmp al 69h +
setz cl  +
cmp al 66h +
jnz loc_4A67F0  +
test cl cl +
jnz loc_4A67F8  +
mov edi offset aType_infoFunct +
lea eax [ebp+4] +
mov [ebx] eax +
movzx eax byte ptr [ebp+4] +
cmp al 51h +
jz loc_4A6920  +
cmp al 74h +
jz loc_4A6945  +
cmp al 4Bh +
jz loc_4A6920  +
mov ecx [esp+6Ch+var_58] +
mov edx ebx +
mov eax [esp+6Ch+var_5C] +
call sub_4A3940  +
mov esi eax +
test esi esi +
jz loc_4A6650  +
mov eax [ebx] +
cmp byte ptr [eax] 0 +
jz loc_4A6A20  +
xor esi esi +
add esp 6Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx esi byte ptr [ebp+1] +
mov [esp+6Ch+var_6C] offset byte_4C01B0 +
mov eax esi +
movsx edi al +
mov [esp+6Ch+var_68] edi +
call strchr  +
test eax eax +
jz loc_4A6687  +
cmp byte ptr [ebp+2] 5Fh +
jz loc_4A6A40  +
mov eax esi +
cmp al 5Fh +
jz loc_4A6802  +
mov eax esi +
cmp al 76h +
jz loc_4A68F0  +
mov [esp+6Ch+var_68] edi +
mov [esp+6Ch+var_6C] offset a0123456789qt +
call strchr  +
test eax eax +
jz loc_4A65CD  +
mov [esp+6Ch+var_68] offset byte_4C01B0 +
mov [esp+6Ch+var_6C] ebp +
call strpbrk  +
test eax eax +
mov [esp+6Ch+var_54] eax +
jz loc_4A65CD  +
lea eax [ebp+1] +
mov [ebx] eax +
movzx eax byte ptr [ebp+1] +
cmp al 51h +
jz loc_4A69F8  +
cmp al 74h +
jz loc_4A6972  +
cmp al 4Bh +
jz loc_4A69F8  +
mov eax ebx +
call sub_4A15E0  +
test eax eax +
mov ebp eax +
js loc_4A6650  +
mov edx [ebx] +
mov [esp+6Ch+var_6C] edx +
mov [esp+6Ch+var_50] edx +
call strlen  +
mov edx [esp+6Ch+var_50] +
cmp ebp eax +
jg loc_4A6650  +
cmp ebp 0Ah +
jle loc_4A6B10  +
mov edi offset a_global_ +
mov ecx 8 +
mov esi edx +
cmps   +
jnz loc_4A673E  +
cmp byte ptr [edx+9] 4Eh +
jz loc_4A6B20  +
mov eax [esp+6Ch+var_58] +
mov ecx ebp +
call sub_4A1B10  +
mov edx [ebx] +
lea edi [edx+ebp] +
mov [ebx] edi +
mov esi 1 +
jmp loc_4A69A4  +
lea edx [ebp+8] +
mov eax ebx +
mov [ebx] edx +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
mov esi eax +
jz loc_4A6650  +
mov eax [ebx] +
lea edx [eax+1] +
mov eax [esp+6Ch+var_5C] +
mov [ebx] edx +
call sub_4A6B80  +
test eax eax +
mov edi eax +
jz loc_4A6650  +
neg esi  +
mov [esp+6Ch+var_64] esi +
lea esi [esp+6Ch+var_3E] +
mov [esp+6Ch+var_68] offset aVirtualFunctio +
mov [esp+6Ch+var_6C] esi +
call sprintf  +
cmp byte ptr [esp+6Ch+var_3E] 0 +
jnz loc_4A6AB7  +
cmp byte ptr [edi] 0 +
jz loc_4A67C6  +
mov eax [esp+6Ch+var_58] +
mov edx edi +
call sub_4A1BD0  +
mov [esp+6Ch+var_6C] edi +
call free  +
mov esi [ebx] +
mov [esp+6Ch+var_6C] esi +
call strlen  +
add esi eax +
mov [ebx] esi +
add esp 6Ch +
mov esi 1 +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test cl cl +
jz loc_4A6650  +
mov edi offset aType_infoNode +
jmp loc_4A660F  +
cmp byte ptr [ebp+2] 76h +
jnz loc_4A65CD  +
cmp byte ptr [ebp+3] 74h +
jnz loc_4A65CD  +
cmp byte ptr [ebp+4] 5Fh +
jnz loc_4A65CD  +
add ebp 5 +
mov [ebx] ebp +
mov esi 1 +
mov edi ebp +
movzx eax byte ptr [edi] +
test al al +
jz loc_4A68D5  +
cmp al 51h +
jz loc_4A6A57  +
cmp al 74h +
jz loc_4A6A80  +
cmp al 4Bh +
jz loc_4A6A57  +
test byte ptr ds:word_509C60[eax+eax] 4 +
jnz loc_4A6AC7  +
mov [esp+6Ch+var_68] offset byte_4C01B0 +
mov [esp+6Ch+var_6C] edi +
call strcspn  +
mov ebp eax +
test ebp ebp +
jnz loc_4A6AFC  +
add edi ebp +
mov [ebx] edi +
mov [esp+6Ch+var_68] offset byte_4C01B0 +
mov [esp+6Ch+var_6C] edi +
call strpbrk  +
test esi esi +
jz loc_4A6650  +
test eax eax +
jz loc_4A6AB0  +
cmp edi eax +
lea esi [esi+0] +
jnz loc_4A6650  +
mov eax [esp+6Ch+var_5C] +
mov edx offset a_ +
test byte ptr [eax] 4 +
mov eax offset asc_50A128 +
cmovz edx eax +
mov eax [esp+6Ch+var_58] +
call sub_4A1BD0  +
mov eax [ebx] +
lea edi [eax+1] +
mov [ebx] edi +
movzx eax byte ptr [edi] +
test al al +
jnz loc_4A6837  +
test esi esi +
jz loc_4A6652  +
mov eax [esp+6Ch+var_58] +
mov edx offset aVirtualTable +
call sub_4A1BD0  +
jmp loc_4A6652  +
cmp byte ptr [ebp+2] 74h +
jnz loc_4A65CD  +
movsx eax byte ptr [ebp+3] +
mov [esp+6Ch+var_6C] offset byte_4C01B0 +
mov [esp+6Ch+var_68] eax +
call strchr  +
test eax eax +
jz loc_4A65CD  +
add ebp 4 +
mov [ebx] ebp +
jmp loc_4A6825  +
mov ecx [esp+6Ch+var_58] +
mov edx ebx +
mov eax [esp+6Ch+var_5C] +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] 0 +
call sub_4A34E0  +
mov esi eax +
jmp loc_4A6641  +
mov ecx [esp+6Ch+var_58] +
mov edx ebx +
mov eax [esp+6Ch+var_5C] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] 0 +
call sub_4A2EC0  +
mov esi eax +
jmp loc_4A6641  +
mov ecx [esp+6Ch+var_58] +
mov edx ebx +
mov eax [esp+6Ch+var_5C] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] 0 +
call sub_4A2EC0  +
mov esi eax +
test esi esi +
jz loc_4A6650  +
mov edi [ebx] +
cmp edi [esp+6Ch+var_54] +
jnz loc_4A6650  +
mov eax [esp+6Ch+var_5C] +
add edi 1 +
mov edx offset a_ +
mov [ebx] edi +
test byte ptr [eax] 4 +
mov eax offset asc_50A128 +
cmovz edx eax +
mov eax [esp+6Ch+var_58] +
call sub_4A1BD0  +
mov ebp [ebx] +
mov [esp+6Ch+var_6C] ebp +
call strlen  +
test eax eax +
mov edi eax +
jz loc_4A69EF  +
mov ecx eax +
mov eax [esp+6Ch+var_58] +
mov edx ebp +
call sub_4A1B10  +
mov ebp [ebx] +
add edi ebp +
mov [ebx] edi +
jmp loc_4A6652  +
mov ecx [esp+6Ch+var_58] +
mov edx ebx +
mov eax [esp+6Ch+var_5C] +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] 0 +
call sub_4A34E0  +
mov esi eax +
jmp loc_4A699A  +
cmp byte ptr [edi] 0 +
jz loc_4A6652  +
mov eax [esp+6Ch+var_58] +
mov edx edi +
call sub_4A1BD0  +
jmp loc_4A6652  +
mov eax [esp+6Ch+var_5C] +
lea edx [ebp+3] +
mov esi 1 +
mov [ebx] edx +
add dword ptr [eax+2Ch] 1 +
jmp loc_4A6652  +
mov ecx [esp+6Ch+var_58] +
mov edx ebx +
mov eax [esp+6Ch+var_5C] +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] 0 +
call sub_4A34E0  +
mov edi [ebx] +
mov esi eax +
jmp loc_4A687B  +
mov ecx [esp+6Ch+var_58] +
mov edx ebx +
mov eax [esp+6Ch+var_5C] +
mov [esp+6Ch+var_64] 1 +
mov [esp+6Ch+var_68] 1 +
mov [esp+6Ch+var_6C] 0 +
call sub_4A2EC0  +
mov edi [ebx] +
mov esi eax +
jmp loc_4A687B  +
mov edi [ebx] +
jmp loc_4A682C  +
mov eax [esp+6Ch+var_58] +
mov edx esi +
call sub_4A1BD0  +
jmp loc_4A67B6  +
mov eax ebx +
call sub_4A15E0  +
mov edi [ebx] +
mov [esp+6Ch+var_6C] edi +
mov ebp eax +
call strlen  +
cmp ebp eax +
jle loc_4A686F  +
mov [esp+6Ch+var_68] offset byte_4C01B0 +
mov esi 1 +
mov [esp+6Ch+var_6C] edi +
call strpbrk  +
jmp loc_4A6893  +
mov eax [esp+6Ch+var_58] +
mov edx edi +
mov ecx ebp +
call sub_4A1B10  +
mov edi [ebx] +
jmp loc_4A6877  +
test ebp ebp +
jz loc_4A674B  +
jmp loc_4A673E  +
movsx eax byte ptr [edx+8] +
cmp al [edx+0Ah] +
jnz loc_4A673E  +
mov [esp+6Ch+var_68] eax +
mov [esp+6Ch+var_6C] offset byte_4C01B0 +
call strchr  +
mov edx [esp+6Ch+var_50] +
test eax eax +
jz loc_4A673E  +
mov eax [esp+6Ch+var_58] +
mov edx offset aAnonymous +
call sub_4A1BD0  +
mov edi [ebx] +
mov [esp+6Ch+var_68] offset byte_4C01B0 +
add edi ebp +
mov [ebx] edi +
mov [esp+6Ch+var_6C] edi +
call strpbrk  +
mov [esp+6Ch+var_54] eax +
jmp loc_4A6750  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 3Ch +
mov eax [eax+28h] +
test edx edx +
mov [esp+48h+var_2C] edx +
mov dword ptr [ebx+28h] 0 +
mov dword ptr [ebx+3Ch] 0 +
mov [esp+48h+var_40] eax +
mov eax [ebx+2Ch] +
mov dword ptr [ebx+2Ch] 0 +
mov [esp+48h+var_3C] eax +
mov eax [ebx+30h] +
mov [esp+48h+var_38] eax +
mov eax [ebx+38h] +
mov dword ptr [ebx+38h] 0 +
mov [esp+48h+var_34] eax +
jz loc_4A6F10  +
cmp byte ptr [edx] 0 +
jz loc_4A6F10  +
test dword ptr [ebx] 300h +
mov [esp+48h+var_1C] 0 +
mov [esp+48h+var_20] 0 +
mov [esp+48h+var_24] 0 +
jnz loc_4A6CC8  +
mov [esp+48h+var_48] ebp +
call strlen  +
cmp eax 6 +
jbe loc_4A6D60  +
mov edi offset a_imp__ +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_4A6DF0  +
mov edi offset a__imp_ +
mov ecx 6 +
mov esi ebp +
cmps   +
jz loc_4A6DF0  +
cmp eax 0Ah +
jbe loc_4A6D60  +
mov edi offset a_global_ +
mov ecx 8 +
mov esi ebp +
cmps   +
jnz loc_4A6D60  +
movsx eax byte ptr [ebp+8] +
mov [esp+48h+var_48] offset byte_4C01B0 +
mov [esp+48h+var_44] eax +
call strchr  +
test eax eax +
jz loc_4A7121  +
movzx ecx byte ptr [ebp+0Ah] +
cmp [eax] cl +
mov [esp+48h+var_30] ebp +
jnz loc_4A6E02  +
movzx eax byte ptr [ebp+9] +
cmp al 44h +
jz loc_4A712A  +
cmp al 49h +
mov [esp+48h+var_30] ebp +
jnz loc_4A6E02  +
add ebp 0Bh +
mov [esp+48h+var_2C] ebp +
mov dword ptr [ebx+28h] 2 +
lea ecx [esp+48h+var_24] +
mov eax ebx +
lea edx [esp+48h+var_2C] +
call sub_4A65B0  +
test eax eax +
jnz loc_4A719F  +
mov eax [esp+48h+var_2C] +
mov [esp+48h+var_30] eax +
jmp loc_4A6E02  +
lea ecx [esp+48h+var_24] +
mov eax ebx +
lea edx [esp+48h+var_2C] +
call sub_4A65B0  +
test eax eax +
mov esi eax +
jz loc_4A6DB0  +
mov ebp [esp+48h+var_2C] +
cmp byte ptr [ebp+0] 0 +
jnz loc_4A6E72  +
mov eax [ebx+28h] +
cmp eax 2 +
jz loc_4A6EF3  +
cmp dword ptr [ebx+2Ch] 2 +
jz loc_4A6FB5  +
cmp dword ptr [ebx+3Ch] 1 +
jz loc_4A6FD0  +
mov eax ebx +
call sub_4A19B0  +
test esi esi +
jnz loc_4A6E88  +
mov edx [esp+48h+var_24] +
xor eax eax +
test edx edx +
jz loc_4A6D38  +
mov [esp+48h+var_48] edx +
mov [esp+48h+var_30] eax +
call free  +
mov eax [esp+48h+var_30] +
mov edi [esp+48h+var_40] +
mov ecx [esp+48h+var_3C] +
mov [ebx+28h] edi +
mov edi [esp+48h+var_38] +
mov [ebx+2Ch] ecx +
mov ecx [esp+48h+var_34] +
mov [ebx+30h] edi +
mov [ebx+38h] ecx +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test dword ptr [ebx] 3800h +
mov [esp+48h+var_30] ebp +
jz loc_4A6E02  +
mov edi offset a__std__ +
mov ecx 7 +
mov esi ebp +
cmps   +
jz loc_4A6FF0  +
mov esi [esp+48h+var_30] +
mov edi offset a__sti__ +
mov ecx 7 +
cmps   +
jnz loc_4A6E02  +
mov eax [esp+48h+var_30] +
mov dword ptr [ebx+28h] 2 +
add eax 7 +
mov [esp+48h+var_2C] eax +
mov [esp+48h+var_30] eax +
jmp loc_4A6E02  +
mov eax ebx +
call sub_4A19B0  +
mov eax ebx +
call sub_4A1710  +
mov eax [esp+48h+var_24] +
test eax eax +
jz loc_4A6DE6  +
mov [esp+48h+var_48] eax +
call free  +
mov [esp+48h+var_20] 0 +
mov [esp+48h+var_1C] 0 +
mov [esp+48h+var_24] 0 +
mov ebp [esp+48h+var_2C] +
jmp loc_4A6BFC  +
add ebp 6 +
mov [esp+48h+var_2C] ebp +
mov dword ptr [ebx+3Ch] 1 +
mov [esp+48h+var_30] ebp +
mov eax [esp+48h+var_30] +
mov edx eax +
jmp loc_4A6E1D  +
cmp byte ptr [eax+1] 5Fh +
lea edx [eax+1] +
jz loc_4A6EA4  +
mov [esp+48h+var_44] 5Fh +
mov [esp+48h+var_48] edx +
call strchr  +
test eax eax +
jnz loc_4A6E10  +
cmp dword ptr [ebx+28h] 2 +
jz loc_4A6E43  +
xor esi esi +
cmp dword ptr [ebx+2Ch] 2 +
jnz loc_4A6D05  +
mov esi [esp+48h+var_2C] +
test esi esi +
jz loc_4A6E54  +
cmp byte ptr [esi] 0 +
jnz loc_4A7007  +
mov [esp+48h+var_48] esi +
call strlen  +
lea ebp [esi+eax] +
mov [esp+48h+var_2C] ebp +
cmp byte ptr [ebp+0] 0 +
mov esi 1 +
jz loc_4A6CEF  +
lea ecx [esp+48h+var_24] +
mov eax ebx +
lea edx [esp+48h+var_2C] +
call sub_4A5B90  +
mov esi eax +
jmp loc_4A6CEF  +
lea eax [esp+48h+var_24] +
mov ecx 1 +
mov edx offset unk_50A020 +
call sub_4A1B10  +
mov eax [esp+48h+var_24] +
jmp loc_4A6D38  +
test edx edx +
mov esi eax +
jz loc_4A6E31  +
mov [esp+48h+var_44] offset a__0 +
mov [esp+48h+var_48] esi +
call strspn  +
cmp eax 2 +
jle loc_4A6ECB  +
lea esi [esi+eax-2] +
test esi esi +
jz loc_4A6E31  +
mov eax [ebx+30h] +
test eax eax +
jz loc_4A6F17  +
movzx eax byte ptr [esi] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jnz loc_4A6EEA  +
cmp al 74h +
jnz loc_4A6E31  +
mov ebp [esp+48h+var_30] +
jmp loc_4A6E63  +
mov edx offset aGlobalConstruc +
lea eax [esp+48h+var_24] +
call sub_4A1BA0  +
mov dword ptr [ebx+28h] 0 +
jmp loc_4A6D0F  +
xor eax eax +
jmp loc_4A6D38  +
cmp [esp+48h+var_30] esi +
jz loc_4A701B  +
mov eax [ebx] +
test ah 8 +
jz loc_4A6F60  +
cmp byte ptr [esi+2] 70h +
jnz loc_4A6F60  +
cmp byte ptr [esi+3] 74h +
jnz loc_4A6F60  +
mov eax [esp+48h+var_30] +
mov [esp+48h+var_48] eax +
call strlen  +
lea edx [esp+48h+var_24] +
mov [esp+48h+var_48] edx +
lea edx [esp+48h+var_2C] +
mov ecx eax +
mov eax ebx +
call sub_4A4550  +
mov ebp [esp+48h+var_2C] +
jmp loc_4A6E63  +
test ah 20h +
jz loc_4A6F80  +
movzx eax byte ptr [esi+2] +
cmp al 74h +
jz loc_4A7064  +
cmp al 70h +
jnz loc_4A6F80  +
movzx eax byte ptr [esi+3] +
sub eax 73h +
cmp al 1 +
jbe loc_4A6F34  +
cmp [esp+48h+var_30] esi +
jz loc_4A7075  +
cmp byte ptr [esi+2] 0 +
jz loc_4A6E31  +
mov [esp+48h+var_48] esi +
lea ecx [esp+48h+var_24] +
mov eax ebx +
lea edx [esp+48h+var_2C] +
call sub_4A6410  +
test eax eax +
mov esi eax +
jz loc_4A6CEF  +
jmp loc_4A6CE1  +
mov edx offset aGlobalDestruct +
lea eax [esp+48h+var_24] +
call sub_4A1BA0  +
mov dword ptr [ebx+2Ch] 0 +
jmp loc_4A6D0F  +
mov edx offset aImportStubFor +
lea eax [esp+48h+var_24] +
call sub_4A1BA0  +
mov dword ptr [ebx+3Ch] 0 +
jmp loc_4A6D0F  +
add ebp 7 +
mov [esp+48h+var_2C] ebp +
mov dword ptr [ebx+2Ch] 2 +
mov [esp+48h+var_30] ebp +
jmp loc_4A6E02  +
mov edx esi +
lea eax [esp+48h+var_24] +
call sub_4A1BD0  +
mov esi [esp+48h+var_2C] +
jmp loc_4A6E54  +
mov eax [esp+48h+var_30] +
movzx eax byte ptr [eax+2] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_4A70F0  +
mov eax [ebx] +
test ah 1Ch +
jz loc_4A7108  +
mov eax [esp+48h+var_30] +
add eax 2 +
mov [esp+48h+var_2C] eax +
lea eax [esp+48h+var_2C] +
call sub_4A15E0  +
mov esi [esp+48h+var_2C] +
test esi esi +
jnz loc_4A6E4B  +
jmp loc_4A6E54  +
cmp byte ptr [esi+3] 6Dh +
jnz loc_4A6F80  +
nop   +
jmp loc_4A6F34  +
mov eax [esp+48h+var_30] +
movzx eax byte ptr [eax+2] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jnz loc_4A6F8A  +
cmp al 74h +
jz loc_4A6F94  +
test dword ptr [ebx] 3C00h +
jnz loc_4A713F  +
mov eax [esp+48h+var_30] +
cmp byte ptr [eax] 5Fh +
jnz loc_4A70BC  +
nop   +
lea esi [esi+0] +
add eax 1 +
cmp byte ptr [eax] 5Fh +
jz loc_4A70B0  +
mov [esp+48h+var_30] eax +
mov eax [esp+48h+var_30] +
mov [esp+48h+var_44] offset unk_50A730 +
mov [esp+48h+var_48] eax +
call strstr  +
test eax eax +
jz loc_4A6E31  +
cmp byte ptr [eax+2] 0 +
jz loc_4A6E31  +
mov [esp+48h+var_48] eax +
jmp loc_4A6F97  +
cmp al 51h +
jz loc_4A7106  +
cmp al 74h +
jz loc_4A7106  +
cmp al 4Bh +
jz loc_4A7106  +
cmp al 48h +
nop   +
jnz loc_4A6F21  +
mov eax [ebx] +
test ah 3Ch +
jnz loc_4A7111  +
add dword ptr [ebx+28h] 1 +
mov ebp [esp+48h+var_30] +
add ebp 2 +
mov [esp+48h+var_2C] ebp +
jmp loc_4A6E63  +
mov [esp+48h+var_30] ebp +
jmp loc_4A6E02  +
mov eax ebp +
add eax 0Bh +
mov [esp+48h+var_2C] eax +
mov dword ptr [ebx+2Ch] 2 +
jmp loc_4A6CA4  +
mov esi [esp+48h+var_30] +
mov edi offset a__vtbl__ +
mov ecx 8 +
cmps   +
jnz loc_4A70A2  +
mov esi [esp+48h+var_30] +
movzx edx byte ptr [esi+8] +
mov eax esi +
add eax 8 +
mov [esp+48h+var_28] eax +
test dl dl +
jz loc_4A71A8  +
lea eax [esp+48h+var_28] +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
jz loc_4A70A2  +
add eax [esp+48h+var_28] +
mov [esp+48h+var_28] eax +
movzx edx byte ptr [eax] +
cmp dl 5Fh +
jnz loc_4A7166  +
cmp byte ptr [eax+1] 5Fh +
jnz loc_4A716A  +
lea edx [eax+2] +
mov [esp+48h+var_28] edx +
movzx edx byte ptr [eax+2] +
jmp loc_4A7166  +
mov ebp [esp+48h+var_2C] +
jmp loc_4A6E63  +
mov eax [esp+48h+var_2C] +
lea edx [eax+8] +
movzx eax byte ptr [eax+8] +
mov [esp+48h+var_2C] edx +
test al al +
jz loc_4A7233  +
lea eax [esp+48h+var_2C] +
call sub_4A15E0  +
cmp eax 0FFFFFFFFh +
mov esi eax +
jz loc_4A70A2  +
mov edi [esp+48h+var_2C] +
mov [esp+48h+var_48] edi +
call strlen  +
cmp esi eax +
jg loc_4A70A2  +
test esi esi +
jnz loc_4A7220  +
add esi edi +
mov [esp+48h+var_2C] esi +
movzx eax byte ptr [esi] +
cmp al 5Fh +
jnz loc_4A71B7  +
cmp byte ptr [esi+1] 5Fh +
jnz loc_4A71BB  +
mov edx offset asc_50A128 +
lea eax [esp+48h+var_24] +
call sub_4A1BA0  +
mov eax [esp+48h+var_2C] +
lea edx [eax+2] +
mov [esp+48h+var_2C] edx +
movzx eax byte ptr [eax+2] +
jmp loc_4A71B7  +
mov edx edi +
mov ecx esi +
lea eax [esp+48h+var_24] +
call sub_4A1B40  +
mov edi [esp+48h+var_2C] +
jmp loc_4A71E7  +
mov edx offset aVirtualTable +
lea eax [esp+48h+var_24] +
call sub_4A1BD0  +
mov ebp [esp+48h+var_2C] +
jmp loc_4A6E63  +
***
sub esp 1Ch +
sub esp 14h +
mov eax [esp+14h+arg_8] +
mov [esp+14h+var_14] 1 +
mov ebx [esp+14h+arg_0] +
mov esi [esp+14h+arg_4] +
mov [esp+14h+var_10] eax +
call sub_4A0620  +
mov [esp+14h+arg_8] esi +
mov [esp+14h+arg_4] ebx +
mov [esp+14h+arg_0] eax +
add esp 14h +
pop ebx  +
pop esi  +
jmp memcpy  +
***
mov eax [esp+arg_4] +
cmp [esp+arg_0] eax +
setz al  +
movzx eax al +
retn   +
***
mov ecx [esp+arg_0] +
mov ebx 42135234h +
movzx eax cx +
sar ecx 10h +
sub ecx eax +
add eax 5C242785h +
sub ecx 42135234h +
xor ecx 2109Ah +
mov edx ecx +
sub eax ecx +
shl edx 8 +
sub ebx ecx +
xor eax edx +
mov edx eax +
sub ebx eax +
shr edx 0Dh +
sub ecx eax +
xor edx ebx +
mov ebx edx +
sub ecx edx +
shr ebx 0Ch +
sub eax edx +
xor ebx ecx +
mov ecx ebx +
sub eax ebx +
shl ecx 10h +
xor ecx eax +
mov eax edx +
sub eax ebx +
mov edx ecx +
sub eax ecx +
sub ebx ecx +
shr edx 5 +
xor edx eax +
mov esi edx +
sub ebx edx +
shr esi 3 +
sub ecx edx +
xor esi ebx +
mov eax esi +
sub ecx esi +
shl eax 0Ah +
sub edx esi +
xor eax ecx +
sub edx eax +
shr eax 0Fh +
xor eax edx +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
push esi  +
push ebx  +
sub esp 3Ch +
mov ebx [eax+0Ch] +
mov edx [eax+14h] +
sub edx [eax+18h] +
mov [esp+3Ch+var_24] eax +
mov esi [eax+38h] +
mov edi ebx +
mov [esp+3Ch+var_10] ebx +
mov ebx [eax+10h] +
lea eax [edx+edx] +
lea edi [edi+ebx*4] +
cmp ebx eax +
mov [esp+3Ch+var_2C] edi +
jb loc_4A756C  +
shl edx 3 +
cmp ebx edx +
ja loc_4A7563  +
mov edi [esp+3Ch+var_24] +
mov eax [edi+30h] +
test eax eax +
jz loc_4A758B  +
mov edx [edi+2Ch] +
mov [esp+3Ch+var_34] 4 +
mov [esp+3Ch+var_38] ebx +
mov [esp+3Ch+var_3C] edx +
call eax  +
test eax eax +
jz loc_4A75A7  +
mov edi [esp+18h] +
mov [edi+0Ch] eax +
mov eax [edi+18h] +
mov [edi+10h] ebx +
mov ebx [esp+2Ch] +
mov [edi+38h] esi +
sub [edi+14h] eax +
mov dword ptr [edi+18h] 0 +
jmp loc_4A7465  +
add ebx 4 +
cmp [esp+10h] ebx +
jbe loc_4A7542  +
mov eax [ebx] +
cmp eax 1 +
mov [esp+0Ch] eax +
jbe loc_4A7458  +
mov edi [esp+18h] +
mov ecx [esp+0Ch] +
mov eax [edi] +
mov [esp+0] ecx +
call eax  +
mov esi eax +
mov [esp+1Ch] eax +
mov eax [edi+38h] +
shl eax 4 +
lea ecx dword_50B200[eax] +
mov edx ds:dword_50B20C[eax] +
mov eax ds:dword_50B200[eax] +
mov [esp+20h] ecx +
mov ebp edx +
mov [esp+14h] eax +
mov eax esi +
mov [esp+24h] edx +
mul  dword ptr [ecx+4] +
mov eax esi +
mov ecx ebp +
mov ebp [edi+0Ch] +
sub eax edx +
shr eax 1 +
add eax edx +
shr eax cl +
imul eax [esp+14h] +
sub esi eax +
mov eax [edi+10h] +
lea ecx [ebp+esi*4+0] +
mov [esp+28h] eax +
mov eax [ecx] +
test eax eax +
jz loc_4A752F  +
cmp eax 1 +
jz loc_4A75E1  +
mov ecx [esp+1Ch] +
mov edi [esp+20h] +
mov eax ecx +
mul  dword ptr [edi+8] +
mov eax ecx +
add eax 1 +
mov edi [esp+28h] +
sub ecx edx +
shr ecx 1 +
add edx ecx +
movzx ecx byte ptr [esp+24h] +
shr edx cl +
mov ecx [esp+14h] +
sub ecx 2 +
imul edx ecx +
sub eax edx +
jmp loc_4A751A  +
cmp edx 1 +
jz loc_4A75E1  +
add esi eax +
mov edx esi +
sub edx edi +
cmp edi esi +
cmovbe esi edx +
lea ecx [ebp+esi*4+0] +
mov edx [ecx] +
test edx edx +
jnz loc_4A7511  +
mov eax [esp+0Ch] +
add ebx 4 +
cmp [esp+10h] ebx +
mov [ecx] eax +
ja loc_4A7465  +
mov eax [esp+18h] +
mov eax [eax+28h] +
test eax eax +
jz loc_4A75B1  +
mov ebx [esp+2Ch] +
mov [esp+0] ebx +
call eax  +
mov eax 1 +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp ebx 20h +
jbe loc_4A740D  +
call sub_4A7340  +
mov edi [esp+3Ch+var_24] +
mov esi eax +
shl eax 4 +
mov ebx ds:dword_50B200[eax] +
mov eax [edi+30h] +
test eax eax +
jnz loc_4A741C  +
mov eax [esp+3Ch+var_24] +
mov eax [eax+24h] +
mov [esp+3Ch+var_38] 4 +
mov [esp+3Ch+var_3C] ebx +
call eax  +
test eax eax +
jnz loc_4A7438  +
add esp 3Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [esp+18h] +
mov eax 1 +
mov edx [ebx+34h] +
test edx edx +
jz loc_4A755B  +
mov ecx [ebx+2Ch] +
mov [esp+0Ch] eax +
mov eax [esp+2Ch] +
mov [esp+0] ecx +
mov [esp+4] eax +
call edx  +
mov eax [esp+0Ch] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call abort  +
lea esi [esi+0] +
lea edi [edi+0] +
mov eax [esp+4] +
mov eax [eax+10h] +
retn   +
***
mov edx [esp+4] +
mov eax [edx+14h] +
sub eax [edx+18h] +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+30h] +
mov ebx [esp+40h] +
call sub_4A7340  +
mov dword ptr [esp+8] 3Ch +
mov dword ptr [esp+4] 1 +
mov [esp] ebx +
mov edi eax +
shl eax 4 +
mov ebp ds:dword_50B200[eax] +
call dword ptr [esp+44h]  +
test eax eax +
mov esi eax +
jz loc_4A76B3  +
mov dword ptr [esp+8] 4 +
mov [esp+4] ebp +
mov [esp] ebx +
call dword ptr [esp+44h]  +
test eax eax +
mov [esi+0Ch] eax +
jz loc_4A76A0  +
mov eax [esp+34h] +
mov [esi+10h] ebp +
mov [esi+38h] edi +
mov [esi+2Ch] ebx +
mov [esi] eax +
mov eax [esp+38h] +
mov [esi+4] eax +
mov eax [esp+3Ch] +
mov [esi+8] eax +
mov eax [esp+44h] +
mov [esi+30h] eax +
mov eax [esp+48h] +
mov [esi+34h] eax +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esp+48h] +
test eax eax +
jz loc_4A76B3  +
mov [esp+4] esi +
mov [esp] ebx +
call dword ptr [esp+48h]  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_14] +
call sub_4A7340  +
mov [esp+1Ch+var_18] 3Ch +
mov [esp+1Ch+var_1C] 1 +
mov ebx eax +
shl eax 4 +
mov edi ds:dword_50B200[eax] +
call [esp+1Ch+arg_10]  +
test eax eax +
mov ebp eax +
jz loc_4A774F  +
mov [esp+1Ch+var_18] 4 +
mov [esp+1Ch+var_1C] edi +
call esi  +
test eax eax +
mov [ebp+0Ch] eax +
jz loc_4A7740  +
mov eax [esp+1Ch+arg_4] +
mov [ebp+10h] edi +
mov [ebp+38h] ebx +
mov [ebp+24h] esi +
mov [ebp+0] eax +
mov eax [esp+1Ch+arg_8] +
mov [ebp+4] eax +
mov eax [esp+1Ch+arg_C] +
mov [ebp+8] eax +
mov eax [esp+1Ch+arg_18] +
mov [ebp+28h] eax +
add esp 1Ch +
mov eax ebp +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+1Ch+arg_18] +
test eax eax +
jz loc_4A774F  +
mov [esp+1Ch+var_1C] ebp +
call [esp+1Ch+arg_18]  +
add esp 1Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_10] +
mov edx [esp+2Ch+arg_14] +
mov [esp+2Ch+var_18] eax +
mov [esp+2Ch+var_1C] eax +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_14] edx +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_4A76C0  +
add esp 2Ch +
retn   +
***
mov eax [esp+4] +
mov edx [esp+8] +
mov [eax] edx +
mov edx [esp+0Ch] +
mov [eax+4] edx +
mov edx [esp+10h] +
mov [eax+8] edx +
mov edx [esp+14h] +
mov [eax+2Ch] edx +
mov edx [esp+18h] +
mov [eax+30h] edx +
mov edx [esp+1Ch] +
mov [eax+34h] edx +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_14] offset free +
mov [esp+2Ch+var_18] offset sub_4A0620 +
mov [esp+2Ch+var_1C] offset sub_4A0620 +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_4A76C0  +
add esp 2Ch +
retn   +
***
sub esp 2Ch +
mov eax [esp+2Ch+arg_C] +
mov [esp+2Ch+var_14] offset free +
mov [esp+2Ch+var_18] offset calloc +
mov [esp+2Ch+var_1C] offset calloc +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+arg_8] +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+arg_4] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call sub_4A76C0  +
add esp 2Ch +
retn   +
***
push ebx  +
sub esp 10h +
mov edi [esp+10h+arg_0] +
mov eax [edi+8] +
mov ebx [edi+10h] +
mov esi [edi+0Ch] +
test eax eax +
jz loc_4A78A1  +
sub ebx 1 +
js loc_4A78A1  +
mov eax [esi+ebx*4] +
cmp eax 1 +
jbe loc_4A7887  +
mov edx [edi+8] +
mov [esp+10h+var_10] eax +
call edx  +
sub ebx 1 +
jns loc_4A788C  +
mov eax [edi+28h] +
test eax eax +
jz loc_4A78C0  +
mov [esp+10h+var_10] esi +
call eax  +
mov eax [edi+28h] +
mov [esp+10h+arg_0] edi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
jmp eax  +
mov eax [edi+34h] +
test eax eax +
jz loc_4A78E2  +
mov edx [edi+2Ch] +
mov [esp+10h+var_C] esi +
mov [esp+10h+var_10] edx +
call eax  +
mov edx [edi+2Ch] +
mov eax [edi+34h] +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] edx +
call eax  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+30h] +
mov eax [esi+8] +
mov edi [esi+10h] +
mov ebp [esi+0Ch] +
test eax eax +
mov ebx edi +
jz loc_4A792B  +
lea esi [esi+0] +
sub ebx 1 +
js loc_4A792B  +
mov eax [ebp+ebx*4+0] +
cmp eax 1 +
jbe loc_4A7910  +
mov edx [esi+8] +
mov [esp] eax +
call edx  +
sub ebx 1 +
jns loc_4A7915  +
cmp edi 40000h +
jbe loc_4A7980  +
mov eax 100h +
call sub_4A7340  +
mov ebx eax +
shl eax 4 +
mov edi ds:dword_50B200[eax] +
mov eax [esi+28h] +
test eax eax +
jz loc_4A79B0  +
mov edx [esi+0Ch] +
mov [esp] edx +
call eax  +
mov eax [esi+30h] +
test eax eax +
jz loc_4A79C8  +
mov edx [esi+2Ch] +
mov dword ptr [esp+8] 4 +
mov [esp+4] edi +
mov [esp] edx +
call eax  +
mov [esi+0Ch] eax +
mov [esi+10h] edi +
mov [esi+38h] ebx +
jmp loc_4A7997  +
shl edi 2 +
mov [esp+8] edi +
mov dword ptr [esp+4] 0 +
mov [esp] ebp +
call memset  +
mov dword ptr [esi+18h] 0 +
mov dword ptr [esi+14h] 0 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax [esi+34h] +
test eax eax +
jz loc_4A7957  +
mov ecx [esi+0Ch] +
mov edx [esi+2Ch] +
mov [esp+4] ecx +
mov [esp] edx +
call eax  +
jmp loc_4A7957  +
***
mov eax [esi+24h] +
mov dword ptr [esp+4] 4 +
mov [esp] edi +
call eax  +
mov [esi+0Ch] eax +
jmp loc_4A7975  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_8] +
mov eax [ebx+10h] +
add dword ptr [ebx+1Ch] 1 +
mov [esp+2Ch+var_14] eax +
mov eax [ebx+38h] +
shl eax 4 +
lea ebp dword_50B200[eax] +
mov eax ds:dword_50B200[eax] +
mov ecx [ebp+0Ch] +
mov edi eax +
mov [esp+2Ch+var_18] eax +
mov eax [esp+2Ch+arg_8] +
mul  dword ptr [ebp+4] +
mov eax [esp+2Ch+arg_8] +
sub eax edx +
shr eax 1 +
add eax edx +
shr eax cl +
imul eax edi +
mov edi [ebx+0Ch] +
sub esi eax +
mov edx [edi+esi*4] +
test edx edx +
jz loc_4A7B00  +
cmp edx 1 +
jz loc_4A7B10  +
mov ecx [esp+2Ch+arg_4] +
mov eax [ebx+4] +
mov [esp+2Ch+var_18] edx +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_28] ecx +
call eax  +
mov edx [esp+2Ch+var_18] +
mov ecx eax +
mov eax edx +
test ecx ecx +
jnz loc_4A7AF4  +
mov eax [ebx+38h] +
mov edi [ebx+0Ch] +
shl eax 4 +
lea ebp dword_50B200[eax] +
mov eax ds:dword_50B200[eax] +
mov ecx [ebp+0Ch] +
mov [esp+2Ch+var_10] eax +
mov eax [esp+2Ch+arg_8] +
mul  dword ptr [ebp+8] +
mov eax [esp+2Ch+arg_8] +
add eax 1 +
mov [esp+2Ch+var_18] eax +
mov eax [esp+2Ch+arg_8] +
sub eax edx +
shr eax 1 +
add eax edx +
mov edx [esp+2Ch+var_10] +
shr eax cl +
sub edx 2 +
imul eax edx +
sub [esp+2Ch+var_18] eax +
mov eax [ebx+20h] +
add esi [esp+2Ch+var_18] +
add eax 1 +
mov ecx [esp+2Ch+var_14] +
mov [ebx+20h] eax +
mov edx esi +
sub edx ecx +
cmp ecx esi +
cmovbe esi edx +
mov ebp [edi+esi*4] +
test ebp ebp +
jz loc_4A7B00  +
cmp ebp 1 +
jz loc_4A7AB3  +
mov edi [esp+2Ch+arg_4] +
mov eax [ebx+4] +
mov [esp+2Ch+var_2C] ebp +
mov [esp+2Ch+var_28] edi +
call eax  +
test eax eax +
jnz loc_4A7AF2  +
mov eax [ebx+20h] +
mov edi [ebx+0Ch] +
jmp loc_4A7AB3  +
mov eax ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 2Ch +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_10] eax +
jmp loc_4A7A84  +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov ebx [esp+14h+arg_4] +
mov eax [esi] +
mov [esp+14h+var_14] ebx +
call eax  +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_C] eax +
call sub_4A79E0  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
cmp [esp+2Ch+arg_C] 1 +
mov eax [ebx+10h] +
mov [esp+2Ch+var_1C] eax +
jz loc_4A7CD1  +
mov eax [ebx+38h] +
shl eax 4 +
lea edi dword_50B200[eax] +
mov ecx ds:dword_50B20C[eax] +
mov eax ds:dword_50B200[eax] +
mov [esp+2Ch+var_18] edi +
mov esi eax +
mov [esp+2Ch+var_10] eax +
mov eax [esp+2Ch+arg_8] +
mul  dword ptr [edi+4] +
mov eax [esp+2Ch+arg_8] +
mov edi [ebx+0Ch] +
add dword ptr [ebx+1Ch] 1 +
sub eax edx +
shr eax 1 +
add eax edx +
shr eax cl +
imul eax esi +
mov esi [esp+2Ch+arg_8] +
sub esi eax +
lea ebp ds:0[esi*4] +
lea eax [edi+ebp] +
mov [esp+2Ch+var_14] eax +
mov eax [eax] +
test eax eax +
jz loc_4A7CFD  +
cmp eax 1 +
jz loc_4A7C12  +
mov edi [esp+2Ch+arg_4] +
mov edx [ebx+4] +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_28] edi +
call edx  +
test eax eax +
jnz loc_4A7CC4  +
mov edx [ebx+38h] +
mov edi [ebx+0Ch] +
mov [esp+2Ch+var_14] 0 +
shl edx 4 +
lea eax dword_50B200[edx] +
mov ecx ds:dword_50B20C[edx] +
mov [esp+2Ch+var_18] eax +
mov eax ds:dword_50B200[edx] +
mov [esp+2Ch+var_10] eax +
mov ebp [esp+2Ch+var_18] +
mov eax [esp+2Ch+arg_8] +
mul  dword ptr [ebp+8] +
mov eax [esp+2Ch+arg_8] +
mov ebp [esp+2Ch+var_10] +
add eax 1 +
mov [esp+2Ch+var_18] eax +
mov eax [esp+2Ch+arg_8] +
sub ebp 2 +
sub eax edx +
shr eax 1 +
add eax edx +
mov edx [ebx+20h] +
shr eax cl +
imul eax ebp +
sub [esp+2Ch+var_18] eax +
add esi [esp+2Ch+var_18] +
add edx 1 +
mov ecx [esp+2Ch+var_1C] +
mov [ebx+20h] edx +
mov eax esi +
sub eax ecx +
cmp ecx esi +
cmovbe esi eax +
lea ebp ds:0[esi*4] +
lea eax [edi+ebp] +
mov ecx [eax] +
test ecx ecx +
jz loc_4A7CA0  +
cmp ecx 1 +
jz loc_4A7C90  +
mov edi [esp+2Ch+arg_4] +
mov eax [ebx+4] +
mov [esp+2Ch+var_2C] ecx +
mov [esp+2Ch+var_28] edi +
call eax  +
test eax eax +
jnz loc_4A7CC4  +
mov edx [ebx+20h] +
mov edi [ebx+0Ch] +
jmp loc_4A7C45  +
mov ecx [esp+2Ch+var_14] +
test ecx ecx +
cmovnz eax ecx +
mov [esp+2Ch+var_14] eax +
jmp loc_4A7C45  +
mov edx [esp+2Ch+arg_C] +
test edx edx +
jz loc_4A7CF9  +
mov edi [esp+2Ch+var_14] +
test edi edi +
jz loc_4A7D08  +
sub dword ptr [ebx+18h] 1 +
mov eax edi +
mov dword ptr [edi] 0 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+0Ch] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
add eax ebp +
pop ebp  +
retn   +
lea edx [eax+eax*2] +
mov eax [ebx+14h] +
shl eax 2 +
cmp edx eax +
ja loc_4A7B6D  +
mov eax ebx +
call sub_4A73D0  +
test eax eax +
jz loc_4A7CF9  +
mov eax [ebx+10h] +
mov [esp+2Ch+var_1C] eax +
jmp loc_4A7B6D  +
xor eax eax +
jmp loc_4A7CBC  +
cmp [esp+2Ch+arg_C] 0 +
jz loc_4A7CF9  +
mov eax [esp+2Ch+var_14] +
add dword ptr [ebx+14h] 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 14h +
mov esi [esp+14h+arg_0] +
mov ebx [esp+14h+arg_4] +
mov eax [esi] +
mov [esp+14h+var_14] ebx +
call eax  +
mov edx [esp+14h+arg_8] +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] esi +
mov [esp+14h+var_8] edx +
mov [esp+14h+var_C] eax +
call sub_4A7B50  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
mov eax [esp+14h+arg_8] +
mov ebx [esp+14h+arg_0] +
mov [esp+14h+var_8] 0 +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_4] +
mov [esp+14h+var_14] ebx +
mov [esp+14h+var_10] eax +
call sub_4A7B50  +
mov esi eax +
mov eax [eax] +
test eax eax +
jz loc_4A7DA7  +
mov edx [ebx+8] +
test edx edx +
jz loc_4A7D9D  +
mov [esp+14h+var_14] eax +
call edx  +
mov dword ptr [esi] 1 +
add dword ptr [ebx+18h] 1 +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 14h +
mov esi [esp+20h] +
mov ebx [esp+24h] +
mov eax [esi] +
mov [esp] ebx +
call eax  +
mov [esp+4] ebx +
mov [esp] esi +
mov [esp+8] eax +
call sub_4A7D60  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
sub esp 14h +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_4] +
mov edi [esp+1Ch+arg_8] +
mov ebx [eax+0Ch] +
mov eax [eax+10h] +
lea esi [ebx+eax*4] +
jmp loc_4A7E57  +
add ebx 4 +
cmp esi ebx +
jbe loc_4A7E69  +
cmp dword ptr [ebx] 1 +
jbe loc_4A7E50  +
mov [esp+1Ch+var_18] edi +
mov [esp+1Ch+var_1C] ebx +
call ebp  +
test eax eax +
jnz loc_4A7E50  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jmp loc_4A7E80  +
push edi  +
push esi  +
push ebx  +
mov ebx [esp+10h] +
mov esi [esp+14h] +
mov edi [esp+18h] +
mov eax [ebx+14h] +
sub eax [ebx+18h] +
mov edx [ebx+10h] +
shl eax 3 +
cmp edx eax +
jbe loc_4A7EA4  +
cmp edx 20h +
ja loc_4A7EB8  +
mov [esp+18h] edi +
mov [esp+14h] esi +
mov [esp+10h] ebx +
pop ebx  +
pop esi  +
pop edi  +
jmp sub_4A7E30  +
***
mov eax ebx +
call sub_4A73D0  +
jmp loc_4A7EA4  +
***
jmp loc_4A7ED0  +
push ebx  +
sub esp 8 +
mov edx [esp+10h] +
mov eax [edx+1Ch] +
test eax eax +
jz loc_4A7F01  +
mov ecx [edx+20h] +
xor ebx ebx +
xor edx edx +
mov [esp+4] ebx +
mov [esp] ecx +
fild  qword ptr [esp] +
mov [esp] eax +
mov [esp+4] edx +
fild  qword ptr [esp] +
add esp 8 +
fdivp st(1) st +
pop ebx  +
retn   +
***
add esp 8 +
fldz   +
pop ebx  +
retn   +
***
mov eax [esp+4] +
movzx edx byte ptr [eax] +
lea ecx [eax+1] +
xor eax eax +
test dl dl +
jz locret_4A7F34  +
imul eax eax +
add ecx 1 +
lea eax [eax+edx-71h] +
movzx edx byte ptr [ecx-1] +
test dl dl +
jnz loc_4A7F20  +
retn   +
***
retn   +
***
push edi  +
mov edx 9E3779B9h +
push esi  +
push ebx  +
mov eax [esp+0Ch+arg_0] +
mov ebx [esp+0Ch+arg_8] +
mov esi [esp+0Ch+arg_4] +
test al 3 +
jz loc_4A8126  +
cmp esi 0Bh +
jbe loc_4A804E  +
mov edi ecx +
mov ecx ebx +
nop   +
movzx ebp byte ptr [eax+5] +
movzx ebx byte ptr [eax+6] +
shl ebp 8 +
shl ebx 10h +
add ebx ebp +
movzx ebp byte ptr [eax+4] +
add ebp ebx +
movzx ebx byte ptr [eax+7] +
shl ebx 18h +
add ebx ebp +
movzx ebp byte ptr [eax+9] +
add edi ebx +
movzx ebx byte ptr [eax+0Ah] +
shl ebp 8 +
shl ebx 10h +
add ebx ebp +
movzx ebp byte ptr [eax+8] +
add ebx ebp +
movzx ebp byte ptr [eax+0Bh] +
shl ebp 18h +
add ebx ebp +
movzx ebp byte ptr [eax+1] +
add ebx ecx +
movzx ecx byte ptr [eax+2] +
shl ebp 8 +
shl ecx 10h +
add ecx ebp +
movzx ebp byte ptr [eax] +
add ecx ebp +
movzx ebp byte ptr [eax+3] +
shl ebp 18h +
add ecx ebp +
sub ecx ebx +
sub ecx edi +
sub edi ebx +
add edx ecx +
mov ecx ebx +
shr ecx 0Dh +
xor edx ecx +
mov ecx edx +
sub edi edx +
shl ecx 8 +
xor ecx edi +
mov edi ebx +
sub edi edx +
mov ebx ecx +
sub edi ecx +
shr ebx 0Dh +
xor ebx edi +
sub edx ecx +
mov edi ebx +
sub edx ebx +
shr edi 0Ch +
sub esi 0Ch +
xor edi edx +
mov edx ecx +
sub edx ebx +
mov ecx edi +
sub edx edi +
add eax 0Ch +
shl ecx 10h +
xor ecx edx +
mov edx ebx +
sub edx edi +
mov ebx ecx +
sub edx ecx +
sub edi ecx +
shr ebx 5 +
xor ebx edx +
mov edx ebx +
sub edi ebx +
shr edx 3 +
sub ecx ebx +
xor edx edi +
mov edi edx +
sub ecx edx +
shl edi 0Ah +
sub ebx edx +
xor edi ecx +
mov ecx edi +
sub ebx edi +
shr ecx 0Fh +
xor ecx ebx +
cmp esi 0Bh +
ja loc_4A7F70  +
mov ebx ecx +
mov ecx edi +
add ebx [esp+0Ch+arg_4] +
cmp esi 0Bh +
ja loc_4A80BC  +
jmp ds:off_50B1C4[esi*4]  +
movzx esi byte ptr [eax+0Ah] +
shl esi 18h +
add ebx esi +
movzx esi byte ptr [eax+9] +
shl esi 10h +
add ebx esi +
movzx esi byte ptr [eax+8] +
shl esi 8 +
add ebx esi +
movzx esi byte ptr [eax+7] +
shl esi 18h +
add ecx esi +
movzx esi byte ptr [eax+6] +
shl esi 10h +
add ecx esi +
movzx esi byte ptr [eax+5] +
shl esi 8 +
add ecx esi +
movzx esi byte ptr [eax+4] +
add ecx esi +
movzx esi byte ptr [eax+3] +
shl esi 18h +
add edx esi +
movzx esi byte ptr [eax+2] +
shl esi 10h +
add edx esi +
movzx esi byte ptr [eax+1] +
shl esi 8 +
add edx esi +
movzx eax byte ptr [eax] +
add edx eax +
sub edx ecx +
mov eax ebx +
sub edx ebx +
sub ecx ebx +
shr eax 0Dh +
xor edx eax +
mov eax edx +
sub ecx edx +
shl eax 8 +
sub ebx edx +
xor eax ecx +
mov esi eax +
sub ebx eax +
shr esi 0Dh +
sub edx eax +
xor esi ebx +
mov ecx esi +
sub edx esi +
shr ecx 0Ch +
sub eax esi +
xor ecx edx +
mov edx eax +
mov eax ecx +
sub edx ecx +
shl eax 10h +
sub esi ecx +
xor eax edx +
mov edx eax +
sub esi eax +
shr edx 5 +
sub ecx eax +
xor edx esi +
mov ebx edx +
sub ecx edx +
shr ebx 3 +
sub eax edx +
xor ebx ecx +
mov ecx ebx +
sub eax ebx +
shl ecx 0Ah +
sub edx ebx +
xor ecx eax +
mov eax ecx +
sub edx ecx +
shr eax 0Fh +
pop ebx  +
xor eax edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+0Ch+arg_4] 0Bh +
jbe loc_4A804E  +
mov edi ecx +
mov ecx ebx +
add edi [eax+4] +
add ecx [eax+8] +
mov ebx ecx +
lea ecx [ecx+edi] +
sub edi ebx +
sub edx ecx +
mov ecx ebx +
add edx [eax] +
shr ecx 0Dh +
xor edx ecx +
mov ecx edx +
sub edi edx +
shl ecx 8 +
xor ecx edi +
mov edi ebx +
sub edi edx +
mov ebx ecx +
sub edi ecx +
sub edx ecx +
shr ebx 0Dh +
xor ebx edi +
mov edi ebx +
sub edx ebx +
shr edi 0Ch +
xor edi edx +
mov edx ecx +
sub edx ebx +
mov ecx edi +
sub edx edi +
shl ecx 10h +
xor ecx edx +
mov edx ebx +
sub edx edi +
mov ebx ecx +
sub edx ecx +
sub edi ecx +
shr ebx 5 +
xor ebx edx +
mov edx ebx +
sub edi ebx +
shr edx 3 +
sub ecx ebx +
xor edx edi +
mov edi edx +
sub ecx edx +
shl edi 0Ah +
xor edi ecx +
sub ebx edx +
mov ecx edi +
sub ebx edi +
shr ecx 0Fh +
sub esi 0Ch +
xor ecx ebx +
add eax 0Ch +
cmp esi 0Bh +
ja loc_4A8135  +
mov ebx ecx +
mov ecx edi +
jmp loc_4A804E  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ecx [esp+2Ch+arg_0] +
movzx eax byte ptr [ecx] +
lea esi [ecx+1] +
test al al +
jz loc_4A8625  +
mov ebx [esp+2Ch+arg_8] +
mov edi [esp+2Ch+arg_8] +
mov ebp [esp+2Ch+arg_4] +
and ebx 1 +
mov [esp+2Ch+var_1C] ebx +
mov ebx [esp+2Ch+arg_8] +
and edi 10h +
mov [esp+2Ch+var_18] ebp +
and ebx 4 +
mov [esp+2Ch+var_14] ebx +
mov ebx [esp+2Ch+arg_8] +
and ebx 2 +
mov [esp+2Ch+var_20] ebx +
test edi edi +
jz loc_4A8214  +
movzx eax ds:byte_509B60[eax] +
cmp al 3Fh +
jz loc_4A82E5  +
jbe loc_4A8280  +
cmp al 5Bh +
jz loc_4A8352  +
cmp al 5Ch +
jnz loc_4A8332  +
mov ebp [esp+2Ch+var_20] +
test ebp ebp +
jnz loc_4A8495  +
test edi edi +
movzx edx byte ptr [ecx+1] +
lea esi [ecx+2] +
jz loc_4A84A2  +
movzx edx ds:byte_509B60[edx] +
mov eax [esp+2Ch+var_18] +
movzx eax byte ptr [eax] +
movzx eax ds:byte_509B60[eax] +
cmp eax edx +
jnz loc_4A82D8  +
movzx eax byte ptr [esi] +
lea edx [esi+1] +
add [esp+2Ch+var_18] 1 +
test al al +
jz loc_4A85F0  +
mov ecx esi +
mov esi edx +
jmp loc_4A8209  +
cmp al 2Ah +
jnz loc_4A8332  +
test byte ptr [esp+2Ch+arg_8] 4 +
mov ebp [esp+2Ch+var_18] +
jnz loc_4A8465  +
movzx edx byte ptr [ecx+1] +
lea esi [ecx+2] +
cmp dl 3Fh +
jnz loc_4A862B  +
mov eax [esp+2Ch+arg_8] +
and eax 1 +
jmp loc_4A82C3  +
add esi 1 +
movzx edx byte ptr [esi-1] +
add ebp 1 +
cmp dl 2Ah +
jnz loc_4A84E4  +
test eax eax +
jz loc_4A82CD  +
cmp byte ptr [ebp+0] 2Fh +
jz loc_4A82D8  +
cmp dl 3Fh +
jnz loc_4A82B0  +
cmp byte ptr [ebp+0] 0 +
jnz loc_4A82B0  +
mov eax 1 +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+2Ch+var_18] +
movzx eax byte ptr [eax] +
test al al +
jz loc_4A82D8  +
mov ebx [esp+2Ch+var_1C] +
test ebx ebx +
jz loc_4A82FC  +
cmp al 2Fh +
jz loc_4A82D8  +
mov ecx [esp+2Ch+var_14] +
test ecx ecx +
jz loc_4A8262  +
cmp al 2Eh +
jnz loc_4A8262  +
mov eax [esp+2Ch+var_18] +
cmp eax [esp+2Ch+arg_4] +
jz loc_4A82D8  +
mov edx [esp+2Ch+var_1C] +
test edx edx +
jz loc_4A8262  +
cmp byte ptr [eax-1] 2Fh +
jnz loc_4A8262  +
jmp loc_4A82D8  +
mov ebx [esp+2Ch+var_18] +
test edi edi +
movzx edx byte ptr [ebx] +
jz loc_4A825E  +
movzx edx ds:byte_509B60[edx] +
cmp eax edx +
jz loc_4A8262  +
jmp loc_4A82D8  +
mov eax [esp+2Ch+var_18] +
movzx edx byte ptr [eax] +
test dl dl +
jz loc_4A82D8  +
mov ebx [esp+2Ch+var_14] +
test ebx ebx +
jnz loc_4A84B6  +
movzx eax byte ptr [ecx+1] +
movzx ebp dl +
cmp al 5Eh +
setz bl  +
cmp al 21h +
setz al  +
add ecx 2 +
or ebx eax +
movzx eax bl +
test eax eax +
cmovnz esi ecx +
mov [esp+2Ch+var_10] eax +
lea ecx [esi+1] +
movzx eax byte ptr [esi] +
jmp loc_4A83B8  +
cmp dl ss:byte_509B60[ebp] +
movzx ecx ss:byte_509B60[ebp] +
ja loc_4A83AE  +
cmp ecx ebx +
jle loc_4A85A1  +
cmp al 5Dh +
jz loc_4A8590  +
mov ecx esi +
mov esi [esp+2Ch+var_20] +
movzx edx al +
test esi esi +
jnz loc_4A83CB  +
cmp al 5Ch +
jz loc_4A8450  +
test edi edi +
jz loc_4A83D6  +
movzx edx ds:byte_509B60[edx] +
test al al +
jz loc_4A82D8  +
test edi edi +
movzx eax byte ptr [ecx] +
lea esi [ecx+1] +
jz loc_4A83EF  +
movzx eax ds:byte_509B60[eax] +
mov ebx [esp+2Ch+var_1C] +
test ebx ebx +
jz loc_4A83FF  +
cmp al 2Fh +
jz loc_4A82D8  +
cmp al 2Dh +
movzx ebx dl +
jz loc_4A8412  +
test edi edi +
jnz loc_4A8397  +
cmp edx ebp +
jg loc_4A83AE  +
mov ecx ebp +
jmp loc_4A83A6  +
movzx ebx byte ptr [ecx+1] +
cmp bl 5Dh +
jz loc_4A8460  +
mov esi [esp+2Ch+var_20] +
lea eax [ecx+2] +
test esi esi +
jnz loc_4A842F  +
cmp bl 5Ch +
jz loc_4A8584  +
test bl bl +
jz loc_4A82D8  +
test edi edi +
jz loc_4A8442  +
movzx ebx ds:byte_509B60[ebx] +
lea esi [eax+1] +
movzx eax byte ptr [eax] +
jmp loc_4A8406  +
movzx edx byte ptr [ecx] +
add ecx 1 +
jmp loc_4A83CB  +
movzx ebx dl +
jmp loc_4A8406  +
cmp byte ptr [ebp+0] 2Eh +
jnz loc_4A8297  +
cmp [esp+2Ch+arg_4] ebp +
jz loc_4A82D8  +
test byte ptr [esp+2Ch+arg_8] 1 +
jz loc_4A8297  +
cmp byte ptr [ebp-1] 2Fh +
jnz loc_4A8297  +
nop   +
jmp loc_4A82D8  +
test edi edi +
mov edx 5Ch +
jnz loc_4A8250  +
mov eax [esp+2Ch+var_18] +
movzx eax byte ptr [eax] +
cmp eax edx +
jz loc_4A8262  +
jmp loc_4A82D8  +
cmp dl 2Eh +
jnz loc_4A836D  +
cmp eax [esp+2Ch+arg_4] +
jz loc_4A82D8  +
mov ebp [esp+2Ch+var_1C] +
test ebp ebp +
jz loc_4A836D  +
cmp byte ptr [eax-1] 2Fh +
jnz loc_4A836D  +
jmp loc_4A82D8  +
cmp dl 3Fh +
jz loc_4A82C3  +
xor eax eax +
test dl dl +
jz loc_4A82DD  +
test byte ptr [esp+2Ch+arg_8] 2 +
movzx ebx dl +
jnz loc_4A850A  +
cmp dl 5Ch +
jz loc_4A861B  +
test edi edi +
jz loc_4A8515  +
movzx ebx ds:byte_509B60[ebx] +
movzx eax byte ptr [ebp+0] +
sub esi 1 +
test al al +
jz loc_4A82D8  +
mov ecx [esp+2Ch+arg_8] +
mov [esp+2Ch+var_1C] esi +
mov esi ebx +
mov ebx edx +
and ecx 0FFFFFFFBh +
mov [esp+2Ch+var_20] ecx +
jmp loc_4A854F  +
add ebp 1 +
movzx eax byte ptr [ebp+0] +
test al al +
jz loc_4A82D8  +
cmp bl 5Bh +
jz loc_4A8563  +
test edi edi +
jz loc_4A855F  +
movzx eax ds:byte_509B60[eax] +
cmp eax esi +
jnz loc_4A8540  +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_24] eax +
mov eax [esp+2Ch+var_1C] +
mov [esp+2Ch+var_2C] eax +
call sub_4A81C0  +
test eax eax +
jnz loc_4A8540  +
jmp loc_4A82DD  +
lea eax [ecx+3] +
movzx ebx byte ptr [ecx+2] +
jmp loc_4A842F  +
mov edx [esp+2Ch+var_10] +
test edx edx +
jnz loc_4A8262  +
jmp loc_4A82D8  +
cmp al 5Dh +
jz loc_4A85D9  +
test al al +
jz loc_4A82D8  +
mov ecx [esp+2Ch+var_20] +
mov edx esi +
add esi 1 +
test ecx ecx +
movzx eax byte ptr [edx] +
jnz loc_4A85C1  +
cmp al 5Ch +
jz loc_4A85D2  +
cmp al 5Dh +
jz loc_4A85D9  +
test al al +
jz loc_4A82D8  +
mov edx esi +
nop   +
jmp loc_4A85B3  +
lea esi [edx+2] +
mov edx esi +
jmp loc_4A85B3  +
mov eax [esp+2Ch+var_10] +
test eax eax +
jz loc_4A8262  +
jmp loc_4A82D8  +
mov ebp [esp+2Ch+var_18] +
movzx edx byte ptr [ebp+0] +
xor eax eax +
test dl dl +
jz loc_4A82DD  +
test byte ptr [esp+2Ch+arg_8] 8 +
jz loc_4A82D8  +
cmp dl 2Fh +
jnz loc_4A82D8  +
jmp loc_4A82DD  +
movzx ebx byte ptr [esi] +
nop   +
jmp loc_4A850A  +
mov ebp [esp+2Ch+arg_4] +
jmp loc_4A85F4  +
cmp dl 2Ah +
jz loc_4A82A7  +
jmp loc_4A84ED  +
***
sub esp 1Ch +
sub esp 1Ch +
test byte ptr [eax+28h] 1 +
jnz loc_4A8685  +
mov eax [eax+1Ch] +
mov [esp+1Ch+var_1C] edx +
call eax  +
add esp 1Ch +
retn   +
mov ecx [eax+1Ch] +
mov eax [eax+24h] +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] eax +
call ecx  +
add esp 1Ch +
retn   +
***
push edi  +
mov edi ecx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 10h +
test ecx ecx +
jz loc_4A8700  +
mov esi ecx +
lea eax [ecx-1] +
neg esi  +
test edx edx +
mov ecx 0FE0h +
cmovz edx ecx +
mov [ebx+18h] eax +
mov eax ebx +
mov [ebx] edx +
call sub_4A8670  +
test eax eax +
jz loc_4A8711  +
lea edx [eax+edi+7] +
and edx esi +
mov [ebx+8] edx +
mov [ebx+0Ch] edx +
mov edx [ebx] +
mov [ebx+4] eax +
add edx eax +
mov [eax] edx +
mov [ebx+10h] edx +
mov dword ptr [eax+4] 0 +
mov eax 1 +
and byte ptr [ebx+28h] 0F9h +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov esi 0FFFFFFF8h +
mov eax 7 +
mov edi 8 +
jmp loc_4A86B5  +
mov [esp+1Ch+var_10] eax +
call off_4C01C0  +
mov eax [esp+1Ch+var_10] +
jmp loc_4A86CF  +
***
jmp sub_4A8730  +
***
sub esp 1Ch +
test byte ptr [eax+28h] 1 +
jnz loc_4A8745  +
mov eax [eax+20h] +
mov [esp+1Ch+var_1C] edx +
call eax  +
add esp 1Ch +
retn   +
mov ecx [eax+20h] +
mov eax [eax+24h] +
mov [esp+1Ch+var_18] edx +
mov [esp+1Ch+var_1C] eax +
call ecx  +
add esp 1Ch +
retn   +
***
mov eax [esp+4] +
mov edx [esp+10h] +
mov ecx [esp+1Ch+var_10] +
and byte ptr [eax+28h] 0FEh +
mov [eax+1Ch] edx +
mov edx [esp+14h] +
mov [eax+20h] edx +
mov edx [esp+8] +
jmp loc_4A86A0  +
***
mov eax [esp+4] +
mov edx [esp+10h] +
mov ecx [esp+0Ch] +
or byte ptr [eax+28h] 1 +
mov [eax+1Ch] edx +
mov edx [esp+14h] +
mov [eax+20h] edx +
mov edx [esp+18h] +
mov [eax+24h] edx +
mov edx [esp+8] +
jmp loc_4A86A0  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov edx [esp+1Ch+arg_4] +
mov esi [ebx+0Ch] +
sub esi [ebx+8] +
mov eax [ebx+18h] +
mov ecx [ebx+4] +
add edx esi +
mov edi esi +
shr edi 3 +
add eax edx +
lea ebp [eax+edi+64h] +
mov edi [ebx] +
cmp eax edi +
cmovnb edi eax +
cmp edi ebp +
cmovb edi ebp +
cmp edx eax +
jbe loc_4A8866  +
mov [esp+1Ch+var_10] ecx +
xor ebp ebp +
call off_4C01C0  +
mov ecx [esp+1Ch+var_10] +
mov eax [ebx+18h] +
add edi ebp +
mov [ebx+4] ebp +
mov [ebp+4] ecx +
mov [ebx+10h] edi +
mov [ebp+0] edi +
lea edi [ebp+eax+8] +
not eax  +
and edi eax +
mov eax [ebx+8] +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_1C] edi +
mov [esp+1Ch+var_10] ecx +
mov [esp+1Ch+var_18] eax +
call memcpy  +
test byte ptr [ebx+28h] 2 +
jnz loc_4A8852  +
mov edx [ebx+18h] +
mov ecx [esp+1Ch+var_10] +
lea eax [ecx+edx+8] +
not edx  +
and eax edx +
cmp [ebx+8] eax +
jz loc_4A8886  +
add esi edi +
mov [ebx+8] edi +
mov [ebx+0Ch] esi +
and byte ptr [ebx+28h] 0FDh +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp esi edx +
ja loc_4A87F8  +
mov edx edi +
mov eax ebx +
mov [esp+1Ch+var_10] ecx +
call sub_4A8670  +
mov ecx [esp+1Ch+var_10] +
test eax eax +
mov ebp eax +
jnz loc_4A8808  +
jmp loc_4A87F8  +
mov eax [ecx+4] +
mov edx ecx +
mov [ebp+4] eax +
mov eax ebx +
call sub_4A8730  +
jmp loc_4A8852  +
***
mov eax [esp+4] +
mov edx [esp+8] +
mov eax [eax+4] +
test eax eax +
jz loc_4A88BF  +
nop   +
cmp edx eax +
jbe loc_4A88B8  +
cmp edx [eax] +
jbe loc_4A88C2  +
mov eax [eax+4] +
test eax eax +
jnz loc_4A88B0  +
xor eax eax +
retn   +
***
mov eax 1 +
retn   +
***
push ebx  +
mov ebx [esp+8+arg_0] +
mov edi [esp+8+arg_4] +
mov edx [ebx+4] +
test edx edx +
jnz loc_4A88E6  +
jmp loc_4A8904  +
mov edx esi +
cmp edi edx +
jbe loc_4A88F2  +
mov eax [edx] +
cmp edi eax +
nop   +
jbe loc_4A8910  +
mov esi [edx+4] +
mov eax ebx +
call sub_4A8730  +
or byte ptr [ebx+28h] 2 +
test esi esi +
jnz loc_4A88E4  +
test edi edi +
jnz loc_4A8920  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [ebx+0Ch] edi +
mov [ebx+8] edi +
mov [ebx+10h] eax +
mov [ebx+4] edx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
call abort  +
lea esi [esi+0] +
lea edi [edi+0] +
mov eax [esp+8+var_4] +
mov edx [eax+4] +
xor eax eax +
test edx edx +
jz locret_4A894F  +
lea esi [esi+0] +
mov ecx [edx] +
sub ecx edx +
mov edx [edx+4] +
add eax ecx +
test edx edx +
jnz loc_4A8940  +
retn   +
retn   +
***
push ebx  +
sub esp 14h +
mov edx [esp+18h+arg_0] +
lea ebx [esp+18h+arg_4] +
test edx edx +
jz loc_4A8987  +
mov [esp+18h+var_18] edx +
add ebx 4 +
call strlen  +
mov edx [ebx-4] +
add esi eax +
test edx edx +
jnz loc_4A8973  +
add esp 14h +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+34h] +
lea edi [esp+38h] +
mov esi [esp+30h] +
test ebx ebx +
jz loc_4A89CD  +
mov [esp] ebx +
add edi 4 +
call strlen  +
mov [esp+4] ebx +
mov [esp] esi +
mov [esp+8] eax +
mov ebp eax +
call memcpy  +
mov ebx [edi-4] +
add esi ebp +
test ebx ebx +
jnz loc_4A89A7  +
mov byte ptr [esi] 0 +
mov eax [esp+30h] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi ds:dword_51492C +
mov ebx [esp+1Ch+arg_0] +
lea edi [esp+1Ch+arg_4] +
test ebx ebx +
jz loc_4A8A26  +
lea esi [esi+0] +
mov [esp+1Ch+var_1C] ebx +
add edi 4 +
call strlen  +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] esi +
mov [esp+1Ch+var_14] eax +
mov ebp eax +
call memcpy  +
mov ebx [edi-4] +
add esi ebp +
test ebx ebx +
jnz loc_4A8A00  +
mov byte ptr [esi] 0 +
mov eax ds:dword_51492C +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
lea esi [esp+1Ch+arg_4] +
test ebx ebx +
jz loc_4A8AB5  +
mov eax ebx +
xor edi edi +
mov [esp+1Ch+var_1C] eax +
add esi 4 +
call strlen  +
add edi eax +
mov eax [esi-4] +
test eax eax +
jnz loc_4A8A57  +
add edi 1 +
mov [esp+1Ch+var_1C] edi +
lea edi [esp+1Ch+arg_4] +
call sub_4A05F0  +
mov [esp+1Ch+var_10] eax +
mov esi eax +
mov [esp+1Ch+var_1C] ebx +
add edi 4 +
call strlen  +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] esi +
mov [esp+1Ch+var_14] eax +
mov ebp eax +
call memcpy  +
mov ebx [edi-4] +
add esi ebp +
test ebx ebx +
jnz loc_4A8A80  +
mov byte ptr [esi] 0 +
mov eax [esp+1Ch+var_10] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_1C] 1 +
call sub_4A05F0  +
mov esi eax +
mov [esp+1Ch+var_10] eax +
jmp loc_4A8AA6  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+34h] +
lea esi [esp+38h] +
test ebx ebx +
jz loc_4A8B59  +
mov eax ebx +
xor ebp ebp +
mov [esp] eax +
add esi 4 +
call strlen  +
add ebp eax +
mov eax [esi-4] +
test eax eax +
jnz loc_4A8AE7  +
add ebp 1 +
mov [esp] ebp +
lea edi [esp+38h] +
call sub_4A05F0  +
mov [esp+0Ch] eax +
mov esi eax +
mov [esp] ebx +
add edi 4 +
call strlen  +
mov [esp+4] ebx +
mov [esp] esi +
mov [esp+8] eax +
mov ebp eax +
call memcpy  +
mov ebx [edi-4] +
add esi ebp +
test ebx ebx +
jnz loc_4A8B10  +
mov eax [esp+30h] +
mov byte ptr [esi] 0 +
test eax eax +
jz loc_4A8B4D  +
mov eax [esp+30h] +
mov [esp] eax +
call free  +
mov eax [esp+0Ch] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov dword ptr [esp] 1 +
call sub_4A05F0  +
mov esi eax +
mov [esp+0Ch] eax +
jmp loc_4A8B36  +
***
push ebx  +
mov ebx [esp+4+arg_0] +
mov ecx [esp+4+arg_4] +
jmp loc_4A8B8B  +
test eax eax +
jz loc_4A8BB4  +
add ebx 1 +
add ecx 1 +
movzx eax byte ptr [ebx] +
movzx edx byte ptr [ecx] +
movzx eax ds:byte_509B60[eax] +
movzx edx ds:byte_509B60[edx] +
cmp eax 2Fh +
cmovz eax esi +
cmp edx 2Fh +
cmovz edx esi +
cmp eax edx +
jz loc_4A8B81  +
sub eax edx +
pop ebx  +
pop esi  +
retn   +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov edx [esp+0Ch+arg_8] +
mov esi [esp+0Ch+arg_0] +
mov ebx [esp+0Ch+arg_4] +
test edx edx +
jnz loc_4A8C01  +
jmp loc_4A8C32  +
test eax eax +
mov edi 5Ch +
setz cl  +
cmp edx 2Fh +
cmovz edx edi +
mov ebp ecx +
cmp eax edx +
jnz loc_4A8C30  +
mov ecx ebp +
test cl cl +
jnz loc_4A8C30  +
add esi 1 +
add ebx 1 +
sub [esp+0Ch+arg_8] 1 +
jz loc_4A8C37  +
movzx eax byte ptr [esi] +
movzx edx byte ptr [ebx] +
movzx eax ds:byte_509B60[eax] +
movzx edx ds:byte_509B60[edx] +
cmp eax 2Fh +
jnz loc_4A8BD8  +
xor ebp ebp +
mov edi 5Ch +
cmp edx 2Fh +
mov eax 5Ch +
cmovz edx edi +
cmp eax edx +
jz loc_4A8BEE  +
sub eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
mov eax [esp+0Ch] +
movzx edx byte ptr [eax] +
lea ecx [eax+1] +
xor eax eax +
test dl dl +
jz loc_4A8C79  +
mov ebx 2Fh +
cmp dl 5Ch +
movzx esi dl +
cmovz esi ebx +
add ecx 1 +
imul eax eax +
movzx edx ds:byte_509B60[esi] +
lea eax [eax+edx-71h] +
movzx edx byte ptr [ecx-1] +
test dl dl +
jnz loc_4A8C57  +
pop ebx  +
pop esi  +
retn   +
***
sub esp 8 +
mov eax [esp+10h] +
mov [esp+4] eax +
mov eax [esp+0Ch] +
mov [esp] eax +
call sub_4A8B70  +
test eax eax +
setz al  +
add esp 8 +
movzx eax al +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 10h +
mov eax [esp+20h] +
mov [esp] eax +
call sub_4A95A0  +
mov ebx eax +
mov eax [esp+24h] +
mov [esp] eax +
call sub_4A95A0  +
mov [esp] ebx +
mov [esp+4] eax +
mov esi eax +
call sub_4A8B70  +
mov [esp] ebx +
mov edi eax +
call free  +
mov [esp] esi +
call free  +
xor eax eax +
test edi edi +
setz al  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
cmp cl 2Fh +
movzx ecx byte ptr [edx] +
cmovz eax edx +
add edx 1 +
test cl cl +
jnz loc_4A8D10  +
retn   +
***
mov eax [esp+arg_0] +
movzx edx byte ptr [eax] +
movzx ecx dl +
test byte ptr ds:word_509C60[ecx+ecx] 88h +
jz loc_4A8D4A  +
cmp byte ptr [eax+1] 3Ah +
jz loc_4A8D70  +
test dl dl +
jz locret_4A8D67  +
lea ecx [eax+1] +
cmp dl 5Ch +
jz loc_4A8D5B  +
cmp dl 2Fh +
jnz loc_4A8D5D  +
mov eax ecx +
movzx edx byte ptr [ecx] +
add ecx 1 +
test dl dl +
jnz loc_4A8D51  +
retn   +
***
movzx edx byte ptr [eax+2] +
add eax 2 +
jmp loc_4A8D4A  +
***
mov ebx [esp+48h+arg_0] +
lea eax [esp+48h+var_38] +
mov [esp+48h+var_44] eax +
mov [esp+48h+var_48] ebx +
call ds:_stati64  +
mov ecx 1 +
test eax eax +
jnz loc_4A8DC3  +
movzx edx [esp+48h+var_32] +
and dx 0F000h +
cmp dx 8000h +
jz loc_4A8DD0  +
add esp 48h +
mov eax ecx +
pop ebx  +
retn   +
mov [esp+48h+var_48] ebx +
call _unlink  +
add esp 48h +
pop ebx  +
mov ecx eax +
mov eax ecx +
retn   +
***
sub esp 0Ch +
call clock  +
add esp 0Ch +
imul eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_0] +
test esi esi +
jz loc_4A8EB6  +
mov ecx [esi] +
test ecx ecx +
jz loc_4A8EAB  +
xor eax eax +
nop   +
add eax 1 +
mov edx [esi+eax*4] +
test edx edx +
jnz loc_4A8E30  +
lea eax ds:4[eax*4] +
mov [esp+1Ch+var_1C] eax +
call sub_4A05F0  +
mov [esp+1Ch+var_10] eax +
mov eax [esi] +
test eax eax +
jz loc_4A8EB2  +
lea ebx [esi+4] +
mov ebp esi +
xor edi edi +
lea esi [esi+0] +
mov [esp+1Ch+var_1C] eax +
call strlen  +
add edi [esp+1Ch+var_10] +
add eax 1 +
mov [esp+1Ch+var_1C] eax +
call sub_4A05F0  +
mov [edi] eax +
mov edx [ebp+0] +
mov edi ebx +
mov ebp ebx +
add ebx 4 +
mov [esp+1Ch+var_1C] eax +
sub edi esi +
mov [esp+1Ch+var_18] edx +
call strcpy  +
mov eax [ebx-4] +
test eax eax +
jnz loc_4A8E60  +
mov eax [esp+1Ch+var_10] +
mov dword ptr [eax+edi] 0 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 4 +
jmp loc_4A8E41  +
xor edi edi +
jmp loc_4A8E98  +
xor eax eax +
jmp loc_4A8EA3  +
***
push esi  +
push ebx  +
sub esp 14h +
mov esi [esp+20h] +
test esi esi +
jz loc_4A8EF4  +
mov eax [esi] +
mov ebx esi +
test eax eax +
jz loc_4A8EE6  +
mov [esp] eax +
add ebx 4 +
call free  +
mov eax [ebx] +
test eax eax +
jnz loc_4A8ED5  +
mov [esp+20h] esi +
add esp 14h +
pop ebx  +
pop esi  +
jmp free  +
***
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
test ebx ebx +
jz loc_4A9113  +
mov [esp+2Ch+var_2C] ebx +
xor esi esi +
xor ebp ebp +
call strlen  +
xor edi edi +
add eax 1 +
mov [esp+2Ch+var_2C] eax +
call sub_4A05F0  +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_18] 0 +
mov [esp+2Ch+var_1C] 0 +
mov [esp+2Ch+var_14] eax +
jmp loc_4A8F53  +
add ebx 1 +
movzx eax byte ptr [ebx] +
test byte ptr ds:word_509C60[eax+eax] 40h +
jnz loc_4A8F50  +
mov edx [esp+2Ch+var_18] +
test edx edx +
jz loc_4A9096  +
mov eax [esp+2Ch+var_18] +
sub eax 1 +
cmp [esp+2Ch+var_1C] eax +
jge loc_4A9096  +
mov eax [esp+2Ch+var_20] +
mov edx [esp+2Ch+var_1C] +
lea eax [eax+edx*4] +
mov [esp+2Ch+var_10] eax +
movzx eax byte ptr [ebx] +
mov edx [esp+2Ch+var_14] +
test al al +
jnz loc_4A8FB1  +
jmp loc_4A8FF6  +
mov [edx] al +
xor esi esi +
add edx 1 +
add ebx 1 +
movzx eax byte ptr [ebx] +
test al al +
jz loc_4A8FF6  +
movzx ecx al +
test byte ptr ds:word_509C60[ecx+ecx] 40h +
jz loc_4A8FCA  +
mov ecx esi +
or ecx edi +
or ecx ebp +
jz loc_4A90F0  +
test esi esi +
jnz loc_4A8FA0  +
cmp al 5Ch +
jz loc_4A9076  +
test edi edi +
jz loc_4A9063  +
cmp al 27h +
jz loc_4A90D7  +
add ebx 1 +
add edx 1 +
mov [edx-1] al +
movzx eax byte ptr [ebx] +
test al al +
jnz loc_4A8FB1  +
mov eax [esp+2Ch+var_14] +
mov byte ptr [edx] 0 +
mov [esp+2Ch+var_2C] eax +
call sub_4A06C0  +
mov edx [esp+2Ch+var_10] +
add [esp+2Ch+var_1C] 1 +
mov [edx] eax +
mov eax [esp+2Ch+var_20] +
mov edx [esp+2Ch+var_1C] +
mov dword ptr [eax+edx*4] 0 +
movzx eax byte ptr [ebx] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 40h +
jz loc_4A9043  +
nop   +
add ebx 1 +
movzx eax byte ptr [ebx] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 40h +
jnz loc_4A9030  +
test al al +
jnz loc_4A8F53  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] eax +
call free  +
mov eax [esp+2Ch+var_20] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ebp ebp +
jz loc_4A9080  +
cmp al 22h +
jnz loc_4A8FE6  +
xor ebp ebp +
jmp loc_4A8FA7  +
mov esi 1 +
jmp loc_4A8FA7  +
cmp al 27h +
jz loc_4A90E0  +
cmp al 22h +
jnz loc_4A8FE6  +
mov ebp 1 +
jmp loc_4A8FA7  +
mov eax [esp+2Ch+var_20] +
test eax eax +
jz loc_4A90F9  +
shl [esp+2Ch+var_18] 1 +
mov eax [esp+2Ch+var_18] +
shl eax 2 +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_20] +
mov [esp+2Ch+var_2C] eax +
call sub_4A0670  +
mov [esp+2Ch+var_20] eax +
mov eax [esp+2Ch+var_20] +
mov edx [esp+2Ch+var_1C] +
lea eax [eax+edx*4] +
mov [esp+2Ch+var_10] eax +
mov dword ptr [eax] 0 +
jmp loc_4A8F8C  +
xor edi edi +
jmp loc_4A8FA7  +
mov edi 1 +
jmp loc_4A8FA7  +
xor esi esi +
xor ebp ebp +
jmp loc_4A8FF6  +
mov [esp+2Ch+var_2C] 20h +
call sub_4A05F0  +
mov [esp+2Ch+var_18] 8 +
mov [esp+2Ch+var_20] eax +
jmp loc_4A90BD  +
mov [esp+2Ch+var_20] 0 +
jmp loc_4A9057  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+34h] +
mov edi [esp+30h] +
test esi esi +
jz loc_4A918C  +
mov ebx [edi] +
test ebx ebx +
jnz loc_4A915C  +
jmp loc_4A91BD  +
cmp al 27h +
jz loc_4A9177  +
cmp al 22h +
jz loc_4A9177  +
mov [esp+4] esi +
mov [esp] ebp +
call fputc  +
cmp eax 0FFFFFFFFh +
jz loc_4A918C  +
add ebx 1 +
movzx eax byte ptr [ebx] +
test al al +
jz loc_4A91A0  +
movzx edx al +
movsx ebp al +
test byte ptr ds:word_509C60[edx+edx] 40h +
jnz loc_4A9177  +
cmp al 5Ch +
jnz loc_4A9140  +
mov [esp+4] esi +
mov dword ptr [esp] 5Ch +
call fputc  +
cmp eax 0FFFFFFFFh +
jnz loc_4A9148  +
mov eax 1 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+4] esi +
mov dword ptr [esp] 0Ah +
call fputc  +
cmp eax 0FFFFFFFFh +
jz loc_4A918C  +
add edi 4 +
jmp loc_4A9133  +
***
xor eax eax +
nop   +
jmp loc_4A9191  +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [esp+48h+arg_0] +
lea ebx [ebp+1] +
mov [esp+48h+var_30] 7D0h +
mov ecx [eax] +
cmp ebx ecx +
jge loc_4A920E  +
nop   +
mov eax [esp+48h+arg_4] +
lea edi ds:0[ebx*4] +
mov edx [eax] +
mov eax [edx+ebx*4] +
cmp byte ptr [eax] 40h +
jz loc_4A9216  +
mov ebp ebx +
lea ebx [ebp+1] +
cmp ebx ecx +
jl loc_4A91F0  +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
sub [esp+48h+var_30] 1 +
jz loc_4A9481  +
add eax 1 +
mov [esp+48h+var_44] offset aR_1 +
mov [esp+48h+var_48] eax +
call fopen  +
test eax eax +
mov esi eax +
jz loc_4A9408  +
mov [esp+48h+var_40] 2 +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] eax +
call fseek  +
cmp eax 0FFFFFFFFh +
jz loc_4A9400  +
mov [esp+48h+var_48] esi +
call ftell  +
cmp eax 0FFFFFFFFh +
mov [esp+48h+var_2C] eax +
jz loc_4A9400  +
mov [esp+48h+var_40] 0 +
mov [esp+48h+var_44] 0 +
mov [esp+48h+var_48] esi +
call fseek  +
cmp eax 0FFFFFFFFh +
jz loc_4A9400  +
mov edx [esp+48h+var_2C] +
lea eax [edx+1] +
mov [esp+48h+var_48] eax +
mov [esp+48h+var_28] edx +
call sub_4A05F0  +
mov edx [esp+48h+var_28] +
mov [esp+48h+var_3C] esi +
mov [esp+48h+var_44] 1 +
mov [esp+48h+var_40] edx +
mov [esp+48h+var_48] eax +
mov [esp+48h+var_2C] eax +
call fread  +
mov edx [esp+48h+var_28] +
cmp edx eax +
mov ecx eax +
jz loc_4A92EA  +
mov [esp+48h+var_48] esi +
mov [esp+48h+var_28] eax +
call ferror  +
mov ecx [esp+48h+var_28] +
test eax eax +
jnz loc_4A9400  +
mov eax [esp+48h+var_2C] +
mov byte ptr [eax+ecx] 0 +
movzx eax byte ptr [eax] +
test al al +
jz loc_4A9328  +
test byte ptr ds:word_509C60[eax+eax] 40h +
jz loc_4A9415  +
mov eax [esp+48h+var_2C] +
jmp loc_4A931E  +
test byte ptr ds:word_509C60[edx+edx] 40h +
jz loc_4A9415  +
add eax 1 +
movzx edx byte ptr [eax] +
test dl dl +
jnz loc_4A9310  +
mov [esp+48h+var_48] 4 +
call sub_4A05F0  +
mov dword ptr [eax] 0 +
mov [esp+48h+var_24] eax +
mov eax [esp+48h+arg_4] +
mov eax [eax] +
mov [esp+48h+var_48] eax +
call sub_4A8E10  +
xor edx edx +
mov [esp+48h+var_20] 0 +
mov ecx eax +
mov [esp+48h+var_28] eax +
mov eax [esp+48h+arg_4] +
mov [eax] ecx +
mov ecx [esp+48h+arg_0] +
mov eax edx +
mov [esp+48h+var_1C] edx +
add eax [ecx] +
lea eax ds:4[eax*4] +
mov [esp+48h+var_44] eax +
mov eax [esp+48h+var_28] +
mov [esp+48h+var_48] eax +
call sub_4A0670  +
mov ecx [esp+48h+arg_4] +
mov edx [esp+48h+var_1C] +
mov [esp+48h+var_28] edx +
mov [ecx] eax +
mov ecx [esp+48h+arg_0] +
mov ecx [ecx] +
sub ecx ebx +
add ebx edx +
shl ecx 2 +
mov [esp+48h+var_40] ecx +
lea ecx [eax+edi+4] +
lea eax [eax+ebx*4] +
mov [esp+48h+var_44] ecx +
mov [esp+48h+var_48] eax +
call memmove  +
mov eax [esp+48h+arg_4] +
mov ebx [esp+48h+var_24] +
add edi [eax] +
mov eax [esp+48h+var_20] +
mov [esp+48h+var_44] ebx +
mov [esp+48h+var_48] edi +
mov [esp+48h+var_40] eax +
call memcpy  +
mov eax [esp+48h+arg_0] +
mov edx [esp+48h+var_28] +
mov edi [esp+48h+arg_0] +
mov eax [eax] +
lea eax [edx+eax-1] +
mov [edi] eax +
mov [esp+48h+var_48] ebx +
mov ebx ebp +
call free  +
mov eax [esp+48h+var_2C] +
mov [esp+48h+var_48] eax +
call free  +
nop   +
mov [esp+48h+var_48] esi +
call fclose  +
mov eax [esp+48h+arg_0] +
mov ebp ebx +
mov ecx [eax] +
jmp loc_4A9207  +
mov eax [esp+48h+var_2C] +
mov [esp+48h+var_48] eax +
call sub_4A8F00  +
mov edx [eax] +
mov [esp+48h+var_24] eax +
mov eax [esp+48h+arg_4] +
mov [esp+48h+var_20] edx +
mov eax [eax] +
mov [esp+48h+var_48] eax +
call sub_4A8E10  +
mov edx [esp+48h+var_20] +
test edx edx +
mov ecx eax +
mov [esp+48h+var_28] eax +
mov eax [esp+48h+arg_4] +
mov [eax] ecx +
jz loc_4A94AB  +
mov eax [esp+48h+var_24] +
xor edx edx +
mov ecx [esp+48h+var_28] +
mov [esp+48h+var_1C] ebp +
nop   +
lea esi [esi+0] +
add edx 1 +
cmp dword ptr [eax+edx*4] 0 +
lea ebp ds:0[edx*4] +
jnz loc_4A9460  +
mov [esp+48h+var_20] ebp +
mov ebp [esp+48h+var_1C] +
mov [esp+48h+var_28] ecx +
jmp loc_4A9362  +
mov eax [edx] +
mov [esp+48h+var_44] offset aSErrorTooMany@ +
mov [esp+48h+var_40] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+48h+var_48] eax +
call fprintf  +
mov [esp+48h+var_48] 1 +
call sub_4A7250  +
mov [esp+48h+var_20] 0 +
jmp loc_4A9362  +
***
add eax 1 +
mov ecx [edx+eax*4] +
test ecx ecx +
jnz loc_4A94D0  +
retn   +
***
mov eax ds:dword_514928 +
test eax eax +
jz loc_4A9580  +
mov ebx off_4C01C4 +
mov eax [ebx+4] +
cmp eax 1Fh +
lea edx [eax+1] +
jg loc_4A9550  +
mov [ebx+4] edx +
mov edx [esp+18h+arg_0] +
mov [ebx+eax*4+8] edx +
xor eax eax +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_18] 88h +
call malloc  +
test eax eax +
jz loc_4A958C  +
mov [eax] ebx +
mov edx 1 +
mov ebx eax +
mov dword ptr [eax+4] 0 +
mov off_4C01C4 eax +
xor eax eax +
jmp loc_4A953E  +
mov ds:dword_514928 offset loc_4A94F0 +
jmp loc_4A952D  +
mov eax 0FFFFFFFFh +
jmp loc_4A954B  +
***
push esi  +
push ebx  +
sub esp 120h +
mov esi [ebp+arg_0] +
lea eax [ebp+var_110] +
lea ebx [ebp+var_10C] +
mov [esp+128h+var_11C] eax +
mov [esp+128h+var_120] ebx +
mov [esp+128h+var_124] 104h +
mov [esp+128h+var_128] esi +
call ds:GetFullPathNameA  +
lea edx [eax-1] +
sub esp 10h +
cmp edx 102h +
ja loc_4A9600  +
mov [esp+128h+var_128] ebx +
mov [esp+128h+var_124] eax +
call ds:CharLowerBuffA  +
sub esp 8 +
mov [esp+128h+var_128] ebx +
call _strdup  +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov [ebp+arg_0] esi +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
jmp _strdup  +
***
push ebx  +
sub esp 14h +
test eax eax +
jz loc_4A963E  +
mov edx [eax] +
lea ebx [eax+4] +
test edx edx +
jz loc_4A9636  +
mov [esp+18h+var_18] edx +
add ebx 4 +
call free  +
mov edx [ebx-4] +
test edx edx +
jnz loc_4A9624  +
mov [esp+18h+var_18] esi +
call free  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
mov esi edx +
push ebx  +
sub esp 10h +
lea eax [edx+1] +
mov [esp+18h+var_18] eax +
call malloc  +
mov [esp+18h+var_10] esi +
mov [esp+18h+var_14] edi +
mov ebx eax +
mov [esp+18h+var_18] eax +
call memcpy  +
mov eax ebx +
mov byte ptr [ebx+esi] 0 +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 1Ch +
movzx ebx byte ptr [eax+1] +
mov [esp+28h+var_1C] edx +
xor edx edx +
cmp bl 3Ah +
jnz loc_4A96C6  +
jmp loc_4A97DF  +
cmp eax 5Ch +
jz loc_4A9751  +
cmp eax 2Fh +
lea esi [esi+0] +
jz loc_4A9751  +
movsx eax byte ptr [ecx] +
add ecx 1 +
test eax eax +
jnz loc_4A96B0  +
lea eax ds:8[edx*4] +
mov [esp+28h+var_28] eax +
call malloc  +
test eax eax +
mov edi eax +
jz loc_4A9828  +
xor ebp ebp +
cmp bl 3Ah +
jz loc_4A97B0  +
mov edx esi +
jmp loc_4A9704  +
cmp eax 5Ch +
jz loc_4A9773  +
cmp eax 2Fh +
jz loc_4A9773  +
mov edx ebx +
lea ebx [edx+1] +
movsx eax byte ptr [ebx-1] +
test eax eax +
jnz loc_4A96F8  +
sub edx esi +
mov eax ebp +
test edx edx +
jle loc_4A9726  +
lea ebx [edi+eax*4] +
mov eax esi +
call sub_4A9650  +
add ebp 1 +
mov [ebx] eax +
mov eax [edi+ebp*4-4] +
mov dword ptr [edi+ebp*4] 0 +
test eax eax +
jz loc_4A982F  +
mov eax [esp+28h+var_1C] +
test eax eax +
jz loc_4A97FC  +
mov [eax] ebp +
mov eax edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movsx eax byte ptr [ecx] +
add edx 1 +
cmp al 5Ch +
jnz loc_4A976A  +
nop   +
lea esi [esi+0] +
add ecx 1 +
movsx eax byte ptr [ecx] +
cmp al 5Ch +
jz loc_4A9760  +
cmp al 2Fh +
jz loc_4A9760  +
jmp loc_4A96C9  +
movzx eax byte ptr [ebx] +
cmp al 2Fh +
jnz loc_4A9806  +
nop   +
add ebx 1 +
movzx eax byte ptr [ebx] +
cmp al 5Ch +
jz loc_4A9780  +
cmp al 2Fh +
jz loc_4A9780  +
mov edx ebx +
mov eax esi +
sub edx esi +
add ebp 1 +
call sub_4A9650  +
test eax eax +
mov [edi+ebp*4-4] eax +
jz loc_4A9813  +
mov esi ebx +
jmp loc_4A96F4  +
movzx eax byte ptr [esi+2] +
cmp al 5Ch +
jz loc_4A97C0  +
cmp al 2Fh +
jnz loc_4A96F4  +
mov edx 3 +
mov eax esi +
call sub_4A9650  +
test eax eax +
mov [edi] eax +
jz loc_4A983D  +
add esi 3 +
mov ebp 1 +
jmp loc_4A96F4  +
movzx eax byte ptr [eax+2] +
cmp al 5Ch +
jz loc_4A97EF  +
cmp al 2Fh +
jnz loc_4A96C6  +
lea ecx [esi+3] +
mov edx 1 +
jmp loc_4A96C6  +
add esp 1Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 5Ch +
jz loc_4A9780  +
jmp loc_4A978E  +
mov eax edi +
mov dword ptr [edi+ebp*4] 0 +
call sub_4A9610  +
xor eax eax +
jmp loc_4A9749  +
xor eax eax +
jmp loc_4A9749  +
mov eax edi +
call sub_4A9610  +
xor eax eax +
jmp loc_4A9749  +
mov [esp+28h+var_28] edi +
call free  +
xor eax eax +
jmp loc_4A9749  +
***
push edi  +
push esi  +
mov esi eax +
push ebx  +
sub esp 7Ch +
test eax eax +
mov [ebp+var_5C] edx +
mov [ebp+var_60] ecx +
jz loc_4A9B30  +
test edx edx +
jz loc_4A9B30  +
mov ebx [ebp+var_60] +
test ebx ebx +
jz loc_4A9B30  +
mov [esp+88h+var_88] eax +
call sub_4A8D80  +
cmp eax esi +
mov [ebp+var_64] eax +
jz loc_4A9B40  +
mov ecx [ebp+arg_0] +
mov [esp+88h+var_88] esi +
test ecx ecx +
jnz loc_4A99B0  +
call _strdup  +
mov ebx eax +
test ebx ebx +
jz loc_4A9B30  +
lea edx [ebp+var_50] +
mov eax ebx +
call sub_4A9690  +
mov [esp+88h+var_88] ebx +
mov esi eax +
mov [ebp+var_64] eax +
call free  +
test esi esi +
jz loc_4A9B30  +
mov eax [ebp+var_5C] +
lea edx [ebp+var_4C] +
call sub_4A9690  +
test eax eax +
mov ebx eax +
jz loc_4A9B20  +
mov eax [ebp+var_50] +
lea esi [eax-1] +
cmp esi [ebp+var_4C] +
mov [ebp+var_50] esi +
jnz loc_4A992D  +
test esi esi +
jle loc_4A9B20  +
mov [ebp+var_5C] esi +
xor edi edi +
mov esi [ebp+var_64] +
jmp loc_4A990C  +
add edi 1 +
cmp [ebp+var_5C] edi +
jz loc_4A9B20  +
mov eax [ebx+edi*4] +
mov [esp+88h+var_84] eax +
mov eax [esi+edi*4] +
mov [esp+88h+var_88] eax +
call strcmp  +
test eax eax +
jz loc_4A9900  +
mov esi [ebp+var_5C] +
cmp esi edi +
jz loc_4A9B20  +
mov eax [ebp+var_60] +
lea edx [ebp+var_48] +
call sub_4A9690  +
test eax eax +
mov edx eax +
mov [ebp+var_60] eax +
jz loc_4A9B20  +
mov eax [ebp+var_4C] +
mov ecx [ebp+var_48] +
mov [ebp+var_68] eax +
cmp ecx eax +
cmovle eax ecx +
test eax eax +
mov [ebp+var_6C] ecx +
jle loc_4A9CB8  +
xor edi edi +
mov esi edx +
mov [ebp+var_5C] eax +
jmp loc_4A996F  +
add edi 1 +
cmp edi [ebp+var_5C] +
jz loc_4A99C0  +
mov eax [esi+edi*4] +
mov [esp+88h+var_84] eax +
mov eax [ebx+edi*4] +
mov [esp+88h+var_88] eax +
call strcmp  +
test eax eax +
jz loc_4A9967  +
xor esi esi +
test edi edi +
jnz loc_4A99C0  +
mov eax [ebp+var_64] +
call sub_4A9610  +
mov eax ebx +
call sub_4A9610  +
mov eax [ebp+var_60] +
call sub_4A9610  +
lea esp [ebp-0Ch] +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call sub_4A95A0  +
mov ebx eax +
jmp loc_4A98A4  +
mov eax [ebp+var_50] +
test eax eax +
jle loc_4A9C8D  +
mov edx [ebp+var_64] +
mov [ebp+var_5C] ebx +
mov [ebp+var_70] edi +
mov esi edx +
lea eax [edx+eax*4] +
xor edx edx +
mov edi esi +
mov ebx edx +
mov esi eax +
mov eax [edi] +
add edi 4 +
mov [esp+88h+var_88] eax +
call strlen  +
add ebx eax +
cmp edi esi +
jnz loc_4A99E1  +
mov esi ebx +
mov edi [ebp+var_70] +
mov ebx [ebp+var_5C] +
mov eax [ebp+var_68] +
mov edx [ebp+var_6C] +
sub eax edi +
lea eax [eax+eax*2] +
add eax esi +
cmp edx edi +
jle loc_4A9A3D  +
mov ecx [ebp+var_60] +
mov [ebp+var_5C] ebx +
mov ebx eax +
mov [ebp+var_68] edi +
lea esi [ecx+edi*4] +
lea edx [ecx+edx*4] +
mov edi esi +
mov esi edx +
mov eax [edi] +
add edi 4 +
mov [esp+88h+var_88] eax +
call strlen  +
add ebx eax +
cmp edi esi +
jnz loc_4A9A22  +
mov eax ebx +
mov edi [ebp+var_68] +
mov ebx [ebp+var_5C] +
mov esi eax +
add esi 1 +
mov [esp+88h+var_88] esi +
call malloc  +
test eax eax +
mov esi eax +
jz loc_4A998B  +
mov byte ptr [eax] 0 +
mov eax [ebp+var_50] +
xor ecx ecx +
test eax eax +
mov [ebp+var_5C] eax +
jle loc_4A9A8D  +
mov [ebp+var_68] ebx +
mov ebx [ebp+var_64] +
mov [ebp+var_6C] edi +
mov edi ecx +
nop   +
mov eax [ebx+edi*4] +
add edi 1 +
mov [esp+88h+var_88] esi +
mov [esp+88h+var_84] eax +
call strcat  +
cmp edi [ebp+var_5C] +
jnz loc_4A9A70  +
mov ebx [ebp+var_68] +
mov edi [ebp+var_6C] +
mov edx esi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_4A9A8F  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovnz ecx edx +
add al al +
mov eax [ebp+var_4C] +
sbb ecx 3 +
cmp edi eax +
jge loc_4A9CC7  +
sub eax edi +
lea eax [eax+eax*2] +
add eax ecx +
nop   +
mov edx 2E2Eh +
add ecx 3 +
mov [ecx-3] dx +
mov byte ptr [ecx-1] 0 +
cmp ecx eax +
mov byte ptr [ecx-1] 2Fh +
jnz loc_4A9AD0  +
mov byte ptr [eax] 0 +
mov eax [ebp+var_48] +
cmp edi eax +
mov [ebp+var_5C] eax +
jge loc_4A998B  +
mov [ebp+var_68] ebx +
mov ebx [ebp+var_60] +
nop   +
mov eax [ebx+edi*4] +
add edi 1 +
mov [esp+88h+var_88] esi +
mov [esp+88h+var_84] eax +
call strcat  +
cmp edi [ebp+var_5C] +
jnz loc_4A9B00  +
mov ebx [ebp+var_68] +
jmp loc_4A998B  +
xor esi esi +
mov [ebp+var_60] 0 +
jmp loc_4A998B  +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+88h+var_88] offset aPath +
call getenv  +
test eax eax +
jz loc_4A988F  +
mov [esp+88h+var_88] eax +
mov [ebp+var_68] eax +
call strlen  +
lea ebx [eax+1] +
mov eax 2 +
cmp ebx 1 +
cmovbe ebx eax +
mov eax [ebp+var_64] +
mov [esp+88h+var_88] eax +
call strlen  +
lea eax [ebx+eax+23h] +
and eax 0FFFFFFF0h +
call sub_4BB070  +
mov edx [ebp+var_68] +
sub esp eax +
lea edi [esp+88h+var_70+3] +
mov ebx edx +
and edi 0FFFFFFF0h +
mov [ebp+var_68] edi +
movzx eax byte ptr [ebx] +
test al al +
jz loc_4A9BB0  +
cmp al 3Bh +
jz loc_4A9BB0  +
add ebx 1 +
movzx eax byte ptr [ebx] +
test al al +
jnz loc_4A9B9C  +
lea esi [esi+0] +
cmp ebx edx +
jz loc_4A9CA0  +
mov esi ebx +
sub esi edx +
mov [esp+88h+var_80] esi +
mov [esp+88h+var_84] edx +
mov [esp+88h+var_88] edi +
call memcpy  +
movzx eax byte ptr [ebx-1] +
cmp al 5Ch +
jz loc_4A9C94  +
cmp al 2Fh +
jz loc_4A9C94  +
mov byte ptr [edi+esi] 2Fh +
mov byte ptr [edi+esi+1] 0 +
mov eax [ebp+var_64] +
mov [esp+88h+var_88] edi +
mov [esp+88h+var_84] eax +
call strcat  +
mov [esp+88h+var_84] 0 +
mov [esp+88h+var_88] edi +
call ds:_access  +
test eax eax +
jz loc_4A9C5C  +
mov edx edi +
mov ecx [edx] +
add edx 4 +
lea eax [ecx-1010101h] +
not ecx  +
and eax ecx +
and eax 80808080h +
jz loc_4A9C0F  +
mov ecx eax +
shr ecx 10h +
test eax 8080h +
cmovz eax ecx +
lea ecx [edx+2] +
cmovz edx ecx +
add al al +
sbb edx 3 +
mov dword ptr [edx] 6578652Eh +
mov byte ptr [edx+4] 0 +
mov [esp+88h+var_84] 0 +
mov [esp+88h+var_88] edi +
call ds:_access  +
test eax eax +
jnz loc_4A9C7E  +
lea eax [ebp+var_48] +
mov [esp+88h+var_84] eax +
mov [esp+88h+var_88] edi +
call ds:_stati64  +
test eax eax +
js loc_4A9C7E  +
movzx eax [ebp+var_42] +
and ax 0F000h +
cmp ax 8000h +
jz loc_4A9CBF  +
cmp byte ptr [ebx] 0 +
jz loc_4A9CB0  +
add ebx 1 +
mov edx ebx +
jmp loc_4A9B95  +
xor esi esi +
jmp loc_4A99FC  +
mov byte ptr [edi+esi] 0 +
jmp loc_4A9BE9  +
mov byte ptr [edi] 2Eh +
mov byte ptr [edi+1] 2Fh +
mov byte ptr [edi+2] 0 +
jmp loc_4A9BE9  +
mov esi [ebp+var_64] +
jmp loc_4A988F  +
xor esi esi +
jmp loc_4A998B  +
mov esi [ebp+var_68] +
jmp loc_4A988F  +
mov eax ecx +
jmp loc_4A9AE8  +
***
mov eax [esp+arg_0] +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov [esp+arg_0] 1 +
jmp sub_4A9850  +
***
mov eax [esp+4] +
mov ecx [esp+0Ch] +
mov edx [esp+8] +
mov dword ptr [esp+4] 0 +
jmp sub_4A9850  +
***
mov [esp+18h+var_18] 0Ch +
sub esp 14h +
mov eax [esp+14h+arg_4] +
mov esi [esp+14h+arg_0] +
test eax eax +
jz loc_4A9DDC  +
lea ebx [eax+7] +
and ebx 0FFFFFFF8h +
lea ecx [ebx+8] +
cmp eax ecx +
ja loc_4A9DF9  +
mov edx [esi+4] +
cmp ebx edx +
jbe loc_4A9E20  +
cmp ebx 1FFh +
ja loc_4A9E37  +
mov [esp+14h+var_14] 0FE0h +
call malloc  +
test eax eax +
jz loc_4A9DF9  +
mov edx [esi+8] +
test ebx ebx +
mov dword ptr [eax+4] 0 +
mov [eax] edx +
lea edx [eax+8] +
mov [esi] edx +
mov dword ptr [esi+4] 0FD8h +
mov [esi+8] eax +
jz loc_4A9E01  +
mov eax ebx +
jnz loc_4A9E6C  +
mov edx [esi+4] +
cmp edx 7 +
ja loc_4A9E60  +
mov [esp+14h+var_14] 0FE0h +
mov ebx 8 +
call malloc  +
test eax eax +
jnz loc_4A9DB5  +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov ebx 0FFFFFFF8h +
mov ecx 0FD0h +
mov eax 8 +
add eax edx +
mov [esi] eax +
add eax ebx +
mov [esi+4] ecx +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
mov ecx ebx +
neg ecx  +
mov eax [esi] +
sub edx ebx +
mov [esi+4] edx +
add eax ebx +
mov [esi] eax +
add esp 14h +
add eax ecx +
pop ebx  +
pop esi  +
retn   +
mov [esp+14h+var_14] ecx +
call malloc  +
test eax eax +
jz loc_4A9DF9  +
mov edx [esi+8] +
mov [eax] edx +
mov edx [esi] +
mov [eax+4] edx +
mov [esi+8] eax +
add esp 14h +
add eax 8 +
pop ebx  +
pop esi  +
retn   +
mov ecx 0FFFFFFF8h +
mov ebx 8 +
jmp loc_4A9E24  +
mov ecx 0FD8h +
sub ecx ebx +
neg ebx  +
jmp loc_4A9E10  +
***
sub esp 14h +
push esi  +
push ebx  +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov esi [esp+1Ch+arg_4] +
mov eax [eax+8] +
test eax eax +
jz loc_4A9F00  +
mov ebx eax +
xor ebp ebp +
jmp loc_4A9EDD  +
lea edx [ebx+8] +
cmp esi edx +
jz loc_4A9F05  +
mov ebx [ebx] +
test ebx ebx +
jz loc_4A9F00  +
mov edi [ebx+4] +
test edi edi +
jnz loc_4A9ED0  +
cmp esi ebx +
jbe loc_4A9EF2  +
lea edx [ebx+0FE0h] +
cmp esi edx +
jb loc_4A9F52  +
mov ebp ebx +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4A9EDD  +
lea esi [esi+0] +
call abort  +
mov ebx [ebx] +
cmp eax ebx +
jnz loc_4A9F12  +
jmp loc_4A9F20  +
mov eax esi +
mov esi [eax] +
mov [esp+1Ch+var_1C] eax +
call free  +
cmp ebx esi +
jnz loc_4A9F10  +
mov eax [esp+1Ch+arg_0] +
mov [eax+8] ebx +
mov edx [ebx+4] +
test edx edx +
jz loc_4A9F39  +
nop   +
mov ebx [ebx] +
mov eax [ebx+4] +
test eax eax +
jnz loc_4A9F30  +
mov eax [esp+1Ch+arg_0] +
add ebx 0FE0h +
sub ebx edi +
mov [eax] edi +
mov [eax+4] ebx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ebx ebx +
mov [esp+1Ch+var_10] edx +
jz loc_4A9F00  +
cmp eax ebx +
jz loc_4A9FE0  +
mov [esp+1Ch+var_14] 0 +
mov edi ebp +
jmp loc_4A9F88  +
cmp edi eax +
mov ecx 0 +
mov [esp+1Ch+var_1C] eax +
cmovz edi ecx +
call free  +
cmp ebp ebx +
jz loc_4A9FA5  +
mov eax ebp +
test edi edi +
mov ebp [eax] +
jnz loc_4A9F70  +
cmp esi [eax+4] +
jb loc_4A9FD6  +
mov ecx [esp+1Ch+var_14] +
test ecx ecx +
jnz loc_4A9F82  +
mov edi [esp+1Ch+var_14] +
mov [esp+1Ch+var_14] eax +
jmp loc_4A9F82  +
mov eax [esp+1Ch+var_14] +
mov edi ebp +
test eax eax +
cmovnz edi eax +
mov [esp+1Ch+var_14] edi +
mov eax [esp+1Ch+arg_0] +
mov ecx [esp+1Ch+var_14] +
mov [eax] esi +
mov [eax+8] ecx +
mov eax [esp+1Ch+var_10] +
mov ecx [esp+1Ch+arg_0] +
sub eax esi +
mov [ecx+4] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_1C] eax +
call free  +
jmp loc_4A9F82  +
mov [esp+1Ch+var_14] eax +
jmp loc_4A9FB4  +
***
mov eax [esp+arg_0] +
mov dword ptr [eax] 67452301h +
mov dword ptr [eax+4] 0EFCDAB89h +
mov dword ptr [eax+8] 98BADCFEh +
mov dword ptr [eax+0Ch] 10325476h +
mov dword ptr [eax+14h] 0 +
mov dword ptr [eax+10h] 0 +
mov dword ptr [eax+18h] 0 +
retn   +
***
push esi  +
push ebx  +
mov edx [esp+0Ch] +
mov eax [esp+10h] +
mov esi [edx] +
mov ebx [edx+4] +
mov ecx [edx+8] +
mov edx [edx+0Ch] +
mov [eax] esi +
mov [eax+4] ebx +
mov [eax+8] ecx +
mov [eax+0Ch] edx +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_0] +
mov ebp [esp+1Ch+arg_4] +
mov esi [ebx+18h] +
mov eax [ebx+10h] +
add eax esi +
cmp esi eax +
mov [ebx+10h] eax +
jbe loc_4AA7D2  +
add dword ptr [ebx+14h] 1 +
mov edi 38h +
sub edi esi +
cmp esi 37h +
jbe loc_4AA7E5  +
mov edi 78h +
sub edi esi +
lea eax [ebx+esi+1Ch] +
add esi edi +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_18] offset aA_0 +
mov [esp+1Ch+var_1C] eax +
call memcpy  +
mov eax [ebx+10h] +
shl eax 3 +
mov [ebx+esi+1Ch] eax +
mov ecx [ebx+14h] +
mov eax [ebx+10h] +
lea edx ds:0[ecx*8] +
shr eax 1Dh +
or eax edx +
mov [ebx+esi+20h] eax +
lea eax [ebx+1Ch] +
add esi 8 +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_18] esi +
mov [esp+1Ch+var_1C] eax +
call sub_4AA060  +
mov esi [ebx] +
mov eax [ebx+0Ch] +
mov ecx [ebx+4] +
mov edx [ebx+8] +
mov [ebp+0] esi +
mov [ebp+0Ch] eax +
mov eax ebp +
mov [ebp+4] ecx +
mov [ebp+8] edx +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_8] +
mov ebx [esi+18h] +
test ebx ebx +
jnz loc_4AA998  +
cmp [esp+1Ch+arg_4] 40h +
jbe loc_4AA984  +
test byte ptr [esp+1Ch+arg_0] 3 +
jz loc_4AA960  +
mov edi [esp+1Ch+arg_4] +
lea ebp [esi+1Ch] +
mov ebx [esp+1Ch+arg_0] +
mov ecx [ebx] +
sub edi 40h +
add ebx 40h +
mov [ebp+0] ecx +
mov ecx [ebx-3Ch] +
mov [ebp+4] ecx +
mov ecx [ebx-38h] +
mov [ebp+8] ecx +
mov ecx [ebx-34h] +
mov [ebp+0Ch] ecx +
mov ecx [ebx-30h] +
mov [ebp+10h] ecx +
mov ecx [ebx-2Ch] +
mov [ebp+14h] ecx +
mov ecx [ebx-28h] +
mov [ebp+18h] ecx +
mov ecx [ebx-24h] +
mov [ebp+1Ch] ecx +
mov ecx [ebx-20h] +
mov [ebp+20h] ecx +
mov ecx [ebx-1Ch] +
mov [ebp+24h] ecx +
mov ecx [ebx-18h] +
mov [ebp+28h] ecx +
mov ecx [ebx-14h] +
mov [ebp+2Ch] ecx +
mov ecx [ebx-10h] +
mov [ebp+30h] ecx +
mov ecx [ebx-0Ch] +
mov [ebp+34h] ecx +
mov ecx [ebx-8] +
mov [ebp+38h] ecx +
mov ecx [ebx-4] +
mov [ebp+3Ch] ecx +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_18] 40h +
mov [esp+1Ch+var_1C] ebp +
call sub_4AA060  +
cmp edi 40h +
ja loc_4AA897  +
mov eax [esp+1Ch+arg_4] +
lea edx [eax-41h] +
shr edx 6 +
lea ecx [edx+1] +
shl ecx 6 +
shl edx 6 +
add [esp+1Ch+arg_0] ecx +
neg edx  +
lea eax [eax+edx-40h] +
mov [esp+1Ch+arg_4] eax +
mov eax [esp+1Ch+arg_4] +
mov [esp+1Ch+var_1C] ebp +
mov [esp+1Ch+var_14] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_18] eax +
call memcpy  +
mov eax [esp+1Ch+arg_4] +
mov [esi+18h] eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [esp+1Ch+arg_4] +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] esi +
and ebx 0FFFFFFC0h +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] eax +
call sub_4AA060  +
add [esp+1Ch+arg_0] ebx +
and [esp+1Ch+arg_4] 3Fh +
mov eax [esp+1Ch+arg_4] +
test eax eax +
jnz loc_4AAA1C  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx 80h +
sub edx ebx +
cmp [esp+1Ch+arg_4] edx +
cmovbe edx [esp+1Ch+arg_4] +
lea eax [esi+ebx+1Ch] +
mov [esp+1Ch+var_1C] eax +
mov edi edx +
mov [esp+1Ch+var_14] edx +
mov edx [esp+1Ch+arg_0] +
add ebx edi +
mov [esp+1Ch+var_18] edx +
call memcpy  +
add [esi+18h] edi +
cmp ebx 40h +
ja loc_4AA9E0  +
add [esp+1Ch+arg_0] edi +
sub [esp+1Ch+arg_4] edi +
jmp loc_4AA876  +
mov ecx ebx +
and ebx 3Fh +
and ecx 0FFFFFFC0h +
lea ebp [esi+1Ch] +
mov [esp+1Ch+var_18] ecx +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_1C] ebp +
mov [esp+1Ch+var_10] ecx +
call sub_4AA060  +
mov ecx [esp+1Ch+var_10] +
mov [esp+1Ch+var_14] ebx +
mov [esp+1Ch+var_1C] ebp +
lea ecx [esi+ecx+1Ch] +
mov [esp+1Ch+var_18] ecx +
call memcpy  +
mov [esi+18h] ebx +
jmp loc_4AA9CC  +
lea ebp [esi+1Ch] +
jmp loc_4AA936  +
***
push ebx  +
sub esp 0B8h +
mov eax [esp+0C4h] +
lea ebx [esp+14h] +
mov [esp+8] ebx +
mov dword ptr [esp+14h] 67452301h +
mov dword ptr [esp+18h] 0EFCDAB89h +
mov [esp+4] eax +
mov eax [esp+0C0h] +
mov dword ptr [esp+1Ch] 98BADCFEh +
mov dword ptr [esp+20h] 10325476h +
mov dword ptr [esp+28h] 0 +
mov [esp] eax +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+2Ch] 0 +
call sub_4AA860  +
mov eax [esp+0C8h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_4AA7B0  +
add esp 0B8h +
pop ebx  +
retn   +
***
push ebp  +
mov eax 110Ch +
push edi  +
push esi  +
push ebx  +
call sub_4BB070  +
mov edi 1000h +
sub esp eax +
mov esi [esp+1120h] +
lea ebx [esp+0B8h] +
mov dword ptr [esp+1Ch] 67452301h +
mov dword ptr [esp+20h] 0EFCDAB89h +
mov dword ptr [esp+24h] 98BADCFEh +
mov dword ptr [esp+28h] 10325476h +
mov dword ptr [esp+30h] 0 +
mov dword ptr [esp+2Ch] 0 +
mov dword ptr [esp+34h] 0 +
nop   +
lea esi [esi+0] +
xor ebp ebp +
jmp loc_4AAB18  +
test eax eax +
jz loc_4AAB41  +
mov eax edi +
sub eax ebp +
mov [esp+8] eax +
lea eax [ebx+ebp] +
mov [esp+0Ch] esi +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call fread  +
add ebp eax +
cmp ebp 0FFFh +
jbe loc_4AAB14  +
test eax eax +
jz loc_4AAB60  +
lea eax [esp+1Ch] +
mov [esp+8] eax +
mov dword ptr [esp+4] 1000h +
mov [esp] ebx +
call sub_4AA060  +
jmp loc_4AAB10  +
***
mov [esp] esi +
call ferror  +
test eax eax +
mov esi eax +
jnz loc_4AAB96  +
test ebp ebp +
lea edi [esp+1Ch] +
jnz loc_4AABA8  +
mov eax [esp+1124h] +
mov [esp] edi +
mov [esp+4] eax +
call sub_4AA7B0  +
add esp 110Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 110Ch +
mov esi 1 +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov [esp+8] edi +
mov [esp+4] ebp +
mov [esp] ebx +
call sub_4AA860  +
jmp loc_4AAB76  +
***
mov eax [esp+arg_0] +
mov dword ptr [eax] 67452301h +
mov dword ptr [eax+4] 0EFCDAB89h +
mov dword ptr [eax+8] 98BADCFEh +
mov dword ptr [eax+0Ch] 10325476h +
mov dword ptr [eax+10h] 0C3D2E1F0h +
mov dword ptr [eax+18h] 0 +
mov dword ptr [eax+14h] 0 +
mov dword ptr [eax+1Ch] 0 +
retn   +
***
mov edx [esp-10h+arg_0] +
mov eax [esp-10h+arg_4] +
mov ecx [edx] +
bswap ecx  +
mov [eax] ecx +
mov ecx [edx+4] +
bswap ecx  +
mov [eax+4] ecx +
mov ecx [edx+8] +
bswap ecx  +
mov [eax+8] ecx +
mov ecx [edx+0Ch] +
bswap ecx  +
mov [eax+0Ch] ecx +
mov edx [edx+10h] +
bswap edx  +
mov [eax+10h] edx +
retn   +
***
push esi  +
push ebx  +
sub esp 98h +
mov ebx [esp+98h+arg_8] +
mov eax [esp+98h+arg_4] +
mov ebx [ebx] +
mov edx eax +
and edx 0FFFFFFFCh +
add edx [esp+98h+arg_0] +
mov [esp+98h+var_54] ebx +
mov ebx [esp+98h+arg_8] +
mov esi edx +
mov [esp+98h+var_44] edx +
mov ebx [ebx+4] +
mov [esp+98h+var_50] ebx +
mov ebx [esp+98h+arg_8] +
mov ebx [ebx+8] +
mov [esp+98h+var_58] ebx +
mov ebx [esp+98h+arg_8] +
mov ebx [ebx+0Ch] +
mov [esp+98h+var_4C] ebx +
mov ebx [esp+98h+arg_8] +
mov ebx [ebx+10h] +
mov [esp+98h+var_48] ebx +
mov ebx [esp+98h+arg_8] +
mov edx [ebx+14h] +
add edx eax +
cmp eax edx +
setnbe al  +
movzx eax al +
add [ebx+18h] eax +
cmp [esp+98h+arg_0] esi +
mov [ebx+14h] edx +
jnb loc_4ABF59  +
nop   +
mov ecx [esp+98h+arg_0] +
xor eax eax +
lea esi [esi+0] +
mov edx [ecx+eax*4] +
bswap edx  +
mov [esp+eax*4+98h+var_40] edx +
add eax 1 +
cmp eax 10h +
jnz loc_4AACD0  +
mov ecx [esp+98h+var_54] +
mov eax [esp+98h+var_48] +
mov esi [esp+98h+var_40] +
mov ebx [esp+98h+var_4C] +
mov edx [esp+98h+var_58] +
mov edi [esp+98h+var_50] +
lea esi [esi+eax+5A827999h] +
mov eax ecx +
mov ebp [esp+98h+var_3C] +
ror eax 1Bh +
add esi eax +
mov eax ebx +
xor eax edx +
and eax edi +
xor eax ebx +
add esi eax +
mov eax edx +
ror edi 2 +
xor eax edi +
and eax ecx +
xor eax edx +
mov edx ecx +
mov ecx [esp+98h+var_58] +
lea ebx [ebp+ebx+5A827999h] +
mov ebp [esp+98h+var_38] +
add ebx eax +
mov eax esi +
ror edx 2 +
ror eax 1Bh +
add ebx eax +
mov eax edx +
xor eax edi +
and eax esi +
lea ecx [ebp+ecx+5A827999h] +
xor eax edi +
mov ebp [esp+98h+var_34] +
add eax ecx +
mov ecx ebx +
ror esi 2 +
ror ecx 1Bh +
add ecx eax +
mov eax esi +
xor eax edx +
and eax ebx +
lea edi [edi+ebp+5A827999h] +
xor eax edx +
mov ebp [esp+98h+var_2C] +
add eax edi +
mov edi ecx +
ror edi 1Bh +
add eax edi +
mov edi [esp+98h+var_30] +
ror ebx 2 +
add [esp+98h+arg_0] 40h +
lea edi [edx+edi+5A827999h] +
mov edx ebx +
xor edx esi +
and edx ecx +
xor edx esi +
add edx edi +
mov edi eax +
ror edi 1Bh +
ror ecx 2 +
add edi edx +
mov edx ecx +
xor edx ebx +
and edx eax +
lea esi [esi+ebp+5A827999h] +
xor edx ebx +
mov ebp [esp+98h+var_28] +
add edx esi +
mov esi edi +
ror eax 2 +
ror esi 1Bh +
add esi edx +
mov edx eax +
xor edx ecx +
and edx edi +
lea ebx [ebx+ebp+5A827999h] +
xor edx ecx +
mov ebp [esp+98h+var_24] +
add edx ebx +
mov ebx esi +
ror edi 2 +
ror ebx 1Bh +
add ebx edx +
mov edx edi +
xor edx eax +
lea ecx [ecx+ebp+5A827999h] +
and edx esi +
mov ebp [esp+98h+var_20] +
xor edx eax +
add edx ecx +
mov ecx ebx +
ror esi 2 +
ror ecx 1Bh +
add ecx edx +
lea edx [eax+ebp+5A827999h] +
mov eax esi +
mov ebp [esp+98h+var_1C] +
xor eax edi +
and eax ebx +
xor eax edi +
add eax edx +
mov edx ecx +
ror ebx 2 +
ror edx 1Bh +
add edx eax +
mov eax ebx +
xor eax esi +
and eax ecx +
xor eax esi +
lea edi [edi+ebp+5A827999h] +
mov ebp [esp+98h+var_18] +
add eax edi +
mov edi edx +
ror ecx 2 +
ror edi 1Bh +
add edi eax +
mov eax ecx +
xor eax ebx +
and eax edx +
lea esi [esi+ebp+5A827999h] +
xor eax ebx +
mov ebp [esp+98h+var_14] +
add eax esi +
mov esi edi +
ror edx 2 +
ror esi 1Bh +
add esi eax +
mov eax edx +
xor eax ecx +
and eax edi +
lea ebx [ebx+ebp+5A827999h] +
xor eax ecx +
mov ebp [esp+98h+var_8] +
add eax ebx +
mov ebx esi +
ror ebx 1Bh +
add eax ebx +
mov ebx [esp+98h+var_10] +
ror edi 2 +
lea ebx [ecx+ebx+5A827999h] +
mov ecx edi +
xor ecx edx +
and ecx esi +
xor ecx edx +
add ecx ebx +
mov ebx eax +
ror ebx 1Bh +
add ebx ecx +
mov ecx [esp+98h+var_C] +
ror esi 2 +
lea ecx [edx+ecx+5A827999h] +
mov edx esi +
xor edx edi +
and edx eax +
xor edx edi +
add edx ecx +
mov ecx ebx +
ror eax 2 +
ror ecx 1Bh +
add ecx edx +
mov edx eax +
xor edx esi +
and edx ebx +
lea edi [edi+ebp+5A827999h] +
xor edx esi +
mov ebp [esp+98h+var_4] +
add edx edi +
mov edi ecx +
ror ebx 2 +
ror edi 1Bh +
add edi edx +
mov edx ebx +
lea esi [esi+ebp+5A827999h] +
xor edx eax +
mov ebp [esp+98h+var_40] +
and edx ecx +
xor ebp [esp+98h+var_38] +
xor edx eax +
xor ebp [esp+98h+var_20] +
add edx esi +
xor ebp [esp+98h+var_C] +
mov esi edi +
ror ecx 2 +
ror esi 1Bh +
ror ebp 1Fh +
add esi edx +
lea edx [eax+ebp+5A827999h] +
mov eax ecx +
xor eax ebx +
and eax edi +
xor eax ebx +
add eax edx +
mov edx esi +
ror edx 1Bh +
add edx eax +
mov eax [esp+98h+var_34] +
xor eax [esp+98h+var_3C] +
ror edi 2 +
mov [esp+98h+var_98] eax +
mov eax [esp+98h+var_1C] +
xor [esp+98h+var_98] eax +
mov eax [esp+98h+var_8] +
xor [esp+98h+var_98] eax +
ror [esp+98h+var_98] 1Fh +
mov eax [esp+98h+var_98] +
lea ebx [ebx+eax+5A827999h] +
mov eax edi +
xor eax ecx +
and eax esi +
xor eax ecx +
add eax ebx +
mov ebx edx +
ror ebx 1Bh +
add ebx eax +
mov eax [esp+98h+var_30] +
xor eax [esp+98h+var_38] +
ror esi 2 +
mov [esp+98h+var_6C] eax +
mov eax [esp+98h+var_18] +
xor [esp+98h+var_6C] eax +
mov eax [esp+98h+var_4] +
xor [esp+98h+var_6C] eax +
ror [esp+98h+var_6C] 1Fh +
mov eax [esp+98h+var_6C] +
lea ecx [ecx+eax+5A827999h] +
mov eax esi +
xor eax edi +
and eax edx +
xor eax edi +
add eax ecx +
mov ecx ebx +
ror ecx 1Bh +
add ecx eax +
mov eax [esp+98h+var_2C] +
xor eax [esp+98h+var_34] +
ror edx 2 +
mov [esp+98h+var_94] eax +
mov eax [esp+98h+var_14] +
xor [esp+98h+var_94] eax +
xor [esp+98h+var_94] ebp +
ror [esp+98h+var_94] 1Fh +
mov eax [esp+98h+var_94] +
lea edi [edi+eax+5A827999h] +
mov eax edx +
xor eax esi +
and eax ebx +
xor eax esi +
add eax edi +
mov edi ecx +
ror edi 1Bh +
add eax edi +
mov edi [esp+98h+var_28] +
xor edi [esp+98h+var_30] +
ror ebx 2 +
mov [esp+98h+var_68] edi +
mov edi [esp+98h+var_10] +
xor [esp+98h+var_68] edi +
mov edi [esp+98h+var_98] +
xor [esp+98h+var_68] edi +
ror [esp+98h+var_68] 1Fh +
mov edi [esp+98h+var_68] +
lea edi [esi+edi+6ED9EBA1h] +
mov esi ebx +
xor esi edx +
xor esi ecx +
add esi edi +
mov edi eax +
ror edi 1Bh +
add edi esi +
mov esi [esp+98h+var_24] +
xor esi [esp+98h+var_2C] +
ror ecx 2 +
mov [esp+98h+var_90] esi +
mov esi [esp+98h+var_C] +
xor [esp+98h+var_90] esi +
mov esi [esp+98h+var_6C] +
xor [esp+98h+var_90] esi +
ror [esp+98h+var_90] 1Fh +
mov esi [esp+98h+var_90] +
lea esi [edx+esi+6ED9EBA1h] +
mov edx ecx +
xor edx ebx +
xor edx eax +
add edx esi +
mov esi edi +
ror esi 1Bh +
add edx esi +
mov esi [esp+98h+var_20] +
xor esi [esp+98h+var_28] +
ror eax 2 +
mov [esp+98h+var_64] esi +
mov esi [esp+98h+var_8] +
xor [esp+98h+var_64] esi +
mov esi [esp+98h+var_94] +
xor [esp+98h+var_64] esi +
ror [esp+98h+var_64] 1Fh +
mov esi [esp+98h+var_64] +
lea esi [ebx+esi+6ED9EBA1h] +
mov ebx eax +
xor ebx ecx +
xor ebx edi +
add ebx esi +
mov esi edx +
ror esi 1Bh +
add esi ebx +
mov ebx [esp+98h+var_1C] +
xor ebx [esp+98h+var_24] +
ror edi 2 +
mov [esp+98h+var_8C] ebx +
mov ebx [esp+98h+var_4] +
xor [esp+98h+var_8C] ebx +
mov ebx [esp+98h+var_68] +
xor [esp+98h+var_8C] ebx +
ror [esp+98h+var_8C] 1Fh +
mov ebx [esp+98h+var_8C] +
lea ebx [ecx+ebx+6ED9EBA1h] +
mov ecx edi +
xor ecx eax +
xor ecx edx +
add ecx ebx +
mov ebx esi +
ror ebx 1Bh +
add ebx ecx +
mov ecx [esp+98h+var_18] +
xor ecx [esp+98h+var_20] +
ror edx 2 +
mov [esp+98h+var_60] ecx +
mov ecx [esp+98h+var_90] +
xor [esp+98h+var_60] ebp +
xor [esp+98h+var_60] ecx +
ror [esp+98h+var_60] 1Fh +
mov ecx [esp+98h+var_60] +
lea ecx [eax+ecx+6ED9EBA1h] +
mov eax edx +
xor eax edi +
xor eax esi +
add eax ecx +
mov ecx ebx +
ror ecx 1Bh +
add ecx eax +
mov eax [esp+98h+var_14] +
xor eax [esp+98h+var_1C] +
ror esi 2 +
mov [esp+98h+var_88] eax +
mov eax [esp+98h+var_98] +
xor [esp+98h+var_88] eax +
mov eax [esp+98h+var_64] +
xor [esp+98h+var_88] eax +
ror [esp+98h+var_88] 1Fh +
mov eax [esp+98h+var_88] +
lea edi [edi+eax+6ED9EBA1h] +
mov eax esi +
xor eax edx +
xor eax ebx +
add eax edi +
mov edi ecx +
ror edi 1Bh +
add eax edi +
mov edi [esp+98h+var_10] +
xor edi [esp+98h+var_18] +
ror ebx 2 +
mov [esp+98h+var_84] edi +
mov edi [esp+98h+var_6C] +
xor [esp+98h+var_84] edi +
mov edi [esp+98h+var_8C] +
xor [esp+98h+var_84] edi +
ror [esp+98h+var_84] 1Fh +
mov edi [esp+98h+var_84] +
lea edi [edx+edi+6ED9EBA1h] +
mov edx ebx +
xor edx esi +
xor edx ecx +
add edx edi +
mov edi eax +
ror edi 1Bh +
add edx edi +
mov edi [esp+98h+var_C] +
xor edi [esp+98h+var_14] +
ror ecx 2 +
mov [esp+98h+var_80] edi +
mov edi [esp+98h+var_94] +
xor [esp+98h+var_80] edi +
mov edi [esp+98h+var_60] +
xor [esp+98h+var_80] edi +
ror [esp+98h+var_80] 1Fh +
mov edi [esp+98h+var_80] +
lea edi [esi+edi+6ED9EBA1h] +
mov esi ecx +
xor esi ebx +
xor esi eax +
add esi edi +
mov edi edx +
ror edi 1Bh +
add esi edi +
mov edi [esp+98h+var_8] +
xor edi [esp+98h+var_10] +
ror eax 2 +
mov [esp+98h+var_7C] edi +
mov edi [esp+98h+var_68] +
xor [esp+98h+var_7C] edi +
mov edi [esp+98h+var_88] +
xor [esp+98h+var_7C] edi +
ror [esp+98h+var_7C] 1Fh +
mov edi [esp+98h+var_7C] +
lea edi [ebx+edi+6ED9EBA1h] +
mov ebx eax +
xor ebx ecx +
xor ebx edx +
add ebx edi +
mov edi esi +
ror edi 1Bh +
add ebx edi +
mov edi [esp+98h+var_4] +
xor edi [esp+98h+var_C] +
ror edx 2 +
mov [esp+98h+var_78] edi +
mov edi [esp+98h+var_90] +
xor [esp+98h+var_78] edi +
mov edi [esp+98h+var_84] +
xor [esp+98h+var_78] edi +
ror [esp+98h+var_78] 1Fh +
mov edi [esp+98h+var_78] +
lea edi [ecx+edi+6ED9EBA1h] +
mov ecx edx +
xor ecx eax +
xor ecx esi +
add ecx edi +
mov edi ebx +
ror edi 1Bh +
add ecx edi +
mov edi [esp+98h+var_8] +
ror esi 2 +
xor edi ebp +
mov [esp+98h+var_74] edi +
mov edi [esp+98h+var_64] +
xor [esp+98h+var_74] edi +
mov edi [esp+98h+var_80] +
xor [esp+98h+var_74] edi +
ror [esp+98h+var_74] 1Fh +
mov edi [esp+98h+var_74] +
lea edi [eax+edi+6ED9EBA1h] +
mov eax esi +
xor eax edx +
xor eax ebx +
add eax edi +
mov edi ecx +
ror edi 1Bh +
add eax edi +
mov edi [esp+98h+var_98] +
xor edi [esp+98h+var_4] +
ror ebx 2 +
mov [esp+98h+var_70] edi +
mov edi [esp+98h+var_8C] +
xor [esp+98h+var_70] edi +
mov edi [esp+98h+var_7C] +
xor [esp+98h+var_70] edi +
ror [esp+98h+var_70] 1Fh +
mov edi [esp+98h+var_70] +
lea edi [edx+edi+6ED9EBA1h] +
mov edx ebx +
xor edx esi +
xor edx ecx +
add edx edi +
mov edi eax +
ror edi 1Bh +
add edx edi +
mov edi ebp +
mov ebp [esp+98h+var_6C] +
ror ecx 2 +
xor edi ebp +
mov [esp+98h+var_6C] edi +
mov edi [esp+98h+var_60] +
xor [esp+98h+var_6C] edi +
mov edi [esp+98h+var_78] +
xor [esp+98h+var_6C] edi +
ror [esp+98h+var_6C] 1Fh +
mov edi [esp+98h+var_6C] +
lea edi [esi+edi+6ED9EBA1h] +
mov esi ecx +
xor esi ebx +
xor esi eax +
add esi edi +
mov edi edx +
ror edi 1Bh +
add esi edi +
mov edi [esp+98h+var_98] +
xor edi [esp+98h+var_94] +
ror eax 2 +
mov [esp+98h+var_98] edi +
mov edi [esp+98h+var_88] +
xor [esp+98h+var_98] edi +
mov edi [esp+98h+var_74] +
xor [esp+98h+var_98] edi +
ror [esp+98h+var_98] 1Fh +
mov edi [esp+98h+var_98] +
lea edi [ebx+edi+6ED9EBA1h] +
mov ebx eax +
xor ebx ecx +
xor ebx edx +
add ebx edi +
mov edi esi +
ror edi 1Bh +
add ebx edi +
mov edi ebp +
mov ebp [esp+98h+var_68] +
ror edx 2 +
xor edi ebp +
mov [esp+98h+var_68] edi +
mov edi [esp+98h+var_84] +
xor [esp+98h+var_68] edi +
mov edi [esp+98h+var_70] +
xor [esp+98h+var_68] edi +
ror [esp+98h+var_68] 1Fh +
mov edi [esp+98h+var_68] +
lea edi [ecx+edi+6ED9EBA1h] +
mov ecx edx +
xor ecx eax +
xor ecx esi +
add ecx edi +
mov edi ebx +
ror edi 1Bh +
add ecx edi +
mov edi [esp+98h+var_94] +
xor edi [esp+98h+var_90] +
ror esi 2 +
mov [esp+98h+var_94] edi +
mov edi [esp+98h+var_80] +
xor [esp+98h+var_94] edi +
mov edi [esp+98h+var_6C] +
xor [esp+98h+var_94] edi +
ror [esp+98h+var_94] 1Fh +
mov edi [esp+98h+var_94] +
lea edi [eax+edi+6ED9EBA1h] +
mov eax esi +
xor eax edx +
xor eax ebx +
add eax edi +
mov edi ecx +
ror edi 1Bh +
add eax edi +
mov edi ebp +
mov ebp [esp+98h+var_64] +
ror ebx 2 +
xor edi ebp +
mov [esp+98h+var_64] edi +
mov edi [esp+98h+var_7C] +
xor [esp+98h+var_64] edi +
mov edi [esp+98h+var_98] +
xor [esp+98h+var_64] edi +
ror [esp+98h+var_64] 1Fh +
mov edi [esp+98h+var_64] +
lea edi [edx+edi+6ED9EBA1h] +
mov edx ebx +
xor edx esi +
xor edx ecx +
add edx edi +
mov edi eax +
ror edi 1Bh +
add edx edi +
mov edi [esp+98h+var_90] +
xor edi [esp+98h+var_8C] +
ror ecx 2 +
mov [esp+98h+var_90] edi +
mov edi [esp+98h+var_78] +
xor [esp+98h+var_90] edi +
mov edi [esp+98h+var_68] +
xor [esp+98h+var_90] edi +
ror [esp+98h+var_90] 1Fh +
mov edi [esp+98h+var_90] +
lea edi [esi+edi+6ED9EBA1h] +
mov esi ecx +
xor esi ebx +
xor esi eax +
add esi edi +
mov edi edx +
ror edi 1Bh +
add esi edi +
mov edi ebp +
mov ebp [esp+98h+var_60] +
ror eax 2 +
xor edi ebp +
mov [esp+98h+var_60] edi +
mov edi [esp+98h+var_74] +
xor [esp+98h+var_60] edi +
mov edi [esp+98h+var_94] +
xor [esp+98h+var_60] edi +
ror [esp+98h+var_60] 1Fh +
mov edi [esp+98h+var_60] +
lea edi [ebx+edi+6ED9EBA1h] +
mov ebx eax +
xor ebx ecx +
xor ebx edx +
add ebx edi +
mov edi esi +
ror edi 1Bh +
add edi ebx +
mov ebx [esp+98h+var_8C] +
xor ebx [esp+98h+var_88] +
ror edx 2 +
mov [esp+98h+var_8C] ebx +
mov ebx [esp+98h+var_70] +
xor [esp+98h+var_8C] ebx +
mov ebx [esp+98h+var_64] +
xor [esp+98h+var_8C] ebx +
ror [esp+98h+var_8C] 1Fh +
mov ebx [esp+98h+var_8C] +
lea ebx [ecx+ebx+6ED9EBA1h] +
mov ecx edx +
xor ecx eax +
xor ecx esi +
add ecx ebx +
mov ebx edi +
ror ebx 1Bh +
add ebx ecx +
mov ecx [esp+98h+var_84] +
ror esi 2 +
xor ecx ebp +
mov ebp edi +
mov [esp+98h+var_5C] ecx +
mov ecx [esp+98h+var_6C] +
xor [esp+98h+var_5C] ecx +
mov ecx [esp+98h+var_90] +
xor [esp+98h+var_5C] ecx +
ror [esp+98h+var_5C] 1Fh +
mov ecx [esp+98h+var_5C] +
lea ecx [eax+ecx-70E44324h] +
mov eax ebx +
ror eax 1Bh +
add ecx eax +
mov eax edi +
or eax esi +
and ebp esi +
and eax edx +
or eax ebp +
mov ebp [esp+98h+var_88] +
xor ebp [esp+98h+var_80] +
add ecx eax +
mov eax [esp+98h+var_98] +
ror edi 2 +
mov [esp+98h+var_88] ebp +
xor [esp+98h+var_88] eax +
mov eax [esp+98h+var_60] +
xor [esp+98h+var_88] eax +
mov eax ebx +
ror [esp+98h+var_88] 1Fh +
or eax edi +
mov ebp [esp+98h+var_88] +
and eax esi +
lea edx [edx+ebp-70E44324h] +
mov ebp ebx +
and ebp edi +
or eax ebp +
mov ebp [esp+98h+var_84] +
xor ebp [esp+98h+var_7C] +
add edx eax +
mov eax ecx +
ror eax 1Bh +
add edx eax +
mov eax [esp+98h+var_68] +
mov [esp+98h+var_84] ebp +
mov ebp [esp+98h+var_8C] +
ror ebx 2 +
xor [esp+98h+var_84] eax +
xor [esp+98h+var_84] ebp +
mov ebp ecx +
ror [esp+98h+var_84] 1Fh +
and ebp ebx +
mov eax [esp+98h+var_84] +
lea esi [esi+eax-70E44324h] +
mov eax edx +
ror eax 1Bh +
add esi eax +
mov eax ecx +
or eax ebx +
and eax edi +
or eax ebp +
mov ebp [esp+98h+var_80] +
xor ebp [esp+98h+var_78] +
add esi eax +
mov eax [esp+98h+var_5C] +
ror ecx 2 +
mov [esp+98h+var_80] ebp +
mov ebp [esp+98h+var_94] +
xor [esp+98h+var_80] ebp +
xor [esp+98h+var_80] eax +
mov eax edx +
ror [esp+98h+var_80] 1Fh +
or eax ecx +
mov ebp [esp+98h+var_80] +
and eax ebx +
lea edi [edi+ebp-70E44324h] +
mov ebp edx +
and ebp ecx +
or eax ebp +
mov ebp [esp+98h+var_7C] +
xor ebp [esp+98h+var_74] +
add edi eax +
mov eax esi +
ror eax 1Bh +
add edi eax +
mov eax [esp+98h+var_64] +
mov [esp+98h+var_7C] ebp +
mov ebp [esp+98h+var_88] +
ror edx 2 +
xor [esp+98h+var_7C] eax +
mov eax edi +
xor [esp+98h+var_7C] ebp +
ror [esp+98h+var_7C] 1Fh +
mov ebp [esp+98h+var_7C] +
ror eax 1Bh +
lea ebx [ebx+ebp-70E44324h] +
mov ebp esi +
add ebx eax +
mov eax esi +
or eax edx +
and ebp edx +
and eax ecx +
or eax ebp +
mov ebp [esp+98h+var_78] +
xor ebp [esp+98h+var_70] +
add ebx eax +
mov eax [esp+98h+var_84] +
ror esi 2 +
mov [esp+98h+var_78] ebp +
mov ebp [esp+98h+var_90] +
xor [esp+98h+var_78] ebp +
mov ebp edi +
xor [esp+98h+var_78] eax +
and ebp esi +
ror [esp+98h+var_78] 1Fh +
mov eax [esp+98h+var_78] +
lea ecx [ecx+eax-70E44324h] +
mov eax edi +
or eax esi +
and eax edx +
or eax ebp +
mov ebp ebx +
add ecx eax +
mov eax [esp+98h+var_60] +
ror ebp 1Bh +
add ecx ebp +
mov ebp [esp+98h+var_74] +
ror edi 2 +
xor ebp [esp+98h+var_6C] +
mov [esp+98h+var_74] ebp +
mov ebp [esp+98h+var_80] +
xor [esp+98h+var_74] eax +
xor [esp+98h+var_74] ebp +
mov ebp ebx +
ror [esp+98h+var_74] 1Fh +
and ebp edi +
mov eax [esp+98h+var_74] +
lea edx [edx+eax-70E44324h] +
mov eax ecx +
ror eax 1Bh +
add edx eax +
mov eax ebx +
or eax edi +
and eax esi +
or eax ebp +
mov ebp [esp+98h+var_70] +
xor ebp [esp+98h+var_98] +
add edx eax +
mov eax [esp+98h+var_8C] +
ror ebx 2 +
mov [esp+98h+var_70] ebp +
xor [esp+98h+var_70] eax +
mov eax [esp+98h+var_7C] +
xor [esp+98h+var_70] eax +
mov eax ecx +
ror [esp+98h+var_70] 1Fh +
or eax ebx +
mov ebp [esp+98h+var_70] +
and eax edi +
lea esi [esi+ebp-70E44324h] +
mov ebp ecx +
and ebp ebx +
or eax ebp +
mov ebp edx +
add esi eax +
mov eax [esp+98h+var_5C] +
ror ebp 1Bh +
add esi ebp +
mov ebp [esp+98h+var_6C] +
xor ebp [esp+98h+var_68] +
ror ecx 2 +
mov [esp+98h+var_6C] ebp +
xor [esp+98h+var_6C] eax +
mov eax [esp+98h+var_78] +
xor [esp+98h+var_6C] eax +
mov eax esi +
ror [esp+98h+var_6C] 1Fh +
mov ebp [esp+98h+var_6C] +
ror eax 1Bh +
lea edi [edi+ebp-70E44324h] +
mov ebp edx +
add edi eax +
mov eax edx +
or eax ecx +
and ebp ecx +
and eax ebx +
or eax ebp +
mov ebp [esp+98h+var_98] +
xor ebp [esp+98h+var_94] +
add edi eax +
ror edx 2 +
mov [esp+98h+var_98] ebp +
mov ebp [esp+98h+var_88] +
xor [esp+98h+var_98] ebp +
mov ebp [esp+98h+var_74] +
xor [esp+98h+var_98] ebp +
mov ebp esi +
ror [esp+98h+var_98] 1Fh +
and ebp edx +
mov eax [esp+98h+var_98] +
lea ebx [ebx+eax-70E44324h] +
mov eax esi +
or eax edx +
and eax ecx +
or eax ebp +
mov ebp edi +
add ebx eax +
mov eax [esp+98h+var_84] +
ror ebp 1Bh +
add ebx ebp +
mov ebp [esp+98h+var_68] +
xor ebp [esp+98h+var_64] +
ror esi 2 +
mov [esp+98h+var_68] ebp +
mov ebp edi +
xor [esp+98h+var_68] eax +
and ebp esi +
mov eax [esp+98h+var_70] +
xor [esp+98h+var_68] eax +
ror [esp+98h+var_68] 1Fh +
mov eax [esp+98h+var_68] +
lea ecx [ecx+eax-70E44324h] +
mov eax ebx +
ror eax 1Bh +
add ecx eax +
mov eax edi +
or eax esi +
and eax edx +
or eax ebp +
mov ebp [esp+98h+var_94] +
xor ebp [esp+98h+var_90] +
add ecx eax +
ror edi 2 +
mov eax ebx +
or eax edi +
mov [esp+98h+var_94] ebp +
mov ebp [esp+98h+var_80] +
and eax esi +
xor [esp+98h+var_94] ebp +
mov ebp [esp+98h+var_6C] +
xor [esp+98h+var_94] ebp +
ror [esp+98h+var_94] 1Fh +
mov ebp [esp+98h+var_94] +
lea edx [edx+ebp-70E44324h] +
mov ebp ebx +
and ebp edi +
or eax ebp +
mov ebp ecx +
add edx eax +
mov eax [esp+98h+var_7C] +
ror ebp 1Bh +
add edx ebp +
mov ebp [esp+98h+var_64] +
xor ebp [esp+98h+var_60] +
ror ebx 2 +
mov [esp+98h+var_64] ebp +
mov ebp ecx +
xor [esp+98h+var_64] eax +
and ebp ebx +
mov eax [esp+98h+var_98] +
xor [esp+98h+var_64] eax +
ror [esp+98h+var_64] 1Fh +
mov eax [esp+98h+var_64] +
lea esi [esi+eax-70E44324h] +
mov eax edx +
ror eax 1Bh +
add esi eax +
mov eax ecx +
or eax ebx +
and eax edi +
or eax ebp +
mov ebp [esp+98h+var_90] +
xor ebp [esp+98h+var_8C] +
add esi eax +
mov eax [esp+98h+var_78] +
ror ecx 2 +
mov [esp+98h+var_90] ebp +
xor [esp+98h+var_90] eax +
mov eax [esp+98h+var_68] +
xor [esp+98h+var_90] eax +
mov eax edx +
ror [esp+98h+var_90] 1Fh +
or eax ecx +
mov ebp [esp+98h+var_90] +
and eax ebx +
lea edi [edi+ebp-70E44324h] +
mov ebp edx +
and ebp ecx +
or eax ebp +
mov ebp esi +
add edi eax +
mov eax [esp+98h+var_74] +
ror ebp 1Bh +
add edi ebp +
mov ebp [esp+98h+var_60] +
xor ebp [esp+98h+var_5C] +
ror edx 2 +
mov [esp+98h+var_60] ebp +
mov ebp [esp+98h+var_94] +
xor [esp+98h+var_60] eax +
xor [esp+98h+var_60] ebp +
mov ebp esi +
ror [esp+98h+var_60] 1Fh +
and ebp edx +
mov eax [esp+98h+var_60] +
lea ebx [ebx+eax-70E44324h] +
mov eax edi +
ror eax 1Bh +
add ebx eax +
mov eax esi +
or eax edx +
and eax ecx +
or eax ebp +
mov ebp [esp+98h+var_8C] +
xor ebp [esp+98h+var_88] +
add ebx eax +
mov eax [esp+98h+var_64] +
ror esi 2 +
mov [esp+98h+var_8C] ebp +
mov ebp [esp+98h+var_70] +
xor [esp+98h+var_8C] ebp +
xor [esp+98h+var_8C] eax +
mov eax edi +
ror [esp+98h+var_8C] 1Fh +
or eax esi +
mov ebp [esp+98h+var_8C] +
and eax edx +
lea ecx [ecx+ebp-70E44324h] +
mov ebp edi +
and ebp esi +
or eax ebp +
mov ebp ebx +
add ecx eax +
mov eax [esp+98h+var_6C] +
ror ebp 1Bh +
add ecx ebp +
mov ebp [esp+98h+var_5C] +
xor ebp [esp+98h+var_84] +
ror edi 2 +
mov [esp+98h+var_5C] ebp +
mov ebp [esp+98h+var_90] +
xor [esp+98h+var_5C] eax +
xor [esp+98h+var_5C] ebp +
mov ebp ecx +
ror [esp+98h+var_5C] 1Fh +
mov eax [esp+98h+var_5C] +
ror ebp 1Bh +
lea edx [edx+eax-70E44324h] +
add edx ebp +
mov ebp ebx +
or ebp edi +
mov eax ebp +
mov ebp ebx +
and ebp edi +
and eax esi +
or eax ebp +
mov ebp [esp+98h+var_88] +
add edx eax +
mov eax [esp+98h+var_60] +
ror ebx 2 +
xor ebp [esp+98h+var_80] +
mov [esp+98h+var_88] ebp +
mov ebp [esp+98h+var_98] +
xor [esp+98h+var_88] ebp +
xor [esp+98h+var_88] eax +
mov eax ecx +
ror [esp+98h+var_88] 1Fh +
or eax ebx +
mov ebp [esp+98h+var_88] +
and eax edi +
lea esi [esi+ebp-70E44324h] +
mov ebp ecx +
and ebp ebx +
or eax ebp +
mov ebp edx +
add esi eax +
mov eax [esp+98h+var_68] +
ror ebp 1Bh +
add esi ebp +
mov ebp [esp+98h+var_84] +
xor ebp [esp+98h+var_7C] +
ror ecx 2 +
mov [esp+98h+var_84] ebp +
mov ebp [esp+98h+var_8C] +
xor [esp+98h+var_84] eax +
xor [esp+98h+var_84] ebp +
mov ebp edx +
ror [esp+98h+var_84] 1Fh +
and ebp ecx +
mov eax [esp+98h+var_84] +
lea edi [edi+eax-70E44324h] +
mov eax esi +
ror eax 1Bh +
add edi eax +
mov eax edx +
or eax ecx +
and eax ebx +
or eax ebp +
mov ebp [esp+98h+var_80] +
xor ebp [esp+98h+var_78] +
add edi eax +
mov eax [esp+98h+var_5C] +
ror edx 2 +
mov [esp+98h+var_80] ebp +
mov ebp [esp+98h+var_94] +
xor [esp+98h+var_80] ebp +
xor [esp+98h+var_80] eax +
mov eax esi +
ror [esp+98h+var_80] 1Fh +
or eax edx +
mov ebp [esp+98h+var_80] +
and eax ecx +
lea ebx [ebx+ebp-70E44324h] +
mov ebp esi +
and ebp edx +
or eax ebp +
mov ebp edi +
add ebx eax +
mov eax [esp+98h+var_64] +
ror ebp 1Bh +
add ebx ebp +
mov ebp [esp+98h+var_7C] +
xor ebp [esp+98h+var_74] +
ror esi 2 +
mov [esp+98h+var_7C] ebp +
mov ebp [esp+98h+var_88] +
xor [esp+98h+var_7C] eax +
xor [esp+98h+var_7C] ebp +
ror [esp+98h+var_7C] 1Fh +
mov eax [esp+98h+var_7C] +
mov ebp [esp+98h+var_74] +
xor ebp [esp+98h+var_6C] +
lea ecx [ecx+eax-359D3E2Ah] +
mov eax esi +
xor eax edx +
xor eax edi +
add eax ecx +
mov ecx ebx +
ror edi 2 +
ror ecx 1Bh +
add ecx eax +
mov eax edi +
mov edi [esp+98h+var_78] +
xor edi [esp+98h+var_70] +
mov [esp+98h+var_74] ebp +
mov [esp+98h+var_78] edi +
mov edi [esp+98h+var_90] +
xor [esp+98h+var_78] edi +
mov edi [esp+98h+var_84] +
xor [esp+98h+var_78] edi +
ror [esp+98h+var_78] 1Fh +
mov edi [esp+98h+var_78] +
lea edi [edx+edi-359D3E2Ah] +
mov edx eax +
xor edx esi +
xor edx ebx +
add edx edi +
mov edi ecx +
ror edi 1Bh +
add edi edx +
mov edx [esp+98h+var_60] +
xor [esp+98h+var_74] edx +
mov edx [esp+98h+var_80] +
ror ebx 2 +
xor [esp+98h+var_74] edx +
ror [esp+98h+var_74] 1Fh +
mov edx [esp+98h+var_74] +
mov ebp [esp+98h+var_70] +
lea esi [esi+edx-359D3E2Ah] +
mov edx ebx +
xor edx eax +
xor edx ecx +
add edx esi +
mov esi edi +
ror esi 1Bh +
add esi edx +
ror ecx 2 +
xor ebp [esp+98h+var_98] +
mov edx ecx +
mov ecx [esp+98h+var_8C] +
mov [esp+98h+var_70] ebp +
mov ebp [esp+98h+var_6C] +
xor [esp+98h+var_70] ecx +
mov ecx [esp+98h+var_7C] +
xor [esp+98h+var_70] ecx +
ror [esp+98h+var_70] 1Fh +
mov ecx [esp+98h+var_70] +
xor ebp [esp+98h+var_68] +
lea ecx [eax+ecx-359D3E2Ah] +
mov eax edx +
xor eax ebx +
xor eax edi +
add eax ecx +
mov ecx esi +
ror ecx 1Bh +
add ecx eax +
mov eax [esp+98h+var_5C] +
mov [esp+98h+var_6C] ebp +
ror edi 2 +
xor [esp+98h+var_6C] eax +
mov eax [esp+98h+var_78] +
xor [esp+98h+var_6C] eax +
mov eax edi +
ror [esp+98h+var_6C] 1Fh +
xor eax edx +
mov ebp [esp+98h+var_6C] +
xor eax esi +
ror esi 2 +
lea ebx [ebx+ebp-359D3E2Ah] +
mov [esp+98h+var_40] ebp +
mov ebp [esp+98h+var_98] +
add eax ebx +
xor ebp [esp+98h+var_94] +
mov ebx ecx +
ror ebx 1Bh +
add ebx eax +
mov eax esi +
mov [esp+98h+var_98] ebp +
mov ebp [esp+98h+var_88] +
xor eax edi +
xor [esp+98h+var_98] ebp +
xor eax ecx +
mov ebp [esp+98h+var_74] +
ror ecx 2 +
xor [esp+98h+var_98] ebp +
ror [esp+98h+var_98] 1Fh +
mov ebp [esp+98h+var_98] +
lea edx [edx+ebp-359D3E2Ah] +
mov [esp+98h+var_3C] ebp +
mov ebp [esp+98h+var_68] +
add eax edx +
xor ebp [esp+98h+var_64] +
mov edx ebx +
xor ebp [esp+98h+var_84] +
xor ebp [esp+98h+var_70] +
ror edx 1Bh +
add edx eax +
mov eax ecx +
ror ebp 1Fh +
xor eax esi +
lea edi [edi+ebp-359D3E2Ah] +
xor eax ebx +
add eax edi +
mov edi edx +
ror edi 1Bh +
add eax edi +
mov edi [esp+98h+var_94] +
xor edi [esp+98h+var_90] +
ror ebx 2 +
mov [esp+98h+var_38] ebp +
mov [esp+98h+var_94] edi +
mov edi [esp+98h+var_80] +
xor [esp+98h+var_94] edi +
mov edi [esp+98h+var_6C] +
xor [esp+98h+var_94] edi +
ror [esp+98h+var_94] 1Fh +
mov edi [esp+98h+var_94] +
mov [esp+98h+var_34] edi +
lea edi [esi+edi-359D3E2Ah] +
mov esi ebx +
xor esi ecx +
xor esi edx +
add esi edi +
mov edi eax +
ror edi 1Bh +
add esi edi +
mov edi [esp+98h+var_64] +
xor edi [esp+98h+var_60] +
ror edx 2 +
mov [esp+98h+var_68] edi +
mov edi [esp+98h+var_7C] +
xor [esp+98h+var_68] edi +
mov edi [esp+98h+var_98] +
xor [esp+98h+var_68] edi +
ror [esp+98h+var_68] 1Fh +
mov edi [esp+98h+var_68] +
mov [esp+98h+var_30] edi +
lea edi [ecx+edi-359D3E2Ah] +
mov ecx edx +
xor ecx ebx +
xor ecx eax +
add ecx edi +
mov edi esi +
ror edi 1Bh +
add ecx edi +
mov edi [esp+98h+var_90] +
xor edi [esp+98h+var_8C] +
ror eax 2 +
mov [esp+98h+var_90] edi +
mov edi [esp+98h+var_78] +
xor [esp+98h+var_90] edi +
xor [esp+98h+var_90] ebp +
ror [esp+98h+var_90] 1Fh +
mov edi [esp+98h+var_90] +
mov [esp+98h+var_2C] edi +
lea edi [ebx+edi-359D3E2Ah] +
mov ebx eax +
xor ebx edx +
xor ebx esi +
add ebx edi +
mov edi ecx +
ror edi 1Bh +
add edi ebx +
mov ebx [esp+98h+var_60] +
xor ebx [esp+98h+var_5C] +
ror esi 2 +
mov [esp+98h+var_64] ebx +
mov ebx [esp+98h+var_74] +
xor [esp+98h+var_64] ebx +
mov ebx [esp+98h+var_94] +
xor [esp+98h+var_64] ebx +
ror [esp+98h+var_64] 1Fh +
mov ebx [esp+98h+var_64] +
mov [esp+98h+var_28] ebx +
lea ebx [edx+ebx-359D3E2Ah] +
mov edx esi +
xor edx eax +
xor edx ecx +
add edx ebx +
mov ebx edi +
ror ebx 1Bh +
add ebx edx +
mov edx [esp+98h+var_8C] +
xor edx [esp+98h+var_88] +
ror ecx 2 +
mov [esp+98h+var_8C] edx +
mov edx [esp+98h+var_70] +
xor [esp+98h+var_8C] edx +
mov edx [esp+98h+var_68] +
xor [esp+98h+var_8C] edx +
ror [esp+98h+var_8C] 1Fh +
mov edx [esp+98h+var_8C] +
mov [esp+98h+var_24] edx +
lea edx [eax+edx-359D3E2Ah] +
mov eax ecx +
xor eax esi +
xor eax edi +
add eax edx +
mov edx ebx +
ror edx 1Bh +
add eax edx +
mov [esp+98h+var_60] eax +
mov eax [esp+98h+var_5C] +
ror edi 2 +
xor eax [esp+98h+var_84] +
xor eax [esp+98h+var_6C] +
xor eax [esp+98h+var_90] +
ror eax 1Fh +
lea edx [esi+eax-359D3E2Ah] +
mov esi edi +
xor esi ecx +
xor esi ebx +
add esi edx +
mov edx [esp+98h+var_60] +
mov [esp+98h+var_20] eax +
ror edx 1Bh +
add esi edx +
mov edx [esp+98h+var_88] +
ror ebx 2 +
xor edx [esp+98h+var_80] +
xor edx [esp+98h+var_98] +
xor edx [esp+98h+var_64] +
ror edx 1Fh +
lea ecx [ecx+edx-359D3E2Ah] +
mov [esp+98h+var_88] ecx +
mov ecx ebx +
xor ecx edi +
xor ecx [esp+98h+var_60] +
add ecx [esp+98h+var_88] +
mov [esp+98h+var_1C] edx +
mov [esp+98h+var_88] ecx +
mov ecx esi +
ror ecx 1Bh +
mov [esp+98h+var_5C] ecx +
mov ecx [esp+98h+var_88] +
add ecx [esp+98h+var_5C] +
mov [esp+98h+var_88] ecx +
mov ecx [esp+98h+var_60] +
ror ecx 2 +
mov [esp+98h+var_60] ecx +
mov ecx [esp+98h+var_84] +
xor ecx [esp+98h+var_7C] +
xor ecx ebp +
xor ecx [esp+98h+var_8C] +
ror ecx 1Fh +
mov [esp+98h+var_18] ecx +
lea ebp [edi+ecx-359D3E2Ah] +
mov edi [esp+98h+var_60] +
xor edi ebx +
xor edi esi +
add edi ebp +
mov ebp [esp+98h+var_88] +
ror esi 2 +
ror ebp 1Bh +
add edi ebp +
mov ebp [esp+98h+var_80] +
xor ebp [esp+98h+var_78] +
xor ebp [esp+98h+var_94] +
xor ebp eax +
mov eax [esp+98h+var_60] +
ror ebp 1Fh +
lea ebx [ebx+ebp-359D3E2Ah] +
mov [esp+98h+var_14] ebp +
xor eax esi +
xor eax [esp+98h+var_88] +
add eax ebx +
mov ebx edi +
ror ebx 1Bh +
add ebx eax +
mov eax [esp+98h+var_88] +
mov [esp+98h+var_94] ebx +
mov ebx [esp+98h+var_60] +
ror eax 2 +
mov [esp+98h+var_88] eax +
mov eax [esp+98h+var_7C] +
xor eax [esp+98h+var_74] +
xor eax [esp+98h+var_68] +
xor eax edx +
mov edx [esp+98h+var_88] +
ror eax 1Fh +
lea ebx [ebx+eax-359D3E2Ah] +
mov [esp+98h+var_10] eax +
xor edx esi +
xor edx edi +
add edx ebx +
mov ebx [esp+98h+var_94] +
ror edi 2 +
ror ebx 1Bh +
add ebx edx +
mov edx [esp+98h+var_78] +
xor edx [esp+98h+var_70] +
xor edx [esp+98h+var_90] +
xor edx ecx +
mov ecx [esp+98h+var_88] +
ror edx 1Fh +
lea esi [esi+edx-359D3E2Ah] +
mov [esp+98h+var_C] edx +
mov edx ecx +
xor edx edi +
xor edx [esp+98h+var_94] +
add edx esi +
mov esi ebx +
ror esi 1Bh +
add esi edx +
mov edx [esp+98h+var_94] +
ror edx 2 +
mov [esp+98h+var_94] edx +
mov edx [esp+98h+var_6C] +
xor edx [esp+98h+var_74] +
xor edx [esp+98h+var_64] +
xor edx ebp +
mov ebp [esp+98h+var_98] +
ror edx 1Fh +
lea ecx [ecx+edx-359D3E2Ah] +
mov [esp+98h+var_8] edx +
mov edx [esp+98h+var_94] +
xor ebp [esp+98h+var_70] +
xor edx edi +
xor edx ebx +
add edx ecx +
mov ecx esi +
ror ecx 1Bh +
add ecx edx +
mov edx [esp+98h+var_8C] +
ror ebx 2 +
xor edx ebp +
mov ebp esi +
xor edx eax +
ror edx 1Fh +
mov [esp+98h+var_4] edx +
mov eax [esp+98h+var_54] +
ror ebp 2 +
lea edx [eax+edx-359D3E2Ah] +
mov eax [esp+98h+var_94] +
add edi edx +
add [esp+98h+var_50] ecx +
add [esp+98h+var_48] eax +
mov edx eax +
xor edx ebx +
xor edx esi +
mov esi ecx +
mov ecx [esp+98h+var_50] +
add edi edx +
mov edx [esp+98h+arg_8] +
ror esi 1Bh +
add esi edi +
add [esp+98h+var_58] ebp +
add [esp+98h+var_4C] ebx +
mov ebx [esp+98h+var_4C] +
mov [edx] esi +
mov [esp+98h+var_54] esi +
mov esi edx +
mov eax esi +
mov esi [esp+98h+var_48] +
mov [edx+4] ecx +
mov ecx [esp+98h+var_58] +
mov [edx+0Ch] ebx +
mov [edx+8] ecx +
mov [eax+10h] esi +
mov eax [esp+98h+var_44] +
cmp eax [esp+98h+arg_0] +
ja loc_4AACC0  +
add esp 98h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov eax [esp+2Ch+arg_4] +
mov ecx [ebx+14h] +
mov [esp+2Ch+var_10] eax +
mov eax [ebx+1Ch] +
cmp eax 38h +
sbb ebp ebp +
and ebp 0FFFFFFC0h +
sub ebp 0FFFFFF80h +
cmp eax 38h +
sbb edx edx +
add ecx eax +
mov esi edx +
mov [esp+2Ch+var_14] edx +
and esi 0FFFFFFF0h +
and [esp+2Ch+var_14] 0FFFFFFC0h +
add esi 1Eh +
add [esp+2Ch+var_14] 78h +
mov [esp+2Ch+var_18] edx +
and [esp+2Ch+var_18] 0FFFFFFF0h +
add [esp+2Ch+var_18] 1Fh +
cmp eax ecx +
mov [ebx+14h] ecx +
jbe loc_4AC060  +
mov edx [ebx+18h] +
lea edi [edx+1] +
mov [ebx+18h] edi +
mov edx ecx +
shr edx 1Dh +
shl edi 3 +
or edi edx +
mov edx [esp+2Ch+var_18] +
bswap edi  +
mov [ebx+esi*4+20h] edi +
lea edi ds:0[ecx*8] +
mov esi edi +
shl ecx 1Bh +
shr esi 18h +
or esi ecx +
mov ecx edi +
and ecx 0FF00h +
shl ecx 8 +
shr edi 8 +
or esi ecx +
and edi 0FF00h +
or esi edi +
mov edi [esp+2Ch+var_14] +
mov [ebx+edx*4+20h] esi +
lea esi [ebx+20h] +
lea edx [esi+eax] +
mov [esp+2Ch+var_2C] edx +
sub edi eax +
mov [esp+2Ch+var_24] edi +
mov [esp+2Ch+var_28] offset aA_1 +
call memcpy  +
mov [esp+2Ch+var_24] ebx +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] esi +
call sub_4AAC30  +
mov eax [esp+2Ch+var_10] +
mov [esp+2Ch+arg_0] ebx +
mov [esp+2Ch+arg_4] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp loc_4AAC00  +
mov edi [ebx+18h] +
jmp loc_4ABFD3  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_8] +
mov ebx [esi+1Ch] +
test ebx ebx +
jnz loc_4AC1C8  +
cmp [esp+1Ch+arg_4] 3Fh +
jbe loc_4AC1B4  +
test byte ptr [esp+1Ch+arg_0] 3 +
jz loc_4AC190  +
cmp [esp+1Ch+arg_4] 40h +
lea ebp [esi+20h] +
jz loc_4AC155  +
mov edi [esp+1Ch+arg_4] +
mov ebx [esp+1Ch+arg_0] +
mov ecx [ebx] +
sub edi 40h +
add ebx 40h +
mov [ebp+0] ecx +
mov ecx [ebx-3Ch] +
mov [ebp+4] ecx +
mov ecx [ebx-38h] +
mov [ebp+8] ecx +
mov ecx [ebx-34h] +
mov [ebp+0Ch] ecx +
mov ecx [ebx-30h] +
mov [ebp+10h] ecx +
mov ecx [ebx-2Ch] +
mov [ebp+14h] ecx +
mov ecx [ebx-28h] +
mov [ebp+18h] ecx +
mov ecx [ebx-24h] +
mov [ebp+1Ch] ecx +
mov ecx [ebx-20h] +
mov [ebp+20h] ecx +
mov ecx [ebx-1Ch] +
mov [ebp+24h] ecx +
mov ecx [ebx-18h] +
mov [ebp+28h] ecx +
mov ecx [ebx-14h] +
mov [ebp+2Ch] ecx +
mov ecx [ebx-10h] +
mov [ebp+30h] ecx +
mov ecx [ebx-0Ch] +
mov [ebp+34h] ecx +
mov ecx [ebx-8] +
mov [ebp+38h] ecx +
mov ecx [ebx-4] +
mov [ebp+3Ch] ecx +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_18] 40h +
mov [esp+1Ch+var_1C] ebp +
call sub_4AAC30  +
cmp edi 40h +
ja loc_4AC0B2  +
mov eax [esp+1Ch+arg_4] +
mov edx [esp+1Ch+arg_4] +
sub eax 41h +
shr eax 6 +
lea ecx [eax+1] +
shl ecx 6 +
shl eax 6 +
add [esp+1Ch+arg_0] ecx +
neg eax  +
lea eax [edx+eax-40h] +
mov [esp+1Ch+arg_4] eax +
mov edx [esp+1Ch+arg_4] +
mov ebx [esi+1Ch] +
mov [esp+1Ch+var_14] edx +
mov edx [esp+1Ch+arg_0] +
lea eax [ebp+ebx+0] +
mov [esp+1Ch+var_1C] eax +
mov [esp+1Ch+var_18] edx +
call memcpy  +
mov edi [esp+1Ch+arg_4] +
add edi ebx +
cmp edi 3Fh +
ja loc_4AC210  +
mov [esi+1Ch] edi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx [esp+1Ch+arg_4] +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] esi +
and ebx 0FFFFFFC0h +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] eax +
call sub_4AAC30  +
add [esp+1Ch+arg_0] ebx +
and [esp+1Ch+arg_4] 3Fh +
mov eax [esp+1Ch+arg_4] +
test eax eax +
jnz loc_4AC275  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx 80h +
sub edx ebx +
cmp [esp+1Ch+arg_4] edx +
cmovbe edx [esp+1Ch+arg_4] +
lea ebp [esi+20h] +
lea eax [ebp+ebx+0] +
mov edi edx +
mov [esp+1Ch+var_14] edx +
mov edx [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
mov [esp+1Ch+var_18] edx +
call memcpy  +
mov eax [esi+1Ch] +
add eax edi +
cmp eax 40h +
mov [esi+1Ch] eax +
ja loc_4AC240  +
add [esp+1Ch+arg_0] edi +
sub [esp+1Ch+arg_4] edi +
jmp loc_4AC086  +
mov [esp+1Ch+var_14] esi +
sub edi 40h +
mov [esp+1Ch+var_18] 40h +
mov [esp+1Ch+var_1C] ebp +
call sub_4AAC30  +
lea eax [esi+60h] +
mov [esp+1Ch+var_14] edi +
mov [esp+1Ch+var_18] eax +
mov [esp+1Ch+var_1C] ebp +
call memcpy  +
jmp loc_4AC183  +
and eax 0FFFFFFC0h +
add ebx edi +
mov [esp+1Ch+var_18] eax +
and ebx 0FFFFFFC0h +
mov [esp+1Ch+var_14] esi +
add ebx ebp +
mov [esp+1Ch+var_1C] ebp +
call sub_4AAC30  +
mov eax [esi+1Ch] +
and eax 3Fh +
mov [esi+1Ch] eax +
mov [esp+1Ch+var_14] eax +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_1C] ebp +
call memcpy  +
jmp loc_4AC202  +
lea ebp [esi+20h] +
jmp loc_4AC155  +
***
push ebx  +
sub esp 0B8h +
mov eax [esp+0C4h] +
lea ebx [esp+10h] +
mov [esp+8] ebx +
mov dword ptr [esp+10h] 67452301h +
mov dword ptr [esp+14h] 0EFCDAB89h +
mov [esp+4] eax +
mov eax [esp+0C0h] +
mov dword ptr [esp+18h] 98BADCFEh +
mov dword ptr [esp+1Ch] 10325476h +
mov dword ptr [esp+20h] 0C3D2E1F0h +
mov [esp] eax +
mov dword ptr [esp+28h] 0 +
mov dword ptr [esp+24h] 0 +
mov dword ptr [esp+2Ch] 0 +
call sub_4AC070  +
mov eax [esp+0C8h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_4ABF70  +
add esp 0B8h +
pop ebx  +
retn   +
***
push ebp  +
mov eax 110Ch +
push edi  +
push esi  +
push ebx  +
call sub_4BB070  +
xor ebp ebp +
mov edi 1000h +
sub esp eax +
mov ebx [esp+1120h] +
lea esi [esp+0B8h] +
mov dword ptr [esp+18h] 67452301h +
mov dword ptr [esp+1Ch] 0EFCDAB89h +
mov dword ptr [esp+20h] 98BADCFEh +
mov dword ptr [esp+24h] 10325476h +
mov dword ptr [esp+28h] 0C3D2E1F0h +
mov dword ptr [esp+30h] 0 +
mov dword ptr [esp+2Ch] 0 +
mov dword ptr [esp+34h] 0 +
mov eax edi +
sub eax ebp +
mov [esp+8] eax +
lea eax [esi+ebp] +
mov [esp+0Ch] ebx +
mov dword ptr [esp+4] 1 +
mov [esp] eax +
call fread  +
add ebp eax +
cmp ebp 1000h +
jz loc_4AC3D6  +
test eax eax +
mov [esp] ebx +
jz loc_4AC3F2  +
call feof  +
test eax eax +
jz loc_4AC375  +
test ebp ebp +
lea ebx [esp+18h] +
jnz loc_4AC40A  +
mov eax [esp+1124h] +
mov [esp] ebx +
mov [esp+4] eax +
call sub_4ABF70  +
xor eax eax +
add esp 110Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
lea eax [esp+18h] +
xor ebp ebp +
mov [esp+8] eax +
mov dword ptr [esp+4] 1000h +
mov [esp] esi +
call sub_4AAC30  +
jmp loc_4AC375  +
***
call ferror  +
mov ecx eax +
mov eax 1 +
test ecx ecx +
jnz loc_4AC3CB  +
test ebp ebp +
lea ebx [esp+18h] +
jz loc_4AC3B6  +
mov [esp+8] ebx +
mov [esp+4] ebp +
mov [esp] esi +
call sub_4AC070  +
jmp loc_4AC3B6  +
***
mov ebx [esp+18h+arg_0] +
mov [esp+18h+var_18] ebx +
call strerror  +
test eax eax +
jz loc_4AC440  +
add esp 18h +
pop ebx  +
retn   +
mov [esp+18h+var_10] ebx +
mov [esp+18h+var_14] offset aUndocumentedEr +
mov [esp+18h+var_18] offset unk_5142C0 +
call sprintf  +
add esp 18h +
mov eax offset unk_5142C0 +
pop ebx  +
retn   +
***
mov eax ds:dword_514300 +
test eax eax +
jz loc_4AC480  +
retn   +
sub esp 1Ch +
mov [esp+1Ch+var_1C] 105h +
call sub_4A05F0  +
mov [esp+1Ch+var_18] 105h +
mov [esp+1Ch+var_1C] eax +
call _getcwd  +
mov ds:dword_514300 eax +
add esp 1Ch +
retn   +
***
sub esp 14h +
mov ebx [esp+14h+arg_4] +
mov [esp+14h+var_14] ebx +
call strlen  +
mov [esp+14h+var_10] ebx +
mov esi eax +
lea eax [eax+1] +
mov [esp+14h+var_C] eax +
mov eax [esp+14h+arg_0] +
mov [esp+14h+var_14] eax +
call memcpy  +
add esp 14h +
pop ebx  +
add eax esi +
pop esi  +
retn   +
***
cmp edx 4Bh +
ja loc_4AC557  +
push ebp  +
push edi  +
push esi  +
push ebx  +
mov ebx eax +
jmp ds:off_50B5E0[edx*4]  +
test ecx ecx +
jz loc_4AC553  +
mov esi [ebx+14h] +
xor eax eax +
cmp esi [ebx+18h] +
jge loc_4AC542  +
mov ebp [ebx+10h] +
lea edi [esi+esi*2] +
add esi 1 +
mov [ebx+14h] esi +
lea edi [ebp+edi*4+0] +
test edi edi +
jz loc_4AC542  +
mov eax [esp+10h+arg_0] +
mov [edi] edx +
mov [edi+4] ecx +
mov [edi+8] eax +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ecx ecx +
jz loc_4AC553  +
mov eax [esp+10h+arg_0] +
test eax eax +
jnz loc_4AC516  +
xor eax eax +
jmp loc_4AC542  +
xor eax eax +
retn   +
***
push ebx  +
mov ebx [eax+14h] +
cmp ebx [eax+18h] +
jge loc_4AC586  +
mov esi [eax+10h] +
lea edi [ebx+ebx*2] +
add ebx 1 +
mov [eax+14h] ebx +
lea esi [esi+edi*4] +
test esi esi +
jz loc_4AC586  +
test edx edx +
jz loc_4AC586  +
test ecx ecx +
jnz loc_4AC590  +
pop ebx  +
xor eax eax +
pop esi  +
pop edi  +
retn   +
mov dword ptr [esi] 0 +
mov eax esi +
mov [esi+4] edx +
mov [esi+8] ecx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
mov edi ecx +
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 4 +
mov eax [eax+0Ch] +
movzx eax byte ptr [eax] +
jmp loc_4AC605  +
test dl dl +
jnz loc_4AC611  +
cmp al 4Bh +
jnz loc_4AC650  +
add dword ptr [ebx+0Ch] 1 +
cmp edi 1 +
sbb edx edx +
add dword ptr [ebx+30h] 6 +
and edx 0FFFFFFFDh +
add edx 1Eh +
xor ecx ecx +
mov eax ebx +
mov [esp+10h+var_10] 0 +
call sub_4AC500  +
test eax eax +
mov [esi] eax +
jz loc_4AC645  +
lea esi [eax+4] +
mov eax [ebx+0Ch] +
movzx eax byte ptr [eax] +
cmp al 72h +
setz dl  +
cmp al 56h +
setz cl  +
jnz loc_4AC5C7  +
add dword ptr [ebx+0Ch] 1 +
test dl dl +
jz loc_4AC630  +
cmp edi 1 +
sbb edx edx +
and edx 0FFFFFFFDh +
add edx 1Ch +
add dword ptr [ebx+30h] 9 +
jmp loc_4AC5E6  +
test cl cl +
jz loc_4AC5D7  +
cmp edi 1 +
sbb edx edx +
and edx 0FFFFFFFDh +
add edx 1Dh +
add dword ptr [ebx+30h] 9 +
jmp loc_4AC5E6  +
add esp 4 +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jnz loc_4AC693  +
cmp al 46h +
jnz loc_4AC693  +
cmp esi ebp +
jnz loc_4AC67A  +
lea esi [esi+0] +
jmp loc_4AC693  +
cmp eax 1Bh +
jz loc_4AC6A0  +
cmp eax 19h +
jnz loc_4AC673  +
mov dword ptr [ebp+0] 1Ch +
add ebp 4 +
cmp esi ebp +
jz loc_4AC693  +
mov ebp [ebp+0] +
mov eax [ebp+0] +
cmp eax 1Ah +
jnz loc_4AC662  +
mov dword ptr [ebp+0] 1Dh +
add ebp 4 +
cmp esi ebp +
jnz loc_4AC67A  +
add esp 4 +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [ebp+0] 1Eh +
jmp loc_4AC673  +
***
sub esp 4 +
mov ecx [ebx+0Ch] +
mov eax edx +
cmp byte ptr [ecx] 52h +
setz dl  +
cmp byte ptr [ecx] 4Fh +
jnz loc_4AC6F0  +
test dl dl +
jnz loc_4AC6F4  +
add dword ptr [ebx+30h] 3 +
mov edx 20h +
add ecx 1 +
mov [ebx+0Ch] ecx +
mov ecx eax +
mov eax ebx +
mov [esp+4+var_4] 0 +
call sub_4AC500  +
add esp 4 +
pop ebx  +
retn   +
test dl dl +
jz loc_4AC6E9  +
add dword ptr [ebx+30h] 2 +
mov edx 1Fh +
jmp loc_4AC6D3  +
***
push esi  +
mov edi edx +
push ebx  +
mov esi eax +
mov ebx ecx +
jz loc_4AC727  +
lea esi [esi+0] +
cmp dword ptr [ebx] 4Bh +
ja loc_4AC727  +
mov ecx [ebx] +
jmp ds:off_50B710[ecx*4]  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_4AC710  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov ebx [ebx+4] +
jmp loc_4AC723  +
mov ecx [ebx+4] +
cmp dword ptr [ecx] 5 +
jnz loc_4AC743  +
add dword ptr [edi] 1 +
mov ecx [ebx+4] +
mov edx edi +
mov eax esi +
call sub_4AC700  +
mov ebx [ebx+8] +
jmp loc_4AC723  +
add dword ptr [esi] 1 +
mov ecx [ebx+4] +
jmp loc_4AC743  +
***
mov ecx [eax+100h] +
cmp ecx 0FFh +
jz loc_4AC790  +
lea ebx [ecx+1] +
mov [eax+100h] ebx +
mov [eax+ecx] dl +
mov [eax+104h] dl +
add esp 28h +
pop ebx  +
retn   +
mov ebx [eax+10Ch] +
mov ecx [eax+108h] +
mov byte ptr [eax+0FFh] 0 +
mov [esp+28h+var_C] edx +
mov [esp+28h+var_20] ebx +
mov ebx 1 +
mov [esp+28h+var_28] eax +
mov [esp+28h+var_10] eax +
mov [esp+28h+var_24] 0FFh +
call ecx  +
mov eax [esp+28h+var_10] +
xor ecx ecx +
mov edx [esp+28h+var_C] +
add dword ptr [eax+120h] 1 +
jmp loc_4AC775  +
***
push esi  +
mov esi eax +
push ebx  +
mov eax [eax] +
movsx ecx byte ptr [eax] +
cmp cl 6Eh +
jz loc_4AC824  +
lea eax [ecx-30h] +
cmp al 9 +
ja loc_4AC833  +
mov eax [esi] +
lea edx [eax+1] +
xor eax eax +
nop   +
lea eax [eax+eax*4] +
mov [esi] edx +
lea eax [ecx+eax*2-30h] +
movsx ecx byte ptr [edx] +
add edx 1 +
lea ebx [ecx-30h] +
cmp bl 9 +
jbe loc_4AC800  +
mov edx eax +
neg edx  +
test edi edi +
pop ebx  +
cmovnz eax edx +
pop esi  +
pop edi  +
retn   +
lea edx [eax+1] +
mov di 1 +
mov [esi] edx +
movsx ecx byte ptr [eax+1] +
jmp loc_4AC7F1  +
xor eax eax +
jmp loc_4AC817  +
***
mov edx [eax+14h] +
cmp edx [eax+18h] +
jge loc_4AC875  +
push ebx  +
mov ecx [eax+10h] +
lea ebx [edx+edx*2] +
add edx 1 +
mov [eax+14h] edx +
lea ebx [ecx+ebx*4] +
test ebx ebx +
jz loc_4AC871  +
mov dword ptr [ebx] 40h +
add eax 0Ch +
call sub_4AC7E0  +
mov [ebx+4] eax +
mov eax ebx +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
xor eax eax +
retn   +
***
mov ebx eax +
movzx eax byte ptr [edx] +
cmp al 5Fh +
jz loc_4AC8A8  +
cmp al 6Eh +
jz loc_4AC8A1  +
lea eax [ebx+0Ch] +
call sub_4AC7E0  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 5Fh +
jz loc_4AC8B2  +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
xor eax eax +
add edx 1 +
mov [ebx+0Ch] edx +
pop ebx  +
retn   +
add eax 1 +
jmp loc_4AC8AA  +
***
mov ebx eax +
mov eax [eax+0Ch] +
cmp byte ptr [eax] 54h +
jz loc_4AC8D1  +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
add eax 1 +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4AC880  +
test eax eax +
js loc_4AC8CC  +
mov ecx [ebx+14h] +
add dword ptr [ebx+28h] 1 +
cmp ecx [ebx+18h] +
jge loc_4AC8CC  +
mov edx [ebx+10h] +
lea esi [ecx+ecx*2] +
add ecx 1 +
mov [ebx+14h] ecx +
lea edx [edx+esi*4] +
test edx edx +
jz loc_4AC8CC  +
mov [edx+4] eax +
mov eax edx +
mov dword ptr [edx] 5 +
pop ebx  +
pop esi  +
retn   +
***
mov edx [eax+0Ch] +
cmp byte ptr [edx] 5Fh +
jz loc_4AC920  +
mov eax 1 +
retn   +
add edx 1 +
add eax 0Ch +
mov [eax] edx +
call sub_4AC7E0  +
not eax  +
shr eax 1Fh +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 10h +
lea eax [eax+0Ch] +
call sub_4AC7E0  +
test eax eax +
mov esi eax +
jle loc_4AC9F4  +
mov edi [ebx+0Ch] +
mov eax [ebx+4] +
sub eax edi +
cmp esi eax +
jg loc_4AC9F8  +
test byte ptr [ebx+8] 4 +
lea eax [edi+esi] +
mov [ebx+0Ch] eax +
jnz loc_4AC9B0  +
cmp esi 9 +
jle loc_4AC997  +
mov [esp+10h+var_8] 8 +
mov [esp+10h+var_C] offset a_global__0 +
mov [esp+10h+var_10] edi +
call memcmp  +
test eax eax +
jz loc_4AC9C0  +
mov ecx esi +
mov edx edi +
mov eax ebx +
call sub_4AC560  +
mov [ebx+2Ch] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp byte ptr [eax] 24h +
jnz loc_4AC976  +
add eax 1 +
mov [ebx+0Ch] eax +
jmp loc_4AC976  +
movzx eax byte ptr [edi+8] +
cmp al 2Eh +
jz loc_4AC9D0  +
cmp al 5Fh +
jz loc_4AC9D0  +
cmp al 24h +
jnz loc_4AC997  +
cmp byte ptr [edi+9] 4Eh +
jnz loc_4AC997  +
mov eax [ebx+30h] +
mov ecx 15h +
mov edx offset aAnonymousNames +
add eax 16h +
sub eax esi +
mov [ebx+30h] eax +
mov eax ebx +
call sub_4AC560  +
jmp loc_4AC9A2  +
xor eax eax +
jmp loc_4AC9A5  +
xor eax eax +
lea esi [esi+0] +
jmp loc_4AC9A2  +
***
mov edi edx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov esi [eax+0Ch] +
mov ebp [eax+2Ch] +
cmp byte ptr [esi] 42h +
jnz loc_4ACA4E  +
add esi 1 +
mov eax ebx +
mov [ebx+0Ch] esi +
call sub_4AC940  +
mov ecx edi +
mov edx 4Ah +
mov [esp+24h+var_24] eax +
mov eax ebx +
call sub_4AC500  +
mov esi [ebx+0Ch] +
cmp byte ptr [esi] 42h +
mov edi eax +
jz loc_4ACA26  +
mov [ebx+2Ch] ebp +
add esp 1Ch +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov eax [eax+0Ch] +
cmp byte ptr [eax] 53h +
jz loc_4ACA80  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov esi edx +
lea edx [eax+1] +
mov [ebx+0Ch] edx +
cmp byte ptr [eax+1] 0 +
jnz loc_4ACAD0  +
xor edx edx +
mov ecx [ebx+8] +
shr ecx 3 +
and ecx 1 +
test esi esi +
jz loc_4ACAAF  +
test cl cl +
jnz loc_4ACAAF  +
mov eax [ebx+0Ch] +
movzx eax byte ptr [eax] +
sub eax 43h +
cmp al 1 +
setbe cl  +
movzx ecx cl +
mov eax offset aT_5 +
cmp dl [eax] +
jz loc_4ACB64  +
add eax 1Ch +
cmp eax offset aSignedChar +
jnz loc_4ACAB7  +
jmp loc_4ACA71  +
lea edx [eax+2] +
mov [ebx+0Ch] edx +
movsx edx byte ptr [eax+1] +
lea eax [edx-30h] +
cmp al 9 +
ja loc_4ACC3A  +
cmp dl 5Fh +
jz loc_4ACB60  +
lea ecx [edx-30h] +
xor eax eax +
cmp cl 9 +
ja loc_4ACB23  +
lea ecx [eax+eax*8] +
lea ecx [edx+ecx*4-30h] +
cmp eax ecx +
ja loc_4ACA71  +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 0 +
jz loc_4ACB38  +
lea edx [eax+1] +
mov [ebx+0Ch] edx +
movsx edx byte ptr [eax] +
cmp dl 5Fh +
jz loc_4ACB40  +
mov eax ecx +
lea ecx [edx-30h] +
cmp cl 9 +
jbe loc_4ACAF4  +
lea ecx [edx-41h] +
cmp cl 19h +
ja loc_4ACA71  +
lea ecx [eax+eax*8] +
lea ecx [edx+ecx*4-37h] +
jmp loc_4ACAFB  +
xor edx edx +
mov eax ecx +
jmp loc_4ACB1B  +
add ecx 1 +
cmp ecx [ebx+20h] +
jnb loc_4ACA71  +
mov eax [ebx+1Ch] +
add dword ptr [ebx+28h] 1 +
mov eax [eax+ecx*4] +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx ecx +
jmp loc_4ACB43  +
mov edi [eax+14h] +
test edi edi +
mov [esp+1Ch+var_14] edi +
jz loc_4ACC2A  +
mov edx [ebx+14h] +
mov ebp [ebx+18h] +
mov edi [eax+18h] +
mov [esp+1Ch+var_18] 0 +
cmp edx ebp +
mov [esp+1Ch+var_10] edi +
jge loc_4ACBB7  +
mov esi [ebx+10h] +
lea edi [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea edi [esi+edi*4] +
test edi edi +
jz loc_4ACBB7  +
mov esi [esp+1Ch+var_14] +
mov dword ptr [edi] 18h +
mov [esp+1Ch+var_18] edi +
mov [edi+4] esi +
mov esi [esp+1Ch+var_10] +
mov [edi+8] esi +
mov edi [esp+1Ch+var_18] +
mov [ebx+2Ch] edi +
test ecx ecx +
jz loc_4ACC32  +
mov esi [eax+0Ch] +
mov ecx [eax+10h] +
add [ebx+30h] ecx +
xor eax eax +
cmp edx ebp +
jge loc_4ACBF0  +
mov eax [ebx+10h] +
lea edi [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+edi*4] +
test eax eax +
jz loc_4ACBF0  +
mov dword ptr [eax] 18h +
mov [eax+4] esi +
mov [eax+8] ecx +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 42h +
jnz loc_4ACA73  +
mov edx eax +
mov eax ebx +
call sub_4ACA10  +
test eax eax +
jz loc_4ACA71  +
mov edx [ebx+20h] +
cmp edx [ebx+24h] +
jge loc_4ACA73  +
mov ecx [ebx+1Ch] +
mov [ecx+edx*4] eax +
add edx 1 +
mov [ebx+20h] edx +
jmp loc_4ACA73  +
mov ebp [ebx+18h] +
mov edx [ebx+14h] +
jmp loc_4ACBBE  +
mov esi [eax+4] +
mov ecx [eax+8] +
jmp loc_4ACBC8  +
cmp dl 5Fh +
jz loc_4ACAE5  +
lea eax [edx-41h] +
cmp al 19h +
jbe loc_4ACAEA  +
nop   +
jmp loc_4ACA90  +
***
push ebx  +
mov ebx eax +
jnz loc_4ACC7E  +
mov eax [eax+0Ch] +
cmp byte ptr [eax] 0 +
jnz loc_4ACC75  +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
lea edx [eax+1] +
mov [ebx+0Ch] edx +
movsx edx byte ptr [eax] +
cmp edx 68h +
jz loc_4ACCB0  +
cmp edx 76h +
jnz loc_4ACC70  +
lea esi [ebx+0Ch] +
mov eax esi +
call sub_4AC7E0  +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jnz loc_4ACC70  +
add eax 1 +
mov [ebx+0Ch] eax +
mov eax esi +
call sub_4AC7E0  +
jmp loc_4ACCB8  +
lea eax [ebx+0Ch] +
call sub_4AC7E0  +
mov edx [ebx+0Ch] +
xor eax eax +
cmp byte ptr [edx] 5Fh +
jnz loc_4ACC72  +
add edx 1 +
mov al 1 +
mov [ebx+0Ch] edx +
jmp loc_4ACC72  +
***
mov ecx [eax+110h] +
test ecx ecx +
jz loc_4ACD17  +
mov eax [ecx+4] +
mov edx [edx] +
mov eax [eax+8] +
test eax eax +
jz loc_4ACD10  +
cmp dword ptr [eax] 2Fh +
jnz loc_4ACD10  +
cmp edx 0 +
jg loc_4ACCFB  +
jmp loc_4ACD07  +
cmp dword ptr [eax] 2Fh +
jnz loc_4ACD10  +
test edx edx +
jz loc_4ACD13  +
mov eax [eax+8] +
sub edx 1 +
test eax eax +
jnz loc_4ACCF2  +
retn   +
jz loc_4ACD13  +
lea esi [esi+0] +
xor eax eax +
retn   +
mov eax [eax+4] +
retn   +
mov dword ptr [eax+118h] 1 +
xor eax eax +
retn   +
***
push ebx  +
mov ebx edx +
sub esp 4 +
test edx edx +
jz loc_4ACD65  +
cmp dword ptr [ebx] 4Ah +
ja loc_4ACD50  +
mov edx [ebx] +
jmp ds:off_50B860[edx*4]  +
mov edx [ebx+4] +
mov eax esi +
call sub_4ACD30  +
test eax eax +
jnz loc_4ACD67  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_4ACD3D  +
xor eax eax +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
lea edx [ebx+4] +
mov eax esi +
call sub_4ACCD0  +
test eax eax +
jz loc_4ACD65  +
cmp dword ptr [eax] 2Fh +
jnz loc_4ACD65  +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_8] +
mov edi [esp+10h+arg_4] +
mov eax [esi+4] +
mov ebx [esi+8] +
lea eax [edi+eax+1] +
cmp eax ebx +
ja loc_4ACDF0  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_4ACDC0  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov eax [esi] +
mov edx [esp+10h+arg_0] +
add eax [esi+4] +
mov [esp+10h+var_8] edi +
mov [esp+10h+var_C] edx +
mov [esp+10h+var_10] eax +
call memcpy  +
mov eax [esi] +
add eax edi +
add eax [esi+4] +
mov byte ptr [eax] 0 +
add [esi+4] edi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx [esi+0Ch] +
test edx edx +
jnz loc_4ACDB3  +
test ebx ebx +
jnz loc_4ACE02  +
cmp eax 2 +
mov bl 2 +
jbe loc_4ACE08  +
add ebx ebx +
cmp eax ebx +
ja loc_4ACE02  +
mov eax [esi] +
mov [esp+10h+var_C] ebx +
mov [esp+10h+var_10] eax +
call realloc  +
test eax eax +
jz loc_4ACE21  +
mov [esi] eax +
mov [esi+8] ebx +
jmp loc_4ACDAC  +
mov eax [esi] +
mov [esp+10h+var_10] eax +
call free  +
mov dword ptr [esi] 0 +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi+8] 0 +
mov dword ptr [esi+0Ch] 1 +
jmp loc_4ACDB3  +
***
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 10h +
mov [esp+14h+var_14] edx +
call strlen  +
test eax eax +
jz loc_4ACED3  +
mov ecx [ebx+100h] +
lea edi [esi+eax] +
jmp loc_4ACE8C  +
lea eax [ecx+1] +
add esi 1 +
cmp esi edi +
mov [ebx+100h] eax +
mov [ebx+ecx] dl +
mov [ebx+104h] dl +
jz loc_4ACED3  +
mov ecx eax +
cmp ecx 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4ACE71  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+14h+var_8] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+14h+var_C] ecx +
mov [esp+14h+var_10] 0FFh +
mov [esp+14h+var_14] ebx +
call eax  +
mov eax 1 +
xor ecx ecx +
add dword ptr [ebx+120h] 1 +
mov edx [esp+14h+var_8] +
jmp loc_4ACE74  +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 30h +
lea esi [esp+30h+var_19] +
mov [esp+30h+var_28] edx +
mov [esp+30h+var_2C] offset unk_50B98C +
mov [esp+30h+var_30] esi +
call sprintf  +
mov [esp+30h+var_30] esi +
call strlen  +
test eax eax +
jz loc_4ACF80  +
mov edx [ebx+100h] +
lea edi [esi+eax] +
jmp loc_4ACF32  +
lea eax [edx+1] +
add esi 1 +
cmp esi edi +
mov [ebx+100h] eax +
mov [ebx+edx] cl +
mov [ebx+104h] cl +
jz loc_4ACF80  +
mov edx eax +
cmp edx 0FFh +
movzx ecx byte ptr [esi] +
jnz loc_4ACF17  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+30h+var_24] ecx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+30h+var_28] edx +
mov [esp+30h+var_2C] 0FFh +
mov [esp+30h+var_30] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
mov ecx [esp+30h+var_24] +
jmp loc_4ACF1A  +
add esp 30h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 8Ch +
test ecx ecx +
mov [esp+98h+var_80] edx +
jz loc_4AD090  +
mov eax [eax+118h] +
test eax eax +
jnz loc_4AD080  +
mov eax [ecx] +
cmp eax 4Bh +
ja loc_4AE533  +
jmp ds:off_50BBF8[eax*4]  +
mov edx [ecx+4] +
xor esi esi +
cmp dword ptr [edx] 27h +
jnz loc_4AD000  +
mov edx [edx+4] +
mov esi [edx+10h] +
cmp esi 1 +
jb loc_4AD000  +
cmp esi 6 +
jbe loc_4AEE22  +
cmp esi 7 +
jnz loc_4AD000  +
mov edx [ecx+8] +
mov ecx [edx] +
test ecx ecx +
jnz loc_4AD000  +
cmp dword ptr [edx+8] 1 +
jz loc_4AF25E  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AEDD7  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov edx [esp+98h+var_80] +
mov byte ptr [ebx+eax] 28h +
mov eax ebx +
mov byte ptr [ebx+104h] 28h +
mov ecx [ebp+4] +
call sub_4AF330  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AEDA0  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 29h +
mov byte ptr [ebx+104h] 29h +
cmp dword ptr [ebp+0] 3Ch +
jz loc_4AEFA2  +
cmp esi 8 +
jz loc_4AEF77  +
mov ecx [ebp+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
lea esi [esi+0] +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [ebx+118h] 1 +
add esp 8Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [ecx+4] +
mov edx edi +
call sub_4AF330  +
mov eax ebx +
mov edx offset aClone +
call sub_4ACE50  +
mov ecx [ebp+8] +
mov edx edi +
mov eax ebx +
call sub_4AF330  +
mov edx 5Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [ecx+4] +
mov edx edi +
call sub_4AF330  +
mov eax ebx +
mov edx offset aAbi +
call sub_4ACE50  +
mov ecx [ebp+8] +
mov edx edi +
mov eax ebx +
call sub_4AF330  +
mov edx 5Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov edx [ecx+4] +
mov eax ebx +
call sub_4ACD30  +
test eax eax +
jz loc_4AF13B  +
xor esi esi +
cmp dword ptr [eax] 2Fh +
jnz loc_4AE752  +
mov edx [eax+4] +
test edx edx +
jz loc_4AE752  +
mov eax [eax+8] +
add esi 1 +
test eax eax +
jnz loc_4AD128  +
mov eax [ebp+4] +
mov [esp+98h+var_78] eax +
lea eax [esi-1] +
xor edi edi +
mov [esp+98h+var_74] eax +
mov ecx [esp+98h+var_78] +
mov eax ebx +
mov edx [esp+98h+var_80] +
mov [ebx+11Ch] edi +
call sub_4AF330  +
cmp [esp+98h+var_74] edi +
jle loc_4AE574  +
mov eax [ebx+100h] +
mov ebp offset asc_50BB26 +
jmp loc_4AD1A5  +
lea ecx [eax+1] +
add ebp 1 +
cmp ebp (offset asc_50BB26+2) +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE574  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [ebp+0] +
jnz loc_4AD182  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AD185  +
mov eax [ebx+100h] +
mov esi offset aNonTransaction +
jmp loc_4AD223  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BB11h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE627  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AD200  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AD203  +
mov eax ebx +
mov edx offset aUnnamedType +
call sub_4ACE50  +
mov edx [ebp+4] +
mov eax ebx +
add edx 1 +
call sub_4ACEE0  +
mov edx 7Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aLambda +
call sub_4ACE50  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
mov eax ebx +
mov edx offset asc_50BBDA +
call sub_4ACE50  +
mov edx [ebp+8] +
mov eax ebx +
add edx 1 +
call sub_4ACEE0  +
mov edx 7Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aGlobalDestru_0 +
call sub_4ACE50  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aGlobalConstr_0 +
call sub_4ACE50  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aDecltype +
call sub_4ACE50  +
mov edx [esp+98h+var_80] +
mov eax ebx +
mov ecx [ebp+4] +
call sub_4AF330  +
mov edx 29h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov edx [ecx+4] +
mov eax ebx +
call sub_4ACEE0  +
jmp loc_4AD080  +
mov eax [ebx+100h] +
mov esi offset aTransactionClo +
jmp loc_4AD383  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BAF6h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE64D  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AD360  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AD363  +
mov eax [ebx+100h] +
mov edx [ecx+4] +
cmp eax 0FFh +
jz loc_4AECFF  +
lea ecx [eax+1] +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jmp loc_4AD080  +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [ecx+4] +
mov edx edi +
call sub_4AF330  +
mov ecx [ebp+8] +
mov edx edi +
mov eax ebx +
call sub_4AF330  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aJavaResource +
call sub_4ACE50  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov eax [ecx+8] +
cmp dword ptr [eax] 39h +
jnz loc_4AD090  +
mov edx [eax+8] +
cmp dword ptr [edx] 3Ah +
jnz loc_4AD090  +
mov eax [eax+4] +
mov edi offset aQu +
mov ebp [ecx+4] +
mov ecx 3 +
mov [esp+98h+var_7C] eax +
mov eax [edx+4] +
mov [esp+98h+var_78] eax +
mov eax [edx+8] +
mov [esp+98h+var_74] eax +
mov eax [ebp+4] +
mov esi [eax] +
cmps   +
jz loc_4AF0CF  +
mov eax ebx +
mov edx offset aNew +
call sub_4ACE50  +
mov eax [esp+98h+var_7C] +
cmp dword ptr [eax+4] 0 +
jz loc_4AD4B9  +
mov edx [esp+98h+var_80] +
mov ecx eax +
mov eax ebx +
call sub_4B05C0  +
mov edx 20h +
mov eax ebx +
call sub_4AC760  +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [esp+98h+var_78] +
mov edx edi +
call sub_4AF330  +
mov ecx [esp+98h+var_74] +
test ecx ecx +
jz loc_4AD080  +
mov edx edi +
mov eax ebx +
call sub_4B05C0  +
jmp loc_4AD080  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov eax [ecx+8] +
cmp dword ptr [eax] 37h +
jnz loc_4AD090  +
mov edi [ecx+4] +
mov esi [edi+4] +
mov [esp+98h+var_7C] edi +
mov edx [esi] +
cmp byte ptr [edx+1] 63h +
jz loc_4AEFDF  +
mov edi [esp+98h+var_7C] +
cmp dword ptr [edi] 31h +
jz loc_4AE542  +
mov esi edx +
mov ecx 3 +
mov edi offset aCl +
cmps   +
mov ecx [eax+4] +
jnz loc_4AD53E  +
cmp dword ptr [ecx] 3 +
jz loc_4AF116  +
mov edx [esp+98h+var_80] +
mov eax ebx +
call sub_4B05C0  +
mov eax [ebp+4] +
mov ecx 3 +
mov edi offset aIx +
mov edx [eax+4] +
mov [esp+98h+var_7C] eax +
mov edx [edx] +
mov esi edx +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jz loc_4AF08D  +
mov ecx 3 +
mov esi edx +
mov edi offset aCl +
cmps   +
jnz loc_4AF0BB  +
mov eax [ebp+8] +
mov edx [esp+98h+var_80] +
mov ecx [eax+8] +
mov eax ebx +
call sub_4B05C0  +
mov eax [ebp+4] +
cmp dword ptr [eax] 31h +
jnz loc_4AD080  +
mov eax [eax+4] +
cmp dword ptr [eax+8] 1 +
jnz loc_4AD080  +
mov eax [eax+4] +
cmp byte ptr [eax] 3Eh +
jnz loc_4AD080  +
mov edx 29h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov eax [ecx+4] +
mov edi [ecx+8] +
mov [esp+98h+var_78] eax +
mov eax [eax] +
mov [esp+98h+var_7C] edi +
cmp eax 31h +
jz loc_4AEA9E  +
cmp eax 33h +
jz loc_4AEB6C  +
mov ecx [esp+98h+var_78] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4B0500  +
mov ecx [esp+98h+var_7C] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4B05C0  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aOperator_1 +
call sub_4ACE50  +
mov edx [esp+98h+var_80] +
lea ecx [ebp+4] +
mov eax ebx +
call sub_4B0280  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aOperator_1 +
call sub_4ACE50  +
mov ecx [ebp+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ebp [ecx+4] +
mov eax ebx +
mov edx offset aOperator_2 +
mov edi [ebp+8] +
call sub_4ACE50  +
mov esi [ebp+4] +
movzx eax byte ptr [esi] +
sub eax 61h +
cmp al 19h +
jbe loc_4AE8CA  +
xor eax eax +
cmp byte ptr [esi+edi-1] 20h +
setz al  +
sub edi eax +
jz loc_4AD080  +
mov eax [ebx+100h] +
add edi esi +
jmp loc_4AD6B1  +
lea ecx [eax+1] +
add esi 1 +
cmp esi edi +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AD080  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AD692  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_80] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_80] +
jmp loc_4AD695  +
mov ecx [ecx+4] +
mov esi [ebp+8] +
test ecx ecx +
jz loc_4AD70C  +
mov edx [esp+98h+var_80] +
mov eax ebx +
call sub_4AF330  +
mov eax ebx +
mov edx 7Bh +
call sub_4AC760  +
mov edx [esp+98h+var_80] +
mov eax ebx +
mov ecx esi +
call sub_4AF330  +
mov edx 7Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov ecx [ecx+4] +
test ecx ecx +
jz loc_4AD748  +
mov edx [esp+98h+var_80] +
mov eax ebx +
call sub_4AF330  +
mov eax [ebp+8] +
test eax eax +
jz loc_4AD080  +
mov eax [ebx+100h] +
cmp eax 0FDh +
ja loc_4AEB9B  +
mov edx offset asc_50BB26 +
mov eax ebx +
call sub_4ACE50  +
mov ecx [ebp+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
mov esi [ebx+120h] +
mov edi [ebx+100h] +
call sub_4AF330  +
cmp [ebx+120h] esi +
jnz loc_4AD080  +
mov eax [ebx+100h] +
cmp eax edi +
jnz loc_4AD080  +
sub eax 2 +
mov [ebx+100h] eax +
jmp loc_4AD080  +
cmp word ptr [ecx+0Ah] 0 +
jnz loc_4AE8DE  +
mov ecx [ebp+4] +
cmp dword ptr [ecx+4] offset off_50C720 +
jz loc_4AD7E0  +
mov edx [esp+98h+var_80] +
mov eax ebx +
call sub_4AF330  +
mov edx 20h +
mov eax ebx +
call sub_4AC760  +
cmp word ptr [ebp+8] 0 +
jz loc_4AE81C  +
mov edx offset a_accum +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
mov ecx [ecx+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4B0500  +
jmp loc_4AD080  +
mov eax [ebx+114h] +
mov [esp+98h+var_54] ecx +
mov edx [esp+98h+var_80] +
mov [esp+98h+var_50] 0 +
mov [esp+98h+var_58] eax +
lea eax [esp+98h+var_58] +
mov [ebx+114h] eax +
mov eax [ebx+110h] +
mov ecx [ecx+8] +
mov [esp+98h+var_4C] eax +
mov eax ebx +
call sub_4AF330  +
mov eax [esp+98h+var_50] +
test eax eax +
jnz loc_4AD85C  +
mov edx [esp+98h+var_80] +
mov ecx ebp +
mov eax ebx +
call sub_4AF370  +
mov eax [esp+98h+var_58] +
mov [ebx+114h] eax +
jmp loc_4AD080  +
mov edi [ebx+114h] +
lea eax [esp+98h+var_58] +
mov ecx eax +
mov [esp+98h+var_78] eax +
mov [ebx+114h] eax +
mov esi edi +
mov [esp+98h+var_74] edi +
test esi esi +
mov [esp+98h+var_58] edi +
mov edi eax +
mov eax [ebx+110h] +
mov [esp+98h+var_54] ebp +
mov [esp+98h+var_50] 0 +
mov [esp+98h+var_4C] eax +
jz loc_4AF2F0  +
mov eax [esi+4] +
mov eax [eax] +
sub eax 19h +
cmp eax 2 +
ja loc_4AF2F0  +
mov eax esi +
mov esi 1 +
mov [esp+98h+var_70] ebp +
mov [esp+98h+var_7C] ecx +
jmp loc_4AD8DD  +
mov edx [eax+4] +
mov edx [edx] +
sub edx 19h +
cmp edx 2 +
ja loc_4AD92E  +
mov edx [eax+8] +
test edx edx +
jnz loc_4AD928  +
cmp esi 3 +
ja loc_4AECB7  +
mov ebp [eax] +
mov edx esi +
add esi 1 +
shl edx 4 +
lea ecx [esp+edx+98h+var_58] +
mov [esp+edx+98h+var_58] ebp +
mov ebp [eax+4] +
mov [ecx+4] ebp +
mov ebp [eax+8] +
mov [ecx+8] ebp +
mov ebp [eax+0Ch] +
mov [ecx+0Ch] ebp +
mov [esp+edx+98h+var_58] edi +
mov edi [esp+98h+var_7C] +
add edi edx +
mov [ebx+114h] edi +
mov dword ptr [eax+8] 1 +
mov eax [eax] +
test eax eax +
jnz loc_4AD8D0  +
mov ebp [esp+98h+var_70] +
mov eax ebx +
mov edx [esp+98h+var_80] +
mov ecx [ebp+8] +
call sub_4AF330  +
mov eax [esp+98h+var_74] +
mov [ebx+114h] eax +
mov eax [esp+98h+var_50] +
test eax eax +
jnz loc_4AD080  +
cmp esi 1 +
jz loc_4AF050  +
mov edi [esp+98h+var_78] +
sub esi 1 +
mov [esp+98h+var_7C] ebp +
mov ebp [esp+98h+var_80] +
mov eax esi +
shl eax 4 +
lea edi [edi+eax+4] +
mov ecx [edi] +
mov edx ebp +
mov eax ebx +
sub edi 10h +
call sub_4AF370  +
cmp esi 1 +
jz loc_4AE83A  +
sub esi 1 +
jmp loc_4AD977  +
test byte ptr [esp+98h+var_80] 20h +
jnz loc_4AE895  +
cmp dword ptr [ecx+4] 0 +
jz loc_4AD9AF  +
test byte ptr [esp+98h+var_80] 40h +
jz loc_4AED3E  +
mov eax [ebx+114h] +
lea ecx [ebp+8] +
mov edx [esp+98h+var_80] +
mov [esp+98h+var_98] eax +
mov eax ebx +
and edx 0FFFFFF9Fh +
call sub_4AFF70  +
jmp loc_4AD080  +
mov eax [ebx+100h] +
mov esi offset aVirtualThunkTo +
jmp loc_4ADA03  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA41h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE5DB  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AD9E0  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AD9E3  +
mov eax [ebx+100h] +
mov esi offset aNonVirtualThun +
jmp loc_4ADA79  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA2Fh +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE5C8  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4ADA56  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4ADA59  +
mov eax [ebx+100h] +
mov esi offset aTypeinfoFnFor +
jmp loc_4ADAF3  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA19h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE5B5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4ADAD0  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4ADAD3  +
mov eax [ebx+100h] +
mov esi offset aTypeinfoNameFo +
jmp loc_4ADB69  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA08h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE71E  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4ADB46  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4ADB49  +
mov eax [ebx+100h] +
mov esi offset aTypeinfoFor +
jmp loc_4ADBE3  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50B9F5h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE70B  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4ADBC0  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4ADBC3  +
mov eax ebx +
mov edx offset aConstructionVt +
call sub_4ACE50  +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [ebp+4] +
mov edx edi +
call sub_4AF330  +
mov eax ebx +
mov edx offset aIn +
call sub_4ACE50  +
mov ecx [ebp+8] +
mov edx edi +
mov eax ebx +
call sub_4AF330  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aVttFor +
call sub_4ACE50  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aVtableFor +
call sub_4ACE50  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov eax ebx +
mov edx 7Eh +
call sub_4AC760  +
mov ecx [ebp+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ecx+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov esi [ecx+4] +
test esi esi +
jnz loc_4AE766  +
mov edx offset aThis +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
lea edx [ecx+4] +
mov eax ebx +
call sub_4ACCD0  +
test eax eax +
jz loc_4AE886  +
cmp dword ptr [eax] 2Fh +
jz loc_4AE85A  +
mov esi [ebx+110h] +
mov ecx eax +
mov eax ebx +
mov edx [esi] +
mov [ebx+110h] edx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
mov [ebx+110h] esi +
jmp loc_4AD080  +
mov eax [ebx+140h] +
test byte ptr [esp+98h+var_80] 4 +
mov [ebx+140h] ecx +
mov [esp+98h+var_7C] eax +
mov eax [ebx+114h] +
mov dword ptr [ebx+114h] 0 +
mov edx [ecx+4] +
mov [esp+98h+var_78] eax +
jz loc_4ADD6D  +
mov esi [edx] +
test esi esi +
jnz loc_4ADD6D  +
cmp dword ptr [edx+8] 6 +
jz loc_4AF059  +
mov ecx edx +
mov edx [esp+98h+var_80] +
mov eax ebx +
call sub_4AF330  +
cmp byte ptr [ebx+104h] 3Ch +
jz loc_4AEF66  +
mov edx 3Ch +
mov eax ebx +
call sub_4AC760  +
mov ecx [ebp+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
cmp byte ptr [ebx+104h] 3Eh +
jz loc_4AEF55  +
mov edx 3Eh +
mov eax ebx +
call sub_4AC760  +
mov eax [esp+98h+var_78] +
mov [ebx+114h] eax +
mov eax [esp+98h+var_7C] +
mov [ebx+140h] eax +
jmp loc_4AD080  +
mov eax [ebx+114h] +
mov dword ptr [ebx+114h] 0 +
mov esi [ecx+4] +
mov [esp+98h+var_74] eax +
test esi esi +
jz loc_4AEF46  +
mov eax [ebx+110h] +
xor edx edx +
xor edi edi +
mov [esp+98h+var_70] ecx +
mov [esp+98h+var_7C] eax +
lea eax [esp+98h+var_58] +
mov [esp+98h+var_78] eax +
mov ecx [esp+98h+var_7C] +
add edi 1 +
mov ebp eax +
mov [eax] edx +
mov edx [esi] +
mov [ebx+114h] eax +
mov [eax+4] esi +
mov [eax+0Ch] ecx +
lea ecx [edx-1Ch] +
cmp ecx 4 +
mov dword ptr [eax+8] 0 +
jbe loc_4AE584  +
cmp edx 4 +
mov ebp [esp+98h+var_70] +
jz loc_4AF1E4  +
cmp edx 2 +
jnz loc_4ADEC6  +
mov ecx [esi+8] +
cmp dword ptr [ecx] 45h +
jz loc_4AF226  +
mov eax [ecx] +
sub eax 1Ch +
cmp eax 4 +
ja loc_4ADEC6  +
cmp edi 4 +
jz loc_4AF208  +
mov eax edi +
shl eax 4 +
mov [esp+98h+var_70] esi +
mov esi [esp+98h+var_7C] +
add eax [esp+98h+var_78] +
jmp loc_4ADE88  +
add eax 10h +
cmp edi 4 +
jz loc_4AF208  +
mov edx [eax-0Ch] +
add edi 1 +
mov [ebx+114h] eax +
mov [eax-0Ch] ecx +
mov [eax+4] edx +
mov edx [eax-8] +
mov dword ptr [eax-8] 0 +
mov [eax+8] edx +
mov edx [eax-4] +
mov [eax-4] esi +
mov [eax+0Ch] edx +
lea edx [eax-10h] +
mov [eax] edx +
mov ecx [ecx+4] +
mov edx [ecx] +
sub edx 1Ch +
cmp edx 4 +
jbe loc_4ADE7C  +
mov esi [esp+98h+var_70] +
mov ecx [ebp+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
cmp dword ptr [esi] 4 +
jz loc_4AF217  +
test edi edi +
jz loc_4AEFD0  +
lea ebp [edi-1] +
mov edi [esp+98h+var_78] +
mov eax ebp +
shl eax 4 +
lea esi [edi+eax+8] +
jmp loc_4ADF05  +
sub esi 10h +
test ebp ebp +
jz loc_4AEFD0  +
sub ebp 1 +
mov edi [esi] +
test edi edi +
jnz loc_4ADEF7  +
mov eax ebx +
mov edx 20h +
call sub_4AC760  +
mov ecx [esi-4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF370  +
jmp loc_4ADEF7  +
mov edi [ecx+8] +
mov ebp [ecx+4] +
test edi edi +
jz loc_4AD080  +
mov eax [ebx+100h] +
xor esi esi +
jmp loc_4ADF5F  +
lea ecx [eax+1] +
add esi 1 +
cmp edi esi +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AD080  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [ebp+esi+0] +
jnz loc_4ADF40  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_80] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_80] +
jmp loc_4ADF43  +
mov eax [ebx+100h] +
mov esi offset aReferenceTempo +
jmp loc_4ADFD7  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BAC7h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE660  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4ADFB4  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4ADFB7  +
mov eax [ebx+100h] +
mov esi offset aTlsWrapperFunc +
jmp loc_4AE053  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BAB1h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE6F8  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE030  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE033  +
mov eax [ebx+100h] +
mov esi offset aTlsInitFunctio +
jmp loc_4AE0C9  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA97h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE5A2  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE0A6  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE0A9  +
mov eax [ebx+100h] +
mov esi offset aJavaClassFor +
jmp loc_4AE143  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA6Ch +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE5EE  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE120  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE123  +
mov eax [ebx+100h] +
mov esi offset aGuardVariableF +
jmp loc_4AE1B9  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA80h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE614  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE196  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE199  +
mov eax [ebx+100h] +
mov esi offset aCovariantRetur +
jmp loc_4AE233  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BA5Ch +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE601  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE210  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE213  +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [ecx+4] +
mov edx edi +
call sub_4AF330  +
and edi 4 +
jnz loc_4AE78C  +
mov edx offset asc_50B996 +
mov eax ebx +
call sub_4ACE50  +
mov ecx [ebp+8] +
cmp dword ptr [ecx] 45h +
jz loc_4AECC6  +
mov edx [esp+98h+var_80] +
mov eax ebx +
call sub_4AF330  +
jmp loc_4AD080  +
test byte ptr [esp+98h+var_80] 4 +
jnz loc_4AEBE1  +
mov edi [ecx+8] +
mov ebp [ecx+4] +
test edi edi +
jz loc_4AD080  +
mov eax [ebx+100h] +
xor esi esi +
jmp loc_4AE2FF  +
lea ecx [eax+1] +
add esi 1 +
cmp edi esi +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AD080  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [ebp+esi+0] +
jnz loc_4AE2E0  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_80] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_80] +
jmp loc_4AE2E3  +
test byte ptr [esp+98h+var_80] 4 +
mov eax [ecx+4] +
jnz loc_4AE79D  +
mov edi [eax+4] +
mov ebp [eax] +
test edi edi +
jz loc_4AD080  +
mov eax [ebx+100h] +
xor esi esi +
jmp loc_4AE38F  +
lea ecx [eax+1] +
add esi 1 +
cmp edi esi +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AD080  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [ebp+esi+0] +
jnz loc_4AE370  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_80] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_80] +
jmp loc_4AE373  +
mov eax [ecx+4] +
xor esi esi +
cmp dword ptr [eax] 5 +
jz loc_4AE959  +
mov edx [eax] +
cmp edx 23h +
jz loc_4AE82D  +
cmp edx [ebp+0] +
jz loc_4AE82D  +
cmp edx 24h +
jz loc_4AEEF5  +
mov edi [ebx+114h] +
lea eax [esp+98h+var_58] +
mov [ebx+114h] eax +
mov eax [ebx+110h] +
mov [esp+98h+var_58] edi +
mov [esp+98h+var_54] ebp +
mov [esp+98h+var_50] 0 +
mov [esp+98h+var_4C] eax +
mov ecx [ebp+4] +
mov edx [esp+98h+var_80] +
mov eax ebx +
call sub_4AF330  +
mov edi [esp+98h+var_50] +
test edi edi +
jz loc_4AE740  +
mov eax [esp+98h+var_58] +
test esi esi +
mov [ebx+114h] eax +
jz loc_4AD080  +
mov eax [esp+98h+var_7C] +
mov [ebx+110h] eax +
jmp loc_4AD080  +
mov edi [ebx+114h] +
xor esi esi +
jmp loc_4AE408  +
mov edi [ebx+114h] +
test edi edi +
jz loc_4AF1FF  +
mov edx edi +
mov ecx [edx+8] +
test ecx ecx +
jnz loc_4AE49D  +
mov ecx [edx+4] +
mov ecx [ecx] +
lea esi [ecx-19h] +
cmp esi 2 +
ja loc_4AE4A3  +
cmp eax ecx +
jz loc_4AEBCE  +
mov edx [edx] +
test edx edx +
jnz loc_4AE481  +
xor esi esi +
jmp loc_4AE408  +
mov eax [ebx+100h] +
mov esi offset aHiddenAliasFor +
jmp loc_4AE4DA  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BADFh +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE63A  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE4B7  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE4BA  +
mov ecx [ecx+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
cmp dword ptr [esi+8] 1 +
jnz loc_4AD522  +
mov ecx [esi+4] +
cmp byte ptr [ecx] 3Eh +
jnz loc_4AD522  +
mov eax ebx +
mov edx 28h +
call sub_4AC760  +
mov eax [ebp+4] +
mov eax [eax+4] +
mov esi [eax] +
mov eax [ebp+8] +
jmp loc_4AD524  +
add edi 1 +
cmp edi esi +
jnz loc_4AD156  +
jmp loc_4AD080  +
mov esi [esi+4] +
test esi esi +
jz loc_4AEF46  +
add eax 10h +
cmp edi 4 +
jz loc_4AE731  +
mov edx ebp +
jmp loc_4ADE0C  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+8] +
mov eax ebx +
mov esi offset aFor +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
mov eax [ebx+100h] +
jmp loc_4AE69F  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BACDh +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AE6E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE680  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE683  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov edx [esp+98h+var_80] +
mov ecx ebp +
mov eax ebx +
call sub_4AF370  +
jmp loc_4AE446  +
mov eax [ebp+4] +
test esi esi +
mov [esp+98h+var_78] eax +
jnz loc_4AD14D  +
jmp loc_4AD080  +
mov eax ebx +
mov edx offset aParm +
call sub_4ACE50  +
mov edx esi +
mov eax ebx +
call sub_4ACEE0  +
mov edx 7Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov edx 2Eh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AE29E  +
mov edi [eax+0Ch] +
mov ebp [eax+8] +
test edi edi +
jz loc_4AD080  +
mov eax [ebx+100h] +
xor esi esi +
jmp loc_4AE7D4  +
lea ecx [eax+1] +
add esi 1 +
cmp edi esi +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AD080  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [ebp+esi+0] +
jnz loc_4AE7B5  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_80] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_80] +
jmp loc_4AE7B8  +
mov edx offset a_fract +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
mov edi [ebx+114h] +
mov ebp eax +
jmp loc_4AE408  +
mov ebp [esp+98h+var_7C] +
mov eax [ebx+114h] +
mov edx [esp+98h+var_80] +
lea ecx [ebp+4] +
mov [esp+98h+var_98] eax +
mov eax ebx +
call sub_4AFCF0  +
jmp loc_4AD080  +
mov edx [ebx+11Ch] +
jmp loc_4AE871  +
mov eax [eax+8] +
sub edx 1 +
test eax eax +
jz loc_4AE886  +
cmp dword ptr [eax] 2Fh +
jnz loc_4AE886  +
cmp edx 0 +
jg loc_4AE862  +
jnz loc_4AE886  +
mov eax [eax+4] +
test eax eax +
lea esi [esi+0] +
jnz loc_4ADD09  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov esi [esp+98h+var_80] +
lea ecx [ecx+8] +
mov eax [ebx+114h] +
and esi 0FFFFFF9Fh +
mov [esp+98h+var_98] eax +
mov edx esi +
mov eax ebx +
call sub_4AFF70  +
mov ecx [ebp+4] +
test ecx ecx +
jz loc_4AD080  +
mov edx esi +
mov eax ebx +
call sub_4AF330  +
jmp loc_4AD080  +
mov edx 20h +
mov eax ebx +
call sub_4AC760  +
mov esi [ebp+4] +
jmp loc_4AD676  +
mov eax [ebx+100h] +
mov esi offset a_sat +
jmp loc_4AE913  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BB17h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AD7BD  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AE8F0  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_7C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_7C] +
jmp loc_4AE8F3  +
mov esi [ebx+12Ch] +
mov edi [ebx+128h] +
test esi esi +
mov [esp+98h+var_78] edi +
jle loc_4AE995  +
cmp eax [edi] +
jz loc_4AEEAB  +
lea edx [edi+8] +
xor ecx ecx +
jmp loc_4AE98E  +
mov edi edx +
add edx 8 +
cmp eax [edx-8] +
jz loc_4AEEAF  +
add ecx 1 +
cmp ecx esi +
jnz loc_4AE980  +
cmp esi [ebx+130h] +
jge loc_4AF2CD  +
mov edi [esp+98h+var_78] +
lea ecx [edi+esi*8] +
mov edi [ebx+110h] +
add esi 1 +
mov [ebx+12Ch] esi +
add ecx 4 +
mov [ecx-4] eax +
test edi edi +
mov [esp+98h+var_6C] edi +
jz loc_4AEA28  +
mov edi [ebx+138h] +
mov esi [ebx+13Ch] +
lea edx ds:0[edi*8] +
cmp esi edi +
mov [esp+98h+var_70] esi +
mov [esp+98h+var_78] edx +
jle loc_4AF2CD  +
mov [esp+98h+var_74] eax +
mov edx [esp+98h+var_6C] +
jmp loc_4AEA01  +
add [esp+98h+var_78] 8 +
cmp edi [esp+98h+var_70] +
jz loc_4AF2C3  +
mov eax [edx+4] +
add edi 1 +
mov esi [esp+98h+var_78] +
add esi [ebx+134h] +
mov [esi+4] eax +
mov [ecx] esi +
mov edx [edx] +
mov ecx esi +
test edx edx +
jnz loc_4AE9F2  +
mov eax [esp+98h+var_74] +
mov [ebx+138h] edi +
mov dword ptr [ecx] 0 +
cmp dword ptr [ebx+118h] 0 +
jnz loc_4AD080  +
xor esi esi +
lea edx [eax+4] +
mov eax ebx +
call sub_4ACCD0  +
test eax eax +
jz loc_4AEA81  +
cmp dword ptr [eax] 2Fh +
jnz loc_4AE3E5  +
mov edx [ebx+11Ch] +
jmp loc_4AEA6F  +
mov eax [eax+8] +
sub edx 1 +
test eax eax +
jz loc_4AEA81  +
cmp dword ptr [eax] 2Fh +
jnz loc_4AEA81  +
cmp edx 0 +
jg loc_4AEA60  +
jnz loc_4AEA81  +
mov eax [eax+4] +
test eax eax +
jnz loc_4AE3E5  +
test esi esi +
jz loc_4AEA8F  +
mov eax [esp+98h+var_7C] +
mov [ebx+110h] eax +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov eax [esp+98h+var_78] +
mov edi offset aAd +
mov ecx 3 +
mov eax [eax+4] +
mov ebp [eax] +
mov eax [esp+98h+var_7C] +
mov esi ebp +
cmps   +
mov eax [eax] +
jnz loc_4AEAC6  +
cmp eax 3 +
jz loc_4AF15A  +
cmp eax 37h +
jz loc_4AF238  +
mov ecx [esp+98h+var_78] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4B0500  +
test ebp ebp +
jz loc_4AD601  +
mov edi offset aGs +
mov ecx 3 +
mov esi ebp +
cmps   +
jz loc_4AEE0E  +
mov edi offset aSt +
mov ecx 3 +
mov esi ebp +
cmps   +
jnz loc_4AD601  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AF1B2  +
lea edx [eax+1] +
mov ecx [esp+98h+var_7C] +
mov [ebx+100h] edx +
mov edx [esp+98h+var_80] +
mov byte ptr [ebx+eax] 28h +
mov eax ebx +
mov byte ptr [ebx+104h] 28h +
call sub_4AF330  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AF180  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 29h +
mov byte ptr [ebx+104h] 29h +
jmp loc_4AD080  +
mov eax ebx +
mov edx 28h +
call sub_4AC760  +
mov ecx [esp+98h+var_78] +
mov eax ebx +
mov edx [esp+98h+var_80] +
add ecx 4 +
call sub_4B0280  +
mov edx 29h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD601  +
mov ecx [ebx+10Ch] +
mov edx [ebx+108h] +
mov byte ptr [ebx+eax] 0 +
mov [esp+98h+var_94] eax +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_98] ebx +
call edx  +
mov dword ptr [ebx+100h] 0 +
add dword ptr [ebx+120h] 1 +
jmp loc_4AD764  +
mov ecx [ebp+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov esi [ecx+4] +
mov edi [ecx+8] +
add edi esi +
cmp esi edi +
jb loc_4AEC1D  +
jmp loc_4AD080  +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4AEC78  +
lea ecx [edx+1] +
mov [ebx+100h] ecx +
mov [ebx+edx] al +
mov [ebx+104h] al +
add esi 1 +
cmp edi esi +
jbe loc_4AD080  +
mov eax edi +
sub eax esi +
cmp eax 3 +
movzx eax byte ptr [esi] +
jle loc_4AEBF2  +
cmp al 5Fh +
jnz loc_4AEBF2  +
cmp byte ptr [esi+1] 5Fh +
jnz loc_4AEBF2  +
cmp byte ptr [esi+2] 55h +
jnz loc_4AEBF2  +
lea ebp [esi+3] +
cmp edi ebp +
jbe loc_4AEBF2  +
xor ecx ecx +
jmp loc_4AEC5A  +
movsx eax dl +
sub eax 30h +
shl ecx 4 +
add ebp 1 +
add ecx eax +
cmp ebp edi +
jz loc_4AF22E  +
movzx edx byte ptr [ebp+0] +
lea eax [edx-30h] +
cmp al 9 +
jbe loc_4AEC44  +
lea eax [edx-41h] +
cmp al 5 +
ja loc_4AEF30  +
movsx eax dl +
sub eax 37h +
jmp loc_4AEC4A  +
mov ecx [ebx+10Ch] +
mov edx [ebx+108h] +
mov [esp+98h+var_80] eax +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call edx  +
mov ecx 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
mov eax [esp+98h+var_80] +
jmp loc_4AEC03  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov edx offset aDefaultArg +
mov eax ebx +
mov [esp+98h+var_7C] ecx +
call sub_4ACE50  +
mov ecx [esp+98h+var_7C] +
mov eax [ecx+8] +
lea edx [eax+1] +
mov eax ebx +
call sub_4ACEE0  +
mov edx offset asc_50B9A7 +
mov eax ebx +
call sub_4ACE50  +
mov ecx [esp+98h+var_7C] +
mov ecx [ecx+4] +
jmp loc_4AE2AA  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+98h+var_80] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_90] ecx +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_98] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+98h+var_80] +
jmp loc_4AD3E0  +
mov eax [ebx+114h] +
mov edx [esp+98h+var_80] +
mov [esp+98h+var_54] ebp +
mov [esp+98h+var_50] 0 +
mov [esp+98h+var_58] eax +
lea eax [esp+98h+var_58] +
mov [ebx+114h] eax +
mov eax [ebx+110h] +
and edx 0FFFFFF9Fh +
mov ecx [ebp+4] +
mov [esp+98h+var_4C] eax +
mov eax ebx +
call sub_4AF330  +
mov ecx [esp+98h+var_50] +
mov eax [esp+98h+var_58] +
test ecx ecx +
mov [ebx+114h] eax +
jnz loc_4AD080  +
mov edx 20h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD9AF  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_90] edx +
mov [esp+98h+var_98] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AD047  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_90] edx +
mov [esp+98h+var_98] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AD014  +
mov ecx [esp+98h+var_7C] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
jmp loc_4AD080  +
mov ecx [ecx+8] +
mov edi [ecx] +
test edi edi +
jnz loc_4AD000  +
cmp eax 3Ch +
jz loc_4AF2DC  +
mov edx [esp+98h+var_80] +
mov eax ebx +
sub esi 2 +
call sub_4AF330  +
cmp esi 4 +
ja loc_4AD080  +
jmp ds:off_50BD28[esi*4]  +
mov edx offset aLl +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
mov edx offset aUl +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
mov edx 6Ch +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov edx 75h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov edx offset aUll +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
mov edi [esp+98h+var_78] +
mov esi [ebx+124h] +
test esi esi +
jz loc_4AEFB3  +
mov ecx [esi] +
cmp ecx eax +
jz loc_4AEA3B  +
mov edx esi +
jmp loc_4AEEE5  +
mov edx [edx+4] +
test edx edx +
jz loc_4AEFB3  +
mov ecx [edx] +
cmp ecx eax +
jz loc_4AEA3B  +
cmp ebp ecx +
jnz loc_4AEED0  +
cmp edx esi +
jz loc_4AEED0  +
lea esi [esi+0] +
jmp loc_4AEA3B  +
mov ecx [eax+4] +
mov eax [ebx+114h] +
mov [esp+98h+var_54] ebp +
mov [esp+98h+var_50] 0 +
test ecx ecx +
mov [esp+98h+var_58] eax +
lea eax [esp+98h+var_58] +
mov [ebx+114h] eax +
mov eax [ebx+110h] +
mov [esp+98h+var_4C] eax +
jnz loc_4AE42F  +
jmp loc_4AE42C  +
lea eax [edx-61h] +
cmp al 5 +
ja loc_4AF28E  +
movsx eax dl +
sub eax 57h +
jmp loc_4AEC4A  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov edx 20h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4ADDAE  +
mov edx 20h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4ADD87  +
mov eax ebx +
mov edx 5Bh +
call sub_4AC760  +
mov edx [esp+98h+var_80] +
mov eax ebx +
mov ecx [ebp+8] +
call sub_4AF330  +
mov edx 5Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov edx 2Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD062  +
mov esi [ebx+110h] +
mov edx [edi+4] +
mov [esp+98h+var_7C] esi +
mov esi 1 +
mov [ebx+110h] edx +
jmp loc_4AEA3D  +
mov eax [esp+98h+var_74] +
mov [ebx+114h] eax +
jmp loc_4AD080  +
movzx edi byte ptr [edx] +
lea ecx [edi-63h] +
cmp cl 1 +
jbe loc_4AEFF8  +
sub edi 72h +
mov ecx edi +
cmp cl 1 +
ja loc_4AD515  +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [esp+98h+var_7C] +
mov edx edi +
call sub_4B0500  +
mov eax ebx +
mov edx 3Ch +
call sub_4AC760  +
mov eax [ebp+8] +
mov edx edi +
mov ecx [eax+4] +
mov eax ebx +
call sub_4AF330  +
mov eax ebx +
mov edx offset asc_50BBF5 +
call sub_4ACE50  +
mov eax [ebp+8] +
mov edx edi +
mov ecx [eax+8] +
mov eax ebx +
call sub_4AF330  +
mov edx 29h +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD080  +
mov eax [esp+98h+var_74] +
jmp loc_4AE844  +
mov esi [edx+4] +
mov edi offset aJarray +
mov ecx 6 +
cmps   +
jnz loc_4ADD6D  +
mov edx [esp+98h+var_80] +
mov eax ebx +
mov ecx [ebp+8] +
call sub_4AF330  +
mov edx offset asc_50B9B2 +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4ADDBA  +
mov eax ebx +
mov edx 5Bh +
call sub_4AC760  +
mov eax [ebp+8] +
mov edx [esp+98h+var_80] +
mov ecx [eax+8] +
mov eax ebx +
call sub_4AF330  +
mov edx 5Dh +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AD59A  +
mov ecx [esp+98h+var_7C] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4B0500  +
jmp loc_4AD589  +
mov edi [esp+98h+var_80] +
mov eax ebx +
mov ecx [esp+98h+var_7C] +
mov edx edi +
call sub_4B05C0  +
mov ecx ebp +
mov edx edi +
mov eax ebx +
call sub_4B0500  +
mov ecx [esp+98h+var_78] +
mov edx edi +
mov eax ebx +
call sub_4B05C0  +
mov eax ebx +
mov edx offset asc_50BB4E +
call sub_4ACE50  +
mov ecx [esp+98h+var_74] +
mov edx edi +
mov eax ebx +
call sub_4B05C0  +
jmp loc_4AD080  +
mov eax [ecx+8] +
cmp dword ptr [eax] 29h +
jz loc_4AF128  +
mov dword ptr [ebx+118h] 1 +
mov ecx [ecx+4] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4B05C0  +
jmp loc_4AD549  +
mov edx [esp+98h+var_80] +
mov eax ebx +
mov ecx [ebp+4] +
call sub_4B05C0  +
mov edx offset a____0 +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
mov eax [esp+98h+var_7C] +
mov eax [eax+4] +
cmp dword ptr [eax] 1 +
jnz loc_4AEACF  +
mov edi [esp+98h+var_7C] +
mov edx [edi+8] +
cmp dword ptr [edx] 29h +
cmovnz eax edi +
mov [esp+98h+var_7C] eax +
jmp loc_4AEACF  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_90] edx +
mov [esp+98h+var_98] ebx +
call eax  +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AEB53  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+98h+var_94] 0FFh +
mov [esp+98h+var_90] edx +
mov [esp+98h+var_98] ebx +
call eax  +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AEB1F  +
mov eax [esp+98h+var_7C] +
mov [esp+98h+var_5C] esi +
mov [esp+98h+var_60] eax +
lea eax [esp+98h+var_60] +
mov [ebx+110h] eax +
jmp loc_4ADEC6  +
xor edi edi +
xor esi esi +
jmp loc_4AE408  +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AD080  +
mov eax [esp+98h+var_60] +
mov [ebx+110h] eax +
jmp loc_4ADEDD  +
mov ecx [ecx+4] +
jmp loc_4ADE56  +
mov eax 5Fh +
jmp loc_4AEBF2  +
mov eax [esp+98h+var_7C] +
mov edi [esp+98h+var_80] +
mov ecx [eax+4] +
mov eax ebx +
mov edx edi +
call sub_4B05C0  +
mov ecx [esp+98h+var_78] +
mov edx edi +
mov eax ebx +
call sub_4B0500  +
jmp loc_4AD080  +
cmp eax 3Bh +
jnz loc_4AD000  +
mov eax [edx+4] +
movzx eax byte ptr [eax] +
cmp al 30h +
jz loc_4AF318  +
cmp al 31h +
jnz loc_4AD000  +
mov edx offset aTrue_0 +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
cmp edi ebp +
mov eax 5Fh +
jbe loc_4AEBF2  +
cmp dl 5Fh +
jnz loc_4AEBF2  +
cmp ecx 0FFh +
mov eax edx +
ja loc_4AEBF2  +
movsx edx cl +
mov eax ebx +
call sub_4AC760  +
mov esi ebp +
jmp loc_4AEC12  +
mov eax [esp+98h+var_74] +
mov [ebx+138h] edi +
mov dword ptr [ebx+118h] 1 +
jmp loc_4AEA2E  +
mov edx 2Dh +
mov eax ebx +
call sub_4AC760  +
mov ecx [ebp+8] +
jmp loc_4AEE38  +
mov ecx [ebp+8] +
mov eax ebx +
mov edx [esp+98h+var_80] +
call sub_4AF330  +
mov eax [esp+98h+var_74] +
cmp [esp+98h+var_50] 0 +
mov [ebx+114h] eax +
jz loc_4AE844  +
jmp loc_4AD080  +
mov edx offset aFalse_0 +
mov eax ebx +
call sub_4ACE50  +
jmp loc_4AD080  +
***
sub esp 18h +
mov eax [eax+124h] +
mov [esp+18h+var_10] ecx +
mov [esp+18h+var_C] eax +
lea eax [esp+18h+var_10] +
mov [ebx+124h] eax +
mov eax ebx +
call sub_4ACF90  +
mov eax [esp+18h+var_C] +
mov [ebx+124h] eax +
add esp 18h +
pop ebx  +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 3Ch +
mov eax [ecx] +
mov [esp+3Ch+var_24] edx +
sub eax 3 +
cmp eax 2Ah +
ja loc_4AF3B8  +
jmp ds:off_50BD80[eax*4]  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AF9CE  +
lea esi [eax+1] +
mov [ebx+100h] esi +
mov byte ptr [ebx+eax] 20h +
mov byte ptr [ebx+104h] 20h +
mov ecx [ecx+8] +
mov eax [ebx+124h] +
mov edx [esp+3Ch+var_24] +
mov [esp+3Ch+var_14] ecx +
mov [esp+3Ch+var_10] eax +
lea eax [esp+3Ch+var_14] +
mov [ebx+124h] eax +
mov eax ebx +
call sub_4ACF90  +
mov eax [esp+3Ch+var_10] +
mov [ebx+124h] eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+100h] +
mov esi offset a__vector +
jmp loc_4AF425  +
lea ebp [eax+1] +
add esi 1 +
mov edx edi +
cmp esi 50BD7Ch +
mov [ebx+100h] ebp +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF900  +
mov eax ebp +
cmp eax 0FFh +
movzx edi byte ptr [esi] +
jnz loc_4AF400  +
mov ebp [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_20] ecx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ebp +
mov ebp 1 +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
xor eax eax +
mov ecx [esp+3Ch+var_20] +
add dword ptr [ebx+120h] 1 +
jmp loc_4AF403  +
mov ecx [ecx+4] +
jmp loc_4AF3B8  +
mov eax [ebx+100h] +
mov esi offset aRestrict +
jmp loc_4AF4A8  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BD45h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF3E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AF485  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_24] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+3Ch+var_24] +
jmp loc_4AF488  +
mov eax [ebx+100h] +
mov esi offset aVolatile_0 +
jmp loc_4AF523  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BD4Fh +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF3E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AF500  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_24] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+3Ch+var_24] +
jmp loc_4AF503  +
mov eax [ebx+100h] +
mov esi offset aConst_0 +
jmp loc_4AF5A3  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BD56h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF3E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AF580  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_24] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+3Ch+var_24] +
jmp loc_4AF583  +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4AFA0D  +
lea eax [edx+1] +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 20h +
mov byte ptr [ebx+104h] 20h +
cmp eax 0FFh +
jz loc_4AF960  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 26h +
mov byte ptr [ebx+104h] 26h +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4AF997  +
lea eax [edx+1] +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 20h +
mov byte ptr [ebx+104h] 20h +
mov esi offset asc_50BD57 +
jmp loc_4AF693  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BD59h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF3E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AF670  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_24] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+3Ch+var_24] +
jmp loc_4AF673  +
test byte ptr [esp+3Ch+var_24] 4 +
jnz loc_4AF3E5  +
mov edx 2Ah +
mov eax ebx +
call sub_4AC760  +
jmp loc_4AF3E5  +
mov eax [ebx+100h] +
jmp loc_4AF616  +
mov eax [ebx+100h] +
jmp loc_4AF666  +
mov eax [ebx+100h] +
mov esi offset aComplex +
jmp loc_4AF753  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BD62h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF3E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AF730  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_24] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+3Ch+var_24] +
jmp loc_4AF733  +
mov eax [ebx+100h] +
mov esi offset aImaginary +
jmp loc_4AF7D3  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BD6Dh +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF3E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AF7B0  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_24] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+3Ch+var_24] +
jmp loc_4AF7B3  +
cmp byte ptr [ebx+104h] 28h +
jz loc_4AF84E  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AFA7B  +
lea esi [eax+1] +
mov [ebx+100h] esi +
mov byte ptr [ebx+eax] 20h +
mov byte ptr [ebx+104h] 20h +
mov eax [ebx+124h] +
mov esi offset asc_50BD6E +
mov ecx [ecx+4] +
mov edx [esp+3Ch+var_24] +
mov [esp+3Ch+var_10] eax +
lea eax [esp+3Ch+var_14] +
mov [ebx+124h] eax +
mov eax ebx +
mov [esp+3Ch+var_14] ecx +
call sub_4ACF90  +
mov eax [esp+3Ch+var_10] +
mov [ebx+124h] eax +
mov eax [ebx+100h] +
jmp loc_4AF8B3  +
lea ecx [eax+1] +
add esi 1 +
cmp esi 50BD71h +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AF3E5  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AF890  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_24] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] ecx +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+3Ch+var_24] +
jmp loc_4AF893  +
mov eax [ebx+124h] +
mov ecx [ecx+4] +
mov edx [esp+3Ch+var_24] +
mov [esp+3Ch+var_10] eax +
lea eax [esp+3Ch+var_14] +
mov [ebx+124h] eax +
mov eax ebx +
mov [esp+3Ch+var_14] ecx +
call sub_4ACF90  +
mov eax [esp+3Ch+var_10] +
mov [ebx+124h] eax +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AFA44  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 29h +
mov byte ptr [ebx+104h] 29h +
jmp loc_4AF3E5  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AF624  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4AF655  +
mov esi [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_20] ecx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] esi +
mov esi 1 +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
xor eax eax +
mov ecx [esp+3Ch+var_20] +
add dword ptr [ebx+120h] 1 +
jmp loc_4AF3A4  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4AF605  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_3C] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AF944  +
mov esi [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+3Ch+var_20] ecx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+3Ch+var_34] esi +
mov esi 1 +
mov [esp+3Ch+var_38] 0FFh +
mov [esp+3Ch+var_3C] ebx +
call eax  +
xor eax eax +
mov ecx [esp+3Ch+var_20] +
add dword ptr [ebx+120h] 1 +
jmp loc_4AF83D  +
***
push esi  +
push ebx  +
mov ebx ecx +
sub esp 2Ch +
test ecx ecx +
mov [esp+2Ch+var_14] edx +
mov ebp [esp+2Ch+arg_0] +
jz loc_4AFB41  +
mov ecx [eax+118h] +
mov esi eax +
test ecx ecx +
jz loc_4AFAED  +
jmp loc_4AFB41  +
mov edx [esi+118h] +
test edx edx +
jnz loc_4AFB41  +
mov eax [ebx+8] +
test eax eax +
jnz loc_4AFB3B  +
mov ecx [ebx+4] +
test ebp ebp +
mov eax [ecx] +
jnz loc_4AFB05  +
lea edx [eax-1Ch] +
cmp edx 4 +
jbe loc_4AFB3B  +
mov edx [ebx+0Ch] +
cmp eax 29h +
mov dword ptr [ebx+8] 1 +
mov edi [esi+110h] +
mov [esi+110h] edx +
jz loc_4AFB49  +
cmp eax 2Ah +
jz loc_4AFB6A  +
cmp eax 2 +
jz loc_4AFB8B  +
mov edx [esp+2Ch+var_14] +
mov eax esi +
call sub_4AF370  +
mov [esi+110h] edi +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4AFAE3  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx] +
add ecx 8 +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] eax +
mov eax esi +
call sub_4AFF70  +
mov [esi+110h] edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx] +
add ecx 4 +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_2C] eax +
mov eax esi +
call sub_4AFCF0  +
mov [esi+110h] edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebp [esi+114h] +
mov eax esi +
mov dword ptr [esi+114h] 0 +
mov edx [esp+2Ch+var_14] +
mov ecx [ecx+4] +
call sub_4AF330  +
mov eax [esi+100h] +
test byte ptr [esp+2Ch+var_14] 4 +
mov [esi+114h] ebp +
jnz loc_4AFC25  +
mov ebp offset asc_50B996 +
mov [esp+2Ch+var_10] ebx +
jmp loc_4AFBE6  +
lea ecx [eax+1] +
add ebp 1 +
cmp ebp 50B998h +
mov [esi+100h] ecx +
mov [esi+eax] bl +
mov [esi+104h] bl +
jz loc_4AFC42  +
mov eax ecx +
cmp eax 0FFh +
movzx ebx byte ptr [ebp+0] +
jnz loc_4AFBC7  +
mov ecx [esi+10Ch] +
mov eax [esi+108h] +
mov byte ptr [esi+0FFh] 0 +
mov [esp+2Ch+var_28] 0FFh +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_2C] esi +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [esi+120h] 1 +
jmp loc_4AFBCA  +
cmp eax 0FFh +
jz loc_4AFC7B  +
lea edx [eax+1] +
mov [esi+100h] edx +
mov byte ptr [esi+eax] 2Eh +
mov byte ptr [esi+104h] 2Eh +
jmp loc_4AFC46  +
mov ebx [esp+2Ch+var_10] +
mov eax [ebx+4] +
mov ecx [eax+8] +
mov eax [ecx] +
cmp eax 45h +
jnz loc_4AFC5A  +
jmp loc_4AFCAF  +
mov ecx [ecx+4] +
mov eax [ecx] +
sub eax 1Ch +
cmp eax 4 +
jbe loc_4AFC55  +
mov edx [esp+2Ch+var_14] +
mov eax esi +
call sub_4AF330  +
mov [esi+110h] edi +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [esi+10Ch] +
mov eax [esi+108h] +
mov byte ptr [esi+0FFh] 0 +
mov [esp+2Ch+var_28] 0FFh +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_2C] esi +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [esi+120h] 1 +
jmp loc_4AFC2F  +
mov edx offset aDefaultArg +
mov eax esi +
mov [esp+2Ch+var_10] ecx +
call sub_4ACE50  +
mov ecx [esp+2Ch+var_10] +
mov eax [ecx+8] +
lea edx [eax+1] +
mov eax esi +
call sub_4ACEE0  +
mov edx offset asc_50B9A7 +
mov eax esi +
call sub_4ACE50  +
mov ecx [esp+2Ch+var_10] +
jmp loc_4AFC55  +
***
push edi  +
mov edi edx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov eax [esp+28h+arg_0] +
test eax eax +
jz loc_4AFD2A  +
mov edx [eax+8] +
test edx edx +
jz loc_4AFDB0  +
mov eax [eax] +
test eax eax +
jnz loc_4AFD05  +
mov ecx [esp+28h+arg_0] +
mov edx edi +
mov eax ebx +
mov [esp+28h+var_28] 0 +
call sub_4AFAC0  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AFE70  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 20h +
mov byte ptr [ebx+104h] 20h +
cmp edx 0FFh +
jz loc_4AFF17  +
lea eax [edx+1] +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 5Bh +
mov byte ptr [ebx+104h] 5Bh +
mov ecx [ebp+0] +
test ecx ecx +
jz loc_4AFD85  +
mov eax ebx +
mov edx edi +
call sub_4AF330  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4AFEE0  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 5Dh +
mov byte ptr [ebx+104h] 5Dh +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [eax+4] +
cmp dword ptr [eax] 2Ah +
jz loc_4AFF50  +
mov eax [ebx+100h] +
mov esi offset unk_50BE2C +
jmp loc_4AFDEF  +
lea ecx [eax+1] +
add esi 1 +
cmp esi offset unk_50BE2E +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4AFE35  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [esi] +
jnz loc_4AFDD0  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+28h+var_1C] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+28h+var_20] ecx +
mov [esp+28h+var_24] 0FFh +
mov [esp+28h+var_28] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+28h+var_1C] +
jmp loc_4AFDD3  +
mov ecx [esp+28h+arg_0] +
mov edx edi +
mov eax ebx +
mov [esp+28h+var_28] 0 +
call sub_4AFAC0  +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4AFEA7  +
lea eax [edx+1] +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 29h +
mov byte ptr [ebx+104h] 29h +
jmp loc_4AFD30  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+28h+var_24] 0FFh +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_28] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AFD3E  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+28h+var_24] 0FFh +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4AFE5A  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+28h+var_24] 0FFh +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_28] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4AFD93  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+28h+var_24] 0FFh +
mov [esp+28h+var_20] edx +
mov [esp+28h+var_28] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4AFD5E  +
mov ecx [esp+28h+arg_0] +
mov edx edi +
mov eax ebx +
mov [esp+28h+var_28] 0 +
call sub_4AFAC0  +
mov edx [ebx+100h] +
jmp loc_4AFD4F  +
***
mov edi edx +
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
mov esi [esp+34h+arg_0] +
mov [esp+34h+var_28] ecx +
test esi esi +
jz loc_4B0050  +
mov ebp [esi+8] +
test ebp ebp +
jnz loc_4B0050  +
mov eax esi +
mov edx 1 +
jmp loc_4AFFBE  +
and ch 0Eh +
jnz loc_4B0112  +
mov eax [eax] +
test eax eax +
jz loc_4B0050  +
mov ecx [eax+8] +
test ecx ecx +
jnz loc_4B0050  +
mov ecx [eax+4] +
mov ecx [ecx] +
sub ecx 19h +
cmp ecx 12h +
ja loc_4AFFA9  +
mov ebp edx +
shl ebp cl +
test ebp 43107h +
mov ecx ebp +
jz loc_4AFFA0  +
movzx eax byte ptr [ebx+104h] +
cmp al 20h +
jz loc_4B0127  +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4B0244  +
lea eax [edx+1] +
cmp eax 0FFh +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 20h +
mov byte ptr [ebx+104h] 20h +
jnz loc_4B0138  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4B013B  +
mov ebp [ebx+114h] +
mov edx edi +
mov ecx esi +
mov dword ptr [ebx+114h] 0 +
mov eax ebx +
mov [esp+34h+var_34] 0 +
call sub_4AFAC0  +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4B019F  +
lea eax [edx+1] +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 28h +
mov edx [esp+34h+var_28] +
mov byte ptr [ebx+104h] 28h +
mov ecx [edx] +
test ecx ecx +
jz loc_4B00D3  +
mov eax [ebx+124h] +
mov edx edi +
mov [esp+34h+var_1C] ecx +
mov [esp+34h+var_18] eax +
lea eax [esp+34h+var_1C] +
mov [ebx+124h] eax +
mov eax ebx +
call sub_4ACF90  +
mov eax [esp+34h+var_18] +
mov [ebx+124h] eax +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4B01D6  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov ecx esi +
mov edx edi +
mov byte ptr [ebx+eax] 29h +
mov eax ebx +
mov byte ptr [ebx+104h] 29h +
mov [esp+34h+var_34] 1 +
call sub_4AFAC0  +
mov [ebx+114h] ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx+104h] +
mov edx eax +
and edx 0FFFFFFFDh +
cmp dl 28h +
jnz loc_4AFFE0  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4B0019  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov ebp [ebx+114h] +
mov ecx esi +
mov byte ptr [ebx+eax] 28h +
mov edx edi +
mov eax ebx +
mov byte ptr [ebx+104h] 28h +
mov dword ptr [ebx+114h] 0 +
mov [esp+34h+var_34] 0 +
call sub_4AFAC0  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4B020D  +
lea edx [eax+1] +
cmp edx 0FFh +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 29h +
mov byte ptr [ebx+104h] 29h +
jnz loc_4B0084  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4B0087  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4B00E1  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4B0182  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4AFFFD  +
***
mov edi edx +
push esi  +
mov esi ecx +
push ebx  +
mov ebx eax +
sub esp 2Ch +
mov eax [eax+140h] +
test eax eax +
jz loc_4B02AF  +
mov edx [ebx+110h] +
mov [esp+34h+var_20] eax +
mov [esp+34h+var_24] edx +
lea edx [esp+34h+var_24] +
mov [ebx+110h] edx +
mov ecx [esi] +
cmp dword ptr [ecx] 4 +
jz loc_4B0300  +
mov eax [ebx+124h] +
mov edx edi +
mov [esp+34h+var_1C] ecx +
mov [esp+34h+var_18] eax +
lea eax [esp+34h+var_1C] +
mov [ebx+124h] eax +
mov eax ebx +
call sub_4ACF90  +
mov edx [ebx+140h] +
mov eax [esp+34h+var_18] +
test edx edx +
mov [ebx+124h] eax +
jz loc_4B02F5  +
mov eax [esp+34h+var_24] +
mov [ebx+110h] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebx+124h] +
lea ebp [esp+34h+var_1C] +
mov edx edi +
mov ecx [ecx+4] +
mov [ebx+124h] ebp +
mov [esp+34h+var_18] eax +
mov eax ebx +
mov [esp+34h+var_1C] ecx +
call sub_4ACF90  +
mov eax [esp+34h+var_18] +
mov [ebx+124h] eax +
mov eax [ebx+140h] +
test eax eax +
jz loc_4B0342  +
mov eax [esp+34h+var_24] +
mov [ebx+110h] eax +
cmp byte ptr [ebx+104h] 3Ch +
jz loc_4B0447  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4B03D2  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov edx edi +
mov byte ptr [ebx+eax] 3Ch +
mov byte ptr [ebx+104h] 3Ch +
mov eax [esi] +
mov ecx [eax+8] +
mov eax [ebx+124h] +
mov [ebx+124h] ebp +
mov [esp+34h+var_1C] ecx +
mov [esp+34h+var_18] eax +
mov eax ebx +
call sub_4ACF90  +
mov eax [esp+34h+var_18] +
cmp byte ptr [ebx+104h] 3Eh +
mov [ebx+124h] eax +
jz loc_4B0470  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4B0410  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 3Eh +
mov byte ptr [ebx+104h] 3Eh +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4B035F  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4B03B9  +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4B0497  +
lea eax [edx+1] +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 20h +
mov byte ptr [ebx+104h] 20h +
jmp loc_4B0355  +
mov edx [ebx+100h] +
cmp edx 0FFh +
jz loc_4B04CB  +
lea eax [edx+1] +
mov [ebx+100h] eax +
mov byte ptr [ebx+edx] 20h +
mov byte ptr [ebx+104h] 20h +
jmp loc_4B03AF  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4B0458  +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov eax 1 +
xor edx edx +
add dword ptr [ebx+120h] 1 +
jmp loc_4B0481  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
cmp dword ptr [ecx] 31h +
jz loc_4B0540  +
mov eax [eax+124h] +
mov [esp+2Ch+var_14] ecx +
mov [esp+2Ch+var_10] eax +
lea eax [esp+2Ch+var_14] +
mov [ebx+124h] eax +
mov eax ebx +
call sub_4ACF90  +
mov eax [esp+2Ch+var_10] +
mov [ebx+124h] eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ecx+4] +
mov edi [eax+8] +
mov ebp [eax+4] +
test edi edi +
jz loc_4B0537  +
mov eax [ebx+100h] +
xor esi esi +
jmp loc_4B0572  +
lea ecx [eax+1] +
add esi 1 +
cmp edi esi +
mov [ebx+100h] ecx +
mov [ebx+eax] dl +
mov [ebx+104h] dl +
jz loc_4B0537  +
mov eax ecx +
cmp eax 0FFh +
movzx edx byte ptr [ebp+esi+0] +
jnz loc_4B0557  +
mov ecx [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+2Ch+var_20] edx +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+2Ch+var_24] ecx +
mov [esp+2Ch+var_28] 0FFh +
mov [esp+2Ch+var_2C] ebx +
call eax  +
mov ecx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
mov edx [esp+2Ch+var_20] +
jmp loc_4B055A  +
***
mov ebx eax +
sub esp 34h +
mov eax [ecx] +
cmp eax 1 +
jbe loc_4B05D3  +
cmp eax 30h +
jnz loc_4B0602  +
mov eax [ebx+124h] +
mov [esp+34h+var_C] ecx +
mov [esp+34h+var_8] eax +
lea eax [esp+34h+var_C] +
mov [ebx+124h] eax +
mov eax ebx +
call sub_4ACF90  +
mov eax [esp+34h+var_8] +
mov [ebx+124h] eax +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
cmp eax 6 +
jz loc_4B05D3  +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4B06B4  +
lea esi [eax+1] +
mov [ebx+100h] esi +
mov byte ptr [ebx+eax] 28h +
mov eax [ebx+124h] +
mov byte ptr [ebx+104h] 28h +
mov [esp+34h+var_C] ecx +
mov [esp+34h+var_8] eax +
lea eax [esp+34h+var_C] +
mov [ebx+124h] eax +
mov eax ebx +
call sub_4ACF90  +
mov eax [esp+34h+var_8] +
mov [ebx+124h] eax +
mov eax [ebx+100h] +
cmp eax 0FFh +
jz loc_4B0680  +
lea edx [eax+1] +
mov [ebx+100h] edx +
mov byte ptr [ebx+eax] 29h +
mov byte ptr [ebx+104h] 29h +
add esp 34h +
pop ebx  +
pop esi  +
retn   +
mov edx [ebx+10Ch] +
mov eax [ebx+108h] +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_2C] edx +
mov [esp+34h+var_34] ebx +
call eax  +
mov edx 1 +
xor eax eax +
add dword ptr [ebx+120h] 1 +
jmp loc_4B0665  +
mov esi [ebx+10Ch] +
mov eax [ebx+108h] +
mov [esp+34h+var_18] ecx +
mov [esp+34h+var_1C] edx +
mov [esp+34h+var_2C] esi +
mov esi 1 +
mov byte ptr [ebx+0FFh] 0 +
mov [esp+34h+var_30] 0FFh +
mov [esp+34h+var_34] ebx +
call eax  +
xor eax eax +
mov ecx [esp+34h+var_18] +
add dword ptr [ebx+120h] 1 +
mov edx [esp+34h+var_1C] +
jmp loc_4B061B  +
***
mov edx [esp+4] +
xor eax eax +
test edx edx +
jz locret_4B0734  +
mov ecx [esp+8] +
test ecx ecx +
jz locret_4B0734  +
mov ecx [esp+0Ch] +
test ecx ecx +
jz locret_4B0734  +
mov eax [esp+8] +
mov dword ptr [edx] 0 +
mov [edx+4] eax +
mov eax [esp+0Ch] +
mov [edx+8] eax +
mov eax 1 +
retn   +
***
retn   +
***
push ebx  +
mov eax [esp+8] +
mov ecx [esp+0Ch] +
mov edx [esp+10h] +
test eax eax +
jz loc_4B0771  +
mov ebx ecx +
shr ebx 1Fh +
test bl bl +
jnz loc_4B0771  +
test edx edx +
jz loc_4B0771  +
mov dword ptr [eax] 32h +
mov [eax+4] ecx +
mov [eax+8] edx +
mov eax 1 +
pop ebx  +
retn   +
***
xor eax eax +
pop ebx  +
retn   +
***
mov edx [esp+4] +
test edx edx +
jz loc_4B07B8  +
mov eax [esp+0Ch] +
test eax eax +
jz loc_4B07B8  +
mov eax [esp+8] +
lea ecx [eax-1] +
xor eax eax +
cmp ecx 4 +
ja locret_4B07BA  +
mov eax [esp+8] +
mov dword ptr [edx] 7 +
mov [edx+4] eax +
mov eax [esp+0Ch] +
mov [edx+8] eax +
mov eax 1 +
retn   +
***
xor eax eax +
retn   +
***
mov edx [esp+4] +
test edx edx +
jz loc_4B07F8  +
mov eax [esp+0Ch] +
test eax eax +
jz loc_4B07F8  +
mov eax [esp+8] +
lea ecx [eax-1] +
xor eax eax +
cmp ecx 4 +
ja locret_4B07FA  +
mov eax [esp+8] +
mov dword ptr [edx] 8 +
mov [edx+4] eax +
mov eax [esp+0Ch] +
mov [edx+8] eax +
mov eax 1 +
retn   +
***
xor eax eax +
retn   +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
mov ecx [ebx+0Ch] +
movsx eax byte ptr [ecx] +
cmp al 72h +
jz loc_4B0950  +
cmp al 56h +
jz loc_4B0950  +
cmp al 4Bh +
jz loc_4B0950  +
lea edx [eax-30h] +
cmp dl 4Ah +
ja loc_4B0943  +
movzx edx dl +
jmp ds:off_50BE3C[edx*4]  +
mov eax [ebx+34h] +
mov dword ptr [ebx+34h] 1 +
mov [esp+2Ch+var_24] eax +
movzx eax byte ptr [ecx+2] +
cmp al 4Ch +
jz loc_4B153D  +
cmp al 54h +
jz loc_4B152F  +
cmp al 73h +
jz loc_4B12B5  +
cmp al 66h +
nop   +
lea esi [esi+0] +
jz loc_4B12F2  +
lea edx [eax-30h] +
cmp dl 9 +
jbe loc_4B1218  +
cmp al 6Fh +
jz loc_4B1208  +
cmp al 74h +
setz dl  +
jnz loc_4B19B1  +
cmp byte ptr [ecx+3] 6Ch +
jz loc_4B16EF  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov esi eax +
jz loc_4B14C2  +
mov ecx [eax] +
cmp ecx 31h +
jz loc_4B154B  +
cmp ecx 32h +
jz loc_4B1827  +
cmp ecx 33h +
jnz loc_4B14C2  +
xor ebp ebp +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B1915  +
mov eax ebx +
call sub_4B5330  +
test ebp ebp +
mov [esp+2Ch+var_2C] eax +
jz loc_4B08FA  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov ecx esi +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
mov eax [esp+2Ch+var_24] +
mov edx 41h +
mov [ebx+34h] eax +
mov eax ebx +
mov [esp+2Ch+var_2C] 0 +
call sub_4AC500  +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_4B0943  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 0 +
jz loc_4B0943  +
lea ecx [edx+1] +
mov [ebx+0Ch] ecx +
cmp byte ptr [edx] 45h +
jz loc_4B0A08  +
xor eax eax +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor ecx ecx +
mov eax ebx +
lea edx [esp+2Ch+var_10] +
call sub_4AC5B0  +
test eax eax +
mov esi eax +
jz loc_4B0943  +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 46h +
jz loc_4B09B0  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx eax +
mov [esi] eax +
test edx edx +
jz loc_4B0943  +
mov eax [edx] +
sub eax 1Fh +
cmp eax 1 +
jbe loc_4B09C0  +
mov edx [esp+2Ch+var_10] +
test edx edx +
jz loc_4B0943  +
mov eax [ebx+20h] +
cmp eax [ebx+24h] +
jge loc_4B0943  +
mov ecx [ebx+1Ch] +
mov [ecx+eax*4] edx +
add eax 1 +
mov [ebx+20h] eax +
mov eax [esp+2Ch+var_10] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebx +
call sub_4B2150  +
mov edx eax +
mov [esi] eax +
jmp loc_4B0977  +
mov ecx [esp+2Ch+var_10] +
mov eax [edx+4] +
mov [edx+4] ecx +
mov edx [esi] +
mov [esp+2Ch+var_10] edx +
mov [esi] eax +
jmp loc_4B0985  +
add ecx 1 +
mov eax ebx +
mov [ebx+0Ch] ecx +
call sub_4AC940  +
mov edx 28h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
lea esi [esi+0] +
test eax eax +
jz loc_4B0943  +
mov edx [ebx+20h] +
cmp edx [ebx+24h] +
jge loc_4B0943  +
mov ecx [ebx+1Ch] +
mov [ecx+edx*4] eax +
add edx 1 +
mov eax [esp+2Ch+var_10] +
mov [ebx+20h] edx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebx +
call sub_4B28D0  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
lea edx [ecx+1] +
mov [ebx+0Ch] edx +
movzx eax byte ptr [ecx+1] +
cmp al 5Fh +
jz loc_4B0FB3  +
sub eax 30h +
cmp al 9 +
ja loc_4B0FFA  +
mov ecx edx +
nop   +
add ecx 1 +
mov [ebx+0Ch] ecx +
movzx eax byte ptr [ecx] +
sub eax 30h +
cmp al 9 +
jbe loc_4B0A60  +
sub ecx edx +
mov eax ebx +
call sub_4AC560  +
test eax eax +
mov esi eax +
jz loc_4B0A8B  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 5Fh +
jz loc_4B0FB5  +
xor eax eax +
jmp loc_4B0B69  +
add ecx 1 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx 25h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
mov eax ebx +
call sub_4B2150  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
add ecx 1 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx 26h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
lea eax [ecx+1] +
mov [ebx+0Ch] eax +
cmp byte ptr [ecx+1] 0 +
jz loc_4B0943  +
lea eax [ecx+2] +
mov [ebx+0Ch] eax +
movzx eax byte ptr [ecx+1] +
sub eax 46h +
cmp al 30h +
ja loc_4B0943  +
movzx eax al +
jmp ds:off_50BF68[eax*4]  +
add ecx 1 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
test eax eax +
mov esi eax +
jz loc_4B0A8B  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
test eax eax +
jz loc_4B0A8B  +
mov [esp+2Ch+var_2C] eax +
mov ecx esi +
mov edx 2Bh +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
add ecx 1 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx 24h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
add ecx 1 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx 22h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
add ecx 1 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx 23h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
movzx eax byte ptr [ecx+1] +
lea edx [eax-30h] +
cmp dl 9 +
jbe loc_4B0C1B  +
cmp al 5Fh +
jz loc_4B0C1B  +
sub eax 41h +
cmp al 19h +
ja loc_4B0FD9  +
xor edx edx +
mov eax ebx +
call sub_4ACA60  +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_10] eax +
cmp byte ptr [edx] 49h +
jnz loc_4B0945  +
mov eax ebx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_10] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
add ecx 1 +
mov eax ebx +
mov [ebx+0Ch] ecx +
call sub_4AC940  +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_10] eax +
mov esi eax +
cmp byte ptr [edx] 49h +
jz loc_4B10D7  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx 21h +
mov [esp+2Ch+var_2C] esi +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
mov edx [ebx+14h] +
lea eax [eax+eax*4-1E5h] +
cmp edx [ebx+18h] +
lea esi ds:50C680h[eax*4] +
jl loc_4B0F81  +
mov esi large ds:4 +
xor eax eax +
mov edx [esi+4] +
add ecx 1 +
add [ebx+30h] edx +
mov [ebx+0Ch] ecx +
jmp loc_4B0945  +
mov eax ebx +
call sub_4AC8C0  +
mov esi [ebx+0Ch] +
mov [esp+2Ch+var_10] eax +
cmp byte ptr [esi] 49h +
jnz loc_4B0A00  +
mov edx [ebx+38h] +
test edx edx +
jnz loc_4B10FC  +
test eax eax +
jz loc_4B0943  +
mov edx [ebx+20h] +
cmp edx [ebx+24h] +
jge loc_4B0943  +
mov ecx [ebx+1Ch] +
mov [ecx+edx*4] eax +
add edx 1 +
mov eax ebx +
mov [ebx+20h] edx +
call sub_4B21A0  +
jmp loc_4B0C3B  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B0FA6  +
mov eax [ebx+10h] +
lea ecx [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_4B1B25  +
mov dword ptr [eax] 27h +
mov edx offset off_50C8EC +
mov dword ptr [eax+4] offset off_50C8EC +
mov edx [edx+4] +
add [ebx+30h] edx +
jmp loc_4B0945  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B0FA6  +
mov eax [ebx+10h] +
lea ecx [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_4B1B25  +
mov dword ptr [eax] 27h +
mov edx offset off_50C8C4 +
mov dword ptr [eax+4] offset off_50C8C4 +
jmp loc_4B0D53  +
mov eax ebx +
call sub_4B58E0  +
jmp loc_4B0B69  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B0FA6  +
mov eax [ebx+10h] +
lea ecx [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_4B1B25  +
mov dword ptr [eax] 27h +
mov edx offset off_50C8D8 +
mov dword ptr [eax+4] offset off_50C8D8 +
jmp loc_4B0D53  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B0A00  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B0FA6  +
mov eax [ebx+10h] +
lea ecx [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_4B1B25  +
mov dword ptr [eax] 27h +
mov edx offset off_50C900 +
mov dword ptr [eax+4] offset off_50C900 +
jmp loc_4B0D53  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B0FA6  +
mov eax [ebx+10h] +
lea ecx [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_4B1B25  +
mov dword ptr [eax] 27h +
mov edx offset off_50C89C +
mov dword ptr [eax+4] offset off_50C89C +
jmp loc_4B0D53  +
mov ecx 4 +
mov edx offset aAuto +
mov eax ebx +
call sub_4AC560  +
jmp loc_4B0945  +
mov eax [ebx+14h] +
xor esi esi +
cmp eax [ebx+18h] +
jge loc_4B0EA4  +
mov edx [ebx+10h] +
lea esi [eax+eax*2] +
add eax 1 +
mov [ebx+14h] eax +
lea esi [edx+esi*4] +
mov [esp+2Ch+var_10] esi +
mov dword ptr [esi] 2Ch +
movzx eax byte ptr [ecx+2] +
sub eax 30h +
cmp al 9 +
setbe al  +
movzx eax al +
test ax ax +
mov [esi+8] ax +
jnz loc_4B125A  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esi+4] eax +
mov eax [esp+2Ch+var_10] +
mov eax [eax+4] +
test eax eax +
jz loc_4B0943  +
lea eax [ebx+0Ch] +
call sub_4AC7E0  +
mov eax [ebx+0Ch] +
xor edx edx +
cmp byte ptr [eax] 0 +
jz loc_4B0F04  +
lea edx [eax+1] +
mov [ebx+0Ch] edx +
xor edx edx +
cmp byte ptr [eax] 73h +
setz dl  +
mov eax [esp+2Ch+var_10] +
mov [eax+0Ah] dx +
jmp loc_4B0945  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B0FA6  +
mov eax [ebx+10h] +
lea ecx [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_4B1B25  +
mov dword ptr [eax] 27h +
mov edx offset off_50C888 +
mov dword ptr [eax+4] offset off_50C888 +
jmp loc_4B0D53  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B0FA6  +
mov eax [ebx+10h] +
lea ecx [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+ecx*4] +
test eax eax +
jz loc_4B1B25  +
mov dword ptr [eax] 27h +
mov edx offset off_50C8B0 +
mov dword ptr [eax+4] offset off_50C8B0 +
jmp loc_4B0D53  +
mov eax [ebx+10h] +
lea edi [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+edi*4] +
test eax eax +
jz loc_4B1B30  +
mov dword ptr [eax] 27h +
mov [eax+4] esi +
jmp loc_4B0CBA  +
mov edx large ds:4 +
xor eax eax +
jmp loc_4B0D53  +
xor esi esi +
add edx 1 +
mov [ebx+0Ch] edx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov ecx esi +
mov edx 2Ah +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B0B69  +
mov eax ebx +
call sub_4B28D0  +
test eax eax +
mov [esp+2Ch+var_10] eax +
jz loc_4B0943  +
cmp dword ptr [eax] 18h +
jnz loc_4B0A08  +
jmp loc_4B0945  +
mov edi [ebx+34h] +
mov dword ptr [ebx+34h] 1 +
movzx eax byte ptr [ecx+1] +
cmp al 4Ch +
jz loc_4B1294  +
cmp al 54h +
jz loc_4B1346  +
cmp al 73h +
jz loc_4B1178  +
cmp al 66h +
jz loc_4B11B5  +
lea edx [eax-30h] +
cmp dl 9 +
jbe loc_4B1153  +
cmp al 6Fh +
jz loc_4B1143  +
cmp al 74h +
setz dl  +
jnz loc_4B1B14  +
cmp byte ptr [ecx+2] 6Ch +
jz loc_4B1354  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov esi eax +
jz loc_4B12AA  +
mov ecx [eax] +
cmp ecx 31h +
jz loc_4B1462  +
cmp ecx 32h +
jz loc_4B1386  +
cmp ecx 33h +
jnz loc_4B12AA  +
mov [esp+2Ch+var_24] 0 +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B18FE  +
mov eax ebx +
call sub_4B5330  +
cmp [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_2C] eax +
jz loc_4B10B5  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov ecx esi +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
test esi esi +
mov [ebx+34h] edi +
jnz loc_4B0A7F  +
xor eax eax +
jmp loc_4B0B69  +
mov eax ebx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_10] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_10] eax +
mov esi eax +
jmp loc_4B0C76  +
mov eax [ebx+28h] +
mov ebp [ebx+14h] +
mov edi [ebx+20h] +
mov [esp+2Ch+var_24] eax +
mov eax [ebx+30h] +
mov [esp+2Ch+var_20] eax +
mov eax ebx +
call sub_4B21A0  +
mov ecx [ebx+0Ch] +
cmp byte ptr [ecx] 49h +
jz loc_4B126B  +
mov eax [esp+2Ch+var_24] +
mov [ebx+0Ch] esi +
mov [ebx+14h] ebp +
mov [ebx+20h] edi +
mov [ebx+28h] eax +
mov eax [esp+2Ch+var_20] +
mov [ebx+30h] eax +
mov eax [esp+2Ch+var_10] +
jmp loc_4B0A00  +
cmp byte ptr [ecx+2] 6Eh +
jnz loc_4B1051  +
add ecx 3 +
mov [ebx+0Ch] ecx +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
mov esi eax +
jz loc_4B12AA  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 49h +
jz loc_4B149B  +
mov [ebx+34h] edi +
jmp loc_4B0A82  +
movzx eax byte ptr [ecx+2] +
cmp al 72h +
jz loc_4B14F2  +
cmp al 70h +
jnz loc_4B1051  +
add ecx 3 +
mov eax ebx +
mov [ebx+0Ch] ecx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B10C5  +
cmp byte ptr [ecx+2] 70h +
jnz loc_4B1051  +
lea eax [ecx+3] +
mov [ebx+0Ch] eax +
cmp byte ptr [ecx+3] 54h +
jnz loc_4B1721  +
add ecx 4 +
xor edx edx +
mov [ebx+0Ch] ecx +
mov eax [ebx+14h] +
cmp eax [ebx+18h] +
jge loc_4B12AA  +
imul esi eax +
add eax 1 +
add esi [ebx+10h] +
mov [ebx+14h] eax +
test esi esi +
jz loc_4B12AA  +
mov [esi+4] edx +
mov edx [ebx+0Ch] +
mov dword ptr [esi] 6 +
jmp loc_4B1170  +
cmp byte ptr [ecx+3] 6Eh +
jnz loc_4B089F  +
add ecx 4 +
mov [ebx+0Ch] ecx +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
jz loc_4B14C2  +
mov edx [ebx+0Ch] +
mov ecx eax +
cmp byte ptr [edx] 49h +
jnz loc_4B090A  +
mov [esp+2Ch+var_20] eax +
mov eax ebx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_20] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B090A  +
lea eax [ebx+0Ch] +
call sub_4AC7E0  +
mov esi [esp+2Ch+var_10] +
jmp loc_4B0ECA  +
mov ecx [esp+2Ch+var_10] +
test ecx ecx +
jz loc_4B0943  +
mov edx [ebx+20h] +
cmp edx [ebx+24h] +
jge loc_4B0943  +
mov esi [ebx+1Ch] +
mov [esi+edx*4] ecx +
add edx 1 +
mov [ebx+20h] edx +
jmp loc_4B0C3B  +
mov eax ebx +
call sub_4B33A0  +
mov esi eax +
jmp loc_4B10C5  +
cmp al 77h +
jz loc_4B13DA  +
mov [ebx+34h] edi +
xor eax eax +
nop   +
jmp loc_4B0B69  +
movzx eax byte ptr [ecx+3] +
cmp al 72h +
jz loc_4B17EA  +
cmp al 70h +
jnz loc_4B089F  +
add ecx 4 +
mov eax ebx +
mov [ebx+0Ch] ecx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B090A  +
cmp byte ptr [ecx+3] 70h +
jnz loc_4B089F  +
lea eax [ecx+4] +
mov [ebx+0Ch] eax +
cmp byte ptr [ecx+4] 54h +
jnz loc_4B177F  +
add ecx 5 +
xor esi esi +
mov [ebx+0Ch] ecx +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B14C2  +
imul eax edx +
xor ecx ecx +
add eax [ebx+10h] +
add edx 1 +
mov [ebx+14h] edx +
test eax eax +
jz loc_4B090A  +
mov dword ptr [eax] 6 +
mov ecx eax +
mov [eax+4] esi +
jmp loc_4B090A  +
mov eax ebx +
call sub_4AC8C0  +
mov esi eax +
jmp loc_4B10C5  +
xor esi esi +
test dl dl +
jnz loc_4B17C8  +
add dword ptr [ebx+0Ch] 2 +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B10C5  +
mov eax [eax+4] +
xor ebp ebp +
cmp eax 1 +
jz loc_4B1A85  +
jle loc_4B14C9  +
cmp eax 2 +
jz loc_4B1651  +
cmp eax 3 +
jnz loc_4B12AA  +
mov [esp+2Ch+var_28] offset aQu +
mov [esp+2Ch+var_2C] ebp +
call strcmp  +
test eax eax +
jz loc_4B17A8  +
cmp byte ptr [ebp+0] 6Eh +
jnz loc_4B12AA  +
movzx eax byte ptr [ebp+1] +
cmp al 61h +
jnz loc_4B12A2  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_24] eax +
call sub_4B0800  +
mov ebp eax +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B1AF9  +
cmp dl 70h +
jz loc_4B1AD8  +
cmp dl 69h +
jnz loc_4B12AA  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B12AA  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_2C] eax +
mov ecx ebp +
mov edx 3Ah +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_24] +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx esi +
mov edx 38h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B10C5  +
mov eax [eax+4] +
mov [esp+2Ch+var_24] ecx +
mov ebp [eax] +
mov eax [eax+8] +
sub eax 2 +
add [ebx+30h] eax +
mov [esp+2Ch+var_28] offset aSt +
mov [esp+2Ch+var_2C] ebp +
call strcmp  +
mov ecx [esp+2Ch+var_24] +
test eax eax +
jz loc_4B1798  +
mov eax [esi+4] +
mov eax [eax+0Ch] +
jmp loc_4B138B  +
mov eax ebx +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B10C5  +
cmp al 77h +
jz loc_4B15CD  +
xor ecx ecx +
jmp loc_4B090A  +
test eax eax +
nop   +
lea esi [esi+0] +
jnz loc_4B12AA  +
mov ecx esi +
mov edx 34h +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B10C5  +
add ecx 3 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
mov eax ebx +
call sub_4B1DB0  +
mov ebp eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B175F  +
mov [esp+2Ch+var_2C] ebp +
mov ecx esi +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B10C5  +
mov eax ebx +
call sub_4AC8C0  +
mov ecx eax +
jmp loc_4B090A  +
mov eax ebx +
call sub_4B33A0  +
mov ecx eax +
jmp loc_4B090A  +
mov eax [eax+4] +
mov [esp+2Ch+var_20] ecx +
mov edi [eax] +
mov eax [eax+8] +
sub eax 2 +
add [ebx+30h] eax +
mov [esp+2Ch+var_28] offset aSt +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
mov ecx [esp+2Ch+var_20] +
test eax eax +
jz loc_4B1A12  +
mov eax [esi+4] +
mov eax [eax+0Ch] +
cmp eax 1 +
jz loc_4B19E4  +
jle loc_4B18CB  +
cmp eax 2 +
jz loc_4B1831  +
cmp eax 3 +
jnz loc_4B14C2  +
mov [esp+2Ch+var_28] offset aQu +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B1A67  +
cmp byte ptr [edi] 6Eh +
jnz loc_4B14C2  +
movzx eax byte ptr [edi+1] +
cmp al 61h +
jnz loc_4B14BA  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov edi eax +
call sub_4B0800  +
mov ebp eax +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B1A5A  +
cmp dl 70h +
jz loc_4B1A39  +
cmp dl 69h +
jnz loc_4B14C2  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B14C2  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_2C] eax +
mov ecx ebp +
mov edx 3Ah +
mov eax ebx +
call sub_4AC500  +
mov ecx edi +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx esi +
mov edx 38h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B090A  +
mov eax [esi+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B1738  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_24] eax +
mov [esp+2Ch+var_28] offset aCl +
mov [esp+2Ch+var_2C] ebp +
call strcmp  +
test eax eax +
jz loc_4B17D7  +
mov [esp+2Ch+var_28] offset unk_50BE2F +
mov [esp+2Ch+var_2C] ebp +
call strcmp  +
test eax eax +
jz loc_4B16AF  +
mov [esp+2Ch+var_28] offset unk_50BE32 +
mov [esp+2Ch+var_2C] ebp +
call strcmp  +
test eax eax +
jnz loc_4B1B06  +
mov eax ebx +
call sub_4B1DB0  +
mov ebp eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B19C5  +
mov ecx [esp+2Ch+var_24] +
mov edx 37h +
mov eax ebx +
mov [esp+2Ch+var_2C] ebp +
call sub_4AC500  +
mov ecx esi +
mov edx 36h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B10C5  +
xor esi esi +
test dl dl +
jnz loc_4B18EF  +
add dword ptr [ebx+0Ch] 2 +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B090A  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B11D7  +
jmp loc_4B12AA  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B174E  +
sub eax 72h +
cmp al 1 +
ja loc_4B1660  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_24] eax +
jmp loc_4B166B  +
mov eax ebx +
call sub_4B21A0  +
mov ecx ebp +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B151A  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov esi eax +
jnz loc_4B1314  +
xor ecx ecx +
jmp loc_4B090A  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B10B5  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_24] eax +
mov eax ebx +
call sub_4B5330  +
mov ebp eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B1426  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
jmp loc_4B135E  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ebp eax +
jmp loc_4B16C4  +
add ecx 4 +
mov [ebx+0Ch] ecx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
mov eax ebx +
call sub_4B1DB0  +
mov ebp eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B192C  +
mov [esp+2Ch+var_2C] ebp +
mov ecx esi +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B090A  +
mov eax [eax+4] +
xor edi edi +
jmp loc_4B157F  +
mov eax [esi+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B195F  +
mov eax ebx +
call sub_4B5330  +
mov ebp eax +
mov [esp+2Ch+var_28] offset aCl +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B194C  +
mov [esp+2Ch+var_28] offset unk_50BE2F +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B188D  +
mov [esp+2Ch+var_28] offset unk_50BE32 +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jnz loc_4B1984  +
mov eax ebx +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B1992  +
mov ecx ebp +
mov edx 37h +
mov [esp+2Ch+var_2C] edi +
mov eax ebx +
call sub_4AC500  +
mov ecx esi +
mov edx 36h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B090A  +
test eax eax +
jnz loc_4B14C2  +
mov ecx esi +
mov edx 34h +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B090A  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
jmp loc_4B16F9  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B109A  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B08E2  +
mov eax ebx +
call sub_4B21A0  +
mov ecx ebp +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B1812  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov edi eax +
jmp loc_4B18A2  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B1975  +
sub eax 72h +
cmp al 1 +
ja loc_4B1840  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov ebp eax +
jmp loc_4B1849  +
mov eax ebx +
call sub_4B5330  +
mov edi eax +
jmp loc_4B18A2  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edi eax +
jmp loc_4B18A2  +
cmp al 69h +
jz loc_4B0895  +
lea esi [esi+0] +
jmp loc_4B089F  +
mov eax ebx +
call sub_4B21A0  +
mov ecx ebp +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ebp eax +
jmp loc_4B16C4  +
xor ebp ebp +
test edi edi +
jz loc_4B19F8  +
movzx eax byte ptr [edi] +
cmp al 6Dh +
jnz loc_4B1A06  +
xor ebp ebp +
cmp al [edi+1] +
jz loc_4B1A22  +
cmp ecx 33h +
jnz loc_4B08DB  +
jmp loc_4B08CF  +
cmp al 70h +
jnz loc_4B19F8  +
lea esi [esi+0] +
jmp loc_4B19F1  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B08FA  +
mov eax [ebx+0Ch] +
mov bp 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B19F8  +
add eax 1 +
xor bp bp +
mov [ebx+0Ch] eax +
jmp loc_4B19F8  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B14C2  +
add eax 2 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B1617  +
add eax 1 +
mov [ebx+0Ch] eax +
xor eax eax +
jmp loc_4B1617  +
mov eax ebx +
call sub_4B5330  +
mov edi eax +
mov eax ebx +
call sub_4B5330  +
mov ebp eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B1617  +
test ebp ebp +
mov [esp+2Ch+var_24] 0 +
jz loc_4B1A9D  +
movzx eax byte ptr [ebp+0] +
cmp al 6Dh +
jz loc_4B1AAB  +
cmp al 70h +
jz loc_4B1AAB  +
cmp ecx 33h +
jnz loc_4B1093  +
jmp loc_4B1087  +
cmp al [ebp+1] +
mov [esp+2Ch+var_24] 0 +
jnz loc_4B1A9D  +
mov eax [ebx+0Ch] +
mov [esp+2Ch+var_24] 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B1A9D  +
add eax 1 +
mov [ebx+0Ch] eax +
mov [esp+2Ch+var_24] 0 +
jmp loc_4B1A9D  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B12AA  +
add eax 2 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B1426  +
add eax 1 +
mov [ebx+0Ch] eax +
xor eax eax +
jmp loc_4B1426  +
mov eax ebx +
call sub_4B5330  +
mov ebp eax +
jmp loc_4B16C4  +
cmp al 69h +
jz loc_4B1047  +
lea esi [esi+0] +
jmp loc_4B1051  +
mov edx large ds:4 +
jmp loc_4B0D53  +
mov esi large ds:4 +
jmp loc_4B0CBA  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov [esp+1Ch+var_10] eax +
mov eax [eax+0Ch] +
cmp byte ptr [eax] 0 +
jz loc_4B1BE4  +
mov esi [esp+1Ch+var_10] +
lea edx [eax+1] +
mov [esi+0Ch] edx +
movzx edi byte ptr [eax] +
cmp byte ptr [eax+1] 0 +
jz loc_4B1CD4  +
lea edx [eax+2] +
mov [esi+0Ch] edx +
movzx eax byte ptr [eax+1] +
mov [esp+1Ch+var_11] al +
mov eax edi +
cmp al 76h +
jnz loc_4B1C56  +
movzx eax [esp+1Ch+var_11] +
sub eax 30h +
cmp al 9 +
ja loc_4B1BEB  +
mov edi [esp+1Ch+var_10] +
mov eax edi +
call sub_4AC940  +
mov edx [edi+14h] +
cmp edx [edi+18h] +
jge loc_4B1C4C  +
mov esi [esp+1Ch+var_10] +
lea ebx [edx+edx*2] +
add edx 1 +
mov ecx [esi+10h] +
mov [esi+14h] edx +
lea ecx [ecx+ebx*4] +
test ecx ecx +
jz loc_4B1C4C  +
test eax eax +
jz loc_4B1C4C  +
movsx edx [esp+1Ch+var_11] +
mov [ecx+8] eax +
mov eax ecx +
mov dword ptr [ecx] 32h +
sub edx 30h +
mov [ecx+4] edx +
jmp loc_4B1C4E  +
xor edi edi +
mov [esp+1Ch+var_11] 0 +
mov ebx 3Dh +
xor eax eax +
mov [esp+1Ch+var_18] ebx +
jmp loc_4B1C08  +
mov ebx edi +
cmp cl bl +
jle loc_4B1C43  +
mov [esp+1Ch+var_18] edx +
cmp eax [esp+1Ch+var_18] +
jz loc_4B1C4C  +
mov edx [esp+1Ch+var_18] +
mov ebx edi +
sub edx eax +
mov ecx edx +
shr ecx 1Fh +
add edx ecx +
sar edx 1 +
add edx eax +
mov ecx edx +
shl ecx 4 +
mov esi ds:off_50CAA0[ecx] +
lea ebp off_50CAA0[ecx] +
movzx ecx byte ptr [esi] +
cmp bl cl +
jnz loc_4B1BF8  +
movzx ecx byte ptr [esi+1] +
cmp [esp+1Ch+var_11] cl +
jz loc_4B1CA0  +
cmp cl [esp+1Ch+var_11] +
jg loc_4B1BFE  +
lea eax [edx+1] +
cmp eax [esp+1Ch+var_18] +
jnz loc_4B1C08  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp [esp+1Ch+var_11] 76h +
jnz loc_4B1BEB  +
mov eax edi +
cmp al 63h +
jnz loc_4B1BEB  +
mov edi [esp+1Ch+var_10] +
mov eax [edi+34h] +
mov ebx [edi+38h] +
test eax eax +
setz al  +
movzx eax al +
mov [edi+38h] eax +
mov [esp+1Ch+var_1C] edi +
call sub_4B0800  +
mov edx 33h +
mov [edi+38h] ebx +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax edi +
call sub_4AC500  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edi [esp+1Ch+var_10] +
xor eax eax +
mov ecx [edi+14h] +
cmp ecx [edi+18h] +
jge loc_4B1C4E  +
mov edx [edi+10h] +
lea ebx [ecx+ecx*2] +
add ecx 1 +
mov [edi+14h] ecx +
lea edx [edx+ebx*4] +
test edx edx +
jz loc_4B1C4E  +
mov dword ptr [edx] 31h +
mov eax edx +
mov [edx+4] ebp +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov [esp+1Ch+var_11] 0 +
jmp loc_4B1B7C  +
***
mov ebx eax +
sub esp 24h +
mov eax [eax+0Ch] +
mov [esp+24h+var_8] 0 +
movzx edx byte ptr [eax] +
test dl dl +
jz loc_4B1D80  +
cmp dl 45h +
jz loc_4B1D80  +
cmp dl 2Eh +
jz loc_4B1D80  +
lea esi [esp+24h+var_8] +
jmp loc_4B1D54  +
cmp byte ptr [eax+1] 45h +
jz loc_4B1D64  +
mov [esp+24h+var_24] ebx +
call sub_4B0800  +
test eax eax +
jz loc_4B1D80  +
mov ecx eax +
mov edx 2Eh +
mov [esp+24h+var_24] 0 +
mov eax ebx +
call sub_4AC500  +
test eax eax +
mov [esi] eax +
jz loc_4B1D80  +
lea esi [eax+8] +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
test dl dl +
jz loc_4B1D64  +
cmp dl 45h +
jz loc_4B1D64  +
cmp dl 2Eh +
jz loc_4B1D64  +
cmp dl 4Fh +
jz loc_4B1D10  +
cmp dl 52h +
jnz loc_4B1D16  +
cmp byte ptr [eax+1] 45h +
jnz loc_4B1D16  +
mov eax [esp+24h+var_8] +
test eax eax +
jz loc_4B1D80  +
mov edx [eax+8] +
test edx edx +
jz loc_4B1D88  +
add esp 24h +
pop ebx  +
pop esi  +
retn   +
add esp 24h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
mov edx [eax+4] +
cmp dword ptr [edx] 27h +
jnz loc_4B1D73  +
mov edx [edx+4] +
cmp dword ptr [edx+10h] 9 +
jnz loc_4B1D73  +
mov edx [edx+4] +
sub [ebx+30h] edx +
mov dword ptr [eax+4] 0 +
jmp loc_4B1D73  +
***
push esi  +
mov ebx eax +
sub esp 14h +
mov eax [eax+0Ch] +
cmp byte ptr [eax] 4Ah +
jz loc_4B2127  +
xor esi esi +
test edx edx +
jnz loc_4B212D  +
mov eax ebx +
call sub_4B1CE0  +
test eax eax +
jz loc_4B2140  +
mov [esp+14h+var_14] eax +
mov ecx esi +
mov edx 29h +
mov eax ebx +
call sub_4AC500  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
add eax 1 +
mov [ebx+0Ch] eax +
mov [esp+14h+var_14] ebx +
call sub_4B0800  +
test eax eax +
mov esi eax +
jnz loc_4B2105  +
nop   +
lea esi [esi+0] +
xor eax eax +
jmp loc_4B2121  +
***
sub esp 8 +
mov eax [eax+0Ch] +
cmp byte ptr [eax] 46h +
jz loc_4B2165  +
add esp 8 +
xor eax eax +
pop ebx  +
retn   +
lea edx [eax+1] +
mov [ebx+0Ch] edx +
cmp byte ptr [eax+1] 59h +
jnz loc_4B2177  +
add eax 2 +
mov [ebx+0Ch] eax +
mov edx 1 +
mov eax ebx +
call sub_4B20F0  +
mov edx eax +
mov eax ebx +
call sub_4AC6B0  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 45h +
jnz loc_4B215E  +
add edx 1 +
mov [ebx+0Ch] edx +
add esp 8 +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 3Ch +
mov eax [eax+2Ch] +
mov edx [ebp+0Ch] +
mov [esp+48h+var_34] eax +
movzx eax byte ptr [edx] +
sub eax 49h +
cmp al 1 +
ja loc_4B2330  +
lea eax [edx+1] +
mov [ebp+0Ch] eax +
cmp byte ptr [edx+1] 45h +
jz loc_4B264A  +
mov [esp+48h+var_1C] 0 +
lea ebx [esp+48h+var_1C] +
movzx edx byte ptr [edx+1] +
jmp loc_4B222F  +
sub edx 49h +
cmp dl 1 +
ja loc_4B2350  +
mov eax ebp +
call sub_4B21A0  +
mov ecx eax +
test ecx ecx +
jz loc_4B2330  +
mov [esp+48h+var_48] 0 +
mov edx 2Fh +
mov eax ebp +
call sub_4AC500  +
test eax eax +
mov [ebx] eax +
jz loc_4B2330  +
lea ebx [eax+8] +
mov eax [ebp+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B24C4  +
cmp dl 4Ch +
jz loc_4B2340  +
jle loc_4B21E3  +
cmp dl 58h +
lea esi [esi+0] +
jnz loc_4B2350  +
lea esi [eax+1] +
mov edi [ebp+34h] +
mov [ebp+0Ch] esi +
mov dword ptr [ebp+34h] 1 +
movzx edx byte ptr [eax+1] +
mov [esp+48h+var_3C] edi +
cmp dl 4Ch +
jz loc_4B24E0  +
cmp dl 54h +
jz loc_4B24F1  +
cmp dl 73h +
jz loc_4B2430  +
cmp dl 66h +
jz loc_4B2472  +
lea ecx [edx-30h] +
cmp cl 9 +
jbe loc_4B2370  +
cmp dl 6Fh +
jz loc_4B2360  +
cmp dl 74h +
setz cl  +
jnz loc_4B2872  +
cmp byte ptr [eax+2] 6Ch +
jz loc_4B2502  +
mov eax ebp +
call sub_4B1B40  +
test eax eax +
mov [esp+48h+var_38] eax +
jz loc_4B2420  +
mov eax [esp+48h+var_38] +
mov edx [eax] +
cmp edx 31h +
jz loc_4B23A4  +
cmp edx 32h +
jz loc_4B2540  +
cmp edx 33h +
jnz loc_4B2420  +
xor esi esi +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B2775  +
mov eax ebp +
call sub_4B5330  +
test esi esi +
mov [esp+48h+var_48] eax +
jz loc_4B230E  +
mov ecx eax +
mov edx 37h +
mov eax ebp +
call sub_4AC500  +
mov [esp+48h+var_48] eax +
mov ecx [esp+48h+var_38] +
mov edx 35h +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov ecx eax +
mov eax [esp+48h+var_3C] +
mov [ebp+34h] eax +
cmp byte ptr [edx] 45h +
jz loc_4B2399  +
nop   +
xor eax eax +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebp +
call sub_4B33A0  +
mov ecx eax +
jmp loc_4B21F8  +
mov [esp+48h+var_48] ebp +
call sub_4B0800  +
mov ecx eax +
jmp loc_4B21F8  +
cmp byte ptr [eax+2] 6Eh +
jnz loc_4B22AD  +
add eax 3 +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B1DB0  +
mov edx [ebp+0Ch] +
test eax eax +
jz loc_4B2423  +
cmp byte ptr [edx] 49h +
mov ecx eax +
jz loc_4B2554  +
mov eax [esp+48h+var_3C] +
mov [ebp+34h] eax +
cmp byte ptr [edx] 45h +
jnz loc_4B2330  +
add edx 1 +
mov [ebp+0Ch] edx +
jmp loc_4B21F8  +
mov eax [eax+4] +
mov edi offset aSt +
mov esi [eax] +
mov [esp+48h+var_2C] eax +
mov eax [eax+8] +
mov [esp+48h+var_30] esi +
lea ecx [eax-2] +
add [ebp+30h] ecx +
mov ecx 3 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jz loc_4B278C  +
mov eax [esp+48h+var_2C] +
mov eax [eax+0Ch] +
cmp eax 1 +
jz loc_4B2885  +
jle loc_4B2580  +
cmp eax 2 +
jz loc_4B25A9  +
cmp eax 3 +
jnz loc_4B2420  +
mov esi [esp+48h+var_30] +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B27BE  +
mov eax [esp+48h+var_30] +
cmp byte ptr [eax] 6Eh +
jz loc_4B26C1  +
nop   +
mov edx [ebp+0Ch] +
xor ecx ecx +
jmp loc_4B238D  +
movzx edx byte ptr [eax+2] +
cmp dl 72h +
jz loc_4B266A  +
cmp dl 70h +
jnz loc_4B22AD  +
add eax 3 +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B5330  +
mov edx 49h +
mov [esp+48h+var_48] 0 +
mov ecx eax +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
cmp byte ptr [eax+2] 70h +
jnz loc_4B22AD  +
lea edx [eax+3] +
mov [ebp+0Ch] edx +
cmp byte ptr [eax+3] 54h +
jnz loc_4B26AA  +
add eax 4 +
xor edx edx +
mov [ebp+0Ch] eax +
mov eax [ebp+14h] +
cmp eax [ebp+18h] +
jge loc_4B2420  +
mov ecx [ebp+10h] +
lea esi [eax+eax*2] +
add eax 1 +
mov [ebp+14h] eax +
lea ecx [ecx+esi*4] +
test ecx ecx +
jz loc_4B274D  +
mov [ecx+4] edx +
mov edx [ebp+0Ch] +
mov dword ptr [ecx] 6 +
jmp loc_4B238D  +
add eax 1 +
mov [ebp+0Ch] eax +
mov eax [esp+48h+var_34] +
mov [ebp+2Ch] eax +
mov eax [esp+48h+var_1C] +
add esp 3Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebp +
call sub_4B33A0  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
mov eax ebp +
call sub_4AC8C0  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
xor edi edi +
test cl cl +
jnz loc_4B2799  +
add esi 2 +
mov edx 45h +
mov [ebp+0Ch] esi +
mov eax ebp +
call sub_4B35C0  +
mov ecx edi +
mov edx 30h +
mov [esp+48h+var_48] eax +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
mov eax [esp+48h+var_38] +
mov [esp+48h+var_30] 0 +
mov eax [eax+4] +
jmp loc_4B23DF  +
mov [esp+48h+var_38] eax +
mov eax ebp +
call sub_4B21A0  +
mov ecx [esp+48h+var_38] +
mov edx 4 +
mov [esp+48h+var_48] eax +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
test eax eax +
jnz loc_4B2420  +
mov ecx [esp+48h+var_38] +
mov edx 34h +
mov eax ebp +
mov [esp+48h+var_48] 0 +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
mov eax [esp+48h+var_38] +
mov eax [eax+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B27DC  +
mov eax ebp +
call sub_4B5330  +
mov [esp+48h+var_2C] eax +
mov esi [esp+48h+var_30] +
mov edi offset aCl +
mov ecx 3 +
cmps   +
jz loc_4B27AB  +
mov esi [esp+48h+var_30] +
mov edi offset unk_50BE2F +
mov ecx 3 +
cmps   +
jz loc_4B2605  +
mov esi [esp+48h+var_30] +
mov edi offset unk_50BE32 +
mov ecx 3 +
cmps   +
jnz loc_4B2803  +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B2832  +
mov ecx [esp+48h+var_2C] +
mov edx 37h +
mov eax ebp +
mov [esp+48h+var_48] esi +
call sub_4AC500  +
mov ecx [esp+48h+var_38] +
mov edx 36h +
mov [esp+48h+var_48] eax +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
add edx 2 +
xor ecx ecx +
mov [ebp+0Ch] edx +
mov eax ebp +
mov edx 2Fh +
mov [esp+48h+var_48] 0 +
call sub_4AC500  +
jmp loc_4B2332  +
add eax 3 +
mov [ebp+0Ch] eax +
mov [esp+48h+var_48] ebp +
call sub_4B0800  +
mov esi eax +
mov eax ebp +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B2755  +
mov [esp+48h+var_48] edi +
mov ecx esi +
mov edx 1 +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov ecx eax +
jmp loc_4B238D  +
mov eax ebp +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B2494  +
jmp loc_4B2420  +
movzx eax byte ptr [eax+1] +
cmp al 61h +
jnz loc_4B2811  +
mov edx 5Fh +
mov eax ebp +
call sub_4B35C0  +
mov [esp+48h+var_48] ebp +
mov esi eax +
call sub_4B0800  +
mov edx [ebp+0Ch] +
mov edi eax +
movzx eax byte ptr [edx] +
cmp al 45h +
jz loc_4B2825  +
xor ecx ecx +
cmp al 70h +
jz loc_4B2851  +
cmp al 69h +
jnz loc_4B238D  +
cmp byte ptr [edx+1] 6Ch +
jnz loc_4B238D  +
mov eax ebp +
call sub_4B5330  +
mov [esp+48h+var_48] eax +
mov ecx edi +
mov edx 3Ah +
mov eax ebp +
call sub_4AC500  +
mov ecx esi +
mov edx 39h +
mov [esp+48h+var_48] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+48h+var_38] +
mov edx 38h +
mov [esp+48h+var_48] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
mov edx [ebp+0Ch] +
jmp loc_4B238D  +
mov eax ebp +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+48h+var_48] eax +
mov eax ebp +
call sub_4AC500  +
mov [esp+48h+var_48] eax +
jmp loc_4B2692  +
add eax 1 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
jmp loc_4B22F6  +
mov [esp+48h+var_48] ebp +
call sub_4B0800  +
jmp loc_4B230B  +
mov [esp+48h+var_48] ebp +
call sub_4B0800  +
mov esi [ebp+0Ch] +
mov edi eax +
jmp loc_4B250C  +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B261A  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
mov eax ebp +
call sub_4B5330  +
mov edi eax +
mov eax ebp +
call sub_4B5330  +
jmp loc_4B2716  +
movzx eax byte ptr [eax] +
lea edx [eax-63h] +
cmp dl 1 +
jbe loc_4B27F2  +
sub eax 72h +
cmp al 1 +
ja loc_4B25BC  +
mov [esp+48h+var_48] ebp +
call sub_4B0800  +
mov [esp+48h+var_2C] eax +
jmp loc_4B25C7  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
jmp loc_4B261A  +
cmp al 77h +
jz loc_4B26CD  +
lea esi [esi+0] +
jmp loc_4B2420  +
add edx 1 +
xor eax eax +
mov [ebp+0Ch] edx +
jmp loc_4B2716  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+48h+var_48] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B261A  +
cmp byte ptr [edx+1] 69h +
jnz loc_4B238D  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
jmp loc_4B2716  +
cmp dl 69h +
jz loc_4B22A3  +
nop   +
lea esi [esi+0] +
jmp loc_4B22AD  +
mov eax [esp+48h+var_30] +
xor esi esi +
test eax eax +
jz loc_4B289A  +
movzx eax byte ptr [eax] +
cmp al 6Dh +
jz loc_4B28A8  +
cmp al 70h +
jz loc_4B28A8  +
cmp edx 33h +
jnz loc_4B22EF  +
jmp loc_4B22E3  +
mov edi [esp+48h+var_30] +
xor esi esi +
cmp al [edi+1] +
jnz loc_4B289A  +
mov eax [ebp+0Ch] +
mov si 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B289A  +
add eax 1 +
xor si si +
mov [ebp+0Ch] eax +
jmp loc_4B289A  +
***
push esi  +
mov esi eax +
push ebx  +
sub esp 2Ch +
mov edx [eax+0Ch] +
movzx eax byte ptr [edx] +
cmp al 53h +
jz loc_4B2A54  +
jle loc_4B2933  +
cmp al 55h +
jz loc_4B2920  +
cmp al 5Ah +
nop   +
jnz loc_4B2A00  +
add edx 1 +
mov eax esi +
mov [esi+0Ch] edx +
xor edx edx +
call sub_4B2CE0  +
mov edx [esi+0Ch] +
cmp byte ptr [edx] 45h +
mov ebx eax +
jz loc_4B2BC0  +
xor ebx ebx +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
call sub_4B1DB0  +
mov ebx eax +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 4Eh +
jnz loc_4B2A00  +
add edx 1 +
mov ecx 1 +
mov [esi+0Ch] edx +
mov eax esi +
lea edx [esp+30h+var_14] +
call sub_4AC5B0  +
test eax eax +
mov edi eax +
jz loc_4B2913  +
xor edx edx +
mov eax esi +
call sub_4AC6B0  +
xor ebp ebp +
mov [esp+30h+var_24] eax +
mov eax [esi+0Ch] +
movzx ebx byte ptr [eax] +
lea esi [esi+0] +
test bl bl +
jz loc_4B29F2  +
cmp bl 44h +
jz loc_4B2B56  +
lea edx [ebx-30h] +
cmp dl 9 +
jbe loc_4B2B00  +
lea edx [ebx-61h] +
cmp dl 19h +
jbe loc_4B2B00  +
cmp bl 43h +
jz loc_4B2B00  +
cmp bl 55h +
jz loc_4B2B00  +
cmp bl 4Ch +
jz loc_4B2B00  +
cmp bl 53h +
jz loc_4B2BA0  +
cmp bl 49h +
jz loc_4B2B80  +
cmp bl 54h +
jz loc_4B2BB1  +
cmp bl 45h +
nop   +
jz loc_4B2C9D  +
cmp bl 4Dh +
jnz loc_4B29F2  +
test ebp ebp +
lea esi [esi+0] +
jz loc_4B29F2  +
lea edx [eax+1] +
mov [esi+0Ch] edx +
movzx ebx byte ptr [eax+1] +
mov eax edx +
test bl bl +
jnz loc_4B2974  +
mov dword ptr [edi] 0 +
xor ebx ebx +
jmp loc_4B2915  +
mov eax esi +
call sub_4B1DB0  +
mov edx [esi+0Ch] +
cmp byte ptr [edx] 49h +
mov ebx eax +
jnz loc_4B2929  +
test eax eax +
jz loc_4B2913  +
mov eax [esi+20h] +
cmp eax [esi+24h] +
jge loc_4B2913  +
mov edx [esi+1Ch] +
mov [edx+eax*4] ebx +
add eax 1 +
mov [esi+20h] eax +
mov eax esi +
call sub_4B21A0  +
mov ecx ebx +
mov edx 4 +
mov [esp+30h+var_30] eax +
mov eax esi +
call sub_4AC500  +
mov ebx eax +
jmp loc_4B2929  +
cmp byte ptr [edx+1] 74h +
jz loc_4B2A92  +
xor edx edx +
mov eax esi +
call sub_4ACA60  +
mov edi eax +
mov eax [esi+0Ch] +
mov ebx edi +
cmp byte ptr [eax] 49h +
jnz loc_4B2929  +
mov eax esi +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+30h+var_30] eax +
mov eax esi +
call sub_4AC500  +
mov ebx eax +
jmp loc_4B2929  +
add edx 2 +
mov eax esi +
mov [esi+0Ch] edx +
call sub_4B1DB0  +
mov ecx 3 +
mov edx offset aStd +
mov ebx eax +
mov eax esi +
call sub_4AC560  +
mov edx 1 +
mov [esp+30h+var_30] ebx +
mov ecx eax +
mov eax esi +
call sub_4AC500  +
add dword ptr [esi+30h] 3 +
mov edi eax +
mov eax [esi+0Ch] +
mov ebx edi +
cmp byte ptr [eax] 49h +
jnz loc_4B2929  +
test edi edi +
jz loc_4B2913  +
mov eax [esi+20h] +
cmp eax [esi+24h] +
jge loc_4B2913  +
mov edx [esi+1Ch] +
mov [edx+eax*4] edi +
add eax 1 +
mov [esi+20h] eax +
jmp loc_4B2A73  +
mov eax esi +
call sub_4B1DB0  +
test ebp ebp +
jz loc_4B2B70  +
mov edx 1 +
mov [esp+30h+var_30] eax +
mov ecx ebp +
mov eax esi +
call sub_4AC500  +
mov ebp eax +
cmp bl 53h +
jz loc_4B2B4B  +
mov eax [esi+0Ch] +
cmp byte ptr [eax] 45h +
jz loc_4B2B74  +
test ebp ebp +
jz loc_4B29F2  +
mov eax [esi+20h] +
cmp eax [esi+24h] +
jge loc_4B29F2  +
mov edx [esi+1Ch] +
mov [edx+eax*4] ebp +
add eax 1 +
mov [esi+20h] eax +
mov eax [esi+0Ch] +
movzx ebx byte ptr [eax] +
jmp loc_4B2970  +
movzx eax byte ptr [eax+1] +
and eax 0FFFFFFDFh +
cmp al 54h +
jnz loc_4B2B00  +
mov [esp+30h+var_30] esi +
call sub_4B0800  +
test ebp ebp +
jnz loc_4B2B0B  +
lea esi [esi+0] +
mov ebp eax +
jmp loc_4B2B1E  +
mov ebx 45h +
jmp loc_4B297D  +
test ebp ebp +
jz loc_4B29F2  +
mov eax esi +
call sub_4B21A0  +
mov edx 4 +
jmp loc_4B2B10  +
mov edx 1 +
mov eax esi +
call sub_4ACA60  +
jmp loc_4B2B07  +
mov eax esi +
call sub_4AC8C0  +
jmp loc_4B2B07  +
lea eax [edx+1] +
mov [esi+0Ch] eax +
movzx eax byte ptr [edx+1] +
cmp al 73h +
jz loc_4B2C72  +
cmp al 64h +
mov ebp 0FFFFFFFFh +
jz loc_4B2C41  +
mov eax esi +
call sub_4B28D0  +
test eax eax +
mov edi eax +
jz loc_4B2BF4  +
mov eax [eax] +
cmp eax 44h +
jz loc_4B2BF4  +
cmp eax 46h +
jnz loc_4B2C60  +
cmp ebp 0FFFFFFFFh +
mov edx edi +
jz loc_4B2C24  +
mov eax [esi+14h] +
xor edx edx +
cmp eax [esi+18h] +
jge loc_4B2C24  +
mov edx [esi+10h] +
lea ecx [eax+eax*2] +
add eax 1 +
mov [esi+14h] eax +
lea edx [edx+ecx*4] +
test edx edx +
jz loc_4B2C24  +
mov dword ptr [edx] 45h +
mov [edx+8] ebp +
mov [edx+4] edi +
mov [esp+30h+var_30] edx +
mov ecx ebx +
mov eax esi +
mov edx 2 +
call sub_4AC500  +
add esp 2Ch +
mov ebx eax +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add edx 2 +
mov eax esi +
mov [esi+0Ch] edx +
call sub_4AC880  +
test eax eax +
mov ebp eax +
jns loc_4B2BDB  +
xor ebx ebx +
jmp loc_4B2915  +
mov eax esi +
call sub_4AC910  +
test eax eax +
jnz loc_4B2BF4  +
xor ebx ebx +
jmp loc_4B2915  +
add edx 2 +
mov eax esi +
mov [esi+0Ch] edx +
call sub_4AC910  +
test eax eax +
jz loc_4B2913  +
mov ecx 0Eh +
mov edx offset aStringLiteral +
mov eax esi +
call sub_4AC560  +
mov [esp+30h+var_30] eax +
jmp loc_4B2C27  +
test ebp ebp +
mov [edi] ebp +
jz loc_4B2913  +
mov edi [esp+30h+var_24] +
test edi edi +
jz loc_4B2CBA  +
mov eax [esp+30h+var_14] +
mov [esp+30h+var_14] edi +
mov [edi+4] eax +
mov eax [esi+0Ch] +
cmp byte ptr [eax] 45h +
jnz loc_4B2913  +
add eax 1 +
mov ebx [esp+30h+var_14] +
mov [esi+0Ch] eax +
jmp loc_4B2929  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov eax [eax+0Ch] +
movzx ecx byte ptr [eax] +
cmp cl 54h +
jz loc_4B2DC0  +
cmp cl 47h +
jz loc_4B2DC0  +
mov eax ebx +
mov edi edx +
call sub_4B28D0  +
test eax eax +
mov esi eax +
jnz loc_4B2D72  +
mov eax [ebx+0Ch] +
test esi esi +
movzx edx byte ptr [eax] +
mov eax esi +
jz loc_4B2DD8  +
test dl dl +
jz loc_4B2DD8  +
cmp dl 45h +
jz loc_4B2DD8  +
mov edx [eax] +
cmp edx 4 +
jz loc_4B2DE0  +
jb loc_4B2D50  +
sub edx 1Ch +
cmp edx 4 +
ja loc_4B2D50  +
mov eax [eax+4] +
test eax eax +
jnz loc_4B2D31  +
lea esi [esi+0] +
xor edx edx +
mov eax ebx +
call sub_4B20F0  +
mov ecx esi +
mov edx 3 +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test edi edi +
jz loc_4B2D10  +
test byte ptr [ebx+8] 1 +
jnz loc_4B2D10  +
mov edx [esi] +
lea eax [edx-1Ch] +
cmp eax 4 +
ja loc_4B2D93  +
mov esi [esi+4] +
mov edx [esi] +
lea eax [edx-1Ch] +
cmp eax 4 +
jbe loc_4B2D86  +
cmp edx 2 +
mov eax esi +
jnz loc_4B2DD8  +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ecx-1Ch] +
cmp edx 4 +
ja loc_4B2DB4  +
mov eax [eax+4] +
mov edi [eax] +
lea edx [edi-1Ch] +
cmp edx 4 +
jbe loc_4B2DA7  +
mov [esi+8] eax +
mov eax esi +
jmp loc_4B2DD8  +
mov ecx [ebx+30h] +
lea edx [ecx+14h] +
mov [ebx+30h] edx +
movzx edx byte ptr [eax] +
cmp dl 54h +
jz loc_4B2E20  +
cmp dl 47h +
jz loc_4B2DF5  +
xor eax eax +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [eax+4] +
test eax eax +
jz loc_4B2E50  +
cmp dword ptr [eax] 33h +
ja loc_4B2E50  +
mov edx [eax] +
jmp ds:off_50C070[edx*4]  +
lea edx [eax+1] +
mov [ebx+0Ch] edx +
cmp byte ptr [eax+1] 0 +
jz loc_4B2DD6  +
lea edx [eax+2] +
mov [ebx+0Ch] edx +
movzx edi byte ptr [eax+1] +
lea edx [edi-41h] +
cmp dl 31h +
ja loc_4B2DD6  +
movzx edx dl +
jmp ds:off_50C140[edx*4]  +
lea edx [eax+1] +
mov [ebx+0Ch] edx +
cmp byte ptr [eax+1] 0 +
jz loc_4B2DD6  +
lea edx [eax+2] +
mov [ebx+0Ch] edx +
movzx eax byte ptr [eax+1] +
sub eax 43h +
cmp al 33h +
ja loc_4B2DD6  +
movzx eax al +
jmp ds:off_50C208[eax*4]  +
mov eax [eax+8] +
test eax eax +
jnz loc_4B2DE7  +
nop   +
mov edx 1 +
jmp loc_4B2D52  +
lea eax [ebx+0Ch] +
call sub_4AC7E0  +
cmp eax 1 +
jle loc_4B2DD6  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 0 +
jz loc_4B2DD6  +
lea edi [edx+1] +
mov [ebx+0Ch] edi +
cmp byte ptr [edx] 5Fh +
jnz loc_4B2DD6  +
lea ebp [eax-1] +
mov [esp+1Ch+var_10] 0 +
movzx eax byte ptr [edi] +
test al al +
jz loc_4B2DD6  +
xor esi esi +
cmp al 24h +
jz loc_4B31E2  +
movzx eax byte ptr [edi+esi] +
test al al +
jz loc_4B2EB9  +
cmp al 24h +
jz loc_4B2EB9  +
add esi 1 +
cmp esi ebp +
jl loc_4B2EA6  +
mov edx edi +
mov ecx esi +
mov eax ebx +
sub ebp esi +
call sub_4AC560  +
mov edi [ebx+0Ch] +
add edi esi +
mov [ebx+0Ch] edi +
test eax eax +
jz loc_4B2DD6  +
mov ecx [esp+1Ch+var_10] +
test ecx ecx +
jz loc_4B3230  +
mov [esp+1Ch+var_1C] eax +
mov edx 3Eh +
mov eax ebx +
call sub_4AC500  +
test eax eax +
mov [esp+1Ch+var_10] eax +
jz loc_4B2DD6  +
test ebp ebp +
jg loc_4B2E91  +
mov ecx [esp+1Ch+var_10] +
mov edx 3Dh +
mov eax ebx +
mov [esp+1Ch+var_1C] 0 +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov eax ebx +
call sub_4B28D0  +
mov edx 13h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov eax ebx +
call sub_4B28D0  +
mov esi eax +
mov eax ebx +
call sub_4AC840  +
mov ecx esi +
mov edx 16h +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
xor edx edx +
mov eax ebx +
call sub_4B2CE0  +
mov edx 17h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
cmp byte ptr [eax+2] 0 +
jz loc_4B3239  +
lea edx [eax+3] +
mov [ebx+0Ch] edx +
cmp byte ptr [eax+2] 6Eh +
jnz loc_4B3239  +
xor edx edx +
mov eax ebx +
call sub_4B2CE0  +
mov edx 48h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov edx 76h +
mov eax ebx +
call sub_4ACC60  +
test eax eax +
jz loc_4B2DD6  +
xor edx edx +
mov eax ebx +
call sub_4B2CE0  +
mov edx 10h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov eax ebx +
call sub_4B28D0  +
mov edx 14h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx 0Eh +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov esi eax +
lea eax [ebx+0Ch] +
call sub_4AC7E0  +
test eax eax +
js loc_4B2DD6  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 5Fh +
jnz loc_4B2DD6  +
add edx 1 +
mov [ebx+0Ch] edx +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx 0Bh +
add dword ptr [ebx+30h] 5 +
mov [esp+1Ch+var_1C] esi +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov edx 68h +
mov eax ebx +
call sub_4ACC60  +
test eax eax +
jz loc_4B2DD6  +
xor edx edx +
mov eax ebx +
call sub_4B2CE0  +
mov edx 0Fh +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
xor edx edx +
mov eax ebx +
call sub_4ACC60  +
test eax eax +
jz loc_4B2DD6  +
xor edx edx +
mov eax ebx +
call sub_4ACC60  +
test eax eax +
jz loc_4B2DD6  +
xor edx edx +
mov eax ebx +
call sub_4B2CE0  +
mov edx 11h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov eax ebx +
call sub_4B28D0  +
mov edx 15h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
add ecx 0Fh +
mov [ebx+30h] ecx +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx 9 +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
add ecx 0Ah +
mov [ebx+30h] ecx +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx 0Ah +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx 0Dh +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx 12h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx 0Ch +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
movzx eax byte ptr [edi+1] +
cmp al 53h +
jz loc_4B3263  +
cmp al 5Fh +
jz loc_4B325C  +
cmp al 24h +
jnz loc_4B2DD6  +
mov ecx 24h +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B326A  +
mov eax [ebx+10h] +
lea esi [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea eax [eax+esi*4] +
test eax eax +
jz loc_4B326A  +
mov [eax+4] ecx +
mov ecx [ebx+0Ch] +
sub ebp 2 +
mov dword ptr [eax] 3Fh +
lea edi [ecx+2] +
mov [ebx+0Ch] edi +
jmp loc_4B2ED6  +
mov [esp+1Ch+var_10] eax +
jmp loc_4B2EFD  +
xor edx edx +
mov eax ebx +
call sub_4B2CE0  +
mov edx 47h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
jmp loc_4B2DD8  +
mov ecx 2Eh +
jmp loc_4B31FB  +
mov ecx 2Fh +
jmp loc_4B31FB  +
add dword ptr [ebx+0Ch] 2 +
jmp loc_4B2DD6  +
***
push ebx  +
sub esp 10h +
mov esi [esp+10h+arg_0] +
mov ebx [esp+10h+arg_4] +
mov eax [esi+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 5Fh +
jz loc_4B3380  +
test ebx ebx +
jnz loc_4B32A6  +
cmp dl 5Ah +
jz loc_4B32AF  +
xor eax eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
add eax 1 +
mov edx ebx +
mov [esi+0Ch] eax +
mov eax esi +
call sub_4B2CE0  +
test ebx ebx +
mov edi eax +
jz loc_4B32A8  +
test byte ptr [esi+8] 1 +
jz loc_4B32A8  +
mov edx [esi+0Ch] +
cmp byte ptr [edx] 2Eh +
jnz loc_4B32A8  +
movzx eax byte ptr [edx+1] +
lea ecx [eax-61h] +
cmp cl 19h +
jbe loc_4B3354  +
cmp al 5Fh +
jz loc_4B3354  +
sub eax 30h +
cmp al 9 +
ja loc_4B334B  +
movzx ecx byte ptr [edx] +
mov ebx edx +
cmp cl 2Eh +
jnz loc_4B3322  +
movzx eax byte ptr [ebx+1] +
sub eax 30h +
cmp al 9 +
ja loc_4B3322  +
movzx ecx byte ptr [ebx+2] +
lea eax [ebx+2] +
lea ebx [ecx-30h] +
cmp bl 9 +
mov ebx eax +
ja loc_4B32EE  +
nop   +
add ebx 1 +
movzx ecx byte ptr [ebx] +
lea eax [ecx-30h] +
cmp al 9 +
jbe loc_4B3310  +
cmp cl 2Eh +
jz loc_4B32F3  +
mov ecx ebx +
mov eax esi +
sub ecx edx +
mov [esi+0Ch] ebx +
call sub_4AC560  +
mov ecx edi +
mov edx 4Bh +
mov [esp+10h+var_10] eax +
mov eax esi +
call sub_4AC500  +
mov edx [esi+0Ch] +
cmp byte ptr [edx] 2Eh +
mov edi eax +
jz loc_4B32D2  +
add esp 10h +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx ecx byte ptr [edx+2] +
lea ebx [edx+2] +
lea eax [ecx-61h] +
cmp al 19h +
ja loc_4B336F  +
add ebx 1 +
movzx ecx byte ptr [ebx] +
lea eax [ecx-61h] +
cmp al 19h +
jbe loc_4B3362  +
cmp cl 5Fh +
jz loc_4B3362  +
jmp loc_4B32EE  +
lea ecx [eax+1] +
mov [esi+0Ch] ecx +
movzx edx byte ptr [eax+1] +
mov eax ecx +
jmp loc_4B32A1  +
***
jmp sub_4B33A0  +
***
push esi  +
push edi  +
mov edi ecx +
push esi  +
mov esi edx +
push ebx  +
mov ebx eax +
sub esp 5Ch +
mov dword ptr [edx] 0 +
mov dword ptr [ecx] 0 +
mov [esp+68h+var_68] eax +
call strlen  +
mov [ebp+var_54] ebx +
mov [ebp+var_4C] 4000h +
mov [ebp+var_48] ebx +
mov [ebp+var_40] 0 +
mov [ebp+var_34] 0 +
mov edx eax +
lea eax [ebx+eax] +
mov [ebp+var_50] eax +
lea eax [edx+edx] +
mov [ebp+var_3C] eax +
lea eax [eax+edx*4] +
lea eax ds:12h[eax*4] +
and eax 0FFFFFFF0h +
mov [ebp+var_30] edx +
mov [ebp+var_2C] 0 +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
mov [ebp+var_20] 0 +
mov [ebp+var_1C] 0 +
call sub_4BB070  +
sub esp eax +
lea eax ds:12h[edx*4] +
lea ecx [esp+68h+var_60] +
and eax 0FFFFFFF0h +
call sub_4BB070  +
sub esp eax +
lea eax [esp+68h+var_60] +
mov [ebp+var_38] eax +
lea eax [ebp+var_54] +
mov [esp+68h+var_64] 1 +
mov [esp+68h+var_68] eax +
mov [ebp+var_44] ecx +
call sub_4B3280  +
mov ebx eax +
xor eax eax +
lea esi [esi+0] +
***
mov eax [ebx+4] +
lea esp [ebp-0Ch] +
mov eax [ebx+4] +
jmp loc_4B3570  +
***
jmp loc_4B3570  +
***
push edi  +
push esi  +
push ebx  +
sub esp 4Ch +
mov ebx [eax+0Ch] +
mov [esp+58h+var_1C] 0 +
lea eax [esp+58h+var_1C] +
mov [esp+58h+var_41] dl +
mov [esp+58h+var_4C] eax +
cmp [ebx] dl +
jz loc_4B3E0A  +
mov eax [ebp+34h] +
mov dword ptr [ebp+34h] 1 +
mov [esp+58h+var_48] eax +
movzx eax byte ptr [ebx] +
cmp al 4Ch +
jz loc_4B3871  +
cmp al 54h +
jz loc_4B3891  +
cmp al 73h +
jz loc_4B3730  +
cmp al 66h +
jz loc_4B3770  +
lea edx [eax-30h] +
cmp dl 9 +
jbe loc_4B36BE  +
cmp al 6Fh +
jz loc_4B36B2  +
cmp al 74h +
setz dl  +
jnz loc_4B5196  +
cmp byte ptr [ebx+1] 6Ch +
jz loc_4B38A0  +
mov eax ebp +
call sub_4B1B40  +
test eax eax +
mov ebx eax +
jz loc_4B3860  +
mov eax [eax] +
cmp eax 31h +
jz loc_4B37D0  +
cmp eax 32h +
jz loc_4B38D1  +
cmp eax 33h +
jnz loc_4B3860  +
xor esi esi +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B3EF3  +
mov eax ebp +
call sub_4B5330  +
test esi esi +
mov [esp+58h+var_58] eax +
jz loc_4B369D  +
mov ecx eax +
mov edx 37h +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
mov ecx ebx +
mov edx 35h +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
cmp byte ptr [ebx+1] 6Eh +
jnz loc_4B3642  +
add ebx 2 +
mov [ebp+0Ch] ebx +
mov eax ebp +
call sub_4B1DB0  +
test eax eax +
jz loc_4B3860  +
mov edx [ebp+0Ch] +
mov ecx eax +
cmp byte ptr [edx] 49h +
jz loc_4B38E1  +
mov eax [esp+58h+var_48] +
mov [ebp+34h] eax +
mov [esp+58h+var_58] 0 +
mov edx 2Eh +
mov eax ebp +
call sub_4AC500  +
mov edi [esp+58h+var_4C] +
test eax eax +
mov [edi] eax +
jz loc_4B3867  +
mov ebx [ebp+0Ch] +
add eax 8 +
mov [esp+58h+var_4C] eax +
movzx eax [esp+58h+var_41] +
cmp [ebx] al +
jnz loc_4B35E8  +
add ebx 1 +
mov eax [esp+58h+var_1C] +
mov [ebp+0Ch] ebx +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx+1] +
cmp al 72h +
jz loc_4B39F4  +
cmp al 70h +
jnz loc_4B3642  +
add ebx 2 +
mov eax ebp +
mov [ebp+0Ch] ebx +
call sub_4B5330  +
mov edx 49h +
mov [esp+58h+var_58] 0 +
mov ecx eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
cmp byte ptr [ebx+1] 70h +
jnz loc_4B3642  +
lea eax [ebx+2] +
mov [ebp+0Ch] eax +
cmp byte ptr [ebx+2] 54h +
jz loc_4B3990  +
mov eax ebp +
call sub_4AC880  +
add eax 1 +
jz loc_4B3860  +
mov edx [ebp+14h] +
cmp edx [ebp+18h] +
jge loc_4B3860  +
mov ecx [ebp+10h] +
lea ebx [edx+edx*2] +
add edx 1 +
mov [ebp+14h] edx +
lea ecx [ecx+ebx*4] +
test ecx ecx +
jz loc_4B3860  +
mov dword ptr [ecx] 6 +
mov [ecx+4] eax +
jmp loc_4B36DB  +
mov edi [ebx+4] +
mov esi [edi] +
mov [esp+58h+var_3C] edi +
mov edi [edi+8] +
mov [esp+58h+var_40] esi +
lea ecx [edi-2] +
mov edi offset aSt +
add [ebp+30h] ecx +
mov ecx 3 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jz loc_4B3AE0  +
mov esi [esp+58h+var_3C] +
mov edx [esi+0Ch] +
cmp edx 1 +
jz loc_4B5145  +
jle loc_4B39D0  +
cmp edx 2 +
jz loc_4B3906  +
cmp edx 3 +
jnz loc_4B3860  +
mov esi [esp+58h+var_40] +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B3B12  +
mov eax [esp+58h+var_40] +
cmp byte ptr [eax] 6Eh +
jnz loc_4B3860  +
movzx eax byte ptr [eax+1] +
cmp al 61h +
jz loc_4B3A31  +
cmp al 77h +
jz loc_4B3A31  +
nop   +
lea esi [esi+0] +
mov eax [esp+58h+var_48] +
mov [ebp+34h] eax +
xor eax eax +
add esp 4Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax ebp +
call sub_4B33A0  +
mov ecx eax +
lea esi [esi+0] +
mov eax [esp+58h+var_48] +
test ecx ecx +
mov [ebp+34h] eax +
jnz loc_4B36E2  +
jmp loc_4B3867  +
mov eax ebp +
call sub_4AC8C0  +
mov ecx eax +
jmp loc_4B3880  +
xor esi esi +
test dl dl +
jnz loc_4B3B00  +
add ebx 2 +
mov edx 45h +
mov [ebp+0Ch] ebx +
mov eax ebp +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
mov edx [ebx+4] +
mov [esp+58h+var_40] 0 +
jmp loc_4B380B  +
mov [esp+58h+var_40] eax +
mov eax ebp +
call sub_4B21A0  +
mov ecx [esp+58h+var_40] +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
mov eax [ebx+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B3DE3  +
mov eax ebp +
call sub_4B5330  +
mov [esp+58h+var_3C] eax +
mov esi [esp+58h+var_40] +
mov edi offset aCl +
mov ecx 3 +
cmps   +
jz loc_4B3DD0  +
mov esi [esp+58h+var_40] +
mov edi offset unk_50BE2F +
mov ecx 3 +
cmps   +
jz loc_4B39A0  +
mov esi [esp+58h+var_40] +
mov edi offset unk_50BE32 +
mov ecx 3 +
cmps   +
jz loc_4B39A0  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
mov ecx [esp+58h+var_3C] +
mov edx 37h +
mov eax ebp +
mov [esp+58h+var_58] esi +
call sub_4AC500  +
mov ecx ebx +
mov edx 36h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
add ebx 3 +
xor eax eax +
mov [ebp+0Ch] ebx +
jmp loc_4B379A  +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jnz loc_4B3963  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3963  +
test edx edx +
jnz loc_4B3860  +
mov ecx ebx +
mov edx 34h +
mov [esp+58h+var_58] 0 +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
add ebx 2 +
mov [ebp+0Ch] ebx +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov ebx eax +
mov eax ebp +
call sub_4B1DB0  +
mov edx [ebp+0Ch] +
cmp byte ptr [edx] 49h +
mov esi eax +
jz loc_4B3E2A  +
mov [esp+58h+var_58] eax +
mov ecx ebx +
mov edx 1 +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
mov edx 5Fh +
mov eax ebp +
call sub_4B35C0  +
mov [esp+58h+var_58] ebp +
mov [esp+58h+var_3C] eax +
call sub_4B0800  +
mov [esp+58h+var_40] eax +
mov eax [ebp+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B3F64  +
cmp dl 70h +
jz loc_4B400C  +
cmp dl 69h +
jnz loc_4B3860  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B3860  +
add eax 2 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
xor ecx ecx +
mov edx 30h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
mov [esp+58h+var_58] ecx +
mov ecx [esp+58h+var_40] +
mov edx 3Ah +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+58h+var_3C] +
mov edx 39h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx ebx +
mov edx 38h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov ecx ebx +
mov edx 35h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3880  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov ebx [ebp+0Ch] +
mov esi eax +
jmp loc_4B38AA  +
mov edx [ebp+0Ch] +
movzx eax byte ptr [edx] +
cmp al 4Ch +
jz loc_4B41D2  +
cmp al 54h +
jz loc_4B421A  +
cmp al 73h +
jz loc_4B402F  +
cmp al 66h +
jz loc_4B3F0A  +
lea ecx [eax-30h] +
cmp cl 9 +
ja loc_4B3E4A  +
mov eax ebp +
call sub_4B1DB0  +
mov edx [ebp+0Ch] +
test eax eax +
mov [esp+58h+var_3C] eax +
movzx eax byte ptr [edx] +
jz loc_4B3B61  +
cmp al 49h +
jz loc_4B465C  +
cmp al 4Ch +
jz loc_4B41E8  +
cmp al 54h +
nop   +
lea esi [esi+0] +
jz loc_4B4230  +
cmp al 73h +
jz loc_4B4063  +
cmp al 66h +
jz loc_4B40D4  +
lea ecx [eax-30h] +
cmp cl 9 +
jbe loc_4B3F81  +
cmp al 6Fh +
jz loc_4B3F71  +
cmp al 74h +
setz cl  +
jnz loc_4B4CA9  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B4569  +
mov eax ebp +
call sub_4B1B40  +
test eax eax +
mov [esp+58h+var_40] eax +
jz loc_4B41AA  +
mov eax [esp+58h+var_40] +
mov eax [eax] +
cmp eax 31h +
mov [esp+58h+var_38] eax +
jz loc_4B4246  +
mov eax [esp+58h+var_38] +
cmp eax 32h +
jz loc_4B45FD  +
cmp eax 33h +
jnz loc_4B41AA  +
mov edx [ebp+0Ch] +
movzx ecx byte ptr [edx] +
cmp [esp+58h+var_38] 33h +
mov [esp+58h+var_30] 0 +
jnz loc_4B3C09  +
cmp cl 5Fh +
jz loc_4B4987  +
cmp cl 4Ch +
jz loc_4B4DCD  +
cmp cl 54h +
jz loc_4B4D3A  +
cmp cl 73h +
nop   +
jz loc_4B4A73  +
cmp cl 66h +
jz loc_4B4A20  +
lea eax [ecx-30h] +
cmp al 9 +
jbe loc_4B49E2  +
cmp cl 6Fh +
jz loc_4B49D2  +
cmp cl 74h +
setz al  +
jnz loc_4B50D7  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B4D61  +
mov eax ebp +
call sub_4B1B40  +
test eax eax +
mov [esp+58h+var_38] eax +
jz loc_4B4D5A  +
mov eax [eax] +
cmp eax 31h +
mov [esp+58h+var_34] eax +
jz loc_4B4ECB  +
mov eax [esp+58h+var_34] +
cmp eax 32h +
jz loc_4B4DF2  +
cmp eax 33h +
jnz loc_4B4D5A  +
xor esi esi +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B5221  +
mov eax ebp +
call sub_4B5330  +
test esi esi +
mov [esp+58h+var_58] eax +
jz loc_4B3CBE  +
mov ecx eax +
mov edx 37h +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
mov ecx [esp+58h+var_38] +
mov edx 35h +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
mov eax [esp+58h+var_30] +
test eax eax +
jz loc_4B499B  +
mov ecx esi +
mov edx 37h +
mov [esp+58h+var_58] esi +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+58h+var_40] +
mov edx 35h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov [esp+58h+var_40] eax +
movzx eax byte ptr [edx] +
cmp al 4Ch +
jz loc_4B41FE  +
cmp al 54h +
jz loc_4B420C  +
cmp al 73h +
jz loc_4B4097  +
cmp al 66h +
jz loc_4B4132  +
lea ecx [eax-30h] +
cmp cl 9 +
jbe loc_4B3FCA  +
cmp al 6Fh +
jz loc_4B3FBA  +
cmp al 74h +
setz cl  +
jnz loc_4B5132  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B45BD  +
mov eax ebp +
call sub_4B1B40  +
test eax eax +
mov [esp+58h+var_38] eax +
jz loc_4B3F6A  +
mov eax [eax] +
cmp eax 31h +
mov [esp+58h+var_34] eax +
jz loc_4B434B  +
mov eax [esp+58h+var_34] +
cmp eax 32h +
jz loc_4B460B  +
cmp eax 33h +
jnz loc_4B3F6A  +
xor esi esi +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B4DDB  +
mov eax ebp +
call sub_4B5330  +
test esi esi +
mov [esp+58h+var_58] eax +
jz loc_4B3DB8  +
mov ecx eax +
mov edx 37h +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
mov ecx [esp+58h+var_38] +
mov edx 35h +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B3963  +
movzx eax byte ptr [eax] +
lea edx [eax-63h] +
cmp dl 1 +
jbe loc_4B3DF9  +
sub eax 72h +
cmp al 1 +
ja loc_4B3915  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov [esp+58h+var_3C] eax +
jmp loc_4B3920  +
add ebx 1 +
xor ecx ecx +
mov [ebp+0Ch] ebx +
mov edx 2Eh +
mov eax ebp +
mov [esp+58h+var_58] 0 +
call sub_4AC500  +
jmp loc_4B3869  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
jmp loc_4B3A1C  +
cmp al 6Fh +
jz loc_4B41BD  +
cmp al 74h +
setz cl  +
jnz loc_4B4D9E  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B4592  +
mov eax ebp +
call sub_4B1B40  +
test eax eax +
mov [esp+58h+var_40] eax +
jz loc_4B418F  +
mov eax [esp+58h+var_40] +
mov eax [eax] +
cmp eax 31h +
mov [esp+58h+var_3C] eax +
jz loc_4B4460  +
mov eax [esp+58h+var_3C] +
cmp eax 32h +
jz loc_4B45EF  +
cmp eax 33h +
jnz loc_4B418F  +
xor esi esi +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B51A5  +
mov eax ebp +
call sub_4B5330  +
test esi esi +
mov [esp+58h+var_58] eax +
jz loc_4B4960  +
mov ecx eax +
mov edx 37h +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+58h+var_40] +
mov edx 35h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov edx [ebp+0Ch] +
mov [esp+58h+var_3C] eax +
movzx eax byte ptr [edx] +
jmp loc_4B3B61  +
add eax 1 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
jmp loc_4B3685  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B3E67  +
lea eax [edx+2] +
mov [ebp+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B485F  +
add edx 3 +
xor ecx ecx +
mov [ebp+0Ch] edx +
mov eax [ebp+14h] +
cmp eax [ebp+18h] +
jge loc_4B4192  +
mov edi [ebp+10h] +
lea esi [eax+eax*2] +
add eax 1 +
mov [ebp+14h] eax +
lea esi [edi+esi*4] +
test esi esi +
mov [esp+58h+var_3C] esi +
jz loc_4B3EEB  +
mov eax [esp+58h+var_3C] +
mov dword ptr [eax] 6 +
mov [eax+4] ecx +
movzx eax byte ptr [edx] +
jmp loc_4B3B61  +
add eax 1 +
mov [ebp+0Ch] eax +
xor ecx ecx +
jmp loc_4B3A9D  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B3BAF  +
add edx 2 +
mov [ebp+0Ch] edx +
mov eax ebp +
call sub_4B1DB0  +
mov edx [ebp+0Ch] +
test eax eax +
mov [esp+58h+var_40] eax +
movzx eax byte ptr [edx] +
jz loc_4B3D0A  +
cmp al 49h +
jnz loc_4B3D0A  +
mov eax ebp +
call sub_4B21A0  +
mov ecx [esp+58h+var_40] +
mov edx 4 +
mov [esp+58h+var_58] eax +
jmp loc_4B3CF9  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B3D53  +
add edx 2 +
mov [ebp+0Ch] edx +
mov eax ebp +
call sub_4B1DB0  +
test eax eax +
mov ecx eax +
jz loc_4B3A9D  +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jnz loc_4B3A9D  +
mov eax ebp +
mov [esp+58h+var_38] ecx +
call sub_4B21A0  +
mov ecx [esp+58h+var_38] +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B3860  +
add eax 2 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
mov ecx eax +
jmp loc_4B3A9D  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B4880  +
cmp al 70h +
jnz loc_4B3E67  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+58h+var_58] 0 +
mov ecx eax +
jmp loc_4B3EDD  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B48F1  +
cmp al 70h +
jnz loc_4B3BAF  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+58h+var_58] 0 +
mov ecx eax +
jmp loc_4B3CF9  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B48B4  +
cmp al 70h +
jnz loc_4B3D53  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+58h+var_58] 0 +
mov ecx eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B3BAF  +
lea eax [edx+2] +
mov [ebp+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B4940  +
add edx 3 +
xor ecx ecx +
mov [ebp+0Ch] edx +
mov eax [ebp+14h] +
cmp eax [ebp+18h] +
jge loc_4B41AD  +
mov edi [ebp+10h] +
lea esi [eax+eax*2] +
add eax 1 +
mov [ebp+14h] eax +
lea esi [edi+esi*4] +
test esi esi +
mov [esp+58h+var_40] esi +
jz loc_4B3D07  +
mov eax [esp+58h+var_40] +
mov dword ptr [eax] 6 +
mov [eax+4] ecx +
movzx eax byte ptr [edx] +
jmp loc_4B3D0A  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B3D53  +
lea eax [edx+2] +
mov [ebp+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B4925  +
add edx 3 +
mov [ebp+0Ch] edx +
xor edx edx +
mov eax [ebp+14h] +
xor ecx ecx +
cmp eax [ebp+18h] +
jge loc_4B3A9D  +
mov ecx [ebp+10h] +
lea esi [eax+eax*2] +
add eax 1 +
mov [ebp+14h] eax +
lea ecx [ecx+esi*4] +
test ecx ecx +
jz loc_4B3A9D  +
mov dword ptr [ecx] 6 +
mov [ecx+4] edx +
jmp loc_4B3A9D  +
cmp al 77h +
jz loc_4B44EF  +
mov edx [ebp+0Ch] +
movzx eax byte ptr [edx] +
mov [esp+58h+var_3C] 0 +
jmp loc_4B3B61  +
cmp al 77h +
jz loc_4B42D1  +
mov edx [ebp+0Ch] +
movzx eax byte ptr [edx] +
mov [esp+58h+var_40] 0 +
jmp loc_4B3D0A  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B3E67  +
add edx 2 +
mov [ebp+0Ch] edx +
jmp loc_4B3B44  +
mov eax ebp +
call sub_4B33A0  +
mov edx [ebp+0Ch] +
mov [esp+58h+var_3C] eax +
movzx eax byte ptr [edx] +
jmp loc_4B3B61  +
mov eax ebp +
call sub_4B33A0  +
mov edx [ebp+0Ch] +
mov [esp+58h+var_40] eax +
movzx eax byte ptr [edx] +
jmp loc_4B3D0A  +
mov eax ebp +
call sub_4B33A0  +
mov ecx eax +
jmp loc_4B3A9D  +
mov eax ebp +
call sub_4AC8C0  +
mov ecx eax +
jmp loc_4B3A9D  +
mov eax ebp +
call sub_4AC8C0  +
mov edx [ebp+0Ch] +
mov [esp+58h+var_3C] eax +
movzx eax byte ptr [edx] +
jmp loc_4B3B61  +
mov eax ebp +
call sub_4AC8C0  +
mov edx [ebp+0Ch] +
mov [esp+58h+var_40] eax +
movzx eax byte ptr [edx] +
jmp loc_4B3D0A  +
mov eax [esp+58h+var_40] +
mov edi offset aSt +
mov eax [eax+4] +
mov edx [eax] +
mov [esp+58h+var_34] eax +
mov eax [eax+8] +
mov esi edx +
lea ecx [eax-2] +
add [ebp+30h] ecx +
mov ecx 3 +
mov [esp+58h+var_30] eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jz loc_4B49AC  +
mov eax [esp+58h+var_34] +
mov ecx [eax+0Ch] +
cmp ecx 1 +
jz loc_4B5238  +
jle loc_4B4674  +
cmp ecx 2 +
jz loc_4B47C8  +
cmp ecx 3 +
jnz loc_4B41AA  +
mov esi edx +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B4AB0  +
cmp byte ptr [edx] 6Eh +
jnz loc_4B41AA  +
movzx eax byte ptr [edx+1] +
cmp al 61h +
jnz loc_4B41A2  +
mov edx 5Fh +
mov eax ebp +
call sub_4B35C0  +
mov [esp+58h+var_58] ebp +
mov esi eax +
call sub_4B0800  +
mov edx [ebp+0Ch] +
mov edi eax +
movzx eax byte ptr [edx] +
cmp al 45h +
jz loc_4B52C2  +
cmp al 70h +
jz loc_4B52A1  +
cmp al 69h +
jnz loc_4B5214  +
cmp byte ptr [edx+1] 6Ch +
jnz loc_4B5202  +
mov eax ebp +
call sub_4B5330  +
mov [esp+58h+var_58] eax +
mov ecx edi +
mov edx 3Ah +
mov eax ebp +
call sub_4AC500  +
mov ecx esi +
mov edx 39h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+58h+var_40] +
mov edx 38h +
mov [esp+58h+var_58] eax +
jmp loc_4B3CF9  +
mov eax [esp+58h+var_38] +
mov edi offset aSt +
mov eax [eax+4] +
mov edx [eax] +
mov [esp+58h+var_30] eax +
mov eax [eax+8] +
mov esi edx +
lea ecx [eax-2] +
add [ebp+30h] ecx +
mov ecx 3 +
mov [esp+58h+var_2C] eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jz loc_4B49C5  +
mov eax [esp+58h+var_30] +
mov ecx [eax+0Ch] +
cmp ecx 1 +
jz loc_4B50E5  +
jle loc_4B4636  +
cmp ecx 2 +
jz loc_4B4728  +
cmp ecx 3 +
jnz loc_4B3F6A  +
mov esi edx +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B4AEE  +
xor ecx ecx +
cmp byte ptr [edx] 6Eh +
jnz loc_4B3A9D  +
movzx eax byte ptr [edx+1] +
cmp al 61h +
jnz loc_4B4CFF  +
mov edx 5Fh +
mov eax ebp +
call sub_4B35C0  +
mov [esp+58h+var_58] ebp +
mov esi eax +
call sub_4B0800  +
mov edi eax +
mov eax [ebp+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B4D2D  +
xor ecx ecx +
cmp dl 70h +
jz loc_4B4D0C  +
cmp dl 69h +
jnz loc_4B3A9D  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B3A9D  +
mov eax ebp +
call sub_4B5330  +
mov [esp+58h+var_58] eax +
mov ecx edi +
mov edx 3Ah +
mov eax ebp +
call sub_4AC500  +
mov ecx esi +
mov edx 39h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+58h+var_38] +
mov edx 38h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
mov eax [esp+58h+var_40] +
mov edi offset aSt +
mov eax [eax+4] +
mov edx [eax] +
mov [esp+58h+var_38] eax +
mov eax [eax+8] +
mov esi edx +
lea ecx [eax-2] +
add [ebp+30h] ecx +
mov ecx 3 +
mov [esp+58h+var_34] eax +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jz loc_4B496E  +
mov eax [esp+58h+var_38] +
mov ecx [eax+0Ch] +
cmp ecx 1 +
jz loc_4B51BC  +
jle loc_4B4619  +
cmp ecx 2 +
jz loc_4B4691  +
cmp ecx 3 +
lea esi [esi+0] +
jnz loc_4B418F  +
mov esi edx +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B4C6C  +
cmp byte ptr [edx] 6Eh +
jnz loc_4B418F  +
movzx eax byte ptr [edx+1] +
cmp al 61h +
jnz loc_4B4187  +
mov edx 5Fh +
mov eax ebp +
call sub_4B35C0  +
mov [esp+58h+var_58] ebp +
mov esi eax +
call sub_4B0800  +
mov edx [ebp+0Ch] +
mov edi eax +
movzx eax byte ptr [edx] +
cmp al 45h +
jz loc_4B4CD3  +
cmp al 70h +
jz loc_4B4CB6  +
cmp al 69h +
jnz loc_4B4C9C  +
cmp byte ptr [edx+1] 6Ch +
jnz loc_4B4C8A  +
mov eax ebp +
call sub_4B5330  +
mov [esp+58h+var_58] eax +
mov ecx edi +
mov edx 3Ah +
mov eax ebp +
call sub_4AC500  +
mov ecx esi +
mov edx 39h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+58h+var_40] +
mov edx 38h +
mov [esp+58h+var_58] eax +
jmp loc_4B3EDD  +
xor esi esi +
test cl cl +
jnz loc_4B4C0E  +
add dword ptr [ebp+0Ch] 2 +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+58h+var_58] eax +
jmp loc_4B3CF9  +
xor esi esi +
test cl cl +
jnz loc_4B4ACE  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+58h+var_58] eax +
jmp loc_4B3EDD  +
xor esi esi +
test cl cl +
jnz loc_4B4C5D  +
add dword ptr [ebp+0Ch] 2 +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
mov eax [esp+58h+var_40] +
xor edx edx +
mov ecx [eax+4] +
jmp loc_4B44A1  +
mov eax [esp+58h+var_40] +
xor edx edx +
mov ecx [eax+4] +
jmp loc_4B4287  +
mov eax [esp+58h+var_38] +
xor edx edx +
mov ecx [eax+4] +
jmp loc_4B438C  +
test ecx ecx +
jnz loc_4B418F  +
mov [esp+58h+var_58] 0 +
mov ecx [esp+58h+var_40] +
mov edx 34h +
jmp loc_4B3EDD  +
test ecx ecx +
jnz loc_4B3F6A  +
mov ecx [esp+58h+var_38] +
mov edx 34h +
mov eax ebp +
mov [esp+58h+var_58] 0 +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
mov eax ebp +
call sub_4B21A0  +
mov ecx [esp+58h+var_3C] +
mov edx 4 +
mov [esp+58h+var_58] eax +
jmp loc_4B3EDD  +
test ecx ecx +
jnz loc_4B41AA  +
mov [esp+58h+var_58] 0 +
mov ecx [esp+58h+var_40] +
mov edx 34h +
jmp loc_4B3CF9  +
mov eax [esp+58h+var_40] +
mov eax [eax+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B4BBF  +
mov eax ebp +
mov [esp+58h+var_38] edx +
call sub_4B5330  +
mov edx [esp+58h+var_38] +
mov [esp+58h+var_3C] eax +
mov edi offset aCl +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B4BAC  +
mov edi offset unk_50BE2F +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B46EF  +
mov edi offset unk_50BE32 +
mov esi edx +
mov ecx 3 +
cmps   +
jnz loc_4B4AE0  +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B4CE0  +
mov ecx [esp+58h+var_3C] +
mov edx 37h +
mov eax ebp +
mov [esp+58h+var_58] esi +
call sub_4AC500  +
mov ecx [esp+58h+var_40] +
mov edx 36h +
mov [esp+58h+var_58] eax +
jmp loc_4B3EDD  +
mov eax [esp+58h+var_38] +
mov eax [eax+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B4B6F  +
mov eax ebp +
mov [esp+58h+var_30] edx +
call sub_4B5330  +
mov edx [esp+58h+var_30] +
mov [esp+58h+var_34] eax +
mov edi offset aCl +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B4B4E  +
mov edi offset unk_50BE2F +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B4786  +
mov edi offset unk_50BE32 +
mov esi edx +
mov ecx 3 +
cmps   +
jnz loc_4B4B9E  +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B5282  +
mov ecx [esp+58h+var_34] +
mov edx 37h +
mov eax ebp +
mov [esp+58h+var_58] esi +
call sub_4AC500  +
mov ecx [esp+58h+var_38] +
mov edx 36h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
mov eax [esp+58h+var_40] +
mov eax [eax+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B4B1F  +
mov eax ebp +
mov [esp+58h+var_34] edx +
call sub_4B5330  +
mov edx [esp+58h+var_34] +
mov [esp+58h+var_38] eax +
mov edi offset aCl +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B4B0C  +
mov edi offset unk_50BE2F +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B4826  +
mov edi offset unk_50BE32 +
mov esi edx +
mov ecx 3 +
cmps   +
jnz loc_4B4B61  +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B4DAB  +
mov ecx [esp+58h+var_38] +
mov edx 37h +
mov eax ebp +
mov [esp+58h+var_58] esi +
call sub_4AC500  +
mov ecx [esp+58h+var_40] +
mov edx 36h +
mov [esp+58h+var_58] eax +
jmp loc_4B3CF9  +
mov eax ebp +
call sub_4AC880  +
mov edx [ebp+0Ch] +
add eax 1 +
mov ecx eax +
jnz loc_4B3F2C  +
jmp loc_4B4192  +
add edx 2 +
mov [ebp+0Ch] edx +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov edi eax +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B4BEE  +
mov [esp+58h+var_58] esi +
mov ecx edi +
mov edx 1 +
jmp loc_4B3EDD  +
add edx 2 +
mov [ebp+0Ch] edx +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov esi eax +
mov eax ebp +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B4C1D  +
mov [esp+58h+var_58] edi +
mov ecx esi +
mov edx 1 +
mov eax ebp +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B3A9D  +
add edx 2 +
mov [ebp+0Ch] edx +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov edi eax +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B4C3D  +
mov [esp+58h+var_58] esi +
mov ecx edi +
mov edx 1 +
jmp loc_4B3CF9  +
mov eax ebp +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B4154  +
xor ecx ecx +
jmp loc_4B3A9D  +
mov eax ebp +
call sub_4AC880  +
mov edx [ebp+0Ch] +
add eax 1 +
mov ecx eax +
jnz loc_4B40F6  +
jmp loc_4B41AD  +
mov ecx [esp+58h+var_40] +
mov edx 35h +
jmp loc_4B3EDD  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov ecx [esp+58h+var_40] +
mov edx 35h +
mov [esp+58h+var_58] eax +
jmp loc_4B3EDD  +
add edx 1 +
mov eax ebp +
mov [ebp+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
mov esi eax +
mov [esp+58h+var_58] esi +
mov ecx [esp+58h+var_40] +
mov edx 35h +
jmp loc_4B3CF9  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov ecx [esp+58h+var_40] +
mov edx 35h +
mov [esp+58h+var_58] eax +
jmp loc_4B3CF9  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
jmp loc_4B3DB5  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B3C59  +
add edx 2 +
mov [ebp+0Ch] edx +
mov eax ebp +
call sub_4B1DB0  +
test eax eax +
mov esi eax +
jz loc_4B4D5A  +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jnz loc_4B3CD0  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3CD0  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B3C59  +
lea eax [edx+2] +
mov [ebp+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B4D48  +
add edx 3 +
mov [ebp+0Ch] edx +
xor edx edx +
mov eax [ebp+14h] +
cmp eax [ebp+18h] +
jge loc_4B4D5A  +
mov ecx [ebp+10h] +
lea esi [eax+eax*2] +
add eax 1 +
mov [ebp+14h] eax +
lea esi [ecx+esi*4] +
test esi esi +
jz loc_4B3CD0  +
mov dword ptr [esi] 6 +
mov [esi+4] edx +
jmp loc_4B3CD0  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B52CF  +
cmp al 70h +
jnz loc_4B3C59  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+58h+var_58] 0 +
mov ecx eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3CD0  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
mov eax ebp +
call sub_4B5330  +
mov edi eax +
mov eax ebp +
call sub_4B5330  +
jmp loc_4B4318  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov edx [ebp+0Ch] +
mov esi eax +
jmp loc_4B459C  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
jmp loc_4B4704  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
mov eax ebp +
call sub_4B5330  +
mov edi eax +
mov eax ebp +
call sub_4B5330  +
jmp loc_4B4424  +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B483B  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B4B35  +
sub eax 72h +
cmp al 1 +
ja loc_4B47DB  +
mov [esp+58h+var_58] ebp +
mov [esp+58h+var_34] edx +
call sub_4B0800  +
mov edx [esp+58h+var_34] +
mov [esp+58h+var_38] eax +
jmp loc_4B47EE  +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B479B  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
jmp loc_4B483B  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B4B85  +
sub eax 72h +
cmp al 1 +
ja loc_4B473B  +
mov [esp+58h+var_58] ebp +
mov [esp+58h+var_30] edx +
call sub_4B0800  +
mov edx [esp+58h+var_30] +
mov [esp+58h+var_34] eax +
jmp loc_4B474E  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
jmp loc_4B479B  +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B4704  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B4BD5  +
sub eax 72h +
cmp al 1 +
ja loc_4B46A4  +
mov [esp+58h+var_58] ebp +
mov [esp+58h+var_38] edx +
call sub_4B0800  +
mov edx [esp+58h+var_38] +
mov [esp+58h+var_3C] eax +
jmp loc_4B46B7  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
jmp loc_4B48A8  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov esi eax +
jmp loc_4B4573  +
mov eax ebp +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
jmp loc_4B48DC  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
jmp loc_4B4919  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov esi eax +
jmp loc_4B45C7  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
mov eax ebp +
call sub_4B5330  +
mov edi eax +
mov eax ebp +
call sub_4B5330  +
jmp loc_4B4536  +
mov eax 69h +
mov [esp+58h+var_3C] 0 +
jmp loc_4B3B92  +
mov [esp+58h+var_3C] 0 +
jmp loc_4B3B61  +
cmp al 69h +
jz loc_4B3BA5  +
jmp loc_4B3BAF  +
cmp byte ptr [edx+1] 69h +
jnz loc_4B4C8F  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
jmp loc_4B4536  +
add edx 1 +
xor eax eax +
mov [ebp+0Ch] edx +
jmp loc_4B4536  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B4704  +
cmp al 77h +
jz loc_4B43D8  +
jmp loc_4B3A9D  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B3A9D  +
add eax 2 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
jmp loc_4B4424  +
add eax 1 +
mov [ebp+0Ch] eax +
xor eax eax +
jmp loc_4B4424  +
mov eax ebp +
call sub_4AC8C0  +
mov esi eax +
jmp loc_4B3CD0  +
mov eax ebp +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B4A42  +
xor esi esi +
jmp loc_4B3CD0  +
xor esi esi +
test al al +
jz loc_4B4D74  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov edx [ebp+0Ch] +
mov esi eax +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3CD0  +
cmp al 69h +
jz loc_4B3E5D  +
jmp loc_4B3E67  +
mov eax ebp +
lea esi [esi+0] +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B483B  +
mov eax ebp +
call sub_4B33A0  +
mov esi eax +
jmp loc_4B3CD0  +
add eax 1 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
jmp loc_4B3DA0  +
mov eax [esp+58h+var_38] +
xor edx edx +
mov eax [eax+4] +
cmp eax 1 +
jz loc_4B5094  +
jle loc_4B506E  +
cmp eax 2 +
jz loc_4B4F72  +
cmp eax 3 +
jnz loc_4B4D5A  +
mov esi edx +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B4F54  +
cmp byte ptr [edx] 6Eh +
jnz loc_4B4D5A  +
movzx eax byte ptr [edx+1] +
cmp al 61h +
jnz loc_4B4F47  +
mov edx 5Fh +
mov eax ebp +
call sub_4B35C0  +
mov [esp+58h+var_58] ebp +
mov esi eax +
call sub_4B0800  +
mov edi eax +
mov eax [ebp+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B4F3A  +
cmp dl 70h +
jz loc_4B4F09  +
cmp dl 69h +
jnz loc_4B4D5A  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B4D5A  +
mov eax ebp +
call sub_4B5330  +
mov [esp+58h+var_58] eax +
mov ecx edi +
mov edx 3Ah +
mov eax ebp +
call sub_4AC500  +
mov ecx esi +
mov edx 39h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov ecx [esp+58h+var_38] +
mov edx 38h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3CD0  +
mov eax [esp+58h+var_38] +
mov edi offset aSt +
mov eax [eax+4] +
mov edx [eax] +
mov [esp+58h+var_2C] eax +
mov eax [eax+8] +
mov esi edx +
lea ecx [eax-2] +
add [ebp+30h] ecx +
mov ecx 3 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jz loc_4B4F2A  +
mov eax [esp+58h+var_2C] +
mov eax [eax+0Ch] +
jmp loc_4B4DFB  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B4D5A  +
add eax 2 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
jmp loc_4B4E8F  +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov [esp+58h+var_58] eax +
jmp loc_4B3CBE  +
add eax 1 +
mov [ebp+0Ch] eax +
xor eax eax +
jmp loc_4B4E8F  +
cmp al 77h +
jz loc_4B4E45  +
jmp loc_4B4D5A  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
mov eax ebp +
call sub_4B5330  +
mov edi eax +
mov eax ebp +
call sub_4B5330  +
jmp loc_4B4E8F  +
mov eax [esp+58h+var_38] +
mov eax [eax+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B5034  +
mov eax ebp +
mov [esp+58h+var_2C] edx +
call sub_4B5330  +
mov edx [esp+58h+var_2C] +
mov [esp+58h+var_34] eax +
mov edi offset aCl +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B5024  +
mov edi offset unk_50BE2F +
mov esi edx +
mov ecx 3 +
cmps   +
jz loc_4B4FCC  +
mov edi offset unk_50BE32 +
mov esi edx +
mov ecx 3 +
cmps   +
jnz loc_4B5063  +
mov eax ebp +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jnz loc_4B4FF7  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
mov ecx [esp+58h+var_34] +
mov edx 37h +
mov eax ebp +
mov [esp+58h+var_58] esi +
call sub_4AC500  +
mov ecx [esp+58h+var_38] +
mov edx 36h +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3CD0  +
mov edx 45h +
mov eax ebp +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B4FF7  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B504A  +
sub eax 72h +
cmp al 1 +
ja loc_4B4F85  +
mov [esp+58h+var_58] ebp +
mov [esp+58h+var_2C] edx +
call sub_4B0800  +
mov edx [esp+58h+var_2C] +
mov [esp+58h+var_34] eax +
jmp loc_4B4F98  +
mov eax ebp +
call sub_4B5330  +
mov esi eax +
jmp loc_4B4FF7  +
test eax eax +
jnz loc_4B4D5A  +
mov ecx [esp+58h+var_38] +
mov edx 34h +
mov eax ebp +
mov [esp+58h+var_58] 0 +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3CD0  +
test edx edx +
jz loc_4B50D3  +
movzx eax byte ptr [edx] +
cmp al 6Dh +
jz loc_4B50A5  +
xor esi esi +
cmp al 70h +
jnz loc_4B50AC  +
xor esi esi +
cmp al [edx+1] +
jz loc_4B50BC  +
cmp [esp+58h+var_34] 33h +
jnz loc_4B3C9F  +
jmp loc_4B3C93  +
mov eax [ebp+0Ch] +
mov si 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B50AC  +
add eax 1 +
xor si si +
mov [ebp+0Ch] eax +
jmp loc_4B50AC  +
xor esi esi +
jmp loc_4B50AC  +
cmp cl 69h +
jz loc_4B3C4F  +
jmp loc_4B3C59  +
test edx edx +
jz loc_4B512E  +
movzx ecx byte ptr [edx] +
cmp cl 6Dh +
nop   +
jz loc_4B5110  +
xor esi esi +
cmp cl 70h +
jz loc_4B5110  +
cmp [esp+58h+var_34] 33h +
jnz loc_4B3D99  +
jmp loc_4B3D8D  +
xor esi esi +
cmp cl [edx+1] +
jnz loc_4B50F9  +
mov edx [ebp+0Ch] +
mov si 1 +
cmp byte ptr [edx] 5Fh +
jnz loc_4B50F9  +
add edx 1 +
xor si si +
mov [ebp+0Ch] edx +
jmp loc_4B50F9  +
xor esi esi +
jmp loc_4B50F9  +
cmp al 69h +
jz loc_4B3D49  +
lea esi [esi+0] +
jmp loc_4B3D53  +
mov esi [esp+58h+var_40] +
test esi esi +
jz loc_4B5192  +
movzx edx byte ptr [esi] +
cmp dl 6Dh +
jz loc_4B5170  +
xor esi esi +
cmp dl 70h +
jz loc_4B5170  +
cmp eax 33h +
jnz loc_4B367E  +
jmp loc_4B3672  +
mov edi [esp+58h+var_40] +
xor esi esi +
cmp dl [edi+1] +
jnz loc_4B515C  +
mov edx [ebp+0Ch] +
mov si 1 +
cmp byte ptr [edx] 5Fh +
jnz loc_4B515C  +
add edx 1 +
xor si si +
mov [ebp+0Ch] edx +
jmp loc_4B515C  +
xor esi esi +
jmp loc_4B515C  +
cmp al 69h +
jz loc_4B3638  +
nop   +
jmp loc_4B3642  +
add eax 1 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
jmp loc_4B3EB8  +
test edx edx +
jz loc_4B51FE  +
movzx ecx byte ptr [edx] +
cmp cl 6Dh +
jz loc_4B51E0  +
xor esi esi +
cmp cl 70h +
jz loc_4B51E0  +
cmp [esp+58h+var_3C] 33h +
jnz loc_4B3EB1  +
jmp loc_4B3EA5  +
xor esi esi +
cmp cl [edx+1] +
jnz loc_4B51CF  +
mov edx [ebp+0Ch] +
mov si 1 +
cmp byte ptr [edx] 5Fh +
jnz loc_4B51CF  +
add edx 1 +
xor si si +
mov [ebp+0Ch] edx +
jmp loc_4B51CF  +
xor esi esi +
jmp loc_4B51CF  +
mov eax 69h +
mov [esp+58h+var_40] 0 +
jmp loc_4B3D36  +
mov [esp+58h+var_40] 0 +
jmp loc_4B3D0A  +
add eax 1 +
mov edx 45h +
mov [ebp+0Ch] eax +
mov eax ebp +
call sub_4B35C0  +
jmp loc_4B3CA6  +
test edx edx +
jz loc_4B3BEB  +
movzx ecx byte ptr [edx] +
cmp cl 6Dh +
jz loc_4B5251  +
cmp cl 70h +
jnz loc_4B3BEB  +
cmp cl [edx+1] +
jnz loc_4B3BEB  +
mov edx [ebp+0Ch] +
mov [esp+58h+var_30] 1 +
movzx ecx byte ptr [edx] +
cmp cl 5Fh +
jnz loc_4B3C09  +
lea esi [edx+1] +
mov [ebp+0Ch] esi +
movzx ecx byte ptr [edx+1] +
mov edx esi +
jmp loc_4B3BF1  +
mov eax ebp +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B479B  +
cmp byte ptr [edx+1] 69h +
jnz loc_4B5207  +
add edx 2 +
mov eax ebp +
mov [ebp+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
jmp loc_4B4318  +
add edx 1 +
xor eax eax +
mov [ebp+0Ch] edx +
jmp loc_4B4318  +
add edx 2 +
mov [ebp+0Ch] edx +
mov [esp+58h+var_58] ebp +
call sub_4B0800  +
mov esi eax +
mov eax ebp +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebp+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B5308  +
mov [esp+58h+var_58] edi +
mov ecx esi +
mov edx 1 +
mov eax ebp +
call sub_4AC500  +
mov esi eax +
jmp loc_4B3CD0  +
mov eax ebp +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+58h+var_58] eax +
mov eax ebp +
call sub_4AC500  +
mov [esp+58h+var_58] eax +
jmp loc_4B52F3  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 1Ch +
mov edx [eax+0Ch] +
movzx eax byte ptr [edx] +
cmp al 4Ch +
jz loc_4B5625  +
cmp al 54h +
jz loc_4B5633  +
cmp al 73h +
jz loc_4B5477  +
cmp al 66h +
jz loc_4B5420  +
lea ecx [eax-30h] +
cmp cl 9 +
ja loc_4B5390  +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
jz loc_4B5600  +
mov edx [ebx+0Ch] +
mov esi eax +
cmp byte ptr [edx] 49h +
jz loc_4B5651  +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 6Fh +
jz loc_4B5610  +
cmp al 74h +
setz cl  +
jnz loc_4B58D2  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B55C3  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov ebp eax +
jz loc_4B5600  +
mov eax [eax] +
cmp eax 31h +
jz loc_4B54B4  +
cmp eax 32h +
jz loc_4B5641  +
cmp eax 33h +
jnz loc_4B5600  +
xor esi esi +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B5755  +
mov eax ebx +
call sub_4B5330  +
test esi esi +
mov [esp+1Ch+var_1C] eax +
jz loc_4B5408  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+1Ch+var_1C] eax +
mov ecx ebp +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B53AD  +
lea eax [edx+2] +
mov [ebx+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jz loc_4B5748  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
jz loc_4B5600  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jge loc_4B5600  +
mov ecx [ebx+10h] +
lea esi [edx+edx*2] +
add edx 1 +
mov [ebx+14h] edx +
lea esi [ecx+esi*4] +
test esi esi +
jz loc_4B5600  +
mov dword ptr [esi] 6 +
mov [esi+4] eax +
jmp loc_4B5384  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B5670  +
cmp al 70h +
jnz loc_4B53AD  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+1Ch+var_1C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
mov edi [ebp+4] +
mov esi [edi] +
mov [esp+1Ch+var_10] edi +
mov edi [edi+8] +
mov [esp+1Ch+var_14] esi +
lea ecx [edi-2] +
mov edi offset aSt +
add [ebx+30h] ecx +
mov ecx 3 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jz loc_4B5794  +
mov edi [esp+1Ch+var_10] +
mov edx [edi+0Ch] +
cmp edx 1 +
jz loc_4B5886  +
jle loc_4B5770  +
cmp edx 2 +
jz loc_4B56B0  +
cmp edx 3 +
jnz loc_4B5600  +
mov esi [esp+1Ch+var_14] +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B57B3  +
mov eax [esp+1Ch+var_14] +
cmp byte ptr [eax] 6Eh +
jnz loc_4B5600  +
movzx eax byte ptr [eax+1] +
cmp al 61h +
jnz loc_4B55F7  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+1Ch+var_1C] ebx +
mov esi eax +
call sub_4B0800  +
mov edi eax +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B5839  +
cmp dl 70h +
jz loc_4B5865  +
cmp dl 69h +
jnz loc_4B5600  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B5600  +
mov eax ebx +
call sub_4B5330  +
mov [esp+1Ch+var_1C] eax +
mov ecx edi +
mov edx 3Ah +
mov eax ebx +
call sub_4AC500  +
mov ecx esi +
mov edx 39h +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx ebp +
mov edx 38h +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
xor esi esi +
test cl cl +
jnz loc_4B57A1  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
cmp al 77h +
jz loc_4B553F  +
nop   +
add esp 1Ch +
xor esi esi +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B53AD  +
add edx 2 +
mov [ebx+0Ch] edx +
jmp loc_4B5367  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4B33A0  +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
jmp sub_4AC8C0  +
mov edx [ebp+4] +
mov [esp+1Ch+var_14] 0 +
jmp loc_4B54EF  +
mov eax ebx +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
add edx 2 +
mov [ebx+0Ch] edx +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov esi eax +
mov eax ebx +
call sub_4B1DB0  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 49h +
mov edi eax +
jz loc_4B580B  +
mov [esp+1Ch+var_1C] eax +
mov ecx esi +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
mov eax [ebp+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B57E4  +
mov eax ebx +
call sub_4B5330  +
mov [esp+1Ch+var_10] eax +
mov esi [esp+1Ch+var_14] +
mov edi offset aCl +
mov ecx 3 +
cmps   +
jz loc_4B57D1  +
mov esi [esp+1Ch+var_14] +
mov edi offset unk_50BE2F +
mov ecx 3 +
cmps   +
jz loc_4B5708  +
mov esi [esp+1Ch+var_14] +
mov edi offset unk_50BE32 +
mov ecx 3 +
cmps   +
jnz loc_4B582B  +
mov eax ebx +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B5846  +
mov ecx [esp+1Ch+var_10] +
mov edx 37h +
mov eax ebx +
mov [esp+1Ch+var_1C] esi +
call sub_4AC500  +
mov ecx ebp +
mov edx 36h +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
add edx 3 +
xor eax eax +
mov [ebx+0Ch] edx +
jmp loc_4B5446  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B53F0  +
test edx edx +
jnz loc_4B5600  +
mov [esp+1Ch+var_1C] 0 +
mov ecx ebp +
mov edx 34h +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5384  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
jmp loc_4B5405  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B55CD  +
mov eax ebx +
call sub_4B5330  +
mov esi eax +
mov eax ebx +
call sub_4B5330  +
mov edi eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B5589  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B571D  +
movzx eax byte ptr [eax] +
lea edx [eax-63h] +
cmp dl 1 +
jbe loc_4B57FA  +
sub eax 72h +
cmp al 1 +
ja loc_4B56BF  +
mov [esp+1Ch+var_1C] ebx +
call sub_4B0800  +
mov [esp+1Ch+var_10] eax +
jmp loc_4B56CA  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+1Ch+var_1C] eax +
jmp loc_4B5698  +
mov eax ebx +
call sub_4B5330  +
mov esi eax +
jmp loc_4B571D  +
add eax 1 +
mov [ebx+0Ch] eax +
xor eax eax +
jmp loc_4B5589  +
mov eax ebx +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+1Ch+var_1C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B571D  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B5600  +
add eax 2 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B5589  +
mov edi [esp+1Ch+var_14] +
xor esi esi +
test edi edi +
jz loc_4B589D  +
movzx edx byte ptr [edi] +
cmp dl 6Dh +
jz loc_4B58B0  +
cmp dl 70h +
jz loc_4B58B0  +
cmp eax 33h +
jnz loc_4B53E9  +
jmp loc_4B53DD  +
mov edi [esp+1Ch+var_14] +
xor esi esi +
cmp dl [edi+1] +
jnz loc_4B589D  +
mov edx [ebx+0Ch] +
mov si 1 +
cmp byte ptr [edx] 5Fh +
jnz loc_4B589D  +
add edx 1 +
xor si si +
mov [ebx+0Ch] edx +
jmp loc_4B589D  +
cmp al 69h +
jz loc_4B53A3  +
jmp loc_4B53AD  +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 2Ch +
mov eax [eax+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B5918  +
mov eax ebx +
call sub_4AC840  +
mov esi eax +
test esi esi +
jz loc_4B5CF4  +
mov edx [ebx+0Ch] +
xor eax eax +
cmp byte ptr [edx] 5Fh +
jz loc_4B59B0  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea esi [eax+1] +
mov ebp [ebx+34h] +
mov [ebx+0Ch] esi +
mov dword ptr [ebx+34h] 1 +
movzx edx byte ptr [eax+1] +
cmp dl 4Ch +
jz loc_4B5C90  +
cmp dl 54h +
jz loc_4B5CA0  +
cmp dl 73h +
jz loc_4B59D7  +
cmp dl 66h +
jz loc_4B5B50  +
lea ecx [edx-30h] +
cmp cl 9 +
jbe loc_4B5B25  +
cmp dl 6Fh +
jz loc_4B5B15  +
cmp dl 74h +
setz cl  +
jnz loc_4B7A77  +
cmp byte ptr [eax+2] 6Ch +
jnz loc_4B59ED  +
xor edi edi +
test cl cl +
jnz loc_4B5F26  +
add esi 2 +
mov edx 45h +
mov [ebx+0Ch] esi +
mov eax ebx +
call sub_4B35C0  +
mov ecx edi +
mov edx 30h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
add edx 1 +
mov [ebx+0Ch] edx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov ecx esi +
mov edx 2Dh +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx edx byte ptr [eax+2] +
cmp dl 72h +
jz loc_4B5E97  +
cmp dl 70h +
jz loc_4B5EED  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov [esp+2Ch+var_1C] eax +
jz loc_4B5C87  +
mov eax [eax] +
cmp eax 31h +
jz loc_4B5CB0  +
cmp eax 32h +
jz loc_4B5BA0  +
cmp eax 33h +
jnz loc_4B5C87  +
mov edx [ebx+0Ch] +
xor esi esi +
movzx eax byte ptr [edx] +
cmp al 5Fh +
jz loc_4B653E  +
cmp al 4Ch +
jz loc_4B6522  +
cmp al 54h +
jz loc_4B6530  +
cmp al 73h +
nop   +
jz loc_4B6247  +
cmp al 66h +
jz loc_4B6284  +
lea ecx [eax-30h] +
cmp cl 9 +
jbe loc_4B5F48  +
cmp al 6Fh +
jz loc_4B5F38  +
cmp al 74h +
setz cl  +
jnz loc_4B7B0A  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B679E  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov edi eax +
jz loc_4B6349  +
mov ecx [eax] +
cmp ecx 31h +
jz loc_4B6597  +
cmp ecx 32h +
jz loc_4B67D0  +
cmp ecx 33h +
jnz loc_4B6349  +
mov [esp+2Ch+var_18] 0 +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B7AF3  +
mov eax ebx +
call sub_4B5330  +
cmp [esp+2Ch+var_18] 0 +
mov [esp+2Ch+var_2C] eax +
jz loc_4B5ADB  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov ecx edi +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
test esi esi +
mov [esp+2Ch+var_2C] ecx +
jz loc_4B5B01  +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov ecx [esp+2Ch+var_1C] +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
cmp byte ptr [eax+2] 6Eh +
jnz loc_4B59ED  +
add eax 3 +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
mov esi eax +
jz loc_4B5C87  +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B5CFB  +
mov [ebx+34h] ebp +
jmp loc_4B58FA  +
cmp byte ptr [eax+2] 70h +
jnz loc_4B59ED  +
lea edx [eax+3] +
mov [ebx+0Ch] edx +
cmp byte ptr [eax+3] 54h +
jnz loc_4B5ED4  +
add eax 4 +
xor edx edx +
mov [ebx+0Ch] eax +
mov eax [ebx+14h] +
cmp eax [ebx+18h] +
jge loc_4B5C87  +
mov ecx [ebx+10h] +
lea esi [eax+eax*2] +
add eax 1 +
mov [ebx+14h] eax +
lea esi [ecx+esi*4] +
test esi esi +
jz loc_4B5B42  +
mov dword ptr [esi] 6 +
mov [esi+4] edx +
jmp loc_4B5B42  +
mov edi [esp+2Ch+var_1C] +
mov [esp+2Ch+var_18] 0 +
mov edx [edi+4] +
cmp edx 1 +
jz loc_4B77A6  +
jle loc_4B5D1A  +
cmp edx 2 +
jz loc_4B5D40  +
cmp edx 3 +
jnz loc_4B5C87  +
mov esi [esp+2Ch+var_18] +
mov edi offset aQu +
mov ecx 3 +
cmps   +
jz loc_4B5F9D  +
mov eax [esp+2Ch+var_18] +
cmp byte ptr [eax] 6Eh +
jnz loc_4B5C87  +
movzx eax byte ptr [eax+1] +
cmp al 61h +
jnz loc_4B5C7F  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov edi eax +
call sub_4B0800  +
mov esi eax +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B6326  +
cmp dl 70h +
jz loc_4B64FF  +
cmp dl 69h +
jnz loc_4B5C87  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B5C87  +
mov eax ebx +
call sub_4B5330  +
mov ecx eax +
mov [esp+2Ch+var_2C] ecx +
mov edx 3Ah +
mov ecx esi +
mov eax ebx +
call sub_4AC500  +
mov ecx edi +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_1C] +
mov edx 38h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
cmp al 77h +
jz loc_4B5BFF  +
xor esi esi +
jmp loc_4B5B42  +
mov eax ebx +
call sub_4B33A0  +
mov esi eax +
jmp loc_4B5B42  +
mov eax ebx +
call sub_4AC8C0  +
mov esi eax +
jmp loc_4B5B42  +
mov edi [esp+2Ch+var_1C] +
mov edi [edi+4] +
mov esi [edi] +
mov [esp+2Ch+var_14] edi +
mov edi [edi+8] +
mov [esp+2Ch+var_18] esi +
lea ecx [edi-2] +
mov edi offset aSt +
add [ebx+30h] ecx +
mov ecx 3 +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov edx esi +
cmp dl cl +
jz loc_4B5F16  +
mov edi [esp+2Ch+var_14] +
mov edx [edi+0Ch] +
jmp loc_4B5BAF  +
xor eax eax +
jmp loc_4B5910  +
mov eax ebx +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
test edx edx +
jnz loc_4B5C87  +
mov ecx [esp+2Ch+var_1C] +
mov edx 34h +
mov eax ebx +
mov [esp+2Ch+var_2C] 0 +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
mov eax [esp+2Ch+var_1C] +
mov eax [eax+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B6200  +
mov edx [ebx+0Ch] +
movzx eax byte ptr [edx] +
cmp al 4Ch +
jz loc_4B687F  +
cmp al 54h +
jz loc_4B69D3  +
cmp al 73h +
jz loc_4B6355  +
cmp al 66h +
jz loc_4B6394  +
lea ecx [eax-30h] +
cmp cl 9 +
jbe loc_4B62E4  +
cmp al 6Fh +
jz loc_4B62D4  +
cmp al 74h +
setz cl  +
jnz loc_4B7AB7  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B6B11  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov esi eax +
jz loc_4B66BF  +
mov edx [eax] +
cmp edx 31h +
jz loc_4B688F  +
cmp edx 32h +
jz loc_4B6AD6  +
cmp edx 33h +
jnz loc_4B66BF  +
xor ecx ecx +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B791B  +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B5330  +
mov ecx [esp+2Ch+var_14] +
test ecx ecx +
mov [esp+2Ch+var_2C] eax +
jz loc_4B5E05  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov ecx esi +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
mov esi [esp+2Ch+var_18] +
mov edi offset aCl +
mov ecx 3 +
cmps   +
jz loc_4B5F8A  +
mov esi [esp+2Ch+var_18] +
mov edi offset unk_50BE2F +
mov ecx 3 +
cmps   +
jz loc_4B5E55  +
mov esi [esp+2Ch+var_18] +
mov edi offset unk_50BE32 +
mov ecx 3 +
cmps   +
jnz loc_4B6333  +
mov eax ebx +
call sub_4B1DB0  +
mov esi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B63F0  +
mov ecx [esp+2Ch+var_14] +
mov edx 37h +
mov eax ebx +
mov [esp+2Ch+var_2C] esi +
call sub_4AC500  +
mov ecx [esp+2Ch+var_1C] +
mov edx 36h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
add eax 3 +
mov [ebx+0Ch] eax +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
mov eax ebx +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B6227  +
mov [esp+2Ch+var_2C] edi +
mov ecx esi +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B5B72  +
xor esi esi +
jmp loc_4B5B42  +
add eax 3 +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5B42  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B5B01  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi [ebx+0Ch] +
mov edi eax +
jmp loc_4B5981  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B5A77  +
add edx 2 +
mov [ebx+0Ch] edx +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
mov ecx eax +
jz loc_4B6349  +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jnz loc_4B5AEB  +
mov eax ebx +
mov [esp+2Ch+var_18] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_18] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5AEB  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov esi eax +
jmp loc_4B5E6A  +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 4Ch +
jz loc_4B6B4B  +
cmp dl 54h +
jz loc_4B6C4A  +
cmp dl 73h +
jz loc_4B66CC  +
cmp dl 66h +
jz loc_4B67DA  +
lea ecx [edx-30h] +
cmp cl 9 +
jbe loc_4B64C0  +
cmp dl 6Fh +
jz loc_4B64B0  +
cmp dl 74h +
setz cl  +
jnz loc_4B7798  +
cmp byte ptr [eax+1] 6Ch +
jz loc_4B6D85  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov esi eax +
jz loc_4B71A9  +
mov edx [eax] +
cmp edx 31h +
jz loc_4B6D4C  +
cmp edx 32h +
jz loc_4B6C6C  +
cmp edx 33h +
jnz loc_4B6B07  +
xor ecx ecx +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B7960  +
mov eax ebx +
mov [esp+2Ch+var_18] ecx +
call sub_4B5330  +
mov ecx [esp+2Ch+var_18] +
test ecx ecx +
mov [esp+2Ch+var_2C] eax +
jz loc_4B6055  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov edx 35h +
mov ecx esi +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
movzx eax byte ptr [edx] +
cmp al 4Ch +
jz loc_4B6B5C  +
cmp al 54h +
jz loc_4B6C5B  +
cmp al 73h +
jz loc_4B6557  +
cmp al 66h +
jz loc_4B674B  +
lea ecx [eax-30h] +
cmp cl 9 +
jbe loc_4B6471  +
cmp al 6Fh +
jz loc_4B6461  +
cmp al 74h +
setz cl  +
jnz loc_4B76FD  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B6EE6  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov esi eax +
jz loc_4B69A5  +
mov ecx [eax] +
cmp ecx 31h +
jz loc_4B6DBA  +
cmp ecx 32h +
jz loc_4B70C4  +
cmp ecx 33h +
jnz loc_4B69A5  +
mov [esp+2Ch+var_18] 0 +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B76C6  +
mov eax ebx +
call sub_4B5330  +
cmp [esp+2Ch+var_18] 0 +
mov [esp+2Ch+var_2C] eax +
jz loc_4B6118  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov ecx esi +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
movzx ecx byte ptr [edx] +
cmp cl 4Ch +
jz loc_4B6AE0  +
cmp cl 54h +
jz loc_4B6ED8  +
cmp cl 73h +
jz loc_4B670E  +
cmp cl 66h +
jz loc_4B682D  +
lea eax [ecx-30h] +
cmp al 9 +
jbe loc_4B641F  +
cmp cl 6Fh +
jz loc_4B640F  +
cmp cl 74h +
setz al  +
jnz loc_4B7820  +
cmp byte ptr [edx+1] 6Ch +
jz loc_4B7010  +
mov eax ebx +
call sub_4B1B40  +
test eax eax +
mov [esp+2Ch+var_18] eax +
jz loc_4B632C  +
mov eax [eax] +
cmp eax 31h +
mov [esp+2Ch+var_10] eax +
jz loc_4B7048  +
mov eax [esp+2Ch+var_10] +
cmp eax 32h +
jz loc_4B6F1B  +
cmp eax 33h +
jnz loc_4B632C  +
xor ecx ecx +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 5Fh +
jz loc_4B7AC5  +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B5330  +
mov ecx [esp+2Ch+var_14] +
test ecx ecx +
mov [esp+2Ch+var_2C] eax +
jz loc_4B61E9  +
mov ecx eax +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
mov ecx [esp+2Ch+var_18] +
mov edx 35h +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
movzx eax byte ptr [eax] +
lea edx [eax-63h] +
cmp dl 1 +
jbe loc_4B6216  +
sub eax 72h +
cmp al 1 +
ja loc_4B5D53  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B5EBF  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B6A99  +
cmp al 70h +
jnz loc_4B5A77  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5AEB  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B5A77  +
lea eax [edx+2] +
mov [ebx+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B6AEE  +
add edx 3 +
mov [ebx+0Ch] edx +
xor edx edx +
mov eax [ebx+14h] +
cmp eax [ebx+18h] +
jge loc_4B6349  +
imul ecx eax +
add eax 1 +
add ecx [ebx+10h] +
mov [ebx+14h] eax +
test ecx ecx +
jz loc_4B5AEB  +
mov dword ptr [ecx] 6 +
mov [ecx+4] edx +
jmp loc_4B5AEB  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B5DA2  +
add edx 2 +
mov [ebx+0Ch] edx +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
mov [esp+2Ch+var_14] eax +
jz loc_4B66BF  +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jnz loc_4B5E17  +
mov eax ebx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_14] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
add eax 1 +
mov [ebx+0Ch] eax +
xor ecx ecx +
jmp loc_4B5C43  +
mov eax ebx +
call sub_4B5330  +
mov esi eax +
jmp loc_4B5E6A  +
cmp al 77h +
jz loc_4B662B  +
xor ecx ecx +
nop   +
lea esi [esi+0] +
jmp loc_4B5AEB  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B7085  +
cmp al 70h +
jnz loc_4B5DA2  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B5DA2  +
lea eax [edx+2] +
mov [ebx+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B6C33  +
add edx 3 +
mov [ebx+0Ch] edx +
xor edx edx +
mov eax [ebx+14h] +
cmp eax [ebx+18h] +
jge loc_4B66BF  +
imul edi eax +
add eax 1 +
mov [ebx+14h] eax +
mov [esp+2Ch+var_14] edi +
mov edi [ebx+10h] +
add [esp+2Ch+var_14] edi +
mov eax [esp+2Ch+var_14] +
test eax eax +
jz loc_4B5E17  +
mov dword ptr [eax] 6 +
mov [eax+4] edx +
jmp loc_4B5E17  +
mov eax ebx +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov esi eax +
jmp loc_4B5E6A  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B617C  +
add edx 2 +
mov [ebx+0Ch] edx +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
mov ecx eax +
jz loc_4B5C43  +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jnz loc_4B5C43  +
mov eax ebx +
mov [esp+2Ch+var_18] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_18] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
cmp byte ptr [edx+1] 6Eh +
jnz loc_4B60B4  +
add edx 2 +
mov [ebx+0Ch] edx +
mov eax ebx +
call sub_4B1DB0  +
mov edx [ebx+0Ch] +
test eax eax +
mov esi eax +
jz loc_4B612B  +
cmp byte ptr [edx] 49h +
jnz loc_4B612B  +
mov eax ebx +
call sub_4B21A0  +
mov ecx esi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
cmp byte ptr [eax+1] 6Eh +
jnz loc_4B5FF2  +
add eax 2 +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B1DB0  +
test eax eax +
mov edi eax +
jz loc_4B71A9  +
mov edx [ebx+0Ch] +
cmp byte ptr [edx] 49h +
jnz loc_4B6068  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B5C87  +
add eax 2 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
mov ecx eax +
jmp loc_4B5C43  +
mov eax ebx +
call sub_4B33A0  +
mov ecx eax +
jmp loc_4B5AEB  +
mov eax ebx +
call sub_4AC8C0  +
mov ecx eax +
jmp loc_4B5AEB  +
add edx 1 +
mov eax ebx +
mov [ebx+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
mov ecx eax +
jmp loc_4B5AEB  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B74A4  +
cmp al 70h +
jnz loc_4B60B4  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax [eax+4] +
mov [esp+2Ch+var_14] ecx +
mov edx [eax] +
mov eax [eax+8] +
mov [esp+2Ch+var_28] offset aSt +
mov [esp+2Ch+var_2C] edx +
sub eax 2 +
add [ebx+30h] eax +
mov [esp+2Ch+var_18] edx +
call strcmp  +
mov edx [esp+2Ch+var_18] +
mov ecx [esp+2Ch+var_14] +
test eax eax +
jz loc_4B70CE  +
mov eax [edi+4] +
mov eax [eax+0Ch] +
cmp eax 1 +
jz loc_4B770A  +
jle loc_4B69AF  +
cmp eax 2 +
jz loc_4B69E3  +
cmp eax 3 +
nop   +
jnz loc_4B6349  +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_28] offset aQu +
mov [esp+2Ch+var_18] edx +
call strcmp  +
mov edx [esp+2Ch+var_18] +
test eax eax +
jz loc_4B7533  +
cmp byte ptr [edx] 6Eh +
jnz loc_4B6349  +
movzx eax byte ptr [edx+1] +
cmp al 61h +
jnz loc_4B6341  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_18] eax +
call sub_4B0800  +
mov [esp+2Ch+var_14] eax +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B76A8  +
cmp dl 70h +
jz loc_4B7687  +
cmp dl 69h +
jnz loc_4B6349  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B6349  +
mov eax ebx +
call sub_4B5330  +
mov ecx [esp+2Ch+var_14] +
mov edx 3Ah +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_18] +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx edi +
mov edx 38h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5AEB  +
cmp al 77h +
jz loc_4B6913  +
mov [esp+2Ch+var_14] 0 +
jmp loc_4B5E17  +
movzx edx byte ptr [eax+1] +
cmp dl 72h +
jz loc_4B71C6  +
cmp dl 70h +
jnz loc_4B5FF2  +
add eax 2 +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
movzx eax byte ptr [edx+1] +
cmp al 72h +
jz loc_4B7100  +
cmp al 70h +
jnz loc_4B617C  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
call sub_4B5330  +
mov edx 49h +
mov [esp+2Ch+var_2C] 0 +
mov ecx eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B60B4  +
lea eax [edx+2] +
mov [ebx+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B74E4  +
add edx 3 +
mov [ebx+0Ch] edx +
xor edx edx +
mov eax [ebx+14h] +
cmp eax [ebx+18h] +
jge loc_4B69A5  +
imul esi eax +
add eax 1 +
add esi [ebx+10h] +
mov [ebx+14h] eax +
test esi esi +
jz loc_4B69A7  +
mov [esi+4] edx +
mov edx [ebx+0Ch] +
mov dword ptr [esi] 6 +
jmp loc_4B612B  +
xor edi edi +
test cl cl +
jnz loc_4B70DE  +
add dword ptr [ebx+0Ch] 2 +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx edi +
mov edx 30h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5AEB  +
mov eax [eax+4] +
xor edx edx +
jmp loc_4B65D3  +
cmp byte ptr [eax+1] 70h +
jnz loc_4B5FF2  +
lea edx [eax+2] +
mov [ebx+0Ch] edx +
cmp byte ptr [eax+2] 54h +
jnz loc_4B7197  +
add eax 3 +
xor edx edx +
mov [ebx+0Ch] eax +
mov eax [ebx+14h] +
cmp eax [ebx+18h] +
jge loc_4B71A9  +
imul edi eax +
add eax 1 +
add edi [ebx+10h] +
mov [ebx+14h] eax +
test edi edi +
jz loc_4B6B09  +
mov [edi+4] edx +
mov edx [ebx+0Ch] +
mov dword ptr [edi] 6 +
jmp loc_4B6068  +
cmp byte ptr [edx+1] 70h +
jnz loc_4B617C  +
lea eax [edx+2] +
mov [ebx+0Ch] eax +
cmp byte ptr [edx+2] 54h +
jnz loc_4B7141  +
add edx 3 +
mov [ebx+0Ch] edx +
xor edx edx +
mov eax [ebx+14h] +
xor ecx ecx +
cmp eax [ebx+18h] +
jge loc_4B5C43  +
imul ecx eax +
add eax 1 +
add ecx [ebx+10h] +
mov [ebx+14h] eax +
test ecx ecx +
jz loc_4B5C43  +
mov dword ptr [ecx] 6 +
mov [ecx+4] edx +
jmp loc_4B5C43  +
mov eax ebx +
call sub_4B33A0  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
mov eax [eax+4] +
mov [esp+2Ch+var_14] edx +
mov edi [eax] +
mov eax [eax+8] +
mov [esp+2Ch+var_28] offset aSt +
mov [esp+2Ch+var_2C] edi +
sub eax 2 +
add [ebx+30h] eax +
call strcmp  +
mov edx [esp+2Ch+var_14] +
test eax eax +
jz loc_4B7523  +
mov eax [esi+4] +
mov eax [eax+0Ch] +
cmp eax 1 +
jz loc_4B764D  +
jle loc_4B6C0D  +
cmp eax 2 +
jz loc_4B6B6D  +
cmp eax 3 +
nop   +
jnz loc_4B66BF  +
mov [esp+2Ch+var_28] offset aQu +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B73AE  +
cmp byte ptr [edi] 6Eh +
jnz loc_4B66BF  +
movzx eax byte ptr [edi+1] +
cmp al 61h +
jnz loc_4B66B7  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_14] eax +
call sub_4B0800  +
mov edi eax +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B79BF  +
cmp dl 70h +
jz loc_4B799E  +
cmp dl 69h +
jnz loc_4B66BF  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B66BF  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_2C] eax +
mov ecx edi +
mov edx 3Ah +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_14] +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx esi +
mov edx 38h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
cmp al 77h +
jz loc_4B6E4C  +
xor esi esi +
mov edx [ebx+0Ch] +
jmp loc_4B612B  +
test eax eax +
jnz loc_4B6349  +
mov ecx edi +
mov edx 34h +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5AEB  +
mov eax ebx +
call sub_4AC8C0  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
mov eax [edi+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B715A  +
mov eax ebx +
mov [esp+2Ch+var_14] edx +
call sub_4B5330  +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_18] eax +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_28] offset aCl +
mov [esp+2Ch+var_14] edx +
call strcmp  +
mov edx [esp+2Ch+var_14] +
test eax eax +
jz loc_4B71B3  +
mov [esp+2Ch+var_28] offset unk_50BE2F +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_14] edx +
call strcmp  +
test eax eax +
jz loc_4B6A59  +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] offset unk_50BE32 +
mov [esp+2Ch+var_2C] edx +
call strcmp  +
test eax eax +
jnz loc_4B7189  +
mov eax ebx +
call sub_4B1DB0  +
mov ecx eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B7764  +
mov [esp+2Ch+var_2C] ecx +
mov ecx [esp+2Ch+var_18] +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov ecx edi +
mov edx 36h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5AEB  +
add edx 2 +
mov [ebx+0Ch] edx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edi eax +
mov eax ebx +
call sub_4B1DB0  +
mov ecx eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B74FD  +
mov [esp+2Ch+var_2C] ecx +
mov ecx edi +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5AEB  +
mov eax [eax+4] +
xor edi edi +
jmp loc_4B68C3  +
mov eax ebx +
call sub_4B33A0  +
mov ecx eax +
jmp loc_4B5C43  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B62A6  +
xor ecx ecx +
jmp loc_4B5AEB  +
xor edi edi +
mov edx [ebx+0Ch] +
jmp loc_4B6068  +
xor esi esi +
test cl cl +
jz loc_4B6B21  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
add dword ptr [ebx+0Ch] 2 +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
mov eax ebx +
call sub_4B33A0  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
mov eax ebx +
call sub_4B33A0  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax [esi+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B7206  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_14] eax +
mov [esp+2Ch+var_28] offset aCl +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B70ED  +
mov [esp+2Ch+var_28] offset unk_50BE2F +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B6BCB  +
mov [esp+2Ch+var_28] offset unk_50BE32 +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jnz loc_4B77F2  +
mov eax ebx +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B797F  +
mov ecx [esp+2Ch+var_14] +
mov edx 37h +
mov eax ebx +
mov [esp+2Ch+var_2C] edi +
call sub_4AC500  +
mov ecx esi +
mov edx 36h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
test eax eax +
jnz loc_4B66BF  +
mov [esp+2Ch+var_2C] 0 +
mov ecx esi +
mov edx 34h +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B63B6  +
jmp loc_4B66BF  +
mov eax ebx +
call sub_4AC8C0  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
mov eax ebx +
call sub_4AC8C0  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax [eax+4] +
xor edi edi +
cmp eax 1 +
jz loc_4B7BD0  +
jle loc_4B72CE  +
cmp eax 2 +
jz loc_4B722D  +
cmp eax 3 +
lea esi [esi+0] +
jnz loc_4B6B07  +
mov [esp+2Ch+var_28] offset aQu +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B7B88  +
cmp byte ptr [edi] 6Eh +
jnz loc_4B71A9  +
movzx eax byte ptr [edi+1] +
cmp al 61h +
jnz loc_4B7BC3  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_18] eax +
call sub_4B0800  +
mov edx [ebx+0Ch] +
mov edi eax +
movzx eax byte ptr [edx] +
cmp al 45h +
jz loc_4B7BB6  +
cmp al 70h +
jz loc_4B7B2D  +
cmp al 69h +
jnz loc_4B71AC  +
cmp byte ptr [edx+1] 6Ch +
nop   +
jnz loc_4B7AAB  +
mov eax ebx +
call sub_4B5330  +
mov ecx edi +
mov edx 3Ah +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_18] +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx 38h +
mov ecx esi +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
mov eax [eax+4] +
mov [esp+2Ch+var_18] edx +
mov edi [eax] +
mov eax [eax+8] +
mov [esp+2Ch+var_28] offset aSt +
mov [esp+2Ch+var_2C] edi +
sub eax 2 +
add [ebx+30h] eax +
call strcmp  +
mov edx [esp+2Ch+var_18] +
test eax eax +
jz loc_4B7B17  +
mov eax [esi+4] +
mov eax [eax+0Ch] +
jmp loc_4B6C71  +
xor esi esi +
test cl cl +
jnz loc_4B7A5B  +
add dword ptr [ebx+0Ch] 2 +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov edx 30h +
mov ecx esi +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
mov eax [eax+4] +
mov [esp+2Ch+var_14] ecx +
mov edx [eax] +
mov eax [eax+8] +
mov [esp+2Ch+var_28] offset aSt +
mov [esp+2Ch+var_2C] edx +
sub eax 2 +
add [ebx+30h] eax +
mov [esp+2Ch+var_18] edx +
call strcmp  +
mov edx [esp+2Ch+var_18] +
mov ecx [esp+2Ch+var_14] +
test eax eax +
jz loc_4B75C4  +
mov eax [esi+4] +
mov eax [eax+0Ch] +
cmp eax 1 +
jz loc_4B758A  +
jle loc_4B7555  +
cmp eax 2 +
jz loc_4B72F5  +
cmp eax 3 +
jnz loc_4B69A5  +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_28] offset aQu +
mov [esp+2Ch+var_18] edx +
call strcmp  +
mov edx [esp+2Ch+var_18] +
test eax eax +
jz loc_4B762B  +
cmp byte ptr [edx] 6Eh +
jnz loc_4B69A5  +
movzx eax byte ptr [edx+1] +
cmp al 61h +
jnz loc_4B699D  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_18] eax +
call sub_4B0800  +
mov edx [ebx+0Ch] +
mov [esp+2Ch+var_14] eax +
movzx eax byte ptr [edx] +
cmp al 45h +
jz loc_4B7607  +
cmp al 70h +
jz loc_4B75F5  +
cmp al 69h +
jnz loc_4B76BF  +
cmp byte ptr [edx+1] 6Ch +
jnz loc_4B76B5  +
mov eax ebx +
call sub_4B5330  +
mov ecx [esp+2Ch+var_14] +
mov edx 3Ah +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_18] +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx esi +
mov edx 38h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax ebx +
call sub_4AC8C0  +
mov ecx eax +
jmp loc_4B5C43  +
xor esi esi +
test cl cl +
jnz loc_4B7AE4  +
add dword ptr [ebx+0Ch] 2 +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx esi +
mov edx 30h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_14] 0 +
mov eax [eax+4] +
cmp eax 1 +
jz loc_4B78AD  +
jle loc_4B747E  +
cmp eax 2 +
jz loc_4B73CE  +
cmp eax 3 +
jnz loc_4B632C  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] offset aQu +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jz loc_4B7A2B  +
mov eax [esp+2Ch+var_14] +
cmp byte ptr [eax] 6Eh +
jnz loc_4B632C  +
movzx eax byte ptr [eax+1] +
cmp al 61h +
jnz loc_4B785C  +
mov edx 5Fh +
mov eax ebx +
call sub_4B35C0  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_14] eax +
call sub_4B0800  +
mov [esp+2Ch+var_10] eax +
mov eax [ebx+0Ch] +
movzx edx byte ptr [eax] +
cmp dl 45h +
jz loc_4B784F  +
xor ecx ecx +
cmp dl 70h +
jz loc_4B782E  +
cmp dl 69h +
jnz loc_4B5C43  +
cmp byte ptr [eax+1] 6Ch +
jnz loc_4B5C43  +
mov eax ebx +
call sub_4B5330  +
mov ecx [esp+2Ch+var_10] +
mov edx 3Ah +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_14] +
mov edx 39h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_18] +
mov edx 38h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
xor ecx ecx +
test al al +
jnz loc_4B7789  +
add dword ptr [ebx+0Ch] 2 +
mov edx 45h +
mov eax ebx +
mov [esp+2Ch+var_18] ecx +
call sub_4B35C0  +
mov ecx [esp+2Ch+var_18] +
mov edx 30h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
mov eax [esp+2Ch+var_18] +
mov eax [eax+4] +
mov ecx [eax] +
mov eax [eax+8] +
mov [esp+2Ch+var_28] offset aSt +
mov [esp+2Ch+var_2C] ecx +
sub eax 2 +
add [ebx+30h] eax +
mov [esp+2Ch+var_14] ecx +
call strcmp  +
test eax eax +
jz loc_4B7A6A  +
mov eax [esp+2Ch+var_18] +
mov eax [eax+4] +
mov eax [eax+0Ch] +
jmp loc_4B6F2A  +
add edx 2 +
mov [ebx+0Ch] edx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
mov eax ebx +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B76DD  +
mov [esp+2Ch+var_2C] edi +
mov ecx esi +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B5E17  +
mov eax [eax+4] +
xor edx edx +
jmp loc_4B6DF6  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B5ADB  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov edi eax +
jmp loc_4B67A8  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov edi eax +
jmp loc_4B6BE0  +
add edx 2 +
mov [ebx+0Ch] edx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_18] eax +
mov eax ebx +
call sub_4B1DB0  +
mov ecx eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B7A85  +
mov [esp+2Ch+var_2C] ecx +
mov ecx [esp+2Ch+var_18] +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B684F  +
xor ecx ecx +
jmp loc_4B5C43  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B7170  +
sub eax 72h +
cmp al 1 +
ja loc_4B69F2  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_14] edx +
call sub_4B0800  +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_18] eax +
jmp loc_4B6A05  +
mov eax ebx +
call sub_4B5330  +
mov ecx eax +
jmp loc_4B6A6E  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B67FC  +
mov edx [ebx+0Ch] +
xor edi edi +
jmp loc_4B6068  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx eax +
jmp loc_4B6A6E  +
add eax 2 +
mov [ebx+0Ch] eax +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
mov eax ebx +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B7800  +
mov [esp+2Ch+var_2C] edi +
mov edx 1 +
mov ecx esi +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
movzx eax byte ptr [eax] +
lea edx [eax-63h] +
cmp dl 1 +
jbe loc_4B721C  +
sub eax 72h +
cmp al 1 +
ja loc_4B6B7C  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_14] eax +
jmp loc_4B6B87  +
mov eax [esi+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B7B61  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_18] eax +
mov [esp+2Ch+var_28] offset aCl +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B7B4E  +
mov [esp+2Ch+var_28] offset unk_50BE2F +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jz loc_4B728B  +
mov [esp+2Ch+var_28] offset unk_50BE32 +
mov [esp+2Ch+var_2C] edi +
call strcmp  +
test eax eax +
jnz loc_4B7BA8  +
mov eax ebx +
call sub_4B1DB0  +
mov edi eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B7C02  +
mov ecx [esp+2Ch+var_18] +
mov edx 37h +
mov eax ebx +
mov [esp+2Ch+var_2C] edi +
call sub_4AC500  +
mov edx 36h +
mov ecx esi +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
test eax eax +
jnz loc_4B6B07  +
mov edx 34h +
mov ecx esi +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov edi eax +
jmp loc_4B6068  +
mov eax [esi+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B787E  +
mov eax ebx +
mov [esp+2Ch+var_14] edx +
call sub_4B5330  +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_18] eax +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_28] offset aCl +
mov [esp+2Ch+var_14] edx +
call strcmp  +
mov edx [esp+2Ch+var_14] +
test eax eax +
jz loc_4B786B  +
mov [esp+2Ch+var_28] offset unk_50BE2F +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_14] edx +
call strcmp  +
test eax eax +
jz loc_4B736B  +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] offset unk_50BE32 +
mov [esp+2Ch+var_2C] edx +
call strcmp  +
test eax eax +
jnz loc_4B757C  +
mov eax ebx +
call sub_4B1DB0  +
mov ecx eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B79CC  +
mov [esp+2Ch+var_2C] ecx +
mov ecx [esp+2Ch+var_18] +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov ecx esi +
mov edx 36h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_14] eax +
mov eax ebx +
call sub_4B5330  +
mov edi eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B695F  +
mov eax [esp+2Ch+var_18] +
mov eax [eax+4] +
mov eax [eax] +
cmp byte ptr [eax+1] 63h +
jz loc_4B7A04  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_10] eax +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] offset aCl +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jz loc_4B79F1  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] offset unk_50BE2F +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jz loc_4B743C  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] offset unk_50BE32 +
mov [esp+2Ch+var_2C] eax +
call strcmp  +
test eax eax +
jnz loc_4B7A4D  +
mov eax ebx +
call sub_4B1DB0  +
mov ecx eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B78E2  +
mov [esp+2Ch+var_2C] ecx +
mov ecx [esp+2Ch+var_10] +
mov edx 37h +
mov eax ebx +
call sub_4AC500  +
mov ecx [esp+2Ch+var_18] +
mov edx 36h +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
test eax eax +
jnz loc_4B632C  +
mov ecx [esp+2Ch+var_18] +
mov edx 34h +
mov eax ebx +
mov [esp+2Ch+var_2C] 0 +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B5C43  +
add edx 2 +
mov [ebx+0Ch] edx +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
mov eax ebx +
call sub_4B1DB0  +
mov ecx eax +
mov eax [ebx+0Ch] +
cmp byte ptr [eax] 49h +
jz loc_4B793A  +
mov [esp+2Ch+var_2C] ecx +
mov ecx esi +
mov edx 1 +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax ebx +
call sub_4AC880  +
add eax 1 +
mov edx eax +
jnz loc_4B676D  +
xor esi esi +
jmp loc_4B69A7  +
mov eax ebx +
mov [esp+2Ch+var_18] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_18] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B6AC1  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B5E05  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_18] eax +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_14] eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B6679  +
test eax eax +
jnz loc_4B69A5  +
mov ecx esi +
mov edx 34h +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4AC500  +
mov edx [ebx+0Ch] +
mov esi eax +
jmp loc_4B612B  +
mov eax ebx +
call sub_4B5330  +
mov ecx eax +
jmp loc_4B7380  +
test edx edx +
mov [esp+2Ch+var_18] 0 +
jz loc_4B75AA  +
movzx eax byte ptr [edx] +
cmp al 6Dh +
jnz loc_4B75B8  +
cmp al [edx+1] +
mov [esp+2Ch+var_18] 0 +
jz loc_4B75D5  +
cmp ecx 33h +
jnz loc_4B60F6  +
jmp loc_4B60EA  +
cmp al 70h +
lea esi [esi+0] +
jnz loc_4B75AA  +
jmp loc_4B759D  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_2C] eax +
nop   +
jmp loc_4B6118  +
mov eax [ebx+0Ch] +
mov [esp+2Ch+var_18] 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B75AA  +
add eax 1 +
mov [ebx+0Ch] eax +
mov [esp+2Ch+var_18] 0 +
jmp loc_4B75AA  +
cmp byte ptr [edx+1] 69h +
mov ecx 70h +
jz loc_4B7614  +
xor esi esi +
jmp loc_4B615D  +
add edx 1 +
xor eax eax +
mov [ebx+0Ch] edx +
jmp loc_4B6E97  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
jmp loc_4B6E97  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_18] eax +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_14] eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B6E97  +
xor ecx ecx +
test edi edi +
jz loc_4B765E  +
movzx eax byte ptr [edi] +
cmp al 6Dh +
jz loc_4B766C  +
cmp al 70h +
jz loc_4B766C  +
cmp edx 33h +
jnz loc_4B5DDE  +
jmp loc_4B5DD2  +
xor ecx ecx +
cmp al [edi+1] +
jnz loc_4B765E  +
mov eax [ebx+0Ch] +
mov cl 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B765E  +
add eax 1 +
xor cl cl +
mov [ebx+0Ch] eax +
jmp loc_4B765E  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B6349  +
add eax 2 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B6679  +
add eax 1 +
mov [ebx+0Ch] eax +
xor eax eax +
jmp loc_4B6679  +
mov ecx 69h +
jmp loc_4B7600  +
xor esi esi +
jmp loc_4B612B  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B60FD  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B70AD  +
cmp al 69h +
jz loc_4B60AA  +
jmp loc_4B60B4  +
test edx edx +
mov [esp+2Ch+var_18] 0 +
jz loc_4B772A  +
movzx eax byte ptr [edx] +
cmp al 6Dh +
jnz loc_4B7738  +
cmp al [edx+1] +
mov [esp+2Ch+var_18] 0 +
jz loc_4B7744  +
cmp ecx 33h +
jnz loc_4B5AB9  +
jmp loc_4B5AAD  +
cmp al 70h +
lea esi [esi+0] +
jnz loc_4B772A  +
jmp loc_4B771D  +
mov eax [ebx+0Ch] +
mov [esp+2Ch+var_18] 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B772A  +
add eax 1 +
mov [ebx+0Ch] eax +
mov [esp+2Ch+var_18] 0 +
jmp loc_4B772A  +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_14] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B6A6E  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov ecx eax +
jmp loc_4B701A  +
cmp dl 69h +
jz loc_4B5FE8  +
jmp loc_4B5FF2  +
mov edi [esp+2Ch+var_18] +
test edi edi +
jz loc_4B77C4  +
movzx edx byte ptr [edi] +
cmp dl 6Dh +
jz loc_4B77BB  +
cmp dl 70h +
jnz loc_4B77C4  +
mov edi [esp+2Ch+var_18] +
cmp dl [edi+1] +
jz loc_4B77DA  +
mov edx [ebx+0Ch] +
xor esi esi +
cmp eax 33h +
jz loc_4B5A22  +
movzx eax byte ptr [edx] +
jmp loc_4B5A2D  +
mov edx [ebx+0Ch] +
mov esi 1 +
cmp byte ptr [edx] 5Fh +
jnz loc_4B77C9  +
add edx 1 +
xor si si +
mov [ebx+0Ch] edx +
jmp loc_4B77C9  +
mov eax ebx +
call sub_4B5330  +
mov edi eax +
jmp loc_4B6BE0  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B71EE  +
cmp cl 69h +
jz loc_4B6172  +
jmp loc_4B617C  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B5C43  +
add eax 2 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B6FD0  +
add eax 1 +
mov [ebx+0Ch] eax +
xor eax eax +
jmp loc_4B6FD0  +
cmp al 77h +
jz loc_4B6F80  +
xor ecx ecx +
jmp loc_4B5C43  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx eax +
jmp loc_4B7380  +
movzx eax byte ptr [eax] +
lea ecx [eax-63h] +
cmp cl 1 +
jbe loc_4B7894  +
sub eax 72h +
cmp al 1 +
ja loc_4B7304  +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_14] edx +
call sub_4B0800  +
mov edx [esp+2Ch+var_14] +
mov [esp+2Ch+var_18] eax +
jmp loc_4B7317  +
mov eax [esp+2Ch+var_14] +
xor ecx ecx +
test eax eax +
jz loc_4B78C9  +
movzx eax byte ptr [eax] +
cmp al 6Dh +
jnz loc_4B78D9  +
mov edx [esp+2Ch+var_14] +
xor ecx ecx +
cmp al [edx+1] +
jz loc_4B7907  +
cmp [esp+2Ch+var_10] 33h +
jnz loc_4B61C2  +
jmp loc_4B61B6  +
cmp al 70h +
jnz loc_4B78C9  +
lea esi [esi+0] +
jmp loc_4B78BE  +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_14] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B7451  +
mov eax [ebx+0Ch] +
mov cl 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B78C9  +
add eax 1 +
xor cl cl +
mov [ebx+0Ch] eax +
jmp loc_4B78C9  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B35C0  +
mov ecx [esp+2Ch+var_14] +
jmp loc_4B5DED  +
mov eax ebx +
mov [esp+2Ch+var_18] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_18] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B74CC  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
mov [esp+2Ch+var_18] ecx +
call sub_4B35C0  +
mov ecx [esp+2Ch+var_18] +
jmp loc_4B603D  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edi eax +
jmp loc_4B6BE0  +
cmp byte ptr [eax+1] 69h +
jnz loc_4B66BF  +
add eax 2 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B695F  +
add eax 1 +
mov [ebx+0Ch] eax +
xor eax eax +
jmp loc_4B695F  +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_14] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov ecx eax +
jmp loc_4B7380  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov ecx eax +
jmp loc_4B7451  +
movzx eax byte ptr [eax] +
lea edx [eax-63h] +
cmp dl 1 +
jbe loc_4B7A1A  +
sub eax 72h +
cmp al 1 +
ja loc_4B73E1  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_10] eax +
jmp loc_4B73EC  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_14] eax +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_10] eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B6FD0  +
mov eax ebx +
call sub_4B5330  +
mov ecx eax +
jmp loc_4B7451  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
jmp loc_4B6D8F  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
jmp loc_4B61E6  +
cmp dl 69h +
jz loc_4B5971  +
jmp loc_4B59ED  +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B21A0  +
mov ecx [esp+2Ch+var_14] +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B712A  +
mov eax 69h +
xor edi edi +
jmp loc_4B6097  +
cmp al 69h +
jz loc_4B5D98  +
nop   +
jmp loc_4B5DA2  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
mov [esp+2Ch+var_14] ecx +
call sub_4B35C0  +
mov ecx [esp+2Ch+var_14] +
jmp loc_4B61D1  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov esi eax +
jmp loc_4B6EF0  +
add eax 1 +
mov edx 45h +
mov [ebx+0Ch] eax +
mov eax ebx +
call sub_4B35C0  +
jmp loc_4B5AC0  +
cmp al 69h +
jz loc_4B5A6D  +
jmp loc_4B5A77  +
mov [esp+2Ch+var_2C] ebx +
lea esi [esi+0] +
call sub_4B0800  +
mov [esp+2Ch+var_2C] eax +
jmp loc_4B6055  +
cmp byte ptr [edx+1] 69h +
jnz loc_4B7AB0  +
add edx 2 +
mov eax ebx +
mov [ebx+0Ch] edx +
mov edx 45h +
call sub_4B35C0  +
jmp loc_4B6D0D  +
mov edx 45h +
mov eax ebx +
call sub_4B35C0  +
mov edi eax +
jmp loc_4B72A0  +
movzx eax byte ptr [eax] +
lea edx [eax-63h] +
cmp dl 1 +
jbe loc_4B7B77  +
sub eax 72h +
cmp al 1 +
ja loc_4B723C  +
mov [esp+2Ch+var_2C] ebx +
call sub_4B0800  +
mov [esp+2Ch+var_18] eax +
jmp loc_4B7247  +
mov eax ebx +
call sub_4B5330  +
mov [esp+2Ch+var_18] eax +
mov eax ebx +
call sub_4B5330  +
mov edi eax +
mov eax ebx +
call sub_4B5330  +
jmp loc_4B6D0D  +
mov eax ebx +
call sub_4B5330  +
mov edi eax +
jmp loc_4B72A0  +
add edx 1 +
xor eax eax +
mov [ebx+0Ch] edx +
jmp loc_4B6D0D  +
cmp al 77h +
jz loc_4B6CC3  +
jmp loc_4B71A9  +
xor ecx ecx +
test edi edi +
jz loc_4B7BE4  +
movzx eax byte ptr [edi] +
cmp al 6Dh +
jnz loc_4B7BF5  +
xor ecx ecx +
cmp al [edi+1] +
jz loc_4B7C21  +
cmp edx 33h +
jnz loc_4B602E  +
lea esi [esi+0] +
jmp loc_4B6022  +
cmp al 70h +
jnz loc_4B7BE4  +
lea esi [esi+0] +
jmp loc_4B7BDD  +
mov eax ebx +
call sub_4B21A0  +
mov ecx edi +
mov edx 4 +
mov [esp+2Ch+var_2C] eax +
mov eax ebx +
call sub_4AC500  +
mov edi eax +
jmp loc_4B72A0  +
mov eax [ebx+0Ch] +
mov cl 1 +
cmp byte ptr [eax] 5Fh +
jnz loc_4B7BE4  +
add eax 1 +
xor cl cl +
mov [ebx+0Ch] eax +
jmp loc_4B7BE4  +
***
push edi  +
push esi  +
push ebx  +
sub esp 16Ch +
mov eax [ebp+arg_8] +
mov ebx [ebp+arg_4] +
lea edx [ebp+var_2C] +
mov esi esp +
mov [ebp+var_5C] 0 +
mov [ebp+var_58] 0 +
mov [ebp+var_54] eax +
mov eax [ebp+arg_C] +
mov ecx ebx +
mov [ebp+var_4C] 0 +
mov [ebp+var_48] 0 +
mov [ebp+var_50] eax +
lea eax [ebp+var_20] +
mov [ebp+var_40] 0 +
mov [ebp+var_3C] 0 +
mov [ebp+var_44] 0 +
mov [ebp+var_38] 0 +
mov [ebp+var_34] 0 +
mov [ebp+var_30] 0 +
mov [ebp+var_2C] 0 +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
mov [ebp+var_20] 0 +
call sub_4AC700  +
mov eax [ebp+var_2C] +
mov edx [ebp+var_20] +
mov [ebp+var_1C] 0 +
imul edx eax +
lea eax ds:12h[eax*8] +
and eax 0FFFFFFF0h +
mov [ebp+var_20] edx +
call sub_4BB070  +
sub esp eax +
lea eax ds:12h[edx*8] +
lea ecx [esp+178h+var_16C] +
and eax 0FFFFFFF0h +
call sub_4BB070  +
mov edx [ebp+arg_0] +
sub esp eax +
lea eax [esp+178h+var_16C] +
mov [ebp+var_28] eax +
mov eax [ebp+var_38] +
lea edi [ebp+var_15C] +
mov [ebp+var_34] ecx +
mov ecx ebx +
mov [ebp+var_164] ebx +
mov [ebp+var_160] eax +
lea eax [ebp+var_164] +
mov [ebp+var_38] eax +
mov eax edi +
call sub_4ACF90  +
mov eax [ebp+var_160] +
mov [ebp+var_38] eax +
mov eax [ebp+var_5C] +
mov esp esi +
mov ecx [ebp+var_50] +
mov edx [ebp+var_54] +
mov byte ptr [ebp+eax+var_15C] 0 +
mov [esp+178h+var_174] eax +
mov [esp+178h+var_178] edi +
mov [esp+178h+var_170] ecx +
call edx  +
mov edx [ebp+var_44] +
xor eax eax +
test edx edx +
setz al  +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jmp sub_4B7D80  +
***
push edi  +
push esi  +
push ebx  +
mov ebx eax +
sub esp 6Ch +
cmp byte ptr [eax] 5Fh +
mov [ebp+var_5C] edx +
mov [ebp+var_60] ecx +
jz loc_4B7F60  +
mov edi offset a_global__0 +
mov ecx 8 +
mov esi ebx +
cmps   +
jz loc_4B7F14  +
mov eax [ebp+var_5C] +
and eax 10h +
jz loc_4B7F0C  +
xor esi esi +
mov [esp+78h+var_78] ebx +
mov edi esp +
call strlen  +
mov [ebp+var_54] ebx +
mov [ebp+var_48] ebx +
mov [ebp+var_40] 0 +
mov [ebp+var_34] 0 +
mov [ebp+var_2C] 0 +
mov edx eax +
lea eax [ebx+eax] +
mov [ebp+var_50] eax +
mov eax [ebp+var_5C] +
mov [ebp+var_30] edx +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
mov [ebp+var_4C] eax +
lea eax [edx+edx] +
mov [ebp+var_3C] eax +
lea eax [eax+edx*4] +
lea eax ds:12h[eax*4] +
and eax 0FFFFFFF0h +
mov [ebp+var_20] 0 +
mov [ebp+var_1C] 0 +
call sub_4BB070  +
sub esp eax +
lea eax ds:12h[edx*4] +
lea ecx [esp+78h+var_68] +
and eax 0FFFFFFF0h +
call sub_4BB070  +
sub esp eax +
cmp esi 1 +
lea eax [esp+78h+var_68] +
mov [ebp+var_44] ecx +
mov [ebp+var_38] eax +
jz loc_4B7EC0  +
jb loc_4B7F75  +
cmp esi 3 +
ja loc_4B7F75  +
cmp byte ptr [ebx+0Bh] 5Fh +
lea edx [ebx+0Bh] +
mov [ebp+var_48] edx +
jnz loc_4B7E71  +
cmp byte ptr [ebx+0Ch] 5Ah +
jz loc_4B7F90  +
mov [esp+78h+var_78] edx +
lea ebx [ebp+var_54] +
mov [ebp+var_64] edx +
call strlen  +
mov edx [ebp+var_64] +
mov ecx eax +
mov eax ebx +
call sub_4AC560  +
mov ecx eax +
xor edx edx +
cmp esi 2 +
setnz dl  +
mov eax ebx +
add edx 42h +
mov [esp+78h+var_78] 0 +
call sub_4AC500  +
mov esi [ebp+var_48] +
mov [esp+78h+var_78] esi +
mov ebx eax +
call strlen  +
add esi eax +
mov [ebp+var_48] esi +
jmp loc_4B7ED5  +
lea eax [ebp+var_54] +
mov [esp+78h+var_74] 1 +
mov [esp+78h+var_78] eax +
call sub_4B3280  +
mov ebx eax +
test byte ptr [ebp+var_5C] 1 +
jz loc_4B7EE5  +
mov edx [ebp+var_48] +
xor eax eax +
cmp byte ptr [edx] 0 +
jnz loc_4B7F0A  +
test ebx ebx +
jz loc_4B7F87  +
mov eax [ebp+arg_0] +
mov [esp+78h+var_6C] eax +
mov eax [ebp+var_60] +
mov [esp+78h+var_74] ebx +
mov [esp+78h+var_70] eax +
mov eax [ebp+var_5C] +
mov [esp+78h+var_78] eax +
call sub_4B7C40  +
mov esp edi +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx+8] +
cmp al 2Eh +
jz loc_4B7F20  +
cmp al 5Fh +
jnz loc_4B7F50  +
movzx eax byte ptr [ebx+9] +
cmp al 49h +
setz dl  +
jz loc_4B7F33  +
cmp al 44h +
jnz loc_4B7DAE  +
cmp byte ptr [ebx+0Ah] 5Fh +
jnz loc_4B7DAE  +
mov esi edx +
shl esi 1Fh +
sar esi 1Fh +
add esi 3 +
jmp loc_4B7DBC  +
cmp al 24h +
jnz loc_4B7DAE  +
jmp loc_4B7F20  +
cmp byte ptr [eax+1] 5Ah +
jnz loc_4B7D9A  +
mov esi 1 +
nop   +
jmp loc_4B7DBC  +
lea eax [ebp+var_54] +
mov [esp+78h+var_78] eax +
call sub_4B0800  +
mov ebx eax +
jmp loc_4B7ED5  +
xor eax eax +
mov esp edi +
jmp loc_4B7F0C  +
add ebx 0Dh +
xor edx edx +
mov [ebp+var_48] ebx +
lea ebx [ebp+var_54] +
mov eax ebx +
call sub_4B2CE0  +
mov ecx eax +
jmp loc_4B7E8D  +
***
sub esp 28h +
lea ecx [esp+28h+var_18] +
mov [esp+28h+var_28] ecx +
mov ecx offset sub_4ACD90 +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_14] 0 +
mov [esp+28h+var_10] 0 +
mov [esp+28h+var_C] 0 +
call sub_4B7D80  +
test eax eax +
jz loc_4B8006  +
mov edx [esp+28h+var_C] +
mov eax 1 +
test edx edx +
cmovz eax [esp+28h+var_10] +
mov [ebx] eax +
mov eax [esp+28h+var_18] +
add esp 28h +
pop ebx  +
retn   +
mov eax [esp+28h+var_18] +
mov [esp+28h+var_28] eax +
call free  +
xor eax eax +
mov dword ptr [ebx] 0 +
jmp loc_4B8001  +
***
push ebx  +
sub esp 28h +
mov eax [esp+38h] +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+18h] 0 +
test eax eax +
mov dword ptr [esp+1Ch] 0 +
jnz loc_4B8093  +
lea eax [esp+10h] +
mov [esp+0Ch] eax +
mov eax [esp+34h] +
mov dword ptr [esp+8] offset sub_4ACD90 +
mov [esp+4] eax +
mov eax [esp+30h] +
mov [esp] eax +
call sub_4B7C40  +
test eax eax +
jz loc_4B80C4  +
mov edx [esp+1Ch] +
mov eax 1 +
test edx edx +
mov edx [esp+3Ch] +
cmovz eax [esp+18h] +
mov [edx] eax +
mov eax [esp+10h] +
add esp 28h +
pop ebx  +
retn   +
***
cmp eax 2 +
mov ebx 2 +
jbe loc_4B80A6  +
lea esi [esi+0] +
add ebx ebx +
cmp eax ebx +
ja loc_4B80A0  +
mov [esp+4] ebx +
mov dword ptr [esp] 0 +
call realloc  +
test eax eax +
jz loc_4B80DE  +
mov [esp+10h] eax +
mov [esp+18h] ebx +
jmp loc_4B804C  +
***
mov eax [esp+10h] +
mov [esp] eax +
call free  +
mov eax [esp+3Ch] +
mov dword ptr [eax] 0 +
xor eax eax +
jmp loc_4B808E  +
***
mov eax [esp+10h] +
mov [esp] eax +
call free  +
mov dword ptr [esp+10h] 0 +
mov dword ptr [esp+14h] 0 +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+1Ch] 1 +
jmp loc_4B804C  +
***
push ebx  +
mov ecx [esp+8] +
mov edx [esp+10h] +
mov eax [esp+14h] +
lea ebx [ecx+edx] +
mov [eax+4] ebx +
mov ebx [esp+0Ch] +
mov [eax] ecx +
mov [eax+0Ch] ecx +
lea ecx [edx+edx] +
mov [eax+18h] ecx +
mov [eax+8] ebx +
mov dword ptr [eax+14h] 0 +
mov [eax+24h] edx +
mov dword ptr [eax+20h] 0 +
mov dword ptr [eax+28h] 0 +
mov dword ptr [eax+2Ch] 0 +
mov dword ptr [eax+30h] 0 +
mov dword ptr [eax+34h] 0 +
mov dword ptr [eax+38h] 0 +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov edx [esp+1Ch+arg_4] +
lea ecx [esp+1Ch+var_10] +
mov eax [esp+1Ch+arg_0] +
call sub_4B7FB0  +
add esp 1Ch +
retn   +
***
mov edx [esp+10h] +
mov eax [esp+4] +
mov ecx [esp+0Ch] +
mov [esp+4] edx +
mov edx [esp+8] +
jmp sub_4B7D80  +
***
sub esp 1Ch +
mov edx 25h +
mov eax [esp+1Ch+arg_0] +
lea ecx [esp+1Ch+var_10] +
call sub_4B7FB0  +
add esp 1Ch +
retn   +
***
mov edx [esp+0Ch] +
mov eax [esp+4] +
mov ecx [esp+8] +
mov [esp+4] edx +
mov edx 25h +
jmp sub_4B7D80  +
***
sub esp 1Ch +
mov eax [esp+20h] +
lea edx [esp+8] +
lea ecx [esp+0Ch] +
call sub_4B34B0  +
xor edx edx +
test eax eax +
cmovnz edx [esp+8] +
add esp 1Ch +
mov eax edx +
retn   +
***
sub esp 1Ch +
mov eax [esp+20h] +
lea edx [esp+8] +
lea ecx [esp+0Ch] +
call sub_4B34B0  +
xor edx edx +
test eax eax +
cmovnz edx [esp+0Ch] +
add esp 1Ch +
mov eax edx +
retn   +
***
push ebx  +
mov ebx eax +
sub esp 10h +
mov ecx [eax] +
test ecx ecx +
jz loc_4B8290  +
mov esi [eax+4] +
mov eax [eax+8] +
sub eax esi +
cmp edx eax +
jle loc_4B8289  +
sub esi ecx +
add edx esi +
lea edi [edx+edx] +
mov [esp+10h+var_C] edi +
mov [esp+10h+var_10] ecx +
call sub_4A0670  +
add esi eax +
mov [ebx] eax +
add eax edi +
mov [ebx+4] esi +
mov [ebx+8] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
cmp edx 20h +
mov esi 20h +
cmovge esi edx +
mov [esp+10h+var_10] esi +
call sub_4A05F0  +
add esi eax +
mov [ebx+8] esi +
mov [ebx] eax +
mov [ebx+4] eax +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
push esi  +
push ebx  +
mov ebx eax +
sub esp 10h +
mov [esp+18h+var_18] edx +
call strlen  +
mov esi eax +
mov edx eax +
mov eax ebx +
call sub_4B8250  +
mov eax [ebx+4] +
mov [esp+18h+var_10] esi +
mov [esp+18h+var_14] edi +
mov [esp+18h+var_18] eax +
call memcpy  +
add [ebx+4] esi +
add esp 10h +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
test edx edx +
jz loc_4B8380  +
movzx ecx byte ptr [edx] +
test cl cl +
jz loc_4B8380  +
sub ecx 46h +
cmp cl 11h +
ja loc_4B8380  +
movzx ecx cl +
jmp ds:off_50CEBC[ecx*4]  +
lea ebx [edx+1] +
mov edx offset aExternWindows +
call sub_4B82C0  +
add esp 8 +
mov eax ebx +
pop ebx  +
retn   +
add esp 8 +
lea eax [edx+1] +
pop ebx  +
retn   +
lea ebx [edx+1] +
mov edx offset aExternC +
call sub_4B82C0  +
add esp 8 +
mov eax ebx +
pop ebx  +
retn   +
lea ebx [edx+1] +
mov edx offset aExternC_0 +
call sub_4B82C0  +
add esp 8 +
mov eax ebx +
pop ebx  +
retn   +
lea ebx [edx+1] +
mov edx offset aExternPascal +
call sub_4B82C0  +
add esp 8 +
mov eax ebx +
pop ebx  +
retn   +
add esp 8 +
xor eax eax +
pop ebx  +
retn   +
***
test edx edx +
jz loc_4B845E  +
push esi  +
mov esi eax +
push ebx  +
sub esp 4 +
movzx eax byte ptr [edx] +
test al al +
jz loc_4B83D0  +
lea ebx [edx+2] +
mov edx eax +
cmp dl 4Eh +
lea eax [ebx-2] +
jnz loc_4B83D2  +
movzx ecx byte ptr [ebx-1] +
lea edx [ecx-61h] +
cmp dl 0Ah +
ja loc_4B83D0  +
movzx edx dl +
jmp ds:off_50CF44[edx*4]  +
xor eax eax +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
mov edx offset a@nogc +
mov eax esi +
call sub_4B82C0  +
movzx edx byte ptr [ebx] +
add ebx 2 +
jmp loc_4B83AB  +
mov edx offset a@safe +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B83E4  +
mov edx offset a@trusted +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B83E4  +
mov edx offset a@property +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B83E4  +
mov edx offset aRef +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B83E4  +
mov edx offset aNothrow +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B83E4  +
mov edx offset aPure +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B83E4  +
mov edx offset aReturn +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B83E4  +
xor eax eax +
retn   +
***
jmp sub_4B8470  +
***
push edi  +
mov edi edx +
push esi  +
push ebx  +
sub esp 1Ch +
mov [esp+28h+var_28] edx +
call strlen  +
test eax eax +
mov esi eax +
jnz loc_4B8491  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx eax +
mov eax ebp +
call sub_4B8250  +
mov eax [ebp+4] +
mov ebx [ebp+0] +
lea ecx [eax-1] +
cmp ecx ebx +
jb loc_4B84B8  +
movzx eax byte ptr [ecx] +
sub ecx 1 +
mov [ecx+esi+1] al +
mov ebx [ebp+0] +
cmp ecx ebx +
jnb loc_4B84A7  +
mov [esp+28h+var_20] esi +
mov [esp+28h+var_24] edi +
mov [esp+28h+var_28] ebx +
call memcpy  +
add [ebp+4] esi +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
mov edi ecx +
push esi  +
mov esi eax +
push ebx  +
sub esp 2Ch +
cmp cl 61h +
setz al  +
mov ebp eax +
mov eax ecx +
and eax 0FFFFFFFDh +
cmp al 75h +
jz loc_4B8580  +
mov eax ebp +
test al al +
jnz loc_4B8580  +
cmp cl 62h +
jz loc_4B8700  +
movzx eax byte ptr [edx] +
xor ecx ecx +
mov ebx edx +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4B856B  +
lea esi [esi+0] +
add ebx 1 +
movzx eax byte ptr [ebx] +
add ecx 1 +
test byte ptr ds:word_509C60[eax+eax] 4 +
jnz loc_4B8550  +
test ecx ecx +
jnz loc_4B8748  +
lea eax [edi-68h] +
cmp al 0Ch +
ja loc_4B8741  +
movzx eax al +
jmp ds:off_50CF90[eax*4]  +
lea eax [esp+10h] +
mov dword ptr [esp+8] 0Ah +
mov [esp+4] eax +
mov [esp+0] edx +
call strtol  +
mov ecx [esp+10h] +
test ecx ecx +
mov ebx eax +
jz loc_4B8770  +
test eax eax +
js loc_4B8770  +
mov eax esi +
mov edx offset asc_50CF7B +
call sub_4B82C0  +
lea eax [ebx-20h] +
cmp eax 5Eh +
ja loc_4B85F8  +
mov eax ebp +
test al al +
jz loc_4B85F8  +
mov ecx 1 +
mov eax esi +
lea edx [esp+14h] +
mov [esp+14h] bl +
call sub_4B84E0  +
lea esi [esi+0] +
mov eax esi +
mov edx offset asc_50CF7B +
call sub_4B82C0  +
mov eax [esp+10h] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax edi +
cmp al 75h +
jz loc_4B8755  +
cmp al 77h +
jz loc_4B86E6  +
xor ecx ecx +
cmp al 61h +
jnz loc_4B8621  +
mov edx offset asc_50CF7D +
mov eax esi +
call sub_4B82C0  +
mov ecx 2 +
test ebx ebx +
jz loc_4B8777  +
mov edx 9 +
jmp loc_4B8644  +
add eax 30h +
sub ecx 1 +
sar ebx 4 +
mov [esp+edx+14h] al +
sub edx 1 +
test ebx ebx +
jz loc_4B8664  +
mov eax ebx +
mov edi edx +
and eax 0Fh +
cmp eax 9 +
jle loc_4B8630  +
add eax 57h +
sub ecx 1 +
sar ebx 4 +
mov [esp+edx+14h] al +
sub edx 1 +
test ebx ebx +
jnz loc_4B8644  +
test ecx ecx +
jle loc_4B867E  +
mov eax edi +
mov edx ecx +
sub eax ecx +
lea eax [esp+eax+14h] +
mov byte ptr [eax+edx-1] 30h +
sub edx 1 +
jnz loc_4B8672  +
sub edi ecx +
mov ecx 0Ah +
sub ecx edi +
jz loc_4B85E0  +
lea edx [esp+edi+14h] +
mov eax esi +
call sub_4B84E0  +
jmp loc_4B85E0  +
mov eax esi +
mov edx offset unk_50CF8A +
call sub_4B82C0  +
mov eax ebx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
mov edx (offset off_50CF86+2) +
call sub_4B82C0  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
mov edx offset off_50CF86 +
call sub_4B82C0  +
add esp 2Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx offset aU_1 +
mov eax esi +
call sub_4B82C0  +
mov ecx 8 +
jmp loc_4B8621  +
lea eax [esp+14h] +
mov [esp+0] edx +
mov dword ptr [esp+8] 0Ah +
mov [esp+4] eax +
call strtol  +
mov edx [esp+14h] +
test edx edx +
jz loc_4B8770  +
test eax eax +
js loc_4B8770  +
mov eax offset aFalse_1 +
mov edx offset aTrue_1 +
cmovz edx eax +
mov eax esi +
call sub_4B82C0  +
mov eax [esp+14h] +
jmp loc_4B86AE  +
mov eax ebx +
jmp loc_4B86AE  +
mov eax esi +
call sub_4B84E0  +
nop   +
jmp loc_4B856B  +
mov edx offset aU_0 +
mov eax esi +
call sub_4B82C0  +
mov ecx 4 +
jmp loc_4B8621  +
xor eax eax +
jmp loc_4B86AE  +
mov edi 0Ah +
jmp loc_4B8664  +
***
jmp sub_4B8790  +
***
push esi  +
mov edi offset off_50CFC4 +
push ebx  +
mov esi edx +
sub esp 40h +
mov ebx edx +
cmps   +
jz loc_4B88D7  +
mov edi offset off_50CFCC +
mov ecx 3 +
mov esi edx +
cmps   +
jz loc_4B8916  +
mov edi offset aNinf +
mov ecx 4 +
mov esi edx +
cmps   +
jz loc_4B892C  +
movzx ecx byte ptr [edx] +
xor edx edx +
cmp cl 4Eh +
jz loc_4B88ED  +
movzx esi cl +
test byte ptr ds:(word_509C60+1)[esi+esi] 1 +
jz loc_4B890B  +
mov [esp+edx+48h+var_46] cl +
lea ecx [edx+4] +
mov [esp+edx+48h+var_48] 30h +
lea esi [ebx+1] +
mov [esp+edx+48h+var_47] 78h +
mov [esp+edx+48h+var_45] 2Eh +
movzx edx byte ptr [ebx+1] +
movzx ebx dl +
test byte ptr ds:(word_509C60+1)[ebx+ebx] 1 +
jz loc_4B8839  +
lea edi [esp-1] +
add ecx 1 +
add esi 1 +
mov [edi+ecx] dl +
movzx edx byte ptr [esi] +
movzx ebx dl +
test byte ptr ds:(word_509C60+1)[ebx+ebx] 1 +
jnz loc_4B8820  +
cmp dl 50h +
jnz loc_4B890B  +
movzx edi byte ptr [esi+1] +
lea edx [ecx+1] +
mov [esp+ecx+48h+var_48] 70h +
mov ebx edi +
cmp bl 4Eh +
jz loc_4B8942  +
lea ebx [esi+1] +
mov esi edi +
mov ecx esi +
movzx ecx cl +
test byte ptr ds:word_509C60[ecx+ecx] 4 +
jz loc_4B888B  +
mov ecx esi +
lea edi [esp-1] +
add edx 1 +
add ebx 1 +
mov [edi+edx] cl +
movzx ecx byte ptr [ebx] +
movzx esi cl +
test byte ptr ds:word_509C60[esi+esi] 4 +
jnz loc_4B8872  +
mov [esp+edx+48h+var_48] 0 +
mov esi esp +
mov ecx esp +
mov edi [ecx] +
add ecx 4 +
lea edx [edi-1010101h] +
not edi  +
and edx edi +
and edx 80808080h +
jz loc_4B8893  +
mov edi edx +
shr edi 10h +
test edx 8080h +
cmovz edx edi +
lea edi [ecx+2] +
cmovz ecx edi +
add dl dl +
sbb ecx 3 +
sub ecx esi +
jz loc_4B88E4  +
mov edx esi +
call sub_4B84E0  +
add esp 40h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx offset off_50CFC8 +
add ebx 3 +
call sub_4B82C0  +
add esp 40h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
movzx ecx byte ptr [ebx+1] +
add ebx 1 +
mov dl 1 +
mov [esp+48h+var_48] 2Dh +
movzx esi cl +
test byte ptr ds:(word_509C60+1)[esi+esi] 1 +
jnz loc_4B87F3  +
add esp 40h +
xor ebx ebx +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx offset unk_50CFD0 +
add ebx 3 +
call sub_4B82C0  +
add esp 40h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov edx offset aInf +
add ebx 4 +
call sub_4B82C0  +
add esp 40h +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
mov [esp+edx+48h+var_48] 2Dh +
lea ebx [esi+2] +
movzx esi byte ptr [esi+2] +
lea edx [ecx+2] +
jmp loc_4B885D  +
***
push esi  +
push ebx  +
sub esp 2Ch +
test edx edx +
mov esi [esp+2Ch+arg_0] +
jz loc_4B89C7  +
mov ebx eax +
movzx eax byte ptr [edx] +
test al al +
jz loc_4B89C7  +
lea edi [eax-30h] +
mov ebp ecx +
mov ecx edi +
cmp cl 47h +
ja loc_4B89C7  +
movzx edi cl +
jmp ds:off_50D00C[edi*4]  +
add edx 1 +
mov byte ptr [esp+2Ch+var_12] al +
lea eax [esp+2Ch+var_12+2] +
mov [esp+2Ch+var_24] 0Ah +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edx +
call strtol  +
mov ebp [esp+2Ch+var_12+2] +
test ebp ebp +
mov edi eax +
jz loc_4B89C7  +
test eax eax +
js loc_4B89C7  +
cmp byte ptr [ebp+0] 5Fh +
jz loc_4B8BA5  +
xor esi esi +
add esp 2Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [edx+1] +
lea ecx [edx+1] +
sub eax 30h +
cmp al 9 +
ja loc_4B89C7  +
mov edx ecx +
mov eax esi +
movsx ecx al +
mov eax ebx +
call sub_4B8510  +
add esp 2Ch +
pop ebx  +
mov esi eax +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
add edx 1 +
cmp al 48h +
lea eax [esp+2Ch+var_12+2] +
mov [esp+2Ch+var_24] 0Ah +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edx +
jz loc_4B8D63  +
call strtol  +
mov esi [esp+2Ch+var_12+2] +
test esi esi +
mov edi eax +
jz loc_4B89C7  +
test eax eax +
js loc_4B89C7  +
mov edx offset asc_50CFFC +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8A65  +
xor ecx ecx +
mov edx esi +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4B8960  +
test edi edi +
mov esi eax +
jz loc_4B8A65  +
mov edx offset asc_50D000 +
mov eax ebx +
call sub_4B82C0  +
sub edi 1 +
cmp edi 0FFFFFFFFh +
jnz loc_4B8A41  +
mov edx offset asc_50D003 +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B89C9  +
lea edi [edx+1] +
mov eax ebx +
mov edx offset asc_50CFE3 +
call sub_4B82C0  +
mov eax esi +
mov edx edi +
movsx ecx al +
mov eax ebx +
call sub_4B8510  +
mov esi eax +
jmp loc_4B89C9  +
add edx 1 +
lea eax [esp+2Ch+var_12+2] +
mov [esp+2Ch+var_24] 0Ah +
mov [esp+2Ch+var_28] eax +
mov [esp+2Ch+var_2C] edx +
mov [esp+2Ch+var_20] ebp +
call strtol  +
mov esi [esp+2Ch+var_12+2] +
test esi esi +
mov edi eax +
jz loc_4B89C7  +
test eax eax +
js loc_4B89C7  +
mov ebp [esp+2Ch+var_20] +
test ebp ebp +
jz loc_4B8AEA  +
mov edx ebp +
mov eax ebx +
call sub_4B82C0  +
mov edx offset asc_50D005 +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8B1C  +
xor ecx ecx +
mov edx esi +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4B8960  +
test edi edi +
mov esi eax +
jz loc_4B8B1C  +
mov edx offset asc_50D000 +
mov eax ebx +
call sub_4B82C0  +
sub edi 1 +
cmp edi 0FFFFFFFFh +
jnz loc_4B8AF8  +
mov edx offset asc_50D007 +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B89C9  +
add edx 1 +
mov eax ebx +
call sub_4B8790  +
mov edx offset asc_50CFE5 +
mov esi eax +
mov eax ebx +
call sub_4B82C0  +
test esi esi +
jz loc_4B89C7  +
cmp byte ptr [esi] 63h +
jnz loc_4B89C7  +
lea edx [esi+1] +
mov eax ebx +
call sub_4B8790  +
mov edx offset aI_0 +
mov esi eax +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B89C9  +
add edx 1 +
mov eax ebx +
call sub_4B8790  +
mov esi eax +
jmp loc_4B89C9  +
lea esi [edx+1] +
mov eax ebx +
mov edx offset aNull +
call sub_4B82C0  +
jmp loc_4B89C9  +
mov edx offset asc_50CFE9 +
mov eax ebx +
call sub_4B82C0  +
test edi edi +
lea esi [ebp+1] +
jz loc_4B8DE1  +
movzx edx byte ptr [ebp+1] +
movzx eax dl +
test byte ptr ds:(word_509C60+1)[eax+eax] 1 +
jz loc_4B89C7  +
movzx ecx byte ptr [ebp+2] +
movzx eax cl +
test byte ptr ds:(word_509C60+1)[eax+eax] 1 +
jz loc_4B89C7  +
mov eax edx +
lea edx [eax-61h] +
lea ebp [edi-1] +
xor edi edi +
cmp dl 5 +
ja loc_4B8C71  +
sub eax 57h +
shl eax 4 +
lea edx [ecx-61h] +
cmp dl 5 +
ja loc_4B8C8F  +
sub ecx 57h +
or eax ecx +
lea edx [eax-9] +
cmp dl 17h +
mov byte ptr [esp+2Ch+var_12+1] al +
ja loc_4B8CF4  +
movzx edx dl +
jmp ds:off_50D12C[edx*4]  +
mov edx offset asc_50CFEB +
mov eax ebx +
call sub_4B82C0  +
add esi 2 +
cmp edi ebp +
jz loc_4B8DE1  +
movzx eax byte ptr [esi] +
movzx edx al +
test byte ptr ds:(word_509C60+1)[edx+edx] 1 +
jz loc_4B89C7  +
movzx ecx byte ptr [esi+1] +
add edi 1 +
movzx edx cl +
test byte ptr ds:(word_509C60+1)[edx+edx] 1 +
jz loc_4B89C7  +
lea edx [eax-61h] +
cmp dl 5 +
jbe loc_4B8BF5  +
lea edx [eax-41h] +
cmp dl 5 +
ja loc_4B8D26  +
sub eax 37h +
lea edx [ecx-61h] +
shl eax 4 +
cmp dl 5 +
jbe loc_4B8C07  +
lea edx [ecx-41h] +
cmp dl 5 +
ja loc_4B8D16  +
sub ecx 37h +
jmp loc_4B8C0A  +
mov edx offset aR_3 +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8C32  +
mov edx offset aF_2 +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8C32  +
mov edx offset aV_0 +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8C32  +
mov edx offset aN +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8C32  +
mov edx offset aT_3 +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8C32  +
movzx eax al +
test byte ptr ds:word_509C60[eax+eax] 10h +
jz loc_4B8D44  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+2Ch+var_12+1] +
call sub_4B84E0  +
jmp loc_4B8C32  +
lea edx [ecx-30h] +
xor ecx ecx +
cmp dl 9 +
cmovbe ecx edx +
jmp loc_4B8C0A  +
lea edx [eax-30h] +
mov eax edx +
shl eax 4 +
mov byte ptr [esp+2Ch+var_20] al +
xor eax eax +
cmp dl 9 +
movzx edx byte ptr [esp+2Ch+var_20] +
cmovbe eax edx +
jmp loc_4B8BFB  +
mov eax ebx +
mov edx offset asc_50CF7D +
call sub_4B82C0  +
mov ecx 2 +
mov edx esi +
mov eax ebx +
call sub_4B84E0  +
jmp loc_4B8C32  +
call strtol  +
mov esi [esp+2Ch+var_12+2] +
test esi esi +
mov edi eax +
jz loc_4B89C7  +
test eax eax +
js loc_4B89C7  +
mov edx offset asc_50CFFC +
mov eax ebx +
call sub_4B82C0  +
jmp loc_4B8DD4  +
xor ecx ecx +
mov edx esi +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4B8960  +
mov edx (offset asc_50CFFC+2) +
mov esi eax +
mov eax ebx +
call sub_4B82C0  +
xor ecx ecx +
mov edx esi +
mov [esp+2Ch+var_2C] 0 +
mov eax ebx +
call sub_4B8960  +
test edi edi +
mov esi eax +
jz loc_4B8DD4  +
mov edx offset asc_50D000 +
mov eax ebx +
call sub_4B82C0  +
sub edi 1 +
cmp edi 0FFFFFFFFh +
jnz loc_4B8D90  +
jmp loc_4B8A6D  +
mov edx offset asc_50CFE9 +
mov eax ebx +
call sub_4B82C0  +
cmp byte ptr [esp+2Ch+var_12] 61h +
jz loc_4B89C9  +
mov ecx 1 +
mov eax ebx +
lea edx [esp+2Ch+var_12] +
call sub_4B84E0  +
jmp loc_4B89C9  +
***
mov ebx edx +
sub esp 4 +
test edx edx +
jz loc_4B8E86  +
movzx ecx byte ptr [edx] +
mov esi eax +
test cl cl +
jz loc_4B8E86  +
cmp cl 4Fh +
jz loc_4B8E90  +
jle loc_4B8E65  +
cmp cl 78h +
nop   +
jz loc_4B8E50  +
cmp cl 79h +
jnz loc_4B8EA7  +
mov eax esi +
mov edx offset aImmutable_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
mov eax esi +
mov edx offset aConst_2 +
call sub_4B82C0  +
add esp 4 +
lea eax [ebx+1] +
pop ebx  +
pop esi  +
retn   +
cmp cl 4Eh +
jnz loc_4B8EA7  +
cmp byte ptr [ebx+1] 67h +
jnz loc_4B8E86  +
mov edx offset aInout +
mov eax esi +
add ebx 2 +
call sub_4B82C0  +
movzx ecx byte ptr [ebx] +
test cl cl +
jnz loc_4B8E24  +
xor eax eax +
jmp loc_4B8E46  +
add ebx 1 +
mov edx offset aShared_0 +
mov eax esi +
call sub_4B82C0  +
test ebx ebx +
jnz loc_4B8E7F  +
xor eax eax +
jmp loc_4B8E46  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop esi  +
retn   +
***
push esi  +
push ebx  +
mov ebx edx +
sub esp 2Ch +
test edx edx +
jz loc_4B8ED8  +
movzx edx byte ptr [edx] +
test dl dl +
jz loc_4B8ED8  +
sub edx 41h +
cmp dl 39h +
ja loc_4B8ED8  +
movzx edx dl +
mov esi eax +
jmp ds:off_50D28C[edx*4]  +
xor eax eax +
lea esi [esi+0] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
movzx eax byte ptr [ebx+1] +
cmp al 69h +
jz loc_4B937C  +
cmp al 6Bh +
jnz loc_4B8ED8  +
mov eax esi +
mov edx offset aUcent +
call sub_4B82C0  +
lea eax [ebx+2] +
jmp loc_4B8EE0  +
add ebx 1 +
mov edx offset aImmutable +
mov eax esi +
call sub_4B82C0  +
mov edx ebx +
mov eax esi +
call sub_4B8EB0  +
mov edx offset asc_50D007 +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
mov eax ebx +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add ebx 1 +
mov edx offset aConst_1 +
jmp loc_4B8F18  +
mov edx offset aDchar +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aVoid_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aWchar +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aUshort +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aShort_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aCdouble +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aCfloat +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aIdouble +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aIfloat +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aNone +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aUlong +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aLong_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aUint +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aIreal +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aInt_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aUbyte +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aByte +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aFloat_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aReal +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aDouble_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aCreal +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aBool_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
mov edx offset aChar_0 +
call sub_4B82C0  +
lea eax [ebx+1] +
jmp loc_4B8EE0  +
lea edx [ebx+1] +
call sub_4B8EB0  +
mov edx offset asc_50D1DB +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
mov eax ebx +
jmp loc_4B8EE0  +
add ebx 1 +
mov edx offset aShared +
jmp loc_4B8F18  +
movzx edx byte ptr [ebx+1] +
cmp dl 67h +
jz loc_4B93CC  +
xor eax eax +
cmp dl 68h +
jnz loc_4B8EE0  +
add ebx 2 +
mov edx offset a__vector_0 +
jmp loc_4B8F18  +
lea edx [ebx+1] +
lea eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_10] 0 +
mov [esp+2Ch+var_14] 0 +
mov [esp+2Ch+var_18] 0 +
call sub_4B8EB0  +
mov ebx [esp+2Ch+var_18] +
mov ecx [esp+2Ch+var_14] +
cmp ebx ecx +
jz loc_4B93B0  +
sub ecx ebx +
mov edx eax +
mov eax esi +
mov edi ecx +
call sub_4B8EB0  +
mov edx offset asc_50CFFC +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
test edi edi +
mov edx [esp+2Ch+var_18] +
jz loc_4B91B5  +
mov ecx edi +
mov eax esi +
call sub_4B84E0  +
mov edx offset asc_50D003 +
mov eax esi +
call sub_4B82C0  +
mov edx [esp+2Ch+var_18] +
test edx edx +
jz loc_4B8F36  +
mov [esp+2Ch+var_2C] edx +
call free  +
mov eax ebx +
jmp loc_4B8F38  +
lea edx [ebx+1] +
lea eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_10] 0 +
mov [esp+2Ch+var_14] 0 +
mov [esp+2Ch+var_18] 0 +
call sub_4B8E10  +
mov ebx [esp+2Ch+var_18] +
mov ecx [esp+2Ch+var_14] +
cmp ebx ecx +
jz loc_4B9390  +
sub ecx ebx +
mov edx eax +
mov eax esi +
mov edi ecx +
call sub_4B9550  +
mov edx offset aDelegate +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
test edi edi +
mov edx [esp+2Ch+var_18] +
jz loc_4B9244  +
mov ecx edi +
mov eax esi +
call sub_4B84E0  +
mov edx [esp+2Ch+var_18] +
test edx edx +
jnz loc_4B91CD  +
mov eax ebx +
jmp loc_4B8F38  +
lea edx [ebx+1] +
mov ecx 2 +
call sub_4B9BA0  +
jmp loc_4B8EE0  +
add ebx 1 +
lea eax [esp+2Ch+var_18] +
mov [esp+2Ch+var_2C] ebx +
mov [esp+2Ch+var_24] 0Ah +
mov [esp+2Ch+var_28] eax +
call strtol  +
mov edi [esp+2Ch+var_18] +
test edi edi +
mov ebx eax +
jz loc_4B8ED8  +
test eax eax +
js loc_4B8ED8  +
mov edx offset aTuple +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B92BC  +
mov edx edi +
mov eax esi +
call sub_4B8EB0  +
test ebx ebx +
mov edi eax +
jz loc_4B92BC  +
mov edx offset asc_50D000 +
mov eax esi +
call sub_4B82C0  +
sub ebx 1 +
cmp ebx 0FFFFFFFFh +
jnz loc_4B92A1  +
mov eax esi +
mov edx offset asc_50D007 +
call sub_4B82C0  +
mov eax edi +
jmp loc_4B8EE0  +
lea edx [ebx+1] +
call sub_4B8EB0  +
mov edx offset asc_50D1D8 +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
mov eax ebx +
jmp loc_4B8EE0  +
movzx eax byte ptr [ebx+1] +
lea edi [ebx+1] +
mov edx edi +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4B93D9  +
nop   +
lea esi [esi+0] +
mov ebp edx +
add edx 1 +
movzx eax byte ptr [edx] +
sub ebp ebx +
test byte ptr ds:word_509C60[eax+eax] 4 +
jnz loc_4B9310  +
mov eax esi +
call sub_4B8EB0  +
mov edx offset asc_50CFFC +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
test ebp ebp +
jz loc_4B9348  +
mov ecx ebp +
mov edx edi +
mov eax esi +
call sub_4B84E0  +
mov eax esi +
mov edx offset asc_50D003 +
call sub_4B82C0  +
mov eax ebx +
jmp loc_4B8EE0  +
mov edx ebx +
call sub_4B9550  +
mov edx offset aFunction +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
mov eax ebx +
jmp loc_4B8EE0  +
mov eax esi +
mov edx offset aCent +
call sub_4B82C0  +
lea eax [ebx+2] +
jmp loc_4B8EE0  +
mov edx eax +
mov eax esi +
call sub_4B9550  +
mov edx offset aDelegate +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
mov edx [esp+2Ch+var_18] +
jmp loc_4B9244  +
mov edx eax +
mov eax esi +
call sub_4B8EB0  +
mov edx offset asc_50CFFC +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B91B5  +
add ebx 2 +
mov edx offset aInout_0 +
jmp loc_4B8F18  +
mov eax esi +
call sub_4B8EB0  +
mov edx offset asc_50CFFC +
mov ebx eax +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B9348  +
***
push esi  +
push ebx  +
mov ebx edx +
sub esp 0Ch +
test edx edx +
jz loc_4B9540  +
movzx edx byte ptr [edx] +
test dl dl +
jz loc_4B94DC  +
mov esi eax +
xor edi edi +
cmp dl 59h +
jz loc_4B9492  +
cmp dl 5Ah +
jz loc_4B9487  +
cmp dl 58h +
jz loc_4B9470  +
test edi edi +
jnz loc_4B94E0  +
movzx eax byte ptr [ebx] +
cmp al 4Dh +
jz loc_4B9522  +
cmp al 4Eh +
jz loc_4B94F1  +
cmp al 4Bh +
jz loc_4B94B0  +
cmp al 4Ch +
jz loc_4B9511  +
cmp al 4Ah +
jnz loc_4B94BF  +
mov edx offset aOut +
mov eax esi +
add ebx 1 +
call sub_4B82C0  +
jmp loc_4B94BF  +
mov eax esi +
mov edx offset unk_50D374 +
call sub_4B82C0  +
lea eax [ebx+1] +
add esp 0Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
add esp 0Ch +
lea eax [ebx+1] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
mov edx offset a____1 +
call sub_4B82C0  +
add esp 0Ch +
lea eax [ebx+1] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov edx offset aRef +
mov eax esi +
add ebx 1 +
call sub_4B82C0  +
mov edx ebx +
mov eax esi +
call sub_4B8EB0  +
test eax eax +
mov ebx eax +
jz loc_4B9540  +
movzx edx byte ptr [eax] +
add edi 1 +
test dl dl +
jnz loc_4B9420  +
mov eax ebx +
jmp loc_4B947F  +
mov edx offset asc_50D000 +
mov eax esi +
call sub_4B82C0  +
jmp loc_4B9437  +
cmp byte ptr [ebx+1] 6Bh +
jnz loc_4B94BF  +
mov eax esi +
mov edx offset aReturn +
lea ebp [ebx+2] +
call sub_4B82C0  +
movzx eax byte ptr [ebx+2] +
mov ebx ebp +
jmp loc_4B944A  +
mov edx offset aLazy +
mov eax esi +
add ebx 1 +
call sub_4B82C0  +
jmp loc_4B94BF  +
mov eax esi +
mov edx offset aScope +
lea ebp [ebx+1] +
call sub_4B82C0  +
movzx eax byte ptr [ebx+1] +
mov ebx ebp +
jmp loc_4B9442  +
xor eax eax +
jmp loc_4B947F  +
***
push esi  +
push ebx  +
xor ebx ebx +
sub esp 4Ch +
test edx edx +
jz loc_4B969C  +
cmp byte ptr [edx] 0 +
jz loc_4B969C  +
mov esi eax +
mov [esp+4Ch+var_28] 0 +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_30] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_24] 0 +
mov [esp+4Ch+var_10] 0 +
mov [esp+4Ch+var_14] 0 +
mov [esp+4Ch+var_18] 0 +
call sub_4B8300  +
mov edx eax +
lea eax [esp+4Ch+var_30] +
call sub_4B8390  +
mov ecx [esp+4Ch+var_2C] +
mov ebp [esp+4Ch+var_30] +
mov edi ecx +
sub edi ebp +
cmp ebp ecx +
mov edx eax +
cmovz edi ebx +
lea eax [esp+4Ch+var_24] +
call sub_4B9400  +
mov ecx [esp+4Ch+var_20] +
mov ebp [esp+4Ch+var_24] +
mov edx ecx +
sub edx ebp +
cmp ebp ecx +
cmovnz ebx edx +
mov edx eax +
lea eax [esp+4Ch+var_18] +
mov ebp ebx +
call sub_4B8EB0  +
mov edx [esp+4Ch+var_18] +
mov ecx [esp+4Ch+var_14] +
cmp edx ecx +
mov ebx eax +
jz loc_4B9614  +
sub ecx edx +
jnz loc_4B96A6  +
mov edx offset asc_50D005 +
mov eax esi +
call sub_4B82C0  +
test ebp ebp +
mov edx [esp+4Ch+var_24] +
jnz loc_4B96C4  +
mov edx offset asc_50D390 +
mov eax esi +
call sub_4B82C0  +
test edi edi +
mov edx [esp+4Ch+var_30] +
jnz loc_4B96B2  +
test edx edx +
jz loc_4B9664  +
mov [esp+4Ch+var_4C] edx +
call free  +
mov [esp+4Ch+var_2C] 0 +
mov [esp+4Ch+var_28] 0 +
mov [esp+4Ch+var_30] 0 +
mov eax [esp+4Ch+var_24] +
test eax eax +
jz loc_4B968C  +
mov [esp+4Ch+var_4C] eax +
call free  +
mov [esp+4Ch+var_20] 0 +
mov [esp+4Ch+var_1C] 0 +
mov [esp+4Ch+var_24] 0 +
mov eax [esp+4Ch+var_18] +
test eax eax +
jz loc_4B969C  +
mov [esp+4Ch+var_4C] eax +
call free  +
add esp 4Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
call sub_4B84E0  +
jmp loc_4B9614  +
mov ecx edi +
mov eax esi +
call sub_4B84E0  +
mov edx [esp+4Ch+var_30] +
jmp loc_4B9640  +
mov ecx ebp +
mov eax esi +
call sub_4B84E0  +
jmp loc_4B962C  +
***
push esi  +
push ebx  +
sub esp 3Ch +
test edx edx +
mov [esp+3Ch+var_28] eax +
jz loc_4B97F4  +
cmp byte ptr [edx] 0 +
jz loc_4B97F4  +
lea eax [esp+3Ch+var_1C] +
mov esi ecx +
mov [esp+3Ch+var_34] 0Ah +
mov [esp+3Ch+var_38] eax +
mov [esp+3Ch+var_3C] edx +
call strtol  +
mov ebx [esp+3Ch+var_1C] +
test ebx ebx +
mov [esp+3Ch+var_24] eax +
jz loc_4B97F4  +
test eax eax +
jle loc_4B97F4  +
cmp esi 4 +
jz loc_4B9817  +
mov [esp+3Ch+var_3C] ebx +
call strlen  +
mov edi [esp+3Ch+var_24] +
cmp eax edi +
jb loc_4B97F4  +
cmp edi 4 +
jle loc_4B9800  +
mov edi offset a__t_0 +
mov ecx 3 +
mov esi ebx +
cmps   +
jnz loc_4B9800  +
movzx eax byte ptr [ebx+3] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_4B97F4  +
cmp al 30h +
jz loc_4B97F4  +
mov esi [esp+3Ch+var_28] +
lea edx [ebx+3] +
mov ecx 3 +
mov eax esi +
call sub_4B96E0  +
mov edx offset asc_50D39A +
mov edi eax +
mov eax esi +
call sub_4B82C0  +
test edi edi +
jz loc_4B97E6  +
movzx eax byte ptr [edi] +
test al al +
jz loc_4B9A79  +
xor esi esi +
cmp al 5Ah +
jz loc_4B9B93  +
test esi esi +
jnz loc_4B9A27  +
movzx eax byte ptr [edi] +
cmp al 48h +
jz loc_4B9A40  +
cmp al 54h +
jz loc_4B9B10  +
cmp al 56h +
jz loc_4B9AA0  +
cmp al 53h +
lea esi [esi+0] +
jz loc_4B9A50  +
mov eax [esp+3Ch+var_28] +
mov edx offset asc_50D007 +
call sub_4B82C0  +
xor esi esi +
add esp 3Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [esp+3Ch+var_24] +
sub eax 6 +
cmp eax 6 +
ja loc_4B9910  +
jmp ds:off_50D444[eax*4]  +
mov eax [esp+3Ch+var_28] +
xor edi edi +
mov ebp [esp+3Ch+var_24] +
mov edx [eax] +
mov eax [eax+4] +
mov ecx eax +
sub ecx edx +
cmp edx eax +
cmovz ecx edi +
mov edx ebx +
mov [esp+3Ch+var_20] ecx +
jmp loc_4B98AA  +
mov [esp+3Ch+var_1C] 0 +
movzx eax byte ptr [edx] +
mov ebp [esp+3Ch+var_24] +
test byte ptr ds:word_509C60[eax+eax] 4 +
jnz loc_4B98BD  +
mov edi offset a_d +
mov esi edx +
mov ecx 2 +
cmps   +
jz loc_4B98E0  +
mov eax edx +
sub eax ebx +
cmp eax ebp +
jz loc_4B9A20  +
mov eax 66666667h +
imul  ebp +
mov eax [esp+3Ch+var_28] +
sar ebp 1Fh +
sar edx 2 +
mov ecx [eax+4] +
sub edx ebp +
mov ebp edx +
mov edx [eax] +
xor eax eax +
mov esi ecx +
sub esi edx +
cmp edx ecx +
cmovnz eax esi +
cmp [esp+3Ch+var_20] eax +
js loc_4B98D3  +
lea edx [ebx-1] +
mov ebx [esp+3Ch+var_1C] +
test ebx ebx +
jz loc_4B97F4  +
test ebp ebp +
jz loc_4B9837  +
movzx eax byte ptr [edx] +
mov ebx edx +
test byte ptr ds:word_509C60[eax+eax] 4 +
jz loc_4B9850  +
mov eax [esp+3Ch+var_28] +
mov ecx 3 +
call sub_4B9BA0  +
mov edx eax +
test edx edx +
jnz loc_4B9864  +
jmp loc_4B9870  +
mov eax [esp+3Ch+var_28] +
add edx [esp+3Ch+var_20] +
mov [eax+4] edx +
jmp loc_4B989B  +
mov eax [esp+3Ch+var_28] +
add edx 2 +
mov ecx 1 +
call sub_4B9BA0  +
mov edx eax +
jmp loc_4B98CD  +
mov edi offset a__postblitmfz +
mov ecx 0Dh +
mov esi ebx +
cmps   +
jz loc_4B9B3C  +
lea esi [esi+0] +
mov esi [esp+3Ch+var_24] +
mov edx ebx +
mov eax [esp+3Ch+var_28] +
mov ecx esi +
add esi ebx +
call sub_4B84E0  +
jmp loc_4B97F6  +
mov edi offset a__classz +
mov ecx 8 +
mov esi ebx +
cmps   +
jnz loc_4B9910  +
mov edx offset aClassinfoFor +
jmp loc_4B99B0  +
mov ecx [esp+3Ch+var_24] +
mov eax 7 +
mov edi offset a__ctor +
mov esi ebx +
cmp ecx 7 +
cmovg ecx eax +
cmp ecx ecx +
cmps   +
jz loc_4B9B23  +
mov edi [esp+3Ch+var_24] +
mov esi ebx +
cmp edi 7 +
cmovle eax edi +
mov edi offset a__dtor +
mov ecx eax +
cmp eax eax +
cmps   +
jz loc_4B9B57  +
mov edi offset a__initz +
mov ecx 7 +
mov esi ebx +
cmps   +
jz loc_4B9B7A  +
mov edi offset a__vtblz +
mov ecx 7 +
mov esi ebx +
cmps   +
jnz loc_4B9910  +
mov edx offset aVtableFor_0 +
lea esi [esi+0] +
mov edi [esp+3Ch+var_28] +
mov eax edi +
call sub_4B8470  +
mov eax [edi] +
mov edx [edi+4] +
cmp eax edx +
jz loc_4B9B70  +
sub edx eax +
sub edx 1 +
mov edi [esp+3Ch+var_28] +
add eax edx +
mov esi [esp+3Ch+var_24] +
mov [edi+4] eax +
add esi ebx +
jmp loc_4B97F6  +
mov edi offset a__moduleinfoz +
mov ecx 0Dh +
mov esi ebx +
cmps   +
jnz loc_4B9910  +
mov edx offset aModuleinfoFor +
jmp loc_4B99B0  +
mov edi offset a__interfacez +
mov ecx 0Ch +
mov esi ebx +
cmps   +
jnz loc_4B9910  +
mov edx offset aInterfaceFor +
jmp loc_4B99B0  +
mov esi edx +
jmp loc_4B97F6  +
mov eax [esp+3Ch+var_28] +
mov edx offset asc_50D000 +
call sub_4B82C0  +
jmp loc_4B97BF  +
movzx eax byte ptr [edi+1] +
add edi 1 +
jmp loc_4B97CA  +
mov eax [esp+3Ch+var_28] +
lea edx [edi+1] +
mov ecx 4 +
call sub_4B9BA0  +
mov edi eax +
test edi edi +
jz loc_4B97E6  +
movzx eax byte ptr [edi] +
add esi 1 +
test al al +
jnz loc_4B97AF  +
mov esi edi +
mov eax [esp+3Ch+var_28] +
mov edx offset asc_50D007 +
call sub_4B82C0  +
mov eax esi +
sub eax ebx +
cmp [esp+3Ch+var_24] eax +
mov eax 0 +
cmovnz esi eax +
jmp loc_4B97F6  +
lea edx [edi+1] +
movsx ebp byte ptr [edi+1] +
lea eax [esp+3Ch+var_18] +
mov [esp+3Ch+var_10] 0 +
mov [esp+3Ch+var_14] 0 +
mov [esp+3Ch+var_18] 0 +
call sub_4B8EB0  +
mov edx 1 +
mov edi eax +
lea eax [esp+3Ch+var_18] +
call sub_4B8250  +
mov eax [esp+3Ch+var_14] +
mov edx edi +
mov byte ptr [eax] 0 +
mov eax [esp+3Ch+var_28] +
mov ecx [esp+3Ch+var_18] +
mov [esp+3Ch+var_3C] ebp +
call sub_4B8960  +
mov edi eax +
mov eax [esp+3Ch+var_18] +
test eax eax +
jz loc_4B9A63  +
mov [esp+3Ch+var_3C] eax +
call free  +
jmp loc_4B9A63  +
mov eax [esp+3Ch+var_28] +
lea edx [edi+1] +
call sub_4B8EB0  +
mov edi eax +
jmp loc_4B9A63  +
mov eax [esp+3Ch+var_28] +
mov edx offset aThis_0 +
call sub_4B82C0  +
mov esi [esp+3Ch+var_24] +
add esi ebx +
jmp loc_4B97F6  +
mov eax [esp+3Ch+var_28] +
mov edx offset aThisThis +
call sub_4B82C0  +
mov eax [esp+3Ch+var_24] +
lea esi [ebx+eax+3] +
jmp loc_4B97F6  +
mov eax [esp+3Ch+var_28] +
mov edx offset aThis_1 +
call sub_4B82C0  +
mov esi [esp+3Ch+var_24] +
add esi ebx +
jmp loc_4B97F6  +
mov edx 0FFFFFFFFh +
jmp loc_4B99CD  +
mov eax [esp+3Ch+var_28] +
mov edx offset aInit +
call sub_4B82C0  +
mov esi [esp+3Ch+var_24] +
add esi ebx +
jmp loc_4B97F6  +
lea esi [edi+1] +
jmp loc_4B9A7B  +
***
push edi  +
mov edi 1 +
push esi  +
mov esi edi +
push ebx  +
mov ebx edx +
sub esp 3Ch +
mov [esp+48h+var_3C] ecx +
jmp loc_4B9C04  +
movzx eax byte ptr [eax] +
cmp al 4Dh +
mov ecx eax +
jz loc_4B9DF2  +
sub ecx 46h +
cmp cl 11h +
ja loc_4B9BE0  +
mov edx 1 +
shl edx cl +
and edx 39001h +
jnz loc_4B9C80  +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jz loc_4B9DB3  +
test esi esi +
jz loc_4B9C01  +
mov edx offset unk_50D460 +
mov eax ebp +
call sub_4B82C0  +
add esi 1 +
mov ecx [esp+48h+var_3C] +
mov edx ebx +
mov eax ebp +
call sub_4B96E0  +
test eax eax +
mov ebx eax +
jnz loc_4B9BB8  +
cmp [esp+48h+var_3C] 1 +
jbe loc_4B9C25  +
xor edx edx +
jmp loc_4B9DC0  +
xor ebx ebx +
mov eax [ebp+4] +
xor edi edi +
mov edx [ebp+0] +
mov esi eax +
sub esi edx +
cmp edx eax +
mov edx ebx +
mov eax ebp +
cmovz esi edi +
call sub_4B8EB0  +
mov ebx [ebp+4] +
mov edx [ebp+0] +
mov ecx ebx +
sub ecx edx +
cmp edx ebx +
cmovz ecx edi +
cmp esi ecx +
js loc_4B9E70  +
mov edx eax +
mov eax [esp+48h+var_3C] +
test eax eax +
jnz loc_4B9DC0  +
test edx edx +
jz loc_4B9C1E  +
cmp byte ptr [edx] 0 +
jnz loc_4B9C1E  +
add esp 3Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
cmp al 4Dh +
jnz loc_4B9C8B  +
movzx eax byte ptr [ebx+1] +
add ebx 1 +
cmp al 56h +
jz loc_4B9DD0  +
mov [esp+48h+var_29] 0 +
mov [esp+48h+var_34] 0 +
mov [esp+48h+var_30] 0 +
mov edx ebx +
xor edi edi +
lea eax [esp+48h+var_24] +
mov [esp+48h+var_1C] 0 +
mov [esp+48h+var_20] 0 +
mov [esp+48h+var_24] 0 +
call sub_4B8E10  +
mov edx [ebp+4] +
mov ecx [ebp+0] +
mov ebx edx +
sub ebx ecx +
cmp ecx edx +
mov edx eax +
mov eax ebp +
cmovz ebx edi +
call sub_4B8300  +
mov edx eax +
mov eax ebp +
call sub_4B8390  +
mov ecx [ebp+0] +
mov [esp+48h+var_38] eax +
mov eax [ebp+4] +
mov edx eax +
sub edx ecx +
cmp ecx eax +
cmovnz edi edx +
cmp ebx edi +
js loc_4B9E28  +
mov edx offset asc_50D005 +
mov eax ebp +
call sub_4B82C0  +
mov edx [esp+48h+var_38] +
mov eax ebp +
call sub_4B9400  +
mov edx offset asc_50D007 +
mov ebx eax +
mov eax ebp +
call sub_4B82C0  +
mov edx [esp+48h+var_24] +
mov ecx [esp+48h+var_20] +
cmp edx ecx +
jz loc_4B9D49  +
sub ecx edx +
jz loc_4B9D49  +
mov eax ebp +
call sub_4B84E0  +
mov edx [esp+48h+var_24] +
test edx edx +
jz loc_4B9D6D  +
mov [esp+48h+var_48] edx +
call free  +
mov [esp+48h+var_20] 0 +
mov [esp+48h+var_1C] 0 +
mov [esp+48h+var_24] 0 +
test ebx ebx +
jnz loc_4B9D97  +
cmp [esp+48h+var_29] 0 +
jz loc_4B9D97  +
mov ecx [ebp+4] +
xor eax eax +
mov edx [ebp+0] +
mov ebx ecx +
sub ebx edx +
cmp edx ecx +
cmovnz eax ebx +
mov ebx [esp+48h+var_30] +
cmp [esp+48h+var_34] eax +
js loc_4B9E54  +
test ebx ebx +
jz loc_4B9C17  +
movzx eax byte ptr [ebx] +
movzx edx al +
test byte ptr ds:word_509C60[edx+edx] 4 +
jnz loc_4B9BF1  +
cmp [esp+48h+var_3C] 1 +
mov edx ebx +
jbe loc_4B9E60  +
add esp 3Ch +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax [ebp+0] +
mov edx [ebp+4] +
cmp eax edx +
jz loc_4B9E80  +
sub edx eax +
mov [esp+48h+var_34] edx +
setnz [esp+48h+var_29]  +
mov [esp+48h+var_30] ebx +
jmp loc_4B9CA8  +
lea edi [ebx+1] +
mov [esp+48h+var_38] edi +
mov ecx edi +
xor edi edi +
movzx edx byte ptr [ecx] +
cmp dl 4Fh +
jz loc_4B9E20  +
jg loc_4B9E32  +
cmp dl 4Eh +
jnz loc_4B9E50  +
cmp byte ptr [ecx+1] 67h +
jnz loc_4B9E50  +
add ecx 2 +
movzx edx byte ptr [ecx] +
add edi 2 +
cmp dl 4Fh +
jnz loc_4B9E05  +
add ecx 1 +
add edi 1 +
jmp loc_4B9DFD  +
add ecx ebx +
mov [ebp+4] ecx +
jmp loc_4B9D09  +
sub edx 78h +
cmp dl 1 +
ja loc_4B9E50  +
mov edx 1 +
mov ecx [esp+48h+var_38] +
add ecx edi +
movzx ecx byte ptr [ecx+edx] +
jmp loc_4B9BC5  +
xor edx edx +
jmp loc_4B9E3F  +
add edx [esp+48h+var_34] +
mov [ebp+4] edx +
jmp loc_4B9D97  +
cmp al 5Ah +
jnz loc_4B9C27  +
lea eax [ebx+1] +
jmp loc_4B9C58  +
add edx esi +
mov [ebp+4] edx +
jmp loc_4B9C58  +
mov [esp+48h+var_30] ebx +
mov [esp+48h+var_29] 0 +
mov [esp+48h+var_34] 0 +
jmp loc_4B9CA8  +
***
sub esp 24h +
mov edx [esp+24h+arg_0] +
test edx edx +
jz loc_4B9F41  +
cmp byte ptr [edx] 0 +
jz loc_4B9F41  +
mov edi offset a_d +
mov ecx 2 +
mov esi edx +
cmps   +
jnz loc_4B9F41  +
mov [esp+24h+var_8] 0 +
mov edi offset a_dmain +
mov ecx 7 +
mov [esp+24h+var_C] 0 +
mov esi edx +
mov [esp+24h+var_10] 0 +
cmps   +
jz loc_4B9F50  +
lea edi [esp+24h+var_10] +
add edx 2 +
xor ecx ecx +
mov eax edi +
call sub_4B9BA0  +
mov edx [esp+24h+var_10] +
test eax eax +
jz loc_4B9F35  +
mov ecx [esp+24h+var_C] +
cmp edx ecx +
jz loc_4B9F41  +
sub ecx edx +
test ecx ecx +
jle loc_4B9F41  +
mov eax edi +
mov edx 1 +
call sub_4B8250  +
mov eax [esp+24h+var_C] +
mov byte ptr [eax] 0 +
mov eax [esp+24h+var_10] +
add esp 24h +
pop esi  +
pop edi  +
retn   +
test edx edx +
jz loc_4B9F0A  +
mov [esp+24h+var_24] edx +
call free  +
add esp 24h +
xor eax eax +
pop esi  +
pop edi  +
retn   +
lea edi [esp+24h+var_10] +
mov edx offset aDMain +
mov eax edi +
call sub_4B82C0  +
mov edx [esp+24h+var_10] +
mov ecx [esp+24h+var_C] +
jmp loc_4B9F0E  +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_4] +
test eax eax +
jz loc_4B9F90  +
cmp eax 3 +
jz loc_4B9F90  +
mov eax 1 +
add esp 1Ch +
retn 0Ch  +
mov edx [esp+1Ch+arg_8] +
mov [esp+1Ch+var_18] eax +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_14] edx +
mov [esp+1Ch+var_1C] eax +
call sub_4BAC90  +
mov eax 1 +
add esp 1Ch +
retn 0Ch  +
***
cmp dword_4C01D8 2 +
mov eax [esp+18h+arg_4] +
jz loc_4B9FDB  +
mov dword_4C01D8 2 +
cmp eax 2 +
jz loc_4B9FF1  +
cmp eax 1 +
jz loc_4BA020  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn 0Ch  +
mov ebx offset unk_516030 +
cmp ebx offset unk_516030 +
jz loc_4B9FE5  +
nop   +
mov eax [ebx] +
test eax eax +
jz loc_4BA008  +
call eax  +
add ebx 4 +
cmp ebx offset unk_516030 +
jnz loc_4BA000  +
add esp 18h +
mov eax 1 +
pop ebx  +
retn 0Ch  +
mov eax [esp+18h+arg_8] +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_10] eax +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_18] eax +
call sub_4BAC90  +
jmp loc_4B9FE5  +
***
xor eax eax +
retn   +
***
mov eax ds:__lconv_init +
jmp eax  +
***
retn   +
***
retn   +
***
mov eax ds:dword_514934 +
mov [esp+28h+var_28] eax +
call sub_4BA060  +
cmp eax 0FFFFFFFFh +
mov [esp+28h+var_10] eax +
jz loc_4BA120  +
mov [esp+28h+var_28] 8 +
call _lock  +
mov eax ds:dword_514934 +
mov [esp+28h+var_28] eax +
call sub_4BA060  +
mov [esp+28h+var_10] eax +
mov eax ds:dword_514930 +
mov [esp+28h+var_28] eax +
call sub_4BA060  +
mov [esp+28h+var_C] eax +
lea eax [esp+28h+var_C] +
mov [esp+28h+var_20] eax +
lea eax [esp+28h+var_10] +
mov [esp+28h+var_24] eax +
mov eax [esp+28h+arg_0] +
mov [esp+28h+var_28] eax +
call __dllonexit  +
mov ebx eax +
mov eax [esp+28h+var_10] +
mov [esp+28h+var_28] eax +
call sub_4BA070  +
mov ds:dword_514934 eax +
mov eax [esp+28h+var_C] +
mov [esp+28h+var_28] eax +
call sub_4BA070  +
mov [esp+28h+var_28] 8 +
mov ds:dword_514930 eax +
call _unlock  +
add esp 28h +
mov eax ebx +
pop ebx  +
retn   +
mov eax [esp+28h+arg_0] +
mov [esp+28h+var_28] eax +
call ds:_onexit  +
add esp 28h +
pop ebx  +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
mov [esp+1Ch+var_1C] eax +
call sub_4BA080  +
test eax eax +
setz al  +
add esp 1Ch +
movzx eax al +
neg eax  +
retn   +
***
push esi  +
push ebx  +
sub esp 10h +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
mov eax [eax] +
cmp eax 0C0000091h +
ja loc_4BA1B8  +
cmp eax 0C000008Dh +
jnb loc_4BA220  +
cmp eax 0C0000005h +
jnz loc_4BA227  +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] 0Bh +
call signal  +
cmp eax 1 +
jz loc_4BA256  +
test eax eax +
jz loc_4BA1CD  +
mov [esp+18h+var_18] 0Bh +
call eax  +
jmp loc_4BA20D  +
cmp eax 0C0000094h +
jz loc_4BA1E1  +
cmp eax 0C0000096h +
jz loc_4BA22E  +
cmp eax 0C0000093h +
jz loc_4BA220  +
mov eax ds:dword_514328 +
test eax eax +
jz loc_4BA212  +
mov [ebp+arg_0] ebx +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
jmp eax  +
xor esi esi +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] 8 +
call signal  +
cmp eax 1 +
jz loc_4BA286  +
test eax eax +
jz loc_4BA1CD  +
mov [esp+18h+var_18] 8 +
call eax  +
mov eax 0FFFFFFFFh +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
mov esi 1 +
jmp loc_4BA1E3  +
cmp eax 0C000001Dh +
jnz loc_4BA1CD  +
mov [esp+18h+var_14] 0 +
mov [esp+18h+var_18] 4 +
call signal  +
cmp eax 1 +
jz loc_4BA270  +
test eax eax +
jz loc_4BA1CD  +
mov [esp+18h+var_18] 4 +
call eax  +
jmp loc_4BA20D  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 0Bh +
call signal  +
jmp loc_4BA20D  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 4 +
call signal  +
jmp loc_4BA20D  +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] 8 +
call signal  +
test esi esi +
jz loc_4BA20D  +
call sub_4BA8F0  +
jmp loc_4BA20D  +
***
retn   +
***
sub esp 3Ch +
mov eax ds:dword_51432C +
fld  qword ptr [esp+48h] +
fld  qword ptr [esp+50h] +
fld  qword ptr [esp+58h] +
test eax eax +
jz loc_4BA301  +
fxch  st(2) +
mov edx [esp+40h] +
fstp  qword ptr [esp+18h] +
fstp  qword ptr [esp+20h] +
fstp  qword ptr [esp+28h] +
mov [esp+10h] edx +
mov edx [esp+44h] +
mov [esp+14h] edx +
lea edx [esp+10h] +
mov [esp] edx +
call eax  +
jmp loc_4BA307  +
fstp  st +
fstp  st +
fstp  st +
add esp 3Ch +
retn   +
***
mov eax [esp+arg_0] +
mov ds:dword_51432C eax +
jmp loc_4BC258  +
***
sub esp 3Ch +
mov eax [esp+3Ch+arg_0] +
mov edx [eax] +
lea ecx [edx-1] +
mov edx offset aUnknownError +
cmp ecx 5 +
ja loc_4BA33D  +
mov edx ds:off_50D590[ecx*4] +
fld  qword ptr [eax+18h] +
fld  qword ptr [eax+10h] +
fld  qword ptr [eax+8] +
fxch  st(2) +
mov eax [eax+4] +
fstp  [esp+3Ch+var_1C] +
fstp  [esp+3Ch+var_24] +
fstp  [esp+3Ch+var_2C] +
mov [esp+3Ch+var_34] edx +
mov [esp+3Ch+var_30] eax +
mov eax ds:_iob +
mov [esp+3Ch+var_38] offset a_matherrSInSGG +
add eax 40h +
mov [esp+3Ch+var_3C] eax +
call fprintf  +
xor eax eax +
add esp 3Ch +
retn   +
***
mov eax ds:_iob +
mov [esp+18h+var_10] 1Bh +
lea ebx [esp+18h+arg_4] +
mov [esp+18h+var_14] 1 +
mov [esp+18h+var_18] offset aMingwW64Runtim +
add eax 40h +
mov [esp+18h+var_C] eax +
call fwrite  +
mov eax [esp+18h+arg_0] +
mov [esp+18h+var_10] ebx +
mov [esp+18h+var_14] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+18h+var_18] eax +
call vfprintf  +
call abort  +
jmp sub_4BA3E0  +
***
push edi  +
mov eax ds:dword_514330 +
retn   +
***
call eax  +
mov eax off_4C01D4 +
lea edx [eax+4] +
mov eax [eax+4] +
mov off_4C01D4 edx +
test eax eax +
jnz loc_4BA910  +
add esp 0Ch +
retn   +
***
mov ebx ds:dword_4BD980 +
cmp ebx 0FFFFFFFFh +
jz loc_4BA963  +
test ebx ebx +
jz loc_4BA952  +
call ds:dword_4BD980[ebx*4]  +
sub ebx 1 +
lea esi [esi+0] +
jnz loc_4BA943  +
mov [esp+18h+var_18] offset dword_4BA900 +
call sub_4BA140  +
add esp 18h +
pop ebx  +
retn   +
xor ebx ebx +
jmp loc_4BA969  +
mov ebx eax +
lea eax [ebx+1] +
mov edx ds:dword_4BD980[eax*4] +
test edx edx +
jnz loc_4BA967  +
jmp loc_4BA93F  +
***
mov eax ds:dword_51433C +
test eax eax +
jz loc_4BA990  +
retn   +
mov ds:dword_51433C 1 +
jmp sub_4BA930  +
***
push edi  +
push esi  +
push ebx  +
sub esp 2Ch +
mov eax dword_4C01E8 +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
cmp eax 0BB40E64Eh +
jz loc_4BA9D2  +
not eax  +
mov dword_4C01EC eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea eax [ebp+var_28] +
mov [esp+38h+var_38] eax +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+var_28] +
mov edi [ebp+var_24] +
xor esi edi +
sub esp 4 +
call ds:GetCurrentProcessId  +
mov ebx eax +
call ds:GetCurrentThreadId  +
mov [ebp+var_2C] eax +
call ds:GetTickCount  +
mov [ebp+var_30] eax +
lea eax [ebp+var_20] +
mov [esp+38h+var_38] eax +
call ds:QueryPerformanceCounter  +
xor esi [ebp+var_20] +
xor esi [ebp+var_1C] +
xor esi ebx +
xor esi [ebp+var_2C] +
sub esp 4 +
xor esi [ebp+var_30] +
cmp esi 0BB40E64Eh +
jz loc_4BAA40  +
mov eax esi +
not eax  +
mov dword_4C01E8 esi +
mov dword_4C01EC eax +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax 44BF19B0h +
mov esi 0BB40E64Fh +
jmp loc_4BAA2C  +
***
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov [esp+28h+var_28] offset unk_514688 +
call ds:EnterCriticalSection  +
mov edi ds:dword_514680 +
mov esi ds:GetLastError +
sub esp 4 +
test edi edi +
jz loc_4BAB39  +
lea esi [esi+0] +
mov eax [edi] +
mov [esp+28h+var_28] eax +
call ds:TlsGetValue  +
sub esp 4 +
mov ebx eax +
call esi  +
test eax eax +
jnz loc_4BAB32  +
test ebx ebx +
jz loc_4BAB32  +
mov eax [edi+4] +
mov [esp+28h+var_28] ebx +
call eax  +
mov edi [edi+8] +
test edi edi +
jnz loc_4BAB10  +
mov [esp+28h+var_28] offset unk_514688 +
call ds:LeaveCriticalSection  +
sub esp 4 +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
jmp loc_4BAB60  +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ebx  +
sub esp 10h +
mov eax ds:dword_514684 +
test eax eax +
jnz loc_4BAB80  +
lea esp [ebp-8] +
mov eax esi +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
mov dword ptr [esp+4] 0Ch +
mov dword ptr [esp] 1 +
call calloc  +
test eax eax +
mov ebx eax +
jz loc_4BABDC  +
mov eax [ebp+8] +
mov dword ptr [esp] offset unk_514688 +
mov [ebx] eax +
mov eax [ebp+0Ch] +
mov [ebx+4] eax +
call ds:EnterCriticalSection  +
mov eax ds:dword_514680 +
mov ds:dword_514680 ebx +
mov [ebx+8] eax +
sub esp 4 +
mov dword ptr [esp] offset unk_514688 +
call ds:LeaveCriticalSection  +
mov eax esi +
sub esp 4 +
lea esp [ebp-8] +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
mov esi 0FFFFFFFFh +
jmp loc_4BAB73  +
***
push ebp  +
mov ebp esp +
push ebx  +
sub esp 14h +
mov eax ds:dword_514684 +
mov ebx [ebp+8] +
test eax eax +
jnz loc_4BAC10  +
xor eax eax +
mov ebx [ebp-4] +
leave   +
retn   +
***
mov dword ptr [esp] offset unk_514688 +
call ds:EnterCriticalSection  +
mov edx ds:dword_514680 +
sub esp 4 +
test edx edx +
jz loc_4BAC41  +
mov eax [edx] +
cmp eax ebx +
jnz loc_4BAC3A  +
jmp loc_4BAC78  +
mov ecx [eax] +
cmp ecx ebx +
jz loc_4BAC58  +
mov edx eax +
mov eax [edx+8] +
test eax eax +
jnz loc_4BAC32  +
mov dword ptr [esp] offset unk_514688 +
call ds:LeaveCriticalSection  +
sub esp 4 +
xor eax eax +
mov ebx [ebp-4] +
leave   +
retn   +
***
mov ecx [eax+8] +
mov [edx+8] ecx +
mov [esp] eax +
call free  +
mov dword ptr [esp] offset unk_514688 +
call ds:LeaveCriticalSection  +
sub esp 4 +
jmp loc_4BAC51  +
***
mov eax [edx+8] +
mov ds:dword_514680 eax +
mov eax edx +
jmp loc_4BAC5E  +
***
sub esp 18h +
mov eax [ebp+arg_4] +
cmp eax 1 +
jz loc_4BACE4  +
jb loc_4BACB5  +
cmp eax 3 +
jnz loc_4BACAE  +
mov eax ds:dword_514684 +
test eax eax +
jnz loc_4BAD12  +
mov eax 1 +
leave   +
retn   +
mov eax ds:dword_514684 +
test eax eax +
jnz loc_4BAD20  +
mov eax ds:dword_514684 +
cmp eax 1 +
jnz loc_4BACAE  +
mov ds:dword_514684 0 +
mov [esp+18h+var_18] offset unk_514688 +
call ds:DeleteCriticalSection  +
sub esp 4 +
jmp loc_4BACAE  +
mov eax ds:dword_514684 +
test eax eax +
jz loc_4BAD00  +
mov ds:dword_514684 1 +
mov eax 1 +
leave   +
retn   +
mov [esp+18h+var_18] offset unk_514688 +
call ds:InitializeCriticalSection  +
sub esp 4 +
jmp loc_4BACED  +
call sub_4BAAE0  +
jmp loc_4BACAE  +
call sub_4BAAE0  +
jmp loc_4BACBE  +
***
add eax [eax+3Ch] +
cmp dword ptr [eax] 4550h +
jz loc_4BAD40  +
xor eax eax +
retn   +
cmp word ptr [eax+18h] 10Bh +
setz al  +
movzx eax al +
retn   +
***
mov eax [esp+4] +
cmp word ptr [eax] 5A4Dh +
jz loc_4BAD60  +
xor eax eax +
retn   +
***
jmp sub_4BAD30  +
***
mov edx [esp+arg_0] +
mov ebx [esp+arg_4] +
add edx [edx+3Ch] +
movzx esi word ptr [edx+6] +
movzx eax word ptr [edx+14h] +
test esi esi +
lea eax [edx+eax+18h] +
jz loc_4BADA8  +
xor edx edx +
nop   +
mov ecx [eax+0Ch] +
cmp ecx ebx +
ja loc_4BAD9E  +
add ecx [eax+8] +
cmp ebx ecx +
jb loc_4BADAA  +
add edx 1 +
add eax 28h +
cmp edx esi +
jb loc_4BAD90  +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
***
push ebp  +
push edi  +
push esi  +
xor esi esi +
push ebx  +
sub esp 1Ch +
mov edi [esp+30h] +
mov [esp] edi +
call strlen  +
cmp eax 8 +
ja loc_4BADD5  +
cmp word ptr ds:400000h 5A4Dh +
jz loc_4BADE0  +
add esp 1Ch +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov eax 400000h +
call sub_4BAD30  +
test eax eax +
jz loc_4BADD5  +
mov eax ds:40003Ch +
lea edx [eax+400000h] +
movzx eax word ptr [eax+400014h] +
movzx ebp word ptr [edx+6] +
lea ebx [edx+eax+18h] +
test ebp ebp +
jnz loc_4BAE1A  +
jmp loc_4BADD5  +
***
add esi 1 +
add ebx 28h +
cmp esi ebp +
jnb loc_4BAE40  +
mov dword ptr [esp+8] 8 +
mov [esp+4] edi +
mov [esp] ebx +
call strncmp  +
test eax eax +
jnz loc_4BAE10  +
add esp 1Ch +
mov esi ebx +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
add esp 1Ch +
xor esi esi +
pop ebx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 8 +
cmp word ptr ds:400000h 5A4Dh +
jz loc_4BAE68  +
add esp 8 +
mov eax ebx +
pop ebx  +
retn   +
mov eax 400000h +
call sub_4BAD30  +
test eax eax +
jz loc_4BAE61  +
mov eax [esp+8+arg_0] +
mov [esp+8+var_8] 400000h +
sub eax 400000h +
mov [esp+8+var_4] eax +
call sub_4BAD70  +
add esp 8 +
mov ebx eax +
mov eax ebx +
pop ebx  +
retn   +
***
cmp word ptr ds:400000h 5A4Dh +
jz loc_4BAEB2  +
mov eax ebx +
pop ebx  +
retn   +
mov eax 400000h +
call sub_4BAD30  +
test eax eax +
jz loc_4BAEAE  +
mov eax ds:40003Ch +
movzx ebx word ptr [eax+400006h] +
mov eax ebx +
pop ebx  +
retn   +
***
push esi  +
xor esi esi +
cmp word ptr ds:400000h 5A4Dh +
push ebx  +
mov ebx [esp+0Ch] +
jz loc_4BAEE8  +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
mov eax 400000h +
call sub_4BAD30  +
test eax eax +
jz loc_4BAEE3  +
mov eax ds:40003Ch +
lea ecx [eax+400000h] +
movzx eax word ptr [eax+400014h] +
lea edx [ecx+eax+18h] +
movzx ecx word ptr [ecx+6] +
test ecx ecx +
jz loc_4BAEE3  +
xor eax eax +
test byte ptr [edx+27h] 20h +
jz loc_4BAF23  +
test ebx ebx +
jz loc_4BAF34  +
sub ebx 1 +
add eax 1 +
add edx 28h +
cmp eax ecx +
jb loc_4BAF16  +
xor esi esi +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
mov esi edx +
mov eax esi +
pop ebx  +
pop esi  +
retn   +
***
cmp word ptr ds:400000h 5A4Dh +
jz loc_4BAF50  +
xor eax eax +
retn   +
mov eax 400000h +
call sub_4BAD30  +
test eax eax +
jz loc_4BAF4B  +
mov eax 400000h +
retn   +
***
xor eax eax +
cmp word ptr ds:400000h 5A4Dh +
jz loc_4BAF80  +
retn   +
***
sub esp 8 +
mov eax 400000h +
call sub_4BAD30  +
test eax eax +
jz loc_4BAFB6  +
mov eax [esp+0Ch] +
mov dword ptr [esp] 400000h +
sub eax 400000h +
mov [esp+4] eax +
call sub_4BAD70  +
test eax eax +
jz loc_4BAFC0  +
mov eax [eax+24h] +
not eax  +
shr eax 1Fh +
add esp 8 +
retn   +
***
xor eax eax +
jmp loc_4BAFB6  +
***
push edi  +
xor edi edi +
push esi  +
push ebx  +
sub esp 8 +
cmp word ptr ds:400000h 5A4Dh +
mov ebx [esp+18h] +
jz loc_4BAFF0  +
add esp 8 +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov eax 400000h +
call sub_4BAD30  +
test eax eax +
jz loc_4BAFE7  +
mov eax ds:40003Ch +
mov esi [eax+400080h] +
test esi esi +
jz loc_4BAFE7  +
mov [esp+4] esi +
mov dword ptr [esp] 400000h +
call sub_4BAD70  +
test eax eax +
jz loc_4BAFE7  +
add esi 400000h +
mov edx esi +
jnz loc_4BB036  +
jmp loc_4BAFE7  +
***
sub ebx 1 +
add edx 14h +
mov ecx [edx+4] +
test ecx ecx +
jnz loc_4BB044  +
mov eax [edx+0Ch] +
test eax eax +
jz loc_4BB060  +
test ebx ebx +
jg loc_4BB030  +
mov edi [edx+0Ch] +
add esp 8 +
pop ebx  +
pop esi  +
add edi 400000h +
mov eax edi +
pop edi  +
retn   +
***
add esp 8 +
xor edi edi +
mov eax edi +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
cmp eax 1000h +
lea ecx [esp+arg_0] +
jb loc_4BB092  +
sub ecx 1000h +
or dword ptr [ecx] 0 +
sub eax 1000h +
cmp eax 1000h +
ja loc_4BB07D  +
sub ecx eax +
or dword ptr [ecx] 0 +
pop eax  +
pop ecx  +
retn   +
***
push esi  +
push esi  +
push ebx  +
sub esp 18h +
mov ebx [esp+18h+arg_4] +
mov esi [esp+18h+arg_C] +
mov ebp [esp+18h+arg_8] +
mov eax [esp+18h+arg_0] +
test ebx ebx +
mov edx ebx +
mov edi esi +
mov [esp+18h+var_18] 0 +
js loc_4BB2A0  +
test edi edi +
mov ecx ebp +
mov ebx esi +
js loc_4BB2BA  +
mov esi edx +
mov edx ebx +
test edx edx +
mov ebp eax +
mov edi ecx +
mov ebx eax +
jnz loc_4BB242  +
cmp ecx esi +
jbe loc_4BB264  +
mov edx esi +
xor esi esi +
div  ecx +
mov ebx eax +
jmp loc_4BB24A  +
cmp edx esi +
jbe loc_4BB283  +
xor esi esi +
xor ebx ebx +
mov ecx [esp+18h+var_18] +
mov eax ebx +
mov edx esi +
test ecx ecx +
jz loc_4BB25C  +
neg eax  +
adc edx 0 +
neg edx  +
add esp 18h +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test ecx ecx +
jnz loc_4BB273  +
mov eax 1 +
xor edx edx +
div  ecx +
mov ecx eax +
mov eax esi +
xor edx edx +
div  ecx +
mov esi eax +
mov eax ebx +
div  ecx +
mov ebx eax +
jmp loc_4BB24A  +
bsr ebx edx +
xor ebx 1Fh +
jnz loc_4BB2D0  +
cmp ecx eax +
jbe loc_4BB293  +
cmp edx esi +
jnb loc_4BB246  +
xor esi esi +
mov ebx 1 +
jmp loc_4BB24A  +
neg eax  +
mov ecx ebp +
adc edx 0 +
mov ebx esi +
neg edx  +
test edi edi +
mov [esp+18h+var_18] 0FFFFFFFFh +
jns loc_4BB226  +
neg ecx  +
adc ebx 0 +
not [esp+18h+var_18]  +
neg ebx  +
jmp loc_4BB226  +
mov ecx ebx +
mov eax 20h +
sub eax ebx +
shl edx cl +
mov ecx eax +
mov [esp+18h+var_10] edx +
mov edx edi +
shr edx cl +
mov ecx ebx +
mov [esp+18h+var_14] edx +
mov edx [esp+18h+var_10] +
shl edi cl +
or [esp+18h+var_14] edx +
mov ecx eax +
mov edx esi +
shr edx cl +
mov ecx ebx +
shl esi cl +
mov ecx eax +
mov [esp+18h+var_10] edx +
mov edx ebp +
shr edx cl +
mov eax edx +
or eax esi +
mov esi [esp+18h+var_10] +
mov edx esi +
div  [esp+18h+var_14] +
mov esi edx +
mov [esp+18h+var_14] eax +
mul  edi +
cmp esi edx +
jb loc_4BB340  +
mov ecx ebx +
shl ebp cl +
cmp ebp eax +
jnb loc_4BB32F  +
cmp esi edx +
jz loc_4BB340  +
mov ebx [esp+18h+var_14] +
xor esi esi +
jmp loc_4BB24A  +
mov ebx [esp+18h+var_14] +
xor esi esi +
sub ebx 1 +
jmp loc_4BB24A  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+1Ch+arg_4] +
mov eax [esp+1Ch+arg_C] +
mov esi [esp+1Ch+arg_8] +
mov edi [esp+1Ch+arg_0] +
test ebx ebx +
mov ebp ebx +
mov edx eax +
mov [esp+1Ch+var_1C] 0 +
js loc_4BB420  +
test edx edx +
mov ecx esi +
mov ebx eax +
js loc_4BB413  +
mov edx ebx +
mov eax edi +
test edx edx +
mov esi ebp +
mov [esp+1Ch+var_18] ecx +
mov ebx edi +
mov [esp+1Ch+var_14] ebp +
jnz loc_4BB3B0  +
cmp ecx ebp +
jbe loc_4BB3F6  +
mov edx ebp +
div  ecx +
mov esi edx +
mov eax esi +
xor edx edx +
jmp loc_4BB3B8  +
cmp edx ebp +
jbe loc_4BB3D0  +
mov eax edi +
mov edx ebp +
mov ecx [esp+1Ch+var_1C] +
test ecx ecx +
jz loc_4BB3C6  +
neg eax  +
adc edx 0 +
neg edx  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
bsr edi edx +
mov [esp+1Ch+var_10] edi +
xor [esp+1Ch+var_10] 1Fh +
jnz loc_4BB433  +
cmp ecx eax +
jbe loc_4BB4C0  +
cmp edx ebp +
jb loc_4BB4C0  +
mov eax ebx +
mov edx [esp+1Ch+var_14] +
jmp loc_4BB3B8  +
test ecx ecx +
jnz loc_4BB405  +
mov eax 1 +
xor edx edx +
div  ecx +
mov ecx eax +
mov eax esi +
xor edx edx +
div  ecx +
mov eax ebx +
div  ecx +
mov esi edx +
jmp loc_4BB3A4  +
neg ecx  +
adc ebx 0 +
neg ebx  +
jmp loc_4BB386  +
neg edi  +
adc ebp 0 +
neg ebp  +
mov [esp+1Ch+var_1C] 0FFFFFFFFh +
jmp loc_4BB37A  +
mov ebp [esp+1Ch+var_10] +
mov edi 20h +
sub edi ebp +
mov ecx ebp +
mov ebp [esp+1Ch+var_18] +
shl edx cl +
mov ecx edi +
mov ebx ebp +
shr ebx cl +
mov [esp+1Ch+var_18] ebx +
mov ebx ebp +
mov ebp [esp+1Ch+var_10] +
or [esp+1Ch+var_18] edx +
mov edx esi +
mov ecx ebp +
shl ebx cl +
mov ecx edi +
shr edx cl +
mov ecx ebp +
shl esi cl +
mov ecx edi +
mov [esp+1Ch+var_14] ebx +
mov ebx edx +
mov edx eax +
shr edx cl +
mov ecx ebp +
or edx esi +
shl eax cl +
mov ebp eax +
mov eax edx +
mov edx ebx +
div  [esp+1Ch+var_18] +
mov ebx edx +
mul  [esp+1Ch+var_14] +
cmp ebx edx +
mov esi eax +
mov ecx edx +
jb loc_4BB4D4  +
cmp ebp eax +
jb loc_4BB4D0  +
mov eax ebp +
mov ebp [esp+1Ch+var_10] +
sub eax esi +
sbb ebx ecx +
mov ecx ebp +
shr eax cl +
mov ecx edi +
mov esi eax +
mov eax ebx +
shl eax cl +
mov ecx ebp +
or esi eax +
shr ebx cl +
mov eax esi +
mov edx ebx +
jmp loc_4BB3B8  +
mov eax esi +
sub ebx ecx +
sbb eax edx +
mov [esp+1Ch+var_14] eax +
jmp loc_4BB3EE  +
cmp ebx edx +
jnz loc_4BB496  +
mov ecx edx +
mov esi eax +
sub esi [esp+1Ch+var_14] +
sbb ecx [esp+1Ch+var_18] +
jmp loc_4BB496  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov esi [esp+1Ch+arg_4] +
lea edi [esp+1Ch+arg_8] +
mov [esp+1Ch+var_10] edi +
mov [esp+1Ch+var_18] 0 +
mov [esp+1Ch+var_1C] 0 +
mov [esp+1Ch+var_14] esi +
call _vsnprintf  +
test eax eax +
mov ebx eax +
js loc_4BB574  +
lea ebp [eax+1] +
mov [esp+1Ch+var_1C] ebp +
call malloc  +
mov edx [esp+1Ch+arg_0] +
test eax eax +
mov [edx] eax +
jz loc_4BB580  +
mov [esp+1Ch+var_10] edi +
mov [esp+1Ch+var_14] esi +
mov [esp+1Ch+var_18] ebp +
mov [esp+1Ch+var_1C] eax +
call _vsnprintf  +
mov eax [esp+1Ch+arg_0] +
mov eax [eax] +
mov byte ptr [eax+ebx] 0 +
add esp 1Ch +
mov eax ebx +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov ebx 0FFFFFFFFh +
jmp loc_4BB574  +
***
mov edx [esp+arg_0] +
test ecx ecx +
jz loc_4BB5B8  +
cmp byte ptr [edx] 0 +
mov ebx edx +
jnz loc_4BB5AB  +
jmp loc_4BB5B8  +
cmp byte ptr [edx] 0 +
jz loc_4BB5B6  +
add edx 1 +
mov eax edx +
sub eax ebx +
cmp eax ecx +
jb loc_4BB5A6  +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push ebx  +
sub esp 12Ch +
mov ebx [ebp+arg_0] +
call _errno  +
test ebx ebx +
mov dword ptr [eax] 0 +
jz loc_4BB76E  +
cmp byte ptr [ebx] 0 +
jz loc_4BB738  +
mov [esp+138h+var_138] ebx +
call ds:GetFileAttributesA  +
sub esp 4 +
cmp eax 0FFFFFFFFh +
jz loc_4BB750  +
test al 10h +
jz loc_4BB738  +
lea edi [ebp+var_11C] +
mov [esp+138h+var_134] ebx +
mov ebx edi +
mov [esp+138h+var_130] 104h +
mov [esp+138h+var_138] edi +
call _fullpath  +
mov edx [ebx] +
add ebx 4 +
lea eax [edx-1010101h] +
not edx  +
and eax edx +
and eax 80808080h +
jz loc_4BB624  +
mov edx eax +
shr edx 10h +
test eax 8080h +
cmovz eax edx +
lea edx [ebx+2] +
cmovz ebx edx +
add al al +
sbb ebx 3 +
sub ebx edi +
lea eax [ebx+233h] +
mov [esp+138h+var_138] eax +
call malloc  +
test eax eax +
mov esi eax +
jz loc_4BB75F  +
lea edx [eax+22Ch] +
lea eax [ebx+1] +
mov [esp+138h+var_138] edx +
mov [esp+138h+var_130] eax +
mov [esp+138h+var_134] edi +
mov [ebp+var_12C] edx +
call memcpy  +
mov edx [ebp+var_12C] +
cmp byte ptr [esi+22Ch] 0 +
jz loc_4BB6B3  +
movzx eax byte ptr [esi+ebx+22Bh] +
cmp al 2Fh +
jz loc_4BB6B3  +
cmp al 5Ch +
jz loc_4BB6B3  +
mov edi 5Ch +
mov [edx+ebx] di +
mov eax edx +
mov ecx [eax] +
add eax 4 +
lea edx [ecx-1010101h] +
not ecx  +
and edx ecx +
and edx 80808080h +
jz loc_4BB6B5  +
mov ecx edx +
shr ecx 10h +
test edx 8080h +
cmovz edx ecx +
lea ecx [eax+2] +
cmovz eax ecx +
add dl dl +
sbb eax 3 +
mov edx 2Ah +
mov [eax] dx +
xor ecx ecx +
xor eax eax +
lea edx [esi+120h] +
xor ebx ebx +
mov [esi+11Ch] cx +
mov edi edx +
mov ecx 41h +
mov dword ptr [esi+224h] 0FFFFFFFFh +
mov dword ptr [esi+228h] 0 +
mov dword ptr [esi+118h] 0 +
mov [esi+11Eh] bx +
stos   +
mov eax esi +
lea esp [ebp-0Ch] +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call _errno  +
mov dword ptr [eax] 14h +
lea esp [ebp-0Ch] +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
call _errno  +
mov dword ptr [eax] 2 +
xor eax eax +
jmp loc_4BB730  +
call _errno  +
mov dword ptr [eax] 0Ch +
xor eax eax +
jmp loc_4BB730  +
call _errno  +
mov dword ptr [eax] 0Eh +
xor eax eax +
jmp loc_4BB730  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
call _errno  +
test ebx ebx +
mov dword ptr [eax] 0 +
jz loc_4BB882  +
mov eax [ebx+228h] +
test eax eax +
js loc_4BB86D  +
jz loc_4BB810  +
mov eax [ebx+224h] +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] eax +
call _findnext  +
test eax eax +
jnz loc_4BB840  +
mov eax [ebx+228h] +
add eax 1 +
test eax eax +
mov [ebx+228h] eax +
jle loc_4BB86D  +
lea esi [ebx+14h] +
mov [esp+14h+var_14] esi +
call strlen  +
mov [ebx+11Eh] ax +
lea eax [ebx+120h] +
mov [esp+14h+var_10] esi +
mov [esp+14h+var_14] eax +
call strcpy  +
lea eax [ebx+118h] +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
lea eax [ebx+22Ch] +
mov [esp+14h+var_10] ebx +
mov [esp+14h+var_14] eax +
call _findfirst  +
cmp eax 0FFFFFFFFh +
mov [ebx+224h] eax +
jz loc_4BB863  +
mov dword ptr [ebx+228h] 1 +
jmp loc_4BB7D9  +
call ds:GetLastError  +
cmp eax 12h +
jz loc_4BB875  +
mov eax [ebx+224h] +
mov [esp+14h+var_14] eax +
call _findclose  +
mov dword ptr [ebx+224h] 0FFFFFFFFh +
mov dword ptr [ebx+228h] 0FFFFFFFFh +
add esp 14h +
xor eax eax +
pop ebx  +
pop esi  +
retn   +
call _errno  +
mov dword ptr [eax] 0 +
jmp loc_4BB84B  +
call _errno  +
mov dword ptr [eax] 0Eh +
xor eax eax +
jmp loc_4BB803  +
***
sub esp 14h +
mov ebx [esp+14h+arg_0] +
call _errno  +
test ebx ebx +
mov dword ptr [eax] 0 +
jz loc_4BB8DF  +
mov eax [ebx+224h] +
xor esi esi +
cmp eax 0FFFFFFFFh +
jz loc_4BB8CF  +
mov [esp+14h+var_14] eax +
call _findclose  +
mov esi eax +
mov [esp+14h+var_14] ebx +
call free  +
mov eax esi +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
call _errno  +
mov dword ptr [eax] 0Eh +
mov eax 0FFFFFFFFh +
jmp loc_4BB8D9  +
***
jmp sub_4BB900  +
***
mov ebx [esp+18h+arg_0] +
call _errno  +
test ebx ebx +
mov dword ptr [eax] 0 +
jz loc_4BB943  +
mov eax [ebx+224h] +
cmp eax 0FFFFFFFFh +
jz loc_4BB92A  +
mov [esp+18h+var_18] eax +
call _findclose  +
mov dword ptr [ebx+224h] 0FFFFFFFFh +
mov dword ptr [ebx+228h] 0 +
add esp 18h +
pop ebx  +
retn   +
call _errno  +
mov dword ptr [eax] 0Eh +
jmp loc_4BB93E  +
***
push ebx  +
sub esp 8 +
mov ebx [esp+10h] +
call _errno  +
test ebx ebx +
mov dword ptr [eax] 0 +
jz loc_4BB972  +
mov eax [ebx+228h] +
add esp 8 +
pop ebx  +
retn   +
***
call _errno  +
mov dword ptr [eax] 0Eh +
mov eax 0FFFFFFFFh +
jmp loc_4BB96D  +
***
push esi  +
push ebx  +
sub esp 14h +
mov ebx [esp+20h] +
mov esi [esp+24h] +
call _errno  +
test ebx ebx +
mov dword ptr [eax] 0 +
jz loc_4BBA1D  +
cmp esi 0FFFFFFFFh +
jl loc_4BBA10  +
jz loc_4BB9E0  +
mov [esp] ebx +
call sub_4BB900  +
nop   +
lea esi [esi+0] +
jmp loc_4BB9CE  +
mov [esp] ebx +
call sub_4BB780  +
test eax eax +
jz loc_4BBA07  +
cmp esi [ebx+228h] +
jg loc_4BB9C2  +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
mov eax [ebx+224h] +
cmp eax 0FFFFFFFFh +
jz loc_4BB9F3  +
mov [esp] eax +
call _findclose  +
mov dword ptr [ebx+224h] 0FFFFFFFFh +
mov dword ptr [ebx+228h] 0FFFFFFFFh +
add esp 14h +
pop ebx  +
pop esi  +
retn   +
***
call _errno  +
mov dword ptr [eax] 16h +
jmp loc_4BBA07  +
***
call _errno  +
mov dword ptr [eax] 0Eh +
jmp loc_4BBA07  +
***
sub esp 2Ch +
lea eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+arg_0] +
mov [esp+2Ch+var_2C] eax +
call fgetpos  +
test eax eax +
jnz loc_4BBA57  +
mov eax [esp+2Ch+var_14] +
mov edx [esp+2Ch+var_10] +
add esp 2Ch +
retn   +
mov eax 0FFFFFFFFh +
mov edx 0FFFFFFFFh +
jmp loc_4BBA53  +
***
push esi  +
push ebx  +
sub esp 1Ch +
mov ebp [esp+1Ch+arg_0] +
mov eax [ebp+0Ch] +
mov ebx [ebp+8] +
mov edx eax +
and edx 3 +
cmp edx 2 +
jz loc_4BBAA0  +
xor eax eax +
mov [ebp+0] ebx +
mov dword ptr [ebp+4] 0 +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
test eax 108h +
jz loc_4BBA8B  +
mov edx [ebp+0] +
sub edx ebx +
mov edi edx +
sar edi 1Fh +
cmp edi 0 +
jl loc_4BBA8B  +
jle loc_4BBB00  +
mov [esp+1Ch+var_1C] ebp +
mov [esp+1Ch+var_10] edx +
call _fileno  +
mov edx [esp+1Ch+var_10] +
mov [esp+1Ch+var_18] ebx +
mov [esp+1Ch+var_14] edx +
mov [esp+1Ch+var_1C] eax +
call _write  +
mov edx [esp+1Ch+var_10] +
mov ebx eax +
xor edx eax +
sar ebx 1Fh +
mov ecx ebx +
xor ecx edi +
or ecx edx +
jnz loc_4BBB07  +
mov eax [ebp+0Ch] +
test al 80h +
jz loc_4BBAF8  +
and eax 0FFFFFFFDh +
mov [ebp+0Ch] eax +
mov ebx [ebp+8] +
xor eax eax +
jmp loc_4BBA8D  +
cmp edx 0 +
jbe loc_4BBA8B  +
jmp loc_4BBAB8  +
or dword ptr [ebp+0Ch] 20h +
mov eax 0FFFFFFFFh +
mov ebx [ebp+8] +
jmp loc_4BBA8D  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov eax [esp+2Ch+arg_C] +
mov ebx [esp+2Ch+arg_0] +
mov esi [esp+2Ch+arg_4] +
mov edi [esp+2Ch+arg_8] +
cmp eax 1 +
jz loc_4BBB65  +
cmp eax 2 +
jz loc_4BBB83  +
test eax eax +
jnz loc_4BBBB0  +
mov [esp+2Ch+var_14] esi +
lea ebp [esp+2Ch+var_14] +
mov [esp+2Ch+var_10] edi +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] ebx +
call fsetpos  +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
lea ebp [esp+2Ch+var_14] +
mov [esp+2Ch+var_28] ebp +
mov [esp+2Ch+var_2C] ebx +
call fgetpos  +
test eax eax +
jnz loc_4BBBC2  +
add [esp+2Ch+var_14] esi +
adc [esp+2Ch+var_10] edi +
jmp loc_4BBB51  +
mov [esp+2Ch+var_2C] ebx +
lea ebp [esp+2Ch+var_14] +
call fflush  +
mov [esp+2Ch+var_2C] ebx +
call _fileno  +
mov [esp+2Ch+var_2C] eax +
call _filelengthi64  +
add eax esi +
adc edx edi +
mov [esp+2Ch+var_14] eax +
mov [esp+2Ch+var_10] edx +
jmp loc_4BBB51  +
call _errno  +
mov dword ptr [eax] 16h +
mov eax 0FFFFFFFFh +
jmp loc_4BBB5D  +
mov eax 0FFFFFFFFh +
jmp loc_4BBB5D  +
***
push esi  +
push ebx  +
sub esp 2Ch +
mov ebx [esp+2Ch+arg_0] +
call _errno  +
mov dword ptr [eax] 0 +
mov [esp+2Ch+var_2C] ebx +
call _fileno  +
mov [esp+2Ch+var_14] eax +
mov eax [ebx+4] +
test eax eax +
js loc_4BBD40  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_20] 1 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_2C] eax +
call _lseeki64  +
test edx edx +
mov [esp+2Ch+var_1C] eax +
mov [esp+2Ch+var_18] edx +
js loc_4BBD81  +
mov edx [ebx+0Ch] +
test edx 108h +
jz loc_4BBD20  +
mov ecx [ebx] +
mov eax [ebx+8] +
mov esi ecx +
sub esi eax +
test dl 3 +
mov [esp+2Ch+var_10] esi +
jnz loc_4BBCC7  +
test dl 80h +
jz loc_4BBE52  +
mov esi [esp+2Ch+var_10] +
mov ebp [esp+2Ch+var_18] +
mov edi [esp+2Ch+var_1C] +
mov eax ebp +
or eax edi +
jz loc_4BBD50  +
and edx 1 +
jz loc_4BBD60  +
mov edi [ebx+4] +
test edi edi +
jz loc_4BBD74  +
mov eax [esp+2Ch+var_14] +
add edi [esp+2Ch+var_10] +
mov ecx eax +
and eax 1Fh +
lea eax [eax+eax*4] +
shl eax 3 +
mov edx eax +
mov ebp eax +
mov eax ds:__pioinfo +
sar ecx 5 +
mov eax [eax+ecx*4] +
cmp byte ptr [eax+edx+4] 0 +
js loc_4BBD90  +
mov ecx edi +
xor ebx ebx +
mov eax esi +
xor edx edx +
sub [esp+2Ch+var_1C] ecx +
sbb [esp+2Ch+var_18] ebx +
jmp loc_4BBD64  +
mov esi [esp+2Ch+var_14] +
mov edi esi +
and esi 1Fh +
sar edi 5 +
mov ebp edi +
lea edi [esi+esi*4] +
mov esi ds:__pioinfo +
shl edi 3 +
add edi [esi+ebp*4] +
mov esi [esp+2Ch+var_10] +
cmp byte ptr [edi+4] 0 +
jns loc_4BBC5F  +
cmp ecx eax +
jbe loc_4BBC5B  +
mov ebp [esp+2Ch+var_14] +
mov edi ecx +
xor ecx ecx +
cmp byte ptr [eax] 0Ah +
setz cl  +
add eax 1 +
add esi ecx +
cmp eax edi +
jnz loc_4BBD00  +
mov [esp+2Ch+var_14] ebp +
jmp loc_4BBC5F  +
mov eax [ebx+4] +
mov edi [esp+2Ch+var_1C] +
mov ebp [esp+2Ch+var_18] +
cdq   +
sub edi eax +
sbb ebp edx +
mov eax edi +
mov edx ebp +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov dword ptr [ebx+4] 0 +
jmp loc_4BBBFD  +
add esp 2Ch +
mov eax esi +
pop ebx  +
xor edx edx +
pop esi  +
pop edi  +
pop ebp  +
retn   +
mov eax esi +
xor edx edx +
add eax [esp+2Ch+var_1C] +
adc edx [esp+2Ch+var_18] +
add esp 2Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
xor edx edx +
xor ecx ecx +
xor ebx ebx +
jmp loc_4BBCBA  +
mov eax 0FFFFFFFFh +
mov edx 0FFFFFFFFh +
jmp loc_4BBD34  +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_20] 2 +
mov [esp+2Ch+var_28] 0 +
mov [esp+2Ch+var_24] 0 +
mov [esp+2Ch+var_2C] eax +
mov [esp+2Ch+var_10] ecx +
call _lseeki64  +
mov ecx [esp+2Ch+var_10] +
xor edx [esp+2Ch+var_18] +
xor eax [esp+2Ch+var_1C] +
or edx eax +
jnz loc_4BBDF5  +
mov eax [ebx+8] +
lea ecx [eax+edi] +
cmp eax ecx +
jnb loc_4BBDE3  +
xor edx edx +
cmp byte ptr [eax] 0Ah +
setz dl  +
add eax 1 +
add edi edx +
cmp eax ecx +
jnz loc_4BBDD2  +
test byte ptr [ebx+0Dh] 20h +
jz loc_4BBCB2  +
add edi 1 +
jmp loc_4BBCB2  +
mov eax [esp+2Ch+var_1C] +
mov edx [esp+2Ch+var_18] +
mov [esp+2Ch+var_20] 0 +
mov [esp+2Ch+var_10] ecx +
mov [esp+2Ch+var_28] eax +
mov eax [esp+2Ch+var_14] +
mov [esp+2Ch+var_24] edx +
mov [esp+2Ch+var_2C] eax +
call _lseeki64  +
cmp edi 200h +
mov ecx [esp+2Ch+var_10] +
ja loc_4BBE3B  +
mov eax [ebx+0Ch] +
mov edi 200h +
and eax 408h +
cmp eax 8 +
jz loc_4BBE3E  +
mov edi [ebx+18h] +
mov eax ds:__pioinfo +
mov eax [eax+ecx*4] +
test byte ptr [eax+ebp+4] 4 +
jnz loc_4BBDED  +
jmp loc_4BBCB2  +
call _errno  +
mov edx 0FFFFFFFFh +
mov dword ptr [eax] 16h +
mov eax 0FFFFFFFFh +
jmp loc_4BBD34  +
***
push ebp  +
push edi  +
push esi  +
push ebx  +
sub esp 1Ch +
mov ebx [esp+30h] +
mov esi [esp+34h] +
mov edi [esp+38h] +
mov ebp [esp+3Ch] +
call _errno  +
test ebx ebx +
mov dword ptr [eax] 0 +
jz loc_4BBF12  +
cmp ebp 2 +
ja loc_4BBF12  +
and dword ptr [ebx+0Ch] 0FFFFFFEFh +
cmp ebp 1 +
jz loc_4BBF01  +
mov [esp] ebx +
call sub_4BBA70  +
mov eax [ebx+0Ch] +
test al 80h +
jnz loc_4BBEF0  +
and eax 409h +
cmp eax 9 +
jz loc_4BBEF8  +
mov [esp] ebx +
call _fileno  +
mov [esp+0Ch] ebp +
mov [esp+4] esi +
mov [esp+8] edi +
mov [esp] eax +
call _lseeki64  +
and eax edx +
cmp eax 0FFFFFFFFh +
setz al  +
movzx eax al +
neg eax  +
add esp 1Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
and eax 0FFFFFFFCh +
mov [ebx+0Ch] eax +
jmp loc_4BBEBD  +
***
mov dword ptr [ebx+18h] 200h +
jmp loc_4BBEBD  +
***
mov [esp] ebx +
call sub_4BBBD0  +
add esi eax +
adc edi edx +
xor bp bp +
jmp loc_4BBEA4  +
***
call _errno  +
mov dword ptr [eax] 16h +
mov eax 0FFFFFFFFh +
jmp loc_4BBEE6  +
***
push esi  +
push ebx  +
xor ebx ebx +
sub esp 4 +
mov esi [esp+10h] +
call __doserrno  +
mov [eax] esi +
jmp loc_4BBF51  +
add ebx 1 +
cmp ds:dword_50D6C4[ebx*8] 0FFFFFFFFh +
jz loc_4BBF70  +
cmp ds:dword_50D6C0[ebx*8] esi +
jnz loc_4BBF44  +
call _errno  +
mov edx ds:dword_50D6C4[ebx*8] +
mov [eax] edx +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
lea eax [esi-13h] +
cmp eax 11h +
jbe loc_4BBFA5  +
sub esi 0BCh +
cmp esi 0Eh +
jbe loc_4BBF94  +
call _errno  +
mov dword ptr [eax] 16h +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
call _errno  +
mov dword ptr [eax] 8 +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
call _errno  +
mov dword ptr [eax] 0Dh +
add esp 4 +
pop ebx  +
pop esi  +
retn   +
***
retn   +
***
mov eax [esp+arg_0] +
xchg eax ds:dword_5146A4 +
retn   +
***
jmp ds:__setusermatherr  +
***
push esi  +
mov ebx eax +
sub esp 1Ch +
push esi  +
sub esp 14h +
sub esp 1Ch +
call sub_4BC678  +
cmp eax 0FFFFFFFFh +
jz loc_4BC737  +
cmp eax 2Ah +
jz loc_4BC737  +
cmp eax 0Ah +
jnz loc_4BC71B  +
inc dword_4BE008  +
jmp loc_4BC71B  +
cmp eax 2Ah +
jnz loc_4BC74B  +
call sub_4BC678  +
cmp eax 2Ah +
jz loc_4BC73C  +
cmp eax 2Fh +
jz loc_4BC75F  +
cmp eax 0Ah +
jz loc_4BC72F  +
inc eax  +
jnz loc_4BC71B  +
mov [esp+1Ch+var_1C] offset aFPEofInComment +
call sub_418450  +
add esp 1Ch +
retn   +
***
push edi  +
push esi  +
push ebx  +
and esp 0FFFFFFF0h +
sub esp 40h +
call sub_4BA980  +
call sub_4A8DF0  +
mov [esp+4Ch+var_48] offset unk_4D28AE +
mov [esp+4Ch+var_4C] 2 +
mov [esp+4Ch+var_34] eax +
call setlocale  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [esp+4Ch+var_4C] eax +
mov ds:dword_51478C eax +
call sub_4A0590  +
lea eax [ebp+arg_4] +
mov [esp+4Ch+var_48] eax +
lea eax [ebp+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_4A91D0  +
call nullsub_1  +
mov eax ds:dword_51478C +
mov [esp+4Ch+var_4C] eax +
call sub_44B9E0  +
mov [esp+4Ch+var_4C] offset sub_412C80 +
call sub_44BA00  +
mov [esp+4Ch+var_4C] offset sub_4131D0 +
mov ds:dword_50F41C eax +
call sub_4A9520  +
mov eax [ebp+arg_0] +
mov ebx [ebp+arg_4] +
cmp eax 1 +
mov [esp+4Ch+var_24] eax +
jle loc_4BC841  +
mov eax 1 +
mov [esp+4Ch+var_20] ebx +
jmp loc_4BC819  +
add eax 1 +
cmp eax [esp+4Ch+var_24] +
jz loc_4BC841  +
mov edi [esp+4Ch+var_20] +
mov ecx 0Ah +
mov edx [edi+eax*4] +
mov edi offset aSysroot +
mov esi edx +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov ebx esi +
cmp bl cl +
jnz loc_4BC810  +
add edx 0Ah +
jmp loc_4BC846  +
mov edx offset unk_4D28AE +
mov ds:dword_514804 edx +
cmp byte ptr [edx] 0 +
jnz loc_4BCD36  +
mov eax ds:dword_5147FC +
test eax eax +
jz loc_4BD0E3  +
mov [esp+4Ch+var_4C] eax +
call strlen  +
mov ds:dword_514790 eax +
mov [esp+4Ch+var_4C] offset aAvrUnknownNone +
call sub_44CEA0  +
test eax eax +
jnz loc_4BC89F  +
mov [esp+4Ch+var_48] offset aAvrUnknownNone +
mov [esp+4Ch+var_4C] offset aXPCanTSetBfdDe +
call sub_418450  +
mov [esp+4Ch+var_4C] 1 +
call sub_4A7250  +
mov [esp+4Ch+var_4C] offset aCollect_no_dem +
mov ds:dword_51472C 1 +
mov ds:byte_514768 3Ah +
mov ds:dword_514774 0FFFFFFFFh +
mov ds:dword_514778 0FFFFFFFFh +
mov ds:dword_514724 1 +
mov ds:dword_514720 1 +
mov ds:dword_514750 1 +
mov ds:dword_514834 0FFFFFFFFh +
mov ds:dword_5147B4 1 +
mov ds:dword_5147B8 1 +
mov ds:byte_5147BC 0FFh +
call getenv  +
mov [esp+4Ch+var_4C] offset unk_4D28AE +
mov ds:dword_514838 offset off_4BE060 +
mov ds:dword_514858 offset dword_514854 +
mov ds:dword_514868 offset a_init +
mov ds:dword_51486C offset a_fini +
test eax eax +
setz al  +
movzx eax al +
mov ds:dword_514794 eax +
movzx eax ds:byte_514824 +
or ds:byte_514822 40h +
or byte ptr ds:word_514820+1 2 +
or ds:byte_514823 20h +
or eax 0FFFFFF82h +
mov ds:byte_514824 al +
mov ds:dword_514870 1 +
mov ds:dword_514878 0FFFFFFFFh +
mov ds:dword_51487C 0FFFFFFFFh +
mov ds:dword_514884 5 +
mov ds:byte_514829 3Ah +
call sub_419120  +
mov eax [ebp+arg_4] +
mov [esp+4Ch+var_4C] offset aLdemulation +
mov [esp+4Ch+var_20] eax +
mov eax [ebp+arg_0] +
mov edi eax +
mov [esp+4Ch+var_28] eax +
call getenv  +
test eax eax +
mov edx eax +
mov eax offset aAvr2 +
cmovnz eax edx +
cmp edi 1 +
mov [esp+4Ch+var_2C] eax +
jle loc_4BCBA0  +
mov eax edi +
mov edx 1 +
sub eax 1 +
mov ebx edx +
mov [esp+4Ch+var_30] eax +
jmp loc_4BCA1D  +
cmp [esp+4Ch+var_30] ebx +
jle loc_4BCD25  +
mov eax [esp+4Ch+var_20] +
add ebx 1 +
mov edx [esp+4Ch+var_24] +
mov eax [eax+edx+4] +
mov [esp+4Ch+var_2C] eax +
lea esi [esi+0] +
add ebx 1 +
cmp [esp+4Ch+var_28] ebx +
jle loc_4BCBA0  +
lea eax ds:0[ebx*4] +
mov ecx 2 +
mov [esp+4Ch+var_24] eax +
mov eax [esp+4Ch+var_20] +
mov edi offset aM +
mov edx [eax+ebx*4] +
mov esi edx +
cmps   +
setnbe cl  +
mov esi ecx +
setb cl  +
mov eax esi +
cmp al cl +
jnz loc_4BCA10  +
cmp byte ptr [edx+2] 0 +
jz loc_4BC9F0  +
mov edi offset aMips1 +
mov ecx 7 +
mov esi edx +
cmps   +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips2 +
mov [esp+4Ch+var_24] edx +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips3 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips4 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips5 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips32 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips32r2 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips32r6 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips64 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips64r2 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aMips64r6 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
test eax eax +
jz loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
mov [esp+4Ch+var_48] offset aM486 +
call strcmp  +
mov edx [esp+4Ch+var_24] +
add edx 2 +
test eax eax +
cmovz edx [esp+4Ch+var_2C] +
mov [esp+4Ch+var_2C] edx +
jmp loc_4BCA10  +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_4C] eax +
call sub_417870  +
mov eax [ebp+arg_4] +
mov [esp+4Ch+var_48] eax +
mov eax [ebp+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_417640  +
mov [esp+4Ch+var_4C] eax +
mov ds:dword_51479C eax +
call sub_44C4B0  +
mov ds:dword_514784 eax +
mov eax ds:dword_51479C +
mov [esp+4Ch+var_4C] eax +
call sub_44C550  +
mov ds:dword_514788 eax +
call sub_40C1E0  +
call sub_4173F0  +
call sub_4174B0  +
mov eax [ebp+arg_4] +
mov ds:dword_50F270 0 +
mov [esp+4Ch+var_48] eax +
mov eax [ebp+arg_0] +
mov [esp+4Ch+var_4C] eax +
call sub_405F20  +
mov eax ds:dword_514780 +
test eax eax +
jnz loc_4BCE89  +
call sub_41B310  +
call sub_417510  +
cmp ds:dword_50F40C 0 +
jz loc_4BD036  +
cmp ds:dword_514798 0 +
jz loc_4BCCE2  +
cmp ds:dword_50F40C 0 +
jz loc_4BD1D1  +
mov [esp+4Ch+var_4C] offset aUsingExternalL +
call sub_418420  +
mov [esp+4Ch+var_4C] offset asc_4D2A04 +
call sub_418420  +
cmp ds:dword_50F40C 0 +
jz loc_4BD1E2  +
mov [esp+4Ch+var_4C] 2001h +
call sub_4A05F0  +
mov ebx eax +
mov eax ds:dword_50F40C +
mov [esp+4Ch+var_4C] eax +
call rewind  +
jmp loc_4BCC9C  +
mov byte ptr [ebx+eax] 0 +
mov [esp+4Ch+var_4C] ebx +
call sub_418420  +
mov eax ds:dword_50F40C +
mov [esp+4Ch+var_44] 2000h +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_40] eax +
call fread  +
test eax eax +
jnz loc_4BCC90  +
mov eax ds:dword_50F40C +
mov [esp+4Ch+var_4C] eax +
call rewind  +
mov [esp+4Ch+var_4C] ebx +
call free  +
mov [esp+4Ch+var_4C] offset asc_4D2A04 +
call sub_418420  +
cmp ds:dword_5147C4 0 +
jnz loc_4BCE6F  +
call sub_40E9F0  +
cmp [ebp+arg_0] 2 +
jz loc_4BCE96  +
cmp ds:dword_50F270 0 +
jnz loc_4BCD54  +
cmp ds:dword_5148A0 0 +
jnz loc_4BCD19  +
cmp ds:dword_5147C4 0 +
jz loc_4BCD48  +
mov [esp+4Ch+var_4C] 0 +
call sub_4A7250  +
mov [esp+4Ch+var_4C] offset aPFMissingArg_0 +
call sub_418450  +
jmp loc_4BCA10  +
mov [esp+4Ch+var_4C] edx +
call sub_4A95A0  +
mov ds:dword_5147FC eax +
jmp loc_4BC855  +
mov [esp+4Ch+var_4C] offset aPFNoInputFiles +
call sub_418450  +
cmp ds:dword_514800 0 +
jnz loc_4BD01D  +
call sub_4174A0  +
mov ebx ds:dword_51476C +
test ebx ebx +
jz loc_4BCD95  +
mov [esp+4Ch+var_48] offset aW +
mov [esp+4Ch+var_4C] ebx +
call strcmp  +
test eax eax +
jnz loc_4BD0A0  +
mov eax ds:_iob +
add eax 20h +
mov ds:dword_514770 eax +
call sub_4105C0  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
mov eax ds:dword_514850 +
jz loc_4BD0F2  +
or dword ptr [eax+28h] 40h +
mov eax ds:dword_51482C +
test al 1 +
jz loc_4BCDEE  +
mov esi ds:dword_514850 +
mov edx [esi+28h] +
mov ecx edx +
and edx 0FF80001Fh +
shr ecx 5 +
and ecx 3FFFFh +
mov ebx ecx +
or bh 40h +
shl ebx 5 +
or edx ebx +
cmp eax 5 +
mov [esi+28h] edx +
jz loc_4BD178  +
call sub_414680  +
cmp ds:dword_514770 0 +
jz loc_4BCE01  +
call sub_40C910  +
cmp ds:dword_5147B0 0 +
jz loc_4BCE1F  +
mov eax ds:dword_514770 +
test eax eax +
jz loc_4BD22E  +
mov [esp+4Ch+var_4C] eax +
call sub_419BB0  +
cmp ds:dword_5146F4 0 +
jz loc_4BCE2D  +
call sub_419F20  +
cmp ds:dword_5147C8 0 +
jnz loc_4BD013  +
call sub_417460  +
call sub_40B140  +
cmp ds:dword_514724 0 +
jnz loc_4BCEA8  +
cmp ds:dword_50F404 0 +
jnz loc_4BCEA8  +
cmp ds:dword_514800 0 +
jnz loc_4BD214  +
mov [esp+4Ch+var_4C] 1 +
call sub_4A7250  +
call sub_40D1F0  +
mov [esp+4Ch+var_4C] offset aS_18 +
mov [esp+4Ch+var_48] eax +
call sub_418420  +
jmp loc_4BCCEF  +
mov [esp+4Ch+var_4C] eax +
call sub_44E550  +
jmp loc_4BCC1A  +
cmp ds:dword_5148A0 0 +
jz loc_4BCCFE  +
jmp loc_4BCD19  +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_4C] eax +
call sub_4586F0  +
test eax eax +
jz loc_4BD0FB  +
movzx eax byte ptr ds:word_514820 +
and eax 3 +
cmp al 2 +
jz loc_4BCFF7  +
cmp ds:dword_5147AC 0 +
jz loc_4BCFF7  +
mov edx off_4BE0A0 +
xor eax eax +
or ecx 0FFFFFFFFh +
mov edi edx +
scas   +
not ecx  +
lea esi [ecx-1] +
cmp esi 3 +
jg loc_4BD191  +
mov [esp+4Ch+var_4C] 1000h +
add esi 5 +
call sub_4A05F0  +
mov [esp+4Ch+var_4C] esi +
mov ebx eax +
call sub_4A05F0  +
mov esi off_4BE0A0 +
mov [esp+4Ch+var_48] esi +
mov edi eax +
mov [esp+4Ch+var_4C] eax +
call strcpy  +
xor eax eax +
or ecx 0FFFFFFFFh +
mov [esp+4Ch+var_24] edi +
mov edx edi +
scas   +
mov edi edx +
not ecx  +
lea eax [edx+ecx-1] +
mov dword ptr [eax] 6578652Eh +
mov byte ptr [eax+4] 0 +
mov [esp+4Ch+var_4C] esi +
mov [esp+4Ch+var_48] offset aRb_0 +
call fopen  +
mov [esp+4Ch+var_48] offset aWb +
mov [esp+4Ch+var_4C] edi +
mov esi eax +
call fopen  +
test esi esi +
mov [esp+4Ch+var_20] eax +
jz loc_4BD28F  +
cmp [esp+4Ch+var_20] 0 +
jnz loc_4BCFA4  +
jmp loc_4BD276  +
mov eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_44] edi +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] ebx +
mov [esp+4Ch+var_40] eax +
call fwrite  +
cmp eax edi +
jnz loc_4BD1FB  +
mov [esp+4Ch+var_40] esi +
mov [esp+4Ch+var_44] 1000h +
mov [esp+4Ch+var_48] 1 +
mov [esp+4Ch+var_4C] ebx +
call fread  +
test eax eax +
mov edi eax +
jg loc_4BCF80  +
mov [esp+4Ch+var_4C] esi +
call fclose  +
mov eax [esp+4Ch+var_20] +
mov [esp+4Ch+var_4C] eax +
call fclose  +
add eax 1 +
jz loc_4BD25D  +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] eax +
call free  +
mov [esp+4Ch+var_4C] ebx +
call free  +
cmp ds:dword_514754 0 +
jnz loc_4BD115  +
mov off_4BE0A0 0 +
jmp loc_4BCD19  +
call sub_411EE0  +
jmp loc_4BCE3A  +
mov eax [esp+4Ch+var_2C] +
mov [esp+4Ch+var_4C] offset aPModeS +
mov [esp+4Ch+var_48] eax +
call sub_418420  +
jmp loc_4BCD61  +
mov eax ds:dword_5147F4 +
test eax eax +
jz loc_4BD063  +
mov [esp+4Ch+var_4C] eax +
call sub_419100  +
mov ds:dword_5146D0 1 +
call sub_401730  +
cmp ds:dword_50F40C 0 +
jnz loc_4BCC31  +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_4C] eax +
call sub_417550  +
cmp [esp+4Ch+var_10] 0 +
jz loc_4BD23B  +
mov [esp+4Ch+var_4C] eax +
call sub_419110  +
mov ds:dword_5146D0 1 +
call sub_401730  +
mov ds:dword_50F0A0 0 +
jmp loc_4BCC31  +
mov [esp+4Ch+var_48] (offset aW+2) +
mov [esp+4Ch+var_4C] ebx +
call fopen  +
test eax eax +
mov ds:dword_514770 eax +
jnz loc_4BCD95  +
mov [esp+4Ch+var_4C] 1 +
call sub_44BAF0  +
mov eax ds:dword_51476C +
mov [esp+4Ch+var_4C] offset aPFCannotOpenMa +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_4BCD95  +
mov ds:dword_514790 0FFFFFFFFh +
jmp loc_4BC86F  +
and dword ptr [eax+28h] 0FFFFFFBFh +
jmp loc_4BCDB5  +
mov eax ds:dword_514850 +
mov [esp+4Ch+var_4C] offset aFBFinalCloseFa +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_4BCEBD  +
call sub_4A8DF0  +
mov ebx eax +
mov eax ds:_iob +
sub ebx [esp+4Ch+var_34] +
add eax 20h +
mov [esp+4Ch+var_4C] eax +
call fflush  +
mov eax ebx +
mov ecx 0F4240h +
cdq   +
idiv  ecx +
mov [esp+4Ch+var_48] offset aSTotalTimeInLi +
mov [esp+4Ch+var_40] eax +
mov eax ds:dword_51478C +
mov [esp+4Ch+var_3C] edx +
mov [esp+4Ch+var_44] eax +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fprintf  +
mov eax ds:_iob +
add eax 40h +
mov [esp+4Ch+var_4C] eax +
call fflush  +
jmp loc_4BD004  +
or ecx 24000h +
and edx 0FF80001Fh +
shl ecx 5 +
or edx ecx +
mov [esi+28h] edx +
jmp loc_4BCDEE  +
lea edi [ecx-5] +
mov ebx ds:_stricmp +
add edx edi +
mov [esp+4Ch+var_48] offset a_exe +
mov [esp+4Ch+var_4C] edx +
call ebx  +
test eax eax +
jz loc_4BCFF7  +
add edi off_4BE0A0 +
mov [esp+4Ch+var_48] offset a_dll +
mov [esp+4Ch+var_4C] edi +
call ebx  +
test eax eax +
jnz loc_4BCEF9  +
jmp loc_4BCFF7  +
mov [esp+4Ch+var_4C] offset aUsingInternalL +
call sub_418420  +
jmp loc_4BCC57  +
lea eax [esp+4Ch+var_10] +
mov [esp+4Ch+var_4C] eax +
call sub_417550  +
mov [esp+4Ch+var_4C] eax +
call sub_418420  +
jmp loc_4BCCD6  +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] offset aPErrorWritingF +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_4BCFA4  +
mov eax off_4BE0A0 +
mov [esp+4Ch+var_4C] offset aPLinkErrorsFou +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_4BCE63  +
mov eax ds:_iob +
add eax 20h +
jmp loc_4BCE17  +
mov [esp+4Ch+var_44] 1 +
mov [esp+4Ch+var_48] offset aBuiltInLinkerS +
mov [esp+4Ch+var_4C] eax +
mov ds:dword_50F0A0 eax +
call sub_405B80  +
jmp loc_4BD082  +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] offset aPErrorClosingF +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_4BCFE3  +
mov eax [esp+4Ch+var_24] +
mov [esp+4Ch+var_4C] offset aPFUnableToOpen +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_4BCFA4  +
mov eax off_4BE0A0 +
mov [esp+4Ch+var_4C] offset aPFUnableToOp_0 +
mov [esp+4Ch+var_48] eax +
call sub_418450  +
jmp loc_4BCF73  +
***
sub esp 28h +
cmp dword ptr [eax+0Ch] 3 +
jz loc_4BD2C3  +
xor eax eax +
jmp loc_4BD360  +
cmp dword ptr [eax] 103h +
jnz loc_4BD2BC  +
mov eax [eax+10h] +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] 0 +
mov [esp+28h+var_28] offset unk_50F420 +
mov [esp+28h+var_24] eax +
call sub_44E180  +
test eax eax +
jz loc_4BD2BC  +
mov al [eax+10h] +
test al 2 +
jz loc_4BD2BC  +
mov edx ds:dword_50F260 +
shr al 2 +
and eax 1 +
and edx 1 +
cmp eax edx +
jnz loc_4BD2BC  +
mov eax [ebx+10h] +
mov [esp+28h+var_14] 1 +
mov [esp+28h+var_18] 0 +
mov [esp+28h+var_1C] 0 +
mov [esp+28h+var_20] eax +
mov eax ds:dword_514850 +
mov [esp+28h+var_24] offset word_514820 +
mov [esp+28h+var_28] eax +
call sub_4500F0  +
xor edx edx +
test eax eax +
jz loc_4BD35E  +
cmp byte ptr [eax+0Ch] 3 +
jnz loc_4BD35E  +
cmp dword ptr [eax+14h] offset off_4BFB90 +
jnz loc_4BD35E  +
xor edx edx +
cmp dword ptr [eax+18h] 0 +
setz dl  +
mov eax edx +
add esp 28h +
pop ebx  +
retn   +
***
mov edi edx +
push esi  +
push ebx  +
sub esp 7Ch +
mov [esp+7Ch+var_5C] eax +
mov eax [eax+4] +
mov [esp+7Ch+var_40] ecx +
mov [esp+7Ch+var_54] edx +
mov eax [eax+1B0h] +
mov ecx eax +
mov [esp+7Ch+var_50] eax +
mov eax edx +
mov edx [edx+4] +
mov ebx [eax] +
mov edi [eax+0Ch] +
mov eax [ecx+174h] +
mov [esp+7Ch+var_58] edx +
mov edx [ebx+28h] +
movzx ecx byte ptr [eax+3] +
cmp edx ecx +
jnz loc_4BD537  +
mov ecx [eax+38h] +
mov [esp+7Ch+var_4C] ecx +
mov ecx [eax+3Ch] +
mov [esp+7Ch+var_48] ecx +
jmp loc_4BD56B  +
movzx ecx byte ptr [eax+4] +
cmp edx ecx +
jnz loc_4BD54F  +
mov ecx [eax+40h] +
mov [esp+7Ch+var_4C] ecx +
mov ecx [eax+44h] +
mov [esp+7Ch+var_48] ecx +
jmp loc_4BD56B  +
mov [esp+7Ch+var_74] offset aElf_link_adjus +
mov [esp+7Ch+var_78] 2028h +
mov [esp+7Ch+var_7C] offset a____Binutil_12 +
call sub_44BA70  +
cmp byte ptr [eax+9] 3 +
jbe loc_4BD58D  +
mov [esp+7Ch+var_74] offset aElf_link_adjus +
mov [esp+7Ch+var_78] 202Bh +
mov [esp+7Ch+var_7C] offset a____Binutil_12 +
call sub_44BA70  +
cmp byte ptr [eax+0Ah] 20h +
mov ecx 8 +
mov edx 20h +
mov eax 0FFFFFFFFh +
mov ebp edi +
cmovz edx ecx +
mov cl 0FFh +
cmovz eax ecx +
xor esi esi +
mov [esp+7Ch+var_60] eax +
mov eax [ebx+30h] +
mov [esp+7Ch+var_44] edx +
mov [esp+7Ch+var_64] eax +
cmp esi [esp+7Ch+var_58] +
jz loc_4BD675  +
mov eax [ebp+esi*4+0] +
test eax eax +
jz loc_4BD662  +
cmp dword ptr [eax+1Ch] 0 +
jns loc_4BD5EB  +
mov [esp+7Ch+var_78] 2041h +
mov [esp+7Ch+var_7C] offset a____Binutil_12 +
call sub_44BA40  +
lea eax [esp+7Ch+var_30] +
xor edi edi +
mov [esp+7Ch+var_74] eax +
mov eax [esp+7Ch+var_64] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+var_5C] +
mov [esp+7Ch+var_7C] eax +
mov eax [esp+7Ch+var_4C] +
call eax  +
mov eax [esp+7Ch+var_50] +
mov ecx [esp+7Ch+var_44] +
mov eax [eax+174h] +
movzx eax byte ptr [eax+9] +
mov [esp+7Ch+var_68] eax +
lea eax [esp+7Ch+var_2C] +
cmp [esp+7Ch+var_68] edi +
jbe loc_4BD645  +
mov ebx [ebp+esi*4+0] +
inc edi  +
add eax 0Ch +
mov edx [esp+7Ch+var_60] +
and edx [eax-0Ch] +
mov ebx [ebx+1Ch] +
shl ebx cl +
or edx ebx +
mov [eax-0Ch] edx +
jmp loc_4BD624  +
mov eax [esp+7Ch+var_64] +
mov [esp+7Ch+var_74] eax +
lea eax [esp+7Ch+var_30] +
mov [esp+7Ch+var_78] eax +
mov eax [esp+7Ch+var_5C] +
mov [esp+7Ch+var_7C] eax +
mov eax [esp+7Ch+var_48] +
call eax  +
mov eax [esp+7Ch+var_54] +
inc esi  +
mov eax [eax] +
mov eax [eax+28h] +
add [esp+7Ch+var_64] eax +
jmp loc_4BD5BB  +
cmp [esp+7Ch+var_40] 0 +
jz loc_4BD947  +
test esi esi +
jz loc_4BD947  +
mov eax [esp+7Ch+var_50] +
mov eax [eax+174h] +
cmp byte ptr [eax+0Ah] 20h +
mov eax [esp+7Ch+var_5C] +
mov eax [eax+4] +
mov eax [eax+0Ch] +
jnz loc_4BD6CC  +
cmp eax 1 +
jz loc_4BD6F6  +
test eax eax +
mov ebx offset loc_45C1C0 +
jz loc_4BD702  +
mov [esp+7Ch+var_74] offset aElf_link_adjus +
mov [esp+7Ch+var_78] 2059h +
mov [esp+7Ch+var_7C] offset a____Binutil_12 +
call sub_44BA70  +
cmp eax 1 +
jz loc_4BD6FD  +
test eax eax +
mov ebx offset sub_45C220 +
jz loc_4BD702  +
mov [esp+7Ch+var_74] offset aElf_link_adjus +
mov [esp+7Ch+var_78] 2064h +
mov [esp+7Ch+var_7C] offset a____Binutil_12 +
call sub_44BA70  +
mov ebx offset loc_45C190 +
jmp loc_4BD702  +
mov ebx offset sub_45C1F0 +
mov eax [esp+7Ch+var_54] +
mov eax [eax] +
mov ecx [eax+28h] +
mov eax [eax+30h] +
mov [esp+7Ch+var_64] ecx +
mov edx eax +
mov [esp+7Ch+var_68] eax +
mov eax [esp+7Ch+var_58] +
imul eax ecx +
add eax edx +
cmp ecx 18h +
mov [esp+7Ch+var_60] eax +
jbe loc_4BD746  +
mov [esp+7Ch+var_74] offset aElf_link_adjus +
mov [esp+7Ch+var_78] 206Dh +
mov [esp+7Ch+var_7C] offset a____Binutil_12 +
call sub_44BA70  +
mov esi [esp+7Ch+var_68] +
mov [esp+7Ch+var_7C] esi +
mov ebp esi +
call ebx  +
mov edi eax +
mov esi edi +
mov edi ebp +
add edi [esp+7Ch+var_64] +
cmp edi [esp+7Ch+var_60] +
jnb loc_4BD774  +
mov [esp+7Ch+var_7C] edi +
call ebx  +
cmp esi eax +
ja loc_4BD76E  +
mov eax esi +
jmp loc_4BD770  +
mov ebp edi +
mov esi eax +
jmp loc_4BD757  +
mov eax [esp+7Ch+var_68] +
cmp ebp eax +
jz loc_4BD7B2  +
lea edx [esp+7Ch+var_30] +
mov esi ebp +
mov ecx [esp+7Ch+var_64] +
sub ebp eax +
mov edi edx +
movs   +
mov edi eax +
mov [esp+7Ch+var_74] ebp +
mov ebp [esp+7Ch+var_64] +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_5C] edx +
add eax ebp +
mov [esp+7Ch+var_7C] eax +
call memmove  +
mov edx [esp+7Ch+var_5C] +
mov ecx ebp +
mov esi edx +
movs   +
mov ebp [esp+7Ch+var_64] +
mov edx [esp+7Ch+var_68] +
mov [esp+7Ch+var_50] 0 +
add edx ebp +
neg ebp  +
add edx [esp+7Ch+var_64] +
cmp edx [esp+7Ch+var_60] +
mov [esp+7Ch+var_68] edx +
jnb loc_4BD91E  +
mov esi [esp+7Ch+var_68] +
mov [esp+7Ch+var_7C] esi +
lea esi [esi+ebp] +
call ebx  +
mov edi eax +
mov [esp+7Ch+var_7C] esi +
call ebx  +
cmp eax edi +
jbe loc_4BD7F3  +
add esi ebp +
jmp loc_4BD7E6  +
mov eax [esp+7Ch+var_64] +
lea edx [esi+eax] +
cmp edx [esp+7Ch+var_68] +
jz loc_4BD7C6  +
mov edi [esp+7Ch+var_68] +
mov [esp+7Ch+var_7C] edx +
mov [esp+7Ch+var_4C] edx +
mov eax edi +
sub eax edx +
mov [esp+7Ch+var_5C] eax +
call ebx  +
mov ecx [esp+7Ch+var_64] +
mov [esp+7Ch+var_48] ebp +
mov esi eax +
mov eax edi +
add edi ecx +
sub ecx eax +
mov [esp+7Ch+var_58] ecx +
mov ebp edi +
sub ebp [esp+7Ch+var_68] +
cmp edi [esp+7Ch+var_60] +
jb loc_4BD84A  +
cmp [esp+7Ch+var_50] 0 +
mov [esp+7Ch+var_58] ebp +
mov edx [esp+7Ch+var_4C] +
mov ebp [esp+7Ch+var_48] +
jnz loc_4BD890  +
jmp loc_4BD870  +
cmp [esp+7Ch+var_5C] 18000h +
jbe loc_4BD861  +
mov eax [esp+7Ch+var_58] +
add eax edi +
cmp eax 18000h +
ja loc_4BD835  +
mov [esp+7Ch+var_7C] edi +
call ebx  +
add edi [esp+7Ch+var_64] +
cmp eax esi +
jb loc_4BD829  +
jmp loc_4BD835  +
mov [esp+7Ch+var_7C] 18000h +
mov [esp+7Ch+var_4C] edx +
call sub_459B80  +
mov edx [esp+7Ch+var_4C] +
test eax eax +
mov [esp+7Ch+var_50] eax +
jz loc_4BD94E  +
mov eax [esp+7Ch+var_5C] +
cmp [esp+7Ch+var_58] eax +
mov edi [esp+7Ch+var_50] +
jnb loc_4BD8D5  +
mov esi [esp+7Ch+var_68] +
mov ecx [esp+7Ch+var_58] +
movs   +
mov ecx [esp+7Ch+var_58] +
mov [esp+7Ch+var_74] eax +
mov [esp+7Ch+var_78] edx +
mov [esp+7Ch+var_5C] edx +
lea eax [edx+ecx] +
mov [esp+7Ch+var_7C] eax +
call memmove  +
mov edx [esp+7Ch+var_5C] +
mov esi [esp+7Ch+var_50] +
mov ecx [esp+7Ch+var_58] +
mov edi edx +
movs   +
jmp loc_4BD90D  +
mov ecx [esp+7Ch+var_5C] +
mov esi edx +
movs   +
mov eax [esp+7Ch+var_68] +
mov edi [esp+7Ch+var_58] +
mov [esp+7Ch+var_7C] edx +
mov [esp+7Ch+var_4C] edx +
mov [esp+7Ch+var_78] eax +
mov [esp+7Ch+var_74] edi +
call memmove  +
mov edx [esp+7Ch+var_4C] +
mov eax edi +
mov esi [esp+7Ch+var_50] +
mov ecx [esp+7Ch+var_5C] +
add eax edx +
mov edi eax +
movs   +
mov edx [esp+7Ch+var_58] +
sub edx [esp+7Ch+var_64] +
add edx [esp+7Ch+var_68] +
jmp loc_4BD7C6  +
mov edi [esp+7Ch+var_54] +
mov eax [edi+0Ch] +
mov [esp+7Ch+var_7C] eax +
call free  +
mov eax [esp+7Ch+var_50] +
mov dword ptr [edi+0Ch] 0 +
mov [esp+7Ch+var_7C] eax +
call free  +
mov eax 1 +
jmp loc_4BD950  +
mov eax 1 +
jmp loc_4BD950  +
xor eax eax +
add esp 7Ch +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
sub esp 18h +
call sub_401500  +
mov [esp+18h+var_18] offset sub_401550 +
call sub_4BA140  +
leave   +
retn   +
***
